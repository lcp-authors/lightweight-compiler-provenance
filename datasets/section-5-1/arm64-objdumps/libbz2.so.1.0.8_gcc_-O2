
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.so.1.0.8_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000001430 <.init>:
    1430:	stp	x29, x30, [sp, #-16]!
    1434:	mov	x29, sp
    1438:	bl	1700 <ferror@plt+0x10>
    143c:	ldp	x29, x30, [sp], #16
    1440:	ret

Disassembly of section .plt:

0000000000001450 <strlen@plt-0x20>:
    1450:	stp	x16, x30, [sp, #-16]!
    1454:	adrp	x16, 1f000 <BZ2_bzerror@@Base+0x11650>
    1458:	ldr	x17, [x16, #4088]
    145c:	add	x16, x16, #0xff8
    1460:	br	x17
    1464:	nop
    1468:	nop
    146c:	nop

0000000000001470 <strlen@plt>:
    1470:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1474:	ldr	x17, [x16]
    1478:	add	x16, x16, #0x0
    147c:	br	x17

0000000000001480 <BZ2_hbMakeCodeLengths@plt>:
    1480:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1484:	ldr	x17, [x16, #8]
    1488:	add	x16, x16, #0x8
    148c:	br	x17

0000000000001490 <exit@plt>:
    1490:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1494:	ldr	x17, [x16, #16]
    1498:	add	x16, x16, #0x10
    149c:	br	x17

00000000000014a0 <__cxa_finalize@plt>:
    14a0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    14a4:	ldr	x17, [x16, #24]
    14a8:	add	x16, x16, #0x18
    14ac:	br	x17

00000000000014b0 <BZ2_bzlibVersion@plt>:
    14b0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    14b4:	ldr	x17, [x16, #32]
    14b8:	add	x16, x16, #0x20
    14bc:	br	x17

00000000000014c0 <fputc@plt>:
    14c0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    14c4:	ldr	x17, [x16, #40]
    14c8:	add	x16, x16, #0x28
    14cc:	br	x17

00000000000014d0 <fclose@plt>:
    14d0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    14d4:	ldr	x17, [x16, #48]
    14d8:	add	x16, x16, #0x30
    14dc:	br	x17

00000000000014e0 <malloc@plt>:
    14e0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    14e4:	ldr	x17, [x16, #56]
    14e8:	add	x16, x16, #0x38
    14ec:	br	x17

00000000000014f0 <BZ2_bzDecompressInit@plt>:
    14f0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    14f4:	ldr	x17, [x16, #64]
    14f8:	add	x16, x16, #0x40
    14fc:	br	x17

0000000000001500 <BZ2_bzDecompressEnd@plt>:
    1500:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1504:	ldr	x17, [x16, #72]
    1508:	add	x16, x16, #0x48
    150c:	br	x17

0000000000001510 <BZ2_bzReadClose@plt>:
    1510:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1514:	ldr	x17, [x16, #80]
    1518:	add	x16, x16, #0x50
    151c:	br	x17

0000000000001520 <fgetc@plt>:
    1520:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1524:	ldr	x17, [x16, #88]
    1528:	add	x16, x16, #0x58
    152c:	br	x17

0000000000001530 <fdopen@plt>:
    1530:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1534:	ldr	x17, [x16, #96]
    1538:	add	x16, x16, #0x60
    153c:	br	x17

0000000000001540 <BZ2_bzWriteOpen@plt>:
    1540:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1544:	ldr	x17, [x16, #104]
    1548:	add	x16, x16, #0x68
    154c:	br	x17

0000000000001550 <BZ2_bzCompressInit@plt>:
    1550:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1554:	ldr	x17, [x16, #112]
    1558:	add	x16, x16, #0x70
    155c:	br	x17

0000000000001560 <BZ2_bzCompressEnd@plt>:
    1560:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1564:	ldr	x17, [x16, #120]
    1568:	add	x16, x16, #0x78
    156c:	br	x17

0000000000001570 <BZ2_hbCreateDecodeTables@plt>:
    1570:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1574:	ldr	x17, [x16, #128]
    1578:	add	x16, x16, #0x80
    157c:	br	x17

0000000000001580 <__gmon_start__@plt>:
    1580:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1584:	ldr	x17, [x16, #136]
    1588:	add	x16, x16, #0x88
    158c:	br	x17

0000000000001590 <BZ2_decompress@plt>:
    1590:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1594:	ldr	x17, [x16, #144]
    1598:	add	x16, x16, #0x90
    159c:	br	x17

00000000000015a0 <BZ2_bzWriteClose@plt>:
    15a0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    15a4:	ldr	x17, [x16, #152]
    15a8:	add	x16, x16, #0x98
    15ac:	br	x17

00000000000015b0 <BZ2_bzCompress@plt>:
    15b0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    15b4:	ldr	x17, [x16, #160]
    15b8:	add	x16, x16, #0xa0
    15bc:	br	x17

00000000000015c0 <BZ2_bzWrite@plt>:
    15c0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    15c4:	ldr	x17, [x16, #168]
    15c8:	add	x16, x16, #0xa8
    15cc:	br	x17

00000000000015d0 <__ctype_b_loc@plt>:
    15d0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    15d4:	ldr	x17, [x16, #176]
    15d8:	add	x16, x16, #0xb0
    15dc:	br	x17

00000000000015e0 <BZ2_compressBlock@plt>:
    15e0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    15e4:	ldr	x17, [x16, #184]
    15e8:	add	x16, x16, #0xb8
    15ec:	br	x17

00000000000015f0 <fread@plt>:
    15f0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    15f4:	ldr	x17, [x16, #192]
    15f8:	add	x16, x16, #0xc0
    15fc:	br	x17

0000000000001600 <BZ2_bsInitWrite@plt>:
    1600:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1604:	ldr	x17, [x16, #200]
    1608:	add	x16, x16, #0xc8
    160c:	br	x17

0000000000001610 <free@plt>:
    1610:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1614:	ldr	x17, [x16, #208]
    1618:	add	x16, x16, #0xd0
    161c:	br	x17

0000000000001620 <ungetc@plt>:
    1620:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1624:	ldr	x17, [x16, #216]
    1628:	add	x16, x16, #0xd8
    162c:	br	x17

0000000000001630 <BZ2_bzDecompress@plt>:
    1630:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1634:	ldr	x17, [x16, #224]
    1638:	add	x16, x16, #0xe0
    163c:	br	x17

0000000000001640 <BZ2_blockSort@plt>:
    1640:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1644:	ldr	x17, [x16, #232]
    1648:	add	x16, x16, #0xe8
    164c:	br	x17

0000000000001650 <BZ2_bzWriteClose64@plt>:
    1650:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1654:	ldr	x17, [x16, #240]
    1658:	add	x16, x16, #0xf0
    165c:	br	x17

0000000000001660 <BZ2_indexIntoF@plt>:
    1660:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1664:	ldr	x17, [x16, #248]
    1668:	add	x16, x16, #0xf8
    166c:	br	x17

0000000000001670 <BZ2_hbAssignCodes@plt>:
    1670:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1674:	ldr	x17, [x16, #256]
    1678:	add	x16, x16, #0x100
    167c:	br	x17

0000000000001680 <fwrite@plt>:
    1680:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1684:	ldr	x17, [x16, #264]
    1688:	add	x16, x16, #0x108
    168c:	br	x17

0000000000001690 <fflush@plt>:
    1690:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1694:	ldr	x17, [x16, #272]
    1698:	add	x16, x16, #0x110
    169c:	br	x17

00000000000016a0 <fopen64@plt>:
    16a0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    16a4:	ldr	x17, [x16, #280]
    16a8:	add	x16, x16, #0x118
    16ac:	br	x17

00000000000016b0 <BZ2_bzReadOpen@plt>:
    16b0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    16b4:	ldr	x17, [x16, #288]
    16b8:	add	x16, x16, #0x120
    16bc:	br	x17

00000000000016c0 <BZ2_bzRead@plt>:
    16c0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    16c4:	ldr	x17, [x16, #296]
    16c8:	add	x16, x16, #0x128
    16cc:	br	x17

00000000000016d0 <BZ2_bz__AssertH__fail@plt>:
    16d0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    16d4:	ldr	x17, [x16, #304]
    16d8:	add	x16, x16, #0x130
    16dc:	br	x17

00000000000016e0 <fprintf@plt>:
    16e0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    16e4:	ldr	x17, [x16, #312]
    16e8:	add	x16, x16, #0x138
    16ec:	br	x17

00000000000016f0 <ferror@plt>:
    16f0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    16f4:	ldr	x17, [x16, #320]
    16f8:	add	x16, x16, #0x140
    16fc:	br	x17

Disassembly of section .text:

0000000000001700 <BZ2_blockSort@@Base-0x2268>:
    1700:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    1704:	ldr	x0, [x0, #4056]
    1708:	cbz	x0, 1710 <ferror@plt+0x20>
    170c:	b	1580 <__gmon_start__@plt>
    1710:	ret
    1714:	nop
    1718:	adrp	x0, 20000 <BZ2_bzerror@@Base+0x12650>
    171c:	add	x0, x0, #0xd50
    1720:	adrp	x1, 20000 <BZ2_bzerror@@Base+0x12650>
    1724:	add	x1, x1, #0xd50
    1728:	cmp	x1, x0
    172c:	b.eq	1744 <ferror@plt+0x54>  // b.none
    1730:	adrp	x1, 1f000 <BZ2_bzerror@@Base+0x11650>
    1734:	ldr	x1, [x1, #4000]
    1738:	cbz	x1, 1744 <ferror@plt+0x54>
    173c:	mov	x16, x1
    1740:	br	x16
    1744:	ret
    1748:	adrp	x0, 20000 <BZ2_bzerror@@Base+0x12650>
    174c:	add	x0, x0, #0xd50
    1750:	adrp	x1, 20000 <BZ2_bzerror@@Base+0x12650>
    1754:	add	x1, x1, #0xd50
    1758:	sub	x1, x1, x0
    175c:	lsr	x2, x1, #63
    1760:	add	x1, x2, x1, asr #3
    1764:	cmp	xzr, x1, asr #1
    1768:	asr	x1, x1, #1
    176c:	b.eq	1784 <ferror@plt+0x94>  // b.none
    1770:	adrp	x2, 1f000 <BZ2_bzerror@@Base+0x11650>
    1774:	ldr	x2, [x2, #4064]
    1778:	cbz	x2, 1784 <ferror@plt+0x94>
    177c:	mov	x16, x2
    1780:	br	x16
    1784:	ret
    1788:	stp	x29, x30, [sp, #-32]!
    178c:	mov	x29, sp
    1790:	str	x19, [sp, #16]
    1794:	adrp	x19, 20000 <BZ2_bzerror@@Base+0x12650>
    1798:	ldrb	w0, [x19, #3408]
    179c:	cbnz	w0, 17c4 <ferror@plt+0xd4>
    17a0:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    17a4:	ldr	x0, [x0, #4008]
    17a8:	cbz	x0, 17b8 <ferror@plt+0xc8>
    17ac:	adrp	x0, 20000 <BZ2_bzerror@@Base+0x12650>
    17b0:	ldr	x0, [x0, #328]
    17b4:	bl	14a0 <__cxa_finalize@plt>
    17b8:	bl	1718 <ferror@plt+0x28>
    17bc:	mov	w0, #0x1                   	// #1
    17c0:	strb	w0, [x19, #3408]
    17c4:	ldr	x19, [sp, #16]
    17c8:	ldp	x29, x30, [sp], #32
    17cc:	ret
    17d0:	b	1748 <ferror@plt+0x58>
    17d4:	nop
    17d8:	sub	sp, sp, #0xbc0
    17dc:	cmp	w4, #0x3
    17e0:	stp	x29, x30, [sp]
    17e4:	mov	x29, sp
    17e8:	stp	x19, x20, [sp, #16]
    17ec:	mov	x20, x0
    17f0:	mov	x19, x1
    17f4:	stp	x21, x22, [sp, #32]
    17f8:	mov	x22, x2
    17fc:	mov	w21, w3
    1800:	stp	x23, x24, [sp, #48]
    1804:	stp	x25, x26, [sp, #64]
    1808:	stp	x27, x28, [sp, #80]
    180c:	str	w4, [sp, #132]
    1810:	b.gt	20e4 <ferror@plt+0x9f4>
    1814:	add	x2, sp, #0x7b8
    1818:	mov	x3, x2
    181c:	add	x4, x2, #0x404
    1820:	mov	x0, x2
    1824:	nop
    1828:	str	wzr, [x0], #4
    182c:	cmp	x4, x0
    1830:	b.ne	1828 <ferror@plt+0x138>  // b.any
    1834:	cmp	w21, #0x0
    1838:	b.le	1868 <ferror@plt+0x178>
    183c:	sub	w6, w21, #0x1
    1840:	mov	x1, x19
    1844:	add	x6, x6, #0x1
    1848:	add	x6, x6, x19
    184c:	nop
    1850:	ldrb	w5, [x1], #1
    1854:	cmp	x6, x1
    1858:	ldr	w0, [x2, x5, lsl #2]
    185c:	add	w0, w0, #0x1
    1860:	str	w0, [x2, x5, lsl #2]
    1864:	b.ne	1850 <ferror@plt+0x160>  // b.any
    1868:	add	x10, sp, #0x3b8
    186c:	mov	x1, #0x1                   	// #1
    1870:	lsl	x0, x1, #2
    1874:	add	x1, x1, #0x1
    1878:	add	x5, x2, x0
    187c:	add	x0, x10, x0
    1880:	cmp	x1, #0x101
    1884:	ldur	w5, [x5, #-4]
    1888:	stur	w5, [x0, #-4]
    188c:	b.ne	1870 <ferror@plt+0x180>  // b.any
    1890:	add	x0, x2, #0x4
    1894:	nop
    1898:	ldp	w5, w1, [x0, #-4]
    189c:	add	w1, w1, w5
    18a0:	str	w1, [x0], #4
    18a4:	cmp	x4, x0
    18a8:	b.ne	1898 <ferror@plt+0x1a8>  // b.any
    18ac:	cmp	w21, #0x0
    18b0:	add	w5, w21, #0x1f
    18b4:	csel	w5, w5, w21, lt  // lt = tstop
    18b8:	asr	w5, w5, #5
    18bc:	add	w5, w5, #0x2
    18c0:	b.le	2160 <ferror@plt+0xa70>
    18c4:	mov	x0, #0x0                   	// #0
    18c8:	ldrb	w4, [x19, x0]
    18cc:	ldr	w1, [x2, x4, lsl #2]
    18d0:	sub	w1, w1, #0x1
    18d4:	str	w1, [x2, x4, lsl #2]
    18d8:	str	w0, [x20, w1, sxtw #2]
    18dc:	add	x0, x0, #0x1
    18e0:	cmp	w21, w0
    18e4:	b.gt	18c8 <ferror@plt+0x1d8>
    18e8:	mov	x0, #0x0                   	// #0
    18ec:	nop
    18f0:	str	wzr, [x22, x0, lsl #2]
    18f4:	add	x0, x0, #0x1
    18f8:	cmp	w5, w0
    18fc:	b.gt	18f0 <ferror@plt+0x200>
    1900:	add	x5, x2, #0x400
    1904:	mov	w4, #0x1                   	// #1
    1908:	ldr	w1, [x3], #4
    190c:	cmp	x5, x3
    1910:	asr	w0, w1, #5
    1914:	lsl	w1, w4, w1
    1918:	sxtw	x0, w0
    191c:	ldr	w2, [x22, x0, lsl #2]
    1920:	orr	w1, w2, w1
    1924:	str	w1, [x22, x0, lsl #2]
    1928:	b.ne	1908 <ferror@plt+0x218>  // b.any
    192c:	mov	w1, w21
    1930:	add	w7, w21, #0x40
    1934:	mov	w5, #0x1                   	// #1
    1938:	asr	w3, w1, #5
    193c:	add	w0, w1, #0x1
    1940:	lsl	w6, w5, w1
    1944:	add	w1, w1, #0x2
    1948:	sxtw	x3, w3
    194c:	asr	w2, w0, #5
    1950:	lsl	w0, w5, w0
    1954:	cmp	w7, w1
    1958:	sxtw	x2, w2
    195c:	ldr	w4, [x22, x3, lsl #2]
    1960:	orr	w4, w4, w6
    1964:	str	w4, [x22, x3, lsl #2]
    1968:	ldr	w3, [x22, x2, lsl #2]
    196c:	bic	w0, w3, w0
    1970:	str	w0, [x22, x2, lsl #2]
    1974:	b.ne	1938 <ferror@plt+0x248>  // b.any
    1978:	mov	w11, #0x1                   	// #1
    197c:	add	x13, sp, #0x98
    1980:	add	x12, sp, #0x228
    1984:	mov	w24, w11
    1988:	mov	w23, w21
    198c:	str	x10, [sp, #136]
    1990:	ldr	w0, [sp, #132]
    1994:	cmp	w0, #0x3
    1998:	b.gt	20bc <ferror@plt+0x9cc>
    199c:	cmp	w23, #0x0
    19a0:	mov	x1, #0x0                   	// #0
    19a4:	mov	w2, #0x0                   	// #0
    19a8:	mov	w6, #0x1                   	// #1
    19ac:	b.le	19e8 <ferror@plt+0x2f8>
    19b0:	asr	w3, w1, #5
    19b4:	ldr	w0, [x20, x1, lsl #2]
    19b8:	lsl	w5, w6, w1
    19bc:	sub	w0, w0, w24
    19c0:	ldr	w4, [x22, w3, sxtw #2]
    19c4:	add	w3, w0, w23
    19c8:	tst	w5, w4
    19cc:	csel	w2, w2, w1, eq  // eq = none
    19d0:	cmp	w0, #0x0
    19d4:	csel	w0, w3, w0, lt  // lt = tstop
    19d8:	add	x1, x1, #0x1
    19dc:	cmp	w23, w1
    19e0:	str	w2, [x19, w0, sxtw #2]
    19e4:	b.gt	19b0 <ferror@plt+0x2c0>
    19e8:	mov	w15, #0xaaab                	// #43691
    19ec:	mov	x26, x13
    19f0:	mov	x28, x12
    19f4:	mov	w27, #0xffffffff            	// #-1
    19f8:	movk	w15, #0xaaaa, lsl #16
    19fc:	str	wzr, [sp, #128]
    1a00:	add	w0, w27, #0x1
    1a04:	mov	w5, #0x1                   	// #1
    1a08:	and	w2, w0, #0x1f
    1a0c:	asr	w3, w0, #5
    1a10:	lsl	w4, w5, w2
    1a14:	ldr	w1, [x22, w3, sxtw #2]
    1a18:	tst	w4, w1
    1a1c:	b.eq	1ce0 <ferror@plt+0x5f0>  // b.none
    1a20:	cbz	w2, 1fdc <ferror@plt+0x8ec>
    1a24:	mov	w25, w0
    1a28:	add	w0, w0, #0x1
    1a2c:	and	w2, w0, #0x1f
    1a30:	asr	w3, w0, #5
    1a34:	lsl	w4, w5, w2
    1a38:	ldr	w1, [x22, w3, sxtw #2]
    1a3c:	tst	w4, w1
    1a40:	b.ne	1a20 <ferror@plt+0x330>  // b.any
    1a44:	cmp	w23, w25
    1a48:	b.le	1c08 <ferror@plt+0x518>
    1a4c:	mov	w1, w0
    1a50:	mov	w5, #0x1                   	// #1
    1a54:	cbnz	w2, 1a60 <ferror@plt+0x370>
    1a58:	b	1ba8 <ferror@plt+0x4b8>
    1a5c:	cbz	w2, 1bb0 <ferror@plt+0x4c0>
    1a60:	mov	w27, w1
    1a64:	add	w1, w1, #0x1
    1a68:	and	w2, w1, #0x1f
    1a6c:	asr	w3, w1, #5
    1a70:	lsl	w4, w5, w2
    1a74:	ldr	w3, [x22, w3, sxtw #2]
    1a78:	tst	w4, w3
    1a7c:	b.eq	1a5c <ferror@plt+0x36c>  // b.none
    1a80:	cmp	w23, w27
    1a84:	b.le	1c08 <ferror@plt+0x518>
    1a88:	cmp	w1, w0
    1a8c:	b.le	1a00 <ferror@plt+0x310>
    1a90:	sub	w0, w1, w0
    1a94:	ldr	w1, [sp, #128]
    1a98:	add	w0, w0, #0x1
    1a9c:	mov	w5, #0x0                   	// #0
    1aa0:	add	w0, w1, w0
    1aa4:	mov	w6, #0x1                   	// #1
    1aa8:	mov	x1, x22
    1aac:	str	w0, [sp, #128]
    1ab0:	mov	w0, w23
    1ab4:	mov	w21, w27
    1ab8:	mov	w4, w27
    1abc:	sxtw	x23, w6
    1ac0:	mov	w22, w25
    1ac4:	mov	w6, w0
    1ac8:	str	w27, [sp, #552]
    1acc:	mov	w27, w24
    1ad0:	mov	w24, w5
    1ad4:	mov	x5, x1
    1ad8:	mov	x7, #0xfffffffffffffff0    	// #-16
    1adc:	str	w25, [sp, #152]
    1ae0:	sub	w0, w21, w22
    1ae4:	sub	w9, w23, #0x1
    1ae8:	cmp	w0, #0x9
    1aec:	b.le	1d6c <ferror@plt+0x67c>
    1af0:	mov	w0, #0x1dc5                	// #7621
    1af4:	mul	w24, w24, w0
    1af8:	add	w24, w24, #0x1
    1afc:	and	w24, w24, #0x7fff
    1b00:	umull	x0, w24, w15
    1b04:	lsr	x0, x0, #33
    1b08:	add	w0, w0, w0, lsl #1
    1b0c:	subs	w0, w24, w0
    1b10:	b.ne	207c <ferror@plt+0x98c>  // b.any
    1b14:	ldr	w0, [x20, w22, sxtw #2]
    1b18:	ldr	w14, [x19, x0, lsl #2]
    1b1c:	cmp	w22, w21
    1b20:	b.gt	1d10 <ferror@plt+0x620>
    1b24:	add	x13, x20, w22, sxtw #2
    1b28:	sxtw	x17, w22
    1b2c:	mov	x11, x13
    1b30:	mov	w0, w22
    1b34:	mov	w8, w21
    1b38:	mov	w16, w22
    1b3c:	mov	w3, w21
    1b40:	ldr	w2, [x11]
    1b44:	mov	w12, w0
    1b48:	ldr	w1, [x19, w2, uxtw #2]
    1b4c:	sub	w1, w1, w14
    1b50:	cmp	w1, #0x0
    1b54:	cbz	w1, 1fb0 <ferror@plt+0x8c0>
    1b58:	b.le	1fd0 <ferror@plt+0x8e0>
    1b5c:	cmp	w0, w3
    1b60:	b.gt	1d08 <ferror@plt+0x618>
    1b64:	add	x2, x20, w3, sxtw #2
    1b68:	b	1b7c <ferror@plt+0x48c>
    1b6c:	b.mi	1ce8 <ferror@plt+0x5f8>  // b.first
    1b70:	sub	x2, x2, #0x4
    1b74:	cmp	w0, w3
    1b78:	b.gt	1d08 <ferror@plt+0x618>
    1b7c:	ldr	w10, [x2]
    1b80:	sub	w3, w3, #0x1
    1b84:	ldr	w1, [x19, w10, uxtw #2]
    1b88:	subs	w1, w1, w14
    1b8c:	cbnz	w1, 1b6c <ferror@plt+0x47c>
    1b90:	sxtw	x1, w8
    1b94:	sub	w8, w8, #0x1
    1b98:	ldr	w18, [x20, x1, lsl #2]
    1b9c:	str	w18, [x2]
    1ba0:	str	w10, [x20, x1, lsl #2]
    1ba4:	b	1b70 <ferror@plt+0x480>
    1ba8:	ldr	w3, [x22, w3, sxtw #2]
    1bac:	nop
    1bb0:	cbnz	w3, 1bc8 <ferror@plt+0x4d8>
    1bb4:	nop
    1bb8:	add	w1, w1, #0x20
    1bbc:	asr	w2, w1, #5
    1bc0:	ldr	w3, [x22, w2, sxtw #2]
    1bc4:	cbz	w3, 1bb8 <ferror@plt+0x4c8>
    1bc8:	mov	w2, #0x1                   	// #1
    1bcc:	sub	w27, w1, #0x1
    1bd0:	mov	w4, w2
    1bd4:	lsl	w2, w2, w1
    1bd8:	tst	w2, w3
    1bdc:	b.ne	1a80 <ferror@plt+0x390>  // b.any
    1be0:	mov	w27, w1
    1be4:	add	w1, w1, #0x1
    1be8:	asr	w2, w1, #5
    1bec:	lsl	w3, w4, w1
    1bf0:	ldr	w2, [x22, w2, sxtw #2]
    1bf4:	tst	w3, w2
    1bf8:	b.eq	1be0 <ferror@plt+0x4f0>  // b.none
    1bfc:	cmp	w23, w27
    1c00:	b.gt	1a88 <ferror@plt+0x398>
    1c04:	nop
    1c08:	ldr	w0, [sp, #132]
    1c0c:	mov	x13, x26
    1c10:	mov	x12, x28
    1c14:	cmp	w0, #0x3
    1c18:	b.le	1c40 <ferror@plt+0x550>
    1c1c:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    1c20:	ldr	w2, [sp, #128]
    1c24:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    1c28:	add	x1, x1, #0xa20
    1c2c:	ldr	x0, [x0, #4016]
    1c30:	stp	x26, x28, [sp, #104]
    1c34:	ldr	x0, [x0]
    1c38:	bl	16e0 <fprintf@plt>
    1c3c:	ldp	x13, x12, [sp, #104]
    1c40:	lsl	w24, w24, #1
    1c44:	ldr	w0, [sp, #128]
    1c48:	cmp	w0, #0x0
    1c4c:	ccmp	w23, w24, #0x1, ne  // ne = any
    1c50:	b.ge	1990 <ferror@plt+0x2a0>  // b.tcont
    1c54:	ldr	w0, [sp, #132]
    1c58:	mov	w21, w23
    1c5c:	ldr	x10, [sp, #136]
    1c60:	cmp	w0, #0x3
    1c64:	b.gt	212c <ferror@plt+0xa3c>
    1c68:	cmp	w23, #0x0
    1c6c:	b.le	1cc0 <ferror@plt+0x5d0>
    1c70:	ldr	w1, [sp, #952]
    1c74:	mov	x3, #0x0                   	// #0
    1c78:	mov	w2, #0x0                   	// #0
    1c7c:	mov	x4, #0x0                   	// #0
    1c80:	mov	x0, x4
    1c84:	cbnz	w1, 1c9c <ferror@plt+0x5ac>
    1c88:	add	w2, w0, #0x1
    1c8c:	add	x0, x0, #0x1
    1c90:	ldr	w1, [x10, x0, lsl #2]
    1c94:	cbz	w1, 1c88 <ferror@plt+0x598>
    1c98:	sxtw	x4, w2
    1c9c:	ldr	w0, [x20, x3, lsl #2]
    1ca0:	sub	w1, w1, #0x1
    1ca4:	str	w1, [x10, x4, lsl #2]
    1ca8:	add	x3, x3, #0x1
    1cac:	cmp	w21, w3
    1cb0:	strb	w2, [x19, x0]
    1cb4:	b.gt	1c80 <ferror@plt+0x590>
    1cb8:	cmp	w2, #0xff
    1cbc:	b.gt	2108 <ferror@plt+0xa18>
    1cc0:	ldp	x29, x30, [sp]
    1cc4:	ldp	x19, x20, [sp, #16]
    1cc8:	ldp	x21, x22, [sp, #32]
    1ccc:	ldp	x23, x24, [sp, #48]
    1cd0:	ldp	x25, x26, [sp, #64]
    1cd4:	ldp	x27, x28, [sp, #80]
    1cd8:	add	sp, sp, #0xbc0
    1cdc:	ret
    1ce0:	mov	w25, w27
    1ce4:	b	1a44 <ferror@plt+0x354>
    1ce8:	add	w12, w0, #0x1
    1cec:	ldr	w1, [x11]
    1cf0:	mov	w0, w12
    1cf4:	str	w10, [x11]
    1cf8:	str	w1, [x2]
    1cfc:	add	x11, x11, #0x4
    1d00:	cmp	w0, w3
    1d04:	b.le	1b40 <ferror@plt+0x450>
    1d08:	cmp	w16, w8
    1d0c:	b.le	1ec4 <ferror@plt+0x7d4>
    1d10:	cbz	w9, 1e6c <ferror@plt+0x77c>
    1d14:	sub	w0, w23, #0x2
    1d18:	sxtw	x23, w9
    1d1c:	sxtw	x0, w0
    1d20:	ldr	w22, [x26, x0, lsl #2]
    1d24:	ldr	w21, [x28, x0, lsl #2]
    1d28:	cmp	w23, #0x62
    1d2c:	b.le	1ae0 <ferror@plt+0x3f0>
    1d30:	mov	w0, #0x3ec                 	// #1004
    1d34:	str	w4, [sp, #104]
    1d38:	str	x5, [sp, #112]
    1d3c:	str	w6, [sp, #124]
    1d40:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    1d44:	sub	w0, w21, w22
    1d48:	mov	w15, #0xaaab                	// #43691
    1d4c:	ldr	w4, [sp, #104]
    1d50:	sub	w9, w23, #0x1
    1d54:	ldr	w6, [sp, #124]
    1d58:	cmp	w0, #0x9
    1d5c:	movk	w15, #0xaaaa, lsl #16
    1d60:	mov	x7, #0xfffffffffffffff0    	// #-16
    1d64:	ldr	x5, [sp, #112]
    1d68:	b.gt	1af0 <ferror@plt+0x400>
    1d6c:	cmp	w22, w21
    1d70:	b.eq	1d10 <ferror@plt+0x620>  // b.none
    1d74:	cmp	w0, #0x3
    1d78:	b.le	1df0 <ferror@plt+0x700>
    1d7c:	sub	w12, w21, #0x4
    1d80:	cmp	w12, w22
    1d84:	b.lt	1df0 <ferror@plt+0x700>  // b.tstop
    1d88:	sxtw	x12, w12
    1d8c:	mov	w11, w21
    1d90:	ldr	w13, [x20, x12, lsl #2]
    1d94:	add	x0, x7, w11, sxtw #2
    1d98:	add	x3, x20, x12, lsl #2
    1d9c:	cmp	w11, w21
    1da0:	add	x0, x20, x0
    1da4:	mov	w1, w11
    1da8:	ldr	w10, [x19, w13, sxtw #2]
    1dac:	b.le	1dc4 <ferror@plt+0x6d4>
    1db0:	b	1ddc <ferror@plt+0x6ec>
    1db4:	str	w2, [x0]
    1db8:	cmp	w1, w21
    1dbc:	add	x0, x3, #0x10
    1dc0:	b.gt	205c <ferror@plt+0x96c>
    1dc4:	ldr	w2, [x0, #16]
    1dc8:	add	w1, w1, #0x4
    1dcc:	mov	x3, x0
    1dd0:	ldr	w8, [x19, w2, uxtw #2]
    1dd4:	cmp	w10, w8
    1dd8:	b.hi	1db4 <ferror@plt+0x6c4>  // b.pmore
    1ddc:	str	w13, [x3]
    1de0:	sub	x12, x12, #0x1
    1de4:	cmp	w22, w12
    1de8:	sub	w11, w11, #0x1
    1dec:	b.le	1d90 <ferror@plt+0x6a0>
    1df0:	sub	w11, w21, #0x1
    1df4:	mov	w10, w21
    1df8:	cmp	w11, w22
    1dfc:	mov	x14, #0xfffffffffffffffc    	// #-4
    1e00:	sxtw	x11, w11
    1e04:	b.lt	1d10 <ferror@plt+0x620>  // b.tstop
    1e08:	ldr	w13, [x20, x11, lsl #2]
    1e0c:	add	x0, x14, w10, sxtw #2
    1e10:	add	x3, x20, x11, lsl #2
    1e14:	cmp	w10, w21
    1e18:	add	x0, x20, x0
    1e1c:	mov	w1, w10
    1e20:	ldr	w12, [x19, w13, sxtw #2]
    1e24:	b.le	1e3c <ferror@plt+0x74c>
    1e28:	b	1e54 <ferror@plt+0x764>
    1e2c:	str	w2, [x0]
    1e30:	cmp	w1, w21
    1e34:	add	x0, x3, #0x4
    1e38:	b.gt	203c <ferror@plt+0x94c>
    1e3c:	ldr	w2, [x0, #4]
    1e40:	add	w1, w1, #0x1
    1e44:	mov	x3, x0
    1e48:	ldr	w8, [x19, w2, uxtw #2]
    1e4c:	cmp	w12, w8
    1e50:	b.hi	1e2c <ferror@plt+0x73c>  // b.pmore
    1e54:	str	w13, [x3]
    1e58:	sub	x11, x11, #0x1
    1e5c:	cmp	w22, w11
    1e60:	sub	w10, w10, #0x1
    1e64:	b.le	1e08 <ferror@plt+0x718>
    1e68:	cbnz	w9, 1d14 <ferror@plt+0x624>
    1e6c:	mov	w24, w27
    1e70:	mov	x22, x5
    1e74:	mov	w27, w4
    1e78:	sxtw	x25, w25
    1e7c:	mov	w23, w6
    1e80:	mov	w1, #0xffffffff            	// #-1
    1e84:	mov	w6, #0x1                   	// #1
    1e88:	ldr	w4, [x20, x25, lsl #2]
    1e8c:	asr	w0, w25, #5
    1e90:	mov	w3, w1
    1e94:	lsl	w5, w6, w25
    1e98:	sxtw	x0, w0
    1e9c:	add	x25, x25, #0x1
    1ea0:	ldr	w1, [x19, x4, lsl #2]
    1ea4:	cmp	w1, w3
    1ea8:	b.eq	1eb8 <ferror@plt+0x7c8>  // b.none
    1eac:	ldr	w2, [x22, x0, lsl #2]
    1eb0:	orr	w2, w2, w5
    1eb4:	str	w2, [x22, x0, lsl #2]
    1eb8:	cmp	w27, w25
    1ebc:	b.ge	1e88 <ferror@plt+0x798>  // b.tcont
    1ec0:	b	1a00 <ferror@plt+0x310>
    1ec4:	sub	w1, w16, w22
    1ec8:	sub	w0, w12, w16
    1ecc:	cmp	w0, w1
    1ed0:	csel	w0, w0, w1, le
    1ed4:	cmp	w0, #0x0
    1ed8:	sub	w1, w12, w0
    1edc:	b.le	1f14 <ferror@plt+0x824>
    1ee0:	sub	w0, w0, #0x1
    1ee4:	sxtw	x2, w1
    1ee8:	add	x1, x0, x17
    1eec:	add	x0, x20, #0x4
    1ef0:	sub	x17, x2, x17
    1ef4:	add	x0, x0, x1, lsl #2
    1ef8:	ldr	w2, [x13, x17, lsl #2]
    1efc:	ldr	w1, [x13]
    1f00:	str	w2, [x13]
    1f04:	str	w1, [x13, x17, lsl #2]
    1f08:	add	x13, x13, #0x4
    1f0c:	cmp	x0, x13
    1f10:	b.ne	1ef8 <ferror@plt+0x808>  // b.any
    1f14:	sub	w3, w8, w3
    1f18:	sub	w1, w21, w8
    1f1c:	cmp	w1, w3
    1f20:	csel	w1, w1, w3, le
    1f24:	cmp	w1, #0x0
    1f28:	sub	w0, w21, w1
    1f2c:	b.le	1f70 <ferror@plt+0x880>
    1f30:	sxtw	x2, w12
    1f34:	sub	w1, w1, #0x1
    1f38:	add	x1, x1, x2
    1f3c:	sxtw	x0, w0
    1f40:	add	x8, x20, #0x4
    1f44:	sub	x2, x0, x2
    1f48:	add	x8, x8, x1, lsl #2
    1f4c:	add	x1, x20, w12, sxtw #2
    1f50:	mov	x0, x1
    1f54:	ldr	w10, [x0], #4
    1f58:	cmp	x8, x0
    1f5c:	ldr	w11, [x0, x2, lsl #2]
    1f60:	str	w11, [x1]
    1f64:	mov	x1, x0
    1f68:	str	w10, [x0, x2, lsl #2]
    1f6c:	b.ne	1f50 <ferror@plt+0x860>  // b.any
    1f70:	add	w0, w12, w22
    1f74:	sub	w3, w21, w3
    1f78:	sub	w0, w0, w16
    1f7c:	add	w1, w3, #0x1
    1f80:	sub	w0, w0, #0x1
    1f84:	sub	w3, w21, w1
    1f88:	sub	w8, w0, w22
    1f8c:	add	w2, w23, #0x1
    1f90:	cmp	w8, w3
    1f94:	b.le	2090 <ferror@plt+0x9a0>
    1f98:	str	w0, [x28, w9, sxtw #2]
    1f9c:	mov	w22, w1
    1fa0:	str	w1, [x26, x23, lsl #2]
    1fa4:	str	w21, [x28, x23, lsl #2]
    1fa8:	sxtw	x23, w2
    1fac:	b	1d28 <ferror@plt+0x638>
    1fb0:	sxtw	x1, w16
    1fb4:	add	w0, w0, #0x1
    1fb8:	add	w16, w16, #0x1
    1fbc:	mov	w12, w0
    1fc0:	ldr	w10, [x20, x1, lsl #2]
    1fc4:	str	w10, [x11]
    1fc8:	str	w2, [x20, x1, lsl #2]
    1fcc:	b	1cfc <ferror@plt+0x60c>
    1fd0:	add	w0, w0, #0x1
    1fd4:	mov	w12, w0
    1fd8:	b	1cfc <ferror@plt+0x60c>
    1fdc:	cmn	w1, #0x1
    1fe0:	b.ne	2000 <ferror@plt+0x910>  // b.any
    1fe4:	nop
    1fe8:	add	w0, w0, #0x20
    1fec:	asr	w3, w0, #5
    1ff0:	ldr	w1, [x22, w3, sxtw #2]
    1ff4:	cmn	w1, #0x1
    1ff8:	b.eq	1fe8 <ferror@plt+0x8f8>  // b.none
    1ffc:	and	w2, w0, #0x1f
    2000:	mov	w4, #0x1                   	// #1
    2004:	sub	w25, w0, #0x1
    2008:	mov	w5, w4
    200c:	lsl	w4, w4, w2
    2010:	tst	w4, w1
    2014:	b.eq	1a44 <ferror@plt+0x354>  // b.none
    2018:	mov	w25, w0
    201c:	add	w0, w0, #0x1
    2020:	and	w2, w0, #0x1f
    2024:	asr	w3, w0, #5
    2028:	lsl	w4, w5, w2
    202c:	ldr	w1, [x22, w3, sxtw #2]
    2030:	tst	w4, w1
    2034:	b.ne	2018 <ferror@plt+0x928>  // b.any
    2038:	b	1a44 <ferror@plt+0x354>
    203c:	add	x1, x14, w1, sxtw #2
    2040:	sub	x11, x11, #0x1
    2044:	add	x3, x20, x1
    2048:	cmp	w22, w11
    204c:	sub	w10, w10, #0x1
    2050:	str	w13, [x3]
    2054:	b.le	1e08 <ferror@plt+0x718>
    2058:	b	1e68 <ferror@plt+0x778>
    205c:	add	x1, x7, w1, sxtw #2
    2060:	sub	x12, x12, #0x1
    2064:	add	x3, x20, x1
    2068:	cmp	w22, w12
    206c:	sub	w11, w11, #0x1
    2070:	str	w13, [x3]
    2074:	b.le	1d90 <ferror@plt+0x6a0>
    2078:	b	1df0 <ferror@plt+0x700>
    207c:	cmp	w0, #0x1
    2080:	b.eq	20a8 <ferror@plt+0x9b8>  // b.none
    2084:	ldr	w0, [x20, w21, sxtw #2]
    2088:	ldr	w14, [x19, x0, lsl #2]
    208c:	b	1b1c <ferror@plt+0x42c>
    2090:	str	w1, [x26, w9, sxtw #2]
    2094:	mov	w21, w0
    2098:	str	w0, [x28, x23, lsl #2]
    209c:	str	w22, [x26, x23, lsl #2]
    20a0:	sxtw	x23, w2
    20a4:	b	1d28 <ferror@plt+0x638>
    20a8:	add	w0, w22, w21
    20ac:	asr	w0, w0, #1
    20b0:	ldr	w0, [x20, w0, sxtw #2]
    20b4:	ldr	w14, [x19, x0, lsl #2]
    20b8:	b	1b1c <ferror@plt+0x42c>
    20bc:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    20c0:	mov	w2, w24
    20c4:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    20c8:	add	x1, x1, #0xa08
    20cc:	ldr	x0, [x0, #4016]
    20d0:	stp	x13, x12, [sp, #104]
    20d4:	ldr	x0, [x0]
    20d8:	bl	16e0 <fprintf@plt>
    20dc:	ldp	x13, x12, [sp, #104]
    20e0:	b	199c <ferror@plt+0x2ac>
    20e4:	adrp	x3, 1f000 <BZ2_bzerror@@Base+0x11650>
    20e8:	adrp	x0, d000 <BZ2_bzReadOpen@@Base+0x270>
    20ec:	mov	x2, #0x1b                  	// #27
    20f0:	mov	x1, #0x1                   	// #1
    20f4:	ldr	x3, [x3, #4016]
    20f8:	add	x0, x0, #0x9e8
    20fc:	ldr	x3, [x3]
    2100:	bl	1680 <fwrite@plt>
    2104:	b	1814 <ferror@plt+0x124>
    2108:	ldp	x29, x30, [sp]
    210c:	mov	w0, #0x3ed                 	// #1005
    2110:	ldp	x19, x20, [sp, #16]
    2114:	ldp	x21, x22, [sp, #32]
    2118:	ldp	x23, x24, [sp, #48]
    211c:	ldp	x25, x26, [sp, #64]
    2120:	ldp	x27, x28, [sp, #80]
    2124:	add	sp, sp, #0xbc0
    2128:	b	16d0 <BZ2_bz__AssertH__fail@plt>
    212c:	adrp	x3, 1f000 <BZ2_bzerror@@Base+0x11650>
    2130:	adrp	x0, d000 <BZ2_bzReadOpen@@Base+0x270>
    2134:	mov	x2, #0x21                  	// #33
    2138:	add	x0, x0, #0xa38
    213c:	ldr	x3, [x3, #4016]
    2140:	mov	x1, #0x1                   	// #1
    2144:	str	x10, [sp, #104]
    2148:	ldr	x3, [x3]
    214c:	bl	1680 <fwrite@plt>
    2150:	cmp	w23, #0x0
    2154:	ldr	x10, [sp, #104]
    2158:	b.gt	1c70 <ferror@plt+0x580>
    215c:	b	1cc0 <ferror@plt+0x5d0>
    2160:	cmp	w5, #0x0
    2164:	b.le	1900 <ferror@plt+0x210>
    2168:	b	18e8 <ferror@plt+0x1f8>
    216c:	nop
    2170:	mov	x12, #0x1300                	// #4864
    2174:	sub	sp, sp, x12
    2178:	cmp	w5, #0x3
    217c:	stp	x29, x30, [sp]
    2180:	mov	x29, sp
    2184:	stp	x19, x20, [sp, #16]
    2188:	stp	x21, x22, [sp, #32]
    218c:	stp	x23, x24, [sp, #48]
    2190:	stp	x25, x26, [sp, #64]
    2194:	mov	x25, x1
    2198:	stp	x27, x28, [sp, #80]
    219c:	str	x3, [sp, #160]
    21a0:	stp	x0, x6, [sp, #200]
    21a4:	stp	w5, w4, [sp, #252]
    21a8:	str	x2, [sp, #280]
    21ac:	b.gt	38e4 <ferror@plt+0x21f4>
    21b0:	ldr	x2, [sp, #160]
    21b4:	add	x0, x2, #0x40, lsl #12
    21b8:	str	x0, [sp, #328]
    21bc:	nop
    21c0:	str	wzr, [x0]
    21c4:	cmp	x2, x0
    21c8:	sub	x0, x0, #0x4
    21cc:	b.ne	21c0 <ferror@plt+0xad0>  // b.any
    21d0:	ldr	w1, [sp, #256]
    21d4:	ldrb	w0, [x25]
    21d8:	sub	w3, w1, #0x1
    21dc:	str	w3, [sp, #304]
    21e0:	cmp	w3, #0x2
    21e4:	lsl	w0, w0, #8
    21e8:	b.le	394c <ferror@plt+0x225c>
    21ec:	sub	w5, w1, #0x4
    21f0:	sbfiz	x2, x3, #1, #32
    21f4:	ldr	x6, [sp, #280]
    21f8:	lsr	w5, w5, #2
    21fc:	add	x4, x2, #0x2
    2200:	add	x3, x25, w3, sxtw
    2204:	sub	x1, x6, #0xa
    2208:	sub	x4, x4, w5, uxtw #3
    220c:	add	x4, x4, x1
    2210:	add	x2, x6, x2
    2214:	ldr	x1, [sp, #160]
    2218:	strh	wzr, [x2]
    221c:	sub	x2, x2, #0x8
    2220:	sub	x3, x3, #0x4
    2224:	ldrb	w6, [x3, #4]
    2228:	lsl	w6, w6, #8
    222c:	orr	w0, w6, w0, asr #8
    2230:	sxtw	x7, w0
    2234:	ldr	w6, [x1, x7, lsl #2]
    2238:	add	w6, w6, #0x1
    223c:	str	w6, [x1, x7, lsl #2]
    2240:	strh	wzr, [x2, #6]
    2244:	ldrb	w6, [x3, #3]
    2248:	lsl	w6, w6, #8
    224c:	orr	w0, w6, w0, asr #8
    2250:	sxtw	x7, w0
    2254:	ldr	w6, [x1, x7, lsl #2]
    2258:	add	w6, w6, #0x1
    225c:	str	w6, [x1, x7, lsl #2]
    2260:	strh	wzr, [x2, #4]
    2264:	ldrb	w6, [x3, #2]
    2268:	lsl	w6, w6, #8
    226c:	orr	w0, w6, w0, asr #8
    2270:	sxtw	x7, w0
    2274:	ldr	w6, [x1, x7, lsl #2]
    2278:	add	w6, w6, #0x1
    227c:	str	w6, [x1, x7, lsl #2]
    2280:	strh	wzr, [x2, #2]
    2284:	cmp	x4, x2
    2288:	ldrb	w6, [x3, #1]
    228c:	lsl	w6, w6, #8
    2290:	orr	w0, w6, w0, asr #8
    2294:	sxtw	x7, w0
    2298:	ldr	w6, [x1, x7, lsl #2]
    229c:	add	w6, w6, #0x1
    22a0:	str	w6, [x1, x7, lsl #2]
    22a4:	b.ne	2218 <ferror@plt+0xb28>  // b.any
    22a8:	ldr	w1, [sp, #256]
    22ac:	sub	w1, w1, #0x5
    22b0:	sub	w5, w1, w5, lsl #2
    22b4:	sxtw	x1, w5
    22b8:	tbnz	w5, #31, 22ec <ferror@plt+0xbfc>
    22bc:	ldr	x4, [sp, #160]
    22c0:	ldr	x5, [sp, #280]
    22c4:	strh	wzr, [x5, x1, lsl #1]
    22c8:	ldrb	w2, [x25, x1]
    22cc:	sub	x1, x1, #0x1
    22d0:	lsl	w2, w2, #8
    22d4:	orr	w0, w2, w0, asr #8
    22d8:	sxtw	x3, w0
    22dc:	ldr	w2, [x4, x3, lsl #2]
    22e0:	add	w2, w2, #0x1
    22e4:	str	w2, [x4, x3, lsl #2]
    22e8:	tbz	w1, #31, 22c4 <ferror@plt+0xbd4>
    22ec:	ldr	w1, [sp, #256]
    22f0:	ldr	x0, [sp, #280]
    22f4:	add	x2, x25, w1, sxtw
    22f8:	add	x3, x0, w1, sxtw #1
    22fc:	mov	x0, #0x0                   	// #0
    2300:	ldrb	w1, [x25, x0]
    2304:	strb	w1, [x2, x0]
    2308:	strh	wzr, [x3, x0, lsl #1]
    230c:	add	x0, x0, #0x1
    2310:	cmp	x0, #0x22
    2314:	b.ne	2300 <ferror@plt+0xc10>  // b.any
    2318:	ldr	w0, [sp, #252]
    231c:	cmp	w0, #0x3
    2320:	b.gt	3908 <ferror@plt+0x2218>
    2324:	ldr	x1, [sp, #160]
    2328:	add	x3, x1, #0x40, lsl #12
    232c:	add	x0, x1, #0x4
    2330:	add	x3, x3, #0x4
    2334:	nop
    2338:	ldp	w2, w1, [x0, #-4]
    233c:	add	w1, w1, w2
    2340:	str	w1, [x0], #4
    2344:	cmp	x3, x0
    2348:	b.ne	2338 <ferror@plt+0xc48>  // b.any
    234c:	ldrb	w0, [x25]
    2350:	ldr	w1, [sp, #304]
    2354:	ubfiz	w0, w0, #8, #8
    2358:	cmp	w1, #0x2
    235c:	b.le	3944 <ferror@plt+0x2254>
    2360:	ldr	x2, [sp, #160]
    2364:	add	x3, x25, w1, sxtw
    2368:	ldr	x5, [sp, #200]
    236c:	nop
    2370:	lsr	w0, w0, #8
    2374:	ldrb	w4, [x3]
    2378:	sub	w9, w1, #0x1
    237c:	sub	w8, w1, #0x2
    2380:	sub	w7, w1, #0x3
    2384:	sub	x3, x3, #0x4
    2388:	orr	w6, w0, w4, lsl #8
    238c:	lsr	w4, w6, #8
    2390:	ldr	w0, [x2, x6, lsl #2]
    2394:	sub	w0, w0, #0x1
    2398:	str	w0, [x2, x6, lsl #2]
    239c:	str	w1, [x5, w0, sxtw #2]
    23a0:	sub	w1, w1, #0x4
    23a4:	cmp	w1, #0x2
    23a8:	ldrb	w0, [x3, #3]
    23ac:	orr	w6, w4, w0, lsl #8
    23b0:	lsr	w4, w6, #8
    23b4:	ldr	w0, [x2, x6, lsl #2]
    23b8:	sub	w0, w0, #0x1
    23bc:	str	w0, [x2, x6, lsl #2]
    23c0:	str	w9, [x5, w0, sxtw #2]
    23c4:	ldrb	w0, [x3, #2]
    23c8:	orr	w6, w4, w0, lsl #8
    23cc:	lsr	w4, w6, #8
    23d0:	ldr	w0, [x2, x6, lsl #2]
    23d4:	sub	w0, w0, #0x1
    23d8:	str	w0, [x2, x6, lsl #2]
    23dc:	str	w8, [x5, w0, sxtw #2]
    23e0:	ldrb	w0, [x3, #1]
    23e4:	orr	w6, w4, w0, lsl #8
    23e8:	mov	x0, x6
    23ec:	ldr	w4, [x2, x6, lsl #2]
    23f0:	sub	w4, w4, #0x1
    23f4:	str	w4, [x2, x6, lsl #2]
    23f8:	str	w7, [x5, w4, sxtw #2]
    23fc:	b.gt	2370 <ferror@plt+0xc80>
    2400:	ldr	w1, [sp, #256]
    2404:	sub	w2, w1, #0x4
    2408:	sub	w1, w1, #0x5
    240c:	neg	w2, w2, lsr #2
    2410:	add	w2, w1, w2, lsl #2
    2414:	sxtw	x1, w2
    2418:	tbnz	w2, #31, 244c <ferror@plt+0xd5c>
    241c:	ldr	x4, [sp, #160]
    2420:	ldr	x5, [sp, #200]
    2424:	lsr	w0, w0, #8
    2428:	ldrb	w2, [x25, x1]
    242c:	orr	w3, w0, w2, lsl #8
    2430:	mov	x0, x3
    2434:	ldr	w2, [x4, x3, lsl #2]
    2438:	sub	w2, w2, #0x1
    243c:	str	w2, [x4, x3, lsl #2]
    2440:	str	w1, [x5, w2, sxtw #2]
    2444:	sub	x1, x1, #0x1
    2448:	tbz	w1, #31, 2424 <ferror@plt+0xd34>
    244c:	add	x15, sp, #0x700
    2450:	add	x4, sp, #0x150
    2454:	mov	x0, #0x1                   	// #1
    2458:	str	x4, [sp, #296]
    245c:	nop
    2460:	add	x1, x4, x0
    2464:	add	x2, x15, x0, lsl #2
    2468:	sub	w3, w0, #0x1
    246c:	add	x0, x0, #0x1
    2470:	cmp	x0, #0x101
    2474:	stur	w3, [x2, #-4]
    2478:	sturb	wzr, [x1, #-1]
    247c:	b.ne	2460 <ferror@plt+0xd70>  // b.any
    2480:	mov	w0, #0x5                   	// #5
    2484:	mov	w6, #0x1                   	// #1
    2488:	add	w6, w6, w6, lsl #1
    248c:	subs	w0, w0, #0x1
    2490:	add	w6, w6, #0x1
    2494:	b.ne	2488 <ferror@plt+0xd98>  // b.any
    2498:	ldr	x5, [sp, #160]
    249c:	mov	w16, #0x5556                	// #21846
    24a0:	movk	w16, #0x5555, lsl #16
    24a4:	nop
    24a8:	smull	x0, w6, w16
    24ac:	cmp	w6, #0x2ff
    24b0:	lsr	x0, x0, #32
    24b4:	sub	w6, w0, w6, asr #31
    24b8:	b.gt	2550 <ferror@plt+0xe60>
    24bc:	sxtw	x12, w6
    24c0:	add	x13, x15, w6, sxtw #2
    24c4:	neg	w11, w6
    24c8:	mov	x17, #0x0                   	// #0
    24cc:	nop
    24d0:	ldr	w14, [x13]
    24d4:	mov	w4, w12
    24d8:	mov	x3, x13
    24dc:	sub	x10, x17, x12
    24e0:	add	w0, w14, #0x1
    24e4:	lsl	w1, w14, #8
    24e8:	lsl	w0, w0, #8
    24ec:	ldr	w1, [x5, w1, sxtw #2]
    24f0:	ldr	w9, [x5, w0, sxtw #2]
    24f4:	sub	w9, w9, w1
    24f8:	b	250c <ferror@plt+0xe1c>
    24fc:	str	w2, [x3]
    2500:	cmp	w4, w6
    2504:	add	x3, x3, w11, sxtw #2
    2508:	b.lt	3528 <ferror@plt+0x1e38>  // b.tstop
    250c:	ldr	w2, [x3, x10, lsl #2]
    2510:	mov	w7, w4
    2514:	sub	w4, w4, w6
    2518:	add	w1, w2, #0x1
    251c:	lsl	w0, w2, #8
    2520:	lsl	w1, w1, #8
    2524:	ldr	w8, [x5, w0, sxtw #2]
    2528:	ldr	w0, [x5, w1, sxtw #2]
    252c:	sub	w0, w0, w8
    2530:	cmp	w0, w9
    2534:	b.hi	24fc <ferror@plt+0xe0c>  // b.pmore
    2538:	str	w14, [x15, w7, sxtw #2]
    253c:	add	x12, x12, #0x1
    2540:	cmp	w12, #0xff
    2544:	add	x17, x17, #0x1
    2548:	add	x13, x13, #0x4
    254c:	b.le	24d0 <ferror@plt+0xde0>
    2550:	cmp	w6, #0x1
    2554:	b.ne	24a8 <ferror@plt+0xdb8>  // b.any
    2558:	adrp	x0, d000 <BZ2_bzReadOpen@@Base+0x270>
    255c:	mov	x26, x25
    2560:	add	x0, x0, #0xb48
    2564:	add	x2, x15, #0x400
    2568:	add	x1, x15, #0x3fc
    256c:	str	x0, [sp, #176]
    2570:	add	x0, sp, #0x250
    2574:	str	wzr, [sp, #236]
    2578:	str	x0, [sp, #240]
    257c:	str	x15, [sp, #288]
    2580:	str	x1, [sp, #312]
    2584:	str	x2, [sp, #320]
    2588:	ldr	x0, [sp, #288]
    258c:	mov	x24, x26
    2590:	str	wzr, [sp, #148]
    2594:	ldr	w0, [x0]
    2598:	str	w0, [sp, #216]
    259c:	lsl	w0, w0, #8
    25a0:	str	w0, [sp, #232]
    25a4:	nop
    25a8:	ldr	w0, [sp, #148]
    25ac:	ldr	w1, [sp, #216]
    25b0:	cmp	w1, w0
    25b4:	b.eq	3260 <ferror@plt+0x1b70>  // b.none
    25b8:	ldr	w1, [sp, #232]
    25bc:	ldr	x3, [sp, #160]
    25c0:	add	w0, w0, w1
    25c4:	sxtw	x2, w0
    25c8:	str	x2, [sp, #168]
    25cc:	add	x1, x3, w0, sxtw #2
    25d0:	ldr	w0, [x3, x2, lsl #2]
    25d4:	tbnz	w0, #21, 3254 <ferror@plt+0x1b64>
    25d8:	ldr	w1, [x1, #4]
    25dc:	and	w2, w0, #0xffdfffff
    25e0:	str	w2, [sp, #192]
    25e4:	and	w1, w1, #0xffdfffff
    25e8:	sub	w28, w1, #0x1
    25ec:	cmp	w2, w28
    25f0:	b.ge	3254 <ferror@plt+0x1b64>  // b.tcont
    25f4:	ldr	w0, [sp, #252]
    25f8:	sub	w20, w28, w2
    25fc:	str	w20, [sp, #248]
    2600:	cmp	w0, #0x3
    2604:	b.gt	36ec <ferror@plt+0x1ffc>
    2608:	add	x1, sp, #0x3e0
    260c:	mov	w0, #0x2                   	// #2
    2610:	mov	x25, x24
    2614:	mov	w26, w0
    2618:	mov	w24, w28
    261c:	str	x1, [sp, #224]
    2620:	ldr	w1, [sp, #192]
    2624:	mov	w19, #0x1                   	// #1
    2628:	str	wzr, [sp, #220]
    262c:	str	w1, [sp, #592]
    2630:	str	w28, [sp, #992]
    2634:	str	w0, [sp, #1392]
    2638:	cmp	w26, #0xe
    263c:	ccmp	w20, #0x13, #0x4, le
    2640:	b.gt	3548 <ferror@plt+0x1e58>
    2644:	add	w2, w20, #0x1
    2648:	mov	x0, #0x0                   	// #0
    264c:	cmp	w2, #0x1
    2650:	mov	w1, #0x4                   	// #4
    2654:	b.le	3220 <ferror@plt+0x1b30>
    2658:	ldr	x3, [sp, #176]
    265c:	b	2668 <ferror@plt+0xf78>
    2660:	add	x1, x3, x0, lsl #2
    2664:	ldr	w1, [x1, #4]
    2668:	cmp	w2, w1
    266c:	mov	w1, w0
    2670:	add	x0, x0, #0x1
    2674:	b.gt	2660 <ferror@plt+0xf70>
    2678:	ldrsw	x10, [sp, #192]
    267c:	sxtw	x0, w1
    2680:	str	x0, [sp, #152]
    2684:	add	x10, x10, #0x2
    2688:	str	w24, [sp, #196]
    268c:	lsl	x0, x10, #2
    2690:	str	x0, [sp, #184]
    2694:	ldr	x1, [sp, #152]
    2698:	ldr	x0, [sp, #176]
    269c:	ldr	w21, [sp, #196]
    26a0:	ldr	x22, [sp, #208]
    26a4:	ldr	w30, [x0, x1, lsl #2]
    26a8:	ldr	x0, [sp, #184]
    26ac:	ldr	x1, [sp, #200]
    26b0:	add	x5, x1, x0
    26b4:	ldr	w0, [sp, #192]
    26b8:	add	w20, w30, w0
    26bc:	neg	w0, w30
    26c0:	add	w19, w20, #0x2
    26c4:	add	w24, w20, #0x1
    26c8:	add	x2, x1, w20, sxtw #2
    26cc:	mov	w28, w20
    26d0:	add	x2, x2, #0x8
    26d4:	sbfiz	x27, x0, #2, #32
    26d8:	sxtw	x0, w30
    26dc:	str	x0, [sp, #104]
    26e0:	cmp	w28, w21
    26e4:	b.gt	320c <ferror@plt+0x1b1c>
    26e8:	ldur	w6, [x2, #-8]
    26ec:	sub	x3, x5, #0x8
    26f0:	mov	w4, w28
    26f4:	add	w0, w6, w26
    26f8:	add	w7, w6, w26
    26fc:	add	w1, w0, #0x9
    2700:	add	w11, w0, #0x1
    2704:	add	w10, w0, #0x2
    2708:	add	w9, w0, #0x3
    270c:	add	w12, w0, #0x4
    2710:	add	w14, w0, #0x5
    2714:	add	w15, w0, #0x6
    2718:	add	w16, w0, #0x7
    271c:	add	w23, w0, #0x8
    2720:	add	x7, x25, x7
    2724:	str	x1, [sp, #112]
    2728:	add	w1, w0, #0xa
    272c:	str	x1, [sp, #120]
    2730:	add	w1, w0, #0xb
    2734:	str	x1, [sp, #128]
    2738:	ldr	w1, [x3]
    273c:	mov	w18, w4
    2740:	ldrb	w8, [x7]
    2744:	sub	w4, w4, w30
    2748:	add	w1, w26, w1
    274c:	mov	x13, x3
    2750:	ldrb	w17, [x25, w1, uxtw]
    2754:	cmp	w17, w8
    2758:	b.ne	2a50 <ferror@plt+0x1360>  // b.any
    275c:	add	w8, w1, #0x1
    2760:	ldrb	w17, [x25, x11]
    2764:	ldrb	w8, [x25, w8, uxtw]
    2768:	cmp	w8, w17
    276c:	b.ne	2a50 <ferror@plt+0x1360>  // b.any
    2770:	add	w8, w1, #0x2
    2774:	ldrb	w17, [x25, x10]
    2778:	ldrb	w8, [x25, w8, uxtw]
    277c:	cmp	w8, w17
    2780:	b.ne	2a50 <ferror@plt+0x1360>  // b.any
    2784:	add	w8, w1, #0x3
    2788:	ldrb	w17, [x25, x9]
    278c:	ldrb	w8, [x25, w8, uxtw]
    2790:	cmp	w8, w17
    2794:	b.ne	2a50 <ferror@plt+0x1360>  // b.any
    2798:	add	w8, w1, #0x4
    279c:	ldrb	w17, [x25, x12]
    27a0:	ldrb	w8, [x25, w8, uxtw]
    27a4:	cmp	w8, w17
    27a8:	b.ne	2a50 <ferror@plt+0x1360>  // b.any
    27ac:	add	w8, w1, #0x5
    27b0:	ldrb	w17, [x25, x14]
    27b4:	ldrb	w8, [x25, w8, uxtw]
    27b8:	cmp	w8, w17
    27bc:	b.ne	2a50 <ferror@plt+0x1360>  // b.any
    27c0:	add	w8, w1, #0x6
    27c4:	ldrb	w17, [x25, x15]
    27c8:	ldrb	w8, [x25, w8, uxtw]
    27cc:	cmp	w8, w17
    27d0:	b.ne	2a50 <ferror@plt+0x1360>  // b.any
    27d4:	add	w8, w1, #0x7
    27d8:	ldrb	w17, [x25, x16]
    27dc:	ldrb	w8, [x25, w8, uxtw]
    27e0:	cmp	w8, w17
    27e4:	b.ne	2a50 <ferror@plt+0x1360>  // b.any
    27e8:	add	w8, w1, #0x8
    27ec:	ldrb	w17, [x25, x23]
    27f0:	ldrb	w8, [x25, w8, uxtw]
    27f4:	cmp	w8, w17
    27f8:	b.ne	2a50 <ferror@plt+0x1360>  // b.any
    27fc:	ldr	x17, [sp, #112]
    2800:	add	w8, w1, #0x9
    2804:	ldrb	w17, [x25, x17]
    2808:	ldrb	w8, [x25, w8, uxtw]
    280c:	cmp	w8, w17
    2810:	b.ne	2a50 <ferror@plt+0x1360>  // b.any
    2814:	ldr	x17, [sp, #120]
    2818:	add	w8, w1, #0xa
    281c:	ldrb	w17, [x25, x17]
    2820:	ldrb	w8, [x25, w8, uxtw]
    2824:	cmp	w8, w17
    2828:	b.ne	2a50 <ferror@plt+0x1360>  // b.any
    282c:	ldr	x17, [sp, #128]
    2830:	add	w8, w1, #0xb
    2834:	ldrb	w17, [x25, x17]
    2838:	ldrb	w8, [x25, w8, uxtw]
    283c:	cmp	w8, w17
    2840:	b.ne	2a50 <ferror@plt+0x1360>  // b.any
    2844:	str	w30, [sp, #136]
    2848:	add	x30, sp, #0x10c
    284c:	ldr	w8, [sp, #256]
    2850:	add	w17, w0, #0xc
    2854:	str	w18, [sp, #276]
    2858:	add	w1, w1, #0xc
    285c:	add	w8, w8, #0x8
    2860:	ldr	w18, [sp, #256]
    2864:	stp	w6, w0, [x30]
    2868:	mov	w0, w8
    286c:	ldr	x6, [sp, #280]
    2870:	stp	w20, w28, [x30, #-8]
    2874:	ldrb	w30, [x25, w1, uxtw]
    2878:	mov	w20, w1
    287c:	ldrb	w28, [x25, w17, uxtw]
    2880:	mov	w8, w17
    2884:	cmp	w30, w28
    2888:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    288c:	ldrh	w20, [x6, x20, lsl #1]
    2890:	ldrh	w8, [x6, x8, lsl #1]
    2894:	cmp	w20, w8
    2898:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    289c:	add	w20, w1, #0x1
    28a0:	add	w8, w17, #0x1
    28a4:	add	w30, w1, #0x1
    28a8:	add	w28, w17, #0x1
    28ac:	ldrb	w20, [x25, w20, uxtw]
    28b0:	ldrb	w8, [x25, w8, uxtw]
    28b4:	cmp	w20, w8
    28b8:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    28bc:	ldrh	w8, [x6, x30, lsl #1]
    28c0:	ldrh	w20, [x6, x28, lsl #1]
    28c4:	cmp	w8, w20
    28c8:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    28cc:	add	w30, w1, #0x2
    28d0:	add	w8, w17, #0x2
    28d4:	add	w28, w1, #0x2
    28d8:	add	w20, w17, #0x2
    28dc:	ldrb	w30, [x25, w30, uxtw]
    28e0:	ldrb	w8, [x25, w8, uxtw]
    28e4:	cmp	w30, w8
    28e8:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    28ec:	ldrh	w8, [x6, x28, lsl #1]
    28f0:	ldrh	w20, [x6, x20, lsl #1]
    28f4:	cmp	w8, w20
    28f8:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    28fc:	add	w30, w1, #0x3
    2900:	add	w8, w17, #0x3
    2904:	add	w28, w1, #0x3
    2908:	add	w20, w17, #0x3
    290c:	ldrb	w30, [x25, w30, uxtw]
    2910:	ldrb	w8, [x25, w8, uxtw]
    2914:	cmp	w30, w8
    2918:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    291c:	ldrh	w8, [x6, x28, lsl #1]
    2920:	ldrh	w20, [x6, x20, lsl #1]
    2924:	cmp	w8, w20
    2928:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    292c:	add	w20, w1, #0x4
    2930:	add	w8, w17, #0x4
    2934:	add	w30, w1, #0x4
    2938:	add	w28, w17, #0x4
    293c:	ldrb	w20, [x25, w20, uxtw]
    2940:	ldrb	w8, [x25, w8, uxtw]
    2944:	cmp	w20, w8
    2948:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    294c:	ldrh	w8, [x6, x30, lsl #1]
    2950:	ldrh	w20, [x6, x28, lsl #1]
    2954:	cmp	w8, w20
    2958:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    295c:	add	w30, w1, #0x5
    2960:	add	w8, w17, #0x5
    2964:	add	w28, w1, #0x5
    2968:	add	w20, w17, #0x5
    296c:	ldrb	w30, [x25, w30, uxtw]
    2970:	ldrb	w8, [x25, w8, uxtw]
    2974:	cmp	w30, w8
    2978:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    297c:	ldrh	w8, [x6, x28, lsl #1]
    2980:	ldrh	w20, [x6, x20, lsl #1]
    2984:	cmp	w8, w20
    2988:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    298c:	add	w30, w1, #0x6
    2990:	add	w8, w17, #0x6
    2994:	add	w28, w1, #0x6
    2998:	add	w20, w17, #0x6
    299c:	ldrb	w30, [x25, w30, uxtw]
    29a0:	ldrb	w8, [x25, w8, uxtw]
    29a4:	cmp	w30, w8
    29a8:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    29ac:	ldrh	w8, [x6, x28, lsl #1]
    29b0:	ldrh	w20, [x6, x20, lsl #1]
    29b4:	cmp	w8, w20
    29b8:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    29bc:	add	w30, w1, #0x7
    29c0:	add	w8, w17, #0x7
    29c4:	add	w28, w1, #0x7
    29c8:	add	w20, w17, #0x7
    29cc:	ldrb	w30, [x25, w30, uxtw]
    29d0:	ldrb	w8, [x25, w8, uxtw]
    29d4:	cmp	w30, w8
    29d8:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    29dc:	ldrh	w8, [x6, x28, lsl #1]
    29e0:	ldrh	w20, [x6, x20, lsl #1]
    29e4:	cmp	w8, w20
    29e8:	b.ne	2a40 <ferror@plt+0x1350>  // b.any
    29ec:	ldr	w8, [x22]
    29f0:	add	w1, w1, #0x8
    29f4:	add	w17, w17, #0x8
    29f8:	cmp	w1, w18
    29fc:	sub	w8, w8, #0x1
    2a00:	sub	w20, w1, w18
    2a04:	str	w8, [x22]
    2a08:	csel	w1, w20, w1, cs  // cs = hs, nlast
    2a0c:	sub	w8, w17, w18
    2a10:	cmp	w17, w18
    2a14:	csel	w17, w8, w17, cs  // cs = hs, nlast
    2a18:	subs	w0, w0, #0x8
    2a1c:	b.pl	2874 <ferror@plt+0x1184>  // b.nfrst
    2a20:	ldr	x0, [sp, #200]
    2a24:	ldr	w8, [sp, #276]
    2a28:	ldr	w30, [sp, #136]
    2a2c:	ldr	w20, [sp, #260]
    2a30:	ldr	w28, [sp, #264]
    2a34:	add	x8, x0, w8, sxtw #2
    2a38:	ldr	w6, [sp, #268]
    2a3c:	b	2a78 <ferror@plt+0x1388>
    2a40:	add	x1, sp, #0x10c
    2a44:	ldr	w30, [sp, #136]
    2a48:	ldp	w20, w28, [x1, #-8]
    2a4c:	ldp	w6, w0, [x1]
    2a50:	cset	w1, hi  // hi = pmore
    2a54:	add	x8, x3, w30, sxtw #2
    2a58:	cbz	w1, 2a78 <ferror@plt+0x1388>
    2a5c:	ldr	x8, [sp, #104]
    2a60:	cmp	w20, w4
    2a64:	ldr	w1, [x3]
    2a68:	str	w1, [x3, x8, lsl #2]
    2a6c:	add	x3, x3, x27
    2a70:	b.le	2738 <ferror@plt+0x1048>
    2a74:	mov	x8, x13
    2a78:	str	w6, [x8]
    2a7c:	cmp	w24, w21
    2a80:	mov	w6, w24
    2a84:	b.gt	320c <ferror@plt+0x1b1c>
    2a88:	mov	x3, x2
    2a8c:	sub	x4, x5, #0x4
    2a90:	ldr	w8, [x3, #-4]!
    2a94:	add	w0, w8, w26
    2a98:	add	w9, w8, w26
    2a9c:	add	w1, w0, #0x8
    2aa0:	str	x1, [sp, #112]
    2aa4:	add	w1, w0, #0x9
    2aa8:	add	w12, w0, #0x1
    2aac:	add	w11, w0, #0x2
    2ab0:	add	w10, w0, #0x3
    2ab4:	add	w13, w0, #0x4
    2ab8:	add	w15, w0, #0x5
    2abc:	add	w16, w0, #0x6
    2ac0:	add	w23, w0, #0x7
    2ac4:	add	x9, x25, x9
    2ac8:	str	x1, [sp, #120]
    2acc:	add	w1, w0, #0xa
    2ad0:	str	x1, [sp, #128]
    2ad4:	add	w1, w0, #0xb
    2ad8:	str	x1, [sp, #136]
    2adc:	nop
    2ae0:	ldr	w1, [x4]
    2ae4:	mov	w18, w6
    2ae8:	ldrb	w7, [x9]
    2aec:	sub	w6, w6, w30
    2af0:	add	w1, w26, w1
    2af4:	mov	x14, x4
    2af8:	ldrb	w17, [x25, w1, uxtw]
    2afc:	cmp	w17, w7
    2b00:	b.ne	2df8 <ferror@plt+0x1708>  // b.any
    2b04:	add	w7, w1, #0x1
    2b08:	ldrb	w17, [x25, x12]
    2b0c:	ldrb	w7, [x25, w7, uxtw]
    2b10:	cmp	w7, w17
    2b14:	b.ne	2df8 <ferror@plt+0x1708>  // b.any
    2b18:	add	w7, w1, #0x2
    2b1c:	ldrb	w17, [x25, x11]
    2b20:	ldrb	w7, [x25, w7, uxtw]
    2b24:	cmp	w7, w17
    2b28:	b.ne	2df8 <ferror@plt+0x1708>  // b.any
    2b2c:	add	w7, w1, #0x3
    2b30:	ldrb	w17, [x25, x10]
    2b34:	ldrb	w7, [x25, w7, uxtw]
    2b38:	cmp	w7, w17
    2b3c:	b.ne	2df8 <ferror@plt+0x1708>  // b.any
    2b40:	add	w7, w1, #0x4
    2b44:	ldrb	w17, [x25, x13]
    2b48:	ldrb	w7, [x25, w7, uxtw]
    2b4c:	cmp	w7, w17
    2b50:	b.ne	2df8 <ferror@plt+0x1708>  // b.any
    2b54:	add	w7, w1, #0x5
    2b58:	ldrb	w17, [x25, x15]
    2b5c:	ldrb	w7, [x25, w7, uxtw]
    2b60:	cmp	w7, w17
    2b64:	b.ne	2df8 <ferror@plt+0x1708>  // b.any
    2b68:	add	w7, w1, #0x6
    2b6c:	ldrb	w17, [x25, x16]
    2b70:	ldrb	w7, [x25, w7, uxtw]
    2b74:	cmp	w7, w17
    2b78:	b.ne	2df8 <ferror@plt+0x1708>  // b.any
    2b7c:	add	w7, w1, #0x7
    2b80:	ldrb	w17, [x25, x23]
    2b84:	ldrb	w7, [x25, w7, uxtw]
    2b88:	cmp	w7, w17
    2b8c:	b.ne	2df8 <ferror@plt+0x1708>  // b.any
    2b90:	ldr	x17, [sp, #112]
    2b94:	add	w7, w1, #0x8
    2b98:	ldrb	w17, [x25, x17]
    2b9c:	ldrb	w7, [x25, w7, uxtw]
    2ba0:	cmp	w7, w17
    2ba4:	b.ne	2df8 <ferror@plt+0x1708>  // b.any
    2ba8:	ldr	x17, [sp, #120]
    2bac:	add	w7, w1, #0x9
    2bb0:	ldrb	w17, [x25, x17]
    2bb4:	ldrb	w7, [x25, w7, uxtw]
    2bb8:	cmp	w7, w17
    2bbc:	b.ne	2df8 <ferror@plt+0x1708>  // b.any
    2bc0:	ldr	x17, [sp, #128]
    2bc4:	add	w7, w1, #0xa
    2bc8:	ldrb	w17, [x25, x17]
    2bcc:	ldrb	w7, [x25, w7, uxtw]
    2bd0:	cmp	w7, w17
    2bd4:	b.ne	2df8 <ferror@plt+0x1708>  // b.any
    2bd8:	ldr	x17, [sp, #136]
    2bdc:	add	w7, w1, #0xb
    2be0:	ldrb	w17, [x25, x17]
    2be4:	ldrb	w7, [x25, w7, uxtw]
    2be8:	cmp	w7, w17
    2bec:	b.ne	2df8 <ferror@plt+0x1708>  // b.any
    2bf0:	ldr	w7, [sp, #256]
    2bf4:	add	w17, w0, #0xc
    2bf8:	str	w30, [sp, #260]
    2bfc:	add	x30, sp, #0x110
    2c00:	add	w7, w7, #0x8
    2c04:	str	w18, [sp, #308]
    2c08:	ldr	w18, [sp, #256]
    2c0c:	add	w1, w1, #0xc
    2c10:	stp	w8, w0, [x30]
    2c14:	mov	w0, w7
    2c18:	ldr	x7, [sp, #280]
    2c1c:	stp	w20, w28, [x30, #-8]
    2c20:	ldrb	w30, [x25, w1, uxtw]
    2c24:	mov	w20, w1
    2c28:	ldrb	w28, [x25, w17, uxtw]
    2c2c:	mov	w8, w17
    2c30:	cmp	w30, w28
    2c34:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2c38:	ldrh	w20, [x7, x20, lsl #1]
    2c3c:	ldrh	w8, [x7, x8, lsl #1]
    2c40:	cmp	w20, w8
    2c44:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2c48:	add	w30, w1, #0x1
    2c4c:	add	w8, w17, #0x1
    2c50:	add	w28, w1, #0x1
    2c54:	add	w20, w17, #0x1
    2c58:	ldrb	w30, [x25, w30, uxtw]
    2c5c:	ldrb	w8, [x25, w8, uxtw]
    2c60:	cmp	w30, w8
    2c64:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2c68:	ldrh	w8, [x7, x28, lsl #1]
    2c6c:	ldrh	w20, [x7, x20, lsl #1]
    2c70:	cmp	w8, w20
    2c74:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2c78:	add	w30, w1, #0x2
    2c7c:	add	w8, w17, #0x2
    2c80:	add	w28, w1, #0x2
    2c84:	add	w20, w17, #0x2
    2c88:	ldrb	w30, [x25, w30, uxtw]
    2c8c:	ldrb	w8, [x25, w8, uxtw]
    2c90:	cmp	w30, w8
    2c94:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2c98:	ldrh	w8, [x7, x28, lsl #1]
    2c9c:	ldrh	w20, [x7, x20, lsl #1]
    2ca0:	cmp	w8, w20
    2ca4:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2ca8:	add	w30, w1, #0x3
    2cac:	add	w8, w17, #0x3
    2cb0:	add	w28, w1, #0x3
    2cb4:	add	w20, w17, #0x3
    2cb8:	ldrb	w30, [x25, w30, uxtw]
    2cbc:	ldrb	w8, [x25, w8, uxtw]
    2cc0:	cmp	w30, w8
    2cc4:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2cc8:	ldrh	w8, [x7, x28, lsl #1]
    2ccc:	ldrh	w20, [x7, x20, lsl #1]
    2cd0:	cmp	w8, w20
    2cd4:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2cd8:	add	w30, w1, #0x4
    2cdc:	add	w8, w17, #0x4
    2ce0:	add	w28, w1, #0x4
    2ce4:	add	w20, w17, #0x4
    2ce8:	ldrb	w30, [x25, w30, uxtw]
    2cec:	ldrb	w8, [x25, w8, uxtw]
    2cf0:	cmp	w30, w8
    2cf4:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2cf8:	ldrh	w8, [x7, x28, lsl #1]
    2cfc:	ldrh	w20, [x7, x20, lsl #1]
    2d00:	cmp	w8, w20
    2d04:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2d08:	add	w30, w1, #0x5
    2d0c:	add	w8, w17, #0x5
    2d10:	add	w28, w1, #0x5
    2d14:	add	w20, w17, #0x5
    2d18:	ldrb	w30, [x25, w30, uxtw]
    2d1c:	ldrb	w8, [x25, w8, uxtw]
    2d20:	cmp	w30, w8
    2d24:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2d28:	ldrh	w8, [x7, x28, lsl #1]
    2d2c:	ldrh	w20, [x7, x20, lsl #1]
    2d30:	cmp	w8, w20
    2d34:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2d38:	add	w30, w1, #0x6
    2d3c:	add	w8, w17, #0x6
    2d40:	add	w28, w1, #0x6
    2d44:	add	w20, w17, #0x6
    2d48:	ldrb	w30, [x25, w30, uxtw]
    2d4c:	ldrb	w8, [x25, w8, uxtw]
    2d50:	cmp	w30, w8
    2d54:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2d58:	ldrh	w8, [x7, x28, lsl #1]
    2d5c:	ldrh	w20, [x7, x20, lsl #1]
    2d60:	cmp	w8, w20
    2d64:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2d68:	add	w30, w1, #0x7
    2d6c:	add	w8, w17, #0x7
    2d70:	add	w28, w1, #0x7
    2d74:	add	w20, w17, #0x7
    2d78:	ldrb	w30, [x25, w30, uxtw]
    2d7c:	ldrb	w8, [x25, w8, uxtw]
    2d80:	cmp	w30, w8
    2d84:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2d88:	ldrh	w8, [x7, x28, lsl #1]
    2d8c:	ldrh	w20, [x7, x20, lsl #1]
    2d90:	cmp	w8, w20
    2d94:	b.ne	2de8 <ferror@plt+0x16f8>  // b.any
    2d98:	ldr	w8, [x22]
    2d9c:	add	w1, w1, #0x8
    2da0:	add	w17, w17, #0x8
    2da4:	cmp	w1, w18
    2da8:	sub	w8, w8, #0x1
    2dac:	sub	w20, w1, w18
    2db0:	str	w8, [x22]
    2db4:	csel	w1, w20, w1, cs  // cs = hs, nlast
    2db8:	sub	w8, w17, w18
    2dbc:	cmp	w17, w18
    2dc0:	csel	w17, w8, w17, cs  // cs = hs, nlast
    2dc4:	subs	w0, w0, #0x8
    2dc8:	b.pl	2c20 <ferror@plt+0x1530>  // b.nfrst
    2dcc:	add	x0, sp, #0x10c
    2dd0:	ldr	w7, [sp, #308]
    2dd4:	ldp	w30, w20, [x0, #-8]
    2dd8:	ldp	w28, w8, [x0]
    2ddc:	ldr	x0, [sp, #200]
    2de0:	add	x7, x0, w7, sxtw #2
    2de4:	b	2e20 <ferror@plt+0x1730>
    2de8:	add	x1, sp, #0x10c
    2dec:	ldr	w0, [sp, #276]
    2df0:	ldp	w30, w20, [x1, #-8]
    2df4:	ldp	w28, w8, [x1]
    2df8:	cset	w1, hi  // hi = pmore
    2dfc:	mov	x7, x3
    2e00:	cbz	w1, 2e20 <ferror@plt+0x1730>
    2e04:	ldr	w1, [x4]
    2e08:	cmp	w20, w6
    2e0c:	str	w1, [x3]
    2e10:	add	x4, x4, x27
    2e14:	add	x3, x7, x27
    2e18:	b.le	2ae0 <ferror@plt+0x13f0>
    2e1c:	mov	x7, x14
    2e20:	str	w8, [x7]
    2e24:	cmp	w19, w21
    2e28:	mov	w4, w19
    2e2c:	b.gt	320c <ferror@plt+0x1b1c>
    2e30:	ldr	w7, [x2]
    2e34:	mov	x9, x2
    2e38:	mov	x3, x5
    2e3c:	add	w0, w7, w26
    2e40:	add	w8, w7, w26
    2e44:	add	w1, w0, #0x8
    2e48:	str	x1, [sp, #112]
    2e4c:	add	w1, w0, #0x9
    2e50:	add	w12, w0, #0x1
    2e54:	add	w11, w0, #0x2
    2e58:	add	w10, w0, #0x3
    2e5c:	add	w13, w0, #0x4
    2e60:	add	w15, w0, #0x5
    2e64:	add	w16, w0, #0x6
    2e68:	add	w23, w0, #0x7
    2e6c:	add	x8, x25, x8
    2e70:	str	x1, [sp, #120]
    2e74:	add	w1, w0, #0xa
    2e78:	str	x1, [sp, #128]
    2e7c:	add	w1, w0, #0xb
    2e80:	str	x1, [sp, #136]
    2e84:	nop
    2e88:	ldr	w1, [x3]
    2e8c:	mov	w18, w4
    2e90:	ldrb	w6, [x8]
    2e94:	sub	w4, w4, w30
    2e98:	add	w1, w26, w1
    2e9c:	mov	x14, x3
    2ea0:	ldrb	w17, [x25, w1, uxtw]
    2ea4:	cmp	w17, w6
    2ea8:	b.ne	31a0 <ferror@plt+0x1ab0>  // b.any
    2eac:	add	w6, w1, #0x1
    2eb0:	ldrb	w17, [x25, x12]
    2eb4:	ldrb	w6, [x25, w6, uxtw]
    2eb8:	cmp	w6, w17
    2ebc:	b.ne	31a0 <ferror@plt+0x1ab0>  // b.any
    2ec0:	add	w6, w1, #0x2
    2ec4:	ldrb	w17, [x25, x11]
    2ec8:	ldrb	w6, [x25, w6, uxtw]
    2ecc:	cmp	w6, w17
    2ed0:	b.ne	31a0 <ferror@plt+0x1ab0>  // b.any
    2ed4:	add	w6, w1, #0x3
    2ed8:	ldrb	w17, [x25, x10]
    2edc:	ldrb	w6, [x25, w6, uxtw]
    2ee0:	cmp	w6, w17
    2ee4:	b.ne	31a0 <ferror@plt+0x1ab0>  // b.any
    2ee8:	add	w6, w1, #0x4
    2eec:	ldrb	w17, [x25, x13]
    2ef0:	ldrb	w6, [x25, w6, uxtw]
    2ef4:	cmp	w6, w17
    2ef8:	b.ne	31a0 <ferror@plt+0x1ab0>  // b.any
    2efc:	add	w6, w1, #0x5
    2f00:	ldrb	w17, [x25, x15]
    2f04:	ldrb	w6, [x25, w6, uxtw]
    2f08:	cmp	w6, w17
    2f0c:	b.ne	31a0 <ferror@plt+0x1ab0>  // b.any
    2f10:	add	w6, w1, #0x6
    2f14:	ldrb	w17, [x25, x16]
    2f18:	ldrb	w6, [x25, w6, uxtw]
    2f1c:	cmp	w6, w17
    2f20:	b.ne	31a0 <ferror@plt+0x1ab0>  // b.any
    2f24:	add	w6, w1, #0x7
    2f28:	ldrb	w17, [x25, x23]
    2f2c:	ldrb	w6, [x25, w6, uxtw]
    2f30:	cmp	w6, w17
    2f34:	b.ne	31a0 <ferror@plt+0x1ab0>  // b.any
    2f38:	ldr	x17, [sp, #112]
    2f3c:	add	w6, w1, #0x8
    2f40:	ldrb	w17, [x25, x17]
    2f44:	ldrb	w6, [x25, w6, uxtw]
    2f48:	cmp	w6, w17
    2f4c:	b.ne	31a0 <ferror@plt+0x1ab0>  // b.any
    2f50:	ldr	x17, [sp, #120]
    2f54:	add	w6, w1, #0x9
    2f58:	ldrb	w17, [x25, x17]
    2f5c:	ldrb	w6, [x25, w6, uxtw]
    2f60:	cmp	w6, w17
    2f64:	b.ne	31a0 <ferror@plt+0x1ab0>  // b.any
    2f68:	ldr	x17, [sp, #128]
    2f6c:	add	w6, w1, #0xa
    2f70:	ldrb	w17, [x25, x17]
    2f74:	ldrb	w6, [x25, w6, uxtw]
    2f78:	cmp	w6, w17
    2f7c:	b.ne	31a0 <ferror@plt+0x1ab0>  // b.any
    2f80:	ldr	x17, [sp, #136]
    2f84:	add	w6, w1, #0xb
    2f88:	ldrb	w17, [x25, x17]
    2f8c:	ldrb	w6, [x25, w6, uxtw]
    2f90:	cmp	w6, w17
    2f94:	b.ne	31a0 <ferror@plt+0x1ab0>  // b.any
    2f98:	ldr	w6, [sp, #256]
    2f9c:	add	w17, w0, #0xc
    2fa0:	str	w30, [sp, #260]
    2fa4:	add	x30, sp, #0x110
    2fa8:	add	w6, w6, #0x8
    2fac:	str	w18, [sp, #308]
    2fb0:	ldr	w18, [sp, #256]
    2fb4:	add	w1, w1, #0xc
    2fb8:	stp	w7, w0, [x30]
    2fbc:	mov	w0, w6
    2fc0:	ldr	x6, [sp, #280]
    2fc4:	stp	w20, w28, [x30, #-8]
    2fc8:	ldrb	w30, [x25, w1, uxtw]
    2fcc:	mov	w20, w1
    2fd0:	ldrb	w28, [x25, w17, uxtw]
    2fd4:	mov	w7, w17
    2fd8:	cmp	w30, w28
    2fdc:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    2fe0:	ldrh	w20, [x6, x20, lsl #1]
    2fe4:	ldrh	w7, [x6, x7, lsl #1]
    2fe8:	cmp	w20, w7
    2fec:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    2ff0:	add	w30, w1, #0x1
    2ff4:	add	w7, w17, #0x1
    2ff8:	add	w28, w1, #0x1
    2ffc:	add	w20, w17, #0x1
    3000:	ldrb	w30, [x25, w30, uxtw]
    3004:	ldrb	w7, [x25, w7, uxtw]
    3008:	cmp	w30, w7
    300c:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    3010:	ldrh	w7, [x6, x28, lsl #1]
    3014:	ldrh	w20, [x6, x20, lsl #1]
    3018:	cmp	w7, w20
    301c:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    3020:	add	w30, w1, #0x2
    3024:	add	w7, w17, #0x2
    3028:	add	w28, w1, #0x2
    302c:	add	w20, w17, #0x2
    3030:	ldrb	w30, [x25, w30, uxtw]
    3034:	ldrb	w7, [x25, w7, uxtw]
    3038:	cmp	w30, w7
    303c:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    3040:	ldrh	w7, [x6, x28, lsl #1]
    3044:	ldrh	w20, [x6, x20, lsl #1]
    3048:	cmp	w7, w20
    304c:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    3050:	add	w30, w1, #0x3
    3054:	add	w7, w17, #0x3
    3058:	add	w28, w1, #0x3
    305c:	add	w20, w17, #0x3
    3060:	ldrb	w30, [x25, w30, uxtw]
    3064:	ldrb	w7, [x25, w7, uxtw]
    3068:	cmp	w30, w7
    306c:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    3070:	ldrh	w7, [x6, x28, lsl #1]
    3074:	ldrh	w20, [x6, x20, lsl #1]
    3078:	cmp	w7, w20
    307c:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    3080:	add	w30, w1, #0x4
    3084:	add	w7, w17, #0x4
    3088:	add	w28, w1, #0x4
    308c:	add	w20, w17, #0x4
    3090:	ldrb	w30, [x25, w30, uxtw]
    3094:	ldrb	w7, [x25, w7, uxtw]
    3098:	cmp	w30, w7
    309c:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    30a0:	ldrh	w7, [x6, x28, lsl #1]
    30a4:	ldrh	w20, [x6, x20, lsl #1]
    30a8:	cmp	w7, w20
    30ac:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    30b0:	add	w30, w1, #0x5
    30b4:	add	w7, w17, #0x5
    30b8:	add	w28, w1, #0x5
    30bc:	add	w20, w17, #0x5
    30c0:	ldrb	w30, [x25, w30, uxtw]
    30c4:	ldrb	w7, [x25, w7, uxtw]
    30c8:	cmp	w30, w7
    30cc:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    30d0:	ldrh	w7, [x6, x28, lsl #1]
    30d4:	ldrh	w20, [x6, x20, lsl #1]
    30d8:	cmp	w7, w20
    30dc:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    30e0:	add	w20, w1, #0x6
    30e4:	add	w7, w17, #0x6
    30e8:	add	w30, w1, #0x6
    30ec:	add	w28, w17, #0x6
    30f0:	ldrb	w20, [x25, w20, uxtw]
    30f4:	ldrb	w7, [x25, w7, uxtw]
    30f8:	cmp	w20, w7
    30fc:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    3100:	ldrh	w7, [x6, x30, lsl #1]
    3104:	ldrh	w20, [x6, x28, lsl #1]
    3108:	cmp	w7, w20
    310c:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    3110:	add	w30, w1, #0x7
    3114:	add	w7, w17, #0x7
    3118:	add	w28, w1, #0x7
    311c:	add	w20, w17, #0x7
    3120:	ldrb	w30, [x25, w30, uxtw]
    3124:	ldrb	w7, [x25, w7, uxtw]
    3128:	cmp	w30, w7
    312c:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    3130:	ldrh	w7, [x6, x28, lsl #1]
    3134:	ldrh	w20, [x6, x20, lsl #1]
    3138:	cmp	w7, w20
    313c:	b.ne	3190 <ferror@plt+0x1aa0>  // b.any
    3140:	ldr	w7, [x22]
    3144:	add	w1, w1, #0x8
    3148:	add	w17, w17, #0x8
    314c:	cmp	w1, w18
    3150:	sub	w7, w7, #0x1
    3154:	sub	w20, w1, w18
    3158:	str	w7, [x22]
    315c:	csel	w1, w20, w1, cs  // cs = hs, nlast
    3160:	sub	w7, w17, w18
    3164:	cmp	w17, w18
    3168:	csel	w17, w7, w17, cs  // cs = hs, nlast
    316c:	subs	w0, w0, #0x8
    3170:	b.pl	2fc8 <ferror@plt+0x18d8>  // b.nfrst
    3174:	add	x0, sp, #0x10c
    3178:	ldr	w6, [sp, #308]
    317c:	ldp	w30, w20, [x0, #-8]
    3180:	ldp	w28, w7, [x0]
    3184:	ldr	x0, [sp, #200]
    3188:	add	x6, x0, w6, sxtw #2
    318c:	b	31c8 <ferror@plt+0x1ad8>
    3190:	add	x1, sp, #0x10c
    3194:	ldr	w0, [sp, #276]
    3198:	ldp	w30, w20, [x1, #-8]
    319c:	ldp	w28, w7, [x1]
    31a0:	cset	w1, hi  // hi = pmore
    31a4:	mov	x6, x9
    31a8:	cbz	w1, 31c8 <ferror@plt+0x1ad8>
    31ac:	ldr	w1, [x3]
    31b0:	cmp	w20, w4
    31b4:	str	w1, [x9]
    31b8:	add	x3, x3, x27
    31bc:	add	x9, x6, x27
    31c0:	b.le	2e88 <ferror@plt+0x1798>
    31c4:	mov	x6, x14
    31c8:	str	w7, [x6]
    31cc:	add	w28, w28, #0x3
    31d0:	add	w19, w19, #0x3
    31d4:	add	x5, x5, #0xc
    31d8:	ldr	w0, [x22]
    31dc:	add	x2, x2, #0xc
    31e0:	add	w24, w24, #0x3
    31e4:	tbz	w0, #31, 26e0 <ferror@plt+0xff0>
    31e8:	mov	x12, #0x1300                	// #4864
    31ec:	ldp	x29, x30, [sp]
    31f0:	ldp	x19, x20, [sp, #16]
    31f4:	ldp	x21, x22, [sp, #32]
    31f8:	ldp	x23, x24, [sp, #48]
    31fc:	ldp	x25, x26, [sp, #64]
    3200:	ldp	x27, x28, [sp, #80]
    3204:	add	sp, sp, x12
    3208:	ret
    320c:	ldr	x0, [sp, #152]
    3210:	sub	x0, x0, #0x1
    3214:	str	x0, [sp, #152]
    3218:	cmn	w0, #0x1
    321c:	b.ne	2694 <ferror@plt+0xfa4>  // b.any
    3220:	ldr	x0, [sp, #208]
    3224:	ldr	w0, [x0]
    3228:	tbnz	w0, #31, 31e8 <ferror@plt+0x1af8>
    322c:	ldr	w0, [sp, #220]
    3230:	cbnz	w0, 3954 <ferror@plt+0x2264>
    3234:	ldr	w0, [sp, #248]
    3238:	mov	x24, x25
    323c:	add	w1, w0, #0x1
    3240:	ldp	x0, x2, [sp, #160]
    3244:	ldr	w0, [x0, x2, lsl #2]
    3248:	ldr	w2, [sp, #236]
    324c:	add	w1, w2, w1
    3250:	str	w1, [sp, #236]
    3254:	ldp	x1, x2, [sp, #160]
    3258:	orr	w0, w0, #0x200000
    325c:	str	w0, [x1, x2, lsl #2]
    3260:	ldr	w0, [sp, #148]
    3264:	add	w0, w0, #0x1
    3268:	str	w0, [sp, #148]
    326c:	cmp	w0, #0x100
    3270:	b.ne	25a8 <ferror@plt+0xeb8>  // b.any
    3274:	ldr	w1, [sp, #216]
    3278:	mov	x26, x24
    327c:	ldr	x0, [sp, #296]
    3280:	sxtw	x21, w1
    3284:	ldrb	w0, [x0, w1, sxtw]
    3288:	cbnz	w0, 392c <ferror@plt+0x223c>
    328c:	ldr	x0, [sp, #160]
    3290:	lsl	x20, x21, #2
    3294:	add	x7, sp, #0xb00
    3298:	add	x6, sp, #0xf00
    329c:	add	x19, x0, x20
    32a0:	mov	x2, #0x1                   	// #1
    32a4:	mov	x3, x19
    32a8:	ldp	w4, w0, [x3]
    32ac:	lsl	x1, x2, #2
    32b0:	add	x5, x6, x1
    32b4:	add	x1, x7, x1
    32b8:	and	w0, w0, #0xffdfffff
    32bc:	and	w4, w4, #0xffdfffff
    32c0:	sub	w0, w0, #0x1
    32c4:	add	x2, x2, #0x1
    32c8:	stur	w4, [x1, #-4]
    32cc:	cmp	x2, #0x101
    32d0:	stur	w0, [x5, #-4]
    32d4:	add	x3, x3, #0x400
    32d8:	b.ne	32a8 <ferror@plt+0x1bb8>  // b.any
    32dc:	ldrsw	x22, [sp, #232]
    32e0:	lsl	x4, x21, #2
    32e4:	ldr	x0, [sp, #160]
    32e8:	ldr	w3, [x7, x21, lsl #2]
    32ec:	ldr	w1, [x0, x22, lsl #2]
    32f0:	and	w1, w1, #0xffdfffff
    32f4:	cmp	w1, w3
    32f8:	b.ge	334c <ferror@plt+0x1c5c>  // b.tcont
    32fc:	ldr	w8, [sp, #256]
    3300:	sxtw	x1, w1
    3304:	ldr	x5, [sp, #200]
    3308:	ldr	x9, [sp, #296]
    330c:	nop
    3310:	ldr	w0, [x5, x1, lsl #2]
    3314:	add	x1, x1, #0x1
    3318:	subs	w0, w0, #0x1
    331c:	add	w2, w0, w8
    3320:	csel	w0, w2, w0, mi  // mi = first
    3324:	ldrb	w3, [x26, w0, sxtw]
    3328:	ldrb	w2, [x9, w3, sxtw]
    332c:	cbnz	w2, 3340 <ferror@plt+0x1c50>
    3330:	ldr	w2, [x7, x3, lsl #2]
    3334:	add	w10, w2, #0x1
    3338:	str	w10, [x7, x3, lsl #2]
    333c:	str	w0, [x5, w2, sxtw #2]
    3340:	ldr	w3, [x7, x4]
    3344:	cmp	w3, w1
    3348:	b.gt	3310 <ferror@plt+0x1c20>
    334c:	ldr	w0, [sp, #216]
    3350:	lsl	x5, x21, #2
    3354:	ldr	x1, [sp, #160]
    3358:	add	w23, w0, #0x1
    335c:	ldr	w0, [x6, x21, lsl #2]
    3360:	lsl	w23, w23, #8
    3364:	sxtw	x23, w23
    3368:	ldr	w1, [x1, x23, lsl #2]
    336c:	and	w1, w1, #0xffdfffff
    3370:	sub	w1, w1, #0x1
    3374:	cmp	w1, w0
    3378:	b.le	33cc <ferror@plt+0x1cdc>
    337c:	ldr	w8, [sp, #256]
    3380:	sxtw	x1, w1
    3384:	ldr	x7, [sp, #200]
    3388:	ldr	x9, [sp, #296]
    338c:	nop
    3390:	ldr	w0, [x7, x1, lsl #2]
    3394:	sub	x1, x1, #0x1
    3398:	subs	w0, w0, #0x1
    339c:	add	w2, w0, w8
    33a0:	csel	w0, w2, w0, mi  // mi = first
    33a4:	ldrb	w4, [x26, w0, sxtw]
    33a8:	ldrb	w2, [x9, w4, sxtw]
    33ac:	cbnz	w2, 33c0 <ferror@plt+0x1cd0>
    33b0:	ldr	w2, [x6, x4, lsl #2]
    33b4:	sub	w10, w2, #0x1
    33b8:	str	w10, [x6, x4, lsl #2]
    33bc:	str	w0, [x7, w2, sxtw #2]
    33c0:	ldr	w0, [x6, x5]
    33c4:	cmp	w0, w1
    33c8:	b.lt	3390 <ferror@plt+0x1ca0>  // b.tstop
    33cc:	sub	w1, w3, #0x1
    33d0:	cmp	w1, w0
    33d4:	b.eq	33f0 <ferror@plt+0x1d00>  // b.none
    33d8:	ldr	w1, [sp, #304]
    33dc:	cmp	w3, #0x0
    33e0:	ccmp	w1, w0, #0x0, eq  // eq = none
    33e4:	b.eq	33f0 <ferror@plt+0x1d00>  // b.none
    33e8:	mov	w0, #0x3ef                 	// #1007
    33ec:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    33f0:	ldr	x0, [sp, #328]
    33f4:	add	x20, x0, x20
    33f8:	ldr	w0, [x19]
    33fc:	orr	w0, w0, #0x200000
    3400:	str	w0, [x19]
    3404:	add	x19, x19, #0x400
    3408:	cmp	x20, x19
    340c:	b.ne	33f8 <ferror@plt+0x1d08>  // b.any
    3410:	ldr	w2, [sp, #216]
    3414:	mov	w0, #0x1                   	// #1
    3418:	ldr	x1, [sp, #296]
    341c:	strb	w0, [x1, w2, sxtw]
    3420:	ldr	x1, [sp, #288]
    3424:	ldr	x0, [sp, #312]
    3428:	cmp	x0, x1
    342c:	b.eq	34d8 <ferror@plt+0x1de8>  // b.none
    3430:	ldr	x0, [sp, #160]
    3434:	mov	w3, #0xfffe                	// #65534
    3438:	ldr	w4, [x0, x22, lsl #2]
    343c:	ldr	w0, [x0, x23, lsl #2]
    3440:	and	w4, w4, #0xffdfffff
    3444:	and	w0, w0, #0xffdfffff
    3448:	sub	w0, w0, w4
    344c:	sub	w6, w0, #0x1
    3450:	cmp	w0, w3
    3454:	b.le	3938 <ferror@plt+0x2248>
    3458:	mov	w1, #0x0                   	// #0
    345c:	add	w1, w1, #0x1
    3460:	asr	w2, w0, w1
    3464:	cmp	w2, w3
    3468:	b.gt	345c <ferror@plt+0x1d6c>
    346c:	ldr	x0, [sp, #200]
    3470:	ldr	w8, [sp, #256]
    3474:	ldr	x5, [sp, #280]
    3478:	add	x4, x0, w4, sxtw #2
    347c:	sxtw	x0, w6
    3480:	ldr	w3, [x4, x0, lsl #2]
    3484:	asr	w2, w0, w1
    3488:	and	w2, w2, #0xffff
    348c:	sub	x0, x0, #0x1
    3490:	add	w7, w8, w3
    3494:	cmp	w3, #0x21
    3498:	strh	w2, [x5, w3, sxtw #1]
    349c:	b.gt	34a4 <ferror@plt+0x1db4>
    34a0:	strh	w2, [x5, w7, sxtw #1]
    34a4:	tbz	w0, #31, 3480 <ferror@plt+0x1d90>
    34a8:	asr	w1, w6, w1
    34ac:	mov	w0, #0xffff                	// #65535
    34b0:	cmp	w1, w0
    34b4:	b.le	34c0 <ferror@plt+0x1dd0>
    34b8:	mov	w0, #0x3ea                 	// #1002
    34bc:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    34c0:	ldr	x0, [sp, #288]
    34c4:	ldr	x1, [sp, #320]
    34c8:	add	x0, x0, #0x4
    34cc:	str	x0, [sp, #288]
    34d0:	cmp	x1, x0
    34d4:	b.ne	2588 <ferror@plt+0xe98>  // b.any
    34d8:	ldr	w0, [sp, #252]
    34dc:	cmp	w0, #0x3
    34e0:	b.le	31e8 <ferror@plt+0x1af8>
    34e4:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    34e8:	ldr	w3, [sp, #236]
    34ec:	ldp	x29, x30, [sp]
    34f0:	mov	x12, #0x1300                	// #4864
    34f4:	ldr	x0, [x0, #4016]
    34f8:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    34fc:	ldp	x19, x20, [sp, #16]
    3500:	add	x1, x1, #0xab8
    3504:	ldp	x21, x22, [sp, #32]
    3508:	ldp	x23, x24, [sp, #48]
    350c:	ldp	x25, x26, [sp, #64]
    3510:	ldp	x27, x28, [sp, #80]
    3514:	ldr	w2, [sp, #256]
    3518:	ldr	x0, [x0]
    351c:	sub	w4, w2, w3
    3520:	add	sp, sp, x12
    3524:	b	16e0 <fprintf@plt>
    3528:	mov	w7, w4
    352c:	add	x12, x12, #0x1
    3530:	cmp	w12, #0xff
    3534:	add	x17, x17, #0x1
    3538:	add	x13, x13, #0x4
    353c:	str	w14, [x15, w7, sxtw #2]
    3540:	b.le	24d0 <ferror@plt+0xde0>
    3544:	b	2550 <ferror@plt+0xe60>
    3548:	ldr	w2, [sp, #192]
    354c:	ldr	x1, [sp, #200]
    3550:	add	w0, w2, w24
    3554:	sxtw	x10, w2
    3558:	asr	w0, w0, #1
    355c:	add	x9, x1, w2, sxtw #2
    3560:	mov	x2, x1
    3564:	ldr	w3, [x1, w24, sxtw #2]
    3568:	ldr	w1, [x1, x10, lsl #2]
    356c:	ldr	w2, [x2, w0, sxtw #2]
    3570:	add	w3, w26, w3
    3574:	add	w4, w1, w26
    3578:	add	w2, w26, w2
    357c:	ldrb	w6, [x25, w3, uxtw]
    3580:	ldrb	w0, [x25, w4, uxtw]
    3584:	ldrb	w2, [x25, w2, uxtw]
    3588:	cmp	w0, w6
    358c:	csel	w3, w0, w6, ls  // ls = plast
    3590:	csel	w6, w6, w0, ls  // ls = plast
    3594:	cmp	w2, w6
    3598:	b.cs	35a8 <ferror@plt+0x1eb8>  // b.hs, b.nlast
    359c:	cmp	w3, w2
    35a0:	csel	w2, w3, w2, hi  // hi = pmore
    35a4:	and	w6, w2, #0xff
    35a8:	ldr	w2, [sp, #192]
    35ac:	cmp	w2, w24
    35b0:	b.gt	365c <ferror@plt+0x1f6c>
    35b4:	mov	w4, w2
    35b8:	sub	w0, w0, w6
    35bc:	mov	w11, w2
    35c0:	mov	x8, x9
    35c4:	mov	w5, w24
    35c8:	mov	w2, w24
    35cc:	mov	w12, w4
    35d0:	cmp	w0, #0x0
    35d4:	ldr	x7, [sp, #200]
    35d8:	cbz	w0, 36c0 <ferror@plt+0x1fd0>
    35dc:	nop
    35e0:	b.le	36e0 <ferror@plt+0x1ff0>
    35e4:	cmp	w4, w2
    35e8:	b.gt	3654 <ferror@plt+0x1f64>
    35ec:	add	x1, x7, w2, sxtw #2
    35f0:	b	3604 <ferror@plt+0x1f14>
    35f4:	b.mi	3634 <ferror@plt+0x1f44>  // b.first
    35f8:	sub	x1, x1, #0x4
    35fc:	cmp	w4, w2
    3600:	b.gt	3654 <ferror@plt+0x1f64>
    3604:	ldr	w3, [x1]
    3608:	sub	w2, w2, #0x1
    360c:	add	w0, w26, w3
    3610:	ldrb	w0, [x25, w0, uxtw]
    3614:	subs	w0, w0, w6
    3618:	cbnz	w0, 35f4 <ferror@plt+0x1f04>
    361c:	sxtw	x0, w5
    3620:	sub	w5, w5, #0x1
    3624:	ldr	w13, [x7, x0, lsl #2]
    3628:	str	w13, [x1]
    362c:	str	w3, [x7, x0, lsl #2]
    3630:	b	35f8 <ferror@plt+0x1f08>
    3634:	add	w12, w4, #0x1
    3638:	ldr	w0, [x8]
    363c:	mov	w4, w12
    3640:	str	w3, [x8]
    3644:	str	w0, [x1]
    3648:	add	x8, x8, #0x4
    364c:	cmp	w4, w2
    3650:	b.le	36a4 <ferror@plt+0x1fb4>
    3654:	cmp	w11, w5
    3658:	b.le	3718 <ferror@plt+0x2028>
    365c:	ldr	w2, [sp, #220]
    3660:	add	x1, sp, #0x570
    3664:	add	w0, w26, #0x1
    3668:	str	w0, [x1, w2, sxtw #2]
    366c:	ldrsw	x0, [sp, #220]
    3670:	ldr	w26, [x1, x0, lsl #2]
    3674:	ldr	x1, [sp, #240]
    3678:	ldr	w1, [x1, x0, lsl #2]
    367c:	str	w1, [sp, #192]
    3680:	ldr	x1, [sp, #224]
    3684:	ldr	w24, [x1, x0, lsl #2]
    3688:	cmp	w19, #0x61
    368c:	b.le	3698 <ferror@plt+0x1fa8>
    3690:	mov	w0, #0x3e9                 	// #1001
    3694:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    3698:	ldr	w0, [sp, #192]
    369c:	sub	w20, w24, w0
    36a0:	b	2638 <ferror@plt+0xf48>
    36a4:	ldr	w1, [x7, w4, sxtw #2]
    36a8:	mov	w12, w4
    36ac:	add	w0, w26, w1
    36b0:	ldrb	w0, [x25, w0, uxtw]
    36b4:	sub	w0, w0, w6
    36b8:	cmp	w0, #0x0
    36bc:	cbnz	w0, 35e0 <ferror@plt+0x1ef0>
    36c0:	sxtw	x0, w11
    36c4:	add	w4, w4, #0x1
    36c8:	add	w11, w11, #0x1
    36cc:	mov	w12, w4
    36d0:	ldr	w3, [x7, x0, lsl #2]
    36d4:	str	w3, [x8]
    36d8:	str	w1, [x7, x0, lsl #2]
    36dc:	b	3648 <ferror@plt+0x1f58>
    36e0:	add	w4, w4, #0x1
    36e4:	mov	w12, w4
    36e8:	b	3648 <ferror@plt+0x1f58>
    36ec:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    36f0:	ldr	w3, [sp, #148]
    36f4:	ldr	w2, [sp, #216]
    36f8:	add	w5, w20, #0x1
    36fc:	ldr	x0, [x0, #4016]
    3700:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    3704:	ldr	w4, [sp, #236]
    3708:	add	x1, x1, #0xa88
    370c:	ldr	x0, [x0]
    3710:	bl	16e0 <fprintf@plt>
    3714:	b	2608 <ferror@plt+0xf18>
    3718:	ldr	w1, [sp, #192]
    371c:	sub	w0, w12, w11
    3720:	sub	w1, w11, w1
    3724:	cmp	w0, w1
    3728:	csel	w0, w0, w1, le
    372c:	cmp	w0, #0x0
    3730:	sub	w1, w12, w0
    3734:	b.le	3774 <ferror@plt+0x2084>
    3738:	ldr	x3, [sp, #200]
    373c:	sub	w0, w0, #0x1
    3740:	add	x0, x0, x10
    3744:	sxtw	x1, w1
    3748:	add	x3, x3, #0x4
    374c:	sub	x10, x1, x10
    3750:	add	x0, x3, x0, lsl #2
    3754:	nop
    3758:	ldr	w3, [x9, x10, lsl #2]
    375c:	ldr	w1, [x9]
    3760:	str	w3, [x9]
    3764:	str	w1, [x9, x10, lsl #2]
    3768:	add	x9, x9, #0x4
    376c:	cmp	x0, x9
    3770:	b.ne	3758 <ferror@plt+0x2068>  // b.any
    3774:	sub	w2, w5, w2
    3778:	sub	w1, w24, w5
    377c:	cmp	w1, w2
    3780:	csel	w1, w1, w2, le
    3784:	cmp	w1, #0x0
    3788:	sub	w0, w24, w1
    378c:	b.le	37d8 <ferror@plt+0x20e8>
    3790:	ldr	x5, [sp, #200]
    3794:	sxtw	x3, w12
    3798:	sub	w1, w1, #0x1
    379c:	sxtw	x0, w0
    37a0:	add	x1, x1, x3
    37a4:	add	x4, x5, #0x4
    37a8:	sub	x3, x0, x3
    37ac:	add	x4, x4, x1, lsl #2
    37b0:	add	x1, x5, w12, sxtw #2
    37b4:	nop
    37b8:	mov	x0, x1
    37bc:	ldr	w5, [x0], #4
    37c0:	cmp	x4, x0
    37c4:	ldr	w6, [x0, x3, lsl #2]
    37c8:	str	w6, [x1]
    37cc:	mov	x1, x0
    37d0:	str	w5, [x0, x3, lsl #2]
    37d4:	b.ne	37b8 <ferror@plt+0x20c8>  // b.any
    37d8:	ldr	w9, [sp, #192]
    37dc:	sub	w2, w24, w2
    37e0:	add	w6, w2, #0x1
    37e4:	add	w7, w26, #0x1
    37e8:	add	w12, w12, w9
    37ec:	sub	w1, w24, w6
    37f0:	sub	w11, w12, w11
    37f4:	mov	w8, w24
    37f8:	sub	w3, w11, #0x1
    37fc:	sub	w0, w3, w9
    3800:	cmp	w0, w1
    3804:	b.lt	3828 <ferror@plt+0x2138>  // b.tstop
    3808:	mov	w5, w0
    380c:	mov	w4, w6
    3810:	mov	w0, w1
    3814:	mov	w8, w3
    3818:	mov	w1, w5
    381c:	mov	w6, w9
    3820:	mov	w3, w24
    3824:	str	w4, [sp, #192]
    3828:	sub	w4, w2, w11
    382c:	cmp	w4, w0
    3830:	b.gt	38d8 <ferror@plt+0x21e8>
    3834:	mov	w5, w7
    3838:	mov	w24, w2
    383c:	mov	w4, w0
    3840:	mov	w2, w3
    3844:	mov	w7, w26
    3848:	mov	w9, w11
    384c:	ldr	w11, [sp, #192]
    3850:	str	w9, [sp, #192]
    3854:	cmp	w1, w4
    3858:	b.ge	3880 <ferror@plt+0x2190>  // b.tcont
    385c:	mov	w3, w26
    3860:	mov	w1, w8
    3864:	mov	w0, w6
    3868:	mov	w26, w7
    386c:	mov	w8, w2
    3870:	mov	w6, w11
    3874:	mov	w7, w3
    3878:	mov	w2, w1
    387c:	mov	w11, w0
    3880:	ldrsw	x4, [sp, #220]
    3884:	add	x1, sp, #0x570
    3888:	ldr	x9, [sp, #240]
    388c:	add	w0, w19, #0x1
    3890:	sxtw	x3, w19
    3894:	add	w19, w19, #0x2
    3898:	sxtw	x0, w0
    389c:	str	w26, [x1, x4, lsl #2]
    38a0:	str	w6, [x9, x4, lsl #2]
    38a4:	mov	w26, w5
    38a8:	ldr	x6, [sp, #224]
    38ac:	str	w7, [x1, x3, lsl #2]
    38b0:	str	w5, [x1, x0, lsl #2]
    38b4:	ldr	w1, [sp, #192]
    38b8:	str	w8, [x6, x4, lsl #2]
    38bc:	sub	w4, w19, #0x1
    38c0:	str	w11, [x9, x3, lsl #2]
    38c4:	str	w2, [x6, x3, lsl #2]
    38c8:	str	w1, [x9, x0, lsl #2]
    38cc:	str	w24, [x6, x0, lsl #2]
    38d0:	str	w4, [sp, #220]
    38d4:	b	3688 <ferror@plt+0x1f98>
    38d8:	mov	w24, w3
    38dc:	mov	w5, w26
    38e0:	b	3854 <ferror@plt+0x2164>
    38e4:	adrp	x3, 1f000 <BZ2_bzerror@@Base+0x11650>
    38e8:	adrp	x0, d000 <BZ2_bzReadOpen@@Base+0x270>
    38ec:	mov	x2, #0x21                  	// #33
    38f0:	mov	x1, #0x1                   	// #1
    38f4:	ldr	x3, [x3, #4016]
    38f8:	add	x0, x0, #0xa60
    38fc:	ldr	x3, [x3]
    3900:	bl	1680 <fwrite@plt>
    3904:	b	21b0 <ferror@plt+0xac0>
    3908:	adrp	x3, 1f000 <BZ2_bzerror@@Base+0x11650>
    390c:	adrp	x0, d000 <BZ2_bzReadOpen@@Base+0x270>
    3910:	mov	x2, #0x1b                  	// #27
    3914:	mov	x1, #0x1                   	// #1
    3918:	ldr	x3, [x3, #4016]
    391c:	add	x0, x0, #0x9e8
    3920:	ldr	x3, [x3]
    3924:	bl	1680 <fwrite@plt>
    3928:	b	2324 <ferror@plt+0xc34>
    392c:	mov	w0, #0x3ee                 	// #1006
    3930:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    3934:	b	328c <ferror@plt+0x1b9c>
    3938:	tbnz	w6, #31, 34c0 <ferror@plt+0x1dd0>
    393c:	mov	w1, #0x0                   	// #0
    3940:	b	346c <ferror@plt+0x1d7c>
    3944:	ldr	w2, [sp, #304]
    3948:	b	2414 <ferror@plt+0xd24>
    394c:	ldr	w5, [sp, #304]
    3950:	b	22b4 <ferror@plt+0xbc4>
    3954:	mov	w19, w0
    3958:	add	x1, sp, #0x570
    395c:	sub	w0, w0, #0x1
    3960:	str	w0, [sp, #220]
    3964:	b	366c <ferror@plt+0x1f7c>

0000000000003968 <BZ2_blockSort@@Base>:
    3968:	stp	x29, x30, [sp, #-96]!
    396c:	mov	w1, #0x270f                	// #9999
    3970:	mov	x29, sp
    3974:	stp	x19, x20, [sp, #16]
    3978:	mov	x20, x0
    397c:	stp	x21, x22, [sp, #32]
    3980:	ldr	w22, [x0, #108]
    3984:	stp	x23, x24, [sp, #48]
    3988:	cmp	w22, w1
    398c:	ldr	w23, [x0, #656]
    3990:	ldr	x24, [x0, #40]
    3994:	ldr	x21, [x0, #56]
    3998:	b.le	3a14 <BZ2_blockSort@@Base+0xac>
    399c:	ldr	w1, [x20, #88]
    39a0:	mov	w3, #0x64                  	// #100
    39a4:	mov	w0, #0xaaab                	// #43691
    39a8:	and	w2, w22, #0x1
    39ac:	cmp	w1, w3
    39b0:	movk	w0, #0xaaaa, lsl #16
    39b4:	csel	w1, w1, w3, le
    39b8:	add	w2, w2, w22
    39bc:	cmp	w1, #0x0
    39c0:	add	w2, w2, #0x22
    39c4:	csinc	w19, w1, wzr, gt
    39c8:	add	x6, sp, #0x5c
    39cc:	sub	w19, w19, #0x1
    39d0:	mov	w5, w23
    39d4:	ldr	x1, [x20, #64]
    39d8:	mov	w4, w22
    39dc:	umull	x19, w19, w0
    39e0:	mov	x3, x24
    39e4:	mov	x0, x21
    39e8:	add	x2, x1, w2, sxtw
    39ec:	lsr	x19, x19, #33
    39f0:	mul	w19, w19, w22
    39f4:	str	w19, [sp, #92]
    39f8:	bl	2170 <ferror@plt+0xa80>
    39fc:	cmp	w23, #0x2
    3a00:	b.gt	3a70 <BZ2_blockSort@@Base+0x108>
    3a04:	ldr	w0, [sp, #92]
    3a08:	tbz	w0, #31, 3a28 <BZ2_blockSort@@Base+0xc0>
    3a0c:	cmp	w23, #0x2
    3a10:	b.eq	3ad4 <BZ2_blockSort@@Base+0x16c>  // b.none
    3a14:	ldp	x0, x1, [x20, #24]
    3a18:	mov	w4, w23
    3a1c:	mov	w3, w22
    3a20:	mov	x2, x24
    3a24:	bl	17d8 <ferror@plt+0xe8>
    3a28:	mov	w0, #0xffffffff            	// #-1
    3a2c:	str	w0, [x20, #48]
    3a30:	ldr	w0, [x20, #108]
    3a34:	cmp	w0, #0x0
    3a38:	b.le	3ab8 <BZ2_blockSort@@Base+0x150>
    3a3c:	mov	x1, #0x0                   	// #0
    3a40:	b	3a50 <BZ2_blockSort@@Base+0xe8>
    3a44:	add	x1, x1, #0x1
    3a48:	cmp	w0, w1
    3a4c:	b.le	3ab8 <BZ2_blockSort@@Base+0x150>
    3a50:	ldr	w2, [x21, x1, lsl #2]
    3a54:	cbnz	w2, 3a44 <BZ2_blockSort@@Base+0xdc>
    3a58:	str	w1, [x20, #48]
    3a5c:	ldp	x19, x20, [sp, #16]
    3a60:	ldp	x21, x22, [sp, #32]
    3a64:	ldp	x23, x24, [sp, #48]
    3a68:	ldp	x29, x30, [sp], #96
    3a6c:	ret
    3a70:	ldr	w2, [sp, #92]
    3a74:	scvtf	s1, w22
    3a78:	str	x25, [sp, #64]
    3a7c:	adrp	x25, 1f000 <BZ2_bzerror@@Base+0x11650>
    3a80:	sub	w2, w19, w2
    3a84:	mov	w3, w22
    3a88:	ldr	x0, [x25, #4016]
    3a8c:	scvtf	s0, w2
    3a90:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    3a94:	add	x1, x1, #0xae8
    3a98:	ldr	x0, [x0]
    3a9c:	fdiv	s0, s0, s1
    3aa0:	fcvt	d0, s0
    3aa4:	bl	16e0 <fprintf@plt>
    3aa8:	ldr	w0, [sp, #92]
    3aac:	tbnz	w0, #31, 3adc <BZ2_blockSort@@Base+0x174>
    3ab0:	ldr	x25, [sp, #64]
    3ab4:	b	3a28 <BZ2_blockSort@@Base+0xc0>
    3ab8:	mov	w0, #0x3eb                 	// #1003
    3abc:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    3ac0:	ldp	x19, x20, [sp, #16]
    3ac4:	ldp	x21, x22, [sp, #32]
    3ac8:	ldp	x23, x24, [sp, #48]
    3acc:	ldp	x29, x30, [sp], #96
    3ad0:	ret
    3ad4:	str	x25, [sp, #64]
    3ad8:	adrp	x25, 1f000 <BZ2_bzerror@@Base+0x11650>
    3adc:	ldr	x25, [x25, #4016]
    3ae0:	adrp	x0, d000 <BZ2_bzReadOpen@@Base+0x270>
    3ae4:	mov	x2, #0x35                  	// #53
    3ae8:	add	x0, x0, #0xb10
    3aec:	mov	x1, #0x1                   	// #1
    3af0:	ldr	x3, [x25]
    3af4:	bl	1680 <fwrite@plt>
    3af8:	ldr	x25, [sp, #64]
    3afc:	b	3a14 <BZ2_blockSort@@Base+0xac>

0000000000003b00 <BZ2_hbMakeCodeLengths@@Base>:
    3b00:	mov	x12, #0x14a0                	// #5280
    3b04:	sub	sp, sp, x12
    3b08:	cmp	w2, #0x0
    3b0c:	stp	x29, x30, [sp]
    3b10:	mov	x29, sp
    3b14:	stp	x19, x20, [sp, #16]
    3b18:	add	x20, sp, #0x480
    3b1c:	stp	x21, x22, [sp, #32]
    3b20:	mov	w22, w2
    3b24:	stp	x23, x24, [sp, #48]
    3b28:	mov	x23, x0
    3b2c:	mov	w24, w3
    3b30:	stp	x25, x26, [sp, #64]
    3b34:	stp	x27, x28, [sp, #80]
    3b38:	b.le	3b6c <BZ2_hbMakeCodeLengths@@Base+0x6c>
    3b3c:	mov	x4, x1
    3b40:	mov	w3, #0x100                 	// #256
    3b44:	mov	x1, #0x0                   	// #0
    3b48:	ldr	w0, [x4, x1, lsl #2]
    3b4c:	add	x2, x20, x1, lsl #2
    3b50:	add	x1, x1, #0x1
    3b54:	cmp	w0, #0x0
    3b58:	lsl	w0, w0, #8
    3b5c:	csel	w0, w0, w3, ne  // ne = any
    3b60:	str	w0, [x2, #4]
    3b64:	cmp	w22, w1
    3b68:	b.gt	3b48 <BZ2_hbMakeCodeLengths@@Base+0x48>
    3b6c:	sub	w26, w22, #0x1
    3b70:	add	x0, x20, #0x8
    3b74:	str	wzr, [sp, #112]
    3b78:	add	x19, sp, #0x70
    3b7c:	add	x26, x0, w26, uxtw #2
    3b80:	mov	w0, #0xfffffffe            	// #-2
    3b84:	str	wzr, [sp, #1152]
    3b88:	lsl	w27, w22, #1
    3b8c:	str	w0, [sp, #3216]
    3b90:	add	x4, x19, w22, sxtw #2
    3b94:	sub	w27, w27, #0x1
    3b98:	sxtw	x28, w22
    3b9c:	add	x21, sp, #0xc90
    3ba0:	cmp	w22, #0x0
    3ba4:	mov	w25, #0x1                   	// #1
    3ba8:	b.le	3eac <BZ2_hbMakeCodeLengths@@Base+0x3ac>
    3bac:	nop
    3bb0:	add	w10, w22, #0x1
    3bb4:	mov	x8, #0x0                   	// #0
    3bb8:	mov	w7, #0x1                   	// #1
    3bbc:	mov	w9, #0xffffffff            	// #-1
    3bc0:	add	x3, x19, x8
    3bc4:	add	x1, x21, x8
    3bc8:	asr	w0, w7, #1
    3bcc:	add	x2, x20, x8
    3bd0:	str	w7, [x3, #4]
    3bd4:	str	w9, [x1, #4]
    3bd8:	ldr	w1, [x19, w0, sxtw #2]
    3bdc:	ldr	w6, [x2, #4]
    3be0:	ldr	w2, [x20, w1, sxtw #2]
    3be4:	cmp	w6, w2
    3be8:	b.ge	3ef8 <BZ2_hbMakeCodeLengths@@Base+0x3f8>  // b.tcont
    3bec:	mov	w3, w7
    3bf0:	b	3bf8 <BZ2_hbMakeCodeLengths@@Base+0xf8>
    3bf4:	mov	w0, w2
    3bf8:	asr	w2, w0, #1
    3bfc:	str	w1, [x19, w3, sxtw #2]
    3c00:	mov	w3, w0
    3c04:	ldr	w1, [x19, w2, sxtw #2]
    3c08:	ldr	w5, [x20, w1, sxtw #2]
    3c0c:	cmp	w5, w6
    3c10:	b.gt	3bf4 <BZ2_hbMakeCodeLengths@@Base+0xf4>
    3c14:	str	w7, [x19, w0, sxtw #2]
    3c18:	add	w7, w7, #0x1
    3c1c:	cmp	w7, w10
    3c20:	add	x8, x8, #0x4
    3c24:	b.ne	3bc0 <BZ2_hbMakeCodeLengths@@Base+0xc0>  // b.any
    3c28:	cmp	w22, #0x1
    3c2c:	b.eq	3e20 <BZ2_hbMakeCodeLengths@@Base+0x320>  // b.none
    3c30:	sub	w6, w22, #0x2
    3c34:	mov	x8, x4
    3c38:	mov	x9, x28
    3c3c:	mov	w5, w22
    3c40:	mov	w10, #0xffffffff            	// #-1
    3c44:	nop
    3c48:	ldr	w15, [x8]
    3c4c:	sub	w5, w5, #0x1
    3c50:	ldr	w13, [sp, #116]
    3c54:	cmp	w5, #0x1
    3c58:	str	w15, [sp, #116]
    3c5c:	b.eq	3f14 <BZ2_hbMakeCodeLengths@@Base+0x414>  // b.none
    3c60:	ldr	w14, [x20, w15, sxtw #2]
    3c64:	mov	w1, #0x2                   	// #2
    3c68:	mov	w7, #0x1                   	// #1
    3c6c:	b	3c90 <BZ2_hbMakeCodeLengths@@Base+0x190>
    3c70:	mov	w0, w1
    3c74:	lsl	w1, w0, #1
    3c78:	cmp	w14, w3
    3c7c:	b.lt	3cd0 <BZ2_hbMakeCodeLengths@@Base+0x1d0>  // b.tstop
    3c80:	str	w2, [x19, w7, sxtw #2]
    3c84:	cmp	w5, w0, lsl #1
    3c88:	mov	w7, w0
    3c8c:	b.lt	3cd0 <BZ2_hbMakeCodeLengths@@Base+0x1d0>  // b.tstop
    3c90:	ldr	w2, [x19, w1, sxtw #2]
    3c94:	mov	w0, w1
    3c98:	cmp	w5, w1
    3c9c:	ldr	w3, [x20, w2, sxtw #2]
    3ca0:	b.le	3c74 <BZ2_hbMakeCodeLengths@@Base+0x174>
    3ca4:	add	w0, w1, #0x1
    3ca8:	ldr	w11, [x19, w0, sxtw #2]
    3cac:	ldr	w12, [x20, w11, sxtw #2]
    3cb0:	cmp	w12, w3
    3cb4:	b.ge	3c70 <BZ2_hbMakeCodeLengths@@Base+0x170>  // b.tcont
    3cb8:	mov	w3, w12
    3cbc:	mov	w2, w11
    3cc0:	lsl	w1, w0, #1
    3cc4:	cmp	w14, w3
    3cc8:	b.ge	3c80 <BZ2_hbMakeCodeLengths@@Base+0x180>  // b.tcont
    3ccc:	nop
    3cd0:	str	w15, [x19, w7, sxtw #2]
    3cd4:	cmp	w6, #0x1
    3cd8:	ldur	w15, [x8, #-4]
    3cdc:	ldr	w16, [sp, #116]
    3ce0:	str	w15, [sp, #116]
    3ce4:	b.le	3f30 <BZ2_hbMakeCodeLengths@@Base+0x430>
    3ce8:	ldr	w14, [x20, w15, sxtw #2]
    3cec:	mov	w1, #0x2                   	// #2
    3cf0:	mov	w7, #0x1                   	// #1
    3cf4:	b	3d18 <BZ2_hbMakeCodeLengths@@Base+0x218>
    3cf8:	mov	w0, w1
    3cfc:	lsl	w1, w0, #1
    3d00:	cmp	w14, w3
    3d04:	b.lt	3d58 <BZ2_hbMakeCodeLengths@@Base+0x258>  // b.tstop
    3d08:	str	w2, [x19, w7, sxtw #2]
    3d0c:	cmp	w6, w0, lsl #1
    3d10:	mov	w7, w0
    3d14:	b.lt	3d58 <BZ2_hbMakeCodeLengths@@Base+0x258>  // b.tstop
    3d18:	ldr	w2, [x19, w1, sxtw #2]
    3d1c:	mov	w0, w1
    3d20:	cmp	w6, w1
    3d24:	ldr	w3, [x20, w2, sxtw #2]
    3d28:	b.le	3cfc <BZ2_hbMakeCodeLengths@@Base+0x1fc>
    3d2c:	add	w0, w1, #0x1
    3d30:	ldr	w11, [x19, w0, sxtw #2]
    3d34:	ldr	w12, [x20, w11, sxtw #2]
    3d38:	cmp	w12, w3
    3d3c:	b.ge	3cf8 <BZ2_hbMakeCodeLengths@@Base+0x1f8>  // b.tcont
    3d40:	mov	w3, w12
    3d44:	mov	w2, w11
    3d48:	lsl	w1, w0, #1
    3d4c:	cmp	w14, w3
    3d50:	b.ge	3d08 <BZ2_hbMakeCodeLengths@@Base+0x208>  // b.tcont
    3d54:	nop
    3d58:	sxtw	x11, w16
    3d5c:	sxtw	x13, w13
    3d60:	str	w15, [x19, w7, sxtw #2]
    3d64:	asr	w0, w5, #1
    3d68:	add	w12, w9, #0x1
    3d6c:	lsl	x2, x9, #2
    3d70:	ldr	w1, [x20, x13, lsl #2]
    3d74:	add	x14, x20, x2
    3d78:	ldr	w15, [x20, x11, lsl #2]
    3d7c:	add	x2, x21, x2
    3d80:	and	w16, w1, #0xff
    3d84:	stur	w12, [x8, #-4]
    3d88:	and	w3, w15, #0xff
    3d8c:	and	w7, w1, #0xffffff00
    3d90:	cmp	w16, w15, uxtb
    3d94:	ldr	w1, [x19, w0, sxtw #2]
    3d98:	csel	w3, w3, w16, le
    3d9c:	and	w15, w15, #0xffffff00
    3da0:	add	w3, w3, #0x1
    3da4:	add	w7, w7, w15
    3da8:	orr	w3, w3, w7
    3dac:	str	w12, [x21, x11, lsl #2]
    3db0:	str	w3, [x14, #4]
    3db4:	str	w12, [x21, x13, lsl #2]
    3db8:	str	w10, [x2, #4]
    3dbc:	ldr	w2, [x20, w1, sxtw #2]
    3dc0:	cmp	w3, w2
    3dc4:	b.ge	3ed8 <BZ2_hbMakeCodeLengths@@Base+0x3d8>  // b.tcont
    3dc8:	mov	w7, w5
    3dcc:	b	3dd4 <BZ2_hbMakeCodeLengths@@Base+0x2d4>
    3dd0:	mov	w0, w2
    3dd4:	asr	w2, w0, #1
    3dd8:	str	w1, [x19, w7, sxtw #2]
    3ddc:	mov	w7, w0
    3de0:	ldr	w1, [x19, w2, sxtw #2]
    3de4:	ldr	w11, [x20, w1, sxtw #2]
    3de8:	cmp	w3, w11
    3dec:	b.lt	3dd0 <BZ2_hbMakeCodeLengths@@Base+0x2d0>  // b.tstop
    3df0:	str	w12, [x19, w0, sxtw #2]
    3df4:	add	x9, x9, #0x1
    3df8:	sub	x8, x8, #0x4
    3dfc:	sub	w6, w6, #0x1
    3e00:	cmp	w5, #0x1
    3e04:	b.ne	3c48 <BZ2_hbMakeCodeLengths@@Base+0x148>  // b.any
    3e08:	cmp	w27, #0x203
    3e0c:	b.le	3e20 <BZ2_hbMakeCodeLengths@@Base+0x320>
    3e10:	mov	w0, #0x7d2                 	// #2002
    3e14:	str	x4, [sp, #104]
    3e18:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    3e1c:	ldr	x4, [sp, #104]
    3e20:	mov	x2, #0x0                   	// #0
    3e24:	mov	w3, #0x0                   	// #0
    3e28:	add	x0, x21, x2, lsl #2
    3e2c:	mov	w1, #0x0                   	// #0
    3e30:	ldr	w0, [x0, #4]
    3e34:	tbnz	w0, #31, 3ed0 <BZ2_hbMakeCodeLengths@@Base+0x3d0>
    3e38:	ldr	w0, [x21, w0, sxtw #2]
    3e3c:	add	w1, w1, #0x1
    3e40:	tbz	w0, #31, 3e38 <BZ2_hbMakeCodeLengths@@Base+0x338>
    3e44:	and	w0, w1, #0xff
    3e48:	strb	w0, [x23, x2]
    3e4c:	add	x2, x2, #0x1
    3e50:	cmp	w24, w1
    3e54:	add	w0, w2, #0x1
    3e58:	csel	w3, w3, w25, ge  // ge = tcont
    3e5c:	cmp	w0, w22
    3e60:	b.le	3e28 <BZ2_hbMakeCodeLengths@@Base+0x328>
    3e64:	cbz	w3, 3eac <BZ2_hbMakeCodeLengths@@Base+0x3ac>
    3e68:	add	x1, x20, #0x4
    3e6c:	nop
    3e70:	ldr	w0, [x1]
    3e74:	lsr	w2, w0, #31
    3e78:	add	w0, w2, w0, asr #8
    3e7c:	asr	w0, w0, #1
    3e80:	add	w0, w0, #0x1
    3e84:	lsl	w0, w0, #8
    3e88:	str	w0, [x1], #4
    3e8c:	cmp	x26, x1
    3e90:	b.ne	3e70 <BZ2_hbMakeCodeLengths@@Base+0x370>  // b.any
    3e94:	mov	w0, #0xfffffffe            	// #-2
    3e98:	str	wzr, [sp, #112]
    3e9c:	str	wzr, [sp, #1152]
    3ea0:	cmp	w22, #0x0
    3ea4:	str	w0, [sp, #3216]
    3ea8:	b.gt	3bb0 <BZ2_hbMakeCodeLengths@@Base+0xb0>
    3eac:	mov	x12, #0x14a0                	// #5280
    3eb0:	ldp	x29, x30, [sp]
    3eb4:	ldp	x19, x20, [sp, #16]
    3eb8:	ldp	x21, x22, [sp, #32]
    3ebc:	ldp	x23, x24, [sp, #48]
    3ec0:	ldp	x25, x26, [sp, #64]
    3ec4:	ldp	x27, x28, [sp, #80]
    3ec8:	add	sp, sp, x12
    3ecc:	ret
    3ed0:	mov	w0, #0x0                   	// #0
    3ed4:	b	3e48 <BZ2_hbMakeCodeLengths@@Base+0x348>
    3ed8:	mov	w0, w5
    3edc:	add	x9, x9, #0x1
    3ee0:	sub	x8, x8, #0x4
    3ee4:	sub	w6, w6, #0x1
    3ee8:	cmp	w5, #0x1
    3eec:	str	w12, [x19, w0, sxtw #2]
    3ef0:	b.ne	3c48 <BZ2_hbMakeCodeLengths@@Base+0x148>  // b.any
    3ef4:	b	3e08 <BZ2_hbMakeCodeLengths@@Base+0x308>
    3ef8:	mov	w0, w7
    3efc:	add	x8, x8, #0x4
    3f00:	str	w7, [x19, w0, sxtw #2]
    3f04:	add	w7, w7, #0x1
    3f08:	cmp	w7, w10
    3f0c:	b.ne	3bc0 <BZ2_hbMakeCodeLengths@@Base+0xc0>  // b.any
    3f10:	b	3c28 <BZ2_hbMakeCodeLengths@@Base+0x128>
    3f14:	mov	w7, w5
    3f18:	cmp	w6, #0x1
    3f1c:	str	w15, [x19, w7, sxtw #2]
    3f20:	ldur	w15, [x8, #-4]
    3f24:	ldr	w16, [sp, #116]
    3f28:	str	w15, [sp, #116]
    3f2c:	b.gt	3ce8 <BZ2_hbMakeCodeLengths@@Base+0x1e8>
    3f30:	mov	w7, #0x1                   	// #1
    3f34:	b	3d58 <BZ2_hbMakeCodeLengths@@Base+0x258>

0000000000003f38 <BZ2_hbAssignCodes@@Base>:
    3f38:	cmp	w2, w3
    3f3c:	b.gt	3f88 <BZ2_hbAssignCodes@@Base+0x50>
    3f40:	add	w7, w3, #0x1
    3f44:	mov	w6, #0x0                   	// #0
    3f48:	cmp	w4, #0x0
    3f4c:	mov	x3, #0x0                   	// #0
    3f50:	b.le	3f78 <BZ2_hbAssignCodes@@Base+0x40>
    3f54:	nop
    3f58:	ldrb	w5, [x1, x3]
    3f5c:	cmp	w5, w2
    3f60:	b.ne	3f6c <BZ2_hbAssignCodes@@Base+0x34>  // b.any
    3f64:	str	w6, [x0, x3, lsl #2]
    3f68:	add	w6, w6, #0x1
    3f6c:	add	x3, x3, #0x1
    3f70:	cmp	w4, w3
    3f74:	b.gt	3f58 <BZ2_hbAssignCodes@@Base+0x20>
    3f78:	add	w2, w2, #0x1
    3f7c:	lsl	w6, w6, #1
    3f80:	cmp	w7, w2
    3f84:	b.ne	3f48 <BZ2_hbAssignCodes@@Base+0x10>  // b.any
    3f88:	ret
    3f8c:	nop

0000000000003f90 <BZ2_hbCreateDecodeTables@@Base>:
    3f90:	cmp	w4, w5
    3f94:	b.gt	3fe4 <BZ2_hbCreateDecodeTables@@Base+0x54>
    3f98:	add	w11, w5, #0x1
    3f9c:	mov	w9, w4
    3fa0:	mov	w10, #0x0                   	// #0
    3fa4:	nop
    3fa8:	cmp	w6, #0x0
    3fac:	mov	x7, #0x0                   	// #0
    3fb0:	b.le	3fd8 <BZ2_hbCreateDecodeTables@@Base+0x48>
    3fb4:	nop
    3fb8:	ldrb	w8, [x3, x7]
    3fbc:	cmp	w8, w9
    3fc0:	b.ne	3fcc <BZ2_hbCreateDecodeTables@@Base+0x3c>  // b.any
    3fc4:	str	w7, [x2, w10, sxtw #2]
    3fc8:	add	w10, w10, #0x1
    3fcc:	add	x7, x7, #0x1
    3fd0:	cmp	w6, w7
    3fd4:	b.gt	3fb8 <BZ2_hbCreateDecodeTables@@Base+0x28>
    3fd8:	add	w9, w9, #0x1
    3fdc:	cmp	w9, w11
    3fe0:	b.ne	3fa8 <BZ2_hbCreateDecodeTables@@Base+0x18>  // b.any
    3fe4:	mov	x2, x1
    3fe8:	add	x7, x1, #0x5c
    3fec:	nop
    3ff0:	str	wzr, [x2], #4
    3ff4:	cmp	x7, x2
    3ff8:	b.ne	3ff0 <BZ2_hbCreateDecodeTables@@Base+0x60>  // b.any
    3ffc:	cmp	w6, #0x0
    4000:	b.le	402c <BZ2_hbCreateDecodeTables@@Base+0x9c>
    4004:	sub	w6, w6, #0x1
    4008:	add	x8, x3, #0x1
    400c:	add	x8, x8, x6
    4010:	ldrb	w2, [x3], #1
    4014:	add	x2, x2, #0x1
    4018:	cmp	x8, x3
    401c:	ldr	w6, [x1, x2, lsl #2]
    4020:	add	w6, w6, #0x1
    4024:	str	w6, [x1, x2, lsl #2]
    4028:	b.ne	4010 <BZ2_hbCreateDecodeTables@@Base+0x80>  // b.any
    402c:	add	x8, x1, #0x4
    4030:	mov	x2, x8
    4034:	nop
    4038:	ldp	w6, w3, [x2, #-4]
    403c:	add	w3, w3, w6
    4040:	str	w3, [x2], #4
    4044:	cmp	x7, x2
    4048:	b.ne	4038 <BZ2_hbCreateDecodeTables@@Base+0xa8>  // b.any
    404c:	mov	x2, x0
    4050:	add	x3, x0, #0x5c
    4054:	nop
    4058:	str	wzr, [x2], #4
    405c:	cmp	x3, x2
    4060:	b.ne	4058 <BZ2_hbCreateDecodeTables@@Base+0xc8>  // b.any
    4064:	cmp	w4, w5
    4068:	b.gt	40a0 <BZ2_hbCreateDecodeTables@@Base+0x110>
    406c:	sxtw	x2, w4
    4070:	mov	w3, #0x0                   	// #0
    4074:	nop
    4078:	ldr	w6, [x8, x2, lsl #2]
    407c:	ldr	w7, [x1, x2, lsl #2]
    4080:	sub	w6, w6, w7
    4084:	add	w3, w6, w3
    4088:	sub	w6, w3, #0x1
    408c:	str	w6, [x0, x2, lsl #2]
    4090:	add	x2, x2, #0x1
    4094:	lsl	w3, w3, #1
    4098:	cmp	w5, w2
    409c:	b.ge	4078 <BZ2_hbCreateDecodeTables@@Base+0xe8>  // b.tcont
    40a0:	add	w2, w4, #0x1
    40a4:	cmp	w5, w2
    40a8:	b.lt	40dc <BZ2_hbCreateDecodeTables@@Base+0x14c>  // b.tstop
    40ac:	sxtw	x2, w2
    40b0:	sub	x3, x0, #0x4
    40b4:	nop
    40b8:	ldr	w0, [x3, x2, lsl #2]
    40bc:	ldr	w4, [x1, x2, lsl #2]
    40c0:	add	w0, w0, #0x1
    40c4:	lsl	w0, w0, #1
    40c8:	sub	w0, w0, w4
    40cc:	str	w0, [x1, x2, lsl #2]
    40d0:	add	x2, x2, #0x1
    40d4:	cmp	w5, w2
    40d8:	b.ge	40b8 <BZ2_hbCreateDecodeTables@@Base+0x128>  // b.tcont
    40dc:	ret
    40e0:	ldr	w3, [x0, #644]
    40e4:	lsr	w4, w1, #24
    40e8:	ldr	w2, [x0, #640]
    40ec:	cmp	w3, #0x7
    40f0:	b.le	426c <BZ2_hbCreateDecodeTables@@Base+0x2dc>
    40f4:	ldr	w5, [x0, #116]
    40f8:	ldr	x6, [x0, #80]
    40fc:	lsr	w3, w2, #24
    4100:	strb	w3, [x6, w5, sxtw]
    4104:	ldr	w3, [x0, #640]
    4108:	ldr	w5, [x0, #116]
    410c:	ldr	w6, [x0, #644]
    4110:	lsl	w2, w3, #8
    4114:	add	w5, w5, #0x1
    4118:	sub	w3, w6, #0x8
    411c:	str	w5, [x0, #116]
    4120:	str	w2, [x0, #640]
    4124:	cmp	w3, #0x7
    4128:	str	w3, [x0, #644]
    412c:	b.gt	40f8 <BZ2_hbCreateDecodeTables@@Base+0x168>
    4130:	mov	w5, #0x18                  	// #24
    4134:	sub	w3, w5, w3
    4138:	str	w6, [x0, #644]
    413c:	cmp	w6, #0x7
    4140:	lsl	w3, w4, w3
    4144:	orr	w3, w3, w2
    4148:	str	w3, [x0, #640]
    414c:	ubfx	x4, x1, #16, #8
    4150:	b.le	4274 <BZ2_hbCreateDecodeTables@@Base+0x2e4>
    4154:	ldr	w2, [x0, #116]
    4158:	ldr	x5, [x0, #80]
    415c:	lsr	w3, w3, #24
    4160:	strb	w3, [x5, w2, sxtw]
    4164:	ldr	w3, [x0, #640]
    4168:	ldr	w2, [x0, #116]
    416c:	ldr	w5, [x0, #644]
    4170:	lsl	w3, w3, #8
    4174:	add	w2, w2, #0x1
    4178:	sub	w6, w5, #0x8
    417c:	str	w2, [x0, #116]
    4180:	str	w3, [x0, #640]
    4184:	cmp	w6, #0x7
    4188:	str	w6, [x0, #644]
    418c:	b.gt	4158 <BZ2_hbCreateDecodeTables@@Base+0x1c8>
    4190:	mov	w2, #0x18                  	// #24
    4194:	sub	w2, w2, w6
    4198:	str	w5, [x0, #644]
    419c:	cmp	w5, #0x7
    41a0:	lsl	w2, w4, w2
    41a4:	orr	w3, w2, w3
    41a8:	str	w3, [x0, #640]
    41ac:	ubfx	x2, x1, #8, #8
    41b0:	b.le	427c <BZ2_hbCreateDecodeTables@@Base+0x2ec>
    41b4:	ldr	w6, [x0, #116]
    41b8:	ldr	x4, [x0, #80]
    41bc:	lsr	w3, w3, #24
    41c0:	strb	w3, [x4, w6, sxtw]
    41c4:	ldr	w3, [x0, #640]
    41c8:	ldr	w6, [x0, #116]
    41cc:	ldr	w4, [x0, #644]
    41d0:	lsl	w3, w3, #8
    41d4:	add	w6, w6, #0x1
    41d8:	sub	w5, w4, #0x8
    41dc:	str	w6, [x0, #116]
    41e0:	str	w3, [x0, #640]
    41e4:	cmp	w5, #0x7
    41e8:	str	w5, [x0, #644]
    41ec:	b.gt	41b8 <BZ2_hbCreateDecodeTables@@Base+0x228>
    41f0:	mov	w6, #0x18                  	// #24
    41f4:	sub	w5, w6, w5
    41f8:	str	w4, [x0, #644]
    41fc:	and	w1, w1, #0xff
    4200:	lsl	w2, w2, w5
    4204:	orr	w2, w2, w3
    4208:	str	w2, [x0, #640]
    420c:	cmp	w4, #0x7
    4210:	b.le	4284 <BZ2_hbCreateDecodeTables@@Base+0x2f4>
    4214:	ldr	w3, [x0, #116]
    4218:	ldr	x4, [x0, #80]
    421c:	lsr	w2, w2, #24
    4220:	strb	w2, [x4, w3, sxtw]
    4224:	ldr	w2, [x0, #640]
    4228:	ldr	w3, [x0, #116]
    422c:	ldr	w5, [x0, #644]
    4230:	lsl	w2, w2, #8
    4234:	add	w3, w3, #0x1
    4238:	sub	w4, w5, #0x8
    423c:	str	w3, [x0, #116]
    4240:	str	w2, [x0, #640]
    4244:	cmp	w4, #0x7
    4248:	str	w4, [x0, #644]
    424c:	b.gt	4218 <BZ2_hbCreateDecodeTables@@Base+0x288>
    4250:	mov	w3, #0x18                  	// #24
    4254:	sub	w4, w3, w4
    4258:	str	w5, [x0, #644]
    425c:	lsl	w1, w1, w4
    4260:	orr	w2, w1, w2
    4264:	str	w2, [x0, #640]
    4268:	ret
    426c:	add	w6, w3, #0x8
    4270:	b	4130 <BZ2_hbCreateDecodeTables@@Base+0x1a0>
    4274:	add	w5, w6, #0x8
    4278:	b	4190 <BZ2_hbCreateDecodeTables@@Base+0x200>
    427c:	add	w4, w5, #0x8
    4280:	b	41f0 <BZ2_hbCreateDecodeTables@@Base+0x260>
    4284:	add	w5, w4, #0x8
    4288:	mov	w3, #0x18                  	// #24
    428c:	sub	w4, w3, w4
    4290:	str	w5, [x0, #644]
    4294:	lsl	w1, w1, w4
    4298:	orr	w2, w1, w2
    429c:	str	w2, [x0, #640]
    42a0:	ret
    42a4:	nop

00000000000042a8 <BZ2_bsInitWrite@@Base>:
    42a8:	str	xzr, [x0, #640]
    42ac:	ret

00000000000042b0 <BZ2_compressBlock@@Base>:
    42b0:	sub	sp, sp, #0x3c0
    42b4:	and	w1, w1, #0xff
    42b8:	stp	x29, x30, [sp]
    42bc:	mov	x29, sp
    42c0:	ldr	w5, [x0, #108]
    42c4:	stp	x27, x28, [sp, #80]
    42c8:	mov	x27, x0
    42cc:	ldr	w2, [x0, #660]
    42d0:	str	w1, [sp, #636]
    42d4:	cmp	w5, #0x0
    42d8:	b.le	4950 <BZ2_compressBlock@@Base+0x6a0>
    42dc:	ldr	w3, [x0, #648]
    42e0:	cmp	w2, #0x1
    42e4:	ldr	w4, [x0, #652]
    42e8:	mvn	w3, w3
    42ec:	str	w3, [x0, #648]
    42f0:	eor	w4, w3, w4, ror #31
    42f4:	str	w4, [x0, #652]
    42f8:	b.le	4300 <BZ2_compressBlock@@Base+0x50>
    42fc:	str	wzr, [x0, #116]
    4300:	ldr	w0, [x27, #656]
    4304:	cmp	w0, #0x1
    4308:	b.gt	4934 <BZ2_compressBlock@@Base+0x684>
    430c:	mov	x0, x27
    4310:	bl	1640 <BZ2_blockSort@plt>
    4314:	ldr	x0, [x27, #32]
    4318:	ldr	w1, [x27, #108]
    431c:	ldr	w2, [x27, #660]
    4320:	add	x0, x0, w1, sxtw
    4324:	str	x0, [x27, #80]
    4328:	cmp	w2, #0x1
    432c:	b.eq	4964 <BZ2_compressBlock@@Base+0x6b4>  // b.none
    4330:	cmp	w1, #0x0
    4334:	b.le	491c <BZ2_compressBlock@@Base+0x66c>
    4338:	ldr	w0, [x27, #644]
    433c:	stp	x19, x20, [sp, #16]
    4340:	ldr	w1, [x27, #640]
    4344:	stp	x21, x22, [sp, #32]
    4348:	cmp	w0, #0x7
    434c:	stp	x23, x24, [sp, #48]
    4350:	stp	x25, x26, [sp, #64]
    4354:	str	d8, [sp, #96]
    4358:	b.le	854c <BZ2_compressBlock@@Base+0x429c>
    435c:	ldr	w3, [x27, #116]
    4360:	ldr	x0, [x27, #80]
    4364:	lsr	w1, w1, #24
    4368:	strb	w1, [x0, w3, sxtw]
    436c:	ldr	w1, [x27, #640]
    4370:	ldr	w3, [x27, #116]
    4374:	ldr	w2, [x27, #644]
    4378:	lsl	w1, w1, #8
    437c:	add	w3, w3, #0x1
    4380:	sub	w0, w2, #0x8
    4384:	str	w3, [x27, #116]
    4388:	str	w1, [x27, #640]
    438c:	cmp	w0, #0x7
    4390:	str	w0, [x27, #644]
    4394:	b.gt	4360 <BZ2_compressBlock@@Base+0xb0>
    4398:	mov	w3, #0x18                  	// #24
    439c:	sub	w3, w3, w0
    43a0:	mov	w0, #0x31                  	// #49
    43a4:	str	w2, [x27, #644]
    43a8:	lsl	w0, w0, w3
    43ac:	orr	w0, w0, w1
    43b0:	str	w0, [x27, #640]
    43b4:	cmp	w2, #0x7
    43b8:	b.le	8554 <BZ2_compressBlock@@Base+0x42a4>
    43bc:	ldr	w1, [x27, #116]
    43c0:	ldr	x2, [x27, #80]
    43c4:	lsr	w0, w0, #24
    43c8:	strb	w0, [x2, w1, sxtw]
    43cc:	ldr	w0, [x27, #640]
    43d0:	ldr	w1, [x27, #116]
    43d4:	ldr	w3, [x27, #644]
    43d8:	lsl	w0, w0, #8
    43dc:	add	w1, w1, #0x1
    43e0:	sub	w2, w3, #0x8
    43e4:	str	w1, [x27, #116]
    43e8:	str	w0, [x27, #640]
    43ec:	cmp	w2, #0x7
    43f0:	str	w2, [x27, #644]
    43f4:	b.gt	43c0 <BZ2_compressBlock@@Base+0x110>
    43f8:	mov	w1, #0x18                  	// #24
    43fc:	sub	w2, w1, w2
    4400:	mov	w1, #0x41                  	// #65
    4404:	str	w3, [x27, #644]
    4408:	lsl	w1, w1, w2
    440c:	orr	w0, w1, w0
    4410:	str	w0, [x27, #640]
    4414:	cmp	w3, #0x7
    4418:	b.le	852c <BZ2_compressBlock@@Base+0x427c>
    441c:	ldr	w4, [x27, #116]
    4420:	ldr	x1, [x27, #80]
    4424:	lsr	w0, w0, #24
    4428:	strb	w0, [x1, w4, sxtw]
    442c:	ldr	w0, [x27, #640]
    4430:	ldr	w4, [x27, #116]
    4434:	ldr	w2, [x27, #644]
    4438:	lsl	w0, w0, #8
    443c:	add	w4, w4, #0x1
    4440:	sub	w3, w2, #0x8
    4444:	str	w4, [x27, #116]
    4448:	str	w0, [x27, #640]
    444c:	cmp	w3, #0x7
    4450:	str	w3, [x27, #644]
    4454:	b.gt	4420 <BZ2_compressBlock@@Base+0x170>
    4458:	mov	w1, #0x18                  	// #24
    445c:	sub	w3, w1, w3
    4460:	mov	w1, #0x59                  	// #89
    4464:	str	w2, [x27, #644]
    4468:	lsl	w1, w1, w3
    446c:	orr	w1, w1, w0
    4470:	str	w1, [x27, #640]
    4474:	cmp	w2, #0x7
    4478:	b.le	8534 <BZ2_compressBlock@@Base+0x4284>
    447c:	ldr	w0, [x27, #116]
    4480:	ldr	x2, [x27, #80]
    4484:	lsr	w1, w1, #24
    4488:	strb	w1, [x2, w0, sxtw]
    448c:	ldr	w1, [x27, #640]
    4490:	ldr	w0, [x27, #116]
    4494:	ldr	w3, [x27, #644]
    4498:	lsl	w1, w1, #8
    449c:	add	w0, w0, #0x1
    44a0:	sub	w2, w3, #0x8
    44a4:	str	w0, [x27, #116]
    44a8:	str	w1, [x27, #640]
    44ac:	cmp	w2, #0x7
    44b0:	str	w2, [x27, #644]
    44b4:	b.gt	4480 <BZ2_compressBlock@@Base+0x1d0>
    44b8:	mov	w0, #0x18                  	// #24
    44bc:	sub	w2, w0, w2
    44c0:	mov	w0, #0x26                  	// #38
    44c4:	str	w3, [x27, #644]
    44c8:	lsl	w0, w0, w2
    44cc:	orr	w1, w0, w1
    44d0:	str	w1, [x27, #640]
    44d4:	cmp	w3, #0x7
    44d8:	b.le	853c <BZ2_compressBlock@@Base+0x428c>
    44dc:	ldr	w4, [x27, #116]
    44e0:	ldr	x0, [x27, #80]
    44e4:	lsr	w1, w1, #24
    44e8:	strb	w1, [x0, w4, sxtw]
    44ec:	ldr	w1, [x27, #640]
    44f0:	ldr	w4, [x27, #116]
    44f4:	ldr	w2, [x27, #644]
    44f8:	lsl	w1, w1, #8
    44fc:	add	w4, w4, #0x1
    4500:	sub	w3, w2, #0x8
    4504:	str	w4, [x27, #116]
    4508:	str	w1, [x27, #640]
    450c:	cmp	w3, #0x7
    4510:	str	w3, [x27, #644]
    4514:	b.gt	44e0 <BZ2_compressBlock@@Base+0x230>
    4518:	mov	w0, #0x18                  	// #24
    451c:	sub	w3, w0, w3
    4520:	mov	w0, #0x53                  	// #83
    4524:	str	w2, [x27, #644]
    4528:	lsl	w0, w0, w3
    452c:	orr	w0, w0, w1
    4530:	str	w0, [x27, #640]
    4534:	cmp	w2, #0x7
    4538:	b.le	8544 <BZ2_compressBlock@@Base+0x4294>
    453c:	ldr	w1, [x27, #116]
    4540:	ldr	x2, [x27, #80]
    4544:	lsr	w0, w0, #24
    4548:	strb	w0, [x2, w1, sxtw]
    454c:	ldr	w0, [x27, #640]
    4550:	ldr	w1, [x27, #116]
    4554:	ldr	w3, [x27, #644]
    4558:	lsl	w0, w0, #8
    455c:	add	w1, w1, #0x1
    4560:	sub	w2, w3, #0x8
    4564:	str	w1, [x27, #116]
    4568:	str	w0, [x27, #640]
    456c:	cmp	w2, #0x7
    4570:	str	w2, [x27, #644]
    4574:	b.gt	4540 <BZ2_compressBlock@@Base+0x290>
    4578:	ldr	w1, [x27, #648]
    457c:	mov	w4, #0x18                  	// #24
    4580:	sub	w4, w4, w2
    4584:	mov	w2, #0x59                  	// #89
    4588:	str	w3, [x27, #644]
    458c:	lsl	w2, w2, w4
    4590:	orr	w0, w2, w0
    4594:	str	w0, [x27, #640]
    4598:	mov	x0, x27
    459c:	bl	40e0 <BZ2_hbCreateDecodeTables@@Base+0x150>
    45a0:	ldr	w1, [x27, #644]
    45a4:	cmp	w1, #0x7
    45a8:	b.le	8518 <BZ2_compressBlock@@Base+0x4268>
    45ac:	ldr	w2, [x27, #116]
    45b0:	ldr	w0, [x27, #640]
    45b4:	nop
    45b8:	ldr	x1, [x27, #80]
    45bc:	lsr	w0, w0, #24
    45c0:	strb	w0, [x1, w2, sxtw]
    45c4:	ldr	w0, [x27, #640]
    45c8:	ldr	w2, [x27, #116]
    45cc:	ldr	w1, [x27, #644]
    45d0:	lsl	w0, w0, #8
    45d4:	add	w2, w2, #0x1
    45d8:	sub	w1, w1, #0x8
    45dc:	str	w2, [x27, #116]
    45e0:	str	w0, [x27, #640]
    45e4:	cmp	w1, #0x7
    45e8:	str	w1, [x27, #644]
    45ec:	b.gt	45b8 <BZ2_compressBlock@@Base+0x308>
    45f0:	add	w1, w1, #0x1
    45f4:	str	w1, [x27, #644]
    45f8:	ldr	w4, [x27, #48]
    45fc:	cmp	w1, #0x8
    4600:	b.ne	4640 <BZ2_compressBlock@@Base+0x390>  // b.any
    4604:	ldr	w2, [x27, #116]
    4608:	ldr	x1, [x27, #80]
    460c:	lsr	w0, w0, #24
    4610:	strb	w0, [x1, w2, sxtw]
    4614:	ldr	w0, [x27, #640]
    4618:	ldr	w2, [x27, #116]
    461c:	ldr	w1, [x27, #644]
    4620:	lsl	w0, w0, #8
    4624:	add	w2, w2, #0x1
    4628:	sub	w1, w1, #0x8
    462c:	str	w2, [x27, #116]
    4630:	str	w0, [x27, #640]
    4634:	cmp	w1, #0x7
    4638:	str	w1, [x27, #644]
    463c:	b.gt	4608 <BZ2_compressBlock@@Base+0x358>
    4640:	mov	w5, #0x8                   	// #8
    4644:	sub	w5, w5, w1
    4648:	ldp	x6, x7, [x27, #56]
    464c:	lsl	w4, w4, w5
    4650:	orr	w0, w4, w0
    4654:	add	x3, x27, #0x180
    4658:	mov	w4, #0x0                   	// #0
    465c:	str	w0, [x27, #640]
    4660:	mov	w0, w4
    4664:	add	x2, x27, #0x80
    4668:	ldr	x5, [x27, #72]
    466c:	add	w1, w1, #0x18
    4670:	str	wzr, [x27, #124]
    4674:	str	x5, [sp, #128]
    4678:	str	x2, [sp, #640]
    467c:	str	w1, [x27, #644]
    4680:	ldrb	w5, [x2]
    4684:	add	w1, w0, #0x2
    4688:	add	w4, w0, #0x1
    468c:	cbz	w5, 46a0 <BZ2_compressBlock@@Base+0x3f0>
    4690:	strb	w0, [x2, #256]
    4694:	mov	w0, w4
    4698:	str	w4, [x27, #124]
    469c:	mov	w4, w1
    46a0:	add	x2, x2, #0x1
    46a4:	cmp	x3, x2
    46a8:	b.ne	4680 <BZ2_compressBlock@@Base+0x3d0>  // b.any
    46ac:	add	x20, x27, #0x2a0
    46b0:	mov	w2, w0
    46b4:	mov	x0, #0x0                   	// #0
    46b8:	str	w2, [sp, #560]
    46bc:	nop
    46c0:	str	wzr, [x20, x0, lsl #2]
    46c4:	add	x0, x0, #0x1
    46c8:	sub	w1, w0, #0x1
    46cc:	cmp	w1, w2
    46d0:	b.le	46c0 <BZ2_compressBlock@@Base+0x410>
    46d4:	ldr	w0, [sp, #560]
    46d8:	cbz	w0, 8520 <BZ2_compressBlock@@Base+0x4270>
    46dc:	ldr	w2, [sp, #560]
    46e0:	add	x0, sp, #0x2c0
    46e4:	mov	x1, x0
    46e8:	mov	w0, #0x0                   	// #0
    46ec:	str	x1, [sp, #416]
    46f0:	strb	w0, [x1], #1
    46f4:	add	w0, w0, #0x1
    46f8:	cmp	w0, w2
    46fc:	b.ne	46f0 <BZ2_compressBlock@@Base+0x440>  // b.any
    4700:	ldr	w2, [x27, #108]
    4704:	mov	x5, #0x0                   	// #0
    4708:	mov	w21, #0x0                   	// #0
    470c:	mov	w0, #0x0                   	// #0
    4710:	cmp	w2, #0x0
    4714:	mov	w9, #0x1                   	// #1
    4718:	b.le	850c <BZ2_compressBlock@@Base+0x425c>
    471c:	ldr	x11, [sp, #128]
    4720:	ldr	x12, [sp, #416]
    4724:	b	4738 <BZ2_compressBlock@@Base+0x488>
    4728:	add	x5, x5, #0x1
    472c:	add	w0, w0, #0x1
    4730:	cmp	w2, w5
    4734:	b.le	47c4 <BZ2_compressBlock@@Base+0x514>
    4738:	ldr	w1, [x6, x5, lsl #2]
    473c:	ldrb	w10, [sp, #704]
    4740:	subs	w1, w1, #0x1
    4744:	add	w3, w1, w2
    4748:	csel	w1, w3, w1, mi  // mi = first
    474c:	ldrb	w1, [x7, w1, sxtw]
    4750:	add	x1, x27, x1
    4754:	ldrb	w8, [x1, #384]
    4758:	cmp	w8, w10
    475c:	b.eq	4728 <BZ2_compressBlock@@Base+0x478>  // b.none
    4760:	cbnz	w0, 4b10 <BZ2_compressBlock@@Base+0x860>
    4764:	ldrb	w3, [sp, #705]
    4768:	strb	w10, [sp, #705]
    476c:	cmp	w8, w3
    4770:	b.eq	4b7c <BZ2_compressBlock@@Base+0x8cc>  // b.none
    4774:	add	x0, x12, #0x1
    4778:	mov	w1, w3
    477c:	ldrb	w3, [x0, #1]!
    4780:	strb	w1, [x0]
    4784:	cmp	w8, w3
    4788:	b.ne	4778 <BZ2_compressBlock@@Base+0x4c8>  // b.any
    478c:	sub	x1, x0, x12
    4790:	add	w1, w1, #0x1
    4794:	and	w0, w1, #0xffff
    4798:	add	x1, x27, w1, sxtw #2
    479c:	strb	w3, [sp, #704]
    47a0:	strh	w0, [x11, w21, sxtw #1]
    47a4:	add	x5, x5, #0x1
    47a8:	add	w21, w21, #0x1
    47ac:	cmp	w2, w5
    47b0:	ldr	w3, [x1, #672]
    47b4:	mov	w0, #0x0                   	// #0
    47b8:	add	w3, w3, #0x1
    47bc:	str	w3, [x1, #672]
    47c0:	b.gt	4738 <BZ2_compressBlock@@Base+0x488>
    47c4:	cbz	w0, 84c0 <BZ2_compressBlock@@Base+0x4210>
    47c8:	sub	w0, w0, #0x1
    47cc:	sxtw	x1, w21
    47d0:	mov	w6, #0x1                   	// #1
    47d4:	ldr	x7, [sp, #128]
    47d8:	b	4800 <BZ2_compressBlock@@Base+0x550>
    47dc:	ldr	w3, [x27, #676]
    47e0:	cmp	w0, #0x1
    47e4:	strh	w6, [x7, x1, lsl #1]
    47e8:	add	x1, x1, #0x1
    47ec:	add	w3, w3, #0x1
    47f0:	str	w3, [x27, #676]
    47f4:	sub	w3, w0, #0x2
    47f8:	b.le	482c <BZ2_compressBlock@@Base+0x57c>
    47fc:	asr	w0, w3, #1
    4800:	mov	w21, w1
    4804:	add	w5, w1, #0x1
    4808:	tbnz	w0, #0, 47dc <BZ2_compressBlock@@Base+0x52c>
    480c:	ldr	w3, [x27, #672]
    4810:	cmp	w0, #0x1
    4814:	strh	wzr, [x7, x1, lsl #1]
    4818:	add	x1, x1, #0x1
    481c:	add	w3, w3, #0x1
    4820:	str	w3, [x27, #672]
    4824:	sub	w3, w0, #0x2
    4828:	b.gt	47fc <BZ2_compressBlock@@Base+0x54c>
    482c:	ldr	x0, [sp, #128]
    4830:	add	w6, w21, #0x2
    4834:	add	x5, x0, w5, sxtw #1
    4838:	add	x1, x27, w4, sxtw #2
    483c:	strh	w4, [x5]
    4840:	ldr	w0, [x1, #672]
    4844:	add	w0, w0, #0x1
    4848:	str	w0, [x1, #672]
    484c:	str	w6, [x27, #668]
    4850:	ldr	w0, [x27, #656]
    4854:	cmp	w0, #0x2
    4858:	b.gt	8400 <BZ2_compressBlock@@Base+0x4150>
    485c:	ldr	w0, [sp, #560]
    4860:	mov	x19, #0x934c                	// #37708
    4864:	mov	x21, #0x9958                	// #39256
    4868:	add	x1, x27, x19
    486c:	add	w26, w0, #0x2
    4870:	add	x3, x27, x21
    4874:	mov	w2, #0xf                   	// #15
    4878:	str	x1, [sp, #616]
    487c:	str	x3, [sp, #648]
    4880:	cmp	w26, #0x0
    4884:	mov	x0, #0x0                   	// #0
    4888:	b.le	48a0 <BZ2_compressBlock@@Base+0x5f0>
    488c:	nop
    4890:	strb	w2, [x1, x0]
    4894:	add	x0, x0, #0x1
    4898:	cmp	w26, w0
    489c:	b.gt	4890 <BZ2_compressBlock@@Base+0x5e0>
    48a0:	add	x1, x1, #0x102
    48a4:	cmp	x3, x1
    48a8:	b.ne	4880 <BZ2_compressBlock@@Base+0x5d0>  // b.any
    48ac:	cmp	w6, #0x0
    48b0:	b.le	84d0 <BZ2_compressBlock@@Base+0x4220>
    48b4:	cmp	w6, #0xc7
    48b8:	b.le	4e48 <BZ2_compressBlock@@Base+0xb98>
    48bc:	cmp	w6, #0x257
    48c0:	b.le	83f0 <BZ2_compressBlock@@Base+0x4140>
    48c4:	cmp	w6, #0x4af
    48c8:	b.le	84e0 <BZ2_compressBlock@@Base+0x4230>
    48cc:	cmp	w6, #0x95f
    48d0:	b.gt	84f0 <BZ2_compressBlock@@Base+0x4240>
    48d4:	mov	w0, #0x5                   	// #5
    48d8:	str	w0, [sp, #140]
    48dc:	str	w0, [sp, #660]
    48e0:	b	4e54 <BZ2_compressBlock@@Base+0xba4>
    48e4:	ldr	w19, [sp, #120]
    48e8:	ldr	w20, [sp, #128]
    48ec:	cmp	w21, w19
    48f0:	b.eq	48fc <BZ2_compressBlock@@Base+0x64c>  // b.none
    48f4:	mov	w0, #0xbbf                 	// #3007
    48f8:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    48fc:	ldr	w0, [x27, #656]
    4900:	cmp	w0, #0x2
    4904:	b.gt	8478 <BZ2_compressBlock@@Base+0x41c8>
    4908:	ldp	x19, x20, [sp, #16]
    490c:	ldp	x21, x22, [sp, #32]
    4910:	ldp	x23, x24, [sp, #48]
    4914:	ldp	x25, x26, [sp, #64]
    4918:	ldr	d8, [sp, #96]
    491c:	ldr	w0, [sp, #636]
    4920:	cbnz	w0, 4b88 <BZ2_compressBlock@@Base+0x8d8>
    4924:	ldp	x29, x30, [sp]
    4928:	ldp	x27, x28, [sp, #80]
    492c:	add	sp, sp, #0x3c0
    4930:	ret
    4934:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    4938:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    493c:	add	x1, x1, #0xb80
    4940:	ldr	x0, [x0, #4016]
    4944:	ldr	x0, [x0]
    4948:	bl	16e0 <fprintf@plt>
    494c:	b	430c <BZ2_compressBlock@@Base+0x5c>
    4950:	ldr	x0, [x0, #32]
    4954:	cmp	w2, #0x1
    4958:	add	x5, x0, w5, sxtw
    495c:	str	x5, [x27, #80]
    4960:	b.ne	491c <BZ2_compressBlock@@Base+0x66c>  // b.any
    4964:	mov	x0, x27
    4968:	bl	1600 <BZ2_bsInitWrite@plt>
    496c:	ldr	w1, [x27, #644]
    4970:	cmp	w1, #0x7
    4974:	b.le	8500 <BZ2_compressBlock@@Base+0x4250>
    4978:	ldr	w3, [x27, #116]
    497c:	ldr	w0, [x27, #640]
    4980:	ldr	x1, [x27, #80]
    4984:	lsr	w0, w0, #24
    4988:	strb	w0, [x1, w3, sxtw]
    498c:	ldr	w0, [x27, #640]
    4990:	ldr	w3, [x27, #116]
    4994:	ldr	w2, [x27, #644]
    4998:	lsl	w0, w0, #8
    499c:	add	w3, w3, #0x1
    49a0:	sub	w1, w2, #0x8
    49a4:	str	w3, [x27, #116]
    49a8:	str	w0, [x27, #640]
    49ac:	cmp	w1, #0x7
    49b0:	str	w1, [x27, #644]
    49b4:	b.gt	4980 <BZ2_compressBlock@@Base+0x6d0>
    49b8:	mov	w3, #0x18                  	// #24
    49bc:	sub	w3, w3, w1
    49c0:	mov	w1, #0x42                  	// #66
    49c4:	str	w2, [x27, #644]
    49c8:	lsl	w1, w1, w3
    49cc:	orr	w1, w1, w0
    49d0:	str	w1, [x27, #640]
    49d4:	cmp	w2, #0x7
    49d8:	b.le	859c <BZ2_compressBlock@@Base+0x42ec>
    49dc:	ldr	w0, [x27, #116]
    49e0:	ldr	x2, [x27, #80]
    49e4:	lsr	w1, w1, #24
    49e8:	strb	w1, [x2, w0, sxtw]
    49ec:	ldr	w1, [x27, #640]
    49f0:	ldr	w0, [x27, #116]
    49f4:	ldr	w3, [x27, #644]
    49f8:	lsl	w1, w1, #8
    49fc:	add	w0, w0, #0x1
    4a00:	sub	w2, w3, #0x8
    4a04:	str	w0, [x27, #116]
    4a08:	str	w1, [x27, #640]
    4a0c:	cmp	w2, #0x7
    4a10:	str	w2, [x27, #644]
    4a14:	b.gt	49e0 <BZ2_compressBlock@@Base+0x730>
    4a18:	mov	w0, #0x18                  	// #24
    4a1c:	sub	w2, w0, w2
    4a20:	mov	w0, #0x5a                  	// #90
    4a24:	str	w3, [x27, #644]
    4a28:	lsl	w0, w0, w2
    4a2c:	orr	w1, w0, w1
    4a30:	str	w1, [x27, #640]
    4a34:	cmp	w3, #0x7
    4a38:	b.le	8594 <BZ2_compressBlock@@Base+0x42e4>
    4a3c:	ldr	w4, [x27, #116]
    4a40:	ldr	x0, [x27, #80]
    4a44:	lsr	w1, w1, #24
    4a48:	strb	w1, [x0, w4, sxtw]
    4a4c:	ldr	w1, [x27, #640]
    4a50:	ldr	w4, [x27, #116]
    4a54:	ldr	w2, [x27, #644]
    4a58:	lsl	w1, w1, #8
    4a5c:	add	w4, w4, #0x1
    4a60:	sub	w3, w2, #0x8
    4a64:	str	w4, [x27, #116]
    4a68:	str	w1, [x27, #640]
    4a6c:	cmp	w3, #0x7
    4a70:	str	w3, [x27, #644]
    4a74:	b.gt	4a40 <BZ2_compressBlock@@Base+0x790>
    4a78:	mov	w0, #0x18                  	// #24
    4a7c:	sub	w3, w0, w3
    4a80:	ldr	w4, [x27, #664]
    4a84:	mov	w0, #0x68                  	// #104
    4a88:	lsl	w0, w0, w3
    4a8c:	orr	w0, w0, w1
    4a90:	str	w0, [x27, #640]
    4a94:	add	w4, w4, #0x30
    4a98:	str	w2, [x27, #644]
    4a9c:	cmp	w2, #0x7
    4aa0:	and	w4, w4, #0xff
    4aa4:	b.le	858c <BZ2_compressBlock@@Base+0x42dc>
    4aa8:	ldr	w1, [x27, #116]
    4aac:	nop
    4ab0:	ldr	x2, [x27, #80]
    4ab4:	lsr	w0, w0, #24
    4ab8:	strb	w0, [x2, w1, sxtw]
    4abc:	ldr	w0, [x27, #640]
    4ac0:	ldr	w1, [x27, #116]
    4ac4:	ldr	w3, [x27, #644]
    4ac8:	lsl	w0, w0, #8
    4acc:	add	w1, w1, #0x1
    4ad0:	sub	w2, w3, #0x8
    4ad4:	str	w1, [x27, #116]
    4ad8:	str	w0, [x27, #640]
    4adc:	cmp	w2, #0x7
    4ae0:	str	w2, [x27, #644]
    4ae4:	b.gt	4ab0 <BZ2_compressBlock@@Base+0x800>
    4ae8:	mov	w1, #0x18                  	// #24
    4aec:	sub	w2, w1, w2
    4af0:	ldr	w1, [x27, #108]
    4af4:	lsl	w2, w4, w2
    4af8:	orr	w0, w2, w0
    4afc:	str	w0, [x27, #640]
    4b00:	cmp	w1, #0x0
    4b04:	str	w3, [x27, #644]
    4b08:	b.gt	4338 <BZ2_compressBlock@@Base+0x88>
    4b0c:	b	491c <BZ2_compressBlock@@Base+0x66c>
    4b10:	sub	w0, w0, #0x1
    4b14:	sxtw	x1, w21
    4b18:	b	4b40 <BZ2_compressBlock@@Base+0x890>
    4b1c:	ldr	w3, [x27, #676]
    4b20:	cmp	w0, #0x1
    4b24:	strh	w9, [x11, x1, lsl #1]
    4b28:	add	x1, x1, #0x1
    4b2c:	add	w3, w3, #0x1
    4b30:	str	w3, [x27, #676]
    4b34:	sub	w3, w0, #0x2
    4b38:	b.le	4b68 <BZ2_compressBlock@@Base+0x8b8>
    4b3c:	asr	w0, w3, #1
    4b40:	add	w21, w1, #0x1
    4b44:	tbnz	w0, #0, 4b1c <BZ2_compressBlock@@Base+0x86c>
    4b48:	ldr	w3, [x27, #672]
    4b4c:	cmp	w0, #0x1
    4b50:	strh	wzr, [x11, x1, lsl #1]
    4b54:	add	x1, x1, #0x1
    4b58:	add	w3, w3, #0x1
    4b5c:	str	w3, [x27, #672]
    4b60:	sub	w3, w0, #0x2
    4b64:	b.gt	4b3c <BZ2_compressBlock@@Base+0x88c>
    4b68:	ldrb	w10, [sp, #704]
    4b6c:	ldrb	w3, [sp, #705]
    4b70:	strb	w10, [sp, #705]
    4b74:	cmp	w8, w3
    4b78:	b.ne	4774 <BZ2_compressBlock@@Base+0x4c4>  // b.any
    4b7c:	mov	w1, #0x2                   	// #2
    4b80:	mov	w0, w1
    4b84:	b	4798 <BZ2_compressBlock@@Base+0x4e8>
    4b88:	ldr	w0, [x27, #644]
    4b8c:	ldr	w1, [x27, #640]
    4b90:	cmp	w0, #0x7
    4b94:	b.le	855c <BZ2_compressBlock@@Base+0x42ac>
    4b98:	ldr	w3, [x27, #116]
    4b9c:	nop
    4ba0:	ldr	x0, [x27, #80]
    4ba4:	lsr	w1, w1, #24
    4ba8:	strb	w1, [x0, w3, sxtw]
    4bac:	ldr	w1, [x27, #640]
    4bb0:	ldr	w3, [x27, #116]
    4bb4:	ldr	w2, [x27, #644]
    4bb8:	lsl	w1, w1, #8
    4bbc:	add	w3, w3, #0x1
    4bc0:	sub	w0, w2, #0x8
    4bc4:	str	w3, [x27, #116]
    4bc8:	str	w1, [x27, #640]
    4bcc:	cmp	w0, #0x7
    4bd0:	str	w0, [x27, #644]
    4bd4:	b.gt	4ba0 <BZ2_compressBlock@@Base+0x8f0>
    4bd8:	mov	w3, #0x18                  	// #24
    4bdc:	sub	w3, w3, w0
    4be0:	mov	w0, #0x17                  	// #23
    4be4:	str	w2, [x27, #644]
    4be8:	lsl	w0, w0, w3
    4bec:	orr	w0, w0, w1
    4bf0:	str	w0, [x27, #640]
    4bf4:	cmp	w2, #0x7
    4bf8:	b.le	8564 <BZ2_compressBlock@@Base+0x42b4>
    4bfc:	ldr	w1, [x27, #116]
    4c00:	ldr	x2, [x27, #80]
    4c04:	lsr	w0, w0, #24
    4c08:	strb	w0, [x2, w1, sxtw]
    4c0c:	ldr	w0, [x27, #640]
    4c10:	ldr	w1, [x27, #116]
    4c14:	ldr	w3, [x27, #644]
    4c18:	lsl	w0, w0, #8
    4c1c:	add	w1, w1, #0x1
    4c20:	sub	w2, w3, #0x8
    4c24:	str	w1, [x27, #116]
    4c28:	str	w0, [x27, #640]
    4c2c:	cmp	w2, #0x7
    4c30:	str	w2, [x27, #644]
    4c34:	b.gt	4c00 <BZ2_compressBlock@@Base+0x950>
    4c38:	mov	w1, #0x18                  	// #24
    4c3c:	sub	w2, w1, w2
    4c40:	mov	w1, #0x72                  	// #114
    4c44:	str	w3, [x27, #644]
    4c48:	lsl	w1, w1, w2
    4c4c:	orr	w0, w1, w0
    4c50:	str	w0, [x27, #640]
    4c54:	cmp	w3, #0x7
    4c58:	b.le	856c <BZ2_compressBlock@@Base+0x42bc>
    4c5c:	ldr	w4, [x27, #116]
    4c60:	ldr	x1, [x27, #80]
    4c64:	lsr	w0, w0, #24
    4c68:	strb	w0, [x1, w4, sxtw]
    4c6c:	ldr	w0, [x27, #640]
    4c70:	ldr	w4, [x27, #116]
    4c74:	ldr	w2, [x27, #644]
    4c78:	lsl	w0, w0, #8
    4c7c:	add	w4, w4, #0x1
    4c80:	sub	w3, w2, #0x8
    4c84:	str	w4, [x27, #116]
    4c88:	str	w0, [x27, #640]
    4c8c:	cmp	w3, #0x7
    4c90:	str	w3, [x27, #644]
    4c94:	b.gt	4c60 <BZ2_compressBlock@@Base+0x9b0>
    4c98:	mov	w1, #0x18                  	// #24
    4c9c:	sub	w3, w1, w3
    4ca0:	mov	w1, #0x45                  	// #69
    4ca4:	str	w2, [x27, #644]
    4ca8:	lsl	w1, w1, w3
    4cac:	orr	w1, w1, w0
    4cb0:	str	w1, [x27, #640]
    4cb4:	cmp	w2, #0x7
    4cb8:	b.le	8574 <BZ2_compressBlock@@Base+0x42c4>
    4cbc:	ldr	w0, [x27, #116]
    4cc0:	ldr	x2, [x27, #80]
    4cc4:	lsr	w1, w1, #24
    4cc8:	strb	w1, [x2, w0, sxtw]
    4ccc:	ldr	w1, [x27, #640]
    4cd0:	ldr	w0, [x27, #116]
    4cd4:	ldr	w3, [x27, #644]
    4cd8:	lsl	w1, w1, #8
    4cdc:	add	w0, w0, #0x1
    4ce0:	sub	w2, w3, #0x8
    4ce4:	str	w0, [x27, #116]
    4ce8:	str	w1, [x27, #640]
    4cec:	cmp	w2, #0x7
    4cf0:	str	w2, [x27, #644]
    4cf4:	b.gt	4cc0 <BZ2_compressBlock@@Base+0xa10>
    4cf8:	mov	w0, #0x18                  	// #24
    4cfc:	sub	w2, w0, w2
    4d00:	mov	w0, #0x38                  	// #56
    4d04:	str	w3, [x27, #644]
    4d08:	lsl	w0, w0, w2
    4d0c:	orr	w1, w0, w1
    4d10:	str	w1, [x27, #640]
    4d14:	cmp	w3, #0x7
    4d18:	b.le	857c <BZ2_compressBlock@@Base+0x42cc>
    4d1c:	ldr	w4, [x27, #116]
    4d20:	ldr	x0, [x27, #80]
    4d24:	lsr	w1, w1, #24
    4d28:	strb	w1, [x0, w4, sxtw]
    4d2c:	ldr	w1, [x27, #640]
    4d30:	ldr	w4, [x27, #116]
    4d34:	ldr	w2, [x27, #644]
    4d38:	lsl	w1, w1, #8
    4d3c:	add	w4, w4, #0x1
    4d40:	sub	w3, w2, #0x8
    4d44:	str	w4, [x27, #116]
    4d48:	str	w1, [x27, #640]
    4d4c:	cmp	w3, #0x7
    4d50:	str	w3, [x27, #644]
    4d54:	b.gt	4d20 <BZ2_compressBlock@@Base+0xa70>
    4d58:	mov	w0, #0x18                  	// #24
    4d5c:	sub	w3, w0, w3
    4d60:	mov	w0, #0x50                  	// #80
    4d64:	str	w2, [x27, #644]
    4d68:	lsl	w0, w0, w3
    4d6c:	orr	w0, w0, w1
    4d70:	str	w0, [x27, #640]
    4d74:	cmp	w2, #0x7
    4d78:	b.le	8584 <BZ2_compressBlock@@Base+0x42d4>
    4d7c:	ldr	w1, [x27, #116]
    4d80:	ldr	x2, [x27, #80]
    4d84:	lsr	w0, w0, #24
    4d88:	strb	w0, [x2, w1, sxtw]
    4d8c:	ldr	w0, [x27, #640]
    4d90:	ldr	w1, [x27, #116]
    4d94:	ldr	w3, [x27, #644]
    4d98:	lsl	w0, w0, #8
    4d9c:	add	w1, w1, #0x1
    4da0:	sub	w2, w3, #0x8
    4da4:	str	w1, [x27, #116]
    4da8:	str	w0, [x27, #640]
    4dac:	cmp	w2, #0x7
    4db0:	str	w2, [x27, #644]
    4db4:	b.gt	4d80 <BZ2_compressBlock@@Base+0xad0>
    4db8:	ldr	w1, [x27, #652]
    4dbc:	mov	w4, #0x18                  	// #24
    4dc0:	sub	w4, w4, w2
    4dc4:	mov	w2, #0x90                  	// #144
    4dc8:	str	w3, [x27, #644]
    4dcc:	lsl	w2, w2, w4
    4dd0:	orr	w0, w2, w0
    4dd4:	str	w0, [x27, #640]
    4dd8:	mov	x0, x27
    4ddc:	bl	40e0 <BZ2_hbCreateDecodeTables@@Base+0x150>
    4de0:	ldr	w0, [x27, #656]
    4de4:	cmp	w0, #0x1
    4de8:	b.gt	83d0 <BZ2_compressBlock@@Base+0x4120>
    4dec:	ldr	w0, [x27, #644]
    4df0:	cmp	w0, #0x0
    4df4:	b.le	4924 <BZ2_compressBlock@@Base+0x674>
    4df8:	ldr	w1, [x27, #116]
    4dfc:	ldr	w0, [x27, #640]
    4e00:	ldr	x2, [x27, #80]
    4e04:	lsr	w0, w0, #24
    4e08:	strb	w0, [x2, w1, sxtw]
    4e0c:	ldr	w0, [x27, #640]
    4e10:	ldr	w1, [x27, #116]
    4e14:	ldr	w2, [x27, #644]
    4e18:	lsl	w0, w0, #8
    4e1c:	add	w1, w1, #0x1
    4e20:	sub	w2, w2, #0x8
    4e24:	str	w1, [x27, #116]
    4e28:	str	w0, [x27, #640]
    4e2c:	cmp	w2, #0x0
    4e30:	str	w2, [x27, #644]
    4e34:	b.gt	4e00 <BZ2_compressBlock@@Base+0xb50>
    4e38:	ldp	x29, x30, [sp]
    4e3c:	ldp	x27, x28, [sp, #80]
    4e40:	add	sp, sp, #0x3c0
    4e44:	ret
    4e48:	mov	w0, #0x2                   	// #2
    4e4c:	str	w0, [sp, #140]
    4e50:	str	w0, [sp, #660]
    4e54:	ldr	w2, [sp, #140]
    4e58:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    4e5c:	add	x28, x1, #0xc00
    4e60:	adrp	x19, 1f000 <BZ2_bzerror@@Base+0x11650>
    4e64:	mov	w21, w2
    4e68:	mov	x1, x28
    4e6c:	mov	w28, w6
    4e70:	mov	x0, #0x4059000000000000    	// #4636737291354636288
    4e74:	mov	w25, #0x102                 	// #258
    4e78:	mov	x23, x20
    4e7c:	fmov	d8, x0
    4e80:	mov	w20, w2
    4e84:	sdiv	w3, w28, w21
    4e88:	cmp	w20, w21
    4e8c:	ldr	x0, [x19, #4016]
    4e90:	smaddl	x25, w2, w25, x27
    4e94:	str	x0, [sp, #144]
    4e98:	cset	w8, ne  // ne = any
    4e9c:	cmp	w21, #0x1
    4ea0:	mov	w24, #0x0                   	// #0
    4ea4:	cset	w5, ne  // ne = any
    4ea8:	mov	x18, #0x924a                	// #37450
    4eac:	sub	w19, w24, #0x1
    4eb0:	add	x25, x25, x18
    4eb4:	cmp	w3, #0x0
    4eb8:	b.le	4fa8 <BZ2_compressBlock@@Base+0xcf8>
    4ebc:	nop
    4ec0:	ldr	w0, [sp, #560]
    4ec4:	add	w2, w0, #0x1
    4ec8:	cmp	w19, w2
    4ecc:	b.ge	4fa8 <BZ2_compressBlock@@Base+0xcf8>  // b.tcont
    4ed0:	sxtw	x0, w24
    4ed4:	sub	w2, w2, w24
    4ed8:	add	x4, x0, #0x1
    4edc:	mov	w22, #0x0                   	// #0
    4ee0:	add	x2, x2, x4
    4ee4:	b	4ef0 <BZ2_compressBlock@@Base+0xc40>
    4ee8:	cmp	x2, x0
    4eec:	b.eq	4f08 <BZ2_compressBlock@@Base+0xc58>  // b.none
    4ef0:	ldr	w4, [x23, x0, lsl #2]
    4ef4:	mov	w19, w0
    4ef8:	add	x0, x0, #0x1
    4efc:	add	w22, w22, w4
    4f00:	cmp	w3, w22
    4f04:	b.gt	4ee8 <BZ2_compressBlock@@Base+0xc38>
    4f08:	cmp	w8, #0x0
    4f0c:	ccmp	w5, #0x0, #0x4, ne  // ne = any
    4f10:	cset	w0, ne  // ne = any
    4f14:	cmp	w19, w24
    4f18:	cset	w2, gt
    4f1c:	and	w0, w0, w2
    4f20:	cbnz	w0, 4fb0 <BZ2_compressBlock@@Base+0xd00>
    4f24:	ldr	w0, [x27, #656]
    4f28:	add	w8, w19, #0x1
    4f2c:	cmp	w0, #0x2
    4f30:	b.gt	4fd8 <BZ2_compressBlock@@Base+0xd28>
    4f34:	sub	w21, w21, #0x1
    4f38:	cmp	w26, #0x0
    4f3c:	mov	x0, #0x0                   	// #0
    4f40:	mov	w2, #0xf                   	// #15
    4f44:	b.gt	4f5c <BZ2_compressBlock@@Base+0xcac>
    4f48:	b	4f78 <BZ2_compressBlock@@Base+0xcc8>
    4f4c:	strb	wzr, [x25, x0]
    4f50:	add	x0, x0, #0x1
    4f54:	cmp	w26, w0
    4f58:	b.le	4f78 <BZ2_compressBlock@@Base+0xcc8>
    4f5c:	cmp	w24, w0
    4f60:	ccmp	w19, w0, #0x1, le
    4f64:	b.ge	4f4c <BZ2_compressBlock@@Base+0xc9c>  // b.tcont
    4f68:	strb	w2, [x25, x0]
    4f6c:	add	x0, x0, #0x1
    4f70:	cmp	w26, w0
    4f74:	b.gt	4f5c <BZ2_compressBlock@@Base+0xcac>
    4f78:	sub	w28, w28, w22
    4f7c:	sub	x25, x25, #0x102
    4f80:	cbz	w21, 5024 <BZ2_compressBlock@@Base+0xd74>
    4f84:	sdiv	w3, w28, w21
    4f88:	cmp	w20, w21
    4f8c:	mov	w24, w8
    4f90:	cset	w8, ne  // ne = any
    4f94:	cmp	w21, #0x1
    4f98:	sub	w19, w24, #0x1
    4f9c:	cset	w5, ne  // ne = any
    4fa0:	cmp	w3, #0x0
    4fa4:	b.gt	4ec0 <BZ2_compressBlock@@Base+0xc10>
    4fa8:	mov	w22, #0x0                   	// #0
    4fac:	b	4f24 <BZ2_compressBlock@@Base+0xc74>
    4fb0:	sub	w0, w20, w21
    4fb4:	tbz	w0, #0, 4f24 <BZ2_compressBlock@@Base+0xc74>
    4fb8:	add	x0, x27, w19, sxtw #2
    4fbc:	mov	w8, w19
    4fc0:	sub	w19, w19, #0x1
    4fc4:	ldr	w0, [x0, #672]
    4fc8:	sub	w22, w22, w0
    4fcc:	ldr	w0, [x27, #656]
    4fd0:	cmp	w0, #0x2
    4fd4:	b.le	4f34 <BZ2_compressBlock@@Base+0xc84>
    4fd8:	scvtf	s1, w22
    4fdc:	ldr	s0, [x27, #668]
    4fe0:	ldr	x0, [sp, #144]
    4fe4:	mov	w5, w22
    4fe8:	scvtf	s0, s0
    4fec:	mov	w4, w19
    4ff0:	fcvt	d1, s1
    4ff4:	mov	w3, w24
    4ff8:	ldr	x0, [x0]
    4ffc:	mov	w2, w21
    5000:	fcvt	d0, s0
    5004:	str	x1, [sp, #120]
    5008:	fmul	d1, d1, d8
    500c:	str	w8, [sp, #408]
    5010:	fdiv	d0, d1, d0
    5014:	bl	16e0 <fprintf@plt>
    5018:	ldr	w8, [sp, #408]
    501c:	ldr	x1, [sp, #120]
    5020:	b	4f34 <BZ2_compressBlock@@Base+0xc84>
    5024:	ldr	w0, [sp, #140]
    5028:	mov	x14, #0xb590                	// #46480
    502c:	add	x4, x27, x14
    5030:	mov	w5, #0x408                 	// #1032
    5034:	sub	w3, w0, #0x1
    5038:	mov	w0, #0x102                 	// #258
    503c:	mov	x16, #0x934d                	// #37709
    5040:	add	x1, x27, x16
    5044:	mov	x15, #0x944e                	// #37966
    5048:	mov	x25, x27
    504c:	umull	x7, w3, w0
    5050:	ldr	w0, [sp, #560]
    5054:	umaddl	x2, w3, w5, x4
    5058:	add	x6, x27, x15
    505c:	add	w0, w0, #0x1
    5060:	str	x2, [sp, #584]
    5064:	add	x0, x1, x0
    5068:	add	x2, x3, #0x2
    506c:	mov	x17, #0xb188                	// #45448
    5070:	str	x2, [sp, #424]
    5074:	add	x2, x6, x7
    5078:	str	wzr, [sp, #556]
    507c:	str	x6, [sp, #576]
    5080:	str	x7, [sp, #592]
    5084:	str	x2, [sp, #600]
    5088:	str	w26, [sp, #632]
    508c:	str	w21, [sp, #656]
    5090:	str	x0, [sp, #664]
    5094:	add	x0, x27, x17
    5098:	str	x0, [sp, #624]
    509c:	mov	x0, #0x1                   	// #1
    50a0:	ldp	x1, x2, [sp, #416]
    50a4:	add	x1, x1, x0, lsl #2
    50a8:	add	x0, x0, #0x1
    50ac:	cmp	x2, x0
    50b0:	stur	wzr, [x1, #-4]
    50b4:	b.ne	50a0 <BZ2_compressBlock@@Base+0xdf0>  // b.any
    50b8:	ldr	w2, [sp, #632]
    50bc:	ldr	x1, [sp, #624]
    50c0:	str	x1, [sp, #608]
    50c4:	nop
    50c8:	cmp	w2, #0x0
    50cc:	mov	x0, #0x0                   	// #0
    50d0:	b.le	50e8 <BZ2_compressBlock@@Base+0xe38>
    50d4:	nop
    50d8:	str	wzr, [x1, x0, lsl #2]
    50dc:	add	x0, x0, #0x1
    50e0:	cmp	w2, w0
    50e4:	b.gt	50d8 <BZ2_compressBlock@@Base+0xe28>
    50e8:	ldr	x0, [sp, #584]
    50ec:	add	x1, x1, #0x408
    50f0:	cmp	x0, x1
    50f4:	b.ne	50c8 <BZ2_compressBlock@@Base+0xe18>  // b.any
    50f8:	ldr	w0, [sp, #140]
    50fc:	cmp	w0, #0x6
    5100:	b.eq	82d8 <BZ2_compressBlock@@Base+0x4028>  // b.none
    5104:	ldr	w0, [x25, #668]
    5108:	str	w0, [sp, #144]
    510c:	cmp	w0, #0x0
    5110:	b.le	8348 <BZ2_compressBlock@@Base+0x4098>
    5114:	mov	x2, #0x1                   	// #1
    5118:	sub	w0, w0, #0x1
    511c:	mov	w1, #0x0                   	// #0
    5120:	mov	w28, w1
    5124:	str	x2, [sp, #152]
    5128:	add	x2, sp, #0x2a0
    512c:	ldr	w1, [sp, #144]
    5130:	str	x2, [sp, #160]
    5134:	add	x2, x25, #0x6a7
    5138:	str	wzr, [sp, #412]
    513c:	str	w0, [sp, #564]
    5140:	add	w0, w28, #0x31
    5144:	str	w0, [sp, #120]
    5148:	cmp	w0, w1
    514c:	str	x2, [sp, #568]
    5150:	b.ge	6304 <BZ2_compressBlock@@Base+0x2054>  // b.tcont
    5154:	nop
    5158:	add	w0, w28, #0x32
    515c:	str	w0, [sp, #408]
    5160:	mov	x0, #0x1                   	// #1
    5164:	nop
    5168:	ldr	x1, [sp, #160]
    516c:	ldr	x2, [sp, #424]
    5170:	add	x1, x1, x0, lsl #1
    5174:	add	x0, x0, #0x1
    5178:	cmp	x2, x0
    517c:	sturh	wzr, [x1, #-2]
    5180:	b.ne	5168 <BZ2_compressBlock@@Base+0xeb8>  // b.any
    5184:	ldr	w0, [sp, #140]
    5188:	cmp	w0, #0x6
    518c:	b.ne	6318 <BZ2_compressBlock@@Base+0x2068>  // b.any
    5190:	ldr	w0, [sp, #120]
    5194:	sub	w0, w0, w28
    5198:	cmp	w0, #0x31
    519c:	b.ne	6318 <BZ2_compressBlock@@Base+0x2068>  // b.any
    51a0:	ldr	x2, [sp, #128]
    51a4:	sbfiz	x0, x28, #1, #32
    51a8:	str	x0, [sp, #432]
    51ac:	add	x0, x2, x0
    51b0:	ldrh	w2, [x0, #6]
    51b4:	ldrh	w1, [x0, #8]
    51b8:	ldrh	w30, [x0, #2]
    51bc:	add	x18, x2, #0xc9b
    51c0:	ldrh	w3, [x0, #4]
    51c4:	add	x17, x1, #0xc9b
    51c8:	ldrh	w23, [x0, #16]
    51cc:	add	x16, x30, #0xc9b
    51d0:	add	x15, x3, #0xc9b
    51d4:	ldrh	w5, [x0, #26]
    51d8:	ldrh	w6, [x0, #30]
    51dc:	add	x11, x23, #0xc9b
    51e0:	add	x18, x25, x18, lsl #4
    51e4:	add	x17, x25, x17, lsl #4
    51e8:	add	x16, x25, x16, lsl #4
    51ec:	ldrh	w4, [x0, #28]
    51f0:	add	x15, x25, x15, lsl #4
    51f4:	add	x11, x25, x11, lsl #4
    51f8:	stp	x3, x5, [sp, #176]
    51fc:	mov	x3, x6
    5200:	add	x6, x5, #0xc9b
    5204:	ldrh	w5, [x0, #32]
    5208:	add	x30, x25, x30, lsl #4
    520c:	ldr	w16, [x16, #8]
    5210:	add	x6, x25, x6, lsl #4
    5214:	ldr	w17, [x17, #8]
    5218:	add	x23, x25, x23, lsl #4
    521c:	ldr	w18, [x18, #8]
    5220:	add	x2, x25, x2, lsl #4
    5224:	str	x5, [sp, #168]
    5228:	add	x5, x4, #0xc9b
    522c:	ldrh	w26, [x0, #12]
    5230:	add	x1, x25, x1, lsl #4
    5234:	ldrh	w24, [x0, #14]
    5238:	add	x5, x25, x5, lsl #4
    523c:	ldr	w15, [x15, #8]
    5240:	add	x13, x26, #0xc9b
    5244:	str	x4, [sp, #192]
    5248:	add	x4, x3, #0xc9b
    524c:	str	x3, [sp, #200]
    5250:	add	x12, x24, #0xc9b
    5254:	str	x30, [sp, #208]
    5258:	add	x13, x25, x13, lsl #4
    525c:	str	w18, [sp, #344]
    5260:	add	x12, x25, x12, lsl #4
    5264:	str	w17, [sp, #352]
    5268:	add	x4, x25, x4, lsl #4
    526c:	str	w16, [sp, #360]
    5270:	add	x26, x25, x26, lsl #4
    5274:	ldrh	w19, [x0, #24]
    5278:	add	x24, x25, x24, lsl #4
    527c:	ldrh	w27, [x0, #10]
    5280:	add	x24, x24, #0xc, lsl #12
    5284:	ldrh	w22, [x0, #18]
    5288:	add	x7, x19, #0xc9b
    528c:	ldrh	w21, [x0, #20]
    5290:	add	x14, x27, #0xc9b
    5294:	ldrh	w20, [x0, #22]
    5298:	add	x10, x22, #0xc9b
    529c:	ldr	x3, [sp, #168]
    52a0:	str	w15, [sp, #368]
    52a4:	ldr	w11, [x11, #8]
    52a8:	add	x9, x21, #0xc9b
    52ac:	str	w11, [sp, #400]
    52b0:	add	x11, sp, #0x1c4
    52b4:	add	x8, x20, #0xc9b
    52b8:	ldr	w17, [x5, #8]
    52bc:	ldr	w6, [x6, #8]
    52c0:	add	x3, x3, #0xc9b
    52c4:	add	x8, x25, x8, lsl #4
    52c8:	add	x7, x25, x7, lsl #4
    52cc:	add	x14, x25, x14, lsl #4
    52d0:	add	x10, x25, x10, lsl #4
    52d4:	add	x9, x25, x9, lsl #4
    52d8:	stp	w6, w17, [x11, #4]
    52dc:	ldr	x15, [sp, #176]
    52e0:	add	x3, x25, x3, lsl #4
    52e4:	ldr	x6, [sp, #184]
    52e8:	add	x21, x25, x21, lsl #4
    52ec:	ldr	x5, [sp, #192]
    52f0:	add	x27, x25, x27, lsl #4
    52f4:	ldr	w12, [x12, #8]
    52f8:	add	x22, x25, x22, lsl #4
    52fc:	ldr	w13, [x13, #8]
    5300:	add	x15, x25, x15, lsl #4
    5304:	ldr	w9, [x9, #8]
    5308:	add	x18, x25, x5, lsl #4
    530c:	ldr	w10, [x10, #8]
    5310:	add	x6, x25, x6, lsl #4
    5314:	ldr	w14, [x14, #8]
    5318:	add	x17, x2, #0xc, lsl #12
    531c:	str	w13, [sp, #384]
    5320:	add	x20, x25, x20, lsl #4
    5324:	ldr	w13, [x7, #8]
    5328:	add	x20, x20, #0xc, lsl #12
    532c:	str	w12, [sp, #392]
    5330:	ldr	w12, [x8, #8]
    5334:	stp	w10, w9, [x11, #-12]
    5338:	str	x15, [sp, #176]
    533c:	str	x27, [sp, #224]
    5340:	stp	x26, x23, [sp, #232]
    5344:	stp	x22, x21, [sp, #248]
    5348:	str	x18, [sp, #280]
    534c:	add	x18, x1, #0xc, lsl #12
    5350:	str	w14, [sp, #376]
    5354:	add	x14, x25, x19, lsl #4
    5358:	stp	x14, x6, [sp, #264]
    535c:	str	w12, [sp, #448]
    5360:	str	w13, [sp, #452]
    5364:	ldr	w4, [x4, #8]
    5368:	ldr	w21, [x3, #8]
    536c:	ldr	x3, [sp, #168]
    5370:	str	w4, [sp, #464]
    5374:	ldrh	w14, [x0, #38]
    5378:	ldr	x5, [sp, #200]
    537c:	add	x2, x14, #0xc9b
    5380:	ldrh	w16, [x0, #34]
    5384:	add	x3, x25, x3, lsl #4
    5388:	ldrh	w15, [x0, #36]
    538c:	add	x2, x25, x2, lsl #4
    5390:	ldrh	w13, [x0, #40]
    5394:	add	x1, x16, #0xc9b
    5398:	ldrh	w8, [x0, #50]
    539c:	add	x30, x15, #0xc9b
    53a0:	add	x27, x13, #0xc9b
    53a4:	add	x5, x25, x5, lsl #4
    53a8:	add	x19, x8, #0xc9b
    53ac:	stp	x5, x3, [sp, #288]
    53b0:	ldrh	w3, [x0, #60]
    53b4:	add	x1, x25, x1, lsl #4
    53b8:	str	x3, [sp, #216]
    53bc:	mov	x3, x2
    53c0:	add	x19, x25, x19, lsl #4
    53c4:	add	x30, x25, x30, lsl #4
    53c8:	add	x27, x25, x27, lsl #4
    53cc:	ldr	w1, [x1, #8]
    53d0:	add	x14, x25, x14, lsl #4
    53d4:	ldr	w3, [x3, #8]
    53d8:	add	x14, x14, #0xc, lsl #12
    53dc:	ldrh	w12, [x0, #42]
    53e0:	add	x13, x25, x13, lsl #4
    53e4:	ldrh	w11, [x0, #44]
    53e8:	add	x8, x25, x8, lsl #4
    53ec:	ldrh	w10, [x0, #46]
    53f0:	add	x26, x12, #0xc9b
    53f4:	ldrh	w9, [x0, #48]
    53f8:	add	x23, x11, #0xc9b
    53fc:	ldrh	w7, [x0, #52]
    5400:	add	x22, x10, #0xc9b
    5404:	ldrh	w6, [x0, #54]
    5408:	add	x26, x25, x26, lsl #4
    540c:	ldrh	w5, [x0, #56]
    5410:	add	x23, x25, x23, lsl #4
    5414:	ldrh	w4, [x0, #58]
    5418:	add	x22, x25, x22, lsl #4
    541c:	ldrh	w2, [x0, #62]
    5420:	add	x13, x13, #0xc, lsl #12
    5424:	ldr	w30, [x30, #8]
    5428:	add	x8, x8, #0xc, lsl #12
    542c:	str	w21, [sp, #468]
    5430:	add	x21, x9, #0xc9b
    5434:	str	w1, [sp, #472]
    5438:	add	x9, x25, x9, lsl #4
    543c:	ldrh	w1, [x0, #64]
    5440:	add	x21, x25, x21, lsl #4
    5444:	str	w3, [sp, #476]
    5448:	add	x9, x9, #0xc, lsl #12
    544c:	stp	x17, x18, [sp, #488]
    5450:	add	x18, x7, #0xc9b
    5454:	ldr	w27, [x27, #8]
    5458:	ldr	w3, [x19, #8]
    545c:	add	x18, x25, x18, lsl #4
    5460:	ldr	x19, [sp, #208]
    5464:	add	x17, x6, #0xc9b
    5468:	str	w3, [sp, #480]
    546c:	add	x7, x25, x7, lsl #4
    5470:	add	x19, x19, #0xc, lsl #12
    5474:	str	x19, [sp, #504]
    5478:	ldr	x19, [sp, #176]
    547c:	add	x17, x25, x17, lsl #4
    5480:	ldr	w3, [x18, #8]
    5484:	add	x7, x7, #0xc, lsl #12
    5488:	add	x18, x19, #0xc, lsl #12
    548c:	str	x24, [sp, #536]
    5490:	ldr	x19, [sp, #224]
    5494:	str	w3, [sp, #484]
    5498:	ldr	x24, [sp, #240]
    549c:	add	x19, x19, #0xc, lsl #12
    54a0:	ldr	w3, [x17, #8]
    54a4:	add	x17, x5, #0xc9b
    54a8:	str	x19, [sp, #520]
    54ac:	add	x24, x24, #0xc, lsl #12
    54b0:	ldr	x19, [sp, #232]
    54b4:	add	x17, x25, x17, lsl #4
    54b8:	str	x24, [sp, #168]
    54bc:	add	x5, x25, x5, lsl #4
    54c0:	ldr	x24, [sp, #248]
    54c4:	str	x18, [sp, #512]
    54c8:	add	x18, x19, #0xc, lsl #12
    54cc:	str	x18, [sp, #528]
    54d0:	ldr	x19, [sp, #256]
    54d4:	add	x24, x24, #0xc, lsl #12
    54d8:	ldr	w18, [x17, #8]
    54dc:	add	x17, x4, #0xc9b
    54e0:	add	x19, x19, #0xc, lsl #12
    54e4:	stp	x24, x19, [sp, #176]
    54e8:	add	x17, x25, x17, lsl #4
    54ec:	str	x20, [sp, #192]
    54f0:	add	x5, x5, #0xc, lsl #12
    54f4:	ldr	x20, [sp, #264]
    54f8:	str	w3, [sp, #552]
    54fc:	ldr	x24, [sp, #272]
    5500:	add	x20, x20, #0xc, lsl #12
    5504:	ldr	w21, [x21, #8]
    5508:	add	x4, x25, x4, lsl #4
    550c:	add	x24, x24, #0xc, lsl #12
    5510:	ldr	w26, [x26, #8]
    5514:	ldr	w22, [x22, #8]
    5518:	add	x6, x25, x6, lsl #4
    551c:	ldr	w23, [x23, #8]
    5520:	add	x6, x6, #0xc, lsl #12
    5524:	str	x20, [sp, #200]
    5528:	add	x16, x25, x16, lsl #4
    552c:	str	x24, [sp, #208]
    5530:	add	x15, x25, x15, lsl #4
    5534:	ldr	w19, [x17, #8]
    5538:	add	x12, x25, x12, lsl #4
    553c:	ldp	x20, x24, [sp, #280]
    5540:	stp	x14, x13, [sp, #256]
    5544:	add	x14, x2, #0xc9b
    5548:	ldr	x3, [sp, #216]
    554c:	stp	x8, x7, [sp, #304]
    5550:	add	x7, x1, #0xc9b
    5554:	ldr	w8, [sp, #352]
    5558:	add	x17, x3, #0xc9b
    555c:	add	x20, x20, #0xc, lsl #12
    5560:	add	x14, x25, x14, lsl #4
    5564:	stp	x6, x5, [sp, #320]
    5568:	add	x5, x4, #0xc, lsl #12
    556c:	add	x4, x25, x7, lsl #4
    5570:	ldr	w7, [sp, #344]
    5574:	add	x24, x24, #0xc, lsl #12
    5578:	stp	x20, x24, [sp, #216]
    557c:	add	x17, x25, x17, lsl #4
    5580:	add	w7, w7, w8
    5584:	ldr	x20, [sp, #296]
    5588:	add	x3, x25, x3, lsl #4
    558c:	ldr	w8, [sp, #360]
    5590:	add	x2, x25, x2, lsl #4
    5594:	str	x9, [sp, #296]
    5598:	add	x3, x3, #0xc, lsl #12
    559c:	ldr	w9, [sp, #368]
    55a0:	add	x2, x2, #0xc, lsl #12
    55a4:	ldr	w6, [x14, #8]
    55a8:	add	x11, x25, x11, lsl #4
    55ac:	ldr	w14, [x4, #8]
    55b0:	add	x10, x25, x10, lsl #4
    55b4:	ldrh	w4, [x0, #66]
    55b8:	add	x16, x16, #0xc, lsl #12
    55bc:	stp	x5, x2, [sp, #336]
    55c0:	add	x5, x25, x1, lsl #4
    55c4:	add	x15, x15, #0xc, lsl #12
    55c8:	add	w1, w8, w9
    55cc:	add	x12, x12, #0xc, lsl #12
    55d0:	add	x11, x11, #0xc, lsl #12
    55d4:	add	x10, x10, #0xc, lsl #12
    55d8:	add	x20, x20, #0xc, lsl #12
    55dc:	str	x20, [sp, #232]
    55e0:	stp	x16, x15, [sp, #240]
    55e4:	add	w1, w7, w1
    55e8:	ldr	w13, [x17, #8]
    55ec:	stp	x12, x11, [sp, #272]
    55f0:	add	w23, w26, w23
    55f4:	ldrh	w2, [x0, #68]
    55f8:	str	x10, [sp, #288]
    55fc:	add	w22, w22, w21
    5600:	str	x3, [sp, #544]
    5604:	add	x3, x5, #0xc, lsl #12
    5608:	str	x3, [sp, #352]
    560c:	add	x3, x4, #0xc9b
    5610:	ldr	w7, [sp, #376]
    5614:	add	x4, x25, x4, lsl #4
    5618:	ldr	w10, [sp, #384]
    561c:	add	x3, x25, x3, lsl #4
    5620:	ldr	w11, [sp, #392]
    5624:	add	w19, w19, w13
    5628:	ldr	w16, [sp, #400]
    562c:	add	w5, w7, w10
    5630:	add	x10, x4, #0xc, lsl #12
    5634:	add	w1, w1, w5
    5638:	add	w4, w11, w16
    563c:	ldr	w11, [sp, #440]
    5640:	ldr	w16, [sp, #444]
    5644:	add	w1, w1, w4
    5648:	ldr	w12, [x3, #8]
    564c:	add	x3, x2, #0xc9b
    5650:	add	w5, w11, w16
    5654:	ldr	w11, [sp, #448]
    5658:	ldr	w16, [sp, #452]
    565c:	add	x2, x25, x2, lsl #4
    5660:	ldrh	w9, [x0, #70]
    5664:	add	w1, w1, w5
    5668:	add	w4, w11, w16
    566c:	ldr	w16, [sp, #456]
    5670:	add	x11, x2, #0xc, lsl #12
    5674:	ldr	w2, [sp, #460]
    5678:	stp	x10, x11, [sp, #360]
    567c:	add	w1, w1, w4
    5680:	ldr	w10, [sp, #468]
    5684:	add	w2, w16, w2
    5688:	ldr	w16, [sp, #464]
    568c:	ldrh	w8, [x0, #72]
    5690:	add	w1, w1, w2
    5694:	add	w11, w16, w10
    5698:	add	x10, x9, #0xc9b
    569c:	add	x9, x25, x9, lsl #4
    56a0:	ldrh	w7, [x0, #74]
    56a4:	add	x9, x9, #0xc, lsl #12
    56a8:	str	x9, [sp, #376]
    56ac:	add	x9, x8, #0xc9b
    56b0:	add	x8, x25, x8, lsl #4
    56b4:	ldr	w16, [sp, #472]
    56b8:	add	x8, x8, #0xc, lsl #12
    56bc:	ldrh	w5, [x0, #76]
    56c0:	add	w1, w1, w11
    56c4:	str	x8, [sp, #384]
    56c8:	add	x3, x25, x3, lsl #4
    56cc:	ldr	w8, [sp, #476]
    56d0:	add	x10, x25, x10, lsl #4
    56d4:	add	w30, w16, w30
    56d8:	add	x16, x25, x9, lsl #4
    56dc:	add	w27, w8, w27
    56e0:	add	w30, w1, w30
    56e4:	add	x8, x7, #0xc9b
    56e8:	add	x7, x25, x7, lsl #4
    56ec:	add	w30, w30, w27
    56f0:	add	x27, x7, #0xc, lsl #12
    56f4:	add	x7, x5, #0xc9b
    56f8:	add	x5, x25, x5, lsl #4
    56fc:	ldrh	w2, [x0, #80]
    5700:	add	x20, x25, x8, lsl #4
    5704:	ldrh	w9, [x0, #84]
    5708:	add	w30, w30, w23
    570c:	ldr	w17, [x16, #8]
    5710:	add	w30, w30, w22
    5714:	ldrh	w16, [x0, #86]
    5718:	add	w6, w6, w14
    571c:	ldrh	w8, [x0, #88]
    5720:	add	x1, x25, x7, lsl #4
    5724:	ldr	w4, [x3, #8]
    5728:	ldr	w15, [x10, #8]
    572c:	ldrh	w3, [x0, #78]
    5730:	add	w4, w12, w4
    5734:	ldrh	w10, [x0, #82]
    5738:	add	w15, w15, w17
    573c:	str	x27, [sp, #392]
    5740:	add	x27, x5, #0xc, lsl #12
    5744:	ldr	w26, [sp, #484]
    5748:	ldr	w5, [sp, #480]
    574c:	ldrh	w24, [x0, #94]
    5750:	add	w22, w5, w26
    5754:	ldr	w5, [sp, #552]
    5758:	add	w30, w30, w22
    575c:	add	x26, x10, #0xc9b
    5760:	add	w18, w5, w18
    5764:	add	x5, x3, #0xc9b
    5768:	add	w30, w30, w18
    576c:	add	x26, x25, x26, lsl #4
    5770:	add	w30, w30, w19
    5774:	ldr	w1, [x1, #8]
    5778:	add	w30, w30, w6
    577c:	ldr	w20, [x20, #8]
    5780:	add	w30, w30, w4
    5784:	add	x4, x16, #0xc9b
    5788:	ldr	w22, [x26, #8]
    578c:	add	x21, x25, x5, lsl #4
    5790:	add	x26, x9, #0xc9b
    5794:	add	x4, x25, x4, lsl #4
    5798:	ldrh	w11, [x0, #90]
    579c:	add	w20, w20, w1
    57a0:	ldrh	w5, [x0, #96]
    57a4:	add	x1, x24, #0xc9b
    57a8:	add	x26, x25, x26, lsl #4
    57ac:	ldr	w18, [x4, #8]
    57b0:	ldr	w23, [x21, #8]
    57b4:	add	x14, x25, x1, lsl #4
    57b8:	add	x4, x11, #0xc9b
    57bc:	add	x1, x5, #0xc9b
    57c0:	add	x21, x2, #0xc9b
    57c4:	ldrh	w7, [x0, #92]
    57c8:	ldr	w13, [x26, #8]
    57cc:	add	x1, x25, x1, lsl #4
    57d0:	add	x26, x8, #0xc9b
    57d4:	add	x4, x25, x4, lsl #4
    57d8:	add	x21, x25, x21, lsl #4
    57dc:	str	x27, [sp, #400]
    57e0:	add	x26, x25, x26, lsl #4
    57e4:	add	x27, x7, #0xc9b
    57e8:	ldr	w12, [x1, #8]
    57ec:	add	w30, w30, w15
    57f0:	ldr	w6, [x4, #8]
    57f4:	add	x27, x25, x27, lsl #4
    57f8:	ldr	w21, [x21, #8]
    57fc:	add	w30, w30, w20
    5800:	ldr	x4, [sp, #128]
    5804:	add	w23, w23, w21
    5808:	ldr	x1, [sp, #432]
    580c:	add	w22, w22, w13
    5810:	ldr	w26, [x26, #8]
    5814:	add	w30, w30, w23
    5818:	ldr	w19, [x27, #8]
    581c:	add	w30, w30, w22
    5820:	ldrh	w27, [x4, x1]
    5824:	add	w18, w18, w26
    5828:	ldrh	w0, [x0, #98]
    582c:	add	w30, w30, w18
    5830:	ldp	x17, x18, [sp, #488]
    5834:	add	x1, x27, #0xc9b
    5838:	add	x4, x0, #0xc9b
    583c:	ldr	w14, [x14, #8]
    5840:	add	x1, x25, x1, lsl #4
    5844:	add	w6, w6, w19
    5848:	add	x4, x25, x4, lsl #4
    584c:	add	w14, w14, w12
    5850:	add	w30, w30, w6
    5854:	add	x3, x25, x3, lsl #4
    5858:	ldr	w12, [x18, #2492]
    585c:	add	w30, w30, w14
    5860:	ldr	w6, [x17, #2492]
    5864:	add	x2, x25, x2, lsl #4
    5868:	ldr	w4, [x4, #8]
    586c:	add	x3, x3, #0xc, lsl #12
    5870:	ldr	w1, [x1, #8]
    5874:	add	x2, x2, #0xc, lsl #12
    5878:	ldr	x19, [sp, #504]
    587c:	add	w1, w1, w4
    5880:	add	w4, w6, w12
    5884:	add	x12, sp, #0x200
    5888:	add	w30, w30, w1
    588c:	add	x10, x25, x10, lsl #4
    5890:	ldr	w13, [x19, #2492]
    5894:	add	x9, x25, x9, lsl #4
    5898:	ldp	x20, x21, [x12]
    589c:	add	x10, x10, #0xc, lsl #12
    58a0:	ldp	x23, x26, [x12, #16]
    58a4:	add	x9, x9, #0xc, lsl #12
    58a8:	ldr	x15, [sp, #184]
    58ac:	add	x8, x25, x8, lsl #4
    58b0:	ldr	w1, [x20, #2492]
    58b4:	add	x16, x25, x16, lsl #4
    58b8:	ldr	w6, [x21, #2492]
    58bc:	add	x8, x8, #0xc, lsl #12
    58c0:	add	w1, w13, w1
    58c4:	ldr	w12, [x23, #2492]
    58c8:	add	w1, w4, w1
    58cc:	ldr	w13, [x26, #2492]
    58d0:	ldr	x4, [sp, #168]
    58d4:	add	x16, x16, #0xc, lsl #12
    58d8:	ldr	x22, [sp, #208]
    58dc:	add	x11, x25, x11, lsl #4
    58e0:	ldr	w14, [x4, #2492]
    58e4:	add	w4, w6, w12
    58e8:	add	w1, w1, w4
    58ec:	add	x7, x25, x7, lsl #4
    58f0:	add	w4, w13, w14
    58f4:	add	x11, x11, #0xc, lsl #12
    58f8:	add	w4, w1, w4
    58fc:	add	x7, x7, #0xc, lsl #12
    5900:	ldr	x12, [sp, #176]
    5904:	add	x24, x25, x24, lsl #4
    5908:	ldp	x13, x1, [sp, #192]
    590c:	add	x5, x25, x5, lsl #4
    5910:	ldr	w6, [x12, #2492]
    5914:	add	x27, x25, x27, lsl #4
    5918:	ldr	w12, [x15, #2492]
    591c:	add	x0, x25, x0, lsl #4
    5920:	add	x0, x0, #0xc, lsl #12
    5924:	add	x24, x24, #0xc, lsl #12
    5928:	add	x5, x5, #0xc, lsl #12
    592c:	add	x27, x27, #0xc, lsl #12
    5930:	ldr	w14, [x1, #2492]
    5934:	add	w1, w6, w12
    5938:	add	w4, w4, w1
    593c:	ldr	w13, [x13, #2492]
    5940:	ldr	x1, [sp, #216]
    5944:	ldr	w6, [x22, #2492]
    5948:	ldr	w12, [x1, #2492]
    594c:	add	w1, w13, w14
    5950:	add	w1, w4, w1
    5954:	ldp	x14, x4, [sp, #224]
    5958:	ldr	w13, [x14, #2492]
    595c:	ldr	w14, [x4, #2492]
    5960:	add	w4, w6, w12
    5964:	add	w1, w1, w4
    5968:	ldp	x12, x4, [sp, #240]
    596c:	ldr	w6, [x12, #2492]
    5970:	ldr	w12, [x4, #2492]
    5974:	add	w4, w13, w14
    5978:	ldr	x14, [sp, #256]
    597c:	add	w4, w1, w4
    5980:	ldr	w13, [x14, #2492]
    5984:	ldr	x1, [sp, #264]
    5988:	ldp	x22, x15, [sp, #280]
    598c:	ldr	w14, [x1, #2492]
    5990:	add	w1, w6, w12
    5994:	add	w4, w4, w1
    5998:	add	w1, w13, w14
    599c:	ldr	x12, [sp, #272]
    59a0:	add	w1, w4, w1
    59a4:	ldr	x4, [sp, #296]
    59a8:	ldr	w6, [x12, #2492]
    59ac:	ldr	w12, [x22, #2492]
    59b0:	ldr	w13, [x15, #2492]
    59b4:	ldr	w14, [x4, #2492]
    59b8:	add	w4, w6, w12
    59bc:	ldp	x6, x12, [sp, #304]
    59c0:	add	w1, w1, w4
    59c4:	add	w4, w13, w14
    59c8:	ldr	w13, [x19, #2496]
    59cc:	add	w4, w1, w4
    59d0:	ldp	x22, x1, [sp, #320]
    59d4:	ldr	w6, [x6, #2492]
    59d8:	ldr	w12, [x12, #2492]
    59dc:	ldr	w15, [x1, #2492]
    59e0:	add	w1, w6, w12
    59e4:	ldr	x6, [sp, #336]
    59e8:	add	w4, w4, w1
    59ec:	ldr	w14, [x22, #2492]
    59f0:	ldr	w12, [x20, #2496]
    59f4:	ldr	w22, [x6, #2492]
    59f8:	add	w1, w14, w15
    59fc:	ldr	w6, [x18, #2496]
    5a00:	add	w12, w13, w12
    5a04:	ldr	w14, [x17, #2496]
    5a08:	add	w4, w4, w1
    5a0c:	ldr	w17, [x23, #2496]
    5a10:	and	w1, w30, #0xffff
    5a14:	add	w6, w14, w6
    5a18:	ldr	w15, [x21, #2496]
    5a1c:	add	w12, w12, w6
    5a20:	ldr	w18, [x26, #2496]
    5a24:	ldr	x6, [sp, #168]
    5a28:	add	w15, w15, w17
    5a2c:	add	w12, w12, w15
    5a30:	ldr	x15, [sp, #184]
    5a34:	ldr	w19, [x6, #2496]
    5a38:	ldr	x6, [sp, #176]
    5a3c:	add	w18, w18, w19
    5a40:	add	w12, w12, w18
    5a44:	ldr	w20, [x6, #2496]
    5a48:	ldr	w21, [x15, #2496]
    5a4c:	ldp	x17, x18, [sp, #344]
    5a50:	add	w20, w20, w21
    5a54:	ldp	x19, x21, [sp, #360]
    5a58:	add	w12, w12, w20
    5a5c:	ldr	x23, [sp, #376]
    5a60:	ldr	x26, [sp, #544]
    5a64:	ldr	w13, [x17, #2492]
    5a68:	ldr	w15, [x19, #2492]
    5a6c:	ldr	w17, [x21, #2492]
    5a70:	ldp	x19, x21, [sp, #384]
    5a74:	ldr	w14, [x18, #2492]
    5a78:	ldr	w6, [x26, #2492]
    5a7c:	ldr	w18, [x23, #2492]
    5a80:	ldr	x23, [sp, #400]
    5a84:	add	w6, w22, w6
    5a88:	add	w4, w4, w6
    5a8c:	add	w6, w13, w14
    5a90:	ldr	w13, [x19, #2492]
    5a94:	add	w6, w4, w6
    5a98:	ldr	w14, [x21, #2492]
    5a9c:	add	w4, w15, w17
    5aa0:	ldr	w15, [x23, #2492]
    5aa4:	add	w6, w6, w4
    5aa8:	ldr	w17, [x3, #2492]
    5aac:	add	w4, w18, w13
    5ab0:	ldr	w13, [x2, #2492]
    5ab4:	add	w4, w6, w4
    5ab8:	ldr	w18, [x10, #2492]
    5abc:	add	w6, w14, w15
    5ac0:	ldr	w14, [x9, #2492]
    5ac4:	add	w4, w4, w6
    5ac8:	ldr	w15, [x16, #2492]
    5acc:	add	w6, w17, w13
    5ad0:	ldr	w13, [x8, #2492]
    5ad4:	add	w6, w4, w6
    5ad8:	add	w4, w18, w14
    5adc:	ldr	w17, [x11, #2492]
    5ae0:	add	w6, w6, w4
    5ae4:	add	w4, w15, w13
    5ae8:	ldr	x13, [sp, #192]
    5aec:	add	w4, w6, w4
    5af0:	ldr	w14, [x7, #2492]
    5af4:	ldr	w19, [x0, #2492]
    5af8:	ldr	w15, [x5, #2492]
    5afc:	add	w6, w17, w14
    5b00:	ldr	w18, [x24, #2492]
    5b04:	add	w4, w4, w6
    5b08:	ldr	w17, [x27, #2492]
    5b0c:	ldr	w13, [x13, #2496]
    5b10:	add	w6, w18, w15
    5b14:	ldp	x20, x22, [sp, #200]
    5b18:	add	w4, w4, w6
    5b1c:	add	w6, w17, w19
    5b20:	ldr	x15, [sp, #224]
    5b24:	add	w4, w4, w6
    5b28:	ldr	w18, [x20, #2496]
    5b2c:	ldr	x20, [sp, #216]
    5b30:	add	w13, w13, w18
    5b34:	add	w12, w12, w13
    5b38:	ldr	w14, [x22, #2496]
    5b3c:	ldr	x13, [sp, #240]
    5b40:	ldr	w17, [x20, #2496]
    5b44:	ldr	x20, [sp, #232]
    5b48:	add	w14, w14, w17
    5b4c:	ldr	w19, [x13, #2496]
    5b50:	add	w12, w12, w14
    5b54:	ldp	x13, x14, [sp, #248]
    5b58:	ldr	w22, [x15, #2496]
    5b5c:	ldr	w15, [x20, #2496]
    5b60:	add	w22, w22, w15
    5b64:	ldr	w20, [x13, #2496]
    5b68:	add	w12, w12, w22
    5b6c:	ldr	x13, [sp, #264]
    5b70:	add	w19, w19, w20
    5b74:	ldp	x22, x15, [sp, #280]
    5b78:	add	w12, w12, w19
    5b7c:	ldr	w18, [x13, #2496]
    5b80:	ldr	x13, [sp, #272]
    5b84:	ldr	w21, [x14, #2496]
    5b88:	ldr	w17, [x15, #2496]
    5b8c:	ldr	w23, [x13, #2496]
    5b90:	add	w21, w21, w18
    5b94:	ldr	w13, [x22, #2496]
    5b98:	add	w12, w12, w21
    5b9c:	ldr	x14, [sp, #296]
    5ba0:	add	w23, w23, w13
    5ba4:	ldr	x13, [sp, #304]
    5ba8:	add	w12, w12, w23
    5bac:	ldr	x22, [sp, #320]
    5bb0:	ldr	w15, [x13, #2496]
    5bb4:	ldr	x13, [sp, #312]
    5bb8:	ldr	w14, [x14, #2496]
    5bbc:	ldr	w20, [x13, #2496]
    5bc0:	add	w17, w17, w14
    5bc4:	ldr	w22, [x22, #2496]
    5bc8:	add	w12, w12, w17
    5bcc:	ldr	x13, [sp, #328]
    5bd0:	add	w15, w15, w20
    5bd4:	ldr	x17, [sp, #344]
    5bd8:	add	w12, w12, w15
    5bdc:	ldr	w18, [x13, #2496]
    5be0:	ldr	x13, [sp, #336]
    5be4:	add	w22, w22, w18
    5be8:	ldr	x18, [sp, #352]
    5bec:	add	w12, w12, w22
    5bf0:	ldr	w19, [x13, #2496]
    5bf4:	ldr	w13, [x26, #2496]
    5bf8:	ldr	w14, [x18, #2496]
    5bfc:	add	w19, w19, w13
    5c00:	ldr	w21, [x17, #2496]
    5c04:	ldr	x13, [sp, #360]
    5c08:	add	w21, w21, w14
    5c0c:	add	w12, w12, w19
    5c10:	ldr	w2, [x2, #2496]
    5c14:	add	w12, w12, w21
    5c18:	ldr	w3, [x3, #2496]
    5c1c:	ldr	w23, [x13, #2496]
    5c20:	ldr	x13, [sp, #368]
    5c24:	add	w3, w3, w2
    5c28:	ldp	x19, x21, [sp, #384]
    5c2c:	ldr	w17, [x13, #2496]
    5c30:	ldr	x13, [sp, #376]
    5c34:	add	w23, w23, w17
    5c38:	add	w12, w12, w23
    5c3c:	ldr	w9, [x9, #2496]
    5c40:	ldr	x23, [sp, #400]
    5c44:	ldr	w20, [x13, #2496]
    5c48:	ldr	w15, [x19, #2496]
    5c4c:	ldr	w18, [x21, #2496]
    5c50:	ldr	w13, [x23, #2496]
    5c54:	add	w20, w20, w15
    5c58:	ldr	w10, [x10, #2496]
    5c5c:	add	w12, w12, w20
    5c60:	add	w18, w18, w13
    5c64:	ldr	w8, [x8, #2496]
    5c68:	ldr	w14, [x16, #2496]
    5c6c:	add	w12, w12, w18
    5c70:	ldr	w2, [x7, #2496]
    5c74:	add	w12, w12, w3
    5c78:	ldr	w11, [x11, #2496]
    5c7c:	add	w10, w10, w9
    5c80:	ldr	w5, [x5, #2496]
    5c84:	add	w14, w14, w8
    5c88:	add	w12, w12, w10
    5c8c:	ldr	w8, [x24, #2496]
    5c90:	add	w11, w11, w2
    5c94:	ldr	w3, [x0, #2496]
    5c98:	add	w12, w12, w14
    5c9c:	ldr	w2, [x27, #2496]
    5ca0:	add	w8, w8, w5
    5ca4:	add	w0, w12, w11
    5ca8:	add	w0, w0, w8
    5cac:	add	w2, w2, w3
    5cb0:	add	w0, w0, w2
    5cb4:	str	w30, [sp, #672]
    5cb8:	str	w4, [sp, #676]
    5cbc:	str	w0, [sp, #680]
    5cc0:	ldr	x0, [sp, #160]
    5cc4:	mov	w2, #0x0                   	// #0
    5cc8:	add	x4, x0, #0x2
    5ccc:	mov	w0, #0x0                   	// #0
    5cd0:	b	5ce8 <BZ2_compressBlock@@Base+0x1a38>
    5cd4:	ldrh	w3, [x4], #2
    5cd8:	cmp	w3, w1
    5cdc:	csel	w5, w1, w3, ge  // ge = tcont
    5ce0:	csel	w0, w0, w2, ge  // ge = tcont
    5ce4:	mov	w1, w5
    5ce8:	ldr	w3, [sp, #140]
    5cec:	add	w2, w2, #0x1
    5cf0:	cmp	w3, w2
    5cf4:	b.ne	5cd4 <BZ2_compressBlock@@Base+0x1a24>  // b.any
    5cf8:	ldr	x3, [sp, #152]
    5cfc:	sxtw	x2, w0
    5d00:	ldr	x4, [sp, #568]
    5d04:	mov	w19, w3
    5d08:	strb	w0, [x4, x3]
    5d0c:	ldr	w4, [sp, #412]
    5d10:	ldr	x3, [sp, #416]
    5d14:	add	w1, w4, w1
    5d18:	str	w1, [sp, #412]
    5d1c:	ldr	w1, [sp, #140]
    5d20:	cmp	w1, #0x6
    5d24:	ldr	w1, [x3, x2, lsl #2]
    5d28:	add	w1, w1, #0x1
    5d2c:	str	w1, [x3, x2, lsl #2]
    5d30:	b.ne	6390 <BZ2_compressBlock@@Base+0x20e0>  // b.any
    5d34:	ldr	w1, [sp, #120]
    5d38:	sub	w1, w1, w28
    5d3c:	cmp	w1, #0x31
    5d40:	b.ne	6390 <BZ2_compressBlock@@Base+0x20e0>  // b.any
    5d44:	ldr	x3, [sp, #128]
    5d48:	sbfiz	x2, x28, #1, #32
    5d4c:	mov	w1, #0x102                 	// #258
    5d50:	smull	x0, w0, w1
    5d54:	add	x1, x3, x2
    5d58:	ldrh	w3, [x3, x2]
    5d5c:	add	x3, x3, x0
    5d60:	ldrh	w2, [x1, #2]
    5d64:	ldrh	w4, [x1, #4]
    5d68:	add	x3, x25, x3, lsl #2
    5d6c:	add	x2, x2, x0
    5d70:	add	x3, x3, #0x8, lsl #12
    5d74:	add	x4, x4, x0
    5d78:	add	x2, x25, x2, lsl #2
    5d7c:	add	x2, x2, #0x8, lsl #12
    5d80:	add	x4, x25, x4, lsl #2
    5d84:	ldr	w5, [x3, #12680]
    5d88:	add	x4, x4, #0x8, lsl #12
    5d8c:	add	w5, w5, #0x1
    5d90:	str	w5, [x3, #12680]
    5d94:	ldrh	w3, [x1, #6]
    5d98:	ldr	w5, [x2, #12680]
    5d9c:	add	x3, x3, x0
    5da0:	add	w5, w5, #0x1
    5da4:	str	w5, [x2, #12680]
    5da8:	add	x3, x25, x3, lsl #2
    5dac:	ldrh	w2, [x1, #8]
    5db0:	ldr	w5, [x4, #12680]
    5db4:	add	x3, x3, #0x8, lsl #12
    5db8:	add	x2, x2, x0
    5dbc:	add	w5, w5, #0x1
    5dc0:	str	w5, [x4, #12680]
    5dc4:	add	x2, x25, x2, lsl #2
    5dc8:	ldrh	w4, [x1, #10]
    5dcc:	ldr	w5, [x3, #12680]
    5dd0:	add	x2, x2, #0x8, lsl #12
    5dd4:	add	x4, x4, x0
    5dd8:	add	w5, w5, #0x1
    5ddc:	str	w5, [x3, #12680]
    5de0:	add	x4, x25, x4, lsl #2
    5de4:	ldrh	w3, [x1, #12]
    5de8:	ldr	w5, [x2, #12680]
    5dec:	add	x4, x4, #0x8, lsl #12
    5df0:	add	x3, x3, x0
    5df4:	add	w5, w5, #0x1
    5df8:	str	w5, [x2, #12680]
    5dfc:	add	x3, x25, x3, lsl #2
    5e00:	ldrh	w2, [x1, #14]
    5e04:	ldr	w5, [x4, #12680]
    5e08:	add	x3, x3, #0x8, lsl #12
    5e0c:	add	x2, x2, x0
    5e10:	add	w5, w5, #0x1
    5e14:	str	w5, [x4, #12680]
    5e18:	add	x2, x25, x2, lsl #2
    5e1c:	ldrh	w4, [x1, #16]
    5e20:	ldr	w5, [x3, #12680]
    5e24:	add	x2, x2, #0x8, lsl #12
    5e28:	add	x4, x4, x0
    5e2c:	add	w5, w5, #0x1
    5e30:	str	w5, [x3, #12680]
    5e34:	add	x4, x25, x4, lsl #2
    5e38:	ldrh	w3, [x1, #18]
    5e3c:	ldr	w5, [x2, #12680]
    5e40:	add	x4, x4, #0x8, lsl #12
    5e44:	add	x3, x3, x0
    5e48:	add	w5, w5, #0x1
    5e4c:	str	w5, [x2, #12680]
    5e50:	add	x3, x25, x3, lsl #2
    5e54:	ldrh	w2, [x1, #20]
    5e58:	ldr	w5, [x4, #12680]
    5e5c:	add	x3, x3, #0x8, lsl #12
    5e60:	add	x2, x2, x0
    5e64:	add	w5, w5, #0x1
    5e68:	str	w5, [x4, #12680]
    5e6c:	add	x2, x25, x2, lsl #2
    5e70:	ldr	w4, [x3, #12680]
    5e74:	add	x2, x2, #0x8, lsl #12
    5e78:	add	w4, w4, #0x1
    5e7c:	str	w4, [x3, #12680]
    5e80:	ldr	w3, [x2, #12680]
    5e84:	ldrh	w4, [x1, #26]
    5e88:	add	w3, w3, #0x1
    5e8c:	str	w3, [x2, #12680]
    5e90:	ldrh	w3, [x1, #22]
    5e94:	add	x4, x4, x0
    5e98:	ldrh	w2, [x1, #24]
    5e9c:	add	x3, x3, x0
    5ea0:	add	x4, x25, x4, lsl #2
    5ea4:	add	x2, x2, x0
    5ea8:	add	x4, x4, #0x8, lsl #12
    5eac:	add	x3, x25, x3, lsl #2
    5eb0:	add	x3, x3, #0x8, lsl #12
    5eb4:	add	x2, x25, x2, lsl #2
    5eb8:	add	x2, x2, #0x8, lsl #12
    5ebc:	ldr	w5, [x3, #12680]
    5ec0:	add	w5, w5, #0x1
    5ec4:	str	w5, [x3, #12680]
    5ec8:	ldrh	w3, [x1, #28]
    5ecc:	ldr	w5, [x2, #12680]
    5ed0:	add	x3, x3, x0
    5ed4:	add	w5, w5, #0x1
    5ed8:	str	w5, [x2, #12680]
    5edc:	add	x3, x25, x3, lsl #2
    5ee0:	ldrh	w2, [x1, #30]
    5ee4:	ldr	w5, [x4, #12680]
    5ee8:	add	x3, x3, #0x8, lsl #12
    5eec:	add	x2, x2, x0
    5ef0:	add	w5, w5, #0x1
    5ef4:	str	w5, [x4, #12680]
    5ef8:	add	x2, x25, x2, lsl #2
    5efc:	ldrh	w4, [x1, #32]
    5f00:	ldr	w5, [x3, #12680]
    5f04:	add	x2, x2, #0x8, lsl #12
    5f08:	add	x4, x4, x0
    5f0c:	add	w5, w5, #0x1
    5f10:	str	w5, [x3, #12680]
    5f14:	add	x4, x25, x4, lsl #2
    5f18:	ldrh	w3, [x1, #34]
    5f1c:	ldr	w5, [x2, #12680]
    5f20:	add	x4, x4, #0x8, lsl #12
    5f24:	add	x3, x3, x0
    5f28:	add	w5, w5, #0x1
    5f2c:	str	w5, [x2, #12680]
    5f30:	add	x3, x25, x3, lsl #2
    5f34:	ldrh	w2, [x1, #36]
    5f38:	ldr	w5, [x4, #12680]
    5f3c:	add	x3, x3, #0x8, lsl #12
    5f40:	add	x2, x2, x0
    5f44:	add	w5, w5, #0x1
    5f48:	str	w5, [x4, #12680]
    5f4c:	add	x2, x25, x2, lsl #2
    5f50:	ldrh	w4, [x1, #38]
    5f54:	ldr	w5, [x3, #12680]
    5f58:	add	x2, x2, #0x8, lsl #12
    5f5c:	add	x4, x4, x0
    5f60:	add	w5, w5, #0x1
    5f64:	str	w5, [x3, #12680]
    5f68:	add	x4, x25, x4, lsl #2
    5f6c:	ldrh	w3, [x1, #40]
    5f70:	ldr	w5, [x2, #12680]
    5f74:	add	x4, x4, #0x8, lsl #12
    5f78:	add	x3, x3, x0
    5f7c:	add	w5, w5, #0x1
    5f80:	str	w5, [x2, #12680]
    5f84:	ldrh	w2, [x1, #42]
    5f88:	add	x3, x25, x3, lsl #2
    5f8c:	ldr	w5, [x4, #12680]
    5f90:	add	x3, x3, #0x8, lsl #12
    5f94:	add	x2, x2, x0
    5f98:	add	w5, w5, #0x1
    5f9c:	str	w5, [x4, #12680]
    5fa0:	add	x2, x25, x2, lsl #2
    5fa4:	add	x2, x2, #0x8, lsl #12
    5fa8:	ldr	w4, [x3, #12680]
    5fac:	add	w4, w4, #0x1
    5fb0:	str	w4, [x3, #12680]
    5fb4:	ldr	w3, [x2, #12680]
    5fb8:	ldrh	w4, [x1, #48]
    5fbc:	add	w3, w3, #0x1
    5fc0:	str	w3, [x2, #12680]
    5fc4:	ldrh	w3, [x1, #44]
    5fc8:	add	x4, x4, x0
    5fcc:	ldrh	w2, [x1, #46]
    5fd0:	add	x3, x3, x0
    5fd4:	add	x4, x25, x4, lsl #2
    5fd8:	add	x2, x2, x0
    5fdc:	add	x4, x4, #0x8, lsl #12
    5fe0:	add	x3, x25, x3, lsl #2
    5fe4:	add	x3, x3, #0x8, lsl #12
    5fe8:	add	x2, x25, x2, lsl #2
    5fec:	add	x2, x2, #0x8, lsl #12
    5ff0:	ldr	w5, [x3, #12680]
    5ff4:	add	w5, w5, #0x1
    5ff8:	str	w5, [x3, #12680]
    5ffc:	ldrh	w3, [x1, #50]
    6000:	ldr	w5, [x2, #12680]
    6004:	add	x3, x3, x0
    6008:	add	w5, w5, #0x1
    600c:	str	w5, [x2, #12680]
    6010:	add	x3, x25, x3, lsl #2
    6014:	ldrh	w2, [x1, #52]
    6018:	ldr	w5, [x4, #12680]
    601c:	add	x3, x3, #0x8, lsl #12
    6020:	add	x2, x2, x0
    6024:	add	w5, w5, #0x1
    6028:	str	w5, [x4, #12680]
    602c:	add	x2, x25, x2, lsl #2
    6030:	ldrh	w4, [x1, #54]
    6034:	ldr	w5, [x3, #12680]
    6038:	add	x2, x2, #0x8, lsl #12
    603c:	add	x4, x4, x0
    6040:	add	w5, w5, #0x1
    6044:	str	w5, [x3, #12680]
    6048:	add	x4, x25, x4, lsl #2
    604c:	ldrh	w3, [x1, #56]
    6050:	ldr	w5, [x2, #12680]
    6054:	add	x4, x4, #0x8, lsl #12
    6058:	add	x3, x3, x0
    605c:	add	w5, w5, #0x1
    6060:	str	w5, [x2, #12680]
    6064:	add	x3, x25, x3, lsl #2
    6068:	ldrh	w2, [x1, #58]
    606c:	ldr	w5, [x4, #12680]
    6070:	add	x3, x3, #0x8, lsl #12
    6074:	add	x2, x2, x0
    6078:	add	w5, w5, #0x1
    607c:	str	w5, [x4, #12680]
    6080:	add	x2, x25, x2, lsl #2
    6084:	ldrh	w4, [x1, #60]
    6088:	ldr	w5, [x3, #12680]
    608c:	add	x2, x2, #0x8, lsl #12
    6090:	add	x4, x4, x0
    6094:	add	w5, w5, #0x1
    6098:	str	w5, [x3, #12680]
    609c:	add	x4, x25, x4, lsl #2
    60a0:	ldrh	w3, [x1, #62]
    60a4:	ldr	w5, [x2, #12680]
    60a8:	add	x4, x4, #0x8, lsl #12
    60ac:	add	x3, x3, x0
    60b0:	add	w5, w5, #0x1
    60b4:	str	w5, [x2, #12680]
    60b8:	ldrh	w2, [x1, #64]
    60bc:	add	x3, x25, x3, lsl #2
    60c0:	ldr	w5, [x4, #12680]
    60c4:	add	x3, x3, #0x8, lsl #12
    60c8:	add	x2, x2, x0
    60cc:	add	w5, w5, #0x1
    60d0:	str	w5, [x4, #12680]
    60d4:	add	x2, x25, x2, lsl #2
    60d8:	add	x2, x2, #0x8, lsl #12
    60dc:	ldr	w4, [x3, #12680]
    60e0:	add	w4, w4, #0x1
    60e4:	str	w4, [x3, #12680]
    60e8:	ldr	w3, [x2, #12680]
    60ec:	ldrh	w4, [x1, #70]
    60f0:	add	w3, w3, #0x1
    60f4:	str	w3, [x2, #12680]
    60f8:	ldrh	w3, [x1, #66]
    60fc:	add	x4, x4, x0
    6100:	ldrh	w2, [x1, #68]
    6104:	add	x3, x3, x0
    6108:	add	x4, x25, x4, lsl #2
    610c:	add	x2, x2, x0
    6110:	add	x4, x4, #0x8, lsl #12
    6114:	add	x3, x25, x3, lsl #2
    6118:	add	x3, x3, #0x8, lsl #12
    611c:	add	x2, x25, x2, lsl #2
    6120:	add	x2, x2, #0x8, lsl #12
    6124:	ldr	w5, [x3, #12680]
    6128:	add	w5, w5, #0x1
    612c:	str	w5, [x3, #12680]
    6130:	ldrh	w3, [x1, #72]
    6134:	ldr	w5, [x2, #12680]
    6138:	add	x3, x3, x0
    613c:	add	w5, w5, #0x1
    6140:	str	w5, [x2, #12680]
    6144:	add	x3, x25, x3, lsl #2
    6148:	ldrh	w2, [x1, #74]
    614c:	ldr	w5, [x4, #12680]
    6150:	add	x3, x3, #0x8, lsl #12
    6154:	add	x2, x2, x0
    6158:	add	w5, w5, #0x1
    615c:	str	w5, [x4, #12680]
    6160:	add	x2, x25, x2, lsl #2
    6164:	ldrh	w4, [x1, #76]
    6168:	ldr	w5, [x3, #12680]
    616c:	add	x2, x2, #0x8, lsl #12
    6170:	add	x4, x4, x0
    6174:	add	w5, w5, #0x1
    6178:	str	w5, [x3, #12680]
    617c:	add	x4, x25, x4, lsl #2
    6180:	ldrh	w3, [x1, #78]
    6184:	ldr	w5, [x2, #12680]
    6188:	add	x4, x4, #0x8, lsl #12
    618c:	add	x3, x3, x0
    6190:	add	w5, w5, #0x1
    6194:	str	w5, [x2, #12680]
    6198:	add	x3, x25, x3, lsl #2
    619c:	ldrh	w2, [x1, #80]
    61a0:	ldr	w5, [x4, #12680]
    61a4:	add	x3, x3, #0x8, lsl #12
    61a8:	add	x2, x2, x0
    61ac:	add	w5, w5, #0x1
    61b0:	str	w5, [x4, #12680]
    61b4:	add	x2, x25, x2, lsl #2
    61b8:	ldrh	w4, [x1, #82]
    61bc:	ldr	w5, [x3, #12680]
    61c0:	add	x2, x2, #0x8, lsl #12
    61c4:	add	x4, x4, x0
    61c8:	add	w5, w5, #0x1
    61cc:	str	w5, [x3, #12680]
    61d0:	add	x4, x25, x4, lsl #2
    61d4:	ldrh	w3, [x1, #84]
    61d8:	ldr	w5, [x2, #12680]
    61dc:	add	x4, x4, #0x8, lsl #12
    61e0:	add	x3, x3, x0
    61e4:	add	w5, w5, #0x1
    61e8:	str	w5, [x2, #12680]
    61ec:	ldrh	w2, [x1, #86]
    61f0:	add	x3, x25, x3, lsl #2
    61f4:	ldr	w5, [x4, #12680]
    61f8:	add	x3, x3, #0x8, lsl #12
    61fc:	add	x2, x2, x0
    6200:	add	w5, w5, #0x1
    6204:	str	w5, [x4, #12680]
    6208:	add	x2, x25, x2, lsl #2
    620c:	add	x2, x2, #0x8, lsl #12
    6210:	ldr	w4, [x3, #12680]
    6214:	add	w4, w4, #0x1
    6218:	str	w4, [x3, #12680]
    621c:	ldr	w3, [x2, #12680]
    6220:	ldrh	w4, [x1, #92]
    6224:	add	w3, w3, #0x1
    6228:	str	w3, [x2, #12680]
    622c:	ldrh	w3, [x1, #88]
    6230:	add	x4, x4, x0
    6234:	ldrh	w2, [x1, #90]
    6238:	add	x3, x3, x0
    623c:	add	x4, x25, x4, lsl #2
    6240:	add	x2, x2, x0
    6244:	add	x4, x4, #0x8, lsl #12
    6248:	add	x3, x25, x3, lsl #2
    624c:	add	x3, x3, #0x8, lsl #12
    6250:	add	x2, x25, x2, lsl #2
    6254:	add	x2, x2, #0x8, lsl #12
    6258:	ldr	w5, [x3, #12680]
    625c:	add	w5, w5, #0x1
    6260:	str	w5, [x3, #12680]
    6264:	ldrh	w3, [x1, #94]
    6268:	ldr	w5, [x2, #12680]
    626c:	add	x3, x3, x0
    6270:	add	w5, w5, #0x1
    6274:	str	w5, [x2, #12680]
    6278:	add	x3, x25, x3, lsl #2
    627c:	ldrh	w2, [x1, #96]
    6280:	ldr	w5, [x4, #12680]
    6284:	add	x3, x3, #0x8, lsl #12
    6288:	ldrh	w1, [x1, #98]
    628c:	add	x2, x2, x0
    6290:	add	w5, w5, #0x1
    6294:	str	w5, [x4, #12680]
    6298:	add	x2, x25, x2, lsl #2
    629c:	add	x0, x1, x0
    62a0:	ldr	w4, [x3, #12680]
    62a4:	add	x1, x2, #0x8, lsl #12
    62a8:	add	x0, x25, x0, lsl #2
    62ac:	add	w2, w4, #0x1
    62b0:	str	w2, [x3, #12680]
    62b4:	add	x0, x0, #0x8, lsl #12
    62b8:	ldr	w2, [x1, #12680]
    62bc:	add	w2, w2, #0x1
    62c0:	str	w2, [x1, #12680]
    62c4:	ldr	w1, [x0, #12680]
    62c8:	add	w1, w1, #0x1
    62cc:	str	w1, [x0, #12680]
    62d0:	ldr	x0, [sp, #152]
    62d4:	ldr	w1, [sp, #408]
    62d8:	add	x0, x0, #0x1
    62dc:	str	x0, [sp, #152]
    62e0:	ldr	w0, [sp, #144]
    62e4:	cmp	w0, w1
    62e8:	b.le	63f0 <BZ2_compressBlock@@Base+0x2140>
    62ec:	ldr	w28, [sp, #408]
    62f0:	ldr	w1, [sp, #144]
    62f4:	add	w0, w28, #0x31
    62f8:	str	w0, [sp, #120]
    62fc:	cmp	w0, w1
    6300:	b.lt	5158 <BZ2_compressBlock@@Base+0xea8>  // b.tstop
    6304:	ldr	w0, [sp, #564]
    6308:	str	w0, [sp, #120]
    630c:	ldr	w0, [sp, #144]
    6310:	str	w0, [sp, #408]
    6314:	b	5160 <BZ2_compressBlock@@Base+0xeb0>
    6318:	ldr	w0, [sp, #120]
    631c:	sxtw	x3, w28
    6320:	ldrh	w1, [sp, #672]
    6324:	cmp	w0, w28
    6328:	b.lt	5cc0 <BZ2_compressBlock@@Base+0x1a10>  // b.tstop
    632c:	nop
    6330:	ldr	x0, [sp, #128]
    6334:	mov	x6, #0x934c                	// #37708
    6338:	ldr	x2, [sp, #592]
    633c:	ldrh	w0, [x0, x3, lsl #1]
    6340:	ldr	x5, [sp, #160]
    6344:	add	x4, x0, x6
    6348:	add	x0, x2, x0
    634c:	add	x4, x25, x4
    6350:	ldr	x2, [sp, #576]
    6354:	add	x2, x0, x2
    6358:	b	6360 <BZ2_compressBlock@@Base+0x20b0>
    635c:	ldrh	w1, [x5]
    6360:	ldrb	w0, [x4]
    6364:	add	x4, x4, #0x102
    6368:	cmp	x2, x4
    636c:	add	w1, w1, w0
    6370:	strh	w1, [x5], #2
    6374:	b.ne	635c <BZ2_compressBlock@@Base+0x20ac>  // b.any
    6378:	ldr	w0, [sp, #120]
    637c:	add	x3, x3, #0x1
    6380:	ldrh	w1, [sp, #672]
    6384:	cmp	w0, w3
    6388:	b.ge	6330 <BZ2_compressBlock@@Base+0x2080>  // b.tcont
    638c:	b	5cc0 <BZ2_compressBlock@@Base+0x1a10>
    6390:	ldr	w1, [sp, #120]
    6394:	sxtw	x2, w28
    6398:	cmp	w1, w28
    639c:	b.lt	62d0 <BZ2_compressBlock@@Base+0x2020>  // b.tstop
    63a0:	ldr	x1, [sp, #128]
    63a4:	ldr	w3, [sp, #120]
    63a8:	ldrh	w1, [x1, x2, lsl #1]
    63ac:	add	x2, x2, #0x1
    63b0:	cmp	w3, w2
    63b4:	mov	w3, #0x102                 	// #258
    63b8:	smaddl	x1, w0, w3, x1
    63bc:	add	x1, x25, x1, lsl #2
    63c0:	add	x1, x1, #0x8, lsl #12
    63c4:	ldr	w3, [x1, #12680]
    63c8:	add	w3, w3, #0x1
    63cc:	str	w3, [x1, #12680]
    63d0:	b.ge	63a0 <BZ2_compressBlock@@Base+0x20f0>  // b.tcont
    63d4:	ldr	x0, [sp, #152]
    63d8:	ldr	w1, [sp, #408]
    63dc:	add	x0, x0, #0x1
    63e0:	str	x0, [sp, #152]
    63e4:	ldr	w0, [sp, #144]
    63e8:	cmp	w0, w1
    63ec:	b.gt	62ec <BZ2_compressBlock@@Base+0x203c>
    63f0:	ldr	w1, [sp, #556]
    63f4:	ldr	w0, [x25, #656]
    63f8:	add	w1, w1, #0x1
    63fc:	str	w1, [sp, #556]
    6400:	cmp	w0, #0x2
    6404:	b.gt	8368 <BZ2_compressBlock@@Base+0x40b8>
    6408:	ldr	w22, [sp, #632]
    640c:	ldr	x21, [sp, #608]
    6410:	ldr	x20, [sp, #616]
    6414:	nop
    6418:	mov	x0, x20
    641c:	mov	x1, x21
    6420:	mov	w2, w22
    6424:	mov	w3, #0x11                  	// #17
    6428:	bl	1480 <BZ2_hbMakeCodeLengths@plt>
    642c:	ldr	x0, [sp, #600]
    6430:	add	x20, x20, #0x102
    6434:	add	x21, x21, #0x408
    6438:	cmp	x0, x20
    643c:	b.ne	6418 <BZ2_compressBlock@@Base+0x2168>  // b.any
    6440:	ldr	w0, [sp, #556]
    6444:	cmp	w0, #0x4
    6448:	b.ne	509c <BZ2_compressBlock@@Base+0xdec>  // b.any
    644c:	ldr	w1, [sp, #140]
    6450:	mov	x27, x25
    6454:	ldr	w26, [sp, #632]
    6458:	add	x0, sp, #0x2b0
    645c:	ldr	w21, [sp, #656]
    6460:	mov	w22, #0x0                   	// #0
    6464:	str	x0, [sp, #120]
    6468:	strb	w22, [x0], #1
    646c:	mov	w8, w22
    6470:	add	w22, w22, #0x1
    6474:	cmp	w1, w22
    6478:	b.ne	6468 <BZ2_compressBlock@@Base+0x21b8>  // b.any
    647c:	cbz	w19, 64dc <BZ2_compressBlock@@Base+0x222c>
    6480:	ldrb	w2, [sp, #688]
    6484:	mov	x5, #0x4cfa                	// #19706
    6488:	ldr	x9, [sp, #120]
    648c:	add	x7, x27, #0x6a8
    6490:	add	x6, x27, x5
    6494:	mov	x1, #0x0                   	// #0
    6498:	ldrb	w4, [x7, x1]
    649c:	cmp	w2, w4
    64a0:	b.eq	67a0 <BZ2_compressBlock@@Base+0x24f0>  // b.none
    64a4:	add	x3, x9, #0x1
    64a8:	mov	w0, #0x0                   	// #0
    64ac:	nop
    64b0:	mov	w5, w2
    64b4:	ldrb	w2, [x3]
    64b8:	strb	w5, [x3], #1
    64bc:	add	w0, w0, #0x1
    64c0:	cmp	w4, w2
    64c4:	b.ne	64b0 <BZ2_compressBlock@@Base+0x2200>  // b.any
    64c8:	and	w0, w0, #0xff
    64cc:	strb	w0, [x6, x1]
    64d0:	add	x1, x1, #0x1
    64d4:	cmp	w19, w1
    64d8:	b.gt	6498 <BZ2_compressBlock@@Base+0x21e8>
    64dc:	ldr	x1, [sp, #576]
    64e0:	mov	w0, #0x102                 	// #258
    64e4:	ldr	x25, [sp, #616]
    64e8:	umaddl	x28, w8, w0, x1
    64ec:	ldr	x20, [sp, #648]
    64f0:	cmp	w26, #0x0
    64f4:	mov	w23, #0x0                   	// #0
    64f8:	mov	x1, #0x0                   	// #0
    64fc:	mov	w24, #0x20                  	// #32
    6500:	b.le	6534 <BZ2_compressBlock@@Base+0x2284>
    6504:	nop
    6508:	ldrb	w0, [x25, x1]
    650c:	add	x1, x1, #0x1
    6510:	cmp	w23, w0
    6514:	csel	w23, w23, w0, ge  // ge = tcont
    6518:	cmp	w24, w0
    651c:	csel	w24, w24, w0, le
    6520:	cmp	w26, w1
    6524:	b.gt	6508 <BZ2_compressBlock@@Base+0x2258>
    6528:	cmp	w23, #0x11
    652c:	b.gt	6730 <BZ2_compressBlock@@Base+0x2480>
    6530:	cbz	w24, 673c <BZ2_compressBlock@@Base+0x248c>
    6534:	mov	x1, x25
    6538:	mov	x0, x20
    653c:	mov	w3, w23
    6540:	mov	w2, w24
    6544:	mov	w4, w26
    6548:	add	x25, x25, #0x102
    654c:	bl	1670 <BZ2_hbAssignCodes@plt>
    6550:	add	x20, x20, #0x408
    6554:	cmp	x28, x25
    6558:	b.ne	64f0 <BZ2_compressBlock@@Base+0x2240>  // b.any
    655c:	ldr	x2, [sp, #120]
    6560:	add	x3, x27, #0x90
    6564:	ldr	x9, [sp, #640]
    6568:	mov	x6, x2
    656c:	mov	x0, #0x0                   	// #0
    6570:	mov	w8, #0x1                   	// #1
    6574:	nop
    6578:	add	x1, x9, x0
    657c:	add	x5, x3, x0
    6580:	strb	wzr, [x2]
    6584:	nop
    6588:	ldrb	w7, [x1]
    658c:	add	x1, x1, #0x1
    6590:	mov	x4, x3
    6594:	cmp	x5, x1
    6598:	cbz	w7, 65a0 <BZ2_compressBlock@@Base+0x22f0>
    659c:	strb	w8, [x2]
    65a0:	b.ne	6588 <BZ2_compressBlock@@Base+0x22d8>  // b.any
    65a4:	add	x0, x0, #0x10
    65a8:	add	x2, x2, #0x1
    65ac:	cmp	x0, #0x100
    65b0:	b.ne	6578 <BZ2_compressBlock@@Base+0x22c8>  // b.any
    65b4:	ldr	x0, [sp, #120]
    65b8:	mov	w7, #0x80000000            	// #-2147483648
    65bc:	ldr	w5, [x27, #116]
    65c0:	add	x8, x0, #0x10
    65c4:	mov	w3, w5
    65c8:	ldrb	w1, [x6]
    65cc:	ldr	w0, [x27, #644]
    65d0:	cmp	w0, #0x7
    65d4:	cbnz	w1, 6748 <BZ2_compressBlock@@Base+0x2498>
    65d8:	b.le	6618 <BZ2_compressBlock@@Base+0x2368>
    65dc:	ldr	w1, [x27, #640]
    65e0:	ldr	x0, [x27, #80]
    65e4:	lsr	w1, w1, #24
    65e8:	strb	w1, [x0, w3, sxtw]
    65ec:	ldr	w1, [x27, #640]
    65f0:	ldr	w3, [x27, #116]
    65f4:	ldr	w0, [x27, #644]
    65f8:	lsl	w1, w1, #8
    65fc:	add	w3, w3, #0x1
    6600:	sub	w0, w0, #0x8
    6604:	str	w3, [x27, #116]
    6608:	str	w1, [x27, #640]
    660c:	cmp	w0, #0x7
    6610:	str	w0, [x27, #644]
    6614:	b.gt	65e0 <BZ2_compressBlock@@Base+0x2330>
    6618:	add	w0, w0, #0x1
    661c:	str	w0, [x27, #644]
    6620:	add	x6, x6, #0x1
    6624:	cmp	x8, x6
    6628:	b.ne	65c8 <BZ2_compressBlock@@Base+0x2318>  // b.any
    662c:	mov	x7, #0x1                   	// #1
    6630:	mov	w8, #0x80000000            	// #-2147483648
    6634:	ldr	x9, [sp, #120]
    6638:	b	664c <BZ2_compressBlock@@Base+0x239c>
    663c:	add	x7, x7, #0x1
    6640:	add	x4, x4, #0x10
    6644:	cmp	x7, #0x11
    6648:	b.eq	67a8 <BZ2_compressBlock@@Base+0x24f8>  // b.none
    664c:	add	x0, x9, x7
    6650:	ldurb	w0, [x0, #-1]
    6654:	cbz	w0, 663c <BZ2_compressBlock@@Base+0x238c>
    6658:	ldurb	w1, [x4, #-16]
    665c:	sub	x2, x4, #0x10
    6660:	ldr	w0, [x27, #644]
    6664:	cmp	w0, #0x7
    6668:	cbnz	w1, 66d4 <BZ2_compressBlock@@Base+0x2424>
    666c:	nop
    6670:	b.le	66b0 <BZ2_compressBlock@@Base+0x2400>
    6674:	ldr	w1, [x27, #640]
    6678:	ldr	x0, [x27, #80]
    667c:	lsr	w1, w1, #24
    6680:	strb	w1, [x0, w3, sxtw]
    6684:	ldr	w1, [x27, #640]
    6688:	ldr	w3, [x27, #116]
    668c:	ldr	w0, [x27, #644]
    6690:	lsl	w1, w1, #8
    6694:	add	w3, w3, #0x1
    6698:	sub	w0, w0, #0x8
    669c:	str	w3, [x27, #116]
    66a0:	str	w1, [x27, #640]
    66a4:	cmp	w0, #0x7
    66a8:	str	w0, [x27, #644]
    66ac:	b.gt	6678 <BZ2_compressBlock@@Base+0x23c8>
    66b0:	add	w0, w0, #0x1
    66b4:	str	w0, [x27, #644]
    66b8:	add	x2, x2, #0x1
    66bc:	cmp	x4, x2
    66c0:	b.eq	663c <BZ2_compressBlock@@Base+0x238c>  // b.none
    66c4:	ldrb	w1, [x2]
    66c8:	ldr	w0, [x27, #644]
    66cc:	cmp	w0, #0x7
    66d0:	cbz	w1, 6670 <BZ2_compressBlock@@Base+0x23c0>
    66d4:	ldr	w1, [x27, #640]
    66d8:	b.le	6718 <BZ2_compressBlock@@Base+0x2468>
    66dc:	nop
    66e0:	ldr	x0, [x27, #80]
    66e4:	lsr	w1, w1, #24
    66e8:	strb	w1, [x0, w3, sxtw]
    66ec:	ldr	w1, [x27, #640]
    66f0:	ldr	w3, [x27, #116]
    66f4:	ldr	w0, [x27, #644]
    66f8:	lsl	w1, w1, #8
    66fc:	add	w3, w3, #0x1
    6700:	sub	w0, w0, #0x8
    6704:	str	w3, [x27, #116]
    6708:	str	w1, [x27, #640]
    670c:	cmp	w0, #0x7
    6710:	str	w0, [x27, #644]
    6714:	b.gt	66e0 <BZ2_compressBlock@@Base+0x2430>
    6718:	lsr	w6, w8, w0
    671c:	add	w0, w0, #0x1
    6720:	orr	w1, w6, w1
    6724:	str	w1, [x27, #640]
    6728:	str	w0, [x27, #644]
    672c:	b	66b8 <BZ2_compressBlock@@Base+0x2408>
    6730:	mov	w0, #0xbbc                 	// #3004
    6734:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    6738:	cbnz	w24, 6534 <BZ2_compressBlock@@Base+0x2284>
    673c:	mov	w0, #0xbbd                 	// #3005
    6740:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    6744:	b	6534 <BZ2_compressBlock@@Base+0x2284>
    6748:	ldr	w1, [x27, #640]
    674c:	b.le	6788 <BZ2_compressBlock@@Base+0x24d8>
    6750:	ldr	x0, [x27, #80]
    6754:	lsr	w1, w1, #24
    6758:	strb	w1, [x0, w3, sxtw]
    675c:	ldr	w1, [x27, #640]
    6760:	ldr	w3, [x27, #116]
    6764:	ldr	w0, [x27, #644]
    6768:	lsl	w1, w1, #8
    676c:	add	w3, w3, #0x1
    6770:	sub	w0, w0, #0x8
    6774:	str	w3, [x27, #116]
    6778:	str	w1, [x27, #640]
    677c:	cmp	w0, #0x7
    6780:	str	w0, [x27, #644]
    6784:	b.gt	6750 <BZ2_compressBlock@@Base+0x24a0>
    6788:	lsr	w2, w7, w0
    678c:	add	w0, w0, #0x1
    6790:	orr	w1, w2, w1
    6794:	str	w1, [x27, #640]
    6798:	str	w0, [x27, #644]
    679c:	b	6620 <BZ2_compressBlock@@Base+0x2370>
    67a0:	mov	w0, #0x0                   	// #0
    67a4:	b	64cc <BZ2_compressBlock@@Base+0x221c>
    67a8:	ldr	w0, [x27, #656]
    67ac:	cmp	w0, #0x2
    67b0:	b.gt	8454 <BZ2_compressBlock@@Base+0x41a4>
    67b4:	ldr	w0, [x27, #644]
    67b8:	mov	w1, w3
    67bc:	ldr	w5, [x27, #640]
    67c0:	cmp	w0, #0x7
    67c4:	b.le	6800 <BZ2_compressBlock@@Base+0x2550>
    67c8:	ldr	x0, [x27, #80]
    67cc:	lsr	w5, w5, #24
    67d0:	strb	w5, [x0, w1, sxtw]
    67d4:	ldr	w5, [x27, #640]
    67d8:	ldr	w1, [x27, #116]
    67dc:	ldr	w0, [x27, #644]
    67e0:	lsl	w5, w5, #8
    67e4:	add	w1, w1, #0x1
    67e8:	sub	w0, w0, #0x8
    67ec:	str	w1, [x27, #116]
    67f0:	str	w5, [x27, #640]
    67f4:	cmp	w0, #0x7
    67f8:	str	w0, [x27, #644]
    67fc:	b.gt	67c8 <BZ2_compressBlock@@Base+0x2518>
    6800:	ldr	w2, [sp, #660]
    6804:	mov	w4, #0x1d                  	// #29
    6808:	sub	w4, w4, w0
    680c:	add	w0, w0, #0x3
    6810:	str	w0, [x27, #644]
    6814:	cmp	w0, #0x7
    6818:	lsl	w4, w2, w4
    681c:	orr	w4, w4, w5
    6820:	str	w4, [x27, #640]
    6824:	b.le	6860 <BZ2_compressBlock@@Base+0x25b0>
    6828:	ldr	x0, [x27, #80]
    682c:	lsr	w4, w4, #24
    6830:	strb	w4, [x0, w1, sxtw]
    6834:	ldr	w4, [x27, #640]
    6838:	ldr	w1, [x27, #116]
    683c:	ldr	w0, [x27, #644]
    6840:	lsl	w4, w4, #8
    6844:	add	w1, w1, #0x1
    6848:	sub	w0, w0, #0x8
    684c:	str	w1, [x27, #116]
    6850:	str	w4, [x27, #640]
    6854:	cmp	w0, #0x7
    6858:	str	w0, [x27, #644]
    685c:	b.gt	6828 <BZ2_compressBlock@@Base+0x2578>
    6860:	mov	w2, #0x11                  	// #17
    6864:	sub	w2, w2, w0
    6868:	add	w0, w0, #0xf
    686c:	str	w0, [x27, #644]
    6870:	lsl	w2, w19, w2
    6874:	orr	w4, w2, w4
    6878:	str	w4, [x27, #640]
    687c:	cbz	w19, 696c <BZ2_compressBlock@@Base+0x26bc>
    6880:	sub	w7, w19, #0x1
    6884:	mov	x2, #0x4cfb                	// #19707
    6888:	add	x2, x27, x2
    688c:	mov	x4, #0x4cfa                	// #19706
    6890:	add	x7, x7, x2
    6894:	add	x6, x27, x4
    6898:	mov	w8, #0x80000000            	// #-2147483648
    689c:	nop
    68a0:	ldrb	w2, [x6]
    68a4:	cbz	w2, 6914 <BZ2_compressBlock@@Base+0x2664>
    68a8:	ldr	w2, [x27, #640]
    68ac:	mov	w4, #0x0                   	// #0
    68b0:	cmp	w0, #0x7
    68b4:	b.le	68f0 <BZ2_compressBlock@@Base+0x2640>
    68b8:	ldr	x0, [x27, #80]
    68bc:	lsr	w2, w2, #24
    68c0:	strb	w2, [x0, w1, sxtw]
    68c4:	ldr	w2, [x27, #640]
    68c8:	ldr	w1, [x27, #116]
    68cc:	ldr	w0, [x27, #644]
    68d0:	lsl	w2, w2, #8
    68d4:	add	w1, w1, #0x1
    68d8:	sub	w0, w0, #0x8
    68dc:	str	w1, [x27, #116]
    68e0:	str	w2, [x27, #640]
    68e4:	cmp	w0, #0x7
    68e8:	str	w0, [x27, #644]
    68ec:	b.gt	68b8 <BZ2_compressBlock@@Base+0x2608>
    68f0:	lsr	w5, w8, w0
    68f4:	add	w0, w0, #0x1
    68f8:	orr	w2, w2, w5
    68fc:	str	w2, [x27, #640]
    6900:	str	w0, [x27, #644]
    6904:	add	w4, w4, #0x1
    6908:	ldrb	w5, [x6]
    690c:	cmp	w4, w5
    6910:	b.lt	68b0 <BZ2_compressBlock@@Base+0x2600>  // b.tstop
    6914:	cmp	w0, #0x7
    6918:	b.le	6958 <BZ2_compressBlock@@Base+0x26a8>
    691c:	ldr	w2, [x27, #640]
    6920:	ldr	x0, [x27, #80]
    6924:	lsr	w2, w2, #24
    6928:	strb	w2, [x0, w1, sxtw]
    692c:	ldr	w2, [x27, #640]
    6930:	ldr	w1, [x27, #116]
    6934:	ldr	w0, [x27, #644]
    6938:	lsl	w2, w2, #8
    693c:	add	w1, w1, #0x1
    6940:	sub	w0, w0, #0x8
    6944:	str	w1, [x27, #116]
    6948:	str	w2, [x27, #640]
    694c:	cmp	w0, #0x7
    6950:	str	w0, [x27, #644]
    6954:	b.gt	6920 <BZ2_compressBlock@@Base+0x2670>
    6958:	add	w0, w0, #0x1
    695c:	str	w0, [x27, #644]
    6960:	add	x6, x6, #0x1
    6964:	cmp	x7, x6
    6968:	b.ne	68a0 <BZ2_compressBlock@@Base+0x25f0>  // b.any
    696c:	ldr	w0, [x27, #656]
    6970:	cmp	w0, #0x2
    6974:	b.gt	8430 <BZ2_compressBlock@@Base+0x4180>
    6978:	ldr	w0, [sp, #560]
    697c:	mov	w20, w1
    6980:	ldr	x4, [sp, #616]
    6984:	add	w5, w0, #0x1
    6988:	add	x5, x5, #0x1
    698c:	mov	w9, #0x1b                  	// #27
    6990:	mov	w6, #0x1e                  	// #30
    6994:	mov	w8, #0x2                   	// #2
    6998:	mov	w7, #0x3                   	// #3
    699c:	nop
    69a0:	ldr	w0, [x27, #644]
    69a4:	ldrb	w3, [x4]
    69a8:	ldr	w2, [x27, #640]
    69ac:	cmp	w0, #0x7
    69b0:	b.le	69f0 <BZ2_compressBlock@@Base+0x2740>
    69b4:	nop
    69b8:	ldr	x0, [x27, #80]
    69bc:	lsr	w2, w2, #24
    69c0:	strb	w2, [x0, w20, sxtw]
    69c4:	ldr	w2, [x27, #640]
    69c8:	ldr	w20, [x27, #116]
    69cc:	ldr	w0, [x27, #644]
    69d0:	lsl	w2, w2, #8
    69d4:	add	w20, w20, #0x1
    69d8:	sub	w0, w0, #0x8
    69dc:	str	w20, [x27, #116]
    69e0:	str	w2, [x27, #640]
    69e4:	cmp	w0, #0x7
    69e8:	str	w0, [x27, #644]
    69ec:	b.gt	69b8 <BZ2_compressBlock@@Base+0x2708>
    69f0:	sub	w10, w9, w0
    69f4:	add	w0, w0, #0x5
    69f8:	str	w0, [x27, #644]
    69fc:	cmp	w26, #0x0
    6a00:	lsl	w10, w3, w10
    6a04:	orr	w2, w10, w2
    6a08:	str	w2, [x27, #640]
    6a0c:	b.le	6b64 <BZ2_compressBlock@@Base+0x28b4>
    6a10:	mov	x10, x4
    6a14:	add	x12, x5, x4
    6a18:	ldrb	w11, [x10]
    6a1c:	cmp	w11, w3
    6a20:	b.le	6a90 <BZ2_compressBlock@@Base+0x27e0>
    6a24:	ldr	w2, [x27, #640]
    6a28:	cmp	w0, #0x7
    6a2c:	b.le	6a68 <BZ2_compressBlock@@Base+0x27b8>
    6a30:	ldr	x0, [x27, #80]
    6a34:	lsr	w2, w2, #24
    6a38:	strb	w2, [x0, w20, sxtw]
    6a3c:	ldr	w2, [x27, #640]
    6a40:	ldr	w20, [x27, #116]
    6a44:	ldr	w0, [x27, #644]
    6a48:	lsl	w2, w2, #8
    6a4c:	add	w20, w20, #0x1
    6a50:	sub	w0, w0, #0x8
    6a54:	str	w20, [x27, #116]
    6a58:	str	w2, [x27, #640]
    6a5c:	cmp	w0, #0x7
    6a60:	str	w0, [x27, #644]
    6a64:	b.gt	6a30 <BZ2_compressBlock@@Base+0x2780>
    6a68:	sub	w11, w6, w0
    6a6c:	add	w0, w0, #0x2
    6a70:	str	w0, [x27, #644]
    6a74:	add	w3, w3, #0x1
    6a78:	lsl	w11, w8, w11
    6a7c:	orr	w2, w2, w11
    6a80:	str	w2, [x27, #640]
    6a84:	ldrb	w11, [x10]
    6a88:	cmp	w3, w11
    6a8c:	b.lt	6a28 <BZ2_compressBlock@@Base+0x2778>  // b.tstop
    6a90:	cmp	w3, w11
    6a94:	b.le	6b08 <BZ2_compressBlock@@Base+0x2858>
    6a98:	ldr	w2, [x27, #640]
    6a9c:	nop
    6aa0:	cmp	w0, #0x7
    6aa4:	b.le	6ae0 <BZ2_compressBlock@@Base+0x2830>
    6aa8:	ldr	x0, [x27, #80]
    6aac:	lsr	w2, w2, #24
    6ab0:	strb	w2, [x0, w20, sxtw]
    6ab4:	ldr	w2, [x27, #640]
    6ab8:	ldr	w20, [x27, #116]
    6abc:	ldr	w0, [x27, #644]
    6ac0:	lsl	w2, w2, #8
    6ac4:	add	w20, w20, #0x1
    6ac8:	sub	w0, w0, #0x8
    6acc:	str	w20, [x27, #116]
    6ad0:	str	w2, [x27, #640]
    6ad4:	cmp	w0, #0x7
    6ad8:	str	w0, [x27, #644]
    6adc:	b.gt	6aa8 <BZ2_compressBlock@@Base+0x27f8>
    6ae0:	sub	w11, w6, w0
    6ae4:	add	w0, w0, #0x2
    6ae8:	str	w0, [x27, #644]
    6aec:	sub	w3, w3, #0x1
    6af0:	lsl	w11, w7, w11
    6af4:	orr	w2, w2, w11
    6af8:	str	w2, [x27, #640]
    6afc:	ldrb	w11, [x10]
    6b00:	cmp	w3, w11
    6b04:	b.gt	6aa0 <BZ2_compressBlock@@Base+0x27f0>
    6b08:	cmp	w0, #0x7
    6b0c:	b.le	6b50 <BZ2_compressBlock@@Base+0x28a0>
    6b10:	ldr	w2, [x27, #640]
    6b14:	nop
    6b18:	ldr	x0, [x27, #80]
    6b1c:	lsr	w2, w2, #24
    6b20:	strb	w2, [x0, w20, sxtw]
    6b24:	ldr	w2, [x27, #640]
    6b28:	ldr	w20, [x27, #116]
    6b2c:	ldr	w0, [x27, #644]
    6b30:	lsl	w2, w2, #8
    6b34:	add	w20, w20, #0x1
    6b38:	sub	w0, w0, #0x8
    6b3c:	str	w20, [x27, #116]
    6b40:	str	w2, [x27, #640]
    6b44:	cmp	w0, #0x7
    6b48:	str	w0, [x27, #644]
    6b4c:	b.gt	6b18 <BZ2_compressBlock@@Base+0x2868>
    6b50:	add	w0, w0, #0x1
    6b54:	str	w0, [x27, #644]
    6b58:	add	x10, x10, #0x1
    6b5c:	cmp	x12, x10
    6b60:	b.ne	6a18 <BZ2_compressBlock@@Base+0x2768>  // b.any
    6b64:	add	x4, x4, #0x102
    6b68:	cmp	x28, x4
    6b6c:	b.ne	69a0 <BZ2_compressBlock@@Base+0x26f0>  // b.any
    6b70:	ldr	w0, [x27, #656]
    6b74:	cmp	w0, #0x2
    6b78:	b.gt	849c <BZ2_compressBlock@@Base+0x41ec>
    6b7c:	ldr	w0, [x27, #668]
    6b80:	cmp	w0, #0x0
    6b84:	b.le	48ec <BZ2_compressBlock@@Base+0x63c>
    6b88:	add	x23, x27, #0x6a7
    6b8c:	mov	x25, #0x1                   	// #1
    6b90:	mov	x28, #0x2654                	// #9812
    6b94:	mov	w24, #0x20                  	// #32
    6b98:	str	w19, [sp, #120]
    6b9c:	ldr	x19, [sp, #128]
    6ba0:	str	w20, [sp, #128]
    6ba4:	nop
    6ba8:	add	w20, w21, #0x31
    6bac:	add	w26, w21, #0x32
    6bb0:	cmp	w20, w0
    6bb4:	b.lt	6bc0 <BZ2_compressBlock@@Base+0x2910>  // b.tstop
    6bb8:	sub	w20, w0, #0x1
    6bbc:	mov	w26, w0
    6bc0:	ldrb	w0, [x23, x25]
    6bc4:	cmp	w22, w0
    6bc8:	b.le	6cb4 <BZ2_compressBlock@@Base+0x2a04>
    6bcc:	cmp	w22, #0x6
    6bd0:	b.ne	6be0 <BZ2_compressBlock@@Base+0x2930>  // b.any
    6bd4:	sub	w0, w20, w21
    6bd8:	cmp	w0, #0x31
    6bdc:	b.eq	6cc0 <BZ2_compressBlock@@Base+0x2a10>  // b.none
    6be0:	cmp	w20, w21
    6be4:	b.lt	6c98 <BZ2_compressBlock@@Base+0x29e8>  // b.tstop
    6be8:	ldr	w2, [x27, #640]
    6bec:	sxtw	x21, w21
    6bf0:	ldr	w0, [x27, #644]
    6bf4:	nop
    6bf8:	ldrb	w1, [x23, x25]
    6bfc:	cmp	w0, #0x7
    6c00:	ldrh	w6, [x19, x21, lsl #1]
    6c04:	add	x1, x1, x1, lsl #7
    6c08:	lsl	x1, x1, #1
    6c0c:	add	x4, x1, x6
    6c10:	add	x1, x27, x1
    6c14:	add	x4, x4, x28
    6c18:	add	x1, x1, x6
    6c1c:	add	x1, x1, #0x9, lsl #12
    6c20:	add	x4, x27, x4, lsl #2
    6c24:	ldrb	w6, [x1, #844]
    6c28:	ldr	w4, [x4, #8]
    6c2c:	b.le	6c70 <BZ2_compressBlock@@Base+0x29c0>
    6c30:	ldr	w1, [x27, #116]
    6c34:	nop
    6c38:	ldr	x0, [x27, #80]
    6c3c:	lsr	w2, w2, #24
    6c40:	strb	w2, [x0, w1, sxtw]
    6c44:	ldr	w2, [x27, #640]
    6c48:	ldr	w1, [x27, #116]
    6c4c:	ldr	w0, [x27, #644]
    6c50:	lsl	w2, w2, #8
    6c54:	add	w1, w1, #0x1
    6c58:	sub	w0, w0, #0x8
    6c5c:	str	w1, [x27, #116]
    6c60:	str	w2, [x27, #640]
    6c64:	cmp	w0, #0x7
    6c68:	str	w0, [x27, #644]
    6c6c:	b.gt	6c38 <BZ2_compressBlock@@Base+0x2988>
    6c70:	sub	w1, w24, w0
    6c74:	add	w0, w0, w6
    6c78:	sub	w1, w1, w6
    6c7c:	str	w0, [x27, #644]
    6c80:	add	x21, x21, #0x1
    6c84:	lsl	w1, w4, w1
    6c88:	orr	w2, w2, w1
    6c8c:	str	w2, [x27, #640]
    6c90:	cmp	w20, w21
    6c94:	b.ge	6bf8 <BZ2_compressBlock@@Base+0x2948>  // b.tcont
    6c98:	ldr	w0, [x27, #668]
    6c9c:	mov	w21, w25
    6ca0:	add	x25, x25, #0x1
    6ca4:	cmp	w0, w26
    6ca8:	b.le	48e4 <BZ2_compressBlock@@Base+0x634>
    6cac:	mov	w21, w26
    6cb0:	b	6ba8 <BZ2_compressBlock@@Base+0x28f8>
    6cb4:	mov	w0, #0xbbe                 	// #3006
    6cb8:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    6cbc:	b	6bcc <BZ2_compressBlock@@Base+0x291c>
    6cc0:	ldrb	w1, [x23, x25]
    6cc4:	sbfiz	x0, x21, #1, #32
    6cc8:	mov	x2, #0x934c                	// #37708
    6ccc:	mov	x3, #0x9958                	// #39256
    6cd0:	ldr	w8, [x27, #644]
    6cd4:	add	x1, x1, x1, lsl #7
    6cd8:	ldrh	w7, [x19, x0]
    6cdc:	ldr	w6, [x27, #640]
    6ce0:	cmp	w8, #0x7
    6ce4:	add	x2, x2, x1, lsl #1
    6ce8:	add	x1, x3, x1, lsl #3
    6cec:	add	x2, x27, x2
    6cf0:	add	x1, x27, x1
    6cf4:	and	x5, x7, #0xffff
    6cf8:	ldr	w9, [x1, x7, lsl #2]
    6cfc:	ldrb	w4, [x2, x5]
    6d00:	b.le	6d40 <BZ2_compressBlock@@Base+0x2a90>
    6d04:	ldr	w7, [x27, #116]
    6d08:	ldr	x8, [x27, #80]
    6d0c:	lsr	w6, w6, #24
    6d10:	strb	w6, [x8, w7, sxtw]
    6d14:	ldr	w6, [x27, #640]
    6d18:	ldr	w7, [x27, #116]
    6d1c:	ldr	w8, [x27, #644]
    6d20:	lsl	w6, w6, #8
    6d24:	add	w7, w7, #0x1
    6d28:	sub	w8, w8, #0x8
    6d2c:	str	w7, [x27, #116]
    6d30:	str	w6, [x27, #640]
    6d34:	cmp	w8, #0x7
    6d38:	str	w8, [x27, #644]
    6d3c:	b.gt	6d08 <BZ2_compressBlock@@Base+0x2a58>
    6d40:	add	x0, x19, x0
    6d44:	sub	w5, w24, w8
    6d48:	sub	w5, w5, w4
    6d4c:	add	w8, w4, w8
    6d50:	cmp	w8, #0x7
    6d54:	ldrh	w4, [x0, #2]
    6d58:	lsl	w7, w9, w5
    6d5c:	orr	w5, w7, w6
    6d60:	str	w5, [x27, #640]
    6d64:	and	x6, x4, #0xffff
    6d68:	str	w8, [x27, #644]
    6d6c:	ldr	w4, [x1, x4, lsl #2]
    6d70:	ldrb	w7, [x2, x6]
    6d74:	b.le	6db8 <BZ2_compressBlock@@Base+0x2b08>
    6d78:	ldr	w9, [x27, #116]
    6d7c:	nop
    6d80:	ldr	x8, [x27, #80]
    6d84:	lsr	w6, w5, #24
    6d88:	strb	w6, [x8, w9, sxtw]
    6d8c:	ldr	w6, [x27, #640]
    6d90:	ldr	w9, [x27, #116]
    6d94:	ldr	w8, [x27, #644]
    6d98:	lsl	w5, w6, #8
    6d9c:	add	w9, w9, #0x1
    6da0:	sub	w8, w8, #0x8
    6da4:	str	w9, [x27, #116]
    6da8:	str	w5, [x27, #640]
    6dac:	cmp	w8, #0x7
    6db0:	str	w8, [x27, #644]
    6db4:	b.gt	6d80 <BZ2_compressBlock@@Base+0x2ad0>
    6db8:	ldrh	w9, [x0, #4]
    6dbc:	sub	w6, w24, w8
    6dc0:	sub	w6, w6, w7
    6dc4:	add	w8, w7, w8
    6dc8:	and	x7, x9, #0xffff
    6dcc:	str	w8, [x27, #644]
    6dd0:	lsl	w6, w4, w6
    6dd4:	orr	w6, w6, w5
    6dd8:	str	w6, [x27, #640]
    6ddc:	cmp	w8, #0x7
    6de0:	ldrb	w7, [x2, x7]
    6de4:	ldr	w4, [x1, x9, lsl #2]
    6de8:	b.le	6e28 <BZ2_compressBlock@@Base+0x2b78>
    6dec:	ldr	w5, [x27, #116]
    6df0:	ldr	x8, [x27, #80]
    6df4:	lsr	w6, w6, #24
    6df8:	strb	w6, [x8, w5, sxtw]
    6dfc:	ldr	w6, [x27, #640]
    6e00:	ldr	w5, [x27, #116]
    6e04:	ldr	w8, [x27, #644]
    6e08:	lsl	w6, w6, #8
    6e0c:	add	w5, w5, #0x1
    6e10:	sub	w8, w8, #0x8
    6e14:	str	w5, [x27, #116]
    6e18:	str	w6, [x27, #640]
    6e1c:	cmp	w8, #0x7
    6e20:	str	w8, [x27, #644]
    6e24:	b.gt	6df0 <BZ2_compressBlock@@Base+0x2b40>
    6e28:	ldrh	w9, [x0, #6]
    6e2c:	sub	w5, w24, w8
    6e30:	sub	w5, w5, w7
    6e34:	add	w8, w7, w8
    6e38:	and	x7, x9, #0xffff
    6e3c:	str	w8, [x27, #644]
    6e40:	lsl	w5, w4, w5
    6e44:	orr	w6, w5, w6
    6e48:	str	w6, [x27, #640]
    6e4c:	cmp	w8, #0x7
    6e50:	ldrb	w7, [x2, x7]
    6e54:	ldr	w4, [x1, x9, lsl #2]
    6e58:	b.le	6e98 <BZ2_compressBlock@@Base+0x2be8>
    6e5c:	ldr	w9, [x27, #116]
    6e60:	ldr	x8, [x27, #80]
    6e64:	lsr	w5, w6, #24
    6e68:	strb	w5, [x8, w9, sxtw]
    6e6c:	ldr	w5, [x27, #640]
    6e70:	ldr	w9, [x27, #116]
    6e74:	ldr	w8, [x27, #644]
    6e78:	lsl	w6, w5, #8
    6e7c:	add	w9, w9, #0x1
    6e80:	sub	w8, w8, #0x8
    6e84:	str	w9, [x27, #116]
    6e88:	str	w6, [x27, #640]
    6e8c:	cmp	w8, #0x7
    6e90:	str	w8, [x27, #644]
    6e94:	b.gt	6e60 <BZ2_compressBlock@@Base+0x2bb0>
    6e98:	ldrh	w9, [x0, #8]
    6e9c:	sub	w5, w24, w8
    6ea0:	sub	w5, w5, w7
    6ea4:	add	w8, w7, w8
    6ea8:	and	x7, x9, #0xffff
    6eac:	str	w8, [x27, #644]
    6eb0:	lsl	w5, w4, w5
    6eb4:	orr	w5, w5, w6
    6eb8:	str	w5, [x27, #640]
    6ebc:	cmp	w8, #0x7
    6ec0:	ldrb	w7, [x2, x7]
    6ec4:	ldr	w4, [x1, x9, lsl #2]
    6ec8:	b.le	6f08 <BZ2_compressBlock@@Base+0x2c58>
    6ecc:	ldr	w6, [x27, #116]
    6ed0:	ldr	x8, [x27, #80]
    6ed4:	lsr	w5, w5, #24
    6ed8:	strb	w5, [x8, w6, sxtw]
    6edc:	ldr	w5, [x27, #640]
    6ee0:	ldr	w6, [x27, #116]
    6ee4:	ldr	w8, [x27, #644]
    6ee8:	lsl	w5, w5, #8
    6eec:	add	w6, w6, #0x1
    6ef0:	sub	w8, w8, #0x8
    6ef4:	str	w6, [x27, #116]
    6ef8:	str	w5, [x27, #640]
    6efc:	cmp	w8, #0x7
    6f00:	str	w8, [x27, #644]
    6f04:	b.gt	6ed0 <BZ2_compressBlock@@Base+0x2c20>
    6f08:	ldrh	w9, [x0, #10]
    6f0c:	sub	w6, w24, w8
    6f10:	sub	w6, w6, w7
    6f14:	add	w8, w7, w8
    6f18:	and	x7, x9, #0xffff
    6f1c:	str	w8, [x27, #644]
    6f20:	lsl	w6, w4, w6
    6f24:	orr	w5, w6, w5
    6f28:	str	w5, [x27, #640]
    6f2c:	cmp	w8, #0x7
    6f30:	ldrb	w7, [x2, x7]
    6f34:	ldr	w4, [x1, x9, lsl #2]
    6f38:	b.le	6f78 <BZ2_compressBlock@@Base+0x2cc8>
    6f3c:	ldr	w9, [x27, #116]
    6f40:	ldr	x8, [x27, #80]
    6f44:	lsr	w6, w5, #24
    6f48:	strb	w6, [x8, w9, sxtw]
    6f4c:	ldr	w6, [x27, #640]
    6f50:	ldr	w9, [x27, #116]
    6f54:	ldr	w8, [x27, #644]
    6f58:	lsl	w5, w6, #8
    6f5c:	add	w9, w9, #0x1
    6f60:	sub	w8, w8, #0x8
    6f64:	str	w9, [x27, #116]
    6f68:	str	w5, [x27, #640]
    6f6c:	cmp	w8, #0x7
    6f70:	str	w8, [x27, #644]
    6f74:	b.gt	6f40 <BZ2_compressBlock@@Base+0x2c90>
    6f78:	ldrh	w9, [x0, #12]
    6f7c:	sub	w6, w24, w8
    6f80:	sub	w6, w6, w7
    6f84:	add	w8, w7, w8
    6f88:	and	x7, x9, #0xffff
    6f8c:	str	w8, [x27, #644]
    6f90:	lsl	w6, w4, w6
    6f94:	orr	w6, w6, w5
    6f98:	str	w6, [x27, #640]
    6f9c:	cmp	w8, #0x7
    6fa0:	ldrb	w7, [x2, x7]
    6fa4:	ldr	w4, [x1, x9, lsl #2]
    6fa8:	b.le	6fe8 <BZ2_compressBlock@@Base+0x2d38>
    6fac:	ldr	w5, [x27, #116]
    6fb0:	ldr	x8, [x27, #80]
    6fb4:	lsr	w6, w6, #24
    6fb8:	strb	w6, [x8, w5, sxtw]
    6fbc:	ldr	w6, [x27, #640]
    6fc0:	ldr	w5, [x27, #116]
    6fc4:	ldr	w8, [x27, #644]
    6fc8:	lsl	w6, w6, #8
    6fcc:	add	w5, w5, #0x1
    6fd0:	sub	w8, w8, #0x8
    6fd4:	str	w5, [x27, #116]
    6fd8:	str	w6, [x27, #640]
    6fdc:	cmp	w8, #0x7
    6fe0:	str	w8, [x27, #644]
    6fe4:	b.gt	6fb0 <BZ2_compressBlock@@Base+0x2d00>
    6fe8:	ldrh	w9, [x0, #14]
    6fec:	sub	w5, w24, w8
    6ff0:	sub	w5, w5, w7
    6ff4:	add	w8, w7, w8
    6ff8:	and	x7, x9, #0xffff
    6ffc:	str	w8, [x27, #644]
    7000:	lsl	w5, w4, w5
    7004:	orr	w6, w5, w6
    7008:	str	w6, [x27, #640]
    700c:	cmp	w8, #0x7
    7010:	ldrb	w7, [x2, x7]
    7014:	ldr	w4, [x1, x9, lsl #2]
    7018:	b.le	7058 <BZ2_compressBlock@@Base+0x2da8>
    701c:	ldr	w9, [x27, #116]
    7020:	ldr	x8, [x27, #80]
    7024:	lsr	w5, w6, #24
    7028:	strb	w5, [x8, w9, sxtw]
    702c:	ldr	w5, [x27, #640]
    7030:	ldr	w9, [x27, #116]
    7034:	ldr	w8, [x27, #644]
    7038:	lsl	w6, w5, #8
    703c:	add	w9, w9, #0x1
    7040:	sub	w8, w8, #0x8
    7044:	str	w9, [x27, #116]
    7048:	str	w6, [x27, #640]
    704c:	cmp	w8, #0x7
    7050:	str	w8, [x27, #644]
    7054:	b.gt	7020 <BZ2_compressBlock@@Base+0x2d70>
    7058:	ldrh	w9, [x0, #16]
    705c:	sub	w5, w24, w8
    7060:	sub	w5, w5, w7
    7064:	add	w8, w7, w8
    7068:	and	x7, x9, #0xffff
    706c:	str	w8, [x27, #644]
    7070:	lsl	w5, w4, w5
    7074:	orr	w5, w5, w6
    7078:	str	w5, [x27, #640]
    707c:	cmp	w8, #0x7
    7080:	ldrb	w7, [x2, x7]
    7084:	ldr	w4, [x1, x9, lsl #2]
    7088:	b.le	70c8 <BZ2_compressBlock@@Base+0x2e18>
    708c:	ldr	w6, [x27, #116]
    7090:	ldr	x8, [x27, #80]
    7094:	lsr	w5, w5, #24
    7098:	strb	w5, [x8, w6, sxtw]
    709c:	ldr	w5, [x27, #640]
    70a0:	ldr	w6, [x27, #116]
    70a4:	ldr	w8, [x27, #644]
    70a8:	lsl	w5, w5, #8
    70ac:	add	w6, w6, #0x1
    70b0:	sub	w8, w8, #0x8
    70b4:	str	w6, [x27, #116]
    70b8:	str	w5, [x27, #640]
    70bc:	cmp	w8, #0x7
    70c0:	str	w8, [x27, #644]
    70c4:	b.gt	7090 <BZ2_compressBlock@@Base+0x2de0>
    70c8:	ldrh	w9, [x0, #18]
    70cc:	sub	w6, w24, w8
    70d0:	sub	w6, w6, w7
    70d4:	add	w8, w7, w8
    70d8:	and	x7, x9, #0xffff
    70dc:	str	w8, [x27, #644]
    70e0:	lsl	w6, w4, w6
    70e4:	orr	w5, w6, w5
    70e8:	str	w5, [x27, #640]
    70ec:	cmp	w8, #0x7
    70f0:	ldrb	w7, [x2, x7]
    70f4:	ldr	w4, [x1, x9, lsl #2]
    70f8:	b.le	7138 <BZ2_compressBlock@@Base+0x2e88>
    70fc:	ldr	w9, [x27, #116]
    7100:	ldr	x8, [x27, #80]
    7104:	lsr	w6, w5, #24
    7108:	strb	w6, [x8, w9, sxtw]
    710c:	ldr	w6, [x27, #640]
    7110:	ldr	w9, [x27, #116]
    7114:	ldr	w8, [x27, #644]
    7118:	lsl	w5, w6, #8
    711c:	add	w9, w9, #0x1
    7120:	sub	w8, w8, #0x8
    7124:	str	w9, [x27, #116]
    7128:	str	w5, [x27, #640]
    712c:	cmp	w8, #0x7
    7130:	str	w8, [x27, #644]
    7134:	b.gt	7100 <BZ2_compressBlock@@Base+0x2e50>
    7138:	ldrh	w9, [x0, #20]
    713c:	sub	w6, w24, w8
    7140:	sub	w6, w6, w7
    7144:	add	w8, w7, w8
    7148:	and	x7, x9, #0xffff
    714c:	str	w8, [x27, #644]
    7150:	lsl	w6, w4, w6
    7154:	orr	w6, w6, w5
    7158:	str	w6, [x27, #640]
    715c:	cmp	w8, #0x7
    7160:	ldrb	w7, [x2, x7]
    7164:	ldr	w4, [x1, x9, lsl #2]
    7168:	b.le	71a8 <BZ2_compressBlock@@Base+0x2ef8>
    716c:	ldr	w5, [x27, #116]
    7170:	ldr	x8, [x27, #80]
    7174:	lsr	w6, w6, #24
    7178:	strb	w6, [x8, w5, sxtw]
    717c:	ldr	w6, [x27, #640]
    7180:	ldr	w5, [x27, #116]
    7184:	ldr	w8, [x27, #644]
    7188:	lsl	w6, w6, #8
    718c:	add	w5, w5, #0x1
    7190:	sub	w8, w8, #0x8
    7194:	str	w5, [x27, #116]
    7198:	str	w6, [x27, #640]
    719c:	cmp	w8, #0x7
    71a0:	str	w8, [x27, #644]
    71a4:	b.gt	7170 <BZ2_compressBlock@@Base+0x2ec0>
    71a8:	ldrh	w9, [x0, #22]
    71ac:	sub	w5, w24, w8
    71b0:	sub	w5, w5, w7
    71b4:	add	w8, w7, w8
    71b8:	and	x7, x9, #0xffff
    71bc:	str	w8, [x27, #644]
    71c0:	lsl	w5, w4, w5
    71c4:	orr	w6, w5, w6
    71c8:	str	w6, [x27, #640]
    71cc:	cmp	w8, #0x7
    71d0:	ldrb	w7, [x2, x7]
    71d4:	ldr	w4, [x1, x9, lsl #2]
    71d8:	b.le	7218 <BZ2_compressBlock@@Base+0x2f68>
    71dc:	ldr	w9, [x27, #116]
    71e0:	ldr	x8, [x27, #80]
    71e4:	lsr	w5, w6, #24
    71e8:	strb	w5, [x8, w9, sxtw]
    71ec:	ldr	w5, [x27, #640]
    71f0:	ldr	w9, [x27, #116]
    71f4:	ldr	w8, [x27, #644]
    71f8:	lsl	w6, w5, #8
    71fc:	add	w9, w9, #0x1
    7200:	sub	w8, w8, #0x8
    7204:	str	w9, [x27, #116]
    7208:	str	w6, [x27, #640]
    720c:	cmp	w8, #0x7
    7210:	str	w8, [x27, #644]
    7214:	b.gt	71e0 <BZ2_compressBlock@@Base+0x2f30>
    7218:	ldrh	w9, [x0, #24]
    721c:	sub	w5, w24, w8
    7220:	sub	w5, w5, w7
    7224:	add	w8, w7, w8
    7228:	and	x7, x9, #0xffff
    722c:	str	w8, [x27, #644]
    7230:	lsl	w5, w4, w5
    7234:	orr	w5, w5, w6
    7238:	str	w5, [x27, #640]
    723c:	cmp	w8, #0x7
    7240:	ldrb	w7, [x2, x7]
    7244:	ldr	w4, [x1, x9, lsl #2]
    7248:	b.le	7288 <BZ2_compressBlock@@Base+0x2fd8>
    724c:	ldr	w6, [x27, #116]
    7250:	ldr	x8, [x27, #80]
    7254:	lsr	w5, w5, #24
    7258:	strb	w5, [x8, w6, sxtw]
    725c:	ldr	w5, [x27, #640]
    7260:	ldr	w6, [x27, #116]
    7264:	ldr	w8, [x27, #644]
    7268:	lsl	w5, w5, #8
    726c:	add	w6, w6, #0x1
    7270:	sub	w8, w8, #0x8
    7274:	str	w6, [x27, #116]
    7278:	str	w5, [x27, #640]
    727c:	cmp	w8, #0x7
    7280:	str	w8, [x27, #644]
    7284:	b.gt	7250 <BZ2_compressBlock@@Base+0x2fa0>
    7288:	ldrh	w9, [x0, #26]
    728c:	sub	w6, w24, w8
    7290:	sub	w6, w6, w7
    7294:	add	w8, w7, w8
    7298:	and	x7, x9, #0xffff
    729c:	str	w8, [x27, #644]
    72a0:	lsl	w6, w4, w6
    72a4:	orr	w5, w6, w5
    72a8:	str	w5, [x27, #640]
    72ac:	cmp	w8, #0x7
    72b0:	ldrb	w7, [x2, x7]
    72b4:	ldr	w4, [x1, x9, lsl #2]
    72b8:	b.le	72f8 <BZ2_compressBlock@@Base+0x3048>
    72bc:	ldr	w9, [x27, #116]
    72c0:	ldr	x8, [x27, #80]
    72c4:	lsr	w6, w5, #24
    72c8:	strb	w6, [x8, w9, sxtw]
    72cc:	ldr	w6, [x27, #640]
    72d0:	ldr	w9, [x27, #116]
    72d4:	ldr	w8, [x27, #644]
    72d8:	lsl	w5, w6, #8
    72dc:	add	w9, w9, #0x1
    72e0:	sub	w8, w8, #0x8
    72e4:	str	w9, [x27, #116]
    72e8:	str	w5, [x27, #640]
    72ec:	cmp	w8, #0x7
    72f0:	str	w8, [x27, #644]
    72f4:	b.gt	72c0 <BZ2_compressBlock@@Base+0x3010>
    72f8:	ldrh	w9, [x0, #28]
    72fc:	sub	w6, w24, w8
    7300:	sub	w6, w6, w7
    7304:	add	w8, w7, w8
    7308:	and	x7, x9, #0xffff
    730c:	str	w8, [x27, #644]
    7310:	lsl	w6, w4, w6
    7314:	orr	w6, w6, w5
    7318:	str	w6, [x27, #640]
    731c:	cmp	w8, #0x7
    7320:	ldrb	w7, [x2, x7]
    7324:	ldr	w4, [x1, x9, lsl #2]
    7328:	b.le	7368 <BZ2_compressBlock@@Base+0x30b8>
    732c:	ldr	w5, [x27, #116]
    7330:	ldr	x8, [x27, #80]
    7334:	lsr	w6, w6, #24
    7338:	strb	w6, [x8, w5, sxtw]
    733c:	ldr	w6, [x27, #640]
    7340:	ldr	w5, [x27, #116]
    7344:	ldr	w8, [x27, #644]
    7348:	lsl	w6, w6, #8
    734c:	add	w5, w5, #0x1
    7350:	sub	w8, w8, #0x8
    7354:	str	w5, [x27, #116]
    7358:	str	w6, [x27, #640]
    735c:	cmp	w8, #0x7
    7360:	str	w8, [x27, #644]
    7364:	b.gt	7330 <BZ2_compressBlock@@Base+0x3080>
    7368:	ldrh	w9, [x0, #30]
    736c:	sub	w5, w24, w8
    7370:	sub	w5, w5, w7
    7374:	add	w8, w7, w8
    7378:	and	x7, x9, #0xffff
    737c:	str	w8, [x27, #644]
    7380:	lsl	w5, w4, w5
    7384:	orr	w6, w5, w6
    7388:	str	w6, [x27, #640]
    738c:	cmp	w8, #0x7
    7390:	ldrb	w7, [x2, x7]
    7394:	ldr	w4, [x1, x9, lsl #2]
    7398:	b.le	73d8 <BZ2_compressBlock@@Base+0x3128>
    739c:	ldr	w9, [x27, #116]
    73a0:	ldr	x8, [x27, #80]
    73a4:	lsr	w5, w6, #24
    73a8:	strb	w5, [x8, w9, sxtw]
    73ac:	ldr	w5, [x27, #640]
    73b0:	ldr	w9, [x27, #116]
    73b4:	ldr	w8, [x27, #644]
    73b8:	lsl	w6, w5, #8
    73bc:	add	w9, w9, #0x1
    73c0:	sub	w8, w8, #0x8
    73c4:	str	w9, [x27, #116]
    73c8:	str	w6, [x27, #640]
    73cc:	cmp	w8, #0x7
    73d0:	str	w8, [x27, #644]
    73d4:	b.gt	73a0 <BZ2_compressBlock@@Base+0x30f0>
    73d8:	ldrh	w9, [x0, #32]
    73dc:	sub	w5, w24, w8
    73e0:	sub	w5, w5, w7
    73e4:	add	w8, w7, w8
    73e8:	and	x7, x9, #0xffff
    73ec:	str	w8, [x27, #644]
    73f0:	lsl	w5, w4, w5
    73f4:	orr	w5, w5, w6
    73f8:	str	w5, [x27, #640]
    73fc:	cmp	w8, #0x7
    7400:	ldrb	w7, [x2, x7]
    7404:	ldr	w4, [x1, x9, lsl #2]
    7408:	b.le	7448 <BZ2_compressBlock@@Base+0x3198>
    740c:	ldr	w6, [x27, #116]
    7410:	ldr	x8, [x27, #80]
    7414:	lsr	w5, w5, #24
    7418:	strb	w5, [x8, w6, sxtw]
    741c:	ldr	w5, [x27, #640]
    7420:	ldr	w6, [x27, #116]
    7424:	ldr	w8, [x27, #644]
    7428:	lsl	w5, w5, #8
    742c:	add	w6, w6, #0x1
    7430:	sub	w8, w8, #0x8
    7434:	str	w6, [x27, #116]
    7438:	str	w5, [x27, #640]
    743c:	cmp	w8, #0x7
    7440:	str	w8, [x27, #644]
    7444:	b.gt	7410 <BZ2_compressBlock@@Base+0x3160>
    7448:	ldrh	w9, [x0, #34]
    744c:	sub	w6, w24, w8
    7450:	sub	w6, w6, w7
    7454:	add	w8, w7, w8
    7458:	and	x7, x9, #0xffff
    745c:	str	w8, [x27, #644]
    7460:	lsl	w6, w4, w6
    7464:	orr	w5, w6, w5
    7468:	str	w5, [x27, #640]
    746c:	cmp	w8, #0x7
    7470:	ldrb	w7, [x2, x7]
    7474:	ldr	w4, [x1, x9, lsl #2]
    7478:	b.le	74b8 <BZ2_compressBlock@@Base+0x3208>
    747c:	ldr	w9, [x27, #116]
    7480:	ldr	x8, [x27, #80]
    7484:	lsr	w6, w5, #24
    7488:	strb	w6, [x8, w9, sxtw]
    748c:	ldr	w6, [x27, #640]
    7490:	ldr	w9, [x27, #116]
    7494:	ldr	w8, [x27, #644]
    7498:	lsl	w5, w6, #8
    749c:	add	w9, w9, #0x1
    74a0:	sub	w8, w8, #0x8
    74a4:	str	w9, [x27, #116]
    74a8:	str	w5, [x27, #640]
    74ac:	cmp	w8, #0x7
    74b0:	str	w8, [x27, #644]
    74b4:	b.gt	7480 <BZ2_compressBlock@@Base+0x31d0>
    74b8:	ldrh	w9, [x0, #36]
    74bc:	sub	w6, w24, w8
    74c0:	sub	w6, w6, w7
    74c4:	add	w8, w7, w8
    74c8:	and	x7, x9, #0xffff
    74cc:	str	w8, [x27, #644]
    74d0:	lsl	w6, w4, w6
    74d4:	orr	w6, w6, w5
    74d8:	str	w6, [x27, #640]
    74dc:	cmp	w8, #0x7
    74e0:	ldrb	w7, [x2, x7]
    74e4:	ldr	w4, [x1, x9, lsl #2]
    74e8:	b.le	7528 <BZ2_compressBlock@@Base+0x3278>
    74ec:	ldr	w5, [x27, #116]
    74f0:	ldr	x8, [x27, #80]
    74f4:	lsr	w6, w6, #24
    74f8:	strb	w6, [x8, w5, sxtw]
    74fc:	ldr	w6, [x27, #640]
    7500:	ldr	w5, [x27, #116]
    7504:	ldr	w8, [x27, #644]
    7508:	lsl	w6, w6, #8
    750c:	add	w5, w5, #0x1
    7510:	sub	w8, w8, #0x8
    7514:	str	w5, [x27, #116]
    7518:	str	w6, [x27, #640]
    751c:	cmp	w8, #0x7
    7520:	str	w8, [x27, #644]
    7524:	b.gt	74f0 <BZ2_compressBlock@@Base+0x3240>
    7528:	ldrh	w9, [x0, #38]
    752c:	sub	w5, w24, w8
    7530:	sub	w5, w5, w7
    7534:	add	w8, w7, w8
    7538:	and	x7, x9, #0xffff
    753c:	str	w8, [x27, #644]
    7540:	lsl	w5, w4, w5
    7544:	orr	w6, w5, w6
    7548:	str	w6, [x27, #640]
    754c:	cmp	w8, #0x7
    7550:	ldrb	w7, [x2, x7]
    7554:	ldr	w4, [x1, x9, lsl #2]
    7558:	b.le	7598 <BZ2_compressBlock@@Base+0x32e8>
    755c:	ldr	w9, [x27, #116]
    7560:	ldr	x8, [x27, #80]
    7564:	lsr	w5, w6, #24
    7568:	strb	w5, [x8, w9, sxtw]
    756c:	ldr	w5, [x27, #640]
    7570:	ldr	w9, [x27, #116]
    7574:	ldr	w8, [x27, #644]
    7578:	lsl	w6, w5, #8
    757c:	add	w9, w9, #0x1
    7580:	sub	w8, w8, #0x8
    7584:	str	w9, [x27, #116]
    7588:	str	w6, [x27, #640]
    758c:	cmp	w8, #0x7
    7590:	str	w8, [x27, #644]
    7594:	b.gt	7560 <BZ2_compressBlock@@Base+0x32b0>
    7598:	ldrh	w9, [x0, #40]
    759c:	sub	w5, w24, w8
    75a0:	sub	w5, w5, w7
    75a4:	add	w8, w7, w8
    75a8:	and	x7, x9, #0xffff
    75ac:	str	w8, [x27, #644]
    75b0:	lsl	w5, w4, w5
    75b4:	orr	w5, w5, w6
    75b8:	str	w5, [x27, #640]
    75bc:	cmp	w8, #0x7
    75c0:	ldrb	w7, [x2, x7]
    75c4:	ldr	w4, [x1, x9, lsl #2]
    75c8:	b.le	7608 <BZ2_compressBlock@@Base+0x3358>
    75cc:	ldr	w6, [x27, #116]
    75d0:	ldr	x8, [x27, #80]
    75d4:	lsr	w5, w5, #24
    75d8:	strb	w5, [x8, w6, sxtw]
    75dc:	ldr	w5, [x27, #640]
    75e0:	ldr	w6, [x27, #116]
    75e4:	ldr	w8, [x27, #644]
    75e8:	lsl	w5, w5, #8
    75ec:	add	w6, w6, #0x1
    75f0:	sub	w8, w8, #0x8
    75f4:	str	w6, [x27, #116]
    75f8:	str	w5, [x27, #640]
    75fc:	cmp	w8, #0x7
    7600:	str	w8, [x27, #644]
    7604:	b.gt	75d0 <BZ2_compressBlock@@Base+0x3320>
    7608:	ldrh	w9, [x0, #42]
    760c:	sub	w6, w24, w8
    7610:	sub	w6, w6, w7
    7614:	add	w8, w7, w8
    7618:	and	x7, x9, #0xffff
    761c:	str	w8, [x27, #644]
    7620:	lsl	w6, w4, w6
    7624:	orr	w5, w6, w5
    7628:	str	w5, [x27, #640]
    762c:	cmp	w8, #0x7
    7630:	ldrb	w7, [x2, x7]
    7634:	ldr	w4, [x1, x9, lsl #2]
    7638:	b.le	7678 <BZ2_compressBlock@@Base+0x33c8>
    763c:	ldr	w9, [x27, #116]
    7640:	ldr	x8, [x27, #80]
    7644:	lsr	w6, w5, #24
    7648:	strb	w6, [x8, w9, sxtw]
    764c:	ldr	w6, [x27, #640]
    7650:	ldr	w9, [x27, #116]
    7654:	ldr	w8, [x27, #644]
    7658:	lsl	w5, w6, #8
    765c:	add	w9, w9, #0x1
    7660:	sub	w8, w8, #0x8
    7664:	str	w9, [x27, #116]
    7668:	str	w5, [x27, #640]
    766c:	cmp	w8, #0x7
    7670:	str	w8, [x27, #644]
    7674:	b.gt	7640 <BZ2_compressBlock@@Base+0x3390>
    7678:	ldrh	w9, [x0, #44]
    767c:	sub	w6, w24, w8
    7680:	sub	w6, w6, w7
    7684:	add	w8, w7, w8
    7688:	and	x7, x9, #0xffff
    768c:	str	w8, [x27, #644]
    7690:	lsl	w6, w4, w6
    7694:	orr	w6, w6, w5
    7698:	str	w6, [x27, #640]
    769c:	cmp	w8, #0x7
    76a0:	ldrb	w7, [x2, x7]
    76a4:	ldr	w4, [x1, x9, lsl #2]
    76a8:	b.le	76e8 <BZ2_compressBlock@@Base+0x3438>
    76ac:	ldr	w5, [x27, #116]
    76b0:	ldr	x8, [x27, #80]
    76b4:	lsr	w6, w6, #24
    76b8:	strb	w6, [x8, w5, sxtw]
    76bc:	ldr	w6, [x27, #640]
    76c0:	ldr	w5, [x27, #116]
    76c4:	ldr	w8, [x27, #644]
    76c8:	lsl	w6, w6, #8
    76cc:	add	w5, w5, #0x1
    76d0:	sub	w8, w8, #0x8
    76d4:	str	w5, [x27, #116]
    76d8:	str	w6, [x27, #640]
    76dc:	cmp	w8, #0x7
    76e0:	str	w8, [x27, #644]
    76e4:	b.gt	76b0 <BZ2_compressBlock@@Base+0x3400>
    76e8:	ldrh	w9, [x0, #46]
    76ec:	sub	w5, w24, w8
    76f0:	sub	w5, w5, w7
    76f4:	add	w8, w7, w8
    76f8:	and	x7, x9, #0xffff
    76fc:	str	w8, [x27, #644]
    7700:	lsl	w5, w4, w5
    7704:	orr	w6, w5, w6
    7708:	str	w6, [x27, #640]
    770c:	cmp	w8, #0x7
    7710:	ldrb	w7, [x2, x7]
    7714:	ldr	w4, [x1, x9, lsl #2]
    7718:	b.le	7758 <BZ2_compressBlock@@Base+0x34a8>
    771c:	ldr	w9, [x27, #116]
    7720:	ldr	x8, [x27, #80]
    7724:	lsr	w5, w6, #24
    7728:	strb	w5, [x8, w9, sxtw]
    772c:	ldr	w5, [x27, #640]
    7730:	ldr	w9, [x27, #116]
    7734:	ldr	w8, [x27, #644]
    7738:	lsl	w6, w5, #8
    773c:	add	w9, w9, #0x1
    7740:	sub	w8, w8, #0x8
    7744:	str	w9, [x27, #116]
    7748:	str	w6, [x27, #640]
    774c:	cmp	w8, #0x7
    7750:	str	w8, [x27, #644]
    7754:	b.gt	7720 <BZ2_compressBlock@@Base+0x3470>
    7758:	ldrh	w9, [x0, #48]
    775c:	sub	w5, w24, w8
    7760:	sub	w5, w5, w7
    7764:	add	w8, w7, w8
    7768:	and	x7, x9, #0xffff
    776c:	str	w8, [x27, #644]
    7770:	lsl	w5, w4, w5
    7774:	orr	w5, w5, w6
    7778:	str	w5, [x27, #640]
    777c:	cmp	w8, #0x7
    7780:	ldrb	w7, [x2, x7]
    7784:	ldr	w4, [x1, x9, lsl #2]
    7788:	b.le	77c8 <BZ2_compressBlock@@Base+0x3518>
    778c:	ldr	w6, [x27, #116]
    7790:	ldr	x8, [x27, #80]
    7794:	lsr	w5, w5, #24
    7798:	strb	w5, [x8, w6, sxtw]
    779c:	ldr	w5, [x27, #640]
    77a0:	ldr	w6, [x27, #116]
    77a4:	ldr	w8, [x27, #644]
    77a8:	lsl	w5, w5, #8
    77ac:	add	w6, w6, #0x1
    77b0:	sub	w8, w8, #0x8
    77b4:	str	w6, [x27, #116]
    77b8:	str	w5, [x27, #640]
    77bc:	cmp	w8, #0x7
    77c0:	str	w8, [x27, #644]
    77c4:	b.gt	7790 <BZ2_compressBlock@@Base+0x34e0>
    77c8:	ldrh	w9, [x0, #50]
    77cc:	sub	w6, w24, w8
    77d0:	sub	w6, w6, w7
    77d4:	add	w8, w7, w8
    77d8:	and	x7, x9, #0xffff
    77dc:	str	w8, [x27, #644]
    77e0:	lsl	w6, w4, w6
    77e4:	orr	w5, w6, w5
    77e8:	str	w5, [x27, #640]
    77ec:	cmp	w8, #0x7
    77f0:	ldrb	w7, [x2, x7]
    77f4:	ldr	w4, [x1, x9, lsl #2]
    77f8:	b.le	7838 <BZ2_compressBlock@@Base+0x3588>
    77fc:	ldr	w9, [x27, #116]
    7800:	ldr	x8, [x27, #80]
    7804:	lsr	w6, w5, #24
    7808:	strb	w6, [x8, w9, sxtw]
    780c:	ldr	w6, [x27, #640]
    7810:	ldr	w9, [x27, #116]
    7814:	ldr	w8, [x27, #644]
    7818:	lsl	w5, w6, #8
    781c:	add	w9, w9, #0x1
    7820:	sub	w8, w8, #0x8
    7824:	str	w9, [x27, #116]
    7828:	str	w5, [x27, #640]
    782c:	cmp	w8, #0x7
    7830:	str	w8, [x27, #644]
    7834:	b.gt	7800 <BZ2_compressBlock@@Base+0x3550>
    7838:	ldrh	w9, [x0, #52]
    783c:	sub	w6, w24, w8
    7840:	sub	w6, w6, w7
    7844:	add	w8, w7, w8
    7848:	and	x7, x9, #0xffff
    784c:	str	w8, [x27, #644]
    7850:	lsl	w6, w4, w6
    7854:	orr	w6, w6, w5
    7858:	str	w6, [x27, #640]
    785c:	cmp	w8, #0x7
    7860:	ldrb	w7, [x2, x7]
    7864:	ldr	w4, [x1, x9, lsl #2]
    7868:	b.le	78a8 <BZ2_compressBlock@@Base+0x35f8>
    786c:	ldr	w5, [x27, #116]
    7870:	ldr	x8, [x27, #80]
    7874:	lsr	w6, w6, #24
    7878:	strb	w6, [x8, w5, sxtw]
    787c:	ldr	w6, [x27, #640]
    7880:	ldr	w5, [x27, #116]
    7884:	ldr	w8, [x27, #644]
    7888:	lsl	w6, w6, #8
    788c:	add	w5, w5, #0x1
    7890:	sub	w8, w8, #0x8
    7894:	str	w5, [x27, #116]
    7898:	str	w6, [x27, #640]
    789c:	cmp	w8, #0x7
    78a0:	str	w8, [x27, #644]
    78a4:	b.gt	7870 <BZ2_compressBlock@@Base+0x35c0>
    78a8:	ldrh	w9, [x0, #54]
    78ac:	sub	w5, w24, w8
    78b0:	sub	w5, w5, w7
    78b4:	add	w8, w7, w8
    78b8:	and	x7, x9, #0xffff
    78bc:	str	w8, [x27, #644]
    78c0:	lsl	w5, w4, w5
    78c4:	orr	w6, w5, w6
    78c8:	str	w6, [x27, #640]
    78cc:	cmp	w8, #0x7
    78d0:	ldrb	w7, [x2, x7]
    78d4:	ldr	w4, [x1, x9, lsl #2]
    78d8:	b.le	7918 <BZ2_compressBlock@@Base+0x3668>
    78dc:	ldr	w9, [x27, #116]
    78e0:	ldr	x8, [x27, #80]
    78e4:	lsr	w5, w6, #24
    78e8:	strb	w5, [x8, w9, sxtw]
    78ec:	ldr	w5, [x27, #640]
    78f0:	ldr	w9, [x27, #116]
    78f4:	ldr	w8, [x27, #644]
    78f8:	lsl	w6, w5, #8
    78fc:	add	w9, w9, #0x1
    7900:	sub	w8, w8, #0x8
    7904:	str	w9, [x27, #116]
    7908:	str	w6, [x27, #640]
    790c:	cmp	w8, #0x7
    7910:	str	w8, [x27, #644]
    7914:	b.gt	78e0 <BZ2_compressBlock@@Base+0x3630>
    7918:	ldrh	w9, [x0, #56]
    791c:	sub	w5, w24, w8
    7920:	sub	w5, w5, w7
    7924:	add	w8, w7, w8
    7928:	and	x7, x9, #0xffff
    792c:	str	w8, [x27, #644]
    7930:	lsl	w5, w4, w5
    7934:	orr	w5, w5, w6
    7938:	str	w5, [x27, #640]
    793c:	cmp	w8, #0x7
    7940:	ldrb	w7, [x2, x7]
    7944:	ldr	w4, [x1, x9, lsl #2]
    7948:	b.le	7988 <BZ2_compressBlock@@Base+0x36d8>
    794c:	ldr	w6, [x27, #116]
    7950:	ldr	x8, [x27, #80]
    7954:	lsr	w5, w5, #24
    7958:	strb	w5, [x8, w6, sxtw]
    795c:	ldr	w5, [x27, #640]
    7960:	ldr	w6, [x27, #116]
    7964:	ldr	w8, [x27, #644]
    7968:	lsl	w5, w5, #8
    796c:	add	w6, w6, #0x1
    7970:	sub	w8, w8, #0x8
    7974:	str	w6, [x27, #116]
    7978:	str	w5, [x27, #640]
    797c:	cmp	w8, #0x7
    7980:	str	w8, [x27, #644]
    7984:	b.gt	7950 <BZ2_compressBlock@@Base+0x36a0>
    7988:	ldrh	w9, [x0, #58]
    798c:	sub	w6, w24, w8
    7990:	sub	w6, w6, w7
    7994:	add	w8, w7, w8
    7998:	and	x7, x9, #0xffff
    799c:	str	w8, [x27, #644]
    79a0:	lsl	w6, w4, w6
    79a4:	orr	w5, w6, w5
    79a8:	str	w5, [x27, #640]
    79ac:	cmp	w8, #0x7
    79b0:	ldrb	w7, [x2, x7]
    79b4:	ldr	w4, [x1, x9, lsl #2]
    79b8:	b.le	79f8 <BZ2_compressBlock@@Base+0x3748>
    79bc:	ldr	w9, [x27, #116]
    79c0:	ldr	x8, [x27, #80]
    79c4:	lsr	w6, w5, #24
    79c8:	strb	w6, [x8, w9, sxtw]
    79cc:	ldr	w6, [x27, #640]
    79d0:	ldr	w9, [x27, #116]
    79d4:	ldr	w8, [x27, #644]
    79d8:	lsl	w5, w6, #8
    79dc:	add	w9, w9, #0x1
    79e0:	sub	w8, w8, #0x8
    79e4:	str	w9, [x27, #116]
    79e8:	str	w5, [x27, #640]
    79ec:	cmp	w8, #0x7
    79f0:	str	w8, [x27, #644]
    79f4:	b.gt	79c0 <BZ2_compressBlock@@Base+0x3710>
    79f8:	ldrh	w9, [x0, #60]
    79fc:	sub	w6, w24, w8
    7a00:	sub	w6, w6, w7
    7a04:	add	w8, w7, w8
    7a08:	and	x7, x9, #0xffff
    7a0c:	str	w8, [x27, #644]
    7a10:	lsl	w6, w4, w6
    7a14:	orr	w6, w6, w5
    7a18:	str	w6, [x27, #640]
    7a1c:	cmp	w8, #0x7
    7a20:	ldrb	w7, [x2, x7]
    7a24:	ldr	w4, [x1, x9, lsl #2]
    7a28:	b.le	7a68 <BZ2_compressBlock@@Base+0x37b8>
    7a2c:	ldr	w5, [x27, #116]
    7a30:	ldr	x8, [x27, #80]
    7a34:	lsr	w6, w6, #24
    7a38:	strb	w6, [x8, w5, sxtw]
    7a3c:	ldr	w6, [x27, #640]
    7a40:	ldr	w5, [x27, #116]
    7a44:	ldr	w8, [x27, #644]
    7a48:	lsl	w6, w6, #8
    7a4c:	add	w5, w5, #0x1
    7a50:	sub	w8, w8, #0x8
    7a54:	str	w5, [x27, #116]
    7a58:	str	w6, [x27, #640]
    7a5c:	cmp	w8, #0x7
    7a60:	str	w8, [x27, #644]
    7a64:	b.gt	7a30 <BZ2_compressBlock@@Base+0x3780>
    7a68:	ldrh	w9, [x0, #62]
    7a6c:	sub	w5, w24, w8
    7a70:	sub	w5, w5, w7
    7a74:	add	w8, w7, w8
    7a78:	and	x7, x9, #0xffff
    7a7c:	str	w8, [x27, #644]
    7a80:	lsl	w5, w4, w5
    7a84:	orr	w6, w5, w6
    7a88:	str	w6, [x27, #640]
    7a8c:	cmp	w8, #0x7
    7a90:	ldrb	w7, [x2, x7]
    7a94:	ldr	w4, [x1, x9, lsl #2]
    7a98:	b.le	7ad8 <BZ2_compressBlock@@Base+0x3828>
    7a9c:	ldr	w9, [x27, #116]
    7aa0:	ldr	x8, [x27, #80]
    7aa4:	lsr	w5, w6, #24
    7aa8:	strb	w5, [x8, w9, sxtw]
    7aac:	ldr	w5, [x27, #640]
    7ab0:	ldr	w9, [x27, #116]
    7ab4:	ldr	w8, [x27, #644]
    7ab8:	lsl	w6, w5, #8
    7abc:	add	w9, w9, #0x1
    7ac0:	sub	w8, w8, #0x8
    7ac4:	str	w9, [x27, #116]
    7ac8:	str	w6, [x27, #640]
    7acc:	cmp	w8, #0x7
    7ad0:	str	w8, [x27, #644]
    7ad4:	b.gt	7aa0 <BZ2_compressBlock@@Base+0x37f0>
    7ad8:	ldrh	w9, [x0, #64]
    7adc:	sub	w5, w24, w8
    7ae0:	sub	w5, w5, w7
    7ae4:	add	w8, w7, w8
    7ae8:	and	x7, x9, #0xffff
    7aec:	str	w8, [x27, #644]
    7af0:	lsl	w5, w4, w5
    7af4:	orr	w5, w5, w6
    7af8:	str	w5, [x27, #640]
    7afc:	cmp	w8, #0x7
    7b00:	ldrb	w7, [x2, x7]
    7b04:	ldr	w4, [x1, x9, lsl #2]
    7b08:	b.le	7b48 <BZ2_compressBlock@@Base+0x3898>
    7b0c:	ldr	w6, [x27, #116]
    7b10:	ldr	x8, [x27, #80]
    7b14:	lsr	w5, w5, #24
    7b18:	strb	w5, [x8, w6, sxtw]
    7b1c:	ldr	w5, [x27, #640]
    7b20:	ldr	w6, [x27, #116]
    7b24:	ldr	w8, [x27, #644]
    7b28:	lsl	w5, w5, #8
    7b2c:	add	w6, w6, #0x1
    7b30:	sub	w8, w8, #0x8
    7b34:	str	w6, [x27, #116]
    7b38:	str	w5, [x27, #640]
    7b3c:	cmp	w8, #0x7
    7b40:	str	w8, [x27, #644]
    7b44:	b.gt	7b10 <BZ2_compressBlock@@Base+0x3860>
    7b48:	ldrh	w9, [x0, #66]
    7b4c:	sub	w6, w24, w8
    7b50:	sub	w6, w6, w7
    7b54:	add	w8, w7, w8
    7b58:	and	x7, x9, #0xffff
    7b5c:	str	w8, [x27, #644]
    7b60:	lsl	w6, w4, w6
    7b64:	orr	w5, w6, w5
    7b68:	str	w5, [x27, #640]
    7b6c:	cmp	w8, #0x7
    7b70:	ldrb	w7, [x2, x7]
    7b74:	ldr	w4, [x1, x9, lsl #2]
    7b78:	b.le	7bb8 <BZ2_compressBlock@@Base+0x3908>
    7b7c:	ldr	w9, [x27, #116]
    7b80:	ldr	x8, [x27, #80]
    7b84:	lsr	w6, w5, #24
    7b88:	strb	w6, [x8, w9, sxtw]
    7b8c:	ldr	w6, [x27, #640]
    7b90:	ldr	w9, [x27, #116]
    7b94:	ldr	w8, [x27, #644]
    7b98:	lsl	w5, w6, #8
    7b9c:	add	w9, w9, #0x1
    7ba0:	sub	w8, w8, #0x8
    7ba4:	str	w9, [x27, #116]
    7ba8:	str	w5, [x27, #640]
    7bac:	cmp	w8, #0x7
    7bb0:	str	w8, [x27, #644]
    7bb4:	b.gt	7b80 <BZ2_compressBlock@@Base+0x38d0>
    7bb8:	ldrh	w9, [x0, #68]
    7bbc:	sub	w6, w24, w8
    7bc0:	sub	w6, w6, w7
    7bc4:	add	w8, w7, w8
    7bc8:	and	x7, x9, #0xffff
    7bcc:	str	w8, [x27, #644]
    7bd0:	lsl	w6, w4, w6
    7bd4:	orr	w6, w6, w5
    7bd8:	str	w6, [x27, #640]
    7bdc:	cmp	w8, #0x7
    7be0:	ldrb	w7, [x2, x7]
    7be4:	ldr	w4, [x1, x9, lsl #2]
    7be8:	b.le	7c28 <BZ2_compressBlock@@Base+0x3978>
    7bec:	ldr	w5, [x27, #116]
    7bf0:	ldr	x8, [x27, #80]
    7bf4:	lsr	w6, w6, #24
    7bf8:	strb	w6, [x8, w5, sxtw]
    7bfc:	ldr	w6, [x27, #640]
    7c00:	ldr	w5, [x27, #116]
    7c04:	ldr	w8, [x27, #644]
    7c08:	lsl	w6, w6, #8
    7c0c:	add	w5, w5, #0x1
    7c10:	sub	w8, w8, #0x8
    7c14:	str	w5, [x27, #116]
    7c18:	str	w6, [x27, #640]
    7c1c:	cmp	w8, #0x7
    7c20:	str	w8, [x27, #644]
    7c24:	b.gt	7bf0 <BZ2_compressBlock@@Base+0x3940>
    7c28:	ldrh	w9, [x0, #70]
    7c2c:	sub	w5, w24, w8
    7c30:	sub	w5, w5, w7
    7c34:	add	w8, w7, w8
    7c38:	and	x7, x9, #0xffff
    7c3c:	str	w8, [x27, #644]
    7c40:	lsl	w5, w4, w5
    7c44:	orr	w6, w5, w6
    7c48:	str	w6, [x27, #640]
    7c4c:	cmp	w8, #0x7
    7c50:	ldrb	w7, [x2, x7]
    7c54:	ldr	w4, [x1, x9, lsl #2]
    7c58:	b.le	7c98 <BZ2_compressBlock@@Base+0x39e8>
    7c5c:	ldr	w9, [x27, #116]
    7c60:	ldr	x8, [x27, #80]
    7c64:	lsr	w5, w6, #24
    7c68:	strb	w5, [x8, w9, sxtw]
    7c6c:	ldr	w5, [x27, #640]
    7c70:	ldr	w9, [x27, #116]
    7c74:	ldr	w8, [x27, #644]
    7c78:	lsl	w6, w5, #8
    7c7c:	add	w9, w9, #0x1
    7c80:	sub	w8, w8, #0x8
    7c84:	str	w9, [x27, #116]
    7c88:	str	w6, [x27, #640]
    7c8c:	cmp	w8, #0x7
    7c90:	str	w8, [x27, #644]
    7c94:	b.gt	7c60 <BZ2_compressBlock@@Base+0x39b0>
    7c98:	ldrh	w9, [x0, #72]
    7c9c:	sub	w5, w24, w8
    7ca0:	sub	w5, w5, w7
    7ca4:	add	w8, w7, w8
    7ca8:	and	x7, x9, #0xffff
    7cac:	str	w8, [x27, #644]
    7cb0:	lsl	w5, w4, w5
    7cb4:	orr	w5, w5, w6
    7cb8:	str	w5, [x27, #640]
    7cbc:	cmp	w8, #0x7
    7cc0:	ldrb	w7, [x2, x7]
    7cc4:	ldr	w4, [x1, x9, lsl #2]
    7cc8:	b.le	7d08 <BZ2_compressBlock@@Base+0x3a58>
    7ccc:	ldr	w6, [x27, #116]
    7cd0:	ldr	x8, [x27, #80]
    7cd4:	lsr	w5, w5, #24
    7cd8:	strb	w5, [x8, w6, sxtw]
    7cdc:	ldr	w5, [x27, #640]
    7ce0:	ldr	w6, [x27, #116]
    7ce4:	ldr	w8, [x27, #644]
    7ce8:	lsl	w5, w5, #8
    7cec:	add	w6, w6, #0x1
    7cf0:	sub	w8, w8, #0x8
    7cf4:	str	w6, [x27, #116]
    7cf8:	str	w5, [x27, #640]
    7cfc:	cmp	w8, #0x7
    7d00:	str	w8, [x27, #644]
    7d04:	b.gt	7cd0 <BZ2_compressBlock@@Base+0x3a20>
    7d08:	ldrh	w9, [x0, #74]
    7d0c:	sub	w6, w24, w8
    7d10:	sub	w6, w6, w7
    7d14:	add	w8, w7, w8
    7d18:	and	x7, x9, #0xffff
    7d1c:	str	w8, [x27, #644]
    7d20:	lsl	w6, w4, w6
    7d24:	orr	w5, w6, w5
    7d28:	str	w5, [x27, #640]
    7d2c:	cmp	w8, #0x7
    7d30:	ldrb	w7, [x2, x7]
    7d34:	ldr	w4, [x1, x9, lsl #2]
    7d38:	b.le	7d78 <BZ2_compressBlock@@Base+0x3ac8>
    7d3c:	ldr	w9, [x27, #116]
    7d40:	ldr	x8, [x27, #80]
    7d44:	lsr	w6, w5, #24
    7d48:	strb	w6, [x8, w9, sxtw]
    7d4c:	ldr	w6, [x27, #640]
    7d50:	ldr	w9, [x27, #116]
    7d54:	ldr	w8, [x27, #644]
    7d58:	lsl	w5, w6, #8
    7d5c:	add	w9, w9, #0x1
    7d60:	sub	w8, w8, #0x8
    7d64:	str	w9, [x27, #116]
    7d68:	str	w5, [x27, #640]
    7d6c:	cmp	w8, #0x7
    7d70:	str	w8, [x27, #644]
    7d74:	b.gt	7d40 <BZ2_compressBlock@@Base+0x3a90>
    7d78:	ldrh	w9, [x0, #76]
    7d7c:	sub	w6, w24, w8
    7d80:	sub	w6, w6, w7
    7d84:	add	w8, w7, w8
    7d88:	and	x7, x9, #0xffff
    7d8c:	str	w8, [x27, #644]
    7d90:	lsl	w6, w4, w6
    7d94:	orr	w6, w6, w5
    7d98:	str	w6, [x27, #640]
    7d9c:	cmp	w8, #0x7
    7da0:	ldrb	w7, [x2, x7]
    7da4:	ldr	w4, [x1, x9, lsl #2]
    7da8:	b.le	7de8 <BZ2_compressBlock@@Base+0x3b38>
    7dac:	ldr	w5, [x27, #116]
    7db0:	ldr	x8, [x27, #80]
    7db4:	lsr	w6, w6, #24
    7db8:	strb	w6, [x8, w5, sxtw]
    7dbc:	ldr	w6, [x27, #640]
    7dc0:	ldr	w5, [x27, #116]
    7dc4:	ldr	w8, [x27, #644]
    7dc8:	lsl	w6, w6, #8
    7dcc:	add	w5, w5, #0x1
    7dd0:	sub	w8, w8, #0x8
    7dd4:	str	w5, [x27, #116]
    7dd8:	str	w6, [x27, #640]
    7ddc:	cmp	w8, #0x7
    7de0:	str	w8, [x27, #644]
    7de4:	b.gt	7db0 <BZ2_compressBlock@@Base+0x3b00>
    7de8:	ldrh	w9, [x0, #78]
    7dec:	sub	w5, w24, w8
    7df0:	sub	w5, w5, w7
    7df4:	add	w8, w7, w8
    7df8:	and	x7, x9, #0xffff
    7dfc:	str	w8, [x27, #644]
    7e00:	lsl	w5, w4, w5
    7e04:	orr	w6, w5, w6
    7e08:	str	w6, [x27, #640]
    7e0c:	cmp	w8, #0x7
    7e10:	ldrb	w7, [x2, x7]
    7e14:	ldr	w4, [x1, x9, lsl #2]
    7e18:	b.le	7e58 <BZ2_compressBlock@@Base+0x3ba8>
    7e1c:	ldr	w9, [x27, #116]
    7e20:	ldr	x8, [x27, #80]
    7e24:	lsr	w5, w6, #24
    7e28:	strb	w5, [x8, w9, sxtw]
    7e2c:	ldr	w5, [x27, #640]
    7e30:	ldr	w9, [x27, #116]
    7e34:	ldr	w8, [x27, #644]
    7e38:	lsl	w6, w5, #8
    7e3c:	add	w9, w9, #0x1
    7e40:	sub	w8, w8, #0x8
    7e44:	str	w9, [x27, #116]
    7e48:	str	w6, [x27, #640]
    7e4c:	cmp	w8, #0x7
    7e50:	str	w8, [x27, #644]
    7e54:	b.gt	7e20 <BZ2_compressBlock@@Base+0x3b70>
    7e58:	ldrh	w9, [x0, #80]
    7e5c:	sub	w5, w24, w8
    7e60:	sub	w5, w5, w7
    7e64:	add	w8, w7, w8
    7e68:	and	x7, x9, #0xffff
    7e6c:	str	w8, [x27, #644]
    7e70:	lsl	w5, w4, w5
    7e74:	orr	w5, w5, w6
    7e78:	str	w5, [x27, #640]
    7e7c:	cmp	w8, #0x7
    7e80:	ldrb	w7, [x2, x7]
    7e84:	ldr	w4, [x1, x9, lsl #2]
    7e88:	b.le	7ec8 <BZ2_compressBlock@@Base+0x3c18>
    7e8c:	ldr	w6, [x27, #116]
    7e90:	ldr	x8, [x27, #80]
    7e94:	lsr	w5, w5, #24
    7e98:	strb	w5, [x8, w6, sxtw]
    7e9c:	ldr	w5, [x27, #640]
    7ea0:	ldr	w6, [x27, #116]
    7ea4:	ldr	w8, [x27, #644]
    7ea8:	lsl	w5, w5, #8
    7eac:	add	w6, w6, #0x1
    7eb0:	sub	w8, w8, #0x8
    7eb4:	str	w6, [x27, #116]
    7eb8:	str	w5, [x27, #640]
    7ebc:	cmp	w8, #0x7
    7ec0:	str	w8, [x27, #644]
    7ec4:	b.gt	7e90 <BZ2_compressBlock@@Base+0x3be0>
    7ec8:	ldrh	w9, [x0, #82]
    7ecc:	sub	w6, w24, w8
    7ed0:	sub	w6, w6, w7
    7ed4:	add	w8, w7, w8
    7ed8:	and	x7, x9, #0xffff
    7edc:	str	w8, [x27, #644]
    7ee0:	lsl	w6, w4, w6
    7ee4:	orr	w5, w6, w5
    7ee8:	str	w5, [x27, #640]
    7eec:	cmp	w8, #0x7
    7ef0:	ldrb	w7, [x2, x7]
    7ef4:	ldr	w4, [x1, x9, lsl #2]
    7ef8:	b.le	7f38 <BZ2_compressBlock@@Base+0x3c88>
    7efc:	ldr	w9, [x27, #116]
    7f00:	ldr	x8, [x27, #80]
    7f04:	lsr	w6, w5, #24
    7f08:	strb	w6, [x8, w9, sxtw]
    7f0c:	ldr	w6, [x27, #640]
    7f10:	ldr	w9, [x27, #116]
    7f14:	ldr	w8, [x27, #644]
    7f18:	lsl	w5, w6, #8
    7f1c:	add	w9, w9, #0x1
    7f20:	sub	w8, w8, #0x8
    7f24:	str	w9, [x27, #116]
    7f28:	str	w5, [x27, #640]
    7f2c:	cmp	w8, #0x7
    7f30:	str	w8, [x27, #644]
    7f34:	b.gt	7f00 <BZ2_compressBlock@@Base+0x3c50>
    7f38:	ldrh	w9, [x0, #84]
    7f3c:	sub	w6, w24, w8
    7f40:	sub	w6, w6, w7
    7f44:	add	w8, w7, w8
    7f48:	and	x7, x9, #0xffff
    7f4c:	str	w8, [x27, #644]
    7f50:	lsl	w6, w4, w6
    7f54:	orr	w6, w6, w5
    7f58:	str	w6, [x27, #640]
    7f5c:	cmp	w8, #0x7
    7f60:	ldrb	w7, [x2, x7]
    7f64:	ldr	w4, [x1, x9, lsl #2]
    7f68:	b.le	7fa8 <BZ2_compressBlock@@Base+0x3cf8>
    7f6c:	ldr	w5, [x27, #116]
    7f70:	ldr	x8, [x27, #80]
    7f74:	lsr	w6, w6, #24
    7f78:	strb	w6, [x8, w5, sxtw]
    7f7c:	ldr	w6, [x27, #640]
    7f80:	ldr	w5, [x27, #116]
    7f84:	ldr	w8, [x27, #644]
    7f88:	lsl	w6, w6, #8
    7f8c:	add	w5, w5, #0x1
    7f90:	sub	w8, w8, #0x8
    7f94:	str	w5, [x27, #116]
    7f98:	str	w6, [x27, #640]
    7f9c:	cmp	w8, #0x7
    7fa0:	str	w8, [x27, #644]
    7fa4:	b.gt	7f70 <BZ2_compressBlock@@Base+0x3cc0>
    7fa8:	ldrh	w9, [x0, #86]
    7fac:	sub	w5, w24, w8
    7fb0:	sub	w5, w5, w7
    7fb4:	add	w8, w7, w8
    7fb8:	and	x7, x9, #0xffff
    7fbc:	str	w8, [x27, #644]
    7fc0:	lsl	w5, w4, w5
    7fc4:	orr	w6, w5, w6
    7fc8:	str	w6, [x27, #640]
    7fcc:	cmp	w8, #0x7
    7fd0:	ldrb	w7, [x2, x7]
    7fd4:	ldr	w4, [x1, x9, lsl #2]
    7fd8:	b.le	8018 <BZ2_compressBlock@@Base+0x3d68>
    7fdc:	ldr	w9, [x27, #116]
    7fe0:	ldr	x8, [x27, #80]
    7fe4:	lsr	w5, w6, #24
    7fe8:	strb	w5, [x8, w9, sxtw]
    7fec:	ldr	w5, [x27, #640]
    7ff0:	ldr	w9, [x27, #116]
    7ff4:	ldr	w8, [x27, #644]
    7ff8:	lsl	w6, w5, #8
    7ffc:	add	w9, w9, #0x1
    8000:	sub	w8, w8, #0x8
    8004:	str	w9, [x27, #116]
    8008:	str	w6, [x27, #640]
    800c:	cmp	w8, #0x7
    8010:	str	w8, [x27, #644]
    8014:	b.gt	7fe0 <BZ2_compressBlock@@Base+0x3d30>
    8018:	ldrh	w9, [x0, #88]
    801c:	sub	w5, w24, w8
    8020:	sub	w5, w5, w7
    8024:	add	w8, w7, w8
    8028:	and	x7, x9, #0xffff
    802c:	str	w8, [x27, #644]
    8030:	lsl	w5, w4, w5
    8034:	orr	w5, w5, w6
    8038:	str	w5, [x27, #640]
    803c:	cmp	w8, #0x7
    8040:	ldrb	w7, [x2, x7]
    8044:	ldr	w4, [x1, x9, lsl #2]
    8048:	b.le	8088 <BZ2_compressBlock@@Base+0x3dd8>
    804c:	ldr	w6, [x27, #116]
    8050:	ldr	x8, [x27, #80]
    8054:	lsr	w5, w5, #24
    8058:	strb	w5, [x8, w6, sxtw]
    805c:	ldr	w5, [x27, #640]
    8060:	ldr	w6, [x27, #116]
    8064:	ldr	w8, [x27, #644]
    8068:	lsl	w5, w5, #8
    806c:	add	w6, w6, #0x1
    8070:	sub	w8, w8, #0x8
    8074:	str	w6, [x27, #116]
    8078:	str	w5, [x27, #640]
    807c:	cmp	w8, #0x7
    8080:	str	w8, [x27, #644]
    8084:	b.gt	8050 <BZ2_compressBlock@@Base+0x3da0>
    8088:	ldrh	w9, [x0, #90]
    808c:	sub	w6, w24, w8
    8090:	sub	w6, w6, w7
    8094:	add	w8, w7, w8
    8098:	and	x7, x9, #0xffff
    809c:	str	w8, [x27, #644]
    80a0:	lsl	w6, w4, w6
    80a4:	orr	w5, w6, w5
    80a8:	str	w5, [x27, #640]
    80ac:	cmp	w8, #0x7
    80b0:	ldrb	w7, [x2, x7]
    80b4:	ldr	w4, [x1, x9, lsl #2]
    80b8:	b.le	80f8 <BZ2_compressBlock@@Base+0x3e48>
    80bc:	ldr	w9, [x27, #116]
    80c0:	ldr	x8, [x27, #80]
    80c4:	lsr	w6, w5, #24
    80c8:	strb	w6, [x8, w9, sxtw]
    80cc:	ldr	w6, [x27, #640]
    80d0:	ldr	w9, [x27, #116]
    80d4:	ldr	w8, [x27, #644]
    80d8:	lsl	w5, w6, #8
    80dc:	add	w9, w9, #0x1
    80e0:	sub	w8, w8, #0x8
    80e4:	str	w9, [x27, #116]
    80e8:	str	w5, [x27, #640]
    80ec:	cmp	w8, #0x7
    80f0:	str	w8, [x27, #644]
    80f4:	b.gt	80c0 <BZ2_compressBlock@@Base+0x3e10>
    80f8:	ldrh	w9, [x0, #92]
    80fc:	sub	w6, w24, w8
    8100:	sub	w6, w6, w7
    8104:	add	w8, w7, w8
    8108:	and	x7, x9, #0xffff
    810c:	str	w8, [x27, #644]
    8110:	lsl	w6, w4, w6
    8114:	orr	w6, w6, w5
    8118:	str	w6, [x27, #640]
    811c:	cmp	w8, #0x7
    8120:	ldrb	w7, [x2, x7]
    8124:	ldr	w4, [x1, x9, lsl #2]
    8128:	b.le	8168 <BZ2_compressBlock@@Base+0x3eb8>
    812c:	ldr	w5, [x27, #116]
    8130:	ldr	x8, [x27, #80]
    8134:	lsr	w6, w6, #24
    8138:	strb	w6, [x8, w5, sxtw]
    813c:	ldr	w6, [x27, #640]
    8140:	ldr	w5, [x27, #116]
    8144:	ldr	w8, [x27, #644]
    8148:	lsl	w6, w6, #8
    814c:	add	w5, w5, #0x1
    8150:	sub	w8, w8, #0x8
    8154:	str	w5, [x27, #116]
    8158:	str	w6, [x27, #640]
    815c:	cmp	w8, #0x7
    8160:	str	w8, [x27, #644]
    8164:	b.gt	8130 <BZ2_compressBlock@@Base+0x3e80>
    8168:	ldrh	w9, [x0, #94]
    816c:	sub	w5, w24, w8
    8170:	sub	w5, w5, w7
    8174:	add	w8, w7, w8
    8178:	and	x7, x9, #0xffff
    817c:	str	w8, [x27, #644]
    8180:	lsl	w5, w4, w5
    8184:	orr	w6, w5, w6
    8188:	str	w6, [x27, #640]
    818c:	cmp	w8, #0x7
    8190:	ldrb	w7, [x2, x7]
    8194:	ldr	w4, [x1, x9, lsl #2]
    8198:	b.le	81d8 <BZ2_compressBlock@@Base+0x3f28>
    819c:	ldr	w9, [x27, #116]
    81a0:	ldr	x8, [x27, #80]
    81a4:	lsr	w5, w6, #24
    81a8:	strb	w5, [x8, w9, sxtw]
    81ac:	ldr	w5, [x27, #640]
    81b0:	ldr	w9, [x27, #116]
    81b4:	ldr	w8, [x27, #644]
    81b8:	lsl	w6, w5, #8
    81bc:	add	w9, w9, #0x1
    81c0:	sub	w8, w8, #0x8
    81c4:	str	w9, [x27, #116]
    81c8:	str	w6, [x27, #640]
    81cc:	cmp	w8, #0x7
    81d0:	str	w8, [x27, #644]
    81d4:	b.gt	81a0 <BZ2_compressBlock@@Base+0x3ef0>
    81d8:	ldrh	w9, [x0, #96]
    81dc:	sub	w5, w24, w8
    81e0:	sub	w5, w5, w7
    81e4:	add	w8, w7, w8
    81e8:	and	x7, x9, #0xffff
    81ec:	str	w8, [x27, #644]
    81f0:	lsl	w5, w4, w5
    81f4:	orr	w5, w5, w6
    81f8:	str	w5, [x27, #640]
    81fc:	cmp	w8, #0x7
    8200:	ldrb	w7, [x2, x7]
    8204:	ldr	w4, [x1, x9, lsl #2]
    8208:	b.le	8248 <BZ2_compressBlock@@Base+0x3f98>
    820c:	ldr	w9, [x27, #116]
    8210:	ldr	x6, [x27, #80]
    8214:	lsr	w5, w5, #24
    8218:	strb	w5, [x6, w9, sxtw]
    821c:	ldr	w5, [x27, #640]
    8220:	ldr	w9, [x27, #116]
    8224:	ldr	w6, [x27, #644]
    8228:	lsl	w5, w5, #8
    822c:	add	w9, w9, #0x1
    8230:	sub	w8, w6, #0x8
    8234:	str	w9, [x27, #116]
    8238:	str	w5, [x27, #640]
    823c:	cmp	w8, #0x7
    8240:	str	w8, [x27, #644]
    8244:	b.gt	8210 <BZ2_compressBlock@@Base+0x3f60>
    8248:	ldrh	w9, [x0, #98]
    824c:	sub	w0, w24, w8
    8250:	sub	w0, w0, w7
    8254:	add	w6, w7, w8
    8258:	and	x7, x9, #0xffff
    825c:	str	w6, [x27, #644]
    8260:	lsl	w0, w4, w0
    8264:	orr	w0, w0, w5
    8268:	str	w0, [x27, #640]
    826c:	cmp	w6, #0x7
    8270:	ldrb	w5, [x2, x7]
    8274:	ldr	w4, [x1, x9, lsl #2]
    8278:	b.le	82b8 <BZ2_compressBlock@@Base+0x4008>
    827c:	ldr	w1, [x27, #116]
    8280:	ldr	x2, [x27, #80]
    8284:	lsr	w0, w0, #24
    8288:	strb	w0, [x2, w1, sxtw]
    828c:	ldr	w0, [x27, #640]
    8290:	ldr	w1, [x27, #116]
    8294:	ldr	w6, [x27, #644]
    8298:	lsl	w0, w0, #8
    829c:	add	w1, w1, #0x1
    82a0:	sub	w6, w6, #0x8
    82a4:	str	w1, [x27, #116]
    82a8:	str	w0, [x27, #640]
    82ac:	cmp	w6, #0x7
    82b0:	str	w6, [x27, #644]
    82b4:	b.gt	8280 <BZ2_compressBlock@@Base+0x3fd0>
    82b8:	sub	w1, w24, w6
    82bc:	add	w6, w5, w6
    82c0:	sub	w1, w1, w5
    82c4:	str	w6, [x27, #644]
    82c8:	lsl	w1, w4, w1
    82cc:	orr	w0, w1, w0
    82d0:	str	w0, [x27, #640]
    82d4:	b	6c98 <BZ2_compressBlock@@Base+0x29e8>
    82d8:	ldr	w0, [sp, #632]
    82dc:	cmp	w0, #0x0
    82e0:	b.le	5104 <BZ2_compressBlock@@Base+0xe54>
    82e4:	ldr	x0, [sp, #616]
    82e8:	mov	x13, #0xc9b8                	// #51640
    82ec:	ldr	x4, [sp, #664]
    82f0:	add	x1, x25, x13
    82f4:	nop
    82f8:	ldrb	w3, [x0]
    82fc:	add	x0, x0, #0x1
    8300:	ldrb	w2, [x0, #257]
    8304:	add	x1, x1, #0x10
    8308:	orr	w2, w3, w2, lsl #16
    830c:	stur	w2, [x1, #-16]
    8310:	ldrb	w3, [x0, #515]
    8314:	ldrb	w2, [x0, #773]
    8318:	orr	w2, w3, w2, lsl #16
    831c:	stur	w2, [x1, #-12]
    8320:	ldrb	w2, [x0, #1289]
    8324:	ldrb	w3, [x0, #1031]
    8328:	cmp	x4, x0
    832c:	orr	w2, w3, w2, lsl #16
    8330:	stur	w2, [x1, #-8]
    8334:	b.ne	82f8 <BZ2_compressBlock@@Base+0x4048>  // b.any
    8338:	ldr	w0, [x25, #668]
    833c:	str	w0, [sp, #144]
    8340:	cmp	w0, #0x0
    8344:	b.gt	5114 <BZ2_compressBlock@@Base+0xe64>
    8348:	ldr	w1, [sp, #556]
    834c:	mov	w19, #0x0                   	// #0
    8350:	ldr	w0, [x25, #656]
    8354:	add	w1, w1, #0x1
    8358:	str	wzr, [sp, #412]
    835c:	str	w1, [sp, #556]
    8360:	cmp	w0, #0x2
    8364:	b.le	6408 <BZ2_compressBlock@@Base+0x2158>
    8368:	adrp	x21, 1f000 <BZ2_bzerror@@Base+0x11650>
    836c:	ldr	w0, [sp, #412]
    8370:	ldr	w2, [sp, #556]
    8374:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    8378:	ldr	x21, [x21, #4016]
    837c:	asr	w3, w0, #3
    8380:	add	x1, x1, #0xc40
    8384:	adrp	x23, d000 <BZ2_bzReadOpen@@Base+0x270>
    8388:	mov	x20, x21
    838c:	add	x23, x23, #0xc70
    8390:	ldr	x0, [x21]
    8394:	mov	x22, #0x1                   	// #1
    8398:	bl	16e0 <fprintf@plt>
    839c:	ldp	x24, x26, [sp, #416]
    83a0:	add	x2, x24, x22, lsl #2
    83a4:	ldr	x0, [x20]
    83a8:	mov	x1, x23
    83ac:	ldur	w2, [x2, #-4]
    83b0:	add	x22, x22, #0x1
    83b4:	bl	16e0 <fprintf@plt>
    83b8:	cmp	x26, x22
    83bc:	b.ne	83a0 <BZ2_compressBlock@@Base+0x40f0>  // b.any
    83c0:	ldr	x1, [x21]
    83c4:	mov	w0, #0xa                   	// #10
    83c8:	bl	14c0 <fputc@plt>
    83cc:	b	6408 <BZ2_compressBlock@@Base+0x2158>
    83d0:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    83d4:	ldr	w2, [x27, #652]
    83d8:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    83dc:	add	x1, x1, #0xcd0
    83e0:	ldr	x0, [x0, #4016]
    83e4:	ldr	x0, [x0]
    83e8:	bl	16e0 <fprintf@plt>
    83ec:	b	4dec <BZ2_compressBlock@@Base+0xb3c>
    83f0:	mov	w0, #0x3                   	// #3
    83f4:	str	w0, [sp, #140]
    83f8:	str	w0, [sp, #660]
    83fc:	b	4e54 <BZ2_compressBlock@@Base+0xba4>
    8400:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    8404:	ldr	w4, [sp, #560]
    8408:	mov	w3, w6
    840c:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    8410:	ldr	x0, [x0, #4016]
    8414:	add	x1, x1, #0xbc0
    8418:	ldr	x0, [x0]
    841c:	bl	16e0 <fprintf@plt>
    8420:	ldr	w0, [x27, #124]
    8424:	ldr	w6, [x27, #668]
    8428:	str	w0, [sp, #560]
    842c:	b	485c <BZ2_compressBlock@@Base+0x5ac>
    8430:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    8434:	sub	w2, w1, w3
    8438:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    843c:	add	x1, x1, #0xc98
    8440:	ldr	x0, [x0, #4016]
    8444:	ldr	x0, [x0]
    8448:	bl	16e0 <fprintf@plt>
    844c:	ldr	w1, [x27, #116]
    8450:	b	6978 <BZ2_compressBlock@@Base+0x26c8>
    8454:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    8458:	sub	w2, w3, w5
    845c:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    8460:	add	x1, x1, #0xc78
    8464:	ldr	x0, [x0, #4016]
    8468:	ldr	x0, [x0]
    846c:	bl	16e0 <fprintf@plt>
    8470:	ldr	w3, [x27, #116]
    8474:	b	67b4 <BZ2_compressBlock@@Base+0x2504>
    8478:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    847c:	ldr	w2, [x27, #116]
    8480:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    8484:	add	x1, x1, #0xcc0
    8488:	ldr	x0, [x0, #4016]
    848c:	sub	w2, w2, w20
    8490:	ldr	x0, [x0]
    8494:	bl	16e0 <fprintf@plt>
    8498:	b	4908 <BZ2_compressBlock@@Base+0x658>
    849c:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    84a0:	sub	w2, w20, w1
    84a4:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    84a8:	add	x1, x1, #0xca8
    84ac:	ldr	x0, [x0, #4016]
    84b0:	ldr	x0, [x0]
    84b4:	bl	16e0 <fprintf@plt>
    84b8:	ldr	w20, [x27, #116]
    84bc:	b	6b7c <BZ2_compressBlock@@Base+0x28cc>
    84c0:	ldr	x0, [sp, #128]
    84c4:	add	w6, w21, #0x1
    84c8:	add	x5, x0, w21, sxtw #1
    84cc:	b	4838 <BZ2_compressBlock@@Base+0x588>
    84d0:	mov	w0, #0xbb9                 	// #3001
    84d4:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    84d8:	ldr	w6, [x27, #668]
    84dc:	b	48b4 <BZ2_compressBlock@@Base+0x604>
    84e0:	mov	w0, #0x4                   	// #4
    84e4:	str	w0, [sp, #140]
    84e8:	str	w0, [sp, #660]
    84ec:	b	4e54 <BZ2_compressBlock@@Base+0xba4>
    84f0:	mov	w0, #0x6                   	// #6
    84f4:	str	w0, [sp, #140]
    84f8:	str	w0, [sp, #660]
    84fc:	b	4e54 <BZ2_compressBlock@@Base+0xba4>
    8500:	ldr	w0, [x27, #640]
    8504:	add	w2, w1, #0x8
    8508:	b	49b8 <BZ2_compressBlock@@Base+0x708>
    850c:	mov	w6, #0x1                   	// #1
    8510:	ldr	x5, [sp, #128]
    8514:	b	4838 <BZ2_compressBlock@@Base+0x588>
    8518:	ldr	w0, [x27, #640]
    851c:	b	45f0 <BZ2_compressBlock@@Base+0x340>
    8520:	add	x0, sp, #0x2c0
    8524:	str	x0, [sp, #416]
    8528:	b	4700 <BZ2_compressBlock@@Base+0x450>
    852c:	add	w2, w3, #0x8
    8530:	b	4458 <BZ2_compressBlock@@Base+0x1a8>
    8534:	add	w3, w2, #0x8
    8538:	b	44b8 <BZ2_compressBlock@@Base+0x208>
    853c:	add	w2, w3, #0x8
    8540:	b	4518 <BZ2_compressBlock@@Base+0x268>
    8544:	add	w3, w2, #0x8
    8548:	b	4578 <BZ2_compressBlock@@Base+0x2c8>
    854c:	add	w2, w0, #0x8
    8550:	b	4398 <BZ2_compressBlock@@Base+0xe8>
    8554:	add	w3, w2, #0x8
    8558:	b	43f8 <BZ2_compressBlock@@Base+0x148>
    855c:	add	w2, w0, #0x8
    8560:	b	4bd8 <BZ2_compressBlock@@Base+0x928>
    8564:	add	w3, w2, #0x8
    8568:	b	4c38 <BZ2_compressBlock@@Base+0x988>
    856c:	add	w2, w3, #0x8
    8570:	b	4c98 <BZ2_compressBlock@@Base+0x9e8>
    8574:	add	w3, w2, #0x8
    8578:	b	4cf8 <BZ2_compressBlock@@Base+0xa48>
    857c:	add	w2, w3, #0x8
    8580:	b	4d58 <BZ2_compressBlock@@Base+0xaa8>
    8584:	add	w3, w2, #0x8
    8588:	b	4db8 <BZ2_compressBlock@@Base+0xb08>
    858c:	add	w3, w2, #0x8
    8590:	b	4ae8 <BZ2_compressBlock@@Base+0x838>
    8594:	add	w2, w3, #0x8
    8598:	b	4a78 <BZ2_compressBlock@@Base+0x7c8>
    859c:	add	w3, w2, #0x8
    85a0:	b	4a18 <BZ2_compressBlock@@Base+0x768>
    85a4:	nop

00000000000085a8 <BZ2_decompress@@Base>:
    85a8:	stp	x29, x30, [sp, #-240]!
    85ac:	mov	x29, sp
    85b0:	stp	x19, x20, [sp, #16]
    85b4:	mov	x19, x0
    85b8:	add	x20, x0, #0xc, lsl #12
    85bc:	stp	x21, x22, [sp, #32]
    85c0:	add	x21, x0, #0x8, lsl #12
    85c4:	ldr	w0, [x0, #8]
    85c8:	stp	x23, x24, [sp, #48]
    85cc:	cmp	w0, #0xa
    85d0:	stp	x25, x26, [sp, #64]
    85d4:	stp	x27, x28, [sp, #80]
    85d8:	ldr	x5, [x19]
    85dc:	b.eq	8760 <BZ2_decompress@@Base+0x1b8>  // b.none
    85e0:	ldr	w1, [x20, #14936]
    85e4:	sub	w0, w0, #0xb
    85e8:	str	w1, [sp, #120]
    85ec:	cmp	w0, #0x27
    85f0:	ldr	w1, [x20, #14944]
    85f4:	str	w1, [sp, #136]
    85f8:	ldr	w1, [x20, #14960]
    85fc:	str	w1, [sp, #124]
    8600:	ldr	w1, [x20, #14964]
    8604:	str	w1, [sp, #116]
    8608:	ldr	x1, [x21, #31368]
    860c:	str	x1, [sp, #104]
    8610:	ldr	w3, [x20, #14884]
    8614:	ldr	w25, [x20, #14888]
    8618:	ldr	w27, [x20, #14892]
    861c:	ldr	w6, [x20, #14896]
    8620:	ldr	w7, [x20, #14900]
    8624:	ldr	w8, [x20, #14904]
    8628:	ldr	w18, [x20, #14908]
    862c:	ldr	w4, [x20, #14912]
    8630:	ldr	w28, [x20, #14916]
    8634:	ldr	w13, [x20, #14920]
    8638:	ldr	w14, [x20, #14924]
    863c:	ldr	w26, [x20, #14928]
    8640:	ldr	w12, [x20, #14932]
    8644:	ldr	w9, [x20, #14940]
    8648:	ldr	w22, [x20, #14948]
    864c:	ldr	w23, [x20, #14952]
    8650:	ldr	w24, [x20, #14956]
    8654:	ldr	x11, [x21, #31352]
    8658:	ldr	x10, [x21, #31360]
    865c:	b.ls	8748 <BZ2_decompress@@Base+0x1a0>  // b.plast
    8660:	mov	w0, #0xfa1                 	// #4001
    8664:	str	w3, [sp, #128]
    8668:	stp	w6, w7, [sp, #140]
    866c:	stp	w8, w18, [sp, #148]
    8670:	stp	w4, w13, [sp, #156]
    8674:	str	w14, [sp, #168]
    8678:	str	w12, [sp, #176]
    867c:	str	w9, [sp, #184]
    8680:	stp	x11, x10, [sp, #192]
    8684:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    8688:	mov	w0, #0xfa2                 	// #4002
    868c:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    8690:	mov	w0, #0x0                   	// #0
    8694:	ldp	x11, x10, [sp, #192]
    8698:	ldr	w3, [sp, #128]
    869c:	ldp	w6, w7, [sp, #140]
    86a0:	ldp	w8, w18, [sp, #148]
    86a4:	ldp	w4, w13, [sp, #156]
    86a8:	ldr	w14, [sp, #168]
    86ac:	ldr	w12, [sp, #176]
    86b0:	ldr	w9, [sp, #184]
    86b4:	nop
    86b8:	ldr	w1, [sp, #120]
    86bc:	str	w1, [x20, #14936]
    86c0:	ldr	w1, [sp, #136]
    86c4:	str	w1, [x20, #14944]
    86c8:	ldr	w1, [sp, #124]
    86cc:	str	w1, [x20, #14960]
    86d0:	ldr	w1, [sp, #116]
    86d4:	str	w3, [x20, #14884]
    86d8:	str	w25, [x20, #14888]
    86dc:	str	w27, [x20, #14892]
    86e0:	str	w6, [x20, #14896]
    86e4:	str	w7, [x20, #14900]
    86e8:	str	w8, [x20, #14904]
    86ec:	str	w18, [x20, #14908]
    86f0:	str	w4, [x20, #14912]
    86f4:	str	w28, [x20, #14916]
    86f8:	str	w13, [x20, #14920]
    86fc:	str	w14, [x20, #14924]
    8700:	str	w26, [x20, #14928]
    8704:	str	w12, [x20, #14932]
    8708:	str	w9, [x20, #14940]
    870c:	str	w22, [x20, #14948]
    8710:	str	w23, [x20, #14952]
    8714:	str	w24, [x20, #14956]
    8718:	str	w1, [x20, #14964]
    871c:	ldr	x1, [sp, #104]
    8720:	str	x11, [x21, #31352]
    8724:	str	x10, [x21, #31360]
    8728:	str	x1, [x21, #31368]
    872c:	ldp	x19, x20, [sp, #16]
    8730:	ldp	x21, x22, [sp, #32]
    8734:	ldp	x23, x24, [sp, #48]
    8738:	ldp	x25, x26, [sp, #64]
    873c:	ldp	x27, x28, [sp, #80]
    8740:	ldp	x29, x30, [sp], #240
    8744:	ret
    8748:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    874c:	add	x1, x1, #0xd18
    8750:	ldrh	w0, [x1, w0, uxtw #1]
    8754:	adr	x1, 8760 <BZ2_decompress@@Base+0x1b8>
    8758:	add	x0, x1, w0, sxth #2
    875c:	br	x0
    8760:	str	wzr, [x20, #14884]
    8764:	str	xzr, [x21, #31272]
    8768:	str	xzr, [x21, #31280]
    876c:	str	xzr, [x21, #31288]
    8770:	str	xzr, [x21, #31296]
    8774:	str	xzr, [x21, #31304]
    8778:	str	xzr, [x21, #31312]
    877c:	str	xzr, [x21, #31320]
    8780:	str	xzr, [x21, #31328]
    8784:	str	xzr, [x21, #31336]
    8788:	str	xzr, [x21, #31344]
    878c:	str	xzr, [x21, #31352]
    8790:	str	xzr, [x21, #31360]
    8794:	str	xzr, [x21, #31368]
    8798:	str	w0, [x19, #8]
    879c:	ldr	w0, [x19, #36]
    87a0:	b	87dc <BZ2_decompress@@Base+0x234>
    87a4:	ldr	w1, [x5, #8]
    87a8:	cbz	w1, a438 <BZ2_decompress@@Base+0x1e90>
    87ac:	ldr	x3, [x5]
    87b0:	add	w0, w0, #0x8
    87b4:	ldr	w4, [x19, #32]
    87b8:	sub	w1, w1, #0x1
    87bc:	ldr	w2, [x5, #12]
    87c0:	ldrb	w6, [x3], #1
    87c4:	add	w2, w2, #0x1
    87c8:	orr	w4, w6, w4, lsl #8
    87cc:	stp	w4, w0, [x19, #32]
    87d0:	str	x3, [x5]
    87d4:	stp	w1, w2, [x5, #8]
    87d8:	cbz	w2, a4cc <BZ2_decompress@@Base+0x1f24>
    87dc:	cmp	w0, #0x7
    87e0:	b.le	87a4 <BZ2_decompress@@Base+0x1fc>
    87e4:	ldr	w1, [x19, #32]
    87e8:	sub	w0, w0, #0x8
    87ec:	str	w0, [x19, #36]
    87f0:	lsr	w1, w1, w0
    87f4:	and	w1, w1, #0xff
    87f8:	cmp	w1, #0x42
    87fc:	b.ne	a4dc <BZ2_decompress@@Base+0x1f34>  // b.any
    8800:	mov	x10, #0x0                   	// #0
    8804:	mov	x11, #0x0                   	// #0
    8808:	mov	w24, #0x0                   	// #0
    880c:	mov	w23, #0x0                   	// #0
    8810:	mov	w22, #0x0                   	// #0
    8814:	mov	w9, #0x0                   	// #0
    8818:	mov	w12, #0x0                   	// #0
    881c:	mov	w26, #0x0                   	// #0
    8820:	mov	w14, #0x0                   	// #0
    8824:	mov	w13, #0x0                   	// #0
    8828:	mov	w28, #0x0                   	// #0
    882c:	mov	w4, #0x0                   	// #0
    8830:	mov	w18, #0x0                   	// #0
    8834:	mov	w8, #0x0                   	// #0
    8838:	mov	w7, #0x0                   	// #0
    883c:	mov	w6, #0x0                   	// #0
    8840:	mov	w27, #0x0                   	// #0
    8844:	mov	w25, #0x0                   	// #0
    8848:	mov	w3, #0x0                   	// #0
    884c:	str	xzr, [sp, #104]
    8850:	stp	wzr, wzr, [sp, #116]
    8854:	str	wzr, [sp, #124]
    8858:	str	wzr, [sp, #136]
    885c:	b	a064 <BZ2_decompress@@Base+0x1abc>
    8860:	lsl	w1, w1, #2
    8864:	mov	w2, #0x1                   	// #1
    8868:	str	w3, [sp, #128]
    886c:	stp	w6, w7, [sp, #140]
    8870:	stp	w8, w18, [sp, #148]
    8874:	stp	w4, w13, [sp, #156]
    8878:	str	w14, [sp, #168]
    887c:	str	w12, [sp, #176]
    8880:	str	w9, [sp, #184]
    8884:	stp	x11, x10, [sp, #192]
    8888:	blr	x15
    888c:	ldr	w3, [sp, #128]
    8890:	str	x0, [x19, #3152]
    8894:	ldp	w6, w7, [sp, #140]
    8898:	ldp	w8, w18, [sp, #148]
    889c:	ldp	w4, w13, [sp, #156]
    88a0:	ldr	w14, [sp, #168]
    88a4:	ldr	w12, [sp, #176]
    88a8:	ldr	w9, [sp, #184]
    88ac:	ldp	x11, x10, [sp, #192]
    88b0:	cbz	x0, 9fd4 <BZ2_decompress@@Base+0x1a2c>
    88b4:	mov	w1, #0xe                   	// #14
    88b8:	ldr	w0, [x19, #36]
    88bc:	str	w1, [x19, #8]
    88c0:	b	8900 <BZ2_decompress@@Base+0x358>
    88c4:	ldr	x1, [x19]
    88c8:	ldr	w2, [x1, #8]
    88cc:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    88d0:	ldr	x16, [x1]
    88d4:	sub	w15, w2, #0x1
    88d8:	ldr	w5, [x19, #32]
    88dc:	add	w0, w0, #0x8
    88e0:	ldr	w2, [x1, #12]
    88e4:	ldrb	w17, [x16], #1
    88e8:	add	w2, w2, #0x1
    88ec:	orr	w5, w17, w5, lsl #8
    88f0:	stp	w5, w0, [x19, #32]
    88f4:	str	x16, [x1]
    88f8:	stp	w15, w2, [x1, #8]
    88fc:	cbz	w2, a338 <BZ2_decompress@@Base+0x1d90>
    8900:	cmp	w0, #0x7
    8904:	b.le	88c4 <BZ2_decompress@@Base+0x31c>
    8908:	ldr	w1, [x19, #32]
    890c:	sub	w0, w0, #0x8
    8910:	str	w0, [x19, #36]
    8914:	lsr	w1, w1, w0
    8918:	and	w1, w1, #0xff
    891c:	cmp	w1, #0x17
    8920:	b.eq	9cbc <BZ2_decompress@@Base+0x1714>  // b.none
    8924:	cmp	w1, #0x31
    8928:	b.ne	9920 <BZ2_decompress@@Base+0x1378>  // b.any
    892c:	mov	w1, #0xf                   	// #15
    8930:	str	w1, [x19, #8]
    8934:	b	8974 <BZ2_decompress@@Base+0x3cc>
    8938:	ldr	x1, [x19]
    893c:	ldr	w2, [x1, #8]
    8940:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    8944:	ldr	x16, [x1]
    8948:	sub	w15, w2, #0x1
    894c:	ldr	w5, [x19, #32]
    8950:	add	w0, w0, #0x8
    8954:	ldr	w2, [x1, #12]
    8958:	ldrb	w17, [x16], #1
    895c:	add	w2, w2, #0x1
    8960:	orr	w5, w17, w5, lsl #8
    8964:	stp	w5, w0, [x19, #32]
    8968:	str	x16, [x1]
    896c:	stp	w15, w2, [x1, #8]
    8970:	cbz	w2, a3a8 <BZ2_decompress@@Base+0x1e00>
    8974:	cmp	w0, #0x7
    8978:	b.le	8938 <BZ2_decompress@@Base+0x390>
    897c:	ldr	w1, [x19, #32]
    8980:	sub	w0, w0, #0x8
    8984:	str	w0, [x19, #36]
    8988:	lsr	w1, w1, w0
    898c:	and	w1, w1, #0xff
    8990:	cmp	w1, #0x41
    8994:	b.ne	9920 <BZ2_decompress@@Base+0x1378>  // b.any
    8998:	mov	w1, #0x10                  	// #16
    899c:	str	w1, [x19, #8]
    89a0:	b	89e0 <BZ2_decompress@@Base+0x438>
    89a4:	ldr	x1, [x19]
    89a8:	ldr	w2, [x1, #8]
    89ac:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    89b0:	ldr	x16, [x1]
    89b4:	sub	w15, w2, #0x1
    89b8:	ldr	w5, [x19, #32]
    89bc:	add	w0, w0, #0x8
    89c0:	ldr	w2, [x1, #12]
    89c4:	ldrb	w17, [x16], #1
    89c8:	add	w2, w2, #0x1
    89cc:	orr	w5, w17, w5, lsl #8
    89d0:	stp	w5, w0, [x19, #32]
    89d4:	str	x16, [x1]
    89d8:	stp	w15, w2, [x1, #8]
    89dc:	cbz	w2, a358 <BZ2_decompress@@Base+0x1db0>
    89e0:	cmp	w0, #0x7
    89e4:	b.le	89a4 <BZ2_decompress@@Base+0x3fc>
    89e8:	ldr	w1, [x19, #32]
    89ec:	sub	w0, w0, #0x8
    89f0:	str	w0, [x19, #36]
    89f4:	lsr	w1, w1, w0
    89f8:	and	w1, w1, #0xff
    89fc:	cmp	w1, #0x59
    8a00:	b.ne	9920 <BZ2_decompress@@Base+0x1378>  // b.any
    8a04:	mov	w1, #0x11                  	// #17
    8a08:	str	w1, [x19, #8]
    8a0c:	b	8a4c <BZ2_decompress@@Base+0x4a4>
    8a10:	ldr	x1, [x19]
    8a14:	ldr	w2, [x1, #8]
    8a18:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    8a1c:	ldr	x16, [x1]
    8a20:	sub	w15, w2, #0x1
    8a24:	ldr	w5, [x19, #32]
    8a28:	add	w0, w0, #0x8
    8a2c:	ldr	w2, [x1, #12]
    8a30:	ldrb	w17, [x16], #1
    8a34:	add	w2, w2, #0x1
    8a38:	orr	w5, w17, w5, lsl #8
    8a3c:	stp	w5, w0, [x19, #32]
    8a40:	str	x16, [x1]
    8a44:	stp	w15, w2, [x1, #8]
    8a48:	cbz	w2, a348 <BZ2_decompress@@Base+0x1da0>
    8a4c:	cmp	w0, #0x7
    8a50:	b.le	8a10 <BZ2_decompress@@Base+0x468>
    8a54:	ldr	w1, [x19, #32]
    8a58:	sub	w0, w0, #0x8
    8a5c:	str	w0, [x19, #36]
    8a60:	lsr	w1, w1, w0
    8a64:	and	w1, w1, #0xff
    8a68:	cmp	w1, #0x26
    8a6c:	b.ne	9920 <BZ2_decompress@@Base+0x1378>  // b.any
    8a70:	mov	w1, #0x12                  	// #18
    8a74:	str	w1, [x19, #8]
    8a78:	b	8ab8 <BZ2_decompress@@Base+0x510>
    8a7c:	ldr	x1, [x19]
    8a80:	ldr	w2, [x1, #8]
    8a84:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    8a88:	ldr	x16, [x1]
    8a8c:	sub	w15, w2, #0x1
    8a90:	ldr	w5, [x19, #32]
    8a94:	add	w0, w0, #0x8
    8a98:	ldr	w2, [x1, #12]
    8a9c:	ldrb	w17, [x16], #1
    8aa0:	add	w2, w2, #0x1
    8aa4:	orr	w5, w17, w5, lsl #8
    8aa8:	stp	w5, w0, [x19, #32]
    8aac:	str	x16, [x1]
    8ab0:	stp	w15, w2, [x1, #8]
    8ab4:	cbz	w2, a2f8 <BZ2_decompress@@Base+0x1d50>
    8ab8:	cmp	w0, #0x7
    8abc:	b.le	8a7c <BZ2_decompress@@Base+0x4d4>
    8ac0:	ldr	w1, [x19, #32]
    8ac4:	sub	w0, w0, #0x8
    8ac8:	str	w0, [x19, #36]
    8acc:	lsr	w1, w1, w0
    8ad0:	and	w1, w1, #0xff
    8ad4:	cmp	w1, #0x53
    8ad8:	b.ne	9920 <BZ2_decompress@@Base+0x1378>  // b.any
    8adc:	mov	w1, #0x13                  	// #19
    8ae0:	str	w1, [x19, #8]
    8ae4:	b	8b24 <BZ2_decompress@@Base+0x57c>
    8ae8:	ldr	x1, [x19]
    8aec:	ldr	w2, [x1, #8]
    8af0:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    8af4:	ldr	x16, [x1]
    8af8:	sub	w15, w2, #0x1
    8afc:	ldr	w5, [x19, #32]
    8b00:	add	w0, w0, #0x8
    8b04:	ldr	w2, [x1, #12]
    8b08:	ldrb	w17, [x16], #1
    8b0c:	add	w2, w2, #0x1
    8b10:	orr	w5, w17, w5, lsl #8
    8b14:	stp	w5, w0, [x19, #32]
    8b18:	str	x16, [x1]
    8b1c:	stp	w15, w2, [x1, #8]
    8b20:	cbz	w2, a308 <BZ2_decompress@@Base+0x1d60>
    8b24:	cmp	w0, #0x7
    8b28:	b.le	8ae8 <BZ2_decompress@@Base+0x540>
    8b2c:	ldr	w1, [x19, #32]
    8b30:	sub	w0, w0, #0x8
    8b34:	str	w0, [x19, #36]
    8b38:	lsr	w1, w1, w0
    8b3c:	and	w1, w1, #0xff
    8b40:	cmp	w1, #0x59
    8b44:	b.ne	9920 <BZ2_decompress@@Base+0x1378>  // b.any
    8b48:	ldp	w2, w1, [x19, #48]
    8b4c:	add	w2, w2, #0x1
    8b50:	str	w2, [x19, #48]
    8b54:	cmp	w1, #0x1
    8b58:	b.gt	a170 <BZ2_decompress@@Base+0x1bc8>
    8b5c:	str	wzr, [x19, #3176]
    8b60:	b	9ff0 <BZ2_decompress@@Base+0x1a48>
    8b64:	ldr	w0, [x19, #36]
    8b68:	mov	w1, #0x23                  	// #35
    8b6c:	str	w1, [x19, #8]
    8b70:	b	8bb0 <BZ2_decompress@@Base+0x608>
    8b74:	ldr	x1, [x19]
    8b78:	ldr	w2, [x1, #8]
    8b7c:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    8b80:	ldr	x16, [x1]
    8b84:	sub	w15, w2, #0x1
    8b88:	ldr	w5, [x19, #32]
    8b8c:	add	w0, w0, #0x8
    8b90:	ldr	w2, [x1, #12]
    8b94:	ldrb	w17, [x16], #1
    8b98:	add	w2, w2, #0x1
    8b9c:	orr	w5, w17, w5, lsl #8
    8ba0:	stp	w5, w0, [x19, #32]
    8ba4:	str	x16, [x1]
    8ba8:	stp	w15, w2, [x1, #8]
    8bac:	cbz	w2, a388 <BZ2_decompress@@Base+0x1de0>
    8bb0:	cmp	w0, #0x0
    8bb4:	b.le	8b74 <BZ2_decompress@@Base+0x5cc>
    8bb8:	ldr	w1, [x19, #32]
    8bbc:	sub	w0, w0, #0x1
    8bc0:	str	w0, [x19, #36]
    8bc4:	sub	w2, w9, #0x1
    8bc8:	lsr	w0, w1, w0
    8bcc:	tst	x0, #0x1
    8bd0:	csinc	w9, w2, w9, ne  // ne = any
    8bd4:	sub	w0, w9, #0x1
    8bd8:	cmp	w0, #0x13
    8bdc:	b.hi	9920 <BZ2_decompress@@Base+0x1378>  // b.pmore
    8be0:	mov	w1, #0x22                  	// #34
    8be4:	ldr	w0, [x19, #36]
    8be8:	str	w1, [x19, #8]
    8bec:	b	8c2c <BZ2_decompress@@Base+0x684>
    8bf0:	ldr	x1, [x19]
    8bf4:	ldr	w2, [x1, #8]
    8bf8:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    8bfc:	ldr	x16, [x1]
    8c00:	sub	w15, w2, #0x1
    8c04:	ldr	w5, [x19, #32]
    8c08:	add	w0, w0, #0x8
    8c0c:	ldr	w2, [x1, #12]
    8c10:	ldrb	w17, [x16], #1
    8c14:	add	w2, w2, #0x1
    8c18:	orr	w5, w17, w5, lsl #8
    8c1c:	stp	w5, w0, [x19, #32]
    8c20:	str	x16, [x1]
    8c24:	stp	w15, w2, [x1, #8]
    8c28:	cbz	w2, a3c8 <BZ2_decompress@@Base+0x1e20>
    8c2c:	cmp	w0, #0x0
    8c30:	b.le	8bf0 <BZ2_decompress@@Base+0x648>
    8c34:	ldr	w1, [x19, #32]
    8c38:	sub	w0, w0, #0x1
    8c3c:	str	w0, [x19, #36]
    8c40:	lsr	w1, w1, w0
    8c44:	tbnz	w1, #0, 8b68 <BZ2_decompress@@Base+0x5c0>
    8c48:	sbfiz	x0, x27, #7, #32
    8c4c:	add	x0, x0, w27, sxtw
    8c50:	add	x0, x19, x0, lsl #1
    8c54:	add	x0, x0, w3, sxtw
    8c58:	add	w3, w3, #0x1
    8c5c:	add	x0, x0, #0xa, lsl #12
    8c60:	strb	w9, [x0, #2928]
    8c64:	cmp	w3, w6
    8c68:	b.lt	8bd4 <BZ2_decompress@@Base+0x62c>  // b.tstop
    8c6c:	add	w27, w27, #0x1
    8c70:	cmp	w27, w7
    8c74:	b.lt	9084 <BZ2_decompress@@Base+0xadc>  // b.tstop
    8c78:	cmp	w7, #0x0
    8c7c:	b.le	a79c <BZ2_decompress@@Base+0x21f4>
    8c80:	mov	x0, #0xb17c                	// #45436
    8c84:	mov	x26, #0x0                   	// #0
    8c88:	add	x28, x19, x0
    8c8c:	mov	x1, #0xab70                	// #43888
    8c90:	mov	x2, #0xfa0c                	// #64012
    8c94:	add	x27, x19, x1
    8c98:	add	x0, x19, x2
    8c9c:	stp	w9, w22, [sp, #148]
    8ca0:	mov	x22, x26
    8ca4:	mov	w26, w7
    8ca8:	stp	x11, x19, [sp, #160]
    8cac:	mov	w19, w6
    8cb0:	stp	x21, x20, [sp, #176]
    8cb4:	mov	x21, x28
    8cb8:	mov	x20, x27
    8cbc:	mov	x28, x10
    8cc0:	mov	x27, x0
    8cc4:	str	w8, [sp, #128]
    8cc8:	stp	w13, w12, [sp, #140]
    8ccc:	str	w23, [sp, #156]
    8cd0:	cmp	w19, #0x0
    8cd4:	mov	x2, #0x0                   	// #0
    8cd8:	mov	w5, #0x0                   	// #0
    8cdc:	mov	w23, #0x20                  	// #32
    8ce0:	b.le	8d08 <BZ2_decompress@@Base+0x760>
    8ce4:	nop
    8ce8:	ldrb	w0, [x20, x2]
    8cec:	add	x2, x2, #0x1
    8cf0:	cmp	w5, w0
    8cf4:	csel	w5, w5, w0, ge  // ge = tcont
    8cf8:	cmp	w23, w0
    8cfc:	csel	w23, w23, w0, le
    8d00:	cmp	w19, w2
    8d04:	b.gt	8ce8 <BZ2_decompress@@Base+0x740>
    8d08:	mov	x18, #0x3060                	// #12384
    8d0c:	mov	x30, #0x1830                	// #6192
    8d10:	mov	x3, x20
    8d14:	add	x2, x21, x18
    8d18:	add	x1, x21, x30
    8d1c:	mov	x0, x21
    8d20:	mov	w6, w19
    8d24:	mov	w4, w23
    8d28:	bl	1570 <BZ2_hbCreateDecodeTables@plt>
    8d2c:	str	w23, [x27, x22, lsl #2]
    8d30:	add	x22, x22, #0x1
    8d34:	add	x20, x20, #0x102
    8d38:	cmp	w26, w22
    8d3c:	add	x21, x21, #0x408
    8d40:	b.gt	8cd0 <BZ2_decompress@@Base+0x728>
    8d44:	mov	w6, w19
    8d48:	ldr	w8, [sp, #128]
    8d4c:	ldp	x11, x19, [sp, #160]
    8d50:	mov	w7, w26
    8d54:	ldp	x21, x20, [sp, #176]
    8d58:	mov	x10, x28
    8d5c:	ldp	w13, w12, [sp, #140]
    8d60:	mov	w27, w26
    8d64:	ldp	w9, w22, [sp, #148]
    8d68:	ldr	w23, [sp, #156]
    8d6c:	ldr	w3, [x19, #40]
    8d70:	mov	w2, #0x86a0                	// #34464
    8d74:	movk	w2, #0x1, lsl #16
    8d78:	ldr	w4, [x19, #3192]
    8d7c:	add	x0, x19, #0x44
    8d80:	add	x1, x19, #0x444
    8d84:	add	w18, w4, #0x1
    8d88:	mul	w14, w3, w2
    8d8c:	nop
    8d90:	str	wzr, [x0], #4
    8d94:	cmp	x1, x0
    8d98:	b.ne	8d90 <BZ2_decompress@@Base+0x7e8>  // b.any
    8d9c:	mov	x15, #0x1ec8                	// #7880
    8da0:	mov	x16, #0x1e8b                	// #7819
    8da4:	mov	x17, #0x1e7b                	// #7803
    8da8:	add	x15, x19, x15
    8dac:	add	x3, x19, x16
    8db0:	add	x4, x19, x17
    8db4:	mov	w5, #0xff0                 	// #4080
    8db8:	add	w2, w5, #0xf
    8dbc:	mov	x0, x3
    8dc0:	and	w2, w2, #0xff
    8dc4:	nop
    8dc8:	sub	w1, w0, w3
    8dcc:	add	w1, w2, w1
    8dd0:	strb	w1, [x0], #-1
    8dd4:	cmp	x4, x0
    8dd8:	b.ne	8dc8 <BZ2_decompress@@Base+0x820>  // b.any
    8ddc:	str	w5, [x15], #-4
    8de0:	sub	w5, w5, #0x10
    8de4:	cmp	w5, #0xef0
    8de8:	sub	x3, x3, #0x10
    8dec:	sub	x4, x4, #0x10
    8df0:	b.ne	8db8 <BZ2_decompress@@Base+0x810>  // b.any
    8df4:	cmp	w8, #0x0
    8df8:	b.le	a784 <BZ2_decompress@@Base+0x21dc>
    8dfc:	add	x0, x19, #0x1, lsl #12
    8e00:	mov	x22, #0xfa00                	// #64000
    8e04:	mov	x30, #0xb17c                	// #45436
    8e08:	mov	x5, #0xc9ac                	// #51628
    8e0c:	mov	w26, #0x0                   	// #0
    8e10:	mov	w28, #0x31                  	// #49
    8e14:	ldrb	w2, [x0, #3788]
    8e18:	mov	w4, #0x0                   	// #0
    8e1c:	mov	w3, #0x100                 	// #256
    8e20:	str	w2, [sp, #124]
    8e24:	mov	x0, x2
    8e28:	add	x1, x19, w2, sxtw #2
    8e2c:	ubfiz	x0, x0, #7, #8
    8e30:	add	x1, x1, x22
    8e34:	add	x0, x0, w2, uxtb
    8e38:	lsl	x0, x0, #3
    8e3c:	ldr	w22, [x1, #12]
    8e40:	add	x11, x0, x30
    8e44:	mov	x1, #0xe1dc                	// #57820
    8e48:	add	x1, x0, x1
    8e4c:	add	x0, x0, x5
    8e50:	add	x11, x19, x11
    8e54:	add	x10, x19, x0
    8e58:	add	x1, x19, x1
    8e5c:	str	x1, [sp, #104]
    8e60:	str	w22, [sp, #116]
    8e64:	nop
    8e68:	mov	w0, #0x24                  	// #36
    8e6c:	ldr	w5, [x19, #36]
    8e70:	str	w0, [x19, #8]
    8e74:	b	8eb4 <BZ2_decompress@@Base+0x90c>
    8e78:	ldr	x0, [x19]
    8e7c:	ldr	w1, [x0, #8]
    8e80:	cbz	w1, a1d4 <BZ2_decompress@@Base+0x1c2c>
    8e84:	ldr	x16, [x0]
    8e88:	sub	w15, w1, #0x1
    8e8c:	ldr	w2, [x19, #32]
    8e90:	add	w5, w5, #0x8
    8e94:	ldr	w1, [x0, #12]
    8e98:	ldrb	w17, [x16], #1
    8e9c:	add	w1, w1, #0x1
    8ea0:	orr	w2, w17, w2, lsl #8
    8ea4:	stp	w2, w5, [x19, #32]
    8ea8:	str	x16, [x0]
    8eac:	stp	w15, w1, [x0, #8]
    8eb0:	cbz	w1, a428 <BZ2_decompress@@Base+0x1e80>
    8eb4:	cmp	w22, w5
    8eb8:	b.gt	8e78 <BZ2_decompress@@Base+0x8d0>
    8ebc:	ldr	w23, [x19, #32]
    8ec0:	sub	w5, w5, w22
    8ec4:	mov	w0, #0x1                   	// #1
    8ec8:	str	w5, [x19, #36]
    8ecc:	lsl	w0, w0, w22
    8ed0:	sub	w0, w0, #0x1
    8ed4:	lsr	w5, w23, w5
    8ed8:	and	w23, w5, w0
    8edc:	b	8ef8 <BZ2_decompress@@Base+0x950>
    8ee0:	ldr	w24, [x19, #32]
    8ee4:	sub	w5, w5, #0x1
    8ee8:	str	w5, [x19, #36]
    8eec:	lsr	w5, w24, w5
    8ef0:	and	w24, w5, #0x1
    8ef4:	orr	w23, w24, w23, lsl #1
    8ef8:	cmp	w22, #0x14
    8efc:	b.gt	9920 <BZ2_decompress@@Base+0x1378>
    8f00:	sxtw	x0, w22
    8f04:	ldr	w1, [x11, x0, lsl #2]
    8f08:	cmp	w1, w23
    8f0c:	b.ge	90f4 <BZ2_decompress@@Base+0xb4c>  // b.tcont
    8f10:	add	w22, w22, #0x1
    8f14:	mov	w0, #0x25                  	// #37
    8f18:	ldr	w5, [x19, #36]
    8f1c:	str	w0, [x19, #8]
    8f20:	b	8f60 <BZ2_decompress@@Base+0x9b8>
    8f24:	ldr	x0, [x19]
    8f28:	ldr	w1, [x0, #8]
    8f2c:	cbz	w1, a1d4 <BZ2_decompress@@Base+0x1c2c>
    8f30:	ldr	x16, [x0]
    8f34:	sub	w15, w1, #0x1
    8f38:	ldr	w2, [x19, #32]
    8f3c:	add	w5, w5, #0x8
    8f40:	ldr	w1, [x0, #12]
    8f44:	ldrb	w17, [x16], #1
    8f48:	add	w1, w1, #0x1
    8f4c:	orr	w2, w17, w2, lsl #8
    8f50:	stp	w2, w5, [x19, #32]
    8f54:	str	x16, [x0]
    8f58:	stp	w15, w1, [x0, #8]
    8f5c:	cbz	w1, a3d8 <BZ2_decompress@@Base+0x1e30>
    8f60:	cmp	w5, #0x0
    8f64:	b.le	8f24 <BZ2_decompress@@Base+0x97c>
    8f68:	b	8ee0 <BZ2_decompress@@Base+0x938>
    8f6c:	ldr	w24, [x19, #32]
    8f70:	sub	w5, w5, #0x1
    8f74:	str	w5, [x19, #36]
    8f78:	lsr	w5, w24, w5
    8f7c:	and	w24, w5, #0x1
    8f80:	orr	w23, w24, w23, lsl #1
    8f84:	cmp	w22, #0x14
    8f88:	b.gt	9920 <BZ2_decompress@@Base+0x1378>
    8f8c:	sxtw	x0, w22
    8f90:	ldr	w1, [x11, x0, lsl #2]
    8f94:	cmp	w1, w23
    8f98:	b.ge	a578 <BZ2_decompress@@Base+0x1fd0>  // b.tcont
    8f9c:	add	w22, w22, #0x1
    8fa0:	mov	w0, #0x27                  	// #39
    8fa4:	ldr	w5, [x19, #36]
    8fa8:	str	w0, [x19, #8]
    8fac:	b	8fec <BZ2_decompress@@Base+0xa44>
    8fb0:	ldr	x0, [x19]
    8fb4:	ldr	w1, [x0, #8]
    8fb8:	cbz	w1, a1d4 <BZ2_decompress@@Base+0x1c2c>
    8fbc:	ldr	x16, [x0]
    8fc0:	sub	w15, w1, #0x1
    8fc4:	ldr	w2, [x19, #32]
    8fc8:	add	w5, w5, #0x8
    8fcc:	ldr	w1, [x0, #12]
    8fd0:	ldrb	w17, [x16], #1
    8fd4:	add	w1, w1, #0x1
    8fd8:	orr	w2, w17, w2, lsl #8
    8fdc:	stp	w2, w5, [x19, #32]
    8fe0:	str	x16, [x0]
    8fe4:	stp	w15, w1, [x0, #8]
    8fe8:	cbz	w1, a3e8 <BZ2_decompress@@Base+0x1e40>
    8fec:	cmp	w5, #0x0
    8ff0:	b.le	8fb0 <BZ2_decompress@@Base+0xa08>
    8ff4:	b	8f6c <BZ2_decompress@@Base+0x9c4>
    8ff8:	ldr	w24, [x19, #32]
    8ffc:	sub	w5, w5, #0x1
    9000:	str	w5, [x19, #36]
    9004:	lsr	w5, w24, w5
    9008:	and	w24, w5, #0x1
    900c:	orr	w23, w24, w23, lsl #1
    9010:	cmp	w22, #0x14
    9014:	b.gt	9920 <BZ2_decompress@@Base+0x1378>
    9018:	sxtw	x0, w22
    901c:	ldr	w1, [x11, x0, lsl #2]
    9020:	cmp	w1, w23
    9024:	b.ge	a558 <BZ2_decompress@@Base+0x1fb0>  // b.tcont
    9028:	add	w22, w22, #0x1
    902c:	mov	w0, #0x29                  	// #41
    9030:	ldr	w5, [x19, #36]
    9034:	str	w0, [x19, #8]
    9038:	b	9078 <BZ2_decompress@@Base+0xad0>
    903c:	ldr	x0, [x19]
    9040:	ldr	w1, [x0, #8]
    9044:	cbz	w1, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9048:	ldr	x16, [x0]
    904c:	sub	w15, w1, #0x1
    9050:	ldr	w2, [x19, #32]
    9054:	add	w5, w5, #0x8
    9058:	ldr	w1, [x0, #12]
    905c:	ldrb	w17, [x16], #1
    9060:	add	w1, w1, #0x1
    9064:	orr	w2, w17, w2, lsl #8
    9068:	stp	w2, w5, [x19, #32]
    906c:	str	x16, [x0]
    9070:	stp	w15, w1, [x0, #8]
    9074:	cbz	w1, a3f8 <BZ2_decompress@@Base+0x1e50>
    9078:	cmp	w5, #0x0
    907c:	b.le	903c <BZ2_decompress@@Base+0xa94>
    9080:	b	8ff8 <BZ2_decompress@@Base+0xa50>
    9084:	mov	w0, #0x21                  	// #33
    9088:	ldr	w5, [x19, #36]
    908c:	str	w0, [x19, #8]
    9090:	b	90d0 <BZ2_decompress@@Base+0xb28>
    9094:	ldr	x0, [x19]
    9098:	ldr	w1, [x0, #8]
    909c:	cbz	w1, a1d4 <BZ2_decompress@@Base+0x1c2c>
    90a0:	ldr	x16, [x0]
    90a4:	sub	w15, w1, #0x1
    90a8:	ldr	w2, [x19, #32]
    90ac:	add	w5, w5, #0x8
    90b0:	ldr	w1, [x0, #12]
    90b4:	ldrb	w17, [x16], #1
    90b8:	add	w1, w1, #0x1
    90bc:	orr	w2, w17, w2, lsl #8
    90c0:	stp	w2, w5, [x19, #32]
    90c4:	str	x16, [x0]
    90c8:	stp	w15, w1, [x0, #8]
    90cc:	cbz	w1, a418 <BZ2_decompress@@Base+0x1e70>
    90d0:	cmp	w5, #0x4
    90d4:	b.le	9094 <BZ2_decompress@@Base+0xaec>
    90d8:	ldr	w9, [x19, #32]
    90dc:	sub	w5, w5, #0x5
    90e0:	mov	w3, #0x0                   	// #0
    90e4:	str	w5, [x19, #36]
    90e8:	lsr	w5, w9, w5
    90ec:	and	w9, w5, #0x1f
    90f0:	b	8c64 <BZ2_decompress@@Base+0x6bc>
    90f4:	ldr	w0, [x10, x0, lsl #2]
    90f8:	sub	w0, w23, w0
    90fc:	cmp	w0, #0x101
    9100:	b.hi	9920 <BZ2_decompress@@Base+0x1378>  // b.pmore
    9104:	ldr	x1, [sp, #104]
    9108:	ldr	w13, [x1, w0, sxtw #2]
    910c:	cmp	w18, w13
    9110:	b.eq	a6ec <BZ2_decompress@@Base+0x2144>  // b.none
    9114:	cmp	w13, #0x1
    9118:	b.ls	9928 <BZ2_decompress@@Base+0x1380>  // b.plast
    911c:	cmp	w14, w26
    9120:	b.le	9920 <BZ2_decompress@@Base+0x1378>
    9124:	sub	w2, w13, #0x1
    9128:	cmp	w2, #0xf
    912c:	mov	w0, w2
    9130:	b.hi	a7b8 <BZ2_decompress@@Base+0x2210>  // b.pmore
    9134:	ldr	w1, [x19, #7820]
    9138:	cmp	w2, #0x3
    913c:	add	w2, w1, w2
    9140:	add	x2, x19, x2
    9144:	ldrb	w30, [x2, #3724]
    9148:	b.ls	91c4 <BZ2_decompress@@Base+0xc1c>  // b.plast
    914c:	sub	w0, w1, #0x2
    9150:	mov	w17, #0x1                   	// #1
    9154:	add	w0, w0, w13
    9158:	sub	w17, w17, w1
    915c:	add	w2, w0, #0x1
    9160:	add	x15, x19, w0, sxtw
    9164:	sub	w5, w0, #0x1
    9168:	add	x2, x19, w2, sxtw
    916c:	ldrb	w16, [x15, #3724]
    9170:	add	x5, x19, w5, sxtw
    9174:	strb	w16, [x2, #3724]
    9178:	sub	w2, w0, #0x2
    917c:	ldrb	w16, [x5, #3724]
    9180:	add	x2, x19, w2, sxtw
    9184:	strb	w16, [x15, #3724]
    9188:	sub	w15, w0, #0x3
    918c:	sub	w0, w0, #0x4
    9190:	ldrb	w16, [x2, #3724]
    9194:	add	x15, x19, w15, sxtw
    9198:	strb	w16, [x5, #3724]
    919c:	add	w5, w17, w0
    91a0:	cmp	w5, #0x3
    91a4:	ldrb	w5, [x15, #3724]
    91a8:	strb	w5, [x2, #3724]
    91ac:	b.hi	915c <BZ2_decompress@@Base+0xbb4>  // b.pmore
    91b0:	sub	w0, w13, #0x5
    91b4:	mov	w5, #0xfffffffc            	// #-4
    91b8:	mov	w2, w0
    91bc:	lsr	w0, w0, #2
    91c0:	madd	w0, w0, w5, w2
    91c4:	cbz	w0, 91ec <BZ2_decompress@@Base+0xc44>
    91c8:	add	w0, w1, w0
    91cc:	sub	w2, w0, #0x1
    91d0:	add	x5, x19, w0, uxtw
    91d4:	mov	w0, w2
    91d8:	add	x2, x19, w2, uxtw
    91dc:	cmp	w1, w0
    91e0:	ldrb	w2, [x2, #3724]
    91e4:	strb	w2, [x5, #3724]
    91e8:	b.ne	91cc <BZ2_decompress@@Base+0xc24>  // b.any
    91ec:	add	x1, x19, w1, sxtw
    91f0:	strb	w30, [x1, #3724]
    91f4:	add	x1, x19, w30, sxtw
    91f8:	ldrb	w0, [x1, #3468]
    91fc:	ldrb	w2, [x1, #3468]
    9200:	add	x0, x19, x0, lsl #2
    9204:	ldr	w1, [x0, #68]
    9208:	add	w1, w1, #0x1
    920c:	str	w1, [x0, #68]
    9210:	ldrb	w0, [x19, #44]
    9214:	cbz	w0, a7ac <BZ2_decompress@@Base+0x2204>
    9218:	ldr	x0, [x19, #3160]
    921c:	strh	w2, [x0, w26, sxtw #1]
    9220:	add	w26, w26, #0x1
    9224:	cbnz	w28, 9294 <BZ2_decompress@@Base+0xcec>
    9228:	add	w4, w4, #0x1
    922c:	cmp	w8, w4
    9230:	b.le	9920 <BZ2_decompress@@Base+0x1378>
    9234:	add	x1, x19, w4, sxtw
    9238:	mov	x10, #0x3e80                	// #16000
    923c:	add	x1, x1, #0x1, lsl #12
    9240:	mov	x5, #0x408                 	// #1032
    9244:	mov	x11, #0xb17c                	// #45436
    9248:	mov	x15, #0xe1dc                	// #57820
    924c:	mov	x16, #0xc9ac                	// #51628
    9250:	mov	w28, #0x32                  	// #50
    9254:	ldrb	w2, [x1, #3788]
    9258:	ldrb	w1, [x1, #3788]
    925c:	mov	x0, x2
    9260:	add	x2, x2, x10
    9264:	str	w1, [sp, #124]
    9268:	add	x1, x19, x2, lsl #2
    926c:	mul	x0, x0, x5
    9270:	add	x11, x0, x11
    9274:	add	x2, x0, x15
    9278:	add	x0, x0, x16
    927c:	ldr	w1, [x1, #12]
    9280:	add	x11, x19, x11
    9284:	add	x10, x19, x0
    9288:	str	w1, [sp, #116]
    928c:	add	x1, x19, x2
    9290:	str	x1, [sp, #104]
    9294:	ldr	w22, [sp, #116]
    9298:	sub	w28, w28, #0x1
    929c:	nop
    92a0:	mov	w0, #0x28                  	// #40
    92a4:	ldr	w5, [x19, #36]
    92a8:	str	w0, [x19, #8]
    92ac:	b	92ec <BZ2_decompress@@Base+0xd44>
    92b0:	ldr	x0, [x19]
    92b4:	ldr	w1, [x0, #8]
    92b8:	cbz	w1, a1d4 <BZ2_decompress@@Base+0x1c2c>
    92bc:	ldr	x16, [x0]
    92c0:	sub	w15, w1, #0x1
    92c4:	ldr	w2, [x19, #32]
    92c8:	add	w5, w5, #0x8
    92cc:	ldr	w1, [x0, #12]
    92d0:	ldrb	w17, [x16], #1
    92d4:	add	w1, w1, #0x1
    92d8:	orr	w2, w17, w2, lsl #8
    92dc:	stp	w2, w5, [x19, #32]
    92e0:	str	x16, [x0]
    92e4:	stp	w15, w1, [x0, #8]
    92e8:	cbz	w1, a4ac <BZ2_decompress@@Base+0x1f04>
    92ec:	cmp	w22, w5
    92f0:	b.gt	92b0 <BZ2_decompress@@Base+0xd08>
    92f4:	ldr	w23, [x19, #32]
    92f8:	sub	w5, w5, w22
    92fc:	mov	w0, #0x1                   	// #1
    9300:	str	w5, [x19, #36]
    9304:	lsl	w0, w0, w22
    9308:	sub	w0, w0, #0x1
    930c:	lsr	w5, w23, w5
    9310:	and	w23, w5, w0
    9314:	b	9010 <BZ2_decompress@@Base+0xa68>
    9318:	ldr	w0, [x19, #36]
    931c:	mov	w1, #0x15                  	// #21
    9320:	str	w1, [x19, #8]
    9324:	b	9364 <BZ2_decompress@@Base+0xdbc>
    9328:	ldr	x1, [x19]
    932c:	ldr	w2, [x1, #8]
    9330:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9334:	ldr	x16, [x1]
    9338:	sub	w15, w2, #0x1
    933c:	ldr	w5, [x19, #32]
    9340:	add	w0, w0, #0x8
    9344:	ldr	w2, [x1, #12]
    9348:	ldrb	w17, [x16], #1
    934c:	add	w2, w2, #0x1
    9350:	orr	w5, w17, w5, lsl #8
    9354:	stp	w5, w0, [x19, #32]
    9358:	str	x16, [x1]
    935c:	stp	w15, w2, [x1, #8]
    9360:	cbz	w2, a298 <BZ2_decompress@@Base+0x1cf0>
    9364:	cmp	w0, #0x7
    9368:	b.le	9328 <BZ2_decompress@@Base+0xd80>
    936c:	ldr	w1, [x19, #32]
    9370:	sub	w0, w0, #0x8
    9374:	ldr	w2, [x19, #3176]
    9378:	str	w0, [x19, #36]
    937c:	lsr	w1, w1, w0
    9380:	bfi	w1, w2, #8, #24
    9384:	str	w1, [x19, #3176]
    9388:	mov	w1, #0x16                  	// #22
    938c:	str	w1, [x19, #8]
    9390:	b	93d0 <BZ2_decompress@@Base+0xe28>
    9394:	ldr	x1, [x19]
    9398:	ldr	w2, [x1, #8]
    939c:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    93a0:	ldr	x16, [x1]
    93a4:	sub	w15, w2, #0x1
    93a8:	ldr	w5, [x19, #32]
    93ac:	add	w0, w0, #0x8
    93b0:	ldr	w2, [x1, #12]
    93b4:	ldrb	w17, [x16], #1
    93b8:	add	w2, w2, #0x1
    93bc:	orr	w5, w17, w5, lsl #8
    93c0:	stp	w5, w0, [x19, #32]
    93c4:	str	x16, [x1]
    93c8:	stp	w15, w2, [x1, #8]
    93cc:	cbz	w2, a288 <BZ2_decompress@@Base+0x1ce0>
    93d0:	cmp	w0, #0x7
    93d4:	b.le	9394 <BZ2_decompress@@Base+0xdec>
    93d8:	ldr	w1, [x19, #32]
    93dc:	sub	w0, w0, #0x8
    93e0:	ldr	w2, [x19, #3176]
    93e4:	str	w0, [x19, #36]
    93e8:	lsr	w1, w1, w0
    93ec:	bfi	w1, w2, #8, #24
    93f0:	str	w1, [x19, #3176]
    93f4:	mov	w1, #0x17                  	// #23
    93f8:	str	w1, [x19, #8]
    93fc:	b	943c <BZ2_decompress@@Base+0xe94>
    9400:	ldr	x1, [x19]
    9404:	ldr	w2, [x1, #8]
    9408:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    940c:	ldr	x16, [x1]
    9410:	sub	w15, w2, #0x1
    9414:	ldr	w5, [x19, #32]
    9418:	add	w0, w0, #0x8
    941c:	ldr	w2, [x1, #12]
    9420:	ldrb	w17, [x16], #1
    9424:	add	w2, w2, #0x1
    9428:	orr	w5, w17, w5, lsl #8
    942c:	stp	w5, w0, [x19, #32]
    9430:	str	x16, [x1]
    9434:	stp	w15, w2, [x1, #8]
    9438:	cbz	w2, a258 <BZ2_decompress@@Base+0x1cb0>
    943c:	cmp	w0, #0x7
    9440:	b.le	9400 <BZ2_decompress@@Base+0xe58>
    9444:	ldr	w1, [x19, #32]
    9448:	sub	w0, w0, #0x8
    944c:	ldr	w2, [x19, #3176]
    9450:	str	w0, [x19, #36]
    9454:	lsr	w1, w1, w0
    9458:	bfi	w1, w2, #8, #24
    945c:	str	w1, [x19, #3176]
    9460:	mov	w1, #0x18                  	// #24
    9464:	str	w1, [x19, #8]
    9468:	b	94a8 <BZ2_decompress@@Base+0xf00>
    946c:	ldr	x1, [x19]
    9470:	ldr	w2, [x1, #8]
    9474:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9478:	ldr	x16, [x1]
    947c:	sub	w15, w2, #0x1
    9480:	ldr	w5, [x19, #32]
    9484:	add	w0, w0, #0x8
    9488:	ldr	w2, [x1, #12]
    948c:	ldrb	w17, [x16], #1
    9490:	add	w2, w2, #0x1
    9494:	orr	w5, w17, w5, lsl #8
    9498:	stp	w5, w0, [x19, #32]
    949c:	str	x16, [x1]
    94a0:	stp	w15, w2, [x1, #8]
    94a4:	cbz	w2, a238 <BZ2_decompress@@Base+0x1c90>
    94a8:	cmp	w0, #0x0
    94ac:	b.le	946c <BZ2_decompress@@Base+0xec4>
    94b0:	ldr	w1, [x19, #32]
    94b4:	sub	w0, w0, #0x1
    94b8:	str	w0, [x19, #36]
    94bc:	str	wzr, [x19, #56]
    94c0:	lsr	w1, w1, w0
    94c4:	and	w1, w1, #0x1
    94c8:	strb	w1, [x19, #20]
    94cc:	mov	w1, #0x19                  	// #25
    94d0:	str	w1, [x19, #8]
    94d4:	b	9514 <BZ2_decompress@@Base+0xf6c>
    94d8:	ldr	x1, [x19]
    94dc:	ldr	w2, [x1, #8]
    94e0:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    94e4:	ldr	x16, [x1]
    94e8:	sub	w15, w2, #0x1
    94ec:	ldr	w5, [x19, #32]
    94f0:	add	w0, w0, #0x8
    94f4:	ldr	w2, [x1, #12]
    94f8:	ldrb	w17, [x16], #1
    94fc:	add	w2, w2, #0x1
    9500:	orr	w5, w17, w5, lsl #8
    9504:	stp	w5, w0, [x19, #32]
    9508:	str	x16, [x1]
    950c:	stp	w15, w2, [x1, #8]
    9510:	cbz	w2, a228 <BZ2_decompress@@Base+0x1c80>
    9514:	cmp	w0, #0x7
    9518:	b.le	94d8 <BZ2_decompress@@Base+0xf30>
    951c:	ldr	w1, [x19, #32]
    9520:	sub	w0, w0, #0x8
    9524:	ldr	w2, [x19, #56]
    9528:	str	w0, [x19, #36]
    952c:	lsr	w1, w1, w0
    9530:	bfi	w1, w2, #8, #24
    9534:	str	w1, [x19, #56]
    9538:	mov	w1, #0x1a                  	// #26
    953c:	str	w1, [x19, #8]
    9540:	b	9580 <BZ2_decompress@@Base+0xfd8>
    9544:	ldr	x1, [x19]
    9548:	ldr	w2, [x1, #8]
    954c:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9550:	ldr	x16, [x1]
    9554:	sub	w15, w2, #0x1
    9558:	ldr	w5, [x19, #32]
    955c:	add	w0, w0, #0x8
    9560:	ldr	w2, [x1, #12]
    9564:	ldrb	w17, [x16], #1
    9568:	add	w2, w2, #0x1
    956c:	orr	w5, w17, w5, lsl #8
    9570:	stp	w5, w0, [x19, #32]
    9574:	str	x16, [x1]
    9578:	stp	w15, w2, [x1, #8]
    957c:	cbz	w2, a218 <BZ2_decompress@@Base+0x1c70>
    9580:	cmp	w0, #0x7
    9584:	b.le	9544 <BZ2_decompress@@Base+0xf9c>
    9588:	ldr	w1, [x19, #32]
    958c:	sub	w0, w0, #0x8
    9590:	ldr	w2, [x19, #56]
    9594:	str	w0, [x19, #36]
    9598:	lsr	w1, w1, w0
    959c:	bfi	w1, w2, #8, #24
    95a0:	str	w1, [x19, #56]
    95a4:	mov	w1, #0x1b                  	// #27
    95a8:	str	w1, [x19, #8]
    95ac:	b	95ec <BZ2_decompress@@Base+0x1044>
    95b0:	ldr	x1, [x19]
    95b4:	ldr	w2, [x1, #8]
    95b8:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    95bc:	ldr	x16, [x1]
    95c0:	sub	w15, w2, #0x1
    95c4:	ldr	w5, [x19, #32]
    95c8:	add	w0, w0, #0x8
    95cc:	ldr	w2, [x1, #12]
    95d0:	ldrb	w17, [x16], #1
    95d4:	add	w2, w2, #0x1
    95d8:	orr	w5, w17, w5, lsl #8
    95dc:	stp	w5, w0, [x19, #32]
    95e0:	str	x16, [x1]
    95e4:	stp	w15, w2, [x1, #8]
    95e8:	cbz	w2, a208 <BZ2_decompress@@Base+0x1c60>
    95ec:	cmp	w0, #0x7
    95f0:	b.le	95b0 <BZ2_decompress@@Base+0x1008>
    95f4:	ldr	w1, [x19, #32]
    95f8:	sub	w0, w0, #0x8
    95fc:	ldr	w2, [x19, #56]
    9600:	str	w0, [x19, #36]
    9604:	lsr	w1, w1, w0
    9608:	bfi	w1, w2, #8, #24
    960c:	str	w1, [x19, #56]
    9610:	tbnz	w1, #31, 9920 <BZ2_decompress@@Base+0x1378>
    9614:	ldr	w2, [x19, #40]
    9618:	mov	w5, #0x86a0                	// #34464
    961c:	movk	w5, #0x1, lsl #16
    9620:	mul	w2, w2, w5
    9624:	add	w2, w2, #0xa
    9628:	cmp	w1, w2
    962c:	b.gt	9920 <BZ2_decompress@@Base+0x1378>
    9630:	mov	w3, #0x0                   	// #0
    9634:	sxtw	x30, w3
    9638:	add	x17, x19, #0xd7c
    963c:	mov	w1, #0x1c                  	// #28
    9640:	str	w1, [x19, #8]
    9644:	str	w30, [sp, #128]
    9648:	b	9688 <BZ2_decompress@@Base+0x10e0>
    964c:	ldr	x1, [x19]
    9650:	ldr	w2, [x1, #8]
    9654:	cbz	w2, a1dc <BZ2_decompress@@Base+0x1c34>
    9658:	ldr	x15, [x1]
    965c:	add	w0, w0, #0x8
    9660:	ldr	w3, [x19, #32]
    9664:	sub	w2, w2, #0x1
    9668:	ldr	w5, [x1, #12]
    966c:	ldrb	w16, [x15], #1
    9670:	add	w5, w5, #0x1
    9674:	orr	w16, w16, w3, lsl #8
    9678:	stp	w16, w0, [x19, #32]
    967c:	str	x15, [x1]
    9680:	stp	w2, w5, [x1, #8]
    9684:	cbz	w5, a1e8 <BZ2_decompress@@Base+0x1c40>
    9688:	cmp	w0, #0x0
    968c:	b.le	964c <BZ2_decompress@@Base+0x10a4>
    9690:	ldr	w1, [x19, #32]
    9694:	sub	w0, w0, #0x1
    9698:	str	w0, [x19, #36]
    969c:	lsr	w1, w1, w0
    96a0:	and	w1, w1, #0x1
    96a4:	strb	w1, [x17, x30]
    96a8:	add	x30, x30, #0x1
    96ac:	cmp	w30, #0xf
    96b0:	b.le	963c <BZ2_decompress@@Base+0x1094>
    96b4:	add	x0, x19, #0xc7c
    96b8:	strb	wzr, [x0], #1
    96bc:	cmp	x17, x0
    96c0:	b.ne	96b8 <BZ2_decompress@@Base+0x1110>  // b.any
    96c4:	mov	w3, #0x0                   	// #0
    96c8:	add	x0, x19, w3, sxtw
    96cc:	ldrb	w0, [x0, #3452]
    96d0:	cbz	w0, 9768 <BZ2_decompress@@Base+0x11c0>
    96d4:	mov	w25, #0x0                   	// #0
    96d8:	ldr	w5, [x19, #36]
    96dc:	lsl	w0, w3, #4
    96e0:	mov	w17, #0x1d                  	// #29
    96e4:	str	w0, [sp, #128]
    96e8:	str	w17, [x19, #8]
    96ec:	b	972c <BZ2_decompress@@Base+0x1184>
    96f0:	ldr	x0, [x19]
    96f4:	ldr	w1, [x0, #8]
    96f8:	cbz	w1, a1d4 <BZ2_decompress@@Base+0x1c2c>
    96fc:	ldr	x15, [x0]
    9700:	add	w5, w5, #0x8
    9704:	ldr	w30, [x19, #32]
    9708:	sub	w1, w1, #0x1
    970c:	ldr	w2, [x0, #12]
    9710:	ldrb	w16, [x15], #1
    9714:	add	w2, w2, #0x1
    9718:	orr	w16, w16, w30, lsl #8
    971c:	stp	w16, w5, [x19, #32]
    9720:	str	x15, [x0]
    9724:	stp	w1, w2, [x0, #8]
    9728:	cbz	w2, a248 <BZ2_decompress@@Base+0x1ca0>
    972c:	cmp	w5, #0x0
    9730:	b.le	96f0 <BZ2_decompress@@Base+0x1148>
    9734:	ldr	w0, [x19, #32]
    9738:	sub	w5, w5, #0x1
    973c:	str	w5, [x19, #36]
    9740:	lsr	w0, w0, w5
    9744:	tbz	w0, #0, 975c <BZ2_decompress@@Base+0x11b4>
    9748:	ldr	w0, [sp, #128]
    974c:	mov	w1, #0x1                   	// #1
    9750:	add	w0, w25, w0
    9754:	add	x0, x19, w0, sxtw
    9758:	strb	w1, [x0, #3196]
    975c:	add	w25, w25, #0x1
    9760:	cmp	w25, #0xf
    9764:	b.le	96e8 <BZ2_decompress@@Base+0x1140>
    9768:	add	w3, w3, #0x1
    976c:	cmp	w3, #0xf
    9770:	b.le	96c8 <BZ2_decompress@@Base+0x1120>
    9774:	add	x5, x19, #0xc7c
    9778:	mov	x0, #0x0                   	// #0
    977c:	mov	w1, #0x0                   	// #0
    9780:	str	wzr, [x19, #3192]
    9784:	nop
    9788:	ldrb	w2, [x5, x0]
    978c:	cbz	w2, 97a0 <BZ2_decompress@@Base+0x11f8>
    9790:	add	x2, x19, w1, sxtw
    9794:	add	w1, w1, #0x1
    9798:	strb	w0, [x2, #3468]
    979c:	str	w1, [x19, #3192]
    97a0:	add	x0, x0, #0x1
    97a4:	cmp	x0, #0x100
    97a8:	b.ne	9788 <BZ2_decompress@@Base+0x11e0>  // b.any
    97ac:	cbz	w1, 9920 <BZ2_decompress@@Base+0x1378>
    97b0:	add	w6, w1, #0x2
    97b4:	nop
    97b8:	mov	w1, #0x1e                  	// #30
    97bc:	ldr	w0, [x19, #36]
    97c0:	str	w1, [x19, #8]
    97c4:	b	9804 <BZ2_decompress@@Base+0x125c>
    97c8:	ldr	x1, [x19]
    97cc:	ldr	w2, [x1, #8]
    97d0:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    97d4:	ldr	x16, [x1]
    97d8:	sub	w15, w2, #0x1
    97dc:	ldr	w5, [x19, #32]
    97e0:	add	w0, w0, #0x8
    97e4:	ldr	w2, [x1, #12]
    97e8:	ldrb	w17, [x16], #1
    97ec:	add	w2, w2, #0x1
    97f0:	orr	w5, w17, w5, lsl #8
    97f4:	stp	w5, w0, [x19, #32]
    97f8:	str	x16, [x1]
    97fc:	stp	w15, w2, [x1, #8]
    9800:	cbz	w2, a49c <BZ2_decompress@@Base+0x1ef4>
    9804:	cmp	w0, #0x2
    9808:	b.le	97c8 <BZ2_decompress@@Base+0x1220>
    980c:	ldr	w7, [x19, #32]
    9810:	sub	w0, w0, #0x3
    9814:	str	w0, [x19, #36]
    9818:	lsr	w7, w7, w0
    981c:	and	w7, w7, #0x7
    9820:	sub	w1, w7, #0x2
    9824:	cmp	w1, #0x4
    9828:	b.hi	9920 <BZ2_decompress@@Base+0x1378>  // b.pmore
    982c:	mov	w1, #0x1f                  	// #31
    9830:	str	w1, [x19, #8]
    9834:	b	9874 <BZ2_decompress@@Base+0x12cc>
    9838:	ldr	x1, [x19]
    983c:	ldr	w2, [x1, #8]
    9840:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9844:	ldr	x16, [x1]
    9848:	sub	w15, w2, #0x1
    984c:	ldr	w5, [x19, #32]
    9850:	add	w0, w0, #0x8
    9854:	ldr	w2, [x1, #12]
    9858:	ldrb	w17, [x16], #1
    985c:	add	w2, w2, #0x1
    9860:	orr	w5, w17, w5, lsl #8
    9864:	stp	w5, w0, [x19, #32]
    9868:	str	x16, [x1]
    986c:	stp	w15, w2, [x1, #8]
    9870:	cbz	w2, a2d8 <BZ2_decompress@@Base+0x1d30>
    9874:	cmp	w0, #0xe
    9878:	b.le	9838 <BZ2_decompress@@Base+0x1290>
    987c:	ldr	w1, [x19, #32]
    9880:	sub	w0, w0, #0xf
    9884:	str	w0, [x19, #36]
    9888:	lsr	w1, w1, w0
    988c:	ands	w8, w1, #0x7fff
    9890:	b.eq	a540 <BZ2_decompress@@Base+0x1f98>  // b.none
    9894:	mov	w25, #0x0                   	// #0
    9898:	mov	w3, #0x0                   	// #0
    989c:	sxtw	x30, w3
    98a0:	mov	x15, #0x651e                	// #25886
    98a4:	add	x1, x19, x15
    98a8:	str	x1, [sp, #128]
    98ac:	mov	w3, w30
    98b0:	mov	w1, #0x20                  	// #32
    98b4:	str	w1, [x19, #8]
    98b8:	b	98f8 <BZ2_decompress@@Base+0x1350>
    98bc:	ldr	x1, [x19]
    98c0:	ldr	w2, [x1, #8]
    98c4:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    98c8:	ldr	x15, [x1]
    98cc:	add	w0, w0, #0x8
    98d0:	ldr	w17, [x19, #32]
    98d4:	sub	w2, w2, #0x1
    98d8:	ldr	w5, [x1, #12]
    98dc:	ldrb	w16, [x15], #1
    98e0:	add	w5, w5, #0x1
    98e4:	orr	w16, w16, w17, lsl #8
    98e8:	stp	w16, w0, [x19, #32]
    98ec:	str	x15, [x1]
    98f0:	stp	w2, w5, [x1, #8]
    98f4:	cbz	w5, a1f8 <BZ2_decompress@@Base+0x1c50>
    98f8:	cmp	w0, #0x0
    98fc:	b.le	98bc <BZ2_decompress@@Base+0x1314>
    9900:	ldr	w1, [x19, #32]
    9904:	sub	w0, w0, #0x1
    9908:	str	w0, [x19, #36]
    990c:	lsr	w1, w1, w0
    9910:	tbz	w1, #0, a61c <BZ2_decompress@@Base+0x2074>
    9914:	add	w25, w25, #0x1
    9918:	cmp	w25, w7
    991c:	b.lt	98b0 <BZ2_decompress@@Base+0x1308>  // b.tstop
    9920:	mov	w0, #0xfffffffc            	// #-4
    9924:	b	86b8 <BZ2_decompress@@Base+0x110>
    9928:	mov	w0, #0x1                   	// #1
    992c:	mov	w12, #0xffffffff            	// #-1
    9930:	str	w0, [sp, #120]
    9934:	ldr	w1, [sp, #120]
    9938:	cmp	w13, #0x0
    993c:	add	w0, w12, w1
    9940:	add	w12, w12, w1, lsl #1
    9944:	lsl	w2, w1, #1
    9948:	csel	w12, w12, w0, ne  // ne = any
    994c:	cbnz	w28, 99bc <BZ2_decompress@@Base+0x1414>
    9950:	add	w4, w4, #0x1
    9954:	cmp	w4, w8
    9958:	b.ge	a93c <BZ2_decompress@@Base+0x2394>  // b.tcont
    995c:	add	x1, x19, w4, sxtw
    9960:	mov	x10, #0x408                 	// #1032
    9964:	add	x1, x1, #0x1, lsl #12
    9968:	mov	x11, #0x3e80                	// #16000
    996c:	mov	x15, #0xb17c                	// #45436
    9970:	mov	x16, #0xe1dc                	// #57820
    9974:	mov	x17, #0xc9ac                	// #51628
    9978:	mov	w28, #0x32                  	// #50
    997c:	ldrb	w5, [x1, #3788]
    9980:	ldrb	w1, [x1, #3788]
    9984:	mov	x0, x5
    9988:	add	x5, x5, x11
    998c:	str	w1, [sp, #124]
    9990:	add	x1, x19, x5, lsl #2
    9994:	mul	x0, x0, x10
    9998:	add	x11, x0, x15
    999c:	add	x5, x0, x16
    99a0:	add	x0, x0, x17
    99a4:	ldr	w1, [x1, #12]
    99a8:	add	x11, x19, x11
    99ac:	add	x10, x19, x0
    99b0:	str	w1, [sp, #116]
    99b4:	add	x1, x19, x5
    99b8:	str	x1, [sp, #104]
    99bc:	ldr	w22, [sp, #116]
    99c0:	sub	w28, w28, #0x1
    99c4:	str	w2, [sp, #120]
    99c8:	mov	w0, #0x26                  	// #38
    99cc:	ldr	w5, [x19, #36]
    99d0:	str	w0, [x19, #8]
    99d4:	b	9a14 <BZ2_decompress@@Base+0x146c>
    99d8:	ldr	x0, [x19]
    99dc:	ldr	w1, [x0, #8]
    99e0:	cbz	w1, a1d4 <BZ2_decompress@@Base+0x1c2c>
    99e4:	ldr	x16, [x0]
    99e8:	sub	w15, w1, #0x1
    99ec:	ldr	w2, [x19, #32]
    99f0:	add	w5, w5, #0x8
    99f4:	ldr	w1, [x0, #12]
    99f8:	ldrb	w17, [x16], #1
    99fc:	add	w1, w1, #0x1
    9a00:	orr	w2, w17, w2, lsl #8
    9a04:	stp	w2, w5, [x19, #32]
    9a08:	str	x16, [x0]
    9a0c:	stp	w15, w1, [x0, #8]
    9a10:	cbz	w1, a4bc <BZ2_decompress@@Base+0x1f14>
    9a14:	cmp	w22, w5
    9a18:	b.gt	99d8 <BZ2_decompress@@Base+0x1430>
    9a1c:	ldr	w23, [x19, #32]
    9a20:	sub	w5, w5, w22
    9a24:	mov	w0, #0x1                   	// #1
    9a28:	str	w5, [x19, #36]
    9a2c:	lsl	w0, w0, w22
    9a30:	sub	w0, w0, #0x1
    9a34:	lsr	w5, w23, w5
    9a38:	and	w23, w5, w0
    9a3c:	b	8f84 <BZ2_decompress@@Base+0x9dc>
    9a40:	ldr	w1, [x19, #36]
    9a44:	mov	w0, #0x31                  	// #49
    9a48:	str	w0, [x19, #8]
    9a4c:	b	9a8c <BZ2_decompress@@Base+0x14e4>
    9a50:	ldr	x0, [x19]
    9a54:	ldr	w2, [x0, #8]
    9a58:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9a5c:	ldr	x16, [x0]
    9a60:	sub	w15, w2, #0x1
    9a64:	ldr	w5, [x19, #32]
    9a68:	add	w1, w1, #0x8
    9a6c:	ldr	w2, [x0, #12]
    9a70:	ldrb	w17, [x16], #1
    9a74:	add	w2, w2, #0x1
    9a78:	orr	w5, w17, w5, lsl #8
    9a7c:	stp	w5, w1, [x19, #32]
    9a80:	str	x16, [x0]
    9a84:	stp	w15, w2, [x0, #8]
    9a88:	cbz	w2, a278 <BZ2_decompress@@Base+0x1cd0>
    9a8c:	cmp	w1, #0x7
    9a90:	b.le	9a50 <BZ2_decompress@@Base+0x14a8>
    9a94:	ldr	w0, [x19, #32]
    9a98:	sub	w1, w1, #0x8
    9a9c:	ldr	w2, [x19, #3180]
    9aa0:	str	w1, [x19, #36]
    9aa4:	lsr	w0, w0, w1
    9aa8:	bfi	w0, w2, #8, #24
    9aac:	str	w0, [x19, #3180]
    9ab0:	mov	w0, #0x32                  	// #50
    9ab4:	str	w0, [x19, #8]
    9ab8:	b	9af8 <BZ2_decompress@@Base+0x1550>
    9abc:	ldr	x0, [x19]
    9ac0:	ldr	w2, [x0, #8]
    9ac4:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9ac8:	ldr	x16, [x0]
    9acc:	sub	w15, w2, #0x1
    9ad0:	ldr	w5, [x19, #32]
    9ad4:	add	w1, w1, #0x8
    9ad8:	ldr	w2, [x0, #12]
    9adc:	ldrb	w17, [x16], #1
    9ae0:	add	w2, w2, #0x1
    9ae4:	orr	w5, w17, w5, lsl #8
    9ae8:	stp	w5, w1, [x19, #32]
    9aec:	str	x16, [x0]
    9af0:	stp	w15, w2, [x0, #8]
    9af4:	cbz	w2, a268 <BZ2_decompress@@Base+0x1cc0>
    9af8:	cmp	w1, #0x7
    9afc:	b.le	9abc <BZ2_decompress@@Base+0x1514>
    9b00:	ldr	w0, [x19, #32]
    9b04:	sub	w1, w1, #0x8
    9b08:	ldr	w2, [x19, #3180]
    9b0c:	str	w1, [x19, #36]
    9b10:	lsr	w1, w0, w1
    9b14:	mov	w0, #0x1                   	// #1
    9b18:	bfi	w1, w2, #8, #24
    9b1c:	str	w0, [x19, #8]
    9b20:	mov	w0, #0x4                   	// #4
    9b24:	str	w1, [x19, #3180]
    9b28:	b	86b8 <BZ2_decompress@@Base+0x110>
    9b2c:	ldr	w1, [x19, #36]
    9b30:	b	9ab0 <BZ2_decompress@@Base+0x1508>
    9b34:	ldr	w0, [x19, #36]
    9b38:	b	8998 <BZ2_decompress@@Base+0x3f0>
    9b3c:	ldr	w0, [x19, #36]
    9b40:	b	8a04 <BZ2_decompress@@Base+0x45c>
    9b44:	ldr	w0, [x19, #36]
    9b48:	b	892c <BZ2_decompress@@Base+0x384>
    9b4c:	ldr	w1, [x19, #36]
    9b50:	mov	w0, #0x30                  	// #48
    9b54:	str	w0, [x19, #8]
    9b58:	b	9b98 <BZ2_decompress@@Base+0x15f0>
    9b5c:	ldr	x0, [x19]
    9b60:	ldr	w2, [x0, #8]
    9b64:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9b68:	ldr	x16, [x0]
    9b6c:	sub	w15, w2, #0x1
    9b70:	ldr	w5, [x19, #32]
    9b74:	add	w1, w1, #0x8
    9b78:	ldr	w2, [x0, #12]
    9b7c:	ldrb	w17, [x16], #1
    9b80:	add	w2, w2, #0x1
    9b84:	orr	w5, w17, w5, lsl #8
    9b88:	stp	w5, w1, [x19, #32]
    9b8c:	str	x16, [x0]
    9b90:	stp	w15, w2, [x0, #8]
    9b94:	cbz	w2, a2a8 <BZ2_decompress@@Base+0x1d00>
    9b98:	cmp	w1, #0x7
    9b9c:	b.le	9b5c <BZ2_decompress@@Base+0x15b4>
    9ba0:	ldr	w0, [x19, #32]
    9ba4:	sub	w1, w1, #0x8
    9ba8:	ldr	w2, [x19, #3180]
    9bac:	str	w1, [x19, #36]
    9bb0:	lsr	w0, w0, w1
    9bb4:	bfi	w0, w2, #8, #24
    9bb8:	str	w0, [x19, #3180]
    9bbc:	b	9a44 <BZ2_decompress@@Base+0x149c>
    9bc0:	ldr	w1, [x19, #36]
    9bc4:	mov	w0, #0x2f                  	// #47
    9bc8:	str	w0, [x19, #8]
    9bcc:	b	9c0c <BZ2_decompress@@Base+0x1664>
    9bd0:	ldr	x0, [x19]
    9bd4:	ldr	w2, [x0, #8]
    9bd8:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9bdc:	ldr	x16, [x0]
    9be0:	sub	w15, w2, #0x1
    9be4:	ldr	w5, [x19, #32]
    9be8:	add	w1, w1, #0x8
    9bec:	ldr	w2, [x0, #12]
    9bf0:	ldrb	w17, [x16], #1
    9bf4:	add	w2, w2, #0x1
    9bf8:	orr	w5, w17, w5, lsl #8
    9bfc:	stp	w5, w1, [x19, #32]
    9c00:	str	x16, [x0]
    9c04:	stp	w15, w2, [x0, #8]
    9c08:	cbz	w2, a2e8 <BZ2_decompress@@Base+0x1d40>
    9c0c:	cmp	w1, #0x7
    9c10:	b.le	9bd0 <BZ2_decompress@@Base+0x1628>
    9c14:	ldr	w0, [x19, #32]
    9c18:	sub	w1, w1, #0x8
    9c1c:	ldr	w2, [x19, #3180]
    9c20:	str	w1, [x19, #36]
    9c24:	lsr	w0, w0, w1
    9c28:	bfi	w0, w2, #8, #24
    9c2c:	str	w0, [x19, #3180]
    9c30:	b	9b50 <BZ2_decompress@@Base+0x15a8>
    9c34:	ldr	w1, [x19, #36]
    9c38:	mov	w0, #0x2e                  	// #46
    9c3c:	str	w0, [x19, #8]
    9c40:	b	9c80 <BZ2_decompress@@Base+0x16d8>
    9c44:	ldr	x0, [x19]
    9c48:	ldr	w2, [x0, #8]
    9c4c:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9c50:	ldr	x16, [x0]
    9c54:	sub	w15, w2, #0x1
    9c58:	ldr	w5, [x19, #32]
    9c5c:	add	w1, w1, #0x8
    9c60:	ldr	w2, [x0, #12]
    9c64:	ldrb	w17, [x16], #1
    9c68:	add	w2, w2, #0x1
    9c6c:	orr	w5, w17, w5, lsl #8
    9c70:	stp	w5, w1, [x19, #32]
    9c74:	str	x16, [x0]
    9c78:	stp	w15, w2, [x0, #8]
    9c7c:	cbz	w2, a2b8 <BZ2_decompress@@Base+0x1d10>
    9c80:	cmp	w1, #0x7
    9c84:	b.le	9c44 <BZ2_decompress@@Base+0x169c>
    9c88:	ldr	w2, [x19, #32]
    9c8c:	sub	w1, w1, #0x8
    9c90:	str	w1, [x19, #36]
    9c94:	mov	w0, #0xfffffffc            	// #-4
    9c98:	lsr	w2, w2, w1
    9c9c:	and	w2, w2, #0xff
    9ca0:	cmp	w2, #0x90
    9ca4:	b.ne	86b8 <BZ2_decompress@@Base+0x110>  // b.any
    9ca8:	str	wzr, [x19, #3180]
    9cac:	b	9bc4 <BZ2_decompress@@Base+0x161c>
    9cb0:	ldr	w0, [x19, #36]
    9cb4:	b	989c <BZ2_decompress@@Base+0x12f4>
    9cb8:	ldr	w0, [x19, #36]
    9cbc:	mov	w1, #0x2a                  	// #42
    9cc0:	str	w1, [x19, #8]
    9cc4:	b	9d04 <BZ2_decompress@@Base+0x175c>
    9cc8:	ldr	x1, [x19]
    9ccc:	ldr	w2, [x1, #8]
    9cd0:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9cd4:	ldr	x16, [x1]
    9cd8:	sub	w15, w2, #0x1
    9cdc:	ldr	w5, [x19, #32]
    9ce0:	add	w0, w0, #0x8
    9ce4:	ldr	w2, [x1, #12]
    9ce8:	ldrb	w17, [x16], #1
    9cec:	add	w2, w2, #0x1
    9cf0:	orr	w5, w17, w5, lsl #8
    9cf4:	stp	w5, w0, [x19, #32]
    9cf8:	str	x16, [x1]
    9cfc:	stp	w15, w2, [x1, #8]
    9d00:	cbz	w2, a408 <BZ2_decompress@@Base+0x1e60>
    9d04:	cmp	w0, #0x7
    9d08:	b.le	9cc8 <BZ2_decompress@@Base+0x1720>
    9d0c:	ldr	w2, [x19, #32]
    9d10:	sub	w1, w0, #0x8
    9d14:	str	w1, [x19, #36]
    9d18:	mov	w0, #0xfffffffc            	// #-4
    9d1c:	lsr	w2, w2, w1
    9d20:	and	w2, w2, #0xff
    9d24:	cmp	w2, #0x72
    9d28:	b.ne	86b8 <BZ2_decompress@@Base+0x110>  // b.any
    9d2c:	mov	w0, #0x2b                  	// #43
    9d30:	str	w0, [x19, #8]
    9d34:	b	9d74 <BZ2_decompress@@Base+0x17cc>
    9d38:	ldr	x0, [x19]
    9d3c:	ldr	w2, [x0, #8]
    9d40:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9d44:	ldr	x16, [x0]
    9d48:	sub	w15, w2, #0x1
    9d4c:	ldr	w5, [x19, #32]
    9d50:	add	w1, w1, #0x8
    9d54:	ldr	w2, [x0, #12]
    9d58:	ldrb	w17, [x16], #1
    9d5c:	add	w2, w2, #0x1
    9d60:	orr	w5, w17, w5, lsl #8
    9d64:	stp	w5, w1, [x19, #32]
    9d68:	str	x16, [x0]
    9d6c:	stp	w15, w2, [x0, #8]
    9d70:	cbz	w2, a398 <BZ2_decompress@@Base+0x1df0>
    9d74:	cmp	w1, #0x7
    9d78:	b.le	9d38 <BZ2_decompress@@Base+0x1790>
    9d7c:	ldr	w2, [x19, #32]
    9d80:	sub	w1, w1, #0x8
    9d84:	str	w1, [x19, #36]
    9d88:	mov	w0, #0xfffffffc            	// #-4
    9d8c:	lsr	w2, w2, w1
    9d90:	and	w2, w2, #0xff
    9d94:	cmp	w2, #0x45
    9d98:	b.ne	86b8 <BZ2_decompress@@Base+0x110>  // b.any
    9d9c:	mov	w0, #0x2c                  	// #44
    9da0:	str	w0, [x19, #8]
    9da4:	b	9de4 <BZ2_decompress@@Base+0x183c>
    9da8:	ldr	x0, [x19]
    9dac:	ldr	w2, [x0, #8]
    9db0:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9db4:	ldr	x16, [x0]
    9db8:	sub	w15, w2, #0x1
    9dbc:	ldr	w5, [x19, #32]
    9dc0:	add	w1, w1, #0x8
    9dc4:	ldr	w2, [x0, #12]
    9dc8:	ldrb	w17, [x16], #1
    9dcc:	add	w2, w2, #0x1
    9dd0:	orr	w5, w17, w5, lsl #8
    9dd4:	stp	w5, w1, [x19, #32]
    9dd8:	str	x16, [x0]
    9ddc:	stp	w15, w2, [x0, #8]
    9de0:	cbz	w2, a368 <BZ2_decompress@@Base+0x1dc0>
    9de4:	cmp	w1, #0x7
    9de8:	b.le	9da8 <BZ2_decompress@@Base+0x1800>
    9dec:	ldr	w2, [x19, #32]
    9df0:	sub	w1, w1, #0x8
    9df4:	str	w1, [x19, #36]
    9df8:	mov	w0, #0xfffffffc            	// #-4
    9dfc:	lsr	w2, w2, w1
    9e00:	and	w2, w2, #0xff
    9e04:	cmp	w2, #0x38
    9e08:	b.ne	86b8 <BZ2_decompress@@Base+0x110>  // b.any
    9e0c:	mov	w0, #0x2d                  	// #45
    9e10:	str	w0, [x19, #8]
    9e14:	b	9e54 <BZ2_decompress@@Base+0x18ac>
    9e18:	ldr	x0, [x19]
    9e1c:	ldr	w2, [x0, #8]
    9e20:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9e24:	ldr	x16, [x0]
    9e28:	sub	w15, w2, #0x1
    9e2c:	ldr	w5, [x19, #32]
    9e30:	add	w1, w1, #0x8
    9e34:	ldr	w2, [x0, #12]
    9e38:	ldrb	w17, [x16], #1
    9e3c:	add	w2, w2, #0x1
    9e40:	orr	w5, w17, w5, lsl #8
    9e44:	stp	w5, w1, [x19, #32]
    9e48:	str	x16, [x0]
    9e4c:	stp	w15, w2, [x0, #8]
    9e50:	cbz	w2, a2c8 <BZ2_decompress@@Base+0x1d20>
    9e54:	cmp	w1, #0x7
    9e58:	b.le	9e18 <BZ2_decompress@@Base+0x1870>
    9e5c:	ldr	w2, [x19, #32]
    9e60:	sub	w1, w1, #0x8
    9e64:	str	w1, [x19, #36]
    9e68:	mov	w0, #0xfffffffc            	// #-4
    9e6c:	lsr	w2, w2, w1
    9e70:	and	w2, w2, #0xff
    9e74:	cmp	w2, #0x50
    9e78:	b.ne	86b8 <BZ2_decompress@@Base+0x110>  // b.any
    9e7c:	b	9c38 <BZ2_decompress@@Base+0x1690>
    9e80:	ldr	w1, [x19, #36]
    9e84:	b	9d2c <BZ2_decompress@@Base+0x1784>
    9e88:	ldr	w1, [x19, #36]
    9e8c:	b	9d9c <BZ2_decompress@@Base+0x17f4>
    9e90:	ldr	w1, [x19, #36]
    9e94:	b	9e0c <BZ2_decompress@@Base+0x1864>
    9e98:	ldr	w0, [x19, #36]
    9e9c:	b	9388 <BZ2_decompress@@Base+0xde0>
    9ea0:	ldr	w0, [x19, #36]
    9ea4:	b	93f4 <BZ2_decompress@@Base+0xe4c>
    9ea8:	ldr	w0, [x19, #36]
    9eac:	b	9460 <BZ2_decompress@@Base+0xeb8>
    9eb0:	ldr	w0, [x19, #36]
    9eb4:	mov	w1, #0xd                   	// #13
    9eb8:	str	w1, [x19, #8]
    9ebc:	b	9ef8 <BZ2_decompress@@Base+0x1950>
    9ec0:	ldr	w1, [x5, #8]
    9ec4:	cbz	w1, a1d4 <BZ2_decompress@@Base+0x1c2c>
    9ec8:	ldr	x16, [x5]
    9ecc:	sub	w15, w1, #0x1
    9ed0:	ldr	w2, [x19, #32]
    9ed4:	add	w0, w0, #0x8
    9ed8:	ldr	w1, [x5, #12]
    9edc:	ldrb	w17, [x16], #1
    9ee0:	add	w1, w1, #0x1
    9ee4:	orr	w2, w17, w2, lsl #8
    9ee8:	stp	w2, w0, [x19, #32]
    9eec:	str	x16, [x5]
    9ef0:	stp	w15, w1, [x5, #8]
    9ef4:	cbz	w1, a328 <BZ2_decompress@@Base+0x1d80>
    9ef8:	cmp	w0, #0x7
    9efc:	b.le	9ec0 <BZ2_decompress@@Base+0x1918>
    9f00:	ldr	w1, [x19, #32]
    9f04:	sub	w0, w0, #0x8
    9f08:	str	w0, [x19, #36]
    9f0c:	lsr	w0, w1, w0
    9f10:	and	w0, w0, #0xff
    9f14:	sub	w1, w0, #0x31
    9f18:	cmp	w1, #0x8
    9f1c:	b.hi	a54c <BZ2_decompress@@Base+0x1fa4>  // b.pmore
    9f20:	ldrb	w2, [x19, #44]
    9f24:	sub	w0, w0, #0x30
    9f28:	mov	w1, #0x86a0                	// #34464
    9f2c:	str	x5, [sp, #128]
    9f30:	movk	w1, #0x1, lsl #16
    9f34:	ldr	x15, [x5, #56]
    9f38:	str	w0, [x19, #40]
    9f3c:	mul	w1, w0, w1
    9f40:	ldr	x0, [x5, #72]
    9f44:	cbz	w2, 8860 <BZ2_decompress@@Base+0x2b8>
    9f48:	lsl	w1, w1, #1
    9f4c:	mov	w2, #0x1                   	// #1
    9f50:	stp	w3, w6, [sp, #140]
    9f54:	stp	w7, w8, [sp, #148]
    9f58:	stp	w18, w4, [sp, #156]
    9f5c:	str	w13, [sp, #168]
    9f60:	str	w14, [sp, #176]
    9f64:	str	w12, [sp, #184]
    9f68:	str	w9, [sp, #192]
    9f6c:	stp	x11, x10, [sp, #200]
    9f70:	blr	x15
    9f74:	ldr	w1, [x19, #40]
    9f78:	ldr	x5, [sp, #128]
    9f7c:	mov	w2, #0x86a0                	// #34464
    9f80:	movk	w2, #0x1, lsl #16
    9f84:	ldr	x15, [x5, #56]
    9f88:	str	x0, [x19, #3160]
    9f8c:	ldr	x0, [x5, #72]
    9f90:	mul	w1, w1, w2
    9f94:	mov	w2, #0x1                   	// #1
    9f98:	asr	w1, w1, #1
    9f9c:	blr	x15
    9fa0:	ldr	x1, [x19, #3160]
    9fa4:	str	x0, [x19, #3168]
    9fa8:	ldp	w3, w6, [sp, #140]
    9fac:	cmp	x1, #0x0
    9fb0:	ldp	w7, w8, [sp, #148]
    9fb4:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    9fb8:	ldp	w18, w4, [sp, #156]
    9fbc:	ldr	w13, [sp, #168]
    9fc0:	ldr	w14, [sp, #176]
    9fc4:	ldr	w12, [sp, #184]
    9fc8:	ldr	w9, [sp, #192]
    9fcc:	ldp	x11, x10, [sp, #200]
    9fd0:	b.ne	88b4 <BZ2_decompress@@Base+0x30c>  // b.any
    9fd4:	mov	w0, #0xfffffffd            	// #-3
    9fd8:	b	86b8 <BZ2_decompress@@Base+0x110>
    9fdc:	ldr	w0, [x19, #36]
    9fe0:	b	8adc <BZ2_decompress@@Base+0x534>
    9fe4:	ldr	w0, [x19, #36]
    9fe8:	b	8a70 <BZ2_decompress@@Base+0x4c8>
    9fec:	ldr	w0, [x19, #36]
    9ff0:	mov	w1, #0x14                  	// #20
    9ff4:	str	w1, [x19, #8]
    9ff8:	b	a038 <BZ2_decompress@@Base+0x1a90>
    9ffc:	ldr	x1, [x19]
    a000:	ldr	w2, [x1, #8]
    a004:	cbz	w2, a1d4 <BZ2_decompress@@Base+0x1c2c>
    a008:	ldr	x16, [x1]
    a00c:	sub	w15, w2, #0x1
    a010:	ldr	w5, [x19, #32]
    a014:	add	w0, w0, #0x8
    a018:	ldr	w2, [x1, #12]
    a01c:	ldrb	w17, [x16], #1
    a020:	add	w2, w2, #0x1
    a024:	orr	w5, w17, w5, lsl #8
    a028:	stp	w5, w0, [x19, #32]
    a02c:	str	x16, [x1]
    a030:	stp	w15, w2, [x1, #8]
    a034:	cbz	w2, a318 <BZ2_decompress@@Base+0x1d70>
    a038:	cmp	w0, #0x7
    a03c:	b.le	9ffc <BZ2_decompress@@Base+0x1a54>
    a040:	ldr	w1, [x19, #32]
    a044:	sub	w0, w0, #0x8
    a048:	ldr	w2, [x19, #3176]
    a04c:	str	w0, [x19, #36]
    a050:	lsr	w1, w1, w0
    a054:	bfi	w1, w2, #8, #24
    a058:	str	w1, [x19, #3176]
    a05c:	b	931c <BZ2_decompress@@Base+0xd74>
    a060:	ldr	w0, [x19, #36]
    a064:	mov	w1, #0xb                   	// #11
    a068:	str	w1, [x19, #8]
    a06c:	b	a0a8 <BZ2_decompress@@Base+0x1b00>
    a070:	ldr	w1, [x5, #8]
    a074:	cbz	w1, a1d4 <BZ2_decompress@@Base+0x1c2c>
    a078:	ldr	x16, [x5]
    a07c:	sub	w15, w1, #0x1
    a080:	ldr	w2, [x19, #32]
    a084:	add	w0, w0, #0x8
    a088:	ldr	w1, [x5, #12]
    a08c:	ldrb	w17, [x16], #1
    a090:	add	w1, w1, #0x1
    a094:	orr	w2, w17, w2, lsl #8
    a098:	stp	w2, w0, [x19, #32]
    a09c:	str	x16, [x5]
    a0a0:	stp	w15, w1, [x5, #8]
    a0a4:	cbz	w1, a3b8 <BZ2_decompress@@Base+0x1e10>
    a0a8:	cmp	w0, #0x7
    a0ac:	b.le	a070 <BZ2_decompress@@Base+0x1ac8>
    a0b0:	ldr	w1, [x19, #32]
    a0b4:	sub	w0, w0, #0x8
    a0b8:	str	w0, [x19, #36]
    a0bc:	lsr	w1, w1, w0
    a0c0:	and	w1, w1, #0xff
    a0c4:	cmp	w1, #0x5a
    a0c8:	b.eq	a0d8 <BZ2_decompress@@Base+0x1b30>  // b.none
    a0cc:	mov	w0, #0xfffffffb            	// #-5
    a0d0:	b	86b8 <BZ2_decompress@@Base+0x110>
    a0d4:	ldr	w0, [x19, #36]
    a0d8:	mov	w1, #0xc                   	// #12
    a0dc:	str	w1, [x19, #8]
    a0e0:	b	a11c <BZ2_decompress@@Base+0x1b74>
    a0e4:	ldr	w1, [x5, #8]
    a0e8:	cbz	w1, a1d4 <BZ2_decompress@@Base+0x1c2c>
    a0ec:	ldr	x16, [x5]
    a0f0:	sub	w15, w1, #0x1
    a0f4:	ldr	w2, [x19, #32]
    a0f8:	add	w0, w0, #0x8
    a0fc:	ldr	w1, [x5, #12]
    a100:	ldrb	w17, [x16], #1
    a104:	add	w1, w1, #0x1
    a108:	orr	w2, w17, w2, lsl #8
    a10c:	stp	w2, w0, [x19, #32]
    a110:	str	x16, [x5]
    a114:	stp	w15, w1, [x5, #8]
    a118:	cbz	w1, a378 <BZ2_decompress@@Base+0x1dd0>
    a11c:	cmp	w0, #0x7
    a120:	b.le	a0e4 <BZ2_decompress@@Base+0x1b3c>
    a124:	ldr	w1, [x19, #32]
    a128:	sub	w0, w0, #0x8
    a12c:	str	w0, [x19, #36]
    a130:	lsr	w1, w1, w0
    a134:	and	w1, w1, #0xff
    a138:	cmp	w1, #0x68
    a13c:	b.eq	9eb4 <BZ2_decompress@@Base+0x190c>  // b.none
    a140:	mov	w0, #0xfffffffb            	// #-5
    a144:	b	86b8 <BZ2_decompress@@Base+0x110>
    a148:	ldr	w0, [x19, #36]
    a14c:	b	94cc <BZ2_decompress@@Base+0xf24>
    a150:	ldr	w0, [x19, #36]
    a154:	b	9538 <BZ2_decompress@@Base+0xf90>
    a158:	ldr	w0, [x19, #36]
    a15c:	b	95a4 <BZ2_decompress@@Base+0xffc>
    a160:	ldr	w0, [x19, #36]
    a164:	b	982c <BZ2_decompress@@Base+0x1284>
    a168:	ldr	w0, [x19, #36]
    a16c:	b	9634 <BZ2_decompress@@Base+0x108c>
    a170:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    a174:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    a178:	add	x1, x1, #0xcf8
    a17c:	str	w3, [sp, #128]
    a180:	ldr	x0, [x0, #4016]
    a184:	stp	w6, w7, [sp, #140]
    a188:	stp	w8, w18, [sp, #148]
    a18c:	stp	w4, w13, [sp, #156]
    a190:	ldr	x0, [x0]
    a194:	str	w14, [sp, #168]
    a198:	str	w12, [sp, #176]
    a19c:	str	w9, [sp, #184]
    a1a0:	stp	x11, x10, [sp, #192]
    a1a4:	bl	16e0 <fprintf@plt>
    a1a8:	ldr	w0, [x19, #36]
    a1ac:	ldr	w3, [sp, #128]
    a1b0:	ldp	w6, w7, [sp, #140]
    a1b4:	str	wzr, [x19, #3176]
    a1b8:	ldp	w8, w18, [sp, #148]
    a1bc:	ldp	w4, w13, [sp, #156]
    a1c0:	ldr	w14, [sp, #168]
    a1c4:	ldr	w12, [sp, #176]
    a1c8:	ldr	w9, [sp, #184]
    a1cc:	ldp	x11, x10, [sp, #192]
    a1d0:	b	9ff0 <BZ2_decompress@@Base+0x1a48>
    a1d4:	mov	w0, #0x0                   	// #0
    a1d8:	b	86b8 <BZ2_decompress@@Base+0x110>
    a1dc:	ldr	w3, [sp, #128]
    a1e0:	mov	w0, #0x0                   	// #0
    a1e4:	b	86b8 <BZ2_decompress@@Base+0x110>
    a1e8:	ldr	w2, [x1, #16]
    a1ec:	add	w2, w2, #0x1
    a1f0:	str	w2, [x1, #16]
    a1f4:	b	9688 <BZ2_decompress@@Base+0x10e0>
    a1f8:	ldr	w2, [x1, #16]
    a1fc:	add	w2, w2, #0x1
    a200:	str	w2, [x1, #16]
    a204:	b	98f8 <BZ2_decompress@@Base+0x1350>
    a208:	ldr	w2, [x1, #16]
    a20c:	add	w2, w2, #0x1
    a210:	str	w2, [x1, #16]
    a214:	b	95ec <BZ2_decompress@@Base+0x1044>
    a218:	ldr	w2, [x1, #16]
    a21c:	add	w2, w2, #0x1
    a220:	str	w2, [x1, #16]
    a224:	b	9580 <BZ2_decompress@@Base+0xfd8>
    a228:	ldr	w2, [x1, #16]
    a22c:	add	w2, w2, #0x1
    a230:	str	w2, [x1, #16]
    a234:	b	9514 <BZ2_decompress@@Base+0xf6c>
    a238:	ldr	w2, [x1, #16]
    a23c:	add	w2, w2, #0x1
    a240:	str	w2, [x1, #16]
    a244:	b	94a8 <BZ2_decompress@@Base+0xf00>
    a248:	ldr	w1, [x0, #16]
    a24c:	add	w1, w1, #0x1
    a250:	str	w1, [x0, #16]
    a254:	b	972c <BZ2_decompress@@Base+0x1184>
    a258:	ldr	w2, [x1, #16]
    a25c:	add	w2, w2, #0x1
    a260:	str	w2, [x1, #16]
    a264:	b	943c <BZ2_decompress@@Base+0xe94>
    a268:	ldr	w2, [x0, #16]
    a26c:	add	w2, w2, #0x1
    a270:	str	w2, [x0, #16]
    a274:	b	9af8 <BZ2_decompress@@Base+0x1550>
    a278:	ldr	w2, [x0, #16]
    a27c:	add	w2, w2, #0x1
    a280:	str	w2, [x0, #16]
    a284:	b	9a8c <BZ2_decompress@@Base+0x14e4>
    a288:	ldr	w2, [x1, #16]
    a28c:	add	w2, w2, #0x1
    a290:	str	w2, [x1, #16]
    a294:	b	93d0 <BZ2_decompress@@Base+0xe28>
    a298:	ldr	w2, [x1, #16]
    a29c:	add	w2, w2, #0x1
    a2a0:	str	w2, [x1, #16]
    a2a4:	b	9364 <BZ2_decompress@@Base+0xdbc>
    a2a8:	ldr	w2, [x0, #16]
    a2ac:	add	w2, w2, #0x1
    a2b0:	str	w2, [x0, #16]
    a2b4:	b	9b98 <BZ2_decompress@@Base+0x15f0>
    a2b8:	ldr	w2, [x0, #16]
    a2bc:	add	w2, w2, #0x1
    a2c0:	str	w2, [x0, #16]
    a2c4:	b	9c80 <BZ2_decompress@@Base+0x16d8>
    a2c8:	ldr	w2, [x0, #16]
    a2cc:	add	w2, w2, #0x1
    a2d0:	str	w2, [x0, #16]
    a2d4:	b	9e54 <BZ2_decompress@@Base+0x18ac>
    a2d8:	ldr	w2, [x1, #16]
    a2dc:	add	w2, w2, #0x1
    a2e0:	str	w2, [x1, #16]
    a2e4:	b	9874 <BZ2_decompress@@Base+0x12cc>
    a2e8:	ldr	w2, [x0, #16]
    a2ec:	add	w2, w2, #0x1
    a2f0:	str	w2, [x0, #16]
    a2f4:	b	9c0c <BZ2_decompress@@Base+0x1664>
    a2f8:	ldr	w2, [x1, #16]
    a2fc:	add	w2, w2, #0x1
    a300:	str	w2, [x1, #16]
    a304:	b	8ab8 <BZ2_decompress@@Base+0x510>
    a308:	ldr	w2, [x1, #16]
    a30c:	add	w2, w2, #0x1
    a310:	str	w2, [x1, #16]
    a314:	b	8b24 <BZ2_decompress@@Base+0x57c>
    a318:	ldr	w2, [x1, #16]
    a31c:	add	w2, w2, #0x1
    a320:	str	w2, [x1, #16]
    a324:	b	a038 <BZ2_decompress@@Base+0x1a90>
    a328:	ldr	w1, [x5, #16]
    a32c:	add	w1, w1, #0x1
    a330:	str	w1, [x5, #16]
    a334:	b	9ef8 <BZ2_decompress@@Base+0x1950>
    a338:	ldr	w2, [x1, #16]
    a33c:	add	w2, w2, #0x1
    a340:	str	w2, [x1, #16]
    a344:	b	8900 <BZ2_decompress@@Base+0x358>
    a348:	ldr	w2, [x1, #16]
    a34c:	add	w2, w2, #0x1
    a350:	str	w2, [x1, #16]
    a354:	b	8a4c <BZ2_decompress@@Base+0x4a4>
    a358:	ldr	w2, [x1, #16]
    a35c:	add	w2, w2, #0x1
    a360:	str	w2, [x1, #16]
    a364:	b	89e0 <BZ2_decompress@@Base+0x438>
    a368:	ldr	w2, [x0, #16]
    a36c:	add	w2, w2, #0x1
    a370:	str	w2, [x0, #16]
    a374:	b	9de4 <BZ2_decompress@@Base+0x183c>
    a378:	ldr	w1, [x5, #16]
    a37c:	add	w1, w1, #0x1
    a380:	str	w1, [x5, #16]
    a384:	b	a11c <BZ2_decompress@@Base+0x1b74>
    a388:	ldr	w2, [x1, #16]
    a38c:	add	w2, w2, #0x1
    a390:	str	w2, [x1, #16]
    a394:	b	8bb0 <BZ2_decompress@@Base+0x608>
    a398:	ldr	w2, [x0, #16]
    a39c:	add	w2, w2, #0x1
    a3a0:	str	w2, [x0, #16]
    a3a4:	b	9d74 <BZ2_decompress@@Base+0x17cc>
    a3a8:	ldr	w2, [x1, #16]
    a3ac:	add	w2, w2, #0x1
    a3b0:	str	w2, [x1, #16]
    a3b4:	b	8974 <BZ2_decompress@@Base+0x3cc>
    a3b8:	ldr	w1, [x5, #16]
    a3bc:	add	w1, w1, #0x1
    a3c0:	str	w1, [x5, #16]
    a3c4:	b	a0a8 <BZ2_decompress@@Base+0x1b00>
    a3c8:	ldr	w2, [x1, #16]
    a3cc:	add	w2, w2, #0x1
    a3d0:	str	w2, [x1, #16]
    a3d4:	b	8c2c <BZ2_decompress@@Base+0x684>
    a3d8:	ldr	w1, [x0, #16]
    a3dc:	add	w1, w1, #0x1
    a3e0:	str	w1, [x0, #16]
    a3e4:	b	8f60 <BZ2_decompress@@Base+0x9b8>
    a3e8:	ldr	w1, [x0, #16]
    a3ec:	add	w1, w1, #0x1
    a3f0:	str	w1, [x0, #16]
    a3f4:	b	8fec <BZ2_decompress@@Base+0xa44>
    a3f8:	ldr	w1, [x0, #16]
    a3fc:	add	w1, w1, #0x1
    a400:	str	w1, [x0, #16]
    a404:	b	9078 <BZ2_decompress@@Base+0xad0>
    a408:	ldr	w2, [x1, #16]
    a40c:	add	w2, w2, #0x1
    a410:	str	w2, [x1, #16]
    a414:	b	9d04 <BZ2_decompress@@Base+0x175c>
    a418:	ldr	w1, [x0, #16]
    a41c:	add	w1, w1, #0x1
    a420:	str	w1, [x0, #16]
    a424:	b	90d0 <BZ2_decompress@@Base+0xb28>
    a428:	ldr	w1, [x0, #16]
    a42c:	add	w1, w1, #0x1
    a430:	str	w1, [x0, #16]
    a434:	b	8eb4 <BZ2_decompress@@Base+0x90c>
    a438:	mov	x10, #0x0                   	// #0
    a43c:	mov	x11, #0x0                   	// #0
    a440:	mov	w24, #0x0                   	// #0
    a444:	mov	w23, #0x0                   	// #0
    a448:	mov	w22, #0x0                   	// #0
    a44c:	mov	w9, #0x0                   	// #0
    a450:	mov	w12, #0x0                   	// #0
    a454:	mov	w26, #0x0                   	// #0
    a458:	mov	w14, #0x0                   	// #0
    a45c:	mov	w13, #0x0                   	// #0
    a460:	mov	w28, #0x0                   	// #0
    a464:	mov	w4, #0x0                   	// #0
    a468:	mov	w18, #0x0                   	// #0
    a46c:	mov	w8, #0x0                   	// #0
    a470:	mov	w7, #0x0                   	// #0
    a474:	mov	w6, #0x0                   	// #0
    a478:	mov	w27, #0x0                   	// #0
    a47c:	mov	w25, #0x0                   	// #0
    a480:	mov	w3, #0x0                   	// #0
    a484:	mov	w0, #0x0                   	// #0
    a488:	str	xzr, [sp, #104]
    a48c:	stp	wzr, wzr, [sp, #116]
    a490:	str	wzr, [sp, #124]
    a494:	str	wzr, [sp, #136]
    a498:	b	86b8 <BZ2_decompress@@Base+0x110>
    a49c:	ldr	w2, [x1, #16]
    a4a0:	add	w2, w2, #0x1
    a4a4:	str	w2, [x1, #16]
    a4a8:	b	9804 <BZ2_decompress@@Base+0x125c>
    a4ac:	ldr	w1, [x0, #16]
    a4b0:	add	w1, w1, #0x1
    a4b4:	str	w1, [x0, #16]
    a4b8:	b	92ec <BZ2_decompress@@Base+0xd44>
    a4bc:	ldr	w1, [x0, #16]
    a4c0:	add	w1, w1, #0x1
    a4c4:	str	w1, [x0, #16]
    a4c8:	b	9a14 <BZ2_decompress@@Base+0x146c>
    a4cc:	ldr	w1, [x5, #16]
    a4d0:	add	w1, w1, #0x1
    a4d4:	str	w1, [x5, #16]
    a4d8:	b	87dc <BZ2_decompress@@Base+0x234>
    a4dc:	mov	x10, #0x0                   	// #0
    a4e0:	mov	x11, #0x0                   	// #0
    a4e4:	mov	w24, #0x0                   	// #0
    a4e8:	mov	w23, #0x0                   	// #0
    a4ec:	mov	w22, #0x0                   	// #0
    a4f0:	mov	w9, #0x0                   	// #0
    a4f4:	mov	w12, #0x0                   	// #0
    a4f8:	mov	w26, #0x0                   	// #0
    a4fc:	mov	w14, #0x0                   	// #0
    a500:	mov	w13, #0x0                   	// #0
    a504:	mov	w28, #0x0                   	// #0
    a508:	mov	w4, #0x0                   	// #0
    a50c:	mov	w18, #0x0                   	// #0
    a510:	mov	w8, #0x0                   	// #0
    a514:	mov	w7, #0x0                   	// #0
    a518:	mov	w6, #0x0                   	// #0
    a51c:	mov	w27, #0x0                   	// #0
    a520:	mov	w25, #0x0                   	// #0
    a524:	mov	w3, #0x0                   	// #0
    a528:	mov	w0, #0xfffffffb            	// #-5
    a52c:	str	xzr, [sp, #104]
    a530:	stp	wzr, wzr, [sp, #116]
    a534:	str	wzr, [sp, #124]
    a538:	str	wzr, [sp, #136]
    a53c:	b	86b8 <BZ2_decompress@@Base+0x110>
    a540:	mov	w8, #0x0                   	// #0
    a544:	mov	w0, #0xfffffffc            	// #-4
    a548:	b	86b8 <BZ2_decompress@@Base+0x110>
    a54c:	str	w0, [x19, #40]
    a550:	mov	w0, #0xfffffffb            	// #-5
    a554:	b	86b8 <BZ2_decompress@@Base+0x110>
    a558:	ldr	w1, [x10, x0, lsl #2]
    a55c:	mov	w0, #0xfffffffc            	// #-4
    a560:	sub	w1, w23, w1
    a564:	cmp	w1, #0x101
    a568:	b.hi	86b8 <BZ2_decompress@@Base+0x110>  // b.pmore
    a56c:	ldr	x0, [sp, #104]
    a570:	ldr	w13, [x0, w1, sxtw #2]
    a574:	b	910c <BZ2_decompress@@Base+0xb64>
    a578:	ldr	w0, [x10, x0, lsl #2]
    a57c:	sub	w0, w23, w0
    a580:	cmp	w0, #0x101
    a584:	b.hi	9920 <BZ2_decompress@@Base+0x1378>  // b.pmore
    a588:	ldr	x1, [sp, #104]
    a58c:	ldr	w13, [x1, w0, sxtw #2]
    a590:	cmp	w13, #0x1
    a594:	b.ls	a8b4 <BZ2_decompress@@Base+0x230c>  // b.plast
    a598:	ldrsw	x0, [x19, #7820]
    a59c:	add	w1, w12, #0x1
    a5a0:	cmp	w1, #0x0
    a5a4:	add	x0, x19, x0
    a5a8:	ldrb	w0, [x0, #3724]
    a5ac:	add	x0, x19, x0
    a5b0:	ldrb	w2, [x0, #3468]
    a5b4:	add	x5, x19, w2, uxtb #2
    a5b8:	ldr	w0, [x5, #68]
    a5bc:	add	w0, w0, w1
    a5c0:	str	w0, [x5, #68]
    a5c4:	ldrb	w0, [x19, #44]
    a5c8:	cbnz	w0, a730 <BZ2_decompress@@Base+0x2188>
    a5cc:	b.le	a7a4 <BZ2_decompress@@Base+0x21fc>
    a5d0:	cmp	w14, w26
    a5d4:	b.le	a948 <BZ2_decompress@@Base+0x23a0>
    a5d8:	ldr	x15, [x19, #3152]
    a5dc:	add	w5, w26, w12
    a5e0:	add	w0, w26, #0x1
    a5e4:	sub	w5, w5, w14
    a5e8:	mov	w12, w1
    a5ec:	add	w5, w5, #0x1
    a5f0:	sxtw	x0, w0
    a5f4:	sub	x1, x15, #0x4
    a5f8:	str	w2, [x1, x0, lsl #2]
    a5fc:	subs	w12, w12, #0x1
    a600:	mov	w26, w0
    a604:	b.eq	910c <BZ2_decompress@@Base+0xb64>  // b.none
    a608:	add	x0, x0, #0x1
    a60c:	cmp	w12, w5
    a610:	b.ne	a5f8 <BZ2_decompress@@Base+0x2050>  // b.any
    a614:	mov	w0, #0xfffffffc            	// #-4
    a618:	b	86b8 <BZ2_decompress@@Base+0x110>
    a61c:	mov	w1, #0x4651                	// #18001
    a620:	cmp	w30, w1
    a624:	b.gt	a630 <BZ2_decompress@@Base+0x2088>
    a628:	ldr	x1, [sp, #128]
    a62c:	strb	w25, [x1, x30]
    a630:	add	x30, x30, #0x1
    a634:	cmp	w8, w30
    a638:	b.gt	a988 <BZ2_decompress@@Base+0x23e0>
    a63c:	mov	w15, #0x4652                	// #18002
    a640:	cmp	w8, w15
    a644:	csel	w15, w8, w15, le
    a648:	add	x3, sp, #0xe8
    a64c:	cmp	w7, #0x0
    a650:	mov	w0, #0x0                   	// #0
    a654:	mov	w1, #0x0                   	// #0
    a658:	b.le	a678 <BZ2_decompress@@Base+0x20d0>
    a65c:	nop
    a660:	strb	w0, [x3, w1, sxtw]
    a664:	add	w0, w0, #0x1
    a668:	and	w0, w0, #0xff
    a66c:	cmp	w0, w7
    a670:	mov	w1, w0
    a674:	b.lt	a660 <BZ2_decompress@@Base+0x20b8>  // b.tstop
    a678:	cmp	w8, #0x0
    a67c:	mov	w3, #0x0                   	// #0
    a680:	b.le	a6e0 <BZ2_decompress@@Base+0x2138>
    a684:	mov	x3, #0x651e                	// #25886
    a688:	mov	x5, #0x1ecc                	// #7884
    a68c:	add	x16, x19, x3
    a690:	add	x8, x19, x5
    a694:	add	x3, sp, #0xe8
    a698:	mov	x2, #0x0                   	// #0
    a69c:	nop
    a6a0:	ldrb	w0, [x16, x2]
    a6a4:	add	x1, x3, w0, uxtb
    a6a8:	ldrb	w17, [x3, w0, sxtw]
    a6ac:	cbz	w0, a6c4 <BZ2_decompress@@Base+0x211c>
    a6b0:	ldurb	w5, [x1, #-1]
    a6b4:	sub	w0, w0, #0x1
    a6b8:	strb	w5, [x1], #-1
    a6bc:	ands	w0, w0, #0xff
    a6c0:	b.ne	a6b0 <BZ2_decompress@@Base+0x2108>  // b.any
    a6c4:	strb	w17, [x8, x2]
    a6c8:	add	x2, x2, #0x1
    a6cc:	strb	w17, [sp, #232]
    a6d0:	cmp	w15, w2
    a6d4:	b.gt	a6a0 <BZ2_decompress@@Base+0x20f8>
    a6d8:	cmp	w15, #0x0
    a6dc:	csinc	w3, w15, wzr, gt
    a6e0:	mov	w8, w15
    a6e4:	mov	w27, #0x0                   	// #0
    a6e8:	b	8c70 <BZ2_decompress@@Base+0x6c8>
    a6ec:	ldr	w0, [x19, #56]
    a6f0:	cmp	w0, #0x0
    a6f4:	ccmp	w0, w26, #0x0, ge  // ge = tcont
    a6f8:	b.ge	9920 <BZ2_decompress@@Base+0x1378>  // b.tcont
    a6fc:	add	x0, x19, #0x44
    a700:	mov	x1, #0x0                   	// #0
    a704:	b	a714 <BZ2_decompress@@Base+0x216c>
    a708:	add	x1, x1, #0x1
    a70c:	cmp	x1, #0x100
    a710:	b.eq	a8cc <BZ2_decompress@@Base+0x2324>  // b.none
    a714:	ldr	w2, [x0, x1, lsl #2]
    a718:	mov	w3, w1
    a71c:	cmp	w2, #0x0
    a720:	ccmp	w2, w26, #0x0, ge  // ge = tcont
    a724:	b.le	a708 <BZ2_decompress@@Base+0x2160>
    a728:	mov	w0, #0xfffffffc            	// #-4
    a72c:	b	86b8 <BZ2_decompress@@Base+0x110>
    a730:	b.le	a7a4 <BZ2_decompress@@Base+0x21fc>
    a734:	cmp	w14, w26
    a738:	b.le	a948 <BZ2_decompress@@Base+0x23a0>
    a73c:	ldr	x15, [x19, #3160]
    a740:	add	w5, w26, w12
    a744:	add	w0, w26, #0x1
    a748:	sub	w5, w5, w14
    a74c:	add	w5, w5, #0x1
    a750:	and	w2, w2, #0xffff
    a754:	sxtw	x0, w0
    a758:	mov	w12, w1
    a75c:	sub	x15, x15, #0x2
    a760:	strh	w2, [x15, x0, lsl #1]
    a764:	subs	w12, w12, #0x1
    a768:	mov	w26, w0
    a76c:	b.eq	910c <BZ2_decompress@@Base+0xb64>  // b.none
    a770:	add	x0, x0, #0x1
    a774:	cmp	w12, w5
    a778:	b.ne	a760 <BZ2_decompress@@Base+0x21b8>  // b.any
    a77c:	mov	w0, #0xfffffffc            	// #-4
    a780:	b	86b8 <BZ2_decompress@@Base+0x110>
    a784:	mov	w26, #0x0                   	// #0
    a788:	mov	w28, #0x0                   	// #0
    a78c:	mov	w4, #0x0                   	// #0
    a790:	mov	w3, #0x100                 	// #256
    a794:	mov	w0, #0xfffffffc            	// #-4
    a798:	b	86b8 <BZ2_decompress@@Base+0x110>
    a79c:	mov	w27, #0x0                   	// #0
    a7a0:	b	8d6c <BZ2_decompress@@Base+0x7c4>
    a7a4:	mov	w12, w1
    a7a8:	b	910c <BZ2_decompress@@Base+0xb64>
    a7ac:	ldr	x0, [x19, #3152]
    a7b0:	str	w2, [x0, w26, sxtw #2]
    a7b4:	b	9220 <BZ2_decompress@@Base+0xc78>
    a7b8:	lsr	w0, w2, #4
    a7bc:	and	w2, w2, #0xf
    a7c0:	add	x16, x19, x0, lsl #2
    a7c4:	ldr	w1, [x16, #7820]
    a7c8:	add	w17, w1, w2
    a7cc:	cmp	w1, w17
    a7d0:	add	x5, x19, w17, sxtw
    a7d4:	sxtw	x17, w17
    a7d8:	ldrb	w30, [x5, #3724]
    a7dc:	b.ge	a804 <BZ2_decompress@@Base+0x225c>  // b.tcont
    a7e0:	sub	w2, w2, #0x1
    a7e4:	sub	x15, x19, #0x1
    a7e8:	sub	x2, x17, x2
    a7ec:	add	x15, x2, x15
    a7f0:	ldrb	w2, [x5, #3723]
    a7f4:	sub	x5, x5, #0x1
    a7f8:	strb	w2, [x5, #3725]
    a7fc:	cmp	x15, x5
    a800:	b.ne	a7f0 <BZ2_decompress@@Base+0x2248>  // b.any
    a804:	add	w1, w1, #0x1
    a808:	mov	x2, #0x1e8c                	// #7820
    a80c:	mov	x5, #0x1e88                	// #7816
    a810:	add	x15, x19, x2
    a814:	str	w1, [x16, #7820]
    a818:	add	x16, x19, x5
    a81c:	sub	w2, w1, #0x1
    a820:	str	w2, [x15, x0, lsl #2]
    a824:	ldr	w1, [x16, x0, lsl #2]
    a828:	add	x5, x19, w2, sxtw
    a82c:	sub	x0, x0, #0x1
    a830:	add	w2, w1, #0xf
    a834:	add	x2, x19, w2, sxtw
    a838:	ldrb	w2, [x2, #3724]
    a83c:	strb	w2, [x5, #3724]
    a840:	cbnz	w0, a81c <BZ2_decompress@@Base+0x2274>
    a844:	ldr	w0, [x19, #7820]
    a848:	sub	w0, w0, #0x1
    a84c:	str	w0, [x19, #7820]
    a850:	add	x1, x19, w0, sxtw
    a854:	strb	w30, [x1, #3724]
    a858:	cbnz	w0, 91f4 <BZ2_decompress@@Base+0xc4c>
    a85c:	mov	x17, #0x1ec8                	// #7880
    a860:	add	x17, x19, x17
    a864:	add	x0, x19, #0xe8b
    a868:	mov	x5, #0xff0                 	// #4080
    a86c:	str	x0, [sp, #128]
    a870:	ldrsw	x15, [x17]
    a874:	ldr	x1, [sp, #128]
    a878:	add	x0, x15, #0xe9b
    a87c:	add	x0, x19, x0
    a880:	add	x16, x1, x15
    a884:	nop
    a888:	sub	x1, x0, x15
    a88c:	ldrb	w2, [x0]
    a890:	sub	x0, x0, #0x1
    a894:	cmp	x16, x0
    a898:	strb	w2, [x1, x5]
    a89c:	b.ne	a888 <BZ2_decompress@@Base+0x22e0>  // b.any
    a8a0:	str	w5, [x17], #-4
    a8a4:	sub	x5, x5, #0x10
    a8a8:	cmp	x5, #0xef0
    a8ac:	b.ne	a870 <BZ2_decompress@@Base+0x22c8>  // b.any
    a8b0:	b	91f4 <BZ2_decompress@@Base+0xc4c>
    a8b4:	ldr	w1, [sp, #120]
    a8b8:	mov	w0, #0x1fffff              	// #2097151
    a8bc:	cmp	w1, w0
    a8c0:	mov	w0, #0xfffffffc            	// #-4
    a8c4:	b.gt	86b8 <BZ2_decompress@@Base+0x110>
    a8c8:	b	9934 <BZ2_decompress@@Base+0x138c>
    a8cc:	add	x2, x19, #0x444
    a8d0:	str	wzr, [x19, #1096]
    a8d4:	ldr	w1, [x0]
    a8d8:	add	x0, x0, #0x4
    a8dc:	str	w1, [x0, #1028]
    a8e0:	cmp	x2, x0
    a8e4:	b.ne	a8d4 <BZ2_decompress@@Base+0x232c>  // b.any
    a8e8:	add	x0, x19, #0x44c
    a8ec:	add	x3, x19, #0x84c
    a8f0:	str	x3, [sp, #128]
    a8f4:	ldp	w2, w1, [x0, #-4]
    a8f8:	add	w1, w1, w2
    a8fc:	str	w1, [x0], #4
    a900:	cmp	x3, x0
    a904:	b.ne	a8f4 <BZ2_decompress@@Base+0x234c>  // b.any
    a908:	add	x5, x19, #0x448
    a90c:	mov	x0, #0x0                   	// #0
    a910:	b	a920 <BZ2_decompress@@Base+0x2378>
    a914:	add	x0, x0, #0x1
    a918:	cmp	x0, #0x101
    a91c:	b.eq	a954 <BZ2_decompress@@Base+0x23ac>  // b.none
    a920:	ldr	w1, [x5, x0, lsl #2]
    a924:	mov	w3, w0
    a928:	cmp	w1, #0x0
    a92c:	ccmp	w1, w26, #0x0, ge  // ge = tcont
    a930:	b.le	a914 <BZ2_decompress@@Base+0x236c>
    a934:	mov	w0, #0xfffffffc            	// #-4
    a938:	b	86b8 <BZ2_decompress@@Base+0x110>
    a93c:	mov	w0, #0xfffffffc            	// #-4
    a940:	str	w2, [sp, #120]
    a944:	b	86b8 <BZ2_decompress@@Base+0x110>
    a948:	mov	w12, w1
    a94c:	mov	w0, #0xfffffffc            	// #-4
    a950:	b	86b8 <BZ2_decompress@@Base+0x110>
    a954:	mov	x15, x5
    a958:	mov	x0, x5
    a95c:	mov	w3, #0x1                   	// #1
    a960:	b	a974 <BZ2_decompress@@Base+0x23cc>
    a964:	add	w3, w3, #0x1
    a968:	add	x0, x0, #0x4
    a96c:	cmp	w3, #0x101
    a970:	b.eq	a990 <BZ2_decompress@@Base+0x23e8>  // b.none
    a974:	ldp	w2, w1, [x0]
    a978:	cmp	w2, w1
    a97c:	b.le	a964 <BZ2_decompress@@Base+0x23bc>
    a980:	mov	w0, #0xfffffffc            	// #-4
    a984:	b	86b8 <BZ2_decompress@@Base+0x110>
    a988:	mov	w25, #0x0                   	// #0
    a98c:	b	98ac <BZ2_decompress@@Base+0x1304>
    a990:	mov	w0, #0xffffffff            	// #-1
    a994:	mov	w1, #0x2                   	// #2
    a998:	str	w1, [x19, #8]
    a99c:	strb	wzr, [x19, #12]
    a9a0:	str	wzr, [x19, #16]
    a9a4:	str	w0, [x19, #3184]
    a9a8:	ldr	w0, [x19, #52]
    a9ac:	cmp	w0, #0x1
    a9b0:	b.le	aa14 <BZ2_decompress@@Base+0x246c>
    a9b4:	adrp	x3, 1f000 <BZ2_bzerror@@Base+0x11650>
    a9b8:	adrp	x0, d000 <BZ2_bzReadOpen@@Base+0x270>
    a9bc:	mov	x2, #0x6                   	// #6
    a9c0:	add	x0, x0, #0xd10
    a9c4:	ldr	x3, [x3, #4016]
    a9c8:	mov	x1, #0x1                   	// #1
    a9cc:	stp	w6, w7, [sp, #140]
    a9d0:	stp	w8, w18, [sp, #148]
    a9d4:	ldr	x3, [x3]
    a9d8:	stp	w4, w13, [sp, #156]
    a9dc:	str	w14, [sp, #168]
    a9e0:	str	w12, [sp, #176]
    a9e4:	str	w9, [sp, #184]
    a9e8:	stp	x11, x10, [sp, #192]
    a9ec:	stp	x15, x5, [sp, #208]
    a9f0:	bl	1680 <fwrite@plt>
    a9f4:	ldr	w14, [sp, #168]
    a9f8:	ldp	x11, x10, [sp, #192]
    a9fc:	ldp	x15, x5, [sp, #208]
    aa00:	ldp	w6, w7, [sp, #140]
    aa04:	ldp	w8, w18, [sp, #148]
    aa08:	ldp	w4, w13, [sp, #156]
    aa0c:	ldr	w12, [sp, #176]
    aa10:	ldr	w9, [sp, #184]
    aa14:	ldrb	w0, [x19, #44]
    aa18:	cbnz	w0, aae0 <BZ2_decompress@@Base+0x2538>
    aa1c:	ldr	x2, [x19, #3152]
    aa20:	mov	x0, #0x0                   	// #0
    aa24:	ldr	w1, [x2, x0, lsl #2]
    aa28:	add	x1, x19, w1, uxtb #2
    aa2c:	ldrsw	x3, [x1, #1096]
    aa30:	lsl	x3, x3, #2
    aa34:	ldr	w5, [x2, x3]
    aa38:	orr	w5, w5, w0, lsl #8
    aa3c:	str	w5, [x2, x3]
    aa40:	add	x0, x0, #0x1
    aa44:	ldr	w3, [x1, #1096]
    aa48:	cmp	w26, w0
    aa4c:	add	w3, w3, #0x1
    aa50:	str	w3, [x1, #1096]
    aa54:	b.gt	aa24 <BZ2_decompress@@Base+0x247c>
    aa58:	ldrsw	x0, [x19, #56]
    aa5c:	mov	w16, #0x86a0                	// #34464
    aa60:	ldr	w1, [x19, #40]
    aa64:	movk	w16, #0x1, lsl #16
    aa68:	ldrb	w15, [x19, #20]
    aa6c:	cmp	w26, #0x0
    aa70:	mov	w5, #0x1                   	// #1
    aa74:	csel	w3, w26, w5, gt
    aa78:	ldr	w0, [x2, x0, lsl #2]
    aa7c:	str	wzr, [x19, #1092]
    aa80:	mul	w1, w1, w16
    aa84:	lsr	w0, w0, #8
    aa88:	str	w0, [x19, #60]
    aa8c:	cbz	w15, ab70 <BZ2_decompress@@Base+0x25c8>
    aa90:	str	xzr, [x19, #24]
    aa94:	cmp	w0, w1
    aa98:	b.cs	ab68 <BZ2_decompress@@Base+0x25c0>  // b.hs, b.nlast
    aa9c:	adrp	x15, 1f000 <BZ2_bzerror@@Base+0x11650>
    aaa0:	ubfiz	x0, x0, #2, #24
    aaa4:	ldr	x15, [x15, #4048]
    aaa8:	ldr	w1, [x2, x0]
    aaac:	mov	w0, #0x0                   	// #0
    aab0:	ldr	w2, [x15]
    aab4:	str	w5, [x19, #1092]
    aab8:	sub	w2, w2, #0x1
    aabc:	stp	w2, w5, [x19, #24]
    aac0:	cmp	w2, #0x1
    aac4:	and	w5, w1, #0xff
    aac8:	cset	w2, eq  // eq = none
    aacc:	lsr	w1, w1, #8
    aad0:	str	w1, [x19, #60]
    aad4:	eor	w1, w5, w2
    aad8:	str	w1, [x19, #64]
    aadc:	b	86b8 <BZ2_decompress@@Base+0x110>
    aae0:	ldr	w0, [x15]
    aae4:	add	x15, x15, #0x4
    aae8:	str	w0, [x15, #1024]
    aaec:	ldr	x0, [sp, #128]
    aaf0:	cmp	x0, x15
    aaf4:	b.ne	aae0 <BZ2_decompress@@Base+0x2538>  // b.any
    aaf8:	mov	x2, #0x0                   	// #0
    aafc:	b	ab28 <BZ2_decompress@@Base+0x2580>
    ab00:	ldrb	w15, [x16, x0]
    ab04:	and	w15, w15, #0xfffffff0
    ab08:	orr	w1, w15, w1, asr #16
    ab0c:	strb	w1, [x16, x0]
    ab10:	ldr	w0, [x3, #2124]
    ab14:	add	x2, x2, #0x1
    ab18:	cmp	w26, w2
    ab1c:	add	w0, w0, #0x1
    ab20:	str	w0, [x3, #2124]
    ab24:	b.le	ab98 <BZ2_decompress@@Base+0x25f0>
    ab28:	ldr	x16, [x19, #3160]
    ab2c:	lsl	x15, x2, #1
    ab30:	asr	w0, w2, #1
    ab34:	ldrb	w3, [x16, x15]
    ab38:	sxtw	x0, w0
    ab3c:	add	x3, x19, x3, lsl #2
    ab40:	ldr	w1, [x3, #2124]
    ab44:	strh	w1, [x16, x15]
    ab48:	ldr	x16, [x19, #3168]
    ab4c:	tbz	w2, #0, ab00 <BZ2_decompress@@Base+0x2558>
    ab50:	ldrb	w15, [x16, x0]
    ab54:	asr	w1, w1, #16
    ab58:	and	w15, w15, #0xf
    ab5c:	orr	w1, w15, w1, lsl #4
    ab60:	strb	w1, [x16, x0]
    ab64:	b	ab10 <BZ2_decompress@@Base+0x2568>
    ab68:	mov	w0, #0x1                   	// #1
    ab6c:	b	872c <BZ2_decompress@@Base+0x184>
    ab70:	cmp	w0, w1
    ab74:	b.cs	ab68 <BZ2_decompress@@Base+0x25c0>  // b.hs, b.nlast
    ab78:	ubfiz	x1, x0, #2, #24
    ab7c:	mov	w0, #0x0                   	// #0
    ab80:	ldr	w1, [x2, x1]
    ab84:	str	w5, [x19, #1092]
    ab88:	and	w2, w1, #0xff
    ab8c:	lsr	w1, w1, #8
    ab90:	stp	w1, w2, [x19, #60]
    ab94:	b	86b8 <BZ2_decompress@@Base+0x110>
    ab98:	ldr	w0, [x19, #56]
    ab9c:	ldr	x15, [x19, #3168]
    aba0:	asr	w1, w0, #1
    aba4:	ubfiz	w2, w0, #2, #1
    aba8:	ldr	x30, [x19, #3160]
    abac:	ldrb	w25, [x15, w1, sxtw]
    abb0:	ldrh	w1, [x30, w0, sxtw #1]
    abb4:	lsr	w25, w25, w2
    abb8:	ubfiz	w25, w25, #16, #4
    abbc:	orr	w25, w25, w1
    abc0:	b	abec <BZ2_decompress@@Base+0x2644>
    abc4:	and	w2, w2, #0xfffffff0
    abc8:	orr	w0, w2, w0
    abcc:	and	w0, w0, #0xff
    abd0:	strb	w0, [x1]
    abd4:	mov	w0, w3
    abd8:	ldr	w1, [x19, #56]
    abdc:	cmp	w1, w3
    abe0:	b.eq	ac38 <BZ2_decompress@@Base+0x2690>  // b.none
    abe4:	ldr	x30, [x19, #3160]
    abe8:	ldr	x15, [x19, #3168]
    abec:	asr	w1, w25, #1
    abf0:	sbfiz	x17, x25, #1, #32
    abf4:	ldrh	w2, [x30, w25, sxtw #1]
    abf8:	ubfiz	w16, w25, #2, #1
    abfc:	mov	w3, w25
    ac00:	ldrb	w25, [x15, w1, sxtw]
    ac04:	strh	w0, [x30, x17]
    ac08:	sxtw	x17, w1
    ac0c:	asr	w0, w0, #16
    ac10:	add	x1, x15, w1, sxtw
    ac14:	lsr	w25, w25, w16
    ac18:	ubfiz	w25, w25, #16, #4
    ac1c:	orr	w25, w25, w2
    ac20:	ldrb	w2, [x15, x17]
    ac24:	tbz	w3, #0, abc4 <BZ2_decompress@@Base+0x261c>
    ac28:	and	w2, w2, #0xf
    ac2c:	orr	w0, w2, w0, lsl #4
    ac30:	and	w0, w0, #0xff
    ac34:	b	abd0 <BZ2_decompress@@Base+0x2628>
    ac38:	ldr	w0, [x19, #40]
    ac3c:	mov	w2, #0x86a0                	// #34464
    ac40:	ldrb	w1, [x19, #20]
    ac44:	movk	w2, #0x1, lsl #16
    ac48:	str	w3, [x19, #60]
    ac4c:	str	wzr, [x19, #1092]
    ac50:	mul	w0, w0, w2
    ac54:	cbz	w1, ad3c <BZ2_decompress@@Base+0x2794>
    ac58:	str	xzr, [x19, #24]
    ac5c:	cmp	w3, w0
    ac60:	b.cs	ab68 <BZ2_decompress@@Base+0x25c0>  // b.hs, b.nlast
    ac64:	mov	x1, x5
    ac68:	mov	w0, w3
    ac6c:	str	w3, [sp, #128]
    ac70:	stp	w6, w7, [sp, #140]
    ac74:	stp	w8, w18, [sp, #148]
    ac78:	stp	w4, w13, [sp, #156]
    ac7c:	str	w14, [sp, #168]
    ac80:	str	w12, [sp, #176]
    ac84:	str	w9, [sp, #184]
    ac88:	stp	x11, x10, [sp, #192]
    ac8c:	bl	1660 <BZ2_indexIntoF@plt>
    ac90:	ldr	w5, [x19, #60]
    ac94:	ldr	x15, [x19, #3160]
    ac98:	mov	w2, w0
    ac9c:	ldr	x16, [x19, #3168]
    aca0:	lsr	w1, w5, #1
    aca4:	ldrh	w15, [x15, w5, uxtw #1]
    aca8:	ubfiz	w0, w5, #2, #1
    acac:	str	w2, [x19, #64]
    acb0:	ldr	w5, [x19, #1092]
    acb4:	ldrb	w1, [x16, x1]
    acb8:	add	w5, w5, #0x1
    acbc:	str	w5, [x19, #1092]
    acc0:	ldr	w3, [sp, #128]
    acc4:	lsr	w1, w1, w0
    acc8:	ldr	w0, [x19, #24]
    accc:	ubfiz	w1, w1, #16, #4
    acd0:	ldr	w14, [sp, #168]
    acd4:	orr	w1, w1, w15
    acd8:	str	w1, [x19, #60]
    acdc:	ldp	w6, w7, [sp, #140]
    ace0:	ldp	w8, w18, [sp, #148]
    ace4:	ldp	w4, w13, [sp, #156]
    ace8:	ldr	w12, [sp, #176]
    acec:	ldr	w9, [sp, #184]
    acf0:	ldp	x11, x10, [sp, #192]
    acf4:	cbnz	w0, ad1c <BZ2_decompress@@Base+0x2774>
    acf8:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    acfc:	ldr	w1, [x19, #28]
    ad00:	ldr	x0, [x0, #4048]
    ad04:	cmp	w1, #0x1ff
    ad08:	add	w5, w1, #0x1
    ad0c:	ldr	w0, [x0, w1, sxtw #2]
    ad10:	str	w0, [x19, #24]
    ad14:	b.eq	adb8 <BZ2_decompress@@Base+0x2810>  // b.none
    ad18:	str	w5, [x19, #28]
    ad1c:	sub	w0, w0, #0x1
    ad20:	str	w0, [x19, #24]
    ad24:	cmp	w0, #0x1
    ad28:	mov	w0, #0x0                   	// #0
    ad2c:	cset	w1, eq  // eq = none
    ad30:	eor	w2, w1, w2
    ad34:	str	w2, [x19, #64]
    ad38:	b	86b8 <BZ2_decompress@@Base+0x110>
    ad3c:	cmp	w3, w0
    ad40:	b.cs	ab68 <BZ2_decompress@@Base+0x25c0>  // b.hs, b.nlast
    ad44:	mov	x1, x5
    ad48:	mov	w0, w3
    ad4c:	str	w3, [sp, #128]
    ad50:	stp	w6, w7, [sp, #140]
    ad54:	stp	w8, w18, [sp, #148]
    ad58:	stp	w4, w13, [sp, #156]
    ad5c:	str	w14, [sp, #168]
    ad60:	str	w12, [sp, #176]
    ad64:	str	w9, [sp, #184]
    ad68:	stp	x11, x10, [sp, #192]
    ad6c:	bl	1660 <BZ2_indexIntoF@plt>
    ad70:	ldr	w2, [x19, #60]
    ad74:	ldr	x5, [x19, #3160]
    ad78:	mov	w1, w0
    ad7c:	ldr	x16, [x19, #3168]
    ad80:	ubfiz	w15, w2, #2, #1
    ad84:	ldrh	w5, [x5, w2, uxtw #1]
    ad88:	mov	w0, #0x0                   	// #0
    ad8c:	str	w1, [x19, #64]
    ad90:	lsr	w1, w2, #1
    ad94:	ldr	w2, [x19, #1092]
    ad98:	ldrb	w1, [x16, x1]
    ad9c:	add	w2, w2, #0x1
    ada0:	str	w2, [x19, #1092]
    ada4:	lsr	w1, w1, w15
    ada8:	ubfiz	w1, w1, #16, #4
    adac:	orr	w1, w1, w5
    adb0:	str	w1, [x19, #60]
    adb4:	b	8694 <BZ2_decompress@@Base+0xec>
    adb8:	str	wzr, [x19, #28]
    adbc:	b	ad1c <BZ2_decompress@@Base+0x2774>
    adc0:	ldp	w7, w4, [x0, #92]
    adc4:	and	w8, w7, #0xff
    adc8:	cmp	w4, #0x0
    adcc:	b.le	af08 <BZ2_decompress@@Base+0x2960>
    add0:	adrp	x5, 1f000 <BZ2_bzerror@@Base+0x11650>
    add4:	ldr	w3, [x0, #648]
    add8:	and	w6, w7, #0xff
    addc:	mov	w2, #0x0                   	// #0
    ade0:	ldr	x5, [x5, #4024]
    ade4:	nop
    ade8:	eor	w1, w6, w3, lsr #24
    adec:	add	w2, w2, #0x1
    adf0:	cmp	w2, w4
    adf4:	ldr	w1, [x5, x1, lsl #2]
    adf8:	eor	w3, w1, w3, lsl #8
    adfc:	b.ne	ade8 <BZ2_decompress@@Base+0x2840>  // b.any
    ae00:	add	x7, x0, w7, uxtw
    ae04:	str	w3, [x0, #648]
    ae08:	mov	w1, #0x1                   	// #1
    ae0c:	cmp	w2, #0x2
    ae10:	strb	w1, [x7, #128]
    ae14:	ldr	x2, [x0, #64]
    ae18:	ldrsw	x1, [x0, #108]
    ae1c:	add	x3, x2, x1
    ae20:	b.eq	aeb0 <BZ2_decompress@@Base+0x2908>  // b.none
    ae24:	cmp	w4, #0x3
    ae28:	b.eq	aeec <BZ2_decompress@@Base+0x2944>  // b.none
    ae2c:	cmp	w4, #0x1
    ae30:	b.eq	aed8 <BZ2_decompress@@Base+0x2930>  // b.none
    ae34:	sub	w1, w4, #0x4
    ae38:	mov	w2, #0x1                   	// #1
    ae3c:	add	x1, x0, w1, sxtw
    ae40:	strb	w2, [x1, #128]
    ae44:	strb	w8, [x3]
    ae48:	ldr	w1, [x0, #108]
    ae4c:	ldr	x2, [x0, #64]
    ae50:	add	w1, w1, #0x1
    ae54:	str	w1, [x0, #108]
    ae58:	strb	w8, [x2, w1, sxtw]
    ae5c:	ldr	w1, [x0, #108]
    ae60:	ldr	x2, [x0, #64]
    ae64:	add	w1, w1, #0x1
    ae68:	str	w1, [x0, #108]
    ae6c:	strb	w8, [x2, w1, sxtw]
    ae70:	ldr	w1, [x0, #108]
    ae74:	ldr	x2, [x0, #64]
    ae78:	add	w1, w1, #0x1
    ae7c:	str	w1, [x0, #108]
    ae80:	strb	w8, [x2, w1, sxtw]
    ae84:	ldr	w1, [x0, #108]
    ae88:	ldr	x3, [x0, #64]
    ae8c:	add	w1, w1, #0x1
    ae90:	ldr	w2, [x0, #96]
    ae94:	str	w1, [x0, #108]
    ae98:	sub	w2, w2, #0x4
    ae9c:	strb	w2, [x3, w1, sxtw]
    aea0:	ldr	w1, [x0, #108]
    aea4:	add	w1, w1, #0x1
    aea8:	str	w1, [x0, #108]
    aeac:	ret
    aeb0:	strb	w8, [x2, x1]
    aeb4:	ldr	w1, [x0, #108]
    aeb8:	ldr	x2, [x0, #64]
    aebc:	add	w1, w1, #0x1
    aec0:	str	w1, [x0, #108]
    aec4:	strb	w8, [x2, w1, sxtw]
    aec8:	ldr	w1, [x0, #108]
    aecc:	add	w1, w1, #0x1
    aed0:	str	w1, [x0, #108]
    aed4:	ret
    aed8:	strb	w8, [x3]
    aedc:	ldr	w1, [x0, #108]
    aee0:	add	w1, w1, #0x1
    aee4:	str	w1, [x0, #108]
    aee8:	ret
    aeec:	strb	w8, [x3]
    aef0:	ldr	w1, [x0, #108]
    aef4:	ldr	x2, [x0, #64]
    aef8:	add	w1, w1, #0x1
    aefc:	str	w1, [x0, #108]
    af00:	strb	w8, [x2, w1, sxtw]
    af04:	b	aeb4 <BZ2_decompress@@Base+0x290c>
    af08:	add	x7, x0, w7, uxtw
    af0c:	mov	w1, #0x1                   	// #1
    af10:	strb	w1, [x7, #128]
    af14:	ldr	x3, [x0, #64]
    af18:	ldrsw	x1, [x0, #108]
    af1c:	add	x3, x3, x1
    af20:	b	ae24 <BZ2_decompress@@Base+0x287c>
    af24:	nop
    af28:	mov	x0, x1
    af2c:	cbz	x1, af34 <BZ2_decompress@@Base+0x298c>
    af30:	b	1610 <free@plt>
    af34:	ret
    af38:	mul	w0, w1, w2
    af3c:	sxtw	x0, w0
    af40:	b	14e0 <malloc@plt>
    af44:	nop
    af48:	stp	x29, x30, [sp, #-64]!
    af4c:	mov	x29, sp
    af50:	stp	x23, x24, [sp, #48]
    af54:	adrp	x23, 1f000 <BZ2_bzerror@@Base+0x11650>
    af58:	mov	w24, #0x1                   	// #1
    af5c:	stp	x19, x20, [sp, #16]
    af60:	mov	x19, x0
    af64:	mov	w20, #0x0                   	// #0
    af68:	ldr	w0, [x0, #12]
    af6c:	stp	x21, x22, [sp, #32]
    af70:	mov	w21, #0x0                   	// #0
    af74:	ldr	x22, [x23, #4024]
    af78:	b	af84 <BZ2_decompress@@Base+0x29dc>
    af7c:	cmp	w0, #0x2
    af80:	b.eq	b364 <BZ2_decompress@@Base+0x2dbc>  // b.none
    af84:	cmp	w0, #0x1
    af88:	b.ne	af7c <BZ2_decompress@@Base+0x29d4>  // b.any
    af8c:	ldr	x0, [x19]
    af90:	mov	w5, #0x0                   	// #0
    af94:	ldr	w1, [x19, #120]
    af98:	ldr	w2, [x0, #32]
    af9c:	b	afec <BZ2_decompress@@Base+0x2a44>
    afa0:	cmp	w1, w3
    afa4:	b.ge	b210 <BZ2_decompress@@Base+0x2c68>  // b.tcont
    afa8:	ldr	x2, [x19, #80]
    afac:	mov	w5, #0x1                   	// #1
    afb0:	ldr	x0, [x0, #24]
    afb4:	ldrb	w1, [x2, w1, sxtw]
    afb8:	strb	w1, [x0]
    afbc:	ldr	x0, [x19]
    afc0:	ldr	w1, [x19, #120]
    afc4:	ldp	w2, w3, [x0, #32]
    afc8:	add	w1, w1, w5
    afcc:	ldr	x4, [x0, #24]
    afd0:	str	w1, [x19, #120]
    afd4:	sub	w2, w2, #0x1
    afd8:	add	w3, w3, w5
    afdc:	add	x4, x4, #0x1
    afe0:	str	x4, [x0, #24]
    afe4:	stp	w2, w3, [x0, #32]
    afe8:	cbz	w3, b218 <BZ2_decompress@@Base+0x2c70>
    afec:	ldr	w3, [x19, #116]
    aff0:	cbnz	w2, afa0 <BZ2_decompress@@Base+0x29f8>
    aff4:	orr	w20, w5, w20
    aff8:	cmp	w1, w3
    affc:	b.lt	b16c <BZ2_decompress@@Base+0x2bc4>  // b.tstop
    b000:	ldr	w2, [x19, #8]
    b004:	cmp	w2, #0x4
    b008:	b.ne	b030 <BZ2_decompress@@Base+0x2a88>  // b.any
    b00c:	ldr	w0, [x19, #16]
    b010:	cbnz	w0, b030 <BZ2_decompress@@Base+0x2a88>
    b014:	ldr	w0, [x19, #92]
    b018:	cmp	w0, #0xff
    b01c:	b.hi	b16c <BZ2_decompress@@Base+0x2bc4>  // b.pmore
    b020:	ldr	w0, [x19, #96]
    b024:	cmp	w0, #0x0
    b028:	b.le	b16c <BZ2_decompress@@Base+0x2bc4>
    b02c:	nop
    b030:	add	x1, x19, #0x80
    b034:	add	x0, x19, #0x180
    b038:	mov	w3, #0xffffffff            	// #-1
    b03c:	str	wzr, [x19, #108]
    b040:	stur	xzr, [x19, #116]
    b044:	str	w3, [x19, #648]
    b048:	strb	wzr, [x1], #1
    b04c:	cmp	x0, x1
    b050:	b.ne	b048 <BZ2_decompress@@Base+0x2aa0>  // b.any
    b054:	ldr	w0, [x19, #660]
    b058:	mov	w1, #0x2                   	// #2
    b05c:	str	w1, [x19, #12]
    b060:	cmp	w2, #0x3
    b064:	add	w0, w0, #0x1
    b068:	str	w0, [x19, #660]
    b06c:	mov	w3, #0x0                   	// #0
    b070:	b.eq	b14c <BZ2_decompress@@Base+0x2ba4>  // b.none
    b074:	ldr	w6, [x19, #112]
    b078:	cmp	w2, #0x2
    b07c:	b.eq	b228 <BZ2_decompress@@Base+0x2c80>  // b.none
    b080:	cmp	w6, w3
    b084:	b.le	b124 <BZ2_decompress@@Base+0x2b7c>
    b088:	ldr	x0, [x19]
    b08c:	mov	w2, #0x0                   	// #0
    b090:	ldr	x9, [x23, #4024]
    b094:	ldr	w5, [x0, #8]
    b098:	cbz	w5, b384 <BZ2_decompress@@Base+0x2ddc>
    b09c:	ldr	w1, [x19, #16]
    b0a0:	cbz	w1, b318 <BZ2_decompress@@Base+0x2d70>
    b0a4:	ldr	x2, [x0]
    b0a8:	ldp	w4, w7, [x19, #92]
    b0ac:	ldrb	w10, [x2]
    b0b0:	cmp	w10, w4
    b0b4:	b.eq	b18c <BZ2_decompress@@Base+0x2be4>  // b.none
    b0b8:	cmp	w7, #0x1
    b0bc:	b.eq	b1a4 <BZ2_decompress@@Base+0x2bfc>  // b.none
    b0c0:	cmp	w4, #0xff
    b0c4:	b.ls	b1f0 <BZ2_decompress@@Base+0x2c48>  // b.plast
    b0c8:	ldr	w3, [x19, #108]
    b0cc:	stp	w10, w24, [x19, #92]
    b0d0:	ldr	w4, [x0, #12]
    b0d4:	add	x2, x2, #0x1
    b0d8:	sub	w5, w5, #0x1
    b0dc:	str	x2, [x0]
    b0e0:	add	w2, w4, #0x1
    b0e4:	str	w5, [x0, #8]
    b0e8:	str	w2, [x0, #12]
    b0ec:	cbnz	w2, b0fc <BZ2_decompress@@Base+0x2b54>
    b0f0:	ldr	w2, [x0, #16]
    b0f4:	add	w2, w2, #0x1
    b0f8:	str	w2, [x0, #16]
    b0fc:	sub	w1, w1, #0x1
    b100:	str	w1, [x19, #16]
    b104:	cmp	w6, w3
    b108:	mov	w2, #0x1                   	// #1
    b10c:	b.gt	b098 <BZ2_decompress@@Base+0x2af0>
    b110:	mov	w4, w2
    b114:	ldr	w0, [x19, #8]
    b118:	orr	w21, w4, w21
    b11c:	cmp	w0, #0x2
    b120:	b.eq	b370 <BZ2_decompress@@Base+0x2dc8>  // b.none
    b124:	ldr	w0, [x19, #16]
    b128:	cbz	w0, b328 <BZ2_decompress@@Base+0x2d80>
    b12c:	ldr	w0, [x19, #108]
    b130:	cmp	w0, w6
    b134:	b.ge	b370 <BZ2_decompress@@Base+0x2dc8>  // b.tcont
    b138:	ldr	x0, [x19]
    b13c:	ldr	w0, [x0, #8]
    b140:	cbz	w0, b16c <BZ2_decompress@@Base+0x2bc4>
    b144:	ldr	w0, [x19, #12]
    b148:	b	af84 <BZ2_decompress@@Base+0x29dc>
    b14c:	ldr	w0, [x19, #16]
    b150:	cbnz	w0, b358 <BZ2_decompress@@Base+0x2db0>
    b154:	ldr	w0, [x19, #92]
    b158:	cmp	w0, #0xff
    b15c:	b.hi	b16c <BZ2_decompress@@Base+0x2bc4>  // b.pmore
    b160:	ldr	w0, [x19, #96]
    b164:	cmp	w0, #0x0
    b168:	b.gt	b358 <BZ2_decompress@@Base+0x2db0>
    b16c:	orr	w20, w21, w20
    b170:	cmp	w20, #0x0
    b174:	cset	w0, ne  // ne = any
    b178:	ldp	x19, x20, [sp, #16]
    b17c:	ldp	x21, x22, [sp, #32]
    b180:	ldp	x23, x24, [sp, #48]
    b184:	ldp	x29, x30, [sp], #64
    b188:	ret
    b18c:	cmp	w7, #0xff
    b190:	b.eq	b1f0 <BZ2_decompress@@Base+0x2c48>  // b.none
    b194:	add	w7, w7, #0x1
    b198:	ldr	w3, [x19, #108]
    b19c:	str	w7, [x19, #96]
    b1a0:	b	b0d0 <BZ2_decompress@@Base+0x2b28>
    b1a4:	ldr	w1, [x19, #648]
    b1a8:	and	w0, w4, #0xff
    b1ac:	add	x2, x19, w4, uxtw
    b1b0:	eor	w0, w0, w1, lsr #24
    b1b4:	ldr	w0, [x9, x0, lsl #2]
    b1b8:	eor	w1, w0, w1, lsl #8
    b1bc:	str	w1, [x19, #648]
    b1c0:	strb	w7, [x2, #128]
    b1c4:	ldr	x0, [x19, #64]
    b1c8:	strb	w4, [x0, w3, sxtw]
    b1cc:	ldr	x0, [x19]
    b1d0:	ldp	w3, w6, [x19, #108]
    b1d4:	ldr	w5, [x0, #8]
    b1d8:	add	w3, w3, #0x1
    b1dc:	ldr	w1, [x19, #16]
    b1e0:	ldr	x2, [x0]
    b1e4:	str	w10, [x19, #92]
    b1e8:	str	w3, [x19, #108]
    b1ec:	b	b0d0 <BZ2_decompress@@Base+0x2b28>
    b1f0:	mov	x0, x19
    b1f4:	bl	adc0 <BZ2_decompress@@Base+0x2818>
    b1f8:	ldr	x0, [x19]
    b1fc:	ldr	w1, [x19, #16]
    b200:	ldr	w6, [x19, #112]
    b204:	ldr	w5, [x0, #8]
    b208:	ldr	x2, [x0]
    b20c:	b	b0c8 <BZ2_decompress@@Base+0x2b20>
    b210:	orr	w20, w5, w20
    b214:	b	b000 <BZ2_decompress@@Base+0x2a58>
    b218:	ldr	w3, [x0, #40]
    b21c:	add	w3, w3, w5
    b220:	str	w3, [x0, #40]
    b224:	b	afec <BZ2_decompress@@Base+0x2a44>
    b228:	mov	w4, #0x0                   	// #0
    b22c:	nop
    b230:	cmp	w3, w6
    b234:	b.ge	b114 <BZ2_decompress@@Base+0x2b6c>  // b.tcont
    b238:	ldr	x0, [x19]
    b23c:	ldr	w1, [x0, #8]
    b240:	cbz	w1, b398 <BZ2_decompress@@Base+0x2df0>
    b244:	ldr	x2, [x0]
    b248:	ldp	w4, w5, [x19, #92]
    b24c:	ldrb	w9, [x2]
    b250:	cmp	w9, w4
    b254:	b.eq	b2bc <BZ2_decompress@@Base+0x2d14>  // b.none
    b258:	cmp	w5, #0x1
    b25c:	b.eq	b2d0 <BZ2_decompress@@Base+0x2d28>  // b.none
    b260:	cmp	w4, #0xff
    b264:	b.ls	b2a0 <BZ2_decompress@@Base+0x2cf8>  // b.plast
    b268:	stp	w9, w24, [x19, #92]
    b26c:	ldr	w4, [x0, #12]
    b270:	add	x2, x2, #0x1
    b274:	sub	w1, w1, #0x1
    b278:	str	x2, [x0]
    b27c:	add	w2, w4, #0x1
    b280:	str	w1, [x0, #8]
    b284:	str	w2, [x0, #12]
    b288:	mov	w4, #0x1                   	// #1
    b28c:	cbnz	w2, b230 <BZ2_decompress@@Base+0x2c88>
    b290:	ldr	w1, [x0, #16]
    b294:	add	w1, w1, w4
    b298:	str	w1, [x0, #16]
    b29c:	b	b230 <BZ2_decompress@@Base+0x2c88>
    b2a0:	mov	x0, x19
    b2a4:	bl	adc0 <BZ2_decompress@@Base+0x2818>
    b2a8:	ldr	x0, [x19]
    b2ac:	ldp	w3, w6, [x19, #108]
    b2b0:	ldr	w1, [x0, #8]
    b2b4:	ldr	x2, [x0]
    b2b8:	b	b268 <BZ2_decompress@@Base+0x2cc0>
    b2bc:	cmp	w5, #0xff
    b2c0:	b.eq	b2a0 <BZ2_decompress@@Base+0x2cf8>  // b.none
    b2c4:	add	w5, w5, #0x1
    b2c8:	str	w5, [x19, #96]
    b2cc:	b	b26c <BZ2_decompress@@Base+0x2cc4>
    b2d0:	ldr	w1, [x19, #648]
    b2d4:	and	w0, w4, #0xff
    b2d8:	add	x2, x19, w4, uxtw
    b2dc:	eor	w0, w0, w1, lsr #24
    b2e0:	ldr	w0, [x22, x0, lsl #2]
    b2e4:	eor	w1, w0, w1, lsl #8
    b2e8:	str	w1, [x19, #648]
    b2ec:	strb	w5, [x2, #128]
    b2f0:	ldr	x0, [x19, #64]
    b2f4:	strb	w4, [x0, w3, sxtw]
    b2f8:	ldr	x0, [x19]
    b2fc:	ldp	w3, w6, [x19, #108]
    b300:	ldr	w1, [x0, #8]
    b304:	add	w3, w3, #0x1
    b308:	ldr	x2, [x0]
    b30c:	str	w9, [x19, #92]
    b310:	str	w3, [x19, #108]
    b314:	b	b26c <BZ2_decompress@@Base+0x2cc4>
    b318:	ldr	w0, [x19, #8]
    b31c:	orr	w21, w21, w2
    b320:	cmp	w0, #0x2
    b324:	b.eq	b12c <BZ2_decompress@@Base+0x2b84>  // b.none
    b328:	ldr	w0, [x19, #92]
    b32c:	cmp	w0, #0xff
    b330:	b.ls	b3c8 <BZ2_decompress@@Base+0x2e20>  // b.plast
    b334:	ldr	w1, [x19, #8]
    b338:	mov	x0, #0x100                 	// #256
    b33c:	stur	x0, [x19, #92]
    b340:	mov	x0, x19
    b344:	cmp	w1, #0x4
    b348:	cset	w1, eq  // eq = none
    b34c:	bl	15e0 <BZ2_compressBlock@plt>
    b350:	str	w24, [x19, #12]
    b354:	b	af8c <BZ2_decompress@@Base+0x29e4>
    b358:	ldr	w6, [x19, #112]
    b35c:	mov	w3, #0x0                   	// #0
    b360:	b	b080 <BZ2_decompress@@Base+0x2ad8>
    b364:	ldr	w2, [x19, #8]
    b368:	ldr	w3, [x19, #108]
    b36c:	b	b074 <BZ2_decompress@@Base+0x2acc>
    b370:	mov	x0, x19
    b374:	mov	w1, #0x0                   	// #0
    b378:	bl	15e0 <BZ2_compressBlock@plt>
    b37c:	str	w24, [x19, #12]
    b380:	b	af8c <BZ2_decompress@@Base+0x29e4>
    b384:	ldr	w0, [x19, #8]
    b388:	orr	w21, w21, w2
    b38c:	cmp	w0, #0x2
    b390:	b.ne	b124 <BZ2_decompress@@Base+0x2b7c>  // b.any
    b394:	b	b12c <BZ2_decompress@@Base+0x2b84>
    b398:	ldr	w0, [x19, #8]
    b39c:	orr	w21, w4, w21
    b3a0:	cmp	w0, #0x2
    b3a4:	b.ne	b124 <BZ2_decompress@@Base+0x2b7c>  // b.any
    b3a8:	orr	w20, w21, w20
    b3ac:	cmp	w20, #0x0
    b3b0:	cset	w0, ne  // ne = any
    b3b4:	ldp	x19, x20, [sp, #16]
    b3b8:	ldp	x21, x22, [sp, #32]
    b3bc:	ldp	x23, x24, [sp, #48]
    b3c0:	ldp	x29, x30, [sp], #64
    b3c4:	ret
    b3c8:	mov	x0, x19
    b3cc:	bl	adc0 <BZ2_decompress@@Base+0x2818>
    b3d0:	b	b334 <BZ2_decompress@@Base+0x2d8c>
    b3d4:	nop

000000000000b3d8 <BZ2_bzCompressInit@@Base>:
    b3d8:	stp	x29, x30, [sp, #-64]!
    b3dc:	cmp	x0, #0x0
    b3e0:	mov	x29, sp
    b3e4:	stp	x19, x20, [sp, #16]
    b3e8:	mov	x20, x0
    b3ec:	sub	w0, w1, #0x1
    b3f0:	ccmp	w0, #0x8, #0x2, ne  // ne = any
    b3f4:	b.hi	b578 <BZ2_bzCompressInit@@Base+0x1a0>  // b.pmore
    b3f8:	stp	x21, x22, [sp, #32]
    b3fc:	cmp	w3, #0xfa
    b400:	b.hi	b56c <BZ2_bzCompressInit@@Base+0x194>  // b.pmore
    b404:	cmp	w3, #0x0
    b408:	mov	w0, #0x1e                  	// #30
    b40c:	csel	w22, w3, w0, ne  // ne = any
    b410:	stp	x23, x24, [sp, #48]
    b414:	mov	w23, w1
    b418:	ldr	x3, [x20, #56]
    b41c:	mov	w24, w2
    b420:	cbz	x3, b544 <BZ2_bzCompressInit@@Base+0x16c>
    b424:	ldr	x0, [x20, #64]
    b428:	cbz	x0, b55c <BZ2_bzCompressInit@@Base+0x184>
    b42c:	ldr	x0, [x20, #72]
    b430:	mov	w2, #0x1                   	// #1
    b434:	mov	w1, #0xd9d8                	// #55768
    b438:	blr	x3
    b43c:	mov	x19, x0
    b440:	cbz	x0, b5c4 <BZ2_bzCompressInit@@Base+0x1ec>
    b444:	mov	w21, #0x86a0                	// #34464
    b448:	mov	w2, #0x1                   	// #1
    b44c:	movk	w21, #0x1, lsl #16
    b450:	ldr	x3, [x20, #56]
    b454:	mul	w21, w23, w21
    b458:	ldr	x0, [x20, #72]
    b45c:	str	x20, [x19]
    b460:	stp	xzr, xzr, [x19, #24]
    b464:	lsl	w1, w21, #2
    b468:	str	xzr, [x19, #40]
    b46c:	blr	x3
    b470:	mov	x2, x0
    b474:	ldr	x3, [x20, #56]
    b478:	add	w1, w21, #0x22
    b47c:	ldr	x0, [x20, #72]
    b480:	str	x2, [x19, #24]
    b484:	lsl	w1, w1, #2
    b488:	mov	w2, #0x1                   	// #1
    b48c:	blr	x3
    b490:	ldr	x3, [x20, #56]
    b494:	str	x0, [x19, #32]
    b498:	ldr	x0, [x20, #72]
    b49c:	mov	w1, #0x40004               	// #262148
    b4a0:	mov	w2, #0x1                   	// #1
    b4a4:	blr	x3
    b4a8:	str	x0, [x19, #40]
    b4ac:	ldr	x1, [x19, #24]
    b4b0:	cbz	x1, b588 <BZ2_bzCompressInit@@Base+0x1b0>
    b4b4:	ldr	x2, [x19, #32]
    b4b8:	cmp	x2, #0x0
    b4bc:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    b4c0:	b.eq	b580 <BZ2_bzCompressInit@@Base+0x1a8>  // b.none
    b4c4:	mov	x0, #0x200000002           	// #8589934594
    b4c8:	sub	w21, w21, #0x13
    b4cc:	str	x0, [x19, #8]
    b4d0:	add	x4, x19, #0x80
    b4d4:	stp	x1, x2, [x19, #56]
    b4d8:	add	x5, x19, #0x180
    b4dc:	mov	x2, #0x100                 	// #256
    b4e0:	stp	x1, xzr, [x19, #72]
    b4e4:	mov	w0, #0xffffffff            	// #-1
    b4e8:	str	w22, [x19, #88]
    b4ec:	str	w21, [x19, #112]
    b4f0:	str	wzr, [x19, #652]
    b4f4:	str	w24, [x19, #656]
    b4f8:	str	w23, [x19, #664]
    b4fc:	stur	xzr, [x20, #12]
    b500:	stur	xzr, [x20, #36]
    b504:	str	x19, [x20, #48]
    b508:	stur	x2, [x19, #92]
    b50c:	str	wzr, [x19, #108]
    b510:	stur	xzr, [x19, #116]
    b514:	str	w0, [x19, #648]
    b518:	strb	wzr, [x4], #1
    b51c:	cmp	x4, x5
    b520:	b.ne	b518 <BZ2_bzCompressInit@@Base+0x140>  // b.any
    b524:	mov	w1, #0x1                   	// #1
    b528:	mov	w0, #0x0                   	// #0
    b52c:	ldp	x21, x22, [sp, #32]
    b530:	ldp	x23, x24, [sp, #48]
    b534:	str	w1, [x19, #660]
    b538:	ldp	x19, x20, [sp, #16]
    b53c:	ldp	x29, x30, [sp], #64
    b540:	ret
    b544:	adrp	x0, a000 <BZ2_decompress@@Base+0x1a58>
    b548:	add	x0, x0, #0xf38
    b54c:	mov	x3, x0
    b550:	str	x0, [x20, #56]
    b554:	ldr	x0, [x20, #64]
    b558:	cbnz	x0, b42c <BZ2_bzCompressInit@@Base+0x54>
    b55c:	adrp	x0, a000 <BZ2_decompress@@Base+0x1a58>
    b560:	add	x0, x0, #0xf28
    b564:	str	x0, [x20, #64]
    b568:	b	b42c <BZ2_bzCompressInit@@Base+0x54>
    b56c:	mov	w0, #0xfffffffe            	// #-2
    b570:	ldp	x21, x22, [sp, #32]
    b574:	b	b538 <BZ2_bzCompressInit@@Base+0x160>
    b578:	mov	w0, #0xfffffffe            	// #-2
    b57c:	b	b538 <BZ2_bzCompressInit@@Base+0x160>
    b580:	ldp	x2, x0, [x20, #64]
    b584:	blr	x2
    b588:	ldr	x1, [x19, #32]
    b58c:	ldp	x2, x0, [x20, #64]
    b590:	cbz	x1, b59c <BZ2_bzCompressInit@@Base+0x1c4>
    b594:	blr	x2
    b598:	ldp	x2, x0, [x20, #64]
    b59c:	ldr	x1, [x19, #40]
    b5a0:	cbz	x1, b5ac <BZ2_bzCompressInit@@Base+0x1d4>
    b5a4:	blr	x2
    b5a8:	ldp	x2, x0, [x20, #64]
    b5ac:	mov	x1, x19
    b5b0:	blr	x2
    b5b4:	mov	w0, #0xfffffffd            	// #-3
    b5b8:	ldp	x21, x22, [sp, #32]
    b5bc:	ldp	x23, x24, [sp, #48]
    b5c0:	b	b538 <BZ2_bzCompressInit@@Base+0x160>
    b5c4:	mov	w0, #0xfffffffd            	// #-3
    b5c8:	ldp	x21, x22, [sp, #32]
    b5cc:	ldp	x23, x24, [sp, #48]
    b5d0:	b	b538 <BZ2_bzCompressInit@@Base+0x160>
    b5d4:	nop

000000000000b5d8 <BZ2_bzCompress@@Base>:
    b5d8:	stp	x29, x30, [sp, #-32]!
    b5dc:	mov	x29, sp
    b5e0:	stp	x19, x20, [sp, #16]
    b5e4:	cbz	x0, b790 <BZ2_bzCompress@@Base+0x1b8>
    b5e8:	ldr	x20, [x0, #48]
    b5ec:	cbz	x20, b790 <BZ2_bzCompress@@Base+0x1b8>
    b5f0:	ldr	x2, [x20]
    b5f4:	cmp	x2, x0
    b5f8:	b.ne	b790 <BZ2_bzCompress@@Base+0x1b8>  // b.any
    b5fc:	ldr	w19, [x20, #8]
    b600:	cmp	w1, #0x1
    b604:	mov	w2, #0x3                   	// #3
    b608:	mov	w3, #0x4                   	// #4
    b60c:	mov	w4, w2
    b610:	csel	w2, w2, w3, eq  // eq = none
    b614:	cmp	w19, #0x3
    b618:	b.eq	b660 <BZ2_bzCompress@@Base+0x88>  // b.none
    b61c:	b.gt	b6c0 <BZ2_bzCompress@@Base+0xe8>
    b620:	cmp	w19, #0x1
    b624:	b.eq	b724 <BZ2_bzCompress@@Base+0x14c>  // b.none
    b628:	cmp	w19, #0x2
    b62c:	b.ne	b738 <BZ2_bzCompress@@Base+0x160>  // b.any
    b630:	cbz	w1, b778 <BZ2_bzCompress@@Base+0x1a0>
    b634:	cmp	w1, #0x1
    b638:	b.eq	b764 <BZ2_bzCompress@@Base+0x18c>  // b.none
    b63c:	cmp	w1, #0x2
    b640:	b.ne	b790 <BZ2_bzCompress@@Base+0x1b8>  // b.any
    b644:	ldr	w5, [x0, #8]
    b648:	mov	w19, w2
    b64c:	str	w3, [x20, #8]
    b650:	str	w5, [x20, #16]
    b654:	cmp	w19, #0x3
    b658:	b.ne	b61c <BZ2_bzCompress@@Base+0x44>  // b.any
    b65c:	nop
    b660:	cmp	w1, #0x1
    b664:	b.ne	b724 <BZ2_bzCompress@@Base+0x14c>  // b.any
    b668:	ldr	w0, [x0, #8]
    b66c:	ldr	w1, [x20, #16]
    b670:	cmp	w1, w0
    b674:	b.ne	b724 <BZ2_bzCompress@@Base+0x14c>  // b.any
    b678:	mov	x0, x20
    b67c:	bl	af48 <BZ2_decompress@@Base+0x29a0>
    b680:	ldr	w0, [x20, #16]
    b684:	mov	w19, #0x2                   	// #2
    b688:	cbnz	w0, b728 <BZ2_bzCompress@@Base+0x150>
    b68c:	ldr	w0, [x20, #92]
    b690:	cmp	w0, #0xff
    b694:	b.hi	b6a4 <BZ2_bzCompress@@Base+0xcc>  // b.pmore
    b698:	ldr	w0, [x20, #96]
    b69c:	cmp	w0, #0x0
    b6a0:	b.gt	b728 <BZ2_bzCompress@@Base+0x150>
    b6a4:	ldp	w0, w1, [x20, #116]
    b6a8:	mov	w19, #0x2                   	// #2
    b6ac:	cmp	w1, w0
    b6b0:	b.lt	b728 <BZ2_bzCompress@@Base+0x150>  // b.tstop
    b6b4:	str	w19, [x20, #8]
    b6b8:	mov	w19, #0x1                   	// #1
    b6bc:	b	b728 <BZ2_bzCompress@@Base+0x150>
    b6c0:	cmp	w19, #0x4
    b6c4:	b.ne	b738 <BZ2_bzCompress@@Base+0x160>  // b.any
    b6c8:	cmp	w1, #0x2
    b6cc:	b.ne	b724 <BZ2_bzCompress@@Base+0x14c>  // b.any
    b6d0:	ldr	w0, [x0, #8]
    b6d4:	ldr	w1, [x20, #16]
    b6d8:	cmp	w1, w0
    b6dc:	b.ne	b724 <BZ2_bzCompress@@Base+0x14c>  // b.any
    b6e0:	mov	x0, x20
    b6e4:	bl	af48 <BZ2_decompress@@Base+0x29a0>
    b6e8:	tst	w0, #0xff
    b6ec:	b.eq	b724 <BZ2_bzCompress@@Base+0x14c>  // b.none
    b6f0:	ldr	w0, [x20, #16]
    b6f4:	cbnz	w0, b710 <BZ2_bzCompress@@Base+0x138>
    b6f8:	ldr	w0, [x20, #92]
    b6fc:	cmp	w0, #0xff
    b700:	b.hi	b74c <BZ2_bzCompress@@Base+0x174>  // b.pmore
    b704:	ldr	w0, [x20, #96]
    b708:	cmp	w0, #0x0
    b70c:	b.le	b74c <BZ2_bzCompress@@Base+0x174>
    b710:	mov	w19, #0x3                   	// #3
    b714:	mov	w0, w19
    b718:	ldp	x19, x20, [sp, #16]
    b71c:	ldp	x29, x30, [sp], #32
    b720:	ret
    b724:	mov	w19, #0xffffffff            	// #-1
    b728:	mov	w0, w19
    b72c:	ldp	x19, x20, [sp, #16]
    b730:	ldp	x29, x30, [sp], #32
    b734:	ret
    b738:	mov	w19, #0x0                   	// #0
    b73c:	mov	w0, w19
    b740:	ldp	x19, x20, [sp, #16]
    b744:	ldp	x29, x30, [sp], #32
    b748:	ret
    b74c:	ldp	w0, w1, [x20, #116]
    b750:	cmp	w1, w0
    b754:	b.lt	b710 <BZ2_bzCompress@@Base+0x138>  // b.tstop
    b758:	mov	w0, #0x1                   	// #1
    b75c:	str	w0, [x20, #8]
    b760:	b	b728 <BZ2_bzCompress@@Base+0x150>
    b764:	ldr	w5, [x0, #8]
    b768:	mov	w19, w2
    b76c:	str	w4, [x20, #8]
    b770:	str	w5, [x20, #16]
    b774:	b	b654 <BZ2_bzCompress@@Base+0x7c>
    b778:	mov	x0, x20
    b77c:	mov	w19, #0x1                   	// #1
    b780:	bl	af48 <BZ2_decompress@@Base+0x29a0>
    b784:	tst	w0, #0xff
    b788:	b.ne	b728 <BZ2_bzCompress@@Base+0x150>  // b.any
    b78c:	nop
    b790:	mov	w19, #0xfffffffe            	// #-2
    b794:	b	b728 <BZ2_bzCompress@@Base+0x150>

000000000000b798 <BZ2_bzCompressEnd@@Base>:
    b798:	cbz	x0, b818 <BZ2_bzCompressEnd@@Base+0x80>
    b79c:	stp	x29, x30, [sp, #-32]!
    b7a0:	mov	x29, sp
    b7a4:	stp	x19, x20, [sp, #16]
    b7a8:	mov	x19, x0
    b7ac:	ldr	x20, [x0, #48]
    b7b0:	cbz	x20, b810 <BZ2_bzCompressEnd@@Base+0x78>
    b7b4:	ldr	x0, [x20]
    b7b8:	cmp	x0, x19
    b7bc:	b.ne	b810 <BZ2_bzCompressEnd@@Base+0x78>  // b.any
    b7c0:	ldr	x1, [x20, #24]
    b7c4:	ldp	x2, x0, [x19, #64]
    b7c8:	cbz	x1, b7d4 <BZ2_bzCompressEnd@@Base+0x3c>
    b7cc:	blr	x2
    b7d0:	ldp	x2, x0, [x19, #64]
    b7d4:	ldr	x1, [x20, #32]
    b7d8:	cbz	x1, b7e4 <BZ2_bzCompressEnd@@Base+0x4c>
    b7dc:	blr	x2
    b7e0:	ldp	x2, x0, [x19, #64]
    b7e4:	ldr	x1, [x20, #40]
    b7e8:	cbz	x1, b7f4 <BZ2_bzCompressEnd@@Base+0x5c>
    b7ec:	blr	x2
    b7f0:	ldp	x2, x0, [x19, #64]
    b7f4:	ldr	x1, [x19, #48]
    b7f8:	blr	x2
    b7fc:	str	xzr, [x19, #48]
    b800:	mov	w0, #0x0                   	// #0
    b804:	ldp	x19, x20, [sp, #16]
    b808:	ldp	x29, x30, [sp], #32
    b80c:	ret
    b810:	mov	w0, #0xfffffffe            	// #-2
    b814:	b	b804 <BZ2_bzCompressEnd@@Base+0x6c>
    b818:	mov	w0, #0xfffffffe            	// #-2
    b81c:	ret

000000000000b820 <BZ2_bzDecompressInit@@Base>:
    b820:	cbz	x0, b8fc <BZ2_bzDecompressInit@@Base+0xdc>
    b824:	stp	x29, x30, [sp, #-48]!
    b828:	cmp	w2, #0x1
    b82c:	mov	x29, sp
    b830:	stp	x19, x20, [sp, #16]
    b834:	mov	w20, w2
    b838:	b.hi	b8e8 <BZ2_bzDecompressInit@@Base+0xc8>  // b.pmore
    b83c:	str	x21, [sp, #32]
    b840:	cmp	w1, #0x4
    b844:	mov	w21, w1
    b848:	b.hi	b8f0 <BZ2_bzDecompressInit@@Base+0xd0>  // b.pmore
    b84c:	ldr	x3, [x0, #56]
    b850:	mov	x19, x0
    b854:	cbz	x3, b8c0 <BZ2_bzDecompressInit@@Base+0xa0>
    b858:	ldr	x0, [x19, #64]
    b85c:	cbz	x0, b8d8 <BZ2_bzDecompressInit@@Base+0xb8>
    b860:	ldr	x0, [x19, #72]
    b864:	mov	w2, #0x1                   	// #1
    b868:	mov	w1, #0xfa90                	// #64144
    b86c:	blr	x3
    b870:	mov	x3, x0
    b874:	cbz	x0, b904 <BZ2_bzDecompressInit@@Base+0xe4>
    b878:	str	x19, [x3]
    b87c:	mov	w1, #0xa                   	// #10
    b880:	str	x3, [x19, #48]
    b884:	mov	w0, #0x0                   	// #0
    b888:	str	w1, [x3, #8]
    b88c:	str	xzr, [x3, #32]
    b890:	str	wzr, [x3, #3188]
    b894:	stur	xzr, [x19, #12]
    b898:	stur	xzr, [x19, #36]
    b89c:	strb	w20, [x3, #44]
    b8a0:	stp	wzr, w21, [x3, #48]
    b8a4:	ldr	x21, [sp, #32]
    b8a8:	str	xzr, [x3, #3152]
    b8ac:	str	xzr, [x3, #3160]
    b8b0:	str	xzr, [x3, #3168]
    b8b4:	ldp	x19, x20, [sp, #16]
    b8b8:	ldp	x29, x30, [sp], #48
    b8bc:	ret
    b8c0:	adrp	x0, a000 <BZ2_decompress@@Base+0x1a58>
    b8c4:	add	x0, x0, #0xf38
    b8c8:	mov	x3, x0
    b8cc:	str	x0, [x19, #56]
    b8d0:	ldr	x0, [x19, #64]
    b8d4:	cbnz	x0, b860 <BZ2_bzDecompressInit@@Base+0x40>
    b8d8:	adrp	x0, a000 <BZ2_decompress@@Base+0x1a58>
    b8dc:	add	x0, x0, #0xf28
    b8e0:	str	x0, [x19, #64]
    b8e4:	b	b860 <BZ2_bzDecompressInit@@Base+0x40>
    b8e8:	mov	w0, #0xfffffffe            	// #-2
    b8ec:	b	b8b4 <BZ2_bzDecompressInit@@Base+0x94>
    b8f0:	mov	w0, #0xfffffffe            	// #-2
    b8f4:	ldr	x21, [sp, #32]
    b8f8:	b	b8b4 <BZ2_bzDecompressInit@@Base+0x94>
    b8fc:	mov	w0, #0xfffffffe            	// #-2
    b900:	ret
    b904:	mov	w0, #0xfffffffd            	// #-3
    b908:	ldr	x21, [sp, #32]
    b90c:	b	b8b4 <BZ2_bzDecompressInit@@Base+0x94>

000000000000b910 <BZ2_indexIntoF@@Base>:
    b910:	mov	w5, w0
    b914:	mov	w3, #0x100                 	// #256
    b918:	mov	w0, #0x0                   	// #0
    b91c:	nop
    b920:	add	w2, w0, w3
    b924:	asr	w2, w2, #1
    b928:	ldr	w4, [x1, w2, sxtw #2]
    b92c:	cmp	w4, w5
    b930:	csel	w3, w3, w2, le
    b934:	csel	w0, w2, w0, le
    b938:	sub	w2, w3, w0
    b93c:	cmp	w2, #0x1
    b940:	b.ne	b920 <BZ2_indexIntoF@@Base+0x10>  // b.any
    b944:	ret

000000000000b948 <BZ2_bzDecompress@@Base>:
    b948:	stp	x29, x30, [sp, #-96]!
    b94c:	mov	x29, sp
    b950:	stp	x23, x24, [sp, #48]
    b954:	cbz	x0, c744 <BZ2_bzDecompress@@Base+0xdfc>
    b958:	stp	x19, x20, [sp, #16]
    b95c:	ldr	x19, [x0, #48]
    b960:	cbz	x19, c724 <BZ2_bzDecompress@@Base+0xddc>
    b964:	ldr	x1, [x19]
    b968:	cmp	x1, x0
    b96c:	b.ne	c724 <BZ2_bzDecompress@@Base+0xddc>  // b.any
    b970:	stp	x21, x22, [sp, #32]
    b974:	adrp	x21, 1f000 <BZ2_bzerror@@Base+0x11650>
    b978:	mov	w20, #0x86a0                	// #34464
    b97c:	ldr	x22, [x21, #4024]
    b980:	movk	w20, #0x1, lsl #16
    b984:	ldr	w1, [x19, #8]
    b988:	stp	x25, x26, [sp, #64]
    b98c:	b	b998 <BZ2_bzDecompress@@Base+0x50>
    b990:	cmp	w1, #0x9
    b994:	b.gt	babc <BZ2_bzDecompress@@Base+0x174>
    b998:	cmp	w1, #0x1
    b99c:	b.eq	c690 <BZ2_bzDecompress@@Base+0xd48>  // b.none
    b9a0:	cmp	w1, #0x2
    b9a4:	b.ne	b990 <BZ2_bzDecompress@@Base+0x48>  // b.any
    b9a8:	ldrb	w2, [x19, #44]
    b9ac:	add	x4, x19, #0xc, lsl #12
    b9b0:	ldr	x0, [x19]
    b9b4:	ldrb	w3, [x19, #20]
    b9b8:	ldr	w10, [x0, #32]
    b9bc:	cbz	w2, bba0 <BZ2_bzDecompress@@Base+0x258>
    b9c0:	cbnz	w3, c0f4 <BZ2_bzDecompress@@Base+0x7ac>
    b9c4:	cbz	w10, ba48 <BZ2_bzDecompress@@Base+0x100>
    b9c8:	ldr	x6, [x21, #4024]
    b9cc:	add	x5, x19, #0x448
    b9d0:	mov	w7, #0x1                   	// #1
    b9d4:	mov	w8, #0x2                   	// #2
    b9d8:	mov	w9, #0x3                   	// #3
    b9dc:	nop
    b9e0:	ldr	w12, [x19, #16]
    b9e4:	cbz	w12, baec <BZ2_bzDecompress@@Base+0x1a4>
    b9e8:	ldr	x0, [x0, #24]
    b9ec:	ldrb	w1, [x19, #12]
    b9f0:	strb	w1, [x0]
    b9f4:	ldr	w3, [x19, #3184]
    b9f8:	ldr	x0, [x19]
    b9fc:	eor	w1, w1, w3, lsr #24
    ba00:	ldr	w11, [x19, #16]
    ba04:	ldr	x10, [x0, #24]
    ba08:	sub	w11, w11, #0x1
    ba0c:	ldr	w12, [x6, x1, lsl #2]
    ba10:	ldp	w1, w2, [x0, #32]
    ba14:	str	w11, [x19, #16]
    ba18:	eor	w3, w12, w3, lsl #8
    ba1c:	str	w3, [x19, #3184]
    ba20:	sub	w1, w1, #0x1
    ba24:	add	w2, w2, #0x1
    ba28:	add	x10, x10, #0x1
    ba2c:	str	x10, [x0, #24]
    ba30:	stp	w1, w2, [x0, #32]
    ba34:	cbnz	w2, ba44 <BZ2_bzDecompress@@Base+0xfc>
    ba38:	ldr	w2, [x0, #40]
    ba3c:	add	w2, w2, #0x1
    ba40:	str	w2, [x0, #40]
    ba44:	cbnz	w1, b9e0 <BZ2_bzDecompress@@Base+0x98>
    ba48:	ldr	w12, [x19, #1092]
    ba4c:	ldr	w0, [x4, #14928]
    ba50:	add	w0, w0, #0x1
    ba54:	cmp	w0, w12
    ba58:	b.ne	be68 <BZ2_bzDecompress@@Base+0x520>  // b.any
    ba5c:	ldr	w0, [x19, #16]
    ba60:	cbnz	w0, be68 <BZ2_bzDecompress@@Base+0x520>
    ba64:	ldr	w3, [x19, #3184]
    ba68:	ldr	w0, [x19, #52]
    ba6c:	mvn	w3, w3
    ba70:	str	w3, [x19, #3184]
    ba74:	cmp	w0, #0x2
    ba78:	b.gt	bf38 <BZ2_bzDecompress@@Base+0x5f0>
    ba7c:	cmp	w0, #0x1
    ba80:	b.le	ba98 <BZ2_bzDecompress@@Base+0x150>
    ba84:	adrp	x1, 1f000 <BZ2_bzerror@@Base+0x11650>
    ba88:	mov	w0, #0x5d                  	// #93
    ba8c:	ldr	x1, [x1, #4016]
    ba90:	ldr	x1, [x1]
    ba94:	bl	14c0 <fputc@plt>
    ba98:	ldr	w0, [x19, #3176]
    ba9c:	ldr	w1, [x19, #3184]
    baa0:	cmp	w1, w0
    baa4:	b.ne	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.any
    baa8:	ldr	w0, [x19, #3188]
    baac:	mov	w2, #0xe                   	// #14
    bab0:	str	w2, [x19, #8]
    bab4:	eor	w0, w1, w0, ror #31
    bab8:	str	w0, [x19, #3188]
    babc:	mov	x0, x19
    bac0:	bl	1590 <BZ2_decompress@plt>
    bac4:	mov	w23, w0
    bac8:	cmp	w0, #0x4
    bacc:	b.eq	c704 <BZ2_bzDecompress@@Base+0xdbc>  // b.none
    bad0:	ldr	w1, [x19, #8]
    bad4:	cmp	w1, #0x2
    bad8:	b.eq	b9a8 <BZ2_bzDecompress@@Base+0x60>  // b.none
    badc:	ldp	x19, x20, [sp, #16]
    bae0:	ldp	x21, x22, [sp, #32]
    bae4:	ldp	x25, x26, [sp, #64]
    bae8:	b	bf28 <BZ2_bzDecompress@@Base+0x5e0>
    baec:	ldr	w18, [x4, #14928]
    baf0:	ldr	w13, [x19, #1092]
    baf4:	add	w16, w18, #0x1
    baf8:	cmp	w13, w16
    bafc:	b.eq	ba64 <BZ2_bzDecompress@@Base+0x11c>  // b.none
    bb00:	b.gt	bf18 <BZ2_bzDecompress@@Base+0x5d0>
    bb04:	ldr	w14, [x19, #40]
    bb08:	ldp	w10, w15, [x19, #60]
    bb0c:	strb	w15, [x19, #12]
    bb10:	str	w7, [x19, #16]
    bb14:	mul	w14, w14, w20
    bb18:	cmp	w10, w14
    bb1c:	b.cs	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.hs, b.nlast
    bb20:	mov	w2, #0x0                   	// #0
    bb24:	mov	w3, #0x100                 	// #256
    bb28:	add	w1, w2, w3
    bb2c:	asr	w1, w1, #1
    bb30:	ldr	w11, [x5, w1, sxtw #2]
    bb34:	cmp	w10, w11
    bb38:	csel	w3, w3, w1, ge  // ge = tcont
    bb3c:	csel	w2, w1, w2, ge  // ge = tcont
    bb40:	sub	w1, w3, w2
    bb44:	cmp	w1, #0x1
    bb48:	b.ne	bb28 <BZ2_bzDecompress@@Base+0x1e0>  // b.any
    bb4c:	ldr	x11, [x19, #3168]
    bb50:	lsr	w1, w10, #1
    bb54:	ldr	x3, [x19, #3160]
    bb58:	ubfiz	w23, w10, #2, #1
    bb5c:	ldrb	w1, [x11, w1, uxtw]
    bb60:	cmp	w13, w18
    bb64:	add	w17, w13, #0x1
    bb68:	ldrh	w18, [x3, w10, uxtw #1]
    bb6c:	lsr	w1, w1, w23
    bb70:	str	w17, [x19, #1092]
    bb74:	ubfiz	w1, w1, #16, #4
    bb78:	orr	w1, w1, w18
    bb7c:	str	w1, [x19, #60]
    bb80:	b.eq	bb94 <BZ2_bzDecompress@@Base+0x24c>  // b.none
    bb84:	cmp	w15, w2, uxtb
    bb88:	and	w2, w2, #0xff
    bb8c:	b.eq	be88 <BZ2_bzDecompress@@Base+0x540>  // b.none
    bb90:	str	w2, [x19, #64]
    bb94:	ldr	w1, [x0, #32]
    bb98:	cbnz	w1, b9e0 <BZ2_bzDecompress@@Base+0x98>
    bb9c:	b	ba48 <BZ2_bzDecompress@@Base+0x100>
    bba0:	cbz	w3, bf5c <BZ2_bzDecompress@@Base+0x614>
    bba4:	cbz	w10, ba48 <BZ2_bzDecompress@@Base+0x100>
    bba8:	adrp	x9, 1f000 <BZ2_bzerror@@Base+0x11650>
    bbac:	mov	w8, #0x1                   	// #1
    bbb0:	ldr	x7, [x21, #4024]
    bbb4:	mov	w11, #0x2                   	// #2
    bbb8:	ldr	x9, [x9, #4048]
    bbbc:	mov	w13, #0x3                   	// #3
    bbc0:	mov	x15, x9
    bbc4:	mov	x14, x9
    bbc8:	mov	x12, x9
    bbcc:	mov	x10, x9
    bbd0:	ldr	w1, [x19, #16]
    bbd4:	cbz	w1, bc44 <BZ2_bzDecompress@@Base+0x2fc>
    bbd8:	ldr	x0, [x0, #24]
    bbdc:	ldrb	w1, [x19, #12]
    bbe0:	strb	w1, [x0]
    bbe4:	ldr	w3, [x19, #3184]
    bbe8:	ldrb	w1, [x19, #12]
    bbec:	ldr	x0, [x19]
    bbf0:	eor	w1, w1, w3, lsr #24
    bbf4:	ldr	w6, [x19, #16]
    bbf8:	ldr	x5, [x0, #24]
    bbfc:	sub	w6, w6, #0x1
    bc00:	ldr	w16, [x7, x1, lsl #2]
    bc04:	ldp	w1, w2, [x0, #32]
    bc08:	str	w6, [x19, #16]
    bc0c:	eor	w3, w16, w3, lsl #8
    bc10:	str	w3, [x19, #3184]
    bc14:	sub	w1, w1, #0x1
    bc18:	add	w2, w2, #0x1
    bc1c:	add	x5, x5, #0x1
    bc20:	str	x5, [x0, #24]
    bc24:	stp	w1, w2, [x0, #32]
    bc28:	cbnz	w2, bc38 <BZ2_bzDecompress@@Base+0x2f0>
    bc2c:	ldr	w2, [x0, #40]
    bc30:	add	w2, w2, #0x1
    bc34:	str	w2, [x0, #40]
    bc38:	cbz	w1, ba48 <BZ2_bzDecompress@@Base+0x100>
    bc3c:	ldr	w1, [x19, #16]
    bc40:	cbnz	w1, bbd8 <BZ2_bzDecompress@@Base+0x290>
    bc44:	ldr	w16, [x4, #14928]
    bc48:	ldr	w3, [x19, #1092]
    bc4c:	add	w23, w16, #0x1
    bc50:	cmp	w3, w23
    bc54:	b.eq	ba64 <BZ2_bzDecompress@@Base+0x11c>  // b.none
    bc58:	b.gt	bf18 <BZ2_bzDecompress@@Base+0x5d0>
    bc5c:	ldr	w5, [x19, #40]
    bc60:	ldp	w2, w18, [x19, #60]
    bc64:	strb	w18, [x19, #12]
    bc68:	str	w8, [x19, #16]
    bc6c:	mul	w5, w5, w20
    bc70:	cmp	w2, w5
    bc74:	b.cs	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.hs, b.nlast
    bc78:	ldr	x24, [x19, #3152]
    bc7c:	ldr	w1, [x19, #24]
    bc80:	ldr	w17, [x24, w2, uxtw #2]
    bc84:	lsr	w6, w17, #8
    bc88:	str	w6, [x19, #60]
    bc8c:	cbnz	w1, bca4 <BZ2_bzDecompress@@Base+0x35c>
    bc90:	ldr	w1, [x19, #28]
    bc94:	cmp	w1, #0x1ff
    bc98:	csinc	w2, wzr, w1, eq  // eq = none
    bc9c:	ldr	w1, [x10, w1, sxtw #2]
    bca0:	stp	w1, w2, [x19, #24]
    bca4:	sub	w1, w1, #0x1
    bca8:	add	w25, w3, #0x1
    bcac:	cmp	w1, #0x1
    bcb0:	str	w1, [x19, #24]
    bcb4:	cset	w2, eq  // eq = none
    bcb8:	str	w25, [x19, #1092]
    bcbc:	eor	w2, w2, w17
    bcc0:	cmp	w3, w16
    bcc4:	and	w2, w2, #0xff
    bcc8:	b.eq	be50 <BZ2_bzDecompress@@Base+0x508>  // b.none
    bccc:	cmp	w18, w2
    bcd0:	b.eq	bce4 <BZ2_bzDecompress@@Base+0x39c>  // b.none
    bcd4:	str	w2, [x19, #64]
    bcd8:	ldr	w1, [x0, #32]
    bcdc:	cbnz	w1, bc3c <BZ2_bzDecompress@@Base+0x2f4>
    bce0:	b	ba48 <BZ2_bzDecompress@@Base+0x100>
    bce4:	str	w11, [x19, #16]
    bce8:	cmp	w5, w6
    bcec:	b.ls	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.plast
    bcf0:	ldr	w17, [x24, x6, lsl #2]
    bcf4:	lsr	w18, w17, #8
    bcf8:	str	w18, [x19, #60]
    bcfc:	cbnz	w1, bd14 <BZ2_bzDecompress@@Base+0x3cc>
    bd00:	ldr	w1, [x19, #28]
    bd04:	cmp	w1, #0x1ff
    bd08:	csinc	w16, wzr, w1, eq  // eq = none
    bd0c:	ldr	w1, [x12, w1, sxtw #2]
    bd10:	stp	w1, w16, [x19, #24]
    bd14:	sub	w1, w1, #0x1
    bd18:	add	w16, w3, #0x2
    bd1c:	cmp	w1, #0x1
    bd20:	str	w1, [x19, #24]
    bd24:	cset	w6, eq  // eq = none
    bd28:	str	w16, [x19, #1092]
    bd2c:	eor	w6, w6, w17
    bd30:	cmp	w23, w16
    bd34:	and	w6, w6, #0xff
    bd38:	b.eq	be50 <BZ2_bzDecompress@@Base+0x508>  // b.none
    bd3c:	cmp	w2, w6
    bd40:	b.ne	be5c <BZ2_bzDecompress@@Base+0x514>  // b.any
    bd44:	str	w13, [x19, #16]
    bd48:	cmp	w5, w18
    bd4c:	b.ls	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.plast
    bd50:	mov	w6, w18
    bd54:	ldr	w17, [x24, x6, lsl #2]
    bd58:	lsr	w18, w17, #8
    bd5c:	str	w18, [x19, #60]
    bd60:	cbnz	w1, bd78 <BZ2_bzDecompress@@Base+0x430>
    bd64:	ldr	w1, [x19, #28]
    bd68:	cmp	w1, #0x1ff
    bd6c:	csinc	w6, wzr, w1, eq  // eq = none
    bd70:	ldr	w1, [x14, w1, sxtw #2]
    bd74:	stp	w1, w6, [x19, #24]
    bd78:	sub	w1, w1, #0x1
    bd7c:	add	w16, w3, #0x3
    bd80:	cmp	w1, #0x1
    bd84:	str	w1, [x19, #24]
    bd88:	cset	w6, eq  // eq = none
    bd8c:	str	w16, [x19, #1092]
    bd90:	eor	w6, w6, w17
    bd94:	cmp	w23, w16
    bd98:	and	w6, w6, #0xff
    bd9c:	b.eq	be50 <BZ2_bzDecompress@@Base+0x508>  // b.none
    bda0:	cmp	w2, w6
    bda4:	b.ne	be5c <BZ2_bzDecompress@@Base+0x514>  // b.any
    bda8:	cmp	w5, w18
    bdac:	b.ls	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.plast
    bdb0:	mov	w2, w18
    bdb4:	ldr	w16, [x24, x2, lsl #2]
    bdb8:	lsr	w6, w16, #8
    bdbc:	str	w6, [x19, #60]
    bdc0:	cbnz	w1, bdd8 <BZ2_bzDecompress@@Base+0x490>
    bdc4:	ldr	w1, [x19, #28]
    bdc8:	cmp	w1, #0x1ff
    bdcc:	csinc	w2, wzr, w1, eq  // eq = none
    bdd0:	ldr	w1, [x15, w1, sxtw #2]
    bdd4:	stp	w1, w2, [x19, #24]
    bdd8:	sub	w1, w1, #0x1
    bddc:	add	w17, w3, #0x4
    bde0:	cmp	w1, #0x1
    bde4:	str	w1, [x19, #24]
    bde8:	cset	w2, eq  // eq = none
    bdec:	str	w17, [x19, #1092]
    bdf0:	eor	w2, w2, w16
    bdf4:	cmp	w5, w6
    bdf8:	and	w2, w2, #0xff
    bdfc:	add	w2, w2, #0x4
    be00:	str	w2, [x19, #16]
    be04:	b.ls	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.plast
    be08:	ldr	w2, [x24, x6, lsl #2]
    be0c:	and	w5, w2, #0xff
    be10:	lsr	w2, w2, #8
    be14:	stp	w2, w5, [x19, #60]
    be18:	cbnz	w1, be30 <BZ2_bzDecompress@@Base+0x4e8>
    be1c:	ldr	w1, [x19, #28]
    be20:	cmp	w1, #0x1ff
    be24:	csinc	w2, wzr, w1, eq  // eq = none
    be28:	ldr	w1, [x9, w1, sxtw #2]
    be2c:	stp	w1, w2, [x19, #24]
    be30:	sub	w2, w1, #0x1
    be34:	add	w1, w3, #0x5
    be38:	cmp	w2, #0x1
    be3c:	str	w2, [x19, #24]
    be40:	cset	w2, eq  // eq = none
    be44:	str	w1, [x19, #1092]
    be48:	eor	w1, w2, w5
    be4c:	str	w1, [x19, #64]
    be50:	ldr	w1, [x0, #32]
    be54:	cbnz	w1, bc3c <BZ2_bzDecompress@@Base+0x2f4>
    be58:	b	ba48 <BZ2_bzDecompress@@Base+0x100>
    be5c:	ldr	w1, [x0, #32]
    be60:	str	w6, [x19, #64]
    be64:	cbnz	w1, bbd0 <BZ2_bzDecompress@@Base+0x288>
    be68:	mov	w23, #0x0                   	// #0
    be6c:	mov	w0, w23
    be70:	ldp	x19, x20, [sp, #16]
    be74:	ldp	x21, x22, [sp, #32]
    be78:	ldp	x23, x24, [sp, #48]
    be7c:	ldp	x25, x26, [sp, #64]
    be80:	ldp	x29, x30, [sp], #96
    be84:	ret
    be88:	str	w8, [x19, #16]
    be8c:	cmp	w14, w1
    be90:	b.ls	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.plast
    be94:	mov	w18, #0x0                   	// #0
    be98:	mov	w10, #0x100                 	// #256
    be9c:	nop
    bea0:	add	w2, w18, w10
    bea4:	asr	w2, w2, #1
    bea8:	ldr	w17, [x5, w2, sxtw #2]
    beac:	cmp	w1, w17
    beb0:	csel	w10, w10, w2, ge  // ge = tcont
    beb4:	csel	w18, w2, w18, ge  // ge = tcont
    beb8:	sub	w2, w10, w18
    bebc:	cmp	w2, #0x1
    bec0:	b.ne	bea0 <BZ2_bzDecompress@@Base+0x558>  // b.any
    bec4:	lsr	w2, w1, #1
    bec8:	ubfiz	x17, x1, #1, #20
    becc:	ubfiz	w1, w1, #2, #1
    bed0:	add	w10, w13, #0x2
    bed4:	cmp	w16, w10
    bed8:	ldrb	w2, [x11, w2, uxtw]
    bedc:	ldrh	w17, [x3, x17]
    bee0:	str	w10, [x19, #1092]
    bee4:	lsr	w2, w2, w1
    bee8:	ubfiz	w2, w2, #16, #4
    beec:	orr	w2, w2, w17
    bef0:	str	w2, [x19, #60]
    bef4:	b.eq	bb94 <BZ2_bzDecompress@@Base+0x24c>  // b.none
    bef8:	cmp	w15, w18, uxtb
    befc:	and	w1, w18, #0xff
    bf00:	b.eq	c51c <BZ2_bzDecompress@@Base+0xbd4>  // b.none
    bf04:	str	w1, [x19, #64]
    bf08:	ldr	w1, [x0, #32]
    bf0c:	cbnz	w1, b9e0 <BZ2_bzDecompress@@Base+0x98>
    bf10:	b	be68 <BZ2_bzDecompress@@Base+0x520>
    bf14:	ldr	x27, [sp, #80]
    bf18:	mov	w23, #0xfffffffc            	// #-4
    bf1c:	ldp	x19, x20, [sp, #16]
    bf20:	ldp	x21, x22, [sp, #32]
    bf24:	ldp	x25, x26, [sp, #64]
    bf28:	mov	w0, w23
    bf2c:	ldp	x23, x24, [sp, #48]
    bf30:	ldp	x29, x30, [sp], #96
    bf34:	ret
    bf38:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    bf3c:	ldr	w2, [x19, #3176]
    bf40:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    bf44:	add	x1, x1, #0xd68
    bf48:	ldr	x0, [x0, #4016]
    bf4c:	ldr	x0, [x0]
    bf50:	bl	16e0 <fprintf@plt>
    bf54:	ldr	w0, [x19, #52]
    bf58:	b	ba7c <BZ2_bzDecompress@@Base+0x134>
    bf5c:	ldr	w13, [x19, #40]
    bf60:	mov	w5, w10
    bf64:	ldr	w17, [x4, #14928]
    bf68:	ldr	w11, [x19, #16]
    bf6c:	ldrb	w8, [x19, #12]
    bf70:	add	w14, w17, #0x1
    bf74:	ldp	w7, w15, [x19, #60]
    bf78:	mul	w13, w13, w20
    bf7c:	ldr	w12, [x19, #1092]
    bf80:	cmp	w11, #0x0
    bf84:	ldr	w6, [x19, #3184]
    bf88:	ldr	x9, [x0, #24]
    bf8c:	ldr	x16, [x19, #3152]
    bf90:	b.gt	c060 <BZ2_bzDecompress@@Base+0x718>
    bf94:	cmp	w14, w12
    bf98:	b.lt	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.tstop
    bf9c:	b.eq	c738 <BZ2_bzDecompress@@Base+0xdf0>  // b.none
    bfa0:	cmp	w13, w7
    bfa4:	and	w8, w15, #0xff
    bfa8:	b.ls	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.plast
    bfac:	ldr	w2, [x16, w7, uxtw #2]
    bfb0:	and	w1, w2, #0xff
    bfb4:	cmp	w15, w2, uxtb
    bfb8:	lsr	w7, w2, #8
    bfbc:	b.ne	c6e0 <BZ2_bzDecompress@@Base+0xd98>  // b.any
    bfc0:	cmp	w17, w12
    bfc4:	b.eq	c6d8 <BZ2_bzDecompress@@Base+0xd90>  // b.none
    bfc8:	cmp	w13, w7
    bfcc:	b.ls	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.plast
    bfd0:	mov	w2, w7
    bfd4:	add	w1, w12, #0x2
    bfd8:	cmp	w14, w1
    bfdc:	ldr	w0, [x16, x2, lsl #2]
    bfe0:	lsr	w7, w0, #8
    bfe4:	b.eq	c5a0 <BZ2_bzDecompress@@Base+0xc58>  // b.none
    bfe8:	cmp	w15, w0, uxtb
    bfec:	and	w0, w0, #0xff
    bff0:	b.ne	c59c <BZ2_bzDecompress@@Base+0xc54>  // b.any
    bff4:	cmp	w13, w7
    bff8:	b.ls	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.plast
    bffc:	mov	w2, w7
    c000:	add	w1, w12, #0x3
    c004:	cmp	w14, w1
    c008:	ldr	w0, [x16, x2, lsl #2]
    c00c:	lsr	w7, w0, #8
    c010:	b.eq	c6f8 <BZ2_bzDecompress@@Base+0xdb0>  // b.none
    c014:	cmp	w15, w0, uxtb
    c018:	and	w15, w0, #0xff
    c01c:	b.ne	c6f8 <BZ2_bzDecompress@@Base+0xdb0>  // b.any
    c020:	cmp	w13, w7
    c024:	b.ls	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.plast
    c028:	mov	w2, w7
    c02c:	ldr	w0, [x16, x2, lsl #2]
    c030:	and	w11, w0, #0xff
    c034:	cmp	w13, w0, lsr #8
    c038:	add	w11, w11, #0x4
    c03c:	lsr	w0, w0, #8
    c040:	b.ls	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.plast
    c044:	ldr	w2, [x16, x0, lsl #2]
    c048:	add	w1, w12, #0x5
    c04c:	mov	w12, w1
    c050:	and	w15, w2, #0xff
    c054:	lsr	w7, w2, #8
    c058:	cmp	w11, #0x0
    c05c:	b.le	bf94 <BZ2_bzDecompress@@Base+0x64c>
    c060:	cbz	w5, c730 <BZ2_bzDecompress@@Base+0xde8>
    c064:	cmp	w11, #0x1
    c068:	mov	w18, w8
    c06c:	b.eq	c6b0 <BZ2_bzDecompress@@Base+0xd68>  // b.none
    c070:	add	w3, w5, #0x1
    c074:	mov	w0, w5
    c078:	sub	w3, w3, w11
    c07c:	sub	w5, w11, w5
    c080:	b	c088 <BZ2_bzDecompress@@Base+0x740>
    c084:	b.eq	c6b4 <BZ2_bzDecompress@@Base+0xd6c>  // b.none
    c088:	eor	w1, w8, w6, lsr #24
    c08c:	strb	w8, [x9], #1
    c090:	sub	w0, w0, #0x1
    c094:	add	w11, w5, w0
    c098:	cmp	w0, w3
    c09c:	ldr	w2, [x22, x1, lsl #2]
    c0a0:	eor	w6, w2, w6, lsl #8
    c0a4:	cbnz	w0, c084 <BZ2_bzDecompress@@Base+0x73c>
    c0a8:	ldr	x2, [x19]
    c0ac:	ldr	w3, [x2, #36]
    c0b0:	add	w1, w3, w10
    c0b4:	sub	w1, w1, w0
    c0b8:	str	w1, [x2, #36]
    c0bc:	cmp	w3, w1
    c0c0:	b.ls	c0d0 <BZ2_bzDecompress@@Base+0x788>  // b.plast
    c0c4:	ldr	w1, [x2, #40]
    c0c8:	add	w1, w1, #0x1
    c0cc:	str	w1, [x2, #40]
    c0d0:	strb	w8, [x19, #12]
    c0d4:	str	w11, [x19, #16]
    c0d8:	stp	w7, w15, [x19, #60]
    c0dc:	str	w12, [x19, #1092]
    c0e0:	str	x16, [x19, #3152]
    c0e4:	str	w6, [x19, #3184]
    c0e8:	str	x9, [x2, #24]
    c0ec:	str	w0, [x2, #32]
    c0f0:	b	ba4c <BZ2_bzDecompress@@Base+0x104>
    c0f4:	cbz	w10, ba48 <BZ2_bzDecompress@@Base+0x100>
    c0f8:	adrp	x8, 1f000 <BZ2_bzerror@@Base+0x11650>
    c0fc:	add	x5, x19, #0x448
    c100:	ldr	x6, [x21, #4024]
    c104:	mov	w7, #0x1                   	// #1
    c108:	ldr	x8, [x8, #4048]
    c10c:	mov	w10, #0x2                   	// #2
    c110:	mov	w12, #0x3                   	// #3
    c114:	str	x27, [sp, #80]
    c118:	mov	x14, x8
    c11c:	mov	x13, x8
    c120:	mov	x11, x8
    c124:	mov	x9, x8
    c128:	ldr	w16, [x19, #16]
    c12c:	cbz	w16, c19c <BZ2_bzDecompress@@Base+0x854>
    c130:	ldr	x0, [x0, #24]
    c134:	ldrb	w1, [x19, #12]
    c138:	strb	w1, [x0]
    c13c:	ldr	w3, [x19, #3184]
    c140:	ldr	x0, [x19]
    c144:	eor	w1, w1, w3, lsr #24
    c148:	ldr	w16, [x19, #16]
    c14c:	ldr	x15, [x0, #24]
    c150:	sub	w16, w16, #0x1
    c154:	ldr	w17, [x6, x1, lsl #2]
    c158:	ldp	w1, w2, [x0, #32]
    c15c:	str	w16, [x19, #16]
    c160:	eor	w3, w17, w3, lsl #8
    c164:	str	w3, [x19, #3184]
    c168:	sub	w1, w1, #0x1
    c16c:	add	w2, w2, #0x1
    c170:	add	x15, x15, #0x1
    c174:	str	x15, [x0, #24]
    c178:	stp	w1, w2, [x0, #32]
    c17c:	cbnz	w2, c18c <BZ2_bzDecompress@@Base+0x844>
    c180:	ldr	w2, [x0, #40]
    c184:	add	w2, w2, #0x1
    c188:	str	w2, [x0, #40]
    c18c:	cbnz	w1, c128 <BZ2_bzDecompress@@Base+0x7e0>
    c190:	ldr	w12, [x19, #1092]
    c194:	ldr	x27, [sp, #80]
    c198:	b	ba4c <BZ2_bzDecompress@@Base+0x104>
    c19c:	ldr	w24, [x4, #14928]
    c1a0:	ldr	w17, [x19, #1092]
    c1a4:	add	w30, w24, #0x1
    c1a8:	cmp	w17, w30
    c1ac:	b.eq	c6d0 <BZ2_bzDecompress@@Base+0xd88>  // b.none
    c1b0:	b.gt	bf14 <BZ2_bzDecompress@@Base+0x5cc>
    c1b4:	ldr	w18, [x19, #40]
    c1b8:	ldp	w23, w25, [x19, #60]
    c1bc:	strb	w25, [x19, #12]
    c1c0:	str	w7, [x19, #16]
    c1c4:	mul	w18, w18, w20
    c1c8:	cmp	w23, w18
    c1cc:	b.cs	bf14 <BZ2_bzDecompress@@Base+0x5cc>  // b.hs, b.nlast
    c1d0:	mov	w2, #0x0                   	// #0
    c1d4:	mov	w3, #0x100                 	// #256
    c1d8:	add	w1, w3, w2
    c1dc:	asr	w1, w1, #1
    c1e0:	ldr	w15, [x5, w1, sxtw #2]
    c1e4:	cmp	w23, w15
    c1e8:	csel	w3, w3, w1, ge  // ge = tcont
    c1ec:	csel	w2, w1, w2, ge  // ge = tcont
    c1f0:	sub	w1, w3, w2
    c1f4:	cmp	w1, #0x1
    c1f8:	b.ne	c1d8 <BZ2_bzDecompress@@Base+0x890>  // b.any
    c1fc:	ldr	x26, [x19, #3168]
    c200:	lsr	w1, w23, #1
    c204:	ldr	x15, [x19, #3160]
    c208:	ubfiz	w27, w23, #2, #1
    c20c:	ldrb	w1, [x26, w1, uxtw]
    c210:	ldr	w3, [x19, #24]
    c214:	ldrh	w23, [x15, w23, uxtw #1]
    c218:	lsr	w1, w1, w27
    c21c:	ubfiz	w1, w1, #16, #4
    c220:	orr	w1, w1, w23
    c224:	str	w1, [x19, #60]
    c228:	cbnz	w3, c240 <BZ2_bzDecompress@@Base+0x8f8>
    c22c:	ldr	w3, [x19, #28]
    c230:	cmp	w3, #0x1ff
    c234:	csinc	w23, wzr, w3, eq  // eq = none
    c238:	ldr	w3, [x9, w3, sxtw #2]
    c23c:	stp	w3, w23, [x19, #24]
    c240:	sub	w23, w3, #0x1
    c244:	add	w27, w17, #0x1
    c248:	cmp	w23, #0x1
    c24c:	str	w23, [x19, #24]
    c250:	cset	w3, eq  // eq = none
    c254:	str	w27, [x19, #1092]
    c258:	eor	w2, w3, w2
    c25c:	cmp	w17, w24
    c260:	and	w2, w2, #0xff
    c264:	b.eq	c458 <BZ2_bzDecompress@@Base+0xb10>  // b.none
    c268:	cmp	w25, w2
    c26c:	b.eq	c464 <BZ2_bzDecompress@@Base+0xb1c>  // b.none
    c270:	str	w2, [x19, #64]
    c274:	ldr	w1, [x0, #32]
    c278:	cbnz	w1, c128 <BZ2_bzDecompress@@Base+0x7e0>
    c27c:	b	c190 <BZ2_bzDecompress@@Base+0x848>
    c280:	str	w12, [x19, #16]
    c284:	cmp	w18, w1
    c288:	b.ls	bf14 <BZ2_bzDecompress@@Base+0x5cc>  // b.plast
    c28c:	mov	w25, #0x0                   	// #0
    c290:	mov	w27, #0x100                 	// #256
    c294:	nop
    c298:	add	w24, w25, w27
    c29c:	asr	w24, w24, #1
    c2a0:	ldr	w23, [x5, w24, sxtw #2]
    c2a4:	cmp	w1, w23
    c2a8:	csel	w27, w27, w24, ge  // ge = tcont
    c2ac:	csel	w25, w24, w25, ge  // ge = tcont
    c2b0:	sub	w23, w27, w25
    c2b4:	cmp	w23, #0x1
    c2b8:	b.ne	c298 <BZ2_bzDecompress@@Base+0x950>  // b.any
    c2bc:	lsr	w23, w1, #1
    c2c0:	ubfiz	x24, x1, #1, #20
    c2c4:	ubfiz	w1, w1, #2, #1
    c2c8:	ldrb	w23, [x26, w23, uxtw]
    c2cc:	ldrh	w24, [x15, x24]
    c2d0:	lsr	w1, w23, w1
    c2d4:	ubfiz	w1, w1, #16, #4
    c2d8:	orr	w24, w1, w24
    c2dc:	str	w24, [x19, #60]
    c2e0:	cbnz	w3, c2f8 <BZ2_bzDecompress@@Base+0x9b0>
    c2e4:	ldr	w1, [x19, #28]
    c2e8:	cmp	w1, #0x1ff
    c2ec:	csinc	w23, wzr, w1, eq  // eq = none
    c2f0:	ldr	w3, [x13, w1, sxtw #2]
    c2f4:	stp	w3, w23, [x19, #24]
    c2f8:	sub	w3, w3, #0x1
    c2fc:	add	w23, w17, #0x3
    c300:	cmp	w3, #0x1
    c304:	str	w3, [x19, #24]
    c308:	cset	w1, eq  // eq = none
    c30c:	str	w23, [x19, #1092]
    c310:	eor	w1, w1, w25
    c314:	cmp	w30, w23
    c318:	and	w1, w1, #0xff
    c31c:	b.eq	c458 <BZ2_bzDecompress@@Base+0xb10>  // b.none
    c320:	cmp	w2, w1
    c324:	b.ne	c5ac <BZ2_bzDecompress@@Base+0xc64>  // b.any
    c328:	cmp	w18, w24
    c32c:	b.ls	bf14 <BZ2_bzDecompress@@Base+0x5cc>  // b.plast
    c330:	mov	w23, #0x0                   	// #0
    c334:	mov	w2, #0x100                 	// #256
    c338:	add	w1, w23, w2
    c33c:	asr	w1, w1, #1
    c340:	ldr	w25, [x5, w1, sxtw #2]
    c344:	cmp	w24, w25
    c348:	csel	w2, w2, w1, ge  // ge = tcont
    c34c:	csel	w23, w1, w23, ge  // ge = tcont
    c350:	sub	w1, w2, w23
    c354:	cmp	w1, #0x1
    c358:	b.ne	c338 <BZ2_bzDecompress@@Base+0x9f0>  // b.any
    c35c:	lsr	w25, w24, #1
    c360:	ubfiz	x2, x24, #1, #20
    c364:	ubfiz	w1, w24, #2, #1
    c368:	ldrb	w24, [x26, w25, uxtw]
    c36c:	ldrh	w2, [x15, x2]
    c370:	lsr	w24, w24, w1
    c374:	ubfiz	w24, w24, #16, #4
    c378:	orr	w24, w24, w2
    c37c:	str	w24, [x19, #60]
    c380:	cbnz	w3, c398 <BZ2_bzDecompress@@Base+0xa50>
    c384:	ldr	w1, [x19, #28]
    c388:	cmp	w1, #0x1ff
    c38c:	csinc	w2, wzr, w1, eq  // eq = none
    c390:	ldr	w3, [x14, w1, sxtw #2]
    c394:	stp	w3, w2, [x19, #24]
    c398:	sub	w3, w3, #0x1
    c39c:	add	w2, w17, #0x4
    c3a0:	cmp	w3, #0x1
    c3a4:	str	w3, [x19, #24]
    c3a8:	cset	w1, eq  // eq = none
    c3ac:	str	w2, [x19, #1092]
    c3b0:	eor	w1, w1, w23
    c3b4:	cmp	w18, w24
    c3b8:	and	w1, w1, #0xff
    c3bc:	add	w1, w1, #0x4
    c3c0:	str	w1, [x19, #16]
    c3c4:	b.ls	bf14 <BZ2_bzDecompress@@Base+0x5cc>  // b.plast
    c3c8:	mov	w2, #0x100                 	// #256
    c3cc:	nop
    c3d0:	add	w1, w16, w2
    c3d4:	asr	w1, w1, #1
    c3d8:	ldr	w18, [x5, w1, sxtw #2]
    c3dc:	cmp	w24, w18
    c3e0:	csel	w2, w2, w1, ge  // ge = tcont
    c3e4:	csel	w16, w1, w16, ge  // ge = tcont
    c3e8:	sub	w1, w2, w16
    c3ec:	cmp	w1, #0x1
    c3f0:	b.ne	c3d0 <BZ2_bzDecompress@@Base+0xa88>  // b.any
    c3f4:	ubfiz	x2, x24, #1, #20
    c3f8:	lsr	w1, w24, #1
    c3fc:	ubfiz	w24, w24, #2, #1
    c400:	ldrh	w2, [x15, x2]
    c404:	str	w16, [x19, #64]
    c408:	ldrb	w1, [x26, w1, uxtw]
    c40c:	lsr	w1, w1, w24
    c410:	ubfiz	w1, w1, #16, #4
    c414:	orr	w1, w1, w2
    c418:	str	w1, [x19, #60]
    c41c:	cbnz	w3, c434 <BZ2_bzDecompress@@Base+0xaec>
    c420:	ldr	w1, [x19, #28]
    c424:	cmp	w1, #0x1ff
    c428:	csinc	w2, wzr, w1, eq  // eq = none
    c42c:	ldr	w3, [x8, w1, sxtw #2]
    c430:	stp	w3, w2, [x19, #24]
    c434:	sub	w3, w3, #0x1
    c438:	add	w17, w17, #0x5
    c43c:	cmp	w3, #0x1
    c440:	str	w3, [x19, #24]
    c444:	cset	w1, eq  // eq = none
    c448:	str	w17, [x19, #1092]
    c44c:	eor	w16, w1, w16
    c450:	str	w16, [x19, #64]
    c454:	nop
    c458:	ldr	w1, [x0, #32]
    c45c:	cbnz	w1, c128 <BZ2_bzDecompress@@Base+0x7e0>
    c460:	b	c190 <BZ2_bzDecompress@@Base+0x848>
    c464:	str	w10, [x19, #16]
    c468:	cmp	w18, w1
    c46c:	b.ls	bf14 <BZ2_bzDecompress@@Base+0x5cc>  // b.plast
    c470:	mov	w25, #0x0                   	// #0
    c474:	mov	w27, #0x100                 	// #256
    c478:	add	w3, w25, w27
    c47c:	asr	w3, w3, #1
    c480:	ldr	w24, [x5, w3, sxtw #2]
    c484:	cmp	w1, w24
    c488:	csel	w27, w27, w3, ge  // ge = tcont
    c48c:	csel	w25, w3, w25, ge  // ge = tcont
    c490:	sub	w3, w27, w25
    c494:	cmp	w3, #0x1
    c498:	b.ne	c478 <BZ2_bzDecompress@@Base+0xb30>  // b.any
    c49c:	lsr	w3, w1, #1
    c4a0:	ubfiz	x24, x1, #1, #20
    c4a4:	ubfiz	w1, w1, #2, #1
    c4a8:	ldrb	w3, [x26, w3, uxtw]
    c4ac:	ldrh	w24, [x15, x24]
    c4b0:	lsr	w1, w3, w1
    c4b4:	ubfiz	w1, w1, #16, #4
    c4b8:	orr	w1, w1, w24
    c4bc:	str	w1, [x19, #60]
    c4c0:	cbnz	w23, c4d8 <BZ2_bzDecompress@@Base+0xb90>
    c4c4:	ldr	w3, [x19, #28]
    c4c8:	cmp	w3, #0x1ff
    c4cc:	csinc	w24, wzr, w3, eq  // eq = none
    c4d0:	ldr	w23, [x11, w3, sxtw #2]
    c4d4:	stp	w23, w24, [x19, #24]
    c4d8:	sub	w3, w23, #0x1
    c4dc:	add	w24, w17, #0x2
    c4e0:	cmp	w3, #0x1
    c4e4:	str	w3, [x19, #24]
    c4e8:	cset	w23, eq  // eq = none
    c4ec:	str	w24, [x19, #1092]
    c4f0:	eor	w25, w23, w25
    c4f4:	cmp	w30, w24
    c4f8:	and	w25, w25, #0xff
    c4fc:	b.eq	c458 <BZ2_bzDecompress@@Base+0xb10>  // b.none
    c500:	cmp	w2, w25
    c504:	b.eq	c280 <BZ2_bzDecompress@@Base+0x938>  // b.none
    c508:	str	w25, [x19, #64]
    c50c:	ldr	w1, [x0, #32]
    c510:	cbnz	w1, c128 <BZ2_bzDecompress@@Base+0x7e0>
    c514:	ldr	x27, [sp, #80]
    c518:	b	be68 <BZ2_bzDecompress@@Base+0x520>
    c51c:	str	w9, [x19, #16]
    c520:	cmp	w14, w2
    c524:	b.ls	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.plast
    c528:	mov	w10, #0x0                   	// #0
    c52c:	mov	w17, #0x100                 	// #256
    c530:	add	w1, w10, w17
    c534:	asr	w1, w1, #1
    c538:	ldr	w18, [x5, w1, sxtw #2]
    c53c:	cmp	w2, w18
    c540:	csel	w17, w17, w1, ge  // ge = tcont
    c544:	csel	w10, w1, w10, ge  // ge = tcont
    c548:	sub	w1, w17, w10
    c54c:	cmp	w1, #0x1
    c550:	b.ne	c530 <BZ2_bzDecompress@@Base+0xbe8>  // b.any
    c554:	lsr	w1, w2, #1
    c558:	ubfiz	x18, x2, #1, #20
    c55c:	ubfiz	w2, w2, #2, #1
    c560:	add	w17, w13, #0x3
    c564:	cmp	w16, w17
    c568:	ldrb	w1, [x11, w1, uxtw]
    c56c:	ldrh	w16, [x3, x18]
    c570:	str	w17, [x19, #1092]
    c574:	lsr	w1, w1, w2
    c578:	ubfiz	w1, w1, #16, #4
    c57c:	orr	w1, w1, w16
    c580:	str	w1, [x19, #60]
    c584:	b.eq	bb94 <BZ2_bzDecompress@@Base+0x24c>  // b.none
    c588:	cmp	w15, w10, uxtb
    c58c:	and	w10, w10, #0xff
    c590:	b.eq	c5b4 <BZ2_bzDecompress@@Base+0xc6c>  // b.none
    c594:	str	w10, [x19, #64]
    c598:	b	bf08 <BZ2_bzDecompress@@Base+0x5c0>
    c59c:	mov	w15, w0
    c5a0:	mov	w12, w1
    c5a4:	mov	w11, #0x2                   	// #2
    c5a8:	b	c058 <BZ2_bzDecompress@@Base+0x710>
    c5ac:	str	w1, [x19, #64]
    c5b0:	b	c50c <BZ2_bzDecompress@@Base+0xbc4>
    c5b4:	cmp	w14, w1
    c5b8:	b.ls	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.plast
    c5bc:	mov	w10, #0x0                   	// #0
    c5c0:	mov	w15, #0x100                 	// #256
    c5c4:	nop
    c5c8:	add	w2, w10, w15
    c5cc:	asr	w2, w2, #1
    c5d0:	ldr	w16, [x5, w2, sxtw #2]
    c5d4:	cmp	w1, w16
    c5d8:	csel	w15, w15, w2, ge  // ge = tcont
    c5dc:	csel	w10, w2, w10, ge  // ge = tcont
    c5e0:	sub	w2, w15, w10
    c5e4:	cmp	w2, #0x1
    c5e8:	b.ne	c5c8 <BZ2_bzDecompress@@Base+0xc80>  // b.any
    c5ec:	lsr	w17, w1, #1
    c5f0:	ubfiz	x16, x1, #1, #20
    c5f4:	and	w2, w10, #0xff
    c5f8:	ubfiz	w1, w1, #2, #1
    c5fc:	add	w2, w2, #0x4
    c600:	add	w15, w13, #0x4
    c604:	ldrb	w10, [x11, w17, uxtw]
    c608:	ldrh	w16, [x3, x16]
    c60c:	str	w2, [x19, #16]
    c610:	lsr	w1, w10, w1
    c614:	str	w15, [x19, #1092]
    c618:	ubfiz	w10, w1, #16, #4
    c61c:	orr	w10, w10, w16
    c620:	str	w10, [x19, #60]
    c624:	cmp	w14, w10
    c628:	b.ls	bf18 <BZ2_bzDecompress@@Base+0x5d0>  // b.plast
    c62c:	mov	w2, #0x100                 	// #256
    c630:	add	w1, w12, w2
    c634:	asr	w1, w1, #1
    c638:	ldr	w14, [x5, w1, sxtw #2]
    c63c:	cmp	w10, w14
    c640:	csel	w2, w2, w1, ge  // ge = tcont
    c644:	csel	w12, w1, w12, ge  // ge = tcont
    c648:	sub	w1, w2, w12
    c64c:	cmp	w1, #0x1
    c650:	b.ne	c630 <BZ2_bzDecompress@@Base+0xce8>  // b.any
    c654:	lsr	w2, w10, #1
    c658:	ldr	w1, [x0, #32]
    c65c:	str	w12, [x19, #64]
    c660:	ubfiz	x12, x10, #1, #20
    c664:	ubfiz	w10, w10, #2, #1
    c668:	add	w13, w13, #0x5
    c66c:	ldrb	w2, [x11, w2, uxtw]
    c670:	ldrh	w3, [x3, x12]
    c674:	str	w13, [x19, #1092]
    c678:	lsr	w2, w2, w10
    c67c:	ubfiz	w2, w2, #16, #4
    c680:	orr	w2, w2, w3
    c684:	str	w2, [x19, #60]
    c688:	cbnz	w1, b9e0 <BZ2_bzDecompress@@Base+0x98>
    c68c:	b	ba48 <BZ2_bzDecompress@@Base+0x100>
    c690:	mov	w23, #0xffffffff            	// #-1
    c694:	mov	w0, w23
    c698:	ldp	x19, x20, [sp, #16]
    c69c:	ldp	x21, x22, [sp, #32]
    c6a0:	ldp	x23, x24, [sp, #48]
    c6a4:	ldp	x25, x26, [sp, #64]
    c6a8:	ldp	x29, x30, [sp], #96
    c6ac:	ret
    c6b0:	mov	w0, w5
    c6b4:	ldr	x1, [x21, #4024]
    c6b8:	eor	w18, w18, w6, lsr #24
    c6bc:	strb	w8, [x9], #1
    c6c0:	sub	w5, w0, #0x1
    c6c4:	ldr	w0, [x1, x18, lsl #2]
    c6c8:	eor	w6, w0, w6, lsl #8
    c6cc:	b	bf94 <BZ2_bzDecompress@@Base+0x64c>
    c6d0:	ldr	x27, [sp, #80]
    c6d4:	b	ba64 <BZ2_bzDecompress@@Base+0x11c>
    c6d8:	mov	w1, w15
    c6dc:	nop
    c6e0:	add	w12, w12, #0x1
    c6e4:	cbnz	w5, c770 <BZ2_bzDecompress@@Base+0xe28>
    c6e8:	mov	w15, w1
    c6ec:	mov	w0, #0x0                   	// #0
    c6f0:	mov	w11, #0x1                   	// #1
    c6f4:	b	c0a8 <BZ2_bzDecompress@@Base+0x760>
    c6f8:	mov	w12, w1
    c6fc:	mov	w11, #0x3                   	// #3
    c700:	b	c058 <BZ2_bzDecompress@@Base+0x710>
    c704:	ldr	w0, [x19, #52]
    c708:	ldr	w2, [x19, #3180]
    c70c:	ldr	w3, [x19, #3188]
    c710:	cmp	w0, #0x2
    c714:	b.gt	c74c <BZ2_bzDecompress@@Base+0xe04>
    c718:	cmp	w3, w2
    c71c:	b.eq	badc <BZ2_bzDecompress@@Base+0x194>  // b.none
    c720:	b	bf18 <BZ2_bzDecompress@@Base+0x5d0>
    c724:	mov	w23, #0xfffffffe            	// #-2
    c728:	ldp	x19, x20, [sp, #16]
    c72c:	b	bf28 <BZ2_bzDecompress@@Base+0x5e0>
    c730:	mov	w0, #0x0                   	// #0
    c734:	b	c0a8 <BZ2_bzDecompress@@Base+0x760>
    c738:	mov	w0, w5
    c73c:	mov	w11, #0x0                   	// #0
    c740:	b	c0a8 <BZ2_bzDecompress@@Base+0x760>
    c744:	mov	w23, #0xfffffffe            	// #-2
    c748:	b	bf28 <BZ2_bzDecompress@@Base+0x5e0>
    c74c:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    c750:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    c754:	add	x1, x1, #0xd80
    c758:	ldr	x0, [x0, #4016]
    c75c:	ldr	x0, [x0]
    c760:	bl	16e0 <fprintf@plt>
    c764:	ldr	w2, [x19, #3180]
    c768:	ldr	w3, [x19, #3188]
    c76c:	b	c718 <BZ2_bzDecompress@@Base+0xdd0>
    c770:	and	w18, w15, #0xff
    c774:	mov	w0, w5
    c778:	mov	w15, w1
    c77c:	b	c6b4 <BZ2_bzDecompress@@Base+0xd6c>

000000000000c780 <BZ2_bzDecompressEnd@@Base>:
    c780:	cbz	x0, c800 <BZ2_bzDecompressEnd@@Base+0x80>
    c784:	stp	x29, x30, [sp, #-32]!
    c788:	mov	x29, sp
    c78c:	stp	x19, x20, [sp, #16]
    c790:	mov	x19, x0
    c794:	ldr	x20, [x0, #48]
    c798:	cbz	x20, c7f8 <BZ2_bzDecompressEnd@@Base+0x78>
    c79c:	ldr	x0, [x20]
    c7a0:	cmp	x0, x19
    c7a4:	b.ne	c7f8 <BZ2_bzDecompressEnd@@Base+0x78>  // b.any
    c7a8:	ldr	x1, [x20, #3152]
    c7ac:	ldp	x2, x0, [x19, #64]
    c7b0:	cbz	x1, c7bc <BZ2_bzDecompressEnd@@Base+0x3c>
    c7b4:	blr	x2
    c7b8:	ldp	x2, x0, [x19, #64]
    c7bc:	ldr	x1, [x20, #3160]
    c7c0:	cbz	x1, c7cc <BZ2_bzDecompressEnd@@Base+0x4c>
    c7c4:	blr	x2
    c7c8:	ldp	x2, x0, [x19, #64]
    c7cc:	ldr	x1, [x20, #3168]
    c7d0:	cbz	x1, c7dc <BZ2_bzDecompressEnd@@Base+0x5c>
    c7d4:	blr	x2
    c7d8:	ldp	x2, x0, [x19, #64]
    c7dc:	ldr	x1, [x19, #48]
    c7e0:	blr	x2
    c7e4:	str	xzr, [x19, #48]
    c7e8:	mov	w0, #0x0                   	// #0
    c7ec:	ldp	x19, x20, [sp, #16]
    c7f0:	ldp	x29, x30, [sp], #32
    c7f4:	ret
    c7f8:	mov	w0, #0xfffffffe            	// #-2
    c7fc:	b	c7ec <BZ2_bzDecompressEnd@@Base+0x6c>
    c800:	mov	w0, #0xfffffffe            	// #-2
    c804:	ret

000000000000c808 <BZ2_bzWriteOpen@@Base>:
    c808:	stp	x29, x30, [sp, #-80]!
    c80c:	mov	x29, sp
    c810:	stp	x19, x20, [sp, #16]
    c814:	mov	x20, x0
    c818:	stp	x21, x22, [sp, #32]
    c81c:	mov	x21, x1
    c820:	mov	w22, w4
    c824:	stp	x23, x24, [sp, #48]
    c828:	mov	w23, w2
    c82c:	mov	w24, w3
    c830:	cbz	x0, c910 <BZ2_bzWriteOpen@@Base+0x108>
    c834:	str	wzr, [x0]
    c838:	cbz	x1, c8ec <BZ2_bzWriteOpen@@Base+0xe4>
    c83c:	sub	w0, w2, #0x1
    c840:	cmp	w0, #0x8
    c844:	b.hi	c8ec <BZ2_bzWriteOpen@@Base+0xe4>  // b.pmore
    c848:	cmp	w4, #0xfa
    c84c:	ccmp	w3, #0x4, #0x2, ls  // ls = plast
    c850:	b.hi	c8ec <BZ2_bzWriteOpen@@Base+0xe4>  // b.pmore
    c854:	mov	x0, x1
    c858:	bl	16f0 <ferror@plt>
    c85c:	cbnz	w0, c954 <BZ2_bzWriteOpen@@Base+0x14c>
    c860:	mov	x0, #0x13f0                	// #5104
    c864:	bl	14e0 <malloc@plt>
    c868:	mov	x19, x0
    c86c:	cbz	x0, c994 <BZ2_bzWriteOpen@@Base+0x18c>
    c870:	stp	x25, x26, [sp, #64]
    c874:	cbz	x20, c87c <BZ2_bzWriteOpen@@Base+0x74>
    c878:	str	wzr, [x20]
    c87c:	add	x25, x19, #0x1, lsl #12
    c880:	str	wzr, [x19, #5096]
    c884:	cmp	w22, #0x0
    c888:	mov	w26, #0x1                   	// #1
    c88c:	mov	w3, #0x1e                  	// #30
    c890:	mov	x0, #0x1398                	// #5016
    c894:	strb	wzr, [x25, #1004]
    c898:	mov	w2, w24
    c89c:	str	x21, [x19]
    c8a0:	mov	w1, w23
    c8a4:	str	wzr, [x19, #5008]
    c8a8:	csel	w3, w22, w3, ne  // ne = any
    c8ac:	strb	w26, [x25, #916]
    c8b0:	add	x0, x19, x0
    c8b4:	str	xzr, [x19, #5072]
    c8b8:	str	xzr, [x19, #5080]
    c8bc:	str	xzr, [x19, #5088]
    c8c0:	bl	1550 <BZ2_bzCompressInit@plt>
    c8c4:	cbnz	w0, c978 <BZ2_bzWriteOpen@@Base+0x170>
    c8c8:	str	wzr, [x19, #5024]
    c8cc:	strb	w26, [x25, #1004]
    c8d0:	ldp	x25, x26, [sp, #64]
    c8d4:	mov	x0, x19
    c8d8:	ldp	x19, x20, [sp, #16]
    c8dc:	ldp	x21, x22, [sp, #32]
    c8e0:	ldp	x23, x24, [sp, #48]
    c8e4:	ldp	x29, x30, [sp], #80
    c8e8:	ret
    c8ec:	mov	w0, #0xfffffffe            	// #-2
    c8f0:	str	w0, [x20]
    c8f4:	mov	x19, #0x0                   	// #0
    c8f8:	mov	x0, x19
    c8fc:	ldp	x19, x20, [sp, #16]
    c900:	ldp	x21, x22, [sp, #32]
    c904:	ldp	x23, x24, [sp, #48]
    c908:	ldp	x29, x30, [sp], #80
    c90c:	ret
    c910:	cbz	x1, c938 <BZ2_bzWriteOpen@@Base+0x130>
    c914:	sub	w0, w2, #0x1
    c918:	cmp	w0, #0x8
    c91c:	b.hi	c938 <BZ2_bzWriteOpen@@Base+0x130>  // b.pmore
    c920:	cmp	w4, #0xfa
    c924:	ccmp	w3, #0x4, #0x2, ls  // ls = plast
    c928:	b.hi	c938 <BZ2_bzWriteOpen@@Base+0x130>  // b.pmore
    c92c:	mov	x0, x1
    c930:	bl	16f0 <ferror@plt>
    c934:	cbz	w0, c860 <BZ2_bzWriteOpen@@Base+0x58>
    c938:	mov	x19, #0x0                   	// #0
    c93c:	mov	x0, x19
    c940:	ldp	x19, x20, [sp, #16]
    c944:	ldp	x21, x22, [sp, #32]
    c948:	ldp	x23, x24, [sp, #48]
    c94c:	ldp	x29, x30, [sp], #80
    c950:	ret
    c954:	mov	w0, #0xfffffffa            	// #-6
    c958:	str	w0, [x20]
    c95c:	mov	x19, #0x0                   	// #0
    c960:	mov	x0, x19
    c964:	ldp	x19, x20, [sp, #16]
    c968:	ldp	x21, x22, [sp, #32]
    c96c:	ldp	x23, x24, [sp, #48]
    c970:	ldp	x29, x30, [sp], #80
    c974:	ret
    c978:	cbz	x20, c980 <BZ2_bzWriteOpen@@Base+0x178>
    c97c:	str	w0, [x20]
    c980:	mov	x0, x19
    c984:	mov	x19, #0x0                   	// #0
    c988:	bl	1610 <free@plt>
    c98c:	ldp	x25, x26, [sp, #64]
    c990:	b	c8d4 <BZ2_bzWriteOpen@@Base+0xcc>
    c994:	cbz	x20, c938 <BZ2_bzWriteOpen@@Base+0x130>
    c998:	mov	w0, #0xfffffffd            	// #-3
    c99c:	str	w0, [x20]
    c9a0:	b	c8d4 <BZ2_bzWriteOpen@@Base+0xcc>
    c9a4:	nop

000000000000c9a8 <BZ2_bzWrite@@Base>:
    c9a8:	stp	x29, x30, [sp, #-80]!
    c9ac:	mov	x29, sp
    c9b0:	stp	x19, x20, [sp, #16]
    c9b4:	mov	x20, x0
    c9b8:	mov	x19, x1
    c9bc:	stp	x21, x22, [sp, #32]
    c9c0:	mov	x22, x2
    c9c4:	mov	w21, w3
    c9c8:	cbz	x0, ca10 <BZ2_bzWrite@@Base+0x68>
    c9cc:	str	wzr, [x0]
    c9d0:	cbz	x1, cadc <BZ2_bzWrite@@Base+0x134>
    c9d4:	str	wzr, [x1, #5096]
    c9d8:	cbz	x2, cb10 <BZ2_bzWrite@@Base+0x168>
    c9dc:	tbnz	w21, #31, cb0c <BZ2_bzWrite@@Base+0x164>
    c9e0:	add	x0, x19, #0x1, lsl #12
    c9e4:	ldrb	w0, [x0, #916]
    c9e8:	cbnz	w0, ca38 <BZ2_bzWrite@@Base+0x90>
    c9ec:	cbz	x20, c9f8 <BZ2_bzWrite@@Base+0x50>
    c9f0:	mov	w0, #0xffffffff            	// #-1
    c9f4:	str	w0, [x20]
    c9f8:	mov	w0, #0xffffffff            	// #-1
    c9fc:	str	w0, [x19, #5096]
    ca00:	ldp	x19, x20, [sp, #16]
    ca04:	ldp	x21, x22, [sp, #32]
    ca08:	ldp	x29, x30, [sp], #80
    ca0c:	ret
    ca10:	cbz	x1, ca00 <BZ2_bzWrite@@Base+0x58>
    ca14:	str	wzr, [x1, #5096]
    ca18:	cbnz	x2, c9dc <BZ2_bzWrite@@Base+0x34>
    ca1c:	nop
    ca20:	mov	w0, #0xfffffffe            	// #-2
    ca24:	str	w0, [x19, #5096]
    ca28:	ldp	x19, x20, [sp, #16]
    ca2c:	ldp	x21, x22, [sp, #32]
    ca30:	ldp	x29, x30, [sp], #80
    ca34:	ret
    ca38:	ldr	x0, [x19]
    ca3c:	bl	16f0 <ferror@plt>
    ca40:	cbnz	w0, cae8 <BZ2_bzWrite@@Base+0x140>
    ca44:	cbz	w21, cb24 <BZ2_bzWrite@@Base+0x17c>
    ca48:	stp	x23, x24, [sp, #48]
    ca4c:	mov	x0, #0x1398                	// #5016
    ca50:	add	x24, x19, #0x8
    ca54:	stp	x25, x26, [sp, #64]
    ca58:	mov	w23, #0x1388                	// #5000
    ca5c:	add	x25, x19, x0
    ca60:	mov	w26, #0x1387                	// #4999
    ca64:	str	x22, [x19, #5016]
    ca68:	str	w21, [x19, #5024]
    ca6c:	b	ca78 <BZ2_bzWrite@@Base+0xd0>
    ca70:	ldr	w0, [x19, #5024]
    ca74:	cbz	w0, cb4c <BZ2_bzWrite@@Base+0x1a4>
    ca78:	str	x24, [x19, #5040]
    ca7c:	mov	x0, x25
    ca80:	str	w23, [x19, #5048]
    ca84:	mov	w1, #0x0                   	// #0
    ca88:	bl	15b0 <BZ2_bzCompress@plt>
    ca8c:	cmp	w0, #0x1
    ca90:	b.ne	cb34 <BZ2_bzWrite@@Base+0x18c>  // b.any
    ca94:	ldr	w2, [x19, #5048]
    ca98:	cmp	w2, w26
    ca9c:	b.hi	ca70 <BZ2_bzWrite@@Base+0xc8>  // b.pmore
    caa0:	ldr	x3, [x19]
    caa4:	sub	w21, w23, w2
    caa8:	mov	x0, x24
    caac:	sub	w2, w23, w2
    cab0:	mov	x1, #0x1                   	// #1
    cab4:	bl	1680 <fwrite@plt>
    cab8:	cmp	w21, w0
    cabc:	b.ne	cacc <BZ2_bzWrite@@Base+0x124>  // b.any
    cac0:	ldr	x0, [x19]
    cac4:	bl	16f0 <ferror@plt>
    cac8:	cbz	w0, ca70 <BZ2_bzWrite@@Base+0xc8>
    cacc:	ldp	x23, x24, [sp, #48]
    cad0:	ldp	x25, x26, [sp, #64]
    cad4:	cbnz	x20, caec <BZ2_bzWrite@@Base+0x144>
    cad8:	b	caf4 <BZ2_bzWrite@@Base+0x14c>
    cadc:	mov	w0, #0xfffffffe            	// #-2
    cae0:	str	w0, [x20]
    cae4:	b	ca00 <BZ2_bzWrite@@Base+0x58>
    cae8:	cbz	x20, caf4 <BZ2_bzWrite@@Base+0x14c>
    caec:	mov	w0, #0xfffffffa            	// #-6
    caf0:	str	w0, [x20]
    caf4:	mov	w0, #0xfffffffa            	// #-6
    caf8:	str	w0, [x19, #5096]
    cafc:	ldp	x19, x20, [sp, #16]
    cb00:	ldp	x21, x22, [sp, #32]
    cb04:	ldp	x29, x30, [sp], #80
    cb08:	ret
    cb0c:	cbz	x20, ca20 <BZ2_bzWrite@@Base+0x78>
    cb10:	mov	w0, #0xfffffffe            	// #-2
    cb14:	str	w0, [x20]
    cb18:	mov	w0, #0xfffffffe            	// #-2
    cb1c:	str	w0, [x19, #5096]
    cb20:	b	ca28 <BZ2_bzWrite@@Base+0x80>
    cb24:	cbz	x20, cb2c <BZ2_bzWrite@@Base+0x184>
    cb28:	str	wzr, [x20]
    cb2c:	str	wzr, [x19, #5096]
    cb30:	b	ca00 <BZ2_bzWrite@@Base+0x58>
    cb34:	cbz	x20, cb3c <BZ2_bzWrite@@Base+0x194>
    cb38:	str	w0, [x20]
    cb3c:	ldp	x23, x24, [sp, #48]
    cb40:	ldp	x25, x26, [sp, #64]
    cb44:	str	w0, [x19, #5096]
    cb48:	b	ca00 <BZ2_bzWrite@@Base+0x58>
    cb4c:	ldp	x23, x24, [sp, #48]
    cb50:	ldp	x25, x26, [sp, #64]
    cb54:	cbz	x20, cb2c <BZ2_bzWrite@@Base+0x184>
    cb58:	str	wzr, [x20]
    cb5c:	b	cb2c <BZ2_bzWrite@@Base+0x184>

000000000000cb60 <BZ2_bzWriteClose64@@Base>:
    cb60:	stp	x29, x30, [sp, #-112]!
    cb64:	mov	x29, sp
    cb68:	stp	x19, x20, [sp, #16]
    cb6c:	mov	x20, x0
    cb70:	cbz	x1, cd04 <BZ2_bzWriteClose64@@Base+0x1a4>
    cb74:	add	x0, x1, #0x1, lsl #12
    cb78:	mov	x19, x1
    cb7c:	ldrb	w0, [x0, #916]
    cb80:	cbnz	w0, cba4 <BZ2_bzWriteClose64@@Base+0x44>
    cb84:	cbz	x20, cb90 <BZ2_bzWriteClose64@@Base+0x30>
    cb88:	mov	w0, #0xffffffff            	// #-1
    cb8c:	str	w0, [x20]
    cb90:	mov	w0, #0xffffffff            	// #-1
    cb94:	str	w0, [x19, #5096]
    cb98:	ldp	x19, x20, [sp, #16]
    cb9c:	ldp	x29, x30, [sp], #112
    cba0:	ret
    cba4:	ldr	x0, [x1]
    cba8:	stp	x21, x22, [sp, #32]
    cbac:	mov	x21, x3
    cbb0:	mov	x22, x4
    cbb4:	stp	x23, x24, [sp, #48]
    cbb8:	mov	x23, x5
    cbbc:	mov	x24, x6
    cbc0:	stp	x25, x26, [sp, #64]
    cbc4:	mov	w25, w2
    cbc8:	bl	16f0 <ferror@plt>
    cbcc:	cbnz	w0, cd30 <BZ2_bzWriteClose64@@Base+0x1d0>
    cbd0:	cbz	x21, cbd8 <BZ2_bzWriteClose64@@Base+0x78>
    cbd4:	str	wzr, [x21]
    cbd8:	cbz	x22, cbe0 <BZ2_bzWriteClose64@@Base+0x80>
    cbdc:	str	wzr, [x22]
    cbe0:	cbz	x23, cbe8 <BZ2_bzWriteClose64@@Base+0x88>
    cbe4:	str	wzr, [x23]
    cbe8:	cbz	x24, cbf0 <BZ2_bzWriteClose64@@Base+0x90>
    cbec:	str	wzr, [x24]
    cbf0:	cbnz	w25, cca0 <BZ2_bzWriteClose64@@Base+0x140>
    cbf4:	ldr	w0, [x19, #5096]
    cbf8:	cbnz	w0, cc94 <BZ2_bzWriteClose64@@Base+0x134>
    cbfc:	mov	x1, #0x1398                	// #5016
    cc00:	add	x26, x19, #0x8
    cc04:	mov	w25, #0x1388                	// #5000
    cc08:	stp	x27, x28, [sp, #80]
    cc0c:	add	x27, x19, x1
    cc10:	b	cc1c <BZ2_bzWriteClose64@@Base+0xbc>
    cc14:	cmp	w28, #0x4
    cc18:	b.eq	cc90 <BZ2_bzWriteClose64@@Base+0x130>  // b.none
    cc1c:	str	x26, [x19, #5040]
    cc20:	mov	x0, x27
    cc24:	str	w25, [x19, #5048]
    cc28:	mov	w1, #0x2                   	// #2
    cc2c:	bl	15b0 <BZ2_bzCompress@plt>
    cc30:	mov	w28, w0
    cc34:	sub	w0, w0, #0x3
    cc38:	cmp	w0, #0x1
    cc3c:	b.hi	cd5c <BZ2_bzWriteClose64@@Base+0x1fc>  // b.pmore
    cc40:	ldr	w2, [x19, #5048]
    cc44:	mov	w0, #0x1387                	// #4999
    cc48:	cmp	w2, w0
    cc4c:	b.hi	cc14 <BZ2_bzWriteClose64@@Base+0xb4>  // b.pmore
    cc50:	ldr	x3, [x19]
    cc54:	sub	w5, w25, w2
    cc58:	mov	x0, x26
    cc5c:	sub	w2, w25, w2
    cc60:	mov	x1, #0x1                   	// #1
    cc64:	str	w5, [sp, #108]
    cc68:	bl	1680 <fwrite@plt>
    cc6c:	ldr	w5, [sp, #108]
    cc70:	cmp	w5, w0
    cc74:	b.ne	cc84 <BZ2_bzWriteClose64@@Base+0x124>  // b.any
    cc78:	ldr	x0, [x19]
    cc7c:	bl	16f0 <ferror@plt>
    cc80:	cbz	w0, cc14 <BZ2_bzWriteClose64@@Base+0xb4>
    cc84:	ldp	x27, x28, [sp, #80]
    cc88:	cbnz	x20, cd34 <BZ2_bzWriteClose64@@Base+0x1d4>
    cc8c:	b	cd3c <BZ2_bzWriteClose64@@Base+0x1dc>
    cc90:	ldp	x27, x28, [sp, #80]
    cc94:	ldr	x0, [x19]
    cc98:	bl	16f0 <ferror@plt>
    cc9c:	cbz	w0, cd18 <BZ2_bzWriteClose64@@Base+0x1b8>
    cca0:	cbz	x21, ccac <BZ2_bzWriteClose64@@Base+0x14c>
    cca4:	ldr	w0, [x19, #5028]
    cca8:	str	w0, [x21]
    ccac:	cbz	x22, ccb8 <BZ2_bzWriteClose64@@Base+0x158>
    ccb0:	ldr	w0, [x19, #5032]
    ccb4:	str	w0, [x22]
    ccb8:	cbz	x23, ccc4 <BZ2_bzWriteClose64@@Base+0x164>
    ccbc:	ldr	w0, [x19, #5052]
    ccc0:	str	w0, [x23]
    ccc4:	cbz	x24, ccd0 <BZ2_bzWriteClose64@@Base+0x170>
    ccc8:	ldr	w0, [x19, #5056]
    cccc:	str	w0, [x24]
    ccd0:	cbz	x20, ccd8 <BZ2_bzWriteClose64@@Base+0x178>
    ccd4:	str	wzr, [x20]
    ccd8:	str	wzr, [x19, #5096]
    ccdc:	mov	x0, #0x1398                	// #5016
    cce0:	add	x0, x19, x0
    cce4:	bl	1560 <BZ2_bzCompressEnd@plt>
    cce8:	mov	x0, x19
    ccec:	ldp	x19, x20, [sp, #16]
    ccf0:	ldp	x21, x22, [sp, #32]
    ccf4:	ldp	x23, x24, [sp, #48]
    ccf8:	ldp	x25, x26, [sp, #64]
    ccfc:	ldp	x29, x30, [sp], #112
    cd00:	b	1610 <free@plt>
    cd04:	cbz	x0, cb98 <BZ2_bzWriteClose64@@Base+0x38>
    cd08:	str	wzr, [x0]
    cd0c:	ldp	x19, x20, [sp, #16]
    cd10:	ldp	x29, x30, [sp], #112
    cd14:	ret
    cd18:	ldr	x0, [x19]
    cd1c:	bl	1690 <fflush@plt>
    cd20:	ldr	x0, [x19]
    cd24:	bl	16f0 <ferror@plt>
    cd28:	cbz	w0, cca0 <BZ2_bzWriteClose64@@Base+0x140>
    cd2c:	nop
    cd30:	cbz	x20, cd3c <BZ2_bzWriteClose64@@Base+0x1dc>
    cd34:	mov	w0, #0xfffffffa            	// #-6
    cd38:	str	w0, [x20]
    cd3c:	mov	w0, #0xfffffffa            	// #-6
    cd40:	ldp	x21, x22, [sp, #32]
    cd44:	ldp	x23, x24, [sp, #48]
    cd48:	ldp	x25, x26, [sp, #64]
    cd4c:	str	w0, [x19, #5096]
    cd50:	ldp	x19, x20, [sp, #16]
    cd54:	ldp	x29, x30, [sp], #112
    cd58:	ret
    cd5c:	cbz	x20, cd64 <BZ2_bzWriteClose64@@Base+0x204>
    cd60:	str	w28, [x20]
    cd64:	ldp	x21, x22, [sp, #32]
    cd68:	ldp	x23, x24, [sp, #48]
    cd6c:	ldp	x25, x26, [sp, #64]
    cd70:	str	w28, [x19, #5096]
    cd74:	ldp	x27, x28, [sp, #80]
    cd78:	b	cb98 <BZ2_bzWriteClose64@@Base+0x38>
    cd7c:	nop

000000000000cd80 <BZ2_bzWriteClose@@Base>:
    cd80:	mov	x5, x4
    cd84:	mov	x6, #0x0                   	// #0
    cd88:	mov	x4, #0x0                   	// #0
    cd8c:	b	1650 <BZ2_bzWriteClose64@plt>

000000000000cd90 <BZ2_bzReadOpen@@Base>:
    cd90:	stp	x29, x30, [sp, #-80]!
    cd94:	cmp	w3, #0x1
    cd98:	mov	x29, sp
    cd9c:	stp	x19, x20, [sp, #16]
    cda0:	mov	x20, x4
    cda4:	stp	x21, x22, [sp, #32]
    cda8:	mov	x21, x0
    cdac:	mov	w22, w5
    cdb0:	stp	x23, x24, [sp, #48]
    cdb4:	mov	x23, x1
    cdb8:	cset	w1, hi  // hi = pmore
    cdbc:	stp	x25, x26, [sp, #64]
    cdc0:	cmp	x23, #0x0
    cdc4:	mov	w25, w3
    cdc8:	mov	w24, w2
    cdcc:	csinc	w1, w1, wzr, ne  // ne = any
    cdd0:	cbz	x0, ceec <BZ2_bzReadOpen@@Base+0x15c>
    cdd4:	str	wzr, [x0]
    cdd8:	cbnz	w1, cec4 <BZ2_bzReadOpen@@Base+0x134>
    cddc:	cmp	w2, #0x4
    cde0:	b.hi	cec4 <BZ2_bzReadOpen@@Base+0x134>  // b.pmore
    cde4:	cmp	x4, #0x0
    cde8:	ccmp	w5, #0x0, #0x4, eq  // eq = none
    cdec:	b.ne	cec4 <BZ2_bzReadOpen@@Base+0x134>  // b.any
    cdf0:	cmp	x4, #0x0
    cdf4:	mov	w0, #0x1388                	// #5000
    cdf8:	ccmp	w5, w0, #0x0, ne  // ne = any
    cdfc:	b.hi	cec4 <BZ2_bzReadOpen@@Base+0x134>  // b.pmore
    ce00:	mov	x0, x23
    ce04:	bl	16f0 <ferror@plt>
    ce08:	cbnz	w0, cf34 <BZ2_bzReadOpen@@Base+0x1a4>
    ce0c:	mov	x0, #0x13f0                	// #5104
    ce10:	bl	14e0 <malloc@plt>
    ce14:	mov	x19, x0
    ce18:	cbz	x0, cf60 <BZ2_bzReadOpen@@Base+0x1d0>
    ce1c:	cbz	x21, ce24 <BZ2_bzReadOpen@@Base+0x94>
    ce20:	str	wzr, [x21]
    ce24:	add	x26, x19, #0x1, lsl #12
    ce28:	str	wzr, [x19, #5096]
    ce2c:	cmp	w22, #0x0
    ce30:	strb	wzr, [x26, #1004]
    ce34:	str	x23, [x19]
    ce38:	str	wzr, [x19, #5008]
    ce3c:	strb	wzr, [x26, #916]
    ce40:	str	xzr, [x19, #5072]
    ce44:	str	xzr, [x19, #5080]
    ce48:	str	xzr, [x19, #5088]
    ce4c:	b.le	ce78 <BZ2_bzReadOpen@@Base+0xe8>
    ce50:	sub	w2, w22, #0x1
    ce54:	add	x1, x19, #0x8
    ce58:	mov	x6, #0x0                   	// #0
    ce5c:	nop
    ce60:	ldrb	w4, [x20, x6]
    ce64:	cmp	x6, x2
    ce68:	strb	w4, [x1, x6]
    ce6c:	add	x6, x6, #0x1
    ce70:	b.ne	ce60 <BZ2_bzReadOpen@@Base+0xd0>  // b.any
    ce74:	str	w22, [x19, #5008]
    ce78:	mov	x0, #0x1398                	// #5016
    ce7c:	mov	w2, w25
    ce80:	mov	w1, w24
    ce84:	add	x0, x19, x0
    ce88:	bl	14f0 <BZ2_bzDecompressInit@plt>
    ce8c:	cbnz	w0, cf48 <BZ2_bzReadOpen@@Base+0x1b8>
    ce90:	ldr	w1, [x19, #5008]
    ce94:	add	x0, x19, #0x8
    ce98:	str	x0, [x19, #5016]
    ce9c:	mov	w0, #0x1                   	// #1
    cea0:	str	w1, [x19, #5024]
    cea4:	strb	w0, [x26, #1004]
    cea8:	mov	x0, x19
    ceac:	ldp	x19, x20, [sp, #16]
    ceb0:	ldp	x21, x22, [sp, #32]
    ceb4:	ldp	x23, x24, [sp, #48]
    ceb8:	ldp	x25, x26, [sp, #64]
    cebc:	ldp	x29, x30, [sp], #80
    cec0:	ret
    cec4:	mov	w0, #0xfffffffe            	// #-2
    cec8:	mov	x19, #0x0                   	// #0
    cecc:	str	w0, [x21]
    ced0:	mov	x0, x19
    ced4:	ldp	x19, x20, [sp, #16]
    ced8:	ldp	x21, x22, [sp, #32]
    cedc:	ldp	x23, x24, [sp, #48]
    cee0:	ldp	x25, x26, [sp, #64]
    cee4:	ldp	x29, x30, [sp], #80
    cee8:	ret
    ceec:	cbnz	w1, cf14 <BZ2_bzReadOpen@@Base+0x184>
    cef0:	cmp	w2, #0x4
    cef4:	b.hi	cf14 <BZ2_bzReadOpen@@Base+0x184>  // b.pmore
    cef8:	cmp	x4, #0x0
    cefc:	ccmp	w5, #0x0, #0x4, eq  // eq = none
    cf00:	b.ne	cf14 <BZ2_bzReadOpen@@Base+0x184>  // b.any
    cf04:	cmp	x4, #0x0
    cf08:	mov	w0, #0x1388                	// #5000
    cf0c:	ccmp	w5, w0, #0x0, ne  // ne = any
    cf10:	b.ls	ce00 <BZ2_bzReadOpen@@Base+0x70>  // b.plast
    cf14:	mov	x19, #0x0                   	// #0
    cf18:	mov	x0, x19
    cf1c:	ldp	x19, x20, [sp, #16]
    cf20:	ldp	x21, x22, [sp, #32]
    cf24:	ldp	x23, x24, [sp, #48]
    cf28:	ldp	x25, x26, [sp, #64]
    cf2c:	ldp	x29, x30, [sp], #80
    cf30:	ret
    cf34:	cbz	x21, cf14 <BZ2_bzReadOpen@@Base+0x184>
    cf38:	mov	w0, #0xfffffffa            	// #-6
    cf3c:	mov	x19, #0x0                   	// #0
    cf40:	str	w0, [x21]
    cf44:	b	ced0 <BZ2_bzReadOpen@@Base+0x140>
    cf48:	cbz	x21, cf50 <BZ2_bzReadOpen@@Base+0x1c0>
    cf4c:	str	w0, [x21]
    cf50:	mov	x0, x19
    cf54:	mov	x19, #0x0                   	// #0
    cf58:	bl	1610 <free@plt>
    cf5c:	b	ced0 <BZ2_bzReadOpen@@Base+0x140>
    cf60:	cbz	x21, cf14 <BZ2_bzReadOpen@@Base+0x184>
    cf64:	mov	w0, #0xfffffffd            	// #-3
    cf68:	str	w0, [x21]
    cf6c:	b	ced0 <BZ2_bzReadOpen@@Base+0x140>
    cf70:	mov	x12, #0x13f0                	// #5104
    cf74:	sub	sp, sp, x12
    cf78:	adrp	x4, e000 <BZ2_bzerror@@Base+0x650>
    cf7c:	stp	x29, x30, [sp]
    cf80:	mov	x29, sp
    cf84:	ldrb	w4, [x4, #1088]
    cf88:	stp	x19, x20, [sp, #16]
    cf8c:	strb	w4, [sp, #88]
    cf90:	stur	xzr, [sp, #89]
    cf94:	strb	wzr, [sp, #97]
    cf98:	cbz	x2, d144 <BZ2_bzReadOpen@@Base+0x3b4>
    cf9c:	stp	x21, x22, [sp, #32]
    cfa0:	mov	x20, x2
    cfa4:	stp	x23, x24, [sp, #48]
    cfa8:	mov	x23, x0
    cfac:	mov	w24, w3
    cfb0:	stp	x25, x26, [sp, #64]
    cfb4:	mov	w25, w1
    cfb8:	ldrb	w19, [x2]
    cfbc:	cbz	w19, d0c0 <BZ2_bzReadOpen@@Base+0x330>
    cfc0:	mov	w26, #0x0                   	// #0
    cfc4:	mov	w21, #0x0                   	// #0
    cfc8:	mov	w22, #0x9                   	// #9
    cfcc:	b	cffc <BZ2_bzReadOpen@@Base+0x26c>
    cfd0:	cmp	w19, #0x72
    cfd4:	b.eq	d0b0 <BZ2_bzReadOpen@@Base+0x320>  // b.none
    cfd8:	bl	15d0 <__ctype_b_loc@plt>
    cfdc:	ldr	x0, [x0]
    cfe0:	ubfiz	x1, x19, #1, #8
    cfe4:	sub	w19, w19, #0x30
    cfe8:	ldrh	w0, [x0, x1]
    cfec:	tst	x0, #0x800
    cff0:	csel	w22, w19, w22, ne  // ne = any
    cff4:	ldrb	w19, [x20, #1]!
    cff8:	cbz	w19, d018 <BZ2_bzReadOpen@@Base+0x288>
    cffc:	cmp	w19, #0x73
    d000:	b.eq	d0b8 <BZ2_bzReadOpen@@Base+0x328>  // b.none
    d004:	cmp	w19, #0x77
    d008:	b.ne	cfd0 <BZ2_bzReadOpen@@Base+0x240>  // b.any
    d00c:	ldrb	w19, [x20, #1]!
    d010:	mov	w21, #0x1                   	// #1
    d014:	cbnz	w19, cffc <BZ2_bzReadOpen@@Base+0x26c>
    d018:	mov	w0, #0x77                  	// #119
    d01c:	cbz	w21, d0c8 <BZ2_bzReadOpen@@Base+0x338>
    d020:	add	x19, sp, #0x58
    d024:	strh	w0, [sp, #88]
    d028:	mov	x0, x19
    d02c:	bl	1470 <strlen@plt>
    d030:	mov	w1, #0x62                  	// #98
    d034:	strh	w1, [x19, x0]
    d038:	cbnz	w24, d0ec <BZ2_bzReadOpen@@Base+0x35c>
    d03c:	cbz	x23, d048 <BZ2_bzReadOpen@@Base+0x2b8>
    d040:	ldrb	w0, [x23]
    d044:	cbnz	w0, d160 <BZ2_bzReadOpen@@Base+0x3d0>
    d048:	cbz	w21, d128 <BZ2_bzReadOpen@@Base+0x398>
    d04c:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    d050:	ldr	x0, [x0, #4032]
    d054:	ldr	x20, [x0]
    d058:	cbz	x20, d138 <BZ2_bzReadOpen@@Base+0x3a8>
    d05c:	cmp	w22, #0x9
    d060:	mov	w2, #0x9                   	// #9
    d064:	csel	w2, w22, w2, le
    d068:	mov	x1, x20
    d06c:	cmp	w2, #0x0
    d070:	add	x0, sp, #0x54
    d074:	csinc	w2, w2, wzr, gt
    d078:	mov	w4, #0x1e                  	// #30
    d07c:	mov	w3, #0x0                   	// #0
    d080:	bl	1540 <BZ2_bzWriteOpen@plt>
    d084:	mov	x19, x0
    d088:	cbz	x19, d174 <BZ2_bzReadOpen@@Base+0x3e4>
    d08c:	ldp	x21, x22, [sp, #32]
    d090:	ldp	x23, x24, [sp, #48]
    d094:	ldp	x25, x26, [sp, #64]
    d098:	mov	x0, x19
    d09c:	mov	x12, #0x13f0                	// #5104
    d0a0:	ldp	x29, x30, [sp]
    d0a4:	ldp	x19, x20, [sp, #16]
    d0a8:	add	sp, sp, x12
    d0ac:	ret
    d0b0:	mov	w21, #0x0                   	// #0
    d0b4:	b	cff4 <BZ2_bzReadOpen@@Base+0x264>
    d0b8:	mov	w26, #0x1                   	// #1
    d0bc:	b	cff4 <BZ2_bzReadOpen@@Base+0x264>
    d0c0:	mov	w22, #0x9                   	// #9
    d0c4:	mov	w26, #0x0                   	// #0
    d0c8:	add	x19, sp, #0x58
    d0cc:	mov	w0, #0x72                  	// #114
    d0d0:	strh	w0, [sp, #88]
    d0d4:	mov	x0, x19
    d0d8:	bl	1470 <strlen@plt>
    d0dc:	mov	w21, #0x0                   	// #0
    d0e0:	mov	w1, #0x62                  	// #98
    d0e4:	strh	w1, [x19, x0]
    d0e8:	cbz	w24, d03c <BZ2_bzReadOpen@@Base+0x2ac>
    d0ec:	mov	x1, x19
    d0f0:	mov	w0, w25
    d0f4:	bl	1530 <fdopen@plt>
    d0f8:	mov	x20, x0
    d0fc:	cbz	x20, d138 <BZ2_bzReadOpen@@Base+0x3a8>
    d100:	cbnz	w21, d05c <BZ2_bzReadOpen@@Base+0x2cc>
    d104:	mov	w3, w26
    d108:	add	x4, sp, #0x68
    d10c:	mov	x1, x20
    d110:	add	x0, sp, #0x54
    d114:	mov	w5, #0x0                   	// #0
    d118:	mov	w2, #0x0                   	// #0
    d11c:	bl	16b0 <BZ2_bzReadOpen@plt>
    d120:	mov	x19, x0
    d124:	b	d088 <BZ2_bzReadOpen@@Base+0x2f8>
    d128:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    d12c:	ldr	x0, [x0, #4040]
    d130:	ldr	x20, [x0]
    d134:	cbnz	x20, d104 <BZ2_bzReadOpen@@Base+0x374>
    d138:	ldp	x21, x22, [sp, #32]
    d13c:	ldp	x23, x24, [sp, #48]
    d140:	ldp	x25, x26, [sp, #64]
    d144:	mov	x19, #0x0                   	// #0
    d148:	mov	x12, #0x13f0                	// #5104
    d14c:	mov	x0, x19
    d150:	ldp	x29, x30, [sp]
    d154:	ldp	x19, x20, [sp, #16]
    d158:	add	sp, sp, x12
    d15c:	ret
    d160:	mov	x1, x19
    d164:	mov	x0, x23
    d168:	bl	16a0 <fopen64@plt>
    d16c:	mov	x20, x0
    d170:	b	d0fc <BZ2_bzReadOpen@@Base+0x36c>
    d174:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    d178:	ldr	x0, [x0, #4040]
    d17c:	ldr	x0, [x0]
    d180:	cmp	x0, x20
    d184:	b.eq	d138 <BZ2_bzReadOpen@@Base+0x3a8>  // b.none
    d188:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    d18c:	ldr	x0, [x0, #4032]
    d190:	ldr	x0, [x0]
    d194:	cmp	x0, x20
    d198:	b.eq	d138 <BZ2_bzReadOpen@@Base+0x3a8>  // b.none
    d19c:	mov	x0, x20
    d1a0:	bl	14d0 <fclose@plt>
    d1a4:	ldp	x21, x22, [sp, #32]
    d1a8:	ldp	x23, x24, [sp, #48]
    d1ac:	ldp	x25, x26, [sp, #64]
    d1b0:	b	d098 <BZ2_bzReadOpen@@Base+0x308>
    d1b4:	nop

000000000000d1b8 <BZ2_bzReadClose@@Base>:
    d1b8:	stp	x29, x30, [sp, #-32]!
    d1bc:	mov	x29, sp
    d1c0:	str	x19, [sp, #16]
    d1c4:	mov	x19, x1
    d1c8:	cbz	x0, d218 <BZ2_bzReadClose@@Base+0x60>
    d1cc:	str	wzr, [x0]
    d1d0:	cbz	x1, d20c <BZ2_bzReadClose@@Base+0x54>
    d1d4:	add	x1, x1, #0x1, lsl #12
    d1d8:	str	wzr, [x19, #5096]
    d1dc:	ldrb	w2, [x1, #916]
    d1e0:	cbnz	w2, d1fc <BZ2_bzReadClose@@Base+0x44>
    d1e4:	ldrb	w0, [x1, #1004]
    d1e8:	cbnz	w0, d234 <BZ2_bzReadClose@@Base+0x7c>
    d1ec:	mov	x0, x19
    d1f0:	ldr	x19, [sp, #16]
    d1f4:	ldp	x29, x30, [sp], #32
    d1f8:	b	1610 <free@plt>
    d1fc:	mov	w1, #0xffffffff            	// #-1
    d200:	str	w1, [x0]
    d204:	mov	w0, #0xffffffff            	// #-1
    d208:	str	w0, [x19, #5096]
    d20c:	ldr	x19, [sp, #16]
    d210:	ldp	x29, x30, [sp], #32
    d214:	ret
    d218:	cbz	x1, d20c <BZ2_bzReadClose@@Base+0x54>
    d21c:	add	x1, x1, #0x1, lsl #12
    d220:	str	wzr, [x19, #5096]
    d224:	ldrb	w0, [x1, #916]
    d228:	cbnz	w0, d204 <BZ2_bzReadClose@@Base+0x4c>
    d22c:	ldrb	w0, [x1, #1004]
    d230:	cbz	w0, d1ec <BZ2_bzReadClose@@Base+0x34>
    d234:	mov	x0, #0x1398                	// #5016
    d238:	add	x0, x19, x0
    d23c:	bl	1500 <BZ2_bzDecompressEnd@plt>
    d240:	mov	x0, x19
    d244:	ldr	x19, [sp, #16]
    d248:	ldp	x29, x30, [sp], #32
    d24c:	b	1610 <free@plt>

000000000000d250 <BZ2_bzRead@@Base>:
    d250:	stp	x29, x30, [sp, #-80]!
    d254:	mov	x29, sp
    d258:	stp	x19, x20, [sp, #16]
    d25c:	mov	x19, x1
    d260:	stp	x21, x22, [sp, #32]
    d264:	mov	x21, x0
    d268:	mov	w22, w3
    d26c:	cbz	x0, d388 <BZ2_bzRead@@Base+0x138>
    d270:	str	wzr, [x0]
    d274:	cbz	x1, d3b8 <BZ2_bzRead@@Base+0x168>
    d278:	str	wzr, [x1, #5096]
    d27c:	cbz	x2, d3dc <BZ2_bzRead@@Base+0x18c>
    d280:	tbnz	w22, #31, d3d8 <BZ2_bzRead@@Base+0x188>
    d284:	add	x0, x19, #0x1, lsl #12
    d288:	ldrb	w0, [x0, #916]
    d28c:	cbnz	w0, d3e8 <BZ2_bzRead@@Base+0x198>
    d290:	cbz	w22, d414 <BZ2_bzRead@@Base+0x1c4>
    d294:	stp	x23, x24, [sp, #48]
    d298:	mov	x0, #0x1398                	// #5016
    d29c:	add	x24, x19, #0x8
    d2a0:	str	x25, [sp, #64]
    d2a4:	add	x23, x19, x0
    d2a8:	str	x2, [x19, #5040]
    d2ac:	str	w22, [x19, #5048]
    d2b0:	b	d2c4 <BZ2_bzRead@@Base+0x74>
    d2b4:	cmp	w0, #0x4
    d2b8:	b.eq	d48c <BZ2_bzRead@@Base+0x23c>  // b.none
    d2bc:	ldr	w0, [x19, #5048]
    d2c0:	cbz	w0, d36c <BZ2_bzRead@@Base+0x11c>
    d2c4:	ldr	x0, [x19]
    d2c8:	bl	16f0 <ferror@plt>
    d2cc:	mov	w20, w0
    d2d0:	cbnz	w0, d438 <BZ2_bzRead@@Base+0x1e8>
    d2d4:	ldr	w0, [x19, #5024]
    d2d8:	cbnz	w0, d328 <BZ2_bzRead@@Base+0xd8>
    d2dc:	ldr	x25, [x19]
    d2e0:	mov	x0, x25
    d2e4:	bl	1520 <fgetc@plt>
    d2e8:	cmn	w0, #0x1
    d2ec:	b.eq	d328 <BZ2_bzRead@@Base+0xd8>  // b.none
    d2f0:	mov	x1, x25
    d2f4:	bl	1620 <ungetc@plt>
    d2f8:	ldr	x3, [x19]
    d2fc:	mov	x0, x24
    d300:	mov	x2, #0x1388                	// #5000
    d304:	mov	x1, #0x1                   	// #1
    d308:	bl	15f0 <fread@plt>
    d30c:	mov	x25, x0
    d310:	ldr	x0, [x19]
    d314:	bl	16f0 <ferror@plt>
    d318:	cbnz	w0, d438 <BZ2_bzRead@@Base+0x1e8>
    d31c:	str	w25, [x19, #5008]
    d320:	str	x24, [x19, #5016]
    d324:	str	w25, [x19, #5024]
    d328:	mov	x0, x23
    d32c:	bl	1630 <BZ2_bzDecompress@plt>
    d330:	tst	w0, #0xfffffffb
    d334:	b.ne	d45c <BZ2_bzRead@@Base+0x20c>  // b.any
    d338:	cbnz	w0, d2b4 <BZ2_bzRead@@Base+0x64>
    d33c:	ldr	x20, [x19]
    d340:	mov	x0, x20
    d344:	bl	1520 <fgetc@plt>
    d348:	cmn	w0, #0x1
    d34c:	b.eq	d35c <BZ2_bzRead@@Base+0x10c>  // b.none
    d350:	mov	x1, x20
    d354:	bl	1620 <ungetc@plt>
    d358:	b	d2bc <BZ2_bzRead@@Base+0x6c>
    d35c:	ldr	w0, [x19, #5024]
    d360:	cbnz	w0, d2bc <BZ2_bzRead@@Base+0x6c>
    d364:	ldr	w0, [x19, #5048]
    d368:	cbnz	w0, d474 <BZ2_bzRead@@Base+0x224>
    d36c:	cbz	x21, d374 <BZ2_bzRead@@Base+0x124>
    d370:	str	wzr, [x21]
    d374:	mov	w20, w22
    d378:	ldp	x23, x24, [sp, #48]
    d37c:	ldr	x25, [sp, #64]
    d380:	str	wzr, [x19, #5096]
    d384:	b	d3a4 <BZ2_bzRead@@Base+0x154>
    d388:	cbz	x1, d3c0 <BZ2_bzRead@@Base+0x170>
    d38c:	str	wzr, [x1, #5096]
    d390:	cbnz	x2, d280 <BZ2_bzRead@@Base+0x30>
    d394:	nop
    d398:	mov	w0, #0xfffffffe            	// #-2
    d39c:	mov	w20, #0x0                   	// #0
    d3a0:	str	w0, [x19, #5096]
    d3a4:	mov	w0, w20
    d3a8:	ldp	x19, x20, [sp, #16]
    d3ac:	ldp	x21, x22, [sp, #32]
    d3b0:	ldp	x29, x30, [sp], #80
    d3b4:	ret
    d3b8:	mov	w0, #0xfffffffe            	// #-2
    d3bc:	str	w0, [x21]
    d3c0:	mov	w20, #0x0                   	// #0
    d3c4:	mov	w0, w20
    d3c8:	ldp	x19, x20, [sp, #16]
    d3cc:	ldp	x21, x22, [sp, #32]
    d3d0:	ldp	x29, x30, [sp], #80
    d3d4:	ret
    d3d8:	cbz	x21, d398 <BZ2_bzRead@@Base+0x148>
    d3dc:	mov	w0, #0xfffffffe            	// #-2
    d3e0:	str	w0, [x21]
    d3e4:	b	d398 <BZ2_bzRead@@Base+0x148>
    d3e8:	cbz	x21, d3f4 <BZ2_bzRead@@Base+0x1a4>
    d3ec:	mov	w0, #0xffffffff            	// #-1
    d3f0:	str	w0, [x21]
    d3f4:	mov	w0, #0xffffffff            	// #-1
    d3f8:	str	w0, [x19, #5096]
    d3fc:	mov	w20, #0x0                   	// #0
    d400:	mov	w0, w20
    d404:	ldp	x19, x20, [sp, #16]
    d408:	ldp	x21, x22, [sp, #32]
    d40c:	ldp	x29, x30, [sp], #80
    d410:	ret
    d414:	cbz	x21, d41c <BZ2_bzRead@@Base+0x1cc>
    d418:	str	wzr, [x21]
    d41c:	str	wzr, [x19, #5096]
    d420:	mov	w20, #0x0                   	// #0
    d424:	mov	w0, w20
    d428:	ldp	x19, x20, [sp, #16]
    d42c:	ldp	x21, x22, [sp, #32]
    d430:	ldp	x29, x30, [sp], #80
    d434:	ret
    d438:	cbz	x21, d444 <BZ2_bzRead@@Base+0x1f4>
    d43c:	mov	w0, #0xfffffffa            	// #-6
    d440:	str	w0, [x21]
    d444:	mov	w0, #0xfffffffa            	// #-6
    d448:	mov	w20, #0x0                   	// #0
    d44c:	ldp	x23, x24, [sp, #48]
    d450:	ldr	x25, [sp, #64]
    d454:	str	w0, [x19, #5096]
    d458:	b	d3a4 <BZ2_bzRead@@Base+0x154>
    d45c:	cbz	x21, d464 <BZ2_bzRead@@Base+0x214>
    d460:	str	w0, [x21]
    d464:	ldp	x23, x24, [sp, #48]
    d468:	ldr	x25, [sp, #64]
    d46c:	str	w0, [x19, #5096]
    d470:	b	d3a4 <BZ2_bzRead@@Base+0x154>
    d474:	cbz	x21, d480 <BZ2_bzRead@@Base+0x230>
    d478:	mov	w0, #0xfffffff9            	// #-7
    d47c:	str	w0, [x21]
    d480:	mov	w0, #0xfffffff9            	// #-7
    d484:	mov	w20, #0x0                   	// #0
    d488:	b	d464 <BZ2_bzRead@@Base+0x214>
    d48c:	cbz	x21, d494 <BZ2_bzRead@@Base+0x244>
    d490:	str	w0, [x21]
    d494:	ldr	w20, [x19, #5048]
    d498:	mov	w0, #0x4                   	// #4
    d49c:	ldp	x23, x24, [sp, #48]
    d4a0:	sub	w20, w22, w20
    d4a4:	ldr	x25, [sp, #64]
    d4a8:	str	w0, [x19, #5096]
    d4ac:	b	d3a4 <BZ2_bzRead@@Base+0x154>

000000000000d4b0 <BZ2_bzReadGetUnused@@Base>:
    d4b0:	cbz	x1, d504 <BZ2_bzReadGetUnused@@Base+0x54>
    d4b4:	ldr	w4, [x1, #5096]
    d4b8:	cmp	w4, #0x4
    d4bc:	b.eq	d4d8 <BZ2_bzReadGetUnused@@Base+0x28>  // b.none
    d4c0:	cbz	x0, d4cc <BZ2_bzReadGetUnused@@Base+0x1c>
    d4c4:	mov	w2, #0xffffffff            	// #-1
    d4c8:	str	w2, [x0]
    d4cc:	mov	w0, #0xffffffff            	// #-1
    d4d0:	str	w0, [x1, #5096]
    d4d4:	ret
    d4d8:	cmp	x2, #0x0
    d4dc:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    d4e0:	b.eq	d514 <BZ2_bzReadGetUnused@@Base+0x64>  // b.none
    d4e4:	cbz	x0, d4ec <BZ2_bzReadGetUnused@@Base+0x3c>
    d4e8:	str	wzr, [x0]
    d4ec:	ldr	w0, [x1, #5024]
    d4f0:	str	wzr, [x1, #5096]
    d4f4:	str	w0, [x3]
    d4f8:	ldr	x0, [x1, #5016]
    d4fc:	str	x0, [x2]
    d500:	ret
    d504:	cbz	x0, d4d4 <BZ2_bzReadGetUnused@@Base+0x24>
    d508:	mov	w1, #0xfffffffe            	// #-2
    d50c:	str	w1, [x0]
    d510:	ret
    d514:	cbz	x0, d520 <BZ2_bzReadGetUnused@@Base+0x70>
    d518:	mov	w2, #0xfffffffe            	// #-2
    d51c:	str	w2, [x0]
    d520:	mov	w0, #0xfffffffe            	// #-2
    d524:	str	w0, [x1, #5096]
    d528:	ret
    d52c:	nop

000000000000d530 <BZ2_bzBuffToBuffCompress@@Base>:
    d530:	stp	x29, x30, [sp, #-144]!
    d534:	cmp	x0, #0x0
    d538:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    d53c:	mov	x29, sp
    d540:	stp	x19, x20, [sp, #16]
    d544:	b.eq	d65c <BZ2_bzBuffToBuffCompress@@Base+0x12c>  // b.none
    d548:	stp	x21, x22, [sp, #32]
    d54c:	cmp	x2, #0x0
    d550:	mov	x22, x0
    d554:	stp	x23, x24, [sp, #48]
    d558:	sub	w0, w4, #0x1
    d55c:	mov	x20, x1
    d560:	mov	x23, x2
    d564:	mov	w1, w4
    d568:	ccmp	w0, #0x8, #0x2, ne  // ne = any
    d56c:	b.hi	d64c <BZ2_bzBuffToBuffCompress@@Base+0x11c>  // b.pmore
    d570:	cmp	w6, #0xfa
    d574:	mov	w2, w5
    d578:	ccmp	w5, #0x4, #0x2, ls  // ls = plast
    d57c:	b.hi	d64c <BZ2_bzBuffToBuffCompress@@Base+0x11c>  // b.pmore
    d580:	cmp	w6, #0x0
    d584:	add	x24, sp, #0x40
    d588:	mov	w21, w3
    d58c:	mov	x0, x24
    d590:	mov	w3, #0x1e                  	// #30
    d594:	csel	w3, w6, w3, ne  // ne = any
    d598:	stp	xzr, xzr, [sp, #120]
    d59c:	str	xzr, [sp, #136]
    d5a0:	bl	1550 <BZ2_bzCompressInit@plt>
    d5a4:	mov	w19, w0
    d5a8:	cbz	w0, d5c4 <BZ2_bzBuffToBuffCompress@@Base+0x94>
    d5ac:	ldp	x21, x22, [sp, #32]
    d5b0:	ldp	x23, x24, [sp, #48]
    d5b4:	mov	w0, w19
    d5b8:	ldp	x19, x20, [sp, #16]
    d5bc:	ldp	x29, x30, [sp], #144
    d5c0:	ret
    d5c4:	ldr	w2, [x20]
    d5c8:	mov	w1, #0x2                   	// #2
    d5cc:	mov	x0, x24
    d5d0:	str	x23, [sp, #64]
    d5d4:	str	w21, [sp, #72]
    d5d8:	str	x22, [sp, #88]
    d5dc:	str	w2, [sp, #96]
    d5e0:	bl	15b0 <BZ2_bzCompress@plt>
    d5e4:	mov	w1, w0
    d5e8:	cmp	w0, #0x3
    d5ec:	b.eq	d664 <BZ2_bzBuffToBuffCompress@@Base+0x134>  // b.none
    d5f0:	cmp	w0, #0x4
    d5f4:	b.eq	d61c <BZ2_bzBuffToBuffCompress@@Base+0xec>  // b.none
    d5f8:	mov	w19, w1
    d5fc:	mov	x0, x24
    d600:	bl	1560 <BZ2_bzCompressEnd@plt>
    d604:	mov	w0, w19
    d608:	ldp	x19, x20, [sp, #16]
    d60c:	ldp	x21, x22, [sp, #32]
    d610:	ldp	x23, x24, [sp, #48]
    d614:	ldp	x29, x30, [sp], #144
    d618:	ret
    d61c:	ldr	w1, [x20]
    d620:	mov	x0, x24
    d624:	ldr	w2, [sp, #96]
    d628:	sub	w1, w1, w2
    d62c:	str	w1, [x20]
    d630:	bl	1560 <BZ2_bzCompressEnd@plt>
    d634:	mov	w0, w19
    d638:	ldp	x19, x20, [sp, #16]
    d63c:	ldp	x21, x22, [sp, #32]
    d640:	ldp	x23, x24, [sp, #48]
    d644:	ldp	x29, x30, [sp], #144
    d648:	ret
    d64c:	mov	w19, #0xfffffffe            	// #-2
    d650:	ldp	x21, x22, [sp, #32]
    d654:	ldp	x23, x24, [sp, #48]
    d658:	b	d5b4 <BZ2_bzBuffToBuffCompress@@Base+0x84>
    d65c:	mov	w19, #0xfffffffe            	// #-2
    d660:	b	d5b4 <BZ2_bzBuffToBuffCompress@@Base+0x84>
    d664:	mov	x0, x24
    d668:	mov	w19, #0xfffffff8            	// #-8
    d66c:	bl	1560 <BZ2_bzCompressEnd@plt>
    d670:	ldp	x21, x22, [sp, #32]
    d674:	ldp	x23, x24, [sp, #48]
    d678:	b	d5b4 <BZ2_bzBuffToBuffCompress@@Base+0x84>
    d67c:	nop

000000000000d680 <BZ2_bzBuffToBuffDecompress@@Base>:
    d680:	stp	x29, x30, [sp, #-144]!
    d684:	cmp	x0, #0x0
    d688:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    d68c:	mov	x29, sp
    d690:	stp	x19, x20, [sp, #16]
    d694:	b.eq	d7c4 <BZ2_bzBuffToBuffDecompress@@Base+0x144>  // b.none
    d698:	stp	x21, x22, [sp, #32]
    d69c:	mov	x22, x2
    d6a0:	cmp	x22, #0x0
    d6a4:	mov	w2, w4
    d6a8:	ccmp	w4, #0x1, #0x2, ne  // ne = any
    d6ac:	b.hi	d7b8 <BZ2_bzBuffToBuffDecompress@@Base+0x138>  // b.pmore
    d6b0:	mov	x20, x1
    d6b4:	cmp	w5, #0x4
    d6b8:	mov	w1, w5
    d6bc:	b.hi	d7b8 <BZ2_bzBuffToBuffDecompress@@Base+0x138>  // b.pmore
    d6c0:	stp	x23, x24, [sp, #48]
    d6c4:	add	x24, sp, #0x40
    d6c8:	mov	x21, x0
    d6cc:	mov	w23, w3
    d6d0:	mov	x0, x24
    d6d4:	stp	xzr, xzr, [sp, #120]
    d6d8:	str	xzr, [sp, #136]
    d6dc:	bl	14f0 <BZ2_bzDecompressInit@plt>
    d6e0:	mov	w19, w0
    d6e4:	cbz	w0, d700 <BZ2_bzBuffToBuffDecompress@@Base+0x80>
    d6e8:	ldp	x21, x22, [sp, #32]
    d6ec:	ldp	x23, x24, [sp, #48]
    d6f0:	mov	w0, w19
    d6f4:	ldp	x19, x20, [sp, #16]
    d6f8:	ldp	x29, x30, [sp], #144
    d6fc:	ret
    d700:	ldr	w1, [x20]
    d704:	mov	x0, x24
    d708:	str	x22, [sp, #64]
    d70c:	str	w23, [sp, #72]
    d710:	str	x21, [sp, #88]
    d714:	str	w1, [sp, #96]
    d718:	bl	1630 <BZ2_bzDecompress@plt>
    d71c:	mov	w1, w0
    d720:	cbz	w0, d780 <BZ2_bzBuffToBuffDecompress@@Base+0x100>
    d724:	cmp	w0, #0x4
    d728:	b.eq	d750 <BZ2_bzBuffToBuffDecompress@@Base+0xd0>  // b.none
    d72c:	mov	w19, w1
    d730:	mov	x0, x24
    d734:	bl	1500 <BZ2_bzDecompressEnd@plt>
    d738:	mov	w0, w19
    d73c:	ldp	x19, x20, [sp, #16]
    d740:	ldp	x21, x22, [sp, #32]
    d744:	ldp	x23, x24, [sp, #48]
    d748:	ldp	x29, x30, [sp], #144
    d74c:	ret
    d750:	ldr	w1, [x20]
    d754:	mov	x0, x24
    d758:	ldr	w2, [sp, #96]
    d75c:	sub	w1, w1, w2
    d760:	str	w1, [x20]
    d764:	bl	1500 <BZ2_bzDecompressEnd@plt>
    d768:	mov	w0, w19
    d76c:	ldp	x19, x20, [sp, #16]
    d770:	ldp	x21, x22, [sp, #32]
    d774:	ldp	x23, x24, [sp, #48]
    d778:	ldp	x29, x30, [sp], #144
    d77c:	ret
    d780:	ldr	w0, [sp, #96]
    d784:	cbz	w0, d7a0 <BZ2_bzBuffToBuffDecompress@@Base+0x120>
    d788:	mov	x0, x24
    d78c:	mov	w19, #0xfffffff9            	// #-7
    d790:	bl	1500 <BZ2_bzDecompressEnd@plt>
    d794:	ldp	x21, x22, [sp, #32]
    d798:	ldp	x23, x24, [sp, #48]
    d79c:	b	d6f0 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    d7a0:	mov	x0, x24
    d7a4:	mov	w19, #0xfffffff8            	// #-8
    d7a8:	bl	1500 <BZ2_bzDecompressEnd@plt>
    d7ac:	ldp	x21, x22, [sp, #32]
    d7b0:	ldp	x23, x24, [sp, #48]
    d7b4:	b	d6f0 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    d7b8:	mov	w19, #0xfffffffe            	// #-2
    d7bc:	ldp	x21, x22, [sp, #32]
    d7c0:	b	d6f0 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    d7c4:	mov	w19, #0xfffffffe            	// #-2
    d7c8:	b	d6f0 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    d7cc:	nop

000000000000d7d0 <BZ2_bzlibVersion@@Base>:
    d7d0:	adrp	x0, d000 <BZ2_bzReadOpen@@Base+0x270>
    d7d4:	add	x0, x0, #0xdb8
    d7d8:	ret
    d7dc:	nop

000000000000d7e0 <BZ2_bz__AssertH__fail@@Base>:
    d7e0:	stp	x29, x30, [sp, #-48]!
    d7e4:	mov	x29, sp
    d7e8:	stp	x19, x20, [sp, #16]
    d7ec:	adrp	x20, 1f000 <BZ2_bzerror@@Base+0x11650>
    d7f0:	mov	w19, w0
    d7f4:	ldr	x20, [x20, #4016]
    d7f8:	str	x21, [sp, #32]
    d7fc:	ldr	x21, [x20]
    d800:	bl	14b0 <BZ2_bzlibVersion@plt>
    d804:	mov	w2, w19
    d808:	mov	x3, x0
    d80c:	adrp	x1, d000 <BZ2_bzReadOpen@@Base+0x270>
    d810:	mov	x0, x21
    d814:	add	x1, x1, #0xdd0
    d818:	bl	16e0 <fprintf@plt>
    d81c:	cmp	w19, #0x3ef
    d820:	b.eq	d82c <BZ2_bz__AssertH__fail@@Base+0x4c>  // b.none
    d824:	mov	w0, #0x3                   	// #3
    d828:	bl	1490 <exit@plt>
    d82c:	ldr	x3, [x20]
    d830:	adrp	x0, d000 <BZ2_bzReadOpen@@Base+0x270>
    d834:	mov	x2, #0x420                 	// #1056
    d838:	mov	x1, #0x1                   	// #1
    d83c:	add	x0, x0, #0xf70
    d840:	bl	1680 <fwrite@plt>
    d844:	b	d824 <BZ2_bz__AssertH__fail@@Base+0x44>

000000000000d848 <BZ2_bzopen@@Base>:
    d848:	mov	x2, x1
    d84c:	mov	w3, #0x0                   	// #0
    d850:	mov	w1, #0xffffffff            	// #-1
    d854:	b	cf70 <BZ2_bzReadOpen@@Base+0x1e0>

000000000000d858 <BZ2_bzdopen@@Base>:
    d858:	mov	x2, x1
    d85c:	mov	w3, #0x1                   	// #1
    d860:	mov	w1, w0
    d864:	mov	x0, #0x0                   	// #0
    d868:	b	cf70 <BZ2_bzReadOpen@@Base+0x1e0>
    d86c:	nop

000000000000d870 <BZ2_bzread@@Base>:
    d870:	mov	w3, w2
    d874:	ldr	w2, [x0, #5096]
    d878:	cmp	w2, #0x4
    d87c:	b.eq	d8ac <BZ2_bzread@@Base+0x3c>  // b.none
    d880:	stp	x29, x30, [sp, #-32]!
    d884:	mov	x2, x1
    d888:	mov	x1, x0
    d88c:	mov	x29, sp
    d890:	add	x0, sp, #0x1c
    d894:	bl	16c0 <BZ2_bzRead@plt>
    d898:	ldr	w1, [sp, #28]
    d89c:	ldp	x29, x30, [sp], #32
    d8a0:	tst	w1, #0xfffffffb
    d8a4:	csinv	w0, w0, wzr, eq  // eq = none
    d8a8:	ret
    d8ac:	mov	w0, #0x0                   	// #0
    d8b0:	ret
    d8b4:	nop

000000000000d8b8 <BZ2_bzwrite@@Base>:
    d8b8:	stp	x29, x30, [sp, #-48]!
    d8bc:	mov	x29, sp
    d8c0:	str	x19, [sp, #16]
    d8c4:	mov	w19, w2
    d8c8:	mov	w3, w19
    d8cc:	mov	x2, x1
    d8d0:	mov	x1, x0
    d8d4:	add	x0, sp, #0x2c
    d8d8:	bl	15c0 <BZ2_bzWrite@plt>
    d8dc:	ldr	w0, [sp, #44]
    d8e0:	cmp	w0, #0x0
    d8e4:	csinv	w0, w19, wzr, eq  // eq = none
    d8e8:	ldr	x19, [sp, #16]
    d8ec:	ldp	x29, x30, [sp], #48
    d8f0:	ret
    d8f4:	nop

000000000000d8f8 <BZ2_bzflush@@Base>:
    d8f8:	mov	w0, #0x0                   	// #0
    d8fc:	ret

000000000000d900 <BZ2_bzclose@@Base>:
    d900:	cbz	x0, d9a8 <BZ2_bzclose@@Base+0xa8>
    d904:	stp	x29, x30, [sp, #-48]!
    d908:	mov	x29, sp
    d90c:	stp	x19, x20, [sp, #16]
    d910:	mov	x19, x0
    d914:	add	x0, x0, #0x1, lsl #12
    d918:	ldr	x20, [x19]
    d91c:	ldrb	w0, [x0, #916]
    d920:	cbnz	w0, d96c <BZ2_bzclose@@Base+0x6c>
    d924:	mov	x1, x19
    d928:	add	x0, sp, #0x2c
    d92c:	bl	1510 <BZ2_bzReadClose@plt>
    d930:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    d934:	ldr	x0, [x0, #4040]
    d938:	ldr	x0, [x0]
    d93c:	cmp	x0, x20
    d940:	b.eq	d960 <BZ2_bzclose@@Base+0x60>  // b.none
    d944:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x11650>
    d948:	ldr	x0, [x0, #4032]
    d94c:	ldr	x0, [x0]
    d950:	cmp	x0, x20
    d954:	b.eq	d960 <BZ2_bzclose@@Base+0x60>  // b.none
    d958:	mov	x0, x20
    d95c:	bl	14d0 <fclose@plt>
    d960:	ldp	x19, x20, [sp, #16]
    d964:	ldp	x29, x30, [sp], #48
    d968:	ret
    d96c:	add	x0, sp, #0x2c
    d970:	mov	x1, x19
    d974:	mov	x4, #0x0                   	// #0
    d978:	mov	x3, #0x0                   	// #0
    d97c:	mov	w2, #0x0                   	// #0
    d980:	bl	15a0 <BZ2_bzWriteClose@plt>
    d984:	ldr	w0, [sp, #44]
    d988:	cbz	w0, d930 <BZ2_bzclose@@Base+0x30>
    d98c:	mov	x1, x19
    d990:	mov	x4, #0x0                   	// #0
    d994:	mov	x3, #0x0                   	// #0
    d998:	mov	w2, #0x1                   	// #1
    d99c:	mov	x0, #0x0                   	// #0
    d9a0:	bl	15a0 <BZ2_bzWriteClose@plt>
    d9a4:	b	d930 <BZ2_bzclose@@Base+0x30>
    d9a8:	ret
    d9ac:	nop

000000000000d9b0 <BZ2_bzerror@@Base>:
    d9b0:	ldr	w0, [x0, #5096]
    d9b4:	adrp	x2, 1f000 <BZ2_bzerror@@Base+0x11650>
    d9b8:	add	x2, x2, #0xd38
    d9bc:	cmp	w0, #0x0
    d9c0:	csel	w0, w0, wzr, le
    d9c4:	str	w0, [x1]
    d9c8:	neg	w0, w0
    d9cc:	ldr	x0, [x2, w0, sxtw #3]
    d9d0:	ret

Disassembly of section .fini:

000000000000d9d4 <.fini>:
    d9d4:	stp	x29, x30, [sp, #-16]!
    d9d8:	mov	x29, sp
    d9dc:	ldp	x29, x30, [sp], #16
    d9e0:	ret
