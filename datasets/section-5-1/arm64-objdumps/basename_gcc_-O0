
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//basename_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000768 <_init>:
 768:	stp	x29, x30, [sp, #-16]!
 76c:	mov	x29, sp
 770:	bl	820 <call_weak_fn>
 774:	ldp	x29, x30, [sp], #16
 778:	ret

Disassembly of section .plt:

0000000000000780 <.plt>:
 780:	stp	x16, x30, [sp, #-16]!
 784:	adrp	x16, 11000 <__FRAME_END__+0x10240>
 788:	ldr	x17, [x16, #4088]
 78c:	add	x16, x16, #0xff8
 790:	br	x17
 794:	nop
 798:	nop
 79c:	nop

00000000000007a0 <strlen@plt>:
 7a0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 7a4:	ldr	x17, [x16]
 7a8:	add	x16, x16, #0x0
 7ac:	br	x17

00000000000007b0 <__cxa_finalize@plt>:
 7b0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 7b4:	ldr	x17, [x16, #8]
 7b8:	add	x16, x16, #0x8
 7bc:	br	x17

00000000000007c0 <builtin_usage@plt>:
 7c0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 7c4:	ldr	x17, [x16, #16]
 7c8:	add	x16, x16, #0x10
 7cc:	br	x17

00000000000007d0 <__gmon_start__@plt>:
 7d0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 7d4:	ldr	x17, [x16, #24]
 7d8:	add	x16, x16, #0x18
 7dc:	br	x17

00000000000007e0 <puts@plt>:
 7e0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 7e4:	ldr	x17, [x16, #32]
 7e8:	add	x16, x16, #0x20
 7ec:	br	x17

00000000000007f0 <strcmp@plt>:
 7f0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 7f4:	ldr	x17, [x16, #40]
 7f8:	add	x16, x16, #0x28
 7fc:	br	x17

0000000000000800 <no_options@plt>:
 800:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 804:	ldr	x17, [x16, #48]
 808:	add	x16, x16, #0x30
 80c:	br	x17

0000000000000810 <fwrite@plt>:
 810:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 814:	ldr	x17, [x16, #56]
 818:	add	x16, x16, #0x38
 81c:	br	x17

Disassembly of section .text:

0000000000000820 <call_weak_fn>:
 820:	adrp	x0, 11000 <__FRAME_END__+0x10240>
 824:	ldr	x0, [x0, #4048]
 828:	cbz	x0, 830 <call_weak_fn+0x10>
 82c:	b	7d0 <__gmon_start__@plt>
 830:	ret

0000000000000834 <deregister_tm_clones>:
 834:	stp	x29, x30, [sp, #-32]!
 838:	mov	x29, sp
 83c:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 840:	add	x0, x0, #0xa8
 844:	str	x0, [sp, #24]
 848:	ldr	x0, [sp, #24]
 84c:	str	x0, [sp, #24]
 850:	ldr	x1, [sp, #24]
 854:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 858:	add	x0, x0, #0xa8
 85c:	cmp	x1, x0
 860:	b.eq	898 <deregister_tm_clones+0x64>  // b.none
 864:	adrp	x0, 11000 <__FRAME_END__+0x10240>
 868:	ldr	x0, [x0, #4024]
 86c:	str	x0, [sp, #16]
 870:	ldr	x0, [sp, #16]
 874:	str	x0, [sp, #16]
 878:	ldr	x0, [sp, #16]
 87c:	cmp	x0, #0x0
 880:	b.eq	89c <deregister_tm_clones+0x68>  // b.none
 884:	ldr	x1, [sp, #16]
 888:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 88c:	add	x0, x0, #0xa8
 890:	blr	x1
 894:	b	89c <deregister_tm_clones+0x68>
 898:	nop
 89c:	ldp	x29, x30, [sp], #32
 8a0:	ret

00000000000008a4 <register_tm_clones>:
 8a4:	stp	x29, x30, [sp, #-48]!
 8a8:	mov	x29, sp
 8ac:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 8b0:	add	x0, x0, #0xa8
 8b4:	str	x0, [sp, #40]
 8b8:	ldr	x0, [sp, #40]
 8bc:	str	x0, [sp, #40]
 8c0:	ldr	x1, [sp, #40]
 8c4:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 8c8:	add	x0, x0, #0xa8
 8cc:	sub	x0, x1, x0
 8d0:	asr	x0, x0, #3
 8d4:	lsr	x1, x0, #63
 8d8:	add	x0, x1, x0
 8dc:	asr	x0, x0, #1
 8e0:	str	x0, [sp, #32]
 8e4:	ldr	x0, [sp, #32]
 8e8:	cmp	x0, #0x0
 8ec:	b.eq	928 <register_tm_clones+0x84>  // b.none
 8f0:	adrp	x0, 11000 <__FRAME_END__+0x10240>
 8f4:	ldr	x0, [x0, #4064]
 8f8:	str	x0, [sp, #24]
 8fc:	ldr	x0, [sp, #24]
 900:	str	x0, [sp, #24]
 904:	ldr	x0, [sp, #24]
 908:	cmp	x0, #0x0
 90c:	b.eq	92c <register_tm_clones+0x88>  // b.none
 910:	ldr	x2, [sp, #24]
 914:	ldr	x1, [sp, #32]
 918:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 91c:	add	x0, x0, #0xa8
 920:	blr	x2
 924:	b	92c <register_tm_clones+0x88>
 928:	nop
 92c:	ldp	x29, x30, [sp], #48
 930:	ret

0000000000000934 <__do_global_dtors_aux>:
 934:	stp	x29, x30, [sp, #-16]!
 938:	mov	x29, sp
 93c:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 940:	add	x0, x0, #0xa8
 944:	ldrb	w0, [x0]
 948:	and	x0, x0, #0xff
 94c:	cmp	x0, #0x0
 950:	b.ne	98c <__do_global_dtors_aux+0x58>  // b.any
 954:	adrp	x0, 11000 <__FRAME_END__+0x10240>
 958:	ldr	x0, [x0, #4032]
 95c:	cmp	x0, #0x0
 960:	b.eq	974 <__do_global_dtors_aux+0x40>  // b.none
 964:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 968:	add	x0, x0, #0x40
 96c:	ldr	x0, [x0]
 970:	bl	7b0 <__cxa_finalize@plt>
 974:	bl	834 <deregister_tm_clones>
 978:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 97c:	add	x0, x0, #0xa8
 980:	mov	w1, #0x1                   	// #1
 984:	strb	w1, [x0]
 988:	b	990 <__do_global_dtors_aux+0x5c>
 98c:	nop
 990:	ldp	x29, x30, [sp], #16
 994:	ret

0000000000000998 <frame_dummy>:
 998:	stp	x29, x30, [sp, #-16]!
 99c:	mov	x29, sp
 9a0:	bl	8a4 <register_tm_clones>
 9a4:	nop
 9a8:	ldp	x29, x30, [sp], #16
 9ac:	ret

00000000000009b0 <basename_builtin>:
 9b0:	stp	x29, x30, [sp, #-80]!
 9b4:	mov	x29, sp
 9b8:	str	x0, [sp, #24]
 9bc:	ldr	x0, [sp, #24]
 9c0:	cmp	x0, #0x0
 9c4:	b.ne	9d4 <basename_builtin+0x24>  // b.any
 9c8:	bl	7c0 <builtin_usage@plt>
 9cc:	mov	w0, #0x102                 	// #258
 9d0:	b	bb0 <basename_builtin+0x200>
 9d4:	ldr	x0, [sp, #24]
 9d8:	bl	800 <no_options@plt>
 9dc:	cmp	w0, #0x0
 9e0:	b.eq	9ec <basename_builtin+0x3c>  // b.none
 9e4:	mov	w0, #0x102                 	// #258
 9e8:	b	bb0 <basename_builtin+0x200>
 9ec:	adrp	x0, 11000 <__FRAME_END__+0x10240>
 9f0:	ldr	x0, [x0, #4056]
 9f4:	ldr	x0, [x0]
 9f8:	str	x0, [sp, #24]
 9fc:	ldr	x0, [sp, #24]
 a00:	ldr	x0, [x0, #8]
 a04:	ldr	x0, [x0]
 a08:	str	x0, [sp, #56]
 a0c:	str	xzr, [sp, #64]
 a10:	ldr	x0, [sp, #24]
 a14:	ldr	x0, [x0]
 a18:	cmp	x0, #0x0
 a1c:	b.eq	a3c <basename_builtin+0x8c>  // b.none
 a20:	ldr	x0, [sp, #24]
 a24:	ldr	x0, [x0]
 a28:	str	x0, [sp, #24]
 a2c:	ldr	x0, [sp, #24]
 a30:	ldr	x0, [x0, #8]
 a34:	ldr	x0, [x0]
 a38:	str	x0, [sp, #64]
 a3c:	ldr	x0, [sp, #24]
 a40:	ldr	x0, [x0]
 a44:	cmp	x0, #0x0
 a48:	b.eq	a58 <basename_builtin+0xa8>  // b.none
 a4c:	bl	7c0 <builtin_usage@plt>
 a50:	mov	w0, #0x102                 	// #258
 a54:	b	bb0 <basename_builtin+0x200>
 a58:	ldr	x0, [sp, #56]
 a5c:	bl	7a0 <strlen@plt>
 a60:	str	w0, [sp, #76]
 a64:	b	a74 <basename_builtin+0xc4>
 a68:	ldr	w0, [sp, #76]
 a6c:	sub	w0, w0, #0x1
 a70:	str	w0, [sp, #76]
 a74:	ldr	w0, [sp, #76]
 a78:	cmp	w0, #0x0
 a7c:	b.le	a9c <basename_builtin+0xec>
 a80:	ldrsw	x0, [sp, #76]
 a84:	sub	x0, x0, #0x1
 a88:	ldr	x1, [sp, #56]
 a8c:	add	x0, x1, x0
 a90:	ldrb	w0, [x0]
 a94:	cmp	w0, #0x2f
 a98:	b.eq	a68 <basename_builtin+0xb8>  // b.none
 a9c:	ldr	w0, [sp, #76]
 aa0:	cmp	w0, #0x0
 aa4:	b.ne	ad4 <basename_builtin+0x124>  // b.any
 aa8:	adrp	x0, 11000 <__FRAME_END__+0x10240>
 aac:	ldr	x0, [x0, #4040]
 ab0:	ldr	x0, [x0]
 ab4:	mov	x3, x0
 ab8:	mov	x2, #0x2                   	// #2
 abc:	mov	x1, #0x1                   	// #1
 ac0:	adrp	x0, 0 <_init-0x768>
 ac4:	add	x0, x0, #0xbc8
 ac8:	bl	810 <fwrite@plt>
 acc:	mov	w0, #0x0                   	// #0
 ad0:	b	bb0 <basename_builtin+0x200>
 ad4:	ldrsw	x0, [sp, #76]
 ad8:	ldr	x1, [sp, #56]
 adc:	add	x0, x1, x0
 ae0:	strb	wzr, [x0]
 ae4:	b	b00 <basename_builtin+0x150>
 ae8:	ldrsw	x0, [sp, #76]
 aec:	ldr	x1, [sp, #56]
 af0:	add	x0, x1, x0
 af4:	ldrb	w0, [x0]
 af8:	cmp	w0, #0x2f
 afc:	b.eq	b1c <basename_builtin+0x16c>  // b.none
 b00:	ldr	w0, [sp, #76]
 b04:	sub	w0, w0, #0x1
 b08:	str	w0, [sp, #76]
 b0c:	ldr	w0, [sp, #76]
 b10:	cmp	w0, #0x0
 b14:	b.ge	ae8 <basename_builtin+0x138>  // b.tcont
 b18:	b	b20 <basename_builtin+0x170>
 b1c:	nop
 b20:	ldrsw	x0, [sp, #76]
 b24:	add	x0, x0, #0x1
 b28:	ldr	x1, [sp, #56]
 b2c:	add	x0, x1, x0
 b30:	str	x0, [sp, #48]
 b34:	ldr	x0, [sp, #64]
 b38:	cmp	x0, #0x0
 b3c:	b.eq	ba4 <basename_builtin+0x1f4>  // b.none
 b40:	ldr	x0, [sp, #64]
 b44:	bl	7a0 <strlen@plt>
 b48:	str	w0, [sp, #44]
 b4c:	ldr	x0, [sp, #48]
 b50:	bl	7a0 <strlen@plt>
 b54:	str	w0, [sp, #76]
 b58:	ldr	w1, [sp, #44]
 b5c:	ldr	w0, [sp, #76]
 b60:	cmp	w1, w0
 b64:	b.ge	ba4 <basename_builtin+0x1f4>  // b.tcont
 b68:	ldr	w1, [sp, #76]
 b6c:	ldr	w0, [sp, #44]
 b70:	sub	w0, w1, w0
 b74:	str	w0, [sp, #40]
 b78:	ldrsw	x0, [sp, #40]
 b7c:	ldr	x1, [sp, #48]
 b80:	add	x0, x1, x0
 b84:	ldr	x1, [sp, #64]
 b88:	bl	7f0 <strcmp@plt>
 b8c:	cmp	w0, #0x0
 b90:	b.ne	ba4 <basename_builtin+0x1f4>  // b.any
 b94:	ldrsw	x0, [sp, #40]
 b98:	ldr	x1, [sp, #48]
 b9c:	add	x0, x1, x0
 ba0:	strb	wzr, [x0]
 ba4:	ldr	x0, [sp, #48]
 ba8:	bl	7e0 <puts@plt>
 bac:	mov	w0, #0x0                   	// #0
 bb0:	ldp	x29, x30, [sp], #80
 bb4:	ret

Disassembly of section .fini:

0000000000000bb8 <_fini>:
 bb8:	stp	x29, x30, [sp, #-16]!
 bbc:	mov	x29, sp
 bc0:	ldp	x29, x30, [sp], #16
 bc4:	ret
