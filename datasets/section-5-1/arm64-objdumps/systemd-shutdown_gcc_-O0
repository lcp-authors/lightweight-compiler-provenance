
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-shutdown_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

00000000004030b8 <_init>:
  4030b8:	stp	x29, x30, [sp, #-16]!
  4030bc:	mov	x29, sp
  4030c0:	bl	403a20 <call_weak_fn>
  4030c4:	ldp	x29, x30, [sp], #16
  4030c8:	ret

Disassembly of section .plt:

00000000004030d0 <.plt>:
  4030d0:	stp	x16, x30, [sp, #-16]!
  4030d4:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4030d8:	ldr	x17, [x16, #2928]
  4030dc:	add	x16, x16, #0xb70
  4030e0:	br	x17
  4030e4:	nop
  4030e8:	nop
  4030ec:	nop

00000000004030f0 <internal_hashmap_remove@plt>:
  4030f0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4030f4:	ldr	x17, [x16, #2936]
  4030f8:	add	x16, x16, #0xb78
  4030fc:	br	x17

0000000000403100 <safe_fclose@plt>:
  403100:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403104:	ldr	x17, [x16, #2944]
  403108:	add	x16, x16, #0xb80
  40310c:	br	x17

0000000000403110 <kill@plt>:
  403110:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403114:	ldr	x17, [x16, #2952]
  403118:	add	x16, x16, #0xb88
  40311c:	br	x17

0000000000403120 <read_line_full@plt>:
  403120:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403124:	ldr	x17, [x16, #2960]
  403128:	add	x16, x16, #0xb90
  40312c:	br	x17

0000000000403130 <mnt_new_table@plt>:
  403130:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403134:	ldr	x17, [x16, #2968]
  403138:	add	x16, x16, #0xb98
  40313c:	br	x17

0000000000403140 <pid_from_same_root_fs@plt>:
  403140:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403144:	ldr	x17, [x16, #2976]
  403148:	add	x16, x16, #0xba0
  40314c:	br	x17

0000000000403150 <asynchronous_sync@plt>:
  403150:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403154:	ldr	x17, [x16, #2984]
  403158:	add	x16, x16, #0xba8
  40315c:	br	x17

0000000000403160 <watchdog_ping@plt>:
  403160:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403164:	ldr	x17, [x16, #2992]
  403168:	add	x16, x16, #0xbb0
  40316c:	br	x17

0000000000403170 <internal_hashmap_free@plt>:
  403170:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403174:	ldr	x17, [x16, #3000]
  403178:	add	x16, x16, #0xbb8
  40317c:	br	x17

0000000000403180 <__libc_start_main@plt>:
  403180:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403184:	ldr	x17, [x16, #3008]
  403188:	add	x16, x16, #0xbc0
  40318c:	br	x17

0000000000403190 <mnt_fs_get_vfs_options@plt>:
  403190:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403194:	ldr	x17, [x16, #3016]
  403198:	add	x16, x16, #0xbc8
  40319c:	br	x17

00000000004031a0 <sd_device_enumerator_add_match_sysname@plt>:
  4031a0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4031a4:	ldr	x17, [x16, #3024]
  4031a8:	add	x16, x16, #0xbd0
  4031ac:	br	x17

00000000004031b0 <sd_device_enumerator_new@plt>:
  4031b0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4031b4:	ldr	x17, [x16, #3032]
  4031b8:	add	x16, x16, #0xbd8
  4031bc:	br	x17

00000000004031c0 <__gmon_start__@plt>:
  4031c0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4031c4:	ldr	x17, [x16, #3040]
  4031c8:	add	x16, x16, #0xbe0
  4031cc:	br	x17

00000000004031d0 <mnt_table_parse_stream@plt>:
  4031d0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4031d4:	ldr	x17, [x16, #3048]
  4031d8:	add	x16, x16, #0xbe8
  4031dc:	br	x17

00000000004031e0 <sd_device_get_devname@plt>:
  4031e0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4031e4:	ldr	x17, [x16, #3056]
  4031e8:	add	x16, x16, #0xbf0
  4031ec:	br	x17

00000000004031f0 <sd_device_enumerator_add_match_subsystem@plt>:
  4031f0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4031f4:	ldr	x17, [x16, #3064]
  4031f8:	add	x16, x16, #0xbf8
  4031fc:	br	x17

0000000000403200 <log_parse_environment_realm@plt>:
  403200:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403204:	ldr	x17, [x16, #3072]
  403208:	add	x16, x16, #0xc00
  40320c:	br	x17

0000000000403210 <mnt_fs_get_fstype@plt>:
  403210:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403214:	ldr	x17, [x16, #3080]
  403218:	add	x16, x16, #0xc08
  40321c:	br	x17

0000000000403220 <path_startswith_strv@plt>:
  403220:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403224:	ldr	x17, [x16, #3088]
  403228:	add	x16, x16, #0xc10
  40322c:	br	x17

0000000000403230 <path_equal@plt>:
  403230:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403234:	ldr	x17, [x16, #3096]
  403238:	add	x16, x16, #0xc18
  40323c:	br	x17

0000000000403240 <sd_device_enumerator_get_device_first@plt>:
  403240:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403244:	ldr	x17, [x16, #3104]
  403248:	add	x16, x16, #0xc20
  40324c:	br	x17

0000000000403250 <getpid_cached@plt>:
  403250:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403254:	ldr	x17, [x16, #3112]
  403258:	add	x16, x16, #0xc28
  40325c:	br	x17

0000000000403260 <sd_device_enumerator_unref@plt>:
  403260:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403264:	ldr	x17, [x16, #3120]
  403268:	add	x16, x16, #0xc30
  40326c:	br	x17

0000000000403270 <mnt_fs_get_fs_options@plt>:
  403270:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403274:	ldr	x17, [x16, #3128]
  403278:	add	x16, x16, #0xc38
  40327c:	br	x17

0000000000403280 <timespec_store@plt>:
  403280:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403284:	ldr	x17, [x16, #3136]
  403288:	add	x16, x16, #0xc40
  40328c:	br	x17

0000000000403290 <sigtimedwait@plt>:
  403290:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403294:	ldr	x17, [x16, #3144]
  403298:	add	x16, x16, #0xc48
  40329c:	br	x17

00000000004032a0 <fread@plt>:
  4032a0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4032a4:	ldr	x17, [x16, #3152]
  4032a8:	add	x16, x16, #0xc50
  4032ac:	br	x17

00000000004032b0 <get_ctty_devnr@plt>:
  4032b0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4032b4:	ldr	x17, [x16, #3160]
  4032b8:	add	x16, x16, #0xc58
  4032bc:	br	x17

00000000004032c0 <safe_close@plt>:
  4032c0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4032c4:	ldr	x17, [x16, #3168]
  4032c8:	add	x16, x16, #0xc60
  4032cc:	br	x17

00000000004032d0 <log_assert_failed_realm@plt>:
  4032d0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4032d4:	ldr	x17, [x16, #3176]
  4032d8:	add	x16, x16, #0xc68
  4032dc:	br	x17

00000000004032e0 <readdir64@plt>:
  4032e0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4032e4:	ldr	x17, [x16, #3184]
  4032e8:	add	x16, x16, #0xc70
  4032ec:	br	x17

00000000004032f0 <getopt_long@plt>:
  4032f0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4032f4:	ldr	x17, [x16, #3192]
  4032f8:	add	x16, x16, #0xc78
  4032fc:	br	x17

0000000000403300 <fstype_is_network@plt>:
  403300:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403304:	ldr	x17, [x16, #3200]
  403308:	add	x16, x16, #0xc80
  40330c:	br	x17

0000000000403310 <sigaddset@plt>:
  403310:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403314:	ldr	x17, [x16, #3208]
  403318:	add	x16, x16, #0xc88
  40331c:	br	x17

0000000000403320 <_exit@plt>:
  403320:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403324:	ldr	x17, [x16, #3216]
  403328:	add	x16, x16, #0xc90
  40332c:	br	x17

0000000000403330 <reboot_with_parameter@plt>:
  403330:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403334:	ldr	x17, [x16, #3224]
  403338:	add	x16, x16, #0xc98
  40333c:	br	x17

0000000000403340 <log_assert_failed_unreachable_realm@plt>:
  403340:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403344:	ldr	x17, [x16, #3232]
  403348:	add	x16, x16, #0xca0
  40334c:	br	x17

0000000000403350 <disable_coredumps@plt>:
  403350:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403354:	ldr	x17, [x16, #3240]
  403358:	add	x16, x16, #0xca8
  40335c:	br	x17

0000000000403360 <umask@plt>:
  403360:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403364:	ldr	x17, [x16, #3248]
  403368:	add	x16, x16, #0xcb0
  40336c:	br	x17

0000000000403370 <safe_atou8@plt>:
  403370:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403374:	ldr	x17, [x16, #3256]
  403378:	add	x16, x16, #0xcb8
  40337c:	br	x17

0000000000403380 <in_initrd@plt>:
  403380:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403384:	ldr	x17, [x16, #3264]
  403388:	add	x16, x16, #0xcc0
  40338c:	br	x17

0000000000403390 <mnt_fs_get_target@plt>:
  403390:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403394:	ldr	x17, [x16, #3272]
  403398:	add	x16, x16, #0xcc8
  40339c:	br	x17

00000000004033a0 <mnt_free_iter@plt>:
  4033a0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4033a4:	ldr	x17, [x16, #3280]
  4033a8:	add	x16, x16, #0xcd0
  4033ac:	br	x17

00000000004033b0 <setsid@plt>:
  4033b0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4033b4:	ldr	x17, [x16, #3288]
  4033b8:	add	x16, x16, #0xcd8
  4033bc:	br	x17

00000000004033c0 <closedir@plt>:
  4033c0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4033c4:	ldr	x17, [x16, #3296]
  4033c8:	add	x16, x16, #0xce0
  4033cc:	br	x17

00000000004033d0 <__isoc99_sscanf@plt>:
  4033d0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4033d4:	ldr	x17, [x16, #3304]
  4033d8:	add	x16, x16, #0xce8
  4033dc:	br	x17

00000000004033e0 <is_efi_boot@plt>:
  4033e0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4033e4:	ldr	x17, [x16, #3312]
  4033e8:	add	x16, x16, #0xcf0
  4033ec:	br	x17

00000000004033f0 <mnt_new_iter@plt>:
  4033f0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4033f4:	ldr	x17, [x16, #3320]
  4033f8:	add	x16, x16, #0xcf8
  4033fc:	br	x17

0000000000403400 <access@plt>:
  403400:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403404:	ldr	x17, [x16, #3328]
  403408:	add	x16, x16, #0xd00
  40340c:	br	x17

0000000000403410 <sigprocmask_many@plt>:
  403410:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403414:	ldr	x17, [x16, #3336]
  403418:	add	x16, x16, #0xd08
  40341c:	br	x17

0000000000403420 <abort@plt>:
  403420:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403424:	ldr	x17, [x16, #3344]
  403428:	add	x16, x16, #0xd10
  40342c:	br	x17

0000000000403430 <set_iterate@plt>:
  403430:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403434:	ldr	x17, [x16, #3352]
  403438:	add	x16, x16, #0xd18
  40343c:	br	x17

0000000000403440 <mount_option_mangle@plt>:
  403440:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403444:	ldr	x17, [x16, #3360]
  403448:	add	x16, x16, #0xd20
  40344c:	br	x17

0000000000403450 <first_word@plt>:
  403450:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403454:	ldr	x17, [x16, #3368]
  403458:	add	x16, x16, #0xd28
  40345c:	br	x17

0000000000403460 <make_console_stdio@plt>:
  403460:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403464:	ldr	x17, [x16, #3376]
  403468:	add	x16, x16, #0xd30
  40346c:	br	x17

0000000000403470 <fstype_is_ro@plt>:
  403470:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403474:	ldr	x17, [x16, #3384]
  403478:	add	x16, x16, #0xd38
  40347c:	br	x17

0000000000403480 <fstype_is_api_vfs@plt>:
  403480:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403484:	ldr	x17, [x16, #3392]
  403488:	add	x16, x16, #0xd40
  40348c:	br	x17

0000000000403490 <parse_pid@plt>:
  403490:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403494:	ldr	x17, [x16, #3400]
  403498:	add	x16, x16, #0xd48
  40349c:	br	x17

00000000004034a0 <path_startswith@plt>:
  4034a0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4034a4:	ldr	x17, [x16, #3408]
  4034a8:	add	x16, x16, #0xd50
  4034ac:	br	x17

00000000004034b0 <cg_is_unified_wanted@plt>:
  4034b0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4034b4:	ldr	x17, [x16, #3416]
  4034b8:	add	x16, x16, #0xd58
  4034bc:	br	x17

00000000004034c0 <get_process_comm@plt>:
  4034c0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4034c4:	ldr	x17, [x16, #3424]
  4034c8:	add	x16, x16, #0xd60
  4034cc:	br	x17

00000000004034d0 <sysctl_read@plt>:
  4034d0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4034d4:	ldr	x17, [x16, #3432]
  4034d8:	add	x16, x16, #0xd68
  4034dc:	br	x17

00000000004034e0 <__errno_location@plt>:
  4034e0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4034e4:	ldr	x17, [x16, #3440]
  4034e8:	add	x16, x16, #0xd70
  4034ec:	br	x17

00000000004034f0 <log_set_target@plt>:
  4034f0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4034f4:	ldr	x17, [x16, #3448]
  4034f8:	add	x16, x16, #0xd78
  4034fc:	br	x17

0000000000403500 <fstab_filter_options@plt>:
  403500:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403504:	ldr	x17, [x16, #3456]
  403508:	add	x16, x16, #0xd80
  40350c:	br	x17

0000000000403510 <sigprocmask@plt>:
  403510:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403514:	ldr	x17, [x16, #3464]
  403518:	add	x16, x16, #0xd88
  40351c:	br	x17

0000000000403520 <safe_atoi@plt>:
  403520:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403524:	ldr	x17, [x16, #3472]
  403528:	add	x16, x16, #0xd90
  40352c:	br	x17

0000000000403530 <internal_set_new@plt>:
  403530:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403534:	ldr	x17, [x16, #3480]
  403538:	add	x16, x16, #0xd98
  40353c:	br	x17

0000000000403540 <mlockall@plt>:
  403540:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403544:	ldr	x17, [x16, #3488]
  403548:	add	x16, x16, #0xda0
  40354c:	br	x17

0000000000403550 <mnt_free_table@plt>:
  403550:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403554:	ldr	x17, [x16, #3496]
  403558:	add	x16, x16, #0xda8
  40355c:	br	x17

0000000000403560 <log_show_location_from_string@plt>:
  403560:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403564:	ldr	x17, [x16, #3504]
  403568:	add	x16, x16, #0xdb0
  40356c:	br	x17

0000000000403570 <strextend_with_separator@plt>:
  403570:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403574:	ldr	x17, [x16, #3512]
  403578:	add	x16, x16, #0xdb8
  40357c:	br	x17

0000000000403580 <__lxstat64@plt>:
  403580:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403584:	ldr	x17, [x16, #3520]
  403588:	add	x16, x16, #0xdc0
  40358c:	br	x17

0000000000403590 <log_show_color_from_string@plt>:
  403590:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403594:	ldr	x17, [x16, #3528]
  403598:	add	x16, x16, #0xdc8
  40359c:	br	x17

00000000004035a0 <__stack_chk_fail@plt>:
  4035a0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4035a4:	ldr	x17, [x16, #3536]
  4035a8:	add	x16, x16, #0xdd0
  4035ac:	br	x17

00000000004035b0 <log_set_max_level_from_string_realm@plt>:
  4035b0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4035b4:	ldr	x17, [x16, #3544]
  4035b8:	add	x16, x16, #0xdd8
  4035bc:	br	x17

00000000004035c0 <get_process_uid@plt>:
  4035c0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4035c4:	ldr	x17, [x16, #3552]
  4035c8:	add	x16, x16, #0xde0
  4035cc:	br	x17

00000000004035d0 <mnt_fs_get_propagation@plt>:
  4035d0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4035d4:	ldr	x17, [x16, #3560]
  4035d8:	add	x16, x16, #0xde8
  4035dc:	br	x17

00000000004035e0 <log_set_prohibit_ipc@plt>:
  4035e0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4035e4:	ldr	x17, [x16, #3568]
  4035e8:	add	x16, x16, #0xdf0
  4035ec:	br	x17

00000000004035f0 <mnt_table_parse_swaps@plt>:
  4035f0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4035f4:	ldr	x17, [x16, #3576]
  4035f8:	add	x16, x16, #0xdf8
  4035fc:	br	x17

0000000000403600 <log_show_location@plt>:
  403600:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403604:	ldr	x17, [x16, #3584]
  403608:	add	x16, x16, #0xe00
  40360c:	br	x17

0000000000403610 <cg_get_root_path@plt>:
  403610:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403614:	ldr	x17, [x16, #3592]
  403618:	add	x16, x16, #0xe08
  40361c:	br	x17

0000000000403620 <cg_is_legacy_wanted@plt>:
  403620:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403624:	ldr	x17, [x16, #3600]
  403628:	add	x16, x16, #0xe10
  40362c:	br	x17

0000000000403630 <sd_device_enumerator_get_device_next@plt>:
  403630:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403634:	ldr	x17, [x16, #3608]
  403638:	add	x16, x16, #0xe18
  40363c:	br	x17

0000000000403640 <sd_device_get_devnum@plt>:
  403640:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403644:	ldr	x17, [x16, #3616]
  403648:	add	x16, x16, #0xe20
  40364c:	br	x17

0000000000403650 <mac_smack_use@plt>:
  403650:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403654:	ldr	x17, [x16, #3624]
  403658:	add	x16, x16, #0xe28
  40365c:	br	x17

0000000000403660 <cg_trim@plt>:
  403660:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403664:	ldr	x17, [x16, #3632]
  403668:	add	x16, x16, #0xe30
  40366c:	br	x17

0000000000403670 <get_block_device@plt>:
  403670:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403674:	ldr	x17, [x16, #3640]
  403678:	add	x16, x16, #0xe38
  40367c:	br	x17

0000000000403680 <malloc@plt>:
  403680:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403684:	ldr	x17, [x16, #3648]
  403688:	add	x16, x16, #0xe40
  40368c:	br	x17

0000000000403690 <log_set_target_from_string@plt>:
  403690:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403694:	ldr	x17, [x16, #3656]
  403698:	add	x16, x16, #0xe48
  40369c:	br	x17

00000000004036a0 <sigemptyset@plt>:
  4036a0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4036a4:	ldr	x17, [x16, #3664]
  4036a8:	add	x16, x16, #0xe50
  4036ac:	br	x17

00000000004036b0 <rlimit_nofile_safe@plt>:
  4036b0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4036b4:	ldr	x17, [x16, #3672]
  4036b8:	add	x16, x16, #0xe58
  4036bc:	br	x17

00000000004036c0 <internal_hashmap_size@plt>:
  4036c0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4036c4:	ldr	x17, [x16, #3680]
  4036c8:	add	x16, x16, #0xe60
  4036cc:	br	x17

00000000004036d0 <log_internal_realm@plt>:
  4036d0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4036d4:	ldr	x17, [x16, #3688]
  4036d8:	add	x16, x16, #0xe68
  4036dc:	br	x17

00000000004036e0 <waitpid@plt>:
  4036e0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4036e4:	ldr	x17, [x16, #3696]
  4036e8:	add	x16, x16, #0xe70
  4036ec:	br	x17

00000000004036f0 <ioctl@plt>:
  4036f0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4036f4:	ldr	x17, [x16, #3704]
  4036f8:	add	x16, x16, #0xe78
  4036fc:	br	x17

0000000000403700 <gnu_dev_major@plt>:
  403700:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403704:	ldr	x17, [x16, #3712]
  403708:	add	x16, x16, #0xe80
  40370c:	br	x17

0000000000403710 <log_get_target@plt>:
  403710:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403714:	ldr	x17, [x16, #3720]
  403718:	add	x16, x16, #0xe88
  40371c:	br	x17

0000000000403720 <now@plt>:
  403720:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403724:	ldr	x17, [x16, #3728]
  403728:	add	x16, x16, #0xe90
  40372c:	br	x17

0000000000403730 <detect_container@plt>:
  403730:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403734:	ldr	x17, [x16, #3736]
  403738:	add	x16, x16, #0xe98
  40373c:	br	x17

0000000000403740 <is_kernel_thread@plt>:
  403740:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403744:	ldr	x17, [x16, #3744]
  403748:	add	x16, x16, #0xea0
  40374c:	br	x17

0000000000403750 <umount2@plt>:
  403750:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403754:	ldr	x17, [x16, #3752]
  403758:	add	x16, x16, #0xea8
  40375c:	br	x17

0000000000403760 <log_show_color@plt>:
  403760:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403764:	ldr	x17, [x16, #3760]
  403768:	add	x16, x16, #0xeb0
  40376c:	br	x17

0000000000403770 <log_emergency_level@plt>:
  403770:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403774:	ldr	x17, [x16, #3768]
  403778:	add	x16, x16, #0xeb8
  40377c:	br	x17

0000000000403780 <strcmp@plt>:
  403780:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403784:	ldr	x17, [x16, #3776]
  403788:	add	x16, x16, #0xec0
  40378c:	br	x17

0000000000403790 <extract_first_word@plt>:
  403790:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403794:	ldr	x17, [x16, #3784]
  403798:	add	x16, x16, #0xec8
  40379c:	br	x17

00000000004037a0 <swapoff@plt>:
  4037a0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4037a4:	ldr	x17, [x16, #3792]
  4037a8:	add	x16, x16, #0xed0
  4037ac:	br	x17

00000000004037b0 <opendir@plt>:
  4037b0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4037b4:	ldr	x17, [x16, #3800]
  4037b8:	add	x16, x16, #0xed8
  4037bc:	br	x17

00000000004037c0 <mnt_table_parse_file@plt>:
  4037c0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4037c4:	ldr	x17, [x16, #3808]
  4037c8:	add	x16, x16, #0xee0
  4037cc:	br	x17

00000000004037d0 <strdup@plt>:
  4037d0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4037d4:	ldr	x17, [x16, #3816]
  4037d8:	add	x16, x16, #0xee8
  4037dc:	br	x17

00000000004037e0 <calloc@plt>:
  4037e0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4037e4:	ldr	x17, [x16, #3824]
  4037e8:	add	x16, x16, #0xef0
  4037ec:	br	x17

00000000004037f0 <getenv@plt>:
  4037f0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4037f4:	ldr	x17, [x16, #3832]
  4037f8:	add	x16, x16, #0xef8
  4037fc:	br	x17

0000000000403800 <execv@plt>:
  403800:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403804:	ldr	x17, [x16, #3840]
  403808:	add	x16, x16, #0xf00
  40380c:	br	x17

0000000000403810 <safe_fork_full@plt>:
  403810:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403814:	ldr	x17, [x16, #3848]
  403818:	add	x16, x16, #0xf08
  40381c:	br	x17

0000000000403820 <mnt_fs_get_source@plt>:
  403820:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403824:	ldr	x17, [x16, #3856]
  403828:	add	x16, x16, #0xf10
  40382c:	br	x17

0000000000403830 <mnt_table_next_fs@plt>:
  403830:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403834:	ldr	x17, [x16, #3864]
  403838:	add	x16, x16, #0xf18
  40383c:	br	x17

0000000000403840 <freeze@plt>:
  403840:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403844:	ldr	x17, [x16, #3872]
  403848:	add	x16, x16, #0xf20
  40384c:	br	x17

0000000000403850 <asprintf@plt>:
  403850:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403854:	ldr	x17, [x16, #3880]
  403858:	add	x16, x16, #0xf28
  40385c:	br	x17

0000000000403860 <parse_sec@plt>:
  403860:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403864:	ldr	x17, [x16, #3888]
  403868:	add	x16, x16, #0xf30
  40386c:	br	x17

0000000000403870 <sysctl_writef@plt>:
  403870:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403874:	ldr	x17, [x16, #3896]
  403878:	add	x16, x16, #0xf38
  40387c:	br	x17

0000000000403880 <reboot@plt>:
  403880:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403884:	ldr	x17, [x16, #3904]
  403888:	add	x16, x16, #0xf40
  40388c:	br	x17

0000000000403890 <mount@plt>:
  403890:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403894:	ldr	x17, [x16, #3912]
  403898:	add	x16, x16, #0xf48
  40389c:	br	x17

00000000004038a0 <free@plt>:
  4038a0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4038a4:	ldr	x17, [x16, #3920]
  4038a8:	add	x16, x16, #0xf50
  4038ac:	br	x17

00000000004038b0 <gnu_dev_minor@plt>:
  4038b0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4038b4:	ldr	x17, [x16, #3928]
  4038b8:	add	x16, x16, #0xf58
  4038bc:	br	x17

00000000004038c0 <cg_is_hybrid_wanted@plt>:
  4038c0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4038c4:	ldr	x17, [x16, #3936]
  4038c8:	add	x16, x16, #0xf60
  4038cc:	br	x17

00000000004038d0 <mnt_table_parse_mtab@plt>:
  4038d0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4038d4:	ldr	x17, [x16, #3944]
  4038d8:	add	x16, x16, #0xf68
  4038dc:	br	x17

00000000004038e0 <sprintf@plt>:
  4038e0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4038e4:	ldr	x17, [x16, #3952]
  4038e8:	add	x16, x16, #0xf70
  4038ec:	br	x17

00000000004038f0 <wait_for_terminate_with_timeout@plt>:
  4038f0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4038f4:	ldr	x17, [x16, #3960]
  4038f8:	add	x16, x16, #0xf78
  4038fc:	br	x17

0000000000403900 <open64@plt>:
  403900:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403904:	ldr	x17, [x16, #3968]
  403908:	add	x16, x16, #0xf80
  40390c:	br	x17

0000000000403910 <execute_directories@plt>:
  403910:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403914:	ldr	x17, [x16, #3976]
  403918:	add	x16, x16, #0xf88
  40391c:	br	x17

0000000000403920 <set_put@plt>:
  403920:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403924:	ldr	x17, [x16, #3984]
  403928:	add	x16, x16, #0xf90
  40392c:	br	x17

0000000000403930 <strlen@plt>:
  403930:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403934:	ldr	x17, [x16, #3992]
  403938:	add	x16, x16, #0xf98
  40393c:	br	x17

0000000000403940 <fopen64@plt>:
  403940:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403944:	ldr	x17, [x16, #4000]
  403948:	add	x16, x16, #0xfa0
  40394c:	br	x17

0000000000403950 <watchdog_set_device@plt>:
  403950:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403954:	ldr	x17, [x16, #4008]
  403958:	add	x16, x16, #0xfa8
  40395c:	br	x17

0000000000403960 <log_open@plt>:
  403960:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403964:	ldr	x17, [x16, #4016]
  403968:	add	x16, x16, #0xfb0
  40396c:	br	x17

0000000000403970 <log_oom_internal@plt>:
  403970:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403974:	ldr	x17, [x16, #4024]
  403978:	add	x16, x16, #0xfb8
  40397c:	br	x17

0000000000403980 <memset@plt>:
  403980:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403984:	ldr	x17, [x16, #4032]
  403988:	add	x16, x16, #0xfc0
  40398c:	br	x17

0000000000403990 <sd_device_enumerator_add_match_sysattr@plt>:
  403990:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  403994:	ldr	x17, [x16, #4040]
  403998:	add	x16, x16, #0xfc8
  40399c:	br	x17

00000000004039a0 <sd_device_enumerator_allow_uninitialized@plt>:
  4039a0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4039a4:	ldr	x17, [x16, #4048]
  4039a8:	add	x16, x16, #0xfd0
  4039ac:	br	x17

00000000004039b0 <switch_root@plt>:
  4039b0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4039b4:	ldr	x17, [x16, #4056]
  4039b8:	add	x16, x16, #0xfd8
  4039bc:	br	x17

00000000004039c0 <log_get_max_level_realm@plt>:
  4039c0:	adrp	x16, 41e000 <__FRAME_END__+0xfd84>
  4039c4:	ldr	x17, [x16, #4064]
  4039c8:	add	x16, x16, #0xfe0
  4039cc:	br	x17

Disassembly of section .text:

00000000004039d0 <_start>:
  4039d0:	mov	x29, #0x0                   	// #0
  4039d4:	mov	x30, #0x0                   	// #0
  4039d8:	mov	x5, x0
  4039dc:	ldr	x1, [sp]
  4039e0:	add	x2, sp, #0x8
  4039e4:	mov	x6, sp
  4039e8:	movz	x0, #0x0, lsl #48
  4039ec:	movk	x0, #0x0, lsl #32
  4039f0:	movk	x0, #0x40, lsl #16
  4039f4:	movk	x0, #0x5188
  4039f8:	movz	x3, #0x0, lsl #48
  4039fc:	movk	x3, #0x0, lsl #32
  403a00:	movk	x3, #0x40, lsl #16
  403a04:	movk	x3, #0xb438
  403a08:	movz	x4, #0x0, lsl #48
  403a0c:	movk	x4, #0x0, lsl #32
  403a10:	movk	x4, #0x40, lsl #16
  403a14:	movk	x4, #0xb4b8
  403a18:	bl	403180 <__libc_start_main@plt>
  403a1c:	bl	403420 <abort@plt>

0000000000403a20 <call_weak_fn>:
  403a20:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  403a24:	ldr	x0, [x0, #4080]
  403a28:	cbz	x0, 403a30 <call_weak_fn+0x10>
  403a2c:	b	4031c0 <__gmon_start__@plt>
  403a30:	ret

0000000000403a34 <deregister_tm_clones>:
  403a34:	stp	x29, x30, [sp, #-32]!
  403a38:	mov	x29, sp
  403a3c:	adrp	x0, 41f000 <arg_timeout>
  403a40:	add	x0, x0, #0x8
  403a44:	str	x0, [sp, #24]
  403a48:	ldr	x0, [sp, #24]
  403a4c:	str	x0, [sp, #24]
  403a50:	ldr	x1, [sp, #24]
  403a54:	adrp	x0, 41f000 <arg_timeout>
  403a58:	add	x0, x0, #0x8
  403a5c:	cmp	x1, x0
  403a60:	b.eq	403a9c <deregister_tm_clones+0x68>  // b.none
  403a64:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403a68:	add	x0, x0, #0x4e0
  403a6c:	ldr	x0, [x0]
  403a70:	str	x0, [sp, #16]
  403a74:	ldr	x0, [sp, #16]
  403a78:	str	x0, [sp, #16]
  403a7c:	ldr	x0, [sp, #16]
  403a80:	cmp	x0, #0x0
  403a84:	b.eq	403aa0 <deregister_tm_clones+0x6c>  // b.none
  403a88:	ldr	x1, [sp, #16]
  403a8c:	adrp	x0, 41f000 <arg_timeout>
  403a90:	add	x0, x0, #0x8
  403a94:	blr	x1
  403a98:	b	403aa0 <deregister_tm_clones+0x6c>
  403a9c:	nop
  403aa0:	ldp	x29, x30, [sp], #32
  403aa4:	ret

0000000000403aa8 <register_tm_clones>:
  403aa8:	stp	x29, x30, [sp, #-48]!
  403aac:	mov	x29, sp
  403ab0:	adrp	x0, 41f000 <arg_timeout>
  403ab4:	add	x0, x0, #0x8
  403ab8:	str	x0, [sp, #40]
  403abc:	ldr	x0, [sp, #40]
  403ac0:	str	x0, [sp, #40]
  403ac4:	ldr	x1, [sp, #40]
  403ac8:	adrp	x0, 41f000 <arg_timeout>
  403acc:	add	x0, x0, #0x8
  403ad0:	sub	x0, x1, x0
  403ad4:	asr	x0, x0, #3
  403ad8:	lsr	x1, x0, #63
  403adc:	add	x0, x1, x0
  403ae0:	asr	x0, x0, #1
  403ae4:	str	x0, [sp, #32]
  403ae8:	ldr	x0, [sp, #32]
  403aec:	cmp	x0, #0x0
  403af0:	b.eq	403b30 <register_tm_clones+0x88>  // b.none
  403af4:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403af8:	add	x0, x0, #0x4e8
  403afc:	ldr	x0, [x0]
  403b00:	str	x0, [sp, #24]
  403b04:	ldr	x0, [sp, #24]
  403b08:	str	x0, [sp, #24]
  403b0c:	ldr	x0, [sp, #24]
  403b10:	cmp	x0, #0x0
  403b14:	b.eq	403b34 <register_tm_clones+0x8c>  // b.none
  403b18:	ldr	x2, [sp, #24]
  403b1c:	ldr	x1, [sp, #32]
  403b20:	adrp	x0, 41f000 <arg_timeout>
  403b24:	add	x0, x0, #0x8
  403b28:	blr	x2
  403b2c:	b	403b34 <register_tm_clones+0x8c>
  403b30:	nop
  403b34:	ldp	x29, x30, [sp], #48
  403b38:	ret

0000000000403b3c <__do_global_dtors_aux>:
  403b3c:	stp	x29, x30, [sp, #-16]!
  403b40:	mov	x29, sp
  403b44:	adrp	x0, 41f000 <arg_timeout>
  403b48:	add	x0, x0, #0x10
  403b4c:	ldrb	w0, [x0]
  403b50:	and	x0, x0, #0xff
  403b54:	cmp	x0, #0x0
  403b58:	b.ne	403b74 <__do_global_dtors_aux+0x38>  // b.any
  403b5c:	bl	403a34 <deregister_tm_clones>
  403b60:	adrp	x0, 41f000 <arg_timeout>
  403b64:	add	x0, x0, #0x10
  403b68:	mov	w1, #0x1                   	// #1
  403b6c:	strb	w1, [x0]
  403b70:	b	403b78 <__do_global_dtors_aux+0x3c>
  403b74:	nop
  403b78:	ldp	x29, x30, [sp], #16
  403b7c:	ret

0000000000403b80 <frame_dummy>:
  403b80:	stp	x29, x30, [sp, #-16]!
  403b84:	mov	x29, sp
  403b88:	bl	403aa8 <register_tm_clones>
  403b8c:	nop
  403b90:	ldp	x29, x30, [sp], #16
  403b94:	ret

0000000000403b98 <freep>:
  403b98:	stp	x29, x30, [sp, #-32]!
  403b9c:	mov	x29, sp
  403ba0:	str	x0, [sp, #24]
  403ba4:	ldr	x0, [sp, #24]
  403ba8:	ldr	x0, [x0]
  403bac:	bl	4038a0 <free@plt>
  403bb0:	nop
  403bb4:	ldp	x29, x30, [sp], #32
  403bb8:	ret

0000000000403bbc <fclosep>:
  403bbc:	stp	x29, x30, [sp, #-32]!
  403bc0:	mov	x29, sp
  403bc4:	str	x0, [sp, #24]
  403bc8:	ldr	x0, [sp, #24]
  403bcc:	ldr	x0, [x0]
  403bd0:	bl	403100 <safe_fclose@plt>
  403bd4:	nop
  403bd8:	ldp	x29, x30, [sp], #32
  403bdc:	ret

0000000000403be0 <read_line>:
  403be0:	stp	x29, x30, [sp, #-48]!
  403be4:	mov	x29, sp
  403be8:	str	x0, [sp, #40]
  403bec:	str	x1, [sp, #32]
  403bf0:	str	x2, [sp, #24]
  403bf4:	ldr	x3, [sp, #24]
  403bf8:	mov	w2, #0x0                   	// #0
  403bfc:	ldr	x1, [sp, #32]
  403c00:	ldr	x0, [sp, #40]
  403c04:	bl	403120 <read_line_full@plt>
  403c08:	ldp	x29, x30, [sp], #48
  403c0c:	ret

0000000000403c10 <safe_fork>:
  403c10:	stp	x29, x30, [sp, #-48]!
  403c14:	mov	x29, sp
  403c18:	str	x0, [sp, #40]
  403c1c:	str	w1, [sp, #36]
  403c20:	str	x2, [sp, #24]
  403c24:	ldr	x4, [sp, #24]
  403c28:	ldr	w3, [sp, #36]
  403c2c:	mov	x2, #0x0                   	// #0
  403c30:	mov	x1, #0x0                   	// #0
  403c34:	ldr	x0, [sp, #40]
  403c38:	bl	403810 <safe_fork_full@plt>
  403c3c:	ldp	x29, x30, [sp], #48
  403c40:	ret

0000000000403c44 <block_signals_reset>:
  403c44:	stp	x29, x30, [sp, #-32]!
  403c48:	mov	x29, sp
  403c4c:	str	x0, [sp, #24]
  403c50:	mov	x2, #0x0                   	// #0
  403c54:	ldr	x1, [sp, #24]
  403c58:	mov	w0, #0x2                   	// #2
  403c5c:	bl	403510 <sigprocmask@plt>
  403c60:	lsr	w0, w0, #31
  403c64:	and	w0, w0, #0xff
  403c68:	and	x0, x0, #0xff
  403c6c:	cmp	x0, #0x0
  403c70:	b.eq	403c9c <block_signals_reset+0x58>  // b.none
  403c74:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403c78:	add	x1, x0, #0x50b
  403c7c:	adrp	x0, 40c000 <_fini+0xb30>
  403c80:	add	x4, x0, #0x240
  403c84:	mov	w3, #0x18                  	// #24
  403c88:	mov	x2, x1
  403c8c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403c90:	add	x1, x0, #0x528
  403c94:	mov	w0, #0x0                   	// #0
  403c98:	bl	4032d0 <log_assert_failed_realm@plt>
  403c9c:	nop
  403ca0:	ldp	x29, x30, [sp], #32
  403ca4:	ret

0000000000403ca8 <watchdog_free_device>:
  403ca8:	stp	x29, x30, [sp, #-16]!
  403cac:	mov	x29, sp
  403cb0:	mov	x0, #0x0                   	// #0
  403cb4:	bl	403950 <watchdog_set_device@plt>
  403cb8:	nop
  403cbc:	ldp	x29, x30, [sp], #16
  403cc0:	ret

0000000000403cc4 <parse_argv>:
  403cc4:	stp	x29, x30, [sp, #-144]!
  403cc8:	mov	x29, sp
  403ccc:	str	w0, [sp, #28]
  403cd0:	str	x1, [sp, #16]
  403cd4:	ldr	w0, [sp, #28]
  403cd8:	cmp	w0, #0x0
  403cdc:	cset	w0, le
  403ce0:	and	w0, w0, #0xff
  403ce4:	and	x0, x0, #0xff
  403ce8:	cmp	x0, #0x0
  403cec:	b.eq	403d18 <parse_argv+0x54>  // b.none
  403cf0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403cf4:	add	x1, x0, #0x553
  403cf8:	adrp	x0, 40c000 <_fini+0xb30>
  403cfc:	add	x4, x0, #0xe0
  403d00:	mov	w3, #0x46                  	// #70
  403d04:	mov	x2, x1
  403d08:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403d0c:	add	x1, x0, #0x570
  403d10:	mov	w0, #0x0                   	// #0
  403d14:	bl	4032d0 <log_assert_failed_realm@plt>
  403d18:	ldr	x0, [sp, #16]
  403d1c:	cmp	x0, #0x0
  403d20:	cset	w0, eq  // eq = none
  403d24:	and	w0, w0, #0xff
  403d28:	and	x0, x0, #0xff
  403d2c:	cmp	x0, #0x0
  403d30:	b.eq	404348 <parse_argv+0x684>  // b.none
  403d34:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403d38:	add	x1, x0, #0x553
  403d3c:	adrp	x0, 40c000 <_fini+0xb30>
  403d40:	add	x4, x0, #0xe0
  403d44:	mov	w3, #0x47                  	// #71
  403d48:	mov	x2, x1
  403d4c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403d50:	add	x1, x0, #0x580
  403d54:	mov	w0, #0x0                   	// #0
  403d58:	bl	4032d0 <log_assert_failed_realm@plt>
  403d5c:	ldr	w0, [sp, #40]
  403d60:	cmp	w0, #0x105
  403d64:	b.eq	4041b8 <parse_argv+0x4f4>  // b.none
  403d68:	ldr	w0, [sp, #40]
  403d6c:	cmp	w0, #0x105
  403d70:	b.gt	404320 <parse_argv+0x65c>
  403d74:	ldr	w0, [sp, #40]
  403d78:	cmp	w0, #0x104
  403d7c:	b.eq	404100 <parse_argv+0x43c>  // b.none
  403d80:	ldr	w0, [sp, #40]
  403d84:	cmp	w0, #0x104
  403d88:	b.gt	404320 <parse_argv+0x65c>
  403d8c:	ldr	w0, [sp, #40]
  403d90:	cmp	w0, #0x103
  403d94:	b.eq	404034 <parse_argv+0x370>  // b.none
  403d98:	ldr	w0, [sp, #40]
  403d9c:	cmp	w0, #0x103
  403da0:	b.gt	404320 <parse_argv+0x65c>
  403da4:	ldr	w0, [sp, #40]
  403da8:	cmp	w0, #0x102
  403dac:	b.eq	403f68 <parse_argv+0x2a4>  // b.none
  403db0:	ldr	w0, [sp, #40]
  403db4:	cmp	w0, #0x102
  403db8:	b.gt	404320 <parse_argv+0x65c>
  403dbc:	ldr	w0, [sp, #40]
  403dc0:	cmp	w0, #0x101
  403dc4:	b.eq	403ebc <parse_argv+0x1f8>  // b.none
  403dc8:	ldr	w0, [sp, #40]
  403dcc:	cmp	w0, #0x101
  403dd0:	b.gt	404320 <parse_argv+0x65c>
  403dd4:	ldr	w0, [sp, #40]
  403dd8:	cmp	w0, #0x100
  403ddc:	b.eq	403e08 <parse_argv+0x144>  // b.none
  403de0:	ldr	w0, [sp, #40]
  403de4:	cmp	w0, #0x100
  403de8:	b.gt	404320 <parse_argv+0x65c>
  403dec:	ldr	w0, [sp, #40]
  403df0:	cmp	w0, #0x1
  403df4:	b.eq	404270 <parse_argv+0x5ac>  // b.none
  403df8:	ldr	w0, [sp, #40]
  403dfc:	cmp	w0, #0x3f
  403e00:	b.eq	404318 <parse_argv+0x654>  // b.none
  403e04:	b	404320 <parse_argv+0x65c>
  403e08:	adrp	x0, 41f000 <arg_timeout>
  403e0c:	add	x0, x0, #0x8
  403e10:	ldr	x0, [x0]
  403e14:	mov	x1, x0
  403e18:	mov	w0, #0x0                   	// #0
  403e1c:	bl	4035b0 <log_set_max_level_from_string_realm@plt>
  403e20:	str	w0, [sp, #56]
  403e24:	ldr	w0, [sp, #56]
  403e28:	cmp	w0, #0x0
  403e2c:	b.ge	404348 <parse_argv+0x684>  // b.tcont
  403e30:	mov	w0, #0x3                   	// #3
  403e34:	str	w0, [sp, #120]
  403e38:	ldr	w0, [sp, #56]
  403e3c:	str	w0, [sp, #124]
  403e40:	str	wzr, [sp, #128]
  403e44:	ldr	w0, [sp, #128]
  403e48:	bl	4039c0 <log_get_max_level_realm@plt>
  403e4c:	mov	w1, w0
  403e50:	ldr	w0, [sp, #120]
  403e54:	and	w0, w0, #0x7
  403e58:	cmp	w1, w0
  403e5c:	b.lt	403eb0 <parse_argv+0x1ec>  // b.tstop
  403e60:	ldr	w0, [sp, #128]
  403e64:	lsl	w1, w0, #10
  403e68:	ldr	w0, [sp, #120]
  403e6c:	orr	w7, w1, w0
  403e70:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403e74:	add	x1, x0, #0x553
  403e78:	adrp	x0, 41f000 <arg_timeout>
  403e7c:	add	x0, x0, #0x8
  403e80:	ldr	x0, [x0]
  403e84:	mov	x6, x0
  403e88:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403e8c:	add	x5, x0, #0x588
  403e90:	adrp	x0, 40c000 <_fini+0xb30>
  403e94:	add	x4, x0, #0xf0
  403e98:	mov	w3, #0x51                  	// #81
  403e9c:	mov	x2, x1
  403ea0:	ldr	w1, [sp, #124]
  403ea4:	mov	w0, w7
  403ea8:	bl	4036d0 <log_internal_realm@plt>
  403eac:	b	404348 <parse_argv+0x684>
  403eb0:	ldr	w0, [sp, #124]
  403eb4:	cmp	w0, #0x0
  403eb8:	b	404348 <parse_argv+0x684>
  403ebc:	adrp	x0, 41f000 <arg_timeout>
  403ec0:	add	x0, x0, #0x8
  403ec4:	ldr	x0, [x0]
  403ec8:	bl	403690 <log_set_target_from_string@plt>
  403ecc:	str	w0, [sp, #56]
  403ed0:	ldr	w0, [sp, #56]
  403ed4:	cmp	w0, #0x0
  403ed8:	b.ge	404348 <parse_argv+0x684>  // b.tcont
  403edc:	mov	w0, #0x3                   	// #3
  403ee0:	str	w0, [sp, #108]
  403ee4:	ldr	w0, [sp, #56]
  403ee8:	str	w0, [sp, #112]
  403eec:	str	wzr, [sp, #116]
  403ef0:	ldr	w0, [sp, #116]
  403ef4:	bl	4039c0 <log_get_max_level_realm@plt>
  403ef8:	mov	w1, w0
  403efc:	ldr	w0, [sp, #108]
  403f00:	and	w0, w0, #0x7
  403f04:	cmp	w1, w0
  403f08:	b.lt	403f5c <parse_argv+0x298>  // b.tstop
  403f0c:	ldr	w0, [sp, #116]
  403f10:	lsl	w1, w0, #10
  403f14:	ldr	w0, [sp, #108]
  403f18:	orr	w7, w1, w0
  403f1c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403f20:	add	x1, x0, #0x553
  403f24:	adrp	x0, 41f000 <arg_timeout>
  403f28:	add	x0, x0, #0x8
  403f2c:	ldr	x0, [x0]
  403f30:	mov	x6, x0
  403f34:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403f38:	add	x5, x0, #0x5b8
  403f3c:	adrp	x0, 40c000 <_fini+0xb30>
  403f40:	add	x4, x0, #0xf0
  403f44:	mov	w3, #0x58                  	// #88
  403f48:	mov	x2, x1
  403f4c:	ldr	w1, [sp, #112]
  403f50:	mov	w0, w7
  403f54:	bl	4036d0 <log_internal_realm@plt>
  403f58:	b	404348 <parse_argv+0x684>
  403f5c:	ldr	w0, [sp, #112]
  403f60:	cmp	w0, #0x0
  403f64:	b	404348 <parse_argv+0x684>
  403f68:	adrp	x0, 41f000 <arg_timeout>
  403f6c:	add	x0, x0, #0x8
  403f70:	ldr	x0, [x0]
  403f74:	cmp	x0, #0x0
  403f78:	b.eq	404028 <parse_argv+0x364>  // b.none
  403f7c:	adrp	x0, 41f000 <arg_timeout>
  403f80:	add	x0, x0, #0x8
  403f84:	ldr	x0, [x0]
  403f88:	bl	403590 <log_show_color_from_string@plt>
  403f8c:	str	w0, [sp, #56]
  403f90:	ldr	w0, [sp, #56]
  403f94:	cmp	w0, #0x0
  403f98:	b.ge	404348 <parse_argv+0x684>  // b.tcont
  403f9c:	mov	w0, #0x3                   	// #3
  403fa0:	str	w0, [sp, #96]
  403fa4:	ldr	w0, [sp, #56]
  403fa8:	str	w0, [sp, #100]
  403fac:	str	wzr, [sp, #104]
  403fb0:	ldr	w0, [sp, #104]
  403fb4:	bl	4039c0 <log_get_max_level_realm@plt>
  403fb8:	mov	w1, w0
  403fbc:	ldr	w0, [sp, #96]
  403fc0:	and	w0, w0, #0x7
  403fc4:	cmp	w1, w0
  403fc8:	b.lt	40401c <parse_argv+0x358>  // b.tstop
  403fcc:	ldr	w0, [sp, #104]
  403fd0:	lsl	w1, w0, #10
  403fd4:	ldr	w0, [sp, #96]
  403fd8:	orr	w7, w1, w0
  403fdc:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403fe0:	add	x1, x0, #0x553
  403fe4:	adrp	x0, 41f000 <arg_timeout>
  403fe8:	add	x0, x0, #0x8
  403fec:	ldr	x0, [x0]
  403ff0:	mov	x6, x0
  403ff4:	adrp	x0, 40b000 <broadcast_signal+0x30>
  403ff8:	add	x5, x0, #0x5e8
  403ffc:	adrp	x0, 40c000 <_fini+0xb30>
  404000:	add	x4, x0, #0xf0
  404004:	mov	w3, #0x61                  	// #97
  404008:	mov	x2, x1
  40400c:	ldr	w1, [sp, #100]
  404010:	mov	w0, w7
  404014:	bl	4036d0 <log_internal_realm@plt>
  404018:	b	404030 <parse_argv+0x36c>
  40401c:	ldr	w0, [sp, #100]
  404020:	cmp	w0, #0x0
  404024:	b	404348 <parse_argv+0x684>
  404028:	mov	w0, #0x1                   	// #1
  40402c:	bl	403760 <log_show_color@plt>
  404030:	b	404348 <parse_argv+0x684>
  404034:	adrp	x0, 41f000 <arg_timeout>
  404038:	add	x0, x0, #0x8
  40403c:	ldr	x0, [x0]
  404040:	cmp	x0, #0x0
  404044:	b.eq	4040f4 <parse_argv+0x430>  // b.none
  404048:	adrp	x0, 41f000 <arg_timeout>
  40404c:	add	x0, x0, #0x8
  404050:	ldr	x0, [x0]
  404054:	bl	403560 <log_show_location_from_string@plt>
  404058:	str	w0, [sp, #56]
  40405c:	ldr	w0, [sp, #56]
  404060:	cmp	w0, #0x0
  404064:	b.ge	404348 <parse_argv+0x684>  // b.tcont
  404068:	mov	w0, #0x3                   	// #3
  40406c:	str	w0, [sp, #84]
  404070:	ldr	w0, [sp, #56]
  404074:	str	w0, [sp, #88]
  404078:	str	wzr, [sp, #92]
  40407c:	ldr	w0, [sp, #92]
  404080:	bl	4039c0 <log_get_max_level_realm@plt>
  404084:	mov	w1, w0
  404088:	ldr	w0, [sp, #84]
  40408c:	and	w0, w0, #0x7
  404090:	cmp	w1, w0
  404094:	b.lt	4040e8 <parse_argv+0x424>  // b.tstop
  404098:	ldr	w0, [sp, #92]
  40409c:	lsl	w1, w0, #10
  4040a0:	ldr	w0, [sp, #84]
  4040a4:	orr	w7, w1, w0
  4040a8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4040ac:	add	x1, x0, #0x553
  4040b0:	adrp	x0, 41f000 <arg_timeout>
  4040b4:	add	x0, x0, #0x8
  4040b8:	ldr	x0, [x0]
  4040bc:	mov	x6, x0
  4040c0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4040c4:	add	x5, x0, #0x620
  4040c8:	adrp	x0, 40c000 <_fini+0xb30>
  4040cc:	add	x4, x0, #0xf0
  4040d0:	mov	w3, #0x6b                  	// #107
  4040d4:	mov	x2, x1
  4040d8:	ldr	w1, [sp, #88]
  4040dc:	mov	w0, w7
  4040e0:	bl	4036d0 <log_internal_realm@plt>
  4040e4:	b	4040fc <parse_argv+0x438>
  4040e8:	ldr	w0, [sp, #88]
  4040ec:	cmp	w0, #0x0
  4040f0:	b	404348 <parse_argv+0x684>
  4040f4:	mov	w0, #0x1                   	// #1
  4040f8:	bl	403600 <log_show_location@plt>
  4040fc:	b	404348 <parse_argv+0x684>
  404100:	adrp	x0, 41f000 <arg_timeout>
  404104:	add	x0, x0, #0x8
  404108:	ldr	x2, [x0]
  40410c:	adrp	x0, 41f000 <arg_timeout>
  404110:	add	x1, x0, #0x20
  404114:	mov	x0, x2
  404118:	bl	403370 <safe_atou8@plt>
  40411c:	str	w0, [sp, #56]
  404120:	ldr	w0, [sp, #56]
  404124:	cmp	w0, #0x0
  404128:	b.ge	404348 <parse_argv+0x684>  // b.tcont
  40412c:	mov	w0, #0x3                   	// #3
  404130:	str	w0, [sp, #72]
  404134:	ldr	w0, [sp, #56]
  404138:	str	w0, [sp, #76]
  40413c:	str	wzr, [sp, #80]
  404140:	ldr	w0, [sp, #80]
  404144:	bl	4039c0 <log_get_max_level_realm@plt>
  404148:	mov	w1, w0
  40414c:	ldr	w0, [sp, #72]
  404150:	and	w0, w0, #0x7
  404154:	cmp	w1, w0
  404158:	b.lt	4041ac <parse_argv+0x4e8>  // b.tstop
  40415c:	ldr	w0, [sp, #80]
  404160:	lsl	w1, w0, #10
  404164:	ldr	w0, [sp, #72]
  404168:	orr	w7, w1, w0
  40416c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404170:	add	x1, x0, #0x553
  404174:	adrp	x0, 41f000 <arg_timeout>
  404178:	add	x0, x0, #0x8
  40417c:	ldr	x0, [x0]
  404180:	mov	x6, x0
  404184:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404188:	add	x5, x0, #0x658
  40418c:	adrp	x0, 40c000 <_fini+0xb30>
  404190:	add	x4, x0, #0xf0
  404194:	mov	w3, #0x74                  	// #116
  404198:	mov	x2, x1
  40419c:	ldr	w1, [sp, #76]
  4041a0:	mov	w0, w7
  4041a4:	bl	4036d0 <log_internal_realm@plt>
  4041a8:	b	404348 <parse_argv+0x684>
  4041ac:	ldr	w0, [sp, #76]
  4041b0:	cmp	w0, #0x0
  4041b4:	b	404348 <parse_argv+0x684>
  4041b8:	adrp	x0, 41f000 <arg_timeout>
  4041bc:	add	x0, x0, #0x8
  4041c0:	ldr	x2, [x0]
  4041c4:	adrp	x0, 41f000 <arg_timeout>
  4041c8:	add	x1, x0, #0x0
  4041cc:	mov	x0, x2
  4041d0:	bl	403860 <parse_sec@plt>
  4041d4:	str	w0, [sp, #56]
  4041d8:	ldr	w0, [sp, #56]
  4041dc:	cmp	w0, #0x0
  4041e0:	b.ge	404348 <parse_argv+0x684>  // b.tcont
  4041e4:	mov	w0, #0x3                   	// #3
  4041e8:	str	w0, [sp, #60]
  4041ec:	ldr	w0, [sp, #56]
  4041f0:	str	w0, [sp, #64]
  4041f4:	str	wzr, [sp, #68]
  4041f8:	ldr	w0, [sp, #68]
  4041fc:	bl	4039c0 <log_get_max_level_realm@plt>
  404200:	mov	w1, w0
  404204:	ldr	w0, [sp, #60]
  404208:	and	w0, w0, #0x7
  40420c:	cmp	w1, w0
  404210:	b.lt	404264 <parse_argv+0x5a0>  // b.tstop
  404214:	ldr	w0, [sp, #68]
  404218:	lsl	w1, w0, #10
  40421c:	ldr	w0, [sp, #60]
  404220:	orr	w7, w1, w0
  404224:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404228:	add	x1, x0, #0x553
  40422c:	adrp	x0, 41f000 <arg_timeout>
  404230:	add	x0, x0, #0x8
  404234:	ldr	x0, [x0]
  404238:	mov	x6, x0
  40423c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404240:	add	x5, x0, #0x688
  404244:	adrp	x0, 40c000 <_fini+0xb30>
  404248:	add	x4, x0, #0xf0
  40424c:	mov	w3, #0x7b                  	// #123
  404250:	mov	x2, x1
  404254:	ldr	w1, [sp, #64]
  404258:	mov	w0, w7
  40425c:	bl	4036d0 <log_internal_realm@plt>
  404260:	b	404348 <parse_argv+0x684>
  404264:	ldr	w0, [sp, #64]
  404268:	cmp	w0, #0x0
  40426c:	b	404348 <parse_argv+0x684>
  404270:	adrp	x0, 41f000 <arg_timeout>
  404274:	add	x0, x0, #0x18
  404278:	ldr	x0, [x0]
  40427c:	cmp	x0, #0x0
  404280:	b.ne	4042a0 <parse_argv+0x5dc>  // b.any
  404284:	adrp	x0, 41f000 <arg_timeout>
  404288:	add	x0, x0, #0x8
  40428c:	ldr	x1, [x0]
  404290:	adrp	x0, 41f000 <arg_timeout>
  404294:	add	x0, x0, #0x18
  404298:	str	x1, [x0]
  40429c:	b	404348 <parse_argv+0x684>
  4042a0:	mov	w0, #0x3                   	// #3
  4042a4:	str	w0, [sp, #132]
  4042a8:	str	wzr, [sp, #136]
  4042ac:	str	wzr, [sp, #140]
  4042b0:	ldr	w0, [sp, #140]
  4042b4:	bl	4039c0 <log_get_max_level_realm@plt>
  4042b8:	mov	w1, w0
  4042bc:	ldr	w0, [sp, #132]
  4042c0:	and	w0, w0, #0x7
  4042c4:	cmp	w1, w0
  4042c8:	b.lt	40430c <parse_argv+0x648>  // b.tstop
  4042cc:	ldr	w0, [sp, #140]
  4042d0:	lsl	w1, w0, #10
  4042d4:	ldr	w0, [sp, #132]
  4042d8:	orr	w6, w1, w0
  4042dc:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4042e0:	add	x1, x0, #0x553
  4042e4:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4042e8:	add	x5, x0, #0x6c0
  4042ec:	adrp	x0, 40c000 <_fini+0xb30>
  4042f0:	add	x4, x0, #0xf0
  4042f4:	mov	w3, #0x83                  	// #131
  4042f8:	mov	x2, x1
  4042fc:	ldr	w1, [sp, #136]
  404300:	mov	w0, w6
  404304:	bl	4036d0 <log_internal_realm@plt>
  404308:	b	404348 <parse_argv+0x684>
  40430c:	ldr	w0, [sp, #136]
  404310:	cmp	w0, #0x0
  404314:	b	404348 <parse_argv+0x684>
  404318:	mov	w0, #0xffffffea            	// #-22
  40431c:	b	40441c <parse_argv+0x758>
  404320:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404324:	add	x1, x0, #0x553
  404328:	adrp	x0, 40c000 <_fini+0xb30>
  40432c:	add	x4, x0, #0xe0
  404330:	mov	w3, #0x8a                  	// #138
  404334:	mov	x2, x1
  404338:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40433c:	add	x1, x0, #0x6e0
  404340:	mov	w0, #0x0                   	// #0
  404344:	bl	403340 <log_assert_failed_unreachable_realm@plt>
  404348:	mov	x4, #0x0                   	// #0
  40434c:	adrp	x0, 40c000 <_fini+0xb30>
  404350:	add	x3, x0, #0x100
  404354:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404358:	add	x2, x0, #0x6f8
  40435c:	ldr	x1, [sp, #16]
  404360:	ldr	w0, [sp, #28]
  404364:	bl	4032f0 <getopt_long@plt>
  404368:	str	w0, [sp, #40]
  40436c:	ldr	w0, [sp, #40]
  404370:	cmp	w0, #0x0
  404374:	b.ge	403d5c <parse_argv+0x98>  // b.tcont
  404378:	adrp	x0, 41f000 <arg_timeout>
  40437c:	add	x0, x0, #0x18
  404380:	ldr	x0, [x0]
  404384:	cmp	x0, #0x0
  404388:	b.ne	404418 <parse_argv+0x754>  // b.any
  40438c:	mov	w0, #0x3                   	// #3
  404390:	str	w0, [sp, #44]
  404394:	mov	w0, #0x16                  	// #22
  404398:	movk	w0, #0x4000, lsl #16
  40439c:	str	w0, [sp, #48]
  4043a0:	str	wzr, [sp, #52]
  4043a4:	ldr	w0, [sp, #52]
  4043a8:	bl	4039c0 <log_get_max_level_realm@plt>
  4043ac:	mov	w1, w0
  4043b0:	ldr	w0, [sp, #44]
  4043b4:	and	w0, w0, #0x7
  4043b8:	cmp	w1, w0
  4043bc:	b.lt	404400 <parse_argv+0x73c>  // b.tstop
  4043c0:	ldr	w0, [sp, #52]
  4043c4:	lsl	w1, w0, #10
  4043c8:	ldr	w0, [sp, #44]
  4043cc:	orr	w6, w1, w0
  4043d0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4043d4:	add	x1, x0, #0x553
  4043d8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4043dc:	add	x5, x0, #0x700
  4043e0:	adrp	x0, 40c000 <_fini+0xb30>
  4043e4:	add	x4, x0, #0xf0
  4043e8:	mov	w3, #0x8e                  	// #142
  4043ec:	mov	x2, x1
  4043f0:	ldr	w1, [sp, #48]
  4043f4:	mov	w0, w6
  4043f8:	bl	4036d0 <log_internal_realm@plt>
  4043fc:	b	40441c <parse_argv+0x758>
  404400:	ldr	w0, [sp, #48]
  404404:	cmp	w0, #0x0
  404408:	cneg	w0, w0, lt  // lt = tstop
  40440c:	and	w0, w0, #0xff
  404410:	neg	w0, w0
  404414:	b	40441c <parse_argv+0x758>
  404418:	mov	w0, #0x0                   	// #0
  40441c:	ldp	x29, x30, [sp], #144
  404420:	ret

0000000000404424 <switch_root_initramfs>:
  404424:	stp	x29, x30, [sp, #-48]!
  404428:	mov	x29, sp
  40442c:	mov	x4, #0x0                   	// #0
  404430:	mov	x3, #0x1000                	// #4096
  404434:	mov	x2, #0x0                   	// #0
  404438:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40443c:	add	x1, x0, #0x718
  404440:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404444:	add	x0, x0, #0x718
  404448:	bl	403890 <mount@plt>
  40444c:	cmp	w0, #0x0
  404450:	b.ge	4044e0 <switch_root_initramfs+0xbc>  // b.tcont
  404454:	mov	w0, #0x3                   	// #3
  404458:	str	w0, [sp, #36]
  40445c:	bl	4034e0 <__errno_location@plt>
  404460:	ldr	w0, [x0]
  404464:	str	w0, [sp, #40]
  404468:	str	wzr, [sp, #44]
  40446c:	ldr	w0, [sp, #44]
  404470:	bl	4039c0 <log_get_max_level_realm@plt>
  404474:	mov	w1, w0
  404478:	ldr	w0, [sp, #36]
  40447c:	and	w0, w0, #0x7
  404480:	cmp	w1, w0
  404484:	b.lt	4044c8 <switch_root_initramfs+0xa4>  // b.tstop
  404488:	ldr	w0, [sp, #44]
  40448c:	lsl	w1, w0, #10
  404490:	ldr	w0, [sp, #36]
  404494:	orr	w6, w1, w0
  404498:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40449c:	add	x1, x0, #0x553
  4044a0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4044a4:	add	x5, x0, #0x728
  4044a8:	adrp	x0, 40c000 <_fini+0xb30>
  4044ac:	add	x4, x0, #0x1e0
  4044b0:	mov	w3, #0x96                  	// #150
  4044b4:	mov	x2, x1
  4044b8:	ldr	w1, [sp, #40]
  4044bc:	mov	w0, w6
  4044c0:	bl	4036d0 <log_internal_realm@plt>
  4044c4:	b	4045ac <switch_root_initramfs+0x188>
  4044c8:	ldr	w0, [sp, #40]
  4044cc:	cmp	w0, #0x0
  4044d0:	cneg	w0, w0, lt  // lt = tstop
  4044d4:	and	w0, w0, #0xff
  4044d8:	neg	w0, w0
  4044dc:	b	4045ac <switch_root_initramfs+0x188>
  4044e0:	mov	x4, #0x0                   	// #0
  4044e4:	mov	x3, #0x40000               	// #262144
  4044e8:	mov	x2, #0x0                   	// #0
  4044ec:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4044f0:	add	x1, x0, #0x718
  4044f4:	mov	x0, #0x0                   	// #0
  4044f8:	bl	403890 <mount@plt>
  4044fc:	cmp	w0, #0x0
  404500:	b.ge	404590 <switch_root_initramfs+0x16c>  // b.tcont
  404504:	mov	w0, #0x3                   	// #3
  404508:	str	w0, [sp, #24]
  40450c:	bl	4034e0 <__errno_location@plt>
  404510:	ldr	w0, [x0]
  404514:	str	w0, [sp, #28]
  404518:	str	wzr, [sp, #32]
  40451c:	ldr	w0, [sp, #32]
  404520:	bl	4039c0 <log_get_max_level_realm@plt>
  404524:	mov	w1, w0
  404528:	ldr	w0, [sp, #24]
  40452c:	and	w0, w0, #0x7
  404530:	cmp	w1, w0
  404534:	b.lt	404578 <switch_root_initramfs+0x154>  // b.tstop
  404538:	ldr	w0, [sp, #32]
  40453c:	lsl	w1, w0, #10
  404540:	ldr	w0, [sp, #24]
  404544:	orr	w6, w1, w0
  404548:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40454c:	add	x1, x0, #0x553
  404550:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404554:	add	x5, x0, #0x768
  404558:	adrp	x0, 40c000 <_fini+0xb30>
  40455c:	add	x4, x0, #0x1e0
  404560:	mov	w3, #0x99                  	// #153
  404564:	mov	x2, x1
  404568:	ldr	w1, [sp, #28]
  40456c:	mov	w0, w6
  404570:	bl	4036d0 <log_internal_realm@plt>
  404574:	b	4045ac <switch_root_initramfs+0x188>
  404578:	ldr	w0, [sp, #28]
  40457c:	cmp	w0, #0x0
  404580:	cneg	w0, w0, lt  // lt = tstop
  404584:	and	w0, w0, #0xff
  404588:	neg	w0, w0
  40458c:	b	4045ac <switch_root_initramfs+0x188>
  404590:	mov	x3, #0x1000                	// #4096
  404594:	mov	w2, #0x0                   	// #0
  404598:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40459c:	add	x1, x0, #0x798
  4045a0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4045a4:	add	x0, x0, #0x718
  4045a8:	bl	4039b0 <switch_root@plt>
  4045ac:	ldp	x29, x30, [sp], #48
  4045b0:	ret

00000000004045b4 <sync_making_progress>:
  4045b4:	stp	x29, x30, [sp, #-144]!
  4045b8:	mov	x29, sp
  4045bc:	stp	x19, x20, [sp, #16]
  4045c0:	str	x0, [sp, #40]
  4045c4:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  4045c8:	add	x0, x0, #0x4b8
  4045cc:	ldr	x1, [x0]
  4045d0:	str	x1, [sp, #136]
  4045d4:	mov	x1, #0x0                   	// #0
  4045d8:	str	xzr, [sp, #104]
  4045dc:	str	xzr, [sp, #128]
  4045e0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4045e4:	add	x1, x0, #0x7a8
  4045e8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4045ec:	add	x0, x0, #0x7b0
  4045f0:	bl	403940 <fopen64@plt>
  4045f4:	str	x0, [sp, #104]
  4045f8:	ldr	x0, [sp, #104]
  4045fc:	cmp	x0, #0x0
  404600:	b.ne	404694 <sync_making_progress+0xe0>  // b.any
  404604:	mov	w0, #0x4                   	// #4
  404608:	str	w0, [sp, #92]
  40460c:	bl	4034e0 <__errno_location@plt>
  404610:	ldr	w0, [x0]
  404614:	str	w0, [sp, #96]
  404618:	str	wzr, [sp, #100]
  40461c:	ldr	w0, [sp, #100]
  404620:	bl	4039c0 <log_get_max_level_realm@plt>
  404624:	mov	w1, w0
  404628:	ldr	w0, [sp, #92]
  40462c:	and	w0, w0, #0x7
  404630:	cmp	w1, w0
  404634:	b.lt	40467c <sync_making_progress+0xc8>  // b.tstop
  404638:	ldr	w0, [sp, #100]
  40463c:	lsl	w1, w0, #10
  404640:	ldr	w0, [sp, #92]
  404644:	orr	w6, w1, w0
  404648:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40464c:	add	x1, x0, #0x553
  404650:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404654:	add	x5, x0, #0x7c0
  404658:	adrp	x0, 40c000 <_fini+0xb30>
  40465c:	add	x4, x0, #0x1f8
  404660:	mov	w3, #0xb3                  	// #179
  404664:	mov	x2, x1
  404668:	ldr	w1, [sp, #96]
  40466c:	mov	w0, w6
  404670:	bl	4036d0 <log_internal_realm@plt>
  404674:	mov	w20, w0
  404678:	b	40496c <sync_making_progress+0x3b8>
  40467c:	ldr	w0, [sp, #96]
  404680:	cmp	w0, #0x0
  404684:	cneg	w0, w0, lt  // lt = tstop
  404688:	and	w0, w0, #0xff
  40468c:	neg	w20, w0
  404690:	b	40496c <sync_making_progress+0x3b8>
  404694:	str	xzr, [sp, #112]
  404698:	str	xzr, [sp, #120]
  40469c:	ldr	x0, [sp, #104]
  4046a0:	add	x1, sp, #0x70
  4046a4:	mov	x2, x1
  4046a8:	mov	x1, #0x100000              	// #1048576
  4046ac:	bl	403be0 <read_line>
  4046b0:	str	w0, [sp, #48]
  4046b4:	ldr	w0, [sp, #48]
  4046b8:	cmp	w0, #0x0
  4046bc:	b.ge	404750 <sync_making_progress+0x19c>  // b.tcont
  4046c0:	mov	w0, #0x4                   	// #4
  4046c4:	str	w0, [sp, #76]
  4046c8:	ldr	w0, [sp, #48]
  4046cc:	str	w0, [sp, #80]
  4046d0:	str	wzr, [sp, #84]
  4046d4:	ldr	w0, [sp, #84]
  4046d8:	bl	4039c0 <log_get_max_level_realm@plt>
  4046dc:	mov	w1, w0
  4046e0:	ldr	w0, [sp, #76]
  4046e4:	and	w0, w0, #0x7
  4046e8:	cmp	w1, w0
  4046ec:	b.lt	404734 <sync_making_progress+0x180>  // b.tstop
  4046f0:	ldr	w0, [sp, #84]
  4046f4:	lsl	w1, w0, #10
  4046f8:	ldr	w0, [sp, #76]
  4046fc:	orr	w6, w1, w0
  404700:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404704:	add	x1, x0, #0x553
  404708:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40470c:	add	x5, x0, #0x7e8
  404710:	adrp	x0, 40c000 <_fini+0xb30>
  404714:	add	x4, x0, #0x1f8
  404718:	mov	w3, #0xbc                  	// #188
  40471c:	mov	x2, x1
  404720:	ldr	w1, [sp, #80]
  404724:	mov	w0, w6
  404728:	bl	4036d0 <log_internal_realm@plt>
  40472c:	mov	w20, w0
  404730:	b	404748 <sync_making_progress+0x194>
  404734:	ldr	w0, [sp, #80]
  404738:	cmp	w0, #0x0
  40473c:	cneg	w0, w0, lt  // lt = tstop
  404740:	and	w0, w0, #0xff
  404744:	neg	w20, w0
  404748:	mov	w19, #0x0                   	// #0
  40474c:	b	404910 <sync_making_progress+0x35c>
  404750:	ldr	w0, [sp, #48]
  404754:	cmp	w0, #0x0
  404758:	b.ne	404764 <sync_making_progress+0x1b0>  // b.any
  40475c:	mov	w19, #0x1                   	// #1
  404760:	b	404910 <sync_making_progress+0x35c>
  404764:	ldr	x2, [sp, #112]
  404768:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40476c:	add	x1, x0, #0x810
  404770:	mov	x0, x2
  404774:	bl	403450 <first_word@plt>
  404778:	cmp	x0, #0x0
  40477c:	b.ne	4047c0 <sync_making_progress+0x20c>  // b.any
  404780:	ldr	x2, [sp, #112]
  404784:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404788:	add	x1, x0, #0x820
  40478c:	mov	x0, x2
  404790:	bl	403450 <first_word@plt>
  404794:	cmp	x0, #0x0
  404798:	b.ne	4047c0 <sync_making_progress+0x20c>  // b.any
  40479c:	ldr	x2, [sp, #112]
  4047a0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4047a4:	add	x1, x0, #0x830
  4047a8:	mov	x0, x2
  4047ac:	bl	403450 <first_word@plt>
  4047b0:	cmp	x0, #0x0
  4047b4:	b.ne	4047c0 <sync_making_progress+0x20c>  // b.any
  4047b8:	mov	w19, #0x2                   	// #2
  4047bc:	b	404910 <sync_making_progress+0x35c>
  4047c0:	bl	4034e0 <__errno_location@plt>
  4047c4:	str	wzr, [x0]
  4047c8:	ldr	x3, [sp, #112]
  4047cc:	add	x0, sp, #0x78
  4047d0:	mov	x2, x0
  4047d4:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4047d8:	add	x1, x0, #0x838
  4047dc:	mov	x0, x3
  4047e0:	bl	4033d0 <__isoc99_sscanf@plt>
  4047e4:	cmp	w0, #0x1
  4047e8:	b.eq	4048fc <sync_making_progress+0x348>  // b.none
  4047ec:	bl	4034e0 <__errno_location@plt>
  4047f0:	ldr	w0, [x0]
  4047f4:	cmp	w0, #0x0
  4047f8:	b.eq	40487c <sync_making_progress+0x2c8>  // b.none
  4047fc:	mov	w0, #0x4                   	// #4
  404800:	str	w0, [sp, #64]
  404804:	bl	4034e0 <__errno_location@plt>
  404808:	ldr	w0, [x0]
  40480c:	str	w0, [sp, #68]
  404810:	str	wzr, [sp, #72]
  404814:	ldr	w0, [sp, #72]
  404818:	bl	4039c0 <log_get_max_level_realm@plt>
  40481c:	mov	w1, w0
  404820:	ldr	w0, [sp, #64]
  404824:	and	w0, w0, #0x7
  404828:	cmp	w1, w0
  40482c:	b.lt	404870 <sync_making_progress+0x2bc>  // b.tstop
  404830:	ldr	w0, [sp, #72]
  404834:	lsl	w1, w0, #10
  404838:	ldr	w0, [sp, #64]
  40483c:	orr	w6, w1, w0
  404840:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404844:	add	x1, x0, #0x553
  404848:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40484c:	add	x5, x0, #0x7e8
  404850:	adrp	x0, 40c000 <_fini+0xb30>
  404854:	add	x4, x0, #0x1f8
  404858:	mov	w3, #0xc6                  	// #198
  40485c:	mov	x2, x1
  404860:	ldr	w1, [sp, #68]
  404864:	mov	w0, w6
  404868:	bl	4036d0 <log_internal_realm@plt>
  40486c:	b	4048f0 <sync_making_progress+0x33c>
  404870:	ldr	w0, [sp, #68]
  404874:	cmp	w0, #0x0
  404878:	b	4048f0 <sync_making_progress+0x33c>
  40487c:	mov	w0, #0x4                   	// #4
  404880:	str	w0, [sp, #52]
  404884:	str	wzr, [sp, #56]
  404888:	str	wzr, [sp, #60]
  40488c:	ldr	w0, [sp, #60]
  404890:	bl	4039c0 <log_get_max_level_realm@plt>
  404894:	mov	w1, w0
  404898:	ldr	w0, [sp, #52]
  40489c:	and	w0, w0, #0x7
  4048a0:	cmp	w1, w0
  4048a4:	b.lt	4048e8 <sync_making_progress+0x334>  // b.tstop
  4048a8:	ldr	w0, [sp, #60]
  4048ac:	lsl	w1, w0, #10
  4048b0:	ldr	w0, [sp, #52]
  4048b4:	orr	w6, w1, w0
  4048b8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4048bc:	add	x1, x0, #0x553
  4048c0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4048c4:	add	x5, x0, #0x848
  4048c8:	adrp	x0, 40c000 <_fini+0xb30>
  4048cc:	add	x4, x0, #0x1f8
  4048d0:	mov	w3, #0xc8                  	// #200
  4048d4:	mov	x2, x1
  4048d8:	ldr	w1, [sp, #56]
  4048dc:	mov	w0, w6
  4048e0:	bl	4036d0 <log_internal_realm@plt>
  4048e4:	b	4048f0 <sync_making_progress+0x33c>
  4048e8:	ldr	w0, [sp, #56]
  4048ec:	cmp	w0, #0x0
  4048f0:	mov	w20, #0x0                   	// #0
  4048f4:	mov	w19, #0x0                   	// #0
  4048f8:	b	404910 <sync_making_progress+0x35c>
  4048fc:	ldr	x0, [sp, #120]
  404900:	ldr	x1, [sp, #128]
  404904:	add	x0, x1, x0
  404908:	str	x0, [sp, #128]
  40490c:	mov	w19, #0x3                   	// #3
  404910:	add	x0, sp, #0x70
  404914:	bl	403b98 <freep>
  404918:	cmp	w19, #0x3
  40491c:	b.eq	404968 <sync_making_progress+0x3b4>  // b.none
  404920:	cmp	w19, #0x3
  404924:	b.gt	404694 <sync_making_progress+0xe0>
  404928:	cmp	w19, #0x0
  40492c:	b.eq	40496c <sync_making_progress+0x3b8>  // b.none
  404930:	cmp	w19, #0x1
  404934:	b.ne	404968 <sync_making_progress+0x3b4>  // b.any
  404938:	ldr	x0, [sp, #40]
  40493c:	ldr	x0, [x0]
  404940:	ldr	x1, [sp, #128]
  404944:	cmp	x1, x0
  404948:	cset	w0, cc  // cc = lo, ul, last
  40494c:	and	w0, w0, #0xff
  404950:	str	w0, [sp, #88]
  404954:	ldr	x0, [sp, #40]
  404958:	ldr	x1, [sp, #128]
  40495c:	str	x1, [x0]
  404960:	ldr	w20, [sp, #88]
  404964:	b	40496c <sync_making_progress+0x3b8>
  404968:	b	404694 <sync_making_progress+0xe0>
  40496c:	add	x0, sp, #0x68
  404970:	bl	403bbc <fclosep>
  404974:	mov	w1, w20
  404978:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  40497c:	add	x0, x0, #0x4b8
  404980:	ldr	x2, [sp, #136]
  404984:	ldr	x0, [x0]
  404988:	eor	x0, x2, x0
  40498c:	cmp	x0, #0x0
  404990:	b.eq	404998 <sync_making_progress+0x3e4>  // b.none
  404994:	bl	4035a0 <__stack_chk_fail@plt>
  404998:	mov	w0, w1
  40499c:	ldp	x19, x20, [sp, #16]
  4049a0:	ldp	x29, x30, [sp], #144
  4049a4:	ret

00000000004049a8 <sync_with_progress>:
  4049a8:	stp	x29, x30, [sp, #-368]!
  4049ac:	mov	x29, sp
  4049b0:	str	x19, [sp, #16]
  4049b4:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  4049b8:	add	x0, x0, #0x4b8
  4049bc:	ldr	x1, [x0]
  4049c0:	str	x1, [sp, #360]
  4049c4:	mov	x1, #0x0                   	// #0
  4049c8:	mov	x0, #0xffffffffffffffff    	// #-1
  4049cc:	str	x0, [sp, #96]
  4049d0:	add	x0, sp, #0x68
  4049d4:	mov	w3, #0xffffffff            	// #-1
  4049d8:	mov	w2, #0x11                  	// #17
  4049dc:	mov	x1, x0
  4049e0:	mov	w0, #0x0                   	// #0
  4049e4:	bl	403410 <sigprocmask_many@plt>
  4049e8:	lsr	w0, w0, #31
  4049ec:	and	w0, w0, #0xff
  4049f0:	and	x0, x0, #0xff
  4049f4:	cmp	x0, #0x0
  4049f8:	b.eq	404a24 <sync_with_progress+0x7c>  // b.none
  4049fc:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404a00:	add	x1, x0, #0x553
  404a04:	adrp	x0, 40c000 <_fini+0xb30>
  404a08:	add	x4, x0, #0x210
  404a0c:	mov	w3, #0xdb                  	// #219
  404a10:	mov	x2, x1
  404a14:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404a18:	add	x1, x0, #0x868
  404a1c:	mov	w0, #0x0                   	// #0
  404a20:	bl	4032d0 <log_assert_failed_realm@plt>
  404a24:	add	x0, sp, #0xe8
  404a28:	add	x1, sp, #0x68
  404a2c:	ldp	x2, x3, [x1]
  404a30:	stp	x2, x3, [x0]
  404a34:	ldp	x2, x3, [x1, #16]
  404a38:	stp	x2, x3, [x0, #16]
  404a3c:	ldp	x2, x3, [x1, #32]
  404a40:	stp	x2, x3, [x0, #32]
  404a44:	ldp	x2, x3, [x1, #48]
  404a48:	stp	x2, x3, [x0, #48]
  404a4c:	ldp	x2, x3, [x1, #64]
  404a50:	stp	x2, x3, [x0, #64]
  404a54:	ldp	x2, x3, [x1, #80]
  404a58:	stp	x2, x3, [x0, #80]
  404a5c:	ldp	x2, x3, [x1, #96]
  404a60:	stp	x2, x3, [x0, #96]
  404a64:	ldp	x2, x3, [x1, #112]
  404a68:	stp	x2, x3, [x0, #112]
  404a6c:	add	x0, sp, #0x68
  404a70:	add	x1, sp, #0xe8
  404a74:	ldp	x2, x3, [x1]
  404a78:	stp	x2, x3, [x0]
  404a7c:	ldp	x2, x3, [x1, #16]
  404a80:	stp	x2, x3, [x0, #16]
  404a84:	ldp	x2, x3, [x1, #32]
  404a88:	stp	x2, x3, [x0, #32]
  404a8c:	ldp	x2, x3, [x1, #48]
  404a90:	stp	x2, x3, [x0, #48]
  404a94:	ldp	x2, x3, [x1, #64]
  404a98:	stp	x2, x3, [x0, #64]
  404a9c:	ldp	x2, x3, [x1, #80]
  404aa0:	stp	x2, x3, [x0, #80]
  404aa4:	ldp	x2, x3, [x1, #96]
  404aa8:	stp	x2, x3, [x0, #96]
  404aac:	ldp	x2, x3, [x1, #112]
  404ab0:	stp	x2, x3, [x0, #112]
  404ab4:	add	x0, sp, #0x24
  404ab8:	bl	403150 <asynchronous_sync@plt>
  404abc:	str	w0, [sp, #44]
  404ac0:	ldr	w0, [sp, #44]
  404ac4:	cmp	w0, #0x0
  404ac8:	b.ge	404b4c <sync_with_progress+0x1a4>  // b.tcont
  404acc:	mov	w0, #0x3                   	// #3
  404ad0:	str	w0, [sp, #84]
  404ad4:	ldr	w0, [sp, #44]
  404ad8:	str	w0, [sp, #88]
  404adc:	str	wzr, [sp, #92]
  404ae0:	ldr	w0, [sp, #92]
  404ae4:	bl	4039c0 <log_get_max_level_realm@plt>
  404ae8:	mov	w1, w0
  404aec:	ldr	w0, [sp, #84]
  404af0:	and	w0, w0, #0x7
  404af4:	cmp	w1, w0
  404af8:	b.lt	404b3c <sync_with_progress+0x194>  // b.tstop
  404afc:	ldr	w0, [sp, #92]
  404b00:	lsl	w1, w0, #10
  404b04:	ldr	w0, [sp, #84]
  404b08:	orr	w6, w1, w0
  404b0c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404b10:	add	x1, x0, #0x553
  404b14:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404b18:	add	x5, x0, #0x898
  404b1c:	adrp	x0, 40c000 <_fini+0xb30>
  404b20:	add	x4, x0, #0x228
  404b24:	mov	w3, #0xe2                  	// #226
  404b28:	mov	x2, x1
  404b2c:	ldr	w1, [sp, #88]
  404b30:	mov	w0, w6
  404b34:	bl	4036d0 <log_internal_realm@plt>
  404b38:	b	404b44 <sync_with_progress+0x19c>
  404b3c:	ldr	w0, [sp, #88]
  404b40:	cmp	w0, #0x0
  404b44:	mov	w19, #0x0                   	// #0
  404b48:	b	404d38 <sync_with_progress+0x390>
  404b4c:	mov	w0, #0x6                   	// #6
  404b50:	str	w0, [sp, #48]
  404b54:	str	wzr, [sp, #52]
  404b58:	str	wzr, [sp, #56]
  404b5c:	ldr	w0, [sp, #56]
  404b60:	bl	4039c0 <log_get_max_level_realm@plt>
  404b64:	mov	w1, w0
  404b68:	ldr	w0, [sp, #48]
  404b6c:	and	w0, w0, #0x7
  404b70:	cmp	w1, w0
  404b74:	b.lt	404bb8 <sync_with_progress+0x210>  // b.tstop
  404b78:	ldr	w0, [sp, #56]
  404b7c:	lsl	w1, w0, #10
  404b80:	ldr	w0, [sp, #48]
  404b84:	orr	w6, w1, w0
  404b88:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404b8c:	add	x1, x0, #0x553
  404b90:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404b94:	add	x5, x0, #0x8b8
  404b98:	adrp	x0, 40c000 <_fini+0xb30>
  404b9c:	add	x4, x0, #0x228
  404ba0:	mov	w3, #0xe6                  	// #230
  404ba4:	mov	x2, x1
  404ba8:	ldr	w1, [sp, #52]
  404bac:	mov	w0, w6
  404bb0:	bl	4036d0 <log_internal_realm@plt>
  404bb4:	b	404bc0 <sync_with_progress+0x218>
  404bb8:	ldr	w0, [sp, #52]
  404bbc:	cmp	w0, #0x0
  404bc0:	str	wzr, [sp, #40]
  404bc4:	b	404ca0 <sync_with_progress+0x2f8>
  404bc8:	ldr	w0, [sp, #36]
  404bcc:	mov	x1, #0x9680                	// #38528
  404bd0:	movk	x1, #0x98, lsl #16
  404bd4:	bl	4038f0 <wait_for_terminate_with_timeout@plt>
  404bd8:	str	w0, [sp, #44]
  404bdc:	ldr	w0, [sp, #44]
  404be0:	cmp	w0, #0x0
  404be4:	b.ne	404bf0 <sync_with_progress+0x248>  // b.any
  404be8:	mov	w19, #0x0                   	// #0
  404bec:	b	404d38 <sync_with_progress+0x390>
  404bf0:	ldr	w0, [sp, #44]
  404bf4:	cmn	w0, #0x6e
  404bf8:	b.ne	404c14 <sync_with_progress+0x26c>  // b.any
  404bfc:	add	x0, sp, #0x60
  404c00:	bl	4045b4 <sync_making_progress>
  404c04:	cmp	w0, #0x0
  404c08:	b.le	404c94 <sync_with_progress+0x2ec>
  404c0c:	str	wzr, [sp, #40]
  404c10:	b	404c94 <sync_with_progress+0x2ec>
  404c14:	mov	w0, #0x3                   	// #3
  404c18:	str	w0, [sp, #72]
  404c1c:	ldr	w0, [sp, #44]
  404c20:	str	w0, [sp, #76]
  404c24:	str	wzr, [sp, #80]
  404c28:	ldr	w0, [sp, #80]
  404c2c:	bl	4039c0 <log_get_max_level_realm@plt>
  404c30:	mov	w1, w0
  404c34:	ldr	w0, [sp, #72]
  404c38:	and	w0, w0, #0x7
  404c3c:	cmp	w1, w0
  404c40:	b.lt	404c84 <sync_with_progress+0x2dc>  // b.tstop
  404c44:	ldr	w0, [sp, #80]
  404c48:	lsl	w1, w0, #10
  404c4c:	ldr	w0, [sp, #72]
  404c50:	orr	w6, w1, w0
  404c54:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404c58:	add	x1, x0, #0x553
  404c5c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404c60:	add	x5, x0, #0x8e0
  404c64:	adrp	x0, 40c000 <_fini+0xb30>
  404c68:	add	x4, x0, #0x228
  404c6c:	mov	w3, #0xf7                  	// #247
  404c70:	mov	x2, x1
  404c74:	ldr	w1, [sp, #76]
  404c78:	mov	w0, w6
  404c7c:	bl	4036d0 <log_internal_realm@plt>
  404c80:	b	404c8c <sync_with_progress+0x2e4>
  404c84:	ldr	w0, [sp, #76]
  404c88:	cmp	w0, #0x0
  404c8c:	mov	w19, #0x0                   	// #0
  404c90:	b	404d38 <sync_with_progress+0x390>
  404c94:	ldr	w0, [sp, #40]
  404c98:	add	w0, w0, #0x1
  404c9c:	str	w0, [sp, #40]
  404ca0:	ldr	w0, [sp, #40]
  404ca4:	cmp	w0, #0x2
  404ca8:	b.ls	404bc8 <sync_with_progress+0x220>  // b.plast
  404cac:	mov	w0, #0x3                   	// #3
  404cb0:	str	w0, [sp, #60]
  404cb4:	str	wzr, [sp, #64]
  404cb8:	str	wzr, [sp, #68]
  404cbc:	ldr	w0, [sp, #68]
  404cc0:	bl	4039c0 <log_get_max_level_realm@plt>
  404cc4:	mov	w1, w0
  404cc8:	ldr	w0, [sp, #60]
  404ccc:	and	w0, w0, #0x7
  404cd0:	cmp	w1, w0
  404cd4:	b.lt	404d20 <sync_with_progress+0x378>  // b.tstop
  404cd8:	ldr	w0, [sp, #68]
  404cdc:	lsl	w1, w0, #10
  404ce0:	ldr	w0, [sp, #60]
  404ce4:	orr	w7, w1, w0
  404ce8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404cec:	add	x1, x0, #0x553
  404cf0:	ldr	w0, [sp, #36]
  404cf4:	mov	w6, w0
  404cf8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404cfc:	add	x5, x0, #0x918
  404d00:	adrp	x0, 40c000 <_fini+0xb30>
  404d04:	add	x4, x0, #0x228
  404d08:	mov	w3, #0xfe                  	// #254
  404d0c:	mov	x2, x1
  404d10:	ldr	w1, [sp, #64]
  404d14:	mov	w0, w7
  404d18:	bl	4036d0 <log_internal_realm@plt>
  404d1c:	b	404d28 <sync_with_progress+0x380>
  404d20:	ldr	w0, [sp, #64]
  404d24:	cmp	w0, #0x0
  404d28:	ldr	w0, [sp, #36]
  404d2c:	mov	w1, #0x9                   	// #9
  404d30:	bl	403110 <kill@plt>
  404d34:	mov	w19, #0x1                   	// #1
  404d38:	add	x0, sp, #0x68
  404d3c:	bl	403c44 <block_signals_reset>
  404d40:	cmp	w19, #0x1
  404d44:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  404d48:	add	x0, x0, #0x4b8
  404d4c:	ldr	x1, [sp, #360]
  404d50:	ldr	x0, [x0]
  404d54:	eor	x0, x1, x0
  404d58:	cmp	x0, #0x0
  404d5c:	b.eq	404d64 <sync_with_progress+0x3bc>  // b.none
  404d60:	bl	4035a0 <__stack_chk_fail@plt>
  404d64:	ldr	x19, [sp, #16]
  404d68:	ldp	x29, x30, [sp], #368
  404d6c:	ret

0000000000404d70 <read_current_sysctl_printk_log_level>:
  404d70:	stp	x29, x30, [sp, #-128]!
  404d74:	mov	x29, sp
  404d78:	str	x19, [sp, #16]
  404d7c:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  404d80:	add	x0, x0, #0x4b8
  404d84:	ldr	x1, [x0]
  404d88:	str	x1, [sp, #120]
  404d8c:	mov	x1, #0x0                   	// #0
  404d90:	str	xzr, [sp, #96]
  404d94:	str	xzr, [sp, #104]
  404d98:	add	x0, sp, #0x60
  404d9c:	mov	x1, x0
  404da0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404da4:	add	x0, x0, #0x968
  404da8:	bl	4034d0 <sysctl_read@plt>
  404dac:	str	w0, [sp, #44]
  404db0:	ldr	w0, [sp, #44]
  404db4:	cmp	w0, #0x0
  404db8:	b.ge	404e48 <read_current_sysctl_printk_log_level+0xd8>  // b.tcont
  404dbc:	mov	w0, #0x7                   	// #7
  404dc0:	str	w0, [sp, #84]
  404dc4:	ldr	w0, [sp, #44]
  404dc8:	str	w0, [sp, #88]
  404dcc:	str	wzr, [sp, #92]
  404dd0:	ldr	w0, [sp, #92]
  404dd4:	bl	4039c0 <log_get_max_level_realm@plt>
  404dd8:	mov	w1, w0
  404ddc:	ldr	w0, [sp, #84]
  404de0:	and	w0, w0, #0x7
  404de4:	cmp	w1, w0
  404de8:	b.lt	404e30 <read_current_sysctl_printk_log_level+0xc0>  // b.tstop
  404dec:	ldr	w0, [sp, #92]
  404df0:	lsl	w1, w0, #10
  404df4:	ldr	w0, [sp, #84]
  404df8:	orr	w6, w1, w0
  404dfc:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404e00:	add	x1, x0, #0x553
  404e04:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404e08:	add	x5, x0, #0x978
  404e0c:	adrp	x0, 40c000 <_fini+0xb30>
  404e10:	add	x4, x0, #0x258
  404e14:	mov	w3, #0x10a                 	// #266
  404e18:	mov	x2, x1
  404e1c:	ldr	w1, [sp, #88]
  404e20:	mov	w0, w6
  404e24:	bl	4036d0 <log_internal_realm@plt>
  404e28:	mov	w19, w0
  404e2c:	b	405050 <read_current_sysctl_printk_log_level+0x2e0>
  404e30:	ldr	w0, [sp, #88]
  404e34:	cmp	w0, #0x0
  404e38:	cneg	w0, w0, lt  // lt = tstop
  404e3c:	and	w0, w0, #0xff
  404e40:	neg	w19, w0
  404e44:	b	405050 <read_current_sysctl_printk_log_level+0x2e0>
  404e48:	ldr	x0, [sp, #96]
  404e4c:	str	x0, [sp, #112]
  404e50:	add	x1, sp, #0x68
  404e54:	add	x0, sp, #0x70
  404e58:	mov	w3, #0x0                   	// #0
  404e5c:	mov	x2, #0x0                   	// #0
  404e60:	bl	403790 <extract_first_word@plt>
  404e64:	str	w0, [sp, #44]
  404e68:	ldr	w0, [sp, #44]
  404e6c:	cmp	w0, #0x0
  404e70:	b.ge	404f00 <read_current_sysctl_printk_log_level+0x190>  // b.tcont
  404e74:	mov	w0, #0x7                   	// #7
  404e78:	str	w0, [sp, #72]
  404e7c:	ldr	w0, [sp, #44]
  404e80:	str	w0, [sp, #76]
  404e84:	str	wzr, [sp, #80]
  404e88:	ldr	w0, [sp, #80]
  404e8c:	bl	4039c0 <log_get_max_level_realm@plt>
  404e90:	mov	w1, w0
  404e94:	ldr	w0, [sp, #72]
  404e98:	and	w0, w0, #0x7
  404e9c:	cmp	w1, w0
  404ea0:	b.lt	404ee8 <read_current_sysctl_printk_log_level+0x178>  // b.tstop
  404ea4:	ldr	w0, [sp, #80]
  404ea8:	lsl	w1, w0, #10
  404eac:	ldr	w0, [sp, #72]
  404eb0:	orr	w6, w1, w0
  404eb4:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404eb8:	add	x1, x0, #0x553
  404ebc:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404ec0:	add	x5, x0, #0x9a0
  404ec4:	adrp	x0, 40c000 <_fini+0xb30>
  404ec8:	add	x4, x0, #0x258
  404ecc:	mov	w3, #0x10f                 	// #271
  404ed0:	mov	x2, x1
  404ed4:	ldr	w1, [sp, #76]
  404ed8:	mov	w0, w6
  404edc:	bl	4036d0 <log_internal_realm@plt>
  404ee0:	mov	w19, w0
  404ee4:	b	405050 <read_current_sysctl_printk_log_level+0x2e0>
  404ee8:	ldr	w0, [sp, #76]
  404eec:	cmp	w0, #0x0
  404ef0:	cneg	w0, w0, lt  // lt = tstop
  404ef4:	and	w0, w0, #0xff
  404ef8:	neg	w19, w0
  404efc:	b	405050 <read_current_sysctl_printk_log_level+0x2e0>
  404f00:	ldr	w0, [sp, #44]
  404f04:	cmp	w0, #0x0
  404f08:	b.ne	404f9c <read_current_sysctl_printk_log_level+0x22c>  // b.any
  404f0c:	mov	w0, #0x7                   	// #7
  404f10:	str	w0, [sp, #60]
  404f14:	mov	w0, #0x16                  	// #22
  404f18:	movk	w0, #0x4000, lsl #16
  404f1c:	str	w0, [sp, #64]
  404f20:	str	wzr, [sp, #68]
  404f24:	ldr	w0, [sp, #68]
  404f28:	bl	4039c0 <log_get_max_level_realm@plt>
  404f2c:	mov	w1, w0
  404f30:	ldr	w0, [sp, #60]
  404f34:	and	w0, w0, #0x7
  404f38:	cmp	w1, w0
  404f3c:	b.lt	404f84 <read_current_sysctl_printk_log_level+0x214>  // b.tstop
  404f40:	ldr	w0, [sp, #68]
  404f44:	lsl	w1, w0, #10
  404f48:	ldr	w0, [sp, #60]
  404f4c:	orr	w6, w1, w0
  404f50:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404f54:	add	x1, x0, #0x553
  404f58:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404f5c:	add	x5, x0, #0x9d0
  404f60:	adrp	x0, 40c000 <_fini+0xb30>
  404f64:	add	x4, x0, #0x258
  404f68:	mov	w3, #0x111                 	// #273
  404f6c:	mov	x2, x1
  404f70:	ldr	w1, [sp, #64]
  404f74:	mov	w0, w6
  404f78:	bl	4036d0 <log_internal_realm@plt>
  404f7c:	mov	w19, w0
  404f80:	b	405050 <read_current_sysctl_printk_log_level+0x2e0>
  404f84:	ldr	w0, [sp, #64]
  404f88:	cmp	w0, #0x0
  404f8c:	cneg	w0, w0, lt  // lt = tstop
  404f90:	and	w0, w0, #0xff
  404f94:	neg	w19, w0
  404f98:	b	405050 <read_current_sysctl_printk_log_level+0x2e0>
  404f9c:	ldr	x0, [sp, #104]
  404fa0:	add	x1, sp, #0x28
  404fa4:	bl	403520 <safe_atoi@plt>
  404fa8:	str	w0, [sp, #44]
  404fac:	ldr	w0, [sp, #44]
  404fb0:	cmp	w0, #0x0
  404fb4:	b.ge	40504c <read_current_sysctl_printk_log_level+0x2dc>  // b.tcont
  404fb8:	mov	w0, #0x7                   	// #7
  404fbc:	str	w0, [sp, #48]
  404fc0:	ldr	w0, [sp, #44]
  404fc4:	str	w0, [sp, #52]
  404fc8:	str	wzr, [sp, #56]
  404fcc:	ldr	w0, [sp, #56]
  404fd0:	bl	4039c0 <log_get_max_level_realm@plt>
  404fd4:	mov	w1, w0
  404fd8:	ldr	w0, [sp, #48]
  404fdc:	and	w0, w0, #0x7
  404fe0:	cmp	w1, w0
  404fe4:	b.lt	405034 <read_current_sysctl_printk_log_level+0x2c4>  // b.tstop
  404fe8:	ldr	w0, [sp, #56]
  404fec:	lsl	w1, w0, #10
  404ff0:	ldr	w0, [sp, #48]
  404ff4:	orr	w7, w1, w0
  404ff8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  404ffc:	add	x1, x0, #0x553
  405000:	ldr	x0, [sp, #96]
  405004:	mov	x6, x0
  405008:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40500c:	add	x5, x0, #0xa00
  405010:	adrp	x0, 40c000 <_fini+0xb30>
  405014:	add	x4, x0, #0x258
  405018:	mov	w3, #0x115                 	// #277
  40501c:	mov	x2, x1
  405020:	ldr	w1, [sp, #52]
  405024:	mov	w0, w7
  405028:	bl	4036d0 <log_internal_realm@plt>
  40502c:	mov	w19, w0
  405030:	b	405050 <read_current_sysctl_printk_log_level+0x2e0>
  405034:	ldr	w0, [sp, #52]
  405038:	cmp	w0, #0x0
  40503c:	cneg	w0, w0, lt  // lt = tstop
  405040:	and	w0, w0, #0xff
  405044:	neg	w19, w0
  405048:	b	405050 <read_current_sysctl_printk_log_level+0x2e0>
  40504c:	ldr	w19, [sp, #40]
  405050:	add	x0, sp, #0x68
  405054:	bl	403b98 <freep>
  405058:	add	x0, sp, #0x60
  40505c:	bl	403b98 <freep>
  405060:	mov	w1, w19
  405064:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  405068:	add	x0, x0, #0x4b8
  40506c:	ldr	x2, [sp, #120]
  405070:	ldr	x0, [x0]
  405074:	eor	x0, x2, x0
  405078:	cmp	x0, #0x0
  40507c:	b.eq	405084 <read_current_sysctl_printk_log_level+0x314>  // b.none
  405080:	bl	4035a0 <__stack_chk_fail@plt>
  405084:	mov	w0, w1
  405088:	ldr	x19, [sp, #16]
  40508c:	ldp	x29, x30, [sp], #128
  405090:	ret

0000000000405094 <bump_sysctl_printk_log_level>:
  405094:	stp	x29, x30, [sp, #-64]!
  405098:	mov	x29, sp
  40509c:	str	w0, [sp, #28]
  4050a0:	bl	404d70 <read_current_sysctl_printk_log_level>
  4050a4:	str	w0, [sp, #44]
  4050a8:	ldr	w0, [sp, #44]
  4050ac:	cmp	w0, #0x0
  4050b0:	b.lt	40517c <bump_sysctl_printk_log_level+0xe8>  // b.tstop
  4050b4:	ldr	w1, [sp, #28]
  4050b8:	ldr	w0, [sp, #44]
  4050bc:	cmp	w1, w0
  4050c0:	b.lt	40517c <bump_sysctl_printk_log_level+0xe8>  // b.tstop
  4050c4:	ldr	w0, [sp, #28]
  4050c8:	add	w0, w0, #0x1
  4050cc:	mov	w2, w0
  4050d0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4050d4:	add	x1, x0, #0xa30
  4050d8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4050dc:	add	x0, x0, #0x968
  4050e0:	bl	403870 <sysctl_writef@plt>
  4050e4:	str	w0, [sp, #48]
  4050e8:	ldr	w0, [sp, #48]
  4050ec:	cmp	w0, #0x0
  4050f0:	b.ge	405180 <bump_sysctl_printk_log_level+0xec>  // b.tcont
  4050f4:	mov	w0, #0x7                   	// #7
  4050f8:	str	w0, [sp, #52]
  4050fc:	ldr	w0, [sp, #48]
  405100:	str	w0, [sp, #56]
  405104:	str	wzr, [sp, #60]
  405108:	ldr	w0, [sp, #60]
  40510c:	bl	4039c0 <log_get_max_level_realm@plt>
  405110:	mov	w1, w0
  405114:	ldr	w0, [sp, #52]
  405118:	and	w0, w0, #0x7
  40511c:	cmp	w1, w0
  405120:	b.lt	405170 <bump_sysctl_printk_log_level+0xdc>  // b.tstop
  405124:	ldr	w0, [sp, #60]
  405128:	lsl	w1, w0, #10
  40512c:	ldr	w0, [sp, #52]
  405130:	orr	w7, w1, w0
  405134:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405138:	add	x1, x0, #0x553
  40513c:	ldr	w0, [sp, #28]
  405140:	add	w0, w0, #0x1
  405144:	mov	w6, w0
  405148:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40514c:	add	x5, x0, #0xa38
  405150:	adrp	x0, 40c000 <_fini+0xb30>
  405154:	add	x4, x0, #0x280
  405158:	mov	w3, #0x125                 	// #293
  40515c:	mov	x2, x1
  405160:	ldr	w1, [sp, #56]
  405164:	mov	w0, w7
  405168:	bl	4036d0 <log_internal_realm@plt>
  40516c:	b	405180 <bump_sysctl_printk_log_level+0xec>
  405170:	ldr	w0, [sp, #56]
  405174:	cmp	w0, #0x0
  405178:	b	405180 <bump_sysctl_printk_log_level+0xec>
  40517c:	nop
  405180:	ldp	x29, x30, [sp], #64
  405184:	ret

0000000000405188 <main>:
  405188:	sub	sp, sp, #0x250
  40518c:	stp	x29, x30, [sp, #16]
  405190:	add	x29, sp, #0x10
  405194:	str	x19, [sp, #32]
  405198:	str	w0, [sp, #60]
  40519c:	str	x1, [sp, #48]
  4051a0:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  4051a4:	add	x0, x0, #0x4b8
  4051a8:	ldr	x1, [x0]
  4051ac:	str	x1, [sp, #584]
  4051b0:	mov	x1, #0x0                   	// #0
  4051b4:	strb	wzr, [sp, #85]
  4051b8:	str	xzr, [sp, #520]
  4051bc:	mov	w0, #0x6                   	// #6
  4051c0:	str	w0, [sp, #96]
  4051c4:	mov	w0, #0x0                   	// #0
  4051c8:	bl	4034f0 <log_set_target@plt>
  4051cc:	mov	w0, #0x1                   	// #1
  4051d0:	bl	4035e0 <log_set_prohibit_ipc@plt>
  4051d4:	mov	w0, #0x0                   	// #0
  4051d8:	bl	403200 <log_parse_environment_realm@plt>
  4051dc:	ldr	x1, [sp, #48]
  4051e0:	ldr	w0, [sp, #60]
  4051e4:	bl	403cc4 <parse_argv>
  4051e8:	str	w0, [sp, #92]
  4051ec:	ldr	w0, [sp, #92]
  4051f0:	cmp	w0, #0x0
  4051f4:	b.lt	406b4c <main+0x19c4>  // b.tstop
  4051f8:	bl	403960 <log_open@plt>
  4051fc:	mov	w0, #0x12                  	// #18
  405200:	bl	403360 <umask@plt>
  405204:	bl	403250 <getpid_cached@plt>
  405208:	cmp	w0, #0x1
  40520c:	b.eq	405290 <main+0x108>  // b.none
  405210:	mov	w0, #0x3                   	// #3
  405214:	str	w0, [sp, #496]
  405218:	str	wzr, [sp, #500]
  40521c:	str	wzr, [sp, #504]
  405220:	ldr	w0, [sp, #504]
  405224:	bl	4039c0 <log_get_max_level_realm@plt>
  405228:	mov	w1, w0
  40522c:	ldr	w0, [sp, #496]
  405230:	and	w0, w0, #0x7
  405234:	cmp	w1, w0
  405238:	b.lt	40527c <main+0xf4>  // b.tstop
  40523c:	ldr	w0, [sp, #504]
  405240:	lsl	w1, w0, #10
  405244:	ldr	w0, [sp, #496]
  405248:	orr	w6, w1, w0
  40524c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405250:	add	x1, x0, #0x553
  405254:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405258:	add	x5, x0, #0xa60
  40525c:	adrp	x0, 40c000 <_fini+0xb30>
  405260:	add	x4, x0, #0x2a0
  405264:	mov	w3, #0x140                 	// #320
  405268:	mov	x2, x1
  40526c:	ldr	w1, [sp, #500]
  405270:	mov	w0, w6
  405274:	bl	4036d0 <log_internal_realm@plt>
  405278:	b	405284 <main+0xfc>
  40527c:	ldr	w0, [sp, #500]
  405280:	cmp	w0, #0x0
  405284:	mov	w0, #0xffffffff            	// #-1
  405288:	str	w0, [sp, #92]
  40528c:	b	406b50 <main+0x19c8>
  405290:	adrp	x0, 41f000 <arg_timeout>
  405294:	add	x0, x0, #0x18
  405298:	ldr	x2, [x0]
  40529c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4052a0:	add	x1, x0, #0xa80
  4052a4:	mov	x0, x2
  4052a8:	bl	403780 <strcmp@plt>
  4052ac:	cmp	w0, #0x0
  4052b0:	b.ne	4052c4 <main+0x13c>  // b.any
  4052b4:	mov	w0, #0x4567                	// #17767
  4052b8:	movk	w0, #0x123, lsl #16
  4052bc:	str	w0, [sp, #88]
  4052c0:	b	40541c <main+0x294>
  4052c4:	adrp	x0, 41f000 <arg_timeout>
  4052c8:	add	x0, x0, #0x18
  4052cc:	ldr	x2, [x0]
  4052d0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4052d4:	add	x1, x0, #0xa88
  4052d8:	mov	x0, x2
  4052dc:	bl	403780 <strcmp@plt>
  4052e0:	cmp	w0, #0x0
  4052e4:	b.ne	4052f8 <main+0x170>  // b.any
  4052e8:	mov	w0, #0xfedc                	// #65244
  4052ec:	movk	w0, #0x4321, lsl #16
  4052f0:	str	w0, [sp, #88]
  4052f4:	b	40541c <main+0x294>
  4052f8:	adrp	x0, 41f000 <arg_timeout>
  4052fc:	add	x0, x0, #0x18
  405300:	ldr	x2, [x0]
  405304:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405308:	add	x1, x0, #0xa98
  40530c:	mov	x0, x2
  405310:	bl	403780 <strcmp@plt>
  405314:	cmp	w0, #0x0
  405318:	b.ne	40532c <main+0x1a4>  // b.any
  40531c:	mov	w0, #0x123                 	// #291
  405320:	movk	w0, #0xcdef, lsl #16
  405324:	str	w0, [sp, #88]
  405328:	b	40541c <main+0x294>
  40532c:	adrp	x0, 41f000 <arg_timeout>
  405330:	add	x0, x0, #0x18
  405334:	ldr	x2, [x0]
  405338:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40533c:	add	x1, x0, #0xaa0
  405340:	mov	x0, x2
  405344:	bl	403780 <strcmp@plt>
  405348:	cmp	w0, #0x0
  40534c:	b.ne	405360 <main+0x1d8>  // b.any
  405350:	mov	w0, #0x4543                	// #17731
  405354:	movk	w0, #0x4558, lsl #16
  405358:	str	w0, [sp, #88]
  40535c:	b	40541c <main+0x294>
  405360:	adrp	x0, 41f000 <arg_timeout>
  405364:	add	x0, x0, #0x18
  405368:	ldr	x2, [x0]
  40536c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405370:	add	x1, x0, #0xaa8
  405374:	mov	x0, x2
  405378:	bl	403780 <strcmp@plt>
  40537c:	cmp	w0, #0x0
  405380:	b.ne	40538c <main+0x204>  // b.any
  405384:	str	wzr, [sp, #88]
  405388:	b	40541c <main+0x294>
  40538c:	mov	w0, #0x3                   	// #3
  405390:	str	w0, [sp, #100]
  405394:	str	wzr, [sp, #104]
  405398:	str	wzr, [sp, #108]
  40539c:	ldr	w0, [sp, #108]
  4053a0:	bl	4039c0 <log_get_max_level_realm@plt>
  4053a4:	mov	w1, w0
  4053a8:	ldr	w0, [sp, #100]
  4053ac:	and	w0, w0, #0x7
  4053b0:	cmp	w1, w0
  4053b4:	b.lt	405408 <main+0x280>  // b.tstop
  4053b8:	ldr	w0, [sp, #108]
  4053bc:	lsl	w1, w0, #10
  4053c0:	ldr	w0, [sp, #100]
  4053c4:	orr	w7, w1, w0
  4053c8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4053cc:	add	x1, x0, #0x553
  4053d0:	adrp	x0, 41f000 <arg_timeout>
  4053d4:	add	x0, x0, #0x18
  4053d8:	ldr	x0, [x0]
  4053dc:	mov	x6, x0
  4053e0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4053e4:	add	x5, x0, #0xab0
  4053e8:	adrp	x0, 40c000 <_fini+0xb30>
  4053ec:	add	x4, x0, #0x2a0
  4053f0:	mov	w3, #0x150                 	// #336
  4053f4:	mov	x2, x1
  4053f8:	ldr	w1, [sp, #104]
  4053fc:	mov	w0, w7
  405400:	bl	4036d0 <log_internal_realm@plt>
  405404:	b	405410 <main+0x288>
  405408:	ldr	w0, [sp, #104]
  40540c:	cmp	w0, #0x0
  405410:	mov	w0, #0xffffffea            	// #-22
  405414:	str	w0, [sp, #92]
  405418:	b	406b50 <main+0x19c8>
  40541c:	add	x0, sp, #0x208
  405420:	bl	403610 <cg_get_root_path@plt>
  405424:	bl	403730 <detect_container@plt>
  405428:	cmp	w0, #0x0
  40542c:	cset	w0, gt
  405430:	strb	w0, [sp, #86]
  405434:	ldrb	w0, [sp, #86]
  405438:	eor	w0, w0, #0x1
  40543c:	and	w0, w0, #0xff
  405440:	cmp	w0, #0x0
  405444:	b.eq	4054a8 <main+0x320>  // b.none
  405448:	strb	wzr, [sp, #84]
  40544c:	bl	403710 <log_get_target@plt>
  405450:	cmp	w0, #0x7
  405454:	cset	w1, hi  // hi = pmore
  405458:	and	w1, w1, #0xff
  40545c:	cmp	w1, #0x0
  405460:	b.ne	405490 <main+0x308>  // b.any
  405464:	mov	x1, #0x1                   	// #1
  405468:	lsl	x1, x1, x0
  40546c:	mov	x0, #0xd4                  	// #212
  405470:	and	x0, x1, x0
  405474:	cmp	x0, #0x0
  405478:	cset	w0, ne  // ne = any
  40547c:	and	w0, w0, #0xff
  405480:	cmp	w0, #0x0
  405484:	b.eq	405490 <main+0x308>  // b.none
  405488:	mov	w0, #0x1                   	// #1
  40548c:	strb	w0, [sp, #84]
  405490:	nop
  405494:	ldrb	w0, [sp, #84]
  405498:	cmp	w0, #0x0
  40549c:	b.eq	4054a8 <main+0x320>  // b.none
  4054a0:	mov	w0, #0x4                   	// #4
  4054a4:	bl	405094 <bump_sysctl_printk_log_level>
  4054a8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4054ac:	add	x0, x0, #0xac8
  4054b0:	bl	4037f0 <getenv@plt>
  4054b4:	cmp	x0, #0x0
  4054b8:	cset	w0, ne  // ne = any
  4054bc:	strb	w0, [sp, #85]
  4054c0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4054c4:	add	x0, x0, #0xad8
  4054c8:	bl	4037f0 <getenv@plt>
  4054cc:	str	x0, [sp, #528]
  4054d0:	ldr	x0, [sp, #528]
  4054d4:	cmp	x0, #0x0
  4054d8:	b.eq	405570 <main+0x3e8>  // b.none
  4054dc:	ldr	x0, [sp, #528]
  4054e0:	bl	403950 <watchdog_set_device@plt>
  4054e4:	str	w0, [sp, #92]
  4054e8:	ldr	w0, [sp, #92]
  4054ec:	cmp	w0, #0x0
  4054f0:	b.ge	405570 <main+0x3e8>  // b.tcont
  4054f4:	mov	w0, #0x4                   	// #4
  4054f8:	str	w0, [sp, #112]
  4054fc:	ldr	w0, [sp, #92]
  405500:	str	w0, [sp, #116]
  405504:	str	wzr, [sp, #120]
  405508:	ldr	w0, [sp, #120]
  40550c:	bl	4039c0 <log_get_max_level_realm@plt>
  405510:	mov	w1, w0
  405514:	ldr	w0, [sp, #112]
  405518:	and	w0, w0, #0x7
  40551c:	cmp	w1, w0
  405520:	b.lt	405568 <main+0x3e0>  // b.tstop
  405524:	ldr	w0, [sp, #120]
  405528:	lsl	w1, w0, #10
  40552c:	ldr	w0, [sp, #112]
  405530:	orr	w7, w1, w0
  405534:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405538:	add	x1, x0, #0x553
  40553c:	ldr	x6, [sp, #528]
  405540:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405544:	add	x5, x0, #0xae8
  405548:	adrp	x0, 40c000 <_fini+0xb30>
  40554c:	add	x4, x0, #0x2a0
  405550:	mov	w3, #0x169                 	// #361
  405554:	mov	x2, x1
  405558:	ldr	w1, [sp, #116]
  40555c:	mov	w0, w7
  405560:	bl	4036d0 <log_internal_realm@plt>
  405564:	b	405570 <main+0x3e8>
  405568:	ldr	w0, [sp, #116]
  40556c:	cmp	w0, #0x0
  405570:	mov	w0, #0x3                   	// #3
  405574:	bl	403540 <mlockall@plt>
  405578:	ldrb	w0, [sp, #86]
  40557c:	eor	w0, w0, #0x1
  405580:	and	w0, w0, #0xff
  405584:	cmp	w0, #0x0
  405588:	b.eq	405590 <main+0x408>  // b.none
  40558c:	bl	4049a8 <sync_with_progress>
  405590:	bl	403350 <disable_coredumps@plt>
  405594:	mov	w0, #0x6                   	// #6
  405598:	str	w0, [sp, #124]
  40559c:	str	wzr, [sp, #128]
  4055a0:	str	wzr, [sp, #132]
  4055a4:	ldr	w0, [sp, #132]
  4055a8:	bl	4039c0 <log_get_max_level_realm@plt>
  4055ac:	mov	w1, w0
  4055b0:	ldr	w0, [sp, #124]
  4055b4:	and	w0, w0, #0x7
  4055b8:	cmp	w1, w0
  4055bc:	b.lt	405600 <main+0x478>  // b.tstop
  4055c0:	ldr	w0, [sp, #132]
  4055c4:	lsl	w1, w0, #10
  4055c8:	ldr	w0, [sp, #124]
  4055cc:	orr	w6, w1, w0
  4055d0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4055d4:	add	x1, x0, #0x553
  4055d8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4055dc:	add	x5, x0, #0xb20
  4055e0:	adrp	x0, 40c000 <_fini+0xb30>
  4055e4:	add	x4, x0, #0x2a0
  4055e8:	mov	w3, #0x179                 	// #377
  4055ec:	mov	x2, x1
  4055f0:	ldr	w1, [sp, #128]
  4055f4:	mov	w0, w6
  4055f8:	bl	4036d0 <log_internal_realm@plt>
  4055fc:	b	405608 <main+0x480>
  405600:	ldr	w0, [sp, #128]
  405604:	cmp	w0, #0x0
  405608:	adrp	x0, 41f000 <arg_timeout>
  40560c:	add	x0, x0, #0x0
  405610:	ldr	x0, [x0]
  405614:	mov	x3, x0
  405618:	mov	w2, #0x1                   	// #1
  40561c:	mov	w1, #0x1                   	// #1
  405620:	mov	w0, #0xf                   	// #15
  405624:	bl	40afd0 <broadcast_signal>
  405628:	mov	w0, #0x6                   	// #6
  40562c:	str	w0, [sp, #136]
  405630:	str	wzr, [sp, #140]
  405634:	str	wzr, [sp, #144]
  405638:	ldr	w0, [sp, #144]
  40563c:	bl	4039c0 <log_get_max_level_realm@plt>
  405640:	mov	w1, w0
  405644:	ldr	w0, [sp, #136]
  405648:	and	w0, w0, #0x7
  40564c:	cmp	w1, w0
  405650:	b.lt	405694 <main+0x50c>  // b.tstop
  405654:	ldr	w0, [sp, #144]
  405658:	lsl	w1, w0, #10
  40565c:	ldr	w0, [sp, #136]
  405660:	orr	w6, w1, w0
  405664:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405668:	add	x1, x0, #0x553
  40566c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405670:	add	x5, x0, #0xb50
  405674:	adrp	x0, 40c000 <_fini+0xb30>
  405678:	add	x4, x0, #0x2a0
  40567c:	mov	w3, #0x17c                 	// #380
  405680:	mov	x2, x1
  405684:	ldr	w1, [sp, #140]
  405688:	mov	w0, w6
  40568c:	bl	4036d0 <log_internal_realm@plt>
  405690:	b	40569c <main+0x514>
  405694:	ldr	w0, [sp, #140]
  405698:	cmp	w0, #0x0
  40569c:	adrp	x0, 41f000 <arg_timeout>
  4056a0:	add	x0, x0, #0x0
  4056a4:	ldr	x0, [x0]
  4056a8:	mov	x3, x0
  4056ac:	mov	w2, #0x0                   	// #0
  4056b0:	mov	w1, #0x1                   	// #1
  4056b4:	mov	w0, #0x9                   	// #9
  4056b8:	bl	40afd0 <broadcast_signal>
  4056bc:	ldrb	w0, [sp, #86]
  4056c0:	cmp	w0, #0x0
  4056c4:	cset	w0, ne  // ne = any
  4056c8:	and	w0, w0, #0xff
  4056cc:	eor	w0, w0, #0x1
  4056d0:	and	w0, w0, #0xff
  4056d4:	strb	w0, [sp, #80]
  4056d8:	ldrb	w0, [sp, #80]
  4056dc:	and	w0, w0, #0x1
  4056e0:	strb	w0, [sp, #80]
  4056e4:	ldrb	w0, [sp, #86]
  4056e8:	cmp	w0, #0x0
  4056ec:	cset	w0, ne  // ne = any
  4056f0:	and	w0, w0, #0xff
  4056f4:	eor	w0, w0, #0x1
  4056f8:	and	w0, w0, #0xff
  4056fc:	strb	w0, [sp, #81]
  405700:	ldrb	w0, [sp, #81]
  405704:	and	w0, w0, #0x1
  405708:	strb	w0, [sp, #81]
  40570c:	ldrb	w0, [sp, #86]
  405710:	cmp	w0, #0x0
  405714:	cset	w0, ne  // ne = any
  405718:	and	w0, w0, #0xff
  40571c:	eor	w0, w0, #0x1
  405720:	and	w0, w0, #0xff
  405724:	strb	w0, [sp, #82]
  405728:	ldrb	w0, [sp, #82]
  40572c:	and	w0, w0, #0x1
  405730:	strb	w0, [sp, #82]
  405734:	ldrb	w0, [sp, #86]
  405738:	cmp	w0, #0x0
  40573c:	cset	w0, ne  // ne = any
  405740:	and	w0, w0, #0xff
  405744:	eor	w0, w0, #0x1
  405748:	and	w0, w0, #0xff
  40574c:	strb	w0, [sp, #83]
  405750:	ldrb	w0, [sp, #83]
  405754:	and	w0, w0, #0x1
  405758:	strb	w0, [sp, #83]
  40575c:	ldrb	w0, [sp, #86]
  405760:	eor	w0, w0, #0x1
  405764:	and	w0, w0, #0xff
  405768:	cmp	w0, #0x0
  40576c:	b.eq	4057a8 <main+0x620>  // b.none
  405770:	bl	403380 <in_initrd@plt>
  405774:	and	w0, w0, #0xff
  405778:	eor	w0, w0, #0x1
  40577c:	and	w0, w0, #0xff
  405780:	cmp	w0, #0x0
  405784:	b.eq	4057a8 <main+0x620>  // b.none
  405788:	mov	w1, #0x1                   	// #1
  40578c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405790:	add	x0, x0, #0xb80
  405794:	bl	403400 <access@plt>
  405798:	cmp	w0, #0x0
  40579c:	b.ne	4057a8 <main+0x620>  // b.any
  4057a0:	mov	w0, #0x1                   	// #1
  4057a4:	b	4057ac <main+0x624>
  4057a8:	mov	w0, #0x0                   	// #0
  4057ac:	strb	w0, [sp, #87]
  4057b0:	ldrb	w0, [sp, #87]
  4057b4:	and	w0, w0, #0x1
  4057b8:	strb	w0, [sp, #87]
  4057bc:	strb	wzr, [sp, #79]
  4057c0:	ldrb	w0, [sp, #85]
  4057c4:	cmp	w0, #0x0
  4057c8:	b.eq	4057d0 <main+0x648>  // b.none
  4057cc:	bl	403160 <watchdog_ping@plt>
  4057d0:	ldr	x0, [sp, #520]
  4057d4:	cmp	x0, #0x0
  4057d8:	b.eq	4057f4 <main+0x66c>  // b.none
  4057dc:	ldr	x0, [sp, #520]
  4057e0:	mov	w2, #0x0                   	// #0
  4057e4:	mov	x1, x0
  4057e8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4057ec:	add	x0, x0, #0xb98
  4057f0:	bl	403660 <cg_trim@plt>
  4057f4:	ldrb	w0, [sp, #80]
  4057f8:	cmp	w0, #0x0
  4057fc:	b.eq	405a0c <main+0x884>  // b.none
  405800:	mov	w0, #0x6                   	// #6
  405804:	str	w0, [sp, #148]
  405808:	str	wzr, [sp, #152]
  40580c:	str	wzr, [sp, #156]
  405810:	ldr	w0, [sp, #156]
  405814:	bl	4039c0 <log_get_max_level_realm@plt>
  405818:	mov	w1, w0
  40581c:	ldr	w0, [sp, #148]
  405820:	and	w0, w0, #0x7
  405824:	cmp	w1, w0
  405828:	b.lt	40586c <main+0x6e4>  // b.tstop
  40582c:	ldr	w0, [sp, #156]
  405830:	lsl	w1, w0, #10
  405834:	ldr	w0, [sp, #148]
  405838:	orr	w6, w1, w0
  40583c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405840:	add	x1, x0, #0x553
  405844:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405848:	add	x5, x0, #0xba8
  40584c:	adrp	x0, 40c000 <_fini+0xb30>
  405850:	add	x4, x0, #0x2a0
  405854:	mov	w3, #0x194                 	// #404
  405858:	mov	x2, x1
  40585c:	ldr	w1, [sp, #152]
  405860:	mov	w0, w6
  405864:	bl	4036d0 <log_internal_realm@plt>
  405868:	b	405874 <main+0x6ec>
  40586c:	ldr	w0, [sp, #152]
  405870:	cmp	w0, #0x0
  405874:	add	x0, sp, #0x4f
  405878:	ldr	w1, [sp, #96]
  40587c:	bl	409c54 <umount_all>
  405880:	str	w0, [sp, #92]
  405884:	ldr	w0, [sp, #92]
  405888:	cmp	w0, #0x0
  40588c:	b.ne	40590c <main+0x784>  // b.any
  405890:	strb	wzr, [sp, #80]
  405894:	mov	w0, #0x6                   	// #6
  405898:	str	w0, [sp, #184]
  40589c:	str	wzr, [sp, #188]
  4058a0:	str	wzr, [sp, #192]
  4058a4:	ldr	w0, [sp, #192]
  4058a8:	bl	4039c0 <log_get_max_level_realm@plt>
  4058ac:	mov	w1, w0
  4058b0:	ldr	w0, [sp, #184]
  4058b4:	and	w0, w0, #0x7
  4058b8:	cmp	w1, w0
  4058bc:	b.lt	405900 <main+0x778>  // b.tstop
  4058c0:	ldr	w0, [sp, #192]
  4058c4:	lsl	w1, w0, #10
  4058c8:	ldr	w0, [sp, #184]
  4058cc:	orr	w6, w1, w0
  4058d0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4058d4:	add	x1, x0, #0x553
  4058d8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4058dc:	add	x5, x0, #0xbc8
  4058e0:	adrp	x0, 40c000 <_fini+0xb30>
  4058e4:	add	x4, x0, #0x2a0
  4058e8:	mov	w3, #0x198                 	// #408
  4058ec:	mov	x2, x1
  4058f0:	ldr	w1, [sp, #188]
  4058f4:	mov	w0, w6
  4058f8:	bl	4036d0 <log_internal_realm@plt>
  4058fc:	b	405a0c <main+0x884>
  405900:	ldr	w0, [sp, #188]
  405904:	cmp	w0, #0x0
  405908:	b	405a0c <main+0x884>
  40590c:	ldr	w0, [sp, #92]
  405910:	cmp	w0, #0x0
  405914:	b.le	405994 <main+0x80c>
  405918:	mov	w0, #0x6                   	// #6
  40591c:	str	w0, [sp, #172]
  405920:	str	wzr, [sp, #176]
  405924:	str	wzr, [sp, #180]
  405928:	ldr	w0, [sp, #180]
  40592c:	bl	4039c0 <log_get_max_level_realm@plt>
  405930:	mov	w1, w0
  405934:	ldr	w0, [sp, #172]
  405938:	and	w0, w0, #0x7
  40593c:	cmp	w1, w0
  405940:	b.lt	405988 <main+0x800>  // b.tstop
  405944:	ldr	w0, [sp, #180]
  405948:	lsl	w1, w0, #10
  40594c:	ldr	w0, [sp, #172]
  405950:	orr	w7, w1, w0
  405954:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405958:	add	x1, x0, #0x553
  40595c:	ldr	w6, [sp, #92]
  405960:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405964:	add	x5, x0, #0xbe8
  405968:	adrp	x0, 40c000 <_fini+0xb30>
  40596c:	add	x4, x0, #0x2a0
  405970:	mov	w3, #0x19a                 	// #410
  405974:	mov	x2, x1
  405978:	ldr	w1, [sp, #176]
  40597c:	mov	w0, w7
  405980:	bl	4036d0 <log_internal_realm@plt>
  405984:	b	405a0c <main+0x884>
  405988:	ldr	w0, [sp, #176]
  40598c:	cmp	w0, #0x0
  405990:	b	405a0c <main+0x884>
  405994:	mov	w0, #0x3                   	// #3
  405998:	str	w0, [sp, #160]
  40599c:	ldr	w0, [sp, #92]
  4059a0:	str	w0, [sp, #164]
  4059a4:	str	wzr, [sp, #168]
  4059a8:	ldr	w0, [sp, #168]
  4059ac:	bl	4039c0 <log_get_max_level_realm@plt>
  4059b0:	mov	w1, w0
  4059b4:	ldr	w0, [sp, #160]
  4059b8:	and	w0, w0, #0x7
  4059bc:	cmp	w1, w0
  4059c0:	b.lt	405a04 <main+0x87c>  // b.tstop
  4059c4:	ldr	w0, [sp, #168]
  4059c8:	lsl	w1, w0, #10
  4059cc:	ldr	w0, [sp, #160]
  4059d0:	orr	w6, w1, w0
  4059d4:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4059d8:	add	x1, x0, #0x553
  4059dc:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4059e0:	add	x5, x0, #0xc18
  4059e4:	adrp	x0, 40c000 <_fini+0xb30>
  4059e8:	add	x4, x0, #0x2a0
  4059ec:	mov	w3, #0x19c                 	// #412
  4059f0:	mov	x2, x1
  4059f4:	ldr	w1, [sp, #164]
  4059f8:	mov	w0, w6
  4059fc:	bl	4036d0 <log_internal_realm@plt>
  405a00:	b	405a0c <main+0x884>
  405a04:	ldr	w0, [sp, #164]
  405a08:	cmp	w0, #0x0
  405a0c:	ldrb	w0, [sp, #81]
  405a10:	cmp	w0, #0x0
  405a14:	b.eq	405c20 <main+0xa98>  // b.none
  405a18:	mov	w0, #0x6                   	// #6
  405a1c:	str	w0, [sp, #196]
  405a20:	str	wzr, [sp, #200]
  405a24:	str	wzr, [sp, #204]
  405a28:	ldr	w0, [sp, #204]
  405a2c:	bl	4039c0 <log_get_max_level_realm@plt>
  405a30:	mov	w1, w0
  405a34:	ldr	w0, [sp, #196]
  405a38:	and	w0, w0, #0x7
  405a3c:	cmp	w1, w0
  405a40:	b.lt	405a84 <main+0x8fc>  // b.tstop
  405a44:	ldr	w0, [sp, #204]
  405a48:	lsl	w1, w0, #10
  405a4c:	ldr	w0, [sp, #196]
  405a50:	orr	w6, w1, w0
  405a54:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405a58:	add	x1, x0, #0x553
  405a5c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405a60:	add	x5, x0, #0xc40
  405a64:	adrp	x0, 40c000 <_fini+0xb30>
  405a68:	add	x4, x0, #0x2a0
  405a6c:	mov	w3, #0x1a0                 	// #416
  405a70:	mov	x2, x1
  405a74:	ldr	w1, [sp, #200]
  405a78:	mov	w0, w6
  405a7c:	bl	4036d0 <log_internal_realm@plt>
  405a80:	b	405a8c <main+0x904>
  405a84:	ldr	w0, [sp, #200]
  405a88:	cmp	w0, #0x0
  405a8c:	add	x0, sp, #0x4f
  405a90:	bl	409d28 <swapoff_all>
  405a94:	str	w0, [sp, #92]
  405a98:	ldr	w0, [sp, #92]
  405a9c:	cmp	w0, #0x0
  405aa0:	b.ne	405b20 <main+0x998>  // b.any
  405aa4:	strb	wzr, [sp, #81]
  405aa8:	mov	w0, #0x6                   	// #6
  405aac:	str	w0, [sp, #232]
  405ab0:	str	wzr, [sp, #236]
  405ab4:	str	wzr, [sp, #240]
  405ab8:	ldr	w0, [sp, #240]
  405abc:	bl	4039c0 <log_get_max_level_realm@plt>
  405ac0:	mov	w1, w0
  405ac4:	ldr	w0, [sp, #232]
  405ac8:	and	w0, w0, #0x7
  405acc:	cmp	w1, w0
  405ad0:	b.lt	405b14 <main+0x98c>  // b.tstop
  405ad4:	ldr	w0, [sp, #240]
  405ad8:	lsl	w1, w0, #10
  405adc:	ldr	w0, [sp, #232]
  405ae0:	orr	w6, w1, w0
  405ae4:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405ae8:	add	x1, x0, #0x553
  405aec:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405af0:	add	x5, x0, #0xc58
  405af4:	adrp	x0, 40c000 <_fini+0xb30>
  405af8:	add	x4, x0, #0x2a0
  405afc:	mov	w3, #0x1a4                 	// #420
  405b00:	mov	x2, x1
  405b04:	ldr	w1, [sp, #236]
  405b08:	mov	w0, w6
  405b0c:	bl	4036d0 <log_internal_realm@plt>
  405b10:	b	405c20 <main+0xa98>
  405b14:	ldr	w0, [sp, #236]
  405b18:	cmp	w0, #0x0
  405b1c:	b	405c20 <main+0xa98>
  405b20:	ldr	w0, [sp, #92]
  405b24:	cmp	w0, #0x0
  405b28:	b.le	405ba8 <main+0xa20>
  405b2c:	mov	w0, #0x6                   	// #6
  405b30:	str	w0, [sp, #220]
  405b34:	str	wzr, [sp, #224]
  405b38:	str	wzr, [sp, #228]
  405b3c:	ldr	w0, [sp, #228]
  405b40:	bl	4039c0 <log_get_max_level_realm@plt>
  405b44:	mov	w1, w0
  405b48:	ldr	w0, [sp, #220]
  405b4c:	and	w0, w0, #0x7
  405b50:	cmp	w1, w0
  405b54:	b.lt	405b9c <main+0xa14>  // b.tstop
  405b58:	ldr	w0, [sp, #228]
  405b5c:	lsl	w1, w0, #10
  405b60:	ldr	w0, [sp, #220]
  405b64:	orr	w7, w1, w0
  405b68:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405b6c:	add	x1, x0, #0x553
  405b70:	ldr	w6, [sp, #92]
  405b74:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405b78:	add	x5, x0, #0xc70
  405b7c:	adrp	x0, 40c000 <_fini+0xb30>
  405b80:	add	x4, x0, #0x2a0
  405b84:	mov	w3, #0x1a6                 	// #422
  405b88:	mov	x2, x1
  405b8c:	ldr	w1, [sp, #224]
  405b90:	mov	w0, w7
  405b94:	bl	4036d0 <log_internal_realm@plt>
  405b98:	b	405c20 <main+0xa98>
  405b9c:	ldr	w0, [sp, #224]
  405ba0:	cmp	w0, #0x0
  405ba4:	b	405c20 <main+0xa98>
  405ba8:	mov	w0, #0x3                   	// #3
  405bac:	str	w0, [sp, #208]
  405bb0:	ldr	w0, [sp, #92]
  405bb4:	str	w0, [sp, #212]
  405bb8:	str	wzr, [sp, #216]
  405bbc:	ldr	w0, [sp, #216]
  405bc0:	bl	4039c0 <log_get_max_level_realm@plt>
  405bc4:	mov	w1, w0
  405bc8:	ldr	w0, [sp, #208]
  405bcc:	and	w0, w0, #0x7
  405bd0:	cmp	w1, w0
  405bd4:	b.lt	405c18 <main+0xa90>  // b.tstop
  405bd8:	ldr	w0, [sp, #216]
  405bdc:	lsl	w1, w0, #10
  405be0:	ldr	w0, [sp, #208]
  405be4:	orr	w6, w1, w0
  405be8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405bec:	add	x1, x0, #0x553
  405bf0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405bf4:	add	x5, x0, #0xc98
  405bf8:	adrp	x0, 40c000 <_fini+0xb30>
  405bfc:	add	x4, x0, #0x2a0
  405c00:	mov	w3, #0x1a8                 	// #424
  405c04:	mov	x2, x1
  405c08:	ldr	w1, [sp, #212]
  405c0c:	mov	w0, w6
  405c10:	bl	4036d0 <log_internal_realm@plt>
  405c14:	b	405c20 <main+0xa98>
  405c18:	ldr	w0, [sp, #212]
  405c1c:	cmp	w0, #0x0
  405c20:	ldrb	w0, [sp, #82]
  405c24:	cmp	w0, #0x0
  405c28:	b.eq	405e38 <main+0xcb0>  // b.none
  405c2c:	mov	w0, #0x6                   	// #6
  405c30:	str	w0, [sp, #244]
  405c34:	str	wzr, [sp, #248]
  405c38:	str	wzr, [sp, #252]
  405c3c:	ldr	w0, [sp, #252]
  405c40:	bl	4039c0 <log_get_max_level_realm@plt>
  405c44:	mov	w1, w0
  405c48:	ldr	w0, [sp, #244]
  405c4c:	and	w0, w0, #0x7
  405c50:	cmp	w1, w0
  405c54:	b.lt	405c98 <main+0xb10>  // b.tstop
  405c58:	ldr	w0, [sp, #252]
  405c5c:	lsl	w1, w0, #10
  405c60:	ldr	w0, [sp, #244]
  405c64:	orr	w6, w1, w0
  405c68:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405c6c:	add	x1, x0, #0x553
  405c70:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405c74:	add	x5, x0, #0xcb8
  405c78:	adrp	x0, 40c000 <_fini+0xb30>
  405c7c:	add	x4, x0, #0x2a0
  405c80:	mov	w3, #0x1ac                 	// #428
  405c84:	mov	x2, x1
  405c88:	ldr	w1, [sp, #248]
  405c8c:	mov	w0, w6
  405c90:	bl	4036d0 <log_internal_realm@plt>
  405c94:	b	405ca0 <main+0xb18>
  405c98:	ldr	w0, [sp, #248]
  405c9c:	cmp	w0, #0x0
  405ca0:	add	x0, sp, #0x4f
  405ca4:	ldr	w1, [sp, #96]
  405ca8:	bl	409e08 <loopback_detach_all>
  405cac:	str	w0, [sp, #92]
  405cb0:	ldr	w0, [sp, #92]
  405cb4:	cmp	w0, #0x0
  405cb8:	b.ne	405d38 <main+0xbb0>  // b.any
  405cbc:	strb	wzr, [sp, #82]
  405cc0:	mov	w0, #0x6                   	// #6
  405cc4:	str	w0, [sp, #280]
  405cc8:	str	wzr, [sp, #284]
  405ccc:	str	wzr, [sp, #288]
  405cd0:	ldr	w0, [sp, #288]
  405cd4:	bl	4039c0 <log_get_max_level_realm@plt>
  405cd8:	mov	w1, w0
  405cdc:	ldr	w0, [sp, #280]
  405ce0:	and	w0, w0, #0x7
  405ce4:	cmp	w1, w0
  405ce8:	b.lt	405d2c <main+0xba4>  // b.tstop
  405cec:	ldr	w0, [sp, #288]
  405cf0:	lsl	w1, w0, #10
  405cf4:	ldr	w0, [sp, #280]
  405cf8:	orr	w6, w1, w0
  405cfc:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405d00:	add	x1, x0, #0x553
  405d04:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405d08:	add	x5, x0, #0xcd0
  405d0c:	adrp	x0, 40c000 <_fini+0xb30>
  405d10:	add	x4, x0, #0x2a0
  405d14:	mov	w3, #0x1b0                 	// #432
  405d18:	mov	x2, x1
  405d1c:	ldr	w1, [sp, #284]
  405d20:	mov	w0, w6
  405d24:	bl	4036d0 <log_internal_realm@plt>
  405d28:	b	405e38 <main+0xcb0>
  405d2c:	ldr	w0, [sp, #284]
  405d30:	cmp	w0, #0x0
  405d34:	b	405e38 <main+0xcb0>
  405d38:	ldr	w0, [sp, #92]
  405d3c:	cmp	w0, #0x0
  405d40:	b.le	405dc0 <main+0xc38>
  405d44:	mov	w0, #0x6                   	// #6
  405d48:	str	w0, [sp, #268]
  405d4c:	str	wzr, [sp, #272]
  405d50:	str	wzr, [sp, #276]
  405d54:	ldr	w0, [sp, #276]
  405d58:	bl	4039c0 <log_get_max_level_realm@plt>
  405d5c:	mov	w1, w0
  405d60:	ldr	w0, [sp, #268]
  405d64:	and	w0, w0, #0x7
  405d68:	cmp	w1, w0
  405d6c:	b.lt	405db4 <main+0xc2c>  // b.tstop
  405d70:	ldr	w0, [sp, #276]
  405d74:	lsl	w1, w0, #10
  405d78:	ldr	w0, [sp, #268]
  405d7c:	orr	w7, w1, w0
  405d80:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405d84:	add	x1, x0, #0x553
  405d88:	ldr	w6, [sp, #92]
  405d8c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405d90:	add	x5, x0, #0xcf0
  405d94:	adrp	x0, 40c000 <_fini+0xb30>
  405d98:	add	x4, x0, #0x2a0
  405d9c:	mov	w3, #0x1b2                 	// #434
  405da0:	mov	x2, x1
  405da4:	ldr	w1, [sp, #272]
  405da8:	mov	w0, w7
  405dac:	bl	4036d0 <log_internal_realm@plt>
  405db0:	b	405e38 <main+0xcb0>
  405db4:	ldr	w0, [sp, #272]
  405db8:	cmp	w0, #0x0
  405dbc:	b	405e38 <main+0xcb0>
  405dc0:	mov	w0, #0x3                   	// #3
  405dc4:	str	w0, [sp, #256]
  405dc8:	ldr	w0, [sp, #92]
  405dcc:	str	w0, [sp, #260]
  405dd0:	str	wzr, [sp, #264]
  405dd4:	ldr	w0, [sp, #264]
  405dd8:	bl	4039c0 <log_get_max_level_realm@plt>
  405ddc:	mov	w1, w0
  405de0:	ldr	w0, [sp, #256]
  405de4:	and	w0, w0, #0x7
  405de8:	cmp	w1, w0
  405dec:	b.lt	405e30 <main+0xca8>  // b.tstop
  405df0:	ldr	w0, [sp, #264]
  405df4:	lsl	w1, w0, #10
  405df8:	ldr	w0, [sp, #256]
  405dfc:	orr	w6, w1, w0
  405e00:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405e04:	add	x1, x0, #0x553
  405e08:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405e0c:	add	x5, x0, #0xd18
  405e10:	adrp	x0, 40c000 <_fini+0xb30>
  405e14:	add	x4, x0, #0x2a0
  405e18:	mov	w3, #0x1b4                 	// #436
  405e1c:	mov	x2, x1
  405e20:	ldr	w1, [sp, #260]
  405e24:	mov	w0, w6
  405e28:	bl	4036d0 <log_internal_realm@plt>
  405e2c:	b	405e38 <main+0xcb0>
  405e30:	ldr	w0, [sp, #260]
  405e34:	cmp	w0, #0x0
  405e38:	ldrb	w0, [sp, #83]
  405e3c:	cmp	w0, #0x0
  405e40:	b.eq	406050 <main+0xec8>  // b.none
  405e44:	mov	w0, #0x6                   	// #6
  405e48:	str	w0, [sp, #292]
  405e4c:	str	wzr, [sp, #296]
  405e50:	str	wzr, [sp, #300]
  405e54:	ldr	w0, [sp, #300]
  405e58:	bl	4039c0 <log_get_max_level_realm@plt>
  405e5c:	mov	w1, w0
  405e60:	ldr	w0, [sp, #292]
  405e64:	and	w0, w0, #0x7
  405e68:	cmp	w1, w0
  405e6c:	b.lt	405eb0 <main+0xd28>  // b.tstop
  405e70:	ldr	w0, [sp, #300]
  405e74:	lsl	w1, w0, #10
  405e78:	ldr	w0, [sp, #292]
  405e7c:	orr	w6, w1, w0
  405e80:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405e84:	add	x1, x0, #0x553
  405e88:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405e8c:	add	x5, x0, #0xd40
  405e90:	adrp	x0, 40c000 <_fini+0xb30>
  405e94:	add	x4, x0, #0x2a0
  405e98:	mov	w3, #0x1b8                 	// #440
  405e9c:	mov	x2, x1
  405ea0:	ldr	w1, [sp, #296]
  405ea4:	mov	w0, w6
  405ea8:	bl	4036d0 <log_internal_realm@plt>
  405eac:	b	405eb8 <main+0xd30>
  405eb0:	ldr	w0, [sp, #296]
  405eb4:	cmp	w0, #0x0
  405eb8:	add	x0, sp, #0x4f
  405ebc:	ldr	w1, [sp, #96]
  405ec0:	bl	409ee8 <dm_detach_all>
  405ec4:	str	w0, [sp, #92]
  405ec8:	ldr	w0, [sp, #92]
  405ecc:	cmp	w0, #0x0
  405ed0:	b.ne	405f50 <main+0xdc8>  // b.any
  405ed4:	strb	wzr, [sp, #83]
  405ed8:	mov	w0, #0x6                   	// #6
  405edc:	str	w0, [sp, #328]
  405ee0:	str	wzr, [sp, #332]
  405ee4:	str	wzr, [sp, #336]
  405ee8:	ldr	w0, [sp, #336]
  405eec:	bl	4039c0 <log_get_max_level_realm@plt>
  405ef0:	mov	w1, w0
  405ef4:	ldr	w0, [sp, #328]
  405ef8:	and	w0, w0, #0x7
  405efc:	cmp	w1, w0
  405f00:	b.lt	405f44 <main+0xdbc>  // b.tstop
  405f04:	ldr	w0, [sp, #336]
  405f08:	lsl	w1, w0, #10
  405f0c:	ldr	w0, [sp, #328]
  405f10:	orr	w6, w1, w0
  405f14:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405f18:	add	x1, x0, #0x553
  405f1c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405f20:	add	x5, x0, #0xd58
  405f24:	adrp	x0, 40c000 <_fini+0xb30>
  405f28:	add	x4, x0, #0x2a0
  405f2c:	mov	w3, #0x1bc                 	// #444
  405f30:	mov	x2, x1
  405f34:	ldr	w1, [sp, #332]
  405f38:	mov	w0, w6
  405f3c:	bl	4036d0 <log_internal_realm@plt>
  405f40:	b	406050 <main+0xec8>
  405f44:	ldr	w0, [sp, #332]
  405f48:	cmp	w0, #0x0
  405f4c:	b	406050 <main+0xec8>
  405f50:	ldr	w0, [sp, #92]
  405f54:	cmp	w0, #0x0
  405f58:	b.le	405fd8 <main+0xe50>
  405f5c:	mov	w0, #0x6                   	// #6
  405f60:	str	w0, [sp, #316]
  405f64:	str	wzr, [sp, #320]
  405f68:	str	wzr, [sp, #324]
  405f6c:	ldr	w0, [sp, #324]
  405f70:	bl	4039c0 <log_get_max_level_realm@plt>
  405f74:	mov	w1, w0
  405f78:	ldr	w0, [sp, #316]
  405f7c:	and	w0, w0, #0x7
  405f80:	cmp	w1, w0
  405f84:	b.lt	405fcc <main+0xe44>  // b.tstop
  405f88:	ldr	w0, [sp, #324]
  405f8c:	lsl	w1, w0, #10
  405f90:	ldr	w0, [sp, #316]
  405f94:	orr	w7, w1, w0
  405f98:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405f9c:	add	x1, x0, #0x553
  405fa0:	ldr	w6, [sp, #92]
  405fa4:	adrp	x0, 40b000 <broadcast_signal+0x30>
  405fa8:	add	x5, x0, #0xd78
  405fac:	adrp	x0, 40c000 <_fini+0xb30>
  405fb0:	add	x4, x0, #0x2a0
  405fb4:	mov	w3, #0x1be                 	// #446
  405fb8:	mov	x2, x1
  405fbc:	ldr	w1, [sp, #320]
  405fc0:	mov	w0, w7
  405fc4:	bl	4036d0 <log_internal_realm@plt>
  405fc8:	b	406050 <main+0xec8>
  405fcc:	ldr	w0, [sp, #320]
  405fd0:	cmp	w0, #0x0
  405fd4:	b	406050 <main+0xec8>
  405fd8:	mov	w0, #0x3                   	// #3
  405fdc:	str	w0, [sp, #304]
  405fe0:	ldr	w0, [sp, #92]
  405fe4:	str	w0, [sp, #308]
  405fe8:	str	wzr, [sp, #312]
  405fec:	ldr	w0, [sp, #312]
  405ff0:	bl	4039c0 <log_get_max_level_realm@plt>
  405ff4:	mov	w1, w0
  405ff8:	ldr	w0, [sp, #304]
  405ffc:	and	w0, w0, #0x7
  406000:	cmp	w1, w0
  406004:	b.lt	406048 <main+0xec0>  // b.tstop
  406008:	ldr	w0, [sp, #312]
  40600c:	lsl	w1, w0, #10
  406010:	ldr	w0, [sp, #304]
  406014:	orr	w6, w1, w0
  406018:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40601c:	add	x1, x0, #0x553
  406020:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406024:	add	x5, x0, #0xda0
  406028:	adrp	x0, 40c000 <_fini+0xb30>
  40602c:	add	x4, x0, #0x2a0
  406030:	mov	w3, #0x1c0                 	// #448
  406034:	mov	x2, x1
  406038:	ldr	w1, [sp, #308]
  40603c:	mov	w0, w6
  406040:	bl	4036d0 <log_internal_realm@plt>
  406044:	b	406050 <main+0xec8>
  406048:	ldr	w0, [sp, #308]
  40604c:	cmp	w0, #0x0
  406050:	ldrb	w0, [sp, #80]
  406054:	eor	w0, w0, #0x1
  406058:	and	w0, w0, #0xff
  40605c:	cmp	w0, #0x0
  406060:	b.eq	406118 <main+0xf90>  // b.none
  406064:	ldrb	w0, [sp, #81]
  406068:	eor	w0, w0, #0x1
  40606c:	and	w0, w0, #0xff
  406070:	cmp	w0, #0x0
  406074:	b.eq	406118 <main+0xf90>  // b.none
  406078:	ldrb	w0, [sp, #82]
  40607c:	eor	w0, w0, #0x1
  406080:	and	w0, w0, #0xff
  406084:	cmp	w0, #0x0
  406088:	b.eq	406118 <main+0xf90>  // b.none
  40608c:	ldrb	w0, [sp, #83]
  406090:	eor	w0, w0, #0x1
  406094:	and	w0, w0, #0xff
  406098:	cmp	w0, #0x0
  40609c:	b.eq	406118 <main+0xf90>  // b.none
  4060a0:	mov	w0, #0x6                   	// #6
  4060a4:	str	w0, [sp, #340]
  4060a8:	str	wzr, [sp, #344]
  4060ac:	str	wzr, [sp, #348]
  4060b0:	ldr	w0, [sp, #348]
  4060b4:	bl	4039c0 <log_get_max_level_realm@plt>
  4060b8:	mov	w1, w0
  4060bc:	ldr	w0, [sp, #340]
  4060c0:	and	w0, w0, #0x7
  4060c4:	cmp	w1, w0
  4060c8:	b.lt	40610c <main+0xf84>  // b.tstop
  4060cc:	ldr	w0, [sp, #348]
  4060d0:	lsl	w1, w0, #10
  4060d4:	ldr	w0, [sp, #340]
  4060d8:	orr	w6, w1, w0
  4060dc:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4060e0:	add	x1, x0, #0x553
  4060e4:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4060e8:	add	x5, x0, #0xdc0
  4060ec:	adrp	x0, 40c000 <_fini+0xb30>
  4060f0:	add	x4, x0, #0x2a0
  4060f4:	mov	w3, #0x1c4                 	// #452
  4060f8:	mov	x2, x1
  4060fc:	ldr	w1, [sp, #344]
  406100:	mov	w0, w6
  406104:	bl	4036d0 <log_internal_realm@plt>
  406108:	b	40637c <main+0x11f4>
  40610c:	ldr	w0, [sp, #344]
  406110:	cmp	w0, #0x0
  406114:	b	40637c <main+0x11f4>
  406118:	ldrb	w0, [sp, #79]
  40611c:	eor	w0, w0, #0x1
  406120:	and	w0, w0, #0xff
  406124:	cmp	w0, #0x0
  406128:	b.eq	406158 <main+0xfd0>  // b.none
  40612c:	ldr	w0, [sp, #96]
  406130:	cmp	w0, #0x6
  406134:	b.ne	406158 <main+0xfd0>  // b.any
  406138:	ldrb	w0, [sp, #87]
  40613c:	eor	w0, w0, #0x1
  406140:	and	w0, w0, #0xff
  406144:	cmp	w0, #0x0
  406148:	b.eq	406158 <main+0xfd0>  // b.none
  40614c:	mov	w0, #0x3                   	// #3
  406150:	str	w0, [sp, #96]
  406154:	b	4057bc <main+0x634>
  406158:	ldrb	w0, [sp, #79]
  40615c:	eor	w0, w0, #0x1
  406160:	and	w0, w0, #0xff
  406164:	cmp	w0, #0x0
  406168:	b.eq	406274 <main+0x10ec>  // b.none
  40616c:	mov	w0, #0x6                   	// #6
  406170:	str	w0, [sp, #364]
  406174:	str	wzr, [sp, #368]
  406178:	str	wzr, [sp, #372]
  40617c:	ldr	w0, [sp, #372]
  406180:	bl	4039c0 <log_get_max_level_realm@plt>
  406184:	mov	w1, w0
  406188:	ldr	w0, [sp, #364]
  40618c:	and	w0, w0, #0x7
  406190:	cmp	w1, w0
  406194:	b.lt	406268 <main+0x10e0>  // b.tstop
  406198:	ldr	w0, [sp, #372]
  40619c:	lsl	w1, w0, #10
  4061a0:	ldr	w0, [sp, #364]
  4061a4:	orr	w8, w1, w0
  4061a8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4061ac:	add	x9, x0, #0x553
  4061b0:	ldrb	w0, [sp, #80]
  4061b4:	cmp	w0, #0x0
  4061b8:	b.eq	4061c8 <main+0x1040>  // b.none
  4061bc:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4061c0:	add	x2, x0, #0xe00
  4061c4:	b	4061d0 <main+0x1048>
  4061c8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4061cc:	add	x2, x0, #0xe10
  4061d0:	ldrb	w0, [sp, #81]
  4061d4:	cmp	w0, #0x0
  4061d8:	b.eq	4061e8 <main+0x1060>  // b.none
  4061dc:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4061e0:	add	x3, x0, #0xe18
  4061e4:	b	4061f0 <main+0x1068>
  4061e8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4061ec:	add	x3, x0, #0xe10
  4061f0:	ldrb	w0, [sp, #82]
  4061f4:	cmp	w0, #0x0
  4061f8:	b.eq	406208 <main+0x1080>  // b.none
  4061fc:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406200:	add	x0, x0, #0xe28
  406204:	b	406210 <main+0x1088>
  406208:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40620c:	add	x0, x0, #0xe10
  406210:	ldrb	w1, [sp, #83]
  406214:	cmp	w1, #0x0
  406218:	b.eq	406228 <main+0x10a0>  // b.none
  40621c:	adrp	x1, 40b000 <broadcast_signal+0x30>
  406220:	add	x1, x1, #0xe38
  406224:	b	406230 <main+0x10a8>
  406228:	adrp	x1, 40b000 <broadcast_signal+0x30>
  40622c:	add	x1, x1, #0xe10
  406230:	str	x1, [sp, #8]
  406234:	str	x0, [sp]
  406238:	mov	x7, x3
  40623c:	mov	x6, x2
  406240:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406244:	add	x5, x0, #0xe48
  406248:	adrp	x0, 40c000 <_fini+0xb30>
  40624c:	add	x4, x0, #0x2a0
  406250:	mov	w3, #0x1d6                 	// #470
  406254:	mov	x2, x9
  406258:	ldr	w1, [sp, #368]
  40625c:	mov	w0, w8
  406260:	bl	4036d0 <log_internal_realm@plt>
  406264:	b	40637c <main+0x11f4>
  406268:	ldr	w0, [sp, #368]
  40626c:	cmp	w0, #0x0
  406270:	b	40637c <main+0x11f4>
  406274:	mov	w0, #0x7                   	// #7
  406278:	str	w0, [sp, #352]
  40627c:	str	wzr, [sp, #356]
  406280:	str	wzr, [sp, #360]
  406284:	ldr	w0, [sp, #360]
  406288:	bl	4039c0 <log_get_max_level_realm@plt>
  40628c:	mov	w1, w0
  406290:	ldr	w0, [sp, #352]
  406294:	and	w0, w0, #0x7
  406298:	cmp	w1, w0
  40629c:	b.lt	406370 <main+0x11e8>  // b.tstop
  4062a0:	ldr	w0, [sp, #360]
  4062a4:	lsl	w1, w0, #10
  4062a8:	ldr	w0, [sp, #352]
  4062ac:	orr	w8, w1, w0
  4062b0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4062b4:	add	x9, x0, #0x553
  4062b8:	ldrb	w0, [sp, #80]
  4062bc:	cmp	w0, #0x0
  4062c0:	b.eq	4062d0 <main+0x1148>  // b.none
  4062c4:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4062c8:	add	x2, x0, #0xe00
  4062cc:	b	4062d8 <main+0x1150>
  4062d0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4062d4:	add	x2, x0, #0xe10
  4062d8:	ldrb	w0, [sp, #81]
  4062dc:	cmp	w0, #0x0
  4062e0:	b.eq	4062f0 <main+0x1168>  // b.none
  4062e4:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4062e8:	add	x3, x0, #0xe18
  4062ec:	b	4062f8 <main+0x1170>
  4062f0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4062f4:	add	x3, x0, #0xe10
  4062f8:	ldrb	w0, [sp, #82]
  4062fc:	cmp	w0, #0x0
  406300:	b.eq	406310 <main+0x1188>  // b.none
  406304:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406308:	add	x0, x0, #0xe28
  40630c:	b	406318 <main+0x1190>
  406310:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406314:	add	x0, x0, #0xe10
  406318:	ldrb	w1, [sp, #83]
  40631c:	cmp	w1, #0x0
  406320:	b.eq	406330 <main+0x11a8>  // b.none
  406324:	adrp	x1, 40b000 <broadcast_signal+0x30>
  406328:	add	x1, x1, #0xe38
  40632c:	b	406338 <main+0x11b0>
  406330:	adrp	x1, 40b000 <broadcast_signal+0x30>
  406334:	add	x1, x1, #0xe10
  406338:	str	x1, [sp, #8]
  40633c:	str	x0, [sp]
  406340:	mov	x7, x3
  406344:	mov	x6, x2
  406348:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40634c:	add	x5, x0, #0xe78
  406350:	adrp	x0, 40c000 <_fini+0xb30>
  406354:	add	x4, x0, #0x2a0
  406358:	mov	w3, #0x1de                 	// #478
  40635c:	mov	x2, x9
  406360:	ldr	w1, [sp, #356]
  406364:	mov	w0, w8
  406368:	bl	4036d0 <log_internal_realm@plt>
  40636c:	b	4057bc <main+0x634>
  406370:	ldr	w0, [sp, #356]
  406374:	cmp	w0, #0x0
  406378:	b	4057bc <main+0x634>
  40637c:	bl	403ca8 <watchdog_free_device>
  406380:	str	xzr, [sp, #536]
  406384:	adrp	x0, 41f000 <arg_timeout>
  406388:	add	x0, x0, #0x18
  40638c:	ldr	x0, [x0]
  406390:	str	x0, [sp, #544]
  406394:	str	xzr, [sp, #552]
  406398:	add	x0, sp, #0x218
  40639c:	mov	w6, #0x3                   	// #3
  4063a0:	mov	x5, #0x0                   	// #0
  4063a4:	mov	x4, x0
  4063a8:	mov	x3, #0x0                   	// #0
  4063ac:	mov	x2, #0x0                   	// #0
  4063b0:	mov	x1, #0x4a80                	// #19072
  4063b4:	movk	x1, #0x55d, lsl #16
  4063b8:	adrp	x0, 40c000 <_fini+0xb30>
  4063bc:	add	x0, x0, #0x2a8
  4063c0:	bl	403910 <execute_directories@plt>
  4063c4:	bl	4036b0 <rlimit_nofile_safe@plt>
  4063c8:	ldrb	w0, [sp, #87]
  4063cc:	cmp	w0, #0x0
  4063d0:	b.ne	4063d8 <main+0x1250>  // b.any
  4063d4:	b	406580 <main+0x13f8>
  4063d8:	bl	404424 <switch_root_initramfs>
  4063dc:	str	w0, [sp, #92]
  4063e0:	ldr	w0, [sp, #92]
  4063e4:	cmp	w0, #0x0
  4063e8:	b.lt	406508 <main+0x1380>  // b.tstop
  4063ec:	ldr	x0, [sp, #48]
  4063f0:	adrp	x1, 40b000 <broadcast_signal+0x30>
  4063f4:	add	x1, x1, #0xeb0
  4063f8:	str	x1, [x0]
  4063fc:	bl	4033b0 <setsid@plt>
  406400:	bl	403460 <make_console_stdio@plt>
  406404:	mov	w0, #0x6                   	// #6
  406408:	str	w0, [sp, #388]
  40640c:	str	wzr, [sp, #392]
  406410:	str	wzr, [sp, #396]
  406414:	ldr	w0, [sp, #396]
  406418:	bl	4039c0 <log_get_max_level_realm@plt>
  40641c:	mov	w1, w0
  406420:	ldr	w0, [sp, #388]
  406424:	and	w0, w0, #0x7
  406428:	cmp	w1, w0
  40642c:	b.lt	406470 <main+0x12e8>  // b.tstop
  406430:	ldr	w0, [sp, #396]
  406434:	lsl	w1, w0, #10
  406438:	ldr	w0, [sp, #388]
  40643c:	orr	w6, w1, w0
  406440:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406444:	add	x1, x0, #0x553
  406448:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40644c:	add	x5, x0, #0xec0
  406450:	adrp	x0, 40c000 <_fini+0xb30>
  406454:	add	x4, x0, #0x2a0
  406458:	mov	w3, #0x1f7                 	// #503
  40645c:	mov	x2, x1
  406460:	ldr	w1, [sp, #392]
  406464:	mov	w0, w6
  406468:	bl	4036d0 <log_internal_realm@plt>
  40646c:	b	406478 <main+0x12f0>
  406470:	ldr	w0, [sp, #392]
  406474:	cmp	w0, #0x0
  406478:	ldr	x1, [sp, #48]
  40647c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406480:	add	x0, x0, #0xeb0
  406484:	bl	403800 <execv@plt>
  406488:	mov	w0, #0x3                   	// #3
  40648c:	str	w0, [sp, #400]
  406490:	bl	4034e0 <__errno_location@plt>
  406494:	ldr	w0, [x0]
  406498:	str	w0, [sp, #404]
  40649c:	str	wzr, [sp, #408]
  4064a0:	ldr	w0, [sp, #408]
  4064a4:	bl	4039c0 <log_get_max_level_realm@plt>
  4064a8:	mov	w1, w0
  4064ac:	ldr	w0, [sp, #400]
  4064b0:	and	w0, w0, #0x7
  4064b4:	cmp	w1, w0
  4064b8:	b.lt	4064fc <main+0x1374>  // b.tstop
  4064bc:	ldr	w0, [sp, #408]
  4064c0:	lsl	w1, w0, #10
  4064c4:	ldr	w0, [sp, #400]
  4064c8:	orr	w6, w1, w0
  4064cc:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4064d0:	add	x1, x0, #0x553
  4064d4:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4064d8:	add	x5, x0, #0xf00
  4064dc:	adrp	x0, 40c000 <_fini+0xb30>
  4064e0:	add	x4, x0, #0x2a0
  4064e4:	mov	w3, #0x1fb                 	// #507
  4064e8:	mov	x2, x1
  4064ec:	ldr	w1, [sp, #404]
  4064f0:	mov	w0, w6
  4064f4:	bl	4036d0 <log_internal_realm@plt>
  4064f8:	b	406580 <main+0x13f8>
  4064fc:	ldr	w0, [sp, #404]
  406500:	cmp	w0, #0x0
  406504:	b	406580 <main+0x13f8>
  406508:	mov	w0, #0x3                   	// #3
  40650c:	str	w0, [sp, #376]
  406510:	ldr	w0, [sp, #92]
  406514:	str	w0, [sp, #380]
  406518:	str	wzr, [sp, #384]
  40651c:	ldr	w0, [sp, #384]
  406520:	bl	4039c0 <log_get_max_level_realm@plt>
  406524:	mov	w1, w0
  406528:	ldr	w0, [sp, #376]
  40652c:	and	w0, w0, #0x7
  406530:	cmp	w1, w0
  406534:	b.lt	406578 <main+0x13f0>  // b.tstop
  406538:	ldr	w0, [sp, #384]
  40653c:	lsl	w1, w0, #10
  406540:	ldr	w0, [sp, #376]
  406544:	orr	w6, w1, w0
  406548:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40654c:	add	x1, x0, #0x553
  406550:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406554:	add	x5, x0, #0xf28
  406558:	adrp	x0, 40c000 <_fini+0xb30>
  40655c:	add	x4, x0, #0x2a0
  406560:	mov	w3, #0x1fd                 	// #509
  406564:	mov	x2, x1
  406568:	ldr	w1, [sp, #380]
  40656c:	mov	w0, w6
  406570:	bl	4036d0 <log_internal_realm@plt>
  406574:	b	406580 <main+0x13f8>
  406578:	ldr	w0, [sp, #380]
  40657c:	cmp	w0, #0x0
  406580:	ldrb	w0, [sp, #80]
  406584:	cmp	w0, #0x0
  406588:	b.ne	4065b0 <main+0x1428>  // b.any
  40658c:	ldrb	w0, [sp, #81]
  406590:	cmp	w0, #0x0
  406594:	b.ne	4065b0 <main+0x1428>  // b.any
  406598:	ldrb	w0, [sp, #82]
  40659c:	cmp	w0, #0x0
  4065a0:	b.ne	4065b0 <main+0x1428>  // b.any
  4065a4:	ldrb	w0, [sp, #83]
  4065a8:	cmp	w0, #0x0
  4065ac:	b.eq	4066b4 <main+0x152c>  // b.none
  4065b0:	mov	w0, #0x3                   	// #3
  4065b4:	str	w0, [sp, #412]
  4065b8:	str	wzr, [sp, #416]
  4065bc:	str	wzr, [sp, #420]
  4065c0:	ldr	w0, [sp, #420]
  4065c4:	bl	4039c0 <log_get_max_level_realm@plt>
  4065c8:	mov	w1, w0
  4065cc:	ldr	w0, [sp, #412]
  4065d0:	and	w0, w0, #0x7
  4065d4:	cmp	w1, w0
  4065d8:	b.lt	4066ac <main+0x1524>  // b.tstop
  4065dc:	ldr	w0, [sp, #420]
  4065e0:	lsl	w1, w0, #10
  4065e4:	ldr	w0, [sp, #412]
  4065e8:	orr	w8, w1, w0
  4065ec:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4065f0:	add	x9, x0, #0x553
  4065f4:	ldrb	w0, [sp, #80]
  4065f8:	cmp	w0, #0x0
  4065fc:	b.eq	40660c <main+0x1484>  // b.none
  406600:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406604:	add	x2, x0, #0xe00
  406608:	b	406614 <main+0x148c>
  40660c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406610:	add	x2, x0, #0xe10
  406614:	ldrb	w0, [sp, #81]
  406618:	cmp	w0, #0x0
  40661c:	b.eq	40662c <main+0x14a4>  // b.none
  406620:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406624:	add	x3, x0, #0xe18
  406628:	b	406634 <main+0x14ac>
  40662c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406630:	add	x3, x0, #0xe10
  406634:	ldrb	w0, [sp, #82]
  406638:	cmp	w0, #0x0
  40663c:	b.eq	40664c <main+0x14c4>  // b.none
  406640:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406644:	add	x0, x0, #0xe28
  406648:	b	406654 <main+0x14cc>
  40664c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406650:	add	x0, x0, #0xe10
  406654:	ldrb	w1, [sp, #83]
  406658:	cmp	w1, #0x0
  40665c:	b.eq	40666c <main+0x14e4>  // b.none
  406660:	adrp	x1, 40b000 <broadcast_signal+0x30>
  406664:	add	x1, x1, #0xe38
  406668:	b	406674 <main+0x14ec>
  40666c:	adrp	x1, 40b000 <broadcast_signal+0x30>
  406670:	add	x1, x1, #0xe10
  406674:	str	x1, [sp, #8]
  406678:	str	x0, [sp]
  40667c:	mov	x7, x3
  406680:	mov	x6, x2
  406684:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406688:	add	x5, x0, #0xf58
  40668c:	adrp	x0, 40c000 <_fini+0xb30>
  406690:	add	x4, x0, #0x2a0
  406694:	mov	w3, #0x201                 	// #513
  406698:	mov	x2, x9
  40669c:	ldr	w1, [sp, #416]
  4066a0:	mov	w0, w8
  4066a4:	bl	4036d0 <log_internal_realm@plt>
  4066a8:	b	4066b4 <main+0x152c>
  4066ac:	ldr	w0, [sp, #416]
  4066b0:	cmp	w0, #0x0
  4066b4:	ldrb	w0, [sp, #86]
  4066b8:	eor	w0, w0, #0x1
  4066bc:	and	w0, w0, #0xff
  4066c0:	cmp	w0, #0x0
  4066c4:	b.eq	4066cc <main+0x1544>  // b.none
  4066c8:	bl	4049a8 <sync_with_progress>
  4066cc:	adrp	x0, 41f000 <arg_timeout>
  4066d0:	add	x0, x0, #0x18
  4066d4:	ldr	x2, [x0]
  4066d8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4066dc:	add	x1, x0, #0xaa8
  4066e0:	mov	x0, x2
  4066e4:	bl	403780 <strcmp@plt>
  4066e8:	cmp	w0, #0x0
  4066ec:	b.ne	40671c <main+0x1594>  // b.any
  4066f0:	ldrb	w0, [sp, #86]
  4066f4:	cmp	w0, #0x0
  4066f8:	b.eq	406710 <main+0x1588>  // b.none
  4066fc:	adrp	x0, 41f000 <arg_timeout>
  406700:	add	x0, x0, #0x20
  406704:	ldrb	w0, [x0]
  406708:	mov	w19, w0
  40670c:	b	406bcc <main+0x1a44>
  406710:	mov	w0, #0xfedc                	// #65244
  406714:	movk	w0, #0x4321, lsl #16
  406718:	str	w0, [sp, #88]
  40671c:	ldr	w1, [sp, #88]
  406720:	mov	w0, #0x4543                	// #17731
  406724:	movk	w0, #0x4558, lsl #16
  406728:	cmp	w1, w0
  40672c:	b.eq	406798 <main+0x1610>  // b.none
  406730:	ldr	w1, [sp, #88]
  406734:	mov	w0, #0x4543                	// #17731
  406738:	movk	w0, #0x4558, lsl #16
  40673c:	cmp	w1, w0
  406740:	b.gt	4069f4 <main+0x186c>
  406744:	ldr	w1, [sp, #88]
  406748:	mov	w0, #0xfedc                	// #65244
  40674c:	movk	w0, #0x4321, lsl #16
  406750:	cmp	w1, w0
  406754:	b.eq	406904 <main+0x177c>  // b.none
  406758:	ldr	w1, [sp, #88]
  40675c:	mov	w0, #0xfedc                	// #65244
  406760:	movk	w0, #0x4321, lsl #16
  406764:	cmp	w1, w0
  406768:	b.gt	4069f4 <main+0x186c>
  40676c:	ldr	w1, [sp, #88]
  406770:	mov	w0, #0x123                 	// #291
  406774:	movk	w0, #0xcdef, lsl #16
  406778:	cmp	w1, w0
  40677c:	b.eq	40697c <main+0x17f4>  // b.none
  406780:	ldr	w1, [sp, #88]
  406784:	mov	w0, #0x4567                	// #17767
  406788:	movk	w0, #0x123, lsl #16
  40678c:	cmp	w1, w0
  406790:	b.eq	406884 <main+0x16fc>  // b.none
  406794:	b	4069f4 <main+0x186c>
  406798:	ldrb	w0, [sp, #86]
  40679c:	eor	w0, w0, #0x1
  4067a0:	and	w0, w0, #0xff
  4067a4:	cmp	w0, #0x0
  4067a8:	b.eq	406878 <main+0x16f0>  // b.none
  4067ac:	mov	w0, #0x6                   	// #6
  4067b0:	str	w0, [sp, #424]
  4067b4:	str	wzr, [sp, #428]
  4067b8:	str	wzr, [sp, #432]
  4067bc:	ldr	w0, [sp, #432]
  4067c0:	bl	4039c0 <log_get_max_level_realm@plt>
  4067c4:	mov	w1, w0
  4067c8:	ldr	w0, [sp, #424]
  4067cc:	and	w0, w0, #0x7
  4067d0:	cmp	w1, w0
  4067d4:	b.lt	406818 <main+0x1690>  // b.tstop
  4067d8:	ldr	w0, [sp, #432]
  4067dc:	lsl	w1, w0, #10
  4067e0:	ldr	w0, [sp, #424]
  4067e4:	orr	w6, w1, w0
  4067e8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4067ec:	add	x1, x0, #0x553
  4067f0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4067f4:	add	x5, x0, #0xf80
  4067f8:	adrp	x0, 40c000 <_fini+0xb30>
  4067fc:	add	x4, x0, #0x2a0
  406800:	mov	w3, #0x21b                 	// #539
  406804:	mov	x2, x1
  406808:	ldr	w1, [sp, #428]
  40680c:	mov	w0, w6
  406810:	bl	4036d0 <log_internal_realm@plt>
  406814:	b	406820 <main+0x1698>
  406818:	ldr	w0, [sp, #428]
  40681c:	cmp	w0, #0x0
  406820:	mov	x2, #0x0                   	// #0
  406824:	mov	w1, #0x63                  	// #99
  406828:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40682c:	add	x0, x0, #0xf98
  406830:	bl	403c10 <safe_fork>
  406834:	str	w0, [sp, #92]
  406838:	ldr	w0, [sp, #92]
  40683c:	cmp	w0, #0x0
  406840:	b.ne	406878 <main+0x16f0>  // b.any
  406844:	adrp	x0, 40c000 <_fini+0xb30>
  406848:	add	x0, x0, #0x50
  40684c:	add	x2, sp, #0x230
  406850:	mov	x3, x0
  406854:	ldp	x0, x1, [x3]
  406858:	stp	x0, x1, [x2]
  40685c:	ldr	x0, [x3, #16]
  406860:	str	x0, [x2, #16]
  406864:	ldr	x0, [sp, #560]
  406868:	add	x1, sp, #0x230
  40686c:	bl	403800 <execv@plt>
  406870:	mov	w0, #0x1                   	// #1
  406874:	bl	403320 <_exit@plt>
  406878:	mov	w0, #0x4567                	// #17767
  40687c:	movk	w0, #0x123, lsl #16
  406880:	str	w0, [sp, #88]
  406884:	mov	w0, #0x1                   	// #1
  406888:	bl	403330 <reboot_with_parameter@plt>
  40688c:	mov	w0, #0x6                   	// #6
  406890:	str	w0, [sp, #448]
  406894:	str	wzr, [sp, #452]
  406898:	str	wzr, [sp, #456]
  40689c:	ldr	w0, [sp, #456]
  4068a0:	bl	4039c0 <log_get_max_level_realm@plt>
  4068a4:	mov	w1, w0
  4068a8:	ldr	w0, [sp, #448]
  4068ac:	and	w0, w0, #0x7
  4068b0:	cmp	w1, w0
  4068b4:	b.lt	4068f8 <main+0x1770>  // b.tstop
  4068b8:	ldr	w0, [sp, #456]
  4068bc:	lsl	w1, w0, #10
  4068c0:	ldr	w0, [sp, #448]
  4068c4:	orr	w6, w1, w0
  4068c8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4068cc:	add	x1, x0, #0x553
  4068d0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4068d4:	add	x5, x0, #0xfa8
  4068d8:	adrp	x0, 40c000 <_fini+0xb30>
  4068dc:	add	x4, x0, #0x2a0
  4068e0:	mov	w3, #0x231                 	// #561
  4068e4:	mov	x2, x1
  4068e8:	ldr	w1, [sp, #452]
  4068ec:	mov	w0, w6
  4068f0:	bl	4036d0 <log_internal_realm@plt>
  4068f4:	b	406a1c <main+0x1894>
  4068f8:	ldr	w0, [sp, #452]
  4068fc:	cmp	w0, #0x0
  406900:	b	406a1c <main+0x1894>
  406904:	mov	w0, #0x6                   	// #6
  406908:	str	w0, [sp, #436]
  40690c:	str	wzr, [sp, #440]
  406910:	str	wzr, [sp, #444]
  406914:	ldr	w0, [sp, #444]
  406918:	bl	4039c0 <log_get_max_level_realm@plt>
  40691c:	mov	w1, w0
  406920:	ldr	w0, [sp, #436]
  406924:	and	w0, w0, #0x7
  406928:	cmp	w1, w0
  40692c:	b.lt	406970 <main+0x17e8>  // b.tstop
  406930:	ldr	w0, [sp, #444]
  406934:	lsl	w1, w0, #10
  406938:	ldr	w0, [sp, #436]
  40693c:	orr	w6, w1, w0
  406940:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406944:	add	x1, x0, #0x553
  406948:	adrp	x0, 40b000 <broadcast_signal+0x30>
  40694c:	add	x5, x0, #0xfb8
  406950:	adrp	x0, 40c000 <_fini+0xb30>
  406954:	add	x4, x0, #0x2a0
  406958:	mov	w3, #0x235                 	// #565
  40695c:	mov	x2, x1
  406960:	ldr	w1, [sp, #440]
  406964:	mov	w0, w6
  406968:	bl	4036d0 <log_internal_realm@plt>
  40696c:	b	406a1c <main+0x1894>
  406970:	ldr	w0, [sp, #440]
  406974:	cmp	w0, #0x0
  406978:	b	406a1c <main+0x1894>
  40697c:	mov	w0, #0x6                   	// #6
  406980:	str	w0, [sp, #460]
  406984:	str	wzr, [sp, #464]
  406988:	str	wzr, [sp, #468]
  40698c:	ldr	w0, [sp, #468]
  406990:	bl	4039c0 <log_get_max_level_realm@plt>
  406994:	mov	w1, w0
  406998:	ldr	w0, [sp, #460]
  40699c:	and	w0, w0, #0x7
  4069a0:	cmp	w1, w0
  4069a4:	b.lt	4069e8 <main+0x1860>  // b.tstop
  4069a8:	ldr	w0, [sp, #468]
  4069ac:	lsl	w1, w0, #10
  4069b0:	ldr	w0, [sp, #460]
  4069b4:	orr	w6, w1, w0
  4069b8:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4069bc:	add	x1, x0, #0x553
  4069c0:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4069c4:	add	x5, x0, #0xfc8
  4069c8:	adrp	x0, 40c000 <_fini+0xb30>
  4069cc:	add	x4, x0, #0x2a0
  4069d0:	mov	w3, #0x239                 	// #569
  4069d4:	mov	x2, x1
  4069d8:	ldr	w1, [sp, #464]
  4069dc:	mov	w0, w6
  4069e0:	bl	4036d0 <log_internal_realm@plt>
  4069e4:	b	406a1c <main+0x1894>
  4069e8:	ldr	w0, [sp, #464]
  4069ec:	cmp	w0, #0x0
  4069f0:	b	406a1c <main+0x1894>
  4069f4:	adrp	x0, 40b000 <broadcast_signal+0x30>
  4069f8:	add	x1, x0, #0x553
  4069fc:	adrp	x0, 40c000 <_fini+0xb30>
  406a00:	add	x4, x0, #0x2b8
  406a04:	mov	w3, #0x23d                 	// #573
  406a08:	mov	x2, x1
  406a0c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406a10:	add	x1, x0, #0xfd8
  406a14:	mov	w0, #0x0                   	// #0
  406a18:	bl	403340 <log_assert_failed_unreachable_realm@plt>
  406a1c:	ldr	w0, [sp, #88]
  406a20:	bl	403880 <reboot@plt>
  406a24:	bl	4034e0 <__errno_location@plt>
  406a28:	ldr	w0, [x0]
  406a2c:	cmp	w0, #0x1
  406a30:	b.ne	406abc <main+0x1934>  // b.any
  406a34:	ldrb	w0, [sp, #86]
  406a38:	cmp	w0, #0x0
  406a3c:	b.eq	406abc <main+0x1934>  // b.none
  406a40:	mov	w0, #0x6                   	// #6
  406a44:	str	w0, [sp, #472]
  406a48:	str	wzr, [sp, #476]
  406a4c:	str	wzr, [sp, #480]
  406a50:	ldr	w0, [sp, #480]
  406a54:	bl	4039c0 <log_get_max_level_realm@plt>
  406a58:	mov	w1, w0
  406a5c:	ldr	w0, [sp, #472]
  406a60:	and	w0, w0, #0x7
  406a64:	cmp	w1, w0
  406a68:	b.lt	406aac <main+0x1924>  // b.tstop
  406a6c:	ldr	w0, [sp, #480]
  406a70:	lsl	w1, w0, #10
  406a74:	ldr	w0, [sp, #472]
  406a78:	orr	w6, w1, w0
  406a7c:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406a80:	add	x1, x0, #0x553
  406a84:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406a88:	add	x5, x0, #0xfe8
  406a8c:	adrp	x0, 40c000 <_fini+0xb30>
  406a90:	add	x4, x0, #0x2a0
  406a94:	mov	w3, #0x245                 	// #581
  406a98:	mov	x2, x1
  406a9c:	ldr	w1, [sp, #476]
  406aa0:	mov	w0, w6
  406aa4:	bl	4036d0 <log_internal_realm@plt>
  406aa8:	b	406ab4 <main+0x192c>
  406aac:	ldr	w0, [sp, #476]
  406ab0:	cmp	w0, #0x0
  406ab4:	mov	w19, #0x0                   	// #0
  406ab8:	b	406bcc <main+0x1a44>
  406abc:	mov	w0, #0x3                   	// #3
  406ac0:	str	w0, [sp, #484]
  406ac4:	bl	4034e0 <__errno_location@plt>
  406ac8:	ldr	w0, [x0]
  406acc:	str	w0, [sp, #488]
  406ad0:	str	wzr, [sp, #492]
  406ad4:	ldr	w0, [sp, #492]
  406ad8:	bl	4039c0 <log_get_max_level_realm@plt>
  406adc:	mov	w1, w0
  406ae0:	ldr	w0, [sp, #484]
  406ae4:	and	w0, w0, #0x7
  406ae8:	cmp	w1, w0
  406aec:	b.lt	406b30 <main+0x19a8>  // b.tstop
  406af0:	ldr	w0, [sp, #492]
  406af4:	lsl	w1, w0, #10
  406af8:	ldr	w0, [sp, #484]
  406afc:	orr	w6, w1, w0
  406b00:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406b04:	add	x1, x0, #0x553
  406b08:	adrp	x0, 40c000 <_fini+0xb30>
  406b0c:	add	x5, x0, #0x0
  406b10:	adrp	x0, 40c000 <_fini+0xb30>
  406b14:	add	x4, x0, #0x2a0
  406b18:	mov	w3, #0x249                 	// #585
  406b1c:	mov	x2, x1
  406b20:	ldr	w1, [sp, #488]
  406b24:	mov	w0, w6
  406b28:	bl	4036d0 <log_internal_realm@plt>
  406b2c:	b	406b44 <main+0x19bc>
  406b30:	ldr	w0, [sp, #488]
  406b34:	cmp	w0, #0x0
  406b38:	cneg	w0, w0, lt  // lt = tstop
  406b3c:	and	w0, w0, #0xff
  406b40:	neg	w0, w0
  406b44:	str	w0, [sp, #92]
  406b48:	b	406b50 <main+0x19c8>
  406b4c:	nop
  406b50:	bl	403770 <log_emergency_level@plt>
  406b54:	str	w0, [sp, #508]
  406b58:	ldr	w0, [sp, #92]
  406b5c:	str	w0, [sp, #512]
  406b60:	str	wzr, [sp, #516]
  406b64:	ldr	w0, [sp, #516]
  406b68:	bl	4039c0 <log_get_max_level_realm@plt>
  406b6c:	mov	w1, w0
  406b70:	ldr	w0, [sp, #508]
  406b74:	and	w0, w0, #0x7
  406b78:	cmp	w1, w0
  406b7c:	b.lt	406bc0 <main+0x1a38>  // b.tstop
  406b80:	ldr	w0, [sp, #516]
  406b84:	lsl	w1, w0, #10
  406b88:	ldr	w0, [sp, #508]
  406b8c:	orr	w6, w1, w0
  406b90:	adrp	x0, 40b000 <broadcast_signal+0x30>
  406b94:	add	x1, x0, #0x553
  406b98:	adrp	x0, 40c000 <_fini+0xb30>
  406b9c:	add	x5, x0, #0x20
  406ba0:	adrp	x0, 40c000 <_fini+0xb30>
  406ba4:	add	x4, x0, #0x2a0
  406ba8:	mov	w3, #0x24c                 	// #588
  406bac:	mov	x2, x1
  406bb0:	ldr	w1, [sp, #512]
  406bb4:	mov	w0, w6
  406bb8:	bl	4036d0 <log_internal_realm@plt>
  406bbc:	b	406bc8 <main+0x1a40>
  406bc0:	ldr	w0, [sp, #512]
  406bc4:	cmp	w0, #0x0
  406bc8:	bl	403840 <freeze@plt>
  406bcc:	add	x0, sp, #0x208
  406bd0:	bl	403b98 <freep>
  406bd4:	mov	w1, w19
  406bd8:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  406bdc:	add	x0, x0, #0x4b8
  406be0:	ldr	x2, [sp, #584]
  406be4:	ldr	x0, [x0]
  406be8:	eor	x0, x2, x0
  406bec:	cmp	x0, #0x0
  406bf0:	b.eq	406bf8 <main+0x1a70>  // b.none
  406bf4:	bl	4035a0 <__stack_chk_fail@plt>
  406bf8:	mov	w0, w1
  406bfc:	ldr	x19, [sp, #32]
  406c00:	ldp	x29, x30, [sp, #16]
  406c04:	add	sp, sp, #0x250
  406c08:	ret

0000000000406c0c <sd_device_enumerator_unrefp>:
  406c0c:	stp	x29, x30, [sp, #-32]!
  406c10:	mov	x29, sp
  406c14:	str	x0, [sp, #24]
  406c18:	ldr	x0, [sp, #24]
  406c1c:	ldr	x0, [x0]
  406c20:	cmp	x0, #0x0
  406c24:	b.eq	406c34 <sd_device_enumerator_unrefp+0x28>  // b.none
  406c28:	ldr	x0, [sp, #24]
  406c2c:	ldr	x0, [x0]
  406c30:	bl	403260 <sd_device_enumerator_unref@plt>
  406c34:	nop
  406c38:	ldp	x29, x30, [sp], #32
  406c3c:	ret

0000000000406c40 <freep>:
  406c40:	stp	x29, x30, [sp, #-32]!
  406c44:	mov	x29, sp
  406c48:	str	x0, [sp, #24]
  406c4c:	ldr	x0, [sp, #24]
  406c50:	ldr	x0, [x0]
  406c54:	bl	4038a0 <free@plt>
  406c58:	nop
  406c5c:	ldp	x29, x30, [sp], #32
  406c60:	ret

0000000000406c64 <size_multiply_overflow>:
  406c64:	sub	sp, sp, #0x10
  406c68:	str	x0, [sp, #8]
  406c6c:	str	x1, [sp]
  406c70:	ldr	x0, [sp]
  406c74:	cmp	x0, #0x0
  406c78:	cset	w0, ne  // ne = any
  406c7c:	and	w0, w0, #0xff
  406c80:	and	x0, x0, #0xff
  406c84:	cmp	x0, #0x0
  406c88:	b.eq	406ccc <size_multiply_overflow+0x68>  // b.none
  406c8c:	mov	x2, #0x0                   	// #0
  406c90:	ldr	x1, [sp, #8]
  406c94:	ldr	x0, [sp]
  406c98:	umulh	x0, x1, x0
  406c9c:	cmp	x0, #0x0
  406ca0:	b.eq	406ca8 <size_multiply_overflow+0x44>  // b.none
  406ca4:	mov	x2, #0x1                   	// #1
  406ca8:	mov	x0, x2
  406cac:	cmp	x0, #0x0
  406cb0:	cset	w0, ne  // ne = any
  406cb4:	and	w0, w0, #0xff
  406cb8:	and	x0, x0, #0xff
  406cbc:	cmp	x0, #0x0
  406cc0:	b.eq	406ccc <size_multiply_overflow+0x68>  // b.none
  406cc4:	mov	w0, #0x1                   	// #1
  406cc8:	b	406cd0 <size_multiply_overflow+0x6c>
  406ccc:	mov	w0, #0x0                   	// #0
  406cd0:	and	w0, w0, #0x1
  406cd4:	and	w0, w0, #0xff
  406cd8:	add	sp, sp, #0x10
  406cdc:	ret

0000000000406ce0 <malloc_multiply>:
  406ce0:	stp	x29, x30, [sp, #-32]!
  406ce4:	mov	x29, sp
  406ce8:	str	x0, [sp, #24]
  406cec:	str	x1, [sp, #16]
  406cf0:	ldr	x1, [sp, #16]
  406cf4:	ldr	x0, [sp, #24]
  406cf8:	bl	406c64 <size_multiply_overflow>
  406cfc:	and	w0, w0, #0xff
  406d00:	cmp	w0, #0x0
  406d04:	b.eq	406d10 <malloc_multiply+0x30>  // b.none
  406d08:	mov	x0, #0x0                   	// #0
  406d0c:	b	406d2c <malloc_multiply+0x4c>
  406d10:	ldr	x1, [sp, #24]
  406d14:	ldr	x0, [sp, #16]
  406d18:	mul	x0, x1, x0
  406d1c:	cmp	x0, #0x0
  406d20:	b.ne	406d28 <malloc_multiply+0x48>  // b.any
  406d24:	mov	x0, #0x1                   	// #1
  406d28:	bl	403680 <malloc@plt>
  406d2c:	ldp	x29, x30, [sp], #32
  406d30:	ret

0000000000406d34 <closep>:
  406d34:	stp	x29, x30, [sp, #-32]!
  406d38:	mov	x29, sp
  406d3c:	str	x0, [sp, #24]
  406d40:	ldr	x0, [sp, #24]
  406d44:	ldr	w0, [x0]
  406d48:	bl	4032c0 <safe_close@plt>
  406d4c:	nop
  406d50:	ldp	x29, x30, [sp], #32
  406d54:	ret

0000000000406d58 <fstab_test_yes_no_option>:
  406d58:	stp	x29, x30, [sp, #-48]!
  406d5c:	mov	x29, sp
  406d60:	str	x0, [sp, #24]
  406d64:	str	x1, [sp, #16]
  406d68:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  406d6c:	add	x0, x0, #0x4b8
  406d70:	ldr	x1, [x0]
  406d74:	str	x1, [sp, #40]
  406d78:	mov	x1, #0x0                   	// #0
  406d7c:	add	x0, sp, #0x20
  406d80:	mov	x4, #0x0                   	// #0
  406d84:	mov	x3, #0x0                   	// #0
  406d88:	mov	x2, x0
  406d8c:	ldr	x1, [sp, #16]
  406d90:	ldr	x0, [sp, #24]
  406d94:	bl	403500 <fstab_filter_options@plt>
  406d98:	lsr	w0, w0, #31
  406d9c:	and	w0, w0, #0xff
  406da0:	and	x0, x0, #0xff
  406da4:	cmp	x0, #0x0
  406da8:	b.eq	406dd4 <fstab_test_yes_no_option+0x7c>  // b.none
  406dac:	adrp	x0, 40c000 <_fini+0xb30>
  406db0:	add	x1, x0, #0x2db
  406db4:	adrp	x0, 40c000 <_fini+0xb30>
  406db8:	add	x4, x0, #0x938
  406dbc:	mov	w3, #0x1c                  	// #28
  406dc0:	mov	x2, x1
  406dc4:	adrp	x0, 40c000 <_fini+0xb30>
  406dc8:	add	x1, x0, #0x2f8
  406dcc:	mov	w0, #0x0                   	// #0
  406dd0:	bl	4032d0 <log_assert_failed_realm@plt>
  406dd4:	ldr	x0, [sp, #32]
  406dd8:	ldr	x1, [sp, #16]
  406ddc:	cmp	x1, x0
  406de0:	cset	w0, eq  // eq = none
  406de4:	and	w0, w0, #0xff
  406de8:	mov	w1, w0
  406dec:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  406df0:	add	x0, x0, #0x4b8
  406df4:	ldr	x2, [sp, #40]
  406df8:	ldr	x0, [x0]
  406dfc:	eor	x0, x2, x0
  406e00:	cmp	x0, #0x0
  406e04:	b.eq	406e0c <fstab_test_yes_no_option+0xb4>  // b.none
  406e08:	bl	4035a0 <__stack_chk_fail@plt>
  406e0c:	mov	w0, w1
  406e10:	ldp	x29, x30, [sp], #48
  406e14:	ret

0000000000406e18 <mnt_free_tablep>:
  406e18:	stp	x29, x30, [sp, #-32]!
  406e1c:	mov	x29, sp
  406e20:	str	x0, [sp, #24]
  406e24:	ldr	x0, [sp, #24]
  406e28:	ldr	x0, [x0]
  406e2c:	cmp	x0, #0x0
  406e30:	b.eq	406e40 <mnt_free_tablep+0x28>  // b.none
  406e34:	ldr	x0, [sp, #24]
  406e38:	ldr	x0, [x0]
  406e3c:	bl	403550 <mnt_free_table@plt>
  406e40:	nop
  406e44:	ldp	x29, x30, [sp], #32
  406e48:	ret

0000000000406e4c <mnt_free_iterp>:
  406e4c:	stp	x29, x30, [sp, #-32]!
  406e50:	mov	x29, sp
  406e54:	str	x0, [sp, #24]
  406e58:	ldr	x0, [sp, #24]
  406e5c:	ldr	x0, [x0]
  406e60:	cmp	x0, #0x0
  406e64:	b.eq	406e74 <mnt_free_iterp+0x28>  // b.none
  406e68:	ldr	x0, [sp, #24]
  406e6c:	ldr	x0, [x0]
  406e70:	bl	4033a0 <mnt_free_iter@plt>
  406e74:	nop
  406e78:	ldp	x29, x30, [sp], #32
  406e7c:	ret

0000000000406e80 <libmount_parse>:
  406e80:	stp	x29, x30, [sp, #-112]!
  406e84:	mov	x29, sp
  406e88:	str	x19, [sp, #16]
  406e8c:	str	x0, [sp, #56]
  406e90:	str	x1, [sp, #48]
  406e94:	str	x2, [sp, #40]
  406e98:	str	x3, [sp, #32]
  406e9c:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  406ea0:	add	x0, x0, #0x4b8
  406ea4:	ldr	x1, [x0]
  406ea8:	str	x1, [sp, #104]
  406eac:	mov	x1, #0x0                   	// #0
  406eb0:	str	xzr, [sp, #72]
  406eb4:	str	xzr, [sp, #80]
  406eb8:	ldr	x0, [sp, #48]
  406ebc:	cmp	x0, #0x0
  406ec0:	cset	w0, ne  // ne = any
  406ec4:	and	w0, w0, #0xff
  406ec8:	and	x0, x0, #0xff
  406ecc:	cmp	x0, #0x0
  406ed0:	b.eq	406f18 <libmount_parse+0x98>  // b.none
  406ed4:	ldr	x0, [sp, #56]
  406ed8:	cmp	x0, #0x0
  406edc:	cset	w0, eq  // eq = none
  406ee0:	and	w0, w0, #0xff
  406ee4:	and	x0, x0, #0xff
  406ee8:	cmp	x0, #0x0
  406eec:	b.eq	406f18 <libmount_parse+0x98>  // b.none
  406ef0:	adrp	x0, 40c000 <_fini+0xb30>
  406ef4:	add	x1, x0, #0x33b
  406ef8:	adrp	x0, 40c000 <_fini+0xb30>
  406efc:	add	x4, x0, #0x928
  406f00:	mov	w3, #0x19                  	// #25
  406f04:	mov	x2, x1
  406f08:	adrp	x0, 40c000 <_fini+0xb30>
  406f0c:	add	x1, x0, #0x358
  406f10:	mov	w0, #0x0                   	// #0
  406f14:	bl	4032d0 <log_assert_failed_realm@plt>
  406f18:	bl	403130 <mnt_new_table@plt>
  406f1c:	str	x0, [sp, #72]
  406f20:	mov	w0, #0x0                   	// #0
  406f24:	bl	4033f0 <mnt_new_iter@plt>
  406f28:	str	x0, [sp, #80]
  406f2c:	ldr	x0, [sp, #72]
  406f30:	cmp	x0, #0x0
  406f34:	b.eq	406f44 <libmount_parse+0xc4>  // b.none
  406f38:	ldr	x0, [sp, #80]
  406f3c:	cmp	x0, #0x0
  406f40:	b.ne	406f4c <libmount_parse+0xcc>  // b.any
  406f44:	mov	w19, #0xfffffff4            	// #-12
  406f48:	b	406fe8 <libmount_parse+0x168>
  406f4c:	ldr	x0, [sp, #48]
  406f50:	cmp	x0, #0x0
  406f54:	b.eq	406f70 <libmount_parse+0xf0>  // b.none
  406f58:	ldr	x0, [sp, #72]
  406f5c:	ldr	x2, [sp, #56]
  406f60:	ldr	x1, [sp, #48]
  406f64:	bl	4031d0 <mnt_table_parse_stream@plt>
  406f68:	str	w0, [sp, #68]
  406f6c:	b	406fa0 <libmount_parse+0x120>
  406f70:	ldr	x0, [sp, #56]
  406f74:	cmp	x0, #0x0
  406f78:	b.eq	406f90 <libmount_parse+0x110>  // b.none
  406f7c:	ldr	x0, [sp, #72]
  406f80:	ldr	x1, [sp, #56]
  406f84:	bl	4037c0 <mnt_table_parse_file@plt>
  406f88:	str	w0, [sp, #68]
  406f8c:	b	406fa0 <libmount_parse+0x120>
  406f90:	ldr	x0, [sp, #72]
  406f94:	mov	x1, #0x0                   	// #0
  406f98:	bl	4038d0 <mnt_table_parse_mtab@plt>
  406f9c:	str	w0, [sp, #68]
  406fa0:	ldr	w0, [sp, #68]
  406fa4:	cmp	w0, #0x0
  406fa8:	b.ge	406fb4 <libmount_parse+0x134>  // b.tcont
  406fac:	ldr	w19, [sp, #68]
  406fb0:	b	406fe8 <libmount_parse+0x168>
  406fb4:	ldr	x0, [sp, #72]
  406fb8:	str	x0, [sp, #88]
  406fbc:	str	xzr, [sp, #72]
  406fc0:	ldr	x1, [sp, #88]
  406fc4:	ldr	x0, [sp, #40]
  406fc8:	str	x1, [x0]
  406fcc:	ldr	x0, [sp, #80]
  406fd0:	str	x0, [sp, #96]
  406fd4:	str	xzr, [sp, #80]
  406fd8:	ldr	x1, [sp, #96]
  406fdc:	ldr	x0, [sp, #32]
  406fe0:	str	x1, [x0]
  406fe4:	mov	w19, #0x0                   	// #0
  406fe8:	add	x0, sp, #0x50
  406fec:	bl	406e4c <mnt_free_iterp>
  406ff0:	add	x0, sp, #0x48
  406ff4:	bl	406e18 <mnt_free_tablep>
  406ff8:	mov	w1, w19
  406ffc:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  407000:	add	x0, x0, #0x4b8
  407004:	ldr	x2, [sp, #104]
  407008:	ldr	x0, [x0]
  40700c:	eor	x0, x2, x0
  407010:	cmp	x0, #0x0
  407014:	b.eq	40701c <libmount_parse+0x19c>  // b.none
  407018:	bl	4035a0 <__stack_chk_fail@plt>
  40701c:	mov	w0, w1
  407020:	ldr	x19, [sp, #16]
  407024:	ldp	x29, x30, [sp], #112
  407028:	ret

000000000040702c <safe_fork>:
  40702c:	stp	x29, x30, [sp, #-48]!
  407030:	mov	x29, sp
  407034:	str	x0, [sp, #40]
  407038:	str	w1, [sp, #36]
  40703c:	str	x2, [sp, #24]
  407040:	ldr	x4, [sp, #24]
  407044:	ldr	w3, [sp, #36]
  407048:	mov	x2, #0x0                   	// #0
  40704c:	mov	x1, #0x0                   	// #0
  407050:	ldr	x0, [sp, #40]
  407054:	bl	403810 <safe_fork_full@plt>
  407058:	ldp	x29, x30, [sp], #48
  40705c:	ret

0000000000407060 <block_signals_reset>:
  407060:	stp	x29, x30, [sp, #-32]!
  407064:	mov	x29, sp
  407068:	str	x0, [sp, #24]
  40706c:	mov	x2, #0x0                   	// #0
  407070:	ldr	x1, [sp, #24]
  407074:	mov	w0, #0x2                   	// #2
  407078:	bl	403510 <sigprocmask@plt>
  40707c:	lsr	w0, w0, #31
  407080:	and	w0, w0, #0xff
  407084:	and	x0, x0, #0xff
  407088:	cmp	x0, #0x0
  40708c:	b.eq	4070b8 <block_signals_reset+0x58>  // b.none
  407090:	adrp	x0, 40c000 <_fini+0xb30>
  407094:	add	x1, x0, #0x36b
  407098:	adrp	x0, 40c000 <_fini+0xb30>
  40709c:	add	x4, x0, #0x9f0
  4070a0:	mov	w3, #0x18                  	// #24
  4070a4:	mov	x2, x1
  4070a8:	adrp	x0, 40c000 <_fini+0xb30>
  4070ac:	add	x1, x0, #0x388
  4070b0:	mov	w0, #0x0                   	// #0
  4070b4:	bl	4032d0 <log_assert_failed_realm@plt>
  4070b8:	nop
  4070bc:	ldp	x29, x30, [sp], #32
  4070c0:	ret

00000000004070c4 <mount_point_free>:
  4070c4:	stp	x29, x30, [sp, #-48]!
  4070c8:	mov	x29, sp
  4070cc:	str	x0, [sp, #24]
  4070d0:	str	x1, [sp, #16]
  4070d4:	ldr	x0, [sp, #24]
  4070d8:	cmp	x0, #0x0
  4070dc:	cset	w0, eq  // eq = none
  4070e0:	and	w0, w0, #0xff
  4070e4:	and	x0, x0, #0xff
  4070e8:	cmp	x0, #0x0
  4070ec:	b.eq	407118 <mount_point_free+0x54>  // b.none
  4070f0:	adrp	x0, 40c000 <_fini+0xb30>
  4070f4:	add	x1, x0, #0x3b3
  4070f8:	adrp	x0, 40c000 <_fini+0xb30>
  4070fc:	add	x4, x0, #0x8c8
  407100:	mov	w3, #0x27                  	// #39
  407104:	mov	x2, x1
  407108:	adrp	x0, 40c000 <_fini+0xb30>
  40710c:	add	x1, x0, #0x3d0
  407110:	mov	w0, #0x0                   	// #0
  407114:	bl	4032d0 <log_assert_failed_realm@plt>
  407118:	ldr	x0, [sp, #16]
  40711c:	cmp	x0, #0x0
  407120:	cset	w0, eq  // eq = none
  407124:	and	w0, w0, #0xff
  407128:	and	x0, x0, #0xff
  40712c:	cmp	x0, #0x0
  407130:	b.eq	40715c <mount_point_free+0x98>  // b.none
  407134:	adrp	x0, 40c000 <_fini+0xb30>
  407138:	add	x1, x0, #0x3b3
  40713c:	adrp	x0, 40c000 <_fini+0xb30>
  407140:	add	x4, x0, #0x8c8
  407144:	mov	w3, #0x28                  	// #40
  407148:	mov	x2, x1
  40714c:	adrp	x0, 40c000 <_fini+0xb30>
  407150:	add	x1, x0, #0x3d8
  407154:	mov	w0, #0x0                   	// #0
  407158:	bl	4032d0 <log_assert_failed_realm@plt>
  40715c:	ldr	x0, [sp, #24]
  407160:	str	x0, [sp, #32]
  407164:	ldr	x0, [sp, #16]
  407168:	str	x0, [sp, #40]
  40716c:	ldr	x0, [sp, #40]
  407170:	cmp	x0, #0x0
  407174:	cset	w0, eq  // eq = none
  407178:	and	w0, w0, #0xff
  40717c:	and	x0, x0, #0xff
  407180:	cmp	x0, #0x0
  407184:	b.eq	4071b0 <mount_point_free+0xec>  // b.none
  407188:	adrp	x0, 40c000 <_fini+0xb30>
  40718c:	add	x1, x0, #0x3b3
  407190:	adrp	x0, 40c000 <_fini+0xb30>
  407194:	add	x4, x0, #0x8c8
  407198:	mov	w3, #0x2a                  	// #42
  40719c:	mov	x2, x1
  4071a0:	adrp	x0, 40c000 <_fini+0xb30>
  4071a4:	add	x1, x0, #0x3e0
  4071a8:	mov	w0, #0x0                   	// #0
  4071ac:	bl	4032d0 <log_assert_failed_realm@plt>
  4071b0:	ldr	x0, [sp, #40]
  4071b4:	ldr	x0, [x0, #40]
  4071b8:	cmp	x0, #0x0
  4071bc:	b.eq	4071d4 <mount_point_free+0x110>  // b.none
  4071c0:	ldr	x0, [sp, #40]
  4071c4:	ldr	x0, [x0, #40]
  4071c8:	ldr	x1, [sp, #40]
  4071cc:	ldr	x1, [x1, #48]
  4071d0:	str	x1, [x0, #48]
  4071d4:	ldr	x0, [sp, #40]
  4071d8:	ldr	x0, [x0, #48]
  4071dc:	cmp	x0, #0x0
  4071e0:	b.eq	4071fc <mount_point_free+0x138>  // b.none
  4071e4:	ldr	x0, [sp, #40]
  4071e8:	ldr	x0, [x0, #48]
  4071ec:	ldr	x1, [sp, #40]
  4071f0:	ldr	x1, [x1, #40]
  4071f4:	str	x1, [x0, #40]
  4071f8:	b	407258 <mount_point_free+0x194>
  4071fc:	ldr	x0, [sp, #32]
  407200:	ldr	x0, [x0]
  407204:	ldr	x1, [sp, #40]
  407208:	cmp	x1, x0
  40720c:	cset	w0, ne  // ne = any
  407210:	and	w0, w0, #0xff
  407214:	and	x0, x0, #0xff
  407218:	cmp	x0, #0x0
  40721c:	b.eq	407248 <mount_point_free+0x184>  // b.none
  407220:	adrp	x0, 40c000 <_fini+0xb30>
  407224:	add	x1, x0, #0x3b3
  407228:	adrp	x0, 40c000 <_fini+0xb30>
  40722c:	add	x4, x0, #0x8c8
  407230:	mov	w3, #0x2a                  	// #42
  407234:	mov	x2, x1
  407238:	adrp	x0, 40c000 <_fini+0xb30>
  40723c:	add	x1, x0, #0x3e8
  407240:	mov	w0, #0x0                   	// #0
  407244:	bl	4032d0 <log_assert_failed_realm@plt>
  407248:	ldr	x0, [sp, #40]
  40724c:	ldr	x1, [x0, #40]
  407250:	ldr	x0, [sp, #32]
  407254:	str	x1, [x0]
  407258:	ldr	x0, [sp, #40]
  40725c:	str	xzr, [x0, #48]
  407260:	ldr	x0, [sp, #40]
  407264:	ldr	x1, [x0, #48]
  407268:	ldr	x0, [sp, #40]
  40726c:	str	x1, [x0, #40]
  407270:	ldr	x0, [sp, #16]
  407274:	ldr	x0, [x0]
  407278:	bl	4038a0 <free@plt>
  40727c:	ldr	x0, [sp, #16]
  407280:	ldr	x0, [x0, #8]
  407284:	bl	4038a0 <free@plt>
  407288:	ldr	x0, [sp, #16]
  40728c:	bl	4038a0 <free@plt>
  407290:	nop
  407294:	ldp	x29, x30, [sp], #48
  407298:	ret

000000000040729c <mount_points_list_free>:
  40729c:	stp	x29, x30, [sp, #-32]!
  4072a0:	mov	x29, sp
  4072a4:	str	x0, [sp, #24]
  4072a8:	ldr	x0, [sp, #24]
  4072ac:	cmp	x0, #0x0
  4072b0:	cset	w0, eq  // eq = none
  4072b4:	and	w0, w0, #0xff
  4072b8:	and	x0, x0, #0xff
  4072bc:	cmp	x0, #0x0
  4072c0:	b.eq	407300 <mount_points_list_free+0x64>  // b.none
  4072c4:	adrp	x0, 40c000 <_fini+0xb30>
  4072c8:	add	x1, x0, #0x3b3
  4072cc:	adrp	x0, 40c000 <_fini+0xb30>
  4072d0:	add	x4, x0, #0x8e0
  4072d4:	mov	w3, #0x32                  	// #50
  4072d8:	mov	x2, x1
  4072dc:	adrp	x0, 40c000 <_fini+0xb30>
  4072e0:	add	x1, x0, #0x3d0
  4072e4:	mov	w0, #0x0                   	// #0
  4072e8:	bl	4032d0 <log_assert_failed_realm@plt>
  4072ec:	ldr	x0, [sp, #24]
  4072f0:	ldr	x0, [x0]
  4072f4:	mov	x1, x0
  4072f8:	ldr	x0, [sp, #24]
  4072fc:	bl	4070c4 <mount_point_free>
  407300:	ldr	x0, [sp, #24]
  407304:	ldr	x0, [x0]
  407308:	cmp	x0, #0x0
  40730c:	b.ne	4072ec <mount_points_list_free+0x50>  // b.any
  407310:	nop
  407314:	nop
  407318:	ldp	x29, x30, [sp], #32
  40731c:	ret

0000000000407320 <mount_points_list_get>:
  407320:	stp	x29, x30, [sp, #-256]!
  407324:	mov	x29, sp
  407328:	stp	x19, x20, [sp, #16]
  40732c:	str	x0, [sp, #40]
  407330:	str	x1, [sp, #32]
  407334:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  407338:	add	x0, x0, #0x4b8
  40733c:	ldr	x1, [x0]
  407340:	str	x1, [sp, #248]
  407344:	mov	x1, #0x0                   	// #0
  407348:	str	xzr, [sp, #112]
  40734c:	str	xzr, [sp, #120]
  407350:	ldr	x0, [sp, #32]
  407354:	cmp	x0, #0x0
  407358:	cset	w0, eq  // eq = none
  40735c:	and	w0, w0, #0xff
  407360:	and	x0, x0, #0xff
  407364:	cmp	x0, #0x0
  407368:	b.eq	407394 <mount_points_list_get+0x74>  // b.none
  40736c:	adrp	x0, 40c000 <_fini+0xb30>
  407370:	add	x1, x0, #0x3b3
  407374:	adrp	x0, 40c000 <_fini+0xb30>
  407378:	add	x4, x0, #0x8f8
  40737c:	mov	w3, #0x3d                  	// #61
  407380:	mov	x2, x1
  407384:	adrp	x0, 40c000 <_fini+0xb30>
  407388:	add	x1, x0, #0x3d0
  40738c:	mov	w0, #0x0                   	// #0
  407390:	bl	4032d0 <log_assert_failed_realm@plt>
  407394:	add	x1, sp, #0x78
  407398:	add	x0, sp, #0x70
  40739c:	mov	x3, x1
  4073a0:	mov	x2, x0
  4073a4:	mov	x1, #0x0                   	// #0
  4073a8:	ldr	x0, [sp, #40]
  4073ac:	bl	406e80 <libmount_parse>
  4073b0:	str	w0, [sp, #60]
  4073b4:	ldr	w0, [sp, #60]
  4073b8:	cmp	w0, #0x0
  4073bc:	b.ge	407464 <mount_points_list_get+0x144>  // b.tcont
  4073c0:	mov	w0, #0x3                   	// #3
  4073c4:	str	w0, [sp, #100]
  4073c8:	ldr	w0, [sp, #60]
  4073cc:	str	w0, [sp, #104]
  4073d0:	str	wzr, [sp, #108]
  4073d4:	ldr	w0, [sp, #108]
  4073d8:	bl	4039c0 <log_get_max_level_realm@plt>
  4073dc:	mov	w1, w0
  4073e0:	ldr	w0, [sp, #100]
  4073e4:	and	w0, w0, #0x7
  4073e8:	cmp	w1, w0
  4073ec:	b.lt	40744c <mount_points_list_get+0x12c>  // b.tstop
  4073f0:	ldr	w0, [sp, #108]
  4073f4:	lsl	w1, w0, #10
  4073f8:	ldr	w0, [sp, #100]
  4073fc:	orr	w7, w1, w0
  407400:	adrp	x0, 40c000 <_fini+0xb30>
  407404:	add	x1, x0, #0x3b3
  407408:	ldr	x0, [sp, #40]
  40740c:	cmp	x0, #0x0
  407410:	b.ne	40741c <mount_points_list_get+0xfc>  // b.any
  407414:	adrp	x0, 40c000 <_fini+0xb30>
  407418:	add	x0, x0, #0x3f8
  40741c:	mov	x6, x0
  407420:	adrp	x0, 40c000 <_fini+0xb30>
  407424:	add	x5, x0, #0x410
  407428:	adrp	x0, 40c000 <_fini+0xb30>
  40742c:	add	x4, x0, #0x910
  407430:	mov	w3, #0x41                  	// #65
  407434:	mov	x2, x1
  407438:	ldr	w1, [sp, #104]
  40743c:	mov	w0, w7
  407440:	bl	4036d0 <log_internal_realm@plt>
  407444:	mov	w20, w0
  407448:	b	407ac0 <mount_points_list_get+0x7a0>
  40744c:	ldr	w0, [sp, #104]
  407450:	cmp	w0, #0x0
  407454:	cneg	w0, w0, lt  // lt = tstop
  407458:	and	w0, w0, #0xff
  40745c:	neg	w20, w0
  407460:	b	407ac0 <mount_points_list_get+0x7a0>
  407464:	str	xzr, [sp, #136]
  407468:	str	xzr, [sp, #144]
  40746c:	str	xzr, [sp, #152]
  407470:	str	xzr, [sp, #160]
  407474:	ldr	x0, [sp, #112]
  407478:	ldr	x1, [sp, #120]
  40747c:	add	x2, sp, #0x80
  407480:	bl	403830 <mnt_table_next_fs@plt>
  407484:	str	w0, [sp, #60]
  407488:	ldr	w0, [sp, #60]
  40748c:	cmp	w0, #0x1
  407490:	b.ne	40749c <mount_points_list_get+0x17c>  // b.any
  407494:	mov	w19, #0x0                   	// #0
  407498:	b	4079f8 <mount_points_list_get+0x6d8>
  40749c:	ldr	w0, [sp, #60]
  4074a0:	cmp	w0, #0x0
  4074a4:	b.ge	407550 <mount_points_list_get+0x230>  // b.tcont
  4074a8:	mov	w0, #0x3                   	// #3
  4074ac:	str	w0, [sp, #88]
  4074b0:	ldr	w0, [sp, #60]
  4074b4:	str	w0, [sp, #92]
  4074b8:	str	wzr, [sp, #96]
  4074bc:	ldr	w0, [sp, #96]
  4074c0:	bl	4039c0 <log_get_max_level_realm@plt>
  4074c4:	mov	w1, w0
  4074c8:	ldr	w0, [sp, #88]
  4074cc:	and	w0, w0, #0x7
  4074d0:	cmp	w1, w0
  4074d4:	b.lt	407534 <mount_points_list_get+0x214>  // b.tstop
  4074d8:	ldr	w0, [sp, #96]
  4074dc:	lsl	w1, w0, #10
  4074e0:	ldr	w0, [sp, #88]
  4074e4:	orr	w7, w1, w0
  4074e8:	adrp	x0, 40c000 <_fini+0xb30>
  4074ec:	add	x1, x0, #0x3b3
  4074f0:	ldr	x0, [sp, #40]
  4074f4:	cmp	x0, #0x0
  4074f8:	b.ne	407504 <mount_points_list_get+0x1e4>  // b.any
  4074fc:	adrp	x0, 40c000 <_fini+0xb30>
  407500:	add	x0, x0, #0x3f8
  407504:	mov	x6, x0
  407508:	adrp	x0, 40c000 <_fini+0xb30>
  40750c:	add	x5, x0, #0x428
  407510:	adrp	x0, 40c000 <_fini+0xb30>
  407514:	add	x4, x0, #0x910
  407518:	mov	w3, #0x50                  	// #80
  40751c:	mov	x2, x1
  407520:	ldr	w1, [sp, #92]
  407524:	mov	w0, w7
  407528:	bl	4036d0 <log_internal_realm@plt>
  40752c:	mov	w20, w0
  407530:	b	407548 <mount_points_list_get+0x228>
  407534:	ldr	w0, [sp, #92]
  407538:	cmp	w0, #0x0
  40753c:	cneg	w0, w0, lt  // lt = tstop
  407540:	and	w0, w0, #0xff
  407544:	neg	w20, w0
  407548:	mov	w19, #0x1                   	// #1
  40754c:	b	4079f8 <mount_points_list_get+0x6d8>
  407550:	ldr	x0, [sp, #128]
  407554:	bl	403390 <mnt_fs_get_target@plt>
  407558:	str	x0, [sp, #168]
  40755c:	ldr	x0, [sp, #168]
  407560:	cmp	x0, #0x0
  407564:	b.ne	407570 <mount_points_list_get+0x250>  // b.any
  407568:	mov	w19, #0x2                   	// #2
  40756c:	b	4079f8 <mount_points_list_get+0x6d8>
  407570:	ldr	x0, [sp, #128]
  407574:	bl	403210 <mnt_fs_get_fstype@plt>
  407578:	str	x0, [sp, #176]
  40757c:	ldr	x0, [sp, #128]
  407580:	bl	403190 <mnt_fs_get_vfs_options@plt>
  407584:	add	x4, sp, #0x88
  407588:	mov	x3, #0x0                   	// #0
  40758c:	mov	x2, x0
  407590:	adrp	x0, 40c000 <_fini+0xb30>
  407594:	add	x1, x0, #0x450
  407598:	mov	x0, x4
  40759c:	bl	403570 <strextend_with_separator@plt>
  4075a0:	cmp	x0, #0x0
  4075a4:	b.ne	4075d0 <mount_points_list_get+0x2b0>  // b.any
  4075a8:	adrp	x0, 40c000 <_fini+0xb30>
  4075ac:	add	x1, x0, #0x3b3
  4075b0:	adrp	x0, 40c000 <_fini+0xb30>
  4075b4:	add	x3, x0, #0x910
  4075b8:	mov	w2, #0x63                  	// #99
  4075bc:	mov	w0, #0x0                   	// #0
  4075c0:	bl	403970 <log_oom_internal@plt>
  4075c4:	mov	w20, w0
  4075c8:	mov	w19, #0x1                   	// #1
  4075cc:	b	4079f8 <mount_points_list_get+0x6d8>
  4075d0:	ldr	x0, [sp, #128]
  4075d4:	bl	403270 <mnt_fs_get_fs_options@plt>
  4075d8:	add	x4, sp, #0x88
  4075dc:	mov	x3, #0x0                   	// #0
  4075e0:	mov	x2, x0
  4075e4:	adrp	x0, 40c000 <_fini+0xb30>
  4075e8:	add	x1, x0, #0x450
  4075ec:	mov	x0, x4
  4075f0:	bl	403570 <strextend_with_separator@plt>
  4075f4:	cmp	x0, #0x0
  4075f8:	b.ne	407624 <mount_points_list_get+0x304>  // b.any
  4075fc:	adrp	x0, 40c000 <_fini+0xb30>
  407600:	add	x1, x0, #0x3b3
  407604:	adrp	x0, 40c000 <_fini+0xb30>
  407608:	add	x3, x0, #0x910
  40760c:	mov	w2, #0x67                  	// #103
  407610:	mov	w0, #0x0                   	// #0
  407614:	bl	403970 <log_oom_internal@plt>
  407618:	mov	w20, w0
  40761c:	mov	w19, #0x1                   	// #1
  407620:	b	4079f8 <mount_points_list_get+0x6d8>
  407624:	ldr	x0, [sp, #168]
  407628:	bl	40b320 <mount_point_is_api>
  40762c:	and	w0, w0, #0xff
  407630:	cmp	w0, #0x0
  407634:	b.ne	40767c <mount_points_list_get+0x35c>  // b.any
  407638:	ldr	x0, [sp, #168]
  40763c:	bl	40b3b4 <mount_point_ignore>
  407640:	and	w0, w0, #0xff
  407644:	cmp	w0, #0x0
  407648:	b.ne	40767c <mount_points_list_get+0x35c>  // b.any
  40764c:	add	x0, sp, #0x108
  407650:	sub	x0, x0, #0x30
  407654:	adrp	x1, 40c000 <_fini+0xb30>
  407658:	add	x1, x1, #0x4c8
  40765c:	ld1	{v0.16b, v1.16b}, [x1]
  407660:	st1	{v0.16b, v1.16b}, [x0]
  407664:	add	x0, sp, #0xd8
  407668:	mov	x1, x0
  40766c:	ldr	x0, [sp, #168]
  407670:	bl	403220 <path_startswith_strv@plt>
  407674:	cmp	x0, #0x0
  407678:	b.eq	407684 <mount_points_list_get+0x364>  // b.none
  40767c:	mov	w19, #0x2                   	// #2
  407680:	b	4079f8 <mount_points_list_get+0x6d8>
  407684:	bl	403730 <detect_container@plt>
  407688:	cmp	w0, #0x0
  40768c:	b.gt	407714 <mount_points_list_get+0x3f4>
  407690:	ldr	x0, [sp, #176]
  407694:	bl	403300 <fstype_is_network@plt>
  407698:	and	w0, w0, #0xff
  40769c:	eor	w0, w0, #0x1
  4076a0:	and	w0, w0, #0xff
  4076a4:	cmp	w0, #0x0
  4076a8:	b.eq	407714 <mount_points_list_get+0x3f4>  // b.none
  4076ac:	ldr	x0, [sp, #176]
  4076b0:	bl	403480 <fstype_is_api_vfs@plt>
  4076b4:	and	w0, w0, #0xff
  4076b8:	eor	w0, w0, #0x1
  4076bc:	and	w0, w0, #0xff
  4076c0:	cmp	w0, #0x0
  4076c4:	b.eq	407714 <mount_points_list_get+0x3f4>  // b.none
  4076c8:	ldr	x0, [sp, #176]
  4076cc:	bl	403470 <fstype_is_ro@plt>
  4076d0:	and	w0, w0, #0xff
  4076d4:	eor	w0, w0, #0x1
  4076d8:	and	w0, w0, #0xff
  4076dc:	cmp	w0, #0x0
  4076e0:	b.eq	407714 <mount_points_list_get+0x3f4>  // b.none
  4076e4:	ldr	x2, [sp, #136]
  4076e8:	adrp	x0, 40c000 <_fini+0xb30>
  4076ec:	add	x1, x0, #0x458
  4076f0:	mov	x0, x2
  4076f4:	bl	406d58 <fstab_test_yes_no_option>
  4076f8:	and	w0, w0, #0xff
  4076fc:	eor	w0, w0, #0x1
  407700:	and	w0, w0, #0xff
  407704:	cmp	w0, #0x0
  407708:	b.eq	407714 <mount_points_list_get+0x3f4>  // b.none
  40770c:	mov	w0, #0x1                   	// #1
  407710:	b	407718 <mount_points_list_get+0x3f8>
  407714:	mov	w0, #0x0                   	// #0
  407718:	strb	w0, [sp, #59]
  40771c:	ldrb	w0, [sp, #59]
  407720:	and	w0, w0, #0x1
  407724:	strb	w0, [sp, #59]
  407728:	ldrb	w0, [sp, #59]
  40772c:	cmp	w0, #0x0
  407730:	b.eq	407894 <mount_points_list_get+0x574>  // b.none
  407734:	ldr	x0, [sp, #128]
  407738:	add	x1, sp, #0x90
  40773c:	bl	4035d0 <mnt_fs_get_propagation@plt>
  407740:	str	w0, [sp, #60]
  407744:	ldr	w0, [sp, #60]
  407748:	cmp	w0, #0x0
  40774c:	b.ge	4077d4 <mount_points_list_get+0x4b4>  // b.tcont
  407750:	mov	w0, #0x4                   	// #4
  407754:	str	w0, [sp, #76]
  407758:	ldr	w0, [sp, #60]
  40775c:	str	w0, [sp, #80]
  407760:	str	wzr, [sp, #84]
  407764:	ldr	w0, [sp, #84]
  407768:	bl	4039c0 <log_get_max_level_realm@plt>
  40776c:	mov	w1, w0
  407770:	ldr	w0, [sp, #76]
  407774:	and	w0, w0, #0x7
  407778:	cmp	w1, w0
  40777c:	b.lt	4077c4 <mount_points_list_get+0x4a4>  // b.tstop
  407780:	ldr	w0, [sp, #84]
  407784:	lsl	w1, w0, #10
  407788:	ldr	w0, [sp, #76]
  40778c:	orr	w7, w1, w0
  407790:	adrp	x0, 40c000 <_fini+0xb30>
  407794:	add	x1, x0, #0x3b3
  407798:	ldr	x6, [sp, #168]
  40779c:	adrp	x0, 40c000 <_fini+0xb30>
  4077a0:	add	x5, x0, #0x460
  4077a4:	adrp	x0, 40c000 <_fini+0xb30>
  4077a8:	add	x4, x0, #0x910
  4077ac:	mov	w3, #0x8d                  	// #141
  4077b0:	mov	x2, x1
  4077b4:	ldr	w1, [sp, #80]
  4077b8:	mov	w0, w7
  4077bc:	bl	4036d0 <log_internal_realm@plt>
  4077c0:	b	4077cc <mount_points_list_get+0x4ac>
  4077c4:	ldr	w0, [sp, #80]
  4077c8:	cmp	w0, #0x0
  4077cc:	mov	w19, #0x2                   	// #2
  4077d0:	b	4079f8 <mount_points_list_get+0x6d8>
  4077d4:	ldr	x0, [sp, #136]
  4077d8:	ldr	x1, [sp, #144]
  4077dc:	add	x3, sp, #0x98
  4077e0:	add	x2, sp, #0x90
  4077e4:	bl	403440 <mount_option_mangle@plt>
  4077e8:	str	w0, [sp, #60]
  4077ec:	ldr	w0, [sp, #60]
  4077f0:	cmp	w0, #0x0
  4077f4:	b.ge	40787c <mount_points_list_get+0x55c>  // b.tcont
  4077f8:	mov	w0, #0x4                   	// #4
  4077fc:	str	w0, [sp, #64]
  407800:	ldr	w0, [sp, #60]
  407804:	str	w0, [sp, #68]
  407808:	str	wzr, [sp, #72]
  40780c:	ldr	w0, [sp, #72]
  407810:	bl	4039c0 <log_get_max_level_realm@plt>
  407814:	mov	w1, w0
  407818:	ldr	w0, [sp, #64]
  40781c:	and	w0, w0, #0x7
  407820:	cmp	w1, w0
  407824:	b.lt	40786c <mount_points_list_get+0x54c>  // b.tstop
  407828:	ldr	w0, [sp, #72]
  40782c:	lsl	w1, w0, #10
  407830:	ldr	w0, [sp, #64]
  407834:	orr	w7, w1, w0
  407838:	adrp	x0, 40c000 <_fini+0xb30>
  40783c:	add	x1, x0, #0x3b3
  407840:	ldr	x6, [sp, #168]
  407844:	adrp	x0, 40c000 <_fini+0xb30>
  407848:	add	x5, x0, #0x498
  40784c:	adrp	x0, 40c000 <_fini+0xb30>
  407850:	add	x4, x0, #0x910
  407854:	mov	w3, #0x93                  	// #147
  407858:	mov	x2, x1
  40785c:	ldr	w1, [sp, #68]
  407860:	mov	w0, w7
  407864:	bl	4036d0 <log_internal_realm@plt>
  407868:	b	407874 <mount_points_list_get+0x554>
  40786c:	ldr	w0, [sp, #68]
  407870:	cmp	w0, #0x0
  407874:	mov	w19, #0x2                   	// #2
  407878:	b	4079f8 <mount_points_list_get+0x6d8>
  40787c:	ldr	x1, [sp, #144]
  407880:	mov	x0, #0xffffffffffffefde    	// #-4130
  407884:	and	x1, x1, x0
  407888:	mov	x0, #0x21                  	// #33
  40788c:	orr	x0, x1, x0
  407890:	str	x0, [sp, #144]
  407894:	mov	x1, #0x38                  	// #56
  407898:	mov	x0, #0x1                   	// #1
  40789c:	bl	4037e0 <calloc@plt>
  4078a0:	str	x0, [sp, #160]
  4078a4:	ldr	x0, [sp, #160]
  4078a8:	cmp	x0, #0x0
  4078ac:	b.ne	4078d8 <mount_points_list_get+0x5b8>  // b.any
  4078b0:	adrp	x0, 40c000 <_fini+0xb30>
  4078b4:	add	x1, x0, #0x3b3
  4078b8:	adrp	x0, 40c000 <_fini+0xb30>
  4078bc:	add	x3, x0, #0x910
  4078c0:	mov	w2, #0x9e                  	// #158
  4078c4:	mov	w0, #0x0                   	// #0
  4078c8:	bl	403970 <log_oom_internal@plt>
  4078cc:	mov	w20, w0
  4078d0:	mov	w19, #0x1                   	// #1
  4078d4:	b	4079f8 <mount_points_list_get+0x6d8>
  4078d8:	ldr	x19, [sp, #160]
  4078dc:	ldr	x0, [sp, #168]
  4078e0:	bl	4037d0 <strdup@plt>
  4078e4:	str	x0, [x19]
  4078e8:	ldr	x0, [sp, #160]
  4078ec:	ldr	x0, [x0]
  4078f0:	cmp	x0, #0x0
  4078f4:	b.ne	407920 <mount_points_list_get+0x600>  // b.any
  4078f8:	adrp	x0, 40c000 <_fini+0xb30>
  4078fc:	add	x1, x0, #0x3b3
  407900:	adrp	x0, 40c000 <_fini+0xb30>
  407904:	add	x3, x0, #0x910
  407908:	mov	w2, #0xa2                  	// #162
  40790c:	mov	w0, #0x0                   	// #0
  407910:	bl	403970 <log_oom_internal@plt>
  407914:	mov	w20, w0
  407918:	mov	w19, #0x1                   	// #1
  40791c:	b	4079f8 <mount_points_list_get+0x6d8>
  407920:	ldr	x0, [sp, #152]
  407924:	str	x0, [sp, #184]
  407928:	str	xzr, [sp, #152]
  40792c:	ldr	x1, [sp, #184]
  407930:	ldr	x0, [sp, #160]
  407934:	str	x1, [x0, #8]
  407938:	ldr	x0, [sp, #160]
  40793c:	ldr	x1, [sp, #144]
  407940:	str	x1, [x0, #16]
  407944:	ldr	x0, [sp, #160]
  407948:	ldrb	w1, [sp, #59]
  40794c:	strb	w1, [x0, #24]
  407950:	ldr	x0, [sp, #32]
  407954:	str	x0, [sp, #192]
  407958:	ldr	x0, [sp, #160]
  40795c:	str	x0, [sp, #200]
  407960:	str	xzr, [sp, #160]
  407964:	ldr	x0, [sp, #200]
  407968:	str	x0, [sp, #208]
  40796c:	ldr	x0, [sp, #208]
  407970:	cmp	x0, #0x0
  407974:	cset	w0, eq  // eq = none
  407978:	and	w0, w0, #0xff
  40797c:	and	x0, x0, #0xff
  407980:	cmp	x0, #0x0
  407984:	b.eq	4079b0 <mount_points_list_get+0x690>  // b.none
  407988:	adrp	x0, 40c000 <_fini+0xb30>
  40798c:	add	x1, x0, #0x3b3
  407990:	adrp	x0, 40c000 <_fini+0xb30>
  407994:	add	x4, x0, #0x8f8
  407998:	mov	w3, #0xa8                  	// #168
  40799c:	mov	x2, x1
  4079a0:	adrp	x0, 40c000 <_fini+0xb30>
  4079a4:	add	x1, x0, #0x3e0
  4079a8:	mov	w0, #0x0                   	// #0
  4079ac:	bl	4032d0 <log_assert_failed_realm@plt>
  4079b0:	ldr	x0, [sp, #192]
  4079b4:	ldr	x1, [x0]
  4079b8:	ldr	x0, [sp, #208]
  4079bc:	str	x1, [x0, #40]
  4079c0:	ldr	x0, [sp, #208]
  4079c4:	ldr	x0, [x0, #40]
  4079c8:	cmp	x0, #0x0
  4079cc:	b.eq	4079e0 <mount_points_list_get+0x6c0>  // b.none
  4079d0:	ldr	x0, [sp, #208]
  4079d4:	ldr	x0, [x0, #40]
  4079d8:	ldr	x1, [sp, #208]
  4079dc:	str	x1, [x0, #48]
  4079e0:	ldr	x0, [sp, #208]
  4079e4:	str	xzr, [x0, #48]
  4079e8:	ldr	x0, [sp, #192]
  4079ec:	ldr	x1, [sp, #208]
  4079f0:	str	x1, [x0]
  4079f4:	mov	w19, #0x3                   	// #3
  4079f8:	add	x0, sp, #0xa0
  4079fc:	bl	406c40 <freep>
  407a00:	cmp	w19, #0x3
  407a04:	b.eq	407a3c <mount_points_list_get+0x71c>  // b.none
  407a08:	cmp	w19, #0x3
  407a0c:	b.gt	407a34 <mount_points_list_get+0x714>
  407a10:	cmp	w19, #0x0
  407a14:	b.eq	407a24 <mount_points_list_get+0x704>  // b.none
  407a18:	cmp	w19, #0x1
  407a1c:	b.eq	407a2c <mount_points_list_get+0x70c>  // b.none
  407a20:	b	407a34 <mount_points_list_get+0x714>
  407a24:	mov	w19, #0x0                   	// #0
  407a28:	b	407a40 <mount_points_list_get+0x720>
  407a2c:	mov	w19, #0x1                   	// #1
  407a30:	b	407a40 <mount_points_list_get+0x720>
  407a34:	mov	w19, #0x2                   	// #2
  407a38:	b	407a40 <mount_points_list_get+0x720>
  407a3c:	mov	w19, #0x3                   	// #3
  407a40:	add	x0, sp, #0x98
  407a44:	bl	406c40 <freep>
  407a48:	cmp	w19, #0x3
  407a4c:	b.eq	407a84 <mount_points_list_get+0x764>  // b.none
  407a50:	cmp	w19, #0x3
  407a54:	b.gt	407a7c <mount_points_list_get+0x75c>
  407a58:	cmp	w19, #0x0
  407a5c:	b.eq	407a6c <mount_points_list_get+0x74c>  // b.none
  407a60:	cmp	w19, #0x1
  407a64:	b.eq	407a74 <mount_points_list_get+0x754>  // b.none
  407a68:	b	407a7c <mount_points_list_get+0x75c>
  407a6c:	mov	w19, #0x0                   	// #0
  407a70:	b	407a88 <mount_points_list_get+0x768>
  407a74:	mov	w19, #0x1                   	// #1
  407a78:	b	407a88 <mount_points_list_get+0x768>
  407a7c:	mov	w19, #0x2                   	// #2
  407a80:	b	407a88 <mount_points_list_get+0x768>
  407a84:	mov	w19, #0x3                   	// #3
  407a88:	add	x0, sp, #0x88
  407a8c:	bl	406c40 <freep>
  407a90:	cmp	w19, #0x3
  407a94:	b.eq	407abc <mount_points_list_get+0x79c>  // b.none
  407a98:	cmp	w19, #0x3
  407a9c:	b.gt	407464 <mount_points_list_get+0x144>
  407aa0:	cmp	w19, #0x0
  407aa4:	b.eq	407ab4 <mount_points_list_get+0x794>  // b.none
  407aa8:	cmp	w19, #0x1
  407aac:	b.eq	407ac0 <mount_points_list_get+0x7a0>  // b.none
  407ab0:	b	407abc <mount_points_list_get+0x79c>
  407ab4:	mov	w20, #0x0                   	// #0
  407ab8:	b	407ac0 <mount_points_list_get+0x7a0>
  407abc:	b	407464 <mount_points_list_get+0x144>
  407ac0:	add	x0, sp, #0x78
  407ac4:	bl	406e4c <mnt_free_iterp>
  407ac8:	add	x0, sp, #0x70
  407acc:	bl	406e18 <mnt_free_tablep>
  407ad0:	mov	w1, w20
  407ad4:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  407ad8:	add	x0, x0, #0x4b8
  407adc:	ldr	x2, [sp, #248]
  407ae0:	ldr	x0, [x0]
  407ae4:	eor	x0, x2, x0
  407ae8:	cmp	x0, #0x0
  407aec:	b.eq	407af4 <mount_points_list_get+0x7d4>  // b.none
  407af0:	bl	4035a0 <__stack_chk_fail@plt>
  407af4:	mov	w0, w1
  407af8:	ldp	x19, x20, [sp, #16]
  407afc:	ldp	x29, x30, [sp], #256
  407b00:	ret

0000000000407b04 <swap_list_get>:
  407b04:	stp	x29, x30, [sp, #-160]!
  407b08:	mov	x29, sp
  407b0c:	stp	x19, x20, [sp, #16]
  407b10:	str	x0, [sp, #40]
  407b14:	str	x1, [sp, #32]
  407b18:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  407b1c:	add	x0, x0, #0x4b8
  407b20:	ldr	x1, [x0]
  407b24:	str	x1, [sp, #152]
  407b28:	mov	x1, #0x0                   	// #0
  407b2c:	str	xzr, [sp, #88]
  407b30:	str	xzr, [sp, #96]
  407b34:	ldr	x0, [sp, #32]
  407b38:	cmp	x0, #0x0
  407b3c:	cset	w0, eq  // eq = none
  407b40:	and	w0, w0, #0xff
  407b44:	and	x0, x0, #0xff
  407b48:	cmp	x0, #0x0
  407b4c:	b.eq	407b78 <swap_list_get+0x74>  // b.none
  407b50:	adrp	x0, 40c000 <_fini+0xb30>
  407b54:	add	x1, x0, #0x3b3
  407b58:	adrp	x0, 40c000 <_fini+0xb30>
  407b5c:	add	x4, x0, #0x958
  407b60:	mov	w3, #0xb3                  	// #179
  407b64:	mov	x2, x1
  407b68:	adrp	x0, 40c000 <_fini+0xb30>
  407b6c:	add	x1, x0, #0x3d0
  407b70:	mov	w0, #0x0                   	// #0
  407b74:	bl	4032d0 <log_assert_failed_realm@plt>
  407b78:	bl	403130 <mnt_new_table@plt>
  407b7c:	str	x0, [sp, #88]
  407b80:	mov	w0, #0x0                   	// #0
  407b84:	bl	4033f0 <mnt_new_iter@plt>
  407b88:	str	x0, [sp, #96]
  407b8c:	ldr	x0, [sp, #88]
  407b90:	cmp	x0, #0x0
  407b94:	b.eq	407ba4 <swap_list_get+0xa0>  // b.none
  407b98:	ldr	x0, [sp, #96]
  407b9c:	cmp	x0, #0x0
  407ba0:	b.ne	407bc8 <swap_list_get+0xc4>  // b.any
  407ba4:	adrp	x0, 40c000 <_fini+0xb30>
  407ba8:	add	x1, x0, #0x3b3
  407bac:	adrp	x0, 40c000 <_fini+0xb30>
  407bb0:	add	x3, x0, #0x968
  407bb4:	mov	w2, #0xb8                  	// #184
  407bb8:	mov	w0, #0x0                   	// #0
  407bbc:	bl	403970 <log_oom_internal@plt>
  407bc0:	mov	w20, w0
  407bc4:	b	407f08 <swap_list_get+0x404>
  407bc8:	ldr	x0, [sp, #88]
  407bcc:	ldr	x1, [sp, #40]
  407bd0:	bl	4035f0 <mnt_table_parse_swaps@plt>
  407bd4:	str	w0, [sp, #60]
  407bd8:	ldr	w0, [sp, #60]
  407bdc:	cmn	w0, #0x2
  407be0:	b.ne	407bec <swap_list_get+0xe8>  // b.any
  407be4:	mov	w20, #0x0                   	// #0
  407be8:	b	407f08 <swap_list_get+0x404>
  407bec:	ldr	w0, [sp, #60]
  407bf0:	cmp	w0, #0x0
  407bf4:	b.ge	407c9c <swap_list_get+0x198>  // b.tcont
  407bf8:	mov	w0, #0x3                   	// #3
  407bfc:	str	w0, [sp, #76]
  407c00:	ldr	w0, [sp, #60]
  407c04:	str	w0, [sp, #80]
  407c08:	str	wzr, [sp, #84]
  407c0c:	ldr	w0, [sp, #84]
  407c10:	bl	4039c0 <log_get_max_level_realm@plt>
  407c14:	mov	w1, w0
  407c18:	ldr	w0, [sp, #76]
  407c1c:	and	w0, w0, #0x7
  407c20:	cmp	w1, w0
  407c24:	b.lt	407c84 <swap_list_get+0x180>  // b.tstop
  407c28:	ldr	w0, [sp, #84]
  407c2c:	lsl	w1, w0, #10
  407c30:	ldr	w0, [sp, #76]
  407c34:	orr	w7, w1, w0
  407c38:	adrp	x0, 40c000 <_fini+0xb30>
  407c3c:	add	x1, x0, #0x3b3
  407c40:	ldr	x0, [sp, #40]
  407c44:	cmp	x0, #0x0
  407c48:	b.ne	407c54 <swap_list_get+0x150>  // b.any
  407c4c:	adrp	x0, 40c000 <_fini+0xb30>
  407c50:	add	x0, x0, #0x4e8
  407c54:	mov	x6, x0
  407c58:	adrp	x0, 40c000 <_fini+0xb30>
  407c5c:	add	x5, x0, #0x410
  407c60:	adrp	x0, 40c000 <_fini+0xb30>
  407c64:	add	x4, x0, #0x968
  407c68:	mov	w3, #0xbe                  	// #190
  407c6c:	mov	x2, x1
  407c70:	ldr	w1, [sp, #80]
  407c74:	mov	w0, w7
  407c78:	bl	4036d0 <log_internal_realm@plt>
  407c7c:	mov	w20, w0
  407c80:	b	407f08 <swap_list_get+0x404>
  407c84:	ldr	w0, [sp, #80]
  407c88:	cmp	w0, #0x0
  407c8c:	cneg	w0, w0, lt  // lt = tstop
  407c90:	and	w0, w0, #0xff
  407c94:	neg	w20, w0
  407c98:	b	407f08 <swap_list_get+0x404>
  407c9c:	str	xzr, [sp, #112]
  407ca0:	ldr	x0, [sp, #88]
  407ca4:	ldr	x1, [sp, #96]
  407ca8:	add	x2, sp, #0x68
  407cac:	bl	403830 <mnt_table_next_fs@plt>
  407cb0:	str	w0, [sp, #60]
  407cb4:	ldr	w0, [sp, #60]
  407cb8:	cmp	w0, #0x1
  407cbc:	b.ne	407cc8 <swap_list_get+0x1c4>  // b.any
  407cc0:	mov	w19, #0x0                   	// #0
  407cc4:	b	407ed0 <swap_list_get+0x3cc>
  407cc8:	ldr	w0, [sp, #60]
  407ccc:	cmp	w0, #0x0
  407cd0:	b.ge	407d7c <swap_list_get+0x278>  // b.tcont
  407cd4:	mov	w0, #0x3                   	// #3
  407cd8:	str	w0, [sp, #64]
  407cdc:	ldr	w0, [sp, #60]
  407ce0:	str	w0, [sp, #68]
  407ce4:	str	wzr, [sp, #72]
  407ce8:	ldr	w0, [sp, #72]
  407cec:	bl	4039c0 <log_get_max_level_realm@plt>
  407cf0:	mov	w1, w0
  407cf4:	ldr	w0, [sp, #64]
  407cf8:	and	w0, w0, #0x7
  407cfc:	cmp	w1, w0
  407d00:	b.lt	407d60 <swap_list_get+0x25c>  // b.tstop
  407d04:	ldr	w0, [sp, #72]
  407d08:	lsl	w1, w0, #10
  407d0c:	ldr	w0, [sp, #64]
  407d10:	orr	w7, w1, w0
  407d14:	adrp	x0, 40c000 <_fini+0xb30>
  407d18:	add	x1, x0, #0x3b3
  407d1c:	ldr	x0, [sp, #40]
  407d20:	cmp	x0, #0x0
  407d24:	b.ne	407d30 <swap_list_get+0x22c>  // b.any
  407d28:	adrp	x0, 40c000 <_fini+0xb30>
  407d2c:	add	x0, x0, #0x4e8
  407d30:	mov	x6, x0
  407d34:	adrp	x0, 40c000 <_fini+0xb30>
  407d38:	add	x5, x0, #0x428
  407d3c:	adrp	x0, 40c000 <_fini+0xb30>
  407d40:	add	x4, x0, #0x968
  407d44:	mov	w3, #0xc9                  	// #201
  407d48:	mov	x2, x1
  407d4c:	ldr	w1, [sp, #68]
  407d50:	mov	w0, w7
  407d54:	bl	4036d0 <log_internal_realm@plt>
  407d58:	mov	w20, w0
  407d5c:	b	407d74 <swap_list_get+0x270>
  407d60:	ldr	w0, [sp, #68]
  407d64:	cmp	w0, #0x0
  407d68:	cneg	w0, w0, lt  // lt = tstop
  407d6c:	and	w0, w0, #0xff
  407d70:	neg	w20, w0
  407d74:	mov	w19, #0x1                   	// #1
  407d78:	b	407ed0 <swap_list_get+0x3cc>
  407d7c:	ldr	x0, [sp, #104]
  407d80:	bl	403820 <mnt_fs_get_source@plt>
  407d84:	str	x0, [sp, #120]
  407d88:	ldr	x0, [sp, #120]
  407d8c:	cmp	x0, #0x0
  407d90:	b.ne	407d9c <swap_list_get+0x298>  // b.any
  407d94:	mov	w19, #0x2                   	// #2
  407d98:	b	407ed0 <swap_list_get+0x3cc>
  407d9c:	mov	x1, #0x38                  	// #56
  407da0:	mov	x0, #0x1                   	// #1
  407da4:	bl	4037e0 <calloc@plt>
  407da8:	str	x0, [sp, #112]
  407dac:	ldr	x0, [sp, #112]
  407db0:	cmp	x0, #0x0
  407db4:	b.ne	407de0 <swap_list_get+0x2dc>  // b.any
  407db8:	adrp	x0, 40c000 <_fini+0xb30>
  407dbc:	add	x1, x0, #0x3b3
  407dc0:	adrp	x0, 40c000 <_fini+0xb30>
  407dc4:	add	x3, x0, #0x968
  407dc8:	mov	w2, #0xd1                  	// #209
  407dcc:	mov	w0, #0x0                   	// #0
  407dd0:	bl	403970 <log_oom_internal@plt>
  407dd4:	mov	w20, w0
  407dd8:	mov	w19, #0x1                   	// #1
  407ddc:	b	407ed0 <swap_list_get+0x3cc>
  407de0:	ldr	x19, [sp, #112]
  407de4:	ldr	x0, [sp, #120]
  407de8:	bl	4037d0 <strdup@plt>
  407dec:	str	x0, [x19]
  407df0:	ldr	x0, [sp, #112]
  407df4:	ldr	x0, [x0]
  407df8:	cmp	x0, #0x0
  407dfc:	b.ne	407e28 <swap_list_get+0x324>  // b.any
  407e00:	adrp	x0, 40c000 <_fini+0xb30>
  407e04:	add	x1, x0, #0x3b3
  407e08:	adrp	x0, 40c000 <_fini+0xb30>
  407e0c:	add	x3, x0, #0x968
  407e10:	mov	w2, #0xd5                  	// #213
  407e14:	mov	w0, #0x0                   	// #0
  407e18:	bl	403970 <log_oom_internal@plt>
  407e1c:	mov	w20, w0
  407e20:	mov	w19, #0x1                   	// #1
  407e24:	b	407ed0 <swap_list_get+0x3cc>
  407e28:	ldr	x0, [sp, #32]
  407e2c:	str	x0, [sp, #128]
  407e30:	ldr	x0, [sp, #112]
  407e34:	str	x0, [sp, #136]
  407e38:	str	xzr, [sp, #112]
  407e3c:	ldr	x0, [sp, #136]
  407e40:	str	x0, [sp, #144]
  407e44:	ldr	x0, [sp, #144]
  407e48:	cmp	x0, #0x0
  407e4c:	cset	w0, eq  // eq = none
  407e50:	and	w0, w0, #0xff
  407e54:	and	x0, x0, #0xff
  407e58:	cmp	x0, #0x0
  407e5c:	b.eq	407e88 <swap_list_get+0x384>  // b.none
  407e60:	adrp	x0, 40c000 <_fini+0xb30>
  407e64:	add	x1, x0, #0x3b3
  407e68:	adrp	x0, 40c000 <_fini+0xb30>
  407e6c:	add	x4, x0, #0x958
  407e70:	mov	w3, #0xd7                  	// #215
  407e74:	mov	x2, x1
  407e78:	adrp	x0, 40c000 <_fini+0xb30>
  407e7c:	add	x1, x0, #0x3e0
  407e80:	mov	w0, #0x0                   	// #0
  407e84:	bl	4032d0 <log_assert_failed_realm@plt>
  407e88:	ldr	x0, [sp, #128]
  407e8c:	ldr	x1, [x0]
  407e90:	ldr	x0, [sp, #144]
  407e94:	str	x1, [x0, #40]
  407e98:	ldr	x0, [sp, #144]
  407e9c:	ldr	x0, [x0, #40]
  407ea0:	cmp	x0, #0x0
  407ea4:	b.eq	407eb8 <swap_list_get+0x3b4>  // b.none
  407ea8:	ldr	x0, [sp, #144]
  407eac:	ldr	x0, [x0, #40]
  407eb0:	ldr	x1, [sp, #144]
  407eb4:	str	x1, [x0, #48]
  407eb8:	ldr	x0, [sp, #144]
  407ebc:	str	xzr, [x0, #48]
  407ec0:	ldr	x0, [sp, #128]
  407ec4:	ldr	x1, [sp, #144]
  407ec8:	str	x1, [x0]
  407ecc:	mov	w19, #0x3                   	// #3
  407ed0:	add	x0, sp, #0x70
  407ed4:	bl	406c40 <freep>
  407ed8:	cmp	w19, #0x3
  407edc:	b.eq	407f04 <swap_list_get+0x400>  // b.none
  407ee0:	cmp	w19, #0x3
  407ee4:	b.gt	407c9c <swap_list_get+0x198>
  407ee8:	cmp	w19, #0x0
  407eec:	b.eq	407efc <swap_list_get+0x3f8>  // b.none
  407ef0:	cmp	w19, #0x1
  407ef4:	b.eq	407f08 <swap_list_get+0x404>  // b.none
  407ef8:	b	407f04 <swap_list_get+0x400>
  407efc:	mov	w20, #0x0                   	// #0
  407f00:	b	407f08 <swap_list_get+0x404>
  407f04:	b	407c9c <swap_list_get+0x198>
  407f08:	add	x0, sp, #0x60
  407f0c:	bl	406e4c <mnt_free_iterp>
  407f10:	add	x0, sp, #0x58
  407f14:	bl	406e18 <mnt_free_tablep>
  407f18:	mov	w1, w20
  407f1c:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  407f20:	add	x0, x0, #0x4b8
  407f24:	ldr	x2, [sp, #152]
  407f28:	ldr	x0, [x0]
  407f2c:	eor	x0, x2, x0
  407f30:	cmp	x0, #0x0
  407f34:	b.eq	407f3c <swap_list_get+0x438>  // b.none
  407f38:	bl	4035a0 <__stack_chk_fail@plt>
  407f3c:	mov	w0, w1
  407f40:	ldp	x19, x20, [sp, #16]
  407f44:	ldp	x29, x30, [sp], #160
  407f48:	ret

0000000000407f4c <loopback_list_get>:
  407f4c:	stp	x29, x30, [sp, #-176]!
  407f50:	mov	x29, sp
  407f54:	stp	x19, x20, [sp, #16]
  407f58:	str	x0, [sp, #40]
  407f5c:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  407f60:	add	x0, x0, #0x4b8
  407f64:	ldr	x1, [x0]
  407f68:	str	x1, [sp, #168]
  407f6c:	mov	x1, #0x0                   	// #0
  407f70:	str	xzr, [sp, #56]
  407f74:	ldr	x0, [sp, #40]
  407f78:	cmp	x0, #0x0
  407f7c:	cset	w0, eq  // eq = none
  407f80:	and	w0, w0, #0xff
  407f84:	and	x0, x0, #0xff
  407f88:	cmp	x0, #0x0
  407f8c:	b.eq	407fb8 <loopback_list_get+0x6c>  // b.none
  407f90:	adrp	x0, 40c000 <_fini+0xb30>
  407f94:	add	x1, x0, #0x3b3
  407f98:	adrp	x0, 40c000 <_fini+0xb30>
  407f9c:	add	x4, x0, #0x978
  407fa0:	mov	w3, #0xe2                  	// #226
  407fa4:	mov	x2, x1
  407fa8:	adrp	x0, 40c000 <_fini+0xb30>
  407fac:	add	x1, x0, #0x3d0
  407fb0:	mov	w0, #0x0                   	// #0
  407fb4:	bl	4032d0 <log_assert_failed_realm@plt>
  407fb8:	add	x0, sp, #0x38
  407fbc:	bl	4031b0 <sd_device_enumerator_new@plt>
  407fc0:	str	w0, [sp, #52]
  407fc4:	ldr	w0, [sp, #52]
  407fc8:	cmp	w0, #0x0
  407fcc:	b.ge	407fd8 <loopback_list_get+0x8c>  // b.tcont
  407fd0:	ldr	w19, [sp, #52]
  407fd4:	b	408204 <loopback_list_get+0x2b8>
  407fd8:	ldr	x0, [sp, #56]
  407fdc:	bl	4039a0 <sd_device_enumerator_allow_uninitialized@plt>
  407fe0:	str	w0, [sp, #52]
  407fe4:	ldr	w0, [sp, #52]
  407fe8:	cmp	w0, #0x0
  407fec:	b.ge	407ff8 <loopback_list_get+0xac>  // b.tcont
  407ff0:	ldr	w19, [sp, #52]
  407ff4:	b	408204 <loopback_list_get+0x2b8>
  407ff8:	ldr	x3, [sp, #56]
  407ffc:	mov	w2, #0x1                   	// #1
  408000:	adrp	x0, 40c000 <_fini+0xb30>
  408004:	add	x1, x0, #0x4f8
  408008:	mov	x0, x3
  40800c:	bl	4031f0 <sd_device_enumerator_add_match_subsystem@plt>
  408010:	str	w0, [sp, #52]
  408014:	ldr	w0, [sp, #52]
  408018:	cmp	w0, #0x0
  40801c:	b.ge	408028 <loopback_list_get+0xdc>  // b.tcont
  408020:	ldr	w19, [sp, #52]
  408024:	b	408204 <loopback_list_get+0x2b8>
  408028:	ldr	x2, [sp, #56]
  40802c:	adrp	x0, 40c000 <_fini+0xb30>
  408030:	add	x1, x0, #0x500
  408034:	mov	x0, x2
  408038:	bl	4031a0 <sd_device_enumerator_add_match_sysname@plt>
  40803c:	str	w0, [sp, #52]
  408040:	ldr	w0, [sp, #52]
  408044:	cmp	w0, #0x0
  408048:	b.ge	408054 <loopback_list_get+0x108>  // b.tcont
  40804c:	ldr	w19, [sp, #52]
  408050:	b	408204 <loopback_list_get+0x2b8>
  408054:	ldr	x4, [sp, #56]
  408058:	mov	w3, #0x1                   	// #1
  40805c:	mov	x2, #0x0                   	// #0
  408060:	adrp	x0, 40c000 <_fini+0xb30>
  408064:	add	x1, x0, #0x508
  408068:	mov	x0, x4
  40806c:	bl	403990 <sd_device_enumerator_add_match_sysattr@plt>
  408070:	str	w0, [sp, #52]
  408074:	ldr	w0, [sp, #52]
  408078:	cmp	w0, #0x0
  40807c:	b.ge	408088 <loopback_list_get+0x13c>  // b.tcont
  408080:	ldr	w19, [sp, #52]
  408084:	b	408204 <loopback_list_get+0x2b8>
  408088:	ldr	x0, [sp, #56]
  40808c:	bl	403240 <sd_device_enumerator_get_device_first@plt>
  408090:	str	x0, [sp, #72]
  408094:	b	4081f4 <loopback_list_get+0x2a8>
  408098:	str	xzr, [sp, #64]
  40809c:	add	x0, sp, #0x70
  4080a0:	mov	x1, x0
  4080a4:	ldr	x0, [sp, #72]
  4080a8:	bl	4031e0 <sd_device_get_devname@plt>
  4080ac:	cmp	w0, #0x0
  4080b0:	b.ge	4080bc <loopback_list_get+0x170>  // b.tcont
  4080b4:	mov	w20, #0x0                   	// #0
  4080b8:	b	4081d0 <loopback_list_get+0x284>
  4080bc:	ldr	x0, [sp, #112]
  4080c0:	bl	4037d0 <strdup@plt>
  4080c4:	str	x0, [sp, #64]
  4080c8:	ldr	x0, [sp, #64]
  4080cc:	cmp	x0, #0x0
  4080d0:	b.ne	4080e0 <loopback_list_get+0x194>  // b.any
  4080d4:	mov	w19, #0xfffffff4            	// #-12
  4080d8:	mov	w20, #0x1                   	// #1
  4080dc:	b	4081d0 <loopback_list_get+0x284>
  4080e0:	mov	x1, #0x1                   	// #1
  4080e4:	mov	x0, #0x38                  	// #56
  4080e8:	bl	406ce0 <malloc_multiply>
  4080ec:	str	x0, [sp, #80]
  4080f0:	ldr	x0, [sp, #80]
  4080f4:	cmp	x0, #0x0
  4080f8:	b.ne	408108 <loopback_list_get+0x1bc>  // b.any
  4080fc:	mov	w19, #0xfffffff4            	// #-12
  408100:	mov	w20, #0x1                   	// #1
  408104:	b	4081d0 <loopback_list_get+0x284>
  408108:	ldr	x0, [sp, #64]
  40810c:	str	x0, [sp, #88]
  408110:	str	xzr, [sp, #64]
  408114:	ldr	x1, [sp, #88]
  408118:	ldr	x0, [sp, #80]
  40811c:	stp	xzr, xzr, [x0]
  408120:	stp	xzr, xzr, [x0, #16]
  408124:	stp	xzr, xzr, [x0, #32]
  408128:	str	xzr, [x0, #48]
  40812c:	ldr	x0, [sp, #80]
  408130:	str	x1, [x0]
  408134:	ldr	x0, [sp, #40]
  408138:	str	x0, [sp, #96]
  40813c:	ldr	x0, [sp, #80]
  408140:	str	x0, [sp, #104]
  408144:	ldr	x0, [sp, #104]
  408148:	cmp	x0, #0x0
  40814c:	cset	w0, eq  // eq = none
  408150:	and	w0, w0, #0xff
  408154:	and	x0, x0, #0xff
  408158:	cmp	x0, #0x0
  40815c:	b.eq	408188 <loopback_list_get+0x23c>  // b.none
  408160:	adrp	x0, 40c000 <_fini+0xb30>
  408164:	add	x1, x0, #0x3b3
  408168:	adrp	x0, 40c000 <_fini+0xb30>
  40816c:	add	x4, x0, #0x978
  408170:	mov	w3, #0x10c                 	// #268
  408174:	mov	x2, x1
  408178:	adrp	x0, 40c000 <_fini+0xb30>
  40817c:	add	x1, x0, #0x3e0
  408180:	mov	w0, #0x0                   	// #0
  408184:	bl	4032d0 <log_assert_failed_realm@plt>
  408188:	ldr	x0, [sp, #96]
  40818c:	ldr	x1, [x0]
  408190:	ldr	x0, [sp, #104]
  408194:	str	x1, [x0, #40]
  408198:	ldr	x0, [sp, #104]
  40819c:	ldr	x0, [x0, #40]
  4081a0:	cmp	x0, #0x0
  4081a4:	b.eq	4081b8 <loopback_list_get+0x26c>  // b.none
  4081a8:	ldr	x0, [sp, #104]
  4081ac:	ldr	x0, [x0, #40]
  4081b0:	ldr	x1, [sp, #104]
  4081b4:	str	x1, [x0, #48]
  4081b8:	ldr	x0, [sp, #104]
  4081bc:	str	xzr, [x0, #48]
  4081c0:	ldr	x0, [sp, #96]
  4081c4:	ldr	x1, [sp, #104]
  4081c8:	str	x1, [x0]
  4081cc:	mov	w20, #0x2                   	// #2
  4081d0:	add	x0, sp, #0x40
  4081d4:	bl	406c40 <freep>
  4081d8:	cmp	w20, #0x0
  4081dc:	b.eq	4081e8 <loopback_list_get+0x29c>  // b.none
  4081e0:	cmp	w20, #0x2
  4081e4:	b.ne	408204 <loopback_list_get+0x2b8>  // b.any
  4081e8:	ldr	x0, [sp, #56]
  4081ec:	bl	403630 <sd_device_enumerator_get_device_next@plt>
  4081f0:	str	x0, [sp, #72]
  4081f4:	ldr	x0, [sp, #72]
  4081f8:	cmp	x0, #0x0
  4081fc:	b.ne	408098 <loopback_list_get+0x14c>  // b.any
  408200:	mov	w19, #0x0                   	// #0
  408204:	add	x0, sp, #0x38
  408208:	bl	406c0c <sd_device_enumerator_unrefp>
  40820c:	mov	w1, w19
  408210:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  408214:	add	x0, x0, #0x4b8
  408218:	ldr	x2, [sp, #168]
  40821c:	ldr	x0, [x0]
  408220:	eor	x0, x2, x0
  408224:	cmp	x0, #0x0
  408228:	b.eq	408230 <loopback_list_get+0x2e4>  // b.none
  40822c:	bl	4035a0 <__stack_chk_fail@plt>
  408230:	mov	w0, w1
  408234:	ldp	x19, x20, [sp, #16]
  408238:	ldp	x29, x30, [sp], #176
  40823c:	ret

0000000000408240 <dm_list_get>:
  408240:	stp	x29, x30, [sp, #-192]!
  408244:	mov	x29, sp
  408248:	stp	x19, x20, [sp, #16]
  40824c:	str	x0, [sp, #40]
  408250:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  408254:	add	x0, x0, #0x4b8
  408258:	ldr	x1, [x0]
  40825c:	str	x1, [sp, #184]
  408260:	mov	x1, #0x0                   	// #0
  408264:	str	xzr, [sp, #64]
  408268:	ldr	x0, [sp, #40]
  40826c:	cmp	x0, #0x0
  408270:	cset	w0, eq  // eq = none
  408274:	and	w0, w0, #0xff
  408278:	and	x0, x0, #0xff
  40827c:	cmp	x0, #0x0
  408280:	b.eq	4082ac <dm_list_get+0x6c>  // b.none
  408284:	adrp	x0, 40c000 <_fini+0xb30>
  408288:	add	x1, x0, #0x3b3
  40828c:	adrp	x0, 40c000 <_fini+0xb30>
  408290:	add	x4, x0, #0x990
  408294:	mov	w3, #0x117                 	// #279
  408298:	mov	x2, x1
  40829c:	adrp	x0, 40c000 <_fini+0xb30>
  4082a0:	add	x1, x0, #0x3d0
  4082a4:	mov	w0, #0x0                   	// #0
  4082a8:	bl	4032d0 <log_assert_failed_realm@plt>
  4082ac:	add	x0, sp, #0x40
  4082b0:	bl	4031b0 <sd_device_enumerator_new@plt>
  4082b4:	str	w0, [sp, #60]
  4082b8:	ldr	w0, [sp, #60]
  4082bc:	cmp	w0, #0x0
  4082c0:	b.ge	4082cc <dm_list_get+0x8c>  // b.tcont
  4082c4:	ldr	w19, [sp, #60]
  4082c8:	b	4084e8 <dm_list_get+0x2a8>
  4082cc:	ldr	x0, [sp, #64]
  4082d0:	bl	4039a0 <sd_device_enumerator_allow_uninitialized@plt>
  4082d4:	str	w0, [sp, #60]
  4082d8:	ldr	w0, [sp, #60]
  4082dc:	cmp	w0, #0x0
  4082e0:	b.ge	4082ec <dm_list_get+0xac>  // b.tcont
  4082e4:	ldr	w19, [sp, #60]
  4082e8:	b	4084e8 <dm_list_get+0x2a8>
  4082ec:	ldr	x3, [sp, #64]
  4082f0:	mov	w2, #0x1                   	// #1
  4082f4:	adrp	x0, 40c000 <_fini+0xb30>
  4082f8:	add	x1, x0, #0x4f8
  4082fc:	mov	x0, x3
  408300:	bl	4031f0 <sd_device_enumerator_add_match_subsystem@plt>
  408304:	str	w0, [sp, #60]
  408308:	ldr	w0, [sp, #60]
  40830c:	cmp	w0, #0x0
  408310:	b.ge	40831c <dm_list_get+0xdc>  // b.tcont
  408314:	ldr	w19, [sp, #60]
  408318:	b	4084e8 <dm_list_get+0x2a8>
  40831c:	ldr	x2, [sp, #64]
  408320:	adrp	x0, 40c000 <_fini+0xb30>
  408324:	add	x1, x0, #0x520
  408328:	mov	x0, x2
  40832c:	bl	4031a0 <sd_device_enumerator_add_match_sysname@plt>
  408330:	str	w0, [sp, #60]
  408334:	ldr	w0, [sp, #60]
  408338:	cmp	w0, #0x0
  40833c:	b.ge	408348 <dm_list_get+0x108>  // b.tcont
  408340:	ldr	w19, [sp, #60]
  408344:	b	4084e8 <dm_list_get+0x2a8>
  408348:	ldr	x0, [sp, #64]
  40834c:	bl	403240 <sd_device_enumerator_get_device_first@plt>
  408350:	str	x0, [sp, #88]
  408354:	b	4084d8 <dm_list_get+0x298>
  408358:	str	xzr, [sp, #72]
  40835c:	add	x0, sp, #0x80
  408360:	mov	x1, x0
  408364:	ldr	x0, [sp, #88]
  408368:	bl	403640 <sd_device_get_devnum@plt>
  40836c:	cmp	w0, #0x0
  408370:	b.lt	40838c <dm_list_get+0x14c>  // b.tstop
  408374:	add	x0, sp, #0x50
  408378:	mov	x1, x0
  40837c:	ldr	x0, [sp, #88]
  408380:	bl	4031e0 <sd_device_get_devname@plt>
  408384:	cmp	w0, #0x0
  408388:	b.ge	408394 <dm_list_get+0x154>  // b.tcont
  40838c:	mov	w20, #0x0                   	// #0
  408390:	b	4084b4 <dm_list_get+0x274>
  408394:	ldr	x0, [sp, #80]
  408398:	bl	4037d0 <strdup@plt>
  40839c:	str	x0, [sp, #72]
  4083a0:	ldr	x0, [sp, #72]
  4083a4:	cmp	x0, #0x0
  4083a8:	b.ne	4083b8 <dm_list_get+0x178>  // b.any
  4083ac:	mov	w19, #0xfffffff4            	// #-12
  4083b0:	mov	w20, #0x1                   	// #1
  4083b4:	b	4084b4 <dm_list_get+0x274>
  4083b8:	mov	x1, #0x1                   	// #1
  4083bc:	mov	x0, #0x38                  	// #56
  4083c0:	bl	406ce0 <malloc_multiply>
  4083c4:	str	x0, [sp, #96]
  4083c8:	ldr	x0, [sp, #96]
  4083cc:	cmp	x0, #0x0
  4083d0:	b.ne	4083e0 <dm_list_get+0x1a0>  // b.any
  4083d4:	mov	w19, #0xfffffff4            	// #-12
  4083d8:	mov	w20, #0x1                   	// #1
  4083dc:	b	4084b4 <dm_list_get+0x274>
  4083e0:	ldr	x0, [sp, #72]
  4083e4:	str	x0, [sp, #104]
  4083e8:	str	xzr, [sp, #72]
  4083ec:	ldr	x2, [sp, #104]
  4083f0:	ldr	x1, [sp, #128]
  4083f4:	ldr	x0, [sp, #96]
  4083f8:	stp	xzr, xzr, [x0]
  4083fc:	stp	xzr, xzr, [x0, #16]
  408400:	stp	xzr, xzr, [x0, #32]
  408404:	str	xzr, [x0, #48]
  408408:	ldr	x0, [sp, #96]
  40840c:	str	x2, [x0]
  408410:	ldr	x0, [sp, #96]
  408414:	str	x1, [x0, #32]
  408418:	ldr	x0, [sp, #40]
  40841c:	str	x0, [sp, #112]
  408420:	ldr	x0, [sp, #96]
  408424:	str	x0, [sp, #120]
  408428:	ldr	x0, [sp, #120]
  40842c:	cmp	x0, #0x0
  408430:	cset	w0, eq  // eq = none
  408434:	and	w0, w0, #0xff
  408438:	and	x0, x0, #0xff
  40843c:	cmp	x0, #0x0
  408440:	b.eq	40846c <dm_list_get+0x22c>  // b.none
  408444:	adrp	x0, 40c000 <_fini+0xb30>
  408448:	add	x1, x0, #0x3b3
  40844c:	adrp	x0, 40c000 <_fini+0xb30>
  408450:	add	x4, x0, #0x990
  408454:	mov	w3, #0x140                 	// #320
  408458:	mov	x2, x1
  40845c:	adrp	x0, 40c000 <_fini+0xb30>
  408460:	add	x1, x0, #0x3e0
  408464:	mov	w0, #0x0                   	// #0
  408468:	bl	4032d0 <log_assert_failed_realm@plt>
  40846c:	ldr	x0, [sp, #112]
  408470:	ldr	x1, [x0]
  408474:	ldr	x0, [sp, #120]
  408478:	str	x1, [x0, #40]
  40847c:	ldr	x0, [sp, #120]
  408480:	ldr	x0, [x0, #40]
  408484:	cmp	x0, #0x0
  408488:	b.eq	40849c <dm_list_get+0x25c>  // b.none
  40848c:	ldr	x0, [sp, #120]
  408490:	ldr	x0, [x0, #40]
  408494:	ldr	x1, [sp, #120]
  408498:	str	x1, [x0, #48]
  40849c:	ldr	x0, [sp, #120]
  4084a0:	str	xzr, [x0, #48]
  4084a4:	ldr	x0, [sp, #112]
  4084a8:	ldr	x1, [sp, #120]
  4084ac:	str	x1, [x0]
  4084b0:	mov	w20, #0x2                   	// #2
  4084b4:	add	x0, sp, #0x48
  4084b8:	bl	406c40 <freep>
  4084bc:	cmp	w20, #0x0
  4084c0:	b.eq	4084cc <dm_list_get+0x28c>  // b.none
  4084c4:	cmp	w20, #0x2
  4084c8:	b.ne	4084e8 <dm_list_get+0x2a8>  // b.any
  4084cc:	ldr	x0, [sp, #64]
  4084d0:	bl	403630 <sd_device_enumerator_get_device_next@plt>
  4084d4:	str	x0, [sp, #88]
  4084d8:	ldr	x0, [sp, #88]
  4084dc:	cmp	x0, #0x0
  4084e0:	b.ne	408358 <dm_list_get+0x118>  // b.any
  4084e4:	mov	w19, #0x0                   	// #0
  4084e8:	add	x0, sp, #0x40
  4084ec:	bl	406c0c <sd_device_enumerator_unrefp>
  4084f0:	mov	w1, w19
  4084f4:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  4084f8:	add	x0, x0, #0x4b8
  4084fc:	ldr	x2, [sp, #184]
  408500:	ldr	x0, [x0]
  408504:	eor	x0, x2, x0
  408508:	cmp	x0, #0x0
  40850c:	b.eq	408514 <dm_list_get+0x2d4>  // b.none
  408510:	bl	4035a0 <__stack_chk_fail@plt>
  408514:	mov	w0, w1
  408518:	ldp	x19, x20, [sp, #16]
  40851c:	ldp	x29, x30, [sp], #192
  408520:	ret

0000000000408524 <delete_loopback>:
  408524:	stp	x29, x30, [sp, #-64]!
  408528:	mov	x29, sp
  40852c:	str	x19, [sp, #16]
  408530:	str	x0, [sp, #40]
  408534:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  408538:	add	x0, x0, #0x4b8
  40853c:	ldr	x1, [x0]
  408540:	str	x1, [sp, #56]
  408544:	mov	x1, #0x0                   	// #0
  408548:	mov	w0, #0xffffffff            	// #-1
  40854c:	str	w0, [sp, #48]
  408550:	ldr	x0, [sp, #40]
  408554:	cmp	x0, #0x0
  408558:	cset	w0, eq  // eq = none
  40855c:	and	w0, w0, #0xff
  408560:	and	x0, x0, #0xff
  408564:	cmp	x0, #0x0
  408568:	b.eq	408594 <delete_loopback+0x70>  // b.none
  40856c:	adrp	x0, 40c000 <_fini+0xb30>
  408570:	add	x1, x0, #0x3b3
  408574:	adrp	x0, 40c000 <_fini+0xb30>
  408578:	add	x4, x0, #0x9a0
  40857c:	mov	w3, #0x14a                 	// #330
  408580:	mov	x2, x1
  408584:	adrp	x0, 40c000 <_fini+0xb30>
  408588:	add	x1, x0, #0x528
  40858c:	mov	w0, #0x0                   	// #0
  408590:	bl	4032d0 <log_assert_failed_realm@plt>
  408594:	mov	w1, #0x80000               	// #524288
  408598:	ldr	x0, [sp, #40]
  40859c:	bl	403900 <open64@plt>
  4085a0:	str	w0, [sp, #48]
  4085a4:	ldr	w0, [sp, #48]
  4085a8:	cmp	w0, #0x0
  4085ac:	b.ge	4085d8 <delete_loopback+0xb4>  // b.tcont
  4085b0:	bl	4034e0 <__errno_location@plt>
  4085b4:	ldr	w0, [x0]
  4085b8:	cmp	w0, #0x2
  4085bc:	b.eq	4085d0 <delete_loopback+0xac>  // b.none
  4085c0:	bl	4034e0 <__errno_location@plt>
  4085c4:	ldr	w0, [x0]
  4085c8:	neg	w19, w0
  4085cc:	b	408624 <delete_loopback+0x100>
  4085d0:	mov	w19, #0x0                   	// #0
  4085d4:	b	408624 <delete_loopback+0x100>
  4085d8:	ldr	w0, [sp, #48]
  4085dc:	mov	w2, #0x0                   	// #0
  4085e0:	mov	x1, #0x4c01                	// #19457
  4085e4:	bl	4036f0 <ioctl@plt>
  4085e8:	str	w0, [sp, #52]
  4085ec:	ldr	w0, [sp, #52]
  4085f0:	cmp	w0, #0x0
  4085f4:	b.lt	408600 <delete_loopback+0xdc>  // b.tstop
  4085f8:	mov	w19, #0x1                   	// #1
  4085fc:	b	408624 <delete_loopback+0x100>
  408600:	bl	4034e0 <__errno_location@plt>
  408604:	ldr	w0, [x0]
  408608:	cmp	w0, #0x6
  40860c:	b.ne	408618 <delete_loopback+0xf4>  // b.any
  408610:	mov	w19, #0x0                   	// #0
  408614:	b	408624 <delete_loopback+0x100>
  408618:	bl	4034e0 <__errno_location@plt>
  40861c:	ldr	w0, [x0]
  408620:	neg	w19, w0
  408624:	add	x0, sp, #0x30
  408628:	bl	406d34 <closep>
  40862c:	mov	w1, w19
  408630:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  408634:	add	x0, x0, #0x4b8
  408638:	ldr	x2, [sp, #56]
  40863c:	ldr	x0, [x0]
  408640:	eor	x0, x2, x0
  408644:	cmp	x0, #0x0
  408648:	b.eq	408650 <delete_loopback+0x12c>  // b.none
  40864c:	bl	4035a0 <__stack_chk_fail@plt>
  408650:	mov	w0, w1
  408654:	ldr	x19, [sp, #16]
  408658:	ldp	x29, x30, [sp], #64
  40865c:	ret

0000000000408660 <delete_dm>:
  408660:	stp	x29, x30, [sp, #-384]!
  408664:	mov	x29, sp
  408668:	str	x19, [sp, #16]
  40866c:	str	x0, [sp, #40]
  408670:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  408674:	add	x0, x0, #0x4b8
  408678:	ldr	x1, [x0]
  40867c:	str	x1, [sp, #376]
  408680:	mov	x1, #0x0                   	// #0
  408684:	add	x0, sp, #0x40
  408688:	mov	x1, #0x138                 	// #312
  40868c:	mov	x2, x1
  408690:	mov	w1, #0x0                   	// #0
  408694:	bl	403980 <memset@plt>
  408698:	mov	w0, #0x4                   	// #4
  40869c:	str	w0, [sp, #64]
  4086a0:	mov	w0, #0x1b                  	// #27
  4086a4:	str	w0, [sp, #68]
  4086a8:	mov	w0, #0x138                 	// #312
  4086ac:	str	w0, [sp, #76]
  4086b0:	ldr	x0, [sp, #40]
  4086b4:	str	x0, [sp, #104]
  4086b8:	mov	w0, #0xffffffff            	// #-1
  4086bc:	str	w0, [sp, #60]
  4086c0:	ldr	x0, [sp, #40]
  4086c4:	bl	403700 <gnu_dev_major@plt>
  4086c8:	cmp	w0, #0x0
  4086cc:	cset	w0, eq  // eq = none
  4086d0:	and	w0, w0, #0xff
  4086d4:	and	x0, x0, #0xff
  4086d8:	cmp	x0, #0x0
  4086dc:	b.eq	408708 <delete_dm+0xa8>  // b.none
  4086e0:	adrp	x0, 40c000 <_fini+0xb30>
  4086e4:	add	x1, x0, #0x3b3
  4086e8:	adrp	x0, 40c000 <_fini+0xb30>
  4086ec:	add	x4, x0, #0x9b0
  4086f0:	mov	w3, #0x169                 	// #361
  4086f4:	mov	x2, x1
  4086f8:	adrp	x0, 40c000 <_fini+0xb30>
  4086fc:	add	x1, x0, #0x530
  408700:	mov	w0, #0x0                   	// #0
  408704:	bl	4032d0 <log_assert_failed_realm@plt>
  408708:	mov	w1, #0x2                   	// #2
  40870c:	movk	w1, #0x8, lsl #16
  408710:	adrp	x0, 40c000 <_fini+0xb30>
  408714:	add	x0, x0, #0x548
  408718:	bl	403900 <open64@plt>
  40871c:	str	w0, [sp, #60]
  408720:	ldr	w0, [sp, #60]
  408724:	cmp	w0, #0x0
  408728:	b.ge	40873c <delete_dm+0xdc>  // b.tcont
  40872c:	bl	4034e0 <__errno_location@plt>
  408730:	ldr	w0, [x0]
  408734:	neg	w19, w0
  408738:	b	408770 <delete_dm+0x110>
  40873c:	ldr	w0, [sp, #60]
  408740:	add	x1, sp, #0x40
  408744:	mov	x2, x1
  408748:	mov	x1, #0xfd04                	// #64772
  40874c:	movk	x1, #0xc138, lsl #16
  408750:	bl	4036f0 <ioctl@plt>
  408754:	cmp	w0, #0x0
  408758:	b.ge	40876c <delete_dm+0x10c>  // b.tcont
  40875c:	bl	4034e0 <__errno_location@plt>
  408760:	ldr	w0, [x0]
  408764:	neg	w19, w0
  408768:	b	408770 <delete_dm+0x110>
  40876c:	mov	w19, #0x0                   	// #0
  408770:	add	x0, sp, #0x3c
  408774:	bl	406d34 <closep>
  408778:	mov	w1, w19
  40877c:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  408780:	add	x0, x0, #0x4b8
  408784:	ldr	x2, [sp, #376]
  408788:	ldr	x0, [x0]
  40878c:	eor	x0, x2, x0
  408790:	cmp	x0, #0x0
  408794:	b.eq	40879c <delete_dm+0x13c>  // b.none
  408798:	bl	4035a0 <__stack_chk_fail@plt>
  40879c:	mov	w0, w1
  4087a0:	ldr	x19, [sp, #16]
  4087a4:	ldp	x29, x30, [sp], #384
  4087a8:	ret

00000000004087ac <nonunmountable_path>:
  4087ac:	stp	x29, x30, [sp, #-32]!
  4087b0:	mov	x29, sp
  4087b4:	str	x0, [sp, #24]
  4087b8:	adrp	x0, 40c000 <_fini+0xb30>
  4087bc:	add	x1, x0, #0x560
  4087c0:	ldr	x0, [sp, #24]
  4087c4:	bl	403230 <path_equal@plt>
  4087c8:	and	w0, w0, #0xff
  4087cc:	cmp	w0, #0x0
  4087d0:	b.ne	4087ec <nonunmountable_path+0x40>  // b.any
  4087d4:	adrp	x0, 40c000 <_fini+0xb30>
  4087d8:	add	x1, x0, #0x568
  4087dc:	ldr	x0, [sp, #24]
  4087e0:	bl	4034a0 <path_startswith@plt>
  4087e4:	cmp	x0, #0x0
  4087e8:	b.eq	4087f4 <nonunmountable_path+0x48>  // b.none
  4087ec:	mov	w0, #0x1                   	// #1
  4087f0:	b	4087f8 <nonunmountable_path+0x4c>
  4087f4:	mov	w0, #0x0                   	// #0
  4087f8:	and	w0, w0, #0x1
  4087fc:	and	w0, w0, #0xff
  408800:	ldp	x29, x30, [sp], #32
  408804:	ret

0000000000408808 <remount_with_timeout>:
  408808:	stp	x29, x30, [sp, #-384]!
  40880c:	mov	x29, sp
  408810:	str	x19, [sp, #16]
  408814:	str	x0, [sp, #40]
  408818:	str	w1, [sp, #36]
  40881c:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  408820:	add	x0, x0, #0x4b8
  408824:	ldr	x1, [x0]
  408828:	str	x1, [sp, #376]
  40882c:	mov	x1, #0x0                   	// #0
  408830:	add	x0, sp, #0x78
  408834:	mov	w3, #0xffffffff            	// #-1
  408838:	mov	w2, #0x11                  	// #17
  40883c:	mov	x1, x0
  408840:	mov	w0, #0x0                   	// #0
  408844:	bl	403410 <sigprocmask_many@plt>
  408848:	lsr	w0, w0, #31
  40884c:	and	w0, w0, #0xff
  408850:	and	x0, x0, #0xff
  408854:	cmp	x0, #0x0
  408858:	b.eq	408884 <remount_with_timeout+0x7c>  // b.none
  40885c:	adrp	x0, 40c000 <_fini+0xb30>
  408860:	add	x1, x0, #0x3b3
  408864:	adrp	x0, 40c000 <_fini+0xb30>
  408868:	add	x4, x0, #0x9c0
  40886c:	mov	w3, #0x181                 	// #385
  408870:	mov	x2, x1
  408874:	adrp	x0, 40c000 <_fini+0xb30>
  408878:	add	x1, x0, #0x578
  40887c:	mov	w0, #0x0                   	// #0
  408880:	bl	4032d0 <log_assert_failed_realm@plt>
  408884:	add	x0, sp, #0xf8
  408888:	add	x1, sp, #0x78
  40888c:	ldp	x2, x3, [x1]
  408890:	stp	x2, x3, [x0]
  408894:	ldp	x2, x3, [x1, #16]
  408898:	stp	x2, x3, [x0, #16]
  40889c:	ldp	x2, x3, [x1, #32]
  4088a0:	stp	x2, x3, [x0, #32]
  4088a4:	ldp	x2, x3, [x1, #48]
  4088a8:	stp	x2, x3, [x0, #48]
  4088ac:	ldp	x2, x3, [x1, #64]
  4088b0:	stp	x2, x3, [x0, #64]
  4088b4:	ldp	x2, x3, [x1, #80]
  4088b8:	stp	x2, x3, [x0, #80]
  4088bc:	ldp	x2, x3, [x1, #96]
  4088c0:	stp	x2, x3, [x0, #96]
  4088c4:	ldp	x2, x3, [x1, #112]
  4088c8:	stp	x2, x3, [x0, #112]
  4088cc:	add	x0, sp, #0x78
  4088d0:	add	x1, sp, #0xf8
  4088d4:	ldp	x2, x3, [x1]
  4088d8:	stp	x2, x3, [x0]
  4088dc:	ldp	x2, x3, [x1, #16]
  4088e0:	stp	x2, x3, [x0, #16]
  4088e4:	ldp	x2, x3, [x1, #32]
  4088e8:	stp	x2, x3, [x0, #32]
  4088ec:	ldp	x2, x3, [x1, #48]
  4088f0:	stp	x2, x3, [x0, #48]
  4088f4:	ldp	x2, x3, [x1, #64]
  4088f8:	stp	x2, x3, [x0, #64]
  4088fc:	ldp	x2, x3, [x1, #80]
  408900:	stp	x2, x3, [x0, #80]
  408904:	ldp	x2, x3, [x1, #96]
  408908:	stp	x2, x3, [x0, #96]
  40890c:	ldp	x2, x3, [x1, #112]
  408910:	stp	x2, x3, [x0, #112]
  408914:	ldr	x0, [sp, #40]
  408918:	cmp	x0, #0x0
  40891c:	cset	w0, eq  // eq = none
  408920:	and	w0, w0, #0xff
  408924:	and	x0, x0, #0xff
  408928:	cmp	x0, #0x0
  40892c:	b.eq	408958 <remount_with_timeout+0x150>  // b.none
  408930:	adrp	x0, 40c000 <_fini+0xb30>
  408934:	add	x1, x0, #0x3b3
  408938:	adrp	x0, 40c000 <_fini+0xb30>
  40893c:	add	x4, x0, #0x9c0
  408940:	mov	w3, #0x183                 	// #387
  408944:	mov	x2, x1
  408948:	adrp	x0, 40c000 <_fini+0xb30>
  40894c:	add	x1, x0, #0x3d8
  408950:	mov	w0, #0x0                   	// #0
  408954:	bl	4032d0 <log_assert_failed_realm@plt>
  408958:	add	x0, sp, #0x34
  40895c:	mov	x2, x0
  408960:	mov	w1, #0x33                  	// #51
  408964:	adrp	x0, 40c000 <_fini+0xb30>
  408968:	add	x0, x0, #0x5a8
  40896c:	bl	40702c <safe_fork>
  408970:	str	w0, [sp, #56]
  408974:	ldr	w0, [sp, #56]
  408978:	cmp	w0, #0x0
  40897c:	b.ge	408988 <remount_with_timeout+0x180>  // b.tcont
  408980:	ldr	w19, [sp, #56]
  408984:	b	408ce4 <remount_with_timeout+0x4dc>
  408988:	ldr	w0, [sp, #56]
  40898c:	cmp	w0, #0x0
  408990:	b.ne	408af0 <remount_with_timeout+0x2e8>  // b.any
  408994:	mov	w0, #0x6                   	// #6
  408998:	str	w0, [sp, #96]
  40899c:	str	wzr, [sp, #100]
  4089a0:	str	wzr, [sp, #104]
  4089a4:	ldr	w0, [sp, #104]
  4089a8:	bl	4039c0 <log_get_max_level_realm@plt>
  4089ac:	mov	w1, w0
  4089b0:	ldr	w0, [sp, #96]
  4089b4:	and	w0, w0, #0x7
  4089b8:	cmp	w1, w0
  4089bc:	b.lt	408a18 <remount_with_timeout+0x210>  // b.tstop
  4089c0:	ldr	w0, [sp, #104]
  4089c4:	lsl	w1, w0, #10
  4089c8:	ldr	w0, [sp, #96]
  4089cc:	orr	w8, w1, w0
  4089d0:	adrp	x0, 40c000 <_fini+0xb30>
  4089d4:	add	x1, x0, #0x3b3
  4089d8:	ldr	x0, [sp, #40]
  4089dc:	ldr	x2, [x0]
  4089e0:	ldr	x0, [sp, #40]
  4089e4:	ldr	x0, [x0, #8]
  4089e8:	mov	x7, x0
  4089ec:	mov	x6, x2
  4089f0:	adrp	x0, 40c000 <_fini+0xb30>
  4089f4:	add	x5, x0, #0x5b8
  4089f8:	adrp	x0, 40c000 <_fini+0xb30>
  4089fc:	add	x4, x0, #0x9d8
  408a00:	mov	w3, #0x18d                 	// #397
  408a04:	mov	x2, x1
  408a08:	ldr	w1, [sp, #100]
  408a0c:	mov	w0, w8
  408a10:	bl	4036d0 <log_internal_realm@plt>
  408a14:	b	408a20 <remount_with_timeout+0x218>
  408a18:	ldr	w0, [sp, #100]
  408a1c:	cmp	w0, #0x0
  408a20:	ldr	x0, [sp, #40]
  408a24:	ldr	x1, [x0]
  408a28:	ldr	x0, [sp, #40]
  408a2c:	ldr	x2, [x0, #16]
  408a30:	ldr	x0, [sp, #40]
  408a34:	ldr	x0, [x0, #8]
  408a38:	mov	x4, x0
  408a3c:	mov	x3, x2
  408a40:	mov	x2, #0x0                   	// #0
  408a44:	mov	x0, #0x0                   	// #0
  408a48:	bl	403890 <mount@plt>
  408a4c:	str	w0, [sp, #56]
  408a50:	ldr	w0, [sp, #56]
  408a54:	cmp	w0, #0x0
  408a58:	b.ge	408ae4 <remount_with_timeout+0x2dc>  // b.tcont
  408a5c:	ldr	w0, [sp, #36]
  408a60:	str	w0, [sp, #108]
  408a64:	bl	4034e0 <__errno_location@plt>
  408a68:	ldr	w0, [x0]
  408a6c:	str	w0, [sp, #112]
  408a70:	str	wzr, [sp, #116]
  408a74:	ldr	w0, [sp, #116]
  408a78:	bl	4039c0 <log_get_max_level_realm@plt>
  408a7c:	mov	w1, w0
  408a80:	ldr	w0, [sp, #108]
  408a84:	and	w0, w0, #0x7
  408a88:	cmp	w1, w0
  408a8c:	b.lt	408adc <remount_with_timeout+0x2d4>  // b.tstop
  408a90:	ldr	w0, [sp, #116]
  408a94:	lsl	w1, w0, #10
  408a98:	ldr	w0, [sp, #108]
  408a9c:	orr	w7, w1, w0
  408aa0:	adrp	x0, 40c000 <_fini+0xb30>
  408aa4:	add	x1, x0, #0x3b3
  408aa8:	ldr	x0, [sp, #40]
  408aac:	ldr	x0, [x0]
  408ab0:	mov	x6, x0
  408ab4:	adrp	x0, 40c000 <_fini+0xb30>
  408ab8:	add	x5, x0, #0x5e8
  408abc:	adrp	x0, 40c000 <_fini+0xb30>
  408ac0:	add	x4, x0, #0x9d8
  408ac4:	mov	w3, #0x192                 	// #402
  408ac8:	mov	x2, x1
  408acc:	ldr	w1, [sp, #112]
  408ad0:	mov	w0, w7
  408ad4:	bl	4036d0 <log_internal_realm@plt>
  408ad8:	b	408ae4 <remount_with_timeout+0x2dc>
  408adc:	ldr	w0, [sp, #112]
  408ae0:	cmp	w0, #0x0
  408ae4:	ldr	w0, [sp, #56]
  408ae8:	lsr	w0, w0, #31
  408aec:	bl	403320 <_exit@plt>
  408af0:	ldr	w0, [sp, #52]
  408af4:	mov	x1, #0x4a80                	// #19072
  408af8:	movk	x1, #0x55d, lsl #16
  408afc:	bl	4038f0 <wait_for_terminate_with_timeout@plt>
  408b00:	str	w0, [sp, #56]
  408b04:	ldr	w0, [sp, #56]
  408b08:	cmn	w0, #0x6e
  408b0c:	b.ne	408bac <remount_with_timeout+0x3a4>  // b.any
  408b10:	mov	w0, #0x3                   	// #3
  408b14:	str	w0, [sp, #84]
  408b18:	ldr	w0, [sp, #56]
  408b1c:	str	w0, [sp, #88]
  408b20:	str	wzr, [sp, #92]
  408b24:	ldr	w0, [sp, #92]
  408b28:	bl	4039c0 <log_get_max_level_realm@plt>
  408b2c:	mov	w1, w0
  408b30:	ldr	w0, [sp, #84]
  408b34:	and	w0, w0, #0x7
  408b38:	cmp	w1, w0
  408b3c:	b.lt	408b94 <remount_with_timeout+0x38c>  // b.tstop
  408b40:	ldr	w0, [sp, #92]
  408b44:	lsl	w1, w0, #10
  408b48:	ldr	w0, [sp, #84]
  408b4c:	orr	w8, w1, w0
  408b50:	adrp	x0, 40c000 <_fini+0xb30>
  408b54:	add	x1, x0, #0x3b3
  408b58:	ldr	x0, [sp, #40]
  408b5c:	ldr	x0, [x0]
  408b60:	ldr	w2, [sp, #52]
  408b64:	mov	w7, w2
  408b68:	mov	x6, x0
  408b6c:	adrp	x0, 40c000 <_fini+0xb30>
  408b70:	add	x5, x0, #0x610
  408b74:	adrp	x0, 40c000 <_fini+0xb30>
  408b78:	add	x4, x0, #0x9d8
  408b7c:	mov	w3, #0x199                 	// #409
  408b80:	mov	x2, x1
  408b84:	ldr	w1, [sp, #88]
  408b88:	mov	w0, w8
  408b8c:	bl	4036d0 <log_internal_realm@plt>
  408b90:	b	408b9c <remount_with_timeout+0x394>
  408b94:	ldr	w0, [sp, #88]
  408b98:	cmp	w0, #0x0
  408b9c:	ldr	w0, [sp, #52]
  408ba0:	mov	w1, #0x9                   	// #9
  408ba4:	bl	403110 <kill@plt>
  408ba8:	b	408ce0 <remount_with_timeout+0x4d8>
  408bac:	ldr	w0, [sp, #56]
  408bb0:	cmn	w0, #0x47
  408bb4:	b.ne	408c48 <remount_with_timeout+0x440>  // b.any
  408bb8:	mov	w0, #0x7                   	// #7
  408bbc:	str	w0, [sp, #72]
  408bc0:	ldr	w0, [sp, #56]
  408bc4:	str	w0, [sp, #76]
  408bc8:	str	wzr, [sp, #80]
  408bcc:	ldr	w0, [sp, #80]
  408bd0:	bl	4039c0 <log_get_max_level_realm@plt>
  408bd4:	mov	w1, w0
  408bd8:	ldr	w0, [sp, #72]
  408bdc:	and	w0, w0, #0x7
  408be0:	cmp	w1, w0
  408be4:	b.lt	408c3c <remount_with_timeout+0x434>  // b.tstop
  408be8:	ldr	w0, [sp, #80]
  408bec:	lsl	w1, w0, #10
  408bf0:	ldr	w0, [sp, #72]
  408bf4:	orr	w8, w1, w0
  408bf8:	adrp	x0, 40c000 <_fini+0xb30>
  408bfc:	add	x1, x0, #0x3b3
  408c00:	ldr	x0, [sp, #40]
  408c04:	ldr	x0, [x0]
  408c08:	ldr	w2, [sp, #52]
  408c0c:	mov	w7, w2
  408c10:	mov	x6, x0
  408c14:	adrp	x0, 40c000 <_fini+0xb30>
  408c18:	add	x5, x0, #0x648
  408c1c:	adrp	x0, 40c000 <_fini+0xb30>
  408c20:	add	x4, x0, #0x9d8
  408c24:	mov	w3, #0x19c                 	// #412
  408c28:	mov	x2, x1
  408c2c:	ldr	w1, [sp, #76]
  408c30:	mov	w0, w8
  408c34:	bl	4036d0 <log_internal_realm@plt>
  408c38:	b	408ce0 <remount_with_timeout+0x4d8>
  408c3c:	ldr	w0, [sp, #76]
  408c40:	cmp	w0, #0x0
  408c44:	b	408ce0 <remount_with_timeout+0x4d8>
  408c48:	ldr	w0, [sp, #56]
  408c4c:	cmp	w0, #0x0
  408c50:	b.ge	408ce0 <remount_with_timeout+0x4d8>  // b.tcont
  408c54:	mov	w0, #0x3                   	// #3
  408c58:	str	w0, [sp, #60]
  408c5c:	ldr	w0, [sp, #56]
  408c60:	str	w0, [sp, #64]
  408c64:	str	wzr, [sp, #68]
  408c68:	ldr	w0, [sp, #68]
  408c6c:	bl	4039c0 <log_get_max_level_realm@plt>
  408c70:	mov	w1, w0
  408c74:	ldr	w0, [sp, #60]
  408c78:	and	w0, w0, #0x7
  408c7c:	cmp	w1, w0
  408c80:	b.lt	408cd8 <remount_with_timeout+0x4d0>  // b.tstop
  408c84:	ldr	w0, [sp, #68]
  408c88:	lsl	w1, w0, #10
  408c8c:	ldr	w0, [sp, #60]
  408c90:	orr	w8, w1, w0
  408c94:	adrp	x0, 40c000 <_fini+0xb30>
  408c98:	add	x1, x0, #0x3b3
  408c9c:	ldr	x0, [sp, #40]
  408ca0:	ldr	x0, [x0]
  408ca4:	ldr	w2, [sp, #52]
  408ca8:	mov	w7, w2
  408cac:	mov	x6, x0
  408cb0:	adrp	x0, 40c000 <_fini+0xb30>
  408cb4:	add	x5, x0, #0x698
  408cb8:	adrp	x0, 40c000 <_fini+0xb30>
  408cbc:	add	x4, x0, #0x9d8
  408cc0:	mov	w3, #0x19e                 	// #414
  408cc4:	mov	x2, x1
  408cc8:	ldr	w1, [sp, #64]
  408ccc:	mov	w0, w8
  408cd0:	bl	4036d0 <log_internal_realm@plt>
  408cd4:	b	408ce0 <remount_with_timeout+0x4d8>
  408cd8:	ldr	w0, [sp, #64]
  408cdc:	cmp	w0, #0x0
  408ce0:	ldr	w19, [sp, #56]
  408ce4:	add	x0, sp, #0x78
  408ce8:	bl	407060 <block_signals_reset>
  408cec:	mov	w1, w19
  408cf0:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  408cf4:	add	x0, x0, #0x4b8
  408cf8:	ldr	x2, [sp, #376]
  408cfc:	ldr	x0, [x0]
  408d00:	eor	x0, x2, x0
  408d04:	cmp	x0, #0x0
  408d08:	b.eq	408d10 <remount_with_timeout+0x508>  // b.none
  408d0c:	bl	4035a0 <__stack_chk_fail@plt>
  408d10:	mov	w0, w1
  408d14:	ldr	x19, [sp, #16]
  408d18:	ldp	x29, x30, [sp], #384
  408d1c:	ret

0000000000408d20 <umount_with_timeout>:
  408d20:	stp	x29, x30, [sp, #-384]!
  408d24:	mov	x29, sp
  408d28:	str	x19, [sp, #16]
  408d2c:	str	x0, [sp, #40]
  408d30:	str	w1, [sp, #36]
  408d34:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  408d38:	add	x0, x0, #0x4b8
  408d3c:	ldr	x1, [x0]
  408d40:	str	x1, [sp, #376]
  408d44:	mov	x1, #0x0                   	// #0
  408d48:	add	x0, sp, #0x78
  408d4c:	mov	w3, #0xffffffff            	// #-1
  408d50:	mov	w2, #0x11                  	// #17
  408d54:	mov	x1, x0
  408d58:	mov	w0, #0x0                   	// #0
  408d5c:	bl	403410 <sigprocmask_many@plt>
  408d60:	lsr	w0, w0, #31
  408d64:	and	w0, w0, #0xff
  408d68:	and	x0, x0, #0xff
  408d6c:	cmp	x0, #0x0
  408d70:	b.eq	408d9c <umount_with_timeout+0x7c>  // b.none
  408d74:	adrp	x0, 40c000 <_fini+0xb30>
  408d78:	add	x1, x0, #0x3b3
  408d7c:	adrp	x0, 40c000 <_fini+0xb30>
  408d80:	add	x4, x0, #0xa08
  408d84:	mov	w3, #0x1a7                 	// #423
  408d88:	mov	x2, x1
  408d8c:	adrp	x0, 40c000 <_fini+0xb30>
  408d90:	add	x1, x0, #0x578
  408d94:	mov	w0, #0x0                   	// #0
  408d98:	bl	4032d0 <log_assert_failed_realm@plt>
  408d9c:	add	x0, sp, #0xf8
  408da0:	add	x1, sp, #0x78
  408da4:	ldp	x2, x3, [x1]
  408da8:	stp	x2, x3, [x0]
  408dac:	ldp	x2, x3, [x1, #16]
  408db0:	stp	x2, x3, [x0, #16]
  408db4:	ldp	x2, x3, [x1, #32]
  408db8:	stp	x2, x3, [x0, #32]
  408dbc:	ldp	x2, x3, [x1, #48]
  408dc0:	stp	x2, x3, [x0, #48]
  408dc4:	ldp	x2, x3, [x1, #64]
  408dc8:	stp	x2, x3, [x0, #64]
  408dcc:	ldp	x2, x3, [x1, #80]
  408dd0:	stp	x2, x3, [x0, #80]
  408dd4:	ldp	x2, x3, [x1, #96]
  408dd8:	stp	x2, x3, [x0, #96]
  408ddc:	ldp	x2, x3, [x1, #112]
  408de0:	stp	x2, x3, [x0, #112]
  408de4:	add	x0, sp, #0x78
  408de8:	add	x1, sp, #0xf8
  408dec:	ldp	x2, x3, [x1]
  408df0:	stp	x2, x3, [x0]
  408df4:	ldp	x2, x3, [x1, #16]
  408df8:	stp	x2, x3, [x0, #16]
  408dfc:	ldp	x2, x3, [x1, #32]
  408e00:	stp	x2, x3, [x0, #32]
  408e04:	ldp	x2, x3, [x1, #48]
  408e08:	stp	x2, x3, [x0, #48]
  408e0c:	ldp	x2, x3, [x1, #64]
  408e10:	stp	x2, x3, [x0, #64]
  408e14:	ldp	x2, x3, [x1, #80]
  408e18:	stp	x2, x3, [x0, #80]
  408e1c:	ldp	x2, x3, [x1, #96]
  408e20:	stp	x2, x3, [x0, #96]
  408e24:	ldp	x2, x3, [x1, #112]
  408e28:	stp	x2, x3, [x0, #112]
  408e2c:	ldr	x0, [sp, #40]
  408e30:	cmp	x0, #0x0
  408e34:	cset	w0, eq  // eq = none
  408e38:	and	w0, w0, #0xff
  408e3c:	and	x0, x0, #0xff
  408e40:	cmp	x0, #0x0
  408e44:	b.eq	408e70 <umount_with_timeout+0x150>  // b.none
  408e48:	adrp	x0, 40c000 <_fini+0xb30>
  408e4c:	add	x1, x0, #0x3b3
  408e50:	adrp	x0, 40c000 <_fini+0xb30>
  408e54:	add	x4, x0, #0xa08
  408e58:	mov	w3, #0x1a9                 	// #425
  408e5c:	mov	x2, x1
  408e60:	adrp	x0, 40c000 <_fini+0xb30>
  408e64:	add	x1, x0, #0x3d8
  408e68:	mov	w0, #0x0                   	// #0
  408e6c:	bl	4032d0 <log_assert_failed_realm@plt>
  408e70:	add	x0, sp, #0x34
  408e74:	mov	x2, x0
  408e78:	mov	w1, #0x33                  	// #51
  408e7c:	adrp	x0, 40c000 <_fini+0xb30>
  408e80:	add	x0, x0, #0x6e8
  408e84:	bl	40702c <safe_fork>
  408e88:	str	w0, [sp, #56]
  408e8c:	ldr	w0, [sp, #56]
  408e90:	cmp	w0, #0x0
  408e94:	b.ge	408ea0 <umount_with_timeout+0x180>  // b.tcont
  408e98:	ldr	w19, [sp, #56]
  408e9c:	b	4091d4 <umount_with_timeout+0x4b4>
  408ea0:	ldr	w0, [sp, #56]
  408ea4:	cmp	w0, #0x0
  408ea8:	b.ne	408fe0 <umount_with_timeout+0x2c0>  // b.any
  408eac:	mov	w0, #0x6                   	// #6
  408eb0:	str	w0, [sp, #96]
  408eb4:	str	wzr, [sp, #100]
  408eb8:	str	wzr, [sp, #104]
  408ebc:	ldr	w0, [sp, #104]
  408ec0:	bl	4039c0 <log_get_max_level_realm@plt>
  408ec4:	mov	w1, w0
  408ec8:	ldr	w0, [sp, #96]
  408ecc:	and	w0, w0, #0x7
  408ed0:	cmp	w1, w0
  408ed4:	b.lt	408f24 <umount_with_timeout+0x204>  // b.tstop
  408ed8:	ldr	w0, [sp, #104]
  408edc:	lsl	w1, w0, #10
  408ee0:	ldr	w0, [sp, #96]
  408ee4:	orr	w7, w1, w0
  408ee8:	adrp	x0, 40c000 <_fini+0xb30>
  408eec:	add	x1, x0, #0x3b3
  408ef0:	ldr	x0, [sp, #40]
  408ef4:	ldr	x0, [x0]
  408ef8:	mov	x6, x0
  408efc:	adrp	x0, 40c000 <_fini+0xb30>
  408f00:	add	x5, x0, #0x6f8
  408f04:	adrp	x0, 40c000 <_fini+0xb30>
  408f08:	add	x4, x0, #0xa20
  408f0c:	mov	w3, #0x1b3                 	// #435
  408f10:	mov	x2, x1
  408f14:	ldr	w1, [sp, #100]
  408f18:	mov	w0, w7
  408f1c:	bl	4036d0 <log_internal_realm@plt>
  408f20:	b	408f2c <umount_with_timeout+0x20c>
  408f24:	ldr	w0, [sp, #100]
  408f28:	cmp	w0, #0x0
  408f2c:	ldr	x0, [sp, #40]
  408f30:	ldr	x0, [x0]
  408f34:	mov	w1, #0x1                   	// #1
  408f38:	bl	403750 <umount2@plt>
  408f3c:	str	w0, [sp, #56]
  408f40:	ldr	w0, [sp, #56]
  408f44:	cmp	w0, #0x0
  408f48:	b.ge	408fd4 <umount_with_timeout+0x2b4>  // b.tcont
  408f4c:	ldr	w0, [sp, #36]
  408f50:	str	w0, [sp, #108]
  408f54:	bl	4034e0 <__errno_location@plt>
  408f58:	ldr	w0, [x0]
  408f5c:	str	w0, [sp, #112]
  408f60:	str	wzr, [sp, #116]
  408f64:	ldr	w0, [sp, #116]
  408f68:	bl	4039c0 <log_get_max_level_realm@plt>
  408f6c:	mov	w1, w0
  408f70:	ldr	w0, [sp, #108]
  408f74:	and	w0, w0, #0x7
  408f78:	cmp	w1, w0
  408f7c:	b.lt	408fcc <umount_with_timeout+0x2ac>  // b.tstop
  408f80:	ldr	w0, [sp, #116]
  408f84:	lsl	w1, w0, #10
  408f88:	ldr	w0, [sp, #108]
  408f8c:	orr	w7, w1, w0
  408f90:	adrp	x0, 40c000 <_fini+0xb30>
  408f94:	add	x1, x0, #0x3b3
  408f98:	ldr	x0, [sp, #40]
  408f9c:	ldr	x0, [x0]
  408fa0:	mov	x6, x0
  408fa4:	adrp	x0, 40c000 <_fini+0xb30>
  408fa8:	add	x5, x0, #0x710
  408fac:	adrp	x0, 40c000 <_fini+0xb30>
  408fb0:	add	x4, x0, #0xa20
  408fb4:	mov	w3, #0x1be                 	// #446
  408fb8:	mov	x2, x1
  408fbc:	ldr	w1, [sp, #112]
  408fc0:	mov	w0, w7
  408fc4:	bl	4036d0 <log_internal_realm@plt>
  408fc8:	b	408fd4 <umount_with_timeout+0x2b4>
  408fcc:	ldr	w0, [sp, #112]
  408fd0:	cmp	w0, #0x0
  408fd4:	ldr	w0, [sp, #56]
  408fd8:	lsr	w0, w0, #31
  408fdc:	bl	403320 <_exit@plt>
  408fe0:	ldr	w0, [sp, #52]
  408fe4:	mov	x1, #0x4a80                	// #19072
  408fe8:	movk	x1, #0x55d, lsl #16
  408fec:	bl	4038f0 <wait_for_terminate_with_timeout@plt>
  408ff0:	str	w0, [sp, #56]
  408ff4:	ldr	w0, [sp, #56]
  408ff8:	cmn	w0, #0x6e
  408ffc:	b.ne	40909c <umount_with_timeout+0x37c>  // b.any
  409000:	mov	w0, #0x3                   	// #3
  409004:	str	w0, [sp, #84]
  409008:	ldr	w0, [sp, #56]
  40900c:	str	w0, [sp, #88]
  409010:	str	wzr, [sp, #92]
  409014:	ldr	w0, [sp, #92]
  409018:	bl	4039c0 <log_get_max_level_realm@plt>
  40901c:	mov	w1, w0
  409020:	ldr	w0, [sp, #84]
  409024:	and	w0, w0, #0x7
  409028:	cmp	w1, w0
  40902c:	b.lt	409084 <umount_with_timeout+0x364>  // b.tstop
  409030:	ldr	w0, [sp, #92]
  409034:	lsl	w1, w0, #10
  409038:	ldr	w0, [sp, #84]
  40903c:	orr	w8, w1, w0
  409040:	adrp	x0, 40c000 <_fini+0xb30>
  409044:	add	x1, x0, #0x3b3
  409048:	ldr	x0, [sp, #40]
  40904c:	ldr	x0, [x0]
  409050:	ldr	w2, [sp, #52]
  409054:	mov	w7, w2
  409058:	mov	x6, x0
  40905c:	adrp	x0, 40c000 <_fini+0xb30>
  409060:	add	x5, x0, #0x730
  409064:	adrp	x0, 40c000 <_fini+0xb30>
  409068:	add	x4, x0, #0xa20
  40906c:	mov	w3, #0x1c5                 	// #453
  409070:	mov	x2, x1
  409074:	ldr	w1, [sp, #88]
  409078:	mov	w0, w8
  40907c:	bl	4036d0 <log_internal_realm@plt>
  409080:	b	40908c <umount_with_timeout+0x36c>
  409084:	ldr	w0, [sp, #88]
  409088:	cmp	w0, #0x0
  40908c:	ldr	w0, [sp, #52]
  409090:	mov	w1, #0x9                   	// #9
  409094:	bl	403110 <kill@plt>
  409098:	b	4091d0 <umount_with_timeout+0x4b0>
  40909c:	ldr	w0, [sp, #56]
  4090a0:	cmn	w0, #0x47
  4090a4:	b.ne	409138 <umount_with_timeout+0x418>  // b.any
  4090a8:	mov	w0, #0x7                   	// #7
  4090ac:	str	w0, [sp, #72]
  4090b0:	ldr	w0, [sp, #56]
  4090b4:	str	w0, [sp, #76]
  4090b8:	str	wzr, [sp, #80]
  4090bc:	ldr	w0, [sp, #80]
  4090c0:	bl	4039c0 <log_get_max_level_realm@plt>
  4090c4:	mov	w1, w0
  4090c8:	ldr	w0, [sp, #72]
  4090cc:	and	w0, w0, #0x7
  4090d0:	cmp	w1, w0
  4090d4:	b.lt	40912c <umount_with_timeout+0x40c>  // b.tstop
  4090d8:	ldr	w0, [sp, #80]
  4090dc:	lsl	w1, w0, #10
  4090e0:	ldr	w0, [sp, #72]
  4090e4:	orr	w8, w1, w0
  4090e8:	adrp	x0, 40c000 <_fini+0xb30>
  4090ec:	add	x1, x0, #0x3b3
  4090f0:	ldr	x0, [sp, #40]
  4090f4:	ldr	x0, [x0]
  4090f8:	ldr	w2, [sp, #52]
  4090fc:	mov	w7, w2
  409100:	mov	x6, x0
  409104:	adrp	x0, 40c000 <_fini+0xb30>
  409108:	add	x5, x0, #0x768
  40910c:	adrp	x0, 40c000 <_fini+0xb30>
  409110:	add	x4, x0, #0xa20
  409114:	mov	w3, #0x1c8                 	// #456
  409118:	mov	x2, x1
  40911c:	ldr	w1, [sp, #76]
  409120:	mov	w0, w8
  409124:	bl	4036d0 <log_internal_realm@plt>
  409128:	b	4091d0 <umount_with_timeout+0x4b0>
  40912c:	ldr	w0, [sp, #76]
  409130:	cmp	w0, #0x0
  409134:	b	4091d0 <umount_with_timeout+0x4b0>
  409138:	ldr	w0, [sp, #56]
  40913c:	cmp	w0, #0x0
  409140:	b.ge	4091d0 <umount_with_timeout+0x4b0>  // b.tcont
  409144:	mov	w0, #0x3                   	// #3
  409148:	str	w0, [sp, #60]
  40914c:	ldr	w0, [sp, #56]
  409150:	str	w0, [sp, #64]
  409154:	str	wzr, [sp, #68]
  409158:	ldr	w0, [sp, #68]
  40915c:	bl	4039c0 <log_get_max_level_realm@plt>
  409160:	mov	w1, w0
  409164:	ldr	w0, [sp, #60]
  409168:	and	w0, w0, #0x7
  40916c:	cmp	w1, w0
  409170:	b.lt	4091c8 <umount_with_timeout+0x4a8>  // b.tstop
  409174:	ldr	w0, [sp, #68]
  409178:	lsl	w1, w0, #10
  40917c:	ldr	w0, [sp, #60]
  409180:	orr	w8, w1, w0
  409184:	adrp	x0, 40c000 <_fini+0xb30>
  409188:	add	x1, x0, #0x3b3
  40918c:	ldr	x0, [sp, #40]
  409190:	ldr	x0, [x0]
  409194:	ldr	w2, [sp, #52]
  409198:	mov	w7, w2
  40919c:	mov	x6, x0
  4091a0:	adrp	x0, 40c000 <_fini+0xb30>
  4091a4:	add	x5, x0, #0x7b8
  4091a8:	adrp	x0, 40c000 <_fini+0xb30>
  4091ac:	add	x4, x0, #0xa20
  4091b0:	mov	w3, #0x1ca                 	// #458
  4091b4:	mov	x2, x1
  4091b8:	ldr	w1, [sp, #64]
  4091bc:	mov	w0, w8
  4091c0:	bl	4036d0 <log_internal_realm@plt>
  4091c4:	b	4091d0 <umount_with_timeout+0x4b0>
  4091c8:	ldr	w0, [sp, #64]
  4091cc:	cmp	w0, #0x0
  4091d0:	ldr	w19, [sp, #56]
  4091d4:	add	x0, sp, #0x78
  4091d8:	bl	407060 <block_signals_reset>
  4091dc:	mov	w1, w19
  4091e0:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  4091e4:	add	x0, x0, #0x4b8
  4091e8:	ldr	x2, [sp, #376]
  4091ec:	ldr	x0, [x0]
  4091f0:	eor	x0, x2, x0
  4091f4:	cmp	x0, #0x0
  4091f8:	b.eq	409200 <umount_with_timeout+0x4e0>  // b.none
  4091fc:	bl	4035a0 <__stack_chk_fail@plt>
  409200:	mov	w0, w1
  409204:	ldr	x19, [sp, #16]
  409208:	ldp	x29, x30, [sp], #384
  40920c:	ret

0000000000409210 <mount_points_list_umount>:
  409210:	stp	x29, x30, [sp, #-64]!
  409214:	mov	x29, sp
  409218:	str	x0, [sp, #40]
  40921c:	str	x1, [sp, #32]
  409220:	str	w2, [sp, #28]
  409224:	str	wzr, [sp, #52]
  409228:	ldr	x0, [sp, #40]
  40922c:	cmp	x0, #0x0
  409230:	cset	w0, eq  // eq = none
  409234:	and	w0, w0, #0xff
  409238:	and	x0, x0, #0xff
  40923c:	cmp	x0, #0x0
  409240:	b.eq	40926c <mount_points_list_umount+0x5c>  // b.none
  409244:	adrp	x0, 40c000 <_fini+0xb30>
  409248:	add	x1, x0, #0x3b3
  40924c:	adrp	x0, 40c000 <_fini+0xb30>
  409250:	add	x4, x0, #0xa38
  409254:	mov	w3, #0x1d5                 	// #469
  409258:	mov	x2, x1
  40925c:	adrp	x0, 40c000 <_fini+0xb30>
  409260:	add	x1, x0, #0x3d0
  409264:	mov	w0, #0x0                   	// #0
  409268:	bl	4032d0 <log_assert_failed_realm@plt>
  40926c:	ldr	x0, [sp, #32]
  409270:	cmp	x0, #0x0
  409274:	cset	w0, eq  // eq = none
  409278:	and	w0, w0, #0xff
  40927c:	and	x0, x0, #0xff
  409280:	cmp	x0, #0x0
  409284:	b.eq	4092b0 <mount_points_list_umount+0xa0>  // b.none
  409288:	adrp	x0, 40c000 <_fini+0xb30>
  40928c:	add	x1, x0, #0x3b3
  409290:	adrp	x0, 40c000 <_fini+0xb30>
  409294:	add	x4, x0, #0xa38
  409298:	mov	w3, #0x1d6                 	// #470
  40929c:	mov	x2, x1
  4092a0:	adrp	x0, 40c000 <_fini+0xb30>
  4092a4:	add	x1, x0, #0x808
  4092a8:	mov	w0, #0x0                   	// #0
  4092ac:	bl	4032d0 <log_assert_failed_realm@plt>
  4092b0:	ldr	x0, [sp, #40]
  4092b4:	ldr	x0, [x0]
  4092b8:	str	x0, [sp, #56]
  4092bc:	b	409368 <mount_points_list_umount+0x158>
  4092c0:	ldr	x0, [sp, #56]
  4092c4:	ldrb	w0, [x0, #24]
  4092c8:	cmp	w0, #0x0
  4092cc:	b.eq	40930c <mount_points_list_umount+0xfc>  // b.none
  4092d0:	ldr	w1, [sp, #28]
  4092d4:	ldr	x0, [sp, #56]
  4092d8:	bl	408808 <remount_with_timeout>
  4092dc:	cmp	w0, #0x0
  4092e0:	b.ge	40930c <mount_points_list_umount+0xfc>  // b.tcont
  4092e4:	ldr	x0, [sp, #56]
  4092e8:	ldr	x0, [x0]
  4092ec:	bl	4087ac <nonunmountable_path>
  4092f0:	and	w0, w0, #0xff
  4092f4:	cmp	w0, #0x0
  4092f8:	b.eq	40930c <mount_points_list_umount+0xfc>  // b.none
  4092fc:	ldr	w0, [sp, #52]
  409300:	add	w0, w0, #0x1
  409304:	str	w0, [sp, #52]
  409308:	b	40935c <mount_points_list_umount+0x14c>
  40930c:	ldr	x0, [sp, #56]
  409310:	ldr	x0, [x0]
  409314:	bl	4087ac <nonunmountable_path>
  409318:	and	w0, w0, #0xff
  40931c:	cmp	w0, #0x0
  409320:	b.ne	409358 <mount_points_list_umount+0x148>  // b.any
  409324:	ldr	w1, [sp, #28]
  409328:	ldr	x0, [sp, #56]
  40932c:	bl	408d20 <umount_with_timeout>
  409330:	cmp	w0, #0x0
  409334:	b.ge	409348 <mount_points_list_umount+0x138>  // b.tcont
  409338:	ldr	w0, [sp, #52]
  40933c:	add	w0, w0, #0x1
  409340:	str	w0, [sp, #52]
  409344:	b	40935c <mount_points_list_umount+0x14c>
  409348:	ldr	x0, [sp, #32]
  40934c:	mov	w1, #0x1                   	// #1
  409350:	strb	w1, [x0]
  409354:	b	40935c <mount_points_list_umount+0x14c>
  409358:	nop
  40935c:	ldr	x0, [sp, #56]
  409360:	ldr	x0, [x0, #40]
  409364:	str	x0, [sp, #56]
  409368:	ldr	x0, [sp, #56]
  40936c:	cmp	x0, #0x0
  409370:	b.ne	4092c0 <mount_points_list_umount+0xb0>  // b.any
  409374:	ldr	w0, [sp, #52]
  409378:	ldp	x29, x30, [sp], #64
  40937c:	ret

0000000000409380 <swap_points_list_off>:
  409380:	stp	x29, x30, [sp, #-80]!
  409384:	mov	x29, sp
  409388:	str	x0, [sp, #24]
  40938c:	str	x1, [sp, #16]
  409390:	str	wzr, [sp, #36]
  409394:	ldr	x0, [sp, #24]
  409398:	cmp	x0, #0x0
  40939c:	cset	w0, eq  // eq = none
  4093a0:	and	w0, w0, #0xff
  4093a4:	and	x0, x0, #0xff
  4093a8:	cmp	x0, #0x0
  4093ac:	b.eq	4093d8 <swap_points_list_off+0x58>  // b.none
  4093b0:	adrp	x0, 40c000 <_fini+0xb30>
  4093b4:	add	x1, x0, #0x3b3
  4093b8:	adrp	x0, 40c000 <_fini+0xb30>
  4093bc:	add	x4, x0, #0xa58
  4093c0:	mov	w3, #0x20c                 	// #524
  4093c4:	mov	x2, x1
  4093c8:	adrp	x0, 40c000 <_fini+0xb30>
  4093cc:	add	x1, x0, #0x3d0
  4093d0:	mov	w0, #0x0                   	// #0
  4093d4:	bl	4032d0 <log_assert_failed_realm@plt>
  4093d8:	ldr	x0, [sp, #16]
  4093dc:	cmp	x0, #0x0
  4093e0:	cset	w0, eq  // eq = none
  4093e4:	and	w0, w0, #0xff
  4093e8:	and	x0, x0, #0xff
  4093ec:	cmp	x0, #0x0
  4093f0:	b.eq	40941c <swap_points_list_off+0x9c>  // b.none
  4093f4:	adrp	x0, 40c000 <_fini+0xb30>
  4093f8:	add	x1, x0, #0x3b3
  4093fc:	adrp	x0, 40c000 <_fini+0xb30>
  409400:	add	x4, x0, #0xa58
  409404:	mov	w3, #0x20d                 	// #525
  409408:	mov	x2, x1
  40940c:	adrp	x0, 40c000 <_fini+0xb30>
  409410:	add	x1, x0, #0x808
  409414:	mov	w0, #0x0                   	// #0
  409418:	bl	4032d0 <log_assert_failed_realm@plt>
  40941c:	ldr	x0, [sp, #24]
  409420:	ldr	x0, [x0]
  409424:	str	x0, [sp, #64]
  409428:	b	40954c <swap_points_list_off+0x1cc>
  40942c:	ldr	w0, [sp, #48]
  409430:	lsl	w1, w0, #10
  409434:	ldr	w0, [sp, #40]
  409438:	orr	w7, w1, w0
  40943c:	adrp	x0, 40c000 <_fini+0xb30>
  409440:	add	x1, x0, #0x3b3
  409444:	ldr	x0, [sp, #64]
  409448:	ldr	x0, [x0]
  40944c:	mov	x6, x0
  409450:	adrp	x0, 40c000 <_fini+0xb30>
  409454:	add	x5, x0, #0x810
  409458:	adrp	x0, 40c000 <_fini+0xb30>
  40945c:	add	x4, x0, #0xa70
  409460:	mov	w3, #0x210                 	// #528
  409464:	mov	x2, x1
  409468:	ldr	w1, [sp, #44]
  40946c:	mov	w0, w7
  409470:	bl	4036d0 <log_internal_realm@plt>
  409474:	b	409480 <swap_points_list_off+0x100>
  409478:	ldr	w0, [sp, #44]
  40947c:	cmp	w0, #0x0
  409480:	ldr	x0, [sp, #64]
  409484:	ldr	x0, [x0]
  409488:	bl	4037a0 <swapoff@plt>
  40948c:	cmp	w0, #0x0
  409490:	b.ne	4094b0 <swap_points_list_off+0x130>  // b.any
  409494:	ldr	x0, [sp, #16]
  409498:	mov	w1, #0x1                   	// #1
  40949c:	strb	w1, [x0]
  4094a0:	ldr	x1, [sp, #64]
  4094a4:	ldr	x0, [sp, #24]
  4094a8:	bl	4070c4 <mount_point_free>
  4094ac:	b	409544 <swap_points_list_off+0x1c4>
  4094b0:	mov	w0, #0x4                   	// #4
  4094b4:	str	w0, [sp, #52]
  4094b8:	bl	4034e0 <__errno_location@plt>
  4094bc:	ldr	w0, [x0]
  4094c0:	str	w0, [sp, #56]
  4094c4:	str	wzr, [sp, #60]
  4094c8:	ldr	w0, [sp, #60]
  4094cc:	bl	4039c0 <log_get_max_level_realm@plt>
  4094d0:	mov	w1, w0
  4094d4:	ldr	w0, [sp, #52]
  4094d8:	and	w0, w0, #0x7
  4094dc:	cmp	w1, w0
  4094e0:	b.lt	409530 <swap_points_list_off+0x1b0>  // b.tstop
  4094e4:	ldr	w0, [sp, #60]
  4094e8:	lsl	w1, w0, #10
  4094ec:	ldr	w0, [sp, #52]
  4094f0:	orr	w7, w1, w0
  4094f4:	adrp	x0, 40c000 <_fini+0xb30>
  4094f8:	add	x1, x0, #0x3b3
  4094fc:	ldr	x0, [sp, #64]
  409500:	ldr	x0, [x0]
  409504:	mov	x6, x0
  409508:	adrp	x0, 40c000 <_fini+0xb30>
  40950c:	add	x5, x0, #0x828
  409510:	adrp	x0, 40c000 <_fini+0xb30>
  409514:	add	x4, x0, #0xa70
  409518:	mov	w3, #0x215                 	// #533
  40951c:	mov	x2, x1
  409520:	ldr	w1, [sp, #56]
  409524:	mov	w0, w7
  409528:	bl	4036d0 <log_internal_realm@plt>
  40952c:	b	409538 <swap_points_list_off+0x1b8>
  409530:	ldr	w0, [sp, #56]
  409534:	cmp	w0, #0x0
  409538:	ldr	w0, [sp, #36]
  40953c:	add	w0, w0, #0x1
  409540:	str	w0, [sp, #36]
  409544:	ldr	x0, [sp, #72]
  409548:	str	x0, [sp, #64]
  40954c:	ldr	x0, [sp, #64]
  409550:	cmp	x0, #0x0
  409554:	b.eq	409594 <swap_points_list_off+0x214>  // b.none
  409558:	ldr	x0, [sp, #64]
  40955c:	ldr	x0, [x0, #40]
  409560:	str	x0, [sp, #72]
  409564:	mov	w0, #0x6                   	// #6
  409568:	str	w0, [sp, #40]
  40956c:	str	wzr, [sp, #44]
  409570:	str	wzr, [sp, #48]
  409574:	ldr	w0, [sp, #48]
  409578:	bl	4039c0 <log_get_max_level_realm@plt>
  40957c:	mov	w1, w0
  409580:	ldr	w0, [sp, #40]
  409584:	and	w0, w0, #0x7
  409588:	cmp	w1, w0
  40958c:	b.lt	409478 <swap_points_list_off+0xf8>  // b.tstop
  409590:	b	40942c <swap_points_list_off+0xac>
  409594:	ldr	w0, [sp, #36]
  409598:	ldp	x29, x30, [sp], #80
  40959c:	ret

00000000004095a0 <loopback_points_list_detach>:
  4095a0:	stp	x29, x30, [sp, #-368]!
  4095a4:	mov	x29, sp
  4095a8:	str	x0, [sp, #40]
  4095ac:	str	x1, [sp, #32]
  4095b0:	str	w2, [sp, #28]
  4095b4:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  4095b8:	add	x0, x0, #0x4b8
  4095bc:	ldr	x1, [x0]
  4095c0:	str	x1, [sp, #360]
  4095c4:	mov	x1, #0x0                   	// #0
  4095c8:	str	wzr, [sp, #52]
  4095cc:	ldr	x0, [sp, #40]
  4095d0:	cmp	x0, #0x0
  4095d4:	cset	w0, eq  // eq = none
  4095d8:	and	w0, w0, #0xff
  4095dc:	and	x0, x0, #0xff
  4095e0:	cmp	x0, #0x0
  4095e4:	b.eq	409610 <loopback_points_list_detach+0x70>  // b.none
  4095e8:	adrp	x0, 40c000 <_fini+0xb30>
  4095ec:	add	x1, x0, #0x3b3
  4095f0:	adrp	x0, 40c000 <_fini+0xb30>
  4095f4:	add	x4, x0, #0xa88
  4095f8:	mov	w3, #0x222                 	// #546
  4095fc:	mov	x2, x1
  409600:	adrp	x0, 40c000 <_fini+0xb30>
  409604:	add	x1, x0, #0x3d0
  409608:	mov	w0, #0x0                   	// #0
  40960c:	bl	4032d0 <log_assert_failed_realm@plt>
  409610:	ldr	x0, [sp, #32]
  409614:	cmp	x0, #0x0
  409618:	cset	w0, eq  // eq = none
  40961c:	and	w0, w0, #0xff
  409620:	and	x0, x0, #0xff
  409624:	cmp	x0, #0x0
  409628:	b.eq	409654 <loopback_points_list_detach+0xb4>  // b.none
  40962c:	adrp	x0, 40c000 <_fini+0xb30>
  409630:	add	x1, x0, #0x3b3
  409634:	adrp	x0, 40c000 <_fini+0xb30>
  409638:	add	x4, x0, #0xa88
  40963c:	mov	w3, #0x223                 	// #547
  409640:	mov	x2, x1
  409644:	adrp	x0, 40c000 <_fini+0xb30>
  409648:	add	x1, x0, #0x808
  40964c:	mov	w0, #0x0                   	// #0
  409650:	bl	4032d0 <log_assert_failed_realm@plt>
  409654:	add	x0, sp, #0x68
  409658:	mov	x1, x0
  40965c:	adrp	x0, 40c000 <_fini+0xb30>
  409660:	add	x0, x0, #0x560
  409664:	bl	40b4c0 <lstat64>
  409668:	str	w0, [sp, #56]
  40966c:	ldr	x0, [sp, #40]
  409670:	ldr	x0, [x0]
  409674:	str	x0, [sp, #88]
  409678:	b	409824 <loopback_points_list_detach+0x284>
  40967c:	ldr	x0, [sp, #104]
  409680:	bl	403700 <gnu_dev_major@plt>
  409684:	cmp	w0, #0x0
  409688:	b.eq	4096c4 <loopback_points_list_detach+0x124>  // b.none
  40968c:	ldr	x0, [sp, #88]
  409690:	ldr	x0, [x0]
  409694:	add	x1, sp, #0xe8
  409698:	bl	40b4c0 <lstat64>
  40969c:	cmp	w0, #0x0
  4096a0:	b.lt	4096c4 <loopback_points_list_detach+0x124>  // b.tstop
  4096a4:	ldr	x1, [sp, #104]
  4096a8:	ldr	x0, [sp, #264]
  4096ac:	cmp	x1, x0
  4096b0:	b.ne	4096c4 <loopback_points_list_detach+0x124>  // b.any
  4096b4:	ldr	w0, [sp, #52]
  4096b8:	add	w0, w0, #0x1
  4096bc:	str	w0, [sp, #52]
  4096c0:	b	40981c <loopback_points_list_detach+0x27c>
  4096c4:	mov	w0, #0x6                   	// #6
  4096c8:	str	w0, [sp, #60]
  4096cc:	str	wzr, [sp, #64]
  4096d0:	str	wzr, [sp, #68]
  4096d4:	ldr	w0, [sp, #68]
  4096d8:	bl	4039c0 <log_get_max_level_realm@plt>
  4096dc:	mov	w1, w0
  4096e0:	ldr	w0, [sp, #60]
  4096e4:	and	w0, w0, #0x7
  4096e8:	cmp	w1, w0
  4096ec:	b.lt	40973c <loopback_points_list_detach+0x19c>  // b.tstop
  4096f0:	ldr	w0, [sp, #68]
  4096f4:	lsl	w1, w0, #10
  4096f8:	ldr	w0, [sp, #60]
  4096fc:	orr	w7, w1, w0
  409700:	adrp	x0, 40c000 <_fini+0xb30>
  409704:	add	x1, x0, #0x3b3
  409708:	ldr	x0, [sp, #88]
  40970c:	ldr	x0, [x0]
  409710:	mov	x6, x0
  409714:	adrp	x0, 40c000 <_fini+0xb30>
  409718:	add	x5, x0, #0x850
  40971c:	adrp	x0, 40c000 <_fini+0xb30>
  409720:	add	x4, x0, #0xaa8
  409724:	mov	w3, #0x233                 	// #563
  409728:	mov	x2, x1
  40972c:	ldr	w1, [sp, #64]
  409730:	mov	w0, w7
  409734:	bl	4036d0 <log_internal_realm@plt>
  409738:	b	409744 <loopback_points_list_detach+0x1a4>
  40973c:	ldr	w0, [sp, #64]
  409740:	cmp	w0, #0x0
  409744:	ldr	x0, [sp, #88]
  409748:	ldr	x0, [x0]
  40974c:	bl	408524 <delete_loopback>
  409750:	str	w0, [sp, #72]
  409754:	ldr	w0, [sp, #72]
  409758:	cmp	w0, #0x0
  40975c:	b.lt	409788 <loopback_points_list_detach+0x1e8>  // b.tstop
  409760:	ldr	w0, [sp, #72]
  409764:	cmp	w0, #0x0
  409768:	b.le	409778 <loopback_points_list_detach+0x1d8>
  40976c:	ldr	x0, [sp, #32]
  409770:	mov	w1, #0x1                   	// #1
  409774:	strb	w1, [x0]
  409778:	ldr	x1, [sp, #88]
  40977c:	ldr	x0, [sp, #40]
  409780:	bl	4070c4 <mount_point_free>
  409784:	b	40981c <loopback_points_list_detach+0x27c>
  409788:	ldr	w0, [sp, #28]
  40978c:	str	w0, [sp, #76]
  409790:	bl	4034e0 <__errno_location@plt>
  409794:	ldr	w0, [x0]
  409798:	str	w0, [sp, #80]
  40979c:	str	wzr, [sp, #84]
  4097a0:	ldr	w0, [sp, #84]
  4097a4:	bl	4039c0 <log_get_max_level_realm@plt>
  4097a8:	mov	w1, w0
  4097ac:	ldr	w0, [sp, #76]
  4097b0:	and	w0, w0, #0x7
  4097b4:	cmp	w1, w0
  4097b8:	b.lt	409808 <loopback_points_list_detach+0x268>  // b.tstop
  4097bc:	ldr	w0, [sp, #84]
  4097c0:	lsl	w1, w0, #10
  4097c4:	ldr	w0, [sp, #76]
  4097c8:	orr	w7, w1, w0
  4097cc:	adrp	x0, 40c000 <_fini+0xb30>
  4097d0:	add	x1, x0, #0x3b3
  4097d4:	ldr	x0, [sp, #88]
  4097d8:	ldr	x0, [x0]
  4097dc:	mov	x6, x0
  4097e0:	adrp	x0, 40c000 <_fini+0xb30>
  4097e4:	add	x5, x0, #0x868
  4097e8:	adrp	x0, 40c000 <_fini+0xb30>
  4097ec:	add	x4, x0, #0xaa8
  4097f0:	mov	w3, #0x23b                 	// #571
  4097f4:	mov	x2, x1
  4097f8:	ldr	w1, [sp, #80]
  4097fc:	mov	w0, w7
  409800:	bl	4036d0 <log_internal_realm@plt>
  409804:	b	409810 <loopback_points_list_detach+0x270>
  409808:	ldr	w0, [sp, #80]
  40980c:	cmp	w0, #0x0
  409810:	ldr	w0, [sp, #52]
  409814:	add	w0, w0, #0x1
  409818:	str	w0, [sp, #52]
  40981c:	ldr	x0, [sp, #96]
  409820:	str	x0, [sp, #88]
  409824:	ldr	x0, [sp, #88]
  409828:	cmp	x0, #0x0
  40982c:	b.eq	40984c <loopback_points_list_detach+0x2ac>  // b.none
  409830:	ldr	x0, [sp, #88]
  409834:	ldr	x0, [x0, #40]
  409838:	str	x0, [sp, #96]
  40983c:	ldr	w0, [sp, #56]
  409840:	cmp	w0, #0x0
  409844:	b.lt	4096c4 <loopback_points_list_detach+0x124>  // b.tstop
  409848:	b	40967c <loopback_points_list_detach+0xdc>
  40984c:	ldr	w0, [sp, #52]
  409850:	mov	w1, w0
  409854:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  409858:	add	x0, x0, #0x4b8
  40985c:	ldr	x2, [sp, #360]
  409860:	ldr	x0, [x0]
  409864:	eor	x0, x2, x0
  409868:	cmp	x0, #0x0
  40986c:	b.eq	409874 <loopback_points_list_detach+0x2d4>  // b.none
  409870:	bl	4035a0 <__stack_chk_fail@plt>
  409874:	mov	w0, w1
  409878:	ldp	x29, x30, [sp], #368
  40987c:	ret

0000000000409880 <dm_points_list_detach>:
  409880:	stp	x29, x30, [sp, #-144]!
  409884:	mov	x29, sp
  409888:	stp	x19, x20, [sp, #16]
  40988c:	str	x21, [sp, #32]
  409890:	str	x0, [sp, #72]
  409894:	str	x1, [sp, #64]
  409898:	str	w2, [sp, #60]
  40989c:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  4098a0:	add	x0, x0, #0x4b8
  4098a4:	ldr	x1, [x0]
  4098a8:	str	x1, [sp, #136]
  4098ac:	mov	x1, #0x0                   	// #0
  4098b0:	str	wzr, [sp, #80]
  4098b4:	ldr	x0, [sp, #72]
  4098b8:	cmp	x0, #0x0
  4098bc:	cset	w0, eq  // eq = none
  4098c0:	and	w0, w0, #0xff
  4098c4:	and	x0, x0, #0xff
  4098c8:	cmp	x0, #0x0
  4098cc:	b.eq	4098f8 <dm_points_list_detach+0x78>  // b.none
  4098d0:	adrp	x0, 40c000 <_fini+0xb30>
  4098d4:	add	x1, x0, #0x3b3
  4098d8:	adrp	x0, 40c000 <_fini+0xb30>
  4098dc:	add	x4, x0, #0xac8
  4098e0:	mov	w3, #0x248                 	// #584
  4098e4:	mov	x2, x1
  4098e8:	adrp	x0, 40c000 <_fini+0xb30>
  4098ec:	add	x1, x0, #0x3d0
  4098f0:	mov	w0, #0x0                   	// #0
  4098f4:	bl	4032d0 <log_assert_failed_realm@plt>
  4098f8:	ldr	x0, [sp, #64]
  4098fc:	cmp	x0, #0x0
  409900:	cset	w0, eq  // eq = none
  409904:	and	w0, w0, #0xff
  409908:	and	x0, x0, #0xff
  40990c:	cmp	x0, #0x0
  409910:	b.eq	40993c <dm_points_list_detach+0xbc>  // b.none
  409914:	adrp	x0, 40c000 <_fini+0xb30>
  409918:	add	x1, x0, #0x3b3
  40991c:	adrp	x0, 40c000 <_fini+0xb30>
  409920:	add	x4, x0, #0xac8
  409924:	mov	w3, #0x249                 	// #585
  409928:	mov	x2, x1
  40992c:	adrp	x0, 40c000 <_fini+0xb30>
  409930:	add	x1, x0, #0x808
  409934:	mov	w0, #0x0                   	// #0
  409938:	bl	4032d0 <log_assert_failed_realm@plt>
  40993c:	add	x0, sp, #0x70
  409940:	mov	x1, x0
  409944:	adrp	x0, 40c000 <_fini+0xb30>
  409948:	add	x0, x0, #0x560
  40994c:	bl	403670 <get_block_device@plt>
  409950:	str	w0, [sp, #84]
  409954:	ldr	w0, [sp, #84]
  409958:	cmp	w0, #0x0
  40995c:	b.gt	409964 <dm_points_list_detach+0xe4>
  409960:	str	xzr, [sp, #112]
  409964:	ldr	x0, [sp, #72]
  409968:	ldr	x0, [x0]
  40996c:	str	x0, [sp, #120]
  409970:	b	409b04 <dm_points_list_detach+0x284>
  409974:	ldr	x0, [sp, #120]
  409978:	ldr	x1, [x0, #32]
  40997c:	ldr	x0, [sp, #112]
  409980:	cmp	x1, x0
  409984:	b.ne	409998 <dm_points_list_detach+0x118>  // b.any
  409988:	ldr	w0, [sp, #80]
  40998c:	add	w0, w0, #0x1
  409990:	str	w0, [sp, #80]
  409994:	b	409afc <dm_points_list_detach+0x27c>
  409998:	mov	w0, #0x6                   	// #6
  40999c:	str	w0, [sp, #88]
  4099a0:	str	wzr, [sp, #92]
  4099a4:	str	wzr, [sp, #96]
  4099a8:	ldr	w0, [sp, #96]
  4099ac:	bl	4039c0 <log_get_max_level_realm@plt>
  4099b0:	mov	w1, w0
  4099b4:	ldr	w0, [sp, #88]
  4099b8:	and	w0, w0, #0x7
  4099bc:	cmp	w1, w0
  4099c0:	b.lt	409a28 <dm_points_list_detach+0x1a8>  // b.tstop
  4099c4:	ldr	w0, [sp, #96]
  4099c8:	lsl	w1, w0, #10
  4099cc:	ldr	w0, [sp, #88]
  4099d0:	orr	w19, w1, w0
  4099d4:	adrp	x0, 40c000 <_fini+0xb30>
  4099d8:	add	x20, x0, #0x3b3
  4099dc:	ldr	x0, [sp, #120]
  4099e0:	ldr	x0, [x0, #32]
  4099e4:	bl	403700 <gnu_dev_major@plt>
  4099e8:	mov	w21, w0
  4099ec:	ldr	x0, [sp, #120]
  4099f0:	ldr	x0, [x0, #32]
  4099f4:	bl	4038b0 <gnu_dev_minor@plt>
  4099f8:	mov	w7, w0
  4099fc:	mov	w6, w21
  409a00:	adrp	x0, 40c000 <_fini+0xb30>
  409a04:	add	x5, x0, #0x890
  409a08:	adrp	x0, 40c000 <_fini+0xb30>
  409a0c:	add	x4, x0, #0xae0
  409a10:	mov	w3, #0x256                 	// #598
  409a14:	mov	x2, x20
  409a18:	ldr	w1, [sp, #92]
  409a1c:	mov	w0, w19
  409a20:	bl	4036d0 <log_internal_realm@plt>
  409a24:	b	409a30 <dm_points_list_detach+0x1b0>
  409a28:	ldr	w0, [sp, #92]
  409a2c:	cmp	w0, #0x0
  409a30:	ldr	x0, [sp, #120]
  409a34:	ldr	x0, [x0, #32]
  409a38:	bl	408660 <delete_dm>
  409a3c:	str	w0, [sp, #84]
  409a40:	ldr	w0, [sp, #84]
  409a44:	cmp	w0, #0x0
  409a48:	b.lt	409a68 <dm_points_list_detach+0x1e8>  // b.tstop
  409a4c:	ldr	x0, [sp, #64]
  409a50:	mov	w1, #0x1                   	// #1
  409a54:	strb	w1, [x0]
  409a58:	ldr	x1, [sp, #120]
  409a5c:	ldr	x0, [sp, #72]
  409a60:	bl	4070c4 <mount_point_free>
  409a64:	b	409afc <dm_points_list_detach+0x27c>
  409a68:	ldr	w0, [sp, #60]
  409a6c:	str	w0, [sp, #100]
  409a70:	bl	4034e0 <__errno_location@plt>
  409a74:	ldr	w0, [x0]
  409a78:	str	w0, [sp, #104]
  409a7c:	str	wzr, [sp, #108]
  409a80:	ldr	w0, [sp, #108]
  409a84:	bl	4039c0 <log_get_max_level_realm@plt>
  409a88:	mov	w1, w0
  409a8c:	ldr	w0, [sp, #100]
  409a90:	and	w0, w0, #0x7
  409a94:	cmp	w1, w0
  409a98:	b.lt	409ae8 <dm_points_list_detach+0x268>  // b.tstop
  409a9c:	ldr	w0, [sp, #108]
  409aa0:	lsl	w1, w0, #10
  409aa4:	ldr	w0, [sp, #100]
  409aa8:	orr	w7, w1, w0
  409aac:	adrp	x0, 40c000 <_fini+0xb30>
  409ab0:	add	x1, x0, #0x3b3
  409ab4:	ldr	x0, [sp, #120]
  409ab8:	ldr	x0, [x0]
  409abc:	mov	x6, x0
  409ac0:	adrp	x0, 40c000 <_fini+0xb30>
  409ac4:	add	x5, x0, #0x8a8
  409ac8:	adrp	x0, 40c000 <_fini+0xb30>
  409acc:	add	x4, x0, #0xae0
  409ad0:	mov	w3, #0x25c                 	// #604
  409ad4:	mov	x2, x1
  409ad8:	ldr	w1, [sp, #104]
  409adc:	mov	w0, w7
  409ae0:	bl	4036d0 <log_internal_realm@plt>
  409ae4:	b	409af0 <dm_points_list_detach+0x270>
  409ae8:	ldr	w0, [sp, #104]
  409aec:	cmp	w0, #0x0
  409af0:	ldr	w0, [sp, #80]
  409af4:	add	w0, w0, #0x1
  409af8:	str	w0, [sp, #80]
  409afc:	ldr	x0, [sp, #128]
  409b00:	str	x0, [sp, #120]
  409b04:	ldr	x0, [sp, #120]
  409b08:	cmp	x0, #0x0
  409b0c:	b.eq	409b30 <dm_points_list_detach+0x2b0>  // b.none
  409b10:	ldr	x0, [sp, #120]
  409b14:	ldr	x0, [x0, #40]
  409b18:	str	x0, [sp, #128]
  409b1c:	ldr	x0, [sp, #112]
  409b20:	bl	403700 <gnu_dev_major@plt>
  409b24:	cmp	w0, #0x0
  409b28:	b.eq	409998 <dm_points_list_detach+0x118>  // b.none
  409b2c:	b	409974 <dm_points_list_detach+0xf4>
  409b30:	ldr	w0, [sp, #80]
  409b34:	mov	w1, w0
  409b38:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  409b3c:	add	x0, x0, #0x4b8
  409b40:	ldr	x2, [sp, #136]
  409b44:	ldr	x0, [x0]
  409b48:	eor	x0, x2, x0
  409b4c:	cmp	x0, #0x0
  409b50:	b.eq	409b58 <dm_points_list_detach+0x2d8>  // b.none
  409b54:	bl	4035a0 <__stack_chk_fail@plt>
  409b58:	mov	w0, w1
  409b5c:	ldp	x19, x20, [sp, #16]
  409b60:	ldr	x21, [sp, #32]
  409b64:	ldp	x29, x30, [sp], #144
  409b68:	ret

0000000000409b6c <umount_all_once>:
  409b6c:	stp	x29, x30, [sp, #-80]!
  409b70:	mov	x29, sp
  409b74:	str	x19, [sp, #16]
  409b78:	str	x0, [sp, #40]
  409b7c:	str	w1, [sp, #36]
  409b80:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  409b84:	add	x0, x0, #0x4b8
  409b88:	ldr	x1, [x0]
  409b8c:	str	x1, [sp, #72]
  409b90:	mov	x1, #0x0                   	// #0
  409b94:	ldr	x0, [sp, #40]
  409b98:	cmp	x0, #0x0
  409b9c:	cset	w0, eq  // eq = none
  409ba0:	and	w0, w0, #0xff
  409ba4:	and	x0, x0, #0xff
  409ba8:	cmp	x0, #0x0
  409bac:	b.eq	409bd8 <umount_all_once+0x6c>  // b.none
  409bb0:	adrp	x0, 40c000 <_fini+0xb30>
  409bb4:	add	x1, x0, #0x3b3
  409bb8:	adrp	x0, 40c000 <_fini+0xb30>
  409bbc:	add	x4, x0, #0xaf8
  409bc0:	mov	w3, #0x268                 	// #616
  409bc4:	mov	x2, x1
  409bc8:	adrp	x0, 40c000 <_fini+0xb30>
  409bcc:	add	x1, x0, #0x808
  409bd0:	mov	w0, #0x0                   	// #0
  409bd4:	bl	4032d0 <log_assert_failed_realm@plt>
  409bd8:	str	xzr, [sp, #64]
  409bdc:	add	x0, sp, #0x40
  409be0:	mov	x1, x0
  409be4:	mov	x0, #0x0                   	// #0
  409be8:	bl	407320 <mount_points_list_get>
  409bec:	str	w0, [sp, #60]
  409bf0:	ldr	w0, [sp, #60]
  409bf4:	cmp	w0, #0x0
  409bf8:	b.ge	409c04 <umount_all_once+0x98>  // b.tcont
  409bfc:	ldr	w19, [sp, #60]
  409c00:	b	409c18 <umount_all_once+0xac>
  409c04:	add	x0, sp, #0x40
  409c08:	ldr	w2, [sp, #36]
  409c0c:	ldr	x1, [sp, #40]
  409c10:	bl	409210 <mount_points_list_umount>
  409c14:	mov	w19, w0
  409c18:	add	x0, sp, #0x40
  409c1c:	bl	40729c <mount_points_list_free>
  409c20:	mov	w1, w19
  409c24:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  409c28:	add	x0, x0, #0x4b8
  409c2c:	ldr	x2, [sp, #72]
  409c30:	ldr	x0, [x0]
  409c34:	eor	x0, x2, x0
  409c38:	cmp	x0, #0x0
  409c3c:	b.eq	409c44 <umount_all_once+0xd8>  // b.none
  409c40:	bl	4035a0 <__stack_chk_fail@plt>
  409c44:	mov	w0, w1
  409c48:	ldr	x19, [sp, #16]
  409c4c:	ldp	x29, x30, [sp], #80
  409c50:	ret

0000000000409c54 <umount_all>:
  409c54:	stp	x29, x30, [sp, #-48]!
  409c58:	mov	x29, sp
  409c5c:	str	x0, [sp, #24]
  409c60:	str	w1, [sp, #20]
  409c64:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  409c68:	add	x0, x0, #0x4b8
  409c6c:	ldr	x1, [x0]
  409c70:	str	x1, [sp, #40]
  409c74:	mov	x1, #0x0                   	// #0
  409c78:	ldr	x0, [sp, #24]
  409c7c:	cmp	x0, #0x0
  409c80:	cset	w0, eq  // eq = none
  409c84:	and	w0, w0, #0xff
  409c88:	and	x0, x0, #0xff
  409c8c:	cmp	x0, #0x0
  409c90:	b.eq	409cbc <umount_all+0x68>  // b.none
  409c94:	adrp	x0, 40c000 <_fini+0xb30>
  409c98:	add	x1, x0, #0x3b3
  409c9c:	adrp	x0, 40c000 <_fini+0xb30>
  409ca0:	add	x4, x0, #0xb08
  409ca4:	mov	w3, #0x276                 	// #630
  409ca8:	mov	x2, x1
  409cac:	adrp	x0, 40c000 <_fini+0xb30>
  409cb0:	add	x1, x0, #0x808
  409cb4:	mov	w0, #0x0                   	// #0
  409cb8:	bl	4032d0 <log_assert_failed_realm@plt>
  409cbc:	strb	wzr, [sp, #35]
  409cc0:	add	x0, sp, #0x23
  409cc4:	ldr	w1, [sp, #20]
  409cc8:	bl	409b6c <umount_all_once>
  409ccc:	str	w0, [sp, #36]
  409cd0:	ldrb	w0, [sp, #35]
  409cd4:	cmp	w0, #0x0
  409cd8:	b.eq	409ce8 <umount_all+0x94>  // b.none
  409cdc:	ldr	x0, [sp, #24]
  409ce0:	mov	w1, #0x1                   	// #1
  409ce4:	strb	w1, [x0]
  409ce8:	ldrb	w0, [sp, #35]
  409cec:	cmp	w0, #0x0
  409cf0:	b.ne	409cbc <umount_all+0x68>  // b.any
  409cf4:	ldr	w0, [sp, #36]
  409cf8:	mov	w1, w0
  409cfc:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  409d00:	add	x0, x0, #0x4b8
  409d04:	ldr	x2, [sp, #40]
  409d08:	ldr	x0, [x0]
  409d0c:	eor	x0, x2, x0
  409d10:	cmp	x0, #0x0
  409d14:	b.eq	409d1c <umount_all+0xc8>  // b.none
  409d18:	bl	4035a0 <__stack_chk_fail@plt>
  409d1c:	mov	w0, w1
  409d20:	ldp	x29, x30, [sp], #48
  409d24:	ret

0000000000409d28 <swapoff_all>:
  409d28:	stp	x29, x30, [sp, #-80]!
  409d2c:	mov	x29, sp
  409d30:	str	x19, [sp, #16]
  409d34:	str	x0, [sp, #40]
  409d38:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  409d3c:	add	x0, x0, #0x4b8
  409d40:	ldr	x1, [x0]
  409d44:	str	x1, [sp, #72]
  409d48:	mov	x1, #0x0                   	// #0
  409d4c:	ldr	x0, [sp, #40]
  409d50:	cmp	x0, #0x0
  409d54:	cset	w0, eq  // eq = none
  409d58:	and	w0, w0, #0xff
  409d5c:	and	x0, x0, #0xff
  409d60:	cmp	x0, #0x0
  409d64:	b.eq	409d90 <swapoff_all+0x68>  // b.none
  409d68:	adrp	x0, 40c000 <_fini+0xb30>
  409d6c:	add	x1, x0, #0x3b3
  409d70:	adrp	x0, 40c000 <_fini+0xb30>
  409d74:	add	x4, x0, #0xb18
  409d78:	mov	w3, #0x28a                 	// #650
  409d7c:	mov	x2, x1
  409d80:	adrp	x0, 40c000 <_fini+0xb30>
  409d84:	add	x1, x0, #0x808
  409d88:	mov	w0, #0x0                   	// #0
  409d8c:	bl	4032d0 <log_assert_failed_realm@plt>
  409d90:	str	xzr, [sp, #64]
  409d94:	add	x0, sp, #0x40
  409d98:	mov	x1, x0
  409d9c:	mov	x0, #0x0                   	// #0
  409da0:	bl	407b04 <swap_list_get>
  409da4:	str	w0, [sp, #60]
  409da8:	ldr	w0, [sp, #60]
  409dac:	cmp	w0, #0x0
  409db0:	b.ge	409dbc <swapoff_all+0x94>  // b.tcont
  409db4:	ldr	w19, [sp, #60]
  409db8:	b	409dcc <swapoff_all+0xa4>
  409dbc:	add	x0, sp, #0x40
  409dc0:	ldr	x1, [sp, #40]
  409dc4:	bl	409380 <swap_points_list_off>
  409dc8:	mov	w19, w0
  409dcc:	add	x0, sp, #0x40
  409dd0:	bl	40729c <mount_points_list_free>
  409dd4:	mov	w1, w19
  409dd8:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  409ddc:	add	x0, x0, #0x4b8
  409de0:	ldr	x2, [sp, #72]
  409de4:	ldr	x0, [x0]
  409de8:	eor	x0, x2, x0
  409dec:	cmp	x0, #0x0
  409df0:	b.eq	409df8 <swapoff_all+0xd0>  // b.none
  409df4:	bl	4035a0 <__stack_chk_fail@plt>
  409df8:	mov	w0, w1
  409dfc:	ldr	x19, [sp, #16]
  409e00:	ldp	x29, x30, [sp], #80
  409e04:	ret

0000000000409e08 <loopback_detach_all>:
  409e08:	stp	x29, x30, [sp, #-80]!
  409e0c:	mov	x29, sp
  409e10:	str	x19, [sp, #16]
  409e14:	str	x0, [sp, #40]
  409e18:	str	w1, [sp, #36]
  409e1c:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  409e20:	add	x0, x0, #0x4b8
  409e24:	ldr	x1, [x0]
  409e28:	str	x1, [sp, #72]
  409e2c:	mov	x1, #0x0                   	// #0
  409e30:	ldr	x0, [sp, #40]
  409e34:	cmp	x0, #0x0
  409e38:	cset	w0, eq  // eq = none
  409e3c:	and	w0, w0, #0xff
  409e40:	and	x0, x0, #0xff
  409e44:	cmp	x0, #0x0
  409e48:	b.eq	409e74 <loopback_detach_all+0x6c>  // b.none
  409e4c:	adrp	x0, 40c000 <_fini+0xb30>
  409e50:	add	x1, x0, #0x3b3
  409e54:	adrp	x0, 40c000 <_fini+0xb30>
  409e58:	add	x4, x0, #0xb28
  409e5c:	mov	w3, #0x299                 	// #665
  409e60:	mov	x2, x1
  409e64:	adrp	x0, 40c000 <_fini+0xb30>
  409e68:	add	x1, x0, #0x808
  409e6c:	mov	w0, #0x0                   	// #0
  409e70:	bl	4032d0 <log_assert_failed_realm@plt>
  409e74:	str	xzr, [sp, #64]
  409e78:	add	x0, sp, #0x40
  409e7c:	bl	407f4c <loopback_list_get>
  409e80:	str	w0, [sp, #60]
  409e84:	ldr	w0, [sp, #60]
  409e88:	cmp	w0, #0x0
  409e8c:	b.ge	409e98 <loopback_detach_all+0x90>  // b.tcont
  409e90:	ldr	w19, [sp, #60]
  409e94:	b	409eac <loopback_detach_all+0xa4>
  409e98:	add	x0, sp, #0x40
  409e9c:	ldr	w2, [sp, #36]
  409ea0:	ldr	x1, [sp, #40]
  409ea4:	bl	4095a0 <loopback_points_list_detach>
  409ea8:	mov	w19, w0
  409eac:	add	x0, sp, #0x40
  409eb0:	bl	40729c <mount_points_list_free>
  409eb4:	mov	w1, w19
  409eb8:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  409ebc:	add	x0, x0, #0x4b8
  409ec0:	ldr	x2, [sp, #72]
  409ec4:	ldr	x0, [x0]
  409ec8:	eor	x0, x2, x0
  409ecc:	cmp	x0, #0x0
  409ed0:	b.eq	409ed8 <loopback_detach_all+0xd0>  // b.none
  409ed4:	bl	4035a0 <__stack_chk_fail@plt>
  409ed8:	mov	w0, w1
  409edc:	ldr	x19, [sp, #16]
  409ee0:	ldp	x29, x30, [sp], #80
  409ee4:	ret

0000000000409ee8 <dm_detach_all>:
  409ee8:	stp	x29, x30, [sp, #-80]!
  409eec:	mov	x29, sp
  409ef0:	str	x19, [sp, #16]
  409ef4:	str	x0, [sp, #40]
  409ef8:	str	w1, [sp, #36]
  409efc:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  409f00:	add	x0, x0, #0x4b8
  409f04:	ldr	x1, [x0]
  409f08:	str	x1, [sp, #72]
  409f0c:	mov	x1, #0x0                   	// #0
  409f10:	ldr	x0, [sp, #40]
  409f14:	cmp	x0, #0x0
  409f18:	cset	w0, eq  // eq = none
  409f1c:	and	w0, w0, #0xff
  409f20:	and	x0, x0, #0xff
  409f24:	cmp	x0, #0x0
  409f28:	b.eq	409f54 <dm_detach_all+0x6c>  // b.none
  409f2c:	adrp	x0, 40c000 <_fini+0xb30>
  409f30:	add	x1, x0, #0x3b3
  409f34:	adrp	x0, 40c000 <_fini+0xb30>
  409f38:	add	x4, x0, #0xb40
  409f3c:	mov	w3, #0x2a8                 	// #680
  409f40:	mov	x2, x1
  409f44:	adrp	x0, 40c000 <_fini+0xb30>
  409f48:	add	x1, x0, #0x808
  409f4c:	mov	w0, #0x0                   	// #0
  409f50:	bl	4032d0 <log_assert_failed_realm@plt>
  409f54:	str	xzr, [sp, #64]
  409f58:	add	x0, sp, #0x40
  409f5c:	bl	408240 <dm_list_get>
  409f60:	str	w0, [sp, #60]
  409f64:	ldr	w0, [sp, #60]
  409f68:	cmp	w0, #0x0
  409f6c:	b.ge	409f78 <dm_detach_all+0x90>  // b.tcont
  409f70:	ldr	w19, [sp, #60]
  409f74:	b	409f8c <dm_detach_all+0xa4>
  409f78:	add	x0, sp, #0x40
  409f7c:	ldr	w2, [sp, #36]
  409f80:	ldr	x1, [sp, #40]
  409f84:	bl	409880 <dm_points_list_detach>
  409f88:	mov	w19, w0
  409f8c:	add	x0, sp, #0x40
  409f90:	bl	40729c <mount_points_list_free>
  409f94:	mov	w1, w19
  409f98:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  409f9c:	add	x0, x0, #0x4b8
  409fa0:	ldr	x2, [sp, #72]
  409fa4:	ldr	x0, [x0]
  409fa8:	eor	x0, x2, x0
  409fac:	cmp	x0, #0x0
  409fb0:	b.eq	409fb8 <dm_detach_all+0xd0>  // b.none
  409fb4:	bl	4035a0 <__stack_chk_fail@plt>
  409fb8:	mov	w0, w1
  409fbc:	ldr	x19, [sp, #16]
  409fc0:	ldp	x29, x30, [sp], #80
  409fc4:	ret

0000000000409fc8 <freep>:
  409fc8:	stp	x29, x30, [sp, #-32]!
  409fcc:	mov	x29, sp
  409fd0:	str	x0, [sp, #24]
  409fd4:	ldr	x0, [sp, #24]
  409fd8:	ldr	x0, [x0]
  409fdc:	bl	4038a0 <free@plt>
  409fe0:	nop
  409fe4:	ldp	x29, x30, [sp], #32
  409fe8:	ret

0000000000409fec <size_multiply_overflow>:
  409fec:	sub	sp, sp, #0x10
  409ff0:	str	x0, [sp, #8]
  409ff4:	str	x1, [sp]
  409ff8:	ldr	x0, [sp]
  409ffc:	cmp	x0, #0x0
  40a000:	cset	w0, ne  // ne = any
  40a004:	and	w0, w0, #0xff
  40a008:	and	x0, x0, #0xff
  40a00c:	cmp	x0, #0x0
  40a010:	b.eq	40a054 <size_multiply_overflow+0x68>  // b.none
  40a014:	mov	x2, #0x0                   	// #0
  40a018:	ldr	x1, [sp, #8]
  40a01c:	ldr	x0, [sp]
  40a020:	umulh	x0, x1, x0
  40a024:	cmp	x0, #0x0
  40a028:	b.eq	40a030 <size_multiply_overflow+0x44>  // b.none
  40a02c:	mov	x2, #0x1                   	// #1
  40a030:	mov	x0, x2
  40a034:	cmp	x0, #0x0
  40a038:	cset	w0, ne  // ne = any
  40a03c:	and	w0, w0, #0xff
  40a040:	and	x0, x0, #0xff
  40a044:	cmp	x0, #0x0
  40a048:	b.eq	40a054 <size_multiply_overflow+0x68>  // b.none
  40a04c:	mov	w0, #0x1                   	// #1
  40a050:	b	40a058 <size_multiply_overflow+0x6c>
  40a054:	mov	w0, #0x0                   	// #0
  40a058:	and	w0, w0, #0x1
  40a05c:	and	w0, w0, #0xff
  40a060:	add	sp, sp, #0x10
  40a064:	ret

000000000040a068 <strna>:
  40a068:	sub	sp, sp, #0x10
  40a06c:	str	x0, [sp, #8]
  40a070:	ldr	x0, [sp, #8]
  40a074:	cmp	x0, #0x0
  40a078:	b.ne	40a084 <strna+0x1c>  // b.any
  40a07c:	adrp	x0, 40c000 <_fini+0xb30>
  40a080:	add	x0, x0, #0xb50
  40a084:	add	sp, sp, #0x10
  40a088:	ret

000000000040a08c <isempty>:
  40a08c:	sub	sp, sp, #0x10
  40a090:	str	x0, [sp, #8]
  40a094:	ldr	x0, [sp, #8]
  40a098:	cmp	x0, #0x0
  40a09c:	b.eq	40a0b0 <isempty+0x24>  // b.none
  40a0a0:	ldr	x0, [sp, #8]
  40a0a4:	ldrb	w0, [x0]
  40a0a8:	cmp	w0, #0x0
  40a0ac:	b.ne	40a0b8 <isempty+0x2c>  // b.any
  40a0b0:	mov	w0, #0x1                   	// #1
  40a0b4:	b	40a0bc <isempty+0x30>
  40a0b8:	mov	w0, #0x0                   	// #0
  40a0bc:	and	w0, w0, #0x1
  40a0c0:	and	w0, w0, #0xff
  40a0c4:	add	sp, sp, #0x10
  40a0c8:	ret

000000000040a0cc <usec_add>:
  40a0cc:	sub	sp, sp, #0x20
  40a0d0:	str	x0, [sp, #8]
  40a0d4:	str	x1, [sp]
  40a0d8:	ldr	x1, [sp, #8]
  40a0dc:	ldr	x0, [sp]
  40a0e0:	add	x0, x1, x0
  40a0e4:	str	x0, [sp, #24]
  40a0e8:	ldr	x1, [sp, #24]
  40a0ec:	ldr	x0, [sp, #8]
  40a0f0:	cmp	x1, x0
  40a0f4:	b.cc	40a108 <usec_add+0x3c>  // b.lo, b.ul, b.last
  40a0f8:	ldr	x1, [sp, #24]
  40a0fc:	ldr	x0, [sp]
  40a100:	cmp	x1, x0
  40a104:	b.cs	40a110 <usec_add+0x44>  // b.hs, b.nlast
  40a108:	mov	x0, #0xffffffffffffffff    	// #-1
  40a10c:	b	40a114 <usec_add+0x48>
  40a110:	ldr	x0, [sp, #24]
  40a114:	add	sp, sp, #0x20
  40a118:	ret

000000000040a11c <fclosep>:
  40a11c:	stp	x29, x30, [sp, #-32]!
  40a120:	mov	x29, sp
  40a124:	str	x0, [sp, #24]
  40a128:	ldr	x0, [sp, #24]
  40a12c:	ldr	x0, [x0]
  40a130:	bl	403100 <safe_fclose@plt>
  40a134:	nop
  40a138:	ldp	x29, x30, [sp], #32
  40a13c:	ret

000000000040a140 <closedirp>:
  40a140:	stp	x29, x30, [sp, #-32]!
  40a144:	mov	x29, sp
  40a148:	str	x0, [sp, #24]
  40a14c:	ldr	x0, [sp, #24]
  40a150:	ldr	x0, [x0]
  40a154:	cmp	x0, #0x0
  40a158:	b.eq	40a168 <closedirp+0x28>  // b.none
  40a15c:	ldr	x0, [sp, #24]
  40a160:	ldr	x0, [x0]
  40a164:	bl	4033c0 <closedir@plt>
  40a168:	nop
  40a16c:	ldp	x29, x30, [sp], #32
  40a170:	ret

000000000040a174 <PTR_TO_PID>:
  40a174:	sub	sp, sp, #0x10
  40a178:	str	x0, [sp, #8]
  40a17c:	ldr	x0, [sp, #8]
  40a180:	add	sp, sp, #0x10
  40a184:	ret

000000000040a188 <PID_TO_PTR>:
  40a188:	sub	sp, sp, #0x10
  40a18c:	str	w0, [sp, #12]
  40a190:	ldrsw	x0, [sp, #12]
  40a194:	add	sp, sp, #0x10
  40a198:	ret

000000000040a19c <set_free>:
  40a19c:	stp	x29, x30, [sp, #-32]!
  40a1a0:	mov	x29, sp
  40a1a4:	str	x0, [sp, #24]
  40a1a8:	mov	x2, #0x0                   	// #0
  40a1ac:	mov	x1, #0x0                   	// #0
  40a1b0:	ldr	x0, [sp, #24]
  40a1b4:	bl	403170 <internal_hashmap_free@plt>
  40a1b8:	ldp	x29, x30, [sp], #32
  40a1bc:	ret

000000000040a1c0 <set_remove>:
  40a1c0:	stp	x29, x30, [sp, #-32]!
  40a1c4:	mov	x29, sp
  40a1c8:	str	x0, [sp, #24]
  40a1cc:	str	x1, [sp, #16]
  40a1d0:	ldr	x1, [sp, #16]
  40a1d4:	ldr	x0, [sp, #24]
  40a1d8:	bl	4030f0 <internal_hashmap_remove@plt>
  40a1dc:	ldp	x29, x30, [sp], #32
  40a1e0:	ret

000000000040a1e4 <set_size>:
  40a1e4:	stp	x29, x30, [sp, #-32]!
  40a1e8:	mov	x29, sp
  40a1ec:	str	x0, [sp, #24]
  40a1f0:	ldr	x0, [sp, #24]
  40a1f4:	bl	4036c0 <internal_hashmap_size@plt>
  40a1f8:	ldp	x29, x30, [sp], #32
  40a1fc:	ret

000000000040a200 <set_isempty>:
  40a200:	stp	x29, x30, [sp, #-32]!
  40a204:	mov	x29, sp
  40a208:	str	x0, [sp, #24]
  40a20c:	ldr	x0, [sp, #24]
  40a210:	bl	40a1e4 <set_size>
  40a214:	cmp	w0, #0x0
  40a218:	cset	w0, eq  // eq = none
  40a21c:	and	w0, w0, #0xff
  40a220:	ldp	x29, x30, [sp], #32
  40a224:	ret

000000000040a228 <set_freep>:
  40a228:	stp	x29, x30, [sp, #-32]!
  40a22c:	mov	x29, sp
  40a230:	str	x0, [sp, #24]
  40a234:	ldr	x0, [sp, #24]
  40a238:	ldr	x0, [x0]
  40a23c:	cmp	x0, #0x0
  40a240:	b.eq	40a250 <set_freep+0x28>  // b.none
  40a244:	ldr	x0, [sp, #24]
  40a248:	ldr	x0, [x0]
  40a24c:	bl	40a19c <set_free>
  40a250:	nop
  40a254:	ldp	x29, x30, [sp], #32
  40a258:	ret

000000000040a25c <ignore_proc>:
  40a25c:	stp	x29, x30, [sp, #-128]!
  40a260:	mov	x29, sp
  40a264:	stp	x19, x20, [sp, #16]
  40a268:	str	w0, [x29, #44]
  40a26c:	strb	w1, [x29, #43]
  40a270:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  40a274:	ldr	x0, [x0, #4088]
  40a278:	ldr	x1, [x0]
  40a27c:	str	x1, [x29, #120]
  40a280:	mov	x1, #0x0                   	// #0
  40a284:	str	xzr, [x29, #80]
  40a288:	strb	wzr, [x29, #55]
  40a28c:	ldr	w0, [x29, #44]
  40a290:	cmp	w0, #0x1
  40a294:	b.gt	40a2a0 <ignore_proc+0x44>
  40a298:	mov	w19, #0x1                   	// #1
  40a29c:	b	40a508 <ignore_proc+0x2ac>
  40a2a0:	ldr	w0, [x29, #44]
  40a2a4:	bl	403740 <is_kernel_thread@plt>
  40a2a8:	str	w0, [x29, #60]
  40a2ac:	ldr	w0, [x29, #60]
  40a2b0:	cmp	w0, #0x0
  40a2b4:	b.eq	40a2c0 <ignore_proc+0x64>  // b.none
  40a2b8:	mov	w19, #0x1                   	// #1
  40a2bc:	b	40a508 <ignore_proc+0x2ac>
  40a2c0:	add	x0, x29, #0x38
  40a2c4:	mov	x1, x0
  40a2c8:	ldr	w0, [x29, #44]
  40a2cc:	bl	4035c0 <get_process_uid@plt>
  40a2d0:	str	w0, [x29, #60]
  40a2d4:	ldr	w0, [x29, #60]
  40a2d8:	cmp	w0, #0x0
  40a2dc:	b.ge	40a2e8 <ignore_proc+0x8c>  // b.tcont
  40a2e0:	mov	w19, #0x1                   	// #1
  40a2e4:	b	40a508 <ignore_proc+0x2ac>
  40a2e8:	ldr	w0, [x29, #56]
  40a2ec:	cmp	w0, #0x0
  40a2f0:	b.eq	40a2fc <ignore_proc+0xa0>  // b.none
  40a2f4:	mov	w19, #0x0                   	// #0
  40a2f8:	b	40a508 <ignore_proc+0x2ac>
  40a2fc:	ldr	w0, [x29, #44]
  40a300:	str	w0, [x29, #64]
  40a304:	ldr	w0, [x29, #64]
  40a308:	cmp	w0, #0x0
  40a30c:	b.ne	40a320 <ignore_proc+0xc4>  // b.any
  40a310:	adrp	x0, 40c000 <_fini+0xb30>
  40a314:	add	x0, x0, #0xb58
  40a318:	str	x0, [x29, #96]
  40a31c:	b	40a3ec <ignore_proc+0x190>
  40a320:	mov	x0, #0x1b                  	// #27
  40a324:	str	x0, [x29, #104]
  40a328:	ldr	x1, [x29, #104]
  40a32c:	mov	x0, #0x1                   	// #1
  40a330:	bl	409fec <size_multiply_overflow>
  40a334:	and	w0, w0, #0xff
  40a338:	and	x0, x0, #0xff
  40a33c:	cmp	x0, #0x0
  40a340:	b.eq	40a36c <ignore_proc+0x110>  // b.none
  40a344:	adrp	x0, 40c000 <_fini+0xb30>
  40a348:	add	x1, x0, #0xb73
  40a34c:	adrp	x0, 40c000 <_fini+0xb30>
  40a350:	add	x4, x0, #0xeb8
  40a354:	mov	w3, #0x30                  	// #48
  40a358:	mov	x2, x1
  40a35c:	adrp	x0, 40c000 <_fini+0xb30>
  40a360:	add	x1, x0, #0xb88
  40a364:	mov	w0, #0x0                   	// #0
  40a368:	bl	4032d0 <log_assert_failed_realm@plt>
  40a36c:	ldr	x0, [x29, #104]
  40a370:	cmp	x0, #0x400, lsl #12
  40a374:	cset	w0, hi  // hi = pmore
  40a378:	and	w0, w0, #0xff
  40a37c:	and	x0, x0, #0xff
  40a380:	cmp	x0, #0x0
  40a384:	b.eq	40a3b0 <ignore_proc+0x154>  // b.none
  40a388:	adrp	x0, 40c000 <_fini+0xb30>
  40a38c:	add	x1, x0, #0xb73
  40a390:	adrp	x0, 40c000 <_fini+0xb30>
  40a394:	add	x4, x0, #0xeb8
  40a398:	mov	w3, #0x30                  	// #48
  40a39c:	mov	x2, x1
  40a3a0:	adrp	x0, 40c000 <_fini+0xb30>
  40a3a4:	add	x1, x0, #0xbb8
  40a3a8:	mov	w0, #0x0                   	// #0
  40a3ac:	bl	4032d0 <log_assert_failed_realm@plt>
  40a3b0:	ldr	x0, [x29, #104]
  40a3b4:	add	x0, x0, #0xf
  40a3b8:	lsr	x0, x0, #4
  40a3bc:	lsl	x0, x0, #4
  40a3c0:	sub	sp, sp, x0
  40a3c4:	mov	x0, sp
  40a3c8:	add	x0, x0, #0xf
  40a3cc:	lsr	x0, x0, #4
  40a3d0:	lsl	x0, x0, #4
  40a3d4:	str	x0, [x29, #96]
  40a3d8:	ldr	w2, [x29, #64]
  40a3dc:	adrp	x0, 40c000 <_fini+0xb30>
  40a3e0:	add	x1, x0, #0xbd8
  40a3e4:	ldr	x0, [x29, #96]
  40a3e8:	bl	4038e0 <sprintf@plt>
  40a3ec:	ldr	x0, [x29, #96]
  40a3f0:	str	x0, [x29, #112]
  40a3f4:	adrp	x0, 40c000 <_fini+0xb30>
  40a3f8:	add	x1, x0, #0xbf0
  40a3fc:	ldr	x0, [x29, #112]
  40a400:	bl	403940 <fopen64@plt>
  40a404:	str	x0, [x29, #80]
  40a408:	ldr	x0, [x29, #80]
  40a40c:	cmp	x0, #0x0
  40a410:	b.ne	40a41c <ignore_proc+0x1c0>  // b.any
  40a414:	mov	w19, #0x1                   	// #1
  40a418:	b	40a508 <ignore_proc+0x2ac>
  40a41c:	ldr	x1, [x29, #80]
  40a420:	add	x0, x29, #0x37
  40a424:	mov	x3, x1
  40a428:	mov	x2, #0x1                   	// #1
  40a42c:	mov	x1, #0x1                   	// #1
  40a430:	bl	4032a0 <fread@plt>
  40a434:	ldrb	w0, [x29, #55]
  40a438:	cmp	w0, #0x40
  40a43c:	b.eq	40a448 <ignore_proc+0x1ec>  // b.none
  40a440:	mov	w19, #0x0                   	// #0
  40a444:	b	40a508 <ignore_proc+0x2ac>
  40a448:	ldrb	w0, [x29, #43]
  40a44c:	cmp	w0, #0x0
  40a450:	b.eq	40a504 <ignore_proc+0x2a8>  // b.none
  40a454:	ldr	w0, [x29, #44]
  40a458:	bl	403140 <pid_from_same_root_fs@plt>
  40a45c:	cmp	w0, #0x0
  40a460:	b.ne	40a504 <ignore_proc+0x2a8>  // b.any
  40a464:	str	xzr, [x29, #88]
  40a468:	add	x0, x29, #0x58
  40a46c:	mov	x1, x0
  40a470:	ldr	w0, [x29, #44]
  40a474:	bl	4034c0 <get_process_comm@plt>
  40a478:	mov	w0, #0x5                   	// #5
  40a47c:	str	w0, [x29, #68]
  40a480:	str	wzr, [x29, #72]
  40a484:	str	wzr, [x29, #76]
  40a488:	ldr	w0, [x29, #76]
  40a48c:	bl	4039c0 <log_get_max_level_realm@plt>
  40a490:	mov	w1, w0
  40a494:	ldr	w0, [x29, #68]
  40a498:	and	w0, w0, #0x7
  40a49c:	cmp	w1, w0
  40a4a0:	b.lt	40a4f4 <ignore_proc+0x298>  // b.tstop
  40a4a4:	ldr	w0, [x29, #76]
  40a4a8:	lsl	w1, w0, #10
  40a4ac:	ldr	w0, [x29, #68]
  40a4b0:	orr	w19, w1, w0
  40a4b4:	adrp	x0, 40c000 <_fini+0xb30>
  40a4b8:	add	x20, x0, #0xb73
  40a4bc:	ldr	x0, [x29, #88]
  40a4c0:	bl	40a068 <strna>
  40a4c4:	mov	x7, x0
  40a4c8:	ldr	w6, [x29, #44]
  40a4cc:	adrp	x0, 40c000 <_fini+0xb30>
  40a4d0:	add	x5, x0, #0xbf8
  40a4d4:	adrp	x0, 40c000 <_fini+0xb30>
  40a4d8:	add	x4, x0, #0xec8
  40a4dc:	mov	w3, #0x47                  	// #71
  40a4e0:	mov	x2, x20
  40a4e4:	ldr	w1, [x29, #72]
  40a4e8:	mov	w0, w19
  40a4ec:	bl	4036d0 <log_internal_realm@plt>
  40a4f0:	b	40a4fc <ignore_proc+0x2a0>
  40a4f4:	ldr	w0, [x29, #72]
  40a4f8:	cmp	w0, #0x0
  40a4fc:	add	x0, x29, #0x58
  40a500:	bl	409fc8 <freep>
  40a504:	mov	w19, #0x1                   	// #1
  40a508:	add	x0, x29, #0x50
  40a50c:	bl	40a11c <fclosep>
  40a510:	mov	w1, w19
  40a514:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  40a518:	ldr	x0, [x0, #4088]
  40a51c:	ldr	x2, [x29, #120]
  40a520:	ldr	x0, [x0]
  40a524:	eor	x0, x2, x0
  40a528:	cmp	x0, #0x0
  40a52c:	b.eq	40a534 <ignore_proc+0x2d8>  // b.none
  40a530:	bl	4035a0 <__stack_chk_fail@plt>
  40a534:	mov	w0, w1
  40a538:	mov	sp, x29
  40a53c:	ldp	x19, x20, [sp, #16]
  40a540:	ldp	x29, x30, [sp], #128
  40a544:	ret

000000000040a548 <log_children_no_yet_killed>:
  40a548:	stp	x29, x30, [sp, #-112]!
  40a54c:	mov	x29, sp
  40a550:	str	x19, [sp, #16]
  40a554:	str	x0, [sp, #40]
  40a558:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  40a55c:	ldr	x0, [x0, #4088]
  40a560:	ldr	x1, [x0]
  40a564:	str	x1, [sp, #104]
  40a568:	mov	x1, #0x0                   	// #0
  40a56c:	str	xzr, [sp, #64]
  40a570:	mov	w0, #0xfffffffe            	// #-2
  40a574:	str	w0, [sp, #88]
  40a578:	str	xzr, [sp, #96]
  40a57c:	b	40a638 <log_children_no_yet_killed+0xf0>
  40a580:	str	xzr, [sp, #80]
  40a584:	ldr	x0, [sp, #72]
  40a588:	bl	40a174 <PTR_TO_PID>
  40a58c:	mov	w2, w0
  40a590:	add	x0, sp, #0x50
  40a594:	mov	x1, x0
  40a598:	mov	w0, w2
  40a59c:	bl	4034c0 <get_process_comm@plt>
  40a5a0:	cmp	w0, #0x0
  40a5a4:	b.ge	40a5c8 <log_children_no_yet_killed+0x80>  // b.tcont
  40a5a8:	ldr	x0, [sp, #72]
  40a5ac:	bl	40a174 <PTR_TO_PID>
  40a5b0:	add	x3, sp, #0x50
  40a5b4:	mov	w2, w0
  40a5b8:	adrp	x0, 40c000 <_fini+0xb30>
  40a5bc:	add	x1, x0, #0xce8
  40a5c0:	mov	x0, x3
  40a5c4:	bl	403850 <asprintf@plt>
  40a5c8:	ldr	x0, [sp, #80]
  40a5cc:	add	x5, sp, #0x40
  40a5d0:	mov	x4, #0x0                   	// #0
  40a5d4:	mov	x3, x0
  40a5d8:	adrp	x0, 40c000 <_fini+0xb30>
  40a5dc:	add	x2, x0, #0xcf0
  40a5e0:	mov	x1, #0x0                   	// #0
  40a5e4:	mov	x0, x5
  40a5e8:	bl	403570 <strextend_with_separator@plt>
  40a5ec:	cmp	x0, #0x0
  40a5f0:	b.ne	40a618 <log_children_no_yet_killed+0xd0>  // b.any
  40a5f4:	adrp	x0, 40c000 <_fini+0xb30>
  40a5f8:	add	x1, x0, #0xb73
  40a5fc:	adrp	x0, 40c000 <_fini+0xb30>
  40a600:	add	x3, x0, #0xed8
  40a604:	mov	w2, #0x5c                  	// #92
  40a608:	mov	w0, #0x0                   	// #0
  40a60c:	bl	403970 <log_oom_internal@plt>
  40a610:	mov	w19, #0x0                   	// #0
  40a614:	b	40a61c <log_children_no_yet_killed+0xd4>
  40a618:	mov	w19, #0x1                   	// #1
  40a61c:	add	x0, sp, #0x50
  40a620:	bl	409fc8 <freep>
  40a624:	cmp	w19, #0x1
  40a628:	b.ne	40a630 <log_children_no_yet_killed+0xe8>  // b.any
  40a62c:	b	40a638 <log_children_no_yet_killed+0xf0>
  40a630:	mov	w19, #0x0                   	// #0
  40a634:	b	40a6fc <log_children_no_yet_killed+0x1b4>
  40a638:	add	x1, sp, #0x48
  40a63c:	add	x0, sp, #0x58
  40a640:	mov	x2, x1
  40a644:	mov	x1, x0
  40a648:	ldr	x0, [sp, #40]
  40a64c:	bl	403430 <set_iterate@plt>
  40a650:	and	w0, w0, #0xff
  40a654:	cmp	w0, #0x0
  40a658:	b.ne	40a580 <log_children_no_yet_killed+0x38>  // b.any
  40a65c:	ldr	x0, [sp, #64]
  40a660:	bl	40a08c <isempty>
  40a664:	and	w0, w0, #0xff
  40a668:	cmp	w0, #0x0
  40a66c:	b.eq	40a678 <log_children_no_yet_killed+0x130>  // b.none
  40a670:	mov	w19, #0x0                   	// #0
  40a674:	b	40a6fc <log_children_no_yet_killed+0x1b4>
  40a678:	mov	w0, #0x4                   	// #4
  40a67c:	str	w0, [sp, #52]
  40a680:	str	wzr, [sp, #56]
  40a684:	str	wzr, [sp, #60]
  40a688:	ldr	w0, [sp, #60]
  40a68c:	bl	4039c0 <log_get_max_level_realm@plt>
  40a690:	mov	w1, w0
  40a694:	ldr	w0, [sp, #52]
  40a698:	and	w0, w0, #0x7
  40a69c:	cmp	w1, w0
  40a6a0:	b.lt	40a6f0 <log_children_no_yet_killed+0x1a8>  // b.tstop
  40a6a4:	ldr	w0, [sp, #60]
  40a6a8:	lsl	w1, w0, #10
  40a6ac:	ldr	w0, [sp, #52]
  40a6b0:	orr	w7, w1, w0
  40a6b4:	adrp	x0, 40c000 <_fini+0xb30>
  40a6b8:	add	x1, x0, #0xb73
  40a6bc:	ldr	x0, [sp, #64]
  40a6c0:	add	x0, x0, #0x2
  40a6c4:	mov	x6, x0
  40a6c8:	adrp	x0, 40c000 <_fini+0xb30>
  40a6cc:	add	x5, x0, #0xcf8
  40a6d0:	adrp	x0, 40c000 <_fini+0xb30>
  40a6d4:	add	x4, x0, #0xed8
  40a6d8:	mov	w3, #0x64                  	// #100
  40a6dc:	mov	x2, x1
  40a6e0:	ldr	w1, [sp, #56]
  40a6e4:	mov	w0, w7
  40a6e8:	bl	4036d0 <log_internal_realm@plt>
  40a6ec:	b	40a6f8 <log_children_no_yet_killed+0x1b0>
  40a6f0:	ldr	w0, [sp, #56]
  40a6f4:	cmp	w0, #0x0
  40a6f8:	mov	w19, #0x1                   	// #1
  40a6fc:	add	x0, sp, #0x40
  40a700:	bl	409fc8 <freep>
  40a704:	cmp	w19, #0x1
  40a708:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  40a70c:	ldr	x0, [x0, #4088]
  40a710:	ldr	x1, [sp, #104]
  40a714:	ldr	x0, [x0]
  40a718:	eor	x0, x1, x0
  40a71c:	cmp	x0, #0x0
  40a720:	b.eq	40a728 <log_children_no_yet_killed+0x1e0>  // b.none
  40a724:	bl	4035a0 <__stack_chk_fail@plt>
  40a728:	ldr	x19, [sp, #16]
  40a72c:	ldp	x29, x30, [sp], #112
  40a730:	ret

000000000040a734 <wait_for_children>:
  40a734:	stp	x29, x30, [sp, #-192]!
  40a738:	mov	x29, sp
  40a73c:	str	x0, [sp, #40]
  40a740:	str	x1, [sp, #32]
  40a744:	str	x2, [sp, #24]
  40a748:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  40a74c:	ldr	x0, [x0, #4088]
  40a750:	ldr	x1, [x0]
  40a754:	str	x1, [sp, #184]
  40a758:	mov	x1, #0x0                   	// #0
  40a75c:	ldr	x0, [sp, #32]
  40a760:	cmp	x0, #0x0
  40a764:	cset	w0, eq  // eq = none
  40a768:	and	w0, w0, #0xff
  40a76c:	and	x0, x0, #0xff
  40a770:	cmp	x0, #0x0
  40a774:	b.eq	40a7a0 <wait_for_children+0x6c>  // b.none
  40a778:	adrp	x0, 40c000 <_fini+0xb30>
  40a77c:	add	x1, x0, #0xb73
  40a780:	adrp	x0, 40c000 <_fini+0xb30>
  40a784:	add	x4, x0, #0xef8
  40a788:	mov	w3, #0x6a                  	// #106
  40a78c:	mov	x2, x1
  40a790:	adrp	x0, 40c000 <_fini+0xb30>
  40a794:	add	x1, x0, #0xd10
  40a798:	mov	w0, #0x0                   	// #0
  40a79c:	bl	4032d0 <log_assert_failed_realm@plt>
  40a7a0:	ldr	x0, [sp, #40]
  40a7a4:	bl	40a200 <set_isempty>
  40a7a8:	and	w0, w0, #0xff
  40a7ac:	cmp	w0, #0x0
  40a7b0:	b.eq	40a7bc <wait_for_children+0x88>  // b.none
  40a7b4:	mov	w0, #0x0                   	// #0
  40a7b8:	b	40ab90 <wait_for_children+0x45c>
  40a7bc:	mov	w0, #0x1                   	// #1
  40a7c0:	bl	403720 <now@plt>
  40a7c4:	str	x0, [sp, #120]
  40a7c8:	ldr	x1, [sp, #24]
  40a7cc:	ldr	x0, [sp, #120]
  40a7d0:	bl	40a0cc <usec_add>
  40a7d4:	str	x0, [sp, #128]
  40a7d8:	mov	x1, #0x9680                	// #38528
  40a7dc:	movk	x1, #0x98, lsl #16
  40a7e0:	ldr	x0, [sp, #120]
  40a7e4:	bl	40a0cc <usec_add>
  40a7e8:	str	x0, [sp, #112]
  40a7ec:	ldr	x1, [sp, #112]
  40a7f0:	ldr	x0, [sp, #128]
  40a7f4:	cmp	x1, x0
  40a7f8:	b.ls	40a814 <wait_for_children+0xe0>  // b.plast
  40a7fc:	ldr	x0, [sp, #24]
  40a800:	lsr	x0, x0, #1
  40a804:	mov	x1, x0
  40a808:	ldr	x0, [sp, #120]
  40a80c:	bl	40a0cc <usec_add>
  40a810:	str	x0, [sp, #112]
  40a814:	mov	w2, #0x1                   	// #1
  40a818:	mov	x1, #0x0                   	// #0
  40a81c:	mov	w0, #0xffffffff            	// #-1
  40a820:	bl	4036e0 <waitpid@plt>
  40a824:	str	w0, [sp, #60]
  40a828:	ldr	w0, [sp, #60]
  40a82c:	cmp	w0, #0x0
  40a830:	b.eq	40a8f4 <wait_for_children+0x1c0>  // b.none
  40a834:	ldr	w0, [sp, #60]
  40a838:	cmp	w0, #0x0
  40a83c:	b.ge	40a8dc <wait_for_children+0x1a8>  // b.tcont
  40a840:	bl	4034e0 <__errno_location@plt>
  40a844:	ldr	w0, [x0]
  40a848:	cmp	w0, #0xa
  40a84c:	b.eq	40a8fc <wait_for_children+0x1c8>  // b.none
  40a850:	mov	w0, #0x3                   	// #3
  40a854:	str	w0, [sp, #64]
  40a858:	bl	4034e0 <__errno_location@plt>
  40a85c:	ldr	w0, [x0]
  40a860:	str	w0, [sp, #68]
  40a864:	str	wzr, [sp, #72]
  40a868:	ldr	w0, [sp, #72]
  40a86c:	bl	4039c0 <log_get_max_level_realm@plt>
  40a870:	mov	w1, w0
  40a874:	ldr	w0, [sp, #64]
  40a878:	and	w0, w0, #0x7
  40a87c:	cmp	w1, w0
  40a880:	b.lt	40a8c4 <wait_for_children+0x190>  // b.tstop
  40a884:	ldr	w0, [sp, #72]
  40a888:	lsl	w1, w0, #10
  40a88c:	ldr	w0, [sp, #64]
  40a890:	orr	w6, w1, w0
  40a894:	adrp	x0, 40c000 <_fini+0xb30>
  40a898:	add	x1, x0, #0xb73
  40a89c:	adrp	x0, 40c000 <_fini+0xb30>
  40a8a0:	add	x5, x0, #0xd18
  40a8a4:	adrp	x0, 40c000 <_fini+0xb30>
  40a8a8:	add	x4, x0, #0xf10
  40a8ac:	mov	w3, #0x8c                  	// #140
  40a8b0:	mov	x2, x1
  40a8b4:	ldr	w1, [sp, #68]
  40a8b8:	mov	w0, w6
  40a8bc:	bl	4036d0 <log_internal_realm@plt>
  40a8c0:	b	40ab90 <wait_for_children+0x45c>
  40a8c4:	ldr	w0, [sp, #68]
  40a8c8:	cmp	w0, #0x0
  40a8cc:	cneg	w0, w0, lt  // lt = tstop
  40a8d0:	and	w0, w0, #0xff
  40a8d4:	neg	w0, w0
  40a8d8:	b	40ab90 <wait_for_children+0x45c>
  40a8dc:	ldr	w0, [sp, #60]
  40a8e0:	bl	40a188 <PID_TO_PTR>
  40a8e4:	mov	x1, x0
  40a8e8:	ldr	x0, [sp, #40]
  40a8ec:	bl	40a1c0 <set_remove>
  40a8f0:	b	40a814 <wait_for_children+0xe0>
  40a8f4:	nop
  40a8f8:	b	40a900 <wait_for_children+0x1cc>
  40a8fc:	nop
  40a900:	mov	w0, #0xfffffffe            	// #-2
  40a904:	str	w0, [sp, #168]
  40a908:	str	xzr, [sp, #176]
  40a90c:	b	40a950 <wait_for_children+0x21c>
  40a910:	ldr	x0, [sp, #104]
  40a914:	bl	40a174 <PTR_TO_PID>
  40a918:	mov	w1, #0x0                   	// #0
  40a91c:	bl	403110 <kill@plt>
  40a920:	cmp	w0, #0x0
  40a924:	b.ne	40a92c <wait_for_children+0x1f8>  // b.any
  40a928:	b	40a950 <wait_for_children+0x21c>
  40a92c:	bl	4034e0 <__errno_location@plt>
  40a930:	ldr	w0, [x0]
  40a934:	cmp	w0, #0x3
  40a938:	b.eq	40a940 <wait_for_children+0x20c>  // b.none
  40a93c:	b	40a950 <wait_for_children+0x21c>
  40a940:	ldr	x0, [sp, #104]
  40a944:	mov	x1, x0
  40a948:	ldr	x0, [sp, #40]
  40a94c:	bl	40a1c0 <set_remove>
  40a950:	add	x1, sp, #0x68
  40a954:	add	x0, sp, #0xa8
  40a958:	mov	x2, x1
  40a95c:	mov	x1, x0
  40a960:	ldr	x0, [sp, #40]
  40a964:	bl	403430 <set_iterate@plt>
  40a968:	and	w0, w0, #0xff
  40a96c:	cmp	w0, #0x0
  40a970:	b.ne	40a910 <wait_for_children+0x1dc>  // b.any
  40a974:	ldr	x0, [sp, #40]
  40a978:	bl	40a200 <set_isempty>
  40a97c:	and	w0, w0, #0xff
  40a980:	cmp	w0, #0x0
  40a984:	b.eq	40a990 <wait_for_children+0x25c>  // b.none
  40a988:	mov	w0, #0x0                   	// #0
  40a98c:	b	40ab90 <wait_for_children+0x45c>
  40a990:	mov	w0, #0x1                   	// #1
  40a994:	bl	403720 <now@plt>
  40a998:	str	x0, [sp, #120]
  40a99c:	ldr	x0, [sp, #112]
  40a9a0:	cmp	x0, #0x0
  40a9a4:	b.eq	40a9c4 <wait_for_children+0x290>  // b.none
  40a9a8:	ldr	x1, [sp, #120]
  40a9ac:	ldr	x0, [sp, #112]
  40a9b0:	cmp	x1, x0
  40a9b4:	b.cc	40a9c4 <wait_for_children+0x290>  // b.lo, b.ul, b.last
  40a9b8:	ldr	x0, [sp, #40]
  40a9bc:	bl	40a548 <log_children_no_yet_killed>
  40a9c0:	str	xzr, [sp, #112]
  40a9c4:	ldr	x1, [sp, #120]
  40a9c8:	ldr	x0, [sp, #128]
  40a9cc:	cmp	x1, x0
  40a9d0:	b.cc	40a9e0 <wait_for_children+0x2ac>  // b.lo, b.ul, b.last
  40a9d4:	ldr	x0, [sp, #40]
  40a9d8:	bl	40a1e4 <set_size>
  40a9dc:	b	40ab90 <wait_for_children+0x45c>
  40a9e0:	ldr	x0, [sp, #112]
  40a9e4:	cmp	x0, #0x0
  40a9e8:	b.eq	40aa2c <wait_for_children+0x2f8>  // b.none
  40a9ec:	ldr	x1, [sp, #128]
  40a9f0:	ldr	x0, [sp, #120]
  40a9f4:	sub	x0, x1, x0
  40a9f8:	str	x0, [sp, #136]
  40a9fc:	ldr	x1, [sp, #112]
  40aa00:	ldr	x0, [sp, #120]
  40aa04:	sub	x0, x1, x0
  40aa08:	str	x0, [sp, #144]
  40aa0c:	ldr	x0, [sp, #136]
  40aa10:	ldr	x2, [sp, #144]
  40aa14:	ldr	x1, [sp, #144]
  40aa18:	cmp	x2, x0
  40aa1c:	csel	x1, x1, x0, ls  // ls = plast
  40aa20:	add	x0, sp, #0x98
  40aa24:	bl	403280 <timespec_store@plt>
  40aa28:	b	40aa40 <wait_for_children+0x30c>
  40aa2c:	ldr	x1, [sp, #128]
  40aa30:	ldr	x0, [sp, #120]
  40aa34:	sub	x1, x1, x0
  40aa38:	add	x0, sp, #0x98
  40aa3c:	bl	403280 <timespec_store@plt>
  40aa40:	add	x0, sp, #0x98
  40aa44:	mov	x2, x0
  40aa48:	mov	x1, #0x0                   	// #0
  40aa4c:	ldr	x0, [sp, #32]
  40aa50:	bl	403290 <sigtimedwait@plt>
  40aa54:	str	w0, [sp, #76]
  40aa58:	ldr	w0, [sp, #76]
  40aa5c:	cmp	w0, #0x11
  40aa60:	b.eq	40a814 <wait_for_children+0xe0>  // b.none
  40aa64:	ldr	w0, [sp, #76]
  40aa68:	cmp	w0, #0x0
  40aa6c:	b.ge	40ab0c <wait_for_children+0x3d8>  // b.tcont
  40aa70:	bl	4034e0 <__errno_location@plt>
  40aa74:	ldr	w0, [x0]
  40aa78:	cmp	w0, #0xb
  40aa7c:	b.eq	40ab0c <wait_for_children+0x3d8>  // b.none
  40aa80:	mov	w0, #0x3                   	// #3
  40aa84:	str	w0, [sp, #80]
  40aa88:	bl	4034e0 <__errno_location@plt>
  40aa8c:	ldr	w0, [x0]
  40aa90:	str	w0, [sp, #84]
  40aa94:	str	wzr, [sp, #88]
  40aa98:	ldr	w0, [sp, #88]
  40aa9c:	bl	4039c0 <log_get_max_level_realm@plt>
  40aaa0:	mov	w1, w0
  40aaa4:	ldr	w0, [sp, #80]
  40aaa8:	and	w0, w0, #0x7
  40aaac:	cmp	w1, w0
  40aab0:	b.lt	40aaf4 <wait_for_children+0x3c0>  // b.tstop
  40aab4:	ldr	w0, [sp, #88]
  40aab8:	lsl	w1, w0, #10
  40aabc:	ldr	w0, [sp, #80]
  40aac0:	orr	w6, w1, w0
  40aac4:	adrp	x0, 40c000 <_fini+0xb30>
  40aac8:	add	x1, x0, #0xb73
  40aacc:	adrp	x0, 40c000 <_fini+0xb30>
  40aad0:	add	x5, x0, #0xd30
  40aad4:	adrp	x0, 40c000 <_fini+0xb30>
  40aad8:	add	x4, x0, #0xf10
  40aadc:	mov	w3, #0xb7                  	// #183
  40aae0:	mov	x2, x1
  40aae4:	ldr	w1, [sp, #84]
  40aae8:	mov	w0, w6
  40aaec:	bl	4036d0 <log_internal_realm@plt>
  40aaf0:	b	40ab90 <wait_for_children+0x45c>
  40aaf4:	ldr	w0, [sp, #84]
  40aaf8:	cmp	w0, #0x0
  40aafc:	cneg	w0, w0, lt  // lt = tstop
  40ab00:	and	w0, w0, #0xff
  40ab04:	neg	w0, w0
  40ab08:	b	40ab90 <wait_for_children+0x45c>
  40ab0c:	ldr	w0, [sp, #76]
  40ab10:	cmp	w0, #0x0
  40ab14:	b.lt	40a814 <wait_for_children+0xe0>  // b.tstop
  40ab18:	mov	w0, #0x4                   	// #4
  40ab1c:	str	w0, [sp, #92]
  40ab20:	str	wzr, [sp, #96]
  40ab24:	str	wzr, [sp, #100]
  40ab28:	ldr	w0, [sp, #100]
  40ab2c:	bl	4039c0 <log_get_max_level_realm@plt>
  40ab30:	mov	w1, w0
  40ab34:	ldr	w0, [sp, #92]
  40ab38:	and	w0, w0, #0x7
  40ab3c:	cmp	w1, w0
  40ab40:	b.lt	40ab84 <wait_for_children+0x450>  // b.tstop
  40ab44:	ldr	w0, [sp, #100]
  40ab48:	lsl	w1, w0, #10
  40ab4c:	ldr	w0, [sp, #92]
  40ab50:	orr	w6, w1, w0
  40ab54:	adrp	x0, 40c000 <_fini+0xb30>
  40ab58:	add	x1, x0, #0xb73
  40ab5c:	adrp	x0, 40c000 <_fini+0xb30>
  40ab60:	add	x5, x0, #0xd50
  40ab64:	adrp	x0, 40c000 <_fini+0xb30>
  40ab68:	add	x4, x0, #0xf10
  40ab6c:	mov	w3, #0xba                  	// #186
  40ab70:	mov	x2, x1
  40ab74:	ldr	w1, [sp, #96]
  40ab78:	mov	w0, w6
  40ab7c:	bl	4036d0 <log_internal_realm@plt>
  40ab80:	b	40a814 <wait_for_children+0xe0>
  40ab84:	ldr	w0, [sp, #96]
  40ab88:	cmp	w0, #0x0
  40ab8c:	b	40a814 <wait_for_children+0xe0>
  40ab90:	mov	w1, w0
  40ab94:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  40ab98:	ldr	x0, [x0, #4088]
  40ab9c:	ldr	x2, [sp, #184]
  40aba0:	ldr	x0, [x0]
  40aba4:	eor	x0, x2, x0
  40aba8:	cmp	x0, #0x0
  40abac:	b.eq	40abb4 <wait_for_children+0x480>  // b.none
  40abb0:	bl	4035a0 <__stack_chk_fail@plt>
  40abb4:	mov	w0, w1
  40abb8:	ldp	x29, x30, [sp], #192
  40abbc:	ret

000000000040abc0 <killall>:
  40abc0:	stp	x29, x30, [sp, #-160]!
  40abc4:	mov	x29, sp
  40abc8:	stp	x19, x20, [sp, #16]
  40abcc:	str	x21, [sp, #32]
  40abd0:	str	w0, [sp, #60]
  40abd4:	str	x1, [sp, #48]
  40abd8:	strb	w2, [sp, #59]
  40abdc:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  40abe0:	ldr	x0, [x0, #4088]
  40abe4:	ldr	x1, [x0]
  40abe8:	str	x1, [sp, #152]
  40abec:	mov	x1, #0x0                   	// #0
  40abf0:	str	xzr, [sp, #128]
  40abf4:	str	wzr, [sp, #84]
  40abf8:	adrp	x0, 40c000 <_fini+0xb30>
  40abfc:	add	x0, x0, #0xd80
  40ac00:	bl	4037b0 <opendir@plt>
  40ac04:	str	x0, [sp, #128]
  40ac08:	ldr	x0, [sp, #128]
  40ac0c:	cmp	x0, #0x0
  40ac10:	b.ne	40aca4 <killall+0xe4>  // b.any
  40ac14:	mov	w0, #0x4                   	// #4
  40ac18:	str	w0, [sp, #116]
  40ac1c:	bl	4034e0 <__errno_location@plt>
  40ac20:	ldr	w0, [x0]
  40ac24:	str	w0, [sp, #120]
  40ac28:	str	wzr, [sp, #124]
  40ac2c:	ldr	w0, [sp, #124]
  40ac30:	bl	4039c0 <log_get_max_level_realm@plt>
  40ac34:	mov	w1, w0
  40ac38:	ldr	w0, [sp, #116]
  40ac3c:	and	w0, w0, #0x7
  40ac40:	cmp	w1, w0
  40ac44:	b.lt	40ac8c <killall+0xcc>  // b.tstop
  40ac48:	ldr	w0, [sp, #124]
  40ac4c:	lsl	w1, w0, #10
  40ac50:	ldr	w0, [sp, #116]
  40ac54:	orr	w6, w1, w0
  40ac58:	adrp	x0, 40c000 <_fini+0xb30>
  40ac5c:	add	x1, x0, #0xb73
  40ac60:	adrp	x0, 40c000 <_fini+0xb30>
  40ac64:	add	x5, x0, #0xd88
  40ac68:	adrp	x0, 40c000 <_fini+0xb30>
  40ac6c:	add	x4, x0, #0xf28
  40ac70:	mov	w3, #0xc9                  	// #201
  40ac74:	mov	x2, x1
  40ac78:	ldr	w1, [sp, #120]
  40ac7c:	mov	w0, w6
  40ac80:	bl	4036d0 <log_internal_realm@plt>
  40ac84:	mov	w19, w0
  40ac88:	b	40af90 <killall+0x3d0>
  40ac8c:	ldr	w0, [sp, #120]
  40ac90:	cmp	w0, #0x0
  40ac94:	cneg	w0, w0, lt  // lt = tstop
  40ac98:	and	w0, w0, #0xff
  40ac9c:	neg	w19, w0
  40aca0:	b	40af90 <killall+0x3d0>
  40aca4:	bl	4034e0 <__errno_location@plt>
  40aca8:	str	wzr, [x0]
  40acac:	ldr	x0, [sp, #128]
  40acb0:	bl	4032e0 <readdir64@plt>
  40acb4:	str	x0, [sp, #144]
  40acb8:	ldr	x0, [sp, #144]
  40acbc:	cmp	x0, #0x0
  40acc0:	b.ne	40acdc <killall+0x11c>  // b.any
  40acc4:	bl	4034e0 <__errno_location@plt>
  40acc8:	ldr	w0, [x0]
  40accc:	cmp	w0, #0x0
  40acd0:	nop
  40acd4:	ldr	w19, [sp, #84]
  40acd8:	b	40af90 <killall+0x3d0>
  40acdc:	strb	wzr, [sp, #79]
  40ace0:	ldr	x0, [sp, #144]
  40ace4:	ldrb	w0, [x0, #18]
  40ace8:	cmp	w0, #0x0
  40acec:	b.eq	40acf8 <killall+0x138>  // b.none
  40acf0:	cmp	w0, #0x4
  40acf4:	b.ne	40ad00 <killall+0x140>  // b.any
  40acf8:	mov	w0, #0x1                   	// #1
  40acfc:	strb	w0, [sp, #79]
  40ad00:	nop
  40ad04:	ldrb	w0, [sp, #79]
  40ad08:	eor	w0, w0, #0x1
  40ad0c:	and	w0, w0, #0xff
  40ad10:	cmp	w0, #0x0
  40ad14:	b.ne	40af64 <killall+0x3a4>  // b.any
  40ad18:	ldr	x0, [sp, #144]
  40ad1c:	add	x0, x0, #0x13
  40ad20:	add	x1, sp, #0x50
  40ad24:	bl	403490 <parse_pid@plt>
  40ad28:	cmp	w0, #0x0
  40ad2c:	b.lt	40af6c <killall+0x3ac>  // b.tstop
  40ad30:	ldr	w19, [sp, #80]
  40ad34:	ldr	w0, [sp, #60]
  40ad38:	cmp	w0, #0x9
  40ad3c:	b.ne	40ad60 <killall+0x1a0>  // b.any
  40ad40:	bl	403380 <in_initrd@plt>
  40ad44:	and	w0, w0, #0xff
  40ad48:	eor	w0, w0, #0x1
  40ad4c:	and	w0, w0, #0xff
  40ad50:	cmp	w0, #0x0
  40ad54:	b.eq	40ad60 <killall+0x1a0>  // b.none
  40ad58:	mov	w0, #0x1                   	// #1
  40ad5c:	b	40ad64 <killall+0x1a4>
  40ad60:	mov	w0, #0x0                   	// #0
  40ad64:	and	w0, w0, #0x1
  40ad68:	and	w0, w0, #0xff
  40ad6c:	mov	w1, w0
  40ad70:	mov	w0, w19
  40ad74:	bl	40a25c <ignore_proc>
  40ad78:	and	w0, w0, #0xff
  40ad7c:	cmp	w0, #0x0
  40ad80:	b.ne	40af74 <killall+0x3b4>  // b.any
  40ad84:	ldr	w0, [sp, #60]
  40ad88:	cmp	w0, #0x9
  40ad8c:	b.ne	40ae30 <killall+0x270>  // b.any
  40ad90:	str	xzr, [sp, #136]
  40ad94:	ldr	w0, [sp, #80]
  40ad98:	add	x1, sp, #0x88
  40ad9c:	bl	4034c0 <get_process_comm@plt>
  40ada0:	mov	w0, #0x5                   	// #5
  40ada4:	str	w0, [sp, #88]
  40ada8:	str	wzr, [sp, #92]
  40adac:	str	wzr, [sp, #96]
  40adb0:	ldr	w0, [sp, #96]
  40adb4:	bl	4039c0 <log_get_max_level_realm@plt>
  40adb8:	mov	w1, w0
  40adbc:	ldr	w0, [sp, #88]
  40adc0:	and	w0, w0, #0x7
  40adc4:	cmp	w1, w0
  40adc8:	b.lt	40ae20 <killall+0x260>  // b.tstop
  40adcc:	ldr	w0, [sp, #96]
  40add0:	lsl	w1, w0, #10
  40add4:	ldr	w0, [sp, #88]
  40add8:	orr	w19, w1, w0
  40addc:	adrp	x0, 40c000 <_fini+0xb30>
  40ade0:	add	x20, x0, #0xb73
  40ade4:	ldr	w21, [sp, #80]
  40ade8:	ldr	x0, [sp, #136]
  40adec:	bl	40a068 <strna>
  40adf0:	mov	x7, x0
  40adf4:	mov	w6, w21
  40adf8:	adrp	x0, 40c000 <_fini+0xb30>
  40adfc:	add	x5, x0, #0xda8
  40ae00:	adrp	x0, 40c000 <_fini+0xb30>
  40ae04:	add	x4, x0, #0xf28
  40ae08:	mov	w3, #0xdc                  	// #220
  40ae0c:	mov	x2, x20
  40ae10:	ldr	w1, [sp, #92]
  40ae14:	mov	w0, w19
  40ae18:	bl	4036d0 <log_internal_realm@plt>
  40ae1c:	b	40ae28 <killall+0x268>
  40ae20:	ldr	w0, [sp, #92]
  40ae24:	cmp	w0, #0x0
  40ae28:	add	x0, sp, #0x88
  40ae2c:	bl	409fc8 <freep>
  40ae30:	ldr	w0, [sp, #80]
  40ae34:	ldr	w1, [sp, #60]
  40ae38:	bl	403110 <kill@plt>
  40ae3c:	cmp	w0, #0x0
  40ae40:	b.lt	40aea0 <killall+0x2e0>  // b.tstop
  40ae44:	ldr	w0, [sp, #84]
  40ae48:	add	w0, w0, #0x1
  40ae4c:	str	w0, [sp, #84]
  40ae50:	ldr	x0, [sp, #48]
  40ae54:	cmp	x0, #0x0
  40ae58:	b.eq	40af34 <killall+0x374>  // b.none
  40ae5c:	ldr	w0, [sp, #80]
  40ae60:	bl	40a188 <PID_TO_PTR>
  40ae64:	mov	x1, x0
  40ae68:	ldr	x0, [sp, #48]
  40ae6c:	bl	403920 <set_put@plt>
  40ae70:	str	w0, [sp, #112]
  40ae74:	ldr	w0, [sp, #112]
  40ae78:	cmp	w0, #0x0
  40ae7c:	b.ge	40af34 <killall+0x374>  // b.tcont
  40ae80:	adrp	x0, 40c000 <_fini+0xb30>
  40ae84:	add	x1, x0, #0xb73
  40ae88:	adrp	x0, 40c000 <_fini+0xb30>
  40ae8c:	add	x3, x0, #0xf28
  40ae90:	mov	w2, #0xe4                  	// #228
  40ae94:	mov	w0, #0x0                   	// #0
  40ae98:	bl	403970 <log_oom_internal@plt>
  40ae9c:	b	40af34 <killall+0x374>
  40aea0:	bl	4034e0 <__errno_location@plt>
  40aea4:	ldr	w0, [x0]
  40aea8:	cmp	w0, #0x2
  40aeac:	b.eq	40af34 <killall+0x374>  // b.none
  40aeb0:	mov	w0, #0x4                   	// #4
  40aeb4:	str	w0, [sp, #100]
  40aeb8:	bl	4034e0 <__errno_location@plt>
  40aebc:	ldr	w0, [x0]
  40aec0:	str	w0, [sp, #104]
  40aec4:	str	wzr, [sp, #108]
  40aec8:	ldr	w0, [sp, #108]
  40aecc:	bl	4039c0 <log_get_max_level_realm@plt>
  40aed0:	mov	w1, w0
  40aed4:	ldr	w0, [sp, #100]
  40aed8:	and	w0, w0, #0x7
  40aedc:	cmp	w1, w0
  40aee0:	b.lt	40af2c <killall+0x36c>  // b.tstop
  40aee4:	ldr	w0, [sp, #108]
  40aee8:	lsl	w1, w0, #10
  40aeec:	ldr	w0, [sp, #100]
  40aef0:	orr	w7, w1, w0
  40aef4:	adrp	x0, 40c000 <_fini+0xb30>
  40aef8:	add	x1, x0, #0xb73
  40aefc:	ldr	w0, [sp, #80]
  40af00:	mov	w6, w0
  40af04:	adrp	x0, 40c000 <_fini+0xb30>
  40af08:	add	x5, x0, #0xdc8
  40af0c:	adrp	x0, 40c000 <_fini+0xb30>
  40af10:	add	x4, x0, #0xf28
  40af14:	mov	w3, #0xe7                  	// #231
  40af18:	mov	x2, x1
  40af1c:	ldr	w1, [sp, #104]
  40af20:	mov	w0, w7
  40af24:	bl	4036d0 <log_internal_realm@plt>
  40af28:	b	40af34 <killall+0x374>
  40af2c:	ldr	w0, [sp, #104]
  40af30:	cmp	w0, #0x0
  40af34:	ldrb	w0, [sp, #59]
  40af38:	cmp	w0, #0x0
  40af3c:	b.eq	40af78 <killall+0x3b8>  // b.none
  40af40:	ldr	w0, [sp, #80]
  40af44:	mov	x1, #0x0                   	// #0
  40af48:	bl	4032b0 <get_ctty_devnr@plt>
  40af4c:	cmp	w0, #0x0
  40af50:	b.lt	40af78 <killall+0x3b8>  // b.tstop
  40af54:	ldr	w0, [sp, #80]
  40af58:	mov	w1, #0x1                   	// #1
  40af5c:	bl	403110 <kill@plt>
  40af60:	b	40af78 <killall+0x3b8>
  40af64:	nop
  40af68:	b	40af78 <killall+0x3b8>
  40af6c:	nop
  40af70:	b	40af78 <killall+0x3b8>
  40af74:	nop
  40af78:	bl	4034e0 <__errno_location@plt>
  40af7c:	str	wzr, [x0]
  40af80:	ldr	x0, [sp, #128]
  40af84:	bl	4032e0 <readdir64@plt>
  40af88:	str	x0, [sp, #144]
  40af8c:	b	40acb8 <killall+0xf8>
  40af90:	add	x0, sp, #0x80
  40af94:	bl	40a140 <closedirp>
  40af98:	mov	w1, w19
  40af9c:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  40afa0:	ldr	x0, [x0, #4088]
  40afa4:	ldr	x2, [sp, #152]
  40afa8:	ldr	x0, [x0]
  40afac:	eor	x0, x2, x0
  40afb0:	cmp	x0, #0x0
  40afb4:	b.eq	40afbc <killall+0x3fc>  // b.none
  40afb8:	bl	4035a0 <__stack_chk_fail@plt>
  40afbc:	mov	w0, w1
  40afc0:	ldp	x19, x20, [sp, #16]
  40afc4:	ldr	x21, [sp, #32]
  40afc8:	ldp	x29, x30, [sp], #160
  40afcc:	ret

000000000040afd0 <broadcast_signal>:
  40afd0:	stp	x29, x30, [sp, #-352]!
  40afd4:	mov	x29, sp
  40afd8:	str	x19, [sp, #16]
  40afdc:	str	w0, [sp, #44]
  40afe0:	strb	w1, [sp, #43]
  40afe4:	strb	w2, [sp, #42]
  40afe8:	str	x3, [sp, #32]
  40afec:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  40aff0:	ldr	x0, [x0, #4088]
  40aff4:	ldr	x1, [x0]
  40aff8:	str	x1, [sp, #344]
  40affc:	mov	x1, #0x0                   	// #0
  40b000:	str	xzr, [sp, #80]
  40b004:	ldrb	w0, [sp, #43]
  40b008:	cmp	w0, #0x0
  40b00c:	b.eq	40b01c <broadcast_signal+0x4c>  // b.none
  40b010:	mov	x0, #0x0                   	// #0
  40b014:	bl	403530 <internal_set_new@plt>
  40b018:	str	x0, [sp, #80]
  40b01c:	add	x0, sp, #0x58
  40b020:	bl	4036a0 <sigemptyset@plt>
  40b024:	cmp	w0, #0x0
  40b028:	cset	w0, ne  // ne = any
  40b02c:	and	w0, w0, #0xff
  40b030:	and	x0, x0, #0xff
  40b034:	cmp	x0, #0x0
  40b038:	b.eq	40b064 <broadcast_signal+0x94>  // b.none
  40b03c:	adrp	x0, 40c000 <_fini+0xb30>
  40b040:	add	x1, x0, #0xb73
  40b044:	adrp	x0, 40c000 <_fini+0xb30>
  40b048:	add	x4, x0, #0xf30
  40b04c:	mov	w3, #0x10b                 	// #267
  40b050:	mov	x2, x1
  40b054:	adrp	x0, 40c000 <_fini+0xb30>
  40b058:	add	x1, x0, #0xde0
  40b05c:	mov	w0, #0x0                   	// #0
  40b060:	bl	4032d0 <log_assert_failed_realm@plt>
  40b064:	add	x0, sp, #0x58
  40b068:	mov	w1, #0x11                  	// #17
  40b06c:	bl	403310 <sigaddset@plt>
  40b070:	cmp	w0, #0x0
  40b074:	cset	w0, ne  // ne = any
  40b078:	and	w0, w0, #0xff
  40b07c:	and	x0, x0, #0xff
  40b080:	cmp	x0, #0x0
  40b084:	b.eq	40b0b0 <broadcast_signal+0xe0>  // b.none
  40b088:	adrp	x0, 40c000 <_fini+0xb30>
  40b08c:	add	x1, x0, #0xb73
  40b090:	adrp	x0, 40c000 <_fini+0xb30>
  40b094:	add	x4, x0, #0xf30
  40b098:	mov	w3, #0x10c                 	// #268
  40b09c:	mov	x2, x1
  40b0a0:	adrp	x0, 40c000 <_fini+0xb30>
  40b0a4:	add	x1, x0, #0xdf8
  40b0a8:	mov	w0, #0x0                   	// #0
  40b0ac:	bl	4032d0 <log_assert_failed_realm@plt>
  40b0b0:	add	x1, sp, #0xd8
  40b0b4:	add	x0, sp, #0x58
  40b0b8:	mov	x2, x1
  40b0bc:	mov	x1, x0
  40b0c0:	mov	w0, #0x0                   	// #0
  40b0c4:	bl	403510 <sigprocmask@plt>
  40b0c8:	cmp	w0, #0x0
  40b0cc:	cset	w0, ne  // ne = any
  40b0d0:	and	w0, w0, #0xff
  40b0d4:	and	x0, x0, #0xff
  40b0d8:	cmp	x0, #0x0
  40b0dc:	b.eq	40b108 <broadcast_signal+0x138>  // b.none
  40b0e0:	adrp	x0, 40c000 <_fini+0xb30>
  40b0e4:	add	x1, x0, #0xb73
  40b0e8:	adrp	x0, 40c000 <_fini+0xb30>
  40b0ec:	add	x4, x0, #0xf30
  40b0f0:	mov	w3, #0x10d                 	// #269
  40b0f4:	mov	x2, x1
  40b0f8:	adrp	x0, 40c000 <_fini+0xb30>
  40b0fc:	add	x1, x0, #0xe18
  40b100:	mov	w0, #0x0                   	// #0
  40b104:	bl	4032d0 <log_assert_failed_realm@plt>
  40b108:	mov	w1, #0x13                  	// #19
  40b10c:	mov	w0, #0xffffffff            	// #-1
  40b110:	bl	403110 <kill@plt>
  40b114:	cmp	w0, #0x0
  40b118:	b.ge	40b1a8 <broadcast_signal+0x1d8>  // b.tcont
  40b11c:	bl	4034e0 <__errno_location@plt>
  40b120:	ldr	w0, [x0]
  40b124:	cmp	w0, #0x3
  40b128:	b.eq	40b1a8 <broadcast_signal+0x1d8>  // b.none
  40b12c:	mov	w0, #0x4                   	// #4
  40b130:	str	w0, [sp, #56]
  40b134:	bl	4034e0 <__errno_location@plt>
  40b138:	ldr	w0, [x0]
  40b13c:	str	w0, [sp, #60]
  40b140:	str	wzr, [sp, #64]
  40b144:	ldr	w0, [sp, #64]
  40b148:	bl	4039c0 <log_get_max_level_realm@plt>
  40b14c:	mov	w1, w0
  40b150:	ldr	w0, [sp, #56]
  40b154:	and	w0, w0, #0x7
  40b158:	cmp	w1, w0
  40b15c:	b.lt	40b1a0 <broadcast_signal+0x1d0>  // b.tstop
  40b160:	ldr	w0, [sp, #64]
  40b164:	lsl	w1, w0, #10
  40b168:	ldr	w0, [sp, #56]
  40b16c:	orr	w6, w1, w0
  40b170:	adrp	x0, 40c000 <_fini+0xb30>
  40b174:	add	x1, x0, #0xb73
  40b178:	adrp	x0, 40c000 <_fini+0xb30>
  40b17c:	add	x5, x0, #0xe48
  40b180:	adrp	x0, 40c000 <_fini+0xb30>
  40b184:	add	x4, x0, #0xf48
  40b188:	mov	w3, #0x110                 	// #272
  40b18c:	mov	x2, x1
  40b190:	ldr	w1, [sp, #60]
  40b194:	mov	w0, w6
  40b198:	bl	4036d0 <log_internal_realm@plt>
  40b19c:	b	40b1a8 <broadcast_signal+0x1d8>
  40b1a0:	ldr	w0, [sp, #60]
  40b1a4:	cmp	w0, #0x0
  40b1a8:	ldr	x0, [sp, #80]
  40b1ac:	ldrb	w2, [sp, #42]
  40b1b0:	mov	x1, x0
  40b1b4:	ldr	w0, [sp, #44]
  40b1b8:	bl	40abc0 <killall>
  40b1bc:	str	w0, [sp, #52]
  40b1c0:	mov	w1, #0x12                  	// #18
  40b1c4:	mov	w0, #0xffffffff            	// #-1
  40b1c8:	bl	403110 <kill@plt>
  40b1cc:	cmp	w0, #0x0
  40b1d0:	b.ge	40b260 <broadcast_signal+0x290>  // b.tcont
  40b1d4:	bl	4034e0 <__errno_location@plt>
  40b1d8:	ldr	w0, [x0]
  40b1dc:	cmp	w0, #0x3
  40b1e0:	b.eq	40b260 <broadcast_signal+0x290>  // b.none
  40b1e4:	mov	w0, #0x4                   	// #4
  40b1e8:	str	w0, [sp, #68]
  40b1ec:	bl	4034e0 <__errno_location@plt>
  40b1f0:	ldr	w0, [x0]
  40b1f4:	str	w0, [sp, #72]
  40b1f8:	str	wzr, [sp, #76]
  40b1fc:	ldr	w0, [sp, #76]
  40b200:	bl	4039c0 <log_get_max_level_realm@plt>
  40b204:	mov	w1, w0
  40b208:	ldr	w0, [sp, #68]
  40b20c:	and	w0, w0, #0x7
  40b210:	cmp	w1, w0
  40b214:	b.lt	40b258 <broadcast_signal+0x288>  // b.tstop
  40b218:	ldr	w0, [sp, #76]
  40b21c:	lsl	w1, w0, #10
  40b220:	ldr	w0, [sp, #68]
  40b224:	orr	w6, w1, w0
  40b228:	adrp	x0, 40c000 <_fini+0xb30>
  40b22c:	add	x1, x0, #0xb73
  40b230:	adrp	x0, 40c000 <_fini+0xb30>
  40b234:	add	x5, x0, #0xe68
  40b238:	adrp	x0, 40c000 <_fini+0xb30>
  40b23c:	add	x4, x0, #0xf48
  40b240:	mov	w3, #0x115                 	// #277
  40b244:	mov	x2, x1
  40b248:	ldr	w1, [sp, #72]
  40b24c:	mov	w0, w6
  40b250:	bl	4036d0 <log_internal_realm@plt>
  40b254:	b	40b260 <broadcast_signal+0x290>
  40b258:	ldr	w0, [sp, #72]
  40b25c:	cmp	w0, #0x0
  40b260:	ldrb	w0, [sp, #43]
  40b264:	cmp	w0, #0x0
  40b268:	b.eq	40b28c <broadcast_signal+0x2bc>  // b.none
  40b26c:	ldr	w0, [sp, #52]
  40b270:	cmp	w0, #0x0
  40b274:	b.le	40b28c <broadcast_signal+0x2bc>
  40b278:	ldr	x0, [sp, #80]
  40b27c:	add	x1, sp, #0x58
  40b280:	ldr	x2, [sp, #32]
  40b284:	bl	40a734 <wait_for_children>
  40b288:	str	w0, [sp, #52]
  40b28c:	add	x0, sp, #0xd8
  40b290:	mov	x2, #0x0                   	// #0
  40b294:	mov	x1, x0
  40b298:	mov	w0, #0x2                   	// #2
  40b29c:	bl	403510 <sigprocmask@plt>
  40b2a0:	cmp	w0, #0x0
  40b2a4:	cset	w0, ne  // ne = any
  40b2a8:	and	w0, w0, #0xff
  40b2ac:	and	x0, x0, #0xff
  40b2b0:	cmp	x0, #0x0
  40b2b4:	b.eq	40b2e0 <broadcast_signal+0x310>  // b.none
  40b2b8:	adrp	x0, 40c000 <_fini+0xb30>
  40b2bc:	add	x1, x0, #0xb73
  40b2c0:	adrp	x0, 40c000 <_fini+0xb30>
  40b2c4:	add	x4, x0, #0xf30
  40b2c8:	mov	w3, #0x11a                 	// #282
  40b2cc:	mov	x2, x1
  40b2d0:	adrp	x0, 40c000 <_fini+0xb30>
  40b2d4:	add	x1, x0, #0xe88
  40b2d8:	mov	w0, #0x0                   	// #0
  40b2dc:	bl	4032d0 <log_assert_failed_realm@plt>
  40b2e0:	ldr	w19, [sp, #52]
  40b2e4:	add	x0, sp, #0x50
  40b2e8:	bl	40a228 <set_freep>
  40b2ec:	mov	w1, w19
  40b2f0:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  40b2f4:	ldr	x0, [x0, #4088]
  40b2f8:	ldr	x2, [sp, #344]
  40b2fc:	ldr	x0, [x0]
  40b300:	eor	x0, x2, x0
  40b304:	cmp	x0, #0x0
  40b308:	b.eq	40b310 <broadcast_signal+0x340>  // b.none
  40b30c:	bl	4035a0 <__stack_chk_fail@plt>
  40b310:	mov	w0, w1
  40b314:	ldr	x19, [sp, #16]
  40b318:	ldp	x29, x30, [sp], #352
  40b31c:	ret

000000000040b320 <mount_point_is_api>:
  40b320:	stp	x29, x30, [sp, #-48]!
  40b324:	mov	x29, sp
  40b328:	str	x0, [sp, #24]
  40b32c:	str	wzr, [sp, #44]
  40b330:	b	40b384 <mount_point_is_api+0x64>
  40b334:	adrp	x0, 41e000 <__FRAME_END__+0xfd84>
  40b338:	add	x2, x0, #0x4c0
  40b33c:	ldr	w1, [sp, #44]
  40b340:	mov	x0, x1
  40b344:	lsl	x0, x0, #3
  40b348:	sub	x0, x0, x1
  40b34c:	lsl	x0, x0, #3
  40b350:	add	x0, x2, x0
  40b354:	ldr	x0, [x0, #8]
  40b358:	mov	x1, x0
  40b35c:	ldr	x0, [sp, #24]
  40b360:	bl	403230 <path_equal@plt>
  40b364:	and	w0, w0, #0xff
  40b368:	cmp	w0, #0x0
  40b36c:	b.eq	40b378 <mount_point_is_api+0x58>  // b.none
  40b370:	mov	w0, #0x1                   	// #1
  40b374:	b	40b3ac <mount_point_is_api+0x8c>
  40b378:	ldr	w0, [sp, #44]
  40b37c:	add	w0, w0, #0x1
  40b380:	str	w0, [sp, #44]
  40b384:	ldr	w0, [sp, #44]
  40b388:	cmp	w0, #0x13
  40b38c:	b.ls	40b334 <mount_point_is_api+0x14>  // b.plast
  40b390:	adrp	x0, 40d000 <__func__.9120+0xb8>
  40b394:	add	x1, x0, #0x188
  40b398:	ldr	x0, [sp, #24]
  40b39c:	bl	4034a0 <path_startswith@plt>
  40b3a0:	cmp	x0, #0x0
  40b3a4:	cset	w0, ne  // ne = any
  40b3a8:	and	w0, w0, #0xff
  40b3ac:	ldp	x29, x30, [sp], #48
  40b3b0:	ret

000000000040b3b4 <mount_point_ignore>:
  40b3b4:	stp	x29, x30, [sp, #-48]!
  40b3b8:	mov	x29, sp
  40b3bc:	str	x0, [sp, #24]
  40b3c0:	adrp	x0, 40d000 <__func__.9120+0xb8>
  40b3c4:	add	x0, x0, #0x698
  40b3c8:	str	x0, [sp, #40]
  40b3cc:	b	40b40c <mount_point_ignore+0x58>
  40b3d0:	ldr	x1, [sp, #40]
  40b3d4:	ldr	x0, [sp, #24]
  40b3d8:	bl	403230 <path_equal@plt>
  40b3dc:	and	w0, w0, #0xff
  40b3e0:	cmp	w0, #0x0
  40b3e4:	b.eq	40b3f0 <mount_point_ignore+0x3c>  // b.none
  40b3e8:	mov	w0, #0x1                   	// #1
  40b3ec:	b	40b42c <mount_point_ignore+0x78>
  40b3f0:	ldr	x0, [sp, #40]
  40b3f4:	bl	403930 <strlen@plt>
  40b3f8:	mov	x1, x0
  40b3fc:	ldr	x0, [sp, #40]
  40b400:	add	x0, x0, x1
  40b404:	add	x0, x0, #0x1
  40b408:	str	x0, [sp, #40]
  40b40c:	ldr	x0, [sp, #40]
  40b410:	cmp	x0, #0x0
  40b414:	b.eq	40b428 <mount_point_ignore+0x74>  // b.none
  40b418:	ldr	x0, [sp, #40]
  40b41c:	ldrb	w0, [x0]
  40b420:	cmp	w0, #0x0
  40b424:	b.ne	40b3d0 <mount_point_ignore+0x1c>  // b.any
  40b428:	mov	w0, #0x0                   	// #0
  40b42c:	ldp	x29, x30, [sp], #48
  40b430:	ret
  40b434:	nop

000000000040b438 <__libc_csu_init>:
  40b438:	stp	x29, x30, [sp, #-64]!
  40b43c:	mov	x29, sp
  40b440:	stp	x19, x20, [sp, #16]
  40b444:	adrp	x20, 41e000 <__FRAME_END__+0xfd84>
  40b448:	add	x20, x20, #0x4b0
  40b44c:	stp	x21, x22, [sp, #32]
  40b450:	adrp	x21, 41e000 <__FRAME_END__+0xfd84>
  40b454:	add	x21, x21, #0x4a8
  40b458:	sub	x20, x20, x21
  40b45c:	mov	w22, w0
  40b460:	stp	x23, x24, [sp, #48]
  40b464:	mov	x23, x1
  40b468:	mov	x24, x2
  40b46c:	bl	4030b8 <_init>
  40b470:	cmp	xzr, x20, asr #3
  40b474:	b.eq	40b4a0 <__libc_csu_init+0x68>  // b.none
  40b478:	asr	x20, x20, #3
  40b47c:	mov	x19, #0x0                   	// #0
  40b480:	ldr	x3, [x21, x19, lsl #3]
  40b484:	mov	x2, x24
  40b488:	add	x19, x19, #0x1
  40b48c:	mov	x1, x23
  40b490:	mov	w0, w22
  40b494:	blr	x3
  40b498:	cmp	x20, x19
  40b49c:	b.ne	40b480 <__libc_csu_init+0x48>  // b.any
  40b4a0:	ldp	x19, x20, [sp, #16]
  40b4a4:	ldp	x21, x22, [sp, #32]
  40b4a8:	ldp	x23, x24, [sp, #48]
  40b4ac:	ldp	x29, x30, [sp], #64
  40b4b0:	ret
  40b4b4:	nop

000000000040b4b8 <__libc_csu_fini>:
  40b4b8:	ret
  40b4bc:	nop

000000000040b4c0 <lstat64>:
  40b4c0:	mov	x2, x1
  40b4c4:	mov	x1, x0
  40b4c8:	mov	w0, #0x0                   	// #0
  40b4cc:	b	403580 <__lxstat64@plt>

Disassembly of section .fini:

000000000040b4d0 <_fini>:
  40b4d0:	stp	x29, x30, [sp, #-16]!
  40b4d4:	mov	x29, sp
  40b4d8:	ldp	x29, x30, [sp], #16
  40b4dc:	ret
