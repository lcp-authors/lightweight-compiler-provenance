In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libclang_rt.profile-aarch64.a_gcc_-O1:

GCDAProfiling.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <read_32bit_value>:
   0:	adrp	x0, 0 <read_32bit_value>
   4:	ldr	w1, [x0]
   8:	mov	w0, #0xffffffff            	// #-1
   c:	cbnz	w1, 2c <read_32bit_value+0x2c>
  10:	adrp	x1, 0 <read_32bit_value>
  14:	add	x1, x1, #0x0
  18:	ldr	x2, [x1, #8]
  1c:	ldr	x0, [x1, #16]
  20:	ldr	w0, [x0, x2]
  24:	add	x2, x2, #0x4
  28:	str	x2, [x1, #8]
  2c:	ret

0000000000000030 <read_le_32bit_value>:
  30:	adrp	x0, 0 <read_32bit_value>
  34:	ldr	w1, [x0]
  38:	mov	w0, #0xffffffff            	// #-1
  3c:	cbnz	w1, 84 <read_le_32bit_value+0x54>
  40:	adrp	x0, 0 <read_32bit_value>
  44:	add	x0, x0, #0x0
  48:	ldr	x4, [x0, #16]
  4c:	ldr	x5, [x0, #8]
  50:	mov	x1, #0x0                   	// #0
  54:	mov	w0, #0x0                   	// #0
  58:	add	x4, x4, x5
  5c:	ldrb	w2, [x4, x1]
  60:	lsl	w3, w1, #3
  64:	lsl	w2, w2, w3
  68:	orr	w0, w0, w2
  6c:	add	x1, x1, #0x1
  70:	cmp	x1, #0x4
  74:	b.ne	5c <read_le_32bit_value+0x2c>  // b.any
  78:	add	x5, x5, #0x4
  7c:	adrp	x1, 0 <read_32bit_value>
  80:	str	x5, [x1]
  84:	ret

0000000000000088 <llvm_writeout_files>:
  88:	stp	x29, x30, [sp, #-32]!
  8c:	mov	x29, sp
  90:	stp	x19, x20, [sp, #16]
  94:	adrp	x0, 10 <read_32bit_value+0x10>
  98:	ldr	x0, [x0]
  9c:	ldr	x19, [x0]
  a0:	cbz	x19, d4 <llvm_writeout_files+0x4c>
  a4:	adrp	x20, 0 <read_32bit_value>
  a8:	add	x20, x20, #0x0
  ac:	add	x20, x20, #0x18
  b0:	b	c4 <llvm_writeout_files+0x3c>
  b4:	ldr	x0, [x19, #8]
  b8:	blr	x0
  bc:	ldr	x19, [x19, #16]
  c0:	cbz	x19, d4 <llvm_writeout_files+0x4c>
  c4:	ldr	x0, [x19]
  c8:	cmp	x0, x20
  cc:	b.ne	bc <llvm_writeout_files+0x34>  // b.any
  d0:	b	b4 <llvm_writeout_files+0x2c>
  d4:	ldp	x19, x20, [sp, #16]
  d8:	ldp	x29, x30, [sp], #32
  dc:	ret

00000000000000e0 <fn_list_insert>:
  e0:	stp	x29, x30, [sp, #-32]!
  e4:	mov	x29, sp
  e8:	stp	x19, x20, [sp, #16]
  ec:	mov	x19, x0
  f0:	mov	x20, x1
  f4:	mov	x0, #0x18                  	// #24
  f8:	bl	0 <malloc>
  fc:	str	x20, [x0, #8]
 100:	str	xzr, [x0, #16]
 104:	adrp	x1, 0 <read_32bit_value>
 108:	add	x1, x1, #0x0
 10c:	add	x1, x1, #0x18
 110:	str	x1, [x0]
 114:	ldr	x1, [x19]
 118:	cbz	x1, 134 <fn_list_insert+0x54>
 11c:	ldr	x1, [x19, #8]
 120:	str	x0, [x1, #16]
 124:	str	x0, [x19, #8]
 128:	ldp	x19, x20, [sp, #16]
 12c:	ldp	x29, x30, [sp], #32
 130:	ret
 134:	str	x0, [x19, #8]
 138:	str	x0, [x19]
 13c:	b	128 <fn_list_insert+0x48>

0000000000000140 <resize_write_buffer>:
 140:	adrp	x1, 0 <read_32bit_value>
 144:	ldr	w1, [x1]
 148:	cbz	w1, 168 <resize_write_buffer+0x28>
 14c:	adrp	x1, 0 <read_32bit_value>
 150:	add	x1, x1, #0x0
 154:	ldr	x2, [x1, #8]
 158:	add	x0, x0, x2
 15c:	ldr	x1, [x1, #32]
 160:	cmp	x1, x0
 164:	b.cc	16c <resize_write_buffer+0x2c>  // b.lo, b.ul, b.last
 168:	ret
 16c:	stp	x29, x30, [sp, #-32]!
 170:	mov	x29, sp
 174:	stp	x19, x20, [sp, #16]
 178:	sub	x0, x0, #0x1
 17c:	and	x19, x0, #0xfffffffffffe0000
 180:	add	x19, x19, #0x20, lsl #12
 184:	adrp	x20, 0 <read_32bit_value>
 188:	add	x20, x20, #0x0
 18c:	mov	x1, x19
 190:	ldr	x0, [x20, #16]
 194:	bl	0 <realloc>
 198:	str	x0, [x20, #16]
 19c:	str	x19, [x20, #32]
 1a0:	ldp	x19, x20, [sp, #16]
 1a4:	ldp	x29, x30, [sp], #32
 1a8:	ret

00000000000001ac <write_bytes>:
 1ac:	stp	x29, x30, [sp, #-48]!
 1b0:	mov	x29, sp
 1b4:	stp	x19, x20, [sp, #16]
 1b8:	stp	x21, x22, [sp, #32]
 1bc:	mov	x22, x0
 1c0:	mov	x20, x1
 1c4:	mov	x0, x1
 1c8:	bl	140 <resize_write_buffer>
 1cc:	adrp	x19, 0 <read_32bit_value>
 1d0:	add	x19, x19, #0x0
 1d4:	ldr	x21, [x19, #8]
 1d8:	ldr	x0, [x19, #16]
 1dc:	mov	x2, x20
 1e0:	mov	x1, x22
 1e4:	add	x0, x0, x21
 1e8:	bl	0 <memcpy>
 1ec:	add	x20, x21, x20
 1f0:	str	x20, [x19, #8]
 1f4:	ldp	x19, x20, [sp, #16]
 1f8:	ldp	x21, x22, [sp, #32]
 1fc:	ldp	x29, x30, [sp], #48
 200:	ret

0000000000000204 <write_32bit_value>:
 204:	stp	x29, x30, [sp, #-32]!
 208:	mov	x29, sp
 20c:	str	w0, [sp, #28]
 210:	mov	x1, #0x4                   	// #4
 214:	add	x0, sp, #0x1c
 218:	bl	1ac <write_bytes>
 21c:	ldp	x29, x30, [sp], #32
 220:	ret

0000000000000224 <fn_list_remove>:
 224:	stp	x29, x30, [sp, #-48]!
 228:	mov	x29, sp
 22c:	stp	x19, x20, [sp, #16]
 230:	ldr	x19, [x0]
 234:	cbz	x19, 2ac <fn_list_remove+0x88>
 238:	stp	x21, x22, [sp, #32]
 23c:	mov	x22, x0
 240:	mov	x21, #0x0                   	// #0
 244:	adrp	x20, 0 <read_32bit_value>
 248:	add	x20, x20, #0x0
 24c:	add	x20, x20, #0x18
 250:	b	27c <fn_list_remove+0x58>
 254:	ldr	x1, [x22]
 258:	cmp	x1, x0
 25c:	b.eq	298 <fn_list_remove+0x74>  // b.none
 260:	ldr	x1, [x22, #8]
 264:	cmp	x1, x0
 268:	b.eq	2a0 <fn_list_remove+0x7c>  // b.none
 26c:	cbz	x21, 274 <fn_list_remove+0x50>
 270:	str	x19, [x21, #16]
 274:	bl	0 <free>
 278:	cbz	x19, 2a8 <fn_list_remove+0x84>
 27c:	mov	x0, x19
 280:	ldr	x19, [x19, #16]
 284:	ldr	x1, [x0]
 288:	cmp	x1, x20
 28c:	b.eq	254 <fn_list_remove+0x30>  // b.none
 290:	mov	x21, x0
 294:	b	278 <fn_list_remove+0x54>
 298:	str	x19, [x22]
 29c:	b	260 <fn_list_remove+0x3c>
 2a0:	str	x21, [x22, #8]
 2a4:	b	26c <fn_list_remove+0x48>
 2a8:	ldp	x21, x22, [sp, #32]
 2ac:	ldp	x19, x20, [sp, #16]
 2b0:	ldp	x29, x30, [sp], #48
 2b4:	ret

00000000000002b8 <llvm_delete_writeout_function_list>:
 2b8:	stp	x29, x30, [sp, #-16]!
 2bc:	mov	x29, sp
 2c0:	adrp	x0, 10 <read_32bit_value+0x10>
 2c4:	ldr	x0, [x0]
 2c8:	bl	224 <fn_list_remove>
 2cc:	ldp	x29, x30, [sp], #16
 2d0:	ret

00000000000002d4 <llvm_delete_flush_function_list>:
 2d4:	stp	x29, x30, [sp, #-16]!
 2d8:	mov	x29, sp
 2dc:	adrp	x0, 10 <read_32bit_value+0x10>
 2e0:	ldr	x0, [x0]
 2e4:	bl	224 <fn_list_remove>
 2e8:	ldp	x29, x30, [sp], #16
 2ec:	ret

00000000000002f0 <llvm_gcda_start_file>:
 2f0:	stp	x29, x30, [sp, #-80]!
 2f4:	mov	x29, sp
 2f8:	stp	x19, x20, [sp, #16]
 2fc:	stp	x21, x22, [sp, #32]
 300:	stp	x23, x24, [sp, #48]
 304:	mov	x23, x0
 308:	mov	x20, x1
 30c:	mov	w21, w2
 310:	add	x1, sp, #0x48
 314:	add	x0, sp, #0x44
 318:	bl	0 <lprofGetPathPrefix>
 31c:	cbz	x0, 414 <llvm_gcda_start_file+0x124>
 320:	mov	x22, x0
 324:	mov	x0, x23
 328:	bl	0 <strlen>
 32c:	ldr	x24, [sp, #72]
 330:	add	x1, x24, #0x2
 334:	add	x0, x1, x0
 338:	bl	0 <malloc>
 33c:	mov	x19, x0
 340:	ldr	w4, [sp, #68]
 344:	mov	x3, x24
 348:	mov	x2, x22
 34c:	mov	x1, x23
 350:	bl	0 <lprofApplyPathPrefix>
 354:	adrp	x0, 0 <read_32bit_value>
 358:	add	x1, x0, #0x0
 35c:	str	x19, [x1, #40]
 360:	str	wzr, [x0]
 364:	mov	w1, #0x2                   	// #2
 368:	mov	x0, x19
 36c:	bl	0 <open>
 370:	adrp	x1, 0 <read_32bit_value>
 374:	str	w0, [x1]
 378:	adrp	x19, 0 <read_32bit_value>
 37c:	add	x19, x19, #0x0
 380:	cmn	w0, #0x1
 384:	b.eq	424 <llvm_gcda_start_file+0x134>  // b.none
 388:	adrp	x22, 0 <read_32bit_value>
 38c:	ldr	w0, [x22]
 390:	bl	0 <lprofLockFd>
 394:	mov	x1, x19
 398:	ldr	w0, [x22]
 39c:	bl	0 <fdopen>
 3a0:	adrp	x2, 0 <read_32bit_value>
 3a4:	add	x1, x2, #0x0
 3a8:	str	x0, [x1, #48]
 3ac:	str	xzr, [x1, #16]
 3b0:	str	xzr, [x1, #32]
 3b4:	str	xzr, [x1, #8]
 3b8:	ldr	w1, [x2]
 3bc:	cbz	w1, 4d0 <llvm_gcda_start_file+0x1e0>
 3c0:	mov	x0, #0x20000               	// #131072
 3c4:	bl	140 <resize_write_buffer>
 3c8:	mov	x2, #0x20000               	// #131072
 3cc:	mov	w1, #0x0                   	// #0
 3d0:	adrp	x0, 0 <read_32bit_value>
 3d4:	ldr	x0, [x0]
 3d8:	bl	0 <memset>
 3dc:	mov	x1, #0x4                   	// #4
 3e0:	adrp	x0, 0 <read_32bit_value>
 3e4:	add	x0, x0, #0x0
 3e8:	bl	1ac <write_bytes>
 3ec:	mov	x1, #0x4                   	// #4
 3f0:	mov	x0, x20
 3f4:	bl	1ac <write_bytes>
 3f8:	mov	w0, w21
 3fc:	bl	204 <write_32bit_value>
 400:	ldp	x19, x20, [sp, #16]
 404:	ldp	x21, x22, [sp, #32]
 408:	ldp	x23, x24, [sp, #48]
 40c:	ldp	x29, x30, [sp], #80
 410:	ret
 414:	mov	x0, x23
 418:	bl	0 <strdup>
 41c:	mov	x19, x0
 420:	b	354 <llvm_gcda_start_file+0x64>
 424:	adrp	x0, 0 <read_32bit_value>
 428:	add	x3, x0, #0x0
 42c:	mov	w1, #0x1                   	// #1
 430:	str	w1, [x0]
 434:	mov	w2, #0x1a4                 	// #420
 438:	mov	w1, #0x42                  	// #66
 43c:	ldr	x0, [x3, #40]
 440:	bl	0 <open>
 444:	adrp	x1, 0 <read_32bit_value>
 448:	str	w0, [x1]
 44c:	adrp	x19, 0 <read_32bit_value>
 450:	add	x19, x19, #0x0
 454:	cmn	w0, #0x1
 458:	b.ne	388 <llvm_gcda_start_file+0x98>  // b.any
 45c:	adrp	x19, 0 <read_32bit_value>
 460:	add	x19, x19, #0x0
 464:	ldr	x0, [x19, #40]
 468:	bl	0 <__llvm_profile_recursive_mkdir>
 46c:	mov	w2, #0x1a4                 	// #420
 470:	mov	w1, #0x42                  	// #66
 474:	ldr	x0, [x19, #40]
 478:	bl	0 <open>
 47c:	adrp	x1, 0 <read_32bit_value>
 480:	str	w0, [x1]
 484:	adrp	x19, 0 <read_32bit_value>
 488:	add	x19, x19, #0x0
 48c:	cmn	w0, #0x1
 490:	b.ne	388 <llvm_gcda_start_file+0x98>  // b.any
 494:	bl	0 <__errno_location>
 498:	adrp	x1, 0 <stderr>
 49c:	ldr	x1, [x1]
 4a0:	ldr	x19, [x1]
 4a4:	adrp	x1, 0 <read_32bit_value>
 4a8:	ldr	x20, [x1]
 4ac:	ldr	w0, [x0]
 4b0:	bl	0 <strerror>
 4b4:	mov	x3, x0
 4b8:	mov	x2, x20
 4bc:	adrp	x1, 0 <read_32bit_value>
 4c0:	add	x1, x1, #0x0
 4c4:	mov	x0, x19
 4c8:	bl	0 <fprintf>
 4cc:	b	400 <llvm_gcda_start_file+0x110>
 4d0:	mov	w2, #0x2                   	// #2
 4d4:	mov	x1, #0x0                   	// #0
 4d8:	bl	0 <fseek>
 4dc:	adrp	x19, 0 <read_32bit_value>
 4e0:	add	x19, x19, #0x0
 4e4:	ldr	x0, [x19, #48]
 4e8:	bl	0 <ftell>
 4ec:	mov	x1, x0
 4f0:	str	x0, [x19, #56]
 4f4:	cbz	x0, 55c <llvm_gcda_start_file+0x26c>
 4f8:	mov	x5, #0x0                   	// #0
 4fc:	adrp	x0, 0 <read_32bit_value>
 500:	ldr	w4, [x0]
 504:	mov	w3, #0x1                   	// #1
 508:	mov	w2, #0x3                   	// #3
 50c:	mov	x0, #0x0                   	// #0
 510:	bl	0 <mmap>
 514:	adrp	x1, 0 <read_32bit_value>
 518:	str	x0, [x1]
 51c:	cmn	x0, #0x1
 520:	b.ne	3dc <llvm_gcda_start_file+0xec>  // b.any
 524:	bl	0 <__errno_location>
 528:	adrp	x1, 0 <stderr>
 52c:	ldr	x1, [x1]
 530:	ldr	x19, [x1]
 534:	adrp	x1, 0 <read_32bit_value>
 538:	ldr	x22, [x1]
 53c:	ldr	w0, [x0]
 540:	bl	0 <strerror>
 544:	mov	x3, x0
 548:	mov	x2, x22
 54c:	adrp	x1, 0 <read_32bit_value>
 550:	add	x1, x1, #0x0
 554:	mov	x0, x19
 558:	bl	0 <fprintf>
 55c:	adrp	x0, 0 <read_32bit_value>
 560:	add	x19, x0, #0x0
 564:	mov	w1, #0x1                   	// #1
 568:	str	w1, [x0]
 56c:	str	xzr, [x19, #16]
 570:	str	xzr, [x19, #32]
 574:	mov	x0, #0x20000               	// #131072
 578:	bl	140 <resize_write_buffer>
 57c:	mov	x2, #0x20000               	// #131072
 580:	mov	w1, #0x0                   	// #0
 584:	ldr	x0, [x19, #16]
 588:	bl	0 <memset>
 58c:	b	3dc <llvm_gcda_start_file+0xec>

0000000000000590 <llvm_gcda_increment_indirect_counter>:
 590:	ldr	w0, [x0]
 594:	cmn	w0, #0x1
 598:	b.eq	5b0 <llvm_gcda_increment_indirect_counter+0x20>  // b.none
 59c:	ldr	x0, [x1, w0, uxtw #3]
 5a0:	cbz	x0, 5b0 <llvm_gcda_increment_indirect_counter+0x20>
 5a4:	ldr	x1, [x0]
 5a8:	add	x1, x1, #0x1
 5ac:	str	x1, [x0]
 5b0:	ret

00000000000005b4 <llvm_gcda_emit_function>:
 5b4:	stp	x29, x30, [sp, #-64]!
 5b8:	mov	x29, sp
 5bc:	stp	x19, x20, [sp, #16]
 5c0:	stp	x23, x24, [sp, #48]
 5c4:	mov	x19, x1
 5c8:	ands	w24, w3, #0xff
 5cc:	cset	w1, ne  // ne = any
 5d0:	add	w20, w1, #0x2
 5d4:	adrp	x1, 0 <read_32bit_value>
 5d8:	ldr	x1, [x1]
 5dc:	cbz	x1, 680 <llvm_gcda_emit_function+0xcc>
 5e0:	stp	x21, x22, [sp, #32]
 5e4:	mov	w22, w0
 5e8:	mov	w23, w2
 5ec:	mov	w21, w4
 5f0:	mov	x1, #0x4                   	// #4
 5f4:	adrp	x0, 0 <read_32bit_value>
 5f8:	add	x0, x0, #0x0
 5fc:	bl	1ac <write_bytes>
 600:	cbz	x19, 690 <llvm_gcda_emit_function+0xdc>
 604:	mov	x0, x19
 608:	bl	0 <strlen>
 60c:	add	w20, w20, #0x2
 610:	lsr	x0, x0, #2
 614:	add	w0, w20, w0
 618:	bl	204 <write_32bit_value>
 61c:	mov	w0, w22
 620:	bl	204 <write_32bit_value>
 624:	mov	w0, w23
 628:	bl	204 <write_32bit_value>
 62c:	cbnz	w24, 6b4 <llvm_gcda_emit_function+0x100>
 630:	mov	x0, x19
 634:	bl	0 <strlen>
 638:	lsr	x0, x0, #2
 63c:	add	w0, w0, #0x1
 640:	bl	204 <write_32bit_value>
 644:	mov	x0, x19
 648:	bl	0 <strlen>
 64c:	mov	x1, x0
 650:	mov	x0, x19
 654:	bl	1ac <write_bytes>
 658:	mov	x0, x19
 65c:	bl	0 <strlen>
 660:	and	x0, x0, #0x3
 664:	mov	x1, #0x4                   	// #4
 668:	sub	x1, x1, x0
 66c:	adrp	x0, 0 <read_32bit_value>
 670:	add	x0, x0, #0x0
 674:	add	x0, x0, #0x8
 678:	bl	1ac <write_bytes>
 67c:	ldp	x21, x22, [sp, #32]
 680:	ldp	x19, x20, [sp, #16]
 684:	ldp	x23, x24, [sp, #48]
 688:	ldp	x29, x30, [sp], #64
 68c:	ret
 690:	mov	w0, w20
 694:	bl	204 <write_32bit_value>
 698:	mov	w0, w22
 69c:	bl	204 <write_32bit_value>
 6a0:	mov	w0, w23
 6a4:	bl	204 <write_32bit_value>
 6a8:	cbnz	w24, 6c0 <llvm_gcda_emit_function+0x10c>
 6ac:	ldp	x21, x22, [sp, #32]
 6b0:	b	680 <llvm_gcda_emit_function+0xcc>
 6b4:	mov	w0, w21
 6b8:	bl	204 <write_32bit_value>
 6bc:	b	630 <llvm_gcda_emit_function+0x7c>
 6c0:	mov	w0, w21
 6c4:	bl	204 <write_32bit_value>
 6c8:	ldp	x21, x22, [sp, #32]
 6cc:	b	680 <llvm_gcda_emit_function+0xcc>

00000000000006d0 <llvm_gcda_emit_arcs>:
 6d0:	stp	x29, x30, [sp, #-80]!
 6d4:	mov	x29, sp
 6d8:	stp	x21, x22, [sp, #32]
 6dc:	mov	w22, w0
 6e0:	adrp	x0, 0 <read_32bit_value>
 6e4:	ldr	x0, [x0]
 6e8:	cbz	x0, 73c <llvm_gcda_emit_arcs+0x6c>
 6ec:	stp	x19, x20, [sp, #16]
 6f0:	mov	x21, x1
 6f4:	adrp	x0, 0 <read_32bit_value>
 6f8:	ldr	x20, [x0]
 6fc:	bl	30 <read_le_32bit_value>
 700:	mov	w3, w0
 704:	cmn	w0, #0x1
 708:	b.eq	7fc <llvm_gcda_emit_arcs+0x12c>  // b.none
 70c:	mov	w0, #0x1a10000             	// #27328512
 710:	cmp	w3, w0
 714:	b.eq	748 <llvm_gcda_emit_arcs+0x78>  // b.none
 718:	adrp	x0, 0 <read_32bit_value>
 71c:	ldr	x2, [x0]
 720:	adrp	x1, 0 <read_32bit_value>
 724:	add	x1, x1, #0x0
 728:	adrp	x0, 0 <stderr>
 72c:	ldr	x0, [x0]
 730:	ldr	x0, [x0]
 734:	bl	0 <fprintf>
 738:	ldp	x19, x20, [sp, #16]
 73c:	ldp	x21, x22, [sp, #32]
 740:	ldp	x29, x30, [sp], #80
 744:	ret
 748:	bl	0 <read_32bit_value>
 74c:	mov	w3, w0
 750:	cmn	w0, #0x1
 754:	b.eq	760 <llvm_gcda_emit_arcs+0x90>  // b.none
 758:	cmp	w22, w0, lsr #1
 75c:	b.eq	788 <llvm_gcda_emit_arcs+0xb8>  // b.none
 760:	adrp	x0, 0 <read_32bit_value>
 764:	ldr	x2, [x0]
 768:	adrp	x1, 0 <read_32bit_value>
 76c:	add	x1, x1, #0x0
 770:	adrp	x0, 0 <stderr>
 774:	ldr	x0, [x0]
 778:	ldr	x0, [x0]
 77c:	bl	0 <fprintf>
 780:	ldp	x19, x20, [sp, #16]
 784:	b	73c <llvm_gcda_emit_arcs+0x6c>
 788:	stp	x23, x24, [sp, #48]
 78c:	ubfiz	x0, x22, #3, #32
 790:	bl	0 <malloc>
 794:	mov	x23, x0
 798:	cbz	w22, 888 <llvm_gcda_emit_arcs+0x1b8>
 79c:	str	x25, [sp, #64]
 7a0:	mov	x24, x0
 7a4:	sub	w25, w22, #0x1
 7a8:	add	x25, x25, #0x1
 7ac:	add	x25, x0, x25, lsl #3
 7b0:	bl	0 <read_32bit_value>
 7b4:	mov	w19, w0
 7b8:	bl	0 <read_32bit_value>
 7bc:	mov	w19, w19
 7c0:	orr	x19, x19, x0, lsl #32
 7c4:	str	x19, [x24], #8
 7c8:	cmp	x24, x25
 7cc:	b.ne	7b0 <llvm_gcda_emit_arcs+0xe0>  // b.any
 7d0:	adrp	x0, 0 <read_32bit_value>
 7d4:	str	x20, [x0]
 7d8:	mov	x1, #0x4                   	// #4
 7dc:	adrp	x0, 0 <read_32bit_value>
 7e0:	add	x0, x0, #0x0
 7e4:	add	x0, x0, #0x10
 7e8:	bl	1ac <write_bytes>
 7ec:	lsl	w0, w22, #1
 7f0:	bl	204 <write_32bit_value>
 7f4:	ldr	x25, [sp, #64]
 7f8:	b	82c <llvm_gcda_emit_arcs+0x15c>
 7fc:	stp	x23, x24, [sp, #48]
 800:	adrp	x0, 0 <read_32bit_value>
 804:	str	x20, [x0]
 808:	mov	x1, #0x4                   	// #4
 80c:	adrp	x0, 0 <read_32bit_value>
 810:	add	x0, x0, #0x0
 814:	add	x0, x0, #0x10
 818:	bl	1ac <write_bytes>
 81c:	lsl	w0, w22, #1
 820:	bl	204 <write_32bit_value>
 824:	cbz	w22, 870 <llvm_gcda_emit_arcs+0x1a0>
 828:	mov	x23, #0x0                   	// #0
 82c:	mov	x20, #0x0                   	// #0
 830:	mov	x24, #0x0                   	// #0
 834:	b	85c <llvm_gcda_emit_arcs+0x18c>
 838:	add	x19, x19, x1
 83c:	str	x19, [x21, x20, lsl #3]
 840:	mov	w0, w19
 844:	bl	204 <write_32bit_value>
 848:	lsr	x0, x19, #32
 84c:	bl	204 <write_32bit_value>
 850:	add	x20, x20, #0x1
 854:	cmp	w22, w20
 858:	b.ls	874 <llvm_gcda_emit_arcs+0x1a4>  // b.plast
 85c:	ldr	x19, [x21, x20, lsl #3]
 860:	mov	x1, x24
 864:	cbz	x23, 838 <llvm_gcda_emit_arcs+0x168>
 868:	ldr	x1, [x23, x20, lsl #3]
 86c:	b	838 <llvm_gcda_emit_arcs+0x168>
 870:	mov	x23, #0x0                   	// #0
 874:	mov	x0, x23
 878:	bl	0 <free>
 87c:	ldp	x19, x20, [sp, #16]
 880:	ldp	x23, x24, [sp, #48]
 884:	b	73c <llvm_gcda_emit_arcs+0x6c>
 888:	adrp	x0, 0 <read_32bit_value>
 88c:	str	x20, [x0]
 890:	mov	x1, #0x4                   	// #4
 894:	adrp	x0, 0 <read_32bit_value>
 898:	add	x0, x0, #0x0
 89c:	add	x0, x0, #0x10
 8a0:	bl	1ac <write_bytes>
 8a4:	mov	w0, #0x0                   	// #0
 8a8:	bl	204 <write_32bit_value>
 8ac:	b	874 <llvm_gcda_emit_arcs+0x1a4>

00000000000008b0 <llvm_gcda_summary_info>:
 8b0:	adrp	x0, 0 <read_32bit_value>
 8b4:	ldr	x0, [x0]
 8b8:	cbz	x0, 9ec <llvm_gcda_summary_info+0x13c>
 8bc:	stp	x29, x30, [sp, #-32]!
 8c0:	mov	x29, sp
 8c4:	stp	x19, x20, [sp, #16]
 8c8:	adrp	x0, 0 <read_32bit_value>
 8cc:	ldr	x19, [x0]
 8d0:	bl	30 <read_le_32bit_value>
 8d4:	mov	w3, w0
 8d8:	cmn	w0, #0x1
 8dc:	b.eq	964 <llvm_gcda_summary_info+0xb4>  // b.none
 8e0:	mov	w0, #0xa1000000            	// #-1593835520
 8e4:	cmp	w3, w0
 8e8:	b.eq	910 <llvm_gcda_summary_info+0x60>  // b.none
 8ec:	adrp	x0, 0 <read_32bit_value>
 8f0:	ldr	x2, [x0]
 8f4:	adrp	x1, 0 <read_32bit_value>
 8f8:	add	x1, x1, #0x0
 8fc:	adrp	x0, 0 <stderr>
 900:	ldr	x0, [x0]
 904:	ldr	x0, [x0]
 908:	bl	0 <fprintf>
 90c:	b	9e0 <llvm_gcda_summary_info+0x130>
 910:	bl	0 <read_32bit_value>
 914:	cmp	w0, #0x9
 918:	b.eq	944 <llvm_gcda_summary_info+0x94>  // b.none
 91c:	mov	w3, w0
 920:	adrp	x0, 0 <read_32bit_value>
 924:	ldr	x2, [x0]
 928:	adrp	x1, 0 <read_32bit_value>
 92c:	add	x1, x1, #0x0
 930:	adrp	x0, 0 <stderr>
 934:	ldr	x0, [x0]
 938:	ldr	x0, [x0]
 93c:	bl	0 <fprintf>
 940:	b	9e0 <llvm_gcda_summary_info+0x130>
 944:	bl	0 <read_32bit_value>
 948:	bl	0 <read_32bit_value>
 94c:	bl	0 <read_32bit_value>
 950:	adrp	x1, 0 <read_32bit_value>
 954:	ldr	w1, [x1]
 958:	cmp	w1, #0x0
 95c:	cinc	w20, w0, eq  // eq = none
 960:	b	968 <llvm_gcda_summary_info+0xb8>
 964:	mov	w20, #0x1                   	// #1
 968:	adrp	x0, 0 <read_32bit_value>
 96c:	str	x19, [x0]
 970:	mov	x1, #0x4                   	// #4
 974:	adrp	x0, 0 <read_32bit_value>
 978:	add	x0, x0, #0x0
 97c:	add	x0, x0, #0x18
 980:	bl	1ac <write_bytes>
 984:	mov	w0, #0x9                   	// #9
 988:	bl	204 <write_32bit_value>
 98c:	mov	w0, #0x0                   	// #0
 990:	bl	204 <write_32bit_value>
 994:	mov	w0, #0x0                   	// #0
 998:	bl	204 <write_32bit_value>
 99c:	mov	w0, w20
 9a0:	bl	204 <write_32bit_value>
 9a4:	mov	w19, #0x6                   	// #6
 9a8:	mov	w0, #0x0                   	// #0
 9ac:	bl	204 <write_32bit_value>
 9b0:	subs	w19, w19, #0x1
 9b4:	b.ne	9a8 <llvm_gcda_summary_info+0xf8>  // b.any
 9b8:	mov	x1, #0x4                   	// #4
 9bc:	adrp	x0, 0 <read_32bit_value>
 9c0:	add	x0, x0, #0x0
 9c4:	add	x0, x0, #0x20
 9c8:	bl	1ac <write_bytes>
 9cc:	mov	w0, #0x0                   	// #0
 9d0:	bl	204 <write_32bit_value>
 9d4:	adrp	x0, 0 <read_32bit_value>
 9d8:	mov	w1, #0x1                   	// #1
 9dc:	str	w1, [x0]
 9e0:	ldp	x19, x20, [sp, #16]
 9e4:	ldp	x29, x30, [sp], #32
 9e8:	ret
 9ec:	ret

00000000000009f0 <llvm_gcda_end_file>:
 9f0:	stp	x29, x30, [sp, #-32]!
 9f4:	mov	x29, sp
 9f8:	stp	x19, x20, [sp, #16]
 9fc:	adrp	x0, 0 <read_32bit_value>
 a00:	ldr	x19, [x0]
 a04:	cbz	x19, a78 <llvm_gcda_end_file+0x88>
 a08:	mov	x1, #0x8                   	// #8
 a0c:	adrp	x0, 0 <read_32bit_value>
 a10:	add	x0, x0, #0x0
 a14:	add	x0, x0, #0x28
 a18:	bl	1ac <write_bytes>
 a1c:	adrp	x0, 0 <read_32bit_value>
 a20:	ldr	w0, [x0]
 a24:	cbz	w0, a90 <llvm_gcda_end_file+0xa0>
 a28:	adrp	x20, 0 <read_32bit_value>
 a2c:	add	x20, x20, #0x0
 a30:	mov	x3, x19
 a34:	mov	x2, #0x1                   	// #1
 a38:	ldr	x1, [x20, #8]
 a3c:	ldr	x0, [x20, #16]
 a40:	bl	0 <fwrite>
 a44:	ldr	x0, [x20, #16]
 a48:	bl	0 <free>
 a4c:	adrp	x19, 0 <read_32bit_value>
 a50:	add	x19, x19, #0x0
 a54:	ldr	x0, [x19, #48]
 a58:	bl	0 <fflush>
 a5c:	adrp	x0, 0 <read_32bit_value>
 a60:	ldr	w0, [x0]
 a64:	bl	0 <lprofUnlockFd>
 a68:	ldr	x0, [x19, #48]
 a6c:	bl	0 <fclose>
 a70:	str	xzr, [x19, #48]
 a74:	str	xzr, [x19, #16]
 a78:	adrp	x0, 0 <read_32bit_value>
 a7c:	ldr	x0, [x0]
 a80:	bl	0 <free>
 a84:	ldp	x19, x20, [sp, #16]
 a88:	ldp	x29, x30, [sp], #32
 a8c:	ret
 a90:	adrp	x0, 0 <read_32bit_value>
 a94:	add	x0, x0, #0x0
 a98:	mov	w2, #0x4                   	// #4
 a9c:	ldr	x1, [x0, #56]
 aa0:	ldr	x0, [x0, #16]
 aa4:	bl	0 <msync>
 aa8:	cmn	w0, #0x1
 aac:	b.eq	ad0 <llvm_gcda_end_file+0xe0>  // b.none
 ab0:	adrp	x19, 0 <read_32bit_value>
 ab4:	add	x19, x19, #0x0
 ab8:	ldr	x1, [x19, #56]
 abc:	ldr	x0, [x19, #16]
 ac0:	bl	0 <munmap>
 ac4:	str	xzr, [x19, #16]
 ac8:	str	xzr, [x19, #56]
 acc:	b	a4c <llvm_gcda_end_file+0x5c>
 ad0:	bl	0 <__errno_location>
 ad4:	adrp	x1, 0 <stderr>
 ad8:	ldr	x1, [x1]
 adc:	ldr	x19, [x1]
 ae0:	adrp	x1, 0 <read_32bit_value>
 ae4:	ldr	x20, [x1]
 ae8:	ldr	w0, [x0]
 aec:	bl	0 <strerror>
 af0:	mov	x3, x0
 af4:	mov	x2, x20
 af8:	adrp	x1, 0 <read_32bit_value>
 afc:	add	x1, x1, #0x0
 b00:	mov	x0, x19
 b04:	bl	0 <fprintf>
 b08:	b	ab0 <llvm_gcda_end_file+0xc0>

0000000000000b0c <llvm_register_writeout_function>:
 b0c:	stp	x29, x30, [sp, #-16]!
 b10:	mov	x29, sp
 b14:	mov	x1, x0
 b18:	adrp	x0, 10 <read_32bit_value+0x10>
 b1c:	ldr	x0, [x0]
 b20:	bl	e0 <fn_list_insert>
 b24:	ldp	x29, x30, [sp], #16
 b28:	ret

0000000000000b2c <llvm_register_flush_function>:
 b2c:	stp	x29, x30, [sp, #-16]!
 b30:	mov	x29, sp
 b34:	mov	x1, x0
 b38:	adrp	x0, 10 <read_32bit_value+0x10>
 b3c:	ldr	x0, [x0]
 b40:	bl	e0 <fn_list_insert>
 b44:	ldp	x29, x30, [sp], #16
 b48:	ret

0000000000000b4c <__gcov_flush>:
 b4c:	stp	x29, x30, [sp, #-32]!
 b50:	mov	x29, sp
 b54:	str	x19, [sp, #16]
 b58:	adrp	x0, 10 <read_32bit_value+0x10>
 b5c:	ldr	x0, [x0]
 b60:	ldr	x19, [x0]
 b64:	cbz	x19, b78 <__gcov_flush+0x2c>
 b68:	ldr	x0, [x19, #8]
 b6c:	blr	x0
 b70:	ldr	x19, [x19, #16]
 b74:	cbnz	x19, b68 <__gcov_flush+0x1c>
 b78:	ldr	x19, [sp, #16]
 b7c:	ldp	x29, x30, [sp], #32
 b80:	ret

0000000000000b84 <llvm_gcov_init>:
 b84:	stp	x29, x30, [sp, #-32]!
 b88:	mov	x29, sp
 b8c:	str	x19, [sp, #16]
 b90:	mov	x19, x1
 b94:	cbz	x0, b9c <llvm_gcov_init+0x18>
 b98:	bl	b0c <llvm_register_writeout_function>
 b9c:	cbz	x19, ba8 <llvm_gcov_init+0x24>
 ba0:	mov	x0, x19
 ba4:	bl	b2c <llvm_register_flush_function>
 ba8:	adrp	x0, 0 <read_32bit_value>
 bac:	ldr	w0, [x0]
 bb0:	cbz	w0, bc0 <llvm_gcov_init+0x3c>
 bb4:	ldr	x19, [sp, #16]
 bb8:	ldp	x29, x30, [sp], #32
 bbc:	ret
 bc0:	adrp	x0, 0 <read_32bit_value>
 bc4:	mov	w1, #0x1                   	// #1
 bc8:	str	w1, [x0]
 bcc:	adrp	x0, 2d4 <llvm_delete_flush_function_list>
 bd0:	add	x0, x0, #0x0
 bd4:	bl	0 <atexit>
 bd8:	adrp	x0, 2b8 <llvm_delete_writeout_function_list>
 bdc:	add	x0, x0, #0x0
 be0:	bl	0 <atexit>
 be4:	adrp	x0, 88 <llvm_writeout_files>
 be8:	add	x0, x0, #0x0
 bec:	bl	0 <atexit>
 bf0:	b	bb4 <llvm_gcov_init+0x30>

InstrProfiling.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__llvm_profile_get_magic>:
   0:	mov	x0, #0x7281                	// #29313
   4:	movk	x0, #0x6f66, lsl #16
   8:	movk	x0, #0x7072, lsl #32
   c:	movk	x0, #0xff6c, lsl #48
  10:	ret

0000000000000014 <lprofProfileDumped>:
  14:	adrp	x0, 0 <__llvm_profile_get_magic>
  18:	ldr	w0, [x0]
  1c:	ret

0000000000000020 <lprofSetProfileDumped>:
  20:	adrp	x0, 0 <__llvm_profile_get_magic>
  24:	mov	w1, #0x1                   	// #1
  28:	str	w1, [x0]
  2c:	ret

0000000000000030 <__llvm_profile_set_dumped>:
  30:	adrp	x0, 0 <__llvm_profile_get_magic>
  34:	mov	w1, #0x1                   	// #1
  38:	str	w1, [x0]
  3c:	ret

0000000000000040 <__llvm_profile_get_num_padding_bytes>:
  40:	neg	w0, w0
  44:	and	w0, w0, #0x7
  48:	ret

000000000000004c <__llvm_profile_get_version>:
  4c:	adrp	x0, 0 <__llvm_profile_get_magic>
  50:	ldr	x0, [x0]
  54:	ldr	x0, [x0]
  58:	ret

000000000000005c <__llvm_profile_reset_counters>:
  5c:	stp	x29, x30, [sp, #-32]!
  60:	mov	x29, sp
  64:	str	x19, [sp, #16]
  68:	bl	0 <__llvm_profile_begin_counters>
  6c:	mov	x19, x0
  70:	bl	0 <__llvm_profile_end_counters>
  74:	sub	x2, x0, x19
  78:	mov	w1, #0x0                   	// #0
  7c:	mov	x0, x19
  80:	bl	0 <memset>
  84:	bl	0 <__llvm_profile_begin_data>
  88:	mov	x19, x0
  8c:	bl	0 <__llvm_profile_end_data>
  90:	cmp	x19, x0
  94:	b.cs	fc <__llvm_profile_reset_counters+0xa0>  // b.hs, b.nlast
  98:	mov	x4, x0
  9c:	mov	x5, #0x0                   	// #0
  a0:	b	d8 <__llvm_profile_reset_counters+0x7c>
  a4:	add	w1, w1, #0x1
  a8:	mov	w0, w1
  ac:	cmp	x2, w1, uxtw
  b0:	b.ls	cc <__llvm_profile_reset_counters+0x70>  // b.plast
  b4:	ldr	x0, [x3, x0, lsl #3]
  b8:	cbz	x0, a4 <__llvm_profile_reset_counters+0x48>
  bc:	str	xzr, [x0, #8]
  c0:	ldr	x0, [x0, #16]
  c4:	cbnz	x0, bc <__llvm_profile_reset_counters+0x60>
  c8:	b	a4 <__llvm_profile_reset_counters+0x48>
  cc:	add	x19, x19, #0x30
  d0:	cmp	x4, x19
  d4:	b.ls	fc <__llvm_profile_reset_counters+0xa0>  // b.plast
  d8:	ldr	x3, [x19, #32]
  dc:	cbz	x3, cc <__llvm_profile_reset_counters+0x70>
  e0:	ldrh	w2, [x19, #46]
  e4:	ldrh	w0, [x19, #44]
  e8:	adds	x2, x2, x0
  ec:	b.eq	cc <__llvm_profile_reset_counters+0x70>  // b.none
  f0:	mov	w1, #0x0                   	// #0
  f4:	mov	x0, x5
  f8:	b	b4 <__llvm_profile_reset_counters+0x58>
  fc:	adrp	x0, 0 <__llvm_profile_get_magic>
 100:	str	wzr, [x0]
 104:	ldr	x19, [sp, #16]
 108:	ldp	x29, x30, [sp], #32
 10c:	ret

InstrProfilingValue.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getValueProfRecordHeaderSize>:
   0:	add	w0, w0, #0xf
   4:	and	w0, w0, #0xfffffff8
   8:	ret

000000000000000c <getFirstValueProfRecord>:
   c:	add	x0, x0, #0x8
  10:	ret

0000000000000014 <getNumValueSitesRT>:
  14:	ldr	x0, [x0]
  18:	add	x1, x0, w1, uxtw #1
  1c:	ldrh	w0, [x1, #44]
  20:	ret

0000000000000024 <getNumValueDataRT>:
  24:	ldr	x2, [x0, #24]
  28:	ldr	x3, [x2, w1, uxtw #3]
  2c:	cbz	x3, 60 <getNumValueDataRT+0x3c>
  30:	ldr	x0, [x0]
  34:	add	x1, x0, w1, uxtw #1
  38:	ldrh	w4, [x1, #44]
  3c:	cbz	w4, 68 <getNumValueDataRT+0x44>
  40:	mov	x1, #0x0                   	// #0
  44:	mov	w0, #0x0                   	// #0
  48:	ldrb	w2, [x3, x1]
  4c:	add	w0, w0, w2
  50:	add	x1, x1, #0x1
  54:	cmp	w4, w1
  58:	b.hi	48 <getNumValueDataRT+0x24>  // b.pmore
  5c:	ret
  60:	mov	w0, #0x0                   	// #0
  64:	b	5c <getNumValueDataRT+0x38>
  68:	mov	w0, w4
  6c:	b	5c <getNumValueDataRT+0x38>

0000000000000070 <getNumValueDataForSiteRT>:
  70:	ldr	x0, [x0, #24]
  74:	ldr	x0, [x0, w1, uxtw #3]
  78:	ldrb	w0, [x0, w2, uxtw]
  7c:	ret

0000000000000080 <initializeValueProfRuntimeRecord>:
  80:	mov	x2, x0
  84:	ldr	x4, [x0, #32]
  88:	adrp	x0, 0 <getValueProfRecordHeaderSize>
  8c:	add	x7, x0, #0x0
  90:	str	x2, [x0]
  94:	str	x1, [x7, #24]
  98:	mov	x6, #0x0                   	// #0
  9c:	mov	w0, #0x0                   	// #0
  a0:	mov	w14, #0x0                   	// #0
  a4:	add	x8, x2, #0x2c
  a8:	mov	x15, x4
  ac:	mov	x5, x7
  b0:	mov	w9, #0xff                  	// #255
  b4:	b	118 <initializeValueProfRuntimeRecord+0x98>
  b8:	ldr	x1, [x12, #8]
  bc:	ldr	x1, [x1, x3, lsl #3]
  c0:	cbz	x1, fc <initializeValueProfRuntimeRecord+0x7c>
  c4:	add	w2, w2, #0x1
  c8:	ldr	x1, [x1, #16]
  cc:	cbnz	x1, c4 <initializeValueProfRuntimeRecord+0x44>
  d0:	ldr	x1, [x5, #24]
  d4:	ldr	x1, [x1, x10]
  d8:	cmp	w2, #0xff
  dc:	csel	w2, w2, w9, ls  // ls = plast
  e0:	strb	w2, [x1, x3]
  e4:	add	x3, x3, #0x1
  e8:	cmp	w11, w3
  ec:	b.ls	104 <initializeValueProfRuntimeRecord+0x84>  // b.plast
  f0:	mov	w2, #0x0                   	// #0
  f4:	cbnz	x4, b8 <initializeValueProfRuntimeRecord+0x38>
  f8:	b	d0 <initializeValueProfRuntimeRecord+0x50>
  fc:	mov	w2, #0x0                   	// #0
 100:	b	d0 <initializeValueProfRuntimeRecord+0x50>
 104:	add	w14, w14, w13
 108:	add	x7, x7, #0x8
 10c:	add	x6, x6, #0x2
 110:	cmp	x6, #0x4
 114:	b.eq	148 <initializeValueProfRuntimeRecord+0xc8>  // b.none
 118:	ldrh	w13, [x8, x6]
 11c:	cbz	w13, 108 <initializeValueProfRuntimeRecord+0x88>
 120:	add	w0, w0, #0x1
 124:	add	x1, x4, w14, uxtw #3
 128:	cmp	x4, #0x0
 12c:	csel	x1, x1, x15, ne  // ne = any
 130:	mov	x12, x7
 134:	str	x1, [x7, #8]
 138:	mov	w11, w13
 13c:	lsl	x10, x6, #2
 140:	mov	x3, #0x0                   	// #0
 144:	b	f0 <initializeValueProfRuntimeRecord+0x70>
 148:	ret

000000000000014c <getNextNValueData>:
 14c:	mov	w5, w0
 150:	mov	x0, x3
 154:	cbz	x3, 190 <getNextNValueData+0x44>
 158:	cbz	w4, 18c <getNextNValueData+0x40>
 15c:	mov	x1, x2
 160:	sub	w4, w4, #0x1
 164:	add	x2, x2, #0x10
 168:	add	x3, x2, x4, lsl #4
 16c:	ldr	x2, [x0]
 170:	str	x2, [x1]
 174:	ldr	x2, [x0, #8]
 178:	str	x2, [x1, #8]
 17c:	ldr	x0, [x0, #16]
 180:	add	x1, x1, #0x10
 184:	cmp	x1, x3
 188:	b.ne	16c <getNextNValueData+0x20>  // b.any
 18c:	ret
 190:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 194:	add	x0, x0, #0x0
 198:	add	x0, x0, w5, uxtw #3
 19c:	ldr	x0, [x0, #8]
 1a0:	ldr	x0, [x0, w1, uxtw #3]
 1a4:	b	158 <getNextNValueData+0xc>

00000000000001a8 <getNumValueDataForSiteWrapper>:
 1a8:	stp	x29, x30, [sp, #-16]!
 1ac:	mov	x29, sp
 1b0:	mov	w2, w1
 1b4:	mov	w1, w0
 1b8:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 1bc:	add	x0, x0, #0x0
 1c0:	bl	70 <getNumValueDataForSiteRT>
 1c4:	ldp	x29, x30, [sp], #16
 1c8:	ret

00000000000001cc <allocateValueProfileCounters>:
 1cc:	stp	x29, x30, [sp, #-32]!
 1d0:	mov	x29, sp
 1d4:	str	x19, [sp, #16]
 1d8:	mov	x19, x0
 1dc:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 1e0:	str	wzr, [x0]
 1e4:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 1e8:	ldr	w0, [x0]
 1ec:	cbnz	w0, 1fc <allocateValueProfileCounters+0x30>
 1f0:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 1f4:	mov	w1, #0xff                  	// #255
 1f8:	str	w1, [x0]
 1fc:	ldrh	w2, [x19, #46]
 200:	ldrh	w0, [x19, #44]
 204:	mov	x1, #0x8                   	// #8
 208:	add	x0, x2, x0
 20c:	bl	0 <calloc>
 210:	mov	x1, x0
 214:	cbz	x0, 258 <allocateValueProfileCounters+0x8c>
 218:	add	x19, x19, #0x20
 21c:	ldxr	x0, [x19]
 220:	cbnz	x0, 22c <allocateValueProfileCounters+0x60>
 224:	stlxr	w2, x1, [x19]
 228:	cbnz	w2, 21c <allocateValueProfileCounters+0x50>
 22c:	cmp	x0, #0x0
 230:	dmb	ish
 234:	mov	w0, #0x1                   	// #1
 238:	b.ne	248 <allocateValueProfileCounters+0x7c>  // b.any
 23c:	ldr	x19, [sp, #16]
 240:	ldp	x29, x30, [sp], #32
 244:	ret
 248:	mov	x0, x1
 24c:	bl	0 <free>
 250:	mov	w0, #0x0                   	// #0
 254:	b	23c <allocateValueProfileCounters+0x70>
 258:	mov	w0, #0x0                   	// #0
 25c:	b	23c <allocateValueProfileCounters+0x70>

0000000000000260 <allocateOneNode>:
 260:	stp	x29, x30, [sp, #-16]!
 264:	mov	x29, sp
 268:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 26c:	ldr	w0, [x0]
 270:	cbz	w0, 2c8 <allocateOneNode+0x68>
 274:	adrp	x0, 0 <CurrentVNode>
 278:	ldr	x0, [x0]
 27c:	add	x0, x0, #0x18
 280:	adrp	x1, 0 <EndVNode>
 284:	ldr	x1, [x1]
 288:	cmp	x1, x0
 28c:	b.cc	2d8 <allocateOneNode+0x78>  // b.lo, b.ul, b.last
 290:	adrp	x1, 0 <CurrentVNode>
 294:	add	x1, x1, #0x0
 298:	ldxr	x0, [x1]
 29c:	add	x2, x0, #0x18
 2a0:	stlxr	w3, x2, [x1]
 2a4:	cbnz	w3, 298 <allocateOneNode+0x38>
 2a8:	dmb	ish
 2ac:	add	x1, x0, #0x18
 2b0:	adrp	x2, 0 <EndVNode>
 2b4:	ldr	x2, [x2]
 2b8:	cmp	x2, x1
 2bc:	csel	x0, x0, xzr, cs  // cs = hs, nlast
 2c0:	ldp	x29, x30, [sp], #16
 2c4:	ret
 2c8:	mov	x1, #0x18                  	// #24
 2cc:	mov	x0, #0x1                   	// #1
 2d0:	bl	0 <calloc>
 2d4:	b	2c0 <allocateOneNode+0x60>
 2d8:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 2dc:	add	x0, x0, #0x0
 2e0:	ldr	w1, [x0, #36]
 2e4:	add	w2, w1, #0x1
 2e8:	str	w2, [x0, #36]
 2ec:	mov	x0, #0x0                   	// #0
 2f0:	cmp	w1, #0x9
 2f4:	b.gt	2c0 <allocateOneNode+0x60>
 2f8:	adrp	x2, 0 <getValueProfRecordHeaderSize>
 2fc:	add	x2, x2, #0x0
 300:	adrp	x1, 0 <getValueProfRecordHeaderSize>
 304:	add	x1, x1, #0x0
 308:	adrp	x0, 0 <stderr>
 30c:	ldr	x0, [x0]
 310:	ldr	x0, [x0]
 314:	bl	0 <fprintf>
 318:	mov	x0, #0x0                   	// #0
 31c:	b	2c0 <allocateOneNode+0x60>

0000000000000320 <getValueProfRecordSize>:
 320:	add	w0, w0, #0xf
 324:	and	w0, w0, #0xfffffff8
 328:	add	w0, w0, w1, lsl #4
 32c:	ret

0000000000000330 <getValueProfRecordValueData>:
 330:	ldr	w1, [x0, #4]
 334:	add	w1, w1, #0xf
 338:	and	x1, x1, #0xfffffff8
 33c:	add	x0, x0, x1
 340:	ret

0000000000000344 <getValueProfRecordNumValueData>:
 344:	mov	x2, x0
 348:	ldr	w0, [x0, #4]
 34c:	cbz	w0, 374 <getValueProfRecordNumValueData+0x30>
 350:	add	x1, x2, #0x8
 354:	add	x2, x2, #0x9
 358:	sub	w0, w0, #0x1
 35c:	add	x2, x2, x0
 360:	mov	w0, #0x0                   	// #0
 364:	ldrb	w3, [x1], #1
 368:	add	w0, w0, w3
 36c:	cmp	x1, x2
 370:	b.ne	364 <getValueProfRecordNumValueData+0x20>  // b.any
 374:	ret

0000000000000378 <getValueProfRecordNext>:
 378:	stp	x29, x30, [sp, #-32]!
 37c:	mov	x29, sp
 380:	str	x19, [sp, #16]
 384:	mov	x19, x0
 388:	bl	344 <getValueProfRecordNumValueData>
 38c:	ldr	w1, [x19, #4]
 390:	add	w1, w1, #0xf
 394:	and	w1, w1, #0xfffffff8
 398:	add	w0, w1, w0, lsl #4
 39c:	add	x0, x19, w0, uxtw
 3a0:	ldr	x19, [sp, #16]
 3a4:	ldp	x29, x30, [sp], #32
 3a8:	ret

00000000000003ac <getValueProfDataSize>:
 3ac:	stp	x29, x30, [sp, #-64]!
 3b0:	mov	x29, sp
 3b4:	stp	x19, x20, [sp, #16]
 3b8:	stp	x21, x22, [sp, #32]
 3bc:	str	x23, [sp, #48]
 3c0:	mov	x21, x0
 3c4:	ldr	x23, [x0]
 3c8:	mov	w22, #0x8                   	// #8
 3cc:	mov	w20, #0x0                   	// #0
 3d0:	ldr	x2, [x21, #16]
 3d4:	mov	w1, w20
 3d8:	mov	x0, x23
 3dc:	blr	x2
 3e0:	mov	w19, w0
 3e4:	cbz	w0, 408 <getValueProfDataSize+0x5c>
 3e8:	ldr	x2, [x21, #24]
 3ec:	mov	w1, w20
 3f0:	mov	x0, x23
 3f4:	blr	x2
 3f8:	add	w19, w19, #0xf
 3fc:	and	w19, w19, #0xfffffff8
 400:	add	w19, w19, w22
 404:	add	w22, w19, w0, lsl #4
 408:	add	w20, w20, #0x1
 40c:	cmp	w20, #0x2
 410:	b.ne	3d0 <getValueProfDataSize+0x24>  // b.any
 414:	mov	w0, w22
 418:	ldp	x19, x20, [sp, #16]
 41c:	ldp	x21, x22, [sp, #32]
 420:	ldr	x23, [sp, #48]
 424:	ldp	x29, x30, [sp], #64
 428:	ret

000000000000042c <getValueProfDataSizeWrapper>:
 42c:	stp	x29, x30, [sp, #-16]!
 430:	mov	x29, sp
 434:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 438:	add	x0, x0, #0x0
 43c:	bl	3ac <getValueProfDataSize>
 440:	ldp	x29, x30, [sp], #16
 444:	ret

0000000000000448 <serializeValueProfRecordFrom>:
 448:	stp	x29, x30, [sp, #-80]!
 44c:	mov	x29, sp
 450:	stp	x21, x22, [sp, #32]
 454:	stp	x23, x24, [sp, #48]
 458:	stp	x25, x26, [sp, #64]
 45c:	mov	x25, x0
 460:	mov	x22, x1
 464:	mov	w23, w2
 468:	mov	w26, w3
 46c:	ldr	x24, [x1]
 470:	str	w2, [x0]
 474:	str	w3, [x0, #4]
 478:	bl	330 <getValueProfRecordValueData>
 47c:	cbz	w26, 4e4 <serializeValueProfRecordFrom+0x9c>
 480:	stp	x19, x20, [sp, #16]
 484:	mov	x21, x0
 488:	sub	w26, w26, #0x1
 48c:	mov	x20, #0x0                   	// #0
 490:	add	x25, x25, #0x8
 494:	ldr	x3, [x22, #32]
 498:	mov	w2, w20
 49c:	mov	w1, w23
 4a0:	mov	x0, x24
 4a4:	blr	x3
 4a8:	mov	w19, w0
 4ac:	strb	w0, [x25, x20]
 4b0:	ldr	x4, [x22, #48]
 4b4:	mov	w3, w20
 4b8:	mov	w2, w23
 4bc:	mov	x1, x21
 4c0:	mov	x0, x24
 4c4:	blr	x4
 4c8:	ubfiz	x19, x19, #4, #32
 4cc:	add	x21, x21, x19
 4d0:	mov	x0, x20
 4d4:	cmp	x0, x26
 4d8:	add	x20, x20, #0x1
 4dc:	b.ne	494 <serializeValueProfRecordFrom+0x4c>  // b.any
 4e0:	ldp	x19, x20, [sp, #16]
 4e4:	ldp	x21, x22, [sp, #32]
 4e8:	ldp	x23, x24, [sp, #48]
 4ec:	ldp	x25, x26, [sp, #64]
 4f0:	ldp	x29, x30, [sp], #80
 4f4:	ret

00000000000004f8 <serializeValueProfDataFrom>:
 4f8:	stp	x29, x30, [sp, #-48]!
 4fc:	mov	x29, sp
 500:	stp	x19, x20, [sp, #16]
 504:	stp	x21, x22, [sp, #32]
 508:	mov	x22, x0
 50c:	cbz	x1, 538 <serializeValueProfDataFrom+0x40>
 510:	mov	x19, x1
 514:	ldr	w20, [x1]
 518:	str	w20, [x19]
 51c:	ldr	x1, [x22, #8]
 520:	ldr	x0, [x22]
 524:	blr	x1
 528:	str	w0, [x19, #4]
 52c:	add	x21, x19, #0x8
 530:	mov	w20, #0x0                   	// #0
 534:	b	560 <serializeValueProfDataFrom+0x68>
 538:	bl	3ac <getValueProfDataSize>
 53c:	mov	w20, w0
 540:	ldr	x1, [x22, #56]
 544:	mov	w0, w0
 548:	blr	x1
 54c:	mov	x19, x0
 550:	b	518 <serializeValueProfDataFrom+0x20>
 554:	add	w20, w20, #0x1
 558:	cmp	w20, #0x2
 55c:	b.eq	598 <serializeValueProfDataFrom+0xa0>  // b.none
 560:	ldr	x2, [x22, #16]
 564:	mov	w1, w20
 568:	ldr	x0, [x22]
 56c:	blr	x2
 570:	mov	w3, w0
 574:	cbz	w0, 554 <serializeValueProfDataFrom+0x5c>
 578:	mov	w2, w20
 57c:	mov	x1, x22
 580:	mov	x0, x21
 584:	bl	448 <serializeValueProfRecordFrom>
 588:	mov	x0, x21
 58c:	bl	378 <getValueProfRecordNext>
 590:	mov	x21, x0
 594:	b	554 <serializeValueProfDataFrom+0x5c>
 598:	mov	x0, x19
 59c:	ldp	x19, x20, [sp, #16]
 5a0:	ldp	x21, x22, [sp, #32]
 5a4:	ldp	x29, x30, [sp], #48
 5a8:	ret

00000000000005ac <lprofSetupValueProfiler>:
 5ac:	stp	x29, x30, [sp, #-16]!
 5b0:	mov	x29, sp
 5b4:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 5b8:	add	x0, x0, #0x0
 5bc:	bl	0 <getenv>
 5c0:	cbz	x0, 5cc <lprofSetupValueProfiler+0x20>
 5c4:	ldrb	w1, [x0]
 5c8:	cbnz	w1, 5f0 <lprofSetupValueProfiler+0x44>
 5cc:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 5d0:	ldr	w0, [x0]
 5d4:	cmp	w0, #0xff
 5d8:	b.ls	5e8 <lprofSetupValueProfiler+0x3c>  // b.plast
 5dc:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 5e0:	mov	w1, #0xff                  	// #255
 5e4:	str	w1, [x0]
 5e8:	ldp	x29, x30, [sp], #16
 5ec:	ret
 5f0:	mov	w2, #0xa                   	// #10
 5f4:	mov	x1, #0x0                   	// #0
 5f8:	bl	0 <strtol>
 5fc:	adrp	x1, 0 <getValueProfRecordHeaderSize>
 600:	str	w0, [x1]
 604:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 608:	mov	w1, #0x1                   	// #1
 60c:	str	w1, [x0]
 610:	b	5cc <lprofSetupValueProfiler+0x20>

0000000000000614 <lprofSetMaxValsPerSite>:
 614:	adrp	x1, 0 <getValueProfRecordHeaderSize>
 618:	str	w0, [x1]
 61c:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 620:	mov	w1, #0x1                   	// #1
 624:	str	w1, [x0]
 628:	ret

000000000000062c <__llvm_profile_set_num_value_sites>:
 62c:	add	x1, x0, w1, uxtw #1
 630:	strh	w2, [x1, #44]
 634:	ret

0000000000000638 <__llvm_profile_iterate_data>:
 638:	add	x0, x0, #0x30
 63c:	ret

0000000000000640 <__llvm_get_function_addr>:
 640:	ldr	x0, [x0, #24]
 644:	ret

0000000000000648 <__llvm_profile_instrument_target>:
 648:	cbz	x1, 7e8 <__llvm_profile_instrument_target+0x1a0>
 64c:	stp	x29, x30, [sp, #-64]!
 650:	mov	x29, sp
 654:	stp	x19, x20, [sp, #16]
 658:	stp	x21, x22, [sp, #32]
 65c:	mov	x20, x0
 660:	mov	x19, x1
 664:	mov	w21, w2
 668:	ldr	x0, [x1, #32]
 66c:	cbz	x0, 698 <__llvm_profile_instrument_target+0x50>
 670:	str	x23, [sp, #48]
 674:	mov	w23, w21
 678:	ldr	x22, [x19, #32]
 67c:	add	x21, x22, w21, uxtw #3
 680:	ldr	x19, [x22, x23, lsl #3]
 684:	cbz	x19, 72c <__llvm_profile_instrument_target+0xe4>
 688:	mov	x0, #0x0                   	// #0
 68c:	mov	w1, #0x0                   	// #0
 690:	mov	x2, #0xffffffffffffffff    	// #-1
 694:	b	6ac <__llvm_profile_instrument_target+0x64>
 698:	mov	x0, x1
 69c:	bl	1cc <allocateValueProfileCounters>
 6a0:	cbnz	w0, 670 <__llvm_profile_instrument_target+0x28>
 6a4:	b	71c <__llvm_profile_instrument_target+0xd4>
 6a8:	mov	x19, x3
 6ac:	ldr	x3, [x19]
 6b0:	cmp	x20, x3
 6b4:	b.eq	70c <__llvm_profile_instrument_target+0xc4>  // b.none
 6b8:	ldr	x3, [x19, #8]
 6bc:	cmp	x3, x2
 6c0:	csel	x4, x2, x3, cs  // cs = hs, nlast
 6c4:	mov	x2, x4
 6c8:	csel	x0, x0, x19, cs  // cs = hs, nlast
 6cc:	ldr	x3, [x19, #16]
 6d0:	add	w1, w1, #0x1
 6d4:	and	w1, w1, #0xff
 6d8:	cbnz	x3, 6a8 <__llvm_profile_instrument_target+0x60>
 6dc:	adrp	x2, 0 <getValueProfRecordHeaderSize>
 6e0:	ldr	w2, [x2]
 6e4:	cmp	w1, w2
 6e8:	b.cc	748 <__llvm_profile_instrument_target+0x100>  // b.lo, b.ul, b.last
 6ec:	ldr	x1, [x0, #8]
 6f0:	cmp	x1, #0x1
 6f4:	b.hi	738 <__llvm_profile_instrument_target+0xf0>  // b.pmore
 6f8:	str	x20, [x0]
 6fc:	mov	x1, #0x1                   	// #1
 700:	str	x1, [x0, #8]
 704:	ldr	x23, [sp, #48]
 708:	b	71c <__llvm_profile_instrument_target+0xd4>
 70c:	ldr	x0, [x19, #8]
 710:	add	x0, x0, #0x1
 714:	str	x0, [x19, #8]
 718:	ldr	x23, [sp, #48]
 71c:	ldp	x19, x20, [sp, #16]
 720:	ldp	x21, x22, [sp, #32]
 724:	ldp	x29, x30, [sp], #64
 728:	ret
 72c:	mov	x0, x19
 730:	mov	w1, #0x0                   	// #0
 734:	b	6dc <__llvm_profile_instrument_target+0x94>
 738:	sub	x1, x1, #0x1
 73c:	str	x1, [x0, #8]
 740:	ldr	x23, [sp, #48]
 744:	b	71c <__llvm_profile_instrument_target+0xd4>
 748:	bl	260 <allocateOneNode>
 74c:	cbz	x0, 7e0 <__llvm_profile_instrument_target+0x198>
 750:	str	x20, [x0]
 754:	ldr	x1, [x0, #8]
 758:	add	x1, x1, #0x1
 75c:	str	x1, [x0, #8]
 760:	ldr	x1, [x22, x23, lsl #3]
 764:	cbz	x1, 788 <__llvm_profile_instrument_target+0x140>
 768:	cbz	x19, 774 <__llvm_profile_instrument_target+0x12c>
 76c:	ldr	x1, [x19, #16]
 770:	cbz	x1, 7b0 <__llvm_profile_instrument_target+0x168>
 774:	adrp	x1, 0 <getValueProfRecordHeaderSize>
 778:	ldr	w1, [x1]
 77c:	cbz	w1, 7d4 <__llvm_profile_instrument_target+0x18c>
 780:	ldr	x23, [sp, #48]
 784:	b	71c <__llvm_profile_instrument_target+0xd4>
 788:	ldxr	x1, [x21]
 78c:	cbnz	x1, 798 <__llvm_profile_instrument_target+0x150>
 790:	stlxr	w2, x0, [x21]
 794:	cbnz	w2, 788 <__llvm_profile_instrument_target+0x140>
 798:	cmp	x1, #0x0
 79c:	dmb	ish
 7a0:	cset	w1, eq  // eq = none
 7a4:	cbz	w1, 774 <__llvm_profile_instrument_target+0x12c>
 7a8:	ldr	x23, [sp, #48]
 7ac:	b	71c <__llvm_profile_instrument_target+0xd4>
 7b0:	add	x19, x19, #0x10
 7b4:	ldxr	x1, [x19]
 7b8:	cbnz	x1, 7c4 <__llvm_profile_instrument_target+0x17c>
 7bc:	stlxr	w2, x0, [x19]
 7c0:	cbnz	w2, 7b4 <__llvm_profile_instrument_target+0x16c>
 7c4:	cmp	x1, #0x0
 7c8:	dmb	ish
 7cc:	cset	w1, eq  // eq = none
 7d0:	b	7a4 <__llvm_profile_instrument_target+0x15c>
 7d4:	bl	0 <free>
 7d8:	ldr	x23, [sp, #48]
 7dc:	b	71c <__llvm_profile_instrument_target+0xd4>
 7e0:	ldr	x23, [sp, #48]
 7e4:	b	71c <__llvm_profile_instrument_target+0xd4>
 7e8:	ret

00000000000007ec <__llvm_profile_instrument_target_value>:
 7ec:	cmp	x3, #0x0
 7f0:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 7f4:	b.eq	994 <__llvm_profile_instrument_target_value+0x1a8>  // b.none
 7f8:	stp	x29, x30, [sp, #-64]!
 7fc:	mov	x29, sp
 800:	stp	x19, x20, [sp, #16]
 804:	stp	x21, x22, [sp, #32]
 808:	mov	x20, x0
 80c:	mov	x19, x1
 810:	mov	w22, w2
 814:	mov	x21, x3
 818:	ldr	x0, [x1, #32]
 81c:	cbz	x0, 848 <__llvm_profile_instrument_target_value+0x5c>
 820:	stp	x23, x24, [sp, #48]
 824:	mov	w24, w22
 828:	ldr	x23, [x19, #32]
 82c:	add	x22, x23, w22, uxtw #3
 830:	ldr	x19, [x23, x24, lsl #3]
 834:	cbz	x19, 8d8 <__llvm_profile_instrument_target_value+0xec>
 838:	mov	x3, #0x0                   	// #0
 83c:	mov	w1, #0x0                   	// #0
 840:	mov	x2, #0xffffffffffffffff    	// #-1
 844:	b	85c <__llvm_profile_instrument_target_value+0x70>
 848:	mov	x0, x1
 84c:	bl	1cc <allocateValueProfileCounters>
 850:	cbnz	w0, 820 <__llvm_profile_instrument_target_value+0x34>
 854:	b	8c8 <__llvm_profile_instrument_target_value+0xdc>
 858:	mov	x19, x0
 85c:	ldr	x0, [x19]
 860:	cmp	x20, x0
 864:	b.eq	8b8 <__llvm_profile_instrument_target_value+0xcc>  // b.none
 868:	ldr	x4, [x19, #8]
 86c:	cmp	x4, x2
 870:	csel	x0, x2, x4, cs  // cs = hs, nlast
 874:	mov	x2, x0
 878:	csel	x3, x3, x19, cs  // cs = hs, nlast
 87c:	ldr	x0, [x19, #16]
 880:	add	w1, w1, #0x1
 884:	and	w1, w1, #0xff
 888:	cbnz	x0, 858 <__llvm_profile_instrument_target_value+0x6c>
 88c:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 890:	ldr	w0, [x0]
 894:	cmp	w1, w0
 898:	b.cc	8f4 <__llvm_profile_instrument_target_value+0x108>  // b.lo, b.ul, b.last
 89c:	ldr	x0, [x3, #8]
 8a0:	cmp	x21, x0
 8a4:	b.cc	8e4 <__llvm_profile_instrument_target_value+0xf8>  // b.lo, b.ul, b.last
 8a8:	str	x20, [x3]
 8ac:	str	x21, [x3, #8]
 8b0:	ldp	x23, x24, [sp, #48]
 8b4:	b	8c8 <__llvm_profile_instrument_target_value+0xdc>
 8b8:	ldr	x0, [x19, #8]
 8bc:	add	x21, x0, x21
 8c0:	str	x21, [x19, #8]
 8c4:	ldp	x23, x24, [sp, #48]
 8c8:	ldp	x19, x20, [sp, #16]
 8cc:	ldp	x21, x22, [sp, #32]
 8d0:	ldp	x29, x30, [sp], #64
 8d4:	ret
 8d8:	mov	x3, x19
 8dc:	mov	w1, #0x0                   	// #0
 8e0:	b	88c <__llvm_profile_instrument_target_value+0xa0>
 8e4:	sub	x0, x0, x21
 8e8:	str	x0, [x3, #8]
 8ec:	ldp	x23, x24, [sp, #48]
 8f0:	b	8c8 <__llvm_profile_instrument_target_value+0xdc>
 8f4:	bl	260 <allocateOneNode>
 8f8:	cbz	x0, 98c <__llvm_profile_instrument_target_value+0x1a0>
 8fc:	str	x20, [x0]
 900:	ldr	x1, [x0, #8]
 904:	add	x21, x1, x21
 908:	str	x21, [x0, #8]
 90c:	ldr	x1, [x23, x24, lsl #3]
 910:	cbz	x1, 934 <__llvm_profile_instrument_target_value+0x148>
 914:	cbz	x19, 920 <__llvm_profile_instrument_target_value+0x134>
 918:	ldr	x1, [x19, #16]
 91c:	cbz	x1, 95c <__llvm_profile_instrument_target_value+0x170>
 920:	adrp	x1, 0 <getValueProfRecordHeaderSize>
 924:	ldr	w1, [x1]
 928:	cbz	w1, 980 <__llvm_profile_instrument_target_value+0x194>
 92c:	ldp	x23, x24, [sp, #48]
 930:	b	8c8 <__llvm_profile_instrument_target_value+0xdc>
 934:	ldxr	x1, [x22]
 938:	cbnz	x1, 944 <__llvm_profile_instrument_target_value+0x158>
 93c:	stlxr	w2, x0, [x22]
 940:	cbnz	w2, 934 <__llvm_profile_instrument_target_value+0x148>
 944:	cmp	x1, #0x0
 948:	dmb	ish
 94c:	cset	w1, eq  // eq = none
 950:	cbz	w1, 920 <__llvm_profile_instrument_target_value+0x134>
 954:	ldp	x23, x24, [sp, #48]
 958:	b	8c8 <__llvm_profile_instrument_target_value+0xdc>
 95c:	add	x19, x19, #0x10
 960:	ldxr	x1, [x19]
 964:	cbnz	x1, 970 <__llvm_profile_instrument_target_value+0x184>
 968:	stlxr	w2, x0, [x19]
 96c:	cbnz	w2, 960 <__llvm_profile_instrument_target_value+0x174>
 970:	cmp	x1, #0x0
 974:	dmb	ish
 978:	cset	w1, eq  // eq = none
 97c:	b	950 <__llvm_profile_instrument_target_value+0x164>
 980:	bl	0 <free>
 984:	ldp	x23, x24, [sp, #48]
 988:	b	8c8 <__llvm_profile_instrument_target_value+0xdc>
 98c:	ldp	x23, x24, [sp, #48]
 990:	b	8c8 <__llvm_profile_instrument_target_value+0xdc>
 994:	ret

0000000000000998 <__llvm_profile_instrument_range>:
 998:	stp	x29, x30, [sp, #-16]!
 99c:	mov	x29, sp
 9a0:	mov	x6, #0x8000000000000000    	// #-9223372036854775808
 9a4:	cmp	x5, x6
 9a8:	ccmp	x0, x5, #0x1, ne  // ne = any
 9ac:	b.lt	9c0 <__llvm_profile_instrument_range+0x28>  // b.tstop
 9b0:	mov	x0, x5
 9b4:	bl	648 <__llvm_profile_instrument_target>
 9b8:	ldp	x29, x30, [sp], #16
 9bc:	ret
 9c0:	cmp	x0, x3
 9c4:	ccmp	x0, x4, #0x0, ge  // ge = tcont
 9c8:	csinc	x0, x0, x4, le
 9cc:	b	9b4 <__llvm_profile_instrument_range+0x1c>

00000000000009d0 <lprofGetVPDataReader>:
 9d0:	adrp	x0, 0 <getValueProfRecordHeaderSize>
 9d4:	add	x0, x0, #0x0
 9d8:	add	x0, x0, #0x40
 9dc:	ret

InstrProfilingBuffer.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__llvm_profile_is_continuous_mode_enabled>:
   0:	adrp	x0, 0 <__llvm_profile_is_continuous_mode_enabled>
   4:	ldr	w0, [x0]
   8:	ret

000000000000000c <__llvm_profile_enable_continuous_mode>:
   c:	adrp	x0, 0 <__llvm_profile_is_continuous_mode_enabled>
  10:	mov	w1, #0x1                   	// #1
  14:	str	w1, [x0]
  18:	ret

000000000000001c <__llvm_profile_get_data_size>:
  1c:	add	x1, x1, #0x2f
  20:	sub	x0, x1, x0
  24:	mov	x1, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
  28:	movk	x1, #0xaaab
  2c:	umulh	x0, x0, x1
  30:	lsr	x0, x0, #5
  34:	ret

0000000000000038 <__llvm_profile_get_padding_sizes_for_counters>:
  38:	stp	x29, x30, [sp, #-64]!
  3c:	mov	x29, sp
  40:	stp	x19, x20, [sp, #16]
  44:	stp	x21, x22, [sp, #32]
  48:	stp	x23, x24, [sp, #48]
  4c:	mov	x19, x0
  50:	mov	x21, x2
  54:	mov	x23, x3
  58:	mov	x22, x4
  5c:	mov	x20, x5
  60:	adrp	x0, 0 <__llvm_profile_is_continuous_mode_enabled>
  64:	ldr	w0, [x0]
  68:	cbz	w0, e4 <__llvm_profile_get_padding_sizes_for_counters+0xac>
  6c:	mov	x24, x1
  70:	bl	0 <getpagesize>
  74:	lsl	x2, x24, #3
  78:	mov	w6, w0
  7c:	add	x19, x19, x19, lsl #1
  80:	lsl	x19, x19, #4
  84:	add	x19, x19, #0x50
  88:	udiv	x0, x19, x6
  8c:	msub	x19, x0, x6, x19
  90:	sub	x0, x6, x19
  94:	cmp	x19, #0x0
  98:	csel	x19, x0, x19, ne  // ne = any
  9c:	str	x19, [x23]
  a0:	udiv	x1, x2, x6
  a4:	msub	x1, x1, x6, x2
  a8:	sub	x0, x6, x1
  ac:	cmp	x1, #0x0
  b0:	csel	x1, x0, x1, ne  // ne = any
  b4:	str	x1, [x22]
  b8:	udiv	x0, x21, x6
  bc:	msub	x2, x0, x6, x21
  c0:	sub	x6, x6, x2
  c4:	cmp	x2, #0x0
  c8:	csel	x2, x6, x2, ne  // ne = any
  cc:	str	x2, [x20]
  d0:	ldp	x19, x20, [sp, #16]
  d4:	ldp	x21, x22, [sp, #32]
  d8:	ldp	x23, x24, [sp, #48]
  dc:	ldp	x29, x30, [sp], #64
  e0:	ret
  e4:	str	xzr, [x3]
  e8:	str	xzr, [x4]
  ec:	mov	x0, x2
  f0:	bl	0 <__llvm_profile_get_num_padding_bytes>
  f4:	and	x0, x0, #0xff
  f8:	str	x0, [x20]
  fc:	b	d0 <__llvm_profile_get_padding_sizes_for_counters+0x98>

0000000000000100 <__llvm_profile_get_size_for_buffer_internal>:
 100:	stp	x29, x30, [sp, #-80]!
 104:	mov	x29, sp
 108:	stp	x19, x20, [sp, #16]
 10c:	str	x21, [sp, #32]
 110:	sub	x20, x5, x4
 114:	add	x1, x1, #0x2f
 118:	sub	x1, x1, x0
 11c:	mov	x19, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
 120:	movk	x19, #0xaaab
 124:	umulh	x19, x1, x19
 128:	lsr	x19, x19, #5
 12c:	sub	x21, x3, x2
 130:	add	x5, sp, #0x38
 134:	add	x4, sp, #0x40
 138:	add	x3, sp, #0x48
 13c:	mov	x2, x20
 140:	asr	x1, x21, #3
 144:	mov	x0, x19
 148:	bl	38 <__llvm_profile_get_padding_sizes_for_counters>
 14c:	ldr	x0, [sp, #72]
 150:	ldr	x1, [sp, #64]
 154:	add	x0, x0, x1
 158:	ldr	x1, [sp, #56]
 15c:	add	x1, x1, #0x50
 160:	add	x0, x0, x1
 164:	add	x19, x19, x19, lsl #1
 168:	add	x19, x20, x19, lsl #4
 16c:	add	x0, x0, x19
 170:	add	x0, x0, x21
 174:	ldp	x19, x20, [sp, #16]
 178:	ldr	x21, [sp, #32]
 17c:	ldp	x29, x30, [sp], #80
 180:	ret

0000000000000184 <__llvm_profile_get_size_for_buffer>:
 184:	stp	x29, x30, [sp, #-64]!
 188:	mov	x29, sp
 18c:	stp	x19, x20, [sp, #16]
 190:	stp	x21, x22, [sp, #32]
 194:	str	x23, [sp, #48]
 198:	bl	0 <__llvm_profile_begin_data>
 19c:	mov	x19, x0
 1a0:	bl	0 <__llvm_profile_end_data>
 1a4:	mov	x20, x0
 1a8:	bl	0 <__llvm_profile_begin_counters>
 1ac:	mov	x21, x0
 1b0:	bl	0 <__llvm_profile_end_counters>
 1b4:	mov	x22, x0
 1b8:	bl	0 <__llvm_profile_begin_names>
 1bc:	mov	x23, x0
 1c0:	bl	0 <__llvm_profile_end_names>
 1c4:	mov	x5, x0
 1c8:	mov	x4, x23
 1cc:	mov	x3, x22
 1d0:	mov	x2, x21
 1d4:	mov	x1, x20
 1d8:	mov	x0, x19
 1dc:	bl	100 <__llvm_profile_get_size_for_buffer_internal>
 1e0:	ldp	x19, x20, [sp, #16]
 1e4:	ldp	x21, x22, [sp, #32]
 1e8:	ldr	x23, [sp, #48]
 1ec:	ldp	x29, x30, [sp], #64
 1f0:	ret

00000000000001f4 <initBufferWriter>:
 1f4:	adrp	x2, 0 <lprofBufferWriter>
 1f8:	ldr	x2, [x2]
 1fc:	str	x2, [x0]
 200:	str	x1, [x0, #8]
 204:	ret

0000000000000208 <__llvm_profile_write_buffer>:
 208:	stp	x29, x30, [sp, #-32]!
 20c:	mov	x29, sp
 210:	adrp	x1, 0 <lprofBufferWriter>
 214:	ldr	x1, [x1]
 218:	str	x1, [sp, #16]
 21c:	str	x0, [sp, #24]
 220:	mov	w2, #0x0                   	// #0
 224:	mov	x1, #0x0                   	// #0
 228:	add	x0, sp, #0x10
 22c:	bl	0 <lprofWriteData>
 230:	ldp	x29, x30, [sp], #32
 234:	ret

0000000000000238 <__llvm_profile_write_buffer_internal>:
 238:	sub	sp, sp, #0x30
 23c:	stp	x29, x30, [sp, #16]
 240:	add	x29, sp, #0x10
 244:	adrp	x8, 0 <lprofBufferWriter>
 248:	ldr	x8, [x8]
 24c:	str	x8, [sp, #32]
 250:	str	x0, [sp, #40]
 254:	str	wzr, [sp]
 258:	mov	x7, x6
 25c:	mov	x6, x5
 260:	mov	x5, #0x0                   	// #0
 264:	add	x0, sp, #0x20
 268:	bl	0 <lprofWriteDataImpl>
 26c:	ldp	x29, x30, [sp, #16]
 270:	add	sp, sp, #0x30
 274:	ret

InstrProfilingFile.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getPNSStr>:
       0:	cmp	w0, #0x3
       4:	b.eq	48 <getPNSStr+0x48>  // b.none
       8:	cmp	w0, #0x3
       c:	b.hi	2c <getPNSStr+0x2c>  // b.pmore
      10:	cmp	w0, #0x1
      14:	b.eq	54 <getPNSStr+0x54>  // b.none
      18:	cmp	w0, #0x2
      1c:	b.ne	60 <getPNSStr+0x60>  // b.any
      20:	adrp	x0, 0 <getPNSStr>
      24:	add	x0, x0, #0x0
      28:	ret
      2c:	adrp	x2, 0 <getPNSStr>
      30:	add	x2, x2, #0x0
      34:	adrp	x1, 0 <getPNSStr>
      38:	add	x1, x1, #0x0
      3c:	cmp	w0, #0x4
      40:	csel	x0, x1, x2, ne  // ne = any
      44:	b	28 <getPNSStr+0x28>
      48:	adrp	x0, 0 <getPNSStr>
      4c:	add	x0, x0, #0x0
      50:	b	28 <getPNSStr+0x28>
      54:	adrp	x0, 0 <getPNSStr>
      58:	add	x0, x0, #0x0
      5c:	b	28 <getPNSStr+0x28>
      60:	adrp	x0, 0 <getPNSStr>
      64:	add	x0, x0, #0x0
      68:	b	28 <getPNSStr+0x28>

000000000000006c <doMerging>:
      6c:	adrp	x0, 0 <getPNSStr>
      70:	add	x1, x0, #0x0
      74:	ldr	w0, [x0]
      78:	ldr	w1, [x1, #184]
      7c:	orr	w0, w0, w1
      80:	cmp	w0, #0x0
      84:	cset	w0, ne  // ne = any
      88:	ret

000000000000008c <getMergePoolSize>:
      8c:	ldr	w5, [x1]
      90:	ldrb	w3, [x0, w5, uxtw]
      94:	cmp	w3, #0x6d
      98:	b.eq	d8 <getMergePoolSize+0x4c>  // b.none
      9c:	add	w5, w5, #0x1
      a0:	mov	w2, #0x0                   	// #0
      a4:	sub	w4, w3, #0x30
      a8:	and	w4, w4, #0xff
      ac:	cmp	w4, #0x9
      b0:	b.hi	ec <getMergePoolSize+0x60>  // b.pmore
      b4:	add	w2, w2, w2, lsl #2
      b8:	add	w2, w3, w2, lsl #1
      bc:	sub	w2, w2, #0x30
      c0:	ldrb	w3, [x0, w5, uxtw]
      c4:	add	w4, w5, #0x1
      c8:	cmp	w3, #0x6d
      cc:	b.eq	dc <getMergePoolSize+0x50>  // b.none
      d0:	mov	w5, w4
      d4:	b	a4 <getMergePoolSize+0x18>
      d8:	mov	w2, #0x0                   	// #0
      dc:	str	w5, [x1]
      e0:	cmp	w2, #0x0
      e4:	csinc	w0, w2, wzr, ne  // ne = any
      e8:	ret
      ec:	mov	w0, #0x0                   	// #0
      f0:	b	e8 <getMergePoolSize+0x5c>

00000000000000f4 <assertIsZero>:
      f4:	ldr	w2, [x0]
      f8:	cbnz	w2, 100 <assertIsZero+0xc>
      fc:	ret
     100:	stp	x29, x30, [sp, #-16]!
     104:	mov	x29, sp
     108:	adrp	x1, 0 <getPNSStr>
     10c:	add	x1, x1, #0x0
     110:	adrp	x0, 0 <stderr>
     114:	ldr	x0, [x0]
     118:	ldr	x0, [x0]
     11c:	bl	0 <fprintf>
     120:	ldp	x29, x30, [sp], #16
     124:	ret

0000000000000128 <fileWriter>:
     128:	stp	x29, x30, [sp, #-112]!
     12c:	mov	x29, sp
     130:	stp	x21, x22, [sp, #32]
     134:	ldr	x22, [x0, #8]
     138:	str	xzr, [sp, #104]
     13c:	cbz	w2, 23c <fileWriter+0x114>
     140:	stp	x19, x20, [sp, #16]
     144:	stp	x23, x24, [sp, #48]
     148:	stp	x25, x26, [sp, #64]
     14c:	str	x27, [sp, #80]
     150:	mov	x21, x1
     154:	sub	w2, w2, #0x1
     158:	add	x1, x1, #0x20
     15c:	add	x23, x1, x2, lsl #5
     160:	mov	w27, #0x1                   	// #1
     164:	mov	x26, #0x8                   	// #8
     168:	add	x25, sp, #0x68
     16c:	mov	x24, #0x1                   	// #1
     170:	b	1a8 <fileWriter+0x80>
     174:	ldr	w0, [x21, #24]
     178:	cbnz	w0, 1e4 <fileWriter+0xbc>
     17c:	ldr	x1, [x21, #8]
     180:	ldr	x0, [x21, #16]
     184:	mov	w2, w27
     188:	mul	x1, x1, x0
     18c:	mov	x0, x22
     190:	bl	0 <fseek>
     194:	cmn	w0, #0x1
     198:	b.eq	264 <fileWriter+0x13c>  // b.none
     19c:	add	x21, x21, #0x20
     1a0:	cmp	x21, x23
     1a4:	b.eq	224 <fileWriter+0xfc>  // b.none
     1a8:	ldr	x0, [x21]
     1ac:	cbz	x0, 174 <fileWriter+0x4c>
     1b0:	mov	x3, x22
     1b4:	ldr	x2, [x21, #16]
     1b8:	ldr	x1, [x21, #8]
     1bc:	bl	0 <fwrite>
     1c0:	ldr	x1, [x21, #16]
     1c4:	cmp	x0, x1
     1c8:	b.eq	19c <fileWriter+0x74>  // b.none
     1cc:	mov	w0, #0x1                   	// #1
     1d0:	ldp	x19, x20, [sp, #16]
     1d4:	ldp	x23, x24, [sp, #48]
     1d8:	ldp	x25, x26, [sp, #64]
     1dc:	ldr	x27, [sp, #80]
     1e0:	b	258 <fileWriter+0x130>
     1e4:	ldr	x19, [x21, #8]
     1e8:	ldr	x0, [x21, #16]
     1ec:	mul	x19, x19, x0
     1f0:	cbz	x19, 19c <fileWriter+0x74>
     1f4:	cmp	x19, #0x8
     1f8:	csel	x20, x19, x26, ls  // ls = plast
     1fc:	mov	x3, x22
     200:	mov	x2, x20
     204:	mov	x1, x24
     208:	mov	x0, x25
     20c:	bl	0 <fwrite>
     210:	cmp	x0, x20
     214:	b.ne	244 <fileWriter+0x11c>  // b.any
     218:	subs	x19, x19, x20
     21c:	b.ne	1f4 <fileWriter+0xcc>  // b.any
     220:	b	19c <fileWriter+0x74>
     224:	mov	w0, #0x0                   	// #0
     228:	ldp	x19, x20, [sp, #16]
     22c:	ldp	x23, x24, [sp, #48]
     230:	ldp	x25, x26, [sp, #64]
     234:	ldr	x27, [sp, #80]
     238:	b	258 <fileWriter+0x130>
     23c:	mov	w0, w2
     240:	b	258 <fileWriter+0x130>
     244:	mov	w0, #0x1                   	// #1
     248:	ldp	x19, x20, [sp, #16]
     24c:	ldp	x23, x24, [sp, #48]
     250:	ldp	x25, x26, [sp, #64]
     254:	ldr	x27, [sp, #80]
     258:	ldp	x21, x22, [sp, #32]
     25c:	ldp	x29, x30, [sp], #112
     260:	ret
     264:	mov	w0, #0x1                   	// #1
     268:	ldp	x19, x20, [sp, #16]
     26c:	ldp	x23, x24, [sp, #48]
     270:	ldp	x25, x26, [sp, #64]
     274:	ldr	x27, [sp, #80]
     278:	b	258 <fileWriter+0x130>

000000000000027c <getCurFilenameLength>:
     27c:	adrp	x0, 0 <getPNSStr>
     280:	ldr	x1, [x0]
     284:	cbz	x1, 380 <getCurFilenameLength+0x104>
     288:	ldrb	w2, [x1]
     28c:	mov	w0, #0x0                   	// #0
     290:	cbz	w2, 388 <getCurFilenameLength+0x10c>
     294:	stp	x29, x30, [sp, #-48]!
     298:	mov	x29, sp
     29c:	adrp	x0, 0 <getPNSStr>
     2a0:	ldr	x0, [x0]
     2a4:	cbnz	x0, 320 <getCurFilenameLength+0xa4>
     2a8:	adrp	x0, 0 <getPNSStr>
     2ac:	ldr	w0, [x0]
     2b0:	cbz	w0, 314 <getCurFilenameLength+0x98>
     2b4:	stp	x19, x20, [sp, #16]
     2b8:	stp	x21, x22, [sp, #32]
     2bc:	mov	x0, x1
     2c0:	bl	0 <strlen>
     2c4:	mov	x21, x0
     2c8:	adrp	x20, 0 <getPNSStr>
     2cc:	add	x20, x20, #0x0
     2d0:	add	x0, x20, #0x30
     2d4:	bl	0 <strlen>
     2d8:	mov	x19, x0
     2dc:	add	x0, x20, #0x20
     2e0:	bl	0 <strlen>
     2e4:	sub	x19, x19, #0x2
     2e8:	ldr	w1, [x20, #180]
     2ec:	sub	x2, x0, #0x2
     2f0:	ldr	w0, [x20, #176]
     2f4:	mul	w0, w0, w2
     2f8:	madd	w1, w1, w19, w0
     2fc:	add	w0, w1, w21
     300:	add	w0, w0, #0x18
     304:	ldp	x19, x20, [sp, #16]
     308:	ldp	x21, x22, [sp, #32]
     30c:	ldp	x29, x30, [sp], #48
     310:	ret
     314:	mov	x0, x1
     318:	bl	0 <strlen>
     31c:	b	30c <getCurFilenameLength+0x90>
     320:	stp	x19, x20, [sp, #16]
     324:	stp	x21, x22, [sp, #32]
     328:	mov	x0, x1
     32c:	bl	0 <strlen>
     330:	mov	x22, x0
     334:	adrp	x20, 0 <getPNSStr>
     338:	add	x20, x20, #0x0
     33c:	add	x0, x20, #0x30
     340:	bl	0 <strlen>
     344:	mov	x19, x0
     348:	add	x0, x20, #0x20
     34c:	bl	0 <strlen>
     350:	sub	x19, x19, #0x2
     354:	ldr	w1, [x20, #180]
     358:	sub	x2, x0, #0x2
     35c:	ldr	w0, [x20, #176]
     360:	mul	w0, w0, w2
     364:	madd	w1, w1, w19, w0
     368:	add	w0, w1, w22
     36c:	ldr	w1, [x20, #184]
     370:	cbnz	w1, 300 <getCurFilenameLength+0x84>
     374:	ldp	x19, x20, [sp, #16]
     378:	ldp	x21, x22, [sp, #32]
     37c:	b	30c <getCurFilenameLength+0x90>
     380:	mov	w0, #0x0                   	// #0
     384:	ret
     388:	ret

000000000000038c <getCurFilename>:
     38c:	stp	x29, x30, [sp, #-128]!
     390:	mov	x29, sp
     394:	stp	x19, x20, [sp, #16]
     398:	stp	x21, x22, [sp, #32]
     39c:	mov	x21, x0
     3a0:	adrp	x0, 0 <getPNSStr>
     3a4:	ldr	x20, [x0]
     3a8:	cbz	x20, 558 <getCurFilename+0x1cc>
     3ac:	mov	w19, w1
     3b0:	ldrb	w0, [x20]
     3b4:	cbz	w0, 574 <getCurFilename+0x1e8>
     3b8:	adrp	x0, 0 <getPNSStr>
     3bc:	ldr	x0, [x0]
     3c0:	cbnz	x0, 3d0 <getCurFilename+0x44>
     3c4:	adrp	x0, 0 <getPNSStr>
     3c8:	ldr	w0, [x0]
     3cc:	cbz	w0, 428 <getCurFilename+0x9c>
     3d0:	stp	x23, x24, [sp, #48]
     3d4:	adrp	x19, 0 <getPNSStr>
     3d8:	add	x19, x19, #0x0
     3dc:	add	x0, x19, #0x20
     3e0:	bl	0 <strlen>
     3e4:	mov	w24, w0
     3e8:	add	x0, x19, #0x30
     3ec:	bl	0 <strlen>
     3f0:	mov	w23, w0
     3f4:	str	wzr, [sp, #124]
     3f8:	ldrb	w0, [x20]
     3fc:	cbz	w0, 56c <getCurFilename+0x1e0>
     400:	stp	x25, x26, [sp, #64]
     404:	stp	x27, x28, [sp, #80]
     408:	mov	w19, #0x0                   	// #0
     40c:	mov	w1, #0x0                   	// #0
     410:	add	x25, sp, #0x7c
     414:	adrp	x22, 0 <getPNSStr>
     418:	add	x22, x22, #0x0
     41c:	add	x26, sp, #0x60
     420:	add	x27, x22, #0x30
     424:	b	4bc <getCurFilename+0x130>
     428:	bl	0 <__llvm_profile_is_continuous_mode_enabled>
     42c:	cbnz	w0, 3d0 <getCurFilename+0x44>
     430:	cbnz	w19, 440 <getCurFilename+0xb4>
     434:	adrp	x0, 0 <getPNSStr>
     438:	ldr	x20, [x0]
     43c:	b	558 <getCurFilename+0x1cc>
     440:	adrp	x0, 0 <getPNSStr>
     444:	ldr	x20, [x0]
     448:	mov	x0, x20
     44c:	bl	0 <strlen>
     450:	sxtw	x19, w0
     454:	mov	x2, x19
     458:	mov	x1, x20
     45c:	mov	x0, x21
     460:	bl	0 <memcpy>
     464:	strb	wzr, [x21, x19]
     468:	mov	x20, x21
     46c:	b	558 <getCurFilename+0x1cc>
     470:	sxtw	x2, w24
     474:	add	x1, x22, #0x20
     478:	add	x0, x21, w19, sxtw
     47c:	bl	0 <memcpy>
     480:	add	w19, w19, w24
     484:	b	4a8 <getCurFilename+0x11c>
     488:	sxtw	x2, w23
     48c:	mov	x1, x27
     490:	add	x0, x21, w19, sxtw
     494:	bl	0 <memcpy>
     498:	add	w19, w19, w23
     49c:	b	4a8 <getCurFilename+0x11c>
     4a0:	strb	w0, [x21, w19, sxtw]
     4a4:	add	w19, w19, #0x1
     4a8:	ldr	w1, [sp, #124]
     4ac:	add	w1, w1, #0x1
     4b0:	str	w1, [sp, #124]
     4b4:	ldrb	w0, [x20, w1, sxtw]
     4b8:	cbz	w0, 544 <getCurFilename+0x1b8>
     4bc:	cmp	w0, #0x25
     4c0:	b.ne	4a0 <getCurFilename+0x114>  // b.any
     4c4:	add	w1, w1, #0x1
     4c8:	str	w1, [sp, #124]
     4cc:	ldrb	w0, [x20, w1, sxtw]
     4d0:	cmp	w0, #0x70
     4d4:	b.eq	470 <getCurFilename+0xe4>  // b.none
     4d8:	cmp	w0, #0x68
     4dc:	b.eq	488 <getCurFilename+0xfc>  // b.none
     4e0:	mov	x1, x25
     4e4:	mov	x0, x20
     4e8:	bl	8c <getMergePoolSize>
     4ec:	cbz	w0, 4a8 <getCurFilename+0x11c>
     4f0:	bl	0 <getpid>
     4f4:	ldr	w1, [x22, #184]
     4f8:	udiv	w28, w0, w1
     4fc:	msub	w28, w28, w1, w0
     500:	bl	0 <lprofGetLoadModuleSignature>
     504:	mov	w4, w28
     508:	mov	x3, x0
     50c:	adrp	x2, 0 <getPNSStr>
     510:	add	x2, x2, #0x0
     514:	mov	x1, #0x19                  	// #25
     518:	mov	x0, x26
     51c:	bl	0 <snprintf>
     520:	cmp	w0, #0x18
     524:	mov	w28, #0x18                  	// #24
     528:	csel	w28, w0, w28, le
     52c:	sxtw	x2, w28
     530:	mov	x1, x26
     534:	add	x0, x21, w19, sxtw
     538:	bl	0 <memcpy>
     53c:	add	w19, w19, w28
     540:	b	4a8 <getCurFilename+0x11c>
     544:	ldp	x25, x26, [sp, #64]
     548:	ldp	x27, x28, [sp, #80]
     54c:	strb	wzr, [x21, w19, sxtw]
     550:	mov	x20, x21
     554:	ldp	x23, x24, [sp, #48]
     558:	mov	x0, x20
     55c:	ldp	x19, x20, [sp, #16]
     560:	ldp	x21, x22, [sp, #32]
     564:	ldp	x29, x30, [sp], #128
     568:	ret
     56c:	mov	w19, #0x0                   	// #0
     570:	b	54c <getCurFilename+0x1c0>
     574:	mov	x20, #0x0                   	// #0
     578:	b	558 <getCurFilename+0x1cc>

000000000000057c <createProfileDir>:
     57c:	stp	x29, x30, [sp, #-48]!
     580:	mov	x29, sp
     584:	stp	x19, x20, [sp, #16]
     588:	str	x21, [sp, #32]
     58c:	mov	x19, x0
     590:	bl	0 <strlen>
     594:	mov	x20, x0
     598:	mov	x0, x19
     59c:	bl	0 <lprofFindFirstDirSeparator>
     5a0:	cbz	x0, 5cc <createProfileDir+0x50>
     5a4:	add	x0, x20, #0x10
     5a8:	and	x0, x0, #0xfffffffffffffff0
     5ac:	sub	sp, sp, x0
     5b0:	mov	x21, sp
     5b4:	add	x2, x20, #0x1
     5b8:	mov	x1, x19
     5bc:	mov	x0, x21
     5c0:	bl	0 <strncpy>
     5c4:	mov	x0, x21
     5c8:	bl	0 <__llvm_profile_recursive_mkdir>
     5cc:	mov	sp, x29
     5d0:	ldp	x19, x20, [sp, #16]
     5d4:	ldr	x21, [sp, #32]
     5d8:	ldp	x29, x30, [sp], #48
     5dc:	ret

00000000000005e0 <truncateCurrentFile>:
     5e0:	stp	x29, x30, [sp, #-32]!
     5e4:	mov	x29, sp
     5e8:	str	x19, [sp, #16]
     5ec:	bl	27c <getCurFilenameLength>
     5f0:	add	w0, w0, #0x1
     5f4:	sxtw	x0, w0
     5f8:	add	x0, x0, #0xf
     5fc:	and	x0, x0, #0xfffffffffffffff0
     600:	sub	sp, sp, x0
     604:	mov	w1, #0x0                   	// #0
     608:	mov	x0, sp
     60c:	bl	38c <getCurFilename>
     610:	cbz	x0, 628 <truncateCurrentFile+0x48>
     614:	mov	x19, x0
     618:	adrp	x0, 0 <getPNSStr>
     61c:	add	x0, x0, #0x0
     620:	bl	0 <getenv>
     624:	cbz	x0, 638 <truncateCurrentFile+0x58>
     628:	mov	sp, x29
     62c:	ldr	x19, [sp, #16]
     630:	ldp	x29, x30, [sp], #32
     634:	ret
     638:	adrp	x0, 0 <getPNSStr>
     63c:	add	x0, x0, #0x0
     640:	mov	w2, #0x1                   	// #1
     644:	mov	x1, x0
     648:	bl	0 <setenv>
     64c:	mov	x0, x19
     650:	bl	57c <createProfileDir>
     654:	adrp	x0, 0 <getPNSStr>
     658:	ldr	w0, [x0]
     65c:	cbnz	w0, 628 <truncateCurrentFile+0x48>
     660:	adrp	x1, 0 <getPNSStr>
     664:	add	x1, x1, #0x0
     668:	mov	x0, x19
     66c:	bl	0 <fopen>
     670:	cbz	x0, 628 <truncateCurrentFile+0x48>
     674:	bl	0 <fclose>
     678:	b	628 <truncateCurrentFile+0x48>

000000000000067c <getProfileFileSizeForMerging>:
     67c:	stp	x29, x30, [sp, #-48]!
     680:	mov	x29, sp
     684:	stp	x19, x20, [sp, #16]
     688:	str	x21, [sp, #32]
     68c:	mov	x20, x0
     690:	mov	x21, x1
     694:	mov	w2, #0x2                   	// #2
     698:	mov	x1, #0x0                   	// #0
     69c:	bl	0 <fseek>
     6a0:	cmn	w0, #0x1
     6a4:	b.eq	6f8 <getProfileFileSizeForMerging+0x7c>  // b.none
     6a8:	mov	x0, x20
     6ac:	bl	0 <ftell>
     6b0:	str	x0, [x21]
     6b4:	mov	w2, #0x0                   	// #0
     6b8:	mov	x1, #0x0                   	// #0
     6bc:	mov	x0, x20
     6c0:	bl	0 <fseek>
     6c4:	mov	w19, w0
     6c8:	cmn	w0, #0x1
     6cc:	b.eq	72c <getProfileFileSizeForMerging+0xb0>  // b.none
     6d0:	ldr	x0, [x21]
     6d4:	sub	x0, x0, #0x1
     6d8:	mov	w19, #0x0                   	// #0
     6dc:	cmp	x0, #0x4e
     6e0:	b.ls	75c <getProfileFileSizeForMerging+0xe0>  // b.plast
     6e4:	mov	w0, w19
     6e8:	ldp	x19, x20, [sp, #16]
     6ec:	ldr	x21, [sp, #32]
     6f0:	ldp	x29, x30, [sp], #48
     6f4:	ret
     6f8:	mov	w19, w0
     6fc:	adrp	x0, 0 <stderr>
     700:	ldr	x0, [x0]
     704:	ldr	x20, [x0]
     708:	bl	0 <__errno_location>
     70c:	ldr	w0, [x0]
     710:	bl	0 <strerror>
     714:	mov	x2, x0
     718:	adrp	x1, 0 <getPNSStr>
     71c:	add	x1, x1, #0x0
     720:	mov	x0, x20
     724:	bl	0 <fprintf>
     728:	b	6e4 <getProfileFileSizeForMerging+0x68>
     72c:	adrp	x0, 0 <stderr>
     730:	ldr	x0, [x0]
     734:	ldr	x20, [x0]
     738:	bl	0 <__errno_location>
     73c:	ldr	w0, [x0]
     740:	bl	0 <strerror>
     744:	mov	x2, x0
     748:	adrp	x1, 0 <getPNSStr>
     74c:	add	x1, x1, #0x0
     750:	mov	x0, x20
     754:	bl	0 <fprintf>
     758:	b	6e4 <getProfileFileSizeForMerging+0x68>
     75c:	adrp	x2, 0 <getPNSStr>
     760:	add	x2, x2, #0x0
     764:	adrp	x1, 0 <getPNSStr>
     768:	add	x1, x1, #0x0
     76c:	adrp	x0, 0 <stderr>
     770:	ldr	x0, [x0]
     774:	ldr	x0, [x0]
     778:	bl	0 <fprintf>
     77c:	mov	w19, #0xffffffff            	// #-1
     780:	b	6e4 <getProfileFileSizeForMerging+0x68>

0000000000000784 <unlockProfile>:
     784:	stp	x29, x30, [sp, #-32]!
     788:	mov	x29, sp
     78c:	stp	x19, x20, [sp, #16]
     790:	mov	x19, x0
     794:	mov	x20, x1
     798:	ldr	w0, [x0]
     79c:	cbz	w0, 7b8 <unlockProfile+0x34>
     7a0:	mov	x0, x20
     7a4:	bl	0 <lprofUnlockFileHandle>
     7a8:	str	wzr, [x19]
     7ac:	ldp	x19, x20, [sp, #16]
     7b0:	ldp	x29, x30, [sp], #32
     7b4:	ret
     7b8:	adrp	x2, 0 <getPNSStr>
     7bc:	add	x2, x2, #0x0
     7c0:	adrp	x1, 0 <getPNSStr>
     7c4:	add	x1, x1, #0x0
     7c8:	adrp	x0, 0 <stderr>
     7cc:	ldr	x0, [x0]
     7d0:	ldr	x0, [x0]
     7d4:	bl	0 <fprintf>
     7d8:	b	7a0 <unlockProfile+0x1c>

00000000000007dc <setupIOBuffer>:
     7dc:	stp	x29, x30, [sp, #-16]!
     7e0:	mov	x29, sp
     7e4:	adrp	x0, 0 <getPNSStr>
     7e8:	add	x0, x0, #0x0
     7ec:	bl	0 <getenv>
     7f0:	cbz	x0, 7fc <setupIOBuffer+0x20>
     7f4:	ldrb	w1, [x0]
     7f8:	cbnz	w1, 804 <setupIOBuffer+0x28>
     7fc:	ldp	x29, x30, [sp], #16
     800:	ret
     804:	mov	w2, #0xa                   	// #10
     808:	mov	x1, #0x0                   	// #0
     80c:	bl	0 <strtol>
     810:	adrp	x1, 0 <VPBufferSize>
     814:	str	w0, [x1]
     818:	mov	x1, #0x1                   	// #1
     81c:	mov	w0, w0
     820:	bl	0 <calloc>
     824:	adrp	x1, 0 <DynamicBufferIOBuffer>
     828:	str	x0, [x1]
     82c:	b	7fc <setupIOBuffer+0x20>

0000000000000830 <mmapProfileForMerging>:
     830:	stp	x29, x30, [sp, #-32]!
     834:	mov	x29, sp
     838:	stp	x19, x20, [sp, #16]
     83c:	mov	x19, x1
     840:	mov	x20, x2
     844:	bl	0 <fileno>
     848:	mov	x5, #0x0                   	// #0
     84c:	mov	w4, w0
     850:	mov	w3, #0x1                   	// #1
     854:	mov	w2, w3
     858:	mov	x1, x19
     85c:	mov	x0, #0x0                   	// #0
     860:	bl	0 <mmap>
     864:	str	x0, [x20]
     868:	cmn	x0, #0x1
     86c:	b.eq	888 <mmapProfileForMerging+0x58>  // b.none
     870:	mov	x1, x19
     874:	bl	0 <__llvm_profile_check_compatibility>
     878:	cbnz	w0, 8bc <mmapProfileForMerging+0x8c>
     87c:	ldp	x19, x20, [sp, #16]
     880:	ldp	x29, x30, [sp], #32
     884:	ret
     888:	adrp	x0, 0 <stderr>
     88c:	ldr	x0, [x0]
     890:	ldr	x19, [x0]
     894:	bl	0 <__errno_location>
     898:	ldr	w0, [x0]
     89c:	bl	0 <strerror>
     8a0:	mov	x2, x0
     8a4:	adrp	x1, 0 <getPNSStr>
     8a8:	add	x1, x1, #0x0
     8ac:	mov	x0, x19
     8b0:	bl	0 <fprintf>
     8b4:	mov	w0, #0xffffffff            	// #-1
     8b8:	b	87c <mmapProfileForMerging+0x4c>
     8bc:	mov	x1, x19
     8c0:	ldr	x0, [x20]
     8c4:	bl	0 <munmap>
     8c8:	adrp	x2, 0 <getPNSStr>
     8cc:	add	x2, x2, #0x0
     8d0:	adrp	x1, 0 <getPNSStr>
     8d4:	add	x1, x1, #0x0
     8d8:	adrp	x0, 0 <stderr>
     8dc:	ldr	x0, [x0]
     8e0:	ldr	x0, [x0]
     8e4:	bl	0 <fprintf>
     8e8:	mov	w0, #0xffffffff            	// #-1
     8ec:	b	87c <mmapProfileForMerging+0x4c>

00000000000008f0 <writeFile>:
     8f0:	stp	x29, x30, [sp, #-80]!
     8f4:	mov	x29, sp
     8f8:	stp	x19, x20, [sp, #16]
     8fc:	str	x21, [sp, #32]
     900:	mov	x21, x0
     904:	adrp	x1, 0 <VPMergeHook>
     908:	ldr	x1, [x1]
     90c:	adrp	x2, 0 <lprofMergeValueProfData>
     910:	ldr	x2, [x2]
     914:	str	x2, [x1]
     918:	bl	6c <doMerging>
     91c:	cbz	w0, a2c <writeFile+0x13c>
     920:	adrp	x0, 0 <getPNSStr>
     924:	ldr	x19, [x0]
     928:	cbz	x19, 96c <writeFile+0x7c>
     92c:	mov	x0, x19
     930:	bl	0 <lprofLockFileHandle>
     934:	add	x1, sp, #0x30
     938:	mov	x0, x19
     93c:	bl	67c <getProfileFileSizeForMerging>
     940:	cmn	w0, #0x1
     944:	b.eq	9ec <writeFile+0xfc>  // b.none
     948:	ldr	x1, [sp, #48]
     94c:	cbnz	x1, 988 <writeFile+0x98>
     950:	mov	x0, x19
     954:	bl	0 <fileno>
     958:	mov	x1, #0x0                   	// #0
     95c:	bl	0 <ftruncate>
     960:	mov	w20, w0
     964:	cbz	w0, 9d4 <writeFile+0xe4>
     968:	b	9ec <writeFile+0xfc>
     96c:	mov	x0, x21
     970:	bl	57c <createProfileDir>
     974:	mov	x0, x21
     978:	bl	0 <lprofOpenFileEx>
     97c:	mov	x19, x0
     980:	cbz	x0, a24 <writeFile+0x134>
     984:	b	934 <writeFile+0x44>
     988:	add	x2, sp, #0x38
     98c:	mov	x0, x19
     990:	bl	830 <mmapProfileForMerging>
     994:	cmn	w0, #0x1
     998:	b.eq	9ec <writeFile+0xfc>  // b.none
     99c:	ldr	x1, [sp, #48]
     9a0:	ldr	x0, [sp, #56]
     9a4:	bl	0 <__llvm_profile_merge_from_buffer>
     9a8:	mov	x0, x19
     9ac:	bl	0 <fileno>
     9b0:	mov	w20, w0
     9b4:	bl	0 <__llvm_profile_get_size_for_buffer>
     9b8:	mov	x1, x0
     9bc:	mov	w0, w20
     9c0:	bl	0 <ftruncate>
     9c4:	ldr	x1, [sp, #48]
     9c8:	ldr	x0, [sp, #56]
     9cc:	bl	0 <munmap>
     9d0:	mov	w20, #0x1                   	// #1
     9d4:	mov	w2, #0x0                   	// #0
     9d8:	mov	x1, #0x0                   	// #0
     9dc:	mov	x0, x19
     9e0:	bl	0 <fseek>
     9e4:	cmn	w0, #0x1
     9e8:	b.ne	a3c <writeFile+0x14c>  // b.any
     9ec:	adrp	x0, 0 <stderr>
     9f0:	ldr	x0, [x0]
     9f4:	ldr	x20, [x0]
     9f8:	bl	0 <__errno_location>
     9fc:	ldr	w0, [x0]
     a00:	bl	0 <strerror>
     a04:	mov	x3, x0
     a08:	mov	x2, x21
     a0c:	adrp	x1, 0 <getPNSStr>
     a10:	add	x1, x1, #0x0
     a14:	mov	x0, x20
     a18:	bl	0 <fprintf>
     a1c:	mov	x0, x19
     a20:	bl	0 <fclose>
     a24:	mov	w20, #0xffffffff            	// #-1
     a28:	b	a90 <writeFile+0x1a0>
     a2c:	adrp	x0, 0 <getPNSStr>
     a30:	ldr	x19, [x0]
     a34:	mov	w20, #0x0                   	// #0
     a38:	cbz	x19, aa4 <writeFile+0x1b4>
     a3c:	adrp	x0, 0 <FreeHook>
     a40:	adrp	x1, 0 <free>
     a44:	ldr	x1, [x1]
     a48:	str	x1, [x0]
     a4c:	bl	7dc <setupIOBuffer>
     a50:	adrp	x1, 0 <getPNSStr>
     a54:	add	x1, x1, #0x0
     a58:	str	x1, [sp, #64]
     a5c:	str	x19, [sp, #72]
     a60:	bl	0 <lprofGetVPDataReader>
     a64:	mov	w2, w20
     a68:	mov	x1, x0
     a6c:	add	x0, sp, #0x40
     a70:	bl	0 <lprofWriteData>
     a74:	mov	w20, w0
     a78:	adrp	x0, 0 <getPNSStr>
     a7c:	ldr	x0, [x0]
     a80:	cmp	x19, x0
     a84:	b.eq	ac4 <writeFile+0x1d4>  // b.none
     a88:	mov	x0, x19
     a8c:	bl	0 <fclose>
     a90:	mov	w0, w20
     a94:	ldp	x19, x20, [sp, #16]
     a98:	ldr	x21, [sp, #32]
     a9c:	ldp	x29, x30, [sp], #80
     aa0:	ret
     aa4:	adrp	x1, 0 <getPNSStr>
     aa8:	add	x1, x1, #0x0
     aac:	mov	x0, x21
     ab0:	bl	0 <fopen>
     ab4:	mov	x19, x0
     ab8:	cbnz	x0, a3c <writeFile+0x14c>
     abc:	mov	w20, #0xffffffff            	// #-1
     ac0:	b	a90 <writeFile+0x1a0>
     ac4:	mov	x0, x19
     ac8:	bl	0 <fflush>
     acc:	bl	6c <doMerging>
     ad0:	cbz	w0, a90 <writeFile+0x1a0>
     ad4:	mov	x0, x19
     ad8:	bl	0 <lprofUnlockFileHandle>
     adc:	b	a90 <writeFile+0x1a0>

0000000000000ae0 <writeProfileWithFileObject>:
     ae0:	stp	x29, x30, [sp, #-48]!
     ae4:	mov	x29, sp
     ae8:	stp	x19, x20, [sp, #16]
     aec:	mov	x20, x0
     af0:	adrp	x2, 0 <getPNSStr>
     af4:	str	x1, [x2]
     af8:	bl	8f0 <writeFile>
     afc:	mov	w19, w0
     b00:	cbnz	w0, b1c <writeProfileWithFileObject+0x3c>
     b04:	adrp	x0, 0 <getPNSStr>
     b08:	str	xzr, [x0]
     b0c:	mov	w0, w19
     b10:	ldp	x19, x20, [sp, #16]
     b14:	ldp	x29, x30, [sp], #48
     b18:	ret
     b1c:	str	x21, [sp, #32]
     b20:	adrp	x0, 0 <stderr>
     b24:	ldr	x0, [x0]
     b28:	ldr	x21, [x0]
     b2c:	bl	0 <__errno_location>
     b30:	ldr	w0, [x0]
     b34:	bl	0 <strerror>
     b38:	mov	x3, x0
     b3c:	mov	x2, x20
     b40:	adrp	x1, 0 <getPNSStr>
     b44:	add	x1, x1, #0x0
     b48:	mov	x0, x21
     b4c:	bl	0 <fprintf>
     b50:	ldr	x21, [sp, #32]
     b54:	b	b04 <writeProfileWithFileObject+0x24>

0000000000000b58 <initializeProfileForContinuousMode>:
     b58:	stp	x29, x30, [sp, #-144]!
     b5c:	mov	x29, sp
     b60:	stp	x19, x20, [sp, #16]
     b64:	stp	x21, x22, [sp, #32]
     b68:	stp	x23, x24, [sp, #48]
     b6c:	stp	x25, x26, [sp, #64]
     b70:	stp	x27, x28, [sp, #80]
     b74:	bl	0 <__llvm_profile_is_continuous_mode_enabled>
     b78:	cbnz	w0, b9c <initializeProfileForContinuousMode+0x44>
     b7c:	mov	sp, x29
     b80:	ldp	x19, x20, [sp, #16]
     b84:	ldp	x21, x22, [sp, #32]
     b88:	ldp	x23, x24, [sp, #48]
     b8c:	ldp	x25, x26, [sp, #64]
     b90:	ldp	x27, x28, [sp, #80]
     b94:	ldp	x29, x30, [sp], #144
     b98:	ret
     b9c:	bl	0 <__llvm_profile_begin_data>
     ba0:	mov	x19, x0
     ba4:	bl	0 <__llvm_profile_end_data>
     ba8:	mov	x21, x0
     bac:	bl	0 <__llvm_profile_begin_counters>
     bb0:	mov	x20, x0
     bb4:	bl	0 <__llvm_profile_end_counters>
     bb8:	mov	x25, x0
     bbc:	bl	0 <__llvm_profile_begin_names>
     bc0:	mov	x26, x0
     bc4:	bl	0 <__llvm_profile_end_names>
     bc8:	mov	x27, x0
     bcc:	mov	x1, x21
     bd0:	mov	x0, x19
     bd4:	bl	0 <__llvm_profile_get_data_size>
     bd8:	mov	x24, x0
     bdc:	bl	0 <getpagesize>
     be0:	mov	w22, w0
     be4:	mov	w21, w0
     be8:	sdiv	x0, x20, x21
     bec:	msub	x0, x0, x21, x20
     bf0:	cbnz	x0, d38 <initializeProfileForContinuousMode+0x1e0>
     bf4:	sdiv	x23, x19, x21
     bf8:	msub	x23, x23, x21, x19
     bfc:	cbnz	x23, d5c <initializeProfileForContinuousMode+0x204>
     c00:	bl	27c <getCurFilenameLength>
     c04:	add	w1, w0, #0x1
     c08:	sxtw	x1, w1
     c0c:	add	x1, x1, #0xf
     c10:	and	x1, x1, #0xfffffffffffffff0
     c14:	sub	sp, sp, x1
     c18:	mov	w1, #0x0                   	// #0
     c1c:	mov	x0, sp
     c20:	bl	38c <getCurFilename>
     c24:	mov	x19, x0
     c28:	cbz	x0, b7c <initializeProfileForContinuousMode+0x24>
     c2c:	str	wzr, [x29, #140]
     c30:	bl	6c <doMerging>
     c34:	cbnz	w0, dac <initializeProfileForContinuousMode+0x254>
     c38:	adrp	x1, 0 <getPNSStr>
     c3c:	add	x1, x1, #0x0
     c40:	mov	x0, x19
     c44:	bl	0 <fopen>
     c48:	mov	x28, x0
     c4c:	cbz	x0, da0 <initializeProfileForContinuousMode+0x248>
     c50:	bl	0 <ftello>
     c54:	mov	x23, x0
     c58:	sdiv	x0, x0, x21
     c5c:	msub	x21, x0, x21, x23
     c60:	cbnz	x21, d80 <initializeProfileForContinuousMode+0x228>
     c64:	mov	x1, x28
     c68:	mov	x0, x19
     c6c:	bl	ae0 <writeProfileWithFileObject>
     c70:	cbnz	w0, da0 <initializeProfileForContinuousMode+0x248>
     c74:	sub	x25, x25, x20
     c78:	mov	x0, x28
     c7c:	bl	0 <fileno>
     c80:	mov	w19, w0
     c84:	add	x5, x29, #0x70
     c88:	add	x4, x29, #0x78
     c8c:	add	x3, x29, #0x80
     c90:	sub	x2, x27, x26
     c94:	asr	x1, x25, #3
     c98:	mov	x0, x24
     c9c:	bl	0 <__llvm_profile_get_padding_sizes_for_counters>
     ca0:	ldr	x0, [x29, #120]
     ca4:	add	x25, x25, x0
     ca8:	ldr	x0, [x29, #128]
     cac:	add	x0, x0, #0x50
     cb0:	add	x24, x24, x24, lsl #1
     cb4:	add	x23, x23, x24, lsl #4
     cb8:	add	x23, x0, x23
     cbc:	mov	x5, x23
     cc0:	mov	w4, w19
     cc4:	mov	w3, #0x11                  	// #17
     cc8:	mov	w2, #0x3                   	// #3
     ccc:	mov	x1, x25
     cd0:	mov	x0, x20
     cd4:	bl	0 <mmap>
     cd8:	cmp	x20, x0
     cdc:	b.eq	d1c <initializeProfileForContinuousMode+0x1c4>  // b.none
     ce0:	adrp	x0, 0 <stderr>
     ce4:	ldr	x0, [x0]
     ce8:	ldr	x21, [x0]
     cec:	bl	0 <__errno_location>
     cf0:	ldr	w0, [x0]
     cf4:	bl	0 <strerror>
     cf8:	mov	x6, x23
     cfc:	mov	w5, w19
     d00:	mov	x4, x25
     d04:	mov	x3, x20
     d08:	mov	x2, x0
     d0c:	adrp	x1, 0 <getPNSStr>
     d10:	add	x1, x1, #0x0
     d14:	mov	x0, x21
     d18:	bl	0 <fprintf>
     d1c:	add	x19, x29, #0x8c
     d20:	mov	x1, x28
     d24:	mov	x0, x19
     d28:	bl	784 <unlockProfile>
     d2c:	mov	x0, x19
     d30:	bl	f4 <assertIsZero>
     d34:	b	b7c <initializeProfileForContinuousMode+0x24>
     d38:	mov	w3, w22
     d3c:	mov	x2, x20
     d40:	adrp	x1, 0 <getPNSStr>
     d44:	add	x1, x1, #0x0
     d48:	adrp	x0, 0 <stderr>
     d4c:	ldr	x0, [x0]
     d50:	ldr	x0, [x0]
     d54:	bl	0 <fprintf>
     d58:	b	b7c <initializeProfileForContinuousMode+0x24>
     d5c:	mov	w3, w22
     d60:	mov	x2, x19
     d64:	adrp	x1, 0 <getPNSStr>
     d68:	add	x1, x1, #0x0
     d6c:	adrp	x0, 0 <stderr>
     d70:	ldr	x0, [x0]
     d74:	ldr	x0, [x0]
     d78:	bl	0 <fprintf>
     d7c:	b	b7c <initializeProfileForContinuousMode+0x24>
     d80:	mov	w3, w22
     d84:	mov	x2, x23
     d88:	adrp	x1, 0 <getPNSStr>
     d8c:	add	x1, x1, #0x0
     d90:	adrp	x0, 0 <stderr>
     d94:	ldr	x0, [x0]
     d98:	ldr	x0, [x0]
     d9c:	bl	0 <fprintf>
     da0:	add	x0, x29, #0x8c
     da4:	bl	f4 <assertIsZero>
     da8:	b	b7c <initializeProfileForContinuousMode+0x24>
     dac:	mov	x0, x19
     db0:	bl	0 <lprofOpenFileEx>
     db4:	mov	x28, x0
     db8:	cbz	x0, da0 <initializeProfileForContinuousMode+0x248>
     dbc:	mov	w0, #0x1                   	// #1
     dc0:	str	w0, [x29, #140]
     dc4:	add	x1, x29, #0x60
     dc8:	mov	x0, x28
     dcc:	bl	67c <getProfileFileSizeForMerging>
     dd0:	cmn	w0, #0x1
     dd4:	b.eq	e00 <initializeProfileForContinuousMode+0x2a8>  // b.none
     dd8:	ldr	x1, [x29, #96]
     ddc:	cbnz	x1, e10 <initializeProfileForContinuousMode+0x2b8>
     de0:	mov	x1, x28
     de4:	mov	x0, x19
     de8:	bl	ae0 <writeProfileWithFileObject>
     dec:	cbz	w0, c74 <initializeProfileForContinuousMode+0x11c>
     df0:	mov	x1, x28
     df4:	add	x0, x29, #0x8c
     df8:	bl	784 <unlockProfile>
     dfc:	b	da0 <initializeProfileForContinuousMode+0x248>
     e00:	mov	x1, x28
     e04:	add	x0, x29, #0x8c
     e08:	bl	784 <unlockProfile>
     e0c:	b	da0 <initializeProfileForContinuousMode+0x248>
     e10:	add	x2, x29, #0x68
     e14:	mov	x0, x28
     e18:	bl	830 <mmapProfileForMerging>
     e1c:	cmn	w0, #0x1
     e20:	b.eq	e38 <initializeProfileForContinuousMode+0x2e0>  // b.none
     e24:	ldr	x1, [x29, #96]
     e28:	ldr	x0, [x29, #104]
     e2c:	bl	0 <munmap>
     e30:	cmn	w0, #0x1
     e34:	b.ne	c74 <initializeProfileForContinuousMode+0x11c>  // b.any
     e38:	mov	x1, x28
     e3c:	add	x0, x29, #0x8c
     e40:	bl	784 <unlockProfile>
     e44:	b	da0 <initializeProfileForContinuousMode+0x248>

0000000000000e48 <parseAndSetFilename>:
     e48:	stp	x29, x30, [sp, #-112]!
     e4c:	mov	x29, sp
     e50:	stp	x19, x20, [sp, #16]
     e54:	stp	x25, x26, [sp, #64]
     e58:	mov	x19, x0
     e5c:	adrp	x0, 0 <getPNSStr>
     e60:	ldr	w25, [x0]
     e64:	cmp	w25, w1
     e68:	b.hi	1180 <parseAndSetFilename+0x338>  // b.pmore
     e6c:	stp	x21, x22, [sp, #32]
     e70:	stp	x23, x24, [sp, #48]
     e74:	mov	w20, w1
     e78:	mov	w21, w2
     e7c:	adrp	x0, 0 <getPNSStr>
     e80:	add	x0, x0, #0x0
     e84:	cmp	x19, #0x0
     e88:	csel	x19, x0, x19, eq  // eq = none
     e8c:	adrp	x0, 0 <getPNSStr>
     e90:	ldr	x24, [x0]
     e94:	cbz	x24, 1210 <parseAndSetFilename+0x3c8>
     e98:	mov	x1, x19
     e9c:	mov	x0, x24
     ea0:	bl	0 <strcmp>
     ea4:	cbz	w0, f48 <parseAndSetFilename+0x100>
     ea8:	adrp	x0, 0 <getPNSStr>
     eac:	ldr	x0, [x0]
     eb0:	cbz	x0, 1224 <parseAndSetFilename+0x3dc>
     eb4:	bl	0 <free>
     eb8:	adrp	x0, 0 <getPNSStr>
     ebc:	ldr	x0, [x0]
     ec0:	cbz	x0, ed0 <parseAndSetFilename+0x88>
     ec4:	adrp	x1, 0 <getPNSStr>
     ec8:	ldr	w1, [x1]
     ecc:	cbnz	w1, f5c <parseAndSetFilename+0x114>
     ed0:	adrp	x1, 0 <getPNSStr>
     ed4:	add	x1, x1, #0x0
     ed8:	stp	xzr, xzr, [x1, #8]
     edc:	stp	xzr, xzr, [x1, #24]
     ee0:	stp	xzr, xzr, [x1, #40]
     ee4:	stp	xzr, xzr, [x1, #56]
     ee8:	stp	xzr, xzr, [x1, #72]
     eec:	stp	xzr, xzr, [x1, #88]
     ef0:	stp	xzr, xzr, [x1, #104]
     ef4:	stp	xzr, xzr, [x1, #120]
     ef8:	stp	xzr, xzr, [x1, #136]
     efc:	stp	xzr, xzr, [x1, #152]
     f00:	stp	xzr, xzr, [x1, #168]
     f04:	str	xzr, [x1, #184]
     f08:	cbnz	w21, f64 <parseAndSetFilename+0x11c>
     f0c:	adrp	x0, 0 <getPNSStr>
     f10:	str	x19, [x0]
     f14:	str	wzr, [sp, #108]
     f18:	ldrb	w1, [x19]
     f1c:	cbz	w1, 11a8 <parseAndSetFilename+0x360>
     f20:	stp	x27, x28, [sp, #80]
     f24:	mov	w26, #0x0                   	// #0
     f28:	mov	w22, #0x0                   	// #0
     f2c:	mov	w21, #0x0                   	// #0
     f30:	mov	w0, #0x0                   	// #0
     f34:	add	x27, sp, #0x6c
     f38:	adrp	x23, 0 <getPNSStr>
     f3c:	add	x23, x23, #0x0
     f40:	add	x28, x23, #0x30
     f44:	b	fa0 <parseAndSetFilename+0x158>
     f48:	adrp	x0, 0 <getPNSStr>
     f4c:	str	w20, [x0]
     f50:	ldp	x21, x22, [sp, #32]
     f54:	ldp	x23, x24, [sp, #48]
     f58:	b	1180 <parseAndSetFilename+0x338>
     f5c:	bl	0 <free>
     f60:	b	ed0 <parseAndSetFilename+0x88>
     f64:	mov	x0, x19
     f68:	bl	0 <strdup>
     f6c:	adrp	x1, 0 <getPNSStr>
     f70:	add	x1, x1, #0x0
     f74:	str	x0, [x1, #8]
     f78:	mov	w0, #0x1                   	// #1
     f7c:	str	w0, [x1, #16]
     f80:	b	f14 <parseAndSetFilename+0xcc>
     f84:	cbz	w21, fec <parseAndSetFilename+0x1a4>
     f88:	add	w21, w21, #0x1
     f8c:	ldr	w0, [sp, #108]
     f90:	add	w0, w0, #0x1
     f94:	str	w0, [sp, #108]
     f98:	ldrb	w1, [x19, w0, sxtw]
     f9c:	cbz	w1, 1190 <parseAndSetFilename+0x348>
     fa0:	cmp	w1, #0x25
     fa4:	b.ne	f8c <parseAndSetFilename+0x144>  // b.any
     fa8:	add	w0, w0, #0x1
     fac:	str	w0, [sp, #108]
     fb0:	ldrb	w0, [x19, w0, sxtw]
     fb4:	cmp	w0, #0x70
     fb8:	b.eq	f84 <parseAndSetFilename+0x13c>  // b.none
     fbc:	cmp	w0, #0x68
     fc0:	b.eq	1010 <parseAndSetFilename+0x1c8>  // b.none
     fc4:	cmp	w0, #0x63
     fc8:	b.eq	1054 <parseAndSetFilename+0x20c>  // b.none
     fcc:	mov	x1, x27
     fd0:	mov	x0, x19
     fd4:	bl	8c <getMergePoolSize>
     fd8:	cbz	w0, f8c <parseAndSetFilename+0x144>
     fdc:	cbnz	w26, 1090 <parseAndSetFilename+0x248>
     fe0:	str	w0, [x23, #184]
     fe4:	mov	w26, #0x1                   	// #1
     fe8:	b	f8c <parseAndSetFilename+0x144>
     fec:	bl	0 <getpid>
     ff0:	sxtw	x3, w0
     ff4:	adrp	x2, 0 <getPNSStr>
     ff8:	add	x2, x2, #0x0
     ffc:	mov	x1, #0x10                  	// #16
    1000:	add	x0, x23, #0x20
    1004:	bl	0 <snprintf>
    1008:	mov	w21, #0x1                   	// #1
    100c:	b	f8c <parseAndSetFilename+0x144>
    1010:	cbz	w22, 101c <parseAndSetFilename+0x1d4>
    1014:	add	w22, w22, #0x1
    1018:	b	f8c <parseAndSetFilename+0x144>
    101c:	mov	w1, #0x80                  	// #128
    1020:	mov	x0, x28
    1024:	bl	0 <lprofGetHostName>
    1028:	cbnz	w0, 1034 <parseAndSetFilename+0x1ec>
    102c:	mov	w22, #0x1                   	// #1
    1030:	b	f8c <parseAndSetFilename+0x144>
    1034:	mov	x2, x19
    1038:	adrp	x1, 0 <getPNSStr>
    103c:	add	x1, x1, #0x0
    1040:	adrp	x0, 0 <stderr>
    1044:	ldr	x0, [x0]
    1048:	ldr	x0, [x0]
    104c:	bl	0 <fprintf>
    1050:	b	10ac <parseAndSetFilename+0x264>
    1054:	bl	0 <__llvm_profile_is_continuous_mode_enabled>
    1058:	cbnz	w0, 1070 <parseAndSetFilename+0x228>
    105c:	bl	0 <__llvm_profile_enable_continuous_mode>
    1060:	ldr	w0, [sp, #108]
    1064:	add	w0, w0, #0x1
    1068:	str	w0, [sp, #108]
    106c:	b	f8c <parseAndSetFilename+0x144>
    1070:	mov	x2, x19
    1074:	adrp	x1, 0 <getPNSStr>
    1078:	add	x1, x1, #0x0
    107c:	adrp	x0, 0 <stderr>
    1080:	ldr	x0, [x0]
    1084:	ldr	x0, [x0]
    1088:	bl	0 <fprintf>
    108c:	b	10ac <parseAndSetFilename+0x264>
    1090:	mov	x2, x19
    1094:	adrp	x1, 0 <getPNSStr>
    1098:	add	x1, x1, #0x0
    109c:	adrp	x0, 0 <stderr>
    10a0:	ldr	x0, [x0]
    10a4:	ldr	x0, [x0]
    10a8:	bl	0 <fprintf>
    10ac:	adrp	x0, 0 <getPNSStr>
    10b0:	ldr	x0, [x0]
    10b4:	cbz	x0, 1208 <parseAndSetFilename+0x3c0>
    10b8:	adrp	x1, 0 <getPNSStr>
    10bc:	ldr	w1, [x1]
    10c0:	cbnz	w1, 11b4 <parseAndSetFilename+0x36c>
    10c4:	ldp	x27, x28, [sp, #80]
    10c8:	adrp	x1, 0 <getPNSStr>
    10cc:	add	x1, x1, #0x0
    10d0:	stp	xzr, xzr, [x1, #16]
    10d4:	stp	xzr, xzr, [x1, #32]
    10d8:	stp	xzr, xzr, [x1, #48]
    10dc:	stp	xzr, xzr, [x1, #64]
    10e0:	stp	xzr, xzr, [x1, #80]
    10e4:	stp	xzr, xzr, [x1, #96]
    10e8:	stp	xzr, xzr, [x1, #112]
    10ec:	stp	xzr, xzr, [x1, #128]
    10f0:	stp	xzr, xzr, [x1, #144]
    10f4:	stp	xzr, xzr, [x1, #160]
    10f8:	str	xzr, [x1, #176]
    10fc:	str	wzr, [x1, #184]
    1100:	adrp	x0, 0 <getPNSStr>
    1104:	add	x0, x0, #0x0
    1108:	str	x0, [x1, #8]
    110c:	adrp	x0, 0 <getPNSStr>
    1110:	str	w20, [x0]
    1114:	cbz	x24, 11c0 <parseAndSetFilename+0x378>
    1118:	adrp	x0, 0 <getPNSStr>
    111c:	add	x0, x0, #0x0
    1120:	bl	0 <getenv>
    1124:	cbz	x0, 1170 <parseAndSetFilename+0x328>
    1128:	adrp	x0, 0 <stderr>
    112c:	ldr	x0, [x0]
    1130:	ldr	x21, [x0]
    1134:	mov	w0, w25
    1138:	bl	0 <getPNSStr>
    113c:	mov	x19, x0
    1140:	adrp	x0, 0 <getPNSStr>
    1144:	ldr	x22, [x0]
    1148:	mov	w0, w20
    114c:	bl	0 <getPNSStr>
    1150:	mov	x5, x0
    1154:	mov	x4, x22
    1158:	mov	x3, x19
    115c:	mov	x2, x24
    1160:	adrp	x1, 0 <getPNSStr>
    1164:	add	x1, x1, #0x0
    1168:	mov	x0, x21
    116c:	bl	0 <fprintf>
    1170:	bl	5e0 <truncateCurrentFile>
    1174:	bl	b58 <initializeProfileForContinuousMode>
    1178:	ldp	x21, x22, [sp, #32]
    117c:	ldp	x23, x24, [sp, #48]
    1180:	ldp	x19, x20, [sp, #16]
    1184:	ldp	x25, x26, [sp, #64]
    1188:	ldp	x29, x30, [sp], #112
    118c:	ret
    1190:	ldp	x27, x28, [sp, #80]
    1194:	adrp	x0, 0 <getPNSStr>
    1198:	add	x0, x0, #0x0
    119c:	str	w21, [x0, #176]
    11a0:	str	w22, [x0, #180]
    11a4:	b	110c <parseAndSetFilename+0x2c4>
    11a8:	mov	w22, #0x0                   	// #0
    11ac:	mov	w21, #0x0                   	// #0
    11b0:	b	1194 <parseAndSetFilename+0x34c>
    11b4:	bl	0 <free>
    11b8:	ldp	x27, x28, [sp, #80]
    11bc:	b	10c8 <parseAndSetFilename+0x280>
    11c0:	adrp	x0, 0 <getPNSStr>
    11c4:	add	x0, x0, #0x0
    11c8:	bl	0 <getenv>
    11cc:	cbz	x0, 1170 <parseAndSetFilename+0x328>
    11d0:	adrp	x0, 0 <stderr>
    11d4:	ldr	x0, [x0]
    11d8:	ldr	x19, [x0]
    11dc:	adrp	x0, 0 <getPNSStr>
    11e0:	ldr	x21, [x0]
    11e4:	mov	w0, w20
    11e8:	bl	0 <getPNSStr>
    11ec:	mov	x3, x0
    11f0:	mov	x2, x21
    11f4:	adrp	x1, 0 <getPNSStr>
    11f8:	add	x1, x1, #0x0
    11fc:	mov	x0, x19
    1200:	bl	0 <fprintf>
    1204:	b	1170 <parseAndSetFilename+0x328>
    1208:	ldp	x27, x28, [sp, #80]
    120c:	b	10c8 <parseAndSetFilename+0x280>
    1210:	cbz	x19, 10c8 <parseAndSetFilename+0x280>
    1214:	adrp	x0, 0 <getPNSStr>
    1218:	ldr	x0, [x0]
    121c:	cbnz	x0, eb4 <parseAndSetFilename+0x6c>
    1220:	b	ed0 <parseAndSetFilename+0x88>
    1224:	adrp	x0, 0 <getPNSStr>
    1228:	ldr	x0, [x0]
    122c:	b	ec4 <parseAndSetFilename+0x7c>

0000000000001230 <__llvm_profile_set_file_object>:
    1230:	stp	x29, x30, [sp, #-32]!
    1234:	mov	x29, sp
    1238:	stp	x19, x20, [sp, #16]
    123c:	mov	x19, x0
    1240:	mov	w20, w1
    1244:	bl	0 <__llvm_profile_is_continuous_mode_enabled>
    1248:	cbnz	w0, 1268 <__llvm_profile_set_file_object+0x38>
    124c:	adrp	x0, 0 <getPNSStr>
    1250:	add	x1, x0, #0x0
    1254:	str	x19, [x1, #192]
    1258:	str	w20, [x0]
    125c:	ldp	x19, x20, [sp, #16]
    1260:	ldp	x29, x30, [sp], #32
    1264:	ret
    1268:	adrp	x0, 0 <stderr>
    126c:	ldr	x0, [x0]
    1270:	ldr	x20, [x0]
    1274:	mov	x0, x19
    1278:	bl	0 <fileno>
    127c:	mov	w2, w0
    1280:	adrp	x1, 0 <getPNSStr>
    1284:	add	x1, x1, #0x0
    1288:	mov	x0, x20
    128c:	bl	0 <fprintf>
    1290:	b	125c <__llvm_profile_set_file_object+0x2c>

0000000000001294 <lprofCreateBufferIOInternal>:
    1294:	stp	x29, x30, [sp, #-32]!
    1298:	mov	x29, sp
    129c:	stp	x19, x20, [sp, #16]
    12a0:	mov	x20, x0
    12a4:	mov	w19, w1
    12a8:	adrp	x1, 0 <FreeHook>
    12ac:	adrp	x0, 0 <free>
    12b0:	ldr	x0, [x0]
    12b4:	str	x0, [x1]
    12b8:	mov	x1, #0x1                   	// #1
    12bc:	mov	w0, w19
    12c0:	bl	0 <calloc>
    12c4:	adrp	x1, 0 <DynamicBufferIOBuffer>
    12c8:	str	x0, [x1]
    12cc:	adrp	x0, 0 <VPBufferSize>
    12d0:	str	w19, [x0]
    12d4:	mov	x1, #0x1                   	// #1
    12d8:	mov	x0, #0x10                  	// #16
    12dc:	bl	0 <calloc>
    12e0:	adrp	x2, 0 <getPNSStr>
    12e4:	add	x2, x2, #0x0
    12e8:	str	x2, [x0]
    12ec:	str	x20, [x0, #8]
    12f0:	bl	0 <lprofCreateBufferIO>
    12f4:	mov	w1, #0x1                   	// #1
    12f8:	str	w1, [x0, #8]
    12fc:	ldp	x19, x20, [sp, #16]
    1300:	ldp	x29, x30, [sp], #32
    1304:	ret

0000000000001308 <__llvm_profile_get_path_prefix>:
    1308:	stp	x29, x30, [sp, #-48]!
    130c:	mov	x29, sp
    1310:	stp	x19, x20, [sp, #16]
    1314:	str	x21, [sp, #32]
    1318:	adrp	x0, 0 <getPNSStr>
    131c:	ldr	x19, [x0]
    1320:	cbz	x19, 133c <__llvm_profile_get_path_prefix+0x34>
    1324:	mov	x0, x19
    1328:	mov	sp, x29
    132c:	ldp	x19, x20, [sp, #16]
    1330:	ldr	x21, [sp, #32]
    1334:	ldp	x29, x30, [sp], #48
    1338:	ret
    133c:	bl	27c <getCurFilenameLength>
    1340:	add	w0, w0, #0x1
    1344:	sxtw	x0, w0
    1348:	add	x0, x0, #0xf
    134c:	and	x0, x0, #0xfffffffffffffff0
    1350:	sub	sp, sp, x0
    1354:	mov	w1, #0x0                   	// #0
    1358:	mov	x0, sp
    135c:	bl	38c <getCurFilename>
    1360:	mov	x20, x0
    1364:	cbz	x0, 13d4 <__llvm_profile_get_path_prefix+0xcc>
    1368:	bl	0 <lprofFindLastDirSeparator>
    136c:	cbz	x0, 13e0 <__llvm_profile_get_path_prefix+0xd8>
    1370:	sub	x0, x0, x20
    1374:	add	w21, w0, #0x1
    1378:	add	w0, w0, #0x2
    137c:	sxtw	x0, w0
    1380:	bl	0 <malloc>
    1384:	mov	x19, x0
    1388:	cbz	x0, 13a8 <__llvm_profile_get_path_prefix+0xa0>
    138c:	sxtw	x2, w21
    1390:	mov	x1, x20
    1394:	bl	0 <memcpy>
    1398:	strb	wzr, [x19, w21, sxtw]
    139c:	adrp	x0, 0 <getPNSStr>
    13a0:	str	x19, [x0]
    13a4:	b	1324 <__llvm_profile_get_path_prefix+0x1c>
    13a8:	adrp	x2, 0 <getPNSStr>
    13ac:	add	x2, x2, #0x0
    13b0:	adrp	x1, 0 <getPNSStr>
    13b4:	add	x1, x1, #0x0
    13b8:	adrp	x0, 0 <stderr>
    13bc:	ldr	x0, [x0]
    13c0:	ldr	x0, [x0]
    13c4:	bl	0 <fprintf>
    13c8:	adrp	x19, 0 <getPNSStr>
    13cc:	add	x19, x19, #0x0
    13d0:	b	1324 <__llvm_profile_get_path_prefix+0x1c>
    13d4:	adrp	x19, 0 <getPNSStr>
    13d8:	add	x19, x19, #0x0
    13dc:	b	1324 <__llvm_profile_get_path_prefix+0x1c>
    13e0:	adrp	x19, 0 <getPNSStr>
    13e4:	add	x19, x19, #0x0
    13e8:	b	1324 <__llvm_profile_get_path_prefix+0x1c>

00000000000013ec <__llvm_profile_get_filename>:
    13ec:	stp	x29, x30, [sp, #-32]!
    13f0:	mov	x29, sp
    13f4:	str	x19, [sp, #16]
    13f8:	bl	27c <getCurFilenameLength>
    13fc:	add	w0, w0, #0x1
    1400:	sxtw	x0, w0
    1404:	bl	0 <malloc>
    1408:	cbz	x0, 1438 <__llvm_profile_get_filename+0x4c>
    140c:	mov	x19, x0
    1410:	mov	w1, #0x1                   	// #1
    1414:	bl	38c <getCurFilename>
    1418:	adrp	x1, 0 <getPNSStr>
    141c:	add	x1, x1, #0x0
    1420:	cmp	x0, #0x0
    1424:	csel	x19, x1, x19, eq  // eq = none
    1428:	mov	x0, x19
    142c:	ldr	x19, [sp, #16]
    1430:	ldp	x29, x30, [sp], #32
    1434:	ret
    1438:	adrp	x2, 0 <getPNSStr>
    143c:	add	x2, x2, #0x0
    1440:	adrp	x1, 0 <getPNSStr>
    1444:	add	x1, x1, #0x0
    1448:	adrp	x0, 0 <stderr>
    144c:	ldr	x0, [x0]
    1450:	ldr	x0, [x0]
    1454:	bl	0 <fprintf>
    1458:	adrp	x19, 0 <getPNSStr>
    145c:	add	x19, x19, #0x0
    1460:	b	1428 <__llvm_profile_get_filename+0x3c>

0000000000001464 <__llvm_profile_initialize_file>:
    1464:	stp	x29, x30, [sp, #-32]!
    1468:	mov	x29, sp
    146c:	str	x19, [sp, #16]
    1470:	adrp	x0, 0 <__llvm_profile_filename>
    1474:	ldr	x0, [x0]
    1478:	ldrb	w19, [x0]
    147c:	adrp	x0, 0 <getPNSStr>
    1480:	add	x0, x0, #0x0
    1484:	bl	0 <getenv>
    1488:	cbz	x0, 14b4 <__llvm_profile_initialize_file+0x50>
    148c:	ldrb	w1, [x0]
    1490:	cbz	w1, 14b4 <__llvm_profile_initialize_file+0x50>
    1494:	mov	w2, #0x1                   	// #1
    1498:	mov	w1, #0x3                   	// #3
    149c:	bl	e48 <parseAndSetFilename>
    14a0:	b	14c8 <__llvm_profile_initialize_file+0x64>
    14a4:	mov	w1, #0x2                   	// #2
    14a8:	adrp	x0, 0 <__llvm_profile_filename>
    14ac:	ldr	x0, [x0]
    14b0:	b	14c0 <__llvm_profile_initialize_file+0x5c>
    14b4:	cbnz	w19, 14a4 <__llvm_profile_initialize_file+0x40>
    14b8:	mov	w1, #0x1                   	// #1
    14bc:	mov	x0, #0x0                   	// #0
    14c0:	mov	w2, #0x0                   	// #0
    14c4:	bl	e48 <parseAndSetFilename>
    14c8:	ldr	x19, [sp, #16]
    14cc:	ldp	x29, x30, [sp], #32
    14d0:	ret

00000000000014d4 <__llvm_profile_set_filename>:
    14d4:	stp	x29, x30, [sp, #-32]!
    14d8:	mov	x29, sp
    14dc:	str	x19, [sp, #16]
    14e0:	mov	x19, x0
    14e4:	bl	0 <__llvm_profile_is_continuous_mode_enabled>
    14e8:	cbz	w0, 14f8 <__llvm_profile_set_filename+0x24>
    14ec:	ldr	x19, [sp, #16]
    14f0:	ldp	x29, x30, [sp], #32
    14f4:	ret
    14f8:	mov	w2, #0x1                   	// #1
    14fc:	mov	w1, #0x4                   	// #4
    1500:	mov	x0, x19
    1504:	bl	e48 <parseAndSetFilename>
    1508:	b	14ec <__llvm_profile_set_filename+0x18>

000000000000150c <__llvm_profile_write_file>:
    150c:	stp	x29, x30, [sp, #-48]!
    1510:	mov	x29, sp
    1514:	stp	x19, x20, [sp, #16]
    1518:	stp	x21, x22, [sp, #32]
    151c:	bl	0 <lprofProfileDumped>
    1520:	cbnz	w0, 152c <__llvm_profile_write_file+0x20>
    1524:	bl	0 <__llvm_profile_is_continuous_mode_enabled>
    1528:	cbz	w0, 1568 <__llvm_profile_write_file+0x5c>
    152c:	adrp	x2, 0 <getPNSStr>
    1530:	add	x2, x2, #0x0
    1534:	adrp	x1, 0 <getPNSStr>
    1538:	add	x1, x1, #0x0
    153c:	adrp	x0, 0 <stderr>
    1540:	ldr	x0, [x0]
    1544:	ldr	x0, [x0]
    1548:	bl	0 <fprintf>
    154c:	mov	w19, #0x0                   	// #0
    1550:	mov	w0, w19
    1554:	mov	sp, x29
    1558:	ldp	x19, x20, [sp, #16]
    155c:	ldp	x21, x22, [sp, #32]
    1560:	ldp	x29, x30, [sp], #48
    1564:	ret
    1568:	bl	27c <getCurFilenameLength>
    156c:	add	w0, w0, #0x1
    1570:	sxtw	x0, w0
    1574:	add	x0, x0, #0xf
    1578:	and	x0, x0, #0xfffffffffffffff0
    157c:	sub	sp, sp, x0
    1580:	mov	w1, #0x0                   	// #0
    1584:	mov	x0, sp
    1588:	bl	38c <getCurFilename>
    158c:	mov	x20, x0
    1590:	cbz	x0, 15cc <__llvm_profile_write_file+0xc0>
    1594:	bl	0 <__llvm_profile_get_version>
    1598:	and	x0, x0, #0xffffffffffffff
    159c:	cmp	x0, #0x5
    15a0:	b.ne	15f4 <__llvm_profile_write_file+0xe8>  // b.any
    15a4:	bl	0 <lprofSuspendSigKill>
    15a8:	mov	w21, w0
    15ac:	mov	x0, x20
    15b0:	bl	8f0 <writeFile>
    15b4:	mov	w19, w0
    15b8:	cbnz	w0, 1624 <__llvm_profile_write_file+0x118>
    15bc:	cmp	w21, #0x1
    15c0:	b.ne	1550 <__llvm_profile_write_file+0x44>  // b.any
    15c4:	bl	0 <lprofRestoreSigKill>
    15c8:	b	1550 <__llvm_profile_write_file+0x44>
    15cc:	adrp	x2, 0 <getPNSStr>
    15d0:	add	x2, x2, #0x0
    15d4:	adrp	x1, 0 <getPNSStr>
    15d8:	add	x1, x1, #0x0
    15dc:	adrp	x0, 0 <stderr>
    15e0:	ldr	x0, [x0]
    15e4:	ldr	x0, [x0]
    15e8:	bl	0 <fprintf>
    15ec:	mov	w19, #0xffffffff            	// #-1
    15f0:	b	1550 <__llvm_profile_write_file+0x44>
    15f4:	adrp	x0, 0 <stderr>
    15f8:	ldr	x0, [x0]
    15fc:	ldr	x19, [x0]
    1600:	bl	0 <__llvm_profile_get_version>
    1604:	mov	w3, w0
    1608:	mov	w2, #0x5                   	// #5
    160c:	adrp	x1, 0 <getPNSStr>
    1610:	add	x1, x1, #0x0
    1614:	mov	x0, x19
    1618:	bl	0 <fprintf>
    161c:	mov	w19, #0xffffffff            	// #-1
    1620:	b	1550 <__llvm_profile_write_file+0x44>
    1624:	adrp	x0, 0 <stderr>
    1628:	ldr	x0, [x0]
    162c:	ldr	x22, [x0]
    1630:	bl	0 <__errno_location>
    1634:	ldr	w0, [x0]
    1638:	bl	0 <strerror>
    163c:	mov	x3, x0
    1640:	mov	x2, x20
    1644:	adrp	x1, 0 <getPNSStr>
    1648:	add	x1, x1, #0x0
    164c:	mov	x0, x22
    1650:	bl	0 <fprintf>
    1654:	b	15bc <__llvm_profile_write_file+0xb0>

0000000000001658 <writeFileWithoutReturn>:
    1658:	stp	x29, x30, [sp, #-16]!
    165c:	mov	x29, sp
    1660:	bl	150c <__llvm_profile_write_file>
    1664:	ldp	x29, x30, [sp], #16
    1668:	ret

000000000000166c <__llvm_profile_dump>:
    166c:	stp	x29, x30, [sp, #-32]!
    1670:	mov	x29, sp
    1674:	str	x19, [sp, #16]
    1678:	bl	6c <doMerging>
    167c:	cbz	w0, 169c <__llvm_profile_dump+0x30>
    1680:	bl	150c <__llvm_profile_write_file>
    1684:	mov	w19, w0
    1688:	bl	0 <lprofSetProfileDumped>
    168c:	mov	w0, w19
    1690:	ldr	x19, [sp, #16]
    1694:	ldp	x29, x30, [sp], #32
    1698:	ret
    169c:	adrp	x2, 0 <getPNSStr>
    16a0:	add	x2, x2, #0x0
    16a4:	adrp	x1, 0 <getPNSStr>
    16a8:	add	x1, x1, #0x0
    16ac:	adrp	x0, 0 <stderr>
    16b0:	ldr	x0, [x0]
    16b4:	ldr	x0, [x0]
    16b8:	bl	0 <fprintf>
    16bc:	b	1680 <__llvm_profile_dump+0x14>

00000000000016c0 <__llvm_orderfile_write_file>:
    16c0:	stp	x29, x30, [sp, #-64]!
    16c4:	mov	x29, sp
    16c8:	stp	x19, x20, [sp, #16]
    16cc:	stp	x21, x22, [sp, #32]
    16d0:	str	x23, [sp, #48]
    16d4:	bl	27c <getCurFilenameLength>
    16d8:	add	w0, w0, #0x7
    16dc:	sxtw	x0, w0
    16e0:	add	x0, x0, #0xf
    16e4:	and	x0, x0, #0xfffffffffffffff0
    16e8:	sub	sp, sp, x0
    16ec:	mov	x20, sp
    16f0:	mov	w1, #0x1                   	// #1
    16f4:	mov	x0, x20
    16f8:	bl	38c <getCurFilename>
    16fc:	cbz	x0, 17c4 <__llvm_orderfile_write_file+0x104>
    1700:	mov	x19, x0
    1704:	bl	0 <strlen>
    1708:	add	x2, x20, w0, sxtw
    170c:	adrp	x1, 0 <getPNSStr>
    1710:	add	x1, x1, #0x0
    1714:	ldr	w3, [x1]
    1718:	str	w3, [x20, w0, sxtw]
    171c:	ldrh	w1, [x1, #4]
    1720:	strh	w1, [x2, #4]
    1724:	add	w1, w0, #0x6
    1728:	strb	wzr, [x20, w1, sxtw]
    172c:	bl	0 <__llvm_profile_get_version>
    1730:	and	x0, x0, #0xffffffffffffff
    1734:	cmp	x0, #0x5
    1738:	b.ne	17ec <__llvm_orderfile_write_file+0x12c>  // b.any
    173c:	bl	0 <lprofSuspendSigKill>
    1740:	mov	w22, w0
    1744:	adrp	x1, 0 <getPNSStr>
    1748:	add	x1, x1, #0x0
    174c:	mov	x0, x19
    1750:	bl	0 <fopen>
    1754:	mov	x20, x0
    1758:	cbz	x0, 181c <__llvm_orderfile_write_file+0x15c>
    175c:	adrp	x1, 0 <FreeHook>
    1760:	adrp	x0, 0 <free>
    1764:	ldr	x0, [x0]
    1768:	str	x0, [x1]
    176c:	bl	7dc <setupIOBuffer>
    1770:	bl	0 <__llvm_profile_begin_orderfile>
    1774:	mov	x3, x20
    1778:	mov	x2, #0x20000               	// #131072
    177c:	mov	x1, #0x4                   	// #4
    1780:	bl	0 <fwrite>
    1784:	mov	x21, x0
    1788:	cmp	x0, #0x20, lsl #12
    178c:	cset	w23, ne  // ne = any
    1790:	mov	x0, x20
    1794:	bl	0 <fclose>
    1798:	cmp	x21, #0x20, lsl #12
    179c:	b.ne	183c <__llvm_orderfile_write_file+0x17c>  // b.any
    17a0:	cmp	w22, #0x1
    17a4:	b.eq	1870 <__llvm_orderfile_write_file+0x1b0>  // b.none
    17a8:	mov	w0, w23
    17ac:	mov	sp, x29
    17b0:	ldp	x19, x20, [sp, #16]
    17b4:	ldp	x21, x22, [sp, #32]
    17b8:	ldr	x23, [sp, #48]
    17bc:	ldp	x29, x30, [sp], #64
    17c0:	ret
    17c4:	adrp	x2, 0 <getPNSStr>
    17c8:	add	x2, x2, #0x0
    17cc:	adrp	x1, 0 <getPNSStr>
    17d0:	add	x1, x1, #0x0
    17d4:	adrp	x0, 0 <stderr>
    17d8:	ldr	x0, [x0]
    17dc:	ldr	x0, [x0]
    17e0:	bl	0 <fprintf>
    17e4:	mov	w23, #0xffffffff            	// #-1
    17e8:	b	17a8 <__llvm_orderfile_write_file+0xe8>
    17ec:	adrp	x0, 0 <stderr>
    17f0:	ldr	x0, [x0]
    17f4:	ldr	x19, [x0]
    17f8:	bl	0 <__llvm_profile_get_version>
    17fc:	mov	w3, w0
    1800:	mov	w2, #0x5                   	// #5
    1804:	adrp	x1, 0 <getPNSStr>
    1808:	add	x1, x1, #0x0
    180c:	mov	x0, x19
    1810:	bl	0 <fprintf>
    1814:	mov	w23, #0xffffffff            	// #-1
    1818:	b	17a8 <__llvm_orderfile_write_file+0xe8>
    181c:	mov	x2, x19
    1820:	adrp	x1, 0 <getPNSStr>
    1824:	add	x1, x1, #0x0
    1828:	adrp	x0, 0 <stderr>
    182c:	ldr	x0, [x0]
    1830:	ldr	x0, [x0]
    1834:	bl	0 <fprintf>
    1838:	mov	w23, #0xffffffff            	// #-1
    183c:	adrp	x0, 0 <stderr>
    1840:	ldr	x0, [x0]
    1844:	ldr	x20, [x0]
    1848:	bl	0 <__errno_location>
    184c:	ldr	w0, [x0]
    1850:	bl	0 <strerror>
    1854:	mov	x3, x0
    1858:	mov	x2, x19
    185c:	adrp	x1, 0 <getPNSStr>
    1860:	add	x1, x1, #0x0
    1864:	mov	x0, x20
    1868:	bl	0 <fprintf>
    186c:	b	17a0 <__llvm_orderfile_write_file+0xe0>
    1870:	bl	0 <lprofRestoreSigKill>
    1874:	b	17a8 <__llvm_orderfile_write_file+0xe8>

0000000000001878 <__llvm_orderfile_dump>:
    1878:	stp	x29, x30, [sp, #-16]!
    187c:	mov	x29, sp
    1880:	bl	16c0 <__llvm_orderfile_write_file>
    1884:	ldp	x29, x30, [sp], #16
    1888:	ret

000000000000188c <__llvm_profile_register_write_file_atexit>:
    188c:	adrp	x0, 0 <getPNSStr>
    1890:	ldr	w1, [x0]
    1894:	mov	w0, #0x0                   	// #0
    1898:	cbz	w1, 18a0 <__llvm_profile_register_write_file_atexit+0x14>
    189c:	ret
    18a0:	stp	x29, x30, [sp, #-16]!
    18a4:	mov	x29, sp
    18a8:	bl	0 <lprofSetupValueProfiler>
    18ac:	adrp	x0, 0 <getPNSStr>
    18b0:	mov	w1, #0x1                   	// #1
    18b4:	str	w1, [x0]
    18b8:	adrp	x0, 0 <getPNSStr>
    18bc:	add	x0, x0, #0x0
    18c0:	bl	0 <atexit>
    18c4:	ldp	x29, x30, [sp], #16
    18c8:	ret

InstrProfilingMerge.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lprofGetLoadModuleSignature>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	str	x25, [sp, #64]
  18:	bl	0 <__llvm_profile_end_counters>
  1c:	mov	x19, x0
  20:	bl	0 <__llvm_profile_begin_counters>
  24:	mov	x25, x0
  28:	bl	0 <__llvm_profile_begin_data>
  2c:	mov	x20, x0
  30:	bl	0 <__llvm_profile_end_data>
  34:	mov	x1, x0
  38:	mov	x0, x20
  3c:	bl	0 <__llvm_profile_get_data_size>
  40:	mov	x22, x0
  44:	bl	0 <__llvm_profile_end_names>
  48:	mov	x21, x0
  4c:	bl	0 <__llvm_profile_begin_names>
  50:	mov	x23, x0
  54:	bl	0 <__llvm_profile_end_vnodes>
  58:	mov	x20, x0
  5c:	bl	0 <__llvm_profile_begin_vnodes>
  60:	mov	x24, x0
  64:	bl	0 <__llvm_profile_begin_data>
  68:	sub	x19, x19, x25
  6c:	asr	x19, x19, #3
  70:	sub	x20, x20, x24
  74:	asr	x20, x20, #3
  78:	mov	x1, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
  7c:	movk	x1, #0xaaab
  80:	mul	x20, x20, x1
  84:	lsl	x20, x20, #10
  88:	add	x19, x20, x19, lsl #30
  8c:	sub	x21, x21, x23
  90:	lsl	x23, x22, #20
  94:	add	x21, x23, x21, lsl #40
  98:	add	x19, x19, x21
  9c:	cbz	x22, a4 <lprofGetLoadModuleSignature+0xa4>
  a0:	ldr	x22, [x0]
  a4:	add	x0, x22, x19
  a8:	ldp	x19, x20, [sp, #16]
  ac:	ldp	x21, x22, [sp, #32]
  b0:	ldp	x23, x24, [sp, #48]
  b4:	ldr	x25, [sp, #64]
  b8:	ldp	x29, x30, [sp], #80
  bc:	ret

00000000000000c0 <__llvm_profile_check_compatibility>:
  c0:	cmp	x1, #0x4f
  c4:	b.hi	d0 <__llvm_profile_check_compatibility+0x10>  // b.pmore
  c8:	mov	w0, #0x1                   	// #1
  cc:	ret
  d0:	stp	x29, x30, [sp, #-64]!
  d4:	mov	x29, sp
  d8:	stp	x19, x20, [sp, #16]
  dc:	stp	x21, x22, [sp, #32]
  e0:	mov	x19, x0
  e4:	mov	x20, x1
  e8:	ldr	x22, [x0, #16]
  ec:	ldr	x21, [x0]
  f0:	bl	0 <__llvm_profile_get_magic>
  f4:	mov	x1, x0
  f8:	mov	w0, #0x1                   	// #1
  fc:	cmp	x21, x1
 100:	b.eq	114 <__llvm_profile_check_compatibility+0x54>  // b.none
 104:	ldp	x19, x20, [sp, #16]
 108:	ldp	x21, x22, [sp, #32]
 10c:	ldp	x29, x30, [sp], #64
 110:	ret
 114:	ldr	x21, [x19, #8]
 118:	bl	0 <__llvm_profile_get_version>
 11c:	mov	x1, x0
 120:	mov	w0, #0x1                   	// #1
 124:	cmp	x21, x1
 128:	b.ne	104 <__llvm_profile_check_compatibility+0x44>  // b.any
 12c:	str	x23, [sp, #48]
 130:	ldr	x23, [x19, #16]
 134:	bl	0 <__llvm_profile_begin_data>
 138:	mov	x21, x0
 13c:	bl	0 <__llvm_profile_end_data>
 140:	mov	x1, x0
 144:	mov	x0, x21
 148:	bl	0 <__llvm_profile_get_data_size>
 14c:	mov	x1, x0
 150:	mov	w0, #0x1                   	// #1
 154:	cmp	x23, x1
 158:	b.eq	164 <__llvm_profile_check_compatibility+0xa4>  // b.none
 15c:	ldr	x23, [sp, #48]
 160:	b	104 <__llvm_profile_check_compatibility+0x44>
 164:	ldr	x23, [x19, #32]
 168:	bl	0 <__llvm_profile_end_counters>
 16c:	mov	x21, x0
 170:	bl	0 <__llvm_profile_begin_counters>
 174:	sub	x21, x21, x0
 178:	mov	w0, #0x1                   	// #1
 17c:	cmp	x23, x21, asr #3
 180:	b.eq	18c <__llvm_profile_check_compatibility+0xcc>  // b.none
 184:	ldr	x23, [sp, #48]
 188:	b	104 <__llvm_profile_check_compatibility+0x44>
 18c:	ldr	x23, [x19, #48]
 190:	bl	0 <__llvm_profile_end_names>
 194:	mov	x21, x0
 198:	bl	0 <__llvm_profile_begin_names>
 19c:	sub	x21, x21, x0
 1a0:	mov	w0, #0x1                   	// #1
 1a4:	cmp	x23, x21
 1a8:	b.ne	27c <__llvm_profile_check_compatibility+0x1bc>  // b.any
 1ac:	ldr	x1, [x19, #72]
 1b0:	cmp	x1, #0x1
 1b4:	b.ne	284 <__llvm_profile_check_compatibility+0x1c4>  // b.any
 1b8:	ldr	x1, [x19, #48]
 1bc:	ldr	x0, [x19, #32]
 1c0:	add	x1, x1, x0
 1c4:	ldr	x0, [x19, #16]
 1c8:	add	x0, x0, x0, lsl #1
 1cc:	add	x1, x1, x0, lsl #4
 1d0:	add	x1, x1, #0x50
 1d4:	mov	w0, #0x1                   	// #1
 1d8:	cmp	x1, x20
 1dc:	b.ls	1e8 <__llvm_profile_check_compatibility+0x128>  // b.plast
 1e0:	ldr	x23, [sp, #48]
 1e4:	b	104 <__llvm_profile_check_compatibility+0x44>
 1e8:	add	x19, x19, #0x50
 1ec:	mov	x0, #0x30                  	// #48
 1f0:	madd	x22, x22, x0, x19
 1f4:	bl	0 <__llvm_profile_begin_data>
 1f8:	cmp	x19, x22
 1fc:	b.cs	24c <__llvm_profile_check_compatibility+0x18c>  // b.hs, b.nlast
 200:	ldr	x2, [x19]
 204:	ldr	x1, [x0]
 208:	cmp	x2, x1
 20c:	b.ne	258 <__llvm_profile_check_compatibility+0x198>  // b.any
 210:	ldr	x2, [x19, #8]
 214:	ldr	x1, [x0, #8]
 218:	cmp	x2, x1
 21c:	b.ne	264 <__llvm_profile_check_compatibility+0x1a4>  // b.any
 220:	ldr	w2, [x19, #40]
 224:	ldr	w1, [x0, #40]
 228:	cmp	w2, w1
 22c:	b.ne	270 <__llvm_profile_check_compatibility+0x1b0>  // b.any
 230:	add	x19, x19, #0x30
 234:	add	x0, x0, #0x30
 238:	cmp	x22, x19
 23c:	b.hi	200 <__llvm_profile_check_compatibility+0x140>  // b.pmore
 240:	mov	w0, #0x0                   	// #0
 244:	ldr	x23, [sp, #48]
 248:	b	104 <__llvm_profile_check_compatibility+0x44>
 24c:	mov	w0, #0x0                   	// #0
 250:	ldr	x23, [sp, #48]
 254:	b	104 <__llvm_profile_check_compatibility+0x44>
 258:	mov	w0, #0x1                   	// #1
 25c:	ldr	x23, [sp, #48]
 260:	b	104 <__llvm_profile_check_compatibility+0x44>
 264:	mov	w0, #0x1                   	// #1
 268:	ldr	x23, [sp, #48]
 26c:	b	104 <__llvm_profile_check_compatibility+0x44>
 270:	mov	w0, #0x1                   	// #1
 274:	ldr	x23, [sp, #48]
 278:	b	104 <__llvm_profile_check_compatibility+0x44>
 27c:	ldr	x23, [sp, #48]
 280:	b	104 <__llvm_profile_check_compatibility+0x44>
 284:	ldr	x23, [sp, #48]
 288:	b	104 <__llvm_profile_check_compatibility+0x44>

000000000000028c <__llvm_profile_merge_from_buffer>:
 28c:	stp	x29, x30, [sp, #-64]!
 290:	mov	x29, sp
 294:	stp	x19, x20, [sp, #16]
 298:	stp	x21, x22, [sp, #32]
 29c:	stp	x23, x24, [sp, #48]
 2a0:	mov	x23, x0
 2a4:	add	x19, x0, #0x50
 2a8:	ldr	x0, [x0, #16]
 2ac:	add	x0, x0, x0, lsl #1
 2b0:	add	x21, x19, x0, lsl #4
 2b4:	ldr	x20, [x23, #32]
 2b8:	lsl	x20, x20, #3
 2bc:	ldr	x22, [x23, #48]
 2c0:	mov	x0, x22
 2c4:	bl	0 <__llvm_profile_get_num_padding_bytes>
 2c8:	add	x20, x20, x22
 2cc:	add	x20, x20, w0, uxtb
 2d0:	add	x22, x21, x20
 2d4:	bl	0 <__llvm_profile_begin_data>
 2d8:	cmp	x19, x21
 2dc:	b.cs	378 <__llvm_profile_merge_from_buffer+0xec>  // b.hs, b.nlast
 2e0:	mov	x20, x0
 2e4:	adrp	x24, 8 <lprofGetLoadModuleSignature+0x8>
 2e8:	b	2fc <__llvm_profile_merge_from_buffer+0x70>
 2ec:	add	x19, x19, #0x30
 2f0:	add	x20, x20, #0x30
 2f4:	cmp	x21, x19
 2f8:	b.ls	378 <__llvm_profile_merge_from_buffer+0xec>  // b.plast
 2fc:	ldr	x3, [x20, #16]
 300:	ldr	w5, [x19, #40]
 304:	ldr	x4, [x19, #16]
 308:	ldr	x0, [x23, #56]
 30c:	sub	x4, x4, x0
 310:	and	x4, x4, #0xfffffffffffffff8
 314:	cbz	w5, 33c <__llvm_profile_merge_from_buffer+0xb0>
 318:	mov	x1, #0x0                   	// #0
 31c:	add	x4, x21, x4
 320:	ldr	x2, [x3, x1, lsl #3]
 324:	ldr	x0, [x4, x1, lsl #3]
 328:	add	x2, x2, x0
 32c:	str	x2, [x3, x1, lsl #3]
 330:	add	x1, x1, #0x1
 334:	cmp	w5, w1
 338:	b.hi	320 <__llvm_profile_merge_from_buffer+0x94>  // b.pmore
 33c:	ldr	x2, [x24]
 340:	cbz	x2, 2ec <__llvm_profile_merge_from_buffer+0x60>
 344:	ldrh	w0, [x19, #46]
 348:	cmp	w0, #0x0
 34c:	cset	w0, ne  // ne = any
 350:	ldrh	w1, [x19, #44]
 354:	cmp	w1, #0x0
 358:	cinc	w0, w0, ne  // ne = any
 35c:	cbz	w0, 2ec <__llvm_profile_merge_from_buffer+0x60>
 360:	mov	x1, x20
 364:	mov	x0, x22
 368:	blr	x2
 36c:	ldr	w0, [x22]
 370:	add	x22, x22, x0
 374:	b	2ec <__llvm_profile_merge_from_buffer+0x60>
 378:	ldp	x19, x20, [sp, #16]
 37c:	ldp	x21, x22, [sp, #32]
 380:	ldp	x23, x24, [sp, #48]
 384:	ldp	x29, x30, [sp], #64
 388:	ret

InstrProfilingMergeFile.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lprofMergeValueProfData>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x23, x24, [sp, #48]
   c:	stp	x25, x26, [sp, #64]
  10:	str	x27, [sp, #80]
  14:	mov	x27, x0
  18:	mov	x23, x1
  1c:	bl	0 <getFirstValueProfRecord>
  20:	mov	x25, x0
  24:	ldr	w0, [x27, #4]
  28:	cbz	w0, d8 <lprofMergeValueProfData+0xd8>
  2c:	stp	x19, x20, [sp, #16]
  30:	stp	x21, x22, [sp, #32]
  34:	mov	w22, #0x0                   	// #0
  38:	mov	w26, #0x0                   	// #0
  3c:	b	b0 <lprofMergeValueProfData+0xb0>
  40:	add	w22, w22, #0x1
  44:	add	w24, w24, #0x1
  48:	ldr	w0, [x25, #4]
  4c:	cmp	w0, w24
  50:	b.ls	94 <lprofMergeValueProfData+0x94>  // b.plast
  54:	add	x0, x25, w24, uxtw
  58:	ldrb	w21, [x0, #8]
  5c:	cbz	w21, 40 <lprofMergeValueProfData+0x40>
  60:	add	w21, w21, w19
  64:	ubfiz	x4, x19, #4, #32
  68:	add	x0, x20, x4
  6c:	ldr	x3, [x0, #8]
  70:	mov	w2, w22
  74:	mov	x1, x23
  78:	ldr	x0, [x20, x4]
  7c:	bl	0 <__llvm_profile_instrument_target_value>
  80:	add	w19, w19, #0x1
  84:	cmp	w21, w19
  88:	b.ne	64 <lprofMergeValueProfData+0x64>  // b.any
  8c:	mov	w19, w21
  90:	b	40 <lprofMergeValueProfData+0x40>
  94:	mov	x0, x25
  98:	bl	0 <getValueProfRecordNext>
  9c:	mov	x25, x0
  a0:	add	w26, w26, #0x1
  a4:	ldr	w0, [x27, #4]
  a8:	cmp	w0, w26
  ac:	b.ls	d0 <lprofMergeValueProfData+0xd0>  // b.plast
  b0:	mov	x0, x25
  b4:	bl	0 <getValueProfRecordValueData>
  b8:	mov	x20, x0
  bc:	ldr	w0, [x25, #4]
  c0:	cbz	w0, 94 <lprofMergeValueProfData+0x94>
  c4:	mov	w19, #0x0                   	// #0
  c8:	mov	w24, #0x0                   	// #0
  cc:	b	54 <lprofMergeValueProfData+0x54>
  d0:	ldp	x19, x20, [sp, #16]
  d4:	ldp	x21, x22, [sp, #32]
  d8:	ldp	x23, x24, [sp, #48]
  dc:	ldp	x25, x26, [sp, #64]
  e0:	ldr	x27, [sp, #80]
  e4:	ldp	x29, x30, [sp], #96
  e8:	ret

InstrProfilingNameVar.c.o:     file format elf64-littleaarch64


InstrProfilingWriter.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lprofBufferWriter>:
   0:	cbz	w2, 7c <lprofBufferWriter+0x7c>
   4:	stp	x29, x30, [sp, #-48]!
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x21, x0
  18:	mov	x19, x1
  1c:	sub	w2, w2, #0x1
  20:	add	x1, x1, #0x20
  24:	add	x22, x1, x2, lsl #5
  28:	b	50 <lprofBufferWriter+0x50>
  2c:	mov	x2, x20
  30:	ldr	x0, [x21, #8]
  34:	bl	0 <memcpy>
  38:	ldr	x1, [x21, #8]
  3c:	add	x20, x1, x20
  40:	str	x20, [x21, #8]
  44:	add	x19, x19, #0x20
  48:	cmp	x19, x22
  4c:	b.eq	68 <lprofBufferWriter+0x68>  // b.none
  50:	ldr	x20, [x19, #8]
  54:	ldr	x0, [x19, #16]
  58:	mul	x20, x20, x0
  5c:	ldr	x1, [x19]
  60:	cbnz	x1, 2c <lprofBufferWriter+0x2c>
  64:	b	38 <lprofBufferWriter+0x38>
  68:	mov	w0, #0x0                   	// #0
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldp	x21, x22, [sp, #32]
  74:	ldp	x29, x30, [sp], #48
  78:	ret
  7c:	mov	w0, #0x0                   	// #0
  80:	ret

0000000000000084 <lprofCreateBufferIO>:
  84:	mov	x2, x0
  88:	adrp	x0, 0 <lprofBufferWriter>
  8c:	add	x1, x0, #0x0
  90:	ldr	x3, [x0]
  94:	ldr	w4, [x1, #8]
  98:	cbz	x3, c0 <lprofCreateBufferIO+0x3c>
  9c:	adrp	x1, 0 <lprofBufferWriter>
  a0:	add	x1, x1, #0x0
  a4:	add	x0, x1, #0x10
  a8:	str	x2, [x1, #16]
  ac:	str	wzr, [x0, #8]
  b0:	str	x3, [x0, #16]
  b4:	str	w4, [x0, #24]
  b8:	str	wzr, [x0, #28]
  bc:	ret
  c0:	mov	w4, #0x2000                	// #8192
  c4:	adrp	x3, 0 <lprofBufferWriter>
  c8:	add	x3, x3, #0x0
  cc:	b	9c <lprofCreateBufferIO+0x18>

00000000000000d0 <lprofDeleteBufferIO>:
  d0:	stp	x29, x30, [sp, #-32]!
  d4:	mov	x29, sp
  d8:	ldr	w1, [x0, #8]
  dc:	cbz	w1, f0 <lprofDeleteBufferIO+0x20>
  e0:	adrp	x1, 0 <lprofBufferWriter>
  e4:	ldr	x1, [x1]
  e8:	ldr	x0, [x0]
  ec:	blr	x1
  f0:	adrp	x0, 0 <lprofBufferWriter>
  f4:	ldr	x0, [x0]
  f8:	cbz	x0, 11c <lprofDeleteBufferIO+0x4c>
  fc:	stp	x19, x20, [sp, #16]
 100:	adrp	x20, 0 <lprofBufferWriter>
 104:	add	x19, x20, #0x0
 108:	ldr	x1, [x19, #48]
 10c:	blr	x1
 110:	str	xzr, [x20]
 114:	str	wzr, [x19, #8]
 118:	ldp	x19, x20, [sp, #16]
 11c:	ldp	x29, x30, [sp], #32
 120:	ret

0000000000000124 <lprofBufferIOFlush>:
 124:	stp	x29, x30, [sp, #-64]!
 128:	mov	x29, sp
 12c:	str	x19, [sp, #16]
 130:	mov	x19, x0
 134:	ldr	w0, [x0, #28]
 138:	cbz	w0, 180 <lprofBufferIOFlush+0x5c>
 13c:	ldr	x1, [x19, #16]
 140:	str	x1, [sp, #32]
 144:	mov	x2, #0x1                   	// #1
 148:	str	x2, [sp, #40]
 14c:	mov	w0, w0
 150:	str	x0, [sp, #48]
 154:	str	wzr, [sp, #56]
 158:	ldr	x0, [x19]
 15c:	ldr	x3, [x0]
 160:	add	x1, sp, #0x20
 164:	blr	x3
 168:	cbnz	w0, 178 <lprofBufferIOFlush+0x54>
 16c:	str	wzr, [x19, #28]
 170:	mov	w0, #0x0                   	// #0
 174:	b	184 <lprofBufferIOFlush+0x60>
 178:	mov	w0, #0xffffffff            	// #-1
 17c:	b	184 <lprofBufferIOFlush+0x60>
 180:	mov	w0, #0x0                   	// #0
 184:	ldr	x19, [sp, #16]
 188:	ldp	x29, x30, [sp], #64
 18c:	ret

0000000000000190 <lprofBufferIOWrite>:
 190:	stp	x29, x30, [sp, #-96]!
 194:	mov	x29, sp
 198:	stp	x19, x20, [sp, #16]
 19c:	str	x21, [sp, #32]
 1a0:	mov	x19, x0
 1a4:	mov	x21, x1
 1a8:	mov	w20, w2
 1ac:	ldr	w0, [x0, #28]
 1b0:	add	w0, w2, w0
 1b4:	ldr	w1, [x19, #24]
 1b8:	cmp	w0, w1
 1bc:	b.hi	210 <lprofBufferIOWrite+0x80>  // b.pmore
 1c0:	str	x21, [sp, #64]
 1c4:	mov	x0, #0x1                   	// #1
 1c8:	str	x0, [sp, #72]
 1cc:	mov	w0, w20
 1d0:	str	x0, [sp, #80]
 1d4:	str	wzr, [sp, #88]
 1d8:	ldr	w0, [x19, #24]
 1dc:	cmp	w0, w20
 1e0:	b.cs	224 <lprofBufferIOWrite+0x94>  // b.hs, b.nlast
 1e4:	ldr	x0, [x19]
 1e8:	ldr	x3, [x0]
 1ec:	mov	w2, #0x1                   	// #1
 1f0:	add	x1, sp, #0x40
 1f4:	blr	x3
 1f8:	cmp	w0, #0x0
 1fc:	csetm	w0, ne  // ne = any
 200:	ldp	x19, x20, [sp, #16]
 204:	ldr	x21, [sp, #32]
 208:	ldp	x29, x30, [sp], #96
 20c:	ret
 210:	mov	x0, x19
 214:	bl	124 <lprofBufferIOFlush>
 218:	cbz	w0, 1c0 <lprofBufferIOWrite+0x30>
 21c:	mov	w0, #0xffffffff            	// #-1
 220:	b	200 <lprofBufferIOWrite+0x70>
 224:	ldr	w0, [x19, #28]
 228:	ldr	x1, [x19, #16]
 22c:	add	x20, sp, #0x30
 230:	add	x1, x1, x0
 234:	mov	x0, x20
 238:	bl	0 <initBufferWriter>
 23c:	mov	w2, #0x1                   	// #1
 240:	add	x1, sp, #0x40
 244:	mov	x0, x20
 248:	bl	0 <lprofBufferWriter>
 24c:	ldr	x1, [x19, #16]
 250:	ldr	x0, [sp, #56]
 254:	sub	x0, x0, x1
 258:	str	w0, [x19, #28]
 25c:	mov	w0, #0x0                   	// #0
 260:	b	200 <lprofBufferIOWrite+0x70>

0000000000000264 <writeOneValueProfData>:
 264:	stp	x29, x30, [sp, #-176]!
 268:	mov	x29, sp
 26c:	stp	x19, x20, [sp, #16]
 270:	stp	x21, x22, [sp, #32]
 274:	stp	x23, x24, [sp, #48]
 278:	stp	x25, x26, [sp, #64]
 27c:	stp	x27, x28, [sp, #80]
 280:	mov	x24, x0
 284:	mov	x22, x1
 288:	mov	x21, x2
 28c:	add	x26, x2, #0x2c
 290:	add	x20, x29, #0x98
 294:	add	x23, x2, #0x30
 298:	mov	x19, x26
 29c:	b	2d8 <writeOneValueProfData+0x74>
 2a0:	ldr	x1, [x22, #8]
 2a4:	blr	x1
 2a8:	sub	w2, w0, #0x8
 2ac:	add	x0, x2, #0xf
 2b0:	and	x0, x0, #0x1fffffff0
 2b4:	sub	sp, sp, x0
 2b8:	mov	x0, sp
 2bc:	str	x0, [x20]
 2c0:	mov	w1, #0x0                   	// #0
 2c4:	bl	0 <memset>
 2c8:	add	x19, x19, #0x2
 2cc:	add	x20, x20, #0x8
 2d0:	cmp	x19, x23
 2d4:	b.eq	2e8 <writeOneValueProfData+0x84>  // b.none
 2d8:	ldrh	w0, [x19]
 2dc:	cbnz	w0, 2a0 <writeOneValueProfData+0x3c>
 2e0:	str	xzr, [x20]
 2e4:	b	2c8 <writeOneValueProfData+0x64>
 2e8:	ldr	x2, [x22]
 2ec:	add	x1, x29, #0x98
 2f0:	mov	x0, x21
 2f4:	blr	x2
 2f8:	mov	w19, w0
 2fc:	str	wzr, [x29, #116]
 300:	cbz	w0, 384 <writeOneValueProfData+0x120>
 304:	ldr	x0, [x22, #32]
 308:	blr	x0
 30c:	str	w0, [x29, #168]
 310:	str	w19, [x29, #172]
 314:	mov	w2, #0x8                   	// #8
 318:	add	x1, x29, #0xa8
 31c:	mov	x0, x24
 320:	bl	190 <lprofBufferIOWrite>
 324:	str	w0, [x29, #116]
 328:	cbnz	w0, 488 <writeOneValueProfData+0x224>
 32c:	ldr	x1, [x22, #16]
 330:	add	x0, x29, #0xa8
 334:	blr	x1
 338:	add	x1, x29, #0xb0
 33c:	cmp	x1, x0
 340:	b.ne	494 <writeOneValueProfData+0x230>  // b.any
 344:	str	xzr, [x29, #120]
 348:	add	x0, x29, #0x88
 34c:	str	x0, [x29, #96]
 350:	adrp	x23, 0 <lprofBufferWriter>
 354:	add	x23, x23, #0x0
 358:	add	x23, x23, #0x38
 35c:	ldr	w27, [x29, #120]
 360:	str	x26, [x29, #104]
 364:	ldrh	w0, [x26]
 368:	cbnz	w0, 3a8 <writeOneValueProfData+0x144>
 36c:	ldr	x0, [x29, #120]
 370:	add	x0, x0, #0x1
 374:	str	x0, [x29, #120]
 378:	add	x26, x26, #0x2
 37c:	cmp	x0, #0x2
 380:	b.ne	35c <writeOneValueProfData+0xf8>  // b.any
 384:	ldr	w0, [x29, #116]
 388:	mov	sp, x29
 38c:	ldp	x19, x20, [sp, #16]
 390:	ldp	x21, x22, [sp, #32]
 394:	ldp	x23, x24, [sp, #48]
 398:	ldp	x25, x26, [sp, #64]
 39c:	ldp	x27, x28, [sp, #80]
 3a0:	ldp	x29, x30, [sp], #176
 3a4:	ret
 3a8:	ldr	x19, [x29, #120]
 3ac:	str	w19, [x29, #136]
 3b0:	str	w0, [x29, #140]
 3b4:	mov	w2, #0x8                   	// #8
 3b8:	ldr	x1, [x29, #96]
 3bc:	mov	x0, x24
 3c0:	bl	190 <lprofBufferIOWrite>
 3c4:	cbnz	w0, 47c <writeOneValueProfData+0x218>
 3c8:	ldr	x1, [x22, #8]
 3cc:	ldr	x20, [x29, #104]
 3d0:	ldrh	w0, [x20]
 3d4:	blr	x1
 3d8:	sub	w2, w0, #0x8
 3dc:	add	x0, x29, #0x98
 3e0:	ldr	x1, [x0, x19, lsl #3]
 3e4:	mov	x0, x24
 3e8:	bl	190 <lprofBufferIOWrite>
 3ec:	cbnz	w0, 47c <writeOneValueProfData+0x218>
 3f0:	ldrh	w0, [x20]
 3f4:	cbz	w0, 36c <writeOneValueProfData+0x108>
 3f8:	mov	w25, #0x0                   	// #0
 3fc:	mov	w28, #0x10                  	// #16
 400:	b	418 <writeOneValueProfData+0x1b4>
 404:	add	w25, w25, #0x1
 408:	ldr	x0, [x29, #104]
 40c:	ldrh	w0, [x0]
 410:	cmp	w0, w25
 414:	b.ls	36c <writeOneValueProfData+0x108>  // b.plast
 418:	ldr	x2, [x22, #24]
 41c:	mov	w1, w25
 420:	mov	w0, w27
 424:	blr	x2
 428:	mov	w19, w0
 42c:	cbz	w0, 404 <writeOneValueProfData+0x1a0>
 430:	mov	x21, #0x0                   	// #0
 434:	cmp	w19, #0x10
 438:	csel	w20, w19, w28, ls  // ls = plast
 43c:	ldr	x5, [x22, #40]
 440:	mov	w4, w20
 444:	mov	x3, x21
 448:	mov	x2, x23
 44c:	mov	w1, w25
 450:	mov	w0, w27
 454:	blr	x5
 458:	mov	x21, x0
 45c:	lsl	w2, w20, #4
 460:	mov	x1, x23
 464:	mov	x0, x24
 468:	bl	190 <lprofBufferIOWrite>
 46c:	cbnz	w0, 47c <writeOneValueProfData+0x218>
 470:	subs	w19, w19, w20
 474:	b.ne	434 <writeOneValueProfData+0x1d0>  // b.any
 478:	b	404 <writeOneValueProfData+0x1a0>
 47c:	mov	w0, #0xffffffff            	// #-1
 480:	str	w0, [x29, #116]
 484:	b	384 <writeOneValueProfData+0x120>
 488:	mov	w0, #0xffffffff            	// #-1
 48c:	str	w0, [x29, #116]
 490:	b	384 <writeOneValueProfData+0x120>
 494:	mov	w0, #0xffffffff            	// #-1
 498:	str	w0, [x29, #116]
 49c:	b	384 <writeOneValueProfData+0x120>

00000000000004a0 <lprofWriteDataImpl>:
 4a0:	stp	x29, x30, [sp, #-432]!
 4a4:	mov	x29, sp
 4a8:	stp	x19, x20, [sp, #16]
 4ac:	stp	x21, x22, [sp, #32]
 4b0:	stp	x23, x24, [sp, #48]
 4b4:	stp	x25, x26, [sp, #64]
 4b8:	str	x27, [sp, #80]
 4bc:	mov	x27, x0
 4c0:	mov	x19, x1
 4c4:	mov	x24, x2
 4c8:	mov	x26, x3
 4cc:	mov	x20, x4
 4d0:	mov	x25, x5
 4d4:	mov	x23, x6
 4d8:	mov	x22, x7
 4dc:	mov	x1, x2
 4e0:	mov	x0, x19
 4e4:	bl	0 <__llvm_profile_get_data_size>
 4e8:	cbnz	x0, 510 <lprofWriteDataImpl+0x70>
 4ec:	mov	w20, #0x0                   	// #0
 4f0:	mov	w0, w20
 4f4:	ldp	x19, x20, [sp, #16]
 4f8:	ldp	x21, x22, [sp, #32]
 4fc:	ldp	x23, x24, [sp, #48]
 500:	ldp	x25, x26, [sp, #64]
 504:	ldr	x27, [sp, #80]
 508:	ldp	x29, x30, [sp], #432
 50c:	ret
 510:	mov	x21, x0
 514:	sub	x20, x20, x26
 518:	asr	x20, x20, #3
 51c:	sub	x22, x22, x23
 520:	add	x5, sp, #0x148
 524:	add	x4, sp, #0x150
 528:	add	x3, sp, #0x158
 52c:	mov	x2, x22
 530:	mov	x1, x20
 534:	bl	0 <__llvm_profile_get_padding_sizes_for_counters>
 538:	bl	0 <__llvm_profile_get_magic>
 53c:	str	x0, [sp, #352]
 540:	bl	0 <__llvm_profile_get_version>
 544:	str	x0, [sp, #360]
 548:	str	x21, [sp, #368]
 54c:	ldr	x2, [sp, #344]
 550:	str	x2, [sp, #376]
 554:	str	x20, [sp, #384]
 558:	ldr	x1, [sp, #336]
 55c:	str	x1, [sp, #392]
 560:	str	x22, [sp, #400]
 564:	str	x26, [sp, #408]
 568:	str	x23, [sp, #416]
 56c:	mov	x0, #0x1                   	// #1
 570:	str	x0, [sp, #424]
 574:	add	x3, sp, #0x160
 578:	str	x3, [sp, #104]
 57c:	mov	x3, #0x50                  	// #80
 580:	str	x3, [sp, #112]
 584:	str	x0, [sp, #120]
 588:	str	wzr, [sp, #128]
 58c:	str	x19, [sp, #136]
 590:	mov	x3, #0x30                  	// #48
 594:	str	x3, [sp, #144]
 598:	str	x21, [sp, #152]
 59c:	str	wzr, [sp, #160]
 5a0:	str	xzr, [sp, #168]
 5a4:	str	x0, [sp, #176]
 5a8:	str	x2, [sp, #184]
 5ac:	str	w0, [sp, #192]
 5b0:	str	x26, [sp, #200]
 5b4:	mov	x2, #0x8                   	// #8
 5b8:	str	x2, [sp, #208]
 5bc:	str	x20, [sp, #216]
 5c0:	str	wzr, [sp, #224]
 5c4:	str	xzr, [sp, #232]
 5c8:	str	x0, [sp, #240]
 5cc:	str	x1, [sp, #248]
 5d0:	str	w0, [sp, #256]
 5d4:	ldr	w0, [sp, #432]
 5d8:	cmp	w0, #0x0
 5dc:	csel	x23, x23, xzr, eq  // eq = none
 5e0:	str	x23, [sp, #264]
 5e4:	mov	x0, #0x1                   	// #1
 5e8:	str	x0, [sp, #272]
 5ec:	str	x22, [sp, #280]
 5f0:	str	wzr, [sp, #288]
 5f4:	str	xzr, [sp, #296]
 5f8:	str	x0, [sp, #304]
 5fc:	ldr	x1, [sp, #328]
 600:	str	x1, [sp, #312]
 604:	str	w0, [sp, #320]
 608:	ldr	x3, [x27]
 60c:	mov	w2, #0x7                   	// #7
 610:	add	x1, sp, #0x68
 614:	mov	x0, x27
 618:	blr	x3
 61c:	cbnz	w0, 684 <lprofWriteDataImpl+0x1e4>
 620:	bl	0 <__llvm_profile_is_continuous_mode_enabled>
 624:	cmp	w0, #0x0
 628:	mov	w20, #0x0                   	// #0
 62c:	ccmp	x25, #0x0, #0x4, eq  // eq = none
 630:	b.eq	4f0 <lprofWriteDataImpl+0x50>  // b.none
 634:	mov	x0, x27
 638:	bl	84 <lprofCreateBufferIO>
 63c:	mov	x21, x0
 640:	cmp	x19, x24
 644:	b.cs	668 <lprofWriteDataImpl+0x1c8>  // b.hs, b.nlast
 648:	mov	x2, x19
 64c:	mov	x1, x25
 650:	mov	x0, x21
 654:	bl	264 <writeOneValueProfData>
 658:	cbnz	w0, 68c <lprofWriteDataImpl+0x1ec>
 65c:	add	x19, x19, #0x30
 660:	cmp	x24, x19
 664:	b.hi	648 <lprofWriteDataImpl+0x1a8>  // b.pmore
 668:	mov	x0, x21
 66c:	bl	124 <lprofBufferIOFlush>
 670:	mov	w20, w0
 674:	cbnz	w0, 694 <lprofWriteDataImpl+0x1f4>
 678:	mov	x0, x21
 67c:	bl	d0 <lprofDeleteBufferIO>
 680:	b	4f0 <lprofWriteDataImpl+0x50>
 684:	mov	w20, #0xffffffff            	// #-1
 688:	b	4f0 <lprofWriteDataImpl+0x50>
 68c:	mov	w20, #0xffffffff            	// #-1
 690:	b	4f0 <lprofWriteDataImpl+0x50>
 694:	mov	w20, #0xffffffff            	// #-1
 698:	b	4f0 <lprofWriteDataImpl+0x50>

000000000000069c <lprofWriteData>:
 69c:	sub	sp, sp, #0x60
 6a0:	stp	x29, x30, [sp, #16]
 6a4:	add	x29, sp, #0x10
 6a8:	stp	x19, x20, [sp, #32]
 6ac:	stp	x21, x22, [sp, #48]
 6b0:	stp	x23, x24, [sp, #64]
 6b4:	stp	x25, x26, [sp, #80]
 6b8:	mov	x19, x0
 6bc:	mov	x24, x1
 6c0:	mov	w26, w2
 6c4:	bl	0 <__llvm_profile_begin_data>
 6c8:	mov	x20, x0
 6cc:	bl	0 <__llvm_profile_end_data>
 6d0:	mov	x21, x0
 6d4:	bl	0 <__llvm_profile_begin_counters>
 6d8:	mov	x22, x0
 6dc:	bl	0 <__llvm_profile_end_counters>
 6e0:	mov	x23, x0
 6e4:	bl	0 <__llvm_profile_begin_names>
 6e8:	mov	x25, x0
 6ec:	bl	0 <__llvm_profile_end_names>
 6f0:	str	w26, [sp]
 6f4:	mov	x7, x0
 6f8:	mov	x6, x25
 6fc:	mov	x5, x24
 700:	mov	x4, x23
 704:	mov	x3, x22
 708:	mov	x2, x21
 70c:	mov	x1, x20
 710:	mov	x0, x19
 714:	bl	4a0 <lprofWriteDataImpl>
 718:	ldp	x19, x20, [sp, #32]
 71c:	ldp	x21, x22, [sp, #48]
 720:	ldp	x23, x24, [sp, #64]
 724:	ldp	x25, x26, [sp, #80]
 728:	ldp	x29, x30, [sp, #16]
 72c:	add	sp, sp, #0x60
 730:	ret

InstrProfilingPlatformDarwin.c.o:     file format elf64-littleaarch64


InstrProfilingPlatformFuchsia.c.o:     file format elf64-littleaarch64


InstrProfilingPlatformLinux.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__llvm_profile_begin_data>:
   0:	adrp	x0, 0 <__start___llvm_prf_data>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <__llvm_profile_end_data>:
   c:	adrp	x0, 0 <__stop___llvm_prf_data>
  10:	add	x0, x0, #0x0
  14:	ret

0000000000000018 <__llvm_profile_begin_names>:
  18:	adrp	x0, 0 <__start___llvm_prf_names>
  1c:	add	x0, x0, #0x0
  20:	ret

0000000000000024 <__llvm_profile_end_names>:
  24:	adrp	x0, 0 <__stop___llvm_prf_names>
  28:	add	x0, x0, #0x0
  2c:	ret

0000000000000030 <__llvm_profile_begin_counters>:
  30:	adrp	x0, 0 <__start___llvm_prf_cnts>
  34:	add	x0, x0, #0x0
  38:	ret

000000000000003c <__llvm_profile_end_counters>:
  3c:	adrp	x0, 0 <__stop___llvm_prf_cnts>
  40:	add	x0, x0, #0x0
  44:	ret

0000000000000048 <__llvm_profile_begin_orderfile>:
  48:	adrp	x0, 0 <__start___llvm_orderfile>
  4c:	add	x0, x0, #0x0
  50:	ret

0000000000000054 <__llvm_profile_begin_vnodes>:
  54:	adrp	x0, 0 <__start___llvm_prf_vnds>
  58:	add	x0, x0, #0x0
  5c:	ret

0000000000000060 <__llvm_profile_end_vnodes>:
  60:	adrp	x0, 0 <__stop___llvm_prf_vnds>
  64:	add	x0, x0, #0x0
  68:	ret

InstrProfilingPlatformOther.c.o:     file format elf64-littleaarch64


InstrProfilingPlatformWindows.c.o:     file format elf64-littleaarch64


InstrProfilingRuntime.cpp.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_GLOBAL__sub_I_InstrProfilingRuntime.cpp>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	bl	0 <__llvm_profile_initialize_file>
   c:	bl	0 <__llvm_profile_is_continuous_mode_enabled>
  10:	cbz	w0, 1c <_GLOBAL__sub_I_InstrProfilingRuntime.cpp+0x1c>
  14:	ldp	x29, x30, [sp], #16
  18:	ret
  1c:	bl	0 <__llvm_profile_register_write_file_atexit>
  20:	b	14 <_GLOBAL__sub_I_InstrProfilingRuntime.cpp+0x14>

InstrProfilingUtil.c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__llvm_profile_recursive_mkdir>:
   0:	ldrb	w1, [x0, #1]
   4:	cbz	w1, 68 <__llvm_profile_recursive_mkdir+0x68>
   8:	stp	x29, x30, [sp, #-48]!
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x20, x0
  1c:	add	x19, x0, #0x1
  20:	adrp	x21, 0 <__llvm_profile_recursive_mkdir>
  24:	ldr	x21, [x21]
  28:	mov	w22, #0x2f                  	// #47
  2c:	b	38 <__llvm_profile_recursive_mkdir+0x38>
  30:	ldrb	w1, [x19, #1]!
  34:	cbz	w1, 58 <__llvm_profile_recursive_mkdir+0x58>
  38:	cmp	w1, #0x2f
  3c:	b.ne	30 <__llvm_profile_recursive_mkdir+0x30>  // b.any
  40:	strb	wzr, [x19]
  44:	ldr	w1, [x21]
  48:	mov	x0, x20
  4c:	bl	0 <mkdir>
  50:	strb	w22, [x19]
  54:	b	30 <__llvm_profile_recursive_mkdir+0x30>
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x21, x22, [sp, #32]
  60:	ldp	x29, x30, [sp], #48
  64:	ret
  68:	ret

000000000000006c <__llvm_profile_set_dir_mode>:
  6c:	adrp	x1, 0 <__llvm_profile_recursive_mkdir>
  70:	ldr	x1, [x1]
  74:	str	w0, [x1]
  78:	ret

000000000000007c <__llvm_profile_get_dir_mode>:
  7c:	adrp	x0, 0 <__llvm_profile_recursive_mkdir>
  80:	ldr	x0, [x0]
  84:	ldr	w0, [x0]
  88:	ret

000000000000008c <lprofGetHostName>:
  8c:	stp	x29, x30, [sp, #-432]!
  90:	mov	x29, sp
  94:	stp	x19, x20, [sp, #16]
  98:	mov	x19, x0
  9c:	mov	w20, w1
  a0:	add	x0, sp, #0x28
  a4:	bl	0 <uname>
  a8:	tbz	w0, #31, b8 <lprofGetHostName+0x2c>
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x29, x30, [sp], #432
  b4:	ret
  b8:	sxtw	x2, w20
  bc:	add	x1, sp, #0x69
  c0:	mov	x0, x19
  c4:	bl	0 <strncpy>
  c8:	mov	w0, #0x0                   	// #0
  cc:	b	ac <lprofGetHostName+0x20>

00000000000000d0 <lprofLockFd>:
  d0:	stp	x29, x30, [sp, #-80]!
  d4:	mov	x29, sp
  d8:	stp	x19, x20, [sp, #16]
  dc:	str	x21, [sp, #32]
  e0:	mov	w19, w0
  e4:	strh	wzr, [sp, #50]
  e8:	str	xzr, [sp, #56]
  ec:	str	xzr, [sp, #64]
  f0:	bl	0 <getpid>
  f4:	str	w0, [sp, #72]
  f8:	mov	w0, #0x1                   	// #1
  fc:	strh	w0, [sp, #48]
 100:	add	x21, sp, #0x30
 104:	mov	w20, #0x7                   	// #7
 108:	mov	x2, x21
 10c:	mov	w1, w20
 110:	mov	w0, w19
 114:	bl	0 <fcntl>
 118:	cmn	w0, #0x1
 11c:	b.ne	13c <lprofLockFd+0x6c>  // b.any
 120:	bl	0 <__errno_location>
 124:	ldr	w1, [x0]
 128:	cmp	w1, #0x4
 12c:	b.eq	108 <lprofLockFd+0x38>  // b.none
 130:	cmp	w1, #0x25
 134:	csetm	w0, eq  // eq = none
 138:	b	140 <lprofLockFd+0x70>
 13c:	mov	w0, #0x0                   	// #0
 140:	ldp	x19, x20, [sp, #16]
 144:	ldr	x21, [sp, #32]
 148:	ldp	x29, x30, [sp], #80
 14c:	ret

0000000000000150 <lprofUnlockFd>:
 150:	stp	x29, x30, [sp, #-80]!
 154:	mov	x29, sp
 158:	stp	x19, x20, [sp, #16]
 15c:	str	x21, [sp, #32]
 160:	mov	w19, w0
 164:	strh	wzr, [sp, #50]
 168:	str	xzr, [sp, #56]
 16c:	str	xzr, [sp, #64]
 170:	bl	0 <getpid>
 174:	str	w0, [sp, #72]
 178:	mov	w0, #0x2                   	// #2
 17c:	strh	w0, [sp, #48]
 180:	add	x21, sp, #0x30
 184:	mov	w20, #0x7                   	// #7
 188:	mov	x2, x21
 18c:	mov	w1, w20
 190:	mov	w0, w19
 194:	bl	0 <fcntl>
 198:	cmn	w0, #0x1
 19c:	b.ne	1bc <lprofUnlockFd+0x6c>  // b.any
 1a0:	bl	0 <__errno_location>
 1a4:	ldr	w1, [x0]
 1a8:	cmp	w1, #0x4
 1ac:	b.eq	188 <lprofUnlockFd+0x38>  // b.none
 1b0:	cmp	w1, #0x25
 1b4:	csetm	w0, eq  // eq = none
 1b8:	b	1c0 <lprofUnlockFd+0x70>
 1bc:	mov	w0, #0x0                   	// #0
 1c0:	ldp	x19, x20, [sp, #16]
 1c4:	ldr	x21, [sp, #32]
 1c8:	ldp	x29, x30, [sp], #80
 1cc:	ret

00000000000001d0 <lprofLockFileHandle>:
 1d0:	stp	x29, x30, [sp, #-16]!
 1d4:	mov	x29, sp
 1d8:	bl	0 <fileno>
 1dc:	bl	d0 <lprofLockFd>
 1e0:	ldp	x29, x30, [sp], #16
 1e4:	ret

00000000000001e8 <lprofUnlockFileHandle>:
 1e8:	stp	x29, x30, [sp, #-16]!
 1ec:	mov	x29, sp
 1f0:	bl	0 <fileno>
 1f4:	bl	150 <lprofUnlockFd>
 1f8:	ldp	x29, x30, [sp], #16
 1fc:	ret

0000000000000200 <lprofOpenFileEx>:
 200:	stp	x29, x30, [sp, #-32]!
 204:	mov	x29, sp
 208:	mov	w2, #0x1b6                 	// #438
 20c:	mov	w1, #0x42                  	// #66
 210:	bl	0 <open>
 214:	tbnz	w0, #31, 268 <lprofOpenFileEx+0x68>
 218:	str	x19, [sp, #16]
 21c:	mov	w19, w0
 220:	bl	d0 <lprofLockFd>
 224:	cbnz	w0, 244 <lprofOpenFileEx+0x44>
 228:	adrp	x1, 0 <__llvm_profile_recursive_mkdir>
 22c:	add	x1, x1, #0x0
 230:	mov	w0, w19
 234:	bl	0 <fdopen>
 238:	ldr	x19, [sp, #16]
 23c:	ldp	x29, x30, [sp], #32
 240:	ret
 244:	adrp	x2, 0 <__llvm_profile_recursive_mkdir>
 248:	add	x2, x2, #0x0
 24c:	adrp	x1, 0 <__llvm_profile_recursive_mkdir>
 250:	add	x1, x1, #0x0
 254:	adrp	x0, 0 <stderr>
 258:	ldr	x0, [x0]
 25c:	ldr	x0, [x0]
 260:	bl	0 <fprintf>
 264:	b	228 <lprofOpenFileEx+0x28>
 268:	mov	x0, #0x0                   	// #0
 26c:	b	23c <lprofOpenFileEx+0x3c>

0000000000000270 <lprofGetPathPrefix>:
 270:	stp	x29, x30, [sp, #-48]!
 274:	mov	x29, sp
 278:	stp	x19, x20, [sp, #16]
 27c:	str	x21, [sp, #32]
 280:	mov	x21, x0
 284:	mov	x20, x1
 288:	adrp	x0, 0 <__llvm_profile_recursive_mkdir>
 28c:	add	x0, x0, #0x0
 290:	bl	0 <getenv>
 294:	mov	x19, x0
 298:	adrp	x0, 0 <__llvm_profile_recursive_mkdir>
 29c:	add	x0, x0, #0x0
 2a0:	bl	0 <getenv>
 2a4:	str	xzr, [x20]
 2a8:	str	wzr, [x21]
 2ac:	cbz	x19, 2e0 <lprofGetPathPrefix+0x70>
 2b0:	ldrb	w1, [x19]
 2b4:	cbz	w1, 2f4 <lprofGetPathPrefix+0x84>
 2b8:	cbz	x0, 2d4 <lprofGetPathPrefix+0x64>
 2bc:	mov	w2, #0xa                   	// #10
 2c0:	mov	x1, #0x0                   	// #0
 2c4:	bl	0 <strtol>
 2c8:	cmp	w0, #0x0
 2cc:	csel	w2, w0, wzr, ge  // ge = tcont
 2d0:	str	w2, [x21]
 2d4:	mov	x0, x19
 2d8:	bl	0 <strlen>
 2dc:	str	x0, [x20]
 2e0:	mov	x0, x19
 2e4:	ldp	x19, x20, [sp, #16]
 2e8:	ldr	x21, [sp, #32]
 2ec:	ldp	x29, x30, [sp], #48
 2f0:	ret
 2f4:	mov	x19, #0x0                   	// #0
 2f8:	b	2e0 <lprofGetPathPrefix+0x70>

00000000000002fc <lprofApplyPathPrefix>:
 2fc:	stp	x29, x30, [sp, #-48]!
 300:	mov	x29, sp
 304:	stp	x19, x20, [sp, #16]
 308:	stp	x21, x22, [sp, #32]
 30c:	mov	x22, x0
 310:	mov	x19, x1
 314:	mov	x21, x2
 318:	mov	x20, x3
 31c:	cmp	w4, #0x0
 320:	b.le	358 <lprofApplyPathPrefix+0x5c>
 324:	add	x5, x1, #0x1
 328:	mov	w7, #0x0                   	// #0
 32c:	b	33c <lprofApplyPathPrefix+0x40>
 330:	add	x5, x5, #0x1
 334:	cmp	w7, w4
 338:	b.ge	358 <lprofApplyPathPrefix+0x5c>  // b.tcont
 33c:	ldrb	w6, [x5]
 340:	cbz	w6, 358 <lprofApplyPathPrefix+0x5c>
 344:	cmp	w6, #0x2f
 348:	b.ne	330 <lprofApplyPathPrefix+0x34>  // b.any
 34c:	add	w7, w7, #0x1
 350:	mov	x19, x5
 354:	b	330 <lprofApplyPathPrefix+0x34>
 358:	mov	x2, x20
 35c:	mov	x1, x21
 360:	mov	x0, x22
 364:	bl	0 <memcpy>
 368:	add	x21, x21, x20
 36c:	ldurb	w0, [x21, #-1]
 370:	cmp	w0, #0x2f
 374:	b.eq	384 <lprofApplyPathPrefix+0x88>  // b.none
 378:	mov	w0, #0x2f                  	// #47
 37c:	strb	w0, [x22, x20]
 380:	add	x20, x20, #0x1
 384:	mov	x0, x19
 388:	bl	0 <strlen>
 38c:	add	x2, x0, #0x1
 390:	mov	x1, x19
 394:	add	x0, x22, x20
 398:	bl	0 <memcpy>
 39c:	ldp	x19, x20, [sp, #16]
 3a0:	ldp	x21, x22, [sp, #32]
 3a4:	ldp	x29, x30, [sp], #48
 3a8:	ret

00000000000003ac <lprofFindFirstDirSeparator>:
 3ac:	stp	x29, x30, [sp, #-16]!
 3b0:	mov	x29, sp
 3b4:	mov	w1, #0x2f                  	// #47
 3b8:	bl	0 <strchr>
 3bc:	ldp	x29, x30, [sp], #16
 3c0:	ret

00000000000003c4 <lprofFindLastDirSeparator>:
 3c4:	stp	x29, x30, [sp, #-16]!
 3c8:	mov	x29, sp
 3cc:	mov	w1, #0x2f                  	// #47
 3d0:	bl	0 <strrchr>
 3d4:	ldp	x29, x30, [sp], #16
 3d8:	ret

00000000000003dc <lprofSuspendSigKill>:
 3dc:	stp	x29, x30, [sp, #-32]!
 3e0:	mov	x29, sp
 3e4:	str	wzr, [sp, #28]
 3e8:	add	x1, sp, #0x1c
 3ec:	mov	w0, #0x2                   	// #2
 3f0:	bl	0 <prctl>
 3f4:	cbnz	w0, 404 <lprofSuspendSigKill+0x28>
 3f8:	ldr	w0, [sp, #28]
 3fc:	cmp	w0, #0x9
 400:	b.eq	418 <lprofSuspendSigKill+0x3c>  // b.none
 404:	ldr	w0, [sp, #28]
 408:	cmp	w0, #0x9
 40c:	cset	w0, eq  // eq = none
 410:	ldp	x29, x30, [sp], #32
 414:	ret
 418:	mov	w1, #0x0                   	// #0
 41c:	mov	w0, #0x1                   	// #1
 420:	bl	0 <prctl>
 424:	b	404 <lprofSuspendSigKill+0x28>

0000000000000428 <lprofRestoreSigKill>:
 428:	stp	x29, x30, [sp, #-16]!
 42c:	mov	x29, sp
 430:	mov	w1, #0x9                   	// #9
 434:	mov	w0, #0x1                   	// #1
 438:	bl	0 <prctl>
 43c:	ldp	x29, x30, [sp], #16
 440:	ret
