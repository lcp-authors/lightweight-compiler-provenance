
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libgcc_s.so.1_clang_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000002a68 <.init>:
    2a68:	stp	x29, x30, [sp, #-16]!
    2a6c:	mov	x29, sp
    2a70:	bl	2db0 <_Unwind_GetDataRelBase@plt+0x10>
    2a74:	ldp	x29, x30, [sp], #16
    2a78:	ret

Disassembly of section .plt:

0000000000002a80 <memcpy@plt-0x20>:
    2a80:	stp	x16, x30, [sp, #-16]!
    2a84:	adrp	x16, 22000 <__emutls_register_common@@GCC_4.3.0+0x11ac0>
    2a88:	ldr	x17, [x16, #4088]
    2a8c:	add	x16, x16, #0xff8
    2a90:	br	x17
    2a94:	nop
    2a98:	nop
    2a9c:	nop

0000000000002aa0 <memcpy@plt>:
    2aa0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2aa4:	ldr	x17, [x16]
    2aa8:	add	x16, x16, #0x0
    2aac:	br	x17

0000000000002ab0 <_Unwind_GetRegionStart@plt>:
    2ab0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2ab4:	ldr	x17, [x16, #8]
    2ab8:	add	x16, x16, #0x8
    2abc:	br	x17

0000000000002ac0 <strlen@plt>:
    2ac0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2ac4:	ldr	x17, [x16, #16]
    2ac8:	add	x16, x16, #0x10
    2acc:	br	x17

0000000000002ad0 <_Unwind_RaiseException@plt>:
    2ad0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2ad4:	ldr	x17, [x16, #24]
    2ad8:	add	x16, x16, #0x18
    2adc:	br	x17

0000000000002ae0 <_Unwind_SetIP@plt>:
    2ae0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2ae4:	ldr	x17, [x16, #32]
    2ae8:	add	x16, x16, #0x20
    2aec:	br	x17

0000000000002af0 <_Unwind_GetLanguageSpecificData@plt>:
    2af0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2af4:	ldr	x17, [x16, #40]
    2af8:	add	x16, x16, #0x28
    2afc:	br	x17

0000000000002b00 <__floatunditf@plt>:
    2b00:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2b04:	ldr	x17, [x16, #48]
    2b08:	add	x16, x16, #0x30
    2b0c:	br	x17

0000000000002b10 <__multf3@plt>:
    2b10:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2b14:	ldr	x17, [x16, #56]
    2b18:	add	x16, x16, #0x38
    2b1c:	br	x17

0000000000002b20 <__cxa_finalize@plt>:
    2b20:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2b24:	ldr	x17, [x16, #64]
    2b28:	add	x16, x16, #0x40
    2b2c:	br	x17

0000000000002b30 <__eqtf2@plt>:
    2b30:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2b34:	ldr	x17, [x16, #72]
    2b38:	add	x16, x16, #0x48
    2b3c:	br	x17

0000000000002b40 <__floatditf@plt>:
    2b40:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2b44:	ldr	x17, [x16, #80]
    2b48:	add	x16, x16, #0x50
    2b4c:	br	x17

0000000000002b50 <_Unwind_GetTextRelBase@plt>:
    2b50:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2b54:	ldr	x17, [x16, #88]
    2b58:	add	x16, x16, #0x58
    2b5c:	br	x17

0000000000002b60 <__deregister_frame_info_bases@plt>:
    2b60:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2b64:	ldr	x17, [x16, #96]
    2b68:	add	x16, x16, #0x60
    2b6c:	br	x17

0000000000002b70 <malloc@plt>:
    2b70:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2b74:	ldr	x17, [x16, #104]
    2b78:	add	x16, x16, #0x68
    2b7c:	br	x17

0000000000002b80 <pthread_getspecific@plt>:
    2b80:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2b84:	ldr	x17, [x16, #112]
    2b88:	add	x16, x16, #0x70
    2b8c:	br	x17

0000000000002b90 <_Unwind_GetCFA@plt>:
    2b90:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2b94:	ldr	x17, [x16, #120]
    2b98:	add	x16, x16, #0x78
    2b9c:	br	x17

0000000000002ba0 <memset@plt>:
    2ba0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2ba4:	ldr	x17, [x16, #128]
    2ba8:	add	x16, x16, #0x80
    2bac:	br	x17

0000000000002bb0 <__fixunssfti@plt>:
    2bb0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2bb4:	ldr	x17, [x16, #136]
    2bb8:	add	x16, x16, #0x88
    2bbc:	br	x17

0000000000002bc0 <__letf2@plt>:
    2bc0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2bc4:	ldr	x17, [x16, #144]
    2bc8:	add	x16, x16, #0x90
    2bcc:	br	x17

0000000000002bd0 <__register_frame_info_table_bases@plt>:
    2bd0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2bd4:	ldr	x17, [x16, #152]
    2bd8:	add	x16, x16, #0x98
    2bdc:	br	x17

0000000000002be0 <calloc@plt>:
    2be0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2be4:	ldr	x17, [x16, #160]
    2be8:	add	x16, x16, #0xa0
    2bec:	br	x17

0000000000002bf0 <__gttf2@plt>:
    2bf0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2bf4:	ldr	x17, [x16, #168]
    2bf8:	add	x16, x16, #0xa8
    2bfc:	br	x17

0000000000002c00 <_Unwind_GetIPInfo@plt>:
    2c00:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2c04:	ldr	x17, [x16, #176]
    2c08:	add	x16, x16, #0xb0
    2c0c:	br	x17

0000000000002c10 <realloc@plt>:
    2c10:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2c14:	ldr	x17, [x16, #184]
    2c18:	add	x16, x16, #0xb8
    2c1c:	br	x17

0000000000002c20 <__addtf3@plt>:
    2c20:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2c24:	ldr	x17, [x16, #192]
    2c28:	add	x16, x16, #0xc0
    2c2c:	br	x17

0000000000002c30 <pthread_key_create@plt>:
    2c30:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2c34:	ldr	x17, [x16, #200]
    2c38:	add	x16, x16, #0xc8
    2c3c:	br	x17

0000000000002c40 <__gmon_start__@plt>:
    2c40:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2c44:	ldr	x17, [x16, #208]
    2c48:	add	x16, x16, #0xd0
    2c4c:	br	x17

0000000000002c50 <abort@plt>:
    2c50:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2c54:	ldr	x17, [x16, #216]
    2c58:	add	x16, x16, #0xd8
    2c5c:	br	x17

0000000000002c60 <__divtf3@plt>:
    2c60:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2c64:	ldr	x17, [x16, #224]
    2c68:	add	x16, x16, #0xe0
    2c6c:	br	x17

0000000000002c70 <pthread_once@plt>:
    2c70:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2c74:	ldr	x17, [x16, #232]
    2c78:	add	x16, x16, #0xe8
    2c7c:	br	x17

0000000000002c80 <dl_iterate_phdr@plt>:
    2c80:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2c84:	ldr	x17, [x16, #240]
    2c88:	add	x16, x16, #0xf0
    2c8c:	br	x17

0000000000002c90 <__trunctfdf2@plt>:
    2c90:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2c94:	ldr	x17, [x16, #248]
    2c98:	add	x16, x16, #0xf8
    2c9c:	br	x17

0000000000002ca0 <pthread_setspecific@plt>:
    2ca0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2ca4:	ldr	x17, [x16, #256]
    2ca8:	add	x16, x16, #0x100
    2cac:	br	x17

0000000000002cb0 <_Unwind_Find_FDE@plt>:
    2cb0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2cb4:	ldr	x17, [x16, #264]
    2cb8:	add	x16, x16, #0x108
    2cbc:	br	x17

0000000000002cc0 <free@plt>:
    2cc0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2cc4:	ldr	x17, [x16, #272]
    2cc8:	add	x16, x16, #0x110
    2ccc:	br	x17

0000000000002cd0 <__register_frame_info_table@plt>:
    2cd0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2cd4:	ldr	x17, [x16, #280]
    2cd8:	add	x16, x16, #0x118
    2cdc:	br	x17

0000000000002ce0 <__deregister_frame_info@plt>:
    2ce0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2ce4:	ldr	x17, [x16, #288]
    2ce8:	add	x16, x16, #0x120
    2cec:	br	x17

0000000000002cf0 <__lttf2@plt>:
    2cf0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2cf4:	ldr	x17, [x16, #296]
    2cf8:	add	x16, x16, #0x128
    2cfc:	br	x17

0000000000002d00 <__register_frame_info@plt>:
    2d00:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2d04:	ldr	x17, [x16, #304]
    2d08:	add	x16, x16, #0x130
    2d0c:	br	x17

0000000000002d10 <__register_frame_info_bases@plt>:
    2d10:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2d14:	ldr	x17, [x16, #312]
    2d18:	add	x16, x16, #0x138
    2d1c:	br	x17

0000000000002d20 <__fixunsdfti@plt>:
    2d20:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2d24:	ldr	x17, [x16, #320]
    2d28:	add	x16, x16, #0x140
    2d2c:	br	x17

0000000000002d30 <__unordtf2@plt>:
    2d30:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2d34:	ldr	x17, [x16, #328]
    2d38:	add	x16, x16, #0x148
    2d3c:	br	x17

0000000000002d40 <_Unwind_SetGR@plt>:
    2d40:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2d44:	ldr	x17, [x16, #336]
    2d48:	add	x16, x16, #0x150
    2d4c:	br	x17

0000000000002d50 <pthread_mutex_lock@plt>:
    2d50:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2d54:	ldr	x17, [x16, #344]
    2d58:	add	x16, x16, #0x158
    2d5c:	br	x17

0000000000002d60 <pthread_mutex_unlock@plt>:
    2d60:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2d64:	ldr	x17, [x16, #352]
    2d68:	add	x16, x16, #0x160
    2d6c:	br	x17

0000000000002d70 <__floatsitf@plt>:
    2d70:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2d74:	ldr	x17, [x16, #360]
    2d78:	add	x16, x16, #0x168
    2d7c:	br	x17

0000000000002d80 <__subtf3@plt>:
    2d80:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2d84:	ldr	x17, [x16, #368]
    2d88:	add	x16, x16, #0x170
    2d8c:	br	x17

0000000000002d90 <__trunctfsf2@plt>:
    2d90:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2d94:	ldr	x17, [x16, #376]
    2d98:	add	x16, x16, #0x178
    2d9c:	br	x17

0000000000002da0 <_Unwind_GetDataRelBase@plt>:
    2da0:	adrp	x16, 23000 <memcpy@GLIBC_2.17>
    2da4:	ldr	x17, [x16, #384]
    2da8:	add	x16, x16, #0x180
    2dac:	br	x17

Disassembly of section .text:

0000000000002db0 <__multi3@@GCC_3.0-0xd8>:
    2db0:	adrp	x0, 22000 <__emutls_register_common@@GCC_4.3.0+0x11ac0>
    2db4:	ldr	x0, [x0, #4056]
    2db8:	cbz	x0, 2dc0 <_Unwind_GetDataRelBase@plt+0x20>
    2dbc:	b	2c40 <__gmon_start__@plt>
    2dc0:	ret
    2dc4:	nop
    2dc8:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    2dcc:	add	x0, x0, #0x198
    2dd0:	adrp	x1, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    2dd4:	add	x1, x1, #0x198
    2dd8:	cmp	x1, x0
    2ddc:	b.eq	2df4 <_Unwind_GetDataRelBase@plt+0x54>  // b.none
    2de0:	adrp	x1, 22000 <__emutls_register_common@@GCC_4.3.0+0x11ac0>
    2de4:	ldr	x1, [x1, #4040]
    2de8:	cbz	x1, 2df4 <_Unwind_GetDataRelBase@plt+0x54>
    2dec:	mov	x16, x1
    2df0:	br	x16
    2df4:	ret
    2df8:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    2dfc:	add	x0, x0, #0x198
    2e00:	adrp	x1, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    2e04:	add	x1, x1, #0x198
    2e08:	sub	x1, x1, x0
    2e0c:	lsr	x2, x1, #63
    2e10:	add	x1, x2, x1, asr #3
    2e14:	cmp	xzr, x1, asr #1
    2e18:	asr	x1, x1, #1
    2e1c:	b.eq	2e34 <_Unwind_GetDataRelBase@plt+0x94>  // b.none
    2e20:	adrp	x2, 22000 <__emutls_register_common@@GCC_4.3.0+0x11ac0>
    2e24:	ldr	x2, [x2, #4064]
    2e28:	cbz	x2, 2e34 <_Unwind_GetDataRelBase@plt+0x94>
    2e2c:	mov	x16, x2
    2e30:	br	x16
    2e34:	ret
    2e38:	stp	x29, x30, [sp, #-32]!
    2e3c:	mov	x29, sp
    2e40:	str	x19, [sp, #16]
    2e44:	adrp	x19, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    2e48:	ldrb	w0, [x19, #408]
    2e4c:	cbnz	w0, 2e74 <_Unwind_GetDataRelBase@plt+0xd4>
    2e50:	adrp	x0, 22000 <__emutls_register_common@@GCC_4.3.0+0x11ac0>
    2e54:	ldr	x0, [x0, #4048]
    2e58:	cbz	x0, 2e68 <_Unwind_GetDataRelBase@plt+0xc8>
    2e5c:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    2e60:	ldr	x0, [x0, #392]
    2e64:	bl	2b20 <__cxa_finalize@plt>
    2e68:	bl	2dc8 <_Unwind_GetDataRelBase@plt+0x28>
    2e6c:	mov	w0, #0x1                   	// #1
    2e70:	strb	w0, [x19, #408]
    2e74:	ldr	x19, [sp, #16]
    2e78:	ldp	x29, x30, [sp], #32
    2e7c:	ret
    2e80:	b	2df8 <_Unwind_GetDataRelBase@plt+0x58>
    2e84:	nop

0000000000002e88 <__multi3@@GCC_3.0>:
    2e88:	mov	x5, x0
    2e8c:	and	x0, x2, #0xffffffff
    2e90:	and	x7, x5, #0xffffffff
    2e94:	lsr	x9, x2, #32
    2e98:	lsr	x6, x5, #32
    2e9c:	mov	x8, #0x100000000           	// #4294967296
    2ea0:	mul	x4, x7, x0
    2ea4:	mul	x0, x6, x0
    2ea8:	madd	x7, x7, x9, x0
    2eac:	and	x10, x4, #0xffffffff
    2eb0:	mul	x6, x6, x9
    2eb4:	add	x4, x7, x4, lsr #32
    2eb8:	add	x8, x6, x8
    2ebc:	cmp	x0, x4
    2ec0:	csel	x6, x8, x6, hi  // hi = pmore
    2ec4:	add	x0, x10, x4, lsl #32
    2ec8:	add	x4, x6, x4, lsr #32
    2ecc:	madd	x4, x5, x3, x4
    2ed0:	madd	x1, x2, x1, x4
    2ed4:	ret

0000000000002ed8 <__negti2@@GCC_3.0>:
    2ed8:	cmp	x0, #0x0
    2edc:	neg	x1, x1
    2ee0:	cset	x2, ne  // ne = any
    2ee4:	neg	x0, x0
    2ee8:	sub	x1, x1, x2
    2eec:	ret

0000000000002ef0 <__lshrti3@@GCC_3.0>:
    2ef0:	mov	x4, x1
    2ef4:	cbz	x2, 2f18 <__lshrti3@@GCC_3.0+0x28>
    2ef8:	mov	x3, #0x40                  	// #64
    2efc:	sub	x3, x3, x2
    2f00:	cmp	x3, #0x0
    2f04:	b.le	2f1c <__lshrti3@@GCC_3.0+0x2c>
    2f08:	lsl	x3, x1, x3
    2f0c:	lsr	x0, x0, x2
    2f10:	orr	x0, x0, x3
    2f14:	lsr	x1, x1, x2
    2f18:	ret
    2f1c:	neg	w0, w3
    2f20:	mov	x1, #0x0                   	// #0
    2f24:	lsr	x0, x4, x0
    2f28:	ret
    2f2c:	nop

0000000000002f30 <__ashlti3@@GCC_3.0>:
    2f30:	mov	x4, x0
    2f34:	cbz	x2, 2f58 <__ashlti3@@GCC_3.0+0x28>
    2f38:	mov	x3, #0x40                  	// #64
    2f3c:	sub	x3, x3, x2
    2f40:	cmp	x3, #0x0
    2f44:	b.le	2f5c <__ashlti3@@GCC_3.0+0x2c>
    2f48:	lsr	x3, x0, x3
    2f4c:	lsl	x1, x1, x2
    2f50:	orr	x1, x1, x3
    2f54:	lsl	x0, x0, x2
    2f58:	ret
    2f5c:	neg	w1, w3
    2f60:	mov	x0, #0x0                   	// #0
    2f64:	lsl	x1, x4, x1
    2f68:	ret
    2f6c:	nop

0000000000002f70 <__ashrti3@@GCC_3.0>:
    2f70:	mov	x3, x1
    2f74:	cbz	x2, 2f98 <__ashrti3@@GCC_3.0+0x28>
    2f78:	mov	x1, #0x40                  	// #64
    2f7c:	sub	x1, x1, x2
    2f80:	cmp	x1, #0x0
    2f84:	b.le	2f9c <__ashrti3@@GCC_3.0+0x2c>
    2f88:	lsl	x1, x3, x1
    2f8c:	lsr	x0, x0, x2
    2f90:	orr	x0, x0, x1
    2f94:	asr	x1, x3, x2
    2f98:	ret
    2f9c:	neg	w0, w1
    2fa0:	asr	x1, x3, #63
    2fa4:	asr	x0, x3, x0
    2fa8:	ret
    2fac:	nop

0000000000002fb0 <__cmpti2@@GCC_3.0>:
    2fb0:	mov	x4, x0
    2fb4:	cmp	x1, x3
    2fb8:	mov	w0, #0x0                   	// #0
    2fbc:	b.lt	2fdc <__cmpti2@@GCC_3.0+0x2c>  // b.tstop
    2fc0:	mov	w0, #0x2                   	// #2
    2fc4:	b.gt	2fdc <__cmpti2@@GCC_3.0+0x2c>
    2fc8:	cmp	x4, x2
    2fcc:	mov	w3, #0x0                   	// #0
    2fd0:	cset	w1, hi  // hi = pmore
    2fd4:	add	w0, w1, #0x1
    2fd8:	csel	w0, w0, w3, cs  // cs = hs, nlast
    2fdc:	ret

0000000000002fe0 <__ucmpti2@@GCC_3.0>:
    2fe0:	mov	x4, x0
    2fe4:	cmp	x1, x3
    2fe8:	mov	w0, #0x0                   	// #0
    2fec:	b.cc	300c <__ucmpti2@@GCC_3.0+0x2c>  // b.lo, b.ul, b.last
    2ff0:	mov	w0, #0x2                   	// #2
    2ff4:	b.hi	300c <__ucmpti2@@GCC_3.0+0x2c>  // b.pmore
    2ff8:	cmp	x4, x2
    2ffc:	mov	w3, #0x0                   	// #0
    3000:	cset	w1, hi  // hi = pmore
    3004:	add	w0, w1, #0x1
    3008:	csel	w0, w0, w3, cs  // cs = hs, nlast
    300c:	ret

0000000000003010 <__clear_cache@@GCC_3.0>:
    3010:	b	6b20 <__udivmodti4@@GCC_3.0+0x3c8>
    3014:	nop

0000000000003018 <__absvdi2@@GCC_3.0>:
    3018:	tbnz	x0, #63, 3020 <__absvdi2@@GCC_3.0+0x8>
    301c:	ret
    3020:	negs	x0, x0
    3024:	b.pl	301c <__absvdi2@@GCC_3.0+0x4>  // b.nfrst
    3028:	stp	x29, x30, [sp, #-16]!
    302c:	mov	x29, sp
    3030:	bl	2c50 <abort@plt>
    3034:	nop

0000000000003038 <__absvsi2@@GCC_3.0>:
    3038:	tbnz	w0, #31, 3040 <__absvsi2@@GCC_3.0+0x8>
    303c:	ret
    3040:	negs	w0, w0
    3044:	b.pl	303c <__absvsi2@@GCC_3.0+0x4>  // b.nfrst
    3048:	stp	x29, x30, [sp, #-16]!
    304c:	mov	x29, sp
    3050:	bl	2c50 <abort@plt>
    3054:	nop

0000000000003058 <__absvti2@@GCC_3.4.4>:
    3058:	tbnz	x1, #63, 3060 <__absvti2@@GCC_3.4.4+0x8>
    305c:	ret
    3060:	negs	x0, x0
    3064:	ngc	x1, x1
    3068:	tbz	x1, #63, 305c <__absvti2@@GCC_3.4.4+0x4>
    306c:	stp	x29, x30, [sp, #-16]!
    3070:	mov	x29, sp
    3074:	bl	2c50 <abort@plt>

0000000000003078 <__addvdi3@@GCC_3.0>:
    3078:	mov	x2, x0
    307c:	add	x0, x0, x1
    3080:	tbnz	x1, #63, 3094 <__addvdi3@@GCC_3.0+0x1c>
    3084:	cmp	x2, x0
    3088:	cset	w1, gt
    308c:	cbnz	w1, 30a0 <__addvdi3@@GCC_3.0+0x28>
    3090:	ret
    3094:	cmp	x2, x0
    3098:	cset	w1, lt  // lt = tstop
    309c:	b	308c <__addvdi3@@GCC_3.0+0x14>
    30a0:	stp	x29, x30, [sp, #-16]!
    30a4:	mov	x29, sp
    30a8:	bl	2c50 <abort@plt>
    30ac:	nop

00000000000030b0 <__addvsi3@@GCC_3.0>:
    30b0:	mov	w2, w0
    30b4:	add	w0, w0, w1
    30b8:	tbnz	w1, #31, 30cc <__addvsi3@@GCC_3.0+0x1c>
    30bc:	cmp	w2, w0
    30c0:	cset	w1, gt
    30c4:	cbnz	w1, 30d8 <__addvsi3@@GCC_3.0+0x28>
    30c8:	ret
    30cc:	cmp	w2, w0
    30d0:	cset	w1, lt  // lt = tstop
    30d4:	b	30c4 <__addvsi3@@GCC_3.0+0x14>
    30d8:	stp	x29, x30, [sp, #-16]!
    30dc:	mov	x29, sp
    30e0:	bl	2c50 <abort@plt>
    30e4:	nop

00000000000030e8 <__addvti3@@GCC_3.4.4>:
    30e8:	mov	x4, x0
    30ec:	adds	x0, x0, x2
    30f0:	mov	x2, x1
    30f4:	adc	x1, x1, x3
    30f8:	tbnz	x3, #63, 311c <__addvti3@@GCC_3.4.4+0x34>
    30fc:	cmp	x2, x1
    3100:	mov	w2, #0x1                   	// #1
    3104:	b.le	3110 <__addvti3@@GCC_3.4.4+0x28>
    3108:	cbnz	w2, 314c <__addvti3@@GCC_3.4.4+0x64>
    310c:	ret
    3110:	b.eq	313c <__addvti3@@GCC_3.4.4+0x54>  // b.none
    3114:	mov	w2, #0x0                   	// #0
    3118:	b	3108 <__addvti3@@GCC_3.4.4+0x20>
    311c:	cmp	x1, x2
    3120:	mov	w2, #0x1                   	// #1
    3124:	b.gt	3108 <__addvti3@@GCC_3.4.4+0x20>
    3128:	b.ne	3114 <__addvti3@@GCC_3.4.4+0x2c>  // b.any
    312c:	cmp	x0, x4
    3130:	b.hi	3108 <__addvti3@@GCC_3.4.4+0x20>  // b.pmore
    3134:	mov	w2, #0x0                   	// #0
    3138:	b	3108 <__addvti3@@GCC_3.4.4+0x20>
    313c:	cmp	x4, x0
    3140:	b.hi	3108 <__addvti3@@GCC_3.4.4+0x20>  // b.pmore
    3144:	mov	w2, #0x0                   	// #0
    3148:	b	3108 <__addvti3@@GCC_3.4.4+0x20>
    314c:	stp	x29, x30, [sp, #-16]!
    3150:	mov	x29, sp
    3154:	bl	2c50 <abort@plt>

0000000000003158 <__subvdi3@@GCC_3.0>:
    3158:	mov	x2, x0
    315c:	sub	x0, x0, x1
    3160:	tbnz	x1, #63, 3174 <__subvdi3@@GCC_3.0+0x1c>
    3164:	cmp	x2, x0
    3168:	cset	w1, lt  // lt = tstop
    316c:	cbnz	w1, 3180 <__subvdi3@@GCC_3.0+0x28>
    3170:	ret
    3174:	cmp	x2, x0
    3178:	cset	w1, gt
    317c:	b	316c <__subvdi3@@GCC_3.0+0x14>
    3180:	stp	x29, x30, [sp, #-16]!
    3184:	mov	x29, sp
    3188:	bl	2c50 <abort@plt>
    318c:	nop

0000000000003190 <__subvsi3@@GCC_3.0>:
    3190:	mov	w2, w0
    3194:	sub	w0, w0, w1
    3198:	tbnz	w1, #31, 31ac <__subvsi3@@GCC_3.0+0x1c>
    319c:	cmp	w2, w0
    31a0:	cset	w1, lt  // lt = tstop
    31a4:	cbnz	w1, 31b8 <__subvsi3@@GCC_3.0+0x28>
    31a8:	ret
    31ac:	cmp	w2, w0
    31b0:	cset	w1, gt
    31b4:	b	31a4 <__subvsi3@@GCC_3.0+0x14>
    31b8:	stp	x29, x30, [sp, #-16]!
    31bc:	mov	x29, sp
    31c0:	bl	2c50 <abort@plt>
    31c4:	nop

00000000000031c8 <__subvti3@@GCC_3.4.4>:
    31c8:	mov	x4, x0
    31cc:	subs	x0, x0, x2
    31d0:	mov	x2, x1
    31d4:	sbc	x1, x1, x3
    31d8:	tbnz	x3, #63, 31fc <__subvti3@@GCC_3.4.4+0x34>
    31dc:	cmp	x1, x2
    31e0:	mov	w2, #0x1                   	// #1
    31e4:	b.le	31f0 <__subvti3@@GCC_3.4.4+0x28>
    31e8:	cbnz	w2, 322c <__subvti3@@GCC_3.4.4+0x64>
    31ec:	ret
    31f0:	b.eq	321c <__subvti3@@GCC_3.4.4+0x54>  // b.none
    31f4:	mov	w2, #0x0                   	// #0
    31f8:	b	31e8 <__subvti3@@GCC_3.4.4+0x20>
    31fc:	cmp	x2, x1
    3200:	mov	w2, #0x1                   	// #1
    3204:	b.gt	31e8 <__subvti3@@GCC_3.4.4+0x20>
    3208:	b.ne	31f4 <__subvti3@@GCC_3.4.4+0x2c>  // b.any
    320c:	cmp	x4, x0
    3210:	b.hi	31e8 <__subvti3@@GCC_3.4.4+0x20>  // b.pmore
    3214:	mov	w2, #0x0                   	// #0
    3218:	b	31e8 <__subvti3@@GCC_3.4.4+0x20>
    321c:	cmp	x0, x4
    3220:	b.hi	31e8 <__subvti3@@GCC_3.4.4+0x20>  // b.pmore
    3224:	mov	w2, #0x0                   	// #0
    3228:	b	31e8 <__subvti3@@GCC_3.4.4+0x20>
    322c:	stp	x29, x30, [sp, #-16]!
    3230:	mov	x29, sp
    3234:	bl	2c50 <abort@plt>

0000000000003238 <__mulvdi3@@GCC_3.0>:
    3238:	mov	x2, x0
    323c:	mul	x0, x0, x1
    3240:	smulh	x2, x2, x1
    3244:	cmp	x2, x0, asr #63
    3248:	b.ne	3250 <__mulvdi3@@GCC_3.0+0x18>  // b.any
    324c:	ret
    3250:	stp	x29, x30, [sp, #-16]!
    3254:	mov	x29, sp
    3258:	bl	2c50 <abort@plt>
    325c:	nop

0000000000003260 <__mulvsi3@@GCC_3.0>:
    3260:	smull	x0, w0, w1
    3264:	asr	x1, x0, #32
    3268:	cmp	w1, w0, asr #31
    326c:	b.ne	3274 <__mulvsi3@@GCC_3.0+0x14>  // b.any
    3270:	ret
    3274:	stp	x29, x30, [sp, #-16]!
    3278:	mov	x29, sp
    327c:	bl	2c50 <abort@plt>

0000000000003280 <__mulvti3@@GCC_3.4.4>:
    3280:	cmp	x1, x0, asr #63
    3284:	asr	x4, x2, #63
    3288:	b.ne	32a0 <__mulvti3@@GCC_3.4.4+0x20>  // b.any
    328c:	cmp	x4, x3
    3290:	b.ne	32e4 <__mulvti3@@GCC_3.4.4+0x64>  // b.any
    3294:	smulh	x1, x0, x2
    3298:	mul	x0, x0, x2
    329c:	ret
    32a0:	cmp	x4, x3
    32a4:	b.ne	3334 <__mulvti3@@GCC_3.4.4+0xb4>  // b.any
    32a8:	mul	x6, x1, x2
    32ac:	umulh	x4, x1, x2
    32b0:	mul	x7, x0, x2
    32b4:	mov	x5, x6
    32b8:	umulh	x3, x0, x2
    32bc:	tbnz	x1, #63, 332c <__mulvti3@@GCC_3.4.4+0xac>
    32c0:	tbz	x2, #63, 32cc <__mulvti3@@GCC_3.4.4+0x4c>
    32c4:	subs	x5, x6, x0
    32c8:	sbc	x4, x4, x1
    32cc:	adds	x1, x3, x5
    32d0:	cinc	x4, x4, cs  // cs = hs, nlast
    32d4:	cmp	x4, x1, asr #63
    32d8:	b.ne	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.any
    32dc:	mov	x0, x7
    32e0:	ret
    32e4:	mul	x6, x3, x0
    32e8:	umulh	x4, x3, x0
    32ec:	mul	x7, x2, x0
    32f0:	mov	x5, x6
    32f4:	umulh	x1, x2, x0
    32f8:	tbnz	x3, #63, 3324 <__mulvti3@@GCC_3.4.4+0xa4>
    32fc:	tbz	x0, #63, 3308 <__mulvti3@@GCC_3.4.4+0x88>
    3300:	subs	x5, x6, x2
    3304:	sbc	x4, x4, x3
    3308:	adds	x1, x1, x5
    330c:	cinc	x4, x4, cs  // cs = hs, nlast
    3310:	cmp	x4, x1, asr #63
    3314:	b.eq	32dc <__mulvti3@@GCC_3.4.4+0x5c>  // b.none
    3318:	stp	x29, x30, [sp, #-16]!
    331c:	mov	x29, sp
    3320:	bl	2c50 <abort@plt>
    3324:	sub	x4, x4, x0
    3328:	b	32fc <__mulvti3@@GCC_3.4.4+0x7c>
    332c:	sub	x4, x4, x2
    3330:	b	32c0 <__mulvti3@@GCC_3.4.4+0x40>
    3334:	tbnz	x1, #63, 3354 <__mulvti3@@GCC_3.4.4+0xd4>
    3338:	tbnz	x3, #63, 3380 <__mulvti3@@GCC_3.4.4+0x100>
    333c:	orr	x4, x3, x1
    3340:	cbnz	x4, 3318 <__mulvti3@@GCC_3.4.4+0x98>
    3344:	umulh	x1, x0, x2
    3348:	mul	x0, x0, x2
    334c:	tbnz	x1, #63, 3318 <__mulvti3@@GCC_3.4.4+0x98>
    3350:	ret
    3354:	cmp	x3, #0x0
    3358:	b.lt	33a4 <__mulvti3@@GCC_3.4.4+0x124>  // b.tstop
    335c:	ccmn	x1, #0x1, #0x0, eq  // eq = none
    3360:	b.ne	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.any
    3364:	umulh	x3, x0, x2
    3368:	mul	x1, x0, x2
    336c:	subs	x3, x3, x2
    3370:	b.pl	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.nfrst
    3374:	mov	x0, x1
    3378:	mov	x1, x3
    337c:	ret
    3380:	cmp	x1, #0x0
    3384:	ccmn	x3, #0x1, #0x0, eq  // eq = none
    3388:	b.ne	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.any
    338c:	umulh	x1, x0, x2
    3390:	mul	x2, x0, x2
    3394:	subs	x1, x1, x0
    3398:	b.pl	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.nfrst
    339c:	mov	x0, x2
    33a0:	ret
    33a4:	and	x4, x3, x1
    33a8:	cmn	x4, #0x1
    33ac:	b.ne	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.any
    33b0:	orr	x1, x2, x0
    33b4:	cbz	x1, 3318 <__mulvti3@@GCC_3.4.4+0x98>
    33b8:	umulh	x4, x0, x2
    33bc:	mul	x3, x0, x2
    33c0:	sub	x1, x4, x0
    33c4:	subs	x1, x1, x2
    33c8:	b.mi	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.first
    33cc:	mov	x0, x3
    33d0:	ret
    33d4:	nop

00000000000033d8 <__negvdi2@@GCC_3.0>:
    33d8:	mov	x1, x0
    33dc:	neg	x0, x0
    33e0:	tbnz	x1, #63, 33f4 <__negvdi2@@GCC_3.0+0x1c>
    33e4:	cmp	x0, #0x0
    33e8:	cset	w1, gt
    33ec:	cbnz	w1, 3400 <__negvdi2@@GCC_3.0+0x28>
    33f0:	ret
    33f4:	lsr	x1, x0, #63
    33f8:	and	w1, w1, #0xff
    33fc:	b	33ec <__negvdi2@@GCC_3.0+0x14>
    3400:	stp	x29, x30, [sp, #-16]!
    3404:	mov	x29, sp
    3408:	bl	2c50 <abort@plt>
    340c:	nop

0000000000003410 <__negvsi2@@GCC_3.0>:
    3410:	mov	w1, w0
    3414:	neg	w0, w0
    3418:	lsr	w2, w0, #31
    341c:	tbnz	w1, #31, 3428 <__negvsi2@@GCC_3.0+0x18>
    3420:	cmp	w0, #0x0
    3424:	cset	w2, gt
    3428:	cbnz	w2, 3430 <__negvsi2@@GCC_3.0+0x20>
    342c:	ret
    3430:	stp	x29, x30, [sp, #-16]!
    3434:	mov	x29, sp
    3438:	bl	2c50 <abort@plt>
    343c:	nop

0000000000003440 <__negvti2@@GCC_3.4.4>:
    3440:	negs	x0, x0
    3444:	mov	x2, x1
    3448:	ngc	x1, x1
    344c:	tbnz	x2, #63, 346c <__negvti2@@GCC_3.4.4+0x2c>
    3450:	asr	x2, x1, #63
    3454:	subs	x3, x2, x0
    3458:	sbc	x2, x2, x1
    345c:	lsr	x2, x2, #63
    3460:	and	w2, w2, #0xff
    3464:	cbnz	w2, 3478 <__negvti2@@GCC_3.4.4+0x38>
    3468:	ret
    346c:	lsr	x2, x1, #63
    3470:	and	w2, w2, #0xff
    3474:	b	3464 <__negvti2@@GCC_3.4.4+0x24>
    3478:	stp	x29, x30, [sp, #-16]!
    347c:	mov	x29, sp
    3480:	bl	2c50 <abort@plt>
    3484:	nop

0000000000003488 <__ffsdi2@@GCC_3.0>:
    3488:	rbit	x1, x0
    348c:	cmp	x0, #0x0
    3490:	clz	x1, x1
    3494:	csinc	w0, wzr, w1, eq  // eq = none
    3498:	ret
    349c:	nop

00000000000034a0 <__ffsti2@@GCC_3.0>:
    34a0:	cbz	x0, 34bc <__ffsti2@@GCC_3.0+0x1c>
    34a4:	mov	w1, #0x0                   	// #0
    34a8:	rbit	x0, x0
    34ac:	add	w1, w1, #0x1
    34b0:	clz	x0, x0
    34b4:	add	w0, w1, w0
    34b8:	ret
    34bc:	mov	w0, #0x0                   	// #0
    34c0:	cbz	x1, 34b8 <__ffsti2@@GCC_3.0+0x18>
    34c4:	mov	x0, x1
    34c8:	mov	w1, #0x40                  	// #64
    34cc:	b	34a8 <__ffsti2@@GCC_3.0+0x8>

00000000000034d0 <__clzdi2@@GCC_3.4>:
    34d0:	clz	x0, x0
    34d4:	ret

00000000000034d8 <__clzti2@@GCC_3.4>:
    34d8:	cbz	x1, 34f0 <__clzti2@@GCC_3.4+0x18>
    34dc:	mov	x0, x1
    34e0:	mov	w1, #0x0                   	// #0
    34e4:	clz	x0, x0
    34e8:	add	w0, w1, w0
    34ec:	ret
    34f0:	clz	x0, x0
    34f4:	mov	w1, #0x40                  	// #64
    34f8:	add	w0, w1, w0
    34fc:	ret

0000000000003500 <__ctzdi2@@GCC_3.4>:
    3500:	rbit	x0, x0
    3504:	clz	x0, x0
    3508:	ret
    350c:	nop

0000000000003510 <__ctzti2@@GCC_3.4>:
    3510:	cbz	x0, 352c <__ctzti2@@GCC_3.4+0x1c>
    3514:	mov	x1, x0
    3518:	mov	w0, #0x0                   	// #0
    351c:	rbit	x1, x1
    3520:	clz	x1, x1
    3524:	add	w0, w0, w1
    3528:	ret
    352c:	rbit	x1, x1
    3530:	mov	w0, #0x40                  	// #64
    3534:	clz	x1, x1
    3538:	add	w0, w0, w1
    353c:	ret

0000000000003540 <__popcountdi2@@GCC_3.4>:
    3540:	lsr	x1, x0, #1
    3544:	mov	x3, #0x101010101010101     	// #72340172838076673
    3548:	and	x1, x1, #0x5555555555555555
    354c:	sub	x1, x0, x1
    3550:	and	x2, x1, #0x3333333333333333
    3554:	lsr	x1, x1, #2
    3558:	and	x1, x1, #0x3333333333333333
    355c:	add	x1, x2, x1
    3560:	add	x1, x1, x1, lsr #4
    3564:	and	x0, x1, #0xf0f0f0f0f0f0f0f
    3568:	mul	x0, x0, x3
    356c:	lsr	x0, x0, #56
    3570:	ret
    3574:	nop

0000000000003578 <__popcountti2@@GCC_3.4>:
    3578:	lsr	x3, x0, #1
    357c:	lsr	x2, x1, #1
    3580:	and	x3, x3, #0x5555555555555555
    3584:	and	x2, x2, #0x5555555555555555
    3588:	sub	x0, x0, x3
    358c:	sub	x2, x1, x2
    3590:	and	x3, x0, #0x3333333333333333
    3594:	and	x1, x2, #0x3333333333333333
    3598:	lsr	x0, x0, #2
    359c:	lsr	x2, x2, #2
    35a0:	and	x2, x2, #0x3333333333333333
    35a4:	and	x0, x0, #0x3333333333333333
    35a8:	add	x0, x3, x0
    35ac:	add	x1, x1, x2
    35b0:	mov	x4, #0x101010101010101     	// #72340172838076673
    35b4:	add	x0, x0, x0, lsr #4
    35b8:	add	x1, x1, x1, lsr #4
    35bc:	and	x2, x0, #0xf0f0f0f0f0f0f0f
    35c0:	and	x0, x1, #0xf0f0f0f0f0f0f0f
    35c4:	add	x0, x0, x2
    35c8:	mul	x0, x0, x4
    35cc:	lsr	x0, x0, #56
    35d0:	ret
    35d4:	nop

00000000000035d8 <__paritydi2@@GCC_3.4>:
    35d8:	eor	x1, x0, x0, lsr #32
    35dc:	mov	w2, #0x6996                	// #27030
    35e0:	eor	x1, x1, x1, lsr #16
    35e4:	eor	x1, x1, x1, lsr #8
    35e8:	eor	x1, x1, x1, lsr #4
    35ec:	and	x1, x1, #0xf
    35f0:	asr	w1, w2, w1
    35f4:	and	w0, w1, #0x1
    35f8:	ret
    35fc:	nop

0000000000003600 <__parityti2@@GCC_3.4>:
    3600:	eor	x1, x0, x1
    3604:	mov	w0, #0x6996                	// #27030
    3608:	eor	x1, x1, x1, lsr #32
    360c:	eor	x1, x1, x1, lsr #16
    3610:	eor	x1, x1, x1, lsr #8
    3614:	eor	x1, x1, x1, lsr #4
    3618:	and	x1, x1, #0xf
    361c:	asr	w0, w0, w1
    3620:	and	w0, w0, #0x1
    3624:	ret

0000000000003628 <__powisf2@@GCC_4.0.0>:
    3628:	cmp	w0, #0x0
    362c:	fmov	s2, #1.000000000000000000e+00
    3630:	cneg	w2, w0, lt  // lt = tstop
    3634:	tst	x0, #0x1
    3638:	fmov	s1, s0
    363c:	lsr	w1, w2, #1
    3640:	fcsel	s0, s0, s2, ne  // ne = any
    3644:	cmp	wzr, w2, lsr #1
    3648:	b.eq	3664 <__powisf2@@GCC_4.0.0+0x3c>  // b.none
    364c:	nop
    3650:	fmul	s1, s1, s1
    3654:	tbz	w1, #0, 365c <__powisf2@@GCC_4.0.0+0x34>
    3658:	fmul	s0, s0, s1
    365c:	lsr	w1, w1, #1
    3660:	cbnz	w1, 3650 <__powisf2@@GCC_4.0.0+0x28>
    3664:	tbnz	w0, #31, 366c <__powisf2@@GCC_4.0.0+0x44>
    3668:	ret
    366c:	fmov	s1, #1.000000000000000000e+00
    3670:	fdiv	s0, s1, s0
    3674:	ret

0000000000003678 <__powidf2@@GCC_4.0.0>:
    3678:	cmp	w0, #0x0
    367c:	fmov	d2, #1.000000000000000000e+00
    3680:	cneg	w2, w0, lt  // lt = tstop
    3684:	tst	x0, #0x1
    3688:	fmov	d1, d0
    368c:	lsr	w1, w2, #1
    3690:	fcsel	d0, d0, d2, ne  // ne = any
    3694:	cmp	wzr, w2, lsr #1
    3698:	b.eq	36b4 <__powidf2@@GCC_4.0.0+0x3c>  // b.none
    369c:	nop
    36a0:	fmul	d1, d1, d1
    36a4:	tbz	w1, #0, 36ac <__powidf2@@GCC_4.0.0+0x34>
    36a8:	fmul	d0, d0, d1
    36ac:	lsr	w1, w1, #1
    36b0:	cbnz	w1, 36a0 <__powidf2@@GCC_4.0.0+0x28>
    36b4:	tbnz	w0, #31, 36bc <__powidf2@@GCC_4.0.0+0x44>
    36b8:	ret
    36bc:	fmov	d1, #1.000000000000000000e+00
    36c0:	fdiv	d0, d1, d0
    36c4:	ret

00000000000036c8 <__powitf2@@GCC_4.0.0>:
    36c8:	stp	x29, x30, [sp, #-48]!
    36cc:	cmp	w0, #0x0
    36d0:	mov	v2.16b, v0.16b
    36d4:	mov	x29, sp
    36d8:	stp	x19, x20, [sp, #16]
    36dc:	mov	v4.16b, v0.16b
    36e0:	mov	w20, w0
    36e4:	cneg	w19, w0, lt  // lt = tstop
    36e8:	tbnz	w20, #0, 36f8 <__powitf2@@GCC_4.0.0+0x30>
    36ec:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    36f0:	add	x0, x0, #0x790
    36f4:	ldr	q4, [x0]
    36f8:	cmp	wzr, w19, lsr #1
    36fc:	lsr	w19, w19, #1
    3700:	b.eq	3744 <__powitf2@@GCC_4.0.0+0x7c>  // b.none
    3704:	nop
    3708:	mov	v1.16b, v2.16b
    370c:	mov	v0.16b, v2.16b
    3710:	str	q4, [sp, #32]
    3714:	bl	2b10 <__multf3@plt>
    3718:	ldr	q4, [sp, #32]
    371c:	mov	v2.16b, v0.16b
    3720:	mov	v1.16b, v2.16b
    3724:	mov	v0.16b, v4.16b
    3728:	tbz	w19, #0, 373c <__powitf2@@GCC_4.0.0+0x74>
    372c:	str	q2, [sp, #32]
    3730:	bl	2b10 <__multf3@plt>
    3734:	mov	v4.16b, v0.16b
    3738:	ldr	q2, [sp, #32]
    373c:	lsr	w19, w19, #1
    3740:	cbnz	w19, 3708 <__powitf2@@GCC_4.0.0+0x40>
    3744:	tbz	w20, #31, 3760 <__powitf2@@GCC_4.0.0+0x98>
    3748:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    374c:	add	x0, x0, #0x790
    3750:	mov	v1.16b, v4.16b
    3754:	ldr	q0, [x0]
    3758:	bl	2c60 <__divtf3@plt>
    375c:	mov	v4.16b, v0.16b
    3760:	mov	v0.16b, v4.16b
    3764:	ldp	x19, x20, [sp, #16]
    3768:	ldp	x29, x30, [sp], #48
    376c:	ret
    3770:	fcvt	s5, h0
    3774:	fcvt	s4, h1
    3778:	fcvt	s19, h2
    377c:	fcvt	s20, h3
    3780:	mov	v22.h[0], v0.h[0]
    3784:	mov	v21.h[0], v1.h[0]
    3788:	fmul	s17, s5, s19
    378c:	fmul	s16, s4, s20
    3790:	fmul	s7, s5, s20
    3794:	fmul	s6, s19, s4
    3798:	fcvt	h17, s17
    379c:	fcvt	h16, s16
    37a0:	fcvt	h7, s7
    37a4:	fcvt	h6, s6
    37a8:	fcvt	s17, h17
    37ac:	fcvt	s16, h16
    37b0:	fcvt	s23, h7
    37b4:	fcvt	s24, h6
    37b8:	fsub	s0, s17, s16
    37bc:	fadd	s1, s23, s24
    37c0:	fcvt	h0, s0
    37c4:	fcvt	h1, s1
    37c8:	fcvt	s7, h0
    37cc:	fcvt	s6, h1
    37d0:	fcmp	s7, s7
    37d4:	cset	w0, vs
    37d8:	fcmp	s6, s6
    37dc:	cset	w1, vs
    37e0:	ands	w0, w0, w1
    37e4:	b.eq	3940 <__powitf2@@GCC_4.0.0+0x278>  // b.none
    37e8:	fabs	s18, s5
    37ec:	fabs	s4, s4
    37f0:	mov	w1, #0xe000                	// #57344
    37f4:	movk	w1, #0x477f, lsl #16
    37f8:	fmov	s5, w1
    37fc:	fcvt	h18, s18
    3800:	fcvt	h4, s4
    3804:	fcvt	s18, h18
    3808:	fcvt	s4, h4
    380c:	fcmp	s18, s5
    3810:	b.le	3944 <__powitf2@@GCC_4.0.0+0x27c>
    3814:	mov	w1, #0xe000                	// #57344
    3818:	umov	w4, v22.h[0]
    381c:	movk	w1, #0x477f, lsl #16
    3820:	fmov	s5, w1
    3824:	umov	w3, v21.h[0]
    3828:	fcmp	s18, s5
    382c:	cset	w1, gt
    3830:	fcmp	s4, s5
    3834:	scvtf	d5, w1
    3838:	cset	w1, gt
    383c:	fcmp	s19, s19
    3840:	scvtf	d4, w1
    3844:	fcvt	h5, d5
    3848:	fcvt	h4, d4
    384c:	umov	w2, v5.h[0]
    3850:	umov	w1, v4.h[0]
    3854:	bfxil	w4, w2, #0, #15
    3858:	mov	w2, w3
    385c:	dup	v22.4h, w4
    3860:	bfxil	w2, w1, #0, #15
    3864:	dup	v21.4h, w2
    3868:	b.vs	3a28 <__powitf2@@GCC_4.0.0+0x360>
    386c:	fcmp	s20, s20
    3870:	b.vs	3a40 <__powitf2@@GCC_4.0.0+0x378>
    3874:	fabs	s6, s19
    3878:	fabs	s7, s20
    387c:	mov	w1, #0xe000                	// #57344
    3880:	movk	w1, #0x477f, lsl #16
    3884:	fmov	s4, w1
    3888:	fcvt	h6, s6
    388c:	fcvt	h7, s7
    3890:	fcvt	s6, h6
    3894:	fcvt	s7, h7
    3898:	fcmp	s6, s4
    389c:	b.gt	38a8 <__powitf2@@GCC_4.0.0+0x1e0>
    38a0:	fcmp	s7, s4
    38a4:	b.le	3954 <__powitf2@@GCC_4.0.0+0x28c>
    38a8:	mov	w0, #0xe000                	// #57344
    38ac:	umov	w3, v2.h[0]
    38b0:	movk	w0, #0x477f, lsl #16
    38b4:	fmov	s0, w0
    38b8:	umov	w2, v3.h[0]
    38bc:	fcvt	s5, h22
    38c0:	fcmp	s6, s0
    38c4:	cset	w0, gt
    38c8:	fcmp	s7, s0
    38cc:	scvtf	d1, w0
    38d0:	cset	w0, gt
    38d4:	fcmp	s5, s5
    38d8:	scvtf	d0, w0
    38dc:	fcvt	h1, d1
    38e0:	fcvt	h0, d0
    38e4:	umov	w1, v1.h[0]
    38e8:	umov	w0, v0.h[0]
    38ec:	bfxil	w3, w1, #0, #15
    38f0:	mov	w1, w2
    38f4:	dup	v2.4h, w3
    38f8:	bfxil	w1, w0, #0, #15
    38fc:	dup	v3.4h, w1
    3900:	b.vs	39f0 <__powitf2@@GCC_4.0.0+0x328>
    3904:	fcvt	s4, h21
    3908:	fcmp	s4, s4
    390c:	b.vs	3a08 <__powitf2@@GCC_4.0.0+0x340>
    3910:	fcvt	s19, h2
    3914:	fcvt	s20, h3
    3918:	fmul	s0, s4, s20
    391c:	fmul	s1, s19, s4
    3920:	fnmsub	s0, s5, s19, s0
    3924:	fmadd	s1, s5, s20, s1
    3928:	mov	w0, #0x7f800000            	// #2139095040
    392c:	fmov	s4, w0
    3930:	fmul	s0, s0, s4
    3934:	fmul	s1, s1, s4
    3938:	fcvt	h0, s0
    393c:	fcvt	h1, s1
    3940:	ret
    3944:	fcmp	s4, s5
    3948:	b.gt	3814 <__powitf2@@GCC_4.0.0+0x14c>
    394c:	mov	w0, #0x0                   	// #0
    3950:	b	3874 <__powitf2@@GCC_4.0.0+0x1ac>
    3954:	cbnz	w0, 3aa0 <__powitf2@@GCC_4.0.0+0x3d8>
    3958:	fabs	s5, s17
    395c:	fcvt	h5, s5
    3960:	fcvt	s5, h5
    3964:	fcmp	s5, s4
    3968:	b.gt	3998 <__powitf2@@GCC_4.0.0+0x2d0>
    396c:	fabs	s16, s16
    3970:	fcvt	h16, s16
    3974:	fcvt	s16, h16
    3978:	fcmp	s16, s4
    397c:	b.gt	3998 <__powitf2@@GCC_4.0.0+0x2d0>
    3980:	fabs	s5, s23
    3984:	fcvt	h5, s5
    3988:	fcvt	s5, h5
    398c:	fcmp	s5, s4
    3990:	b.le	39d8 <__powitf2@@GCC_4.0.0+0x310>
    3994:	nop
    3998:	fcvt	s5, h22
    399c:	fcmp	s5, s5
    39a0:	b.vs	3a88 <__powitf2@@GCC_4.0.0+0x3c0>
    39a4:	fcvt	s4, h21
    39a8:	fcmp	s4, s4
    39ac:	b.vs	3a70 <__powitf2@@GCC_4.0.0+0x3a8>
    39b0:	fcmp	s19, s19
    39b4:	b.vs	3a58 <__powitf2@@GCC_4.0.0+0x390>
    39b8:	fcmp	s20, s20
    39bc:	b.vc	3918 <__powitf2@@GCC_4.0.0+0x250>
    39c0:	umov	w0, v3.h[0]
    39c4:	movi	v1.4h, #0x0
    39c8:	tbz	w0, #15, 39d0 <__powitf2@@GCC_4.0.0+0x308>
    39cc:	movi	v1.4h, #0x80, lsl #8
    39d0:	fcvt	s20, h1
    39d4:	b	3918 <__powitf2@@GCC_4.0.0+0x250>
    39d8:	fabs	s5, s24
    39dc:	fcvt	h5, s5
    39e0:	fcvt	s5, h5
    39e4:	fcmp	s5, s4
    39e8:	b.gt	3998 <__powitf2@@GCC_4.0.0+0x2d0>
    39ec:	ret
    39f0:	umov	w0, v22.h[0]
    39f4:	movi	v1.4h, #0x0
    39f8:	tbz	w0, #15, 3a00 <__powitf2@@GCC_4.0.0+0x338>
    39fc:	movi	v1.4h, #0x80, lsl #8
    3a00:	fcvt	s5, h1
    3a04:	b	3904 <__powitf2@@GCC_4.0.0+0x23c>
    3a08:	umov	w0, v21.h[0]
    3a0c:	movi	v4.4h, #0x0
    3a10:	tbz	w0, #15, 3a18 <__powitf2@@GCC_4.0.0+0x350>
    3a14:	movi	v4.4h, #0x80, lsl #8
    3a18:	fcvt	s19, h2
    3a1c:	fcvt	s4, h4
    3a20:	fcvt	s20, h3
    3a24:	b	3918 <__powitf2@@GCC_4.0.0+0x250>
    3a28:	umov	w1, v2.h[0]
    3a2c:	movi	v2.4h, #0x0
    3a30:	tbz	w1, #15, 3a38 <__powitf2@@GCC_4.0.0+0x370>
    3a34:	movi	v2.4h, #0x80, lsl #8
    3a38:	fcvt	s19, h2
    3a3c:	b	386c <__powitf2@@GCC_4.0.0+0x1a4>
    3a40:	umov	w1, v3.h[0]
    3a44:	movi	v3.4h, #0x0
    3a48:	tbz	w1, #15, 3a50 <__powitf2@@GCC_4.0.0+0x388>
    3a4c:	movi	v3.4h, #0x80, lsl #8
    3a50:	fcvt	s20, h3
    3a54:	b	3874 <__powitf2@@GCC_4.0.0+0x1ac>
    3a58:	umov	w0, v2.h[0]
    3a5c:	movi	v19.4h, #0x0
    3a60:	tbz	w0, #15, 3a68 <__powitf2@@GCC_4.0.0+0x3a0>
    3a64:	movi	v19.4h, #0x80, lsl #8
    3a68:	fcvt	s19, h19
    3a6c:	b	39b8 <__powitf2@@GCC_4.0.0+0x2f0>
    3a70:	umov	w0, v21.h[0]
    3a74:	movi	v0.4h, #0x0
    3a78:	tbz	w0, #15, 3a80 <__powitf2@@GCC_4.0.0+0x3b8>
    3a7c:	movi	v0.4h, #0x80, lsl #8
    3a80:	fcvt	s4, h0
    3a84:	b	39b0 <__powitf2@@GCC_4.0.0+0x2e8>
    3a88:	umov	w0, v22.h[0]
    3a8c:	movi	v1.4h, #0x0
    3a90:	tbz	w0, #15, 3a98 <__powitf2@@GCC_4.0.0+0x3d0>
    3a94:	movi	v1.4h, #0x80, lsl #8
    3a98:	fcvt	s5, h1
    3a9c:	b	39a4 <__powitf2@@GCC_4.0.0+0x2dc>
    3aa0:	fcvt	s5, h22
    3aa4:	fcvt	s4, h21
    3aa8:	b	3918 <__powitf2@@GCC_4.0.0+0x250>
    3aac:	nop

0000000000003ab0 <__mulsc3@@GCC_4.0.0>:
    3ab0:	fmul	s7, s1, s3
    3ab4:	fmul	s5, s0, s2
    3ab8:	fmul	s16, s0, s3
    3abc:	fmov	s18, s0
    3ac0:	fmul	s17, s2, s1
    3ac4:	fmov	s4, s1
    3ac8:	fsub	s0, s5, s7
    3acc:	fadd	s1, s16, s17
    3ad0:	fcmp	s0, s0
    3ad4:	cset	w0, vs
    3ad8:	fcmp	s1, s1
    3adc:	cset	w1, vs
    3ae0:	ands	w0, w0, w1
    3ae4:	b.eq	3c14 <__mulsc3@@GCC_4.0.0+0x164>  // b.none
    3ae8:	fabs	s19, s18
    3aec:	mov	w1, #0x7f7fffff            	// #2139095039
    3af0:	fmov	s6, w1
    3af4:	fabs	s21, s4
    3af8:	fcmp	s19, s6
    3afc:	b.le	3c18 <__mulsc3@@GCC_4.0.0+0x168>
    3b00:	mov	w1, #0x7f7fffff            	// #2139095039
    3b04:	fmov	s6, w1
    3b08:	movi	v20.2s, #0x80, lsl #24
    3b0c:	fcmp	s19, s6
    3b10:	cset	w1, gt
    3b14:	fcmp	s21, s6
    3b18:	scvtf	s19, w1
    3b1c:	cset	w1, gt
    3b20:	fcmp	s2, s2
    3b24:	scvtf	s6, w1
    3b28:	bif	v18.8b, v19.8b, v20.8b
    3b2c:	bif	v4.8b, v6.8b, v20.8b
    3b30:	b.vs	3c54 <__mulsc3@@GCC_4.0.0+0x1a4>
    3b34:	fcmp	s3, s3
    3b38:	b.vs	3c60 <__mulsc3@@GCC_4.0.0+0x1b0>
    3b3c:	fabs	s19, s2
    3b40:	mov	w1, #0x7f7fffff            	// #2139095039
    3b44:	fmov	s6, w1
    3b48:	fabs	s20, s3
    3b4c:	fcmp	s19, s6
    3b50:	b.gt	3bb8 <__mulsc3@@GCC_4.0.0+0x108>
    3b54:	fcmp	s20, s6
    3b58:	b.gt	3bb8 <__mulsc3@@GCC_4.0.0+0x108>
    3b5c:	cbnz	w0, 3bf4 <__mulsc3@@GCC_4.0.0+0x144>
    3b60:	fabs	s5, s5
    3b64:	fcmp	s5, s6
    3b68:	b.gt	3b88 <__mulsc3@@GCC_4.0.0+0xd8>
    3b6c:	fabs	s7, s7
    3b70:	fcmp	s7, s6
    3b74:	b.gt	3b88 <__mulsc3@@GCC_4.0.0+0xd8>
    3b78:	fabs	s16, s16
    3b7c:	fcmp	s16, s6
    3b80:	b.le	3c28 <__mulsc3@@GCC_4.0.0+0x178>
    3b84:	nop
    3b88:	fcmp	s18, s18
    3b8c:	b.vs	3c90 <__mulsc3@@GCC_4.0.0+0x1e0>
    3b90:	fcmp	s4, s4
    3b94:	b.vs	3c80 <__mulsc3@@GCC_4.0.0+0x1d0>
    3b98:	fcmp	s2, s2
    3b9c:	b.vs	3c70 <__mulsc3@@GCC_4.0.0+0x1c0>
    3ba0:	fcmp	s3, s3
    3ba4:	b.vc	3bf4 <__mulsc3@@GCC_4.0.0+0x144>
    3ba8:	movi	v0.2s, #0x0
    3bac:	movi	v1.2s, #0x80, lsl #24
    3bb0:	bif	v3.8b, v0.8b, v1.8b
    3bb4:	b	3bf4 <__mulsc3@@GCC_4.0.0+0x144>
    3bb8:	mov	w0, #0x7f7fffff            	// #2139095039
    3bbc:	fmov	s0, w0
    3bc0:	movi	v5.2s, #0x80, lsl #24
    3bc4:	fcmp	s19, s0
    3bc8:	cset	w0, gt
    3bcc:	fcmp	s20, s0
    3bd0:	scvtf	s1, w0
    3bd4:	cset	w0, gt
    3bd8:	fcmp	s18, s18
    3bdc:	scvtf	s0, w0
    3be0:	bif	v2.8b, v1.8b, v5.8b
    3be4:	bif	v3.8b, v0.8b, v5.8b
    3be8:	b.vs	3c38 <__mulsc3@@GCC_4.0.0+0x188>
    3bec:	fcmp	s4, s4
    3bf0:	b.vs	3c44 <__mulsc3@@GCC_4.0.0+0x194>
    3bf4:	fmul	s5, s4, s3
    3bf8:	fmul	s4, s4, s2
    3bfc:	fmadd	s3, s18, s3, s4
    3c00:	fnmsub	s2, s18, s2, s5
    3c04:	mov	w0, #0x7f800000            	// #2139095040
    3c08:	fmov	s1, w0
    3c0c:	fmul	s0, s2, s1
    3c10:	fmul	s1, s3, s1
    3c14:	ret
    3c18:	fcmp	s21, s6
    3c1c:	b.gt	3b00 <__mulsc3@@GCC_4.0.0+0x50>
    3c20:	mov	w0, #0x0                   	// #0
    3c24:	b	3b3c <__mulsc3@@GCC_4.0.0+0x8c>
    3c28:	fabs	s17, s17
    3c2c:	fcmp	s17, s6
    3c30:	b.gt	3b88 <__mulsc3@@GCC_4.0.0+0xd8>
    3c34:	ret
    3c38:	movi	v0.2s, #0x0
    3c3c:	bif	v18.8b, v0.8b, v5.8b
    3c40:	b	3bec <__mulsc3@@GCC_4.0.0+0x13c>
    3c44:	movi	v0.2s, #0x0
    3c48:	movi	v1.2s, #0x80, lsl #24
    3c4c:	bif	v4.8b, v0.8b, v1.8b
    3c50:	b	3bf4 <__mulsc3@@GCC_4.0.0+0x144>
    3c54:	movi	v6.2s, #0x0
    3c58:	bif	v2.8b, v6.8b, v20.8b
    3c5c:	b	3b34 <__mulsc3@@GCC_4.0.0+0x84>
    3c60:	movi	v6.2s, #0x0
    3c64:	movi	v19.2s, #0x80, lsl #24
    3c68:	bif	v3.8b, v6.8b, v19.8b
    3c6c:	b	3b3c <__mulsc3@@GCC_4.0.0+0x8c>
    3c70:	movi	v0.2s, #0x0
    3c74:	movi	v1.2s, #0x80, lsl #24
    3c78:	bif	v2.8b, v0.8b, v1.8b
    3c7c:	b	3ba0 <__mulsc3@@GCC_4.0.0+0xf0>
    3c80:	movi	v0.2s, #0x0
    3c84:	movi	v1.2s, #0x80, lsl #24
    3c88:	bif	v4.8b, v0.8b, v1.8b
    3c8c:	b	3b98 <__mulsc3@@GCC_4.0.0+0xe8>
    3c90:	movi	v0.2s, #0x0
    3c94:	movi	v1.2s, #0x80, lsl #24
    3c98:	bif	v18.8b, v0.8b, v1.8b
    3c9c:	b	3b90 <__mulsc3@@GCC_4.0.0+0xe0>

0000000000003ca0 <__muldc3@@GCC_4.0.0>:
    3ca0:	fmul	d7, d1, d3
    3ca4:	fmul	d5, d0, d2
    3ca8:	fmul	d16, d0, d3
    3cac:	fmov	d18, d0
    3cb0:	fmul	d17, d2, d1
    3cb4:	fmov	d4, d1
    3cb8:	fsub	d0, d5, d7
    3cbc:	fadd	d1, d16, d17
    3cc0:	fcmp	d0, d0
    3cc4:	cset	w0, vs
    3cc8:	fcmp	d1, d1
    3ccc:	cset	w1, vs
    3cd0:	ands	w0, w0, w1
    3cd4:	b.eq	3e0c <__muldc3@@GCC_4.0.0+0x16c>  // b.none
    3cd8:	fabs	d19, d18
    3cdc:	mov	x1, #0x7fefffffffffffff    	// #9218868437227405311
    3ce0:	fmov	d6, x1
    3ce4:	fabs	d21, d4
    3ce8:	fcmp	d19, d6
    3cec:	b.le	3e10 <__muldc3@@GCC_4.0.0+0x170>
    3cf0:	mov	x1, #0x7fefffffffffffff    	// #9218868437227405311
    3cf4:	fmov	d6, x1
    3cf8:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    3cfc:	fmov	d20, x1
    3d00:	fcmp	d19, d6
    3d04:	cset	w1, gt
    3d08:	fcmp	d21, d6
    3d0c:	scvtf	d19, w1
    3d10:	cset	w1, gt
    3d14:	fcmp	d2, d2
    3d18:	scvtf	d6, w1
    3d1c:	bif	v18.8b, v19.8b, v20.8b
    3d20:	bif	v4.8b, v6.8b, v20.8b
    3d24:	b.vs	3e50 <__muldc3@@GCC_4.0.0+0x1b0>
    3d28:	fcmp	d3, d3
    3d2c:	b.vs	3e5c <__muldc3@@GCC_4.0.0+0x1bc>
    3d30:	fabs	d19, d2
    3d34:	mov	x1, #0x7fefffffffffffff    	// #9218868437227405311
    3d38:	fmov	d6, x1
    3d3c:	fabs	d20, d3
    3d40:	fcmp	d19, d6
    3d44:	b.gt	3dac <__muldc3@@GCC_4.0.0+0x10c>
    3d48:	fcmp	d20, d6
    3d4c:	b.gt	3dac <__muldc3@@GCC_4.0.0+0x10c>
    3d50:	cbnz	w0, 3dec <__muldc3@@GCC_4.0.0+0x14c>
    3d54:	fabs	d5, d5
    3d58:	fcmp	d5, d6
    3d5c:	b.gt	3d78 <__muldc3@@GCC_4.0.0+0xd8>
    3d60:	fabs	d7, d7
    3d64:	fcmp	d7, d6
    3d68:	b.gt	3d78 <__muldc3@@GCC_4.0.0+0xd8>
    3d6c:	fabs	d16, d16
    3d70:	fcmp	d16, d6
    3d74:	b.le	3e20 <__muldc3@@GCC_4.0.0+0x180>
    3d78:	fcmp	d18, d18
    3d7c:	b.vs	3e98 <__muldc3@@GCC_4.0.0+0x1f8>
    3d80:	fcmp	d4, d4
    3d84:	b.vs	3e84 <__muldc3@@GCC_4.0.0+0x1e4>
    3d88:	fcmp	d2, d2
    3d8c:	b.vs	3e70 <__muldc3@@GCC_4.0.0+0x1d0>
    3d90:	fcmp	d3, d3
    3d94:	b.vc	3dec <__muldc3@@GCC_4.0.0+0x14c>
    3d98:	movi	d0, #0x0
    3d9c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3da0:	fmov	d1, x0
    3da4:	bif	v3.8b, v0.8b, v1.8b
    3da8:	b	3dec <__muldc3@@GCC_4.0.0+0x14c>
    3dac:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    3db0:	fmov	d0, x0
    3db4:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3db8:	fmov	d5, x0
    3dbc:	fcmp	d19, d0
    3dc0:	cset	w0, gt
    3dc4:	fcmp	d20, d0
    3dc8:	scvtf	d1, w0
    3dcc:	cset	w0, gt
    3dd0:	fcmp	d18, d18
    3dd4:	scvtf	d0, w0
    3dd8:	bif	v2.8b, v1.8b, v5.8b
    3ddc:	bif	v3.8b, v0.8b, v5.8b
    3de0:	b.vs	3e30 <__muldc3@@GCC_4.0.0+0x190>
    3de4:	fcmp	d4, d4
    3de8:	b.vs	3e3c <__muldc3@@GCC_4.0.0+0x19c>
    3dec:	fmul	d5, d4, d3
    3df0:	fmul	d4, d4, d2
    3df4:	fmadd	d3, d18, d3, d4
    3df8:	fnmsub	d2, d18, d2, d5
    3dfc:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
    3e00:	fmov	d1, x0
    3e04:	fmul	d0, d2, d1
    3e08:	fmul	d1, d3, d1
    3e0c:	ret
    3e10:	fcmp	d21, d6
    3e14:	b.gt	3cf0 <__muldc3@@GCC_4.0.0+0x50>
    3e18:	mov	w0, #0x0                   	// #0
    3e1c:	b	3d30 <__muldc3@@GCC_4.0.0+0x90>
    3e20:	fabs	d17, d17
    3e24:	fcmp	d17, d6
    3e28:	b.gt	3d78 <__muldc3@@GCC_4.0.0+0xd8>
    3e2c:	ret
    3e30:	movi	d0, #0x0
    3e34:	bif	v18.8b, v0.8b, v5.8b
    3e38:	b	3de4 <__muldc3@@GCC_4.0.0+0x144>
    3e3c:	movi	d0, #0x0
    3e40:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3e44:	fmov	d1, x0
    3e48:	bif	v4.8b, v0.8b, v1.8b
    3e4c:	b	3dec <__muldc3@@GCC_4.0.0+0x14c>
    3e50:	movi	d6, #0x0
    3e54:	bif	v2.8b, v6.8b, v20.8b
    3e58:	b	3d28 <__muldc3@@GCC_4.0.0+0x88>
    3e5c:	movi	d6, #0x0
    3e60:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    3e64:	fmov	d19, x1
    3e68:	bif	v3.8b, v6.8b, v19.8b
    3e6c:	b	3d30 <__muldc3@@GCC_4.0.0+0x90>
    3e70:	movi	d0, #0x0
    3e74:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3e78:	fmov	d1, x0
    3e7c:	bif	v2.8b, v0.8b, v1.8b
    3e80:	b	3d90 <__muldc3@@GCC_4.0.0+0xf0>
    3e84:	movi	d0, #0x0
    3e88:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3e8c:	fmov	d1, x0
    3e90:	bif	v4.8b, v0.8b, v1.8b
    3e94:	b	3d88 <__muldc3@@GCC_4.0.0+0xe8>
    3e98:	movi	d0, #0x0
    3e9c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3ea0:	fmov	d1, x0
    3ea4:	bif	v18.8b, v0.8b, v1.8b
    3ea8:	b	3d80 <__muldc3@@GCC_4.0.0+0xe0>
    3eac:	nop

0000000000003eb0 <__multc3@@GCC_4.0.0>:
    3eb0:	stp	x29, x30, [sp, #-256]!
    3eb4:	mov	x29, sp
    3eb8:	stp	x19, x20, [sp, #16]
    3ebc:	stp	x23, x24, [sp, #48]
    3ec0:	stp	x25, x26, [sp, #64]
    3ec4:	str	q0, [sp, #96]
    3ec8:	str	q2, [sp, #112]
    3ecc:	ldp	x20, x25, [sp, #96]
    3ed0:	stp	x21, x22, [sp, #32]
    3ed4:	ldp	x19, x24, [sp, #112]
    3ed8:	stp	x19, x24, [sp, #96]
    3edc:	stp	x20, x25, [sp, #112]
    3ee0:	stp	x27, x28, [sp, #80]
    3ee4:	ldr	q0, [sp, #112]
    3ee8:	str	q1, [sp, #128]
    3eec:	str	q3, [sp, #144]
    3ef0:	ldp	x21, x23, [sp, #128]
    3ef4:	ldp	x22, x26, [sp, #144]
    3ef8:	ldr	q1, [sp, #96]
    3efc:	bl	2b10 <__multf3@plt>
    3f00:	stp	x22, x26, [sp, #96]
    3f04:	stp	x21, x23, [sp, #112]
    3f08:	ldr	q1, [sp, #96]
    3f0c:	str	q0, [sp, #128]
    3f10:	ldr	q0, [sp, #112]
    3f14:	ldp	x28, x27, [sp, #128]
    3f18:	bl	2b10 <__multf3@plt>
    3f1c:	str	q0, [sp, #128]
    3f20:	ldp	x1, x0, [sp, #128]
    3f24:	stp	x22, x26, [sp, #96]
    3f28:	stp	x20, x25, [sp, #112]
    3f2c:	ldr	q1, [sp, #96]
    3f30:	ldr	q0, [sp, #112]
    3f34:	str	x1, [sp, #144]
    3f38:	str	x0, [sp, #168]
    3f3c:	bl	2b10 <__multf3@plt>
    3f40:	str	q0, [sp, #128]
    3f44:	ldp	x1, x0, [sp, #128]
    3f48:	stp	x21, x23, [sp, #96]
    3f4c:	stp	x19, x24, [sp, #112]
    3f50:	ldr	q1, [sp, #96]
    3f54:	ldr	q0, [sp, #112]
    3f58:	stp	x1, x0, [sp, #176]
    3f5c:	bl	2b10 <__multf3@plt>
    3f60:	str	q0, [sp, #128]
    3f64:	ldp	x0, x2, [sp, #136]
    3f68:	str	x2, [sp, #96]
    3f6c:	ldr	x2, [sp, #168]
    3f70:	str	x2, [sp, #104]
    3f74:	stp	x28, x27, [sp, #112]
    3f78:	ldr	q1, [sp, #96]
    3f7c:	ldr	q0, [sp, #112]
    3f80:	str	x0, [sp, #224]
    3f84:	bl	2d80 <__subtf3@plt>
    3f88:	ldr	x1, [sp, #176]
    3f8c:	str	x1, [sp, #112]
    3f90:	ldr	x2, [sp, #128]
    3f94:	str	x2, [sp, #96]
    3f98:	ldr	x1, [sp, #224]
    3f9c:	str	x1, [sp, #104]
    3fa0:	ldr	x0, [sp, #184]
    3fa4:	ldr	q1, [sp, #96]
    3fa8:	str	x0, [sp, #120]
    3fac:	str	q0, [sp, #96]
    3fb0:	ldr	q0, [sp, #112]
    3fb4:	bl	2c20 <__addtf3@plt>
    3fb8:	str	q0, [sp, #112]
    3fbc:	ldr	q1, [sp, #96]
    3fc0:	mov	v0.16b, v1.16b
    3fc4:	bl	2d30 <__unordtf2@plt>
    3fc8:	cmp	w0, #0x0
    3fcc:	ldr	q0, [sp, #112]
    3fd0:	cset	w1, ne  // ne = any
    3fd4:	str	w1, [sp, #192]
    3fd8:	mov	v1.16b, v0.16b
    3fdc:	bl	2d30 <__unordtf2@plt>
    3fe0:	cmp	w0, #0x0
    3fe4:	ldr	w1, [sp, #192]
    3fe8:	cset	w0, ne  // ne = any
    3fec:	ands	w0, w0, w1
    3ff0:	str	w0, [sp, #236]
    3ff4:	b.eq	4320 <__multc3@@GCC_4.0.0+0x470>  // b.none
    3ff8:	adrp	x1, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    3ffc:	add	x1, x1, #0x7a0
    4000:	and	x0, x25, #0x7fffffffffffffff
    4004:	stp	x20, x0, [sp, #192]
    4008:	ldr	q1, [x1]
    400c:	and	x1, x23, #0x7fffffffffffffff
    4010:	ldr	q0, [sp, #192]
    4014:	str	x1, [sp, #192]
    4018:	str	x0, [sp, #208]
    401c:	bl	2d30 <__unordtf2@plt>
    4020:	cbnz	w0, 4048 <__multc3@@GCC_4.0.0+0x198>
    4024:	adrp	x1, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4028:	add	x1, x1, #0x7a0
    402c:	ldr	x0, [sp, #208]
    4030:	stp	x20, x0, [sp, #192]
    4034:	ldr	q1, [x1]
    4038:	ldr	q0, [sp, #192]
    403c:	bl	2bc0 <__letf2@plt>
    4040:	cmp	w0, #0x0
    4044:	b.gt	408c <__multc3@@GCC_4.0.0+0x1dc>
    4048:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    404c:	add	x0, x0, #0x7a0
    4050:	ldr	q1, [x0]
    4054:	and	x0, x23, #0x7fffffffffffffff
    4058:	stp	x21, x0, [sp, #192]
    405c:	ldr	q0, [sp, #192]
    4060:	bl	2d30 <__unordtf2@plt>
    4064:	cbnz	w0, 4528 <__multc3@@GCC_4.0.0+0x678>
    4068:	adrp	x1, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    406c:	add	x1, x1, #0x7a0
    4070:	and	x0, x23, #0x7fffffffffffffff
    4074:	stp	x21, x0, [sp, #192]
    4078:	ldr	q1, [x1]
    407c:	ldr	q0, [sp, #192]
    4080:	bl	2bc0 <__letf2@plt>
    4084:	cmp	w0, #0x0
    4088:	b.le	4528 <__multc3@@GCC_4.0.0+0x678>
    408c:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4090:	add	x0, x0, #0x7a0
    4094:	mov	w1, #0x1                   	// #1
    4098:	str	w1, [sp, #240]
    409c:	ldr	q1, [x0]
    40a0:	ldr	x0, [sp, #208]
    40a4:	stp	x20, x0, [sp, #192]
    40a8:	ldr	q0, [sp, #192]
    40ac:	bl	2d30 <__unordtf2@plt>
    40b0:	ldr	w1, [sp, #240]
    40b4:	cbz	w0, 43b4 <__multc3@@GCC_4.0.0+0x504>
    40b8:	eor	w0, w1, #0x1
    40bc:	mov	w1, #0x1                   	// #1
    40c0:	and	w0, w0, #0x1
    40c4:	str	w1, [sp, #240]
    40c8:	bl	2d70 <__floatsitf@plt>
    40cc:	str	q0, [sp, #208]
    40d0:	ldp	x20, x0, [sp, #208]
    40d4:	and	x1, x23, #0x7fffffffffffffff
    40d8:	stp	x21, x1, [sp, #192]
    40dc:	ldr	q0, [sp, #192]
    40e0:	bfxil	x25, x0, #0, #63
    40e4:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    40e8:	add	x0, x0, #0x7a0
    40ec:	ldr	q1, [x0]
    40f0:	bl	2d30 <__unordtf2@plt>
    40f4:	ldr	w1, [sp, #240]
    40f8:	cbz	w0, 438c <__multc3@@GCC_4.0.0+0x4dc>
    40fc:	eor	w0, w1, #0x1
    4100:	and	w0, w0, #0x1
    4104:	bl	2d70 <__floatsitf@plt>
    4108:	str	q0, [sp, #240]
    410c:	ldp	x21, x0, [sp, #240]
    4110:	stp	x19, x24, [sp, #192]
    4114:	stp	x19, x24, [sp, #208]
    4118:	ldr	q1, [sp, #192]
    411c:	ldr	q0, [sp, #208]
    4120:	bfxil	x23, x0, #0, #63
    4124:	bl	2d30 <__unordtf2@plt>
    4128:	cbnz	w0, 45c4 <__multc3@@GCC_4.0.0+0x714>
    412c:	stp	x22, x26, [sp, #192]
    4130:	stp	x22, x26, [sp, #208]
    4134:	ldr	q1, [sp, #192]
    4138:	ldr	q0, [sp, #208]
    413c:	bl	2d30 <__unordtf2@plt>
    4140:	cbnz	w0, 45ac <__multc3@@GCC_4.0.0+0x6fc>
    4144:	adrp	x1, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4148:	add	x1, x1, #0x7a0
    414c:	and	x0, x24, #0x7fffffffffffffff
    4150:	stp	x19, x0, [sp, #192]
    4154:	ldr	q1, [x1]
    4158:	and	x1, x26, #0x7fffffffffffffff
    415c:	ldr	q0, [sp, #192]
    4160:	str	x1, [sp, #192]
    4164:	str	x0, [sp, #208]
    4168:	bl	2d30 <__unordtf2@plt>
    416c:	cbnz	w0, 4194 <__multc3@@GCC_4.0.0+0x2e4>
    4170:	adrp	x1, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4174:	add	x1, x1, #0x7a0
    4178:	ldr	x0, [sp, #208]
    417c:	stp	x19, x0, [sp, #192]
    4180:	ldr	q1, [x1]
    4184:	ldr	q0, [sp, #192]
    4188:	bl	2bc0 <__letf2@plt>
    418c:	cmp	w0, #0x0
    4190:	b.gt	41d8 <__multc3@@GCC_4.0.0+0x328>
    4194:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4198:	add	x0, x0, #0x7a0
    419c:	ldr	q1, [x0]
    41a0:	and	x0, x26, #0x7fffffffffffffff
    41a4:	stp	x22, x0, [sp, #192]
    41a8:	ldr	q0, [sp, #192]
    41ac:	bl	2d30 <__unordtf2@plt>
    41b0:	cbnz	w0, 43dc <__multc3@@GCC_4.0.0+0x52c>
    41b4:	adrp	x1, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    41b8:	add	x1, x1, #0x7a0
    41bc:	and	x0, x26, #0x7fffffffffffffff
    41c0:	stp	x22, x0, [sp, #192]
    41c4:	ldr	q1, [x1]
    41c8:	ldr	q0, [sp, #192]
    41cc:	bl	2bc0 <__letf2@plt>
    41d0:	cmp	w0, #0x0
    41d4:	b.le	43dc <__multc3@@GCC_4.0.0+0x52c>
    41d8:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    41dc:	add	x0, x0, #0x7a0
    41e0:	ldr	x28, [sp, #208]
    41e4:	stp	x19, x28, [sp, #96]
    41e8:	ldr	q1, [x0]
    41ec:	ldr	q0, [sp, #96]
    41f0:	mov	w27, #0x1                   	// #1
    41f4:	bl	2d30 <__unordtf2@plt>
    41f8:	cbz	w0, 4368 <__multc3@@GCC_4.0.0+0x4b8>
    41fc:	eor	w0, w27, #0x1
    4200:	and	x28, x26, #0x7fffffffffffffff
    4204:	and	w0, w0, #0x1
    4208:	bl	2d70 <__floatsitf@plt>
    420c:	str	q0, [sp, #112]
    4210:	mov	w27, #0x1                   	// #1
    4214:	ldp	x19, x0, [sp, #112]
    4218:	stp	x22, x28, [sp, #96]
    421c:	ldr	q0, [sp, #96]
    4220:	bfxil	x24, x0, #0, #63
    4224:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4228:	add	x0, x0, #0x7a0
    422c:	ldr	q1, [x0]
    4230:	bl	2d30 <__unordtf2@plt>
    4234:	cbz	w0, 4344 <__multc3@@GCC_4.0.0+0x494>
    4238:	eor	w0, w27, #0x1
    423c:	and	w0, w0, #0x1
    4240:	bl	2d70 <__floatsitf@plt>
    4244:	str	q0, [sp, #128]
    4248:	ldp	x22, x0, [sp, #128]
    424c:	stp	x20, x25, [sp, #96]
    4250:	stp	x20, x25, [sp, #112]
    4254:	ldr	q1, [sp, #96]
    4258:	ldr	q0, [sp, #112]
    425c:	bfxil	x26, x0, #0, #63
    4260:	bl	2d30 <__unordtf2@plt>
    4264:	cbnz	w0, 457c <__multc3@@GCC_4.0.0+0x6cc>
    4268:	stp	x21, x23, [sp, #96]
    426c:	stp	x21, x23, [sp, #112]
    4270:	ldr	q1, [sp, #96]
    4274:	ldr	q0, [sp, #112]
    4278:	bl	2d30 <__unordtf2@plt>
    427c:	cbnz	w0, 4594 <__multc3@@GCC_4.0.0+0x6e4>
    4280:	stp	x19, x24, [sp, #96]
    4284:	stp	x20, x25, [sp, #112]
    4288:	ldr	q1, [sp, #96]
    428c:	ldr	q0, [sp, #112]
    4290:	bl	2b10 <__multf3@plt>
    4294:	stp	x22, x26, [sp, #96]
    4298:	stp	x21, x23, [sp, #112]
    429c:	ldr	q1, [sp, #96]
    42a0:	str	q0, [sp, #96]
    42a4:	ldr	q0, [sp, #112]
    42a8:	bl	2b10 <__multf3@plt>
    42ac:	mov	v1.16b, v0.16b
    42b0:	ldr	q2, [sp, #96]
    42b4:	mov	v0.16b, v2.16b
    42b8:	bl	2d80 <__subtf3@plt>
    42bc:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    42c0:	add	x0, x0, #0x7b0
    42c4:	ldr	q1, [x0]
    42c8:	bl	2b10 <__multf3@plt>
    42cc:	stp	x22, x26, [sp, #96]
    42d0:	stp	x20, x25, [sp, #112]
    42d4:	ldr	q1, [sp, #96]
    42d8:	str	q0, [sp, #96]
    42dc:	ldr	q0, [sp, #112]
    42e0:	bl	2b10 <__multf3@plt>
    42e4:	stp	x19, x24, [sp, #112]
    42e8:	stp	x21, x23, [sp, #128]
    42ec:	ldr	q1, [sp, #112]
    42f0:	str	q0, [sp, #112]
    42f4:	ldr	q0, [sp, #128]
    42f8:	bl	2b10 <__multf3@plt>
    42fc:	mov	v1.16b, v0.16b
    4300:	ldr	q2, [sp, #112]
    4304:	mov	v0.16b, v2.16b
    4308:	bl	2c20 <__addtf3@plt>
    430c:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4310:	add	x0, x0, #0x7b0
    4314:	ldr	q1, [x0]
    4318:	bl	2b10 <__multf3@plt>
    431c:	str	q0, [sp, #112]
    4320:	ldp	x19, x20, [sp, #16]
    4324:	ldp	x21, x22, [sp, #32]
    4328:	ldp	x23, x24, [sp, #48]
    432c:	ldp	x25, x26, [sp, #64]
    4330:	ldp	x27, x28, [sp, #80]
    4334:	ldr	q0, [sp, #96]
    4338:	ldr	q1, [sp, #112]
    433c:	ldp	x29, x30, [sp], #256
    4340:	ret
    4344:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4348:	add	x0, x0, #0x7a0
    434c:	stp	x22, x28, [sp, #96]
    4350:	ldr	q1, [x0]
    4354:	ldr	q0, [sp, #96]
    4358:	bl	2bc0 <__letf2@plt>
    435c:	cmp	w0, #0x0
    4360:	cset	w27, le
    4364:	b	4238 <__multc3@@GCC_4.0.0+0x388>
    4368:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    436c:	add	x0, x0, #0x7a0
    4370:	stp	x19, x28, [sp, #96]
    4374:	ldr	q1, [x0]
    4378:	ldr	q0, [sp, #96]
    437c:	bl	2bc0 <__letf2@plt>
    4380:	cmp	w0, #0x0
    4384:	cset	w27, le
    4388:	b	41fc <__multc3@@GCC_4.0.0+0x34c>
    438c:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4390:	add	x0, x0, #0x7a0
    4394:	and	x1, x23, #0x7fffffffffffffff
    4398:	stp	x21, x1, [sp, #192]
    439c:	ldr	q1, [x0]
    43a0:	ldr	q0, [sp, #192]
    43a4:	bl	2bc0 <__letf2@plt>
    43a8:	cmp	w0, #0x0
    43ac:	cset	w1, le
    43b0:	b	40fc <__multc3@@GCC_4.0.0+0x24c>
    43b4:	adrp	x1, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    43b8:	add	x1, x1, #0x7a0
    43bc:	ldr	x0, [sp, #208]
    43c0:	stp	x20, x0, [sp, #192]
    43c4:	ldr	q1, [x1]
    43c8:	ldr	q0, [sp, #192]
    43cc:	bl	2bc0 <__letf2@plt>
    43d0:	cmp	w0, #0x0
    43d4:	cset	w1, le
    43d8:	b	40b8 <__multc3@@GCC_4.0.0+0x208>
    43dc:	ldr	w0, [sp, #236]
    43e0:	cbnz	w0, 4280 <__multc3@@GCC_4.0.0+0x3d0>
    43e4:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    43e8:	add	x0, x0, #0x7a0
    43ec:	and	x27, x27, #0x7fffffffffffffff
    43f0:	stp	x28, x27, [sp, #192]
    43f4:	ldr	q1, [x0]
    43f8:	ldr	q0, [sp, #192]
    43fc:	bl	2d30 <__unordtf2@plt>
    4400:	cbnz	w0, 4424 <__multc3@@GCC_4.0.0+0x574>
    4404:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4408:	add	x0, x0, #0x7a0
    440c:	stp	x28, x27, [sp, #192]
    4410:	ldr	q1, [x0]
    4414:	ldr	q0, [sp, #192]
    4418:	bl	2bc0 <__letf2@plt>
    441c:	cmp	w0, #0x0
    4420:	b.gt	44b0 <__multc3@@GCC_4.0.0+0x600>
    4424:	ldr	x0, [sp, #168]
    4428:	ldr	x28, [sp, #144]
    442c:	and	x27, x0, #0x7fffffffffffffff
    4430:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4434:	add	x0, x0, #0x7a0
    4438:	stp	x28, x27, [sp, #192]
    443c:	ldr	q1, [x0]
    4440:	ldr	q0, [sp, #192]
    4444:	bl	2d30 <__unordtf2@plt>
    4448:	cbnz	w0, 446c <__multc3@@GCC_4.0.0+0x5bc>
    444c:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4450:	add	x0, x0, #0x7a0
    4454:	stp	x28, x27, [sp, #144]
    4458:	ldr	q1, [x0]
    445c:	ldr	q0, [sp, #144]
    4460:	bl	2bc0 <__letf2@plt>
    4464:	cmp	w0, #0x0
    4468:	b.gt	44b0 <__multc3@@GCC_4.0.0+0x600>
    446c:	ldp	x28, x0, [sp, #176]
    4470:	and	x27, x0, #0x7fffffffffffffff
    4474:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4478:	add	x0, x0, #0x7a0
    447c:	stp	x28, x27, [sp, #144]
    4480:	ldr	q0, [sp, #144]
    4484:	ldr	q1, [x0]
    4488:	bl	2d30 <__unordtf2@plt>
    448c:	cbnz	w0, 4530 <__multc3@@GCC_4.0.0+0x680>
    4490:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4494:	add	x0, x0, #0x7a0
    4498:	stp	x28, x27, [sp, #144]
    449c:	ldr	q1, [x0]
    44a0:	ldr	q0, [sp, #144]
    44a4:	bl	2bc0 <__letf2@plt>
    44a8:	cmp	w0, #0x0
    44ac:	b.le	4530 <__multc3@@GCC_4.0.0+0x680>
    44b0:	stp	x20, x25, [sp, #96]
    44b4:	stp	x20, x25, [sp, #112]
    44b8:	ldr	q1, [sp, #96]
    44bc:	ldr	q0, [sp, #112]
    44c0:	bl	2d30 <__unordtf2@plt>
    44c4:	cbnz	w0, 460c <__multc3@@GCC_4.0.0+0x75c>
    44c8:	stp	x21, x23, [sp, #96]
    44cc:	stp	x21, x23, [sp, #112]
    44d0:	ldr	q1, [sp, #96]
    44d4:	ldr	q0, [sp, #112]
    44d8:	bl	2d30 <__unordtf2@plt>
    44dc:	cbnz	w0, 45f4 <__multc3@@GCC_4.0.0+0x744>
    44e0:	stp	x19, x24, [sp, #96]
    44e4:	stp	x19, x24, [sp, #112]
    44e8:	ldr	q1, [sp, #96]
    44ec:	ldr	q0, [sp, #112]
    44f0:	bl	2d30 <__unordtf2@plt>
    44f4:	cbnz	w0, 45dc <__multc3@@GCC_4.0.0+0x72c>
    44f8:	stp	x22, x26, [sp, #96]
    44fc:	stp	x22, x26, [sp, #112]
    4500:	ldr	q1, [sp, #96]
    4504:	ldr	q0, [sp, #112]
    4508:	bl	2d30 <__unordtf2@plt>
    450c:	cbz	w0, 4280 <__multc3@@GCC_4.0.0+0x3d0>
    4510:	mov	x22, #0x0                   	// #0
    4514:	mov	x0, #0x0                   	// #0
    4518:	tbz	x26, #63, 4520 <__multc3@@GCC_4.0.0+0x670>
    451c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    4520:	mov	x26, x0
    4524:	b	4280 <__multc3@@GCC_4.0.0+0x3d0>
    4528:	str	wzr, [sp, #236]
    452c:	b	4144 <__multc3@@GCC_4.0.0+0x294>
    4530:	ldr	x0, [sp, #224]
    4534:	ldr	x28, [sp, #128]
    4538:	and	x27, x0, #0x7fffffffffffffff
    453c:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4540:	add	x0, x0, #0x7a0
    4544:	stp	x28, x27, [sp, #144]
    4548:	ldr	q1, [x0]
    454c:	ldr	q0, [sp, #144]
    4550:	bl	2d30 <__unordtf2@plt>
    4554:	cbnz	w0, 4320 <__multc3@@GCC_4.0.0+0x470>
    4558:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    455c:	add	x0, x0, #0x7a0
    4560:	stp	x28, x27, [sp, #128]
    4564:	ldr	q1, [x0]
    4568:	ldr	q0, [sp, #128]
    456c:	bl	2bc0 <__letf2@plt>
    4570:	cmp	w0, #0x0
    4574:	b.gt	44b0 <__multc3@@GCC_4.0.0+0x600>
    4578:	b	4320 <__multc3@@GCC_4.0.0+0x470>
    457c:	mov	x20, #0x0                   	// #0
    4580:	mov	x0, #0x0                   	// #0
    4584:	tbz	x25, #63, 458c <__multc3@@GCC_4.0.0+0x6dc>
    4588:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    458c:	mov	x25, x0
    4590:	b	4268 <__multc3@@GCC_4.0.0+0x3b8>
    4594:	mov	x21, #0x0                   	// #0
    4598:	mov	x0, #0x0                   	// #0
    459c:	tbz	x23, #63, 45a4 <__multc3@@GCC_4.0.0+0x6f4>
    45a0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    45a4:	mov	x23, x0
    45a8:	b	4280 <__multc3@@GCC_4.0.0+0x3d0>
    45ac:	mov	x22, #0x0                   	// #0
    45b0:	mov	x0, #0x0                   	// #0
    45b4:	tbz	x26, #63, 45bc <__multc3@@GCC_4.0.0+0x70c>
    45b8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    45bc:	mov	x26, x0
    45c0:	b	4144 <__multc3@@GCC_4.0.0+0x294>
    45c4:	mov	x19, #0x0                   	// #0
    45c8:	mov	x0, #0x0                   	// #0
    45cc:	tbz	x24, #63, 45d4 <__multc3@@GCC_4.0.0+0x724>
    45d0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    45d4:	mov	x24, x0
    45d8:	b	412c <__multc3@@GCC_4.0.0+0x27c>
    45dc:	mov	x19, #0x0                   	// #0
    45e0:	mov	x0, #0x0                   	// #0
    45e4:	tbz	x24, #63, 45ec <__multc3@@GCC_4.0.0+0x73c>
    45e8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    45ec:	mov	x24, x0
    45f0:	b	44f8 <__multc3@@GCC_4.0.0+0x648>
    45f4:	mov	x21, #0x0                   	// #0
    45f8:	mov	x0, #0x0                   	// #0
    45fc:	tbz	x23, #63, 4604 <__multc3@@GCC_4.0.0+0x754>
    4600:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    4604:	mov	x23, x0
    4608:	b	44e0 <__multc3@@GCC_4.0.0+0x630>
    460c:	mov	x20, #0x0                   	// #0
    4610:	mov	x0, #0x0                   	// #0
    4614:	tbz	x25, #63, 461c <__multc3@@GCC_4.0.0+0x76c>
    4618:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    461c:	mov	x25, x0
    4620:	b	44c8 <__multc3@@GCC_4.0.0+0x618>
    4624:	nop
    4628:	fcvt	s19, h2
    462c:	fcvt	s16, h3
    4630:	mov	v17.h[0], v0.h[0]
    4634:	mov	v18.h[0], v1.h[0]
    4638:	fcvt	s20, h1
    463c:	fcvt	s21, h0
    4640:	fabs	s5, s19
    4644:	fabs	s6, s16
    4648:	fcvt	h5, s5
    464c:	fcvt	h6, s6
    4650:	fcvt	s5, h5
    4654:	fcvt	s6, h6
    4658:	fcmpe	s5, s6
    465c:	b.pl	47a0 <__multc3@@GCC_4.0.0+0x8f0>  // b.nfrst
    4660:	fdiv	s4, s19, s16
    4664:	fcvt	h4, s4
    4668:	fcvt	s4, h4
    466c:	fmadd	s1, s4, s19, s16
    4670:	fmadd	s0, s4, s21, s20
    4674:	fnmsub	s4, s4, s20, s21
    4678:	fcvt	h1, s1
    467c:	fcvt	s1, h1
    4680:	fdiv	s0, s0, s1
    4684:	fdiv	s4, s4, s1
    4688:	fcvt	h0, s0
    468c:	fcvt	h1, s4
    4690:	fcvt	s7, h0
    4694:	fcvt	s4, h1
    4698:	fcmp	s7, s7
    469c:	cset	w1, vs
    46a0:	fcmp	s4, s4
    46a4:	cset	w0, vs
    46a8:	tst	w1, w0
    46ac:	b.eq	479c <__multc3@@GCC_4.0.0+0x8ec>  // b.none
    46b0:	fcmp	s19, #0.0
    46b4:	b.eq	47bc <__multc3@@GCC_4.0.0+0x90c>  // b.none
    46b8:	fabs	s4, s21
    46bc:	mov	w0, #0xe000                	// #57344
    46c0:	movk	w0, #0x477f, lsl #16
    46c4:	fmov	s7, w0
    46c8:	fcvt	h4, s4
    46cc:	fcvt	s4, h4
    46d0:	fcmp	s4, s7
    46d4:	b.gt	4800 <__multc3@@GCC_4.0.0+0x950>
    46d8:	fabs	s22, s20
    46dc:	fcvt	h22, s22
    46e0:	fcvt	s22, h22
    46e4:	fcmp	s22, s7
    46e8:	b.gt	4800 <__multc3@@GCC_4.0.0+0x950>
    46ec:	mov	w0, #0xe000                	// #57344
    46f0:	movk	w0, #0x477f, lsl #16
    46f4:	fmov	s7, w0
    46f8:	fcmp	s5, s7
    46fc:	cset	w0, le
    4700:	fcmp	s6, s7
    4704:	cset	w1, le
    4708:	cmp	w0, #0x0
    470c:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    4710:	b.ne	479c <__multc3@@GCC_4.0.0+0x8ec>  // b.any
    4714:	fcmp	s4, s7
    4718:	b.hi	479c <__multc3@@GCC_4.0.0+0x8ec>  // b.pmore
    471c:	fabs	s4, s20
    4720:	fcvt	h4, s4
    4724:	fcvt	s4, h4
    4728:	fcmp	s4, s7
    472c:	b.hi	479c <__multc3@@GCC_4.0.0+0x8ec>  // b.pmore
    4730:	eor	w3, w1, #0x1
    4734:	eor	w2, w0, #0x1
    4738:	umov	w1, v2.h[0]
    473c:	umov	w0, v3.h[0]
    4740:	scvtf	d2, w3
    4744:	scvtf	d0, w2
    4748:	movi	d4, #0x0
    474c:	fcvt	h1, d2
    4750:	fcvt	h0, d0
    4754:	umov	w3, v1.h[0]
    4758:	umov	w2, v0.h[0]
    475c:	bfxil	w0, w3, #0, #15
    4760:	bfxil	w1, w2, #0, #15
    4764:	dup	v2.4h, w0
    4768:	dup	v1.4h, w1
    476c:	fcvt	s2, h2
    4770:	fcvt	s3, h1
    4774:	fmul	s0, s2, s20
    4778:	fmul	s1, s2, s21
    477c:	fmadd	s0, s3, s21, s0
    4780:	fnmsub	s1, s3, s20, s1
    4784:	fcvt	d0, s0
    4788:	fcvt	d1, s1
    478c:	fmul	d0, d0, d4
    4790:	fmul	d1, d1, d4
    4794:	fcvt	h0, d0
    4798:	fcvt	h1, d1
    479c:	ret
    47a0:	fdiv	s4, s16, s19
    47a4:	fcvt	h4, s4
    47a8:	fcvt	s4, h4
    47ac:	fmadd	s1, s4, s16, s19
    47b0:	fmadd	s0, s4, s20, s21
    47b4:	fmsub	s4, s4, s21, s20
    47b8:	b	4678 <__multc3@@GCC_4.0.0+0x7c8>
    47bc:	fcmp	s16, #0.0
    47c0:	b.ne	46b8 <__multc3@@GCC_4.0.0+0x808>  // b.any
    47c4:	fcmp	s21, s21
    47c8:	cset	w0, vc
    47cc:	fcmp	s20, s20
    47d0:	cset	w1, vc
    47d4:	orr	w0, w0, w1
    47d8:	cbz	w0, 46b8 <__multc3@@GCC_4.0.0+0x808>
    47dc:	umov	w0, v2.h[0]
    47e0:	movi	v1.4h, #0x7c, lsl #8
    47e4:	tbnz	w0, #15, 489c <__multc3@@GCC_4.0.0+0x9ec>
    47e8:	fcvt	s1, h1
    47ec:	fmul	s0, s1, s21
    47f0:	fmul	s1, s1, s20
    47f4:	fcvt	h0, s0
    47f8:	fcvt	h1, s1
    47fc:	ret
    4800:	mov	w0, #0xe000                	// #57344
    4804:	movk	w0, #0x477f, lsl #16
    4808:	fmov	s7, w0
    480c:	fcmp	s5, s7
    4810:	b.hi	46ec <__multc3@@GCC_4.0.0+0x83c>  // b.pmore
    4814:	fcmp	s6, s7
    4818:	b.hi	46ec <__multc3@@GCC_4.0.0+0x83c>  // b.pmore
    481c:	fcmp	s4, s7
    4820:	mov	w2, #0x7f800000            	// #2139095040
    4824:	fmov	s4, w2
    4828:	fabs	s1, s20
    482c:	umov	w0, v17.h[0]
    4830:	umov	w1, v18.h[0]
    4834:	cset	w2, gt
    4838:	fcvt	h1, s1
    483c:	scvtf	d2, w2
    4840:	fcvt	s1, h1
    4844:	fcvt	h0, d2
    4848:	fcmp	s1, s7
    484c:	umov	w2, v0.h[0]
    4850:	bfxil	w0, w2, #0, #15
    4854:	dup	v0.4h, w0
    4858:	cset	w0, gt
    485c:	scvtf	d1, w0
    4860:	fcvt	s2, h0
    4864:	fcvt	h0, d1
    4868:	fmul	s1, s2, s16
    486c:	umov	w0, v0.h[0]
    4870:	bfxil	w1, w0, #0, #15
    4874:	dup	v3.4h, w1
    4878:	fcvt	s3, h3
    487c:	fmul	s0, s3, s16
    4880:	fnmsub	s1, s3, s19, s1
    4884:	fmadd	s0, s2, s19, s0
    4888:	fmul	s1, s1, s4
    488c:	fmul	s0, s0, s4
    4890:	fcvt	h1, s1
    4894:	fcvt	h0, s0
    4898:	ret
    489c:	movi	v1.4h, #0xfc, lsl #8
    48a0:	b	47e8 <__multc3@@GCC_4.0.0+0x938>
    48a4:	nop

00000000000048a8 <__divsc3@@GCC_4.0.0>:
    48a8:	fabs	s6, s2
    48ac:	fabs	s7, s3
    48b0:	fmov	s16, s0
    48b4:	fmov	s17, s1
    48b8:	fcmpe	s6, s7
    48bc:	b.pl	491c <__divsc3@@GCC_4.0.0+0x74>  // b.nfrst
    48c0:	fdiv	s4, s2, s3
    48c4:	fmadd	s1, s2, s4, s3
    48c8:	fmadd	s5, s0, s4, s17
    48cc:	fnmsub	s4, s17, s4, s0
    48d0:	fdiv	s0, s5, s1
    48d4:	fdiv	s1, s4, s1
    48d8:	fcmp	s0, s0
    48dc:	fccmp	s1, s1, #0x0, vs
    48e0:	b.vc	4918 <__divsc3@@GCC_4.0.0+0x70>
    48e4:	fcmp	s2, #0.0
    48e8:	movi	v4.2s, #0x0
    48ec:	fccmp	s3, s4, #0x0, eq  // eq = none
    48f0:	b.ne	4938 <__divsc3@@GCC_4.0.0+0x90>  // b.any
    48f4:	fcmp	s16, s16
    48f8:	fccmp	s17, s17, #0x0, vs
    48fc:	b.vs	4938 <__divsc3@@GCC_4.0.0+0x90>
    4900:	movi	v1.2s, #0x80, lsl #24
    4904:	mov	w0, #0x7f800000            	// #2139095040
    4908:	fmov	s3, w0
    490c:	bif	v2.8b, v3.8b, v1.8b
    4910:	fmul	s0, s2, s16
    4914:	fmul	s1, s2, s17
    4918:	ret
    491c:	fdiv	s4, s3, s2
    4920:	fmadd	s1, s3, s4, s2
    4924:	fmadd	s5, s4, s17, s0
    4928:	fmsub	s4, s4, s0, s17
    492c:	fdiv	s0, s5, s1
    4930:	fdiv	s1, s4, s1
    4934:	b	48d8 <__divsc3@@GCC_4.0.0+0x30>
    4938:	fabs	s5, s16
    493c:	mov	w0, #0x7f7fffff            	// #2139095039
    4940:	fmov	s4, w0
    4944:	fcmp	s5, s4
    4948:	b.gt	49cc <__divsc3@@GCC_4.0.0+0x124>
    494c:	fabs	s18, s17
    4950:	fcmp	s18, s4
    4954:	b.gt	49cc <__divsc3@@GCC_4.0.0+0x124>
    4958:	mov	w0, #0x7f7fffff            	// #2139095039
    495c:	fmov	s4, w0
    4960:	fcmp	s6, s4
    4964:	cset	w1, le
    4968:	fcmp	s7, s4
    496c:	cset	w0, le
    4970:	cmp	w1, #0x0
    4974:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    4978:	b.ne	4918 <__divsc3@@GCC_4.0.0+0x70>  // b.any
    497c:	fcmp	s5, s4
    4980:	b.hi	4918 <__divsc3@@GCC_4.0.0+0x70>  // b.pmore
    4984:	fabs	s5, s17
    4988:	fcmp	s5, s4
    498c:	b.hi	4918 <__divsc3@@GCC_4.0.0+0x70>  // b.pmore
    4990:	eor	w0, w0, #0x1
    4994:	eor	w1, w1, #0x1
    4998:	movi	v5.2s, #0x80, lsl #24
    499c:	movi	v4.2s, #0x0
    49a0:	scvtf	s0, w0
    49a4:	scvtf	s1, w1
    49a8:	bit	v0.8b, v3.8b, v5.8b
    49ac:	bif	v2.8b, v1.8b, v5.8b
    49b0:	fmul	s1, s16, s0
    49b4:	fmul	s5, s17, s0
    49b8:	fmadd	s0, s16, s2, s5
    49bc:	fnmsub	s1, s17, s2, s1
    49c0:	fmul	s0, s0, s4
    49c4:	fmul	s1, s1, s4
    49c8:	ret
    49cc:	mov	w0, #0x7f7fffff            	// #2139095039
    49d0:	fmov	s4, w0
    49d4:	fcmp	s6, s4
    49d8:	b.hi	4958 <__divsc3@@GCC_4.0.0+0xb0>  // b.pmore
    49dc:	fcmp	s7, s4
    49e0:	b.hi	4958 <__divsc3@@GCC_4.0.0+0xb0>  // b.pmore
    49e4:	fcmp	s5, s4
    49e8:	fabs	s0, s17
    49ec:	mov	w0, #0x7f800000            	// #2139095040
    49f0:	fmov	s5, w0
    49f4:	movi	v6.2s, #0x80, lsl #24
    49f8:	cset	w0, gt
    49fc:	fcmp	s0, s4
    4a00:	scvtf	s0, w0
    4a04:	cset	w0, gt
    4a08:	scvtf	s1, w0
    4a0c:	bif	v16.8b, v0.8b, v6.8b
    4a10:	bit	v1.8b, v17.8b, v6.8b
    4a14:	fmul	s4, s3, s16
    4a18:	fmul	s0, s3, s1
    4a1c:	fnmsub	s3, s2, s1, s4
    4a20:	fmadd	s2, s2, s16, s0
    4a24:	fmul	s1, s3, s5
    4a28:	fmul	s0, s2, s5
    4a2c:	ret

0000000000004a30 <__divdc3@@GCC_4.0.0>:
    4a30:	fabs	d6, d2
    4a34:	fabs	d7, d3
    4a38:	fmov	d16, d0
    4a3c:	fmov	d17, d1
    4a40:	fcmpe	d6, d7
    4a44:	b.pl	4aa8 <__divdc3@@GCC_4.0.0+0x78>  // b.nfrst
    4a48:	fdiv	d4, d2, d3
    4a4c:	fmadd	d1, d2, d4, d3
    4a50:	fmadd	d5, d0, d4, d17
    4a54:	fnmsub	d4, d17, d4, d0
    4a58:	fdiv	d0, d5, d1
    4a5c:	fdiv	d1, d4, d1
    4a60:	fcmp	d0, d0
    4a64:	fccmp	d1, d1, #0x0, vs
    4a68:	b.vc	4aa4 <__divdc3@@GCC_4.0.0+0x74>
    4a6c:	fcmp	d2, #0.0
    4a70:	movi	d4, #0x0
    4a74:	fccmp	d3, d4, #0x0, eq  // eq = none
    4a78:	b.ne	4ac4 <__divdc3@@GCC_4.0.0+0x94>  // b.any
    4a7c:	fcmp	d16, d16
    4a80:	fccmp	d17, d17, #0x0, vs
    4a84:	b.vs	4ac4 <__divdc3@@GCC_4.0.0+0x94>
    4a88:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
    4a8c:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    4a90:	fmov	d3, x0
    4a94:	fmov	d1, x1
    4a98:	bif	v2.8b, v3.8b, v1.8b
    4a9c:	fmul	d0, d2, d16
    4aa0:	fmul	d1, d2, d17
    4aa4:	ret
    4aa8:	fdiv	d4, d3, d2
    4aac:	fmadd	d1, d3, d4, d2
    4ab0:	fmadd	d5, d4, d17, d0
    4ab4:	fmsub	d4, d4, d0, d17
    4ab8:	fdiv	d0, d5, d1
    4abc:	fdiv	d1, d4, d1
    4ac0:	b	4a60 <__divdc3@@GCC_4.0.0+0x30>
    4ac4:	fabs	d5, d16
    4ac8:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    4acc:	fmov	d4, x0
    4ad0:	fcmp	d5, d4
    4ad4:	b.gt	4b5c <__divdc3@@GCC_4.0.0+0x12c>
    4ad8:	fabs	d18, d17
    4adc:	fcmp	d18, d4
    4ae0:	b.gt	4b5c <__divdc3@@GCC_4.0.0+0x12c>
    4ae4:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    4ae8:	fmov	d4, x0
    4aec:	fcmp	d6, d4
    4af0:	cset	w1, le
    4af4:	fcmp	d7, d4
    4af8:	cset	w0, le
    4afc:	cmp	w1, #0x0
    4b00:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    4b04:	b.ne	4aa4 <__divdc3@@GCC_4.0.0+0x74>  // b.any
    4b08:	fcmp	d5, d4
    4b0c:	b.hi	4aa4 <__divdc3@@GCC_4.0.0+0x74>  // b.pmore
    4b10:	fabs	d5, d17
    4b14:	fcmp	d5, d4
    4b18:	b.hi	4aa4 <__divdc3@@GCC_4.0.0+0x74>  // b.pmore
    4b1c:	eor	w0, w0, #0x1
    4b20:	eor	w1, w1, #0x1
    4b24:	mov	x2, #0x8000000000000000    	// #-9223372036854775808
    4b28:	fmov	d5, x2
    4b2c:	scvtf	d0, w0
    4b30:	scvtf	d1, w1
    4b34:	movi	d4, #0x0
    4b38:	bit	v0.8b, v3.8b, v5.8b
    4b3c:	bif	v2.8b, v1.8b, v5.8b
    4b40:	fmul	d1, d16, d0
    4b44:	fmul	d5, d17, d0
    4b48:	fmadd	d0, d16, d2, d5
    4b4c:	fnmsub	d1, d17, d2, d1
    4b50:	fmul	d0, d0, d4
    4b54:	fmul	d1, d1, d4
    4b58:	ret
    4b5c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    4b60:	fmov	d4, x0
    4b64:	fcmp	d6, d4
    4b68:	b.hi	4ae4 <__divdc3@@GCC_4.0.0+0xb4>  // b.pmore
    4b6c:	fcmp	d7, d4
    4b70:	b.hi	4ae4 <__divdc3@@GCC_4.0.0+0xb4>  // b.pmore
    4b74:	fcmp	d5, d4
    4b78:	fabs	d0, d17
    4b7c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    4b80:	fmov	d6, x0
    4b84:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
    4b88:	fmov	d5, x0
    4b8c:	cset	w0, gt
    4b90:	fcmp	d0, d4
    4b94:	scvtf	d0, w0
    4b98:	cset	w0, gt
    4b9c:	scvtf	d1, w0
    4ba0:	bif	v16.8b, v0.8b, v6.8b
    4ba4:	bit	v1.8b, v17.8b, v6.8b
    4ba8:	fmul	d4, d3, d16
    4bac:	fmul	d0, d3, d1
    4bb0:	fnmsub	d3, d2, d1, d4
    4bb4:	fmadd	d2, d2, d16, d0
    4bb8:	fmul	d1, d3, d5
    4bbc:	fmul	d0, d2, d5
    4bc0:	ret
    4bc4:	nop

0000000000004bc8 <__divtc3@@GCC_4.0.0>:
    4bc8:	stp	x29, x30, [sp, #-176]!
    4bcc:	mov	x29, sp
    4bd0:	stp	x19, x20, [sp, #16]
    4bd4:	stp	x21, x22, [sp, #32]
    4bd8:	stp	x23, x24, [sp, #48]
    4bdc:	str	q2, [sp, #96]
    4be0:	str	q3, [sp, #112]
    4be4:	ldp	x19, x22, [sp, #96]
    4be8:	stp	x27, x28, [sp, #80]
    4bec:	ldp	x20, x23, [sp, #112]
    4bf0:	stp	x25, x26, [sp, #64]
    4bf4:	and	x27, x22, #0x7fffffffffffffff
    4bf8:	stp	x19, x27, [sp, #112]
    4bfc:	str	q0, [sp, #128]
    4c00:	and	x28, x23, #0x7fffffffffffffff
    4c04:	stp	x20, x28, [sp, #96]
    4c08:	ldr	q0, [sp, #112]
    4c0c:	str	q1, [sp, #144]
    4c10:	ldp	x21, x25, [sp, #128]
    4c14:	ldp	x24, x26, [sp, #144]
    4c18:	ldr	q1, [sp, #96]
    4c1c:	bl	2cf0 <__lttf2@plt>
    4c20:	tbz	w0, #31, 4f38 <__divtc3@@GCC_4.0.0+0x370>
    4c24:	stp	x20, x23, [sp, #96]
    4c28:	stp	x19, x22, [sp, #112]
    4c2c:	ldr	q1, [sp, #96]
    4c30:	ldr	q0, [sp, #112]
    4c34:	bl	2c60 <__divtf3@plt>
    4c38:	stp	x19, x22, [sp, #96]
    4c3c:	mov	v1.16b, v0.16b
    4c40:	str	q0, [sp, #112]
    4c44:	ldr	q0, [sp, #96]
    4c48:	bl	2b10 <__multf3@plt>
    4c4c:	stp	x20, x23, [sp, #96]
    4c50:	ldr	q1, [sp, #96]
    4c54:	bl	2c20 <__addtf3@plt>
    4c58:	stp	x21, x25, [sp, #96]
    4c5c:	ldr	q2, [sp, #112]
    4c60:	str	q0, [sp, #112]
    4c64:	ldr	q0, [sp, #96]
    4c68:	mov	v1.16b, v2.16b
    4c6c:	str	q2, [sp, #144]
    4c70:	bl	2b10 <__multf3@plt>
    4c74:	stp	x24, x26, [sp, #96]
    4c78:	ldr	q1, [sp, #96]
    4c7c:	bl	2c20 <__addtf3@plt>
    4c80:	ldr	q4, [sp, #112]
    4c84:	mov	v1.16b, v4.16b
    4c88:	str	q4, [sp, #128]
    4c8c:	bl	2c60 <__divtf3@plt>
    4c90:	stp	x24, x26, [sp, #112]
    4c94:	ldr	q2, [sp, #144]
    4c98:	str	q0, [sp, #96]
    4c9c:	ldr	q0, [sp, #112]
    4ca0:	mov	v1.16b, v2.16b
    4ca4:	bl	2b10 <__multf3@plt>
    4ca8:	stp	x21, x25, [sp, #112]
    4cac:	ldr	q1, [sp, #112]
    4cb0:	bl	2d80 <__subtf3@plt>
    4cb4:	ldr	q4, [sp, #128]
    4cb8:	mov	v1.16b, v4.16b
    4cbc:	bl	2c60 <__divtf3@plt>
    4cc0:	str	q0, [sp, #112]
    4cc4:	ldr	q0, [sp, #96]
    4cc8:	mov	v1.16b, v0.16b
    4ccc:	bl	2d30 <__unordtf2@plt>
    4cd0:	cmp	w0, #0x0
    4cd4:	ldr	q0, [sp, #112]
    4cd8:	cset	w1, ne  // ne = any
    4cdc:	str	w1, [sp, #128]
    4ce0:	mov	v1.16b, v0.16b
    4ce4:	bl	2d30 <__unordtf2@plt>
    4ce8:	cmp	w0, #0x0
    4cec:	ldr	w1, [sp, #128]
    4cf0:	cset	w0, ne  // ne = any
    4cf4:	tst	w0, w1
    4cf8:	b.eq	4f14 <__divtc3@@GCC_4.0.0+0x34c>  // b.none
    4cfc:	movi	v1.2d, #0x0
    4d00:	stp	x19, x22, [sp, #128]
    4d04:	ldr	q0, [sp, #128]
    4d08:	bl	2b30 <__eqtf2@plt>
    4d0c:	stp	x20, x23, [sp, #128]
    4d10:	cmp	w0, #0x0
    4d14:	movi	v1.2d, #0x0
    4d18:	cset	w1, eq  // eq = none
    4d1c:	ldr	q0, [sp, #128]
    4d20:	str	w1, [sp, #144]
    4d24:	bl	2b30 <__eqtf2@plt>
    4d28:	cmp	w0, #0x0
    4d2c:	ldr	w1, [sp, #144]
    4d30:	cset	w0, eq  // eq = none
    4d34:	tst	w0, w1
    4d38:	b.ne	4fd0 <__divtc3@@GCC_4.0.0+0x408>  // b.any
    4d3c:	adrp	x1, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4d40:	add	x1, x1, #0x7a0
    4d44:	and	x0, x25, #0x7fffffffffffffff
    4d48:	stp	x21, x0, [sp, #128]
    4d4c:	ldr	q1, [x1]
    4d50:	ldr	q0, [sp, #128]
    4d54:	str	x0, [sp, #144]
    4d58:	bl	2d30 <__unordtf2@plt>
    4d5c:	cbnz	w0, 5068 <__divtc3@@GCC_4.0.0+0x4a0>
    4d60:	adrp	x1, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4d64:	add	x1, x1, #0x7a0
    4d68:	ldr	x0, [sp, #144]
    4d6c:	stp	x21, x0, [sp, #128]
    4d70:	ldr	q1, [x1]
    4d74:	ldr	q0, [sp, #128]
    4d78:	bl	2bc0 <__letf2@plt>
    4d7c:	cmp	w0, #0x0
    4d80:	b.le	5068 <__divtc3@@GCC_4.0.0+0x4a0>
    4d84:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4d88:	add	x0, x0, #0x7a0
    4d8c:	stp	x19, x27, [sp, #128]
    4d90:	ldr	q1, [x0]
    4d94:	ldr	q0, [sp, #128]
    4d98:	bl	2d30 <__unordtf2@plt>
    4d9c:	cbnz	w0, 50b0 <__divtc3@@GCC_4.0.0+0x4e8>
    4da0:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4da4:	add	x0, x0, #0x7a0
    4da8:	stp	x19, x27, [sp, #128]
    4dac:	ldr	q1, [x0]
    4db0:	ldr	q0, [sp, #128]
    4db4:	bl	2bf0 <__gttf2@plt>
    4db8:	cmp	w0, #0x0
    4dbc:	b.gt	50b0 <__divtc3@@GCC_4.0.0+0x4e8>
    4dc0:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4dc4:	add	x0, x0, #0x7a0
    4dc8:	stp	x20, x28, [sp, #128]
    4dcc:	ldr	q1, [x0]
    4dd0:	ldr	q0, [sp, #128]
    4dd4:	bl	2d30 <__unordtf2@plt>
    4dd8:	cbnz	w0, 50b0 <__divtc3@@GCC_4.0.0+0x4e8>
    4ddc:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4de0:	add	x0, x0, #0x7a0
    4de4:	stp	x20, x28, [sp, #128]
    4de8:	ldr	q1, [x0]
    4dec:	ldr	q0, [sp, #128]
    4df0:	bl	2bf0 <__gttf2@plt>
    4df4:	cmp	w0, #0x0
    4df8:	b.gt	50b0 <__divtc3@@GCC_4.0.0+0x4e8>
    4dfc:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4e00:	add	x0, x0, #0x7a0
    4e04:	ldr	x28, [sp, #144]
    4e08:	stp	x21, x28, [sp, #96]
    4e0c:	ldr	q1, [x0]
    4e10:	ldr	q0, [sp, #96]
    4e14:	mov	w27, #0x1                   	// #1
    4e18:	bl	2d30 <__unordtf2@plt>
    4e1c:	cbz	w0, 52b4 <__divtc3@@GCC_4.0.0+0x6ec>
    4e20:	eor	w0, w27, #0x1
    4e24:	and	x27, x26, #0x7fffffffffffffff
    4e28:	and	w0, w0, #0x1
    4e2c:	bl	2d70 <__floatsitf@plt>
    4e30:	str	q0, [sp, #112]
    4e34:	mov	w28, #0x1                   	// #1
    4e38:	ldp	x21, x0, [sp, #112]
    4e3c:	stp	x24, x27, [sp, #96]
    4e40:	ldr	q0, [sp, #96]
    4e44:	bfxil	x25, x0, #0, #63
    4e48:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4e4c:	add	x0, x0, #0x7a0
    4e50:	ldr	q1, [x0]
    4e54:	bl	2d30 <__unordtf2@plt>
    4e58:	cbz	w0, 5290 <__divtc3@@GCC_4.0.0+0x6c8>
    4e5c:	eor	w0, w28, #0x1
    4e60:	and	w0, w0, #0x1
    4e64:	bl	2d70 <__floatsitf@plt>
    4e68:	str	q0, [sp, #128]
    4e6c:	ldp	x24, x0, [sp, #128]
    4e70:	stp	x21, x25, [sp, #96]
    4e74:	stp	x19, x22, [sp, #112]
    4e78:	ldr	q1, [sp, #96]
    4e7c:	ldr	q0, [sp, #112]
    4e80:	bfxil	x26, x0, #0, #63
    4e84:	bl	2b10 <__multf3@plt>
    4e88:	stp	x24, x26, [sp, #96]
    4e8c:	stp	x20, x23, [sp, #112]
    4e90:	ldr	q1, [sp, #96]
    4e94:	str	q0, [sp, #96]
    4e98:	ldr	q0, [sp, #112]
    4e9c:	bl	2b10 <__multf3@plt>
    4ea0:	mov	v1.16b, v0.16b
    4ea4:	ldr	q2, [sp, #96]
    4ea8:	mov	v0.16b, v2.16b
    4eac:	bl	2c20 <__addtf3@plt>
    4eb0:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4eb4:	add	x0, x0, #0x7b0
    4eb8:	ldr	q1, [x0]
    4ebc:	bl	2b10 <__multf3@plt>
    4ec0:	stp	x24, x26, [sp, #96]
    4ec4:	stp	x19, x22, [sp, #112]
    4ec8:	ldr	q1, [sp, #96]
    4ecc:	str	q0, [sp, #96]
    4ed0:	ldr	q0, [sp, #112]
    4ed4:	bl	2b10 <__multf3@plt>
    4ed8:	stp	x21, x25, [sp, #112]
    4edc:	stp	x20, x23, [sp, #128]
    4ee0:	ldr	q1, [sp, #112]
    4ee4:	str	q0, [sp, #112]
    4ee8:	ldr	q0, [sp, #128]
    4eec:	bl	2b10 <__multf3@plt>
    4ef0:	mov	v1.16b, v0.16b
    4ef4:	ldr	q2, [sp, #112]
    4ef8:	mov	v0.16b, v2.16b
    4efc:	bl	2d80 <__subtf3@plt>
    4f00:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    4f04:	add	x0, x0, #0x7b0
    4f08:	ldr	q1, [x0]
    4f0c:	bl	2b10 <__multf3@plt>
    4f10:	str	q0, [sp, #112]
    4f14:	ldp	x19, x20, [sp, #16]
    4f18:	ldp	x21, x22, [sp, #32]
    4f1c:	ldp	x23, x24, [sp, #48]
    4f20:	ldp	x25, x26, [sp, #64]
    4f24:	ldp	x27, x28, [sp, #80]
    4f28:	ldr	q0, [sp, #96]
    4f2c:	ldr	q1, [sp, #112]
    4f30:	ldp	x29, x30, [sp], #176
    4f34:	ret
    4f38:	stp	x19, x22, [sp, #96]
    4f3c:	stp	x20, x23, [sp, #112]
    4f40:	ldr	q1, [sp, #96]
    4f44:	ldr	q0, [sp, #112]
    4f48:	bl	2c60 <__divtf3@plt>
    4f4c:	stp	x20, x23, [sp, #96]
    4f50:	mov	v1.16b, v0.16b
    4f54:	str	q0, [sp, #128]
    4f58:	ldr	q0, [sp, #96]
    4f5c:	bl	2b10 <__multf3@plt>
    4f60:	stp	x19, x22, [sp, #96]
    4f64:	ldr	q1, [sp, #96]
    4f68:	bl	2c20 <__addtf3@plt>
    4f6c:	stp	x24, x26, [sp, #96]
    4f70:	ldr	q2, [sp, #128]
    4f74:	ldr	q1, [sp, #96]
    4f78:	str	q0, [sp, #112]
    4f7c:	mov	v0.16b, v2.16b
    4f80:	str	q2, [sp, #144]
    4f84:	bl	2b10 <__multf3@plt>
    4f88:	stp	x21, x25, [sp, #96]
    4f8c:	ldr	q1, [sp, #96]
    4f90:	bl	2c20 <__addtf3@plt>
    4f94:	ldr	q4, [sp, #112]
    4f98:	mov	v1.16b, v4.16b
    4f9c:	str	q4, [sp, #128]
    4fa0:	bl	2c60 <__divtf3@plt>
    4fa4:	stp	x21, x25, [sp, #112]
    4fa8:	mov	v6.16b, v0.16b
    4fac:	ldr	q1, [sp, #112]
    4fb0:	ldr	q2, [sp, #144]
    4fb4:	str	q6, [sp, #96]
    4fb8:	mov	v0.16b, v2.16b
    4fbc:	bl	2b10 <__multf3@plt>
    4fc0:	stp	x24, x26, [sp, #112]
    4fc4:	mov	v1.16b, v0.16b
    4fc8:	ldr	q0, [sp, #112]
    4fcc:	b	4cb0 <__divtc3@@GCC_4.0.0+0xe8>
    4fd0:	stp	x21, x25, [sp, #128]
    4fd4:	stp	x21, x25, [sp, #144]
    4fd8:	ldr	q1, [sp, #128]
    4fdc:	ldr	q0, [sp, #144]
    4fe0:	bl	2d30 <__unordtf2@plt>
    4fe4:	stp	x24, x26, [sp, #128]
    4fe8:	cmp	w0, #0x0
    4fec:	stp	x24, x26, [sp, #144]
    4ff0:	cset	w1, eq  // eq = none
    4ff4:	ldr	q1, [sp, #128]
    4ff8:	ldr	q0, [sp, #144]
    4ffc:	str	w1, [sp, #168]
    5000:	bl	2d30 <__unordtf2@plt>
    5004:	cmp	w0, #0x0
    5008:	ldr	w1, [sp, #168]
    500c:	cset	w0, eq  // eq = none
    5010:	orr	w1, w1, w0
    5014:	tbz	w1, #0, 4d3c <__divtc3@@GCC_4.0.0+0x174>
    5018:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    501c:	add	x0, x0, #0x7b0
    5020:	ldr	q2, [x0]
    5024:	tbz	x22, #63, 5034 <__divtc3@@GCC_4.0.0+0x46c>
    5028:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    502c:	add	x0, x0, #0x7c0
    5030:	ldr	q2, [x0]
    5034:	stp	x21, x25, [sp, #96]
    5038:	mov	v0.16b, v2.16b
    503c:	ldr	q1, [sp, #96]
    5040:	str	q2, [sp, #128]
    5044:	bl	2b10 <__multf3@plt>
    5048:	stp	x24, x26, [sp, #112]
    504c:	ldr	q2, [sp, #128]
    5050:	ldr	q1, [sp, #112]
    5054:	str	q0, [sp, #96]
    5058:	mov	v0.16b, v2.16b
    505c:	bl	2b10 <__multf3@plt>
    5060:	str	q0, [sp, #112]
    5064:	b	4f14 <__divtc3@@GCC_4.0.0+0x34c>
    5068:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    506c:	add	x0, x0, #0x7a0
    5070:	and	x1, x26, #0x7fffffffffffffff
    5074:	stp	x24, x1, [sp, #128]
    5078:	ldr	q1, [x0]
    507c:	ldr	q0, [sp, #128]
    5080:	str	x1, [sp, #168]
    5084:	bl	2d30 <__unordtf2@plt>
    5088:	cbnz	w0, 50b0 <__divtc3@@GCC_4.0.0+0x4e8>
    508c:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    5090:	add	x0, x0, #0x7a0
    5094:	ldr	x1, [sp, #168]
    5098:	stp	x24, x1, [sp, #128]
    509c:	ldr	q1, [x0]
    50a0:	ldr	q0, [sp, #128]
    50a4:	bl	2bc0 <__letf2@plt>
    50a8:	cmp	w0, #0x0
    50ac:	b.gt	4d84 <__divtc3@@GCC_4.0.0+0x1bc>
    50b0:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    50b4:	add	x0, x0, #0x7a0
    50b8:	stp	x19, x27, [sp, #128]
    50bc:	mov	w1, #0x1                   	// #1
    50c0:	ldr	q1, [x0]
    50c4:	ldr	q0, [sp, #128]
    50c8:	str	w1, [sp, #168]
    50cc:	bl	2d30 <__unordtf2@plt>
    50d0:	ldr	w1, [sp, #168]
    50d4:	cbz	w0, 526c <__divtc3@@GCC_4.0.0+0x6a4>
    50d8:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    50dc:	add	x0, x0, #0x7a0
    50e0:	stp	x20, x28, [sp, #128]
    50e4:	and	w19, w1, #0xff
    50e8:	mov	w27, #0x1                   	// #1
    50ec:	ldr	q1, [x0]
    50f0:	ldr	q0, [sp, #128]
    50f4:	bl	2d30 <__unordtf2@plt>
    50f8:	cbz	w0, 5248 <__divtc3@@GCC_4.0.0+0x680>
    50fc:	and	w27, w27, #0xff
    5100:	cmp	w19, #0x0
    5104:	ccmp	w27, #0x0, #0x4, ne  // ne = any
    5108:	b.ne	4f14 <__divtc3@@GCC_4.0.0+0x34c>  // b.any
    510c:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    5110:	add	x0, x0, #0x7a0
    5114:	ldr	x20, [sp, #144]
    5118:	stp	x21, x20, [sp, #128]
    511c:	ldr	q1, [x0]
    5120:	ldr	q0, [sp, #128]
    5124:	bl	2d30 <__unordtf2@plt>
    5128:	cbnz	w0, 4f14 <__divtc3@@GCC_4.0.0+0x34c>
    512c:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    5130:	add	x0, x0, #0x7a0
    5134:	stp	x21, x20, [sp, #128]
    5138:	ldr	q1, [x0]
    513c:	ldr	q0, [sp, #128]
    5140:	bl	2bf0 <__gttf2@plt>
    5144:	cmp	w0, #0x0
    5148:	b.gt	4f14 <__divtc3@@GCC_4.0.0+0x34c>
    514c:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    5150:	add	x0, x0, #0x7a0
    5154:	and	x20, x26, #0x7fffffffffffffff
    5158:	stp	x24, x20, [sp, #128]
    515c:	ldr	q1, [x0]
    5160:	ldr	q0, [sp, #128]
    5164:	bl	2d30 <__unordtf2@plt>
    5168:	cbnz	w0, 4f14 <__divtc3@@GCC_4.0.0+0x34c>
    516c:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    5170:	add	x0, x0, #0x7a0
    5174:	stp	x24, x20, [sp, #128]
    5178:	ldr	q1, [x0]
    517c:	ldr	q0, [sp, #128]
    5180:	bl	2bf0 <__gttf2@plt>
    5184:	cmp	w0, #0x0
    5188:	b.gt	4f14 <__divtc3@@GCC_4.0.0+0x34c>
    518c:	eor	w0, w19, #0x1
    5190:	bl	2d70 <__floatsitf@plt>
    5194:	str	q0, [sp, #96]
    5198:	eor	w0, w27, #0x1
    519c:	ldp	x20, x1, [sp, #96]
    51a0:	bfxil	x22, x1, #0, #63
    51a4:	bl	2d70 <__floatsitf@plt>
    51a8:	str	q0, [sp, #128]
    51ac:	ldp	x19, x0, [sp, #128]
    51b0:	stp	x20, x22, [sp, #96]
    51b4:	stp	x21, x25, [sp, #112]
    51b8:	ldr	q1, [sp, #96]
    51bc:	ldr	q0, [sp, #112]
    51c0:	bfxil	x23, x0, #0, #63
    51c4:	bl	2b10 <__multf3@plt>
    51c8:	stp	x19, x23, [sp, #96]
    51cc:	stp	x24, x26, [sp, #112]
    51d0:	ldr	q1, [sp, #96]
    51d4:	str	q0, [sp, #96]
    51d8:	ldr	q0, [sp, #112]
    51dc:	bl	2b10 <__multf3@plt>
    51e0:	mov	v1.16b, v0.16b
    51e4:	ldr	q2, [sp, #96]
    51e8:	mov	v0.16b, v2.16b
    51ec:	bl	2c20 <__addtf3@plt>
    51f0:	movi	v1.2d, #0x0
    51f4:	bl	2b10 <__multf3@plt>
    51f8:	stp	x20, x22, [sp, #96]
    51fc:	stp	x24, x26, [sp, #112]
    5200:	ldr	q1, [sp, #96]
    5204:	str	q0, [sp, #96]
    5208:	ldr	q0, [sp, #112]
    520c:	bl	2b10 <__multf3@plt>
    5210:	stp	x19, x23, [sp, #112]
    5214:	stp	x21, x25, [sp, #128]
    5218:	ldr	q1, [sp, #112]
    521c:	str	q0, [sp, #112]
    5220:	ldr	q0, [sp, #128]
    5224:	bl	2b10 <__multf3@plt>
    5228:	mov	v1.16b, v0.16b
    522c:	ldr	q2, [sp, #112]
    5230:	mov	v0.16b, v2.16b
    5234:	bl	2d80 <__subtf3@plt>
    5238:	movi	v1.2d, #0x0
    523c:	bl	2b10 <__multf3@plt>
    5240:	str	q0, [sp, #112]
    5244:	b	4f14 <__divtc3@@GCC_4.0.0+0x34c>
    5248:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    524c:	add	x0, x0, #0x7a0
    5250:	stp	x20, x28, [sp, #128]
    5254:	ldr	q1, [x0]
    5258:	ldr	q0, [sp, #128]
    525c:	bl	2bc0 <__letf2@plt>
    5260:	cmp	w0, #0x0
    5264:	cset	w27, le
    5268:	b	50fc <__divtc3@@GCC_4.0.0+0x534>
    526c:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    5270:	add	x0, x0, #0x7a0
    5274:	stp	x19, x27, [sp, #128]
    5278:	ldr	q1, [x0]
    527c:	ldr	q0, [sp, #128]
    5280:	bl	2bc0 <__letf2@plt>
    5284:	cmp	w0, #0x0
    5288:	cset	w1, le
    528c:	b	50d8 <__divtc3@@GCC_4.0.0+0x510>
    5290:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    5294:	add	x0, x0, #0x7a0
    5298:	stp	x24, x27, [sp, #96]
    529c:	ldr	q1, [x0]
    52a0:	ldr	q0, [sp, #96]
    52a4:	bl	2bc0 <__letf2@plt>
    52a8:	cmp	w0, #0x0
    52ac:	cset	w28, le
    52b0:	b	4e5c <__divtc3@@GCC_4.0.0+0x294>
    52b4:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    52b8:	add	x0, x0, #0x7a0
    52bc:	stp	x21, x28, [sp, #96]
    52c0:	ldr	q1, [x0]
    52c4:	ldr	q0, [sp, #96]
    52c8:	bl	2bc0 <__letf2@plt>
    52cc:	cmp	w0, #0x0
    52d0:	cset	w27, le
    52d4:	b	4e20 <__divtc3@@GCC_4.0.0+0x258>

00000000000052d8 <__bswapsi2@@GCC_4.3.0>:
    52d8:	rev	w0, w0
    52dc:	ret

00000000000052e0 <__bswapdi2@@GCC_4.3.0>:
    52e0:	rev	x0, x0
    52e4:	ret

00000000000052e8 <__clrsbdi2@@GCC_4.7.0>:
    52e8:	eor	x1, x0, x0, asr #63
    52ec:	mov	w2, #0x3f                  	// #63
    52f0:	clz	x0, x1
    52f4:	cmp	x1, #0x0
    52f8:	sub	w0, w0, #0x1
    52fc:	csel	w0, w0, w2, ne  // ne = any
    5300:	ret
    5304:	nop

0000000000005308 <__clrsbti2@@GCC_4.7.0>:
    5308:	cbnz	x1, 531c <__clrsbti2@@GCC_4.7.0+0x14>
    530c:	mov	x1, x0
    5310:	mov	w0, #0x7f                  	// #127
    5314:	cbnz	x1, 5348 <__clrsbti2@@GCC_4.7.0+0x40>
    5318:	ret
    531c:	cmn	x1, #0x1
    5320:	b.eq	533c <__clrsbti2@@GCC_4.7.0+0x34>  // b.none
    5324:	tbnz	x1, #63, 5350 <__clrsbti2@@GCC_4.7.0+0x48>
    5328:	mov	w0, #0x0                   	// #0
    532c:	clz	x1, x1
    5330:	sub	w0, w0, #0x1
    5334:	add	w0, w0, w1
    5338:	ret
    533c:	mvn	x1, x0
    5340:	mov	w0, #0x7f                  	// #127
    5344:	cbz	x1, 5318 <__clrsbti2@@GCC_4.7.0+0x10>
    5348:	mov	w0, #0x40                  	// #64
    534c:	b	532c <__clrsbti2@@GCC_4.7.0+0x24>
    5350:	mvn	x1, x1
    5354:	b	5328 <__clrsbti2@@GCC_4.7.0+0x20>

0000000000005358 <__fixunssfdi@@GCC_3.0>:
    5358:	movi	v1.2s, #0x5f, lsl #24
    535c:	fcmpe	s0, s1
    5360:	b.ge	536c <__fixunssfdi@@GCC_3.0+0x14>  // b.tcont
    5364:	fcvtzs	x0, s0
    5368:	ret
    536c:	fsub	s0, s0, s1
    5370:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    5374:	fcvtzs	x0, s0
    5378:	add	x0, x0, x1
    537c:	ret

0000000000005380 <__fixunsdfdi@@GCC_3.0>:
    5380:	mov	x0, #0x43e0000000000000    	// #4890909195324358656
    5384:	fmov	d1, x0
    5388:	fcmpe	d0, d1
    538c:	b.ge	5398 <__fixunsdfdi@@GCC_3.0+0x18>  // b.tcont
    5390:	fcvtzs	x0, d0
    5394:	ret
    5398:	fsub	d0, d0, d1
    539c:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    53a0:	fcvtzs	x0, d0
    53a4:	add	x0, x0, x1
    53a8:	ret
    53ac:	nop

00000000000053b0 <__fixsfti@@GCC_3.0>:
    53b0:	fcmpe	s0, #0.0
    53b4:	b.mi	53bc <__fixsfti@@GCC_3.0+0xc>  // b.first
    53b8:	b	2bb0 <__fixunssfti@plt>
    53bc:	fneg	s0, s0
    53c0:	stp	x29, x30, [sp, #-16]!
    53c4:	mov	x29, sp
    53c8:	bl	2bb0 <__fixunssfti@plt>
    53cc:	negs	x0, x0
    53d0:	ngc	x1, x1
    53d4:	ldp	x29, x30, [sp], #16
    53d8:	ret
    53dc:	nop

00000000000053e0 <__fixdfti@@GCC_3.0>:
    53e0:	fcmpe	d0, #0.0
    53e4:	b.mi	53ec <__fixdfti@@GCC_3.0+0xc>  // b.first
    53e8:	b	2d20 <__fixunsdfti@plt>
    53ec:	fneg	d0, d0
    53f0:	stp	x29, x30, [sp, #-16]!
    53f4:	mov	x29, sp
    53f8:	bl	2d20 <__fixunsdfti@plt>
    53fc:	negs	x0, x0
    5400:	ngc	x1, x1
    5404:	ldp	x29, x30, [sp], #16
    5408:	ret
    540c:	nop

0000000000005410 <__fixunssfti@@GCC_3.0>:
    5410:	fcvt	d0, s0
    5414:	mov	x0, #0x3bf0000000000000    	// #4318952042648305664
    5418:	fmov	d1, x0
    541c:	mov	x0, #0x43f0000000000000    	// #4895412794951729152
    5420:	fmov	d2, x0
    5424:	fmul	d1, d0, d1
    5428:	fcvtzu	x1, d1
    542c:	ucvtf	d1, x1
    5430:	fmsub	d0, d1, d2, d0
    5434:	fcvtzu	x0, d0
    5438:	ret
    543c:	nop

0000000000005440 <__fixunsdfti@@GCC_3.0>:
    5440:	mov	x0, #0x3bf0000000000000    	// #4318952042648305664
    5444:	fmov	d1, x0
    5448:	mov	x0, #0x43f0000000000000    	// #4895412794951729152
    544c:	fmov	d2, x0
    5450:	fmul	d1, d0, d1
    5454:	fcvtzu	x1, d1
    5458:	ucvtf	d1, x1
    545c:	fmsub	d0, d1, d2, d0
    5460:	fcvtzu	x0, d0
    5464:	ret

0000000000005468 <__floattisf@@GCC_3.0>:
    5468:	stp	x29, x30, [sp, #-48]!
    546c:	mov	x2, #0x3ffffffffffff       	// #1125899906842623
    5470:	mov	x29, sp
    5474:	str	x19, [sp, #16]
    5478:	mov	x19, x0
    547c:	subs	x3, x19, #0x1
    5480:	mov	x0, x1
    5484:	mov	x1, #0x1ffffffffffff       	// #562949953421311
    5488:	adc	x1, x0, x1
    548c:	cmp	x1, x2
    5490:	b.hi	54d8 <__floattisf@@GCC_3.0+0x70>  // b.pmore
    5494:	b.eq	54d0 <__floattisf@@GCC_3.0+0x68>  // b.none
    5498:	bl	2b40 <__floatditf@plt>
    549c:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    54a0:	add	x0, x0, #0x7d0
    54a4:	ldr	q1, [x0]
    54a8:	bl	2b10 <__multf3@plt>
    54ac:	str	q0, [sp, #32]
    54b0:	mov	x0, x19
    54b4:	bl	2b00 <__floatunditf@plt>
    54b8:	ldr	q1, [sp, #32]
    54bc:	bl	2c20 <__addtf3@plt>
    54c0:	bl	2d90 <__trunctfsf2@plt>
    54c4:	ldr	x19, [sp, #16]
    54c8:	ldp	x29, x30, [sp], #48
    54cc:	ret
    54d0:	cmn	x3, #0x2
    54d4:	b.ls	5498 <__floattisf@@GCC_3.0+0x30>  // b.plast
    54d8:	and	x1, x19, #0xffffffffffff8000
    54dc:	tst	x19, #0x7fff
    54e0:	orr	x1, x1, #0x8000
    54e4:	csel	x19, x1, x19, ne  // ne = any
    54e8:	b	5498 <__floattisf@@GCC_3.0+0x30>
    54ec:	nop

00000000000054f0 <__floattidf@@GCC_3.0>:
    54f0:	stp	x29, x30, [sp, #-48]!
    54f4:	mov	x2, #0x3ffffffffffff       	// #1125899906842623
    54f8:	mov	x29, sp
    54fc:	str	x19, [sp, #16]
    5500:	mov	x19, x0
    5504:	subs	x3, x19, #0x1
    5508:	mov	x0, x1
    550c:	mov	x1, #0x1ffffffffffff       	// #562949953421311
    5510:	adc	x1, x0, x1
    5514:	cmp	x1, x2
    5518:	b.hi	5560 <__floattidf@@GCC_3.0+0x70>  // b.pmore
    551c:	b.eq	5558 <__floattidf@@GCC_3.0+0x68>  // b.none
    5520:	bl	2b40 <__floatditf@plt>
    5524:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    5528:	add	x0, x0, #0x7d0
    552c:	ldr	q1, [x0]
    5530:	bl	2b10 <__multf3@plt>
    5534:	str	q0, [sp, #32]
    5538:	mov	x0, x19
    553c:	bl	2b00 <__floatunditf@plt>
    5540:	ldr	q1, [sp, #32]
    5544:	bl	2c20 <__addtf3@plt>
    5548:	bl	2c90 <__trunctfdf2@plt>
    554c:	ldr	x19, [sp, #16]
    5550:	ldp	x29, x30, [sp], #48
    5554:	ret
    5558:	cmn	x3, #0x2
    555c:	b.ls	5520 <__floattidf@@GCC_3.0+0x30>  // b.plast
    5560:	and	x1, x19, #0xffffffffffff8000
    5564:	tst	x19, #0x7fff
    5568:	orr	x1, x1, #0x8000
    556c:	csel	x19, x1, x19, ne  // ne = any
    5570:	b	5520 <__floattidf@@GCC_3.0+0x30>
    5574:	nop

0000000000005578 <__floatuntisf@@GCC_4.2.0>:
    5578:	stp	x29, x30, [sp, #-48]!
    557c:	mov	x29, sp
    5580:	str	x19, [sp, #16]
    5584:	mov	x19, x0
    5588:	mov	x0, x1
    558c:	mov	x1, #0x1ffffffffffff       	// #562949953421311
    5590:	cmp	x0, x1
    5594:	b.ls	55a8 <__floatuntisf@@GCC_4.2.0+0x30>  // b.plast
    5598:	and	x1, x19, #0xffffffffffff8000
    559c:	tst	x19, #0x7fff
    55a0:	orr	x1, x1, #0x8000
    55a4:	csel	x19, x1, x19, ne  // ne = any
    55a8:	bl	2b00 <__floatunditf@plt>
    55ac:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    55b0:	add	x0, x0, #0x7d0
    55b4:	ldr	q1, [x0]
    55b8:	bl	2b10 <__multf3@plt>
    55bc:	str	q0, [sp, #32]
    55c0:	mov	x0, x19
    55c4:	bl	2b00 <__floatunditf@plt>
    55c8:	ldr	q1, [sp, #32]
    55cc:	bl	2c20 <__addtf3@plt>
    55d0:	bl	2d90 <__trunctfsf2@plt>
    55d4:	ldr	x19, [sp, #16]
    55d8:	ldp	x29, x30, [sp], #48
    55dc:	ret

00000000000055e0 <__floatuntidf@@GCC_4.2.0>:
    55e0:	stp	x29, x30, [sp, #-48]!
    55e4:	mov	x29, sp
    55e8:	str	x19, [sp, #16]
    55ec:	mov	x19, x0
    55f0:	mov	x0, x1
    55f4:	mov	x1, #0x1ffffffffffff       	// #562949953421311
    55f8:	cmp	x0, x1
    55fc:	b.ls	5610 <__floatuntidf@@GCC_4.2.0+0x30>  // b.plast
    5600:	and	x1, x19, #0xffffffffffff8000
    5604:	tst	x19, #0x7fff
    5608:	orr	x1, x1, #0x8000
    560c:	csel	x19, x1, x19, ne  // ne = any
    5610:	bl	2b00 <__floatunditf@plt>
    5614:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    5618:	add	x0, x0, #0x7d0
    561c:	ldr	q1, [x0]
    5620:	bl	2b10 <__multf3@plt>
    5624:	str	q0, [sp, #32]
    5628:	mov	x0, x19
    562c:	bl	2b00 <__floatunditf@plt>
    5630:	ldr	q1, [sp, #32]
    5634:	bl	2c20 <__addtf3@plt>
    5638:	bl	2c90 <__trunctfdf2@plt>
    563c:	ldr	x19, [sp, #16]
    5640:	ldp	x29, x30, [sp], #48
    5644:	ret

0000000000005648 <__divti3@@GCC_3.0>:
    5648:	mov	x6, #0x0                   	// #0
    564c:	tbnz	x1, #63, 572c <__divti3@@GCC_3.0+0xe4>
    5650:	tbz	x3, #63, 5660 <__divti3@@GCC_3.0+0x18>
    5654:	negs	x2, x2
    5658:	mvn	x6, x6
    565c:	ngc	x3, x3
    5660:	mov	x4, x2
    5664:	mov	x7, x0
    5668:	mov	x5, x1
    566c:	cbnz	x3, 5718 <__divti3@@GCC_3.0+0xd0>
    5670:	cmp	x2, x1
    5674:	b.ls	583c <__divti3@@GCC_3.0+0x1f4>  // b.plast
    5678:	clz	x0, x2
    567c:	cbz	x0, 5698 <__divti3@@GCC_3.0+0x50>
    5680:	neg	w1, w0
    5684:	lsl	x3, x5, x0
    5688:	lsl	x4, x2, x0
    568c:	lsr	x5, x7, x1
    5690:	orr	x5, x5, x3
    5694:	lsl	x7, x7, x0
    5698:	lsr	x2, x4, #32
    569c:	and	x8, x4, #0xffffffff
    56a0:	udiv	x3, x5, x2
    56a4:	mov	x0, x3
    56a8:	msub	x3, x3, x2, x5
    56ac:	mul	x5, x8, x0
    56b0:	extr	x1, x3, x7, #32
    56b4:	cmp	x5, x1
    56b8:	b.ls	56cc <__divti3@@GCC_3.0+0x84>  // b.plast
    56bc:	adds	x1, x4, x1
    56c0:	ccmp	x5, x1, #0x0, cc  // cc = lo, ul, last
    56c4:	b.hi	59b0 <__divti3@@GCC_3.0+0x368>  // b.pmore
    56c8:	sub	x0, x0, #0x1
    56cc:	sub	x1, x1, x5
    56d0:	udiv	x5, x1, x2
    56d4:	msub	x1, x5, x2, x1
    56d8:	mov	x2, x7
    56dc:	mul	x8, x8, x5
    56e0:	mov	x3, x5
    56e4:	bfi	x2, x1, #32, #32
    56e8:	cmp	x8, x2
    56ec:	b.ls	5700 <__divti3@@GCC_3.0+0xb8>  // b.plast
    56f0:	adds	x2, x4, x2
    56f4:	ccmp	x8, x2, #0x0, cc  // cc = lo, ul, last
    56f8:	cinc	x3, x5, ls  // ls = plast
    56fc:	sub	x3, x3, #0x2
    5700:	orr	x0, x3, x0, lsl #32
    5704:	mov	x1, #0x0                   	// #0
    5708:	cbz	x6, 5714 <__divti3@@GCC_3.0+0xcc>
    570c:	negs	x0, x0
    5710:	ngc	x1, x1
    5714:	ret
    5718:	cmp	x3, x1
    571c:	b.ls	573c <__divti3@@GCC_3.0+0xf4>  // b.plast
    5720:	mov	x1, #0x0                   	// #0
    5724:	mov	x0, #0x0                   	// #0
    5728:	b	5708 <__divti3@@GCC_3.0+0xc0>
    572c:	negs	x0, x0
    5730:	mov	x6, #0xffffffffffffffff    	// #-1
    5734:	ngc	x1, x1
    5738:	b	5650 <__divti3@@GCC_3.0+0x8>
    573c:	clz	x8, x3
    5740:	cbz	x8, 5958 <__divti3@@GCC_3.0+0x310>
    5744:	mov	x4, #0x40                  	// #64
    5748:	sub	x4, x4, x8
    574c:	lsl	x3, x3, x8
    5750:	lsr	x5, x2, x4
    5754:	orr	x3, x5, x3
    5758:	lsr	x7, x1, x4
    575c:	and	x9, x3, #0xffffffff
    5760:	lsr	x11, x3, #32
    5764:	lsl	x1, x1, x8
    5768:	lsr	x4, x0, x4
    576c:	orr	x4, x4, x1
    5770:	lsl	x2, x2, x8
    5774:	udiv	x5, x7, x11
    5778:	mov	x1, x5
    577c:	msub	x5, x5, x11, x7
    5780:	mul	x7, x9, x1
    5784:	extr	x5, x5, x4, #32
    5788:	cmp	x7, x5
    578c:	b.ls	57a0 <__divti3@@GCC_3.0+0x158>  // b.plast
    5790:	adds	x5, x3, x5
    5794:	ccmp	x7, x5, #0x0, cc  // cc = lo, ul, last
    5798:	b.hi	5998 <__divti3@@GCC_3.0+0x350>  // b.pmore
    579c:	sub	x1, x1, #0x1
    57a0:	sub	x7, x5, x7
    57a4:	udiv	x10, x7, x11
    57a8:	msub	x7, x10, x11, x7
    57ac:	mov	x5, x10
    57b0:	mul	x9, x9, x10
    57b4:	bfi	x4, x7, #32, #32
    57b8:	cmp	x9, x4
    57bc:	b.ls	57d0 <__divti3@@GCC_3.0+0x188>  // b.plast
    57c0:	adds	x4, x3, x4
    57c4:	ccmp	x9, x4, #0x0, cc  // cc = lo, ul, last
    57c8:	b.hi	5980 <__divti3@@GCC_3.0+0x338>  // b.pmore
    57cc:	sub	x5, x10, #0x1
    57d0:	orr	x1, x5, x1, lsl #32
    57d4:	and	x10, x2, #0xffffffff
    57d8:	mov	w5, w5
    57dc:	lsr	x2, x2, #32
    57e0:	lsr	x7, x1, #32
    57e4:	sub	x4, x4, x9
    57e8:	mov	x11, #0x100000000           	// #4294967296
    57ec:	mul	x12, x5, x10
    57f0:	mul	x9, x7, x10
    57f4:	madd	x5, x5, x2, x9
    57f8:	mul	x2, x7, x2
    57fc:	add	x3, x5, x12, lsr #32
    5800:	add	x5, x2, x11
    5804:	cmp	x9, x3
    5808:	csel	x2, x5, x2, hi  // hi = pmore
    580c:	add	x2, x2, x3, lsr #32
    5810:	cmp	x4, x2
    5814:	b.cc	5830 <__divti3@@GCC_3.0+0x1e8>  // b.lo, b.ul, b.last
    5818:	and	x12, x12, #0xffffffff
    581c:	lsl	x0, x0, x8
    5820:	add	x3, x12, x3, lsl #32
    5824:	cmp	x0, x3
    5828:	ccmp	x4, x2, #0x0, cc  // cc = lo, ul, last
    582c:	b.ne	5968 <__divti3@@GCC_3.0+0x320>  // b.any
    5830:	sub	x0, x1, #0x1
    5834:	mov	x1, #0x0                   	// #0
    5838:	b	5708 <__divti3@@GCC_3.0+0xc0>
    583c:	cbnz	x2, 5848 <__divti3@@GCC_3.0+0x200>
    5840:	mov	x2, #0x1                   	// #1
    5844:	udiv	x4, x2, x3
    5848:	clz	x8, x4
    584c:	cbnz	x8, 58c8 <__divti3@@GCC_3.0+0x280>
    5850:	lsr	x11, x4, #32
    5854:	and	x10, x4, #0xffffffff
    5858:	sub	x3, x1, x4
    585c:	mov	x1, #0x1                   	// #1
    5860:	udiv	x5, x3, x11
    5864:	mov	x0, x5
    5868:	msub	x5, x5, x11, x3
    586c:	mul	x2, x0, x10
    5870:	extr	x3, x5, x7, #32
    5874:	cmp	x2, x3
    5878:	b.ls	588c <__divti3@@GCC_3.0+0x244>  // b.plast
    587c:	adds	x3, x4, x3
    5880:	ccmp	x2, x3, #0x0, cc  // cc = lo, ul, last
    5884:	b.hi	59a4 <__divti3@@GCC_3.0+0x35c>  // b.pmore
    5888:	sub	x0, x0, #0x1
    588c:	sub	x3, x3, x2
    5890:	mov	x2, x7
    5894:	udiv	x9, x3, x11
    5898:	msub	x3, x9, x11, x3
    589c:	mov	x8, x9
    58a0:	mul	x5, x9, x10
    58a4:	bfi	x2, x3, #32, #32
    58a8:	cmp	x5, x2
    58ac:	b.ls	58c0 <__divti3@@GCC_3.0+0x278>  // b.plast
    58b0:	adds	x2, x4, x2
    58b4:	ccmp	x5, x2, #0x0, cc  // cc = lo, ul, last
    58b8:	cinc	x8, x9, ls  // ls = plast
    58bc:	sub	x8, x8, #0x2
    58c0:	orr	x0, x8, x0, lsl #32
    58c4:	b	5708 <__divti3@@GCC_3.0+0xc0>
    58c8:	lsl	x4, x4, x8
    58cc:	mov	x2, #0x40                  	// #64
    58d0:	sub	x2, x2, x8
    58d4:	lsr	x11, x4, #32
    58d8:	lsl	x3, x1, x8
    58dc:	and	x10, x4, #0xffffffff
    58e0:	lsr	x1, x1, x2
    58e4:	lsr	x5, x0, x2
    58e8:	orr	x5, x5, x3
    58ec:	udiv	x2, x1, x11
    58f0:	lsl	x7, x0, x8
    58f4:	msub	x1, x2, x11, x1
    58f8:	mov	x0, x2
    58fc:	mul	x2, x10, x2
    5900:	extr	x1, x1, x5, #32
    5904:	cmp	x2, x1
    5908:	b.ls	591c <__divti3@@GCC_3.0+0x2d4>  // b.plast
    590c:	adds	x1, x4, x1
    5910:	ccmp	x2, x1, #0x0, cc  // cc = lo, ul, last
    5914:	b.hi	5974 <__divti3@@GCC_3.0+0x32c>  // b.pmore
    5918:	sub	x0, x0, #0x1
    591c:	sub	x1, x1, x2
    5920:	udiv	x2, x1, x11
    5924:	msub	x1, x2, x11, x1
    5928:	mov	x8, x2
    592c:	mul	x3, x10, x2
    5930:	bfi	x5, x1, #32, #32
    5934:	cmp	x3, x5
    5938:	b.ls	594c <__divti3@@GCC_3.0+0x304>  // b.plast
    593c:	adds	x5, x4, x5
    5940:	ccmp	x3, x5, #0x0, cc  // cc = lo, ul, last
    5944:	b.hi	598c <__divti3@@GCC_3.0+0x344>  // b.pmore
    5948:	sub	x8, x2, #0x1
    594c:	sub	x3, x5, x3
    5950:	orr	x1, x8, x0, lsl #32
    5954:	b	5860 <__divti3@@GCC_3.0+0x218>
    5958:	ccmp	x2, x0, #0x0, cs  // cs = hs, nlast
    595c:	mov	x1, #0x0                   	// #0
    5960:	cset	x0, ls  // ls = plast
    5964:	b	5708 <__divti3@@GCC_3.0+0xc0>
    5968:	mov	x0, x1
    596c:	mov	x1, #0x0                   	// #0
    5970:	b	5708 <__divti3@@GCC_3.0+0xc0>
    5974:	sub	x0, x0, #0x2
    5978:	add	x1, x1, x4
    597c:	b	591c <__divti3@@GCC_3.0+0x2d4>
    5980:	sub	x5, x10, #0x2
    5984:	add	x4, x4, x3
    5988:	b	57d0 <__divti3@@GCC_3.0+0x188>
    598c:	sub	x8, x2, #0x2
    5990:	add	x5, x5, x4
    5994:	b	594c <__divti3@@GCC_3.0+0x304>
    5998:	sub	x1, x1, #0x2
    599c:	add	x5, x5, x3
    59a0:	b	57a0 <__divti3@@GCC_3.0+0x158>
    59a4:	sub	x0, x0, #0x2
    59a8:	add	x3, x3, x4
    59ac:	b	588c <__divti3@@GCC_3.0+0x244>
    59b0:	sub	x0, x0, #0x2
    59b4:	add	x1, x1, x4
    59b8:	b	56cc <__divti3@@GCC_3.0+0x84>
    59bc:	nop

00000000000059c0 <__modti3@@GCC_3.0>:
    59c0:	mov	x6, #0x0                   	// #0
    59c4:	tbnz	x1, #63, 5aa8 <__modti3@@GCC_3.0+0xe8>
    59c8:	tbz	x3, #63, 59d4 <__modti3@@GCC_3.0+0x14>
    59cc:	negs	x2, x2
    59d0:	ngc	x3, x3
    59d4:	mov	x4, x2
    59d8:	mov	x10, x0
    59dc:	mov	x5, x1
    59e0:	cbnz	x3, 5a7c <__modti3@@GCC_3.0+0xbc>
    59e4:	cmp	x2, x1
    59e8:	b.ls	5ab8 <__modti3@@GCC_3.0+0xf8>  // b.plast
    59ec:	clz	x0, x2
    59f0:	mov	x7, x0
    59f4:	cbz	x0, 5a10 <__modti3@@GCC_3.0+0x50>
    59f8:	neg	w1, w0
    59fc:	lsl	x5, x5, x0
    5a00:	lsl	x4, x2, x0
    5a04:	lsr	x1, x10, x1
    5a08:	orr	x5, x1, x5
    5a0c:	lsl	x10, x10, x0
    5a10:	lsr	x2, x4, #32
    5a14:	and	x0, x4, #0xffffffff
    5a18:	udiv	x1, x5, x2
    5a1c:	msub	x5, x1, x2, x5
    5a20:	mul	x1, x0, x1
    5a24:	extr	x5, x5, x10, #32
    5a28:	cmp	x1, x5
    5a2c:	b.ls	5a40 <__modti3@@GCC_3.0+0x80>  // b.plast
    5a30:	adds	x5, x4, x5
    5a34:	ccmp	x1, x5, #0x0, cc  // cc = lo, ul, last
    5a38:	add	x3, x5, x4
    5a3c:	csel	x5, x3, x5, hi  // hi = pmore
    5a40:	sub	x5, x5, x1
    5a44:	udiv	x1, x5, x2
    5a48:	msub	x5, x1, x2, x5
    5a4c:	mul	x0, x0, x1
    5a50:	mov	x1, x10
    5a54:	bfi	x1, x5, #32, #32
    5a58:	cmp	x0, x1
    5a5c:	b.hi	5bc0 <__modti3@@GCC_3.0+0x200>  // b.pmore
    5a60:	sub	x0, x1, x0
    5a64:	lsr	x0, x0, x7
    5a68:	mov	x1, #0x0                   	// #0
    5a6c:	cbz	x6, 5a78 <__modti3@@GCC_3.0+0xb8>
    5a70:	negs	x0, x0
    5a74:	ngc	x1, x1
    5a78:	ret
    5a7c:	cmp	x3, x1
    5a80:	mov	x4, x0
    5a84:	b.hi	5a6c <__modti3@@GCC_3.0+0xac>  // b.pmore
    5a88:	clz	x8, x3
    5a8c:	cbnz	x8, 5bd4 <__modti3@@GCC_3.0+0x214>
    5a90:	ccmp	x2, x0, #0x0, cs  // cs = hs, nlast
    5a94:	b.hi	5aa0 <__modti3@@GCC_3.0+0xe0>  // b.pmore
    5a98:	subs	x4, x0, x2
    5a9c:	sbc	x1, x1, x3
    5aa0:	mov	x0, x4
    5aa4:	b	5a6c <__modti3@@GCC_3.0+0xac>
    5aa8:	negs	x0, x0
    5aac:	mov	x6, #0xffffffffffffffff    	// #-1
    5ab0:	ngc	x1, x1
    5ab4:	b	59c8 <__modti3@@GCC_3.0+0x8>
    5ab8:	cbnz	x2, 5ac4 <__modti3@@GCC_3.0+0x104>
    5abc:	mov	x4, #0x1                   	// #1
    5ac0:	udiv	x4, x4, x3
    5ac4:	clz	x11, x4
    5ac8:	mov	x7, x11
    5acc:	cbnz	x11, 5b3c <__modti3@@GCC_3.0+0x17c>
    5ad0:	sub	x5, x1, x4
    5ad4:	lsr	x12, x4, #32
    5ad8:	and	x13, x4, #0xffffffff
    5adc:	udiv	x8, x5, x12
    5ae0:	msub	x5, x8, x12, x5
    5ae4:	mul	x8, x8, x13
    5ae8:	extr	x3, x5, x10, #32
    5aec:	cmp	x8, x3
    5af0:	b.ls	5b04 <__modti3@@GCC_3.0+0x144>  // b.plast
    5af4:	adds	x5, x4, x3
    5af8:	ccmp	x8, x5, #0x0, cc  // cc = lo, ul, last
    5afc:	add	x3, x5, x4
    5b00:	csel	x3, x3, x5, hi  // hi = pmore
    5b04:	sub	x3, x3, x8
    5b08:	mov	x1, x10
    5b0c:	udiv	x2, x3, x12
    5b10:	msub	x3, x2, x12, x3
    5b14:	mul	x2, x2, x13
    5b18:	bfi	x1, x3, #32, #32
    5b1c:	cmp	x2, x1
    5b20:	b.ls	5b34 <__modti3@@GCC_3.0+0x174>  // b.plast
    5b24:	adds	x1, x4, x1
    5b28:	add	x4, x1, x4
    5b2c:	ccmp	x2, x1, #0x0, cc  // cc = lo, ul, last
    5b30:	csel	x1, x4, x1, hi  // hi = pmore
    5b34:	sub	x0, x1, x2
    5b38:	b	5a64 <__modti3@@GCC_3.0+0xa4>
    5b3c:	lsl	x4, x4, x11
    5b40:	mov	x5, #0x40                  	// #64
    5b44:	sub	x5, x5, x11
    5b48:	lsr	x12, x4, #32
    5b4c:	and	x13, x4, #0xffffffff
    5b50:	lsl	x2, x1, x11
    5b54:	lsr	x9, x1, x5
    5b58:	lsr	x5, x0, x5
    5b5c:	orr	x5, x5, x2
    5b60:	udiv	x8, x9, x12
    5b64:	lsl	x10, x0, x11
    5b68:	msub	x9, x8, x12, x9
    5b6c:	mul	x0, x13, x8
    5b70:	extr	x8, x9, x5, #32
    5b74:	cmp	x0, x8
    5b78:	b.ls	5b8c <__modti3@@GCC_3.0+0x1cc>  // b.plast
    5b7c:	adds	x8, x4, x8
    5b80:	ccmp	x0, x8, #0x0, cc  // cc = lo, ul, last
    5b84:	add	x1, x8, x4
    5b88:	csel	x8, x1, x8, hi  // hi = pmore
    5b8c:	sub	x8, x8, x0
    5b90:	udiv	x1, x8, x12
    5b94:	msub	x8, x1, x12, x8
    5b98:	mul	x1, x13, x1
    5b9c:	bfi	x5, x8, #32, #32
    5ba0:	cmp	x1, x5
    5ba4:	b.ls	5bb8 <__modti3@@GCC_3.0+0x1f8>  // b.plast
    5ba8:	adds	x5, x4, x5
    5bac:	ccmp	x1, x5, #0x0, cc  // cc = lo, ul, last
    5bb0:	add	x0, x5, x4
    5bb4:	csel	x5, x0, x5, hi  // hi = pmore
    5bb8:	sub	x5, x5, x1
    5bbc:	b	5adc <__modti3@@GCC_3.0+0x11c>
    5bc0:	adds	x1, x4, x1
    5bc4:	add	x4, x1, x4
    5bc8:	ccmp	x0, x1, #0x0, cc  // cc = lo, ul, last
    5bcc:	csel	x1, x4, x1, hi  // hi = pmore
    5bd0:	b	5a60 <__modti3@@GCC_3.0+0xa0>
    5bd4:	mov	x10, #0x40                  	// #64
    5bd8:	sub	x10, x10, x8
    5bdc:	lsl	x3, x3, x8
    5be0:	lsr	x9, x2, x10
    5be4:	orr	x9, x9, x3
    5be8:	lsr	x7, x1, x10
    5bec:	and	x11, x9, #0xffffffff
    5bf0:	lsr	x12, x9, #32
    5bf4:	lsl	x4, x2, x8
    5bf8:	lsr	x3, x0, x10
    5bfc:	lsl	x1, x1, x8
    5c00:	orr	x3, x3, x1
    5c04:	udiv	x2, x7, x12
    5c08:	lsl	x13, x0, x8
    5c0c:	mov	x5, x2
    5c10:	msub	x2, x2, x12, x7
    5c14:	mul	x0, x11, x5
    5c18:	extr	x2, x2, x3, #32
    5c1c:	cmp	x0, x2
    5c20:	b.ls	5c34 <__modti3@@GCC_3.0+0x274>  // b.plast
    5c24:	adds	x2, x9, x2
    5c28:	ccmp	x0, x2, #0x0, cc  // cc = lo, ul, last
    5c2c:	b.hi	5cf8 <__modti3@@GCC_3.0+0x338>  // b.pmore
    5c30:	sub	x5, x5, #0x1
    5c34:	sub	x2, x2, x0
    5c38:	udiv	x0, x2, x12
    5c3c:	msub	x2, x0, x12, x2
    5c40:	mov	x7, x0
    5c44:	mul	x1, x11, x0
    5c48:	bfi	x3, x2, #32, #32
    5c4c:	mov	x2, x3
    5c50:	cmp	x1, x3
    5c54:	b.ls	5c68 <__modti3@@GCC_3.0+0x2a8>  // b.plast
    5c58:	adds	x2, x9, x3
    5c5c:	ccmp	x1, x2, #0x0, cc  // cc = lo, ul, last
    5c60:	b.hi	5cec <__modti3@@GCC_3.0+0x32c>  // b.pmore
    5c64:	sub	x7, x0, #0x1
    5c68:	orr	x5, x7, x5, lsl #32
    5c6c:	and	x12, x4, #0xffffffff
    5c70:	mov	w3, w7
    5c74:	lsr	x0, x4, #32
    5c78:	lsr	x5, x5, #32
    5c7c:	sub	x1, x2, x1
    5c80:	mov	x14, #0x100000000           	// #4294967296
    5c84:	mul	x7, x3, x12
    5c88:	mul	x12, x5, x12
    5c8c:	madd	x3, x3, x0, x12
    5c90:	and	x11, x7, #0xffffffff
    5c94:	mul	x2, x5, x0
    5c98:	add	x5, x3, x7, lsr #32
    5c9c:	add	x0, x2, x14
    5ca0:	cmp	x12, x5
    5ca4:	csel	x2, x0, x2, hi  // hi = pmore
    5ca8:	add	x7, x11, x5, lsl #32
    5cac:	add	x2, x2, x5, lsr #32
    5cb0:	cmp	x1, x2
    5cb4:	b.cc	5cc0 <__modti3@@GCC_3.0+0x300>  // b.lo, b.ul, b.last
    5cb8:	ccmp	x13, x7, #0x2, eq  // eq = none
    5cbc:	b.cs	5ccc <__modti3@@GCC_3.0+0x30c>  // b.hs, b.nlast
    5cc0:	subs	x7, x7, x4
    5cc4:	cinc	x3, x9, cc  // cc = lo, ul, last
    5cc8:	sub	x2, x2, x3
    5ccc:	subs	x0, x13, x7
    5cd0:	cmp	x13, x7
    5cd4:	sbc	x1, x1, x2
    5cd8:	lsr	x0, x0, x8
    5cdc:	lsl	x10, x1, x10
    5ce0:	orr	x0, x10, x0
    5ce4:	lsr	x1, x1, x8
    5ce8:	b	5a6c <__modti3@@GCC_3.0+0xac>
    5cec:	sub	x7, x0, #0x2
    5cf0:	add	x2, x2, x9
    5cf4:	b	5c68 <__modti3@@GCC_3.0+0x2a8>
    5cf8:	sub	x5, x5, #0x2
    5cfc:	add	x2, x2, x9
    5d00:	b	5c34 <__modti3@@GCC_3.0+0x274>
    5d04:	nop

0000000000005d08 <__divmodti4@@GCC_7.0.0>:
    5d08:	mov	x5, #0x0                   	// #0
    5d0c:	tbz	x1, #63, 5d1c <__divmodti4@@GCC_7.0.0+0x14>
    5d10:	negs	x0, x0
    5d14:	mov	x5, #0xffffffffffffffff    	// #-1
    5d18:	ngc	x1, x1
    5d1c:	mov	x6, x5
    5d20:	tbz	x3, #63, 5d30 <__divmodti4@@GCC_7.0.0+0x28>
    5d24:	negs	x2, x2
    5d28:	mvn	x6, x5
    5d2c:	ngc	x3, x3
    5d30:	mov	x7, x2
    5d34:	mov	x11, x0
    5d38:	mov	x8, x1
    5d3c:	cbnz	x3, 5e08 <__divmodti4@@GCC_7.0.0+0x100>
    5d40:	cmp	x2, x1
    5d44:	b.ls	5e58 <__divmodti4@@GCC_7.0.0+0x150>  // b.plast
    5d48:	clz	x0, x2
    5d4c:	mov	x10, x0
    5d50:	cbz	x0, 5d6c <__divmodti4@@GCC_7.0.0+0x64>
    5d54:	neg	w1, w0
    5d58:	lsl	x3, x8, x0
    5d5c:	lsl	x7, x2, x0
    5d60:	lsr	x8, x11, x1
    5d64:	orr	x8, x8, x3
    5d68:	lsl	x11, x11, x0
    5d6c:	lsr	x9, x7, #32
    5d70:	and	x2, x7, #0xffffffff
    5d74:	udiv	x3, x8, x9
    5d78:	mov	x0, x3
    5d7c:	msub	x3, x3, x9, x8
    5d80:	mul	x1, x2, x0
    5d84:	extr	x3, x3, x11, #32
    5d88:	cmp	x1, x3
    5d8c:	b.ls	5da0 <__divmodti4@@GCC_7.0.0+0x98>  // b.plast
    5d90:	adds	x3, x7, x3
    5d94:	ccmp	x1, x3, #0x0, cc  // cc = lo, ul, last
    5d98:	b.hi	60e4 <__divmodti4@@GCC_7.0.0+0x3dc>  // b.pmore
    5d9c:	sub	x0, x0, #0x1
    5da0:	sub	x3, x3, x1
    5da4:	udiv	x1, x3, x9
    5da8:	msub	x3, x1, x9, x3
    5dac:	mov	x8, x1
    5db0:	mul	x2, x2, x1
    5db4:	mov	x1, x11
    5db8:	bfi	x1, x3, #32, #32
    5dbc:	cmp	x2, x1
    5dc0:	b.ls	5dd4 <__divmodti4@@GCC_7.0.0+0xcc>  // b.plast
    5dc4:	adds	x1, x7, x1
    5dc8:	ccmp	x2, x1, #0x0, cc  // cc = lo, ul, last
    5dcc:	b.hi	60f0 <__divmodti4@@GCC_7.0.0+0x3e8>  // b.pmore
    5dd0:	sub	x8, x8, #0x1
    5dd4:	orr	x0, x8, x0, lsl #32
    5dd8:	sub	x2, x1, x2
    5ddc:	mov	x1, #0x0                   	// #0
    5de0:	lsr	x2, x2, x10
    5de4:	mov	x3, #0x0                   	// #0
    5de8:	cbz	x6, 5df4 <__divmodti4@@GCC_7.0.0+0xec>
    5dec:	negs	x0, x0
    5df0:	ngc	x1, x1
    5df4:	cbz	x5, 5e00 <__divmodti4@@GCC_7.0.0+0xf8>
    5df8:	negs	x2, x2
    5dfc:	ngc	x3, x3
    5e00:	stp	x2, x3, [x4]
    5e04:	ret
    5e08:	cmp	x3, x1
    5e0c:	mov	x7, x0
    5e10:	b.ls	5e28 <__divmodti4@@GCC_7.0.0+0x120>  // b.plast
    5e14:	mov	x2, x0
    5e18:	mov	x3, x1
    5e1c:	mov	x0, #0x0                   	// #0
    5e20:	mov	x1, #0x0                   	// #0
    5e24:	b	5de8 <__divmodti4@@GCC_7.0.0+0xe0>
    5e28:	clz	x8, x3
    5e2c:	cbnz	x8, 5f7c <__divmodti4@@GCC_7.0.0+0x274>
    5e30:	ccmp	x2, x11, #0x0, cs  // cs = hs, nlast
    5e34:	mov	x0, #0x0                   	// #0
    5e38:	b.hi	5e48 <__divmodti4@@GCC_7.0.0+0x140>  // b.pmore
    5e3c:	subs	x7, x11, x2
    5e40:	mov	x0, #0x1                   	// #1
    5e44:	sbc	x1, x1, x3
    5e48:	mov	x3, x1
    5e4c:	mov	x2, x7
    5e50:	mov	x1, #0x0                   	// #0
    5e54:	b	5de8 <__divmodti4@@GCC_7.0.0+0xe0>
    5e58:	cbnz	x2, 5e64 <__divmodti4@@GCC_7.0.0+0x15c>
    5e5c:	mov	x7, #0x1                   	// #1
    5e60:	udiv	x7, x7, x3
    5e64:	clz	x3, x7
    5e68:	mov	x10, x3
    5e6c:	cbnz	x3, 5eec <__divmodti4@@GCC_7.0.0+0x1e4>
    5e70:	lsr	x12, x7, #32
    5e74:	and	x2, x7, #0xffffffff
    5e78:	sub	x9, x1, x7
    5e7c:	mov	x1, #0x1                   	// #1
    5e80:	udiv	x8, x9, x12
    5e84:	mov	x0, x8
    5e88:	msub	x8, x8, x12, x9
    5e8c:	mul	x3, x0, x2
    5e90:	extr	x8, x8, x11, #32
    5e94:	cmp	x3, x8
    5e98:	b.ls	5eac <__divmodti4@@GCC_7.0.0+0x1a4>  // b.plast
    5e9c:	adds	x8, x7, x8
    5ea0:	ccmp	x3, x8, #0x0, cc  // cc = lo, ul, last
    5ea4:	b.hi	60d8 <__divmodti4@@GCC_7.0.0+0x3d0>  // b.pmore
    5ea8:	sub	x0, x0, #0x1
    5eac:	sub	x8, x8, x3
    5eb0:	udiv	x9, x8, x12
    5eb4:	msub	x8, x9, x12, x8
    5eb8:	mov	x13, x9
    5ebc:	mul	x3, x9, x2
    5ec0:	mov	x2, x11
    5ec4:	bfi	x2, x8, #32, #32
    5ec8:	cmp	x3, x2
    5ecc:	b.ls	5ee0 <__divmodti4@@GCC_7.0.0+0x1d8>  // b.plast
    5ed0:	adds	x2, x7, x2
    5ed4:	ccmp	x3, x2, #0x0, cc  // cc = lo, ul, last
    5ed8:	b.hi	60cc <__divmodti4@@GCC_7.0.0+0x3c4>  // b.pmore
    5edc:	sub	x13, x9, #0x1
    5ee0:	sub	x2, x2, x3
    5ee4:	orr	x0, x13, x0, lsl #32
    5ee8:	b	5de0 <__divmodti4@@GCC_7.0.0+0xd8>
    5eec:	lsl	x7, x7, x3
    5ef0:	mov	x9, #0x40                  	// #64
    5ef4:	sub	x9, x9, x3
    5ef8:	lsr	x12, x7, #32
    5efc:	lsl	x11, x1, x3
    5f00:	and	x2, x7, #0xffffffff
    5f04:	lsr	x13, x1, x9
    5f08:	lsr	x8, x0, x9
    5f0c:	orr	x8, x8, x11
    5f10:	udiv	x9, x13, x12
    5f14:	lsl	x11, x0, x3
    5f18:	mov	x1, x9
    5f1c:	msub	x9, x9, x12, x13
    5f20:	mul	x3, x2, x1
    5f24:	extr	x0, x9, x8, #32
    5f28:	cmp	x3, x0
    5f2c:	b.ls	5f40 <__divmodti4@@GCC_7.0.0+0x238>  // b.plast
    5f30:	adds	x0, x7, x0
    5f34:	ccmp	x3, x0, #0x0, cc  // cc = lo, ul, last
    5f38:	b.hi	60a8 <__divmodti4@@GCC_7.0.0+0x3a0>  // b.pmore
    5f3c:	sub	x1, x1, #0x1
    5f40:	sub	x0, x0, x3
    5f44:	udiv	x3, x0, x12
    5f48:	msub	x0, x3, x12, x0
    5f4c:	mov	x13, x3
    5f50:	mul	x9, x2, x3
    5f54:	bfi	x8, x0, #32, #32
    5f58:	cmp	x9, x8
    5f5c:	b.ls	5f70 <__divmodti4@@GCC_7.0.0+0x268>  // b.plast
    5f60:	adds	x8, x7, x8
    5f64:	ccmp	x9, x8, #0x0, cc  // cc = lo, ul, last
    5f68:	b.hi	60c0 <__divmodti4@@GCC_7.0.0+0x3b8>  // b.pmore
    5f6c:	sub	x13, x3, #0x1
    5f70:	sub	x9, x8, x9
    5f74:	orr	x1, x13, x1, lsl #32
    5f78:	b	5e80 <__divmodti4@@GCC_7.0.0+0x178>
    5f7c:	mov	x9, #0x40                  	// #64
    5f80:	sub	x9, x9, x8
    5f84:	lsl	x3, x3, x8
    5f88:	lsr	x10, x2, x9
    5f8c:	orr	x10, x10, x3
    5f90:	lsr	x11, x1, x9
    5f94:	and	x3, x10, #0xffffffff
    5f98:	lsr	x14, x10, #32
    5f9c:	lsr	x7, x0, x9
    5fa0:	lsl	x1, x1, x8
    5fa4:	orr	x1, x7, x1
    5fa8:	lsl	x13, x0, x8
    5fac:	udiv	x7, x11, x14
    5fb0:	lsl	x2, x2, x8
    5fb4:	mov	x0, x7
    5fb8:	msub	x7, x7, x14, x11
    5fbc:	mul	x11, x3, x0
    5fc0:	extr	x7, x7, x1, #32
    5fc4:	cmp	x11, x7
    5fc8:	b.ls	5fdc <__divmodti4@@GCC_7.0.0+0x2d4>  // b.plast
    5fcc:	adds	x7, x10, x7
    5fd0:	ccmp	x11, x7, #0x0, cc  // cc = lo, ul, last
    5fd4:	b.hi	609c <__divmodti4@@GCC_7.0.0+0x394>  // b.pmore
    5fd8:	sub	x0, x0, #0x1
    5fdc:	sub	x7, x7, x11
    5fe0:	udiv	x12, x7, x14
    5fe4:	msub	x7, x12, x14, x7
    5fe8:	mov	x11, x12
    5fec:	mul	x3, x3, x12
    5ff0:	bfi	x1, x7, #32, #32
    5ff4:	cmp	x3, x1
    5ff8:	b.ls	600c <__divmodti4@@GCC_7.0.0+0x304>  // b.plast
    5ffc:	adds	x1, x10, x1
    6000:	ccmp	x3, x1, #0x0, cc  // cc = lo, ul, last
    6004:	b.hi	60b4 <__divmodti4@@GCC_7.0.0+0x3ac>  // b.pmore
    6008:	sub	x11, x12, #0x1
    600c:	orr	x0, x11, x0, lsl #32
    6010:	and	x15, x2, #0xffffffff
    6014:	mov	w11, w11
    6018:	lsr	x12, x2, #32
    601c:	lsr	x14, x0, #32
    6020:	sub	x3, x1, x3
    6024:	mov	x16, #0x100000000           	// #4294967296
    6028:	mul	x7, x11, x15
    602c:	mul	x15, x14, x15
    6030:	madd	x11, x11, x12, x15
    6034:	and	x1, x7, #0xffffffff
    6038:	mul	x12, x14, x12
    603c:	add	x7, x11, x7, lsr #32
    6040:	add	x11, x12, x16
    6044:	cmp	x15, x7
    6048:	csel	x12, x11, x12, hi  // hi = pmore
    604c:	add	x1, x1, x7, lsl #32
    6050:	add	x7, x12, x7, lsr #32
    6054:	cmp	x3, x7
    6058:	b.cc	6064 <__divmodti4@@GCC_7.0.0+0x35c>  // b.lo, b.ul, b.last
    605c:	ccmp	x13, x1, #0x2, eq  // eq = none
    6060:	b.cs	6078 <__divmodti4@@GCC_7.0.0+0x370>  // b.hs, b.nlast
    6064:	cmp	x1, x2
    6068:	sub	x0, x0, #0x1
    606c:	cinc	x10, x10, cc  // cc = lo, ul, last
    6070:	sub	x1, x1, x2
    6074:	sub	x7, x7, x10
    6078:	subs	x2, x13, x1
    607c:	cmp	x13, x1
    6080:	mov	x1, #0x0                   	// #0
    6084:	sbc	x3, x3, x7
    6088:	lsr	x2, x2, x8
    608c:	lsl	x9, x3, x9
    6090:	orr	x2, x9, x2
    6094:	lsr	x3, x3, x8
    6098:	b	5de8 <__divmodti4@@GCC_7.0.0+0xe0>
    609c:	sub	x0, x0, #0x2
    60a0:	add	x7, x7, x10
    60a4:	b	5fdc <__divmodti4@@GCC_7.0.0+0x2d4>
    60a8:	sub	x1, x1, #0x2
    60ac:	add	x0, x0, x7
    60b0:	b	5f40 <__divmodti4@@GCC_7.0.0+0x238>
    60b4:	sub	x11, x12, #0x2
    60b8:	add	x1, x1, x10
    60bc:	b	600c <__divmodti4@@GCC_7.0.0+0x304>
    60c0:	sub	x13, x3, #0x2
    60c4:	add	x8, x8, x7
    60c8:	b	5f70 <__divmodti4@@GCC_7.0.0+0x268>
    60cc:	sub	x13, x9, #0x2
    60d0:	add	x2, x2, x7
    60d4:	b	5ee0 <__divmodti4@@GCC_7.0.0+0x1d8>
    60d8:	sub	x0, x0, #0x2
    60dc:	add	x8, x8, x7
    60e0:	b	5eac <__divmodti4@@GCC_7.0.0+0x1a4>
    60e4:	sub	x0, x0, #0x2
    60e8:	add	x3, x3, x7
    60ec:	b	5da0 <__divmodti4@@GCC_7.0.0+0x98>
    60f0:	sub	x8, x8, #0x2
    60f4:	add	x1, x1, x7
    60f8:	b	5dd4 <__divmodti4@@GCC_7.0.0+0xcc>
    60fc:	nop

0000000000006100 <__udivti3@@GCC_3.0>:
    6100:	mov	x4, x2
    6104:	mov	x5, x0
    6108:	mov	x6, x1
    610c:	cbnz	x3, 61a8 <__udivti3@@GCC_3.0+0xa8>
    6110:	cmp	x2, x1
    6114:	b.ls	62bc <__udivti3@@GCC_3.0+0x1bc>  // b.plast
    6118:	clz	x0, x2
    611c:	cbz	x0, 6138 <__udivti3@@GCC_3.0+0x38>
    6120:	neg	w1, w0
    6124:	lsl	x2, x6, x0
    6128:	lsl	x4, x4, x0
    612c:	lsr	x6, x5, x1
    6130:	orr	x6, x6, x2
    6134:	lsl	x5, x5, x0
    6138:	lsr	x3, x4, #32
    613c:	and	x7, x4, #0xffffffff
    6140:	udiv	x2, x6, x3
    6144:	mov	x0, x2
    6148:	msub	x2, x2, x3, x6
    614c:	mul	x6, x7, x0
    6150:	extr	x1, x2, x5, #32
    6154:	cmp	x6, x1
    6158:	b.ls	616c <__udivti3@@GCC_3.0+0x6c>  // b.plast
    615c:	adds	x1, x4, x1
    6160:	ccmp	x6, x1, #0x0, cc  // cc = lo, ul, last
    6164:	b.hi	642c <__udivti3@@GCC_3.0+0x32c>  // b.pmore
    6168:	sub	x0, x0, #0x1
    616c:	sub	x1, x1, x6
    6170:	udiv	x6, x1, x3
    6174:	msub	x1, x6, x3, x1
    6178:	mov	x2, x6
    617c:	mul	x7, x7, x6
    6180:	bfi	x5, x1, #32, #32
    6184:	cmp	x7, x5
    6188:	b.ls	619c <__udivti3@@GCC_3.0+0x9c>  // b.plast
    618c:	adds	x5, x4, x5
    6190:	ccmp	x7, x5, #0x0, cc  // cc = lo, ul, last
    6194:	cinc	x2, x6, ls  // ls = plast
    6198:	sub	x2, x2, #0x2
    619c:	orr	x0, x2, x0, lsl #32
    61a0:	mov	x1, #0x0                   	// #0
    61a4:	ret
    61a8:	cmp	x3, x1
    61ac:	b.ls	61bc <__udivti3@@GCC_3.0+0xbc>  // b.plast
    61b0:	mov	x1, #0x0                   	// #0
    61b4:	mov	x0, #0x0                   	// #0
    61b8:	ret
    61bc:	clz	x7, x3
    61c0:	cbz	x7, 63d4 <__udivti3@@GCC_3.0+0x2d4>
    61c4:	mov	x4, #0x40                  	// #64
    61c8:	sub	x4, x4, x7
    61cc:	lsl	x3, x3, x7
    61d0:	lsr	x5, x2, x4
    61d4:	orr	x3, x5, x3
    61d8:	lsr	x6, x1, x4
    61dc:	and	x8, x3, #0xffffffff
    61e0:	lsr	x10, x3, #32
    61e4:	lsr	x4, x0, x4
    61e8:	lsl	x1, x1, x7
    61ec:	orr	x1, x4, x1
    61f0:	lsl	x2, x2, x7
    61f4:	udiv	x5, x6, x10
    61f8:	mov	x4, x5
    61fc:	msub	x5, x5, x10, x6
    6200:	mul	x6, x8, x4
    6204:	extr	x5, x5, x1, #32
    6208:	cmp	x6, x5
    620c:	b.ls	6220 <__udivti3@@GCC_3.0+0x120>  // b.plast
    6210:	adds	x5, x3, x5
    6214:	ccmp	x6, x5, #0x0, cc  // cc = lo, ul, last
    6218:	b.hi	6414 <__udivti3@@GCC_3.0+0x314>  // b.pmore
    621c:	sub	x4, x4, #0x1
    6220:	sub	x6, x5, x6
    6224:	udiv	x9, x6, x10
    6228:	msub	x6, x9, x10, x6
    622c:	mov	x5, x9
    6230:	mul	x8, x8, x9
    6234:	bfi	x1, x6, #32, #32
    6238:	cmp	x8, x1
    623c:	b.ls	6250 <__udivti3@@GCC_3.0+0x150>  // b.plast
    6240:	adds	x1, x3, x1
    6244:	ccmp	x8, x1, #0x0, cc  // cc = lo, ul, last
    6248:	b.hi	63fc <__udivti3@@GCC_3.0+0x2fc>  // b.pmore
    624c:	sub	x5, x9, #0x1
    6250:	orr	x4, x5, x4, lsl #32
    6254:	and	x9, x2, #0xffffffff
    6258:	mov	w5, w5
    625c:	lsr	x2, x2, #32
    6260:	lsr	x6, x4, #32
    6264:	sub	x1, x1, x8
    6268:	mov	x10, #0x100000000           	// #4294967296
    626c:	mul	x11, x5, x9
    6270:	mul	x8, x6, x9
    6274:	madd	x5, x5, x2, x8
    6278:	mul	x2, x6, x2
    627c:	add	x3, x5, x11, lsr #32
    6280:	add	x5, x2, x10
    6284:	cmp	x8, x3
    6288:	csel	x2, x5, x2, hi  // hi = pmore
    628c:	add	x2, x2, x3, lsr #32
    6290:	cmp	x1, x2
    6294:	b.cc	62b0 <__udivti3@@GCC_3.0+0x1b0>  // b.lo, b.ul, b.last
    6298:	and	x11, x11, #0xffffffff
    629c:	lsl	x0, x0, x7
    62a0:	add	x3, x11, x3, lsl #32
    62a4:	cmp	x0, x3
    62a8:	ccmp	x1, x2, #0x0, cc  // cc = lo, ul, last
    62ac:	b.ne	63e4 <__udivti3@@GCC_3.0+0x2e4>  // b.any
    62b0:	sub	x0, x4, #0x1
    62b4:	mov	x1, #0x0                   	// #0
    62b8:	ret
    62bc:	cbnz	x2, 62c8 <__udivti3@@GCC_3.0+0x1c8>
    62c0:	mov	x2, #0x1                   	// #1
    62c4:	udiv	x4, x2, x4
    62c8:	clz	x8, x4
    62cc:	cbnz	x8, 6344 <__udivti3@@GCC_3.0+0x244>
    62d0:	lsr	x6, x4, #32
    62d4:	and	x7, x4, #0xffffffff
    62d8:	sub	x2, x1, x4
    62dc:	mov	x1, #0x1                   	// #1
    62e0:	udiv	x3, x2, x6
    62e4:	mov	x0, x3
    62e8:	msub	x3, x3, x6, x2
    62ec:	mul	x8, x0, x7
    62f0:	extr	x2, x3, x5, #32
    62f4:	cmp	x8, x2
    62f8:	b.ls	630c <__udivti3@@GCC_3.0+0x20c>  // b.plast
    62fc:	adds	x2, x4, x2
    6300:	ccmp	x8, x2, #0x0, cc  // cc = lo, ul, last
    6304:	b.hi	6420 <__udivti3@@GCC_3.0+0x320>  // b.pmore
    6308:	sub	x0, x0, #0x1
    630c:	sub	x2, x2, x8
    6310:	udiv	x8, x2, x6
    6314:	msub	x2, x8, x6, x2
    6318:	mov	x3, x8
    631c:	mul	x7, x8, x7
    6320:	bfi	x5, x2, #32, #32
    6324:	cmp	x7, x5
    6328:	b.ls	633c <__udivti3@@GCC_3.0+0x23c>  // b.plast
    632c:	adds	x4, x4, x5
    6330:	ccmp	x7, x4, #0x0, cc  // cc = lo, ul, last
    6334:	cinc	x3, x8, ls  // ls = plast
    6338:	sub	x3, x3, #0x2
    633c:	orr	x0, x3, x0, lsl #32
    6340:	ret
    6344:	lsl	x4, x4, x8
    6348:	mov	x3, #0x40                  	// #64
    634c:	sub	x3, x3, x8
    6350:	lsr	x6, x4, #32
    6354:	lsl	x2, x1, x8
    6358:	and	x7, x4, #0xffffffff
    635c:	lsr	x1, x1, x3
    6360:	lsr	x3, x0, x3
    6364:	orr	x3, x3, x2
    6368:	udiv	x2, x1, x6
    636c:	lsl	x5, x0, x8
    6370:	msub	x1, x2, x6, x1
    6374:	mov	x0, x2
    6378:	mul	x2, x7, x2
    637c:	extr	x1, x1, x3, #32
    6380:	cmp	x2, x1
    6384:	b.ls	6398 <__udivti3@@GCC_3.0+0x298>  // b.plast
    6388:	adds	x1, x4, x1
    638c:	ccmp	x2, x1, #0x0, cc  // cc = lo, ul, last
    6390:	b.hi	63f0 <__udivti3@@GCC_3.0+0x2f0>  // b.pmore
    6394:	sub	x0, x0, #0x1
    6398:	sub	x1, x1, x2
    639c:	udiv	x2, x1, x6
    63a0:	msub	x1, x2, x6, x1
    63a4:	mov	x8, x2
    63a8:	mul	x2, x7, x2
    63ac:	bfi	x3, x1, #32, #32
    63b0:	cmp	x2, x3
    63b4:	b.ls	63c8 <__udivti3@@GCC_3.0+0x2c8>  // b.plast
    63b8:	adds	x3, x4, x3
    63bc:	ccmp	x2, x3, #0x0, cc  // cc = lo, ul, last
    63c0:	b.hi	6408 <__udivti3@@GCC_3.0+0x308>  // b.pmore
    63c4:	sub	x8, x8, #0x1
    63c8:	sub	x2, x3, x2
    63cc:	orr	x1, x8, x0, lsl #32
    63d0:	b	62e0 <__udivti3@@GCC_3.0+0x1e0>
    63d4:	ccmp	x2, x0, #0x0, cs  // cs = hs, nlast
    63d8:	mov	x1, #0x0                   	// #0
    63dc:	cset	x0, ls  // ls = plast
    63e0:	ret
    63e4:	mov	x0, x4
    63e8:	mov	x1, #0x0                   	// #0
    63ec:	ret
    63f0:	sub	x0, x0, #0x2
    63f4:	add	x1, x1, x4
    63f8:	b	6398 <__udivti3@@GCC_3.0+0x298>
    63fc:	sub	x5, x9, #0x2
    6400:	add	x1, x1, x3
    6404:	b	6250 <__udivti3@@GCC_3.0+0x150>
    6408:	sub	x8, x8, #0x2
    640c:	add	x3, x3, x4
    6410:	b	63c8 <__udivti3@@GCC_3.0+0x2c8>
    6414:	sub	x4, x4, #0x2
    6418:	add	x5, x5, x3
    641c:	b	6220 <__udivti3@@GCC_3.0+0x120>
    6420:	sub	x0, x0, #0x2
    6424:	add	x2, x2, x4
    6428:	b	630c <__udivti3@@GCC_3.0+0x20c>
    642c:	sub	x0, x0, #0x2
    6430:	add	x1, x1, x4
    6434:	b	616c <__udivti3@@GCC_3.0+0x6c>

0000000000006438 <__umodti3@@GCC_3.0>:
    6438:	mov	x4, x2
    643c:	mov	x7, x0
    6440:	mov	x6, x1
    6444:	mov	x5, x1
    6448:	cbnz	x3, 64d8 <__umodti3@@GCC_3.0+0xa0>
    644c:	cmp	x2, x1
    6450:	b.ls	650c <__umodti3@@GCC_3.0+0xd4>  // b.plast
    6454:	clz	x0, x2
    6458:	mov	x6, x0
    645c:	cbz	x0, 6478 <__umodti3@@GCC_3.0+0x40>
    6460:	neg	w1, w0
    6464:	lsl	x5, x5, x0
    6468:	lsl	x4, x2, x0
    646c:	lsr	x1, x7, x1
    6470:	orr	x5, x1, x5
    6474:	lsl	x7, x7, x0
    6478:	lsr	x2, x4, #32
    647c:	and	x0, x4, #0xffffffff
    6480:	udiv	x1, x5, x2
    6484:	msub	x5, x1, x2, x5
    6488:	mul	x1, x0, x1
    648c:	extr	x5, x5, x7, #32
    6490:	cmp	x1, x5
    6494:	b.ls	64a8 <__umodti3@@GCC_3.0+0x70>  // b.plast
    6498:	adds	x5, x4, x5
    649c:	ccmp	x1, x5, #0x0, cc  // cc = lo, ul, last
    64a0:	add	x3, x5, x4
    64a4:	csel	x5, x3, x5, hi  // hi = pmore
    64a8:	sub	x5, x5, x1
    64ac:	udiv	x1, x5, x2
    64b0:	msub	x5, x1, x2, x5
    64b4:	mul	x0, x0, x1
    64b8:	mov	x1, x7
    64bc:	bfi	x1, x5, #32, #32
    64c0:	cmp	x0, x1
    64c4:	b.hi	6614 <__umodti3@@GCC_3.0+0x1dc>  // b.pmore
    64c8:	sub	x0, x1, x0
    64cc:	lsr	x0, x0, x6
    64d0:	mov	x1, #0x0                   	// #0
    64d4:	ret
    64d8:	cmp	x3, x1
    64dc:	mov	x4, x0
    64e0:	b.hi	64d4 <__umodti3@@GCC_3.0+0x9c>  // b.pmore
    64e4:	clz	x7, x3
    64e8:	cbnz	x7, 6628 <__umodti3@@GCC_3.0+0x1f0>
    64ec:	cmp	x3, x1
    64f0:	ccmp	x2, x0, #0x0, cs  // cs = hs, nlast
    64f4:	b.hi	6500 <__umodti3@@GCC_3.0+0xc8>  // b.pmore
    64f8:	subs	x4, x0, x2
    64fc:	sbc	x6, x1, x3
    6500:	mov	x0, x4
    6504:	mov	x1, x6
    6508:	ret
    650c:	cbnz	x2, 6518 <__umodti3@@GCC_3.0+0xe0>
    6510:	mov	x2, #0x1                   	// #1
    6514:	udiv	x4, x2, x4
    6518:	clz	x3, x4
    651c:	mov	x6, x3
    6520:	cbnz	x3, 6590 <__umodti3@@GCC_3.0+0x158>
    6524:	sub	x5, x1, x4
    6528:	lsr	x8, x4, #32
    652c:	and	x10, x4, #0xffffffff
    6530:	udiv	x3, x5, x8
    6534:	msub	x5, x3, x8, x5
    6538:	mul	x9, x3, x10
    653c:	extr	x3, x5, x7, #32
    6540:	cmp	x9, x3
    6544:	b.ls	6558 <__umodti3@@GCC_3.0+0x120>  // b.plast
    6548:	adds	x5, x4, x3
    654c:	ccmp	x9, x5, #0x0, cc  // cc = lo, ul, last
    6550:	add	x3, x5, x4
    6554:	csel	x3, x3, x5, hi  // hi = pmore
    6558:	sub	x3, x3, x9
    655c:	mov	x1, x7
    6560:	udiv	x2, x3, x8
    6564:	msub	x3, x2, x8, x3
    6568:	mul	x2, x2, x10
    656c:	bfi	x1, x3, #32, #32
    6570:	cmp	x2, x1
    6574:	b.ls	6588 <__umodti3@@GCC_3.0+0x150>  // b.plast
    6578:	adds	x0, x4, x1
    657c:	add	x4, x0, x4
    6580:	ccmp	x2, x0, #0x0, cc  // cc = lo, ul, last
    6584:	csel	x1, x4, x0, hi  // hi = pmore
    6588:	sub	x0, x1, x2
    658c:	b	64cc <__umodti3@@GCC_3.0+0x94>
    6590:	lsl	x4, x4, x3
    6594:	mov	x5, #0x40                  	// #64
    6598:	sub	x5, x5, x3
    659c:	lsr	x8, x4, #32
    65a0:	lsl	x2, x1, x3
    65a4:	and	x10, x4, #0xffffffff
    65a8:	lsr	x1, x1, x5
    65ac:	lsr	x5, x0, x5
    65b0:	orr	x5, x5, x2
    65b4:	udiv	x2, x1, x8
    65b8:	lsl	x7, x0, x3
    65bc:	msub	x1, x2, x8, x1
    65c0:	mul	x0, x10, x2
    65c4:	extr	x2, x1, x5, #32
    65c8:	cmp	x0, x2
    65cc:	b.ls	65e0 <__umodti3@@GCC_3.0+0x1a8>  // b.plast
    65d0:	adds	x2, x4, x2
    65d4:	ccmp	x0, x2, #0x0, cc  // cc = lo, ul, last
    65d8:	add	x1, x2, x4
    65dc:	csel	x2, x1, x2, hi  // hi = pmore
    65e0:	sub	x2, x2, x0
    65e4:	udiv	x1, x2, x8
    65e8:	msub	x2, x1, x8, x2
    65ec:	mul	x1, x10, x1
    65f0:	bfi	x5, x2, #32, #32
    65f4:	cmp	x1, x5
    65f8:	b.ls	660c <__umodti3@@GCC_3.0+0x1d4>  // b.plast
    65fc:	adds	x5, x4, x5
    6600:	ccmp	x1, x5, #0x0, cc  // cc = lo, ul, last
    6604:	add	x0, x5, x4
    6608:	csel	x5, x0, x5, hi  // hi = pmore
    660c:	sub	x5, x5, x1
    6610:	b	6530 <__umodti3@@GCC_3.0+0xf8>
    6614:	adds	x1, x4, x1
    6618:	add	x4, x1, x4
    661c:	ccmp	x0, x1, #0x0, cc  // cc = lo, ul, last
    6620:	csel	x1, x4, x1, hi  // hi = pmore
    6624:	b	64c8 <__umodti3@@GCC_3.0+0x90>
    6628:	mov	x8, #0x40                  	// #64
    662c:	sub	x8, x8, x7
    6630:	lsl	x3, x3, x7
    6634:	lsr	x4, x2, x8
    6638:	orr	x3, x4, x3
    663c:	lsr	x6, x1, x8
    6640:	and	x9, x3, #0xffffffff
    6644:	lsr	x10, x3, #32
    6648:	lsr	x4, x0, x8
    664c:	lsl	x1, x1, x7
    6650:	orr	x1, x4, x1
    6654:	lsl	x12, x0, x7
    6658:	udiv	x4, x6, x10
    665c:	lsl	x2, x2, x7
    6660:	mov	x5, x4
    6664:	msub	x4, x4, x10, x6
    6668:	mul	x0, x9, x5
    666c:	extr	x4, x4, x1, #32
    6670:	cmp	x0, x4
    6674:	b.ls	6688 <__umodti3@@GCC_3.0+0x250>  // b.plast
    6678:	adds	x4, x3, x4
    667c:	ccmp	x0, x4, #0x0, cc  // cc = lo, ul, last
    6680:	b.hi	6748 <__umodti3@@GCC_3.0+0x310>  // b.pmore
    6684:	sub	x5, x5, #0x1
    6688:	sub	x4, x4, x0
    668c:	udiv	x0, x4, x10
    6690:	msub	x4, x0, x10, x4
    6694:	mov	x6, x0
    6698:	mul	x0, x9, x0
    669c:	bfi	x1, x4, #32, #32
    66a0:	cmp	x0, x1
    66a4:	b.ls	66b8 <__umodti3@@GCC_3.0+0x280>  // b.plast
    66a8:	adds	x1, x3, x1
    66ac:	ccmp	x0, x1, #0x0, cc  // cc = lo, ul, last
    66b0:	b.hi	673c <__umodti3@@GCC_3.0+0x304>  // b.pmore
    66b4:	sub	x6, x6, #0x1
    66b8:	orr	x5, x6, x5, lsl #32
    66bc:	and	x11, x2, #0xffffffff
    66c0:	mov	w9, w6
    66c4:	lsr	x4, x2, #32
    66c8:	lsr	x5, x5, #32
    66cc:	sub	x1, x1, x0
    66d0:	mov	x13, #0x100000000           	// #4294967296
    66d4:	mul	x6, x9, x11
    66d8:	mul	x11, x5, x11
    66dc:	madd	x9, x9, x4, x11
    66e0:	and	x10, x6, #0xffffffff
    66e4:	mul	x4, x5, x4
    66e8:	add	x5, x9, x6, lsr #32
    66ec:	add	x0, x4, x13
    66f0:	cmp	x11, x5
    66f4:	csel	x4, x0, x4, hi  // hi = pmore
    66f8:	add	x6, x10, x5, lsl #32
    66fc:	add	x4, x4, x5, lsr #32
    6700:	cmp	x1, x4
    6704:	b.cc	6710 <__umodti3@@GCC_3.0+0x2d8>  // b.lo, b.ul, b.last
    6708:	ccmp	x12, x6, #0x2, eq  // eq = none
    670c:	b.cs	671c <__umodti3@@GCC_3.0+0x2e4>  // b.hs, b.nlast
    6710:	subs	x6, x6, x2
    6714:	cinc	x3, x3, cc  // cc = lo, ul, last
    6718:	sub	x4, x4, x3
    671c:	subs	x0, x12, x6
    6720:	cmp	x12, x6
    6724:	sbc	x1, x1, x4
    6728:	lsr	x0, x0, x7
    672c:	lsl	x8, x1, x8
    6730:	orr	x0, x8, x0
    6734:	lsr	x1, x1, x7
    6738:	ret
    673c:	sub	x6, x6, #0x2
    6740:	add	x1, x1, x3
    6744:	b	66b8 <__umodti3@@GCC_3.0+0x280>
    6748:	sub	x5, x5, #0x2
    674c:	add	x4, x4, x3
    6750:	b	6688 <__umodti3@@GCC_3.0+0x250>
    6754:	nop

0000000000006758 <__udivmodti4@@GCC_3.0>:
    6758:	mov	x9, x0
    675c:	mov	x6, x1
    6760:	mov	x7, x2
    6764:	mov	x5, x0
    6768:	mov	x8, x1
    676c:	cbnz	x3, 68ac <__udivmodti4@@GCC_3.0+0x154>
    6770:	cmp	x2, x1
    6774:	b.ls	681c <__udivmodti4@@GCC_3.0+0xc4>  // b.plast
    6778:	clz	x0, x2
    677c:	mov	x3, x0
    6780:	cbz	x0, 679c <__udivmodti4@@GCC_3.0+0x44>
    6784:	neg	w2, w0
    6788:	lsl	x1, x1, x0
    678c:	lsl	x7, x7, x0
    6790:	lsr	x8, x9, x2
    6794:	orr	x8, x8, x1
    6798:	lsl	x5, x9, x0
    679c:	lsr	x9, x7, #32
    67a0:	and	x2, x7, #0xffffffff
    67a4:	udiv	x1, x8, x9
    67a8:	mov	x0, x1
    67ac:	msub	x1, x1, x9, x8
    67b0:	mul	x6, x2, x0
    67b4:	extr	x1, x1, x5, #32
    67b8:	cmp	x6, x1
    67bc:	b.ls	67d0 <__udivmodti4@@GCC_3.0+0x78>  // b.plast
    67c0:	adds	x1, x7, x1
    67c4:	ccmp	x6, x1, #0x0, cc  // cc = lo, ul, last
    67c8:	b.hi	6b00 <__udivmodti4@@GCC_3.0+0x3a8>  // b.pmore
    67cc:	sub	x0, x0, #0x1
    67d0:	sub	x1, x1, x6
    67d4:	udiv	x6, x1, x9
    67d8:	msub	x1, x6, x9, x1
    67dc:	mov	x8, x6
    67e0:	mul	x2, x2, x6
    67e4:	bfi	x5, x1, #32, #32
    67e8:	cmp	x2, x5
    67ec:	b.ls	6800 <__udivmodti4@@GCC_3.0+0xa8>  // b.plast
    67f0:	adds	x5, x7, x5
    67f4:	ccmp	x2, x5, #0x0, cc  // cc = lo, ul, last
    67f8:	b.hi	6b0c <__udivmodti4@@GCC_3.0+0x3b4>  // b.pmore
    67fc:	sub	x8, x6, #0x1
    6800:	sub	x5, x5, x2
    6804:	orr	x0, x8, x0, lsl #32
    6808:	mov	x1, #0x0                   	// #0
    680c:	cbz	x4, 6818 <__udivmodti4@@GCC_3.0+0xc0>
    6810:	lsr	x5, x5, x3
    6814:	stp	x5, xzr, [x4]
    6818:	ret
    681c:	cbnz	x2, 6828 <__udivmodti4@@GCC_3.0+0xd0>
    6820:	mov	x0, #0x1                   	// #1
    6824:	udiv	x7, x0, x2
    6828:	clz	x11, x7
    682c:	mov	x3, x11
    6830:	cbnz	x11, 68fc <__udivmodti4@@GCC_3.0+0x1a4>
    6834:	sub	x2, x6, x7
    6838:	lsr	x10, x7, #32
    683c:	and	x8, x7, #0xffffffff
    6840:	mov	x1, #0x1                   	// #1
    6844:	udiv	x6, x2, x10
    6848:	mov	x0, x6
    684c:	msub	x6, x6, x10, x2
    6850:	mul	x2, x0, x8
    6854:	extr	x6, x6, x5, #32
    6858:	cmp	x2, x6
    685c:	b.ls	6870 <__udivmodti4@@GCC_3.0+0x118>  // b.plast
    6860:	adds	x6, x7, x6
    6864:	ccmp	x2, x6, #0x0, cc  // cc = lo, ul, last
    6868:	b.hi	6af4 <__udivmodti4@@GCC_3.0+0x39c>  // b.pmore
    686c:	sub	x0, x0, #0x1
    6870:	sub	x6, x6, x2
    6874:	udiv	x2, x6, x10
    6878:	msub	x6, x2, x10, x6
    687c:	mov	x9, x2
    6880:	mul	x8, x2, x8
    6884:	bfi	x5, x6, #32, #32
    6888:	cmp	x8, x5
    688c:	b.ls	68a0 <__udivmodti4@@GCC_3.0+0x148>  // b.plast
    6890:	adds	x5, x7, x5
    6894:	ccmp	x8, x5, #0x0, cc  // cc = lo, ul, last
    6898:	b.hi	6ae8 <__udivmodti4@@GCC_3.0+0x390>  // b.pmore
    689c:	sub	x9, x2, #0x1
    68a0:	sub	x5, x5, x8
    68a4:	orr	x0, x9, x0, lsl #32
    68a8:	b	680c <__udivmodti4@@GCC_3.0+0xb4>
    68ac:	cmp	x3, x1
    68b0:	b.ls	68c8 <__udivmodti4@@GCC_3.0+0x170>  // b.plast
    68b4:	mov	x1, #0x0                   	// #0
    68b8:	mov	x0, #0x0                   	// #0
    68bc:	cbz	x4, 6818 <__udivmodti4@@GCC_3.0+0xc0>
    68c0:	stp	x9, x6, [x4]
    68c4:	ret
    68c8:	clz	x7, x3
    68cc:	cbnz	x7, 698c <__udivmodti4@@GCC_3.0+0x234>
    68d0:	cmp	x3, x1
    68d4:	mov	x0, #0x0                   	// #0
    68d8:	ccmp	x2, x9, #0x0, cs  // cs = hs, nlast
    68dc:	b.hi	68ec <__udivmodti4@@GCC_3.0+0x194>  // b.pmore
    68e0:	subs	x5, x9, x2
    68e4:	mov	x0, #0x1                   	// #1
    68e8:	sbc	x8, x1, x3
    68ec:	mov	x1, #0x0                   	// #0
    68f0:	cbz	x4, 6818 <__udivmodti4@@GCC_3.0+0xc0>
    68f4:	stp	x5, x8, [x4]
    68f8:	ret
    68fc:	lsl	x7, x7, x11
    6900:	mov	x2, #0x40                  	// #64
    6904:	sub	x2, x2, x11
    6908:	lsr	x10, x7, #32
    690c:	lsl	x0, x6, x11
    6910:	and	x8, x7, #0xffffffff
    6914:	lsr	x1, x6, x2
    6918:	lsr	x2, x9, x2
    691c:	orr	x6, x2, x0
    6920:	udiv	x0, x1, x10
    6924:	lsl	x5, x9, x11
    6928:	mov	x9, x0
    692c:	msub	x0, x0, x10, x1
    6930:	mul	x1, x8, x9
    6934:	extr	x0, x0, x6, #32
    6938:	cmp	x1, x0
    693c:	b.ls	6950 <__udivmodti4@@GCC_3.0+0x1f8>  // b.plast
    6940:	adds	x0, x7, x0
    6944:	ccmp	x1, x0, #0x0, cc  // cc = lo, ul, last
    6948:	b.hi	6ac4 <__udivmodti4@@GCC_3.0+0x36c>  // b.pmore
    694c:	sub	x9, x9, #0x1
    6950:	sub	x0, x0, x1
    6954:	udiv	x2, x0, x10
    6958:	msub	x0, x2, x10, x0
    695c:	mov	x1, x2
    6960:	mul	x2, x8, x2
    6964:	bfi	x6, x0, #32, #32
    6968:	cmp	x2, x6
    696c:	b.ls	6980 <__udivmodti4@@GCC_3.0+0x228>  // b.plast
    6970:	adds	x6, x7, x6
    6974:	ccmp	x2, x6, #0x0, cc  // cc = lo, ul, last
    6978:	b.hi	6adc <__udivmodti4@@GCC_3.0+0x384>  // b.pmore
    697c:	sub	x1, x1, #0x1
    6980:	sub	x2, x6, x2
    6984:	orr	x1, x1, x9, lsl #32
    6988:	b	6844 <__udivmodti4@@GCC_3.0+0xec>
    698c:	mov	x8, #0x40                  	// #64
    6990:	sub	x8, x8, x7
    6994:	lsl	x3, x3, x7
    6998:	lsr	x0, x2, x8
    699c:	orr	x3, x0, x3
    69a0:	lsr	x5, x1, x8
    69a4:	and	x13, x3, #0xffffffff
    69a8:	lsr	x11, x3, #32
    69ac:	lsl	x6, x1, x7
    69b0:	lsr	x1, x9, x8
    69b4:	orr	x6, x1, x6
    69b8:	lsl	x2, x2, x7
    69bc:	udiv	x1, x5, x11
    69c0:	lsl	x9, x9, x7
    69c4:	mov	x0, x1
    69c8:	msub	x1, x1, x11, x5
    69cc:	mul	x5, x13, x0
    69d0:	extr	x1, x1, x6, #32
    69d4:	cmp	x5, x1
    69d8:	b.ls	69ec <__udivmodti4@@GCC_3.0+0x294>  // b.plast
    69dc:	adds	x1, x3, x1
    69e0:	ccmp	x5, x1, #0x0, cc  // cc = lo, ul, last
    69e4:	b.hi	6ab8 <__udivmodti4@@GCC_3.0+0x360>  // b.pmore
    69e8:	sub	x0, x0, #0x1
    69ec:	sub	x1, x1, x5
    69f0:	udiv	x10, x1, x11
    69f4:	msub	x1, x10, x11, x1
    69f8:	mov	x5, x10
    69fc:	mul	x13, x13, x10
    6a00:	bfi	x6, x1, #32, #32
    6a04:	cmp	x13, x6
    6a08:	b.ls	6a1c <__udivmodti4@@GCC_3.0+0x2c4>  // b.plast
    6a0c:	adds	x6, x3, x6
    6a10:	ccmp	x13, x6, #0x0, cc  // cc = lo, ul, last
    6a14:	b.hi	6ad0 <__udivmodti4@@GCC_3.0+0x378>  // b.pmore
    6a18:	sub	x5, x10, #0x1
    6a1c:	orr	x0, x5, x0, lsl #32
    6a20:	and	x12, x2, #0xffffffff
    6a24:	mov	w1, w5
    6a28:	lsr	x10, x2, #32
    6a2c:	lsr	x11, x0, #32
    6a30:	sub	x6, x6, x13
    6a34:	mov	x14, #0x100000000           	// #4294967296
    6a38:	mul	x5, x1, x12
    6a3c:	mul	x12, x11, x12
    6a40:	madd	x1, x1, x10, x12
    6a44:	and	x13, x5, #0xffffffff
    6a48:	mul	x10, x11, x10
    6a4c:	add	x5, x1, x5, lsr #32
    6a50:	add	x1, x10, x14
    6a54:	cmp	x12, x5
    6a58:	csel	x10, x1, x10, hi  // hi = pmore
    6a5c:	add	x11, x13, x5, lsl #32
    6a60:	add	x5, x10, x5, lsr #32
    6a64:	cmp	x6, x5
    6a68:	b.cc	6aa0 <__udivmodti4@@GCC_3.0+0x348>  // b.lo, b.ul, b.last
    6a6c:	ccmp	x9, x11, #0x2, eq  // eq = none
    6a70:	b.cc	6aa0 <__udivmodti4@@GCC_3.0+0x348>  // b.lo, b.ul, b.last
    6a74:	mov	x1, #0x0                   	// #0
    6a78:	cbz	x4, 6818 <__udivmodti4@@GCC_3.0+0xc0>
    6a7c:	subs	x2, x9, x11
    6a80:	cmp	x9, x11
    6a84:	sbc	x6, x6, x5
    6a88:	lsr	x2, x2, x7
    6a8c:	lsl	x8, x6, x8
    6a90:	orr	x8, x8, x2
    6a94:	lsr	x6, x6, x7
    6a98:	stp	x8, x6, [x4]
    6a9c:	ret
    6aa0:	cmp	x11, x2
    6aa4:	sub	x0, x0, #0x1
    6aa8:	cinc	x3, x3, cc  // cc = lo, ul, last
    6aac:	sub	x11, x11, x2
    6ab0:	sub	x5, x5, x3
    6ab4:	b	6a74 <__udivmodti4@@GCC_3.0+0x31c>
    6ab8:	sub	x0, x0, #0x2
    6abc:	add	x1, x1, x3
    6ac0:	b	69ec <__udivmodti4@@GCC_3.0+0x294>
    6ac4:	sub	x9, x9, #0x2
    6ac8:	add	x0, x0, x7
    6acc:	b	6950 <__udivmodti4@@GCC_3.0+0x1f8>
    6ad0:	sub	x5, x10, #0x2
    6ad4:	add	x6, x6, x3
    6ad8:	b	6a1c <__udivmodti4@@GCC_3.0+0x2c4>
    6adc:	sub	x1, x1, #0x2
    6ae0:	add	x6, x6, x7
    6ae4:	b	6980 <__udivmodti4@@GCC_3.0+0x228>
    6ae8:	sub	x9, x2, #0x2
    6aec:	add	x5, x5, x7
    6af0:	b	68a0 <__udivmodti4@@GCC_3.0+0x148>
    6af4:	sub	x0, x0, #0x2
    6af8:	add	x6, x6, x7
    6afc:	b	6870 <__udivmodti4@@GCC_3.0+0x118>
    6b00:	sub	x0, x0, #0x2
    6b04:	add	x1, x1, x7
    6b08:	b	67d0 <__udivmodti4@@GCC_3.0+0x78>
    6b0c:	sub	x8, x6, #0x2
    6b10:	add	x5, x5, x7
    6b14:	b	6800 <__udivmodti4@@GCC_3.0+0xa8>
    6b18:	mov	x0, #0x0                   	// #0
    6b1c:	ret
    6b20:	adrp	x3, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    6b24:	ldr	w2, [x3, #448]
    6b28:	cbnz	w2, 6b38 <__udivmodti4@@GCC_3.0+0x3e0>
    6b2c:	mrs	x4, ctr_el0
    6b30:	mov	w2, w4
    6b34:	str	w4, [x3, #448]
    6b38:	ubfx	x4, x2, #16, #4
    6b3c:	mov	w3, #0x4                   	// #4
    6b40:	and	w5, w2, #0xf
    6b44:	lsl	w4, w3, w4
    6b48:	sub	w2, w4, #0x1
    6b4c:	bic	x2, x0, x2
    6b50:	sxtw	x4, w4
    6b54:	cmp	x2, x1
    6b58:	lsl	w3, w3, w5
    6b5c:	b.cs	6b70 <__udivmodti4@@GCC_3.0+0x418>  // b.hs, b.nlast
    6b60:	dc	cvau, x2
    6b64:	add	x2, x2, x4
    6b68:	cmp	x1, x2
    6b6c:	b.hi	6b60 <__udivmodti4@@GCC_3.0+0x408>  // b.pmore
    6b70:	dsb	ish
    6b74:	sub	w2, w3, #0x1
    6b78:	sxtw	x3, w3
    6b7c:	bic	x0, x0, x2
    6b80:	cmp	x1, x0
    6b84:	b.ls	6b98 <__udivmodti4@@GCC_3.0+0x440>  // b.plast
    6b88:	ic	ivau, x0
    6b8c:	add	x0, x0, x3
    6b90:	cmp	x1, x0
    6b94:	b.hi	6b88 <__udivmodti4@@GCC_3.0+0x430>  // b.pmore
    6b98:	dsb	ish
    6b9c:	isb
    6ba0:	ret
    6ba4:	nop
    6ba8:	tbz	w0, #0, 6bb8 <__udivmodti4@@GCC_3.0+0x460>
    6bac:	movi	v1.2s, #0x0
    6bb0:	fdiv	s0, s1, s1
    6bb4:	mrs	x1, fpsr
    6bb8:	tbz	w0, #1, 6bcc <__udivmodti4@@GCC_3.0+0x474>
    6bbc:	fmov	s1, #1.000000000000000000e+00
    6bc0:	movi	v2.2s, #0x0
    6bc4:	fdiv	s0, s1, s2
    6bc8:	mrs	x1, fpsr
    6bcc:	tbz	w0, #2, 6bec <__udivmodti4@@GCC_3.0+0x494>
    6bd0:	mov	w2, #0xc5ae                	// #50606
    6bd4:	mov	w1, #0x7f7fffff            	// #2139095039
    6bd8:	movk	w2, #0x749d, lsl #16
    6bdc:	fmov	s1, w1
    6be0:	fmov	s2, w2
    6be4:	fadd	s0, s1, s2
    6be8:	mrs	x1, fpsr
    6bec:	tbz	w0, #3, 6bfc <__udivmodti4@@GCC_3.0+0x4a4>
    6bf0:	movi	v1.2s, #0x80, lsl #16
    6bf4:	fmul	s0, s1, s1
    6bf8:	mrs	x1, fpsr
    6bfc:	tbz	w0, #4, 6c14 <__udivmodti4@@GCC_3.0+0x4bc>
    6c00:	mov	w0, #0x7f7fffff            	// #2139095039
    6c04:	fmov	s2, #1.000000000000000000e+00
    6c08:	fmov	s1, w0
    6c0c:	fsub	s0, s1, s2
    6c10:	mrs	x0, fpsr
    6c14:	ret

0000000000006c18 <__addtf3@@GCC_3.0>:
    6c18:	stp	x29, x30, [sp, #-48]!
    6c1c:	mov	x29, sp
    6c20:	str	q0, [sp, #16]
    6c24:	str	q1, [sp, #32]
    6c28:	ldp	x6, x1, [sp, #16]
    6c2c:	ldp	x0, x3, [sp, #32]
    6c30:	mrs	x15, fpcr
    6c34:	lsr	x7, x1, #63
    6c38:	mov	x10, x0
    6c3c:	ubfiz	x4, x3, #3, #48
    6c40:	lsr	x5, x3, #63
    6c44:	mov	x12, x7
    6c48:	ubfiz	x2, x1, #3, #48
    6c4c:	orr	x4, x4, x0, lsr #61
    6c50:	ubfx	x8, x1, #48, #15
    6c54:	ubfx	x0, x3, #48, #15
    6c58:	and	w7, w7, #0xff
    6c5c:	mov	x16, x12
    6c60:	cmp	x12, x5
    6c64:	and	w11, w5, #0xff
    6c68:	orr	x2, x2, x6, lsr #61
    6c6c:	mov	x1, x8
    6c70:	lsl	x9, x6, #3
    6c74:	mov	x3, x0
    6c78:	lsl	x13, x10, #3
    6c7c:	b.eq	6e28 <__addtf3@@GCC_3.0+0x210>  // b.none
    6c80:	sub	w0, w8, w0
    6c84:	cmp	w0, #0x0
    6c88:	b.le	6dd4 <__addtf3@@GCC_3.0+0x1bc>
    6c8c:	cbz	x3, 6e88 <__addtf3@@GCC_3.0+0x270>
    6c90:	orr	x4, x4, #0x8000000000000
    6c94:	mov	x3, #0x7fff                	// #32767
    6c98:	cmp	x1, x3
    6c9c:	b.eq	708c <__addtf3@@GCC_3.0+0x474>  // b.none
    6ca0:	cmp	w0, #0x74
    6ca4:	b.gt	7110 <__addtf3@@GCC_3.0+0x4f8>
    6ca8:	cmp	w0, #0x3f
    6cac:	b.gt	7270 <__addtf3@@GCC_3.0+0x658>
    6cb0:	mov	w3, #0x40                  	// #64
    6cb4:	sub	w3, w3, w0
    6cb8:	lsr	x6, x13, x0
    6cbc:	lsl	x13, x13, x3
    6cc0:	cmp	x13, #0x0
    6cc4:	cset	x5, ne  // ne = any
    6cc8:	lsl	x3, x4, x3
    6ccc:	orr	x3, x3, x6
    6cd0:	lsr	x0, x4, x0
    6cd4:	orr	x3, x3, x5
    6cd8:	sub	x2, x2, x0
    6cdc:	subs	x9, x9, x3
    6ce0:	sbc	x2, x2, xzr
    6ce4:	and	x3, x2, #0x7ffffffffffff
    6ce8:	tbz	x2, #51, 6ec8 <__addtf3@@GCC_3.0+0x2b0>
    6cec:	cbz	x3, 70f4 <__addtf3@@GCC_3.0+0x4dc>
    6cf0:	clz	x0, x3
    6cf4:	sub	w0, w0, #0xc
    6cf8:	neg	w2, w0
    6cfc:	lsl	x4, x3, x0
    6d00:	lsl	x3, x9, x0
    6d04:	lsr	x9, x9, x2
    6d08:	orr	x2, x9, x4
    6d0c:	cmp	x1, w0, sxtw
    6d10:	sxtw	x4, w0
    6d14:	b.gt	70d4 <__addtf3@@GCC_3.0+0x4bc>
    6d18:	sub	w1, w0, w1
    6d1c:	add	w0, w1, #0x1
    6d20:	cmp	w0, #0x3f
    6d24:	b.gt	7238 <__addtf3@@GCC_3.0+0x620>
    6d28:	mov	w1, #0x40                  	// #64
    6d2c:	sub	w1, w1, w0
    6d30:	lsr	x4, x3, x0
    6d34:	lsl	x3, x3, x1
    6d38:	cmp	x3, #0x0
    6d3c:	lsl	x9, x2, x1
    6d40:	cset	x1, ne  // ne = any
    6d44:	orr	x9, x9, x4
    6d48:	lsr	x2, x2, x0
    6d4c:	orr	x9, x9, x1
    6d50:	orr	x8, x9, x2
    6d54:	cbz	x8, 6edc <__addtf3@@GCC_3.0+0x2c4>
    6d58:	and	x0, x9, #0x7
    6d5c:	mov	x1, #0x0                   	// #0
    6d60:	mov	w5, #0x1                   	// #1
    6d64:	cbz	x0, 7120 <__addtf3@@GCC_3.0+0x508>
    6d68:	and	x3, x15, #0xc00000
    6d6c:	cmp	x3, #0x400, lsl #12
    6d70:	b.eq	7064 <__addtf3@@GCC_3.0+0x44c>  // b.none
    6d74:	cmp	x3, #0x800, lsl #12
    6d78:	b.eq	7044 <__addtf3@@GCC_3.0+0x42c>  // b.none
    6d7c:	cbz	x3, 7070 <__addtf3@@GCC_3.0+0x458>
    6d80:	and	x3, x2, #0x8000000000000
    6d84:	mov	w0, #0x10                  	// #16
    6d88:	cbz	w5, 6d90 <__addtf3@@GCC_3.0+0x178>
    6d8c:	orr	w0, w0, #0x8
    6d90:	cbz	x3, 70a8 <__addtf3@@GCC_3.0+0x490>
    6d94:	add	x1, x1, #0x1
    6d98:	mov	x3, #0x7fff                	// #32767
    6d9c:	cmp	x1, x3
    6da0:	b.eq	6f8c <__addtf3@@GCC_3.0+0x374>  // b.none
    6da4:	and	w1, w1, #0x7fff
    6da8:	extr	x8, x2, x9, #3
    6dac:	ubfx	x2, x2, #3, #48
    6db0:	mov	x5, #0x0                   	// #0
    6db4:	orr	w1, w1, w7, lsl #15
    6db8:	bfxil	x5, x2, #0, #48
    6dbc:	fmov	d0, x8
    6dc0:	bfi	x5, x1, #48, #16
    6dc4:	fmov	v0.d[1], x5
    6dc8:	cbnz	w0, 6fe8 <__addtf3@@GCC_3.0+0x3d0>
    6dcc:	ldp	x29, x30, [sp], #48
    6dd0:	ret
    6dd4:	mov	x14, x5
    6dd8:	b.eq	6ef4 <__addtf3@@GCC_3.0+0x2dc>  // b.none
    6ddc:	cbnz	x8, 7178 <__addtf3@@GCC_3.0+0x560>
    6de0:	orr	x1, x2, x9
    6de4:	cbz	x1, 6ea4 <__addtf3@@GCC_3.0+0x28c>
    6de8:	cmn	w0, #0x1
    6dec:	b.eq	7594 <__addtf3@@GCC_3.0+0x97c>  // b.none
    6df0:	mov	x1, #0x7fff                	// #32767
    6df4:	mvn	w0, w0
    6df8:	cmp	x3, x1
    6dfc:	b.ne	718c <__addtf3@@GCC_3.0+0x574>  // b.any
    6e00:	orr	x0, x4, x13
    6e04:	cbnz	x0, 74ec <__addtf3@@GCC_3.0+0x8d4>
    6e08:	mov	x16, x14
    6e0c:	nop
    6e10:	mov	x4, #0x0                   	// #0
    6e14:	fmov	d0, x4
    6e18:	lsl	x16, x16, #63
    6e1c:	orr	x5, x16, #0x7fff000000000000
    6e20:	fmov	v0.d[1], x5
    6e24:	b	6dcc <__addtf3@@GCC_3.0+0x1b4>
    6e28:	sub	w5, w8, w0
    6e2c:	cmp	w5, #0x0
    6e30:	b.le	6ffc <__addtf3@@GCC_3.0+0x3e4>
    6e34:	cbz	x0, 6f3c <__addtf3@@GCC_3.0+0x324>
    6e38:	orr	x4, x4, #0x8000000000000
    6e3c:	mov	x0, #0x7fff                	// #32767
    6e40:	cmp	x1, x0
    6e44:	b.eq	708c <__addtf3@@GCC_3.0+0x474>  // b.none
    6e48:	cmp	w5, #0x74
    6e4c:	b.gt	7220 <__addtf3@@GCC_3.0+0x608>
    6e50:	cmp	w5, #0x3f
    6e54:	b.gt	7320 <__addtf3@@GCC_3.0+0x708>
    6e58:	mov	w0, #0x40                  	// #64
    6e5c:	sub	w0, w0, w5
    6e60:	lsr	x6, x13, x5
    6e64:	lsl	x13, x13, x0
    6e68:	cmp	x13, #0x0
    6e6c:	lsl	x0, x4, x0
    6e70:	cset	x3, ne  // ne = any
    6e74:	orr	x0, x0, x6
    6e78:	lsr	x4, x4, x5
    6e7c:	orr	x0, x0, x3
    6e80:	add	x2, x2, x4
    6e84:	b	722c <__addtf3@@GCC_3.0+0x614>
    6e88:	orr	x3, x4, x13
    6e8c:	cbz	x3, 71fc <__addtf3@@GCC_3.0+0x5e4>
    6e90:	subs	w0, w0, #0x1
    6e94:	b.ne	6c94 <__addtf3@@GCC_3.0+0x7c>  // b.any
    6e98:	subs	x9, x9, x13
    6e9c:	sbc	x2, x2, x4
    6ea0:	b	6ce4 <__addtf3@@GCC_3.0+0xcc>
    6ea4:	mov	x0, #0x7fff                	// #32767
    6ea8:	cmp	x3, x0
    6eac:	b.eq	75e0 <__addtf3@@GCC_3.0+0x9c8>  // b.none
    6eb0:	mov	w7, w11
    6eb4:	mov	x2, x4
    6eb8:	mov	x9, x13
    6ebc:	mov	x1, x3
    6ec0:	mov	x12, x5
    6ec4:	nop
    6ec8:	orr	x8, x9, x2
    6ecc:	and	x0, x9, #0x7
    6ed0:	mov	w5, #0x0                   	// #0
    6ed4:	cbnz	x1, 6d64 <__addtf3@@GCC_3.0+0x14c>
    6ed8:	cbnz	x8, 6d58 <__addtf3@@GCC_3.0+0x140>
    6edc:	mov	x2, #0x0                   	// #0
    6ee0:	mov	x1, #0x0                   	// #0
    6ee4:	mov	w0, #0x0                   	// #0
    6ee8:	and	x2, x2, #0xffffffffffff
    6eec:	and	w1, w1, #0x7fff
    6ef0:	b	6db0 <__addtf3@@GCC_3.0+0x198>
    6ef4:	add	x5, x8, #0x1
    6ef8:	tst	x5, #0x7ffe
    6efc:	b.ne	71cc <__addtf3@@GCC_3.0+0x5b4>  // b.any
    6f00:	orr	x5, x2, x9
    6f04:	orr	x8, x4, x13
    6f08:	cbnz	x1, 738c <__addtf3@@GCC_3.0+0x774>
    6f0c:	cbz	x5, 7434 <__addtf3@@GCC_3.0+0x81c>
    6f10:	cbz	x8, 7448 <__addtf3@@GCC_3.0+0x830>
    6f14:	subs	x5, x9, x13
    6f18:	cmp	x9, x13
    6f1c:	sbc	x3, x2, x4
    6f20:	tbz	x3, #51, 7614 <__addtf3@@GCC_3.0+0x9fc>
    6f24:	subs	x9, x13, x9
    6f28:	mov	w7, w11
    6f2c:	sbc	x2, x4, x2
    6f30:	mov	x12, x14
    6f34:	orr	x8, x9, x2
    6f38:	b	6d54 <__addtf3@@GCC_3.0+0x13c>
    6f3c:	orr	x0, x4, x13
    6f40:	cbz	x0, 7414 <__addtf3@@GCC_3.0+0x7fc>
    6f44:	subs	w5, w5, #0x1
    6f48:	b.ne	6e3c <__addtf3@@GCC_3.0+0x224>  // b.any
    6f4c:	adds	x9, x9, x13
    6f50:	adc	x2, x4, x2
    6f54:	nop
    6f58:	tbz	x2, #51, 6ec8 <__addtf3@@GCC_3.0+0x2b0>
    6f5c:	add	x1, x1, #0x1
    6f60:	mov	x0, #0x7fff                	// #32767
    6f64:	cmp	x1, x0
    6f68:	b.eq	7454 <__addtf3@@GCC_3.0+0x83c>  // b.none
    6f6c:	and	x0, x9, #0x1
    6f70:	and	x3, x2, #0xfff7ffffffffffff
    6f74:	orr	x9, x0, x9, lsr #1
    6f78:	mov	w5, #0x0                   	// #0
    6f7c:	orr	x9, x9, x2, lsl #63
    6f80:	lsr	x2, x3, #1
    6f84:	and	x0, x9, #0x7
    6f88:	b	6d64 <__addtf3@@GCC_3.0+0x14c>
    6f8c:	and	x3, x15, #0xc00000
    6f90:	cbz	x3, 6fc8 <__addtf3@@GCC_3.0+0x3b0>
    6f94:	cmp	x3, #0x400, lsl #12
    6f98:	b.eq	6fc0 <__addtf3@@GCC_3.0+0x3a8>  // b.none
    6f9c:	cmp	x3, #0x800, lsl #12
    6fa0:	csel	w12, w12, wzr, eq  // eq = none
    6fa4:	cbnz	w12, 6fc8 <__addtf3@@GCC_3.0+0x3b0>
    6fa8:	mov	w1, #0x14                  	// #20
    6fac:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    6fb0:	orr	w0, w0, w1
    6fb4:	mov	x8, #0xffffffffffffffff    	// #-1
    6fb8:	mov	x1, #0x7ffe                	// #32766
    6fbc:	b	6ee8 <__addtf3@@GCC_3.0+0x2d0>
    6fc0:	cbnz	x12, 6fa8 <__addtf3@@GCC_3.0+0x390>
    6fc4:	nop
    6fc8:	mov	w1, #0x14                  	// #20
    6fcc:	and	x16, x7, #0xff
    6fd0:	orr	w0, w0, w1
    6fd4:	mov	x4, #0x0                   	// #0
    6fd8:	fmov	d0, x4
    6fdc:	lsl	x16, x16, #63
    6fe0:	orr	x5, x16, #0x7fff000000000000
    6fe4:	fmov	v0.d[1], x5
    6fe8:	str	q0, [sp, #16]
    6fec:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    6ff0:	ldr	q0, [sp, #16]
    6ff4:	ldp	x29, x30, [sp], #48
    6ff8:	ret
    6ffc:	b.eq	713c <__addtf3@@GCC_3.0+0x524>  // b.none
    7000:	cbnz	x8, 72c0 <__addtf3@@GCC_3.0+0x6a8>
    7004:	orr	x0, x2, x9
    7008:	cbz	x0, 752c <__addtf3@@GCC_3.0+0x914>
    700c:	cmn	w5, #0x1
    7010:	b.eq	768c <__addtf3@@GCC_3.0+0xa74>  // b.none
    7014:	mov	x0, #0x7fff                	// #32767
    7018:	mvn	w5, w5
    701c:	cmp	x3, x0
    7020:	b.ne	72d4 <__addtf3@@GCC_3.0+0x6bc>  // b.any
    7024:	orr	x0, x4, x13
    7028:	cbz	x0, 6e10 <__addtf3@@GCC_3.0+0x1f8>
    702c:	lsr	x5, x4, #50
    7030:	mov	x9, x13
    7034:	eor	x5, x5, #0x1
    7038:	mov	x2, x4
    703c:	and	w5, w5, #0x1
    7040:	b	70a0 <__addtf3@@GCC_3.0+0x488>
    7044:	mov	w0, #0x10                  	// #16
    7048:	cbz	x12, 7054 <__addtf3@@GCC_3.0+0x43c>
    704c:	adds	x9, x9, #0x8
    7050:	cinc	x2, x2, cs  // cs = hs, nlast
    7054:	and	x3, x2, #0x8000000000000
    7058:	cbz	w5, 6d90 <__addtf3@@GCC_3.0+0x178>
    705c:	orr	w0, w0, #0x8
    7060:	b	6d90 <__addtf3@@GCC_3.0+0x178>
    7064:	mov	w0, #0x10                  	// #16
    7068:	cbnz	x12, 7054 <__addtf3@@GCC_3.0+0x43c>
    706c:	b	704c <__addtf3@@GCC_3.0+0x434>
    7070:	and	x3, x9, #0xf
    7074:	mov	w0, #0x10                  	// #16
    7078:	cmp	x3, #0x4
    707c:	b.eq	7054 <__addtf3@@GCC_3.0+0x43c>  // b.none
    7080:	adds	x9, x9, #0x4
    7084:	cinc	x2, x2, cs  // cs = hs, nlast
    7088:	b	7054 <__addtf3@@GCC_3.0+0x43c>
    708c:	orr	x0, x2, x9
    7090:	cbz	x0, 6e10 <__addtf3@@GCC_3.0+0x1f8>
    7094:	lsr	x5, x2, #50
    7098:	eor	x5, x5, #0x1
    709c:	and	w5, w5, #0x1
    70a0:	mov	w0, w5
    70a4:	mov	x1, #0x7fff                	// #32767
    70a8:	mov	x3, #0x7fff                	// #32767
    70ac:	extr	x8, x2, x9, #3
    70b0:	cmp	x1, x3
    70b4:	lsr	x2, x2, #3
    70b8:	b.ne	6ee8 <__addtf3@@GCC_3.0+0x2d0>  // b.any
    70bc:	orr	x1, x8, x2
    70c0:	cbz	x1, 772c <__addtf3@@GCC_3.0+0xb14>
    70c4:	orr	x2, x2, #0x800000000000
    70c8:	mov	w1, #0x7fff                	// #32767
    70cc:	and	x2, x2, #0xffffffffffff
    70d0:	b	6db0 <__addtf3@@GCC_3.0+0x198>
    70d4:	mov	x9, x3
    70d8:	and	x2, x2, #0xfff7ffffffffffff
    70dc:	sub	x1, x1, x4
    70e0:	orr	x8, x9, x2
    70e4:	and	x0, x9, #0x7
    70e8:	mov	w5, #0x0                   	// #0
    70ec:	cbz	x1, 6ed8 <__addtf3@@GCC_3.0+0x2c0>
    70f0:	b	6d64 <__addtf3@@GCC_3.0+0x14c>
    70f4:	clz	x2, x9
    70f8:	add	w0, w2, #0x34
    70fc:	cmp	w0, #0x3f
    7100:	b.le	6cf8 <__addtf3@@GCC_3.0+0xe0>
    7104:	sub	w2, w2, #0xc
    7108:	lsl	x2, x9, x2
    710c:	b	6d0c <__addtf3@@GCC_3.0+0xf4>
    7110:	orr	x4, x4, x13
    7114:	cmp	x4, #0x0
    7118:	cset	x3, ne  // ne = any
    711c:	b	6cdc <__addtf3@@GCC_3.0+0xc4>
    7120:	and	x3, x2, #0x8000000000000
    7124:	mov	w0, #0x0                   	// #0
    7128:	cbz	w5, 6d90 <__addtf3@@GCC_3.0+0x178>
    712c:	mov	w0, #0x0                   	// #0
    7130:	tbz	w15, #11, 6d90 <__addtf3@@GCC_3.0+0x178>
    7134:	orr	w0, w0, #0x8
    7138:	b	6d90 <__addtf3@@GCC_3.0+0x178>
    713c:	add	x0, x8, #0x1
    7140:	tst	x0, #0x7ffe
    7144:	b.ne	734c <__addtf3@@GCC_3.0+0x734>  // b.any
    7148:	orr	x0, x2, x9
    714c:	cbnz	x8, 7508 <__addtf3@@GCC_3.0+0x8f0>
    7150:	orr	x8, x4, x13
    7154:	cbz	x0, 755c <__addtf3@@GCC_3.0+0x944>
    7158:	cbz	x8, 7448 <__addtf3@@GCC_3.0+0x830>
    715c:	adds	x9, x9, x13
    7160:	adc	x2, x4, x2
    7164:	tbz	x2, #51, 6f34 <__addtf3@@GCC_3.0+0x31c>
    7168:	and	x2, x2, #0xfff7ffffffffffff
    716c:	and	x0, x9, #0x7
    7170:	mov	x1, #0x1                   	// #1
    7174:	b	6d64 <__addtf3@@GCC_3.0+0x14c>
    7178:	mov	x1, #0x7fff                	// #32767
    717c:	neg	w0, w0
    7180:	orr	x2, x2, #0x8000000000000
    7184:	cmp	x3, x1
    7188:	b.eq	6e00 <__addtf3@@GCC_3.0+0x1e8>  // b.none
    718c:	cmp	w0, #0x74
    7190:	b.gt	729c <__addtf3@@GCC_3.0+0x684>
    7194:	cmp	w0, #0x3f
    7198:	b.gt	74b8 <__addtf3@@GCC_3.0+0x8a0>
    719c:	mov	w1, #0x40                  	// #64
    71a0:	sub	w1, w1, w0
    71a4:	lsr	x5, x9, x0
    71a8:	lsl	x9, x9, x1
    71ac:	cmp	x9, #0x0
    71b0:	lsl	x9, x2, x1
    71b4:	cset	x1, ne  // ne = any
    71b8:	orr	x9, x9, x5
    71bc:	lsr	x0, x2, x0
    71c0:	orr	x9, x9, x1
    71c4:	sub	x4, x4, x0
    71c8:	b	72a8 <__addtf3@@GCC_3.0+0x690>
    71cc:	subs	x5, x9, x13
    71d0:	cmp	x9, x13
    71d4:	sbc	x3, x2, x4
    71d8:	tbnz	x3, #51, 7374 <__addtf3@@GCC_3.0+0x75c>
    71dc:	orr	x8, x5, x3
    71e0:	cbnz	x8, 74a0 <__addtf3@@GCC_3.0+0x888>
    71e4:	and	x15, x15, #0xc00000
    71e8:	mov	x2, #0x0                   	// #0
    71ec:	cmp	x15, #0x800, lsl #12
    71f0:	mov	x1, #0x0                   	// #0
    71f4:	cset	w7, eq  // eq = none
    71f8:	b	6ee8 <__addtf3@@GCC_3.0+0x2d0>
    71fc:	mov	x0, #0x7fff                	// #32767
    7200:	cmp	x8, x0
    7204:	b.ne	6ec8 <__addtf3@@GCC_3.0+0x2b0>  // b.any
    7208:	orr	x0, x2, x9
    720c:	cbnz	x0, 7094 <__addtf3@@GCC_3.0+0x47c>
    7210:	mov	x2, #0x0                   	// #0
    7214:	mov	x8, #0x0                   	// #0
    7218:	mov	w0, #0x0                   	// #0
    721c:	b	70bc <__addtf3@@GCC_3.0+0x4a4>
    7220:	orr	x4, x4, x13
    7224:	cmp	x4, #0x0
    7228:	cset	x0, ne  // ne = any
    722c:	adds	x9, x0, x9
    7230:	cinc	x2, x2, cs  // cs = hs, nlast
    7234:	b	6f58 <__addtf3@@GCC_3.0+0x340>
    7238:	mov	w4, #0x80                  	// #128
    723c:	sub	w4, w4, w0
    7240:	cmp	w0, #0x40
    7244:	sub	w9, w1, #0x3f
    7248:	lsl	x0, x2, x4
    724c:	orr	x0, x3, x0
    7250:	csel	x3, x0, x3, ne  // ne = any
    7254:	lsr	x9, x2, x9
    7258:	cmp	x3, #0x0
    725c:	mov	x2, #0x0                   	// #0
    7260:	cset	x0, ne  // ne = any
    7264:	orr	x9, x0, x9
    7268:	mov	x8, x9
    726c:	b	6d54 <__addtf3@@GCC_3.0+0x13c>
    7270:	mov	w5, #0x80                  	// #128
    7274:	sub	w5, w5, w0
    7278:	subs	w0, w0, #0x40
    727c:	lsl	x5, x4, x5
    7280:	orr	x5, x13, x5
    7284:	csel	x13, x5, x13, ne  // ne = any
    7288:	lsr	x4, x4, x0
    728c:	cmp	x13, #0x0
    7290:	cset	x3, ne  // ne = any
    7294:	orr	x3, x3, x4
    7298:	b	6cdc <__addtf3@@GCC_3.0+0xc4>
    729c:	orr	x2, x2, x9
    72a0:	cmp	x2, #0x0
    72a4:	cset	x9, ne  // ne = any
    72a8:	subs	x9, x13, x9
    72ac:	mov	w7, w11
    72b0:	sbc	x2, x4, xzr
    72b4:	mov	x1, x3
    72b8:	mov	x12, x14
    72bc:	b	6ce4 <__addtf3@@GCC_3.0+0xcc>
    72c0:	mov	x0, #0x7fff                	// #32767
    72c4:	neg	w5, w5
    72c8:	orr	x2, x2, #0x8000000000000
    72cc:	cmp	x3, x0
    72d0:	b.eq	7024 <__addtf3@@GCC_3.0+0x40c>  // b.none
    72d4:	cmp	w5, #0x74
    72d8:	b.gt	74a8 <__addtf3@@GCC_3.0+0x890>
    72dc:	cmp	w5, #0x3f
    72e0:	b.gt	7568 <__addtf3@@GCC_3.0+0x950>
    72e4:	mov	w1, #0x40                  	// #64
    72e8:	sub	w1, w1, w5
    72ec:	lsr	x6, x9, x5
    72f0:	lsl	x9, x9, x1
    72f4:	cmp	x9, #0x0
    72f8:	cset	x0, ne  // ne = any
    72fc:	lsl	x9, x2, x1
    7300:	orr	x9, x9, x6
    7304:	lsr	x5, x2, x5
    7308:	orr	x9, x9, x0
    730c:	add	x4, x4, x5
    7310:	adds	x9, x9, x13
    7314:	mov	x1, x3
    7318:	cinc	x2, x4, cs  // cs = hs, nlast
    731c:	b	6f58 <__addtf3@@GCC_3.0+0x340>
    7320:	mov	w0, #0x80                  	// #128
    7324:	sub	w0, w0, w5
    7328:	subs	w5, w5, #0x40
    732c:	lsl	x0, x4, x0
    7330:	orr	x0, x13, x0
    7334:	csel	x13, x0, x13, ne  // ne = any
    7338:	lsr	x4, x4, x5
    733c:	cmp	x13, #0x0
    7340:	cset	x0, ne  // ne = any
    7344:	orr	x0, x0, x4
    7348:	b	722c <__addtf3@@GCC_3.0+0x614>
    734c:	mov	x1, #0x7fff                	// #32767
    7350:	cmp	x0, x1
    7354:	b.eq	75b0 <__addtf3@@GCC_3.0+0x998>  // b.none
    7358:	adds	x9, x9, x13
    735c:	mov	x1, x0
    7360:	adc	x2, x4, x2
    7364:	ubfx	x0, x9, #1, #3
    7368:	extr	x9, x2, x9, #1
    736c:	lsr	x2, x2, #1
    7370:	b	6d64 <__addtf3@@GCC_3.0+0x14c>
    7374:	cmp	x13, x9
    7378:	mov	w7, w11
    737c:	sbc	x3, x4, x2
    7380:	sub	x9, x13, x9
    7384:	mov	x12, x14
    7388:	b	6cec <__addtf3@@GCC_3.0+0xd4>
    738c:	mov	x12, #0x7fff                	// #32767
    7390:	cmp	x1, x12
    7394:	b.eq	73c0 <__addtf3@@GCC_3.0+0x7a8>  // b.none
    7398:	cmp	x3, x12
    739c:	b.eq	75f0 <__addtf3@@GCC_3.0+0x9d8>  // b.none
    73a0:	cbnz	x5, 73d8 <__addtf3@@GCC_3.0+0x7c0>
    73a4:	mov	w5, w0
    73a8:	cbnz	x8, 76d0 <__addtf3@@GCC_3.0+0xab8>
    73ac:	mov	w7, #0x0                   	// #0
    73b0:	mov	x2, #0xffffffffffff        	// #281474976710655
    73b4:	mov	w0, #0x1                   	// #1
    73b8:	mov	x8, #0xffffffffffffffff    	// #-1
    73bc:	b	70c4 <__addtf3@@GCC_3.0+0x4ac>
    73c0:	cbz	x5, 76ec <__addtf3@@GCC_3.0+0xad4>
    73c4:	lsr	x0, x2, #50
    73c8:	cmp	x3, x1
    73cc:	eor	x0, x0, #0x1
    73d0:	and	w0, w0, #0x1
    73d4:	b.eq	75f0 <__addtf3@@GCC_3.0+0x9d8>  // b.none
    73d8:	cbz	x8, 760c <__addtf3@@GCC_3.0+0x9f4>
    73dc:	bfi	x6, x2, #61, #3
    73e0:	lsr	x3, x2, #3
    73e4:	tbz	x2, #50, 7400 <__addtf3@@GCC_3.0+0x7e8>
    73e8:	lsr	x1, x4, #3
    73ec:	tbnz	x4, #50, 7400 <__addtf3@@GCC_3.0+0x7e8>
    73f0:	mov	x6, x10
    73f4:	mov	w7, w11
    73f8:	bfi	x6, x4, #61, #3
    73fc:	mov	x3, x1
    7400:	extr	x2, x3, x6, #61
    7404:	bfi	x6, x2, #61, #3
    7408:	lsr	x2, x2, #3
    740c:	mov	x8, x6
    7410:	b	70bc <__addtf3@@GCC_3.0+0x4a4>
    7414:	mov	x0, #0x7fff                	// #32767
    7418:	cmp	x8, x0
    741c:	b.ne	6ec8 <__addtf3@@GCC_3.0+0x2b0>  // b.any
    7420:	orr	x0, x2, x9
    7424:	cbz	x0, 7210 <__addtf3@@GCC_3.0+0x5f8>
    7428:	lsr	x5, x2, #50
    742c:	eor	w5, w5, #0x1
    7430:	b	70a0 <__addtf3@@GCC_3.0+0x488>
    7434:	cbz	x8, 7548 <__addtf3@@GCC_3.0+0x930>
    7438:	mov	w7, w11
    743c:	mov	x2, x4
    7440:	mov	x9, x13
    7444:	mov	x12, x14
    7448:	mov	x1, #0x0                   	// #0
    744c:	mov	x3, #0x0                   	// #0
    7450:	b	712c <__addtf3@@GCC_3.0+0x514>
    7454:	ands	x3, x15, #0xc00000
    7458:	b.eq	74e4 <__addtf3@@GCC_3.0+0x8cc>  // b.none
    745c:	cmp	x3, #0x400, lsl #12
    7460:	eor	w0, w7, #0x1
    7464:	cset	w1, eq  // eq = none
    7468:	tst	w1, w0
    746c:	b.ne	7708 <__addtf3@@GCC_3.0+0xaf0>  // b.any
    7470:	cmp	x3, #0x800, lsl #12
    7474:	b.eq	76b4 <__addtf3@@GCC_3.0+0xa9c>  // b.none
    7478:	cmp	x3, #0x400, lsl #12
    747c:	mov	w0, #0x14                  	// #20
    7480:	b.ne	6f90 <__addtf3@@GCC_3.0+0x378>  // b.any
    7484:	mov	x2, #0xffffffffffffffff    	// #-1
    7488:	mov	x1, #0x7ffe                	// #32766
    748c:	mov	x9, x2
    7490:	mov	w5, #0x0                   	// #0
    7494:	mov	w0, #0x14                  	// #20
    7498:	cbnz	x12, 7054 <__addtf3@@GCC_3.0+0x43c>
    749c:	b	704c <__addtf3@@GCC_3.0+0x434>
    74a0:	mov	x9, x5
    74a4:	b	6cec <__addtf3@@GCC_3.0+0xd4>
    74a8:	orr	x2, x2, x9
    74ac:	cmp	x2, #0x0
    74b0:	cset	x9, ne  // ne = any
    74b4:	b	7310 <__addtf3@@GCC_3.0+0x6f8>
    74b8:	mov	w1, #0x80                  	// #128
    74bc:	sub	w1, w1, w0
    74c0:	subs	w0, w0, #0x40
    74c4:	lsl	x1, x2, x1
    74c8:	orr	x1, x9, x1
    74cc:	csel	x9, x1, x9, ne  // ne = any
    74d0:	lsr	x2, x2, x0
    74d4:	cmp	x9, #0x0
    74d8:	cset	x9, ne  // ne = any
    74dc:	orr	x9, x9, x2
    74e0:	b	72a8 <__addtf3@@GCC_3.0+0x690>
    74e4:	mov	w0, #0x14                  	// #20
    74e8:	b	6fd4 <__addtf3@@GCC_3.0+0x3bc>
    74ec:	lsr	x5, x4, #50
    74f0:	mov	w7, w11
    74f4:	eor	x5, x5, #0x1
    74f8:	mov	x9, x13
    74fc:	and	w5, w5, #0x1
    7500:	mov	x2, x4
    7504:	b	70a0 <__addtf3@@GCC_3.0+0x488>
    7508:	mov	x8, #0x7fff                	// #32767
    750c:	cmp	x1, x8
    7510:	b.eq	7630 <__addtf3@@GCC_3.0+0xa18>  // b.none
    7514:	cmp	x3, x8
    7518:	b.eq	76a4 <__addtf3@@GCC_3.0+0xa8c>  // b.none
    751c:	cbnz	x0, 7648 <__addtf3@@GCC_3.0+0xa30>
    7520:	mov	x2, x4
    7524:	mov	x9, x13
    7528:	b	70a0 <__addtf3@@GCC_3.0+0x488>
    752c:	mov	x0, #0x7fff                	// #32767
    7530:	cmp	x3, x0
    7534:	b.eq	76e0 <__addtf3@@GCC_3.0+0xac8>  // b.none
    7538:	mov	x2, x4
    753c:	mov	x9, x13
    7540:	mov	x1, x3
    7544:	b	6ec8 <__addtf3@@GCC_3.0+0x2b0>
    7548:	and	x15, x15, #0xc00000
    754c:	mov	x2, #0x0                   	// #0
    7550:	cmp	x15, #0x800, lsl #12
    7554:	cset	w7, eq  // eq = none
    7558:	b	6ee8 <__addtf3@@GCC_3.0+0x2d0>
    755c:	mov	x2, x4
    7560:	mov	x9, x13
    7564:	b	6d54 <__addtf3@@GCC_3.0+0x13c>
    7568:	mov	w0, #0x80                  	// #128
    756c:	sub	w0, w0, w5
    7570:	subs	w5, w5, #0x40
    7574:	lsl	x0, x2, x0
    7578:	orr	x0, x9, x0
    757c:	csel	x9, x0, x9, ne  // ne = any
    7580:	lsr	x2, x2, x5
    7584:	cmp	x9, #0x0
    7588:	cset	x9, ne  // ne = any
    758c:	orr	x9, x9, x2
    7590:	b	7310 <__addtf3@@GCC_3.0+0x6f8>
    7594:	cmp	x13, x9
    7598:	mov	w7, w11
    759c:	sbc	x2, x4, x2
    75a0:	sub	x9, x13, x9
    75a4:	mov	x1, x3
    75a8:	mov	x12, x5
    75ac:	b	6ce4 <__addtf3@@GCC_3.0+0xcc>
    75b0:	ands	x3, x15, #0xc00000
    75b4:	b.eq	74e4 <__addtf3@@GCC_3.0+0x8cc>  // b.none
    75b8:	cmp	x3, #0x400, lsl #12
    75bc:	eor	w0, w7, #0x1
    75c0:	csel	w0, w0, wzr, eq  // eq = none
    75c4:	cbnz	w0, 7708 <__addtf3@@GCC_3.0+0xaf0>
    75c8:	cmp	x3, #0x800, lsl #12
    75cc:	b.ne	7478 <__addtf3@@GCC_3.0+0x860>  // b.any
    75d0:	cbz	x12, 76b8 <__addtf3@@GCC_3.0+0xaa0>
    75d4:	mov	w0, #0x14                  	// #20
    75d8:	mov	x16, #0x1                   	// #1
    75dc:	b	6fd4 <__addtf3@@GCC_3.0+0x3bc>
    75e0:	orr	x0, x4, x13
    75e4:	cbnz	x0, 74ec <__addtf3@@GCC_3.0+0x8d4>
    75e8:	mov	w7, w11
    75ec:	b	7210 <__addtf3@@GCC_3.0+0x5f8>
    75f0:	cbz	x8, 76fc <__addtf3@@GCC_3.0+0xae4>
    75f4:	tst	x4, #0x4000000000000
    75f8:	csinc	w0, w0, wzr, ne  // ne = any
    75fc:	cbnz	x5, 73dc <__addtf3@@GCC_3.0+0x7c4>
    7600:	mov	w7, w11
    7604:	mov	x2, x4
    7608:	mov	x9, x13
    760c:	mov	w5, w0
    7610:	b	70a0 <__addtf3@@GCC_3.0+0x488>
    7614:	orr	x8, x5, x3
    7618:	cbz	x8, 7548 <__addtf3@@GCC_3.0+0x930>
    761c:	and	x0, x5, #0x7
    7620:	mov	x9, x5
    7624:	mov	x2, x3
    7628:	mov	w5, #0x1                   	// #1
    762c:	b	6d64 <__addtf3@@GCC_3.0+0x14c>
    7630:	cbz	x0, 769c <__addtf3@@GCC_3.0+0xa84>
    7634:	lsr	x5, x2, #50
    7638:	cmp	x3, x1
    763c:	eor	x5, x5, #0x1
    7640:	and	w5, w5, #0x1
    7644:	b.eq	7714 <__addtf3@@GCC_3.0+0xafc>  // b.none
    7648:	orr	x13, x4, x13
    764c:	cbz	x13, 70a0 <__addtf3@@GCC_3.0+0x488>
    7650:	bfi	x6, x2, #61, #3
    7654:	lsr	x0, x2, #3
    7658:	tbz	x2, #50, 7674 <__addtf3@@GCC_3.0+0xa5c>
    765c:	lsr	x1, x4, #3
    7660:	tbnz	x4, #50, 7674 <__addtf3@@GCC_3.0+0xa5c>
    7664:	and	x6, x10, #0x1fffffffffffffff
    7668:	mov	w7, w11
    766c:	orr	x6, x6, x4, lsl #61
    7670:	mov	x0, x1
    7674:	extr	x2, x0, x6, #61
    7678:	mov	w0, w5
    767c:	bfi	x6, x2, #61, #3
    7680:	lsr	x2, x2, #3
    7684:	mov	x8, x6
    7688:	b	70bc <__addtf3@@GCC_3.0+0x4a4>
    768c:	adds	x9, x9, x13
    7690:	mov	x1, x3
    7694:	adc	x2, x4, x2
    7698:	b	6f58 <__addtf3@@GCC_3.0+0x340>
    769c:	cmp	x3, x1
    76a0:	b.ne	7520 <__addtf3@@GCC_3.0+0x908>  // b.any
    76a4:	orr	x1, x4, x13
    76a8:	cbnz	x1, 771c <__addtf3@@GCC_3.0+0xb04>
    76ac:	cbz	x0, 7210 <__addtf3@@GCC_3.0+0x5f8>
    76b0:	b	70a0 <__addtf3@@GCC_3.0+0x488>
    76b4:	cbnz	x16, 75d4 <__addtf3@@GCC_3.0+0x9bc>
    76b8:	mov	x2, #0xffffffffffffffff    	// #-1
    76bc:	mov	w7, #0x0                   	// #0
    76c0:	mov	x9, x2
    76c4:	mov	x1, #0x7ffe                	// #32766
    76c8:	mov	w0, #0x14                  	// #20
    76cc:	b	6d94 <__addtf3@@GCC_3.0+0x17c>
    76d0:	mov	w7, w11
    76d4:	mov	x2, x4
    76d8:	mov	x9, x13
    76dc:	b	70a0 <__addtf3@@GCC_3.0+0x488>
    76e0:	orr	x0, x4, x13
    76e4:	cbz	x0, 7210 <__addtf3@@GCC_3.0+0x5f8>
    76e8:	b	702c <__addtf3@@GCC_3.0+0x414>
    76ec:	cmp	x3, x1
    76f0:	b.eq	75f0 <__addtf3@@GCC_3.0+0x9d8>  // b.none
    76f4:	mov	w5, #0x0                   	// #0
    76f8:	b	73a8 <__addtf3@@GCC_3.0+0x790>
    76fc:	cbnz	x5, 760c <__addtf3@@GCC_3.0+0x9f4>
    7700:	mov	w5, w0
    7704:	b	73a8 <__addtf3@@GCC_3.0+0x790>
    7708:	mov	w0, #0x14                  	// #20
    770c:	mov	x16, #0x0                   	// #0
    7710:	b	6fd4 <__addtf3@@GCC_3.0+0x3bc>
    7714:	orr	x1, x4, x13
    7718:	cbz	x1, 70a0 <__addtf3@@GCC_3.0+0x488>
    771c:	tst	x4, #0x4000000000000
    7720:	csinc	w5, w5, wzr, ne  // ne = any
    7724:	cbnz	x0, 7650 <__addtf3@@GCC_3.0+0xa38>
    7728:	b	7520 <__addtf3@@GCC_3.0+0x908>
    772c:	mov	x8, #0x0                   	// #0
    7730:	mov	w1, #0x7fff                	// #32767
    7734:	mov	x2, #0x0                   	// #0
    7738:	b	6db0 <__addtf3@@GCC_3.0+0x198>
    773c:	nop

0000000000007740 <__divtf3@@GCC_3.0>:
    7740:	stp	x29, x30, [sp, #-48]!
    7744:	mov	x29, sp
    7748:	str	q0, [sp, #16]
    774c:	str	q1, [sp, #32]
    7750:	ldp	x2, x0, [sp, #16]
    7754:	ldp	x5, x3, [sp, #32]
    7758:	mrs	x10, fpcr
    775c:	lsr	x1, x0, #63
    7760:	ubfx	x6, x0, #0, #48
    7764:	and	w13, w1, #0xff
    7768:	mov	x14, x1
    776c:	ubfx	x7, x0, #48, #15
    7770:	cbz	w7, 7b90 <__divtf3@@GCC_3.0+0x450>
    7774:	mov	w4, #0x7fff                	// #32767
    7778:	cmp	w7, w4
    777c:	b.eq	7bd8 <__divtf3@@GCC_3.0+0x498>  // b.none
    7780:	and	x7, x7, #0xffff
    7784:	extr	x6, x6, x2, #61
    7788:	mov	x15, #0xffffffffffffc001    	// #-16383
    778c:	orr	x4, x6, #0x8000000000000
    7790:	add	x7, x7, x15
    7794:	lsl	x2, x2, #3
    7798:	mov	x1, #0x0                   	// #0
    779c:	mov	x16, #0x0                   	// #0
    77a0:	mov	w0, #0x0                   	// #0
    77a4:	lsr	x8, x3, #63
    77a8:	ubfx	x6, x3, #0, #48
    77ac:	and	w15, w8, #0xff
    77b0:	ubfx	x9, x3, #48, #15
    77b4:	cbz	w9, 7b4c <__divtf3@@GCC_3.0+0x40c>
    77b8:	mov	w11, #0x7fff                	// #32767
    77bc:	cmp	w9, w11
    77c0:	b.eq	7884 <__divtf3@@GCC_3.0+0x144>  // b.none
    77c4:	and	x9, x9, #0xffff
    77c8:	extr	x6, x6, x5, #61
    77cc:	mov	x12, #0xffffffffffffc001    	// #-16383
    77d0:	orr	x6, x6, #0x8000000000000
    77d4:	add	x9, x9, x12
    77d8:	lsl	x5, x5, #3
    77dc:	sub	x7, x7, x9
    77e0:	mov	x9, #0x0                   	// #0
    77e4:	eor	w11, w13, w15
    77e8:	cmp	x1, #0x9
    77ec:	and	x3, x11, #0xff
    77f0:	mov	x12, x3
    77f4:	b.gt	7b24 <__divtf3@@GCC_3.0+0x3e4>
    77f8:	cmp	x1, #0x7
    77fc:	b.gt	7ce4 <__divtf3@@GCC_3.0+0x5a4>
    7800:	cmp	x1, #0x3
    7804:	b.eq	7820 <__divtf3@@GCC_3.0+0xe0>  // b.none
    7808:	b.le	7af4 <__divtf3@@GCC_3.0+0x3b4>
    780c:	cmp	x1, #0x5
    7810:	b.eq	7b34 <__divtf3@@GCC_3.0+0x3f4>  // b.none
    7814:	b.le	7918 <__divtf3@@GCC_3.0+0x1d8>
    7818:	cmp	x1, #0x6
    781c:	b.eq	78e8 <__divtf3@@GCC_3.0+0x1a8>  // b.none
    7820:	cmp	x9, #0x1
    7824:	b.eq	7c68 <__divtf3@@GCC_3.0+0x528>  // b.none
    7828:	cbz	x9, 783c <__divtf3@@GCC_3.0+0xfc>
    782c:	cmp	x9, #0x2
    7830:	b.eq	7e6c <__divtf3@@GCC_3.0+0x72c>  // b.none
    7834:	cmp	x9, #0x3
    7838:	b.eq	7e54 <__divtf3@@GCC_3.0+0x714>  // b.none
    783c:	mov	x1, #0x3fff                	// #16383
    7840:	mov	x12, x8
    7844:	add	x3, x7, x1
    7848:	cmp	x3, #0x0
    784c:	b.le	7d28 <__divtf3@@GCC_3.0+0x5e8>
    7850:	tst	x5, #0x7
    7854:	b.ne	7c98 <__divtf3@@GCC_3.0+0x558>  // b.any
    7858:	and	w11, w12, #0x1
    785c:	tbz	x6, #52, 7868 <__divtf3@@GCC_3.0+0x128>
    7860:	and	x6, x6, #0xffefffffffffffff
    7864:	add	x3, x7, #0x4, lsl #12
    7868:	mov	x1, #0x7ffe                	// #32766
    786c:	cmp	x3, x1
    7870:	b.gt	7e10 <__divtf3@@GCC_3.0+0x6d0>
    7874:	and	w1, w3, #0x7fff
    7878:	extr	x2, x6, x5, #3
    787c:	ubfx	x6, x6, #3, #48
    7880:	b	78f4 <__divtf3@@GCC_3.0+0x1b4>
    7884:	mov	x9, #0xffffffffffff8001    	// #-32767
    7888:	orr	x3, x6, x5
    788c:	add	x7, x7, x9
    7890:	cbz	x3, 7c0c <__divtf3@@GCC_3.0+0x4cc>
    7894:	tst	x6, #0x800000000000
    7898:	orr	x1, x1, #0x3
    789c:	csinc	w0, w0, wzr, ne  // ne = any
    78a0:	mov	x9, #0x3                   	// #3
    78a4:	eor	w11, w13, w15
    78a8:	cmp	x1, #0x9
    78ac:	and	x3, x11, #0xff
    78b0:	mov	x12, x3
    78b4:	b.le	77f8 <__divtf3@@GCC_3.0+0xb8>
    78b8:	cmp	x1, #0xf
    78bc:	b.ne	7b24 <__divtf3@@GCC_3.0+0x3e4>  // b.any
    78c0:	tbz	x4, #47, 7cd0 <__divtf3@@GCC_3.0+0x590>
    78c4:	tbnz	x6, #47, 7cd0 <__divtf3@@GCC_3.0+0x590>
    78c8:	orr	x6, x6, #0x800000000000
    78cc:	mov	w11, w15
    78d0:	and	x6, x6, #0xffffffffffff
    78d4:	mov	x2, x5
    78d8:	mov	w1, #0x7fff                	// #32767
    78dc:	b	78f4 <__divtf3@@GCC_3.0+0x1b4>
    78e0:	cmp	x1, #0x2
    78e4:	b.ne	7920 <__divtf3@@GCC_3.0+0x1e0>  // b.any
    78e8:	mov	w1, #0x0                   	// #0
    78ec:	mov	x6, #0x0                   	// #0
    78f0:	mov	x2, #0x0                   	// #0
    78f4:	mov	x5, #0x0                   	// #0
    78f8:	orr	w1, w1, w11, lsl #15
    78fc:	bfxil	x5, x6, #0, #48
    7900:	fmov	d0, x2
    7904:	bfi	x5, x1, #48, #16
    7908:	fmov	v0.d[1], x5
    790c:	cbnz	w0, 7b14 <__divtf3@@GCC_3.0+0x3d4>
    7910:	ldp	x29, x30, [sp], #48
    7914:	ret
    7918:	cmp	x1, #0x4
    791c:	b.eq	78e8 <__divtf3@@GCC_3.0+0x1a8>  // b.none
    7920:	cmp	x4, x6
    7924:	b.ls	7c7c <__divtf3@@GCC_3.0+0x53c>  // b.plast
    7928:	lsr	x3, x4, #1
    792c:	extr	x8, x4, x2, #1
    7930:	lsl	x2, x2, #63
    7934:	ubfx	x14, x6, #20, #32
    7938:	extr	x9, x6, x5, #52
    793c:	lsl	x13, x5, #12
    7940:	and	x15, x9, #0xffffffff
    7944:	udiv	x5, x3, x14
    7948:	msub	x3, x5, x14, x3
    794c:	mul	x1, x15, x5
    7950:	extr	x3, x3, x8, #32
    7954:	cmp	x1, x3
    7958:	b.ls	796c <__divtf3@@GCC_3.0+0x22c>  // b.plast
    795c:	adds	x3, x9, x3
    7960:	ccmp	x1, x3, #0x0, cc  // cc = lo, ul, last
    7964:	b.hi	7f4c <__divtf3@@GCC_3.0+0x80c>  // b.pmore
    7968:	sub	x5, x5, #0x1
    796c:	sub	x3, x3, x1
    7970:	mov	x4, x8
    7974:	udiv	x1, x3, x14
    7978:	msub	x3, x1, x14, x3
    797c:	mul	x6, x15, x1
    7980:	bfi	x4, x3, #32, #32
    7984:	cmp	x6, x4
    7988:	b.ls	799c <__divtf3@@GCC_3.0+0x25c>  // b.plast
    798c:	adds	x4, x9, x4
    7990:	ccmp	x6, x4, #0x0, cc  // cc = lo, ul, last
    7994:	b.hi	7f40 <__divtf3@@GCC_3.0+0x800>  // b.pmore
    7998:	sub	x1, x1, #0x1
    799c:	orr	x8, x1, x5, lsl #32
    79a0:	and	x17, x13, #0xffffffff
    79a4:	and	x1, x8, #0xffffffff
    79a8:	lsr	x16, x13, #32
    79ac:	lsr	x5, x8, #32
    79b0:	sub	x4, x4, x6
    79b4:	mov	x18, #0x100000000           	// #4294967296
    79b8:	mul	x3, x1, x17
    79bc:	mul	x30, x5, x17
    79c0:	madd	x6, x16, x1, x30
    79c4:	and	x1, x3, #0xffffffff
    79c8:	mul	x5, x5, x16
    79cc:	add	x3, x6, x3, lsr #32
    79d0:	add	x6, x5, x18
    79d4:	cmp	x30, x3
    79d8:	csel	x5, x6, x5, hi  // hi = pmore
    79dc:	add	x1, x1, x3, lsl #32
    79e0:	add	x5, x5, x3, lsr #32
    79e4:	cmp	x4, x5
    79e8:	b.cc	7cf4 <__divtf3@@GCC_3.0+0x5b4>  // b.lo, b.ul, b.last
    79ec:	ccmp	x2, x1, #0x2, eq  // eq = none
    79f0:	mov	x6, x8
    79f4:	b.cc	7cf4 <__divtf3@@GCC_3.0+0x5b4>  // b.lo, b.ul, b.last
    79f8:	subs	x8, x2, x1
    79fc:	mov	x3, #0x3fff                	// #16383
    7a00:	cmp	x2, x1
    7a04:	add	x3, x7, x3
    7a08:	sbc	x4, x4, x5
    7a0c:	cmp	x9, x4
    7a10:	b.eq	7f58 <__divtf3@@GCC_3.0+0x818>  // b.none
    7a14:	udiv	x5, x4, x14
    7a18:	msub	x4, x5, x14, x4
    7a1c:	mul	x2, x15, x5
    7a20:	extr	x1, x4, x8, #32
    7a24:	cmp	x2, x1
    7a28:	b.ls	7a3c <__divtf3@@GCC_3.0+0x2fc>  // b.plast
    7a2c:	adds	x1, x9, x1
    7a30:	ccmp	x2, x1, #0x0, cc  // cc = lo, ul, last
    7a34:	b.hi	8010 <__divtf3@@GCC_3.0+0x8d0>  // b.pmore
    7a38:	sub	x5, x5, #0x1
    7a3c:	sub	x1, x1, x2
    7a40:	udiv	x2, x1, x14
    7a44:	msub	x1, x2, x14, x1
    7a48:	mul	x15, x15, x2
    7a4c:	bfi	x8, x1, #32, #32
    7a50:	mov	x1, x8
    7a54:	cmp	x15, x8
    7a58:	b.ls	7a6c <__divtf3@@GCC_3.0+0x32c>  // b.plast
    7a5c:	adds	x1, x9, x8
    7a60:	ccmp	x15, x1, #0x0, cc  // cc = lo, ul, last
    7a64:	b.hi	801c <__divtf3@@GCC_3.0+0x8dc>  // b.pmore
    7a68:	sub	x2, x2, #0x1
    7a6c:	orr	x5, x2, x5, lsl #32
    7a70:	mov	x11, #0x100000000           	// #4294967296
    7a74:	and	x4, x5, #0xffffffff
    7a78:	sub	x1, x1, x15
    7a7c:	lsr	x14, x5, #32
    7a80:	mul	x2, x17, x4
    7a84:	mul	x17, x14, x17
    7a88:	madd	x4, x16, x4, x17
    7a8c:	and	x8, x2, #0xffffffff
    7a90:	mul	x16, x16, x14
    7a94:	add	x2, x4, x2, lsr #32
    7a98:	add	x4, x16, x11
    7a9c:	cmp	x17, x2
    7aa0:	csel	x16, x4, x16, hi  // hi = pmore
    7aa4:	add	x4, x8, x2, lsl #32
    7aa8:	add	x16, x16, x2, lsr #32
    7aac:	cmp	x1, x16
    7ab0:	b.cs	7e90 <__divtf3@@GCC_3.0+0x750>  // b.hs, b.nlast
    7ab4:	adds	x2, x9, x1
    7ab8:	sub	x8, x5, #0x1
    7abc:	mov	x1, x2
    7ac0:	b.cs	7ad4 <__divtf3@@GCC_3.0+0x394>  // b.hs, b.nlast
    7ac4:	cmp	x2, x16
    7ac8:	b.cc	7f90 <__divtf3@@GCC_3.0+0x850>  // b.lo, b.ul, b.last
    7acc:	ccmp	x13, x4, #0x2, eq  // eq = none
    7ad0:	b.cc	7f90 <__divtf3@@GCC_3.0+0x850>  // b.lo, b.ul, b.last
    7ad4:	cmp	x13, x4
    7ad8:	mov	x5, x8
    7adc:	cset	w2, ne  // ne = any
    7ae0:	cmp	w2, #0x0
    7ae4:	orr	x2, x5, #0x1
    7ae8:	ccmp	x1, x16, #0x0, eq  // eq = none
    7aec:	csel	x5, x2, x5, ne  // ne = any
    7af0:	b	7848 <__divtf3@@GCC_3.0+0x108>
    7af4:	cmp	x1, #0x1
    7af8:	b.ne	78e0 <__divtf3@@GCC_3.0+0x1a0>  // b.any
    7afc:	mov	x4, #0x0                   	// #0
    7b00:	fmov	d0, x4
    7b04:	lsl	x3, x3, #63
    7b08:	orr	w0, w0, #0x2
    7b0c:	orr	x5, x3, #0x7fff000000000000
    7b10:	fmov	v0.d[1], x5
    7b14:	str	q0, [sp, #16]
    7b18:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    7b1c:	ldr	q0, [sp, #16]
    7b20:	b	7910 <__divtf3@@GCC_3.0+0x1d0>
    7b24:	cmp	x1, #0xb
    7b28:	b.gt	7bf8 <__divtf3@@GCC_3.0+0x4b8>
    7b2c:	cmp	x1, #0xa
    7b30:	b.ne	7820 <__divtf3@@GCC_3.0+0xe0>  // b.any
    7b34:	mov	w11, #0x0                   	// #0
    7b38:	mov	x6, #0xffffffffffff        	// #281474976710655
    7b3c:	mov	x2, #0xffffffffffffffff    	// #-1
    7b40:	mov	w0, #0x1                   	// #1
    7b44:	mov	w1, #0x7fff                	// #32767
    7b48:	b	78f4 <__divtf3@@GCC_3.0+0x1b4>
    7b4c:	orr	x3, x6, x5
    7b50:	cbz	x3, 7c38 <__divtf3@@GCC_3.0+0x4f8>
    7b54:	cbz	x6, 7dec <__divtf3@@GCC_3.0+0x6ac>
    7b58:	clz	x3, x6
    7b5c:	sub	x9, x3, #0xf
    7b60:	add	w12, w9, #0x3
    7b64:	mov	w11, #0x3d                  	// #61
    7b68:	sub	w9, w11, w9
    7b6c:	lsl	x6, x6, x12
    7b70:	lsr	x9, x5, x9
    7b74:	orr	x6, x9, x6
    7b78:	lsl	x5, x5, x12
    7b7c:	add	x7, x3, x7
    7b80:	mov	x11, #0x3fef                	// #16367
    7b84:	mov	x9, #0x0                   	// #0
    7b88:	add	x7, x7, x11
    7b8c:	b	77e4 <__divtf3@@GCC_3.0+0xa4>
    7b90:	orr	x4, x6, x2
    7b94:	cbz	x4, 7c20 <__divtf3@@GCC_3.0+0x4e0>
    7b98:	cbz	x6, 7dc8 <__divtf3@@GCC_3.0+0x688>
    7b9c:	clz	x0, x6
    7ba0:	sub	x4, x0, #0xf
    7ba4:	add	w7, w4, #0x3
    7ba8:	mov	w1, #0x3d                  	// #61
    7bac:	sub	w4, w1, w4
    7bb0:	lsl	x6, x6, x7
    7bb4:	lsr	x4, x2, x4
    7bb8:	orr	x4, x4, x6
    7bbc:	lsl	x2, x2, x7
    7bc0:	mov	x7, #0xffffffffffffc011    	// #-16367
    7bc4:	mov	x1, #0x0                   	// #0
    7bc8:	sub	x7, x7, x0
    7bcc:	mov	x16, #0x0                   	// #0
    7bd0:	mov	w0, #0x0                   	// #0
    7bd4:	b	77a4 <__divtf3@@GCC_3.0+0x64>
    7bd8:	orr	x4, x6, x2
    7bdc:	cbnz	x4, 7c4c <__divtf3@@GCC_3.0+0x50c>
    7be0:	mov	x2, #0x0                   	// #0
    7be4:	mov	x1, #0x8                   	// #8
    7be8:	mov	x7, #0x7fff                	// #32767
    7bec:	mov	x16, #0x2                   	// #2
    7bf0:	mov	w0, #0x0                   	// #0
    7bf4:	b	77a4 <__divtf3@@GCC_3.0+0x64>
    7bf8:	mov	x6, x4
    7bfc:	mov	x5, x2
    7c00:	mov	x8, x14
    7c04:	mov	x9, x16
    7c08:	b	7820 <__divtf3@@GCC_3.0+0xe0>
    7c0c:	orr	x1, x1, #0x2
    7c10:	mov	x6, #0x0                   	// #0
    7c14:	mov	x5, #0x0                   	// #0
    7c18:	mov	x9, #0x2                   	// #2
    7c1c:	b	78a4 <__divtf3@@GCC_3.0+0x164>
    7c20:	mov	x2, #0x0                   	// #0
    7c24:	mov	x1, #0x4                   	// #4
    7c28:	mov	x7, #0x0                   	// #0
    7c2c:	mov	x16, #0x1                   	// #1
    7c30:	mov	w0, #0x0                   	// #0
    7c34:	b	77a4 <__divtf3@@GCC_3.0+0x64>
    7c38:	orr	x1, x1, #0x1
    7c3c:	mov	x6, #0x0                   	// #0
    7c40:	mov	x5, #0x0                   	// #0
    7c44:	mov	x9, #0x1                   	// #1
    7c48:	b	77e4 <__divtf3@@GCC_3.0+0xa4>
    7c4c:	lsr	x0, x6, #47
    7c50:	mov	x4, x6
    7c54:	eor	w0, w0, #0x1
    7c58:	mov	x1, #0xc                   	// #12
    7c5c:	mov	x7, #0x7fff                	// #32767
    7c60:	mov	x16, #0x3                   	// #3
    7c64:	b	77a4 <__divtf3@@GCC_3.0+0x64>
    7c68:	mov	w11, w8
    7c6c:	mov	w1, #0x0                   	// #0
    7c70:	mov	x6, #0x0                   	// #0
    7c74:	mov	x2, #0x0                   	// #0
    7c78:	b	78f4 <__divtf3@@GCC_3.0+0x1b4>
    7c7c:	ccmp	x5, x2, #0x2, eq  // eq = none
    7c80:	b.ls	7928 <__divtf3@@GCC_3.0+0x1e8>  // b.plast
    7c84:	mov	x8, x2
    7c88:	sub	x7, x7, #0x1
    7c8c:	mov	x3, x4
    7c90:	mov	x2, #0x0                   	// #0
    7c94:	b	7934 <__divtf3@@GCC_3.0+0x1f4>
    7c98:	and	x1, x10, #0xc00000
    7c9c:	orr	w0, w0, #0x10
    7ca0:	cmp	x1, #0x400, lsl #12
    7ca4:	b.eq	7ff8 <__divtf3@@GCC_3.0+0x8b8>  // b.none
    7ca8:	cmp	x1, #0x800, lsl #12
    7cac:	b.eq	7f0c <__divtf3@@GCC_3.0+0x7cc>  // b.none
    7cb0:	cbnz	x1, 7858 <__divtf3@@GCC_3.0+0x118>
    7cb4:	and	x1, x5, #0xf
    7cb8:	and	w11, w12, #0x1
    7cbc:	cmp	x1, #0x4
    7cc0:	b.eq	785c <__divtf3@@GCC_3.0+0x11c>  // b.none
    7cc4:	adds	x5, x5, #0x4
    7cc8:	cinc	x6, x6, cs  // cs = hs, nlast
    7ccc:	b	785c <__divtf3@@GCC_3.0+0x11c>
    7cd0:	orr	x6, x4, #0x800000000000
    7cd4:	mov	w11, w13
    7cd8:	and	x6, x6, #0xffffffffffff
    7cdc:	mov	w1, #0x7fff                	// #32767
    7ce0:	b	78f4 <__divtf3@@GCC_3.0+0x1b4>
    7ce4:	mov	w1, #0x7fff                	// #32767
    7ce8:	mov	x6, #0x0                   	// #0
    7cec:	mov	x2, #0x0                   	// #0
    7cf0:	b	78f4 <__divtf3@@GCC_3.0+0x1b4>
    7cf4:	adds	x3, x2, x13
    7cf8:	sub	x6, x8, #0x1
    7cfc:	adc	x4, x4, x9
    7d00:	cset	x18, cs  // cs = hs, nlast
    7d04:	mov	x2, x3
    7d08:	cmp	x9, x4
    7d0c:	b.cs	7e80 <__divtf3@@GCC_3.0+0x740>  // b.hs, b.nlast
    7d10:	cmp	x5, x4
    7d14:	b.ls	7ea8 <__divtf3@@GCC_3.0+0x768>  // b.plast
    7d18:	adds	x2, x13, x3
    7d1c:	sub	x6, x8, #0x2
    7d20:	adc	x4, x4, x9
    7d24:	b	79f8 <__divtf3@@GCC_3.0+0x2b8>
    7d28:	mov	x1, #0x1                   	// #1
    7d2c:	sub	x1, x1, x3
    7d30:	cmp	x1, #0x74
    7d34:	and	w11, w12, #0x1
    7d38:	b.le	7d54 <__divtf3@@GCC_3.0+0x614>
    7d3c:	orr	x2, x5, x6
    7d40:	cbnz	x2, 7f74 <__divtf3@@GCC_3.0+0x834>
    7d44:	orr	w0, w0, #0x8
    7d48:	mov	w1, #0x0                   	// #0
    7d4c:	mov	x6, #0x0                   	// #0
    7d50:	b	7e38 <__divtf3@@GCC_3.0+0x6f8>
    7d54:	cmp	x1, #0x3f
    7d58:	b.le	7eb4 <__divtf3@@GCC_3.0+0x774>
    7d5c:	mov	w2, #0x80                  	// #128
    7d60:	sub	w2, w2, w1
    7d64:	cmp	x1, #0x40
    7d68:	sub	w1, w1, #0x40
    7d6c:	lsl	x2, x6, x2
    7d70:	orr	x2, x5, x2
    7d74:	csel	x5, x2, x5, ne  // ne = any
    7d78:	lsr	x6, x6, x1
    7d7c:	cmp	x5, #0x0
    7d80:	cset	x2, ne  // ne = any
    7d84:	orr	x2, x2, x6
    7d88:	ands	x6, x2, #0x7
    7d8c:	b.eq	7ee8 <__divtf3@@GCC_3.0+0x7a8>  // b.none
    7d90:	mov	x6, #0x0                   	// #0
    7d94:	and	x10, x10, #0xc00000
    7d98:	orr	w0, w0, #0x10
    7d9c:	cmp	x10, #0x400, lsl #12
    7da0:	b.eq	8034 <__divtf3@@GCC_3.0+0x8f4>  // b.none
    7da4:	cmp	x10, #0x800, lsl #12
    7da8:	b.eq	8048 <__divtf3@@GCC_3.0+0x908>  // b.none
    7dac:	cbz	x10, 7fb0 <__divtf3@@GCC_3.0+0x870>
    7db0:	tbnz	x6, #51, 7fc8 <__divtf3@@GCC_3.0+0x888>
    7db4:	orr	w0, w0, #0x8
    7db8:	extr	x2, x6, x2, #3
    7dbc:	mov	w1, #0x0                   	// #0
    7dc0:	ubfx	x6, x6, #3, #48
    7dc4:	b	7e38 <__divtf3@@GCC_3.0+0x6f8>
    7dc8:	clz	x7, x2
    7dcc:	add	x4, x7, #0x31
    7dd0:	add	x0, x7, #0x40
    7dd4:	cmp	x4, #0x3c
    7dd8:	b.le	7ba4 <__divtf3@@GCC_3.0+0x464>
    7ddc:	sub	w4, w4, #0x3d
    7de0:	lsl	x4, x2, x4
    7de4:	mov	x2, #0x0                   	// #0
    7de8:	b	7bc0 <__divtf3@@GCC_3.0+0x480>
    7dec:	clz	x3, x5
    7df0:	add	x9, x3, #0x31
    7df4:	add	x3, x3, #0x40
    7df8:	cmp	x9, #0x3c
    7dfc:	b.le	7b60 <__divtf3@@GCC_3.0+0x420>
    7e00:	sub	w6, w9, #0x3d
    7e04:	lsl	x6, x5, x6
    7e08:	mov	x5, #0x0                   	// #0
    7e0c:	b	7b7c <__divtf3@@GCC_3.0+0x43c>
    7e10:	and	x2, x10, #0xc00000
    7e14:	cmp	x2, #0x400, lsl #12
    7e18:	b.eq	7fdc <__divtf3@@GCC_3.0+0x89c>  // b.none
    7e1c:	cmp	x2, #0x800, lsl #12
    7e20:	b.eq	7f24 <__divtf3@@GCC_3.0+0x7e4>  // b.none
    7e24:	cbz	x2, 7f00 <__divtf3@@GCC_3.0+0x7c0>
    7e28:	mov	x6, #0xffffffffffff        	// #281474976710655
    7e2c:	mov	x2, #0xffffffffffffffff    	// #-1
    7e30:	mov	w3, #0x14                  	// #20
    7e34:	orr	w0, w0, w3
    7e38:	mov	x5, #0x0                   	// #0
    7e3c:	orr	w1, w1, w11, lsl #15
    7e40:	bfxil	x5, x6, #0, #48
    7e44:	fmov	d0, x2
    7e48:	bfi	x5, x1, #48, #16
    7e4c:	fmov	v0.d[1], x5
    7e50:	b	7b14 <__divtf3@@GCC_3.0+0x3d4>
    7e54:	orr	x6, x6, #0x800000000000
    7e58:	mov	w11, w8
    7e5c:	and	x6, x6, #0xffffffffffff
    7e60:	mov	x2, x5
    7e64:	mov	w1, #0x7fff                	// #32767
    7e68:	b	78f4 <__divtf3@@GCC_3.0+0x1b4>
    7e6c:	mov	w11, w8
    7e70:	mov	w1, #0x7fff                	// #32767
    7e74:	mov	x6, #0x0                   	// #0
    7e78:	mov	x2, #0x0                   	// #0
    7e7c:	b	78f4 <__divtf3@@GCC_3.0+0x1b4>
    7e80:	cmp	x18, #0x0
    7e84:	ccmp	x9, x4, #0x0, eq  // eq = none
    7e88:	b.ne	79f8 <__divtf3@@GCC_3.0+0x2b8>  // b.any
    7e8c:	b	7d10 <__divtf3@@GCC_3.0+0x5d0>
    7e90:	cmp	x4, #0x0
    7e94:	cset	w2, ne  // ne = any
    7e98:	cmp	w2, #0x0
    7e9c:	ccmp	x1, x16, #0x0, ne  // ne = any
    7ea0:	b.ne	7ae0 <__divtf3@@GCC_3.0+0x3a0>  // b.any
    7ea4:	b	7ab4 <__divtf3@@GCC_3.0+0x374>
    7ea8:	ccmp	x1, x3, #0x0, eq  // eq = none
    7eac:	b.ls	79f8 <__divtf3@@GCC_3.0+0x2b8>  // b.plast
    7eb0:	b	7d18 <__divtf3@@GCC_3.0+0x5d8>
    7eb4:	mov	w2, #0x40                  	// #64
    7eb8:	sub	w2, w2, w1
    7ebc:	lsr	x4, x5, x1
    7ec0:	lsl	x5, x5, x2
    7ec4:	cmp	x5, #0x0
    7ec8:	cset	x3, ne  // ne = any
    7ecc:	lsl	x2, x6, x2
    7ed0:	orr	x2, x2, x4
    7ed4:	lsr	x6, x6, x1
    7ed8:	orr	x2, x2, x3
    7edc:	tst	x2, #0x7
    7ee0:	b.ne	7d94 <__divtf3@@GCC_3.0+0x654>  // b.any
    7ee4:	tbnz	x6, #51, 8054 <__divtf3@@GCC_3.0+0x914>
    7ee8:	mov	w1, #0x0                   	// #0
    7eec:	extr	x2, x6, x2, #3
    7ef0:	ubfx	x6, x6, #3, #48
    7ef4:	tbz	w10, #11, 78f4 <__divtf3@@GCC_3.0+0x1b4>
    7ef8:	orr	w0, w0, #0x8
    7efc:	b	7e38 <__divtf3@@GCC_3.0+0x6f8>
    7f00:	mov	w1, #0x7fff                	// #32767
    7f04:	mov	x6, #0x0                   	// #0
    7f08:	b	7e30 <__divtf3@@GCC_3.0+0x6f0>
    7f0c:	mov	w11, #0x0                   	// #0
    7f10:	cbz	x12, 785c <__divtf3@@GCC_3.0+0x11c>
    7f14:	adds	x5, x5, #0x8
    7f18:	mov	w11, #0x1                   	// #1
    7f1c:	cinc	x6, x6, cs  // cs = hs, nlast
    7f20:	b	785c <__divtf3@@GCC_3.0+0x11c>
    7f24:	cmp	x12, #0x0
    7f28:	mov	w2, #0x7fff                	// #32767
    7f2c:	mov	x6, #0xffffffffffff        	// #281474976710655
    7f30:	csel	w1, w1, w2, eq  // eq = none
    7f34:	csel	x6, x6, xzr, eq  // eq = none
    7f38:	csetm	x2, eq  // eq = none
    7f3c:	b	7e30 <__divtf3@@GCC_3.0+0x6f0>
    7f40:	sub	x1, x1, #0x2
    7f44:	add	x4, x4, x9
    7f48:	b	799c <__divtf3@@GCC_3.0+0x25c>
    7f4c:	sub	x5, x5, #0x2
    7f50:	add	x3, x3, x9
    7f54:	b	796c <__divtf3@@GCC_3.0+0x22c>
    7f58:	cmp	x3, #0x0
    7f5c:	mov	x5, #0xffffffffffffffff    	// #-1
    7f60:	b.gt	7c98 <__divtf3@@GCC_3.0+0x558>
    7f64:	mov	x1, #0x1                   	// #1
    7f68:	sub	x1, x1, x3
    7f6c:	cmp	x1, #0x74
    7f70:	b.le	7d54 <__divtf3@@GCC_3.0+0x614>
    7f74:	and	x10, x10, #0xc00000
    7f78:	orr	w0, w0, #0x10
    7f7c:	cmp	x10, #0x400, lsl #12
    7f80:	b.eq	8028 <__divtf3@@GCC_3.0+0x8e8>  // b.none
    7f84:	cmp	x10, #0x800, lsl #12
    7f88:	csel	x2, x12, xzr, eq  // eq = none
    7f8c:	b	7d44 <__divtf3@@GCC_3.0+0x604>
    7f90:	lsl	x8, x13, #1
    7f94:	sub	x5, x5, #0x2
    7f98:	cmp	x13, x8
    7f9c:	cinc	x1, x9, hi  // hi = pmore
    7fa0:	cmp	x4, x8
    7fa4:	add	x1, x2, x1
    7fa8:	cset	w2, ne  // ne = any
    7fac:	b	7ae0 <__divtf3@@GCC_3.0+0x3a0>
    7fb0:	and	x1, x2, #0xf
    7fb4:	cmp	x1, #0x4
    7fb8:	b.eq	7fc4 <__divtf3@@GCC_3.0+0x884>  // b.none
    7fbc:	adds	x2, x2, #0x4
    7fc0:	cinc	x6, x6, cs  // cs = hs, nlast
    7fc4:	tbz	x6, #51, 7db4 <__divtf3@@GCC_3.0+0x674>
    7fc8:	orr	w0, w0, #0x8
    7fcc:	mov	w1, #0x1                   	// #1
    7fd0:	mov	x6, #0x0                   	// #0
    7fd4:	mov	x2, #0x0                   	// #0
    7fd8:	b	7e38 <__divtf3@@GCC_3.0+0x6f8>
    7fdc:	cmp	x12, #0x0
    7fe0:	mov	w2, #0x7fff                	// #32767
    7fe4:	mov	x6, #0xffffffffffff        	// #281474976710655
    7fe8:	csel	w1, w1, w2, ne  // ne = any
    7fec:	csel	x6, x6, xzr, ne  // ne = any
    7ff0:	csetm	x2, ne  // ne = any
    7ff4:	b	7e30 <__divtf3@@GCC_3.0+0x6f0>
    7ff8:	mov	w11, #0x1                   	// #1
    7ffc:	cbnz	x12, 785c <__divtf3@@GCC_3.0+0x11c>
    8000:	adds	x5, x5, #0x8
    8004:	mov	w11, #0x0                   	// #0
    8008:	cinc	x6, x6, cs  // cs = hs, nlast
    800c:	b	785c <__divtf3@@GCC_3.0+0x11c>
    8010:	sub	x5, x5, #0x2
    8014:	add	x1, x1, x9
    8018:	b	7a3c <__divtf3@@GCC_3.0+0x2fc>
    801c:	sub	x2, x2, #0x2
    8020:	add	x1, x1, x9
    8024:	b	7a6c <__divtf3@@GCC_3.0+0x32c>
    8028:	mov	x2, #0x1                   	// #1
    802c:	sub	x2, x2, x12
    8030:	b	7d44 <__divtf3@@GCC_3.0+0x604>
    8034:	cbnz	x12, 7fc4 <__divtf3@@GCC_3.0+0x884>
    8038:	adds	x2, x2, #0x8
    803c:	cinc	x6, x6, cs  // cs = hs, nlast
    8040:	tbnz	x6, #51, 7fc8 <__divtf3@@GCC_3.0+0x888>
    8044:	b	7db4 <__divtf3@@GCC_3.0+0x674>
    8048:	cbnz	x12, 8038 <__divtf3@@GCC_3.0+0x8f8>
    804c:	tbnz	x6, #51, 7fc8 <__divtf3@@GCC_3.0+0x888>
    8050:	b	7db4 <__divtf3@@GCC_3.0+0x674>
    8054:	orr	w0, w0, #0x10
    8058:	b	7fc8 <__divtf3@@GCC_3.0+0x888>
    805c:	nop

0000000000008060 <__eqtf2@@GCC_3.0>:
    8060:	stp	x29, x30, [sp, #-48]!
    8064:	mov	x29, sp
    8068:	str	q0, [sp, #16]
    806c:	str	q1, [sp, #32]
    8070:	ldp	x6, x1, [sp, #16]
    8074:	ldp	x7, x0, [sp, #32]
    8078:	mrs	x2, fpcr
    807c:	ubfx	x4, x1, #48, #15
    8080:	lsr	x2, x1, #63
    8084:	lsr	x3, x0, #63
    8088:	ubfx	x9, x0, #0, #48
    808c:	mov	x5, #0x7fff                	// #32767
    8090:	mov	x10, x6
    8094:	cmp	x4, x5
    8098:	and	w2, w2, #0xff
    809c:	ubfx	x1, x1, #0, #48
    80a0:	and	w3, w3, #0xff
    80a4:	ubfx	x0, x0, #48, #15
    80a8:	b.eq	80dc <__eqtf2@@GCC_3.0+0x7c>  // b.none
    80ac:	cmp	x0, x5
    80b0:	b.eq	80c8 <__eqtf2@@GCC_3.0+0x68>  // b.none
    80b4:	cmp	x4, x0
    80b8:	mov	w0, #0x1                   	// #1
    80bc:	b.eq	80f4 <__eqtf2@@GCC_3.0+0x94>  // b.none
    80c0:	ldp	x29, x30, [sp], #48
    80c4:	ret
    80c8:	orr	x8, x9, x7
    80cc:	cbnz	x8, 8158 <__eqtf2@@GCC_3.0+0xf8>
    80d0:	mov	w0, #0x1                   	// #1
    80d4:	ldp	x29, x30, [sp], #48
    80d8:	ret
    80dc:	orr	x5, x1, x6
    80e0:	cbnz	x5, 8128 <__eqtf2@@GCC_3.0+0xc8>
    80e4:	cmp	x0, x4
    80e8:	b.ne	80d0 <__eqtf2@@GCC_3.0+0x70>  // b.any
    80ec:	orr	x8, x9, x7
    80f0:	cbnz	x8, 8158 <__eqtf2@@GCC_3.0+0xf8>
    80f4:	cmp	x1, x9
    80f8:	mov	w0, #0x1                   	// #1
    80fc:	ccmp	x6, x7, #0x0, eq  // eq = none
    8100:	b.ne	80c0 <__eqtf2@@GCC_3.0+0x60>  // b.any
    8104:	cmp	w2, w3
    8108:	mov	w0, #0x0                   	// #0
    810c:	b.eq	80c0 <__eqtf2@@GCC_3.0+0x60>  // b.none
    8110:	mov	w0, #0x1                   	// #1
    8114:	cbnz	x4, 80c0 <__eqtf2@@GCC_3.0+0x60>
    8118:	orr	x1, x1, x10
    811c:	cmp	x1, #0x0
    8120:	cset	w0, ne  // ne = any
    8124:	b	80c0 <__eqtf2@@GCC_3.0+0x60>
    8128:	tst	x1, #0x800000000000
    812c:	b.ne	8144 <__eqtf2@@GCC_3.0+0xe4>  // b.any
    8130:	mov	w0, #0x1                   	// #1
    8134:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    8138:	mov	w0, #0x1                   	// #1
    813c:	ldp	x29, x30, [sp], #48
    8140:	ret
    8144:	cmp	x0, x4
    8148:	mov	w0, #0x1                   	// #1
    814c:	b.ne	80c0 <__eqtf2@@GCC_3.0+0x60>  // b.any
    8150:	orr	x8, x9, x7
    8154:	cbz	x8, 80c0 <__eqtf2@@GCC_3.0+0x60>
    8158:	tst	x9, #0x800000000000
    815c:	b.eq	8130 <__eqtf2@@GCC_3.0+0xd0>  // b.none
    8160:	b	80d0 <__eqtf2@@GCC_3.0+0x70>
    8164:	nop

0000000000008168 <__getf2@@GCC_3.0>:
    8168:	stp	x29, x30, [sp, #-48]!
    816c:	mov	x29, sp
    8170:	str	q0, [sp, #16]
    8174:	str	q1, [sp, #32]
    8178:	ldp	x8, x1, [sp, #16]
    817c:	ldp	x9, x0, [sp, #32]
    8180:	mrs	x2, fpcr
    8184:	ubfx	x4, x1, #48, #15
    8188:	ubfx	x10, x1, #0, #48
    818c:	lsr	x2, x1, #63
    8190:	mov	x7, #0x7fff                	// #32767
    8194:	mov	x5, x8
    8198:	cmp	x4, x7
    819c:	ubfx	x11, x0, #0, #48
    81a0:	ubfx	x6, x0, #48, #15
    81a4:	lsr	x1, x0, #63
    81a8:	mov	x3, x9
    81ac:	b.eq	81e8 <__getf2@@GCC_3.0+0x80>  // b.none
    81b0:	cmp	x6, x7
    81b4:	b.eq	81f8 <__getf2@@GCC_3.0+0x90>  // b.none
    81b8:	cbnz	x4, 8220 <__getf2@@GCC_3.0+0xb8>
    81bc:	orr	x5, x10, x8
    81c0:	cmp	x5, #0x0
    81c4:	cset	w0, eq  // eq = none
    81c8:	cbnz	x6, 81d4 <__getf2@@GCC_3.0+0x6c>
    81cc:	orr	x3, x11, x9
    81d0:	cbz	x3, 8240 <__getf2@@GCC_3.0+0xd8>
    81d4:	cbz	w0, 8204 <__getf2@@GCC_3.0+0x9c>
    81d8:	cmp	x1, #0x0
    81dc:	csinv	w0, w0, wzr, ne  // ne = any
    81e0:	ldp	x29, x30, [sp], #48
    81e4:	ret
    81e8:	orr	x0, x10, x8
    81ec:	cbnz	x0, 824c <__getf2@@GCC_3.0+0xe4>
    81f0:	cmp	x6, x4
    81f4:	b.ne	8220 <__getf2@@GCC_3.0+0xb8>  // b.any
    81f8:	orr	x3, x11, x3
    81fc:	cbnz	x3, 824c <__getf2@@GCC_3.0+0xe4>
    8200:	cbz	x4, 8230 <__getf2@@GCC_3.0+0xc8>
    8204:	cmp	x2, x1
    8208:	b.eq	8260 <__getf2@@GCC_3.0+0xf8>  // b.none
    820c:	cmp	x2, #0x0
    8210:	mov	w0, #0xffffffff            	// #-1
    8214:	cneg	w0, w0, eq  // eq = none
    8218:	ldp	x29, x30, [sp], #48
    821c:	ret
    8220:	cbnz	x6, 8204 <__getf2@@GCC_3.0+0x9c>
    8224:	orr	x3, x11, x3
    8228:	cbnz	x3, 8204 <__getf2@@GCC_3.0+0x9c>
    822c:	b	820c <__getf2@@GCC_3.0+0xa4>
    8230:	orr	x5, x10, x5
    8234:	cmp	x5, #0x0
    8238:	cset	w0, eq  // eq = none
    823c:	b	81d4 <__getf2@@GCC_3.0+0x6c>
    8240:	mov	w0, #0x0                   	// #0
    8244:	cbz	x5, 81e0 <__getf2@@GCC_3.0+0x78>
    8248:	b	820c <__getf2@@GCC_3.0+0xa4>
    824c:	mov	w0, #0x1                   	// #1
    8250:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    8254:	mov	w0, #0xfffffffe            	// #-2
    8258:	ldp	x29, x30, [sp], #48
    825c:	ret
    8260:	cmp	x4, x6
    8264:	b.gt	820c <__getf2@@GCC_3.0+0xa4>
    8268:	b.lt	82a0 <__getf2@@GCC_3.0+0x138>  // b.tstop
    826c:	cmp	x10, x11
    8270:	b.hi	820c <__getf2@@GCC_3.0+0xa4>  // b.pmore
    8274:	cset	w0, eq  // eq = none
    8278:	cmp	w0, #0x0
    827c:	ccmp	x8, x9, #0x0, ne  // ne = any
    8280:	b.hi	820c <__getf2@@GCC_3.0+0xa4>  // b.pmore
    8284:	cmp	x10, x11
    8288:	b.cc	82a0 <__getf2@@GCC_3.0+0x138>  // b.lo, b.ul, b.last
    828c:	cmp	w0, #0x0
    8290:	mov	w0, #0x0                   	// #0
    8294:	ccmp	x8, x9, #0x2, ne  // ne = any
    8298:	b.cs	81e0 <__getf2@@GCC_3.0+0x78>  // b.hs, b.nlast
    829c:	nop
    82a0:	cmp	x2, #0x0
    82a4:	mov	w0, #0x1                   	// #1
    82a8:	cneg	w0, w0, eq  // eq = none
    82ac:	b	81e0 <__getf2@@GCC_3.0+0x78>

00000000000082b0 <__letf2@@GCC_3.0>:
    82b0:	stp	x29, x30, [sp, #-48]!
    82b4:	mov	x29, sp
    82b8:	str	q0, [sp, #16]
    82bc:	str	q1, [sp, #32]
    82c0:	ldp	x8, x1, [sp, #16]
    82c4:	ldp	x9, x0, [sp, #32]
    82c8:	mrs	x2, fpcr
    82cc:	ubfx	x4, x1, #48, #15
    82d0:	ubfx	x10, x1, #0, #48
    82d4:	lsr	x2, x1, #63
    82d8:	mov	x5, #0x7fff                	// #32767
    82dc:	mov	x6, x8
    82e0:	cmp	x4, x5
    82e4:	ubfx	x11, x0, #0, #48
    82e8:	ubfx	x7, x0, #48, #15
    82ec:	lsr	x1, x0, #63
    82f0:	mov	x3, x9
    82f4:	b.eq	832c <__letf2@@GCC_3.0+0x7c>  // b.none
    82f8:	cmp	x7, x5
    82fc:	b.eq	833c <__letf2@@GCC_3.0+0x8c>  // b.none
    8300:	cbnz	x4, 8368 <__letf2@@GCC_3.0+0xb8>
    8304:	orr	x6, x10, x8
    8308:	cmp	x6, #0x0
    830c:	cset	w0, eq  // eq = none
    8310:	cbnz	x7, 8354 <__letf2@@GCC_3.0+0xa4>
    8314:	orr	x3, x11, x9
    8318:	cbnz	x3, 8354 <__letf2@@GCC_3.0+0xa4>
    831c:	mov	w0, #0x0                   	// #0
    8320:	cbnz	x6, 837c <__letf2@@GCC_3.0+0xcc>
    8324:	ldp	x29, x30, [sp], #48
    8328:	ret
    832c:	orr	x0, x10, x8
    8330:	cbnz	x0, 8390 <__letf2@@GCC_3.0+0xe0>
    8334:	cmp	x7, x4
    8338:	b.ne	8368 <__letf2@@GCC_3.0+0xb8>  // b.any
    833c:	orr	x3, x11, x3
    8340:	cbnz	x3, 8390 <__letf2@@GCC_3.0+0xe0>
    8344:	cbnz	x4, 8374 <__letf2@@GCC_3.0+0xc4>
    8348:	orr	x6, x10, x6
    834c:	cmp	x6, #0x0
    8350:	cset	w0, eq  // eq = none
    8354:	cbz	w0, 8374 <__letf2@@GCC_3.0+0xc4>
    8358:	cmp	x1, #0x0
    835c:	csinv	w0, w0, wzr, ne  // ne = any
    8360:	ldp	x29, x30, [sp], #48
    8364:	ret
    8368:	cbnz	x7, 8374 <__letf2@@GCC_3.0+0xc4>
    836c:	orr	x3, x11, x3
    8370:	cbz	x3, 837c <__letf2@@GCC_3.0+0xcc>
    8374:	cmp	x2, x1
    8378:	b.eq	83a4 <__letf2@@GCC_3.0+0xf4>  // b.none
    837c:	cmp	x2, #0x0
    8380:	mov	w0, #0xffffffff            	// #-1
    8384:	cneg	w0, w0, eq  // eq = none
    8388:	ldp	x29, x30, [sp], #48
    838c:	ret
    8390:	mov	w0, #0x1                   	// #1
    8394:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    8398:	mov	w0, #0x2                   	// #2
    839c:	ldp	x29, x30, [sp], #48
    83a0:	ret
    83a4:	cmp	x4, x7
    83a8:	b.gt	837c <__letf2@@GCC_3.0+0xcc>
    83ac:	b.lt	83e0 <__letf2@@GCC_3.0+0x130>  // b.tstop
    83b0:	cmp	x10, x11
    83b4:	b.hi	837c <__letf2@@GCC_3.0+0xcc>  // b.pmore
    83b8:	cset	w0, eq  // eq = none
    83bc:	cmp	w0, #0x0
    83c0:	ccmp	x8, x9, #0x0, ne  // ne = any
    83c4:	b.hi	837c <__letf2@@GCC_3.0+0xcc>  // b.pmore
    83c8:	cmp	x10, x11
    83cc:	b.cc	83e0 <__letf2@@GCC_3.0+0x130>  // b.lo, b.ul, b.last
    83d0:	cmp	w0, #0x0
    83d4:	mov	w0, #0x0                   	// #0
    83d8:	ccmp	x8, x9, #0x2, ne  // ne = any
    83dc:	b.cs	8324 <__letf2@@GCC_3.0+0x74>  // b.hs, b.nlast
    83e0:	cmp	x2, #0x0
    83e4:	mov	w0, #0x1                   	// #1
    83e8:	cneg	w0, w0, eq  // eq = none
    83ec:	b	8324 <__letf2@@GCC_3.0+0x74>

00000000000083f0 <__multf3@@GCC_3.0>:
    83f0:	stp	x29, x30, [sp, #-80]!
    83f4:	mov	x29, sp
    83f8:	str	q0, [sp, #48]
    83fc:	str	q1, [sp, #64]
    8400:	ldp	x1, x0, [sp, #48]
    8404:	ldp	x6, x2, [sp, #64]
    8408:	mrs	x11, fpcr
    840c:	lsr	x3, x0, #63
    8410:	ubfx	x7, x0, #0, #48
    8414:	and	w12, w3, #0xff
    8418:	mov	x14, x3
    841c:	ubfx	x3, x0, #48, #15
    8420:	cbz	w3, 87c8 <__multf3@@GCC_3.0+0x3d8>
    8424:	mov	w4, #0x7fff                	// #32767
    8428:	cmp	w3, w4
    842c:	b.eq	886c <__multf3@@GCC_3.0+0x47c>  // b.none
    8430:	and	x3, x3, #0xffff
    8434:	extr	x4, x7, x1, #61
    8438:	mov	x18, #0xffffffffffffc001    	// #-16383
    843c:	orr	x7, x4, #0x8000000000000
    8440:	add	x3, x3, x18
    8444:	lsl	x5, x1, #3
    8448:	mov	x16, #0x0                   	// #0
    844c:	mov	x1, #0x0                   	// #0
    8450:	mov	w0, #0x0                   	// #0
    8454:	lsr	x8, x2, #63
    8458:	ubfx	x4, x2, #0, #48
    845c:	and	w15, w8, #0xff
    8460:	mov	x13, x8
    8464:	ubfx	x9, x2, #48, #15
    8468:	cbz	w9, 8828 <__multf3@@GCC_3.0+0x438>
    846c:	mov	w8, #0x7fff                	// #32767
    8470:	cmp	w9, w8
    8474:	b.eq	84f8 <__multf3@@GCC_3.0+0x108>  // b.none
    8478:	and	x9, x9, #0xffff
    847c:	mov	x17, #0xffffffffffffc001    	// #-16383
    8480:	add	x9, x9, x17
    8484:	extr	x2, x4, x6, #61
    8488:	add	x9, x9, x3
    848c:	lsl	x6, x6, #3
    8490:	orr	x4, x2, #0x8000000000000
    8494:	mov	x2, #0x0                   	// #0
    8498:	eor	w8, w12, w15
    849c:	cmp	x1, #0xa
    84a0:	and	w10, w8, #0xff
    84a4:	add	x3, x9, #0x1
    84a8:	and	x8, x8, #0xff
    84ac:	b.le	8530 <__multf3@@GCC_3.0+0x140>
    84b0:	cmp	x1, #0xb
    84b4:	b.eq	8bc8 <__multf3@@GCC_3.0+0x7d8>  // b.none
    84b8:	mov	w15, w12
    84bc:	mov	x13, x14
    84c0:	mov	w10, w15
    84c4:	cmp	x16, #0x2
    84c8:	b.eq	888c <__multf3@@GCC_3.0+0x49c>  // b.none
    84cc:	mov	x4, x7
    84d0:	mov	x6, x5
    84d4:	mov	x2, x16
    84d8:	mov	x8, x13
    84dc:	cmp	x2, #0x3
    84e0:	b.ne	854c <__multf3@@GCC_3.0+0x15c>  // b.any
    84e4:	orr	x4, x4, #0x800000000000
    84e8:	mov	x5, x6
    84ec:	and	x4, x4, #0xffffffffffff
    84f0:	mov	w1, #0x7fff                	// #32767
    84f4:	b	8560 <__multf3@@GCC_3.0+0x170>
    84f8:	mov	x8, #0x7fff                	// #32767
    84fc:	orr	x2, x4, x6
    8500:	add	x9, x3, x8
    8504:	cbnz	x2, 8584 <__multf3@@GCC_3.0+0x194>
    8508:	eor	w8, w12, w15
    850c:	orr	x1, x1, #0x2
    8510:	and	w10, w8, #0xff
    8514:	cmp	x1, #0xa
    8518:	add	x3, x3, #0x8, lsl #12
    851c:	and	x8, x8, #0xff
    8520:	mov	x6, #0x0                   	// #0
    8524:	b.gt	8b3c <__multf3@@GCC_3.0+0x74c>
    8528:	mov	x4, #0x0                   	// #0
    852c:	mov	x2, #0x2                   	// #2
    8530:	cmp	x1, #0x2
    8534:	b.gt	85ac <__multf3@@GCC_3.0+0x1bc>
    8538:	sub	x1, x1, #0x1
    853c:	cmp	x1, #0x1
    8540:	b.hi	85e8 <__multf3@@GCC_3.0+0x1f8>  // b.pmore
    8544:	cmp	x2, #0x2
    8548:	b.eq	888c <__multf3@@GCC_3.0+0x49c>  // b.none
    854c:	cmp	x2, #0x1
    8550:	b.ne	8748 <__multf3@@GCC_3.0+0x358>  // b.any
    8554:	mov	w1, #0x0                   	// #0
    8558:	mov	x4, #0x0                   	// #0
    855c:	mov	x5, #0x0                   	// #0
    8560:	mov	x3, #0x0                   	// #0
    8564:	orr	w1, w1, w10, lsl #15
    8568:	bfxil	x3, x4, #0, #48
    856c:	fmov	d0, x5
    8570:	bfi	x3, x1, #48, #16
    8574:	fmov	v0.d[1], x3
    8578:	cbnz	w0, 89b8 <__multf3@@GCC_3.0+0x5c8>
    857c:	ldp	x29, x30, [sp], #80
    8580:	ret
    8584:	tst	x4, #0x800000000000
    8588:	eor	w8, w12, w15
    858c:	orr	x1, x1, #0x3
    8590:	csinc	w0, w0, wzr, ne  // ne = any
    8594:	and	w10, w8, #0xff
    8598:	add	x3, x3, #0x8, lsl #12
    859c:	cmp	x1, #0xa
    85a0:	and	x8, x8, #0xff
    85a4:	mov	x2, #0x3                   	// #3
    85a8:	b.gt	8bbc <__multf3@@GCC_3.0+0x7cc>
    85ac:	mov	x12, #0x1                   	// #1
    85b0:	mov	x14, #0x530                 	// #1328
    85b4:	lsl	x1, x12, x1
    85b8:	tst	x1, x14
    85bc:	b.ne	87bc <__multf3@@GCC_3.0+0x3cc>  // b.any
    85c0:	mov	x14, #0x240                 	// #576
    85c4:	tst	x1, x14
    85c8:	b.ne	87a4 <__multf3@@GCC_3.0+0x3b4>  // b.any
    85cc:	mov	x12, #0x88                  	// #136
    85d0:	tst	x1, x12
    85d4:	b.eq	85e8 <__multf3@@GCC_3.0+0x1f8>  // b.none
    85d8:	mov	x7, x4
    85dc:	mov	x5, x6
    85e0:	mov	x16, x2
    85e4:	b	84c0 <__multf3@@GCC_3.0+0xd0>
    85e8:	lsr	x13, x5, #32
    85ec:	and	x12, x6, #0xffffffff
    85f0:	and	x15, x5, #0xffffffff
    85f4:	lsr	x6, x6, #32
    85f8:	and	x18, x4, #0xffffffff
    85fc:	lsr	x2, x4, #32
    8600:	mul	x4, x13, x12
    8604:	stp	x21, x22, [sp, #32]
    8608:	lsr	x22, x7, #32
    860c:	and	x5, x7, #0xffffffff
    8610:	mul	x16, x12, x15
    8614:	madd	x7, x6, x15, x4
    8618:	stp	x19, x20, [sp, #16]
    861c:	mul	x1, x13, x18
    8620:	mul	x17, x15, x18
    8624:	and	x30, x16, #0xffffffff
    8628:	madd	x15, x2, x15, x1
    862c:	add	x16, x7, x16, lsr #32
    8630:	mul	x21, x22, x12
    8634:	cmp	x4, x16
    8638:	mul	x20, x22, x18
    863c:	mov	x14, #0x100000000           	// #4294967296
    8640:	mul	x19, x13, x6
    8644:	add	x15, x15, x17, lsr #32
    8648:	mul	x12, x12, x5
    864c:	and	x17, x17, #0xffffffff
    8650:	mul	x18, x5, x18
    8654:	add	x4, x19, x14
    8658:	madd	x7, x6, x5, x21
    865c:	csel	x19, x4, x19, hi  // hi = pmore
    8660:	madd	x5, x2, x5, x20
    8664:	cmp	x1, x15
    8668:	mul	x13, x13, x2
    866c:	add	x17, x17, x15, lsl #32
    8670:	mul	x6, x6, x22
    8674:	add	x7, x7, x12, lsr #32
    8678:	add	x5, x5, x18, lsr #32
    867c:	add	x4, x13, x14
    8680:	mul	x2, x2, x22
    8684:	csel	x13, x4, x13, hi  // hi = pmore
    8688:	and	x1, x18, #0xffffffff
    868c:	cmp	x21, x7
    8690:	add	x4, x6, x14
    8694:	add	x30, x30, x16, lsl #32
    8698:	csel	x6, x4, x6, hi  // hi = pmore
    869c:	add	x13, x13, x15, lsr #32
    86a0:	cmp	x20, x5
    86a4:	add	x1, x1, x5, lsl #32
    86a8:	add	x16, x17, x16, lsr #32
    86ac:	add	x14, x2, x14
    86b0:	csel	x2, x14, x2, hi  // hi = pmore
    86b4:	add	x16, x19, x16
    86b8:	adds	x1, x1, x13
    86bc:	and	x12, x12, #0xffffffff
    86c0:	cset	x13, cs  // cs = hs, nlast
    86c4:	cmp	x16, x17
    86c8:	cset	x4, cc  // cc = lo, ul, last
    86cc:	add	x12, x12, x7, lsl #32
    86d0:	adds	x1, x1, x4
    86d4:	lsr	x5, x5, #32
    86d8:	cset	x4, cs  // cs = hs, nlast
    86dc:	cmp	x13, #0x0
    86e0:	ccmp	x4, #0x0, #0x0, eq  // eq = none
    86e4:	add	x7, x6, x7, lsr #32
    86e8:	cinc	x5, x5, ne  // ne = any
    86ec:	adds	x6, x16, x12
    86f0:	cset	x4, cs  // cs = hs, nlast
    86f4:	adds	x1, x1, x7
    86f8:	cset	x7, cs  // cs = hs, nlast
    86fc:	adds	x4, x1, x4
    8700:	cset	x1, cs  // cs = hs, nlast
    8704:	cmp	x7, #0x0
    8708:	orr	x30, x30, x6, lsl #13
    870c:	ccmp	x1, #0x0, #0x0, eq  // eq = none
    8710:	cinc	x1, x2, ne  // ne = any
    8714:	cmp	x30, #0x0
    8718:	add	x1, x1, x5
    871c:	cset	x2, ne  // ne = any
    8720:	orr	x6, x2, x6, lsr #51
    8724:	orr	x6, x6, x4, lsl #13
    8728:	extr	x4, x1, x4, #51
    872c:	tbz	x1, #39, 8a40 <__multf3@@GCC_3.0+0x650>
    8730:	ldp	x19, x20, [sp, #16]
    8734:	and	x1, x6, #0x1
    8738:	ldp	x21, x22, [sp, #32]
    873c:	orr	x6, x1, x6, lsr #1
    8740:	orr	x6, x6, x4, lsl #63
    8744:	lsr	x4, x4, #1
    8748:	mov	x1, #0x3fff                	// #16383
    874c:	add	x2, x3, x1
    8750:	cmp	x2, #0x0
    8754:	b.le	88ec <__multf3@@GCC_3.0+0x4fc>
    8758:	tst	x6, #0x7
    875c:	b.eq	877c <__multf3@@GCC_3.0+0x38c>  // b.none
    8760:	and	x1, x11, #0xc00000
    8764:	orr	w0, w0, #0x10
    8768:	cmp	x1, #0x400, lsl #12
    876c:	b.eq	8b34 <__multf3@@GCC_3.0+0x744>  // b.none
    8770:	cmp	x1, #0x800, lsl #12
    8774:	b.eq	8adc <__multf3@@GCC_3.0+0x6ec>  // b.none
    8778:	cbz	x1, 8ac4 <__multf3@@GCC_3.0+0x6d4>
    877c:	tbz	x4, #52, 8788 <__multf3@@GCC_3.0+0x398>
    8780:	and	x4, x4, #0xffefffffffffffff
    8784:	add	x2, x3, #0x4, lsl #12
    8788:	mov	x1, #0x7ffe                	// #32766
    878c:	cmp	x2, x1
    8790:	b.gt	8a14 <__multf3@@GCC_3.0+0x624>
    8794:	and	w1, w2, #0x7fff
    8798:	extr	x5, x4, x6, #3
    879c:	ubfx	x4, x4, #3, #48
    87a0:	b	8560 <__multf3@@GCC_3.0+0x170>
    87a4:	mov	w0, w12
    87a8:	mov	w10, #0x0                   	// #0
    87ac:	mov	x4, #0xffffffffffff        	// #281474976710655
    87b0:	mov	x5, #0xffffffffffffffff    	// #-1
    87b4:	mov	w1, #0x7fff                	// #32767
    87b8:	b	8560 <__multf3@@GCC_3.0+0x170>
    87bc:	mov	w15, w10
    87c0:	mov	x13, x8
    87c4:	b	84c0 <__multf3@@GCC_3.0+0xd0>
    87c8:	orr	x5, x7, x1
    87cc:	cbz	x5, 88d4 <__multf3@@GCC_3.0+0x4e4>
    87d0:	cbz	x7, 89f0 <__multf3@@GCC_3.0+0x600>
    87d4:	clz	x0, x7
    87d8:	sub	x4, x0, #0xf
    87dc:	add	w5, w4, #0x3
    87e0:	mov	w3, #0x3d                  	// #61
    87e4:	sub	w3, w3, w4
    87e8:	lsl	x4, x7, x5
    87ec:	lsr	x3, x1, x3
    87f0:	orr	x7, x3, x4
    87f4:	lsl	x5, x1, x5
    87f8:	lsr	x8, x2, #63
    87fc:	mov	x3, #0xffffffffffffc011    	// #-16367
    8800:	ubfx	x4, x2, #0, #48
    8804:	sub	x3, x3, x0
    8808:	and	w15, w8, #0xff
    880c:	mov	x13, x8
    8810:	ubfx	x9, x2, #48, #15
    8814:	mov	x1, #0x0                   	// #0
    8818:	mov	x16, #0x0                   	// #0
    881c:	mov	w0, #0x0                   	// #0
    8820:	cbnz	w9, 846c <__multf3@@GCC_3.0+0x7c>
    8824:	nop
    8828:	orr	x2, x4, x6
    882c:	cbz	x2, 889c <__multf3@@GCC_3.0+0x4ac>
    8830:	cbz	x4, 89cc <__multf3@@GCC_3.0+0x5dc>
    8834:	clz	x9, x4
    8838:	sub	x2, x9, #0xf
    883c:	add	w10, w2, #0x3
    8840:	mov	w8, #0x3d                  	// #61
    8844:	sub	w8, w8, w2
    8848:	lsl	x2, x4, x10
    884c:	lsr	x8, x6, x8
    8850:	orr	x4, x8, x2
    8854:	lsl	x6, x6, x10
    8858:	sub	x9, x3, x9
    885c:	mov	x10, #0xffffffffffffc011    	// #-16367
    8860:	mov	x2, #0x0                   	// #0
    8864:	add	x9, x9, x10
    8868:	b	8498 <__multf3@@GCC_3.0+0xa8>
    886c:	orr	x5, x7, x1
    8870:	cbnz	x5, 88b4 <__multf3@@GCC_3.0+0x4c4>
    8874:	mov	x7, #0x0                   	// #0
    8878:	mov	x1, #0x8                   	// #8
    887c:	mov	x3, #0x7fff                	// #32767
    8880:	mov	x16, #0x2                   	// #2
    8884:	mov	w0, #0x0                   	// #0
    8888:	b	8454 <__multf3@@GCC_3.0+0x64>
    888c:	mov	w1, #0x7fff                	// #32767
    8890:	mov	x4, #0x0                   	// #0
    8894:	mov	x5, #0x0                   	// #0
    8898:	b	8560 <__multf3@@GCC_3.0+0x170>
    889c:	orr	x1, x1, #0x1
    88a0:	mov	x9, x3
    88a4:	mov	x4, #0x0                   	// #0
    88a8:	mov	x6, #0x0                   	// #0
    88ac:	mov	x2, #0x1                   	// #1
    88b0:	b	8498 <__multf3@@GCC_3.0+0xa8>
    88b4:	lsr	x0, x7, #47
    88b8:	mov	x5, x1
    88bc:	eor	x0, x0, #0x1
    88c0:	mov	x1, #0xc                   	// #12
    88c4:	and	w0, w0, #0x1
    88c8:	mov	x3, #0x7fff                	// #32767
    88cc:	mov	x16, #0x3                   	// #3
    88d0:	b	8454 <__multf3@@GCC_3.0+0x64>
    88d4:	mov	x7, #0x0                   	// #0
    88d8:	mov	x1, #0x4                   	// #4
    88dc:	mov	x3, #0x0                   	// #0
    88e0:	mov	x16, #0x1                   	// #1
    88e4:	mov	w0, #0x0                   	// #0
    88e8:	b	8454 <__multf3@@GCC_3.0+0x64>
    88ec:	mov	x1, #0x1                   	// #1
    88f0:	sub	x2, x1, x2
    88f4:	cmp	x2, #0x74
    88f8:	b.gt	8970 <__multf3@@GCC_3.0+0x580>
    88fc:	cmp	x2, #0x3f
    8900:	b.le	8a50 <__multf3@@GCC_3.0+0x660>
    8904:	mov	w1, #0x80                  	// #128
    8908:	sub	w1, w1, w2
    890c:	cmp	x2, #0x40
    8910:	sub	w2, w2, #0x40
    8914:	lsl	x1, x4, x1
    8918:	orr	x1, x6, x1
    891c:	csel	x6, x1, x6, ne  // ne = any
    8920:	lsr	x2, x4, x2
    8924:	cmp	x6, #0x0
    8928:	cset	x5, ne  // ne = any
    892c:	orr	x5, x5, x2
    8930:	ands	x2, x5, #0x7
    8934:	b.eq	8a84 <__multf3@@GCC_3.0+0x694>  // b.none
    8938:	mov	x2, #0x0                   	// #0
    893c:	and	x11, x11, #0xc00000
    8940:	orr	w0, w0, #0x10
    8944:	cmp	x11, #0x400, lsl #12
    8948:	b.eq	8b94 <__multf3@@GCC_3.0+0x7a4>  // b.none
    894c:	cmp	x11, #0x800, lsl #12
    8950:	b.eq	8ba8 <__multf3@@GCC_3.0+0x7b8>  // b.none
    8954:	cbz	x11, 8aec <__multf3@@GCC_3.0+0x6fc>
    8958:	tbnz	x2, #51, 8b04 <__multf3@@GCC_3.0+0x714>
    895c:	ubfx	x4, x2, #3, #48
    8960:	extr	x5, x2, x5, #3
    8964:	orr	w0, w0, #0x8
    8968:	mov	w1, #0x0                   	// #0
    896c:	b	89a0 <__multf3@@GCC_3.0+0x5b0>
    8970:	orr	x5, x6, x4
    8974:	cbz	x5, 8994 <__multf3@@GCC_3.0+0x5a4>
    8978:	and	x11, x11, #0xc00000
    897c:	orr	w0, w0, #0x10
    8980:	cmp	x11, #0x400, lsl #12
    8984:	sub	x5, x1, x8
    8988:	b.eq	8994 <__multf3@@GCC_3.0+0x5a4>  // b.none
    898c:	cmp	x11, #0x800, lsl #12
    8990:	csel	x5, x8, xzr, eq  // eq = none
    8994:	orr	w0, w0, #0x8
    8998:	mov	w1, #0x0                   	// #0
    899c:	mov	x4, #0x0                   	// #0
    89a0:	mov	x3, #0x0                   	// #0
    89a4:	fmov	d0, x5
    89a8:	bfxil	x3, x4, #0, #48
    89ac:	bfi	x3, x1, #48, #15
    89b0:	bfi	x3, x10, #63, #1
    89b4:	fmov	v0.d[1], x3
    89b8:	str	q0, [sp, #48]
    89bc:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    89c0:	ldr	q0, [sp, #48]
    89c4:	ldp	x29, x30, [sp], #80
    89c8:	ret
    89cc:	clz	x9, x6
    89d0:	add	x2, x9, #0x31
    89d4:	add	x9, x9, #0x40
    89d8:	cmp	x2, #0x3c
    89dc:	b.le	883c <__multf3@@GCC_3.0+0x44c>
    89e0:	sub	w2, w2, #0x3d
    89e4:	lsl	x4, x6, x2
    89e8:	mov	x6, #0x0                   	// #0
    89ec:	b	8858 <__multf3@@GCC_3.0+0x468>
    89f0:	clz	x3, x1
    89f4:	add	x4, x3, #0x31
    89f8:	add	x0, x3, #0x40
    89fc:	cmp	x4, #0x3c
    8a00:	b.le	87dc <__multf3@@GCC_3.0+0x3ec>
    8a04:	sub	w4, w4, #0x3d
    8a08:	mov	x5, #0x0                   	// #0
    8a0c:	lsl	x7, x1, x4
    8a10:	b	87f8 <__multf3@@GCC_3.0+0x408>
    8a14:	and	x5, x11, #0xc00000
    8a18:	cmp	x5, #0x400, lsl #12
    8a1c:	b.eq	8b18 <__multf3@@GCC_3.0+0x728>  // b.none
    8a20:	cmp	x5, #0x800, lsl #12
    8a24:	b.eq	8aa8 <__multf3@@GCC_3.0+0x6b8>  // b.none
    8a28:	cbz	x5, 8a9c <__multf3@@GCC_3.0+0x6ac>
    8a2c:	mov	x4, #0xffffffffffff        	// #281474976710655
    8a30:	mov	x5, #0xffffffffffffffff    	// #-1
    8a34:	mov	w2, #0x14                  	// #20
    8a38:	orr	w0, w0, w2
    8a3c:	b	89a0 <__multf3@@GCC_3.0+0x5b0>
    8a40:	mov	x3, x9
    8a44:	ldp	x19, x20, [sp, #16]
    8a48:	ldp	x21, x22, [sp, #32]
    8a4c:	b	8748 <__multf3@@GCC_3.0+0x358>
    8a50:	mov	w1, #0x40                  	// #64
    8a54:	sub	w1, w1, w2
    8a58:	lsr	x3, x6, x2
    8a5c:	lsl	x6, x6, x1
    8a60:	cmp	x6, #0x0
    8a64:	lsl	x5, x4, x1
    8a68:	cset	x1, ne  // ne = any
    8a6c:	orr	x5, x5, x3
    8a70:	lsr	x2, x4, x2
    8a74:	orr	x5, x5, x1
    8a78:	tst	x5, #0x7
    8a7c:	b.ne	893c <__multf3@@GCC_3.0+0x54c>  // b.any
    8a80:	tbnz	x2, #51, 8bb4 <__multf3@@GCC_3.0+0x7c4>
    8a84:	ubfx	x4, x2, #3, #48
    8a88:	extr	x5, x2, x5, #3
    8a8c:	mov	w1, #0x0                   	// #0
    8a90:	tbz	w11, #11, 8560 <__multf3@@GCC_3.0+0x170>
    8a94:	orr	w0, w0, #0x8
    8a98:	b	89a0 <__multf3@@GCC_3.0+0x5b0>
    8a9c:	mov	w1, #0x7fff                	// #32767
    8aa0:	mov	x4, #0x0                   	// #0
    8aa4:	b	8a34 <__multf3@@GCC_3.0+0x644>
    8aa8:	cmp	x8, #0x0
    8aac:	mov	w2, #0x7fff                	// #32767
    8ab0:	mov	x4, #0xffffffffffff        	// #281474976710655
    8ab4:	csel	w1, w1, w2, eq  // eq = none
    8ab8:	csel	x4, x4, xzr, eq  // eq = none
    8abc:	csetm	x5, eq  // eq = none
    8ac0:	b	8a34 <__multf3@@GCC_3.0+0x644>
    8ac4:	and	x1, x6, #0xf
    8ac8:	cmp	x1, #0x4
    8acc:	b.eq	877c <__multf3@@GCC_3.0+0x38c>  // b.none
    8ad0:	adds	x6, x6, #0x4
    8ad4:	cinc	x4, x4, cs  // cs = hs, nlast
    8ad8:	b	877c <__multf3@@GCC_3.0+0x38c>
    8adc:	cbz	x8, 877c <__multf3@@GCC_3.0+0x38c>
    8ae0:	adds	x6, x6, #0x8
    8ae4:	cinc	x4, x4, cs  // cs = hs, nlast
    8ae8:	b	877c <__multf3@@GCC_3.0+0x38c>
    8aec:	and	x1, x5, #0xf
    8af0:	cmp	x1, #0x4
    8af4:	b.eq	8b00 <__multf3@@GCC_3.0+0x710>  // b.none
    8af8:	adds	x5, x5, #0x4
    8afc:	cinc	x2, x2, cs  // cs = hs, nlast
    8b00:	tbz	x2, #51, 895c <__multf3@@GCC_3.0+0x56c>
    8b04:	orr	w0, w0, #0x8
    8b08:	mov	w1, #0x1                   	// #1
    8b0c:	mov	x4, #0x0                   	// #0
    8b10:	mov	x5, #0x0                   	// #0
    8b14:	b	89a0 <__multf3@@GCC_3.0+0x5b0>
    8b18:	cmp	x8, #0x0
    8b1c:	mov	w2, #0x7fff                	// #32767
    8b20:	mov	x4, #0xffffffffffff        	// #281474976710655
    8b24:	csel	w1, w1, w2, ne  // ne = any
    8b28:	csel	x4, x4, xzr, ne  // ne = any
    8b2c:	csetm	x5, ne  // ne = any
    8b30:	b	8a34 <__multf3@@GCC_3.0+0x644>
    8b34:	cbnz	x8, 877c <__multf3@@GCC_3.0+0x38c>
    8b38:	b	8ae0 <__multf3@@GCC_3.0+0x6f0>
    8b3c:	mov	x4, #0x2                   	// #2
    8b40:	cmp	x1, #0xf
    8b44:	b.ne	8b68 <__multf3@@GCC_3.0+0x778>  // b.any
    8b48:	tbz	x7, #47, 8b80 <__multf3@@GCC_3.0+0x790>
    8b4c:	tbnz	x2, #47, 8b80 <__multf3@@GCC_3.0+0x790>
    8b50:	orr	x4, x2, #0x800000000000
    8b54:	mov	w10, w15
    8b58:	and	x4, x4, #0xffffffffffff
    8b5c:	mov	x5, x6
    8b60:	mov	w1, #0x7fff                	// #32767
    8b64:	b	8560 <__multf3@@GCC_3.0+0x170>
    8b68:	cmp	x1, #0xb
    8b6c:	b.ne	84b8 <__multf3@@GCC_3.0+0xc8>  // b.any
    8b70:	mov	x7, x2
    8b74:	mov	x5, x6
    8b78:	mov	x16, x4
    8b7c:	b	84c0 <__multf3@@GCC_3.0+0xd0>
    8b80:	orr	x4, x7, #0x800000000000
    8b84:	mov	w10, w12
    8b88:	and	x4, x4, #0xffffffffffff
    8b8c:	mov	w1, #0x7fff                	// #32767
    8b90:	b	8560 <__multf3@@GCC_3.0+0x170>
    8b94:	cbnz	x8, 8b00 <__multf3@@GCC_3.0+0x710>
    8b98:	adds	x5, x5, #0x8
    8b9c:	cinc	x2, x2, cs  // cs = hs, nlast
    8ba0:	tbnz	x2, #51, 8b04 <__multf3@@GCC_3.0+0x714>
    8ba4:	b	895c <__multf3@@GCC_3.0+0x56c>
    8ba8:	cbnz	x8, 8b98 <__multf3@@GCC_3.0+0x7a8>
    8bac:	tbnz	x2, #51, 8b04 <__multf3@@GCC_3.0+0x714>
    8bb0:	b	895c <__multf3@@GCC_3.0+0x56c>
    8bb4:	orr	w0, w0, #0x10
    8bb8:	b	8b04 <__multf3@@GCC_3.0+0x714>
    8bbc:	mov	x2, x4
    8bc0:	mov	x4, #0x3                   	// #3
    8bc4:	b	8b40 <__multf3@@GCC_3.0+0x750>
    8bc8:	mov	w10, w15
    8bcc:	mov	x8, x13
    8bd0:	b	84dc <__multf3@@GCC_3.0+0xec>
    8bd4:	nop

0000000000008bd8 <__negtf2@@GCC_3.0>:
    8bd8:	sub	sp, sp, #0x10
    8bdc:	mov	x1, #0x0                   	// #0
    8be0:	str	q0, [sp]
    8be4:	ldp	x3, x2, [sp]
    8be8:	add	sp, sp, #0x10
    8bec:	mov	x0, x3
    8bf0:	lsr	x3, x2, #48
    8bf4:	bfxil	x1, x2, #0, #48
    8bf8:	fmov	d0, x0
    8bfc:	eor	w2, w3, #0x8000
    8c00:	bfi	x1, x2, #48, #16
    8c04:	fmov	v0.d[1], x1
    8c08:	ret
    8c0c:	nop

0000000000008c10 <__subtf3@@GCC_3.0>:
    8c10:	stp	x29, x30, [sp, #-48]!
    8c14:	mov	x29, sp
    8c18:	str	q0, [sp, #16]
    8c1c:	str	q1, [sp, #32]
    8c20:	ldp	x5, x1, [sp, #16]
    8c24:	ldp	x0, x2, [sp, #32]
    8c28:	mrs	x12, fpcr
    8c2c:	mov	x9, x0
    8c30:	ubfx	x0, x2, #48, #15
    8c34:	lsr	x6, x1, #63
    8c38:	ubfx	x7, x1, #48, #15
    8c3c:	ubfiz	x3, x1, #3, #48
    8c40:	mov	x13, x0
    8c44:	lsr	x4, x2, #63
    8c48:	ubfiz	x2, x2, #3, #48
    8c4c:	mov	x11, x6
    8c50:	and	w8, w6, #0xff
    8c54:	mov	x14, x6
    8c58:	sub	w0, w7, w0
    8c5c:	mov	x1, x7
    8c60:	orr	x3, x3, x5, lsr #61
    8c64:	mov	x7, #0x7fff                	// #32767
    8c68:	and	w4, w4, #0xff
    8c6c:	cmp	x13, x7
    8c70:	orr	x2, x2, x9, lsr #61
    8c74:	lsl	x6, x5, #3
    8c78:	lsl	x10, x9, #3
    8c7c:	b.eq	8dec <__subtf3@@GCC_3.0+0x1dc>  // b.none
    8c80:	eor	w4, w4, #0x1
    8c84:	and	x4, x4, #0xff
    8c88:	cmp	x11, x4
    8c8c:	b.eq	8e84 <__subtf3@@GCC_3.0+0x274>  // b.none
    8c90:	cmp	w0, #0x0
    8c94:	b.le	8e08 <__subtf3@@GCC_3.0+0x1f8>
    8c98:	cbnz	x13, 8f74 <__subtf3@@GCC_3.0+0x364>
    8c9c:	orr	x4, x2, x10
    8ca0:	cbz	x4, 9154 <__subtf3@@GCC_3.0+0x544>
    8ca4:	subs	w0, w0, #0x1
    8ca8:	b.eq	9428 <__subtf3@@GCC_3.0+0x818>  // b.none
    8cac:	mov	x4, #0x7fff                	// #32767
    8cb0:	cmp	x1, x4
    8cb4:	b.eq	9128 <__subtf3@@GCC_3.0+0x518>  // b.none
    8cb8:	cmp	w0, #0x74
    8cbc:	b.gt	9144 <__subtf3@@GCC_3.0+0x534>
    8cc0:	cmp	w0, #0x3f
    8cc4:	b.gt	92ec <__subtf3@@GCC_3.0+0x6dc>
    8cc8:	mov	w4, #0x40                  	// #64
    8ccc:	sub	w4, w4, w0
    8cd0:	lsr	x7, x10, x0
    8cd4:	lsl	x10, x10, x4
    8cd8:	cmp	x10, #0x0
    8cdc:	lsl	x4, x2, x4
    8ce0:	cset	x5, ne  // ne = any
    8ce4:	orr	x4, x4, x7
    8ce8:	lsr	x2, x2, x0
    8cec:	orr	x4, x4, x5
    8cf0:	sub	x3, x3, x2
    8cf4:	subs	x6, x6, x4
    8cf8:	sbc	x3, x3, xzr
    8cfc:	and	x5, x3, #0x7ffffffffffff
    8d00:	tbz	x3, #51, 8f00 <__subtf3@@GCC_3.0+0x2f0>
    8d04:	cbz	x5, 910c <__subtf3@@GCC_3.0+0x4fc>
    8d08:	clz	x0, x5
    8d0c:	sub	w0, w0, #0xc
    8d10:	neg	w3, w0
    8d14:	lsl	x2, x5, x0
    8d18:	lsl	x5, x6, x0
    8d1c:	lsr	x6, x6, x3
    8d20:	orr	x3, x6, x2
    8d24:	cmp	x1, w0, sxtw
    8d28:	sxtw	x2, w0
    8d2c:	b.gt	90ec <__subtf3@@GCC_3.0+0x4dc>
    8d30:	sub	w1, w0, w1
    8d34:	add	w0, w1, #0x1
    8d38:	cmp	w0, #0x3f
    8d3c:	b.gt	92b4 <__subtf3@@GCC_3.0+0x6a4>
    8d40:	mov	w1, #0x40                  	// #64
    8d44:	sub	w1, w1, w0
    8d48:	lsr	x2, x5, x0
    8d4c:	lsl	x5, x5, x1
    8d50:	cmp	x5, #0x0
    8d54:	lsl	x6, x3, x1
    8d58:	cset	x1, ne  // ne = any
    8d5c:	orr	x6, x6, x2
    8d60:	lsr	x3, x3, x0
    8d64:	orr	x6, x6, x1
    8d68:	orr	x7, x6, x3
    8d6c:	cbz	x7, 8f14 <__subtf3@@GCC_3.0+0x304>
    8d70:	and	x0, x6, #0x7
    8d74:	mov	x1, #0x0                   	// #0
    8d78:	mov	w4, #0x1                   	// #1
    8d7c:	cbz	x0, 9178 <__subtf3@@GCC_3.0+0x568>
    8d80:	and	x2, x12, #0xc00000
    8d84:	cmp	x2, #0x400, lsl #12
    8d88:	b.eq	90c4 <__subtf3@@GCC_3.0+0x4b4>  // b.none
    8d8c:	cmp	x2, #0x800, lsl #12
    8d90:	b.eq	90a4 <__subtf3@@GCC_3.0+0x494>  // b.none
    8d94:	cbz	x2, 90d0 <__subtf3@@GCC_3.0+0x4c0>
    8d98:	and	x2, x3, #0x8000000000000
    8d9c:	mov	w0, #0x10                  	// #16
    8da0:	cbz	w4, 8da8 <__subtf3@@GCC_3.0+0x198>
    8da4:	orr	w0, w0, #0x8
    8da8:	cbz	x2, 8e58 <__subtf3@@GCC_3.0+0x248>
    8dac:	add	x1, x1, #0x1
    8db0:	mov	x2, #0x7fff                	// #32767
    8db4:	cmp	x1, x2
    8db8:	b.eq	8fcc <__subtf3@@GCC_3.0+0x3bc>  // b.none
    8dbc:	ubfx	x7, x3, #3, #48
    8dc0:	extr	x5, x3, x6, #3
    8dc4:	and	w1, w1, #0x7fff
    8dc8:	mov	x3, #0x0                   	// #0
    8dcc:	orr	w1, w1, w8, lsl #15
    8dd0:	bfxil	x3, x7, #0, #48
    8dd4:	fmov	d0, x5
    8dd8:	bfi	x3, x1, #48, #16
    8ddc:	fmov	v0.d[1], x3
    8de0:	cbnz	w0, 9028 <__subtf3@@GCC_3.0+0x418>
    8de4:	ldp	x29, x30, [sp], #48
    8de8:	ret
    8dec:	orr	x7, x2, x10
    8df0:	cbz	x7, 8c80 <__subtf3@@GCC_3.0+0x70>
    8df4:	and	x4, x4, #0xff
    8df8:	cmp	x11, x4
    8dfc:	b.eq	903c <__subtf3@@GCC_3.0+0x42c>  // b.none
    8e00:	cmp	w0, #0x0
    8e04:	b.gt	8f74 <__subtf3@@GCC_3.0+0x364>
    8e08:	cbz	w0, 8f2c <__subtf3@@GCC_3.0+0x31c>
    8e0c:	mov	w8, w4
    8e10:	cbnz	x1, 9248 <__subtf3@@GCC_3.0+0x638>
    8e14:	orr	x1, x3, x6
    8e18:	cbz	x1, 8ee0 <__subtf3@@GCC_3.0+0x2d0>
    8e1c:	cmn	w0, #0x1
    8e20:	b.eq	9588 <__subtf3@@GCC_3.0+0x978>  // b.none
    8e24:	mov	x1, #0x7fff                	// #32767
    8e28:	mvn	w0, w0
    8e2c:	cmp	x13, x1
    8e30:	b.ne	925c <__subtf3@@GCC_3.0+0x64c>  // b.any
    8e34:	orr	x0, x2, x10
    8e38:	and	x11, x8, #0xff
    8e3c:	cbz	x0, 91c0 <__subtf3@@GCC_3.0+0x5b0>
    8e40:	lsr	x0, x2, #50
    8e44:	mov	x6, x10
    8e48:	eor	x0, x0, #0x1
    8e4c:	mov	x3, x2
    8e50:	and	w0, w0, #0x1
    8e54:	mov	x1, #0x7fff                	// #32767
    8e58:	mov	x2, #0x7fff                	// #32767
    8e5c:	extr	x5, x3, x6, #3
    8e60:	lsr	x7, x3, #3
    8e64:	cmp	x1, x2
    8e68:	b.ne	8f20 <__subtf3@@GCC_3.0+0x310>  // b.any
    8e6c:	orr	x1, x7, x5
    8e70:	cbz	x1, 96dc <__subtf3@@GCC_3.0+0xacc>
    8e74:	orr	x7, x7, #0x800000000000
    8e78:	mov	w1, #0x7fff                	// #32767
    8e7c:	and	x7, x7, #0xffffffffffff
    8e80:	b	8dc8 <__subtf3@@GCC_3.0+0x1b8>
    8e84:	cmp	w0, #0x0
    8e88:	b.le	903c <__subtf3@@GCC_3.0+0x42c>
    8e8c:	cbz	x13, 8f7c <__subtf3@@GCC_3.0+0x36c>
    8e90:	orr	x2, x2, #0x8000000000000
    8e94:	mov	x4, #0x7fff                	// #32767
    8e98:	cmp	x1, x4
    8e9c:	b.eq	9128 <__subtf3@@GCC_3.0+0x518>  // b.none
    8ea0:	cmp	w0, #0x74
    8ea4:	b.gt	929c <__subtf3@@GCC_3.0+0x68c>
    8ea8:	cmp	w0, #0x3f
    8eac:	b.gt	9338 <__subtf3@@GCC_3.0+0x728>
    8eb0:	mov	w4, #0x40                  	// #64
    8eb4:	sub	w4, w4, w0
    8eb8:	lsr	x7, x10, x0
    8ebc:	lsl	x10, x10, x4
    8ec0:	cmp	x10, #0x0
    8ec4:	lsl	x4, x2, x4
    8ec8:	cset	x5, ne  // ne = any
    8ecc:	orr	x4, x4, x7
    8ed0:	lsr	x2, x2, x0
    8ed4:	orr	x0, x4, x5
    8ed8:	add	x3, x3, x2
    8edc:	b	92a8 <__subtf3@@GCC_3.0+0x698>
    8ee0:	mov	x0, #0x7fff                	// #32767
    8ee4:	cmp	x13, x0
    8ee8:	b.eq	9514 <__subtf3@@GCC_3.0+0x904>  // b.none
    8eec:	mov	x3, x2
    8ef0:	mov	x6, x10
    8ef4:	mov	x1, x13
    8ef8:	mov	x14, x4
    8efc:	nop
    8f00:	orr	x7, x6, x3
    8f04:	and	x0, x6, #0x7
    8f08:	mov	w4, #0x0                   	// #0
    8f0c:	cbnz	x1, 8d7c <__subtf3@@GCC_3.0+0x16c>
    8f10:	cbnz	x7, 8d70 <__subtf3@@GCC_3.0+0x160>
    8f14:	mov	x5, #0x0                   	// #0
    8f18:	mov	x1, #0x0                   	// #0
    8f1c:	mov	w0, #0x0                   	// #0
    8f20:	and	x7, x7, #0xffffffffffff
    8f24:	and	w1, w1, #0x7fff
    8f28:	b	8dc8 <__subtf3@@GCC_3.0+0x1b8>
    8f2c:	add	x7, x1, #0x1
    8f30:	tst	x7, #0x7ffe
    8f34:	b.ne	9218 <__subtf3@@GCC_3.0+0x608>  // b.any
    8f38:	orr	x11, x3, x6
    8f3c:	orr	x7, x2, x10
    8f40:	cbnz	x1, 93a8 <__subtf3@@GCC_3.0+0x798>
    8f44:	cbz	x11, 9434 <__subtf3@@GCC_3.0+0x824>
    8f48:	cbz	x7, 9448 <__subtf3@@GCC_3.0+0x838>
    8f4c:	subs	x9, x6, x10
    8f50:	cmp	x6, x10
    8f54:	sbc	x5, x3, x2
    8f58:	tbz	x5, #51, 95f0 <__subtf3@@GCC_3.0+0x9e0>
    8f5c:	subs	x6, x10, x6
    8f60:	mov	w8, w4
    8f64:	sbc	x3, x2, x3
    8f68:	mov	x14, x4
    8f6c:	orr	x7, x6, x3
    8f70:	b	8d6c <__subtf3@@GCC_3.0+0x15c>
    8f74:	orr	x2, x2, #0x8000000000000
    8f78:	b	8cac <__subtf3@@GCC_3.0+0x9c>
    8f7c:	orr	x4, x2, x10
    8f80:	cbz	x4, 9154 <__subtf3@@GCC_3.0+0x544>
    8f84:	subs	w0, w0, #0x1
    8f88:	b.ne	8e94 <__subtf3@@GCC_3.0+0x284>  // b.any
    8f8c:	adds	x6, x6, x10
    8f90:	adc	x3, x2, x3
    8f94:	nop
    8f98:	tbz	x3, #51, 8f00 <__subtf3@@GCC_3.0+0x2f0>
    8f9c:	add	x1, x1, #0x1
    8fa0:	mov	x0, #0x7fff                	// #32767
    8fa4:	cmp	x1, x0
    8fa8:	b.eq	9454 <__subtf3@@GCC_3.0+0x844>  // b.none
    8fac:	and	x0, x6, #0x1
    8fb0:	and	x2, x3, #0xfff7ffffffffffff
    8fb4:	orr	x6, x0, x6, lsr #1
    8fb8:	mov	w4, #0x0                   	// #0
    8fbc:	orr	x6, x6, x3, lsl #63
    8fc0:	lsr	x3, x2, #1
    8fc4:	and	x0, x6, #0x7
    8fc8:	b	8d7c <__subtf3@@GCC_3.0+0x16c>
    8fcc:	and	x2, x12, #0xc00000
    8fd0:	cbz	x2, 9008 <__subtf3@@GCC_3.0+0x3f8>
    8fd4:	cmp	x2, #0x400, lsl #12
    8fd8:	b.eq	9004 <__subtf3@@GCC_3.0+0x3f4>  // b.none
    8fdc:	cmp	x2, #0x800, lsl #12
    8fe0:	and	w14, w14, #0x1
    8fe4:	csel	w14, w14, wzr, eq  // eq = none
    8fe8:	cbnz	w14, 9008 <__subtf3@@GCC_3.0+0x3f8>
    8fec:	mov	w1, #0x14                  	// #20
    8ff0:	mov	x5, #0xffffffffffffffff    	// #-1
    8ff4:	orr	w0, w0, w1
    8ff8:	mov	x7, #0x1fffffffffffffff    	// #2305843009213693951
    8ffc:	mov	x1, #0x7ffe                	// #32766
    9000:	b	8f20 <__subtf3@@GCC_3.0+0x310>
    9004:	cbnz	x14, 8fec <__subtf3@@GCC_3.0+0x3dc>
    9008:	mov	w1, #0x14                  	// #20
    900c:	and	x11, x8, #0xff
    9010:	orr	w0, w0, w1
    9014:	mov	x2, #0x0                   	// #0
    9018:	fmov	d0, x2
    901c:	lsl	x11, x11, #63
    9020:	orr	x3, x11, #0x7fff000000000000
    9024:	fmov	v0.d[1], x3
    9028:	str	q0, [sp, #16]
    902c:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    9030:	ldr	q0, [sp, #16]
    9034:	ldp	x29, x30, [sp], #48
    9038:	ret
    903c:	cbz	w0, 91d8 <__subtf3@@GCC_3.0+0x5c8>
    9040:	cbz	x1, 9194 <__subtf3@@GCC_3.0+0x584>
    9044:	mov	x1, #0x7fff                	// #32767
    9048:	neg	w0, w0
    904c:	orr	x3, x3, #0x8000000000000
    9050:	cmp	x13, x1
    9054:	b.eq	91b4 <__subtf3@@GCC_3.0+0x5a4>  // b.none
    9058:	cmp	w0, #0x74
    905c:	b.gt	94a8 <__subtf3@@GCC_3.0+0x898>
    9060:	cmp	w0, #0x3f
    9064:	b.gt	955c <__subtf3@@GCC_3.0+0x94c>
    9068:	mov	w1, #0x40                  	// #64
    906c:	sub	w1, w1, w0
    9070:	lsr	x4, x6, x0
    9074:	lsl	x6, x6, x1
    9078:	cmp	x6, #0x0
    907c:	lsl	x6, x3, x1
    9080:	cset	x1, ne  // ne = any
    9084:	orr	x6, x6, x4
    9088:	lsr	x0, x3, x0
    908c:	orr	x6, x6, x1
    9090:	add	x2, x2, x0
    9094:	adds	x6, x6, x10
    9098:	mov	x1, x13
    909c:	cinc	x3, x2, cs  // cs = hs, nlast
    90a0:	b	8f98 <__subtf3@@GCC_3.0+0x388>
    90a4:	mov	w0, #0x10                  	// #16
    90a8:	cbz	x14, 90b4 <__subtf3@@GCC_3.0+0x4a4>
    90ac:	adds	x6, x6, #0x8
    90b0:	cinc	x3, x3, cs  // cs = hs, nlast
    90b4:	and	x2, x3, #0x8000000000000
    90b8:	cbz	w4, 8da8 <__subtf3@@GCC_3.0+0x198>
    90bc:	orr	w0, w0, #0x8
    90c0:	b	8da8 <__subtf3@@GCC_3.0+0x198>
    90c4:	mov	w0, #0x10                  	// #16
    90c8:	cbnz	x14, 90b4 <__subtf3@@GCC_3.0+0x4a4>
    90cc:	b	90ac <__subtf3@@GCC_3.0+0x49c>
    90d0:	and	x2, x6, #0xf
    90d4:	mov	w0, #0x10                  	// #16
    90d8:	cmp	x2, #0x4
    90dc:	b.eq	90b4 <__subtf3@@GCC_3.0+0x4a4>  // b.none
    90e0:	adds	x6, x6, #0x4
    90e4:	cinc	x3, x3, cs  // cs = hs, nlast
    90e8:	b	90b4 <__subtf3@@GCC_3.0+0x4a4>
    90ec:	mov	x6, x5
    90f0:	and	x3, x3, #0xfff7ffffffffffff
    90f4:	sub	x1, x1, x2
    90f8:	orr	x7, x6, x3
    90fc:	and	x0, x6, #0x7
    9100:	mov	w4, #0x0                   	// #0
    9104:	cbz	x1, 8f10 <__subtf3@@GCC_3.0+0x300>
    9108:	b	8d7c <__subtf3@@GCC_3.0+0x16c>
    910c:	clz	x3, x6
    9110:	add	w0, w3, #0x34
    9114:	cmp	w0, #0x3f
    9118:	b.le	8d10 <__subtf3@@GCC_3.0+0x100>
    911c:	sub	w3, w3, #0xc
    9120:	lsl	x3, x6, x3
    9124:	b	8d24 <__subtf3@@GCC_3.0+0x114>
    9128:	orr	x0, x3, x6
    912c:	cbz	x0, 91c0 <__subtf3@@GCC_3.0+0x5b0>
    9130:	lsr	x0, x3, #50
    9134:	mov	x1, #0x7fff                	// #32767
    9138:	eor	x0, x0, #0x1
    913c:	and	w0, w0, #0x1
    9140:	b	8e58 <__subtf3@@GCC_3.0+0x248>
    9144:	orr	x2, x2, x10
    9148:	cmp	x2, #0x0
    914c:	cset	x4, ne  // ne = any
    9150:	b	8cf4 <__subtf3@@GCC_3.0+0xe4>
    9154:	mov	x0, #0x7fff                	// #32767
    9158:	cmp	x1, x0
    915c:	b.ne	8f00 <__subtf3@@GCC_3.0+0x2f0>  // b.any
    9160:	orr	x0, x3, x6
    9164:	cbnz	x0, 9130 <__subtf3@@GCC_3.0+0x520>
    9168:	mov	x5, #0x0                   	// #0
    916c:	mov	x7, #0x0                   	// #0
    9170:	mov	w0, #0x0                   	// #0
    9174:	b	8e6c <__subtf3@@GCC_3.0+0x25c>
    9178:	and	x2, x3, #0x8000000000000
    917c:	mov	w0, #0x0                   	// #0
    9180:	cbz	w4, 8da8 <__subtf3@@GCC_3.0+0x198>
    9184:	mov	w0, #0x0                   	// #0
    9188:	tbz	w12, #11, 8da8 <__subtf3@@GCC_3.0+0x198>
    918c:	orr	w0, w0, #0x8
    9190:	b	8da8 <__subtf3@@GCC_3.0+0x198>
    9194:	orr	x1, x3, x6
    9198:	cbz	x1, 9520 <__subtf3@@GCC_3.0+0x910>
    919c:	cmn	w0, #0x1
    91a0:	b.eq	9670 <__subtf3@@GCC_3.0+0xa60>  // b.none
    91a4:	mov	x1, #0x7fff                	// #32767
    91a8:	mvn	w0, w0
    91ac:	cmp	x13, x1
    91b0:	b.ne	9058 <__subtf3@@GCC_3.0+0x448>  // b.any
    91b4:	orr	x0, x2, x10
    91b8:	cbnz	x0, 8e40 <__subtf3@@GCC_3.0+0x230>
    91bc:	nop
    91c0:	mov	x2, #0x0                   	// #0
    91c4:	fmov	d0, x2
    91c8:	lsl	x0, x11, #63
    91cc:	orr	x3, x0, #0x7fff000000000000
    91d0:	fmov	v0.d[1], x3
    91d4:	b	8de4 <__subtf3@@GCC_3.0+0x1d4>
    91d8:	add	x7, x1, #0x1
    91dc:	tst	x7, #0x7ffe
    91e0:	b.ne	9364 <__subtf3@@GCC_3.0+0x754>  // b.any
    91e4:	orr	x11, x3, x6
    91e8:	cbnz	x1, 94ec <__subtf3@@GCC_3.0+0x8dc>
    91ec:	orr	x7, x2, x10
    91f0:	cbz	x11, 9550 <__subtf3@@GCC_3.0+0x940>
    91f4:	cbz	x7, 9448 <__subtf3@@GCC_3.0+0x838>
    91f8:	adds	x6, x6, x10
    91fc:	adc	x3, x2, x3
    9200:	tbz	x3, #51, 8d68 <__subtf3@@GCC_3.0+0x158>
    9204:	and	x3, x3, #0xfff7ffffffffffff
    9208:	and	x0, x6, #0x7
    920c:	mov	w4, #0x0                   	// #0
    9210:	mov	x1, #0x1                   	// #1
    9214:	b	8d7c <__subtf3@@GCC_3.0+0x16c>
    9218:	subs	x9, x6, x10
    921c:	cmp	x6, x10
    9220:	sbc	x5, x3, x2
    9224:	tbnz	x5, #51, 9390 <__subtf3@@GCC_3.0+0x780>
    9228:	orr	x7, x9, x5
    922c:	cbnz	x7, 94a0 <__subtf3@@GCC_3.0+0x890>
    9230:	and	x12, x12, #0xc00000
    9234:	mov	x5, #0x0                   	// #0
    9238:	cmp	x12, #0x800, lsl #12
    923c:	mov	x1, #0x0                   	// #0
    9240:	cset	w8, eq  // eq = none
    9244:	b	8f20 <__subtf3@@GCC_3.0+0x310>
    9248:	mov	x1, #0x7fff                	// #32767
    924c:	neg	w0, w0
    9250:	orr	x3, x3, #0x8000000000000
    9254:	cmp	x13, x1
    9258:	b.eq	8e34 <__subtf3@@GCC_3.0+0x224>  // b.none
    925c:	cmp	w0, #0x74
    9260:	b.gt	9318 <__subtf3@@GCC_3.0+0x708>
    9264:	cmp	w0, #0x3f
    9268:	b.gt	94b8 <__subtf3@@GCC_3.0+0x8a8>
    926c:	mov	w1, #0x40                  	// #64
    9270:	sub	w1, w1, w0
    9274:	lsr	x5, x6, x0
    9278:	lsl	x6, x6, x1
    927c:	cmp	x6, #0x0
    9280:	lsl	x6, x3, x1
    9284:	cset	x1, ne  // ne = any
    9288:	orr	x6, x6, x5
    928c:	lsr	x0, x3, x0
    9290:	orr	x6, x6, x1
    9294:	sub	x2, x2, x0
    9298:	b	9324 <__subtf3@@GCC_3.0+0x714>
    929c:	orr	x2, x2, x10
    92a0:	cmp	x2, #0x0
    92a4:	cset	x0, ne  // ne = any
    92a8:	adds	x6, x0, x6
    92ac:	cinc	x3, x3, cs  // cs = hs, nlast
    92b0:	b	8f98 <__subtf3@@GCC_3.0+0x388>
    92b4:	mov	w2, #0x80                  	// #128
    92b8:	sub	w2, w2, w0
    92bc:	cmp	w0, #0x40
    92c0:	sub	w6, w1, #0x3f
    92c4:	lsl	x0, x3, x2
    92c8:	orr	x0, x5, x0
    92cc:	csel	x5, x0, x5, ne  // ne = any
    92d0:	lsr	x6, x3, x6
    92d4:	cmp	x5, #0x0
    92d8:	mov	x3, #0x0                   	// #0
    92dc:	cset	x0, ne  // ne = any
    92e0:	orr	x6, x0, x6
    92e4:	mov	x7, x6
    92e8:	b	8d6c <__subtf3@@GCC_3.0+0x15c>
    92ec:	mov	w5, #0x80                  	// #128
    92f0:	sub	w5, w5, w0
    92f4:	subs	w0, w0, #0x40
    92f8:	lsl	x5, x2, x5
    92fc:	orr	x5, x10, x5
    9300:	csel	x10, x5, x10, ne  // ne = any
    9304:	lsr	x2, x2, x0
    9308:	cmp	x10, #0x0
    930c:	cset	x4, ne  // ne = any
    9310:	orr	x4, x4, x2
    9314:	b	8cf4 <__subtf3@@GCC_3.0+0xe4>
    9318:	orr	x3, x3, x6
    931c:	cmp	x3, #0x0
    9320:	cset	x6, ne  // ne = any
    9324:	subs	x6, x10, x6
    9328:	mov	x1, x13
    932c:	sbc	x3, x2, xzr
    9330:	mov	x14, x4
    9334:	b	8cfc <__subtf3@@GCC_3.0+0xec>
    9338:	mov	w4, #0x80                  	// #128
    933c:	sub	w4, w4, w0
    9340:	subs	w0, w0, #0x40
    9344:	lsl	x4, x2, x4
    9348:	orr	x4, x10, x4
    934c:	csel	x10, x4, x10, ne  // ne = any
    9350:	lsr	x2, x2, x0
    9354:	cmp	x10, #0x0
    9358:	cset	x0, ne  // ne = any
    935c:	orr	x0, x0, x2
    9360:	b	92a8 <__subtf3@@GCC_3.0+0x698>
    9364:	mov	x0, #0x7fff                	// #32767
    9368:	cmp	x7, x0
    936c:	b.eq	95a0 <__subtf3@@GCC_3.0+0x990>  // b.none
    9370:	adds	x6, x6, x10
    9374:	mov	x1, x7
    9378:	adc	x3, x2, x3
    937c:	mov	w4, #0x0                   	// #0
    9380:	ubfx	x0, x6, #1, #3
    9384:	extr	x6, x3, x6, #1
    9388:	lsr	x3, x3, #1
    938c:	b	8d7c <__subtf3@@GCC_3.0+0x16c>
    9390:	cmp	x10, x6
    9394:	mov	w8, w4
    9398:	sbc	x5, x2, x3
    939c:	sub	x6, x10, x6
    93a0:	mov	x14, x4
    93a4:	b	8d04 <__subtf3@@GCC_3.0+0xf4>
    93a8:	mov	x12, #0x7fff                	// #32767
    93ac:	cmp	x1, x12
    93b0:	b.eq	93d8 <__subtf3@@GCC_3.0+0x7c8>  // b.none
    93b4:	cmp	x13, x12
    93b8:	b.eq	95cc <__subtf3@@GCC_3.0+0x9bc>  // b.none
    93bc:	cbnz	x11, 93f0 <__subtf3@@GCC_3.0+0x7e0>
    93c0:	cbnz	x7, 95dc <__subtf3@@GCC_3.0+0x9cc>
    93c4:	mov	x5, #0xffffffffffffffff    	// #-1
    93c8:	mov	x7, #0xffffffffffff        	// #281474976710655
    93cc:	mov	w0, #0x1                   	// #1
    93d0:	mov	w8, #0x0                   	// #0
    93d4:	b	8e74 <__subtf3@@GCC_3.0+0x264>
    93d8:	cbz	x11, 95c4 <__subtf3@@GCC_3.0+0x9b4>
    93dc:	lsr	x0, x3, #50
    93e0:	cmp	x13, x1
    93e4:	eor	x0, x0, #0x1
    93e8:	and	w0, w0, #0x1
    93ec:	b.eq	95cc <__subtf3@@GCC_3.0+0x9bc>  // b.none
    93f0:	cbz	x7, 8e54 <__subtf3@@GCC_3.0+0x244>
    93f4:	bfi	x5, x3, #61, #3
    93f8:	lsr	x7, x3, #3
    93fc:	tbz	x3, #50, 9418 <__subtf3@@GCC_3.0+0x808>
    9400:	lsr	x1, x2, #3
    9404:	tbnz	x2, #50, 9418 <__subtf3@@GCC_3.0+0x808>
    9408:	mov	x5, x9
    940c:	mov	w8, w4
    9410:	bfi	x5, x2, #61, #3
    9414:	mov	x7, x1
    9418:	extr	x7, x7, x5, #61
    941c:	bfi	x5, x7, #61, #3
    9420:	lsr	x7, x7, #3
    9424:	b	8e6c <__subtf3@@GCC_3.0+0x25c>
    9428:	subs	x6, x6, x10
    942c:	sbc	x3, x3, x2
    9430:	b	8cfc <__subtf3@@GCC_3.0+0xec>
    9434:	cbz	x7, 953c <__subtf3@@GCC_3.0+0x92c>
    9438:	mov	x3, x2
    943c:	mov	x6, x10
    9440:	mov	w8, w4
    9444:	mov	x14, x4
    9448:	mov	x1, #0x0                   	// #0
    944c:	mov	x2, #0x0                   	// #0
    9450:	b	9184 <__subtf3@@GCC_3.0+0x574>
    9454:	ands	x2, x12, #0xc00000
    9458:	b.eq	94e4 <__subtf3@@GCC_3.0+0x8d4>  // b.none
    945c:	cmp	x2, #0x400, lsl #12
    9460:	eor	w0, w8, #0x1
    9464:	cset	w1, eq  // eq = none
    9468:	tst	w1, w0
    946c:	b.ne	95b8 <__subtf3@@GCC_3.0+0x9a8>  // b.any
    9470:	cmp	x2, #0x800, lsl #12
    9474:	b.eq	960c <__subtf3@@GCC_3.0+0x9fc>  // b.none
    9478:	cmp	x2, #0x400, lsl #12
    947c:	mov	w0, #0x14                  	// #20
    9480:	b.ne	8fd0 <__subtf3@@GCC_3.0+0x3c0>  // b.any
    9484:	mov	x3, #0xffffffffffffffff    	// #-1
    9488:	mov	x1, #0x7ffe                	// #32766
    948c:	mov	x6, x3
    9490:	mov	w4, #0x0                   	// #0
    9494:	mov	w0, #0x14                  	// #20
    9498:	cbnz	x14, 90b4 <__subtf3@@GCC_3.0+0x4a4>
    949c:	b	90ac <__subtf3@@GCC_3.0+0x49c>
    94a0:	mov	x6, x9
    94a4:	b	8d04 <__subtf3@@GCC_3.0+0xf4>
    94a8:	orr	x3, x3, x6
    94ac:	cmp	x3, #0x0
    94b0:	cset	x6, ne  // ne = any
    94b4:	b	9094 <__subtf3@@GCC_3.0+0x484>
    94b8:	mov	w1, #0x80                  	// #128
    94bc:	sub	w1, w1, w0
    94c0:	subs	w0, w0, #0x40
    94c4:	lsl	x1, x3, x1
    94c8:	orr	x1, x6, x1
    94cc:	csel	x6, x1, x6, ne  // ne = any
    94d0:	lsr	x3, x3, x0
    94d4:	cmp	x6, #0x0
    94d8:	cset	x6, ne  // ne = any
    94dc:	orr	x6, x6, x3
    94e0:	b	9324 <__subtf3@@GCC_3.0+0x714>
    94e4:	mov	w0, #0x14                  	// #20
    94e8:	b	9014 <__subtf3@@GCC_3.0+0x404>
    94ec:	mov	x7, #0x7fff                	// #32767
    94f0:	cmp	x1, x7
    94f4:	b.eq	9628 <__subtf3@@GCC_3.0+0xa18>  // b.none
    94f8:	cmp	x13, x7
    94fc:	b.eq	968c <__subtf3@@GCC_3.0+0xa7c>  // b.none
    9500:	cbnz	x11, 9640 <__subtf3@@GCC_3.0+0xa30>
    9504:	mov	x3, x2
    9508:	mov	x6, x10
    950c:	mov	x1, #0x7fff                	// #32767
    9510:	b	8e58 <__subtf3@@GCC_3.0+0x248>
    9514:	orr	x0, x2, x10
    9518:	cbz	x0, 9168 <__subtf3@@GCC_3.0+0x558>
    951c:	b	8e40 <__subtf3@@GCC_3.0+0x230>
    9520:	mov	x0, #0x7fff                	// #32767
    9524:	cmp	x13, x0
    9528:	b.eq	9514 <__subtf3@@GCC_3.0+0x904>  // b.none
    952c:	mov	x3, x2
    9530:	mov	x6, x10
    9534:	mov	x1, x13
    9538:	b	8f00 <__subtf3@@GCC_3.0+0x2f0>
    953c:	and	x12, x12, #0xc00000
    9540:	mov	x5, #0x0                   	// #0
    9544:	cmp	x12, #0x800, lsl #12
    9548:	cset	w8, eq  // eq = none
    954c:	b	8f20 <__subtf3@@GCC_3.0+0x310>
    9550:	mov	x3, x2
    9554:	mov	x6, x10
    9558:	b	8d6c <__subtf3@@GCC_3.0+0x15c>
    955c:	mov	w1, #0x80                  	// #128
    9560:	sub	w1, w1, w0
    9564:	subs	w0, w0, #0x40
    9568:	lsl	x1, x3, x1
    956c:	orr	x1, x6, x1
    9570:	csel	x6, x1, x6, ne  // ne = any
    9574:	lsr	x3, x3, x0
    9578:	cmp	x6, #0x0
    957c:	cset	x6, ne  // ne = any
    9580:	orr	x6, x6, x3
    9584:	b	9094 <__subtf3@@GCC_3.0+0x484>
    9588:	cmp	x10, x6
    958c:	mov	x1, x13
    9590:	sbc	x3, x2, x3
    9594:	sub	x6, x10, x6
    9598:	mov	x14, x4
    959c:	b	8cfc <__subtf3@@GCC_3.0+0xec>
    95a0:	ands	x2, x12, #0xc00000
    95a4:	b.eq	94e4 <__subtf3@@GCC_3.0+0x8d4>  // b.none
    95a8:	cmp	x2, #0x400, lsl #12
    95ac:	eor	w0, w8, #0x1
    95b0:	csel	w0, w0, wzr, eq  // eq = none
    95b4:	cbz	w0, 9470 <__subtf3@@GCC_3.0+0x860>
    95b8:	mov	w0, #0x14                  	// #20
    95bc:	mov	x11, #0x0                   	// #0
    95c0:	b	9014 <__subtf3@@GCC_3.0+0x404>
    95c4:	cmp	x13, x1
    95c8:	b.ne	93c0 <__subtf3@@GCC_3.0+0x7b0>  // b.any
    95cc:	cbz	x7, 9680 <__subtf3@@GCC_3.0+0xa70>
    95d0:	tst	x2, #0x4000000000000
    95d4:	csinc	w0, w0, wzr, ne  // ne = any
    95d8:	cbnz	x11, 93f4 <__subtf3@@GCC_3.0+0x7e4>
    95dc:	mov	w8, w4
    95e0:	mov	x3, x2
    95e4:	mov	x6, x10
    95e8:	mov	x1, #0x7fff                	// #32767
    95ec:	b	8e58 <__subtf3@@GCC_3.0+0x248>
    95f0:	orr	x7, x9, x5
    95f4:	cbz	x7, 953c <__subtf3@@GCC_3.0+0x92c>
    95f8:	mov	x3, x5
    95fc:	and	x0, x9, #0x7
    9600:	mov	x6, x9
    9604:	mov	w4, #0x1                   	// #1
    9608:	b	8d7c <__subtf3@@GCC_3.0+0x16c>
    960c:	cbnz	x11, 96a0 <__subtf3@@GCC_3.0+0xa90>
    9610:	mov	x3, #0xffffffffffffffff    	// #-1
    9614:	mov	w8, #0x0                   	// #0
    9618:	mov	x6, x3
    961c:	mov	x1, #0x7ffe                	// #32766
    9620:	mov	w0, #0x14                  	// #20
    9624:	b	8dac <__subtf3@@GCC_3.0+0x19c>
    9628:	cbz	x11, 96ac <__subtf3@@GCC_3.0+0xa9c>
    962c:	lsr	x0, x3, #50
    9630:	cmp	x13, x1
    9634:	eor	x0, x0, #0x1
    9638:	and	w0, w0, #0x1
    963c:	b.eq	96cc <__subtf3@@GCC_3.0+0xabc>  // b.none
    9640:	orr	x10, x2, x10
    9644:	cbz	x10, 8e54 <__subtf3@@GCC_3.0+0x244>
    9648:	bfi	x5, x3, #61, #3
    964c:	lsr	x7, x3, #3
    9650:	tbz	x3, #50, 9418 <__subtf3@@GCC_3.0+0x808>
    9654:	lsr	x1, x2, #3
    9658:	tbnz	x2, #50, 9418 <__subtf3@@GCC_3.0+0x808>
    965c:	and	x5, x9, #0x1fffffffffffffff
    9660:	mov	w8, w4
    9664:	orr	x5, x5, x2, lsl #61
    9668:	mov	x7, x1
    966c:	b	9418 <__subtf3@@GCC_3.0+0x808>
    9670:	adds	x6, x6, x10
    9674:	mov	x1, x13
    9678:	adc	x3, x2, x3
    967c:	b	8f98 <__subtf3@@GCC_3.0+0x388>
    9680:	cbz	x11, 93c4 <__subtf3@@GCC_3.0+0x7b4>
    9684:	mov	x1, #0x7fff                	// #32767
    9688:	b	8e58 <__subtf3@@GCC_3.0+0x248>
    968c:	orr	x1, x2, x10
    9690:	cbnz	x1, 96bc <__subtf3@@GCC_3.0+0xaac>
    9694:	cbz	x11, 9168 <__subtf3@@GCC_3.0+0x558>
    9698:	mov	x1, #0x7fff                	// #32767
    969c:	b	8e58 <__subtf3@@GCC_3.0+0x248>
    96a0:	mov	w0, #0x14                  	// #20
    96a4:	mov	x11, #0x1                   	// #1
    96a8:	b	9014 <__subtf3@@GCC_3.0+0x404>
    96ac:	cmp	x13, x1
    96b0:	b.ne	9504 <__subtf3@@GCC_3.0+0x8f4>  // b.any
    96b4:	orr	x1, x2, x10
    96b8:	cbz	x1, 9168 <__subtf3@@GCC_3.0+0x558>
    96bc:	tst	x2, #0x4000000000000
    96c0:	csinc	w0, w0, wzr, ne  // ne = any
    96c4:	cbnz	x11, 9648 <__subtf3@@GCC_3.0+0xa38>
    96c8:	b	9504 <__subtf3@@GCC_3.0+0x8f4>
    96cc:	orr	x1, x2, x10
    96d0:	cbnz	x1, 96bc <__subtf3@@GCC_3.0+0xaac>
    96d4:	mov	x1, #0x7fff                	// #32767
    96d8:	b	8e58 <__subtf3@@GCC_3.0+0x248>
    96dc:	mov	x5, #0x0                   	// #0
    96e0:	mov	w1, #0x7fff                	// #32767
    96e4:	mov	x7, #0x0                   	// #0
    96e8:	b	8dc8 <__subtf3@@GCC_3.0+0x1b8>
    96ec:	nop

00000000000096f0 <__unordtf2@@GCC_4.5.0>:
    96f0:	stp	x29, x30, [sp, #-48]!
    96f4:	mov	x29, sp
    96f8:	str	q0, [sp, #16]
    96fc:	str	q1, [sp, #32]
    9700:	ldp	x3, x1, [sp, #16]
    9704:	ldp	x2, x0, [sp, #32]
    9708:	mrs	x4, fpcr
    970c:	ubfx	x5, x1, #48, #15
    9710:	mov	x4, x3
    9714:	mov	x3, x2
    9718:	ubfx	x2, x1, #0, #48
    971c:	mov	x1, #0x7fff                	// #32767
    9720:	ubfx	x7, x0, #0, #48
    9724:	cmp	x5, x1
    9728:	ubfx	x1, x0, #48, #15
    972c:	b.eq	9748 <__unordtf2@@GCC_4.5.0+0x58>  // b.none
    9730:	mov	x6, #0x7fff                	// #32767
    9734:	mov	w0, #0x0                   	// #0
    9738:	cmp	x1, x6
    973c:	b.eq	976c <__unordtf2@@GCC_4.5.0+0x7c>  // b.none
    9740:	ldp	x29, x30, [sp], #48
    9744:	ret
    9748:	orr	x0, x4, x2
    974c:	cbz	x0, 9730 <__unordtf2@@GCC_4.5.0+0x40>
    9750:	tst	x2, #0x800000000000
    9754:	b.ne	978c <__unordtf2@@GCC_4.5.0+0x9c>  // b.any
    9758:	mov	w0, #0x1                   	// #1
    975c:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    9760:	mov	w0, #0x1                   	// #1
    9764:	ldp	x29, x30, [sp], #48
    9768:	ret
    976c:	orr	x3, x7, x3
    9770:	cbz	x3, 9740 <__unordtf2@@GCC_4.5.0+0x50>
    9774:	cmp	x5, x1
    9778:	b.eq	97a0 <__unordtf2@@GCC_4.5.0+0xb0>  // b.none
    977c:	tst	x7, #0x800000000000
    9780:	mov	w0, #0x1                   	// #1
    9784:	b.ne	9740 <__unordtf2@@GCC_4.5.0+0x50>  // b.any
    9788:	b	9758 <__unordtf2@@GCC_4.5.0+0x68>
    978c:	cmp	x1, x5
    9790:	mov	w0, #0x1                   	// #1
    9794:	b.ne	9740 <__unordtf2@@GCC_4.5.0+0x50>  // b.any
    9798:	orr	x3, x7, x3
    979c:	b	97b0 <__unordtf2@@GCC_4.5.0+0xc0>
    97a0:	orr	x4, x4, x2
    97a4:	cbz	x4, 977c <__unordtf2@@GCC_4.5.0+0x8c>
    97a8:	tst	x2, #0x800000000000
    97ac:	b.eq	9758 <__unordtf2@@GCC_4.5.0+0x68>  // b.none
    97b0:	mov	w0, #0x1                   	// #1
    97b4:	cbz	x3, 9740 <__unordtf2@@GCC_4.5.0+0x50>
    97b8:	b	977c <__unordtf2@@GCC_4.5.0+0x8c>
    97bc:	nop

00000000000097c0 <__fixtfsi@@GCC_3.0>:
    97c0:	stp	x29, x30, [sp, #-48]!
    97c4:	mov	x29, sp
    97c8:	str	x19, [sp, #16]
    97cc:	str	q0, [sp, #32]
    97d0:	ldp	x0, x1, [sp, #32]
    97d4:	mrs	x2, fpcr
    97d8:	mov	x3, x0
    97dc:	ubfx	x4, x1, #48, #15
    97e0:	mov	x0, #0x3ffe                	// #16382
    97e4:	cmp	x4, x0
    97e8:	ubfx	x0, x1, #0, #48
    97ec:	b.gt	9818 <__fixtfsi@@GCC_3.0+0x58>
    97f0:	cbnz	x4, 9894 <__fixtfsi@@GCC_3.0+0xd4>
    97f4:	orr	x0, x0, x3
    97f8:	mov	w19, #0x0                   	// #0
    97fc:	cbz	x0, 9808 <__fixtfsi@@GCC_3.0+0x48>
    9800:	mov	w0, #0x10                  	// #16
    9804:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    9808:	mov	w0, w19
    980c:	ldr	x19, [sp, #16]
    9810:	ldp	x29, x30, [sp], #48
    9814:	ret
    9818:	lsr	x19, x1, #63
    981c:	mov	x5, #0x401d                	// #16413
    9820:	and	w2, w19, #0xff
    9824:	cmp	x4, x5
    9828:	b.le	985c <__fixtfsi@@GCC_3.0+0x9c>
    982c:	mov	x1, #0x401e                	// #16414
    9830:	cmp	x4, x1
    9834:	mov	w19, #0x7fffffff            	// #2147483647
    9838:	csel	w1, w2, wzr, eq  // eq = none
    983c:	add	w19, w2, w19
    9840:	cbz	w1, 98a4 <__fixtfsi@@GCC_3.0+0xe4>
    9844:	cmp	xzr, x0, lsr #17
    9848:	b.ne	98a4 <__fixtfsi@@GCC_3.0+0xe4>  // b.any
    984c:	orr	x0, x3, x0, lsl #47
    9850:	cbz	x0, 9808 <__fixtfsi@@GCC_3.0+0x48>
    9854:	mov	w0, #0x10                  	// #16
    9858:	b	9804 <__fixtfsi@@GCC_3.0+0x44>
    985c:	mov	x1, x4
    9860:	orr	x0, x0, #0x1000000000000
    9864:	mov	w19, #0x402f                	// #16431
    9868:	mov	w4, #0xffffc011            	// #-16367
    986c:	add	w4, w1, w4
    9870:	sub	w1, w19, w1
    9874:	cmp	w2, #0x0
    9878:	lsr	x19, x0, x1
    987c:	cneg	w19, w19, ne  // ne = any
    9880:	lsl	x0, x0, x4
    9884:	orr	x0, x0, x3
    9888:	cbz	x0, 9808 <__fixtfsi@@GCC_3.0+0x48>
    988c:	mov	w0, #0x10                  	// #16
    9890:	b	9804 <__fixtfsi@@GCC_3.0+0x44>
    9894:	mov	w19, #0x0                   	// #0
    9898:	mov	w0, #0x10                  	// #16
    989c:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    98a0:	b	9808 <__fixtfsi@@GCC_3.0+0x48>
    98a4:	mov	w0, #0x1                   	// #1
    98a8:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    98ac:	b	9808 <__fixtfsi@@GCC_3.0+0x48>

00000000000098b0 <__fixunstfsi@@GCC_3.0>:
    98b0:	stp	x29, x30, [sp, #-48]!
    98b4:	mov	x29, sp
    98b8:	str	x19, [sp, #16]
    98bc:	str	q0, [sp, #32]
    98c0:	ldp	x0, x1, [sp, #32]
    98c4:	mrs	x2, fpcr
    98c8:	ubfx	x3, x1, #48, #15
    98cc:	mov	x4, #0x3ffe                	// #16382
    98d0:	mov	x2, x0
    98d4:	cmp	x3, x4
    98d8:	ubfx	x19, x1, #0, #48
    98dc:	b.gt	991c <__fixunstfsi@@GCC_3.0+0x6c>
    98e0:	cbnz	x3, 9900 <__fixunstfsi@@GCC_3.0+0x50>
    98e4:	orr	x0, x0, x19
    98e8:	mov	w19, #0x0                   	// #0
    98ec:	cbnz	x0, 9900 <__fixunstfsi@@GCC_3.0+0x50>
    98f0:	mov	w0, w19
    98f4:	ldr	x19, [sp, #16]
    98f8:	ldp	x29, x30, [sp], #48
    98fc:	ret
    9900:	mov	w0, #0x10                  	// #16
    9904:	mov	w19, #0x0                   	// #0
    9908:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    990c:	mov	w0, w19
    9910:	ldr	x19, [sp, #16]
    9914:	ldp	x29, x30, [sp], #48
    9918:	ret
    991c:	lsr	x0, x1, #63
    9920:	mov	x4, #0x401f                	// #16415
    9924:	and	w0, w0, #0xff
    9928:	mov	x5, #0x401e                	// #16414
    992c:	ands	x6, x0, #0xff
    9930:	csel	x4, x4, x5, eq  // eq = none
    9934:	cmp	x4, x3
    9938:	b.le	9950 <__fixunstfsi@@GCC_3.0+0xa0>
    993c:	cbz	x6, 9960 <__fixunstfsi@@GCC_3.0+0xb0>
    9940:	mov	w0, #0x1                   	// #1
    9944:	mov	w19, #0x0                   	// #0
    9948:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    994c:	b	990c <__fixunstfsi@@GCC_3.0+0x5c>
    9950:	sub	w19, w0, #0x1
    9954:	mov	w0, #0x1                   	// #1
    9958:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    995c:	b	990c <__fixunstfsi@@GCC_3.0+0x5c>
    9960:	mov	x1, x3
    9964:	orr	x0, x19, #0x1000000000000
    9968:	mov	w3, #0xffffc011            	// #-16367
    996c:	mov	w19, #0x402f                	// #16431
    9970:	add	w3, w1, w3
    9974:	sub	w1, w19, w1
    9978:	lsl	x3, x0, x3
    997c:	orr	x2, x3, x2
    9980:	lsr	x19, x0, x1
    9984:	mov	w0, #0x10                  	// #16
    9988:	cbnz	x2, 9908 <__fixunstfsi@@GCC_3.0+0x58>
    998c:	b	98f0 <__fixunstfsi@@GCC_3.0+0x40>

0000000000009990 <__floatsitf@@GCC_3.0>:
    9990:	cmp	w0, #0x0
    9994:	cbz	w0, 99e0 <__floatsitf@@GCC_3.0+0x50>
    9998:	cneg	w1, w0, lt  // lt = tstop
    999c:	mov	w4, #0x403e                	// #16446
    99a0:	clz	x3, x1
    99a4:	mov	w2, #0x402f                	// #16431
    99a8:	sub	w4, w4, w3
    99ac:	lsr	w0, w0, #31
    99b0:	sub	w2, w2, w4
    99b4:	mov	x3, #0x0                   	// #0
    99b8:	and	w4, w4, #0x7fff
    99bc:	lsl	x1, x1, x2
    99c0:	and	x1, x1, #0xffffffffffff
    99c4:	orr	w0, w4, w0, lsl #15
    99c8:	mov	x2, #0x0                   	// #0
    99cc:	bfxil	x3, x1, #0, #48
    99d0:	fmov	d0, x2
    99d4:	bfi	x3, x0, #48, #16
    99d8:	fmov	v0.d[1], x3
    99dc:	ret
    99e0:	mov	w4, #0x0                   	// #0
    99e4:	mov	x1, #0x0                   	// #0
    99e8:	mov	w0, #0x0                   	// #0
    99ec:	mov	x3, #0x0                   	// #0
    99f0:	orr	w0, w4, w0, lsl #15
    99f4:	bfxil	x3, x1, #0, #48
    99f8:	mov	x2, #0x0                   	// #0
    99fc:	fmov	d0, x2
    9a00:	bfi	x3, x0, #48, #16
    9a04:	fmov	v0.d[1], x3
    9a08:	ret
    9a0c:	nop

0000000000009a10 <__floatunsitf@@GCC_4.2.0>:
    9a10:	cbz	w0, 9a54 <__floatunsitf@@GCC_4.2.0+0x44>
    9a14:	mov	w0, w0
    9a18:	mov	w1, #0x403e                	// #16446
    9a1c:	clz	x3, x0
    9a20:	mov	w2, #0x402f                	// #16431
    9a24:	sub	w1, w1, w3
    9a28:	mov	x3, #0x0                   	// #0
    9a2c:	sub	w2, w2, w1
    9a30:	and	w1, w1, #0x7fff
    9a34:	lsl	x0, x0, x2
    9a38:	and	x0, x0, #0xffffffffffff
    9a3c:	mov	x2, #0x0                   	// #0
    9a40:	fmov	d0, x2
    9a44:	bfxil	x3, x0, #0, #48
    9a48:	bfi	x3, x1, #48, #16
    9a4c:	fmov	v0.d[1], x3
    9a50:	ret
    9a54:	mov	x0, #0x0                   	// #0
    9a58:	mov	x3, #0x0                   	// #0
    9a5c:	bfxil	x3, x0, #0, #48
    9a60:	mov	x2, #0x0                   	// #0
    9a64:	fmov	d0, x2
    9a68:	mov	w1, #0x0                   	// #0
    9a6c:	bfi	x3, x1, #48, #16
    9a70:	fmov	v0.d[1], x3
    9a74:	ret

0000000000009a78 <__fixtfdi@@GCC_3.0>:
    9a78:	stp	x29, x30, [sp, #-48]!
    9a7c:	mov	x29, sp
    9a80:	str	x19, [sp, #16]
    9a84:	str	q0, [sp, #32]
    9a88:	ldp	x2, x0, [sp, #32]
    9a8c:	mrs	x1, fpcr
    9a90:	ubfx	x19, x0, #48, #15
    9a94:	mov	x3, #0x3ffe                	// #16382
    9a98:	ubfx	x4, x0, #0, #48
    9a9c:	cmp	x19, x3
    9aa0:	b.gt	9ac8 <__fixtfdi@@GCC_3.0+0x50>
    9aa4:	cbnz	x19, 9b68 <__fixtfdi@@GCC_3.0+0xf0>
    9aa8:	orr	x2, x4, x2
    9aac:	cbz	x2, 9ab8 <__fixtfdi@@GCC_3.0+0x40>
    9ab0:	mov	w0, #0x10                  	// #16
    9ab4:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    9ab8:	mov	x0, x19
    9abc:	ldr	x19, [sp, #16]
    9ac0:	ldp	x29, x30, [sp], #48
    9ac4:	ret
    9ac8:	lsr	x1, x0, #63
    9acc:	and	w3, w1, #0xff
    9ad0:	mov	x1, #0x403d                	// #16445
    9ad4:	cmp	x19, x1
    9ad8:	b.le	9b10 <__fixtfdi@@GCC_3.0+0x98>
    9adc:	mov	x0, #0x403e                	// #16446
    9ae0:	and	x5, x3, #0xff
    9ae4:	cmp	x19, x0
    9ae8:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    9aec:	csel	w1, w3, wzr, eq  // eq = none
    9af0:	add	x19, x5, x0
    9af4:	cbz	w1, 9b78 <__fixtfdi@@GCC_3.0+0x100>
    9af8:	extr	x4, x4, x2, #49
    9afc:	cbnz	x4, 9b78 <__fixtfdi@@GCC_3.0+0x100>
    9b00:	cmp	xzr, x2, lsl #15
    9b04:	b.eq	9ab8 <__fixtfdi@@GCC_3.0+0x40>  // b.none
    9b08:	mov	w0, #0x10                  	// #16
    9b0c:	b	9ab4 <__fixtfdi@@GCC_3.0+0x3c>
    9b10:	mov	x5, #0x406f                	// #16495
    9b14:	sub	x1, x5, x19
    9b18:	mov	x0, x19
    9b1c:	cmp	x1, #0x3f
    9b20:	orr	x19, x4, #0x1000000000000
    9b24:	b.le	9b84 <__fixtfdi@@GCC_3.0+0x10c>
    9b28:	mov	w4, #0xffffc011            	// #-16367
    9b2c:	add	w4, w0, w4
    9b30:	cmp	x1, #0x40
    9b34:	mov	w1, #0x402f                	// #16431
    9b38:	sub	w0, w1, w0
    9b3c:	lsl	x1, x19, x4
    9b40:	orr	x1, x2, x1
    9b44:	csel	x2, x1, x2, ne  // ne = any
    9b48:	lsr	x19, x19, x0
    9b4c:	cmp	x2, #0x0
    9b50:	cset	w0, ne  // ne = any
    9b54:	cmp	w3, #0x0
    9b58:	cneg	x19, x19, ne  // ne = any
    9b5c:	cbz	w0, 9ab8 <__fixtfdi@@GCC_3.0+0x40>
    9b60:	mov	w0, #0x10                  	// #16
    9b64:	b	9ab4 <__fixtfdi@@GCC_3.0+0x3c>
    9b68:	mov	x19, #0x0                   	// #0
    9b6c:	mov	w0, #0x10                  	// #16
    9b70:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    9b74:	b	9ab8 <__fixtfdi@@GCC_3.0+0x40>
    9b78:	mov	w0, #0x1                   	// #1
    9b7c:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    9b80:	b	9ab8 <__fixtfdi@@GCC_3.0+0x40>
    9b84:	mov	w6, #0xffffbfd1            	// #-16431
    9b88:	add	w4, w0, w6
    9b8c:	sub	w0, w5, w0
    9b90:	lsl	x1, x2, x4
    9b94:	cmp	x1, #0x0
    9b98:	lsr	x2, x2, x0
    9b9c:	cset	w0, ne  // ne = any
    9ba0:	lsl	x19, x19, x4
    9ba4:	orr	x19, x2, x19
    9ba8:	b	9b54 <__fixtfdi@@GCC_3.0+0xdc>
    9bac:	nop

0000000000009bb0 <__fixunstfdi@@GCC_3.0>:
    9bb0:	stp	x29, x30, [sp, #-48]!
    9bb4:	mov	x29, sp
    9bb8:	str	x19, [sp, #16]
    9bbc:	str	q0, [sp, #32]
    9bc0:	ldr	x19, [sp, #32]
    9bc4:	ldr	x1, [sp, #40]
    9bc8:	mrs	x0, fpcr
    9bcc:	ubfx	x3, x1, #48, #15
    9bd0:	mov	x2, x19
    9bd4:	mov	x4, #0x3ffe                	// #16382
    9bd8:	ubfx	x19, x1, #0, #48
    9bdc:	cmp	x3, x4
    9be0:	b.gt	9c0c <__fixunstfdi@@GCC_3.0+0x5c>
    9be4:	cbnz	x3, 9bf0 <__fixunstfdi@@GCC_3.0+0x40>
    9be8:	orr	x19, x2, x19
    9bec:	cbz	x19, 9bfc <__fixunstfdi@@GCC_3.0+0x4c>
    9bf0:	mov	w0, #0x10                  	// #16
    9bf4:	mov	x19, #0x0                   	// #0
    9bf8:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    9bfc:	mov	x0, x19
    9c00:	ldr	x19, [sp, #16]
    9c04:	ldp	x29, x30, [sp], #48
    9c08:	ret
    9c0c:	lsr	x0, x1, #63
    9c10:	mov	x4, #0x403f                	// #16447
    9c14:	and	w0, w0, #0xff
    9c18:	and	x5, x0, #0xff
    9c1c:	sub	x4, x4, x5
    9c20:	cmp	x4, x3
    9c24:	b.le	9c78 <__fixunstfdi@@GCC_3.0+0xc8>
    9c28:	cbnz	x5, 9c8c <__fixunstfdi@@GCC_3.0+0xdc>
    9c2c:	mov	x1, x3
    9c30:	mov	x0, #0x406f                	// #16495
    9c34:	sub	x3, x0, x3
    9c38:	orr	x4, x19, #0x1000000000000
    9c3c:	cmp	x3, #0x3f
    9c40:	b.gt	9c9c <__fixunstfdi@@GCC_3.0+0xec>
    9c44:	mov	w3, #0xffffbfd1            	// #-16431
    9c48:	add	w3, w1, w3
    9c4c:	sub	w1, w0, w1
    9c50:	lsl	x0, x2, x3
    9c54:	cmp	x0, #0x0
    9c58:	lsr	x19, x2, x1
    9c5c:	cset	w0, ne  // ne = any
    9c60:	lsl	x4, x4, x3
    9c64:	orr	x19, x19, x4
    9c68:	cbz	w0, 9bfc <__fixunstfdi@@GCC_3.0+0x4c>
    9c6c:	mov	w0, #0x10                  	// #16
    9c70:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    9c74:	b	9bfc <__fixunstfdi@@GCC_3.0+0x4c>
    9c78:	eor	w19, w0, #0x1
    9c7c:	mov	w0, #0x1                   	// #1
    9c80:	sbfx	x19, x19, #0, #1
    9c84:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    9c88:	b	9bfc <__fixunstfdi@@GCC_3.0+0x4c>
    9c8c:	mov	w0, #0x1                   	// #1
    9c90:	mov	x19, #0x0                   	// #0
    9c94:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    9c98:	b	9bfc <__fixunstfdi@@GCC_3.0+0x4c>
    9c9c:	mov	w0, #0xffffc011            	// #-16367
    9ca0:	add	w5, w1, w0
    9ca4:	mov	w0, #0x402f                	// #16431
    9ca8:	cmp	x3, #0x40
    9cac:	sub	w1, w0, w1
    9cb0:	lsl	x0, x4, x5
    9cb4:	orr	x0, x2, x0
    9cb8:	csel	x2, x0, x2, ne  // ne = any
    9cbc:	lsr	x19, x4, x1
    9cc0:	cmp	x2, #0x0
    9cc4:	cset	w0, ne  // ne = any
    9cc8:	b	9c68 <__fixunstfdi@@GCC_3.0+0xb8>
    9ccc:	nop

0000000000009cd0 <__floatditf@@GCC_3.0>:
    9cd0:	cmp	x0, #0x0
    9cd4:	cbz	x0, 9d38 <__floatditf@@GCC_3.0+0x68>
    9cd8:	cneg	x1, x0, lt  // lt = tstop
    9cdc:	mov	w2, #0x403e                	// #16446
    9ce0:	clz	x3, x1
    9ce4:	mov	x4, #0x406f                	// #16495
    9ce8:	sub	w2, w2, w3
    9cec:	lsr	x0, x0, #63
    9cf0:	and	w0, w0, #0xff
    9cf4:	and	w5, w2, #0x7fff
    9cf8:	sub	x3, x4, w2, sxtw
    9cfc:	cmp	x3, #0x3f
    9d00:	b.gt	9d64 <__floatditf@@GCC_3.0+0x94>
    9d04:	sub	w4, w4, w2
    9d08:	mov	w3, #0xffffbfd1            	// #-16431
    9d0c:	add	w2, w2, w3
    9d10:	mov	x3, #0x0                   	// #0
    9d14:	lsl	x4, x1, x4
    9d18:	orr	w0, w5, w0, lsl #15
    9d1c:	lsr	x1, x1, x2
    9d20:	and	x1, x1, #0xffffffffffff
    9d24:	fmov	d0, x4
    9d28:	bfxil	x3, x1, #0, #48
    9d2c:	bfi	x3, x0, #48, #16
    9d30:	fmov	v0.d[1], x3
    9d34:	ret
    9d38:	mov	w5, #0x0                   	// #0
    9d3c:	mov	x1, #0x0                   	// #0
    9d40:	mov	w0, #0x0                   	// #0
    9d44:	mov	x3, #0x0                   	// #0
    9d48:	orr	w0, w5, w0, lsl #15
    9d4c:	bfxil	x3, x1, #0, #48
    9d50:	mov	x4, #0x0                   	// #0
    9d54:	fmov	d0, x4
    9d58:	bfi	x3, x0, #48, #16
    9d5c:	fmov	v0.d[1], x3
    9d60:	ret
    9d64:	mov	w3, #0x402f                	// #16431
    9d68:	sub	w2, w3, w2
    9d6c:	mov	x3, #0x0                   	// #0
    9d70:	orr	w0, w5, w0, lsl #15
    9d74:	lsl	x1, x1, x2
    9d78:	and	x1, x1, #0xffffffffffff
    9d7c:	mov	x4, #0x0                   	// #0
    9d80:	fmov	d0, x4
    9d84:	bfxil	x3, x1, #0, #48
    9d88:	bfi	x3, x0, #48, #16
    9d8c:	fmov	v0.d[1], x3
    9d90:	ret
    9d94:	nop

0000000000009d98 <__floatunditf@@GCC_4.2.0>:
    9d98:	cbz	x0, 9dec <__floatunditf@@GCC_4.2.0+0x54>
    9d9c:	clz	x2, x0
    9da0:	mov	w1, #0x403e                	// #16446
    9da4:	sub	w1, w1, w2
    9da8:	mov	x2, #0x406f                	// #16495
    9dac:	and	w4, w1, #0x7fff
    9db0:	sub	x3, x2, w1, sxtw
    9db4:	cmp	x3, #0x3f
    9db8:	b.gt	9e0c <__floatunditf@@GCC_4.2.0+0x74>
    9dbc:	sub	w2, w2, w1
    9dc0:	mov	w3, #0xffffbfd1            	// #-16431
    9dc4:	add	w1, w1, w3
    9dc8:	mov	x3, #0x0                   	// #0
    9dcc:	lsr	x1, x0, x1
    9dd0:	and	x1, x1, #0xffffffffffff
    9dd4:	lsl	x0, x0, x2
    9dd8:	fmov	d0, x0
    9ddc:	bfxil	x3, x1, #0, #48
    9de0:	bfi	x3, x4, #48, #16
    9de4:	fmov	v0.d[1], x3
    9de8:	ret
    9dec:	mov	x1, #0x0                   	// #0
    9df0:	mov	x3, #0x0                   	// #0
    9df4:	bfxil	x3, x1, #0, #48
    9df8:	fmov	d0, x0
    9dfc:	mov	w4, #0x0                   	// #0
    9e00:	bfi	x3, x4, #48, #16
    9e04:	fmov	v0.d[1], x3
    9e08:	ret
    9e0c:	mov	w2, #0x402f                	// #16431
    9e10:	sub	w1, w2, w1
    9e14:	mov	x3, #0x0                   	// #0
    9e18:	lsl	x1, x0, x1
    9e1c:	and	x1, x1, #0xffffffffffff
    9e20:	mov	x0, #0x0                   	// #0
    9e24:	fmov	d0, x0
    9e28:	bfxil	x3, x1, #0, #48
    9e2c:	bfi	x3, x4, #48, #16
    9e30:	fmov	v0.d[1], x3
    9e34:	ret

0000000000009e38 <__fixtfti@@GCC_3.0>:
    9e38:	stp	x29, x30, [sp, #-48]!
    9e3c:	mov	x29, sp
    9e40:	str	x19, [sp, #16]
    9e44:	str	q0, [sp, #32]
    9e48:	ldp	x3, x0, [sp, #32]
    9e4c:	mrs	x1, fpcr
    9e50:	ubfx	x4, x0, #48, #15
    9e54:	mov	x6, x3
    9e58:	mov	x5, #0x3ffe                	// #16382
    9e5c:	ubfx	x3, x0, #0, #48
    9e60:	cmp	x4, x5
    9e64:	b.gt	9e94 <__fixtfti@@GCC_3.0+0x5c>
    9e68:	cbz	x4, 9f54 <__fixtfti@@GCC_3.0+0x11c>
    9e6c:	mov	x19, #0x0                   	// #0
    9e70:	mov	x1, #0x0                   	// #0
    9e74:	mov	w0, #0x10                  	// #16
    9e78:	str	x1, [sp, #32]
    9e7c:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    9e80:	ldr	x1, [sp, #32]
    9e84:	mov	x0, x19
    9e88:	ldr	x19, [sp, #16]
    9e8c:	ldp	x29, x30, [sp], #48
    9e90:	ret
    9e94:	lsr	x2, x0, #63
    9e98:	mov	x1, #0x407d                	// #16509
    9e9c:	and	w2, w2, #0xff
    9ea0:	cmp	x4, x1
    9ea4:	and	x7, x2, #0xff
    9ea8:	b.le	9ee4 <__fixtfti@@GCC_3.0+0xac>
    9eac:	adrp	x1, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    9eb0:	mov	x0, #0x1                   	// #1
    9eb4:	sub	x19, x0, x7
    9eb8:	mov	x5, #0x407e                	// #16510
    9ebc:	ldr	x1, [x1, #2024]
    9ec0:	asr	x7, x19, #63
    9ec4:	negs	x19, x19
    9ec8:	sbc	x1, x1, x7
    9ecc:	cmp	x4, x5
    9ed0:	csel	w2, w2, wzr, eq  // eq = none
    9ed4:	cbz	w2, 9e78 <__fixtfti@@GCC_3.0+0x40>
    9ed8:	orr	x3, x6, x3
    9edc:	cbnz	x3, 9e78 <__fixtfti@@GCC_3.0+0x40>
    9ee0:	b	9e84 <__fixtfti@@GCC_3.0+0x4c>
    9ee4:	mov	x1, #0x406e                	// #16494
    9ee8:	mov	x0, x4
    9eec:	orr	x5, x3, #0x1000000000000
    9ef0:	cmp	x4, x1
    9ef4:	b.gt	9f6c <__fixtfti@@GCC_3.0+0x134>
    9ef8:	mov	x3, #0x406f                	// #16495
    9efc:	sub	x4, x3, x4
    9f00:	cmp	x4, #0x3f
    9f04:	b.gt	9fbc <__fixtfti@@GCC_3.0+0x184>
    9f08:	mov	w2, #0xffffbfd1            	// #-16431
    9f0c:	add	w2, w0, w2
    9f10:	sub	w0, w3, w0
    9f14:	mov	x19, #0x0                   	// #0
    9f18:	lsl	x1, x6, x2
    9f1c:	cmp	x1, #0x0
    9f20:	lsr	x3, x6, x0
    9f24:	cset	w4, ne  // ne = any
    9f28:	lsl	x2, x5, x2
    9f2c:	orr	x1, x2, x3
    9f30:	lsr	x0, x5, x0
    9f34:	adds	x19, x1, x19
    9f38:	cinc	x1, x0, cs  // cs = hs, nlast
    9f3c:	cbz	x7, 9f48 <__fixtfti@@GCC_3.0+0x110>
    9f40:	negs	x19, x19
    9f44:	ngc	x1, x1
    9f48:	cbz	w4, 9e84 <__fixtfti@@GCC_3.0+0x4c>
    9f4c:	mov	w0, #0x10                  	// #16
    9f50:	b	9e78 <__fixtfti@@GCC_3.0+0x40>
    9f54:	orr	x3, x6, x3
    9f58:	mov	x19, #0x0                   	// #0
    9f5c:	mov	x1, #0x0                   	// #0
    9f60:	cbz	x3, 9e84 <__fixtfti@@GCC_3.0+0x4c>
    9f64:	mov	w0, #0x10                  	// #16
    9f68:	b	9e78 <__fixtfti@@GCC_3.0+0x40>
    9f6c:	mov	w3, #0xffffbf91            	// #-16495
    9f70:	add	w2, w4, w3
    9f74:	mov	w3, #0x3f                  	// #63
    9f78:	sub	w4, w3, w2
    9f7c:	lsr	x3, x6, #1
    9f80:	mov	x19, x6
    9f84:	mov	w6, #0xffffbf51            	// #-16559
    9f88:	add	w0, w0, w6
    9f8c:	cmp	w0, #0x0
    9f90:	lsr	x3, x3, x4
    9f94:	lsl	x1, x5, x2
    9f98:	orr	x1, x3, x1
    9f9c:	lsl	x3, x19, x0
    9fa0:	csel	x1, x3, x1, ge  // ge = tcont
    9fa4:	lsl	x19, x19, x2
    9fa8:	csel	x19, xzr, x19, ge  // ge = tcont
    9fac:	cbz	x7, 9e84 <__fixtfti@@GCC_3.0+0x4c>
    9fb0:	negs	x19, x19
    9fb4:	ngc	x1, x1
    9fb8:	b	9e84 <__fixtfti@@GCC_3.0+0x4c>
    9fbc:	mov	w1, #0xffffc011            	// #-16367
    9fc0:	add	w2, w0, w1
    9fc4:	mov	w1, #0x402f                	// #16431
    9fc8:	cmp	x4, #0x40
    9fcc:	sub	w0, w1, w0
    9fd0:	lsl	x1, x5, x2
    9fd4:	orr	x1, x6, x1
    9fd8:	mov	x19, #0x0                   	// #0
    9fdc:	csel	x6, x1, x6, ne  // ne = any
    9fe0:	lsr	x1, x5, x0
    9fe4:	cmp	x6, #0x0
    9fe8:	mov	x0, #0x0                   	// #0
    9fec:	cset	w4, ne  // ne = any
    9ff0:	b	9f34 <__fixtfti@@GCC_3.0+0xfc>
    9ff4:	nop

0000000000009ff8 <__fixunstfti@@GCC_3.0>:
    9ff8:	stp	x29, x30, [sp, #-48]!
    9ffc:	mov	x29, sp
    a000:	str	x19, [sp, #16]
    a004:	str	q0, [sp, #32]
    a008:	ldp	x1, x0, [sp, #32]
    a00c:	mrs	x2, fpcr
    a010:	ubfx	x4, x0, #48, #15
    a014:	mov	x2, #0x3ffe                	// #16382
    a018:	mov	x3, x1
    a01c:	cmp	x4, x2
    a020:	ubfx	x5, x0, #0, #48
    a024:	b.gt	a070 <__fixunstfti@@GCC_3.0+0x78>
    a028:	cbz	x4, a054 <__fixunstfti@@GCC_3.0+0x5c>
    a02c:	mov	w0, #0x10                  	// #16
    a030:	mov	x19, #0x0                   	// #0
    a034:	mov	x1, #0x0                   	// #0
    a038:	str	x1, [sp, #32]
    a03c:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    a040:	ldr	x1, [sp, #32]
    a044:	mov	x0, x19
    a048:	ldr	x19, [sp, #16]
    a04c:	ldp	x29, x30, [sp], #48
    a050:	ret
    a054:	orr	x1, x1, x5
    a058:	mov	x19, #0x0                   	// #0
    a05c:	cbnz	x1, a02c <__fixunstfti@@GCC_3.0+0x34>
    a060:	mov	x0, x19
    a064:	ldr	x19, [sp, #16]
    a068:	ldp	x29, x30, [sp], #48
    a06c:	ret
    a070:	lsr	x1, x0, #63
    a074:	mov	x2, #0x407f                	// #16511
    a078:	and	w1, w1, #0xff
    a07c:	and	x6, x1, #0xff
    a080:	sub	x2, x2, x6
    a084:	cmp	x2, x4
    a088:	b.le	a0e8 <__fixunstfti@@GCC_3.0+0xf0>
    a08c:	cbnz	x6, a0fc <__fixunstfti@@GCC_3.0+0x104>
    a090:	mov	x1, #0x406e                	// #16494
    a094:	mov	x0, x4
    a098:	orr	x5, x5, #0x1000000000000
    a09c:	cmp	x4, x1
    a0a0:	b.le	a10c <__fixunstfti@@GCC_3.0+0x114>
    a0a4:	adds	x3, x3, x6
    a0a8:	mov	w2, #0x3f                  	// #63
    a0ac:	mov	w6, #0xffffbf91            	// #-16495
    a0b0:	add	w19, w4, w6
    a0b4:	sub	w4, w2, w19
    a0b8:	lsr	x2, x3, #1
    a0bc:	mov	w7, #0xffffbf51            	// #-16559
    a0c0:	add	w0, w0, w7
    a0c4:	cmp	w0, #0x0
    a0c8:	lsl	x1, x5, x19
    a0cc:	lsr	x2, x2, x4
    a0d0:	orr	x1, x2, x1
    a0d4:	lsl	x19, x3, x19
    a0d8:	csel	x19, xzr, x19, ge  // ge = tcont
    a0dc:	lsl	x2, x3, x0
    a0e0:	csel	x1, x2, x1, ge  // ge = tcont
    a0e4:	b	a044 <__fixunstfti@@GCC_3.0+0x4c>
    a0e8:	eor	w1, w1, #0x1
    a0ec:	mov	w0, #0x1                   	// #1
    a0f0:	sbfx	x19, x1, #0, #1
    a0f4:	mov	x1, x19
    a0f8:	b	a038 <__fixunstfti@@GCC_3.0+0x40>
    a0fc:	mov	w0, #0x1                   	// #1
    a100:	mov	x19, #0x0                   	// #0
    a104:	mov	x1, #0x0                   	// #0
    a108:	b	a038 <__fixunstfti@@GCC_3.0+0x40>
    a10c:	mov	x2, #0x406f                	// #16495
    a110:	sub	x4, x2, x4
    a114:	cmp	x4, #0x3f
    a118:	b.le	a168 <__fixunstfti@@GCC_3.0+0x170>
    a11c:	mov	w1, #0xffffc011            	// #-16367
    a120:	add	w1, w0, w1
    a124:	cmp	x4, #0x40
    a128:	mov	w2, #0x402f                	// #16431
    a12c:	lsl	x1, x5, x1
    a130:	orr	x1, x3, x1
    a134:	csel	x3, x1, x3, ne  // ne = any
    a138:	sub	w0, w2, w0
    a13c:	cmp	x3, #0x0
    a140:	mov	x19, #0x0                   	// #0
    a144:	cset	w2, ne  // ne = any
    a148:	lsr	x0, x5, x0
    a14c:	mov	x1, #0x0                   	// #0
    a150:	adds	x3, x0, x19
    a154:	mov	w0, #0x10                  	// #16
    a158:	mov	x19, x3
    a15c:	cinc	x1, x1, cs  // cs = hs, nlast
    a160:	cbnz	w2, a038 <__fixunstfti@@GCC_3.0+0x40>
    a164:	b	a044 <__fixunstfti@@GCC_3.0+0x4c>
    a168:	mov	w4, #0xffffbfd1            	// #-16431
    a16c:	add	w4, w0, w4
    a170:	sub	w1, w2, w0
    a174:	mov	x19, #0x0                   	// #0
    a178:	lsl	x0, x3, x4
    a17c:	cmp	x0, #0x0
    a180:	lsl	x4, x5, x4
    a184:	cset	w2, ne  // ne = any
    a188:	lsr	x0, x3, x1
    a18c:	orr	x0, x4, x0
    a190:	lsr	x1, x5, x1
    a194:	b	a150 <__fixunstfti@@GCC_3.0+0x158>

000000000000a198 <__floattitf@@GCC_3.0>:
    a198:	mrs	x9, fpcr
    a19c:	orr	x2, x0, x1
    a1a0:	cbz	x2, a260 <__floattitf@@GCC_3.0+0xc8>
    a1a4:	lsr	x4, x1, #63
    a1a8:	mov	x2, x1
    a1ac:	and	w8, w4, #0xff
    a1b0:	tbnz	x1, #63, a28c <__floattitf@@GCC_3.0+0xf4>
    a1b4:	mov	x3, x2
    a1b8:	cbz	x2, a29c <__floattitf@@GCC_3.0+0x104>
    a1bc:	clz	x4, x2
    a1c0:	mov	w5, #0x407e                	// #16510
    a1c4:	sub	w5, w5, w4
    a1c8:	mov	w4, #0x406f                	// #16495
    a1cc:	cmp	w5, w4
    a1d0:	sxtw	x7, w5
    a1d4:	b.le	a3ec <__floattitf@@GCC_3.0+0x254>
    a1d8:	mov	w2, #0x4072                	// #16498
    a1dc:	cmp	w5, w2
    a1e0:	b.gt	a2e8 <__floattitf@@GCC_3.0+0x150>
    a1e4:	mov	x4, #0x4072                	// #16498
    a1e8:	cmp	x7, x4
    a1ec:	b.eq	a20c <__floattitf@@GCC_3.0+0x74>  // b.none
    a1f0:	sub	w2, w2, w5
    a1f4:	mov	w4, #0xffffbfce            	// #-16434
    a1f8:	add	w5, w5, w4
    a1fc:	lsl	x3, x3, x2
    a200:	lsr	x5, x0, x5
    a204:	orr	x3, x5, x3
    a208:	lsl	x0, x0, x2
    a20c:	and	x5, x3, #0xfff7ffffffffffff
    a210:	tst	x0, #0x7
    a214:	mov	w4, #0x0                   	// #0
    a218:	b.eq	a238 <__floattitf@@GCC_3.0+0xa0>  // b.none
    a21c:	and	x2, x9, #0xc00000
    a220:	mov	w4, #0x10                  	// #16
    a224:	cmp	x2, #0x400, lsl #12
    a228:	b.eq	a3a4 <__floattitf@@GCC_3.0+0x20c>  // b.none
    a22c:	cmp	x2, #0x800, lsl #12
    a230:	b.eq	a3e4 <__floattitf@@GCC_3.0+0x24c>  // b.none
    a234:	cbz	x2, a3c8 <__floattitf@@GCC_3.0+0x230>
    a238:	lsr	x1, x5, #3
    a23c:	mov	x3, #0x0                   	// #0
    a240:	extr	x2, x5, x0, #3
    a244:	bfxil	x3, x1, #0, #48
    a248:	fmov	d0, x2
    a24c:	bfi	x3, x7, #48, #15
    a250:	bfi	x3, x8, #63, #1
    a254:	fmov	v0.d[1], x3
    a258:	cbnz	w4, a384 <__floattitf@@GCC_3.0+0x1ec>
    a25c:	ret
    a260:	mov	w8, #0x0                   	// #0
    a264:	mov	w4, #0x0                   	// #0
    a268:	mov	x1, #0x0                   	// #0
    a26c:	mov	x6, #0x0                   	// #0
    a270:	mov	x3, #0x0                   	// #0
    a274:	orr	w4, w4, w8, lsl #15
    a278:	bfxil	x3, x1, #0, #48
    a27c:	fmov	d0, x6
    a280:	bfi	x3, x4, #48, #16
    a284:	fmov	v0.d[1], x3
    a288:	ret
    a28c:	negs	x0, x0
    a290:	ngc	x2, x1
    a294:	mov	x3, x2
    a298:	cbnz	x2, a1bc <__floattitf@@GCC_3.0+0x24>
    a29c:	clz	x1, x0
    a2a0:	mov	w3, #0x403e                	// #16446
    a2a4:	sub	w1, w3, w1
    a2a8:	mov	x3, #0x406f                	// #16495
    a2ac:	mov	w5, w1
    a2b0:	and	w4, w1, #0x7fff
    a2b4:	sub	x3, x3, w1, sxtw
    a2b8:	cmp	x3, #0x3f
    a2bc:	b.gt	a36c <__floattitf@@GCC_3.0+0x1d4>
    a2c0:	mov	w6, #0x406f                	// #16495
    a2c4:	mov	w13, #0xffffbfd1            	// #-16431
    a2c8:	add	w1, w5, w13
    a2cc:	sub	w5, w6, w5
    a2d0:	lsr	x1, x0, x1
    a2d4:	lsl	x2, x2, x5
    a2d8:	orr	x2, x1, x2
    a2dc:	and	x1, x2, #0xffffffffffff
    a2e0:	lsl	x6, x0, x5
    a2e4:	b	a270 <__floattitf@@GCC_3.0+0xd8>
    a2e8:	sub	w6, w5, w2
    a2ec:	mov	w10, #0x3f                  	// #63
    a2f0:	lsl	x2, x3, #1
    a2f4:	sub	w11, w10, w6
    a2f8:	mov	w4, #0x40f2                	// #16626
    a2fc:	mov	w12, #0xffffbf4e            	// #-16562
    a300:	add	w12, w5, w12
    a304:	sub	w5, w4, w5
    a308:	sub	w10, w10, w5
    a30c:	lsl	x4, x2, x11
    a310:	lsr	x11, x0, #1
    a314:	cmp	w12, #0x0
    a318:	lsr	x2, x0, x6
    a31c:	orr	x2, x4, x2
    a320:	sub	w4, w5, #0x40
    a324:	lsr	x13, x3, x12
    a328:	lsr	x6, x3, x6
    a32c:	csel	x2, x13, x2, ge  // ge = tcont
    a330:	csel	x6, xzr, x6, ge  // ge = tcont
    a334:	lsr	x10, x11, x10
    a338:	cmp	w4, #0x0
    a33c:	lsl	x3, x3, x5
    a340:	orr	x3, x10, x3
    a344:	lsl	x10, x0, x4
    a348:	lsl	x0, x0, x5
    a34c:	csel	x3, x10, x3, ge  // ge = tcont
    a350:	csel	x0, xzr, x0, ge  // ge = tcont
    a354:	orr	x0, x0, x3
    a358:	mov	x3, x6
    a35c:	cmp	x0, #0x0
    a360:	cset	x0, ne  // ne = any
    a364:	orr	x0, x2, x0
    a368:	b	a20c <__floattitf@@GCC_3.0+0x74>
    a36c:	mov	w2, #0x402f                	// #16431
    a370:	sub	w2, w2, w1
    a374:	mov	x6, #0x0                   	// #0
    a378:	lsl	x1, x0, x2
    a37c:	and	x1, x1, #0xffffffffffff
    a380:	b	a270 <__floattitf@@GCC_3.0+0xd8>
    a384:	stp	x29, x30, [sp, #-32]!
    a388:	mov	w0, w4
    a38c:	mov	x29, sp
    a390:	str	q0, [sp, #16]
    a394:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    a398:	ldr	q0, [sp, #16]
    a39c:	ldp	x29, x30, [sp], #32
    a3a0:	ret
    a3a4:	tbnz	x1, #63, a238 <__floattitf@@GCC_3.0+0xa0>
    a3a8:	adds	x0, x0, #0x8
    a3ac:	cinc	x5, x5, cs  // cs = hs, nlast
    a3b0:	and	x1, x5, #0x8000000000000
    a3b4:	cbz	x1, a420 <__floattitf@@GCC_3.0+0x288>
    a3b8:	and	x5, x5, #0xfff7ffffffffffff
    a3bc:	add	x7, x7, #0x1
    a3c0:	mov	w4, #0x10                  	// #16
    a3c4:	b	a238 <__floattitf@@GCC_3.0+0xa0>
    a3c8:	and	x1, x0, #0xf
    a3cc:	cmp	x1, #0x4
    a3d0:	b.eq	a238 <__floattitf@@GCC_3.0+0xa0>  // b.none
    a3d4:	adds	x0, x0, #0x4
    a3d8:	cinc	x5, x5, cs  // cs = hs, nlast
    a3dc:	and	x1, x5, #0x8000000000000
    a3e0:	b	a3b4 <__floattitf@@GCC_3.0+0x21c>
    a3e4:	tbz	x1, #63, a238 <__floattitf@@GCC_3.0+0xa0>
    a3e8:	b	a3a8 <__floattitf@@GCC_3.0+0x210>
    a3ec:	mov	x1, #0x406f                	// #16495
    a3f0:	mov	x6, x0
    a3f4:	cmp	x7, x1
    a3f8:	b.ne	a428 <__floattitf@@GCC_3.0+0x290>  // b.any
    a3fc:	and	x1, x2, #0xffffffffffff
    a400:	mov	w4, w7
    a404:	mov	x3, #0x0                   	// #0
    a408:	orr	w4, w4, w8, lsl #15
    a40c:	bfxil	x3, x1, #0, #48
    a410:	fmov	d0, x6
    a414:	bfi	x3, x4, #48, #16
    a418:	fmov	v0.d[1], x3
    a41c:	ret
    a420:	mov	w4, #0x10                  	// #16
    a424:	b	a238 <__floattitf@@GCC_3.0+0xa0>
    a428:	and	w4, w5, #0x7fff
    a42c:	b	a2c0 <__floattitf@@GCC_3.0+0x128>

000000000000a430 <__floatuntitf@@GCC_4.2.0>:
    a430:	mrs	x6, fpcr
    a434:	orr	x2, x0, x1
    a438:	cbz	x2, a4fc <__floatuntitf@@GCC_4.2.0+0xcc>
    a43c:	mov	x3, x1
    a440:	cbz	x1, a520 <__floatuntitf@@GCC_4.2.0+0xf0>
    a444:	clz	x4, x1
    a448:	mov	w2, #0x407e                	// #16510
    a44c:	sub	w2, w2, w4
    a450:	mov	w4, #0x406f                	// #16495
    a454:	cmp	w2, w4
    a458:	sxtw	x4, w2
    a45c:	b.le	a65c <__floatuntitf@@GCC_4.2.0+0x22c>
    a460:	mov	w1, #0x4072                	// #16498
    a464:	cmp	w2, w1
    a468:	b.gt	a56c <__floatuntitf@@GCC_4.2.0+0x13c>
    a46c:	mov	x5, x0
    a470:	mov	x0, #0x4072                	// #16498
    a474:	cmp	x4, x0
    a478:	b.eq	a498 <__floatuntitf@@GCC_4.2.0+0x68>  // b.none
    a47c:	sub	w1, w1, w2
    a480:	mov	w0, #0xffffbfce            	// #-16434
    a484:	add	w2, w2, w0
    a488:	lsl	x3, x3, x1
    a48c:	lsr	x2, x5, x2
    a490:	orr	x3, x2, x3
    a494:	lsl	x5, x5, x1
    a498:	and	x1, x3, #0xfff7ffffffffffff
    a49c:	tst	x5, #0x7
    a4a0:	mov	w0, #0x0                   	// #0
    a4a4:	b.eq	a4d8 <__floatuntitf@@GCC_4.2.0+0xa8>  // b.none
    a4a8:	ands	x6, x6, #0xc00000
    a4ac:	b.eq	a638 <__floatuntitf@@GCC_4.2.0+0x208>  // b.none
    a4b0:	cmp	x6, #0x400, lsl #12
    a4b4:	b.ne	a630 <__floatuntitf@@GCC_4.2.0+0x200>  // b.any
    a4b8:	adds	x0, x5, #0x8
    a4bc:	cinc	x1, x1, cs  // cs = hs, nlast
    a4c0:	mov	x5, x0
    a4c4:	and	x0, x1, #0x8000000000000
    a4c8:	cbz	x0, a630 <__floatuntitf@@GCC_4.2.0+0x200>
    a4cc:	and	x1, x1, #0xfff7ffffffffffff
    a4d0:	add	x4, x4, #0x1
    a4d4:	mov	w0, #0x10                  	// #16
    a4d8:	lsr	x6, x1, #3
    a4dc:	mov	x3, #0x0                   	// #0
    a4e0:	extr	x2, x1, x5, #3
    a4e4:	bfxil	x3, x6, #0, #48
    a4e8:	fmov	d0, x2
    a4ec:	bfi	x3, x4, #48, #16
    a4f0:	fmov	v0.d[1], x3
    a4f4:	cbnz	w0, a614 <__floatuntitf@@GCC_4.2.0+0x1e4>
    a4f8:	ret
    a4fc:	mov	w4, #0x0                   	// #0
    a500:	mov	x1, #0x0                   	// #0
    a504:	mov	x5, #0x0                   	// #0
    a508:	mov	x3, #0x0                   	// #0
    a50c:	fmov	d0, x5
    a510:	bfxil	x3, x1, #0, #48
    a514:	bfi	x3, x4, #48, #16
    a518:	fmov	v0.d[1], x3
    a51c:	ret
    a520:	clz	x3, x0
    a524:	mov	w2, #0x403e                	// #16446
    a528:	sub	w3, w2, w3
    a52c:	mov	x5, #0x406f                	// #16495
    a530:	mov	w2, w3
    a534:	and	w4, w3, #0x7fff
    a538:	sub	x5, x5, w3, sxtw
    a53c:	cmp	x5, #0x3f
    a540:	b.gt	a5e8 <__floatuntitf@@GCC_4.2.0+0x1b8>
    a544:	mov	w5, #0x406f                	// #16495
    a548:	mov	w10, #0xffffbfd1            	// #-16431
    a54c:	add	w3, w2, w10
    a550:	sub	w2, w5, w2
    a554:	lsr	x3, x0, x3
    a558:	lsl	x1, x1, x2
    a55c:	orr	x1, x3, x1
    a560:	and	x1, x1, #0xffffffffffff
    a564:	lsl	x5, x0, x2
    a568:	b	a508 <__floatuntitf@@GCC_4.2.0+0xd8>
    a56c:	mov	w5, #0x40f2                	// #16626
    a570:	sub	w5, w5, w2
    a574:	lsr	x10, x0, #1
    a578:	mov	w8, #0x3f                  	// #63
    a57c:	sub	w11, w8, w5
    a580:	subs	w9, w5, #0x40
    a584:	lsl	x7, x3, x5
    a588:	sub	w1, w2, w1
    a58c:	lsr	x10, x10, x11
    a590:	orr	x7, x10, x7
    a594:	lsl	x5, x0, x5
    a598:	csel	x5, xzr, x5, pl  // pl = nfrst
    a59c:	lsl	x10, x0, x9
    a5a0:	csel	x7, x10, x7, pl  // pl = nfrst
    a5a4:	orr	x5, x5, x7
    a5a8:	sub	w8, w8, w1
    a5ac:	lsl	x7, x3, #1
    a5b0:	cmp	x5, #0x0
    a5b4:	mov	w9, #0xffffbf4e            	// #-16562
    a5b8:	add	w2, w2, w9
    a5bc:	lsr	x5, x0, x1
    a5c0:	cset	x0, ne  // ne = any
    a5c4:	lsl	x8, x7, x8
    a5c8:	cmp	w2, #0x0
    a5cc:	orr	x5, x8, x5
    a5d0:	lsr	x7, x3, x2
    a5d4:	csel	x5, x7, x5, ge  // ge = tcont
    a5d8:	lsr	x2, x3, x1
    a5dc:	orr	x5, x0, x5
    a5e0:	csel	x3, x2, xzr, lt  // lt = tstop
    a5e4:	b	a498 <__floatuntitf@@GCC_4.2.0+0x68>
    a5e8:	mov	w1, #0x402f                	// #16431
    a5ec:	sub	w1, w1, w3
    a5f0:	mov	x5, #0x0                   	// #0
    a5f4:	lsl	x1, x0, x1
    a5f8:	and	x1, x1, #0xffffffffffff
    a5fc:	mov	x3, #0x0                   	// #0
    a600:	fmov	d0, x5
    a604:	bfxil	x3, x1, #0, #48
    a608:	bfi	x3, x4, #48, #16
    a60c:	fmov	v0.d[1], x3
    a610:	ret
    a614:	stp	x29, x30, [sp, #-32]!
    a618:	mov	x29, sp
    a61c:	str	q0, [sp, #16]
    a620:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    a624:	ldr	q0, [sp, #16]
    a628:	ldp	x29, x30, [sp], #32
    a62c:	ret
    a630:	mov	w0, #0x10                  	// #16
    a634:	b	a4d8 <__floatuntitf@@GCC_4.2.0+0xa8>
    a638:	and	x2, x5, #0xf
    a63c:	mov	w0, #0x10                  	// #16
    a640:	cmp	x2, #0x4
    a644:	b.eq	a4d8 <__floatuntitf@@GCC_4.2.0+0xa8>  // b.none
    a648:	adds	x0, x5, #0x4
    a64c:	cinc	x1, x1, cs  // cs = hs, nlast
    a650:	mov	x5, x0
    a654:	and	x0, x1, #0x8000000000000
    a658:	b	a4c8 <__floatuntitf@@GCC_4.2.0+0x98>
    a65c:	mov	x3, #0x406f                	// #16495
    a660:	mov	x5, x0
    a664:	cmp	x4, x3
    a668:	b.eq	a5f8 <__floatuntitf@@GCC_4.2.0+0x1c8>  // b.none
    a66c:	and	w4, w2, #0x7fff
    a670:	b	a544 <__floatuntitf@@GCC_4.2.0+0x114>
    a674:	nop

000000000000a678 <__extendsftf2@@GCC_3.0>:
    a678:	mrs	x0, fpcr
    a67c:	fmov	w0, s0
    a680:	ubfx	x2, x0, #23, #8
    a684:	and	x1, x0, #0x7fffff
    a688:	add	x3, x2, #0x1
    a68c:	ubfx	x5, x0, #0, #23
    a690:	tst	x3, #0xfe
    a694:	lsr	w0, w0, #31
    a698:	b.eq	a6c8 <__extendsftf2@@GCC_3.0+0x50>  // b.none
    a69c:	lsl	x1, x1, #25
    a6a0:	mov	w3, #0x3f80                	// #16256
    a6a4:	add	w4, w2, w3
    a6a8:	mov	x3, #0x0                   	// #0
    a6ac:	bfxil	x3, x1, #0, #48
    a6b0:	mov	x2, #0x0                   	// #0
    a6b4:	fmov	d0, x2
    a6b8:	bfi	x3, x4, #48, #15
    a6bc:	bfi	x3, x0, #63, #1
    a6c0:	fmov	v0.d[1], x3
    a6c4:	ret
    a6c8:	cbnz	w2, a6f8 <__extendsftf2@@GCC_3.0+0x80>
    a6cc:	cbnz	x1, a744 <__extendsftf2@@GCC_3.0+0xcc>
    a6d0:	mov	x1, #0x0                   	// #0
    a6d4:	mov	x3, #0x0                   	// #0
    a6d8:	bfxil	x3, x1, #0, #48
    a6dc:	mov	w4, #0x0                   	// #0
    a6e0:	mov	x2, #0x0                   	// #0
    a6e4:	fmov	d0, x2
    a6e8:	bfi	x3, x4, #48, #15
    a6ec:	bfi	x3, x0, #63, #1
    a6f0:	fmov	v0.d[1], x3
    a6f4:	ret
    a6f8:	cbz	x1, a780 <__extendsftf2@@GCC_3.0+0x108>
    a6fc:	lsl	x1, x1, #25
    a700:	mov	x3, #0x0                   	// #0
    a704:	orr	x1, x1, #0x800000000000
    a708:	mov	x2, #0x0                   	// #0
    a70c:	fmov	d0, x2
    a710:	bfxil	x3, x1, #0, #48
    a714:	orr	x3, x3, #0x7fff000000000000
    a718:	bfi	x3, x0, #63, #1
    a71c:	fmov	v0.d[1], x3
    a720:	tbnz	w5, #22, a7a8 <__extendsftf2@@GCC_3.0+0x130>
    a724:	stp	x29, x30, [sp, #-32]!
    a728:	mov	w0, #0x1                   	// #1
    a72c:	mov	x29, sp
    a730:	str	q0, [sp, #16]
    a734:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    a738:	ldr	q0, [sp, #16]
    a73c:	ldp	x29, x30, [sp], #32
    a740:	ret
    a744:	clz	x4, x1
    a748:	mov	w2, #0x3fa9                	// #16297
    a74c:	sub	w3, w4, #0xf
    a750:	sub	w2, w2, w4
    a754:	and	w4, w2, #0x7fff
    a758:	mov	x2, #0x0                   	// #0
    a75c:	lsl	x1, x1, x3
    a760:	and	x1, x1, #0xffffffffffff
    a764:	mov	x3, #0x0                   	// #0
    a768:	fmov	d0, x2
    a76c:	bfxil	x3, x1, #0, #48
    a770:	bfi	x3, x4, #48, #15
    a774:	bfi	x3, x0, #63, #1
    a778:	fmov	v0.d[1], x3
    a77c:	ret
    a780:	mov	x1, #0x0                   	// #0
    a784:	mov	x3, #0x0                   	// #0
    a788:	bfxil	x3, x1, #0, #48
    a78c:	mov	w4, #0x7fff                	// #32767
    a790:	mov	x2, #0x0                   	// #0
    a794:	fmov	d0, x2
    a798:	bfi	x3, x4, #48, #15
    a79c:	bfi	x3, x0, #63, #1
    a7a0:	fmov	v0.d[1], x3
    a7a4:	ret
    a7a8:	ret
    a7ac:	nop

000000000000a7b0 <__extenddftf2@@GCC_3.0>:
    a7b0:	mrs	x0, fpcr
    a7b4:	fmov	x0, d0
    a7b8:	ubfx	x1, x0, #52, #11
    a7bc:	lsr	x4, x0, #63
    a7c0:	add	x2, x1, #0x1
    a7c4:	and	w4, w4, #0xff
    a7c8:	tst	x2, #0x7fe
    a7cc:	ubfx	x0, x0, #0, #52
    a7d0:	b.eq	a804 <__extenddftf2@@GCC_3.0+0x54>  // b.none
    a7d4:	lsr	x5, x0, #4
    a7d8:	mov	x3, #0x0                   	// #0
    a7dc:	and	x5, x5, #0xffffffffffff
    a7e0:	mov	w2, #0x3c00                	// #15360
    a7e4:	add	w1, w1, w2
    a7e8:	lsl	x0, x0, #60
    a7ec:	bfxil	x3, x5, #0, #48
    a7f0:	fmov	d0, x0
    a7f4:	bfi	x3, x1, #48, #15
    a7f8:	bfi	x3, x4, #63, #1
    a7fc:	fmov	v0.d[1], x3
    a800:	ret
    a804:	cbnz	x1, a858 <__extenddftf2@@GCC_3.0+0xa8>
    a808:	cbz	x0, a8a4 <__extenddftf2@@GCC_3.0+0xf4>
    a80c:	clz	x2, x0
    a810:	cmp	w2, #0xe
    a814:	b.gt	a8f0 <__extenddftf2@@GCC_3.0+0x140>
    a818:	add	w1, w2, #0x31
    a81c:	mov	w5, #0xf                   	// #15
    a820:	sub	w5, w5, w2
    a824:	lsr	x5, x0, x5
    a828:	lsl	x0, x0, x1
    a82c:	and	x5, x5, #0xffffffffffff
    a830:	mov	w1, #0x3c0c                	// #15372
    a834:	mov	x3, #0x0                   	// #0
    a838:	sub	w1, w1, w2
    a83c:	and	w1, w1, #0x7fff
    a840:	bfxil	x3, x5, #0, #48
    a844:	fmov	d0, x0
    a848:	bfi	x3, x1, #48, #15
    a84c:	bfi	x3, x4, #63, #1
    a850:	fmov	v0.d[1], x3
    a854:	ret
    a858:	cbz	x0, a8c8 <__extenddftf2@@GCC_3.0+0x118>
    a85c:	lsr	x1, x0, #4
    a860:	mov	x3, #0x0                   	// #0
    a864:	orr	x1, x1, #0x800000000000
    a868:	lsl	x2, x0, #60
    a86c:	fmov	d0, x2
    a870:	bfxil	x3, x1, #0, #48
    a874:	orr	x3, x3, #0x7fff000000000000
    a878:	bfi	x3, x4, #63, #1
    a87c:	fmov	v0.d[1], x3
    a880:	tbnz	x0, #51, a8ec <__extenddftf2@@GCC_3.0+0x13c>
    a884:	stp	x29, x30, [sp, #-32]!
    a888:	mov	w0, #0x1                   	// #1
    a88c:	mov	x29, sp
    a890:	str	q0, [sp, #16]
    a894:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    a898:	ldr	q0, [sp, #16]
    a89c:	ldp	x29, x30, [sp], #32
    a8a0:	ret
    a8a4:	mov	x5, #0x0                   	// #0
    a8a8:	mov	x3, #0x0                   	// #0
    a8ac:	bfxil	x3, x5, #0, #48
    a8b0:	mov	w1, #0x0                   	// #0
    a8b4:	fmov	d0, x0
    a8b8:	bfi	x3, x1, #48, #15
    a8bc:	bfi	x3, x4, #63, #1
    a8c0:	fmov	v0.d[1], x3
    a8c4:	ret
    a8c8:	mov	x5, #0x0                   	// #0
    a8cc:	mov	x3, #0x0                   	// #0
    a8d0:	bfxil	x3, x5, #0, #48
    a8d4:	mov	w1, #0x7fff                	// #32767
    a8d8:	fmov	d0, x0
    a8dc:	bfi	x3, x1, #48, #15
    a8e0:	bfi	x3, x4, #63, #1
    a8e4:	fmov	v0.d[1], x3
    a8e8:	ret
    a8ec:	ret
    a8f0:	sub	w5, w2, #0xf
    a8f4:	lsl	x5, x0, x5
    a8f8:	mov	x0, #0x0                   	// #0
    a8fc:	b	a82c <__extenddftf2@@GCC_3.0+0x7c>
    a900:	mrs	x0, fpcr
    a904:	umov	w1, v0.h[0]
    a908:	mov	w0, #0x0                   	// #0
    a90c:	bfxil	w0, w1, #0, #16
    a910:	and	w4, w0, #0x3ff
    a914:	and	x2, x0, #0x3ff
    a918:	ubfx	x1, x0, #10, #5
    a91c:	ubfx	x0, x0, #15, #1
    a920:	add	x3, x1, #0x1
    a924:	tst	x3, #0x1e
    a928:	b.eq	a958 <__extenddftf2@@GCC_3.0+0x1a8>  // b.none
    a92c:	lsl	x4, x2, #38
    a930:	mov	x3, #0x0                   	// #0
    a934:	mov	w2, #0x3ff0                	// #16368
    a938:	add	w1, w1, w2
    a93c:	bfxil	x3, x4, #0, #48
    a940:	mov	x2, #0x0                   	// #0
    a944:	fmov	d0, x2
    a948:	bfi	x3, x1, #48, #15
    a94c:	bfi	x3, x0, #63, #1
    a950:	fmov	v0.d[1], x3
    a954:	ret
    a958:	cbnz	x1, a988 <__extenddftf2@@GCC_3.0+0x1d8>
    a95c:	cbnz	x2, a9d4 <__extenddftf2@@GCC_3.0+0x224>
    a960:	mov	x4, #0x0                   	// #0
    a964:	mov	x3, #0x0                   	// #0
    a968:	bfxil	x3, x4, #0, #48
    a96c:	mov	w1, #0x0                   	// #0
    a970:	mov	x2, #0x0                   	// #0
    a974:	fmov	d0, x2
    a978:	bfi	x3, x1, #48, #15
    a97c:	bfi	x3, x0, #63, #1
    a980:	fmov	v0.d[1], x3
    a984:	ret
    a988:	cbz	x2, aa10 <__extenddftf2@@GCC_3.0+0x260>
    a98c:	lsl	x1, x2, #38
    a990:	mov	x3, #0x0                   	// #0
    a994:	orr	x1, x1, #0x800000000000
    a998:	mov	x2, #0x0                   	// #0
    a99c:	fmov	d0, x2
    a9a0:	bfxil	x3, x1, #0, #48
    a9a4:	orr	x3, x3, #0x7fff000000000000
    a9a8:	bfi	x3, x0, #63, #1
    a9ac:	fmov	v0.d[1], x3
    a9b0:	tbnz	w4, #9, aa38 <__extenddftf2@@GCC_3.0+0x288>
    a9b4:	stp	x29, x30, [sp, #-32]!
    a9b8:	mov	w0, #0x1                   	// #1
    a9bc:	mov	x29, sp
    a9c0:	str	q0, [sp, #16]
    a9c4:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    a9c8:	ldr	q0, [sp, #16]
    a9cc:	ldp	x29, x30, [sp], #32
    a9d0:	ret
    a9d4:	clz	x3, x2
    a9d8:	mov	w1, #0x4026                	// #16422
    a9dc:	sub	w4, w3, #0xf
    a9e0:	sub	w1, w1, w3
    a9e4:	mov	x3, #0x0                   	// #0
    a9e8:	and	w1, w1, #0x7fff
    a9ec:	lsl	x4, x2, x4
    a9f0:	and	x4, x4, #0xffffffffffff
    a9f4:	mov	x2, #0x0                   	// #0
    a9f8:	fmov	d0, x2
    a9fc:	bfxil	x3, x4, #0, #48
    aa00:	bfi	x3, x1, #48, #15
    aa04:	bfi	x3, x0, #63, #1
    aa08:	fmov	v0.d[1], x3
    aa0c:	ret
    aa10:	mov	x4, #0x0                   	// #0
    aa14:	mov	x3, #0x0                   	// #0
    aa18:	bfxil	x3, x4, #0, #48
    aa1c:	mov	w1, #0x7fff                	// #32767
    aa20:	mov	x2, #0x0                   	// #0
    aa24:	fmov	d0, x2
    aa28:	bfi	x3, x1, #48, #15
    aa2c:	bfi	x3, x0, #63, #1
    aa30:	fmov	v0.d[1], x3
    aa34:	ret
    aa38:	ret
    aa3c:	nop

000000000000aa40 <__trunctfsf2@@GCC_3.0>:
    aa40:	stp	x29, x30, [sp, #-48]!
    aa44:	mov	x29, sp
    aa48:	str	x19, [sp, #16]
    aa4c:	str	q0, [sp, #32]
    aa50:	ldp	x5, x0, [sp, #32]
    aa54:	mrs	x3, fpcr
    aa58:	ubfx	x4, x0, #48, #15
    aa5c:	lsr	x6, x0, #63
    aa60:	add	x1, x4, #0x1
    aa64:	ubfiz	x0, x0, #3, #48
    aa68:	orr	x0, x0, x5, lsr #61
    aa6c:	tst	x1, #0x7ffe
    aa70:	and	w6, w6, #0xff
    aa74:	lsl	x5, x5, #3
    aa78:	b.eq	aaf8 <__trunctfsf2@@GCC_3.0+0xb8>  // b.none
    aa7c:	mov	x1, #0xffffffffffffc080    	// #-16256
    aa80:	add	x4, x4, x1
    aa84:	cmp	x4, #0xfe
    aa88:	b.le	ab38 <__trunctfsf2@@GCC_3.0+0xf8>
    aa8c:	ands	x0, x3, #0xc00000
    aa90:	b.eq	abd0 <__trunctfsf2@@GCC_3.0+0x190>  // b.none
    aa94:	cmp	x0, #0x400, lsl #12
    aa98:	b.eq	acbc <__trunctfsf2@@GCC_3.0+0x27c>  // b.none
    aa9c:	cmp	x0, #0x800, lsl #12
    aaa0:	csel	w7, w6, wzr, eq  // eq = none
    aaa4:	cbnz	w7, abd0 <__trunctfsf2@@GCC_3.0+0x190>
    aaa8:	mov	x4, #0xfe                  	// #254
    aaac:	mov	x1, #0xffffffffffffffff    	// #-1
    aab0:	mov	w0, #0x14                  	// #20
    aab4:	b.ne	ab78 <__trunctfsf2@@GCC_3.0+0x138>  // b.any
    aab8:	cmp	w6, #0x0
    aabc:	add	x2, x1, #0x8
    aac0:	csel	x1, x2, x1, ne  // ne = any
    aac4:	and	x2, x1, #0x4000000
    aac8:	cbnz	w7, ab80 <__trunctfsf2@@GCC_3.0+0x140>
    aacc:	cbnz	x2, ab88 <__trunctfsf2@@GCC_3.0+0x148>
    aad0:	lsr	x3, x1, #3
    aad4:	and	w2, w4, #0xff
    aad8:	mov	w1, w3
    aadc:	bfi	w1, w2, #23, #9
    aae0:	orr	w19, w1, w6, lsl #31
    aae4:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    aae8:	fmov	s0, w19
    aaec:	ldr	x19, [sp, #16]
    aaf0:	ldp	x29, x30, [sp], #48
    aaf4:	ret
    aaf8:	orr	x5, x0, x5
    aafc:	cbnz	x4, ab2c <__trunctfsf2@@GCC_3.0+0xec>
    ab00:	cbnz	x5, aba8 <__trunctfsf2@@GCC_3.0+0x168>
    ab04:	mov	w0, #0x0                   	// #0
    ab08:	and	w4, w4, #0xff
    ab0c:	mov	x1, #0x0                   	// #0
    ab10:	bfi	w1, w4, #23, #9
    ab14:	orr	w19, w1, w6, lsl #31
    ab18:	cbnz	w0, aae4 <__trunctfsf2@@GCC_3.0+0xa4>
    ab1c:	fmov	s0, w19
    ab20:	ldr	x19, [sp, #16]
    ab24:	ldp	x29, x30, [sp], #48
    ab28:	ret
    ab2c:	cbnz	x5, abdc <__trunctfsf2@@GCC_3.0+0x19c>
    ab30:	mov	x4, #0xff                  	// #255
    ab34:	b	ab04 <__trunctfsf2@@GCC_3.0+0xc4>
    ab38:	cmp	x4, #0x0
    ab3c:	b.le	ac00 <__trunctfsf2@@GCC_3.0+0x1c0>
    ab40:	orr	x5, x5, x0, lsl #39
    ab44:	mov	w7, #0x0                   	// #0
    ab48:	cmp	x5, #0x0
    ab4c:	cset	x1, ne  // ne = any
    ab50:	orr	x1, x1, x0, lsr #25
    ab54:	tst	x1, #0x7
    ab58:	b.eq	ac98 <__trunctfsf2@@GCC_3.0+0x258>  // b.none
    ab5c:	and	x2, x3, #0xc00000
    ab60:	cmp	x2, #0x400, lsl #12
    ab64:	b.eq	abc0 <__trunctfsf2@@GCC_3.0+0x180>  // b.none
    ab68:	cmp	x2, #0x800, lsl #12
    ab6c:	mov	w0, #0x10                  	// #16
    ab70:	b.eq	aab8 <__trunctfsf2@@GCC_3.0+0x78>  // b.none
    ab74:	cbz	x2, aca8 <__trunctfsf2@@GCC_3.0+0x268>
    ab78:	and	x2, x1, #0x4000000
    ab7c:	cbz	w7, ab84 <__trunctfsf2@@GCC_3.0+0x144>
    ab80:	orr	w0, w0, #0x8
    ab84:	cbz	x2, ac9c <__trunctfsf2@@GCC_3.0+0x25c>
    ab88:	cmp	x4, #0xfe
    ab8c:	add	x4, x4, #0x1
    ab90:	b.eq	ac58 <__trunctfsf2@@GCC_3.0+0x218>  // b.none
    ab94:	ubfx	x2, x1, #3, #23
    ab98:	orr	w4, w2, w4, lsl #23
    ab9c:	orr	w19, w4, w6, lsl #31
    aba0:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    aba4:	b	aae8 <__trunctfsf2@@GCC_3.0+0xa8>
    aba8:	and	x2, x3, #0xc00000
    abac:	mov	w7, #0x1                   	// #1
    abb0:	cmp	x2, #0x400, lsl #12
    abb4:	mov	x4, #0x0                   	// #0
    abb8:	mov	x1, #0x1                   	// #1
    abbc:	b.ne	ab68 <__trunctfsf2@@GCC_3.0+0x128>  // b.any
    abc0:	cbnz	w6, abc8 <__trunctfsf2@@GCC_3.0+0x188>
    abc4:	add	x1, x1, #0x8
    abc8:	mov	w0, #0x10                  	// #16
    abcc:	b	aac4 <__trunctfsf2@@GCC_3.0+0x84>
    abd0:	mov	x4, #0xff                  	// #255
    abd4:	mov	w0, #0x14                  	// #20
    abd8:	b	ab08 <__trunctfsf2@@GCC_3.0+0xc8>
    abdc:	lsr	x2, x0, #50
    abe0:	lsr	x1, x0, #28
    abe4:	eor	w0, w2, #0x1
    abe8:	mov	x2, #0x7fff                	// #32767
    abec:	cmp	x4, x2
    abf0:	orr	x1, x1, #0x400000
    abf4:	csel	w0, w0, wzr, eq  // eq = none
    abf8:	mov	w4, #0xff                  	// #255
    abfc:	b	ab10 <__trunctfsf2@@GCC_3.0+0xd0>
    ac00:	cmn	x4, #0x17
    ac04:	b.lt	aba8 <__trunctfsf2@@GCC_3.0+0x168>  // b.tstop
    ac08:	orr	x0, x0, #0x8000000000000
    ac0c:	add	w2, w4, #0x26
    ac10:	mov	w1, #0x1a                  	// #26
    ac14:	sub	w4, w1, w4
    ac18:	lsl	x2, x0, x2
    ac1c:	orr	x5, x2, x5
    ac20:	cmp	x5, #0x0
    ac24:	lsr	x0, x0, x4
    ac28:	cset	x1, ne  // ne = any
    ac2c:	orr	x1, x0, x1
    ac30:	ands	x2, x1, #0x7
    ac34:	b.eq	ac44 <__trunctfsf2@@GCC_3.0+0x204>  // b.none
    ac38:	mov	w7, #0x1                   	// #1
    ac3c:	mov	x4, #0x0                   	// #0
    ac40:	b	ab5c <__trunctfsf2@@GCC_3.0+0x11c>
    ac44:	tbz	w3, #11, ac94 <__trunctfsf2@@GCC_3.0+0x254>
    ac48:	mov	w0, #0x0                   	// #0
    ac4c:	mov	x4, #0x0                   	// #0
    ac50:	orr	w0, w0, #0x8
    ac54:	b	ab84 <__trunctfsf2@@GCC_3.0+0x144>
    ac58:	mov	w2, w4
    ac5c:	ands	x3, x3, #0xc00000
    ac60:	b.eq	ac88 <__trunctfsf2@@GCC_3.0+0x248>  // b.none
    ac64:	cmp	x3, #0x400, lsl #12
    ac68:	b.eq	acd4 <__trunctfsf2@@GCC_3.0+0x294>  // b.none
    ac6c:	cmp	x3, #0x800, lsl #12
    ac70:	mov	w3, #0xfe                  	// #254
    ac74:	csel	w1, w6, wzr, eq  // eq = none
    ac78:	mov	x4, #0x1fffffffffffffff    	// #2305843009213693951
    ac7c:	cmp	w1, #0x0
    ac80:	csel	w2, w2, w3, ne  // ne = any
    ac84:	csel	x3, xzr, x4, ne  // ne = any
    ac88:	mov	w1, #0x14                  	// #20
    ac8c:	orr	w0, w0, w1
    ac90:	b	aad8 <__trunctfsf2@@GCC_3.0+0x98>
    ac94:	mov	x4, #0x0                   	// #0
    ac98:	mov	w0, #0x0                   	// #0
    ac9c:	lsr	x1, x1, #3
    aca0:	and	w4, w4, #0xff
    aca4:	b	ab10 <__trunctfsf2@@GCC_3.0+0xd0>
    aca8:	and	x2, x1, #0xf
    acac:	cmp	x2, #0x4
    acb0:	add	x2, x1, #0x4
    acb4:	csel	x1, x2, x1, ne  // ne = any
    acb8:	b	aac4 <__trunctfsf2@@GCC_3.0+0x84>
    acbc:	cbz	w6, abd0 <__trunctfsf2@@GCC_3.0+0x190>
    acc0:	mov	w0, #0x14                  	// #20
    acc4:	mov	x4, #0xfe                  	// #254
    acc8:	mov	x1, #0xffffffffffffffff    	// #-1
    accc:	mov	w7, #0x0                   	// #0
    acd0:	b	aac4 <__trunctfsf2@@GCC_3.0+0x84>
    acd4:	cmp	w6, #0x0
    acd8:	mov	w1, #0xfe                  	// #254
    acdc:	csel	w2, w4, w1, eq  // eq = none
    ace0:	mov	x4, #0x1fffffffffffffff    	// #2305843009213693951
    ace4:	csel	x3, xzr, x4, eq  // eq = none
    ace8:	b	ac88 <__trunctfsf2@@GCC_3.0+0x248>
    acec:	nop

000000000000acf0 <__trunctfdf2@@GCC_3.0>:
    acf0:	stp	x29, x30, [sp, #-48]!
    acf4:	mov	x29, sp
    acf8:	str	x19, [sp, #16]
    acfc:	str	q0, [sp, #32]
    ad00:	ldp	x3, x0, [sp, #32]
    ad04:	mrs	x6, fpcr
    ad08:	ubfx	x2, x0, #48, #15
    ad0c:	lsr	x4, x0, #63
    ad10:	add	x1, x2, #0x1
    ad14:	ubfiz	x0, x0, #3, #48
    ad18:	tst	x1, #0x7ffe
    ad1c:	and	w4, w4, #0xff
    ad20:	orr	x0, x0, x3, lsr #61
    ad24:	lsl	x5, x3, #3
    ad28:	b.eq	ada8 <__trunctfdf2@@GCC_3.0+0xb8>  // b.none
    ad2c:	mov	x1, #0xffffffffffffc400    	// #-15360
    ad30:	add	x2, x2, x1
    ad34:	cmp	x2, #0x7fe
    ad38:	b.le	adec <__trunctfdf2@@GCC_3.0+0xfc>
    ad3c:	ands	x0, x6, #0xc00000
    ad40:	b.eq	ae84 <__trunctfdf2@@GCC_3.0+0x194>  // b.none
    ad44:	cmp	x0, #0x400, lsl #12
    ad48:	b.eq	afb8 <__trunctfdf2@@GCC_3.0+0x2c8>  // b.none
    ad4c:	cmp	x0, #0x800, lsl #12
    ad50:	csel	w7, w4, wzr, eq  // eq = none
    ad54:	cbnz	w7, ae84 <__trunctfdf2@@GCC_3.0+0x194>
    ad58:	mov	x1, #0xffffffffffffffff    	// #-1
    ad5c:	mov	x2, #0x7fe                 	// #2046
    ad60:	mov	w0, #0x14                  	// #20
    ad64:	b.ne	ae30 <__trunctfdf2@@GCC_3.0+0x140>  // b.any
    ad68:	cmp	w4, #0x0
    ad6c:	add	x3, x1, #0x8
    ad70:	csel	x1, x3, x1, ne  // ne = any
    ad74:	and	x3, x1, #0x80000000000000
    ad78:	cbnz	w7, ae38 <__trunctfdf2@@GCC_3.0+0x148>
    ad7c:	cbnz	x3, ae40 <__trunctfdf2@@GCC_3.0+0x150>
    ad80:	lsr	x1, x1, #3
    ad84:	and	w3, w2, #0x7ff
    ad88:	and	x4, x4, #0xff
    ad8c:	bfi	x1, x3, #52, #12
    ad90:	orr	x19, x1, x4, lsl #63
    ad94:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    ad98:	fmov	d0, x19
    ad9c:	ldr	x19, [sp, #16]
    ada0:	ldp	x29, x30, [sp], #48
    ada4:	ret
    ada8:	orr	x1, x0, x5
    adac:	cbnz	x2, ade0 <__trunctfdf2@@GCC_3.0+0xf0>
    adb0:	cbnz	x1, ae5c <__trunctfdf2@@GCC_3.0+0x16c>
    adb4:	mov	w0, #0x0                   	// #0
    adb8:	and	w2, w2, #0x7ff
    adbc:	mov	x1, #0x0                   	// #0
    adc0:	and	x4, x4, #0xff
    adc4:	bfi	x1, x2, #52, #12
    adc8:	orr	x19, x1, x4, lsl #63
    adcc:	cbnz	w0, ad94 <__trunctfdf2@@GCC_3.0+0xa4>
    add0:	fmov	d0, x19
    add4:	ldr	x19, [sp, #16]
    add8:	ldp	x29, x30, [sp], #48
    addc:	ret
    ade0:	cbnz	x1, ae90 <__trunctfdf2@@GCC_3.0+0x1a0>
    ade4:	mov	x2, #0x7ff                 	// #2047
    ade8:	b	adb4 <__trunctfdf2@@GCC_3.0+0xc4>
    adec:	cmp	x2, #0x0
    adf0:	b.le	aeb8 <__trunctfdf2@@GCC_3.0+0x1c8>
    adf4:	cmp	xzr, x3, lsl #7
    adf8:	mov	w7, #0x0                   	// #0
    adfc:	cset	x1, ne  // ne = any
    ae00:	orr	x5, x1, x5, lsr #60
    ae04:	orr	x1, x5, x0, lsl #4
    ae08:	mov	w0, #0x0                   	// #0
    ae0c:	tst	x5, #0x7
    ae10:	b.eq	af70 <__trunctfdf2@@GCC_3.0+0x280>  // b.none
    ae14:	and	x3, x6, #0xc00000
    ae18:	cmp	x3, #0x400, lsl #12
    ae1c:	b.eq	ae74 <__trunctfdf2@@GCC_3.0+0x184>  // b.none
    ae20:	cmp	x3, #0x800, lsl #12
    ae24:	mov	w0, #0x10                  	// #16
    ae28:	b.eq	ad68 <__trunctfdf2@@GCC_3.0+0x78>  // b.none
    ae2c:	cbz	x3, af7c <__trunctfdf2@@GCC_3.0+0x28c>
    ae30:	and	x3, x1, #0x80000000000000
    ae34:	cbz	w7, ae3c <__trunctfdf2@@GCC_3.0+0x14c>
    ae38:	orr	w0, w0, #0x8
    ae3c:	cbz	x3, af70 <__trunctfdf2@@GCC_3.0+0x280>
    ae40:	cmp	x2, #0x7fe
    ae44:	add	x2, x2, #0x1
    ae48:	b.eq	af18 <__trunctfdf2@@GCC_3.0+0x228>  // b.none
    ae4c:	mov	x3, #0x1fefffffffffffff    	// #2301339409586323455
    ae50:	and	w2, w2, #0x7ff
    ae54:	and	x1, x3, x1, lsr #3
    ae58:	b	adc0 <__trunctfdf2@@GCC_3.0+0xd0>
    ae5c:	and	x3, x6, #0xc00000
    ae60:	mov	w7, #0x1                   	// #1
    ae64:	cmp	x3, #0x400, lsl #12
    ae68:	mov	x2, #0x0                   	// #0
    ae6c:	mov	x1, #0x1                   	// #1
    ae70:	b.ne	ae20 <__trunctfdf2@@GCC_3.0+0x130>  // b.any
    ae74:	cbnz	w4, ae7c <__trunctfdf2@@GCC_3.0+0x18c>
    ae78:	add	x1, x1, #0x8
    ae7c:	mov	w0, #0x10                  	// #16
    ae80:	b	ad74 <__trunctfdf2@@GCC_3.0+0x84>
    ae84:	mov	x2, #0x7ff                 	// #2047
    ae88:	mov	w0, #0x14                  	// #20
    ae8c:	b	adb8 <__trunctfdf2@@GCC_3.0+0xc8>
    ae90:	mov	x3, #0x7fff                	// #32767
    ae94:	extr	x1, x0, x5, #60
    ae98:	lsr	x0, x0, #50
    ae9c:	cmp	x2, x3
    aea0:	lsr	x1, x1, #3
    aea4:	eor	w0, w0, #0x1
    aea8:	orr	x1, x1, #0x8000000000000
    aeac:	csel	w0, w0, wzr, eq  // eq = none
    aeb0:	mov	w2, #0x7ff                 	// #2047
    aeb4:	b	adc0 <__trunctfdf2@@GCC_3.0+0xd0>
    aeb8:	cmn	x2, #0x34
    aebc:	b.lt	ae5c <__trunctfdf2@@GCC_3.0+0x16c>  // b.tstop
    aec0:	mov	x3, #0x3d                  	// #61
    aec4:	sub	x7, x3, x2
    aec8:	orr	x0, x0, #0x8000000000000
    aecc:	cmp	x7, #0x3f
    aed0:	b.le	af90 <__trunctfdf2@@GCC_3.0+0x2a0>
    aed4:	add	w1, w2, #0x43
    aed8:	cmp	x7, #0x40
    aedc:	mov	w3, #0xfffffffd            	// #-3
    aee0:	sub	w2, w3, w2
    aee4:	lsl	x1, x0, x1
    aee8:	orr	x1, x5, x1
    aeec:	csel	x5, x1, x5, ne  // ne = any
    aef0:	lsr	x0, x0, x2
    aef4:	cmp	x5, #0x0
    aef8:	cset	x1, ne  // ne = any
    aefc:	orr	x1, x1, x0
    af00:	cmp	x1, #0x0
    af04:	cset	w7, ne  // ne = any
    af08:	tst	x1, #0x7
    af0c:	b.eq	af54 <__trunctfdf2@@GCC_3.0+0x264>  // b.none
    af10:	mov	x2, #0x0                   	// #0
    af14:	b	ae14 <__trunctfdf2@@GCC_3.0+0x124>
    af18:	mov	w3, w2
    af1c:	ands	x1, x6, #0xc00000
    af20:	b.eq	af48 <__trunctfdf2@@GCC_3.0+0x258>  // b.none
    af24:	cmp	x1, #0x400, lsl #12
    af28:	b.eq	afd0 <__trunctfdf2@@GCC_3.0+0x2e0>  // b.none
    af2c:	cmp	x1, #0x800, lsl #12
    af30:	mov	w5, #0x7fe                 	// #2046
    af34:	csel	w1, w4, wzr, eq  // eq = none
    af38:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    af3c:	cmp	w1, #0x0
    af40:	csel	w3, w3, w5, ne  // ne = any
    af44:	csel	x1, xzr, x2, ne  // ne = any
    af48:	mov	w2, #0x14                  	// #20
    af4c:	orr	w0, w0, w2
    af50:	b	ad88 <__trunctfdf2@@GCC_3.0+0x98>
    af54:	and	x3, x1, #0x80000000000000
    af58:	cbnz	x1, afe8 <__trunctfdf2@@GCC_3.0+0x2f8>
    af5c:	nop
    af60:	mov	w0, #0x0                   	// #0
    af64:	mov	x2, #0x1                   	// #1
    af68:	cbnz	x3, ae4c <__trunctfdf2@@GCC_3.0+0x15c>
    af6c:	mov	x2, #0x0                   	// #0
    af70:	lsr	x1, x1, #3
    af74:	and	w2, w2, #0x7ff
    af78:	b	adc0 <__trunctfdf2@@GCC_3.0+0xd0>
    af7c:	and	x3, x1, #0xf
    af80:	cmp	x3, #0x4
    af84:	add	x3, x1, #0x4
    af88:	csel	x1, x3, x1, ne  // ne = any
    af8c:	b	ad74 <__trunctfdf2@@GCC_3.0+0x84>
    af90:	add	w1, w2, #0x3
    af94:	sub	w2, w3, w2
    af98:	lsl	x3, x5, x1
    af9c:	cmp	x3, #0x0
    afa0:	cset	x3, ne  // ne = any
    afa4:	lsr	x2, x5, x2
    afa8:	orr	x2, x2, x3
    afac:	lsl	x0, x0, x1
    afb0:	orr	x1, x0, x2
    afb4:	b	af00 <__trunctfdf2@@GCC_3.0+0x210>
    afb8:	cbz	w4, ae84 <__trunctfdf2@@GCC_3.0+0x194>
    afbc:	mov	x1, #0xffffffffffffffff    	// #-1
    afc0:	mov	x2, #0x7fe                 	// #2046
    afc4:	mov	w7, #0x0                   	// #0
    afc8:	mov	w0, #0x14                  	// #20
    afcc:	b	ad74 <__trunctfdf2@@GCC_3.0+0x84>
    afd0:	cmp	w4, #0x0
    afd4:	mov	w1, #0x7fe                 	// #2046
    afd8:	csel	w3, w2, w1, eq  // eq = none
    afdc:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    afe0:	csel	x1, xzr, x2, eq  // eq = none
    afe4:	b	af48 <__trunctfdf2@@GCC_3.0+0x258>
    afe8:	tbz	w6, #11, af60 <__trunctfdf2@@GCC_3.0+0x270>
    afec:	mov	w0, #0x0                   	// #0
    aff0:	mov	x2, #0x0                   	// #0
    aff4:	orr	w0, w0, #0x8
    aff8:	b	ae3c <__trunctfdf2@@GCC_3.0+0x14c>
    affc:	nop
    b000:	stp	x29, x30, [sp, #-48]!
    b004:	mov	x29, sp
    b008:	str	x19, [sp, #16]
    b00c:	str	q0, [sp, #32]
    b010:	ldp	x4, x0, [sp, #32]
    b014:	mrs	x2, fpcr
    b018:	ubfx	x3, x0, #48, #15
    b01c:	lsr	x19, x0, #63
    b020:	add	x5, x3, #0x1
    b024:	ubfiz	x0, x0, #3, #48
    b028:	tst	x5, #0x7ffe
    b02c:	orr	x0, x0, x4, lsr #61
    b030:	and	w5, w19, #0xff
    b034:	lsl	x4, x4, #3
    b038:	b.eq	b0bc <__trunctfdf2@@GCC_3.0+0x3cc>  // b.none
    b03c:	mov	x1, #0xffffffffffffc010    	// #-16368
    b040:	add	x3, x3, x1
    b044:	cmp	x3, #0x1e
    b048:	b.le	b108 <__trunctfdf2@@GCC_3.0+0x418>
    b04c:	ands	x0, x2, #0xc00000
    b050:	b.eq	b1a4 <__trunctfdf2@@GCC_3.0+0x4b4>  // b.none
    b054:	cmp	x0, #0x400, lsl #12
    b058:	b.eq	b28c <__trunctfdf2@@GCC_3.0+0x59c>  // b.none
    b05c:	cmp	x0, #0x800, lsl #12
    b060:	csel	w6, w5, wzr, eq  // eq = none
    b064:	cbnz	w6, b1a4 <__trunctfdf2@@GCC_3.0+0x4b4>
    b068:	mov	x3, #0x1e                  	// #30
    b06c:	mov	x1, #0xffffffffffffffff    	// #-1
    b070:	mov	w0, #0x14                  	// #20
    b074:	b.ne	b148 <__trunctfdf2@@GCC_3.0+0x458>  // b.any
    b078:	cmp	w5, #0x0
    b07c:	add	x4, x1, #0x8
    b080:	csel	x1, x4, x1, ne  // ne = any
    b084:	and	x4, x1, #0x2000
    b088:	cbnz	w6, b150 <__trunctfdf2@@GCC_3.0+0x460>
    b08c:	cbnz	x4, b158 <__trunctfdf2@@GCC_3.0+0x468>
    b090:	lsr	x2, x1, #3
    b094:	and	w3, w3, #0x1f
    b098:	mov	w1, w2
    b09c:	bfi	w1, w3, #10, #22
    b0a0:	orr	w19, w1, w5, lsl #15
    b0a4:	sxth	x19, w19
    b0a8:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    b0ac:	dup	v0.4h, w19
    b0b0:	ldr	x19, [sp, #16]
    b0b4:	ldp	x29, x30, [sp], #48
    b0b8:	ret
    b0bc:	orr	x4, x0, x4
    b0c0:	cbnz	x3, b0fc <__trunctfdf2@@GCC_3.0+0x40c>
    b0c4:	cbnz	x4, b17c <__trunctfdf2@@GCC_3.0+0x48c>
    b0c8:	mov	w0, #0x0                   	// #0
    b0cc:	and	w3, w3, #0x1f
    b0d0:	mov	x19, #0x0                   	// #0
    b0d4:	nop
    b0d8:	mov	w1, w19
    b0dc:	bfi	w1, w3, #10, #22
    b0e0:	orr	w19, w1, w5, lsl #15
    b0e4:	sxth	x19, w19
    b0e8:	cbnz	w0, b0a8 <__trunctfdf2@@GCC_3.0+0x3b8>
    b0ec:	dup	v0.4h, w19
    b0f0:	ldr	x19, [sp, #16]
    b0f4:	ldp	x29, x30, [sp], #48
    b0f8:	ret
    b0fc:	cbnz	x4, b1b0 <__trunctfdf2@@GCC_3.0+0x4c0>
    b100:	mov	x3, #0x1f                  	// #31
    b104:	b	b0c8 <__trunctfdf2@@GCC_3.0+0x3d8>
    b108:	cmp	x3, #0x0
    b10c:	b.le	b1d4 <__trunctfdf2@@GCC_3.0+0x4e4>
    b110:	orr	x4, x4, x0, lsl #26
    b114:	mov	w6, #0x0                   	// #0
    b118:	cmp	x4, #0x0
    b11c:	cset	x1, ne  // ne = any
    b120:	orr	x1, x1, x0, lsr #38
    b124:	tst	x1, #0x7
    b128:	b.eq	b268 <__trunctfdf2@@GCC_3.0+0x578>  // b.none
    b12c:	and	x4, x2, #0xc00000
    b130:	cmp	x4, #0x400, lsl #12
    b134:	b.eq	b194 <__trunctfdf2@@GCC_3.0+0x4a4>  // b.none
    b138:	cmp	x4, #0x800, lsl #12
    b13c:	mov	w0, #0x10                  	// #16
    b140:	b.eq	b078 <__trunctfdf2@@GCC_3.0+0x388>  // b.none
    b144:	cbz	x4, b278 <__trunctfdf2@@GCC_3.0+0x588>
    b148:	and	x4, x1, #0x2000
    b14c:	cbz	w6, b154 <__trunctfdf2@@GCC_3.0+0x464>
    b150:	orr	w0, w0, #0x8
    b154:	cbz	x4, b26c <__trunctfdf2@@GCC_3.0+0x57c>
    b158:	cmp	x3, #0x1e
    b15c:	add	x3, x3, #0x1
    b160:	b.eq	b22c <__trunctfdf2@@GCC_3.0+0x53c>  // b.none
    b164:	ubfx	x1, x1, #3, #10
    b168:	orr	w3, w1, w3, lsl #10
    b16c:	orr	w19, w3, w5, lsl #15
    b170:	sxth	x19, w19
    b174:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    b178:	b	b0ac <__trunctfdf2@@GCC_3.0+0x3bc>
    b17c:	and	x4, x2, #0xc00000
    b180:	mov	w6, #0x1                   	// #1
    b184:	cmp	x4, #0x400, lsl #12
    b188:	mov	x3, #0x0                   	// #0
    b18c:	mov	x1, #0x1                   	// #1
    b190:	b.ne	b138 <__trunctfdf2@@GCC_3.0+0x448>  // b.any
    b194:	cbnz	w5, b19c <__trunctfdf2@@GCC_3.0+0x4ac>
    b198:	add	x1, x1, #0x8
    b19c:	mov	w0, #0x10                  	// #16
    b1a0:	b	b084 <__trunctfdf2@@GCC_3.0+0x394>
    b1a4:	mov	x3, #0x1f                  	// #31
    b1a8:	mov	w0, #0x14                  	// #20
    b1ac:	b	b0cc <__trunctfdf2@@GCC_3.0+0x3dc>
    b1b0:	lsr	x2, x0, #50
    b1b4:	lsr	x1, x0, #41
    b1b8:	eor	w0, w2, #0x1
    b1bc:	mov	x2, #0x7fff                	// #32767
    b1c0:	cmp	x3, x2
    b1c4:	orr	x19, x1, #0x200
    b1c8:	csel	w0, w0, wzr, eq  // eq = none
    b1cc:	mov	w3, #0x1f                  	// #31
    b1d0:	b	b0d8 <__trunctfdf2@@GCC_3.0+0x3e8>
    b1d4:	cmn	x3, #0xa
    b1d8:	b.lt	b17c <__trunctfdf2@@GCC_3.0+0x48c>  // b.tstop
    b1dc:	orr	x0, x0, #0x8000000000000
    b1e0:	add	w6, w3, #0x19
    b1e4:	mov	w1, #0x27                  	// #39
    b1e8:	sub	w3, w1, w3
    b1ec:	lsl	x6, x0, x6
    b1f0:	orr	x4, x6, x4
    b1f4:	cmp	x4, #0x0
    b1f8:	lsr	x0, x0, x3
    b1fc:	cset	x1, ne  // ne = any
    b200:	orr	x1, x0, x1
    b204:	ands	x4, x1, #0x7
    b208:	b.eq	b218 <__trunctfdf2@@GCC_3.0+0x528>  // b.none
    b20c:	mov	w6, #0x1                   	// #1
    b210:	mov	x3, #0x0                   	// #0
    b214:	b	b12c <__trunctfdf2@@GCC_3.0+0x43c>
    b218:	tbz	w2, #11, b264 <__trunctfdf2@@GCC_3.0+0x574>
    b21c:	mov	w0, #0x0                   	// #0
    b220:	mov	x3, #0x0                   	// #0
    b224:	orr	w0, w0, #0x8
    b228:	b	b154 <__trunctfdf2@@GCC_3.0+0x464>
    b22c:	ands	x2, x2, #0xc00000
    b230:	b.eq	b258 <__trunctfdf2@@GCC_3.0+0x568>  // b.none
    b234:	cmp	x2, #0x400, lsl #12
    b238:	b.eq	b2a4 <__trunctfdf2@@GCC_3.0+0x5b4>  // b.none
    b23c:	cmp	x2, #0x800, lsl #12
    b240:	mov	w4, #0x1e                  	// #30
    b244:	csel	w1, w5, wzr, eq  // eq = none
    b248:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    b24c:	cmp	w1, #0x0
    b250:	csel	w3, w3, w4, ne  // ne = any
    b254:	csel	x2, xzr, x2, ne  // ne = any
    b258:	mov	w1, #0x14                  	// #20
    b25c:	orr	w0, w0, w1
    b260:	b	b098 <__trunctfdf2@@GCC_3.0+0x3a8>
    b264:	mov	x3, #0x0                   	// #0
    b268:	mov	w0, #0x0                   	// #0
    b26c:	lsr	x19, x1, #3
    b270:	and	w3, w3, #0x1f
    b274:	b	b0d8 <__trunctfdf2@@GCC_3.0+0x3e8>
    b278:	and	x4, x1, #0xf
    b27c:	cmp	x4, #0x4
    b280:	add	x4, x1, #0x4
    b284:	csel	x1, x4, x1, ne  // ne = any
    b288:	b	b084 <__trunctfdf2@@GCC_3.0+0x394>
    b28c:	cbz	w5, b1a4 <__trunctfdf2@@GCC_3.0+0x4b4>
    b290:	mov	w0, #0x14                  	// #20
    b294:	mov	x3, #0x1e                  	// #30
    b298:	mov	x1, #0xffffffffffffffff    	// #-1
    b29c:	mov	w6, #0x0                   	// #0
    b2a0:	b	b084 <__trunctfdf2@@GCC_3.0+0x394>
    b2a4:	cmp	w5, #0x0
    b2a8:	mov	w1, #0x1e                  	// #30
    b2ac:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    b2b0:	csel	w3, w3, w1, eq  // eq = none
    b2b4:	csel	x2, xzr, x2, eq  // eq = none
    b2b8:	b	b258 <__trunctfdf2@@GCC_3.0+0x568>
    b2bc:	nop
    b2c0:	stp	x29, x30, [sp, #-48]!
    b2c4:	mov	x29, sp
    b2c8:	str	x19, [sp, #16]
    b2cc:	mrs	x0, fpcr
    b2d0:	umov	w0, v0.h[0]
    b2d4:	mov	w19, #0x0                   	// #0
    b2d8:	bfxil	w19, w0, #0, #16
    b2dc:	ubfx	x1, x19, #10, #5
    b2e0:	ubfx	x0, x19, #0, #10
    b2e4:	cmp	x1, #0xe
    b2e8:	ubfx	x19, x19, #15, #1
    b2ec:	b.gt	b324 <__trunctfdf2@@GCC_3.0+0x634>
    b2f0:	and	x0, x0, #0xffff
    b2f4:	mov	x19, #0x0                   	// #0
    b2f8:	orr	x0, x0, x1
    b2fc:	mov	x1, #0x0                   	// #0
    b300:	cbz	x0, b314 <__trunctfdf2@@GCC_3.0+0x624>
    b304:	mov	w0, #0x10                  	// #16
    b308:	str	x1, [sp, #40]
    b30c:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    b310:	ldr	x1, [sp, #40]
    b314:	mov	x0, x19
    b318:	ldr	x19, [sp, #16]
    b31c:	ldp	x29, x30, [sp], #48
    b320:	ret
    b324:	and	x2, x19, #0xff
    b328:	cmp	x1, #0x1f
    b32c:	b.eq	b378 <__trunctfdf2@@GCC_3.0+0x688>  // b.none
    b330:	and	x0, x0, #0xffff
    b334:	cmp	x1, #0x18
    b338:	orr	x0, x0, #0x400
    b33c:	b.le	b398 <__trunctfdf2@@GCC_3.0+0x6a8>
    b340:	sub	w19, w1, #0x19
    b344:	subs	w3, w1, #0x59
    b348:	lsr	x4, x0, #1
    b34c:	mov	w5, #0x3f                  	// #63
    b350:	sub	w5, w5, w19
    b354:	lsl	x1, x0, x3
    b358:	lsl	x19, x0, x19
    b35c:	csel	x19, xzr, x19, pl  // pl = nfrst
    b360:	lsr	x4, x4, x5
    b364:	csel	x1, x1, x4, pl  // pl = nfrst
    b368:	cbz	x2, b314 <__trunctfdf2@@GCC_3.0+0x624>
    b36c:	negs	x19, x19
    b370:	ngc	x1, x1
    b374:	b	b314 <__trunctfdf2@@GCC_3.0+0x624>
    b378:	adrp	x1, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    b37c:	mov	x0, #0x1                   	// #1
    b380:	sub	x19, x0, x2
    b384:	ldr	x1, [x1, #2024]
    b388:	asr	x2, x19, #63
    b38c:	negs	x19, x19
    b390:	sbc	x1, x1, x2
    b394:	b	b308 <__trunctfdf2@@GCC_3.0+0x618>
    b398:	add	w4, w1, #0x27
    b39c:	mov	w19, #0x19                  	// #25
    b3a0:	sub	w19, w19, w1
    b3a4:	mov	x1, #0x0                   	// #0
    b3a8:	lsl	x4, x0, x4
    b3ac:	lsr	x19, x0, x19
    b3b0:	cbz	x2, b3bc <__trunctfdf2@@GCC_3.0+0x6cc>
    b3b4:	negs	x19, x19
    b3b8:	csetm	x1, cc  // cc = lo, ul, last
    b3bc:	cbnz	x4, b304 <__trunctfdf2@@GCC_3.0+0x614>
    b3c0:	b	b314 <__trunctfdf2@@GCC_3.0+0x624>
    b3c4:	nop
    b3c8:	stp	x29, x30, [sp, #-48]!
    b3cc:	mov	x29, sp
    b3d0:	str	x19, [sp, #16]
    b3d4:	mrs	x0, fpcr
    b3d8:	umov	w0, v0.h[0]
    b3dc:	mov	w1, #0x0                   	// #0
    b3e0:	bfxil	w1, w0, #0, #16
    b3e4:	and	x19, x1, #0x3ff
    b3e8:	ubfx	x0, x1, #10, #5
    b3ec:	ubfx	x1, x1, #15, #1
    b3f0:	cmp	x0, #0xe
    b3f4:	b.gt	b42c <__trunctfdf2@@GCC_3.0+0x73c>
    b3f8:	orr	x19, x0, x19
    b3fc:	mov	x1, #0x0                   	// #0
    b400:	cbz	x19, b41c <__trunctfdf2@@GCC_3.0+0x72c>
    b404:	mov	w0, #0x10                  	// #16
    b408:	mov	x19, #0x0                   	// #0
    b40c:	mov	x1, #0x0                   	// #0
    b410:	str	x1, [sp, #40]
    b414:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    b418:	ldr	x1, [sp, #40]
    b41c:	mov	x0, x19
    b420:	ldr	x19, [sp, #16]
    b424:	ldp	x29, x30, [sp], #48
    b428:	ret
    b42c:	cmp	x0, #0x1e
    b430:	cset	w3, gt
    b434:	orr	w3, w1, w3
    b438:	cbz	w3, b450 <__trunctfdf2@@GCC_3.0+0x760>
    b43c:	eor	w1, w1, #0x1
    b440:	mov	w0, #0x1                   	// #1
    b444:	sbfx	x19, x1, #0, #1
    b448:	mov	x1, x19
    b44c:	b	b410 <__trunctfdf2@@GCC_3.0+0x720>
    b450:	mov	x2, x0
    b454:	orr	x19, x19, #0x400
    b458:	cmp	x0, #0x18
    b45c:	b.gt	b484 <__trunctfdf2@@GCC_3.0+0x794>
    b460:	mov	w1, #0x19                  	// #25
    b464:	add	w0, w0, #0x27
    b468:	sub	w2, w1, w2
    b46c:	mov	x1, #0x0                   	// #0
    b470:	lsl	x0, x19, x0
    b474:	lsr	x19, x19, x2
    b478:	cbz	x0, b41c <__trunctfdf2@@GCC_3.0+0x72c>
    b47c:	mov	w0, #0x10                  	// #16
    b480:	b	b410 <__trunctfdf2@@GCC_3.0+0x720>
    b484:	sub	w4, w0, #0x19
    b488:	subs	w2, w0, #0x59
    b48c:	mov	w3, #0x3f                  	// #63
    b490:	lsr	x0, x19, #1
    b494:	sub	w3, w3, w4
    b498:	lsl	x1, x19, x2
    b49c:	lsl	x19, x19, x4
    b4a0:	csel	x19, xzr, x19, pl  // pl = nfrst
    b4a4:	lsr	x0, x0, x3
    b4a8:	csel	x1, x1, x0, pl  // pl = nfrst
    b4ac:	mov	x0, x19
    b4b0:	ldr	x19, [sp, #16]
    b4b4:	ldp	x29, x30, [sp], #48
    b4b8:	ret
    b4bc:	nop
    b4c0:	mrs	x5, fpcr
    b4c4:	orr	x2, x0, x1
    b4c8:	cbnz	x2, b4d4 <__trunctfdf2@@GCC_3.0+0x7e4>
    b4cc:	fmov	d0, xzr
    b4d0:	ret
    b4d4:	lsr	x2, x1, #63
    b4d8:	and	w6, w2, #0xff
    b4dc:	mov	x2, x1
    b4e0:	tbnz	x1, #63, b528 <__trunctfdf2@@GCC_3.0+0x838>
    b4e4:	cbz	x2, b534 <__trunctfdf2@@GCC_3.0+0x844>
    b4e8:	and	x3, x5, #0xc00000
    b4ec:	mov	x2, x3
    b4f0:	cbnz	x3, b624 <__trunctfdf2@@GCC_3.0+0x934>
    b4f4:	mov	w4, #0x1f                  	// #31
    b4f8:	mov	w0, #0x14                  	// #20
    b4fc:	bfi	w2, w4, #10, #22
    b500:	orr	w1, w2, w6, lsl #15
    b504:	sxth	x1, w1
    b508:	fmov	d0, x1
    b50c:	stp	x29, x30, [sp, #-32]!
    b510:	mov	x29, sp
    b514:	str	s0, [sp, #28]
    b518:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    b51c:	ldr	s0, [sp, #28]
    b520:	ldp	x29, x30, [sp], #32
    b524:	ret
    b528:	negs	x0, x0
    b52c:	ngc	x2, x1
    b530:	cbnz	x2, b4e8 <__trunctfdf2@@GCC_3.0+0x7f8>
    b534:	clz	x3, x0
    b538:	mov	w4, #0x4e                  	// #78
    b53c:	sub	w3, w4, w3
    b540:	mov	x2, x0
    b544:	cmp	w3, #0x1e
    b548:	sxtw	x4, w3
    b54c:	b.gt	b4e8 <__trunctfdf2@@GCC_3.0+0x7f8>
    b550:	cmp	w3, #0x19
    b554:	b.le	b600 <__trunctfdf2@@GCC_3.0+0x910>
    b558:	cmp	x4, #0x1c
    b55c:	b.le	b690 <__trunctfdf2@@GCC_3.0+0x9a0>
    b560:	sub	w0, w3, #0x1c
    b564:	mov	w7, #0x9c                  	// #156
    b568:	sub	w7, w7, w3
    b56c:	cmp	w3, #0x5c
    b570:	sub	w8, w7, #0x40
    b574:	lsr	x9, x2, #1
    b578:	mov	w10, #0x3f                  	// #63
    b57c:	sub	w10, w10, w7
    b580:	lsr	x0, x2, x0
    b584:	csel	x0, xzr, x0, pl  // pl = nfrst
    b588:	cmp	w8, #0x0
    b58c:	lsl	x3, x2, x8
    b590:	lsr	x9, x9, x10
    b594:	csel	x3, x3, x9, ge  // ge = tcont
    b598:	lsl	x2, x2, x7
    b59c:	csel	x2, xzr, x2, ge  // ge = tcont
    b5a0:	orr	x2, x2, x3
    b5a4:	cmp	x2, #0x0
    b5a8:	cset	x2, ne  // ne = any
    b5ac:	orr	x2, x0, x2
    b5b0:	tst	x2, #0x7
    b5b4:	and	x2, x2, #0xffffffffffffdfff
    b5b8:	b.eq	b6ec <__trunctfdf2@@GCC_3.0+0x9fc>  // b.none
    b5bc:	and	x3, x5, #0xc00000
    b5c0:	cmp	x3, #0x400, lsl #12
    b5c4:	b.eq	b7a8 <__trunctfdf2@@GCC_3.0+0xab8>  // b.none
    b5c8:	cmp	x3, #0x800, lsl #12
    b5cc:	b.eq	b75c <__trunctfdf2@@GCC_3.0+0xa6c>  // b.none
    b5d0:	cbz	x3, b78c <__trunctfdf2@@GCC_3.0+0xa9c>
    b5d4:	and	x5, x2, #0x2000
    b5d8:	mov	w0, #0x10                  	// #16
    b5dc:	cbz	x5, b6f0 <__trunctfdf2@@GCC_3.0+0xa00>
    b5e0:	cmp	x4, #0x1e
    b5e4:	add	x4, x4, #0x1
    b5e8:	b.eq	b780 <__trunctfdf2@@GCC_3.0+0xa90>  // b.none
    b5ec:	mov	x1, #0xfffffffffffffbff    	// #-1025
    b5f0:	and	w4, w4, #0x1f
    b5f4:	movk	x1, #0x1fff, lsl #48
    b5f8:	and	x2, x1, x2, lsr #3
    b5fc:	b	b4fc <__trunctfdf2@@GCC_3.0+0x80c>
    b600:	cmp	x4, #0x19
    b604:	b.ne	b6c8 <__trunctfdf2@@GCC_3.0+0x9d8>  // b.any
    b608:	and	x0, x0, #0x3ff
    b60c:	mov	w1, #0x6400                	// #25600
    b610:	orr	w0, w1, w0
    b614:	orr	w1, w0, w6, lsl #15
    b618:	sxth	x0, w1
    b61c:	fmov	d0, x0
    b620:	ret
    b624:	mvn	x0, x1
    b628:	cmp	x3, #0x400, lsl #12
    b62c:	cset	w4, eq  // eq = none
    b630:	lsr	x2, x0, #63
    b634:	tst	w4, w2
    b638:	b.ne	b7b4 <__trunctfdf2@@GCC_3.0+0xac4>  // b.any
    b63c:	cmp	x3, #0x800, lsl #12
    b640:	ccmp	w6, #0x0, #0x4, eq  // eq = none
    b644:	b.ne	b7b4 <__trunctfdf2@@GCC_3.0+0xac4>  // b.any
    b648:	cmp	x3, #0x400, lsl #12
    b64c:	b.eq	b73c <__trunctfdf2@@GCC_3.0+0xa4c>  // b.none
    b650:	cmp	x3, #0x800, lsl #12
    b654:	b.eq	b724 <__trunctfdf2@@GCC_3.0+0xa34>  // b.none
    b658:	cmp	x3, #0x400, lsl #12
    b65c:	lsr	x0, x0, #63
    b660:	cset	w1, eq  // eq = none
    b664:	tst	w1, w0
    b668:	b.ne	b768 <__trunctfdf2@@GCC_3.0+0xa78>  // b.any
    b66c:	cmp	x3, #0x800, lsl #12
    b670:	ccmp	w6, #0x0, #0x4, eq  // eq = none
    b674:	b.ne	b7c4 <__trunctfdf2@@GCC_3.0+0xad4>  // b.any
    b678:	mov	w2, #0x7bff                	// #31743
    b67c:	mov	w0, #0x14                  	// #20
    b680:	orr	w1, w2, w6, lsl #15
    b684:	sxth	x1, w1
    b688:	fmov	d0, x1
    b68c:	b	b50c <__trunctfdf2@@GCC_3.0+0x81c>
    b690:	b.eq	b5b0 <__trunctfdf2@@GCC_3.0+0x8c0>  // b.none
    b694:	mov	w2, #0x1c                  	// #28
    b698:	sub	w2, w2, w3
    b69c:	lsl	x0, x0, x2
    b6a0:	and	x2, x0, #0xffffffffffffdfff
    b6a4:	tst	x0, #0x7
    b6a8:	b.ne	b5bc <__trunctfdf2@@GCC_3.0+0x8cc>  // b.any
    b6ac:	and	w3, w3, #0x1f
    b6b0:	ubfx	x2, x2, #3, #10
    b6b4:	orr	w2, w2, w3, lsl #10
    b6b8:	orr	w1, w2, w6, lsl #15
    b6bc:	sxth	x0, w1
    b6c0:	fmov	d0, x0
    b6c4:	ret
    b6c8:	mov	w1, #0x19                  	// #25
    b6cc:	sub	w1, w1, w3
    b6d0:	and	w3, w3, #0x1f
    b6d4:	lsl	x0, x0, x1
    b6d8:	bfi	w0, w3, #10, #22
    b6dc:	orr	w1, w0, w6, lsl #15
    b6e0:	sxth	x0, w1
    b6e4:	fmov	d0, x0
    b6e8:	ret
    b6ec:	mov	w0, #0x0                   	// #0
    b6f0:	lsr	x1, x2, #3
    b6f4:	and	w2, w4, #0x1f
    b6f8:	cmp	x1, #0x0
    b6fc:	ccmp	x4, #0x1f, #0x0, ne  // ne = any
    b700:	b.ne	b70c <__trunctfdf2@@GCC_3.0+0xa1c>  // b.any
    b704:	orr	x1, x1, #0x200
    b708:	mov	w2, #0x1f                  	// #31
    b70c:	bfi	w1, w2, #10, #22
    b710:	orr	w1, w1, w6, lsl #15
    b714:	sxth	x1, w1
    b718:	fmov	d0, x1
    b71c:	cbnz	w0, b50c <__trunctfdf2@@GCC_3.0+0x81c>
    b720:	ret
    b724:	mov	x2, #0xffffffffffffffff    	// #-1
    b728:	mov	x4, #0x1e                  	// #30
    b72c:	mov	w0, #0x14                  	// #20
    b730:	tbnz	x1, #63, b750 <__trunctfdf2@@GCC_3.0+0xa60>
    b734:	and	x5, x2, #0x2000
    b738:	b	b5dc <__trunctfdf2@@GCC_3.0+0x8ec>
    b73c:	mov	x2, #0xffffffffffffffff    	// #-1
    b740:	mov	x4, #0x1e                  	// #30
    b744:	mov	w0, #0x14                  	// #20
    b748:	tbnz	x1, #63, b734 <__trunctfdf2@@GCC_3.0+0xa44>
    b74c:	nop
    b750:	add	x2, x2, #0x8
    b754:	and	x5, x2, #0x2000
    b758:	b	b5dc <__trunctfdf2@@GCC_3.0+0x8ec>
    b75c:	mov	w0, #0x10                  	// #16
    b760:	tbz	x1, #63, b734 <__trunctfdf2@@GCC_3.0+0xa44>
    b764:	b	b750 <__trunctfdf2@@GCC_3.0+0xa60>
    b768:	ubfiz	w1, w6, #15, #1
    b76c:	mov	w0, #0x14                  	// #20
    b770:	orr	w1, w1, #0x7c00
    b774:	sxth	x1, w1
    b778:	fmov	d0, x1
    b77c:	b	b50c <__trunctfdf2@@GCC_3.0+0x81c>
    b780:	cbz	x3, b768 <__trunctfdf2@@GCC_3.0+0xa78>
    b784:	mvn	x0, x1
    b788:	b	b658 <__trunctfdf2@@GCC_3.0+0x968>
    b78c:	and	x0, x2, #0xf
    b790:	cmp	x0, #0x4
    b794:	b.eq	b5d4 <__trunctfdf2@@GCC_3.0+0x8e4>  // b.none
    b798:	add	x2, x2, #0x4
    b79c:	mov	w0, #0x10                  	// #16
    b7a0:	and	x5, x2, #0x2000
    b7a4:	b	b5dc <__trunctfdf2@@GCC_3.0+0x8ec>
    b7a8:	mov	w0, #0x10                  	// #16
    b7ac:	tbz	x1, #63, b750 <__trunctfdf2@@GCC_3.0+0xa60>
    b7b0:	b	b734 <__trunctfdf2@@GCC_3.0+0xa44>
    b7b4:	mov	w4, #0x1f                  	// #31
    b7b8:	mov	w0, #0x14                  	// #20
    b7bc:	mov	x2, #0x0                   	// #0
    b7c0:	b	b4fc <__trunctfdf2@@GCC_3.0+0x80c>
    b7c4:	mov	x0, #0xfffffffffffffc00    	// #-1024
    b7c8:	fmov	d0, x0
    b7cc:	mov	w0, #0x14                  	// #20
    b7d0:	b	b50c <__trunctfdf2@@GCC_3.0+0x81c>
    b7d4:	nop
    b7d8:	mrs	x5, fpcr
    b7dc:	orr	x2, x0, x1
    b7e0:	cbnz	x2, b7ec <__trunctfdf2@@GCC_3.0+0xafc>
    b7e4:	fmov	d0, xzr
    b7e8:	ret
    b7ec:	cbz	x1, b82c <__trunctfdf2@@GCC_3.0+0xb3c>
    b7f0:	and	x2, x5, #0x800000
    b7f4:	mov	w3, #0x1f                  	// #31
    b7f8:	mov	x1, x2
    b7fc:	mov	w0, #0x14                  	// #20
    b800:	cbnz	x2, b95c <__trunctfdf2@@GCC_3.0+0xc6c>
    b804:	bfi	w1, w3, #10, #22
    b808:	and	x1, x1, #0x7fff
    b80c:	fmov	d0, x1
    b810:	stp	x29, x30, [sp, #-32]!
    b814:	mov	x29, sp
    b818:	str	s0, [sp, #28]
    b81c:	bl	6ba8 <__udivmodti4@@GCC_3.0+0x450>
    b820:	ldr	s0, [sp, #28]
    b824:	ldp	x29, x30, [sp], #32
    b828:	ret
    b82c:	clz	x2, x0
    b830:	mov	w1, #0x4e                  	// #78
    b834:	sub	w2, w1, w2
    b838:	mov	x1, x0
    b83c:	cmp	w2, #0x1e
    b840:	sxtw	x3, w2
    b844:	b.gt	b7f0 <__trunctfdf2@@GCC_3.0+0xb00>
    b848:	cmp	w2, #0x19
    b84c:	b.le	b8f0 <__trunctfdf2@@GCC_3.0+0xc00>
    b850:	cmp	x3, #0x1c
    b854:	b.le	b90c <__trunctfdf2@@GCC_3.0+0xc1c>
    b858:	mov	w4, #0x9c                  	// #156
    b85c:	sub	w4, w4, w2
    b860:	subs	w0, w4, #0x40
    b864:	lsr	x7, x1, #1
    b868:	mov	w8, #0x3f                  	// #63
    b86c:	sub	w8, w8, w4
    b870:	lsl	x6, x1, x0
    b874:	sub	w0, w2, #0x1c
    b878:	lsl	x4, x1, x4
    b87c:	csel	x4, xzr, x4, pl  // pl = nfrst
    b880:	lsr	x7, x7, x8
    b884:	csel	x6, x6, x7, pl  // pl = nfrst
    b888:	orr	x4, x4, x6
    b88c:	lsr	x1, x1, x0
    b890:	cmp	x4, #0x0
    b894:	cset	x0, ne  // ne = any
    b898:	cmp	w2, #0x5c
    b89c:	csel	x1, xzr, x1, pl  // pl = nfrst
    b8a0:	orr	x1, x0, x1
    b8a4:	tst	x1, #0x7
    b8a8:	and	x1, x1, #0xffffffffffffdfff
    b8ac:	b.eq	b9d8 <__trunctfdf2@@GCC_3.0+0xce8>  // b.none
    b8b0:	ands	x0, x5, #0xc00000
    b8b4:	b.eq	b9c0 <__trunctfdf2@@GCC_3.0+0xcd0>  // b.none
    b8b8:	cmp	x0, #0x400, lsl #12
    b8bc:	b.ne	b8c4 <__trunctfdf2@@GCC_3.0+0xbd4>  // b.any
    b8c0:	add	x1, x1, #0x8
    b8c4:	and	x0, x1, #0x2000
    b8c8:	cbz	x0, b9fc <__trunctfdf2@@GCC_3.0+0xd0c>
    b8cc:	cmp	x3, #0x1e
    b8d0:	add	x3, x3, #0x1
    b8d4:	b.eq	b994 <__trunctfdf2@@GCC_3.0+0xca4>  // b.none
    b8d8:	mov	x0, #0xfffffffffffffbff    	// #-1025
    b8dc:	and	w3, w3, #0x1f
    b8e0:	movk	x0, #0x1fff, lsl #48
    b8e4:	and	x1, x0, x1, lsr #3
    b8e8:	mov	w0, #0x10                  	// #16
    b8ec:	b	b804 <__trunctfdf2@@GCC_3.0+0xb14>
    b8f0:	cmp	x3, #0x19
    b8f4:	b.ne	b93c <__trunctfdf2@@GCC_3.0+0xc4c>  // b.any
    b8f8:	and	x1, x0, #0x3ff
    b8fc:	mov	w0, #0x6400                	// #25600
    b900:	orr	w0, w0, w1
    b904:	fmov	s0, w0
    b908:	ret
    b90c:	b.eq	b8a4 <__trunctfdf2@@GCC_3.0+0xbb4>  // b.none
    b910:	mov	w1, #0x1c                  	// #28
    b914:	sub	w1, w1, w2
    b918:	lsl	x0, x0, x1
    b91c:	and	x1, x0, #0xffffffffffffdfff
    b920:	tst	x0, #0x7
    b924:	b.ne	b8b0 <__trunctfdf2@@GCC_3.0+0xbc0>  // b.any
    b928:	ubfx	x1, x1, #3, #10
    b92c:	ubfiz	x2, x2, #10, #5
    b930:	orr	x0, x2, x1
    b934:	fmov	d0, x0
    b938:	ret
    b93c:	mov	w1, #0x19                  	// #25
    b940:	sub	w1, w1, w2
    b944:	and	w2, w2, #0x1f
    b948:	lsl	x0, x0, x1
    b94c:	bfi	w0, w2, #10, #22
    b950:	and	x0, x0, #0x7fff
    b954:	fmov	d0, x0
    b958:	ret
    b95c:	ands	x0, x5, #0xc00000
    b960:	b.eq	b9b8 <__trunctfdf2@@GCC_3.0+0xcc8>  // b.none
    b964:	cmp	x0, #0x400, lsl #12
    b968:	b.ne	b998 <__trunctfdf2@@GCC_3.0+0xca8>  // b.any
    b96c:	mov	x1, #0x7                   	// #7
    b970:	lsr	x1, x1, #3
    b974:	mov	w2, #0x1e                  	// #30
    b978:	mov	w0, #0x14                  	// #20
    b97c:	nop
    b980:	bfi	w1, w2, #10, #22
    b984:	and	x1, x1, #0x7fff
    b988:	fmov	d0, x1
    b98c:	cbnz	w0, b810 <__trunctfdf2@@GCC_3.0+0xb20>
    b990:	ret
    b994:	and	x2, x5, #0x800000
    b998:	mov	x0, #0x7c00                	// #31744
    b99c:	fmov	d0, x0
    b9a0:	mov	w0, #0x14                  	// #20
    b9a4:	cbz	x2, b810 <__trunctfdf2@@GCC_3.0+0xb20>
    b9a8:	mov	x0, #0x7bff                	// #31743
    b9ac:	fmov	d0, x0
    b9b0:	mov	w0, #0x14                  	// #20
    b9b4:	b	b810 <__trunctfdf2@@GCC_3.0+0xb20>
    b9b8:	mov	x1, #0x3                   	// #3
    b9bc:	b	b970 <__trunctfdf2@@GCC_3.0+0xc80>
    b9c0:	and	x0, x1, #0xf
    b9c4:	cmp	x0, #0x4
    b9c8:	b.eq	b8c4 <__trunctfdf2@@GCC_3.0+0xbd4>  // b.none
    b9cc:	add	x1, x1, #0x4
    b9d0:	and	x0, x1, #0x2000
    b9d4:	b	b8c8 <__trunctfdf2@@GCC_3.0+0xbd8>
    b9d8:	mov	w0, #0x0                   	// #0
    b9dc:	lsr	x1, x1, #3
    b9e0:	and	w2, w2, #0x1f
    b9e4:	cmp	x1, #0x0
    b9e8:	ccmp	x3, #0x1f, #0x0, ne  // ne = any
    b9ec:	b.ne	b980 <__trunctfdf2@@GCC_3.0+0xc90>  // b.any
    b9f0:	orr	x1, x1, #0x200
    b9f4:	mov	w2, #0x1f                  	// #31
    b9f8:	b	b980 <__trunctfdf2@@GCC_3.0+0xc90>
    b9fc:	mov	w0, #0x10                  	// #16
    ba00:	b	b9dc <__trunctfdf2@@GCC_3.0+0xcec>
    ba04:	nop

000000000000ba08 <__enable_execute_stack@@GCC_3.4.2>:
    ba08:	ret
    ba0c:	nop
    ba10:	and	w5, w0, #0xff
    ba14:	cmp	w5, #0x50
    ba18:	b.eq	bb30 <__enable_execute_stack@@GCC_3.4.2+0x128>  // b.none
    ba1c:	and	w4, w5, #0xf
    ba20:	cmp	w4, #0x4
    ba24:	b.eq	ba40 <__enable_execute_stack@@GCC_3.4.2+0x38>  // b.none
    ba28:	b.ls	ba54 <__enable_execute_stack@@GCC_3.4.2+0x4c>  // b.plast
    ba2c:	cmp	w4, #0xb
    ba30:	b.eq	bb54 <__enable_execute_stack@@GCC_3.4.2+0x14c>  // b.none
    ba34:	b.ls	bab0 <__enable_execute_stack@@GCC_3.4.2+0xa8>  // b.plast
    ba38:	cmp	w4, #0xc
    ba3c:	b.ne	bb64 <__enable_execute_stack@@GCC_3.4.2+0x15c>  // b.any
    ba40:	mov	x0, x2
    ba44:	ldr	x4, [x0], #8
    ba48:	cbnz	x4, bb10 <__enable_execute_stack@@GCC_3.4.2+0x108>
    ba4c:	str	x4, [x3]
    ba50:	ret
    ba54:	cmp	w4, #0x2
    ba58:	b.eq	bb44 <__enable_execute_stack@@GCC_3.4.2+0x13c>  // b.none
    ba5c:	b.ls	ba78 <__enable_execute_stack@@GCC_3.4.2+0x70>  // b.plast
    ba60:	cmp	w4, #0x3
    ba64:	b.ne	bb64 <__enable_execute_stack@@GCC_3.4.2+0x15c>  // b.any
    ba68:	mov	x0, x2
    ba6c:	ldr	w4, [x0], #4
    ba70:	cbz	x4, ba4c <__enable_execute_stack@@GCC_3.4.2+0x44>
    ba74:	b	bb10 <__enable_execute_stack@@GCC_3.4.2+0x108>
    ba78:	cbz	w4, ba40 <__enable_execute_stack@@GCC_3.4.2+0x38>
    ba7c:	cmp	w4, #0x1
    ba80:	b.ne	bb64 <__enable_execute_stack@@GCC_3.4.2+0x15c>  // b.any
    ba84:	mov	x0, x2
    ba88:	mov	x4, #0x0                   	// #0
    ba8c:	mov	w7, #0x0                   	// #0
    ba90:	ldrb	w8, [x0], #1
    ba94:	and	x6, x8, #0x7f
    ba98:	lsl	x6, x6, x7
    ba9c:	add	w7, w7, #0x7
    baa0:	orr	x4, x4, x6
    baa4:	tbnz	w8, #7, ba90 <__enable_execute_stack@@GCC_3.4.2+0x88>
    baa8:	cbz	x4, ba4c <__enable_execute_stack@@GCC_3.4.2+0x44>
    baac:	b	bb10 <__enable_execute_stack@@GCC_3.4.2+0x108>
    bab0:	cmp	w4, #0x9
    bab4:	b.eq	bad0 <__enable_execute_stack@@GCC_3.4.2+0xc8>  // b.none
    bab8:	cmp	w4, #0xa
    babc:	b.ne	bb64 <__enable_execute_stack@@GCC_3.4.2+0x15c>  // b.any
    bac0:	mov	x0, x2
    bac4:	ldrsh	x4, [x0], #2
    bac8:	cbz	x4, ba4c <__enable_execute_stack@@GCC_3.4.2+0x44>
    bacc:	b	bb10 <__enable_execute_stack@@GCC_3.4.2+0x108>
    bad0:	mov	x0, x2
    bad4:	mov	x4, #0x0                   	// #0
    bad8:	mov	w7, #0x0                   	// #0
    badc:	ldrb	w8, [x0], #1
    bae0:	and	x6, x8, #0x7f
    bae4:	lsl	x6, x6, x7
    bae8:	add	w7, w7, #0x7
    baec:	orr	x4, x4, x6
    baf0:	tbnz	w8, #7, badc <__enable_execute_stack@@GCC_3.4.2+0xd4>
    baf4:	cmp	w7, #0x3f
    baf8:	b.hi	ba48 <__enable_execute_stack@@GCC_3.4.2+0x40>  // b.pmore
    bafc:	tbz	w8, #6, ba48 <__enable_execute_stack@@GCC_3.4.2+0x40>
    bb00:	mov	x6, #0xffffffffffffffff    	// #-1
    bb04:	lsl	x7, x6, x7
    bb08:	orr	x4, x4, x7
    bb0c:	nop
    bb10:	and	w6, w5, #0x70
    bb14:	cmp	w6, #0x10
    bb18:	csel	x1, x2, x1, eq  // eq = none
    bb1c:	add	x4, x4, x1
    bb20:	tbz	w5, #7, ba4c <__enable_execute_stack@@GCC_3.4.2+0x44>
    bb24:	ldr	x4, [x4]
    bb28:	str	x4, [x3]
    bb2c:	ret
    bb30:	add	x0, x2, #0x7
    bb34:	and	x0, x0, #0xfffffffffffffff8
    bb38:	ldr	x4, [x0], #8
    bb3c:	str	x4, [x3]
    bb40:	ret
    bb44:	mov	x0, x2
    bb48:	ldrh	w4, [x0], #2
    bb4c:	cbz	x4, ba4c <__enable_execute_stack@@GCC_3.4.2+0x44>
    bb50:	b	bb10 <__enable_execute_stack@@GCC_3.4.2+0x108>
    bb54:	mov	x0, x2
    bb58:	ldrsw	x4, [x0], #4
    bb5c:	cbz	x4, ba4c <__enable_execute_stack@@GCC_3.4.2+0x44>
    bb60:	b	bb10 <__enable_execute_stack@@GCC_3.4.2+0x108>
    bb64:	stp	x29, x30, [sp, #-16]!
    bb68:	mov	x29, sp
    bb6c:	bl	2c50 <abort@plt>
    bb70:	adrp	x2, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    bb74:	add	x1, x2, #0x1c8
    bb78:	mov	w0, #0x8                   	// #8
    bb7c:	strb	w0, [x2, #456]
    bb80:	strb	w0, [x1, #1]
    bb84:	strb	w0, [x1, #2]
    bb88:	strb	w0, [x1, #3]
    bb8c:	strb	w0, [x1, #4]
    bb90:	strb	w0, [x1, #5]
    bb94:	strb	w0, [x1, #6]
    bb98:	strb	w0, [x1, #7]
    bb9c:	strb	w0, [x1, #8]
    bba0:	strb	w0, [x1, #9]
    bba4:	strb	w0, [x1, #10]
    bba8:	strb	w0, [x1, #11]
    bbac:	strb	w0, [x1, #12]
    bbb0:	strb	w0, [x1, #13]
    bbb4:	strb	w0, [x1, #14]
    bbb8:	strb	w0, [x1, #15]
    bbbc:	strb	w0, [x1, #16]
    bbc0:	strb	w0, [x1, #17]
    bbc4:	strb	w0, [x1, #18]
    bbc8:	strb	w0, [x1, #19]
    bbcc:	strb	w0, [x1, #20]
    bbd0:	strb	w0, [x1, #21]
    bbd4:	strb	w0, [x1, #22]
    bbd8:	strb	w0, [x1, #23]
    bbdc:	strb	w0, [x1, #24]
    bbe0:	strb	w0, [x1, #25]
    bbe4:	strb	w0, [x1, #26]
    bbe8:	strb	w0, [x1, #27]
    bbec:	strb	w0, [x1, #28]
    bbf0:	strb	w0, [x1, #29]
    bbf4:	strb	w0, [x1, #30]
    bbf8:	strb	w0, [x1, #31]
    bbfc:	strb	w0, [x1, #64]
    bc00:	strb	w0, [x1, #46]
    bc04:	strb	w0, [x1, #65]
    bc08:	strb	w0, [x1, #66]
    bc0c:	strb	w0, [x1, #67]
    bc10:	strb	w0, [x1, #68]
    bc14:	strb	w0, [x1, #69]
    bc18:	strb	w0, [x1, #70]
    bc1c:	strb	w0, [x1, #71]
    bc20:	strb	w0, [x1, #72]
    bc24:	strb	w0, [x1, #73]
    bc28:	strb	w0, [x1, #74]
    bc2c:	strb	w0, [x1, #75]
    bc30:	strb	w0, [x1, #76]
    bc34:	strb	w0, [x1, #77]
    bc38:	strb	w0, [x1, #78]
    bc3c:	strb	w0, [x1, #79]
    bc40:	strb	w0, [x1, #80]
    bc44:	strb	w0, [x1, #81]
    bc48:	strb	w0, [x1, #82]
    bc4c:	strb	w0, [x1, #83]
    bc50:	strb	w0, [x1, #84]
    bc54:	strb	w0, [x1, #85]
    bc58:	strb	w0, [x1, #86]
    bc5c:	strb	w0, [x1, #87]
    bc60:	strb	w0, [x1, #88]
    bc64:	strb	w0, [x1, #89]
    bc68:	strb	w0, [x1, #90]
    bc6c:	strb	w0, [x1, #91]
    bc70:	strb	w0, [x1, #92]
    bc74:	strb	w0, [x1, #93]
    bc78:	strb	w0, [x1, #94]
    bc7c:	strb	w0, [x1, #95]
    bc80:	strb	w0, [x1, #48]
    bc84:	strb	w0, [x1, #49]
    bc88:	strb	w0, [x1, #50]
    bc8c:	strb	w0, [x1, #51]
    bc90:	strb	w0, [x1, #52]
    bc94:	strb	w0, [x1, #53]
    bc98:	strb	w0, [x1, #54]
    bc9c:	strb	w0, [x1, #55]
    bca0:	strb	w0, [x1, #56]
    bca4:	strb	w0, [x1, #57]
    bca8:	strb	w0, [x1, #58]
    bcac:	strb	w0, [x1, #59]
    bcb0:	strb	w0, [x1, #60]
    bcb4:	strb	w0, [x1, #61]
    bcb8:	strb	w0, [x1, #62]
    bcbc:	strb	w0, [x1, #63]
    bcc0:	strb	w0, [x1, #96]
    bcc4:	ret
    bcc8:	stp	x29, x30, [sp, #-80]!
    bccc:	mov	x29, sp
    bcd0:	stp	x21, x22, [sp, #32]
    bcd4:	mov	x21, x0
    bcd8:	ldr	x0, [x1, #832]
    bcdc:	stp	x19, x20, [sp, #16]
    bce0:	mov	x20, x1
    bce4:	stp	x23, x24, [sp, #48]
    bce8:	tbz	x0, #62, bcf4 <__enable_execute_stack@@GCC_3.4.2+0x2ec>
    bcec:	ldrb	w1, [x1, #887]
    bcf0:	cbnz	w1, bcfc <__enable_execute_stack@@GCC_3.4.2+0x2f4>
    bcf4:	ldr	x1, [x20, #248]
    bcf8:	cbz	x1, bdb8 <__enable_execute_stack@@GCC_3.4.2+0x3b0>
    bcfc:	adrp	x24, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    bd00:	add	x23, x21, #0x358
    bd04:	add	x24, x24, #0x1c8
    bd08:	add	x22, x20, #0x358
    bd0c:	mov	x19, #0x0                   	// #0
    bd10:	b	bd34 <__enable_execute_stack@@GCC_3.4.2+0x32c>
    bd14:	cbz	x0, bd28 <__enable_execute_stack@@GCC_3.4.2+0x320>
    bd18:	ldrb	w2, [x19, x24]
    bd1c:	cmp	w2, #0x8
    bd20:	b.ne	be24 <__enable_execute_stack@@GCC_3.4.2+0x41c>  // b.any
    bd24:	str	x1, [x0]
    bd28:	add	x19, x19, #0x1
    bd2c:	cmp	x19, #0x61
    bd30:	b.eq	bd70 <__enable_execute_stack@@GCC_3.4.2+0x368>  // b.none
    bd34:	ldrb	w2, [x23, x19]
    bd38:	ldr	x0, [x21, x19, lsl #3]
    bd3c:	ldr	x1, [x20, x19, lsl #3]
    bd40:	cbnz	w2, be24 <__enable_execute_stack@@GCC_3.4.2+0x41c>
    bd44:	ldrb	w2, [x22, x19]
    bd48:	cbnz	w2, bd14 <__enable_execute_stack@@GCC_3.4.2+0x30c>
    bd4c:	cmp	x1, #0x0
    bd50:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    bd54:	ccmp	x0, x1, #0x4, ne  // ne = any
    bd58:	b.eq	bd28 <__enable_execute_stack@@GCC_3.4.2+0x320>  // b.none
    bd5c:	ldrb	w2, [x24, x19]
    bd60:	add	x19, x19, #0x1
    bd64:	bl	2aa0 <memcpy@plt>
    bd68:	cmp	x19, #0x61
    bd6c:	b.ne	bd34 <__enable_execute_stack@@GCC_3.4.2+0x32c>  // b.any
    bd70:	ldr	x0, [x21, #832]
    bd74:	tbz	x0, #62, bd80 <__enable_execute_stack@@GCC_3.4.2+0x378>
    bd78:	ldrb	w0, [x21, #887]
    bd7c:	cbnz	w0, bda0 <__enable_execute_stack@@GCC_3.4.2+0x398>
    bd80:	ldr	x1, [x21, #248]
    bd84:	mov	x0, #0x0                   	// #0
    bd88:	cbz	x1, bde4 <__enable_execute_stack@@GCC_3.4.2+0x3dc>
    bd8c:	ldp	x19, x20, [sp, #16]
    bd90:	ldp	x21, x22, [sp, #32]
    bd94:	ldp	x23, x24, [sp, #48]
    bd98:	ldp	x29, x30, [sp], #80
    bd9c:	ret
    bda0:	mov	x0, #0x0                   	// #0
    bda4:	ldp	x19, x20, [sp, #16]
    bda8:	ldp	x21, x22, [sp, #32]
    bdac:	ldp	x23, x24, [sp, #48]
    bdb0:	ldp	x29, x30, [sp], #80
    bdb4:	ret
    bdb8:	adrp	x1, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    bdbc:	ldr	x2, [x20, #784]
    bdc0:	ldrb	w1, [x1, #487]
    bdc4:	cmp	w1, #0x8
    bdc8:	b.ne	be24 <__enable_execute_stack@@GCC_3.4.2+0x41c>  // b.any
    bdcc:	str	x2, [sp, #72]
    bdd0:	tbz	x0, #62, bdd8 <__enable_execute_stack@@GCC_3.4.2+0x3d0>
    bdd4:	strb	wzr, [x20, #887]
    bdd8:	add	x0, sp, #0x48
    bddc:	str	x0, [x20, #248]
    bde0:	b	bcfc <__enable_execute_stack@@GCC_3.4.2+0x2f4>
    bde4:	ldr	x1, [x20, #832]
    bde8:	ldr	x0, [x20, #248]
    bdec:	tbnz	x1, #62, be18 <__enable_execute_stack@@GCC_3.4.2+0x410>
    bdf0:	adrp	x1, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    bdf4:	ldrb	w1, [x1, #487]
    bdf8:	cmp	w1, #0x8
    bdfc:	b.ne	be24 <__enable_execute_stack@@GCC_3.4.2+0x41c>  // b.any
    be00:	ldr	x0, [x0]
    be04:	ldr	x2, [x21, #784]
    be08:	ldr	x1, [x20, #848]
    be0c:	sub	x0, x0, x2
    be10:	add	x0, x0, x1
    be14:	b	bd8c <__enable_execute_stack@@GCC_3.4.2+0x384>
    be18:	ldrb	w1, [x20, #887]
    be1c:	cbz	w1, bdf0 <__enable_execute_stack@@GCC_3.4.2+0x3e8>
    be20:	b	be04 <__enable_execute_stack@@GCC_3.4.2+0x3fc>
    be24:	bl	2c50 <abort@plt>

000000000000be28 <_Unwind_GetGR@@GCC_3.0>:
    be28:	cmp	w1, #0x61
    be2c:	b.gt	be84 <_Unwind_GetGR@@GCC_3.0+0x5c>
    be30:	ldr	x4, [x0, #832]
    be34:	sxtw	x3, w1
    be38:	ldr	x2, [x0, x3, lsl #3]
    be3c:	tbz	x4, #62, be4c <_Unwind_GetGR@@GCC_3.0+0x24>
    be40:	add	x0, x0, x3
    be44:	ldrb	w0, [x0, #856]
    be48:	cbnz	w0, be7c <_Unwind_GetGR@@GCC_3.0+0x54>
    be4c:	cmp	w1, #0x2e
    be50:	b.eq	be70 <_Unwind_GetGR@@GCC_3.0+0x48>  // b.none
    be54:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    be58:	add	x0, x0, #0x1c8
    be5c:	ldrb	w0, [x0, w1, sxtw]
    be60:	cmp	w0, #0x8
    be64:	b.ne	be84 <_Unwind_GetGR@@GCC_3.0+0x5c>  // b.any
    be68:	ldr	x0, [x2]
    be6c:	ret
    be70:	cntd	x0
    be74:	sxtw	x0, w0
    be78:	ret
    be7c:	mov	x0, x2
    be80:	ret
    be84:	stp	x29, x30, [sp, #-16]!
    be88:	mov	x29, sp
    be8c:	bl	2c50 <abort@plt>

000000000000be90 <_Unwind_GetCFA@@GCC_3.3>:
    be90:	ldr	x0, [x0, #784]
    be94:	ret

000000000000be98 <_Unwind_SetGR@@GCC_3.0>:
    be98:	cmp	w1, #0x61
    be9c:	b.gt	bee0 <_Unwind_SetGR@@GCC_3.0+0x48>
    bea0:	ldr	x5, [x0, #832]
    bea4:	adrp	x3, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    bea8:	add	x3, x3, #0x1c8
    beac:	sxtw	x4, w1
    beb0:	ldrb	w1, [x3, w1, sxtw]
    beb4:	tbz	x5, #62, bec4 <_Unwind_SetGR@@GCC_3.0+0x2c>
    beb8:	add	x3, x0, x4
    bebc:	ldrb	w3, [x3, #856]
    bec0:	cbnz	w3, bed8 <_Unwind_SetGR@@GCC_3.0+0x40>
    bec4:	cmp	w1, #0x8
    bec8:	ldr	x0, [x0, x4, lsl #3]
    becc:	b.ne	bee0 <_Unwind_SetGR@@GCC_3.0+0x48>  // b.any
    bed0:	str	x2, [x0]
    bed4:	ret
    bed8:	str	x2, [x0, x4, lsl #3]
    bedc:	ret
    bee0:	stp	x29, x30, [sp, #-16]!
    bee4:	mov	x29, sp
    bee8:	bl	2c50 <abort@plt>
    beec:	nop

000000000000bef0 <_Unwind_GetIP@@GCC_3.0>:
    bef0:	ldr	x0, [x0, #792]
    bef4:	ret

000000000000bef8 <_Unwind_GetIPInfo@@GCC_4.2.0>:
    bef8:	ldr	x2, [x0, #832]
    befc:	ldr	x0, [x0, #792]
    bf00:	lsr	x2, x2, #63
    bf04:	str	w2, [x1]
    bf08:	ret
    bf0c:	nop

000000000000bf10 <_Unwind_SetIP@@GCC_3.0>:
    bf10:	str	x1, [x0, #792]
    bf14:	ret

000000000000bf18 <_Unwind_GetLanguageSpecificData@@GCC_3.0>:
    bf18:	ldr	x0, [x0, #800]
    bf1c:	ret

000000000000bf20 <_Unwind_GetRegionStart@@GCC_3.0>:
    bf20:	ldr	x0, [x0, #824]
    bf24:	ret

000000000000bf28 <_Unwind_FindEnclosingFunction@@GCC_3.3>:
    bf28:	stp	x29, x30, [sp, #-48]!
    bf2c:	sub	x0, x0, #0x1
    bf30:	mov	x29, sp
    bf34:	add	x1, sp, #0x18
    bf38:	bl	2cb0 <_Unwind_Find_FDE@plt>
    bf3c:	ldr	x1, [sp, #40]
    bf40:	cmp	x0, #0x0
    bf44:	ldp	x29, x30, [sp], #48
    bf48:	csel	x0, x1, x0, ne  // ne = any
    bf4c:	ret

000000000000bf50 <_Unwind_GetDataRelBase@@GCC_3.0>:
    bf50:	ldr	x0, [x0, #816]
    bf54:	ret

000000000000bf58 <_Unwind_GetTextRelBase@@GCC_3.0>:
    bf58:	ldr	x0, [x0, #808]
    bf5c:	ret
    bf60:	and	w3, w0, #0xff
    bf64:	cmp	w3, #0xff
    bf68:	b.eq	bfb8 <_Unwind_GetTextRelBase@@GCC_3.0+0x60>  // b.none
    bf6c:	and	w2, w3, #0x70
    bf70:	mov	x0, x1
    bf74:	cmp	w2, #0x30
    bf78:	b.eq	bfc0 <_Unwind_GetTextRelBase@@GCC_3.0+0x68>  // b.none
    bf7c:	b.hi	bf8c <_Unwind_GetTextRelBase@@GCC_3.0+0x34>  // b.pmore
    bf80:	cmp	w2, #0x20
    bf84:	b.ne	bf98 <_Unwind_GetTextRelBase@@GCC_3.0+0x40>  // b.any
    bf88:	b	2b50 <_Unwind_GetTextRelBase@plt>
    bf8c:	cmp	w2, #0x40
    bf90:	b.ne	bfb0 <_Unwind_GetTextRelBase@@GCC_3.0+0x58>  // b.any
    bf94:	b	2ab0 <_Unwind_GetRegionStart@plt>
    bf98:	b.hi	bfa4 <_Unwind_GetTextRelBase@@GCC_3.0+0x4c>  // b.pmore
    bf9c:	tst	w3, #0x60
    bfa0:	b.eq	bfb8 <_Unwind_GetTextRelBase@@GCC_3.0+0x60>  // b.none
    bfa4:	stp	x29, x30, [sp, #-16]!
    bfa8:	mov	x29, sp
    bfac:	bl	2c50 <abort@plt>
    bfb0:	cmp	w2, #0x50
    bfb4:	b.ne	bfa4 <_Unwind_GetTextRelBase@@GCC_3.0+0x4c>  // b.any
    bfb8:	mov	x0, #0x0                   	// #0
    bfbc:	ret
    bfc0:	b	2da0 <_Unwind_GetDataRelBase@plt>
    bfc4:	nop
    bfc8:	str	xzr, [x3, #1568]
    bfcc:	cmp	x0, x1
    bfd0:	b.cs	c760 <_Unwind_GetTextRelBase@@GCC_3.0+0x808>  // b.hs, b.nlast
    bfd4:	stp	x29, x30, [sp, #-112]!
    bfd8:	mov	x29, sp
    bfdc:	stp	x21, x22, [sp, #32]
    bfe0:	mov	x21, x2
    bfe4:	mov	x22, x1
    bfe8:	stp	x19, x20, [sp, #16]
    bfec:	mov	x20, x3
    bff0:	ldr	x2, [x21, #792]
    bff4:	stp	x23, x24, [sp, #48]
    bff8:	adrp	x23, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    bffc:	ldr	x5, [x21, #832]
    c000:	stp	x25, x26, [sp, #64]
    c004:	add	x23, x23, #0x7f0
    c008:	ldr	x1, [x20, #1608]
    c00c:	stp	x27, x28, [sp, #80]
    c010:	add	x5, x2, x5, lsr #63
    c014:	add	x27, x29, #0x68
    c018:	cmp	x1, x5
    c01c:	mov	x25, #0x0                   	// #0
    c020:	mov	w24, #0x1                   	// #1
    c024:	mov	w26, #0x5                   	// #5
    c028:	b.cs	c0f8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a0>  // b.hs, b.nlast
    c02c:	nop
    c030:	mov	x19, x0
    c034:	ldrb	w4, [x19], #1
    c038:	and	w5, w4, #0xc0
    c03c:	cmp	w5, #0x40
    c040:	b.eq	c5f4 <_Unwind_GetTextRelBase@@GCC_3.0+0x69c>  // b.none
    c044:	cmp	w5, #0x80
    c048:	b.eq	c618 <_Unwind_GetTextRelBase@@GCC_3.0+0x6c0>  // b.none
    c04c:	cmp	w5, #0xc0
    c050:	b.eq	c608 <_Unwind_GetTextRelBase@@GCC_3.0+0x6b0>  // b.none
    c054:	cmp	w4, #0x2f
    c058:	b.hi	c770 <_Unwind_GetTextRelBase@@GCC_3.0+0x818>  // b.pmore
    c05c:	ldrh	w2, [x23, w4, uxtw #1]
    c060:	adr	x3, c06c <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c064:	add	x2, x3, w2, sxth #2
    c068:	br	x2
    c06c:	mov	x1, #0x0                   	// #0
    c070:	mov	w0, #0x0                   	// #0
    c074:	ldrb	w3, [x19], #1
    c078:	and	x2, x3, #0x7f
    c07c:	lsl	x2, x2, x0
    c080:	add	w0, w0, #0x7
    c084:	orr	x1, x1, x2
    c088:	tbnz	w3, #7, c074 <_Unwind_GetTextRelBase@@GCC_3.0+0x11c>
    c08c:	mov	x4, #0x0                   	// #0
    c090:	mov	w2, #0x0                   	// #0
    c094:	nop
    c098:	ldrb	w3, [x19], #1
    c09c:	and	x0, x3, #0x7f
    c0a0:	lsl	x0, x0, x2
    c0a4:	add	w2, w2, #0x7
    c0a8:	orr	x4, x4, x0
    c0ac:	tbnz	w3, #7, c098 <_Unwind_GetTextRelBase@@GCC_3.0+0x140>
    c0b0:	ldr	x0, [x20, #1624]
    c0b4:	cmp	x1, #0x61
    c0b8:	mul	x4, x4, x0
    c0bc:	b.hi	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>  // b.pmore
    c0c0:	lsl	x1, x1, #4
    c0c4:	neg	x4, x4
    c0c8:	add	x0, x20, x1
    c0cc:	str	w24, [x0, #8]
    c0d0:	str	x4, [x20, x1]
    c0d4:	cmp	x22, x19
    c0d8:	b.ls	c0f8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a0>  // b.plast
    c0dc:	ldr	x2, [x21, #792]
    c0e0:	mov	x0, x19
    c0e4:	ldr	x5, [x21, #832]
    c0e8:	ldr	x1, [x20, #1608]
    c0ec:	add	x5, x2, x5, lsr #63
    c0f0:	cmp	x1, x5
    c0f4:	b.cc	c030 <_Unwind_GetTextRelBase@@GCC_3.0+0xd8>  // b.lo, b.ul, b.last
    c0f8:	mov	sp, x29
    c0fc:	ldp	x19, x20, [sp, #16]
    c100:	ldp	x21, x22, [sp, #32]
    c104:	ldp	x23, x24, [sp, #48]
    c108:	ldp	x25, x26, [sp, #64]
    c10c:	ldp	x27, x28, [sp, #80]
    c110:	ldp	x29, x30, [sp], #112
    c114:	ret
    c118:	mov	x1, #0x0                   	// #0
    c11c:	mov	w0, #0x0                   	// #0
    c120:	ldrb	w3, [x19], #1
    c124:	and	x2, x3, #0x7f
    c128:	lsl	x2, x2, x0
    c12c:	add	w0, w0, #0x7
    c130:	orr	x1, x1, x2
    c134:	tbnz	w3, #7, c120 <_Unwind_GetTextRelBase@@GCC_3.0+0x1c8>
    c138:	str	x1, [x21, #848]
    c13c:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c140:	mov	x1, #0x0                   	// #0
    c144:	mov	w0, #0x0                   	// #0
    c148:	ldrb	w3, [x19], #1
    c14c:	and	x2, x3, #0x7f
    c150:	lsl	x2, x2, x0
    c154:	add	w0, w0, #0x7
    c158:	orr	x1, x1, x2
    c15c:	tbnz	w3, #7, c148 <_Unwind_GetTextRelBase@@GCC_3.0+0x1f0>
    c160:	cmp	x1, #0x61
    c164:	b.hi	c178 <_Unwind_GetTextRelBase@@GCC_3.0+0x220>  // b.pmore
    c168:	lsl	x1, x1, #4
    c16c:	add	x0, x20, x1
    c170:	str	w26, [x0, #8]
    c174:	str	x19, [x20, x1]
    c178:	mov	x3, #0x0                   	// #0
    c17c:	mov	w1, #0x0                   	// #0
    c180:	ldrb	w2, [x19], #1
    c184:	and	x0, x2, #0x7f
    c188:	lsl	x0, x0, x1
    c18c:	add	w1, w1, #0x7
    c190:	orr	x3, x3, x0
    c194:	tbnz	w2, #7, c180 <_Unwind_GetTextRelBase@@GCC_3.0+0x228>
    c198:	add	x19, x19, x3
    c19c:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c1a0:	mov	x1, #0x0                   	// #0
    c1a4:	mov	w0, #0x0                   	// #0
    c1a8:	ldrb	w3, [x19], #1
    c1ac:	and	x2, x3, #0x7f
    c1b0:	lsl	x2, x2, x0
    c1b4:	add	w0, w0, #0x7
    c1b8:	orr	x1, x1, x2
    c1bc:	tbnz	w3, #7, c1a8 <_Unwind_GetTextRelBase@@GCC_3.0+0x250>
    c1c0:	mov	x4, #0x0                   	// #0
    c1c4:	mov	w2, #0x0                   	// #0
    c1c8:	ldrb	w3, [x19], #1
    c1cc:	and	x0, x3, #0x7f
    c1d0:	lsl	x0, x0, x2
    c1d4:	add	w2, w2, #0x7
    c1d8:	orr	x4, x4, x0
    c1dc:	tbnz	w3, #7, c1c8 <_Unwind_GetTextRelBase@@GCC_3.0+0x270>
    c1e0:	cmp	w2, #0x3f
    c1e4:	b.hi	c1fc <_Unwind_GetTextRelBase@@GCC_3.0+0x2a4>  // b.pmore
    c1e8:	mov	x0, #0xffffffffffffffff    	// #-1
    c1ec:	tst	x3, #0x40
    c1f0:	lsl	x0, x0, x2
    c1f4:	orr	x0, x4, x0
    c1f8:	csel	x4, x0, x4, ne  // ne = any
    c1fc:	ldr	x0, [x20, #1624]
    c200:	cmp	x1, #0x61
    c204:	mul	x4, x4, x0
    c208:	b.hi	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>  // b.pmore
    c20c:	lsl	x1, x1, #4
    c210:	mov	w2, #0x4                   	// #4
    c214:	add	x0, x20, x1
    c218:	str	w2, [x0, #8]
    c21c:	str	x4, [x20, x1]
    c220:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c224:	mov	x1, #0x0                   	// #0
    c228:	mov	w0, #0x0                   	// #0
    c22c:	ldrb	w3, [x19], #1
    c230:	and	x2, x3, #0x7f
    c234:	lsl	x2, x2, x0
    c238:	add	w0, w0, #0x7
    c23c:	orr	x1, x1, x2
    c240:	tbnz	w3, #7, c22c <_Unwind_GetTextRelBase@@GCC_3.0+0x2d4>
    c244:	mov	x4, #0x0                   	// #0
    c248:	mov	w2, #0x0                   	// #0
    c24c:	nop
    c250:	ldrb	w3, [x19], #1
    c254:	and	x0, x3, #0x7f
    c258:	lsl	x0, x0, x2
    c25c:	add	w2, w2, #0x7
    c260:	orr	x4, x4, x0
    c264:	tbnz	w3, #7, c250 <_Unwind_GetTextRelBase@@GCC_3.0+0x2f8>
    c268:	b	c1fc <_Unwind_GetTextRelBase@@GCC_3.0+0x2a4>
    c26c:	mov	x1, #0x0                   	// #0
    c270:	mov	w0, #0x0                   	// #0
    c274:	ldrb	w3, [x19], #1
    c278:	and	x2, x3, #0x7f
    c27c:	lsl	x2, x2, x0
    c280:	add	w0, w0, #0x7
    c284:	orr	x1, x1, x2
    c288:	tbnz	w3, #7, c274 <_Unwind_GetTextRelBase@@GCC_3.0+0x31c>
    c28c:	cmp	w0, #0x3f
    c290:	b.hi	c2a8 <_Unwind_GetTextRelBase@@GCC_3.0+0x350>  // b.pmore
    c294:	mov	x2, #0xffffffffffffffff    	// #-1
    c298:	tst	x3, #0x40
    c29c:	lsl	x0, x2, x0
    c2a0:	orr	x0, x1, x0
    c2a4:	csel	x1, x0, x1, ne  // ne = any
    c2a8:	ldr	x0, [x20, #1624]
    c2ac:	mul	x1, x0, x1
    c2b0:	str	x1, [x20, #1576]
    c2b4:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c2b8:	mov	x1, #0x0                   	// #0
    c2bc:	mov	w0, #0x0                   	// #0
    c2c0:	ldrb	w3, [x19], #1
    c2c4:	and	x2, x3, #0x7f
    c2c8:	lsl	x2, x2, x0
    c2cc:	add	w0, w0, #0x7
    c2d0:	orr	x1, x1, x2
    c2d4:	tbnz	w3, #7, c2c0 <_Unwind_GetTextRelBase@@GCC_3.0+0x368>
    c2d8:	mov	x3, #0x0                   	// #0
    c2dc:	mov	w2, #0x0                   	// #0
    c2e0:	str	x1, [x20, #1584]
    c2e4:	nop
    c2e8:	ldrb	w1, [x19], #1
    c2ec:	and	x0, x1, #0x7f
    c2f0:	lsl	x0, x0, x2
    c2f4:	add	w2, w2, #0x7
    c2f8:	orr	x3, x3, x0
    c2fc:	tbnz	w1, #7, c2e8 <_Unwind_GetTextRelBase@@GCC_3.0+0x390>
    c300:	cmp	w2, #0x3f
    c304:	b.hi	c31c <_Unwind_GetTextRelBase@@GCC_3.0+0x3c4>  // b.pmore
    c308:	mov	x0, #0xffffffffffffffff    	// #-1
    c30c:	tst	x1, #0x40
    c310:	lsl	x0, x0, x2
    c314:	orr	x0, x3, x0
    c318:	csel	x3, x0, x3, ne  // ne = any
    c31c:	ldr	x0, [x20, #1624]
    c320:	str	w24, [x20, #1600]
    c324:	mul	x3, x0, x3
    c328:	str	x3, [x20, #1576]
    c32c:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c330:	mov	x1, #0x0                   	// #0
    c334:	mov	w0, #0x0                   	// #0
    c338:	ldrb	w3, [x19], #1
    c33c:	and	x2, x3, #0x7f
    c340:	lsl	x2, x2, x0
    c344:	add	w0, w0, #0x7
    c348:	orr	x1, x1, x2
    c34c:	tbnz	w3, #7, c338 <_Unwind_GetTextRelBase@@GCC_3.0+0x3e0>
    c350:	mov	x4, #0x0                   	// #0
    c354:	mov	w2, #0x0                   	// #0
    c358:	ldrb	w3, [x19], #1
    c35c:	and	x0, x3, #0x7f
    c360:	lsl	x0, x0, x2
    c364:	add	w2, w2, #0x7
    c368:	orr	x4, x4, x0
    c36c:	tbnz	w3, #7, c358 <_Unwind_GetTextRelBase@@GCC_3.0+0x400>
    c370:	cmp	w2, #0x3f
    c374:	b.hi	c38c <_Unwind_GetTextRelBase@@GCC_3.0+0x434>  // b.pmore
    c378:	mov	x0, #0xffffffffffffffff    	// #-1
    c37c:	tst	x3, #0x40
    c380:	lsl	x0, x0, x2
    c384:	orr	x0, x4, x0
    c388:	csel	x4, x0, x4, ne  // ne = any
    c38c:	ldr	x0, [x20, #1624]
    c390:	cmp	x1, #0x61
    c394:	mul	x4, x4, x0
    c398:	b.hi	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>  // b.pmore
    c39c:	lsl	x1, x1, #4
    c3a0:	add	x0, x20, x1
    c3a4:	str	w24, [x0, #8]
    c3a8:	str	x4, [x20, x1]
    c3ac:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c3b0:	mov	x1, #0x0                   	// #0
    c3b4:	mov	w0, #0x0                   	// #0
    c3b8:	ldrb	w3, [x19], #1
    c3bc:	and	x2, x3, #0x7f
    c3c0:	lsl	x2, x2, x0
    c3c4:	add	w0, w0, #0x7
    c3c8:	orr	x1, x1, x2
    c3cc:	tbnz	w3, #7, c3b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x460>
    c3d0:	cmp	x1, #0x61
    c3d4:	b.hi	c3ec <_Unwind_GetTextRelBase@@GCC_3.0+0x494>  // b.pmore
    c3d8:	lsl	x1, x1, #4
    c3dc:	mov	w2, #0x3                   	// #3
    c3e0:	add	x0, x20, x1
    c3e4:	str	w2, [x0, #8]
    c3e8:	str	x19, [x20, x1]
    c3ec:	mov	x3, #0x0                   	// #0
    c3f0:	mov	w1, #0x0                   	// #0
    c3f4:	nop
    c3f8:	ldrb	w2, [x19], #1
    c3fc:	and	x0, x2, #0x7f
    c400:	lsl	x0, x0, x1
    c404:	add	w1, w1, #0x7
    c408:	orr	x3, x3, x0
    c40c:	tbnz	w2, #7, c3f8 <_Unwind_GetTextRelBase@@GCC_3.0+0x4a0>
    c410:	add	x19, x19, x3
    c414:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c418:	mov	x1, #0x0                   	// #0
    c41c:	mov	w0, #0x0                   	// #0
    c420:	ldrb	w3, [x19], #1
    c424:	and	x2, x3, #0x7f
    c428:	lsl	x2, x2, x0
    c42c:	add	w0, w0, #0x7
    c430:	orr	x1, x1, x2
    c434:	tbnz	w3, #7, c420 <_Unwind_GetTextRelBase@@GCC_3.0+0x4c8>
    c438:	str	x1, [x20, #1576]
    c43c:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c440:	mov	x1, #0x0                   	// #0
    c444:	mov	w0, #0x0                   	// #0
    c448:	ldrb	w3, [x19], #1
    c44c:	and	x2, x3, #0x7f
    c450:	lsl	x2, x2, x0
    c454:	add	w0, w0, #0x7
    c458:	orr	x1, x1, x2
    c45c:	tbnz	w3, #7, c448 <_Unwind_GetTextRelBase@@GCC_3.0+0x4f0>
    c460:	str	x1, [x20, #1584]
    c464:	str	w24, [x20, #1600]
    c468:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c46c:	mov	x1, #0x0                   	// #0
    c470:	mov	w0, #0x0                   	// #0
    c474:	ldrb	w3, [x19], #1
    c478:	and	x2, x3, #0x7f
    c47c:	lsl	x2, x2, x0
    c480:	add	w0, w0, #0x7
    c484:	orr	x1, x1, x2
    c488:	tbnz	w3, #7, c474 <_Unwind_GetTextRelBase@@GCC_3.0+0x51c>
    c48c:	mov	x3, #0x0                   	// #0
    c490:	mov	w2, #0x0                   	// #0
    c494:	str	x1, [x20, #1584]
    c498:	ldrb	w1, [x19], #1
    c49c:	and	x0, x1, #0x7f
    c4a0:	lsl	x0, x0, x2
    c4a4:	add	w2, w2, #0x7
    c4a8:	orr	x3, x3, x0
    c4ac:	tbnz	w1, #7, c498 <_Unwind_GetTextRelBase@@GCC_3.0+0x540>
    c4b0:	str	x3, [x20, #1576]
    c4b4:	str	w24, [x20, #1600]
    c4b8:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c4bc:	mov	x1, #0x0                   	// #0
    c4c0:	mov	w0, #0x0                   	// #0
    c4c4:	ldrb	w3, [x19], #1
    c4c8:	and	x2, x3, #0x7f
    c4cc:	lsl	x2, x2, x0
    c4d0:	add	w0, w0, #0x7
    c4d4:	orr	x1, x1, x2
    c4d8:	tbnz	w3, #7, c4c4 <_Unwind_GetTextRelBase@@GCC_3.0+0x56c>
    c4dc:	mov	x4, #0x0                   	// #0
    c4e0:	mov	w2, #0x0                   	// #0
    c4e4:	nop
    c4e8:	ldrb	w3, [x19], #1
    c4ec:	and	x0, x3, #0x7f
    c4f0:	lsl	x0, x0, x2
    c4f4:	add	w2, w2, #0x7
    c4f8:	orr	x4, x4, x0
    c4fc:	tbnz	w3, #7, c4e8 <_Unwind_GetTextRelBase@@GCC_3.0+0x590>
    c500:	cmp	x1, #0x61
    c504:	b.hi	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>  // b.pmore
    c508:	lsl	x1, x1, #4
    c50c:	mov	w2, #0x2                   	// #2
    c510:	add	x0, x20, x1
    c514:	str	w2, [x0, #8]
    c518:	str	x4, [x20, x1]
    c51c:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c520:	mov	x1, #0x0                   	// #0
    c524:	mov	w0, #0x0                   	// #0
    c528:	ldrb	w3, [x19], #1
    c52c:	and	x2, x3, #0x7f
    c530:	lsl	x2, x2, x0
    c534:	add	w0, w0, #0x7
    c538:	orr	x1, x1, x2
    c53c:	tbnz	w3, #7, c528 <_Unwind_GetTextRelBase@@GCC_3.0+0x5d0>
    c540:	cmp	x1, #0x61
    c544:	b.hi	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>  // b.pmore
    c548:	add	x1, x20, x1, lsl #4
    c54c:	str	wzr, [x1, #8]
    c550:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c554:	mov	x1, #0x0                   	// #0
    c558:	mov	w0, #0x0                   	// #0
    c55c:	ldrb	w3, [x19], #1
    c560:	and	x2, x3, #0x7f
    c564:	lsl	x2, x2, x0
    c568:	add	w0, w0, #0x7
    c56c:	orr	x1, x1, x2
    c570:	tbnz	w3, #7, c55c <_Unwind_GetTextRelBase@@GCC_3.0+0x604>
    c574:	cmp	x1, #0x61
    c578:	b.hi	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>  // b.pmore
    c57c:	add	x1, x20, x1, lsl #4
    c580:	mov	w0, #0x6                   	// #6
    c584:	str	w0, [x1, #8]
    c588:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c58c:	mov	x1, #0x0                   	// #0
    c590:	mov	w0, #0x0                   	// #0
    c594:	ldrb	w3, [x19], #1
    c598:	and	x2, x3, #0x7f
    c59c:	lsl	x2, x2, x0
    c5a0:	add	w0, w0, #0x7
    c5a4:	orr	x1, x1, x2
    c5a8:	tbnz	w3, #7, c594 <_Unwind_GetTextRelBase@@GCC_3.0+0x63c>
    c5ac:	b	c540 <_Unwind_GetTextRelBase@@GCC_3.0+0x5e8>
    c5b0:	mov	x1, #0x0                   	// #0
    c5b4:	mov	w0, #0x0                   	// #0
    c5b8:	ldrb	w3, [x19], #1
    c5bc:	and	x2, x3, #0x7f
    c5c0:	lsl	x2, x2, x0
    c5c4:	add	w0, w0, #0x7
    c5c8:	orr	x1, x1, x2
    c5cc:	tbnz	w3, #7, c5b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x660>
    c5d0:	mov	x4, #0x0                   	// #0
    c5d4:	mov	w2, #0x0                   	// #0
    c5d8:	ldrb	w3, [x19], #1
    c5dc:	and	x0, x3, #0x7f
    c5e0:	lsl	x0, x0, x2
    c5e4:	add	w2, w2, #0x7
    c5e8:	orr	x4, x4, x0
    c5ec:	tbnz	w3, #7, c5d8 <_Unwind_GetTextRelBase@@GCC_3.0+0x680>
    c5f0:	b	c38c <_Unwind_GetTextRelBase@@GCC_3.0+0x434>
    c5f4:	ldr	x0, [x20, #1632]
    c5f8:	and	x4, x4, #0x3f
    c5fc:	madd	x4, x4, x0, x1
    c600:	str	x4, [x20, #1608]
    c604:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c608:	ubfiz	x4, x4, #4, #6
    c60c:	add	x4, x20, x4
    c610:	str	wzr, [x4, #8]
    c614:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c618:	and	w4, w4, #0x3f
    c61c:	mov	x1, #0x0                   	// #0
    c620:	mov	w5, #0x0                   	// #0
    c624:	nop
    c628:	ldrb	w6, [x19], #1
    c62c:	and	x0, x6, #0x7f
    c630:	lsl	x0, x0, x5
    c634:	add	w5, w5, #0x7
    c638:	orr	x1, x1, x0
    c63c:	tbnz	w6, #7, c628 <_Unwind_GetTextRelBase@@GCC_3.0+0x6d0>
    c640:	ubfiz	x4, x4, #4, #6
    c644:	ldr	x2, [x20, #1624]
    c648:	add	x0, x20, x4
    c64c:	mul	x1, x1, x2
    c650:	str	w24, [x0, #8]
    c654:	str	x1, [x20, x4]
    c658:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c65c:	ldr	x0, [x20, #544]
    c660:	eor	x0, x0, #0x1
    c664:	str	x0, [x20, #544]
    c668:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c66c:	ldrb	w28, [x20, #1648]
    c670:	mov	x1, x21
    c674:	mov	w0, w28
    c678:	bl	bf60 <_Unwind_GetTextRelBase@@GCC_3.0+0x8>
    c67c:	mov	x2, x19
    c680:	mov	x1, x0
    c684:	mov	x3, x27
    c688:	mov	w0, w28
    c68c:	bl	ba10 <__enable_execute_stack@@GCC_3.4.2+0x8>
    c690:	mov	x19, x0
    c694:	ldr	x1, [x29, #104]
    c698:	str	x1, [x20, #1608]
    c69c:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c6a0:	ldrb	w2, [x0, #1]
    c6a4:	add	x19, x0, #0x2
    c6a8:	ldr	x0, [x20, #1632]
    c6ac:	madd	x1, x2, x0, x1
    c6b0:	str	x1, [x20, #1608]
    c6b4:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c6b8:	ldurh	w2, [x0, #1]
    c6bc:	add	x19, x0, #0x3
    c6c0:	ldr	x0, [x20, #1632]
    c6c4:	madd	x1, x2, x0, x1
    c6c8:	str	x1, [x20, #1608]
    c6cc:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c6d0:	ldur	w2, [x0, #1]
    c6d4:	add	x19, x0, #0x5
    c6d8:	ldr	x0, [x20, #1632]
    c6dc:	madd	x1, x2, x0, x1
    c6e0:	str	x1, [x20, #1608]
    c6e4:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c6e8:	cbz	x25, c764 <_Unwind_GetTextRelBase@@GCC_3.0+0x80c>
    c6ec:	mov	x3, x25
    c6f0:	ldr	x25, [x25, #1568]
    c6f4:	mov	x1, x20
    c6f8:	mov	x0, x3
    c6fc:	mov	x2, #0x648                 	// #1608
    c700:	bl	2aa0 <memcpy@plt>
    c704:	str	x0, [x20, #1568]
    c708:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c70c:	ldr	x28, [x20, #1568]
    c710:	mov	x0, x20
    c714:	mov	x2, #0x648                 	// #1608
    c718:	mov	x1, x28
    c71c:	bl	2aa0 <memcpy@plt>
    c720:	str	x25, [x28, #1568]
    c724:	mov	x25, x28
    c728:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c72c:	mov	w0, #0x2                   	// #2
    c730:	mov	x3, #0x0                   	// #0
    c734:	mov	w1, #0x0                   	// #0
    c738:	str	x19, [x20, #1592]
    c73c:	str	w0, [x20, #1600]
    c740:	ldrb	w2, [x19], #1
    c744:	and	x0, x2, #0x7f
    c748:	lsl	x0, x0, x1
    c74c:	add	w1, w1, #0x7
    c750:	orr	x3, x3, x0
    c754:	tbnz	w2, #7, c740 <_Unwind_GetTextRelBase@@GCC_3.0+0x7e8>
    c758:	add	x19, x19, x3
    c75c:	b	c0d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c>
    c760:	ret
    c764:	sub	sp, sp, #0x650
    c768:	mov	x3, sp
    c76c:	b	c6f4 <_Unwind_GetTextRelBase@@GCC_3.0+0x79c>
    c770:	bl	2c50 <abort@plt>
    c774:	nop
    c778:	stp	x29, x30, [sp, #-112]!
    c77c:	mov	x2, #0x680                 	// #1664
    c780:	mov	x29, sp
    c784:	stp	x19, x20, [sp, #16]
    c788:	mov	x20, x0
    c78c:	mov	x19, x1
    c790:	mov	x0, x1
    c794:	mov	w1, #0x0                   	// #0
    c798:	bl	2ba0 <memset@plt>
    c79c:	str	xzr, [x20, #800]
    c7a0:	ldr	x2, [x20, #792]
    c7a4:	str	xzr, [x20, #848]
    c7a8:	cbz	x2, cb1c <_Unwind_GetTextRelBase@@GCC_3.0+0xbc4>
    c7ac:	ldr	d0, [x20, #832]
    c7b0:	add	x1, x20, #0x328
    c7b4:	stp	x21, x22, [sp, #32]
    c7b8:	cmge	d0, d0, #0
    c7bc:	fmov	x0, d0
    c7c0:	add	x0, x2, x0
    c7c4:	bl	2cb0 <_Unwind_Find_FDE@plt>
    c7c8:	mov	x22, x0
    c7cc:	cbz	x0, cb80 <_Unwind_GetTextRelBase@@GCC_3.0+0xc28>
    c7d0:	ldrsw	x1, [x0, #4]
    c7d4:	stp	x23, x24, [sp, #48]
    c7d8:	add	x23, x0, #0x4
    c7dc:	sub	x23, x23, x1
    c7e0:	ldr	x0, [x20, #824]
    c7e4:	str	x0, [x19, #1608]
    c7e8:	add	x21, x23, #0x9
    c7ec:	mov	x0, x21
    c7f0:	bl	2ac0 <strlen@plt>
    c7f4:	ldrb	w1, [x23, #9]
    c7f8:	add	x2, x0, #0x1
    c7fc:	add	x2, x21, x2
    c800:	cmp	w1, #0x65
    c804:	b.eq	c9f0 <_Unwind_GetTextRelBase@@GCC_3.0+0xa98>  // b.none
    c808:	ldrb	w6, [x23, #8]
    c80c:	ldrb	w3, [x2]
    c810:	cmp	w6, #0x3
    c814:	b.hi	cc60 <_Unwind_GetTextRelBase@@GCC_3.0+0xd08>  // b.pmore
    c818:	stp	x25, x26, [sp, #64]
    c81c:	stp	x27, x28, [sp, #80]
    c820:	mov	x5, #0x0                   	// #0
    c824:	mov	w4, #0x0                   	// #0
    c828:	b	c830 <_Unwind_GetTextRelBase@@GCC_3.0+0x8d8>
    c82c:	ldrb	w3, [x2]
    c830:	and	x1, x3, #0x7f
    c834:	add	x2, x2, #0x1
    c838:	lsl	x1, x1, x4
    c83c:	add	w4, w4, #0x7
    c840:	orr	x5, x5, x1
    c844:	tbnz	w3, #7, c82c <_Unwind_GetTextRelBase@@GCC_3.0+0x8d4>
    c848:	mov	x0, #0x0                   	// #0
    c84c:	mov	w3, #0x0                   	// #0
    c850:	str	x5, [x19, #1632]
    c854:	nop
    c858:	mov	x5, x2
    c85c:	ldrb	w4, [x2], #1
    c860:	and	x1, x4, #0x7f
    c864:	lsl	x1, x1, x3
    c868:	add	w3, w3, #0x7
    c86c:	orr	x0, x0, x1
    c870:	tbnz	w4, #7, c858 <_Unwind_GetTextRelBase@@GCC_3.0+0x900>
    c874:	cmp	w3, #0x3f
    c878:	b.hi	c890 <_Unwind_GetTextRelBase@@GCC_3.0+0x938>  // b.pmore
    c87c:	mov	x1, #0xffffffffffffffff    	// #-1
    c880:	tst	x4, #0x40
    c884:	lsl	x3, x1, x3
    c888:	orr	x3, x0, x3
    c88c:	csel	x0, x3, x0, ne  // ne = any
    c890:	str	x0, [x19, #1624]
    c894:	cmp	w6, #0x1
    c898:	mov	x4, #0x0                   	// #0
    c89c:	mov	w3, #0x0                   	// #0
    c8a0:	b.eq	ca0c <_Unwind_GetTextRelBase@@GCC_3.0+0xab4>  // b.none
    c8a4:	nop
    c8a8:	ldrb	w0, [x2], #1
    c8ac:	and	x1, x0, #0x7f
    c8b0:	lsl	x1, x1, x3
    c8b4:	add	w3, w3, #0x7
    c8b8:	orr	x4, x4, x1
    c8bc:	tbnz	w0, #7, c8a8 <_Unwind_GetTextRelBase@@GCC_3.0+0x950>
    c8c0:	mov	w0, #0xffffffff            	// #-1
    c8c4:	str	x4, [x19, #1640]
    c8c8:	strb	w0, [x19, #1649]
    c8cc:	ldrb	w3, [x21]
    c8d0:	cmp	w3, #0x7a
    c8d4:	b.eq	ca2c <_Unwind_GetTextRelBase@@GCC_3.0+0xad4>  // b.none
    c8d8:	mov	x24, #0x0                   	// #0
    c8dc:	cbz	w3, ccc4 <_Unwind_GetTextRelBase@@GCC_3.0+0xd6c>
    c8e0:	add	x21, x21, #0x1
    c8e4:	add	x25, sp, #0x68
    c8e8:	mov	w26, #0x1                   	// #1
    c8ec:	b	c914 <_Unwind_GetTextRelBase@@GCC_3.0+0x9bc>
    c8f0:	cmp	w3, #0x52
    c8f4:	b.eq	ca70 <_Unwind_GetTextRelBase@@GCC_3.0+0xb18>  // b.none
    c8f8:	cmp	w3, #0x50
    c8fc:	b.eq	ca7c <_Unwind_GetTextRelBase@@GCC_3.0+0xb24>  // b.none
    c900:	cmp	w3, #0x53
    c904:	b.ne	cb30 <_Unwind_GetTextRelBase@@GCC_3.0+0xbd8>  // b.any
    c908:	strb	w26, [x19, #1651]
    c90c:	ldrb	w3, [x21], #1
    c910:	cbz	w3, c92c <_Unwind_GetTextRelBase@@GCC_3.0+0x9d4>
    c914:	cmp	w3, #0x4c
    c918:	b.ne	c8f0 <_Unwind_GetTextRelBase@@GCC_3.0+0x998>  // b.any
    c91c:	ldrb	w0, [x2], #1
    c920:	strb	w0, [x19, #1649]
    c924:	ldrb	w3, [x21], #1
    c928:	cbnz	w3, c914 <_Unwind_GetTextRelBase@@GCC_3.0+0x9bc>
    c92c:	cbz	x24, cb2c <_Unwind_GetTextRelBase@@GCC_3.0+0xbd4>
    c930:	ldr	w1, [x23]
    c934:	mov	x0, x24
    c938:	mov	x3, x19
    c93c:	mov	x2, x20
    c940:	add	x1, x1, #0x4
    c944:	add	x1, x23, x1
    c948:	bl	bfc8 <_Unwind_GetTextRelBase@@GCC_3.0+0x70>
    c94c:	ldrb	w0, [x19, #1648]
    c950:	cmp	w0, #0xff
    c954:	b.eq	cc58 <_Unwind_GetTextRelBase@@GCC_3.0+0xd00>  // b.none
    c958:	and	w0, w0, #0x7
    c95c:	cmp	w0, #0x2
    c960:	b.eq	cc50 <_Unwind_GetTextRelBase@@GCC_3.0+0xcf8>  // b.none
    c964:	b.ls	cac4 <_Unwind_GetTextRelBase@@GCC_3.0+0xb6c>  // b.plast
    c968:	cmp	w0, #0x3
    c96c:	mov	x21, #0x10                  	// #16
    c970:	b.ne	cab4 <_Unwind_GetTextRelBase@@GCC_3.0+0xb5c>  // b.any
    c974:	ldrb	w0, [x19, #1650]
    c978:	add	x21, x22, x21
    c97c:	ldrb	w24, [x19, #1649]
    c980:	cbz	w0, cadc <_Unwind_GetTextRelBase@@GCC_3.0+0xb84>
    c984:	mov	x0, #0x0                   	// #0
    c988:	mov	w2, #0x0                   	// #0
    c98c:	nop
    c990:	ldrb	w3, [x21], #1
    c994:	and	x1, x3, #0x7f
    c998:	lsl	x1, x1, x2
    c99c:	add	w2, w2, #0x7
    c9a0:	orr	x0, x0, x1
    c9a4:	tbnz	w3, #7, c990 <_Unwind_GetTextRelBase@@GCC_3.0+0xa38>
    c9a8:	add	x23, x21, x0
    c9ac:	cmp	w24, #0xff
    c9b0:	b.ne	cb54 <_Unwind_GetTextRelBase@@GCC_3.0+0xbfc>  // b.any
    c9b4:	ldr	w1, [x22]
    c9b8:	mov	x0, x23
    c9bc:	mov	x3, x19
    c9c0:	mov	x2, x20
    c9c4:	add	x1, x1, #0x4
    c9c8:	add	x1, x22, x1
    c9cc:	bl	bfc8 <_Unwind_GetTextRelBase@@GCC_3.0+0x70>
    c9d0:	ldp	x21, x22, [sp, #32]
    c9d4:	mov	w0, #0x0                   	// #0
    c9d8:	ldp	x23, x24, [sp, #48]
    c9dc:	ldp	x25, x26, [sp, #64]
    c9e0:	ldp	x27, x28, [sp, #80]
    c9e4:	ldp	x19, x20, [sp, #16]
    c9e8:	ldp	x29, x30, [sp], #112
    c9ec:	ret
    c9f0:	ldrb	w0, [x23, #10]
    c9f4:	cmp	w0, #0x68
    c9f8:	b.ne	c808 <_Unwind_GetTextRelBase@@GCC_3.0+0x8b0>  // b.any
    c9fc:	ldr	x0, [x2], #8
    ca00:	add	x21, x23, #0xb
    ca04:	str	x0, [x19, #1656]
    ca08:	b	c808 <_Unwind_GetTextRelBase@@GCC_3.0+0x8b0>
    ca0c:	ldrb	w0, [x2]
    ca10:	add	x2, x5, #0x2
    ca14:	str	x0, [x19, #1640]
    ca18:	mov	w0, #0xffffffff            	// #-1
    ca1c:	strb	w0, [x19, #1649]
    ca20:	ldrb	w3, [x21]
    ca24:	cmp	w3, #0x7a
    ca28:	b.ne	c8d8 <_Unwind_GetTextRelBase@@GCC_3.0+0x980>  // b.any
    ca2c:	mov	x0, #0x0                   	// #0
    ca30:	mov	w3, #0x0                   	// #0
    ca34:	nop
    ca38:	ldrb	w4, [x2], #1
    ca3c:	and	x1, x4, #0x7f
    ca40:	lsl	x1, x1, x3
    ca44:	add	w3, w3, #0x7
    ca48:	orr	x0, x0, x1
    ca4c:	tbnz	w4, #7, ca38 <_Unwind_GetTextRelBase@@GCC_3.0+0xae0>
    ca50:	mov	w1, #0x1                   	// #1
    ca54:	strb	w1, [x19, #1650]
    ca58:	add	x24, x2, x0
    ca5c:	add	x0, x21, #0x1
    ca60:	ldrb	w3, [x21, #1]
    ca64:	cbz	w3, c930 <_Unwind_GetTextRelBase@@GCC_3.0+0x9d8>
    ca68:	mov	x21, x0
    ca6c:	b	c8e0 <_Unwind_GetTextRelBase@@GCC_3.0+0x988>
    ca70:	ldrb	w0, [x2], #1
    ca74:	strb	w0, [x19, #1648]
    ca78:	b	c90c <_Unwind_GetTextRelBase@@GCC_3.0+0x9b4>
    ca7c:	mov	x27, x2
    ca80:	mov	x1, x20
    ca84:	ldrb	w28, [x27], #1
    ca88:	mov	w0, w28
    ca8c:	bl	bf60 <_Unwind_GetTextRelBase@@GCC_3.0+0x8>
    ca90:	mov	x2, x27
    ca94:	mov	x1, x0
    ca98:	mov	x3, x25
    ca9c:	mov	w0, w28
    caa0:	bl	ba10 <__enable_execute_stack@@GCC_3.4.2+0x8>
    caa4:	mov	x2, x0
    caa8:	ldr	x1, [sp, #104]
    caac:	str	x1, [x19, #1616]
    cab0:	b	c90c <_Unwind_GetTextRelBase@@GCC_3.0+0x9b4>
    cab4:	cmp	w0, #0x4
    cab8:	mov	x21, #0x18                  	// #24
    cabc:	b.eq	c974 <_Unwind_GetTextRelBase@@GCC_3.0+0xa1c>  // b.none
    cac0:	bl	2c50 <abort@plt>
    cac4:	mov	x21, #0x18                  	// #24
    cac8:	cbnz	w0, cac0 <_Unwind_GetTextRelBase@@GCC_3.0+0xb68>
    cacc:	ldrb	w0, [x19, #1650]
    cad0:	add	x21, x22, x21
    cad4:	ldrb	w24, [x19, #1649]
    cad8:	cbnz	w0, c984 <_Unwind_GetTextRelBase@@GCC_3.0+0xa2c>
    cadc:	mov	x23, x21
    cae0:	cmp	w24, #0xff
    cae4:	b.eq	c9b4 <_Unwind_GetTextRelBase@@GCC_3.0+0xa5c>  // b.none
    cae8:	mov	x1, x20
    caec:	mov	w0, w24
    caf0:	bl	bf60 <_Unwind_GetTextRelBase@@GCC_3.0+0x8>
    caf4:	mov	x1, x0
    caf8:	mov	x2, x21
    cafc:	mov	w0, w24
    cb00:	add	x3, sp, #0x68
    cb04:	bl	ba10 <__enable_execute_stack@@GCC_3.4.2+0x8>
    cb08:	ldr	x1, [sp, #104]
    cb0c:	mov	x23, x0
    cb10:	str	x1, [x20, #800]
    cb14:	b	c9b4 <_Unwind_GetTextRelBase@@GCC_3.0+0xa5c>
    cb18:	ldp	x21, x22, [sp, #32]
    cb1c:	mov	w0, #0x5                   	// #5
    cb20:	ldp	x19, x20, [sp, #16]
    cb24:	ldp	x29, x30, [sp], #112
    cb28:	ret
    cb2c:	mov	x24, x2
    cb30:	cbnz	x24, c930 <_Unwind_GetTextRelBase@@GCC_3.0+0x9d8>
    cb34:	ldp	x25, x26, [sp, #64]
    cb38:	ldp	x27, x28, [sp, #80]
    cb3c:	mov	w0, #0x3                   	// #3
    cb40:	ldp	x19, x20, [sp, #16]
    cb44:	ldp	x21, x22, [sp, #32]
    cb48:	ldp	x23, x24, [sp, #48]
    cb4c:	ldp	x29, x30, [sp], #112
    cb50:	ret
    cb54:	mov	x1, x20
    cb58:	mov	w0, w24
    cb5c:	bl	bf60 <_Unwind_GetTextRelBase@@GCC_3.0+0x8>
    cb60:	mov	x1, x0
    cb64:	mov	x2, x21
    cb68:	mov	w0, w24
    cb6c:	add	x3, sp, #0x68
    cb70:	bl	ba10 <__enable_execute_stack@@GCC_3.4.2+0x8>
    cb74:	ldr	x0, [sp, #104]
    cb78:	str	x0, [x20, #800]
    cb7c:	b	c9b4 <_Unwind_GetTextRelBase@@GCC_3.0+0xa5c>
    cb80:	ldr	x0, [x20, #792]
    cb84:	mov	w1, #0x1168                	// #4456
    cb88:	movk	w1, #0xd280, lsl #16
    cb8c:	ldr	w2, [x0]
    cb90:	cmp	w2, w1
    cb94:	b.ne	cb18 <_Unwind_GetTextRelBase@@GCC_3.0+0xbc0>  // b.any
    cb98:	ldr	w1, [x0, #4]
    cb9c:	mov	w0, #0x1                   	// #1
    cba0:	movk	w0, #0xd400, lsl #16
    cba4:	cmp	w1, w0
    cba8:	b.ne	cb18 <_Unwind_GetTextRelBase@@GCC_3.0+0xbc0>  // b.any
    cbac:	ldr	x6, [x20, #784]
    cbb0:	mov	w3, #0x1                   	// #1
    cbb4:	mov	x1, x19
    cbb8:	mov	w2, w3
    cbbc:	add	x8, x6, #0x130
    cbc0:	mov	x4, #0x1f                  	// #31
    cbc4:	mov	x5, #0x130                 	// #304
    cbc8:	mov	x0, #0x8                   	// #8
    cbcc:	str	x5, [x19, #1576]
    cbd0:	str	x4, [x19, #1584]
    cbd4:	str	w3, [x19, #1600]
    cbd8:	str	w2, [x1, #8]
    cbdc:	str	x0, [x1], #16
    cbe0:	add	x0, x0, #0x8
    cbe4:	cmp	x0, #0x100
    cbe8:	b.ne	cbd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xc80>  // b.any
    cbec:	ldr	w0, [x6, #592]
    cbf0:	add	x5, x6, #0x250
    cbf4:	cbz	w0, cc84 <_Unwind_GetTextRelBase@@GCC_3.0+0xd2c>
    cbf8:	mov	w7, #0x8001                	// #32769
    cbfc:	add	x4, x19, #0x600
    cc00:	add	x9, x6, x19
    cc04:	movk	w7, #0x4650, lsl #16
    cc08:	mov	w3, #0x1                   	// #1
    cc0c:	b	cc20 <_Unwind_GetTextRelBase@@GCC_3.0+0xcc8>
    cc10:	ldr	w0, [x5, #4]
    cc14:	add	x5, x5, x0
    cc18:	ldr	w0, [x5]
    cc1c:	cbz	w0, cc84 <_Unwind_GetTextRelBase@@GCC_3.0+0xd2c>
    cc20:	cmp	w0, w7
    cc24:	b.ne	cc10 <_Unwind_GetTextRelBase@@GCC_3.0+0xcb8>  // b.any
    cc28:	sub	x2, x5, #0x520
    cc2c:	add	x0, x19, #0x400
    cc30:	sub	x2, x2, x9
    cc34:	nop
    cc38:	str	w3, [x0, #8]
    cc3c:	add	x1, x2, x0
    cc40:	str	x1, [x0], #16
    cc44:	cmp	x4, x0
    cc48:	b.ne	cc38 <_Unwind_GetTextRelBase@@GCC_3.0+0xce0>  // b.any
    cc4c:	b	cc10 <_Unwind_GetTextRelBase@@GCC_3.0+0xcb8>
    cc50:	mov	x21, #0xc                   	// #12
    cc54:	b	c974 <_Unwind_GetTextRelBase@@GCC_3.0+0xa1c>
    cc58:	mov	x21, #0x8                   	// #8
    cc5c:	b	c974 <_Unwind_GetTextRelBase@@GCC_3.0+0xa1c>
    cc60:	cmp	w3, #0x8
    cc64:	b.ne	cb3c <_Unwind_GetTextRelBase@@GCC_3.0+0xbe4>  // b.any
    cc68:	ldrb	w0, [x2, #1]
    cc6c:	cbnz	w0, cb3c <_Unwind_GetTextRelBase@@GCC_3.0+0xbe4>
    cc70:	stp	x25, x26, [sp, #64]
    cc74:	add	x2, x2, #0x2
    cc78:	stp	x27, x28, [sp, #80]
    cc7c:	ldrb	w3, [x2]
    cc80:	b	c820 <_Unwind_GetTextRelBase@@GCC_3.0+0x8c8>
    cc84:	mov	w3, #0x1                   	// #1
    cc88:	strb	w3, [x19, #1651]
    cc8c:	add	x1, x6, #0x230
    cc90:	mov	w5, #0x4                   	// #4
    cc94:	ldr	x2, [x8, #264]
    cc98:	sub	x1, x1, x8
    cc9c:	mov	x4, #0x60                  	// #96
    cca0:	mov	w0, #0x0                   	// #0
    cca4:	sub	x8, x2, x8
    cca8:	ldp	x21, x22, [sp, #32]
    ccac:	str	x1, [x19, #496]
    ccb0:	str	w3, [x19, #504]
    ccb4:	str	x8, [x19, #1536]
    ccb8:	str	w5, [x19, #1544]
    ccbc:	str	x4, [x19, #1640]
    ccc0:	b	c9e4 <_Unwind_GetTextRelBase@@GCC_3.0+0xa8c>
    ccc4:	mov	x24, x2
    ccc8:	b	c930 <_Unwind_GetTextRelBase@@GCC_3.0+0x9d8>
    cccc:	nop
    ccd0:	sub	sp, sp, #0x260
    ccd4:	cmp	x0, x1
    ccd8:	stp	x29, x30, [sp]
    ccdc:	mov	x29, sp
    cce0:	str	x3, [sp, #96]
    cce4:	b.cs	d13c <_Unwind_GetTextRelBase@@GCC_3.0+0x11e4>  // b.hs, b.nlast
    cce8:	stp	x19, x20, [sp, #16]
    ccec:	mov	x19, x0
    ccf0:	mov	w20, #0x1                   	// #1
    ccf4:	stp	x21, x22, [sp, #32]
    ccf8:	mov	x21, x1
    ccfc:	add	x22, sp, #0x60
    cd00:	stp	x23, x24, [sp, #48]
    cd04:	adrp	x23, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    cd08:	mov	x24, x2
    cd0c:	add	x23, x23, #0x850
    cd10:	stp	x25, x26, [sp, #64]
    cd14:	adrp	x25, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    cd18:	add	x25, x25, #0xa30
    cd1c:	nop
    cd20:	mov	x4, x19
    cd24:	ldrb	w5, [x4], #1
    cd28:	sub	w0, w5, #0x3
    cd2c:	cmp	w0, #0xee
    cd30:	b.ls	cd38 <_Unwind_GetTextRelBase@@GCC_3.0+0xde0>  // b.plast
    cd34:	bl	2c50 <abort@plt>
    cd38:	ldrh	w0, [x23, w0, uxtw #1]
    cd3c:	adr	x1, cd48 <_Unwind_GetTextRelBase@@GCC_3.0+0xdf0>
    cd40:	add	x0, x1, w0, sxth #2
    cd44:	br	x0
    cd48:	mov	x3, #0x0                   	// #0
    cd4c:	mov	w1, #0x0                   	// #0
    cd50:	ldrb	w2, [x4], #1
    cd54:	and	x0, x2, #0x7f
    cd58:	lsl	x0, x0, x1
    cd5c:	add	w1, w1, #0x7
    cd60:	orr	x3, x3, x0
    cd64:	tbnz	w2, #7, cd50 <_Unwind_GetTextRelBase@@GCC_3.0+0xdf8>
    cd68:	cmp	w1, #0x3f
    cd6c:	b.ls	d0d0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1178>  // b.plast
    cd70:	sub	w5, w5, #0x70
    cd74:	cmp	w5, #0x61
    cd78:	b.gt	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    cd7c:	ldr	x2, [x24, #832]
    cd80:	sxtw	x1, w5
    cd84:	ldr	x0, [x24, x1, lsl #3]
    cd88:	tbz	x2, #62, cd98 <_Unwind_GetTextRelBase@@GCC_3.0+0xe40>
    cd8c:	add	x1, x24, x1
    cd90:	ldrb	w1, [x1, #856]
    cd94:	cbnz	w1, cdb8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe60>
    cd98:	cmp	w5, #0x2e
    cd9c:	b.eq	d130 <_Unwind_GetTextRelBase@@GCC_3.0+0x11d8>  // b.none
    cda0:	adrp	x1, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    cda4:	add	x1, x1, #0x1c8
    cda8:	ldrb	w1, [x1, w5, sxtw]
    cdac:	cmp	w1, #0x8
    cdb0:	b.ne	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>  // b.any
    cdb4:	ldr	x0, [x0]
    cdb8:	add	x0, x3, x0
    cdbc:	mov	w3, w20
    cdc0:	mov	x19, x4
    cdc4:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    cdc8:	mov	w3, w20
    cdcc:	add	x19, x19, #0x9
    cdd0:	ldur	x0, [x19, #-8]
    cdd4:	nop
    cdd8:	cmp	w3, #0x3f
    cddc:	b.gt	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    cde0:	add	w20, w3, #0x1
    cde4:	str	x0, [x22, w3, sxtw #3]
    cde8:	cmp	x21, x19
    cdec:	b.hi	cd20 <_Unwind_GetTextRelBase@@GCC_3.0+0xdc8>  // b.pmore
    cdf0:	cbz	w20, cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    cdf4:	sub	w20, w20, #0x1
    cdf8:	add	x0, sp, #0x60
    cdfc:	ldp	x29, x30, [sp]
    ce00:	ldr	x0, [x0, w20, sxtw #3]
    ce04:	ldp	x19, x20, [sp, #16]
    ce08:	ldp	x21, x22, [sp, #32]
    ce0c:	ldp	x23, x24, [sp, #48]
    ce10:	ldp	x25, x26, [sp, #64]
    ce14:	add	sp, sp, #0x260
    ce18:	ret
    ce1c:	sub	w5, w5, #0x50
    ce20:	cmp	w5, #0x61
    ce24:	b.gt	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    ce28:	ldr	x2, [x24, #832]
    ce2c:	sxtw	x1, w5
    ce30:	ldr	x0, [x24, x1, lsl #3]
    ce34:	tbz	x2, #62, ce44 <_Unwind_GetTextRelBase@@GCC_3.0+0xeec>
    ce38:	add	x1, x24, x1
    ce3c:	ldrb	w1, [x1, #856]
    ce40:	cbnz	w1, cdbc <_Unwind_GetTextRelBase@@GCC_3.0+0xe64>
    ce44:	cmp	w5, #0x2e
    ce48:	b.eq	d11c <_Unwind_GetTextRelBase@@GCC_3.0+0x11c4>  // b.none
    ce4c:	adrp	x1, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    ce50:	add	x1, x1, #0x1c8
    ce54:	ldrb	w1, [x1, w5, sxtw]
    ce58:	cmp	w1, #0x8
    ce5c:	b.ne	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>  // b.any
    ce60:	mov	w3, w20
    ce64:	mov	x19, x4
    ce68:	ldr	x0, [x0]
    ce6c:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    ce70:	sub	w0, w5, #0x30
    ce74:	mov	w3, w20
    ce78:	mov	x19, x4
    ce7c:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    ce80:	cmp	w20, #0x1
    ce84:	b.le	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    ce88:	sub	w3, w20, #0x2
    ce8c:	sub	w20, w20, #0x1
    ce90:	sub	w5, w5, #0x1a
    ce94:	cmp	w5, #0x14
    ce98:	ldr	x1, [x22, w20, sxtw #3]
    ce9c:	ldr	x0, [x22, w3, sxtw #3]
    cea0:	b.hi	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>  // b.pmore
    cea4:	ldrh	w2, [x25, w5, uxtw #1]
    cea8:	adr	x5, ceb4 <_Unwind_GetTextRelBase@@GCC_3.0+0xf5c>
    ceac:	add	x2, x5, w2, sxth #2
    ceb0:	br	x2
    ceb4:	cbz	w20, cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    ceb8:	sub	w3, w20, #0x1
    cebc:	cmp	w5, #0x20
    cec0:	ldr	x0, [x22, w3, sxtw #3]
    cec4:	b.eq	d418 <_Unwind_GetTextRelBase@@GCC_3.0+0x14c0>  // b.none
    cec8:	b.hi	cee8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf90>  // b.pmore
    cecc:	cmp	w5, #0x19
    ced0:	b.eq	d14c <_Unwind_GetTextRelBase@@GCC_3.0+0x11f4>  // b.none
    ced4:	cmp	w5, #0x1f
    ced8:	b.ne	d0bc <_Unwind_GetTextRelBase@@GCC_3.0+0x1164>  // b.any
    cedc:	neg	x0, x0
    cee0:	mov	x19, x4
    cee4:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    cee8:	cmp	w5, #0x23
    ceec:	b.eq	d0f0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1198>  // b.none
    cef0:	cmp	w5, #0x94
    cef4:	b.ne	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>  // b.any
    cef8:	ldrb	w1, [x19, #1]
    cefc:	add	x19, x19, #0x2
    cf00:	cmp	w1, #0x4
    cf04:	b.eq	d308 <_Unwind_GetTextRelBase@@GCC_3.0+0x13b0>  // b.none
    cf08:	b.hi	d434 <_Unwind_GetTextRelBase@@GCC_3.0+0x14dc>  // b.pmore
    cf0c:	cmp	w1, #0x1
    cf10:	b.ne	d424 <_Unwind_GetTextRelBase@@GCC_3.0+0x14cc>  // b.any
    cf14:	ldrb	w0, [x0]
    cf18:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    cf1c:	cmp	w20, #0x2
    cf20:	b.le	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    cf24:	sub	w1, w20, #0x2
    cf28:	sub	w2, w20, #0x1
    cf2c:	sub	w0, w20, #0x3
    cf30:	mov	x19, x4
    cf34:	sxtw	x1, w1
    cf38:	sxtw	x2, w2
    cf3c:	sxtw	x0, w0
    cf40:	ldr	x5, [x22, x1, lsl #3]
    cf44:	ldr	x3, [x22, x2, lsl #3]
    cf48:	ldr	x4, [x22, x0, lsl #3]
    cf4c:	str	x5, [x22, x2, lsl #3]
    cf50:	str	x4, [x22, x1, lsl #3]
    cf54:	str	x3, [x22, x0, lsl #3]
    cf58:	b	cde8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe90>
    cf5c:	cmp	w20, #0x1
    cf60:	b.le	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    cf64:	sub	w0, w20, #0x2
    cf68:	sub	w1, w20, #0x1
    cf6c:	mov	x19, x4
    cf70:	sxtw	x0, w0
    cf74:	sxtw	x1, w1
    cf78:	ldr	x3, [x22, x0, lsl #3]
    cf7c:	ldr	x2, [x22, x1, lsl #3]
    cf80:	str	x3, [x22, x1, lsl #3]
    cf84:	str	x2, [x22, x0, lsl #3]
    cf88:	b	cde8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe90>
    cf8c:	ldrb	w3, [x19, #1]
    cf90:	sub	w1, w20, #0x1
    cf94:	add	x19, x19, #0x2
    cf98:	sxtw	x2, w1
    cf9c:	cmp	x3, w1, sxtw
    cfa0:	b.ge	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>  // b.tcont
    cfa4:	sub	x1, x2, x3
    cfa8:	mov	w3, w20
    cfac:	ldr	x0, [x22, x1, lsl #3]
    cfb0:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    cfb4:	cmp	w20, #0x1
    cfb8:	b.le	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    cfbc:	sub	w0, w20, #0x2
    cfc0:	mov	x19, x4
    cfc4:	mov	w3, w20
    cfc8:	ldr	x0, [x22, w0, sxtw #3]
    cfcc:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    cfd0:	cbz	w20, cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    cfd4:	sub	w20, w20, #0x1
    cfd8:	mov	x19, x4
    cfdc:	b	cde8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe90>
    cfe0:	cbz	w20, cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    cfe4:	sub	w0, w20, #0x1
    cfe8:	mov	x19, x4
    cfec:	mov	w3, w20
    cff0:	ldr	x0, [x22, w0, sxtw #3]
    cff4:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    cff8:	ldursh	x1, [x19, #1]
    cffc:	add	x19, x19, #0x3
    d000:	add	x19, x19, x1
    d004:	b	cde8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe90>
    d008:	ldrb	w0, [x19, #1]
    d00c:	mov	w3, w20
    d010:	add	x19, x19, #0x2
    d014:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d018:	ldrb	w26, [x19, #1]
    d01c:	mov	x1, x24
    d020:	mov	w0, w26
    d024:	bl	bf60 <_Unwind_GetTextRelBase@@GCC_3.0+0x8>
    d028:	add	x2, x19, #0x2
    d02c:	mov	x1, x0
    d030:	add	x3, sp, #0x58
    d034:	mov	w0, w26
    d038:	bl	ba10 <__enable_execute_stack@@GCC_3.4.2+0x8>
    d03c:	mov	x19, x0
    d040:	mov	w3, w20
    d044:	ldr	x0, [sp, #88]
    d048:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d04c:	cbz	w20, cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    d050:	sub	w20, w20, #0x1
    d054:	add	x1, x19, #0x3
    d058:	ldr	x0, [x22, w20, sxtw #3]
    d05c:	cbz	x0, d0e8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1190>
    d060:	ldursh	x19, [x19, #1]
    d064:	add	x19, x1, x19
    d068:	b	cde8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe90>
    d06c:	ldursw	x0, [x19, #1]
    d070:	mov	w3, w20
    d074:	add	x19, x19, #0x5
    d078:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d07c:	ldur	w0, [x19, #1]
    d080:	mov	w3, w20
    d084:	add	x19, x19, #0x5
    d088:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d08c:	ldursh	x0, [x19, #1]
    d090:	mov	w3, w20
    d094:	add	x19, x19, #0x3
    d098:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d09c:	ldurh	w0, [x19, #1]
    d0a0:	mov	w3, w20
    d0a4:	add	x19, x19, #0x3
    d0a8:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d0ac:	ldrsb	x0, [x19, #1]
    d0b0:	mov	w3, w20
    d0b4:	add	x19, x19, #0x2
    d0b8:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d0bc:	cmp	w5, #0x6
    d0c0:	b.ne	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>  // b.any
    d0c4:	mov	x19, x4
    d0c8:	ldr	x0, [x0]
    d0cc:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d0d0:	mov	x0, #0xffffffffffffffff    	// #-1
    d0d4:	tst	x2, #0x40
    d0d8:	lsl	x0, x0, x1
    d0dc:	orr	x0, x3, x0
    d0e0:	csel	x3, x0, x3, ne  // ne = any
    d0e4:	b	cd70 <_Unwind_GetTextRelBase@@GCC_3.0+0xe18>
    d0e8:	mov	x19, x1
    d0ec:	b	cde8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe90>
    d0f0:	mov	x6, #0x0                   	// #0
    d0f4:	mov	w2, #0x0                   	// #0
    d0f8:	ldrb	w5, [x4], #1
    d0fc:	and	x1, x5, #0x7f
    d100:	lsl	x1, x1, x2
    d104:	add	w2, w2, #0x7
    d108:	orr	x6, x6, x1
    d10c:	tbnz	w5, #7, d0f8 <_Unwind_GetTextRelBase@@GCC_3.0+0x11a0>
    d110:	add	x0, x0, x6
    d114:	mov	x19, x4
    d118:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d11c:	cntd	x0
    d120:	mov	w3, w20
    d124:	mov	x19, x4
    d128:	sxtw	x0, w0
    d12c:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d130:	cntd	x0
    d134:	sxtw	x0, w0
    d138:	b	cdb8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe60>
    d13c:	mov	x0, x3
    d140:	ldp	x29, x30, [sp]
    d144:	add	sp, sp, #0x260
    d148:	ret
    d14c:	cmp	x0, #0x0
    d150:	mov	x19, x4
    d154:	cneg	x0, x0, lt  // lt = tstop
    d158:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d15c:	mov	x19, x4
    d160:	mov	w1, #0x0                   	// #0
    d164:	mov	x4, #0x0                   	// #0
    d168:	ldrb	w2, [x19], #1
    d16c:	and	x0, x2, #0x7f
    d170:	lsl	x0, x0, x1
    d174:	add	w1, w1, #0x7
    d178:	orr	x4, x4, x0
    d17c:	tbnz	w2, #7, d168 <_Unwind_GetTextRelBase@@GCC_3.0+0x1210>
    d180:	mov	x3, #0x0                   	// #0
    d184:	mov	w1, #0x0                   	// #0
    d188:	ldrb	w2, [x19], #1
    d18c:	and	x0, x2, #0x7f
    d190:	lsl	x0, x0, x1
    d194:	add	w1, w1, #0x7
    d198:	orr	x3, x3, x0
    d19c:	tbnz	w2, #7, d188 <_Unwind_GetTextRelBase@@GCC_3.0+0x1230>
    d1a0:	cmp	w1, #0x3f
    d1a4:	b.hi	d1bc <_Unwind_GetTextRelBase@@GCC_3.0+0x1264>  // b.pmore
    d1a8:	mov	x0, #0xffffffffffffffff    	// #-1
    d1ac:	tst	x2, #0x40
    d1b0:	lsl	x0, x0, x1
    d1b4:	orr	x0, x3, x0
    d1b8:	csel	x3, x0, x3, ne  // ne = any
    d1bc:	cmp	w4, #0x61
    d1c0:	mov	w1, w4
    d1c4:	b.gt	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    d1c8:	ldr	x2, [x24, #832]
    d1cc:	sxtw	x4, w4
    d1d0:	ldr	x0, [x24, x4, lsl #3]
    d1d4:	tbz	x2, #62, d1e4 <_Unwind_GetTextRelBase@@GCC_3.0+0x128c>
    d1d8:	add	x4, x24, x4
    d1dc:	ldrb	w2, [x4, #856]
    d1e0:	cbnz	w2, d204 <_Unwind_GetTextRelBase@@GCC_3.0+0x12ac>
    d1e4:	cmp	w1, #0x2e
    d1e8:	b.eq	d3f8 <_Unwind_GetTextRelBase@@GCC_3.0+0x14a0>  // b.none
    d1ec:	adrp	x2, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    d1f0:	add	x2, x2, #0x1c8
    d1f4:	ldrb	w1, [x2, w1, sxtw]
    d1f8:	cmp	w1, #0x8
    d1fc:	b.ne	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>  // b.any
    d200:	ldr	x0, [x0]
    d204:	add	x0, x3, x0
    d208:	mov	w3, w20
    d20c:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d210:	mov	x19, x4
    d214:	mov	x0, #0x0                   	// #0
    d218:	mov	w2, #0x0                   	// #0
    d21c:	nop
    d220:	ldrb	w4, [x19], #1
    d224:	and	x1, x4, #0x7f
    d228:	lsl	x1, x1, x2
    d22c:	add	w2, w2, #0x7
    d230:	orr	x0, x0, x1
    d234:	tbnz	w4, #7, d220 <_Unwind_GetTextRelBase@@GCC_3.0+0x12c8>
    d238:	mov	w3, w20
    d23c:	cmp	w2, #0x3f
    d240:	b.hi	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>  // b.pmore
    d244:	tbz	w4, #6, cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d248:	mov	x1, #0xffffffffffffffff    	// #-1
    d24c:	lsl	x2, x1, x2
    d250:	orr	x0, x0, x2
    d254:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d258:	mov	x19, x4
    d25c:	mov	x0, #0x0                   	// #0
    d260:	mov	w2, #0x0                   	// #0
    d264:	nop
    d268:	ldrb	w3, [x19], #1
    d26c:	and	x1, x3, #0x7f
    d270:	lsl	x1, x1, x2
    d274:	add	w2, w2, #0x7
    d278:	orr	x0, x0, x1
    d27c:	tbnz	w3, #7, d268 <_Unwind_GetTextRelBase@@GCC_3.0+0x1310>
    d280:	mov	w3, w20
    d284:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d288:	mov	x19, x4
    d28c:	mov	x3, #0x0                   	// #0
    d290:	mov	w1, #0x0                   	// #0
    d294:	nop
    d298:	ldrb	w2, [x19], #1
    d29c:	and	x0, x2, #0x7f
    d2a0:	lsl	x0, x0, x1
    d2a4:	add	w1, w1, #0x7
    d2a8:	orr	x3, x3, x0
    d2ac:	tbnz	w2, #7, d298 <_Unwind_GetTextRelBase@@GCC_3.0+0x1340>
    d2b0:	cmp	w3, #0x61
    d2b4:	mov	w1, w3
    d2b8:	b.gt	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>
    d2bc:	ldr	x2, [x24, #832]
    d2c0:	sxtw	x3, w3
    d2c4:	ldr	x0, [x24, x3, lsl #3]
    d2c8:	tbz	x2, #62, d2d8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1380>
    d2cc:	add	x3, x24, x3
    d2d0:	ldrb	w2, [x3, #856]
    d2d4:	cbnz	w2, d208 <_Unwind_GetTextRelBase@@GCC_3.0+0x12b0>
    d2d8:	cmp	w1, #0x2e
    d2dc:	b.eq	d408 <_Unwind_GetTextRelBase@@GCC_3.0+0x14b0>  // b.none
    d2e0:	adrp	x2, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    d2e4:	add	x2, x2, #0x1c8
    d2e8:	ldrb	w1, [x2, w1, sxtw]
    d2ec:	cmp	w1, #0x8
    d2f0:	b.ne	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>  // b.any
    d2f4:	mov	w3, w20
    d2f8:	ldr	x0, [x0]
    d2fc:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d300:	mov	x19, x4
    d304:	b	cde8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe90>
    d308:	ldr	w0, [x0]
    d30c:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d310:	cmp	x0, x1
    d314:	mov	x19, x4
    d318:	cset	x0, ne  // ne = any
    d31c:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d320:	cmp	x0, x1
    d324:	mov	x19, x4
    d328:	cset	x0, lt  // lt = tstop
    d32c:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d330:	cmp	x0, x1
    d334:	mov	x19, x4
    d338:	cset	x0, le
    d33c:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d340:	cmp	x0, x1
    d344:	mov	x19, x4
    d348:	cset	x0, gt
    d34c:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d350:	cmp	x0, x1
    d354:	mov	x19, x4
    d358:	cset	x0, ge  // ge = tcont
    d35c:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d360:	cmp	x0, x1
    d364:	mov	x19, x4
    d368:	cset	x0, eq  // eq = none
    d36c:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d370:	eor	x0, x0, x1
    d374:	mov	x19, x4
    d378:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d37c:	mov	x19, x4
    d380:	asr	x0, x0, x1
    d384:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d388:	mov	x19, x4
    d38c:	lsr	x0, x0, x1
    d390:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d394:	mov	x19, x4
    d398:	lsl	x0, x0, x1
    d39c:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d3a0:	add	x0, x0, x1
    d3a4:	mov	x19, x4
    d3a8:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d3ac:	orr	x0, x0, x1
    d3b0:	mov	x19, x4
    d3b4:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d3b8:	mul	x0, x0, x1
    d3bc:	mov	x19, x4
    d3c0:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d3c4:	udiv	x2, x0, x1
    d3c8:	mov	x19, x4
    d3cc:	msub	x0, x2, x1, x0
    d3d0:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d3d4:	sub	x0, x0, x1
    d3d8:	mov	x19, x4
    d3dc:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d3e0:	sdiv	x0, x0, x1
    d3e4:	mov	x19, x4
    d3e8:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d3ec:	and	x0, x0, x1
    d3f0:	mov	x19, x4
    d3f4:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d3f8:	cntd	x0
    d3fc:	sxtw	x0, w0
    d400:	add	x0, x3, x0
    d404:	b	d208 <_Unwind_GetTextRelBase@@GCC_3.0+0x12b0>
    d408:	cntd	x0
    d40c:	mov	w3, w20
    d410:	sxtw	x0, w0
    d414:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d418:	mvn	x0, x0
    d41c:	mov	x19, x4
    d420:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d424:	cmp	w1, #0x2
    d428:	b.ne	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>  // b.any
    d42c:	ldrh	w0, [x0]
    d430:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d434:	cmp	w1, #0x8
    d438:	b.ne	cd34 <_Unwind_GetTextRelBase@@GCC_3.0+0xddc>  // b.any
    d43c:	ldr	x0, [x0]
    d440:	b	cdd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe80>
    d444:	nop
    d448:	sub	sp, sp, #0x440
    d44c:	mov	x2, #0x3c0                 	// #960
    d450:	stp	x29, x30, [sp]
    d454:	mov	x29, sp
    d458:	stp	x27, x28, [sp, #80]
    d45c:	add	x28, sp, #0x80
    d460:	mov	x27, x0
    d464:	stp	x19, x20, [sp, #16]
    d468:	stp	x21, x22, [sp, #32]
    d46c:	stp	x23, x24, [sp, #48]
    d470:	stp	x25, x26, [sp, #64]
    d474:	str	x1, [sp, #104]
    d478:	mov	x1, x0
    d47c:	mov	x0, x28
    d480:	bl	2aa0 <memcpy@plt>
    d484:	ldr	x1, [sp, #960]
    d488:	tbz	x1, #62, d494 <_Unwind_GetTextRelBase@@GCC_3.0+0x153c>
    d48c:	ldrb	w0, [sp, #1015]
    d490:	cbnz	w0, d49c <_Unwind_GetTextRelBase@@GCC_3.0+0x1544>
    d494:	ldr	x0, [x28, #248]
    d498:	cbz	x0, d768 <_Unwind_GetTextRelBase@@GCC_3.0+0x1810>
    d49c:	ldr	x0, [x27, #832]
    d4a0:	tbz	x0, #62, d4a8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1550>
    d4a4:	strb	wzr, [x27, #887]
    d4a8:	ldr	x0, [sp, #104]
    d4ac:	ldr	w0, [x0, #1600]
    d4b0:	str	xzr, [x27, #248]
    d4b4:	cmp	w0, #0x1
    d4b8:	b.ne	d508 <_Unwind_GetTextRelBase@@GCC_3.0+0x15b0>  // b.any
    d4bc:	ldr	x0, [sp, #104]
    d4c0:	ldr	x0, [x0, #1584]
    d4c4:	cmp	w0, #0x61
    d4c8:	b.gt	d6d0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1778>
    d4cc:	sxtw	x2, w0
    d4d0:	ldr	x3, [x28, x2, lsl #3]
    d4d4:	tbnz	x1, #62, d748 <_Unwind_GetTextRelBase@@GCC_3.0+0x17f0>
    d4d8:	cmp	w0, #0x2e
    d4dc:	b.eq	d75c <_Unwind_GetTextRelBase@@GCC_3.0+0x1804>  // b.none
    d4e0:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    d4e4:	add	x0, x0, #0x1c8
    d4e8:	ldrb	w0, [x0, x2]
    d4ec:	cmp	w0, #0x8
    d4f0:	b.ne	d6d0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1778>  // b.any
    d4f4:	ldr	x3, [x3]
    d4f8:	ldr	x0, [sp, #104]
    d4fc:	ldr	x0, [x0, #1576]
    d500:	add	x22, x3, x0
    d504:	b	d54c <_Unwind_GetTextRelBase@@GCC_3.0+0x15f4>
    d508:	cmp	w0, #0x2
    d50c:	b.ne	d6d0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1778>  // b.any
    d510:	ldr	x0, [sp, #104]
    d514:	mov	x1, #0x0                   	// #0
    d518:	mov	w3, #0x0                   	// #0
    d51c:	ldr	x0, [x0, #1592]
    d520:	ldrb	w4, [x0], #1
    d524:	and	x2, x4, #0x7f
    d528:	lsl	x2, x2, x3
    d52c:	add	w3, w3, #0x7
    d530:	orr	x1, x1, x2
    d534:	tbnz	w4, #7, d520 <_Unwind_GetTextRelBase@@GCC_3.0+0x15c8>
    d538:	add	x1, x0, x1
    d53c:	mov	x2, x28
    d540:	mov	x3, #0x0                   	// #0
    d544:	bl	ccd0 <_Unwind_GetTextRelBase@@GCC_3.0+0xd78>
    d548:	mov	x22, x0
    d54c:	ldr	x25, [sp, #104]
    d550:	adrp	x23, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    d554:	add	x26, x27, #0x358
    d558:	add	x20, x23, #0x1c8
    d55c:	add	x21, sp, #0x3d8
    d560:	mov	x24, #0x0                   	// #0
    d564:	mov	w19, #0x1                   	// #1
    d568:	str	x22, [x27, #784]
    d56c:	nop
    d570:	ldr	w2, [x25, #8]
    d574:	cmp	w2, #0x3
    d578:	b.eq	d61c <_Unwind_GetTextRelBase@@GCC_3.0+0x16c4>  // b.none
    d57c:	b.hi	d660 <_Unwind_GetTextRelBase@@GCC_3.0+0x1708>  // b.pmore
    d580:	cmp	w2, #0x1
    d584:	b.eq	d6d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x177c>  // b.none
    d588:	cmp	w2, #0x2
    d58c:	b.ne	d5b4 <_Unwind_GetTextRelBase@@GCC_3.0+0x165c>  // b.any
    d590:	ldr	x0, [x25]
    d594:	ldrb	w2, [x21, w0, sxtw]
    d598:	sxtw	x1, w0
    d59c:	cbnz	w2, d6ec <_Unwind_GetTextRelBase@@GCC_3.0+0x1794>
    d5a0:	ldr	x2, [x27, #832]
    d5a4:	ldr	x0, [x28, x1, lsl #3]
    d5a8:	tbnz	x2, #62, d658 <_Unwind_GetTextRelBase@@GCC_3.0+0x1700>
    d5ac:	nop
    d5b0:	str	x0, [x27, x24, lsl #3]
    d5b4:	add	x24, x24, #0x1
    d5b8:	add	x25, x25, #0x10
    d5bc:	cmp	x24, #0x62
    d5c0:	add	x26, x26, #0x1
    d5c4:	b.ne	d570 <_Unwind_GetTextRelBase@@GCC_3.0+0x1618>  // b.any
    d5c8:	ldr	x3, [sp, #104]
    d5cc:	ldr	x0, [x27, #832]
    d5d0:	ldrb	w2, [x3, #1651]
    d5d4:	orr	x1, x0, #0x8000000000000000
    d5d8:	and	x0, x0, #0x7fffffffffffffff
    d5dc:	cmp	w2, #0x0
    d5e0:	csel	x0, x0, x1, eq  // eq = none
    d5e4:	ldp	x29, x30, [sp]
    d5e8:	orr	x1, x0, #0x2000000000000000
    d5ec:	ldp	x19, x20, [sp, #16]
    d5f0:	ldp	x21, x22, [sp, #32]
    d5f4:	ldp	x23, x24, [sp, #48]
    d5f8:	ldp	x25, x26, [sp, #64]
    d5fc:	str	x0, [x27, #832]
    d600:	ldr	x2, [x3, #544]
    d604:	tst	x2, #0x1
    d608:	csel	x0, x1, x0, ne  // ne = any
    d60c:	str	x0, [x27, #832]
    d610:	ldp	x27, x28, [sp, #80]
    d614:	add	sp, sp, #0x440
    d618:	ret
    d61c:	ldr	x0, [x25]
    d620:	mov	x1, #0x0                   	// #0
    d624:	mov	w4, #0x0                   	// #0
    d628:	ldrb	w5, [x0], #1
    d62c:	and	x2, x5, #0x7f
    d630:	lsl	x2, x2, x4
    d634:	add	w4, w4, #0x7
    d638:	orr	x1, x1, x2
    d63c:	tbnz	w5, #7, d628 <_Unwind_GetTextRelBase@@GCC_3.0+0x16d0>
    d640:	add	x1, x0, x1
    d644:	mov	x3, x22
    d648:	mov	x2, x28
    d64c:	bl	ccd0 <_Unwind_GetTextRelBase@@GCC_3.0+0xd78>
    d650:	ldr	x1, [x27, #832]
    d654:	tbz	x1, #62, d5b0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1658>
    d658:	strb	wzr, [x26]
    d65c:	b	d5b0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1658>
    d660:	cmp	w2, #0x4
    d664:	b.eq	d6bc <_Unwind_GetTextRelBase@@GCC_3.0+0x1764>  // b.none
    d668:	cmp	w2, #0x5
    d66c:	b.ne	d5b4 <_Unwind_GetTextRelBase@@GCC_3.0+0x165c>  // b.any
    d670:	ldr	x0, [x25]
    d674:	mov	x1, #0x0                   	// #0
    d678:	mov	w4, #0x0                   	// #0
    d67c:	nop
    d680:	ldrb	w5, [x0], #1
    d684:	and	x2, x5, #0x7f
    d688:	lsl	x2, x2, x4
    d68c:	add	w4, w4, #0x7
    d690:	orr	x1, x1, x2
    d694:	tbnz	w5, #7, d680 <_Unwind_GetTextRelBase@@GCC_3.0+0x1728>
    d698:	add	x1, x0, x1
    d69c:	mov	x3, x22
    d6a0:	mov	x2, x28
    d6a4:	bl	ccd0 <_Unwind_GetTextRelBase@@GCC_3.0+0xd78>
    d6a8:	ldrb	w1, [x24, x20]
    d6ac:	cmp	w1, #0x8
    d6b0:	b.hi	d6d0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1778>  // b.pmore
    d6b4:	strb	w19, [x26]
    d6b8:	b	d5b0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1658>
    d6bc:	ldr	x0, [x25]
    d6c0:	ldrb	w1, [x24, x20]
    d6c4:	add	x0, x22, x0
    d6c8:	cmp	w1, #0x8
    d6cc:	b.ls	d6b4 <_Unwind_GetTextRelBase@@GCC_3.0+0x175c>  // b.plast
    d6d0:	bl	2c50 <abort@plt>
    d6d4:	ldr	x1, [x27, #832]
    d6d8:	ldr	x0, [x25]
    d6dc:	add	x0, x22, x0
    d6e0:	tbz	x1, #62, d5b0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1658>
    d6e4:	strb	wzr, [x26]
    d6e8:	b	d5b0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1658>
    d6ec:	cmp	w0, #0x61
    d6f0:	b.gt	d6d0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1778>
    d6f4:	ldr	x4, [sp, #960]
    d6f8:	ldr	x2, [x28, x1, lsl #3]
    d6fc:	tbz	x4, #62, d720 <_Unwind_GetTextRelBase@@GCC_3.0+0x17c8>
    d700:	mov	x0, x2
    d704:	nop
    d708:	add	x1, x23, #0x1c8
    d70c:	ldrb	w1, [x24, x1]
    d710:	cmp	w1, #0x8
    d714:	b.hi	d6d0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1778>  // b.pmore
    d718:	strb	w19, [x26]
    d71c:	b	d5b0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1658>
    d720:	cmp	w0, #0x2e
    d724:	b.eq	d73c <_Unwind_GetTextRelBase@@GCC_3.0+0x17e4>  // b.none
    d728:	ldrb	w0, [x20, x1]
    d72c:	cmp	w0, #0x8
    d730:	b.ne	d6d0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1778>  // b.any
    d734:	ldr	x0, [x2]
    d738:	b	d708 <_Unwind_GetTextRelBase@@GCC_3.0+0x17b0>
    d73c:	cntd	x0
    d740:	sxtw	x0, w0
    d744:	b	d708 <_Unwind_GetTextRelBase@@GCC_3.0+0x17b0>
    d748:	add	x1, sp, #0x3d8
    d74c:	ldrb	w1, [x1, x2]
    d750:	cbnz	w1, d4f8 <_Unwind_GetTextRelBase@@GCC_3.0+0x15a0>
    d754:	cmp	w0, #0x2e
    d758:	b.ne	d4e0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1588>  // b.any
    d75c:	cntd	x0
    d760:	sxtw	x3, w0
    d764:	b	d4f8 <_Unwind_GetTextRelBase@@GCC_3.0+0x15a0>
    d768:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    d76c:	ldr	x2, [x27, #784]
    d770:	ldrb	w0, [x0, #487]
    d774:	cmp	w0, #0x8
    d778:	b.ne	d6d0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1778>  // b.any
    d77c:	str	x2, [sp, #120]
    d780:	tbz	x1, #62, d788 <_Unwind_GetTextRelBase@@GCC_3.0+0x1830>
    d784:	strb	wzr, [sp, #1015]
    d788:	add	x0, sp, #0x78
    d78c:	str	x0, [x28, #248]
    d790:	b	d49c <_Unwind_GetTextRelBase@@GCC_3.0+0x1544>
    d794:	nop
    d798:	sub	sp, sp, #0x6d0
    d79c:	stp	x29, x30, [sp]
    d7a0:	mov	x29, sp
    d7a4:	xpaclri
    d7a8:	stp	x19, x20, [sp, #16]
    d7ac:	mov	x19, x0
    d7b0:	mov	x20, x30
    d7b4:	stp	x21, x22, [sp, #32]
    d7b8:	mov	x22, x1
    d7bc:	mov	x21, x2
    d7c0:	mov	w1, #0x0                   	// #0
    d7c4:	mov	x2, #0x3c0                 	// #960
    d7c8:	str	x23, [sp, #48]
    d7cc:	bl	2ba0 <memset@plt>
    d7d0:	mov	x0, #0x4000000000000000    	// #4611686018427387904
    d7d4:	str	x20, [x19, #792]
    d7d8:	str	x0, [x19, #832]
    d7dc:	add	x23, sp, #0x50
    d7e0:	mov	x1, x23
    d7e4:	mov	x0, x19
    d7e8:	bl	c778 <_Unwind_GetTextRelBase@@GCC_3.0+0x820>
    d7ec:	cbnz	w0, d9e0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a88>
    d7f0:	adrp	x0, 22000 <__emutls_register_common@@GCC_4.3.0+0x11ac0>
    d7f4:	adrp	x20, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    d7f8:	ldr	x0, [x0, #4032]
    d7fc:	cbz	x0, d884 <_Unwind_GetTextRelBase@@GCC_3.0+0x192c>
    d800:	add	x0, x20, #0x1c8
    d804:	adrp	x1, b000 <__trunctfdf2@@GCC_3.0+0x310>
    d808:	add	x0, x0, #0x64
    d80c:	add	x1, x1, #0xb70
    d810:	bl	2c70 <pthread_once@plt>
    d814:	cbnz	w0, d884 <_Unwind_GetTextRelBase@@GCC_3.0+0x192c>
    d818:	add	x20, x20, #0x1c8
    d81c:	ldrb	w0, [x20, #31]
    d820:	cmp	w0, #0x8
    d824:	b.ne	d9e0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a88>  // b.any
    d828:	ldr	x0, [x19, #832]
    d82c:	str	x22, [sp, #72]
    d830:	tbz	x0, #62, d838 <_Unwind_GetTextRelBase@@GCC_3.0+0x18e0>
    d834:	strb	wzr, [x19, #887]
    d838:	add	x0, sp, #0x48
    d83c:	mov	x3, #0x1f                  	// #31
    d840:	mov	w2, #0x1                   	// #1
    d844:	str	x0, [x19, #248]
    d848:	mov	x1, x23
    d84c:	mov	x0, x19
    d850:	str	xzr, [sp, #1656]
    d854:	str	x3, [sp, #1664]
    d858:	str	w2, [sp, #1680]
    d85c:	bl	d448 <_Unwind_GetTextRelBase@@GCC_3.0+0x14f0>
    d860:	mov	x30, x21
    d864:	xpaclri
    d868:	ldp	x21, x22, [sp, #32]
    d86c:	ldr	x23, [sp, #48]
    d870:	str	x30, [x19, #792]
    d874:	ldp	x29, x30, [sp]
    d878:	ldp	x19, x20, [sp, #16]
    d87c:	add	sp, sp, #0x6d0
    d880:	ret
    d884:	ldrb	w0, [x20, #456]
    d888:	add	x3, x20, #0x1c8
    d88c:	cbnz	w0, d818 <_Unwind_GetTextRelBase@@GCC_3.0+0x18c0>
    d890:	mov	w4, #0x8                   	// #8
    d894:	strb	w4, [x20, #456]
    d898:	strb	w4, [x3, #1]
    d89c:	strb	w4, [x3, #2]
    d8a0:	strb	w4, [x3, #3]
    d8a4:	strb	w4, [x3, #4]
    d8a8:	strb	w4, [x3, #5]
    d8ac:	strb	w4, [x3, #6]
    d8b0:	strb	w4, [x3, #7]
    d8b4:	strb	w4, [x3, #8]
    d8b8:	strb	w4, [x3, #9]
    d8bc:	strb	w4, [x3, #10]
    d8c0:	strb	w4, [x3, #11]
    d8c4:	strb	w4, [x3, #12]
    d8c8:	strb	w4, [x3, #13]
    d8cc:	strb	w4, [x3, #14]
    d8d0:	strb	w4, [x3, #15]
    d8d4:	strb	w4, [x3, #16]
    d8d8:	strb	w4, [x3, #17]
    d8dc:	strb	w4, [x3, #18]
    d8e0:	strb	w4, [x3, #19]
    d8e4:	strb	w4, [x3, #20]
    d8e8:	strb	w4, [x3, #21]
    d8ec:	strb	w4, [x3, #22]
    d8f0:	strb	w4, [x3, #23]
    d8f4:	strb	w4, [x3, #24]
    d8f8:	strb	w4, [x3, #25]
    d8fc:	strb	w4, [x3, #26]
    d900:	strb	w4, [x3, #27]
    d904:	strb	w4, [x3, #28]
    d908:	strb	w4, [x3, #29]
    d90c:	strb	w4, [x3, #30]
    d910:	strb	w4, [x3, #31]
    d914:	strb	w4, [x3, #64]
    d918:	strb	w4, [x3, #46]
    d91c:	strb	w4, [x3, #65]
    d920:	strb	w4, [x3, #66]
    d924:	strb	w4, [x3, #67]
    d928:	strb	w4, [x3, #68]
    d92c:	strb	w4, [x3, #69]
    d930:	strb	w4, [x3, #70]
    d934:	strb	w4, [x3, #71]
    d938:	strb	w4, [x3, #72]
    d93c:	strb	w4, [x3, #73]
    d940:	strb	w4, [x3, #74]
    d944:	strb	w4, [x3, #75]
    d948:	strb	w4, [x3, #76]
    d94c:	strb	w4, [x3, #77]
    d950:	strb	w4, [x3, #78]
    d954:	strb	w4, [x3, #79]
    d958:	strb	w4, [x3, #80]
    d95c:	strb	w4, [x3, #81]
    d960:	strb	w4, [x3, #82]
    d964:	strb	w4, [x3, #83]
    d968:	strb	w4, [x3, #84]
    d96c:	strb	w4, [x3, #85]
    d970:	strb	w4, [x3, #86]
    d974:	strb	w4, [x3, #87]
    d978:	strb	w4, [x3, #88]
    d97c:	strb	w4, [x3, #89]
    d980:	strb	w4, [x3, #90]
    d984:	strb	w4, [x3, #91]
    d988:	strb	w4, [x3, #92]
    d98c:	strb	w4, [x3, #93]
    d990:	strb	w4, [x3, #94]
    d994:	strb	w4, [x3, #95]
    d998:	strb	w4, [x3, #48]
    d99c:	strb	w4, [x3, #49]
    d9a0:	strb	w4, [x3, #50]
    d9a4:	strb	w4, [x3, #51]
    d9a8:	strb	w4, [x3, #52]
    d9ac:	strb	w4, [x3, #53]
    d9b0:	strb	w4, [x3, #54]
    d9b4:	strb	w4, [x3, #55]
    d9b8:	strb	w4, [x3, #56]
    d9bc:	strb	w4, [x3, #57]
    d9c0:	strb	w4, [x3, #58]
    d9c4:	strb	w4, [x3, #59]
    d9c8:	strb	w4, [x3, #60]
    d9cc:	strb	w4, [x3, #61]
    d9d0:	strb	w4, [x3, #62]
    d9d4:	strb	w4, [x3, #63]
    d9d8:	strb	w4, [x3, #96]
    d9dc:	b	d818 <_Unwind_GetTextRelBase@@GCC_3.0+0x18c0>
    d9e0:	bl	2c50 <abort@plt>
    d9e4:	nop
    d9e8:	stp	x29, x30, [sp, #-32]!
    d9ec:	mov	x29, sp
    d9f0:	stp	x19, x20, [sp, #16]
    d9f4:	mov	x20, x1
    d9f8:	mov	x19, x0
    d9fc:	bl	d448 <_Unwind_GetTextRelBase@@GCC_3.0+0x14f0>
    da00:	ldr	x0, [x20, #1640]
    da04:	add	x1, x20, x0, lsl #4
    da08:	ldr	w1, [x1, #8]
    da0c:	cmp	w1, #0x6
    da10:	b.ne	da24 <_Unwind_GetTextRelBase@@GCC_3.0+0x1acc>  // b.any
    da14:	str	xzr, [x19, #792]
    da18:	ldp	x19, x20, [sp, #16]
    da1c:	ldp	x29, x30, [sp], #32
    da20:	ret
    da24:	cmp	w0, #0x61
    da28:	b.gt	da98 <_Unwind_GetTextRelBase@@GCC_3.0+0x1b40>
    da2c:	ldr	x2, [x19, #832]
    da30:	sxtw	x1, w0
    da34:	ldr	x17, [x19, x1, lsl #3]
    da38:	tbz	x2, #62, da48 <_Unwind_GetTextRelBase@@GCC_3.0+0x1af0>
    da3c:	add	x2, x19, x1
    da40:	ldrb	w2, [x2, #856]
    da44:	cbnz	w2, da68 <_Unwind_GetTextRelBase@@GCC_3.0+0x1b10>
    da48:	cmp	w0, #0x2e
    da4c:	b.eq	da8c <_Unwind_GetTextRelBase@@GCC_3.0+0x1b34>  // b.none
    da50:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    da54:	add	x0, x0, #0x1c8
    da58:	ldrb	w0, [x0, x1]
    da5c:	cmp	w0, #0x8
    da60:	b.ne	da98 <_Unwind_GetTextRelBase@@GCC_3.0+0x1b40>  // b.any
    da64:	ldr	x17, [x17]
    da68:	ldr	x0, [x20, #544]
    da6c:	str	x17, [x19, #792]
    da70:	tbz	w0, #0, da7c <_Unwind_GetTextRelBase@@GCC_3.0+0x1b24>
    da74:	ldr	x16, [x19, #784]
    da78:	autia1716
    da7c:	str	x17, [x19, #792]
    da80:	ldp	x19, x20, [sp, #16]
    da84:	ldp	x29, x30, [sp], #32
    da88:	ret
    da8c:	cntd	x0
    da90:	sxtw	x17, w0
    da94:	b	da68 <_Unwind_GetTextRelBase@@GCC_3.0+0x1b10>
    da98:	bl	2c50 <abort@plt>
    da9c:	nop
    daa0:	sub	sp, sp, #0x6d0
    daa4:	stp	x29, x30, [sp]
    daa8:	mov	x29, sp
    daac:	stp	x19, x20, [sp, #16]
    dab0:	mov	x19, x1
    dab4:	stp	x21, x22, [sp, #32]
    dab8:	mov	x22, x0
    dabc:	stp	x23, x24, [sp, #48]
    dac0:	add	x23, sp, #0x50
    dac4:	mov	x24, #0x1                   	// #1
    dac8:	str	x25, [sp, #64]
    dacc:	mov	x25, x2
    dad0:	mov	x1, x23
    dad4:	mov	x0, x19
    dad8:	bl	c778 <_Unwind_GetTextRelBase@@GCC_3.0+0x820>
    dadc:	mov	w21, w0
    dae0:	mov	x0, x19
    dae4:	bl	2b90 <_Unwind_GetCFA@plt>
    dae8:	ldr	x1, [x19, #832]
    daec:	ldr	x2, [x22, #24]
    daf0:	sub	x1, x0, x1, lsr #63
    daf4:	cmp	x2, x1
    daf8:	cset	w20, eq  // eq = none
    dafc:	lsl	w20, w20, #2
    db00:	cbnz	w21, db4c <_Unwind_GetTextRelBase@@GCC_3.0+0x1bf4>
    db04:	ldr	x5, [sp, #1696]
    db08:	cbz	x5, db34 <_Unwind_GetTextRelBase@@GCC_3.0+0x1bdc>
    db0c:	ldr	x2, [x22]
    db10:	mov	x4, x19
    db14:	mov	x3, x22
    db18:	orr	w1, w20, #0x2
    db1c:	mov	w0, #0x1                   	// #1
    db20:	blr	x5
    db24:	cmp	w0, #0x7
    db28:	b.eq	db6c <_Unwind_GetTextRelBase@@GCC_3.0+0x1c14>  // b.none
    db2c:	cmp	w0, #0x8
    db30:	b.ne	db4c <_Unwind_GetTextRelBase@@GCC_3.0+0x1bf4>  // b.any
    db34:	cbnz	w20, db8c <_Unwind_GetTextRelBase@@GCC_3.0+0x1c34>
    db38:	add	x24, x24, #0x1
    db3c:	mov	x1, x23
    db40:	mov	x0, x19
    db44:	bl	d9e8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a90>
    db48:	b	dad0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1b78>
    db4c:	mov	w0, #0x2                   	// #2
    db50:	ldp	x29, x30, [sp]
    db54:	ldp	x19, x20, [sp, #16]
    db58:	ldp	x21, x22, [sp, #32]
    db5c:	ldp	x23, x24, [sp, #48]
    db60:	ldr	x25, [sp, #64]
    db64:	add	sp, sp, #0x6d0
    db68:	ret
    db6c:	str	x24, [x25]
    db70:	ldp	x29, x30, [sp]
    db74:	ldp	x19, x20, [sp, #16]
    db78:	ldp	x21, x22, [sp, #32]
    db7c:	ldp	x23, x24, [sp, #48]
    db80:	ldr	x25, [sp, #64]
    db84:	add	sp, sp, #0x6d0
    db88:	ret
    db8c:	bl	2c50 <abort@plt>
    db90:	sub	sp, sp, #0x6d0
    db94:	stp	x29, x30, [sp]
    db98:	mov	x29, sp
    db9c:	stp	x19, x20, [sp, #16]
    dba0:	mov	x20, x0
    dba4:	stp	x21, x22, [sp, #32]
    dba8:	mov	x21, x1
    dbac:	add	x22, sp, #0x50
    dbb0:	stp	x23, x24, [sp, #48]
    dbb4:	mov	x23, #0x1                   	// #1
    dbb8:	stp	x25, x26, [sp, #64]
    dbbc:	mov	x26, x2
    dbc0:	ldp	x25, x24, [x0, #16]
    dbc4:	b	dc18 <_Unwind_GetTextRelBase@@GCC_3.0+0x1cc0>
    dbc8:	blr	x25
    dbcc:	mov	w2, w0
    dbd0:	mov	x4, x21
    dbd4:	mov	x3, x20
    dbd8:	mov	w1, #0xa                   	// #10
    dbdc:	mov	w0, #0x1                   	// #1
    dbe0:	cbnz	w2, dc64 <_Unwind_GetTextRelBase@@GCC_3.0+0x1d0c>
    dbe4:	ldr	x5, [sp, #1696]
    dbe8:	cbz	x5, dc08 <_Unwind_GetTextRelBase@@GCC_3.0+0x1cb0>
    dbec:	ldr	x2, [x20]
    dbf0:	blr	x5
    dbf4:	mov	w19, w0
    dbf8:	cmp	w0, #0x7
    dbfc:	b.eq	dc88 <_Unwind_GetTextRelBase@@GCC_3.0+0x1d30>  // b.none
    dc00:	cmp	w0, #0x8
    dc04:	b.ne	dc64 <_Unwind_GetTextRelBase@@GCC_3.0+0x1d0c>  // b.any
    dc08:	add	x23, x23, #0x1
    dc0c:	mov	x1, x22
    dc10:	mov	x0, x21
    dc14:	bl	d9e8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a90>
    dc18:	mov	x1, x22
    dc1c:	mov	x0, x21
    dc20:	bl	c778 <_Unwind_GetTextRelBase@@GCC_3.0+0x820>
    dc24:	cmp	w0, #0x0
    dc28:	mov	w19, w0
    dc2c:	mov	x5, x24
    dc30:	mov	x4, x21
    dc34:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    dc38:	b.ne	dc64 <_Unwind_GetTextRelBase@@GCC_3.0+0x1d0c>  // b.any
    dc3c:	cmp	w0, #0x5
    dc40:	mov	x3, x20
    dc44:	mov	w1, #0xa                   	// #10
    dc48:	mov	w0, #0x1                   	// #1
    dc4c:	ldr	x2, [x20]
    dc50:	b.ne	dbc8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1c70>  // b.any
    dc54:	mov	w1, #0x1a                  	// #26
    dc58:	mov	w0, #0x1                   	// #1
    dc5c:	blr	x25
    dc60:	cbz	w0, dc88 <_Unwind_GetTextRelBase@@GCC_3.0+0x1d30>
    dc64:	mov	w19, #0x2                   	// #2
    dc68:	mov	w0, w19
    dc6c:	ldp	x29, x30, [sp]
    dc70:	ldp	x19, x20, [sp, #16]
    dc74:	ldp	x21, x22, [sp, #32]
    dc78:	ldp	x23, x24, [sp, #48]
    dc7c:	ldp	x25, x26, [sp, #64]
    dc80:	add	sp, sp, #0x6d0
    dc84:	ret
    dc88:	str	x23, [x26]
    dc8c:	mov	w0, w19
    dc90:	ldp	x29, x30, [sp]
    dc94:	ldp	x19, x20, [sp, #16]
    dc98:	ldp	x21, x22, [sp, #32]
    dc9c:	ldp	x23, x24, [sp, #48]
    dca0:	ldp	x25, x26, [sp, #64]
    dca4:	add	sp, sp, #0x6d0
    dca8:	ret
    dcac:	nop

000000000000dcb0 <__frame_state_for@@GLIBC_2.0>:
    dcb0:	sub	sp, sp, #0xa70
    dcb4:	mov	x2, #0x3c0                 	// #960
    dcb8:	add	x3, sp, #0x30
    dcbc:	stp	x29, x30, [sp]
    dcc0:	mov	x29, sp
    dcc4:	stp	x19, x20, [sp, #16]
    dcc8:	mov	x20, x1
    dccc:	mov	w1, #0x0                   	// #0
    dcd0:	str	x21, [sp, #32]
    dcd4:	mov	x21, x0
    dcd8:	mov	x0, x3
    dcdc:	bl	2ba0 <memset@plt>
    dce0:	mov	x2, #0x4000000000000000    	// #4611686018427387904
    dce4:	add	x19, sp, #0x3f0
    dce8:	add	x21, x21, #0x1
    dcec:	mov	x1, x19
    dcf0:	str	x21, [sp, #840]
    dcf4:	str	x2, [sp, #880]
    dcf8:	bl	c778 <_Unwind_GetTextRelBase@@GCC_3.0+0x820>
    dcfc:	cbnz	w0, dda8 <__frame_state_for@@GLIBC_2.0+0xf8>
    dd00:	ldr	w0, [sp, #2608]
    dd04:	cmp	w0, #0x2
    dd08:	b.eq	dda8 <__frame_state_for@@GLIBC_2.0+0xf8>  // b.none
    dd0c:	sub	x4, x20, x20, lsl #3
    dd10:	mov	x1, #0xffffffffffffe680    	// #-6528
    dd14:	mov	x0, x19
    dd18:	add	x5, x19, #0x620
    dd1c:	add	x4, x4, x1
    dd20:	add	x2, x20, #0x334
    dd24:	b	dd3c <__frame_state_for@@GLIBC_2.0+0x8c>
    dd28:	str	xzr, [x4, x2, lsl #3]
    dd2c:	add	x0, x0, #0x10
    dd30:	add	x2, x2, #0x1
    dd34:	cmp	x0, x5
    dd38:	b.eq	dd6c <__frame_state_for@@GLIBC_2.0+0xbc>  // b.none
    dd3c:	ldrb	w3, [x0, #8]
    dd40:	strb	w3, [x2]
    dd44:	cmp	w3, #0x1
    dd48:	b.eq	dd54 <__frame_state_for@@GLIBC_2.0+0xa4>  // b.none
    dd4c:	cmp	w3, #0x2
    dd50:	b.ne	dd28 <__frame_state_for@@GLIBC_2.0+0x78>  // b.any
    dd54:	ldr	x3, [x0]
    dd58:	str	x3, [x4, x2, lsl #3]
    dd5c:	add	x0, x0, #0x10
    dd60:	add	x2, x2, #0x1
    dd64:	cmp	x0, x5
    dd68:	b.ne	dd3c <__frame_state_for@@GLIBC_2.0+0x8c>  // b.any
    dd6c:	ldr	x1, [sp, #896]
    dd70:	mov	x0, x20
    dd74:	ldr	x2, [sp, #2584]
    dd78:	stp	x2, x1, [x20, #16]
    dd7c:	ldr	x2, [sp, #2592]
    dd80:	strh	w2, [x20, #816]
    dd84:	ldr	x1, [sp, #2648]
    dd88:	strh	w1, [x20, #818]
    dd8c:	ldr	x2, [sp, #2664]
    dd90:	str	x2, [x20, #8]
    dd94:	ldp	x29, x30, [sp]
    dd98:	ldp	x19, x20, [sp, #16]
    dd9c:	ldr	x21, [sp, #32]
    dda0:	add	sp, sp, #0xa70
    dda4:	ret
    dda8:	mov	x0, #0x0                   	// #0
    ddac:	ldp	x29, x30, [sp]
    ddb0:	ldp	x19, x20, [sp, #16]
    ddb4:	ldr	x21, [sp, #32]
    ddb8:	add	sp, sp, #0xa70
    ddbc:	ret
    ddc0:	ret
    ddc4:	nop

000000000000ddc8 <_Unwind_RaiseException@@GCC_3.0>:
    ddc8:	sub	sp, sp, #0xec0
    ddcc:	stp	x29, x30, [sp]
    ddd0:	mov	x29, sp
    ddd4:	stp	x21, x22, [sp, #64]
    ddd8:	add	x21, sp, #0xc0
    dddc:	add	x22, sp, #0x840
    dde0:	stp	x0, x1, [sp, #16]
    dde4:	add	x1, sp, #0xec0
    dde8:	stp	x2, x3, [sp, #32]
    ddec:	mov	x2, x30
    ddf0:	stp	x19, x20, [sp, #48]
    ddf4:	mov	x20, x0
    ddf8:	add	x19, sp, #0x480
    ddfc:	mov	x0, x21
    de00:	stp	x23, x24, [sp, #80]
    de04:	stp	x25, x26, [sp, #96]
    de08:	stp	x27, x28, [sp, #112]
    de0c:	stp	d8, d9, [sp, #128]
    de10:	stp	d10, d11, [sp, #144]
    de14:	stp	d12, d13, [sp, #160]
    de18:	stp	d14, d15, [sp, #176]
    de1c:	bl	d798 <_Unwind_GetTextRelBase@@GCC_3.0+0x1840>
    de20:	mov	x1, x21
    de24:	mov	x0, x19
    de28:	mov	x2, #0x3c0                 	// #960
    de2c:	bl	2aa0 <memcpy@plt>
    de30:	b	de64 <_Unwind_RaiseException@@GCC_3.0+0x9c>
    de34:	cbnz	w2, ded0 <_Unwind_RaiseException@@GCC_3.0+0x108>
    de38:	ldr	x5, [sp, #3728]
    de3c:	cbz	x5, de58 <_Unwind_RaiseException@@GCC_3.0+0x90>
    de40:	ldr	x2, [x20]
    de44:	blr	x5
    de48:	cmp	w0, #0x6
    de4c:	b.eq	ded8 <_Unwind_RaiseException@@GCC_3.0+0x110>  // b.none
    de50:	cmp	w0, #0x8
    de54:	b.ne	ded0 <_Unwind_RaiseException@@GCC_3.0+0x108>  // b.any
    de58:	mov	x1, x22
    de5c:	mov	x0, x19
    de60:	bl	d9e8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a90>
    de64:	mov	x1, x22
    de68:	mov	x0, x19
    de6c:	bl	c778 <_Unwind_GetTextRelBase@@GCC_3.0+0x820>
    de70:	mov	w2, w0
    de74:	mov	w1, #0x1                   	// #1
    de78:	mov	x4, x19
    de7c:	mov	x3, x20
    de80:	mov	w0, w1
    de84:	cmp	w2, #0x5
    de88:	b.ne	de34 <_Unwind_RaiseException@@GCC_3.0+0x6c>  // b.any
    de8c:	mov	x4, #0x0                   	// #0
    de90:	mov	w0, w2
    de94:	ldp	x29, x30, [sp]
    de98:	ldp	x0, x1, [sp, #16]
    de9c:	ldp	x2, x3, [sp, #32]
    dea0:	ldp	x19, x20, [sp, #48]
    dea4:	ldp	x21, x22, [sp, #64]
    dea8:	ldp	x23, x24, [sp, #80]
    deac:	ldp	x25, x26, [sp, #96]
    deb0:	ldp	x27, x28, [sp, #112]
    deb4:	ldp	d8, d9, [sp, #128]
    deb8:	ldp	d10, d11, [sp, #144]
    debc:	ldp	d12, d13, [sp, #160]
    dec0:	ldp	d14, d15, [sp, #176]
    dec4:	add	sp, sp, #0xec0
    dec8:	add	sp, sp, x4
    decc:	ret
    ded0:	mov	w2, #0x3                   	// #3
    ded4:	b	de8c <_Unwind_RaiseException@@GCC_3.0+0xc4>
    ded8:	str	xzr, [x20, #16]
    dedc:	mov	x0, x19
    dee0:	bl	2b90 <_Unwind_GetCFA@plt>
    dee4:	mov	x4, x0
    dee8:	ldr	x3, [sp, #1984]
    deec:	mov	x1, x21
    def0:	mov	x2, #0x3c0                 	// #960
    def4:	mov	x0, x19
    def8:	sub	x3, x4, x3, lsr #63
    defc:	str	x3, [x20, #24]
    df00:	bl	2aa0 <memcpy@plt>
    df04:	mov	x2, x22
    df08:	mov	x1, x19
    df0c:	mov	x0, x20
    df10:	bl	daa0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1b48>
    df14:	mov	w2, w0
    df18:	cmp	w0, #0x7
    df1c:	b.ne	de8c <_Unwind_RaiseException@@GCC_3.0+0xc4>  // b.any
    df20:	mov	x1, x19
    df24:	mov	x0, x21
    df28:	bl	bcc8 <__enable_execute_stack@@GCC_3.4.2+0x2c0>
    df2c:	mov	x4, x0
    df30:	ldr	x2, [sp, #1024]
    df34:	ldr	x1, [sp, #1944]
    df38:	tbz	x2, #61, df4c <_Unwind_RaiseException@@GCC_3.0+0x184>
    df3c:	mov	x17, x1
    df40:	ldr	x16, [sp, #976]
    df44:	pacia1716
    df48:	mov	x1, x17
    df4c:	ldr	x0, [sp, #1936]
    df50:	bl	ddc0 <__frame_state_for@@GLIBC_2.0+0x110>
    df54:	str	x1, [x29, #8]
    df58:	b	de90 <_Unwind_RaiseException@@GCC_3.0+0xc8>
    df5c:	nop

000000000000df60 <_Unwind_ForcedUnwind@@GCC_3.0>:
    df60:	sub	sp, sp, #0x850
    df64:	stp	x29, x30, [sp]
    df68:	mov	x29, sp
    df6c:	stp	x19, x20, [sp, #48]
    df70:	mov	x19, x0
    df74:	mov	x20, x2
    df78:	stp	x21, x22, [sp, #64]
    df7c:	add	x22, sp, #0xd0
    df80:	mov	x21, x1
    df84:	stp	x0, x1, [sp, #16]
    df88:	mov	x0, x22
    df8c:	add	x1, sp, #0x850
    df90:	stp	x2, x3, [sp, #32]
    df94:	mov	x2, x30
    df98:	stp	x23, x24, [sp, #80]
    df9c:	add	x23, sp, #0x490
    dfa0:	stp	x25, x26, [sp, #96]
    dfa4:	stp	x27, x28, [sp, #112]
    dfa8:	stp	d8, d9, [sp, #128]
    dfac:	stp	d10, d11, [sp, #144]
    dfb0:	stp	d12, d13, [sp, #160]
    dfb4:	stp	d14, d15, [sp, #176]
    dfb8:	bl	d798 <_Unwind_GetTextRelBase@@GCC_3.0+0x1840>
    dfbc:	mov	x1, x22
    dfc0:	mov	x2, #0x3c0                 	// #960
    dfc4:	mov	x0, x23
    dfc8:	bl	2aa0 <memcpy@plt>
    dfcc:	stp	x21, x20, [x19, #16]
    dfd0:	mov	x0, x19
    dfd4:	mov	x1, x23
    dfd8:	add	x2, sp, #0xc8
    dfdc:	bl	db90 <_Unwind_GetTextRelBase@@GCC_3.0+0x1c38>
    dfe0:	cmp	w0, #0x7
    dfe4:	mov	x4, #0x0                   	// #0
    dfe8:	b.eq	e028 <_Unwind_ForcedUnwind@@GCC_3.0+0xc8>  // b.none
    dfec:	ldp	x29, x30, [sp]
    dff0:	ldp	x0, x1, [sp, #16]
    dff4:	ldp	x2, x3, [sp, #32]
    dff8:	ldp	x19, x20, [sp, #48]
    dffc:	ldp	x21, x22, [sp, #64]
    e000:	ldp	x23, x24, [sp, #80]
    e004:	ldp	x25, x26, [sp, #96]
    e008:	ldp	x27, x28, [sp, #112]
    e00c:	ldp	d8, d9, [sp, #128]
    e010:	ldp	d10, d11, [sp, #144]
    e014:	ldp	d12, d13, [sp, #160]
    e018:	ldp	d14, d15, [sp, #176]
    e01c:	add	sp, sp, #0x850
    e020:	add	sp, sp, x4
    e024:	ret
    e028:	mov	x1, x23
    e02c:	mov	x0, x22
    e030:	bl	bcc8 <__enable_execute_stack@@GCC_3.4.2+0x2c0>
    e034:	mov	x4, x0
    e038:	ldr	x2, [sp, #1040]
    e03c:	ldr	x1, [sp, #1960]
    e040:	tbz	x2, #61, e054 <_Unwind_ForcedUnwind@@GCC_3.0+0xf4>
    e044:	mov	x17, x1
    e048:	ldr	x16, [sp, #992]
    e04c:	pacia1716
    e050:	mov	x1, x17
    e054:	ldr	x0, [sp, #1952]
    e058:	bl	ddc0 <__frame_state_for@@GLIBC_2.0+0x110>
    e05c:	str	x1, [x29, #8]
    e060:	b	dfec <_Unwind_ForcedUnwind@@GCC_3.0+0x8c>
    e064:	nop

000000000000e068 <_Unwind_Resume@@GCC_3.0>:
    e068:	sub	sp, sp, #0x850
    e06c:	stp	x29, x30, [sp]
    e070:	mov	x29, sp
    e074:	stp	x19, x20, [sp, #48]
    e078:	mov	x19, x0
    e07c:	add	x20, sp, #0xd0
    e080:	stp	x0, x1, [sp, #16]
    e084:	mov	x0, x20
    e088:	add	x1, sp, #0x850
    e08c:	stp	x2, x3, [sp, #32]
    e090:	mov	x2, x30
    e094:	stp	x21, x22, [sp, #64]
    e098:	add	x21, sp, #0x490
    e09c:	stp	x23, x24, [sp, #80]
    e0a0:	stp	x25, x26, [sp, #96]
    e0a4:	stp	x27, x28, [sp, #112]
    e0a8:	stp	d8, d9, [sp, #128]
    e0ac:	stp	d10, d11, [sp, #144]
    e0b0:	stp	d12, d13, [sp, #160]
    e0b4:	stp	d14, d15, [sp, #176]
    e0b8:	bl	d798 <_Unwind_GetTextRelBase@@GCC_3.0+0x1840>
    e0bc:	mov	x1, x20
    e0c0:	mov	x0, x21
    e0c4:	mov	x2, #0x3c0                 	// #960
    e0c8:	bl	2aa0 <memcpy@plt>
    e0cc:	ldr	x0, [x19, #16]
    e0d0:	cbnz	x0, e160 <_Unwind_Resume@@GCC_3.0+0xf8>
    e0d4:	mov	x0, x19
    e0d8:	add	x2, sp, #0xc8
    e0dc:	mov	x1, x21
    e0e0:	bl	daa0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1b48>
    e0e4:	cmp	w0, #0x7
    e0e8:	b.ne	e174 <_Unwind_Resume@@GCC_3.0+0x10c>  // b.any
    e0ec:	mov	x1, x21
    e0f0:	mov	x0, x20
    e0f4:	bl	bcc8 <__enable_execute_stack@@GCC_3.4.2+0x2c0>
    e0f8:	mov	x4, x0
    e0fc:	ldr	x2, [sp, #1040]
    e100:	ldr	x1, [sp, #1960]
    e104:	tbz	x2, #61, e118 <_Unwind_Resume@@GCC_3.0+0xb0>
    e108:	mov	x17, x1
    e10c:	ldr	x16, [sp, #992]
    e110:	pacia1716
    e114:	mov	x1, x17
    e118:	ldr	x0, [sp, #1952]
    e11c:	bl	ddc0 <__frame_state_for@@GLIBC_2.0+0x110>
    e120:	str	x1, [x29, #8]
    e124:	ldp	x29, x30, [sp]
    e128:	ldp	x0, x1, [sp, #16]
    e12c:	ldp	x2, x3, [sp, #32]
    e130:	ldp	x19, x20, [sp, #48]
    e134:	ldp	x21, x22, [sp, #64]
    e138:	ldp	x23, x24, [sp, #80]
    e13c:	ldp	x25, x26, [sp, #96]
    e140:	ldp	x27, x28, [sp, #112]
    e144:	ldp	d8, d9, [sp, #128]
    e148:	ldp	d10, d11, [sp, #144]
    e14c:	ldp	d12, d13, [sp, #160]
    e150:	ldp	d14, d15, [sp, #176]
    e154:	add	sp, sp, #0x850
    e158:	add	sp, sp, x4
    e15c:	ret
    e160:	mov	x0, x19
    e164:	add	x2, sp, #0xc8
    e168:	mov	x1, x21
    e16c:	bl	db90 <_Unwind_GetTextRelBase@@GCC_3.0+0x1c38>
    e170:	b	e0e4 <_Unwind_Resume@@GCC_3.0+0x7c>
    e174:	bl	2c50 <abort@plt>

000000000000e178 <_Unwind_Resume_or_Rethrow@@GCC_3.3>:
    e178:	sub	sp, sp, #0x850
    e17c:	stp	x29, x30, [sp]
    e180:	mov	x29, sp
    e184:	stp	x0, x1, [sp, #16]
    e188:	ldr	x1, [x0, #16]
    e18c:	stp	x2, x3, [sp, #32]
    e190:	stp	x19, x20, [sp, #48]
    e194:	mov	x19, x0
    e198:	stp	x21, x22, [sp, #64]
    e19c:	stp	x23, x24, [sp, #80]
    e1a0:	stp	x25, x26, [sp, #96]
    e1a4:	stp	x27, x28, [sp, #112]
    e1a8:	stp	d8, d9, [sp, #128]
    e1ac:	stp	d10, d11, [sp, #144]
    e1b0:	stp	d12, d13, [sp, #160]
    e1b4:	stp	d14, d15, [sp, #176]
    e1b8:	cbnz	x1, e200 <_Unwind_Resume_or_Rethrow@@GCC_3.3+0x88>
    e1bc:	bl	2ad0 <_Unwind_RaiseException@plt>
    e1c0:	mov	x4, #0x0                   	// #0
    e1c4:	ldp	x29, x30, [sp]
    e1c8:	ldp	x0, x1, [sp, #16]
    e1cc:	ldp	x2, x3, [sp, #32]
    e1d0:	ldp	x19, x20, [sp, #48]
    e1d4:	ldp	x21, x22, [sp, #64]
    e1d8:	ldp	x23, x24, [sp, #80]
    e1dc:	ldp	x25, x26, [sp, #96]
    e1e0:	ldp	x27, x28, [sp, #112]
    e1e4:	ldp	d8, d9, [sp, #128]
    e1e8:	ldp	d10, d11, [sp, #144]
    e1ec:	ldp	d12, d13, [sp, #160]
    e1f0:	ldp	d14, d15, [sp, #176]
    e1f4:	add	sp, sp, #0x850
    e1f8:	add	sp, sp, x4
    e1fc:	ret
    e200:	add	x20, sp, #0xd0
    e204:	mov	x2, x30
    e208:	mov	x0, x20
    e20c:	add	x1, sp, #0x850
    e210:	add	x21, sp, #0x490
    e214:	bl	d798 <_Unwind_GetTextRelBase@@GCC_3.0+0x1840>
    e218:	mov	x1, x20
    e21c:	mov	x2, #0x3c0                 	// #960
    e220:	mov	x0, x21
    e224:	bl	2aa0 <memcpy@plt>
    e228:	mov	x0, x19
    e22c:	mov	x1, x21
    e230:	add	x2, sp, #0xc8
    e234:	bl	db90 <_Unwind_GetTextRelBase@@GCC_3.0+0x1c38>
    e238:	cmp	w0, #0x7
    e23c:	b.ne	e27c <_Unwind_Resume_or_Rethrow@@GCC_3.3+0x104>  // b.any
    e240:	mov	x1, x21
    e244:	mov	x0, x20
    e248:	bl	bcc8 <__enable_execute_stack@@GCC_3.4.2+0x2c0>
    e24c:	mov	x4, x0
    e250:	ldr	x2, [sp, #1040]
    e254:	ldr	x1, [sp, #1960]
    e258:	tbz	x2, #61, e26c <_Unwind_Resume_or_Rethrow@@GCC_3.3+0xf4>
    e25c:	mov	x17, x1
    e260:	ldr	x16, [sp, #992]
    e264:	pacia1716
    e268:	mov	x1, x17
    e26c:	ldr	x0, [sp, #1952]
    e270:	bl	ddc0 <__frame_state_for@@GLIBC_2.0+0x110>
    e274:	str	x1, [x29, #8]
    e278:	b	e1c4 <_Unwind_Resume_or_Rethrow@@GCC_3.3+0x4c>
    e27c:	bl	2c50 <abort@plt>

000000000000e280 <_Unwind_DeleteException@@GCC_3.0>:
    e280:	ldr	x2, [x0, #8]
    e284:	mov	x1, x0
    e288:	cbz	x2, e298 <_Unwind_DeleteException@@GCC_3.0+0x18>
    e28c:	mov	x16, x2
    e290:	mov	w0, #0x1                   	// #1
    e294:	br	x16
    e298:	ret
    e29c:	nop

000000000000e2a0 <_Unwind_Backtrace@@GCC_3.3>:
    e2a0:	sub	sp, sp, #0xae0
    e2a4:	mov	x2, x30
    e2a8:	stp	x29, x30, [sp]
    e2ac:	mov	x29, sp
    e2b0:	stp	x19, x20, [sp, #16]
    e2b4:	add	x20, sp, #0xa0
    e2b8:	stp	x21, x22, [sp, #32]
    e2bc:	mov	x22, x1
    e2c0:	add	x21, sp, #0x460
    e2c4:	add	x1, sp, #0xae0
    e2c8:	stp	x23, x24, [sp, #48]
    e2cc:	mov	x23, x0
    e2d0:	mov	x0, x20
    e2d4:	stp	x25, x26, [sp, #64]
    e2d8:	stp	x27, x28, [sp, #80]
    e2dc:	stp	d8, d9, [sp, #96]
    e2e0:	stp	d10, d11, [sp, #112]
    e2e4:	stp	d12, d13, [sp, #128]
    e2e8:	stp	d14, d15, [sp, #144]
    e2ec:	bl	d798 <_Unwind_GetTextRelBase@@GCC_3.0+0x1840>
    e2f0:	b	e310 <_Unwind_Backtrace@@GCC_3.3+0x70>
    e2f4:	blr	x23
    e2f8:	cbnz	w0, e334 <_Unwind_Backtrace@@GCC_3.3+0x94>
    e2fc:	cmp	w19, #0x5
    e300:	b.eq	e338 <_Unwind_Backtrace@@GCC_3.3+0x98>  // b.none
    e304:	mov	x1, x21
    e308:	mov	x0, x20
    e30c:	bl	d9e8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a90>
    e310:	mov	x1, x21
    e314:	mov	x0, x20
    e318:	bl	c778 <_Unwind_GetTextRelBase@@GCC_3.0+0x820>
    e31c:	mov	w19, w0
    e320:	cmp	w0, #0x0
    e324:	mov	x1, x22
    e328:	mov	x0, x20
    e32c:	ccmp	w19, #0x5, #0x4, ne  // ne = any
    e330:	b.eq	e2f4 <_Unwind_Backtrace@@GCC_3.3+0x54>  // b.none
    e334:	mov	w19, #0x3                   	// #3
    e338:	mov	w0, w19
    e33c:	ldp	x29, x30, [sp]
    e340:	ldp	x19, x20, [sp, #16]
    e344:	ldp	x21, x22, [sp, #32]
    e348:	ldp	x23, x24, [sp, #48]
    e34c:	ldp	x25, x26, [sp, #64]
    e350:	ldp	x27, x28, [sp, #80]
    e354:	ldp	d8, d9, [sp, #96]
    e358:	ldp	d10, d11, [sp, #112]
    e35c:	ldp	d12, d13, [sp, #128]
    e360:	ldp	d14, d15, [sp, #144]
    e364:	add	sp, sp, #0xae0
    e368:	ret
    e36c:	nop
    e370:	ldr	x3, [x1, #8]
    e374:	mov	w4, #0x1                   	// #1
    e378:	ldr	x1, [x2, #8]
    e37c:	cmp	x3, x1
    e380:	csetm	w0, cc  // cc = lo, ul, last
    e384:	csel	w0, w0, w4, ls  // ls = plast
    e388:	ret
    e38c:	nop
    e390:	stp	x29, x30, [sp, #-112]!
    e394:	mov	x29, sp
    e398:	stp	x21, x22, [sp, #32]
    e39c:	lsl	w21, w3, #1
    e3a0:	stp	x25, x26, [sp, #64]
    e3a4:	add	w25, w21, #0x1
    e3a8:	cmp	w25, w4
    e3ac:	b.ge	e484 <_Unwind_Backtrace@@GCC_3.3+0x1e4>  // b.tcont
    e3b0:	mov	w22, w3
    e3b4:	stp	x19, x20, [sp, #16]
    e3b8:	mov	x20, x2
    e3bc:	stp	x23, x24, [sp, #48]
    e3c0:	mov	w23, w4
    e3c4:	mov	x24, x1
    e3c8:	stp	x27, x28, [sp, #80]
    e3cc:	mov	x27, x0
    e3d0:	b	e428 <_Unwind_Backtrace@@GCC_3.3+0x188>
    e3d4:	ldr	x2, [x20, x26]
    e3d8:	blr	x24
    e3dc:	ldr	x3, [sp, #104]
    e3e0:	tbnz	w0, #31, e494 <_Unwind_Backtrace@@GCC_3.3+0x1f4>
    e3e4:	ldr	x1, [x20, x28, lsl #3]
    e3e8:	mov	w21, w25
    e3ec:	sxtw	x26, w22
    e3f0:	mov	x2, x1
    e3f4:	mov	w22, w21
    e3f8:	mov	x0, x27
    e3fc:	lsl	w21, w21, #1
    e400:	ldr	x1, [x20, x26, lsl #3]
    e404:	blr	x24
    e408:	tbz	w0, #31, e478 <_Unwind_Backtrace@@GCC_3.3+0x1d8>
    e40c:	ldr	x1, [x19]
    e410:	add	w25, w21, #0x1
    e414:	ldr	x0, [x20, x26, lsl #3]
    e418:	str	x1, [x20, x26, lsl #3]
    e41c:	str	x0, [x19]
    e420:	cmp	w23, w25
    e424:	b.le	e478 <_Unwind_Backtrace@@GCC_3.3+0x1d8>
    e428:	sbfiz	x19, x25, #3, #32
    e42c:	sxtw	x28, w25
    e430:	add	x26, x19, #0x8
    e434:	add	w21, w25, #0x1
    e438:	add	x3, x20, x26
    e43c:	str	x3, [sp, #104]
    e440:	cmp	w21, w23
    e444:	add	x19, x20, x19
    e448:	mov	x0, x27
    e44c:	ldr	x1, [x20, x28, lsl #3]
    e450:	b.lt	e3d4 <_Unwind_Backtrace@@GCC_3.3+0x134>  // b.tstop
    e454:	sxtw	x26, w22
    e458:	mov	x2, x1
    e45c:	mov	w21, w25
    e460:	mov	x0, x27
    e464:	mov	w22, w21
    e468:	ldr	x1, [x20, x26, lsl #3]
    e46c:	lsl	w21, w21, #1
    e470:	blr	x24
    e474:	tbnz	w0, #31, e40c <_Unwind_Backtrace@@GCC_3.3+0x16c>
    e478:	ldp	x19, x20, [sp, #16]
    e47c:	ldp	x23, x24, [sp, #48]
    e480:	ldp	x27, x28, [sp, #80]
    e484:	ldp	x21, x22, [sp, #32]
    e488:	ldp	x25, x26, [sp, #64]
    e48c:	ldp	x29, x30, [sp], #112
    e490:	ret
    e494:	mov	x19, x3
    e498:	ldr	x1, [x20, x26]
    e49c:	b	e3ec <_Unwind_Backtrace@@GCC_3.3+0x14c>
    e4a0:	stp	x29, x30, [sp, #-80]!
    e4a4:	mov	x29, sp
    e4a8:	stp	x19, x20, [sp, #16]
    e4ac:	ldr	x19, [x2, #8]
    e4b0:	stp	x21, x22, [sp, #32]
    e4b4:	mov	x22, x2
    e4b8:	stp	x23, x24, [sp, #48]
    e4bc:	add	x21, x2, #0x10
    e4c0:	lsr	x20, x19, #1
    e4c4:	mov	x23, x0
    e4c8:	mov	x24, x1
    e4cc:	subs	w20, w20, #0x1
    e4d0:	b.mi	e508 <_Unwind_Backtrace@@GCC_3.3+0x268>  // b.first
    e4d4:	str	x25, [sp, #64]
    e4d8:	mov	w25, w19
    e4dc:	nop
    e4e0:	mov	w3, w20
    e4e4:	mov	w4, w25
    e4e8:	mov	x2, x21
    e4ec:	sub	w20, w20, #0x1
    e4f0:	mov	x1, x24
    e4f4:	mov	x0, x23
    e4f8:	bl	e390 <_Unwind_Backtrace@@GCC_3.3+0xf0>
    e4fc:	cmn	w20, #0x1
    e500:	b.ne	e4e0 <_Unwind_Backtrace@@GCC_3.3+0x240>  // b.any
    e504:	ldr	x25, [sp, #64]
    e508:	sub	w19, w19, #0x1
    e50c:	cmp	w19, #0x0
    e510:	sxtw	x19, w19
    e514:	b.le	e54c <_Unwind_Backtrace@@GCC_3.3+0x2ac>
    e518:	ldr	x1, [x21, x19, lsl #3]
    e51c:	mov	w4, w19
    e520:	ldr	x0, [x22, #16]
    e524:	str	x1, [x22, #16]
    e528:	str	x0, [x21, x19, lsl #3]
    e52c:	mov	x2, x21
    e530:	sub	x19, x19, #0x1
    e534:	mov	x1, x24
    e538:	mov	x0, x23
    e53c:	mov	w3, #0x0                   	// #0
    e540:	bl	e390 <_Unwind_Backtrace@@GCC_3.3+0xf0>
    e544:	cmp	w19, #0x0
    e548:	b.gt	e518 <_Unwind_Backtrace@@GCC_3.3+0x278>
    e54c:	ldp	x19, x20, [sp, #16]
    e550:	ldp	x21, x22, [sp, #32]
    e554:	ldp	x23, x24, [sp, #48]
    e558:	ldp	x29, x30, [sp], #80
    e55c:	ret
    e560:	and	w0, w0, #0xff
    e564:	cmp	w0, #0xff
    e568:	b.eq	e5b8 <_Unwind_Backtrace@@GCC_3.3+0x318>  // b.none
    e56c:	and	w1, w0, #0x7
    e570:	cmp	w1, #0x2
    e574:	b.eq	e5b0 <_Unwind_Backtrace@@GCC_3.3+0x310>  // b.none
    e578:	b.ls	e5a4 <_Unwind_Backtrace@@GCC_3.3+0x304>  // b.plast
    e57c:	cmp	w1, #0x3
    e580:	mov	w0, #0x4                   	// #4
    e584:	b.ne	e58c <_Unwind_Backtrace@@GCC_3.3+0x2ec>  // b.any
    e588:	ret
    e58c:	cmp	w1, w0
    e590:	mov	w0, #0x8                   	// #8
    e594:	b.eq	e588 <_Unwind_Backtrace@@GCC_3.3+0x2e8>  // b.none
    e598:	stp	x29, x30, [sp, #-16]!
    e59c:	mov	x29, sp
    e5a0:	bl	2c50 <abort@plt>
    e5a4:	mov	w0, #0x8                   	// #8
    e5a8:	cbnz	w1, e598 <_Unwind_Backtrace@@GCC_3.3+0x2f8>
    e5ac:	ret
    e5b0:	mov	w0, w1
    e5b4:	ret
    e5b8:	mov	w0, #0x0                   	// #0
    e5bc:	ret
    e5c0:	and	w5, w0, #0xff
    e5c4:	cmp	w5, #0x50
    e5c8:	b.eq	e6e0 <_Unwind_Backtrace@@GCC_3.3+0x440>  // b.none
    e5cc:	and	w4, w5, #0xf
    e5d0:	cmp	w4, #0x4
    e5d4:	b.eq	e5f0 <_Unwind_Backtrace@@GCC_3.3+0x350>  // b.none
    e5d8:	b.ls	e604 <_Unwind_Backtrace@@GCC_3.3+0x364>  // b.plast
    e5dc:	cmp	w4, #0xb
    e5e0:	b.eq	e704 <_Unwind_Backtrace@@GCC_3.3+0x464>  // b.none
    e5e4:	b.ls	e660 <_Unwind_Backtrace@@GCC_3.3+0x3c0>  // b.plast
    e5e8:	cmp	w4, #0xc
    e5ec:	b.ne	e714 <_Unwind_Backtrace@@GCC_3.3+0x474>  // b.any
    e5f0:	mov	x0, x2
    e5f4:	ldr	x4, [x0], #8
    e5f8:	cbnz	x4, e6c0 <_Unwind_Backtrace@@GCC_3.3+0x420>
    e5fc:	str	x4, [x3]
    e600:	ret
    e604:	cmp	w4, #0x2
    e608:	b.eq	e6f4 <_Unwind_Backtrace@@GCC_3.3+0x454>  // b.none
    e60c:	b.ls	e628 <_Unwind_Backtrace@@GCC_3.3+0x388>  // b.plast
    e610:	cmp	w4, #0x3
    e614:	b.ne	e714 <_Unwind_Backtrace@@GCC_3.3+0x474>  // b.any
    e618:	mov	x0, x2
    e61c:	ldr	w4, [x0], #4
    e620:	cbz	x4, e5fc <_Unwind_Backtrace@@GCC_3.3+0x35c>
    e624:	b	e6c0 <_Unwind_Backtrace@@GCC_3.3+0x420>
    e628:	cbz	w4, e5f0 <_Unwind_Backtrace@@GCC_3.3+0x350>
    e62c:	cmp	w4, #0x1
    e630:	b.ne	e714 <_Unwind_Backtrace@@GCC_3.3+0x474>  // b.any
    e634:	mov	x0, x2
    e638:	mov	x4, #0x0                   	// #0
    e63c:	mov	w7, #0x0                   	// #0
    e640:	ldrb	w8, [x0], #1
    e644:	and	x6, x8, #0x7f
    e648:	lsl	x6, x6, x7
    e64c:	add	w7, w7, #0x7
    e650:	orr	x4, x4, x6
    e654:	tbnz	w8, #7, e640 <_Unwind_Backtrace@@GCC_3.3+0x3a0>
    e658:	cbz	x4, e5fc <_Unwind_Backtrace@@GCC_3.3+0x35c>
    e65c:	b	e6c0 <_Unwind_Backtrace@@GCC_3.3+0x420>
    e660:	cmp	w4, #0x9
    e664:	b.eq	e680 <_Unwind_Backtrace@@GCC_3.3+0x3e0>  // b.none
    e668:	cmp	w4, #0xa
    e66c:	b.ne	e714 <_Unwind_Backtrace@@GCC_3.3+0x474>  // b.any
    e670:	mov	x0, x2
    e674:	ldrsh	x4, [x0], #2
    e678:	cbz	x4, e5fc <_Unwind_Backtrace@@GCC_3.3+0x35c>
    e67c:	b	e6c0 <_Unwind_Backtrace@@GCC_3.3+0x420>
    e680:	mov	x0, x2
    e684:	mov	x4, #0x0                   	// #0
    e688:	mov	w7, #0x0                   	// #0
    e68c:	ldrb	w8, [x0], #1
    e690:	and	x6, x8, #0x7f
    e694:	lsl	x6, x6, x7
    e698:	add	w7, w7, #0x7
    e69c:	orr	x4, x4, x6
    e6a0:	tbnz	w8, #7, e68c <_Unwind_Backtrace@@GCC_3.3+0x3ec>
    e6a4:	cmp	w7, #0x3f
    e6a8:	b.hi	e5f8 <_Unwind_Backtrace@@GCC_3.3+0x358>  // b.pmore
    e6ac:	tbz	w8, #6, e5f8 <_Unwind_Backtrace@@GCC_3.3+0x358>
    e6b0:	mov	x6, #0xffffffffffffffff    	// #-1
    e6b4:	lsl	x7, x6, x7
    e6b8:	orr	x4, x4, x7
    e6bc:	nop
    e6c0:	and	w6, w5, #0x70
    e6c4:	cmp	w6, #0x10
    e6c8:	csel	x1, x2, x1, eq  // eq = none
    e6cc:	add	x4, x4, x1
    e6d0:	tbz	w5, #7, e5fc <_Unwind_Backtrace@@GCC_3.3+0x35c>
    e6d4:	ldr	x4, [x4]
    e6d8:	str	x4, [x3]
    e6dc:	ret
    e6e0:	add	x0, x2, #0x7
    e6e4:	and	x0, x0, #0xfffffffffffffff8
    e6e8:	ldr	x4, [x0], #8
    e6ec:	str	x4, [x3]
    e6f0:	ret
    e6f4:	mov	x0, x2
    e6f8:	ldrh	w4, [x0], #2
    e6fc:	cbz	x4, e5fc <_Unwind_Backtrace@@GCC_3.3+0x35c>
    e700:	b	e6c0 <_Unwind_Backtrace@@GCC_3.3+0x420>
    e704:	mov	x0, x2
    e708:	ldrsw	x4, [x0], #4
    e70c:	cbz	x4, e5fc <_Unwind_Backtrace@@GCC_3.3+0x35c>
    e710:	b	e6c0 <_Unwind_Backtrace@@GCC_3.3+0x420>
    e714:	stp	x29, x30, [sp, #-16]!
    e718:	mov	x29, sp
    e71c:	bl	2c50 <abort@plt>
    e720:	stp	x29, x30, [sp, #-48]!
    e724:	mov	x29, sp
    e728:	stp	x19, x20, [sp, #16]
    e72c:	mov	x20, x0
    e730:	add	x19, x0, #0x9
    e734:	mov	x0, x19
    e738:	bl	2ac0 <strlen@plt>
    e73c:	ldrb	w3, [x20, #8]
    e740:	add	x0, x0, #0x1
    e744:	add	x2, x19, x0
    e748:	cmp	w3, #0x3
    e74c:	b.hi	e818 <_Unwind_Backtrace@@GCC_3.3+0x578>  // b.pmore
    e750:	ldrb	w0, [x20, #9]
    e754:	cmp	w0, #0x7a
    e758:	b.eq	e76c <_Unwind_Backtrace@@GCC_3.3+0x4cc>  // b.none
    e75c:	mov	w0, #0x0                   	// #0
    e760:	ldp	x19, x20, [sp, #16]
    e764:	ldp	x29, x30, [sp], #48
    e768:	ret
    e76c:	ldrsb	w1, [x2], #1
    e770:	tbnz	w1, #31, e76c <_Unwind_Backtrace@@GCC_3.3+0x4cc>
    e774:	nop
    e778:	mov	x0, x2
    e77c:	ldrsb	w1, [x2], #1
    e780:	tbnz	w1, #31, e778 <_Unwind_Backtrace@@GCC_3.3+0x4d8>
    e784:	cmp	w3, #0x1
    e788:	b.eq	e810 <_Unwind_Backtrace@@GCC_3.3+0x570>  // b.none
    e78c:	nop
    e790:	ldrsb	w0, [x2], #1
    e794:	tbnz	w0, #31, e790 <_Unwind_Backtrace@@GCC_3.3+0x4f0>
    e798:	add	x19, x20, #0xa
    e79c:	nop
    e7a0:	ldrsb	w1, [x2], #1
    e7a4:	tbnz	w1, #31, e7a0 <_Unwind_Backtrace@@GCC_3.3+0x500>
    e7a8:	ldrb	w0, [x20, #10]
    e7ac:	add	x20, sp, #0x28
    e7b0:	cmp	w0, #0x52
    e7b4:	b.ne	e7d4 <_Unwind_Backtrace@@GCC_3.3+0x534>  // b.any
    e7b8:	b	e800 <_Unwind_Backtrace@@GCC_3.3+0x560>
    e7bc:	add	x2, x2, #0x1
    e7c0:	cmp	w0, #0x4c
    e7c4:	b.ne	e75c <_Unwind_Backtrace@@GCC_3.3+0x4bc>  // b.any
    e7c8:	ldrb	w0, [x19, #1]!
    e7cc:	cmp	w0, #0x52
    e7d0:	b.eq	e800 <_Unwind_Backtrace@@GCC_3.3+0x560>  // b.none
    e7d4:	cmp	w0, #0x50
    e7d8:	b.ne	e7bc <_Unwind_Backtrace@@GCC_3.3+0x51c>  // b.any
    e7dc:	ldrb	w0, [x2], #1
    e7e0:	mov	x3, x20
    e7e4:	mov	x1, #0x0                   	// #0
    e7e8:	and	w0, w0, #0x7f
    e7ec:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    e7f0:	mov	x2, x0
    e7f4:	ldrb	w0, [x19, #1]!
    e7f8:	cmp	w0, #0x52
    e7fc:	b.ne	e7d4 <_Unwind_Backtrace@@GCC_3.3+0x534>  // b.any
    e800:	ldrb	w0, [x2]
    e804:	ldp	x19, x20, [sp, #16]
    e808:	ldp	x29, x30, [sp], #48
    e80c:	ret
    e810:	add	x2, x0, #0x2
    e814:	b	e798 <_Unwind_Backtrace@@GCC_3.3+0x4f8>
    e818:	ldrb	w1, [x19, x0]
    e81c:	mov	w0, #0xff                  	// #255
    e820:	cmp	w1, #0x8
    e824:	b.ne	e760 <_Unwind_Backtrace@@GCC_3.3+0x4c0>  // b.any
    e828:	ldrb	w1, [x2, #1]
    e82c:	cbnz	w1, e760 <_Unwind_Backtrace@@GCC_3.3+0x4c0>
    e830:	add	x2, x2, #0x2
    e834:	b	e750 <_Unwind_Backtrace@@GCC_3.3+0x4b0>
    e838:	and	w0, w0, #0xff
    e83c:	cmp	w0, #0xff
    e840:	b.eq	e878 <_Unwind_Backtrace@@GCC_3.3+0x5d8>  // b.none
    e844:	and	w3, w0, #0x70
    e848:	cmp	w3, #0x20
    e84c:	b.eq	e890 <_Unwind_Backtrace@@GCC_3.3+0x5f0>  // b.none
    e850:	b.ls	e864 <_Unwind_Backtrace@@GCC_3.3+0x5c4>  // b.plast
    e854:	cmp	w3, #0x30
    e858:	b.ne	e880 <_Unwind_Backtrace@@GCC_3.3+0x5e0>  // b.any
    e85c:	ldr	x0, [x2]
    e860:	ret
    e864:	tst	w0, #0x60
    e868:	b.eq	e878 <_Unwind_Backtrace@@GCC_3.3+0x5d8>  // b.none
    e86c:	stp	x29, x30, [sp, #-16]!
    e870:	mov	x29, sp
    e874:	bl	2c50 <abort@plt>
    e878:	mov	x0, #0x0                   	// #0
    e87c:	ret
    e880:	cmp	w3, #0x50
    e884:	mov	x0, #0x0                   	// #0
    e888:	b.ne	e86c <_Unwind_Backtrace@@GCC_3.3+0x5cc>  // b.any
    e88c:	ret
    e890:	ldr	x0, [x1]
    e894:	ret
    e898:	stp	x29, x30, [sp, #-64]!
    e89c:	mov	x29, sp
    e8a0:	stp	x21, x22, [sp, #32]
    e8a4:	mov	x22, x2
    e8a8:	ldrh	w21, [x0, #32]
    e8ac:	add	x2, x0, #0x10
    e8b0:	stp	x19, x20, [sp, #16]
    e8b4:	mov	x19, x0
    e8b8:	ubfx	x21, x21, #3, #8
    e8bc:	mov	x20, x1
    e8c0:	add	x1, x0, #0x8
    e8c4:	mov	w0, w21
    e8c8:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    e8cc:	add	x2, x20, #0x8
    e8d0:	mov	x20, x0
    e8d4:	mov	x1, x20
    e8d8:	add	x3, sp, #0x30
    e8dc:	mov	w0, w21
    e8e0:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    e8e4:	ldrh	w0, [x19, #32]
    e8e8:	add	x2, x22, #0x8
    e8ec:	mov	x1, x20
    e8f0:	add	x3, sp, #0x38
    e8f4:	ubfx	x0, x0, #3, #8
    e8f8:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    e8fc:	ldp	x2, x1, [sp, #48]
    e900:	mov	w3, #0x1                   	// #1
    e904:	ldp	x19, x20, [sp, #16]
    e908:	ldp	x21, x22, [sp, #32]
    e90c:	cmp	x2, x1
    e910:	csetm	w0, cc  // cc = lo, ul, last
    e914:	csel	w0, w0, w3, ls  // ls = plast
    e918:	ldp	x29, x30, [sp], #64
    e91c:	ret
    e920:	stp	x29, x30, [sp, #-128]!
    e924:	mov	x29, sp
    e928:	stp	x21, x22, [sp, #32]
    e92c:	add	x22, x0, #0x8
    e930:	stp	x23, x24, [sp, #48]
    e934:	add	x23, x0, #0x10
    e938:	stp	x25, x26, [sp, #64]
    e93c:	mov	x26, x0
    e940:	ldrh	w0, [x0, #32]
    e944:	stp	x19, x20, [sp, #16]
    e948:	mov	x19, x1
    e94c:	mov	x20, x2
    e950:	ubfx	x24, x0, #3, #8
    e954:	mov	x1, x22
    e958:	mov	x2, x23
    e95c:	mov	x0, x24
    e960:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    e964:	ldr	w1, [x19]
    e968:	cbz	w1, e9fc <_Unwind_Backtrace@@GCC_3.3+0x75c>
    e96c:	stp	x27, x28, [sp, #80]
    e970:	add	x27, sp, #0x70
    e974:	mov	x25, x0
    e978:	mov	x21, #0x0                   	// #0
    e97c:	add	x0, sp, #0x78
    e980:	str	x0, [sp, #104]
    e984:	nop
    e988:	ldr	w1, [x19, #4]
    e98c:	cbz	w1, e9e4 <_Unwind_Backtrace@@GCC_3.3+0x744>
    e990:	ldrb	w0, [x26, #32]
    e994:	tbz	w0, #2, e9c8 <_Unwind_Backtrace@@GCC_3.3+0x728>
    e998:	add	x28, x19, #0x4
    e99c:	sub	x28, x28, w1, sxtw
    e9a0:	cmp	x28, x21
    e9a4:	b.eq	e9c8 <_Unwind_Backtrace@@GCC_3.3+0x728>  // b.none
    e9a8:	mov	x0, x28
    e9ac:	bl	e720 <_Unwind_Backtrace@@GCC_3.3+0x480>
    e9b0:	mov	x2, x23
    e9b4:	mov	w24, w0
    e9b8:	mov	x1, x22
    e9bc:	mov	x21, x28
    e9c0:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    e9c4:	mov	x25, x0
    e9c8:	cbnz	w24, ea18 <_Unwind_Backtrace@@GCC_3.3+0x778>
    e9cc:	ldp	x1, x0, [x19, #8]
    e9d0:	stp	x1, x0, [sp, #112]
    e9d4:	cbz	x1, e9e4 <_Unwind_Backtrace@@GCC_3.3+0x744>
    e9d8:	sub	x1, x20, x1
    e9dc:	cmp	x1, x0
    e9e0:	b.cc	ea80 <_Unwind_Backtrace@@GCC_3.3+0x7e0>  // b.lo, b.ul, b.last
    e9e4:	ldr	w1, [x19]
    e9e8:	add	x1, x1, #0x4
    e9ec:	add	x19, x19, x1
    e9f0:	ldr	w1, [x19]
    e9f4:	cbnz	w1, e988 <_Unwind_Backtrace@@GCC_3.3+0x6e8>
    e9f8:	ldp	x27, x28, [sp, #80]
    e9fc:	mov	x0, #0x0                   	// #0
    ea00:	ldp	x19, x20, [sp, #16]
    ea04:	ldp	x21, x22, [sp, #32]
    ea08:	ldp	x23, x24, [sp, #48]
    ea0c:	ldp	x25, x26, [sp, #64]
    ea10:	ldp	x29, x30, [sp], #128
    ea14:	ret
    ea18:	and	w28, w24, #0xff
    ea1c:	mov	x3, x27
    ea20:	add	x2, x19, #0x8
    ea24:	mov	x1, x25
    ea28:	mov	w0, w28
    ea2c:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    ea30:	ldr	x3, [sp, #104]
    ea34:	mov	x2, x0
    ea38:	mov	x1, #0x0                   	// #0
    ea3c:	and	w0, w28, #0xf
    ea40:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    ea44:	mov	w0, w28
    ea48:	bl	e560 <_Unwind_Backtrace@@GCC_3.3+0x2c0>
    ea4c:	lsl	w2, w0, #3
    ea50:	cmp	w0, #0x8
    ea54:	mov	x0, #0x1                   	// #1
    ea58:	ldr	x1, [sp, #112]
    ea5c:	lsl	x2, x0, x2
    ea60:	sub	x2, x2, #0x1
    ea64:	csinv	x2, x2, xzr, cc  // cc = lo, ul, last
    ea68:	tst	x1, x2
    ea6c:	b.eq	e9e4 <_Unwind_Backtrace@@GCC_3.3+0x744>  // b.none
    ea70:	ldr	x0, [sp, #120]
    ea74:	sub	x1, x20, x1
    ea78:	cmp	x1, x0
    ea7c:	b.cs	e9e4 <_Unwind_Backtrace@@GCC_3.3+0x744>  // b.hs, b.nlast
    ea80:	mov	x0, x19
    ea84:	ldp	x19, x20, [sp, #16]
    ea88:	ldp	x21, x22, [sp, #32]
    ea8c:	ldp	x23, x24, [sp, #48]
    ea90:	ldp	x25, x26, [sp, #64]
    ea94:	ldp	x27, x28, [sp, #80]
    ea98:	ldp	x29, x30, [sp], #128
    ea9c:	ret
    eaa0:	stp	x29, x30, [sp, #-80]!
    eaa4:	add	x3, x1, #0x4
    eaa8:	mov	x29, sp
    eaac:	stp	x21, x22, [sp, #32]
    eab0:	mov	x21, x1
    eab4:	ldrsw	x1, [x1, #4]
    eab8:	stp	x19, x20, [sp, #16]
    eabc:	mov	x20, x2
    eac0:	add	x19, x0, #0x10
    eac4:	str	x23, [sp, #48]
    eac8:	add	x23, x0, #0x8
    eacc:	sub	x0, x3, x1
    ead0:	bl	e720 <_Unwind_Backtrace@@GCC_3.3+0x480>
    ead4:	and	w22, w0, #0xff
    ead8:	mov	x2, x19
    eadc:	mov	x1, x23
    eae0:	mov	w0, w22
    eae4:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    eae8:	mov	x1, x0
    eaec:	add	x3, sp, #0x40
    eaf0:	add	x2, x21, #0x8
    eaf4:	mov	w0, w22
    eaf8:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    eafc:	add	x1, x20, #0x4
    eb00:	ldrsw	x0, [x20, #4]
    eb04:	sub	x0, x1, x0
    eb08:	bl	e720 <_Unwind_Backtrace@@GCC_3.3+0x480>
    eb0c:	mov	x2, x19
    eb10:	and	w19, w0, #0xff
    eb14:	mov	x1, x23
    eb18:	mov	w0, w19
    eb1c:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    eb20:	mov	x1, x0
    eb24:	add	x2, x20, #0x8
    eb28:	add	x3, sp, #0x48
    eb2c:	mov	w0, w19
    eb30:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    eb34:	ldp	x2, x1, [sp, #64]
    eb38:	mov	w3, #0x1                   	// #1
    eb3c:	ldp	x19, x20, [sp, #16]
    eb40:	ldp	x21, x22, [sp, #32]
    eb44:	cmp	x2, x1
    eb48:	csetm	w0, cc  // cc = lo, ul, last
    eb4c:	csel	w0, w0, w3, ls  // ls = plast
    eb50:	ldr	x23, [sp, #48]
    eb54:	ldp	x29, x30, [sp], #80
    eb58:	ret
    eb5c:	nop
    eb60:	stp	x29, x30, [sp, #-112]!
    eb64:	mov	x29, sp
    eb68:	stp	x21, x22, [sp, #32]
    eb6c:	mov	x21, x0
    eb70:	ldr	w0, [x1]
    eb74:	cbz	w0, ecd8 <_Unwind_Backtrace@@GCC_3.3+0xa38>
    eb78:	stp	x19, x20, [sp, #16]
    eb7c:	mov	x19, x1
    eb80:	mov	w20, #0x0                   	// #0
    eb84:	stp	x25, x26, [sp, #64]
    eb88:	add	x25, sp, #0x68
    eb8c:	add	x26, x21, #0x8
    eb90:	stp	x27, x28, [sp, #80]
    eb94:	add	x27, x21, #0x10
    eb98:	mov	x22, #0x0                   	// #0
    eb9c:	mov	x4, #0x0                   	// #0
    eba0:	stp	x23, x24, [sp, #48]
    eba4:	mov	x23, #0x0                   	// #0
    eba8:	ldr	w2, [x19, #4]
    ebac:	cbz	w2, ec74 <_Unwind_Backtrace@@GCC_3.3+0x9d4>
    ebb0:	add	x28, x19, #0x4
    ebb4:	and	w24, w20, #0xff
    ebb8:	sub	x28, x28, w2, sxtw
    ebbc:	cmp	x28, x4
    ebc0:	b.eq	ec18 <_Unwind_Backtrace@@GCC_3.3+0x978>  // b.none
    ebc4:	mov	x0, x28
    ebc8:	bl	e720 <_Unwind_Backtrace@@GCC_3.3+0x480>
    ebcc:	mov	w20, w0
    ebd0:	cmp	w0, #0xff
    ebd4:	b.eq	ecb4 <_Unwind_Backtrace@@GCC_3.3+0xa14>  // b.none
    ebd8:	and	w24, w0, #0xff
    ebdc:	mov	x2, x27
    ebe0:	mov	w0, w24
    ebe4:	mov	x1, x26
    ebe8:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    ebec:	mov	x23, x0
    ebf0:	ldrh	w2, [x21, #32]
    ebf4:	and	w0, w2, #0x7f8
    ebf8:	cmp	w0, #0x7f8
    ebfc:	b.eq	eca8 <_Unwind_Backtrace@@GCC_3.3+0xa08>  // b.none
    ec00:	ubfx	x2, x2, #3, #8
    ec04:	cmp	w2, w20
    ec08:	b.eq	ec18 <_Unwind_Backtrace@@GCC_3.3+0x978>  // b.none
    ec0c:	ldrb	w0, [x21, #32]
    ec10:	orr	w0, w0, #0x4
    ec14:	strb	w0, [x21, #32]
    ec18:	mov	x3, x25
    ec1c:	add	x2, x19, #0x8
    ec20:	mov	x1, x23
    ec24:	mov	w0, w24
    ec28:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    ec2c:	mov	w0, w24
    ec30:	bl	e560 <_Unwind_Backtrace@@GCC_3.3+0x2c0>
    ec34:	lsl	w2, w0, #3
    ec38:	cmp	w0, #0x8
    ec3c:	mov	x0, #0x1                   	// #1
    ec40:	ldr	x3, [sp, #104]
    ec44:	lsl	x2, x0, x2
    ec48:	sub	x2, x2, #0x1
    ec4c:	mov	x4, x28
    ec50:	csinv	x2, x2, xzr, cc  // cc = lo, ul, last
    ec54:	tst	x3, x2
    ec58:	b.eq	ec74 <_Unwind_Backtrace@@GCC_3.3+0x9d4>  // b.none
    ec5c:	ldr	x0, [x21]
    ec60:	add	x22, x22, #0x1
    ec64:	cmp	x0, x3
    ec68:	b.ls	ec70 <_Unwind_Backtrace@@GCC_3.3+0x9d0>  // b.plast
    ec6c:	str	x3, [x21]
    ec70:	mov	x4, x28
    ec74:	ldr	w2, [x19]
    ec78:	add	x2, x2, #0x4
    ec7c:	add	x19, x19, x2
    ec80:	ldr	w0, [x19]
    ec84:	cbnz	w0, eba8 <_Unwind_Backtrace@@GCC_3.3+0x908>
    ec88:	ldp	x19, x20, [sp, #16]
    ec8c:	ldp	x23, x24, [sp, #48]
    ec90:	ldp	x25, x26, [sp, #64]
    ec94:	ldp	x27, x28, [sp, #80]
    ec98:	mov	x0, x22
    ec9c:	ldp	x21, x22, [sp, #32]
    eca0:	ldp	x29, x30, [sp], #112
    eca4:	ret
    eca8:	bfi	w2, w24, #3, #8
    ecac:	strh	w2, [x21, #32]
    ecb0:	b	ec18 <_Unwind_Backtrace@@GCC_3.3+0x978>
    ecb4:	mov	x22, #0xffffffffffffffff    	// #-1
    ecb8:	mov	x0, x22
    ecbc:	ldp	x19, x20, [sp, #16]
    ecc0:	ldp	x21, x22, [sp, #32]
    ecc4:	ldp	x23, x24, [sp, #48]
    ecc8:	ldp	x25, x26, [sp, #64]
    eccc:	ldp	x27, x28, [sp, #80]
    ecd0:	ldp	x29, x30, [sp], #112
    ecd4:	ret
    ecd8:	mov	x22, #0x0                   	// #0
    ecdc:	b	ec98 <_Unwind_Backtrace@@GCC_3.3+0x9f8>
    ece0:	stp	x29, x30, [sp, #-112]!
    ece4:	mov	x29, sp
    ece8:	stp	x21, x22, [sp, #32]
    ecec:	add	x21, x0, #0x8
    ecf0:	add	x22, x0, #0x10
    ecf4:	stp	x27, x28, [sp, #80]
    ecf8:	mov	x28, x0
    ecfc:	ldrh	w0, [x0, #32]
    ed00:	stp	x19, x20, [sp, #16]
    ed04:	mov	x19, x2
    ed08:	mov	x20, x1
    ed0c:	stp	x25, x26, [sp, #64]
    ed10:	ubfx	x26, x0, #3, #8
    ed14:	mov	x2, x22
    ed18:	mov	x1, x21
    ed1c:	mov	x0, x26
    ed20:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    ed24:	ldr	w2, [x19]
    ed28:	cbz	w2, edc0 <_Unwind_Backtrace@@GCC_3.3+0xb20>
    ed2c:	add	x25, sp, #0x68
    ed30:	stp	x23, x24, [sp, #48]
    ed34:	mov	x24, x0
    ed38:	mov	x23, #0x0                   	// #0
    ed3c:	nop
    ed40:	ldr	w2, [x19, #4]
    ed44:	cbz	w2, eda8 <_Unwind_Backtrace@@GCC_3.3+0xb08>
    ed48:	ldrb	w0, [x28, #32]
    ed4c:	tbz	w0, #2, ed80 <_Unwind_Backtrace@@GCC_3.3+0xae0>
    ed50:	add	x27, x19, #0x4
    ed54:	sub	x27, x27, w2, sxtw
    ed58:	cmp	x27, x23
    ed5c:	b.eq	ed80 <_Unwind_Backtrace@@GCC_3.3+0xae0>  // b.none
    ed60:	mov	x0, x27
    ed64:	bl	e720 <_Unwind_Backtrace@@GCC_3.3+0x480>
    ed68:	mov	x2, x22
    ed6c:	mov	w26, w0
    ed70:	mov	x1, x21
    ed74:	mov	x23, x27
    ed78:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    ed7c:	mov	x24, x0
    ed80:	cbnz	w26, edd8 <_Unwind_Backtrace@@GCC_3.3+0xb38>
    ed84:	ldr	x0, [x19, #8]
    ed88:	cbz	x0, eda8 <_Unwind_Backtrace@@GCC_3.3+0xb08>
    ed8c:	ldr	x2, [x20]
    ed90:	cbz	x2, eda8 <_Unwind_Backtrace@@GCC_3.3+0xb08>
    ed94:	ldr	x3, [x2, #8]
    ed98:	add	x0, x3, #0x2
    ed9c:	add	x3, x3, #0x1
    eda0:	str	x3, [x2, #8]
    eda4:	str	x19, [x2, x0, lsl #3]
    eda8:	ldr	w2, [x19]
    edac:	add	x2, x2, #0x4
    edb0:	add	x19, x19, x2
    edb4:	ldr	w2, [x19]
    edb8:	cbnz	w2, ed40 <_Unwind_Backtrace@@GCC_3.3+0xaa0>
    edbc:	ldp	x23, x24, [sp, #48]
    edc0:	ldp	x19, x20, [sp, #16]
    edc4:	ldp	x21, x22, [sp, #32]
    edc8:	ldp	x25, x26, [sp, #64]
    edcc:	ldp	x27, x28, [sp, #80]
    edd0:	ldp	x29, x30, [sp], #112
    edd4:	ret
    edd8:	mov	x3, x25
    eddc:	add	x2, x19, #0x8
    ede0:	mov	x1, x24
    ede4:	and	w27, w26, #0xff
    ede8:	mov	w0, w27
    edec:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    edf0:	mov	w0, w27
    edf4:	bl	e560 <_Unwind_Backtrace@@GCC_3.3+0x2c0>
    edf8:	lsl	w2, w0, #3
    edfc:	cmp	w0, #0x8
    ee00:	mov	x0, #0x1                   	// #1
    ee04:	ldr	x3, [sp, #104]
    ee08:	lsl	x2, x0, x2
    ee0c:	sub	x2, x2, #0x1
    ee10:	csinv	x2, x2, xzr, cc  // cc = lo, ul, last
    ee14:	tst	x2, x3
    ee18:	b.ne	ed8c <_Unwind_Backtrace@@GCC_3.3+0xaec>  // b.any
    ee1c:	b	eda8 <_Unwind_Backtrace@@GCC_3.3+0xb08>
    ee20:	stp	x29, x30, [sp, #-128]!
    ee24:	cmp	x1, #0x2f
    ee28:	mov	x29, sp
    ee2c:	stp	x19, x20, [sp, #16]
    ee30:	mov	x19, x2
    ee34:	ldr	w2, [x2, #40]
    ee38:	ldr	x13, [x0]
    ee3c:	ccmp	w2, #0x0, #0x4, hi  // hi = pmore
    ee40:	ldr	x3, [x0, #16]
    ee44:	b.ne	ef84 <_Unwind_Backtrace@@GCC_3.3+0xce4>  // b.any
    ee48:	cmp	x1, #0x19
    ee4c:	b.ls	ef5c <_Unwind_Backtrace@@GCC_3.3+0xcbc>  // b.plast
    ee50:	mov	x10, #0x0                   	// #0
    ee54:	mov	x15, #0x0                   	// #0
    ee58:	ldrh	w4, [x0, #24]
    ee5c:	cbz	w4, ef74 <_Unwind_Backtrace@@GCC_3.3+0xcd4>
    ee60:	mov	w0, #0x38                  	// #56
    ee64:	mov	w7, #0xe550                	// #58704
    ee68:	mov	x11, #0x0                   	// #0
    ee6c:	mov	x12, #0x0                   	// #0
    ee70:	umaddl	x4, w4, w0, x3
    ee74:	mov	x8, #0x0                   	// #0
    ee78:	mov	x6, #0x0                   	// #0
    ee7c:	mov	x9, #0x0                   	// #0
    ee80:	movk	w7, #0x6474, lsl #16
    ee84:	mov	x14, #0x1                   	// #1
    ee88:	b	eea8 <_Unwind_Backtrace@@GCC_3.3+0xc08>
    ee8c:	cmp	w0, w7
    ee90:	b.eq	ef6c <_Unwind_Backtrace@@GCC_3.3+0xccc>  // b.none
    ee94:	cmp	w0, #0x2
    ee98:	csel	x6, x6, x3, ne  // ne = any
    ee9c:	add	x3, x3, #0x38
    eea0:	cmp	x4, x3
    eea4:	b.eq	eef0 <_Unwind_Backtrace@@GCC_3.3+0xc50>  // b.none
    eea8:	ldr	w0, [x3]
    eeac:	cmp	w0, #0x1
    eeb0:	b.ne	ee8c <_Unwind_Backtrace@@GCC_3.3+0xbec>  // b.any
    eeb4:	ldr	x0, [x3, #16]
    eeb8:	ldr	x5, [x19]
    eebc:	add	x0, x13, x0
    eec0:	cmp	x5, x0
    eec4:	b.cc	ee9c <_Unwind_Backtrace@@GCC_3.3+0xbfc>  // b.lo, b.ul, b.last
    eec8:	ldr	x2, [x3, #40]
    eecc:	add	x3, x3, #0x38
    eed0:	add	x2, x0, x2
    eed4:	cmp	x5, x2
    eed8:	csel	x11, x11, x2, cs  // cs = hs, nlast
    eedc:	csel	x12, x12, x0, cs  // cs = hs, nlast
    eee0:	csel	x8, x8, x14, cs  // cs = hs, nlast
    eee4:	cmp	x4, x3
    eee8:	b.ne	eea8 <_Unwind_Backtrace@@GCC_3.3+0xc08>  // b.any
    eeec:	nop
    eef0:	cbz	x8, ef74 <_Unwind_Backtrace@@GCC_3.3+0xcd4>
    eef4:	cmp	x1, #0x2f
    eef8:	b.ls	ef34 <_Unwind_Backtrace@@GCC_3.3+0xc94>  // b.plast
    eefc:	adrp	x1, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    ef00:	add	x1, x1, #0x230
    ef04:	cmp	x10, #0x0
    ef08:	ccmp	x15, #0x0, #0x4, ne  // ne = any
    ef0c:	ldr	x0, [x1, #8]
    ef10:	b.eq	ef28 <_Unwind_Backtrace@@GCC_3.3+0xc88>  // b.none
    ef14:	ldr	x2, [x10, #40]
    ef18:	str	x2, [x15, #40]
    ef1c:	str	x0, [x10, #40]
    ef20:	mov	x0, x10
    ef24:	str	x10, [x1, #8]
    ef28:	stp	x12, x11, [x0]
    ef2c:	stp	x13, x9, [x0, #16]
    ef30:	str	x6, [x0, #32]
    ef34:	cbz	x9, ef74 <_Unwind_Backtrace@@GCC_3.3+0xcd4>
    ef38:	ldr	x0, [x9, #16]
    ef3c:	add	x20, x13, x0
    ef40:	ldrb	w0, [x13, x0]
    ef44:	cmp	w0, #0x1
    ef48:	b.eq	efe4 <_Unwind_Backtrace@@GCC_3.3+0xd44>  // b.none
    ef4c:	mov	w0, #0x1                   	// #1
    ef50:	ldp	x19, x20, [sp, #16]
    ef54:	ldp	x29, x30, [sp], #128
    ef58:	ret
    ef5c:	mov	w0, #0xffffffff            	// #-1
    ef60:	ldp	x19, x20, [sp, #16]
    ef64:	ldp	x29, x30, [sp], #128
    ef68:	ret
    ef6c:	mov	x9, x3
    ef70:	b	ee9c <_Unwind_Backtrace@@GCC_3.3+0xbfc>
    ef74:	mov	w0, #0x0                   	// #0
    ef78:	ldp	x19, x20, [sp, #16]
    ef7c:	ldp	x29, x30, [sp], #128
    ef80:	ret
    ef84:	ldp	x6, x7, [x0, #32]
    ef88:	adrp	x4, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    ef8c:	adrp	x5, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    ef90:	ldr	x2, [x4, #400]
    ef94:	cmp	x6, x2
    ef98:	b.eq	f0b8 <_Unwind_Backtrace@@GCC_3.3+0xe18>  // b.none
    ef9c:	add	x2, x5, #0x230
    efa0:	str	x6, [x4, #400]
    efa4:	add	x4, x2, #0x40
    efa8:	add	x2, x2, #0x1c0
    efac:	str	x7, [x5, #560]
    efb0:	stp	xzr, xzr, [x4, #-48]
    efb4:	stur	x4, [x4, #-8]
    efb8:	add	x4, x4, #0x30
    efbc:	cmp	x2, x4
    efc0:	b.ne	efb0 <_Unwind_Backtrace@@GCC_3.3+0xd10>  // b.any
    efc4:	add	x5, x5, #0x230
    efc8:	mov	x10, #0x0                   	// #0
    efcc:	add	x2, x5, #0x10
    efd0:	mov	x15, #0x0                   	// #0
    efd4:	str	xzr, [x5, #392]
    efd8:	str	x2, [x5, #8]
    efdc:	str	wzr, [x19, #40]
    efe0:	b	ee58 <_Unwind_Backtrace@@GCC_3.3+0xbb8>
    efe4:	stp	x21, x22, [sp, #32]
    efe8:	add	x22, x19, #0x8
    efec:	mov	x1, x22
    eff0:	stp	x23, x24, [sp, #48]
    eff4:	add	x23, x19, #0x10
    eff8:	mov	x2, x23
    effc:	ldrb	w21, [x20, #1]
    f000:	mov	w0, w21
    f004:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    f008:	add	x3, sp, #0x40
    f00c:	mov	x1, x0
    f010:	add	x2, x20, #0x4
    f014:	mov	w0, w21
    f018:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    f01c:	ldrb	w24, [x20, #2]
    f020:	mov	x21, x0
    f024:	cmp	w24, #0xff
    f028:	b.eq	f038 <_Unwind_Backtrace@@GCC_3.3+0xd98>  // b.none
    f02c:	ldrb	w0, [x20, #3]
    f030:	cmp	w0, #0x3b
    f034:	b.eq	f118 <_Unwind_Backtrace@@GCC_3.3+0xe78>  // b.none
    f038:	ldr	x2, [x19]
    f03c:	mov	x3, #0x4                   	// #4
    f040:	ldp	x5, x4, [x19, #8]
    f044:	add	x0, sp, #0x50
    f048:	ldr	x1, [sp, #64]
    f04c:	stp	xzr, x5, [sp, #80]
    f050:	stp	x4, x1, [sp, #96]
    f054:	str	x3, [sp, #112]
    f058:	bl	e920 <_Unwind_Backtrace@@GCC_3.3+0x680>
    f05c:	str	x0, [x19, #32]
    f060:	cbz	x0, f230 <_Unwind_Backtrace@@GCC_3.3+0xf90>
    f064:	ldrsw	x1, [x0, #4]
    f068:	add	x0, x0, #0x4
    f06c:	sub	x0, x0, x1
    f070:	bl	e720 <_Unwind_Backtrace@@GCC_3.3+0x480>
    f074:	and	w20, w0, #0xff
    f078:	mov	x2, x23
    f07c:	mov	x1, x22
    f080:	mov	w0, w20
    f084:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    f088:	ldr	x2, [x19, #32]
    f08c:	mov	x1, x0
    f090:	add	x3, sp, #0x48
    f094:	mov	w0, w20
    f098:	add	x2, x2, #0x8
    f09c:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    f0a0:	ldr	x1, [sp, #72]
    f0a4:	mov	w0, #0x1                   	// #1
    f0a8:	ldp	x21, x22, [sp, #32]
    f0ac:	ldp	x23, x24, [sp, #48]
    f0b0:	str	x1, [x19, #24]
    f0b4:	b	ef60 <_Unwind_Backtrace@@GCC_3.3+0xcc0>
    f0b8:	ldr	x2, [x5, #560]
    f0bc:	add	x8, x5, #0x230
    f0c0:	cmp	x2, x7
    f0c4:	b.ne	ef9c <_Unwind_Backtrace@@GCC_3.3+0xcfc>  // b.any
    f0c8:	ldr	x7, [x8, #8]
    f0cc:	cbz	x7, ee50 <_Unwind_Backtrace@@GCC_3.3+0xbb0>
    f0d0:	mov	x10, x7
    f0d4:	mov	x15, #0x0                   	// #0
    f0d8:	ldr	x6, [x19]
    f0dc:	ldp	x2, x4, [x10]
    f0e0:	cmp	x6, x2
    f0e4:	b.cc	f0f0 <_Unwind_Backtrace@@GCC_3.3+0xe50>  // b.lo, b.ul, b.last
    f0e8:	cmp	x6, x4
    f0ec:	b.cc	f248 <_Unwind_Backtrace@@GCC_3.3+0xfa8>  // b.lo, b.ul, b.last
    f0f0:	orr	x2, x2, x4
    f0f4:	cbz	x2, ee58 <_Unwind_Backtrace@@GCC_3.3+0xbb8>
    f0f8:	ldr	x2, [x10, #40]
    f0fc:	cbz	x2, ee58 <_Unwind_Backtrace@@GCC_3.3+0xbb8>
    f100:	mov	x15, x10
    f104:	mov	x10, x2
    f108:	ldp	x2, x4, [x10]
    f10c:	cmp	x6, x2
    f110:	b.cc	f0f0 <_Unwind_Backtrace@@GCC_3.3+0xe50>  // b.lo, b.ul, b.last
    f114:	b	f0e8 <_Unwind_Backtrace@@GCC_3.3+0xe48>
    f118:	mov	x2, x23
    f11c:	mov	x1, x22
    f120:	mov	w0, w24
    f124:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    f128:	add	x3, sp, #0x48
    f12c:	mov	x1, x0
    f130:	mov	x2, x21
    f134:	mov	w0, w24
    f138:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    f13c:	ldr	x3, [sp, #72]
    f140:	cbz	x3, f220 <_Unwind_Backtrace@@GCC_3.3+0xf80>
    f144:	ands	x5, x0, #0x3
    f148:	ldr	x2, [x19]
    f14c:	b.ne	f03c <_Unwind_Backtrace@@GCC_3.3+0xd9c>  // b.any
    f150:	ldrsw	x1, [x0]
    f154:	add	x1, x1, x20
    f158:	cmp	x1, x2
    f15c:	b.hi	f220 <_Unwind_Backtrace@@GCC_3.3+0xf80>  // b.pmore
    f160:	sub	x3, x3, #0x1
    f164:	lsl	x1, x3, #3
    f168:	add	x21, x0, x1
    f16c:	ldrsw	x1, [x0, x1]
    f170:	add	x1, x1, x20
    f174:	cmp	x1, x2
    f178:	b.ls	f1bc <_Unwind_Backtrace@@GCC_3.3+0xf1c>  // b.plast
    f17c:	cmp	x5, x3
    f180:	b.cs	f26c <_Unwind_Backtrace@@GCC_3.3+0xfcc>  // b.hs, b.nlast
    f184:	add	x1, x5, x3
    f188:	lsr	x1, x1, #1
    f18c:	lsl	x4, x1, #3
    f190:	add	x21, x0, x4
    f194:	ldrsw	x4, [x0, x4]
    f198:	add	x4, x4, x20
    f19c:	cmp	x4, x2
    f1a0:	b.hi	f240 <_Unwind_Backtrace@@GCC_3.3+0xfa0>  // b.pmore
    f1a4:	add	x5, x1, #0x1
    f1a8:	lsl	x1, x5, #3
    f1ac:	ldrsw	x1, [x0, x1]
    f1b0:	add	x1, x1, x20
    f1b4:	cmp	x1, x2
    f1b8:	b.ls	f17c <_Unwind_Backtrace@@GCC_3.3+0xedc>  // b.plast
    f1bc:	ldrsw	x22, [x21, #4]
    f1c0:	add	x22, x22, x20
    f1c4:	add	x1, x22, #0x4
    f1c8:	ldrsw	x0, [x22, #4]
    f1cc:	sub	x0, x1, x0
    f1d0:	bl	e720 <_Unwind_Backtrace@@GCC_3.3+0x480>
    f1d4:	and	w23, w0, #0xff
    f1d8:	mov	w0, w23
    f1dc:	bl	e560 <_Unwind_Backtrace@@GCC_3.3+0x2c0>
    f1e0:	mov	w2, w0
    f1e4:	mov	x1, #0x0                   	// #0
    f1e8:	add	x2, x2, #0x8
    f1ec:	add	x3, sp, #0x50
    f1f0:	add	x2, x22, x2
    f1f4:	and	w0, w23, #0xf
    f1f8:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    f1fc:	ldrsw	x0, [x21]
    f200:	ldr	x1, [sp, #80]
    f204:	add	x20, x0, x20
    f208:	ldr	x2, [x19]
    f20c:	add	x0, x20, x1
    f210:	cmp	x2, x0
    f214:	b.cs	f21c <_Unwind_Backtrace@@GCC_3.3+0xf7c>  // b.hs, b.nlast
    f218:	str	x22, [x19, #32]
    f21c:	str	x20, [x19, #24]
    f220:	mov	w0, #0x1                   	// #1
    f224:	ldp	x21, x22, [sp, #32]
    f228:	ldp	x23, x24, [sp, #48]
    f22c:	b	ef60 <_Unwind_Backtrace@@GCC_3.3+0xcc0>
    f230:	mov	w0, #0x1                   	// #1
    f234:	ldp	x21, x22, [sp, #32]
    f238:	ldp	x23, x24, [sp, #48]
    f23c:	b	ef50 <_Unwind_Backtrace@@GCC_3.3+0xcb0>
    f240:	mov	x3, x1
    f244:	b	f17c <_Unwind_Backtrace@@GCC_3.3+0xedc>
    f248:	cmp	x10, x7
    f24c:	ldp	x13, x9, [x10, #16]
    f250:	b.eq	ef34 <_Unwind_Backtrace@@GCC_3.3+0xc94>  // b.none
    f254:	add	x5, x5, #0x230
    f258:	ldr	x0, [x10, #40]
    f25c:	str	x0, [x15, #40]
    f260:	str	x10, [x5, #8]
    f264:	str	x7, [x10, #40]
    f268:	b	ef34 <_Unwind_Backtrace@@GCC_3.3+0xc94>
    f26c:	bl	2c50 <abort@plt>
    f270:	stp	x29, x30, [sp, #-160]!
    f274:	mov	x29, sp
    f278:	stp	x19, x20, [sp, #16]
    f27c:	mov	x19, x1
    f280:	ldrb	w1, [x0, #32]
    f284:	stp	x23, x24, [sp, #48]
    f288:	mov	x24, x0
    f28c:	tbz	w1, #0, f2f8 <_Unwind_Backtrace@@GCC_3.3+0x1058>
    f290:	stp	x27, x28, [sp, #80]
    f294:	ldr	x27, [x24, #24]
    f298:	tbnz	w1, #2, f36c <_Unwind_Backtrace@@GCC_3.3+0x10cc>
    f29c:	ldrh	w0, [x24, #32]
    f2a0:	tst	w0, #0x7f8
    f2a4:	b.ne	f4cc <_Unwind_Backtrace@@GCC_3.3+0x122c>  // b.any
    f2a8:	mov	x2, #0x0                   	// #0
    f2ac:	ldr	x1, [x27, #8]
    f2b0:	b	f2d4 <_Unwind_Backtrace@@GCC_3.3+0x1034>
    f2b4:	add	x0, x1, x2
    f2b8:	lsr	x0, x0, #1
    f2bc:	add	x3, x0, #0x2
    f2c0:	ldr	x20, [x27, x3, lsl #3]
    f2c4:	ldr	x3, [x20, #8]
    f2c8:	cmp	x19, x3
    f2cc:	b.cs	f354 <_Unwind_Backtrace@@GCC_3.3+0x10b4>  // b.hs, b.nlast
    f2d0:	mov	x1, x0
    f2d4:	cmp	x1, x2
    f2d8:	b.hi	f2b4 <_Unwind_Backtrace@@GCC_3.3+0x1014>  // b.pmore
    f2dc:	ldp	x27, x28, [sp, #80]
    f2e0:	mov	x20, #0x0                   	// #0
    f2e4:	mov	x0, x20
    f2e8:	ldp	x19, x20, [sp, #16]
    f2ec:	ldp	x23, x24, [sp, #48]
    f2f0:	ldp	x29, x30, [sp], #160
    f2f4:	ret
    f2f8:	stp	x25, x26, [sp, #64]
    f2fc:	ldr	w25, [x0, #32]
    f300:	stp	x21, x22, [sp, #32]
    f304:	tst	x25, #0xfffff800
    f308:	lsr	w25, w25, #11
    f30c:	b.ne	f574 <_Unwind_Backtrace@@GCC_3.3+0x12d4>  // b.any
    f310:	ldr	x20, [x0, #24]
    f314:	tbz	w1, #1, f424 <_Unwind_Backtrace@@GCC_3.3+0x1184>
    f318:	ldr	x1, [x20]
    f31c:	cbnz	x1, f330 <_Unwind_Backtrace@@GCC_3.3+0x1090>
    f320:	b	f450 <_Unwind_Backtrace@@GCC_3.3+0x11b0>
    f324:	ldr	x1, [x20, #8]!
    f328:	add	x25, x25, x0
    f32c:	cbz	x1, f438 <_Unwind_Backtrace@@GCC_3.3+0x1198>
    f330:	mov	x0, x24
    f334:	bl	eb60 <_Unwind_Backtrace@@GCC_3.3+0x8c0>
    f338:	cmn	x0, #0x1
    f33c:	b.ne	f324 <_Unwind_Backtrace@@GCC_3.3+0x1084>  // b.any
    f340:	adrp	x0, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
    f344:	mov	x1, #0x7f8                 	// #2040
    f348:	add	x0, x0, #0xa60
    f34c:	stp	x0, x1, [x24, #24]
    f350:	b	f450 <_Unwind_Backtrace@@GCC_3.3+0x11b0>
    f354:	ldr	x2, [x20, #16]
    f358:	add	x3, x3, x2
    f35c:	cmp	x19, x3
    f360:	b.cc	f848 <_Unwind_Backtrace@@GCC_3.3+0x15a8>  // b.lo, b.ul, b.last
    f364:	add	x2, x0, #0x1
    f368:	b	f2d4 <_Unwind_Backtrace@@GCC_3.3+0x1034>
    f36c:	ldr	x28, [x27, #8]
    f370:	cbz	x28, f2dc <_Unwind_Backtrace@@GCC_3.3+0x103c>
    f374:	add	x0, x24, #0x8
    f378:	add	x23, sp, #0x88
    f37c:	stp	x21, x22, [sp, #32]
    f380:	add	x22, sp, #0x90
    f384:	stp	x25, x26, [sp, #64]
    f388:	add	x26, x24, #0x10
    f38c:	mov	x25, #0x0                   	// #0
    f390:	str	x0, [sp, #96]
    f394:	b	f3b4 <_Unwind_Backtrace@@GCC_3.3+0x1114>
    f398:	ldr	x1, [sp, #144]
    f39c:	add	x0, x0, x1
    f3a0:	cmp	x0, x19
    f3a4:	b.hi	f840 <_Unwind_Backtrace@@GCC_3.3+0x15a0>  // b.pmore
    f3a8:	add	x25, x24, #0x1
    f3ac:	cmp	x25, x28
    f3b0:	b.cs	f4bc <_Unwind_Backtrace@@GCC_3.3+0x121c>  // b.hs, b.nlast
    f3b4:	add	x24, x25, x28
    f3b8:	lsr	x24, x24, #1
    f3bc:	add	x0, x24, #0x2
    f3c0:	ldr	x20, [x27, x0, lsl #3]
    f3c4:	add	x1, x20, #0x4
    f3c8:	ldrsw	x0, [x20, #4]
    f3cc:	sub	x0, x1, x0
    f3d0:	bl	e720 <_Unwind_Backtrace@@GCC_3.3+0x480>
    f3d4:	ldr	x1, [sp, #96]
    f3d8:	and	w21, w0, #0xff
    f3dc:	mov	x2, x26
    f3e0:	mov	w0, w21
    f3e4:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    f3e8:	mov	x1, x0
    f3ec:	mov	x3, x23
    f3f0:	add	x2, x20, #0x8
    f3f4:	mov	w0, w21
    f3f8:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    f3fc:	mov	x3, x22
    f400:	mov	x2, x0
    f404:	mov	x1, #0x0                   	// #0
    f408:	and	w0, w21, #0xf
    f40c:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    f410:	ldr	x0, [sp, #136]
    f414:	cmp	x0, x19
    f418:	b.ls	f398 <_Unwind_Backtrace@@GCC_3.3+0x10f8>  // b.plast
    f41c:	mov	x28, x24
    f420:	b	f3ac <_Unwind_Backtrace@@GCC_3.3+0x110c>
    f424:	mov	x1, x20
    f428:	bl	eb60 <_Unwind_Backtrace@@GCC_3.3+0x8c0>
    f42c:	mov	x25, x0
    f430:	cmn	x0, #0x1
    f434:	b.eq	f340 <_Unwind_Backtrace@@GCC_3.3+0x10a0>  // b.none
    f438:	ldr	w0, [x24, #32]
    f43c:	tst	x25, #0xffffffffffe00000
    f440:	b.eq	f884 <_Unwind_Backtrace@@GCC_3.3+0x15e4>  // b.none
    f444:	and	w0, w0, #0x7ff
    f448:	str	w0, [x24, #32]
    f44c:	cbnz	x25, f574 <_Unwind_Backtrace@@GCC_3.3+0x12d4>
    f450:	ldr	x0, [x24]
    f454:	cmp	x0, x19
    f458:	b.hi	f4b0 <_Unwind_Backtrace@@GCC_3.3+0x1210>  // b.pmore
    f45c:	ldrb	w1, [x24, #32]
    f460:	ldr	x21, [x24, #24]
    f464:	tbnz	w1, #0, f8c8 <_Unwind_Backtrace@@GCC_3.3+0x1628>
    f468:	tbz	w1, #1, f820 <_Unwind_Backtrace@@GCC_3.3+0x1580>
    f46c:	ldr	x1, [x21]
    f470:	cbnz	x1, f480 <_Unwind_Backtrace@@GCC_3.3+0x11e0>
    f474:	b	f4b0 <_Unwind_Backtrace@@GCC_3.3+0x1210>
    f478:	ldr	x1, [x21, #8]!
    f47c:	cbz	x1, f4b0 <_Unwind_Backtrace@@GCC_3.3+0x1210>
    f480:	mov	x2, x19
    f484:	mov	x0, x24
    f488:	bl	e920 <_Unwind_Backtrace@@GCC_3.3+0x680>
    f48c:	mov	x20, x0
    f490:	cbz	x0, f478 <_Unwind_Backtrace@@GCC_3.3+0x11d8>
    f494:	mov	x0, x20
    f498:	ldp	x19, x20, [sp, #16]
    f49c:	ldp	x21, x22, [sp, #32]
    f4a0:	ldp	x23, x24, [sp, #48]
    f4a4:	ldp	x25, x26, [sp, #64]
    f4a8:	ldp	x29, x30, [sp], #160
    f4ac:	ret
    f4b0:	ldp	x21, x22, [sp, #32]
    f4b4:	ldp	x25, x26, [sp, #64]
    f4b8:	b	f2e0 <_Unwind_Backtrace@@GCC_3.3+0x1040>
    f4bc:	ldp	x21, x22, [sp, #32]
    f4c0:	ldp	x25, x26, [sp, #64]
    f4c4:	ldp	x27, x28, [sp, #80]
    f4c8:	b	f2e0 <_Unwind_Backtrace@@GCC_3.3+0x1040>
    f4cc:	stp	x25, x26, [sp, #64]
    f4d0:	ubfx	x25, x0, #3, #8
    f4d4:	add	x2, x24, #0x10
    f4d8:	add	x1, x24, #0x8
    f4dc:	mov	x0, x25
    f4e0:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    f4e4:	mov	x24, x0
    f4e8:	ldr	x28, [x27, #8]
    f4ec:	cbz	x28, f4c0 <_Unwind_Backtrace@@GCC_3.3+0x1220>
    f4f0:	and	w0, w25, #0xf
    f4f4:	add	x23, sp, #0x88
    f4f8:	mov	x26, #0x0                   	// #0
    f4fc:	stp	x21, x22, [sp, #32]
    f500:	add	x22, sp, #0x90
    f504:	str	w0, [sp, #96]
    f508:	b	f528 <_Unwind_Backtrace@@GCC_3.3+0x1288>
    f50c:	ldr	x1, [sp, #144]
    f510:	add	x0, x0, x1
    f514:	cmp	x0, x19
    f518:	b.hi	f840 <_Unwind_Backtrace@@GCC_3.3+0x15a0>  // b.pmore
    f51c:	add	x26, x21, #0x1
    f520:	cmp	x26, x28
    f524:	b.cs	f4bc <_Unwind_Backtrace@@GCC_3.3+0x121c>  // b.hs, b.nlast
    f528:	add	x21, x28, x26
    f52c:	mov	x3, x23
    f530:	mov	x1, x24
    f534:	mov	w0, w25
    f538:	lsr	x21, x21, #1
    f53c:	add	x2, x21, #0x2
    f540:	ldr	x20, [x27, x2, lsl #3]
    f544:	add	x2, x20, #0x8
    f548:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    f54c:	mov	x2, x0
    f550:	ldrb	w0, [sp, #96]
    f554:	mov	x3, x22
    f558:	mov	x1, #0x0                   	// #0
    f55c:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    f560:	ldr	x0, [sp, #136]
    f564:	cmp	x0, x19
    f568:	b.ls	f50c <_Unwind_Backtrace@@GCC_3.3+0x126c>  // b.plast
    f56c:	mov	x28, x21
    f570:	b	f520 <_Unwind_Backtrace@@GCC_3.3+0x1280>
    f574:	add	x20, x25, #0x2
    f578:	lsl	x20, x20, #3
    f57c:	mov	x0, x20
    f580:	bl	2b70 <malloc@plt>
    f584:	str	x0, [sp, #144]
    f588:	mov	x1, x0
    f58c:	cbz	x0, f450 <_Unwind_Backtrace@@GCC_3.3+0x11b0>
    f590:	str	xzr, [x1, #8]
    f594:	mov	x0, x20
    f598:	bl	2b70 <malloc@plt>
    f59c:	str	x0, [sp, #152]
    f5a0:	cbz	x0, f5a8 <_Unwind_Backtrace@@GCC_3.3+0x1308>
    f5a4:	str	xzr, [x0, #8]
    f5a8:	ldrb	w0, [x24, #32]
    f5ac:	ldr	x20, [x24, #24]
    f5b0:	tbz	w0, #1, f85c <_Unwind_Backtrace@@GCC_3.3+0x15bc>
    f5b4:	ldr	x2, [x20]
    f5b8:	cbz	x2, f8c0 <_Unwind_Backtrace@@GCC_3.3+0x1620>
    f5bc:	add	x22, sp, #0x90
    f5c0:	mov	x1, x22
    f5c4:	mov	x0, x24
    f5c8:	bl	ece0 <_Unwind_Backtrace@@GCC_3.3+0xa40>
    f5cc:	ldr	x2, [x20, #8]!
    f5d0:	cbnz	x2, f5c0 <_Unwind_Backtrace@@GCC_3.3+0x1320>
    f5d4:	ldr	x0, [sp, #144]
    f5d8:	str	x0, [sp, #96]
    f5dc:	str	x0, [sp, #120]
    f5e0:	cbz	x0, f5f0 <_Unwind_Backtrace@@GCC_3.3+0x1350>
    f5e4:	ldr	x0, [x0, #8]
    f5e8:	cmp	x0, x25
    f5ec:	b.ne	f8c0 <_Unwind_Backtrace@@GCC_3.3+0x1620>  // b.any
    f5f0:	ldrb	w0, [x24, #32]
    f5f4:	tbnz	w0, #2, f850 <_Unwind_Backtrace@@GCC_3.3+0x15b0>
    f5f8:	ldrh	w1, [x24, #32]
    f5fc:	adrp	x0, e000 <_Unwind_ForcedUnwind@@GCC_3.0+0xa0>
    f600:	adrp	x20, e000 <_Unwind_ForcedUnwind@@GCC_3.0+0xa0>
    f604:	add	x0, x0, #0x898
    f608:	tst	w1, #0x7f8
    f60c:	add	x20, x20, #0x370
    f610:	csel	x20, x20, x0, eq  // eq = none
    f614:	ldr	x22, [sp, #152]
    f618:	cbz	x22, f870 <_Unwind_Backtrace@@GCC_3.3+0x15d0>
    f61c:	ldr	x1, [sp, #96]
    f620:	stp	x27, x28, [sp, #80]
    f624:	ldr	x0, [x1, #8]
    f628:	str	x0, [sp, #104]
    f62c:	cbz	x0, f8b0 <_Unwind_Backtrace@@GCC_3.3+0x1610>
    f630:	adrp	x3, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    f634:	add	x3, x3, #0x230
    f638:	add	x0, x0, #0x1
    f63c:	add	x28, x1, #0x10
    f640:	add	x27, x3, #0x190
    f644:	mov	x21, x28
    f648:	mov	x23, x27
    f64c:	lsl	x0, x0, #3
    f650:	mov	x26, #0x10                  	// #16
    f654:	str	x0, [sp, #112]
    f658:	ldr	x0, [sp, #112]
    f65c:	str	x27, [x22, x26]
    f660:	cmp	x0, x26
    f664:	b.eq	f6c0 <_Unwind_Backtrace@@GCC_3.3+0x1420>  // b.none
    f668:	cmp	x21, x23
    f66c:	mov	x27, x21
    f670:	b.ne	f690 <_Unwind_Backtrace@@GCC_3.3+0x13f0>  // b.any
    f674:	b	f6b0 <_Unwind_Backtrace@@GCC_3.3+0x1410>
    f678:	sub	x3, x27, x28
    f67c:	add	x0, x22, x3
    f680:	ldr	x27, [x0, #16]
    f684:	str	xzr, [x0, #16]
    f688:	cmp	x27, x23
    f68c:	b.eq	f6b0 <_Unwind_Backtrace@@GCC_3.3+0x1410>  // b.none
    f690:	ldr	x2, [x27]
    f694:	mov	x0, x24
    f698:	ldr	x1, [x21, #8]
    f69c:	blr	x20
    f6a0:	tbnz	w0, #31, f678 <_Unwind_Backtrace@@GCC_3.3+0x13d8>
    f6a4:	add	x21, x21, #0x8
    f6a8:	add	x26, x26, #0x8
    f6ac:	b	f658 <_Unwind_Backtrace@@GCC_3.3+0x13b8>
    f6b0:	mov	x27, x23
    f6b4:	add	x21, x21, #0x8
    f6b8:	add	x26, x26, #0x8
    f6bc:	b	f658 <_Unwind_Backtrace@@GCC_3.3+0x13b8>
    f6c0:	add	x6, x22, #0x10
    f6c4:	mov	x5, #0x0                   	// #0
    f6c8:	mov	x3, #0x0                   	// #0
    f6cc:	mov	x0, #0x0                   	// #0
    f6d0:	b	f6f4 <_Unwind_Backtrace@@GCC_3.3+0x1454>
    f6d4:	ldr	x4, [sp, #96]
    f6d8:	add	x1, x3, #0x2
    f6dc:	add	x3, x3, #0x1
    f6e0:	str	x2, [x4, x1, lsl #3]
    f6e4:	ldr	x1, [sp, #104]
    f6e8:	add	x0, x0, #0x1
    f6ec:	cmp	x1, x0
    f6f0:	b.eq	f710 <_Unwind_Backtrace@@GCC_3.3+0x1470>  // b.none
    f6f4:	ldr	x1, [x6, x0, lsl #3]
    f6f8:	ldr	x2, [x28, x0, lsl #3]
    f6fc:	cbnz	x1, f6d4 <_Unwind_Backtrace@@GCC_3.3+0x1434>
    f700:	add	x1, x5, #0x2
    f704:	add	x5, x5, #0x1
    f708:	str	x2, [x22, x1, lsl #3]
    f70c:	b	f6e4 <_Unwind_Backtrace@@GCC_3.3+0x1444>
    f710:	ldp	x0, x2, [sp, #144]
    f714:	str	x0, [sp, #96]
    f718:	ldr	x0, [sp, #120]
    f71c:	str	x3, [x0, #8]
    f720:	ldr	x0, [sp, #96]
    f724:	str	x5, [x22, #8]
    f728:	ldr	x1, [x2, #8]
    f72c:	ldr	x0, [x0, #8]
    f730:	add	x0, x0, x1
    f734:	cmp	x0, x25
    f738:	b.ne	f8c4 <_Unwind_Backtrace@@GCC_3.3+0x1624>  // b.any
    f73c:	mov	x1, x20
    f740:	mov	x0, x24
    f744:	bl	e4a0 <_Unwind_Backtrace@@GCC_3.3+0x200>
    f748:	ldr	x25, [sp, #152]
    f74c:	ldr	x22, [x25, #8]
    f750:	cbz	x22, f7f4 <_Unwind_Backtrace@@GCC_3.3+0x1554>
    f754:	ldr	x0, [sp, #144]
    f758:	str	x0, [sp, #96]
    f75c:	add	x27, x0, #0x10
    f760:	ldr	x28, [x0, #8]
    f764:	nop
    f768:	add	x0, x25, x22, lsl #3
    f76c:	sub	x23, x22, #0x1
    f770:	ldr	x26, [x0, #8]
    f774:	cbz	x28, f890 <_Unwind_Backtrace@@GCC_3.3+0x15f0>
    f778:	add	x22, x22, x28
    f77c:	mov	x21, x28
    f780:	sub	x22, x22, #0x1
    f784:	b	f798 <_Unwind_Backtrace@@GCC_3.3+0x14f8>
    f788:	ldr	x0, [x27, x21, lsl #3]
    f78c:	str	x0, [x27, x22, lsl #3]
    f790:	sub	x22, x22, #0x1
    f794:	cbz	x21, f7d0 <_Unwind_Backtrace@@GCC_3.3+0x1530>
    f798:	mov	x28, x21
    f79c:	sub	x21, x21, #0x1
    f7a0:	mov	x2, x26
    f7a4:	mov	x0, x24
    f7a8:	ldr	x1, [x27, x21, lsl #3]
    f7ac:	blr	x20
    f7b0:	cmp	w0, #0x0
    f7b4:	b.gt	f788 <_Unwind_Backtrace@@GCC_3.3+0x14e8>
    f7b8:	ldr	x0, [sp, #96]
    f7bc:	add	x22, x22, #0x2
    f7c0:	str	x26, [x0, x22, lsl #3]
    f7c4:	cbz	x23, f7dc <_Unwind_Backtrace@@GCC_3.3+0x153c>
    f7c8:	mov	x22, x23
    f7cc:	b	f768 <_Unwind_Backtrace@@GCC_3.3+0x14c8>
    f7d0:	mov	x22, x23
    f7d4:	mov	x28, #0x0                   	// #0
    f7d8:	b	f7b8 <_Unwind_Backtrace@@GCC_3.3+0x1518>
    f7dc:	ldr	x2, [sp, #96]
    f7e0:	ldr	x1, [x25, #8]
    f7e4:	ldr	x0, [x2, #8]
    f7e8:	ldr	x25, [sp, #152]
    f7ec:	add	x0, x0, x1
    f7f0:	str	x0, [x2, #8]
    f7f4:	mov	x0, x25
    f7f8:	bl	2cc0 <free@plt>
    f7fc:	ldp	x27, x28, [sp, #80]
    f800:	ldr	x1, [sp, #144]
    f804:	ldrb	w0, [x24, #32]
    f808:	ldr	x2, [x24, #24]
    f80c:	str	x2, [x1]
    f810:	orr	w0, w0, #0x1
    f814:	str	x1, [x24, #24]
    f818:	strb	w0, [x24, #32]
    f81c:	b	f450 <_Unwind_Backtrace@@GCC_3.3+0x11b0>
    f820:	mov	x1, x21
    f824:	mov	x2, x19
    f828:	mov	x0, x24
    f82c:	bl	e920 <_Unwind_Backtrace@@GCC_3.3+0x680>
    f830:	mov	x20, x0
    f834:	ldp	x21, x22, [sp, #32]
    f838:	ldp	x25, x26, [sp, #64]
    f83c:	b	f2e4 <_Unwind_Backtrace@@GCC_3.3+0x1044>
    f840:	ldp	x21, x22, [sp, #32]
    f844:	ldp	x25, x26, [sp, #64]
    f848:	ldp	x27, x28, [sp, #80]
    f84c:	b	f2e4 <_Unwind_Backtrace@@GCC_3.3+0x1044>
    f850:	adrp	x20, e000 <_Unwind_ForcedUnwind@@GCC_3.0+0xa0>
    f854:	add	x20, x20, #0xaa0
    f858:	b	f614 <_Unwind_Backtrace@@GCC_3.3+0x1374>
    f85c:	mov	x2, x20
    f860:	add	x1, sp, #0x90
    f864:	mov	x0, x24
    f868:	bl	ece0 <_Unwind_Backtrace@@GCC_3.3+0xa40>
    f86c:	b	f5d4 <_Unwind_Backtrace@@GCC_3.3+0x1334>
    f870:	ldr	x2, [sp, #96]
    f874:	mov	x1, x20
    f878:	mov	x0, x24
    f87c:	bl	e4a0 <_Unwind_Backtrace@@GCC_3.3+0x200>
    f880:	b	f800 <_Unwind_Backtrace@@GCC_3.3+0x1560>
    f884:	bfi	w0, w25, #11, #21
    f888:	str	w0, [x24, #32]
    f88c:	b	f44c <_Unwind_Backtrace@@GCC_3.3+0x11ac>
    f890:	ldr	x2, [sp, #96]
    f894:	add	x1, x22, #0x1
    f898:	str	x26, [x2, x1, lsl #3]
    f89c:	cbz	x23, f7dc <_Unwind_Backtrace@@GCC_3.3+0x153c>
    f8a0:	sub	x23, x22, #0x2
    f8a4:	mov	x22, x23
    f8a8:	ldr	x26, [x0]
    f8ac:	b	f7b8 <_Unwind_Backtrace@@GCC_3.3+0x1518>
    f8b0:	mov	x2, x22
    f8b4:	mov	x5, #0x0                   	// #0
    f8b8:	mov	x3, #0x0                   	// #0
    f8bc:	b	f718 <_Unwind_Backtrace@@GCC_3.3+0x1478>
    f8c0:	stp	x27, x28, [sp, #80]
    f8c4:	bl	2c50 <abort@plt>
    f8c8:	ldp	x21, x22, [sp, #32]
    f8cc:	ldp	x25, x26, [sp, #64]
    f8d0:	b	f290 <_Unwind_Backtrace@@GCC_3.3+0xff0>
    f8d4:	nop

000000000000f8d8 <__register_frame_info_bases@@GCC_3.0>:
    f8d8:	cbz	x0, f988 <__register_frame_info_bases@@GCC_3.0+0xb0>
    f8dc:	stp	x29, x30, [sp, #-48]!
    f8e0:	mov	x29, sp
    f8e4:	stp	x19, x20, [sp, #16]
    f8e8:	mov	x19, x1
    f8ec:	ldr	w1, [x0]
    f8f0:	cbz	w1, f964 <__register_frame_info_bases@@GCC_3.0+0x8c>
    f8f4:	adrp	x20, 22000 <__emutls_register_common@@GCC_4.3.0+0x11ac0>
    f8f8:	mov	x1, #0xffffffffffffffff    	// #-1
    f8fc:	str	x21, [sp, #32]
    f900:	mov	x4, #0x7f8                 	// #2040
    f904:	stp	x1, x2, [x19]
    f908:	adrp	x21, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    f90c:	ldr	x1, [x20, #4032]
    f910:	stp	x3, x0, [x19, #16]
    f914:	str	x4, [x19, #32]
    f918:	cbz	x1, f928 <__register_frame_info_bases@@GCC_3.0+0x50>
    f91c:	add	x0, x21, #0x230
    f920:	add	x0, x0, #0x198
    f924:	bl	2d50 <pthread_mutex_lock@plt>
    f928:	add	x0, x21, #0x230
    f92c:	ldr	w1, [x0, #464]
    f930:	ldr	x2, [x0, #456]
    f934:	str	x2, [x19, #40]
    f938:	str	x19, [x0, #456]
    f93c:	cbz	w1, f970 <__register_frame_info_bases@@GCC_3.0+0x98>
    f940:	ldr	x20, [x20, #4032]
    f944:	cbz	x20, f960 <__register_frame_info_bases@@GCC_3.0+0x88>
    f948:	add	x0, x21, #0x230
    f94c:	ldp	x19, x20, [sp, #16]
    f950:	add	x0, x0, #0x198
    f954:	ldr	x21, [sp, #32]
    f958:	ldp	x29, x30, [sp], #48
    f95c:	b	2d60 <pthread_mutex_unlock@plt>
    f960:	ldr	x21, [sp, #32]
    f964:	ldp	x19, x20, [sp, #16]
    f968:	ldp	x29, x30, [sp], #48
    f96c:	ret
    f970:	add	x0, x0, #0x1d0
    f974:	mov	w1, #0x1                   	// #1
    f978:	str	w1, [x0]
    f97c:	ldr	x20, [x20, #4032]
    f980:	cbnz	x20, f948 <__register_frame_info_bases@@GCC_3.0+0x70>
    f984:	b	f960 <__register_frame_info_bases@@GCC_3.0+0x88>
    f988:	ret
    f98c:	nop

000000000000f990 <__register_frame_info@@GLIBC_2.0>:
    f990:	mov	x3, #0x0                   	// #0
    f994:	mov	x2, #0x0                   	// #0
    f998:	b	2d10 <__register_frame_info_bases@plt>
    f99c:	nop

000000000000f9a0 <__register_frame@@GLIBC_2.0>:
    f9a0:	stp	x29, x30, [sp, #-32]!
    f9a4:	mov	x29, sp
    f9a8:	str	x19, [sp, #16]
    f9ac:	mov	x19, x0
    f9b0:	ldr	w0, [x0]
    f9b4:	cbnz	w0, f9c4 <__register_frame@@GLIBC_2.0+0x24>
    f9b8:	ldr	x19, [sp, #16]
    f9bc:	ldp	x29, x30, [sp], #32
    f9c0:	ret
    f9c4:	mov	x0, #0x30                  	// #48
    f9c8:	bl	2b70 <malloc@plt>
    f9cc:	mov	x1, x0
    f9d0:	mov	x0, x19
    f9d4:	ldr	x19, [sp, #16]
    f9d8:	ldp	x29, x30, [sp], #32
    f9dc:	b	2d00 <__register_frame_info@plt>

000000000000f9e0 <__register_frame_info_table_bases@@GCC_3.0>:
    f9e0:	stp	x29, x30, [sp, #-48]!
    f9e4:	mov	x5, #0xffffffffffffffff    	// #-1
    f9e8:	mov	x4, #0x7fa                 	// #2042
    f9ec:	mov	x29, sp
    f9f0:	stp	x19, x20, [sp, #16]
    f9f4:	adrp	x20, 22000 <__emutls_register_common@@GCC_4.3.0+0x11ac0>
    f9f8:	mov	x19, x1
    f9fc:	ldr	x1, [x20, #4032]
    fa00:	str	x21, [sp, #32]
    fa04:	stp	x5, x2, [x19]
    fa08:	adrp	x21, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    fa0c:	stp	x3, x0, [x19, #16]
    fa10:	str	x4, [x19, #32]
    fa14:	cbz	x1, fa24 <__register_frame_info_table_bases@@GCC_3.0+0x44>
    fa18:	add	x0, x21, #0x230
    fa1c:	add	x0, x0, #0x198
    fa20:	bl	2d50 <pthread_mutex_lock@plt>
    fa24:	add	x1, x21, #0x230
    fa28:	ldr	w0, [x1, #464]
    fa2c:	ldr	x2, [x1, #456]
    fa30:	str	x2, [x19, #40]
    fa34:	str	x19, [x1, #456]
    fa38:	cbz	w0, fa6c <__register_frame_info_table_bases@@GCC_3.0+0x8c>
    fa3c:	ldr	x20, [x20, #4032]
    fa40:	cbz	x20, fa5c <__register_frame_info_table_bases@@GCC_3.0+0x7c>
    fa44:	add	x0, x21, #0x230
    fa48:	ldp	x19, x20, [sp, #16]
    fa4c:	add	x0, x0, #0x198
    fa50:	ldr	x21, [sp, #32]
    fa54:	ldp	x29, x30, [sp], #48
    fa58:	b	2d60 <pthread_mutex_unlock@plt>
    fa5c:	ldp	x19, x20, [sp, #16]
    fa60:	ldr	x21, [sp, #32]
    fa64:	ldp	x29, x30, [sp], #48
    fa68:	ret
    fa6c:	add	x1, x1, #0x1d0
    fa70:	mov	w0, #0x1                   	// #1
    fa74:	str	w0, [x1]
    fa78:	b	fa3c <__register_frame_info_table_bases@@GCC_3.0+0x5c>
    fa7c:	nop

000000000000fa80 <__register_frame_info_table@@GLIBC_2.0>:
    fa80:	mov	x3, #0x0                   	// #0
    fa84:	mov	x2, #0x0                   	// #0
    fa88:	b	2bd0 <__register_frame_info_table_bases@plt>
    fa8c:	nop

000000000000fa90 <__register_frame_table@@GLIBC_2.0>:
    fa90:	stp	x29, x30, [sp, #-32]!
    fa94:	mov	x29, sp
    fa98:	str	x19, [sp, #16]
    fa9c:	mov	x19, x0
    faa0:	mov	x0, #0x30                  	// #48
    faa4:	bl	2b70 <malloc@plt>
    faa8:	mov	x1, x0
    faac:	mov	x0, x19
    fab0:	ldr	x19, [sp, #16]
    fab4:	ldp	x29, x30, [sp], #32
    fab8:	b	2cd0 <__register_frame_info_table@plt>
    fabc:	nop

000000000000fac0 <__deregister_frame_info_bases@@GCC_3.0>:
    fac0:	stp	x29, x30, [sp, #-48]!
    fac4:	mov	x29, sp
    fac8:	stp	x19, x20, [sp, #16]
    facc:	cbz	x0, fb98 <__deregister_frame_info_bases@@GCC_3.0+0xd8>
    fad0:	mov	x20, x0
    fad4:	ldr	w0, [x0]
    fad8:	cbz	w0, fb98 <__deregister_frame_info_bases@@GCC_3.0+0xd8>
    fadc:	stp	x21, x22, [sp, #32]
    fae0:	adrp	x21, 22000 <__emutls_register_common@@GCC_4.3.0+0x11ac0>
    fae4:	adrp	x22, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    fae8:	ldr	x0, [x21, #4032]
    faec:	cbz	x0, fafc <__deregister_frame_info_bases@@GCC_3.0+0x3c>
    faf0:	add	x0, x22, #0x230
    faf4:	add	x0, x0, #0x198
    faf8:	bl	2d50 <pthread_mutex_lock@plt>
    fafc:	add	x2, x22, #0x230
    fb00:	ldr	x1, [x2, #456]
    fb04:	cbz	x1, fb4c <__deregister_frame_info_bases@@GCC_3.0+0x8c>
    fb08:	add	x2, x2, #0x1c8
    fb0c:	b	fb18 <__deregister_frame_info_bases@@GCC_3.0+0x58>
    fb10:	add	x2, x19, #0x28
    fb14:	cbz	x1, fb4c <__deregister_frame_info_bases@@GCC_3.0+0x8c>
    fb18:	ldr	x0, [x1, #24]
    fb1c:	mov	x19, x1
    fb20:	ldr	x1, [x1, #40]
    fb24:	cmp	x20, x0
    fb28:	b.ne	fb10 <__deregister_frame_info_bases@@GCC_3.0+0x50>  // b.any
    fb2c:	str	x1, [x2]
    fb30:	ldr	x21, [x21, #4032]
    fb34:	cbnz	x21, fbac <__deregister_frame_info_bases@@GCC_3.0+0xec>
    fb38:	mov	x0, x19
    fb3c:	ldp	x19, x20, [sp, #16]
    fb40:	ldp	x21, x22, [sp, #32]
    fb44:	ldp	x29, x30, [sp], #48
    fb48:	ret
    fb4c:	add	x2, x22, #0x230
    fb50:	ldr	x19, [x2, #472]
    fb54:	cbz	x19, fbcc <__deregister_frame_info_bases@@GCC_3.0+0x10c>
    fb58:	add	x2, x2, #0x1d8
    fb5c:	b	fb78 <__deregister_frame_info_bases@@GCC_3.0+0xb8>
    fb60:	ldr	x1, [x0]
    fb64:	cmp	x20, x1
    fb68:	b.eq	fbe4 <__deregister_frame_info_bases@@GCC_3.0+0x124>  // b.none
    fb6c:	add	x2, x19, #0x28
    fb70:	ldr	x19, [x19, #40]
    fb74:	cbz	x19, fbcc <__deregister_frame_info_bases@@GCC_3.0+0x10c>
    fb78:	ldrb	w1, [x19, #32]
    fb7c:	ldr	x0, [x19, #24]
    fb80:	tbnz	w1, #0, fb60 <__deregister_frame_info_bases@@GCC_3.0+0xa0>
    fb84:	cmp	x20, x0
    fb88:	b.ne	fb6c <__deregister_frame_info_bases@@GCC_3.0+0xac>  // b.any
    fb8c:	ldr	x0, [x19, #40]
    fb90:	str	x0, [x2]
    fb94:	b	fb30 <__deregister_frame_info_bases@@GCC_3.0+0x70>
    fb98:	mov	x19, #0x0                   	// #0
    fb9c:	mov	x0, x19
    fba0:	ldp	x19, x20, [sp, #16]
    fba4:	ldp	x29, x30, [sp], #48
    fba8:	ret
    fbac:	add	x0, x22, #0x230
    fbb0:	add	x0, x0, #0x198
    fbb4:	bl	2d60 <pthread_mutex_unlock@plt>
    fbb8:	mov	x0, x19
    fbbc:	ldp	x19, x20, [sp, #16]
    fbc0:	ldp	x21, x22, [sp, #32]
    fbc4:	ldp	x29, x30, [sp], #48
    fbc8:	ret
    fbcc:	ldr	x21, [x21, #4032]
    fbd0:	cbz	x21, fbe0 <__deregister_frame_info_bases@@GCC_3.0+0x120>
    fbd4:	add	x0, x22, #0x230
    fbd8:	add	x0, x0, #0x198
    fbdc:	bl	2d60 <pthread_mutex_unlock@plt>
    fbe0:	bl	2c50 <abort@plt>
    fbe4:	ldr	x1, [x19, #40]
    fbe8:	str	x1, [x2]
    fbec:	bl	2cc0 <free@plt>
    fbf0:	b	fb30 <__deregister_frame_info_bases@@GCC_3.0+0x70>
    fbf4:	nop

000000000000fbf8 <__deregister_frame_info@@GLIBC_2.0>:
    fbf8:	b	2b60 <__deregister_frame_info_bases@plt>
    fbfc:	nop

000000000000fc00 <__deregister_frame@@GLIBC_2.0>:
    fc00:	ldr	w1, [x0]
    fc04:	cbnz	w1, fc0c <__deregister_frame@@GLIBC_2.0+0xc>
    fc08:	ret
    fc0c:	stp	x29, x30, [sp, #-16]!
    fc10:	mov	x29, sp
    fc14:	bl	2ce0 <__deregister_frame_info@plt>
    fc18:	ldp	x29, x30, [sp], #16
    fc1c:	b	2cc0 <free@plt>

000000000000fc20 <_Unwind_Find_FDE@@GCC_3.0>:
    fc20:	stp	x29, x30, [sp, #-128]!
    fc24:	mov	x29, sp
    fc28:	stp	x23, x24, [sp, #48]
    fc2c:	adrp	x23, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
    fc30:	add	x2, x23, #0x230
    fc34:	stp	x19, x20, [sp, #16]
    fc38:	mov	x20, x0
    fc3c:	add	x0, x2, #0x1d0
    fc40:	stp	x21, x22, [sp, #32]
    fc44:	mov	x22, x1
    fc48:	ldr	w0, [x0]
    fc4c:	cbnz	w0, fcb0 <_Unwind_Find_FDE@@GCC_3.0+0x90>
    fc50:	mov	w2, #0x1                   	// #1
    fc54:	adrp	x0, e000 <_Unwind_ForcedUnwind@@GCC_3.0+0xa0>
    fc58:	add	x1, sp, #0x50
    fc5c:	add	x0, x0, #0xe20
    fc60:	stp	x20, xzr, [sp, #80]
    fc64:	stp	xzr, xzr, [sp, #96]
    fc68:	str	xzr, [sp, #112]
    fc6c:	str	w2, [sp, #120]
    fc70:	bl	2c80 <dl_iterate_phdr@plt>
    fc74:	tbnz	w0, #31, fdc4 <_Unwind_Find_FDE@@GCC_3.0+0x1a4>
    fc78:	ldr	x21, [sp, #112]
    fc7c:	cbz	x21, fc98 <_Unwind_Find_FDE@@GCC_3.0+0x78>
    fc80:	ldr	x0, [sp, #88]
    fc84:	str	x0, [x22]
    fc88:	ldr	x0, [sp, #96]
    fc8c:	str	x0, [x22, #8]
    fc90:	ldr	x0, [sp, #104]
    fc94:	str	x0, [x22, #16]
    fc98:	mov	x0, x21
    fc9c:	ldp	x19, x20, [sp, #16]
    fca0:	ldp	x21, x22, [sp, #32]
    fca4:	ldp	x23, x24, [sp, #48]
    fca8:	ldp	x29, x30, [sp], #128
    fcac:	ret
    fcb0:	stp	x25, x26, [sp, #64]
    fcb4:	adrp	x25, 22000 <__emutls_register_common@@GCC_4.3.0+0x11ac0>
    fcb8:	ldr	x0, [x25, #4032]
    fcbc:	cbz	x0, fcc8 <_Unwind_Find_FDE@@GCC_3.0+0xa8>
    fcc0:	add	x0, x2, #0x198
    fcc4:	bl	2d50 <pthread_mutex_lock@plt>
    fcc8:	add	x0, x23, #0x230
    fccc:	ldr	x19, [x0, #472]
    fcd0:	cbnz	x19, fce0 <_Unwind_Find_FDE@@GCC_3.0+0xc0>
    fcd4:	b	fd5c <_Unwind_Find_FDE@@GCC_3.0+0x13c>
    fcd8:	ldr	x19, [x19, #40]
    fcdc:	cbz	x19, fd5c <_Unwind_Find_FDE@@GCC_3.0+0x13c>
    fce0:	ldr	x0, [x19]
    fce4:	cmp	x20, x0
    fce8:	b.cc	fcd8 <_Unwind_Find_FDE@@GCC_3.0+0xb8>  // b.lo, b.ul, b.last
    fcec:	mov	x1, x20
    fcf0:	mov	x0, x19
    fcf4:	bl	f270 <_Unwind_Backtrace@@GCC_3.3+0xfd0>
    fcf8:	mov	x21, x0
    fcfc:	cbz	x0, fd5c <_Unwind_Find_FDE@@GCC_3.0+0x13c>
    fd00:	ldr	x25, [x25, #4032]
    fd04:	cbnz	x25, fdcc <_Unwind_Find_FDE@@GCC_3.0+0x1ac>
    fd08:	ldrb	w0, [x19, #32]
    fd0c:	ldr	x1, [x19, #8]
    fd10:	str	x1, [x22]
    fd14:	ldr	x1, [x19, #16]
    fd18:	str	x1, [x22, #8]
    fd1c:	tbnz	w0, #2, fddc <_Unwind_Find_FDE@@GCC_3.0+0x1bc>
    fd20:	ldrh	w20, [x19, #32]
    fd24:	ubfx	x20, x20, #3, #8
    fd28:	add	x2, x19, #0x10
    fd2c:	add	x1, x19, #0x8
    fd30:	mov	w0, w20
    fd34:	bl	e838 <_Unwind_Backtrace@@GCC_3.3+0x598>
    fd38:	add	x3, sp, #0x50
    fd3c:	mov	x1, x0
    fd40:	add	x2, x21, #0x8
    fd44:	mov	w0, w20
    fd48:	bl	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x320>
    fd4c:	ldr	x0, [sp, #80]
    fd50:	ldp	x25, x26, [sp, #64]
    fd54:	str	x0, [x22, #16]
    fd58:	b	fc98 <_Unwind_Find_FDE@@GCC_3.0+0x78>
    fd5c:	add	x24, x23, #0x230
    fd60:	add	x26, x24, #0x1d8
    fd64:	nop
    fd68:	ldr	x19, [x24, #456]
    fd6c:	cbz	x19, fdf4 <_Unwind_Find_FDE@@GCC_3.0+0x1d4>
    fd70:	ldr	x2, [x19, #40]
    fd74:	mov	x1, x20
    fd78:	mov	x0, x19
    fd7c:	str	x2, [x24, #456]
    fd80:	bl	f270 <_Unwind_Backtrace@@GCC_3.3+0xfd0>
    fd84:	mov	x21, x0
    fd88:	ldr	x2, [x24, #472]
    fd8c:	cbz	x2, fe0c <_Unwind_Find_FDE@@GCC_3.0+0x1ec>
    fd90:	mov	x0, x26
    fd94:	ldr	x3, [x19]
    fd98:	b	fda8 <_Unwind_Find_FDE@@GCC_3.0+0x188>
    fd9c:	add	x0, x2, #0x28
    fda0:	ldr	x2, [x2, #40]
    fda4:	cbz	x2, fdb4 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    fda8:	ldr	x1, [x2]
    fdac:	cmp	x1, x3
    fdb0:	b.cs	fd9c <_Unwind_Find_FDE@@GCC_3.0+0x17c>  // b.hs, b.nlast
    fdb4:	str	x2, [x19, #40]
    fdb8:	str	x19, [x0]
    fdbc:	cbz	x21, fd68 <_Unwind_Find_FDE@@GCC_3.0+0x148>
    fdc0:	b	fd00 <_Unwind_Find_FDE@@GCC_3.0+0xe0>
    fdc4:	mov	x21, #0x0                   	// #0
    fdc8:	b	fc98 <_Unwind_Find_FDE@@GCC_3.0+0x78>
    fdcc:	add	x0, x23, #0x230
    fdd0:	add	x0, x0, #0x198
    fdd4:	bl	2d60 <pthread_mutex_unlock@plt>
    fdd8:	b	fd08 <_Unwind_Find_FDE@@GCC_3.0+0xe8>
    fddc:	add	x1, x21, #0x4
    fde0:	ldrsw	x0, [x21, #4]
    fde4:	sub	x0, x1, x0
    fde8:	bl	e720 <_Unwind_Backtrace@@GCC_3.3+0x480>
    fdec:	and	w20, w0, #0xff
    fdf0:	b	fd28 <_Unwind_Find_FDE@@GCC_3.0+0x108>
    fdf4:	ldr	x25, [x25, #4032]
    fdf8:	cbz	x25, fe14 <_Unwind_Find_FDE@@GCC_3.0+0x1f4>
    fdfc:	add	x0, x24, #0x198
    fe00:	bl	2d60 <pthread_mutex_unlock@plt>
    fe04:	ldp	x25, x26, [sp, #64]
    fe08:	b	fc50 <_Unwind_Find_FDE@@GCC_3.0+0x30>
    fe0c:	mov	x0, x26
    fe10:	b	fdb4 <_Unwind_Find_FDE@@GCC_3.0+0x194>
    fe14:	ldp	x25, x26, [sp, #64]
    fe18:	b	fc50 <_Unwind_Find_FDE@@GCC_3.0+0x30>
    fe1c:	nop
    fe20:	and	w3, w0, #0xff
    fe24:	cmp	w3, #0xff
    fe28:	b.eq	fe78 <_Unwind_Find_FDE@@GCC_3.0+0x258>  // b.none
    fe2c:	and	w2, w3, #0x70
    fe30:	mov	x0, x1
    fe34:	cmp	w2, #0x30
    fe38:	b.eq	fe80 <_Unwind_Find_FDE@@GCC_3.0+0x260>  // b.none
    fe3c:	b.hi	fe4c <_Unwind_Find_FDE@@GCC_3.0+0x22c>  // b.pmore
    fe40:	cmp	w2, #0x20
    fe44:	b.ne	fe58 <_Unwind_Find_FDE@@GCC_3.0+0x238>  // b.any
    fe48:	b	2b50 <_Unwind_GetTextRelBase@plt>
    fe4c:	cmp	w2, #0x40
    fe50:	b.ne	fe70 <_Unwind_Find_FDE@@GCC_3.0+0x250>  // b.any
    fe54:	b	2ab0 <_Unwind_GetRegionStart@plt>
    fe58:	b.hi	fe64 <_Unwind_Find_FDE@@GCC_3.0+0x244>  // b.pmore
    fe5c:	tst	w3, #0x60
    fe60:	b.eq	fe78 <_Unwind_Find_FDE@@GCC_3.0+0x258>  // b.none
    fe64:	stp	x29, x30, [sp, #-16]!
    fe68:	mov	x29, sp
    fe6c:	bl	2c50 <abort@plt>
    fe70:	cmp	w2, #0x50
    fe74:	b.ne	fe64 <_Unwind_Find_FDE@@GCC_3.0+0x244>  // b.any
    fe78:	mov	x0, #0x0                   	// #0
    fe7c:	ret
    fe80:	b	2da0 <_Unwind_GetDataRelBase@plt>
    fe84:	nop
    fe88:	and	w5, w0, #0xff
    fe8c:	cmp	w5, #0x50
    fe90:	b.eq	ffa8 <_Unwind_Find_FDE@@GCC_3.0+0x388>  // b.none
    fe94:	and	w4, w5, #0xf
    fe98:	cmp	w4, #0x4
    fe9c:	b.eq	feb8 <_Unwind_Find_FDE@@GCC_3.0+0x298>  // b.none
    fea0:	b.ls	fecc <_Unwind_Find_FDE@@GCC_3.0+0x2ac>  // b.plast
    fea4:	cmp	w4, #0xb
    fea8:	b.eq	ffcc <_Unwind_Find_FDE@@GCC_3.0+0x3ac>  // b.none
    feac:	b.ls	ff28 <_Unwind_Find_FDE@@GCC_3.0+0x308>  // b.plast
    feb0:	cmp	w4, #0xc
    feb4:	b.ne	ffdc <_Unwind_Find_FDE@@GCC_3.0+0x3bc>  // b.any
    feb8:	mov	x0, x2
    febc:	ldr	x4, [x0], #8
    fec0:	cbnz	x4, ff88 <_Unwind_Find_FDE@@GCC_3.0+0x368>
    fec4:	str	x4, [x3]
    fec8:	ret
    fecc:	cmp	w4, #0x2
    fed0:	b.eq	ffbc <_Unwind_Find_FDE@@GCC_3.0+0x39c>  // b.none
    fed4:	b.ls	fef0 <_Unwind_Find_FDE@@GCC_3.0+0x2d0>  // b.plast
    fed8:	cmp	w4, #0x3
    fedc:	b.ne	ffdc <_Unwind_Find_FDE@@GCC_3.0+0x3bc>  // b.any
    fee0:	mov	x0, x2
    fee4:	ldr	w4, [x0], #4
    fee8:	cbz	x4, fec4 <_Unwind_Find_FDE@@GCC_3.0+0x2a4>
    feec:	b	ff88 <_Unwind_Find_FDE@@GCC_3.0+0x368>
    fef0:	cbz	w4, feb8 <_Unwind_Find_FDE@@GCC_3.0+0x298>
    fef4:	cmp	w4, #0x1
    fef8:	b.ne	ffdc <_Unwind_Find_FDE@@GCC_3.0+0x3bc>  // b.any
    fefc:	mov	x0, x2
    ff00:	mov	x4, #0x0                   	// #0
    ff04:	mov	w7, #0x0                   	// #0
    ff08:	ldrb	w8, [x0], #1
    ff0c:	and	x6, x8, #0x7f
    ff10:	lsl	x6, x6, x7
    ff14:	add	w7, w7, #0x7
    ff18:	orr	x4, x4, x6
    ff1c:	tbnz	w8, #7, ff08 <_Unwind_Find_FDE@@GCC_3.0+0x2e8>
    ff20:	cbz	x4, fec4 <_Unwind_Find_FDE@@GCC_3.0+0x2a4>
    ff24:	b	ff88 <_Unwind_Find_FDE@@GCC_3.0+0x368>
    ff28:	cmp	w4, #0x9
    ff2c:	b.eq	ff48 <_Unwind_Find_FDE@@GCC_3.0+0x328>  // b.none
    ff30:	cmp	w4, #0xa
    ff34:	b.ne	ffdc <_Unwind_Find_FDE@@GCC_3.0+0x3bc>  // b.any
    ff38:	mov	x0, x2
    ff3c:	ldrsh	x4, [x0], #2
    ff40:	cbz	x4, fec4 <_Unwind_Find_FDE@@GCC_3.0+0x2a4>
    ff44:	b	ff88 <_Unwind_Find_FDE@@GCC_3.0+0x368>
    ff48:	mov	x0, x2
    ff4c:	mov	x4, #0x0                   	// #0
    ff50:	mov	w7, #0x0                   	// #0
    ff54:	ldrb	w8, [x0], #1
    ff58:	and	x6, x8, #0x7f
    ff5c:	lsl	x6, x6, x7
    ff60:	add	w7, w7, #0x7
    ff64:	orr	x4, x4, x6
    ff68:	tbnz	w8, #7, ff54 <_Unwind_Find_FDE@@GCC_3.0+0x334>
    ff6c:	cmp	w7, #0x3f
    ff70:	b.hi	fec0 <_Unwind_Find_FDE@@GCC_3.0+0x2a0>  // b.pmore
    ff74:	tbz	w8, #6, fec0 <_Unwind_Find_FDE@@GCC_3.0+0x2a0>
    ff78:	mov	x6, #0xffffffffffffffff    	// #-1
    ff7c:	lsl	x7, x6, x7
    ff80:	orr	x4, x4, x7
    ff84:	nop
    ff88:	and	w6, w5, #0x70
    ff8c:	cmp	w6, #0x10
    ff90:	csel	x1, x2, x1, eq  // eq = none
    ff94:	add	x4, x4, x1
    ff98:	tbz	w5, #7, fec4 <_Unwind_Find_FDE@@GCC_3.0+0x2a4>
    ff9c:	ldr	x4, [x4]
    ffa0:	str	x4, [x3]
    ffa4:	ret
    ffa8:	add	x0, x2, #0x7
    ffac:	and	x0, x0, #0xfffffffffffffff8
    ffb0:	ldr	x4, [x0], #8
    ffb4:	str	x4, [x3]
    ffb8:	ret
    ffbc:	mov	x0, x2
    ffc0:	ldrh	w4, [x0], #2
    ffc4:	cbz	x4, fec4 <_Unwind_Find_FDE@@GCC_3.0+0x2a4>
    ffc8:	b	ff88 <_Unwind_Find_FDE@@GCC_3.0+0x368>
    ffcc:	mov	x0, x2
    ffd0:	ldrsw	x4, [x0], #4
    ffd4:	cbz	x4, fec4 <_Unwind_Find_FDE@@GCC_3.0+0x2a4>
    ffd8:	b	ff88 <_Unwind_Find_FDE@@GCC_3.0+0x368>
    ffdc:	stp	x29, x30, [sp, #-16]!
    ffe0:	mov	x29, sp
    ffe4:	bl	2c50 <abort@plt>

000000000000ffe8 <__gcc_personality_v0@@GCC_3.3.1>:
    ffe8:	stp	x29, x30, [sp, #-160]!
    ffec:	cmp	w0, #0x1
    fff0:	mov	x29, sp
    fff4:	str	wzr, [sp, #84]
    fff8:	b.ne	1000c <__gcc_personality_v0@@GCC_3.3.1+0x24>  // b.any
    fffc:	tbnz	w1, #1, 10018 <__gcc_personality_v0@@GCC_3.3.1+0x30>
   10000:	mov	w0, #0x8                   	// #8
   10004:	ldp	x29, x30, [sp], #160
   10008:	ret
   1000c:	mov	w0, #0x3                   	// #3
   10010:	ldp	x29, x30, [sp], #160
   10014:	ret
   10018:	mov	x0, x4
   1001c:	stp	x19, x20, [sp, #16]
   10020:	mov	x20, x4
   10024:	stp	x21, x22, [sp, #32]
   10028:	mov	x22, x3
   1002c:	bl	2af0 <_Unwind_GetLanguageSpecificData@plt>
   10030:	mov	x19, x0
   10034:	cbz	x0, 101d8 <__gcc_personality_v0@@GCC_3.3.1+0x1f0>
   10038:	mov	x0, #0x0                   	// #0
   1003c:	cbz	x20, 10048 <__gcc_personality_v0@@GCC_3.3.1+0x60>
   10040:	mov	x0, x20
   10044:	bl	2ab0 <_Unwind_GetRegionStart@plt>
   10048:	str	x0, [sp, #112]
   1004c:	ldrb	w21, [x19], #1
   10050:	cmp	w21, #0xff
   10054:	b.eq	10208 <__gcc_personality_v0@@GCC_3.3.1+0x220>  // b.none
   10058:	mov	x1, x20
   1005c:	mov	w0, w21
   10060:	bl	fe20 <_Unwind_Find_FDE@@GCC_3.0+0x200>
   10064:	mov	x1, x0
   10068:	mov	x2, x19
   1006c:	mov	w0, w21
   10070:	add	x3, sp, #0x78
   10074:	bl	fe88 <_Unwind_Find_FDE@@GCC_3.0+0x268>
   10078:	mov	x19, x0
   1007c:	ldrb	w0, [x19], #1
   10080:	strb	w0, [sp, #152]
   10084:	cmp	w0, #0xff
   10088:	b.eq	10210 <__gcc_personality_v0@@GCC_3.3.1+0x228>  // b.none
   1008c:	mov	x3, #0x0                   	// #0
   10090:	mov	w1, #0x0                   	// #0
   10094:	nop
   10098:	ldrb	w2, [x19], #1
   1009c:	and	x0, x2, #0x7f
   100a0:	lsl	x0, x0, x1
   100a4:	add	w1, w1, #0x7
   100a8:	orr	x3, x3, x0
   100ac:	tbnz	w2, #7, 10098 <__gcc_personality_v0@@GCC_3.3.1+0xb0>
   100b0:	add	x3, x19, x3
   100b4:	str	x3, [sp, #136]
   100b8:	ldrb	w0, [x19], #1
   100bc:	mov	x3, #0x0                   	// #0
   100c0:	mov	w1, #0x0                   	// #0
   100c4:	strb	w0, [sp, #153]
   100c8:	ldrb	w2, [x19], #1
   100cc:	and	x0, x2, #0x7f
   100d0:	lsl	x0, x0, x1
   100d4:	add	w1, w1, #0x7
   100d8:	orr	x3, x3, x0
   100dc:	tbnz	w2, #7, 100c8 <__gcc_personality_v0@@GCC_3.3.1+0xe0>
   100e0:	add	x3, x19, x3
   100e4:	add	x1, sp, #0x54
   100e8:	mov	x0, x20
   100ec:	str	x3, [sp, #144]
   100f0:	bl	2c00 <_Unwind_GetIPInfo@plt>
   100f4:	ldr	w2, [sp, #84]
   100f8:	ldr	x1, [sp, #144]
   100fc:	cmp	w2, #0x0
   10100:	cset	x2, eq  // eq = none
   10104:	sub	x21, x0, x2
   10108:	cmp	x1, x19
   1010c:	b.ls	101d8 <__gcc_personality_v0@@GCC_3.3.1+0x1f0>  // b.plast
   10110:	stp	x23, x24, [sp, #48]
   10114:	add	x24, sp, #0x60
   10118:	add	x23, sp, #0x68
   1011c:	stp	x25, x26, [sp, #64]
   10120:	add	x25, sp, #0x58
   10124:	nop
   10128:	ldrb	w26, [sp, #153]
   1012c:	mov	x1, #0x0                   	// #0
   10130:	mov	w0, w26
   10134:	bl	fe20 <_Unwind_Find_FDE@@GCC_3.0+0x200>
   10138:	mov	x2, x19
   1013c:	mov	x3, x25
   10140:	mov	x1, x0
   10144:	mov	w0, w26
   10148:	bl	fe88 <_Unwind_Find_FDE@@GCC_3.0+0x268>
   1014c:	ldrb	w26, [sp, #153]
   10150:	mov	x19, x0
   10154:	mov	x1, #0x0                   	// #0
   10158:	mov	w0, w26
   1015c:	bl	fe20 <_Unwind_Find_FDE@@GCC_3.0+0x200>
   10160:	mov	x2, x19
   10164:	mov	x3, x24
   10168:	mov	x1, x0
   1016c:	mov	w0, w26
   10170:	bl	fe88 <_Unwind_Find_FDE@@GCC_3.0+0x268>
   10174:	ldrb	w26, [sp, #153]
   10178:	mov	x19, x0
   1017c:	mov	x1, #0x0                   	// #0
   10180:	mov	w0, w26
   10184:	bl	fe20 <_Unwind_Find_FDE@@GCC_3.0+0x200>
   10188:	mov	x2, x19
   1018c:	mov	x1, x0
   10190:	mov	x3, x23
   10194:	mov	w0, w26
   10198:	bl	fe88 <_Unwind_Find_FDE@@GCC_3.0+0x268>
   1019c:	mov	x19, x0
   101a0:	ldrsb	w0, [x19], #1
   101a4:	tbnz	w0, #31, 101a0 <__gcc_personality_v0@@GCC_3.3.1+0x1b8>
   101a8:	ldr	x1, [sp, #88]
   101ac:	ldr	x0, [sp, #112]
   101b0:	add	x0, x0, x1
   101b4:	cmp	x0, x21
   101b8:	b.ls	101e8 <__gcc_personality_v0@@GCC_3.3.1+0x200>  // b.plast
   101bc:	mov	w0, #0x8                   	// #8
   101c0:	ldp	x19, x20, [sp, #16]
   101c4:	ldp	x21, x22, [sp, #32]
   101c8:	ldp	x23, x24, [sp, #48]
   101cc:	ldp	x25, x26, [sp, #64]
   101d0:	ldp	x29, x30, [sp], #160
   101d4:	ret
   101d8:	mov	w0, #0x8                   	// #8
   101dc:	ldp	x19, x20, [sp, #16]
   101e0:	ldp	x21, x22, [sp, #32]
   101e4:	b	10004 <__gcc_personality_v0@@GCC_3.3.1+0x1c>
   101e8:	ldr	x1, [sp, #96]
   101ec:	add	x0, x0, x1
   101f0:	cmp	x0, x21
   101f4:	b.hi	10218 <__gcc_personality_v0@@GCC_3.3.1+0x230>  // b.pmore
   101f8:	ldr	x0, [sp, #144]
   101fc:	cmp	x0, x19
   10200:	b.hi	10128 <__gcc_personality_v0@@GCC_3.3.1+0x140>  // b.pmore
   10204:	b	1022c <__gcc_personality_v0@@GCC_3.3.1+0x244>
   10208:	str	x0, [sp, #120]
   1020c:	b	1007c <__gcc_personality_v0@@GCC_3.3.1+0x94>
   10210:	str	xzr, [sp, #136]
   10214:	b	100b8 <__gcc_personality_v0@@GCC_3.3.1+0xd0>
   10218:	ldr	x0, [sp, #104]
   1021c:	cbz	x0, 101bc <__gcc_personality_v0@@GCC_3.3.1+0x1d4>
   10220:	ldr	x19, [sp, #120]
   10224:	adds	x19, x0, x19
   10228:	b.ne	10244 <__gcc_personality_v0@@GCC_3.3.1+0x25c>  // b.any
   1022c:	mov	w0, #0x8                   	// #8
   10230:	ldp	x19, x20, [sp, #16]
   10234:	ldp	x21, x22, [sp, #32]
   10238:	ldp	x23, x24, [sp, #48]
   1023c:	ldp	x25, x26, [sp, #64]
   10240:	b	10004 <__gcc_personality_v0@@GCC_3.3.1+0x1c>
   10244:	mov	x2, x22
   10248:	mov	x0, x20
   1024c:	mov	w1, #0x0                   	// #0
   10250:	bl	2d40 <_Unwind_SetGR@plt>
   10254:	mov	x2, #0x0                   	// #0
   10258:	mov	x0, x20
   1025c:	mov	w1, #0x1                   	// #1
   10260:	bl	2d40 <_Unwind_SetGR@plt>
   10264:	mov	x0, x20
   10268:	mov	x1, x19
   1026c:	bl	2ae0 <_Unwind_SetIP@plt>
   10270:	mov	w0, #0x7                   	// #7
   10274:	ldp	x19, x20, [sp, #16]
   10278:	ldp	x21, x22, [sp, #32]
   1027c:	ldp	x23, x24, [sp, #48]
   10280:	ldp	x25, x26, [sp, #64]
   10284:	b	10010 <__gcc_personality_v0@@GCC_3.3.1+0x28>
   10288:	stp	x29, x30, [sp, #-16]!
   1028c:	adrp	x1, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
   10290:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
   10294:	mov	x29, sp
   10298:	add	x1, x1, #0x2b8
   1029c:	add	x0, x0, #0x410
   102a0:	bl	2c30 <pthread_key_create@plt>
   102a4:	cbnz	w0, 102b0 <__gcc_personality_v0@@GCC_3.3.1+0x2c8>
   102a8:	ldp	x29, x30, [sp], #16
   102ac:	ret
   102b0:	bl	2c50 <abort@plt>
   102b4:	nop
   102b8:	stp	x29, x30, [sp, #-48]!
   102bc:	mov	x29, sp
   102c0:	str	x21, [sp, #32]
   102c4:	ldr	x21, [x0]
   102c8:	stp	x19, x20, [sp, #16]
   102cc:	mov	x20, x0
   102d0:	cbz	x21, 102f4 <__gcc_personality_v0@@GCC_3.3.1+0x30c>
   102d4:	mov	x19, #0x1                   	// #1
   102d8:	ldr	x1, [x20, x19, lsl #3]
   102dc:	cbz	x1, 102e8 <__gcc_personality_v0@@GCC_3.3.1+0x300>
   102e0:	ldur	x0, [x1, #-8]
   102e4:	bl	2cc0 <free@plt>
   102e8:	cmp	x21, x19
   102ec:	add	x19, x19, #0x1
   102f0:	b.ne	102d8 <__gcc_personality_v0@@GCC_3.3.1+0x2f0>  // b.any
   102f4:	mov	x0, x20
   102f8:	ldp	x19, x20, [sp, #16]
   102fc:	ldr	x21, [sp, #32]
   10300:	ldp	x29, x30, [sp], #48
   10304:	b	2cc0 <free@plt>
   10308:	stp	x29, x30, [sp, #-48]!
   1030c:	mov	x29, sp
   10310:	stp	x19, x20, [sp, #16]
   10314:	mov	x19, x0
   10318:	ldr	x20, [x0, #8]
   1031c:	str	x21, [sp, #32]
   10320:	ldr	x21, [x0]
   10324:	cmp	x20, #0x8
   10328:	b.hi	1036c <__gcc_personality_v0@@GCC_3.3.1+0x384>  // b.pmore
   1032c:	add	x0, x21, #0x8
   10330:	bl	2b70 <malloc@plt>
   10334:	cbz	x0, 103c0 <__gcc_personality_v0@@GCC_3.3.1+0x3d8>
   10338:	ldr	x1, [x19, #24]
   1033c:	str	x0, [x0]
   10340:	add	x3, x0, #0x8
   10344:	mov	x2, x21
   10348:	cbz	x1, 1039c <__gcc_personality_v0@@GCC_3.3.1+0x3b4>
   1034c:	mov	x0, x3
   10350:	bl	2aa0 <memcpy@plt>
   10354:	mov	x3, x0
   10358:	mov	x0, x3
   1035c:	ldp	x19, x20, [sp, #16]
   10360:	ldr	x21, [sp, #32]
   10364:	ldp	x29, x30, [sp], #48
   10368:	ret
   1036c:	add	x0, x20, x21
   10370:	add	x0, x0, #0x7
   10374:	bl	2b70 <malloc@plt>
   10378:	cbz	x0, 103c0 <__gcc_personality_v0@@GCC_3.3.1+0x3d8>
   1037c:	add	x3, x20, #0x7
   10380:	neg	x20, x20
   10384:	add	x3, x0, x3
   10388:	mov	x2, x21
   1038c:	and	x3, x3, x20
   10390:	stur	x0, [x3, #-8]
   10394:	ldr	x1, [x19, #24]
   10398:	cbnz	x1, 1034c <__gcc_personality_v0@@GCC_3.3.1+0x364>
   1039c:	mov	x0, x3
   103a0:	mov	w1, #0x0                   	// #0
   103a4:	bl	2ba0 <memset@plt>
   103a8:	mov	x3, x0
   103ac:	mov	x0, x3
   103b0:	ldp	x19, x20, [sp, #16]
   103b4:	ldr	x21, [sp, #32]
   103b8:	ldp	x29, x30, [sp], #48
   103bc:	ret
   103c0:	bl	2c50 <abort@plt>
   103c4:	nop

00000000000103c8 <__emutls_get_address@@GCC_4.3.0>:
   103c8:	stp	x29, x30, [sp, #-64]!
   103cc:	adrp	x1, 22000 <__emutls_register_common@@GCC_4.3.0+0x11ac0>
   103d0:	mov	x29, sp
   103d4:	ldr	x1, [x1, #4032]
   103d8:	stp	x19, x20, [sp, #16]
   103dc:	mov	x20, x0
   103e0:	cbz	x1, 10438 <__emutls_get_address@@GCC_4.3.0+0x70>
   103e4:	add	x19, x0, #0x10
   103e8:	stp	x21, x22, [sp, #32]
   103ec:	ldar	x21, [x19]
   103f0:	adrp	x22, 23000 <__emutls_register_common@@GCC_4.3.0+0x12ac0>
   103f4:	cbz	x21, 10450 <__emutls_get_address@@GCC_4.3.0+0x88>
   103f8:	ldr	w0, [x22, #1040]
   103fc:	bl	2b80 <pthread_getspecific@plt>
   10400:	mov	x19, x0
   10404:	cbz	x0, 1048c <__emutls_get_address@@GCC_4.3.0+0xc4>
   10408:	stp	x23, x24, [sp, #48]
   1040c:	ldr	x23, [x0]
   10410:	cmp	x23, x21
   10414:	b.cc	104d0 <__emutls_get_address@@GCC_4.3.0+0x108>  // b.lo, b.ul, b.last
   10418:	ldp	x23, x24, [sp, #48]
   1041c:	ldr	x1, [x19, x21, lsl #3]
   10420:	cbz	x1, 104b8 <__emutls_get_address@@GCC_4.3.0+0xf0>
   10424:	ldp	x21, x22, [sp, #32]
   10428:	mov	x0, x1
   1042c:	ldp	x19, x20, [sp, #16]
   10430:	ldp	x29, x30, [sp], #64
   10434:	ret
   10438:	ldr	x1, [x0, #16]
   1043c:	cbnz	x1, 10428 <__emutls_get_address@@GCC_4.3.0+0x60>
   10440:	bl	10308 <__gcc_personality_v0@@GCC_3.3.1+0x320>
   10444:	mov	x1, x0
   10448:	str	x0, [x20, #16]
   1044c:	b	10428 <__emutls_get_address@@GCC_4.3.0+0x60>
   10450:	adrp	x1, 10000 <__gcc_personality_v0@@GCC_3.3.1+0x18>
   10454:	add	x1, x1, #0x288
   10458:	stp	x23, x24, [sp, #48]
   1045c:	add	x23, x22, #0x410
   10460:	add	x0, x23, #0x4
   10464:	bl	2c70 <pthread_once@plt>
   10468:	add	x0, x23, #0x8
   1046c:	bl	2d50 <pthread_mutex_lock@plt>
   10470:	ldr	x21, [x20, #16]
   10474:	cbz	x21, 10520 <__emutls_get_address@@GCC_4.3.0+0x158>
   10478:	add	x0, x22, #0x410
   1047c:	add	x0, x0, #0x8
   10480:	bl	2d60 <pthread_mutex_unlock@plt>
   10484:	ldp	x23, x24, [sp, #48]
   10488:	b	103f8 <__emutls_get_address@@GCC_4.3.0+0x30>
   1048c:	add	x0, x21, #0x21
   10490:	mov	x1, #0x8                   	// #8
   10494:	bl	2be0 <calloc@plt>
   10498:	mov	x19, x0
   1049c:	add	x2, x21, #0x20
   104a0:	cbz	x0, 10534 <__emutls_get_address@@GCC_4.3.0+0x16c>
   104a4:	ldr	w0, [x22, #1040]
   104a8:	mov	x1, x19
   104ac:	str	x2, [x19]
   104b0:	bl	2ca0 <pthread_setspecific@plt>
   104b4:	b	1041c <__emutls_get_address@@GCC_4.3.0+0x54>
   104b8:	mov	x0, x20
   104bc:	bl	10308 <__gcc_personality_v0@@GCC_3.3.1+0x320>
   104c0:	mov	x1, x0
   104c4:	str	x0, [x19, x21, lsl #3]
   104c8:	ldp	x21, x22, [sp, #32]
   104cc:	b	10428 <__emutls_get_address@@GCC_4.3.0+0x60>
   104d0:	lsl	x24, x23, #1
   104d4:	add	x1, x21, #0x20
   104d8:	cmp	x21, x24
   104dc:	csel	x24, x1, x24, hi  // hi = pmore
   104e0:	add	x1, x24, #0x1
   104e4:	lsl	x1, x1, #3
   104e8:	bl	2c10 <realloc@plt>
   104ec:	mov	x19, x0
   104f0:	cbz	x0, 10538 <__emutls_get_address@@GCC_4.3.0+0x170>
   104f4:	sub	x2, x24, x23
   104f8:	str	x24, [x0], #8
   104fc:	mov	w1, #0x0                   	// #0
   10500:	lsl	x2, x2, #3
   10504:	add	x0, x0, x23, lsl #3
   10508:	bl	2ba0 <memset@plt>
   1050c:	ldr	w0, [x22, #1040]
   10510:	mov	x1, x19
   10514:	bl	2ca0 <pthread_setspecific@plt>
   10518:	ldp	x23, x24, [sp, #48]
   1051c:	b	1041c <__emutls_get_address@@GCC_4.3.0+0x54>
   10520:	ldr	x21, [x23, #56]
   10524:	add	x21, x21, #0x1
   10528:	str	x21, [x23, #56]
   1052c:	stlr	x21, [x19]
   10530:	b	10478 <__emutls_get_address@@GCC_4.3.0+0xb0>
   10534:	stp	x23, x24, [sp, #48]
   10538:	bl	2c50 <abort@plt>
   1053c:	nop

0000000000010540 <__emutls_register_common@@GCC_4.3.0>:
   10540:	ldr	x4, [x0]
   10544:	cmp	x4, x1
   10548:	b.cs	10554 <__emutls_register_common@@GCC_4.3.0+0x14>  // b.hs, b.nlast
   1054c:	str	x1, [x0]
   10550:	str	xzr, [x0, #24]
   10554:	ldr	x4, [x0, #8]
   10558:	cmp	x4, x2
   1055c:	b.cs	10564 <__emutls_register_common@@GCC_4.3.0+0x24>  // b.hs, b.nlast
   10560:	str	x2, [x0, #8]
   10564:	cbz	x3, 10574 <__emutls_register_common@@GCC_4.3.0+0x34>
   10568:	ldr	x2, [x0]
   1056c:	cmp	x2, x1
   10570:	b.eq	10578 <__emutls_register_common@@GCC_4.3.0+0x38>  // b.none
   10574:	ret
   10578:	str	x3, [x0, #24]
   1057c:	ret

Disassembly of section .fini:

0000000000010580 <.fini>:
   10580:	stp	x29, x30, [sp, #-16]!
   10584:	mov	x29, sp
   10588:	ldp	x29, x30, [sp], #16
   1058c:	ret
