
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//gcry_crc.module_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <crc32_init>:
   0:	mov	w1, #0xffffffff            	// #-1
   4:	str	w1, [x0]
   8:	ret

000000000000000c <crc32_write>:
   c:	cmp	x1, #0x0
  10:	ccmp	x2, #0x0, #0x4, ne  // ne = any
  14:	b.eq	264 <crc32_write+0x258>  // b.none
  18:	ldr	w3, [x0]
  1c:	cmp	x2, #0xf
  20:	b.ls	268 <crc32_write+0x25c>  // b.plast
  24:	sub	x6, x2, #0x10
  28:	and	x6, x6, #0xfffffffffffffff0
  2c:	add	x6, x6, #0x10
  30:	add	x6, x1, x6
  34:	adrp	x7, 0 <crc32_init>
  38:	ldrb	w5, [x1, #3]
  3c:	ldrb	w4, [x1, #2]
  40:	lsl	w4, w4, #16
  44:	orr	w5, w4, w5, lsl #24
  48:	ldrb	w4, [x1, #1]
  4c:	ldrb	w8, [x1]
  50:	orr	w4, w8, w4, lsl #8
  54:	orr	w5, w5, w4
  58:	eor	w5, w5, w3
  5c:	ldrb	w4, [x1, #7]
  60:	ldrb	w3, [x1, #6]
  64:	lsl	w3, w3, #16
  68:	orr	w4, w3, w4, lsl #24
  6c:	ldrb	w3, [x1, #5]
  70:	ldrb	w8, [x1, #4]
  74:	orr	w3, w8, w3, lsl #8
  78:	orr	w4, w4, w3
  7c:	ldr	x3, [x7]
  80:	lsr	w8, w5, #24
  84:	ldr	w8, [x3, x8, lsl #2]
  88:	eor	w4, w4, w8
  8c:	ubfx	x8, x5, #8, #8
  90:	add	x8, x8, #0x200
  94:	ubfx	x9, x5, #16, #8
  98:	add	x9, x9, #0x100
  9c:	ldr	w8, [x3, x8, lsl #2]
  a0:	ldr	w9, [x3, x9, lsl #2]
  a4:	eor	w8, w8, w9
  a8:	eor	w4, w4, w8
  ac:	add	x5, x3, w5, uxtb #2
  b0:	ldr	w5, [x5, #3072]
  b4:	eor	w4, w4, w5
  b8:	ldrb	w5, [x1, #11]
  bc:	ldrb	w8, [x1, #10]
  c0:	lsl	w8, w8, #16
  c4:	orr	w5, w8, w5, lsl #24
  c8:	ldrb	w8, [x1, #9]
  cc:	ldrb	w9, [x1, #8]
  d0:	orr	w8, w9, w8, lsl #8
  d4:	orr	w5, w5, w8
  d8:	lsr	w8, w4, #24
  dc:	ldr	w8, [x3, x8, lsl #2]
  e0:	eor	w5, w5, w8
  e4:	ubfx	x8, x4, #8, #8
  e8:	add	x8, x8, #0x200
  ec:	ubfx	x9, x4, #16, #8
  f0:	add	x9, x9, #0x100
  f4:	ldr	w8, [x3, x8, lsl #2]
  f8:	ldr	w9, [x3, x9, lsl #2]
  fc:	eor	w8, w8, w9
 100:	eor	w5, w5, w8
 104:	add	x4, x3, w4, uxtb #2
 108:	ldr	w4, [x4, #3072]
 10c:	eor	w5, w5, w4
 110:	ldrb	w4, [x1, #15]
 114:	ldrb	w8, [x1, #14]
 118:	lsl	w8, w8, #16
 11c:	orr	w4, w8, w4, lsl #24
 120:	ldrb	w8, [x1, #13]
 124:	ldrb	w9, [x1, #12]
 128:	orr	w8, w9, w8, lsl #8
 12c:	orr	w4, w4, w8
 130:	lsr	w8, w5, #24
 134:	ldr	w8, [x3, x8, lsl #2]
 138:	eor	w4, w4, w8
 13c:	ubfx	x8, x5, #8, #8
 140:	add	x8, x8, #0x200
 144:	ubfx	x9, x5, #16, #8
 148:	add	x9, x9, #0x100
 14c:	ldr	w8, [x3, x8, lsl #2]
 150:	ldr	w9, [x3, x9, lsl #2]
 154:	eor	w8, w8, w9
 158:	eor	w4, w4, w8
 15c:	add	x5, x3, w5, uxtb #2
 160:	ldr	w5, [x5, #3072]
 164:	eor	w4, w4, w5
 168:	ubfx	x5, x4, #8, #8
 16c:	add	x5, x5, #0x200
 170:	ubfx	x8, x4, #16, #8
 174:	add	x8, x8, #0x100
 178:	ldr	w5, [x3, x5, lsl #2]
 17c:	ldr	w8, [x3, x8, lsl #2]
 180:	eor	w5, w5, w8
 184:	add	x8, x3, w4, uxtb #2
 188:	lsr	w4, w4, #24
 18c:	ldr	w8, [x8, #3072]
 190:	ldr	w3, [x3, x4, lsl #2]
 194:	eor	w3, w8, w3
 198:	eor	w3, w5, w3
 19c:	add	x1, x1, #0x10
 1a0:	cmp	x6, x1
 1a4:	b.ne	38 <crc32_write+0x2c>  // b.any
 1a8:	and	x7, x2, #0xf
 1ac:	mov	x1, x6
 1b0:	tst	x2, #0xc
 1b4:	b.eq	234 <crc32_write+0x228>  // b.none
 1b8:	sub	x1, x7, #0x4
 1bc:	and	x1, x1, #0xfffffffffffffffc
 1c0:	add	x1, x1, #0x4
 1c4:	add	x1, x6, x1
 1c8:	adrp	x8, 0 <crc32_init>
 1cc:	ldrb	w5, [x6, #3]
 1d0:	ldrb	w2, [x6, #2]
 1d4:	lsl	w2, w2, #16
 1d8:	orr	w5, w2, w5, lsl #24
 1dc:	ldrb	w2, [x6, #1]
 1e0:	ldrb	w4, [x6], #4
 1e4:	orr	w2, w4, w2, lsl #8
 1e8:	orr	w5, w5, w2
 1ec:	eor	w5, w5, w3
 1f0:	ldr	x2, [x8]
 1f4:	ubfx	x3, x5, #8, #8
 1f8:	add	x3, x3, #0x200
 1fc:	ubfx	x4, x5, #16, #8
 200:	add	x4, x4, #0x100
 204:	ldr	w3, [x2, x3, lsl #2]
 208:	ldr	w4, [x2, x4, lsl #2]
 20c:	eor	w4, w3, w4
 210:	add	x3, x2, w5, uxtb #2
 214:	lsr	w5, w5, #24
 218:	ldr	w3, [x3, #3072]
 21c:	ldr	w5, [x2, x5, lsl #2]
 220:	eor	w5, w3, w5
 224:	eor	w3, w5, w4
 228:	cmp	x6, x1
 22c:	b.ne	1cc <crc32_write+0x1c0>  // b.any
 230:	and	x7, x7, #0x3
 234:	cbz	x7, 260 <crc32_write+0x254>
 238:	add	x7, x1, x7
 23c:	adrp	x5, 0 <crc32_init>
 240:	ldr	x4, [x5]
 244:	ldrb	w2, [x1], #1
 248:	eor	x2, x3, x2
 24c:	and	x2, x2, #0xff
 250:	ldr	w2, [x4, x2, lsl #2]
 254:	eor	w3, w2, w3, lsr #8
 258:	cmp	x1, x7
 25c:	b.ne	240 <crc32_write+0x234>  // b.any
 260:	str	w3, [x0]
 264:	ret
 268:	mov	x6, x1
 26c:	mov	x7, x2
 270:	cmp	x2, #0x3
 274:	b.hi	1b8 <crc32_write+0x1ac>  // b.pmore
 278:	b	238 <crc32_write+0x22c>
 27c:	nop
	...

0000000000000288 <crc32_read>:
 288:	add	x0, x0, #0x4
 28c:	ret

0000000000000290 <crc32_final>:
 290:	ldr	w1, [x0]
 294:	mvn	w1, w1
 298:	str	w1, [x0]
 29c:	lsr	w2, w1, #24
 2a0:	strb	w2, [x0, #4]
 2a4:	lsr	w2, w1, #16
 2a8:	strb	w2, [x0, #5]
 2ac:	lsr	w2, w1, #8
 2b0:	strb	w2, [x0, #6]
 2b4:	strb	w1, [x0, #7]
 2b8:	ret

00000000000002bc <crc32rfc1510_init>:
 2bc:	str	wzr, [x0]
 2c0:	ret

00000000000002c4 <crc32rfc1510_final>:
 2c4:	ldr	w1, [x0]
 2c8:	lsr	w2, w1, #24
 2cc:	strb	w2, [x0, #4]
 2d0:	lsr	w2, w1, #16
 2d4:	strb	w2, [x0, #5]
 2d8:	lsr	w2, w1, #8
 2dc:	strb	w2, [x0, #6]
 2e0:	strb	w1, [x0, #7]
 2e4:	ret

00000000000002e8 <crc24rfc2440_init>:
 2e8:	mov	w1, #0x4b7                 	// #1207
 2ec:	movk	w1, #0xce, lsl #16
 2f0:	str	w1, [x0]
 2f4:	ret

00000000000002f8 <crc24rfc2440_write>:
 2f8:	cmp	x1, #0x0
 2fc:	ccmp	x2, #0x0, #0x4, ne  // ne = any
 300:	b.eq	550 <crc24rfc2440_write+0x258>  // b.none
 304:	ldr	w3, [x0]
 308:	cmp	x2, #0xf
 30c:	b.ls	554 <crc24rfc2440_write+0x25c>  // b.plast
 310:	sub	x6, x2, #0x10
 314:	and	x6, x6, #0xfffffffffffffff0
 318:	add	x6, x6, #0x10
 31c:	add	x6, x1, x6
 320:	adrp	x7, 0 <crc32_init>
 324:	ldrb	w5, [x1, #3]
 328:	ldrb	w4, [x1, #2]
 32c:	lsl	w4, w4, #16
 330:	orr	w5, w4, w5, lsl #24
 334:	ldrb	w4, [x1, #1]
 338:	ldrb	w8, [x1]
 33c:	orr	w4, w8, w4, lsl #8
 340:	orr	w5, w5, w4
 344:	eor	w5, w5, w3
 348:	ldrb	w4, [x1, #7]
 34c:	ldrb	w3, [x1, #6]
 350:	lsl	w3, w3, #16
 354:	orr	w4, w3, w4, lsl #24
 358:	ldrb	w3, [x1, #5]
 35c:	ldrb	w8, [x1, #4]
 360:	orr	w3, w8, w3, lsl #8
 364:	orr	w4, w4, w3
 368:	ldr	x3, [x7]
 36c:	lsr	w8, w5, #24
 370:	ldr	w8, [x3, x8, lsl #2]
 374:	eor	w4, w4, w8
 378:	ubfx	x8, x5, #8, #8
 37c:	add	x8, x8, #0x200
 380:	ubfx	x9, x5, #16, #8
 384:	add	x9, x9, #0x100
 388:	ldr	w8, [x3, x8, lsl #2]
 38c:	ldr	w9, [x3, x9, lsl #2]
 390:	eor	w8, w8, w9
 394:	eor	w4, w4, w8
 398:	add	x5, x3, w5, uxtb #2
 39c:	ldr	w5, [x5, #3072]
 3a0:	eor	w4, w4, w5
 3a4:	ldrb	w5, [x1, #11]
 3a8:	ldrb	w8, [x1, #10]
 3ac:	lsl	w8, w8, #16
 3b0:	orr	w5, w8, w5, lsl #24
 3b4:	ldrb	w8, [x1, #9]
 3b8:	ldrb	w9, [x1, #8]
 3bc:	orr	w8, w9, w8, lsl #8
 3c0:	orr	w5, w5, w8
 3c4:	lsr	w8, w4, #24
 3c8:	ldr	w8, [x3, x8, lsl #2]
 3cc:	eor	w5, w5, w8
 3d0:	ubfx	x8, x4, #8, #8
 3d4:	add	x8, x8, #0x200
 3d8:	ubfx	x9, x4, #16, #8
 3dc:	add	x9, x9, #0x100
 3e0:	ldr	w8, [x3, x8, lsl #2]
 3e4:	ldr	w9, [x3, x9, lsl #2]
 3e8:	eor	w8, w8, w9
 3ec:	eor	w5, w5, w8
 3f0:	add	x4, x3, w4, uxtb #2
 3f4:	ldr	w4, [x4, #3072]
 3f8:	eor	w5, w5, w4
 3fc:	ldrb	w4, [x1, #15]
 400:	ldrb	w8, [x1, #14]
 404:	lsl	w8, w8, #16
 408:	orr	w4, w8, w4, lsl #24
 40c:	ldrb	w8, [x1, #13]
 410:	ldrb	w9, [x1, #12]
 414:	orr	w8, w9, w8, lsl #8
 418:	orr	w4, w4, w8
 41c:	lsr	w8, w5, #24
 420:	ldr	w8, [x3, x8, lsl #2]
 424:	eor	w4, w4, w8
 428:	ubfx	x8, x5, #8, #8
 42c:	add	x8, x8, #0x200
 430:	ubfx	x9, x5, #16, #8
 434:	add	x9, x9, #0x100
 438:	ldr	w8, [x3, x8, lsl #2]
 43c:	ldr	w9, [x3, x9, lsl #2]
 440:	eor	w8, w8, w9
 444:	eor	w4, w4, w8
 448:	add	x5, x3, w5, uxtb #2
 44c:	ldr	w5, [x5, #3072]
 450:	eor	w4, w4, w5
 454:	ubfx	x5, x4, #8, #8
 458:	add	x5, x5, #0x200
 45c:	ubfx	x8, x4, #16, #8
 460:	add	x8, x8, #0x100
 464:	ldr	w5, [x3, x5, lsl #2]
 468:	ldr	w8, [x3, x8, lsl #2]
 46c:	eor	w5, w5, w8
 470:	add	x8, x3, w4, uxtb #2
 474:	lsr	w4, w4, #24
 478:	ldr	w8, [x8, #3072]
 47c:	ldr	w3, [x3, x4, lsl #2]
 480:	eor	w3, w8, w3
 484:	eor	w3, w5, w3
 488:	add	x1, x1, #0x10
 48c:	cmp	x6, x1
 490:	b.ne	324 <crc24rfc2440_write+0x2c>  // b.any
 494:	and	x7, x2, #0xf
 498:	mov	x1, x6
 49c:	tst	x2, #0xc
 4a0:	b.eq	520 <crc24rfc2440_write+0x228>  // b.none
 4a4:	sub	x1, x7, #0x4
 4a8:	and	x1, x1, #0xfffffffffffffffc
 4ac:	add	x1, x1, #0x4
 4b0:	add	x1, x6, x1
 4b4:	adrp	x8, 0 <crc32_init>
 4b8:	ldrb	w5, [x6, #3]
 4bc:	ldrb	w2, [x6, #2]
 4c0:	lsl	w2, w2, #16
 4c4:	orr	w5, w2, w5, lsl #24
 4c8:	ldrb	w2, [x6, #1]
 4cc:	ldrb	w4, [x6], #4
 4d0:	orr	w2, w4, w2, lsl #8
 4d4:	orr	w5, w5, w2
 4d8:	eor	w5, w5, w3
 4dc:	ldr	x2, [x8]
 4e0:	ubfx	x3, x5, #8, #8
 4e4:	add	x3, x3, #0x200
 4e8:	ubfx	x4, x5, #16, #8
 4ec:	add	x4, x4, #0x100
 4f0:	ldr	w3, [x2, x3, lsl #2]
 4f4:	ldr	w4, [x2, x4, lsl #2]
 4f8:	eor	w4, w3, w4
 4fc:	add	x3, x2, w5, uxtb #2
 500:	lsr	w5, w5, #24
 504:	ldr	w3, [x3, #3072]
 508:	ldr	w5, [x2, x5, lsl #2]
 50c:	eor	w5, w3, w5
 510:	eor	w3, w5, w4
 514:	cmp	x6, x1
 518:	b.ne	4b8 <crc24rfc2440_write+0x1c0>  // b.any
 51c:	and	x7, x7, #0x3
 520:	cbz	x7, 54c <crc24rfc2440_write+0x254>
 524:	add	x7, x1, x7
 528:	adrp	x5, 0 <crc32_init>
 52c:	ldr	x4, [x5]
 530:	ldrb	w2, [x1], #1
 534:	eor	x2, x3, x2
 538:	and	x2, x2, #0xff
 53c:	ldr	w2, [x4, x2, lsl #2]
 540:	eor	w3, w2, w3, lsr #8
 544:	cmp	x1, x7
 548:	b.ne	52c <crc24rfc2440_write+0x234>  // b.any
 54c:	str	w3, [x0]
 550:	ret
 554:	mov	x6, x1
 558:	mov	x7, x2
 55c:	cmp	x2, #0x3
 560:	b.hi	4a4 <crc24rfc2440_write+0x1ac>  // b.pmore
 564:	b	524 <crc24rfc2440_write+0x22c>
	...

0000000000000570 <crc24rfc2440_final>:
 570:	ldr	w1, [x0]
 574:	and	w1, w1, #0xffffff
 578:	str	w1, [x0]
 57c:	strb	wzr, [x0, #7]
 580:	lsr	w2, w1, #16
 584:	strb	w2, [x0, #6]
 588:	lsr	w2, w1, #8
 58c:	strb	w2, [x0, #5]
 590:	strb	w1, [x0, #4]
 594:	ret

0000000000000598 <grub_mod_init>:
 598:	stp	x29, x30, [sp, #-32]!
 59c:	mov	x29, sp
 5a0:	str	x19, [sp, #16]
 5a4:	adrp	x0, 0 <crc32_init>
 5a8:	ldr	x19, [x0]
 5ac:	mov	x0, x19
 5b0:	bl	0 <grub_md_register>
 5b4:	add	x0, x19, #0x60
 5b8:	bl	0 <grub_md_register>
 5bc:	add	x0, x19, #0xc0
 5c0:	bl	0 <grub_md_register>
 5c4:	ldr	x19, [sp, #16]
 5c8:	ldp	x29, x30, [sp], #32
 5cc:	ret
	...

00000000000005d8 <grub_mod_fini>:
 5d8:	stp	x29, x30, [sp, #-32]!
 5dc:	mov	x29, sp
 5e0:	str	x19, [sp, #16]
 5e4:	adrp	x0, 0 <crc32_init>
 5e8:	ldr	x19, [x0]
 5ec:	mov	x0, x19
 5f0:	bl	0 <grub_md_unregister>
 5f4:	add	x0, x19, #0x60
 5f8:	bl	0 <grub_md_unregister>
 5fc:	add	x0, x19, #0xc0
 600:	bl	0 <grub_md_unregister>
 604:	ldr	x19, [sp, #16]
 608:	ldp	x29, x30, [sp], #32
 60c:	ret
	...
