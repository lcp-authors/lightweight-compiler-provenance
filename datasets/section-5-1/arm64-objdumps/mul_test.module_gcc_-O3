
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//mul_test.module_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <test64>:
   0:	sub	sp, sp, #0x60
   4:	mov	w2, #0x0                   	// #0
   8:	stp	x29, x30, [sp, #16]
   c:	add	x29, sp, #0x10
  10:	stp	x19, x20, [sp, #32]
  14:	mov	x20, x0
  18:	mov	x19, #0x0                   	// #0
  1c:	stp	x21, x22, [sp, #48]
  20:	mov	x21, x1
  24:	mul	x22, x20, x1
  28:	mov	x0, #0x1                   	// #1
  2c:	stp	x23, x24, [sp, #64]
  30:	str	x25, [sp, #80]
  34:	nop
  38:	lsl	x3, x0, x2
  3c:	tst	x3, x20
  40:	lsl	x3, x21, x2
  44:	add	w2, w2, #0x1
  48:	add	x3, x19, x3
  4c:	csel	x19, x3, x19, ne  // ne = any
  50:	cmp	w2, #0x40
  54:	b.ne	38 <test64+0x38>  // b.any
  58:	adrp	x3, 0 <test64>
  5c:	adrp	x2, 0 <test64>
  60:	adrp	x1, 0 <test64>
  64:	adrp	x0, 0 <test64>
  68:	ldr	x5, [x3]
  6c:	cmp	x22, x19
  70:	ldr	x4, [x2]
  74:	stp	x19, x22, [sp]
  78:	cset	w23, eq  // eq = none
  7c:	ldr	x25, [x1]
  80:	mov	x7, x21
  84:	ldr	x24, [x0]
  88:	mov	x2, x25
  8c:	mov	w0, w23
  90:	mov	x6, x20
  94:	mov	x1, x24
  98:	mov	w3, #0x2a                  	// #42
  9c:	bl	0 <grub_test_assert_helper>
  a0:	stp	x19, x22, [sp]
  a4:	adrp	x1, 0 <test64>
  a8:	adrp	x0, 0 <test64>
  ac:	mov	x2, x25
  b0:	ldr	x5, [x1]
  b4:	mov	x7, x21
  b8:	ldr	x4, [x0]
  bc:	mov	x1, x24
  c0:	mov	w0, w23
  c4:	mov	x6, x20
  c8:	mov	w3, #0x2d                  	// #45
  cc:	bl	0 <grub_test_assert_helper>
  d0:	ldp	x29, x30, [sp, #16]
  d4:	ldp	x19, x20, [sp, #32]
  d8:	ldp	x21, x22, [sp, #48]
  dc:	ldp	x23, x24, [sp, #64]
  e0:	ldr	x25, [sp, #80]
  e4:	add	sp, sp, #0x60
  e8:	ret
  ec:	nop
	...

0000000000000120 <mul_test>:
 120:	stp	x29, x30, [sp, #-48]!
 124:	mov	x1, #0x1                   	// #1
 128:	mov	x0, #0xffffffffffffffff    	// #-1
 12c:	mov	x29, sp
 130:	stp	x19, x20, [sp, #16]
 134:	mov	x20, #0x9c40                	// #40000
 138:	mov	x19, #0x7                   	// #7
 13c:	stp	x21, x22, [sp, #32]
 140:	bl	0 <test64>
 144:	mov	x1, #0xffffffffffffffff    	// #-1
 148:	mov	x0, #0x1                   	// #1
 14c:	bl	0 <test64>
 150:	mov	x1, #0xffffffffffffffff    	// #-1
 154:	mov	x0, x1
 158:	bl	0 <test64>
 15c:	mov	x21, #0x1                   	// #1
 160:	mov	x1, x21
 164:	mov	x0, x21
 168:	bl	0 <test64>
 16c:	mov	x22, #0x194                 	// #404
 170:	mov	x1, x21
 174:	mov	x0, #0x2                   	// #2
 178:	bl	0 <test64>
 17c:	nop
 180:	add	x0, x19, x19, lsl #1
 184:	add	x22, x22, x22, lsl #4
 188:	lsl	x1, x19, #3
 18c:	add	x0, x19, x0, lsl #2
 190:	sub	x1, x1, x19
 194:	add	x0, x0, x22
 198:	add	x19, x19, x1, lsl #2
 19c:	add	x1, x0, x0, lsl #1
 1a0:	lsl	x1, x1, #3
 1a4:	sub	x1, x1, x0
 1a8:	adds	x19, x1, x19
 1ac:	csel	x19, x19, x21, ne  // ne = any
 1b0:	cmp	x0, #0x0
 1b4:	csel	x22, x0, x21, ne  // ne = any
 1b8:	mov	x1, x19
 1bc:	mov	x0, x22
 1c0:	bl	0 <test64>
 1c4:	subs	x20, x20, #0x1
 1c8:	b.ne	180 <mul_test+0x60>  // b.any
 1cc:	ldp	x19, x20, [sp, #16]
 1d0:	ldp	x21, x22, [sp, #32]
 1d4:	ldp	x29, x30, [sp], #48
 1d8:	ret
 1dc:	nop

00000000000001e0 <grub_mod_init>:
 1e0:	adrp	x1, 0 <test64>
 1e4:	adrp	x0, 0 <test64>
 1e8:	ldr	x1, [x1]
 1ec:	ldr	x0, [x0]
 1f0:	b	0 <grub_test_register>
 1f4:	nop
	...

0000000000000208 <grub_mod_fini>:
 208:	adrp	x0, 0 <test64>
 20c:	ldr	x0, [x0]
 210:	b	0 <grub_test_unregister>
 214:	nop
	...
