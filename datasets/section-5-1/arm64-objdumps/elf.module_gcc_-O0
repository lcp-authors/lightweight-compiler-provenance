
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//elf.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_elf_check_header>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #24]
       c:	ldr	x0, [sp, #24]
      10:	add	x0, x0, #0x8
      14:	str	x0, [sp, #40]
      18:	ldr	x0, [sp, #40]
      1c:	ldrb	w0, [x0]
      20:	cmp	w0, #0x7f
      24:	b.ne	68 <grub_elf_check_header+0x68>  // b.any
      28:	ldr	x0, [sp, #40]
      2c:	ldrb	w0, [x0, #1]
      30:	cmp	w0, #0x45
      34:	b.ne	68 <grub_elf_check_header+0x68>  // b.any
      38:	ldr	x0, [sp, #40]
      3c:	ldrb	w0, [x0, #2]
      40:	cmp	w0, #0x4c
      44:	b.ne	68 <grub_elf_check_header+0x68>  // b.any
      48:	ldr	x0, [sp, #40]
      4c:	ldrb	w0, [x0, #3]
      50:	cmp	w0, #0x46
      54:	b.ne	68 <grub_elf_check_header+0x68>  // b.any
      58:	ldr	x0, [sp, #40]
      5c:	ldrb	w0, [x0, #6]
      60:	cmp	w0, #0x1
      64:	b.eq	80 <grub_elf_check_header+0x80>  // b.none
      68:	adrp	x0, 0 <grub_elf_check_header>
      6c:	add	x0, x0, #0x0
      70:	ldr	x1, [x0]
      74:	mov	w0, #0x15                  	// #21
      78:	bl	0 <grub_error>
      7c:	b	134 <grub_elf_check_header+0x134>
      80:	ldr	x0, [sp, #24]
      84:	bl	374 <grub_elf_is_elf32>
      88:	cmp	w0, #0x0
      8c:	b.eq	b8 <grub_elf_check_header+0xb8>  // b.none
      90:	ldr	x0, [sp, #24]
      94:	bl	a68 <grub_elf32_check_endianess_and_bswap_ehdr>
      98:	cmp	w0, #0x0
      9c:	b.ne	108 <grub_elf_check_header+0x108>  // b.any
      a0:	adrp	x0, 0 <grub_elf_check_header>
      a4:	add	x0, x0, #0x0
      a8:	ldr	x1, [x0]
      ac:	mov	w0, #0x15                  	// #21
      b0:	bl	0 <grub_error>
      b4:	b	134 <grub_elf_check_header+0x134>
      b8:	ldr	x0, [sp, #24]
      bc:	bl	aa0 <grub_elf_is_elf64>
      c0:	cmp	w0, #0x0
      c4:	b.eq	f0 <grub_elf_check_header+0xf0>  // b.none
      c8:	ldr	x0, [sp, #24]
      cc:	bl	1180 <grub_elf64_check_endianess_and_bswap_ehdr>
      d0:	cmp	w0, #0x0
      d4:	b.ne	108 <grub_elf_check_header+0x108>  // b.any
      d8:	adrp	x0, 0 <grub_elf_check_header>
      dc:	add	x0, x0, #0x0
      e0:	ldr	x1, [x0]
      e4:	mov	w0, #0x15                  	// #21
      e8:	bl	0 <grub_error>
      ec:	b	134 <grub_elf_check_header+0x134>
      f0:	adrp	x0, 0 <grub_elf_check_header>
      f4:	add	x0, x0, #0x0
      f8:	ldr	x1, [x0]
      fc:	mov	w0, #0x15                  	// #21
     100:	bl	0 <grub_error>
     104:	b	134 <grub_elf_check_header+0x134>
     108:	ldr	x0, [sp, #40]
     10c:	ldr	w0, [x0, #20]
     110:	cmp	w0, #0x1
     114:	b.eq	130 <grub_elf_check_header+0x130>  // b.none
     118:	adrp	x0, 0 <grub_elf_check_header>
     11c:	add	x0, x0, #0x0
     120:	ldr	x1, [x0]
     124:	mov	w0, #0x15                  	// #21
     128:	bl	0 <grub_error>
     12c:	b	134 <grub_elf_check_header+0x134>
     130:	mov	w0, #0x0                   	// #0
     134:	ldp	x29, x30, [sp], #48
     138:	ret
     13c:	nop
	...

0000000000000158 <grub_elf_close>:
     158:	stp	x29, x30, [sp, #-48]!
     15c:	mov	x29, sp
     160:	str	x0, [sp, #24]
     164:	ldr	x0, [sp, #24]
     168:	ldr	x0, [x0]
     16c:	str	x0, [sp, #40]
     170:	ldr	x0, [sp, #24]
     174:	ldr	x0, [x0, #72]
     178:	bl	0 <grub_free>
     17c:	ldr	x0, [sp, #24]
     180:	ldr	x0, [x0, #80]
     184:	bl	0 <grub_free>
     188:	ldr	x0, [sp, #24]
     18c:	bl	0 <grub_free>
     190:	ldr	x0, [sp, #40]
     194:	cmp	x0, #0x0
     198:	b.eq	1a4 <grub_elf_close+0x4c>  // b.none
     19c:	ldr	x0, [sp, #40]
     1a0:	bl	0 <grub_file_close>
     1a4:	adrp	x0, 0 <grub_elf_check_header>
     1a8:	add	x0, x0, #0x0
     1ac:	ldr	x0, [x0]
     1b0:	ldr	w0, [x0]
     1b4:	ldp	x29, x30, [sp], #48
     1b8:	ret
     1bc:	nop
	...

00000000000001c8 <grub_elf_file>:
     1c8:	stp	x29, x30, [sp, #-48]!
     1cc:	mov	x29, sp
     1d0:	str	x0, [sp, #24]
     1d4:	str	x1, [sp, #16]
     1d8:	mov	x0, #0x58                  	// #88
     1dc:	bl	0 <grub_zalloc>
     1e0:	str	x0, [sp, #40]
     1e4:	ldr	x0, [sp, #40]
     1e8:	cmp	x0, #0x0
     1ec:	b.ne	1f8 <grub_elf_file+0x30>  // b.any
     1f0:	mov	x0, #0x0                   	// #0
     1f4:	b	2f4 <grub_elf_file+0x12c>
     1f8:	ldr	x0, [sp, #40]
     1fc:	ldr	x1, [sp, #24]
     200:	str	x1, [x0]
     204:	ldr	x0, [sp, #40]
     208:	ldr	x0, [x0]
     20c:	mov	x1, #0x0                   	// #0
     210:	bl	0 <grub_file_seek>
     214:	cmn	x0, #0x1
     218:	b.eq	2b4 <grub_elf_file+0xec>  // b.none
     21c:	ldr	x0, [sp, #40]
     220:	ldr	x3, [x0]
     224:	ldr	x0, [sp, #40]
     228:	add	x0, x0, #0x8
     22c:	mov	x2, #0x40                  	// #64
     230:	mov	x1, x0
     234:	mov	x0, x3
     238:	bl	0 <grub_file_read>
     23c:	cmp	x0, #0x40
     240:	b.eq	278 <grub_elf_file+0xb0>  // b.none
     244:	adrp	x0, 0 <grub_elf_check_header>
     248:	add	x0, x0, #0x0
     24c:	ldr	x0, [x0]
     250:	ldr	w0, [x0]
     254:	cmp	w0, #0x0
     258:	b.ne	2bc <grub_elf_file+0xf4>  // b.any
     25c:	ldr	x2, [sp, #16]
     260:	adrp	x0, 0 <grub_elf_check_header>
     264:	add	x0, x0, #0x0
     268:	ldr	x1, [x0]
     26c:	mov	w0, #0x6                   	// #6
     270:	bl	0 <grub_error>
     274:	b	2bc <grub_elf_file+0xf4>
     278:	ldr	x0, [sp, #40]
     27c:	bl	0 <grub_elf_check_header>
     280:	cmp	w0, #0x0
     284:	b.ne	2c4 <grub_elf_file+0xfc>  // b.any
     288:	ldr	x0, [sp, #16]
     28c:	bl	0 <grub_strdup>
     290:	mov	x1, x0
     294:	ldr	x0, [sp, #40]
     298:	str	x1, [x0, #80]
     29c:	ldr	x0, [sp, #40]
     2a0:	ldr	x0, [x0, #80]
     2a4:	cmp	x0, #0x0
     2a8:	b.eq	2cc <grub_elf_file+0x104>  // b.none
     2ac:	ldr	x0, [sp, #40]
     2b0:	b	2f4 <grub_elf_file+0x12c>
     2b4:	nop
     2b8:	b	2d0 <grub_elf_file+0x108>
     2bc:	nop
     2c0:	b	2d0 <grub_elf_file+0x108>
     2c4:	nop
     2c8:	b	2d0 <grub_elf_file+0x108>
     2cc:	nop
     2d0:	ldr	x0, [sp, #40]
     2d4:	ldr	x0, [x0, #80]
     2d8:	bl	0 <grub_free>
     2dc:	ldr	x0, [sp, #40]
     2e0:	ldr	x0, [x0, #72]
     2e4:	bl	0 <grub_free>
     2e8:	ldr	x0, [sp, #40]
     2ec:	bl	0 <grub_free>
     2f0:	mov	x0, #0x0                   	// #0
     2f4:	ldp	x29, x30, [sp], #48
     2f8:	ret
     2fc:	nop
	...

0000000000000310 <grub_elf_open>:
     310:	stp	x29, x30, [sp, #-48]!
     314:	mov	x29, sp
     318:	str	x0, [sp, #24]
     31c:	str	w1, [sp, #20]
     320:	ldr	w1, [sp, #20]
     324:	ldr	x0, [sp, #24]
     328:	bl	0 <grub_file_open>
     32c:	str	x0, [sp, #40]
     330:	ldr	x0, [sp, #40]
     334:	cmp	x0, #0x0
     338:	b.ne	344 <grub_elf_open+0x34>  // b.any
     33c:	mov	x0, #0x0                   	// #0
     340:	b	36c <grub_elf_open+0x5c>
     344:	ldr	x1, [sp, #24]
     348:	ldr	x0, [sp, #40]
     34c:	bl	1c8 <grub_elf_file>
     350:	str	x0, [sp, #32]
     354:	ldr	x0, [sp, #32]
     358:	cmp	x0, #0x0
     35c:	b.ne	368 <grub_elf_open+0x58>  // b.any
     360:	ldr	x0, [sp, #40]
     364:	bl	0 <grub_file_close>
     368:	ldr	x0, [sp, #32]
     36c:	ldp	x29, x30, [sp], #48
     370:	ret

0000000000000374 <grub_elf_is_elf32>:
     374:	sub	sp, sp, #0x10
     378:	str	x0, [sp, #8]
     37c:	ldr	x0, [sp, #8]
     380:	ldrb	w0, [x0, #12]
     384:	cmp	w0, #0x1
     388:	cset	w0, eq  // eq = none
     38c:	and	w0, w0, #0xff
     390:	add	sp, sp, #0x10
     394:	ret

0000000000000398 <grub_elf32_load_phdrs>:
     398:	stp	x29, x30, [sp, #-48]!
     39c:	mov	x29, sp
     3a0:	str	x0, [sp, #24]
     3a4:	ldr	x0, [sp, #24]
     3a8:	ldr	x0, [x0, #72]
     3ac:	cmp	x0, #0x0
     3b0:	b.eq	3bc <grub_elf32_load_phdrs+0x24>  // b.none
     3b4:	mov	w0, #0x0                   	// #0
     3b8:	b	504 <grub_elf32_load_phdrs+0x16c>
     3bc:	ldr	x0, [sp, #24]
     3c0:	ldrh	w0, [x0, #52]
     3c4:	mov	w1, w0
     3c8:	ldr	x0, [sp, #24]
     3cc:	ldrh	w0, [x0, #50]
     3d0:	mul	w0, w1, w0
     3d4:	mov	w0, w0
     3d8:	str	x0, [sp, #40]
     3dc:	ldr	x0, [sp, #24]
     3e0:	ldr	w0, [x0, #36]
     3e4:	mov	w0, w0
     3e8:	ldr	x1, [sp, #40]
     3ec:	mov	x5, x1
     3f0:	mov	x4, x0
     3f4:	adrp	x0, 0 <grub_elf_check_header>
     3f8:	add	x0, x0, #0x0
     3fc:	ldr	x3, [x0]
     400:	adrp	x0, 0 <grub_elf_check_header>
     404:	add	x0, x0, #0x0
     408:	ldr	x2, [x0]
     40c:	mov	w1, #0x11                  	// #17
     410:	adrp	x0, 0 <grub_elf_check_header>
     414:	add	x0, x0, #0x0
     418:	ldr	x0, [x0]
     41c:	bl	0 <grub_real_dprintf>
     420:	ldr	x0, [sp, #40]
     424:	bl	0 <grub_malloc>
     428:	mov	x1, x0
     42c:	ldr	x0, [sp, #24]
     430:	str	x1, [x0, #72]
     434:	ldr	x0, [sp, #24]
     438:	ldr	x0, [x0, #72]
     43c:	cmp	x0, #0x0
     440:	b.ne	458 <grub_elf32_load_phdrs+0xc0>  // b.any
     444:	adrp	x0, 0 <grub_elf_check_header>
     448:	add	x0, x0, #0x0
     44c:	ldr	x0, [x0]
     450:	ldr	w0, [x0]
     454:	b	504 <grub_elf32_load_phdrs+0x16c>
     458:	ldr	x0, [sp, #24]
     45c:	ldr	x2, [x0]
     460:	ldr	x0, [sp, #24]
     464:	ldr	w0, [x0, #36]
     468:	mov	w0, w0
     46c:	mov	x1, x0
     470:	mov	x0, x2
     474:	bl	0 <grub_file_seek>
     478:	cmn	x0, #0x1
     47c:	b.eq	4b4 <grub_elf32_load_phdrs+0x11c>  // b.none
     480:	ldr	x0, [sp, #24]
     484:	ldr	x3, [x0]
     488:	ldr	x0, [sp, #24]
     48c:	ldr	x0, [x0, #72]
     490:	ldr	x1, [sp, #40]
     494:	mov	x2, x1
     498:	mov	x1, x0
     49c:	mov	x0, x3
     4a0:	bl	0 <grub_file_read>
     4a4:	mov	x1, x0
     4a8:	ldr	x0, [sp, #40]
     4ac:	cmp	x0, x1
     4b0:	b.eq	500 <grub_elf32_load_phdrs+0x168>  // b.none
     4b4:	adrp	x0, 0 <grub_elf_check_header>
     4b8:	add	x0, x0, #0x0
     4bc:	ldr	x0, [x0]
     4c0:	ldr	w0, [x0]
     4c4:	cmp	w0, #0x0
     4c8:	b.ne	4ec <grub_elf32_load_phdrs+0x154>  // b.any
     4cc:	ldr	x0, [sp, #24]
     4d0:	ldr	x0, [x0, #80]
     4d4:	mov	x2, x0
     4d8:	adrp	x0, 0 <grub_elf_check_header>
     4dc:	add	x0, x0, #0x0
     4e0:	ldr	x1, [x0]
     4e4:	mov	w0, #0x6                   	// #6
     4e8:	bl	0 <grub_error>
     4ec:	adrp	x0, 0 <grub_elf_check_header>
     4f0:	add	x0, x0, #0x0
     4f4:	ldr	x0, [x0]
     4f8:	ldr	w0, [x0]
     4fc:	b	504 <grub_elf32_load_phdrs+0x16c>
     500:	mov	w0, #0x0                   	// #0
     504:	ldp	x29, x30, [sp], #48
     508:	ret
     50c:	nop
	...

0000000000000538 <grub_elf32_size>:
     538:	stp	x29, x30, [sp, #-80]!
     53c:	mov	x29, sp
     540:	str	x0, [sp, #40]
     544:	str	x1, [sp, #32]
     548:	str	x2, [sp, #24]
     54c:	mov	w0, #0xffffffff            	// #-1
     550:	str	w0, [sp, #76]
     554:	str	wzr, [sp, #72]
     558:	str	wzr, [sp, #68]
     55c:	mov	w0, #0x1                   	// #1
     560:	str	w0, [sp, #64]
     564:	ldr	x0, [sp, #40]
     568:	bl	398 <grub_elf32_load_phdrs>
     56c:	ldr	x0, [sp, #40]
     570:	ldr	x0, [x0, #72]
     574:	str	x0, [sp, #56]
     578:	b	624 <grub_elf32_size+0xec>
     57c:	ldr	x0, [sp, #56]
     580:	ldr	w0, [x0]
     584:	cmp	w0, #0x1
     588:	b.ne	614 <grub_elf32_size+0xdc>  // b.any
     58c:	ldr	w0, [sp, #68]
     590:	add	w0, w0, #0x1
     594:	str	w0, [sp, #68]
     598:	ldr	x0, [sp, #56]
     59c:	ldr	w0, [x0, #12]
     5a0:	ldr	w1, [sp, #76]
     5a4:	cmp	w1, w0
     5a8:	b.ls	5b8 <grub_elf32_size+0x80>  // b.plast
     5ac:	ldr	x0, [sp, #56]
     5b0:	ldr	w0, [x0, #12]
     5b4:	str	w0, [sp, #76]
     5b8:	ldr	x0, [sp, #56]
     5bc:	ldr	w1, [x0, #12]
     5c0:	ldr	x0, [sp, #56]
     5c4:	ldr	w0, [x0, #20]
     5c8:	add	w0, w1, w0
     5cc:	ldr	w1, [sp, #72]
     5d0:	cmp	w1, w0
     5d4:	b.cs	5f0 <grub_elf32_size+0xb8>  // b.hs, b.nlast
     5d8:	ldr	x0, [sp, #56]
     5dc:	ldr	w1, [x0, #12]
     5e0:	ldr	x0, [sp, #56]
     5e4:	ldr	w0, [x0, #20]
     5e8:	add	w0, w1, w0
     5ec:	str	w0, [sp, #72]
     5f0:	ldr	x0, [sp, #56]
     5f4:	ldr	w0, [x0, #28]
     5f8:	ldr	w1, [sp, #64]
     5fc:	cmp	w1, w0
     600:	b.cs	618 <grub_elf32_size+0xe0>  // b.hs, b.nlast
     604:	ldr	x0, [sp, #56]
     608:	ldr	w0, [x0, #28]
     60c:	str	w0, [sp, #64]
     610:	b	618 <grub_elf32_size+0xe0>
     614:	nop
     618:	ldr	x0, [sp, #56]
     61c:	add	x0, x0, #0x20
     620:	str	x0, [sp, #56]
     624:	ldr	x0, [sp, #56]
     628:	cmp	x0, #0x0
     62c:	b.eq	658 <grub_elf32_size+0x120>  // b.none
     630:	ldr	x0, [sp, #40]
     634:	ldr	x1, [x0, #72]
     638:	ldr	x0, [sp, #40]
     63c:	ldrh	w0, [x0, #52]
     640:	and	x0, x0, #0xffff
     644:	lsl	x0, x0, #5
     648:	add	x0, x1, x0
     64c:	ldr	x1, [sp, #56]
     650:	cmp	x1, x0
     654:	b.cc	57c <grub_elf32_size+0x44>  // b.lo, b.ul, b.last
     658:	ldr	x0, [sp, #32]
     65c:	cmp	x0, #0x0
     660:	b.eq	66c <grub_elf32_size+0x134>  // b.none
     664:	ldr	x0, [sp, #32]
     668:	str	wzr, [x0]
     66c:	ldr	w0, [sp, #68]
     670:	cmp	w0, #0x0
     674:	b.ne	694 <grub_elf32_size+0x15c>  // b.any
     678:	adrp	x0, 0 <grub_elf_check_header>
     67c:	add	x0, x0, #0x0
     680:	ldr	x1, [x0]
     684:	mov	w0, #0x15                  	// #21
     688:	bl	0 <grub_error>
     68c:	mov	x0, #0x0                   	// #0
     690:	b	700 <grub_elf32_size+0x1c8>
     694:	ldr	w1, [sp, #72]
     698:	ldr	w0, [sp, #76]
     69c:	cmp	w1, w0
     6a0:	b.cs	6c0 <grub_elf32_size+0x188>  // b.hs, b.nlast
     6a4:	adrp	x0, 0 <grub_elf_check_header>
     6a8:	add	x0, x0, #0x0
     6ac:	ldr	x1, [x0]
     6b0:	mov	w0, #0x15                  	// #21
     6b4:	bl	0 <grub_error>
     6b8:	mov	x0, #0x0                   	// #0
     6bc:	b	700 <grub_elf32_size+0x1c8>
     6c0:	ldr	x0, [sp, #32]
     6c4:	cmp	x0, #0x0
     6c8:	b.eq	6d8 <grub_elf32_size+0x1a0>  // b.none
     6cc:	ldr	x0, [sp, #32]
     6d0:	ldr	w1, [sp, #76]
     6d4:	str	w1, [x0]
     6d8:	ldr	x0, [sp, #24]
     6dc:	cmp	x0, #0x0
     6e0:	b.eq	6f0 <grub_elf32_size+0x1b8>  // b.none
     6e4:	ldr	x0, [sp, #24]
     6e8:	ldr	w1, [sp, #64]
     6ec:	str	w1, [x0]
     6f0:	ldr	w1, [sp, #72]
     6f4:	ldr	w0, [sp, #76]
     6f8:	sub	w0, w1, w0
     6fc:	mov	w0, w0
     700:	ldp	x29, x30, [sp], #80
     704:	ret
	...

0000000000000718 <grub_elf32_load>:
     718:	stp	x29, x30, [sp, #-112]!
     71c:	mov	x29, sp
     720:	str	x0, [sp, #56]
     724:	str	x1, [sp, #48]
     728:	str	x2, [sp, #40]
     72c:	str	w3, [sp, #36]
     730:	str	x4, [sp, #24]
     734:	str	x5, [sp, #16]
     738:	mov	x0, #0xffffffffffffffff    	// #-1
     73c:	str	x0, [sp, #104]
     740:	str	xzr, [sp, #96]
     744:	ldr	x0, [sp, #56]
     748:	bl	398 <grub_elf32_load_phdrs>
     74c:	ldr	x0, [sp, #56]
     750:	ldr	x0, [x0, #72]
     754:	str	x0, [sp, #88]
     758:	b	9c4 <grub_elf32_load+0x2ac>
     75c:	ldr	x0, [sp, #88]
     760:	ldr	w0, [x0]
     764:	cmp	w0, #0x1
     768:	b.eq	78c <grub_elf32_load+0x74>  // b.none
     76c:	ldr	w0, [sp, #36]
     770:	and	w0, w0, #0x1
     774:	cmp	w0, #0x0
     778:	b.eq	9b4 <grub_elf32_load+0x29c>  // b.none
     77c:	ldr	x0, [sp, #88]
     780:	ldr	w0, [x0]
     784:	cmp	w0, #0x2
     788:	b.ne	9b4 <grub_elf32_load+0x29c>  // b.any
     78c:	ldr	x0, [sp, #88]
     790:	ldr	w0, [x0, #12]
     794:	mov	w0, w0
     798:	str	x0, [sp, #80]
     79c:	ldr	w0, [sp, #36]
     7a0:	and	w0, w0, #0x6
     7a4:	cmp	w0, #0x6
     7a8:	b.eq	7f4 <grub_elf32_load+0xdc>  // b.none
     7ac:	cmp	w0, #0x6
     7b0:	b.hi	808 <grub_elf32_load+0xf0>  // b.pmore
     7b4:	cmp	w0, #0x4
     7b8:	b.eq	7e4 <grub_elf32_load+0xcc>  // b.none
     7bc:	cmp	w0, #0x4
     7c0:	b.hi	808 <grub_elf32_load+0xf0>  // b.pmore
     7c4:	cmp	w0, #0x0
     7c8:	b.eq	804 <grub_elf32_load+0xec>  // b.none
     7cc:	cmp	w0, #0x2
     7d0:	b.ne	808 <grub_elf32_load+0xf0>  // b.any
     7d4:	ldr	x0, [sp, #80]
     7d8:	and	x0, x0, #0xfffffff
     7dc:	str	x0, [sp, #80]
     7e0:	b	808 <grub_elf32_load+0xf0>
     7e4:	ldr	x0, [sp, #80]
     7e8:	and	x0, x0, #0x3fffffff
     7ec:	str	x0, [sp, #80]
     7f0:	b	808 <grub_elf32_load+0xf0>
     7f4:	ldr	x0, [sp, #80]
     7f8:	and	x0, x0, #0x3fffffffffffffff
     7fc:	str	x0, [sp, #80]
     800:	b	808 <grub_elf32_load+0xf0>
     804:	nop
     808:	ldr	x0, [sp, #40]
     80c:	ldr	x1, [sp, #80]
     810:	add	x0, x1, x0
     814:	str	x0, [sp, #80]
     818:	ldr	x1, [sp, #80]
     81c:	ldr	x0, [sp, #104]
     820:	cmp	x1, x0
     824:	b.cs	830 <grub_elf32_load+0x118>  // b.hs, b.nlast
     828:	ldr	x0, [sp, #80]
     82c:	str	x0, [sp, #104]
     830:	ldr	x0, [sp, #88]
     834:	ldr	w0, [x0, #20]
     838:	mov	w0, w0
     83c:	mov	x5, x0
     840:	ldr	x4, [sp, #80]
     844:	adrp	x0, 0 <grub_elf_check_header>
     848:	add	x0, x0, #0x0
     84c:	ldr	x3, [x0]
     850:	adrp	x0, 0 <grub_elf_check_header>
     854:	add	x0, x0, #0x0
     858:	ldr	x2, [x0]
     85c:	mov	w1, #0x8e                  	// #142
     860:	adrp	x0, 0 <grub_elf_check_header>
     864:	add	x0, x0, #0x0
     868:	ldr	x0, [x0]
     86c:	bl	0 <grub_real_dprintf>
     870:	ldr	x0, [sp, #56]
     874:	ldr	x2, [x0]
     878:	ldr	x0, [sp, #88]
     87c:	ldr	w0, [x0, #4]
     880:	mov	w0, w0
     884:	mov	x1, x0
     888:	mov	x0, x2
     88c:	bl	0 <grub_file_seek>
     890:	cmn	x0, #0x1
     894:	b.ne	8ac <grub_elf32_load+0x194>  // b.any
     898:	adrp	x0, 0 <grub_elf_check_header>
     89c:	add	x0, x0, #0x0
     8a0:	ldr	x0, [x0]
     8a4:	ldr	w0, [x0]
     8a8:	b	a38 <grub_elf32_load+0x320>
     8ac:	ldr	x0, [sp, #88]
     8b0:	ldr	w0, [x0, #16]
     8b4:	cmp	w0, #0x0
     8b8:	b.eq	940 <grub_elf32_load+0x228>  // b.none
     8bc:	ldr	x0, [sp, #56]
     8c0:	ldr	x3, [x0]
     8c4:	ldr	x1, [sp, #80]
     8c8:	ldr	x0, [sp, #88]
     8cc:	ldr	w0, [x0, #16]
     8d0:	mov	w0, w0
     8d4:	mov	x2, x0
     8d8:	mov	x0, x3
     8dc:	bl	0 <grub_file_read>
     8e0:	str	x0, [sp, #72]
     8e4:	ldr	x0, [sp, #88]
     8e8:	ldr	w0, [x0, #16]
     8ec:	mov	w0, w0
     8f0:	ldr	x1, [sp, #72]
     8f4:	cmp	x1, x0
     8f8:	b.eq	940 <grub_elf32_load+0x228>  // b.none
     8fc:	adrp	x0, 0 <grub_elf_check_header>
     900:	add	x0, x0, #0x0
     904:	ldr	x0, [x0]
     908:	ldr	w0, [x0]
     90c:	cmp	w0, #0x0
     910:	b.ne	92c <grub_elf32_load+0x214>  // b.any
     914:	ldr	x2, [sp, #48]
     918:	adrp	x0, 0 <grub_elf_check_header>
     91c:	add	x0, x0, #0x0
     920:	ldr	x1, [x0]
     924:	mov	w0, #0x6                   	// #6
     928:	bl	0 <grub_error>
     92c:	adrp	x0, 0 <grub_elf_check_header>
     930:	add	x0, x0, #0x0
     934:	ldr	x0, [x0]
     938:	ldr	w0, [x0]
     93c:	b	a38 <grub_elf32_load+0x320>
     940:	ldr	x0, [sp, #88]
     944:	ldr	w1, [x0, #16]
     948:	ldr	x0, [sp, #88]
     94c:	ldr	w0, [x0, #20]
     950:	cmp	w1, w0
     954:	b.cs	998 <grub_elf32_load+0x280>  // b.hs, b.nlast
     958:	ldr	x0, [sp, #88]
     95c:	ldr	w0, [x0, #16]
     960:	mov	w1, w0
     964:	ldr	x0, [sp, #80]
     968:	add	x0, x1, x0
     96c:	mov	x3, x0
     970:	ldr	x0, [sp, #88]
     974:	ldr	w1, [x0, #20]
     978:	ldr	x0, [sp, #88]
     97c:	ldr	w0, [x0, #16]
     980:	sub	w0, w1, w0
     984:	mov	w0, w0
     988:	mov	x2, x0
     98c:	mov	w1, #0x0                   	// #0
     990:	mov	x0, x3
     994:	bl	0 <grub_memset>
     998:	ldr	x0, [sp, #88]
     99c:	ldr	w0, [x0, #20]
     9a0:	mov	w0, w0
     9a4:	ldr	x1, [sp, #96]
     9a8:	add	x0, x1, x0
     9ac:	str	x0, [sp, #96]
     9b0:	b	9b8 <grub_elf32_load+0x2a0>
     9b4:	nop
     9b8:	ldr	x0, [sp, #88]
     9bc:	add	x0, x0, #0x20
     9c0:	str	x0, [sp, #88]
     9c4:	ldr	x0, [sp, #88]
     9c8:	cmp	x0, #0x0
     9cc:	b.eq	9f8 <grub_elf32_load+0x2e0>  // b.none
     9d0:	ldr	x0, [sp, #56]
     9d4:	ldr	x1, [x0, #72]
     9d8:	ldr	x0, [sp, #56]
     9dc:	ldrh	w0, [x0, #52]
     9e0:	and	x0, x0, #0xffff
     9e4:	lsl	x0, x0, #5
     9e8:	add	x0, x1, x0
     9ec:	ldr	x1, [sp, #88]
     9f0:	cmp	x1, x0
     9f4:	b.cc	75c <grub_elf32_load+0x44>  // b.lo, b.ul, b.last
     9f8:	ldr	x0, [sp, #24]
     9fc:	cmp	x0, #0x0
     a00:	b.eq	a10 <grub_elf32_load+0x2f8>  // b.none
     a04:	ldr	x0, [sp, #24]
     a08:	ldr	x1, [sp, #104]
     a0c:	str	x1, [x0]
     a10:	ldr	x0, [sp, #16]
     a14:	cmp	x0, #0x0
     a18:	b.eq	a28 <grub_elf32_load+0x310>  // b.none
     a1c:	ldr	x0, [sp, #16]
     a20:	ldr	x1, [sp, #96]
     a24:	str	x1, [x0]
     a28:	adrp	x0, 0 <grub_elf_check_header>
     a2c:	add	x0, x0, #0x0
     a30:	ldr	x0, [x0]
     a34:	ldr	w0, [x0]
     a38:	ldp	x29, x30, [sp], #112
     a3c:	ret
	...

0000000000000a68 <grub_elf32_check_endianess_and_bswap_ehdr>:
     a68:	sub	sp, sp, #0x20
     a6c:	str	x0, [sp, #8]
     a70:	ldr	x0, [sp, #8]
     a74:	add	x0, x0, #0x8
     a78:	str	x0, [sp, #24]
     a7c:	ldr	x0, [sp, #24]
     a80:	ldrb	w0, [x0, #5]
     a84:	cmp	w0, #0x1
     a88:	b.ne	a94 <grub_elf32_check_endianess_and_bswap_ehdr+0x2c>  // b.any
     a8c:	mov	w0, #0x1                   	// #1
     a90:	b	a98 <grub_elf32_check_endianess_and_bswap_ehdr+0x30>
     a94:	mov	w0, #0x0                   	// #0
     a98:	add	sp, sp, #0x20
     a9c:	ret

0000000000000aa0 <grub_elf_is_elf64>:
     aa0:	sub	sp, sp, #0x10
     aa4:	str	x0, [sp, #8]
     aa8:	ldr	x0, [sp, #8]
     aac:	ldrb	w0, [x0, #12]
     ab0:	cmp	w0, #0x2
     ab4:	cset	w0, eq  // eq = none
     ab8:	and	w0, w0, #0xff
     abc:	add	sp, sp, #0x10
     ac0:	ret

0000000000000ac4 <grub_elf64_load_phdrs>:
     ac4:	stp	x29, x30, [sp, #-48]!
     ac8:	mov	x29, sp
     acc:	str	x0, [sp, #24]
     ad0:	ldr	x0, [sp, #24]
     ad4:	ldr	x0, [x0, #72]
     ad8:	cmp	x0, #0x0
     adc:	b.eq	ae8 <grub_elf64_load_phdrs+0x24>  // b.none
     ae0:	mov	w0, #0x0                   	// #0
     ae4:	b	c28 <grub_elf64_load_phdrs+0x164>
     ae8:	ldr	x0, [sp, #24]
     aec:	ldrh	w0, [x0, #64]
     af0:	mov	w1, w0
     af4:	ldr	x0, [sp, #24]
     af8:	ldrh	w0, [x0, #62]
     afc:	mul	w0, w1, w0
     b00:	mov	w0, w0
     b04:	str	x0, [sp, #40]
     b08:	ldr	x0, [sp, #24]
     b0c:	ldr	x0, [x0, #40]
     b10:	ldr	x1, [sp, #40]
     b14:	mov	x5, x1
     b18:	mov	x4, x0
     b1c:	adrp	x0, 0 <grub_elf_check_header>
     b20:	add	x0, x0, #0x0
     b24:	ldr	x3, [x0]
     b28:	adrp	x0, 0 <grub_elf_check_header>
     b2c:	add	x0, x0, #0x0
     b30:	ldr	x2, [x0]
     b34:	mov	w1, #0x11                  	// #17
     b38:	adrp	x0, 0 <grub_elf_check_header>
     b3c:	add	x0, x0, #0x0
     b40:	ldr	x0, [x0]
     b44:	bl	0 <grub_real_dprintf>
     b48:	ldr	x0, [sp, #40]
     b4c:	bl	0 <grub_malloc>
     b50:	mov	x1, x0
     b54:	ldr	x0, [sp, #24]
     b58:	str	x1, [x0, #72]
     b5c:	ldr	x0, [sp, #24]
     b60:	ldr	x0, [x0, #72]
     b64:	cmp	x0, #0x0
     b68:	b.ne	b80 <grub_elf64_load_phdrs+0xbc>  // b.any
     b6c:	adrp	x0, 0 <grub_elf_check_header>
     b70:	add	x0, x0, #0x0
     b74:	ldr	x0, [x0]
     b78:	ldr	w0, [x0]
     b7c:	b	c28 <grub_elf64_load_phdrs+0x164>
     b80:	ldr	x0, [sp, #24]
     b84:	ldr	x2, [x0]
     b88:	ldr	x0, [sp, #24]
     b8c:	ldr	x0, [x0, #40]
     b90:	mov	x1, x0
     b94:	mov	x0, x2
     b98:	bl	0 <grub_file_seek>
     b9c:	cmn	x0, #0x1
     ba0:	b.eq	bd8 <grub_elf64_load_phdrs+0x114>  // b.none
     ba4:	ldr	x0, [sp, #24]
     ba8:	ldr	x3, [x0]
     bac:	ldr	x0, [sp, #24]
     bb0:	ldr	x0, [x0, #72]
     bb4:	ldr	x1, [sp, #40]
     bb8:	mov	x2, x1
     bbc:	mov	x1, x0
     bc0:	mov	x0, x3
     bc4:	bl	0 <grub_file_read>
     bc8:	mov	x1, x0
     bcc:	ldr	x0, [sp, #40]
     bd0:	cmp	x0, x1
     bd4:	b.eq	c24 <grub_elf64_load_phdrs+0x160>  // b.none
     bd8:	adrp	x0, 0 <grub_elf_check_header>
     bdc:	add	x0, x0, #0x0
     be0:	ldr	x0, [x0]
     be4:	ldr	w0, [x0]
     be8:	cmp	w0, #0x0
     bec:	b.ne	c10 <grub_elf64_load_phdrs+0x14c>  // b.any
     bf0:	ldr	x0, [sp, #24]
     bf4:	ldr	x0, [x0, #80]
     bf8:	mov	x2, x0
     bfc:	adrp	x0, 0 <grub_elf_check_header>
     c00:	add	x0, x0, #0x0
     c04:	ldr	x1, [x0]
     c08:	mov	w0, #0x6                   	// #6
     c0c:	bl	0 <grub_error>
     c10:	adrp	x0, 0 <grub_elf_check_header>
     c14:	add	x0, x0, #0x0
     c18:	ldr	x0, [x0]
     c1c:	ldr	w0, [x0]
     c20:	b	c28 <grub_elf64_load_phdrs+0x164>
     c24:	mov	w0, #0x0                   	// #0
     c28:	ldp	x29, x30, [sp], #48
     c2c:	ret
	...

0000000000000c58 <grub_elf64_size>:
     c58:	stp	x29, x30, [sp, #-80]!
     c5c:	mov	x29, sp
     c60:	str	x0, [sp, #40]
     c64:	str	x1, [sp, #32]
     c68:	str	x2, [sp, #24]
     c6c:	mov	x0, #0xffffffffffffffff    	// #-1
     c70:	str	x0, [sp, #72]
     c74:	str	xzr, [sp, #64]
     c78:	str	wzr, [sp, #60]
     c7c:	mov	w0, #0x1                   	// #1
     c80:	str	w0, [sp, #56]
     c84:	ldr	x0, [sp, #40]
     c88:	bl	ac4 <grub_elf64_load_phdrs>
     c8c:	ldr	x0, [sp, #40]
     c90:	ldr	x0, [x0, #72]
     c94:	str	x0, [sp, #48]
     c98:	b	d44 <grub_elf64_size+0xec>
     c9c:	ldr	x0, [sp, #48]
     ca0:	ldr	w0, [x0]
     ca4:	cmp	w0, #0x1
     ca8:	b.ne	d34 <grub_elf64_size+0xdc>  // b.any
     cac:	ldr	w0, [sp, #60]
     cb0:	add	w0, w0, #0x1
     cb4:	str	w0, [sp, #60]
     cb8:	ldr	x0, [sp, #48]
     cbc:	ldr	x0, [x0, #24]
     cc0:	ldr	x1, [sp, #72]
     cc4:	cmp	x1, x0
     cc8:	b.ls	cd8 <grub_elf64_size+0x80>  // b.plast
     ccc:	ldr	x0, [sp, #48]
     cd0:	ldr	x0, [x0, #24]
     cd4:	str	x0, [sp, #72]
     cd8:	ldr	x0, [sp, #48]
     cdc:	ldr	x1, [x0, #24]
     ce0:	ldr	x0, [sp, #48]
     ce4:	ldr	x0, [x0, #40]
     ce8:	add	x0, x1, x0
     cec:	ldr	x1, [sp, #64]
     cf0:	cmp	x1, x0
     cf4:	b.cs	d10 <grub_elf64_size+0xb8>  // b.hs, b.nlast
     cf8:	ldr	x0, [sp, #48]
     cfc:	ldr	x1, [x0, #24]
     d00:	ldr	x0, [sp, #48]
     d04:	ldr	x0, [x0, #40]
     d08:	add	x0, x1, x0
     d0c:	str	x0, [sp, #64]
     d10:	ldr	w1, [sp, #56]
     d14:	ldr	x0, [sp, #48]
     d18:	ldr	x0, [x0, #48]
     d1c:	cmp	x1, x0
     d20:	b.cs	d38 <grub_elf64_size+0xe0>  // b.hs, b.nlast
     d24:	ldr	x0, [sp, #48]
     d28:	ldr	x0, [x0, #48]
     d2c:	str	w0, [sp, #56]
     d30:	b	d38 <grub_elf64_size+0xe0>
     d34:	nop
     d38:	ldr	x0, [sp, #48]
     d3c:	add	x0, x0, #0x38
     d40:	str	x0, [sp, #48]
     d44:	ldr	x0, [sp, #48]
     d48:	cmp	x0, #0x0
     d4c:	b.eq	d84 <grub_elf64_size+0x12c>  // b.none
     d50:	ldr	x0, [sp, #40]
     d54:	ldr	x2, [x0, #72]
     d58:	ldr	x0, [sp, #40]
     d5c:	ldrh	w0, [x0, #64]
     d60:	and	x1, x0, #0xffff
     d64:	mov	x0, x1
     d68:	lsl	x0, x0, #3
     d6c:	sub	x0, x0, x1
     d70:	lsl	x0, x0, #3
     d74:	add	x0, x2, x0
     d78:	ldr	x1, [sp, #48]
     d7c:	cmp	x1, x0
     d80:	b.cc	c9c <grub_elf64_size+0x44>  // b.lo, b.ul, b.last
     d84:	ldr	x0, [sp, #32]
     d88:	cmp	x0, #0x0
     d8c:	b.eq	d98 <grub_elf64_size+0x140>  // b.none
     d90:	ldr	x0, [sp, #32]
     d94:	str	xzr, [x0]
     d98:	ldr	w0, [sp, #60]
     d9c:	cmp	w0, #0x0
     da0:	b.ne	dc0 <grub_elf64_size+0x168>  // b.any
     da4:	adrp	x0, 0 <grub_elf_check_header>
     da8:	add	x0, x0, #0x0
     dac:	ldr	x1, [x0]
     db0:	mov	w0, #0x15                  	// #21
     db4:	bl	0 <grub_error>
     db8:	mov	x0, #0x0                   	// #0
     dbc:	b	e28 <grub_elf64_size+0x1d0>
     dc0:	ldr	x1, [sp, #64]
     dc4:	ldr	x0, [sp, #72]
     dc8:	cmp	x1, x0
     dcc:	b.cs	dec <grub_elf64_size+0x194>  // b.hs, b.nlast
     dd0:	adrp	x0, 0 <grub_elf_check_header>
     dd4:	add	x0, x0, #0x0
     dd8:	ldr	x1, [x0]
     ddc:	mov	w0, #0x15                  	// #21
     de0:	bl	0 <grub_error>
     de4:	mov	x0, #0x0                   	// #0
     de8:	b	e28 <grub_elf64_size+0x1d0>
     dec:	ldr	x0, [sp, #32]
     df0:	cmp	x0, #0x0
     df4:	b.eq	e04 <grub_elf64_size+0x1ac>  // b.none
     df8:	ldr	x0, [sp, #32]
     dfc:	ldr	x1, [sp, #72]
     e00:	str	x1, [x0]
     e04:	ldr	x0, [sp, #24]
     e08:	cmp	x0, #0x0
     e0c:	b.eq	e1c <grub_elf64_size+0x1c4>  // b.none
     e10:	ldr	w1, [sp, #56]
     e14:	ldr	x0, [sp, #24]
     e18:	str	x1, [x0]
     e1c:	ldr	x1, [sp, #64]
     e20:	ldr	x0, [sp, #72]
     e24:	sub	x0, x1, x0
     e28:	ldp	x29, x30, [sp], #80
     e2c:	ret
	...

0000000000000e40 <grub_elf64_load>:
     e40:	stp	x29, x30, [sp, #-112]!
     e44:	mov	x29, sp
     e48:	str	x0, [sp, #56]
     e4c:	str	x1, [sp, #48]
     e50:	str	x2, [sp, #40]
     e54:	str	w3, [sp, #36]
     e58:	str	x4, [sp, #24]
     e5c:	str	x5, [sp, #16]
     e60:	mov	x0, #0xffffffffffffffff    	// #-1
     e64:	str	x0, [sp, #104]
     e68:	str	xzr, [sp, #96]
     e6c:	ldr	x0, [sp, #56]
     e70:	bl	ac4 <grub_elf64_load_phdrs>
     e74:	ldr	x0, [sp, #56]
     e78:	ldr	x0, [x0, #72]
     e7c:	str	x0, [sp, #88]
     e80:	b	10cc <grub_elf64_load+0x28c>
     e84:	ldr	x0, [sp, #88]
     e88:	ldr	w0, [x0]
     e8c:	cmp	w0, #0x1
     e90:	b.eq	eb4 <grub_elf64_load+0x74>  // b.none
     e94:	ldr	w0, [sp, #36]
     e98:	and	w0, w0, #0x1
     e9c:	cmp	w0, #0x0
     ea0:	b.eq	10bc <grub_elf64_load+0x27c>  // b.none
     ea4:	ldr	x0, [sp, #88]
     ea8:	ldr	w0, [x0]
     eac:	cmp	w0, #0x2
     eb0:	b.ne	10bc <grub_elf64_load+0x27c>  // b.any
     eb4:	ldr	x0, [sp, #88]
     eb8:	ldr	x0, [x0, #24]
     ebc:	str	x0, [sp, #80]
     ec0:	ldr	w0, [sp, #36]
     ec4:	and	w0, w0, #0x6
     ec8:	cmp	w0, #0x6
     ecc:	b.eq	f18 <grub_elf64_load+0xd8>  // b.none
     ed0:	cmp	w0, #0x6
     ed4:	b.hi	f2c <grub_elf64_load+0xec>  // b.pmore
     ed8:	cmp	w0, #0x4
     edc:	b.eq	f08 <grub_elf64_load+0xc8>  // b.none
     ee0:	cmp	w0, #0x4
     ee4:	b.hi	f2c <grub_elf64_load+0xec>  // b.pmore
     ee8:	cmp	w0, #0x0
     eec:	b.eq	f28 <grub_elf64_load+0xe8>  // b.none
     ef0:	cmp	w0, #0x2
     ef4:	b.ne	f2c <grub_elf64_load+0xec>  // b.any
     ef8:	ldr	x0, [sp, #80]
     efc:	and	x0, x0, #0xfffffff
     f00:	str	x0, [sp, #80]
     f04:	b	f2c <grub_elf64_load+0xec>
     f08:	ldr	x0, [sp, #80]
     f0c:	and	x0, x0, #0x3fffffff
     f10:	str	x0, [sp, #80]
     f14:	b	f2c <grub_elf64_load+0xec>
     f18:	ldr	x0, [sp, #80]
     f1c:	and	x0, x0, #0x3fffffffffffffff
     f20:	str	x0, [sp, #80]
     f24:	b	f2c <grub_elf64_load+0xec>
     f28:	nop
     f2c:	ldr	x0, [sp, #40]
     f30:	ldr	x1, [sp, #80]
     f34:	add	x0, x1, x0
     f38:	str	x0, [sp, #80]
     f3c:	ldr	x1, [sp, #80]
     f40:	ldr	x0, [sp, #104]
     f44:	cmp	x1, x0
     f48:	b.cs	f54 <grub_elf64_load+0x114>  // b.hs, b.nlast
     f4c:	ldr	x0, [sp, #80]
     f50:	str	x0, [sp, #104]
     f54:	ldr	x0, [sp, #88]
     f58:	ldr	x0, [x0, #40]
     f5c:	mov	x5, x0
     f60:	ldr	x4, [sp, #80]
     f64:	adrp	x0, 0 <grub_elf_check_header>
     f68:	add	x0, x0, #0x0
     f6c:	ldr	x3, [x0]
     f70:	adrp	x0, 0 <grub_elf_check_header>
     f74:	add	x0, x0, #0x0
     f78:	ldr	x2, [x0]
     f7c:	mov	w1, #0x8e                  	// #142
     f80:	adrp	x0, 0 <grub_elf_check_header>
     f84:	add	x0, x0, #0x0
     f88:	ldr	x0, [x0]
     f8c:	bl	0 <grub_real_dprintf>
     f90:	ldr	x0, [sp, #56]
     f94:	ldr	x2, [x0]
     f98:	ldr	x0, [sp, #88]
     f9c:	ldr	x0, [x0, #8]
     fa0:	mov	x1, x0
     fa4:	mov	x0, x2
     fa8:	bl	0 <grub_file_seek>
     fac:	cmn	x0, #0x1
     fb0:	b.ne	fc8 <grub_elf64_load+0x188>  // b.any
     fb4:	adrp	x0, 0 <grub_elf_check_header>
     fb8:	add	x0, x0, #0x0
     fbc:	ldr	x0, [x0]
     fc0:	ldr	w0, [x0]
     fc4:	b	114c <grub_elf64_load+0x30c>
     fc8:	ldr	x0, [sp, #88]
     fcc:	ldr	x0, [x0, #32]
     fd0:	cmp	x0, #0x0
     fd4:	b.eq	1054 <grub_elf64_load+0x214>  // b.none
     fd8:	ldr	x0, [sp, #56]
     fdc:	ldr	x3, [x0]
     fe0:	ldr	x1, [sp, #80]
     fe4:	ldr	x0, [sp, #88]
     fe8:	ldr	x0, [x0, #32]
     fec:	mov	x2, x0
     ff0:	mov	x0, x3
     ff4:	bl	0 <grub_file_read>
     ff8:	str	x0, [sp, #72]
     ffc:	ldr	x0, [sp, #88]
    1000:	ldr	x1, [x0, #32]
    1004:	ldr	x0, [sp, #72]
    1008:	cmp	x1, x0
    100c:	b.eq	1054 <grub_elf64_load+0x214>  // b.none
    1010:	adrp	x0, 0 <grub_elf_check_header>
    1014:	add	x0, x0, #0x0
    1018:	ldr	x0, [x0]
    101c:	ldr	w0, [x0]
    1020:	cmp	w0, #0x0
    1024:	b.ne	1040 <grub_elf64_load+0x200>  // b.any
    1028:	ldr	x2, [sp, #48]
    102c:	adrp	x0, 0 <grub_elf_check_header>
    1030:	add	x0, x0, #0x0
    1034:	ldr	x1, [x0]
    1038:	mov	w0, #0x6                   	// #6
    103c:	bl	0 <grub_error>
    1040:	adrp	x0, 0 <grub_elf_check_header>
    1044:	add	x0, x0, #0x0
    1048:	ldr	x0, [x0]
    104c:	ldr	w0, [x0]
    1050:	b	114c <grub_elf64_load+0x30c>
    1054:	ldr	x0, [sp, #88]
    1058:	ldr	x1, [x0, #32]
    105c:	ldr	x0, [sp, #88]
    1060:	ldr	x0, [x0, #40]
    1064:	cmp	x1, x0
    1068:	b.cs	10a4 <grub_elf64_load+0x264>  // b.hs, b.nlast
    106c:	ldr	x0, [sp, #88]
    1070:	ldr	x1, [x0, #32]
    1074:	ldr	x0, [sp, #80]
    1078:	add	x0, x1, x0
    107c:	mov	x3, x0
    1080:	ldr	x0, [sp, #88]
    1084:	ldr	x1, [x0, #40]
    1088:	ldr	x0, [sp, #88]
    108c:	ldr	x0, [x0, #32]
    1090:	sub	x0, x1, x0
    1094:	mov	x2, x0
    1098:	mov	w1, #0x0                   	// #0
    109c:	mov	x0, x3
    10a0:	bl	0 <grub_memset>
    10a4:	ldr	x0, [sp, #88]
    10a8:	ldr	x0, [x0, #40]
    10ac:	ldr	x1, [sp, #96]
    10b0:	add	x0, x1, x0
    10b4:	str	x0, [sp, #96]
    10b8:	b	10c0 <grub_elf64_load+0x280>
    10bc:	nop
    10c0:	ldr	x0, [sp, #88]
    10c4:	add	x0, x0, #0x38
    10c8:	str	x0, [sp, #88]
    10cc:	ldr	x0, [sp, #88]
    10d0:	cmp	x0, #0x0
    10d4:	b.eq	110c <grub_elf64_load+0x2cc>  // b.none
    10d8:	ldr	x0, [sp, #56]
    10dc:	ldr	x2, [x0, #72]
    10e0:	ldr	x0, [sp, #56]
    10e4:	ldrh	w0, [x0, #64]
    10e8:	and	x1, x0, #0xffff
    10ec:	mov	x0, x1
    10f0:	lsl	x0, x0, #3
    10f4:	sub	x0, x0, x1
    10f8:	lsl	x0, x0, #3
    10fc:	add	x0, x2, x0
    1100:	ldr	x1, [sp, #88]
    1104:	cmp	x1, x0
    1108:	b.cc	e84 <grub_elf64_load+0x44>  // b.lo, b.ul, b.last
    110c:	ldr	x0, [sp, #24]
    1110:	cmp	x0, #0x0
    1114:	b.eq	1124 <grub_elf64_load+0x2e4>  // b.none
    1118:	ldr	x0, [sp, #24]
    111c:	ldr	x1, [sp, #104]
    1120:	str	x1, [x0]
    1124:	ldr	x0, [sp, #16]
    1128:	cmp	x0, #0x0
    112c:	b.eq	113c <grub_elf64_load+0x2fc>  // b.none
    1130:	ldr	x0, [sp, #16]
    1134:	ldr	x1, [sp, #96]
    1138:	str	x1, [x0]
    113c:	adrp	x0, 0 <grub_elf_check_header>
    1140:	add	x0, x0, #0x0
    1144:	ldr	x0, [x0]
    1148:	ldr	w0, [x0]
    114c:	ldp	x29, x30, [sp], #112
    1150:	ret
    1154:	nop
	...

0000000000001180 <grub_elf64_check_endianess_and_bswap_ehdr>:
    1180:	sub	sp, sp, #0x20
    1184:	str	x0, [sp, #8]
    1188:	ldr	x0, [sp, #8]
    118c:	add	x0, x0, #0x8
    1190:	str	x0, [sp, #24]
    1194:	ldr	x0, [sp, #24]
    1198:	ldrb	w0, [x0, #5]
    119c:	cmp	w0, #0x1
    11a0:	b.ne	11ac <grub_elf64_check_endianess_and_bswap_ehdr+0x2c>  // b.any
    11a4:	mov	w0, #0x1                   	// #1
    11a8:	b	11b0 <grub_elf64_check_endianess_and_bswap_ehdr+0x30>
    11ac:	mov	w0, #0x0                   	// #0
    11b0:	add	sp, sp, #0x20
    11b4:	ret
