
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//regexp.module_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_cmd_regexp>:
       0:	stp	x29, x30, [sp, #-144]!
       4:	cmp	w1, #0x2
       8:	mov	x29, sp
       c:	stp	x19, x20, [sp, #16]
      10:	b.eq	38 <grub_cmd_regexp+0x38>  // b.none
      14:	adrp	x1, 0 <grub_cmd_regexp>
      18:	mov	w0, #0x12                  	// #18
      1c:	ldr	x1, [x1]
      20:	bl	0 <grub_error>
      24:	mov	w19, w0
      28:	mov	w0, w19
      2c:	ldp	x19, x20, [sp, #16]
      30:	ldp	x29, x30, [sp], #144
      34:	ret
      38:	stp	x21, x22, [sp, #32]
      3c:	mov	x21, x2
      40:	mov	x22, x0
      44:	mov	w2, #0x1                   	// #1
      48:	add	x0, sp, #0x50
      4c:	ldr	x1, [x21]
      50:	mov	x20, #0x0                   	// #0
      54:	bl	e650 <regcomp>
      58:	mov	w19, w0
      5c:	cbz	w0, dc <grub_cmd_regexp+0xdc>
      60:	mov	x0, x20
      64:	bl	0 <grub_free>
      68:	add	x1, sp, #0x50
      6c:	mov	x3, #0x0                   	// #0
      70:	mov	x2, #0x0                   	// #0
      74:	mov	w0, w19
      78:	bl	e768 <regerror>
      7c:	mov	x21, x0
      80:	bl	0 <grub_malloc>
      84:	mov	x20, x0
      88:	cbz	x0, 1c0 <grub_cmd_regexp+0x1c0>
      8c:	mov	x3, x21
      90:	mov	x2, x20
      94:	add	x1, sp, #0x50
      98:	mov	w0, w19
      9c:	bl	e768 <regerror>
      a0:	adrp	x1, 0 <grub_cmd_regexp>
      a4:	mov	x2, x20
      a8:	mov	w0, #0x1                   	// #1
      ac:	ldr	x1, [x1]
      b0:	bl	0 <grub_error>
      b4:	mov	w19, w0
      b8:	add	x0, sp, #0x50
      bc:	bl	e808 <regfree>
      c0:	mov	x0, x20
      c4:	bl	0 <grub_free>
      c8:	mov	w0, w19
      cc:	ldp	x19, x20, [sp, #16]
      d0:	ldp	x21, x22, [sp, #32]
      d4:	ldp	x29, x30, [sp], #144
      d8:	ret
      dc:	ldr	x0, [sp, #128]
      e0:	add	x0, x0, #0x1
      e4:	lsl	x0, x0, #3
      e8:	bl	0 <grub_zalloc>
      ec:	mov	x20, x0
      f0:	cbz	x0, 60 <grub_cmd_regexp+0x60>
      f4:	ldr	x1, [x21, #8]
      f8:	mov	x3, x0
      fc:	ldr	x2, [sp, #128]
     100:	add	x0, sp, #0x50
     104:	mov	w4, #0x0                   	// #0
     108:	add	x2, x2, #0x1
     10c:	bl	e850 <regexec>
     110:	mov	w19, w0
     114:	cbnz	w0, 60 <grub_cmd_regexp+0x60>
     118:	ldr	x0, [x22, #8]
     11c:	stp	x23, x24, [sp, #48]
     120:	ldr	x22, [sp, #128]
     124:	ldr	x0, [x0, #8]
     128:	add	x22, x22, #0x1
     12c:	ldr	x23, [x21, #8]
     130:	cbz	x0, 1dc <grub_cmd_regexp+0x1dc>
     134:	mov	x21, x0
     138:	ldr	x0, [x21]
     13c:	cbz	x0, 1dc <grub_cmd_regexp+0x1dc>
     140:	mov	w1, #0x3a                  	// #58
     144:	bl	0 <grub_strchr>
     148:	mov	x19, x0
     14c:	cbz	x0, 208 <grub_cmd_regexp+0x208>
     150:	ldr	x0, [x21]
     154:	add	x1, sp, #0x48
     158:	mov	w2, #0xa                   	// #10
     15c:	bl	0 <grub_strtoul>
     160:	mov	x1, x0
     164:	ldr	x2, [sp, #72]
     168:	cmp	x19, x2
     16c:	b.ne	24c <grub_cmd_regexp+0x24c>  // b.any
     170:	add	x0, x19, #0x1
     174:	cmp	x22, x1
     178:	b.ls	1fc <grub_cmd_regexp+0x1fc>  // b.plast
     17c:	lsl	x1, x1, #3
     180:	add	x19, x20, x1
     184:	ldr	w2, [x20, x1]
     188:	cmn	w2, #0x1
     18c:	b.eq	1fc <grub_cmd_regexp+0x1fc>  // b.none
     190:	ldrsw	x2, [x19, #4]
     194:	ldrb	w24, [x23, x2]
     198:	strb	wzr, [x23, x2]
     19c:	ldrsw	x1, [x20, x1]
     1a0:	add	x1, x23, x1
     1a4:	bl	0 <grub_env_set>
     1a8:	ldrsw	x1, [x19, #4]
     1ac:	mov	w19, w0
     1b0:	strb	w24, [x23, x1]
     1b4:	cbnz	w19, 1e0 <grub_cmd_regexp+0x1e0>
     1b8:	add	x21, x21, #0x8
     1bc:	b	138 <grub_cmd_regexp+0x138>
     1c0:	add	x0, sp, #0x50
     1c4:	bl	e808 <regfree>
     1c8:	adrp	x0, 0 <grub_cmd_regexp>
     1cc:	ldp	x21, x22, [sp, #32]
     1d0:	ldr	x0, [x0]
     1d4:	ldr	w19, [x0]
     1d8:	b	28 <grub_cmd_regexp+0x28>
     1dc:	mov	w19, #0x0                   	// #0
     1e0:	add	x0, sp, #0x50
     1e4:	bl	e808 <regfree>
     1e8:	mov	x0, x20
     1ec:	bl	0 <grub_free>
     1f0:	ldp	x21, x22, [sp, #32]
     1f4:	ldp	x23, x24, [sp, #48]
     1f8:	b	28 <grub_cmd_regexp+0x28>
     1fc:	add	x21, x21, #0x8
     200:	bl	0 <grub_env_unset>
     204:	b	138 <grub_cmd_regexp+0x138>
     208:	cmp	x22, #0x1
     20c:	ldr	x0, [x21]
     210:	b.ls	1fc <grub_cmd_regexp+0x1fc>  // b.plast
     214:	ldr	w1, [x20, #8]
     218:	cmn	w1, #0x1
     21c:	b.eq	1fc <grub_cmd_regexp+0x1fc>  // b.none
     220:	ldrsw	x1, [x20, #12]
     224:	ldrb	w24, [x23, x1]
     228:	strb	wzr, [x23, x1]
     22c:	ldrsw	x1, [x20, #8]
     230:	add	x1, x23, x1
     234:	bl	0 <grub_env_set>
     238:	ldrsw	x1, [x20, #12]
     23c:	mov	w19, w0
     240:	strb	w24, [x23, x1]
     244:	cbz	w19, 1b8 <grub_cmd_regexp+0x1b8>
     248:	b	1e0 <grub_cmd_regexp+0x1e0>
     24c:	adrp	x1, 0 <grub_cmd_regexp>
     250:	mov	w0, #0x12                  	// #18
     254:	ldr	x2, [x21]
     258:	ldr	x1, [x1]
     25c:	bl	0 <grub_error>
     260:	mov	w19, w0
     264:	b	1e0 <grub_cmd_regexp+0x1e0>
	...

0000000000000288 <grub_mod_init>:
     288:	stp	x29, x30, [sp, #-16]!
     28c:	adrp	x5, 0 <grub_cmd_regexp>
     290:	adrp	x4, 0 <grub_cmd_regexp>
     294:	adrp	x3, 0 <grub_cmd_regexp>
     298:	adrp	x1, 0 <grub_cmd_regexp>
     29c:	adrp	x0, 0 <grub_cmd_regexp>
     2a0:	mov	x29, sp
     2a4:	ldr	x5, [x5]
     2a8:	mov	w2, #0x0                   	// #0
     2ac:	ldr	x4, [x4]
     2b0:	ldr	x3, [x3]
     2b4:	ldr	x1, [x1]
     2b8:	ldr	x0, [x0]
     2bc:	bl	0 <grub_register_extcmd>
     2c0:	adrp	x3, 0 <grub_cmd_regexp>
     2c4:	adrp	x1, 0 <grub_cmd_regexp>
     2c8:	adrp	x2, 0 <grub_cmd_regexp>
     2cc:	ldr	x3, [x3]
     2d0:	ldr	x1, [x1]
     2d4:	ldr	x2, [x2]
     2d8:	str	x0, [x3]
     2dc:	str	x2, [x1]
     2e0:	ldp	x29, x30, [sp], #16
     2e4:	ret
	...

0000000000000328 <grub_mod_fini>:
     328:	stp	x29, x30, [sp, #-16]!
     32c:	adrp	x0, 0 <grub_cmd_regexp>
     330:	mov	x29, sp
     334:	ldr	x0, [x0]
     338:	ldr	x0, [x0]
     33c:	bl	0 <grub_unregister_extcmd>
     340:	adrp	x0, 0 <grub_cmd_regexp>
     344:	ldr	x0, [x0]
     348:	str	xzr, [x0]
     34c:	ldp	x29, x30, [sp], #16
     350:	ret
     354:	nop
	...

0000000000000368 <check_file_iter>:
     368:	stp	x29, x30, [sp, #-32]!
     36c:	mov	x29, sp
     370:	str	x19, [sp, #16]
     374:	mov	x19, x2
     378:	mov	x2, x1
     37c:	ldr	x1, [x19]
     380:	ldrb	w3, [x1]
     384:	cbz	w3, 41c <check_file_iter+0xb4>
     388:	ldrb	w2, [x2]
     38c:	tbz	w2, #2, 414 <check_file_iter+0xac>
     390:	ldrb	w4, [x0]
     394:	mov	x6, x0
     398:	cbz	w4, 434 <check_file_iter+0xcc>
     39c:	nop
     3a0:	sub	w2, w4, #0x41
     3a4:	sub	w7, w3, #0x41
     3a8:	cmp	w2, #0x1a
     3ac:	add	w5, w4, #0x20
     3b0:	csel	w5, w5, w4, cc  // cc = lo, ul, last
     3b4:	add	w0, w3, #0x20
     3b8:	cmp	w7, #0x1a
     3bc:	mov	w7, w4
     3c0:	csel	w3, w0, w3, cc  // cc = lo, ul, last
     3c4:	cmp	w3, w5
     3c8:	b.ne	43c <check_file_iter+0xd4>  // b.any
     3cc:	ldrb	w4, [x6, #1]!
     3d0:	ldrb	w3, [x1, #1]!
     3d4:	cbz	w4, 434 <check_file_iter+0xcc>
     3d8:	cbnz	w3, 3a0 <check_file_iter+0x38>
     3dc:	sub	w0, w4, #0x41
     3e0:	cmp	w0, #0x19
     3e4:	b.hi	404 <check_file_iter+0x9c>  // b.pmore
     3e8:	add	w7, w4, #0x20
     3ec:	sub	w1, w3, #0x41
     3f0:	add	w0, w3, #0x20
     3f4:	cmp	w1, #0x1a
     3f8:	csel	w3, w0, w3, cc  // cc = lo, ul, last
     3fc:	cmp	w7, w3
     400:	b.eq	41c <check_file_iter+0xb4>  // b.none
     404:	mov	w0, #0x0                   	// #0
     408:	ldr	x19, [sp, #16]
     40c:	ldp	x29, x30, [sp], #32
     410:	ret
     414:	bl	0 <grub_strcmp>
     418:	cbnz	w0, 404 <check_file_iter+0x9c>
     41c:	mov	w1, #0x1                   	// #1
     420:	str	w1, [x19, #8]
     424:	mov	w0, w1
     428:	ldr	x19, [sp, #16]
     42c:	ldp	x29, x30, [sp], #32
     430:	ret
     434:	mov	w7, #0x0                   	// #0
     438:	b	3ec <check_file_iter+0x84>
     43c:	ldrb	w3, [x1]
     440:	cmp	w2, #0x19
     444:	b.ls	3e8 <check_file_iter+0x80>  // b.plast
     448:	b	3ec <check_file_iter+0x84>
     44c:	nop

0000000000000450 <match_devices_iter>:
     450:	stp	x29, x30, [sp, #-64]!
     454:	mov	x29, sp
     458:	stp	x19, x20, [sp, #16]
     45c:	mov	x19, x1
     460:	ldr	w1, [x1, #8]
     464:	stp	x21, x22, [sp, #32]
     468:	mov	x21, x0
     46c:	cbz	w1, 494 <match_devices_iter+0x44>
     470:	mov	w1, #0x2c                  	// #44
     474:	mov	w20, #0x0                   	// #0
     478:	bl	0 <grub_strchr>
     47c:	cbz	x0, 494 <match_devices_iter+0x44>
     480:	mov	w0, w20
     484:	ldp	x19, x20, [sp, #16]
     488:	ldp	x21, x22, [sp, #32]
     48c:	ldp	x29, x30, [sp], #64
     490:	ret
     494:	adrp	x0, 0 <grub_cmd_regexp>
     498:	mov	x1, x21
     49c:	mov	w20, #0x1                   	// #1
     4a0:	ldr	x0, [x0]
     4a4:	bl	0 <grub_xasprintf>
     4a8:	mov	x21, x0
     4ac:	cbz	x0, 480 <match_devices_iter+0x30>
     4b0:	adrp	x1, 0 <grub_cmd_regexp>
     4b4:	adrp	x2, 0 <grub_cmd_regexp>
     4b8:	adrp	x0, 0 <grub_cmd_regexp>
     4bc:	str	x23, [sp, #48]
     4c0:	ldr	x3, [x1]
     4c4:	mov	x4, x21
     4c8:	ldr	x22, [x0]
     4cc:	mov	w1, #0xee                  	// #238
     4d0:	ldr	x23, [x2]
     4d4:	mov	x0, x22
     4d8:	mov	x2, x23
     4dc:	bl	0 <grub_real_dprintf>
     4e0:	ldr	x0, [x19]
     4e4:	mov	x1, x21
     4e8:	mov	w4, #0x0                   	// #0
     4ec:	mov	x3, #0x0                   	// #0
     4f0:	mov	x2, #0x0                   	// #0
     4f4:	bl	e850 <regexec>
     4f8:	mov	w20, w0
     4fc:	cbnz	w0, 54c <match_devices_iter+0xfc>
     500:	ldr	w1, [x19, #12]
     504:	ldr	x0, [x19, #16]
     508:	add	w1, w1, #0x2
     50c:	sbfiz	x1, x1, #3, #32
     510:	bl	0 <grub_realloc>
     514:	cbz	x0, 588 <match_devices_iter+0x138>
     518:	ldr	w1, [x19, #12]
     51c:	ldr	x23, [sp, #48]
     520:	add	w2, w1, #0x1
     524:	str	w2, [x19, #12]
     528:	add	x2, x0, w1, sxtw #3
     52c:	str	x0, [x19, #16]
     530:	str	x21, [x0, w1, sxtw #3]
     534:	mov	w0, w20
     538:	str	xzr, [x2, #8]
     53c:	ldp	x19, x20, [sp, #16]
     540:	ldp	x21, x22, [sp, #32]
     544:	ldp	x29, x30, [sp], #64
     548:	ret
     54c:	adrp	x3, 0 <grub_cmd_regexp>
     550:	mov	x2, x23
     554:	mov	w1, #0xf1                  	// #241
     558:	mov	x0, x22
     55c:	ldr	x3, [x3]
     560:	mov	w20, #0x0                   	// #0
     564:	bl	0 <grub_real_dprintf>
     568:	mov	x0, x21
     56c:	bl	0 <grub_free>
     570:	mov	w0, w20
     574:	ldp	x19, x20, [sp, #16]
     578:	ldp	x21, x22, [sp, #32]
     57c:	ldr	x23, [sp, #48]
     580:	ldp	x29, x30, [sp], #64
     584:	ret
     588:	mov	x0, x21
     58c:	mov	w20, #0x1                   	// #1
     590:	bl	0 <grub_free>
     594:	ldr	x23, [sp, #48]
     598:	b	480 <match_devices_iter+0x30>
     59c:	nop
	...

00000000000005c8 <match_files>:
     5c8:	stp	x29, x30, [sp, #-112]!
     5cc:	mov	x29, sp
     5d0:	stp	x19, x20, [sp, #16]
     5d4:	mov	x19, x1
     5d8:	mov	x20, x0
     5dc:	stp	x21, x22, [sp, #32]
     5e0:	stp	x23, x24, [sp, #48]
     5e4:	stp	x25, x26, [sp, #64]
     5e8:	mov	x25, x2
     5ec:	str	x3, [sp, #80]
     5f0:	stp	xzr, xzr, [sp, #88]
     5f4:	str	xzr, [sp, #104]
     5f8:	bl	0 <grub_error_push>
     5fc:	mov	x0, x20
     600:	bl	0 <grub_strlen>
     604:	add	x3, x25, w0, uxtw
     608:	mov	w22, w0
     60c:	sub	x3, x3, x19
     610:	and	x24, x0, #0xffffffff
     614:	add	w0, w3, #0x1
     618:	bl	0 <grub_malloc>
     61c:	mov	x23, x0
     620:	cbz	x0, 790 <match_files+0x1c8>
     624:	mov	x1, x20
     628:	bl	0 <grub_strcpy>
     62c:	cmp	x19, x25
     630:	adrp	x26, 0 <grub_cmd_regexp>
     634:	b.cc	64c <match_files+0x84>  // b.lo, b.ul, b.last
     638:	b	7e0 <match_files+0x218>
     63c:	strb	w20, [x24]
     640:	mov	x19, x21
     644:	cmp	x25, x19
     648:	b.ls	690 <match_files+0xc8>  // b.plast
     64c:	mov	x21, x19
     650:	add	x24, x23, w22, uxtw
     654:	add	w22, w22, #0x1
     658:	ldrb	w20, [x21], #1
     65c:	cmp	w20, #0x5c
     660:	cbz	w20, 694 <match_files+0xcc>
     664:	b.ne	63c <match_files+0x74>  // b.any
     668:	ldrb	w1, [x19, #1]
     66c:	ldr	x0, [x26]
     670:	bl	0 <grub_strchr>
     674:	cbz	x0, 63c <match_files+0x74>
     678:	ldrb	w0, [x19, #1]
     67c:	add	x19, x19, #0x2
     680:	strb	w0, [x24]
     684:	cmp	x25, x19
     688:	b.hi	64c <match_files+0x84>  // b.pmore
     68c:	nop
     690:	add	x24, x23, w22, uxtw
     694:	strb	wzr, [x24]
     698:	mov	x0, x23
     69c:	str	x23, [sp, #104]
     6a0:	bl	0 <grub_file_get_device_name>
     6a4:	mov	x23, x0
     6a8:	bl	0 <grub_device_open>
     6ac:	mov	x20, x0
     6b0:	cbz	x0, 7cc <match_files+0x204>
     6b4:	bl	0 <grub_fs_probe>
     6b8:	mov	x19, x0
     6bc:	cbz	x0, 724 <match_files+0x15c>
     6c0:	ldr	x1, [sp, #104]
     6c4:	ldrb	w0, [x1]
     6c8:	cmp	w0, #0x28
     6cc:	b.eq	7b4 <match_files+0x1ec>  // b.none
     6d0:	adrp	x0, 0 <grub_cmd_regexp>
     6d4:	add	x3, sp, #0x50
     6d8:	ldr	x4, [x19, #24]
     6dc:	ldr	x2, [x0]
     6e0:	mov	x0, x20
     6e4:	blr	x4
     6e8:	cbnz	w0, 724 <match_files+0x15c>
     6ec:	ldr	x0, [sp, #104]
     6f0:	bl	0 <grub_free>
     6f4:	mov	x0, x20
     6f8:	bl	0 <grub_device_close>
     6fc:	mov	x0, x23
     700:	bl	0 <grub_free>
     704:	bl	0 <grub_error_pop>
     708:	ldp	x19, x20, [sp, #16]
     70c:	ldp	x21, x22, [sp, #32]
     710:	ldp	x23, x24, [sp, #48]
     714:	ldp	x25, x26, [sp, #64]
     718:	ldr	x0, [sp, #88]
     71c:	ldp	x29, x30, [sp], #112
     720:	ret
     724:	ldr	x0, [sp, #104]
     728:	bl	0 <grub_free>
     72c:	ldr	x1, [sp, #88]
     730:	cbz	x1, 7d4 <match_files+0x20c>
     734:	mov	x19, #0x0                   	// #0
     738:	b	748 <match_files+0x180>
     73c:	bl	0 <grub_free>
     740:	ldr	x1, [sp, #88]
     744:	cbz	x1, 754 <match_files+0x18c>
     748:	ldr	x0, [x1, x19]
     74c:	add	x19, x19, #0x8
     750:	cbnz	x0, 73c <match_files+0x174>
     754:	mov	x0, x1
     758:	bl	0 <grub_free>
     75c:	cbz	x20, 768 <match_files+0x1a0>
     760:	mov	x0, x20
     764:	bl	0 <grub_device_close>
     768:	mov	x0, x23
     76c:	bl	0 <grub_free>
     770:	bl	0 <grub_error_pop>
     774:	mov	x0, #0x0                   	// #0
     778:	ldp	x19, x20, [sp, #16]
     77c:	ldp	x21, x22, [sp, #32]
     780:	ldp	x23, x24, [sp, #48]
     784:	ldp	x25, x26, [sp, #64]
     788:	ldp	x29, x30, [sp], #112
     78c:	ret
     790:	mov	x0, #0x0                   	// #0
     794:	str	xzr, [sp, #104]
     798:	bl	0 <grub_free>
     79c:	mov	x20, #0x0                   	// #0
     7a0:	ldr	x1, [sp, #88]
     7a4:	cbnz	x1, 734 <match_files+0x16c>
     7a8:	mov	x0, #0x0                   	// #0
     7ac:	bl	0 <grub_free>
     7b0:	b	768 <match_files+0x1a0>
     7b4:	mov	x0, x1
     7b8:	mov	w1, #0x29                  	// #41
     7bc:	bl	0 <grub_strchr>
     7c0:	cbz	x0, 724 <match_files+0x15c>
     7c4:	add	x1, x0, #0x1
     7c8:	b	6d0 <match_files+0x108>
     7cc:	ldr	x0, [sp, #104]
     7d0:	b	798 <match_files+0x1d0>
     7d4:	mov	x0, #0x0                   	// #0
     7d8:	bl	0 <grub_free>
     7dc:	b	760 <match_files+0x198>
     7e0:	add	x24, x23, x24
     7e4:	b	694 <match_files+0xcc>
	...

00000000000007f8 <wildcard_expand>:
     7f8:	stp	x29, x30, [sp, #-256]!
     7fc:	mov	x29, sp
     800:	stp	x21, x22, [sp, #32]
     804:	mov	x22, x0
     808:	str	xzr, [x1]
     80c:	str	x1, [sp, #144]
     810:	mov	w1, #0x2f                  	// #47
     814:	ldrb	w0, [x0]
     818:	and	w2, w0, #0xfffffffd
     81c:	cmp	w2, #0x28
     820:	ccmp	w0, w1, #0x4, ne  // ne = any
     824:	b.ne	ed0 <wildcard_expand+0x6d8>  // b.any
     828:	stp	x19, x20, [sp, #16]
     82c:	cbz	w0, 1064 <wildcard_expand+0x86c>
     830:	mov	x19, #0x2                   	// #2
     834:	mov	x20, #0x0                   	// #0
     838:	movk	x19, #0x5000, lsl #16
     83c:	stp	x23, x24, [sp, #48]
     840:	movk	x19, #0x7000, lsl #48
     844:	stp	x25, x26, [sp, #64]
     848:	stp	x27, x28, [sp, #80]
     84c:	str	wzr, [sp, #108]
     850:	mov	x21, x22
     854:	mov	x28, x22
     858:	mov	w2, #0x0                   	// #0
     85c:	mov	w3, #0x3f                  	// #63
     860:	b	884 <wildcard_expand+0x8c>
     864:	cmp	w0, #0x2a
     868:	mov	x1, x28
     86c:	ccmp	w0, w3, #0x4, ne  // ne = any
     870:	b.ne	a5c <wildcard_expand+0x264>  // b.any
     874:	add	x28, x28, #0x1
     878:	mov	w2, #0x1                   	// #1
     87c:	ldrb	w0, [x1, #1]
     880:	cbz	w0, 8a8 <wildcard_expand+0xb0>
     884:	cmp	w0, #0x5c
     888:	b.ne	864 <wildcard_expand+0x6c>  // b.any
     88c:	ldrb	w0, [x28, #1]
     890:	add	x1, x28, #0x1
     894:	cbz	w0, a90 <wildcard_expand+0x298>
     898:	ldrb	w0, [x1, #1]
     89c:	add	x28, x28, #0x2
     8a0:	cbnz	w0, 884 <wildcard_expand+0x8c>
     8a4:	nop
     8a8:	cbnz	w2, a9c <wildcard_expand+0x2a4>
     8ac:	adrp	x3, 0 <grub_cmd_regexp>
     8b0:	adrp	x2, 0 <grub_cmd_regexp>
     8b4:	adrp	x0, 0 <grub_cmd_regexp>
     8b8:	mov	w1, #0x1fd                 	// #509
     8bc:	ldr	x2, [x2]
     8c0:	ldr	x0, [x0]
     8c4:	stp	x2, x0, [sp, #128]
     8c8:	ldr	x3, [x3]
     8cc:	bl	0 <grub_real_dprintf>
     8d0:	cbz	x20, f6c <wildcard_expand+0x774>
     8d4:	ldr	x23, [x20]
     8d8:	cbz	x23, f2c <wildcard_expand+0x734>
     8dc:	sub	x0, x28, x22
     8e0:	mov	w25, #0x0                   	// #0
     8e4:	mov	w24, #0x0                   	// #0
     8e8:	str	x0, [sp, #112]
     8ec:	nop
     8f0:	mov	x0, x23
     8f4:	bl	0 <grub_strlen>
     8f8:	mov	x26, x0
     8fc:	ldr	x0, [sp, #112]
     900:	add	x0, x26, x0
     904:	add	x0, x0, #0x1
     908:	bl	0 <grub_malloc>
     90c:	mov	x21, x0
     910:	cbz	x0, ee0 <wildcard_expand+0x6e8>
     914:	mov	x2, x26
     918:	mov	x1, x23
     91c:	bl	0 <grub_memmove>
     920:	add	x5, x21, x26
     924:	cmp	x22, x28
     928:	b.cs	96c <wildcard_expand+0x174>  // b.hs, b.nlast
     92c:	mov	x3, x5
     930:	mov	x2, x22
     934:	b	94c <wildcard_expand+0x154>
     938:	strb	w4, [x1], #1
     93c:	mov	x2, x0
     940:	cmp	x2, x28
     944:	mov	x3, x1
     948:	b.cs	de8 <wildcard_expand+0x5f0>  // b.hs, b.nlast
     94c:	mov	x0, x2
     950:	mov	x1, x3
     954:	mov	x5, x3
     958:	ldrb	w4, [x0], #1
     95c:	cmp	w4, #0x5c
     960:	b.ne	938 <wildcard_expand+0x140>  // b.any
     964:	cmp	x28, x0
     968:	b.hi	dd0 <wildcard_expand+0x5d8>  // b.pmore
     96c:	ldr	w0, [sp, #108]
     970:	strb	wzr, [x5]
     974:	cbz	w0, a18 <wildcard_expand+0x220>
     978:	mov	x0, x21
     97c:	mov	w1, #0x2f                  	// #47
     980:	bl	0 <grub_strrchr>
     984:	mov	x27, x0
     988:	cbz	x0, a18 <wildcard_expand+0x220>
     98c:	mov	x26, x0
     990:	mov	x0, x21
     994:	strb	wzr, [x26], #1
     998:	str	wzr, [sp, #176]
     99c:	str	x26, [sp, #168]
     9a0:	bl	0 <grub_file_get_device_name>
     9a4:	bl	0 <grub_device_open>
     9a8:	cbz	x0, e18 <wildcard_expand+0x620>
     9ac:	str	x0, [sp, #120]
     9b0:	bl	0 <grub_fs_probe>
     9b4:	mov	x2, x0
     9b8:	ldr	x3, [sp, #120]
     9bc:	cbz	x0, e18 <wildcard_expand+0x620>
     9c0:	ldrb	w0, [x21]
     9c4:	mov	x1, x21
     9c8:	cmp	w0, #0x28
     9cc:	b.eq	df0 <wildcard_expand+0x5f8>  // b.none
     9d0:	adrp	x8, 0 <grub_cmd_regexp>
     9d4:	adrp	x9, 0 <grub_cmd_regexp>
     9d8:	ldr	x7, [x2, #24]
     9dc:	cmp	w0, #0x0
     9e0:	ldr	x2, [x8]
     9e4:	ldr	x0, [x9]
     9e8:	csel	x1, x1, x0, ne  // ne = any
     9ec:	mov	x0, x3
     9f0:	add	x3, sp, #0xa8
     9f4:	blr	x7
     9f8:	adrp	x0, 0 <grub_cmd_regexp>
     9fc:	ldr	x0, [x0]
     a00:	ldr	w1, [x0]
     a04:	cbnz	w1, d94 <wildcard_expand+0x59c>
     a08:	ldrb	w1, [x27, #1]
     a0c:	cbnz	w1, d94 <wildcard_expand+0x59c>
     a10:	mov	w0, #0x2f                  	// #47
     a14:	strb	w0, [x27]
     a18:	mov	x0, x23
     a1c:	bl	0 <grub_free>
     a20:	str	x21, [x20, w25, sxtw #3]
     a24:	add	w25, w25, #0x1
     a28:	add	w24, w24, #0x1
     a2c:	ldr	x23, [x20, w24, uxtw #3]
     a30:	cbnz	x23, 8f0 <wildcard_expand+0xf8>
     a34:	cbz	w25, f2c <wildcard_expand+0x734>
     a38:	str	xzr, [x20, w25, sxtw #3]
     a3c:	adrp	x1, 0 <grub_cmd_regexp>
     a40:	mov	x22, x28
     a44:	ldp	x2, x0, [sp, #128]
     a48:	ldr	x3, [x1]
     a4c:	mov	w1, #0x238                 	// #568
     a50:	ldr	x4, [x20]
     a54:	bl	0 <grub_real_dprintf>
     a58:	b	bf4 <wildcard_expand+0x3fc>
     a5c:	cmp	w0, #0x2f
     a60:	eor	w0, w2, #0x1
     a64:	cset	w1, eq  // eq = none
     a68:	csel	w0, w0, wzr, eq  // eq = none
     a6c:	cbz	w0, a84 <wildcard_expand+0x28c>
     a70:	add	x21, x28, #0x1
     a74:	mov	x1, x28
     a78:	mov	w2, #0x0                   	// #0
     a7c:	mov	x28, x21
     a80:	b	87c <wildcard_expand+0x84>
     a84:	tst	w1, w2
     a88:	b.ne	a9c <wildcard_expand+0x2a4>  // b.any
     a8c:	nop
     a90:	mov	x1, x28
     a94:	add	x28, x28, #0x1
     a98:	b	87c <wildcard_expand+0x84>
     a9c:	cmp	x28, x21
     aa0:	b.eq	8ac <wildcard_expand+0xb4>  // b.none
     aa4:	sub	x0, x28, x21
     aa8:	lsl	w0, w0, #1
     aac:	add	w0, w0, #0x3
     ab0:	bl	0 <grub_malloc>
     ab4:	mov	x24, x0
     ab8:	cbz	x0, ec8 <wildcard_expand+0x6d0>
     abc:	mov	w0, #0x5e                  	// #94
     ac0:	strb	w0, [x24]
     ac4:	cmp	x28, x21
     ac8:	b.ls	f60 <wildcard_expand+0x768>  // b.plast
     acc:	mov	x0, x21
     ad0:	mov	w3, #0x1                   	// #1
     ad4:	mov	w11, #0x5c                  	// #92
     ad8:	mov	x5, #0x1                   	// #1
     adc:	mov	w10, #0x2e                  	// #46
     ae0:	b	b10 <wildcard_expand+0x318>
     ae4:	sub	w1, w2, #0x3f
     ae8:	lsl	x1, x5, x1
     aec:	tst	x1, x19
     af0:	b.ne	c20 <wildcard_expand+0x428>  // b.any
     af4:	tbnz	w1, #0, c6c <wildcard_expand+0x474>
     af8:	tbnz	w1, #29, c4c <wildcard_expand+0x454>
     afc:	mov	w3, w7
     b00:	mov	x0, x4
     b04:	strb	w2, [x24, x8]
     b08:	cmp	x28, x0
     b0c:	b.ls	b58 <wildcard_expand+0x360>  // b.plast
     b10:	mov	x4, x0
     b14:	add	w7, w3, #0x1
     b18:	sxtw	x8, w3
     b1c:	add	x9, x24, w7, sxtw
     b20:	ldrb	w2, [x4], #1
     b24:	cmp	w2, #0x7d
     b28:	b.hi	afc <wildcard_expand+0x304>  // b.pmore
     b2c:	cmp	w2, #0x3e
     b30:	b.hi	ae4 <wildcard_expand+0x2ec>  // b.pmore
     b34:	cmp	w2, #0x2a
     b38:	b.ne	c0c <wildcard_expand+0x414>  // b.any
     b3c:	strb	w10, [x24, x8]
     b40:	add	w3, w3, #0x2
     b44:	strb	w2, [x24, w7, sxtw]
     b48:	mov	x0, x4
     b4c:	add	x9, x24, w3, sxtw
     b50:	cmp	x28, x0
     b54:	b.hi	b10 <wildcard_expand+0x318>  // b.pmore
     b58:	add	w1, w3, #0x1
     b5c:	sxtw	x1, w1
     b60:	adrp	x3, 0 <grub_cmd_regexp>
     b64:	adrp	x2, 0 <grub_cmd_regexp>
     b68:	adrp	x0, 0 <grub_cmd_regexp>
     b6c:	mov	w4, #0x24                  	// #36
     b70:	ldr	x2, [x2]
     b74:	strb	w4, [x9]
     b78:	ldr	x0, [x0]
     b7c:	strb	wzr, [x24, x1]
     b80:	ldr	x3, [x3]
     b84:	mov	x4, x24
     b88:	mov	w1, #0xa4                  	// #164
     b8c:	add	x23, sp, #0xc0
     b90:	bl	0 <grub_real_dprintf>
     b94:	mov	w2, #0xb24d                	// #45645
     b98:	mov	x0, x23
     b9c:	mov	x1, x24
     ba0:	movk	w2, #0x23, lsl #16
     ba4:	bl	e650 <regcomp>
     ba8:	cbnz	w0, eb4 <wildcard_expand+0x6bc>
     bac:	mov	x0, x24
     bb0:	bl	0 <grub_free>
     bb4:	cbnz	x20, c88 <wildcard_expand+0x490>
     bb8:	cmp	x22, x21
     bbc:	b.eq	eec <wildcard_expand+0x6f4>  // b.none
     bc0:	adrp	x0, 0 <grub_cmd_regexp>
     bc4:	mov	x2, x21
     bc8:	mov	x1, x22
     bcc:	mov	x3, x23
     bd0:	ldr	x0, [x0]
     bd4:	bl	5c8 <match_files>
     bd8:	mov	x20, x0
     bdc:	mov	x0, x23
     be0:	bl	e808 <regfree>
     be4:	cbz	x20, 1058 <wildcard_expand+0x860>
     be8:	mov	x22, x28
     bec:	mov	w0, #0x1                   	// #1
     bf0:	str	w0, [sp, #108]
     bf4:	ldrb	w0, [x28]
     bf8:	cbnz	w0, 850 <wildcard_expand+0x58>
     bfc:	ldp	x23, x24, [sp, #48]
     c00:	ldp	x25, x26, [sp, #64]
     c04:	ldp	x27, x28, [sp, #80]
     c08:	b	f44 <wildcard_expand+0x74c>
     c0c:	b.ls	c38 <wildcard_expand+0x440>  // b.plast
     c10:	cmp	w2, #0x2b
     c14:	b.eq	c20 <wildcard_expand+0x428>  // b.none
     c18:	cmp	w2, #0x2e
     c1c:	b.ne	afc <wildcard_expand+0x304>  // b.any
     c20:	add	w3, w3, #0x2
     c24:	strb	w11, [x24, x8]
     c28:	mov	x0, x4
     c2c:	strb	w2, [x24, w7, sxtw]
     c30:	add	x9, x24, w3, sxtw
     c34:	b	b08 <wildcard_expand+0x310>
     c38:	sub	w0, w2, #0x28
     c3c:	and	w0, w0, #0xff
     c40:	cmp	w0, #0x1
     c44:	b.hi	afc <wildcard_expand+0x304>  // b.pmore
     c48:	b	c20 <wildcard_expand+0x428>
     c4c:	strb	w11, [x24, x8]
     c50:	ldrb	w1, [x0, #1]
     c54:	cbz	w1, c7c <wildcard_expand+0x484>
     c58:	add	w3, w3, #0x2
     c5c:	add	x0, x0, #0x2
     c60:	strb	w1, [x24, w7, sxtw]
     c64:	add	x9, x24, w3, sxtw
     c68:	b	b08 <wildcard_expand+0x310>
     c6c:	mov	w3, w7
     c70:	mov	x0, x4
     c74:	strb	w10, [x24, x8]
     c78:	b	b08 <wildcard_expand+0x310>
     c7c:	mov	w3, w7
     c80:	mov	x0, x4
     c84:	b	b08 <wildcard_expand+0x310>
     c88:	ldr	x0, [x20]
     c8c:	cbz	x0, 1034 <wildcard_expand+0x83c>
     c90:	mov	x24, x20
     c94:	mov	x27, #0x0                   	// #0
     c98:	mov	w26, #0x0                   	// #0
     c9c:	nop
     ca0:	mov	x3, x23
     ca4:	mov	x2, x21
     ca8:	mov	x1, x22
     cac:	bl	5c8 <match_files>
     cb0:	mov	x25, x0
     cb4:	ldr	x0, [x24]
     cb8:	bl	0 <grub_free>
     cbc:	cbz	x25, d6c <wildcard_expand+0x574>
     cc0:	cbz	x27, d8c <wildcard_expand+0x594>
     cc4:	ldr	x0, [x27]
     cc8:	cbz	x0, e28 <wildcard_expand+0x630>
     ccc:	sub	x0, x27, #0x8
     cd0:	mov	x1, #0x1                   	// #1
     cd4:	nop
     cd8:	mov	w24, w1
     cdc:	add	x1, x1, #0x1
     ce0:	ldr	x2, [x0, x1, lsl #3]
     ce4:	cbnz	x2, cd8 <wildcard_expand+0x4e0>
     ce8:	ldr	x0, [x25]
     cec:	cbz	x0, e34 <wildcard_expand+0x63c>
     cf0:	sub	x3, x25, #0x8
     cf4:	mov	x1, #0x1                   	// #1
     cf8:	mov	w0, w1
     cfc:	add	x1, x1, #0x1
     d00:	ldr	x2, [x3, x1, lsl #3]
     d04:	cbnz	x2, cf8 <wildcard_expand+0x500>
     d08:	add	w1, w0, w24
     d0c:	mov	x0, x27
     d10:	add	w1, w1, #0x1
     d14:	sbfiz	x1, x1, #3, #32
     d18:	bl	0 <grub_realloc>
     d1c:	mov	x5, x0
     d20:	cbz	x0, e50 <wildcard_expand+0x658>
     d24:	ldr	x2, [x25]
     d28:	cbz	x2, d5c <wildcard_expand+0x564>
     d2c:	sxtw	x3, w24
     d30:	add	w1, w24, #0x1
     d34:	mvn	x3, x3
     d38:	sub	x4, x0, #0x8
     d3c:	sxtw	x1, w1
     d40:	add	x3, x25, x3, lsl #3
     d44:	nop
     d48:	mov	w24, w1
     d4c:	str	x2, [x4, x1, lsl #3]
     d50:	add	x1, x1, #0x1
     d54:	ldr	x2, [x3, x1, lsl #3]
     d58:	cbnz	x2, d48 <wildcard_expand+0x550>
     d5c:	str	xzr, [x5, w24, sxtw #3]
     d60:	mov	x0, x25
     d64:	mov	x27, x5
     d68:	bl	0 <grub_free>
     d6c:	add	w26, w26, #0x1
     d70:	add	x24, x20, w26, uxtw #3
     d74:	ldr	x0, [x20, w26, uxtw #3]
     d78:	cbnz	x0, ca0 <wildcard_expand+0x4a8>
     d7c:	mov	x0, x20
     d80:	mov	x20, x27
     d84:	bl	0 <grub_free>
     d88:	b	bdc <wildcard_expand+0x3e4>
     d8c:	mov	x27, x25
     d90:	b	d6c <wildcard_expand+0x574>
     d94:	ldr	w1, [sp, #176]
     d98:	str	wzr, [x0]
     d9c:	cbnz	w1, a10 <wildcard_expand+0x218>
     da0:	adrp	x0, 0 <grub_cmd_regexp>
     da4:	mov	x4, x26
     da8:	mov	x5, x21
     dac:	mov	w1, #0x226                 	// #550
     db0:	ldr	x3, [x0]
     db4:	ldp	x2, x0, [sp, #128]
     db8:	bl	0 <grub_real_dprintf>
     dbc:	mov	x0, x23
     dc0:	bl	0 <grub_free>
     dc4:	mov	x0, x21
     dc8:	bl	0 <grub_free>
     dcc:	b	a28 <wildcard_expand+0x230>
     dd0:	ldrb	w0, [x2, #1]
     dd4:	add	x2, x2, #0x2
     dd8:	strb	w0, [x1], #1
     ddc:	cmp	x2, x28
     de0:	mov	x3, x1
     de4:	b.cc	94c <wildcard_expand+0x154>  // b.lo, b.ul, b.last
     de8:	mov	x5, x1
     dec:	b	96c <wildcard_expand+0x174>
     df0:	mov	w1, #0x29                  	// #41
     df4:	mov	x0, x21
     df8:	str	x3, [sp, #120]
     dfc:	str	x2, [sp, #152]
     e00:	bl	0 <grub_strchr>
     e04:	mov	x1, x0
     e08:	ldr	x3, [sp, #120]
     e0c:	ldr	x2, [sp, #152]
     e10:	cbnz	x0, f20 <wildcard_expand+0x728>
     e14:	nop
     e18:	adrp	x0, 0 <grub_cmd_regexp>
     e1c:	ldr	w1, [sp, #176]
     e20:	ldr	x0, [x0]
     e24:	b	d98 <wildcard_expand+0x5a0>
     e28:	ldr	x0, [x25]
     e2c:	mov	w24, #0x0                   	// #0
     e30:	cbnz	x0, cf0 <wildcard_expand+0x4f8>
     e34:	mov	w1, w24
     e38:	mov	x0, x27
     e3c:	add	w1, w1, #0x1
     e40:	sbfiz	x1, x1, #3, #32
     e44:	bl	0 <grub_realloc>
     e48:	mov	x5, x0
     e4c:	cbnz	x0, d24 <wildcard_expand+0x52c>
     e50:	mov	x0, x27
     e54:	bl	0 <grub_free>
     e58:	mov	x0, x25
     e5c:	bl	0 <grub_free>
     e60:	ldr	x0, [x20]
     e64:	mov	w19, #0x0                   	// #0
     e68:	b	e74 <wildcard_expand+0x67c>
     e6c:	bl	0 <grub_free>
     e70:	ldr	x0, [x20, w19, uxtw #3]
     e74:	add	w19, w19, #0x1
     e78:	cbnz	x0, e6c <wildcard_expand+0x674>
     e7c:	mov	x0, x20
     e80:	bl	0 <grub_free>
     e84:	mov	x0, x23
     e88:	bl	e808 <regfree>
     e8c:	adrp	x0, 0 <grub_cmd_regexp>
     e90:	ldp	x19, x20, [sp, #16]
     e94:	ldr	x0, [x0]
     e98:	ldp	x21, x22, [sp, #32]
     e9c:	ldr	w0, [x0]
     ea0:	ldp	x23, x24, [sp, #48]
     ea4:	ldp	x25, x26, [sp, #64]
     ea8:	ldp	x27, x28, [sp, #80]
     eac:	ldp	x29, x30, [sp], #256
     eb0:	ret
     eb4:	mov	x0, x24
     eb8:	bl	0 <grub_free>
     ebc:	cbz	x20, e7c <wildcard_expand+0x684>
     ec0:	ldr	x0, [x20]
     ec4:	b	e64 <wildcard_expand+0x66c>
     ec8:	add	x23, sp, #0xc0
     ecc:	b	ebc <wildcard_expand+0x6c4>
     ed0:	mov	w0, #0x0                   	// #0
     ed4:	ldp	x21, x22, [sp, #32]
     ed8:	ldp	x29, x30, [sp], #256
     edc:	ret
     ee0:	add	x23, sp, #0xc0
     ee4:	ldr	x0, [x20]
     ee8:	b	e64 <wildcard_expand+0x66c>
     eec:	ldrb	w2, [x22]
     ef0:	adrp	x0, 0 <grub_cmd_regexp>
     ef4:	add	x1, sp, #0xa8
     ef8:	str	x23, [sp, #168]
     efc:	cmp	w2, #0x28
     f00:	str	xzr, [sp, #184]
     f04:	ldr	x0, [x0]
     f08:	cset	w2, ne  // ne = any
     f0c:	stp	w2, wzr, [sp, #176]
     f10:	bl	0 <grub_device_iterate>
     f14:	cbnz	w0, fe0 <wildcard_expand+0x7e8>
     f18:	ldr	x20, [sp, #184]
     f1c:	b	bdc <wildcard_expand+0x3e4>
     f20:	ldrb	w0, [x0, #1]
     f24:	add	x1, x1, #0x1
     f28:	b	9d0 <wildcard_expand+0x1d8>
     f2c:	mov	x0, x20
     f30:	bl	0 <grub_free>
     f34:	ldp	x23, x24, [sp, #48]
     f38:	mov	x20, #0x0                   	// #0
     f3c:	ldp	x25, x26, [sp, #64]
     f40:	ldp	x27, x28, [sp, #80]
     f44:	mov	w0, #0x0                   	// #0
     f48:	ldr	x1, [sp, #144]
     f4c:	ldp	x21, x22, [sp, #32]
     f50:	str	x20, [x1]
     f54:	ldp	x19, x20, [sp, #16]
     f58:	ldp	x29, x30, [sp], #256
     f5c:	ret
     f60:	add	x9, x24, #0x1
     f64:	mov	x1, #0x2                   	// #2
     f68:	b	b60 <wildcard_expand+0x368>
     f6c:	mov	x0, #0x10                  	// #16
     f70:	bl	0 <grub_malloc>
     f74:	mov	x20, x0
     f78:	cbz	x0, 1040 <wildcard_expand+0x848>
     f7c:	sub	x0, x28, x22
     f80:	add	x0, x0, #0x1
     f84:	bl	0 <grub_malloc>
     f88:	str	x0, [x20]
     f8c:	cbz	x0, 101c <wildcard_expand+0x824>
     f90:	cmp	x22, x28
     f94:	b.cs	fd4 <wildcard_expand+0x7dc>  // b.hs, b.nlast
     f98:	mov	x3, x0
     f9c:	b	fb4 <wildcard_expand+0x7bc>
     fa0:	mov	x22, x1
     fa4:	strb	w4, [x2], #1
     fa8:	cmp	x22, x28
     fac:	mov	x3, x2
     fb0:	b.cs	1048 <wildcard_expand+0x850>  // b.hs, b.nlast
     fb4:	mov	x1, x22
     fb8:	mov	x2, x3
     fbc:	mov	x0, x3
     fc0:	ldrb	w4, [x1], #1
     fc4:	cmp	w4, #0x5c
     fc8:	b.ne	fa0 <wildcard_expand+0x7a8>  // b.any
     fcc:	cmp	x28, x1
     fd0:	b.hi	1024 <wildcard_expand+0x82c>  // b.pmore
     fd4:	strb	wzr, [x0]
     fd8:	str	xzr, [x20, #8]
     fdc:	b	a3c <wildcard_expand+0x244>
     fe0:	ldr	x1, [sp, #184]
     fe4:	mov	x19, #0x0                   	// #0
     fe8:	cbnz	x1, ffc <wildcard_expand+0x804>
     fec:	b	1050 <wildcard_expand+0x858>
     ff0:	bl	0 <grub_free>
     ff4:	ldr	x1, [sp, #184]
     ff8:	cbz	x1, 1050 <wildcard_expand+0x858>
     ffc:	ldr	x0, [x1, x19]
    1000:	add	x19, x19, #0x8
    1004:	cbnz	x0, ff0 <wildcard_expand+0x7f8>
    1008:	mov	x0, x1
    100c:	bl	0 <grub_free>
    1010:	mov	x0, x23
    1014:	bl	e808 <regfree>
    1018:	b	bfc <wildcard_expand+0x404>
    101c:	add	x23, sp, #0xc0
    1020:	b	e64 <wildcard_expand+0x66c>
    1024:	ldrb	w0, [x22, #1]
    1028:	add	x22, x22, #0x2
    102c:	strb	w0, [x2], #1
    1030:	b	fa8 <wildcard_expand+0x7b0>
    1034:	mov	x0, x20
    1038:	mov	x20, #0x0                   	// #0
    103c:	b	100c <wildcard_expand+0x814>
    1040:	add	x23, sp, #0xc0
    1044:	b	e7c <wildcard_expand+0x684>
    1048:	mov	x0, x2
    104c:	b	fd4 <wildcard_expand+0x7dc>
    1050:	mov	x1, #0x0                   	// #0
    1054:	b	1008 <wildcard_expand+0x810>
    1058:	ldp	x23, x24, [sp, #48]
    105c:	ldp	x25, x26, [sp, #64]
    1060:	ldp	x27, x28, [sp, #80]
    1064:	mov	x20, #0x0                   	// #0
    1068:	b	f44 <wildcard_expand+0x74c>
    106c:	nop
	...

00000000000010c8 <match_files_iter>:
    10c8:	stp	x29, x30, [sp, #-64]!
    10cc:	adrp	x1, 0 <grub_cmd_regexp>
    10d0:	mov	x29, sp
    10d4:	stp	x19, x20, [sp, #16]
    10d8:	mov	x19, x0
    10dc:	ldr	x0, [x1]
    10e0:	mov	x1, x19
    10e4:	stp	x21, x22, [sp, #32]
    10e8:	mov	x21, x2
    10ec:	bl	0 <grub_strcmp>
    10f0:	cbnz	w0, 110c <match_files_iter+0x44>
    10f4:	mov	w20, #0x0                   	// #0
    10f8:	mov	w0, w20
    10fc:	ldp	x19, x20, [sp, #16]
    1100:	ldp	x21, x22, [sp, #32]
    1104:	ldp	x29, x30, [sp], #64
    1108:	ret
    110c:	adrp	x0, 0 <grub_cmd_regexp>
    1110:	mov	x1, x19
    1114:	ldr	x0, [x0]
    1118:	bl	0 <grub_strcmp>
    111c:	cbz	w0, 10f4 <match_files_iter+0x2c>
    1120:	adrp	x1, 0 <grub_cmd_regexp>
    1124:	adrp	x2, 0 <grub_cmd_regexp>
    1128:	adrp	x0, 0 <grub_cmd_regexp>
    112c:	mov	x4, x19
    1130:	ldr	x3, [x1]
    1134:	mov	w1, #0x134                 	// #308
    1138:	ldr	x5, [x21, #24]
    113c:	str	x23, [sp, #48]
    1140:	ldr	x22, [x0]
    1144:	ldr	x23, [x2]
    1148:	mov	x0, x22
    114c:	mov	x2, x23
    1150:	bl	0 <grub_real_dprintf>
    1154:	ldr	x0, [x21]
    1158:	mov	x1, x19
    115c:	mov	w4, #0x0                   	// #0
    1160:	mov	x3, #0x0                   	// #0
    1164:	mov	x2, #0x0                   	// #0
    1168:	bl	e850 <regexec>
    116c:	mov	w20, w0
    1170:	cbz	w0, 117c <match_files_iter+0xb4>
    1174:	ldr	x23, [sp, #48]
    1178:	b	10f4 <match_files_iter+0x2c>
    117c:	adrp	x3, 0 <grub_cmd_regexp>
    1180:	mov	x2, x23
    1184:	mov	x0, x22
    1188:	mov	w1, #0x138                 	// #312
    118c:	ldr	x3, [x3]
    1190:	bl	0 <grub_real_dprintf>
    1194:	adrp	x0, 0 <grub_cmd_regexp>
    1198:	mov	x2, x19
    119c:	ldr	x1, [x21, #24]
    11a0:	ldr	x0, [x0]
    11a4:	bl	0 <grub_xasprintf>
    11a8:	mov	x19, x0
    11ac:	cbz	x0, 11e8 <match_files_iter+0x120>
    11b0:	ldr	w1, [x21, #16]
    11b4:	ldr	x0, [x21, #8]
    11b8:	add	w1, w1, #0x2
    11bc:	lsl	x1, x1, #3
    11c0:	bl	0 <grub_realloc>
    11c4:	cbz	x0, 11f4 <match_files_iter+0x12c>
    11c8:	ldr	w2, [x21, #16]
    11cc:	ldr	x23, [sp, #48]
    11d0:	add	w1, w2, #0x1
    11d4:	str	x0, [x21, #8]
    11d8:	str	w1, [x21, #16]
    11dc:	str	x19, [x0, w2, uxtw #3]
    11e0:	str	xzr, [x0, w1, uxtw #3]
    11e4:	b	10f8 <match_files_iter+0x30>
    11e8:	mov	w20, #0x1                   	// #1
    11ec:	ldr	x23, [sp, #48]
    11f0:	b	10f8 <match_files_iter+0x30>
    11f4:	mov	x0, x19
    11f8:	mov	w20, #0x1                   	// #1
    11fc:	bl	0 <grub_free>
    1200:	ldr	x23, [sp, #48]
    1204:	b	10f8 <match_files_iter+0x30>
	...

0000000000001240 <re_node_set_compare>:
    1240:	cmp	x0, #0x0
    1244:	mov	x4, x0
    1248:	cset	w0, eq  // eq = none
    124c:	cmp	x1, #0x0
    1250:	csinc	w0, w0, wzr, ne  // ne = any
    1254:	cbnz	w0, 12a4 <re_node_set_compare+0x64>
    1258:	ldr	w2, [x1, #4]
    125c:	ldr	w3, [x4, #4]
    1260:	cmp	w3, w2
    1264:	b.ne	12a0 <re_node_set_compare+0x60>  // b.any
    1268:	sxtw	x2, w3
    126c:	sub	x2, x2, #0x1
    1270:	lsl	x2, x2, #2
    1274:	b	1294 <re_node_set_compare+0x54>
    1278:	ldr	x5, [x1, #8]
    127c:	ldr	x6, [x4, #8]
    1280:	ldr	w5, [x5, x2]
    1284:	ldr	w6, [x6, x2]
    1288:	sub	x2, x2, #0x4
    128c:	cmp	w6, w5
    1290:	b.ne	12a0 <re_node_set_compare+0x60>  // b.any
    1294:	subs	w3, w3, #0x1
    1298:	b.pl	1278 <re_node_set_compare+0x38>  // b.nfrst
    129c:	mov	w0, #0x1                   	// #1
    12a0:	ret
    12a4:	mov	w0, #0x0                   	// #0
    12a8:	ret
    12ac:	nop

00000000000012b0 <peek_token_bracket>:
    12b0:	ldr	w4, [x1, #72]
    12b4:	mov	x3, x0
    12b8:	ldr	w0, [x1, #56]
    12bc:	cmp	w4, w0
    12c0:	b.le	1368 <peek_token_bracket+0xb8>
    12c4:	ldr	x5, [x1, #8]
    12c8:	sxtw	x7, w0
    12cc:	ldr	w6, [x1, #104]
    12d0:	ldrb	w4, [x5, w0, sxtw]
    12d4:	cmp	w6, #0x1
    12d8:	strb	w4, [x3]
    12dc:	b.le	12fc <peek_token_bracket+0x4c>
    12e0:	ldr	w6, [x1, #44]
    12e4:	cmp	w0, w6
    12e8:	b.eq	12fc <peek_token_bracket+0x4c>  // b.none
    12ec:	ldr	x6, [x1, #16]
    12f0:	ldr	w6, [x6, x7, lsl #2]
    12f4:	cmn	w6, #0x1
    12f8:	b.eq	1340 <peek_token_bracket+0x90>  // b.none
    12fc:	cmp	w4, #0x5c
    1300:	b.eq	132c <peek_token_bracket+0x7c>  // b.none
    1304:	cmp	w4, #0x5b
    1308:	b.eq	1378 <peek_token_bracket+0xc8>  // b.none
    130c:	cmp	w4, #0x5d
    1310:	b.eq	13c4 <peek_token_bracket+0x114>  // b.none
    1314:	cmp	w4, #0x5e
    1318:	b.ne	1350 <peek_token_bracket+0xa0>  // b.any
    131c:	mov	w1, #0x19                  	// #25
    1320:	mov	w0, #0x1                   	// #1
    1324:	strb	w1, [x3, #8]
    1328:	ret
    132c:	tbz	w2, #0, 1340 <peek_token_bracket+0x90>
    1330:	ldr	w4, [x1, #64]
    1334:	add	w2, w0, #0x1
    1338:	cmp	w2, w4
    133c:	b.lt	13d4 <peek_token_bracket+0x124>  // b.tstop
    1340:	mov	w1, #0x1                   	// #1
    1344:	mov	w0, #0x1                   	// #1
    1348:	strb	w1, [x3, #8]
    134c:	ret
    1350:	cmp	w4, #0x2d
    1354:	b.ne	1340 <peek_token_bracket+0x90>  // b.any
    1358:	mov	w1, #0x16                  	// #22
    135c:	mov	w0, #0x1                   	// #1
    1360:	strb	w1, [x3, #8]
    1364:	ret
    1368:	mov	w1, #0x2                   	// #2
    136c:	mov	w0, #0x0                   	// #0
    1370:	strb	w1, [x3, #8]
    1374:	ret
    1378:	ldr	w1, [x1, #64]
    137c:	add	w0, w0, #0x1
    1380:	cmp	w0, w1
    1384:	b.ge	13ac <peek_token_bracket+0xfc>  // b.tcont
    1388:	add	x5, x5, x7
    138c:	ldrb	w0, [x5, #1]
    1390:	strb	w0, [x3]
    1394:	cmp	w0, #0x3a
    1398:	b.eq	1410 <peek_token_bracket+0x160>  // b.none
    139c:	cmp	w0, #0x3d
    13a0:	b.eq	1400 <peek_token_bracket+0x150>  // b.none
    13a4:	cmp	w0, #0x2e
    13a8:	b.eq	13f0 <peek_token_bracket+0x140>  // b.none
    13ac:	mov	w1, #0x1                   	// #1
    13b0:	mov	w2, #0x5b                  	// #91
    13b4:	mov	w0, #0x1                   	// #1
    13b8:	strb	w2, [x3]
    13bc:	strb	w1, [x3, #8]
    13c0:	ret
    13c4:	mov	w1, #0x15                  	// #21
    13c8:	mov	w0, #0x1                   	// #1
    13cc:	strb	w1, [x3, #8]
    13d0:	ret
    13d4:	str	w2, [x1, #56]
    13d8:	mov	w0, #0x1                   	// #1
    13dc:	mov	w1, #0x1                   	// #1
    13e0:	ldrb	w2, [x5, w2, sxtw]
    13e4:	strb	w2, [x3]
    13e8:	strb	w1, [x3, #8]
    13ec:	ret
    13f0:	mov	w1, #0x1a                  	// #26
    13f4:	mov	w0, #0x2                   	// #2
    13f8:	strb	w1, [x3, #8]
    13fc:	ret
    1400:	mov	w1, #0x1c                  	// #28
    1404:	mov	w0, #0x2                   	// #2
    1408:	strb	w1, [x3, #8]
    140c:	ret
    1410:	tbz	w2, #2, 13ac <peek_token_bracket+0xfc>
    1414:	mov	w1, #0x1e                  	// #30
    1418:	mov	w0, #0x2                   	// #2
    141c:	strb	w1, [x3, #8]
    1420:	ret
    1424:	nop

0000000000001428 <mark_opt_subexp>:
    1428:	ldrb	w2, [x1, #48]
    142c:	cmp	w2, #0x11
    1430:	b.eq	143c <mark_opt_subexp+0x14>  // b.none
    1434:	mov	w0, #0x0                   	// #0
    1438:	ret
    143c:	ldr	w2, [x1, #40]
    1440:	cmp	w2, w0
    1444:	b.ne	1434 <mark_opt_subexp+0xc>  // b.any
    1448:	ldrb	w0, [x1, #50]
    144c:	orr	w0, w0, #0x8
    1450:	strb	w0, [x1, #50]
    1454:	mov	w0, #0x0                   	// #0
    1458:	ret
    145c:	nop

0000000000001460 <check_dst_limits_calc_pos_1>:
    1460:	stp	x29, x30, [sp, #-128]!
    1464:	mov	x29, sp
    1468:	stp	x21, x22, [sp, #32]
    146c:	ldr	x22, [x0, #112]
    1470:	stp	x23, x24, [sp, #48]
    1474:	mov	x23, x0
    1478:	stp	x27, x28, [sp, #80]
    147c:	mov	w27, w1
    1480:	ldr	x8, [x22, #48]
    1484:	str	w3, [sp, #100]
    1488:	add	x24, x8, w3, sxtw #4
    148c:	ldr	w0, [x24, #4]
    1490:	cmp	w0, #0x0
    1494:	b.le	1648 <check_dst_limits_calc_pos_1+0x1e8>
    1498:	mov	w1, #0x14                  	// #20
    149c:	stp	x25, x26, [sp, #64]
    14a0:	mov	w25, w2
    14a4:	mov	x2, #0x1                   	// #1
    14a8:	smull	x1, w4, w1
    14ac:	lsl	x2, x2, x25
    14b0:	str	x2, [sp, #104]
    14b4:	mvn	w2, w2
    14b8:	str	x1, [sp, #120]
    14bc:	and	w1, w2, #0xffff
    14c0:	str	w1, [sp, #116]
    14c4:	and	w1, w27, #0x1
    14c8:	mov	w26, w4
    14cc:	stp	x19, x20, [sp, #16]
    14d0:	mov	x19, #0x0                   	// #0
    14d4:	str	w1, [sp, #112]
    14d8:	and	w1, w27, #0x2
    14dc:	str	w1, [sp, #96]
    14e0:	b	14f8 <check_dst_limits_calc_pos_1+0x98>
    14e4:	cmp	w5, #0x4
    14e8:	b.eq	1588 <check_dst_limits_calc_pos_1+0x128>  // b.none
    14ec:	add	x19, x19, #0x1
    14f0:	cmp	w0, w19
    14f4:	b.le	1640 <check_dst_limits_calc_pos_1+0x1e0>
    14f8:	ldr	x5, [x24, #8]
    14fc:	ldr	x3, [x22]
    1500:	ldr	w21, [x5, x19, lsl #2]
    1504:	sbfiz	x28, x21, #4, #32
    1508:	add	x5, x3, x28
    150c:	ldrb	w5, [x5, #8]
    1510:	cmp	w5, #0x8
    1514:	b.eq	1554 <check_dst_limits_calc_pos_1+0xf4>  // b.none
    1518:	cmp	w5, #0x9
    151c:	b.ne	14e4 <check_dst_limits_calc_pos_1+0x84>  // b.any
    1520:	ldr	w1, [sp, #96]
    1524:	cbz	w1, 14ec <check_dst_limits_calc_pos_1+0x8c>
    1528:	ldr	w1, [x3, x28]
    152c:	cmp	w1, w25
    1530:	b.ne	14ec <check_dst_limits_calc_pos_1+0x8c>  // b.any
    1534:	mov	w0, #0x0                   	// #0
    1538:	ldp	x19, x20, [sp, #16]
    153c:	ldp	x21, x22, [sp, #32]
    1540:	ldp	x23, x24, [sp, #48]
    1544:	ldp	x25, x26, [sp, #64]
    1548:	ldp	x27, x28, [sp, #80]
    154c:	ldp	x29, x30, [sp], #128
    1550:	ret
    1554:	ldr	w1, [sp, #112]
    1558:	cbz	w1, 14ec <check_dst_limits_calc_pos_1+0x8c>
    155c:	ldr	w1, [x3, x28]
    1560:	cmp	w1, w25
    1564:	b.ne	14ec <check_dst_limits_calc_pos_1+0x8c>  // b.any
    1568:	mov	w0, #0xffffffff            	// #-1
    156c:	ldp	x19, x20, [sp, #16]
    1570:	ldp	x21, x22, [sp, #32]
    1574:	ldp	x23, x24, [sp, #48]
    1578:	ldp	x25, x26, [sp, #64]
    157c:	ldp	x27, x28, [sp, #80]
    1580:	ldp	x29, x30, [sp], #128
    1584:	ret
    1588:	cmn	w26, #0x1
    158c:	b.eq	14ec <check_dst_limits_calc_pos_1+0x8c>  // b.none
    1590:	ldr	x0, [sp, #120]
    1594:	ldr	x20, [x23, #160]
    1598:	add	x20, x20, x0
    159c:	nop
    15a0:	ldr	w3, [x20]
    15a4:	mov	w4, w26
    15a8:	mov	w2, w25
    15ac:	mov	w1, w27
    15b0:	mov	x0, x23
    15b4:	cmp	w3, w21
    15b8:	b.ne	1620 <check_dst_limits_calc_pos_1+0x1c0>  // b.any
    15bc:	cmp	w25, #0x3f
    15c0:	b.gt	15d4 <check_dst_limits_calc_pos_1+0x174>
    15c4:	ldr	x5, [sp, #104]
    15c8:	ldrh	w3, [x20, #18]
    15cc:	tst	x3, x5
    15d0:	b.eq	1620 <check_dst_limits_calc_pos_1+0x1c0>  // b.none
    15d4:	ldr	x3, [x22, #40]
    15d8:	ldr	w5, [sp, #100]
    15dc:	add	x3, x3, x28
    15e0:	ldr	x3, [x3, #8]
    15e4:	ldr	w3, [x3]
    15e8:	cmp	w5, w3
    15ec:	b.eq	1660 <check_dst_limits_calc_pos_1+0x200>  // b.none
    15f0:	bl	1460 <check_dst_limits_calc_pos_1>
    15f4:	cmn	w0, #0x1
    15f8:	b.eq	1568 <check_dst_limits_calc_pos_1+0x108>  // b.none
    15fc:	cbnz	w0, 1608 <check_dst_limits_calc_pos_1+0x1a8>
    1600:	ldr	w0, [sp, #96]
    1604:	cbnz	w0, 1534 <check_dst_limits_calc_pos_1+0xd4>
    1608:	cmp	w25, #0x3f
    160c:	b.gt	1620 <check_dst_limits_calc_pos_1+0x1c0>
    1610:	ldrh	w0, [x20, #18]
    1614:	ldr	w1, [sp, #116]
    1618:	and	w0, w1, w0
    161c:	strh	w0, [x20, #18]
    1620:	ldrb	w0, [x20, #16]
    1624:	add	x20, x20, #0x14
    1628:	cbnz	w0, 15a0 <check_dst_limits_calc_pos_1+0x140>
    162c:	ldr	w0, [x24, #4]
    1630:	add	x19, x19, #0x1
    1634:	cmp	w0, w19
    1638:	b.gt	14f8 <check_dst_limits_calc_pos_1+0x98>
    163c:	nop
    1640:	ldp	x19, x20, [sp, #16]
    1644:	ldp	x25, x26, [sp, #64]
    1648:	asr	w0, w27, #1
    164c:	ldp	x21, x22, [sp, #32]
    1650:	ldp	x23, x24, [sp, #48]
    1654:	ldp	x27, x28, [sp, #80]
    1658:	ldp	x29, x30, [sp], #128
    165c:	ret
    1660:	sbfx	x0, x27, #0, #1
    1664:	ldp	x19, x20, [sp, #16]
    1668:	ldp	x21, x22, [sp, #32]
    166c:	ldp	x23, x24, [sp, #48]
    1670:	ldp	x25, x26, [sp, #64]
    1674:	ldp	x27, x28, [sp, #80]
    1678:	ldp	x29, x30, [sp], #128
    167c:	ret

0000000000001680 <check_dst_limits_calc_pos>:
    1680:	mov	x7, x0
    1684:	mov	w8, #0x14                  	// #20
    1688:	ldr	x0, [x0, #160]
    168c:	mov	w6, w4
    1690:	smaddl	x1, w1, w8, x0
    1694:	ldr	w0, [x1, #8]
    1698:	cmp	w0, w4
    169c:	b.gt	16e4 <check_dst_limits_calc_pos+0x64>
    16a0:	ldr	w4, [x1, #12]
    16a4:	cmp	w4, w6
    16a8:	b.lt	16dc <check_dst_limits_calc_pos+0x5c>  // b.tstop
    16ac:	cmp	w0, w6
    16b0:	cset	w1, eq  // eq = none
    16b4:	cmp	w4, w6
    16b8:	b.eq	16cc <check_dst_limits_calc_pos+0x4c>  // b.none
    16bc:	cmp	w0, w6
    16c0:	mov	w0, #0x0                   	// #0
    16c4:	b.eq	16d0 <check_dst_limits_calc_pos+0x50>  // b.none
    16c8:	ret
    16cc:	orr	w1, w1, #0x2
    16d0:	mov	w4, w5
    16d4:	mov	x0, x7
    16d8:	b	1460 <check_dst_limits_calc_pos_1>
    16dc:	mov	w0, #0x1                   	// #1
    16e0:	ret
    16e4:	mov	w0, #0xffffffff            	// #-1
    16e8:	ret
    16ec:	nop

00000000000016f0 <build_upper_buffer>:
    16f0:	ldr	w7, [x0, #52]
    16f4:	ldr	w1, [x0, #64]
    16f8:	ldr	w2, [x0, #44]
    16fc:	cmp	w7, w1
    1700:	csel	w7, w7, w1, le
    1704:	cmp	w7, w2
    1708:	b.le	1768 <build_upper_buffer+0x78>
    170c:	sxtw	x4, w2
    1710:	ldr	w1, [x0, #40]
    1714:	ldr	x5, [x0]
    1718:	add	w1, w2, w1
    171c:	ldr	x3, [x0, #80]
    1720:	add	w2, w2, #0x1
    1724:	ldrb	w1, [x5, w1, sxtw]
    1728:	cbnz	x3, 175c <build_upper_buffer+0x6c>
    172c:	ldr	x5, [x0, #8]
    1730:	sub	w6, w1, #0x61
    1734:	sub	w3, w1, #0x20
    1738:	cmp	w6, #0x1a
    173c:	and	w3, w3, #0xff
    1740:	csel	w1, w3, w1, cc  // cc = lo, ul, last
    1744:	strb	w1, [x5, x4]
    1748:	cmp	w7, w2
    174c:	add	x4, x4, #0x1
    1750:	b.ne	1710 <build_upper_buffer+0x20>  // b.any
    1754:	stp	w7, w7, [x0, #44]
    1758:	ret
    175c:	and	x1, x1, #0xff
    1760:	ldrb	w1, [x3, x1]
    1764:	b	172c <build_upper_buffer+0x3c>
    1768:	mov	w7, w2
    176c:	stp	w7, w7, [x0, #44]
    1770:	ret
    1774:	nop

0000000000001778 <postorder>:
    1778:	stp	x29, x30, [sp, #-48]!
    177c:	mov	x29, sp
    1780:	stp	x19, x20, [sp, #16]
    1784:	mov	x20, x2
    1788:	str	x21, [sp, #32]
    178c:	mov	x21, x1
    1790:	mov	x19, x0
    1794:	ldr	x0, [x0, #8]
    1798:	cbnz	x0, 1790 <postorder+0x18>
    179c:	ldr	x0, [x19, #16]
    17a0:	cbnz	x0, 1790 <postorder+0x18>
    17a4:	mov	x1, x19
    17a8:	mov	x0, x20
    17ac:	blr	x21
    17b0:	cbnz	w0, 17e4 <postorder+0x6c>
    17b4:	nop
    17b8:	ldr	x3, [x19]
    17bc:	cbz	x3, 17e4 <postorder+0x6c>
    17c0:	ldr	x0, [x3, #16]
    17c4:	cmp	x0, #0x0
    17c8:	ccmp	x0, x19, #0x4, ne  // ne = any
    17cc:	mov	x19, x3
    17d0:	b.ne	1790 <postorder+0x18>  // b.any
    17d4:	mov	x1, x19
    17d8:	mov	x0, x20
    17dc:	blr	x21
    17e0:	cbz	w0, 17b8 <postorder+0x40>
    17e4:	ldp	x19, x20, [sp, #16]
    17e8:	ldr	x21, [sp, #32]
    17ec:	ldp	x29, x30, [sp], #48
    17f0:	ret
    17f4:	nop

00000000000017f8 <preorder>:
    17f8:	stp	x29, x30, [sp, #-48]!
    17fc:	mov	x29, sp
    1800:	stp	x19, x20, [sp, #16]
    1804:	mov	x19, x0
    1808:	mov	x20, x2
    180c:	str	x21, [sp, #32]
    1810:	mov	x0, x20
    1814:	mov	x21, x1
    1818:	mov	x1, x19
    181c:	blr	x21
    1820:	cbnz	w0, 1844 <preorder+0x4c>
    1824:	nop
    1828:	ldr	x3, [x19, #8]
    182c:	cbz	x3, 1854 <preorder+0x5c>
    1830:	mov	x19, x3
    1834:	mov	x1, x19
    1838:	mov	x0, x20
    183c:	blr	x21
    1840:	cbz	w0, 1828 <preorder+0x30>
    1844:	ldp	x19, x20, [sp, #16]
    1848:	ldr	x21, [sp, #32]
    184c:	ldp	x29, x30, [sp], #48
    1850:	ret
    1854:	ldr	x4, [x19, #16]
    1858:	cmp	x4, #0x0
    185c:	ccmp	x4, x3, #0x4, ne  // ne = any
    1860:	b.ne	1888 <preorder+0x90>  // b.any
    1864:	nop
    1868:	ldr	x4, [x19]
    186c:	mov	x3, x19
    1870:	mov	x19, x4
    1874:	cbz	x4, 1844 <preorder+0x4c>
    1878:	ldr	x4, [x19, #16]
    187c:	cmp	x4, #0x0
    1880:	ccmp	x4, x3, #0x4, ne  // ne = any
    1884:	b.eq	1868 <preorder+0x70>  // b.none
    1888:	mov	x3, x4
    188c:	mov	x19, x3
    1890:	b	1834 <preorder+0x3c>
    1894:	nop

0000000000001898 <re_string_realloc_buffers>:
    1898:	stp	x29, x30, [sp, #-48]!
    189c:	mov	x29, sp
    18a0:	stp	x19, x20, [sp, #16]
    18a4:	mov	x19, x0
    18a8:	ldr	w0, [x0, #104]
    18ac:	mov	w20, w1
    18b0:	cmp	w0, #0x1
    18b4:	b.le	1904 <re_string_realloc_buffers+0x6c>
    18b8:	str	x21, [sp, #32]
    18bc:	mov	x0, #0x7fffffff            	// #2147483647
    18c0:	cmp	x0, w1, sxtw
    18c4:	sxtw	x21, w1
    18c8:	b.cc	1940 <re_string_realloc_buffers+0xa8>  // b.lo, b.ul, b.last
    18cc:	ldr	x0, [x19, #16]
    18d0:	lsl	x21, x21, #2
    18d4:	mov	x1, x21
    18d8:	bl	0 <grub_realloc>
    18dc:	mov	x2, x0
    18e0:	cbz	x0, 1940 <re_string_realloc_buffers+0xa8>
    18e4:	ldr	x0, [x19, #24]
    18e8:	str	x2, [x19, #16]
    18ec:	cbz	x0, 1938 <re_string_realloc_buffers+0xa0>
    18f0:	mov	x1, x21
    18f4:	bl	0 <grub_realloc>
    18f8:	cbz	x0, 1940 <re_string_realloc_buffers+0xa8>
    18fc:	ldr	x21, [sp, #32]
    1900:	str	x0, [x19, #24]
    1904:	ldrb	w0, [x19, #99]
    1908:	cbnz	w0, 1920 <re_string_realloc_buffers+0x88>
    190c:	str	w20, [x19, #52]
    1910:	mov	w0, #0x0                   	// #0
    1914:	ldp	x19, x20, [sp, #16]
    1918:	ldp	x29, x30, [sp], #48
    191c:	ret
    1920:	ldr	x0, [x19, #8]
    1924:	sxtw	x1, w20
    1928:	bl	0 <grub_realloc>
    192c:	cbz	x0, 1944 <re_string_realloc_buffers+0xac>
    1930:	str	x0, [x19, #8]
    1934:	b	190c <re_string_realloc_buffers+0x74>
    1938:	ldr	x21, [sp, #32]
    193c:	b	1904 <re_string_realloc_buffers+0x6c>
    1940:	ldr	x21, [sp, #32]
    1944:	mov	w0, #0xc                   	// #12
    1948:	ldp	x19, x20, [sp, #16]
    194c:	ldp	x29, x30, [sp], #48
    1950:	ret
    1954:	nop

0000000000001958 <re_node_set_insert_last>:
    1958:	stp	x29, x30, [sp, #-32]!
    195c:	mov	x29, sp
    1960:	stp	x19, x20, [sp, #16]
    1964:	mov	x19, x0
    1968:	ldr	w0, [x0]
    196c:	mov	w20, w1
    1970:	ldr	w2, [x19, #4]
    1974:	ldr	x1, [x19, #8]
    1978:	cmp	w0, w2
    197c:	b.eq	199c <re_node_set_insert_last+0x44>  // b.none
    1980:	add	w0, w2, #0x1
    1984:	str	w0, [x19, #4]
    1988:	mov	w0, #0x1                   	// #1
    198c:	str	w20, [x1, w2, sxtw #2]
    1990:	ldp	x19, x20, [sp, #16]
    1994:	ldp	x29, x30, [sp], #32
    1998:	ret
    199c:	add	w2, w2, #0x1
    19a0:	mov	x0, x1
    19a4:	lsl	w2, w2, #1
    19a8:	str	w2, [x19]
    19ac:	sbfiz	x1, x2, #2, #32
    19b0:	bl	0 <grub_realloc>
    19b4:	mov	x1, x0
    19b8:	cbz	x0, 19c8 <re_node_set_insert_last+0x70>
    19bc:	ldr	w2, [x19, #4]
    19c0:	str	x0, [x19, #8]
    19c4:	b	1980 <re_node_set_insert_last+0x28>
    19c8:	mov	w0, #0x0                   	// #0
    19cc:	b	1990 <re_node_set_insert_last+0x38>

00000000000019d0 <re_node_set_insert>:
    19d0:	stp	x29, x30, [sp, #-32]!
    19d4:	mov	x29, sp
    19d8:	stp	x19, x20, [sp, #16]
    19dc:	mov	w20, w1
    19e0:	ldr	w1, [x0]
    19e4:	mov	x19, x0
    19e8:	cbz	w1, 1a18 <re_node_set_insert+0x48>
    19ec:	ldr	w2, [x0, #4]
    19f0:	ldr	x0, [x0, #8]
    19f4:	cbnz	w2, 1a48 <re_node_set_insert+0x78>
    19f8:	str	w20, [x0]
    19fc:	mov	w0, #0x1                   	// #1
    1a00:	ldr	w1, [x19, #4]
    1a04:	add	w1, w1, w0
    1a08:	str	w1, [x19, #4]
    1a0c:	ldp	x19, x20, [sp, #16]
    1a10:	ldp	x29, x30, [sp], #32
    1a14:	ret
    1a18:	mov	x0, #0x100000001           	// #4294967297
    1a1c:	str	x0, [x19]
    1a20:	mov	x0, #0x4                   	// #4
    1a24:	bl	0 <grub_malloc>
    1a28:	str	x0, [x19, #8]
    1a2c:	mov	x1, x0
    1a30:	cbz	x0, 1ad0 <re_node_set_insert+0x100>
    1a34:	str	w20, [x1]
    1a38:	mov	w0, #0x1                   	// #1
    1a3c:	ldp	x19, x20, [sp, #16]
    1a40:	ldp	x29, x30, [sp], #32
    1a44:	ret
    1a48:	cmp	w1, w2
    1a4c:	b.eq	1adc <re_node_set_insert+0x10c>  // b.none
    1a50:	ldr	w4, [x0]
    1a54:	sxtw	x1, w2
    1a58:	sbfiz	x3, x2, #2, #32
    1a5c:	cmp	w4, w20
    1a60:	b.le	1aa0 <re_node_set_insert+0xd0>
    1a64:	cmp	w2, #0x0
    1a68:	b.le	1a88 <re_node_set_insert+0xb8>
    1a6c:	sub	x3, x0, #0x4
    1a70:	ldr	w2, [x3, x1, lsl #2]
    1a74:	str	w2, [x0, x1, lsl #2]
    1a78:	sub	x1, x1, #0x1
    1a7c:	cmp	w1, #0x0
    1a80:	b.gt	1a70 <re_node_set_insert+0xa0>
    1a84:	mov	x3, #0x0                   	// #0
    1a88:	str	w20, [x0, x3]
    1a8c:	mov	w0, #0x1                   	// #1
    1a90:	ldr	w1, [x19, #4]
    1a94:	add	w1, w1, w0
    1a98:	str	w1, [x19, #4]
    1a9c:	b	1a0c <re_node_set_insert+0x3c>
    1aa0:	add	x1, x0, x3
    1aa4:	ldur	w1, [x1, #-4]
    1aa8:	cmp	w20, w1
    1aac:	b.ge	1a88 <re_node_set_insert+0xb8>  // b.tcont
    1ab0:	sub	x2, x0, #0x4
    1ab4:	nop
    1ab8:	str	w1, [x0, x3]
    1abc:	sub	x3, x3, #0x4
    1ac0:	ldr	w1, [x2, x3]
    1ac4:	cmp	w1, w20
    1ac8:	b.gt	1ab8 <re_node_set_insert+0xe8>
    1acc:	b	1a88 <re_node_set_insert+0xb8>
    1ad0:	mov	w0, #0x0                   	// #0
    1ad4:	str	xzr, [x19]
    1ad8:	b	1a0c <re_node_set_insert+0x3c>
    1adc:	lsl	w1, w2, #1
    1ae0:	str	w1, [x19]
    1ae4:	sbfiz	x1, x1, #2, #32
    1ae8:	bl	0 <grub_realloc>
    1aec:	cbz	x0, 1afc <re_node_set_insert+0x12c>
    1af0:	ldr	w2, [x19, #4]
    1af4:	str	x0, [x19, #8]
    1af8:	b	1a50 <re_node_set_insert+0x80>
    1afc:	mov	w0, #0x0                   	// #0
    1b00:	b	1a0c <re_node_set_insert+0x3c>
    1b04:	nop

0000000000001b08 <register_state>:
    1b08:	stp	x29, x30, [sp, #-64]!
    1b0c:	mov	x29, sp
    1b10:	stp	x19, x20, [sp, #16]
    1b14:	mov	x20, x1
    1b18:	ldr	w19, [x1, #12]
    1b1c:	str	x23, [sp, #48]
    1b20:	mov	x23, x1
    1b24:	stp	x21, x22, [sp, #32]
    1b28:	mov	w22, w2
    1b2c:	mov	x21, x0
    1b30:	str	w2, [x23], #24
    1b34:	sbfiz	x0, x19, #2, #32
    1b38:	stp	w19, wzr, [x1, #24]
    1b3c:	bl	0 <grub_malloc>
    1b40:	str	x0, [x20, #32]
    1b44:	cmp	x0, #0x0
    1b48:	ccmp	w19, #0x0, #0x4, eq  // eq = none
    1b4c:	b.ne	1bf4 <register_state+0xec>  // b.any
    1b50:	ldr	w4, [x20, #12]
    1b54:	mov	x19, #0x0                   	// #0
    1b58:	cmp	w4, #0x0
    1b5c:	b.gt	1b70 <register_state+0x68>
    1b60:	b	1ba8 <register_state+0xa0>
    1b64:	add	x19, x19, #0x1
    1b68:	cmp	w4, w19
    1b6c:	b.le	1ba8 <register_state+0xa0>
    1b70:	ldr	x1, [x20, #16]
    1b74:	ldr	x3, [x21]
    1b78:	ldr	w1, [x1, x19, lsl #2]
    1b7c:	add	x3, x3, w1, sxtw #4
    1b80:	ldrb	w3, [x3, #8]
    1b84:	tbnz	w3, #3, 1b64 <register_state+0x5c>
    1b88:	mov	x0, x23
    1b8c:	bl	1958 <re_node_set_insert_last>
    1b90:	tst	w0, #0xff
    1b94:	b.eq	1bf4 <register_state+0xec>  // b.none
    1b98:	ldr	w4, [x20, #12]
    1b9c:	add	x19, x19, #0x1
    1ba0:	cmp	w4, w19
    1ba4:	b.gt	1b70 <register_state+0x68>
    1ba8:	ldr	w0, [x21, #132]
    1bac:	ldr	x19, [x21, #64]
    1bb0:	and	w22, w22, w0
    1bb4:	lsl	x22, x22, #4
    1bb8:	add	x21, x19, x22
    1bbc:	ldr	w1, [x19, x22]
    1bc0:	ldr	w2, [x21, #4]
    1bc4:	add	w0, w1, #0x1
    1bc8:	cmp	w2, w1
    1bcc:	ldr	x2, [x21, #8]
    1bd0:	b.le	1c0c <register_state+0x104>
    1bd4:	str	w0, [x19, x22]
    1bd8:	mov	w0, #0x0                   	// #0
    1bdc:	str	x20, [x2, w1, sxtw #3]
    1be0:	ldp	x19, x20, [sp, #16]
    1be4:	ldp	x21, x22, [sp, #32]
    1be8:	ldr	x23, [sp, #48]
    1bec:	ldp	x29, x30, [sp], #64
    1bf0:	ret
    1bf4:	mov	w0, #0xc                   	// #12
    1bf8:	ldp	x19, x20, [sp, #16]
    1bfc:	ldp	x21, x22, [sp, #32]
    1c00:	ldr	x23, [sp, #48]
    1c04:	ldp	x29, x30, [sp], #64
    1c08:	ret
    1c0c:	lsl	w23, w0, #1
    1c10:	mov	x0, x2
    1c14:	sbfiz	x1, x23, #3, #32
    1c18:	bl	0 <grub_realloc>
    1c1c:	mov	x2, x0
    1c20:	cbz	x0, 1bf4 <register_state+0xec>
    1c24:	ldr	w1, [x19, x22]
    1c28:	str	w23, [x21, #4]
    1c2c:	add	w0, w1, #0x1
    1c30:	str	x2, [x21, #8]
    1c34:	b	1bd4 <register_state+0xcc>

0000000000001c38 <free_charset>:
    1c38:	stp	x29, x30, [sp, #-32]!
    1c3c:	mov	x29, sp
    1c40:	str	x19, [sp, #16]
    1c44:	mov	x19, x0
    1c48:	ldr	x0, [x0]
    1c4c:	bl	0 <grub_free>
    1c50:	ldr	x0, [x19, #8]
    1c54:	bl	0 <grub_free>
    1c58:	ldr	x0, [x19, #16]
    1c5c:	bl	0 <grub_free>
    1c60:	ldr	x0, [x19, #24]
    1c64:	bl	0 <grub_free>
    1c68:	mov	x0, x19
    1c6c:	ldr	x19, [sp, #16]
    1c70:	ldp	x29, x30, [sp], #32
    1c74:	b	0 <grub_free>

0000000000001c78 <free_token>:
    1c78:	ldr	w1, [x0, #8]
    1c7c:	and	w1, w1, #0x7ffff
    1c80:	and	w1, w1, #0xfffc00ff
    1c84:	cmp	w1, #0x6
    1c88:	b.eq	1c98 <free_token+0x20>  // b.none
    1c8c:	cmp	w1, #0x3
    1c90:	b.eq	1ca0 <free_token+0x28>  // b.none
    1c94:	ret
    1c98:	ldr	x0, [x0]
    1c9c:	b	1c38 <free_charset>
    1ca0:	ldr	x0, [x0]
    1ca4:	b	0 <grub_free>

0000000000001ca8 <free_tree>:
    1ca8:	stp	x29, x30, [sp, #-16]!
    1cac:	add	x0, x1, #0x28
    1cb0:	mov	x29, sp
    1cb4:	bl	1c78 <free_token>
    1cb8:	mov	w0, #0x0                   	// #0
    1cbc:	ldp	x29, x30, [sp], #16
    1cc0:	ret
    1cc4:	nop

0000000000001cc8 <re_dfa_add_node>:
    1cc8:	stp	x29, x30, [sp, #-96]!
    1ccc:	mov	x29, sp
    1cd0:	stp	x21, x22, [sp, #32]
    1cd4:	mov	x21, x1
    1cd8:	ldp	x22, x4, [x0, #8]
    1cdc:	stp	x19, x20, [sp, #16]
    1ce0:	mov	x19, x0
    1ce4:	stp	x23, x24, [sp, #48]
    1ce8:	mov	x20, x2
    1cec:	stp	x25, x26, [sp, #64]
    1cf0:	and	w25, w2, #0xff
    1cf4:	cmp	x4, x22
    1cf8:	b.cs	1da0 <re_dfa_add_node+0xd8>  // b.hs, b.nlast
    1cfc:	ldr	x22, [x0, #24]
    1d00:	ldr	x23, [x0, #40]
    1d04:	lsl	x0, x4, #4
    1d08:	ldr	x1, [x19]
    1d0c:	and	w2, w20, #0xfffc00ff
    1d10:	cmp	w25, #0x6
    1d14:	add	x3, x1, x0
    1d18:	cset	w6, eq  // eq = none
    1d1c:	str	x21, [x1, x0]
    1d20:	cmp	w25, #0x5
    1d24:	str	x20, [x3, #8]
    1d28:	str	w2, [x3, #8]
    1d2c:	b.ne	1d3c <re_dfa_add_node+0x74>  // b.any
    1d30:	ldr	w1, [x19, #164]
    1d34:	cmp	w1, #0x1
    1d38:	cset	w6, gt
    1d3c:	ldrb	w5, [x3, #10]
    1d40:	mov	w7, #0xffffffff            	// #-1
    1d44:	mov	x2, #0x10                  	// #16
    1d48:	mov	w1, #0x0                   	// #0
    1d4c:	add	x0, x23, x0
    1d50:	bfi	w5, w6, #4, #1
    1d54:	strb	w5, [x3, #10]
    1d58:	str	w7, [x22, x4, lsl #2]
    1d5c:	bl	0 <grub_memset>
    1d60:	ldr	x3, [x19, #16]
    1d64:	mov	w1, #0x0                   	// #0
    1d68:	ldr	x0, [x19, #48]
    1d6c:	mov	x2, #0x10                  	// #16
    1d70:	add	x0, x0, x3, lsl #4
    1d74:	bl	0 <grub_memset>
    1d78:	ldr	x1, [x19, #16]
    1d7c:	mov	w0, w1
    1d80:	add	x1, x1, #0x1
    1d84:	str	x1, [x19, #16]
    1d88:	ldp	x19, x20, [sp, #16]
    1d8c:	ldp	x21, x22, [sp, #32]
    1d90:	ldp	x23, x24, [sp, #48]
    1d94:	ldp	x25, x26, [sp, #64]
    1d98:	ldp	x29, x30, [sp], #96
    1d9c:	ret
    1da0:	mov	x0, #0x7fffffff            	// #2147483647
    1da4:	lsl	x24, x22, #1
    1da8:	cmp	x0, x22, lsl #1
    1dac:	b.cc	1e48 <re_dfa_add_node+0x180>  // b.lo, b.ul, b.last
    1db0:	ldr	x0, [x19]
    1db4:	str	x27, [sp, #80]
    1db8:	lsl	x27, x22, #5
    1dbc:	mov	x1, x27
    1dc0:	bl	0 <grub_realloc>
    1dc4:	mov	x1, x0
    1dc8:	cbz	x0, 1e44 <re_dfa_add_node+0x17c>
    1dcc:	ldr	x0, [x19, #24]
    1dd0:	str	x1, [x19]
    1dd4:	lsl	x22, x22, #3
    1dd8:	mov	x1, x22
    1ddc:	bl	0 <grub_realloc>
    1de0:	mov	x1, x22
    1de4:	mov	x22, x0
    1de8:	ldr	x0, [x19, #32]
    1dec:	bl	0 <grub_realloc>
    1df0:	mov	x26, x0
    1df4:	ldr	x0, [x19, #40]
    1df8:	mov	x1, x27
    1dfc:	bl	0 <grub_realloc>
    1e00:	mov	x23, x0
    1e04:	ldr	x0, [x19, #48]
    1e08:	mov	x1, x27
    1e0c:	bl	0 <grub_realloc>
    1e10:	mov	x27, x0
    1e14:	cmp	x22, #0x0
    1e18:	ccmp	x26, #0x0, #0x4, ne  // ne = any
    1e1c:	b.eq	1e50 <re_dfa_add_node+0x188>  // b.none
    1e20:	cmp	x23, #0x0
    1e24:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    1e28:	b.eq	1e50 <re_dfa_add_node+0x188>  // b.none
    1e2c:	str	x24, [x19, #8]
    1e30:	stp	x22, x26, [x19, #24]
    1e34:	stp	x23, x0, [x19, #40]
    1e38:	ldr	x4, [x19, #16]
    1e3c:	ldr	x27, [sp, #80]
    1e40:	b	1d04 <re_dfa_add_node+0x3c>
    1e44:	ldr	x27, [sp, #80]
    1e48:	mov	w0, #0xffffffff            	// #-1
    1e4c:	b	1d88 <re_dfa_add_node+0xc0>
    1e50:	mov	x0, x22
    1e54:	bl	0 <grub_free>
    1e58:	mov	x0, x26
    1e5c:	bl	0 <grub_free>
    1e60:	mov	x0, x23
    1e64:	bl	0 <grub_free>
    1e68:	mov	x0, x27
    1e6c:	bl	0 <grub_free>
    1e70:	mov	w0, #0xffffffff            	// #-1
    1e74:	ldr	x27, [sp, #80]
    1e78:	b	1d88 <re_dfa_add_node+0xc0>
    1e7c:	nop

0000000000001e80 <duplicate_node>:
    1e80:	stp	x29, x30, [sp, #-48]!
    1e84:	mov	x29, sp
    1e88:	stp	x19, x20, [sp, #16]
    1e8c:	mov	w20, w1
    1e90:	mov	x19, x0
    1e94:	stp	x21, x22, [sp, #32]
    1e98:	sbfiz	x21, x1, #4, #32
    1e9c:	mov	w22, w2
    1ea0:	ldr	x1, [x0]
    1ea4:	add	x1, x1, x21
    1ea8:	ldp	x2, x3, [x1]
    1eac:	mov	x1, x2
    1eb0:	mov	x2, x3
    1eb4:	bl	1cc8 <re_dfa_add_node>
    1eb8:	cmn	w0, #0x1
    1ebc:	b.eq	1f04 <duplicate_node+0x84>  // b.none
    1ec0:	ldr	x3, [x19]
    1ec4:	and	w1, w22, #0x3ff
    1ec8:	add	x21, x3, x21
    1ecc:	add	x3, x3, w0, sxtw #4
    1ed0:	ldr	w4, [x3, #8]
    1ed4:	bfi	w4, w1, #8, #10
    1ed8:	str	w4, [x3, #8]
    1edc:	and	w4, w4, #0xfff800ff
    1ee0:	ldr	w2, [x21, #8]
    1ee4:	ldr	x5, [x19, #32]
    1ee8:	ubfx	x2, x2, #8, #10
    1eec:	orr	w2, w2, w1
    1ef0:	lsl	w2, w2, #8
    1ef4:	orr	w2, w2, #0x40000
    1ef8:	orr	w2, w2, w4
    1efc:	str	w2, [x3, #8]
    1f00:	str	w20, [x5, w0, sxtw #2]
    1f04:	ldp	x19, x20, [sp, #16]
    1f08:	ldp	x21, x22, [sp, #32]
    1f0c:	ldp	x29, x30, [sp], #48
    1f10:	ret
    1f14:	nop

0000000000001f18 <duplicate_node_closure>:
    1f18:	stp	x29, x30, [sp, #-80]!
    1f1c:	mov	x29, sp
    1f20:	stp	x19, x20, [sp, #16]
    1f24:	mov	x20, x0
    1f28:	mov	w19, w2
    1f2c:	stp	x21, x22, [sp, #32]
    1f30:	mov	w22, w3
    1f34:	mov	w21, w4
    1f38:	stp	x25, x26, [sp, #64]
    1f3c:	mov	w26, w1
    1f40:	stp	x23, x24, [sp, #48]
    1f44:	sbfiz	x24, x26, #4, #32
    1f48:	ldr	x6, [x20]
    1f4c:	sxtw	x23, w26
    1f50:	ldr	x5, [x20, #40]
    1f54:	add	x3, x6, x24
    1f58:	ldrb	w0, [x3, #8]
    1f5c:	cmp	w0, #0x4
    1f60:	b.eq	20e0 <duplicate_node_closure+0x1c8>  // b.none
    1f64:	add	x2, x5, x24
    1f68:	ldr	w0, [x2, #4]
    1f6c:	cbz	w0, 2190 <duplicate_node_closure+0x278>
    1f70:	ldr	x2, [x2, #8]
    1f74:	sbfiz	x23, x19, #4, #32
    1f78:	cmp	w0, #0x1
    1f7c:	add	x0, x5, x23
    1f80:	ldr	w25, [x2]
    1f84:	b.eq	206c <duplicate_node_closure+0x154>  // b.none
    1f88:	ldr	x1, [x20, #16]
    1f8c:	sub	w1, w1, #0x1
    1f90:	add	x4, x6, w1, sxtw #4
    1f94:	sxtw	x2, w1
    1f98:	ldrb	w3, [x4, #10]
    1f9c:	str	wzr, [x0, #4]
    1fa0:	tst	x3, #0x4
    1fa4:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    1fa8:	b.le	213c <duplicate_node_closure+0x224>
    1fac:	ldr	x5, [x20, #32]
    1fb0:	sub	x3, x2, #0x1
    1fb4:	add	x3, x6, x3, lsl #4
    1fb8:	add	x2, x5, x2, lsl #2
    1fbc:	b	1fdc <duplicate_node_closure+0xc4>
    1fc0:	mov	x4, x3
    1fc4:	sub	w1, w1, #0x1
    1fc8:	sub	x3, x3, #0x10
    1fcc:	ldrb	w5, [x4, #10]
    1fd0:	tst	x5, #0x4
    1fd4:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    1fd8:	b.le	213c <duplicate_node_closure+0x224>
    1fdc:	ldr	w5, [x2]
    1fe0:	sub	x2, x2, #0x4
    1fe4:	cmp	w5, w25
    1fe8:	b.ne	1fc0 <duplicate_node_closure+0xa8>  // b.any
    1fec:	ldr	w4, [x4, #8]
    1ff0:	ubfx	x4, x4, #8, #10
    1ff4:	cmp	w21, w4
    1ff8:	b.ne	1fc0 <duplicate_node_closure+0xa8>  // b.any
    1ffc:	bl	19d0 <re_node_set_insert>
    2000:	tst	w0, #0xff
    2004:	b.eq	2050 <duplicate_node_closure+0x138>  // b.none
    2008:	ldr	x1, [x20, #40]
    200c:	mov	w2, w21
    2010:	mov	x0, x20
    2014:	add	x24, x1, x24
    2018:	ldr	x1, [x24, #8]
    201c:	ldr	w26, [x1, #4]
    2020:	mov	w1, w26
    2024:	bl	1e80 <duplicate_node>
    2028:	mov	w19, w0
    202c:	cmn	w0, #0x1
    2030:	b.eq	2050 <duplicate_node_closure+0x138>  // b.none
    2034:	mov	w1, w0
    2038:	ldr	x0, [x20, #40]
    203c:	add	x0, x0, x23
    2040:	bl	19d0 <re_node_set_insert>
    2044:	tst	w0, #0xff
    2048:	b.ne	1f44 <duplicate_node_closure+0x2c>  // b.any
    204c:	nop
    2050:	mov	w0, #0xc                   	// #12
    2054:	ldp	x19, x20, [sp, #16]
    2058:	ldp	x21, x22, [sp, #32]
    205c:	ldp	x23, x24, [sp, #48]
    2060:	ldp	x25, x26, [sp, #64]
    2064:	ldp	x29, x30, [sp], #80
    2068:	ret
    206c:	str	wzr, [x0, #4]
    2070:	cmp	w26, w22
    2074:	ccmp	w26, w19, #0x4, eq  // eq = none
    2078:	b.ne	21a0 <duplicate_node_closure+0x288>  // b.any
    207c:	ldr	w2, [x3, #8]
    2080:	mov	w1, w25
    2084:	mov	x0, x20
    2088:	ubfx	x2, x2, #8, #10
    208c:	orr	w21, w21, w2
    2090:	mov	w2, w21
    2094:	bl	1e80 <duplicate_node>
    2098:	mov	w19, w0
    209c:	cmn	w0, #0x1
    20a0:	b.eq	2050 <duplicate_node_closure+0x138>  // b.none
    20a4:	mov	w1, w0
    20a8:	ldr	x0, [x20, #40]
    20ac:	add	x0, x0, x23
    20b0:	bl	19d0 <re_node_set_insert>
    20b4:	tst	w0, #0xff
    20b8:	b.eq	2050 <duplicate_node_closure+0x138>  // b.none
    20bc:	mov	w26, w25
    20c0:	ldr	x6, [x20]
    20c4:	sbfiz	x24, x26, #4, #32
    20c8:	sxtw	x23, w26
    20cc:	add	x3, x6, x24
    20d0:	ldr	x5, [x20, #40]
    20d4:	ldrb	w0, [x3, #8]
    20d8:	cmp	w0, #0x4
    20dc:	b.ne	1f64 <duplicate_node_closure+0x4c>  // b.any
    20e0:	sbfiz	x24, x19, #4, #32
    20e4:	mov	w2, w21
    20e8:	ldr	x1, [x20, #24]
    20ec:	add	x5, x5, x24
    20f0:	mov	x0, x20
    20f4:	sxtw	x25, w19
    20f8:	ldr	w26, [x1, x23, lsl #2]
    20fc:	str	wzr, [x5, #4]
    2100:	mov	w1, w26
    2104:	bl	1e80 <duplicate_node>
    2108:	mov	w19, w0
    210c:	cmn	w0, #0x1
    2110:	b.eq	2050 <duplicate_node_closure+0x138>  // b.none
    2114:	ldr	x2, [x20, #24]
    2118:	mov	w1, w0
    211c:	ldr	x0, [x20, #40]
    2120:	ldr	w3, [x2, x23, lsl #2]
    2124:	str	w3, [x2, x25, lsl #2]
    2128:	add	x0, x0, x24
    212c:	bl	19d0 <re_node_set_insert>
    2130:	tst	w0, #0xff
    2134:	b.ne	1f44 <duplicate_node_closure+0x2c>  // b.any
    2138:	b	2050 <duplicate_node_closure+0x138>
    213c:	mov	w2, w21
    2140:	mov	w1, w25
    2144:	mov	x0, x20
    2148:	bl	1e80 <duplicate_node>
    214c:	mov	w19, w0
    2150:	cmn	w0, #0x1
    2154:	b.eq	2050 <duplicate_node_closure+0x138>  // b.none
    2158:	ldr	x0, [x20, #40]
    215c:	mov	w1, w19
    2160:	add	x0, x0, x23
    2164:	bl	19d0 <re_node_set_insert>
    2168:	tst	w0, #0xff
    216c:	b.eq	2050 <duplicate_node_closure+0x138>  // b.none
    2170:	mov	w2, w19
    2174:	mov	w1, w25
    2178:	mov	w4, w21
    217c:	mov	w3, w22
    2180:	mov	x0, x20
    2184:	bl	1f18 <duplicate_node_closure>
    2188:	cbz	w0, 2008 <duplicate_node_closure+0xf0>
    218c:	b	2054 <duplicate_node_closure+0x13c>
    2190:	ldr	x1, [x20, #24]
    2194:	ldr	w2, [x1, x23, lsl #2]
    2198:	str	w2, [x1, w19, sxtw #2]
    219c:	b	2054 <duplicate_node_closure+0x13c>
    21a0:	mov	w1, w25
    21a4:	bl	19d0 <re_node_set_insert>
    21a8:	tst	w0, #0xff
    21ac:	mov	w0, #0x0                   	// #0
    21b0:	b.ne	2054 <duplicate_node_closure+0x13c>  // b.any
    21b4:	b	2050 <duplicate_node_closure+0x138>

00000000000021b8 <free_state>:
    21b8:	stp	x29, x30, [sp, #-32]!
    21bc:	mov	x29, sp
    21c0:	str	x19, [sp, #16]
    21c4:	mov	x19, x0
    21c8:	ldr	x0, [x0, #32]
    21cc:	bl	0 <grub_free>
    21d0:	ldr	x0, [x19, #48]
    21d4:	bl	0 <grub_free>
    21d8:	ldr	x0, [x19, #56]
    21dc:	add	x1, x19, #0x8
    21e0:	cmp	x0, x1
    21e4:	b.eq	21f8 <free_state+0x40>  // b.none
    21e8:	ldr	x0, [x0, #8]
    21ec:	bl	0 <grub_free>
    21f0:	ldr	x0, [x19, #56]
    21f4:	bl	0 <grub_free>
    21f8:	ldr	x0, [x19, #16]
    21fc:	bl	0 <grub_free>
    2200:	ldr	x0, [x19, #72]
    2204:	bl	0 <grub_free>
    2208:	ldr	x0, [x19, #64]
    220c:	bl	0 <grub_free>
    2210:	mov	x0, x19
    2214:	ldr	x19, [sp, #16]
    2218:	ldp	x29, x30, [sp], #32
    221c:	b	0 <grub_free>

0000000000002220 <re_string_destruct>:
    2220:	stp	x29, x30, [sp, #-32]!
    2224:	mov	x29, sp
    2228:	str	x19, [sp, #16]
    222c:	mov	x19, x0
    2230:	ldr	x0, [x0, #16]
    2234:	bl	0 <grub_free>
    2238:	ldr	x0, [x19, #24]
    223c:	bl	0 <grub_free>
    2240:	ldrb	w0, [x19, #99]
    2244:	cbnz	w0, 2254 <re_string_destruct+0x34>
    2248:	ldr	x19, [sp, #16]
    224c:	ldp	x29, x30, [sp], #32
    2250:	ret
    2254:	ldr	x0, [x19, #8]
    2258:	ldr	x19, [sp, #16]
    225c:	ldp	x29, x30, [sp], #32
    2260:	b	0 <grub_free>
    2264:	nop

0000000000002268 <free_dfa_content>:
    2268:	stp	x29, x30, [sp, #-48]!
    226c:	mov	x29, sp
    2270:	stp	x21, x22, [sp, #32]
    2274:	mov	x21, x0
    2278:	ldr	x0, [x0]
    227c:	stp	x19, x20, [sp, #16]
    2280:	cbz	x0, 22b0 <free_dfa_content+0x48>
    2284:	ldr	x1, [x21, #16]
    2288:	cbz	x1, 22b0 <free_dfa_content+0x48>
    228c:	mov	x19, #0x0                   	// #0
    2290:	b	2298 <free_dfa_content+0x30>
    2294:	ldr	x0, [x21]
    2298:	add	x0, x0, x19, lsl #4
    229c:	bl	1c78 <free_token>
    22a0:	add	x19, x19, #0x1
    22a4:	ldr	x0, [x21, #16]
    22a8:	cmp	x0, x19
    22ac:	b.hi	2294 <free_dfa_content+0x2c>  // b.pmore
    22b0:	ldr	x0, [x21, #24]
    22b4:	mov	x19, #0x0                   	// #0
    22b8:	bl	0 <grub_free>
    22bc:	ldr	x0, [x21, #16]
    22c0:	cbz	x0, 2314 <free_dfa_content+0xac>
    22c4:	nop
    22c8:	ldr	x0, [x21, #48]
    22cc:	add	x1, x0, x19, lsl #4
    22d0:	cbz	x0, 22dc <free_dfa_content+0x74>
    22d4:	ldr	x0, [x1, #8]
    22d8:	bl	0 <grub_free>
    22dc:	ldr	x0, [x21, #56]
    22e0:	add	x1, x0, x19, lsl #4
    22e4:	cbz	x0, 22f0 <free_dfa_content+0x88>
    22e8:	ldr	x0, [x1, #8]
    22ec:	bl	0 <grub_free>
    22f0:	ldr	x0, [x21, #40]
    22f4:	add	x1, x0, x19, lsl #4
    22f8:	add	x19, x19, #0x1
    22fc:	cbz	x0, 2308 <free_dfa_content+0xa0>
    2300:	ldr	x0, [x1, #8]
    2304:	bl	0 <grub_free>
    2308:	ldr	x0, [x21, #16]
    230c:	cmp	x0, x19
    2310:	b.hi	22c8 <free_dfa_content+0x60>  // b.pmore
    2314:	ldr	x0, [x21, #40]
    2318:	mov	x22, #0x0                   	// #0
    231c:	bl	0 <grub_free>
    2320:	ldr	x0, [x21, #48]
    2324:	bl	0 <grub_free>
    2328:	ldr	x0, [x21, #56]
    232c:	bl	0 <grub_free>
    2330:	ldr	x0, [x21]
    2334:	bl	0 <grub_free>
    2338:	ldr	x0, [x21, #64]
    233c:	cbz	x0, 2398 <free_dfa_content+0x130>
    2340:	lsl	x1, x22, #4
    2344:	mov	x19, #0x0                   	// #0
    2348:	add	x20, x0, x1
    234c:	ldr	w0, [x0, x1]
    2350:	cmp	w0, #0x0
    2354:	b.le	2374 <free_dfa_content+0x10c>
    2358:	ldr	x1, [x20, #8]
    235c:	ldr	x0, [x1, x19, lsl #3]
    2360:	add	x19, x19, #0x1
    2364:	bl	21b8 <free_state>
    2368:	ldr	w1, [x20]
    236c:	cmp	w1, w19
    2370:	b.gt	2358 <free_dfa_content+0xf0>
    2374:	ldr	x0, [x20, #8]
    2378:	add	x22, x22, #0x1
    237c:	bl	0 <grub_free>
    2380:	ldr	w0, [x21, #132]
    2384:	cmp	w0, w22
    2388:	b.cc	2394 <free_dfa_content+0x12c>  // b.lo, b.ul, b.last
    238c:	ldr	x0, [x21, #64]
    2390:	b	2340 <free_dfa_content+0xd8>
    2394:	ldr	x0, [x21, #64]
    2398:	bl	0 <grub_free>
    239c:	adrp	x1, 0 <grub_cmd_regexp>
    23a0:	ldr	x0, [x21, #120]
    23a4:	ldr	x1, [x1]
    23a8:	cmp	x0, x1
    23ac:	b.eq	23b4 <free_dfa_content+0x14c>  // b.none
    23b0:	bl	0 <grub_free>
    23b4:	ldr	x0, [x21, #208]
    23b8:	bl	0 <grub_free>
    23bc:	mov	x0, x21
    23c0:	ldp	x19, x20, [sp, #16]
    23c4:	ldp	x21, x22, [sp, #32]
    23c8:	ldp	x29, x30, [sp], #48
    23cc:	b	0 <grub_free>
	...

00000000000023d8 <match_ctx_clean>:
    23d8:	stp	x29, x30, [sp, #-64]!
    23dc:	mov	x29, sp
    23e0:	str	x23, [sp, #48]
    23e4:	mov	x23, x0
    23e8:	ldr	w0, [x0, #172]
    23ec:	cmp	w0, #0x0
    23f0:	b.le	2480 <match_ctx_clean+0xa8>
    23f4:	stp	x19, x20, [sp, #16]
    23f8:	stp	x21, x22, [sp, #32]
    23fc:	mov	x22, #0x0                   	// #0
    2400:	ldr	x0, [x23, #184]
    2404:	ldr	x21, [x0, x22, lsl #3]
    2408:	ldr	w0, [x21, #20]
    240c:	cmp	w0, #0x0
    2410:	b.le	2440 <match_ctx_clean+0x68>
    2414:	mov	x19, #0x0                   	// #0
    2418:	ldr	x1, [x21, #24]
    241c:	ldr	x20, [x1, x19, lsl #3]
    2420:	add	x19, x19, #0x1
    2424:	ldr	x0, [x20, #16]
    2428:	bl	0 <grub_free>
    242c:	mov	x0, x20
    2430:	bl	0 <grub_free>
    2434:	ldr	w1, [x21, #20]
    2438:	cmp	w1, w19
    243c:	b.gt	2418 <match_ctx_clean+0x40>
    2440:	ldr	x0, [x21, #24]
    2444:	bl	0 <grub_free>
    2448:	ldr	x0, [x21, #8]
    244c:	cbz	x0, 2460 <match_ctx_clean+0x88>
    2450:	ldr	x0, [x0, #8]
    2454:	bl	0 <grub_free>
    2458:	ldr	x0, [x21, #8]
    245c:	bl	0 <grub_free>
    2460:	mov	x0, x21
    2464:	bl	0 <grub_free>
    2468:	ldr	w0, [x23, #172]
    246c:	add	x22, x22, #0x1
    2470:	cmp	w0, w22
    2474:	b.gt	2400 <match_ctx_clean+0x28>
    2478:	ldp	x19, x20, [sp, #16]
    247c:	ldp	x21, x22, [sp, #32]
    2480:	str	wzr, [x23, #148]
    2484:	str	wzr, [x23, #172]
    2488:	ldr	x23, [sp, #48]
    248c:	ldp	x29, x30, [sp], #64
    2490:	ret
    2494:	nop

0000000000002498 <ispunct>:
    2498:	sub	w1, w0, #0x20
    249c:	cmp	w1, #0x5e
    24a0:	b.ls	24ac <ispunct+0x14>  // b.plast
    24a4:	mov	w0, #0x0                   	// #0
    24a8:	ret
    24ac:	stp	x29, x30, [sp, #-32]!
    24b0:	mov	x29, sp
    24b4:	str	x19, [sp, #16]
    24b8:	mov	w19, w0
    24bc:	bl	0 <grub_isspace>
    24c0:	cbnz	w0, 24e4 <ispunct+0x4c>
    24c4:	and	w0, w19, #0xffffffdf
    24c8:	sub	w0, w0, #0x41
    24cc:	cmp	w0, #0x19
    24d0:	b.ls	24e4 <ispunct+0x4c>  // b.plast
    24d4:	sub	w19, w19, #0x30
    24d8:	cmp	w19, #0x9
    24dc:	cset	w0, hi  // hi = pmore
    24e0:	b	24e8 <ispunct+0x50>
    24e4:	mov	w0, #0x0                   	// #0
    24e8:	ldr	x19, [sp, #16]
    24ec:	ldp	x29, x30, [sp], #32
    24f0:	ret
    24f4:	nop

00000000000024f8 <re_string_char_size_at.part.0>:
    24f8:	ldr	w3, [x0, #44]
    24fc:	add	w2, w1, #0x1
    2500:	cmp	w2, w3
    2504:	b.ge	253c <re_string_char_size_at.part.0+0x44>  // b.tcont
    2508:	ldr	x4, [x0, #16]
    250c:	sub	w3, w3, w1
    2510:	mov	w0, #0x1                   	// #1
    2514:	add	x1, x4, w2, sxtw #2
    2518:	b	2528 <re_string_char_size_at.part.0+0x30>
    251c:	add	w0, w0, #0x1
    2520:	cmp	w0, w3
    2524:	b.eq	2538 <re_string_char_size_at.part.0+0x40>  // b.none
    2528:	ldr	w2, [x1]
    252c:	add	x1, x1, #0x4
    2530:	cmn	w2, #0x1
    2534:	b.eq	251c <re_string_char_size_at.part.0+0x24>  // b.none
    2538:	ret
    253c:	mov	w0, #0x1                   	// #1
    2540:	ret
    2544:	nop

0000000000002548 <re_node_set_contains.isra.0>:
    2548:	cmp	w0, #0x0
    254c:	b.le	259c <re_node_set_contains.isra.0+0x54>
    2550:	sub	w3, w0, #0x1
    2554:	mov	w0, #0x0                   	// #0
    2558:	ldr	x5, [x1]
    255c:	b	2578 <re_node_set_contains.isra.0+0x30>
    2560:	lsr	w4, w1, #1
    2564:	lsr	w1, w1, #1
    2568:	ldr	w4, [x5, x4, lsl #2]
    256c:	cmp	w4, w2
    2570:	b.lt	2594 <re_node_set_contains.isra.0+0x4c>  // b.tstop
    2574:	mov	w3, w1
    2578:	add	w1, w3, w0
    257c:	cmp	w3, w0
    2580:	b.hi	2560 <re_node_set_contains.isra.0+0x18>  // b.pmore
    2584:	ldr	w1, [x5, w0, uxtw #2]
    2588:	cmp	w2, w1
    258c:	csinc	w0, wzr, w0, ne  // ne = any
    2590:	ret
    2594:	add	w0, w1, #0x1
    2598:	b	2578 <re_node_set_contains.isra.0+0x30>
    259c:	mov	w0, #0x0                   	// #0
    25a0:	ret
    25a4:	nop

00000000000025a8 <check_arrival_expand_ecl_sub>:
    25a8:	stp	x29, x30, [sp, #-64]!
    25ac:	mov	x29, sp
    25b0:	stp	x19, x20, [sp, #16]
    25b4:	mov	x20, x1
    25b8:	sbfiz	x19, x2, #4, #32
    25bc:	stp	x21, x22, [sp, #32]
    25c0:	mov	x21, x0
    25c4:	ldr	w0, [x20, #4]
    25c8:	stp	x23, x24, [sp, #48]
    25cc:	add	x24, x1, #0x8
    25d0:	mov	w23, w3
    25d4:	mov	x1, x24
    25d8:	mov	w22, w4
    25dc:	bl	2548 <re_node_set_contains.isra.0>
    25e0:	mov	w3, w0
    25e4:	mov	w1, w2
    25e8:	mov	x0, x20
    25ec:	cbnz	w3, 265c <check_arrival_expand_ecl_sub+0xb4>
    25f0:	ldr	x3, [x21]
    25f4:	add	x4, x3, x19
    25f8:	ldrb	w4, [x4, #8]
    25fc:	cmp	w4, w22
    2600:	b.ne	2610 <check_arrival_expand_ecl_sub+0x68>  // b.any
    2604:	ldr	w3, [x3, x19]
    2608:	cmp	w3, w23
    260c:	b.eq	26a4 <check_arrival_expand_ecl_sub+0xfc>  // b.none
    2610:	bl	19d0 <re_node_set_insert>
    2614:	tst	w0, #0xff
    2618:	b.eq	26c0 <check_arrival_expand_ecl_sub+0x118>  // b.none
    261c:	ldr	x2, [x21, #40]
    2620:	add	x2, x2, x19
    2624:	ldr	w0, [x2, #4]
    2628:	cmp	w0, #0x2
    262c:	cbz	w0, 265c <check_arrival_expand_ecl_sub+0xb4>
    2630:	ldr	x2, [x2, #8]
    2634:	b.eq	2674 <check_arrival_expand_ecl_sub+0xcc>  // b.none
    2638:	ldr	w2, [x2]
    263c:	ldr	w0, [x20, #4]
    2640:	mov	x1, x24
    2644:	sbfiz	x19, x2, #4, #32
    2648:	bl	2548 <re_node_set_contains.isra.0>
    264c:	mov	w3, w0
    2650:	mov	w1, w2
    2654:	mov	x0, x20
    2658:	cbz	w3, 25f0 <check_arrival_expand_ecl_sub+0x48>
    265c:	mov	w0, #0x0                   	// #0
    2660:	ldp	x19, x20, [sp, #16]
    2664:	ldp	x21, x22, [sp, #32]
    2668:	ldp	x23, x24, [sp, #48]
    266c:	ldp	x29, x30, [sp], #64
    2670:	ret
    2674:	ldr	w2, [x2, #4]
    2678:	mov	w4, w22
    267c:	mov	w3, w23
    2680:	mov	x1, x20
    2684:	mov	x0, x21
    2688:	bl	25a8 <check_arrival_expand_ecl_sub>
    268c:	cbnz	w0, 2660 <check_arrival_expand_ecl_sub+0xb8>
    2690:	ldr	x0, [x21, #40]
    2694:	add	x19, x0, x19
    2698:	ldr	x2, [x19, #8]
    269c:	ldr	w2, [x2]
    26a0:	b	263c <check_arrival_expand_ecl_sub+0x94>
    26a4:	cmp	w22, #0x9
    26a8:	b.ne	265c <check_arrival_expand_ecl_sub+0xb4>  // b.any
    26ac:	mov	w1, w2
    26b0:	mov	x0, x20
    26b4:	bl	19d0 <re_node_set_insert>
    26b8:	tst	w0, #0xff
    26bc:	b.ne	265c <check_arrival_expand_ecl_sub+0xb4>  // b.any
    26c0:	mov	w0, #0xc                   	// #12
    26c4:	ldp	x19, x20, [sp, #16]
    26c8:	ldp	x21, x22, [sp, #32]
    26cc:	ldp	x23, x24, [sp, #48]
    26d0:	ldp	x29, x30, [sp], #64
    26d4:	ret

00000000000026d8 <re_node_set_remove_at.isra.0.part.0>:
    26d8:	ldr	w3, [x0]
    26dc:	cmp	w2, w3
    26e0:	b.ge	2708 <re_node_set_remove_at.isra.0.part.0+0x30>  // b.tcont
    26e4:	ldr	x3, [x1]
    26e8:	sxtw	x1, w2
    26ec:	add	x4, x3, #0x4
    26f0:	ldr	w2, [x4, x1, lsl #2]
    26f4:	str	w2, [x3, x1, lsl #2]
    26f8:	add	x1, x1, #0x1
    26fc:	ldr	w2, [x0]
    2700:	cmp	w2, w1
    2704:	b.gt	26f0 <re_node_set_remove_at.isra.0.part.0+0x18>
    2708:	ret
    270c:	nop

0000000000002710 <optimize_subexps>:
    2710:	ldrb	w2, [x1, #48]
    2714:	cmp	w2, #0x4
    2718:	b.eq	2784 <optimize_subexps+0x74>  // b.none
    271c:	cmp	w2, #0x11
    2720:	b.eq	272c <optimize_subexps+0x1c>  // b.none
    2724:	mov	w0, #0x0                   	// #0
    2728:	ret
    272c:	ldr	x2, [x1, #8]
    2730:	cbz	x2, 2724 <optimize_subexps+0x14>
    2734:	ldrb	w3, [x2, #48]
    2738:	cmp	w3, #0x11
    273c:	b.ne	2724 <optimize_subexps+0x14>  // b.any
    2740:	ldr	x3, [x2, #8]
    2744:	ldr	w2, [x2, #40]
    2748:	str	x3, [x1, #8]
    274c:	cbz	x3, 2754 <optimize_subexps+0x44>
    2750:	str	x1, [x3]
    2754:	ldrsw	x3, [x1, #40]
    2758:	cmp	w2, #0x3f
    275c:	ldr	x1, [x0, #208]
    2760:	ldr	w3, [x1, x3, lsl #2]
    2764:	str	w3, [x1, w2, sxtw #2]
    2768:	b.gt	2724 <optimize_subexps+0x14>
    276c:	ldr	x3, [x0, #144]
    2770:	mov	x1, #0x1                   	// #1
    2774:	lsl	x1, x1, x2
    2778:	bic	x1, x3, x1
    277c:	str	x1, [x0, #144]
    2780:	b	2724 <optimize_subexps+0x14>
    2784:	ldr	x4, [x0, #208]
    2788:	cbz	x4, 2724 <optimize_subexps+0x14>
    278c:	ldrsw	x5, [x1, #40]
    2790:	mov	w2, #0x1                   	// #1
    2794:	ldr	x3, [x0, #144]
    2798:	ldr	w4, [x4, x5, lsl #2]
    279c:	str	w4, [x1, #40]
    27a0:	lsl	w1, w2, w4
    27a4:	sxtw	x1, w1
    27a8:	orr	x1, x3, x1
    27ac:	str	x1, [x0, #144]
    27b0:	mov	w0, #0x0                   	// #0
    27b4:	ret

00000000000027b8 <calc_next>:
    27b8:	ldrb	w0, [x1, #48]
    27bc:	ldr	x2, [x1, #8]
    27c0:	cmp	w0, #0xb
    27c4:	b.eq	27f4 <calc_next+0x3c>  // b.none
    27c8:	cmp	w0, #0x10
    27cc:	b.eq	2800 <calc_next+0x48>  // b.none
    27d0:	cbz	x2, 27dc <calc_next+0x24>
    27d4:	ldr	x0, [x1, #32]
    27d8:	str	x0, [x2, #32]
    27dc:	ldr	x0, [x1, #16]
    27e0:	cbz	x0, 27ec <calc_next+0x34>
    27e4:	ldr	x1, [x1, #32]
    27e8:	str	x1, [x0, #32]
    27ec:	mov	w0, #0x0                   	// #0
    27f0:	ret
    27f4:	mov	w0, #0x0                   	// #0
    27f8:	str	x1, [x2, #32]
    27fc:	ret
    2800:	ldr	x0, [x1, #16]
    2804:	ldr	x3, [x0, #24]
    2808:	str	x3, [x2, #32]
    280c:	ldr	x1, [x1, #32]
    2810:	str	x1, [x0, #32]
    2814:	mov	w0, #0x0                   	// #0
    2818:	ret
    281c:	nop

0000000000002820 <check_dst_limits.isra.0>:
    2820:	stp	x29, x30, [sp, #-64]!
    2824:	mov	x10, x0
    2828:	mov	x15, x2
    282c:	mov	x29, sp
    2830:	ldr	w16, [x0, #148]
    2834:	mov	w13, w4
    2838:	mov	w18, w5
    283c:	mov	w14, w6
    2840:	mov	w9, w16
    2844:	mov	w11, #0x0                   	// #0
    2848:	stp	x19, x20, [sp, #16]
    284c:	mov	x19, x1
    2850:	mov	w20, w3
    2854:	mov	w1, #0x14                  	// #20
    2858:	stp	x21, x22, [sp, #32]
    285c:	ldr	x21, [x0, #112]
    2860:	b	2880 <check_dst_limits.isra.0+0x60>
    2864:	ldr	x8, [x10, #160]
    2868:	asr	w7, w7, #1
    286c:	smaddl	x8, w7, w1, x8
    2870:	ldr	w0, [x8, #4]
    2874:	cmp	w0, w13
    2878:	b.lt	2998 <check_dst_limits.isra.0+0x178>  // b.tstop
    287c:	mov	w9, w7
    2880:	add	w7, w9, w11
    2884:	cmp	w9, w11
    2888:	b.gt	2864 <check_dst_limits.isra.0+0x44>
    288c:	cmp	w16, w11
    2890:	b.le	29cc <check_dst_limits.isra.0+0x1ac>
    2894:	ldr	x1, [x10, #160]
    2898:	mov	w0, #0x14                  	// #20
    289c:	smaddl	x0, w11, w0, x1
    28a0:	ldr	w0, [x0, #4]
    28a4:	cmp	w13, w0
    28a8:	csinv	w11, w11, wzr, eq  // eq = none
    28ac:	mov	w9, w16
    28b0:	mov	w12, #0x0                   	// #0
    28b4:	mov	w1, #0x14                  	// #20
    28b8:	b	28d8 <check_dst_limits.isra.0+0xb8>
    28bc:	ldr	x8, [x10, #160]
    28c0:	asr	w7, w7, #1
    28c4:	smaddl	x8, w7, w1, x8
    28c8:	ldr	w0, [x8, #4]
    28cc:	cmp	w0, w14
    28d0:	b.lt	29a0 <check_dst_limits.isra.0+0x180>  // b.tstop
    28d4:	mov	w9, w7
    28d8:	add	w7, w9, w12
    28dc:	cmp	w9, w12
    28e0:	b.gt	28bc <check_dst_limits.isra.0+0x9c>
    28e4:	cmp	w16, w12
    28e8:	b.le	29c4 <check_dst_limits.isra.0+0x1a4>
    28ec:	ldr	x1, [x10, #160]
    28f0:	mov	w0, #0x14                  	// #20
    28f4:	smaddl	x0, w12, w0, x1
    28f8:	ldr	w0, [x0, #4]
    28fc:	cmp	w14, w0
    2900:	csinv	w12, w12, wzr, eq  // eq = none
    2904:	ldr	w0, [x19]
    2908:	cmp	w0, #0x0
    290c:	b.le	29bc <check_dst_limits.isra.0+0x19c>
    2910:	mov	x22, #0x0                   	// #0
    2914:	str	x23, [sp, #48]
    2918:	mov	w23, #0x14                  	// #20
    291c:	ldr	x0, [x15]
    2920:	mov	w5, w11
    2924:	ldr	x7, [x10, #160]
    2928:	mov	w4, w13
    292c:	ldr	w1, [x0, x22, lsl #2]
    2930:	mov	w3, w20
    2934:	ldr	x6, [x21]
    2938:	mov	x0, x10
    293c:	smull	x2, w1, w23
    2940:	ldrsw	x2, [x7, x2]
    2944:	lsl	x2, x2, #4
    2948:	ldr	w9, [x6, x2]
    294c:	mov	w2, w9
    2950:	bl	1680 <check_dst_limits_calc_pos>
    2954:	mov	w2, w9
    2958:	ldr	x1, [x15]
    295c:	mov	w9, w0
    2960:	mov	w5, w12
    2964:	mov	w4, w14
    2968:	mov	w3, w18
    296c:	mov	x0, x10
    2970:	ldr	w1, [x1, x22, lsl #2]
    2974:	bl	1680 <check_dst_limits_calc_pos>
    2978:	cmp	w9, w0
    297c:	b.eq	29a8 <check_dst_limits.isra.0+0x188>  // b.none
    2980:	ldr	x23, [sp, #48]
    2984:	mov	w0, #0x1                   	// #1
    2988:	ldp	x19, x20, [sp, #16]
    298c:	ldp	x21, x22, [sp, #32]
    2990:	ldp	x29, x30, [sp], #64
    2994:	ret
    2998:	add	w11, w7, #0x1
    299c:	b	2880 <check_dst_limits.isra.0+0x60>
    29a0:	add	w12, w7, #0x1
    29a4:	b	28d8 <check_dst_limits.isra.0+0xb8>
    29a8:	ldr	w0, [x19]
    29ac:	add	x22, x22, #0x1
    29b0:	cmp	w0, w22
    29b4:	b.gt	291c <check_dst_limits.isra.0+0xfc>
    29b8:	ldr	x23, [sp, #48]
    29bc:	mov	w0, #0x0                   	// #0
    29c0:	b	2988 <check_dst_limits.isra.0+0x168>
    29c4:	mov	w12, #0xffffffff            	// #-1
    29c8:	b	2904 <check_dst_limits.isra.0+0xe4>
    29cc:	mov	w11, #0xffffffff            	// #-1
    29d0:	b	28ac <check_dst_limits.isra.0+0x8c>
    29d4:	nop

00000000000029d8 <re_string_context_at>:
    29d8:	mov	x3, x0
    29dc:	tbnz	w1, #31, 2a60 <re_string_context_at+0x88>
    29e0:	ldr	w0, [x0, #64]
    29e4:	cmp	w0, w1
    29e8:	b.eq	2a7c <re_string_context_at+0xa4>  // b.none
    29ec:	ldr	w0, [x3, #104]
    29f0:	cmp	w0, #0x1
    29f4:	b.le	2a30 <re_string_context_at+0x58>
    29f8:	sxtw	x1, w1
    29fc:	ldr	x0, [x3, #16]
    2a00:	b	2a08 <re_string_context_at+0x30>
    2a04:	tbnz	w1, #31, 2a60 <re_string_context_at+0x88>
    2a08:	ldr	w2, [x0, x1, lsl #2]
    2a0c:	sub	x1, x1, #0x1
    2a10:	cmn	w2, #0x1
    2a14:	b.eq	2a04 <re_string_context_at+0x2c>  // b.none
    2a18:	ldrb	w0, [x3, #102]
    2a1c:	cbnz	w0, 2a90 <re_string_context_at+0xb8>
    2a20:	cmp	w2, #0xa
    2a24:	mov	w0, #0x0                   	// #0
    2a28:	b.eq	2a68 <re_string_context_at+0x90>  // b.none
    2a2c:	ret
    2a30:	ldr	x2, [x3, #8]
    2a34:	mov	w0, #0x1                   	// #1
    2a38:	ldr	x4, [x3, #88]
    2a3c:	ldrb	w2, [x2, w1, sxtw]
    2a40:	ubfx	x1, x2, #6, #2
    2a44:	ldr	x1, [x4, x1, lsl #3]
    2a48:	lsr	x1, x1, x2
    2a4c:	tbnz	w1, #0, 2a2c <re_string_context_at+0x54>
    2a50:	cmp	w2, #0xa
    2a54:	b.eq	2a68 <re_string_context_at+0x90>  // b.none
    2a58:	mov	w0, #0x0                   	// #0
    2a5c:	ret
    2a60:	ldr	w0, [x3, #76]
    2a64:	ret
    2a68:	ldrb	w0, [x3, #101]
    2a6c:	cmp	w0, #0x0
    2a70:	cset	w0, ne  // ne = any
    2a74:	lsl	w0, w0, #1
    2a78:	ret
    2a7c:	tst	x2, #0x2
    2a80:	mov	w1, #0xa                   	// #10
    2a84:	mov	w0, #0x8                   	// #8
    2a88:	csel	w0, w0, w1, ne  // ne = any
    2a8c:	ret
    2a90:	and	w1, w2, #0xffffffdf
    2a94:	mov	w0, #0x1                   	// #1
    2a98:	sub	w1, w1, #0x41
    2a9c:	cmp	w1, #0x19
    2aa0:	b.ls	2a2c <re_string_context_at+0x54>  // b.plast
    2aa4:	cmp	w2, #0x5f
    2aa8:	sub	w1, w2, #0x30
    2aac:	ccmp	w1, #0x9, #0x0, ne  // ne = any
    2ab0:	b.hi	2a20 <re_string_context_at+0x48>  // b.pmore
    2ab4:	ret

0000000000002ab8 <check_node_accept>:
    2ab8:	mov	x4, x1
    2abc:	mov	x5, x0
    2ac0:	ldr	x0, [x0, #8]
    2ac4:	mov	w1, w2
    2ac8:	ldrb	w3, [x4, #8]
    2acc:	ldrb	w2, [x0, w2, sxtw]
    2ad0:	cmp	w3, #0x5
    2ad4:	b.eq	2b70 <check_node_accept+0xb8>  // b.none
    2ad8:	b.hi	2b60 <check_node_accept+0xa8>  // b.pmore
    2adc:	cmp	w3, #0x1
    2ae0:	b.eq	2ba8 <check_node_accept+0xf0>  // b.none
    2ae4:	cmp	w3, #0x3
    2ae8:	b.ne	2bd0 <check_node_accept+0x118>  // b.any
    2aec:	ldr	x0, [x4]
    2af0:	ubfx	x3, x2, #6, #2
    2af4:	ldr	x0, [x0, x3, lsl #3]
    2af8:	lsr	x2, x0, x2
    2afc:	and	w0, w2, #0x1
    2b00:	tbz	w2, #0, 2ba4 <check_node_accept+0xec>
    2b04:	ldr	w6, [x4, #8]
    2b08:	mov	w0, #0x1                   	// #1
    2b0c:	tst	w6, #0x3ff00
    2b10:	b.eq	2b8c <check_node_accept+0xd4>  // b.none
    2b14:	stp	x29, x30, [sp, #-16]!
    2b18:	mov	x0, x5
    2b1c:	mov	x29, sp
    2b20:	ldr	w2, [x5, #120]
    2b24:	bl	29d8 <re_string_context_at>
    2b28:	mov	w1, w0
    2b2c:	ubfx	x2, x6, #8, #10
    2b30:	tbz	w6, #10, 2b94 <check_node_accept+0xdc>
    2b34:	mov	w0, #0x0                   	// #0
    2b38:	tbz	w1, #0, 2b58 <check_node_accept+0xa0>
    2b3c:	tbnz	w2, #3, 2b58 <check_node_accept+0xa0>
    2b40:	tbz	w2, #5, 2b4c <check_node_accept+0x94>
    2b44:	mov	w0, #0x0                   	// #0
    2b48:	tbz	w1, #1, 2b58 <check_node_accept+0xa0>
    2b4c:	ubfx	x0, x1, #3, #1
    2b50:	tst	x2, #0x80
    2b54:	csinc	w0, w0, wzr, ne  // ne = any
    2b58:	ldp	x29, x30, [sp], #16
    2b5c:	ret
    2b60:	cmp	w3, #0x7
    2b64:	mov	w0, #0x0                   	// #0
    2b68:	b.ne	2b90 <check_node_accept+0xd8>  // b.any
    2b6c:	tbnz	w2, #7, 2b8c <check_node_accept+0xd4>
    2b70:	cmp	w2, #0xa
    2b74:	b.eq	2bbc <check_node_accept+0x104>  // b.none
    2b78:	cbnz	w2, 2b04 <check_node_accept+0x4c>
    2b7c:	ldr	x2, [x5, #112]
    2b80:	mov	w0, #0x0                   	// #0
    2b84:	ldr	x2, [x2, #200]
    2b88:	tbz	w2, #7, 2b04 <check_node_accept+0x4c>
    2b8c:	ret
    2b90:	ret
    2b94:	tbz	w2, #3, 2b40 <check_node_accept+0x88>
    2b98:	tbz	w1, #0, 2b40 <check_node_accept+0x88>
    2b9c:	mov	w0, #0x0                   	// #0
    2ba0:	b	2b58 <check_node_accept+0xa0>
    2ba4:	ret
    2ba8:	ldrb	w3, [x4]
    2bac:	mov	w0, #0x0                   	// #0
    2bb0:	cmp	w3, w2
    2bb4:	b.eq	2b04 <check_node_accept+0x4c>  // b.none
    2bb8:	ret
    2bbc:	ldr	x2, [x5, #112]
    2bc0:	mov	w0, #0x0                   	// #0
    2bc4:	ldr	x2, [x2, #200]
    2bc8:	tbnz	w2, #6, 2b04 <check_node_accept+0x4c>
    2bcc:	ret
    2bd0:	mov	w0, #0x0                   	// #0
    2bd4:	ret

0000000000002bd8 <check_halt_state_context.isra.0>:
    2bd8:	stp	x29, x30, [sp, #-16]!
    2bdc:	mov	x7, x2
    2be0:	mov	w5, w1
    2be4:	mov	x29, sp
    2be8:	ldr	w2, [x0, #120]
    2bec:	mov	x6, x0
    2bf0:	mov	w1, w3
    2bf4:	bl	29d8 <re_string_context_at>
    2bf8:	cmp	w5, #0x0
    2bfc:	b.le	2c7c <check_halt_state_context.isra.0+0xa4>
    2c00:	ldr	x1, [x6, #112]
    2c04:	and	w9, w0, #0x8
    2c08:	and	w8, w0, #0x2
    2c0c:	mov	x3, #0x0                   	// #0
    2c10:	ldr	x6, [x7]
    2c14:	and	w7, w0, #0x1
    2c18:	ldr	x1, [x1]
    2c1c:	nop
    2c20:	ldr	w0, [x6, x3, lsl #2]
    2c24:	add	x4, x1, w0, sxtw #4
    2c28:	ldr	w2, [x4, #8]
    2c2c:	ldrb	w4, [x4, #8]
    2c30:	ubfx	x2, x2, #8, #10
    2c34:	cmp	w4, #0x2
    2c38:	b.ne	2c70 <check_halt_state_context.isra.0+0x98>  // b.any
    2c3c:	cbz	w2, 2c5c <check_halt_state_context.isra.0+0x84>
    2c40:	tbz	w2, #2, 2c64 <check_halt_state_context.isra.0+0x8c>
    2c44:	cbz	w7, 2c70 <check_halt_state_context.isra.0+0x98>
    2c48:	tbnz	w2, #3, 2c70 <check_halt_state_context.isra.0+0x98>
    2c4c:	tbz	w2, #5, 2c54 <check_halt_state_context.isra.0+0x7c>
    2c50:	cbz	w8, 2c70 <check_halt_state_context.isra.0+0x98>
    2c54:	tbz	w2, #7, 2c5c <check_halt_state_context.isra.0+0x84>
    2c58:	cbz	w9, 2c70 <check_halt_state_context.isra.0+0x98>
    2c5c:	ldp	x29, x30, [sp], #16
    2c60:	ret
    2c64:	tbz	w2, #3, 2c4c <check_halt_state_context.isra.0+0x74>
    2c68:	cbz	w7, 2c4c <check_halt_state_context.isra.0+0x74>
    2c6c:	nop
    2c70:	add	x3, x3, #0x1
    2c74:	cmp	w5, w3
    2c78:	b.gt	2c20 <check_halt_state_context.isra.0+0x48>
    2c7c:	mov	w0, #0x0                   	// #0
    2c80:	ldp	x29, x30, [sp], #16
    2c84:	ret

0000000000002c88 <create_token_tree.isra.0>:
    2c88:	stp	x29, x30, [sp, #-64]!
    2c8c:	mov	x29, sp
    2c90:	ldr	w5, [x1]
    2c94:	stp	x19, x20, [sp, #16]
    2c98:	mov	x20, x2
    2c9c:	mov	x19, x3
    2ca0:	stp	x21, x22, [sp, #32]
    2ca4:	cmp	w5, #0xf
    2ca8:	mov	x21, x1
    2cac:	mov	x22, x0
    2cb0:	b.eq	2d28 <create_token_tree.isra.0+0xa0>  // b.none
    2cb4:	mov	x6, #0x8                   	// #8
    2cb8:	mov	w0, #0x40                  	// #64
    2cbc:	add	w1, w5, #0x1
    2cc0:	smaddl	x0, w5, w0, x6
    2cc4:	ldr	x6, [x22]
    2cc8:	sbfiz	x5, x5, #6, #32
    2ccc:	str	w1, [x21]
    2cd0:	add	x1, x6, x5
    2cd4:	add	x5, x5, #0x20
    2cd8:	add	x0, x6, x0
    2cdc:	add	x5, x6, x5
    2ce0:	mov	w3, #0xffffffff            	// #-1
    2ce4:	stp	xzr, x20, [x1, #8]
    2ce8:	str	x19, [x1, #24]
    2cec:	ldp	x6, x7, [x4]
    2cf0:	stp	x6, x7, [x1, #48]
    2cf4:	ldrb	w2, [x5, #26]
    2cf8:	and	w2, w2, #0xfffffff3
    2cfc:	strb	w2, [x5, #26]
    2d00:	stp	xzr, xzr, [x1, #32]
    2d04:	str	w3, [x1, #64]
    2d08:	cbz	x20, 2d10 <create_token_tree.isra.0+0x88>
    2d0c:	str	x0, [x20]
    2d10:	cbz	x19, 2d18 <create_token_tree.isra.0+0x90>
    2d14:	str	x0, [x19]
    2d18:	ldp	x19, x20, [sp, #16]
    2d1c:	ldp	x21, x22, [sp, #32]
    2d20:	ldp	x29, x30, [sp], #64
    2d24:	ret
    2d28:	mov	x0, #0x3c8                 	// #968
    2d2c:	str	x4, [sp, #56]
    2d30:	bl	0 <grub_malloc>
    2d34:	mov	x6, x0
    2d38:	cbz	x0, 2d5c <create_token_tree.isra.0+0xd4>
    2d3c:	ldr	x0, [x22]
    2d40:	str	x0, [x6]
    2d44:	mov	w1, #0x1                   	// #1
    2d48:	mov	w5, #0x0                   	// #0
    2d4c:	mov	x0, #0x8                   	// #8
    2d50:	str	x6, [x22]
    2d54:	ldr	x4, [sp, #56]
    2d58:	b	2cc8 <create_token_tree.isra.0+0x40>
    2d5c:	mov	x0, #0x0                   	// #0
    2d60:	b	2d18 <create_token_tree.isra.0+0x90>
    2d64:	nop

0000000000002d68 <duplicate_tree>:
    2d68:	stp	x29, x30, [sp, #-80]!
    2d6c:	mov	x29, sp
    2d70:	stp	x19, x20, [sp, #16]
    2d74:	mov	x19, x0
    2d78:	stp	x21, x22, [sp, #32]
    2d7c:	add	x21, x1, #0x70
    2d80:	add	x22, x1, #0x80
    2d84:	ldr	x20, [x0]
    2d88:	str	x23, [sp, #48]
    2d8c:	add	x23, sp, #0x48
    2d90:	b	2d9c <duplicate_tree+0x34>
    2d94:	mov	x19, x0
    2d98:	add	x23, x20, #0x8
    2d9c:	add	x4, x19, #0x28
    2da0:	mov	x1, x22
    2da4:	mov	x0, x21
    2da8:	mov	x3, #0x0                   	// #0
    2dac:	mov	x2, #0x0                   	// #0
    2db0:	bl	2c88 <create_token_tree.isra.0>
    2db4:	str	x0, [x23]
    2db8:	cbz	x0, 2e00 <duplicate_tree+0x98>
    2dbc:	str	x20, [x0]
    2dc0:	ldr	x20, [x23]
    2dc4:	ldrb	w0, [x20, #50]
    2dc8:	orr	w0, w0, #0x4
    2dcc:	strb	w0, [x20, #50]
    2dd0:	ldr	x0, [x19, #8]
    2dd4:	cbnz	x0, 2d94 <duplicate_tree+0x2c>
    2dd8:	ldr	x2, [x19, #16]
    2ddc:	cmp	x2, #0x0
    2de0:	ccmp	x2, x0, #0x4, ne  // ne = any
    2de4:	b.ne	2e14 <duplicate_tree+0xac>  // b.any
    2de8:	ldr	x2, [x19]
    2dec:	mov	x0, x19
    2df0:	ldr	x20, [x20]
    2df4:	mov	x19, x2
    2df8:	cbnz	x2, 2dd8 <duplicate_tree+0x70>
    2dfc:	ldr	x0, [sp, #72]
    2e00:	ldp	x19, x20, [sp, #16]
    2e04:	ldp	x21, x22, [sp, #32]
    2e08:	ldr	x23, [sp, #48]
    2e0c:	ldp	x29, x30, [sp], #80
    2e10:	ret
    2e14:	mov	x19, x2
    2e18:	add	x23, x20, #0x10
    2e1c:	b	2d9c <duplicate_tree+0x34>

0000000000002e20 <lower_subexp>:
    2e20:	stp	x29, x30, [sp, #-112]!
    2e24:	mov	x29, sp
    2e28:	stp	x23, x24, [sp, #48]
    2e2c:	mov	x24, x0
    2e30:	ldrb	w0, [x1, #56]
    2e34:	stp	x19, x20, [sp, #16]
    2e38:	stp	x21, x22, [sp, #32]
    2e3c:	mov	x21, x2
    2e40:	stp	x25, x26, [sp, #64]
    2e44:	ldr	x20, [x1]
    2e48:	ldr	x19, [x2, #8]
    2e4c:	str	x27, [sp, #80]
    2e50:	tbz	w0, #4, 2fcc <lower_subexp+0x1ac>
    2e54:	cbz	x19, 2f70 <lower_subexp+0x150>
    2e58:	ldr	w0, [x2, #40]
    2e5c:	cmp	w0, #0x3f
    2e60:	b.gt	2f50 <lower_subexp+0x130>
    2e64:	ldr	x1, [x20, #144]
    2e68:	lsr	x0, x1, x0
    2e6c:	tbz	w0, #0, 2f50 <lower_subexp+0x130>
    2e70:	mov	w5, #0x8                   	// #8
    2e74:	add	x26, x20, #0x70
    2e78:	add	x27, sp, #0x60
    2e7c:	add	x20, x20, #0x80
    2e80:	mov	x1, x20
    2e84:	mov	x4, x27
    2e88:	mov	x3, #0x0                   	// #0
    2e8c:	mov	x2, #0x0                   	// #0
    2e90:	mov	x0, x26
    2e94:	strb	w5, [sp, #104]
    2e98:	bl	2c88 <create_token_tree.isra.0>
    2e9c:	mov	x22, x0
    2ea0:	mov	w5, #0x9                   	// #9
    2ea4:	mov	x4, x27
    2ea8:	mov	x1, x20
    2eac:	mov	x0, x26
    2eb0:	mov	x3, #0x0                   	// #0
    2eb4:	mov	x2, #0x0                   	// #0
    2eb8:	strb	w5, [sp, #104]
    2ebc:	bl	2c88 <create_token_tree.isra.0>
    2ec0:	mov	x23, x0
    2ec4:	mov	w5, #0x10                  	// #16
    2ec8:	mov	x2, x19
    2ecc:	mov	x4, x27
    2ed0:	mov	x3, x23
    2ed4:	mov	x1, x20
    2ed8:	mov	x0, x26
    2edc:	strb	w5, [sp, #104]
    2ee0:	bl	2c88 <create_token_tree.isra.0>
    2ee4:	mov	x25, x0
    2ee8:	mov	w5, #0x10                  	// #16
    2eec:	mov	x4, x27
    2ef0:	mov	x1, x20
    2ef4:	mov	x0, x26
    2ef8:	mov	x3, x25
    2efc:	mov	x2, x22
    2f00:	strb	w5, [sp, #104]
    2f04:	bl	2c88 <create_token_tree.isra.0>
    2f08:	cmp	x0, #0x0
    2f0c:	mov	x19, x0
    2f10:	ccmp	x25, #0x0, #0x4, ne  // ne = any
    2f14:	b.eq	302c <lower_subexp+0x20c>  // b.none
    2f18:	cmp	x22, #0x0
    2f1c:	ccmp	x23, #0x0, #0x4, ne  // ne = any
    2f20:	b.eq	302c <lower_subexp+0x20c>  // b.none
    2f24:	ldr	w0, [x21, #40]
    2f28:	str	w0, [x23, #40]
    2f2c:	str	w0, [x22, #40]
    2f30:	ldrb	w0, [x21, #50]
    2f34:	ldrb	w1, [x23, #50]
    2f38:	ubfx	x0, x0, #3, #1
    2f3c:	bfi	w1, w0, #3, #1
    2f40:	strb	w1, [x23, #50]
    2f44:	ldrb	w1, [x22, #50]
    2f48:	bfi	w1, w0, #3, #1
    2f4c:	strb	w1, [x22, #50]
    2f50:	mov	x0, x19
    2f54:	ldp	x19, x20, [sp, #16]
    2f58:	ldp	x21, x22, [sp, #32]
    2f5c:	ldp	x23, x24, [sp, #48]
    2f60:	ldp	x25, x26, [sp, #64]
    2f64:	ldr	x27, [sp, #80]
    2f68:	ldp	x29, x30, [sp], #112
    2f6c:	ret
    2f70:	mov	w5, #0x8                   	// #8
    2f74:	add	x26, x20, #0x70
    2f78:	add	x27, sp, #0x60
    2f7c:	add	x20, x20, #0x80
    2f80:	mov	x1, x20
    2f84:	mov	x4, x27
    2f88:	mov	x3, #0x0                   	// #0
    2f8c:	mov	x2, #0x0                   	// #0
    2f90:	mov	x0, x26
    2f94:	strb	w5, [sp, #104]
    2f98:	bl	2c88 <create_token_tree.isra.0>
    2f9c:	mov	x22, x0
    2fa0:	mov	w5, #0x9                   	// #9
    2fa4:	mov	x4, x27
    2fa8:	mov	x1, x20
    2fac:	mov	x0, x26
    2fb0:	mov	x3, #0x0                   	// #0
    2fb4:	mov	x2, #0x0                   	// #0
    2fb8:	strb	w5, [sp, #104]
    2fbc:	bl	2c88 <create_token_tree.isra.0>
    2fc0:	mov	x25, x0
    2fc4:	mov	x23, x0
    2fc8:	b	2ee8 <lower_subexp+0xc8>
    2fcc:	mov	w5, #0x8                   	// #8
    2fd0:	add	x26, x20, #0x70
    2fd4:	add	x27, sp, #0x60
    2fd8:	add	x20, x20, #0x80
    2fdc:	mov	x1, x20
    2fe0:	mov	x4, x27
    2fe4:	mov	x3, #0x0                   	// #0
    2fe8:	mov	x2, #0x0                   	// #0
    2fec:	mov	x0, x26
    2ff0:	strb	w5, [sp, #104]
    2ff4:	bl	2c88 <create_token_tree.isra.0>
    2ff8:	mov	x22, x0
    2ffc:	mov	w5, #0x9                   	// #9
    3000:	mov	x4, x27
    3004:	mov	x1, x20
    3008:	mov	x0, x26
    300c:	mov	x3, #0x0                   	// #0
    3010:	mov	x2, #0x0                   	// #0
    3014:	strb	w5, [sp, #104]
    3018:	bl	2c88 <create_token_tree.isra.0>
    301c:	mov	x23, x0
    3020:	mov	x25, x0
    3024:	cbnz	x19, 2ec4 <lower_subexp+0xa4>
    3028:	b	2ee8 <lower_subexp+0xc8>
    302c:	mov	w0, #0xc                   	// #12
    3030:	str	w0, [x24]
    3034:	mov	x19, #0x0                   	// #0
    3038:	mov	x0, x19
    303c:	ldp	x19, x20, [sp, #16]
    3040:	ldp	x21, x22, [sp, #32]
    3044:	ldp	x23, x24, [sp, #48]
    3048:	ldp	x25, x26, [sp, #64]
    304c:	ldr	x27, [sp, #80]
    3050:	ldp	x29, x30, [sp], #112
    3054:	ret

0000000000003058 <lower_subexps>:
    3058:	stp	x29, x30, [sp, #-48]!
    305c:	mov	x29, sp
    3060:	ldr	x2, [x1, #8]
    3064:	stp	x19, x20, [sp, #16]
    3068:	mov	x19, x1
    306c:	str	wzr, [sp, #44]
    3070:	mov	x20, x0
    3074:	cbz	x2, 3084 <lower_subexps+0x2c>
    3078:	ldrb	w0, [x2, #48]
    307c:	cmp	w0, #0x11
    3080:	b.eq	30a8 <lower_subexps+0x50>  // b.none
    3084:	ldr	x2, [x19, #16]
    3088:	cbz	x2, 3098 <lower_subexps+0x40>
    308c:	ldrb	w0, [x2, #48]
    3090:	cmp	w0, #0x11
    3094:	b.eq	30c4 <lower_subexps+0x6c>  // b.none
    3098:	ldr	w0, [sp, #44]
    309c:	ldp	x19, x20, [sp, #16]
    30a0:	ldp	x29, x30, [sp], #48
    30a4:	ret
    30a8:	mov	x1, x20
    30ac:	add	x0, sp, #0x2c
    30b0:	bl	2e20 <lower_subexp>
    30b4:	str	x0, [x19, #8]
    30b8:	cbz	x0, 3084 <lower_subexps+0x2c>
    30bc:	str	x19, [x0]
    30c0:	b	3084 <lower_subexps+0x2c>
    30c4:	mov	x1, x20
    30c8:	add	x0, sp, #0x2c
    30cc:	bl	2e20 <lower_subexp>
    30d0:	str	x0, [x19, #16]
    30d4:	cbz	x0, 3098 <lower_subexps+0x40>
    30d8:	str	x19, [x0]
    30dc:	b	3098 <lower_subexps+0x40>

00000000000030e0 <check_subexp_matching_top.isra.0>:
    30e0:	stp	x29, x30, [sp, #-96]!
    30e4:	mov	x29, sp
    30e8:	stp	x21, x22, [sp, #32]
    30ec:	mov	x22, x2
    30f0:	ldr	w2, [x1]
    30f4:	ldr	x21, [x0, #112]
    30f8:	cmp	w2, #0x0
    30fc:	b.le	31c4 <check_subexp_matching_top.isra.0+0xe4>
    3100:	stp	x19, x20, [sp, #16]
    3104:	mov	x19, #0x0                   	// #0
    3108:	stp	x23, x24, [sp, #48]
    310c:	mov	x24, x0
    3110:	mov	w23, w3
    3114:	stp	x25, x26, [sp, #64]
    3118:	mov	x25, x1
    311c:	b	3128 <check_subexp_matching_top.isra.0+0x48>
    3120:	cmp	w2, w19
    3124:	b.le	31b8 <check_subexp_matching_top.isra.0+0xd8>
    3128:	ldr	x4, [x22]
    312c:	ldr	x5, [x21]
    3130:	ldr	w20, [x4, x19, lsl #2]
    3134:	add	x19, x19, #0x1
    3138:	sbfiz	x4, x20, #4, #32
    313c:	add	x6, x5, x4
    3140:	ldrb	w6, [x6, #8]
    3144:	cmp	w6, #0x8
    3148:	b.ne	3120 <check_subexp_matching_top.isra.0+0x40>  // b.any
    314c:	ldr	w3, [x5, x4]
    3150:	cmp	w3, #0x3f
    3154:	b.gt	3120 <check_subexp_matching_top.isra.0+0x40>
    3158:	ldr	x4, [x21, #144]
    315c:	lsr	x3, x4, x3
    3160:	tbz	w3, #0, 3120 <check_subexp_matching_top.isra.0+0x40>
    3164:	ldp	w1, w0, [x24, #172]
    3168:	str	x27, [sp, #80]
    316c:	ldr	x27, [x24, #184]
    3170:	cmp	w1, w0
    3174:	b.eq	31ec <check_subexp_matching_top.isra.0+0x10c>  // b.none
    3178:	sxtw	x26, w1
    317c:	mov	x0, #0x20                  	// #32
    3180:	bl	0 <grub_zalloc>
    3184:	ldr	w1, [x24, #172]
    3188:	ldr	x2, [x24, #184]
    318c:	str	x0, [x27, x26, lsl #3]
    3190:	add	w3, w1, #0x1
    3194:	ldr	x0, [x2, w1, sxtw #3]
    3198:	cbz	x0, 31d4 <check_subexp_matching_top.isra.0+0xf4>
    319c:	ldr	x27, [sp, #80]
    31a0:	str	w20, [x0, #4]
    31a4:	str	w3, [x24, #172]
    31a8:	str	w23, [x0]
    31ac:	ldr	w2, [x25]
    31b0:	cmp	w2, w19
    31b4:	b.gt	3128 <check_subexp_matching_top.isra.0+0x48>
    31b8:	ldp	x19, x20, [sp, #16]
    31bc:	ldp	x23, x24, [sp, #48]
    31c0:	ldp	x25, x26, [sp, #64]
    31c4:	mov	w0, #0x0                   	// #0
    31c8:	ldp	x21, x22, [sp, #32]
    31cc:	ldp	x29, x30, [sp], #96
    31d0:	ret
    31d4:	mov	w0, #0xc                   	// #12
    31d8:	ldp	x19, x20, [sp, #16]
    31dc:	ldp	x23, x24, [sp, #48]
    31e0:	ldp	x25, x26, [sp, #64]
    31e4:	ldr	x27, [sp, #80]
    31e8:	b	31c8 <check_subexp_matching_top.isra.0+0xe8>
    31ec:	lsl	w26, w1, #1
    31f0:	mov	x0, x27
    31f4:	sbfiz	x1, x26, #3, #32
    31f8:	bl	0 <grub_realloc>
    31fc:	mov	x27, x0
    3200:	cbz	x0, 31d4 <check_subexp_matching_top.isra.0+0xf4>
    3204:	ldr	w1, [x24, #172]
    3208:	str	w26, [x24, #176]
    320c:	str	x0, [x24, #184]
    3210:	b	3178 <check_subexp_matching_top.isra.0+0x98>
    3214:	nop

0000000000003218 <re_node_set_merge>:
    3218:	stp	x29, x30, [sp, #-48]!
    321c:	mov	x29, sp
    3220:	stp	x19, x20, [sp, #16]
    3224:	cbz	x1, 3330 <re_node_set_merge+0x118>
    3228:	stp	x21, x22, [sp, #32]
    322c:	mov	x21, x1
    3230:	ldr	w1, [x1, #4]
    3234:	cbz	w1, 332c <re_node_set_merge+0x114>
    3238:	mov	x20, x0
    323c:	ldp	w0, w19, [x0]
    3240:	add	w2, w19, w1, lsl #1
    3244:	cmp	w0, w2
    3248:	b.lt	3380 <re_node_set_merge+0x168>  // b.tstop
    324c:	cbz	w19, 33ac <re_node_set_merge+0x194>
    3250:	sub	w3, w19, #0x1
    3254:	subs	w2, w1, #0x1
    3258:	add	w19, w19, w1, lsl #1
    325c:	ccmp	w3, #0x0, #0x1, pl  // pl = nfrst
    3260:	b.lt	32b0 <re_node_set_merge+0x98>  // b.tstop
    3264:	ldr	x0, [x20, #8]
    3268:	ldr	x1, [x21, #8]
    326c:	b	328c <re_node_set_merge+0x74>
    3270:	b.ge	3344 <re_node_set_merge+0x12c>  // b.tcont
    3274:	sub	w19, w19, #0x1
    3278:	sub	w2, w2, #0x1
    327c:	str	w4, [x0, w19, sxtw #2]
    3280:	cmp	w2, #0x0
    3284:	ccmp	w3, #0x0, #0x1, ge  // ge = tcont
    3288:	b.lt	32b0 <re_node_set_merge+0x98>  // b.tstop
    328c:	ldr	w5, [x0, w3, sxtw #2]
    3290:	ldr	w4, [x1, w2, sxtw #2]
    3294:	cmp	w5, w4
    3298:	b.ne	3270 <re_node_set_merge+0x58>  // b.any
    329c:	sub	w2, w2, #0x1
    32a0:	sub	w3, w3, #0x1
    32a4:	cmp	w2, #0x0
    32a8:	ccmp	w3, #0x0, #0x1, ge  // ge = tcont
    32ac:	b.ge	328c <re_node_set_merge+0x74>  // b.tcont
    32b0:	tbnz	w2, #31, 32d0 <re_node_set_merge+0xb8>
    32b4:	ldr	x0, [x20, #8]
    32b8:	add	w2, w2, #0x1
    32bc:	ldr	x1, [x21, #8]
    32c0:	sub	w19, w19, w2
    32c4:	sbfiz	x2, x2, #2, #32
    32c8:	add	x0, x0, w19, sxtw #2
    32cc:	bl	0 <grub_memmove>
    32d0:	ldr	w1, [x20, #4]
    32d4:	ldr	w2, [x21, #4]
    32d8:	add	w2, w1, w2, lsl #1
    32dc:	sub	w6, w2, #0x1
    32e0:	subs	w2, w2, w19
    32e4:	b.eq	332c <re_node_set_merge+0x114>  // b.none
    32e8:	sub	w3, w1, #0x1
    32ec:	sxtw	x8, w6
    32f0:	ldr	x0, [x20, #8]
    32f4:	sxtw	x7, w3
    32f8:	add	w1, w1, w2
    32fc:	str	w1, [x20, #4]
    3300:	ldr	w5, [x0, x8, lsl #2]
    3304:	add	w1, w3, w2
    3308:	ldr	w4, [x0, x7, lsl #2]
    330c:	sxtw	x1, w1
    3310:	cmp	w5, w4
    3314:	b.le	334c <re_node_set_merge+0x134>
    3318:	sub	w6, w6, #0x1
    331c:	str	w5, [x0, x1, lsl #2]
    3320:	subs	w2, w2, #0x1
    3324:	sxtw	x8, w6
    3328:	b.ne	3300 <re_node_set_merge+0xe8>  // b.any
    332c:	ldp	x21, x22, [sp, #32]
    3330:	mov	w19, #0x0                   	// #0
    3334:	mov	w0, w19
    3338:	ldp	x19, x20, [sp, #16]
    333c:	ldp	x29, x30, [sp], #48
    3340:	ret
    3344:	sub	w3, w3, #0x1
    3348:	b	3280 <re_node_set_merge+0x68>
    334c:	subs	w3, w3, #0x1
    3350:	str	w4, [x0, x1, lsl #2]
    3354:	sxtw	x7, w3
    3358:	b.pl	3300 <re_node_set_merge+0xe8>  // b.nfrst
    335c:	add	x1, x0, w19, sxtw #2
    3360:	sbfiz	x2, x2, #2, #32
    3364:	mov	w19, #0x0                   	// #0
    3368:	bl	0 <grub_memmove>
    336c:	mov	w0, w19
    3370:	ldp	x19, x20, [sp, #16]
    3374:	ldp	x21, x22, [sp, #32]
    3378:	ldp	x29, x30, [sp], #48
    337c:	ret
    3380:	add	w1, w1, w0
    3384:	ldr	x0, [x20, #8]
    3388:	lsl	w22, w1, #1
    338c:	sbfiz	x1, x22, #2, #32
    3390:	bl	0 <grub_realloc>
    3394:	cbz	x0, 33cc <re_node_set_merge+0x1b4>
    3398:	ldr	w19, [x20, #4]
    339c:	ldr	w1, [x21, #4]
    33a0:	str	w22, [x20]
    33a4:	str	x0, [x20, #8]
    33a8:	cbnz	w19, 3250 <re_node_set_merge+0x38>
    33ac:	str	w1, [x20, #4]
    33b0:	ldr	x0, [x20, #8]
    33b4:	ldr	x1, [x21, #8]
    33b8:	ldrsw	x2, [x21, #4]
    33bc:	lsl	x2, x2, #2
    33c0:	bl	0 <grub_memmove>
    33c4:	ldp	x21, x22, [sp, #32]
    33c8:	b	3334 <re_node_set_merge+0x11c>
    33cc:	mov	w19, #0xc                   	// #12
    33d0:	ldp	x21, x22, [sp, #32]
    33d4:	b	3334 <re_node_set_merge+0x11c>

00000000000033d8 <check_arrival_expand_ecl>:
    33d8:	stp	x29, x30, [sp, #-80]!
    33dc:	mov	x29, sp
    33e0:	stp	x21, x22, [sp, #32]
    33e4:	ldr	w21, [x1, #4]
    33e8:	stp	x19, x20, [sp, #16]
    33ec:	mov	w20, w2
    33f0:	mov	w19, w3
    33f4:	stp	x23, x24, [sp, #48]
    33f8:	mov	x24, x1
    33fc:	mov	x23, x0
    3400:	sbfiz	x0, x21, #2, #32
    3404:	stp	w21, wzr, [sp, #64]
    3408:	bl	0 <grub_malloc>
    340c:	str	x0, [sp, #72]
    3410:	cmp	w21, #0x0
    3414:	ccmp	x0, #0x0, #0x0, ne  // ne = any
    3418:	b.eq	351c <check_arrival_expand_ecl+0x144>  // b.none
    341c:	ldr	w0, [x24, #4]
    3420:	cmp	w0, #0x0
    3424:	b.le	34c0 <check_arrival_expand_ecl+0xe8>
    3428:	mov	x22, #0x0                   	// #0
    342c:	nop
    3430:	ldr	x0, [x24, #8]
    3434:	ldr	x1, [x23, #48]
    3438:	ldr	w2, [x0, x22, lsl #2]
    343c:	add	x1, x1, w2, sxtw #4
    3440:	ldr	w10, [x1, #4]
    3444:	cmp	w10, #0x0
    3448:	b.le	34ec <check_arrival_expand_ecl+0x114>
    344c:	mov	x5, #0x0                   	// #0
    3450:	ldr	x9, [x23]
    3454:	ldr	x4, [x1, #8]
    3458:	b	3464 <check_arrival_expand_ecl+0x8c>
    345c:	cmp	w10, w5
    3460:	b.le	34ec <check_arrival_expand_ecl+0x114>
    3464:	ldr	w7, [x4, x5, lsl #2]
    3468:	add	x5, x5, #0x1
    346c:	sbfiz	x6, x7, #4, #32
    3470:	add	x8, x9, x6
    3474:	ldrb	w8, [x8, #8]
    3478:	cmp	w19, w8
    347c:	b.ne	345c <check_arrival_expand_ecl+0x84>  // b.any
    3480:	ldr	w6, [x9, x6]
    3484:	cmp	w20, w6
    3488:	b.ne	345c <check_arrival_expand_ecl+0x84>  // b.any
    348c:	cmn	w7, #0x1
    3490:	b.eq	34ec <check_arrival_expand_ecl+0x114>  // b.none
    3494:	mov	w4, w19
    3498:	mov	w3, w20
    349c:	add	x1, sp, #0x40
    34a0:	mov	x0, x23
    34a4:	bl	25a8 <check_arrival_expand_ecl_sub>
    34a8:	mov	w21, w0
    34ac:	cbnz	w0, 34fc <check_arrival_expand_ecl+0x124>
    34b0:	ldr	w0, [x24, #4]
    34b4:	add	x22, x22, #0x1
    34b8:	cmp	w0, w22
    34bc:	b.gt	3430 <check_arrival_expand_ecl+0x58>
    34c0:	ldr	x0, [x24, #8]
    34c4:	mov	w21, #0x0                   	// #0
    34c8:	bl	0 <grub_free>
    34cc:	ldp	x0, x1, [sp, #64]
    34d0:	stp	x0, x1, [x24]
    34d4:	mov	w0, w21
    34d8:	ldp	x19, x20, [sp, #16]
    34dc:	ldp	x21, x22, [sp, #32]
    34e0:	ldp	x23, x24, [sp, #48]
    34e4:	ldp	x29, x30, [sp], #80
    34e8:	ret
    34ec:	add	x0, sp, #0x40
    34f0:	bl	3218 <re_node_set_merge>
    34f4:	mov	w21, w0
    34f8:	cbz	w0, 34b0 <check_arrival_expand_ecl+0xd8>
    34fc:	ldr	x0, [sp, #72]
    3500:	bl	0 <grub_free>
    3504:	mov	w0, w21
    3508:	ldp	x19, x20, [sp, #16]
    350c:	ldp	x21, x22, [sp, #32]
    3510:	ldp	x23, x24, [sp, #48]
    3514:	ldp	x29, x30, [sp], #80
    3518:	ret
    351c:	mov	w21, #0xc                   	// #12
    3520:	b	3504 <check_arrival_expand_ecl+0x12c>
    3524:	nop

0000000000003528 <re_node_set_init_copy>:
    3528:	stp	x29, x30, [sp, #-32]!
    352c:	mov	x29, sp
    3530:	stp	x19, x20, [sp, #16]
    3534:	mov	x20, x1
    3538:	ldr	w1, [x1, #4]
    353c:	str	w1, [x0, #4]
    3540:	cmp	w1, #0x0
    3544:	b.le	3580 <re_node_set_init_copy+0x58>
    3548:	mov	x19, x0
    354c:	sbfiz	x0, x1, #2, #32
    3550:	str	w1, [x19]
    3554:	bl	0 <grub_malloc>
    3558:	str	x0, [x19, #8]
    355c:	cbz	x0, 359c <re_node_set_init_copy+0x74>
    3560:	ldr	x1, [x20, #8]
    3564:	ldrsw	x2, [x20, #4]
    3568:	lsl	x2, x2, #2
    356c:	bl	0 <grub_memmove>
    3570:	mov	w0, #0x0                   	// #0
    3574:	ldp	x19, x20, [sp, #16]
    3578:	ldp	x29, x30, [sp], #32
    357c:	ret
    3580:	mov	x2, #0x10                  	// #16
    3584:	mov	w1, #0x0                   	// #0
    3588:	bl	0 <grub_memset>
    358c:	mov	w0, #0x0                   	// #0
    3590:	ldp	x19, x20, [sp, #16]
    3594:	ldp	x29, x30, [sp], #32
    3598:	ret
    359c:	mov	w0, #0xc                   	// #12
    35a0:	str	xzr, [x19]
    35a4:	b	3574 <re_node_set_init_copy+0x4c>

00000000000035a8 <re_node_set_init_union>:
    35a8:	stp	x29, x30, [sp, #-64]!
    35ac:	mov	x29, sp
    35b0:	stp	x19, x20, [sp, #16]
    35b4:	mov	x19, x2
    35b8:	stp	x21, x22, [sp, #32]
    35bc:	mov	x21, x0
    35c0:	cbz	x1, 35e0 <re_node_set_init_union+0x38>
    35c4:	ldr	w0, [x1, #4]
    35c8:	cmp	x2, #0x0
    35cc:	mov	x20, x1
    35d0:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    35d4:	b.gt	3614 <re_node_set_init_union+0x6c>
    35d8:	cmp	w0, #0x0
    35dc:	b.gt	3620 <re_node_set_init_union+0x78>
    35e0:	cbz	x19, 35f0 <re_node_set_init_union+0x48>
    35e4:	ldr	w0, [x19, #4]
    35e8:	cmp	w0, #0x0
    35ec:	b.gt	3638 <re_node_set_init_union+0x90>
    35f0:	mov	x0, x21
    35f4:	mov	x2, #0x10                  	// #16
    35f8:	mov	w1, #0x0                   	// #0
    35fc:	bl	0 <grub_memset>
    3600:	mov	w0, #0x0                   	// #0
    3604:	ldp	x19, x20, [sp, #16]
    3608:	ldp	x21, x22, [sp, #32]
    360c:	ldp	x29, x30, [sp], #64
    3610:	ret
    3614:	ldr	w1, [x2, #4]
    3618:	cmp	w1, #0x0
    361c:	b.gt	3650 <re_node_set_init_union+0xa8>
    3620:	mov	x1, x20
    3624:	mov	x0, x21
    3628:	ldp	x19, x20, [sp, #16]
    362c:	ldp	x21, x22, [sp, #32]
    3630:	ldp	x29, x30, [sp], #64
    3634:	b	3528 <re_node_set_init_copy>
    3638:	mov	x1, x19
    363c:	mov	x0, x21
    3640:	ldp	x19, x20, [sp, #16]
    3644:	ldp	x21, x22, [sp, #32]
    3648:	ldp	x29, x30, [sp], #64
    364c:	b	3528 <re_node_set_init_copy>
    3650:	add	w0, w0, w1
    3654:	str	w0, [x21]
    3658:	sbfiz	x0, x0, #2, #32
    365c:	bl	0 <grub_malloc>
    3660:	str	x0, [x21, #8]
    3664:	mov	x6, x0
    3668:	cbz	x0, 375c <re_node_set_init_union+0x1b4>
    366c:	ldr	w2, [x20, #4]
    3670:	stp	x23, x24, [sp, #48]
    3674:	cmp	w2, #0x0
    3678:	b.le	36e4 <re_node_set_init_union+0x13c>
    367c:	mov	w24, #0x0                   	// #0
    3680:	mov	w23, #0x0                   	// #0
    3684:	mov	w22, #0x0                   	// #0
    3688:	ldr	x3, [x20, #8]
    368c:	b	36ac <re_node_set_init_union+0x104>
    3690:	cinc	w23, w23, eq  // eq = none
    3694:	add	w22, w22, #0x1
    3698:	str	w1, [x0]
    369c:	ldr	w2, [x20, #4]
    36a0:	add	x0, x0, #0x4
    36a4:	cmp	w22, w2
    36a8:	b.ge	36f0 <re_node_set_init_union+0x148>  // b.tcont
    36ac:	ldr	w4, [x19, #4]
    36b0:	sxtw	x5, w22
    36b4:	add	x1, x3, w22, sxtw #2
    36b8:	cmp	w23, w4
    36bc:	b.ge	3740 <re_node_set_init_union+0x198>  // b.tcont
    36c0:	ldr	x2, [x19, #8]
    36c4:	add	w24, w24, #0x1
    36c8:	ldr	w1, [x3, x5, lsl #2]
    36cc:	ldr	w2, [x2, w23, sxtw #2]
    36d0:	cmp	w1, w2
    36d4:	b.le	3690 <re_node_set_init_union+0xe8>
    36d8:	add	w23, w23, #0x1
    36dc:	str	w2, [x0]
    36e0:	b	369c <re_node_set_init_union+0xf4>
    36e4:	mov	w24, #0x0                   	// #0
    36e8:	mov	w23, #0x0                   	// #0
    36ec:	nop
    36f0:	ldr	w0, [x19, #4]
    36f4:	cmp	w23, w0
    36f8:	b.lt	3718 <re_node_set_init_union+0x170>  // b.tstop
    36fc:	str	w24, [x21, #4]
    3700:	mov	w0, #0x0                   	// #0
    3704:	ldp	x19, x20, [sp, #16]
    3708:	ldp	x21, x22, [sp, #32]
    370c:	ldp	x23, x24, [sp, #48]
    3710:	ldp	x29, x30, [sp], #64
    3714:	ret
    3718:	ldr	x1, [x19, #8]
    371c:	sub	w2, w0, w23
    3720:	add	x0, x6, w24, sxtw #2
    3724:	sbfiz	x2, x2, #2, #32
    3728:	add	x1, x1, w23, sxtw #2
    372c:	bl	0 <grub_memmove>
    3730:	ldr	w0, [x19, #4]
    3734:	sub	w23, w0, w23
    3738:	add	w24, w24, w23
    373c:	b	36fc <re_node_set_init_union+0x154>
    3740:	sub	w2, w2, w22
    3744:	sbfiz	x2, x2, #2, #32
    3748:	bl	0 <grub_memmove>
    374c:	ldr	w0, [x20, #4]
    3750:	sub	w22, w0, w22
    3754:	add	w24, w24, w22
    3758:	b	36fc <re_node_set_init_union+0x154>
    375c:	mov	w0, #0xc                   	// #12
    3760:	b	3604 <re_node_set_init_union+0x5c>
    3764:	nop

0000000000003768 <re_acquire_state_context>:
    3768:	stp	x29, x30, [sp, #-128]!
    376c:	mov	x29, sp
    3770:	stp	x25, x26, [sp, #64]
    3774:	mov	x25, x2
    3778:	ldr	w2, [x2, #4]
    377c:	stp	x27, x28, [sp, #80]
    3780:	str	x0, [sp, #120]
    3784:	cbz	w2, 3a34 <re_acquire_state_context+0x2cc>
    3788:	stp	x19, x20, [sp, #16]
    378c:	cmp	w2, #0x0
    3790:	mov	w20, w3
    3794:	stp	x21, x22, [sp, #32]
    3798:	add	w26, w2, w3
    379c:	mov	x22, x1
    37a0:	b.le	37c4 <re_acquire_state_context+0x5c>
    37a4:	ldr	x3, [x25, #8]
    37a8:	mov	x0, #0x0                   	// #0
    37ac:	nop
    37b0:	ldr	w1, [x3, x0, lsl #2]
    37b4:	add	x0, x0, #0x1
    37b8:	cmp	w2, w0
    37bc:	add	w26, w26, w1
    37c0:	b.gt	37b0 <re_acquire_state_context+0x48>
    37c4:	ldr	w0, [x22, #132]
    37c8:	ldr	x1, [x22, #64]
    37cc:	and	w0, w26, w0
    37d0:	lsl	x0, x0, #4
    37d4:	add	x2, x1, x0
    37d8:	ldr	w11, [x1, x0]
    37dc:	cmp	w11, #0x0
    37e0:	b.le	384c <re_acquire_state_context+0xe4>
    37e4:	mov	x7, #0x0                   	// #0
    37e8:	ldr	x12, [x2, #8]
    37ec:	b	37f8 <re_acquire_state_context+0x90>
    37f0:	cmp	w11, w7
    37f4:	b.le	384c <re_acquire_state_context+0xe4>
    37f8:	ldr	x27, [x12, x7, lsl #3]
    37fc:	add	x7, x7, #0x1
    3800:	ldr	w0, [x27]
    3804:	cmp	w0, w26
    3808:	b.ne	37f0 <re_acquire_state_context+0x88>  // b.any
    380c:	ldrb	w0, [x27, #80]
    3810:	and	w0, w0, #0xf
    3814:	cmp	w0, w20
    3818:	b.ne	37f0 <re_acquire_state_context+0x88>  // b.any
    381c:	ldr	x0, [x27, #56]
    3820:	mov	x1, x25
    3824:	bl	1240 <re_node_set_compare>
    3828:	tst	w0, #0xff
    382c:	b.eq	37f0 <re_acquire_state_context+0x88>  // b.none
    3830:	ldp	x19, x20, [sp, #16]
    3834:	ldp	x21, x22, [sp, #32]
    3838:	mov	x0, x27
    383c:	ldp	x25, x26, [sp, #64]
    3840:	ldp	x27, x28, [sp, #80]
    3844:	ldp	x29, x30, [sp], #128
    3848:	ret
    384c:	mov	x0, #0x58                  	// #88
    3850:	bl	0 <grub_zalloc>
    3854:	mov	x27, x0
    3858:	cbz	x0, 3990 <re_acquire_state_context+0x228>
    385c:	add	x21, x0, #0x8
    3860:	mov	x1, x25
    3864:	mov	x0, x21
    3868:	bl	3528 <re_node_set_init_copy>
    386c:	mov	w7, w0
    3870:	cbnz	w0, 3a60 <re_acquire_state_context+0x2f8>
    3874:	ldrb	w0, [x27, #80]
    3878:	bfxil	w0, w20, #0, #4
    387c:	strb	w0, [x27, #80]
    3880:	ldr	w4, [x25, #4]
    3884:	str	x21, [x27, #56]
    3888:	cmp	w4, #0x0
    388c:	b.le	3970 <re_acquire_state_context+0x208>
    3890:	and	w0, w20, #0x4
    3894:	stp	x23, x24, [sp, #48]
    3898:	add	x24, x27, #0x10
    389c:	add	x23, x27, #0xc
    38a0:	str	w0, [sp, #116]
    38a4:	and	w0, w20, #0x2
    38a8:	and	w20, w20, #0x1
    38ac:	mov	x28, #0x0                   	// #0
    38b0:	str	w0, [sp, #108]
    38b4:	nop
    38b8:	ldr	x1, [x25, #8]
    38bc:	mov	w2, w28
    38c0:	ldr	x0, [x22]
    38c4:	ldrsw	x3, [x1, x28, lsl #2]
    38c8:	add	x3, x0, x3, lsl #4
    38cc:	ldr	w19, [x3, #8]
    38d0:	ldrb	w5, [x3, #8]
    38d4:	ubfx	x19, x19, #8, #10
    38d8:	cmp	w19, #0x0
    38dc:	ccmp	w5, #0x1, #0x0, eq  // eq = none
    38e0:	b.eq	3960 <re_acquire_state_context+0x1f8>  // b.none
    38e4:	ldrb	w6, [x3, #10]
    38e8:	cmp	w5, #0x2
    38ec:	ldrb	w3, [x27, #80]
    38f0:	ubfx	x6, x6, #4, #1
    38f4:	mov	w4, w3
    38f8:	ubfx	x3, x3, #5, #1
    38fc:	orr	w3, w3, w6
    3900:	bfi	w4, w3, #5, #1
    3904:	strb	w4, [x27, #80]
    3908:	b.eq	3a28 <re_acquire_state_context+0x2c0>  // b.none
    390c:	cmp	w5, #0x4
    3910:	b.eq	39ac <re_acquire_state_context+0x244>  // b.none
    3914:	cbz	w19, 39b8 <re_acquire_state_context+0x250>
    3918:	ldr	x0, [x27, #56]
    391c:	cmp	x21, x0
    3920:	b.eq	39c0 <re_acquire_state_context+0x258>  // b.none
    3924:	tbz	w19, #0, 3a00 <re_acquire_state_context+0x298>
    3928:	cbz	w20, 3930 <re_acquire_state_context+0x1c8>
    392c:	tbz	w19, #1, 3a08 <re_acquire_state_context+0x2a0>
    3930:	subs	w2, w2, w7
    3934:	b.mi	3958 <re_acquire_state_context+0x1f0>  // b.first
    3938:	ldr	w0, [x27, #12]
    393c:	cmp	w2, w0
    3940:	b.ge	3958 <re_acquire_state_context+0x1f0>  // b.tcont
    3944:	sub	w0, w0, #0x1
    3948:	str	w0, [x27, #12]
    394c:	mov	x1, x24
    3950:	mov	x0, x23
    3954:	bl	26d8 <re_node_set_remove_at.isra.0.part.0>
    3958:	ldr	w4, [x25, #4]
    395c:	add	w7, w7, #0x1
    3960:	add	x28, x28, #0x1
    3964:	cmp	w4, w28
    3968:	b.gt	38b8 <re_acquire_state_context+0x150>
    396c:	ldp	x23, x24, [sp, #48]
    3970:	mov	w2, w26
    3974:	mov	x0, x22
    3978:	mov	x1, x27
    397c:	bl	1b08 <register_state>
    3980:	cbz	w0, 3830 <re_acquire_state_context+0xc8>
    3984:	mov	x0, x27
    3988:	bl	21b8 <free_state>
    398c:	nop
    3990:	ldr	x1, [sp, #120]
    3994:	mov	w0, #0xc                   	// #12
    3998:	mov	x27, #0x0                   	// #0
    399c:	ldp	x19, x20, [sp, #16]
    39a0:	ldp	x21, x22, [sp, #32]
    39a4:	str	w0, [x1]
    39a8:	b	3838 <re_acquire_state_context+0xd0>
    39ac:	orr	w4, w4, #0x40
    39b0:	strb	w4, [x27, #80]
    39b4:	cbnz	w19, 3918 <re_acquire_state_context+0x1b0>
    39b8:	ldr	w4, [x25, #4]
    39bc:	b	3960 <re_acquire_state_context+0x1f8>
    39c0:	mov	x0, #0x10                  	// #16
    39c4:	str	w2, [sp, #112]
    39c8:	bl	0 <grub_malloc>
    39cc:	str	x0, [x27, #56]
    39d0:	ldr	w2, [sp, #112]
    39d4:	cbz	x0, 3a50 <re_acquire_state_context+0x2e8>
    39d8:	mov	x1, x25
    39dc:	str	w2, [sp, #112]
    39e0:	bl	3528 <re_node_set_init_copy>
    39e4:	mov	w7, w0
    39e8:	cbnz	w0, 3a6c <re_acquire_state_context+0x304>
    39ec:	ldrb	w0, [x27, #80]
    39f0:	ldr	w2, [sp, #112]
    39f4:	orr	w0, w0, #0xffffff80
    39f8:	strb	w0, [x27, #80]
    39fc:	tbnz	w19, #0, 3928 <re_acquire_state_context+0x1c0>
    3a00:	tbz	w19, #1, 3a08 <re_acquire_state_context+0x2a0>
    3a04:	cbnz	w20, 3930 <re_acquire_state_context+0x1c8>
    3a08:	tbz	w19, #4, 3a14 <re_acquire_state_context+0x2ac>
    3a0c:	ldr	w0, [sp, #108]
    3a10:	cbz	w0, 3930 <re_acquire_state_context+0x1c8>
    3a14:	tbz	w19, #6, 39b8 <re_acquire_state_context+0x250>
    3a18:	ldr	w0, [sp, #116]
    3a1c:	cbz	w0, 3930 <re_acquire_state_context+0x1c8>
    3a20:	ldr	w4, [x25, #4]
    3a24:	b	3960 <re_acquire_state_context+0x1f8>
    3a28:	orr	w4, w4, #0x10
    3a2c:	strb	w4, [x27, #80]
    3a30:	b	3914 <re_acquire_state_context+0x1ac>
    3a34:	str	wzr, [x0]
    3a38:	mov	x27, #0x0                   	// #0
    3a3c:	mov	x0, x27
    3a40:	ldp	x25, x26, [sp, #64]
    3a44:	ldp	x27, x28, [sp, #80]
    3a48:	ldp	x29, x30, [sp], #128
    3a4c:	ret
    3a50:	mov	x0, x27
    3a54:	bl	21b8 <free_state>
    3a58:	ldp	x23, x24, [sp, #48]
    3a5c:	b	3990 <re_acquire_state_context+0x228>
    3a60:	mov	x0, x27
    3a64:	bl	0 <grub_free>
    3a68:	b	3990 <re_acquire_state_context+0x228>
    3a6c:	ldp	x23, x24, [sp, #48]
    3a70:	b	3990 <re_acquire_state_context+0x228>
    3a74:	nop

0000000000003a78 <re_acquire_state>:
    3a78:	stp	x29, x30, [sp, #-64]!
    3a7c:	mov	x29, sp
    3a80:	stp	x21, x22, [sp, #32]
    3a84:	mov	x22, x1
    3a88:	ldr	w1, [x2, #4]
    3a8c:	stp	x19, x20, [sp, #16]
    3a90:	stp	x23, x24, [sp, #48]
    3a94:	mov	x23, x0
    3a98:	cbz	w1, 3c80 <re_acquire_state+0x208>
    3a9c:	mov	x21, x2
    3aa0:	cmp	w1, #0x0
    3aa4:	mov	w20, w1
    3aa8:	b.le	3acc <re_acquire_state+0x54>
    3aac:	ldr	x2, [x2, #8]
    3ab0:	mov	x3, #0x0                   	// #0
    3ab4:	nop
    3ab8:	ldr	w0, [x2, x3, lsl #2]
    3abc:	add	x3, x3, #0x1
    3ac0:	cmp	w1, w3
    3ac4:	add	w20, w20, w0
    3ac8:	b.gt	3ab8 <re_acquire_state+0x40>
    3acc:	ldr	w0, [x22, #132]
    3ad0:	ldr	x1, [x22, #64]
    3ad4:	and	w0, w20, w0
    3ad8:	lsl	x0, x0, #4
    3adc:	add	x2, x1, x0
    3ae0:	ldr	w8, [x1, x0]
    3ae4:	cmp	w8, #0x0
    3ae8:	b.le	3b28 <re_acquire_state+0xb0>
    3aec:	ldr	x9, [x2, #8]
    3af0:	mov	x7, #0x0                   	// #0
    3af4:	nop
    3af8:	ldr	x19, [x9, x7, lsl #3]
    3afc:	mov	x1, x21
    3b00:	add	x7, x7, #0x1
    3b04:	add	x0, x19, #0x8
    3b08:	ldr	w2, [x19]
    3b0c:	cmp	w2, w20
    3b10:	b.ne	3b20 <re_acquire_state+0xa8>  // b.any
    3b14:	bl	1240 <re_node_set_compare>
    3b18:	tst	w0, #0xff
    3b1c:	b.ne	3c24 <re_acquire_state+0x1ac>  // b.any
    3b20:	cmp	w8, w7
    3b24:	b.gt	3af8 <re_acquire_state+0x80>
    3b28:	mov	x0, #0x58                  	// #88
    3b2c:	bl	0 <grub_zalloc>
    3b30:	mov	x19, x0
    3b34:	cbz	x0, 3c70 <re_acquire_state+0x1f8>
    3b38:	add	x24, x0, #0x8
    3b3c:	mov	x1, x21
    3b40:	mov	x0, x24
    3b44:	bl	3528 <re_node_set_init_copy>
    3b48:	cbnz	w0, 3c68 <re_acquire_state+0x1f0>
    3b4c:	ldr	w0, [x21, #4]
    3b50:	str	x24, [x19, #56]
    3b54:	cmp	w0, #0x0
    3b58:	b.le	3c10 <re_acquire_state+0x198>
    3b5c:	mov	x1, #0x0                   	// #0
    3b60:	ldr	x6, [x22]
    3b64:	b	3bb0 <re_acquire_state+0x138>
    3b68:	ldrb	w0, [x19, #80]
    3b6c:	cmp	w4, #0x2
    3b70:	ldrb	w5, [x2, #10]
    3b74:	mov	w3, w0
    3b78:	ubfx	x0, x0, #5, #1
    3b7c:	ubfx	x5, x5, #4, #1
    3b80:	orr	w0, w0, w5
    3b84:	bfi	w3, w0, #5, #1
    3b88:	strb	w3, [x19, #80]
    3b8c:	b.eq	3c3c <re_acquire_state+0x1c4>  // b.none
    3b90:	cmp	w4, #0x4
    3b94:	b.ne	3c4c <re_acquire_state+0x1d4>  // b.any
    3b98:	orr	w3, w3, #0x40
    3b9c:	strb	w3, [x19, #80]
    3ba0:	ldr	w0, [x21, #4]
    3ba4:	add	x1, x1, #0x1
    3ba8:	cmp	w0, w1
    3bac:	b.le	3c10 <re_acquire_state+0x198>
    3bb0:	ldr	x2, [x21, #8]
    3bb4:	ldrsw	x2, [x2, x1, lsl #2]
    3bb8:	add	x2, x6, x2, lsl #4
    3bbc:	ldrb	w4, [x2, #8]
    3bc0:	cmp	w4, #0x1
    3bc4:	b.ne	3b68 <re_acquire_state+0xf0>  // b.any
    3bc8:	ldr	w3, [x2, #8]
    3bcc:	tst	w3, #0x3ff00
    3bd0:	b.eq	3ba4 <re_acquire_state+0x12c>  // b.none
    3bd4:	ldrb	w0, [x19, #80]
    3bd8:	ldrb	w2, [x2, #10]
    3bdc:	mov	w3, w0
    3be0:	ubfx	x0, x0, #5, #1
    3be4:	ubfx	x2, x2, #4, #1
    3be8:	orr	w0, w0, w2
    3bec:	bfi	w3, w0, #5, #1
    3bf0:	strb	w3, [x19, #80]
    3bf4:	ldrb	w0, [x19, #80]
    3bf8:	add	x1, x1, #0x1
    3bfc:	orr	w0, w0, #0xffffff80
    3c00:	strb	w0, [x19, #80]
    3c04:	ldr	w0, [x21, #4]
    3c08:	cmp	w0, w1
    3c0c:	b.gt	3bb0 <re_acquire_state+0x138>
    3c10:	mov	w2, w20
    3c14:	mov	x0, x22
    3c18:	mov	x1, x19
    3c1c:	bl	1b08 <register_state>
    3c20:	cbnz	w0, 3ca0 <re_acquire_state+0x228>
    3c24:	mov	x0, x19
    3c28:	ldp	x19, x20, [sp, #16]
    3c2c:	ldp	x21, x22, [sp, #32]
    3c30:	ldp	x23, x24, [sp, #48]
    3c34:	ldp	x29, x30, [sp], #64
    3c38:	ret
    3c3c:	orr	w3, w3, #0x10
    3c40:	strb	w3, [x19, #80]
    3c44:	ldr	w0, [x21, #4]
    3c48:	b	3ba4 <re_acquire_state+0x12c>
    3c4c:	cmp	w4, #0xc
    3c50:	b.eq	3bf4 <re_acquire_state+0x17c>  // b.none
    3c54:	ldr	w0, [x2, #8]
    3c58:	tst	w0, #0x3ff00
    3c5c:	b.ne	3bf4 <re_acquire_state+0x17c>  // b.any
    3c60:	ldr	w0, [x21, #4]
    3c64:	b	3ba4 <re_acquire_state+0x12c>
    3c68:	mov	x0, x19
    3c6c:	bl	0 <grub_free>
    3c70:	mov	w0, #0xc                   	// #12
    3c74:	mov	x19, #0x0                   	// #0
    3c78:	str	w0, [x23]
    3c7c:	b	3c24 <re_acquire_state+0x1ac>
    3c80:	str	wzr, [x0]
    3c84:	mov	x19, #0x0                   	// #0
    3c88:	mov	x0, x19
    3c8c:	ldp	x19, x20, [sp, #16]
    3c90:	ldp	x21, x22, [sp, #32]
    3c94:	ldp	x23, x24, [sp, #48]
    3c98:	ldp	x29, x30, [sp], #64
    3c9c:	ret
    3ca0:	mov	x0, x19
    3ca4:	bl	21b8 <free_state>
    3ca8:	b	3c70 <re_acquire_state+0x1f8>
    3cac:	nop

0000000000003cb0 <merge_state_array>:
    3cb0:	cmp	w3, #0x0
    3cb4:	b.le	3d74 <merge_state_array+0xc4>
    3cb8:	stp	x29, x30, [sp, #-96]!
    3cbc:	mov	x29, sp
    3cc0:	stp	x19, x20, [sp, #16]
    3cc4:	sub	w20, w3, #0x1
    3cc8:	add	x20, x20, #0x1
    3ccc:	mov	x19, #0x0                   	// #0
    3cd0:	stp	x21, x22, [sp, #32]
    3cd4:	lsl	x20, x20, #3
    3cd8:	mov	x21, x1
    3cdc:	mov	x22, x2
    3ce0:	str	x23, [sp, #48]
    3ce4:	mov	x23, x0
    3ce8:	b	3d3c <merge_state_array+0x8c>
    3cec:	add	x2, x3, #0x8
    3cf0:	add	x1, x1, #0x8
    3cf4:	add	x0, sp, #0x50
    3cf8:	cbz	x3, 3d30 <merge_state_array+0x80>
    3cfc:	bl	35a8 <re_node_set_init_union>
    3d00:	mov	w3, w0
    3d04:	str	w3, [sp, #76]
    3d08:	add	x2, sp, #0x50
    3d0c:	mov	x1, x23
    3d10:	add	x0, sp, #0x4c
    3d14:	cbnz	w3, 3d5c <merge_state_array+0xac>
    3d18:	bl	3a78 <re_acquire_state>
    3d1c:	str	x0, [x21, x19]
    3d20:	ldr	x0, [sp, #88]
    3d24:	bl	0 <grub_free>
    3d28:	ldr	w3, [sp, #76]
    3d2c:	cbnz	w3, 3d5c <merge_state_array+0xac>
    3d30:	add	x19, x19, #0x8
    3d34:	cmp	x20, x19
    3d38:	b.eq	3d58 <merge_state_array+0xa8>  // b.none
    3d3c:	ldr	x1, [x21, x19]
    3d40:	ldr	x3, [x22, x19]
    3d44:	cbnz	x1, 3cec <merge_state_array+0x3c>
    3d48:	str	x3, [x21, x19]
    3d4c:	add	x19, x19, #0x8
    3d50:	cmp	x20, x19
    3d54:	b.ne	3d3c <merge_state_array+0x8c>  // b.any
    3d58:	mov	w3, #0x0                   	// #0
    3d5c:	mov	w0, w3
    3d60:	ldp	x19, x20, [sp, #16]
    3d64:	ldp	x21, x22, [sp, #32]
    3d68:	ldr	x23, [sp, #48]
    3d6c:	ldp	x29, x30, [sp], #96
    3d70:	ret
    3d74:	mov	w3, #0x0                   	// #0
    3d78:	mov	w0, w3
    3d7c:	ret

0000000000003d80 <expand_bkref_cache>:
    3d80:	stp	x29, x30, [sp, #-144]!
    3d84:	mov	x29, sp
    3d88:	ldr	w7, [x0, #148]
    3d8c:	stp	x19, x20, [sp, #16]
    3d90:	mov	w20, #0x0                   	// #0
    3d94:	stp	x21, x22, [sp, #32]
    3d98:	mov	w21, w2
    3d9c:	mov	x22, x1
    3da0:	mov	w2, w7
    3da4:	stp	x23, x24, [sp, #48]
    3da8:	mov	w24, w3
    3dac:	mov	w3, #0x14                  	// #20
    3db0:	stp	x25, x26, [sp, #64]
    3db4:	mov	w25, w4
    3db8:	stp	x27, x28, [sp, #80]
    3dbc:	mov	x27, x0
    3dc0:	b	3de0 <expand_bkref_cache+0x60>
    3dc4:	ldr	x1, [x27, #160]
    3dc8:	asr	w5, w5, #1
    3dcc:	smaddl	x1, w5, w3, x1
    3dd0:	ldr	w0, [x1, #4]
    3dd4:	cmp	w21, w0
    3dd8:	b.gt	3fac <expand_bkref_cache+0x22c>
    3ddc:	mov	w2, w5
    3de0:	add	w5, w2, w20
    3de4:	cmp	w2, w20
    3de8:	b.gt	3dc4 <expand_bkref_cache+0x44>
    3dec:	cmp	w7, w20
    3df0:	b.le	3fb4 <expand_bkref_cache+0x234>
    3df4:	mov	w0, #0x14                  	// #20
    3df8:	ldr	x19, [x27, #160]
    3dfc:	smull	x0, w20, w0
    3e00:	str	x0, [sp, #104]
    3e04:	add	x19, x19, x0
    3e08:	ldr	w0, [x19, #4]
    3e0c:	cmp	w21, w0
    3e10:	b.ne	3fb4 <expand_bkref_cache+0x234>  // b.any
    3e14:	add	x23, x22, #0x8
    3e18:	ldr	x26, [x27, #112]
    3e1c:	b	3ec4 <expand_bkref_cache+0x144>
    3e20:	ldr	x3, [x27, #136]
    3e24:	sxtw	x28, w1
    3e28:	ldr	x0, [x26, #24]
    3e2c:	ldr	x7, [x3, x28, lsl #3]
    3e30:	ldr	w20, [x0, w2, sxtw #2]
    3e34:	cbz	x7, 3f88 <expand_bkref_cache+0x208>
    3e38:	ldr	w0, [x7, #12]
    3e3c:	mov	w2, w20
    3e40:	add	x1, x7, #0x10
    3e44:	bl	2548 <re_node_set_contains.isra.0>
    3e48:	cbnz	w0, 3eb8 <expand_bkref_cache+0x138>
    3e4c:	add	x1, x7, #0x8
    3e50:	add	x0, sp, #0x80
    3e54:	bl	3528 <re_node_set_init_copy>
    3e58:	mov	w3, w0
    3e5c:	mov	w1, w20
    3e60:	add	x0, sp, #0x80
    3e64:	str	w3, [sp, #124]
    3e68:	bl	19d0 <re_node_set_insert>
    3e6c:	and	w0, w0, #0xff
    3e70:	ldr	w1, [sp, #124]
    3e74:	eor	w0, w0, #0x1
    3e78:	cmp	w1, #0x0
    3e7c:	cset	w1, ne  // ne = any
    3e80:	orr	w0, w1, w0
    3e84:	cbnz	w0, 3fe0 <expand_bkref_cache+0x260>
    3e88:	ldr	x20, [x27, #136]
    3e8c:	add	x2, sp, #0x80
    3e90:	mov	x1, x26
    3e94:	add	x0, sp, #0x7c
    3e98:	bl	3a78 <re_acquire_state>
    3e9c:	mov	x1, x0
    3ea0:	ldr	x0, [sp, #136]
    3ea4:	str	x1, [x20, x28, lsl #3]
    3ea8:	bl	0 <grub_free>
    3eac:	ldr	x0, [x27, #136]
    3eb0:	ldr	x0, [x0, x28, lsl #3]
    3eb4:	cbz	x0, 3fd4 <expand_bkref_cache+0x254>
    3eb8:	ldrb	w0, [x19, #16]
    3ebc:	add	x19, x19, #0x14
    3ec0:	cbz	w0, 3fb4 <expand_bkref_cache+0x234>
    3ec4:	ldr	w7, [x22, #4]
    3ec8:	mov	x1, x23
    3ecc:	ldr	w2, [x19]
    3ed0:	mov	w0, w7
    3ed4:	bl	2548 <re_node_set_contains.isra.0>
    3ed8:	cbz	w0, 3eb8 <expand_bkref_cache+0x138>
    3edc:	ldp	w0, w1, [x19, #8]
    3ee0:	add	w1, w21, w1
    3ee4:	sub	w1, w1, w0
    3ee8:	cmp	w21, w1
    3eec:	b.ne	3e20 <expand_bkref_cache+0xa0>  // b.any
    3ef0:	ldr	x3, [x26, #40]
    3ef4:	mov	w0, w7
    3ef8:	mov	x1, x23
    3efc:	add	x2, x3, w2, sxtw #4
    3f00:	ldr	x2, [x2, #8]
    3f04:	ldr	w20, [x2]
    3f08:	mov	w2, w20
    3f0c:	bl	2548 <re_node_set_contains.isra.0>
    3f10:	mov	w28, w0
    3f14:	cbnz	w0, 3eb8 <expand_bkref_cache+0x138>
    3f18:	mov	x1, #0x100000001           	// #4294967297
    3f1c:	mov	x0, #0x4                   	// #4
    3f20:	str	x1, [sp, #128]
    3f24:	bl	0 <grub_malloc>
    3f28:	str	x0, [sp, #136]
    3f2c:	cbz	x0, 4020 <expand_bkref_cache+0x2a0>
    3f30:	str	w20, [x0]
    3f34:	mov	w3, w25
    3f38:	mov	w2, w24
    3f3c:	add	x1, sp, #0x80
    3f40:	mov	x0, x26
    3f44:	str	w28, [sp, #124]
    3f48:	bl	33d8 <check_arrival_expand_ecl>
    3f4c:	add	x1, sp, #0x80
    3f50:	mov	w19, w0
    3f54:	mov	x0, x22
    3f58:	bl	3218 <re_node_set_merge>
    3f5c:	mov	w28, w0
    3f60:	ldr	x0, [sp, #136]
    3f64:	bl	0 <grub_free>
    3f68:	ldr	w0, [sp, #124]
    3f6c:	orr	w1, w19, w28
    3f70:	orr	w1, w1, w0
    3f74:	cbnz	w1, 4010 <expand_bkref_cache+0x290>
    3f78:	ldr	x0, [sp, #104]
    3f7c:	ldr	x19, [x27, #160]
    3f80:	add	x19, x19, x0
    3f84:	b	3ec4 <expand_bkref_cache+0x144>
    3f88:	mov	x1, #0x100000001           	// #4294967297
    3f8c:	mov	x0, #0x4                   	// #4
    3f90:	str	x1, [sp, #128]
    3f94:	bl	0 <grub_malloc>
    3f98:	str	x0, [sp, #136]
    3f9c:	cbz	x0, 3ff0 <expand_bkref_cache+0x270>
    3fa0:	str	w20, [x0]
    3fa4:	str	wzr, [sp, #124]
    3fa8:	b	3e88 <expand_bkref_cache+0x108>
    3fac:	add	w20, w5, #0x1
    3fb0:	b	3de0 <expand_bkref_cache+0x60>
    3fb4:	mov	w0, #0x0                   	// #0
    3fb8:	ldp	x19, x20, [sp, #16]
    3fbc:	ldp	x21, x22, [sp, #32]
    3fc0:	ldp	x23, x24, [sp, #48]
    3fc4:	ldp	x25, x26, [sp, #64]
    3fc8:	ldp	x27, x28, [sp, #80]
    3fcc:	ldp	x29, x30, [sp], #144
    3fd0:	ret
    3fd4:	ldr	w0, [sp, #124]
    3fd8:	cbz	w0, 3eb8 <expand_bkref_cache+0x138>
    3fdc:	b	3fb8 <expand_bkref_cache+0x238>
    3fe0:	ldr	x0, [sp, #136]
    3fe4:	bl	0 <grub_free>
    3fe8:	ldr	w0, [sp, #124]
    3fec:	cbnz	w0, 3fb8 <expand_bkref_cache+0x238>
    3ff0:	mov	w0, #0xc                   	// #12
    3ff4:	ldp	x19, x20, [sp, #16]
    3ff8:	ldp	x21, x22, [sp, #32]
    3ffc:	ldp	x23, x24, [sp, #48]
    4000:	ldp	x25, x26, [sp, #64]
    4004:	ldp	x27, x28, [sp, #80]
    4008:	ldp	x29, x30, [sp], #144
    400c:	ret
    4010:	cbnz	w0, 3fb8 <expand_bkref_cache+0x238>
    4014:	cmp	w19, #0x0
    4018:	csel	w0, w19, w28, ne  // ne = any
    401c:	b	3fb8 <expand_bkref_cache+0x238>
    4020:	mov	w28, #0xc                   	// #12
    4024:	str	xzr, [sp, #128]
    4028:	b	3f34 <expand_bkref_cache+0x1b4>
    402c:	nop

0000000000004030 <re_node_set_add_intersect>:
    4030:	stp	x29, x30, [sp, #-48]!
    4034:	mov	x29, sp
    4038:	stp	x19, x20, [sp, #16]
    403c:	mov	x19, x0
    4040:	ldr	w0, [x1, #4]
    4044:	cbz	w0, 4134 <re_node_set_add_intersect+0x104>
    4048:	mov	x20, x1
    404c:	ldr	w1, [x2, #4]
    4050:	stp	x21, x22, [sp, #32]
    4054:	mov	x21, x2
    4058:	cbz	w1, 4140 <re_node_set_add_intersect+0x110>
    405c:	ldp	w22, w4, [x19]
    4060:	add	w2, w0, w1
    4064:	ldr	x7, [x19, #8]
    4068:	add	w3, w2, w4
    406c:	cmp	w3, w22
    4070:	b.gt	41d4 <re_node_set_add_intersect+0x1a4>
    4074:	ldr	x12, [x20, #8]
    4078:	sub	w8, w0, #0x1
    407c:	ldr	x11, [x21, #8]
    4080:	sub	w9, w1, #0x1
    4084:	add	w10, w4, w0
    4088:	ldr	w5, [x12, w8, sxtw #2]
    408c:	sub	w4, w4, #0x1
    4090:	add	w10, w10, w1
    4094:	ldr	w3, [x11, w9, sxtw #2]
    4098:	cmp	w5, w3
    409c:	b.eq	40b8 <re_node_set_add_intersect+0x88>  // b.none
    40a0:	b.ge	41c4 <re_node_set_add_intersect+0x194>  // b.tcont
    40a4:	subs	w9, w9, #0x1
    40a8:	b.mi	4154 <re_node_set_add_intersect+0x124>  // b.first
    40ac:	ldr	w3, [x11, w9, sxtw #2]
    40b0:	cmp	w5, w3
    40b4:	b.ne	40a0 <re_node_set_add_intersect+0x70>  // b.any
    40b8:	tbnz	w4, #31, 40e4 <re_node_set_add_intersect+0xb4>
    40bc:	sxtw	x3, w4
    40c0:	b	40d0 <re_node_set_add_intersect+0xa0>
    40c4:	sub	w4, w3, #0x1
    40c8:	sub	x3, x3, #0x1
    40cc:	tbnz	w3, #31, 40e4 <re_node_set_add_intersect+0xb4>
    40d0:	ldr	w6, [x7, x3, lsl #2]
    40d4:	mov	w4, w3
    40d8:	cmp	w6, w5
    40dc:	b.gt	40c4 <re_node_set_add_intersect+0x94>
    40e0:	b.eq	40ec <re_node_set_add_intersect+0xbc>  // b.none
    40e4:	sub	w10, w10, #0x1
    40e8:	str	w5, [x7, w10, sxtw #2]
    40ec:	subs	w8, w8, #0x1
    40f0:	b.mi	4154 <re_node_set_add_intersect+0x124>  // b.first
    40f4:	subs	w9, w9, #0x1
    40f8:	b.mi	4154 <re_node_set_add_intersect+0x124>  // b.first
    40fc:	ldr	w5, [x12, w8, sxtw #2]
    4100:	ldr	w3, [x11, w9, sxtw #2]
    4104:	b	40b0 <re_node_set_add_intersect+0x80>
    4108:	sub	w2, w2, #0x1
    410c:	str	w3, [x7, x0, lsl #2]
    4110:	cmn	w2, #0x1
    4114:	sxtw	x6, w2
    4118:	b.ne	4190 <re_node_set_add_intersect+0x160>  // b.any
    411c:	sbfiz	x2, x1, #2, #32
    4120:	add	x1, x7, w10, sxtw #2
    4124:	mov	x0, x7
    4128:	bl	0 <grub_memmove>
    412c:	ldp	x21, x22, [sp, #32]
    4130:	mov	w0, #0x0                   	// #0
    4134:	ldp	x19, x20, [sp, #16]
    4138:	ldp	x29, x30, [sp], #48
    413c:	ret
    4140:	mov	w0, #0x0                   	// #0
    4144:	ldp	x19, x20, [sp, #16]
    4148:	ldp	x21, x22, [sp, #32]
    414c:	ldp	x29, x30, [sp], #48
    4150:	ret
    4154:	ldr	w0, [x19, #4]
    4158:	ldr	w5, [x20, #4]
    415c:	ldr	w1, [x21, #4]
    4160:	sub	w2, w0, #0x1
    4164:	add	w5, w0, w5
    4168:	add	w5, w5, w1
    416c:	sub	w1, w5, w10
    4170:	sub	w5, w5, #0x1
    4174:	add	w0, w0, w1
    4178:	str	w0, [x19, #4]
    417c:	cmp	w1, #0x0
    4180:	ccmp	w2, #0x0, #0x1, gt
    4184:	b.lt	411c <re_node_set_add_intersect+0xec>  // b.tstop
    4188:	sxtw	x8, w5
    418c:	sxtw	x6, w2
    4190:	ldr	w4, [x7, x8, lsl #2]
    4194:	add	w0, w2, w1
    4198:	ldr	w3, [x7, x6, lsl #2]
    419c:	sxtw	x0, w0
    41a0:	cmp	w4, w3
    41a4:	b.le	4108 <re_node_set_add_intersect+0xd8>
    41a8:	sub	w5, w5, #0x1
    41ac:	str	w4, [x7, x0, lsl #2]
    41b0:	subs	w1, w1, #0x1
    41b4:	sxtw	x8, w5
    41b8:	b.ne	4190 <re_node_set_add_intersect+0x160>  // b.any
    41bc:	mov	x2, #0x0                   	// #0
    41c0:	b	4120 <re_node_set_add_intersect+0xf0>
    41c4:	subs	w8, w8, #0x1
    41c8:	b.mi	4154 <re_node_set_add_intersect+0x124>  // b.first
    41cc:	ldr	w5, [x12, w8, sxtw #2]
    41d0:	b	4098 <re_node_set_add_intersect+0x68>
    41d4:	add	w22, w2, w22
    41d8:	mov	x0, x7
    41dc:	sbfiz	x1, x22, #2, #32
    41e0:	bl	0 <grub_realloc>
    41e4:	mov	x7, x0
    41e8:	cbz	x0, 4204 <re_node_set_add_intersect+0x1d4>
    41ec:	ldr	w0, [x20, #4]
    41f0:	ldr	w1, [x21, #4]
    41f4:	ldr	w4, [x19, #4]
    41f8:	str	w22, [x19]
    41fc:	str	x7, [x19, #8]
    4200:	b	4074 <re_node_set_add_intersect+0x44>
    4204:	mov	w0, #0xc                   	// #12
    4208:	ldp	x21, x22, [sp, #32]
    420c:	b	4134 <re_node_set_add_intersect+0x104>

0000000000004210 <sub_epsilon_src_nodes>:
    4210:	stp	x29, x30, [sp, #-112]!
    4214:	mov	x29, sp
    4218:	stp	x19, x20, [sp, #16]
    421c:	mov	w20, w1
    4220:	mov	w1, #0x0                   	// #0
    4224:	ldr	x19, [x0, #56]
    4228:	stp	x21, x22, [sp, #32]
    422c:	mov	x21, x2
    4230:	mov	x2, #0x10                  	// #16
    4234:	stp	x23, x24, [sp, #48]
    4238:	add	x19, x19, w20, sxtw #4
    423c:	mov	x24, x3
    4240:	stp	x25, x26, [sp, #64]
    4244:	mov	x26, x0
    4248:	add	x0, sp, #0x60
    424c:	str	x27, [sp, #80]
    4250:	bl	0 <grub_memset>
    4254:	add	x23, x21, #0x8
    4258:	ldr	w7, [x19, #4]
    425c:	add	x22, x19, #0x8
    4260:	mov	x25, #0x0                   	// #0
    4264:	cmp	w7, #0x0
    4268:	b.gt	42b4 <sub_epsilon_src_nodes+0xa4>
    426c:	b	43ec <sub_epsilon_src_nodes+0x1dc>
    4270:	cbnz	w0, 4358 <sub_epsilon_src_nodes+0x148>
    4274:	ldr	w0, [x21, #4]
    4278:	mov	x1, x23
    427c:	bl	2548 <re_node_set_contains.isra.0>
    4280:	cbz	w0, 4358 <sub_epsilon_src_nodes+0x148>
    4284:	ldr	x2, [x26, #56]
    4288:	mov	x1, x24
    428c:	add	x0, sp, #0x60
    4290:	add	x2, x2, x6
    4294:	bl	4030 <re_node_set_add_intersect>
    4298:	mov	w27, w0
    429c:	cbnz	w0, 4330 <sub_epsilon_src_nodes+0x120>
    42a0:	ldr	w7, [x19, #4]
    42a4:	nop
    42a8:	add	x25, x25, #0x1
    42ac:	cmp	w7, w25
    42b0:	b.le	4374 <sub_epsilon_src_nodes+0x164>
    42b4:	ldr	x1, [x19, #8]
    42b8:	ldr	w5, [x1, x25, lsl #2]
    42bc:	cmp	w20, w5
    42c0:	b.eq	42a8 <sub_epsilon_src_nodes+0x98>  // b.none
    42c4:	ldr	x4, [x26]
    42c8:	sbfiz	x6, x5, #4, #32
    42cc:	add	x4, x4, x6
    42d0:	ldrb	w0, [x4, #8]
    42d4:	tbz	w0, #3, 42a8 <sub_epsilon_src_nodes+0x98>
    42d8:	ldr	x8, [x26, #40]
    42dc:	mov	x1, x22
    42e0:	mov	w0, w7
    42e4:	add	x8, x8, x6
    42e8:	ldr	x9, [x8, #8]
    42ec:	ldr	w2, [x9]
    42f0:	bl	2548 <re_node_set_contains.isra.0>
    42f4:	ldr	w1, [x8, #4]
    42f8:	cmp	w1, #0x1
    42fc:	b.gt	4270 <sub_epsilon_src_nodes+0x60>
    4300:	cbnz	w0, 42a8 <sub_epsilon_src_nodes+0x98>
    4304:	ldr	w0, [x21, #4]
    4308:	mov	x1, x23
    430c:	bl	2548 <re_node_set_contains.isra.0>
    4310:	cbz	w0, 42a8 <sub_epsilon_src_nodes+0x98>
    4314:	ldr	x2, [x26, #56]
    4318:	mov	x1, x24
    431c:	add	x0, sp, #0x60
    4320:	add	x2, x2, x6
    4324:	bl	4030 <re_node_set_add_intersect>
    4328:	mov	w27, w0
    432c:	cbz	w0, 42a0 <sub_epsilon_src_nodes+0x90>
    4330:	ldr	x0, [sp, #104]
    4334:	bl	0 <grub_free>
    4338:	mov	w0, w27
    433c:	ldp	x19, x20, [sp, #16]
    4340:	ldp	x21, x22, [sp, #32]
    4344:	ldp	x23, x24, [sp, #48]
    4348:	ldp	x25, x26, [sp, #64]
    434c:	ldr	x27, [sp, #80]
    4350:	ldp	x29, x30, [sp], #112
    4354:	ret
    4358:	ldr	w2, [x9, #4]
    435c:	cmp	w2, #0x0
    4360:	b.le	42a8 <sub_epsilon_src_nodes+0x98>
    4364:	mov	x1, x22
    4368:	mov	w0, w7
    436c:	bl	2548 <re_node_set_contains.isra.0>
    4370:	b	4300 <sub_epsilon_src_nodes+0xf0>
    4374:	cmp	w7, #0x0
    4378:	b.le	43ec <sub_epsilon_src_nodes+0x1dc>
    437c:	add	x9, sp, #0x68
    4380:	add	x10, x21, #0x8
    4384:	add	x11, x21, #0x4
    4388:	mov	x6, #0x0                   	// #0
    438c:	nop
    4390:	ldr	x2, [x19, #8]
    4394:	mov	x1, x9
    4398:	ldr	w0, [sp, #100]
    439c:	ldr	w2, [x2, x6, lsl #2]
    43a0:	add	x6, x6, #0x1
    43a4:	bl	2548 <re_node_set_contains.isra.0>
    43a8:	mov	x1, x10
    43ac:	cbnz	w0, 43e4 <sub_epsilon_src_nodes+0x1d4>
    43b0:	ldr	w8, [x21, #4]
    43b4:	mov	w0, w8
    43b8:	bl	2548 <re_node_set_contains.isra.0>
    43bc:	mov	w2, w0
    43c0:	subs	w2, w2, #0x1
    43c4:	sub	w3, w8, #0x1
    43c8:	mov	x1, x10
    43cc:	mov	x0, x11
    43d0:	ccmp	w2, w8, #0x0, pl  // pl = nfrst
    43d4:	b.ge	43e4 <sub_epsilon_src_nodes+0x1d4>  // b.tcont
    43d8:	str	w3, [x21, #4]
    43dc:	bl	26d8 <re_node_set_remove_at.isra.0.part.0>
    43e0:	ldr	w7, [x19, #4]
    43e4:	cmp	w7, w6
    43e8:	b.gt	4390 <sub_epsilon_src_nodes+0x180>
    43ec:	ldr	x0, [sp, #104]
    43f0:	mov	w27, #0x0                   	// #0
    43f4:	bl	0 <grub_free>
    43f8:	mov	w0, w27
    43fc:	ldp	x19, x20, [sp, #16]
    4400:	ldp	x21, x22, [sp, #32]
    4404:	ldp	x23, x24, [sp, #48]
    4408:	ldp	x25, x26, [sp, #64]
    440c:	ldr	x27, [sp, #80]
    4410:	ldp	x29, x30, [sp], #112
    4414:	ret

0000000000004418 <calc_first>:
    4418:	stp	x29, x30, [sp, #-32]!
    441c:	mov	x29, sp
    4420:	stp	x19, x20, [sp, #16]
    4424:	mov	x19, x1
    4428:	ldrb	w1, [x1, #48]
    442c:	cmp	w1, #0x10
    4430:	b.ne	4458 <calc_first+0x40>  // b.any
    4434:	ldr	x1, [x19, #8]
    4438:	mov	w0, #0x0                   	// #0
    443c:	ldr	x2, [x1, #24]
    4440:	ldr	w1, [x1, #56]
    4444:	str	x2, [x19, #24]
    4448:	str	w1, [x19, #56]
    444c:	ldp	x19, x20, [sp, #16]
    4450:	ldp	x29, x30, [sp], #32
    4454:	ret
    4458:	ldp	x2, x3, [x19, #40]
    445c:	str	x19, [x19, #24]
    4460:	mov	x20, x0
    4464:	mov	x1, x2
    4468:	mov	x2, x3
    446c:	bl	1cc8 <re_dfa_add_node>
    4470:	str	w0, [x19, #56]
    4474:	mov	w1, w0
    4478:	cmn	w0, #0x1
    447c:	b.eq	44b4 <calc_first+0x9c>  // b.none
    4480:	ldrb	w2, [x19, #48]
    4484:	mov	w0, #0x0                   	// #0
    4488:	cmp	w2, #0xc
    448c:	b.ne	444c <calc_first+0x34>  // b.any
    4490:	ldr	x2, [x20]
    4494:	ldr	w3, [x19, #40]
    4498:	add	x1, x2, w1, sxtw #4
    449c:	ldr	w2, [x1, #8]
    44a0:	bfi	w2, w3, #8, #10
    44a4:	str	w2, [x1, #8]
    44a8:	ldp	x19, x20, [sp, #16]
    44ac:	ldp	x29, x30, [sp], #32
    44b0:	ret
    44b4:	mov	w0, #0xc                   	// #12
    44b8:	b	444c <calc_first+0x34>
    44bc:	nop

00000000000044c0 <calc_eclosure_iter.isra.0>:
    44c0:	stp	x29, x30, [sp, #-112]!
    44c4:	mov	x29, sp
    44c8:	stp	x23, x24, [sp, #48]
    44cc:	mov	x23, x0
    44d0:	and	w24, w3, #0xff
    44d4:	ldr	x0, [x1, #40]
    44d8:	stp	x19, x20, [sp, #16]
    44dc:	sbfiz	x20, x2, #4, #32
    44e0:	add	x0, x0, x20
    44e4:	stp	x25, x26, [sp, #64]
    44e8:	mov	x19, x1
    44ec:	stp	x21, x22, [sp, #32]
    44f0:	mov	w22, w2
    44f4:	ldr	w25, [x0, #4]
    44f8:	add	w25, w25, #0x1
    44fc:	stp	w25, wzr, [sp, #80]
    4500:	sbfiz	x0, x25, #2, #32
    4504:	bl	0 <grub_malloc>
    4508:	cmp	x0, #0x0
    450c:	str	x0, [sp, #88]
    4510:	cset	w21, eq  // eq = none
    4514:	cmp	w25, #0x0
    4518:	csel	w21, w21, wzr, ne  // ne = any
    451c:	cbnz	w21, 46c0 <calc_eclosure_iter.isra.0+0x200>
    4520:	ldr	x2, [x19]
    4524:	mov	w3, #0xffffffff            	// #-1
    4528:	ldr	x0, [x19, #48]
    452c:	add	x1, x2, x20
    4530:	add	x0, x0, x20
    4534:	ldr	w4, [x1, #8]
    4538:	str	w3, [x0, #4]
    453c:	tst	w4, #0x3ff00
    4540:	b.ne	464c <calc_eclosure_iter.isra.0+0x18c>  // b.any
    4544:	ldrb	w0, [x1, #8]
    4548:	tbz	w0, #3, 4698 <calc_eclosure_iter.isra.0+0x1d8>
    454c:	ldr	x3, [x19, #40]
    4550:	add	x0, x3, x20
    4554:	ldr	w1, [x0, #4]
    4558:	cmp	w1, #0x0
    455c:	b.le	4698 <calc_eclosure_iter.isra.0+0x1d8>
    4560:	mov	x25, #0x0                   	// #0
    4564:	nop
    4568:	ldr	x1, [x0, #8]
    456c:	ldr	x0, [x19, #48]
    4570:	ldr	w2, [x1, x25, lsl #2]
    4574:	sbfiz	x26, x2, #4, #32
    4578:	add	x0, x0, x26
    457c:	ldr	w1, [x0, #4]
    4580:	cmn	w1, #0x1
    4584:	b.eq	4644 <calc_eclosure_iter.isra.0+0x184>  // b.none
    4588:	cbz	w1, 462c <calc_eclosure_iter.isra.0+0x16c>
    458c:	ldp	x0, x1, [x0]
    4590:	stp	x0, x1, [sp, #96]
    4594:	add	x1, sp, #0x60
    4598:	add	x0, sp, #0x50
    459c:	bl	3218 <re_node_set_merge>
    45a0:	cbnz	w0, 4604 <calc_eclosure_iter.isra.0+0x144>
    45a4:	ldr	x0, [x19, #48]
    45a8:	add	x0, x0, x26
    45ac:	ldr	w0, [x0, #4]
    45b0:	cbz	w0, 461c <calc_eclosure_iter.isra.0+0x15c>
    45b4:	ldr	x3, [x19, #40]
    45b8:	add	x0, x3, x20
    45bc:	add	x25, x25, #0x1
    45c0:	ldr	w1, [x0, #4]
    45c4:	cmp	w1, w25
    45c8:	b.gt	4568 <calc_eclosure_iter.isra.0+0xa8>
    45cc:	mov	w1, w22
    45d0:	add	x0, sp, #0x50
    45d4:	bl	19d0 <re_node_set_insert>
    45d8:	tst	w0, #0xff
    45dc:	b.eq	46c0 <calc_eclosure_iter.isra.0+0x200>  // b.none
    45e0:	ldr	x0, [x19, #48]
    45e4:	eor	w24, w24, #0x1
    45e8:	tst	w21, w24
    45ec:	add	x1, x0, x20
    45f0:	b.eq	46b0 <calc_eclosure_iter.isra.0+0x1f0>  // b.none
    45f4:	str	wzr, [x1, #4]
    45f8:	ldp	x2, x3, [sp, #80]
    45fc:	mov	w0, #0x0                   	// #0
    4600:	stp	x2, x3, [x23]
    4604:	ldp	x19, x20, [sp, #16]
    4608:	ldp	x21, x22, [sp, #32]
    460c:	ldp	x23, x24, [sp, #48]
    4610:	ldp	x25, x26, [sp, #64]
    4614:	ldp	x29, x30, [sp], #112
    4618:	ret
    461c:	ldr	x0, [sp, #104]
    4620:	mov	w21, #0x1                   	// #1
    4624:	bl	0 <grub_free>
    4628:	b	45b4 <calc_eclosure_iter.isra.0+0xf4>
    462c:	mov	x1, x19
    4630:	add	x0, sp, #0x60
    4634:	mov	w3, #0x0                   	// #0
    4638:	bl	44c0 <calc_eclosure_iter.isra.0>
    463c:	cbz	w0, 4594 <calc_eclosure_iter.isra.0+0xd4>
    4640:	b	4604 <calc_eclosure_iter.isra.0+0x144>
    4644:	mov	w21, #0x1                   	// #1
    4648:	b	45b8 <calc_eclosure_iter.isra.0+0xf8>
    464c:	ldr	x0, [x19, #40]
    4650:	add	x0, x0, x20
    4654:	ldr	w3, [x0, #4]
    4658:	cbz	w3, 4698 <calc_eclosure_iter.isra.0+0x1d8>
    465c:	ldr	x0, [x0, #8]
    4660:	ldrsw	x0, [x0]
    4664:	add	x2, x2, x0, lsl #4
    4668:	ldrb	w0, [x2, #10]
    466c:	tbnz	w0, #2, 4544 <calc_eclosure_iter.isra.0+0x84>
    4670:	ubfx	x4, x4, #8, #10
    4674:	mov	w3, w22
    4678:	mov	w2, w22
    467c:	mov	w1, w22
    4680:	mov	x0, x19
    4684:	bl	1f18 <duplicate_node_closure>
    4688:	cbnz	w0, 4604 <calc_eclosure_iter.isra.0+0x144>
    468c:	ldr	x1, [x19]
    4690:	add	x1, x1, x20
    4694:	b	4544 <calc_eclosure_iter.isra.0+0x84>
    4698:	mov	w1, w22
    469c:	add	x0, sp, #0x50
    46a0:	bl	19d0 <re_node_set_insert>
    46a4:	tst	w0, #0xff
    46a8:	b.eq	46c0 <calc_eclosure_iter.isra.0+0x200>  // b.none
    46ac:	ldr	x0, [x19, #48]
    46b0:	add	x20, x0, x20
    46b4:	ldp	x0, x1, [sp, #80]
    46b8:	stp	x0, x1, [x20]
    46bc:	b	45f8 <calc_eclosure_iter.isra.0+0x138>
    46c0:	mov	w0, #0xc                   	// #12
    46c4:	ldp	x19, x20, [sp, #16]
    46c8:	ldp	x21, x22, [sp, #32]
    46cc:	ldp	x23, x24, [sp, #48]
    46d0:	ldp	x25, x26, [sp, #64]
    46d4:	ldp	x29, x30, [sp], #112
    46d8:	ret
    46dc:	nop

00000000000046e0 <free_fail_stack_return.part.0>:
    46e0:	stp	x29, x30, [sp, #-48]!
    46e4:	mov	x29, sp
    46e8:	stp	x19, x20, [sp, #16]
    46ec:	mov	x20, x0
    46f0:	ldr	w0, [x0]
    46f4:	cmp	w0, #0x0
    46f8:	b.le	4740 <free_fail_stack_return.part.0+0x60>
    46fc:	mov	x19, #0x0                   	// #0
    4700:	str	x21, [sp, #32]
    4704:	nop
    4708:	ldr	x2, [x20, #8]
    470c:	lsl	x21, x19, #5
    4710:	add	x19, x19, #0x1
    4714:	add	x2, x2, x21
    4718:	ldr	x0, [x2, #24]
    471c:	bl	0 <grub_free>
    4720:	ldr	x1, [x20, #8]
    4724:	add	x1, x1, x21
    4728:	ldr	x0, [x1, #8]
    472c:	bl	0 <grub_free>
    4730:	ldr	w0, [x20]
    4734:	cmp	w0, w19
    4738:	b.gt	4708 <free_fail_stack_return.part.0+0x28>
    473c:	ldr	x21, [sp, #32]
    4740:	ldr	x0, [x20, #8]
    4744:	ldp	x19, x20, [sp, #16]
    4748:	ldp	x29, x30, [sp], #48
    474c:	b	0 <grub_free>

0000000000004750 <build_collating_symbol.isra.0>:
    4750:	stp	x29, x30, [sp, #-32]!
    4754:	mov	x29, sp
    4758:	stp	x19, x20, [sp, #16]
    475c:	mov	x19, x1
    4760:	mov	x20, x0
    4764:	mov	x0, x1
    4768:	bl	0 <grub_strlen>
    476c:	cmp	x0, #0x1
    4770:	b.ne	47a0 <build_collating_symbol.isra.0+0x50>  // b.any
    4774:	ldrb	w1, [x19]
    4778:	mov	x2, x0
    477c:	mov	w0, #0x0                   	// #0
    4780:	ubfx	x3, x1, #6, #2
    4784:	lsl	x2, x2, x1
    4788:	ldr	x1, [x20, x3, lsl #3]
    478c:	orr	x2, x1, x2
    4790:	str	x2, [x20, x3, lsl #3]
    4794:	ldp	x19, x20, [sp, #16]
    4798:	ldp	x29, x30, [sp], #32
    479c:	ret
    47a0:	mov	w0, #0x3                   	// #3
    47a4:	ldp	x19, x20, [sp, #16]
    47a8:	ldp	x29, x30, [sp], #32
    47ac:	ret

00000000000047b0 <check_node_accept_bytes.isra.0>:
    47b0:	sbfiz	x7, x2, #4, #32
    47b4:	stp	x29, x30, [sp, #-80]!
    47b8:	mov	x8, x0
    47bc:	add	x0, x0, x7
    47c0:	mov	x29, sp
    47c4:	mov	x5, x3
    47c8:	stp	x19, x20, [sp, #16]
    47cc:	mov	w6, w4
    47d0:	ldrb	w10, [x0, #8]
    47d4:	cmp	w10, #0x7
    47d8:	b.eq	49a0 <check_node_accept_bytes.isra.0+0x1f0>  // b.none
    47dc:	ldr	w0, [x3, #104]
    47e0:	cmp	w0, #0x1
    47e4:	b.eq	4810 <check_node_accept_bytes.isra.0+0x60>  // b.none
    47e8:	mov	x9, x1
    47ec:	mov	x0, x3
    47f0:	mov	w1, w4
    47f4:	bl	24f8 <re_string_char_size_at.part.0>
    47f8:	mov	w19, w0
    47fc:	cmp	w10, #0x5
    4800:	b.eq	4824 <check_node_accept_bytes.isra.0+0x74>  // b.none
    4804:	cmp	w10, #0x6
    4808:	ccmp	w0, #0x1, #0x4, eq  // eq = none
    480c:	b.ne	4858 <check_node_accept_bytes.isra.0+0xa8>  // b.any
    4810:	mov	w19, #0x0                   	// #0
    4814:	mov	w0, w19
    4818:	ldp	x19, x20, [sp, #16]
    481c:	ldp	x29, x30, [sp], #80
    4820:	ret
    4824:	cmp	w0, #0x1
    4828:	b.eq	4810 <check_node_accept_bytes.isra.0+0x60>  // b.none
    482c:	ldr	x0, [x9]
    4830:	tbnz	w0, #6, 4844 <check_node_accept_bytes.isra.0+0x94>
    4834:	ldr	x1, [x5, #8]
    4838:	ldrb	w1, [x1, w6, sxtw]
    483c:	cmp	w1, #0xa
    4840:	b.eq	4810 <check_node_accept_bytes.isra.0+0x60>  // b.none
    4844:	tbz	w0, #7, 4814 <check_node_accept_bytes.isra.0+0x64>
    4848:	ldr	x0, [x5, #8]
    484c:	ldrb	w0, [x0, w6, sxtw]
    4850:	cbz	w0, 4810 <check_node_accept_bytes.isra.0+0x60>
    4854:	b	4814 <check_node_accept_bytes.isra.0+0x64>
    4858:	stp	x21, x22, [sp, #32]
    485c:	ldr	x22, [x8, x7]
    4860:	ldr	x0, [x22, #48]
    4864:	ldr	w2, [x22, #36]
    4868:	cbnz	x0, 4870 <check_node_accept_bytes.isra.0+0xc0>
    486c:	cbz	w2, 48b4 <check_node_accept_bytes.isra.0+0x104>
    4870:	ldr	x0, [x5, #16]
    4874:	cmp	w2, #0x0
    4878:	ldr	w21, [x0, w6, sxtw #2]
    487c:	b.le	48b8 <check_node_accept_bytes.isra.0+0x108>
    4880:	mov	x1, #0x0                   	// #0
    4884:	ldr	x3, [x22]
    4888:	b	4894 <check_node_accept_bytes.isra.0+0xe4>
    488c:	cmp	w2, w1
    4890:	b.le	48b8 <check_node_accept_bytes.isra.0+0x108>
    4894:	ldr	w0, [x3, x1, lsl #2]
    4898:	add	x1, x1, #0x1
    489c:	cmp	w21, w0
    48a0:	b.ne	488c <check_node_accept_bytes.isra.0+0xdc>  // b.any
    48a4:	ldrb	w0, [x22, #32]
    48a8:	tbz	w0, #0, 4998 <check_node_accept_bytes.isra.0+0x1e8>
    48ac:	ldp	x21, x22, [sp, #32]
    48b0:	b	4810 <check_node_accept_bytes.isra.0+0x60>
    48b4:	mov	w21, #0x0                   	// #0
    48b8:	ldr	w2, [x22, #52]
    48bc:	mov	x20, #0x0                   	// #0
    48c0:	cmp	w2, #0x0
    48c4:	b.le	4944 <check_node_accept_bytes.isra.0+0x194>
    48c8:	stp	x23, x24, [sp, #48]
    48cc:	and	w24, w21, #0xffffffdf
    48d0:	sub	w24, w24, #0x41
    48d4:	sub	w23, w21, #0x21
    48d8:	stp	x25, x26, [sp, #64]
    48dc:	sub	w26, w21, #0x20
    48e0:	sub	w25, w21, #0x30
    48e4:	nop
    48e8:	ldr	x0, [x22, #24]
    48ec:	ldr	w1, [x0, x20, lsl #2]
    48f0:	cmp	w1, #0x7
    48f4:	b.eq	4afc <check_node_accept_bytes.isra.0+0x34c>  // b.none
    48f8:	b.hi	4a24 <check_node_accept_bytes.isra.0+0x274>  // b.pmore
    48fc:	cmp	w1, #0x4
    4900:	b.eq	4aec <check_node_accept_bytes.isra.0+0x33c>  // b.none
    4904:	b.hi	4a70 <check_node_accept_bytes.isra.0+0x2c0>  // b.pmore
    4908:	cmp	w1, #0x2
    490c:	b.eq	4ad8 <check_node_accept_bytes.isra.0+0x328>  // b.none
    4910:	cmp	w1, #0x3
    4914:	b.ne	4a54 <check_node_accept_bytes.isra.0+0x2a4>  // b.any
    4918:	sub	w0, w21, #0x61
    491c:	cmp	w0, #0x19
    4920:	cset	w0, ls  // ls = plast
    4924:	nop
    4928:	cbnz	w0, 4a48 <check_node_accept_bytes.isra.0+0x298>
    492c:	ldr	w2, [x22, #52]
    4930:	add	x20, x20, #0x1
    4934:	cmp	w2, w20
    4938:	b.gt	48e8 <check_node_accept_bytes.isra.0+0x138>
    493c:	ldp	x23, x24, [sp, #48]
    4940:	ldp	x25, x26, [sp, #64]
    4944:	ldr	w0, [x22, #48]
    4948:	cmp	w0, #0x0
    494c:	b.le	4990 <check_node_accept_bytes.isra.0+0x1e0>
    4950:	sub	w2, w0, #0x1
    4954:	mov	x0, #0x0                   	// #0
    4958:	add	x2, x2, #0x1
    495c:	ldr	x3, [x22, #8]
    4960:	lsl	x2, x2, #2
    4964:	nop
    4968:	ldr	w1, [x3, x0]
    496c:	cmp	w21, w1
    4970:	b.lt	4984 <check_node_accept_bytes.isra.0+0x1d4>  // b.tstop
    4974:	ldr	x1, [x22, #16]
    4978:	ldr	w1, [x1, x0]
    497c:	cmp	w21, w1
    4980:	b.le	48a4 <check_node_accept_bytes.isra.0+0xf4>
    4984:	add	x0, x0, #0x4
    4988:	cmp	x2, x0
    498c:	b.ne	4968 <check_node_accept_bytes.isra.0+0x1b8>  // b.any
    4990:	ldrb	w0, [x22, #32]
    4994:	tbz	w0, #0, 48ac <check_node_accept_bytes.isra.0+0xfc>
    4998:	ldp	x21, x22, [sp, #32]
    499c:	b	4814 <check_node_accept_bytes.isra.0+0x64>
    49a0:	ldr	x0, [x3, #8]
    49a4:	ldrb	w1, [x0, w4, sxtw]
    49a8:	add	x0, x0, w4, sxtw
    49ac:	cmp	w1, #0xc1
    49b0:	b.ls	4810 <check_node_accept_bytes.isra.0+0x60>  // b.plast
    49b4:	ldr	w2, [x5, #64]
    49b8:	add	w3, w4, #0x1
    49bc:	cmp	w3, w2
    49c0:	b.ge	4810 <check_node_accept_bytes.isra.0+0x60>  // b.tcont
    49c4:	ldrb	w3, [x0, #1]
    49c8:	cmp	w1, #0xdf
    49cc:	b.ls	4b40 <check_node_accept_bytes.isra.0+0x390>  // b.plast
    49d0:	cmp	w1, #0xef
    49d4:	b.hi	4b58 <check_node_accept_bytes.isra.0+0x3a8>  // b.pmore
    49d8:	cmp	w1, #0xe0
    49dc:	mov	w19, #0x3                   	// #3
    49e0:	mov	w1, #0x9f                  	// #159
    49e4:	ccmp	w3, w1, #0x2, eq  // eq = none
    49e8:	b.ls	4810 <check_node_accept_bytes.isra.0+0x60>  // b.plast
    49ec:	add	w6, w6, w19
    49f0:	cmp	w2, w6
    49f4:	b.lt	4810 <check_node_accept_bytes.isra.0+0x60>  // b.tstop
    49f8:	mov	x2, #0x1                   	// #1
    49fc:	b	4a08 <check_node_accept_bytes.isra.0+0x258>
    4a00:	cmp	w19, w2
    4a04:	b.le	4814 <check_node_accept_bytes.isra.0+0x64>
    4a08:	ldrb	w1, [x0, x2]
    4a0c:	add	x2, x2, #0x1
    4a10:	sub	w1, w1, #0x80
    4a14:	and	w1, w1, #0xff
    4a18:	cmp	w1, #0x3f
    4a1c:	b.ls	4a00 <check_node_accept_bytes.isra.0+0x250>  // b.plast
    4a20:	b	4810 <check_node_accept_bytes.isra.0+0x60>
    4a24:	cmp	w1, #0xa
    4a28:	b.eq	4ab4 <check_node_accept_bytes.isra.0+0x304>  // b.none
    4a2c:	b.ls	4a90 <check_node_accept_bytes.isra.0+0x2e0>  // b.plast
    4a30:	cmp	w1, #0xb
    4a34:	b.eq	4b0c <check_node_accept_bytes.isra.0+0x35c>  // b.none
    4a38:	cmp	w1, #0xc
    4a3c:	b.ne	4930 <check_node_accept_bytes.isra.0+0x180>  // b.any
    4a40:	cmp	w25, #0x9
    4a44:	b.hi	4b34 <check_node_accept_bytes.isra.0+0x384>  // b.pmore
    4a48:	ldp	x23, x24, [sp, #48]
    4a4c:	ldp	x25, x26, [sp, #64]
    4a50:	b	48a4 <check_node_accept_bytes.isra.0+0xf4>
    4a54:	cmp	w1, #0x1
    4a58:	b.ne	4930 <check_node_accept_bytes.isra.0+0x180>  // b.any
    4a5c:	cmp	w24, #0x19
    4a60:	b.ls	4a48 <check_node_accept_bytes.isra.0+0x298>  // b.plast
    4a64:	cmp	w25, #0x9
    4a68:	b.ls	4a48 <check_node_accept_bytes.isra.0+0x298>  // b.plast
    4a6c:	b	4930 <check_node_accept_bytes.isra.0+0x180>
    4a70:	cmp	w25, #0x9
    4a74:	cset	w0, ls  // ls = plast
    4a78:	cmp	w1, #0x5
    4a7c:	b.ne	4928 <check_node_accept_bytes.isra.0+0x178>  // b.any
    4a80:	cmp	w24, #0x19
    4a84:	cset	w0, ls  // ls = plast
    4a88:	cbz	w0, 492c <check_node_accept_bytes.isra.0+0x17c>
    4a8c:	b	4a48 <check_node_accept_bytes.isra.0+0x298>
    4a90:	cmp	w1, #0x8
    4a94:	b.eq	4ac4 <check_node_accept_bytes.isra.0+0x314>  // b.none
    4a98:	cmp	w1, #0x9
    4a9c:	b.ne	4930 <check_node_accept_bytes.isra.0+0x180>  // b.any
    4aa0:	cmp	w21, #0x20
    4aa4:	ccmp	w21, #0x9, #0x4, ne  // ne = any
    4aa8:	cset	w0, eq  // eq = none
    4aac:	cbz	w0, 492c <check_node_accept_bytes.isra.0+0x17c>
    4ab0:	b	4a48 <check_node_accept_bytes.isra.0+0x298>
    4ab4:	cmp	w23, #0x5d
    4ab8:	cset	w0, ls  // ls = plast
    4abc:	cbz	w0, 492c <check_node_accept_bytes.isra.0+0x17c>
    4ac0:	b	4a48 <check_node_accept_bytes.isra.0+0x298>
    4ac4:	sub	w0, w21, #0x41
    4ac8:	cmp	w0, #0x19
    4acc:	cset	w0, ls  // ls = plast
    4ad0:	cbz	w0, 492c <check_node_accept_bytes.isra.0+0x17c>
    4ad4:	b	4a48 <check_node_accept_bytes.isra.0+0x298>
    4ad8:	cmp	w21, #0x7f
    4adc:	ccmp	w21, #0x1f, #0x0, ne  // ne = any
    4ae0:	cset	w0, ls  // ls = plast
    4ae4:	cbz	w0, 492c <check_node_accept_bytes.isra.0+0x17c>
    4ae8:	b	4a48 <check_node_accept_bytes.isra.0+0x298>
    4aec:	mov	w0, w21
    4af0:	bl	0 <grub_isspace>
    4af4:	cbz	w0, 492c <check_node_accept_bytes.isra.0+0x17c>
    4af8:	b	4a48 <check_node_accept_bytes.isra.0+0x298>
    4afc:	cmp	w26, #0x5e
    4b00:	cset	w0, ls  // ls = plast
    4b04:	cbz	w0, 492c <check_node_accept_bytes.isra.0+0x17c>
    4b08:	b	4a48 <check_node_accept_bytes.isra.0+0x298>
    4b0c:	cmp	w26, #0x5e
    4b10:	b.hi	4930 <check_node_accept_bytes.isra.0+0x180>  // b.pmore
    4b14:	mov	w0, w21
    4b18:	bl	0 <grub_isspace>
    4b1c:	cbnz	w0, 492c <check_node_accept_bytes.isra.0+0x17c>
    4b20:	cmp	w24, #0x19
    4b24:	b.ls	492c <check_node_accept_bytes.isra.0+0x17c>  // b.plast
    4b28:	cmp	w25, #0x9
    4b2c:	b.hi	4a48 <check_node_accept_bytes.isra.0+0x298>  // b.pmore
    4b30:	b	492c <check_node_accept_bytes.isra.0+0x17c>
    4b34:	cmp	w24, #0x5
    4b38:	b.ls	4a48 <check_node_accept_bytes.isra.0+0x298>  // b.plast
    4b3c:	b	4930 <check_node_accept_bytes.isra.0+0x180>
    4b40:	sub	w0, w3, #0x80
    4b44:	mov	w19, #0x2                   	// #2
    4b48:	and	w0, w0, #0xff
    4b4c:	cmp	w0, #0x3f
    4b50:	b.ls	4814 <check_node_accept_bytes.isra.0+0x64>  // b.plast
    4b54:	b	4810 <check_node_accept_bytes.isra.0+0x60>
    4b58:	cmp	w1, #0xf7
    4b5c:	b.hi	4b78 <check_node_accept_bytes.isra.0+0x3c8>  // b.pmore
    4b60:	cmp	w1, #0xf0
    4b64:	mov	w19, #0x4                   	// #4
    4b68:	mov	w1, #0x8f                  	// #143
    4b6c:	ccmp	w3, w1, #0x2, eq  // eq = none
    4b70:	b.hi	49ec <check_node_accept_bytes.isra.0+0x23c>  // b.pmore
    4b74:	b	4810 <check_node_accept_bytes.isra.0+0x60>
    4b78:	cmp	w1, #0xfb
    4b7c:	b.hi	4b98 <check_node_accept_bytes.isra.0+0x3e8>  // b.pmore
    4b80:	cmp	w1, #0xf8
    4b84:	mov	w1, #0x87                  	// #135
    4b88:	ccmp	w3, w1, #0x2, eq  // eq = none
    4b8c:	b.ls	4810 <check_node_accept_bytes.isra.0+0x60>  // b.plast
    4b90:	mov	w19, #0x5                   	// #5
    4b94:	b	49ec <check_node_accept_bytes.isra.0+0x23c>
    4b98:	cmp	w1, #0xfd
    4b9c:	b.hi	4810 <check_node_accept_bytes.isra.0+0x60>  // b.pmore
    4ba0:	cmp	w1, #0xfc
    4ba4:	mov	w1, #0x83                  	// #131
    4ba8:	ccmp	w3, w1, #0x2, eq  // eq = none
    4bac:	b.ls	4810 <check_node_accept_bytes.isra.0+0x60>  // b.plast
    4bb0:	mov	w19, #0x6                   	// #6
    4bb4:	b	49ec <check_node_accept_bytes.isra.0+0x23c>

0000000000004bb8 <check_arrival>:
    4bb8:	stp	x29, x30, [sp, #-208]!
    4bbc:	mov	x29, sp
    4bc0:	stp	x27, x28, [sp, #80]
    4bc4:	mov	x27, x0
    4bc8:	ldr	x28, [x0, #112]
    4bcc:	stp	x21, x22, [sp, #32]
    4bd0:	ldr	w22, [x1, #4]
    4bd4:	mov	w21, w2
    4bd8:	str	x1, [sp, #136]
    4bdc:	sbfiz	x1, x2, #4, #32
    4be0:	ldr	w0, [x0, #168]
    4be4:	ldr	x2, [x28]
    4be8:	stp	x19, x20, [sp, #16]
    4bec:	add	w0, w5, w0
    4bf0:	stp	x23, x24, [sp, #48]
    4bf4:	mov	w20, w3
    4bf8:	ldr	w1, [x2, x1]
    4bfc:	str	w5, [sp, #124]
    4c00:	cmp	w0, w22
    4c04:	str	w1, [sp, #128]
    4c08:	str	w6, [sp, #132]
    4c0c:	str	w4, [sp, #156]
    4c10:	str	wzr, [sp, #168]
    4c14:	b.ge	5068 <check_arrival+0x4b0>  // b.tcont
    4c18:	stp	x25, x26, [sp, #64]
    4c1c:	ldr	w2, [x27, #120]
    4c20:	ldr	x0, [sp, #136]
    4c24:	ldr	w22, [x0]
    4c28:	ldr	x5, [x0, #8]
    4c2c:	ldr	w0, [x27, #56]
    4c30:	str	w0, [sp, #152]
    4c34:	ldr	x0, [x27, #136]
    4c38:	str	x0, [sp, #144]
    4c3c:	cbz	w22, 500c <check_arrival+0x454>
    4c40:	str	w22, [x27, #56]
    4c44:	sub	w1, w22, #0x1
    4c48:	str	x5, [x27, #136]
    4c4c:	mov	x0, x27
    4c50:	bl	29d8 <re_string_context_at>
    4c54:	mov	w19, w0
    4c58:	cmp	w22, w20
    4c5c:	b.eq	5024 <check_arrival+0x46c>  // b.none
    4c60:	sxtw	x24, w22
    4c64:	ldr	x20, [x5, x24, lsl #3]
    4c68:	cbz	x20, 50b8 <check_arrival+0x500>
    4c6c:	ldrb	w0, [x20, #80]
    4c70:	add	x25, sp, #0xb0
    4c74:	tbnz	w0, #6, 4f08 <check_arrival+0x350>
    4c78:	mov	x0, x25
    4c7c:	mov	x2, #0x10                  	// #16
    4c80:	mov	w1, #0x0                   	// #0
    4c84:	bl	0 <grub_memset>
    4c88:	ldrb	w0, [x20, #80]
    4c8c:	tbz	w0, #6, 4cdc <check_arrival+0x124>
    4c90:	ldr	w0, [sp, #180]
    4c94:	cbz	w0, 4cb4 <check_arrival+0xfc>
    4c98:	ldp	w3, w4, [sp, #128]
    4c9c:	mov	w2, w22
    4ca0:	mov	x1, x25
    4ca4:	mov	x0, x27
    4ca8:	bl	3d80 <expand_bkref_cache>
    4cac:	str	w0, [sp, #168]
    4cb0:	cbnz	w0, 4ee0 <check_arrival+0x328>
    4cb4:	mov	w3, w19
    4cb8:	mov	x2, x25
    4cbc:	mov	x1, x28
    4cc0:	add	x0, sp, #0xa8
    4cc4:	bl	3768 <re_acquire_state_context>
    4cc8:	mov	x20, x0
    4ccc:	cbz	x0, 50d0 <check_arrival+0x518>
    4cd0:	ldr	x0, [x27, #136]
    4cd4:	sxtw	x24, w22
    4cd8:	str	x20, [x0, x24, lsl #3]
    4cdc:	ldr	w0, [sp, #124]
    4ce0:	cmp	w22, w0
    4ce4:	b.ge	4e70 <check_arrival+0x2b8>  // b.tcont
    4ce8:	add	x24, x24, #0x1
    4cec:	mov	w21, w22
    4cf0:	str	wzr, [sp, #120]
    4cf4:	lsl	x0, x24, #3
    4cf8:	str	x0, [sp, #104]
    4cfc:	ldr	w0, [x27, #168]
    4d00:	mov	w22, w21
    4d04:	ldr	w1, [sp, #120]
    4d08:	cmp	w1, w0
    4d0c:	b.gt	4e70 <check_arrival+0x2b8>
    4d10:	ldr	x1, [sp, #104]
    4d14:	ldr	x0, [x27, #136]
    4d18:	ldr	x1, [x0, x1]
    4d1c:	str	wzr, [sp, #180]
    4d20:	cbz	x1, 4fe0 <check_arrival+0x428>
    4d24:	add	x1, x1, #0x8
    4d28:	mov	x0, x25
    4d2c:	bl	3218 <re_node_set_merge>
    4d30:	str	w0, [sp, #168]
    4d34:	cbnz	w0, 4ee0 <check_arrival+0x328>
    4d38:	cbz	x20, 4ddc <check_arrival+0x224>
    4d3c:	ldr	x22, [x27, #112]
    4d40:	mov	w1, #0x0                   	// #0
    4d44:	add	x0, sp, #0xc0
    4d48:	mov	x2, #0x10                  	// #16
    4d4c:	str	wzr, [sp, #172]
    4d50:	bl	0 <grub_memset>
    4d54:	ldr	w0, [x20, #28]
    4d58:	add	x1, x22, #0xc8
    4d5c:	str	x1, [sp, #112]
    4d60:	mov	x23, #0x0                   	// #0
    4d64:	cmp	w0, #0x0
    4d68:	b.le	4dd0 <check_arrival+0x218>
    4d6c:	nop
    4d70:	ldr	x1, [x20, #32]
    4d74:	ldr	x0, [x22]
    4d78:	ldr	w2, [x1, x23, lsl #2]
    4d7c:	sbfiz	x19, x2, #4, #32
    4d80:	sxtw	x26, w2
    4d84:	add	x1, x0, x19
    4d88:	ldrb	w3, [x1, #10]
    4d8c:	tbnz	w3, #4, 4f24 <check_arrival+0x36c>
    4d90:	mov	w2, w21
    4d94:	mov	x0, x27
    4d98:	bl	2ab8 <check_node_accept>
    4d9c:	tst	w0, #0xff
    4da0:	b.eq	4dc0 <check_arrival+0x208>  // b.none
    4da4:	lsl	x24, x26, #2
    4da8:	ldr	x1, [x22, #24]
    4dac:	mov	x0, x25
    4db0:	ldr	w1, [x1, x24]
    4db4:	bl	19d0 <re_node_set_insert>
    4db8:	tst	w0, #0xff
    4dbc:	b.eq	4ed0 <check_arrival+0x318>  // b.none
    4dc0:	ldr	w0, [x20, #28]
    4dc4:	add	x23, x23, #0x1
    4dc8:	cmp	w0, w23
    4dcc:	b.gt	4d70 <check_arrival+0x1b8>
    4dd0:	ldr	x0, [sp, #200]
    4dd4:	bl	0 <grub_free>
    4dd8:	str	wzr, [sp, #168]
    4ddc:	ldr	w0, [sp, #180]
    4de0:	add	w22, w21, #0x1
    4de4:	cbz	w0, 4e1c <check_arrival+0x264>
    4de8:	ldp	w2, w3, [sp, #128]
    4dec:	mov	x1, x25
    4df0:	mov	x0, x28
    4df4:	bl	33d8 <check_arrival_expand_ecl>
    4df8:	str	w0, [sp, #168]
    4dfc:	cbnz	w0, 4ee0 <check_arrival+0x328>
    4e00:	ldp	w3, w4, [sp, #128]
    4e04:	mov	w2, w22
    4e08:	mov	x1, x25
    4e0c:	mov	x0, x27
    4e10:	bl	3d80 <expand_bkref_cache>
    4e14:	str	w0, [sp, #168]
    4e18:	cbnz	w0, 4ee0 <check_arrival+0x328>
    4e1c:	ldr	w2, [x27, #120]
    4e20:	mov	w1, w21
    4e24:	mov	x0, x27
    4e28:	bl	29d8 <re_string_context_at>
    4e2c:	mov	w3, w0
    4e30:	mov	x2, x25
    4e34:	mov	x1, x28
    4e38:	add	x0, sp, #0xa8
    4e3c:	bl	3768 <re_acquire_state_context>
    4e40:	mov	x20, x0
    4e44:	cbz	x0, 4fec <check_arrival+0x434>
    4e48:	ldr	x0, [x27, #136]
    4e4c:	str	wzr, [sp, #120]
    4e50:	str	x20, [x0, w22, sxtw #3]
    4e54:	ldr	x0, [sp, #104]
    4e58:	mov	w21, w22
    4e5c:	add	x0, x0, #0x8
    4e60:	str	x0, [sp, #104]
    4e64:	ldr	w0, [sp, #124]
    4e68:	cmp	w22, w0
    4e6c:	b.lt	4cfc <check_arrival+0x144>  // b.tstop
    4e70:	ldr	x0, [sp, #184]
    4e74:	bl	0 <grub_free>
    4e78:	ldr	w1, [sp, #124]
    4e7c:	ldr	x0, [x27, #136]
    4e80:	ldr	x0, [x0, w1, sxtw #3]
    4e84:	cbz	x0, 50e8 <check_arrival+0x530>
    4e88:	ldp	x1, x3, [sp, #136]
    4e8c:	str	w22, [x1]
    4e90:	ldr	w1, [sp, #152]
    4e94:	str	w1, [x27, #56]
    4e98:	add	x1, x0, #0x10
    4e9c:	ldr	w2, [sp, #156]
    4ea0:	ldr	w0, [x0, #12]
    4ea4:	str	x3, [x27, #136]
    4ea8:	bl	2548 <re_node_set_contains.isra.0>
    4eac:	cmp	w0, #0x0
    4eb0:	cset	w0, eq  // eq = none
    4eb4:	ldp	x19, x20, [sp, #16]
    4eb8:	ldp	x21, x22, [sp, #32]
    4ebc:	ldp	x23, x24, [sp, #48]
    4ec0:	ldp	x25, x26, [sp, #64]
    4ec4:	ldp	x27, x28, [sp, #80]
    4ec8:	ldp	x29, x30, [sp], #208
    4ecc:	ret
    4ed0:	ldr	x0, [sp, #200]
    4ed4:	bl	0 <grub_free>
    4ed8:	mov	w0, #0xc                   	// #12
    4edc:	str	w0, [sp, #168]
    4ee0:	ldr	x0, [sp, #184]
    4ee4:	bl	0 <grub_free>
    4ee8:	ldp	x25, x26, [sp, #64]
    4eec:	ldr	w0, [sp, #168]
    4ef0:	ldp	x19, x20, [sp, #16]
    4ef4:	ldp	x21, x22, [sp, #32]
    4ef8:	ldp	x23, x24, [sp, #48]
    4efc:	ldp	x27, x28, [sp, #80]
    4f00:	ldp	x29, x30, [sp], #208
    4f04:	ret
    4f08:	add	x1, x20, #0x8
    4f0c:	mov	x0, x25
    4f10:	bl	3528 <re_node_set_init_copy>
    4f14:	str	w0, [sp, #168]
    4f18:	cbz	w0, 4c88 <check_arrival+0xd0>
    4f1c:	ldp	x25, x26, [sp, #64]
    4f20:	b	4ef0 <check_arrival+0x338>
    4f24:	ldr	x1, [sp, #112]
    4f28:	mov	w4, w21
    4f2c:	mov	x3, x27
    4f30:	bl	47b0 <check_node_accept_bytes.isra.0>
    4f34:	cmp	w0, #0x1
    4f38:	b.le	4fd0 <check_arrival+0x418>
    4f3c:	add	w0, w21, w0
    4f40:	lsl	x24, x26, #2
    4f44:	ldr	x1, [x27, #136]
    4f48:	sxtw	x19, w0
    4f4c:	ldr	x0, [x22, #24]
    4f50:	ldr	x1, [x1, x19, lsl #3]
    4f54:	ldr	w26, [x0, x26, lsl #2]
    4f58:	str	wzr, [sp, #196]
    4f5c:	cbz	x1, 4f74 <check_arrival+0x3bc>
    4f60:	add	x1, x1, #0x8
    4f64:	add	x0, sp, #0xc0
    4f68:	bl	3218 <re_node_set_merge>
    4f6c:	str	w0, [sp, #172]
    4f70:	cbnz	w0, 4fb8 <check_arrival+0x400>
    4f74:	mov	w1, w26
    4f78:	add	x0, sp, #0xc0
    4f7c:	bl	19d0 <re_node_set_insert>
    4f80:	tst	w0, #0xff
    4f84:	b.eq	4ed0 <check_arrival+0x318>  // b.none
    4f88:	ldr	x26, [x27, #136]
    4f8c:	mov	x1, x22
    4f90:	add	x2, sp, #0xc0
    4f94:	add	x0, sp, #0xac
    4f98:	bl	3a78 <re_acquire_state>
    4f9c:	ldr	x1, [x27, #136]
    4fa0:	str	x0, [x26, x19, lsl #3]
    4fa4:	ldr	x0, [x1, x19, lsl #3]
    4fa8:	cbnz	x0, 4da8 <check_arrival+0x1f0>
    4fac:	ldr	w0, [sp, #172]
    4fb0:	cbz	w0, 4da8 <check_arrival+0x1f0>
    4fb4:	nop
    4fb8:	ldr	x0, [sp, #200]
    4fbc:	bl	0 <grub_free>
    4fc0:	ldr	w0, [sp, #172]
    4fc4:	str	w0, [sp, #168]
    4fc8:	cbz	w0, 4ddc <check_arrival+0x224>
    4fcc:	b	4ee0 <check_arrival+0x328>
    4fd0:	cbnz	w0, 4da4 <check_arrival+0x1ec>
    4fd4:	ldr	x1, [x22]
    4fd8:	add	x1, x1, x19
    4fdc:	b	4d90 <check_arrival+0x1d8>
    4fe0:	cbnz	x20, 4d3c <check_arrival+0x184>
    4fe4:	add	w22, w21, #0x1
    4fe8:	b	4e1c <check_arrival+0x264>
    4fec:	ldr	w0, [sp, #168]
    4ff0:	cbnz	w0, 4ee0 <check_arrival+0x328>
    4ff4:	ldr	x0, [x27, #136]
    4ff8:	ldr	w1, [sp, #120]
    4ffc:	add	w1, w1, #0x1
    5000:	str	xzr, [x0, w22, sxtw #3]
    5004:	str	w1, [sp, #120]
    5008:	b	4e54 <check_arrival+0x29c>
    500c:	str	w20, [x27, #56]
    5010:	sub	w1, w20, #0x1
    5014:	str	x5, [x27, #136]
    5018:	mov	x0, x27
    501c:	bl	29d8 <re_string_context_at>
    5020:	mov	w19, w0
    5024:	mov	x1, #0x100000001           	// #4294967297
    5028:	mov	x0, #0x4                   	// #4
    502c:	str	x1, [sp, #176]
    5030:	bl	0 <grub_malloc>
    5034:	str	x0, [sp, #184]
    5038:	cbz	x0, 50dc <check_arrival+0x524>
    503c:	ldp	w2, w3, [sp, #128]
    5040:	str	w21, [x0]
    5044:	add	x25, sp, #0xb0
    5048:	mov	x0, x28
    504c:	mov	x1, x25
    5050:	str	wzr, [sp, #168]
    5054:	bl	33d8 <check_arrival_expand_ecl>
    5058:	str	w0, [sp, #168]
    505c:	mov	w22, w20
    5060:	cbz	w0, 4c90 <check_arrival+0xd8>
    5064:	b	4ee0 <check_arrival+0x328>
    5068:	add	w19, w0, #0x1
    506c:	mov	w0, #0x7fffffff            	// #2147483647
    5070:	sub	w0, w0, w22
    5074:	cmp	w0, w19
    5078:	b.lt	50e0 <check_arrival+0x528>  // b.tstop
    507c:	adds	w23, w22, w19
    5080:	b.mi	50e0 <check_arrival+0x528>  // b.first
    5084:	ldr	x24, [sp, #136]
    5088:	sbfiz	x1, x23, #3, #32
    508c:	ldr	x0, [x24, #8]
    5090:	bl	0 <grub_realloc>
    5094:	cbz	x0, 50e0 <check_arrival+0x528>
    5098:	stp	x25, x26, [sp, #64]
    509c:	sbfiz	x2, x19, #3, #32
    50a0:	mov	w1, #0x0                   	// #0
    50a4:	str	w23, [x24, #4]
    50a8:	str	x0, [x24, #8]
    50ac:	add	x0, x0, w22, sxtw #3
    50b0:	bl	0 <grub_memset>
    50b4:	b	4c1c <check_arrival+0x64>
    50b8:	add	x25, sp, #0xb0
    50bc:	mov	x2, #0x10                  	// #16
    50c0:	mov	x0, x25
    50c4:	mov	w1, #0x0                   	// #0
    50c8:	bl	0 <grub_memset>
    50cc:	b	4cdc <check_arrival+0x124>
    50d0:	ldr	w0, [sp, #168]
    50d4:	cbz	w0, 4cd0 <check_arrival+0x118>
    50d8:	b	4ee0 <check_arrival+0x328>
    50dc:	ldp	x25, x26, [sp, #64]
    50e0:	mov	w0, #0xc                   	// #12
    50e4:	b	4ef0 <check_arrival+0x338>
    50e8:	ldr	x0, [sp, #136]
    50ec:	ldr	w1, [sp, #152]
    50f0:	ldp	x25, x26, [sp, #64]
    50f4:	str	w22, [x0]
    50f8:	str	w1, [x27, #56]
    50fc:	mov	w0, #0x1                   	// #1
    5100:	ldr	x1, [sp, #144]
    5104:	str	x1, [x27, #136]
    5108:	b	4ef0 <check_arrival+0x338>
    510c:	nop

0000000000005110 <sift_states_backward>:
    5110:	stp	x29, x30, [sp, #-160]!
    5114:	mov	x29, sp
    5118:	stp	x21, x22, [sp, #32]
    511c:	mov	x21, x1
    5120:	mov	x1, #0x100000001           	// #4294967297
    5124:	stp	x19, x20, [sp, #16]
    5128:	mov	x20, x0
    512c:	mov	x0, #0x4                   	// #4
    5130:	ldp	w22, w19, [x21, #16]
    5134:	str	x1, [sp, #144]
    5138:	bl	0 <grub_malloc>
    513c:	str	x0, [sp, #152]
    5140:	cbz	x0, 53b8 <sift_states_backward+0x2a8>
    5144:	str	w22, [x0]
    5148:	add	x3, sp, #0x90
    514c:	mov	w2, w19
    5150:	mov	x1, x21
    5154:	mov	x0, x20
    5158:	bl	53d8 <update_cur_sifted_state>
    515c:	cbnz	w0, 53d0 <sift_states_backward+0x2c0>
    5160:	add	x0, x21, #0x20
    5164:	stp	x23, x24, [sp, #48]
    5168:	sbfiz	x23, x19, #3, #32
    516c:	stp	x25, x26, [sp, #64]
    5170:	stp	x27, x28, [sp, #80]
    5174:	mov	w28, #0x0                   	// #0
    5178:	str	x0, [sp, #128]
    517c:	add	x0, x21, #0x1c
    5180:	str	x0, [sp, #136]
    5184:	cmp	w19, #0x0
    5188:	b.le	536c <sift_states_backward+0x25c>
    518c:	ldr	x0, [x21]
    5190:	ldr	w1, [x20, #168]
    5194:	ldr	x2, [x0, x23]
    5198:	cmp	x2, #0x0
    519c:	csinc	w28, wzr, w28, ne  // ne = any
    51a0:	cmp	w1, w28
    51a4:	b.lt	5380 <sift_states_backward+0x270>  // b.tstop
    51a8:	ldr	x0, [x20, #136]
    51ac:	sub	w19, w19, #0x1
    51b0:	add	x0, x0, x23
    51b4:	ldur	x26, [x0, #-8]
    51b8:	str	wzr, [sp, #148]
    51bc:	cbz	x26, 531c <sift_states_backward+0x20c>
    51c0:	ldr	w0, [x26, #28]
    51c4:	ldr	x24, [x20, #112]
    51c8:	cmp	w0, #0x0
    51cc:	b.le	531c <sift_states_backward+0x20c>
    51d0:	mov	x25, #0x0                   	// #0
    51d4:	b	5268 <sift_states_backward+0x158>
    51d8:	mov	w2, w19
    51dc:	mov	x0, x20
    51e0:	bl	2ab8 <check_node_accept>
    51e4:	tst	w0, #0xff
    51e8:	b.eq	5258 <sift_states_backward+0x148>  // b.none
    51ec:	ldr	x0, [x21]
    51f0:	ldr	x0, [x0, x23]
    51f4:	cbz	x0, 5258 <sift_states_backward+0x148>
    51f8:	ldr	x2, [x24, #24]
    51fc:	add	x1, x0, #0x10
    5200:	ldr	w0, [x0, #12]
    5204:	ldr	w2, [x2, x27, lsl #2]
    5208:	bl	2548 <re_node_set_contains.isra.0>
    520c:	cbz	w0, 5258 <sift_states_backward+0x148>
    5210:	mov	w6, #0x1                   	// #1
    5214:	ldr	w0, [x21, #28]
    5218:	cbz	w0, 5244 <sift_states_backward+0x134>
    521c:	ldr	x0, [x24, #24]
    5220:	add	w4, w19, w6
    5224:	ldp	x2, x1, [sp, #128]
    5228:	mov	w6, w19
    522c:	ldr	w3, [x0, x27, lsl #2]
    5230:	mov	w5, w22
    5234:	mov	x0, x20
    5238:	bl	2820 <check_dst_limits.isra.0>
    523c:	tst	w0, #0xff
    5240:	b.ne	5258 <sift_states_backward+0x148>  // b.any
    5244:	mov	w1, w22
    5248:	add	x0, sp, #0x90
    524c:	bl	19d0 <re_node_set_insert>
    5250:	tst	w0, #0xff
    5254:	b.eq	5364 <sift_states_backward+0x254>  // b.none
    5258:	ldr	w0, [x26, #28]
    525c:	add	x25, x25, #0x1
    5260:	cmp	w0, w25
    5264:	b.le	531c <sift_states_backward+0x20c>
    5268:	ldr	x0, [x26, #32]
    526c:	ldr	x1, [x24]
    5270:	ldr	w22, [x0, x25, lsl #2]
    5274:	sbfiz	x5, x22, #4, #32
    5278:	sxtw	x27, w22
    527c:	add	x1, x1, x5
    5280:	ldrb	w0, [x1, #10]
    5284:	tbz	w0, #4, 51d8 <sift_states_backward+0xc8>
    5288:	ldr	x7, [x20, #112]
    528c:	mov	w4, w19
    5290:	ldr	w8, [x21, #20]
    5294:	mov	x3, x20
    5298:	mov	x1, x7
    529c:	mov	w2, w22
    52a0:	str	w8, [sp, #104]
    52a4:	stp	x5, x7, [sp, #112]
    52a8:	ldr	x0, [x1], #200
    52ac:	bl	47b0 <check_node_accept_bytes.isra.0>
    52b0:	mov	w6, w0
    52b4:	cmp	w0, #0x0
    52b8:	ldr	x5, [sp, #112]
    52bc:	b.le	530c <sift_states_backward+0x1fc>
    52c0:	ldr	w8, [sp, #104]
    52c4:	add	w0, w19, w0
    52c8:	cmp	w8, w0
    52cc:	b.lt	5214 <sift_states_backward+0x104>  // b.tstop
    52d0:	ldr	x1, [x21]
    52d4:	ldr	x7, [sp, #120]
    52d8:	ldr	x0, [x1, w0, sxtw #3]
    52dc:	cbz	x0, 5310 <sift_states_backward+0x200>
    52e0:	ldr	x2, [x7, #24]
    52e4:	add	x1, x0, #0x10
    52e8:	ldr	w0, [x0, #12]
    52ec:	str	x5, [sp, #104]
    52f0:	ldr	w2, [x2, x27, lsl #2]
    52f4:	bl	2548 <re_node_set_contains.isra.0>
    52f8:	cbnz	w0, 5214 <sift_states_backward+0x104>
    52fc:	ldr	x1, [x24]
    5300:	ldr	x5, [sp, #104]
    5304:	add	x1, x1, x5
    5308:	b	51d8 <sift_states_backward+0xc8>
    530c:	b.ne	5214 <sift_states_backward+0x104>  // b.any
    5310:	ldr	x1, [x24]
    5314:	add	x1, x1, x5
    5318:	b	51d8 <sift_states_backward+0xc8>
    531c:	add	x3, sp, #0x90
    5320:	mov	w2, w19
    5324:	mov	x1, x21
    5328:	mov	x0, x20
    532c:	sub	x23, x23, #0x8
    5330:	bl	53d8 <update_cur_sifted_state>
    5334:	mov	w22, w0
    5338:	cbz	w0, 5184 <sift_states_backward+0x74>
    533c:	ldp	x23, x24, [sp, #48]
    5340:	ldp	x25, x26, [sp, #64]
    5344:	ldp	x27, x28, [sp, #80]
    5348:	ldr	x0, [sp, #152]
    534c:	bl	0 <grub_free>
    5350:	mov	w0, w22
    5354:	ldp	x19, x20, [sp, #16]
    5358:	ldp	x21, x22, [sp, #32]
    535c:	ldp	x29, x30, [sp], #160
    5360:	ret
    5364:	mov	w22, #0xc                   	// #12
    5368:	b	533c <sift_states_backward+0x22c>
    536c:	mov	w22, #0x0                   	// #0
    5370:	ldp	x23, x24, [sp, #48]
    5374:	ldp	x25, x26, [sp, #64]
    5378:	ldp	x27, x28, [sp, #80]
    537c:	b	5348 <sift_states_backward+0x238>
    5380:	mov	x2, x23
    5384:	mov	w1, #0x0                   	// #0
    5388:	bl	0 <grub_memset>
    538c:	mov	w22, #0x0                   	// #0
    5390:	ldr	x0, [sp, #152]
    5394:	bl	0 <grub_free>
    5398:	mov	w0, w22
    539c:	ldp	x19, x20, [sp, #16]
    53a0:	ldp	x21, x22, [sp, #32]
    53a4:	ldp	x23, x24, [sp, #48]
    53a8:	ldp	x25, x26, [sp, #64]
    53ac:	ldp	x27, x28, [sp, #80]
    53b0:	ldp	x29, x30, [sp], #160
    53b4:	ret
    53b8:	mov	w22, #0xc                   	// #12
    53bc:	mov	w0, w22
    53c0:	ldp	x19, x20, [sp, #16]
    53c4:	ldp	x21, x22, [sp, #32]
    53c8:	ldp	x29, x30, [sp], #160
    53cc:	ret
    53d0:	mov	w22, w0
    53d4:	b	5348 <sift_states_backward+0x238>

00000000000053d8 <update_cur_sifted_state>:
    53d8:	stp	x29, x30, [sp, #-224]!
    53dc:	mov	x29, sp
    53e0:	stp	x19, x20, [sp, #16]
    53e4:	mov	x20, x0
    53e8:	ldr	x0, [x0, #136]
    53ec:	stp	x21, x22, [sp, #32]
    53f0:	sxtw	x21, w2
    53f4:	stp	x23, x24, [sp, #48]
    53f8:	sbfiz	x2, x21, #3, #32
    53fc:	ldr	x23, [x0, x21, lsl #3]
    5400:	stp	x25, x26, [sp, #64]
    5404:	mov	x26, x3
    5408:	stp	x27, x28, [sp, #80]
    540c:	mov	x27, x1
    5410:	add	x1, x0, x2
    5414:	str	x2, [sp, #112]
    5418:	str	wzr, [sp, #180]
    541c:	ldr	w2, [x3, #4]
    5420:	ldr	x28, [x20, #112]
    5424:	cbz	x23, 57ec <update_cur_sifted_state+0x414>
    5428:	mov	x19, x21
    542c:	cbnz	w2, 5468 <update_cur_sifted_state+0x90>
    5430:	ldr	x0, [x27]
    5434:	mov	w2, #0x0                   	// #0
    5438:	str	xzr, [x0, x21, lsl #3]
    543c:	ldr	x0, [x1]
    5440:	ldrb	w0, [x0, #80]
    5444:	tbnz	w0, #6, 5580 <update_cur_sifted_state+0x1a8>
    5448:	mov	w0, w2
    544c:	ldp	x19, x20, [sp, #16]
    5450:	ldp	x21, x22, [sp, #32]
    5454:	ldp	x23, x24, [sp, #48]
    5458:	ldp	x25, x26, [sp, #64]
    545c:	ldp	x27, x28, [sp, #80]
    5460:	ldp	x29, x30, [sp], #224
    5464:	ret
    5468:	mov	x2, x3
    546c:	mov	x1, x28
    5470:	add	x0, sp, #0xb8
    5474:	str	wzr, [sp, #184]
    5478:	bl	3a78 <re_acquire_state>
    547c:	mov	x22, x0
    5480:	ldr	w2, [sp, #184]
    5484:	cbnz	w2, 5448 <update_cur_sifted_state+0x70>
    5488:	add	x25, x0, #0x28
    548c:	ldr	w0, [x0, #40]
    5490:	cbnz	w0, 5518 <update_cur_sifted_state+0x140>
    5494:	ldr	w24, [x26, #4]
    5498:	stp	w24, wzr, [x22, #40]
    549c:	sbfiz	x0, x24, #2, #32
    54a0:	bl	0 <grub_malloc>
    54a4:	str	x0, [x22, #48]
    54a8:	cbz	x0, 5ae4 <update_cur_sifted_state+0x70c>
    54ac:	ldr	w0, [x26, #4]
    54b0:	str	wzr, [sp, #184]
    54b4:	cmp	w0, #0x0
    54b8:	b.le	5518 <update_cur_sifted_state+0x140>
    54bc:	mov	x22, #0x0                   	// #0
    54c0:	b	54d0 <update_cur_sifted_state+0xf8>
    54c4:	ldr	w0, [x26, #4]
    54c8:	cmp	w0, w22
    54cc:	b.le	5518 <update_cur_sifted_state+0x140>
    54d0:	ldr	x3, [x26, #8]
    54d4:	mov	x0, x25
    54d8:	ldr	x1, [x28, #56]
    54dc:	ldrsw	x3, [x3, x22, lsl #2]
    54e0:	add	x22, x22, #0x1
    54e4:	add	x1, x1, x3, lsl #4
    54e8:	bl	3218 <re_node_set_merge>
    54ec:	str	w0, [sp, #184]
    54f0:	cbz	w0, 54c4 <update_cur_sifted_state+0xec>
    54f4:	mov	w2, #0xc                   	// #12
    54f8:	mov	w0, w2
    54fc:	ldp	x19, x20, [sp, #16]
    5500:	ldp	x21, x22, [sp, #32]
    5504:	ldp	x23, x24, [sp, #48]
    5508:	ldp	x25, x26, [sp, #64]
    550c:	ldp	x27, x28, [sp, #80]
    5510:	ldp	x29, x30, [sp], #224
    5514:	ret
    5518:	add	x0, x23, #0x8
    551c:	mov	x2, x25
    5520:	mov	x1, x0
    5524:	str	x0, [sp, #120]
    5528:	mov	x0, x26
    552c:	bl	4030 <re_node_set_add_intersect>
    5530:	str	w0, [sp, #180]
    5534:	cbnz	w0, 5af0 <update_cur_sifted_state+0x718>
    5538:	ldr	w0, [x27, #28]
    553c:	cmp	w0, #0x0
    5540:	cbnz	w0, 58d0 <update_cur_sifted_state+0x4f8>
    5544:	ldr	x22, [x27]
    5548:	mov	x2, x26
    554c:	mov	x1, x28
    5550:	add	x0, sp, #0xb4
    5554:	bl	3a78 <re_acquire_state>
    5558:	ldr	w2, [sp, #180]
    555c:	str	x0, [x22, x21, lsl #3]
    5560:	cbnz	w2, 5448 <update_cur_sifted_state+0x70>
    5564:	ldr	x0, [sp, #112]
    5568:	mov	w2, #0x0                   	// #0
    556c:	ldr	x1, [x20, #136]
    5570:	add	x1, x1, x0
    5574:	ldr	x0, [x1]
    5578:	ldrb	w0, [x0, #80]
    557c:	tbz	w0, #6, 5448 <update_cur_sifted_state+0x70>
    5580:	ldr	w4, [x20, #148]
    5584:	mov	w26, #0x0                   	// #0
    5588:	mov	w3, #0x14                  	// #20
    558c:	mov	w2, w4
    5590:	b	55b0 <update_cur_sifted_state+0x1d8>
    5594:	ldr	x1, [x20, #160]
    5598:	asr	w0, w0, #1
    559c:	smaddl	x1, w0, w3, x1
    55a0:	ldr	w1, [x1, #4]
    55a4:	cmp	w19, w1
    55a8:	b.gt	5860 <update_cur_sifted_state+0x488>
    55ac:	mov	w2, w0
    55b0:	add	w0, w2, w26
    55b4:	cmp	w2, w26
    55b8:	b.gt	5594 <update_cur_sifted_state+0x1bc>
    55bc:	cmp	w4, w26
    55c0:	b.le	5858 <update_cur_sifted_state+0x480>
    55c4:	mov	w1, #0x14                  	// #20
    55c8:	ldr	x0, [x20, #160]
    55cc:	smull	x1, w26, w1
    55d0:	str	x1, [sp, #152]
    55d4:	add	x0, x0, x1
    55d8:	ldr	w0, [x0, #4]
    55dc:	cmp	w19, w0
    55e0:	b.ne	5858 <update_cur_sifted_state+0x480>  // b.any
    55e4:	ldr	w2, [x23, #12]
    55e8:	str	xzr, [sp, #184]
    55ec:	cmp	w2, #0x0
    55f0:	ldr	x24, [x20, #112]
    55f4:	b.le	5858 <update_cur_sifted_state+0x480>
    55f8:	add	x0, x27, #0x20
    55fc:	mov	x22, #0x0                   	// #0
    5600:	str	x0, [sp, #144]
    5604:	add	x0, sp, #0xd0
    5608:	str	x0, [sp, #168]
    560c:	b	5624 <update_cur_sifted_state+0x24c>
    5610:	cmp	w0, #0x4
    5614:	b.eq	5664 <update_cur_sifted_state+0x28c>  // b.none
    5618:	add	x22, x22, #0x1
    561c:	cmp	w2, w22
    5620:	b.le	5850 <update_cur_sifted_state+0x478>
    5624:	ldr	x1, [x23, #16]
    5628:	ldr	x0, [x24]
    562c:	ldr	w21, [x1, x22, lsl #2]
    5630:	ldr	w1, [x27, #16]
    5634:	sbfiz	x3, x21, #4, #32
    5638:	str	x3, [sp, #120]
    563c:	add	x0, x0, x3
    5640:	cmp	w21, w1
    5644:	sxtw	x1, w21
    5648:	ldrb	w0, [x0, #8]
    564c:	b.ne	5610 <update_cur_sifted_state+0x238>  // b.any
    5650:	ldr	w3, [x27, #20]
    5654:	cmp	w19, w3
    5658:	b.eq	5618 <update_cur_sifted_state+0x240>  // b.none
    565c:	cmp	w0, #0x4
    5660:	b.ne	5618 <update_cur_sifted_state+0x240>  // b.any
    5664:	lsl	x0, x1, #2
    5668:	str	x0, [sp, #128]
    566c:	ldr	x0, [sp, #152]
    5670:	str	x0, [sp, #104]
    5674:	ldr	x8, [x20, #160]
    5678:	mov	w25, w26
    567c:	add	x28, x8, x0
    5680:	add	x0, x27, #0x1c
    5684:	str	x0, [sp, #136]
    5688:	add	x0, x27, #0x18
    568c:	str	x0, [sp, #160]
    5690:	b	57b8 <update_cur_sifted_state+0x3e0>
    5694:	ldr	x0, [x24, #24]
    5698:	ldr	x1, [sp, #128]
    569c:	ldr	w2, [x0, x1]
    56a0:	ldr	w0, [x27, #20]
    56a4:	cmp	w6, w0
    56a8:	b.gt	5798 <update_cur_sifted_state+0x3c0>
    56ac:	ldr	x0, [x27]
    56b0:	ldr	x1, [x0, w6, sxtw #3]
    56b4:	cbz	x1, 5798 <update_cur_sifted_state+0x3c0>
    56b8:	ldr	w0, [x1, #12]
    56bc:	add	x1, x1, #0x10
    56c0:	bl	2548 <re_node_set_contains.isra.0>
    56c4:	cbz	w0, 5798 <update_cur_sifted_state+0x3c0>
    56c8:	mov	w5, w2
    56cc:	mov	w4, w19
    56d0:	ldp	x1, x2, [sp, #136]
    56d4:	mov	w3, w21
    56d8:	mov	x0, x20
    56dc:	bl	2820 <check_dst_limits.isra.0>
    56e0:	tst	w0, #0xff
    56e4:	b.ne	5798 <update_cur_sifted_state+0x3c0>  // b.any
    56e8:	ldr	x0, [sp, #184]
    56ec:	cbz	x0, 5868 <update_cur_sifted_state+0x490>
    56f0:	mov	w1, w25
    56f4:	add	x0, sp, #0xd0
    56f8:	stp	w21, w19, [sp, #200]
    56fc:	bl	19d0 <re_node_set_insert>
    5700:	tst	w0, #0xff
    5704:	b.eq	5ab8 <update_cur_sifted_state+0x6e0>  // b.none
    5708:	ldr	x3, [sp, #112]
    570c:	add	x1, sp, #0xb8
    5710:	ldr	x2, [sp, #184]
    5714:	mov	x0, x20
    5718:	ldr	x28, [x2, x3]
    571c:	bl	5110 <sift_states_backward>
    5720:	mov	w2, w0
    5724:	cbnz	w0, 5890 <update_cur_sifted_state+0x4b8>
    5728:	ldr	x1, [x27, #8]
    572c:	ldr	x2, [sp, #184]
    5730:	cbz	x1, 574c <update_cur_sifted_state+0x374>
    5734:	add	w3, w19, #0x1
    5738:	mov	x0, x24
    573c:	bl	3cb0 <merge_state_array>
    5740:	mov	w2, w0
    5744:	cbnz	w0, 5890 <update_cur_sifted_state+0x4b8>
    5748:	ldr	x2, [sp, #184]
    574c:	add	x8, sp, #0xd8
    5750:	ldr	x0, [sp, #112]
    5754:	mov	x1, x8
    5758:	ldr	w6, [sp, #212]
    575c:	str	x28, [x2, x0]
    5760:	mov	w2, w25
    5764:	mov	w0, w6
    5768:	bl	2548 <re_node_set_contains.isra.0>
    576c:	subs	w2, w0, #0x1
    5770:	ccmp	w6, w2, #0x4, pl  // pl = nfrst
    5774:	b.le	578c <update_cur_sifted_state+0x3b4>
    5778:	sub	w6, w6, #0x1
    577c:	mov	x1, x8
    5780:	add	x0, sp, #0xd4
    5784:	str	w6, [sp, #212]
    5788:	bl	26d8 <re_node_set_remove_at.isra.0.part.0>
    578c:	ldr	x0, [sp, #104]
    5790:	ldr	x8, [x20, #160]
    5794:	add	x28, x8, x0
    5798:	ldr	x1, [sp, #104]
    579c:	add	w25, w25, #0x1
    57a0:	ldrb	w0, [x28, #16]
    57a4:	add	x8, x28, #0x14
    57a8:	add	x1, x1, #0x14
    57ac:	str	x1, [sp, #104]
    57b0:	cbz	w0, 58c8 <update_cur_sifted_state+0x4f0>
    57b4:	mov	x28, x8
    57b8:	ldr	w0, [x28]
    57bc:	cmp	w21, w0
    57c0:	b.ne	5798 <update_cur_sifted_state+0x3c0>  // b.any
    57c4:	ldp	w1, w0, [x28, #8]
    57c8:	sub	w0, w0, w1
    57cc:	add	w6, w19, w0
    57d0:	cbnz	w0, 5694 <update_cur_sifted_state+0x2bc>
    57d4:	ldr	x0, [x24, #40]
    57d8:	ldr	x1, [sp, #120]
    57dc:	add	x0, x0, x1
    57e0:	ldr	x0, [x0, #8]
    57e4:	ldr	w2, [x0]
    57e8:	b	56a0 <update_cur_sifted_state+0x2c8>
    57ec:	ldr	x19, [x27]
    57f0:	cbnz	w2, 5818 <update_cur_sifted_state+0x440>
    57f4:	str	xzr, [x19, x21, lsl #3]
    57f8:	mov	w0, w2
    57fc:	ldp	x19, x20, [sp, #16]
    5800:	ldp	x21, x22, [sp, #32]
    5804:	ldp	x23, x24, [sp, #48]
    5808:	ldp	x25, x26, [sp, #64]
    580c:	ldp	x27, x28, [sp, #80]
    5810:	ldp	x29, x30, [sp], #224
    5814:	ret
    5818:	mov	x2, x3
    581c:	mov	x1, x28
    5820:	add	x0, sp, #0xb4
    5824:	bl	3a78 <re_acquire_state>
    5828:	ldr	w2, [sp, #180]
    582c:	str	x0, [x19, x21, lsl #3]
    5830:	mov	w0, w2
    5834:	ldp	x19, x20, [sp, #16]
    5838:	ldp	x21, x22, [sp, #32]
    583c:	ldp	x23, x24, [sp, #48]
    5840:	ldp	x25, x26, [sp, #64]
    5844:	ldp	x27, x28, [sp, #80]
    5848:	ldp	x29, x30, [sp], #224
    584c:	ret
    5850:	ldr	x0, [sp, #184]
    5854:	cbnz	x0, 5af8 <update_cur_sifted_state+0x720>
    5858:	mov	w2, #0x0                   	// #0
    585c:	b	5448 <update_cur_sifted_state+0x70>
    5860:	add	w26, w0, #0x1
    5864:	b	55b0 <update_cur_sifted_state+0x1d8>
    5868:	ldp	x0, x1, [x27]
    586c:	stp	x0, x1, [sp, #184]
    5870:	ldp	x2, x3, [x27, #16]
    5874:	stp	x2, x3, [sp, #200]
    5878:	ldp	x1, x0, [sp, #160]
    587c:	ldr	x2, [x27, #32]
    5880:	str	x2, [sp, #216]
    5884:	bl	3528 <re_node_set_init_copy>
    5888:	mov	w2, w0
    588c:	cbz	w0, 56f0 <update_cur_sifted_state+0x318>
    5890:	ldr	x0, [sp, #184]
    5894:	cbz	x0, 5448 <update_cur_sifted_state+0x70>
    5898:	ldr	x0, [sp, #216]
    589c:	str	w2, [sp, #104]
    58a0:	bl	0 <grub_free>
    58a4:	ldr	w2, [sp, #104]
    58a8:	ldp	x19, x20, [sp, #16]
    58ac:	mov	w0, w2
    58b0:	ldp	x21, x22, [sp, #32]
    58b4:	ldp	x23, x24, [sp, #48]
    58b8:	ldp	x25, x26, [sp, #64]
    58bc:	ldp	x27, x28, [sp, #80]
    58c0:	ldp	x29, x30, [sp], #224
    58c4:	ret
    58c8:	ldr	w2, [x23, #12]
    58cc:	b	5618 <update_cur_sifted_state+0x240>
    58d0:	ldr	x0, [x20, #160]
    58d4:	str	x0, [sp, #104]
    58d8:	b.le	59b8 <update_cur_sifted_state+0x5e0>
    58dc:	mov	x25, #0x0                   	// #0
    58e0:	ldr	x0, [x27, #32]
    58e4:	mov	w1, #0x14                  	// #20
    58e8:	ldr	x3, [sp, #104]
    58ec:	ldr	w0, [x0, x25, lsl #2]
    58f0:	smull	x0, w0, w1
    58f4:	add	x1, x3, x0
    58f8:	ldr	w2, [x1, #8]
    58fc:	cmp	w19, w2
    5900:	b.le	59a8 <update_cur_sifted_state+0x5d0>
    5904:	ldr	w2, [x1, #4]
    5908:	cmp	w19, w2
    590c:	b.gt	59a8 <update_cur_sifted_state+0x5d0>
    5910:	ldrsw	x2, [x3, x0]
    5914:	ldr	x0, [x28]
    5918:	lsl	x2, x2, #4
    591c:	ldr	w1, [x1, #12]
    5920:	ldr	w6, [x26, #4]
    5924:	cmp	w19, w1
    5928:	ldr	w24, [x0, x2]
    592c:	b.eq	59c0 <update_cur_sifted_state+0x5e8>  // b.none
    5930:	cmp	w6, #0x0
    5934:	mov	x22, #0x0                   	// #0
    5938:	b.gt	5950 <update_cur_sifted_state+0x578>
    593c:	b	59a8 <update_cur_sifted_state+0x5d0>
    5940:	add	x22, x22, #0x1
    5944:	cmp	w6, w22
    5948:	b.le	59a8 <update_cur_sifted_state+0x5d0>
    594c:	ldr	x0, [x28]
    5950:	ldr	x1, [x26, #8]
    5954:	ldr	w1, [x1, x22, lsl #2]
    5958:	sbfiz	x3, x1, #4, #32
    595c:	add	x2, x0, x3
    5960:	ldrb	w2, [x2, #8]
    5964:	sub	w2, w2, #0x8
    5968:	cmp	w2, #0x1
    596c:	b.hi	5940 <update_cur_sifted_state+0x568>  // b.pmore
    5970:	ldr	w0, [x0, x3]
    5974:	cmp	w24, w0
    5978:	b.ne	5940 <update_cur_sifted_state+0x568>  // b.any
    597c:	ldr	x3, [sp, #120]
    5980:	mov	x2, x26
    5984:	mov	x0, x28
    5988:	bl	4210 <sub_epsilon_src_nodes>
    598c:	mov	w2, w0
    5990:	cbnz	w0, 5448 <update_cur_sifted_state+0x70>
    5994:	ldr	w6, [x26, #4]
    5998:	add	x22, x22, #0x1
    599c:	cmp	w6, w22
    59a0:	b.gt	594c <update_cur_sifted_state+0x574>
    59a4:	nop
    59a8:	ldr	w0, [x27, #28]
    59ac:	add	x25, x25, #0x1
    59b0:	cmp	w0, w25
    59b4:	b.gt	58e0 <update_cur_sifted_state+0x508>
    59b8:	str	wzr, [sp, #180]
    59bc:	b	5544 <update_cur_sifted_state+0x16c>
    59c0:	cmp	w6, #0x0
    59c4:	b.le	59a8 <update_cur_sifted_state+0x5d0>
    59c8:	mov	w22, #0xffffffff            	// #-1
    59cc:	mov	x2, #0x0                   	// #0
    59d0:	mov	w1, w22
    59d4:	ldr	x9, [x26, #8]
    59d8:	b	59fc <update_cur_sifted_state+0x624>
    59dc:	cmp	w3, #0x9
    59e0:	b.ne	59f0 <update_cur_sifted_state+0x618>  // b.any
    59e4:	ldr	w3, [x12]
    59e8:	cmp	w24, w3
    59ec:	csel	w22, w22, w4, ne  // ne = any
    59f0:	add	x2, x2, #0x1
    59f4:	cmp	w6, w2
    59f8:	b.le	5a2c <update_cur_sifted_state+0x654>
    59fc:	ldr	w4, [x9, x2, lsl #2]
    5a00:	sbfiz	x11, x4, #4, #32
    5a04:	add	x12, x0, x11
    5a08:	ldrb	w3, [x12, #8]
    5a0c:	cmp	w3, #0x8
    5a10:	b.ne	59dc <update_cur_sifted_state+0x604>  // b.any
    5a14:	ldr	w3, [x0, x11]
    5a18:	add	x2, x2, #0x1
    5a1c:	cmp	w24, w3
    5a20:	csel	w1, w1, w4, ne  // ne = any
    5a24:	cmp	w6, w2
    5a28:	b.gt	59fc <update_cur_sifted_state+0x624>
    5a2c:	tbz	w1, #31, 5a88 <update_cur_sifted_state+0x6b0>
    5a30:	tbnz	w22, #31, 59a8 <update_cur_sifted_state+0x5d0>
    5a34:	mov	w24, #0x0                   	// #0
    5a38:	ldr	w9, [x9, w24, sxtw #2]
    5a3c:	mov	w2, w22
    5a40:	ldr	x0, [x28, #56]
    5a44:	sbfiz	x8, x9, #4, #32
    5a48:	add	x0, x0, x8
    5a4c:	add	x1, x0, #0x8
    5a50:	ldr	w0, [x0, #4]
    5a54:	bl	2548 <re_node_set_contains.isra.0>
    5a58:	cbnz	w0, 5a74 <update_cur_sifted_state+0x69c>
    5a5c:	ldr	x0, [x28, #48]
    5a60:	add	x0, x0, x8
    5a64:	add	x1, x0, #0x8
    5a68:	ldr	w0, [x0, #4]
    5a6c:	bl	2548 <re_node_set_contains.isra.0>
    5a70:	cbz	w0, 5ac0 <update_cur_sifted_state+0x6e8>
    5a74:	add	w24, w24, #0x1
    5a78:	cmp	w6, w24
    5a7c:	b.le	59a8 <update_cur_sifted_state+0x5d0>
    5a80:	ldr	x9, [x26, #8]
    5a84:	b	5a38 <update_cur_sifted_state+0x660>
    5a88:	ldr	x3, [sp, #120]
    5a8c:	mov	x2, x26
    5a90:	mov	x0, x28
    5a94:	bl	4210 <sub_epsilon_src_nodes>
    5a98:	mov	w2, w0
    5a9c:	cbnz	w0, 5448 <update_cur_sifted_state+0x70>
    5aa0:	tbnz	w22, #31, 59a8 <update_cur_sifted_state+0x5d0>
    5aa4:	ldr	w6, [x26, #4]
    5aa8:	cmp	w6, #0x0
    5aac:	b.le	59a8 <update_cur_sifted_state+0x5d0>
    5ab0:	ldr	x9, [x26, #8]
    5ab4:	b	5a34 <update_cur_sifted_state+0x65c>
    5ab8:	mov	w2, #0xc                   	// #12
    5abc:	b	5890 <update_cur_sifted_state+0x4b8>
    5ac0:	ldr	x3, [sp, #120]
    5ac4:	mov	x2, x26
    5ac8:	mov	w1, w9
    5acc:	mov	x0, x28
    5ad0:	bl	4210 <sub_epsilon_src_nodes>
    5ad4:	mov	w2, w0
    5ad8:	cbnz	w0, 5448 <update_cur_sifted_state+0x70>
    5adc:	ldr	w6, [x26, #4]
    5ae0:	b	5a78 <update_cur_sifted_state+0x6a0>
    5ae4:	cbz	w24, 54ac <update_cur_sifted_state+0xd4>
    5ae8:	mov	w2, #0xc                   	// #12
    5aec:	b	54f8 <update_cur_sifted_state+0x120>
    5af0:	mov	w2, w0
    5af4:	b	5448 <update_cur_sifted_state+0x70>
    5af8:	mov	w2, #0x0                   	// #0
    5afc:	b	5898 <update_cur_sifted_state+0x4c0>

0000000000005b00 <pop_fail_stack.isra.0>:
    5b00:	stp	x29, x30, [sp, #-64]!
    5b04:	mov	x29, sp
    5b08:	stp	x19, x20, [sp, #16]
    5b0c:	mov	x20, x1
    5b10:	ldr	w19, [x0]
    5b14:	stp	x21, x22, [sp, #32]
    5b18:	mov	x22, x2
    5b1c:	sub	w19, w19, #0x1
    5b20:	stp	x23, x24, [sp, #48]
    5b24:	mov	x21, x5
    5b28:	mov	w24, w3
    5b2c:	str	w19, [x0]
    5b30:	mov	x23, x4
    5b34:	tbnz	w19, #31, 5b9c <pop_fail_stack.isra.0+0x9c>
    5b38:	ldr	x1, [x20]
    5b3c:	sbfiz	x19, x19, #5, #32
    5b40:	sbfiz	x2, x24, #3, #32
    5b44:	mov	x0, x23
    5b48:	add	x3, x1, x19
    5b4c:	ldr	w1, [x1, x19]
    5b50:	str	w1, [x22]
    5b54:	ldr	x1, [x3, #8]
    5b58:	bl	0 <grub_memmove>
    5b5c:	ldr	x0, [x21, #8]
    5b60:	bl	0 <grub_free>
    5b64:	ldr	x0, [x20]
    5b68:	add	x0, x0, x19
    5b6c:	ldr	x0, [x0, #8]
    5b70:	bl	0 <grub_free>
    5b74:	ldr	x0, [x20]
    5b78:	ldp	x23, x24, [sp, #48]
    5b7c:	add	x19, x0, x19
    5b80:	ldp	x0, x1, [x19, #16]
    5b84:	stp	x0, x1, [x21]
    5b88:	ldr	w0, [x19, #4]
    5b8c:	ldp	x19, x20, [sp, #16]
    5b90:	ldp	x21, x22, [sp, #32]
    5b94:	ldp	x29, x30, [sp], #64
    5b98:	ret
    5b9c:	adrp	x1, 0 <grub_cmd_regexp>
    5ba0:	adrp	x0, 0 <grub_cmd_regexp>
    5ba4:	mov	w2, #0x553                 	// #1363
    5ba8:	ldr	x1, [x1]
    5bac:	ldr	x0, [x0]
    5bb0:	bl	0 <grub_printf>
    5bb4:	b	5b38 <pop_fail_stack.isra.0+0x38>
	...

0000000000005bc8 <parse_bracket_element.isra.0.constprop.0>:
    5bc8:	stp	x29, x30, [sp, #-32]!
    5bcc:	mov	x10, x0
    5bd0:	mov	x6, x1
    5bd4:	mov	x29, sp
    5bd8:	ldr	w0, [x1, #104]
    5bdc:	mov	x11, x2
    5be0:	ldr	w9, [x1, #56]
    5be4:	mov	w7, w3
    5be8:	mov	x12, x4
    5bec:	and	w5, w5, #0xff
    5bf0:	cmp	w0, #0x1
    5bf4:	b.eq	5c0c <parse_bracket_element.isra.0.constprop.0+0x44>  // b.none
    5bf8:	mov	w1, w9
    5bfc:	mov	x0, x6
    5c00:	bl	24f8 <re_string_char_size_at.part.0>
    5c04:	cmp	w0, #0x1
    5c08:	b.gt	5c4c <parse_bracket_element.isra.0.constprop.0+0x84>
    5c0c:	ldrb	w8, [x11, #8]
    5c10:	add	w7, w9, w7
    5c14:	str	w7, [x6, #56]
    5c18:	and	w0, w8, #0xfffffffb
    5c1c:	cmp	w0, #0x1a
    5c20:	ccmp	w8, #0x1c, #0x4, ne  // ne = any
    5c24:	b.eq	5c74 <parse_bracket_element.isra.0.constprop.0+0xac>  // b.none
    5c28:	cmp	w5, #0x0
    5c2c:	ccmp	w8, #0x16, #0x0, eq  // eq = none
    5c30:	b.eq	5dd4 <parse_bracket_element.isra.0.constprop.0+0x20c>  // b.none
    5c34:	ldrb	w1, [x11]
    5c38:	mov	w0, #0x0                   	// #0
    5c3c:	str	wzr, [x10]
    5c40:	strb	w1, [x10, #8]
    5c44:	ldp	x29, x30, [sp], #32
    5c48:	ret
    5c4c:	ldr	x1, [x6, #16]
    5c50:	mov	w2, #0x1                   	// #1
    5c54:	str	w2, [x10]
    5c58:	add	w2, w9, w0
    5c5c:	mov	w0, #0x0                   	// #0
    5c60:	ldr	w1, [x1, w9, sxtw #2]
    5c64:	str	w1, [x10, #8]
    5c68:	str	w2, [x6, #56]
    5c6c:	ldp	x29, x30, [sp], #32
    5c70:	ret
    5c74:	ldr	w12, [x6, #72]
    5c78:	cmp	w7, w12
    5c7c:	b.ge	5d24 <parse_bracket_element.isra.0.constprop.0+0x15c>  // b.tcont
    5c80:	ldrb	w13, [x11]
    5c84:	mov	x9, #0x0                   	// #0
    5c88:	b	5cac <parse_bracket_element.isra.0.constprop.0+0xe4>
    5c8c:	ldr	x0, [x10, #8]
    5c90:	strb	w5, [x0, x9]
    5c94:	add	x9, x9, #0x1
    5c98:	cmp	x9, #0x20
    5c9c:	b.eq	5d24 <parse_bracket_element.isra.0.constprop.0+0x15c>  // b.none
    5ca0:	ldrb	w8, [x11, #8]
    5ca4:	ldr	w7, [x6, #56]
    5ca8:	ldr	w12, [x6, #72]
    5cac:	cmp	w8, #0x1e
    5cb0:	mov	w8, w9
    5cb4:	b.eq	5d30 <parse_bracket_element.isra.0.constprop.0+0x168>  // b.none
    5cb8:	ldr	x0, [x6, #8]
    5cbc:	add	w1, w7, #0x1
    5cc0:	str	w1, [x6, #56]
    5cc4:	ldrb	w5, [x0, w7, sxtw]
    5cc8:	cmp	w1, w12
    5ccc:	b.ge	5d24 <parse_bracket_element.isra.0.constprop.0+0x15c>  // b.tcont
    5cd0:	cmp	w13, w5
    5cd4:	b.ne	5c8c <parse_bracket_element.isra.0.constprop.0+0xc4>  // b.any
    5cd8:	ldr	x0, [x6, #8]
    5cdc:	ldrb	w0, [x0, w1, sxtw]
    5ce0:	cmp	w0, #0x5d
    5ce4:	b.ne	5c8c <parse_bracket_element.isra.0.constprop.0+0xc4>  // b.any
    5ce8:	ldr	x0, [x10, #8]
    5cec:	add	w1, w1, #0x1
    5cf0:	str	w1, [x6, #56]
    5cf4:	strb	wzr, [x0, w8, sxtw]
    5cf8:	ldrb	w0, [x11, #8]
    5cfc:	cmp	w0, #0x1c
    5d00:	b.eq	5e08 <parse_bracket_element.isra.0.constprop.0+0x240>  // b.none
    5d04:	cmp	w0, #0x1e
    5d08:	b.eq	5df8 <parse_bracket_element.isra.0.constprop.0+0x230>  // b.none
    5d0c:	cmp	w0, #0x1a
    5d10:	mov	w0, #0x0                   	// #0
    5d14:	b.ne	5c44 <parse_bracket_element.isra.0.constprop.0+0x7c>  // b.any
    5d18:	mov	w1, #0x3                   	// #3
    5d1c:	str	w1, [x10]
    5d20:	b	5c44 <parse_bracket_element.isra.0.constprop.0+0x7c>
    5d24:	mov	w0, #0x7                   	// #7
    5d28:	ldp	x29, x30, [sp], #32
    5d2c:	ret
    5d30:	ldrb	w0, [x6, #99]
    5d34:	cbz	w0, 5cb8 <parse_bracket_element.isra.0.constprop.0+0xf0>
    5d38:	ldrb	w0, [x6, #100]
    5d3c:	cbz	w0, 5da4 <parse_bracket_element.isra.0.constprop.0+0x1dc>
    5d40:	ldr	w0, [x6, #44]
    5d44:	sxtw	x2, w7
    5d48:	cmp	w7, w0
    5d4c:	b.eq	5d60 <parse_bracket_element.isra.0.constprop.0+0x198>  // b.none
    5d50:	ldr	x0, [x6, #16]
    5d54:	ldr	w0, [x0, x2, lsl #2]
    5d58:	cmn	w0, #0x1
    5d5c:	b.eq	5dc0 <parse_bracket_element.isra.0.constprop.0+0x1f8>  // b.none
    5d60:	ldr	x0, [x6, #24]
    5d64:	ldr	w3, [x6, #40]
    5d68:	ldr	x1, [x6]
    5d6c:	ldr	w0, [x0, x2, lsl #2]
    5d70:	add	w0, w0, w3
    5d74:	ldrb	w5, [x1, w0, sxtw]
    5d78:	tbnz	w5, #7, 5dc0 <parse_bracket_element.isra.0.constprop.0+0x1f8>
    5d7c:	ldr	w1, [x6, #104]
    5d80:	cmp	w1, #0x1
    5d84:	b.eq	5d98 <parse_bracket_element.isra.0.constprop.0+0x1d0>  // b.none
    5d88:	mov	w1, w7
    5d8c:	mov	x0, x6
    5d90:	bl	24f8 <re_string_char_size_at.part.0>
    5d94:	mov	w1, w0
    5d98:	add	w1, w7, w1
    5d9c:	str	w1, [x6, #56]
    5da0:	b	5cc8 <parse_bracket_element.isra.0.constprop.0+0x100>
    5da4:	ldr	w0, [x6, #40]
    5da8:	add	w1, w7, #0x1
    5dac:	ldr	x2, [x6]
    5db0:	add	w0, w7, w0
    5db4:	str	w1, [x6, #56]
    5db8:	ldrb	w5, [x2, w0, sxtw]
    5dbc:	b	5cc8 <parse_bracket_element.isra.0.constprop.0+0x100>
    5dc0:	ldr	x0, [x6, #8]
    5dc4:	add	w1, w7, #0x1
    5dc8:	str	w1, [x6, #56]
    5dcc:	ldrb	w5, [x0, x2]
    5dd0:	b	5cc8 <parse_bracket_element.isra.0.constprop.0+0x100>
    5dd4:	mov	x2, x12
    5dd8:	mov	x1, x6
    5ddc:	add	x0, sp, #0x10
    5de0:	bl	12b0 <peek_token_bracket>
    5de4:	ldrb	w0, [sp, #24]
    5de8:	cmp	w0, #0x15
    5dec:	b.eq	5c34 <parse_bracket_element.isra.0.constprop.0+0x6c>  // b.none
    5df0:	mov	w0, #0xb                   	// #11
    5df4:	b	5c44 <parse_bracket_element.isra.0.constprop.0+0x7c>
    5df8:	mov	w1, #0x4                   	// #4
    5dfc:	mov	w0, #0x0                   	// #0
    5e00:	str	w1, [x10]
    5e04:	b	5c44 <parse_bracket_element.isra.0.constprop.0+0x7c>
    5e08:	mov	w1, #0x2                   	// #2
    5e0c:	mov	w0, #0x0                   	// #0
    5e10:	str	w1, [x10]
    5e14:	b	5c44 <parse_bracket_element.isra.0.constprop.0+0x7c>

0000000000005e18 <peek_token>:
    5e18:	stp	x29, x30, [sp, #-64]!
    5e1c:	mov	x29, sp
    5e20:	ldr	w4, [x1, #56]
    5e24:	ldr	w3, [x1, #72]
    5e28:	str	x19, [sp, #16]
    5e2c:	mov	x19, x0
    5e30:	cmp	w3, w4
    5e34:	b.le	603c <peek_token+0x224>
    5e38:	ldr	x6, [x1, #8]
    5e3c:	sxtw	x7, w4
    5e40:	ldrb	w5, [x0, #10]
    5e44:	ldr	w0, [x1, #104]
    5e48:	ldrb	w3, [x6, w4, sxtw]
    5e4c:	and	w5, w5, #0xffffff9f
    5e50:	strb	w3, [x19]
    5e54:	cmp	w0, #0x1
    5e58:	strb	w5, [x19, #10]
    5e5c:	b.le	5f00 <peek_token+0xe8>
    5e60:	ldr	w5, [x1, #44]
    5e64:	cmp	w4, w5
    5e68:	b.eq	5e7c <peek_token+0x64>  // b.none
    5e6c:	ldr	x5, [x1, #16]
    5e70:	ldr	w5, [x5, x7, lsl #2]
    5e74:	cmn	w5, #0x1
    5e78:	b.eq	60f0 <peek_token+0x2d8>  // b.none
    5e7c:	cmp	w3, #0x5c
    5e80:	b.eq	5f40 <peek_token+0x128>  // b.none
    5e84:	ldr	x0, [x1, #16]
    5e88:	mov	w5, #0x1                   	// #1
    5e8c:	strb	w5, [x19, #8]
    5e90:	mov	w5, #0x1                   	// #1
    5e94:	ldr	w8, [x0, x7, lsl #2]
    5e98:	and	w0, w8, #0xffffffdf
    5e9c:	sub	w0, w0, #0x41
    5ea0:	cmp	w0, #0x19
    5ea4:	b.hi	6054 <peek_token+0x23c>  // b.pmore
    5ea8:	ldrb	w0, [x19, #10]
    5eac:	cmp	w3, #0x2e
    5eb0:	bfi	w0, w5, #6, #1
    5eb4:	strb	w0, [x19, #10]
    5eb8:	b.eq	6324 <peek_token+0x50c>  // b.none
    5ebc:	b.hi	5f8c <peek_token+0x174>  // b.pmore
    5ec0:	cmp	w3, #0x29
    5ec4:	b.eq	6334 <peek_token+0x51c>  // b.none
    5ec8:	b.ls	5f68 <peek_token+0x150>  // b.plast
    5ecc:	cmp	w3, #0x2a
    5ed0:	b.eq	6340 <peek_token+0x528>  // b.none
    5ed4:	cmp	w3, #0x2b
    5ed8:	b.ne	63dc <peek_token+0x5c4>  // b.any
    5edc:	mov	x1, #0x402                 	// #1026
    5ee0:	mov	w0, #0x1                   	// #1
    5ee4:	tst	x2, x1
    5ee8:	b.ne	5ef4 <peek_token+0xdc>  // b.any
    5eec:	mov	w1, #0x12                  	// #18
    5ef0:	strb	w1, [x19, #8]
    5ef4:	ldr	x19, [sp, #16]
    5ef8:	ldp	x29, x30, [sp], #64
    5efc:	ret
    5f00:	cmp	w3, #0x5c
    5f04:	b.eq	5f40 <peek_token+0x128>  // b.none
    5f08:	and	w0, w3, #0xffffffdf
    5f0c:	mov	w5, #0x1                   	// #1
    5f10:	sub	w0, w0, #0x41
    5f14:	strb	w5, [x19, #8]
    5f18:	and	w0, w0, #0xff
    5f1c:	mov	w5, #0x1                   	// #1
    5f20:	cmp	w0, #0x19
    5f24:	b.ls	5ea8 <peek_token+0x90>  // b.plast
    5f28:	sub	w0, w3, #0x30
    5f2c:	cmp	w0, #0x9
    5f30:	cset	w5, ls  // ls = plast
    5f34:	cmp	w3, #0x5f
    5f38:	csinc	w5, w5, wzr, ne  // ne = any
    5f3c:	b	5ea8 <peek_token+0x90>
    5f40:	ldr	w5, [x1, #64]
    5f44:	add	w3, w4, #0x1
    5f48:	cmp	w3, w5
    5f4c:	b.lt	606c <peek_token+0x254>  // b.tstop
    5f50:	mov	w1, #0x24                  	// #36
    5f54:	strb	w1, [x19, #8]
    5f58:	mov	w0, #0x1                   	// #1
    5f5c:	ldr	x19, [sp, #16]
    5f60:	ldp	x29, x30, [sp], #64
    5f64:	ret
    5f68:	cmp	w3, #0x24
    5f6c:	b.eq	6350 <peek_token+0x538>  // b.none
    5f70:	cmp	w3, #0x28
    5f74:	mov	w0, #0x1                   	// #1
    5f78:	b.ne	5fc4 <peek_token+0x1ac>  // b.any
    5f7c:	tbz	w2, #13, 5ef4 <peek_token+0xdc>
    5f80:	mov	w1, #0x8                   	// #8
    5f84:	strb	w1, [x19, #8]
    5f88:	b	5ef4 <peek_token+0xdc>
    5f8c:	cmp	w3, #0x7b
    5f90:	b.eq	63b8 <peek_token+0x5a0>  // b.none
    5f94:	b.ls	5fe0 <peek_token+0x1c8>  // b.plast
    5f98:	cmp	w3, #0x7c
    5f9c:	b.eq	63cc <peek_token+0x5b4>  // b.none
    5fa0:	cmp	w3, #0x7d
    5fa4:	b.ne	63dc <peek_token+0x5c4>  // b.any
    5fa8:	mov	x1, #0x1200                	// #4608
    5fac:	mov	w0, #0x1                   	// #1
    5fb0:	bics	xzr, x1, x2
    5fb4:	b.ne	5ef4 <peek_token+0xdc>  // b.any
    5fb8:	mov	w1, #0x18                  	// #24
    5fbc:	strb	w1, [x19, #8]
    5fc0:	b	5ef4 <peek_token+0xdc>
    5fc4:	cmp	w3, #0xa
    5fc8:	b.ne	5ef4 <peek_token+0xdc>  // b.any
    5fcc:	tbz	w2, #11, 5ef4 <peek_token+0xdc>
    5fd0:	mov	w1, #0xa                   	// #10
    5fd4:	mov	w0, #0x1                   	// #1
    5fd8:	strb	w1, [x19, #8]
    5fdc:	b	5ef4 <peek_token+0xdc>
    5fe0:	cmp	w3, #0x5b
    5fe4:	b.eq	63e4 <peek_token+0x5cc>  // b.none
    5fe8:	cmp	w3, #0x5e
    5fec:	b.ne	6018 <peek_token+0x200>  // b.any
    5ff0:	and	x0, x2, #0xfffff8
    5ff4:	ands	x0, x0, #0xffffffffff80000f
    5ff8:	ccmp	w4, #0x0, #0x4, eq  // eq = none
    5ffc:	b.ne	614c <peek_token+0x334>  // b.any
    6000:	mov	w1, #0xc                   	// #12
    6004:	mov	w2, #0x10                  	// #16
    6008:	mov	w0, #0x1                   	// #1
    600c:	str	w2, [x19]
    6010:	strb	w1, [x19, #8]
    6014:	b	5ef4 <peek_token+0xdc>
    6018:	cmp	w3, #0x3f
    601c:	b.ne	63dc <peek_token+0x5c4>  // b.any
    6020:	mov	x1, #0x402                 	// #1026
    6024:	mov	w0, #0x1                   	// #1
    6028:	tst	x2, x1
    602c:	b.ne	5ef4 <peek_token+0xdc>  // b.any
    6030:	mov	w1, #0x13                  	// #19
    6034:	strb	w1, [x19, #8]
    6038:	b	5ef4 <peek_token+0xdc>
    603c:	mov	w1, #0x2                   	// #2
    6040:	strb	w1, [x19, #8]
    6044:	mov	w0, #0x0                   	// #0
    6048:	ldr	x19, [sp, #16]
    604c:	ldp	x29, x30, [sp], #64
    6050:	ret
    6054:	sub	w0, w8, #0x30
    6058:	cmp	w0, #0x9
    605c:	cset	w5, ls  // ls = plast
    6060:	cmp	w8, #0x5f
    6064:	csinc	w5, w5, wzr, ne  // ne = any
    6068:	b	5ea8 <peek_token+0x90>
    606c:	ldrb	w5, [x1, #99]
    6070:	cbnz	w5, 63f4 <peek_token+0x5dc>
    6074:	ldrb	w4, [x6, w3, sxtw]
    6078:	mov	w5, #0x1                   	// #1
    607c:	strb	w4, [x19]
    6080:	strb	w5, [x19, #8]
    6084:	cmp	w0, #0x1
    6088:	b.le	6114 <peek_token+0x2fc>
    608c:	ldr	x5, [x1, #16]
    6090:	add	x5, x5, w3, sxtw #2
    6094:	ldr	w3, [x5]
    6098:	mov	w1, #0x1                   	// #1
    609c:	and	w0, w3, #0xffffffdf
    60a0:	sub	w0, w0, #0x41
    60a4:	cmp	w0, #0x19
    60a8:	b.ls	60c0 <peek_token+0x2a8>  // b.plast
    60ac:	sub	w0, w3, #0x30
    60b0:	cmp	w0, #0x9
    60b4:	cset	w1, ls  // ls = plast
    60b8:	cmp	w3, #0x5f
    60bc:	csinc	w1, w1, wzr, ne  // ne = any
    60c0:	ldrb	w0, [x19, #10]
    60c4:	bfi	w0, w1, #6, #1
    60c8:	strb	w0, [x19, #10]
    60cc:	sub	w0, w4, #0x27
    60d0:	cmp	w0, #0x56
    60d4:	b.hi	6144 <peek_token+0x32c>  // b.pmore
    60d8:	adrp	x1, 0 <grub_cmd_regexp>
    60dc:	ldr	x1, [x1]
    60e0:	ldrh	w0, [x1, w0, uxtw #1]
    60e4:	adr	x1, 60f0 <peek_token+0x2d8>
    60e8:	add	x0, x1, w0, sxth #2
    60ec:	br	x0
    60f0:	ldr	w1, [x19, #8]
    60f4:	mov	w2, #0x1                   	// #1
    60f8:	movk	w2, #0x20, lsl #16
    60fc:	mov	w0, #0x1                   	// #1
    6100:	and	w1, w1, #0xffffff00
    6104:	and	w1, w1, #0xffdfffff
    6108:	orr	w1, w1, w2
    610c:	str	w1, [x19, #8]
    6110:	b	5ef4 <peek_token+0xdc>
    6114:	and	w0, w4, #0xffffffdf
    6118:	mov	w1, #0x1                   	// #1
    611c:	sub	w0, w0, #0x41
    6120:	and	w0, w0, #0xff
    6124:	cmp	w0, #0x19
    6128:	b.ls	60c0 <peek_token+0x2a8>  // b.plast
    612c:	sub	w0, w4, #0x30
    6130:	cmp	w0, #0x9
    6134:	cset	w1, ls  // ls = plast
    6138:	cmp	w4, #0x5f
    613c:	csinc	w1, w1, wzr, ne  // ne = any
    6140:	b	60c0 <peek_token+0x2a8>
    6144:	mov	w0, #0x2                   	// #2
    6148:	b	5ef4 <peek_token+0xdc>
    614c:	add	x6, x6, x7
    6150:	tst	x2, #0x800
    6154:	mov	w0, #0x1                   	// #1
    6158:	ldurb	w1, [x6, #-1]
    615c:	ccmp	w1, #0xa, #0x0, ne  // ne = any
    6160:	b.ne	5ef4 <peek_token+0xdc>  // b.any
    6164:	b	6000 <peek_token+0x1e8>
    6168:	mov	w0, #0x2                   	// #2
    616c:	tbnz	w2, #14, 5ef4 <peek_token+0xdc>
    6170:	sub	w4, w4, #0x31
    6174:	mov	w1, #0x4                   	// #4
    6178:	str	w4, [x19]
    617c:	strb	w1, [x19, #8]
    6180:	b	5ef4 <peek_token+0xdc>
    6184:	mov	w0, #0x2                   	// #2
    6188:	tbnz	w2, #13, 5ef4 <peek_token+0xdc>
    618c:	nop
    6190:	mov	w1, #0x9                   	// #9
    6194:	strb	w1, [x19, #8]
    6198:	b	5ef4 <peek_token+0xdc>
    619c:	mov	w0, #0x2                   	// #2
    61a0:	tbnz	w2, #13, 5ef4 <peek_token+0xdc>
    61a4:	b	5f80 <peek_token+0x168>
    61a8:	mov	w0, #0x2                   	// #2
    61ac:	tbnz	w2, #19, 5ef4 <peek_token+0xdc>
    61b0:	mov	w1, #0x20                  	// #32
    61b4:	strb	w1, [x19, #8]
    61b8:	b	5ef4 <peek_token+0xdc>
    61bc:	mov	w0, #0x2                   	// #2
    61c0:	tbnz	w2, #19, 5ef4 <peek_token+0xdc>
    61c4:	mov	w1, #0x22                  	// #34
    61c8:	strb	w1, [x19, #8]
    61cc:	b	5ef4 <peek_token+0xdc>
    61d0:	mov	w0, #0x2                   	// #2
    61d4:	tbnz	w2, #19, 5ef4 <peek_token+0xdc>
    61d8:	mov	w1, #0xc                   	// #12
    61dc:	mov	w2, #0x100                 	// #256
    61e0:	str	w2, [x19]
    61e4:	strb	w1, [x19, #8]
    61e8:	b	5ef4 <peek_token+0xdc>
    61ec:	mov	w0, #0x2                   	// #2
    61f0:	tbnz	w2, #19, 5ef4 <peek_token+0xdc>
    61f4:	mov	w1, #0xc                   	// #12
    61f8:	mov	w2, #0x40                  	// #64
    61fc:	str	w2, [x19]
    6200:	strb	w1, [x19, #8]
    6204:	b	5ef4 <peek_token+0xdc>
    6208:	mov	w0, #0x2                   	// #2
    620c:	tbnz	w2, #19, 5ef4 <peek_token+0xdc>
    6210:	mov	w1, #0x21                  	// #33
    6214:	strb	w1, [x19, #8]
    6218:	b	5ef4 <peek_token+0xdc>
    621c:	mov	w0, #0x2                   	// #2
    6220:	tbnz	w2, #19, 5ef4 <peek_token+0xdc>
    6224:	mov	w1, #0x23                  	// #35
    6228:	strb	w1, [x19, #8]
    622c:	b	5ef4 <peek_token+0xdc>
    6230:	mov	w0, #0x2                   	// #2
    6234:	tbnz	w2, #19, 5ef4 <peek_token+0xdc>
    6238:	mov	w1, #0xc                   	// #12
    623c:	mov	w2, #0x200                 	// #512
    6240:	str	w2, [x19]
    6244:	strb	w1, [x19, #8]
    6248:	b	5ef4 <peek_token+0xdc>
    624c:	mov	x0, #0x402                 	// #1026
    6250:	and	x2, x2, x0
    6254:	cmp	x2, #0x2
    6258:	mov	w0, #0x2                   	// #2
    625c:	b.ne	5ef4 <peek_token+0xdc>  // b.any
    6260:	b	6030 <peek_token+0x218>
    6264:	mov	w0, #0x2                   	// #2
    6268:	tbnz	w2, #19, 5ef4 <peek_token+0xdc>
    626c:	mov	w1, #0xc                   	// #12
    6270:	mov	w2, #0x80                  	// #128
    6274:	str	w2, [x19]
    6278:	strb	w1, [x19, #8]
    627c:	b	5ef4 <peek_token+0xdc>
    6280:	mov	x0, #0x402                 	// #1026
    6284:	and	x2, x2, x0
    6288:	cmp	x2, #0x2
    628c:	mov	w0, #0x2                   	// #2
    6290:	b.ne	5ef4 <peek_token+0xdc>  // b.any
    6294:	b	5eec <peek_token+0xd4>
    6298:	mov	w0, #0x2                   	// #2
    629c:	tbnz	w2, #19, 5ef4 <peek_token+0xdc>
    62a0:	mov	w1, #0xc                   	// #12
    62a4:	mov	w2, #0x9                   	// #9
    62a8:	str	w2, [x19]
    62ac:	strb	w1, [x19, #8]
    62b0:	b	5ef4 <peek_token+0xdc>
    62b4:	mov	w0, #0x2                   	// #2
    62b8:	tbnz	w2, #19, 5ef4 <peek_token+0xdc>
    62bc:	mov	w1, #0xc                   	// #12
    62c0:	mov	w2, #0x6                   	// #6
    62c4:	str	w2, [x19]
    62c8:	strb	w1, [x19, #8]
    62cc:	b	5ef4 <peek_token+0xdc>
    62d0:	mov	x0, #0x1200                	// #4608
    62d4:	and	x2, x2, x0
    62d8:	cmp	x2, #0x200
    62dc:	mov	w0, #0x2                   	// #2
    62e0:	b.ne	5ef4 <peek_token+0xdc>  // b.any
    62e4:	b	5fb8 <peek_token+0x1a0>
    62e8:	mov	x1, #0x8400                	// #33792
    62ec:	mov	w0, #0x2                   	// #2
    62f0:	tst	x2, x1
    62f4:	b.ne	5ef4 <peek_token+0xdc>  // b.any
    62f8:	mov	w1, #0xa                   	// #10
    62fc:	strb	w1, [x19, #8]
    6300:	b	5ef4 <peek_token+0xdc>
    6304:	mov	x0, #0x1200                	// #4608
    6308:	and	x2, x2, x0
    630c:	cmp	x2, #0x200
    6310:	mov	w0, #0x2                   	// #2
    6314:	b.ne	5ef4 <peek_token+0xdc>  // b.any
    6318:	mov	w1, #0x17                  	// #23
    631c:	strb	w1, [x19, #8]
    6320:	b	5ef4 <peek_token+0xdc>
    6324:	mov	w1, #0x5                   	// #5
    6328:	mov	w0, #0x1                   	// #1
    632c:	strb	w1, [x19, #8]
    6330:	b	5ef4 <peek_token+0xdc>
    6334:	mov	w0, #0x1                   	// #1
    6338:	tbz	w2, #13, 5ef4 <peek_token+0xdc>
    633c:	b	6190 <peek_token+0x378>
    6340:	mov	w1, #0xb                   	// #11
    6344:	mov	w0, #0x1                   	// #1
    6348:	strb	w1, [x19, #8]
    634c:	b	5ef4 <peek_token+0xdc>
    6350:	tbnz	w2, #3, 63a0 <peek_token+0x588>
    6354:	ldr	w0, [x1, #64]
    6358:	add	w4, w4, #0x1
    635c:	cmp	w4, w0
    6360:	b.eq	63a0 <peek_token+0x588>  // b.none
    6364:	str	w4, [x1, #56]
    6368:	add	x0, sp, #0x30
    636c:	str	x1, [sp, #40]
    6370:	bl	5e18 <peek_token>
    6374:	ldr	x1, [sp, #40]
    6378:	mov	w0, #0x1                   	// #1
    637c:	ldrb	w2, [sp, #56]
    6380:	ldr	w3, [x1, #56]
    6384:	sub	w2, w2, #0x9
    6388:	and	w2, w2, #0xff
    638c:	sub	w3, w3, #0x1
    6390:	str	w3, [x1, #56]
    6394:	cmp	w2, w0
    6398:	b.hi	5ef4 <peek_token+0xdc>  // b.pmore
    639c:	nop
    63a0:	mov	w1, #0xc                   	// #12
    63a4:	mov	w2, #0x20                  	// #32
    63a8:	mov	w0, #0x1                   	// #1
    63ac:	str	w2, [x19]
    63b0:	strb	w1, [x19, #8]
    63b4:	b	5ef4 <peek_token+0xdc>
    63b8:	mov	x1, #0x1200                	// #4608
    63bc:	mov	w0, #0x1                   	// #1
    63c0:	bics	xzr, x1, x2
    63c4:	b.ne	5ef4 <peek_token+0xdc>  // b.any
    63c8:	b	6318 <peek_token+0x500>
    63cc:	mov	x0, #0x8400                	// #33792
    63d0:	and	x2, x2, x0
    63d4:	cmp	x2, #0x8, lsl #12
    63d8:	b.eq	5fd0 <peek_token+0x1b8>  // b.none
    63dc:	mov	w0, #0x1                   	// #1
    63e0:	b	5ef4 <peek_token+0xdc>
    63e4:	mov	w1, #0x14                  	// #20
    63e8:	mov	w0, #0x1                   	// #1
    63ec:	strb	w1, [x19, #8]
    63f0:	b	5ef4 <peek_token+0xdc>
    63f4:	cmp	w0, #0x1
    63f8:	b.le	642c <peek_token+0x614>
    63fc:	ldr	x5, [x1, #16]
    6400:	ldr	w7, [x5, w3, sxtw #2]
    6404:	add	x5, x5, w3, sxtw #2
    6408:	cmn	w7, #0x1
    640c:	b.eq	6468 <peek_token+0x650>  // b.none
    6410:	ldr	w7, [x1, #44]
    6414:	add	w4, w4, #0x2
    6418:	cmp	w7, w4
    641c:	b.eq	642c <peek_token+0x614>  // b.none
    6420:	ldr	w4, [x5, #4]
    6424:	cmn	w4, #0x1
    6428:	b.eq	6468 <peek_token+0x650>  // b.none
    642c:	ldrb	w5, [x1, #100]
    6430:	ldr	w4, [x1, #40]
    6434:	ldr	x7, [x1]
    6438:	cbz	w5, 645c <peek_token+0x644>
    643c:	ldr	x8, [x1, #24]
    6440:	sxtw	x5, w3
    6444:	ldr	w8, [x8, x5, lsl #2]
    6448:	add	w4, w4, w8
    644c:	ldrb	w4, [x7, w4, sxtw]
    6450:	tbz	w4, #7, 6078 <peek_token+0x260>
    6454:	ldrb	w4, [x6, x5]
    6458:	b	6078 <peek_token+0x260>
    645c:	add	w4, w3, w4
    6460:	ldrb	w4, [x7, w4, sxtw]
    6464:	b	6078 <peek_token+0x260>
    6468:	ldrb	w4, [x6, w3, sxtw]
    646c:	mov	w0, #0x1                   	// #1
    6470:	strb	w4, [x19]
    6474:	strb	w0, [x19, #8]
    6478:	b	6094 <peek_token+0x27c>
    647c:	nop
	...

0000000000006488 <fetch_number>:
    6488:	mov	x10, x0
    648c:	mov	x9, x1
    6490:	mov	x12, x2
    6494:	stp	x29, x30, [sp, #-16]!
    6498:	mov	w11, #0xffffffff            	// #-1
    649c:	mov	w13, #0x8030                	// #32816
    64a0:	mov	x29, sp
    64a4:	nop
    64a8:	mov	x2, x12
    64ac:	mov	x1, x10
    64b0:	mov	x0, x9
    64b4:	bl	5e18 <peek_token>
    64b8:	ldr	w3, [x10, #56]
    64bc:	ldrb	w4, [x9, #8]
    64c0:	add	w3, w3, w0
    64c4:	ldrb	w0, [x9]
    64c8:	str	w3, [x10, #56]
    64cc:	cmp	w4, #0x2
    64d0:	b.eq	6524 <fetch_number+0x9c>  // b.none
    64d4:	cmp	w0, #0x2c
    64d8:	ccmp	w4, #0x18, #0x4, ne  // ne = any
    64dc:	b.eq	6528 <fetch_number+0xa0>  // b.none
    64e0:	cmp	w4, #0x1
    64e4:	b.eq	64f0 <fetch_number+0x68>  // b.none
    64e8:	mov	w11, #0xfffffffe            	// #-2
    64ec:	b	64a8 <fetch_number+0x20>
    64f0:	sub	w1, w0, #0x30
    64f4:	and	w2, w1, #0xff
    64f8:	cmp	w2, #0x9
    64fc:	ccmn	w11, #0x2, #0x4, ls  // ls = plast
    6500:	b.eq	64e8 <fetch_number+0x60>  // b.none
    6504:	add	w2, w11, w11, lsl #2
    6508:	cmn	w11, #0x1
    650c:	b.eq	6534 <fetch_number+0xac>  // b.none
    6510:	add	w0, w0, w2, lsl #1
    6514:	cmp	w0, w13
    6518:	csel	w0, w0, w13, le
    651c:	sub	w11, w0, #0x30
    6520:	b	64a8 <fetch_number+0x20>
    6524:	mov	w11, #0xfffffffe            	// #-2
    6528:	mov	w0, w11
    652c:	ldp	x29, x30, [sp], #16
    6530:	ret
    6534:	mov	w11, w1
    6538:	b	64a8 <fetch_number+0x20>
    653c:	nop

0000000000006540 <build_charclass.isra.0>:
    6540:	stp	x29, x30, [sp, #-80]!
    6544:	mov	x29, sp
    6548:	stp	x19, x20, [sp, #16]
    654c:	mov	x20, x0
    6550:	mov	x19, x1
    6554:	stp	x21, x22, [sp, #32]
    6558:	mov	x22, x4
    655c:	stp	x23, x24, [sp, #48]
    6560:	mov	x24, x2
    6564:	mov	x23, x5
    6568:	str	x25, [sp, #64]
    656c:	mov	x25, x3
    6570:	tbnz	w6, #22, 664c <build_charclass.isra.0+0x10c>
    6574:	ldr	w2, [x22]
    6578:	ldr	w1, [x25]
    657c:	ldr	x0, [x24]
    6580:	cmp	w2, w1
    6584:	b.eq	667c <build_charclass.isra.0+0x13c>  // b.none
    6588:	adrp	x2, 0 <grub_cmd_regexp>
    658c:	add	x24, x0, w1, sxtw #2
    6590:	mov	w22, #0x0                   	// #0
    6594:	add	w1, w1, #0x1
    6598:	ldr	x21, [x2]
    659c:	str	w1, [x25]
    65a0:	add	x21, x21, #0x20
    65a4:	nop
    65a8:	mov	x1, x23
    65ac:	mov	x0, x21
    65b0:	bl	0 <grub_strcmp>
    65b4:	cbz	w0, 65cc <build_charclass.isra.0+0x8c>
    65b8:	add	w22, w22, #0x1
    65bc:	add	x21, x21, #0xa
    65c0:	cmp	w22, #0xd
    65c4:	b.ne	65a8 <build_charclass.isra.0+0x68>  // b.any
    65c8:	mov	w22, #0x0                   	// #0
    65cc:	adrp	x1, 0 <grub_cmd_regexp>
    65d0:	str	w22, [x24]
    65d4:	mov	x0, x23
    65d8:	ldr	x1, [x1]
    65dc:	bl	0 <grub_strcmp>
    65e0:	cbnz	w0, 66a0 <build_charclass.isra.0+0x160>
    65e4:	mov	x5, #0x1                   	// #1
    65e8:	cbnz	x20, 6738 <build_charclass.isra.0+0x1f8>
    65ec:	nop
    65f0:	asr	w2, w0, #6
    65f4:	and	w3, w0, #0xffffffdf
    65f8:	sub	w3, w3, #0x41
    65fc:	sub	w4, w0, #0x30
    6600:	lsl	x1, x5, x0
    6604:	sxtw	x2, w2
    6608:	add	w0, w0, #0x1
    660c:	cmp	w3, #0x19
    6610:	b.ls	661c <build_charclass.isra.0+0xdc>  // b.plast
    6614:	cmp	w4, #0x9
    6618:	b.hi	6628 <build_charclass.isra.0+0xe8>  // b.pmore
    661c:	ldr	x3, [x19, x2, lsl #3]
    6620:	orr	x3, x3, x1
    6624:	str	x3, [x19, x2, lsl #3]
    6628:	cmp	w0, #0x100
    662c:	b.ne	65f0 <build_charclass.isra.0+0xb0>  // b.any
    6630:	mov	w0, #0x0                   	// #0
    6634:	ldp	x19, x20, [sp, #16]
    6638:	ldp	x21, x22, [sp, #32]
    663c:	ldp	x23, x24, [sp, #48]
    6640:	ldr	x25, [sp, #64]
    6644:	ldp	x29, x30, [sp], #80
    6648:	ret
    664c:	adrp	x1, 0 <grub_cmd_regexp>
    6650:	mov	x0, x5
    6654:	ldr	x1, [x1]
    6658:	bl	0 <grub_strcmp>
    665c:	cbnz	w0, 6720 <build_charclass.isra.0+0x1e0>
    6660:	adrp	x0, 0 <grub_cmd_regexp>
    6664:	ldr	w2, [x22]
    6668:	ldr	w1, [x25]
    666c:	ldr	x23, [x0]
    6670:	cmp	w2, w1
    6674:	ldr	x0, [x24]
    6678:	b.ne	6588 <build_charclass.isra.0+0x48>  // b.any
    667c:	lsl	w1, w1, #1
    6680:	add	w21, w1, #0x1
    6684:	sbfiz	x1, x21, #2, #32
    6688:	bl	0 <grub_realloc>
    668c:	cbz	x0, 6878 <build_charclass.isra.0+0x338>
    6690:	str	x0, [x24]
    6694:	str	w21, [x22]
    6698:	ldr	w1, [x25]
    669c:	b	6588 <build_charclass.isra.0+0x48>
    66a0:	adrp	x1, 0 <grub_cmd_regexp>
    66a4:	mov	x0, x23
    66a8:	ldr	x1, [x1]
    66ac:	bl	0 <grub_strcmp>
    66b0:	mov	w1, w0
    66b4:	cbnz	w0, 66dc <build_charclass.isra.0+0x19c>
    66b8:	mov	x2, #0x1                   	// #1
    66bc:	cbnz	x20, 6784 <build_charclass.isra.0+0x244>
    66c0:	sub	w0, w1, #0x20
    66c4:	cmp	w0, #0x5e
    66c8:	b.hi	6bac <build_charclass.isra.0+0x66c>  // b.pmore
    66cc:	add	w1, w1, #0x1
    66d0:	cmp	w1, #0x100
    66d4:	b.ne	66c0 <build_charclass.isra.0+0x180>  // b.any
    66d8:	b	6630 <build_charclass.isra.0+0xf0>
    66dc:	adrp	x1, 0 <grub_cmd_regexp>
    66e0:	mov	x0, x23
    66e4:	ldr	x1, [x1]
    66e8:	bl	0 <grub_strcmp>
    66ec:	mov	w1, w0
    66f0:	cbnz	w0, 67ac <build_charclass.isra.0+0x26c>
    66f4:	mov	x3, #0x1                   	// #1
    66f8:	cbnz	x20, 6880 <build_charclass.isra.0+0x340>
    66fc:	nop
    6700:	sub	w0, w1, #0x61
    6704:	add	w2, w1, #0x1
    6708:	cmp	w0, #0x19
    670c:	b.ls	6b3c <build_charclass.isra.0+0x5fc>  // b.plast
    6710:	cmp	w2, #0x100
    6714:	b.eq	6630 <build_charclass.isra.0+0xf0>  // b.none
    6718:	mov	w1, w2
    671c:	b	6700 <build_charclass.isra.0+0x1c0>
    6720:	adrp	x1, 0 <grub_cmd_regexp>
    6724:	mov	x0, x23
    6728:	ldr	x1, [x1]
    672c:	bl	0 <grub_strcmp>
    6730:	cbz	w0, 6660 <build_charclass.isra.0+0x120>
    6734:	b	6574 <build_charclass.isra.0+0x34>
    6738:	mov	x4, x5
    673c:	mov	x0, #0x0                   	// #0
    6740:	and	w1, w0, #0xffffffdf
    6744:	sub	w2, w0, #0x30
    6748:	sub	w1, w1, #0x41
    674c:	cmp	w1, #0x19
    6750:	b.ls	675c <build_charclass.isra.0+0x21c>  // b.plast
    6754:	cmp	w2, #0x9
    6758:	b.hi	6774 <build_charclass.isra.0+0x234>  // b.pmore
    675c:	ldrb	w1, [x20, x0]
    6760:	ubfx	x3, x1, #6, #2
    6764:	lsl	x1, x4, x1
    6768:	ldr	x2, [x19, x3, lsl #3]
    676c:	orr	x1, x2, x1
    6770:	str	x1, [x19, x3, lsl #3]
    6774:	add	x0, x0, #0x1
    6778:	cmp	x0, #0x100
    677c:	b.ne	6740 <build_charclass.isra.0+0x200>  // b.any
    6780:	b	6630 <build_charclass.isra.0+0xf0>
    6784:	mov	x4, x2
    6788:	mov	x0, #0x0                   	// #0
    678c:	nop
    6790:	sub	w1, w0, #0x20
    6794:	cmp	w1, #0x5e
    6798:	b.hi	6b54 <build_charclass.isra.0+0x614>  // b.pmore
    679c:	add	x0, x0, #0x1
    67a0:	cmp	x0, #0x100
    67a4:	b.ne	6790 <build_charclass.isra.0+0x250>  // b.any
    67a8:	b	6630 <build_charclass.isra.0+0xf0>
    67ac:	adrp	x1, 0 <grub_cmd_regexp>
    67b0:	mov	x0, x23
    67b4:	ldr	x1, [x1]
    67b8:	bl	0 <grub_strcmp>
    67bc:	mov	w21, w0
    67c0:	cbnz	w0, 6804 <build_charclass.isra.0+0x2c4>
    67c4:	mov	x22, #0x1                   	// #1
    67c8:	cbnz	x20, 6b74 <build_charclass.isra.0+0x634>
    67cc:	nop
    67d0:	mov	w0, w21
    67d4:	bl	0 <grub_isspace>
    67d8:	asr	w1, w21, #6
    67dc:	lsl	x2, x22, x21
    67e0:	add	w21, w21, #0x1
    67e4:	sxtw	x1, w1
    67e8:	cbz	w0, 67f8 <build_charclass.isra.0+0x2b8>
    67ec:	ldr	x0, [x19, x1, lsl #3]
    67f0:	orr	x0, x0, x2
    67f4:	str	x0, [x19, x1, lsl #3]
    67f8:	cmp	w21, #0x100
    67fc:	b.ne	67d0 <build_charclass.isra.0+0x290>  // b.any
    6800:	b	6630 <build_charclass.isra.0+0xf0>
    6804:	adrp	x1, 0 <grub_cmd_regexp>
    6808:	mov	x0, x23
    680c:	ldr	x1, [x1]
    6810:	bl	0 <grub_strcmp>
    6814:	mov	w1, w0
    6818:	cbnz	w0, 68a4 <build_charclass.isra.0+0x364>
    681c:	mov	x4, #0x1                   	// #1
    6820:	cbnz	x20, 6afc <build_charclass.isra.0+0x5bc>
    6824:	and	w2, w1, #0xffffffdf
    6828:	add	w0, w1, #0x1
    682c:	cmp	w1, #0xff
    6830:	sub	w2, w2, #0x40
    6834:	mov	w1, w0
    6838:	b.eq	6630 <build_charclass.isra.0+0xf0>  // b.none
    683c:	asr	w3, w0, #6
    6840:	cmp	w2, #0x19
    6844:	lsl	x0, x4, x0
    6848:	b.hi	6824 <build_charclass.isra.0+0x2e4>  // b.pmore
    684c:	sxtw	x3, w3
    6850:	cmp	w1, #0xff
    6854:	ldr	x2, [x19, x3, lsl #3]
    6858:	orr	x0, x2, x0
    685c:	str	x0, [x19, x3, lsl #3]
    6860:	and	w2, w1, #0xffffffdf
    6864:	add	w0, w1, #0x1
    6868:	sub	w2, w2, #0x40
    686c:	mov	w1, w0
    6870:	b.ne	683c <build_charclass.isra.0+0x2fc>  // b.any
    6874:	b	6630 <build_charclass.isra.0+0xf0>
    6878:	mov	w0, #0xc                   	// #12
    687c:	b	6634 <build_charclass.isra.0+0xf4>
    6880:	mov	x4, x3
    6884:	mov	x0, #0x0                   	// #0
    6888:	sub	w1, w0, #0x61
    688c:	cmp	w1, #0x19
    6890:	b.ls	6ad8 <build_charclass.isra.0+0x598>  // b.plast
    6894:	cmp	w0, #0xff
    6898:	b.eq	6630 <build_charclass.isra.0+0xf0>  // b.none
    689c:	add	x0, x0, #0x1
    68a0:	b	6888 <build_charclass.isra.0+0x348>
    68a4:	adrp	x1, 0 <grub_cmd_regexp>
    68a8:	mov	x0, x23
    68ac:	ldr	x1, [x1]
    68b0:	bl	0 <grub_strcmp>
    68b4:	cbnz	w0, 6940 <build_charclass.isra.0+0x400>
    68b8:	mov	x3, #0x1                   	// #1
    68bc:	cbnz	x20, 68f8 <build_charclass.isra.0+0x3b8>
    68c0:	sub	w1, w0, #0x30
    68c4:	add	w2, w0, #0x1
    68c8:	cmp	w1, #0x9
    68cc:	b.ls	68e0 <build_charclass.isra.0+0x3a0>  // b.plast
    68d0:	cmp	w2, #0x100
    68d4:	b.eq	6630 <build_charclass.isra.0+0xf0>  // b.none
    68d8:	mov	w0, w2
    68dc:	b	68c0 <build_charclass.isra.0+0x380>
    68e0:	ldr	x1, [x19]
    68e4:	lsl	x0, x3, x0
    68e8:	orr	x0, x1, x0
    68ec:	str	x0, [x19]
    68f0:	mov	w0, w2
    68f4:	b	68c0 <build_charclass.isra.0+0x380>
    68f8:	mov	x4, x3
    68fc:	mov	x0, #0x0                   	// #0
    6900:	sub	w1, w0, #0x30
    6904:	cmp	w1, #0x9
    6908:	b.ls	691c <build_charclass.isra.0+0x3dc>  // b.plast
    690c:	cmp	w0, #0xff
    6910:	b.eq	6630 <build_charclass.isra.0+0xf0>  // b.none
    6914:	add	x0, x0, #0x1
    6918:	b	6900 <build_charclass.isra.0+0x3c0>
    691c:	ldrb	w2, [x20, x0]
    6920:	add	x0, x0, #0x1
    6924:	ubfx	x1, x2, #6, #2
    6928:	lsl	x2, x4, x2
    692c:	lsl	x1, x1, #3
    6930:	ldr	x3, [x19, x1]
    6934:	orr	x2, x3, x2
    6938:	str	x2, [x19, x1]
    693c:	b	6900 <build_charclass.isra.0+0x3c0>
    6940:	adrp	x1, 0 <grub_cmd_regexp>
    6944:	mov	x0, x23
    6948:	ldr	x1, [x1]
    694c:	bl	0 <grub_strcmp>
    6950:	cbnz	w0, 69e0 <build_charclass.isra.0+0x4a0>
    6954:	mov	x4, #0x1                   	// #1
    6958:	cbnz	x20, 699c <build_charclass.isra.0+0x45c>
    695c:	sub	w1, w0, #0x20
    6960:	add	w3, w0, #0x1
    6964:	cmp	w1, #0x5e
    6968:	b.ls	697c <build_charclass.isra.0+0x43c>  // b.plast
    696c:	cmp	w3, #0x100
    6970:	b.eq	6630 <build_charclass.isra.0+0xf0>  // b.none
    6974:	mov	w0, w3
    6978:	b	695c <build_charclass.isra.0+0x41c>
    697c:	asr	w1, w0, #6
    6980:	lsl	x0, x4, x0
    6984:	sbfiz	x1, x1, #3, #32
    6988:	ldr	x2, [x19, x1]
    698c:	orr	x0, x2, x0
    6990:	str	x0, [x19, x1]
    6994:	mov	w0, w3
    6998:	b	695c <build_charclass.isra.0+0x41c>
    699c:	mov	x0, #0x0                   	// #0
    69a0:	sub	w1, w0, #0x20
    69a4:	cmp	w1, #0x5e
    69a8:	b.ls	69bc <build_charclass.isra.0+0x47c>  // b.plast
    69ac:	cmp	w0, #0xff
    69b0:	b.eq	6630 <build_charclass.isra.0+0xf0>  // b.none
    69b4:	add	x0, x0, #0x1
    69b8:	b	69a0 <build_charclass.isra.0+0x460>
    69bc:	ldrb	w2, [x20, x0]
    69c0:	add	x0, x0, #0x1
    69c4:	ubfx	x1, x2, #6, #2
    69c8:	lsl	x2, x4, x2
    69cc:	lsl	x1, x1, #3
    69d0:	ldr	x3, [x19, x1]
    69d4:	orr	x2, x3, x2
    69d8:	str	x2, [x19, x1]
    69dc:	b	69a0 <build_charclass.isra.0+0x460>
    69e0:	adrp	x1, 0 <grub_cmd_regexp>
    69e4:	mov	x0, x23
    69e8:	ldr	x1, [x1]
    69ec:	bl	0 <grub_strcmp>
    69f0:	cbnz	w0, 6a58 <build_charclass.isra.0+0x518>
    69f4:	mov	x3, #0x1                   	// #1
    69f8:	cbnz	x20, 6a34 <build_charclass.isra.0+0x4f4>
    69fc:	sub	w1, w0, #0x41
    6a00:	add	w2, w0, #0x1
    6a04:	cmp	w1, #0x19
    6a08:	b.ls	6a1c <build_charclass.isra.0+0x4dc>  // b.plast
    6a0c:	cmp	w2, #0x100
    6a10:	b.eq	6630 <build_charclass.isra.0+0xf0>  // b.none
    6a14:	mov	w0, w2
    6a18:	b	69fc <build_charclass.isra.0+0x4bc>
    6a1c:	ldr	x1, [x19, #8]
    6a20:	lsl	x0, x3, x0
    6a24:	orr	x0, x1, x0
    6a28:	str	x0, [x19, #8]
    6a2c:	mov	w0, w2
    6a30:	b	69fc <build_charclass.isra.0+0x4bc>
    6a34:	mov	x4, x3
    6a38:	mov	x0, #0x0                   	// #0
    6a3c:	sub	w1, w0, #0x41
    6a40:	cmp	w1, #0x19
    6a44:	b.ls	6ab4 <build_charclass.isra.0+0x574>  // b.plast
    6a48:	cmp	w0, #0xff
    6a4c:	b.eq	6630 <build_charclass.isra.0+0xf0>  // b.none
    6a50:	add	x0, x0, #0x1
    6a54:	b	6a3c <build_charclass.isra.0+0x4fc>
    6a58:	adrp	x1, 0 <grub_cmd_regexp>
    6a5c:	mov	x0, x23
    6a60:	ldr	x1, [x1]
    6a64:	bl	0 <grub_strcmp>
    6a68:	cbnz	w0, 6c08 <build_charclass.isra.0+0x6c8>
    6a6c:	mov	x3, #0x1                   	// #1
    6a70:	cbnz	x20, 6bc8 <build_charclass.isra.0+0x688>
    6a74:	add	w0, w0, #0x1
    6a78:	cmp	w0, #0x100
    6a7c:	b.eq	6630 <build_charclass.isra.0+0xf0>  // b.none
    6a80:	asr	w1, w0, #6
    6a84:	cmp	w0, #0x20
    6a88:	ccmp	w0, #0x9, #0x4, ne  // ne = any
    6a8c:	lsl	x4, x3, x0
    6a90:	sxtw	x1, w1
    6a94:	b.ne	6a74 <build_charclass.isra.0+0x534>  // b.any
    6a98:	ldr	x2, [x19, x1, lsl #3]
    6a9c:	add	w0, w0, #0x1
    6aa0:	cmp	w0, #0x100
    6aa4:	orr	x2, x2, x4
    6aa8:	str	x2, [x19, x1, lsl #3]
    6aac:	b.ne	6a80 <build_charclass.isra.0+0x540>  // b.any
    6ab0:	b	6630 <build_charclass.isra.0+0xf0>
    6ab4:	ldrb	w2, [x20, x0]
    6ab8:	add	x0, x0, #0x1
    6abc:	ubfx	x1, x2, #6, #2
    6ac0:	lsl	x2, x4, x2
    6ac4:	lsl	x1, x1, #3
    6ac8:	ldr	x3, [x19, x1]
    6acc:	orr	x2, x3, x2
    6ad0:	str	x2, [x19, x1]
    6ad4:	b	6a3c <build_charclass.isra.0+0x4fc>
    6ad8:	ldrb	w2, [x20, x0]
    6adc:	add	x0, x0, #0x1
    6ae0:	ubfx	x1, x2, #6, #2
    6ae4:	lsl	x2, x4, x2
    6ae8:	lsl	x1, x1, #3
    6aec:	ldr	x3, [x19, x1]
    6af0:	orr	x2, x3, x2
    6af4:	str	x2, [x19, x1]
    6af8:	b	6888 <build_charclass.isra.0+0x348>
    6afc:	add	x20, x20, x4
    6b00:	mov	x0, #0x0                   	// #0
    6b04:	and	w1, w0, #0xffffffdf
    6b08:	sub	w1, w1, #0x40
    6b0c:	cmp	w1, #0x19
    6b10:	b.hi	6b2c <build_charclass.isra.0+0x5ec>  // b.pmore
    6b14:	ldrb	w1, [x20, x0]
    6b18:	ubfx	x3, x1, #6, #2
    6b1c:	lsl	x1, x4, x1
    6b20:	ldr	x2, [x19, x3, lsl #3]
    6b24:	orr	x1, x2, x1
    6b28:	str	x1, [x19, x3, lsl #3]
    6b2c:	add	x0, x0, #0x1
    6b30:	cmp	x0, #0xff
    6b34:	b.ne	6b04 <build_charclass.isra.0+0x5c4>  // b.any
    6b38:	b	6630 <build_charclass.isra.0+0xf0>
    6b3c:	ldr	x0, [x19, #8]
    6b40:	lsl	x1, x3, x1
    6b44:	orr	x1, x0, x1
    6b48:	str	x1, [x19, #8]
    6b4c:	mov	w1, w2
    6b50:	b	6700 <build_charclass.isra.0+0x1c0>
    6b54:	ldrb	w2, [x20, x0]
    6b58:	ubfx	x1, x2, #6, #2
    6b5c:	lsl	x2, x4, x2
    6b60:	lsl	x1, x1, #3
    6b64:	ldr	x3, [x19, x1]
    6b68:	orr	x2, x3, x2
    6b6c:	str	x2, [x19, x1]
    6b70:	b	679c <build_charclass.isra.0+0x25c>
    6b74:	mov	x21, #0x0                   	// #0
    6b78:	mov	w0, w21
    6b7c:	bl	0 <grub_isspace>
    6b80:	cbz	w0, 6b9c <build_charclass.isra.0+0x65c>
    6b84:	ldrb	w0, [x20, x21]
    6b88:	ubfx	x2, x0, #6, #2
    6b8c:	lsl	x0, x22, x0
    6b90:	ldr	x1, [x19, x2, lsl #3]
    6b94:	orr	x0, x1, x0
    6b98:	str	x0, [x19, x2, lsl #3]
    6b9c:	add	x21, x21, #0x1
    6ba0:	cmp	x21, #0x100
    6ba4:	b.ne	6b78 <build_charclass.isra.0+0x638>  // b.any
    6ba8:	b	6630 <build_charclass.isra.0+0xf0>
    6bac:	asr	w0, w1, #6
    6bb0:	lsl	x4, x2, x1
    6bb4:	sbfiz	x0, x0, #3, #32
    6bb8:	ldr	x3, [x19, x0]
    6bbc:	orr	x3, x3, x4
    6bc0:	str	x3, [x19, x0]
    6bc4:	b	66cc <build_charclass.isra.0+0x18c>
    6bc8:	mov	x0, x3
    6bcc:	mov	x4, x3
    6bd0:	cmp	w0, #0x20
    6bd4:	ccmp	w0, #0x9, #0x4, ne  // ne = any
    6bd8:	b.ne	6bf8 <build_charclass.isra.0+0x6b8>  // b.any
    6bdc:	ldrb	w2, [x20, x0]
    6be0:	ubfx	x1, x2, #6, #2
    6be4:	lsl	x2, x4, x2
    6be8:	lsl	x1, x1, #3
    6bec:	ldr	x3, [x19, x1]
    6bf0:	orr	x2, x3, x2
    6bf4:	str	x2, [x19, x1]
    6bf8:	add	x0, x0, #0x1
    6bfc:	cmp	x0, #0x100
    6c00:	b.ne	6bd0 <build_charclass.isra.0+0x690>  // b.any
    6c04:	b	6630 <build_charclass.isra.0+0xf0>
    6c08:	adrp	x1, 0 <grub_cmd_regexp>
    6c0c:	mov	x0, x23
    6c10:	ldr	x1, [x1]
    6c14:	bl	0 <grub_strcmp>
    6c18:	mov	w21, w0
    6c1c:	cbnz	w0, 6c48 <build_charclass.isra.0+0x708>
    6c20:	mov	x22, #0x1                   	// #1
    6c24:	cbnz	x20, 6db8 <build_charclass.isra.0+0x878>
    6c28:	sub	w0, w21, #0x20
    6c2c:	add	w20, w21, #0x1
    6c30:	cmp	w0, #0x5e
    6c34:	b.ls	6d8c <build_charclass.isra.0+0x84c>  // b.plast
    6c38:	cmp	w20, #0x100
    6c3c:	b.eq	6630 <build_charclass.isra.0+0xf0>  // b.none
    6c40:	mov	w21, w20
    6c44:	b	6c28 <build_charclass.isra.0+0x6e8>
    6c48:	adrp	x1, 0 <grub_cmd_regexp>
    6c4c:	mov	x0, x23
    6c50:	ldr	x1, [x1]
    6c54:	bl	0 <grub_strcmp>
    6c58:	mov	w21, w0
    6c5c:	cbnz	w0, 6cd8 <build_charclass.isra.0+0x798>
    6c60:	mov	x22, #0x1                   	// #1
    6c64:	cbnz	x20, 6c9c <build_charclass.isra.0+0x75c>
    6c68:	mov	w0, w21
    6c6c:	bl	2498 <ispunct>
    6c70:	asr	w1, w21, #6
    6c74:	lsl	x2, x22, x21
    6c78:	add	w21, w21, #0x1
    6c7c:	sbfiz	x1, x1, #3, #32
    6c80:	cbz	w0, 6c90 <build_charclass.isra.0+0x750>
    6c84:	ldr	x0, [x19, x1]
    6c88:	orr	x0, x0, x2
    6c8c:	str	x0, [x19, x1]
    6c90:	cmp	w21, #0x100
    6c94:	b.ne	6c68 <build_charclass.isra.0+0x728>  // b.any
    6c98:	b	6630 <build_charclass.isra.0+0xf0>
    6c9c:	mov	x21, #0x0                   	// #0
    6ca0:	mov	w0, w21
    6ca4:	bl	2498 <ispunct>
    6ca8:	cbz	w0, 6cc8 <build_charclass.isra.0+0x788>
    6cac:	ldrb	w1, [x20, x21]
    6cb0:	ubfx	x0, x1, #6, #2
    6cb4:	lsl	x1, x22, x1
    6cb8:	lsl	x0, x0, #3
    6cbc:	ldr	x2, [x19, x0]
    6cc0:	orr	x1, x2, x1
    6cc4:	str	x1, [x19, x0]
    6cc8:	add	x21, x21, #0x1
    6ccc:	cmp	x21, #0x100
    6cd0:	b.ne	6ca0 <build_charclass.isra.0+0x760>  // b.any
    6cd4:	b	6630 <build_charclass.isra.0+0xf0>
    6cd8:	adrp	x1, 0 <grub_cmd_regexp>
    6cdc:	mov	x0, x23
    6ce0:	ldr	x1, [x1]
    6ce4:	bl	0 <grub_strcmp>
    6ce8:	cbnz	w0, 6d84 <build_charclass.isra.0+0x844>
    6cec:	mov	x4, #0x1                   	// #1
    6cf0:	cbnz	x20, 6d38 <build_charclass.isra.0+0x7f8>
    6cf4:	asr	w1, w0, #6
    6cf8:	and	w2, w0, #0xffffffdf
    6cfc:	sub	w3, w0, #0x30
    6d00:	lsl	x5, x4, x0
    6d04:	sbfiz	x1, x1, #3, #32
    6d08:	sub	w2, w2, #0x41
    6d0c:	cmp	w3, #0x9
    6d10:	add	w0, w0, #0x1
    6d14:	b.ls	6d20 <build_charclass.isra.0+0x7e0>  // b.plast
    6d18:	cmp	w2, #0x5
    6d1c:	b.hi	6d2c <build_charclass.isra.0+0x7ec>  // b.pmore
    6d20:	ldr	x2, [x19, x1]
    6d24:	orr	x2, x2, x5
    6d28:	str	x2, [x19, x1]
    6d2c:	cmp	w0, #0x100
    6d30:	b.ne	6cf4 <build_charclass.isra.0+0x7b4>  // b.any
    6d34:	b	6630 <build_charclass.isra.0+0xf0>
    6d38:	mov	x0, #0x0                   	// #0
    6d3c:	and	w1, w0, #0xffffffdf
    6d40:	sub	w2, w0, #0x30
    6d44:	sub	w1, w1, #0x41
    6d48:	cmp	w2, #0x9
    6d4c:	b.ls	6d58 <build_charclass.isra.0+0x818>  // b.plast
    6d50:	cmp	w1, #0x5
    6d54:	b.hi	6d74 <build_charclass.isra.0+0x834>  // b.pmore
    6d58:	ldrb	w2, [x20, x0]
    6d5c:	ubfx	x1, x2, #6, #2
    6d60:	lsl	x2, x4, x2
    6d64:	lsl	x1, x1, #3
    6d68:	ldr	x3, [x19, x1]
    6d6c:	orr	x2, x3, x2
    6d70:	str	x2, [x19, x1]
    6d74:	add	x0, x0, #0x1
    6d78:	cmp	x0, #0x100
    6d7c:	b.ne	6d3c <build_charclass.isra.0+0x7fc>  // b.any
    6d80:	b	6630 <build_charclass.isra.0+0xf0>
    6d84:	mov	w0, #0x4                   	// #4
    6d88:	b	6634 <build_charclass.isra.0+0xf4>
    6d8c:	mov	w0, w21
    6d90:	bl	0 <grub_isspace>
    6d94:	asr	w1, w21, #6
    6d98:	cbnz	w0, 6c40 <build_charclass.isra.0+0x700>
    6d9c:	sbfiz	x0, x1, #3, #32
    6da0:	lsl	x21, x22, x21
    6da4:	ldr	x1, [x19, x0]
    6da8:	orr	x21, x1, x21
    6dac:	str	x21, [x19, x0]
    6db0:	mov	w21, w20
    6db4:	b	6c28 <build_charclass.isra.0+0x6e8>
    6db8:	mov	x21, #0x0                   	// #0
    6dbc:	sub	w0, w21, #0x20
    6dc0:	cmp	w0, #0x5e
    6dc4:	b.ls	6dd8 <build_charclass.isra.0+0x898>  // b.plast
    6dc8:	cmp	w21, #0xff
    6dcc:	b.eq	6630 <build_charclass.isra.0+0xf0>  // b.none
    6dd0:	add	x21, x21, #0x1
    6dd4:	b	6dbc <build_charclass.isra.0+0x87c>
    6dd8:	mov	w0, w21
    6ddc:	bl	0 <grub_isspace>
    6de0:	cbnz	w0, 6dd0 <build_charclass.isra.0+0x890>
    6de4:	ldrb	w1, [x20, x21]
    6de8:	add	x21, x21, #0x1
    6dec:	ubfx	x0, x1, #6, #2
    6df0:	lsl	x1, x22, x1
    6df4:	lsl	x0, x0, #3
    6df8:	ldr	x2, [x19, x0]
    6dfc:	orr	x1, x2, x1
    6e00:	str	x1, [x19, x0]
    6e04:	b	6dbc <build_charclass.isra.0+0x87c>
	...

0000000000006e70 <build_charclass_op>:
    6e70:	stp	x29, x30, [sp, #-128]!
    6e74:	mov	x29, sp
    6e78:	stp	x19, x20, [sp, #16]
    6e7c:	mov	x20, x3
    6e80:	stp	x21, x22, [sp, #32]
    6e84:	mov	x21, x0
    6e88:	mov	x22, x5
    6e8c:	mov	x0, #0x20                  	// #32
    6e90:	stp	x23, x24, [sp, #48]
    6e94:	and	w23, w4, #0xff
    6e98:	stp	x25, x26, [sp, #64]
    6e9c:	mov	x25, x1
    6ea0:	mov	x26, x2
    6ea4:	str	wzr, [sp, #92]
    6ea8:	bl	0 <grub_zalloc>
    6eac:	cbz	x0, 7084 <build_charclass_op+0x214>
    6eb0:	mov	x19, x0
    6eb4:	mov	x0, #0x38                  	// #56
    6eb8:	bl	0 <grub_zalloc>
    6ebc:	mov	x24, x0
    6ec0:	cbz	x0, 70ac <build_charclass_op+0x23c>
    6ec4:	ldrb	w1, [x0, #32]
    6ec8:	mov	x5, x26
    6ecc:	mov	x0, x25
    6ed0:	add	x4, sp, #0x5c
    6ed4:	add	x3, x24, #0x34
    6ed8:	add	x2, x24, #0x18
    6edc:	bfxil	w1, w23, #0, #1
    6ee0:	strb	w1, [x24, #32]
    6ee4:	mov	x6, #0x0                   	// #0
    6ee8:	mov	x1, x19
    6eec:	bl	6540 <build_charclass.isra.0>
    6ef0:	mov	w25, w0
    6ef4:	cbnz	w0, 70c4 <build_charclass_op+0x254>
    6ef8:	ldrb	w1, [x20]
    6efc:	mov	x0, #0x1                   	// #1
    6f00:	cbz	w1, 6f24 <build_charclass_op+0xb4>
    6f04:	nop
    6f08:	ubfx	x4, x1, #6, #2
    6f0c:	lsl	x1, x0, x1
    6f10:	ldr	x2, [x19, x4, lsl #3]
    6f14:	orr	x1, x2, x1
    6f18:	str	x1, [x19, x4, lsl #3]
    6f1c:	ldrb	w1, [x20, #1]!
    6f20:	cbnz	w1, 6f08 <build_charclass_op+0x98>
    6f24:	cbz	w23, 6f44 <build_charclass_op+0xd4>
    6f28:	mov	x0, #0x0                   	// #0
    6f2c:	ldr	x1, [x19, x0, lsl #3]
    6f30:	mvn	x1, x1
    6f34:	str	x1, [x19, x0, lsl #3]
    6f38:	add	x0, x0, #0x1
    6f3c:	cmp	x0, #0x4
    6f40:	b.ne	6f2c <build_charclass_op+0xbc>  // b.any
    6f44:	ldr	w0, [x21, #164]
    6f48:	cmp	w0, #0x1
    6f4c:	b.le	6f74 <build_charclass_op+0x104>
    6f50:	ldr	x3, [x21, #120]
    6f54:	mov	x1, #0x0                   	// #0
    6f58:	ldr	x0, [x19, x1]
    6f5c:	ldr	x2, [x3, x1]
    6f60:	and	x0, x0, x2
    6f64:	str	x0, [x19, x1]
    6f68:	add	x1, x1, #0x8
    6f6c:	cmp	x1, #0x20
    6f70:	b.ne	6f58 <build_charclass_op+0xe8>  // b.any
    6f74:	mov	w5, #0x3                   	// #3
    6f78:	add	x23, x21, #0x70
    6f7c:	add	x25, x21, #0x80
    6f80:	mov	x0, x23
    6f84:	mov	x1, x25
    6f88:	add	x4, sp, #0x60
    6f8c:	mov	x3, #0x0                   	// #0
    6f90:	mov	x2, #0x0                   	// #0
    6f94:	str	x19, [sp, #96]
    6f98:	strb	w5, [sp, #104]
    6f9c:	bl	2c88 <create_token_tree.isra.0>
    6fa0:	mov	x20, x0
    6fa4:	cbz	x0, 704c <build_charclass_op+0x1dc>
    6fa8:	ldr	w0, [x21, #164]
    6fac:	cmp	w0, #0x1
    6fb0:	b.le	7028 <build_charclass_op+0x1b8>
    6fb4:	ldrb	w0, [x21, #160]
    6fb8:	mov	w5, #0x6                   	// #6
    6fbc:	mov	x3, #0x0                   	// #0
    6fc0:	add	x4, sp, #0x60
    6fc4:	orr	w0, w0, #0x2
    6fc8:	strb	w0, [x21, #160]
    6fcc:	mov	x1, x25
    6fd0:	mov	x0, x23
    6fd4:	mov	x2, #0x0                   	// #0
    6fd8:	str	x24, [sp, #96]
    6fdc:	strb	w5, [sp, #104]
    6fe0:	bl	2c88 <create_token_tree.isra.0>
    6fe4:	mov	x3, x0
    6fe8:	cbz	x0, 704c <build_charclass_op+0x1dc>
    6fec:	mov	w5, #0xa                   	// #10
    6ff0:	mov	x2, x20
    6ff4:	mov	x1, x25
    6ff8:	mov	x0, x23
    6ffc:	add	x4, sp, #0x70
    7000:	strb	w5, [sp, #120]
    7004:	bl	2c88 <create_token_tree.isra.0>
    7008:	mov	x20, x0
    700c:	mov	x0, x20
    7010:	ldp	x19, x20, [sp, #16]
    7014:	ldp	x21, x22, [sp, #32]
    7018:	ldp	x23, x24, [sp, #48]
    701c:	ldp	x25, x26, [sp, #64]
    7020:	ldp	x29, x30, [sp], #128
    7024:	ret
    7028:	mov	x0, x24
    702c:	bl	1c38 <free_charset>
    7030:	mov	x0, x20
    7034:	ldp	x19, x20, [sp, #16]
    7038:	ldp	x21, x22, [sp, #32]
    703c:	ldp	x23, x24, [sp, #48]
    7040:	ldp	x25, x26, [sp, #64]
    7044:	ldp	x29, x30, [sp], #128
    7048:	ret
    704c:	mov	x0, x19
    7050:	bl	0 <grub_free>
    7054:	mov	x0, x24
    7058:	bl	1c38 <free_charset>
    705c:	mov	w0, #0xc                   	// #12
    7060:	str	w0, [x22]
    7064:	mov	x20, #0x0                   	// #0
    7068:	mov	x0, x20
    706c:	ldp	x19, x20, [sp, #16]
    7070:	ldp	x21, x22, [sp, #32]
    7074:	ldp	x23, x24, [sp, #48]
    7078:	ldp	x25, x26, [sp, #64]
    707c:	ldp	x29, x30, [sp], #128
    7080:	ret
    7084:	mov	w0, #0xc                   	// #12
    7088:	str	w0, [x22]
    708c:	mov	x20, #0x0                   	// #0
    7090:	mov	x0, x20
    7094:	ldp	x19, x20, [sp, #16]
    7098:	ldp	x21, x22, [sp, #32]
    709c:	ldp	x23, x24, [sp, #48]
    70a0:	ldp	x25, x26, [sp, #64]
    70a4:	ldp	x29, x30, [sp], #128
    70a8:	ret
    70ac:	mov	x0, x19
    70b0:	bl	0 <grub_free>
    70b4:	mov	w0, #0xc                   	// #12
    70b8:	mov	x20, #0x0                   	// #0
    70bc:	str	w0, [x22]
    70c0:	b	700c <build_charclass_op+0x19c>
    70c4:	mov	x0, x19
    70c8:	bl	0 <grub_free>
    70cc:	mov	x0, x24
    70d0:	mov	x20, #0x0                   	// #0
    70d4:	bl	1c38 <free_charset>
    70d8:	str	w25, [x22]
    70dc:	b	700c <build_charclass_op+0x19c>

00000000000070e0 <parse_expression>:
    70e0:	stp	x29, x30, [sp, #-288]!
    70e4:	mov	x9, x1
    70e8:	mov	x29, sp
    70ec:	stp	x21, x22, [sp, #32]
    70f0:	mov	x22, x2
    70f4:	ldrb	w2, [x2, #8]
    70f8:	stp	x25, x26, [sp, #64]
    70fc:	mov	x21, x0
    7100:	mov	x26, x3
    7104:	stp	x27, x28, [sp, #80]
    7108:	cmp	w2, #0x13
    710c:	str	x5, [sp, #120]
    7110:	ldr	x28, [x1]
    7114:	b.hi	7268 <parse_expression+0x188>  // b.pmore
    7118:	cmp	w2, #0x11
    711c:	b.hi	7aa0 <parse_expression+0x9c0>  // b.pmore
    7120:	cmp	w2, #0x8
    7124:	b.eq	7b40 <parse_expression+0xa60>  // b.none
    7128:	b.ls	76f8 <parse_expression+0x618>  // b.plast
    712c:	cmp	w2, #0xb
    7130:	b.eq	7aa0 <parse_expression+0x9c0>  // b.none
    7134:	cmp	w2, #0xc
    7138:	b.ne	76d8 <parse_expression+0x5f8>  // b.any
    713c:	ldr	w8, [x22]
    7140:	mov	w0, #0x30f                 	// #783
    7144:	stp	x23, x24, [sp, #48]
    7148:	tst	w8, w0
    714c:	b.eq	7190 <parse_expression+0xb0>  // b.none
    7150:	ldrb	w0, [x28, #160]
    7154:	tbnz	w0, #4, 7190 <parse_expression+0xb0>
    7158:	orr	w0, w0, #0x10
    715c:	strb	w0, [x28, #160]
    7160:	mov	w1, w0
    7164:	tbnz	w0, #3, 8294 <parse_expression+0x11b4>
    7168:	mov	x0, #0x7fffffe07fffffe     	// #576460743847706622
    716c:	mov	x2, #0x3ff000000000000     	// #287948901175001088
    7170:	movk	x0, #0x87ff, lsl #16
    7174:	stp	x2, x0, [x28, #168]
    7178:	tbz	w1, #2, 8228 <parse_expression+0x1148>
    717c:	add	x0, x28, #0xb8
    7180:	mov	x2, #0x10                  	// #16
    7184:	mov	w1, #0x0                   	// #0
    7188:	bl	0 <grub_memset>
    718c:	ldr	w8, [x22]
    7190:	sub	w0, w8, #0x100
    7194:	add	x23, x28, #0x70
    7198:	tst	w0, #0xfffffeff
    719c:	add	x28, x28, #0x80
    71a0:	b.ne	7ce0 <parse_expression+0xc00>  // b.any
    71a4:	stp	x19, x20, [sp, #16]
    71a8:	cmp	w8, #0x100
    71ac:	b.eq	7f54 <parse_expression+0xe74>  // b.none
    71b0:	mov	w0, #0x5                   	// #5
    71b4:	str	w0, [x22]
    71b8:	mov	x1, x28
    71bc:	mov	x4, x22
    71c0:	mov	x0, x23
    71c4:	mov	x3, #0x0                   	// #0
    71c8:	mov	x2, #0x0                   	// #0
    71cc:	bl	2c88 <create_token_tree.isra.0>
    71d0:	mov	x20, x0
    71d4:	mov	w1, #0xa                   	// #10
    71d8:	str	w1, [x22]
    71dc:	mov	x4, x22
    71e0:	mov	x1, x28
    71e4:	mov	x3, #0x0                   	// #0
    71e8:	mov	x2, #0x0                   	// #0
    71ec:	mov	x0, x23
    71f0:	bl	2c88 <create_token_tree.isra.0>
    71f4:	mov	w5, #0xa                   	// #10
    71f8:	mov	x19, x0
    71fc:	mov	x1, x28
    7200:	mov	x0, x23
    7204:	mov	x3, x19
    7208:	add	x4, sp, #0x100
    720c:	mov	x2, x20
    7210:	strb	w5, [sp, #264]
    7214:	bl	2c88 <create_token_tree.isra.0>
    7218:	str	x0, [sp, #112]
    721c:	cmp	x20, #0x0
    7220:	ccmp	x19, #0x0, #0x4, ne  // ne = any
    7224:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    7228:	b.eq	7838 <parse_expression+0x758>  // b.none
    722c:	ldp	x19, x20, [sp, #16]
    7230:	mov	x1, x21
    7234:	mov	x2, x26
    7238:	mov	x0, x22
    723c:	bl	5e18 <peek_token>
    7240:	ldr	w1, [x21, #56]
    7244:	ldp	x23, x24, [sp, #48]
    7248:	add	w1, w1, w0
    724c:	str	w1, [x21, #56]
    7250:	ldp	x21, x22, [sp, #32]
    7254:	ldp	x25, x26, [sp, #64]
    7258:	ldp	x27, x28, [sp, #80]
    725c:	ldr	x0, [sp, #112]
    7260:	ldp	x29, x30, [sp], #288
    7264:	ret
    7268:	cmp	w2, #0x21
    726c:	b.hi	767c <parse_expression+0x59c>  // b.pmore
    7270:	cmp	w2, #0x1f
    7274:	b.hi	7ab8 <parse_expression+0x9d8>  // b.pmore
    7278:	cmp	w2, #0x17
    727c:	b.eq	7a9c <parse_expression+0x9bc>  // b.none
    7280:	cmp	w2, #0x18
    7284:	b.ne	7540 <parse_expression+0x460>  // b.any
    7288:	mov	w0, #0x1                   	// #1
    728c:	strb	w0, [x22, #8]
    7290:	mov	x4, x22
    7294:	add	x1, x28, #0x80
    7298:	add	x0, x28, #0x70
    729c:	mov	x3, #0x0                   	// #0
    72a0:	mov	x2, #0x0                   	// #0
    72a4:	bl	2c88 <create_token_tree.isra.0>
    72a8:	str	x0, [sp, #112]
    72ac:	cbz	x0, 7840 <parse_expression+0x760>
    72b0:	mov	x2, x26
    72b4:	mov	x1, x21
    72b8:	mov	x0, x22
    72bc:	bl	5e18 <peek_token>
    72c0:	ldrb	w1, [x22, #8]
    72c4:	ldr	w14, [x21, #56]
    72c8:	subs	w2, w1, #0x12
    72cc:	cset	w9, eq  // eq = none
    72d0:	add	w14, w0, w14
    72d4:	cmp	w1, #0xb
    72d8:	str	w14, [x21, #56]
    72dc:	ccmp	w1, #0x17, #0x4, ne  // ne = any
    72e0:	and	w2, w2, #0xff
    72e4:	ccmp	w2, #0x1, #0x0, ne  // ne = any
    72e8:	b.hi	7250 <parse_expression+0x170>  // b.pmore
    72ec:	add	x25, x28, #0x70
    72f0:	stp	x19, x20, [sp, #16]
    72f4:	stp	x23, x24, [sp, #48]
    72f8:	cmp	w1, #0x17
    72fc:	ldp	x4, x5, [x22]
    7300:	b.eq	7430 <parse_expression+0x350>  // b.none
    7304:	cmp	w1, #0x13
    7308:	mov	x2, x26
    730c:	mov	x1, x21
    7310:	mov	x0, x22
    7314:	mov	w20, #0xffffffff            	// #-1
    7318:	cneg	w20, w20, eq  // eq = none
    731c:	bl	5e18 <peek_token>
    7320:	ldr	w1, [x21, #56]
    7324:	add	w1, w1, w0
    7328:	str	w1, [x21, #56]
    732c:	ldr	x0, [sp, #112]
    7330:	cbz	x0, 752c <parse_expression+0x44c>
    7334:	ldr	x27, [sp, #112]
    7338:	cbnz	w9, 7a40 <parse_expression+0x960>
    733c:	mov	w19, #0x0                   	// #0
    7340:	mov	x24, #0x0                   	// #0
    7344:	ldrb	w0, [x27, #48]
    7348:	cmp	w0, #0x11
    734c:	b.eq	74e0 <parse_expression+0x400>  // b.none
    7350:	cmn	w20, #0x1
    7354:	mov	x2, x27
    7358:	cset	w6, eq  // eq = none
    735c:	add	x23, x28, #0x80
    7360:	add	w6, w6, #0xa
    7364:	mov	x1, x23
    7368:	add	x4, sp, #0x100
    736c:	mov	x0, x25
    7370:	mov	x3, #0x0                   	// #0
    7374:	strb	w6, [sp, #264]
    7378:	bl	2c88 <create_token_tree.isra.0>
    737c:	mov	x2, x0
    7380:	cbz	x0, 73fc <parse_expression+0x31c>
    7384:	add	w19, w19, #0x2
    7388:	cmp	w20, w19
    738c:	b.lt	74f8 <parse_expression+0x418>  // b.tstop
    7390:	mov	x0, x27
    7394:	mov	x1, x28
    7398:	str	x2, [sp, #96]
    739c:	bl	2d68 <duplicate_tree>
    73a0:	ldr	x2, [sp, #96]
    73a4:	mov	w5, #0x10                  	// #16
    73a8:	mov	x3, x0
    73ac:	mov	x27, x0
    73b0:	add	x4, sp, #0x100
    73b4:	mov	x1, x23
    73b8:	mov	x0, x25
    73bc:	strb	w5, [sp, #264]
    73c0:	bl	2c88 <create_token_tree.isra.0>
    73c4:	mov	x2, x0
    73c8:	cmp	x27, #0x0
    73cc:	add	w19, w19, #0x1
    73d0:	add	x4, sp, #0x100
    73d4:	mov	x1, x23
    73d8:	mov	x0, x25
    73dc:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    73e0:	mov	x3, #0x0                   	// #0
    73e4:	b.eq	73fc <parse_expression+0x31c>  // b.none
    73e8:	mov	w5, #0xa                   	// #10
    73ec:	strb	w5, [sp, #264]
    73f0:	bl	2c88 <create_token_tree.isra.0>
    73f4:	mov	x2, x0
    73f8:	cbnz	x0, 7388 <parse_expression+0x2a8>
    73fc:	adrp	x0, 0 <grub_cmd_regexp>
    7400:	mov	w1, #0xc                   	// #12
    7404:	ldr	x2, [sp, #120]
    7408:	ldr	x19, [x0]
    740c:	str	w1, [x2]
    7410:	ldr	x0, [sp, #112]
    7414:	mov	x1, x19
    7418:	mov	x2, #0x0                   	// #0
    741c:	str	xzr, [sp, #112]
    7420:	bl	1778 <postorder>
    7424:	ldp	x19, x20, [sp, #16]
    7428:	ldp	x23, x24, [sp, #48]
    742c:	b	7250 <parse_expression+0x170>
    7430:	mov	x2, x26
    7434:	mov	x1, x22
    7438:	mov	x0, x21
    743c:	stp	x4, x5, [sp, #96]
    7440:	bl	6488 <fetch_number>
    7444:	mov	w19, w0
    7448:	cmn	w0, #0x1
    744c:	ldp	x4, x5, [sp, #96]
    7450:	b.eq	7854 <parse_expression+0x774>  // b.none
    7454:	cmn	w0, #0x2
    7458:	b.eq	7470 <parse_expression+0x390>  // b.none
    745c:	ldrb	w0, [x22, #8]
    7460:	cmp	w0, #0x18
    7464:	b.eq	791c <parse_expression+0x83c>  // b.none
    7468:	cmp	w0, #0x1
    746c:	b.eq	7940 <parse_expression+0x860>  // b.none
    7470:	tbz	w26, #21, 8144 <parse_expression+0x1064>
    7474:	str	w14, [x21, #56]
    7478:	mov	w1, #0x1                   	// #1
    747c:	stp	x4, x5, [x22]
    7480:	strb	w1, [x22, #8]
    7484:	ldr	x1, [sp, #120]
    7488:	ldr	x0, [sp, #112]
    748c:	ldr	w1, [x1]
    7490:	cbnz	w1, 7a94 <parse_expression+0x9b4>
    7494:	str	x0, [sp, #112]
    7498:	ldrb	w1, [x22, #8]
    749c:	cmp	w1, #0xb
    74a0:	cset	w3, eq  // eq = none
    74a4:	cmp	w1, #0x17
    74a8:	cset	w2, eq  // eq = none
    74ac:	tbz	w26, #24, 74bc <parse_expression+0x3dc>
    74b0:	cmp	w3, #0x0
    74b4:	ccmp	w2, #0x0, #0x0, eq  // eq = none
    74b8:	b.ne	7980 <parse_expression+0x8a0>  // b.any
    74bc:	subs	w0, w1, #0x12
    74c0:	cset	w9, eq  // eq = none
    74c4:	cmp	w3, #0x0
    74c8:	ccmp	w2, #0x0, #0x0, eq  // eq = none
    74cc:	and	w0, w0, #0xff
    74d0:	ccmp	w0, #0x1, #0x0, eq  // eq = none
    74d4:	b.hi	7a68 <parse_expression+0x988>  // b.pmore
    74d8:	ldr	w14, [x21, #56]
    74dc:	b	72f8 <parse_expression+0x218>
    74e0:	adrp	x1, 0 <grub_cmd_regexp>
    74e4:	ldrsw	x2, [x27, #40]
    74e8:	mov	x0, x27
    74ec:	ldr	x1, [x1]
    74f0:	bl	1778 <postorder>
    74f4:	b	7350 <parse_expression+0x270>
    74f8:	cbz	x24, 7978 <parse_expression+0x898>
    74fc:	mov	w5, #0x10                  	// #16
    7500:	mov	x3, x2
    7504:	mov	x1, x23
    7508:	mov	x2, x24
    750c:	add	x4, sp, #0x100
    7510:	mov	x0, x25
    7514:	strb	w5, [sp, #264]
    7518:	bl	2c88 <create_token_tree.isra.0>
    751c:	ldr	x1, [sp, #120]
    7520:	ldr	w1, [x1]
    7524:	cbz	w1, 7494 <parse_expression+0x3b4>
    7528:	b	7a94 <parse_expression+0x9b4>
    752c:	ldr	x0, [sp, #120]
    7530:	ldr	w0, [x0]
    7534:	cbnz	w0, 7964 <parse_expression+0x884>
    7538:	str	xzr, [sp, #112]
    753c:	b	7498 <parse_expression+0x3b8>
    7540:	cmp	w2, #0x14
    7544:	b.ne	76bc <parse_expression+0x5dc>  // b.any
    7548:	mov	x0, #0x20                  	// #32
    754c:	stp	x19, x20, [sp, #16]
    7550:	str	wzr, [sp, #172]
    7554:	bl	0 <grub_zalloc>
    7558:	mov	x19, x0
    755c:	mov	x0, #0x38                  	// #56
    7560:	bl	0 <grub_zalloc>
    7564:	mov	x20, x0
    7568:	cmp	x19, #0x0
    756c:	cset	w0, eq  // eq = none
    7570:	cmp	x20, #0x0
    7574:	csinc	w0, w0, wzr, ne  // ne = any
    7578:	cbnz	w0, 7d60 <parse_expression+0xc80>
    757c:	mov	x1, x21
    7580:	mov	x2, x26
    7584:	mov	x0, x22
    7588:	bl	12b0 <peek_token_bracket>
    758c:	ldrb	w1, [x22, #8]
    7590:	mov	w25, w0
    7594:	cmp	w1, #0x2
    7598:	b.eq	8134 <parse_expression+0x1054>  // b.none
    759c:	str	wzr, [sp, #132]
    75a0:	cmp	w1, #0x19
    75a4:	b.eq	7d08 <parse_expression+0xc28>  // b.none
    75a8:	stp	x23, x24, [sp, #48]
    75ac:	cmp	w1, #0x15
    75b0:	b.ne	75bc <parse_expression+0x4dc>  // b.any
    75b4:	mov	w0, #0x1                   	// #1
    75b8:	strb	w0, [x22, #8]
    75bc:	add	x23, sp, #0xe0
    75c0:	mov	w5, #0x1                   	// #1
    75c4:	mov	w24, #0x3                   	// #3
    75c8:	str	wzr, [sp, #96]
    75cc:	str	wzr, [sp, #112]
    75d0:	mov	w3, w25
    75d4:	mov	x4, x26
    75d8:	mov	x2, x22
    75dc:	mov	x1, x21
    75e0:	add	x0, sp, #0xb0
    75e4:	str	w24, [sp, #176]
    75e8:	str	x23, [sp, #184]
    75ec:	bl	5bc8 <parse_bracket_element.isra.0.constprop.0>
    75f0:	cbnz	w0, 7f48 <parse_expression+0xe68>
    75f4:	mov	x1, x21
    75f8:	mov	x2, x26
    75fc:	mov	x0, x22
    7600:	bl	12b0 <peek_token_bracket>
    7604:	ldr	w1, [sp, #176]
    7608:	mov	w25, w0
    760c:	sub	w0, w1, #0x2
    7610:	tst	w0, #0xfffffffd
    7614:	b.eq	762c <parse_expression+0x54c>  // b.none
    7618:	ldrb	w0, [x22, #8]
    761c:	cmp	w0, #0x2
    7620:	b.eq	7e9c <parse_expression+0xdbc>  // b.none
    7624:	cmp	w0, #0x16
    7628:	b.eq	7f84 <parse_expression+0xea4>  // b.none
    762c:	cmp	w1, #0x2
    7630:	b.eq	7e60 <parse_expression+0xd80>  // b.none
    7634:	b.hi	7dc0 <parse_expression+0xce0>  // b.pmore
    7638:	cbz	w1, 7e7c <parse_expression+0xd9c>
    763c:	ldr	w1, [x20, #36]
    7640:	ldr	w2, [sp, #112]
    7644:	ldr	x0, [x20]
    7648:	cmp	w1, w2
    764c:	b.eq	8204 <parse_expression+0x1124>  // b.none
    7650:	add	w2, w1, #0x1
    7654:	str	w2, [x20, #36]
    7658:	ldr	w2, [sp, #184]
    765c:	str	w2, [x0, w1, sxtw #2]
    7660:	ldrb	w0, [x22, #8]
    7664:	cmp	w0, #0x2
    7668:	b.eq	7e9c <parse_expression+0xdbc>  // b.none
    766c:	cmp	w0, #0x15
    7670:	b.eq	7c10 <parse_expression+0xb30>  // b.none
    7674:	mov	w5, #0x0                   	// #0
    7678:	b	75d0 <parse_expression+0x4f0>
    767c:	cmp	w2, #0x23
    7680:	b.hi	7744 <parse_expression+0x664>  // b.pmore
    7684:	adrp	x2, 0 <grub_cmd_regexp>
    7688:	adrp	x0, 0 <grub_cmd_regexp>
    768c:	ldr	x1, [x21, #80]
    7690:	cset	w4, eq  // eq = none
    7694:	ldr	x2, [x2]
    7698:	ldr	x3, [x0]
    769c:	mov	x0, x28
    76a0:	bl	6e70 <build_charclass_op>
    76a4:	str	x0, [sp, #112]
    76a8:	ldr	x1, [sp, #120]
    76ac:	ldr	w1, [x1]
    76b0:	cmp	w1, #0x0
    76b4:	ccmp	x0, #0x0, #0x0, ne  // ne = any
    76b8:	b.ne	72b0 <parse_expression+0x1d0>  // b.any
    76bc:	str	xzr, [sp, #112]
    76c0:	ldp	x21, x22, [sp, #32]
    76c4:	ldp	x25, x26, [sp, #64]
    76c8:	ldp	x27, x28, [sp, #80]
    76cc:	ldr	x0, [sp, #112]
    76d0:	ldp	x29, x30, [sp], #288
    76d4:	ret
    76d8:	cmp	w2, #0x9
    76dc:	b.ne	76bc <parse_expression+0x5dc>  // b.any
    76e0:	tbnz	w26, #17, 7288 <parse_expression+0x1a8>
    76e4:	ldr	x1, [sp, #120]
    76e8:	mov	w0, #0x10                  	// #16
    76ec:	str	xzr, [sp, #112]
    76f0:	str	w0, [x1]
    76f4:	b	7250 <parse_expression+0x170>
    76f8:	cmp	w2, #0x4
    76fc:	b.eq	7adc <parse_expression+0x9fc>  // b.none
    7700:	cmp	w2, #0x5
    7704:	b.ne	7760 <parse_expression+0x680>  // b.any
    7708:	mov	x4, x22
    770c:	add	x1, x28, #0x80
    7710:	add	x0, x28, #0x70
    7714:	mov	x3, #0x0                   	// #0
    7718:	mov	x2, #0x0                   	// #0
    771c:	bl	2c88 <create_token_tree.isra.0>
    7720:	str	x0, [sp, #112]
    7724:	cbz	x0, 7840 <parse_expression+0x760>
    7728:	ldr	w0, [x28, #164]
    772c:	cmp	w0, #0x1
    7730:	b.le	72b0 <parse_expression+0x1d0>
    7734:	ldrb	w0, [x28, #160]
    7738:	orr	w0, w0, #0x2
    773c:	strb	w0, [x28, #160]
    7740:	b	72b0 <parse_expression+0x1d0>
    7744:	cmp	w2, #0x24
    7748:	b.ne	76bc <parse_expression+0x5dc>  // b.any
    774c:	ldr	x1, [sp, #120]
    7750:	mov	w0, #0x5                   	// #5
    7754:	str	xzr, [sp, #112]
    7758:	str	w0, [x1]
    775c:	b	7250 <parse_expression+0x170>
    7760:	cmp	w2, #0x1
    7764:	b.ne	76bc <parse_expression+0x5dc>  // b.any
    7768:	stp	x19, x20, [sp, #16]
    776c:	add	x20, x28, #0x70
    7770:	mov	x0, x20
    7774:	stp	x23, x24, [sp, #48]
    7778:	add	x23, x28, #0x80
    777c:	mov	x1, x23
    7780:	mov	x4, x22
    7784:	mov	x3, #0x0                   	// #0
    7788:	mov	x2, #0x0                   	// #0
    778c:	bl	2c88 <create_token_tree.isra.0>
    7790:	str	x0, [sp, #112]
    7794:	cbz	x0, 7838 <parse_expression+0x758>
    7798:	ldr	w0, [x28, #164]
    779c:	mov	w24, #0x10                  	// #16
    77a0:	cmp	w0, #0x1
    77a4:	b.le	7cd4 <parse_expression+0xbf4>
    77a8:	ldr	w3, [x21, #56]
    77ac:	mov	x2, x26
    77b0:	ldr	w4, [x21, #72]
    77b4:	mov	x1, x21
    77b8:	mov	x0, x22
    77bc:	cmp	w4, w3
    77c0:	b.le	7cd4 <parse_expression+0xbf4>
    77c4:	ldr	w4, [x21, #44]
    77c8:	cmp	w3, w4
    77cc:	b.eq	7cd4 <parse_expression+0xbf4>  // b.none
    77d0:	ldr	x4, [x21, #16]
    77d4:	ldr	w3, [x4, w3, sxtw #2]
    77d8:	cmn	w3, #0x1
    77dc:	b.ne	7cd4 <parse_expression+0xbf4>  // b.any
    77e0:	bl	5e18 <peek_token>
    77e4:	ldr	w1, [x21, #56]
    77e8:	mov	x4, x22
    77ec:	mov	x3, #0x0                   	// #0
    77f0:	mov	x2, #0x0                   	// #0
    77f4:	add	w1, w1, w0
    77f8:	str	w1, [x21, #56]
    77fc:	mov	x0, x20
    7800:	mov	x1, x23
    7804:	bl	2c88 <create_token_tree.isra.0>
    7808:	mov	x19, x0
    780c:	ldr	x2, [sp, #112]
    7810:	mov	x3, x0
    7814:	add	x4, sp, #0x100
    7818:	mov	x1, x23
    781c:	mov	x0, x20
    7820:	strb	w24, [sp, #264]
    7824:	bl	2c88 <create_token_tree.isra.0>
    7828:	str	x0, [sp, #112]
    782c:	cmp	x19, #0x0
    7830:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    7834:	b.ne	77a8 <parse_expression+0x6c8>  // b.any
    7838:	ldp	x19, x20, [sp, #16]
    783c:	ldp	x23, x24, [sp, #48]
    7840:	mov	w0, #0xc                   	// #12
    7844:	ldr	x1, [sp, #120]
    7848:	str	xzr, [sp, #112]
    784c:	str	w0, [x1]
    7850:	b	7250 <parse_expression+0x170>
    7854:	ldrb	w0, [x22, #8]
    7858:	cmp	w0, #0x1
    785c:	b.ne	7950 <parse_expression+0x870>  // b.any
    7860:	ldrb	w0, [x22]
    7864:	cmp	w0, #0x2c
    7868:	b.ne	7950 <parse_expression+0x870>  // b.any
    786c:	mov	w19, #0x0                   	// #0
    7870:	mov	x2, x26
    7874:	mov	x1, x22
    7878:	mov	x0, x21
    787c:	stp	x4, x5, [sp, #96]
    7880:	bl	6488 <fetch_number>
    7884:	mov	w20, w0
    7888:	cmn	w0, #0x2
    788c:	ldp	x4, x5, [sp, #96]
    7890:	b.eq	7470 <parse_expression+0x390>  // b.none
    7894:	cmp	w19, w0
    7898:	ccmn	w0, #0x1, #0x4, gt
    789c:	b.ne	7950 <parse_expression+0x870>  // b.any
    78a0:	ldrb	w0, [x22, #8]
    78a4:	cmp	w0, #0x18
    78a8:	b.ne	7950 <parse_expression+0x870>  // b.any
    78ac:	cmn	w20, #0x1
    78b0:	b.ne	7920 <parse_expression+0x840>  // b.any
    78b4:	mov	w0, #0x7fff                	// #32767
    78b8:	cmp	w19, w0
    78bc:	cset	x0, gt
    78c0:	cbnz	x0, 7930 <parse_expression+0x850>
    78c4:	mov	x1, x21
    78c8:	mov	x2, x26
    78cc:	mov	x0, x22
    78d0:	bl	5e18 <peek_token>
    78d4:	ldr	w1, [x21, #56]
    78d8:	ldr	x3, [sp, #112]
    78dc:	add	w1, w1, w0
    78e0:	str	w1, [x21, #56]
    78e4:	cbz	x3, 752c <parse_expression+0x44c>
    78e8:	orr	w0, w19, w20
    78ec:	cbnz	w0, 79c8 <parse_expression+0x8e8>
    78f0:	adrp	x1, 0 <grub_cmd_regexp>
    78f4:	mov	x0, x3
    78f8:	mov	x2, #0x0                   	// #0
    78fc:	ldr	x19, [x1]
    7900:	mov	x1, x19
    7904:	bl	1778 <postorder>
    7908:	ldr	x0, [sp, #120]
    790c:	ldr	w0, [x0]
    7910:	cbnz	w0, 7410 <parse_expression+0x330>
    7914:	str	xzr, [sp, #112]
    7918:	b	7498 <parse_expression+0x3b8>
    791c:	mov	w20, w19
    7920:	mov	w0, #0x7fff                	// #32767
    7924:	cmp	w20, w0
    7928:	cset	x0, gt
    792c:	cbz	x0, 78c4 <parse_expression+0x7e4>
    7930:	ldr	x1, [sp, #120]
    7934:	mov	w0, #0xf                   	// #15
    7938:	str	w0, [x1]
    793c:	b	795c <parse_expression+0x87c>
    7940:	ldrb	w0, [x22]
    7944:	cmp	w0, #0x2c
    7948:	b.eq	7870 <parse_expression+0x790>  // b.none
    794c:	tbnz	w26, #21, 7474 <parse_expression+0x394>
    7950:	ldr	x1, [sp, #120]
    7954:	mov	w0, #0xa                   	// #10
    7958:	str	w0, [x1]
    795c:	ldr	x0, [sp, #112]
    7960:	cbnz	x0, 830c <parse_expression+0x122c>
    7964:	str	xzr, [sp, #112]
    7968:	ldp	x19, x20, [sp, #16]
    796c:	ldp	x23, x24, [sp, #48]
    7970:	b	76c0 <parse_expression+0x5e0>
    7974:	mov	x2, x24
    7978:	str	x2, [sp, #112]
    797c:	b	7498 <parse_expression+0x3b8>
    7980:	ldr	x0, [sp, #112]
    7984:	cbz	x0, 7a88 <parse_expression+0x9a8>
    7988:	adrp	x1, 0 <grub_cmd_regexp>
    798c:	mov	x2, #0x0                   	// #0
    7990:	ldr	x1, [x1]
    7994:	bl	1778 <postorder>
    7998:	ldp	x19, x20, [sp, #16]
    799c:	ldp	x23, x24, [sp, #48]
    79a0:	mov	w0, #0xd                   	// #13
    79a4:	ldr	x1, [sp, #120]
    79a8:	str	xzr, [sp, #112]
    79ac:	ldp	x21, x22, [sp, #32]
    79b0:	str	w0, [x1]
    79b4:	ldp	x25, x26, [sp, #64]
    79b8:	ldp	x27, x28, [sp, #80]
    79bc:	ldr	x0, [sp, #112]
    79c0:	ldp	x29, x30, [sp], #288
    79c4:	ret
    79c8:	cmp	w19, #0x0
    79cc:	b.le	83d4 <parse_expression+0x12f4>
    79d0:	cmp	w19, #0x1
    79d4:	b.eq	83e0 <parse_expression+0x1300>  // b.none
    79d8:	ldr	x27, [sp, #112]
    79dc:	add	x0, x28, #0x80
    79e0:	mov	w23, #0x2                   	// #2
    79e4:	str	x0, [sp, #96]
    79e8:	mov	x24, x27
    79ec:	b	79f8 <parse_expression+0x918>
    79f0:	cmp	w19, w23
    79f4:	b.lt	7a48 <parse_expression+0x968>  // b.tstop
    79f8:	mov	x0, x27
    79fc:	mov	x1, x28
    7a00:	bl	2d68 <duplicate_tree>
    7a04:	mov	x27, x0
    7a08:	ldr	x1, [sp, #96]
    7a0c:	mov	w5, #0x10                  	// #16
    7a10:	mov	x2, x24
    7a14:	mov	x3, x0
    7a18:	add	x4, sp, #0x100
    7a1c:	mov	x0, x25
    7a20:	strb	w5, [sp, #264]
    7a24:	bl	2c88 <create_token_tree.isra.0>
    7a28:	cmp	x27, #0x0
    7a2c:	add	w23, w23, #0x1
    7a30:	mov	x24, x0
    7a34:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    7a38:	b.ne	79f0 <parse_expression+0x910>  // b.any
    7a3c:	b	73fc <parse_expression+0x31c>
    7a40:	mov	x24, x27
    7a44:	mov	w19, #0x1                   	// #1
    7a48:	cmp	w19, w20
    7a4c:	b.eq	7974 <parse_expression+0x894>  // b.none
    7a50:	mov	x0, x27
    7a54:	mov	x1, x28
    7a58:	bl	2d68 <duplicate_tree>
    7a5c:	mov	x27, x0
    7a60:	cbnz	x0, 7344 <parse_expression+0x264>
    7a64:	b	73fc <parse_expression+0x31c>
    7a68:	ldp	x19, x20, [sp, #16]
    7a6c:	ldp	x21, x22, [sp, #32]
    7a70:	ldp	x23, x24, [sp, #48]
    7a74:	ldp	x25, x26, [sp, #64]
    7a78:	ldp	x27, x28, [sp, #80]
    7a7c:	ldr	x0, [sp, #112]
    7a80:	ldp	x29, x30, [sp], #288
    7a84:	ret
    7a88:	ldp	x19, x20, [sp, #16]
    7a8c:	ldp	x23, x24, [sp, #48]
    7a90:	b	79a0 <parse_expression+0x8c0>
    7a94:	cbnz	x0, 7494 <parse_expression+0x3b4>
    7a98:	b	795c <parse_expression+0x87c>
    7a9c:	tbnz	w3, #24, 79a0 <parse_expression+0x8c0>
    7aa0:	tbnz	w26, #5, 79a0 <parse_expression+0x8c0>
    7aa4:	tbnz	w26, #4, 7eb0 <parse_expression+0xdd0>
    7aa8:	cmp	w2, #0x9
    7aac:	b.ne	7288 <parse_expression+0x1a8>  // b.any
    7ab0:	tbnz	w26, #17, 7288 <parse_expression+0x1a8>
    7ab4:	b	76e4 <parse_expression+0x604>
    7ab8:	adrp	x0, 0 <grub_cmd_regexp>
    7abc:	adrp	x3, 0 <grub_cmd_regexp>
    7ac0:	cmp	w2, #0x21
    7ac4:	ldr	x3, [x3]
    7ac8:	cset	w4, eq  // eq = none
    7acc:	ldr	x2, [x0]
    7ad0:	mov	x0, x28
    7ad4:	ldr	x1, [x21, #80]
    7ad8:	b	76a0 <parse_expression+0x5c0>
    7adc:	ldr	w2, [x22]
    7ae0:	mov	w0, #0x1                   	// #1
    7ae4:	ldr	x1, [x28, #152]
    7ae8:	lsl	w0, w0, w2
    7aec:	sxtw	x0, w0
    7af0:	tst	x0, x1
    7af4:	b.eq	8184 <parse_expression+0x10a4>  // b.none
    7af8:	ldr	x1, [x28, #144]
    7afc:	mov	x4, x22
    7b00:	mov	x3, #0x0                   	// #0
    7b04:	mov	x2, #0x0                   	// #0
    7b08:	orr	x0, x1, x0
    7b0c:	str	x0, [x28, #144]
    7b10:	add	x1, x28, #0x80
    7b14:	add	x0, x28, #0x70
    7b18:	bl	2c88 <create_token_tree.isra.0>
    7b1c:	str	x0, [sp, #112]
    7b20:	cbz	x0, 7840 <parse_expression+0x760>
    7b24:	ldrb	w0, [x28, #160]
    7b28:	ldr	w1, [x28, #140]
    7b2c:	orr	w0, w0, #0x2
    7b30:	strb	w0, [x28, #160]
    7b34:	add	w1, w1, #0x1
    7b38:	str	w1, [x28, #140]
    7b3c:	b	72b0 <parse_expression+0x1d0>
    7b40:	stp	x19, x20, [sp, #16]
    7b44:	orr	x2, x3, #0x800000
    7b48:	mov	x1, x0
    7b4c:	ldr	x19, [x9, #48]
    7b50:	mov	x0, x22
    7b54:	str	w4, [sp, #112]
    7b58:	add	x3, x19, #0x1
    7b5c:	str	x3, [x9, #48]
    7b60:	bl	5e18 <peek_token>
    7b64:	ldr	w1, [x21, #56]
    7b68:	mov	x2, #0x0                   	// #0
    7b6c:	ldrb	w3, [x22, #8]
    7b70:	add	w1, w1, w0
    7b74:	str	w1, [x21, #56]
    7b78:	cmp	w3, #0x9
    7b7c:	b.ne	7bb8 <parse_expression+0xad8>  // b.any
    7b80:	cmp	x19, #0x8
    7b84:	b.ls	7bf4 <parse_expression+0xb14>  // b.plast
    7b88:	mov	w5, #0x11                  	// #17
    7b8c:	add	x4, sp, #0x100
    7b90:	add	x1, x28, #0x80
    7b94:	add	x0, x28, #0x70
    7b98:	mov	x3, #0x0                   	// #0
    7b9c:	strb	w5, [sp, #264]
    7ba0:	bl	2c88 <create_token_tree.isra.0>
    7ba4:	str	x0, [sp, #112]
    7ba8:	cbz	x0, 8160 <parse_expression+0x1080>
    7bac:	str	w19, [x0, #40]
    7bb0:	ldp	x19, x20, [sp, #16]
    7bb4:	b	72b0 <parse_expression+0x1d0>
    7bb8:	ldr	x20, [sp, #120]
    7bbc:	mov	x1, x9
    7bc0:	ldr	w4, [sp, #112]
    7bc4:	mov	x2, x22
    7bc8:	mov	x3, x26
    7bcc:	mov	x0, x21
    7bd0:	add	w4, w4, #0x1
    7bd4:	mov	x5, x20
    7bd8:	bl	8610 <parse_reg_exp>
    7bdc:	mov	x2, x0
    7be0:	ldr	w1, [x20]
    7be4:	cbz	w1, 7d88 <parse_expression+0xca8>
    7be8:	str	xzr, [sp, #112]
    7bec:	ldp	x19, x20, [sp, #16]
    7bf0:	b	76c0 <parse_expression+0x5e0>
    7bf4:	mov	w0, #0x1                   	// #1
    7bf8:	ldr	x1, [x28, #152]
    7bfc:	lsl	w0, w0, w19
    7c00:	sxtw	x0, w0
    7c04:	orr	x0, x1, x0
    7c08:	str	x0, [x28, #152]
    7c0c:	b	7b88 <parse_expression+0xaa8>
    7c10:	ldr	w0, [x21, #56]
    7c14:	add	w7, w0, w25
    7c18:	ldr	w0, [sp, #132]
    7c1c:	str	w7, [x21, #56]
    7c20:	cbz	w0, 7c40 <parse_expression+0xb60>
    7c24:	mov	x0, #0x0                   	// #0
    7c28:	ldr	x1, [x19, x0, lsl #3]
    7c2c:	mvn	x1, x1
    7c30:	str	x1, [x19, x0, lsl #3]
    7c34:	add	x0, x0, #0x1
    7c38:	cmp	x0, #0x4
    7c3c:	b.ne	7c28 <parse_expression+0xb48>  // b.any
    7c40:	ldr	w2, [x28, #164]
    7c44:	cmp	w2, #0x1
    7c48:	b.le	7c70 <parse_expression+0xb90>
    7c4c:	ldr	x3, [x28, #120]
    7c50:	mov	x0, #0x0                   	// #0
    7c54:	ldr	x1, [x19, x0]
    7c58:	ldr	x4, [x3, x0]
    7c5c:	and	x1, x1, x4
    7c60:	str	x1, [x19, x0]
    7c64:	add	x0, x0, #0x8
    7c68:	cmp	x0, #0x20
    7c6c:	b.ne	7c54 <parse_expression+0xb74>  // b.any
    7c70:	ldr	w0, [x20, #36]
    7c74:	cbnz	w0, 8198 <parse_expression+0x10b8>
    7c78:	ldr	x0, [x20, #40]
    7c7c:	cbnz	x0, 8198 <parse_expression+0x10b8>
    7c80:	ldr	w0, [x20, #48]
    7c84:	cbnz	w0, 8198 <parse_expression+0x10b8>
    7c88:	cmp	w2, #0x1
    7c8c:	b.le	7ca0 <parse_expression+0xbc0>
    7c90:	ldr	w0, [x20, #52]
    7c94:	cbnz	w0, 8198 <parse_expression+0x10b8>
    7c98:	ldrb	w0, [x20, #32]
    7c9c:	tbnz	w0, #0, 8198 <parse_expression+0x10b8>
    7ca0:	mov	x0, x20
    7ca4:	bl	1c38 <free_charset>
    7ca8:	mov	w5, #0x3                   	// #3
    7cac:	mov	x4, x23
    7cb0:	add	x1, x28, #0x80
    7cb4:	add	x0, x28, #0x70
    7cb8:	mov	x3, #0x0                   	// #0
    7cbc:	mov	x2, #0x0                   	// #0
    7cc0:	str	x19, [sp, #224]
    7cc4:	strb	w5, [sp, #232]
    7cc8:	bl	2c88 <create_token_tree.isra.0>
    7ccc:	str	x0, [sp, #112]
    7cd0:	cbz	x0, 7f44 <parse_expression+0xe64>
    7cd4:	ldp	x19, x20, [sp, #16]
    7cd8:	ldp	x23, x24, [sp, #48]
    7cdc:	b	72b0 <parse_expression+0x1d0>
    7ce0:	mov	x1, x28
    7ce4:	mov	x0, x23
    7ce8:	mov	x4, x22
    7cec:	mov	x3, #0x0                   	// #0
    7cf0:	mov	x2, #0x0                   	// #0
    7cf4:	bl	2c88 <create_token_tree.isra.0>
    7cf8:	str	x0, [sp, #112]
    7cfc:	cbnz	x0, 7230 <parse_expression+0x150>
    7d00:	ldp	x23, x24, [sp, #48]
    7d04:	b	7840 <parse_expression+0x760>
    7d08:	ldrb	w0, [x20, #32]
    7d0c:	orr	w0, w0, #0x1
    7d10:	strb	w0, [x20, #32]
    7d14:	tbz	w26, #8, 7d24 <parse_expression+0xc44>
    7d18:	ldr	x0, [x19]
    7d1c:	orr	x0, x0, #0x400
    7d20:	str	x0, [x19]
    7d24:	ldr	w3, [x21, #56]
    7d28:	mov	x1, x21
    7d2c:	mov	x2, x26
    7d30:	mov	x0, x22
    7d34:	add	w7, w3, w25
    7d38:	str	w7, [x21, #56]
    7d3c:	bl	12b0 <peek_token_bracket>
    7d40:	mov	w25, w0
    7d44:	ldrb	w1, [x22, #8]
    7d48:	cmp	w1, #0x2
    7d4c:	b.eq	8134 <parse_expression+0x1054>  // b.none
    7d50:	mov	w0, #0x1                   	// #1
    7d54:	stp	x23, x24, [sp, #48]
    7d58:	str	w0, [sp, #132]
    7d5c:	b	75ac <parse_expression+0x4cc>
    7d60:	mov	x0, x19
    7d64:	str	xzr, [sp, #112]
    7d68:	bl	0 <grub_free>
    7d6c:	mov	x0, x20
    7d70:	bl	0 <grub_free>
    7d74:	ldr	x1, [sp, #120]
    7d78:	mov	w0, #0xc                   	// #12
    7d7c:	ldp	x19, x20, [sp, #16]
    7d80:	str	w0, [x1]
    7d84:	b	7250 <parse_expression+0x170>
    7d88:	ldrb	w1, [x22, #8]
    7d8c:	cmp	w1, #0x9
    7d90:	b.eq	7b80 <parse_expression+0xaa0>  // b.none
    7d94:	cbz	x0, 7da8 <parse_expression+0xcc8>
    7d98:	adrp	x1, 0 <grub_cmd_regexp>
    7d9c:	mov	x2, #0x0                   	// #0
    7da0:	ldr	x1, [x1]
    7da4:	bl	1778 <postorder>
    7da8:	ldr	x1, [sp, #120]
    7dac:	mov	w0, #0x8                   	// #8
    7db0:	str	xzr, [sp, #112]
    7db4:	ldp	x19, x20, [sp, #16]
    7db8:	str	w0, [x1]
    7dbc:	b	76c0 <parse_expression+0x5e0>
    7dc0:	cmp	w1, #0x3
    7dc4:	b.eq	7e44 <parse_expression+0xd64>  // b.none
    7dc8:	cmp	w1, #0x4
    7dcc:	b.ne	7e28 <parse_expression+0xd48>  // b.any
    7dd0:	ldr	x0, [x21, #80]
    7dd4:	mov	x1, x19
    7dd8:	ldr	x5, [sp, #184]
    7ddc:	mov	x6, x26
    7de0:	add	x4, sp, #0xac
    7de4:	add	x3, x20, #0x34
    7de8:	add	x2, x20, #0x18
    7dec:	bl	6540 <build_charclass.isra.0>
    7df0:	ldr	x1, [sp, #120]
    7df4:	str	w0, [x1]
    7df8:	cbz	w0, 7660 <parse_expression+0x580>
    7dfc:	ldp	x23, x24, [sp, #48]
    7e00:	mov	x0, x19
    7e04:	bl	0 <grub_free>
    7e08:	mov	x0, x20
    7e0c:	bl	1c38 <free_charset>
    7e10:	ldr	x0, [sp, #120]
    7e14:	ldr	w0, [x0]
    7e18:	cbnz	w0, 7be8 <parse_expression+0xb08>
    7e1c:	str	xzr, [sp, #112]
    7e20:	ldp	x19, x20, [sp, #16]
    7e24:	b	72b0 <parse_expression+0x1d0>
    7e28:	adrp	x1, 0 <grub_cmd_regexp>
    7e2c:	adrp	x0, 0 <grub_cmd_regexp>
    7e30:	mov	w2, #0xced                 	// #3309
    7e34:	ldr	x1, [x1]
    7e38:	ldr	x0, [x0]
    7e3c:	bl	0 <grub_printf>
    7e40:	b	7660 <parse_expression+0x580>
    7e44:	ldr	x1, [sp, #184]
    7e48:	mov	x0, x19
    7e4c:	bl	4750 <build_collating_symbol.isra.0>
    7e50:	ldr	x1, [sp, #120]
    7e54:	str	w0, [x1]
    7e58:	cbz	w0, 7660 <parse_expression+0x580>
    7e5c:	b	7dfc <parse_expression+0xd1c>
    7e60:	ldr	x1, [sp, #184]
    7e64:	mov	x0, x19
    7e68:	bl	4750 <build_collating_symbol.isra.0>
    7e6c:	ldr	x1, [sp, #120]
    7e70:	str	w0, [x1]
    7e74:	cbz	w0, 7660 <parse_expression+0x580>
    7e78:	b	7dfc <parse_expression+0xd1c>
    7e7c:	ldrb	w1, [sp, #184]
    7e80:	mov	x0, #0x1                   	// #1
    7e84:	ubfx	x2, x1, #6, #2
    7e88:	lsl	x1, x0, x1
    7e8c:	ldr	x0, [x19, x2, lsl #3]
    7e90:	orr	x0, x0, x1
    7e94:	str	x0, [x19, x2, lsl #3]
    7e98:	b	7660 <parse_expression+0x580>
    7e9c:	ldr	x1, [sp, #120]
    7ea0:	mov	w0, #0x7                   	// #7
    7ea4:	ldp	x23, x24, [sp, #48]
    7ea8:	str	w0, [x1]
    7eac:	b	7e00 <parse_expression+0xd20>
    7eb0:	mov	x2, x26
    7eb4:	mov	x1, x21
    7eb8:	mov	x0, x22
    7ebc:	str	w4, [sp, #112]
    7ec0:	bl	5e18 <peek_token>
    7ec4:	ldr	w1, [x21, #56]
    7ec8:	mov	x3, x26
    7ecc:	ldr	w4, [sp, #112]
    7ed0:	mov	x2, x22
    7ed4:	ldr	x5, [sp, #120]
    7ed8:	add	w1, w1, w0
    7edc:	str	w1, [x21, #56]
    7ee0:	mov	x0, x21
    7ee4:	mov	x1, x9
    7ee8:	bl	70e0 <parse_expression>
    7eec:	str	x0, [sp, #112]
    7ef0:	b	7250 <parse_expression+0x170>
    7ef4:	mov	w5, #0x3                   	// #3
    7ef8:	mov	x2, #0x0                   	// #0
    7efc:	mov	x4, x23
    7f00:	mov	x1, x25
    7f04:	mov	x0, x24
    7f08:	mov	x3, #0x0                   	// #0
    7f0c:	str	x19, [sp, #224]
    7f10:	strb	w5, [sp, #232]
    7f14:	bl	2c88 <create_token_tree.isra.0>
    7f18:	mov	x2, x0
    7f1c:	cbz	x0, 7f44 <parse_expression+0xe64>
    7f20:	ldr	x3, [sp, #112]
    7f24:	mov	w5, #0xa                   	// #10
    7f28:	mov	x1, x25
    7f2c:	mov	x0, x24
    7f30:	add	x4, sp, #0x100
    7f34:	strb	w5, [sp, #264]
    7f38:	bl	2c88 <create_token_tree.isra.0>
    7f3c:	str	x0, [sp, #112]
    7f40:	cbnz	x0, 7cd4 <parse_expression+0xbf4>
    7f44:	mov	w0, #0xc                   	// #12
    7f48:	ldr	x1, [sp, #120]
    7f4c:	str	w0, [x1]
    7f50:	b	7dfc <parse_expression+0xd1c>
    7f54:	mov	w0, #0x6                   	// #6
    7f58:	str	w0, [x22]
    7f5c:	mov	x1, x28
    7f60:	mov	x4, x22
    7f64:	mov	x0, x23
    7f68:	mov	x3, #0x0                   	// #0
    7f6c:	mov	x2, #0x0                   	// #0
    7f70:	bl	2c88 <create_token_tree.isra.0>
    7f74:	mov	w1, #0x9                   	// #9
    7f78:	mov	x20, x0
    7f7c:	str	w1, [x22]
    7f80:	b	71dc <parse_expression+0xfc>
    7f84:	ldr	w3, [x21, #56]
    7f88:	mov	x1, x21
    7f8c:	mov	x2, x26
    7f90:	add	x0, sp, #0xd0
    7f94:	add	w3, w3, w25
    7f98:	str	w3, [x21, #56]
    7f9c:	bl	12b0 <peek_token_bracket>
    7fa0:	mov	w3, w0
    7fa4:	ldrb	w1, [sp, #216]
    7fa8:	cmp	w1, #0x2
    7fac:	b.eq	7e9c <parse_expression+0xdbc>  // b.none
    7fb0:	cmp	w1, #0x15
    7fb4:	b.eq	8168 <parse_expression+0x1088>  // b.none
    7fb8:	add	x6, sp, #0x100
    7fbc:	mov	x4, x26
    7fc0:	add	x2, sp, #0xd0
    7fc4:	mov	x1, x21
    7fc8:	add	x0, sp, #0xc0
    7fcc:	mov	w5, #0x1                   	// #1
    7fd0:	str	w24, [sp, #192]
    7fd4:	str	x6, [sp, #200]
    7fd8:	bl	5bc8 <parse_bracket_element.isra.0.constprop.0>
    7fdc:	mov	w27, w0
    7fe0:	cbnz	w0, 82fc <parse_expression+0x121c>
    7fe4:	mov	x2, x26
    7fe8:	mov	x1, x21
    7fec:	mov	x0, x22
    7ff0:	bl	12b0 <peek_token_bracket>
    7ff4:	ldr	w2, [x28, #164]
    7ff8:	mov	w25, w0
    7ffc:	ldr	w1, [sp, #176]
    8000:	cmp	w2, #0x1
    8004:	sub	w0, w1, #0x2
    8008:	csel	x4, x20, xzr, gt
    800c:	tst	w0, #0xfffffffd
    8010:	b.eq	82e8 <parse_expression+0x1208>  // b.none
    8014:	ldr	w0, [sp, #192]
    8018:	sub	w2, w0, #0x2
    801c:	tst	w2, #0xfffffffd
    8020:	b.eq	82e8 <parse_expression+0x1208>  // b.none
    8024:	cmp	w1, #0x3
    8028:	b.eq	8344 <parse_expression+0x1264>  // b.none
    802c:	cmp	w0, #0x3
    8030:	b.eq	8324 <parse_expression+0x1244>  // b.none
    8034:	ldr	w2, [sp, #176]
    8038:	cbnz	w2, 82b0 <parse_expression+0x11d0>
    803c:	ldrb	w1, [sp, #184]
    8040:	cmp	w2, #0x0
    8044:	cset	w5, eq  // eq = none
    8048:	cmp	w2, #0x3
    804c:	csinc	w5, w5, wzr, ne  // ne = any
    8050:	cbnz	w0, 808c <parse_expression+0xfac>
    8054:	ldrb	w2, [sp, #200]
    8058:	cbz	w5, 82a0 <parse_expression+0x11c0>
    805c:	cmp	w0, #0x3
    8060:	mov	w5, w1
    8064:	cset	w6, eq  // eq = none
    8068:	cmp	w0, #0x0
    806c:	csinc	w0, w6, wzr, ne  // ne = any
    8070:	cbz	x4, 8318 <parse_expression+0x1238>
    8074:	tst	x1, #0x80
    8078:	csinv	w5, w1, wzr, eq  // eq = none
    807c:	cbz	w0, 809c <parse_expression+0xfbc>
    8080:	tbnz	w2, #7, 82d4 <parse_expression+0x11f4>
    8084:	mov	w0, #0x0                   	// #0
    8088:	b	80a8 <parse_expression+0xfc8>
    808c:	cmp	w0, #0x3
    8090:	b.eq	82c8 <parse_expression+0x11e8>  // b.none
    8094:	cbnz	w5, 8364 <parse_expression+0x1284>
    8098:	ldr	w5, [sp, #184]
    809c:	ldr	w2, [sp, #200]
    80a0:	cmn	w2, #0x1
    80a4:	cset	w0, eq  // eq = none
    80a8:	cmp	w0, #0x0
    80ac:	ccmn	w5, #0x1, #0x4, eq  // eq = none
    80b0:	b.eq	82d4 <parse_expression+0x11f4>  // b.none
    80b4:	tst	x26, #0x10000
    80b8:	ccmp	w2, w5, #0x0, ne  // ne = any
    80bc:	b.lt	82e8 <parse_expression+0x1208>  // b.tstop
    80c0:	cbz	x4, 80f0 <parse_expression+0x1010>
    80c4:	ldr	w0, [x4, #48]
    80c8:	ldr	w1, [sp, #96]
    80cc:	ldr	x6, [x4, #8]
    80d0:	cmp	w0, w1
    80d4:	b.eq	8378 <parse_expression+0x1298>  // b.none
    80d8:	str	w5, [x6, w0, sxtw #2]
    80dc:	ldr	x1, [x4, #16]
    80e0:	ldr	w0, [x4, #48]
    80e4:	add	w6, w0, #0x1
    80e8:	str	w6, [x4, #48]
    80ec:	str	w2, [x1, w0, sxtw #2]
    80f0:	mov	x6, #0x1                   	// #1
    80f4:	nop
    80f8:	asr	w1, w27, #6
    80fc:	cmp	w5, w27
    8100:	ccmp	w2, w27, #0x1, le
    8104:	lsl	x4, x6, x27
    8108:	sxtw	x1, w1
    810c:	add	w27, w27, #0x1
    8110:	b.lt	8120 <parse_expression+0x1040>  // b.tstop
    8114:	ldr	x0, [x19, x1, lsl #3]
    8118:	orr	x0, x0, x4
    811c:	str	x0, [x19, x1, lsl #3]
    8120:	cmp	w27, #0x100
    8124:	b.ne	80f8 <parse_expression+0x1018>  // b.any
    8128:	ldr	x0, [sp, #120]
    812c:	str	wzr, [x0]
    8130:	b	7660 <parse_expression+0x580>
    8134:	ldr	x1, [sp, #120]
    8138:	mov	w0, #0x2                   	// #2
    813c:	str	w0, [x1]
    8140:	b	7e00 <parse_expression+0xd20>
    8144:	ldrb	w0, [x22, #8]
    8148:	cmp	w0, #0x2
    814c:	b.ne	7950 <parse_expression+0x870>  // b.any
    8150:	ldr	x1, [sp, #120]
    8154:	mov	w0, #0x9                   	// #9
    8158:	str	w0, [x1]
    815c:	b	795c <parse_expression+0x87c>
    8160:	ldp	x19, x20, [sp, #16]
    8164:	b	7840 <parse_expression+0x760>
    8168:	ldr	w0, [x21, #56]
    816c:	mov	w2, #0x1                   	// #1
    8170:	ldr	w1, [sp, #176]
    8174:	sub	w0, w0, w25
    8178:	str	w0, [x21, #56]
    817c:	strb	w2, [x22, #8]
    8180:	b	762c <parse_expression+0x54c>
    8184:	ldr	x1, [sp, #120]
    8188:	mov	w0, #0x6                   	// #6
    818c:	str	xzr, [sp, #112]
    8190:	str	w0, [x1]
    8194:	b	7250 <parse_expression+0x170>
    8198:	ldrb	w1, [x28, #160]
    819c:	mov	w5, #0x6                   	// #6
    81a0:	add	x24, x28, #0x70
    81a4:	add	x25, x28, #0x80
    81a8:	orr	w1, w1, #0x2
    81ac:	strb	w1, [x28, #160]
    81b0:	mov	x2, #0x0                   	// #0
    81b4:	mov	x0, x24
    81b8:	mov	x1, x25
    81bc:	mov	x4, x23
    81c0:	mov	x3, #0x0                   	// #0
    81c4:	str	x20, [sp, #224]
    81c8:	strb	w5, [sp, #232]
    81cc:	bl	2c88 <create_token_tree.isra.0>
    81d0:	str	x0, [sp, #112]
    81d4:	mov	x2, #0x0                   	// #0
    81d8:	cbz	x0, 7f44 <parse_expression+0xe64>
    81dc:	ldr	x0, [x19, x2, lsl #3]
    81e0:	add	x2, x2, #0x1
    81e4:	cmp	x2, #0x4
    81e8:	cbnz	x0, 7ef4 <parse_expression+0xe14>
    81ec:	b.ne	81dc <parse_expression+0x10fc>  // b.any
    81f0:	mov	x0, x19
    81f4:	bl	0 <grub_free>
    81f8:	ldp	x19, x20, [sp, #16]
    81fc:	ldp	x23, x24, [sp, #48]
    8200:	b	72b0 <parse_expression+0x1d0>
    8204:	lsl	w27, w2, #1
    8208:	add	w1, w27, #0x1
    820c:	str	w1, [sp, #112]
    8210:	sbfiz	x1, x1, #2, #32
    8214:	bl	0 <grub_realloc>
    8218:	cbz	x0, 7f44 <parse_expression+0xe64>
    821c:	ldr	w1, [x20, #36]
    8220:	str	x0, [x20]
    8224:	b	7650 <parse_expression+0x570>
    8228:	mov	w9, #0x80                  	// #128
    822c:	mov	x3, #0x2                   	// #2
    8230:	add	x5, x28, #0xa8
    8234:	mov	x7, #0x1                   	// #1
    8238:	mov	w1, w9
    823c:	mov	w2, #0x0                   	// #0
    8240:	and	w0, w1, #0xffffffdf
    8244:	lsl	x4, x7, x2
    8248:	sub	w0, w0, #0x41
    824c:	add	w2, w2, #0x1
    8250:	sub	w6, w1, #0x30
    8254:	cmp	w0, #0x19
    8258:	b.ls	8268 <parse_expression+0x1188>  // b.plast
    825c:	cmp	w1, #0x5f
    8260:	ccmp	w6, #0x9, #0x0, ne  // ne = any
    8264:	b.hi	8274 <parse_expression+0x1194>  // b.pmore
    8268:	ldr	x0, [x5, x3, lsl #3]
    826c:	orr	x0, x0, x4
    8270:	str	x0, [x5, x3, lsl #3]
    8274:	add	w1, w1, #0x1
    8278:	cmp	w2, #0x40
    827c:	b.ne	8240 <parse_expression+0x1160>  // b.any
    8280:	add	x3, x3, #0x1
    8284:	add	w9, w9, #0x40
    8288:	cmp	w3, #0x3
    828c:	b.le	8238 <parse_expression+0x1158>
    8290:	b	7190 <parse_expression+0xb0>
    8294:	mov	w9, #0x0                   	// #0
    8298:	mov	x3, #0x0                   	// #0
    829c:	b	8230 <parse_expression+0x1150>
    82a0:	ldr	w5, [sp, #184]
    82a4:	cbz	x4, 8084 <parse_expression+0xfa4>
    82a8:	tbz	w2, #7, 8084 <parse_expression+0xfa4>
    82ac:	b	82d4 <parse_expression+0x11f4>
    82b0:	cmp	w2, #0x3
    82b4:	mov	w1, #0x0                   	// #0
    82b8:	b.ne	8040 <parse_expression+0xf60>  // b.any
    82bc:	ldr	x1, [sp, #184]
    82c0:	ldrb	w1, [x1]
    82c4:	b	8040 <parse_expression+0xf60>
    82c8:	ldr	x2, [sp, #200]
    82cc:	ldrb	w2, [x2]
    82d0:	b	8058 <parse_expression+0xf78>
    82d4:	ldr	x1, [sp, #120]
    82d8:	mov	w0, #0x3                   	// #3
    82dc:	ldp	x23, x24, [sp, #48]
    82e0:	str	w0, [x1]
    82e4:	b	7e00 <parse_expression+0xd20>
    82e8:	ldr	x1, [sp, #120]
    82ec:	mov	w0, #0xb                   	// #11
    82f0:	ldp	x23, x24, [sp, #48]
    82f4:	str	w0, [x1]
    82f8:	b	7e00 <parse_expression+0xd20>
    82fc:	ldr	x0, [sp, #120]
    8300:	ldp	x23, x24, [sp, #48]
    8304:	str	w27, [x0]
    8308:	b	7e00 <parse_expression+0xd20>
    830c:	adrp	x0, 0 <grub_cmd_regexp>
    8310:	ldr	x19, [x0]
    8314:	b	7410 <parse_expression+0x330>
    8318:	cbz	w0, 809c <parse_expression+0xfbc>
    831c:	mov	w0, #0x0                   	// #0
    8320:	b	80a8 <parse_expression+0xfc8>
    8324:	ldr	x0, [sp, #200]
    8328:	str	x4, [sp, #136]
    832c:	bl	0 <grub_strlen>
    8330:	cmp	x0, #0x1
    8334:	b.hi	82d4 <parse_expression+0x11f4>  // b.pmore
    8338:	ldr	w0, [sp, #192]
    833c:	ldr	x4, [sp, #136]
    8340:	b	8034 <parse_expression+0xf54>
    8344:	ldr	x0, [sp, #184]
    8348:	str	x4, [sp, #136]
    834c:	bl	0 <grub_strlen>
    8350:	cmp	x0, #0x1
    8354:	b.hi	82d4 <parse_expression+0x11f4>  // b.pmore
    8358:	ldr	w0, [sp, #192]
    835c:	ldr	x4, [sp, #136]
    8360:	b	802c <parse_expression+0xf4c>
    8364:	mov	w5, w1
    8368:	cbz	x4, 809c <parse_expression+0xfbc>
    836c:	mov	w0, #0x0                   	// #0
    8370:	mov	w2, #0x0                   	// #0
    8374:	b	8074 <parse_expression+0xf94>
    8378:	lsl	w1, w1, #1
    837c:	mov	x0, x6
    8380:	add	w1, w1, #0x1
    8384:	str	w1, [sp, #96]
    8388:	str	x4, [sp, #144]
    838c:	sbfiz	x1, x1, #2, #32
    8390:	str	x1, [sp, #136]
    8394:	stp	w5, w2, [sp, #152]
    8398:	bl	0 <grub_realloc>
    839c:	ldp	x1, x4, [sp, #136]
    83a0:	mov	x6, x0
    83a4:	str	x6, [sp, #136]
    83a8:	ldr	x0, [x4, #16]
    83ac:	bl	0 <grub_realloc>
    83b0:	mov	x1, x0
    83b4:	ldp	x6, x4, [sp, #136]
    83b8:	ldp	w5, w2, [sp, #152]
    83bc:	cmp	x6, #0x0
    83c0:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    83c4:	b.eq	83ec <parse_expression+0x130c>  // b.none
    83c8:	ldr	w0, [x4, #48]
    83cc:	stp	x6, x1, [x4, #8]
    83d0:	b	80d8 <parse_expression+0xff8>
    83d4:	mov	x24, #0x0                   	// #0
    83d8:	ldr	x27, [sp, #112]
    83dc:	b	7344 <parse_expression+0x264>
    83e0:	ldr	x27, [sp, #112]
    83e4:	mov	x24, x27
    83e8:	b	7a48 <parse_expression+0x968>
    83ec:	mov	x0, x6
    83f0:	str	x1, [sp, #112]
    83f4:	bl	0 <grub_free>
    83f8:	ldr	x1, [sp, #112]
    83fc:	mov	x0, x1
    8400:	bl	0 <grub_free>
    8404:	ldr	x1, [sp, #120]
    8408:	mov	w0, #0xc                   	// #12
    840c:	ldp	x23, x24, [sp, #48]
    8410:	str	w0, [x1]
    8414:	b	7e00 <parse_expression+0xd20>
	...

0000000000008458 <parse_branch>:
    8458:	stp	x29, x30, [sp, #-128]!
    845c:	mov	x29, sp
    8460:	stp	x27, x28, [sp, #80]
    8464:	mov	x27, x5
    8468:	stp	x19, x20, [sp, #16]
    846c:	mov	x20, x1
    8470:	stp	x21, x22, [sp, #32]
    8474:	mov	x22, x0
    8478:	mov	w21, w4
    847c:	stp	x23, x24, [sp, #48]
    8480:	mov	x23, x3
    8484:	stp	x25, x26, [sp, #64]
    8488:	mov	x26, x2
    848c:	ldr	x25, [x1]
    8490:	bl	70e0 <parse_expression>
    8494:	ldr	w1, [x27]
    8498:	cmp	w1, #0x0
    849c:	ccmp	x0, #0x0, #0x0, ne  // ne = any
    84a0:	b.eq	85fc <parse_branch+0x1a4>  // b.none
    84a4:	ldrb	w6, [x26, #8]
    84a8:	mov	x28, x0
    84ac:	and	w0, w6, #0xfffffff7
    84b0:	cmp	w0, #0x2
    84b4:	b.eq	8568 <parse_branch+0x110>  // b.none
    84b8:	cmp	w21, #0x0
    84bc:	add	x0, x25, #0x80
    84c0:	cset	w24, eq  // eq = none
    84c4:	add	x25, x25, #0x70
    84c8:	str	x0, [sp, #104]
    84cc:	b	84e8 <parse_branch+0x90>
    84d0:	ldrb	w6, [x26, #8]
    84d4:	cmp	x28, #0x0
    84d8:	csel	x28, x28, x0, ne  // ne = any
    84dc:	and	w0, w6, #0xfffffff7
    84e0:	cmp	w0, #0x2
    84e4:	b.eq	8568 <parse_branch+0x110>  // b.none
    84e8:	cmp	w24, #0x0
    84ec:	mov	x5, x27
    84f0:	mov	w4, w21
    84f4:	mov	x3, x23
    84f8:	mov	x2, x26
    84fc:	mov	x1, x20
    8500:	mov	x0, x22
    8504:	ccmp	w6, #0x9, #0x0, eq  // eq = none
    8508:	b.eq	8568 <parse_branch+0x110>  // b.none
    850c:	bl	70e0 <parse_expression>
    8510:	mov	x19, x0
    8514:	ldr	w1, [x27]
    8518:	cmp	w1, #0x0
    851c:	ccmp	x0, #0x0, #0x0, ne  // ne = any
    8520:	b.eq	8588 <parse_branch+0x130>  // b.none
    8524:	cmp	x28, #0x0
    8528:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    852c:	b.eq	84d0 <parse_branch+0x78>  // b.none
    8530:	ldr	x1, [sp, #104]
    8534:	mov	w5, #0x10                  	// #16
    8538:	mov	x3, x0
    853c:	add	x4, sp, #0x70
    8540:	mov	x2, x28
    8544:	mov	x0, x25
    8548:	strb	w5, [sp, #120]
    854c:	bl	2c88 <create_token_tree.isra.0>
    8550:	cbz	x0, 85a8 <parse_branch+0x150>
    8554:	ldrb	w6, [x26, #8]
    8558:	mov	x28, x0
    855c:	and	w0, w6, #0xfffffff7
    8560:	cmp	w0, #0x2
    8564:	b.ne	84e8 <parse_branch+0x90>  // b.any
    8568:	mov	x0, x28
    856c:	ldp	x19, x20, [sp, #16]
    8570:	ldp	x21, x22, [sp, #32]
    8574:	ldp	x23, x24, [sp, #48]
    8578:	ldp	x25, x26, [sp, #64]
    857c:	ldp	x27, x28, [sp, #80]
    8580:	ldp	x29, x30, [sp], #128
    8584:	ret
    8588:	cbz	x28, 85fc <parse_branch+0x1a4>
    858c:	adrp	x1, 0 <grub_cmd_regexp>
    8590:	mov	x0, x28
    8594:	mov	x2, #0x0                   	// #0
    8598:	mov	x28, #0x0                   	// #0
    859c:	ldr	x1, [x1]
    85a0:	bl	1778 <postorder>
    85a4:	b	8568 <parse_branch+0x110>
    85a8:	adrp	x1, 0 <grub_cmd_regexp>
    85ac:	mov	x0, x19
    85b0:	mov	x2, #0x0                   	// #0
    85b4:	ldr	x19, [x1]
    85b8:	mov	x1, x19
    85bc:	bl	1778 <postorder>
    85c0:	mov	x1, x19
    85c4:	mov	x0, x28
    85c8:	mov	x2, #0x0                   	// #0
    85cc:	bl	1778 <postorder>
    85d0:	mov	w0, #0xc                   	// #12
    85d4:	str	w0, [x27]
    85d8:	mov	x28, #0x0                   	// #0
    85dc:	mov	x0, x28
    85e0:	ldp	x19, x20, [sp, #16]
    85e4:	ldp	x21, x22, [sp, #32]
    85e8:	ldp	x23, x24, [sp, #48]
    85ec:	ldp	x25, x26, [sp, #64]
    85f0:	ldp	x27, x28, [sp, #80]
    85f4:	ldp	x29, x30, [sp], #128
    85f8:	ret
    85fc:	mov	x28, #0x0                   	// #0
    8600:	b	8568 <parse_branch+0x110>
    8604:	nop
	...

0000000000008610 <parse_reg_exp>:
    8610:	stp	x29, x30, [sp, #-128]!
    8614:	mov	x29, sp
    8618:	stp	x19, x20, [sp, #16]
    861c:	mov	x20, x5
    8620:	ldr	x19, [x1]
    8624:	stp	x21, x22, [sp, #32]
    8628:	mov	x22, x1
    862c:	mov	w21, w4
    8630:	stp	x23, x24, [sp, #48]
    8634:	mov	x23, x3
    8638:	ldr	x6, [x19, #152]
    863c:	stp	x25, x26, [sp, #64]
    8640:	mov	x26, x0
    8644:	mov	x25, x2
    8648:	stp	x27, x28, [sp, #80]
    864c:	str	x6, [sp, #104]
    8650:	bl	8458 <parse_branch>
    8654:	ldr	w1, [x20]
    8658:	cmp	w1, #0x0
    865c:	ccmp	x0, #0x0, #0x0, ne  // ne = any
    8660:	b.eq	8798 <parse_reg_exp+0x188>  // b.none
    8664:	mov	x28, x0
    8668:	orr	x24, x23, #0x800000
    866c:	add	x0, x19, #0x80
    8670:	str	x0, [sp, #96]
    8674:	b	86d8 <parse_reg_exp+0xc8>
    8678:	cmp	w21, #0x0
    867c:	ccmp	w10, #0x9, #0x0, ne  // ne = any
    8680:	b.eq	872c <parse_reg_exp+0x11c>  // b.none
    8684:	ldr	x6, [sp, #104]
    8688:	ldr	x27, [x19, #152]
    868c:	str	x6, [x19, #152]
    8690:	bl	8458 <parse_branch>
    8694:	mov	x3, x0
    8698:	ldr	w1, [x20]
    869c:	cmp	w1, #0x0
    86a0:	ccmp	x0, #0x0, #0x0, ne  // ne = any
    86a4:	b.eq	8734 <parse_reg_exp+0x124>  // b.none
    86a8:	ldr	x0, [x19, #152]
    86ac:	orr	x27, x0, x27
    86b0:	str	x27, [x19, #152]
    86b4:	ldr	x1, [sp, #96]
    86b8:	mov	w5, #0xa                   	// #10
    86bc:	mov	x2, x28
    86c0:	add	x4, sp, #0x70
    86c4:	add	x0, x19, #0x70
    86c8:	strb	w5, [sp, #120]
    86cc:	bl	2c88 <create_token_tree.isra.0>
    86d0:	mov	x28, x0
    86d4:	cbz	x0, 8770 <parse_reg_exp+0x160>
    86d8:	ldrb	w3, [x25, #8]
    86dc:	mov	x2, x24
    86e0:	mov	x1, x26
    86e4:	mov	x0, x25
    86e8:	cmp	w3, #0xa
    86ec:	b.ne	8750 <parse_reg_exp+0x140>  // b.any
    86f0:	bl	5e18 <peek_token>
    86f4:	mov	w11, w0
    86f8:	ldr	w9, [x26, #56]
    86fc:	mov	x5, x20
    8700:	ldrb	w10, [x25, #8]
    8704:	mov	w4, w21
    8708:	add	w9, w9, w11
    870c:	str	w9, [x26, #56]
    8710:	and	w9, w10, #0xfffffff7
    8714:	mov	x3, x23
    8718:	mov	x2, x25
    871c:	mov	x1, x22
    8720:	mov	x0, x26
    8724:	cmp	w9, #0x2
    8728:	b.ne	8678 <parse_reg_exp+0x68>  // b.any
    872c:	mov	x3, #0x0                   	// #0
    8730:	b	86b4 <parse_reg_exp+0xa4>
    8734:	cbz	x28, 8798 <parse_reg_exp+0x188>
    8738:	adrp	x1, 0 <grub_cmd_regexp>
    873c:	mov	x0, x28
    8740:	mov	x2, #0x0                   	// #0
    8744:	mov	x28, #0x0                   	// #0
    8748:	ldr	x1, [x1]
    874c:	bl	1778 <postorder>
    8750:	mov	x0, x28
    8754:	ldp	x19, x20, [sp, #16]
    8758:	ldp	x21, x22, [sp, #32]
    875c:	ldp	x23, x24, [sp, #48]
    8760:	ldp	x25, x26, [sp, #64]
    8764:	ldp	x27, x28, [sp, #80]
    8768:	ldp	x29, x30, [sp], #128
    876c:	ret
    8770:	mov	w0, #0xc                   	// #12
    8774:	str	w0, [x20]
    8778:	mov	x0, x28
    877c:	ldp	x19, x20, [sp, #16]
    8780:	ldp	x21, x22, [sp, #32]
    8784:	ldp	x23, x24, [sp, #48]
    8788:	ldp	x25, x26, [sp, #64]
    878c:	ldp	x27, x28, [sp, #80]
    8790:	ldp	x29, x30, [sp], #128
    8794:	ret
    8798:	mov	x28, #0x0                   	// #0
    879c:	b	8750 <parse_reg_exp+0x140>
	...

00000000000087a8 <build_wcs_buffer>:
    87a8:	ldr	w8, [x0, #52]
    87ac:	ldr	w1, [x0, #64]
    87b0:	ldr	w4, [x0, #44]
    87b4:	cmp	w8, w1
    87b8:	csel	w8, w8, w1, le
    87bc:	cmp	w8, w4
    87c0:	b.le	8a68 <build_wcs_buffer+0x2c0>
    87c4:	sub	sp, sp, #0x50
    87c8:	mov	w11, #0x1                   	// #1
    87cc:	add	x10, sp, #0x10
    87d0:	mov	w13, #0x3                   	// #3
    87d4:	mov	w12, #0x2                   	// #2
    87d8:	adrp	x9, 0 <grub_cmd_regexp>
    87dc:	mov	w5, #0xffffffff            	// #-1
    87e0:	ldr	x2, [x0, #80]
    87e4:	sub	w3, w8, w4
    87e8:	ldp	w15, w14, [x0, #32]
    87ec:	cbnz	x2, 89e0 <build_wcs_buffer+0x238>
    87f0:	ldrsw	x2, [x0, #40]
    87f4:	ldr	x1, [x0]
    87f8:	add	x2, x2, w4, sxtw
    87fc:	adds	x2, x1, x2
    8800:	b.eq	8968 <build_wcs_buffer+0x1c0>  // b.none
    8804:	str	wzr, [sp, #12]
    8808:	add	x3, x2, w3, sxtw
    880c:	cmp	x3, x2
    8810:	b.ls	89c0 <build_wcs_buffer+0x218>  // b.plast
    8814:	ldrb	w6, [x2]
    8818:	add	x16, sp, #0xc
    881c:	ldr	w7, [x0, #36]
    8820:	mov	x1, x2
    8824:	cbz	w7, 88a8 <build_wcs_buffer+0x100>
    8828:	and	w17, w6, #0xc0
    882c:	cmp	w17, #0x80
    8830:	b.eq	88f4 <build_wcs_buffer+0x14c>  // b.none
    8834:	str	wzr, [x0, #36]
    8838:	ldr	w1, [x0, #40]
    883c:	ldr	x3, [x0]
    8840:	add	w1, w4, w1
    8844:	ldr	x2, [x0, #80]
    8848:	ldrb	w6, [x3, w1, sxtw]
    884c:	str	w6, [sp, #12]
    8850:	cbnz	x2, 8a58 <build_wcs_buffer+0x2b0>
    8854:	ldr	x3, [x0, #16]
    8858:	stp	w15, w14, [x0, #32]
    885c:	mov	w1, #0x1                   	// #1
    8860:	add	w2, w4, w1
    8864:	add	w1, w4, #0x1
    8868:	str	w6, [x3, w4, sxtw #2]
    886c:	cmp	w1, w2
    8870:	b.ge	8960 <build_wcs_buffer+0x1b8>  // b.tcont
    8874:	nop
    8878:	sxtw	x1, w1
    887c:	nop
    8880:	str	w5, [x3, x1, lsl #2]
    8884:	add	x1, x1, #0x1
    8888:	cmp	w2, w1
    888c:	b.gt	8880 <build_wcs_buffer+0xd8>
    8890:	mov	w4, w2
    8894:	cmp	w4, w8
    8898:	b.lt	87e0 <build_wcs_buffer+0x38>  // b.tstop
    889c:	stp	w4, w4, [x0, #44]
    88a0:	add	sp, sp, #0x50
    88a4:	ret
    88a8:	tbz	w6, #7, 8984 <build_wcs_buffer+0x1dc>
    88ac:	and	w7, w6, #0xe0
    88b0:	cmp	w7, #0xc0
    88b4:	b.eq	899c <build_wcs_buffer+0x1f4>  // b.none
    88b8:	and	w7, w6, #0xf0
    88bc:	cmp	w7, #0xe0
    88c0:	b.eq	8a48 <build_wcs_buffer+0x2a0>  // b.none
    88c4:	and	w7, w6, #0xf8
    88c8:	cmp	w7, #0xf0
    88cc:	b.ne	8838 <build_wcs_buffer+0x90>  // b.any
    88d0:	and	w6, w6, #0x7
    88d4:	mov	w7, #0x3                   	// #3
    88d8:	stp	w6, w13, [x0, #32]
    88dc:	nop
    88e0:	add	x1, x1, #0x1
    88e4:	cmp	x1, x3
    88e8:	b.cs	89c0 <build_wcs_buffer+0x218>  // b.hs, b.nlast
    88ec:	ldrb	w6, [x1]
    88f0:	b	8824 <build_wcs_buffer+0x7c>
    88f4:	ldr	w17, [x0, #32]
    88f8:	sub	w7, w7, #0x1
    88fc:	cmp	w7, #0x1
    8900:	bfi	w6, w17, #6, #26
    8904:	stp	w6, w7, [x0, #32]
    8908:	b.eq	898c <build_wcs_buffer+0x1e4>  // b.none
    890c:	cmp	w7, #0x2
    8910:	ccmp	w6, #0xf, #0x2, eq  // eq = none
    8914:	b.ls	8994 <build_wcs_buffer+0x1ec>  // b.plast
    8918:	cbnz	w7, 88e0 <build_wcs_buffer+0x138>
    891c:	ldr	w3, [x0, #32]
    8920:	cbz	x16, 8928 <build_wcs_buffer+0x180>
    8924:	str	w3, [x16]
    8928:	cbz	w3, 8838 <build_wcs_buffer+0x90>
    892c:	sub	x1, x1, x2
    8930:	cmn	x1, #0x3
    8934:	add	x1, x1, #0x1
    8938:	b.hi	8838 <build_wcs_buffer+0x90>  // b.pmore
    893c:	cmn	x1, #0x2
    8940:	b.eq	89c0 <build_wcs_buffer+0x218>  // b.none
    8944:	ldr	x3, [x0, #16]
    8948:	add	w2, w4, w1
    894c:	ldr	w6, [sp, #12]
    8950:	add	w1, w4, #0x1
    8954:	cmp	w1, w2
    8958:	str	w6, [x3, w4, sxtw #2]
    895c:	b.lt	8878 <build_wcs_buffer+0xd0>  // b.tstop
    8960:	mov	w4, w1
    8964:	b	8894 <build_wcs_buffer+0xec>
    8968:	ldr	x3, [x9]
    896c:	mov	w7, w14
    8970:	mov	x16, #0x0                   	// #0
    8974:	mov	w6, #0x0                   	// #0
    8978:	sub	x2, x3, #0x1
    897c:	mov	x1, x2
    8980:	b	8824 <build_wcs_buffer+0x7c>
    8984:	str	w6, [x0, #32]
    8988:	b	891c <build_wcs_buffer+0x174>
    898c:	cmp	w6, #0x1f
    8990:	b.hi	88e0 <build_wcs_buffer+0x138>  // b.pmore
    8994:	str	xzr, [x0, #32]
    8998:	b	8838 <build_wcs_buffer+0x90>
    899c:	and	w7, w6, #0x1f
    89a0:	stp	w7, w11, [x0, #32]
    89a4:	tst	w6, #0x1e
    89a8:	b.eq	8994 <build_wcs_buffer+0x1ec>  // b.none
    89ac:	add	x1, x1, #0x1
    89b0:	mov	w7, #0x1                   	// #1
    89b4:	cmp	x1, x3
    89b8:	b.cc	88ec <build_wcs_buffer+0x144>  // b.lo, b.ul, b.last
    89bc:	nop
    89c0:	ldr	w2, [x0, #52]
    89c4:	ldr	w1, [x0, #64]
    89c8:	cmp	w2, w1
    89cc:	b.ge	8838 <build_wcs_buffer+0x90>  // b.tcont
    89d0:	stp	w15, w14, [x0, #32]
    89d4:	stp	w4, w4, [x0, #44]
    89d8:	add	sp, sp, #0x50
    89dc:	ret
    89e0:	ldr	w1, [x0, #104]
    89e4:	cmp	w1, #0x0
    89e8:	ccmp	w3, #0x0, #0x4, gt
    89ec:	b.le	8a40 <build_wcs_buffer+0x298>
    89f0:	sxtw	x6, w4
    89f4:	mov	w7, #0x0                   	// #0
    89f8:	sub	x18, x10, x6
    89fc:	b	8a04 <build_wcs_buffer+0x25c>
    8a00:	ldr	x2, [x0, #80]
    8a04:	ldr	w1, [x0, #40]
    8a08:	ldp	x17, x16, [x0]
    8a0c:	add	w1, w4, w1
    8a10:	add	w1, w1, w7
    8a14:	add	w7, w7, #0x1
    8a18:	ldrb	w1, [x17, w1, sxtw]
    8a1c:	ldrb	w1, [x2, x1]
    8a20:	strb	w1, [x16, x6]
    8a24:	strb	w1, [x18, x6]
    8a28:	add	x6, x6, #0x1
    8a2c:	ldr	w1, [x0, #104]
    8a30:	cmp	w1, w3
    8a34:	csel	w1, w1, w3, le
    8a38:	cmp	w7, w1
    8a3c:	b.lt	8a00 <build_wcs_buffer+0x258>  // b.tstop
    8a40:	mov	x2, x10
    8a44:	b	8804 <build_wcs_buffer+0x5c>
    8a48:	and	w6, w6, #0xf
    8a4c:	mov	w7, #0x2                   	// #2
    8a50:	stp	w6, w12, [x0, #32]
    8a54:	b	88e0 <build_wcs_buffer+0x138>
    8a58:	and	x6, x6, #0xff
    8a5c:	ldrb	w6, [x2, x6]
    8a60:	str	w6, [sp, #12]
    8a64:	b	8854 <build_wcs_buffer+0xac>
    8a68:	stp	w4, w4, [x0, #44]
    8a6c:	ret
	...

0000000000008a78 <re_compile_fastmap_iter.isra.0>:
    8a78:	stp	x29, x30, [sp, #-400]!
    8a7c:	mov	x29, sp
    8a80:	stp	x21, x22, [sp, #32]
    8a84:	ldr	x22, [x0]
    8a88:	stp	x19, x20, [sp, #16]
    8a8c:	mov	x19, x0
    8a90:	stp	x23, x24, [sp, #48]
    8a94:	mov	x20, x2
    8a98:	ldr	w0, [x22, #164]
    8a9c:	stp	x25, x26, [sp, #64]
    8aa0:	mov	x24, x3
    8aa4:	cmp	w0, #0x1
    8aa8:	stp	x27, x28, [sp, #80]
    8aac:	mov	w25, #0x0                   	// #0
    8ab0:	str	x1, [sp, #120]
    8ab4:	b.ne	8ac0 <re_compile_fastmap_iter.isra.0+0x48>  // b.any
    8ab8:	ldr	x25, [x19, #24]
    8abc:	ubfx	w25, w25, #22, #1
    8ac0:	ldr	x0, [sp, #120]
    8ac4:	mov	x27, #0x0                   	// #0
    8ac8:	ldr	w5, [x0]
    8acc:	cmp	w5, #0x0
    8ad0:	b.le	8b84 <re_compile_fastmap_iter.isra.0+0x10c>
    8ad4:	add	x21, sp, #0x94
    8ad8:	mov	w23, #0x1                   	// #1
    8adc:	b	8b10 <re_compile_fastmap_iter.isra.0+0x98>
    8ae0:	cmp	w26, #0x3
    8ae4:	b.eq	8d3c <re_compile_fastmap_iter.isra.0+0x2c4>  // b.none
    8ae8:	cmp	w26, #0x6
    8aec:	b.eq	8ba0 <re_compile_fastmap_iter.isra.0+0x128>  // b.none
    8af0:	and	w0, w26, #0xfffffffd
    8af4:	cmp	w0, #0x5
    8af8:	b.eq	8fa0 <re_compile_fastmap_iter.isra.0+0x528>  // b.none
    8afc:	cmp	w26, #0x2
    8b00:	b.eq	8fec <re_compile_fastmap_iter.isra.0+0x574>  // b.none
    8b04:	add	x27, x27, #0x1
    8b08:	cmp	w5, w27
    8b0c:	b.le	8b84 <re_compile_fastmap_iter.isra.0+0x10c>
    8b10:	ldr	x1, [x20]
    8b14:	ldr	x0, [x22]
    8b18:	ldr	w2, [x1, x27, lsl #2]
    8b1c:	sbfiz	x8, x2, #4, #32
    8b20:	add	x1, x0, x8
    8b24:	ldrb	w26, [x1, #8]
    8b28:	cmp	w26, #0x1
    8b2c:	b.ne	8ae0 <re_compile_fastmap_iter.isra.0+0x68>  // b.any
    8b30:	ldrb	w0, [x0, x8]
    8b34:	and	x3, x0, #0xff
    8b38:	add	x1, x24, w0, uxtb
    8b3c:	strb	w26, [x24, x3]
    8b40:	cbz	w25, 8b5c <re_compile_fastmap_iter.isra.0+0xe4>
    8b44:	add	w3, w0, #0x20
    8b48:	sub	w0, w0, #0x41
    8b4c:	cmp	w0, #0x1a
    8b50:	add	x0, x24, w3, sxtw
    8b54:	csel	x1, x0, x1, cc  // cc = lo, ul, last
    8b58:	strb	w23, [x1]
    8b5c:	ldr	x0, [x19, #24]
    8b60:	tbz	w0, #22, 8b70 <re_compile_fastmap_iter.isra.0+0xf8>
    8b64:	ldr	w0, [x22, #164]
    8b68:	cmp	w0, #0x1
    8b6c:	b.gt	8de0 <re_compile_fastmap_iter.isra.0+0x368>
    8b70:	ldr	x0, [sp, #120]
    8b74:	add	x27, x27, #0x1
    8b78:	ldr	w5, [x0]
    8b7c:	cmp	w5, w27
    8b80:	b.gt	8b10 <re_compile_fastmap_iter.isra.0+0x98>
    8b84:	ldp	x19, x20, [sp, #16]
    8b88:	ldp	x21, x22, [sp, #32]
    8b8c:	ldp	x23, x24, [sp, #48]
    8b90:	ldp	x25, x26, [sp, #64]
    8b94:	ldp	x27, x28, [sp, #80]
    8b98:	ldp	x29, x30, [sp], #400
    8b9c:	ret
    8ba0:	ldr	w0, [x22, #164]
    8ba4:	ldr	x28, [x1]
    8ba8:	cmp	w0, #0x1
    8bac:	b.le	8bc8 <re_compile_fastmap_iter.isra.0+0x150>
    8bb0:	ldr	w0, [x28, #52]
    8bb4:	cbnz	w0, 8ca0 <re_compile_fastmap_iter.isra.0+0x228>
    8bb8:	ldrb	w0, [x28, #32]
    8bbc:	tbnz	w0, #0, 8ca0 <re_compile_fastmap_iter.isra.0+0x228>
    8bc0:	ldr	w0, [x28, #48]
    8bc4:	cbnz	w0, 8ca0 <re_compile_fastmap_iter.isra.0+0x228>
    8bc8:	ldr	w0, [x28, #36]
    8bcc:	add	x1, sp, #0x88
    8bd0:	str	x1, [sp, #104]
    8bd4:	mov	x26, #0x0                   	// #0
    8bd8:	cmp	w0, #0x0
    8bdc:	b.le	8b04 <re_compile_fastmap_iter.isra.0+0x8c>
    8be0:	ldr	x0, [sp, #104]
    8be4:	mov	x2, #0x8                   	// #8
    8be8:	mov	w1, #0x0                   	// #0
    8bec:	bl	0 <grub_memset>
    8bf0:	ldr	x2, [x28]
    8bf4:	lsl	x3, x26, #2
    8bf8:	mov	x1, x21
    8bfc:	add	x0, sp, #0x90
    8c00:	str	x3, [sp, #112]
    8c04:	ldr	w2, [x2, x26, lsl #2]
    8c08:	add	x26, x26, #0x1
    8c0c:	bl	0 <grub_encode_utf8_character>
    8c10:	cmn	x0, #0x1
    8c14:	b.eq	8c44 <re_compile_fastmap_iter.isra.0+0x1cc>  // b.none
    8c18:	ldrb	w0, [sp, #144]
    8c1c:	sub	w2, w0, #0x41
    8c20:	add	w1, w0, #0x20
    8c24:	cmp	w2, #0x1a
    8c28:	and	x2, x0, #0xff
    8c2c:	add	x1, x24, w1, sxtw
    8c30:	add	x0, x24, w0, uxtb
    8c34:	csel	x0, x1, x0, cc  // cc = lo, ul, last
    8c38:	strb	w23, [x24, x2]
    8c3c:	cbz	w25, 8c44 <re_compile_fastmap_iter.isra.0+0x1cc>
    8c40:	strb	w23, [x0]
    8c44:	ldr	x0, [x19, #24]
    8c48:	tbz	w0, #22, 8c90 <re_compile_fastmap_iter.isra.0+0x218>
    8c4c:	ldr	w2, [x22, #164]
    8c50:	mov	x1, x21
    8c54:	add	x0, sp, #0x90
    8c58:	cmp	w2, #0x1
    8c5c:	b.le	8c90 <re_compile_fastmap_iter.isra.0+0x218>
    8c60:	ldr	x2, [x28]
    8c64:	ldr	x3, [sp, #112]
    8c68:	ldr	w2, [x2, x3]
    8c6c:	sub	w6, w2, #0x41
    8c70:	add	w5, w2, #0x20
    8c74:	cmp	w6, #0x1a
    8c78:	csel	w2, w5, w2, cc  // cc = lo, ul, last
    8c7c:	bl	0 <grub_encode_utf8_character>
    8c80:	cmn	x0, #0x1
    8c84:	b.eq	8c90 <re_compile_fastmap_iter.isra.0+0x218>  // b.none
    8c88:	ldrb	w0, [sp, #144]
    8c8c:	strb	w23, [x24, x0]
    8c90:	ldr	w0, [x28, #36]
    8c94:	cmp	w0, w26
    8c98:	b.gt	8be0 <re_compile_fastmap_iter.isra.0+0x168>
    8c9c:	b	8b70 <re_compile_fastmap_iter.isra.0+0xf8>
    8ca0:	mov	w26, #0x0                   	// #0
    8ca4:	mov	w28, #0x1                   	// #1
    8ca8:	b	8ce4 <re_compile_fastmap_iter.isra.0+0x26c>
    8cac:	tbz	w26, #7, 8cd8 <re_compile_fastmap_iter.isra.0+0x260>
    8cb0:	and	w0, w1, #0xe0
    8cb4:	cmp	w0, #0xc0
    8cb8:	b.eq	8db8 <re_compile_fastmap_iter.isra.0+0x340>  // b.none
    8cbc:	and	w0, w1, #0xf0
    8cc0:	cmp	w0, #0xe0
    8cc4:	b.eq	8d34 <re_compile_fastmap_iter.isra.0+0x2bc>  // b.none
    8cc8:	and	w1, w1, #0xf8
    8ccc:	cmp	w1, #0xf0
    8cd0:	b.eq	8d34 <re_compile_fastmap_iter.isra.0+0x2bc>  // b.none
    8cd4:	nop
    8cd8:	add	w26, w26, #0x1
    8cdc:	cmp	w26, #0x100
    8ce0:	b.eq	8b70 <re_compile_fastmap_iter.isra.0+0xf8>  // b.none
    8ce4:	mov	w1, #0x0                   	// #0
    8ce8:	add	x0, sp, #0x90
    8cec:	mov	x2, #0x8                   	// #8
    8cf0:	bl	0 <grub_memset>
    8cf4:	ldr	w0, [sp, #148]
    8cf8:	and	w1, w26, #0xff
    8cfc:	cbz	w0, 8cac <re_compile_fastmap_iter.isra.0+0x234>
    8d00:	and	w2, w1, #0xc0
    8d04:	cmp	w2, #0x80
    8d08:	b.ne	8cd8 <re_compile_fastmap_iter.isra.0+0x260>  // b.any
    8d0c:	ldr	w2, [sp, #144]
    8d10:	sub	w0, w0, #0x1
    8d14:	cmp	w0, #0x1
    8d18:	bfi	w1, w2, #6, #26
    8d1c:	stp	w1, w0, [sp, #144]
    8d20:	b.eq	8dd0 <re_compile_fastmap_iter.isra.0+0x358>  // b.none
    8d24:	cmp	w0, #0x2
    8d28:	ccmp	w1, #0xf, #0x2, eq  // eq = none
    8d2c:	b.ls	8cd8 <re_compile_fastmap_iter.isra.0+0x260>  // b.plast
    8d30:	cbz	w0, 8cd8 <re_compile_fastmap_iter.isra.0+0x260>
    8d34:	strb	w23, [x24, w26, uxtw]
    8d38:	b	8cd8 <re_compile_fastmap_iter.isra.0+0x260>
    8d3c:	mov	x3, x24
    8d40:	mov	x10, #0x0                   	// #0
    8d44:	mov	w9, #0x0                   	// #0
    8d48:	ldr	x1, [x1]
    8d4c:	sub	w6, w9, #0x41
    8d50:	add	w5, w9, #0x20
    8d54:	mov	x0, #0x0                   	// #0
    8d58:	ldr	x4, [x1, x10]
    8d5c:	nop
    8d60:	lsr	x2, x4, x0
    8d64:	tbz	w2, #0, 8d8c <re_compile_fastmap_iter.isra.0+0x314>
    8d68:	add	w2, w6, w0
    8d6c:	add	w1, w5, w0
    8d70:	strb	w23, [x3, x0]
    8d74:	cmp	w2, #0x1a
    8d78:	add	x1, x24, x1
    8d7c:	add	x2, x3, x0
    8d80:	csel	x2, x1, x2, cc  // cc = lo, ul, last
    8d84:	cbz	w25, 8d8c <re_compile_fastmap_iter.isra.0+0x314>
    8d88:	strb	w23, [x2]
    8d8c:	add	x0, x0, #0x1
    8d90:	cmp	x0, #0x40
    8d94:	b.ne	8d60 <re_compile_fastmap_iter.isra.0+0x2e8>  // b.any
    8d98:	add	w9, w9, #0x40
    8d9c:	add	x10, x10, #0x8
    8da0:	cmp	w9, #0x100
    8da4:	add	x3, x3, #0x40
    8da8:	b.eq	8b70 <re_compile_fastmap_iter.isra.0+0xf8>  // b.none
    8dac:	ldr	x0, [x22]
    8db0:	add	x1, x0, x8
    8db4:	b	8d48 <re_compile_fastmap_iter.isra.0+0x2d0>
    8db8:	and	w0, w1, #0x1f
    8dbc:	stp	w0, w28, [sp, #144]
    8dc0:	tst	w1, #0x1e
    8dc4:	b.eq	8cd8 <re_compile_fastmap_iter.isra.0+0x260>  // b.none
    8dc8:	strb	w23, [x24, w26, uxtw]
    8dcc:	b	8cd8 <re_compile_fastmap_iter.isra.0+0x260>
    8dd0:	cmp	w1, #0x1f
    8dd4:	b.ls	8cd8 <re_compile_fastmap_iter.isra.0+0x260>  // b.plast
    8dd8:	strb	w23, [x24, w26, uxtw]
    8ddc:	b	8cd8 <re_compile_fastmap_iter.isra.0+0x260>
    8de0:	ldr	x3, [x22]
    8de4:	add	x0, sp, #0x88
    8de8:	mov	x1, x0
    8dec:	str	x1, [sp, #104]
    8df0:	add	x28, x1, #0x1
    8df4:	add	w2, w2, #0x1
    8df8:	ldrb	w1, [x3, x8]
    8dfc:	strb	w1, [sp, #136]
    8e00:	sxtw	x0, w2
    8e04:	ldr	x1, [x22, #16]
    8e08:	cmp	x1, w2, sxtw
    8e0c:	b.ls	903c <re_compile_fastmap_iter.isra.0+0x5c4>  // b.plast
    8e10:	mov	w5, #0xff                  	// #255
    8e14:	mov	w4, #0x1                   	// #1
    8e18:	movk	w5, #0x20, lsl #16
    8e1c:	movk	w4, #0x20, lsl #16
    8e20:	b	8e3c <re_compile_fastmap_iter.isra.0+0x3c4>
    8e24:	ldrb	w1, [x3, x2]
    8e28:	strb	w1, [x28], #1
    8e2c:	ldr	x1, [x22, #16]
    8e30:	cmp	x1, x0
    8e34:	b.ls	8e58 <re_compile_fastmap_iter.isra.0+0x3e0>  // b.plast
    8e38:	ldr	x3, [x22]
    8e3c:	lsl	x2, x0, #4
    8e40:	add	x1, x3, x2
    8e44:	add	x0, x0, #0x1
    8e48:	ldr	w1, [x1, #8]
    8e4c:	and	w1, w1, w5
    8e50:	cmp	w1, w4
    8e54:	b.eq	8e24 <re_compile_fastmap_iter.isra.0+0x3ac>  // b.none
    8e58:	ldr	x0, [sp, #104]
    8e5c:	sub	x4, x28, x0
    8e60:	mov	w1, #0x0                   	// #0
    8e64:	add	x0, sp, #0x90
    8e68:	mov	x2, #0x8                   	// #8
    8e6c:	str	x4, [sp, #112]
    8e70:	bl	0 <grub_memset>
    8e74:	ldp	x3, x4, [sp, #104]
    8e78:	mov	w5, #0x0                   	// #0
    8e7c:	ldp	w1, w0, [sp, #144]
    8e80:	ldrb	w2, [x3]
    8e84:	cbz	w0, 8ee4 <re_compile_fastmap_iter.isra.0+0x46c>
    8e88:	and	w6, w2, #0xc0
    8e8c:	cmp	w6, #0x80
    8e90:	b.ne	8f1c <re_compile_fastmap_iter.isra.0+0x4a4>  // b.any
    8e94:	sub	w0, w0, #0x1
    8e98:	bfi	w2, w1, #6, #26
    8e9c:	cmp	w0, #0x1
    8ea0:	b.eq	8f78 <re_compile_fastmap_iter.isra.0+0x500>  // b.none
    8ea4:	cmp	w0, #0x2
    8ea8:	ccmp	w2, #0xf, #0x2, eq  // eq = none
    8eac:	b.ls	8fd4 <re_compile_fastmap_iter.isra.0+0x55c>  // b.plast
    8eb0:	cbnz	w0, 8f80 <re_compile_fastmap_iter.isra.0+0x508>
    8eb4:	stp	w2, wzr, [sp, #144]
    8eb8:	cbz	w2, 8f70 <re_compile_fastmap_iter.isra.0+0x4f8>
    8ebc:	ldr	x0, [sp, #104]
    8ec0:	sub	x0, x3, x0
    8ec4:	add	x0, x0, #0x1
    8ec8:	cmp	x0, x4
    8ecc:	b.ne	8b70 <re_compile_fastmap_iter.isra.0+0xf8>  // b.any
    8ed0:	sub	w0, w2, #0x41
    8ed4:	cmp	w0, #0x19
    8ed8:	b.hi	8f38 <re_compile_fastmap_iter.isra.0+0x4c0>  // b.pmore
    8edc:	add	w2, w2, #0x20
    8ee0:	b	8f38 <re_compile_fastmap_iter.isra.0+0x4c0>
    8ee4:	tbz	w2, #7, 8f60 <re_compile_fastmap_iter.isra.0+0x4e8>
    8ee8:	and	w0, w2, #0xe0
    8eec:	cmp	w0, #0xc0
    8ef0:	b.eq	9024 <re_compile_fastmap_iter.isra.0+0x5ac>  // b.none
    8ef4:	and	w0, w2, #0xf0
    8ef8:	cmp	w0, #0xe0
    8efc:	b.eq	8fe0 <re_compile_fastmap_iter.isra.0+0x568>  // b.none
    8f00:	and	w0, w2, #0xf8
    8f04:	cmp	w0, #0xf0
    8f08:	b.eq	904c <re_compile_fastmap_iter.isra.0+0x5d4>  // b.none
    8f0c:	cbz	w5, 8f14 <re_compile_fastmap_iter.isra.0+0x49c>
    8f10:	stp	w1, wzr, [sp, #144]
    8f14:	mov	x2, #0xffffffffffffffff    	// #-1
    8f18:	b	8f2c <re_compile_fastmap_iter.isra.0+0x4b4>
    8f1c:	cbz	w5, 8f24 <re_compile_fastmap_iter.isra.0+0x4ac>
    8f20:	str	w1, [sp, #144]
    8f24:	mov	x2, #0xffffffffffffffff    	// #-1
    8f28:	str	wzr, [sp, #148]
    8f2c:	cmp	x2, x4
    8f30:	b.ne	8b70 <re_compile_fastmap_iter.isra.0+0xf8>  // b.any
    8f34:	mov	w2, #0x0                   	// #0
    8f38:	ldr	x0, [sp, #104]
    8f3c:	add	x1, x0, #0x4
    8f40:	bl	0 <grub_encode_utf8_character>
    8f44:	cmn	x0, #0x1
    8f48:	b.eq	8b70 <re_compile_fastmap_iter.isra.0+0xf8>  // b.none
    8f4c:	ldrb	w0, [sp, #136]
    8f50:	strb	w23, [x24, x0]
    8f54:	ldr	x0, [sp, #120]
    8f58:	ldr	w5, [x0]
    8f5c:	b	8b04 <re_compile_fastmap_iter.isra.0+0x8c>
    8f60:	cbz	w5, 8f68 <re_compile_fastmap_iter.isra.0+0x4f0>
    8f64:	str	wzr, [sp, #148]
    8f68:	str	w2, [sp, #144]
    8f6c:	cbnz	w2, 8ebc <re_compile_fastmap_iter.isra.0+0x444>
    8f70:	mov	x2, #0x0                   	// #0
    8f74:	b	8f2c <re_compile_fastmap_iter.isra.0+0x4b4>
    8f78:	cmp	w2, #0x1f
    8f7c:	b.ls	8fd4 <re_compile_fastmap_iter.isra.0+0x55c>  // b.plast
    8f80:	mov	w1, w2
    8f84:	add	x3, x3, #0x1
    8f88:	mov	w5, #0x1                   	// #1
    8f8c:	cmp	x3, x28
    8f90:	b.cc	8e80 <re_compile_fastmap_iter.isra.0+0x408>  // b.lo, b.ul, b.last
    8f94:	mov	x2, #0xfffffffffffffffe    	// #-2
    8f98:	stp	w1, w0, [sp, #144]
    8f9c:	b	8f2c <re_compile_fastmap_iter.isra.0+0x4b4>
    8fa0:	mov	x0, x24
    8fa4:	mov	x2, #0x100                 	// #256
    8fa8:	mov	w1, #0x1                   	// #1
    8fac:	bl	0 <grub_memset>
    8fb0:	cmp	w26, #0x2
    8fb4:	b.eq	8ffc <re_compile_fastmap_iter.isra.0+0x584>  // b.none
    8fb8:	ldp	x19, x20, [sp, #16]
    8fbc:	ldp	x21, x22, [sp, #32]
    8fc0:	ldp	x23, x24, [sp, #48]
    8fc4:	ldp	x25, x26, [sp, #64]
    8fc8:	ldp	x27, x28, [sp, #80]
    8fcc:	ldp	x29, x30, [sp], #400
    8fd0:	ret
    8fd4:	mov	x2, #0xffffffffffffffff    	// #-1
    8fd8:	str	xzr, [sp, #144]
    8fdc:	b	8f2c <re_compile_fastmap_iter.isra.0+0x4b4>
    8fe0:	and	w1, w2, #0xf
    8fe4:	mov	w0, #0x2                   	// #2
    8fe8:	b	8f84 <re_compile_fastmap_iter.isra.0+0x50c>
    8fec:	mov	x0, x24
    8ff0:	mov	x2, #0x100                 	// #256
    8ff4:	mov	w1, #0x1                   	// #1
    8ff8:	bl	0 <grub_memset>
    8ffc:	ldrb	w0, [x19, #56]
    9000:	ldp	x21, x22, [sp, #32]
    9004:	orr	w0, w0, #0x1
    9008:	strb	w0, [x19, #56]
    900c:	ldp	x19, x20, [sp, #16]
    9010:	ldp	x23, x24, [sp, #48]
    9014:	ldp	x25, x26, [sp, #64]
    9018:	ldp	x27, x28, [sp, #80]
    901c:	ldp	x29, x30, [sp], #400
    9020:	ret
    9024:	tst	w2, #0x1e
    9028:	and	w2, w2, #0x1f
    902c:	b.eq	8fd4 <re_compile_fastmap_iter.isra.0+0x55c>  // b.none
    9030:	mov	w1, w2
    9034:	mov	w0, #0x1                   	// #1
    9038:	b	8f84 <re_compile_fastmap_iter.isra.0+0x50c>
    903c:	ldr	x0, [sp, #104]
    9040:	mov	x4, #0x1                   	// #1
    9044:	add	x28, x0, x4
    9048:	b	8e60 <re_compile_fastmap_iter.isra.0+0x3e8>
    904c:	and	w1, w2, #0x7
    9050:	mov	w0, #0x3                   	// #3
    9054:	b	8f84 <re_compile_fastmap_iter.isra.0+0x50c>

0000000000009058 <build_wcs_upper_buffer>:
    9058:	stp	x29, x30, [sp, #-192]!
    905c:	mov	x29, sp
    9060:	stp	x19, x20, [sp, #16]
    9064:	mov	x20, x0
    9068:	stp	x21, x22, [sp, #32]
    906c:	ldr	w22, [x0, #52]
    9070:	ldrb	w1, [x0, #98]
    9074:	ldr	w0, [x0, #64]
    9078:	ldr	w19, [x20, #44]
    907c:	cmp	w22, w0
    9080:	csel	w22, w22, w0, le
    9084:	cbnz	w1, 9090 <build_wcs_upper_buffer+0x38>
    9088:	ldr	x0, [x20, #80]
    908c:	cbz	x0, 91a0 <build_wcs_upper_buffer+0x148>
    9090:	ldr	w21, [x20, #48]
    9094:	cmp	w19, w22
    9098:	b.ge	9188 <build_wcs_upper_buffer+0x130>  // b.tcont
    909c:	stp	x27, x28, [sp, #80]
    90a0:	sub	w27, w22, w19
    90a4:	sxtw	x28, w27
    90a8:	ldr	x6, [x20, #80]
    90ac:	ldp	w5, w4, [x20, #32]
    90b0:	cbnz	x6, 9448 <build_wcs_upper_buffer+0x3f0>
    90b4:	ldrsw	x1, [x20, #40]
    90b8:	ldr	x0, [x20]
    90bc:	add	x1, x1, w21, sxtw
    90c0:	adds	x0, x0, x1
    90c4:	b.eq	9674 <build_wcs_upper_buffer+0x61c>  // b.none
    90c8:	str	wzr, [sp, #124]
    90cc:	add	x28, x0, x28
    90d0:	cmp	x28, x0
    90d4:	b.ls	9814 <build_wcs_upper_buffer+0x7bc>  // b.plast
    90d8:	ldrb	w1, [x0]
    90dc:	mov	x8, x0
    90e0:	add	x7, sp, #0x7c
    90e4:	mov	w3, w4
    90e8:	mov	x2, x0
    90ec:	mov	w12, #0x3                   	// #3
    90f0:	mov	w11, #0x2                   	// #2
    90f4:	mov	w10, #0x1                   	// #1
    90f8:	cbz	w3, 94fc <build_wcs_upper_buffer+0x4a4>
    90fc:	and	w9, w1, #0xc0
    9100:	cmp	w9, #0x80
    9104:	b.eq	952c <build_wcs_upper_buffer+0x4d4>  // b.none
    9108:	mov	x0, #0xffffffffffffffff    	// #-1
    910c:	str	wzr, [x20, #36]
    9110:	ldr	w1, [x20, #40]
    9114:	ldr	x2, [x20]
    9118:	add	w1, w21, w1
    911c:	ldrb	w1, [x2, w1, sxtw]
    9120:	cbnz	x6, 9880 <build_wcs_upper_buffer+0x828>
    9124:	ldr	x6, [x20, #8]
    9128:	sxtw	x3, w19
    912c:	sbfiz	x2, x19, #2, #32
    9130:	strb	w1, [x6, w19, sxtw]
    9134:	ldrb	w6, [x20, #100]
    9138:	cbnz	w6, 9874 <build_wcs_upper_buffer+0x81c>
    913c:	ldr	x2, [x20, #16]
    9140:	add	w21, w21, #0x1
    9144:	add	w19, w19, #0x1
    9148:	cmn	x0, #0x1
    914c:	str	w1, [x2, x3, lsl #2]
    9150:	b.eq	9838 <build_wcs_upper_buffer+0x7e0>  // b.none
    9154:	ldp	x27, x28, [sp, #80]
    9158:	b	9094 <build_wcs_upper_buffer+0x3c>
    915c:	cmn	x0, #0x1
    9160:	b.eq	9594 <build_wcs_upper_buffer+0x53c>  // b.none
    9164:	add	x1, x0, x26
    9168:	ldrsw	x0, [x20, #52]
    916c:	cmp	x1, x0
    9170:	b.ls	9704 <build_wcs_upper_buffer+0x6ac>  // b.plast
    9174:	ldp	x23, x24, [sp, #48]
    9178:	ldp	x25, x26, [sp, #64]
    917c:	ldp	x27, x28, [sp, #80]
    9180:	stp	w5, w4, [x20, #32]
    9184:	nop
    9188:	mov	w0, #0x0                   	// #0
    918c:	stp	w19, w21, [x20, #44]
    9190:	ldp	x19, x20, [sp, #16]
    9194:	ldp	x21, x22, [sp, #32]
    9198:	ldp	x29, x30, [sp], #192
    919c:	ret
    91a0:	ldrb	w0, [x20, #100]
    91a4:	cbnz	w0, 9090 <build_wcs_upper_buffer+0x38>
    91a8:	cmp	w19, w22
    91ac:	b.ge	9360 <build_wcs_upper_buffer+0x308>  // b.tcont
    91b0:	stp	x23, x24, [sp, #48]
    91b4:	add	x23, sp, #0x84
    91b8:	mov	w24, #0x3                   	// #3
    91bc:	stp	x25, x26, [sp, #64]
    91c0:	stp	x27, x28, [sp, #80]
    91c4:	nop
    91c8:	ldp	w6, w0, [x20, #36]
    91cc:	ldr	x2, [x20]
    91d0:	add	w5, w0, w19
    91d4:	sxtw	x11, w5
    91d8:	ldrb	w3, [x2, w5, sxtw]
    91dc:	and	w1, w3, #0xffffff80
    91e0:	orr	w1, w1, w6
    91e4:	cbz	w1, 93ec <build_wcs_upper_buffer+0x394>
    91e8:	sxtw	x26, w19
    91ec:	sub	w27, w22, w19
    91f0:	add	x0, x26, w0, sxtw
    91f4:	ldr	w14, [x20, #32]
    91f8:	adds	x1, x2, x0
    91fc:	sxtw	x28, w27
    9200:	b.eq	93cc <build_wcs_upper_buffer+0x374>  // b.none
    9204:	str	wzr, [sp, #124]
    9208:	add	x9, x1, x28
    920c:	cmp	x1, x9
    9210:	b.cs	94c8 <build_wcs_upper_buffer+0x470>  // b.hs, b.nlast
    9214:	ldrb	w0, [x2, x0]
    9218:	mov	x7, x1
    921c:	add	x8, sp, #0x7c
    9220:	mov	w4, w6
    9224:	mov	x3, x7
    9228:	mov	w13, #0x2                   	// #2
    922c:	mov	w12, #0x1                   	// #1
    9230:	cbz	w4, 9264 <build_wcs_upper_buffer+0x20c>
    9234:	and	w10, w0, #0xc0
    9238:	cmp	w10, #0x80
    923c:	b.eq	92ac <build_wcs_upper_buffer+0x254>  // b.none
    9240:	str	wzr, [x20, #36]
    9244:	ldr	x1, [x20, #8]
    9248:	add	w19, w19, #0x1
    924c:	ldrb	w0, [x2, w5, sxtw]
    9250:	strb	w0, [x1, x26]
    9254:	ldr	x1, [x20, #16]
    9258:	str	w0, [x1, x26, lsl #2]
    925c:	stp	w14, w6, [x20, #32]
    9260:	b	934c <build_wcs_upper_buffer+0x2f4>
    9264:	tbz	w0, #7, 93e4 <build_wcs_upper_buffer+0x38c>
    9268:	and	w4, w0, #0xe0
    926c:	cmp	w4, #0xc0
    9270:	b.eq	93a0 <build_wcs_upper_buffer+0x348>  // b.none
    9274:	and	w4, w0, #0xf0
    9278:	cmp	w4, #0xe0
    927c:	b.eq	94b8 <build_wcs_upper_buffer+0x460>  // b.none
    9280:	and	w4, w0, #0xf8
    9284:	cmp	w4, #0xf0
    9288:	b.eq	94ec <build_wcs_upper_buffer+0x494>  // b.none
    928c:	ldr	x1, [x20, #8]
    9290:	add	w19, w19, #0x1
    9294:	ldrb	w0, [x2, x11]
    9298:	strb	w0, [x1, x26]
    929c:	ldr	x1, [x20, #16]
    92a0:	str	w0, [x1, x26, lsl #2]
    92a4:	stp	w14, w6, [x20, #32]
    92a8:	b	934c <build_wcs_upper_buffer+0x2f4>
    92ac:	ldr	w10, [x20, #32]
    92b0:	sub	w4, w4, #0x1
    92b4:	cmp	w4, #0x1
    92b8:	bfi	w0, w10, #6, #26
    92bc:	stp	w0, w4, [x20, #32]
    92c0:	b.eq	941c <build_wcs_upper_buffer+0x3c4>  // b.none
    92c4:	cmp	w0, #0xf
    92c8:	ccmp	w4, #0x2, #0x0, ls  // ls = plast
    92cc:	b.eq	9424 <build_wcs_upper_buffer+0x3cc>  // b.none
    92d0:	cbnz	w4, 93b8 <build_wcs_upper_buffer+0x360>
    92d4:	ldr	w0, [x20, #32]
    92d8:	cbz	x8, 92e0 <build_wcs_upper_buffer+0x288>
    92dc:	str	w0, [x8]
    92e0:	cbz	w0, 942c <build_wcs_upper_buffer+0x3d4>
    92e4:	sub	x3, x3, x7
    92e8:	cmn	x3, #0x4
    92ec:	add	x21, x3, #0x1
    92f0:	b.hi	9844 <build_wcs_upper_buffer+0x7ec>  // b.pmore
    92f4:	ldr	w25, [sp, #124]
    92f8:	sub	w0, w25, #0x61
    92fc:	cmp	w0, #0x19
    9300:	b.ls	936c <build_wcs_upper_buffer+0x314>  // b.plast
    9304:	ldr	x0, [x20, #8]
    9308:	mov	x2, x21
    930c:	add	x0, x0, x26
    9310:	bl	0 <grub_memmove>
    9314:	ldr	x2, [x20, #16]
    9318:	add	w0, w19, w21
    931c:	add	w19, w19, #0x1
    9320:	cmp	w19, w0
    9324:	str	w25, [x2, x26, lsl #2]
    9328:	b.ge	934c <build_wcs_upper_buffer+0x2f4>  // b.tcont
    932c:	sxtw	x1, w19
    9330:	mov	w3, #0xffffffff            	// #-1
    9334:	nop
    9338:	str	w3, [x2, x1, lsl #2]
    933c:	add	x1, x1, #0x1
    9340:	cmp	w0, w1
    9344:	b.gt	9338 <build_wcs_upper_buffer+0x2e0>
    9348:	mov	w19, w0
    934c:	cmp	w22, w19
    9350:	b.gt	91c8 <build_wcs_upper_buffer+0x170>
    9354:	ldp	x23, x24, [sp, #48]
    9358:	ldp	x25, x26, [sp, #64]
    935c:	ldp	x27, x28, [sp, #80]
    9360:	mov	w0, #0x0                   	// #0
    9364:	stp	w19, w19, [x20, #44]
    9368:	b	9190 <build_wcs_upper_buffer+0x138>
    936c:	sub	w25, w25, #0x20
    9370:	mov	x1, x23
    9374:	mov	w2, w25
    9378:	add	x0, sp, #0x80
    937c:	bl	0 <grub_encode_utf8_character>
    9380:	cmp	x21, x0
    9384:	b.ne	94a8 <build_wcs_upper_buffer+0x450>  // b.any
    9388:	ldr	x0, [x20, #8]
    938c:	mov	x2, x21
    9390:	add	x1, sp, #0x80
    9394:	add	x0, x0, x26
    9398:	bl	0 <grub_memmove>
    939c:	b	9314 <build_wcs_upper_buffer+0x2bc>
    93a0:	and	w4, w0, #0x1f
    93a4:	stp	w4, w12, [x20, #32]
    93a8:	tst	w0, #0x1e
    93ac:	b.eq	9424 <build_wcs_upper_buffer+0x3cc>  // b.none
    93b0:	mov	w4, #0x1                   	// #1
    93b4:	nop
    93b8:	add	x3, x3, #0x1
    93bc:	cmp	x3, x9
    93c0:	b.cs	94c8 <build_wcs_upper_buffer+0x470>  // b.hs, b.nlast
    93c4:	ldrb	w0, [x3]
    93c8:	b	9230 <build_wcs_upper_buffer+0x1d8>
    93cc:	adrp	x3, 0 <grub_cmd_regexp>
    93d0:	mov	w0, #0x0                   	// #0
    93d4:	mov	x8, #0x0                   	// #0
    93d8:	ldr	x9, [x3]
    93dc:	sub	x7, x9, #0x1
    93e0:	b	9220 <build_wcs_upper_buffer+0x1c8>
    93e4:	str	w0, [x20, #32]
    93e8:	b	92d4 <build_wcs_upper_buffer+0x27c>
    93ec:	ldr	x1, [x20, #8]
    93f0:	sub	w2, w3, #0x61
    93f4:	sub	w0, w3, #0x20
    93f8:	cmp	w2, #0x1a
    93fc:	and	w0, w0, #0xff
    9400:	csel	w3, w0, w3, cc  // cc = lo, ul, last
    9404:	strb	w3, [x1, w19, sxtw]
    9408:	ldp	x1, x0, [x20, #8]
    940c:	ldrb	w1, [x1, w19, sxtw]
    9410:	str	w1, [x0, w19, sxtw #2]
    9414:	add	w19, w19, #0x1
    9418:	b	934c <build_wcs_upper_buffer+0x2f4>
    941c:	cmp	w0, #0x1f
    9420:	b.hi	93b8 <build_wcs_upper_buffer+0x360>  // b.pmore
    9424:	str	xzr, [x20, #32]
    9428:	b	9244 <build_wcs_upper_buffer+0x1ec>
    942c:	ldr	x1, [x20, #8]
    9430:	add	w19, w19, #0x1
    9434:	ldrb	w0, [x2, w5, sxtw]
    9438:	strb	w0, [x1, x26]
    943c:	ldr	x1, [x20, #16]
    9440:	str	w0, [x1, x26, lsl #2]
    9444:	b	934c <build_wcs_upper_buffer+0x2f4>
    9448:	ldr	w0, [x20, #104]
    944c:	cmp	w27, #0x0
    9450:	stp	x23, x24, [sp, #48]
    9454:	add	x23, sp, #0x80
    9458:	ccmp	w0, #0x0, #0x4, gt
    945c:	b.le	949c <build_wcs_upper_buffer+0x444>
    9460:	ldr	w7, [x20, #40]
    9464:	cmp	w27, w0
    9468:	ldr	x3, [x20]
    946c:	add	w7, w21, w7
    9470:	add	x23, sp, #0x80
    9474:	csel	w0, w27, w0, le
    9478:	mov	x2, x23
    947c:	mov	x1, #0x0                   	// #0
    9480:	add	x7, x3, w7, sxtw
    9484:	ldrb	w3, [x7, x1]
    9488:	add	x1, x1, #0x1
    948c:	cmp	w0, w1
    9490:	ldrb	w3, [x6, x3]
    9494:	strb	w3, [x2], #1
    9498:	b.gt	9484 <build_wcs_upper_buffer+0x42c>
    949c:	mov	x0, x23
    94a0:	ldp	x23, x24, [sp, #48]
    94a4:	b	90c8 <build_wcs_upper_buffer+0x70>
    94a8:	mov	w21, w19
    94ac:	ldp	x23, x24, [sp, #48]
    94b0:	ldp	x25, x26, [sp, #64]
    94b4:	b	90a8 <build_wcs_upper_buffer+0x50>
    94b8:	and	w0, w0, #0xf
    94bc:	mov	w4, #0x2                   	// #2
    94c0:	stp	w0, w13, [x20, #32]
    94c4:	b	93b8 <build_wcs_upper_buffer+0x360>
    94c8:	ldr	w1, [x20, #52]
    94cc:	ldr	w0, [x20, #64]
    94d0:	cmp	w1, w0
    94d4:	b.ge	942c <build_wcs_upper_buffer+0x3d4>  // b.tcont
    94d8:	ldp	x23, x24, [sp, #48]
    94dc:	ldp	x25, x26, [sp, #64]
    94e0:	ldp	x27, x28, [sp, #80]
    94e4:	stp	w14, w6, [x20, #32]
    94e8:	b	9360 <build_wcs_upper_buffer+0x308>
    94ec:	and	w0, w0, #0x7
    94f0:	mov	w4, #0x3                   	// #3
    94f4:	stp	w0, w24, [x20, #32]
    94f8:	b	93b8 <build_wcs_upper_buffer+0x360>
    94fc:	tbz	w1, #7, 966c <build_wcs_upper_buffer+0x614>
    9500:	and	w3, w1, #0xe0
    9504:	cmp	w3, #0xc0
    9508:	b.eq	9644 <build_wcs_upper_buffer+0x5ec>  // b.none
    950c:	and	w3, w1, #0xf0
    9510:	cmp	w3, #0xe0
    9514:	b.eq	96dc <build_wcs_upper_buffer+0x684>  // b.none
    9518:	and	w3, w1, #0xf8
    951c:	cmp	w3, #0xf0
    9520:	b.eq	96ec <build_wcs_upper_buffer+0x694>  // b.none
    9524:	mov	x0, #0xffffffffffffffff    	// #-1
    9528:	b	9110 <build_wcs_upper_buffer+0xb8>
    952c:	ldr	w9, [x20, #32]
    9530:	sub	w3, w3, #0x1
    9534:	cmp	w3, #0x1
    9538:	bfi	w1, w9, #6, #26
    953c:	stp	w1, w3, [x20, #32]
    9540:	b.eq	9690 <build_wcs_upper_buffer+0x638>  // b.none
    9544:	cmp	w3, #0x2
    9548:	ccmp	w1, #0xf, #0x2, eq  // eq = none
    954c:	b.ls	9698 <build_wcs_upper_buffer+0x640>  // b.plast
    9550:	cbnz	w3, 9658 <build_wcs_upper_buffer+0x600>
    9554:	ldr	w1, [x20, #32]
    9558:	cbz	x7, 9560 <build_wcs_upper_buffer+0x508>
    955c:	str	w1, [x7]
    9560:	cbz	w1, 96fc <build_wcs_upper_buffer+0x6a4>
    9564:	stp	x23, x24, [sp, #48]
    9568:	sub	x24, x2, x0
    956c:	cmn	x24, #0x4
    9570:	stp	x25, x26, [sp, #64]
    9574:	add	x25, x24, #0x1
    9578:	mov	x0, x25
    957c:	b.hi	9804 <build_wcs_upper_buffer+0x7ac>  // b.pmore
    9580:	ldr	w27, [sp, #124]
    9584:	sxtw	x26, w19
    9588:	sub	w0, w27, #0x61
    958c:	cmp	w0, #0x19
    9590:	b.ls	95f8 <build_wcs_upper_buffer+0x5a0>  // b.plast
    9594:	ldr	x0, [x20, #8]
    9598:	mov	x1, x8
    959c:	mov	x2, x25
    95a0:	add	x0, x0, x26
    95a4:	bl	0 <grub_memmove>
    95a8:	ldrb	w0, [x20, #100]
    95ac:	cbnz	w0, 96b8 <build_wcs_upper_buffer+0x660>
    95b0:	ldr	x1, [x20, #16]
    95b4:	add	w3, w19, #0x1
    95b8:	add	w19, w19, w25
    95bc:	add	w21, w21, w25
    95c0:	cmp	w3, w19
    95c4:	sxtw	x0, w3
    95c8:	str	w27, [x1, x26, lsl #2]
    95cc:	mov	w2, #0xffffffff            	// #-1
    95d0:	b.ge	96a4 <build_wcs_upper_buffer+0x64c>  // b.tcont
    95d4:	nop
    95d8:	str	w2, [x1, x0, lsl #2]
    95dc:	add	x0, x0, #0x1
    95e0:	cmp	w19, w0
    95e4:	b.gt	95d8 <build_wcs_upper_buffer+0x580>
    95e8:	ldp	x23, x24, [sp, #48]
    95ec:	ldp	x25, x26, [sp, #64]
    95f0:	ldp	x27, x28, [sp, #80]
    95f4:	b	9094 <build_wcs_upper_buffer+0x3c>
    95f8:	add	x23, sp, #0x80
    95fc:	sub	w27, w27, #0x20
    9600:	mov	w2, w27
    9604:	add	x1, x23, #0x4
    9608:	mov	x0, x23
    960c:	stp	w4, w5, [sp, #96]
    9610:	str	x8, [sp, #104]
    9614:	bl	0 <grub_encode_utf8_character>
    9618:	ldp	w4, w5, [sp, #96]
    961c:	mov	x28, x0
    9620:	cmp	x25, x0
    9624:	ldr	x8, [sp, #104]
    9628:	b.ne	915c <build_wcs_upper_buffer+0x104>  // b.any
    962c:	ldr	x0, [x20, #8]
    9630:	mov	x1, x23
    9634:	mov	x2, x25
    9638:	add	x0, x0, x26
    963c:	bl	0 <grub_memmove>
    9640:	b	95a8 <build_wcs_upper_buffer+0x550>
    9644:	and	w3, w1, #0x1f
    9648:	stp	w3, w10, [x20, #32]
    964c:	tst	w1, #0x1e
    9650:	b.eq	9698 <build_wcs_upper_buffer+0x640>  // b.none
    9654:	mov	w3, #0x1                   	// #1
    9658:	add	x2, x2, #0x1
    965c:	cmp	x28, x2
    9660:	b.ls	9814 <build_wcs_upper_buffer+0x7bc>  // b.plast
    9664:	ldrb	w1, [x2]
    9668:	b	90f8 <build_wcs_upper_buffer+0xa0>
    966c:	str	w1, [x20, #32]
    9670:	b	9554 <build_wcs_upper_buffer+0x4fc>
    9674:	adrp	x0, 0 <grub_cmd_regexp>
    9678:	mov	x8, #0x0                   	// #0
    967c:	mov	x7, #0x0                   	// #0
    9680:	mov	w1, #0x0                   	// #0
    9684:	ldr	x28, [x0]
    9688:	sub	x0, x28, #0x1
    968c:	b	90e4 <build_wcs_upper_buffer+0x8c>
    9690:	cmp	w1, #0x1f
    9694:	b.hi	9658 <build_wcs_upper_buffer+0x600>  // b.pmore
    9698:	mov	x0, #0xffffffffffffffff    	// #-1
    969c:	str	xzr, [x20, #32]
    96a0:	b	9110 <build_wcs_upper_buffer+0xb8>
    96a4:	mov	w19, w3
    96a8:	ldp	x23, x24, [sp, #48]
    96ac:	ldp	x25, x26, [sp, #64]
    96b0:	ldp	x27, x28, [sp, #80]
    96b4:	b	9094 <build_wcs_upper_buffer+0x3c>
    96b8:	ldr	x2, [x20, #24]
    96bc:	mov	x0, #0x0                   	// #0
    96c0:	add	x2, x2, x26, lsl #2
    96c4:	add	w1, w21, w0
    96c8:	str	w1, [x2, x0, lsl #2]
    96cc:	cmp	x24, x0
    96d0:	add	x0, x0, #0x1
    96d4:	b.ne	96c4 <build_wcs_upper_buffer+0x66c>  // b.any
    96d8:	b	95b0 <build_wcs_upper_buffer+0x558>
    96dc:	and	w1, w1, #0xf
    96e0:	mov	w3, #0x2                   	// #2
    96e4:	stp	w1, w11, [x20, #32]
    96e8:	b	9658 <build_wcs_upper_buffer+0x600>
    96ec:	and	w1, w1, #0x7
    96f0:	mov	w3, #0x3                   	// #3
    96f4:	stp	w1, w12, [x20, #32]
    96f8:	b	9658 <build_wcs_upper_buffer+0x600>
    96fc:	mov	x0, #0x0                   	// #0
    9700:	b	9110 <build_wcs_upper_buffer+0xb8>
    9704:	ldr	x1, [x20, #24]
    9708:	cbz	x1, 97e0 <build_wcs_upper_buffer+0x788>
    970c:	ldrb	w0, [x20, #100]
    9710:	cbnz	w0, 9738 <build_wcs_upper_buffer+0x6e0>
    9714:	cbz	x26, 9730 <build_wcs_upper_buffer+0x6d8>
    9718:	ldr	x1, [x20, #24]
    971c:	mov	x0, #0x0                   	// #0
    9720:	str	w0, [x1, x0, lsl #2]
    9724:	add	x0, x0, #0x1
    9728:	cmp	x0, x26
    972c:	b.ne	9720 <build_wcs_upper_buffer+0x6c8>  // b.any
    9730:	mov	w0, #0x1                   	// #1
    9734:	strb	w0, [x20, #100]
    9738:	ldr	x0, [x20, #8]
    973c:	mov	x1, x23
    9740:	mov	x2, x28
    9744:	add	x0, x0, x26
    9748:	bl	0 <grub_memmove>
    974c:	ldp	x2, x4, [x20, #16]
    9750:	str	w27, [x2, x26, lsl #2]
    9754:	lsl	x0, x26, #2
    9758:	cmp	x28, #0x1
    975c:	sub	w1, w25, #0x1
    9760:	mov	w5, #0xffffffff            	// #-1
    9764:	str	w21, [x4, x26, lsl #2]
    9768:	add	x3, x2, x0
    976c:	add	x2, x4, x0
    9770:	mov	x0, #0x1                   	// #1
    9774:	b.ls	9798 <build_wcs_upper_buffer+0x740>  // b.plast
    9778:	cmp	x25, x0
    977c:	csel	w4, w0, w1, hi  // hi = pmore
    9780:	add	w4, w21, w4
    9784:	str	w4, [x2, x0, lsl #2]
    9788:	str	w5, [x3, x0, lsl #2]
    978c:	add	x0, x0, #0x1
    9790:	cmp	x0, x28
    9794:	b.ne	9778 <build_wcs_upper_buffer+0x720>  // b.any
    9798:	ldp	w0, w1, [x20, #64]
    979c:	sub	w2, w28, w25
    97a0:	add	w0, w2, w0
    97a4:	str	w0, [x20, #64]
    97a8:	cmp	w1, w21
    97ac:	b.le	97bc <build_wcs_upper_buffer+0x764>
    97b0:	ldr	w1, [x20, #72]
    97b4:	add	w1, w1, w2
    97b8:	str	w1, [x20, #72]
    97bc:	ldr	w22, [x20, #52]
    97c0:	add	w19, w19, w28
    97c4:	add	w21, w21, w25
    97c8:	cmp	w22, w0
    97cc:	csel	w22, w22, w0, le
    97d0:	ldp	x23, x24, [sp, #48]
    97d4:	ldp	x25, x26, [sp, #64]
    97d8:	ldp	x27, x28, [sp, #80]
    97dc:	b	9094 <build_wcs_upper_buffer+0x3c>
    97e0:	lsl	x0, x0, #2
    97e4:	bl	0 <grub_malloc>
    97e8:	str	x0, [x20, #24]
    97ec:	cbnz	x0, 970c <build_wcs_upper_buffer+0x6b4>
    97f0:	mov	w0, #0xc                   	// #12
    97f4:	ldp	x23, x24, [sp, #48]
    97f8:	ldp	x25, x26, [sp, #64]
    97fc:	ldp	x27, x28, [sp, #80]
    9800:	b	9190 <build_wcs_upper_buffer+0x138>
    9804:	cmn	x24, #0x3
    9808:	ldp	x23, x24, [sp, #48]
    980c:	ldp	x25, x26, [sp, #64]
    9810:	b.ne	9110 <build_wcs_upper_buffer+0xb8>  // b.any
    9814:	ldr	w1, [x20, #52]
    9818:	ldr	w0, [x20, #64]
    981c:	cmp	w1, w0
    9820:	b.lt	982c <build_wcs_upper_buffer+0x7d4>  // b.tstop
    9824:	mov	x0, #0xfffffffffffffffe    	// #-2
    9828:	b	9110 <build_wcs_upper_buffer+0xb8>
    982c:	ldp	x27, x28, [sp, #80]
    9830:	stp	w5, w4, [x20, #32]
    9834:	b	9188 <build_wcs_upper_buffer+0x130>
    9838:	ldp	x27, x28, [sp, #80]
    983c:	stp	w5, w4, [x20, #32]
    9840:	b	9094 <build_wcs_upper_buffer+0x3c>
    9844:	cmn	x3, #0x3
    9848:	b.eq	94c8 <build_wcs_upper_buffer+0x470>  // b.none
    984c:	ldr	x1, [x20, #8]
    9850:	add	w19, w19, #0x1
    9854:	ldrb	w0, [x2, w5, sxtw]
    9858:	cmn	x21, #0x1
    985c:	strb	w0, [x1, x26]
    9860:	ldr	x1, [x20, #16]
    9864:	str	w0, [x1, x26, lsl #2]
    9868:	b.ne	934c <build_wcs_upper_buffer+0x2f4>  // b.any
    986c:	stp	w14, w6, [x20, #32]
    9870:	b	934c <build_wcs_upper_buffer+0x2f4>
    9874:	ldr	x6, [x20, #24]
    9878:	str	w21, [x6, x2]
    987c:	b	913c <build_wcs_upper_buffer+0xe4>
    9880:	and	x1, x1, #0xff
    9884:	ldrb	w1, [x6, x1]
    9888:	b	9124 <build_wcs_upper_buffer+0xcc>
    988c:	nop
	...

0000000000009898 <re_compile_internal>:
    9898:	stp	x29, x30, [sp, #-272]!
    989c:	mov	x29, sp
    98a0:	stp	x21, x22, [sp, #32]
    98a4:	mov	x21, x0
    98a8:	ldrb	w0, [x0, #56]
    98ac:	stp	x19, x20, [sp, #16]
    98b0:	mov	x22, x3
    98b4:	mov	w3, #0xffffff90            	// #-112
    98b8:	stp	x25, x26, [sp, #64]
    98bc:	mov	x25, x1
    98c0:	and	w0, w0, w3
    98c4:	ldp	x19, x1, [x21]
    98c8:	stp	xzr, x22, [x21, #16]
    98cc:	mov	x20, x2
    98d0:	str	xzr, [x21, #48]
    98d4:	strb	w0, [x21, #56]
    98d8:	str	wzr, [sp, #124]
    98dc:	cmp	x1, #0xd7
    98e0:	b.ls	a540 <re_compile_internal+0xca8>  // b.plast
    98e4:	mov	x2, #0xd8                  	// #216
    98e8:	str	x2, [x21, #16]
    98ec:	mov	x0, x19
    98f0:	mov	w1, #0x0                   	// #0
    98f4:	bl	0 <grub_memset>
    98f8:	mov	w0, #0xf                   	// #15
    98fc:	str	w0, [x19, #128]
    9900:	mov	x0, #0x3ffffffe            	// #1073741822
    9904:	cmp	x20, x0
    9908:	b.hi	9ef4 <re_compile_internal+0x65c>  // b.pmore
    990c:	stp	x23, x24, [sp, #48]
    9910:	add	x0, x20, #0x1
    9914:	str	x0, [x19, #8]
    9918:	lsl	x0, x0, #4
    991c:	bl	0 <grub_malloc>
    9920:	str	x0, [x19]
    9924:	cbz	x20, a560 <re_compile_internal+0xcc8>
    9928:	mov	w1, #0x1                   	// #1
    992c:	nop
    9930:	lsl	w0, w1, #1
    9934:	mov	x1, x0
    9938:	cmp	x20, w0, uxtw
    993c:	b.cs	9930 <re_compile_internal+0x98>  // b.hs, b.nlast
    9940:	lsl	x0, x0, #4
    9944:	sub	w23, w1, #0x1
    9948:	bl	0 <grub_zalloc>
    994c:	str	x0, [x19, #64]
    9950:	adrp	x1, 0 <grub_cmd_regexp>
    9954:	adrp	x3, 0 <grub_cmd_regexp>
    9958:	mov	w2, #0x4                   	// #4
    995c:	str	w23, [x19, #132]
    9960:	ldr	x1, [x1]
    9964:	str	w2, [x19, #164]
    9968:	ldr	x0, [x3]
    996c:	bl	0 <grub_strcmp>
    9970:	cbz	w0, 9aec <re_compile_internal+0x254>
    9974:	ldrb	w0, [x19, #160]
    9978:	ldr	w1, [x19, #164]
    997c:	and	w2, w0, #0xfffffff7
    9980:	strb	w2, [x19, #160]
    9984:	cmp	w1, #0x1
    9988:	b.le	999c <re_compile_internal+0x104>
    998c:	tbz	w0, #2, 9f20 <re_compile_internal+0x688>
    9990:	adrp	x0, 0 <grub_cmd_regexp>
    9994:	ldr	x0, [x0]
    9998:	str	x0, [x19, #120]
    999c:	ldr	x0, [x19]
    99a0:	cbz	x0, a538 <re_compile_internal+0xca0>
    99a4:	ldr	x0, [x19, #64]
    99a8:	stp	x27, x28, [sp, #80]
    99ac:	cbz	x0, 9eec <re_compile_internal+0x654>
    99b0:	ldr	x26, [x21, #40]
    99b4:	mov	x2, #0x70                  	// #112
    99b8:	mov	w1, #0x0                   	// #0
    99bc:	add	x0, sp, #0xa0
    99c0:	str	wzr, [sp, #124]
    99c4:	bl	0 <grub_memset>
    99c8:	ldrb	w0, [x19, #160]
    99cc:	and	x24, x22, #0x400000
    99d0:	cmp	x24, #0x0
    99d4:	orr	x27, x26, x24
    99d8:	cset	w4, ne  // ne = any
    99dc:	ldr	w2, [x19, #164]
    99e0:	cmp	x27, #0x0
    99e4:	ubfx	x3, x0, #2, #1
    99e8:	cset	w1, ne  // ne = any
    99ec:	ubfx	x0, x0, #3, #1
    99f0:	str	x25, [sp, #160]
    99f4:	mov	w23, w20
    99f8:	stp	w20, w20, [sp, #220]
    99fc:	stp	w20, w20, [sp, #228]
    9a00:	str	x26, [sp, #240]
    9a04:	strb	w4, [sp, #256]
    9a08:	strb	w3, [sp, #257]
    9a0c:	strb	w0, [sp, #258]
    9a10:	strb	w1, [sp, #259]
    9a14:	str	w2, [sp, #264]
    9a18:	cbnz	x20, 9ecc <re_compile_internal+0x634>
    9a1c:	ldr	x0, [sp, #168]
    9a20:	cmp	w1, #0x0
    9a24:	csel	x25, x0, x25, ne  // ne = any
    9a28:	str	x25, [sp, #168]
    9a2c:	cmp	w2, #0x1
    9a30:	cbz	x24, 9afc <re_compile_internal+0x264>
    9a34:	b.le	a528 <re_compile_internal+0xc90>
    9a38:	add	x0, sp, #0xa0
    9a3c:	bl	9058 <build_wcs_upper_buffer>
    9a40:	mov	w2, w0
    9a44:	add	x0, sp, #0xa0
    9a48:	cbnz	w2, 9a80 <re_compile_internal+0x1e8>
    9a4c:	ldr	w1, [sp, #208]
    9a50:	cmp	w23, w1
    9a54:	b.le	a5c4 <re_compile_internal+0xd2c>
    9a58:	ldr	w3, [x19, #164]
    9a5c:	ldr	w2, [sp, #204]
    9a60:	ldr	w1, [sp, #212]
    9a64:	add	w2, w2, w3
    9a68:	cmp	w1, w2
    9a6c:	b.gt	a5c4 <re_compile_internal+0xd2c>
    9a70:	lsl	w1, w1, #1
    9a74:	bl	1898 <re_string_realloc_buffers>
    9a78:	mov	w2, w0
    9a7c:	cbz	w0, 9a38 <re_compile_internal+0x1a0>
    9a80:	ldr	x20, [x21]
    9a84:	str	w2, [sp, #124]
    9a88:	ldr	x22, [x20, #112]
    9a8c:	cbz	x22, 9aa0 <re_compile_internal+0x208>
    9a90:	mov	x0, x22
    9a94:	ldr	x22, [x22]
    9a98:	bl	0 <grub_free>
    9a9c:	cbnz	x22, 9a90 <re_compile_internal+0x1f8>
    9aa0:	ldr	x0, [x20, #32]
    9aa4:	mov	w1, #0xf                   	// #15
    9aa8:	stp	xzr, xzr, [x20, #104]
    9aac:	str	w1, [x20, #128]
    9ab0:	bl	0 <grub_free>
    9ab4:	str	xzr, [x20, #32]
    9ab8:	add	x0, sp, #0xa0
    9abc:	bl	2220 <re_string_destruct>
    9ac0:	mov	x0, x19
    9ac4:	bl	2268 <free_dfa_content>
    9ac8:	ldp	x23, x24, [sp, #48]
    9acc:	ldp	x27, x28, [sp, #80]
    9ad0:	stp	xzr, xzr, [x21]
    9ad4:	ldr	w0, [sp, #124]
    9ad8:	ldp	x19, x20, [sp, #16]
    9adc:	ldp	x21, x22, [sp, #32]
    9ae0:	ldp	x25, x26, [sp, #64]
    9ae4:	ldp	x29, x30, [sp], #272
    9ae8:	ret
    9aec:	ldrb	w0, [x19, #160]
    9af0:	orr	w0, w0, #0x4
    9af4:	strb	w0, [x19, #160]
    9af8:	b	9974 <re_compile_internal+0xdc>
    9afc:	b.gt	a3ac <re_compile_internal+0xb14>
    9b00:	ldr	w1, [sp, #212]
    9b04:	cbz	x27, 9f7c <re_compile_internal+0x6e4>
    9b08:	ldr	w3, [sp, #224]
    9b0c:	ldr	w0, [sp, #204]
    9b10:	cmp	w3, w1
    9b14:	csel	w3, w3, w1, le
    9b18:	cmp	w3, w0
    9b1c:	b.le	a63c <re_compile_internal+0xda4>
    9b20:	sxtw	x2, w0
    9b24:	b	9b2c <re_compile_internal+0x294>
    9b28:	ldr	x25, [sp, #168]
    9b2c:	ldr	w1, [sp, #200]
    9b30:	ldr	x5, [sp, #160]
    9b34:	add	w1, w0, w1
    9b38:	ldr	x4, [sp, #240]
    9b3c:	add	w0, w0, #0x1
    9b40:	ldrb	w1, [x5, w1, sxtw]
    9b44:	cmp	w3, w0
    9b48:	ldrb	w1, [x4, x1]
    9b4c:	strb	w1, [x25, x2]
    9b50:	add	x2, x2, #0x1
    9b54:	b.ne	9b28 <re_compile_internal+0x290>  // b.any
    9b58:	str	wzr, [sp, #124]
    9b5c:	stp	w3, w3, [sp, #204]
    9b60:	ldr	x20, [x21]
    9b64:	str	xzr, [x21, #48]
    9b68:	orr	x2, x22, #0x800000
    9b6c:	add	x1, sp, #0xa0
    9b70:	add	x0, sp, #0x80
    9b74:	str	x22, [x20, #200]
    9b78:	bl	5e18 <peek_token>
    9b7c:	ldr	w6, [sp, #216]
    9b80:	mov	x1, x21
    9b84:	mov	x3, x22
    9b88:	add	x2, sp, #0x80
    9b8c:	add	w6, w6, w0
    9b90:	add	x5, sp, #0x7c
    9b94:	add	x0, sp, #0xa0
    9b98:	mov	w4, #0x0                   	// #0
    9b9c:	str	w6, [sp, #216]
    9ba0:	bl	8610 <parse_reg_exp>
    9ba4:	mov	x25, x0
    9ba8:	ldr	w1, [sp, #124]
    9bac:	cbnz	w1, a56c <re_compile_internal+0xcd4>
    9bb0:	add	x26, x20, #0x70
    9bb4:	mov	w5, #0x2                   	// #2
    9bb8:	add	x20, x20, #0x80
    9bbc:	add	x23, sp, #0x90
    9bc0:	mov	x1, x20
    9bc4:	mov	x0, x26
    9bc8:	mov	x4, x23
    9bcc:	mov	x3, #0x0                   	// #0
    9bd0:	mov	x2, #0x0                   	// #0
    9bd4:	strb	w5, [sp, #152]
    9bd8:	bl	2c88 <create_token_tree.isra.0>
    9bdc:	mov	x22, x0
    9be0:	mov	x1, x0
    9be4:	cbz	x25, 9c10 <re_compile_internal+0x378>
    9be8:	mov	w5, #0x10                  	// #16
    9bec:	mov	x1, x20
    9bf0:	mov	x3, x22
    9bf4:	mov	x2, x25
    9bf8:	mov	x0, x26
    9bfc:	mov	x4, x23
    9c00:	strb	w5, [sp, #152]
    9c04:	bl	2c88 <create_token_tree.isra.0>
    9c08:	mov	x1, x22
    9c0c:	mov	x22, x0
    9c10:	cmp	x1, #0x0
    9c14:	cset	w0, eq  // eq = none
    9c18:	cmp	x22, #0x0
    9c1c:	csinc	w0, w0, wzr, ne  // ne = any
    9c20:	ldr	x20, [x21]
    9c24:	cbnz	w0, a5a4 <re_compile_internal+0xd0c>
    9c28:	ldr	x0, [x20, #8]
    9c2c:	str	x22, [x19, #104]
    9c30:	lsl	x0, x0, #2
    9c34:	bl	0 <grub_malloc>
    9c38:	str	x0, [x20, #24]
    9c3c:	ldr	x0, [x20, #8]
    9c40:	lsl	x0, x0, #2
    9c44:	bl	0 <grub_malloc>
    9c48:	str	x0, [x20, #32]
    9c4c:	ldr	x0, [x20, #8]
    9c50:	lsl	x0, x0, #4
    9c54:	bl	0 <grub_malloc>
    9c58:	str	x0, [x20, #40]
    9c5c:	ldr	x0, [x20, #8]
    9c60:	lsl	x0, x0, #4
    9c64:	bl	0 <grub_malloc>
    9c68:	ldr	x1, [x20, #24]
    9c6c:	str	x0, [x20, #48]
    9c70:	cbz	x1, a39c <re_compile_internal+0xb04>
    9c74:	ldr	x1, [x20, #32]
    9c78:	cbz	x1, a39c <re_compile_internal+0xb04>
    9c7c:	ldr	x1, [x20, #40]
    9c80:	cbz	x1, a39c <re_compile_internal+0xb04>
    9c84:	cbz	x0, a39c <re_compile_internal+0xb04>
    9c88:	ldr	x0, [x21, #48]
    9c8c:	lsl	x0, x0, #2
    9c90:	bl	0 <grub_malloc>
    9c94:	str	x0, [x20, #208]
    9c98:	cbz	x0, 9cf8 <re_compile_internal+0x460>
    9c9c:	ldr	x2, [x21, #48]
    9ca0:	mov	x1, #0x0                   	// #0
    9ca4:	cbz	x2, 9cb8 <re_compile_internal+0x420>
    9ca8:	str	w1, [x0, x1, lsl #2]
    9cac:	add	x1, x1, #0x1
    9cb0:	cmp	x2, x1
    9cb4:	b.ne	9ca8 <re_compile_internal+0x410>  // b.any
    9cb8:	adrp	x1, 0 <grub_cmd_regexp>
    9cbc:	mov	x2, x20
    9cc0:	ldr	x0, [x20, #104]
    9cc4:	ldr	x1, [x1]
    9cc8:	bl	17f8 <preorder>
    9ccc:	ldr	x3, [x21, #48]
    9cd0:	cbz	x3, a5b4 <re_compile_internal+0xd1c>
    9cd4:	mov	x1, #0x0                   	// #0
    9cd8:	ldr	x0, [x20, #208]
    9cdc:	b	9ce8 <re_compile_internal+0x450>
    9ce0:	cmp	x3, x1
    9ce4:	b.eq	a5b8 <re_compile_internal+0xd20>  // b.none
    9ce8:	ldr	w2, [x0, x1, lsl #2]
    9cec:	cmp	w2, w1
    9cf0:	add	x1, x1, #0x1
    9cf4:	b.eq	9ce0 <re_compile_internal+0x448>  // b.none
    9cf8:	adrp	x1, 0 <grub_cmd_regexp>
    9cfc:	mov	x2, x21
    9d00:	ldr	x0, [x20, #104]
    9d04:	ldr	x1, [x1]
    9d08:	bl	1778 <postorder>
    9d0c:	cbnz	w0, a1b0 <re_compile_internal+0x918>
    9d10:	adrp	x1, 0 <grub_cmd_regexp>
    9d14:	mov	x2, x20
    9d18:	ldr	x0, [x20, #104]
    9d1c:	ldr	x1, [x1]
    9d20:	bl	1778 <postorder>
    9d24:	cbnz	w0, a1b0 <re_compile_internal+0x918>
    9d28:	adrp	x1, 0 <grub_cmd_regexp>
    9d2c:	mov	x2, x20
    9d30:	ldr	x0, [x20, #104]
    9d34:	adrp	x27, 0 <grub_cmd_regexp>
    9d38:	ldr	x1, [x1]
    9d3c:	bl	17f8 <preorder>
    9d40:	ldr	x22, [x20, #104]
    9d44:	ldrb	w0, [x22, #48]
    9d48:	ldr	w25, [x22, #56]
    9d4c:	cmp	w0, #0xb
    9d50:	b.hi	9dcc <re_compile_internal+0x534>  // b.pmore
    9d54:	nop
    9d58:	cmp	w0, #0x9
    9d5c:	b.hi	9fd4 <re_compile_internal+0x73c>  // b.pmore
    9d60:	cmp	w0, #0x4
    9d64:	b.eq	a080 <re_compile_internal+0x7e8>  // b.none
    9d68:	b.ls	9f88 <re_compile_internal+0x6f0>  // b.plast
    9d6c:	sub	w1, w0, #0x8
    9d70:	and	w1, w1, #0xff
    9d74:	cmp	w1, #0x1
    9d78:	b.hi	9de0 <re_compile_internal+0x548>  // b.pmore
    9d7c:	ldr	x3, [x22, #32]
    9d80:	sbfiz	x1, x25, #4, #32
    9d84:	ldr	x2, [x20, #40]
    9d88:	mov	x0, #0x4                   	// #4
    9d8c:	ldr	w26, [x3, #56]
    9d90:	mov	x3, #0x100000001           	// #4294967297
    9d94:	add	x25, x2, x1
    9d98:	str	x3, [x2, x1]
    9d9c:	bl	0 <grub_malloc>
    9da0:	str	x0, [x25, #8]
    9da4:	cbz	x0, a604 <re_compile_internal+0xd6c>
    9da8:	str	w26, [x0]
    9dac:	nop
    9db0:	ldr	x0, [x22, #8]
    9db4:	cbz	x0, 9e10 <re_compile_internal+0x578>
    9db8:	mov	x22, x0
    9dbc:	ldrb	w0, [x22, #48]
    9dc0:	ldr	w25, [x22, #56]
    9dc4:	cmp	w0, #0xb
    9dc8:	b.ls	9d58 <re_compile_internal+0x4c0>  // b.plast
    9dcc:	cmp	w0, #0xc
    9dd0:	b.eq	9d7c <re_compile_internal+0x4e4>  // b.none
    9dd4:	cmp	w0, #0x10
    9dd8:	b.eq	9db0 <re_compile_internal+0x518>  // b.none
    9ddc:	nop
    9de0:	tbz	w0, #3, 9df8 <re_compile_internal+0x560>
    9de4:	adrp	x0, 0 <grub_cmd_regexp>
    9de8:	mov	w2, #0x5c2                 	// #1474
    9dec:	ldr	x1, [x27]
    9df0:	ldr	x0, [x0]
    9df4:	bl	0 <grub_printf>
    9df8:	ldr	x1, [x22, #32]
    9dfc:	ldr	x0, [x20, #24]
    9e00:	ldr	w1, [x1, #56]
    9e04:	str	w1, [x0, w25, sxtw #2]
    9e08:	ldr	x0, [x22, #8]
    9e0c:	cbnz	x0, 9db8 <re_compile_internal+0x520>
    9e10:	ldr	x1, [x22, #16]
    9e14:	cmp	x1, x0
    9e18:	mov	x0, x22
    9e1c:	cset	w25, eq  // eq = none
    9e20:	cmp	x1, #0x0
    9e24:	csinc	w25, w25, wzr, ne  // ne = any
    9e28:	cbz	w25, a4e8 <re_compile_internal+0xc50>
    9e2c:	ldr	x1, [x22]
    9e30:	mov	x22, x1
    9e34:	cbnz	x1, 9e10 <re_compile_internal+0x578>
    9e38:	ldr	x0, [x20, #16]
    9e3c:	mov	w26, #0x0                   	// #0
    9e40:	mov	w27, #0x0                   	// #0
    9e44:	nop
    9e48:	cmp	x0, w27, sxtw
    9e4c:	sxtw	x22, w27
    9e50:	b.eq	9e78 <re_compile_internal+0x5e0>  // b.none
    9e54:	lsl	x22, x22, #4
    9e58:	ldr	x1, [x20, #48]
    9e5c:	add	x1, x1, x22
    9e60:	ldr	w1, [x1, #4]
    9e64:	cbz	w1, 9e98 <re_compile_internal+0x600>
    9e68:	add	w27, w27, #0x1
    9e6c:	cmp	x0, w27, sxtw
    9e70:	sxtw	x22, w27
    9e74:	b.ne	9e54 <re_compile_internal+0x5bc>  // b.any
    9e78:	cbz	w26, a0dc <re_compile_internal+0x844>
    9e7c:	ldr	x1, [x20, #48]
    9e80:	mov	x22, #0x0                   	// #0
    9e84:	mov	w26, #0x0                   	// #0
    9e88:	mov	w27, #0x0                   	// #0
    9e8c:	add	x1, x1, x22
    9e90:	ldr	w1, [x1, #4]
    9e94:	cbnz	w1, 9e68 <re_compile_internal+0x5d0>
    9e98:	mov	w2, w27
    9e9c:	mov	x1, x20
    9ea0:	mov	x0, x23
    9ea4:	mov	w3, #0x1                   	// #1
    9ea8:	bl	44c0 <calc_eclosure_iter.isra.0>
    9eac:	cbnz	w0, a1b0 <re_compile_internal+0x918>
    9eb0:	ldr	x0, [x20, #48]
    9eb4:	add	w27, w27, #0x1
    9eb8:	add	x22, x0, x22
    9ebc:	ldr	w0, [x22, #4]
    9ec0:	cbz	w0, 9fb0 <re_compile_internal+0x718>
    9ec4:	ldr	x0, [x20, #16]
    9ec8:	b	9e48 <re_compile_internal+0x5b0>
    9ecc:	add	w1, w20, #0x1
    9ed0:	add	x0, sp, #0xa0
    9ed4:	bl	1898 <re_string_realloc_buffers>
    9ed8:	mov	w2, w0
    9edc:	cbnz	w0, 9a80 <re_compile_internal+0x1e8>
    9ee0:	ldrb	w1, [sp, #259]
    9ee4:	ldr	w2, [x19, #164]
    9ee8:	b	9a1c <re_compile_internal+0x184>
    9eec:	ldp	x23, x24, [sp, #48]
    9ef0:	ldp	x27, x28, [sp, #80]
    9ef4:	mov	w1, #0xc                   	// #12
    9ef8:	mov	x0, x19
    9efc:	str	w1, [sp, #124]
    9f00:	bl	2268 <free_dfa_content>
    9f04:	stp	xzr, xzr, [x21]
    9f08:	ldr	w0, [sp, #124]
    9f0c:	ldp	x19, x20, [sp, #16]
    9f10:	ldp	x21, x22, [sp, #32]
    9f14:	ldp	x25, x26, [sp, #64]
    9f18:	ldp	x29, x30, [sp], #272
    9f1c:	ret
    9f20:	mov	x0, #0x20                  	// #32
    9f24:	bl	0 <grub_zalloc>
    9f28:	str	x0, [x19, #120]
    9f2c:	cbz	x0, a538 <re_compile_internal+0xca0>
    9f30:	mov	w4, #0x0                   	// #0
    9f34:	mov	x6, #0x1                   	// #1
    9f38:	mov	w1, #0x0                   	// #0
    9f3c:	nop
    9f40:	add	w3, w4, w1
    9f44:	lsl	x5, x6, x1
    9f48:	tst	w3, #0xffffff80
    9f4c:	add	w1, w1, #0x1
    9f50:	b.ne	9f60 <re_compile_internal+0x6c8>  // b.any
    9f54:	ldr	x2, [x0]
    9f58:	orr	x2, x2, x5
    9f5c:	str	x2, [x0]
    9f60:	cmp	w1, #0x40
    9f64:	b.ne	9f40 <re_compile_internal+0x6a8>  // b.any
    9f68:	add	w4, w4, #0x40
    9f6c:	add	x0, x0, #0x8
    9f70:	cmp	w4, #0x100
    9f74:	b.ne	9f38 <re_compile_internal+0x6a0>  // b.any
    9f78:	b	999c <re_compile_internal+0x104>
    9f7c:	str	wzr, [sp, #124]
    9f80:	stp	w1, w1, [sp, #204]
    9f84:	b	9b60 <re_compile_internal+0x2c8>
    9f88:	cmp	w0, #0x2
    9f8c:	b.ne	9df8 <re_compile_internal+0x560>  // b.any
    9f90:	ldr	x0, [x22, #32]
    9f94:	cbz	x0, 9db0 <re_compile_internal+0x518>
    9f98:	adrp	x0, 0 <grub_cmd_regexp>
    9f9c:	mov	w2, #0x59f                 	// #1439
    9fa0:	ldr	x1, [x27]
    9fa4:	ldr	x0, [x0]
    9fa8:	bl	0 <grub_printf>
    9fac:	b	9db0 <re_compile_internal+0x518>
    9fb0:	ldr	x0, [sp, #152]
    9fb4:	sxtw	x22, w27
    9fb8:	mov	w26, w25
    9fbc:	lsl	x22, x22, #4
    9fc0:	bl	0 <grub_free>
    9fc4:	ldr	x0, [x20, #16]
    9fc8:	cmp	x0, w27, sxtw
    9fcc:	b.ne	9e58 <re_compile_internal+0x5c0>  // b.any
    9fd0:	b	9e7c <re_compile_internal+0x5e4>
    9fd4:	ldrb	w0, [x20, #160]
    9fd8:	orr	w0, w0, #0x1
    9fdc:	strb	w0, [x20, #160]
    9fe0:	ldr	x0, [x22, #8]
    9fe4:	cbz	x0, a514 <re_compile_internal+0xc7c>
    9fe8:	ldr	x0, [x0, #24]
    9fec:	ldr	w28, [x0, #56]
    9ff0:	ldr	x0, [x22, #16]
    9ff4:	cbz	x0, a504 <re_compile_internal+0xc6c>
    9ff8:	ldr	x0, [x0, #24]
    9ffc:	ldr	w26, [x0, #56]
    a000:	tbnz	w28, #31, a050 <re_compile_internal+0x7b8>
    a004:	tbnz	w26, #31, a068 <re_compile_internal+0x7d0>
    a008:	ldr	x1, [x20, #40]
    a00c:	sbfiz	x25, x25, #4, #32
    a010:	mov	w5, #0x2                   	// #2
    a014:	mov	x0, #0x8                   	// #8
    a018:	add	x2, x1, x25
    a01c:	str	x2, [sp, #96]
    a020:	str	w5, [x1, x25]
    a024:	bl	0 <grub_malloc>
    a028:	ldr	x2, [sp, #96]
    a02c:	mov	w5, #0x2                   	// #2
    a030:	str	x0, [x2, #8]
    a034:	cbz	x0, a1ac <re_compile_internal+0x914>
    a038:	cmp	w28, w26
    a03c:	b.eq	a4f4 <re_compile_internal+0xc5c>  // b.none
    a040:	str	w5, [x2, #4]
    a044:	b.ge	a520 <re_compile_internal+0xc88>  // b.tcont
    a048:	stp	w28, w26, [x0]
    a04c:	b	9db0 <re_compile_internal+0x518>
    a050:	adrp	x0, 0 <grub_cmd_regexp>
    a054:	mov	w2, #0x5af                 	// #1455
    a058:	ldr	x1, [x27]
    a05c:	ldr	x0, [x0]
    a060:	bl	0 <grub_printf>
    a064:	tbz	w26, #31, a008 <re_compile_internal+0x770>
    a068:	adrp	x0, 0 <grub_cmd_regexp>
    a06c:	mov	w2, #0x5b0                 	// #1456
    a070:	ldr	x1, [x27]
    a074:	ldr	x0, [x0]
    a078:	bl	0 <grub_printf>
    a07c:	b	a008 <re_compile_internal+0x770>
    a080:	ldr	x1, [x22, #32]
    a084:	sxtw	x25, w25
    a088:	ldr	x0, [x20, #24]
    a08c:	ldr	w1, [x1, #56]
    a090:	str	w1, [x0, x25, lsl #2]
    a094:	ldrb	w0, [x22, #48]
    a098:	cmp	w0, #0x4
    a09c:	b.ne	9db0 <re_compile_internal+0x518>  // b.any
    a0a0:	ldr	x2, [x20, #40]
    a0a4:	lsl	x25, x25, #4
    a0a8:	str	w1, [sp, #108]
    a0ac:	mov	x1, #0x100000001           	// #4294967297
    a0b0:	add	x3, x2, x25
    a0b4:	mov	x0, #0x4                   	// #4
    a0b8:	str	x1, [x2, x25]
    a0bc:	str	x3, [sp, #96]
    a0c0:	bl	0 <grub_malloc>
    a0c4:	ldr	x3, [sp, #96]
    a0c8:	ldr	w1, [sp, #108]
    a0cc:	str	x0, [x3, #8]
    a0d0:	cbz	x0, a658 <re_compile_internal+0xdc0>
    a0d4:	str	w1, [x0]
    a0d8:	b	9db0 <re_compile_internal+0x518>
    a0dc:	ldrb	w1, [x21, #56]
    a0e0:	tbnz	w1, #4, a0f8 <re_compile_internal+0x860>
    a0e4:	ldr	x1, [x21, #48]
    a0e8:	cbz	x1, a0f8 <re_compile_internal+0x860>
    a0ec:	ldrb	w1, [x20, #160]
    a0f0:	tbnz	w1, #0, a100 <re_compile_internal+0x868>
    a0f4:	nop
    a0f8:	ldr	w1, [x20, #140]
    a0fc:	cbz	w1, a1d8 <re_compile_internal+0x940>
    a100:	lsl	x0, x0, #4
    a104:	bl	0 <grub_malloc>
    a108:	str	x0, [x20, #56]
    a10c:	cbz	x0, a39c <re_compile_internal+0xb04>
    a110:	ldr	x1, [x20, #16]
    a114:	mov	x22, #0x0                   	// #0
    a118:	cbnz	x1, a124 <re_compile_internal+0x88c>
    a11c:	b	a1d8 <re_compile_internal+0x940>
    a120:	ldr	x0, [x20, #56]
    a124:	add	x0, x0, x22, lsl #4
    a128:	mov	x2, #0x10                  	// #16
    a12c:	mov	w1, #0x0                   	// #0
    a130:	bl	0 <grub_memset>
    a134:	add	x22, x22, #0x1
    a138:	ldr	x2, [x20, #16]
    a13c:	cmp	x2, x22
    a140:	b.hi	a120 <re_compile_internal+0x888>  // b.pmore
    a144:	cbz	x2, a1d8 <re_compile_internal+0x940>
    a148:	ldr	x0, [x20, #48]
    a14c:	str	xzr, [sp, #96]
    a150:	ldr	x1, [sp, #96]
    a154:	mov	x22, #0x0                   	// #0
    a158:	mov	w28, w1
    a15c:	lsl	x25, x1, #4
    a160:	add	x3, x0, x25
    a164:	ldr	w4, [x3, #4]
    a168:	ldr	x27, [x3, #8]
    a16c:	cmp	w4, #0x0
    a170:	b.gt	a18c <re_compile_internal+0x8f4>
    a174:	b	a1c0 <re_compile_internal+0x928>
    a178:	ldr	x0, [x20, #48]
    a17c:	add	x2, x0, x25
    a180:	ldr	w2, [x2, #4]
    a184:	cmp	w2, w22
    a188:	b.le	a1bc <re_compile_internal+0x924>
    a18c:	ldrsw	x2, [x27, x22, lsl #2]
    a190:	mov	w1, w28
    a194:	ldr	x0, [x20, #56]
    a198:	add	x22, x22, #0x1
    a19c:	add	x0, x0, x2, lsl #4
    a1a0:	bl	1958 <re_node_set_insert_last>
    a1a4:	tst	w0, #0xff
    a1a8:	b.ne	a178 <re_compile_internal+0x8e0>  // b.any
    a1ac:	mov	w0, #0xc                   	// #12
    a1b0:	str	w0, [sp, #124]
    a1b4:	ldr	x20, [x21]
    a1b8:	b	9a88 <re_compile_internal+0x1f0>
    a1bc:	ldr	x2, [x20, #16]
    a1c0:	ldr	x1, [sp, #96]
    a1c4:	add	x1, x1, #0x1
    a1c8:	str	x1, [sp, #96]
    a1cc:	cmp	x2, x1
    a1d0:	b.hi	a150 <re_compile_internal+0x8b8>  // b.pmore
    a1d4:	nop
    a1d8:	ldrb	w0, [x19, #160]
    a1dc:	cmp	x24, #0x0
    a1e0:	str	wzr, [sp, #124]
    a1e4:	cset	w1, eq  // eq = none
    a1e8:	ands	w1, w1, w0, lsr #2
    a1ec:	b.ne	a3bc <re_compile_internal+0xb24>  // b.any
    a1f0:	ldr	x1, [x19, #104]
    a1f4:	mov	x0, x23
    a1f8:	ldr	x2, [x19, #48]
    a1fc:	ldr	x1, [x1, #24]
    a200:	ldr	w1, [x1, #56]
    a204:	str	w1, [x19, #136]
    a208:	add	x1, x2, w1, sxtw #4
    a20c:	bl	3528 <re_node_set_init_copy>
    a210:	str	w0, [sp, #128]
    a214:	mov	w20, w0
    a218:	cbnz	w0, a2a0 <re_compile_internal+0xa08>
    a21c:	ldr	w0, [x19, #140]
    a220:	cmp	w0, #0x0
    a224:	b.le	a26c <re_compile_internal+0x9d4>
    a228:	ldr	w7, [sp, #148]
    a22c:	cmp	w7, #0x0
    a230:	b.le	a26c <re_compile_internal+0x9d4>
    a234:	add	x22, x23, #0x8
    a238:	mov	w6, #0x0                   	// #0
    a23c:	nop
    a240:	ldr	x0, [sp, #152]
    a244:	ldr	x5, [x19]
    a248:	ldrsw	x3, [x0, w6, sxtw #2]
    a24c:	lsl	x3, x3, #4
    a250:	add	x8, x5, x3
    a254:	ldrb	w1, [x8, #8]
    a258:	cmp	w1, #0x4
    a25c:	b.eq	a304 <re_compile_internal+0xa6c>  // b.none
    a260:	add	w6, w6, #0x1
    a264:	cmp	w7, w6
    a268:	b.gt	a240 <re_compile_internal+0x9a8>
    a26c:	mov	x2, x23
    a270:	mov	x1, x19
    a274:	add	x0, sp, #0x80
    a278:	mov	w3, #0x0                   	// #0
    a27c:	bl	3768 <re_acquire_state_context>
    a280:	str	x0, [x19, #72]
    a284:	cbz	x0, a4e0 <re_compile_internal+0xc48>
    a288:	ldrsb	w1, [x0, #80]
    a28c:	tbnz	w1, #31, a480 <re_compile_internal+0xbe8>
    a290:	stp	x0, x0, [x19, #80]
    a294:	str	x0, [x19, #96]
    a298:	ldr	x0, [sp, #152]
    a29c:	bl	0 <grub_free>
    a2a0:	ldr	x22, [x21]
    a2a4:	str	w20, [sp, #124]
    a2a8:	ldr	x20, [x22, #112]
    a2ac:	cbz	x20, a2c0 <re_compile_internal+0xa28>
    a2b0:	mov	x0, x20
    a2b4:	ldr	x20, [x20]
    a2b8:	bl	0 <grub_free>
    a2bc:	cbnz	x20, a2b0 <re_compile_internal+0xa18>
    a2c0:	ldr	x0, [x22, #32]
    a2c4:	mov	w1, #0xf                   	// #15
    a2c8:	stp	xzr, xzr, [x22, #104]
    a2cc:	str	w1, [x22, #128]
    a2d0:	bl	0 <grub_free>
    a2d4:	str	xzr, [x22, #32]
    a2d8:	add	x0, sp, #0xa0
    a2dc:	bl	2220 <re_string_destruct>
    a2e0:	ldr	w0, [sp, #124]
    a2e4:	cbnz	w0, 9ac0 <re_compile_internal+0x228>
    a2e8:	ldp	x19, x20, [sp, #16]
    a2ec:	ldp	x21, x22, [sp, #32]
    a2f0:	ldp	x23, x24, [sp, #48]
    a2f4:	ldp	x25, x26, [sp, #64]
    a2f8:	ldp	x27, x28, [sp, #80]
    a2fc:	ldp	x29, x30, [sp], #272
    a300:	ret
    a304:	sub	w2, w7, #0x1
    a308:	sub	x0, x0, #0x4
    a30c:	add	x2, x2, #0x2
    a310:	mov	x1, #0x1                   	// #1
    a314:	b	a320 <re_compile_internal+0xa88>
    a318:	cmp	x2, x1
    a31c:	b.eq	a390 <re_compile_internal+0xaf8>  // b.none
    a320:	ldrsw	x4, [x0, x1, lsl #2]
    a324:	mov	w9, w1
    a328:	add	x1, x1, #0x1
    a32c:	lsl	x4, x4, #4
    a330:	add	x10, x5, x4
    a334:	ldrb	w10, [x10, #8]
    a338:	cmp	w10, #0x9
    a33c:	b.ne	a318 <re_compile_internal+0xa80>  // b.any
    a340:	ldr	w10, [x5, x4]
    a344:	ldr	w4, [x8]
    a348:	cmp	w10, w4
    a34c:	b.ne	a318 <re_compile_internal+0xa80>  // b.any
    a350:	ldr	x2, [x19, #40]
    a354:	mov	x1, x22
    a358:	mov	w0, w7
    a35c:	add	x3, x2, x3
    a360:	ldr	x2, [x3, #8]
    a364:	ldr	w2, [x2]
    a368:	bl	2548 <re_node_set_contains.isra.0>
    a36c:	cbnz	w0, a260 <re_compile_internal+0x9c8>
    a370:	ldr	x1, [x19, #48]
    a374:	mov	x0, x23
    a378:	add	x1, x1, w2, sxtw #4
    a37c:	bl	3218 <re_node_set_merge>
    a380:	cbnz	w0, a610 <re_compile_internal+0xd78>
    a384:	ldr	w7, [sp, #148]
    a388:	mov	w6, #0x1                   	// #1
    a38c:	b	a264 <re_compile_internal+0x9cc>
    a390:	cmp	w7, w9
    a394:	b.ne	a350 <re_compile_internal+0xab8>  // b.any
    a398:	b	a260 <re_compile_internal+0x9c8>
    a39c:	mov	w0, #0xc                   	// #12
    a3a0:	str	w0, [sp, #124]
    a3a4:	ldr	x20, [x21]
    a3a8:	b	9a88 <re_compile_internal+0x1f0>
    a3ac:	add	x0, sp, #0xa0
    a3b0:	bl	87a8 <build_wcs_buffer>
    a3b4:	str	wzr, [sp, #124]
    a3b8:	b	9b60 <re_compile_internal+0x2c8>
    a3bc:	ldr	x0, [x21, #40]
    a3c0:	cbnz	x0, a1f0 <re_compile_internal+0x958>
    a3c4:	ldr	x6, [x19, #16]
    a3c8:	cbz	x6, a664 <re_compile_internal+0xdcc>
    a3cc:	ldr	x7, [x19]
    a3d0:	mov	w2, #0x10001               	// #65537
    a3d4:	mov	w8, #0x0                   	// #0
    a3d8:	mov	x5, #0x0                   	// #0
    a3dc:	mov	x4, x7
    a3e0:	mov	x3, #0x1                   	// #1
    a3e4:	movk	x2, #0x1, lsl #48
    a3e8:	ldrb	w0, [x4, #8]
    a3ec:	cmp	w0, #0x5
    a3f0:	b.eq	a628 <re_compile_internal+0xd90>  // b.none
    a3f4:	b.hi	a5cc <re_compile_internal+0xd34>  // b.pmore
    a3f8:	cmp	w0, #0x1
    a3fc:	b.eq	a618 <re_compile_internal+0xd80>  // b.none
    a400:	cmp	w0, #0x3
    a404:	b.ne	a41c <re_compile_internal+0xb84>  // b.any
    a408:	ldr	x0, [x4]
    a40c:	ldr	x9, [x0, #16]
    a410:	cbnz	x9, a1f0 <re_compile_internal+0x958>
    a414:	ldr	x0, [x0, #24]
    a418:	cbnz	x0, a1f0 <re_compile_internal+0x958>
    a41c:	add	x5, x5, #0x1
    a420:	add	x4, x4, #0x10
    a424:	cmp	x6, x5
    a428:	b.ne	a3e8 <re_compile_internal+0xb50>  // b.any
    a42c:	orr	w26, w26, w8
    a430:	add	x6, x7, x6, lsl #4
    a434:	tst	w26, #0xff
    a438:	mov	w1, #0x7                   	// #7
    a43c:	b.ne	a45c <re_compile_internal+0xbc4>  // b.any
    a440:	b	a664 <re_compile_internal+0xdcc>
    a444:	cmp	w0, #0x5
    a448:	b.ne	a450 <re_compile_internal+0xbb8>  // b.any
    a44c:	strb	w1, [x7, #8]
    a450:	add	x7, x7, #0x10
    a454:	cmp	x6, x7
    a458:	b.eq	a668 <re_compile_internal+0xdd0>  // b.none
    a45c:	ldrb	w0, [x7, #8]
    a460:	cmp	w0, #0x1
    a464:	b.ne	a444 <re_compile_internal+0xbac>  // b.any
    a468:	ldrsb	w0, [x7]
    a46c:	tbz	w0, #31, a450 <re_compile_internal+0xbb8>
    a470:	ldrb	w0, [x7, #10]
    a474:	and	w0, w0, #0xffffffdf
    a478:	strb	w0, [x7, #10]
    a47c:	b	a450 <re_compile_internal+0xbb8>
    a480:	mov	x2, x23
    a484:	mov	x1, x19
    a488:	mov	w3, #0x1                   	// #1
    a48c:	add	x0, sp, #0x80
    a490:	bl	3768 <re_acquire_state_context>
    a494:	str	x0, [x19, #80]
    a498:	mov	x2, x23
    a49c:	mov	x1, x19
    a4a0:	mov	w3, #0x2                   	// #2
    a4a4:	add	x0, sp, #0x80
    a4a8:	bl	3768 <re_acquire_state_context>
    a4ac:	str	x0, [x19, #88]
    a4b0:	mov	x1, x19
    a4b4:	mov	x2, x23
    a4b8:	add	x0, sp, #0x80
    a4bc:	mov	w3, #0x6                   	// #6
    a4c0:	bl	3768 <re_acquire_state_context>
    a4c4:	str	x0, [x19, #96]
    a4c8:	ldr	x1, [x19, #80]
    a4cc:	cbz	x1, a4e0 <re_compile_internal+0xc48>
    a4d0:	ldr	x1, [x19, #88]
    a4d4:	cmp	x1, #0x0
    a4d8:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    a4dc:	b.ne	a298 <re_compile_internal+0xa00>  // b.any
    a4e0:	ldr	w20, [sp, #128]
    a4e4:	b	a2a0 <re_compile_internal+0xa08>
    a4e8:	mov	x0, x1
    a4ec:	mov	x22, x0
    a4f0:	b	9dbc <re_compile_internal+0x524>
    a4f4:	mov	w1, #0x1                   	// #1
    a4f8:	str	w1, [x2, #4]
    a4fc:	str	w28, [x0]
    a500:	b	9db0 <re_compile_internal+0x518>
    a504:	ldr	x0, [x22, #32]
    a508:	ldr	w26, [x0, #56]
    a50c:	tbz	w28, #31, a004 <re_compile_internal+0x76c>
    a510:	b	a050 <re_compile_internal+0x7b8>
    a514:	ldr	x0, [x22, #32]
    a518:	ldr	w28, [x0, #56]
    a51c:	b	9ff0 <re_compile_internal+0x758>
    a520:	stp	w26, w28, [x0]
    a524:	b	9db0 <re_compile_internal+0x518>
    a528:	add	x0, sp, #0xa0
    a52c:	bl	16f0 <build_upper_buffer>
    a530:	str	wzr, [sp, #124]
    a534:	b	9b60 <re_compile_internal+0x2c8>
    a538:	ldp	x23, x24, [sp, #48]
    a53c:	b	9ef4 <re_compile_internal+0x65c>
    a540:	mov	x0, x19
    a544:	mov	x1, #0xd8                  	// #216
    a548:	bl	0 <grub_realloc>
    a54c:	mov	x19, x0
    a550:	cbz	x0, a644 <re_compile_internal+0xdac>
    a554:	mov	x0, #0xd8                  	// #216
    a558:	stp	x19, x0, [x21]
    a55c:	b	98e4 <re_compile_internal+0x4c>
    a560:	mov	w23, #0x0                   	// #0
    a564:	mov	x0, #0x10                  	// #16
    a568:	b	9948 <re_compile_internal+0xb0>
    a56c:	cbz	x0, a64c <re_compile_internal+0xdb4>
    a570:	mov	w5, #0x2                   	// #2
    a574:	add	x26, x20, #0x70
    a578:	add	x23, sp, #0x90
    a57c:	add	x20, x20, #0x80
    a580:	mov	x1, x20
    a584:	mov	x0, x26
    a588:	mov	x4, x23
    a58c:	mov	x3, #0x0                   	// #0
    a590:	mov	x2, #0x0                   	// #0
    a594:	strb	w5, [sp, #152]
    a598:	bl	2c88 <create_token_tree.isra.0>
    a59c:	mov	x22, x0
    a5a0:	b	9be8 <re_compile_internal+0x350>
    a5a4:	mov	w0, #0xc                   	// #12
    a5a8:	str	xzr, [x19, #104]
    a5ac:	str	w0, [sp, #124]
    a5b0:	b	9a88 <re_compile_internal+0x1f0>
    a5b4:	ldr	x0, [x20, #208]
    a5b8:	bl	0 <grub_free>
    a5bc:	str	xzr, [x20, #208]
    a5c0:	b	9cf8 <re_compile_internal+0x460>
    a5c4:	str	wzr, [sp, #124]
    a5c8:	b	9b60 <re_compile_internal+0x2c8>
    a5cc:	cmp	w0, #0x6
    a5d0:	b.eq	a1f0 <re_compile_internal+0x958>  // b.none
    a5d4:	cmp	w0, #0xc
    a5d8:	b.ne	a41c <re_compile_internal+0xb84>  // b.any
    a5dc:	ldr	w0, [x4]
    a5e0:	cmp	w0, #0x40
    a5e4:	b.hi	a630 <re_compile_internal+0xd98>  // b.pmore
    a5e8:	cmp	w0, #0xf
    a5ec:	b.ls	a1f0 <re_compile_internal+0x958>  // b.plast
    a5f0:	sub	w0, w0, #0x10
    a5f4:	lsl	x0, x3, x0
    a5f8:	tst	x0, x2
    a5fc:	b.eq	a1f0 <re_compile_internal+0x958>  // b.none
    a600:	b	a41c <re_compile_internal+0xb84>
    a604:	mov	w0, #0xc                   	// #12
    a608:	str	xzr, [x25]
    a60c:	b	a1b0 <re_compile_internal+0x918>
    a610:	mov	w20, w0
    a614:	b	a2a0 <re_compile_internal+0xa08>
    a618:	ldrsb	w0, [x4]
    a61c:	cmp	w0, #0x0
    a620:	csel	w26, w26, w1, ge  // ge = tcont
    a624:	b	a41c <re_compile_internal+0xb84>
    a628:	mov	w8, w1
    a62c:	b	a41c <re_compile_internal+0xb84>
    a630:	cmp	w0, #0x80
    a634:	b.eq	a41c <re_compile_internal+0xb84>  // b.none
    a638:	b	a1f0 <re_compile_internal+0x958>
    a63c:	mov	w3, w0
    a640:	b	9b58 <re_compile_internal+0x2c0>
    a644:	mov	w0, #0xc                   	// #12
    a648:	b	9f0c <re_compile_internal+0x674>
    a64c:	ldr	x20, [x21]
    a650:	str	xzr, [x19, #104]
    a654:	b	9a88 <re_compile_internal+0x1f0>
    a658:	mov	w0, #0xc                   	// #12
    a65c:	str	xzr, [x3]
    a660:	b	a1b0 <re_compile_internal+0x918>
    a664:	mov	w8, #0x0                   	// #0
    a668:	ldr	w2, [x19, #140]
    a66c:	mov	w1, #0x1                   	// #1
    a670:	ldrb	w0, [x19, #160]
    a674:	cmp	w2, #0x0
    a678:	str	w1, [x19, #164]
    a67c:	ccmp	w8, #0x0, #0x0, le
    a680:	and	w1, w0, #0xfffffff9
    a684:	cset	w0, ne  // ne = any
    a688:	orr	w0, w1, w0, lsl #1
    a68c:	strb	w0, [x19, #160]
    a690:	b	a1f0 <re_compile_internal+0x958>
    a694:	nop
	...

000000000000a6e0 <extend_buffers>:
    a6e0:	stp	x29, x30, [sp, #-32]!
    a6e4:	mov	w3, #0x3ffffffe            	// #1073741822
    a6e8:	mov	x29, sp
    a6ec:	ldr	w2, [x0, #52]
    a6f0:	stp	x19, x20, [sp, #16]
    a6f4:	cmp	w2, w3
    a6f8:	b.hi	a810 <extend_buffers+0x130>  // b.pmore
    a6fc:	ldr	w3, [x0, #64]
    a700:	lsl	w2, w2, #1
    a704:	mov	x19, x0
    a708:	cmp	w2, w3
    a70c:	csel	w2, w2, w3, le
    a710:	cmp	w2, w1
    a714:	csel	w1, w2, w1, ge  // ge = tcont
    a718:	bl	1898 <re_string_realloc_buffers>
    a71c:	mov	w20, w0
    a720:	cbnz	w0, a770 <extend_buffers+0x90>
    a724:	ldr	x0, [x19, #136]
    a728:	cbz	x0, a744 <extend_buffers+0x64>
    a72c:	ldr	w1, [x19, #52]
    a730:	add	w1, w1, #0x1
    a734:	sbfiz	x1, x1, #3, #32
    a738:	bl	0 <grub_realloc>
    a73c:	cbz	x0, a810 <extend_buffers+0x130>
    a740:	str	x0, [x19, #136]
    a744:	ldrb	w0, [x19, #96]
    a748:	ldr	w1, [x19, #104]
    a74c:	cmp	w1, #0x1
    a750:	cbz	w0, a780 <extend_buffers+0xa0>
    a754:	mov	x0, x19
    a758:	b.le	a7fc <extend_buffers+0x11c>
    a75c:	ldp	x19, x20, [sp, #16]
    a760:	ldp	x29, x30, [sp], #32
    a764:	b	9058 <build_wcs_upper_buffer>
    a768:	mov	w6, w1
    a76c:	stp	w6, w6, [x19, #44]
    a770:	mov	w0, w20
    a774:	ldp	x19, x20, [sp, #16]
    a778:	ldp	x29, x30, [sp], #32
    a77c:	ret
    a780:	b.gt	a7e4 <extend_buffers+0x104>
    a784:	ldr	x3, [x19, #80]
    a788:	cbz	x3, a770 <extend_buffers+0x90>
    a78c:	ldr	w6, [x19, #52]
    a790:	ldr	w0, [x19, #64]
    a794:	ldr	w1, [x19, #44]
    a798:	cmp	w6, w0
    a79c:	csel	w6, w6, w0, le
    a7a0:	cmp	w6, w1
    a7a4:	b.le	a768 <extend_buffers+0x88>
    a7a8:	sxtw	x0, w1
    a7ac:	b	a7b4 <extend_buffers+0xd4>
    a7b0:	ldr	x3, [x19, #80]
    a7b4:	ldp	x5, x4, [x19]
    a7b8:	ldr	w2, [x19, #40]
    a7bc:	add	w2, w1, w2
    a7c0:	add	w1, w1, #0x1
    a7c4:	cmp	w6, w1
    a7c8:	ldrb	w2, [x5, w2, sxtw]
    a7cc:	ldrb	w2, [x3, x2]
    a7d0:	strb	w2, [x4, x0]
    a7d4:	add	x0, x0, #0x1
    a7d8:	b.ne	a7b0 <extend_buffers+0xd0>  // b.any
    a7dc:	stp	w6, w6, [x19, #44]
    a7e0:	b	a770 <extend_buffers+0x90>
    a7e4:	mov	x0, x19
    a7e8:	bl	87a8 <build_wcs_buffer>
    a7ec:	mov	w0, w20
    a7f0:	ldp	x19, x20, [sp, #16]
    a7f4:	ldp	x29, x30, [sp], #32
    a7f8:	ret
    a7fc:	bl	16f0 <build_upper_buffer>
    a800:	mov	w0, w20
    a804:	ldp	x19, x20, [sp, #16]
    a808:	ldp	x29, x30, [sp], #32
    a80c:	ret
    a810:	mov	w20, #0xc                   	// #12
    a814:	mov	w0, w20
    a818:	ldp	x19, x20, [sp, #16]
    a81c:	ldp	x29, x30, [sp], #32
    a820:	ret
    a824:	nop

000000000000a828 <clean_state_log_if_needed>:
    a828:	stp	x29, x30, [sp, #-48]!
    a82c:	mov	x29, sp
    a830:	stp	x19, x20, [sp, #16]
    a834:	mov	x19, x0
    a838:	ldr	w0, [x0, #52]
    a83c:	str	x21, [sp, #32]
    a840:	mov	w20, w1
    a844:	ldr	w21, [x19, #144]
    a848:	cmp	w0, w1
    a84c:	b.gt	a888 <clean_state_log_if_needed+0x60>
    a850:	ldr	w1, [x19, #64]
    a854:	cmp	w0, w1
    a858:	b.ge	a888 <clean_state_log_if_needed+0x60>  // b.tcont
    a85c:	add	w1, w20, #0x1
    a860:	mov	x0, x19
    a864:	bl	a6e0 <extend_buffers>
    a868:	cbnz	w0, a878 <clean_state_log_if_needed+0x50>
    a86c:	cmp	w21, w20
    a870:	mov	w0, #0x0                   	// #0
    a874:	b.lt	a8b4 <clean_state_log_if_needed+0x8c>  // b.tstop
    a878:	ldp	x19, x20, [sp, #16]
    a87c:	ldr	x21, [sp, #32]
    a880:	ldp	x29, x30, [sp], #48
    a884:	ret
    a888:	ldr	w0, [x19, #44]
    a88c:	cmp	w0, w20
    a890:	b.gt	a86c <clean_state_log_if_needed+0x44>
    a894:	ldr	w1, [x19, #64]
    a898:	cmp	w0, w1
    a89c:	b.ge	a86c <clean_state_log_if_needed+0x44>  // b.tcont
    a8a0:	add	w1, w20, #0x1
    a8a4:	mov	x0, x19
    a8a8:	bl	a6e0 <extend_buffers>
    a8ac:	cbz	w0, a86c <clean_state_log_if_needed+0x44>
    a8b0:	b	a878 <clean_state_log_if_needed+0x50>
    a8b4:	ldr	x3, [x19, #136]
    a8b8:	sxtw	x0, w21
    a8bc:	sub	w2, w20, w21
    a8c0:	add	x0, x0, #0x1
    a8c4:	mov	w1, #0x0                   	// #0
    a8c8:	sbfiz	x2, x2, #3, #32
    a8cc:	add	x0, x3, x0, lsl #3
    a8d0:	bl	0 <grub_memset>
    a8d4:	str	w20, [x19, #144]
    a8d8:	mov	w0, #0x0                   	// #0
    a8dc:	ldp	x19, x20, [sp, #16]
    a8e0:	ldr	x21, [sp, #32]
    a8e4:	ldp	x29, x30, [sp], #48
    a8e8:	ret
    a8ec:	nop

000000000000a8f0 <get_subexp_sub.isra.0>:
    a8f0:	stp	x29, x30, [sp, #-80]!
    a8f4:	mov	x6, x2
    a8f8:	mov	w5, w4
    a8fc:	mov	x29, sp
    a900:	stp	x19, x20, [sp, #16]
    a904:	mov	x20, x2
    a908:	mov	x19, x0
    a90c:	stp	x23, x24, [sp, #48]
    a910:	mov	w24, w3
    a914:	mov	w23, w4
    a918:	mov	w4, w3
    a91c:	ldr	w3, [x2, #4]
    a920:	ldr	w2, [x6], #8
    a924:	stp	x21, x22, [sp, #32]
    a928:	mov	x21, x1
    a92c:	mov	x1, x6
    a930:	mov	w6, #0x8                   	// #8
    a934:	bl	4bb8 <check_arrival>
    a938:	cbz	w0, a950 <get_subexp_sub.isra.0+0x60>
    a93c:	ldp	x19, x20, [sp, #16]
    a940:	ldp	x21, x22, [sp, #32]
    a944:	ldp	x23, x24, [sp, #48]
    a948:	ldp	x29, x30, [sp], #80
    a94c:	ret
    a950:	ldp	w2, w1, [x19, #148]
    a954:	stp	x25, x26, [sp, #64]
    a958:	ldr	w22, [x20, #4]
    a95c:	ldr	w25, [x21]
    a960:	cmp	w2, w1
    a964:	mov	w4, w22
    a968:	ldr	x0, [x19, #160]
    a96c:	b.ge	aa04 <get_subexp_sub.isra.0+0x114>  // b.tcont
    a970:	mov	w7, #0x14                  	// #20
    a974:	cmp	w2, #0x0
    a978:	smull	x7, w2, w7
    a97c:	b.le	a994 <get_subexp_sub.isra.0+0xa4>
    a980:	sub	x3, x7, #0x14
    a984:	add	x3, x0, x3
    a988:	ldr	w1, [x3, #4]
    a98c:	cmp	w23, w1
    a990:	b.eq	a9f8 <get_subexp_sub.isra.0+0x108>  // b.none
    a994:	add	x6, x0, x7
    a998:	cmp	w25, w22
    a99c:	str	w24, [x0, x7]
    a9a0:	csetm	w1, eq  // eq = none
    a9a4:	add	w2, w2, #0x1
    a9a8:	sub	w0, w22, w25
    a9ac:	stp	w23, w25, [x6, #4]
    a9b0:	str	w22, [x6, #12]
    a9b4:	strh	w1, [x6, #18]
    a9b8:	str	w2, [x19, #148]
    a9bc:	strb	wzr, [x6, #16]
    a9c0:	ldr	w1, [x19, #168]
    a9c4:	cmp	w1, w0
    a9c8:	b.ge	a9d0 <get_subexp_sub.isra.0+0xe0>  // b.tcont
    a9cc:	str	w0, [x19, #168]
    a9d0:	ldr	w1, [x21]
    a9d4:	add	w4, w23, w4
    a9d8:	mov	x0, x19
    a9dc:	ldp	x19, x20, [sp, #16]
    a9e0:	sub	w1, w4, w1
    a9e4:	ldp	x21, x22, [sp, #32]
    a9e8:	ldp	x23, x24, [sp, #48]
    a9ec:	ldp	x25, x26, [sp, #64]
    a9f0:	ldp	x29, x30, [sp], #80
    a9f4:	b	a828 <clean_state_log_if_needed>
    a9f8:	mov	w1, #0x1                   	// #1
    a9fc:	strb	w1, [x3, #16]
    aa00:	b	a994 <get_subexp_sub.isra.0+0xa4>
    aa04:	lsl	w1, w1, #1
    aa08:	mov	w26, #0x14                  	// #20
    aa0c:	smull	x1, w1, w26
    aa10:	bl	0 <grub_realloc>
    aa14:	cbz	x0, aa48 <get_subexp_sub.isra.0+0x158>
    aa18:	ldp	w3, w2, [x19, #148]
    aa1c:	str	x0, [x19, #160]
    aa20:	mov	w1, #0x0                   	// #0
    aa24:	smull	x2, w2, w26
    aa28:	smaddl	x0, w3, w26, x0
    aa2c:	bl	0 <grub_memset>
    aa30:	ldp	w2, w1, [x19, #148]
    aa34:	ldr	w4, [x20, #4]
    aa38:	ldr	x0, [x19, #160]
    aa3c:	lsl	w1, w1, #1
    aa40:	str	w1, [x19, #152]
    aa44:	b	a970 <get_subexp_sub.isra.0+0x80>
    aa48:	ldr	x0, [x19, #160]
    aa4c:	bl	0 <grub_free>
    aa50:	mov	w0, #0xc                   	// #12
    aa54:	ldp	x25, x26, [sp, #64]
    aa58:	b	a93c <get_subexp_sub.isra.0+0x4c>
    aa5c:	nop

000000000000aa60 <transit_state_bkref.isra.0>:
    aa60:	stp	x29, x30, [sp, #-224]!
    aa64:	mov	x29, sp
    aa68:	stp	x21, x22, [sp, #32]
    aa6c:	ldr	w22, [x0, #56]
    aa70:	ldr	w6, [x1]
    aa74:	stp	x23, x24, [sp, #48]
    aa78:	cmp	w6, #0x0
    aa7c:	stp	x27, x28, [sp, #80]
    aa80:	mov	x27, x0
    aa84:	str	x1, [sp, #184]
    aa88:	ldr	x24, [x0, #112]
    aa8c:	sbfiz	x0, x22, #3, #32
    aa90:	stp	x2, x0, [sp, #152]
    aa94:	b.le	ab2c <transit_state_bkref.isra.0+0xcc>
    aa98:	mov	x23, #0x0                   	// #0
    aa9c:	stp	x19, x20, [sp, #16]
    aaa0:	stp	x25, x26, [sp, #64]
    aaa4:	nop
    aaa8:	ldr	x0, [sp, #152]
    aaac:	ldr	x1, [x0]
    aab0:	ldr	x0, [x24]
    aab4:	ldr	w19, [x1, x23, lsl #2]
    aab8:	sbfiz	x1, x19, #4, #32
    aabc:	sxtw	x2, w19
    aac0:	add	x0, x0, x1
    aac4:	str	x1, [sp, #104]
    aac8:	str	x2, [sp, #144]
    aacc:	ldrb	w1, [x0, #8]
    aad0:	cmp	w1, #0x4
    aad4:	b.ne	ab18 <transit_state_bkref.isra.0+0xb8>  // b.any
    aad8:	ldr	w5, [x0, #8]
    aadc:	tst	w5, #0x3ff00
    aae0:	b.eq	ab50 <transit_state_bkref.isra.0+0xf0>  // b.none
    aae4:	ldr	w2, [x27, #120]
    aae8:	mov	w1, w22
    aaec:	mov	x0, x27
    aaf0:	bl	29d8 <re_string_context_at>
    aaf4:	ubfx	x1, x5, #8, #10
    aaf8:	tbz	w5, #10, ab44 <transit_state_bkref.isra.0+0xe4>
    aafc:	tbz	w0, #0, ab18 <transit_state_bkref.isra.0+0xb8>
    ab00:	tbnz	w1, #3, ab18 <transit_state_bkref.isra.0+0xb8>
    ab04:	tbz	w1, #5, ab0c <transit_state_bkref.isra.0+0xac>
    ab08:	tbz	w0, #1, ab18 <transit_state_bkref.isra.0+0xb8>
    ab0c:	tbz	w1, #7, ab50 <transit_state_bkref.isra.0+0xf0>
    ab10:	tbnz	w0, #3, ab50 <transit_state_bkref.isra.0+0xf0>
    ab14:	nop
    ab18:	add	x23, x23, #0x1
    ab1c:	cmp	w6, w23
    ab20:	b.gt	aaa8 <transit_state_bkref.isra.0+0x48>
    ab24:	ldp	x19, x20, [sp, #16]
    ab28:	ldp	x25, x26, [sp, #64]
    ab2c:	mov	w0, #0x0                   	// #0
    ab30:	ldp	x21, x22, [sp, #32]
    ab34:	ldp	x23, x24, [sp, #48]
    ab38:	ldp	x27, x28, [sp, #80]
    ab3c:	ldp	x29, x30, [sp], #224
    ab40:	ret
    ab44:	tbz	w1, #3, ab04 <transit_state_bkref.isra.0+0xa4>
    ab48:	tbz	w0, #0, ab04 <transit_state_bkref.isra.0+0xa4>
    ab4c:	b	ab18 <transit_state_bkref.isra.0+0xb8>
    ab50:	ldr	w5, [x27, #148]
    ab54:	mov	w1, #0x0                   	// #0
    ab58:	mov	w4, #0x14                  	// #20
    ab5c:	mov	w21, w5
    ab60:	mov	w3, w5
    ab64:	b	ab84 <transit_state_bkref.isra.0+0x124>
    ab68:	ldr	x2, [x27, #160]
    ab6c:	asr	w0, w0, #1
    ab70:	smaddl	x2, w0, w4, x2
    ab74:	ldr	w2, [x2, #4]
    ab78:	cmp	w22, w2
    ab7c:	b.gt	adac <transit_state_bkref.isra.0+0x34c>
    ab80:	mov	w3, w0
    ab84:	add	w0, w3, w1
    ab88:	cmp	w3, w1
    ab8c:	b.gt	ab68 <transit_state_bkref.isra.0+0x108>
    ab90:	cmp	w5, w1
    ab94:	b.le	adb4 <transit_state_bkref.isra.0+0x354>
    ab98:	ldr	x0, [x27, #160]
    ab9c:	mov	w2, #0x14                  	// #20
    aba0:	smaddl	x1, w1, w2, x0
    aba4:	ldr	w0, [x1, #4]
    aba8:	cmp	w22, w0
    abac:	b.eq	abbc <transit_state_bkref.isra.0+0x15c>  // b.none
    abb0:	b	adb4 <transit_state_bkref.isra.0+0x354>
    abb4:	ldurb	w0, [x1, #-4]
    abb8:	cbz	w0, adb4 <transit_state_bkref.isra.0+0x354>
    abbc:	ldr	w0, [x1]
    abc0:	add	x1, x1, #0x14
    abc4:	cmp	w19, w0
    abc8:	b.ne	abb4 <transit_state_bkref.isra.0+0x154>  // b.any
    abcc:	str	wzr, [sp, #204]
    abd0:	cmp	w21, w5
    abd4:	b.ge	ad00 <transit_state_bkref.isra.0+0x2a0>  // b.tcont
    abd8:	mov	w4, #0x14                  	// #20
    abdc:	ldr	x0, [sp, #144]
    abe0:	smull	x28, w21, w4
    abe4:	lsl	x0, x0, #2
    abe8:	str	x0, [sp, #120]
    abec:	nop
    abf0:	ldr	x0, [x27, #160]
    abf4:	add	x1, x0, x28
    abf8:	ldr	w0, [x0, x28]
    abfc:	cmp	w19, w0
    ac00:	b.ne	acf0 <transit_state_bkref.isra.0+0x290>  // b.any
    ac04:	ldr	w0, [x1, #4]
    ac08:	cmp	w22, w0
    ac0c:	b.ne	acf0 <transit_state_bkref.isra.0+0x290>  // b.any
    ac10:	ldp	w3, w0, [x1, #8]
    ac14:	ldr	x25, [x24, #48]
    ac18:	subs	w1, w0, w3
    ac1c:	str	w1, [sp, #96]
    ac20:	b.ne	ad64 <transit_state_bkref.isra.0+0x304>  // b.any
    ac24:	ldr	x1, [x24, #40]
    ac28:	ldr	x2, [sp, #104]
    ac2c:	add	x1, x1, x2
    ac30:	ldr	x1, [x1, #8]
    ac34:	ldrsw	x2, [x1]
    ac38:	add	x25, x25, x2, lsl #4
    ac3c:	ldr	w2, [x27, #120]
    ac40:	add	w20, w22, w0
    ac44:	sub	w20, w20, w3
    ac48:	mov	x0, x27
    ac4c:	sub	w1, w20, #0x1
    ac50:	mov	w26, #0x0                   	// #0
    ac54:	sxtw	x20, w20
    ac58:	bl	29d8 <re_string_context_at>
    ac5c:	mov	w3, w0
    ac60:	ldr	x5, [x27, #136]
    ac64:	ldr	x0, [sp, #160]
    ac68:	ldr	x1, [x5, x0]
    ac6c:	ldr	x0, [x5, x20, lsl #3]
    ac70:	cbz	x1, ac78 <transit_state_bkref.isra.0+0x218>
    ac74:	ldr	w26, [x1, #12]
    ac78:	cbz	x0, ad78 <transit_state_bkref.isra.0+0x318>
    ac7c:	ldr	x1, [x0, #56]
    ac80:	mov	x2, x25
    ac84:	add	x0, sp, #0xd0
    ac88:	str	w3, [sp, #112]
    ac8c:	bl	35a8 <re_node_set_init_union>
    ac90:	str	w0, [sp, #204]
    ac94:	ldr	w3, [sp, #112]
    ac98:	cbnz	w0, af14 <transit_state_bkref.isra.0+0x4b4>
    ac9c:	ldr	x5, [x27, #136]
    aca0:	mov	x1, x24
    aca4:	add	x2, sp, #0xd0
    aca8:	add	x0, sp, #0xcc
    acac:	str	x5, [sp, #112]
    acb0:	bl	3768 <re_acquire_state_context>
    acb4:	ldr	x5, [sp, #112]
    acb8:	str	x0, [x5, x20, lsl #3]
    acbc:	ldr	x0, [sp, #216]
    acc0:	bl	0 <grub_free>
    acc4:	ldr	x1, [x27, #136]
    acc8:	ldr	x0, [x1, x20, lsl #3]
    accc:	cbz	x0, ada0 <transit_state_bkref.isra.0+0x340>
    acd0:	ldr	w0, [sp, #96]
    acd4:	cbnz	w0, acec <transit_state_bkref.isra.0+0x28c>
    acd8:	ldr	x0, [sp, #160]
    acdc:	ldr	x0, [x1, x0]
    ace0:	ldr	w0, [x0, #12]
    ace4:	cmp	w0, w26
    ace8:	b.gt	ad0c <transit_state_bkref.isra.0+0x2ac>
    acec:	ldr	w5, [x27, #148]
    acf0:	add	w21, w21, #0x1
    acf4:	add	x28, x28, #0x14
    acf8:	cmp	w21, w5
    acfc:	b.lt	abf0 <transit_state_bkref.isra.0+0x190>  // b.tstop
    ad00:	ldr	x0, [sp, #184]
    ad04:	ldr	w6, [x0]
    ad08:	b	ab18 <transit_state_bkref.isra.0+0xb8>
    ad0c:	add	x20, x25, #0x4
    ad10:	add	x25, x25, #0x8
    ad14:	mov	x2, x25
    ad18:	mov	x1, x20
    ad1c:	mov	w3, w22
    ad20:	mov	x0, x27
    ad24:	bl	30e0 <check_subexp_matching_top.isra.0>
    ad28:	str	w0, [sp, #204]
    ad2c:	cbnz	w0, ad48 <transit_state_bkref.isra.0+0x2e8>
    ad30:	mov	x2, x25
    ad34:	mov	x1, x20
    ad38:	mov	x0, x27
    ad3c:	bl	aa60 <transit_state_bkref.isra.0>
    ad40:	str	w0, [sp, #204]
    ad44:	cbz	w0, acec <transit_state_bkref.isra.0+0x28c>
    ad48:	ldp	x19, x20, [sp, #16]
    ad4c:	ldp	x25, x26, [sp, #64]
    ad50:	ldp	x21, x22, [sp, #32]
    ad54:	ldp	x23, x24, [sp, #48]
    ad58:	ldp	x27, x28, [sp, #80]
    ad5c:	ldp	x29, x30, [sp], #224
    ad60:	ret
    ad64:	ldr	x1, [x24, #24]
    ad68:	ldr	x2, [sp, #120]
    ad6c:	ldrsw	x2, [x1, x2]
    ad70:	add	x25, x25, x2, lsl #4
    ad74:	b	ac3c <transit_state_bkref.isra.0+0x1dc>
    ad78:	mov	x1, x24
    ad7c:	mov	x2, x25
    ad80:	add	x0, sp, #0xcc
    ad84:	str	x5, [sp, #112]
    ad88:	bl	3768 <re_acquire_state_context>
    ad8c:	ldr	x5, [sp, #112]
    ad90:	ldr	x1, [x27, #136]
    ad94:	str	x0, [x5, x20, lsl #3]
    ad98:	ldr	x0, [x1, x20, lsl #3]
    ad9c:	cbnz	x0, acd0 <transit_state_bkref.isra.0+0x270>
    ada0:	ldr	w0, [sp, #204]
    ada4:	cbz	w0, acd0 <transit_state_bkref.isra.0+0x270>
    ada8:	b	ad48 <transit_state_bkref.isra.0+0x2e8>
    adac:	add	w1, w0, #0x1
    adb0:	b	ab84 <transit_state_bkref.isra.0+0x124>
    adb4:	ldr	x0, [x27, #112]
    adb8:	str	x0, [sp, #176]
    adbc:	ldr	w2, [x27, #172]
    adc0:	ldr	x1, [x0]
    adc4:	cmp	w2, #0x0
    adc8:	ldr	x0, [sp, #104]
    adcc:	ldr	w0, [x1, x0]
    add0:	str	w0, [sp, #172]
    add4:	b.le	abcc <transit_state_bkref.isra.0+0x16c>
    add8:	ldr	x7, [x27, #8]
    addc:	str	xzr, [sp, #136]
    ade0:	ldr	x3, [sp, #136]
    ade4:	ldr	x0, [x27, #184]
    ade8:	ldr	x26, [x0, x3, lsl #3]
    adec:	ldrsw	x0, [x26, #4]
    adf0:	lsl	x0, x0, #4
    adf4:	ldr	w0, [x1, x0]
    adf8:	ldr	w1, [sp, #172]
    adfc:	cmp	w1, w0
    ae00:	b.eq	ae24 <transit_state_bkref.isra.0+0x3c4>  // b.none
    ae04:	ldr	x0, [sp, #136]
    ae08:	add	x0, x0, #0x1
    ae0c:	str	x0, [sp, #136]
    ae10:	cmp	w2, w0
    ae14:	b.le	b138 <transit_state_bkref.isra.0+0x6d8>
    ae18:	ldr	x0, [sp, #176]
    ae1c:	ldr	x1, [x0]
    ae20:	b	ade0 <transit_state_bkref.isra.0+0x380>
    ae24:	ldr	w0, [x26]
    ae28:	ldr	w4, [x26, #20]
    ae2c:	str	w0, [sp, #96]
    ae30:	cmp	w4, #0x0
    ae34:	b.le	b184 <transit_state_bkref.isra.0+0x724>
    ae38:	mov	w25, w22
    ae3c:	mov	x20, #0x0                   	// #0
    ae40:	b	ae50 <transit_state_bkref.isra.0+0x3f0>
    ae44:	ldr	w4, [x26, #20]
    ae48:	cmp	w4, w20
    ae4c:	b.le	b0f8 <transit_state_bkref.isra.0+0x698>
    ae50:	ldr	x0, [x26, #24]
    ae54:	str	w20, [sp, #168]
    ae58:	ldr	w28, [sp, #96]
    ae5c:	mov	w10, w25
    ae60:	ldr	x3, [x0, x20, lsl #3]
    ae64:	add	x20, x20, #0x1
    ae68:	ldr	w0, [x3, #4]
    ae6c:	str	w0, [sp, #96]
    ae70:	sub	w2, w0, w28
    ae74:	cmp	w2, #0x0
    ae78:	add	w25, w25, w2
    ae7c:	b.le	aeb0 <transit_state_bkref.isra.0+0x450>
    ae80:	ldr	w0, [x27, #44]
    ae84:	cmp	w0, w25
    ae88:	b.lt	aed8 <transit_state_bkref.isra.0+0x478>  // b.tstop
    ae8c:	add	x0, x7, w10, sxtw
    ae90:	add	x1, x7, w28, sxtw
    ae94:	sxtw	x2, w2
    ae98:	str	w10, [sp, #112]
    ae9c:	stp	x7, x3, [sp, #120]
    aea0:	bl	0 <grub_memcmp>
    aea4:	ldr	w10, [sp, #112]
    aea8:	ldp	x7, x3, [sp, #120]
    aeac:	cbnz	w0, af3c <transit_state_bkref.isra.0+0x4dc>
    aeb0:	mov	x2, x3
    aeb4:	mov	w4, w22
    aeb8:	mov	w3, w19
    aebc:	mov	x1, x26
    aec0:	mov	x0, x27
    aec4:	bl	a8f0 <get_subexp_sub.isra.0>
    aec8:	cmp	w0, #0x1
    aecc:	ldr	x7, [x27, #8]
    aed0:	b.ls	ae44 <transit_state_bkref.isra.0+0x3e4>  // b.plast
    aed4:	b	ad48 <transit_state_bkref.isra.0+0x2e8>
    aed8:	ldr	w12, [x27, #64]
    aedc:	mov	w1, w25
    aee0:	str	x3, [sp, #112]
    aee4:	mov	x0, x27
    aee8:	str	w2, [sp, #120]
    aeec:	cmp	w12, w25
    aef0:	b.lt	af40 <transit_state_bkref.isra.0+0x4e0>  // b.tstop
    aef4:	str	w10, [sp, #128]
    aef8:	bl	a828 <clean_state_log_if_needed>
    aefc:	cbnz	w0, ad48 <transit_state_bkref.isra.0+0x2e8>
    af00:	ldr	w2, [sp, #120]
    af04:	ldr	w10, [sp, #128]
    af08:	ldr	x7, [x27, #8]
    af0c:	ldr	x3, [sp, #112]
    af10:	b	ae8c <transit_state_bkref.isra.0+0x42c>
    af14:	ldr	x0, [sp, #216]
    af18:	bl	0 <grub_free>
    af1c:	ldr	w0, [sp, #204]
    af20:	ldp	x19, x20, [sp, #16]
    af24:	ldp	x21, x22, [sp, #32]
    af28:	ldp	x23, x24, [sp, #48]
    af2c:	ldp	x25, x26, [sp, #64]
    af30:	ldp	x27, x28, [sp, #80]
    af34:	ldp	x29, x30, [sp], #224
    af38:	ret
    af3c:	ldr	w4, [x26, #20]
    af40:	ldr	w0, [sp, #168]
    af44:	cmp	w0, w4
    af48:	b.ge	af54 <transit_state_bkref.isra.0+0x4f4>  // b.tcont
    af4c:	ldr	w2, [x27, #172]
    af50:	b	ae04 <transit_state_bkref.isra.0+0x3a4>
    af54:	ldr	w0, [sp, #168]
    af58:	cbnz	w0, b0f0 <transit_state_bkref.isra.0+0x690>
    af5c:	sxtw	x20, w28
    af60:	cmp	w22, w28
    af64:	b.lt	af4c <transit_state_bkref.isra.0+0x4ec>  // b.tstop
    af68:	ldr	w0, [x26]
    af6c:	sub	w0, w28, w0
    af70:	cmp	w0, #0x0
    af74:	b.le	afa0 <transit_state_bkref.isra.0+0x540>
    af78:	ldr	w0, [x27, #44]
    af7c:	cmp	w0, w10
    af80:	b.le	b108 <transit_state_bkref.isra.0+0x6a8>
    af84:	add	w25, w10, #0x1
    af88:	add	x0, x7, x20
    af8c:	ldrb	w2, [x7, w10, sxtw]
    af90:	ldurb	w0, [x0, #-1]
    af94:	cmp	w2, w0
    af98:	b.ne	af4c <transit_state_bkref.isra.0+0x4ec>  // b.any
    af9c:	mov	w10, w25
    afa0:	ldr	x0, [x27, #136]
    afa4:	ldr	x1, [x0, x20, lsl #3]
    afa8:	cbz	x1, b0a4 <transit_state_bkref.isra.0+0x644>
    afac:	ldr	w4, [x1, #12]
    afb0:	cmp	w4, #0x0
    afb4:	b.le	b0a4 <transit_state_bkref.isra.0+0x644>
    afb8:	ldr	x0, [sp, #176]
    afbc:	ldr	x6, [x1, #16]
    afc0:	ldr	x3, [x0]
    afc4:	mov	x0, #0x0                   	// #0
    afc8:	b	afd4 <transit_state_bkref.isra.0+0x574>
    afcc:	cmp	w4, w0
    afd0:	b.le	b0a4 <transit_state_bkref.isra.0+0x644>
    afd4:	ldr	w25, [x6, x0, lsl #2]
    afd8:	add	x0, x0, #0x1
    afdc:	sbfiz	x1, x25, #4, #32
    afe0:	add	x2, x3, x1
    afe4:	ldrb	w2, [x2, #8]
    afe8:	cmp	w2, #0x9
    afec:	b.ne	afcc <transit_state_bkref.isra.0+0x56c>  // b.any
    aff0:	ldr	w1, [x3, x1]
    aff4:	ldr	w2, [sp, #172]
    aff8:	cmp	w2, w1
    affc:	b.ne	afcc <transit_state_bkref.isra.0+0x56c>  // b.any
    b000:	cmn	w25, #0x1
    b004:	b.eq	b0a4 <transit_state_bkref.isra.0+0x644>  // b.none
    b008:	ldr	x1, [x26, #8]
    b00c:	ldr	w3, [x26]
    b010:	cbz	x1, b0bc <transit_state_bkref.isra.0+0x65c>
    b014:	ldr	w2, [x26, #4]
    b018:	mov	w5, w28
    b01c:	mov	w4, w25
    b020:	mov	x0, x27
    b024:	mov	w6, #0x9                   	// #9
    b028:	str	x7, [sp, #96]
    b02c:	str	w10, [sp, #112]
    b030:	bl	4bb8 <check_arrival>
    b034:	cmp	w0, #0x1
    b038:	ldr	w10, [sp, #112]
    b03c:	ldr	x7, [sp, #96]
    b040:	b.eq	b0a4 <transit_state_bkref.isra.0+0x644>  // b.none
    b044:	cbnz	w0, ad48 <transit_state_bkref.isra.0+0x2e8>
    b048:	ldp	w0, w1, [x26, #16]
    b04c:	cmp	w1, w0
    b050:	b.eq	b150 <transit_state_bkref.isra.0+0x6f0>  // b.none
    b054:	mov	x0, #0x18                  	// #24
    b058:	str	w10, [sp, #96]
    b05c:	bl	0 <grub_zalloc>
    b060:	mov	x2, x0
    b064:	cbz	x0, b140 <transit_state_bkref.isra.0+0x6e0>
    b068:	ldr	w0, [x26, #20]
    b06c:	mov	w4, w22
    b070:	ldr	x1, [x26, #24]
    b074:	add	w6, w0, #0x1
    b078:	mov	w3, w19
    b07c:	str	x2, [x1, w0, sxtw #3]
    b080:	mov	x1, x26
    b084:	stp	w25, w28, [x2]
    b088:	mov	x0, x27
    b08c:	str	w6, [x26, #20]
    b090:	bl	a8f0 <get_subexp_sub.isra.0>
    b094:	cmp	w0, #0x1
    b098:	ldr	w10, [sp, #96]
    b09c:	ldr	x7, [x27, #8]
    b0a0:	b.hi	ad48 <transit_state_bkref.isra.0+0x2e8>  // b.pmore
    b0a4:	add	w28, w28, #0x1
    b0a8:	add	x20, x20, #0x1
    b0ac:	cmp	w22, w28
    b0b0:	b.ge	af68 <transit_state_bkref.isra.0+0x508>  // b.tcont
    b0b4:	ldr	w2, [x27, #172]
    b0b8:	b	ae04 <transit_state_bkref.isra.0+0x3a4>
    b0bc:	sub	w0, w28, w3
    b0c0:	str	x7, [sp, #96]
    b0c4:	add	w0, w0, #0x1
    b0c8:	str	w10, [sp, #112]
    b0cc:	sbfiz	x0, x0, #4, #32
    b0d0:	bl	0 <grub_zalloc>
    b0d4:	str	x0, [x26, #8]
    b0d8:	mov	x1, x0
    b0dc:	ldr	w10, [sp, #112]
    b0e0:	ldr	x7, [sp, #96]
    b0e4:	cbz	x0, b140 <transit_state_bkref.isra.0+0x6e0>
    b0e8:	ldr	w3, [x26]
    b0ec:	b	b014 <transit_state_bkref.isra.0+0x5b4>
    b0f0:	mov	w25, w10
    b0f4:	str	w28, [sp, #96]
    b0f8:	ldr	w0, [sp, #96]
    b0fc:	mov	w10, w25
    b100:	add	w28, w0, #0x1
    b104:	b	af5c <transit_state_bkref.isra.0+0x4fc>
    b108:	ldr	w0, [x27, #64]
    b10c:	cmp	w0, w10
    b110:	b.le	af4c <transit_state_bkref.isra.0+0x4ec>
    b114:	add	w25, w10, #0x1
    b118:	mov	x0, x27
    b11c:	mov	w1, w25
    b120:	str	w10, [sp, #96]
    b124:	bl	a6e0 <extend_buffers>
    b128:	cbnz	w0, ad48 <transit_state_bkref.isra.0+0x2e8>
    b12c:	ldr	w10, [sp, #96]
    b130:	ldr	x7, [x27, #8]
    b134:	b	af88 <transit_state_bkref.isra.0+0x528>
    b138:	ldr	w5, [x27, #148]
    b13c:	b	abcc <transit_state_bkref.isra.0+0x16c>
    b140:	mov	w0, #0xc                   	// #12
    b144:	ldp	x19, x20, [sp, #16]
    b148:	ldp	x25, x26, [sp, #64]
    b14c:	b	ad50 <transit_state_bkref.isra.0+0x2f0>
    b150:	lsl	w1, w1, #1
    b154:	str	w10, [sp, #112]
    b158:	ldr	x0, [x26, #24]
    b15c:	add	w2, w1, #0x1
    b160:	str	w2, [sp, #96]
    b164:	sbfiz	x1, x2, #3, #32
    b168:	bl	0 <grub_realloc>
    b16c:	cbz	x0, b140 <transit_state_bkref.isra.0+0x6e0>
    b170:	ldr	w2, [sp, #96]
    b174:	ldr	w10, [sp, #112]
    b178:	str	w2, [x26, #16]
    b17c:	str	x0, [x26, #24]
    b180:	b	b054 <transit_state_bkref.isra.0+0x5f4>
    b184:	ldr	w28, [sp, #96]
    b188:	mov	w10, w22
    b18c:	b	af5c <transit_state_bkref.isra.0+0x4fc>

000000000000b190 <merge_state_with_log>:
    b190:	stp	x29, x30, [sp, #-96]!
    b194:	mov	x29, sp
    b198:	stp	x19, x20, [sp, #16]
    b19c:	mov	x19, x1
    b1a0:	ldr	w20, [x1, #56]
    b1a4:	stp	x21, x22, [sp, #32]
    b1a8:	mov	x21, x0
    b1ac:	ldr	w0, [x1, #144]
    b1b0:	stp	x23, x24, [sp, #48]
    b1b4:	sxtw	x23, w20
    b1b8:	cmp	w0, w20
    b1bc:	stp	x25, x26, [sp, #64]
    b1c0:	ldr	x24, [x1, #112]
    b1c4:	ldr	x25, [x1, #136]
    b1c8:	b.ge	b1fc <merge_state_with_log+0x6c>  // b.tcont
    b1cc:	mov	x22, x2
    b1d0:	str	x2, [x25, x23, lsl #3]
    b1d4:	str	w20, [x1, #144]
    b1d8:	ldr	w0, [x24, #140]
    b1dc:	cbnz	w0, b2b0 <merge_state_with_log+0x120>
    b1e0:	mov	x0, x22
    b1e4:	ldp	x19, x20, [sp, #16]
    b1e8:	ldp	x21, x22, [sp, #32]
    b1ec:	ldp	x23, x24, [sp, #48]
    b1f0:	ldp	x25, x26, [sp, #64]
    b1f4:	ldp	x29, x30, [sp], #96
    b1f8:	ret
    b1fc:	ldr	x0, [x25, x23, lsl #3]
    b200:	cbz	x0, b2a4 <merge_state_with_log+0x114>
    b204:	ldr	x0, [x0, #56]
    b208:	cbz	x2, b26c <merge_state_with_log+0xdc>
    b20c:	ldr	x25, [x2, #56]
    b210:	mov	x2, x0
    b214:	add	x0, sp, #0x50
    b218:	mov	x1, x25
    b21c:	bl	35a8 <re_node_set_init_union>
    b220:	str	w0, [x21]
    b224:	cbnz	w0, b304 <merge_state_with_log+0x174>
    b228:	ldr	w2, [x19, #120]
    b22c:	mov	x0, x19
    b230:	ldr	w1, [x19, #56]
    b234:	sub	w1, w1, #0x1
    b238:	bl	29d8 <re_string_context_at>
    b23c:	mov	w3, w0
    b240:	ldr	x26, [x19, #136]
    b244:	add	x2, sp, #0x50
    b248:	mov	x1, x24
    b24c:	mov	x0, x21
    b250:	bl	3768 <re_acquire_state_context>
    b254:	mov	x22, x0
    b258:	str	x0, [x26, x23, lsl #3]
    b25c:	cbz	x25, b1d8 <merge_state_with_log+0x48>
    b260:	ldr	x0, [sp, #88]
    b264:	bl	0 <grub_free>
    b268:	b	b1d8 <merge_state_with_log+0x48>
    b26c:	ldp	x4, x5, [x0]
    b270:	sub	w1, w20, #0x1
    b274:	ldr	w2, [x19, #120]
    b278:	mov	x0, x19
    b27c:	stp	x4, x5, [sp, #80]
    b280:	bl	29d8 <re_string_context_at>
    b284:	mov	w3, w0
    b288:	add	x2, sp, #0x50
    b28c:	mov	x1, x24
    b290:	mov	x0, x21
    b294:	bl	3768 <re_acquire_state_context>
    b298:	mov	x22, x0
    b29c:	str	x0, [x25, x23, lsl #3]
    b2a0:	b	b1d8 <merge_state_with_log+0x48>
    b2a4:	mov	x22, x2
    b2a8:	str	x2, [x25, x23, lsl #3]
    b2ac:	b	b1d8 <merge_state_with_log+0x48>
    b2b0:	cbz	x22, b304 <merge_state_with_log+0x174>
    b2b4:	add	x24, x22, #0xc
    b2b8:	add	x25, x22, #0x10
    b2bc:	mov	w3, w20
    b2c0:	mov	x1, x24
    b2c4:	mov	x2, x25
    b2c8:	mov	x0, x19
    b2cc:	bl	30e0 <check_subexp_matching_top.isra.0>
    b2d0:	str	w0, [x21]
    b2d4:	cbnz	w0, b304 <merge_state_with_log+0x174>
    b2d8:	ldrb	w0, [x22, #80]
    b2dc:	tbz	w0, #6, b1e0 <merge_state_with_log+0x50>
    b2e0:	mov	x2, x25
    b2e4:	mov	x1, x24
    b2e8:	mov	x0, x19
    b2ec:	bl	aa60 <transit_state_bkref.isra.0>
    b2f0:	str	w0, [x21]
    b2f4:	cbnz	w0, b304 <merge_state_with_log+0x174>
    b2f8:	ldr	x0, [x19, #136]
    b2fc:	ldr	x22, [x0, x23, lsl #3]
    b300:	b	b1e0 <merge_state_with_log+0x50>
    b304:	mov	x22, #0x0                   	// #0
    b308:	b	b1e0 <merge_state_with_log+0x50>
    b30c:	nop

000000000000b310 <re_string_reconstruct>:
    b310:	stp	x29, x30, [sp, #-128]!
    b314:	mov	x29, sp
    b318:	stp	x19, x20, [sp, #16]
    b31c:	mov	x19, x0
    b320:	ldr	w20, [x0, #40]
    b324:	stp	x21, x22, [sp, #32]
    b328:	mov	w21, w1
    b32c:	cmp	w20, w1
    b330:	stp	x23, x24, [sp, #48]
    b334:	mov	w23, w2
    b338:	b.le	b4ac <re_string_reconstruct+0x19c>
    b33c:	ldr	w0, [x0, #104]
    b340:	cmp	w0, #0x1
    b344:	b.le	b358 <re_string_reconstruct+0x48>
    b348:	add	x0, x19, #0x20
    b34c:	mov	x2, #0x8                   	// #8
    b350:	mov	w1, #0x0                   	// #0
    b354:	bl	0 <grub_memset>
    b358:	ldrb	w0, [x19, #99]
    b35c:	tst	x23, #0x1
    b360:	ldr	w4, [x19, #60]
    b364:	mov	w1, #0x4                   	// #4
    b368:	ldr	w2, [x19, #68]
    b36c:	mov	w3, #0x6                   	// #6
    b370:	csel	w1, w1, w3, ne  // ne = any
    b374:	str	xzr, [x19, #40]
    b378:	str	wzr, [x19, #48]
    b37c:	mov	w20, w21
    b380:	str	w4, [x19, #64]
    b384:	stp	w2, w1, [x19, #72]
    b388:	strb	wzr, [x19, #100]
    b38c:	cbz	w0, b444 <re_string_reconstruct+0x134>
    b390:	cbz	w20, b450 <re_string_reconstruct+0x140>
    b394:	ldp	w22, w0, [x19, #44]
    b398:	ldrb	w1, [x19, #100]
    b39c:	cmp	w0, w20
    b3a0:	b.le	b4b4 <re_string_reconstruct+0x1a4>
    b3a4:	cbnz	w1, b5cc <re_string_reconstruct+0x2bc>
    b3a8:	mov	w2, w23
    b3ac:	sub	w1, w20, #0x1
    b3b0:	mov	x0, x19
    b3b4:	bl	29d8 <re_string_context_at>
    b3b8:	str	w0, [x19, #76]
    b3bc:	sub	w22, w22, w20
    b3c0:	ldr	w0, [x19, #104]
    b3c4:	cmp	w0, #0x1
    b3c8:	b.gt	b480 <re_string_reconstruct+0x170>
    b3cc:	ldrb	w0, [x19, #99]
    b3d0:	cbnz	w0, b60c <re_string_reconstruct+0x2fc>
    b3d4:	ldr	w2, [x19, #48]
    b3d8:	ldr	w1, [x19, #64]
    b3dc:	sub	w2, w2, w20
    b3e0:	ldr	w3, [x19, #72]
    b3e4:	stp	w22, w2, [x19, #44]
    b3e8:	sub	w1, w1, w20
    b3ec:	ldr	w2, [x19, #104]
    b3f0:	sub	w3, w3, w20
    b3f4:	cbnz	w0, b404 <re_string_reconstruct+0xf4>
    b3f8:	ldr	x0, [x19, #8]
    b3fc:	add	x20, x0, w20, sxtw
    b400:	str	x20, [x19, #8]
    b404:	str	w21, [x19, #40]
    b408:	cmp	w2, #0x1
    b40c:	str	w1, [x19, #64]
    b410:	str	w3, [x19, #72]
    b414:	b.le	b470 <re_string_reconstruct+0x160>
    b418:	ldrb	w0, [x19, #96]
    b41c:	cbnz	w0, b49c <re_string_reconstruct+0x18c>
    b420:	mov	x0, x19
    b424:	bl	87a8 <build_wcs_buffer>
    b428:	mov	w0, #0x0                   	// #0
    b42c:	str	wzr, [x19, #56]
    b430:	ldp	x19, x20, [sp, #16]
    b434:	ldp	x21, x22, [sp, #32]
    b438:	ldp	x23, x24, [sp, #48]
    b43c:	ldp	x29, x30, [sp], #128
    b440:	ret
    b444:	ldr	x5, [x19]
    b448:	str	x5, [x19, #8]
    b44c:	cbnz	w20, b394 <re_string_reconstruct+0x84>
    b450:	ldr	w1, [x19, #64]
    b454:	ldr	w3, [x19, #72]
    b458:	ldr	w2, [x19, #104]
    b45c:	str	w21, [x19, #40]
    b460:	str	w1, [x19, #64]
    b464:	cmp	w2, #0x1
    b468:	str	w3, [x19, #72]
    b46c:	b.gt	b418 <re_string_reconstruct+0x108>
    b470:	ldrb	w0, [x19, #99]
    b474:	cbnz	w0, b8d4 <re_string_reconstruct+0x5c4>
    b478:	str	w1, [x19, #44]
    b47c:	b	b428 <re_string_reconstruct+0x118>
    b480:	ldr	x0, [x19, #16]
    b484:	sbfiz	x2, x22, #2, #32
    b488:	add	x1, x0, w20, sxtw #2
    b48c:	bl	0 <grub_memmove>
    b490:	ldr	w22, [x19, #44]
    b494:	sub	w22, w22, w20
    b498:	b	b3cc <re_string_reconstruct+0xbc>
    b49c:	mov	x0, x19
    b4a0:	bl	9058 <build_wcs_upper_buffer>
    b4a4:	cbz	w0, b428 <re_string_reconstruct+0x118>
    b4a8:	b	b430 <re_string_reconstruct+0x120>
    b4ac:	sub	w20, w1, w20
    b4b0:	b	b390 <re_string_reconstruct+0x80>
    b4b4:	cbnz	w1, bb88 <re_string_reconstruct+0x878>
    b4b8:	ldr	w2, [x19, #104]
    b4bc:	str	wzr, [x19, #44]
    b4c0:	ldr	w3, [x19, #40]
    b4c4:	cmp	w2, #0x1
    b4c8:	b.le	b938 <re_string_reconstruct+0x628>
    b4cc:	stp	x25, x26, [sp, #64]
    b4d0:	ldrb	w1, [x19, #97]
    b4d4:	cbnz	w1, b750 <re_string_reconstruct+0x440>
    b4d8:	add	w0, w0, w3
    b4dc:	cmp	w21, w0
    b4e0:	b.le	ba40 <re_string_reconstruct+0x730>
    b4e4:	ldr	w4, [x19, #60]
    b4e8:	mov	w14, #0x1                   	// #1
    b4ec:	ldr	x5, [x19]
    b4f0:	mov	w16, #0x3                   	// #3
    b4f4:	mov	w15, #0x2                   	// #2
    b4f8:	adrp	x13, 0 <grub_cmd_regexp>
    b4fc:	nop
    b500:	ldr	w3, [x19, #36]
    b504:	sub	w10, w4, w0
    b508:	adds	x6, x5, w0, sxtw
    b50c:	ldr	x12, [x19, #32]
    b510:	b.eq	ba20 <re_string_reconstruct+0x710>  // b.none
    b514:	str	wzr, [sp, #120]
    b518:	add	x9, x6, w10, sxtw
    b51c:	cmp	x9, x6
    b520:	b.ls	b8a8 <re_string_reconstruct+0x598>  // b.plast
    b524:	mov	x7, x6
    b528:	ldrb	w2, [x6]
    b52c:	add	x8, sp, #0x78
    b530:	mov	x1, x7
    b534:	cbz	w3, b880 <re_string_reconstruct+0x570>
    b538:	and	w11, w2, #0xc0
    b53c:	cmp	w11, #0x80
    b540:	b.eq	b9bc <re_string_reconstruct+0x6ac>  // b.none
    b544:	mov	w1, #0x0                   	// #0
    b548:	str	wzr, [x19, #36]
    b54c:	cmp	w10, #0x0
    b550:	ccmp	w1, #0x0, #0x0, ne  // ne = any
    b554:	b.ne	ba18 <re_string_reconstruct+0x708>  // b.any
    b558:	ldrb	w25, [x6]
    b55c:	nop
    b560:	mov	w1, #0x1                   	// #1
    b564:	str	x12, [x19, #32]
    b568:	add	w0, w0, w1
    b56c:	cmp	w21, w0
    b570:	b.gt	b500 <re_string_reconstruct+0x1f0>
    b574:	sub	w24, w0, w21
    b578:	str	w24, [x19, #44]
    b57c:	cmn	w25, #0x1
    b580:	b.eq	ba48 <re_string_reconstruct+0x738>  // b.none
    b584:	ldrb	w0, [x19, #102]
    b588:	cbnz	w0, bc4c <re_string_reconstruct+0x93c>
    b58c:	cmp	w25, #0xa
    b590:	mov	w0, #0x0                   	// #0
    b594:	b.eq	b86c <re_string_reconstruct+0x55c>  // b.none
    b598:	str	w0, [x19, #76]
    b59c:	cmp	w24, #0x0
    b5a0:	cbnz	w24, bbb0 <re_string_reconstruct+0x8a0>
    b5a4:	ldrb	w0, [x19, #99]
    b5a8:	mov	w2, #0x0                   	// #0
    b5ac:	ldr	w1, [x19, #64]
    b5b0:	ldr	w3, [x19, #72]
    b5b4:	sub	w1, w1, w20
    b5b8:	sub	w3, w3, w20
    b5bc:	ldp	x25, x26, [sp, #64]
    b5c0:	str	w2, [x19, #48]
    b5c4:	ldr	w2, [x19, #104]
    b5c8:	b	b3f4 <re_string_reconstruct+0xe4>
    b5cc:	mov	w1, w22
    b5d0:	mov	w2, #0x0                   	// #0
    b5d4:	ldr	x6, [x19, #24]
    b5d8:	b	b5ec <re_string_reconstruct+0x2dc>
    b5dc:	b.ge	b860 <re_string_reconstruct+0x550>  // b.tcont
    b5e0:	add	w2, w0, #0x1
    b5e4:	cmp	w2, w1
    b5e8:	b.ge	b62c <re_string_reconstruct+0x31c>  // b.tcont
    b5ec:	add	w0, w2, w1
    b5f0:	add	w0, w0, w0, lsr #31
    b5f4:	asr	w0, w0, #1
    b5f8:	ldr	w3, [x6, w0, sxtw #2]
    b5fc:	cmp	w3, w20
    b600:	b.le	b5dc <re_string_reconstruct+0x2cc>
    b604:	mov	w1, w0
    b608:	b	b5e4 <re_string_reconstruct+0x2d4>
    b60c:	ldr	x0, [x19, #8]
    b610:	sxtw	x2, w22
    b614:	add	x1, x0, w20, sxtw
    b618:	bl	0 <grub_memmove>
    b61c:	ldr	w22, [x19, #44]
    b620:	ldrb	w0, [x19, #99]
    b624:	sub	w22, w22, w20
    b628:	b	b3d4 <re_string_reconstruct+0xc4>
    b62c:	cmp	w3, w20
    b630:	add	w5, w0, #0x1
    b634:	b.ge	b860 <re_string_reconstruct+0x550>  // b.tcont
    b638:	mov	w1, w0
    b63c:	mov	w2, w23
    b640:	mov	x0, x19
    b644:	bl	29d8 <re_string_context_at>
    b648:	str	w0, [x19, #76]
    b64c:	cmp	w20, w5
    b650:	ccmp	w20, w22, #0x0, eq  // eq = none
    b654:	b.lt	ba74 <re_string_reconstruct+0x764>  // b.tstop
    b658:	ldr	w1, [x19, #60]
    b65c:	cmp	w5, #0x0
    b660:	ldr	w3, [x19, #68]
    b664:	sxtw	x0, w5
    b668:	sub	w1, w1, w21
    b66c:	strb	wzr, [x19, #100]
    b670:	sub	w3, w3, w21
    b674:	add	w4, w1, w20
    b678:	add	w2, w3, w20
    b67c:	str	w4, [x19, #64]
    b680:	str	w2, [x19, #72]
    b684:	sub	x4, x6, #0x4
    b688:	b.gt	b6a0 <re_string_reconstruct+0x390>
    b68c:	b	b6b0 <re_string_reconstruct+0x3a0>
    b690:	sub	w5, w0, #0x1
    b694:	sub	x0, x0, #0x1
    b698:	cmp	w0, #0x0
    b69c:	b.le	b6b0 <re_string_reconstruct+0x3a0>
    b6a0:	ldr	w2, [x4, x0, lsl #2]
    b6a4:	mov	w5, w0
    b6a8:	cmp	w2, w20
    b6ac:	b.eq	b690 <re_string_reconstruct+0x380>  // b.none
    b6b0:	cmp	w5, w22
    b6b4:	b.ge	bb10 <re_string_reconstruct+0x800>  // b.tcont
    b6b8:	sbfiz	x0, x5, #2, #32
    b6bc:	ldr	x4, [x19, #16]
    b6c0:	b	b6d0 <re_string_reconstruct+0x3c0>
    b6c4:	add	x0, x0, #0x4
    b6c8:	cmp	w5, w22
    b6cc:	b.eq	ba0c <re_string_reconstruct+0x6fc>  // b.none
    b6d0:	ldr	w2, [x4, x0]
    b6d4:	add	w5, w5, #0x1
    b6d8:	cmn	w2, #0x1
    b6dc:	b.eq	b6c4 <re_string_reconstruct+0x3b4>  // b.none
    b6e0:	ldr	w2, [x6, x0]
    b6e4:	sub	w2, w2, w20
    b6e8:	str	w2, [x19, #44]
    b6ec:	cmp	w2, #0x0
    b6f0:	cbz	w2, b740 <re_string_reconstruct+0x430>
    b6f4:	b.le	b71c <re_string_reconstruct+0x40c>
    b6f8:	ldr	x3, [x19, #16]
    b6fc:	mov	x0, #0x0                   	// #0
    b700:	mov	w1, #0xffffffff            	// #-1
    b704:	nop
    b708:	str	w1, [x3, x0, lsl #2]
    b70c:	add	x0, x0, #0x1
    b710:	ldr	w2, [x19, #44]
    b714:	cmp	w2, w0
    b718:	b.gt	b708 <re_string_reconstruct+0x3f8>
    b71c:	ldr	x0, [x19, #8]
    b720:	sxtw	x2, w2
    b724:	mov	w1, #0xff                  	// #255
    b728:	bl	0 <grub_memset>
    b72c:	ldr	w1, [x19, #64]
    b730:	ldr	w3, [x19, #72]
    b734:	ldr	w2, [x19, #44]
    b738:	sub	w1, w1, w20
    b73c:	sub	w3, w3, w20
    b740:	ldrb	w0, [x19, #99]
    b744:	str	w2, [x19, #48]
    b748:	ldr	w2, [x19, #104]
    b74c:	b	b3f4 <re_string_reconstruct+0xe4>
    b750:	ldr	x5, [x19]
    b754:	sub	w2, w20, w2
    b758:	stp	x27, x28, [sp, #80]
    b75c:	sxtw	x26, w20
    b760:	sub	x24, x26, #0x1
    b764:	add	x27, x5, w3, sxtw
    b768:	add	x2, x27, w2, sxtw
    b76c:	add	x24, x27, x24
    b770:	cmp	x5, x2
    b774:	csel	x2, x5, x2, cs  // cs = hs, nlast
    b778:	cmp	x2, x24
    b77c:	b.ls	b790 <re_string_reconstruct+0x480>  // b.plast
    b780:	b	bb1c <re_string_reconstruct+0x80c>
    b784:	sub	x24, x24, #0x1
    b788:	cmp	x2, x24
    b78c:	b.hi	bb1c <re_string_reconstruct+0x80c>  // b.pmore
    b790:	ldrb	w1, [x24]
    b794:	and	w1, w1, #0xc0
    b798:	cmp	w1, #0x80
    b79c:	b.eq	b784 <re_string_reconstruct+0x474>  // b.none
    b7a0:	ldr	x2, [x19, #80]
    b7a4:	mov	x4, x24
    b7a8:	ldrsw	x1, [x19, #64]
    b7ac:	add	x1, x27, x1
    b7b0:	sub	x25, x1, x24
    b7b4:	cbnz	x2, bcc0 <re_string_reconstruct+0x9b0>
    b7b8:	mov	w1, #0x0                   	// #0
    b7bc:	add	x0, sp, #0x78
    b7c0:	mov	x2, #0x8                   	// #8
    b7c4:	str	x4, [sp, #104]
    b7c8:	bl	0 <grub_memset>
    b7cc:	ldr	x4, [sp, #104]
    b7d0:	mov	w8, #0x3                   	// #3
    b7d4:	mov	w7, #0x2                   	// #2
    b7d8:	mov	w6, #0x1                   	// #1
    b7dc:	mov	x0, x4
    b7e0:	add	x1, x4, w25, sxtw
    b7e4:	cmp	x1, x4
    b7e8:	b.ls	b850 <re_string_reconstruct+0x540>  // b.plast
    b7ec:	ldr	w2, [sp, #124]
    b7f0:	ldrb	w3, [x0]
    b7f4:	cbz	w2, bb48 <re_string_reconstruct+0x838>
    b7f8:	and	w5, w3, #0xc0
    b7fc:	cmp	w5, #0x80
    b800:	b.ne	b850 <re_string_reconstruct+0x540>  // b.any
    b804:	ldr	w5, [sp, #120]
    b808:	sub	w2, w2, #0x1
    b80c:	cmp	w2, #0x1
    b810:	bfi	w3, w5, #6, #26
    b814:	stp	w3, w2, [sp, #120]
    b818:	mov	w28, w3
    b81c:	b.eq	bcb4 <re_string_reconstruct+0x9a4>  // b.none
    b820:	cmp	w2, #0x2
    b824:	ccmp	w3, #0xf, #0x2, eq  // eq = none
    b828:	b.ls	b850 <re_string_reconstruct+0x540>  // b.plast
    b82c:	cbnz	w2, bb78 <re_string_reconstruct+0x868>
    b830:	add	x26, x27, x26
    b834:	mov	w25, w28
    b838:	cbz	w28, bc10 <re_string_reconstruct+0x900>
    b83c:	sub	x0, x0, x4
    b840:	sub	x24, x26, x24
    b844:	add	x0, x0, #0x1
    b848:	cmp	x0, x24
    b84c:	b.cs	bd3c <re_string_reconstruct+0xa2c>  // b.hs, b.nlast
    b850:	ldr	w3, [x19, #40]
    b854:	ldr	w0, [x19, #48]
    b858:	ldp	x27, x28, [sp, #80]
    b85c:	b	b4d8 <re_string_reconstruct+0x1c8>
    b860:	mov	w5, w0
    b864:	sub	w0, w0, #0x1
    b868:	b	b638 <re_string_reconstruct+0x328>
    b86c:	ldrb	w0, [x19, #101]
    b870:	cmp	w0, #0x0
    b874:	cset	w0, ne  // ne = any
    b878:	lsl	w0, w0, #1
    b87c:	b	b598 <re_string_reconstruct+0x288>
    b880:	tbz	w2, #7, ba38 <re_string_reconstruct+0x728>
    b884:	and	w3, w2, #0xe0
    b888:	cmp	w3, #0xc0
    b88c:	b.eq	bb30 <re_string_reconstruct+0x820>  // b.none
    b890:	and	w3, w2, #0xf0
    b894:	cmp	w3, #0xe0
    b898:	b.eq	bc00 <re_string_reconstruct+0x8f0>  // b.none
    b89c:	and	w3, w2, #0xf8
    b8a0:	cmp	w3, #0xf0
    b8a4:	b.eq	b8b0 <re_string_reconstruct+0x5a0>  // b.none
    b8a8:	mov	w1, #0x0                   	// #0
    b8ac:	b	b54c <re_string_reconstruct+0x23c>
    b8b0:	and	w2, w2, #0x7
    b8b4:	mov	w3, #0x3                   	// #3
    b8b8:	stp	w2, w16, [x19, #32]
    b8bc:	nop
    b8c0:	add	x1, x1, #0x1
    b8c4:	cmp	x9, x1
    b8c8:	b.ls	b8a8 <re_string_reconstruct+0x598>  // b.plast
    b8cc:	ldrb	w2, [x1]
    b8d0:	b	b534 <re_string_reconstruct+0x224>
    b8d4:	ldrb	w0, [x19, #96]
    b8d8:	cbnz	w0, bb24 <re_string_reconstruct+0x814>
    b8dc:	ldr	x3, [x19, #80]
    b8e0:	cbz	x3, b428 <re_string_reconstruct+0x118>
    b8e4:	ldr	w6, [x19, #52]
    b8e8:	ldr	w0, [x19, #44]
    b8ec:	cmp	w6, w1
    b8f0:	csel	w6, w6, w1, le
    b8f4:	cmp	w6, w0
    b8f8:	b.le	bc70 <re_string_reconstruct+0x960>
    b8fc:	sxtw	x2, w0
    b900:	b	b90c <re_string_reconstruct+0x5fc>
    b904:	ldr	w21, [x19, #40]
    b908:	ldr	x3, [x19, #80]
    b90c:	add	w21, w0, w21
    b910:	ldp	x5, x4, [x19]
    b914:	add	w0, w0, #0x1
    b918:	cmp	w6, w0
    b91c:	ldrb	w1, [x5, w21, sxtw]
    b920:	ldrb	w1, [x3, x1]
    b924:	strb	w1, [x4, x2]
    b928:	add	x2, x2, #0x1
    b92c:	b.ne	b904 <re_string_reconstruct+0x5f4>  // b.any
    b930:	stp	w6, w6, [x19, #44]
    b934:	b	b428 <re_string_reconstruct+0x118>
    b938:	ldr	x4, [x19]
    b93c:	add	w0, w20, w3
    b940:	ldr	x1, [x19, #80]
    b944:	add	x0, x4, w0, sxtw
    b948:	ldurb	w0, [x0, #-1]
    b94c:	str	wzr, [x19, #48]
    b950:	cbz	x1, b95c <re_string_reconstruct+0x64c>
    b954:	and	x0, x0, #0xff
    b958:	ldrb	w0, [x1, x0]
    b95c:	ldr	x4, [x19, #88]
    b960:	ubfx	x1, x0, #6, #2
    b964:	mov	w3, #0x1                   	// #1
    b968:	ldr	x1, [x4, x1, lsl #3]
    b96c:	lsr	x1, x1, x0
    b970:	tbnz	w1, #0, b990 <re_string_reconstruct+0x680>
    b974:	cmp	w0, #0xa
    b978:	mov	w3, #0x0                   	// #0
    b97c:	b.ne	b990 <re_string_reconstruct+0x680>  // b.any
    b980:	ldrb	w0, [x19, #101]
    b984:	cmp	w0, #0x0
    b988:	cset	w3, ne  // ne = any
    b98c:	lsl	w3, w3, #1
    b990:	ldrb	w0, [x19, #99]
    b994:	ldr	w1, [x19, #64]
    b998:	str	w3, [x19, #76]
    b99c:	ldr	w3, [x19, #72]
    b9a0:	sub	w1, w1, w20
    b9a4:	sub	w3, w3, w20
    b9a8:	cbz	w0, b3f8 <re_string_reconstruct+0xe8>
    b9ac:	str	w21, [x19, #40]
    b9b0:	str	w1, [x19, #64]
    b9b4:	str	w3, [x19, #72]
    b9b8:	b	b474 <re_string_reconstruct+0x164>
    b9bc:	ldr	w11, [x19, #32]
    b9c0:	sub	w3, w3, #0x1
    b9c4:	cmp	w3, #0x1
    b9c8:	bfi	w2, w11, #6, #26
    b9cc:	stp	w2, w3, [x19, #32]
    b9d0:	b.eq	ba60 <re_string_reconstruct+0x750>  // b.none
    b9d4:	cmp	w3, #0x2
    b9d8:	ccmp	w2, #0xf, #0x2, eq  // eq = none
    b9dc:	b.ls	ba68 <re_string_reconstruct+0x758>  // b.plast
    b9e0:	cbnz	w3, b8c0 <re_string_reconstruct+0x5b0>
    b9e4:	ldr	w2, [x19, #32]
    b9e8:	cbz	x8, b9f0 <re_string_reconstruct+0x6e0>
    b9ec:	str	w2, [x8]
    b9f0:	cbz	w2, ba18 <re_string_reconstruct+0x708>
    b9f4:	sub	x1, x1, x7
    b9f8:	cmn	x1, #0x4
    b9fc:	add	x1, x1, #0x1
    ba00:	b.hi	bd30 <re_string_reconstruct+0xa20>  // b.pmore
    ba04:	ldr	w25, [sp, #120]
    ba08:	b	b568 <re_string_reconstruct+0x258>
    ba0c:	mov	w2, #0x0                   	// #0
    ba10:	str	wzr, [x19, #44]
    ba14:	b	b740 <re_string_reconstruct+0x430>
    ba18:	mov	w25, #0x0                   	// #0
    ba1c:	b	b560 <re_string_reconstruct+0x250>
    ba20:	ldr	x9, [x13]
    ba24:	mov	x8, #0x0                   	// #0
    ba28:	mov	w2, #0x0                   	// #0
    ba2c:	sub	x7, x9, #0x1
    ba30:	mov	x1, x7
    ba34:	b	b534 <re_string_reconstruct+0x224>
    ba38:	str	w2, [x19, #32]
    ba3c:	b	b9e4 <re_string_reconstruct+0x6d4>
    ba40:	sub	w24, w0, w21
    ba44:	str	w24, [x19, #44]
    ba48:	mov	w2, w23
    ba4c:	sub	w1, w22, #0x1
    ba50:	mov	x0, x19
    ba54:	bl	29d8 <re_string_context_at>
    ba58:	str	w0, [x19, #76]
    ba5c:	b	b59c <re_string_reconstruct+0x28c>
    ba60:	cmp	w2, #0x1f
    ba64:	b.hi	b8c0 <re_string_reconstruct+0x5b0>  // b.pmore
    ba68:	mov	w1, #0x0                   	// #0
    ba6c:	str	xzr, [x19, #32]
    ba70:	b	b54c <re_string_reconstruct+0x23c>
    ba74:	ldr	w0, [x6, w5, sxtw #2]
    ba78:	cmp	w0, w20
    ba7c:	b.ne	b658 <re_string_reconstruct+0x348>  // b.any
    ba80:	ldr	x0, [x19, #16]
    ba84:	sub	w2, w22, w20
    ba88:	sbfiz	x23, x20, #2, #32
    ba8c:	sxtw	x24, w20
    ba90:	sbfiz	x2, x2, #2, #32
    ba94:	add	x1, x0, x23
    ba98:	bl	0 <grub_memmove>
    ba9c:	ldr	w2, [x19, #44]
    baa0:	ldr	x0, [x19, #8]
    baa4:	sub	w2, w2, w20
    baa8:	add	x1, x0, x24
    baac:	sxtw	x2, w2
    bab0:	bl	0 <grub_memmove>
    bab4:	ldp	w0, w1, [x19, #44]
    bab8:	sub	w0, w0, w20
    babc:	sub	w1, w1, w20
    bac0:	stp	w0, w1, [x19, #44]
    bac4:	cmp	w0, #0x0
    bac8:	b.le	baf4 <re_string_reconstruct+0x7e4>
    bacc:	ldr	x3, [x19, #24]
    bad0:	mov	x0, #0x0                   	// #0
    bad4:	add	x2, x3, x23
    bad8:	ldr	w1, [x2, x0, lsl #2]
    badc:	sub	w1, w1, w20
    bae0:	str	w1, [x3, x0, lsl #2]
    bae4:	add	x0, x0, #0x1
    bae8:	ldr	w1, [x19, #44]
    baec:	cmp	w1, w0
    baf0:	b.gt	bad8 <re_string_reconstruct+0x7c8>
    baf4:	ldr	w1, [x19, #64]
    baf8:	ldr	w3, [x19, #72]
    bafc:	ldrb	w0, [x19, #99]
    bb00:	sub	w1, w1, w20
    bb04:	ldr	w2, [x19, #104]
    bb08:	sub	w3, w3, w20
    bb0c:	b	b3f4 <re_string_reconstruct+0xe4>
    bb10:	b.eq	ba0c <re_string_reconstruct+0x6fc>  // b.none
    bb14:	sbfiz	x0, x5, #2, #32
    bb18:	b	b6e0 <re_string_reconstruct+0x3d0>
    bb1c:	ldp	x27, x28, [sp, #80]
    bb20:	b	b4d8 <re_string_reconstruct+0x1c8>
    bb24:	mov	x0, x19
    bb28:	bl	16f0 <build_upper_buffer>
    bb2c:	b	b428 <re_string_reconstruct+0x118>
    bb30:	and	w3, w2, #0x1f
    bb34:	stp	w3, w14, [x19, #32]
    bb38:	tst	w2, #0x1e
    bb3c:	b.eq	ba68 <re_string_reconstruct+0x758>  // b.none
    bb40:	mov	w3, #0x1                   	// #1
    bb44:	b	b8c0 <re_string_reconstruct+0x5b0>
    bb48:	tbz	w3, #7, bc40 <re_string_reconstruct+0x930>
    bb4c:	and	w2, w3, #0xe0
    bb50:	cmp	w2, #0xc0
    bb54:	b.eq	bca0 <re_string_reconstruct+0x990>  // b.none
    bb58:	and	w2, w3, #0xf0
    bb5c:	cmp	w2, #0xe0
    bb60:	b.eq	bd18 <re_string_reconstruct+0xa08>  // b.none
    bb64:	and	w2, w3, #0xf8
    bb68:	cmp	w2, #0xf0
    bb6c:	b.ne	b850 <re_string_reconstruct+0x540>  // b.any
    bb70:	and	w3, w3, #0x7
    bb74:	stp	w3, w8, [sp, #120]
    bb78:	add	x0, x0, #0x1
    bb7c:	cmp	x1, x0
    bb80:	b.ne	b7ec <re_string_reconstruct+0x4dc>  // b.any
    bb84:	b	b850 <re_string_reconstruct+0x540>
    bb88:	ldr	w4, [x19, #60]
    bb8c:	ldr	w1, [x19, #68]
    bb90:	sub	w2, w4, w21
    bb94:	strb	wzr, [x19, #100]
    bb98:	sub	w1, w1, w21
    bb9c:	add	w2, w2, w20
    bba0:	add	w1, w1, w20
    bba4:	str	w2, [x19, #64]
    bba8:	str	w1, [x19, #72]
    bbac:	b	b4b8 <re_string_reconstruct+0x1a8>
    bbb0:	b.le	bbd4 <re_string_reconstruct+0x8c4>
    bbb4:	ldr	x2, [x19, #16]
    bbb8:	mov	x0, #0x0                   	// #0
    bbbc:	mov	w1, #0xffffffff            	// #-1
    bbc0:	str	w1, [x2, x0, lsl #2]
    bbc4:	add	x0, x0, #0x1
    bbc8:	ldr	w24, [x19, #44]
    bbcc:	cmp	w24, w0
    bbd0:	b.gt	bbc0 <re_string_reconstruct+0x8b0>
    bbd4:	ldrb	w0, [x19, #99]
    bbd8:	cbnz	w0, bbe4 <re_string_reconstruct+0x8d4>
    bbdc:	ldr	w2, [x19, #44]
    bbe0:	b	b5ac <re_string_reconstruct+0x29c>
    bbe4:	ldr	x0, [x19, #8]
    bbe8:	sxtw	x2, w24
    bbec:	mov	w1, #0xff                  	// #255
    bbf0:	bl	0 <grub_memset>
    bbf4:	ldrb	w0, [x19, #99]
    bbf8:	ldr	w2, [x19, #44]
    bbfc:	b	b5ac <re_string_reconstruct+0x29c>
    bc00:	and	w2, w2, #0xf
    bc04:	mov	w3, #0x2                   	// #2
    bc08:	stp	w2, w15, [x19, #32]
    bc0c:	b	b8c0 <re_string_reconstruct+0x5b0>
    bc10:	cmp	x24, x26
    bc14:	b.ne	b850 <re_string_reconstruct+0x540>  // b.any
    bc18:	add	x0, x19, #0x20
    bc1c:	mov	x2, #0x8                   	// #8
    bc20:	mov	w1, #0x0                   	// #0
    bc24:	bl	0 <grub_memset>
    bc28:	ldrb	w0, [x19, #102]
    bc2c:	str	wzr, [x19, #44]
    bc30:	cbnz	w0, bc7c <re_string_reconstruct+0x96c>
    bc34:	ldp	x27, x28, [sp, #80]
    bc38:	str	wzr, [x19, #76]
    bc3c:	b	b5a4 <re_string_reconstruct+0x294>
    bc40:	mov	w28, w3
    bc44:	str	w3, [sp, #120]
    bc48:	b	b830 <re_string_reconstruct+0x520>
    bc4c:	and	w1, w25, #0xffffffdf
    bc50:	stp	x27, x28, [sp, #80]
    bc54:	sub	w1, w1, #0x41
    bc58:	mov	w28, w25
    bc5c:	cmp	w1, #0x19
    bc60:	mov	w0, #0x1                   	// #1
    bc64:	b.hi	bc84 <re_string_reconstruct+0x974>  // b.pmore
    bc68:	ldp	x27, x28, [sp, #80]
    bc6c:	b	b598 <re_string_reconstruct+0x288>
    bc70:	mov	w6, w0
    bc74:	stp	w6, w6, [x19, #44]
    bc78:	b	b428 <re_string_reconstruct+0x118>
    bc7c:	mov	w25, w28
    bc80:	mov	w24, #0x0                   	// #0
    bc84:	sub	w3, w28, #0x30
    bc88:	cmp	w25, #0x5f
    bc8c:	ccmp	w3, #0x9, #0x0, ne  // ne = any
    bc90:	mov	w0, #0x1                   	// #1
    bc94:	ldp	x27, x28, [sp, #80]
    bc98:	b.ls	b598 <re_string_reconstruct+0x288>  // b.plast
    bc9c:	b	b58c <re_string_reconstruct+0x27c>
    bca0:	and	w2, w3, #0x1f
    bca4:	stp	w2, w6, [sp, #120]
    bca8:	tst	w3, #0x1e
    bcac:	b.ne	bb78 <re_string_reconstruct+0x868>  // b.any
    bcb0:	b	b850 <re_string_reconstruct+0x540>
    bcb4:	cmp	w3, #0x1f
    bcb8:	b.hi	bb78 <re_string_reconstruct+0x868>  // b.pmore
    bcbc:	b	b850 <re_string_reconstruct+0x540>
    bcc0:	cmp	w25, #0x6
    bcc4:	mov	w0, #0x6                   	// #6
    bcc8:	csel	w0, w25, w0, le
    bccc:	cmp	w25, #0x0
    bcd0:	b.le	bd24 <re_string_reconstruct+0xa14>
    bcd4:	sxtw	x6, w0
    bcd8:	sub	w1, w0, #0x2
    bcdc:	sub	x6, x6, #0x3
    bce0:	sub	w0, w0, #0x1
    bce4:	sub	x6, x6, x0
    bce8:	sxtw	x1, w1
    bcec:	add	x0, sp, #0x70
    bcf0:	add	x4, x24, #0x1
    bcf4:	ldrb	w5, [x4, x1]
    bcf8:	add	x3, x0, x1
    bcfc:	sub	x1, x1, #0x1
    bd00:	cmp	x6, x1
    bd04:	ldrb	w5, [x2, x5]
    bd08:	strb	w5, [x3, #1]
    bd0c:	b.ne	bcf4 <re_string_reconstruct+0x9e4>  // b.any
    bd10:	mov	x4, x0
    bd14:	b	b7b8 <re_string_reconstruct+0x4a8>
    bd18:	and	w3, w3, #0xf
    bd1c:	stp	w3, w7, [sp, #120]
    bd20:	b	bb78 <re_string_reconstruct+0x868>
    bd24:	add	x0, sp, #0x70
    bd28:	mov	x4, x0
    bd2c:	b	b7b8 <re_string_reconstruct+0x4a8>
    bd30:	cmp	x1, #0x0
    bd34:	cset	w1, eq  // eq = none
    bd38:	b	b54c <re_string_reconstruct+0x23c>
    bd3c:	cmn	x0, #0x3
    bd40:	b.hi	b850 <re_string_reconstruct+0x540>  // b.pmore
    bd44:	sub	w24, w0, w24
    bd48:	mov	x2, #0x8                   	// #8
    bd4c:	add	x0, x19, #0x20
    bd50:	mov	w1, #0x0                   	// #0
    bd54:	bl	0 <grub_memset>
    bd58:	str	w24, [x19, #44]
    bd5c:	cmn	w28, #0x1
    bd60:	b.eq	b850 <re_string_reconstruct+0x540>  // b.none
    bd64:	ldp	x27, x28, [sp, #80]
    bd68:	b	b584 <re_string_reconstruct+0x274>
    bd6c:	nop
	...

000000000000bd78 <re_search_internal>:
    bd78:	sub	sp, sp, #0x280
    bd7c:	add	x8, sp, #0x200
    bd80:	stp	x29, x30, [sp]
    bd84:	mov	x29, sp
    bd88:	stp	x25, x26, [sp, #64]
    bd8c:	ldr	x26, [x0, #32]
    bd90:	stp	x19, x20, [sp, #16]
    bd94:	mov	w19, w3
    bd98:	stp	x21, x22, [sp, #32]
    bd9c:	mov	w20, w4
    bda0:	mov	w21, w5
    bda4:	stp	x27, x28, [sp, #80]
    bda8:	stp	xzr, xzr, [x8, #48]
    bdac:	str	x1, [sp, #192]
    bdb0:	ldr	w1, [sp, #640]
    bdb4:	ldr	x28, [x0]
    bdb8:	stp	xzr, xzr, [x8]
    bdbc:	stp	xzr, xzr, [x8, #16]
    bdc0:	stp	xzr, xzr, [x8, #32]
    bdc4:	stp	xzr, xzr, [x8, #64]
    bdc8:	stp	xzr, xzr, [x8, #80]
    bdcc:	stp	xzr, xzr, [x8, #96]
    bdd0:	str	x0, [sp, #136]
    bdd4:	str	x6, [sp, #152]
    bdd8:	str	w1, [sp, #168]
    bddc:	str	w2, [sp, #180]
    bde0:	str	x7, [sp, #264]
    bde4:	stp	xzr, xzr, [sp, #448]
    bde8:	stp	xzr, xzr, [sp, #464]
    bdec:	stp	xzr, xzr, [sp, #480]
    bdf0:	stp	xzr, xzr, [sp, #496]
    bdf4:	str	x28, [sp, #560]
    bdf8:	stp	xzr, xzr, [x8, #112]
    bdfc:	cbz	x26, be14 <re_search_internal+0x9c>
    be00:	ldrb	w0, [x0, #56]
    be04:	tst	x0, #0x8
    be08:	ccmp	w3, w4, #0x4, ne  // ne = any
    be0c:	b.ne	c194 <re_search_internal+0x41c>  // b.any
    be10:	mov	x26, #0x0                   	// #0
    be14:	ldr	x0, [sp, #136]
    be18:	str	wzr, [sp, #240]
    be1c:	ldr	x2, [sp, #152]
    be20:	ldr	x0, [x0, #48]
    be24:	cmp	x0, x2
    be28:	b.cs	be40 <re_search_internal+0xc8>  // b.hs, b.nlast
    be2c:	sub	w1, w2, #0x1
    be30:	sub	w0, w1, w0
    be34:	str	w0, [sp, #240]
    be38:	sub	x0, x2, w0, sxtw
    be3c:	str	x0, [sp, #152]
    be40:	ldr	x4, [sp, #136]
    be44:	ldr	x0, [x4, #16]
    be48:	cbz	x0, c910 <re_search_internal+0xb98>
    be4c:	ldr	x0, [x28, #72]
    be50:	cbz	x0, c910 <re_search_internal+0xb98>
    be54:	ldr	x1, [x28, #80]
    be58:	cbz	x1, c910 <re_search_internal+0xb98>
    be5c:	ldr	x2, [x28, #88]
    be60:	cbz	x2, c910 <re_search_internal+0xb98>
    be64:	ldr	x3, [x28, #96]
    be68:	cbz	x3, c910 <re_search_internal+0xb98>
    be6c:	ldr	w0, [x0, #12]
    be70:	cbnz	w0, bea8 <re_search_internal+0x130>
    be74:	ldr	w0, [x1, #12]
    be78:	cbnz	w0, bea8 <re_search_internal+0x130>
    be7c:	ldr	w0, [x2, #12]
    be80:	cbz	w0, be8c <re_search_internal+0x114>
    be84:	ldrsb	w0, [x4, #56]
    be88:	tbnz	w0, #31, bea8 <re_search_internal+0x130>
    be8c:	mov	w0, #0x1                   	// #1
    be90:	str	w0, [sp, #148]
    be94:	cmp	w19, #0x0
    be98:	ccmp	w20, #0x0, #0x4, ne  // ne = any
    be9c:	b.ne	c8f0 <re_search_internal+0xb78>  // b.any
    bea0:	mov	w20, #0x0                   	// #0
    bea4:	mov	w19, #0x0                   	// #0
    bea8:	ldr	x0, [sp, #152]
    beac:	cbnz	x0, c184 <re_search_internal+0x40c>
    beb0:	ldr	w0, [x28, #140]
    beb4:	cmp	w0, #0x0
    beb8:	cset	w0, ne  // ne = any
    bebc:	str	w0, [sp, #112]
    bec0:	str	w0, [sp, #188]
    bec4:	ldr	x5, [sp, #136]
    bec8:	ldr	x0, [x28, #16]
    becc:	ldr	x2, [x5, #24]
    bed0:	add	w1, w0, #0x1
    bed4:	ldr	w4, [x28, #164]
    bed8:	ldr	w6, [sp, #180]
    bedc:	ldrb	w0, [x28, #160]
    bee0:	cmp	w1, w4
    bee4:	ldr	x7, [x5, #40]
    bee8:	add	w3, w6, #0x1
    beec:	csel	w1, w1, w4, ge  // ge = tcont
    bef0:	and	x5, x2, #0x400000
    bef4:	ubfx	w2, w2, #22, #1
    bef8:	cmp	w1, w3
    befc:	strb	w2, [sp, #544]
    bf00:	ubfx	x2, x0, #2, #1
    bf04:	csel	w1, w1, w3, le
    bf08:	orr	x3, x5, x7
    bf0c:	strb	w2, [sp, #545]
    bf10:	add	x2, sp, #0x204
    bf14:	cmp	x3, #0x0
    bf18:	ubfx	x0, x0, #3, #1
    bf1c:	ldr	x3, [sp, #192]
    bf20:	str	x3, [sp, #448]
    bf24:	cset	w3, ne  // ne = any
    bf28:	stp	w6, w6, [x2, #-8]
    bf2c:	stp	w6, w6, [x2]
    bf30:	str	x7, [sp, #224]
    bf34:	str	x7, [sp, #528]
    bf38:	strb	w0, [sp, #546]
    bf3c:	add	x0, sp, #0x1c0
    bf40:	strb	w3, [sp, #547]
    bf44:	str	w4, [sp, #552]
    bf48:	bl	1898 <re_string_realloc_buffers>
    bf4c:	str	w0, [sp, #148]
    bf50:	cbnz	w0, cca0 <re_search_internal+0xf28>
    bf54:	ldrb	w0, [x28, #160]
    bf58:	add	x1, x28, #0xa8
    bf5c:	ldrb	w2, [sp, #547]
    bf60:	str	x1, [sp, #536]
    bf64:	ubfx	x0, x0, #4, #1
    bf68:	strb	w0, [sp, #550]
    bf6c:	cbnz	w2, bf88 <re_search_internal+0x210>
    bf70:	ldr	x0, [sp, #192]
    bf74:	str	x0, [sp, #456]
    bf78:	ldr	w0, [x28, #164]
    bf7c:	ldr	w2, [sp, #180]
    bf80:	cmp	w0, #0x1
    bf84:	b.le	bf8c <re_search_internal+0x214>
    bf88:	mov	w2, #0x0                   	// #0
    bf8c:	ldr	x0, [sp, #136]
    bf90:	mov	w3, #0xffffffff            	// #-1
    bf94:	str	w3, [sp, #572]
    bf98:	ldrb	w1, [x0, #56]
    bf9c:	ldr	w0, [x28, #140]
    bfa0:	ubfx	x1, x1, #7, #1
    bfa4:	strb	w1, [sp, #549]
    bfa8:	add	x1, sp, #0x1fc
    bfac:	cmp	wzr, w0, lsl #1
    bfb0:	stp	w21, w21, [x1, #8]
    bfb4:	lsl	w21, w0, #1
    bfb8:	ldr	w0, [sp, #168]
    bfbc:	stp	w2, w2, [x1, #-16]
    bfc0:	str	w0, [sp, #568]
    bfc4:	b.lt	cc68 <re_search_internal+0xef0>  // b.tstop
    bfc8:	mov	w0, #0x1                   	// #1
    bfcc:	str	w0, [sp, #616]
    bfd0:	ldr	x0, [sp, #152]
    bfd4:	str	w21, [sp, #600]
    bfd8:	str	w21, [sp, #624]
    bfdc:	cmp	x0, #0x1
    bfe0:	b.ls	cd74 <re_search_internal+0xffc>  // b.plast
    bfe4:	ldr	w0, [sp, #500]
    bfe8:	mov	w1, #0x7ffffffe            	// #2147483646
    bfec:	cmp	w0, w1
    bff0:	b.hi	cc98 <re_search_internal+0xf20>  // b.pmore
    bff4:	add	w0, w0, #0x1
    bff8:	sbfiz	x0, x0, #3, #32
    bffc:	bl	0 <grub_malloc>
    c000:	str	x0, [sp, #584]
    c004:	cbz	x0, d818 <re_search_internal+0x1aa0>
    c008:	ldr	x0, [sp, #168]
    c00c:	mov	w1, #0x6                   	// #6
    c010:	mov	w2, #0x1                   	// #1
    c014:	str	w19, [sp, #336]
    c018:	tst	x0, #0x1
    c01c:	mov	w0, #0x4                   	// #4
    c020:	csel	w1, w0, w1, ne  // ne = any
    c024:	cmp	w19, w20
    c028:	str	w1, [sp, #524]
    c02c:	csel	w1, w19, w20, ge  // ge = tcont
    c030:	str	w1, [sp, #176]
    c034:	mov	w1, #0x8                   	// #8
    c038:	cneg	w2, w2, gt
    c03c:	str	w1, [sp, #184]
    c040:	ldr	w1, [x28, #164]
    c044:	str	w2, [sp, #220]
    c048:	csel	w2, w19, w20, le
    c04c:	str	w2, [sp, #216]
    c050:	str	w1, [sp, #244]
    c054:	cbz	x26, c0a4 <re_search_internal+0x32c>
    c058:	cmp	w1, #0x1
    c05c:	b.eq	c080 <re_search_internal+0x308>  // b.none
    c060:	ldr	x0, [sp, #136]
    c064:	ldr	x1, [sp, #224]
    c068:	ldr	x0, [x0, #24]
    c06c:	and	x0, x0, #0x400000
    c070:	orr	x0, x1, x0
    c074:	cmp	x0, #0x0
    c078:	cset	w0, eq  // eq = none
    c07c:	lsl	w0, w0, #2
    c080:	cmp	w19, w20
    c084:	mov	w1, #0x2                   	// #2
    c088:	csel	w2, wzr, w1, gt
    c08c:	ldr	x1, [sp, #224]
    c090:	cmp	x1, #0x0
    c094:	cset	w1, ne  // ne = any
    c098:	orr	w0, w1, w0
    c09c:	orr	w0, w0, w2
    c0a0:	str	w0, [sp, #184]
    c0a4:	ldr	w0, [sp, #216]
    c0a8:	ldr	w1, [sp, #176]
    c0ac:	cmp	w19, w0
    c0b0:	cset	w0, lt  // lt = tstop
    c0b4:	cmp	w19, w1
    c0b8:	cset	w1, gt
    c0bc:	orr	w0, w0, w1
    c0c0:	cbnz	w0, d874 <re_search_internal+0x1afc>
    c0c4:	cmp	w19, w20
    c0c8:	add	x0, sp, #0x150
    c0cc:	csel	x0, x0, xzr, le
    c0d0:	stp	x23, x24, [sp, #48]
    c0d4:	cmp	x0, #0x0
    c0d8:	stp	x28, x26, [sp, #200]
    c0dc:	str	x0, [sp, #256]
    c0e0:	cset	w0, ne  // ne = any
    c0e4:	str	w0, [sp, #320]
    c0e8:	ldr	w0, [sp, #184]
    c0ec:	cmp	w0, #0x7
    c0f0:	b.eq	cc10 <re_search_internal+0xe98>  // b.none
    c0f4:	cmp	w0, #0x8
    c0f8:	b.eq	c204 <re_search_internal+0x48c>  // b.none
    c0fc:	cmp	w0, #0x5
    c100:	b.gt	c1a0 <re_search_internal+0x428>
    c104:	cmp	w0, #0x3
    c108:	b.gt	cb98 <re_search_internal+0xe20>
    c10c:	ldp	w23, w20, [sp, #176]
    c110:	ldp	w22, w21, [sp, #216]
    c114:	ldr	w2, [sp, #488]
    c118:	ldr	x28, [sp, #208]
    c11c:	b	c154 <re_search_internal+0x3dc>
    c120:	cmp	w20, w19
    c124:	mov	x0, x28
    c128:	b.le	c138 <re_search_internal+0x3c0>
    c12c:	ldr	x0, [sp, #456]
    c130:	ldrb	w0, [x0, w1, uxtw]
    c134:	add	x0, x28, x0
    c138:	ldrb	w0, [x0]
    c13c:	cbnz	w0, c204 <re_search_internal+0x48c>
    c140:	add	w19, w19, w21
    c144:	str	w19, [sp, #336]
    c148:	cmp	w19, w22
    c14c:	ccmp	w19, w23, #0x0, ge  // ge = tcont
    c150:	b.gt	c780 <re_search_internal+0xa08>
    c154:	ldr	w0, [sp, #496]
    c158:	sub	w1, w19, w2
    c15c:	cmp	w0, w1
    c160:	b.hi	c120 <re_search_internal+0x3a8>  // b.pmore
    c164:	ldr	w2, [sp, #168]
    c168:	mov	w1, w19
    c16c:	add	x0, sp, #0x1c0
    c170:	bl	b310 <re_string_reconstruct>
    c174:	cbnz	w0, d824 <re_search_internal+0x1aac>
    c178:	ldr	w2, [sp, #488]
    c17c:	sub	w1, w19, w2
    c180:	b	c120 <re_search_internal+0x3a8>
    c184:	mov	w0, #0x1                   	// #1
    c188:	str	w0, [sp, #112]
    c18c:	str	w0, [sp, #188]
    c190:	b	bec4 <re_search_internal+0x14c>
    c194:	tst	x0, #0x1
    c198:	csel	x26, x26, xzr, eq  // eq = none
    c19c:	b	be14 <re_search_internal+0x9c>
    c1a0:	ldr	w0, [sp, #184]
    c1a4:	cmp	w0, #0x6
    c1a8:	b.ne	c10c <re_search_internal+0x394>  // b.any
    c1ac:	ldr	w0, [sp, #176]
    c1b0:	mov	w3, #0x0                   	// #0
    c1b4:	cmp	w0, w19
    c1b8:	sxtw	x0, w19
    c1bc:	b.le	c1f8 <re_search_internal+0x480>
    c1c0:	ldr	w5, [sp, #176]
    c1c4:	ldr	x4, [sp, #192]
    c1c8:	ldr	x28, [sp, #208]
    c1cc:	nop
    c1d0:	add	w2, w0, #0x1
    c1d4:	ldrb	w1, [x4, x0]
    c1d8:	ldrb	w1, [x28, x1]
    c1dc:	cbnz	w1, d448 <re_search_internal+0x16d0>
    c1e0:	add	x0, x0, #0x1
    c1e4:	mov	w3, #0x1                   	// #1
    c1e8:	cmp	w5, w0
    c1ec:	b.gt	c1d0 <re_search_internal+0x458>
    c1f0:	mov	w19, w2
    c1f4:	str	w2, [sp, #336]
    c1f8:	ldr	w0, [sp, #176]
    c1fc:	cmp	w0, w19
    c200:	b.eq	d790 <re_search_internal+0x1a18>  // b.none
    c204:	ldr	w2, [sp, #168]
    c208:	mov	w1, w19
    c20c:	add	x0, sp, #0x1c0
    c210:	bl	b310 <re_string_reconstruct>
    c214:	str	w0, [sp, #148]
    c218:	cbnz	w0, cde4 <re_search_internal+0x106c>
    c21c:	ldr	w0, [sp, #244]
    c220:	cmp	w0, #0x1
    c224:	b.eq	c240 <re_search_internal+0x4c8>  // b.none
    c228:	ldr	w0, [sp, #492]
    c22c:	cbz	w0, c240 <re_search_internal+0x4c8>
    c230:	ldr	x0, [sp, #464]
    c234:	ldr	w0, [x0]
    c238:	cmn	w0, #0x1
    c23c:	b.eq	c75c <re_search_internal+0x9e4>  // b.none
    c240:	ldr	x19, [sp, #560]
    c244:	str	wzr, [sp, #340]
    c248:	ldr	w0, [sp, #504]
    c24c:	str	w0, [sp, #104]
    c250:	ldr	x24, [x19, #72]
    c254:	str	xzr, [sp, #592]
    c258:	mov	w1, w0
    c25c:	str	wzr, [sp, #616]
    c260:	ldrsb	w0, [x24, #80]
    c264:	tbz	w0, #31, c298 <re_search_internal+0x520>
    c268:	ldr	w2, [sp, #568]
    c26c:	sub	w1, w1, #0x1
    c270:	add	x0, sp, #0x1c0
    c274:	bl	29d8 <re_string_context_at>
    c278:	tbnz	w0, #0, cd84 <re_search_internal+0x100c>
    c27c:	cbz	w0, c298 <re_search_internal+0x520>
    c280:	and	w1, w0, #0x6
    c284:	cmp	w1, #0x6
    c288:	b.eq	d7c4 <re_search_internal+0x1a4c>  // b.none
    c28c:	tbnz	w0, #1, d52c <re_search_internal+0x17b4>
    c290:	tbnz	w0, #2, d56c <re_search_internal+0x17f4>
    c294:	nop
    c298:	ldr	x0, [sp, #584]
    c29c:	cbz	x0, cb88 <re_search_internal+0xe10>
    c2a0:	ldr	w2, [sp, #104]
    c2a4:	ldr	w1, [x19, #140]
    c2a8:	str	x24, [x0, w2, sxtw #3]
    c2ac:	cbnz	w1, d684 <re_search_internal+0x190c>
    c2b0:	ldr	w1, [sp, #320]
    c2b4:	ldrb	w0, [x24, #80]
    c2b8:	mov	w10, w1
    c2bc:	str	wzr, [sp, #120]
    c2c0:	mov	w27, #0xffffffff            	// #-1
    c2c4:	tbnz	w0, #4, d42c <re_search_internal+0x16b4>
    c2c8:	ldr	x0, [sp, #256]
    c2cc:	str	x0, [sp, #160]
    c2d0:	ldr	w11, [sp, #504]
    c2d4:	ldr	w0, [sp, #520]
    c2d8:	cmp	w11, w0
    c2dc:	b.ge	d860 <re_search_internal+0x1ae8>  // b.tcont
    c2e0:	ldr	w0, [sp, #500]
    c2e4:	add	w19, w11, #0x1
    c2e8:	str	w27, [sp, #128]
    c2ec:	mov	w27, w10
    c2f0:	cmp	w19, w0
    c2f4:	b.ge	c3b0 <re_search_internal+0x638>  // b.tcont
    c2f8:	ldr	w0, [sp, #492]
    c2fc:	cmp	w19, w0
    c300:	b.ge	c86c <re_search_internal+0xaf4>  // b.tcont
    c304:	ldrb	w0, [x24, #80]
    c308:	tbnz	w0, #5, c3e0 <re_search_internal+0x668>
    c30c:	add	w0, w11, #0x1
    c310:	str	w0, [sp, #504]
    c314:	ldr	x0, [x24, #64]
    c318:	mov	x21, x24
    c31c:	ldr	x1, [sp, #456]
    c320:	ldrb	w20, [x1, w11, sxtw]
    c324:	cbz	x0, c548 <re_search_internal+0x7d0>
    c328:	mov	w4, w20
    c32c:	ldr	x10, [x0, x4, lsl #3]
    c330:	ldr	x0, [sp, #584]
    c334:	cbz	x0, c34c <re_search_internal+0x5d4>
    c338:	mov	x2, x10
    c33c:	add	x1, sp, #0x1c0
    c340:	add	x0, sp, #0x154
    c344:	bl	b190 <merge_state_with_log>
    c348:	mov	x10, x0
    c34c:	cbz	x10, c57c <re_search_internal+0x804>
    c350:	cmp	x10, x24
    c354:	ldr	w1, [sp, #104]
    c358:	csel	w27, w27, wzr, eq  // eq = none
    c35c:	ldrb	w0, [x10, #80]
    c360:	cmp	w27, #0x0
    c364:	ldr	w11, [sp, #504]
    c368:	csel	w1, w1, w19, eq  // eq = none
    c36c:	str	w1, [sp, #104]
    c370:	tbz	w0, #4, c390 <re_search_internal+0x618>
    c374:	tbnz	w0, #7, c7f8 <re_search_internal+0xa80>
    c378:	ldr	w0, [sp, #112]
    c37c:	cbz	w0, d4a8 <re_search_internal+0x1730>
    c380:	ldr	w0, [sp, #112]
    c384:	str	w0, [sp, #120]
    c388:	str	w11, [sp, #128]
    c38c:	str	xzr, [sp, #160]
    c390:	ldr	w0, [sp, #520]
    c394:	cmp	w0, w11
    c398:	b.le	c7f0 <re_search_internal+0xa78>
    c39c:	ldr	w0, [sp, #500]
    c3a0:	add	w19, w11, #0x1
    c3a4:	mov	x24, x10
    c3a8:	cmp	w19, w0
    c3ac:	b.lt	c2f8 <re_search_internal+0x580>  // b.tstop
    c3b0:	ldr	w1, [sp, #512]
    c3b4:	cmp	w0, w1
    c3b8:	b.ge	c2f8 <re_search_internal+0x580>  // b.tcont
    c3bc:	add	w1, w11, #0x2
    c3c0:	add	x0, sp, #0x1c0
    c3c4:	bl	a6e0 <extend_buffers>
    c3c8:	str	w0, [sp, #340]
    c3cc:	cbnz	w0, d418 <re_search_internal+0x16a0>
    c3d0:	ldrb	w0, [x24, #80]
    c3d4:	ldr	w11, [sp, #504]
    c3d8:	tbz	w0, #5, c30c <re_search_internal+0x594>
    c3dc:	nop
    c3e0:	ldr	w7, [x24, #12]
    c3e4:	ldr	x20, [sp, #560]
    c3e8:	cmp	w7, #0x0
    c3ec:	b.le	c528 <re_search_internal+0x7b0>
    c3f0:	add	x25, x20, #0xc8
    c3f4:	mov	x21, #0x0                   	// #0
    c3f8:	ldr	x0, [x24, #16]
    c3fc:	ldr	x8, [x20]
    c400:	ldr	w5, [x0, x21, lsl #2]
    c404:	add	x0, x8, w5, sxtw #4
    c408:	sxtw	x22, w5
    c40c:	ldrb	w1, [x0, #10]
    c410:	tbz	w1, #4, c51c <re_search_internal+0x7a4>
    c414:	ldr	w6, [x0, #8]
    c418:	tst	w6, #0x3ff00
    c41c:	b.eq	c450 <re_search_internal+0x6d8>  // b.none
    c420:	ldr	w2, [sp, #568]
    c424:	mov	w1, w11
    c428:	add	x0, sp, #0x1c0
    c42c:	bl	29d8 <re_string_context_at>
    c430:	ubfx	x2, x6, #8, #10
    c434:	tbz	w6, #10, c814 <re_search_internal+0xa9c>
    c438:	tbz	w0, #0, c51c <re_search_internal+0x7a4>
    c43c:	tbnz	w2, #3, c51c <re_search_internal+0x7a4>
    c440:	tbz	w2, #5, c448 <re_search_internal+0x6d0>
    c444:	tbz	w0, #1, c51c <re_search_internal+0x7a4>
    c448:	tbz	w2, #7, c450 <re_search_internal+0x6d8>
    c44c:	tbz	w0, #3, c51c <re_search_internal+0x7a4>
    c450:	mov	w2, w5
    c454:	mov	w4, w11
    c458:	mov	x0, x8
    c45c:	add	x3, sp, #0x1c0
    c460:	mov	x1, x25
    c464:	bl	47b0 <check_node_accept_bytes.isra.0>
    c468:	mov	w2, w0
    c46c:	cbz	w0, c514 <re_search_internal+0x79c>
    c470:	ldr	w1, [sp, #616]
    c474:	add	x0, sp, #0x1c0
    c478:	ldr	w26, [sp, #504]
    c47c:	cmp	w1, w2
    c480:	add	w26, w2, w26
    c484:	csel	w2, w1, w2, ge  // ge = tcont
    c488:	mov	w1, w26
    c48c:	str	w2, [sp, #616]
    c490:	bl	a828 <clean_state_log_if_needed>
    c494:	str	w0, [sp, #376]
    c498:	cbnz	w0, c87c <re_search_internal+0xb04>
    c49c:	ldr	x28, [sp, #584]
    c4a0:	sxtw	x23, w26
    c4a4:	ldr	x0, [x20, #24]
    c4a8:	ldr	x1, [x28, x23, lsl #3]
    c4ac:	ldr	x2, [x20, #48]
    c4b0:	ldrsw	x0, [x0, x22, lsl #2]
    c4b4:	add	x0, x2, x0, lsl #4
    c4b8:	cbz	x1, c820 <re_search_internal+0xaa8>
    c4bc:	ldr	x1, [x1, #56]
    c4c0:	mov	x2, x0
    c4c4:	add	x0, sp, #0x198
    c4c8:	bl	35a8 <re_node_set_init_union>
    c4cc:	str	w0, [sp, #376]
    c4d0:	cbnz	w0, c87c <re_search_internal+0xb04>
    c4d4:	ldr	w2, [sp, #568]
    c4d8:	sub	w1, w26, #0x1
    c4dc:	add	x0, sp, #0x1c0
    c4e0:	bl	29d8 <re_string_context_at>
    c4e4:	mov	w3, w0
    c4e8:	ldr	x22, [sp, #584]
    c4ec:	mov	x1, x20
    c4f0:	add	x2, sp, #0x198
    c4f4:	add	x0, sp, #0x178
    c4f8:	bl	3768 <re_acquire_state_context>
    c4fc:	str	x0, [x22, x23, lsl #3]
    c500:	ldr	x0, [sp, #416]
    c504:	bl	0 <grub_free>
    c508:	ldr	x1, [sp, #584]
    c50c:	ldr	x0, [x1, x23, lsl #3]
    c510:	cbz	x0, c860 <re_search_internal+0xae8>
    c514:	ldr	w7, [x24, #12]
    c518:	ldr	w11, [sp, #504]
    c51c:	add	x21, x21, #0x1
    c520:	cmp	w7, w21
    c524:	b.gt	c3f8 <re_search_internal+0x680>
    c528:	add	w0, w11, #0x1
    c52c:	str	w0, [sp, #504]
    c530:	ldr	x0, [x24, #64]
    c534:	str	wzr, [sp, #340]
    c538:	ldr	x1, [sp, #456]
    c53c:	mov	x21, x24
    c540:	ldrb	w20, [x1, w11, sxtw]
    c544:	cbnz	x0, c328 <re_search_internal+0x5b0>
    c548:	ldr	x5, [x21, #72]
    c54c:	cbz	x5, cdf4 <re_search_internal+0x107c>
    c550:	ldr	w2, [sp, #568]
    c554:	add	x0, sp, #0x1c0
    c558:	ldr	w1, [sp, #504]
    c55c:	mov	x24, x21
    c560:	sub	w1, w1, #0x1
    c564:	bl	29d8 <re_string_context_at>
    c568:	and	x1, x20, #0xff
    c56c:	tbz	w0, #0, c938 <re_search_internal+0xbc0>
    c570:	add	x1, x1, #0x100
    c574:	ldr	x10, [x5, x1, lsl #3]
    c578:	b	c330 <re_search_internal+0x5b8>
    c57c:	ldr	w0, [sp, #340]
    c580:	ldr	x1, [sp, #584]
    c584:	cbnz	w0, d7e0 <re_search_internal+0x1a68>
    c588:	cbz	x1, c7f0 <re_search_internal+0xa78>
    c58c:	ldr	w0, [sp, #188]
    c590:	ldr	w2, [sp, #120]
    c594:	eor	w0, w0, #0x1
    c598:	tst	w2, w0
    c59c:	b.ne	c7f0 <re_search_internal+0xa78>  // b.any
    c5a0:	ldr	w0, [sp, #504]
    c5a4:	sub	x1, x1, #0x8
    c5a8:	ldr	w3, [sp, #592]
    c5ac:	mov	w2, #0x0                   	// #0
    c5b0:	add	w0, w0, #0x1
    c5b4:	sxtw	x0, w0
    c5b8:	b	c5c8 <re_search_internal+0x850>
    c5bc:	ldr	x4, [x1, x0, lsl #3]
    c5c0:	mov	w2, #0x1                   	// #1
    c5c4:	cbnz	x4, c7bc <re_search_internal+0xa44>
    c5c8:	cmp	w3, w0
    c5cc:	sub	w4, w0, #0x1
    c5d0:	mov	w5, w0
    c5d4:	add	x0, x0, #0x1
    c5d8:	b.ge	c5bc <re_search_internal+0x844>  // b.tcont
    c5dc:	ldr	w27, [sp, #128]
    c5e0:	cbz	w2, c5e8 <re_search_internal+0x870>
    c5e4:	str	w4, [sp, #504]
    c5e8:	ldr	x1, [sp, #160]
    c5ec:	cbz	x1, c600 <re_search_internal+0x888>
    c5f0:	ldr	w0, [x1]
    c5f4:	ldr	w2, [sp, #104]
    c5f8:	add	w0, w0, w2
    c5fc:	str	w0, [x1]
    c600:	cmn	w27, #0x1
    c604:	b.eq	c750 <re_search_internal+0x9d8>  // b.none
    c608:	cmn	w27, #0x2
    c60c:	b.eq	dfd8 <re_search_internal+0x2260>  // b.none
    c610:	ldr	x0, [sp, #136]
    c614:	str	w27, [sp, #572]
    c618:	ldrb	w0, [x0, #56]
    c61c:	tbnz	w0, #4, c944 <re_search_internal+0xbcc>
    c620:	ldr	x0, [sp, #152]
    c624:	cmp	x0, #0x1
    c628:	b.ls	cca8 <re_search_internal+0xf30>  // b.plast
    c62c:	ldr	x10, [sp, #584]
    c630:	mov	w3, w27
    c634:	add	x0, sp, #0x1c0
    c638:	ldr	x1, [x10, w27, sxtw #3]
    c63c:	add	x2, x1, #0x10
    c640:	ldr	w1, [x1, #12]
    c644:	bl	2bd8 <check_halt_state_context.isra.0>
    c648:	str	w0, [sp, #576]
    c64c:	ldr	x1, [sp, #200]
    c650:	mov	w20, w0
    c654:	ldrb	w1, [x1, #160]
    c658:	tbnz	w1, #0, c66c <re_search_internal+0x8f4>
    c65c:	ldr	x0, [sp, #200]
    c660:	ldr	w0, [x0, #140]
    c664:	cbz	w0, ccb4 <re_search_internal+0xf3c>
    c668:	ldr	w20, [sp, #576]
    c66c:	mov	w0, #0x7ffffffe            	// #2147483646
    c670:	cmp	w27, w0
    c674:	ldr	x23, [sp, #560]
    c678:	b.hi	d514 <re_search_internal+0x179c>  // b.pmore
    c67c:	add	w21, w27, #0x1
    c680:	sbfiz	x19, x21, #3, #32
    c684:	mov	x0, x19
    c688:	bl	0 <grub_malloc>
    c68c:	mov	x25, x0
    c690:	cbz	x0, d534 <re_search_internal+0x17bc>
    c694:	ldr	w0, [x23, #140]
    c698:	cbz	w0, c9c8 <re_search_internal+0xc50>
    c69c:	mov	x0, x19
    c6a0:	bl	0 <grub_malloc>
    c6a4:	mov	x26, x0
    c6a8:	cbz	x0, d838 <re_search_internal+0x1ac0>
    c6ac:	add	x22, sp, #0x198
    c6b0:	add	x24, x22, #0x18
    c6b4:	sbfiz	x2, x21, #3, #32
    c6b8:	mov	w1, #0x0                   	// #0
    c6bc:	mov	x0, x26
    c6c0:	bl	0 <grub_memset>
    c6c4:	mov	x2, #0x10                  	// #16
    c6c8:	mov	w1, #0x0                   	// #0
    c6cc:	mov	x0, x24
    c6d0:	stp	x25, x26, [sp, #408]
    c6d4:	str	w20, [sp, #424]
    c6d8:	str	w27, [sp, #428]
    c6dc:	bl	0 <grub_memset>
    c6e0:	mov	x1, x22
    c6e4:	add	x0, sp, #0x1c0
    c6e8:	bl	5110 <sift_states_backward>
    c6ec:	mov	w19, w0
    c6f0:	ldr	x0, [sp, #440]
    c6f4:	bl	0 <grub_free>
    c6f8:	cbnz	w19, c99c <re_search_internal+0xc24>
    c6fc:	ldr	x0, [x25]
    c700:	cbnz	x0, c974 <re_search_internal+0xbfc>
    c704:	ldr	x0, [x26]
    c708:	cbnz	x0, c974 <re_search_internal+0xbfc>
    c70c:	sub	w3, w27, #0x1
    c710:	cbz	w27, c740 <re_search_internal+0x9c8>
    c714:	ldr	x1, [sp, #584]
    c718:	sxtw	x3, w3
    c71c:	nop
    c720:	ldr	x2, [x1, x3, lsl #3]
    c724:	mov	w27, w3
    c728:	cbz	x2, c734 <re_search_internal+0x9bc>
    c72c:	ldrb	w0, [x2, #80]
    c730:	tbnz	w0, #4, cdb0 <re_search_internal+0x1038>
    c734:	sub	x3, x3, #0x1
    c738:	cmn	w3, #0x1
    c73c:	b.ne	c720 <re_search_internal+0x9a8>  // b.any
    c740:	mov	x0, x25
    c744:	bl	0 <grub_free>
    c748:	mov	x0, x26
    c74c:	bl	0 <grub_free>
    c750:	add	x0, sp, #0x1c0
    c754:	bl	23d8 <match_ctx_clean>
    c758:	ldr	w19, [sp, #336]
    c75c:	ldr	w0, [sp, #220]
    c760:	add	w19, w19, w0
    c764:	ldr	w0, [sp, #216]
    c768:	str	w19, [sp, #336]
    c76c:	cmp	w19, w0
    c770:	ldr	w0, [sp, #176]
    c774:	ccmp	w19, w0, #0x0, ge  // ge = tcont
    c778:	b.le	c0e8 <re_search_internal+0x370>
    c77c:	nop
    c780:	mov	w0, #0x1                   	// #1
    c784:	str	w0, [sp, #148]
    c788:	ldr	x0, [sp, #584]
    c78c:	ldr	x28, [sp, #200]
    c790:	ldp	x23, x24, [sp, #48]
    c794:	bl	0 <grub_free>
    c798:	ldr	w0, [x28, #140]
    c79c:	cbz	w0, c8e8 <re_search_internal+0xb70>
    c7a0:	add	x0, sp, #0x1c0
    c7a4:	bl	23d8 <match_ctx_clean>
    c7a8:	ldr	x0, [sp, #632]
    c7ac:	bl	0 <grub_free>
    c7b0:	ldr	x0, [sp, #608]
    c7b4:	bl	0 <grub_free>
    c7b8:	b	c8e8 <re_search_internal+0xb70>
    c7bc:	add	x1, sp, #0x1c0
    c7c0:	add	x0, sp, #0x154
    c7c4:	mov	x2, #0x0                   	// #0
    c7c8:	str	w5, [sp, #504]
    c7cc:	bl	b190 <merge_state_with_log>
    c7d0:	ldr	w1, [sp, #340]
    c7d4:	cbnz	w1, c7e4 <re_search_internal+0xa6c>
    c7d8:	cbnz	x0, d468 <re_search_internal+0x16f0>
    c7dc:	ldr	x1, [sp, #584]
    c7e0:	b	c5a0 <re_search_internal+0x828>
    c7e4:	mov	x10, x0
    c7e8:	cbnz	x0, c350 <re_search_internal+0x5d8>
    c7ec:	nop
    c7f0:	ldr	w27, [sp, #128]
    c7f4:	b	c5e8 <re_search_internal+0x870>
    c7f8:	ldr	w1, [x10, #12]
    c7fc:	mov	w3, w11
    c800:	add	x2, x10, #0x10
    c804:	add	x0, sp, #0x1c0
    c808:	bl	2bd8 <check_halt_state_context.isra.0>
    c80c:	cbz	w0, c390 <re_search_internal+0x618>
    c810:	b	c378 <re_search_internal+0x600>
    c814:	tbz	w2, #3, c440 <re_search_internal+0x6c8>
    c818:	tbz	w0, #0, c440 <re_search_internal+0x6c8>
    c81c:	b	c51c <re_search_internal+0x7a4>
    c820:	ldp	x4, x5, [x0]
    c824:	add	x0, sp, #0x200
    c828:	ldr	w2, [sp, #568]
    c82c:	sub	w1, w26, #0x1
    c830:	stp	x4, x5, [x0, #-104]
    c834:	add	x0, sp, #0x1c0
    c838:	bl	29d8 <re_string_context_at>
    c83c:	mov	w3, w0
    c840:	mov	x1, x20
    c844:	add	x2, sp, #0x198
    c848:	add	x0, sp, #0x178
    c84c:	bl	3768 <re_acquire_state_context>
    c850:	ldr	x1, [sp, #584]
    c854:	str	x0, [x28, x23, lsl #3]
    c858:	ldr	x0, [x1, x23, lsl #3]
    c85c:	cbnz	x0, c514 <re_search_internal+0x79c>
    c860:	ldr	w0, [sp, #376]
    c864:	cbz	w0, c514 <re_search_internal+0x79c>
    c868:	b	c880 <re_search_internal+0xb08>
    c86c:	ldr	w1, [sp, #512]
    c870:	cmp	w0, w1
    c874:	b.ge	c304 <re_search_internal+0x58c>  // b.tcont
    c878:	b	c3bc <re_search_internal+0x644>
    c87c:	ldr	x1, [sp, #584]
    c880:	str	w0, [sp, #340]
    c884:	cbz	x1, c8c8 <re_search_internal+0xb50>
    c888:	mov	x10, #0x0                   	// #0
    c88c:	b	c338 <re_search_internal+0x5c0>
    c890:	mov	x23, x22
    c894:	mov	x24, x19
    c898:	ldr	w27, [sp, #324]
    c89c:	mov	w22, w21
    c8a0:	ldr	w19, [sp, #328]
    c8a4:	str	xzr, [x23]
    c8a8:	cbnz	w21, d480 <re_search_internal+0x1708>
    c8ac:	nop
    c8b0:	ldr	x0, [sp, #232]
    c8b4:	bl	0 <grub_free>
    c8b8:	ldr	x0, [sp, #584]
    c8bc:	mov	w1, #0xc                   	// #12
    c8c0:	str	w1, [sp, #340]
    c8c4:	cbnz	x0, c888 <re_search_internal+0xb10>
    c8c8:	ldr	x28, [sp, #200]
    c8cc:	mov	x0, #0x0                   	// #0
    c8d0:	ldp	x23, x24, [sp, #48]
    c8d4:	mov	w1, #0xc                   	// #12
    c8d8:	str	w1, [sp, #148]
    c8dc:	bl	0 <grub_free>
    c8e0:	ldr	w0, [x28, #140]
    c8e4:	cbnz	w0, c7a0 <re_search_internal+0xa28>
    c8e8:	add	x0, sp, #0x1c0
    c8ec:	bl	2220 <re_string_destruct>
    c8f0:	ldr	w0, [sp, #148]
    c8f4:	ldp	x29, x30, [sp]
    c8f8:	ldp	x19, x20, [sp, #16]
    c8fc:	ldp	x21, x22, [sp, #32]
    c900:	ldp	x25, x26, [sp, #64]
    c904:	ldp	x27, x28, [sp, #80]
    c908:	add	sp, sp, #0x280
    c90c:	ret
    c910:	mov	w0, #0x1                   	// #1
    c914:	str	w0, [sp, #148]
    c918:	ldp	x29, x30, [sp]
    c91c:	ldr	w0, [sp, #148]
    c920:	ldp	x19, x20, [sp, #16]
    c924:	ldp	x21, x22, [sp, #32]
    c928:	ldp	x25, x26, [sp, #64]
    c92c:	ldp	x27, x28, [sp, #80]
    c930:	add	sp, sp, #0x280
    c934:	ret
    c938:	mov	w4, w20
    c93c:	ldr	x10, [x5, x4, lsl #3]
    c940:	b	c330 <re_search_internal+0x5b8>
    c944:	ldr	x28, [sp, #200]
    c948:	ldr	w0, [x28, #140]
    c94c:	cbz	w0, ca34 <re_search_internal+0xcbc>
    c950:	ldr	x10, [sp, #584]
    c954:	mov	w3, w27
    c958:	add	x0, sp, #0x1c0
    c95c:	ldr	x1, [x10, w27, sxtw #3]
    c960:	add	x2, x1, #0x10
    c964:	ldr	w1, [x1, #12]
    c968:	bl	2bd8 <check_halt_state_context.isra.0>
    c96c:	str	w0, [sp, #576]
    c970:	b	c668 <re_search_internal+0x8f0>
    c974:	mov	w3, w21
    c978:	mov	x2, x26
    c97c:	mov	x1, x25
    c980:	mov	x0, x23
    c984:	bl	3cb0 <merge_state_array>
    c988:	mov	w19, w0
    c98c:	mov	x0, x26
    c990:	bl	0 <grub_free>
    c994:	cbz	w19, ca0c <re_search_internal+0xc94>
    c998:	mov	x26, #0x0                   	// #0
    c99c:	mov	x0, x25
    c9a0:	bl	0 <grub_free>
    c9a4:	mov	x0, x26
    c9a8:	bl	0 <grub_free>
    c9ac:	cmp	w19, #0x1
    c9b0:	b.eq	c750 <re_search_internal+0x9d8>  // b.none
    c9b4:	str	w19, [sp, #148]
    c9b8:	ldp	x23, x24, [sp, #48]
    c9bc:	ldr	x28, [sp, #200]
    c9c0:	ldr	x0, [sp, #584]
    c9c4:	b	c8dc <re_search_internal+0xb64>
    c9c8:	mov	x2, #0x10                  	// #16
    c9cc:	mov	w1, #0x0                   	// #0
    c9d0:	add	x22, sp, #0x198
    c9d4:	add	x0, sp, #0x1b0
    c9d8:	stp	x25, xzr, [sp, #408]
    c9dc:	str	w20, [sp, #424]
    c9e0:	str	w27, [sp, #428]
    c9e4:	bl	0 <grub_memset>
    c9e8:	mov	x1, x22
    c9ec:	add	x0, sp, #0x1c0
    c9f0:	bl	5110 <sift_states_backward>
    c9f4:	mov	w19, w0
    c9f8:	ldr	x0, [sp, #440]
    c9fc:	bl	0 <grub_free>
    ca00:	cbnz	w19, c998 <re_search_internal+0xc20>
    ca04:	ldr	x0, [x25]
    ca08:	cbz	x0, d558 <re_search_internal+0x17e0>
    ca0c:	ldr	x0, [sp, #584]
    ca10:	ldr	x28, [sp, #200]
    ca14:	bl	0 <grub_free>
    ca18:	str	w27, [sp, #572]
    ca1c:	mov	x0, #0x0                   	// #0
    ca20:	str	w20, [sp, #576]
    ca24:	str	x25, [sp, #584]
    ca28:	bl	0 <grub_free>
    ca2c:	mov	x0, #0x0                   	// #0
    ca30:	bl	0 <grub_free>
    ca34:	ldr	x0, [sp, #152]
    ca38:	cbz	x0, cd68 <re_search_internal+0xff0>
    ca3c:	ldr	x0, [sp, #152]
    ca40:	mov	w1, #0xffffffff            	// #-1
    ca44:	cmp	x0, #0x1
    ca48:	lsl	x19, x0, #3
    ca4c:	ldr	x0, [sp, #264]
    ca50:	add	x2, x0, x19
    ca54:	add	x0, x0, #0x8
    ca58:	b.ls	de70 <re_search_internal+0x20f8>  // b.plast
    ca5c:	nop
    ca60:	str	w1, [x0, #4]
    ca64:	str	w1, [x0], #8
    ca68:	cmp	x2, x0
    ca6c:	b.ne	ca60 <re_search_internal+0xce8>  // b.any
    ca70:	ldr	x0, [sp, #136]
    ca74:	ldr	x2, [sp, #264]
    ca78:	ldrb	w0, [x0, #56]
    ca7c:	ldr	w1, [sp, #572]
    ca80:	stp	wzr, w1, [x2]
    ca84:	mov	w2, #0x0                   	// #0
    ca88:	tst	x0, #0x10
    ca8c:	ldr	x0, [sp, #152]
    ca90:	ccmp	x0, #0x1, #0x4, eq  // eq = none
    ca94:	b.ne	d8fc <re_search_internal+0x1b84>  // b.any
    ca98:	ldr	x1, [sp, #264]
    ca9c:	ldrb	w5, [sp, #548]
    caa0:	ldr	w4, [sp, #336]
    caa4:	add	x0, x1, x19
    caa8:	ldr	w6, [sp, #492]
    caac:	ldr	w7, [sp, #496]
    cab0:	ldr	x8, [sp, #472]
    cab4:	b	cabc <re_search_internal+0xd44>
    cab8:	ldr	w2, [x1]
    cabc:	cmn	w2, #0x1
    cac0:	b.eq	cad8 <re_search_internal+0xd60>  // b.none
    cac4:	ldr	w3, [x1, #4]
    cac8:	cbnz	w5, d8dc <re_search_internal+0x1b64>
    cacc:	add	w2, w4, w2
    cad0:	add	w3, w4, w3
    cad4:	stp	w2, w3, [x1]
    cad8:	add	x1, x1, #0x8
    cadc:	cmp	x0, x1
    cae0:	b.ne	cab8 <re_search_internal+0xd40>  // b.any
    cae4:	ldr	w1, [sp, #240]
    cae8:	cmp	w1, #0x0
    caec:	b.le	cb20 <re_search_internal+0xda8>
    caf0:	ldr	w1, [sp, #240]
    caf4:	sub	w2, w1, #0x1
    caf8:	ldr	x1, [sp, #264]
    cafc:	add	x3, x1, #0x8
    cb00:	ldr	x1, [sp, #152]
    cb04:	add	x2, x2, x1
    cb08:	mov	w1, #0xffffffff            	// #-1
    cb0c:	add	x2, x3, x2, lsl #3
    cb10:	stp	w1, w1, [x0]
    cb14:	add	x0, x0, #0x8
    cb18:	cmp	x2, x0
    cb1c:	b.ne	cb10 <re_search_internal+0xd98>  // b.any
    cb20:	ldr	x4, [x28, #208]
    cb24:	ldr	x0, [sp, #584]
    cb28:	cbz	x4, cb80 <re_search_internal+0xe08>
    cb2c:	ldr	x1, [sp, #152]
    cb30:	cmp	x1, #0x1
    cb34:	b.ls	cb80 <re_search_internal+0xe08>  // b.plast
    cb38:	ldr	x6, [sp, #264]
    cb3c:	sub	x5, x1, #0x1
    cb40:	mov	x1, #0x0                   	// #0
    cb44:	add	x3, x6, #0x8
    cb48:	ldr	w2, [x4, x1, lsl #2]
    cb4c:	cmp	w2, w1
    cb50:	b.eq	cb70 <re_search_internal+0xdf8>  // b.none
    cb54:	add	x2, x6, w2, sxtw #3
    cb58:	ldr	w2, [x2, #8]
    cb5c:	str	w2, [x3]
    cb60:	ldrsw	x2, [x4, x1, lsl #2]
    cb64:	add	x2, x6, x2, lsl #3
    cb68:	ldr	w2, [x2, #12]
    cb6c:	str	w2, [x3, #4]
    cb70:	add	x1, x1, #0x1
    cb74:	add	x3, x3, #0x8
    cb78:	cmp	x5, x1
    cb7c:	b.ne	cb48 <re_search_internal+0xdd0>  // b.any
    cb80:	ldp	x23, x24, [sp, #48]
    cb84:	b	c8dc <re_search_internal+0xb64>
    cb88:	ldr	w0, [sp, #320]
    cb8c:	mov	w10, w0
    cb90:	ldrb	w0, [x24, #80]
    cb94:	b	c2bc <re_search_internal+0x544>
    cb98:	ldr	w0, [sp, #216]
    cb9c:	cmp	w0, w19
    cba0:	b.gt	c780 <re_search_internal+0xa08>
    cba4:	ldr	w7, [sp, #180]
    cba8:	sxtw	x1, w19
    cbac:	ldr	w6, [sp, #216]
    cbb0:	mov	w0, #0x0                   	// #0
    cbb4:	ldr	x8, [sp, #192]
    cbb8:	ldr	x28, [sp, #208]
    cbbc:	ldr	x5, [sp, #224]
    cbc0:	b	cbcc <re_search_internal+0xe54>
    cbc4:	mov	w0, #0x1                   	// #1
    cbc8:	b.gt	cdcc <re_search_internal+0x1054>
    cbcc:	cmp	w7, w1
    cbd0:	mov	w3, w1
    cbd4:	mov	w4, w1
    cbd8:	mov	x2, #0x0                   	// #0
    cbdc:	b.le	cbe4 <re_search_internal+0xe6c>
    cbe0:	ldrb	w2, [x8, x1]
    cbe4:	sub	x1, x1, #0x1
    cbe8:	cbz	x5, cbf0 <re_search_internal+0xe78>
    cbec:	ldrb	w2, [x5, x2]
    cbf0:	ldrb	w2, [x28, x2]
    cbf4:	cmp	w6, w1
    cbf8:	sub	w3, w3, #0x1
    cbfc:	cbz	w2, cbc4 <re_search_internal+0xe4c>
    cc00:	cbz	w0, c204 <re_search_internal+0x48c>
    cc04:	mov	w19, w4
    cc08:	str	w4, [sp, #336]
    cc0c:	b	c204 <re_search_internal+0x48c>
    cc10:	ldr	w0, [sp, #176]
    cc14:	mov	w3, #0x0                   	// #0
    cc18:	cmp	w0, w19
    cc1c:	sxtw	x0, w19
    cc20:	b.le	c1f8 <re_search_internal+0x480>
    cc24:	ldr	w6, [sp, #176]
    cc28:	ldr	x5, [sp, #192]
    cc2c:	ldr	x28, [sp, #208]
    cc30:	ldr	x4, [sp, #224]
    cc34:	nop
    cc38:	add	w2, w0, #0x1
    cc3c:	ldrb	w1, [x5, x0]
    cc40:	ldrb	w1, [x4, x1]
    cc44:	ldrb	w1, [x28, x1]
    cc48:	cbnz	w1, d458 <re_search_internal+0x16e0>
    cc4c:	add	x0, x0, #0x1
    cc50:	mov	w3, #0x1                   	// #1
    cc54:	cmp	w6, w0
    cc58:	b.gt	cc38 <re_search_internal+0xec0>
    cc5c:	mov	w19, w2
    cc60:	str	w2, [sp, #336]
    cc64:	b	c1f8 <re_search_internal+0x480>
    cc68:	mov	w0, #0x14                  	// #20
    cc6c:	smull	x0, w21, w0
    cc70:	bl	0 <grub_malloc>
    cc74:	mov	x1, x0
    cc78:	sbfiz	x0, x21, #3, #32
    cc7c:	str	x1, [sp, #608]
    cc80:	bl	0 <grub_malloc>
    cc84:	str	x0, [sp, #632]
    cc88:	ldr	x1, [sp, #608]
    cc8c:	cmp	x1, #0x0
    cc90:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    cc94:	b.ne	bfc8 <re_search_internal+0x250>  // b.any
    cc98:	mov	w0, #0xc                   	// #12
    cc9c:	str	w0, [sp, #148]
    cca0:	ldr	x0, [sp, #584]
    cca4:	b	c8dc <re_search_internal+0xb64>
    cca8:	ldr	x0, [sp, #200]
    ccac:	ldr	w0, [x0, #140]
    ccb0:	cbnz	w0, c950 <re_search_internal+0xbd8>
    ccb4:	ldr	x28, [sp, #200]
    ccb8:	b	ca34 <re_search_internal+0xcbc>
    ccbc:	ldr	w0, [sp, #380]
    ccc0:	mov	w2, w28
    ccc4:	ldr	x1, [sp, #128]
    ccc8:	bl	2548 <re_node_set_contains.isra.0>
    cccc:	cbnz	w0, dd74 <re_search_internal+0x1ffc>
    ccd0:	cbz	x20, da4c <re_search_internal+0x1cd4>
    ccd4:	ldp	w23, w0, [x20]
    ccd8:	ldr	w5, [sp, #344]
    ccdc:	add	w1, w23, #0x1
    cce0:	str	w1, [x20]
    cce4:	cmp	w1, w0
    cce8:	b.eq	de84 <re_search_internal+0x210c>  // b.none
    ccec:	ldr	x1, [x20, #8]
    ccf0:	sbfiz	x23, x23, #5, #32
    ccf4:	ldr	x0, [sp, #120]
    ccf8:	add	x27, x1, x23
    ccfc:	str	w5, [x1, x23]
    cd00:	str	w25, [x27, #4]
    cd04:	bl	0 <grub_malloc>
    cd08:	ldr	x1, [x20, #8]
    cd0c:	str	x0, [x27, #8]
    cd10:	add	x1, x1, x23
    cd14:	ldr	x0, [x1, #8]
    cd18:	cbz	x0, cd40 <re_search_internal+0xfc8>
    cd1c:	ldr	x2, [sp, #120]
    cd20:	mov	x1, x21
    cd24:	bl	0 <grub_memmove>
    cd28:	ldr	x0, [x20, #8]
    cd2c:	mov	x1, x24
    cd30:	add	x0, x0, x23
    cd34:	add	x0, x0, #0x10
    cd38:	bl	3528 <re_node_set_init_copy>
    cd3c:	cbz	w0, da4c <re_search_internal+0x1cd4>
    cd40:	ldp	x23, x28, [sp, #104]
    cd44:	ldr	x0, [sp, #384]
    cd48:	bl	0 <grub_free>
    cd4c:	mov	x0, x23
    cd50:	bl	0 <grub_free>
    cd54:	mov	x0, x20
    cd58:	mov	w1, #0xc                   	// #12
    cd5c:	str	w1, [sp, #148]
    cd60:	bl	46e0 <free_fail_stack_return.part.0>
    cd64:	nop
    cd68:	ldp	x23, x24, [sp, #48]
    cd6c:	ldr	x0, [sp, #584]
    cd70:	b	c8dc <re_search_internal+0xb64>
    cd74:	ldrb	w0, [x28, #160]
    cd78:	tbnz	w0, #1, bfe4 <re_search_internal+0x26c>
    cd7c:	str	xzr, [sp, #584]
    cd80:	b	c008 <re_search_internal+0x290>
    cd84:	ldr	x24, [x19, #80]
    cd88:	cbnz	x24, c298 <re_search_internal+0x520>
    cd8c:	ldr	w0, [sp, #340]
    cd90:	str	w0, [sp, #148]
    cd94:	cmp	w0, #0xc
    cd98:	ldr	x28, [sp, #200]
    cd9c:	b.eq	cd68 <re_search_internal+0xff0>  // b.none
    cda0:	adrp	x1, 0 <grub_cmd_regexp>
    cda4:	adrp	x0, 0 <grub_cmd_regexp>
    cda8:	mov	w2, #0x435                 	// #1077
    cdac:	b	d600 <re_search_internal+0x1888>
    cdb0:	ldr	w1, [x2, #12]
    cdb4:	add	x0, sp, #0x1c0
    cdb8:	add	w21, w3, #0x1
    cdbc:	add	x2, x2, #0x10
    cdc0:	bl	2bd8 <check_halt_state_context.isra.0>
    cdc4:	mov	w20, w0
    cdc8:	b	c6b4 <re_search_internal+0x93c>
    cdcc:	str	w0, [sp, #148]
    cdd0:	str	w3, [sp, #336]
    cdd4:	ldp	x23, x24, [sp, #48]
    cdd8:	ldr	x28, [sp, #200]
    cddc:	ldr	x0, [sp, #584]
    cde0:	b	c8dc <re_search_internal+0xb64>
    cde4:	ldp	x23, x24, [sp, #48]
    cde8:	ldr	x28, [sp, #200]
    cdec:	ldr	x0, [sp, #584]
    cdf0:	b	c8dc <re_search_internal+0xb64>
    cdf4:	mov	x0, #0x3000                	// #12288
    cdf8:	ldr	x28, [sp, #560]
    cdfc:	bl	0 <grub_malloc>
    ce00:	str	x0, [sp, #232]
    ce04:	mov	x22, x0
    ce08:	cbz	x0, d86c <re_search_internal+0x1af4>
    ce0c:	stp	xzr, xzr, [x21, #64]
    ce10:	add	x25, sp, #0x158
    ce14:	mov	x2, #0x20                  	// #32
    ce18:	mov	x0, x25
    ce1c:	mov	w1, #0x0                   	// #0
    ce20:	bl	0 <grub_memset>
    ce24:	ldr	w2, [x21, #12]
    ce28:	add	x0, x22, #0x1, lsl #12
    ce2c:	str	x0, [sp, #248]
    ce30:	cmp	w2, #0x0
    ce34:	b.le	dd9c <re_search_internal+0x2024>
    ce38:	mov	w22, #0x0                   	// #0
    ce3c:	str	w19, [sp, #328]
    ce40:	mov	x19, x21
    ce44:	mov	w21, w22
    ce48:	str	xzr, [sp, #272]
    ce4c:	str	x28, [sp, #288]
    ce50:	str	w27, [sp, #324]
    ce54:	str	w20, [sp, #332]
    ce58:	ldr	x3, [sp, #272]
    ce5c:	ldr	x0, [x19, #16]
    ce60:	lsl	x1, x3, #2
    ce64:	str	x1, [sp, #280]
    ce68:	ldr	x1, [sp, #288]
    ce6c:	ldrsw	x0, [x0, x3, lsl #2]
    ce70:	ldr	x1, [x1]
    ce74:	lsl	x0, x0, #4
    ce78:	add	x20, x1, x0
    ce7c:	ldr	w22, [x20, #8]
    ce80:	ldrb	w26, [x20, #8]
    ce84:	ubfx	x22, x22, #8, #10
    ce88:	cmp	w26, #0x1
    ce8c:	b.eq	d110 <re_search_internal+0x1398>  // b.none
    ce90:	cmp	w26, #0x3
    ce94:	b.eq	d7ec <re_search_internal+0x1a74>  // b.none
    ce98:	cmp	w26, #0x5
    ce9c:	b.eq	d4b0 <re_search_internal+0x1738>  // b.none
    cea0:	cmp	w26, #0x7
    cea4:	b.eq	d7cc <re_search_internal+0x1a54>  // b.none
    cea8:	ldr	x0, [sp, #272]
    ceac:	add	x0, x0, #0x1
    ceb0:	str	x0, [sp, #272]
    ceb4:	cmp	w2, w0
    ceb8:	b.gt	ce58 <re_search_internal+0x10e0>
    cebc:	mov	w22, w21
    cec0:	ldr	w27, [sp, #324]
    cec4:	mov	x21, x19
    cec8:	ldr	w20, [sp, #332]
    cecc:	ldr	w19, [sp, #328]
    ced0:	cmp	w22, #0x0
    ced4:	ldr	x28, [sp, #288]
    ced8:	b.le	dfa0 <re_search_internal+0x2228>
    cedc:	add	w0, w22, #0x1
    cee0:	str	w0, [sp, #376]
    cee4:	str	wzr, [sp, #380]
    cee8:	sbfiz	x0, x0, #2, #32
    ceec:	bl	0 <grub_malloc>
    cef0:	str	x0, [sp, #384]
    cef4:	cbz	x0, de54 <re_search_internal+0x20dc>
    cef8:	add	w0, w22, w22, lsl #1
    cefc:	str	wzr, [sp, #344]
    cf00:	sbfiz	x0, x0, #3, #32
    cf04:	bl	0 <grub_malloc>
    cf08:	str	x0, [sp, #272]
    cf0c:	cbz	x0, d884 <re_search_internal+0x1b0c>
    cf10:	ldr	x0, [sp, #232]
    cf14:	mov	x2, #0x20                  	// #32
    cf18:	ldr	x1, [sp, #272]
    cf1c:	add	x26, x0, #0x4
    cf20:	add	x24, x0, #0xff8
    cf24:	sbfiz	x0, x22, #3, #32
    cf28:	add	x1, x1, x0
    cf2c:	str	wzr, [sp, #296]
    cf30:	add	x0, x1, x0
    cf34:	stp	x1, x0, [sp, #280]
    cf38:	add	x0, sp, #0x198
    cf3c:	mov	w1, #0x0                   	// #0
    cf40:	bl	0 <grub_memset>
    cf44:	str	w20, [sp, #304]
    cf48:	mov	x20, x26
    cf4c:	mov	x26, x28
    cf50:	mov	x23, #0x0                   	// #0
    cf54:	str	wzr, [sp, #380]
    cf58:	mov	x28, #0x0                   	// #0
    cf5c:	ldr	w3, [x20]
    cf60:	cmp	w3, #0x0
    cf64:	b.le	cfa8 <re_search_internal+0x1230>
    cf68:	ldur	x2, [x20, #4]
    cf6c:	add	x0, sp, #0x178
    cf70:	ldr	x1, [x26, #24]
    cf74:	ldrsw	x2, [x2, x28, lsl #2]
    cf78:	ldr	w1, [x1, x2, lsl #2]
    cf7c:	cmn	w1, #0x1
    cf80:	b.eq	cf9c <re_search_internal+0x1224>  // b.none
    cf84:	ldr	x2, [x26, #48]
    cf88:	add	x1, x2, w1, sxtw #4
    cf8c:	bl	3218 <re_node_set_merge>
    cf90:	str	w0, [sp, #344]
    cf94:	cbnz	w0, d750 <re_search_internal+0x19d8>
    cf98:	ldr	w3, [x20]
    cf9c:	add	x28, x28, #0x1
    cfa0:	cmp	w3, w28
    cfa4:	b.gt	cf68 <re_search_internal+0x11f0>
    cfa8:	mov	x1, x26
    cfac:	add	x2, sp, #0x178
    cfb0:	mov	x0, x25
    cfb4:	mov	w3, #0x0                   	// #0
    cfb8:	bl	3768 <re_acquire_state_context>
    cfbc:	ldr	x1, [sp, #272]
    cfc0:	str	x0, [x1, x23, lsl #3]
    cfc4:	cbz	x0, d8d0 <re_search_internal+0x1b58>
    cfc8:	ldrsb	w1, [x0, #80]
    cfcc:	tbnz	w1, #31, d6e4 <re_search_internal+0x196c>
    cfd0:	ldr	x1, [sp, #280]
    cfd4:	str	x0, [x1, x23, lsl #3]
    cfd8:	ldr	x0, [sp, #272]
    cfdc:	ldr	x1, [sp, #288]
    cfe0:	ldr	x0, [x0, x23, lsl #3]
    cfe4:	str	x0, [x1, x23, lsl #3]
    cfe8:	add	x2, sp, #0x198
    cfec:	mov	x0, #0x1                   	// #1
    cff0:	ldr	x3, [x24, x0, lsl #3]
    cff4:	add	x0, x0, #0x1
    cff8:	ldr	x1, [x2]
    cffc:	cmp	x0, #0x5
    d000:	orr	x1, x1, x3
    d004:	str	x1, [x2], #8
    d008:	b.ne	cff0 <re_search_internal+0x1278>  // b.any
    d00c:	add	x23, x23, #0x1
    d010:	add	x20, x20, #0x10
    d014:	cmp	w22, w23
    d018:	add	x24, x24, #0x20
    d01c:	b.gt	cf54 <re_search_internal+0x11dc>
    d020:	ldr	w0, [sp, #296]
    d024:	ldr	w20, [sp, #304]
    d028:	cbnz	w0, def0 <re_search_internal+0x2178>
    d02c:	mov	x0, #0x800                 	// #2048
    d030:	bl	0 <grub_zalloc>
    d034:	str	x0, [x21, #64]
    d038:	mov	x9, x0
    d03c:	cbz	x0, d750 <re_search_internal+0x19d8>
    d040:	ldp	x8, x14, [sp, #272]
    d044:	sub	x6, x26, #0xf58
    d048:	ldr	x5, [sp, #248]
    d04c:	sub	x13, sp, #0xe68
    d050:	sub	x12, x0, #0x40, lsl #12
    d054:	mov	x10, #0x1000                	// #4096
    d058:	mov	x11, #0x1020                	// #4128
    d05c:	ldr	x0, [x13, x10]
    d060:	add	x4, x12, x10, lsl #6
    d064:	mov	x3, #0x1                   	// #1
    d068:	cbz	x0, d084 <re_search_internal+0x130c>
    d06c:	nop
    d070:	tbnz	w0, #0, d890 <re_search_internal+0x1b18>
    d074:	lsl	x3, x3, #1
    d078:	lsr	x0, x0, #1
    d07c:	add	x4, x4, #0x8
    d080:	cbnz	x0, d070 <re_search_internal+0x12f8>
    d084:	add	x10, x10, #0x8
    d088:	add	x5, x5, #0x8
    d08c:	cmp	x10, x11
    d090:	b.ne	d05c <re_search_internal+0x12e4>  // b.any
    d094:	ldr	x0, [sp, #408]
    d098:	tst	w0, #0x400
    d09c:	b.eq	d0c4 <re_search_internal+0x134c>  // b.none
    d0a0:	ldr	x2, [sp, #248]
    d0a4:	mov	x0, #0x0                   	// #0
    d0a8:	lsl	x1, x0, #5
    d0ac:	ldr	x1, [x2, x1]
    d0b0:	tst	w1, #0x400
    d0b4:	b.ne	dec8 <re_search_internal+0x2150>  // b.any
    d0b8:	add	x0, x0, #0x1
    d0bc:	cmp	w22, w0
    d0c0:	b.gt	d0a8 <re_search_internal+0x1330>
    d0c4:	ldr	x0, [sp, #272]
    d0c8:	sub	w22, w22, #0x1
    d0cc:	bl	0 <grub_free>
    d0d0:	ldr	x0, [sp, #384]
    d0d4:	ldr	x24, [sp, #232]
    d0d8:	bl	0 <grub_free>
    d0dc:	add	x0, x24, #0x18
    d0e0:	add	x23, x24, #0x8
    d0e4:	add	x22, x0, w22, uxtw #4
    d0e8:	ldr	x0, [x23], #16
    d0ec:	bl	0 <grub_free>
    d0f0:	cmp	x22, x23
    d0f4:	b.ne	d0e8 <re_search_internal+0x1370>  // b.any
    d0f8:	ldr	x0, [sp, #232]
    d0fc:	bl	0 <grub_free>
    d100:	ldr	x0, [x21, #64]
    d104:	cbz	x0, c548 <re_search_internal+0x7d0>
    d108:	mov	x24, x21
    d10c:	b	c328 <re_search_internal+0x5b0>
    d110:	ldrb	w1, [x1, x0]
    d114:	mov	x0, #0x1                   	// #1
    d118:	ubfx	x2, x1, #6, #2
    d11c:	lsl	x1, x0, x1
    d120:	ldr	x0, [x25, x2, lsl #3]
    d124:	orr	x0, x0, x1
    d128:	str	x0, [x25, x2, lsl #3]
    d12c:	cbz	w22, d224 <re_search_internal+0x14ac>
    d130:	tbnz	w22, #5, d1f8 <re_search_internal+0x1480>
    d134:	tbnz	w22, #7, d628 <re_search_internal+0x18b0>
    d138:	tbz	w22, #2, d194 <re_search_internal+0x141c>
    d13c:	cmp	w26, #0x1
    d140:	b.eq	d678 <re_search_internal+0x1900>  // b.none
    d144:	ldr	x1, [sp, #288]
    d148:	ldr	w0, [x1, #164]
    d14c:	cmp	w0, #0x1
    d150:	b.le	d640 <re_search_internal+0x18c8>
    d154:	mov	x3, x25
    d158:	add	x4, x1, #0xa8
    d15c:	mov	x2, #0x0                   	// #0
    d160:	ldr	x11, [x1, #120]
    d164:	mov	x1, #0x0                   	// #0
    d168:	ldr	x0, [x11, x1, lsl #3]
    d16c:	ldr	x6, [x4, x1, lsl #3]
    d170:	add	x1, x1, #0x1
    d174:	ldr	x5, [x3]
    d178:	orn	x0, x6, x0
    d17c:	cmp	x1, #0x4
    d180:	and	x0, x0, x5
    d184:	str	x0, [x3], #8
    d188:	orr	x2, x2, x0
    d18c:	b.ne	d168 <re_search_internal+0x13f0>  // b.any
    d190:	cbz	x2, d1f0 <re_search_internal+0x1478>
    d194:	tbz	w22, #3, d224 <re_search_internal+0x14ac>
    d198:	cmp	w26, #0x1
    d19c:	b.eq	d620 <re_search_internal+0x18a8>  // b.none
    d1a0:	ldr	x1, [sp, #288]
    d1a4:	ldr	w0, [x1, #164]
    d1a8:	cmp	w0, #0x1
    d1ac:	b.le	d5bc <re_search_internal+0x1844>
    d1b0:	mov	x3, x25
    d1b4:	add	x4, x1, #0xa8
    d1b8:	mov	x2, #0x0                   	// #0
    d1bc:	ldr	x11, [x1, #120]
    d1c0:	mov	x1, #0x0                   	// #0
    d1c4:	ldr	x0, [x4, x1, lsl #3]
    d1c8:	ldr	x6, [x11, x1, lsl #3]
    d1cc:	add	x1, x1, #0x1
    d1d0:	ldr	x5, [x3]
    d1d4:	and	x0, x0, x6
    d1d8:	cmp	x1, #0x4
    d1dc:	bic	x0, x5, x0
    d1e0:	str	x0, [x3], #8
    d1e4:	orr	x2, x2, x0
    d1e8:	b.ne	d1c4 <re_search_internal+0x144c>  // b.any
    d1ec:	cbnz	x2, d224 <re_search_internal+0x14ac>
    d1f0:	ldr	w2, [x19, #12]
    d1f4:	b	cea8 <re_search_internal+0x1130>
    d1f8:	ldr	x3, [sp, #344]
    d1fc:	mov	x0, x25
    d200:	mov	x2, #0x20                  	// #32
    d204:	mov	w1, #0x0                   	// #0
    d208:	ubfx	w23, w3, #10, #1
    d20c:	bl	0 <grub_memset>
    d210:	cbz	w23, d1f0 <re_search_internal+0x1478>
    d214:	ldr	x0, [sp, #344]
    d218:	orr	x0, x0, #0x400
    d21c:	str	x0, [sp, #344]
    d220:	b	d134 <re_search_internal+0x13bc>
    d224:	ldr	x0, [sp, #232]
    d228:	cmp	w21, #0x0
    d22c:	mov	w27, #0x0                   	// #0
    d230:	mov	x22, #0x0                   	// #0
    d234:	add	x23, x0, #0xff8
    d238:	b.le	d3a4 <re_search_internal+0x162c>
    d23c:	mov	w27, w21
    d240:	mov	w28, w26
    d244:	b	d278 <re_search_internal+0x1500>
    d248:	ldrb	w1, [x20]
    d24c:	ldr	x2, [sp, #248]
    d250:	add	x0, x2, x0
    d254:	ubfx	x2, x1, #6, #2
    d258:	ldr	x0, [x0, x2, lsl #3]
    d25c:	lsr	x0, x0, x1
    d260:	tbnz	w0, #0, d28c <re_search_internal+0x1514>
    d264:	add	x22, x22, #0x1
    d268:	add	w26, w21, #0x1
    d26c:	cmp	w27, w22
    d270:	add	x23, x23, #0x20
    d274:	b.le	d39c <re_search_internal+0x1624>
    d278:	cmp	w28, #0x1
    d27c:	mov	w21, w22
    d280:	mov	w26, w22
    d284:	lsl	x0, x22, #5
    d288:	b.eq	d248 <re_search_internal+0x14d0>  // b.none
    d28c:	add	x6, x23, #0x8
    d290:	mov	x0, #0x1                   	// #1
    d294:	mov	x3, #0x0                   	// #0
    d298:	lsl	x1, x0, #3
    d29c:	add	x2, sp, #0x178
    d2a0:	add	x5, x25, x1
    d2a4:	add	x2, x2, x1
    d2a8:	ldr	x4, [x23, x0, lsl #3]
    d2ac:	add	x0, x0, #0x1
    d2b0:	ldur	x1, [x5, #-8]
    d2b4:	cmp	x0, #0x5
    d2b8:	and	x1, x1, x4
    d2bc:	stur	x1, [x2, #-8]
    d2c0:	orr	x3, x3, x1
    d2c4:	b.ne	d298 <re_search_internal+0x1520>  // b.any
    d2c8:	cbz	x3, d264 <re_search_internal+0x14ec>
    d2cc:	mov	x2, x25
    d2d0:	mov	x1, #0x1                   	// #1
    d2d4:	mov	x24, #0x0                   	// #0
    d2d8:	mov	x8, #0x0                   	// #0
    d2dc:	add	x0, sp, #0x198
    d2e0:	add	x5, x0, x1, lsl #3
    d2e4:	ldr	x4, [x2]
    d2e8:	ldr	x0, [x23, x1, lsl #3]
    d2ec:	add	x1, x1, #0x1
    d2f0:	cmp	x1, #0x5
    d2f4:	bic	x3, x0, x4
    d2f8:	bic	x0, x4, x0
    d2fc:	stur	x3, [x5, #-8]
    d300:	orr	x8, x8, x3
    d304:	str	x0, [x2], #8
    d308:	orr	x24, x24, x0
    d30c:	b.ne	d2dc <re_search_internal+0x1564>  // b.any
    d310:	ldr	x0, [sp, #232]
    d314:	str	x6, [sp, #296]
    d318:	add	x3, x0, x22, lsl #4
    d31c:	cbz	x8, d37c <re_search_internal+0x1604>
    d320:	ldr	x1, [sp, #248]
    d324:	sbfiz	x0, x27, #5, #32
    d328:	mov	x2, #0x20                  	// #32
    d32c:	str	x3, [sp, #312]
    d330:	add	x0, x1, x0
    d334:	add	x1, sp, #0x198
    d338:	bl	0 <grub_memmove>
    d33c:	ldr	x6, [sp, #296]
    d340:	sxtw	x7, w27
    d344:	add	x1, sp, #0x178
    d348:	mov	x2, #0x20                  	// #32
    d34c:	mov	x0, x6
    d350:	str	x7, [sp, #304]
    d354:	bl	0 <grub_memmove>
    d358:	ldp	x7, x3, [sp, #304]
    d35c:	str	x3, [sp, #296]
    d360:	ldr	x0, [sp, #232]
    d364:	mov	x1, x3
    d368:	add	x0, x0, x7, lsl #4
    d36c:	bl	3528 <re_node_set_init_copy>
    d370:	cbnz	w0, d470 <re_search_internal+0x16f8>
    d374:	ldr	x3, [sp, #296]
    d378:	add	w27, w27, #0x1
    d37c:	ldr	x1, [x19, #16]
    d380:	mov	x0, x3
    d384:	ldr	x2, [sp, #280]
    d388:	ldr	w1, [x1, x2]
    d38c:	bl	19d0 <re_node_set_insert>
    d390:	tst	w0, #0xff
    d394:	b.eq	d470 <re_search_internal+0x16f8>  // b.none
    d398:	cbnz	x24, d264 <re_search_internal+0x14ec>
    d39c:	mov	w21, w27
    d3a0:	mov	w27, w26
    d3a4:	cmp	w27, w21
    d3a8:	b.ne	d1f0 <re_search_internal+0x1478>  // b.any
    d3ac:	ldr	x1, [sp, #248]
    d3b0:	sbfiz	x0, x21, #5, #32
    d3b4:	sxtw	x22, w21
    d3b8:	mov	x2, #0x20                  	// #32
    d3bc:	add	x0, x1, x0
    d3c0:	mov	x1, x25
    d3c4:	bl	0 <grub_memmove>
    d3c8:	ldr	x0, [x19, #16]
    d3cc:	lsl	x1, x22, #4
    d3d0:	ldr	x3, [sp, #232]
    d3d4:	mov	x2, #0x100000001           	// #4294967297
    d3d8:	ldr	x4, [sp, #280]
    d3dc:	add	x22, x3, x1
    d3e0:	ldr	w20, [x0, x4]
    d3e4:	mov	x0, #0x4                   	// #4
    d3e8:	str	x2, [x3, x1]
    d3ec:	bl	0 <grub_malloc>
    d3f0:	str	x0, [x22, #8]
    d3f4:	cbz	x0, c890 <re_search_internal+0xb18>
    d3f8:	str	w20, [x0]
    d3fc:	mov	x2, #0x20                  	// #32
    d400:	mov	x0, x25
    d404:	mov	w1, #0x0                   	// #0
    d408:	bl	0 <grub_memset>
    d40c:	add	w21, w21, #0x1
    d410:	ldr	w2, [x19, #12]
    d414:	b	cea8 <re_search_internal+0x1130>
    d418:	cmp	w0, #0xc
    d41c:	ldr	x28, [sp, #200]
    d420:	b.ne	d5f4 <re_search_internal+0x187c>  // b.any
    d424:	str	w0, [sp, #148]
    d428:	b	cd68 <re_search_internal+0xff0>
    d42c:	ldrsb	w0, [x24, #80]
    d430:	tbnz	w0, #31, d588 <re_search_internal+0x1810>
    d434:	ldr	w0, [sp, #112]
    d438:	str	w0, [sp, #120]
    d43c:	ldr	w27, [sp, #104]
    d440:	cbnz	w0, c2c8 <re_search_internal+0x550>
    d444:	b	c600 <re_search_internal+0x888>
    d448:	cbz	w3, c204 <re_search_internal+0x48c>
    d44c:	mov	w19, w0
    d450:	str	w0, [sp, #336]
    d454:	b	c1f8 <re_search_internal+0x480>
    d458:	cbz	w3, c204 <re_search_internal+0x48c>
    d45c:	mov	w19, w0
    d460:	str	w0, [sp, #336]
    d464:	b	c1f8 <re_search_internal+0x480>
    d468:	mov	x10, x0
    d46c:	b	c350 <re_search_internal+0x5d8>
    d470:	mov	w22, w27
    d474:	mov	x24, x19
    d478:	ldr	w27, [sp, #324]
    d47c:	ldr	w19, [sp, #328]
    d480:	ldr	x0, [sp, #232]
    d484:	mov	w20, #0x0                   	// #0
    d488:	add	x21, x0, #0x8
    d48c:	nop
    d490:	ldr	x0, [x21], #16
    d494:	add	w20, w20, #0x1
    d498:	bl	0 <grub_free>
    d49c:	cmp	w22, w20
    d4a0:	b.gt	d490 <re_search_internal+0x1718>
    d4a4:	b	c8b0 <re_search_internal+0xb38>
    d4a8:	mov	w27, w11
    d4ac:	b	c600 <re_search_internal+0x888>
    d4b0:	ldr	x1, [sp, #288]
    d4b4:	ldr	w0, [x1, #164]
    d4b8:	cmp	w0, #0x1
    d4bc:	b.le	d5a8 <re_search_internal+0x1830>
    d4c0:	ldr	x4, [x1, #120]
    d4c4:	mov	x2, x25
    d4c8:	mov	x0, #0x0                   	// #0
    d4cc:	ldr	x3, [x4, x0]
    d4d0:	add	x0, x0, #0x8
    d4d4:	ldr	x1, [x2]
    d4d8:	cmp	x0, #0x20
    d4dc:	orr	x1, x1, x3
    d4e0:	str	x1, [x2], #8
    d4e4:	b.ne	d4cc <re_search_internal+0x1754>  // b.any
    d4e8:	ldr	x0, [sp, #288]
    d4ec:	ldr	x0, [x0, #200]
    d4f0:	tbnz	w0, #6, d500 <re_search_internal+0x1788>
    d4f4:	ldr	x1, [sp, #344]
    d4f8:	and	x1, x1, #0xfffffffffffffbff
    d4fc:	str	x1, [sp, #344]
    d500:	tbz	w0, #7, d12c <re_search_internal+0x13b4>
    d504:	ldr	x0, [sp, #344]
    d508:	and	x0, x0, #0xfffffffffffffffe
    d50c:	str	x0, [sp, #344]
    d510:	b	d12c <re_search_internal+0x13b4>
    d514:	mov	w1, #0xc                   	// #12
    d518:	mov	x0, x10
    d51c:	str	w1, [sp, #148]
    d520:	ldp	x23, x24, [sp, #48]
    d524:	ldr	x28, [sp, #200]
    d528:	b	c8dc <re_search_internal+0xb64>
    d52c:	ldr	x24, [x19, #88]
    d530:	b	cd88 <re_search_internal+0x1010>
    d534:	ldr	x28, [sp, #200]
    d538:	bl	0 <grub_free>
    d53c:	mov	w0, #0xc                   	// #12
    d540:	str	w0, [sp, #148]
    d544:	mov	x0, #0x0                   	// #0
    d548:	bl	0 <grub_free>
    d54c:	ldp	x23, x24, [sp, #48]
    d550:	ldr	x0, [sp, #584]
    d554:	b	c8dc <re_search_internal+0xb64>
    d558:	mov	x0, x25
    d55c:	bl	0 <grub_free>
    d560:	mov	x0, #0x0                   	// #0
    d564:	bl	0 <grub_free>
    d568:	b	c750 <re_search_internal+0x9d8>
    d56c:	ldr	x2, [x24, #56]
    d570:	mov	w3, w0
    d574:	mov	x1, x19
    d578:	add	x0, sp, #0x154
    d57c:	bl	3768 <re_acquire_state_context>
    d580:	mov	x24, x0
    d584:	b	cd88 <re_search_internal+0x1010>
    d588:	ldr	w1, [x24, #12]
    d58c:	add	x2, x24, #0x10
    d590:	ldr	w3, [sp, #104]
    d594:	add	x0, sp, #0x1c0
    d598:	bl	2bd8 <check_halt_state_context.isra.0>
    d59c:	str	w0, [sp, #120]
    d5a0:	cbz	w0, c2c8 <re_search_internal+0x550>
    d5a4:	b	d434 <re_search_internal+0x16bc>
    d5a8:	mov	x0, x25
    d5ac:	mov	x2, #0x20                  	// #32
    d5b0:	mov	w1, #0xffffffff            	// #-1
    d5b4:	bl	0 <grub_memset>
    d5b8:	b	d4e8 <re_search_internal+0x1770>
    d5bc:	ldr	x0, [sp, #288]
    d5c0:	mov	x3, x25
    d5c4:	mov	x2, #0x0                   	// #0
    d5c8:	add	x1, x0, #0xa8
    d5cc:	add	x5, x0, #0xc8
    d5d0:	ldr	x0, [x1], #8
    d5d4:	ldr	x4, [x3]
    d5d8:	cmp	x5, x1
    d5dc:	bic	x0, x4, x0
    d5e0:	str	x0, [x3], #8
    d5e4:	orr	x2, x2, x0
    d5e8:	b.ne	d5d0 <re_search_internal+0x1858>  // b.any
    d5ec:	cbz	x2, d1f0 <re_search_internal+0x1478>
    d5f0:	b	d224 <re_search_internal+0x14ac>
    d5f4:	adrp	x1, 0 <grub_cmd_regexp>
    d5f8:	adrp	x0, 0 <grub_cmd_regexp>
    d5fc:	mov	w2, #0x46c                 	// #1132
    d600:	ldr	x1, [x1]
    d604:	mov	w3, #0xc                   	// #12
    d608:	ldr	x0, [x0]
    d60c:	str	w3, [sp, #148]
    d610:	bl	0 <grub_printf>
    d614:	ldp	x23, x24, [sp, #48]
    d618:	ldr	x0, [sp, #584]
    d61c:	b	c8dc <re_search_internal+0xb64>
    d620:	ldrb	w0, [x20, #10]
    d624:	tbz	w0, #6, d1a0 <re_search_internal+0x1428>
    d628:	mov	x2, #0x20                  	// #32
    d62c:	mov	x0, x25
    d630:	mov	w1, #0x0                   	// #0
    d634:	bl	0 <grub_memset>
    d638:	ldr	w2, [x19, #12]
    d63c:	b	cea8 <re_search_internal+0x1130>
    d640:	ldr	x0, [sp, #288]
    d644:	mov	x3, x25
    d648:	mov	x2, #0x0                   	// #0
    d64c:	add	x1, x0, #0xa8
    d650:	add	x5, x0, #0xc8
    d654:	ldr	x4, [x1], #8
    d658:	ldr	x0, [x3]
    d65c:	cmp	x5, x1
    d660:	and	x0, x0, x4
    d664:	str	x0, [x3], #8
    d668:	orr	x2, x2, x0
    d66c:	b.ne	d654 <re_search_internal+0x18dc>  // b.any
    d670:	cbnz	x2, d194 <re_search_internal+0x141c>
    d674:	b	d1f0 <re_search_internal+0x1478>
    d678:	ldrb	w0, [x20, #10]
    d67c:	tbnz	w0, #6, d144 <re_search_internal+0x13cc>
    d680:	b	d628 <re_search_internal+0x18b0>
    d684:	add	x19, x24, #0xc
    d688:	add	x20, x24, #0x10
    d68c:	mov	x1, x19
    d690:	mov	x2, x20
    d694:	add	x0, sp, #0x1c0
    d698:	mov	w3, #0x0                   	// #0
    d69c:	bl	30e0 <check_subexp_matching_top.isra.0>
    d6a0:	str	w0, [sp, #340]
    d6a4:	mov	w27, w0
    d6a8:	cbnz	w0, c600 <re_search_internal+0x888>
    d6ac:	ldrb	w0, [x24, #80]
    d6b0:	tbnz	w0, #6, d6bc <re_search_internal+0x1944>
    d6b4:	mov	w10, #0x0                   	// #0
    d6b8:	b	c2bc <re_search_internal+0x544>
    d6bc:	mov	x2, x20
    d6c0:	mov	x1, x19
    d6c4:	add	x0, sp, #0x1c0
    d6c8:	bl	aa60 <transit_state_bkref.isra.0>
    d6cc:	str	w0, [sp, #340]
    d6d0:	mov	w27, w0
    d6d4:	cbnz	w0, c600 <re_search_internal+0x888>
    d6d8:	ldrb	w0, [x24, #80]
    d6dc:	mov	w10, #0x0                   	// #0
    d6e0:	b	c2bc <re_search_internal+0x544>
    d6e4:	mov	x1, x26
    d6e8:	add	x2, sp, #0x178
    d6ec:	mov	x0, x25
    d6f0:	mov	w3, #0x1                   	// #1
    d6f4:	bl	3768 <re_acquire_state_context>
    d6f8:	ldr	x1, [sp, #280]
    d6fc:	str	x0, [x1, x23, lsl #3]
    d700:	cbz	x0, de64 <re_search_internal+0x20ec>
    d704:	ldr	x1, [sp, #272]
    d708:	ldr	x1, [x1, x23, lsl #3]
    d70c:	cmp	x0, x1
    d710:	b.eq	d728 <re_search_internal+0x19b0>  // b.none
    d714:	ldr	w0, [x26, #164]
    d718:	cmp	w0, #0x2
    d71c:	ldr	w0, [sp, #296]
    d720:	csinc	w0, w0, wzr, lt  // lt = tstop
    d724:	str	w0, [sp, #296]
    d728:	mov	x1, x26
    d72c:	add	x2, sp, #0x178
    d730:	mov	x0, x25
    d734:	mov	w3, #0x2                   	// #2
    d738:	bl	3768 <re_acquire_state_context>
    d73c:	ldr	x1, [sp, #288]
    d740:	str	x0, [x1, x23, lsl #3]
    d744:	cbnz	x0, cfe8 <re_search_internal+0x1270>
    d748:	ldr	w0, [sp, #344]
    d74c:	cbz	w0, cfe8 <re_search_internal+0x1270>
    d750:	ldr	x28, [sp, #272]
    d754:	mov	x24, x21
    d758:	mov	x0, x28
    d75c:	bl	0 <grub_free>
    d760:	ldr	x0, [sp, #384]
    d764:	mov	w21, #0x0                   	// #0
    d768:	ldr	x1, [sp, #232]
    d76c:	add	x20, x1, #0x8
    d770:	bl	0 <grub_free>
    d774:	nop
    d778:	ldr	x0, [x20], #16
    d77c:	add	w21, w21, #0x1
    d780:	bl	0 <grub_free>
    d784:	cmp	w21, w22
    d788:	b.lt	d778 <re_search_internal+0x1a00>  // b.tstop
    d78c:	b	c8b0 <re_search_internal+0xb38>
    d790:	ldp	w1, w0, [sp, #176]
    d794:	cmp	w0, w1
    d798:	mov	x0, #0x0                   	// #0
    d79c:	b.le	d7a8 <re_search_internal+0x1a30>
    d7a0:	ldr	x0, [sp, #192]
    d7a4:	ldrb	w0, [x0, w1, sxtw]
    d7a8:	ldr	x1, [sp, #224]
    d7ac:	cbz	x1, d7b4 <re_search_internal+0x1a3c>
    d7b0:	ldrb	w0, [x1, x0]
    d7b4:	ldr	x1, [sp, #208]
    d7b8:	ldrb	w0, [x1, x0]
    d7bc:	cbnz	w0, c204 <re_search_internal+0x48c>
    d7c0:	b	c780 <re_search_internal+0xa08>
    d7c4:	ldr	x24, [x19, #96]
    d7c8:	b	cd88 <re_search_internal+0x1010>
    d7cc:	mov	x0, x25
    d7d0:	mov	x2, #0x10                  	// #16
    d7d4:	mov	w1, #0xffffffff            	// #-1
    d7d8:	bl	0 <grub_memset>
    d7dc:	b	d4e8 <re_search_internal+0x1770>
    d7e0:	mov	x0, x1
    d7e4:	ldr	x28, [sp, #200]
    d7e8:	b	c8d0 <re_search_internal+0xb58>
    d7ec:	mov	x2, x25
    d7f0:	ldr	x4, [x1, x0]
    d7f4:	mov	x0, #0x0                   	// #0
    d7f8:	ldr	x3, [x4, x0]
    d7fc:	add	x0, x0, #0x8
    d800:	ldr	x1, [x2]
    d804:	cmp	x0, #0x20
    d808:	orr	x1, x1, x3
    d80c:	str	x1, [x2], #8
    d810:	b.ne	d7f8 <re_search_internal+0x1a80>  // b.any
    d814:	b	d12c <re_search_internal+0x13b4>
    d818:	mov	w1, #0xc                   	// #12
    d81c:	str	w1, [sp, #148]
    d820:	b	c8dc <re_search_internal+0xb64>
    d824:	str	w0, [sp, #148]
    d828:	ldp	x23, x24, [sp, #48]
    d82c:	ldr	x28, [sp, #200]
    d830:	ldr	x0, [sp, #584]
    d834:	b	c8dc <re_search_internal+0xb64>
    d838:	mov	x0, x25
    d83c:	ldr	x28, [sp, #200]
    d840:	bl	0 <grub_free>
    d844:	mov	w1, #0xc                   	// #12
    d848:	mov	x0, #0x0                   	// #0
    d84c:	str	w1, [sp, #148]
    d850:	bl	0 <grub_free>
    d854:	ldp	x23, x24, [sp, #48]
    d858:	ldr	x0, [sp, #584]
    d85c:	b	c8dc <re_search_internal+0xb64>
    d860:	ldr	x0, [sp, #256]
    d864:	str	x0, [sp, #160]
    d868:	b	c5e8 <re_search_internal+0x870>
    d86c:	mov	x24, x21
    d870:	b	c8b8 <re_search_internal+0xb40>
    d874:	mov	w0, #0x1                   	// #1
    d878:	str	w0, [sp, #148]
    d87c:	ldr	x0, [sp, #584]
    d880:	b	c8dc <re_search_internal+0xb64>
    d884:	mov	x24, x21
    d888:	ldr	x0, [sp, #384]
    d88c:	b	d764 <re_search_internal+0x19ec>
    d890:	ldr	x1, [x5]
    d894:	tst	x3, x1
    d898:	b.ne	dec0 <re_search_internal+0x2148>  // b.any
    d89c:	mov	x1, #0x1                   	// #1
    d8a0:	lsl	x2, x1, #5
    d8a4:	mov	x7, x1
    d8a8:	add	x1, x1, #0x1
    d8ac:	ldr	x2, [x5, x2]
    d8b0:	tst	x3, x2
    d8b4:	b.eq	d8a0 <re_search_internal+0x1b28>  // b.none
    d8b8:	ldr	x1, [x6, x10]
    d8bc:	tst	x3, x1
    d8c0:	b.eq	dd34 <re_search_internal+0x1fbc>  // b.none
    d8c4:	ldr	x1, [x14, x7, lsl #3]
    d8c8:	str	x1, [x4]
    d8cc:	b	d074 <re_search_internal+0x12fc>
    d8d0:	ldr	w1, [sp, #344]
    d8d4:	cbz	w1, cfc8 <re_search_internal+0x1250>
    d8d8:	b	d750 <re_search_internal+0x19d8>
    d8dc:	cmp	w6, w2
    d8e0:	b.eq	ddc4 <re_search_internal+0x204c>  // b.none
    d8e4:	ldr	w2, [x8, w2, sxtw #2]
    d8e8:	str	w2, [x1]
    d8ec:	cmp	w6, w3
    d8f0:	b.eq	ddbc <re_search_internal+0x2044>  // b.none
    d8f4:	ldr	w3, [x8, w3, sxtw #2]
    d8f8:	b	cacc <re_search_internal+0xd54>
    d8fc:	ldrb	w0, [x28, #160]
    d900:	ldr	x1, [sp, #136]
    d904:	ldr	x22, [x1]
    d908:	tbnz	w0, #0, ddcc <re_search_internal+0x2054>
    d90c:	mov	x0, #0x200000000           	// #8589934592
    d910:	stp	x0, xzr, [sp, #408]
    d914:	mov	x2, #0x10                  	// #16
    d918:	mov	w1, #0x0                   	// #0
    d91c:	add	x24, sp, #0x178
    d920:	ldr	w27, [x22, #136]
    d924:	mov	x0, x24
    d928:	bl	0 <grub_memset>
    d92c:	mov	x0, x19
    d930:	bl	0 <grub_malloc>
    d934:	mov	x23, x0
    d938:	cbz	x0, dd60 <re_search_internal+0x1fe8>
    d93c:	mov	x20, #0x0                   	// #0
    d940:	ldr	x21, [sp, #264]
    d944:	mov	x2, x19
    d948:	mov	x0, x23
    d94c:	mov	x1, x21
    d950:	bl	0 <grub_memmove>
    d954:	ldr	x26, [sp, #152]
    d958:	stp	x23, x28, [sp, #104]
    d95c:	ldr	w0, [x21]
    d960:	mov	w28, w27
    d964:	str	x19, [sp, #120]
    d968:	sbfiz	x2, x26, #3, #32
    d96c:	mov	w19, w26
    d970:	str	x2, [sp, #136]
    d974:	add	x2, x20, #0x8
    d978:	str	x2, [sp, #160]
    d97c:	str	w0, [sp, #344]
    d980:	add	x1, x24, #0x8
    d984:	str	x1, [sp, #128]
    d988:	ldr	w1, [x21, #4]
    d98c:	cmp	w1, w0
    d990:	b.lt	de24 <re_search_internal+0x20ac>  // b.tstop
    d994:	ldr	x4, [x22]
    d998:	sbfiz	x23, x28, #4, #32
    d99c:	sxtw	x25, w28
    d9a0:	add	x6, x4, x23
    d9a4:	ldrb	w2, [x6, #8]
    d9a8:	cmp	w2, #0x8
    d9ac:	b.eq	daa4 <re_search_internal+0x1d2c>  // b.none
    d9b0:	cmp	w2, #0x9
    d9b4:	b.eq	db4c <re_search_internal+0x1dd4>  // b.none
    d9b8:	cmp	w0, w1
    d9bc:	b.ne	d9cc <re_search_internal+0x1c54>  // b.any
    d9c0:	ldr	w0, [sp, #576]
    d9c4:	cmp	w28, w0
    d9c8:	b.eq	dc68 <re_search_internal+0x1ef0>  // b.none
    d9cc:	ldr	x27, [sp, #560]
    d9d0:	ldr	x0, [x27]
    d9d4:	add	x1, x0, x23
    d9d8:	ldrb	w2, [x1, #8]
    d9dc:	tbnz	w2, #3, dad0 <re_search_internal+0x1d58>
    d9e0:	ldrb	w4, [x1, #10]
    d9e4:	tbnz	w4, #4, dba4 <re_search_internal+0x1e2c>
    d9e8:	cmp	w2, #0x4
    d9ec:	b.eq	dbe8 <re_search_internal+0x1e70>  // b.none
    d9f0:	ldr	w7, [sp, #344]
    d9f4:	mov	w2, w7
    d9f8:	add	x0, sp, #0x1c0
    d9fc:	bl	2ab8 <check_node_accept>
    da00:	tst	w0, #0xff
    da04:	b.eq	dcfc <re_search_internal+0x1f84>  // b.none
    da08:	ldr	x1, [x27, #24]
    da0c:	add	w0, w7, #0x1
    da10:	ldr	w28, [x1, x25, lsl #2]
    da14:	str	w0, [sp, #344]
    da18:	cbz	x20, da48 <re_search_internal+0x1cd0>
    da1c:	ldr	w1, [sp, #572]
    da20:	cmp	w0, w1
    da24:	b.gt	da7c <re_search_internal+0x1d04>
    da28:	ldr	x1, [sp, #584]
    da2c:	ldr	x1, [x1, w0, sxtw #3]
    da30:	cbz	x1, da7c <re_search_internal+0x1d04>
    da34:	ldr	w0, [x1, #12]
    da38:	mov	w2, w28
    da3c:	add	x1, x1, #0x10
    da40:	bl	2548 <re_node_set_contains.isra.0>
    da44:	cbz	w0, da7c <re_search_internal+0x1d04>
    da48:	str	wzr, [sp, #380]
    da4c:	tbnz	w28, #31, dd40 <re_search_internal+0x1fc8>
    da50:	ldr	w0, [sp, #344]
    da54:	b	d988 <re_search_internal+0x1c10>
    da58:	ldrsw	x3, [sp, #344]
    da5c:	sxtw	x2, w4
    da60:	ldr	x1, [sp, #456]
    da64:	str	w4, [sp, #176]
    da68:	add	x0, x1, w0, sxtw
    da6c:	add	x1, x1, x3
    da70:	bl	0 <grub_memcmp>
    da74:	ldr	w4, [sp, #176]
    da78:	cbz	w0, dbd4 <re_search_internal+0x1e5c>
    da7c:	ldr	x1, [sp, #160]
    da80:	mov	x5, x24
    da84:	mov	x4, x21
    da88:	mov	w3, w19
    da8c:	add	x2, sp, #0x158
    da90:	mov	x0, x20
    da94:	bl	5b00 <pop_fail_stack.isra.0>
    da98:	mov	w28, w0
    da9c:	ldr	w0, [sp, #344]
    daa0:	b	d980 <re_search_internal+0x1c08>
    daa4:	ldr	w2, [x4, x23]
    daa8:	add	w2, w2, #0x1
    daac:	cmp	w19, w2
    dab0:	b.le	d9b8 <re_search_internal+0x1c40>
    dab4:	sbfiz	x2, x2, #3, #32
    dab8:	add	x1, x21, x2
    dabc:	str	w0, [x21, x2]
    dac0:	mov	w2, #0xffffffff            	// #-1
    dac4:	str	w2, [x1, #4]
    dac8:	ldr	w1, [x21, #4]
    dacc:	b	d9b8 <re_search_internal+0x1c40>
    dad0:	ldrsw	x2, [sp, #344]
    dad4:	mov	w1, w28
    dad8:	ldr	x0, [sp, #584]
    dadc:	ldr	x25, [x27, #40]
    dae0:	ldr	x27, [x0, x2, lsl #3]
    dae4:	add	x25, x25, x23
    dae8:	mov	x0, x24
    daec:	bl	19d0 <re_node_set_insert>
    daf0:	tst	w0, #0xff
    daf4:	b.eq	dd48 <re_search_internal+0x1fd0>  // b.none
    daf8:	ldr	w7, [x25, #4]
    dafc:	cmp	w7, #0x0
    db00:	b.le	dcfc <re_search_internal+0x1f84>
    db04:	ldr	w8, [x27, #12]
    db08:	add	x9, x27, #0x10
    db0c:	ldr	x10, [x25, #8]
    db10:	mov	x6, #0x0                   	// #0
    db14:	mov	w28, #0xffffffff            	// #-1
    db18:	ldr	w25, [x10, x6, lsl #2]
    db1c:	add	x6, x6, #0x1
    db20:	mov	x1, x9
    db24:	mov	w0, w8
    db28:	mov	w2, w25
    db2c:	bl	2548 <re_node_set_contains.isra.0>
    db30:	cbz	w0, db40 <re_search_internal+0x1dc8>
    db34:	cmn	w28, #0x1
    db38:	b.ne	ccbc <re_search_internal+0xf44>  // b.any
    db3c:	mov	w28, w25
    db40:	cmp	w7, w6
    db44:	b.gt	db18 <re_search_internal+0x1da0>
    db48:	b	da4c <re_search_internal+0x1cd4>
    db4c:	ldr	w2, [x6]
    db50:	add	w2, w2, #0x1
    db54:	cmp	w19, w2
    db58:	b.le	d9b8 <re_search_internal+0x1c40>
    db5c:	sbfiz	x2, x2, #3, #32
    db60:	add	x1, x21, x2
    db64:	ldr	w4, [x21, x2]
    db68:	cmp	w4, w0
    db6c:	b.lt	dd7c <re_search_internal+0x2004>  // b.tstop
    db70:	ldrb	w4, [x6, #10]
    db74:	tbz	w4, #3, dd28 <re_search_internal+0x1fb0>
    db78:	ldr	x3, [sp, #104]
    db7c:	ldr	w2, [x3, x2]
    db80:	cmn	w2, #0x1
    db84:	b.eq	dd28 <re_search_internal+0x1fb0>  // b.none
    db88:	ldr	x2, [sp, #136]
    db8c:	mov	x1, x3
    db90:	mov	x0, x21
    db94:	bl	0 <grub_memmove>
    db98:	ldr	w1, [x21, #4]
    db9c:	ldr	w0, [sp, #344]
    dba0:	b	d9b8 <re_search_internal+0x1c40>
    dba4:	ldr	w4, [sp, #344]
    dba8:	mov	w2, w28
    dbac:	add	x3, sp, #0x1c0
    dbb0:	add	x1, x27, #0xc8
    dbb4:	bl	47b0 <check_node_accept_bytes.isra.0>
    dbb8:	mov	w4, w0
    dbbc:	cbnz	w0, dbd4 <re_search_internal+0x1e5c>
    dbc0:	ldr	x1, [x27]
    dbc4:	ldr	w7, [sp, #344]
    dbc8:	add	x1, x1, x23
    dbcc:	b	d9f4 <re_search_internal+0x1c7c>
    dbd0:	cbz	w4, dc18 <re_search_internal+0x1ea0>
    dbd4:	ldr	x1, [x27, #24]
    dbd8:	ldr	w0, [sp, #344]
    dbdc:	ldr	w28, [x1, x25, lsl #2]
    dbe0:	add	w0, w4, w0
    dbe4:	b	da14 <re_search_internal+0x1c9c>
    dbe8:	ldr	w0, [x1]
    dbec:	add	w0, w0, #0x1
    dbf0:	sbfiz	x0, x0, #3, #32
    dbf4:	add	x1, x21, x0
    dbf8:	ldr	w0, [x21, x0]
    dbfc:	ldr	w1, [x1, #4]
    dc00:	sub	w4, w1, w0
    dc04:	cbz	x20, dbd0 <re_search_internal+0x1e58>
    dc08:	cmn	w1, #0x1
    dc0c:	ccmn	w0, #0x1, #0x4, ne  // ne = any
    dc10:	b.eq	da7c <re_search_internal+0x1d04>  // b.none
    dc14:	cbnz	w4, da58 <re_search_internal+0x1ce0>
    dc18:	mov	w1, w28
    dc1c:	mov	x0, x24
    dc20:	bl	19d0 <re_node_set_insert>
    dc24:	tst	w0, #0xff
    dc28:	b.eq	dd48 <re_search_internal+0x1fd0>  // b.none
    dc2c:	ldr	w7, [sp, #344]
    dc30:	ldr	x0, [x27, #40]
    dc34:	ldr	x1, [sp, #584]
    dc38:	add	x0, x0, x23
    dc3c:	ldr	x2, [x1, w7, sxtw #3]
    dc40:	ldr	x3, [x0, #8]
    dc44:	add	x1, x2, #0x10
    dc48:	ldr	w0, [x2, #12]
    dc4c:	ldr	w28, [x3]
    dc50:	mov	w2, w28
    dc54:	bl	2548 <re_node_set_contains.isra.0>
    dc58:	cbnz	w0, da4c <re_search_internal+0x1cd4>
    dc5c:	ldr	x1, [x27]
    dc60:	add	x1, x1, x23
    dc64:	b	d9f4 <re_search_internal+0x1c7c>
    dc68:	cbz	x20, dfb4 <re_search_internal+0x223c>
    dc6c:	mov	x0, x21
    dc70:	mov	x1, #0x0                   	// #0
    dc74:	nop
    dc78:	ldr	w2, [x0]
    dc7c:	tbnz	w2, #31, dc8c <re_search_internal+0x1f14>
    dc80:	ldr	w2, [x0, #4]
    dc84:	cmn	w2, #0x1
    dc88:	b.eq	dcc8 <re_search_internal+0x1f50>  // b.none
    dc8c:	add	x1, x1, #0x1
    dc90:	add	x0, x0, #0x8
    dc94:	cmp	x1, x26
    dc98:	b.ne	dc78 <re_search_internal+0x1f00>  // b.any
    dc9c:	ldp	x23, x28, [sp, #104]
    dca0:	ldr	x0, [sp, #384]
    dca4:	ldr	x19, [sp, #120]
    dca8:	bl	0 <grub_free>
    dcac:	mov	x0, x23
    dcb0:	bl	0 <grub_free>
    dcb4:	mov	x0, x20
    dcb8:	bl	46e0 <free_fail_stack_return.part.0>
    dcbc:	ldr	x0, [sp, #264]
    dcc0:	ldr	w2, [x0]
    dcc4:	b	ca98 <re_search_internal+0xd20>
    dcc8:	cmp	x1, x26
    dccc:	b.eq	dc9c <re_search_internal+0x1f24>  // b.none
    dcd0:	ldr	x1, [sp, #160]
    dcd4:	mov	x5, x24
    dcd8:	mov	x4, x21
    dcdc:	mov	w3, w19
    dce0:	add	x2, sp, #0x158
    dce4:	mov	x0, x20
    dce8:	bl	5b00 <pop_fail_stack.isra.0>
    dcec:	sxtw	x25, w0
    dcf0:	mov	x28, x25
    dcf4:	sbfiz	x23, x25, #4, #32
    dcf8:	b	d9cc <re_search_internal+0x1c54>
    dcfc:	cbnz	x20, da7c <re_search_internal+0x1d04>
    dd00:	ldp	x23, x28, [sp, #104]
    dd04:	mov	w1, #0x1                   	// #1
    dd08:	ldr	x0, [sp, #384]
    dd0c:	str	w1, [sp, #148]
    dd10:	bl	0 <grub_free>
    dd14:	mov	x0, x23
    dd18:	bl	0 <grub_free>
    dd1c:	ldp	x23, x24, [sp, #48]
    dd20:	ldr	x0, [sp, #584]
    dd24:	b	c8dc <re_search_internal+0xb64>
    dd28:	str	w0, [x1, #4]
    dd2c:	ldr	w1, [x21, #4]
    dd30:	b	d9b8 <re_search_internal+0x1c40>
    dd34:	ldr	x1, [x8, x7, lsl #3]
    dd38:	str	x1, [x4]
    dd3c:	b	d074 <re_search_internal+0x12fc>
    dd40:	cmn	w28, #0x2
    dd44:	b.ne	dcfc <re_search_internal+0x1f84>  // b.any
    dd48:	ldp	x23, x28, [sp, #104]
    dd4c:	ldr	x0, [sp, #384]
    dd50:	bl	0 <grub_free>
    dd54:	mov	x0, x23
    dd58:	bl	0 <grub_free>
    dd5c:	cbnz	x20, cd54 <re_search_internal+0xfdc>
    dd60:	mov	w0, #0xc                   	// #12
    dd64:	str	w0, [sp, #148]
    dd68:	ldp	x23, x24, [sp, #48]
    dd6c:	ldr	x0, [sp, #584]
    dd70:	b	c8dc <re_search_internal+0xb64>
    dd74:	mov	w28, w25
    dd78:	b	da4c <re_search_internal+0x1cd4>
    dd7c:	str	w0, [x1, #4]
    dd80:	mov	x1, x21
    dd84:	ldr	x0, [sp, #104]
    dd88:	ldr	x2, [sp, #136]
    dd8c:	bl	0 <grub_memmove>
    dd90:	ldr	w1, [x21, #4]
    dd94:	ldr	w0, [sp, #344]
    dd98:	b	d9b8 <re_search_internal+0x1c40>
    dd9c:	ldr	x0, [sp, #232]
    dda0:	mov	x24, x21
    dda4:	bl	0 <grub_free>
    dda8:	mov	x0, #0x800                 	// #2048
    ddac:	bl	0 <grub_zalloc>
    ddb0:	str	x0, [x24, #64]
    ddb4:	cbnz	x0, c328 <re_search_internal+0x5b0>
    ddb8:	b	c8b8 <re_search_internal+0xb40>
    ddbc:	mov	w3, w7
    ddc0:	b	cacc <re_search_internal+0xd54>
    ddc4:	mov	w2, w7
    ddc8:	b	d8e8 <re_search_internal+0x1b70>
    ddcc:	ldr	w0, [x28, #140]
    ddd0:	cmp	w0, #0x0
    ddd4:	b.le	d90c <re_search_internal+0x1b94>
    ddd8:	mov	x1, #0x200000000           	// #8589934592
    dddc:	mov	x0, #0x40                  	// #64
    dde0:	stp	x1, xzr, [sp, #408]
    dde4:	bl	0 <grub_malloc>
    dde8:	str	x0, [sp, #416]
    ddec:	cbz	x0, dee4 <re_search_internal+0x216c>
    ddf0:	mov	x2, #0x10                  	// #16
    ddf4:	mov	w1, #0x0                   	// #0
    ddf8:	add	x24, sp, #0x178
    ddfc:	ldr	w27, [x22, #136]
    de00:	mov	x0, x24
    de04:	bl	0 <grub_memset>
    de08:	mov	x0, x19
    de0c:	add	x20, sp, #0x198
    de10:	bl	0 <grub_malloc>
    de14:	mov	x23, x0
    de18:	cbnz	x0, d940 <re_search_internal+0x1bc8>
    de1c:	add	x0, sp, #0x198
    de20:	b	cd58 <re_search_internal+0xfe0>
    de24:	ldp	x23, x28, [sp, #104]
    de28:	ldr	x0, [sp, #384]
    de2c:	ldr	x19, [sp, #120]
    de30:	bl	0 <grub_free>
    de34:	mov	x0, x23
    de38:	bl	0 <grub_free>
    de3c:	cbz	x20, deb4 <re_search_internal+0x213c>
    de40:	mov	x0, x20
    de44:	bl	46e0 <free_fail_stack_return.part.0>
    de48:	ldr	x0, [sp, #264]
    de4c:	ldr	w2, [x0]
    de50:	b	ca98 <re_search_internal+0xd20>
    de54:	mov	w1, #0xc                   	// #12
    de58:	mov	x24, x21
    de5c:	str	w1, [sp, #344]
    de60:	b	d764 <re_search_internal+0x19ec>
    de64:	ldr	w1, [sp, #344]
    de68:	cbz	w1, d704 <re_search_internal+0x198c>
    de6c:	b	d750 <re_search_internal+0x19d8>
    de70:	ldr	x1, [sp, #264]
    de74:	mov	w2, #0x0                   	// #0
    de78:	ldr	w0, [sp, #572]
    de7c:	stp	wzr, w0, [x1]
    de80:	b	ca98 <re_search_internal+0xd20>
    de84:	ldr	x0, [x20, #8]
    de88:	lsl	w1, w1, #1
    de8c:	str	w5, [sp, #176]
    de90:	sbfiz	x1, x1, #5, #32
    de94:	bl	0 <grub_realloc>
    de98:	cbz	x0, cd40 <re_search_internal+0xfc8>
    de9c:	ldr	w1, [x20, #4]
    dea0:	ldr	w5, [sp, #176]
    dea4:	str	x0, [x20, #8]
    dea8:	lsl	w0, w1, #1
    deac:	str	w0, [x20, #4]
    deb0:	b	ccec <re_search_internal+0xf74>
    deb4:	ldr	x0, [sp, #264]
    deb8:	ldr	w2, [x0]
    debc:	b	ca98 <re_search_internal+0xd20>
    dec0:	mov	x7, #0x0                   	// #0
    dec4:	b	d8b8 <re_search_internal+0x1b40>
    dec8:	ldr	x1, [sp, #288]
    decc:	ldr	x0, [x1, x0, lsl #3]
    ded0:	str	x0, [x9, #80]
    ded4:	ldr	w1, [sp, #296]
    ded8:	cbz	w1, d0c4 <re_search_internal+0x134c>
    dedc:	str	x0, [x9, #2128]
    dee0:	b	d0c4 <re_search_internal+0x134c>
    dee4:	mov	w0, #0xc                   	// #12
    dee8:	str	w0, [sp, #148]
    deec:	b	cd68 <re_search_internal+0xff0>
    def0:	mov	x0, #0x1000                	// #4096
    def4:	bl	0 <grub_zalloc>
    def8:	str	x0, [x21, #72]
    defc:	mov	x9, x0
    df00:	cbz	x0, d750 <re_search_internal+0x19d8>
    df04:	ldp	x7, x11, [sp, #272]
    df08:	add	x10, x0, #0x800
    df0c:	ldr	x6, [sp, #248]
    df10:	mov	x8, #0x0                   	// #0
    df14:	add	x0, sp, #0x198
    df18:	ldr	x0, [x0, x8]
    df1c:	cbz	x0, df3c <re_search_internal+0x21c4>
    df20:	mov	x4, x10
    df24:	mov	x2, #0x1                   	// #1
    df28:	tbnz	w0, #0, df54 <re_search_internal+0x21dc>
    df2c:	lsl	x2, x2, #1
    df30:	lsr	x0, x0, #1
    df34:	add	x4, x4, #0x8
    df38:	cbnz	x0, df28 <re_search_internal+0x21b0>
    df3c:	add	x8, x8, #0x8
    df40:	add	x10, x10, #0x200
    df44:	cmp	x8, #0x20
    df48:	add	x6, x6, #0x8
    df4c:	b.ne	df14 <re_search_internal+0x219c>  // b.any
    df50:	b	d094 <re_search_internal+0x131c>
    df54:	ldr	x1, [x6]
    df58:	tst	x2, x1
    df5c:	b.ne	df98 <re_search_internal+0x2220>  // b.any
    df60:	mov	x1, #0x1                   	// #1
    df64:	lsl	x3, x1, #5
    df68:	mov	x5, x1
    df6c:	add	x1, x1, #0x1
    df70:	ldr	x3, [x6, x3]
    df74:	tst	x2, x3
    df78:	b.eq	df64 <re_search_internal+0x21ec>  // b.none
    df7c:	lsl	x5, x5, #3
    df80:	sub	x1, x4, #0x8, lsl #12
    df84:	ldr	x3, [x7, x5]
    df88:	str	x3, [x1, #30720]
    df8c:	ldr	x1, [x11, x5]
    df90:	str	x1, [x4]
    df94:	b	df2c <re_search_internal+0x21b4>
    df98:	mov	x5, #0x0                   	// #0
    df9c:	b	df7c <re_search_internal+0x2204>
    dfa0:	ldr	x0, [sp, #232]
    dfa4:	mov	x24, x21
    dfa8:	bl	0 <grub_free>
    dfac:	cbnz	w22, c8b8 <re_search_internal+0xb40>
    dfb0:	b	dda8 <re_search_internal+0x2030>
    dfb4:	ldp	x23, x28, [sp, #104]
    dfb8:	ldr	x0, [sp, #384]
    dfbc:	ldr	x19, [sp, #120]
    dfc0:	bl	0 <grub_free>
    dfc4:	mov	x0, x23
    dfc8:	bl	0 <grub_free>
    dfcc:	ldr	x0, [sp, #264]
    dfd0:	ldr	w2, [x0]
    dfd4:	b	ca98 <re_search_internal+0xd20>
    dfd8:	mov	w0, #0xc                   	// #12
    dfdc:	str	w0, [sp, #148]
    dfe0:	ldp	x23, x24, [sp, #48]
    dfe4:	ldr	x28, [sp, #200]
    dfe8:	ldr	x0, [sp, #584]
    dfec:	b	c8dc <re_search_internal+0xb64>
	...

000000000000e000 <re_compile_pattern>:
    e000:	stp	x29, x30, [sp, #-16]!
    e004:	adrp	x3, 0 <grub_cmd_regexp>
    e008:	mov	w6, #0x6f                  	// #111
    e00c:	mov	x29, sp
    e010:	ldr	x3, [x3]
    e014:	mov	x5, x2
    e018:	ldrb	w4, [x2, #56]
    e01c:	mov	x2, x1
    e020:	mov	x1, x0
    e024:	mov	x0, x5
    e028:	ldr	x3, [x3]
    e02c:	and	w6, w4, w6
    e030:	ubfx	w4, w3, #25, #1
    e034:	ubfiz	w4, w4, #4, #4
    e038:	orr	w4, w4, #0xffffff80
    e03c:	orr	w4, w4, w6
    e040:	strb	w4, [x5, #56]
    e044:	bl	9898 <re_compile_internal>
    e048:	cbz	w0, e06c <re_compile_pattern+0x6c>
    e04c:	adrp	x1, 0 <grub_cmd_regexp>
    e050:	ldp	x29, x30, [sp], #16
    e054:	ldr	x1, [x1]
    e058:	add	x2, x1, #0x228
    e05c:	add	x1, x1, #0xa8
    e060:	ldr	x0, [x2, w0, sxtw #3]
    e064:	add	x0, x1, x0
    e068:	ret
    e06c:	mov	x0, #0x0                   	// #0
    e070:	ldp	x29, x30, [sp], #16
    e074:	ret
	...

000000000000e088 <re_set_syntax>:
    e088:	adrp	x1, 0 <grub_cmd_regexp>
    e08c:	mov	x2, x0
    e090:	ldr	x1, [x1]
    e094:	ldr	x0, [x1]
    e098:	str	x2, [x1]
    e09c:	ret
	...

000000000000e0a8 <re_compile_fastmap>:
    e0a8:	stp	x29, x30, [sp, #-48]!
    e0ac:	mov	x2, #0x100                 	// #256
    e0b0:	mov	w1, #0x0                   	// #0
    e0b4:	mov	x29, sp
    e0b8:	stp	x19, x20, [sp, #16]
    e0bc:	mov	x19, x0
    e0c0:	ldr	x20, [x0]
    e0c4:	str	x21, [sp, #32]
    e0c8:	ldr	x21, [x0, #32]
    e0cc:	mov	x0, x21
    e0d0:	bl	0 <grub_memset>
    e0d4:	ldr	x1, [x20, #72]
    e0d8:	mov	x0, x19
    e0dc:	mov	x3, x21
    e0e0:	add	x2, x1, #0x10
    e0e4:	add	x1, x1, #0xc
    e0e8:	bl	8a78 <re_compile_fastmap_iter.isra.0>
    e0ec:	ldp	x1, x0, [x20, #72]
    e0f0:	cmp	x1, x0
    e0f4:	b.eq	e110 <re_compile_fastmap+0x68>  // b.none
    e0f8:	add	x2, x0, #0x10
    e0fc:	add	x1, x0, #0xc
    e100:	mov	x3, x21
    e104:	mov	x0, x19
    e108:	bl	8a78 <re_compile_fastmap_iter.isra.0>
    e10c:	ldr	x0, [x20, #72]
    e110:	ldr	x1, [x20, #88]
    e114:	cmp	x1, x0
    e118:	b.eq	e134 <re_compile_fastmap+0x8c>  // b.none
    e11c:	add	x2, x1, #0x10
    e120:	mov	x0, x19
    e124:	mov	x3, x21
    e128:	add	x1, x1, #0xc
    e12c:	bl	8a78 <re_compile_fastmap_iter.isra.0>
    e130:	ldr	x0, [x20, #72]
    e134:	ldr	x1, [x20, #96]
    e138:	cmp	x1, x0
    e13c:	b.eq	e154 <re_compile_fastmap+0xac>  // b.none
    e140:	add	x2, x1, #0x10
    e144:	mov	x3, x21
    e148:	add	x1, x1, #0xc
    e14c:	mov	x0, x19
    e150:	bl	8a78 <re_compile_fastmap_iter.isra.0>
    e154:	ldrb	w1, [x19, #56]
    e158:	mov	w0, #0x0                   	// #0
    e15c:	ldr	x21, [sp, #32]
    e160:	orr	w1, w1, #0x8
    e164:	strb	w1, [x19, #56]
    e168:	ldp	x19, x20, [sp, #16]
    e16c:	ldp	x29, x30, [sp], #48
    e170:	ret
    e174:	nop

000000000000e178 <re_search_stub>:
    e178:	sub	sp, sp, #0x80
    e17c:	cmp	w3, #0x0
    e180:	ccmp	w3, w2, #0x0, ge  // ge = tcont
    e184:	stp	x29, x30, [sp, #16]
    e188:	add	x29, sp, #0x10
    e18c:	stp	x19, x20, [sp, #32]
    e190:	stp	x23, x24, [sp, #64]
    e194:	add	w24, w3, w4
    e198:	b.gt	e43c <re_search_stub+0x2c4>
    e19c:	stp	x21, x22, [sp, #48]
    e1a0:	mov	w20, w3
    e1a4:	mov	x21, x0
    e1a8:	stp	x25, x26, [sp, #80]
    e1ac:	mov	x22, x6
    e1b0:	mov	w25, w2
    e1b4:	stp	x27, x28, [sp, #96]
    e1b8:	and	w26, w7, #0xff
    e1bc:	cmp	w24, w2
    e1c0:	b.gt	e408 <re_search_stub+0x290>
    e1c4:	cmp	w4, #0x0
    e1c8:	ccmp	w3, w24, #0x4, ge  // ge = tcont
    e1cc:	b.gt	e408 <re_search_stub+0x290>
    e1d0:	tbnz	w24, #31, e410 <re_search_stub+0x298>
    e1d4:	cmp	w4, #0x0
    e1d8:	ccmp	w3, w24, #0x0, lt  // lt = tstop
    e1dc:	b.le	e410 <re_search_stub+0x298>
    e1e0:	ldrb	w0, [x21, #56]
    e1e4:	cmp	w24, w20
    e1e8:	ubfx	x27, x0, #5, #2
    e1ec:	b.le	e1fc <re_search_stub+0x84>
    e1f0:	ldr	x2, [x21, #32]
    e1f4:	cbz	x2, e1fc <re_search_stub+0x84>
    e1f8:	tbz	w0, #3, e390 <re_search_stub+0x218>
    e1fc:	ldrb	w2, [x21, #56]
    e200:	cmp	x22, #0x0
    e204:	cset	w0, eq  // eq = none
    e208:	ubfx	x3, x2, #4, #1
    e20c:	orr	w0, w0, w3
    e210:	tbnz	w0, #0, e37c <re_search_stub+0x204>
    e214:	and	w2, w2, #0x6
    e218:	cmp	w2, #0x4
    e21c:	ldr	x19, [x21, #48]
    e220:	b.eq	e3dc <re_search_stub+0x264>  // b.none
    e224:	add	w19, w19, #0x1
    e228:	sxtw	x28, w19
    e22c:	sbfiz	x0, x19, #3, #32
    e230:	str	x1, [sp, #112]
    e234:	str	w5, [sp, #124]
    e238:	bl	0 <grub_malloc>
    e23c:	mov	x23, x0
    e240:	cbz	x0, e458 <re_search_stub+0x2e0>
    e244:	ldr	w5, [sp, #124]
    e248:	mov	x7, x0
    e24c:	ldr	x1, [sp, #112]
    e250:	str	w27, [sp]
    e254:	mov	x6, x28
    e258:	mov	w4, w24
    e25c:	mov	w2, w25
    e260:	mov	w3, w20
    e264:	mov	x0, x21
    e268:	bl	bd78 <re_search_internal>
    e26c:	cbnz	w0, e340 <re_search_stub+0x1c8>
    e270:	cbz	x22, e324 <re_search_stub+0x1ac>
    e274:	ldrb	w0, [x21, #56]
    e278:	add	w25, w19, #0x1
    e27c:	ubfx	x0, x0, #1, #2
    e280:	cbz	w0, e3ac <re_search_stub+0x234>
    e284:	cmp	w0, #0x1
    e288:	b.eq	e46c <re_search_stub+0x2f4>  // b.none
    e28c:	cmp	w0, #0x2
    e290:	b.ne	e4b0 <re_search_stub+0x338>  // b.any
    e294:	ldr	w0, [x22]
    e298:	mov	w24, #0x2                   	// #2
    e29c:	cmp	w0, w19
    e2a0:	b.cc	e4cc <re_search_stub+0x354>  // b.lo, b.ul, b.last
    e2a4:	cmp	w19, #0x0
    e2a8:	b.le	e4e8 <re_search_stub+0x370>
    e2ac:	ldp	x4, x3, [x22, #8]
    e2b0:	mov	x1, x23
    e2b4:	mov	x0, #0x0                   	// #0
    e2b8:	ldr	w2, [x1]
    e2bc:	add	x1, x1, #0x8
    e2c0:	str	w2, [x4, x0, lsl #2]
    e2c4:	ldur	w2, [x1, #-4]
    e2c8:	str	w2, [x3, x0, lsl #2]
    e2cc:	add	x0, x0, #0x1
    e2d0:	cmp	w19, w0
    e2d4:	b.gt	e2b8 <re_search_stub+0x140>
    e2d8:	mov	w1, w19
    e2dc:	ldr	w0, [x22]
    e2e0:	cmp	w1, w0
    e2e4:	b.cs	e310 <re_search_stub+0x198>  // b.hs, b.nlast
    e2e8:	ldp	x4, x3, [x22, #8]
    e2ec:	sxtw	x1, w19
    e2f0:	mov	w0, #0xffffffff            	// #-1
    e2f4:	nop
    e2f8:	str	w0, [x3, x1, lsl #2]
    e2fc:	str	w0, [x4, x1, lsl #2]
    e300:	add	x1, x1, #0x1
    e304:	ldr	w2, [x22]
    e308:	cmp	w2, w1
    e30c:	b.hi	e2f8 <re_search_stub+0x180>  // b.pmore
    e310:	ldrb	w0, [x21, #56]
    e314:	bfi	w0, w24, #1, #2
    e318:	strb	w0, [x21, #56]
    e31c:	tst	w0, #0x6
    e320:	b.eq	e34c <re_search_stub+0x1d4>  // b.none
    e324:	ldr	w19, [x23]
    e328:	cbz	w26, e350 <re_search_stub+0x1d8>
    e32c:	cmp	w20, w19
    e330:	b.ne	e420 <re_search_stub+0x2a8>  // b.any
    e334:	ldr	w19, [x23, #4]
    e338:	sub	w19, w19, w20
    e33c:	b	e350 <re_search_stub+0x1d8>
    e340:	cmp	w0, #0x1
    e344:	mov	w19, #0xffffffff            	// #-1
    e348:	b.eq	e350 <re_search_stub+0x1d8>  // b.none
    e34c:	mov	w19, #0xfffffffe            	// #-2
    e350:	mov	x0, x23
    e354:	bl	0 <grub_free>
    e358:	ldp	x21, x22, [sp, #48]
    e35c:	ldp	x25, x26, [sp, #80]
    e360:	ldp	x27, x28, [sp, #96]
    e364:	mov	w0, w19
    e368:	ldp	x29, x30, [sp, #16]
    e36c:	ldp	x19, x20, [sp, #32]
    e370:	ldp	x23, x24, [sp, #64]
    e374:	add	sp, sp, #0x80
    e378:	ret
    e37c:	mov	x28, #0x1                   	// #1
    e380:	mov	x0, #0x8                   	// #8
    e384:	mov	w19, w28
    e388:	mov	x22, #0x0                   	// #0
    e38c:	b	e230 <re_search_stub+0xb8>
    e390:	mov	x0, x21
    e394:	str	x1, [sp, #112]
    e398:	str	w5, [sp, #124]
    e39c:	bl	e0a8 <re_compile_fastmap>
    e3a0:	ldr	w5, [sp, #124]
    e3a4:	ldr	x1, [sp, #112]
    e3a8:	b	e1fc <re_search_stub+0x84>
    e3ac:	sbfiz	x24, x25, #2, #32
    e3b0:	mov	x0, x24
    e3b4:	bl	0 <grub_malloc>
    e3b8:	str	x0, [x22, #8]
    e3bc:	cbz	x0, e4f4 <re_search_stub+0x37c>
    e3c0:	mov	x0, x24
    e3c4:	bl	0 <grub_malloc>
    e3c8:	str	x0, [x22, #16]
    e3cc:	cbz	x0, e4fc <re_search_stub+0x384>
    e3d0:	mov	w24, #0x1                   	// #1
    e3d4:	str	w25, [x22]
    e3d8:	b	e2a4 <re_search_stub+0x12c>
    e3dc:	ldr	w0, [x22]
    e3e0:	cmp	x19, w0, uxtw
    e3e4:	b.cc	e224 <re_search_stub+0xac>  // b.lo, b.ul, b.last
    e3e8:	mov	w19, w0
    e3ec:	cmp	w0, #0x0
    e3f0:	b.gt	e228 <re_search_stub+0xb0>
    e3f4:	mov	x28, #0x1                   	// #1
    e3f8:	mov	x0, #0x8                   	// #8
    e3fc:	mov	w19, w28
    e400:	mov	x22, #0x0                   	// #0
    e404:	b	e230 <re_search_stub+0xb8>
    e408:	mov	w24, w25
    e40c:	b	e1e0 <re_search_stub+0x68>
    e410:	ldrb	w27, [x21, #56]
    e414:	mov	w24, #0x0                   	// #0
    e418:	ubfx	x27, x27, #5, #2
    e41c:	b	e1fc <re_search_stub+0x84>
    e420:	adrp	x1, 0 <grub_cmd_regexp>
    e424:	adrp	x0, 0 <grub_cmd_regexp>
    e428:	mov	w2, #0x1be                 	// #446
    e42c:	ldr	x1, [x1]
    e430:	ldr	x0, [x0]
    e434:	bl	0 <grub_printf>
    e438:	b	e334 <re_search_stub+0x1bc>
    e43c:	mov	w19, #0xffffffff            	// #-1
    e440:	mov	w0, w19
    e444:	ldp	x29, x30, [sp, #16]
    e448:	ldp	x19, x20, [sp, #32]
    e44c:	ldp	x23, x24, [sp, #64]
    e450:	add	sp, sp, #0x80
    e454:	ret
    e458:	mov	w19, #0xfffffffe            	// #-2
    e45c:	ldp	x21, x22, [sp, #48]
    e460:	ldp	x25, x26, [sp, #80]
    e464:	ldp	x27, x28, [sp, #96]
    e468:	b	e364 <re_search_stub+0x1ec>
    e46c:	ldr	w1, [x22]
    e470:	mov	w24, w0
    e474:	cmp	w1, w25
    e478:	b.cs	e2a4 <re_search_stub+0x12c>  // b.hs, b.nlast
    e47c:	ldr	x0, [x22, #8]
    e480:	sbfiz	x28, x25, #2, #32
    e484:	mov	x1, x28
    e488:	bl	0 <grub_realloc>
    e48c:	mov	x27, x0
    e490:	cbz	x0, e4f4 <re_search_stub+0x37c>
    e494:	ldr	x0, [x22, #16]
    e498:	mov	x1, x28
    e49c:	bl	0 <grub_realloc>
    e4a0:	cbz	x0, e50c <re_search_stub+0x394>
    e4a4:	str	w25, [x22]
    e4a8:	stp	x27, x0, [x22, #8]
    e4ac:	b	e2a4 <re_search_stub+0x12c>
    e4b0:	adrp	x1, 0 <grub_cmd_regexp>
    e4b4:	adrp	x0, 0 <grub_cmd_regexp>
    e4b8:	mov	w2, #0x1f9                 	// #505
    e4bc:	ldr	x1, [x1]
    e4c0:	ldr	x0, [x0]
    e4c4:	bl	0 <grub_printf>
    e4c8:	b	e294 <re_search_stub+0x11c>
    e4cc:	adrp	x1, 0 <grub_cmd_regexp>
    e4d0:	adrp	x0, 0 <grub_cmd_regexp>
    e4d4:	mov	w2, #0x1fb                 	// #507
    e4d8:	ldr	x1, [x1]
    e4dc:	ldr	x0, [x0]
    e4e0:	bl	0 <grub_printf>
    e4e4:	b	e2a4 <re_search_stub+0x12c>
    e4e8:	mov	w19, #0x0                   	// #0
    e4ec:	mov	w1, #0x0                   	// #0
    e4f0:	b	e2dc <re_search_stub+0x164>
    e4f4:	mov	w24, #0x0                   	// #0
    e4f8:	b	e310 <re_search_stub+0x198>
    e4fc:	ldr	x0, [x22, #8]
    e500:	mov	w24, #0x0                   	// #0
    e504:	bl	0 <grub_free>
    e508:	b	e310 <re_search_stub+0x198>
    e50c:	mov	x0, x27
    e510:	mov	w24, #0x0                   	// #0
    e514:	bl	0 <grub_free>
    e518:	b	e310 <re_search_stub+0x198>
    e51c:	nop
	...

000000000000e530 <re_search_2_stub>:
    e530:	stp	x29, x30, [sp, #-112]!
    e534:	cmp	w4, #0x0
    e538:	mov	x29, sp
    e53c:	stp	x27, x28, [sp, #80]
    e540:	ldr	w27, [sp, #112]
    e544:	stp	x19, x20, [sp, #16]
    e548:	sxtw	x19, w2
    e54c:	ccmp	w27, #0x0, #0x1, ge  // ge = tcont
    e550:	stp	x25, x26, [sp, #64]
    e554:	ccmp	w19, #0x0, #0x1, ge  // ge = tcont
    e558:	mov	x25, x7
    e55c:	ldrb	w7, [sp, #120]
    e560:	b.lt	e628 <re_search_2_stub+0xf8>  // b.tstop
    e564:	mov	w20, w4
    e568:	adds	w28, w19, w4
    e56c:	b.vs	e628 <re_search_2_stub+0xf8>
    e570:	stp	x21, x22, [sp, #32]
    e574:	mov	x22, x0
    e578:	stp	x23, x24, [sp, #48]
    e57c:	mov	w23, w5
    e580:	mov	w24, w6
    e584:	cbz	w4, e644 <re_search_2_stub+0x114>
    e588:	str	x1, [sp, #96]
    e58c:	mov	x21, x3
    e590:	mov	x26, #0x0                   	// #0
    e594:	cbnz	w19, e5e4 <re_search_2_stub+0xb4>
    e598:	mov	x6, x25
    e59c:	mov	w5, w27
    e5a0:	mov	w4, w24
    e5a4:	mov	w3, w23
    e5a8:	mov	w2, w28
    e5ac:	mov	x1, x21
    e5b0:	mov	x0, x22
    e5b4:	bl	e178 <re_search_stub>
    e5b8:	mov	w19, w0
    e5bc:	mov	x0, x26
    e5c0:	bl	0 <grub_free>
    e5c4:	mov	w0, w19
    e5c8:	ldp	x19, x20, [sp, #16]
    e5cc:	ldp	x21, x22, [sp, #32]
    e5d0:	ldp	x23, x24, [sp, #48]
    e5d4:	ldp	x25, x26, [sp, #64]
    e5d8:	ldp	x27, x28, [sp, #80]
    e5dc:	ldp	x29, x30, [sp], #112
    e5e0:	ret
    e5e4:	sxtw	x0, w28
    e5e8:	str	w7, [sp, #108]
    e5ec:	bl	0 <grub_malloc>
    e5f0:	mov	x26, x0
    e5f4:	cbz	x0, e620 <re_search_2_stub+0xf0>
    e5f8:	ldr	x1, [sp, #96]
    e5fc:	mov	x2, x19
    e600:	bl	0 <grub_memmove>
    e604:	mov	x1, x21
    e608:	add	x0, x26, x19
    e60c:	sxtw	x2, w20
    e610:	bl	0 <grub_memmove>
    e614:	ldr	w7, [sp, #108]
    e618:	mov	x21, x26
    e61c:	b	e598 <re_search_2_stub+0x68>
    e620:	ldp	x21, x22, [sp, #32]
    e624:	ldp	x23, x24, [sp, #48]
    e628:	mov	w19, #0xfffffffe            	// #-2
    e62c:	mov	w0, w19
    e630:	ldp	x19, x20, [sp, #16]
    e634:	ldp	x25, x26, [sp, #64]
    e638:	ldp	x27, x28, [sp, #80]
    e63c:	ldp	x29, x30, [sp], #112
    e640:	ret
    e644:	mov	x21, x1
    e648:	mov	x26, #0x0                   	// #0
    e64c:	b	e598 <re_search_2_stub+0x68>

000000000000e650 <regcomp>:
    e650:	stp	x29, x30, [sp, #-64]!
    e654:	mov	x29, sp
    e658:	stp	x19, x20, [sp, #16]
    e65c:	mov	w19, w2
    e660:	mov	x20, x0
    e664:	tst	x19, #0x1
    e668:	stp	x21, x22, [sp, #32]
    e66c:	mov	x21, #0xb2fc                	// #45820
    e670:	str	x23, [sp, #48]
    e674:	mov	x23, #0x2c6                 	// #710
    e678:	stp	xzr, xzr, [x0]
    e67c:	mov	x22, x1
    e680:	movk	x21, #0x3, lsl #16
    e684:	str	xzr, [x0, #16]
    e688:	movk	x23, #0x101, lsl #16
    e68c:	mov	x0, #0x100                 	// #256
    e690:	csel	x23, x21, x23, ne  // ne = any
    e694:	bl	0 <grub_malloc>
    e698:	str	x0, [x20, #32]
    e69c:	cbz	x0, e748 <regcomp+0xf8>
    e6a0:	sbfiz	x21, x19, #21, #32
    e6a4:	mov	w0, #0x0                   	// #0
    e6a8:	and	x21, x21, #0x400000
    e6ac:	orr	x21, x21, x23
    e6b0:	tbnz	w19, #2, e724 <regcomp+0xd4>
    e6b4:	ldrb	w1, [x20, #56]
    e6b8:	ubfx	x19, x19, #3, #1
    e6bc:	ubfiz	w0, w0, #7, #1
    e6c0:	mov	w2, #0x6f                  	// #111
    e6c4:	orr	w19, w0, w19, lsl #4
    e6c8:	and	w0, w1, w2
    e6cc:	orr	w19, w19, w0
    e6d0:	str	xzr, [x20, #40]
    e6d4:	strb	w19, [x20, #56]
    e6d8:	mov	x0, x22
    e6dc:	bl	0 <grub_strlen>
    e6e0:	mov	x2, x0
    e6e4:	mov	x3, x21
    e6e8:	mov	x1, x22
    e6ec:	mov	x0, x20
    e6f0:	bl	9898 <re_compile_internal>
    e6f4:	mov	w19, w0
    e6f8:	cmp	w0, #0x10
    e6fc:	b.eq	e734 <regcomp+0xe4>  // b.none
    e700:	cbnz	w0, e738 <regcomp+0xe8>
    e704:	mov	x0, x20
    e708:	bl	e0a8 <re_compile_fastmap>
    e70c:	mov	w0, w19
    e710:	ldp	x19, x20, [sp, #16]
    e714:	ldp	x21, x22, [sp, #32]
    e718:	ldr	x23, [sp, #48]
    e71c:	ldp	x29, x30, [sp], #64
    e720:	ret
    e724:	and	x21, x21, #0xffffffffffffffbf
    e728:	mov	w0, #0x1                   	// #1
    e72c:	orr	x21, x21, #0x100
    e730:	b	e6b4 <regcomp+0x64>
    e734:	mov	w19, #0x8                   	// #8
    e738:	ldr	x0, [x20, #32]
    e73c:	bl	0 <grub_free>
    e740:	str	xzr, [x20, #32]
    e744:	b	e70c <regcomp+0xbc>
    e748:	mov	w19, #0xc                   	// #12
    e74c:	mov	w0, w19
    e750:	ldp	x19, x20, [sp, #16]
    e754:	ldp	x21, x22, [sp, #32]
    e758:	ldr	x23, [sp, #48]
    e75c:	ldp	x29, x30, [sp], #64
    e760:	ret
    e764:	nop

000000000000e768 <regerror>:
    e768:	stp	x29, x30, [sp, #-48]!
    e76c:	cmp	w0, #0x10
    e770:	mov	x29, sp
    e774:	stp	x19, x20, [sp, #16]
    e778:	stp	x21, x22, [sp, #32]
    e77c:	mov	x22, x2
    e780:	mov	x21, x3
    e784:	b.hi	e7dc <regerror+0x74>  // b.pmore
    e788:	adrp	x1, 0 <grub_cmd_regexp>
    e78c:	ldr	x19, [x1]
    e790:	add	x1, x19, #0x228
    e794:	add	x19, x19, #0xa8
    e798:	ldr	x1, [x1, w0, sxtw #3]
    e79c:	add	x19, x19, x1
    e7a0:	mov	x0, x19
    e7a4:	bl	0 <grub_strlen>
    e7a8:	add	x20, x0, #0x1
    e7ac:	cbz	x21, e7c8 <regerror+0x60>
    e7b0:	cmp	x20, x21
    e7b4:	mov	x2, x20
    e7b8:	b.hi	e7e8 <regerror+0x80>  // b.pmore
    e7bc:	mov	x1, x19
    e7c0:	mov	x0, x22
    e7c4:	bl	0 <grub_memmove>
    e7c8:	mov	x0, x20
    e7cc:	ldp	x19, x20, [sp, #16]
    e7d0:	ldp	x21, x22, [sp, #32]
    e7d4:	ldp	x29, x30, [sp], #48
    e7d8:	ret
    e7dc:	adrp	x0, 0 <grub_cmd_regexp>
    e7e0:	ldr	x19, [x0]
    e7e4:	b	e7a0 <regerror+0x38>
    e7e8:	sub	x2, x21, #0x1
    e7ec:	strb	wzr, [x22, x2]
    e7f0:	b	e7bc <regerror+0x54>
    e7f4:	nop
	...

000000000000e808 <regfree>:
    e808:	stp	x29, x30, [sp, #-32]!
    e80c:	mov	x29, sp
    e810:	str	x19, [sp, #16]
    e814:	mov	x19, x0
    e818:	ldr	x0, [x0]
    e81c:	cbz	x0, e824 <regfree+0x1c>
    e820:	bl	2268 <free_dfa_content>
    e824:	ldr	x0, [x19, #32]
    e828:	stp	xzr, xzr, [x19]
    e82c:	bl	0 <grub_free>
    e830:	str	xzr, [x19, #32]
    e834:	ldr	x0, [x19, #40]
    e838:	bl	0 <grub_free>
    e83c:	str	xzr, [x19, #40]
    e840:	ldr	x19, [sp, #16]
    e844:	ldp	x29, x30, [sp], #32
    e848:	ret
    e84c:	nop

000000000000e850 <regexec>:
    e850:	tst	w4, #0xfffffff8
    e854:	b.ne	e928 <regexec+0xd8>  // b.any
    e858:	sub	sp, sp, #0x60
    e85c:	stp	x29, x30, [sp, #16]
    e860:	add	x29, sp, #0x10
    e864:	stp	x19, x20, [sp, #32]
    e868:	mov	w19, w4
    e86c:	mov	x20, x0
    e870:	stp	x21, x22, [sp, #48]
    e874:	mov	x22, x2
    e878:	mov	x21, x3
    e87c:	str	x23, [sp, #64]
    e880:	and	w23, w4, #0x4
    e884:	tbz	w19, #2, e910 <regexec+0xc0>
    e888:	ldp	w23, w5, [x3]
    e88c:	ldrb	w0, [x20, #56]
    e890:	str	w19, [sp]
    e894:	tbnz	w0, #4, e8d4 <regexec+0x84>
    e898:	mov	x7, x21
    e89c:	mov	x6, x22
    e8a0:	mov	w3, w23
    e8a4:	mov	x0, x20
    e8a8:	mov	w4, w5
    e8ac:	mov	w2, w5
    e8b0:	bl	bd78 <re_search_internal>
    e8b4:	cmp	w0, #0x0
    e8b8:	cset	w0, ne  // ne = any
    e8bc:	ldp	x29, x30, [sp, #16]
    e8c0:	ldp	x19, x20, [sp, #32]
    e8c4:	ldp	x21, x22, [sp, #48]
    e8c8:	ldr	x23, [sp, #64]
    e8cc:	add	sp, sp, #0x60
    e8d0:	ret
    e8d4:	mov	w3, w23
    e8d8:	mov	x0, x20
    e8dc:	mov	w4, w5
    e8e0:	mov	w2, w5
    e8e4:	mov	x7, #0x0                   	// #0
    e8e8:	mov	x6, #0x0                   	// #0
    e8ec:	bl	bd78 <re_search_internal>
    e8f0:	cmp	w0, #0x0
    e8f4:	cset	w0, ne  // ne = any
    e8f8:	ldp	x29, x30, [sp, #16]
    e8fc:	ldp	x19, x20, [sp, #32]
    e900:	ldp	x21, x22, [sp, #48]
    e904:	ldr	x23, [sp, #64]
    e908:	add	sp, sp, #0x60
    e90c:	ret
    e910:	mov	x0, x1
    e914:	str	x1, [sp, #88]
    e918:	bl	0 <grub_strlen>
    e91c:	mov	w5, w0
    e920:	ldr	x1, [sp, #88]
    e924:	b	e88c <regexec+0x3c>
    e928:	mov	w0, #0x2                   	// #2
    e92c:	ret

000000000000e930 <re_match>:
    e930:	mov	x6, x4
    e934:	mov	w5, w2
    e938:	mov	w7, #0x1                   	// #1
    e93c:	mov	w4, #0x0                   	// #0
    e940:	b	e178 <re_search_stub>
    e944:	nop

000000000000e948 <re_search>:
    e948:	mov	x6, x5
    e94c:	mov	w7, #0x0                   	// #0
    e950:	mov	w5, w2
    e954:	b	e178 <re_search_stub>

000000000000e958 <re_match_2>:
    e958:	sub	sp, sp, #0x20
    e95c:	mov	w8, #0x1                   	// #1
    e960:	stp	x29, x30, [sp, #16]
    e964:	add	x29, sp, #0x10
    e968:	str	w7, [sp]
    e96c:	mov	x7, x6
    e970:	strb	w8, [sp, #8]
    e974:	mov	w6, #0x0                   	// #0
    e978:	bl	e530 <re_search_2_stub>
    e97c:	ldp	x29, x30, [sp, #16]
    e980:	add	sp, sp, #0x20
    e984:	ret

000000000000e988 <re_search_2>:
    e988:	sub	sp, sp, #0x20
    e98c:	stp	x29, x30, [sp, #16]
    e990:	add	x29, sp, #0x10
    e994:	ldr	w8, [sp, #32]
    e998:	str	w8, [sp]
    e99c:	strb	wzr, [sp, #8]
    e9a0:	bl	e530 <re_search_2_stub>
    e9a4:	ldp	x29, x30, [sp, #16]
    e9a8:	add	sp, sp, #0x20
    e9ac:	ret

000000000000e9b0 <re_set_registers>:
    e9b0:	cbz	w2, e9d0 <re_set_registers+0x20>
    e9b4:	ldrb	w5, [x0, #56]
    e9b8:	mov	w6, #0x1                   	// #1
    e9bc:	bfi	w5, w6, #1, #2
    e9c0:	strb	w5, [x0, #56]
    e9c4:	str	w2, [x1]
    e9c8:	stp	x3, x4, [x1, #8]
    e9cc:	ret
    e9d0:	ldrb	w2, [x0, #56]
    e9d4:	and	w2, w2, #0xfffffff9
    e9d8:	strb	w2, [x0, #56]
    e9dc:	str	wzr, [x1]
    e9e0:	stp	xzr, xzr, [x1, #8]
    e9e4:	ret
