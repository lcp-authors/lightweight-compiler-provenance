
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-portabled_clang_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

00000000004040c8 <_init>:
  4040c8:	stp	x29, x30, [sp, #-16]!
  4040cc:	mov	x29, sp
  4040d0:	bl	404d70 <call_weak_fn>
  4040d4:	ldp	x29, x30, [sp], #16
  4040d8:	ret

Disassembly of section .plt:

00000000004040e0 <__libc_start_main@plt-0x20>:
  4040e0:	stp	x16, x30, [sp, #-16]!
  4040e4:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4040e8:	ldr	x17, [x16, #2432]
  4040ec:	add	x16, x16, #0x980
  4040f0:	br	x17
  4040f4:	nop
  4040f8:	nop
  4040fc:	nop

0000000000404100 <__libc_start_main@plt>:
  404100:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404104:	ldr	x17, [x16, #2440]
  404108:	add	x16, x16, #0x988
  40410c:	br	x17

0000000000404110 <abort@plt>:
  404110:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404114:	ldr	x17, [x16, #2448]
  404118:	add	x16, x16, #0x990
  40411c:	br	x17

0000000000404120 <__gmon_start__@plt>:
  404120:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404124:	ldr	x17, [x16, #2456]
  404128:	add	x16, x16, #0x998
  40412c:	br	x17

0000000000404130 <safe_close@plt>:
  404130:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404134:	ldr	x17, [x16, #2464]
  404138:	add	x16, x16, #0x9a0
  40413c:	br	x17

0000000000404140 <free@plt>:
  404140:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404144:	ldr	x17, [x16, #2472]
  404148:	add	x16, x16, #0x9a8
  40414c:	br	x17

0000000000404150 <log_assert_failed_realm@plt>:
  404150:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404154:	ldr	x17, [x16, #2480]
  404158:	add	x16, x16, #0x9b0
  40415c:	br	x17

0000000000404160 <malloc@plt>:
  404160:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404164:	ldr	x17, [x16, #2488]
  404168:	add	x16, x16, #0x9b8
  40416c:	br	x17

0000000000404170 <internal_hashmap_size@plt>:
  404170:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404174:	ldr	x17, [x16, #2496]
  404178:	add	x16, x16, #0x9c0
  40417c:	br	x17

0000000000404180 <internal_hashmap_iterate@plt>:
  404180:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404184:	ldr	x17, [x16, #2504]
  404188:	add	x16, x16, #0x9c8
  40418c:	br	x17

0000000000404190 <strcmp@plt>:
  404190:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404194:	ldr	x17, [x16, #2512]
  404198:	add	x16, x16, #0x9d0
  40419c:	br	x17

00000000004041a0 <qsort@plt>:
  4041a0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4041a4:	ldr	x17, [x16, #2520]
  4041a8:	add	x16, x16, #0x9d8
  4041ac:	br	x17

00000000004041b0 <image_find_harder@plt>:
  4041b0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4041b4:	ldr	x17, [x16, #2528]
  4041b8:	add	x16, x16, #0x9e0
  4041bc:	br	x17

00000000004041c0 <image_unref@plt>:
  4041c0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4041c4:	ldr	x17, [x16, #2536]
  4041c8:	add	x16, x16, #0x9e8
  4041cc:	br	x17

00000000004041d0 <loop_device_make_by_path@plt>:
  4041d0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4041d4:	ldr	x17, [x16, #2544]
  4041d8:	add	x16, x16, #0x9f0
  4041dc:	br	x17

00000000004041e0 <log_get_max_level_realm@plt>:
  4041e0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4041e4:	ldr	x17, [x16, #2552]
  4041e8:	add	x16, x16, #0x9f8
  4041ec:	br	x17

00000000004041f0 <log_internal_realm@plt>:
  4041f0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4041f4:	ldr	x17, [x16, #2560]
  4041f8:	add	x16, x16, #0xa00
  4041fc:	br	x17

0000000000404200 <abs@plt>:
  404200:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404204:	ldr	x17, [x16, #2568]
  404208:	add	x16, x16, #0xa08
  40420c:	br	x17

0000000000404210 <sigprocmask_many@plt>:
  404210:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404214:	ldr	x17, [x16, #2576]
  404218:	add	x16, x16, #0xa10
  40421c:	br	x17

0000000000404220 <memcpy@plt>:
  404220:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404224:	ldr	x17, [x16, #2584]
  404228:	add	x16, x16, #0xa18
  40422c:	br	x17

0000000000404230 <mkdtemp_malloc@plt>:
  404230:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404234:	ldr	x17, [x16, #2592]
  404238:	add	x16, x16, #0xa20
  40423c:	br	x17

0000000000404240 <dissect_image@plt>:
  404240:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404244:	ldr	x17, [x16, #2600]
  404248:	add	x16, x16, #0xa28
  40424c:	br	x17

0000000000404250 <sd_bus_error_setf@plt>:
  404250:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404254:	ldr	x17, [x16, #2608]
  404258:	add	x16, x16, #0xa30
  40425c:	br	x17

0000000000404260 <socketpair@plt>:
  404260:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404264:	ldr	x17, [x16, #2616]
  404268:	add	x16, x16, #0xa38
  40426c:	br	x17

0000000000404270 <__errno_location@plt>:
  404270:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404274:	ldr	x17, [x16, #2624]
  404278:	add	x16, x16, #0xa40
  40427c:	br	x17

0000000000404280 <dissected_image_mount@plt>:
  404280:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404284:	ldr	x17, [x16, #2632]
  404288:	add	x16, x16, #0xa48
  40428c:	br	x17

0000000000404290 <_exit@plt>:
  404290:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404294:	ldr	x17, [x16, #2640]
  404298:	add	x16, x16, #0xa50
  40429c:	br	x17

00000000004042a0 <internal_hashmap_new@plt>:
  4042a0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4042a4:	ldr	x17, [x16, #2648]
  4042a8:	add	x16, x16, #0xa58
  4042ac:	br	x17

00000000004042b0 <hashmap_put@plt>:
  4042b0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4042b4:	ldr	x17, [x16, #2656]
  4042b8:	add	x16, x16, #0xa60
  4042bc:	br	x17

00000000004042c0 <log_assert_failed_unreachable_realm@plt>:
  4042c0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4042c4:	ldr	x17, [x16, #2664]
  4042c8:	add	x16, x16, #0xa68
  4042cc:	br	x17

00000000004042d0 <wait_for_terminate_and_check@plt>:
  4042d0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4042d4:	ldr	x17, [x16, #2672]
  4042d8:	add	x16, x16, #0xa70
  4042dc:	br	x17

00000000004042e0 <sigkill_waitp@plt>:
  4042e0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4042e4:	ldr	x17, [x16, #2680]
  4042e8:	add	x16, x16, #0xa78
  4042ec:	br	x17

00000000004042f0 <memset@plt>:
  4042f0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4042f4:	ldr	x17, [x16, #2688]
  4042f8:	add	x16, x16, #0xa80
  4042fc:	br	x17

0000000000404300 <lookup_paths_init@plt>:
  404300:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404304:	ldr	x17, [x16, #2696]
  404308:	add	x16, x16, #0xa88
  40430c:	br	x17

0000000000404310 <unit_file_exists@plt>:
  404310:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404314:	ldr	x17, [x16, #2704]
  404318:	add	x16, x16, #0xa90
  40431c:	br	x17

0000000000404320 <sd_bus_error_set_errnof@plt>:
  404320:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404324:	ldr	x17, [x16, #2712]
  404328:	add	x16, x16, #0xa98
  40432c:	br	x17

0000000000404330 <lookup_paths_free@plt>:
  404330:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404334:	ldr	x17, [x16, #2720]
  404338:	add	x16, x16, #0xaa0
  40433c:	br	x17

0000000000404340 <unit_name_is_valid@plt>:
  404340:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404344:	ldr	x17, [x16, #2728]
  404348:	add	x16, x16, #0xaa8
  40434c:	br	x17

0000000000404350 <unit_dbus_path_from_name@plt>:
  404350:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404354:	ldr	x17, [x16, #2736]
  404358:	add	x16, x16, #0xab0
  40435c:	br	x17

0000000000404360 <sd_bus_get_property_string@plt>:
  404360:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404364:	ldr	x17, [x16, #2744]
  404368:	add	x16, x16, #0xab8
  40436c:	br	x17

0000000000404370 <bus_error_message@plt>:
  404370:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404374:	ldr	x17, [x16, #2752]
  404378:	add	x16, x16, #0xac0
  40437c:	br	x17

0000000000404380 <strv_find@plt>:
  404380:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404384:	ldr	x17, [x16, #2760]
  404388:	add	x16, x16, #0xac8
  40438c:	br	x17

0000000000404390 <sd_bus_message_new_method_call@plt>:
  404390:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404394:	ldr	x17, [x16, #2768]
  404398:	add	x16, x16, #0xad0
  40439c:	br	x17

00000000004043a0 <sd_bus_message_append_strv@plt>:
  4043a0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4043a4:	ldr	x17, [x16, #2776]
  4043a8:	add	x16, x16, #0xad8
  4043ac:	br	x17

00000000004043b0 <strchr@plt>:
  4043b0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4043b4:	ldr	x17, [x16, #2784]
  4043b8:	add	x16, x16, #0xae0
  4043bc:	br	x17

00000000004043c0 <strnlen@plt>:
  4043c0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4043c4:	ldr	x17, [x16, #2792]
  4043c8:	add	x16, x16, #0xae8
  4043cc:	br	x17

00000000004043d0 <strlen@plt>:
  4043d0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4043d4:	ldr	x17, [x16, #2800]
  4043d8:	add	x16, x16, #0xaf0
  4043dc:	br	x17

00000000004043e0 <stpcpy@plt>:
  4043e0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4043e4:	ldr	x17, [x16, #2808]
  4043e8:	add	x16, x16, #0xaf8
  4043ec:	br	x17

00000000004043f0 <sd_bus_call@plt>:
  4043f0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4043f4:	ldr	x17, [x16, #2816]
  4043f8:	add	x16, x16, #0xb00
  4043fc:	br	x17

0000000000404400 <sd_bus_message_enter_container@plt>:
  404400:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404404:	ldr	x17, [x16, #2824]
  404408:	add	x16, x16, #0xb08
  40440c:	br	x17

0000000000404410 <mkdir_parents@plt>:
  404410:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404414:	ldr	x17, [x16, #2832]
  404418:	add	x16, x16, #0xb10
  40441c:	br	x17

0000000000404420 <mkdir@plt>:
  404420:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404424:	ldr	x17, [x16, #2840]
  404428:	add	x16, x16, #0xb18
  40442c:	br	x17

0000000000404430 <strcpy@plt>:
  404430:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404434:	ldr	x17, [x16, #2848]
  404438:	add	x16, x16, #0xb20
  40443c:	br	x17

0000000000404440 <strjoin_real@plt>:
  404440:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404444:	ldr	x17, [x16, #2856]
  404448:	add	x16, x16, #0xb28
  40444c:	br	x17

0000000000404450 <symlink@plt>:
  404450:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404454:	ldr	x17, [x16, #2864]
  404458:	add	x16, x16, #0xb30
  40445c:	br	x17

0000000000404460 <open_tmpfile_linkable@plt>:
  404460:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404464:	ldr	x17, [x16, #2872]
  404468:	add	x16, x16, #0xb38
  40446c:	br	x17

0000000000404470 <fchmod@plt>:
  404470:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404474:	ldr	x17, [x16, #2880]
  404478:	add	x16, x16, #0xb40
  40447c:	br	x17

0000000000404480 <link_tmpfile@plt>:
  404480:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404484:	ldr	x17, [x16, #2888]
  404488:	add	x16, x16, #0xb48
  40448c:	br	x17

0000000000404490 <image_in_search_path@plt>:
  404490:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404494:	ldr	x17, [x16, #2896]
  404498:	add	x16, x16, #0xb50
  40449c:	br	x17

00000000004044a0 <special_glyph@plt>:
  4044a0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4044a4:	ldr	x17, [x16, #2904]
  4044a8:	add	x16, x16, #0xb58
  4044ac:	br	x17

00000000004044b0 <opendir@plt>:
  4044b0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4044b4:	ldr	x17, [x16, #2912]
  4044b8:	add	x16, x16, #0xb60
  4044bc:	br	x17

00000000004044c0 <internal_set_new@plt>:
  4044c0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4044c4:	ldr	x17, [x16, #2920]
  4044c8:	add	x16, x16, #0xb68
  4044cc:	br	x17

00000000004044d0 <readdir64@plt>:
  4044d0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4044d4:	ldr	x17, [x16, #2928]
  4044d8:	add	x16, x16, #0xb70
  4044dc:	br	x17

00000000004044e0 <hidden_or_backup_file@plt>:
  4044e0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4044e4:	ldr	x17, [x16, #2936]
  4044e8:	add	x16, x16, #0xb78
  4044ec:	br	x17

00000000004044f0 <dirent_ensure_type@plt>:
  4044f0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4044f4:	ldr	x17, [x16, #2944]
  4044f8:	add	x16, x16, #0xb80
  4044fc:	br	x17

0000000000404500 <unit_file_lookup_state@plt>:
  404500:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404504:	ldr	x17, [x16, #2952]
  404508:	add	x16, x16, #0xb88
  40450c:	br	x17

0000000000404510 <unit_file_state_to_string@plt>:
  404510:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404514:	ldr	x17, [x16, #2960]
  404518:	add	x16, x16, #0xb90
  40451c:	br	x17

0000000000404520 <set_put_strdup@plt>:
  404520:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404524:	ldr	x17, [x16, #2968]
  404528:	add	x16, x16, #0xb98
  40452c:	br	x17

0000000000404530 <path_is_absolute@plt>:
  404530:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404534:	ldr	x17, [x16, #2976]
  404538:	add	x16, x16, #0xba0
  40453c:	br	x17

0000000000404540 <internal_set_ensure_allocated@plt>:
  404540:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404544:	ldr	x17, [x16, #2984]
  404548:	add	x16, x16, #0xba8
  40454c:	br	x17

0000000000404550 <set_put@plt>:
  404550:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404554:	ldr	x17, [x16, #2992]
  404558:	add	x16, x16, #0xbb0
  40455c:	br	x17

0000000000404560 <set_iterate@plt>:
  404560:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404564:	ldr	x17, [x16, #3000]
  404568:	add	x16, x16, #0xbb8
  40456c:	br	x17

0000000000404570 <dirfd@plt>:
  404570:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404574:	ldr	x17, [x16, #3008]
  404578:	add	x16, x16, #0xbc0
  40457c:	br	x17

0000000000404580 <unlinkat@plt>:
  404580:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404584:	ldr	x17, [x16, #3016]
  404588:	add	x16, x16, #0xbc8
  40458c:	br	x17

0000000000404590 <unlink@plt>:
  404590:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404594:	ldr	x17, [x16, #3024]
  404598:	add	x16, x16, #0xbd0
  40459c:	br	x17

00000000004045a0 <rmdir@plt>:
  4045a0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4045a4:	ldr	x17, [x16, #3032]
  4045a8:	add	x16, x16, #0xbd8
  4045ac:	br	x17

00000000004045b0 <closedir@plt>:
  4045b0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4045b4:	ldr	x17, [x16, #3040]
  4045b8:	add	x16, x16, #0xbe0
  4045bc:	br	x17

00000000004045c0 <internal_hashmap_get@plt>:
  4045c0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4045c4:	ldr	x17, [x16, #3048]
  4045c8:	add	x16, x16, #0xbe8
  4045cc:	br	x17

00000000004045d0 <openat64@plt>:
  4045d0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4045d4:	ldr	x17, [x16, #3056]
  4045d8:	add	x16, x16, #0xbf0
  4045dc:	br	x17

00000000004045e0 <fdopen_unlocked@plt>:
  4045e0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4045e4:	ldr	x17, [x16, #3064]
  4045e8:	add	x16, x16, #0xbf8
  4045ec:	br	x17

00000000004045f0 <endswith@plt>:
  4045f0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4045f4:	ldr	x17, [x16, #3072]
  4045f8:	add	x16, x16, #0xc00
  4045fc:	br	x17

0000000000404600 <strndup@plt>:
  404600:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404604:	ldr	x17, [x16, #3080]
  404608:	add	x16, x16, #0xc08
  40460c:	br	x17

0000000000404610 <last_path_component@plt>:
  404610:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404614:	ldr	x17, [x16, #3088]
  404618:	add	x16, x16, #0xc10
  40461c:	br	x17

0000000000404620 <reallocarray@plt>:
  404620:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404624:	ldr	x17, [x16, #3096]
  404628:	add	x16, x16, #0xc18
  40462c:	br	x17

0000000000404630 <strdup@plt>:
  404630:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404634:	ldr	x17, [x16, #3104]
  404638:	add	x16, x16, #0xc20
  40463c:	br	x17

0000000000404640 <path_simplify@plt>:
  404640:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404644:	ldr	x17, [x16, #3112]
  404648:	add	x16, x16, #0xc28
  40464c:	br	x17

0000000000404650 <conf_files_list_nulstr@plt>:
  404650:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404654:	ldr	x17, [x16, #3120]
  404658:	add	x16, x16, #0xc30
  40465c:	br	x17

0000000000404660 <string_table_lookup@plt>:
  404660:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404664:	ldr	x17, [x16, #3128]
  404668:	add	x16, x16, #0xc38
  40466c:	br	x17

0000000000404670 <loop_device_unref@plt>:
  404670:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404674:	ldr	x17, [x16, #3136]
  404678:	add	x16, x16, #0xc40
  40467c:	br	x17

0000000000404680 <open_os_release@plt>:
  404680:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404684:	ldr	x17, [x16, #3144]
  404688:	add	x16, x16, #0xc48
  40468c:	br	x17

0000000000404690 <chase_symlinks_and_opendir@plt>:
  404690:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404694:	ldr	x17, [x16, #3152]
  404698:	add	x16, x16, #0xc50
  40469c:	br	x17

00000000004046a0 <path_join_internal@plt>:
  4046a0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4046a4:	ldr	x17, [x16, #3160]
  4046a8:	add	x16, x16, #0xc58
  4046ac:	br	x17

00000000004046b0 <dissected_image_unref@plt>:
  4046b0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4046b4:	ldr	x17, [x16, #3168]
  4046b8:	add	x16, x16, #0xc60
  4046bc:	br	x17

00000000004046c0 <safe_close_pair@plt>:
  4046c0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4046c4:	ldr	x17, [x16, #3176]
  4046c8:	add	x16, x16, #0xc68
  4046cc:	br	x17

00000000004046d0 <sigprocmask@plt>:
  4046d0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4046d4:	ldr	x17, [x16, #3184]
  4046d8:	add	x16, x16, #0xc70
  4046dc:	br	x17

00000000004046e0 <safe_fork_full@plt>:
  4046e0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4046e4:	ldr	x17, [x16, #3192]
  4046e8:	add	x16, x16, #0xc78
  4046ec:	br	x17

00000000004046f0 <recvmsg@plt>:
  4046f0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4046f4:	ldr	x17, [x16, #3200]
  4046f8:	add	x16, x16, #0xc80
  4046fc:	br	x17

0000000000404700 <cmsg_close_all@plt>:
  404700:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404704:	ldr	x17, [x16, #3208]
  404708:	add	x16, x16, #0xc88
  40470c:	br	x17

0000000000404710 <__cmsg_nxthdr@plt>:
  404710:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404714:	ldr	x17, [x16, #3216]
  404718:	add	x16, x16, #0xc90
  40471c:	br	x17

0000000000404720 <calloc@plt>:
  404720:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404724:	ldr	x17, [x16, #3224]
  404728:	add	x16, x16, #0xc98
  40472c:	br	x17

0000000000404730 <fd_duplicate_data_fd@plt>:
  404730:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404734:	ldr	x17, [x16, #3232]
  404738:	add	x16, x16, #0xca0
  40473c:	br	x17

0000000000404740 <sendmsg@plt>:
  404740:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404744:	ldr	x17, [x16, #3240]
  404748:	add	x16, x16, #0xca8
  40474c:	br	x17

0000000000404750 <strrchr@plt>:
  404750:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404754:	ldr	x17, [x16, #3248]
  404758:	add	x16, x16, #0xcb0
  40475c:	br	x17

0000000000404760 <strncmp@plt>:
  404760:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404764:	ldr	x17, [x16, #3256]
  404768:	add	x16, x16, #0xcb8
  40476c:	br	x17

0000000000404770 <internal_hashmap_free@plt>:
  404770:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404774:	ldr	x17, [x16, #3264]
  404778:	add	x16, x16, #0xcc0
  40477c:	br	x17

0000000000404780 <sd_bus_message_unref@plt>:
  404780:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404784:	ldr	x17, [x16, #3272]
  404788:	add	x16, x16, #0xcc8
  40478c:	br	x17

0000000000404790 <basename@plt>:
  404790:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404794:	ldr	x17, [x16, #3280]
  404798:	add	x16, x16, #0xcd0
  40479c:	br	x17

00000000004047a0 <strextend_with_separator@plt>:
  4047a0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4047a4:	ldr	x17, [x16, #3288]
  4047a8:	add	x16, x16, #0xcd8
  4047ac:	br	x17

00000000004047b0 <copy_bytes_full@plt>:
  4047b0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4047b4:	ldr	x17, [x16, #3296]
  4047b8:	add	x16, x16, #0xce0
  4047bc:	br	x17

00000000004047c0 <unlink_noerrno@plt>:
  4047c0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4047c4:	ldr	x17, [x16, #3304]
  4047c8:	add	x16, x16, #0xce8
  4047cc:	br	x17

00000000004047d0 <write_string_file_ts@plt>:
  4047d0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4047d4:	ldr	x17, [x16, #3312]
  4047d8:	add	x16, x16, #0xcf0
  4047dc:	br	x17

00000000004047e0 <faccessat@plt>:
  4047e0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4047e4:	ldr	x17, [x16, #3320]
  4047e8:	add	x16, x16, #0xcf8
  4047ec:	br	x17

00000000004047f0 <copy_file_atomic_full@plt>:
  4047f0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4047f4:	ldr	x17, [x16, #3328]
  4047f8:	add	x16, x16, #0xd00
  4047fc:	br	x17

0000000000404800 <safe_fclose@plt>:
  404800:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404804:	ldr	x17, [x16, #3336]
  404808:	add	x16, x16, #0xd08
  40480c:	br	x17

0000000000404810 <read_line_full@plt>:
  404810:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404814:	ldr	x17, [x16, #3344]
  404818:	add	x16, x16, #0xd10
  40481c:	br	x17

0000000000404820 <image_name_is_valid@plt>:
  404820:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404824:	ldr	x17, [x16, #3352]
  404828:	add	x16, x16, #0xd18
  40482c:	br	x17

0000000000404830 <strspn@plt>:
  404830:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404834:	ldr	x17, [x16, #3360]
  404838:	add	x16, x16, #0xd20
  40483c:	br	x17

0000000000404840 <strcspn@plt>:
  404840:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404844:	ldr	x17, [x16, #3368]
  404848:	add	x16, x16, #0xd28
  40484c:	br	x17

0000000000404850 <memcmp@plt>:
  404850:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404854:	ldr	x17, [x16, #3376]
  404858:	add	x16, x16, #0xd30
  40485c:	br	x17

0000000000404860 <string_hash_func@plt>:
  404860:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404864:	ldr	x17, [x16, #3384]
  404868:	add	x16, x16, #0xd38
  40486c:	br	x17

0000000000404870 <sd_bus_message_append@plt>:
  404870:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404874:	ldr	x17, [x16, #3392]
  404878:	add	x16, x16, #0xd40
  40487c:	br	x17

0000000000404880 <open64@plt>:
  404880:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404884:	ldr	x17, [x16, #3400]
  404888:	add	x16, x16, #0xd48
  40488c:	br	x17

0000000000404890 <btrfs_subvol_get_subtree_quota_fd@plt>:
  404890:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404894:	ldr	x17, [x16, #3408]
  404898:	add	x16, x16, #0xd50
  40489c:	br	x17

00000000004048a0 <sd_bus_message_read@plt>:
  4048a0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4048a4:	ldr	x17, [x16, #3416]
  4048a8:	add	x16, x16, #0xd58
  4048ac:	br	x17

00000000004048b0 <sd_bus_reply_method_return@plt>:
  4048b0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4048b4:	ldr	x17, [x16, #3424]
  4048b8:	add	x16, x16, #0xd60
  4048bc:	br	x17

00000000004048c0 <sd_bus_message_new_method_return@plt>:
  4048c0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4048c4:	ldr	x17, [x16, #3432]
  4048c8:	add	x16, x16, #0xd68
  4048cc:	br	x17

00000000004048d0 <sd_bus_message_open_container@plt>:
  4048d0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4048d4:	ldr	x17, [x16, #3440]
  4048d8:	add	x16, x16, #0xd70
  4048dc:	br	x17

00000000004048e0 <sd_bus_message_get_bus@plt>:
  4048e0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4048e4:	ldr	x17, [x16, #3448]
  4048e8:	add	x16, x16, #0xd78
  4048ec:	br	x17

00000000004048f0 <image_type_to_string@plt>:
  4048f0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4048f4:	ldr	x17, [x16, #3456]
  4048f8:	add	x16, x16, #0xd80
  4048fc:	br	x17

0000000000404900 <sd_bus_error_free@plt>:
  404900:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404904:	ldr	x17, [x16, #3464]
  404908:	add	x16, x16, #0xd88
  40490c:	br	x17

0000000000404910 <sd_bus_message_close_container@plt>:
  404910:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404914:	ldr	x17, [x16, #3472]
  404918:	add	x16, x16, #0xd90
  40491c:	br	x17

0000000000404920 <sd_bus_send@plt>:
  404920:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404924:	ldr	x17, [x16, #3480]
  404928:	add	x16, x16, #0xd98
  40492c:	br	x17

0000000000404930 <bus_verify_polkit_async@plt>:
  404930:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404934:	ldr	x17, [x16, #3488]
  404938:	add	x16, x16, #0xda0
  40493c:	br	x17

0000000000404940 <btrfs_qgroup_set_limit@plt>:
  404940:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404944:	ldr	x17, [x16, #3496]
  404948:	add	x16, x16, #0xda8
  40494c:	br	x17

0000000000404950 <btrfs_subvol_set_subtree_quota_limit@plt>:
  404950:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404954:	ldr	x17, [x16, #3504]
  404958:	add	x16, x16, #0xdb0
  40495c:	br	x17

0000000000404960 <strv_free@plt>:
  404960:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404964:	ldr	x17, [x16, #3512]
  404968:	add	x16, x16, #0xdb8
  40496c:	br	x17

0000000000404970 <image_read_metadata@plt>:
  404970:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404974:	ldr	x17, [x16, #3520]
  404978:	add	x16, x16, #0xdc0
  40497c:	br	x17

0000000000404980 <bus_reply_pair_array@plt>:
  404980:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404984:	ldr	x17, [x16, #3528]
  404988:	add	x16, x16, #0xdc8
  40498c:	br	x17

0000000000404990 <image_find@plt>:
  404990:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404994:	ldr	x17, [x16, #3536]
  404998:	add	x16, x16, #0xdd0
  40499c:	br	x17

00000000004049a0 <path_is_normalized@plt>:
  4049a0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4049a4:	ldr	x17, [x16, #3544]
  4049a8:	add	x16, x16, #0xdd8
  4049ac:	br	x17

00000000004049b0 <image_from_path@plt>:
  4049b0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4049b4:	ldr	x17, [x16, #3552]
  4049b8:	add	x16, x16, #0xde0
  4049bc:	br	x17

00000000004049c0 <sd_bus_message_read_strv@plt>:
  4049c0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4049c4:	ldr	x17, [x16, #3560]
  4049c8:	add	x16, x16, #0xde8
  4049cc:	br	x17

00000000004049d0 <fdopen@plt>:
  4049d0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4049d4:	ldr	x17, [x16, #3568]
  4049d8:	add	x16, x16, #0xdf0
  4049dc:	br	x17

00000000004049e0 <sd_bus_message_append_array@plt>:
  4049e0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4049e4:	ldr	x17, [x16, #3576]
  4049e8:	add	x16, x16, #0xdf8
  4049ec:	br	x17

00000000004049f0 <sd_bus_reply_method_errorf@plt>:
  4049f0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  4049f4:	ldr	x17, [x16, #3584]
  4049f8:	add	x16, x16, #0xe00
  4049fc:	br	x17

0000000000404a00 <pipe2@plt>:
  404a00:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404a04:	ldr	x17, [x16, #3592]
  404a08:	add	x16, x16, #0xe08
  404a0c:	br	x17

0000000000404a10 <image_remove@plt>:
  404a10:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404a14:	ldr	x17, [x16, #3600]
  404a18:	add	x16, x16, #0xe10
  404a1c:	br	x17

0000000000404a20 <write@plt>:
  404a20:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404a24:	ldr	x17, [x16, #3608]
  404a28:	add	x16, x16, #0xe18
  404a2c:	br	x17

0000000000404a30 <image_read_only@plt>:
  404a30:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404a34:	ldr	x17, [x16, #3616]
  404a38:	add	x16, x16, #0xe20
  404a3c:	br	x17

0000000000404a40 <image_set_limit@plt>:
  404a40:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404a44:	ldr	x17, [x16, #3624]
  404a48:	add	x16, x16, #0xe28
  404a4c:	br	x17

0000000000404a50 <sd_bus_path_encode@plt>:
  404a50:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404a54:	ldr	x17, [x16, #3632]
  404a58:	add	x16, x16, #0xe30
  404a5c:	br	x17

0000000000404a60 <sd_bus_path_decode@plt>:
  404a60:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404a64:	ldr	x17, [x16, #3640]
  404a68:	add	x16, x16, #0xe38
  404a6c:	br	x17

0000000000404a70 <sd_bus_get_current_message@plt>:
  404a70:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404a74:	ldr	x17, [x16, #3648]
  404a78:	add	x16, x16, #0xe40
  404a7c:	br	x17

0000000000404a80 <greedy_realloc@plt>:
  404a80:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404a84:	ldr	x17, [x16, #3656]
  404a88:	add	x16, x16, #0xe48
  404a8c:	br	x17

0000000000404a90 <read_full_stream_full@plt>:
  404a90:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404a94:	ldr	x17, [x16, #3664]
  404a98:	add	x16, x16, #0xe50
  404a9c:	br	x17

0000000000404aa0 <bus_property_get_bool@plt>:
  404aa0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404aa4:	ldr	x17, [x16, #3672]
  404aa8:	add	x16, x16, #0xe58
  404aac:	br	x17

0000000000404ab0 <image_ref@plt>:
  404ab0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404ab4:	ldr	x17, [x16, #3680]
  404ab8:	add	x16, x16, #0xe60
  404abc:	br	x17

0000000000404ac0 <internal_hashmap_ensure_allocated@plt>:
  404ac0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404ac4:	ldr	x17, [x16, #3688]
  404ac8:	add	x16, x16, #0xe68
  404acc:	br	x17

0000000000404ad0 <sd_event_add_defer@plt>:
  404ad0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404ad4:	ldr	x17, [x16, #3696]
  404ad8:	add	x16, x16, #0xe70
  404adc:	br	x17

0000000000404ae0 <sd_event_source_set_priority@plt>:
  404ae0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404ae4:	ldr	x17, [x16, #3704]
  404ae8:	add	x16, x16, #0xe78
  404aec:	br	x17

0000000000404af0 <sd_event_source_set_enabled@plt>:
  404af0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404af4:	ldr	x17, [x16, #3712]
  404af8:	add	x16, x16, #0xe80
  404afc:	br	x17

0000000000404b00 <image_discover@plt>:
  404b00:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404b04:	ldr	x17, [x16, #3720]
  404b08:	add	x16, x16, #0xe88
  404b0c:	br	x17

0000000000404b10 <internal_hashmap_clear@plt>:
  404b10:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404b14:	ldr	x17, [x16, #3728]
  404b18:	add	x16, x16, #0xe90
  404b1c:	br	x17

0000000000404b20 <sd_event_add_child@plt>:
  404b20:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404b24:	ldr	x17, [x16, #3736]
  404b28:	add	x16, x16, #0xe98
  404b2c:	br	x17

0000000000404b30 <sd_bus_message_ref@plt>:
  404b30:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404b34:	ldr	x17, [x16, #3744]
  404b38:	add	x16, x16, #0xea0
  404b3c:	br	x17

0000000000404b40 <sigchld_code_to_string@plt>:
  404b40:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404b44:	ldr	x17, [x16, #3752]
  404b48:	add	x16, x16, #0xea8
  404b4c:	br	x17

0000000000404b50 <read@plt>:
  404b50:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404b54:	ldr	x17, [x16, #3760]
  404b58:	add	x16, x16, #0xeb0
  404b5c:	br	x17

0000000000404b60 <sd_bus_error_is_set@plt>:
  404b60:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404b64:	ldr	x17, [x16, #3768]
  404b68:	add	x16, x16, #0xeb8
  404b6c:	br	x17

0000000000404b70 <sd_bus_error_set_errno@plt>:
  404b70:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404b74:	ldr	x17, [x16, #3776]
  404b78:	add	x16, x16, #0xec0
  404b7c:	br	x17

0000000000404b80 <sd_bus_reply_method_error@plt>:
  404b80:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404b84:	ldr	x17, [x16, #3784]
  404b88:	add	x16, x16, #0xec8
  404b8c:	br	x17

0000000000404b90 <sd_event_source_unref@plt>:
  404b90:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404b94:	ldr	x17, [x16, #3792]
  404b98:	add	x16, x16, #0xed0
  404b9c:	br	x17

0000000000404ba0 <sigkill_wait@plt>:
  404ba0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404ba4:	ldr	x17, [x16, #3800]
  404ba8:	add	x16, x16, #0xed8
  404bac:	br	x17

0000000000404bb0 <ask_password_agent_close@plt>:
  404bb0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404bb4:	ldr	x17, [x16, #3808]
  404bb8:	add	x16, x16, #0xee0
  404bbc:	br	x17

0000000000404bc0 <polkit_agent_close@plt>:
  404bc0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404bc4:	ldr	x17, [x16, #3816]
  404bc8:	add	x16, x16, #0xee8
  404bcc:	br	x17

0000000000404bd0 <pager_close@plt>:
  404bd0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404bd4:	ldr	x17, [x16, #3824]
  404bd8:	add	x16, x16, #0xef0
  404bdc:	br	x17

0000000000404be0 <mac_selinux_finish@plt>:
  404be0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404be4:	ldr	x17, [x16, #3832]
  404be8:	add	x16, x16, #0xef8
  404bec:	br	x17

0000000000404bf0 <log_setup_service@plt>:
  404bf0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404bf4:	ldr	x17, [x16, #3840]
  404bf8:	add	x16, x16, #0xf00
  404bfc:	br	x17

0000000000404c00 <umask@plt>:
  404c00:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404c04:	ldr	x17, [x16, #3848]
  404c08:	add	x16, x16, #0xf08
  404c0c:	br	x17

0000000000404c10 <getpid_cached@plt>:
  404c10:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404c14:	ldr	x17, [x16, #3856]
  404c18:	add	x16, x16, #0xf10
  404c1c:	br	x17

0000000000404c20 <sd_notify@plt>:
  404c20:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404c24:	ldr	x17, [x16, #3864]
  404c28:	add	x16, x16, #0xf18
  404c2c:	br	x17

0000000000404c30 <sd_event_default@plt>:
  404c30:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404c34:	ldr	x17, [x16, #3872]
  404c38:	add	x16, x16, #0xf20
  404c3c:	br	x17

0000000000404c40 <sd_event_add_signal@plt>:
  404c40:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404c44:	ldr	x17, [x16, #3880]
  404c48:	add	x16, x16, #0xf28
  404c4c:	br	x17

0000000000404c50 <sd_event_set_watchdog@plt>:
  404c50:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404c54:	ldr	x17, [x16, #3888]
  404c58:	add	x16, x16, #0xf30
  404c5c:	br	x17

0000000000404c60 <bus_event_loop_with_idle@plt>:
  404c60:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404c64:	ldr	x17, [x16, #3896]
  404c68:	add	x16, x16, #0xf38
  404c6c:	br	x17

0000000000404c70 <bus_verify_polkit_async_registry_free@plt>:
  404c70:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404c74:	ldr	x17, [x16, #3904]
  404c78:	add	x16, x16, #0xf40
  404c7c:	br	x17

0000000000404c80 <sd_bus_flush_close_unref@plt>:
  404c80:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404c84:	ldr	x17, [x16, #3912]
  404c88:	add	x16, x16, #0xf48
  404c8c:	br	x17

0000000000404c90 <sd_event_unref@plt>:
  404c90:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404c94:	ldr	x17, [x16, #3920]
  404c98:	add	x16, x16, #0xf50
  404c9c:	br	x17

0000000000404ca0 <sd_bus_default_system@plt>:
  404ca0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404ca4:	ldr	x17, [x16, #3928]
  404ca8:	add	x16, x16, #0xf58
  404cac:	br	x17

0000000000404cb0 <sd_bus_add_object_vtable@plt>:
  404cb0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404cb4:	ldr	x17, [x16, #3936]
  404cb8:	add	x16, x16, #0xf60
  404cbc:	br	x17

0000000000404cc0 <sd_bus_add_fallback_vtable@plt>:
  404cc0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404cc4:	ldr	x17, [x16, #3944]
  404cc8:	add	x16, x16, #0xf68
  404ccc:	br	x17

0000000000404cd0 <sd_bus_add_node_enumerator@plt>:
  404cd0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404cd4:	ldr	x17, [x16, #3952]
  404cd8:	add	x16, x16, #0xf70
  404cdc:	br	x17

0000000000404ce0 <sd_bus_request_name_async@plt>:
  404ce0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404ce4:	ldr	x17, [x16, #3960]
  404ce8:	add	x16, x16, #0xf78
  404cec:	br	x17

0000000000404cf0 <sd_bus_attach_event@plt>:
  404cf0:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404cf4:	ldr	x17, [x16, #3968]
  404cf8:	add	x16, x16, #0xf80
  404cfc:	br	x17

0000000000404d00 <sd_bus_set_exit_on_disconnect@plt>:
  404d00:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404d04:	ldr	x17, [x16, #3976]
  404d08:	add	x16, x16, #0xf88
  404d0c:	br	x17

0000000000404d10 <__lxstat64@plt>:
  404d10:	adrp	x16, 42f000 <__FRAME_END__+0x18438>
  404d14:	ldr	x17, [x16, #3984]
  404d18:	add	x16, x16, #0xf90
  404d1c:	br	x17

Disassembly of section .text:

0000000000404d20 <_start>:
  404d20:	mov	x29, #0x0                   	// #0
  404d24:	mov	x30, #0x0                   	// #0
  404d28:	mov	x5, x0
  404d2c:	ldr	x1, [sp]
  404d30:	add	x2, sp, #0x8
  404d34:	mov	x6, sp
  404d38:	movz	x0, #0x0, lsl #48
  404d3c:	movk	x0, #0x0, lsl #32
  404d40:	movk	x0, #0x41, lsl #16
  404d44:	movk	x0, #0x213c
  404d48:	movz	x3, #0x0, lsl #48
  404d4c:	movk	x3, #0x0, lsl #32
  404d50:	movk	x3, #0x41, lsl #16
  404d54:	movk	x3, #0x30e8
  404d58:	movz	x4, #0x0, lsl #48
  404d5c:	movk	x4, #0x0, lsl #32
  404d60:	movk	x4, #0x41, lsl #16
  404d64:	movk	x4, #0x3168
  404d68:	bl	404100 <__libc_start_main@plt>
  404d6c:	bl	404110 <abort@plt>

0000000000404d70 <call_weak_fn>:
  404d70:	adrp	x0, 42f000 <__FRAME_END__+0x18438>
  404d74:	ldr	x0, [x0, #2392]
  404d78:	cbz	x0, 404d80 <call_weak_fn+0x10>
  404d7c:	b	404120 <__gmon_start__@plt>
  404d80:	ret

0000000000404d84 <deregister_tm_clones>:
  404d84:	stp	x29, x30, [sp, #-32]!
  404d88:	mov	x29, sp
  404d8c:	adrp	x0, 430000 <__TMC_END__>
  404d90:	add	x0, x0, #0x0
  404d94:	str	x0, [sp, #24]
  404d98:	ldr	x0, [sp, #24]
  404d9c:	str	x0, [sp, #24]
  404da0:	ldr	x1, [sp, #24]
  404da4:	adrp	x0, 430000 <__TMC_END__>
  404da8:	add	x0, x0, #0x0
  404dac:	cmp	x1, x0
  404db0:	b.eq	404dec <deregister_tm_clones+0x68>  // b.none
  404db4:	adrp	x0, 413000 <manager_connect_bus+0x4e4>
  404db8:	add	x0, x0, #0x190
  404dbc:	ldr	x0, [x0]
  404dc0:	str	x0, [sp, #16]
  404dc4:	ldr	x0, [sp, #16]
  404dc8:	str	x0, [sp, #16]
  404dcc:	ldr	x0, [sp, #16]
  404dd0:	cmp	x0, #0x0
  404dd4:	b.eq	404df0 <deregister_tm_clones+0x6c>  // b.none
  404dd8:	ldr	x1, [sp, #16]
  404ddc:	adrp	x0, 430000 <__TMC_END__>
  404de0:	add	x0, x0, #0x0
  404de4:	blr	x1
  404de8:	b	404df0 <deregister_tm_clones+0x6c>
  404dec:	nop
  404df0:	ldp	x29, x30, [sp], #32
  404df4:	ret

0000000000404df8 <register_tm_clones>:
  404df8:	stp	x29, x30, [sp, #-48]!
  404dfc:	mov	x29, sp
  404e00:	adrp	x0, 430000 <__TMC_END__>
  404e04:	add	x0, x0, #0x0
  404e08:	str	x0, [sp, #40]
  404e0c:	ldr	x0, [sp, #40]
  404e10:	str	x0, [sp, #40]
  404e14:	ldr	x1, [sp, #40]
  404e18:	adrp	x0, 430000 <__TMC_END__>
  404e1c:	add	x0, x0, #0x0
  404e20:	sub	x0, x1, x0
  404e24:	asr	x0, x0, #3
  404e28:	lsr	x1, x0, #63
  404e2c:	add	x0, x1, x0
  404e30:	asr	x0, x0, #1
  404e34:	str	x0, [sp, #32]
  404e38:	ldr	x0, [sp, #32]
  404e3c:	cmp	x0, #0x0
  404e40:	b.eq	404e80 <register_tm_clones+0x88>  // b.none
  404e44:	adrp	x0, 413000 <manager_connect_bus+0x4e4>
  404e48:	add	x0, x0, #0x198
  404e4c:	ldr	x0, [x0]
  404e50:	str	x0, [sp, #24]
  404e54:	ldr	x0, [sp, #24]
  404e58:	str	x0, [sp, #24]
  404e5c:	ldr	x0, [sp, #24]
  404e60:	cmp	x0, #0x0
  404e64:	b.eq	404e84 <register_tm_clones+0x8c>  // b.none
  404e68:	ldr	x2, [sp, #24]
  404e6c:	ldr	x1, [sp, #32]
  404e70:	adrp	x0, 430000 <__TMC_END__>
  404e74:	add	x0, x0, #0x0
  404e78:	blr	x2
  404e7c:	b	404e84 <register_tm_clones+0x8c>
  404e80:	nop
  404e84:	ldp	x29, x30, [sp], #48
  404e88:	ret

0000000000404e8c <__do_global_dtors_aux>:
  404e8c:	stp	x29, x30, [sp, #-16]!
  404e90:	mov	x29, sp
  404e94:	adrp	x0, 430000 <__TMC_END__>
  404e98:	add	x0, x0, #0x30
  404e9c:	ldrb	w0, [x0]
  404ea0:	and	x0, x0, #0xff
  404ea4:	cmp	x0, #0x0
  404ea8:	b.ne	404ec4 <__do_global_dtors_aux+0x38>  // b.any
  404eac:	bl	404d84 <deregister_tm_clones>
  404eb0:	adrp	x0, 430000 <__TMC_END__>
  404eb4:	add	x0, x0, #0x30
  404eb8:	mov	w1, #0x1                   	// #1
  404ebc:	strb	w1, [x0]
  404ec0:	b	404ec8 <__do_global_dtors_aux+0x3c>
  404ec4:	nop
  404ec8:	ldp	x29, x30, [sp], #16
  404ecc:	ret

0000000000404ed0 <frame_dummy>:
  404ed0:	stp	x29, x30, [sp, #-16]!
  404ed4:	mov	x29, sp
  404ed8:	bl	404df8 <register_tm_clones>
  404edc:	nop
  404ee0:	ldp	x29, x30, [sp], #16
  404ee4:	ret

0000000000404ee8 <portable_metadata_unref>:
  404ee8:	sub	sp, sp, #0x20
  404eec:	stp	x29, x30, [sp, #16]
  404ef0:	add	x29, sp, #0x10
  404ef4:	str	x0, [sp]
  404ef8:	ldr	x8, [sp]
  404efc:	cbnz	x8, 404f0c <portable_metadata_unref+0x24>
  404f00:	mov	x8, xzr
  404f04:	str	x8, [sp, #8]
  404f08:	b	404f34 <portable_metadata_unref+0x4c>
  404f0c:	ldr	x8, [sp]
  404f10:	ldr	w0, [x8]
  404f14:	bl	404130 <safe_close@plt>
  404f18:	ldr	x8, [sp]
  404f1c:	ldr	x8, [x8, #8]
  404f20:	mov	x0, x8
  404f24:	bl	404140 <free@plt>
  404f28:	ldr	x0, [sp]
  404f2c:	bl	404f44 <mfree>
  404f30:	str	x0, [sp, #8]
  404f34:	ldr	x0, [sp, #8]
  404f38:	ldp	x29, x30, [sp, #16]
  404f3c:	add	sp, sp, #0x20
  404f40:	ret

0000000000404f44 <mfree>:
  404f44:	sub	sp, sp, #0x20
  404f48:	stp	x29, x30, [sp, #16]
  404f4c:	add	x29, sp, #0x10
  404f50:	mov	x8, xzr
  404f54:	str	x0, [sp, #8]
  404f58:	ldr	x0, [sp, #8]
  404f5c:	str	x8, [sp]
  404f60:	bl	404140 <free@plt>
  404f64:	ldr	x0, [sp]
  404f68:	ldp	x29, x30, [sp, #16]
  404f6c:	add	sp, sp, #0x20
  404f70:	ret

0000000000404f74 <portable_metadata_hashmap_to_sorted_array>:
  404f74:	sub	sp, sp, #0xa0
  404f78:	stp	x29, x30, [sp, #144]
  404f7c:	add	x29, sp, #0x90
  404f80:	mov	x8, xzr
  404f84:	mov	x9, #0x8                   	// #8
  404f88:	adrp	x10, 413000 <manager_connect_bus+0x4e4>
  404f8c:	add	x10, x10, #0x4ee
  404f90:	add	x2, x10, #0x3
  404f94:	stur	x0, [x29, #-16]
  404f98:	stur	x1, [x29, #-24]
  404f9c:	stur	x8, [x29, #-32]
  404fa0:	stur	xzr, [x29, #-64]
  404fa4:	ldur	x0, [x29, #-16]
  404fa8:	str	x9, [sp, #24]
  404fac:	str	x2, [sp, #16]
  404fb0:	bl	4051bc <hashmap_size>
  404fb4:	mov	w8, w0
  404fb8:	ubfx	x1, x8, #0, #32
  404fbc:	ldr	x0, [sp, #24]
  404fc0:	bl	405140 <malloc_multiply>
  404fc4:	stur	x0, [x29, #-32]
  404fc8:	ldur	x8, [x29, #-32]
  404fcc:	cbnz	x8, 404fe4 <portable_metadata_hashmap_to_sorted_array+0x70>
  404fd0:	mov	w8, #0xfffffff4            	// #-12
  404fd4:	stur	w8, [x29, #-4]
  404fd8:	mov	w8, #0x1                   	// #1
  404fdc:	stur	w8, [x29, #-68]
  404fe0:	b	405100 <portable_metadata_hashmap_to_sorted_array+0x18c>
  404fe4:	add	x8, sp, #0x38
  404fe8:	mov	w9, #0xfffffffe            	// #-2
  404fec:	str	w9, [sp, #56]
  404ff0:	mov	x10, xzr
  404ff4:	str	x10, [x8, #8]
  404ff8:	ldur	q0, [sp, #56]
  404ffc:	stur	q0, [x29, #-48]
  405000:	ldur	x0, [x29, #-16]
  405004:	sub	x1, x29, #0x30
  405008:	sub	x2, x29, #0x38
  40500c:	mov	x8, xzr
  405010:	mov	x3, x8
  405014:	bl	4051e0 <hashmap_iterate>
  405018:	tbnz	w0, #0, 405020 <portable_metadata_hashmap_to_sorted_array+0xac>
  40501c:	b	405048 <portable_metadata_hashmap_to_sorted_array+0xd4>
  405020:	ldur	x8, [x29, #-56]
  405024:	ldur	x9, [x29, #-32]
  405028:	ldur	x10, [x29, #-64]
  40502c:	add	x11, x10, #0x1
  405030:	stur	x11, [x29, #-64]
  405034:	mov	x11, #0x8                   	// #8
  405038:	mul	x10, x11, x10
  40503c:	add	x9, x9, x10
  405040:	str	x8, [x9]
  405044:	b	405000 <portable_metadata_hashmap_to_sorted_array+0x8c>
  405048:	ldur	x8, [x29, #-64]
  40504c:	ldur	x0, [x29, #-16]
  405050:	str	x8, [sp, #8]
  405054:	bl	4051bc <hashmap_size>
  405058:	mov	w8, w0
  40505c:	ubfx	x8, x8, #0, #32
  405060:	ldr	x9, [sp, #8]
  405064:	cmp	x9, x8
  405068:	cset	w10, eq  // eq = none
  40506c:	mov	w11, #0x1                   	// #1
  405070:	eor	w10, w10, #0x1
  405074:	eor	w10, w10, w11
  405078:	eor	w10, w10, w11
  40507c:	and	w10, w10, #0x1
  405080:	mov	w1, w10
  405084:	sxtw	x8, w1
  405088:	cbz	x8, 4050b0 <portable_metadata_hashmap_to_sorted_array+0x13c>
  40508c:	mov	w8, wzr
  405090:	mov	w0, w8
  405094:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  405098:	add	x1, x1, #0x4d0
  40509c:	ldr	x2, [sp, #16]
  4050a0:	mov	w3, #0x73                  	// #115
  4050a4:	adrp	x4, 413000 <manager_connect_bus+0x4e4>
  4050a8:	add	x4, x4, #0x509
  4050ac:	bl	404150 <log_assert_failed_realm@plt>
  4050b0:	adrp	x8, 405000 <portable_metadata_hashmap_to_sorted_array+0x8c>
  4050b4:	add	x8, x8, #0x220
  4050b8:	str	x8, [sp, #48]
  4050bc:	ldur	x0, [x29, #-32]
  4050c0:	ldur	x1, [x29, #-64]
  4050c4:	ldr	x3, [sp, #48]
  4050c8:	mov	x2, #0x8                   	// #8
  4050cc:	bl	40525c <qsort_safe>
  4050d0:	ldur	x8, [x29, #-32]
  4050d4:	str	x8, [sp, #40]
  4050d8:	mov	x8, xzr
  4050dc:	stur	x8, [x29, #-32]
  4050e0:	ldr	x8, [sp, #40]
  4050e4:	str	x8, [sp, #32]
  4050e8:	ldr	x8, [sp, #32]
  4050ec:	ldur	x9, [x29, #-24]
  4050f0:	str	x8, [x9]
  4050f4:	stur	wzr, [x29, #-4]
  4050f8:	mov	w10, #0x1                   	// #1
  4050fc:	stur	w10, [x29, #-68]
  405100:	sub	x0, x29, #0x20
  405104:	bl	405118 <freep>
  405108:	ldur	w0, [x29, #-4]
  40510c:	ldp	x29, x30, [sp, #144]
  405110:	add	sp, sp, #0xa0
  405114:	ret

0000000000405118 <freep>:
  405118:	sub	sp, sp, #0x20
  40511c:	stp	x29, x30, [sp, #16]
  405120:	add	x29, sp, #0x10
  405124:	str	x0, [sp, #8]
  405128:	ldr	x8, [sp, #8]
  40512c:	ldr	x0, [x8]
  405130:	bl	404140 <free@plt>
  405134:	ldp	x29, x30, [sp, #16]
  405138:	add	sp, sp, #0x20
  40513c:	ret

0000000000405140 <malloc_multiply>:
  405140:	sub	sp, sp, #0x40
  405144:	stp	x29, x30, [sp, #48]
  405148:	add	x29, sp, #0x30
  40514c:	stur	x0, [x29, #-16]
  405150:	str	x1, [sp, #24]
  405154:	ldur	x0, [x29, #-16]
  405158:	ldr	x1, [sp, #24]
  40515c:	bl	40a720 <size_multiply_overflow>
  405160:	tbnz	w0, #0, 405168 <malloc_multiply+0x28>
  405164:	b	405174 <malloc_multiply+0x34>
  405168:	mov	x8, xzr
  40516c:	stur	x8, [x29, #-8]
  405170:	b	4051ac <malloc_multiply+0x6c>
  405174:	ldur	x8, [x29, #-16]
  405178:	ldr	x9, [sp, #24]
  40517c:	mul	x8, x8, x9
  405180:	str	x8, [sp, #16]
  405184:	cbz	x8, 405194 <malloc_multiply+0x54>
  405188:	ldr	x8, [sp, #16]
  40518c:	str	x8, [sp, #8]
  405190:	b	40519c <malloc_multiply+0x5c>
  405194:	mov	x8, #0x1                   	// #1
  405198:	str	x8, [sp, #8]
  40519c:	ldr	x8, [sp, #8]
  4051a0:	mov	x0, x8
  4051a4:	bl	404160 <malloc@plt>
  4051a8:	stur	x0, [x29, #-8]
  4051ac:	ldur	x0, [x29, #-8]
  4051b0:	ldp	x29, x30, [sp, #48]
  4051b4:	add	sp, sp, #0x40
  4051b8:	ret

00000000004051bc <hashmap_size>:
  4051bc:	sub	sp, sp, #0x20
  4051c0:	stp	x29, x30, [sp, #16]
  4051c4:	add	x29, sp, #0x10
  4051c8:	str	x0, [sp, #8]
  4051cc:	ldr	x0, [sp, #8]
  4051d0:	bl	404170 <internal_hashmap_size@plt>
  4051d4:	ldp	x29, x30, [sp, #16]
  4051d8:	add	sp, sp, #0x20
  4051dc:	ret

00000000004051e0 <hashmap_iterate>:
  4051e0:	sub	sp, sp, #0x30
  4051e4:	stp	x29, x30, [sp, #32]
  4051e8:	add	x29, sp, #0x20
  4051ec:	stur	x0, [x29, #-8]
  4051f0:	str	x1, [sp, #16]
  4051f4:	str	x2, [sp, #8]
  4051f8:	str	x3, [sp]
  4051fc:	ldur	x0, [x29, #-8]
  405200:	ldr	x1, [sp, #16]
  405204:	ldr	x2, [sp, #8]
  405208:	ldr	x3, [sp]
  40520c:	bl	404180 <internal_hashmap_iterate@plt>
  405210:	and	w0, w0, #0x1
  405214:	ldp	x29, x30, [sp, #32]
  405218:	add	sp, sp, #0x30
  40521c:	ret

0000000000405220 <compare_metadata>:
  405220:	sub	sp, sp, #0x20
  405224:	stp	x29, x30, [sp, #16]
  405228:	add	x29, sp, #0x10
  40522c:	str	x0, [sp, #8]
  405230:	str	x1, [sp]
  405234:	ldr	x8, [sp, #8]
  405238:	ldr	x8, [x8]
  40523c:	add	x0, x8, #0x10
  405240:	ldr	x8, [sp]
  405244:	ldr	x8, [x8]
  405248:	add	x1, x8, #0x10
  40524c:	bl	404190 <strcmp@plt>
  405250:	ldp	x29, x30, [sp, #16]
  405254:	add	sp, sp, #0x20
  405258:	ret

000000000040525c <qsort_safe>:
  40525c:	sub	sp, sp, #0x40
  405260:	stp	x29, x30, [sp, #48]
  405264:	add	x29, sp, #0x30
  405268:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  40526c:	add	x8, x8, #0xae9
  405270:	add	x8, x8, #0x3
  405274:	stur	x0, [x29, #-8]
  405278:	stur	x1, [x29, #-16]
  40527c:	str	x2, [sp, #24]
  405280:	str	x3, [sp, #16]
  405284:	ldur	x9, [x29, #-16]
  405288:	cmp	x9, #0x1
  40528c:	str	x8, [sp, #8]
  405290:	b.hi	405298 <qsort_safe+0x3c>  // b.pmore
  405294:	b	4052fc <qsort_safe+0xa0>
  405298:	ldur	x8, [x29, #-8]
  40529c:	cmp	x8, #0x0
  4052a0:	cset	w9, ne  // ne = any
  4052a4:	mov	w10, #0x1                   	// #1
  4052a8:	eor	w9, w9, #0x1
  4052ac:	eor	w9, w9, w10
  4052b0:	eor	w9, w9, w10
  4052b4:	and	w9, w9, #0x1
  4052b8:	mov	w0, w9
  4052bc:	sxtw	x8, w0
  4052c0:	cbz	x8, 4052e8 <qsort_safe+0x8c>
  4052c4:	mov	w8, wzr
  4052c8:	mov	w0, w8
  4052cc:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  4052d0:	add	x1, x1, #0xae4
  4052d4:	ldr	x2, [sp, #8]
  4052d8:	mov	w3, #0x2e                  	// #46
  4052dc:	adrp	x4, 413000 <manager_connect_bus+0x4e4>
  4052e0:	add	x4, x4, #0xb02
  4052e4:	bl	404150 <log_assert_failed_realm@plt>
  4052e8:	ldur	x0, [x29, #-8]
  4052ec:	ldur	x1, [x29, #-16]
  4052f0:	ldr	x2, [sp, #24]
  4052f4:	ldr	x3, [sp, #16]
  4052f8:	bl	4041a0 <qsort@plt>
  4052fc:	ldp	x29, x30, [sp, #48]
  405300:	add	sp, sp, #0x40
  405304:	ret

0000000000405308 <portable_extract>:
  405308:	sub	sp, sp, #0x60
  40530c:	stp	x29, x30, [sp, #80]
  405310:	add	x29, sp, #0x50
  405314:	mov	x8, xzr
  405318:	adrp	x9, 413000 <manager_connect_bus+0x4e4>
  40531c:	add	x9, x9, #0x4ee
  405320:	add	x9, x9, #0x3
  405324:	stur	x0, [x29, #-16]
  405328:	stur	x1, [x29, #-24]
  40532c:	stur	x2, [x29, #-32]
  405330:	str	x3, [sp, #40]
  405334:	str	x4, [sp, #32]
  405338:	str	x8, [sp, #24]
  40533c:	str	x9, [sp, #8]
  405340:	ldur	x8, [x29, #-16]
  405344:	cmp	x8, #0x0
  405348:	cset	w9, ne  // ne = any
  40534c:	mov	w10, #0x1                   	// #1
  405350:	eor	w9, w9, #0x1
  405354:	eor	w9, w9, w10
  405358:	eor	w9, w9, w10
  40535c:	and	w9, w9, #0x1
  405360:	mov	w0, w9
  405364:	sxtw	x8, w0
  405368:	cbz	x8, 405390 <portable_extract+0x88>
  40536c:	mov	w8, wzr
  405370:	mov	w0, w8
  405374:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  405378:	add	x1, x1, #0x558
  40537c:	ldr	x2, [sp, #8]
  405380:	mov	w3, #0x1f7                 	// #503
  405384:	adrp	x4, 413000 <manager_connect_bus+0x4e4>
  405388:	add	x4, x4, #0x565
  40538c:	bl	404150 <log_assert_failed_realm@plt>
  405390:	ldur	x1, [x29, #-16]
  405394:	mov	w0, #0x1                   	// #1
  405398:	add	x2, sp, #0x18
  40539c:	bl	4041b0 <image_find_harder@plt>
  4053a0:	str	w0, [sp, #20]
  4053a4:	ldr	w8, [sp, #20]
  4053a8:	cmp	w8, #0x0
  4053ac:	cset	w8, ge  // ge = tcont
  4053b0:	tbnz	w8, #0, 4053c8 <portable_extract+0xc0>
  4053b4:	ldr	w8, [sp, #20]
  4053b8:	stur	w8, [x29, #-4]
  4053bc:	mov	w8, #0x1                   	// #1
  4053c0:	str	w8, [sp, #16]
  4053c4:	b	4053f0 <portable_extract+0xe8>
  4053c8:	ldr	x8, [sp, #24]
  4053cc:	ldr	x0, [x8, #16]
  4053d0:	ldur	x1, [x29, #-24]
  4053d4:	ldur	x2, [x29, #-32]
  4053d8:	ldr	x3, [sp, #40]
  4053dc:	ldr	x4, [sp, #32]
  4053e0:	bl	40543c <portable_extract_by_path>
  4053e4:	stur	w0, [x29, #-4]
  4053e8:	mov	w9, #0x1                   	// #1
  4053ec:	str	w9, [sp, #16]
  4053f0:	add	x0, sp, #0x18
  4053f4:	bl	405408 <image_unrefp>
  4053f8:	ldur	w0, [x29, #-4]
  4053fc:	ldp	x29, x30, [sp, #80]
  405400:	add	sp, sp, #0x60
  405404:	ret

0000000000405408 <image_unrefp>:
  405408:	sub	sp, sp, #0x20
  40540c:	stp	x29, x30, [sp, #16]
  405410:	add	x29, sp, #0x10
  405414:	str	x0, [sp, #8]
  405418:	ldr	x8, [sp, #8]
  40541c:	ldr	x8, [x8]
  405420:	cbz	x8, 405430 <image_unrefp+0x28>
  405424:	ldr	x8, [sp, #8]
  405428:	ldr	x0, [x8]
  40542c:	bl	4041c0 <image_unref@plt>
  405430:	ldp	x29, x30, [sp, #16]
  405434:	add	sp, sp, #0x20
  405438:	ret

000000000040543c <portable_extract_by_path>:
  40543c:	stp	x29, x30, [sp, #-32]!
  405440:	str	x28, [sp, #16]
  405444:	mov	x29, sp
  405448:	sub	sp, sp, #0x270
  40544c:	mov	x8, xzr
  405450:	adrp	x9, 413000 <manager_connect_bus+0x4e4>
  405454:	add	x9, x9, #0xc4c
  405458:	adrp	x10, 413000 <manager_connect_bus+0x4e4>
  40545c:	add	x10, x10, #0x4ee
  405460:	add	x10, x10, #0x3
  405464:	adrp	x11, 413000 <manager_connect_bus+0x4e4>
  405468:	add	x11, x11, #0xba3
  40546c:	adrp	x12, 413000 <manager_connect_bus+0x4e4>
  405470:	add	x12, x12, #0xb3e
  405474:	stur	x0, [x29, #-16]
  405478:	stur	x1, [x29, #-24]
  40547c:	stur	x2, [x29, #-32]
  405480:	stur	x3, [x29, #-40]
  405484:	stur	x4, [x29, #-48]
  405488:	stur	x8, [x29, #-56]
  40548c:	stur	x8, [x29, #-64]
  405490:	stur	x8, [x29, #-72]
  405494:	str	x9, [sp, #64]
  405498:	str	x10, [sp, #56]
  40549c:	str	x11, [sp, #48]
  4054a0:	str	x12, [sp, #40]
  4054a4:	ldur	x8, [x29, #-16]
  4054a8:	cmp	x8, #0x0
  4054ac:	cset	w9, ne  // ne = any
  4054b0:	mov	w10, #0x1                   	// #1
  4054b4:	eor	w9, w9, #0x1
  4054b8:	eor	w9, w9, w10
  4054bc:	eor	w9, w9, w10
  4054c0:	and	w9, w9, #0x1
  4054c4:	mov	w0, w9
  4054c8:	sxtw	x8, w0
  4054cc:	cbz	x8, 4054f0 <portable_extract_by_path+0xb4>
  4054d0:	mov	w8, wzr
  4054d4:	mov	w0, w8
  4054d8:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  4054dc:	add	x1, x1, #0xb39
  4054e0:	ldr	x2, [sp, #56]
  4054e4:	mov	w3, #0x168                 	// #360
  4054e8:	ldr	x4, [sp, #40]
  4054ec:	bl	404150 <log_assert_failed_realm@plt>
  4054f0:	ldur	x0, [x29, #-16]
  4054f4:	mov	w8, wzr
  4054f8:	mov	w1, w8
  4054fc:	sub	x2, x29, #0x48
  405500:	bl	4041d0 <loop_device_make_by_path@plt>
  405504:	stur	w0, [x29, #-76]
  405508:	ldur	w8, [x29, #-76]
  40550c:	mov	w9, #0xffffffeb            	// #-21
  405510:	cmp	w8, w9
  405514:	b.ne	40555c <portable_extract_by_path+0x120>  // b.any
  405518:	ldur	x0, [x29, #-16]
  40551c:	ldur	x1, [x29, #-24]
  405520:	mov	w2, #0xffffffff            	// #-1
  405524:	sub	x3, x29, #0x40
  405528:	sub	x4, x29, #0x38
  40552c:	bl	40a7f0 <extract_now>
  405530:	stur	w0, [x29, #-76]
  405534:	ldur	w8, [x29, #-76]
  405538:	cmp	w8, #0x0
  40553c:	cset	w8, ge  // ge = tcont
  405540:	tbnz	w8, #0, 405558 <portable_extract_by_path+0x11c>
  405544:	ldur	w8, [x29, #-76]
  405548:	stur	w8, [x29, #-4]
  40554c:	mov	w8, #0x1                   	// #1
  405550:	stur	w8, [x29, #-80]
  405554:	b	405f90 <portable_extract_by_path+0xb54>
  405558:	b	405ec4 <portable_extract_by_path+0xa88>
  40555c:	ldur	w8, [x29, #-76]
  405560:	cmp	w8, #0x0
  405564:	cset	w8, ge  // ge = tcont
  405568:	tbnz	w8, #0, 4055f8 <portable_extract_by_path+0x1bc>
  40556c:	mov	w8, #0x7                   	// #7
  405570:	stur	w8, [x29, #-84]
  405574:	ldur	w8, [x29, #-76]
  405578:	stur	w8, [x29, #-88]
  40557c:	stur	wzr, [x29, #-92]
  405580:	ldur	w0, [x29, #-92]
  405584:	bl	4041e0 <log_get_max_level_realm@plt>
  405588:	ldur	w8, [x29, #-84]
  40558c:	and	w8, w8, #0x7
  405590:	cmp	w0, w8
  405594:	b.lt	4055c8 <portable_extract_by_path+0x18c>  // b.tstop
  405598:	ldur	w8, [x29, #-92]
  40559c:	ldur	w9, [x29, #-84]
  4055a0:	orr	w0, w9, w8, lsl #10
  4055a4:	ldur	w1, [x29, #-88]
  4055a8:	ldr	x2, [sp, #56]
  4055ac:	mov	w3, #0x174                 	// #372
  4055b0:	ldr	x4, [sp, #48]
  4055b4:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  4055b8:	add	x5, x5, #0xbbc
  4055bc:	bl	4041f0 <log_internal_realm@plt>
  4055c0:	str	w0, [sp, #36]
  4055c4:	b	4055dc <portable_extract_by_path+0x1a0>
  4055c8:	ldur	w0, [x29, #-88]
  4055cc:	bl	404200 <abs@plt>
  4055d0:	mov	w8, wzr
  4055d4:	subs	w8, w8, w0, uxtb
  4055d8:	str	w8, [sp, #36]
  4055dc:	ldr	w8, [sp, #36]
  4055e0:	stur	w8, [x29, #-96]
  4055e4:	ldur	w8, [x29, #-96]
  4055e8:	stur	w8, [x29, #-4]
  4055ec:	mov	w8, #0x1                   	// #1
  4055f0:	stur	w8, [x29, #-80]
  4055f4:	b	405f90 <portable_extract_by_path+0xb54>
  4055f8:	mov	x8, xzr
  4055fc:	stur	x8, [x29, #-104]
  405600:	stur	x8, [x29, #-112]
  405604:	adrp	x8, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  405608:	add	x8, x8, #0x280
  40560c:	ldr	x8, [x8]
  405610:	stur	x8, [x29, #-120]
  405614:	stur	wzr, [x29, #-124]
  405618:	mov	w8, wzr
  40561c:	mov	w0, w8
  405620:	add	x1, sp, #0xf0
  405624:	mov	w2, #0x11                  	// #17
  405628:	mov	w3, #0xffffffff            	// #-1
  40562c:	bl	404210 <sigprocmask_many@plt>
  405630:	cmp	w0, #0x0
  405634:	cset	w8, ge  // ge = tcont
  405638:	mov	w9, #0x1                   	// #1
  40563c:	eor	w8, w8, #0x1
  405640:	eor	w8, w8, w9
  405644:	eor	w8, w8, w9
  405648:	and	w8, w8, #0x1
  40564c:	mov	w1, w8
  405650:	sxtw	x10, w1
  405654:	cbz	x10, 405678 <portable_extract_by_path+0x23c>
  405658:	mov	w8, wzr
  40565c:	mov	w0, w8
  405660:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  405664:	add	x1, x1, #0xbe1
  405668:	ldr	x2, [sp, #56]
  40566c:	mov	w3, #0x17e                 	// #382
  405670:	ldr	x4, [sp, #40]
  405674:	bl	404150 <log_assert_failed_realm@plt>
  405678:	sub	x0, x29, #0x100
  40567c:	add	x1, sp, #0xf0
  405680:	mov	x2, #0x80                  	// #128
  405684:	bl	404220 <memcpy@plt>
  405688:	adrp	x0, 413000 <manager_connect_bus+0x4e4>
  40568c:	add	x0, x0, #0xc0f
  405690:	sub	x1, x29, #0x70
  405694:	bl	404230 <mkdtemp_malloc@plt>
  405698:	stur	w0, [x29, #-76]
  40569c:	ldur	w8, [x29, #-76]
  4056a0:	cmp	w8, #0x0
  4056a4:	cset	w8, ge  // ge = tcont
  4056a8:	tbnz	w8, #0, 405738 <portable_extract_by_path+0x2fc>
  4056ac:	mov	w8, #0x7                   	// #7
  4056b0:	str	w8, [sp, #236]
  4056b4:	ldur	w8, [x29, #-76]
  4056b8:	str	w8, [sp, #232]
  4056bc:	str	wzr, [sp, #228]
  4056c0:	ldr	w0, [sp, #228]
  4056c4:	bl	4041e0 <log_get_max_level_realm@plt>
  4056c8:	ldr	w8, [sp, #236]
  4056cc:	and	w8, w8, #0x7
  4056d0:	cmp	w0, w8
  4056d4:	b.lt	405708 <portable_extract_by_path+0x2cc>  // b.tstop
  4056d8:	ldr	w8, [sp, #228]
  4056dc:	ldr	w9, [sp, #236]
  4056e0:	orr	w0, w9, w8, lsl #10
  4056e4:	ldr	w1, [sp, #232]
  4056e8:	ldr	x2, [sp, #56]
  4056ec:	mov	w3, #0x182                 	// #386
  4056f0:	ldr	x4, [sp, #48]
  4056f4:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  4056f8:	add	x5, x5, #0xc23
  4056fc:	bl	4041f0 <log_internal_realm@plt>
  405700:	str	w0, [sp, #32]
  405704:	b	40571c <portable_extract_by_path+0x2e0>
  405708:	ldr	w0, [sp, #232]
  40570c:	bl	404200 <abs@plt>
  405710:	mov	w8, wzr
  405714:	subs	w8, w8, w0, uxtb
  405718:	str	w8, [sp, #32]
  40571c:	ldr	w8, [sp, #32]
  405720:	str	w8, [sp, #224]
  405724:	ldr	w8, [sp, #224]
  405728:	stur	w8, [x29, #-4]
  40572c:	mov	w8, #0x1                   	// #1
  405730:	stur	w8, [x29, #-80]
  405734:	b	405e84 <portable_extract_by_path+0xa48>
  405738:	ldur	x8, [x29, #-72]
  40573c:	ldr	w0, [x8]
  405740:	mov	x8, xzr
  405744:	mov	x1, x8
  405748:	mov	x2, x8
  40574c:	mov	w3, #0x23                  	// #35
  405750:	sub	x4, x29, #0x68
  405754:	bl	404240 <dissect_image@plt>
  405758:	stur	w0, [x29, #-76]
  40575c:	ldur	w9, [x29, #-76]
  405760:	mov	w10, #0xffffffbf            	// #-65
  405764:	cmp	w9, w10
  405768:	b.ne	405788 <portable_extract_by_path+0x34c>  // b.any
  40576c:	ldur	x0, [x29, #-48]
  405770:	ldur	x3, [x29, #-16]
  405774:	ldr	x1, [sp, #64]
  405778:	adrp	x2, 413000 <manager_connect_bus+0x4e4>
  40577c:	add	x2, x2, #0xc73
  405780:	bl	404250 <sd_bus_error_setf@plt>
  405784:	b	405834 <portable_extract_by_path+0x3f8>
  405788:	ldur	w8, [x29, #-76]
  40578c:	mov	w9, #0xffffff9d            	// #-99
  405790:	cmp	w8, w9
  405794:	b.ne	4057b4 <portable_extract_by_path+0x378>  // b.any
  405798:	ldur	x0, [x29, #-48]
  40579c:	ldur	x3, [x29, #-16]
  4057a0:	ldr	x1, [sp, #64]
  4057a4:	adrp	x2, 413000 <manager_connect_bus+0x4e4>
  4057a8:	add	x2, x2, #0xcb8
  4057ac:	bl	404250 <sd_bus_error_setf@plt>
  4057b0:	b	405834 <portable_extract_by_path+0x3f8>
  4057b4:	ldur	w8, [x29, #-76]
  4057b8:	mov	w9, #0xffffffb4            	// #-76
  4057bc:	cmp	w8, w9
  4057c0:	b.ne	4057e0 <portable_extract_by_path+0x3a4>  // b.any
  4057c4:	ldur	x0, [x29, #-48]
  4057c8:	ldur	x3, [x29, #-16]
  4057cc:	ldr	x1, [sp, #64]
  4057d0:	adrp	x2, 413000 <manager_connect_bus+0x4e4>
  4057d4:	add	x2, x2, #0xcf1
  4057d8:	bl	404250 <sd_bus_error_setf@plt>
  4057dc:	b	405834 <portable_extract_by_path+0x3f8>
  4057e0:	ldur	w8, [x29, #-76]
  4057e4:	mov	w9, #0xfffffffa            	// #-6
  4057e8:	cmp	w8, w9
  4057ec:	b.ne	40580c <portable_extract_by_path+0x3d0>  // b.any
  4057f0:	ldur	x0, [x29, #-48]
  4057f4:	ldur	x3, [x29, #-16]
  4057f8:	ldr	x1, [sp, #64]
  4057fc:	adrp	x2, 413000 <manager_connect_bus+0x4e4>
  405800:	add	x2, x2, #0xd28
  405804:	bl	404250 <sd_bus_error_setf@plt>
  405808:	b	405834 <portable_extract_by_path+0x3f8>
  40580c:	ldur	w8, [x29, #-76]
  405810:	mov	w9, #0xffffffa3            	// #-93
  405814:	cmp	w8, w9
  405818:	b.ne	405834 <portable_extract_by_path+0x3f8>  // b.any
  40581c:	ldur	x0, [x29, #-48]
  405820:	ldur	x3, [x29, #-16]
  405824:	ldr	x1, [sp, #64]
  405828:	adrp	x2, 413000 <manager_connect_bus+0x4e4>
  40582c:	add	x2, x2, #0xd58
  405830:	bl	404250 <sd_bus_error_setf@plt>
  405834:	ldur	w8, [x29, #-76]
  405838:	cmp	w8, #0x0
  40583c:	cset	w8, ge  // ge = tcont
  405840:	tbnz	w8, #0, 405858 <portable_extract_by_path+0x41c>
  405844:	ldur	w8, [x29, #-76]
  405848:	stur	w8, [x29, #-4]
  40584c:	mov	w8, #0x1                   	// #1
  405850:	stur	w8, [x29, #-80]
  405854:	b	405e84 <portable_extract_by_path+0xa48>
  405858:	mov	w0, #0x1                   	// #1
  40585c:	mov	w1, #0x5                   	// #5
  405860:	movk	w1, #0x8, lsl #16
  405864:	mov	w8, wzr
  405868:	mov	w2, w8
  40586c:	sub	x3, x29, #0x78
  405870:	bl	404260 <socketpair@plt>
  405874:	cmp	w0, #0x0
  405878:	cset	w8, ge  // ge = tcont
  40587c:	tbnz	w8, #0, 405910 <portable_extract_by_path+0x4d4>
  405880:	mov	w8, #0x7                   	// #7
  405884:	str	w8, [sp, #220]
  405888:	bl	404270 <__errno_location@plt>
  40588c:	ldr	w8, [x0]
  405890:	str	w8, [sp, #216]
  405894:	str	wzr, [sp, #212]
  405898:	ldr	w0, [sp, #212]
  40589c:	bl	4041e0 <log_get_max_level_realm@plt>
  4058a0:	ldr	w8, [sp, #220]
  4058a4:	and	w8, w8, #0x7
  4058a8:	cmp	w0, w8
  4058ac:	b.lt	4058e0 <portable_extract_by_path+0x4a4>  // b.tstop
  4058b0:	ldr	w8, [sp, #212]
  4058b4:	ldr	w9, [sp, #220]
  4058b8:	orr	w0, w9, w8, lsl #10
  4058bc:	ldr	w1, [sp, #216]
  4058c0:	ldr	x2, [sp, #56]
  4058c4:	mov	w3, #0x193                 	// #403
  4058c8:	ldr	x4, [sp, #48]
  4058cc:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  4058d0:	add	x5, x5, #0xdb4
  4058d4:	bl	4041f0 <log_internal_realm@plt>
  4058d8:	str	w0, [sp, #28]
  4058dc:	b	4058f4 <portable_extract_by_path+0x4b8>
  4058e0:	ldr	w0, [sp, #216]
  4058e4:	bl	404200 <abs@plt>
  4058e8:	mov	w8, wzr
  4058ec:	subs	w8, w8, w0, uxtb
  4058f0:	str	w8, [sp, #28]
  4058f4:	ldr	w8, [sp, #28]
  4058f8:	str	w8, [sp, #208]
  4058fc:	ldr	w8, [sp, #208]
  405900:	stur	w8, [x29, #-4]
  405904:	mov	w8, #0x1                   	// #1
  405908:	stur	w8, [x29, #-80]
  40590c:	b	405e84 <portable_extract_by_path+0xa48>
  405910:	adrp	x0, 413000 <manager_connect_bus+0x4e4>
  405914:	add	x0, x0, #0xde2
  405918:	mov	w1, #0x1a5                 	// #421
  40591c:	sub	x2, x29, #0x7c
  405920:	bl	40b32c <safe_fork>
  405924:	stur	w0, [x29, #-76]
  405928:	ldur	w8, [x29, #-76]
  40592c:	cmp	w8, #0x0
  405930:	cset	w8, ge  // ge = tcont
  405934:	tbnz	w8, #0, 40594c <portable_extract_by_path+0x510>
  405938:	ldur	w8, [x29, #-76]
  40593c:	stur	w8, [x29, #-4]
  405940:	mov	w8, #0x1                   	// #1
  405944:	stur	w8, [x29, #-80]
  405948:	b	405e84 <portable_extract_by_path+0xa48>
  40594c:	ldur	w8, [x29, #-76]
  405950:	cbnz	w8, 405a3c <portable_extract_by_path+0x600>
  405954:	ldur	w0, [x29, #-120]
  405958:	bl	404130 <safe_close@plt>
  40595c:	stur	w0, [x29, #-120]
  405960:	ldur	x0, [x29, #-104]
  405964:	ldur	x1, [x29, #-112]
  405968:	mov	w2, #0xffffffff            	// #-1
  40596c:	mov	w3, #0x101                 	// #257
  405970:	bl	404280 <dissected_image_mount@plt>
  405974:	stur	w0, [x29, #-76]
  405978:	ldur	w8, [x29, #-76]
  40597c:	cmp	w8, #0x0
  405980:	cset	w8, ge  // ge = tcont
  405984:	tbnz	w8, #0, 405a04 <portable_extract_by_path+0x5c8>
  405988:	mov	w8, #0x7                   	// #7
  40598c:	str	w8, [sp, #204]
  405990:	ldur	w8, [x29, #-76]
  405994:	str	w8, [sp, #200]
  405998:	str	wzr, [sp, #196]
  40599c:	ldr	w0, [sp, #196]
  4059a0:	bl	4041e0 <log_get_max_level_realm@plt>
  4059a4:	ldr	w8, [sp, #204]
  4059a8:	and	w8, w8, #0x7
  4059ac:	cmp	w0, w8
  4059b0:	b.lt	4059e4 <portable_extract_by_path+0x5a8>  // b.tstop
  4059b4:	ldr	w8, [sp, #196]
  4059b8:	ldr	w9, [sp, #204]
  4059bc:	orr	w0, w9, w8, lsl #10
  4059c0:	ldr	w1, [sp, #200]
  4059c4:	ldr	x2, [sp, #56]
  4059c8:	mov	w3, #0x19d                 	// #413
  4059cc:	ldr	x4, [sp, #48]
  4059d0:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  4059d4:	add	x5, x5, #0xdef
  4059d8:	bl	4041f0 <log_internal_realm@plt>
  4059dc:	str	w0, [sp, #24]
  4059e0:	b	4059f8 <portable_extract_by_path+0x5bc>
  4059e4:	ldr	w0, [sp, #200]
  4059e8:	bl	404200 <abs@plt>
  4059ec:	mov	w8, wzr
  4059f0:	subs	w8, w8, w0, uxtb
  4059f4:	str	w8, [sp, #24]
  4059f8:	ldr	w8, [sp, #24]
  4059fc:	str	w8, [sp, #192]
  405a00:	b	405a24 <portable_extract_by_path+0x5e8>
  405a04:	ldur	x0, [x29, #-112]
  405a08:	ldur	x1, [x29, #-24]
  405a0c:	ldur	w2, [x29, #-116]
  405a10:	mov	x8, xzr
  405a14:	mov	x3, x8
  405a18:	mov	x4, x8
  405a1c:	bl	40a7f0 <extract_now>
  405a20:	stur	w0, [x29, #-76]
  405a24:	ldur	w8, [x29, #-76]
  405a28:	mov	w9, wzr
  405a2c:	mov	w10, #0x1                   	// #1
  405a30:	cmp	w8, #0x0
  405a34:	csel	w0, w10, w9, lt  // lt = tstop
  405a38:	bl	404290 <_exit@plt>
  405a3c:	ldur	w0, [x29, #-116]
  405a40:	bl	404130 <safe_close@plt>
  405a44:	stur	w0, [x29, #-116]
  405a48:	adrp	x0, 413000 <manager_connect_bus+0x4e4>
  405a4c:	add	x0, x0, #0x328
  405a50:	bl	4042a0 <internal_hashmap_new@plt>
  405a54:	stur	x0, [x29, #-56]
  405a58:	ldur	x8, [x29, #-56]
  405a5c:	cbnz	x8, 405a74 <portable_extract_by_path+0x638>
  405a60:	mov	w8, #0xfffffff4            	// #-12
  405a64:	stur	w8, [x29, #-4]
  405a68:	mov	w8, #0x1                   	// #1
  405a6c:	stur	w8, [x29, #-80]
  405a70:	b	405e84 <portable_extract_by_path+0xa48>
  405a74:	mov	x8, xzr
  405a78:	str	x8, [sp, #184]
  405a7c:	add	x1, sp, #0xb0
  405a80:	str	x8, [sp, #176]
  405a84:	add	x2, sp, #0xac
  405a88:	mov	w9, #0xffffffff            	// #-1
  405a8c:	str	w9, [sp, #172]
  405a90:	ldur	w0, [x29, #-120]
  405a94:	bl	40b39c <recv_item>
  405a98:	stur	w0, [x29, #-76]
  405a9c:	ldur	w9, [x29, #-76]
  405aa0:	cmp	w9, #0x0
  405aa4:	cset	w9, ge  // ge = tcont
  405aa8:	tbnz	w9, #0, 405b38 <portable_extract_by_path+0x6fc>
  405aac:	mov	w8, #0x7                   	// #7
  405ab0:	str	w8, [sp, #168]
  405ab4:	ldur	w8, [x29, #-76]
  405ab8:	str	w8, [sp, #164]
  405abc:	str	wzr, [sp, #160]
  405ac0:	ldr	w0, [sp, #160]
  405ac4:	bl	4041e0 <log_get_max_level_realm@plt>
  405ac8:	ldr	w8, [sp, #168]
  405acc:	and	w8, w8, #0x7
  405ad0:	cmp	w0, w8
  405ad4:	b.lt	405b08 <portable_extract_by_path+0x6cc>  // b.tstop
  405ad8:	ldr	w8, [sp, #160]
  405adc:	ldr	w9, [sp, #168]
  405ae0:	orr	w0, w9, w8, lsl #10
  405ae4:	ldr	w1, [sp, #164]
  405ae8:	ldr	x2, [sp, #56]
  405aec:	mov	w3, #0x1b4                 	// #436
  405af0:	ldr	x4, [sp, #48]
  405af4:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  405af8:	add	x5, x5, #0xe13
  405afc:	bl	4041f0 <log_internal_realm@plt>
  405b00:	str	w0, [sp, #20]
  405b04:	b	405b1c <portable_extract_by_path+0x6e0>
  405b08:	ldr	w0, [sp, #164]
  405b0c:	bl	404200 <abs@plt>
  405b10:	mov	w8, wzr
  405b14:	subs	w8, w8, w0, uxtb
  405b18:	str	w8, [sp, #20]
  405b1c:	ldr	w8, [sp, #20]
  405b20:	str	w8, [sp, #156]
  405b24:	ldr	w8, [sp, #156]
  405b28:	stur	w8, [x29, #-4]
  405b2c:	mov	w8, #0x1                   	// #1
  405b30:	stur	w8, [x29, #-80]
  405b34:	b	405e00 <portable_extract_by_path+0x9c4>
  405b38:	ldr	x0, [sp, #176]
  405b3c:	bl	40b700 <isempty>
  405b40:	tbnz	w0, #0, 405b48 <portable_extract_by_path+0x70c>
  405b44:	b	405b64 <portable_extract_by_path+0x728>
  405b48:	ldr	w8, [sp, #172]
  405b4c:	cmp	w8, #0x0
  405b50:	cset	w8, ge  // ge = tcont
  405b54:	tbnz	w8, #0, 405b64 <portable_extract_by_path+0x728>
  405b58:	mov	w8, #0x7                   	// #7
  405b5c:	stur	w8, [x29, #-80]
  405b60:	b	405e00 <portable_extract_by_path+0x9c4>
  405b64:	ldr	x0, [sp, #176]
  405b68:	bl	40b700 <isempty>
  405b6c:	tbnz	w0, #0, 405b80 <portable_extract_by_path+0x744>
  405b70:	ldr	w8, [sp, #172]
  405b74:	cmp	w8, #0x0
  405b78:	cset	w8, ge  // ge = tcont
  405b7c:	tbnz	w8, #0, 405c08 <portable_extract_by_path+0x7cc>
  405b80:	mov	w8, #0x7                   	// #7
  405b84:	str	w8, [sp, #152]
  405b88:	str	wzr, [sp, #148]
  405b8c:	str	wzr, [sp, #144]
  405b90:	ldr	w0, [sp, #144]
  405b94:	bl	4041e0 <log_get_max_level_realm@plt>
  405b98:	ldr	w8, [sp, #152]
  405b9c:	and	w8, w8, #0x7
  405ba0:	cmp	w0, w8
  405ba4:	b.lt	405bd8 <portable_extract_by_path+0x79c>  // b.tstop
  405ba8:	ldr	w8, [sp, #144]
  405bac:	ldr	w9, [sp, #152]
  405bb0:	orr	w0, w9, w8, lsl #10
  405bb4:	ldr	w1, [sp, #148]
  405bb8:	ldr	x2, [sp, #56]
  405bbc:	mov	w3, #0x1bc                 	// #444
  405bc0:	ldr	x4, [sp, #48]
  405bc4:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  405bc8:	add	x5, x5, #0xe2e
  405bcc:	bl	4041f0 <log_internal_realm@plt>
  405bd0:	str	w0, [sp, #16]
  405bd4:	b	405bec <portable_extract_by_path+0x7b0>
  405bd8:	ldr	w0, [sp, #148]
  405bdc:	bl	404200 <abs@plt>
  405be0:	mov	w8, wzr
  405be4:	subs	w8, w8, w0, uxtb
  405be8:	str	w8, [sp, #16]
  405bec:	ldr	w8, [sp, #16]
  405bf0:	str	w8, [sp, #140]
  405bf4:	mov	w8, #0xffffffea            	// #-22
  405bf8:	stur	w8, [x29, #-4]
  405bfc:	mov	w8, #0x1                   	// #1
  405c00:	stur	w8, [x29, #-80]
  405c04:	b	405e00 <portable_extract_by_path+0x9c4>
  405c08:	ldr	x0, [sp, #176]
  405c0c:	ldr	w1, [sp, #172]
  405c10:	bl	40b740 <portable_metadata_new>
  405c14:	str	x0, [sp, #184]
  405c18:	ldr	x8, [sp, #184]
  405c1c:	cbnz	x8, 405c34 <portable_extract_by_path+0x7f8>
  405c20:	mov	w8, #0xfffffff4            	// #-12
  405c24:	stur	w8, [x29, #-4]
  405c28:	mov	w8, #0x1                   	// #1
  405c2c:	stur	w8, [x29, #-80]
  405c30:	b	405e00 <portable_extract_by_path+0x9c4>
  405c34:	mov	w8, #0xffffffff            	// #-1
  405c38:	str	w8, [sp, #172]
  405c3c:	mov	w8, #0x0                   	// #0
  405c40:	strb	w8, [sp, #139]
  405c44:	ldr	x9, [sp, #184]
  405c48:	ldrb	w8, [x9, #16]
  405c4c:	str	w8, [sp, #12]
  405c50:	cbz	w8, 405c70 <portable_extract_by_path+0x834>
  405c54:	b	405c58 <portable_extract_by_path+0x81c>
  405c58:	ldr	w8, [sp, #12]
  405c5c:	cmp	w8, #0x2f
  405c60:	cset	w9, eq  // eq = none
  405c64:	eor	w9, w9, #0x1
  405c68:	tbnz	w9, #0, 405c7c <portable_extract_by_path+0x840>
  405c6c:	b	405c70 <portable_extract_by_path+0x834>
  405c70:	mov	w8, #0x1                   	// #1
  405c74:	strb	w8, [sp, #139]
  405c78:	b	405c7c <portable_extract_by_path+0x840>
  405c7c:	ldrb	w8, [sp, #139]
  405c80:	and	w8, w8, #0x1
  405c84:	strb	w8, [sp, #138]
  405c88:	ldrb	w8, [sp, #138]
  405c8c:	tbnz	w8, #0, 405d50 <portable_extract_by_path+0x914>
  405c90:	ldur	x0, [x29, #-56]
  405c94:	ldr	x8, [sp, #184]
  405c98:	add	x1, x8, #0x10
  405c9c:	ldr	x2, [sp, #184]
  405ca0:	bl	4042b0 <hashmap_put@plt>
  405ca4:	stur	w0, [x29, #-76]
  405ca8:	ldur	w9, [x29, #-76]
  405cac:	cmp	w9, #0x0
  405cb0:	cset	w9, ge  // ge = tcont
  405cb4:	tbnz	w9, #0, 405d44 <portable_extract_by_path+0x908>
  405cb8:	mov	w8, #0x7                   	// #7
  405cbc:	str	w8, [sp, #132]
  405cc0:	ldur	w8, [x29, #-76]
  405cc4:	str	w8, [sp, #128]
  405cc8:	str	wzr, [sp, #124]
  405ccc:	ldr	w0, [sp, #124]
  405cd0:	bl	4041e0 <log_get_max_level_realm@plt>
  405cd4:	ldr	w8, [sp, #132]
  405cd8:	and	w8, w8, #0x7
  405cdc:	cmp	w0, w8
  405ce0:	b.lt	405d14 <portable_extract_by_path+0x8d8>  // b.tstop
  405ce4:	ldr	w8, [sp, #124]
  405ce8:	ldr	w9, [sp, #132]
  405cec:	orr	w0, w9, w8, lsl #10
  405cf0:	ldr	w1, [sp, #128]
  405cf4:	ldr	x2, [sp, #56]
  405cf8:	mov	w3, #0x1cc                 	// #460
  405cfc:	ldr	x4, [sp, #48]
  405d00:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  405d04:	add	x5, x5, #0xe4c
  405d08:	bl	4041f0 <log_internal_realm@plt>
  405d0c:	str	w0, [sp, #8]
  405d10:	b	405d28 <portable_extract_by_path+0x8ec>
  405d14:	ldr	w0, [sp, #128]
  405d18:	bl	404200 <abs@plt>
  405d1c:	mov	w8, wzr
  405d20:	subs	w8, w8, w0, uxtb
  405d24:	str	w8, [sp, #8]
  405d28:	ldr	w8, [sp, #8]
  405d2c:	str	w8, [sp, #120]
  405d30:	ldr	w8, [sp, #120]
  405d34:	stur	w8, [x29, #-4]
  405d38:	mov	w8, #0x1                   	// #1
  405d3c:	stur	w8, [x29, #-80]
  405d40:	b	405e00 <portable_extract_by_path+0x9c4>
  405d44:	mov	x8, xzr
  405d48:	str	x8, [sp, #184]
  405d4c:	b	405dfc <portable_extract_by_path+0x9c0>
  405d50:	ldr	x8, [sp, #184]
  405d54:	add	x0, x8, #0x10
  405d58:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  405d5c:	add	x1, x1, #0xe75
  405d60:	bl	404190 <strcmp@plt>
  405d64:	cbnz	w0, 405ddc <portable_extract_by_path+0x9a0>
  405d68:	ldur	x8, [x29, #-64]
  405d6c:	cmp	x8, #0x0
  405d70:	cset	w9, ne  // ne = any
  405d74:	mov	w10, #0x1                   	// #1
  405d78:	eor	w9, w9, #0x1
  405d7c:	eor	w9, w9, w10
  405d80:	eor	w9, w9, w10
  405d84:	eor	w9, w9, w10
  405d88:	and	w9, w9, #0x1
  405d8c:	mov	w0, w9
  405d90:	sxtw	x8, w0
  405d94:	cbz	x8, 405db8 <portable_extract_by_path+0x97c>
  405d98:	mov	w8, wzr
  405d9c:	mov	w0, w8
  405da0:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  405da4:	add	x1, x1, #0xe85
  405da8:	ldr	x2, [sp, #56]
  405dac:	mov	w3, #0x1d2                 	// #466
  405db0:	ldr	x4, [sp, #40]
  405db4:	bl	404150 <log_assert_failed_realm@plt>
  405db8:	ldr	x8, [sp, #184]
  405dbc:	str	x8, [sp, #112]
  405dc0:	mov	x8, xzr
  405dc4:	str	x8, [sp, #184]
  405dc8:	ldr	x8, [sp, #112]
  405dcc:	str	x8, [sp, #104]
  405dd0:	ldr	x8, [sp, #104]
  405dd4:	stur	x8, [x29, #-64]
  405dd8:	b	405dfc <portable_extract_by_path+0x9c0>
  405ddc:	mov	w8, wzr
  405de0:	mov	w0, w8
  405de4:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  405de8:	add	x1, x1, #0xe91
  405dec:	ldr	x2, [sp, #56]
  405df0:	mov	w3, #0x1d5                 	// #469
  405df4:	ldr	x4, [sp, #40]
  405df8:	bl	4042c0 <log_assert_failed_unreachable_realm@plt>
  405dfc:	stur	wzr, [x29, #-80]
  405e00:	add	x0, sp, #0xac
  405e04:	bl	40b374 <closep>
  405e08:	add	x0, sp, #0xb0
  405e0c:	bl	405118 <freep>
  405e10:	add	x0, sp, #0xb8
  405e14:	bl	40a788 <portable_metadata_unrefp>
  405e18:	ldur	w8, [x29, #-80]
  405e1c:	str	w8, [sp, #4]
  405e20:	cbz	w8, 405e38 <portable_extract_by_path+0x9fc>
  405e24:	b	405e28 <portable_extract_by_path+0x9ec>
  405e28:	ldr	w8, [sp, #4]
  405e2c:	cmp	w8, #0x7
  405e30:	b.eq	405e3c <portable_extract_by_path+0xa00>  // b.none
  405e34:	b	405e84 <portable_extract_by_path+0xa48>
  405e38:	b	405a74 <portable_extract_by_path+0x638>
  405e3c:	ldur	w1, [x29, #-124]
  405e40:	adrp	x0, 413000 <manager_connect_bus+0x4e4>
  405e44:	add	x0, x0, #0xde2
  405e48:	mov	w8, wzr
  405e4c:	mov	w2, w8
  405e50:	bl	4042d0 <wait_for_terminate_and_check@plt>
  405e54:	stur	w0, [x29, #-76]
  405e58:	ldur	w8, [x29, #-76]
  405e5c:	cmp	w8, #0x0
  405e60:	cset	w8, ge  // ge = tcont
  405e64:	tbnz	w8, #0, 405e7c <portable_extract_by_path+0xa40>
  405e68:	ldur	w8, [x29, #-76]
  405e6c:	stur	w8, [x29, #-4]
  405e70:	mov	w8, #0x1                   	// #1
  405e74:	stur	w8, [x29, #-80]
  405e78:	b	405e84 <portable_extract_by_path+0xa48>
  405e7c:	stur	wzr, [x29, #-124]
  405e80:	stur	wzr, [x29, #-80]
  405e84:	sub	x0, x29, #0x100
  405e88:	bl	40b2a0 <block_signals_reset>
  405e8c:	sub	x0, x29, #0x7c
  405e90:	bl	4042e0 <sigkill_waitp@plt>
  405e94:	sub	x0, x29, #0x78
  405e98:	bl	40b27c <close_pairp>
  405e9c:	sub	x0, x29, #0x70
  405ea0:	bl	40b248 <rmdir_and_freep>
  405ea4:	sub	x0, x29, #0x68
  405ea8:	bl	40b214 <dissected_image_unrefp>
  405eac:	ldur	w8, [x29, #-80]
  405eb0:	cmp	w8, #0x0
  405eb4:	cset	w8, eq  // eq = none
  405eb8:	eor	w8, w8, #0x1
  405ebc:	tbnz	w8, #0, 405f90 <portable_extract_by_path+0xb54>
  405ec0:	b	405ec4 <portable_extract_by_path+0xa88>
  405ec4:	ldur	x8, [x29, #-64]
  405ec8:	cbnz	x8, 405ef4 <portable_extract_by_path+0xab8>
  405ecc:	ldur	x0, [x29, #-48]
  405ed0:	ldur	x3, [x29, #-16]
  405ed4:	ldr	x1, [sp, #64]
  405ed8:	adrp	x2, 413000 <manager_connect_bus+0x4e4>
  405edc:	add	x2, x2, #0xeb6
  405ee0:	bl	404250 <sd_bus_error_setf@plt>
  405ee4:	stur	w0, [x29, #-4]
  405ee8:	mov	w8, #0x1                   	// #1
  405eec:	stur	w8, [x29, #-80]
  405ef0:	b	405f90 <portable_extract_by_path+0xb54>
  405ef4:	ldur	x0, [x29, #-56]
  405ef8:	bl	40b7c0 <hashmap_isempty>
  405efc:	tbnz	w0, #0, 405f04 <portable_extract_by_path+0xac8>
  405f00:	b	405f2c <portable_extract_by_path+0xaf0>
  405f04:	ldur	x0, [x29, #-48]
  405f08:	ldur	x3, [x29, #-16]
  405f0c:	ldr	x1, [sp, #64]
  405f10:	adrp	x2, 413000 <manager_connect_bus+0x4e4>
  405f14:	add	x2, x2, #0xee2
  405f18:	bl	404250 <sd_bus_error_setf@plt>
  405f1c:	stur	w0, [x29, #-4]
  405f20:	mov	w8, #0x1                   	// #1
  405f24:	stur	w8, [x29, #-80]
  405f28:	b	405f90 <portable_extract_by_path+0xb54>
  405f2c:	ldur	x8, [x29, #-40]
  405f30:	cbz	x8, 405f58 <portable_extract_by_path+0xb1c>
  405f34:	ldur	x8, [x29, #-56]
  405f38:	str	x8, [sp, #96]
  405f3c:	mov	x8, xzr
  405f40:	stur	x8, [x29, #-56]
  405f44:	ldr	x8, [sp, #96]
  405f48:	str	x8, [sp, #88]
  405f4c:	ldr	x8, [sp, #88]
  405f50:	ldur	x9, [x29, #-40]
  405f54:	str	x8, [x9]
  405f58:	ldur	x8, [x29, #-32]
  405f5c:	cbz	x8, 405f84 <portable_extract_by_path+0xb48>
  405f60:	ldur	x8, [x29, #-64]
  405f64:	str	x8, [sp, #80]
  405f68:	mov	x8, xzr
  405f6c:	stur	x8, [x29, #-64]
  405f70:	ldr	x8, [sp, #80]
  405f74:	str	x8, [sp, #72]
  405f78:	ldr	x8, [sp, #72]
  405f7c:	ldur	x9, [x29, #-32]
  405f80:	str	x8, [x9]
  405f84:	stur	wzr, [x29, #-4]
  405f88:	mov	w8, #0x1                   	// #1
  405f8c:	stur	w8, [x29, #-80]
  405f90:	sub	x0, x29, #0x48
  405f94:	bl	40a7bc <loop_device_unrefp>
  405f98:	sub	x0, x29, #0x40
  405f9c:	bl	40a788 <portable_metadata_unrefp>
  405fa0:	sub	x0, x29, #0x38
  405fa4:	bl	406478 <hashmap_freep>
  405fa8:	ldur	w0, [x29, #-4]
  405fac:	add	sp, sp, #0x270
  405fb0:	ldr	x28, [sp, #16]
  405fb4:	ldp	x29, x30, [sp], #32
  405fb8:	ret

0000000000405fbc <portable_changes_free>:
  405fbc:	sub	sp, sp, #0x40
  405fc0:	stp	x29, x30, [sp, #48]
  405fc4:	add	x29, sp, #0x30
  405fc8:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  405fcc:	add	x8, x8, #0x4ee
  405fd0:	add	x2, x8, #0x3
  405fd4:	stur	x0, [x29, #-8]
  405fd8:	stur	x1, [x29, #-16]
  405fdc:	str	x2, [sp, #16]
  405fe0:	ldur	x8, [x29, #-8]
  405fe4:	mov	w9, #0x1                   	// #1
  405fe8:	str	w9, [sp, #12]
  405fec:	cbnz	x8, 406000 <portable_changes_free+0x44>
  405ff0:	ldur	x8, [x29, #-16]
  405ff4:	cmp	x8, #0x0
  405ff8:	cset	w9, eq  // eq = none
  405ffc:	str	w9, [sp, #12]
  406000:	ldr	w8, [sp, #12]
  406004:	mov	w9, #0x1                   	// #1
  406008:	eor	w8, w8, #0x1
  40600c:	eor	w8, w8, w9
  406010:	eor	w8, w8, w9
  406014:	and	w8, w8, #0x1
  406018:	mov	w0, w8
  40601c:	sxtw	x10, w0
  406020:	cbz	x10, 406048 <portable_changes_free+0x8c>
  406024:	mov	w8, wzr
  406028:	mov	w0, w8
  40602c:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  406030:	add	x1, x1, #0x5c2
  406034:	ldr	x2, [sp, #16]
  406038:	mov	w3, #0x29d                 	// #669
  40603c:	adrp	x4, 413000 <manager_connect_bus+0x4e4>
  406040:	add	x4, x4, #0x5dc
  406044:	bl	404150 <log_assert_failed_realm@plt>
  406048:	str	xzr, [sp, #24]
  40604c:	ldr	x8, [sp, #24]
  406050:	ldur	x9, [x29, #-16]
  406054:	cmp	x8, x9
  406058:	b.cs	4060a8 <portable_changes_free+0xec>  // b.hs, b.nlast
  40605c:	ldur	x8, [x29, #-8]
  406060:	ldr	x9, [sp, #24]
  406064:	mov	x10, #0x18                  	// #24
  406068:	mul	x9, x10, x9
  40606c:	add	x8, x8, x9
  406070:	ldr	x0, [x8, #8]
  406074:	str	x10, [sp]
  406078:	bl	404140 <free@plt>
  40607c:	ldur	x8, [x29, #-8]
  406080:	ldr	x9, [sp, #24]
  406084:	ldr	x10, [sp]
  406088:	mul	x9, x10, x9
  40608c:	add	x8, x8, x9
  406090:	ldr	x0, [x8, #16]
  406094:	bl	404140 <free@plt>
  406098:	ldr	x8, [sp, #24]
  40609c:	add	x8, x8, #0x1
  4060a0:	str	x8, [sp, #24]
  4060a4:	b	40604c <portable_changes_free+0x90>
  4060a8:	ldur	x0, [x29, #-8]
  4060ac:	bl	404140 <free@plt>
  4060b0:	ldp	x29, x30, [sp, #48]
  4060b4:	add	sp, sp, #0x40
  4060b8:	ret

00000000004060bc <portable_attach>:
  4060bc:	sub	sp, sp, #0x140
  4060c0:	stp	x29, x30, [sp, #288]
  4060c4:	str	x28, [sp, #304]
  4060c8:	add	x29, sp, #0x120
  4060cc:	mov	x8, xzr
  4060d0:	mov	x9, #0x68                  	// #104
  4060d4:	mov	w10, wzr
  4060d8:	adrp	x11, 413000 <manager_connect_bus+0x4e4>
  4060dc:	add	x11, x11, #0x4ee
  4060e0:	add	x11, x11, #0x3
  4060e4:	add	x12, sp, #0x68
  4060e8:	stur	x0, [x29, #-16]
  4060ec:	stur	x1, [x29, #-24]
  4060f0:	stur	x2, [x29, #-32]
  4060f4:	stur	x3, [x29, #-40]
  4060f8:	stur	w4, [x29, #-44]
  4060fc:	stur	x5, [x29, #-56]
  406100:	stur	x6, [x29, #-64]
  406104:	stur	x7, [x29, #-72]
  406108:	stur	x8, [x29, #-80]
  40610c:	mov	x0, x12
  406110:	mov	w1, w10
  406114:	mov	x2, x9
  406118:	str	x8, [sp, #16]
  40611c:	str	x11, [sp, #8]
  406120:	bl	4042f0 <memset@plt>
  406124:	ldr	x8, [sp, #16]
  406128:	str	x8, [sp, #96]
  40612c:	ldur	x8, [x29, #-24]
  406130:	cmp	x8, #0x0
  406134:	cset	w9, ne  // ne = any
  406138:	mov	w10, #0x1                   	// #1
  40613c:	eor	w9, w9, #0x1
  406140:	eor	w9, w9, w10
  406144:	eor	w9, w9, w10
  406148:	and	w9, w9, #0x1
  40614c:	mov	w0, w9
  406150:	sxtw	x8, w0
  406154:	cbz	x8, 40617c <portable_attach+0xc0>
  406158:	mov	w8, wzr
  40615c:	mov	w0, w8
  406160:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  406164:	add	x1, x1, #0x558
  406168:	ldr	x2, [sp, #8]
  40616c:	mov	w3, #0x3da                 	// #986
  406170:	adrp	x4, 413000 <manager_connect_bus+0x4e4>
  406174:	add	x4, x4, #0x611
  406178:	bl	404150 <log_assert_failed_realm@plt>
  40617c:	ldur	x1, [x29, #-24]
  406180:	mov	w0, #0x1                   	// #1
  406184:	add	x2, sp, #0x60
  406188:	bl	4041b0 <image_find_harder@plt>
  40618c:	str	w0, [sp, #60]
  406190:	ldr	w8, [sp, #60]
  406194:	cmp	w8, #0x0
  406198:	cset	w8, ge  // ge = tcont
  40619c:	tbnz	w8, #0, 4061b4 <portable_attach+0xf8>
  4061a0:	ldr	w8, [sp, #60]
  4061a4:	stur	w8, [x29, #-4]
  4061a8:	mov	w8, #0x1                   	// #1
  4061ac:	str	w8, [sp, #56]
  4061b0:	b	40644c <portable_attach+0x390>
  4061b4:	ldr	x8, [sp, #96]
  4061b8:	ldr	x0, [x8, #16]
  4061bc:	ldur	x1, [x29, #-32]
  4061c0:	ldur	x4, [x29, #-72]
  4061c4:	mov	x8, xzr
  4061c8:	mov	x2, x8
  4061cc:	sub	x3, x29, #0x50
  4061d0:	bl	40543c <portable_extract_by_path>
  4061d4:	str	w0, [sp, #60]
  4061d8:	ldr	w9, [sp, #60]
  4061dc:	cmp	w9, #0x0
  4061e0:	cset	w9, ge  // ge = tcont
  4061e4:	tbnz	w9, #0, 4061fc <portable_attach+0x140>
  4061e8:	ldr	w8, [sp, #60]
  4061ec:	stur	w8, [x29, #-4]
  4061f0:	mov	w8, #0x1                   	// #1
  4061f4:	str	w8, [sp, #56]
  4061f8:	b	40644c <portable_attach+0x390>
  4061fc:	add	x0, sp, #0x68
  406200:	mov	w8, wzr
  406204:	mov	w1, w8
  406208:	mov	w2, #0x4                   	// #4
  40620c:	mov	x9, xzr
  406210:	mov	x3, x9
  406214:	bl	404300 <lookup_paths_init@plt>
  406218:	str	w0, [sp, #60]
  40621c:	ldr	w8, [sp, #60]
  406220:	cmp	w8, #0x0
  406224:	cset	w8, ge  // ge = tcont
  406228:	tbnz	w8, #0, 406240 <portable_attach+0x184>
  40622c:	ldr	w8, [sp, #60]
  406230:	stur	w8, [x29, #-4]
  406234:	mov	w8, #0x1                   	// #1
  406238:	str	w8, [sp, #56]
  40623c:	b	40644c <portable_attach+0x390>
  406240:	add	x8, sp, #0x28
  406244:	mov	w9, #0xfffffffe            	// #-2
  406248:	str	w9, [sp, #40]
  40624c:	mov	x10, xzr
  406250:	str	x10, [x8, #8]
  406254:	ldur	q0, [sp, #40]
  406258:	str	q0, [sp, #64]
  40625c:	ldur	x0, [x29, #-80]
  406260:	add	x1, sp, #0x40
  406264:	add	x2, sp, #0x58
  406268:	mov	x8, xzr
  40626c:	mov	x3, x8
  406270:	bl	4051e0 <hashmap_iterate>
  406274:	tbnz	w0, #0, 40627c <portable_attach+0x1c0>
  406278:	b	406394 <portable_attach+0x2d8>
  40627c:	ldr	x8, [sp, #88]
  406280:	add	x2, x8, #0x10
  406284:	mov	w9, wzr
  406288:	mov	w0, w9
  40628c:	add	x1, sp, #0x68
  406290:	bl	404310 <unit_file_exists@plt>
  406294:	str	w0, [sp, #60]
  406298:	ldr	w9, [sp, #60]
  40629c:	cmp	w9, #0x0
  4062a0:	cset	w9, ge  // ge = tcont
  4062a4:	tbnz	w9, #0, 4062d4 <portable_attach+0x218>
  4062a8:	ldur	x0, [x29, #-72]
  4062ac:	ldr	w1, [sp, #60]
  4062b0:	ldr	x8, [sp, #88]
  4062b4:	add	x3, x8, #0x10
  4062b8:	adrp	x2, 413000 <manager_connect_bus+0x4e4>
  4062bc:	add	x2, x2, #0x690
  4062c0:	bl	404320 <sd_bus_error_set_errnof@plt>
  4062c4:	stur	w0, [x29, #-4]
  4062c8:	mov	w9, #0x1                   	// #1
  4062cc:	str	w9, [sp, #56]
  4062d0:	b	40644c <portable_attach+0x390>
  4062d4:	ldr	w8, [sp, #60]
  4062d8:	cmp	w8, #0x0
  4062dc:	cset	w8, le
  4062e0:	tbnz	w8, #0, 406314 <portable_attach+0x258>
  4062e4:	ldur	x0, [x29, #-72]
  4062e8:	ldr	x8, [sp, #88]
  4062ec:	add	x3, x8, #0x10
  4062f0:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  4062f4:	add	x1, x1, #0x6cd
  4062f8:	adrp	x2, 413000 <manager_connect_bus+0x4e4>
  4062fc:	add	x2, x2, #0x6f1
  406300:	bl	404250 <sd_bus_error_setf@plt>
  406304:	stur	w0, [x29, #-4]
  406308:	mov	w9, #0x1                   	// #1
  40630c:	str	w9, [sp, #56]
  406310:	b	40644c <portable_attach+0x390>
  406314:	ldur	x0, [x29, #-16]
  406318:	ldr	x8, [sp, #88]
  40631c:	add	x1, x8, #0x10
  406320:	ldur	x2, [x29, #-72]
  406324:	bl	4064ac <unit_file_is_active>
  406328:	str	w0, [sp, #60]
  40632c:	ldr	w9, [sp, #60]
  406330:	cmp	w9, #0x0
  406334:	cset	w9, ge  // ge = tcont
  406338:	tbnz	w9, #0, 406350 <portable_attach+0x294>
  40633c:	ldr	w8, [sp, #60]
  406340:	stur	w8, [x29, #-4]
  406344:	mov	w8, #0x1                   	// #1
  406348:	str	w8, [sp, #56]
  40634c:	b	40644c <portable_attach+0x390>
  406350:	ldr	w8, [sp, #60]
  406354:	cmp	w8, #0x0
  406358:	cset	w8, le
  40635c:	tbnz	w8, #0, 406390 <portable_attach+0x2d4>
  406360:	ldur	x0, [x29, #-72]
  406364:	ldr	x8, [sp, #88]
  406368:	add	x3, x8, #0x10
  40636c:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  406370:	add	x1, x1, #0x6cd
  406374:	adrp	x2, 413000 <manager_connect_bus+0x4e4>
  406378:	add	x2, x2, #0x726
  40637c:	bl	404250 <sd_bus_error_setf@plt>
  406380:	stur	w0, [x29, #-4]
  406384:	mov	w9, #0x1                   	// #1
  406388:	str	w9, [sp, #56]
  40638c:	b	40644c <portable_attach+0x390>
  406390:	b	40625c <portable_attach+0x1a0>
  406394:	add	x8, sp, #0x18
  406398:	mov	w9, #0xfffffffe            	// #-2
  40639c:	str	w9, [sp, #24]
  4063a0:	mov	x10, xzr
  4063a4:	str	x10, [x8, #8]
  4063a8:	ldur	q0, [sp, #24]
  4063ac:	str	q0, [sp, #64]
  4063b0:	ldur	x0, [x29, #-80]
  4063b4:	add	x1, sp, #0x40
  4063b8:	add	x2, sp, #0x58
  4063bc:	mov	x8, xzr
  4063c0:	mov	x3, x8
  4063c4:	bl	4051e0 <hashmap_iterate>
  4063c8:	tbnz	w0, #0, 4063d0 <portable_attach+0x314>
  4063cc:	b	406428 <portable_attach+0x36c>
  4063d0:	ldr	x8, [sp, #96]
  4063d4:	ldr	x1, [x8, #16]
  4063d8:	ldr	x8, [sp, #96]
  4063dc:	ldr	w2, [x8, #4]
  4063e0:	ldr	x3, [sp, #88]
  4063e4:	ldur	x4, [x29, #-40]
  4063e8:	ldur	w5, [x29, #-44]
  4063ec:	ldur	x6, [x29, #-56]
  4063f0:	ldur	x7, [x29, #-64]
  4063f4:	add	x0, sp, #0x68
  4063f8:	bl	406c38 <attach_unit_file>
  4063fc:	str	w0, [sp, #60]
  406400:	ldr	w9, [sp, #60]
  406404:	cmp	w9, #0x0
  406408:	cset	w9, ge  // ge = tcont
  40640c:	tbnz	w9, #0, 406424 <portable_attach+0x368>
  406410:	ldr	w8, [sp, #60]
  406414:	stur	w8, [x29, #-4]
  406418:	mov	w8, #0x1                   	// #1
  40641c:	str	w8, [sp, #56]
  406420:	b	40644c <portable_attach+0x390>
  406424:	b	4063b0 <portable_attach+0x2f4>
  406428:	ldr	x8, [sp, #96]
  40642c:	ldr	x0, [x8, #16]
  406430:	ldur	w1, [x29, #-44]
  406434:	ldur	x2, [x29, #-56]
  406438:	ldur	x3, [x29, #-64]
  40643c:	bl	407744 <install_image_symlink>
  406440:	stur	wzr, [x29, #-4]
  406444:	mov	w9, #0x1                   	// #1
  406448:	str	w9, [sp, #56]
  40644c:	add	x0, sp, #0x60
  406450:	bl	405408 <image_unrefp>
  406454:	add	x0, sp, #0x68
  406458:	bl	404330 <lookup_paths_free@plt>
  40645c:	sub	x0, x29, #0x50
  406460:	bl	406478 <hashmap_freep>
  406464:	ldur	w0, [x29, #-4]
  406468:	ldr	x28, [sp, #304]
  40646c:	ldp	x29, x30, [sp, #288]
  406470:	add	sp, sp, #0x140
  406474:	ret

0000000000406478 <hashmap_freep>:
  406478:	sub	sp, sp, #0x20
  40647c:	stp	x29, x30, [sp, #16]
  406480:	add	x29, sp, #0x10
  406484:	str	x0, [sp, #8]
  406488:	ldr	x8, [sp, #8]
  40648c:	ldr	x8, [x8]
  406490:	cbz	x8, 4064a0 <hashmap_freep+0x28>
  406494:	ldr	x8, [sp, #8]
  406498:	ldr	x0, [x8]
  40649c:	bl	40bdec <hashmap_free>
  4064a0:	ldp	x29, x30, [sp, #16]
  4064a4:	add	sp, sp, #0x20
  4064a8:	ret

00000000004064ac <unit_file_is_active>:
  4064ac:	stp	x29, x30, [sp, #-32]!
  4064b0:	stp	x28, x19, [sp, #16]
  4064b4:	mov	x29, sp
  4064b8:	sub	sp, sp, #0x160
  4064bc:	mov	x19, sp
  4064c0:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  4064c4:	add	x8, x8, #0x4ee
  4064c8:	add	x8, x8, #0x3
  4064cc:	adrp	x9, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4064d0:	add	x9, x9, #0x2bb
  4064d4:	stur	x0, [x29, #-16]
  4064d8:	stur	x1, [x29, #-24]
  4064dc:	stur	x2, [x29, #-32]
  4064e0:	ldur	x10, [x29, #-16]
  4064e4:	str	x8, [x19, #80]
  4064e8:	str	x9, [x19, #72]
  4064ec:	cbnz	x10, 4064f8 <unit_file_is_active+0x4c>
  4064f0:	stur	wzr, [x29, #-4]
  4064f4:	b	406c24 <unit_file_is_active+0x778>
  4064f8:	ldur	x0, [x29, #-24]
  4064fc:	mov	w1, #0x5                   	// #5
  406500:	bl	404340 <unit_name_is_valid@plt>
  406504:	tbnz	w0, #0, 40650c <unit_file_is_active+0x60>
  406508:	b	406688 <unit_file_is_active+0x1dc>
  40650c:	mov	x8, xzr
  406510:	stur	x8, [x29, #-48]
  406514:	stur	x8, [x29, #-56]
  406518:	ldur	x0, [x29, #-24]
  40651c:	bl	404350 <unit_dbus_path_from_name@plt>
  406520:	stur	x0, [x29, #-48]
  406524:	ldur	x8, [x29, #-48]
  406528:	cbnz	x8, 406540 <unit_file_is_active+0x94>
  40652c:	mov	w8, #0xfffffff4            	// #-12
  406530:	stur	w8, [x29, #-4]
  406534:	mov	w8, #0x1                   	// #1
  406538:	stur	w8, [x29, #-60]
  40653c:	b	406674 <unit_file_is_active+0x1c8>
  406540:	ldur	x0, [x29, #-16]
  406544:	ldur	x2, [x29, #-48]
  406548:	ldur	x5, [x29, #-32]
  40654c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406550:	add	x1, x1, #0x1f0
  406554:	adrp	x3, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406558:	add	x3, x3, #0x209
  40655c:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406560:	add	x4, x4, #0x227
  406564:	sub	x6, x29, #0x38
  406568:	bl	404360 <sd_bus_get_property_string@plt>
  40656c:	stur	w0, [x29, #-36]
  406570:	ldur	w8, [x29, #-36]
  406574:	cmp	w8, #0x0
  406578:	cset	w8, ge  // ge = tcont
  40657c:	tbnz	w8, #0, 406640 <unit_file_is_active+0x194>
  406580:	mov	w8, #0x7                   	// #7
  406584:	stur	w8, [x29, #-64]
  406588:	ldur	w8, [x29, #-36]
  40658c:	stur	w8, [x29, #-68]
  406590:	stur	wzr, [x29, #-72]
  406594:	ldur	w0, [x29, #-72]
  406598:	bl	4041e0 <log_get_max_level_realm@plt>
  40659c:	ldur	w8, [x29, #-64]
  4065a0:	and	w8, w8, #0x7
  4065a4:	cmp	w0, w8
  4065a8:	b.lt	406610 <unit_file_is_active+0x164>  // b.tstop
  4065ac:	ldur	w8, [x29, #-72]
  4065b0:	ldur	w9, [x29, #-64]
  4065b4:	orr	w0, w9, w8, lsl #10
  4065b8:	ldur	w1, [x29, #-68]
  4065bc:	ldur	x10, [x29, #-32]
  4065c0:	ldur	w8, [x29, #-36]
  4065c4:	str	w0, [x19, #68]
  4065c8:	mov	x0, x10
  4065cc:	str	w1, [x19, #64]
  4065d0:	mov	w1, w8
  4065d4:	bl	404370 <bus_error_message@plt>
  4065d8:	ldr	w8, [x19, #68]
  4065dc:	str	x0, [x19, #56]
  4065e0:	mov	w0, w8
  4065e4:	ldr	w1, [x19, #64]
  4065e8:	ldr	x2, [x19, #80]
  4065ec:	mov	w3, #0x222                 	// #546
  4065f0:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4065f4:	add	x4, x4, #0x233
  4065f8:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4065fc:	add	x5, x5, #0x247
  406600:	ldr	x6, [x19, #56]
  406604:	bl	4041f0 <log_internal_realm@plt>
  406608:	str	w0, [x19, #52]
  40660c:	b	406624 <unit_file_is_active+0x178>
  406610:	ldur	w0, [x29, #-68]
  406614:	bl	404200 <abs@plt>
  406618:	mov	w8, wzr
  40661c:	subs	w8, w8, w0, uxtb
  406620:	str	w8, [x19, #52]
  406624:	ldr	w8, [x19, #52]
  406628:	stur	w8, [x29, #-76]
  40662c:	ldur	w8, [x29, #-76]
  406630:	stur	w8, [x29, #-4]
  406634:	mov	w8, #0x1                   	// #1
  406638:	stur	w8, [x29, #-60]
  40663c:	b	406674 <unit_file_is_active+0x1c8>
  406640:	ldur	x1, [x29, #-56]
  406644:	adrp	x0, 413000 <manager_connect_bus+0x4e4>
  406648:	add	x0, x0, #0x408
  40664c:	bl	404380 <strv_find@plt>
  406650:	cmp	x0, #0x0
  406654:	cset	w8, ne  // ne = any
  406658:	mov	w9, #0x1                   	// #1
  40665c:	eor	w8, w8, #0x1
  406660:	eor	w8, w8, w9
  406664:	and	w8, w8, #0x1
  406668:	stur	w8, [x29, #-4]
  40666c:	mov	w8, #0x1                   	// #1
  406670:	stur	w8, [x29, #-60]
  406674:	sub	x0, x29, #0x38
  406678:	bl	405118 <freep>
  40667c:	sub	x0, x29, #0x30
  406680:	bl	405118 <freep>
  406684:	b	406c24 <unit_file_is_active+0x778>
  406688:	ldur	x0, [x29, #-24]
  40668c:	mov	w1, #0x2                   	// #2
  406690:	bl	404340 <unit_name_is_valid@plt>
  406694:	tbnz	w0, #0, 40669c <unit_file_is_active+0x1f0>
  406698:	b	406c1c <unit_file_is_active+0x770>
  40669c:	sub	x1, x29, #0x58
  4066a0:	mov	x8, xzr
  4066a4:	stur	x8, [x29, #-88]
  4066a8:	stur	x8, [x29, #-96]
  4066ac:	ldur	x0, [x29, #-16]
  4066b0:	adrp	x2, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4066b4:	add	x2, x2, #0x1f0
  4066b8:	adrp	x3, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4066bc:	add	x3, x3, #0x269
  4066c0:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4066c4:	add	x4, x4, #0x283
  4066c8:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4066cc:	add	x5, x5, #0x2a4
  4066d0:	bl	404390 <sd_bus_message_new_method_call@plt>
  4066d4:	stur	w0, [x29, #-36]
  4066d8:	ldur	w9, [x29, #-36]
  4066dc:	cmp	w9, #0x0
  4066e0:	cset	w9, ge  // ge = tcont
  4066e4:	tbnz	w9, #0, 4066fc <unit_file_is_active+0x250>
  4066e8:	ldur	w8, [x29, #-36]
  4066ec:	stur	w8, [x29, #-4]
  4066f0:	mov	w8, #0x1                   	// #1
  4066f4:	stur	w8, [x29, #-60]
  4066f8:	b	406c08 <unit_file_is_active+0x75c>
  4066fc:	ldur	x0, [x29, #-88]
  406700:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  406704:	add	x1, x1, #0x408
  406708:	bl	4043a0 <sd_bus_message_append_strv@plt>
  40670c:	stur	w0, [x29, #-36]
  406710:	ldur	w8, [x29, #-36]
  406714:	cmp	w8, #0x0
  406718:	cset	w8, ge  // ge = tcont
  40671c:	tbnz	w8, #0, 406734 <unit_file_is_active+0x288>
  406720:	ldur	w8, [x29, #-36]
  406724:	stur	w8, [x29, #-4]
  406728:	mov	w8, #0x1                   	// #1
  40672c:	stur	w8, [x29, #-60]
  406730:	b	406c08 <unit_file_is_active+0x75c>
  406734:	ldur	x0, [x29, #-24]
  406738:	mov	w1, #0x40                  	// #64
  40673c:	bl	4043b0 <strchr@plt>
  406740:	stur	x0, [x29, #-104]
  406744:	ldur	x8, [x29, #-104]
  406748:	cmp	x8, #0x0
  40674c:	cset	w9, ne  // ne = any
  406750:	mov	w10, #0x1                   	// #1
  406754:	eor	w9, w9, #0x1
  406758:	eor	w9, w9, w10
  40675c:	eor	w9, w9, w10
  406760:	and	w9, w9, #0x1
  406764:	mov	w0, w9
  406768:	sxtw	x8, w0
  40676c:	cbz	x8, 406790 <unit_file_is_active+0x2e4>
  406770:	mov	w8, wzr
  406774:	mov	w0, w8
  406778:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40677c:	add	x1, x1, #0x2b8
  406780:	ldr	x2, [x19, #80]
  406784:	mov	w3, #0x23b                 	// #571
  406788:	ldr	x4, [x19, #72]
  40678c:	bl	404150 <log_assert_failed_realm@plt>
  406790:	ldur	x8, [x29, #-24]
  406794:	stur	x8, [x29, #-128]
  406798:	ldur	x0, [x29, #-128]
  40679c:	ldur	x8, [x29, #-104]
  4067a0:	add	x8, x8, #0x1
  4067a4:	ldur	x9, [x29, #-24]
  4067a8:	subs	x1, x8, x9
  4067ac:	bl	4043c0 <strnlen@plt>
  4067b0:	stur	x0, [x29, #-136]
  4067b4:	ldur	x8, [x29, #-136]
  4067b8:	mov	x9, #0x1                   	// #1
  4067bc:	add	x8, x8, #0x1
  4067c0:	mul	x8, x8, x9
  4067c4:	add	x8, x8, #0xf
  4067c8:	and	x8, x8, #0xfffffffffffffff0
  4067cc:	mov	x9, sp
  4067d0:	subs	x8, x9, x8
  4067d4:	mov	sp, x8
  4067d8:	stur	x8, [x29, #-144]
  4067dc:	ldur	x8, [x29, #-144]
  4067e0:	ldur	x9, [x29, #-136]
  4067e4:	add	x8, x8, x9
  4067e8:	mov	w10, #0x0                   	// #0
  4067ec:	strb	w10, [x8]
  4067f0:	ldur	x8, [x29, #-144]
  4067f4:	ldur	x1, [x29, #-128]
  4067f8:	ldur	x2, [x29, #-136]
  4067fc:	mov	x0, x8
  406800:	str	x8, [x19, #40]
  406804:	bl	404220 <memcpy@plt>
  406808:	ldr	x8, [x19, #40]
  40680c:	stur	x8, [x29, #-152]
  406810:	ldur	x9, [x29, #-152]
  406814:	stur	x9, [x29, #-112]
  406818:	ldur	x9, [x29, #-112]
  40681c:	add	x11, x19, #0xb0
  406820:	str	x9, [x19, #176]
  406824:	adrp	x9, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406828:	add	x9, x9, #0x2fb
  40682c:	str	x9, [x11, #8]
  406830:	ldur	x9, [x29, #-104]
  406834:	add	x9, x9, #0x1
  406838:	str	x9, [x11, #16]
  40683c:	str	xzr, [x19, #152]
  406840:	str	xzr, [x19, #144]
  406844:	ldr	x8, [x19, #144]
  406848:	mov	w9, #0x0                   	// #0
  40684c:	cmp	x8, #0x3
  406850:	str	w9, [x19, #36]
  406854:	b.cs	40687c <unit_file_is_active+0x3d0>  // b.hs, b.nlast
  406858:	ldr	x8, [x19, #144]
  40685c:	mov	x9, #0x8                   	// #8
  406860:	mul	x8, x9, x8
  406864:	add	x9, x19, #0xb0
  406868:	add	x8, x9, x8
  40686c:	ldr	x8, [x8]
  406870:	cmp	x8, #0x0
  406874:	cset	w10, ne  // ne = any
  406878:	str	w10, [x19, #36]
  40687c:	ldr	w8, [x19, #36]
  406880:	tbnz	w8, #0, 406888 <unit_file_is_active+0x3dc>
  406884:	b	4068c0 <unit_file_is_active+0x414>
  406888:	ldr	x8, [x19, #144]
  40688c:	mov	x9, #0x8                   	// #8
  406890:	mul	x8, x9, x8
  406894:	add	x9, x19, #0xb0
  406898:	add	x8, x9, x8
  40689c:	ldr	x0, [x8]
  4068a0:	bl	4043d0 <strlen@plt>
  4068a4:	ldr	x8, [x19, #152]
  4068a8:	add	x8, x8, x0
  4068ac:	str	x8, [x19, #152]
  4068b0:	ldr	x8, [x19, #144]
  4068b4:	add	x8, x8, #0x1
  4068b8:	str	x8, [x19, #144]
  4068bc:	b	406844 <unit_file_is_active+0x398>
  4068c0:	ldr	x8, [x19, #152]
  4068c4:	add	x8, x8, #0x1
  4068c8:	str	x8, [x19, #136]
  4068cc:	ldr	x1, [x19, #136]
  4068d0:	mov	x0, #0x1                   	// #1
  4068d4:	bl	40a720 <size_multiply_overflow>
  4068d8:	mov	w8, #0x1                   	// #1
  4068dc:	eor	w9, w0, #0x1
  4068e0:	eor	w9, w9, w8
  4068e4:	eor	w9, w9, w8
  4068e8:	eor	w8, w9, w8
  4068ec:	and	w8, w8, #0x1
  4068f0:	mov	w1, w8
  4068f4:	sxtw	x10, w1
  4068f8:	cbz	x10, 40691c <unit_file_is_active+0x470>
  4068fc:	mov	w8, wzr
  406900:	mov	w0, w8
  406904:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406908:	add	x1, x1, #0x2fd
  40690c:	ldr	x2, [x19, #80]
  406910:	mov	w3, #0x23e                 	// #574
  406914:	ldr	x4, [x19, #72]
  406918:	bl	404150 <log_assert_failed_realm@plt>
  40691c:	ldr	x8, [x19, #136]
  406920:	mov	x9, #0x1                   	// #1
  406924:	mul	x8, x9, x8
  406928:	cmp	x8, #0x400, lsl #12
  40692c:	cset	w10, ls  // ls = plast
  406930:	mov	w11, #0x1                   	// #1
  406934:	eor	w10, w10, #0x1
  406938:	eor	w10, w10, w11
  40693c:	eor	w10, w10, w11
  406940:	and	w10, w10, #0x1
  406944:	mov	w0, w10
  406948:	sxtw	x8, w0
  40694c:	cbz	x8, 406970 <unit_file_is_active+0x4c4>
  406950:	mov	w8, wzr
  406954:	mov	w0, w8
  406958:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40695c:	add	x1, x1, #0x328
  406960:	ldr	x2, [x19, #80]
  406964:	mov	w3, #0x23e                 	// #574
  406968:	ldr	x4, [x19, #72]
  40696c:	bl	404150 <log_assert_failed_realm@plt>
  406970:	ldr	x8, [x19, #136]
  406974:	mov	x9, #0x1                   	// #1
  406978:	mul	x8, x9, x8
  40697c:	mul	x8, x8, x9
  406980:	add	x8, x8, #0xf
  406984:	and	x8, x8, #0xfffffffffffffff0
  406988:	mov	x9, sp
  40698c:	subs	x8, x9, x8
  406990:	mov	sp, x8
  406994:	str	x8, [x19, #128]
  406998:	ldr	x8, [x19, #128]
  40699c:	str	x8, [x19, #168]
  4069a0:	str	x8, [x19, #160]
  4069a4:	str	xzr, [x19, #144]
  4069a8:	ldr	x8, [x19, #144]
  4069ac:	mov	w9, #0x0                   	// #0
  4069b0:	cmp	x8, #0x3
  4069b4:	str	w9, [x19, #32]
  4069b8:	b.cs	4069e0 <unit_file_is_active+0x534>  // b.hs, b.nlast
  4069bc:	ldr	x8, [x19, #144]
  4069c0:	mov	x9, #0x8                   	// #8
  4069c4:	mul	x8, x9, x8
  4069c8:	add	x9, x19, #0xb0
  4069cc:	add	x8, x9, x8
  4069d0:	ldr	x8, [x8]
  4069d4:	cmp	x8, #0x0
  4069d8:	cset	w10, ne  // ne = any
  4069dc:	str	w10, [x19, #32]
  4069e0:	ldr	w8, [x19, #32]
  4069e4:	tbnz	w8, #0, 4069ec <unit_file_is_active+0x540>
  4069e8:	b	406a20 <unit_file_is_active+0x574>
  4069ec:	ldr	x0, [x19, #160]
  4069f0:	ldr	x8, [x19, #144]
  4069f4:	mov	x9, #0x8                   	// #8
  4069f8:	mul	x8, x9, x8
  4069fc:	add	x9, x19, #0xb0
  406a00:	add	x8, x9, x8
  406a04:	ldr	x1, [x8]
  406a08:	bl	4043e0 <stpcpy@plt>
  406a0c:	str	x0, [x19, #160]
  406a10:	ldr	x8, [x19, #144]
  406a14:	add	x8, x8, #0x1
  406a18:	str	x8, [x19, #144]
  406a1c:	b	4069a8 <unit_file_is_active+0x4fc>
  406a20:	ldr	x8, [x19, #160]
  406a24:	mov	w9, #0x0                   	// #0
  406a28:	strb	w9, [x8]
  406a2c:	ldr	x8, [x19, #168]
  406a30:	str	x8, [x19, #120]
  406a34:	ldr	x8, [x19, #120]
  406a38:	stur	x8, [x29, #-120]
  406a3c:	ldur	x0, [x29, #-88]
  406a40:	ldur	x8, [x29, #-120]
  406a44:	add	x10, x19, #0x68
  406a48:	str	x8, [x19, #104]
  406a4c:	mov	x8, xzr
  406a50:	str	x8, [x10, #8]
  406a54:	mov	x1, x10
  406a58:	bl	4043a0 <sd_bus_message_append_strv@plt>
  406a5c:	stur	w0, [x29, #-36]
  406a60:	ldur	w9, [x29, #-36]
  406a64:	cmp	w9, #0x0
  406a68:	cset	w9, ge  // ge = tcont
  406a6c:	tbnz	w9, #0, 406a84 <unit_file_is_active+0x5d8>
  406a70:	ldur	w8, [x29, #-36]
  406a74:	stur	w8, [x29, #-4]
  406a78:	mov	w8, #0x1                   	// #1
  406a7c:	stur	w8, [x29, #-60]
  406a80:	b	406c08 <unit_file_is_active+0x75c>
  406a84:	ldur	x0, [x29, #-16]
  406a88:	ldur	x1, [x29, #-88]
  406a8c:	ldur	x3, [x29, #-32]
  406a90:	mov	x8, xzr
  406a94:	mov	x2, x8
  406a98:	sub	x4, x29, #0x60
  406a9c:	bl	4043f0 <sd_bus_call@plt>
  406aa0:	stur	w0, [x29, #-36]
  406aa4:	ldur	w9, [x29, #-36]
  406aa8:	cmp	w9, #0x0
  406aac:	cset	w9, ge  // ge = tcont
  406ab0:	tbnz	w9, #0, 406b74 <unit_file_is_active+0x6c8>
  406ab4:	mov	w8, #0x7                   	// #7
  406ab8:	str	w8, [x19, #100]
  406abc:	ldur	w8, [x29, #-36]
  406ac0:	str	w8, [x19, #96]
  406ac4:	str	wzr, [x19, #92]
  406ac8:	ldr	w0, [x19, #92]
  406acc:	bl	4041e0 <log_get_max_level_realm@plt>
  406ad0:	ldr	w8, [x19, #100]
  406ad4:	and	w8, w8, #0x7
  406ad8:	cmp	w0, w8
  406adc:	b.lt	406b44 <unit_file_is_active+0x698>  // b.tstop
  406ae0:	ldr	w8, [x19, #92]
  406ae4:	ldr	w9, [x19, #100]
  406ae8:	orr	w0, w9, w8, lsl #10
  406aec:	ldr	w1, [x19, #96]
  406af0:	ldur	x10, [x29, #-32]
  406af4:	ldur	w8, [x29, #-36]
  406af8:	str	w0, [x19, #28]
  406afc:	mov	x0, x10
  406b00:	str	w1, [x19, #24]
  406b04:	mov	w1, w8
  406b08:	bl	404370 <bus_error_message@plt>
  406b0c:	ldr	w8, [x19, #28]
  406b10:	str	x0, [x19, #16]
  406b14:	mov	w0, w8
  406b18:	ldr	w1, [x19, #24]
  406b1c:	ldr	x2, [x19, #80]
  406b20:	mov	w3, #0x246                 	// #582
  406b24:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406b28:	add	x4, x4, #0x233
  406b2c:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406b30:	add	x5, x5, #0x347
  406b34:	ldr	x6, [x19, #16]
  406b38:	bl	4041f0 <log_internal_realm@plt>
  406b3c:	str	w0, [x19, #12]
  406b40:	b	406b58 <unit_file_is_active+0x6ac>
  406b44:	ldr	w0, [x19, #96]
  406b48:	bl	404200 <abs@plt>
  406b4c:	mov	w8, wzr
  406b50:	subs	w8, w8, w0, uxtb
  406b54:	str	w8, [x19, #12]
  406b58:	ldr	w8, [x19, #12]
  406b5c:	str	w8, [x19, #88]
  406b60:	ldr	w8, [x19, #88]
  406b64:	stur	w8, [x29, #-4]
  406b68:	mov	w8, #0x1                   	// #1
  406b6c:	stur	w8, [x29, #-60]
  406b70:	b	406c08 <unit_file_is_active+0x75c>
  406b74:	ldur	x0, [x29, #-96]
  406b78:	mov	w1, #0x61                  	// #97
  406b7c:	adrp	x2, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406b80:	add	x2, x2, #0x360
  406b84:	bl	404400 <sd_bus_message_enter_container@plt>
  406b88:	stur	w0, [x29, #-36]
  406b8c:	ldur	w8, [x29, #-36]
  406b90:	cmp	w8, #0x0
  406b94:	cset	w8, ge  // ge = tcont
  406b98:	tbnz	w8, #0, 406bb0 <unit_file_is_active+0x704>
  406b9c:	ldur	w8, [x29, #-36]
  406ba0:	stur	w8, [x29, #-4]
  406ba4:	mov	w8, #0x1                   	// #1
  406ba8:	stur	w8, [x29, #-60]
  406bac:	b	406c08 <unit_file_is_active+0x75c>
  406bb0:	ldur	x0, [x29, #-96]
  406bb4:	mov	w1, #0x72                  	// #114
  406bb8:	adrp	x2, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406bbc:	add	x2, x2, #0x36d
  406bc0:	bl	404400 <sd_bus_message_enter_container@plt>
  406bc4:	stur	w0, [x29, #-36]
  406bc8:	ldur	w8, [x29, #-36]
  406bcc:	cmp	w8, #0x0
  406bd0:	cset	w8, ge  // ge = tcont
  406bd4:	tbnz	w8, #0, 406bec <unit_file_is_active+0x740>
  406bd8:	ldur	w8, [x29, #-36]
  406bdc:	stur	w8, [x29, #-4]
  406be0:	mov	w8, #0x1                   	// #1
  406be4:	stur	w8, [x29, #-60]
  406be8:	b	406c08 <unit_file_is_active+0x75c>
  406bec:	ldur	w8, [x29, #-36]
  406bf0:	cmp	w8, #0x0
  406bf4:	cset	w8, gt
  406bf8:	and	w8, w8, #0x1
  406bfc:	stur	w8, [x29, #-4]
  406c00:	mov	w8, #0x1                   	// #1
  406c04:	stur	w8, [x29, #-60]
  406c08:	sub	x0, x29, #0x60
  406c0c:	bl	40be1c <sd_bus_message_unrefp>
  406c10:	sub	x0, x29, #0x58
  406c14:	bl	40be1c <sd_bus_message_unrefp>
  406c18:	b	406c24 <unit_file_is_active+0x778>
  406c1c:	mov	w8, #0xffffffea            	// #-22
  406c20:	stur	w8, [x29, #-4]
  406c24:	ldur	w0, [x29, #-4]
  406c28:	mov	sp, x29
  406c2c:	ldp	x28, x19, [sp, #16]
  406c30:	ldp	x29, x30, [sp], #32
  406c34:	ret

0000000000406c38 <attach_unit_file>:
  406c38:	stp	x29, x30, [sp, #-32]!
  406c3c:	stp	x28, x19, [sp, #16]
  406c40:	mov	x29, sp
  406c44:	sub	sp, sp, #0x180
  406c48:	mov	x19, sp
  406c4c:	sub	x8, x29, #0xa0
  406c50:	mov	x9, xzr
  406c54:	adrp	x10, 413000 <manager_connect_bus+0x4e4>
  406c58:	add	x10, x10, #0x4ee
  406c5c:	add	x10, x10, #0x3
  406c60:	adrp	x11, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406c64:	add	x11, x11, #0x37e
  406c68:	adrp	x12, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406c6c:	add	x12, x12, #0x43f
  406c70:	str	x0, [x8, #144]
  406c74:	str	x1, [x8, #136]
  406c78:	stur	w2, [x29, #-28]
  406c7c:	str	x3, [x8, #120]
  406c80:	str	x4, [x8, #112]
  406c84:	stur	w5, [x29, #-52]
  406c88:	str	x6, [x8, #96]
  406c8c:	str	x7, [x8, #88]
  406c90:	str	x9, [x8, #80]
  406c94:	str	x9, [x8, #72]
  406c98:	str	x9, [x8, #64]
  406c9c:	str	x8, [x19, #80]
  406ca0:	str	x10, [x19, #72]
  406ca4:	str	x11, [x19, #64]
  406ca8:	str	x12, [x19, #56]
  406cac:	ldr	x8, [x19, #80]
  406cb0:	ldr	x9, [x8, #144]
  406cb4:	cmp	x9, #0x0
  406cb8:	cset	w10, ne  // ne = any
  406cbc:	mov	w11, #0x1                   	// #1
  406cc0:	eor	w10, w10, #0x1
  406cc4:	eor	w10, w10, w11
  406cc8:	eor	w10, w10, w11
  406ccc:	and	w10, w10, #0x1
  406cd0:	mov	w0, w10
  406cd4:	sxtw	x9, w0
  406cd8:	cbz	x9, 406cfc <attach_unit_file+0xc4>
  406cdc:	mov	w8, wzr
  406ce0:	mov	w0, w8
  406ce4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406ce8:	add	x1, x1, #0x378
  406cec:	ldr	x2, [x19, #72]
  406cf0:	mov	w3, #0x345                 	// #837
  406cf4:	ldr	x4, [x19, #64]
  406cf8:	bl	404150 <log_assert_failed_realm@plt>
  406cfc:	ldr	x8, [x19, #80]
  406d00:	ldr	x9, [x8, #136]
  406d04:	cmp	x9, #0x0
  406d08:	cset	w10, ne  // ne = any
  406d0c:	mov	w11, #0x1                   	// #1
  406d10:	eor	w10, w10, #0x1
  406d14:	eor	w10, w10, w11
  406d18:	eor	w10, w10, w11
  406d1c:	and	w10, w10, #0x1
  406d20:	mov	w0, w10
  406d24:	sxtw	x9, w0
  406d28:	cbz	x9, 406d4c <attach_unit_file+0x114>
  406d2c:	mov	w8, wzr
  406d30:	mov	w0, w8
  406d34:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406d38:	add	x1, x1, #0x415
  406d3c:	ldr	x2, [x19, #72]
  406d40:	mov	w3, #0x346                 	// #838
  406d44:	ldr	x4, [x19, #64]
  406d48:	bl	404150 <log_assert_failed_realm@plt>
  406d4c:	ldr	x8, [x19, #80]
  406d50:	ldr	x9, [x8, #120]
  406d54:	cmp	x9, #0x0
  406d58:	cset	w10, ne  // ne = any
  406d5c:	mov	w11, #0x1                   	// #1
  406d60:	eor	w10, w10, #0x1
  406d64:	eor	w10, w10, w11
  406d68:	eor	w10, w10, w11
  406d6c:	and	w10, w10, #0x1
  406d70:	mov	w0, w10
  406d74:	sxtw	x9, w0
  406d78:	cbz	x9, 406d9c <attach_unit_file+0x164>
  406d7c:	mov	w8, wzr
  406d80:	mov	w0, w8
  406d84:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406d88:	add	x1, x1, #0x420
  406d8c:	ldr	x2, [x19, #72]
  406d90:	mov	w3, #0x347                 	// #839
  406d94:	ldr	x4, [x19, #64]
  406d98:	bl	404150 <log_assert_failed_realm@plt>
  406d9c:	mov	w8, #0x0                   	// #0
  406da0:	sturb	w8, [x29, #-117]
  406da4:	ldr	x9, [x19, #80]
  406da8:	ldr	x10, [x9, #120]
  406dac:	ldrb	w8, [x10, #16]
  406db0:	str	w8, [x19, #52]
  406db4:	cbz	w8, 406dd4 <attach_unit_file+0x19c>
  406db8:	b	406dbc <attach_unit_file+0x184>
  406dbc:	ldr	w8, [x19, #52]
  406dc0:	cmp	w8, #0x2f
  406dc4:	cset	w9, eq  // eq = none
  406dc8:	eor	w9, w9, #0x1
  406dcc:	tbnz	w9, #0, 406de0 <attach_unit_file+0x1a8>
  406dd0:	b	406dd4 <attach_unit_file+0x19c>
  406dd4:	mov	w8, #0x1                   	// #1
  406dd8:	sturb	w8, [x29, #-117]
  406ddc:	b	406de0 <attach_unit_file+0x1a8>
  406de0:	ldurb	w8, [x29, #-117]
  406de4:	mov	w9, #0x1                   	// #1
  406de8:	and	w8, w8, w9
  406dec:	sturb	w8, [x29, #-118]
  406df0:	ldurb	w8, [x29, #-118]
  406df4:	eor	w8, w8, #0x1
  406df8:	eor	w8, w8, w9
  406dfc:	eor	w8, w8, w9
  406e00:	eor	w8, w8, w9
  406e04:	and	w8, w8, #0x1
  406e08:	mov	w0, w8
  406e0c:	sxtw	x10, w0
  406e10:	cbz	x10, 406e34 <attach_unit_file+0x1fc>
  406e14:	mov	w8, wzr
  406e18:	mov	w0, w8
  406e1c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406e20:	add	x1, x1, #0x422
  406e24:	ldr	x2, [x19, #72]
  406e28:	mov	w3, #0x348                 	// #840
  406e2c:	ldr	x4, [x19, #64]
  406e30:	bl	404150 <log_assert_failed_realm@plt>
  406e34:	ldr	x8, [x19, #80]
  406e38:	ldr	x0, [x8, #144]
  406e3c:	ldur	w1, [x29, #-52]
  406e40:	bl	408ab4 <attached_path>
  406e44:	ldr	x8, [x19, #80]
  406e48:	str	x0, [x8, #56]
  406e4c:	ldr	x0, [x8, #56]
  406e50:	mov	w9, #0x1ed                 	// #493
  406e54:	mov	w1, w9
  406e58:	str	w9, [x19, #48]
  406e5c:	bl	404410 <mkdir_parents@plt>
  406e60:	ldr	x8, [x19, #80]
  406e64:	ldr	x10, [x8, #56]
  406e68:	mov	x0, x10
  406e6c:	ldr	w1, [x19, #48]
  406e70:	bl	404420 <mkdir@plt>
  406e74:	cmp	w0, #0x0
  406e78:	cset	w9, ge  // ge = tcont
  406e7c:	tbnz	w9, #0, 406eb4 <attach_unit_file+0x27c>
  406e80:	bl	404270 <__errno_location@plt>
  406e84:	ldr	w8, [x0]
  406e88:	cmp	w8, #0x11
  406e8c:	b.eq	406eb0 <attach_unit_file+0x278>  // b.none
  406e90:	bl	404270 <__errno_location@plt>
  406e94:	ldr	w8, [x0]
  406e98:	mov	w9, wzr
  406e9c:	subs	w8, w9, w8
  406ea0:	stur	w8, [x29, #-4]
  406ea4:	mov	w8, #0x1                   	// #1
  406ea8:	stur	w8, [x29, #-124]
  406eac:	b	407718 <attach_unit_file+0xae0>
  406eb0:	b	406ed4 <attach_unit_file+0x29c>
  406eb4:	ldr	x8, [x19, #80]
  406eb8:	ldr	x0, [x8, #96]
  406ebc:	ldr	x1, [x8, #88]
  406ec0:	ldr	x3, [x8, #56]
  406ec4:	mov	w2, #0x4                   	// #4
  406ec8:	mov	x9, xzr
  406ecc:	mov	x4, x9
  406ed0:	bl	4099d0 <portable_changes_add>
  406ed4:	ldr	x8, [x19, #80]
  406ed8:	ldr	x9, [x8, #120]
  406edc:	add	x9, x9, #0x10
  406ee0:	str	x9, [x8, #24]
  406ee4:	ldr	x9, [x8, #56]
  406ee8:	str	x9, [x8, #16]
  406eec:	ldr	x8, [x19, #80]
  406ef0:	ldr	x9, [x8, #24]
  406ef4:	ldrb	w10, [x9]
  406ef8:	mov	w11, #0x0                   	// #0
  406efc:	cmp	w10, #0x2f
  406f00:	str	w11, [x19, #44]
  406f04:	b.ne	406f20 <attach_unit_file+0x2e8>  // b.any
  406f08:	ldr	x8, [x19, #80]
  406f0c:	ldr	x9, [x8, #24]
  406f10:	ldrb	w10, [x9, #1]
  406f14:	cmp	w10, #0x2f
  406f18:	cset	w10, eq  // eq = none
  406f1c:	str	w10, [x19, #44]
  406f20:	ldr	w8, [x19, #44]
  406f24:	tbnz	w8, #0, 406f2c <attach_unit_file+0x2f4>
  406f28:	b	406f40 <attach_unit_file+0x308>
  406f2c:	ldr	x8, [x19, #80]
  406f30:	ldr	x9, [x8, #24]
  406f34:	add	x9, x9, #0x1
  406f38:	str	x9, [x8, #24]
  406f3c:	b	406eec <attach_unit_file+0x2b4>
  406f40:	ldr	x8, [x19, #80]
  406f44:	ldr	x0, [x8, #16]
  406f48:	bl	40b700 <isempty>
  406f4c:	tbnz	w0, #0, 406f54 <attach_unit_file+0x31c>
  406f50:	b	406f64 <attach_unit_file+0x32c>
  406f54:	ldr	x8, [x19, #80]
  406f58:	ldr	x9, [x8, #24]
  406f5c:	str	x9, [x8, #8]
  406f60:	b	407128 <attach_unit_file+0x4f0>
  406f64:	ldr	x8, [x19, #80]
  406f68:	ldr	x0, [x8, #16]
  406f6c:	bl	4043d0 <strlen@plt>
  406f70:	add	x8, x0, #0x1
  406f74:	ldr	x9, [x19, #80]
  406f78:	ldr	x0, [x9, #24]
  406f7c:	str	x8, [x19, #32]
  406f80:	bl	4043d0 <strlen@plt>
  406f84:	ldr	x8, [x19, #32]
  406f88:	add	x9, x8, x0
  406f8c:	add	x9, x9, #0x1
  406f90:	stur	x9, [x29, #-176]
  406f94:	ldur	x9, [x29, #-176]
  406f98:	stur	x9, [x29, #-184]
  406f9c:	ldur	x1, [x29, #-184]
  406fa0:	mov	x0, #0x1                   	// #1
  406fa4:	bl	40a720 <size_multiply_overflow>
  406fa8:	mov	w8, #0x1                   	// #1
  406fac:	eor	w9, w0, #0x1
  406fb0:	eor	w9, w9, w8
  406fb4:	eor	w9, w9, w8
  406fb8:	eor	w8, w9, w8
  406fbc:	and	w8, w8, #0x1
  406fc0:	mov	w1, w8
  406fc4:	sxtw	x10, w1
  406fc8:	cbz	x10, 406fec <attach_unit_file+0x3b4>
  406fcc:	mov	w8, wzr
  406fd0:	mov	w0, w8
  406fd4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  406fd8:	add	x1, x1, #0x2fd
  406fdc:	ldr	x2, [x19, #72]
  406fe0:	mov	w3, #0x353                 	// #851
  406fe4:	ldr	x4, [x19, #64]
  406fe8:	bl	404150 <log_assert_failed_realm@plt>
  406fec:	ldur	x8, [x29, #-184]
  406ff0:	mov	x9, #0x1                   	// #1
  406ff4:	mul	x8, x9, x8
  406ff8:	cmp	x8, #0x400, lsl #12
  406ffc:	cset	w10, ls  // ls = plast
  407000:	mov	w11, #0x1                   	// #1
  407004:	eor	w10, w10, #0x1
  407008:	eor	w10, w10, w11
  40700c:	eor	w10, w10, w11
  407010:	and	w10, w10, #0x1
  407014:	mov	w0, w10
  407018:	sxtw	x8, w0
  40701c:	cbz	x8, 407040 <attach_unit_file+0x408>
  407020:	mov	w8, wzr
  407024:	mov	w0, w8
  407028:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40702c:	add	x1, x1, #0x328
  407030:	ldr	x2, [x19, #72]
  407034:	mov	w3, #0x353                 	// #851
  407038:	ldr	x4, [x19, #64]
  40703c:	bl	404150 <log_assert_failed_realm@plt>
  407040:	ldur	x8, [x29, #-184]
  407044:	mov	x9, #0x1                   	// #1
  407048:	mul	x8, x9, x8
  40704c:	mul	x8, x8, x9
  407050:	add	x8, x8, #0xf
  407054:	and	x8, x8, #0xfffffffffffffff0
  407058:	mov	x9, sp
  40705c:	subs	x8, x9, x8
  407060:	mov	sp, x8
  407064:	str	x8, [x19, #192]
  407068:	ldr	x8, [x19, #192]
  40706c:	stur	x8, [x29, #-168]
  407070:	ldur	x0, [x29, #-168]
  407074:	ldr	x8, [x19, #80]
  407078:	ldr	x1, [x8, #16]
  40707c:	bl	4043e0 <stpcpy@plt>
  407080:	ldr	x8, [x19, #80]
  407084:	str	x0, [x8]
  407088:	ldr	x8, [x19, #80]
  40708c:	ldr	x9, [x8]
  407090:	ldur	x10, [x29, #-168]
  407094:	mov	w11, #0x0                   	// #0
  407098:	cmp	x9, x10
  40709c:	str	w11, [x19, #28]
  4070a0:	b.ls	4070bc <attach_unit_file+0x484>  // b.plast
  4070a4:	ldr	x8, [x19, #80]
  4070a8:	ldr	x9, [x8]
  4070ac:	ldurb	w10, [x9, #-1]
  4070b0:	cmp	w10, #0x2f
  4070b4:	cset	w10, eq  // eq = none
  4070b8:	str	w10, [x19, #28]
  4070bc:	ldr	w8, [x19, #28]
  4070c0:	tbnz	w8, #0, 4070c8 <attach_unit_file+0x490>
  4070c4:	b	4070e0 <attach_unit_file+0x4a8>
  4070c8:	ldr	x8, [x19, #80]
  4070cc:	ldr	x9, [x8]
  4070d0:	mov	x10, #0xffffffffffffffff    	// #-1
  4070d4:	add	x9, x9, x10
  4070d8:	str	x9, [x8]
  4070dc:	b	407088 <attach_unit_file+0x450>
  4070e0:	ldr	x8, [x19, #80]
  4070e4:	ldr	x9, [x8, #24]
  4070e8:	ldrb	w10, [x9]
  4070ec:	cmp	w10, #0x2f
  4070f0:	b.eq	40710c <attach_unit_file+0x4d4>  // b.none
  4070f4:	ldr	x8, [x19, #80]
  4070f8:	ldr	x9, [x8]
  4070fc:	add	x10, x9, #0x1
  407100:	str	x10, [x8]
  407104:	mov	w11, #0x2f                  	// #47
  407108:	strb	w11, [x9]
  40710c:	ldr	x8, [x19, #80]
  407110:	ldr	x0, [x8]
  407114:	ldr	x1, [x8, #24]
  407118:	bl	404430 <strcpy@plt>
  40711c:	ldur	x8, [x29, #-168]
  407120:	ldr	x9, [x19, #80]
  407124:	str	x8, [x9, #8]
  407128:	ldr	x8, [x19, #80]
  40712c:	ldr	x9, [x8, #8]
  407130:	str	x9, [x19, #184]
  407134:	ldr	x9, [x19, #184]
  407138:	str	x9, [x8, #48]
  40713c:	ldr	x0, [x8, #48]
  407140:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  407144:	add	x1, x1, #0x929
  407148:	mov	x9, xzr
  40714c:	mov	x2, x9
  407150:	bl	404440 <strjoin_real@plt>
  407154:	ldr	x8, [x19, #80]
  407158:	str	x0, [x8, #64]
  40715c:	ldr	x9, [x8, #64]
  407160:	cbnz	x9, 407178 <attach_unit_file+0x540>
  407164:	mov	w8, #0xfffffff4            	// #-12
  407168:	stur	w8, [x29, #-4]
  40716c:	mov	w8, #0x1                   	// #1
  407170:	stur	w8, [x29, #-124]
  407174:	b	407718 <attach_unit_file+0xae0>
  407178:	ldr	x8, [x19, #80]
  40717c:	ldr	x0, [x8, #64]
  407180:	mov	w1, #0x1ed                 	// #493
  407184:	bl	404420 <mkdir@plt>
  407188:	cmp	w0, #0x0
  40718c:	cset	w9, ge  // ge = tcont
  407190:	tbnz	w9, #0, 4071c8 <attach_unit_file+0x590>
  407194:	bl	404270 <__errno_location@plt>
  407198:	ldr	w8, [x0]
  40719c:	cmp	w8, #0x11
  4071a0:	b.eq	4071c4 <attach_unit_file+0x58c>  // b.none
  4071a4:	bl	404270 <__errno_location@plt>
  4071a8:	ldr	w8, [x0]
  4071ac:	mov	w9, wzr
  4071b0:	subs	w8, w9, w8
  4071b4:	stur	w8, [x29, #-4]
  4071b8:	mov	w8, #0x1                   	// #1
  4071bc:	stur	w8, [x29, #-124]
  4071c0:	b	407718 <attach_unit_file+0xae0>
  4071c4:	b	4071e8 <attach_unit_file+0x5b0>
  4071c8:	ldr	x8, [x19, #80]
  4071cc:	ldr	x0, [x8, #96]
  4071d0:	ldr	x1, [x8, #88]
  4071d4:	ldr	x3, [x8, #64]
  4071d8:	mov	w2, #0x4                   	// #4
  4071dc:	mov	x9, xzr
  4071e0:	mov	x4, x9
  4071e4:	bl	4099d0 <portable_changes_add>
  4071e8:	ldr	x8, [x19, #80]
  4071ec:	ldr	x0, [x8, #136]
  4071f0:	ldur	w1, [x29, #-28]
  4071f4:	ldr	x2, [x8, #120]
  4071f8:	ldr	x3, [x8, #64]
  4071fc:	ldr	x5, [x8, #96]
  407200:	ldr	x6, [x8, #88]
  407204:	sub	x4, x29, #0x50
  407208:	bl	40be84 <install_chroot_dropin>
  40720c:	stur	w0, [x29, #-116]
  407210:	ldur	w9, [x29, #-116]
  407214:	cmp	w9, #0x0
  407218:	cset	w9, ge  // ge = tcont
  40721c:	tbnz	w9, #0, 407234 <attach_unit_file+0x5fc>
  407220:	ldur	w8, [x29, #-116]
  407224:	stur	w8, [x29, #-4]
  407228:	mov	w8, #0x1                   	// #1
  40722c:	stur	w8, [x29, #-124]
  407230:	b	407718 <attach_unit_file+0xae0>
  407234:	ldr	x8, [x19, #80]
  407238:	ldr	x0, [x8, #136]
  40723c:	ldr	x1, [x8, #120]
  407240:	ldr	x2, [x8, #64]
  407244:	ldr	x3, [x8, #112]
  407248:	ldur	w4, [x29, #-52]
  40724c:	ldr	x6, [x8, #96]
  407250:	ldr	x7, [x8, #88]
  407254:	sub	x5, x29, #0x58
  407258:	bl	40c26c <install_profile_dropin>
  40725c:	stur	w0, [x29, #-116]
  407260:	ldur	w9, [x29, #-116]
  407264:	cmp	w9, #0x0
  407268:	cset	w9, ge  // ge = tcont
  40726c:	tbnz	w9, #0, 407284 <attach_unit_file+0x64c>
  407270:	ldur	w8, [x29, #-116]
  407274:	stur	w8, [x29, #-4]
  407278:	mov	w8, #0x1                   	// #1
  40727c:	stur	w8, [x29, #-124]
  407280:	b	407718 <attach_unit_file+0xae0>
  407284:	ldur	w8, [x29, #-52]
  407288:	and	w8, w8, #0x2
  40728c:	cbz	w8, 40737c <attach_unit_file+0x744>
  407290:	ldr	x8, [x19, #80]
  407294:	ldr	x9, [x8, #120]
  407298:	ldr	x9, [x9, #8]
  40729c:	cbz	x9, 40737c <attach_unit_file+0x744>
  4072a0:	ldr	x8, [x19, #80]
  4072a4:	ldr	x9, [x8, #120]
  4072a8:	ldr	x0, [x9, #8]
  4072ac:	ldr	x1, [x8, #48]
  4072b0:	bl	404450 <symlink@plt>
  4072b4:	cmp	w0, #0x0
  4072b8:	cset	w10, ge  // ge = tcont
  4072bc:	tbnz	w10, #0, 407358 <attach_unit_file+0x720>
  4072c0:	mov	w8, #0x7                   	// #7
  4072c4:	str	w8, [x19, #180]
  4072c8:	bl	404270 <__errno_location@plt>
  4072cc:	ldr	w8, [x0]
  4072d0:	str	w8, [x19, #176]
  4072d4:	str	wzr, [x19, #172]
  4072d8:	ldr	w0, [x19, #172]
  4072dc:	bl	4041e0 <log_get_max_level_realm@plt>
  4072e0:	ldr	w8, [x19, #180]
  4072e4:	and	w8, w8, #0x7
  4072e8:	cmp	w0, w8
  4072ec:	b.lt	407328 <attach_unit_file+0x6f0>  // b.tstop
  4072f0:	ldr	w8, [x19, #172]
  4072f4:	ldr	w9, [x19, #180]
  4072f8:	orr	w0, w9, w8, lsl #10
  4072fc:	ldr	w1, [x19, #176]
  407300:	ldr	x10, [x19, #80]
  407304:	ldr	x6, [x10, #48]
  407308:	ldr	x2, [x19, #72]
  40730c:	mov	w3, #0x36d                 	// #877
  407310:	ldr	x4, [x19, #56]
  407314:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  407318:	add	x5, x5, #0x450
  40731c:	bl	4041f0 <log_internal_realm@plt>
  407320:	str	w0, [x19, #24]
  407324:	b	40733c <attach_unit_file+0x704>
  407328:	ldr	w0, [x19, #176]
  40732c:	bl	404200 <abs@plt>
  407330:	mov	w8, wzr
  407334:	subs	w8, w8, w0, uxtb
  407338:	str	w8, [x19, #24]
  40733c:	ldr	w8, [x19, #24]
  407340:	str	w8, [x19, #168]
  407344:	ldr	w8, [x19, #168]
  407348:	stur	w8, [x29, #-4]
  40734c:	mov	w8, #0x1                   	// #1
  407350:	stur	w8, [x29, #-124]
  407354:	b	407718 <attach_unit_file+0xae0>
  407358:	ldr	x8, [x19, #80]
  40735c:	ldr	x0, [x8, #96]
  407360:	ldr	x1, [x8, #88]
  407364:	ldr	x3, [x8, #48]
  407368:	ldr	x9, [x8, #120]
  40736c:	ldr	x4, [x9, #8]
  407370:	mov	w2, #0x1                   	// #1
  407374:	bl	4099d0 <portable_changes_add>
  407378:	b	4076d8 <attach_unit_file+0xaa0>
  40737c:	add	x2, x19, #0xa0
  407380:	mov	x8, xzr
  407384:	str	x8, [x19, #160]
  407388:	mov	w9, #0xffffffff            	// #-1
  40738c:	str	w9, [x19, #156]
  407390:	ldr	x8, [x19, #80]
  407394:	ldr	x0, [x8, #56]
  407398:	mov	w1, #0x1                   	// #1
  40739c:	movk	w1, #0x8, lsl #16
  4073a0:	bl	404460 <open_tmpfile_linkable@plt>
  4073a4:	str	w0, [x19, #156]
  4073a8:	ldr	w9, [x19, #156]
  4073ac:	cmp	w9, #0x0
  4073b0:	cset	w9, ge  // ge = tcont
  4073b4:	tbnz	w9, #0, 40744c <attach_unit_file+0x814>
  4073b8:	mov	w8, #0x7                   	// #7
  4073bc:	str	w8, [x19, #152]
  4073c0:	ldr	w8, [x19, #156]
  4073c4:	str	w8, [x19, #148]
  4073c8:	str	wzr, [x19, #144]
  4073cc:	ldr	w0, [x19, #144]
  4073d0:	bl	4041e0 <log_get_max_level_realm@plt>
  4073d4:	ldr	w8, [x19, #152]
  4073d8:	and	w8, w8, #0x7
  4073dc:	cmp	w0, w8
  4073e0:	b.lt	40741c <attach_unit_file+0x7e4>  // b.tstop
  4073e4:	ldr	w8, [x19, #144]
  4073e8:	ldr	w9, [x19, #152]
  4073ec:	orr	w0, w9, w8, lsl #10
  4073f0:	ldr	w1, [x19, #148]
  4073f4:	ldr	x10, [x19, #80]
  4073f8:	ldr	x6, [x10, #48]
  4073fc:	ldr	x2, [x19, #72]
  407400:	mov	w3, #0x377                 	// #887
  407404:	ldr	x4, [x19, #56]
  407408:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40740c:	add	x5, x5, #0x475
  407410:	bl	4041f0 <log_internal_realm@plt>
  407414:	str	w0, [x19, #20]
  407418:	b	407430 <attach_unit_file+0x7f8>
  40741c:	ldr	w0, [x19, #148]
  407420:	bl	404200 <abs@plt>
  407424:	mov	w8, wzr
  407428:	subs	w8, w8, w0, uxtb
  40742c:	str	w8, [x19, #20]
  407430:	ldr	w8, [x19, #20]
  407434:	str	w8, [x19, #140]
  407438:	ldr	w8, [x19, #140]
  40743c:	stur	w8, [x29, #-4]
  407440:	mov	w8, #0x1                   	// #1
  407444:	stur	w8, [x29, #-124]
  407448:	b	4076b0 <attach_unit_file+0xa78>
  40744c:	ldr	x8, [x19, #80]
  407450:	ldr	x9, [x8, #120]
  407454:	ldr	w0, [x9]
  407458:	ldr	w1, [x19, #156]
  40745c:	mov	x2, #0xffffffffffffffff    	// #-1
  407460:	mov	w3, #0x1                   	// #1
  407464:	bl	40c7e8 <copy_bytes>
  407468:	stur	w0, [x29, #-116]
  40746c:	ldur	w10, [x29, #-116]
  407470:	cmp	w10, #0x0
  407474:	cset	w10, ge  // ge = tcont
  407478:	tbnz	w10, #0, 407510 <attach_unit_file+0x8d8>
  40747c:	mov	w8, #0x7                   	// #7
  407480:	str	w8, [x19, #136]
  407484:	ldur	w8, [x29, #-116]
  407488:	str	w8, [x19, #132]
  40748c:	str	wzr, [x19, #128]
  407490:	ldr	w0, [x19, #128]
  407494:	bl	4041e0 <log_get_max_level_realm@plt>
  407498:	ldr	w8, [x19, #136]
  40749c:	and	w8, w8, #0x7
  4074a0:	cmp	w0, w8
  4074a4:	b.lt	4074e0 <attach_unit_file+0x8a8>  // b.tstop
  4074a8:	ldr	w8, [x19, #128]
  4074ac:	ldr	w9, [x19, #136]
  4074b0:	orr	w0, w9, w8, lsl #10
  4074b4:	ldr	w1, [x19, #132]
  4074b8:	ldr	x10, [x19, #80]
  4074bc:	ldr	x6, [x10, #48]
  4074c0:	ldr	x2, [x19, #72]
  4074c4:	mov	w3, #0x37b                 	// #891
  4074c8:	ldr	x4, [x19, #56]
  4074cc:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4074d0:	add	x5, x5, #0x499
  4074d4:	bl	4041f0 <log_internal_realm@plt>
  4074d8:	str	w0, [x19, #16]
  4074dc:	b	4074f4 <attach_unit_file+0x8bc>
  4074e0:	ldr	w0, [x19, #132]
  4074e4:	bl	404200 <abs@plt>
  4074e8:	mov	w8, wzr
  4074ec:	subs	w8, w8, w0, uxtb
  4074f0:	str	w8, [x19, #16]
  4074f4:	ldr	w8, [x19, #16]
  4074f8:	str	w8, [x19, #124]
  4074fc:	ldr	w8, [x19, #124]
  407500:	stur	w8, [x29, #-4]
  407504:	mov	w8, #0x1                   	// #1
  407508:	stur	w8, [x29, #-124]
  40750c:	b	4076b0 <attach_unit_file+0xa78>
  407510:	ldr	w0, [x19, #156]
  407514:	mov	w1, #0x1a4                 	// #420
  407518:	bl	404470 <fchmod@plt>
  40751c:	cmp	w0, #0x0
  407520:	cset	w8, ge  // ge = tcont
  407524:	tbnz	w8, #0, 4075c0 <attach_unit_file+0x988>
  407528:	mov	w8, #0x7                   	// #7
  40752c:	str	w8, [x19, #120]
  407530:	bl	404270 <__errno_location@plt>
  407534:	ldr	w8, [x0]
  407538:	str	w8, [x19, #116]
  40753c:	str	wzr, [x19, #112]
  407540:	ldr	w0, [x19, #112]
  407544:	bl	4041e0 <log_get_max_level_realm@plt>
  407548:	ldr	w8, [x19, #120]
  40754c:	and	w8, w8, #0x7
  407550:	cmp	w0, w8
  407554:	b.lt	407590 <attach_unit_file+0x958>  // b.tstop
  407558:	ldr	w8, [x19, #112]
  40755c:	ldr	w9, [x19, #120]
  407560:	orr	w0, w9, w8, lsl #10
  407564:	ldr	w1, [x19, #116]
  407568:	ldr	x10, [x19, #80]
  40756c:	ldr	x6, [x10, #48]
  407570:	ldr	x2, [x19, #72]
  407574:	mov	w3, #0x37e                 	// #894
  407578:	ldr	x4, [x19, #56]
  40757c:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  407580:	add	x5, x5, #0x4bb
  407584:	bl	4041f0 <log_internal_realm@plt>
  407588:	str	w0, [x19, #12]
  40758c:	b	4075a4 <attach_unit_file+0x96c>
  407590:	ldr	w0, [x19, #116]
  407594:	bl	404200 <abs@plt>
  407598:	mov	w8, wzr
  40759c:	subs	w8, w8, w0, uxtb
  4075a0:	str	w8, [x19, #12]
  4075a4:	ldr	w8, [x19, #12]
  4075a8:	str	w8, [x19, #108]
  4075ac:	ldr	w8, [x19, #108]
  4075b0:	stur	w8, [x29, #-4]
  4075b4:	mov	w8, #0x1                   	// #1
  4075b8:	stur	w8, [x29, #-124]
  4075bc:	b	4076b0 <attach_unit_file+0xa78>
  4075c0:	ldr	w0, [x19, #156]
  4075c4:	ldr	x1, [x19, #160]
  4075c8:	ldr	x8, [x19, #80]
  4075cc:	ldr	x2, [x8, #48]
  4075d0:	bl	404480 <link_tmpfile@plt>
  4075d4:	stur	w0, [x29, #-116]
  4075d8:	ldur	w9, [x29, #-116]
  4075dc:	cmp	w9, #0x0
  4075e0:	cset	w9, ge  // ge = tcont
  4075e4:	tbnz	w9, #0, 40767c <attach_unit_file+0xa44>
  4075e8:	mov	w8, #0x7                   	// #7
  4075ec:	str	w8, [x19, #104]
  4075f0:	ldur	w8, [x29, #-116]
  4075f4:	str	w8, [x19, #100]
  4075f8:	str	wzr, [x19, #96]
  4075fc:	ldr	w0, [x19, #96]
  407600:	bl	4041e0 <log_get_max_level_realm@plt>
  407604:	ldr	w8, [x19, #104]
  407608:	and	w8, w8, #0x7
  40760c:	cmp	w0, w8
  407610:	b.lt	40764c <attach_unit_file+0xa14>  // b.tstop
  407614:	ldr	w8, [x19, #96]
  407618:	ldr	w9, [x19, #104]
  40761c:	orr	w0, w9, w8, lsl #10
  407620:	ldr	w1, [x19, #100]
  407624:	ldr	x10, [x19, #80]
  407628:	ldr	x6, [x10, #48]
  40762c:	ldr	x2, [x19, #72]
  407630:	mov	w3, #0x382                 	// #898
  407634:	ldr	x4, [x19, #56]
  407638:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40763c:	add	x5, x5, #0x4ef
  407640:	bl	4041f0 <log_internal_realm@plt>
  407644:	str	w0, [x19, #8]
  407648:	b	407660 <attach_unit_file+0xa28>
  40764c:	ldr	w0, [x19, #100]
  407650:	bl	404200 <abs@plt>
  407654:	mov	w8, wzr
  407658:	subs	w8, w8, w0, uxtb
  40765c:	str	w8, [x19, #8]
  407660:	ldr	w8, [x19, #8]
  407664:	str	w8, [x19, #92]
  407668:	ldr	w8, [x19, #92]
  40766c:	stur	w8, [x29, #-4]
  407670:	mov	w8, #0x1                   	// #1
  407674:	stur	w8, [x29, #-124]
  407678:	b	4076b0 <attach_unit_file+0xa78>
  40767c:	ldr	x0, [x19, #160]
  407680:	bl	404f44 <mfree>
  407684:	str	x0, [x19, #160]
  407688:	ldr	x8, [x19, #80]
  40768c:	ldr	x0, [x8, #96]
  407690:	ldr	x1, [x8, #88]
  407694:	ldr	x3, [x8, #48]
  407698:	ldr	x9, [x8, #120]
  40769c:	ldr	x4, [x9, #8]
  4076a0:	mov	w10, wzr
  4076a4:	mov	w2, w10
  4076a8:	bl	4099d0 <portable_changes_add>
  4076ac:	stur	wzr, [x29, #-124]
  4076b0:	add	x0, x19, #0x9c
  4076b4:	bl	40b374 <closep>
  4076b8:	add	x0, x19, #0xa0
  4076bc:	bl	40be50 <unlink_and_freep>
  4076c0:	ldur	w8, [x29, #-124]
  4076c4:	cmp	w8, #0x0
  4076c8:	cset	w8, eq  // eq = none
  4076cc:	eor	w8, w8, #0x1
  4076d0:	tbnz	w8, #0, 407718 <attach_unit_file+0xae0>
  4076d4:	b	4076d8 <attach_unit_file+0xaa0>
  4076d8:	ldr	x8, [x19, #80]
  4076dc:	ldr	x0, [x8, #80]
  4076e0:	bl	404f44 <mfree>
  4076e4:	ldr	x8, [x19, #80]
  4076e8:	str	x0, [x8, #80]
  4076ec:	ldr	x0, [x8, #72]
  4076f0:	bl	404f44 <mfree>
  4076f4:	ldr	x8, [x19, #80]
  4076f8:	str	x0, [x8, #72]
  4076fc:	ldr	x0, [x8, #64]
  407700:	bl	404f44 <mfree>
  407704:	ldr	x8, [x19, #80]
  407708:	str	x0, [x8, #64]
  40770c:	stur	wzr, [x29, #-4]
  407710:	mov	w9, #0x1                   	// #1
  407714:	stur	w9, [x29, #-124]
  407718:	sub	x0, x29, #0x60
  40771c:	bl	40b248 <rmdir_and_freep>
  407720:	sub	x0, x29, #0x58
  407724:	bl	40be50 <unlink_and_freep>
  407728:	sub	x0, x29, #0x50
  40772c:	bl	40be50 <unlink_and_freep>
  407730:	ldur	w0, [x29, #-4]
  407734:	mov	sp, x29
  407738:	ldp	x28, x19, [sp, #16]
  40773c:	ldp	x29, x30, [sp], #32
  407740:	ret

0000000000407744 <install_image_symlink>:
  407744:	sub	sp, sp, #0xa0
  407748:	stp	x29, x30, [sp, #144]
  40774c:	add	x29, sp, #0x90
  407750:	mov	x8, xzr
  407754:	adrp	x9, 413000 <manager_connect_bus+0x4e4>
  407758:	add	x9, x9, #0x4ee
  40775c:	add	x9, x9, #0x3
  407760:	stur	x0, [x29, #-16]
  407764:	stur	w1, [x29, #-20]
  407768:	stur	x2, [x29, #-32]
  40776c:	stur	x3, [x29, #-40]
  407770:	stur	x8, [x29, #-48]
  407774:	str	x9, [sp, #48]
  407778:	ldur	x8, [x29, #-16]
  40777c:	cmp	x8, #0x0
  407780:	cset	w9, ne  // ne = any
  407784:	mov	w10, #0x1                   	// #1
  407788:	eor	w9, w9, #0x1
  40778c:	eor	w9, w9, w10
  407790:	eor	w9, w9, w10
  407794:	and	w9, w9, #0x1
  407798:	mov	w0, w9
  40779c:	sxtw	x8, w0
  4077a0:	cbz	x8, 4077c8 <install_image_symlink+0x84>
  4077a4:	mov	w8, wzr
  4077a8:	mov	w0, w8
  4077ac:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4077b0:	add	x1, x1, #0x415
  4077b4:	ldr	x2, [sp, #48]
  4077b8:	mov	w3, #0x3b4                 	// #948
  4077bc:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4077c0:	add	x4, x4, #0x80d
  4077c4:	bl	404150 <log_assert_failed_realm@plt>
  4077c8:	ldur	x1, [x29, #-16]
  4077cc:	mov	w0, #0x1                   	// #1
  4077d0:	bl	404490 <image_in_search_path@plt>
  4077d4:	tbnz	w0, #0, 4077dc <install_image_symlink+0x98>
  4077d8:	b	4077ec <install_image_symlink+0xa8>
  4077dc:	stur	wzr, [x29, #-4]
  4077e0:	mov	w8, #0x1                   	// #1
  4077e4:	stur	w8, [x29, #-56]
  4077e8:	b	4079c8 <install_image_symlink+0x284>
  4077ec:	ldur	x0, [x29, #-16]
  4077f0:	ldur	w1, [x29, #-20]
  4077f4:	sub	x2, x29, #0x30
  4077f8:	bl	409880 <image_symlink>
  4077fc:	stur	w0, [x29, #-52]
  407800:	ldur	w8, [x29, #-52]
  407804:	cmp	w8, #0x0
  407808:	cset	w8, ge  // ge = tcont
  40780c:	tbnz	w8, #0, 4078a0 <install_image_symlink+0x15c>
  407810:	mov	w8, #0x7                   	// #7
  407814:	stur	w8, [x29, #-60]
  407818:	ldur	w8, [x29, #-52]
  40781c:	stur	w8, [x29, #-64]
  407820:	stur	wzr, [x29, #-68]
  407824:	ldur	w0, [x29, #-68]
  407828:	bl	4041e0 <log_get_max_level_realm@plt>
  40782c:	ldur	w8, [x29, #-60]
  407830:	and	w8, w8, #0x7
  407834:	cmp	w0, w8
  407838:	b.lt	407870 <install_image_symlink+0x12c>  // b.tstop
  40783c:	ldur	w8, [x29, #-68]
  407840:	ldur	w9, [x29, #-60]
  407844:	orr	w0, w9, w8, lsl #10
  407848:	ldur	w1, [x29, #-64]
  40784c:	ldr	x2, [sp, #48]
  407850:	mov	w3, #0x3be                 	// #958
  407854:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  407858:	add	x4, x4, #0x861
  40785c:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  407860:	add	x5, x5, #0x877
  407864:	bl	4041f0 <log_internal_realm@plt>
  407868:	str	w0, [sp, #44]
  40786c:	b	407884 <install_image_symlink+0x140>
  407870:	ldur	w0, [x29, #-64]
  407874:	bl	404200 <abs@plt>
  407878:	mov	w8, wzr
  40787c:	subs	w8, w8, w0, uxtb
  407880:	str	w8, [sp, #44]
  407884:	ldr	w8, [sp, #44]
  407888:	str	w8, [sp, #72]
  40788c:	ldr	w8, [sp, #72]
  407890:	stur	w8, [x29, #-4]
  407894:	mov	w8, #0x1                   	// #1
  407898:	stur	w8, [x29, #-56]
  40789c:	b	4079c8 <install_image_symlink+0x284>
  4078a0:	ldur	x0, [x29, #-48]
  4078a4:	mov	w1, #0x1ed                 	// #493
  4078a8:	bl	404410 <mkdir_parents@plt>
  4078ac:	ldur	x8, [x29, #-16]
  4078b0:	ldur	x1, [x29, #-48]
  4078b4:	mov	x0, x8
  4078b8:	bl	404450 <symlink@plt>
  4078bc:	cmp	w0, #0x0
  4078c0:	cset	w9, ge  // ge = tcont
  4078c4:	tbnz	w9, #0, 40799c <install_image_symlink+0x258>
  4078c8:	mov	w8, #0x7                   	// #7
  4078cc:	str	w8, [sp, #68]
  4078d0:	bl	404270 <__errno_location@plt>
  4078d4:	ldr	w8, [x0]
  4078d8:	str	w8, [sp, #64]
  4078dc:	str	wzr, [sp, #60]
  4078e0:	ldr	w0, [sp, #60]
  4078e4:	bl	4041e0 <log_get_max_level_realm@plt>
  4078e8:	ldr	w8, [sp, #68]
  4078ec:	and	w8, w8, #0x7
  4078f0:	cmp	w0, w8
  4078f4:	b.lt	40796c <install_image_symlink+0x228>  // b.tstop
  4078f8:	ldr	w8, [sp, #60]
  4078fc:	ldr	w9, [sp, #68]
  407900:	orr	w0, w9, w8, lsl #10
  407904:	ldr	w1, [sp, #64]
  407908:	ldur	x6, [x29, #-16]
  40790c:	mov	w8, #0x7                   	// #7
  407910:	str	w0, [sp, #40]
  407914:	mov	w0, w8
  407918:	str	w1, [sp, #36]
  40791c:	str	x6, [sp, #24]
  407920:	bl	4044a0 <special_glyph@plt>
  407924:	ldur	x10, [x29, #-48]
  407928:	ldr	w8, [sp, #40]
  40792c:	str	x0, [sp, #16]
  407930:	mov	w0, w8
  407934:	ldr	w1, [sp, #36]
  407938:	ldr	x2, [sp, #48]
  40793c:	mov	w3, #0x3c3                 	// #963
  407940:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  407944:	add	x4, x4, #0x861
  407948:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40794c:	add	x5, x5, #0x79a
  407950:	ldr	x6, [sp, #24]
  407954:	ldr	x7, [sp, #16]
  407958:	mov	x11, sp
  40795c:	str	x10, [x11]
  407960:	bl	4041f0 <log_internal_realm@plt>
  407964:	str	w0, [sp, #12]
  407968:	b	407980 <install_image_symlink+0x23c>
  40796c:	ldr	w0, [sp, #64]
  407970:	bl	404200 <abs@plt>
  407974:	mov	w8, wzr
  407978:	subs	w8, w8, w0, uxtb
  40797c:	str	w8, [sp, #12]
  407980:	ldr	w8, [sp, #12]
  407984:	str	w8, [sp, #56]
  407988:	ldr	w8, [sp, #56]
  40798c:	stur	w8, [x29, #-4]
  407990:	mov	w8, #0x1                   	// #1
  407994:	stur	w8, [x29, #-56]
  407998:	b	4079c8 <install_image_symlink+0x284>
  40799c:	ldur	x0, [x29, #-32]
  4079a0:	ldur	x1, [x29, #-40]
  4079a4:	ldur	x3, [x29, #-48]
  4079a8:	ldur	x4, [x29, #-16]
  4079ac:	mov	w8, #0x1                   	// #1
  4079b0:	mov	w2, w8
  4079b4:	str	w8, [sp, #8]
  4079b8:	bl	4099d0 <portable_changes_add>
  4079bc:	stur	wzr, [x29, #-4]
  4079c0:	ldr	w8, [sp, #8]
  4079c4:	stur	w8, [x29, #-56]
  4079c8:	sub	x0, x29, #0x30
  4079cc:	bl	405118 <freep>
  4079d0:	ldur	w0, [x29, #-4]
  4079d4:	ldp	x29, x30, [sp, #144]
  4079d8:	add	sp, sp, #0xa0
  4079dc:	ret

00000000004079e0 <portable_detach>:
  4079e0:	stp	x29, x30, [sp, #-32]!
  4079e4:	str	x28, [sp, #16]
  4079e8:	mov	x29, sp
  4079ec:	sub	sp, sp, #0x330
  4079f0:	add	x8, sp, #0x150
  4079f4:	mov	x9, #0x68                  	// #104
  4079f8:	mov	x10, xzr
  4079fc:	mov	w11, wzr
  407a00:	adrp	x12, 413000 <manager_connect_bus+0x4e4>
  407a04:	add	x12, x12, #0x4ee
  407a08:	add	x12, x12, #0x3
  407a0c:	adrp	x13, 413000 <manager_connect_bus+0x4e4>
  407a10:	add	x13, x13, #0x7ba
  407a14:	sub	x14, x29, #0xa0
  407a18:	stur	x0, [x29, #-16]
  407a1c:	stur	x1, [x29, #-24]
  407a20:	stur	w2, [x29, #-28]
  407a24:	stur	x3, [x29, #-40]
  407a28:	stur	x4, [x29, #-48]
  407a2c:	stur	x5, [x29, #-56]
  407a30:	mov	x0, x14
  407a34:	mov	w1, w11
  407a38:	mov	x2, x9
  407a3c:	str	x8, [sp, #112]
  407a40:	str	x10, [sp, #104]
  407a44:	str	x12, [sp, #96]
  407a48:	str	x13, [sp, #88]
  407a4c:	bl	4042f0 <memset@plt>
  407a50:	ldr	x8, [sp, #104]
  407a54:	stur	x8, [x29, #-168]
  407a58:	stur	x8, [x29, #-176]
  407a5c:	stur	x8, [x29, #-184]
  407a60:	stur	wzr, [x29, #-236]
  407a64:	ldur	x8, [x29, #-24]
  407a68:	cmp	x8, #0x0
  407a6c:	cset	w9, ne  // ne = any
  407a70:	mov	w10, #0x1                   	// #1
  407a74:	eor	w9, w9, #0x1
  407a78:	eor	w9, w9, w10
  407a7c:	eor	w9, w9, w10
  407a80:	and	w9, w9, #0x1
  407a84:	mov	w0, w9
  407a88:	sxtw	x8, w0
  407a8c:	cbz	x8, 407ab4 <portable_detach+0xd4>
  407a90:	mov	w8, wzr
  407a94:	mov	w0, w8
  407a98:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  407a9c:	add	x1, x1, #0x558
  407aa0:	ldr	x2, [sp, #96]
  407aa4:	mov	w3, #0x476                 	// #1142
  407aa8:	adrp	x4, 413000 <manager_connect_bus+0x4e4>
  407aac:	add	x4, x4, #0x752
  407ab0:	bl	404150 <log_assert_failed_realm@plt>
  407ab4:	sub	x0, x29, #0xa0
  407ab8:	mov	w8, wzr
  407abc:	mov	w1, w8
  407ac0:	mov	w2, #0x4                   	// #4
  407ac4:	mov	x9, xzr
  407ac8:	mov	x3, x9
  407acc:	bl	404300 <lookup_paths_init@plt>
  407ad0:	stur	w0, [x29, #-240]
  407ad4:	ldur	w8, [x29, #-240]
  407ad8:	cmp	w8, #0x0
  407adc:	cset	w8, ge  // ge = tcont
  407ae0:	tbnz	w8, #0, 407af8 <portable_detach+0x118>
  407ae4:	ldur	w8, [x29, #-240]
  407ae8:	stur	w8, [x29, #-4]
  407aec:	mov	w8, #0x1                   	// #1
  407af0:	stur	w8, [x29, #-244]
  407af4:	b	408a18 <portable_detach+0x1038>
  407af8:	ldur	w1, [x29, #-28]
  407afc:	sub	x0, x29, #0xa0
  407b00:	bl	408ab4 <attached_path>
  407b04:	stur	x0, [x29, #-192]
  407b08:	ldur	x0, [x29, #-192]
  407b0c:	bl	4044b0 <opendir@plt>
  407b10:	stur	x0, [x29, #-184]
  407b14:	ldur	x8, [x29, #-184]
  407b18:	cbnz	x8, 407bc4 <portable_detach+0x1e4>
  407b1c:	bl	404270 <__errno_location@plt>
  407b20:	ldr	w8, [x0]
  407b24:	cmp	w8, #0x2
  407b28:	b.ne	407b30 <portable_detach+0x150>  // b.any
  407b2c:	b	408978 <portable_detach+0xf98>
  407b30:	mov	w8, #0x7                   	// #7
  407b34:	stur	w8, [x29, #-248]
  407b38:	bl	404270 <__errno_location@plt>
  407b3c:	ldr	w8, [x0]
  407b40:	stur	w8, [x29, #-252]
  407b44:	stur	wzr, [x29, #-256]
  407b48:	ldur	w0, [x29, #-256]
  407b4c:	bl	4041e0 <log_get_max_level_realm@plt>
  407b50:	ldur	w8, [x29, #-248]
  407b54:	and	w8, w8, #0x7
  407b58:	cmp	w0, w8
  407b5c:	b.lt	407b94 <portable_detach+0x1b4>  // b.tstop
  407b60:	ldur	w8, [x29, #-256]
  407b64:	ldur	w9, [x29, #-248]
  407b68:	orr	w0, w9, w8, lsl #10
  407b6c:	ldur	w1, [x29, #-252]
  407b70:	ldur	x6, [x29, #-192]
  407b74:	ldr	x2, [sp, #96]
  407b78:	mov	w3, #0x483                 	// #1155
  407b7c:	ldr	x4, [sp, #88]
  407b80:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  407b84:	add	x5, x5, #0x7ca
  407b88:	bl	4041f0 <log_internal_realm@plt>
  407b8c:	str	w0, [sp, #84]
  407b90:	b	407ba8 <portable_detach+0x1c8>
  407b94:	ldur	w0, [x29, #-252]
  407b98:	bl	404200 <abs@plt>
  407b9c:	mov	w8, wzr
  407ba0:	subs	w8, w8, w0, uxtb
  407ba4:	str	w8, [sp, #84]
  407ba8:	ldr	w8, [sp, #84]
  407bac:	str	w8, [sp, #556]
  407bb0:	ldr	w8, [sp, #556]
  407bb4:	stur	w8, [x29, #-4]
  407bb8:	mov	w8, #0x1                   	// #1
  407bbc:	stur	w8, [x29, #-244]
  407bc0:	b	408a18 <portable_detach+0x1038>
  407bc4:	adrp	x0, 42f000 <__FRAME_END__+0x18438>
  407bc8:	add	x0, x0, #0xf98
  407bcc:	bl	4044c0 <internal_set_new@plt>
  407bd0:	stur	x0, [x29, #-168]
  407bd4:	ldur	x8, [x29, #-168]
  407bd8:	cbnz	x8, 407bf0 <portable_detach+0x210>
  407bdc:	mov	w8, #0xfffffff4            	// #-12
  407be0:	stur	w8, [x29, #-4]
  407be4:	mov	w8, #0x1                   	// #1
  407be8:	stur	w8, [x29, #-244]
  407bec:	b	408a18 <portable_detach+0x1038>
  407bf0:	adrp	x0, 42f000 <__FRAME_END__+0x18438>
  407bf4:	add	x0, x0, #0xfb8
  407bf8:	bl	4044c0 <internal_set_new@plt>
  407bfc:	stur	x0, [x29, #-176]
  407c00:	ldur	x8, [x29, #-176]
  407c04:	cbnz	x8, 407c1c <portable_detach+0x23c>
  407c08:	mov	w8, #0xfffffff4            	// #-12
  407c0c:	stur	w8, [x29, #-4]
  407c10:	mov	w8, #0x1                   	// #1
  407c14:	stur	w8, [x29, #-244]
  407c18:	b	408a18 <portable_detach+0x1038>
  407c1c:	bl	404270 <__errno_location@plt>
  407c20:	str	wzr, [x0]
  407c24:	ldur	x0, [x29, #-184]
  407c28:	bl	4044d0 <readdir64@plt>
  407c2c:	stur	x0, [x29, #-232]
  407c30:	ldur	x8, [x29, #-232]
  407c34:	cbnz	x8, 407ce4 <portable_detach+0x304>
  407c38:	bl	404270 <__errno_location@plt>
  407c3c:	ldr	w8, [x0]
  407c40:	cmp	w8, #0x0
  407c44:	cset	w8, le
  407c48:	tbnz	w8, #0, 407ce0 <portable_detach+0x300>
  407c4c:	mov	w8, #0x7                   	// #7
  407c50:	str	w8, [sp, #552]
  407c54:	bl	404270 <__errno_location@plt>
  407c58:	ldr	w8, [x0]
  407c5c:	str	w8, [sp, #548]
  407c60:	str	wzr, [sp, #544]
  407c64:	ldr	w0, [sp, #544]
  407c68:	bl	4041e0 <log_get_max_level_realm@plt>
  407c6c:	ldr	w8, [sp, #552]
  407c70:	and	w8, w8, #0x7
  407c74:	cmp	w0, w8
  407c78:	b.lt	407cb0 <portable_detach+0x2d0>  // b.tstop
  407c7c:	ldr	w8, [sp, #544]
  407c80:	ldr	w9, [sp, #552]
  407c84:	orr	w0, w9, w8, lsl #10
  407c88:	ldr	w1, [sp, #548]
  407c8c:	ldur	x6, [x29, #-192]
  407c90:	ldr	x2, [sp, #96]
  407c94:	mov	w3, #0x48e                 	// #1166
  407c98:	ldr	x4, [sp, #88]
  407c9c:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  407ca0:	add	x5, x5, #0x7ec
  407ca4:	bl	4041f0 <log_internal_realm@plt>
  407ca8:	str	w0, [sp, #80]
  407cac:	b	407cc4 <portable_detach+0x2e4>
  407cb0:	ldr	w0, [sp, #548]
  407cb4:	bl	404200 <abs@plt>
  407cb8:	mov	w8, wzr
  407cbc:	subs	w8, w8, w0, uxtb
  407cc0:	str	w8, [sp, #80]
  407cc4:	ldr	w8, [sp, #80]
  407cc8:	str	w8, [sp, #540]
  407ccc:	ldr	w8, [sp, #540]
  407cd0:	stur	w8, [x29, #-4]
  407cd4:	mov	w8, #0x1                   	// #1
  407cd8:	stur	w8, [x29, #-244]
  407cdc:	b	408a18 <portable_detach+0x1038>
  407ce0:	b	4081a8 <portable_detach+0x7c8>
  407ce4:	ldur	x8, [x29, #-232]
  407ce8:	add	x0, x8, #0x13
  407cec:	bl	4044e0 <hidden_or_backup_file@plt>
  407cf0:	tbnz	w0, #0, 407cf8 <portable_detach+0x318>
  407cf4:	b	407cfc <portable_detach+0x31c>
  407cf8:	b	408190 <portable_detach+0x7b0>
  407cfc:	mov	x8, xzr
  407d00:	str	x8, [sp, #528]
  407d04:	ldur	x8, [x29, #-232]
  407d08:	add	x0, x8, #0x13
  407d0c:	mov	w1, #0x7                   	// #7
  407d10:	bl	404340 <unit_name_is_valid@plt>
  407d14:	tbnz	w0, #0, 407d24 <portable_detach+0x344>
  407d18:	mov	w8, #0x7                   	// #7
  407d1c:	stur	w8, [x29, #-244]
  407d20:	b	408168 <portable_detach+0x788>
  407d24:	ldur	x0, [x29, #-168]
  407d28:	ldur	x8, [x29, #-232]
  407d2c:	add	x1, x8, #0x13
  407d30:	bl	408bb0 <set_get>
  407d34:	cbz	x0, 407d44 <portable_detach+0x364>
  407d38:	mov	w8, #0x7                   	// #7
  407d3c:	stur	w8, [x29, #-244]
  407d40:	b	408168 <portable_detach+0x788>
  407d44:	ldur	x0, [x29, #-184]
  407d48:	ldur	x1, [x29, #-232]
  407d4c:	bl	4044f0 <dirent_ensure_type@plt>
  407d50:	mov	w8, #0x0                   	// #0
  407d54:	strb	w8, [sp, #523]
  407d58:	ldur	x9, [x29, #-232]
  407d5c:	ldrb	w8, [x9, #18]
  407d60:	cmp	w8, #0x8
  407d64:	str	w8, [sp, #76]
  407d68:	b.eq	407d88 <portable_detach+0x3a8>  // b.none
  407d6c:	b	407d70 <portable_detach+0x390>
  407d70:	ldr	w8, [sp, #76]
  407d74:	cmp	w8, #0xa
  407d78:	cset	w9, eq  // eq = none
  407d7c:	eor	w9, w9, #0x1
  407d80:	tbnz	w9, #0, 407d94 <portable_detach+0x3b4>
  407d84:	b	407d88 <portable_detach+0x3a8>
  407d88:	mov	w8, #0x1                   	// #1
  407d8c:	strb	w8, [sp, #523]
  407d90:	b	407d94 <portable_detach+0x3b4>
  407d94:	ldrb	w8, [sp, #523]
  407d98:	and	w8, w8, #0x1
  407d9c:	strb	w8, [sp, #522]
  407da0:	ldrb	w8, [sp, #522]
  407da4:	tbnz	w8, #0, 407db4 <portable_detach+0x3d4>
  407da8:	mov	w8, #0x7                   	// #7
  407dac:	stur	w8, [x29, #-244]
  407db0:	b	408168 <portable_detach+0x788>
  407db4:	ldur	x0, [x29, #-184]
  407db8:	ldur	x1, [x29, #-192]
  407dbc:	ldur	x8, [x29, #-232]
  407dc0:	add	x2, x8, #0x13
  407dc4:	ldur	x3, [x29, #-24]
  407dc8:	add	x4, sp, #0x210
  407dcc:	bl	408bdc <test_chroot_dropin>
  407dd0:	stur	w0, [x29, #-240]
  407dd4:	ldur	w9, [x29, #-240]
  407dd8:	cmp	w9, #0x0
  407ddc:	cset	w9, ge  // ge = tcont
  407de0:	tbnz	w9, #0, 407df8 <portable_detach+0x418>
  407de4:	ldur	w8, [x29, #-240]
  407de8:	stur	w8, [x29, #-4]
  407dec:	mov	w8, #0x1                   	// #1
  407df0:	stur	w8, [x29, #-244]
  407df4:	b	408168 <portable_detach+0x788>
  407df8:	ldur	w8, [x29, #-240]
  407dfc:	cbnz	w8, 407e0c <portable_detach+0x42c>
  407e00:	mov	w8, #0x7                   	// #7
  407e04:	stur	w8, [x29, #-244]
  407e08:	b	408168 <portable_detach+0x788>
  407e0c:	ldur	x8, [x29, #-232]
  407e10:	add	x2, x8, #0x13
  407e14:	mov	w9, wzr
  407e18:	mov	w0, w9
  407e1c:	sub	x1, x29, #0xa0
  407e20:	add	x3, sp, #0x20c
  407e24:	bl	404500 <unit_file_lookup_state@plt>
  407e28:	stur	w0, [x29, #-240]
  407e2c:	ldur	w9, [x29, #-240]
  407e30:	cmp	w9, #0x0
  407e34:	cset	w9, ge  // ge = tcont
  407e38:	tbnz	w9, #0, 407ed0 <portable_detach+0x4f0>
  407e3c:	mov	w8, #0x7                   	// #7
  407e40:	str	w8, [sp, #516]
  407e44:	ldur	w8, [x29, #-240]
  407e48:	str	w8, [sp, #512]
  407e4c:	str	wzr, [sp, #508]
  407e50:	ldr	w0, [sp, #508]
  407e54:	bl	4041e0 <log_get_max_level_realm@plt>
  407e58:	ldr	w8, [sp, #516]
  407e5c:	and	w8, w8, #0x7
  407e60:	cmp	w0, w8
  407e64:	b.lt	407ea0 <portable_detach+0x4c0>  // b.tstop
  407e68:	ldr	w8, [sp, #508]
  407e6c:	ldr	w9, [sp, #516]
  407e70:	orr	w0, w9, w8, lsl #10
  407e74:	ldr	w1, [sp, #512]
  407e78:	ldur	x10, [x29, #-232]
  407e7c:	add	x6, x10, #0x13
  407e80:	ldr	x2, [sp, #96]
  407e84:	mov	w3, #0x4a5                 	// #1189
  407e88:	ldr	x4, [sp, #88]
  407e8c:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  407e90:	add	x5, x5, #0x813
  407e94:	bl	4041f0 <log_internal_realm@plt>
  407e98:	str	w0, [sp, #72]
  407e9c:	b	407eb4 <portable_detach+0x4d4>
  407ea0:	ldr	w0, [sp, #512]
  407ea4:	bl	404200 <abs@plt>
  407ea8:	mov	w8, wzr
  407eac:	subs	w8, w8, w0, uxtb
  407eb0:	str	w8, [sp, #72]
  407eb4:	ldr	w8, [sp, #72]
  407eb8:	str	w8, [sp, #504]
  407ebc:	ldr	w8, [sp, #504]
  407ec0:	stur	w8, [x29, #-4]
  407ec4:	mov	w8, #0x1                   	// #1
  407ec8:	stur	w8, [x29, #-244]
  407ecc:	b	408168 <portable_detach+0x788>
  407ed0:	mov	w8, #0x0                   	// #0
  407ed4:	strb	w8, [sp, #503]
  407ed8:	ldr	w8, [sp, #524]
  407edc:	subs	w9, w8, #0x1
  407ee0:	cmp	w9, #0x2
  407ee4:	str	w8, [sp, #68]
  407ee8:	b.ls	407f10 <portable_detach+0x530>  // b.plast
  407eec:	b	407ef0 <portable_detach+0x510>
  407ef0:	ldr	w8, [sp, #68]
  407ef4:	subs	w9, w8, #0x6
  407ef8:	mov	w10, #0x1                   	// #1
  407efc:	cmp	w9, #0x1
  407f00:	cset	w9, ls  // ls = plast
  407f04:	eor	w9, w9, w10
  407f08:	tbnz	w9, #0, 407f1c <portable_detach+0x53c>
  407f0c:	b	407f10 <portable_detach+0x530>
  407f10:	mov	w8, #0x1                   	// #1
  407f14:	strb	w8, [sp, #503]
  407f18:	b	407f1c <portable_detach+0x53c>
  407f1c:	ldrb	w8, [sp, #503]
  407f20:	and	w8, w8, #0x1
  407f24:	strb	w8, [sp, #502]
  407f28:	ldrb	w8, [sp, #502]
  407f2c:	tbnz	w8, #0, 407f88 <portable_detach+0x5a8>
  407f30:	ldur	x0, [x29, #-56]
  407f34:	ldur	x8, [x29, #-232]
  407f38:	add	x3, x8, #0x13
  407f3c:	ldr	w9, [sp, #524]
  407f40:	str	x0, [sp, #56]
  407f44:	mov	w0, w9
  407f48:	str	x3, [sp, #48]
  407f4c:	bl	404510 <unit_file_state_to_string@plt>
  407f50:	ldr	x8, [sp, #56]
  407f54:	str	x0, [sp, #40]
  407f58:	mov	x0, x8
  407f5c:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  407f60:	add	x1, x1, #0x6cd
  407f64:	adrp	x2, 413000 <manager_connect_bus+0x4e4>
  407f68:	add	x2, x2, #0x843
  407f6c:	ldr	x3, [sp, #48]
  407f70:	ldr	x4, [sp, #40]
  407f74:	bl	404250 <sd_bus_error_setf@plt>
  407f78:	stur	w0, [x29, #-4]
  407f7c:	mov	w9, #0x1                   	// #1
  407f80:	stur	w9, [x29, #-244]
  407f84:	b	408168 <portable_detach+0x788>
  407f88:	ldur	x0, [x29, #-16]
  407f8c:	ldur	x8, [x29, #-232]
  407f90:	add	x1, x8, #0x13
  407f94:	ldur	x2, [x29, #-56]
  407f98:	bl	4064ac <unit_file_is_active>
  407f9c:	stur	w0, [x29, #-240]
  407fa0:	ldur	w9, [x29, #-240]
  407fa4:	cmp	w9, #0x0
  407fa8:	cset	w9, ge  // ge = tcont
  407fac:	tbnz	w9, #0, 407fc4 <portable_detach+0x5e4>
  407fb0:	ldur	w8, [x29, #-240]
  407fb4:	stur	w8, [x29, #-4]
  407fb8:	mov	w8, #0x1                   	// #1
  407fbc:	stur	w8, [x29, #-244]
  407fc0:	b	408168 <portable_detach+0x788>
  407fc4:	ldur	w8, [x29, #-240]
  407fc8:	cmp	w8, #0x0
  407fcc:	cset	w8, le
  407fd0:	tbnz	w8, #0, 408004 <portable_detach+0x624>
  407fd4:	ldur	x0, [x29, #-56]
  407fd8:	ldur	x8, [x29, #-232]
  407fdc:	add	x3, x8, #0x13
  407fe0:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  407fe4:	add	x1, x1, #0x6cd
  407fe8:	adrp	x2, 413000 <manager_connect_bus+0x4e4>
  407fec:	add	x2, x2, #0x872
  407ff0:	bl	404250 <sd_bus_error_setf@plt>
  407ff4:	stur	w0, [x29, #-4]
  407ff8:	mov	w9, #0x1                   	// #1
  407ffc:	stur	w9, [x29, #-244]
  408000:	b	408168 <portable_detach+0x788>
  408004:	ldur	x0, [x29, #-168]
  408008:	ldur	x8, [x29, #-232]
  40800c:	add	x1, x8, #0x13
  408010:	bl	404520 <set_put_strdup@plt>
  408014:	stur	w0, [x29, #-240]
  408018:	ldur	w9, [x29, #-240]
  40801c:	cmp	w9, #0x0
  408020:	cset	w9, ge  // ge = tcont
  408024:	tbnz	w9, #0, 4080bc <portable_detach+0x6dc>
  408028:	mov	w8, #0x7                   	// #7
  40802c:	str	w8, [sp, #496]
  408030:	ldur	w8, [x29, #-240]
  408034:	str	w8, [sp, #492]
  408038:	str	wzr, [sp, #488]
  40803c:	ldr	w0, [sp, #488]
  408040:	bl	4041e0 <log_get_max_level_realm@plt>
  408044:	ldr	w8, [sp, #496]
  408048:	and	w8, w8, #0x7
  40804c:	cmp	w0, w8
  408050:	b.lt	40808c <portable_detach+0x6ac>  // b.tstop
  408054:	ldr	w8, [sp, #488]
  408058:	ldr	w9, [sp, #496]
  40805c:	orr	w0, w9, w8, lsl #10
  408060:	ldr	w1, [sp, #492]
  408064:	ldur	x10, [x29, #-232]
  408068:	add	x6, x10, #0x13
  40806c:	ldr	x2, [sp, #96]
  408070:	mov	w3, #0x4b1                 	// #1201
  408074:	ldr	x4, [sp, #88]
  408078:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  40807c:	add	x5, x5, #0x89a
  408080:	bl	4041f0 <log_internal_realm@plt>
  408084:	str	w0, [sp, #36]
  408088:	b	4080a0 <portable_detach+0x6c0>
  40808c:	ldr	w0, [sp, #492]
  408090:	bl	404200 <abs@plt>
  408094:	mov	w8, wzr
  408098:	subs	w8, w8, w0, uxtb
  40809c:	str	w8, [sp, #36]
  4080a0:	ldr	w8, [sp, #36]
  4080a4:	str	w8, [sp, #484]
  4080a8:	ldr	w8, [sp, #484]
  4080ac:	stur	w8, [x29, #-4]
  4080b0:	mov	w8, #0x1                   	// #1
  4080b4:	stur	w8, [x29, #-244]
  4080b8:	b	408168 <portable_detach+0x788>
  4080bc:	ldr	x0, [sp, #528]
  4080c0:	bl	404530 <path_is_absolute@plt>
  4080c4:	tbnz	w0, #0, 4080cc <portable_detach+0x6ec>
  4080c8:	b	408164 <portable_detach+0x784>
  4080cc:	ldr	x1, [sp, #528]
  4080d0:	mov	w0, #0x1                   	// #1
  4080d4:	bl	404490 <image_in_search_path@plt>
  4080d8:	tbnz	w0, #0, 408164 <portable_detach+0x784>
  4080dc:	sub	x0, x29, #0xb0
  4080e0:	adrp	x1, 42f000 <__FRAME_END__+0x18438>
  4080e4:	add	x1, x1, #0xfb8
  4080e8:	bl	404540 <internal_set_ensure_allocated@plt>
  4080ec:	stur	w0, [x29, #-240]
  4080f0:	ldur	w8, [x29, #-240]
  4080f4:	cmp	w8, #0x0
  4080f8:	cset	w8, ge  // ge = tcont
  4080fc:	tbnz	w8, #0, 408114 <portable_detach+0x734>
  408100:	ldur	w8, [x29, #-240]
  408104:	stur	w8, [x29, #-4]
  408108:	mov	w8, #0x1                   	// #1
  40810c:	stur	w8, [x29, #-244]
  408110:	b	408168 <portable_detach+0x788>
  408114:	ldur	x0, [x29, #-176]
  408118:	ldr	x1, [sp, #528]
  40811c:	bl	404550 <set_put@plt>
  408120:	stur	w0, [x29, #-240]
  408124:	ldur	w8, [x29, #-240]
  408128:	cmp	w8, #0x0
  40812c:	cset	w8, lt  // lt = tstop
  408130:	tbnz	w8, #0, 408140 <portable_detach+0x760>
  408134:	mov	x8, xzr
  408138:	str	x8, [sp, #528]
  40813c:	b	408164 <portable_detach+0x784>
  408140:	ldur	w8, [x29, #-240]
  408144:	mov	w9, #0xffffffef            	// #-17
  408148:	cmp	w8, w9
  40814c:	b.eq	408164 <portable_detach+0x784>  // b.none
  408150:	ldur	w8, [x29, #-240]
  408154:	stur	w8, [x29, #-4]
  408158:	mov	w8, #0x1                   	// #1
  40815c:	stur	w8, [x29, #-244]
  408160:	b	408168 <portable_detach+0x788>
  408164:	stur	wzr, [x29, #-244]
  408168:	add	x0, sp, #0x210
  40816c:	bl	405118 <freep>
  408170:	ldur	w8, [x29, #-244]
  408174:	str	w8, [sp, #32]
  408178:	cbz	w8, 408190 <portable_detach+0x7b0>
  40817c:	b	408180 <portable_detach+0x7a0>
  408180:	ldr	w8, [sp, #32]
  408184:	cmp	w8, #0x7
  408188:	b.eq	408190 <portable_detach+0x7b0>  // b.none
  40818c:	b	408a18 <portable_detach+0x1038>
  408190:	bl	404270 <__errno_location@plt>
  408194:	str	wzr, [x0]
  408198:	ldur	x0, [x29, #-184]
  40819c:	bl	4044d0 <readdir64@plt>
  4081a0:	stur	x0, [x29, #-232]
  4081a4:	b	407c30 <portable_detach+0x250>
  4081a8:	ldur	x0, [x29, #-168]
  4081ac:	bl	4092c8 <set_isempty>
  4081b0:	tbnz	w0, #0, 4081b8 <portable_detach+0x7d8>
  4081b4:	b	4081bc <portable_detach+0x7dc>
  4081b8:	b	408978 <portable_detach+0xf98>
  4081bc:	add	x8, sp, #0x1d0
  4081c0:	mov	w9, #0xfffffffe            	// #-2
  4081c4:	str	w9, [sp, #464]
  4081c8:	mov	x10, xzr
  4081cc:	str	x10, [x8, #8]
  4081d0:	ldr	x8, [sp, #112]
  4081d4:	ldr	q0, [x8, #128]
  4081d8:	str	q0, [x8, #256]
  4081dc:	ldur	x0, [x29, #-168]
  4081e0:	sub	x1, x29, #0xe0
  4081e4:	sub	x2, x29, #0xc8
  4081e8:	bl	404560 <set_iterate@plt>
  4081ec:	tbnz	w0, #0, 4081f4 <portable_detach+0x814>
  4081f0:	b	408608 <portable_detach+0xc28>
  4081f4:	mov	x8, xzr
  4081f8:	str	x8, [sp, #456]
  4081fc:	ldur	x0, [x29, #-184]
  408200:	bl	404570 <dirfd@plt>
  408204:	ldur	x1, [x29, #-200]
  408208:	mov	w9, wzr
  40820c:	mov	w2, w9
  408210:	bl	404580 <unlinkat@plt>
  408214:	cmp	w0, #0x0
  408218:	cset	w9, ge  // ge = tcont
  40821c:	tbnz	w9, #0, 4082dc <portable_detach+0x8fc>
  408220:	mov	w8, #0x7                   	// #7
  408224:	str	w8, [sp, #444]
  408228:	bl	404270 <__errno_location@plt>
  40822c:	ldr	w8, [x0]
  408230:	str	w8, [sp, #440]
  408234:	str	wzr, [sp, #436]
  408238:	ldr	w0, [sp, #436]
  40823c:	bl	4041e0 <log_get_max_level_realm@plt>
  408240:	ldr	w8, [sp, #444]
  408244:	and	w8, w8, #0x7
  408248:	cmp	w0, w8
  40824c:	b.lt	408288 <portable_detach+0x8a8>  // b.tstop
  408250:	ldr	w8, [sp, #436]
  408254:	ldr	w9, [sp, #444]
  408258:	orr	w0, w9, w8, lsl #10
  40825c:	ldr	w1, [sp, #440]
  408260:	ldur	x6, [x29, #-192]
  408264:	ldur	x7, [x29, #-200]
  408268:	ldr	x2, [sp, #96]
  40826c:	mov	w3, #0x4ca                 	// #1226
  408270:	ldr	x4, [sp, #88]
  408274:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  408278:	add	x5, x5, #0x8c2
  40827c:	bl	4041f0 <log_internal_realm@plt>
  408280:	str	w0, [sp, #28]
  408284:	b	40829c <portable_detach+0x8bc>
  408288:	ldr	w0, [sp, #440]
  40828c:	bl	404200 <abs@plt>
  408290:	mov	w8, wzr
  408294:	subs	w8, w8, w0, uxtb
  408298:	str	w8, [sp, #28]
  40829c:	ldr	w8, [sp, #28]
  4082a0:	str	w8, [sp, #432]
  4082a4:	bl	404270 <__errno_location@plt>
  4082a8:	ldr	w8, [x0]
  4082ac:	cmp	w8, #0x2
  4082b0:	b.eq	4082d8 <portable_detach+0x8f8>  // b.none
  4082b4:	ldur	w8, [x29, #-236]
  4082b8:	cmp	w8, #0x0
  4082bc:	cset	w8, lt  // lt = tstop
  4082c0:	tbnz	w8, #0, 4082d8 <portable_detach+0x8f8>
  4082c4:	bl	404270 <__errno_location@plt>
  4082c8:	ldr	w8, [x0]
  4082cc:	mov	w9, wzr
  4082d0:	subs	w8, w9, w8
  4082d4:	stur	w8, [x29, #-236]
  4082d8:	b	4082fc <portable_detach+0x91c>
  4082dc:	ldur	x0, [x29, #-40]
  4082e0:	ldur	x1, [x29, #-48]
  4082e4:	ldur	x3, [x29, #-192]
  4082e8:	ldur	x4, [x29, #-200]
  4082ec:	mov	w2, #0x2                   	// #2
  4082f0:	mov	x8, xzr
  4082f4:	mov	x5, x8
  4082f8:	bl	4092f8 <portable_changes_add_with_prefix>
  4082fc:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  408300:	add	x8, x8, #0x8e3
  408304:	str	x8, [sp, #448]
  408308:	str	x8, [sp, #392]
  40830c:	ldr	x8, [sp, #392]
  408310:	add	x9, sp, #0x190
  408314:	str	x8, [sp, #400]
  408318:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  40831c:	add	x8, x8, #0x8f6
  408320:	str	x8, [x9, #8]
  408324:	mov	x8, xzr
  408328:	str	x8, [x9, #16]
  40832c:	str	x9, [sp, #424]
  408330:	ldr	x8, [sp, #448]
  408334:	cbz	x8, 4084ac <portable_detach+0xacc>
  408338:	mov	x8, xzr
  40833c:	str	x8, [sp, #384]
  408340:	ldur	x0, [x29, #-200]
  408344:	ldr	x1, [sp, #448]
  408348:	mov	x2, x8
  40834c:	bl	404440 <strjoin_real@plt>
  408350:	str	x0, [sp, #384]
  408354:	ldr	x8, [sp, #384]
  408358:	cbnz	x8, 408370 <portable_detach+0x990>
  40835c:	mov	w8, #0xfffffff4            	// #-12
  408360:	stur	w8, [x29, #-4]
  408364:	mov	w8, #0x1                   	// #1
  408368:	stur	w8, [x29, #-244]
  40836c:	b	408474 <portable_detach+0xa94>
  408370:	ldur	x0, [x29, #-184]
  408374:	bl	404570 <dirfd@plt>
  408378:	ldr	x1, [sp, #384]
  40837c:	mov	w8, wzr
  408380:	mov	w2, w8
  408384:	bl	404580 <unlinkat@plt>
  408388:	cmp	w0, #0x0
  40838c:	cset	w8, ge  // ge = tcont
  408390:	tbnz	w8, #0, 408450 <portable_detach+0xa70>
  408394:	mov	w8, #0x7                   	// #7
  408398:	str	w8, [sp, #380]
  40839c:	bl	404270 <__errno_location@plt>
  4083a0:	ldr	w8, [x0]
  4083a4:	str	w8, [sp, #376]
  4083a8:	str	wzr, [sp, #372]
  4083ac:	ldr	w0, [sp, #372]
  4083b0:	bl	4041e0 <log_get_max_level_realm@plt>
  4083b4:	ldr	w8, [sp, #380]
  4083b8:	and	w8, w8, #0x7
  4083bc:	cmp	w0, w8
  4083c0:	b.lt	4083fc <portable_detach+0xa1c>  // b.tstop
  4083c4:	ldr	w8, [sp, #372]
  4083c8:	ldr	w9, [sp, #380]
  4083cc:	orr	w0, w9, w8, lsl #10
  4083d0:	ldr	w1, [sp, #376]
  4083d4:	ldur	x6, [x29, #-192]
  4083d8:	ldr	x7, [sp, #384]
  4083dc:	ldr	x2, [sp, #96]
  4083e0:	mov	w3, #0x4d9                 	// #1241
  4083e4:	ldr	x4, [sp, #88]
  4083e8:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  4083ec:	add	x5, x5, #0x90a
  4083f0:	bl	4041f0 <log_internal_realm@plt>
  4083f4:	str	w0, [sp, #24]
  4083f8:	b	408410 <portable_detach+0xa30>
  4083fc:	ldr	w0, [sp, #376]
  408400:	bl	404200 <abs@plt>
  408404:	mov	w8, wzr
  408408:	subs	w8, w8, w0, uxtb
  40840c:	str	w8, [sp, #24]
  408410:	ldr	w8, [sp, #24]
  408414:	str	w8, [sp, #368]
  408418:	bl	404270 <__errno_location@plt>
  40841c:	ldr	w8, [x0]
  408420:	cmp	w8, #0x2
  408424:	b.eq	40844c <portable_detach+0xa6c>  // b.none
  408428:	ldur	w8, [x29, #-236]
  40842c:	cmp	w8, #0x0
  408430:	cset	w8, lt  // lt = tstop
  408434:	tbnz	w8, #0, 40844c <portable_detach+0xa6c>
  408438:	bl	404270 <__errno_location@plt>
  40843c:	ldr	w8, [x0]
  408440:	mov	w9, wzr
  408444:	subs	w8, w9, w8
  408448:	stur	w8, [x29, #-236]
  40844c:	b	408470 <portable_detach+0xa90>
  408450:	ldur	x0, [x29, #-40]
  408454:	ldur	x1, [x29, #-48]
  408458:	ldur	x3, [x29, #-192]
  40845c:	ldr	x4, [sp, #384]
  408460:	mov	w2, #0x2                   	// #2
  408464:	mov	x8, xzr
  408468:	mov	x5, x8
  40846c:	bl	4092f8 <portable_changes_add_with_prefix>
  408470:	stur	wzr, [x29, #-244]
  408474:	add	x0, sp, #0x180
  408478:	bl	405118 <freep>
  40847c:	ldur	w8, [x29, #-244]
  408480:	cmp	w8, #0x0
  408484:	cset	w8, eq  // eq = none
  408488:	eor	w8, w8, #0x1
  40848c:	tbnz	w8, #0, 4085e4 <portable_detach+0xc04>
  408490:	b	408494 <portable_detach+0xab4>
  408494:	ldr	x8, [sp, #424]
  408498:	add	x9, x8, #0x8
  40849c:	str	x9, [sp, #424]
  4084a0:	ldr	x8, [x8, #8]
  4084a4:	str	x8, [sp, #448]
  4084a8:	b	408330 <portable_detach+0x950>
  4084ac:	ldur	x0, [x29, #-200]
  4084b0:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  4084b4:	add	x1, x1, #0x929
  4084b8:	mov	x8, xzr
  4084bc:	mov	x2, x8
  4084c0:	bl	404440 <strjoin_real@plt>
  4084c4:	str	x0, [sp, #456]
  4084c8:	ldr	x8, [sp, #456]
  4084cc:	cbnz	x8, 4084e4 <portable_detach+0xb04>
  4084d0:	mov	w8, #0xfffffff4            	// #-12
  4084d4:	stur	w8, [x29, #-4]
  4084d8:	mov	w8, #0x1                   	// #1
  4084dc:	stur	w8, [x29, #-244]
  4084e0:	b	4085e4 <portable_detach+0xc04>
  4084e4:	ldur	x0, [x29, #-184]
  4084e8:	bl	404570 <dirfd@plt>
  4084ec:	ldr	x1, [sp, #456]
  4084f0:	mov	w2, #0x200                 	// #512
  4084f4:	bl	404580 <unlinkat@plt>
  4084f8:	cmp	w0, #0x0
  4084fc:	cset	w8, ge  // ge = tcont
  408500:	tbnz	w8, #0, 4085c0 <portable_detach+0xbe0>
  408504:	mov	w8, #0x7                   	// #7
  408508:	str	w8, [sp, #364]
  40850c:	bl	404270 <__errno_location@plt>
  408510:	ldr	w8, [x0]
  408514:	str	w8, [sp, #360]
  408518:	str	wzr, [sp, #356]
  40851c:	ldr	w0, [sp, #356]
  408520:	bl	4041e0 <log_get_max_level_realm@plt>
  408524:	ldr	w8, [sp, #364]
  408528:	and	w8, w8, #0x7
  40852c:	cmp	w0, w8
  408530:	b.lt	40856c <portable_detach+0xb8c>  // b.tstop
  408534:	ldr	w8, [sp, #356]
  408538:	ldr	w9, [sp, #364]
  40853c:	orr	w0, w9, w8, lsl #10
  408540:	ldr	w1, [sp, #360]
  408544:	ldur	x6, [x29, #-192]
  408548:	ldr	x7, [sp, #456]
  40854c:	ldr	x2, [sp, #96]
  408550:	mov	w3, #0x4e6                 	// #1254
  408554:	ldr	x4, [sp, #88]
  408558:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  40855c:	add	x5, x5, #0x92c
  408560:	bl	4041f0 <log_internal_realm@plt>
  408564:	str	w0, [sp, #20]
  408568:	b	408580 <portable_detach+0xba0>
  40856c:	ldr	w0, [sp, #360]
  408570:	bl	404200 <abs@plt>
  408574:	mov	w8, wzr
  408578:	subs	w8, w8, w0, uxtb
  40857c:	str	w8, [sp, #20]
  408580:	ldr	w8, [sp, #20]
  408584:	str	w8, [sp, #352]
  408588:	bl	404270 <__errno_location@plt>
  40858c:	ldr	w8, [x0]
  408590:	cmp	w8, #0x2
  408594:	b.eq	4085bc <portable_detach+0xbdc>  // b.none
  408598:	ldur	w8, [x29, #-236]
  40859c:	cmp	w8, #0x0
  4085a0:	cset	w8, lt  // lt = tstop
  4085a4:	tbnz	w8, #0, 4085bc <portable_detach+0xbdc>
  4085a8:	bl	404270 <__errno_location@plt>
  4085ac:	ldr	w8, [x0]
  4085b0:	mov	w9, wzr
  4085b4:	subs	w8, w9, w8
  4085b8:	stur	w8, [x29, #-236]
  4085bc:	b	4085e0 <portable_detach+0xc00>
  4085c0:	ldur	x0, [x29, #-40]
  4085c4:	ldur	x1, [x29, #-48]
  4085c8:	ldur	x3, [x29, #-192]
  4085cc:	ldr	x4, [sp, #456]
  4085d0:	mov	w2, #0x2                   	// #2
  4085d4:	mov	x8, xzr
  4085d8:	mov	x5, x8
  4085dc:	bl	4092f8 <portable_changes_add_with_prefix>
  4085e0:	stur	wzr, [x29, #-244]
  4085e4:	add	x0, sp, #0x1c8
  4085e8:	bl	405118 <freep>
  4085ec:	ldur	w8, [x29, #-244]
  4085f0:	cmp	w8, #0x0
  4085f4:	cset	w8, eq  // eq = none
  4085f8:	eor	w8, w8, #0x1
  4085fc:	tbnz	w8, #0, 408a18 <portable_detach+0x1038>
  408600:	b	408604 <portable_detach+0xc24>
  408604:	b	4081dc <portable_detach+0x7fc>
  408608:	add	x8, sp, #0x150
  40860c:	mov	w9, #0xfffffffe            	// #-2
  408610:	str	w9, [sp, #336]
  408614:	mov	x10, xzr
  408618:	str	x10, [x8, #8]
  40861c:	ldr	x8, [sp, #112]
  408620:	ldr	q0, [x8]
  408624:	str	q0, [x8, #256]
  408628:	ldur	x0, [x29, #-176]
  40862c:	sub	x1, x29, #0xe0
  408630:	sub	x2, x29, #0xc8
  408634:	bl	404560 <set_iterate@plt>
  408638:	tbnz	w0, #0, 408640 <portable_detach+0xc60>
  40863c:	b	408934 <portable_detach+0xf54>
  408640:	add	x2, sp, #0x148
  408644:	mov	x8, xzr
  408648:	str	x8, [sp, #328]
  40864c:	ldur	x0, [x29, #-200]
  408650:	ldur	w1, [x29, #-28]
  408654:	bl	409880 <image_symlink>
  408658:	stur	w0, [x29, #-240]
  40865c:	ldur	w9, [x29, #-240]
  408660:	cmp	w9, #0x0
  408664:	cset	w9, ge  // ge = tcont
  408668:	tbnz	w9, #0, 4086f4 <portable_detach+0xd14>
  40866c:	mov	w8, #0x7                   	// #7
  408670:	str	w8, [sp, #196]
  408674:	ldur	w8, [x29, #-240]
  408678:	str	w8, [sp, #192]
  40867c:	str	wzr, [sp, #188]
  408680:	ldr	w0, [sp, #188]
  408684:	bl	4041e0 <log_get_max_level_realm@plt>
  408688:	ldr	w8, [sp, #196]
  40868c:	and	w8, w8, #0x7
  408690:	cmp	w0, w8
  408694:	b.lt	4086cc <portable_detach+0xcec>  // b.tstop
  408698:	ldr	w8, [sp, #188]
  40869c:	ldr	w9, [sp, #196]
  4086a0:	orr	w0, w9, w8, lsl #10
  4086a4:	ldr	w1, [sp, #192]
  4086a8:	ldur	x6, [x29, #-200]
  4086ac:	ldr	x2, [sp, #96]
  4086b0:	mov	w3, #0x4f5                 	// #1269
  4086b4:	ldr	x4, [sp, #88]
  4086b8:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  4086bc:	add	x5, x5, #0x955
  4086c0:	bl	4041f0 <log_internal_realm@plt>
  4086c4:	str	w0, [sp, #16]
  4086c8:	b	4086e0 <portable_detach+0xd00>
  4086cc:	ldr	w0, [sp, #192]
  4086d0:	bl	404200 <abs@plt>
  4086d4:	mov	w8, wzr
  4086d8:	subs	w8, w8, w0, uxtb
  4086dc:	str	w8, [sp, #16]
  4086e0:	ldr	w8, [sp, #16]
  4086e4:	str	w8, [sp, #184]
  4086e8:	mov	w8, #0x10                  	// #16
  4086ec:	stur	w8, [x29, #-244]
  4086f0:	b	408918 <portable_detach+0xf38>
  4086f4:	ldr	x0, [sp, #328]
  4086f8:	add	x1, sp, #0xc8
  4086fc:	bl	413170 <lstat64>
  408700:	cmp	w0, #0x0
  408704:	cset	w8, ge  // ge = tcont
  408708:	tbnz	w8, #0, 408798 <portable_detach+0xdb8>
  40870c:	mov	w8, #0x7                   	// #7
  408710:	str	w8, [sp, #180]
  408714:	bl	404270 <__errno_location@plt>
  408718:	ldr	w8, [x0]
  40871c:	str	w8, [sp, #176]
  408720:	str	wzr, [sp, #172]
  408724:	ldr	w0, [sp, #172]
  408728:	bl	4041e0 <log_get_max_level_realm@plt>
  40872c:	ldr	w8, [sp, #180]
  408730:	and	w8, w8, #0x7
  408734:	cmp	w0, w8
  408738:	b.lt	408770 <portable_detach+0xd90>  // b.tstop
  40873c:	ldr	w8, [sp, #172]
  408740:	ldr	w9, [sp, #180]
  408744:	orr	w0, w9, w8, lsl #10
  408748:	ldr	w1, [sp, #176]
  40874c:	ldr	x6, [sp, #328]
  408750:	ldr	x2, [sp, #96]
  408754:	mov	w3, #0x4fa                 	// #1274
  408758:	ldr	x4, [sp, #88]
  40875c:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  408760:	add	x5, x5, #0x98e
  408764:	bl	4041f0 <log_internal_realm@plt>
  408768:	str	w0, [sp, #12]
  40876c:	b	408784 <portable_detach+0xda4>
  408770:	ldr	w0, [sp, #176]
  408774:	bl	404200 <abs@plt>
  408778:	mov	w8, wzr
  40877c:	subs	w8, w8, w0, uxtb
  408780:	str	w8, [sp, #12]
  408784:	ldr	w8, [sp, #12]
  408788:	str	w8, [sp, #168]
  40878c:	mov	w8, #0x10                  	// #16
  408790:	stur	w8, [x29, #-244]
  408794:	b	408918 <portable_detach+0xf38>
  408798:	ldr	w8, [sp, #216]
  40879c:	and	w8, w8, #0xf000
  4087a0:	cmp	w8, #0xa, lsl #12
  4087a4:	b.eq	40882c <portable_detach+0xe4c>  // b.none
  4087a8:	mov	w8, #0x7                   	// #7
  4087ac:	str	w8, [sp, #164]
  4087b0:	str	wzr, [sp, #160]
  4087b4:	str	wzr, [sp, #156]
  4087b8:	ldr	w0, [sp, #156]
  4087bc:	bl	4041e0 <log_get_max_level_realm@plt>
  4087c0:	ldr	w8, [sp, #164]
  4087c4:	and	w8, w8, #0x7
  4087c8:	cmp	w0, w8
  4087cc:	b.lt	408804 <portable_detach+0xe24>  // b.tstop
  4087d0:	ldr	w8, [sp, #156]
  4087d4:	ldr	w9, [sp, #164]
  4087d8:	orr	w0, w9, w8, lsl #10
  4087dc:	ldr	w1, [sp, #160]
  4087e0:	ldr	x6, [sp, #328]
  4087e4:	ldr	x2, [sp, #96]
  4087e8:	mov	w3, #0x4ff                 	// #1279
  4087ec:	ldr	x4, [sp, #88]
  4087f0:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  4087f4:	add	x5, x5, #0x9b0
  4087f8:	bl	4041f0 <log_internal_realm@plt>
  4087fc:	str	w0, [sp, #8]
  408800:	b	408818 <portable_detach+0xe38>
  408804:	ldr	w0, [sp, #160]
  408808:	bl	404200 <abs@plt>
  40880c:	mov	w8, wzr
  408810:	subs	w8, w8, w0, uxtb
  408814:	str	w8, [sp, #8]
  408818:	ldr	w8, [sp, #8]
  40881c:	str	w8, [sp, #152]
  408820:	mov	w8, #0x10                  	// #16
  408824:	stur	w8, [x29, #-244]
  408828:	b	408918 <portable_detach+0xf38>
  40882c:	ldr	x0, [sp, #328]
  408830:	bl	404590 <unlink@plt>
  408834:	cmp	w0, #0x0
  408838:	cset	w8, ge  // ge = tcont
  40883c:	tbnz	w8, #0, 4088f8 <portable_detach+0xf18>
  408840:	mov	w8, #0x7                   	// #7
  408844:	str	w8, [sp, #148]
  408848:	bl	404270 <__errno_location@plt>
  40884c:	ldr	w8, [x0]
  408850:	str	w8, [sp, #144]
  408854:	str	wzr, [sp, #140]
  408858:	ldr	w0, [sp, #140]
  40885c:	bl	4041e0 <log_get_max_level_realm@plt>
  408860:	ldr	w8, [sp, #148]
  408864:	and	w8, w8, #0x7
  408868:	cmp	w0, w8
  40886c:	b.lt	4088a4 <portable_detach+0xec4>  // b.tstop
  408870:	ldr	w8, [sp, #140]
  408874:	ldr	w9, [sp, #148]
  408878:	orr	w0, w9, w8, lsl #10
  40887c:	ldr	w1, [sp, #144]
  408880:	ldr	x6, [sp, #328]
  408884:	ldr	x2, [sp, #96]
  408888:	mov	w3, #0x504                 	// #1284
  40888c:	ldr	x4, [sp, #88]
  408890:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  408894:	add	x5, x5, #0x9d7
  408898:	bl	4041f0 <log_internal_realm@plt>
  40889c:	str	w0, [sp, #4]
  4088a0:	b	4088b8 <portable_detach+0xed8>
  4088a4:	ldr	w0, [sp, #144]
  4088a8:	bl	404200 <abs@plt>
  4088ac:	mov	w8, wzr
  4088b0:	subs	w8, w8, w0, uxtb
  4088b4:	str	w8, [sp, #4]
  4088b8:	ldr	w8, [sp, #4]
  4088bc:	str	w8, [sp, #136]
  4088c0:	bl	404270 <__errno_location@plt>
  4088c4:	ldr	w8, [x0]
  4088c8:	cmp	w8, #0x2
  4088cc:	b.eq	4088f4 <portable_detach+0xf14>  // b.none
  4088d0:	ldur	w8, [x29, #-236]
  4088d4:	cmp	w8, #0x0
  4088d8:	cset	w8, lt  // lt = tstop
  4088dc:	tbnz	w8, #0, 4088f4 <portable_detach+0xf14>
  4088e0:	bl	404270 <__errno_location@plt>
  4088e4:	ldr	w8, [x0]
  4088e8:	mov	w9, wzr
  4088ec:	subs	w8, w9, w8
  4088f0:	stur	w8, [x29, #-236]
  4088f4:	b	408914 <portable_detach+0xf34>
  4088f8:	ldur	x0, [x29, #-40]
  4088fc:	ldur	x1, [x29, #-48]
  408900:	ldr	x3, [sp, #328]
  408904:	mov	w2, #0x2                   	// #2
  408908:	mov	x8, xzr
  40890c:	mov	x4, x8
  408910:	bl	4099d0 <portable_changes_add>
  408914:	stur	wzr, [x29, #-244]
  408918:	add	x0, sp, #0x148
  40891c:	bl	405118 <freep>
  408920:	ldur	w8, [x29, #-244]
  408924:	cbz	w8, 408930 <portable_detach+0xf50>
  408928:	b	40892c <portable_detach+0xf4c>
  40892c:	b	408628 <portable_detach+0xc48>
  408930:	b	408628 <portable_detach+0xc48>
  408934:	ldur	x0, [x29, #-192]
  408938:	bl	4045a0 <rmdir@plt>
  40893c:	cmp	w0, #0x0
  408940:	cset	w8, lt  // lt = tstop
  408944:	tbnz	w8, #0, 408964 <portable_detach+0xf84>
  408948:	ldur	x0, [x29, #-40]
  40894c:	ldur	x1, [x29, #-48]
  408950:	ldur	x3, [x29, #-192]
  408954:	mov	w2, #0x2                   	// #2
  408958:	mov	x8, xzr
  40895c:	mov	x4, x8
  408960:	bl	4099d0 <portable_changes_add>
  408964:	ldur	w8, [x29, #-236]
  408968:	stur	w8, [x29, #-4]
  40896c:	mov	w8, #0x1                   	// #1
  408970:	stur	w8, [x29, #-244]
  408974:	b	408a18 <portable_detach+0x1038>
  408978:	mov	w8, #0x7                   	// #7
  40897c:	str	w8, [sp, #132]
  408980:	str	wzr, [sp, #128]
  408984:	str	wzr, [sp, #124]
  408988:	ldr	w0, [sp, #124]
  40898c:	bl	4041e0 <log_get_max_level_realm@plt>
  408990:	ldr	w8, [sp, #132]
  408994:	and	w8, w8, #0x7
  408998:	cmp	w0, w8
  40899c:	b.lt	4089d4 <portable_detach+0xff4>  // b.tstop
  4089a0:	ldr	w8, [sp, #124]
  4089a4:	ldr	w9, [sp, #132]
  4089a8:	orr	w0, w9, w8, lsl #10
  4089ac:	ldr	w1, [sp, #128]
  4089b0:	ldur	x6, [x29, #-24]
  4089b4:	ldr	x2, [sp, #96]
  4089b8:	mov	w3, #0x513                 	// #1299
  4089bc:	ldr	x4, [sp, #88]
  4089c0:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  4089c4:	add	x5, x5, #0x9fb
  4089c8:	bl	4041f0 <log_internal_realm@plt>
  4089cc:	str	w0, [sp]
  4089d0:	b	4089e8 <portable_detach+0x1008>
  4089d4:	ldr	w0, [sp, #128]
  4089d8:	bl	404200 <abs@plt>
  4089dc:	mov	w8, wzr
  4089e0:	subs	w8, w8, w0, uxtb
  4089e4:	str	w8, [sp]
  4089e8:	ldr	w8, [sp]
  4089ec:	str	w8, [sp, #120]
  4089f0:	ldur	x0, [x29, #-56]
  4089f4:	ldur	x3, [x29, #-24]
  4089f8:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  4089fc:	add	x1, x1, #0xa39
  408a00:	adrp	x2, 413000 <manager_connect_bus+0x4e4>
  408a04:	add	x2, x2, #0x9fb
  408a08:	bl	404250 <sd_bus_error_setf@plt>
  408a0c:	stur	w0, [x29, #-4]
  408a10:	mov	w8, #0x1                   	// #1
  408a14:	stur	w8, [x29, #-244]
  408a18:	sub	x0, x29, #0xb8
  408a1c:	bl	408a80 <closedirp>
  408a20:	sub	x0, x29, #0xb0
  408a24:	bl	408a4c <set_free_freep>
  408a28:	sub	x0, x29, #0xa8
  408a2c:	bl	408a4c <set_free_freep>
  408a30:	sub	x0, x29, #0xa0
  408a34:	bl	404330 <lookup_paths_free@plt>
  408a38:	ldur	w0, [x29, #-4]
  408a3c:	add	sp, sp, #0x330
  408a40:	ldr	x28, [sp, #16]
  408a44:	ldp	x29, x30, [sp], #32
  408a48:	ret

0000000000408a4c <set_free_freep>:
  408a4c:	sub	sp, sp, #0x20
  408a50:	stp	x29, x30, [sp, #16]
  408a54:	add	x29, sp, #0x10
  408a58:	str	x0, [sp, #8]
  408a5c:	ldr	x8, [sp, #8]
  408a60:	ldr	x8, [x8]
  408a64:	cbz	x8, 408a74 <set_free_freep+0x28>
  408a68:	ldr	x8, [sp, #8]
  408a6c:	ldr	x0, [x8]
  408a70:	bl	40cb88 <set_free_free>
  408a74:	ldp	x29, x30, [sp, #16]
  408a78:	add	sp, sp, #0x20
  408a7c:	ret

0000000000408a80 <closedirp>:
  408a80:	sub	sp, sp, #0x20
  408a84:	stp	x29, x30, [sp, #16]
  408a88:	add	x29, sp, #0x10
  408a8c:	str	x0, [sp, #8]
  408a90:	ldr	x8, [sp, #8]
  408a94:	ldr	x8, [x8]
  408a98:	cbz	x8, 408aa8 <closedirp+0x28>
  408a9c:	ldr	x8, [sp, #8]
  408aa0:	ldr	x0, [x8]
  408aa4:	bl	4045b0 <closedir@plt>
  408aa8:	ldp	x29, x30, [sp, #16]
  408aac:	add	sp, sp, #0x20
  408ab0:	ret

0000000000408ab4 <attached_path>:
  408ab4:	sub	sp, sp, #0x30
  408ab8:	stp	x29, x30, [sp, #32]
  408abc:	add	x29, sp, #0x20
  408ac0:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  408ac4:	add	x8, x8, #0x4ee
  408ac8:	add	x8, x8, #0x3
  408acc:	stur	x0, [x29, #-8]
  408ad0:	stur	w1, [x29, #-12]
  408ad4:	str	x8, [sp]
  408ad8:	ldur	x8, [x29, #-8]
  408adc:	cmp	x8, #0x0
  408ae0:	cset	w9, ne  // ne = any
  408ae4:	mov	w10, #0x1                   	// #1
  408ae8:	eor	w9, w9, #0x1
  408aec:	eor	w9, w9, w10
  408af0:	eor	w9, w9, w10
  408af4:	and	w9, w9, #0x1
  408af8:	mov	w0, w9
  408afc:	sxtw	x8, w0
  408b00:	cbz	x8, 408b28 <attached_path+0x74>
  408b04:	mov	w8, wzr
  408b08:	mov	w0, w8
  408b0c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  408b10:	add	x1, x1, #0x378
  408b14:	ldr	x2, [sp]
  408b18:	mov	w3, #0x32b                 	// #811
  408b1c:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  408b20:	add	x4, x4, #0x8a1
  408b24:	bl	404150 <log_assert_failed_realm@plt>
  408b28:	ldur	w8, [x29, #-12]
  408b2c:	and	w8, w8, #0x4
  408b30:	cbz	w8, 408b44 <attached_path+0x90>
  408b34:	ldur	x8, [x29, #-8]
  408b38:	ldr	x8, [x8, #32]
  408b3c:	str	x8, [sp, #8]
  408b40:	b	408b50 <attached_path+0x9c>
  408b44:	ldur	x8, [x29, #-8]
  408b48:	ldr	x8, [x8, #24]
  408b4c:	str	x8, [sp, #8]
  408b50:	ldr	x8, [sp, #8]
  408b54:	cmp	x8, #0x0
  408b58:	cset	w9, ne  // ne = any
  408b5c:	mov	w10, #0x1                   	// #1
  408b60:	eor	w9, w9, #0x1
  408b64:	eor	w9, w9, w10
  408b68:	eor	w9, w9, w10
  408b6c:	and	w9, w9, #0x1
  408b70:	mov	w0, w9
  408b74:	sxtw	x8, w0
  408b78:	cbz	x8, 408ba0 <attached_path+0xec>
  408b7c:	mov	w8, wzr
  408b80:	mov	w0, w8
  408b84:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  408b88:	add	x1, x1, #0xf21
  408b8c:	ldr	x2, [sp]
  408b90:	mov	w3, #0x332                 	// #818
  408b94:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  408b98:	add	x4, x4, #0x8a1
  408b9c:	bl	404150 <log_assert_failed_realm@plt>
  408ba0:	ldr	x0, [sp, #8]
  408ba4:	ldp	x29, x30, [sp, #32]
  408ba8:	add	sp, sp, #0x30
  408bac:	ret

0000000000408bb0 <set_get>:
  408bb0:	sub	sp, sp, #0x20
  408bb4:	stp	x29, x30, [sp, #16]
  408bb8:	add	x29, sp, #0x10
  408bbc:	str	x0, [sp, #8]
  408bc0:	str	x1, [sp]
  408bc4:	ldr	x0, [sp, #8]
  408bc8:	ldr	x1, [sp]
  408bcc:	bl	4045c0 <internal_hashmap_get@plt>
  408bd0:	ldp	x29, x30, [sp, #16]
  408bd4:	add	sp, sp, #0x20
  408bd8:	ret

0000000000408bdc <test_chroot_dropin>:
  408bdc:	stp	x29, x30, [sp, #-32]!
  408be0:	stp	x28, x19, [sp, #16]
  408be4:	mov	x29, sp
  408be8:	sub	sp, sp, #0x140
  408bec:	mov	x19, sp
  408bf0:	mov	x8, xzr
  408bf4:	mov	w9, #0xffffffff            	// #-1
  408bf8:	adrp	x10, 413000 <manager_connect_bus+0x4e4>
  408bfc:	add	x10, x10, #0x4ee
  408c00:	add	x10, x10, #0x3
  408c04:	adrp	x11, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  408c08:	add	x11, x11, #0x938
  408c0c:	adrp	x12, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  408c10:	add	x12, x12, #0x8e1
  408c14:	stur	x0, [x29, #-16]
  408c18:	stur	x1, [x29, #-24]
  408c1c:	stur	x2, [x29, #-32]
  408c20:	stur	x3, [x29, #-40]
  408c24:	stur	x4, [x29, #-48]
  408c28:	stur	x8, [x29, #-56]
  408c2c:	stur	x8, [x29, #-64]
  408c30:	stur	x8, [x29, #-72]
  408c34:	stur	w9, [x29, #-76]
  408c38:	str	x10, [x19, #48]
  408c3c:	str	x11, [x19, #40]
  408c40:	str	x12, [x19, #32]
  408c44:	ldur	x8, [x29, #-16]
  408c48:	cmp	x8, #0x0
  408c4c:	cset	w9, ne  // ne = any
  408c50:	mov	w10, #0x1                   	// #1
  408c54:	eor	w9, w9, #0x1
  408c58:	eor	w9, w9, w10
  408c5c:	eor	w9, w9, w10
  408c60:	and	w9, w9, #0x1
  408c64:	mov	w0, w9
  408c68:	sxtw	x8, w0
  408c6c:	cbz	x8, 408c90 <test_chroot_dropin+0xb4>
  408c70:	mov	w8, wzr
  408c74:	mov	w0, w8
  408c78:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  408c7c:	add	x1, x1, #0x8df
  408c80:	ldr	x2, [x19, #48]
  408c84:	mov	w3, #0x436                 	// #1078
  408c88:	ldr	x4, [x19, #32]
  408c8c:	bl	404150 <log_assert_failed_realm@plt>
  408c90:	ldur	x8, [x29, #-24]
  408c94:	cmp	x8, #0x0
  408c98:	cset	w9, ne  // ne = any
  408c9c:	mov	w10, #0x1                   	// #1
  408ca0:	eor	w9, w9, #0x1
  408ca4:	eor	w9, w9, w10
  408ca8:	eor	w9, w9, w10
  408cac:	and	w9, w9, #0x1
  408cb0:	mov	w0, w9
  408cb4:	sxtw	x8, w0
  408cb8:	cbz	x8, 408cdc <test_chroot_dropin+0x100>
  408cbc:	mov	w8, wzr
  408cc0:	mov	w0, w8
  408cc4:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  408cc8:	add	x1, x1, #0xf21
  408ccc:	ldr	x2, [x19, #48]
  408cd0:	mov	w3, #0x437                 	// #1079
  408cd4:	ldr	x4, [x19, #32]
  408cd8:	bl	404150 <log_assert_failed_realm@plt>
  408cdc:	ldur	x8, [x29, #-32]
  408ce0:	cmp	x8, #0x0
  408ce4:	cset	w9, ne  // ne = any
  408ce8:	mov	w10, #0x1                   	// #1
  408cec:	eor	w9, w9, #0x1
  408cf0:	eor	w9, w9, w10
  408cf4:	eor	w9, w9, w10
  408cf8:	and	w9, w9, #0x1
  408cfc:	mov	w0, w9
  408d00:	sxtw	x8, w0
  408d04:	cbz	x8, 408d28 <test_chroot_dropin+0x14c>
  408d08:	mov	w8, wzr
  408d0c:	mov	w0, w8
  408d10:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  408d14:	add	x1, x1, #0x932
  408d18:	ldr	x2, [x19, #48]
  408d1c:	mov	w3, #0x438                 	// #1080
  408d20:	ldr	x4, [x19, #32]
  408d24:	bl	404150 <log_assert_failed_realm@plt>
  408d28:	ldur	x8, [x29, #-32]
  408d2c:	sub	x9, x29, #0x80
  408d30:	stur	x8, [x29, #-128]
  408d34:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  408d38:	add	x8, x8, #0x8f6
  408d3c:	str	x8, [x9, #8]
  408d40:	stur	xzr, [x29, #-152]
  408d44:	str	xzr, [x19, #160]
  408d48:	ldr	x8, [x19, #160]
  408d4c:	mov	w9, #0x0                   	// #0
  408d50:	cmp	x8, #0x2
  408d54:	str	w9, [x19, #28]
  408d58:	b.cs	408d80 <test_chroot_dropin+0x1a4>  // b.hs, b.nlast
  408d5c:	ldr	x8, [x19, #160]
  408d60:	mov	x9, #0x8                   	// #8
  408d64:	mul	x8, x9, x8
  408d68:	sub	x9, x29, #0x80
  408d6c:	add	x8, x9, x8
  408d70:	ldr	x8, [x8]
  408d74:	cmp	x8, #0x0
  408d78:	cset	w10, ne  // ne = any
  408d7c:	str	w10, [x19, #28]
  408d80:	ldr	w8, [x19, #28]
  408d84:	tbnz	w8, #0, 408d8c <test_chroot_dropin+0x1b0>
  408d88:	b	408dc4 <test_chroot_dropin+0x1e8>
  408d8c:	ldr	x8, [x19, #160]
  408d90:	mov	x9, #0x8                   	// #8
  408d94:	mul	x8, x9, x8
  408d98:	sub	x9, x29, #0x80
  408d9c:	add	x8, x9, x8
  408da0:	ldr	x0, [x8]
  408da4:	bl	4043d0 <strlen@plt>
  408da8:	ldur	x8, [x29, #-152]
  408dac:	add	x8, x8, x0
  408db0:	stur	x8, [x29, #-152]
  408db4:	ldr	x8, [x19, #160]
  408db8:	add	x8, x8, #0x1
  408dbc:	str	x8, [x19, #160]
  408dc0:	b	408d48 <test_chroot_dropin+0x16c>
  408dc4:	ldur	x8, [x29, #-152]
  408dc8:	add	x8, x8, #0x1
  408dcc:	str	x8, [x19, #152]
  408dd0:	ldr	x1, [x19, #152]
  408dd4:	mov	x0, #0x1                   	// #1
  408dd8:	bl	40a720 <size_multiply_overflow>
  408ddc:	mov	w8, #0x1                   	// #1
  408de0:	eor	w9, w0, #0x1
  408de4:	eor	w9, w9, w8
  408de8:	eor	w9, w9, w8
  408dec:	eor	w8, w9, w8
  408df0:	and	w8, w8, #0x1
  408df4:	mov	w1, w8
  408df8:	sxtw	x10, w1
  408dfc:	cbz	x10, 408e20 <test_chroot_dropin+0x244>
  408e00:	mov	w8, wzr
  408e04:	mov	w0, w8
  408e08:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  408e0c:	add	x1, x1, #0x2fd
  408e10:	ldr	x2, [x19, #48]
  408e14:	mov	w3, #0x43c                 	// #1084
  408e18:	ldr	x4, [x19, #32]
  408e1c:	bl	404150 <log_assert_failed_realm@plt>
  408e20:	ldr	x8, [x19, #152]
  408e24:	mov	x9, #0x1                   	// #1
  408e28:	mul	x8, x9, x8
  408e2c:	cmp	x8, #0x400, lsl #12
  408e30:	cset	w10, ls  // ls = plast
  408e34:	mov	w11, #0x1                   	// #1
  408e38:	eor	w10, w10, #0x1
  408e3c:	eor	w10, w10, w11
  408e40:	eor	w10, w10, w11
  408e44:	and	w10, w10, #0x1
  408e48:	mov	w0, w10
  408e4c:	sxtw	x8, w0
  408e50:	cbz	x8, 408e74 <test_chroot_dropin+0x298>
  408e54:	mov	w8, wzr
  408e58:	mov	w0, w8
  408e5c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  408e60:	add	x1, x1, #0x328
  408e64:	ldr	x2, [x19, #48]
  408e68:	mov	w3, #0x43c                 	// #1084
  408e6c:	ldr	x4, [x19, #32]
  408e70:	bl	404150 <log_assert_failed_realm@plt>
  408e74:	ldr	x8, [x19, #152]
  408e78:	mov	x9, #0x1                   	// #1
  408e7c:	mul	x8, x9, x8
  408e80:	mul	x8, x8, x9
  408e84:	add	x8, x8, #0xf
  408e88:	and	x8, x8, #0xfffffffffffffff0
  408e8c:	mov	x9, sp
  408e90:	subs	x8, x9, x8
  408e94:	mov	sp, x8
  408e98:	str	x8, [x19, #144]
  408e9c:	ldr	x8, [x19, #144]
  408ea0:	stur	x8, [x29, #-136]
  408ea4:	stur	x8, [x29, #-144]
  408ea8:	str	xzr, [x19, #160]
  408eac:	ldr	x8, [x19, #160]
  408eb0:	mov	w9, #0x0                   	// #0
  408eb4:	cmp	x8, #0x2
  408eb8:	str	w9, [x19, #24]
  408ebc:	b.cs	408ee4 <test_chroot_dropin+0x308>  // b.hs, b.nlast
  408ec0:	ldr	x8, [x19, #160]
  408ec4:	mov	x9, #0x8                   	// #8
  408ec8:	mul	x8, x9, x8
  408ecc:	sub	x9, x29, #0x80
  408ed0:	add	x8, x9, x8
  408ed4:	ldr	x8, [x8]
  408ed8:	cmp	x8, #0x0
  408edc:	cset	w10, ne  // ne = any
  408ee0:	str	w10, [x19, #24]
  408ee4:	ldr	w8, [x19, #24]
  408ee8:	tbnz	w8, #0, 408ef0 <test_chroot_dropin+0x314>
  408eec:	b	408f24 <test_chroot_dropin+0x348>
  408ef0:	ldur	x0, [x29, #-144]
  408ef4:	ldr	x8, [x19, #160]
  408ef8:	mov	x9, #0x8                   	// #8
  408efc:	mul	x8, x9, x8
  408f00:	sub	x9, x29, #0x80
  408f04:	add	x8, x9, x8
  408f08:	ldr	x1, [x8]
  408f0c:	bl	4043e0 <stpcpy@plt>
  408f10:	stur	x0, [x29, #-144]
  408f14:	ldr	x8, [x19, #160]
  408f18:	add	x8, x8, #0x1
  408f1c:	str	x8, [x19, #160]
  408f20:	b	408eac <test_chroot_dropin+0x2d0>
  408f24:	ldur	x8, [x29, #-144]
  408f28:	mov	w9, #0x0                   	// #0
  408f2c:	strb	w9, [x8]
  408f30:	ldur	x8, [x29, #-136]
  408f34:	str	x8, [x19, #136]
  408f38:	ldr	x8, [x19, #136]
  408f3c:	stur	x8, [x29, #-88]
  408f40:	ldur	x0, [x29, #-16]
  408f44:	bl	404570 <dirfd@plt>
  408f48:	ldur	x1, [x29, #-88]
  408f4c:	mov	w2, #0x80000               	// #524288
  408f50:	bl	4045d0 <openat64@plt>
  408f54:	stur	w0, [x29, #-76]
  408f58:	ldur	w9, [x29, #-76]
  408f5c:	cmp	w9, #0x0
  408f60:	cset	w9, ge  // ge = tcont
  408f64:	tbnz	w9, #0, 409020 <test_chroot_dropin+0x444>
  408f68:	bl	404270 <__errno_location@plt>
  408f6c:	ldr	w8, [x0]
  408f70:	cmp	w8, #0x2
  408f74:	b.ne	408f88 <test_chroot_dropin+0x3ac>  // b.any
  408f78:	stur	wzr, [x29, #-4]
  408f7c:	mov	w8, #0x1                   	// #1
  408f80:	str	w8, [x19, #132]
  408f84:	b	409294 <test_chroot_dropin+0x6b8>
  408f88:	mov	w8, #0x7                   	// #7
  408f8c:	str	w8, [x19, #128]
  408f90:	bl	404270 <__errno_location@plt>
  408f94:	ldr	w8, [x0]
  408f98:	str	w8, [x19, #124]
  408f9c:	str	wzr, [x19, #120]
  408fa0:	ldr	w0, [x19, #120]
  408fa4:	bl	4041e0 <log_get_max_level_realm@plt>
  408fa8:	ldr	w8, [x19, #128]
  408fac:	and	w8, w8, #0x7
  408fb0:	cmp	w0, w8
  408fb4:	b.lt	408ff0 <test_chroot_dropin+0x414>  // b.tstop
  408fb8:	ldr	w8, [x19, #120]
  408fbc:	ldr	w9, [x19, #128]
  408fc0:	orr	w0, w9, w8, lsl #10
  408fc4:	ldr	w1, [x19, #124]
  408fc8:	ldur	x6, [x29, #-24]
  408fcc:	ldur	x7, [x29, #-88]
  408fd0:	ldr	x2, [x19, #48]
  408fd4:	mov	w3, #0x442                 	// #1090
  408fd8:	ldr	x4, [x19, #40]
  408fdc:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  408fe0:	add	x5, x5, #0x94b
  408fe4:	bl	4041f0 <log_internal_realm@plt>
  408fe8:	str	w0, [x19, #20]
  408fec:	b	409004 <test_chroot_dropin+0x428>
  408ff0:	ldr	w0, [x19, #124]
  408ff4:	bl	404200 <abs@plt>
  408ff8:	mov	w8, wzr
  408ffc:	subs	w8, w8, w0, uxtb
  409000:	str	w8, [x19, #20]
  409004:	ldr	w8, [x19, #20]
  409008:	str	w8, [x19, #116]
  40900c:	ldr	w8, [x19, #116]
  409010:	stur	w8, [x29, #-4]
  409014:	mov	w8, #0x1                   	// #1
  409018:	str	w8, [x19, #132]
  40901c:	b	409294 <test_chroot_dropin+0x6b8>
  409020:	ldur	w0, [x29, #-76]
  409024:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409028:	add	x1, x1, #0x964
  40902c:	sub	x2, x29, #0x48
  409030:	bl	4045e0 <fdopen_unlocked@plt>
  409034:	stur	w0, [x29, #-108]
  409038:	ldur	w8, [x29, #-108]
  40903c:	cmp	w8, #0x0
  409040:	cset	w8, ge  // ge = tcont
  409044:	tbnz	w8, #0, 4090d4 <test_chroot_dropin+0x4f8>
  409048:	mov	w8, #0x7                   	// #7
  40904c:	str	w8, [x19, #112]
  409050:	ldur	w8, [x29, #-108]
  409054:	str	w8, [x19, #108]
  409058:	str	wzr, [x19, #104]
  40905c:	ldr	w0, [x19, #104]
  409060:	bl	4041e0 <log_get_max_level_realm@plt>
  409064:	ldr	w8, [x19, #112]
  409068:	and	w8, w8, #0x7
  40906c:	cmp	w0, w8
  409070:	b.lt	4090a4 <test_chroot_dropin+0x4c8>  // b.tstop
  409074:	ldr	w8, [x19, #104]
  409078:	ldr	w9, [x19, #112]
  40907c:	orr	w0, w9, w8, lsl #10
  409080:	ldr	w1, [x19, #108]
  409084:	ldr	x2, [x19, #48]
  409088:	mov	w3, #0x447                 	// #1095
  40908c:	ldr	x4, [x19, #40]
  409090:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409094:	add	x5, x5, #0x966
  409098:	bl	4041f0 <log_internal_realm@plt>
  40909c:	str	w0, [x19, #16]
  4090a0:	b	4090b8 <test_chroot_dropin+0x4dc>
  4090a4:	ldr	w0, [x19, #108]
  4090a8:	bl	404200 <abs@plt>
  4090ac:	mov	w8, wzr
  4090b0:	subs	w8, w8, w0, uxtb
  4090b4:	str	w8, [x19, #16]
  4090b8:	ldr	w8, [x19, #16]
  4090bc:	str	w8, [x19, #100]
  4090c0:	ldr	w8, [x19, #100]
  4090c4:	stur	w8, [x29, #-4]
  4090c8:	mov	w8, #0x1                   	// #1
  4090cc:	str	w8, [x19, #132]
  4090d0:	b	409294 <test_chroot_dropin+0x6b8>
  4090d4:	ldur	w8, [x29, #-76]
  4090d8:	str	w8, [x19, #96]
  4090dc:	mov	w8, #0xffffffff            	// #-1
  4090e0:	stur	w8, [x29, #-76]
  4090e4:	ldr	w8, [x19, #96]
  4090e8:	str	w8, [x19, #92]
  4090ec:	ldur	x0, [x29, #-72]
  4090f0:	mov	x1, #0x100000              	// #1048576
  4090f4:	sub	x2, x29, #0x38
  4090f8:	bl	40cbe4 <read_line>
  4090fc:	stur	w0, [x29, #-108]
  409100:	ldur	w8, [x29, #-108]
  409104:	cmp	w8, #0x0
  409108:	cset	w8, ge  // ge = tcont
  40910c:	tbnz	w8, #0, 4091a4 <test_chroot_dropin+0x5c8>
  409110:	mov	w8, #0x7                   	// #7
  409114:	str	w8, [x19, #88]
  409118:	ldur	w8, [x29, #-108]
  40911c:	str	w8, [x19, #84]
  409120:	str	wzr, [x19, #80]
  409124:	ldr	w0, [x19, #80]
  409128:	bl	4041e0 <log_get_max_level_realm@plt>
  40912c:	ldr	w8, [x19, #88]
  409130:	and	w8, w8, #0x7
  409134:	cmp	w0, w8
  409138:	b.lt	409174 <test_chroot_dropin+0x598>  // b.tstop
  40913c:	ldr	w8, [x19, #80]
  409140:	ldr	w9, [x19, #88]
  409144:	orr	w0, w9, w8, lsl #10
  409148:	ldr	w1, [x19, #84]
  40914c:	ldur	x6, [x29, #-24]
  409150:	ldur	x7, [x29, #-88]
  409154:	ldr	x2, [x19, #48]
  409158:	mov	w3, #0x44c                 	// #1100
  40915c:	ldr	x4, [x19, #40]
  409160:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409164:	add	x5, x5, #0x988
  409168:	bl	4041f0 <log_internal_realm@plt>
  40916c:	str	w0, [x19, #12]
  409170:	b	409188 <test_chroot_dropin+0x5ac>
  409174:	ldr	w0, [x19, #84]
  409178:	bl	404200 <abs@plt>
  40917c:	mov	w8, wzr
  409180:	subs	w8, w8, w0, uxtb
  409184:	str	w8, [x19, #12]
  409188:	ldr	w8, [x19, #12]
  40918c:	str	w8, [x19, #76]
  409190:	ldr	w8, [x19, #76]
  409194:	stur	w8, [x29, #-4]
  409198:	mov	w8, #0x1                   	// #1
  40919c:	str	w8, [x19, #132]
  4091a0:	b	409294 <test_chroot_dropin+0x6b8>
  4091a4:	ldur	x0, [x29, #-56]
  4091a8:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4091ac:	add	x1, x1, #0x5b1
  4091b0:	bl	40bcc8 <startswith>
  4091b4:	stur	x0, [x29, #-96]
  4091b8:	ldur	x8, [x29, #-96]
  4091bc:	cbnz	x8, 4091d0 <test_chroot_dropin+0x5f4>
  4091c0:	stur	wzr, [x29, #-4]
  4091c4:	mov	w8, #0x1                   	// #1
  4091c8:	str	w8, [x19, #132]
  4091cc:	b	409294 <test_chroot_dropin+0x6b8>
  4091d0:	ldur	x0, [x29, #-96]
  4091d4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4091d8:	add	x1, x1, #0x9a6
  4091dc:	bl	4045f0 <endswith@plt>
  4091e0:	stur	x0, [x29, #-104]
  4091e4:	ldur	x8, [x29, #-104]
  4091e8:	cbnz	x8, 4091fc <test_chroot_dropin+0x620>
  4091ec:	stur	wzr, [x29, #-4]
  4091f0:	mov	w8, #0x1                   	// #1
  4091f4:	str	w8, [x19, #132]
  4091f8:	b	409294 <test_chroot_dropin+0x6b8>
  4091fc:	ldur	x0, [x29, #-96]
  409200:	ldur	x8, [x29, #-104]
  409204:	ldur	x9, [x29, #-96]
  409208:	subs	x1, x8, x9
  40920c:	bl	404600 <strndup@plt>
  409210:	stur	x0, [x29, #-64]
  409214:	ldur	x8, [x29, #-64]
  409218:	cbnz	x8, 409230 <test_chroot_dropin+0x654>
  40921c:	mov	w8, #0xfffffff4            	// #-12
  409220:	stur	w8, [x29, #-4]
  409224:	mov	w8, #0x1                   	// #1
  409228:	str	w8, [x19, #132]
  40922c:	b	409294 <test_chroot_dropin+0x6b8>
  409230:	ldur	x8, [x29, #-40]
  409234:	cbnz	x8, 409244 <test_chroot_dropin+0x668>
  409238:	mov	w8, #0x1                   	// #1
  40923c:	stur	w8, [x29, #-108]
  409240:	b	409258 <test_chroot_dropin+0x67c>
  409244:	ldur	x0, [x29, #-64]
  409248:	ldur	x1, [x29, #-40]
  40924c:	bl	40cc20 <marker_matches_image>
  409250:	and	w8, w0, #0x1
  409254:	stur	w8, [x29, #-108]
  409258:	ldur	x8, [x29, #-48]
  40925c:	cbz	x8, 409284 <test_chroot_dropin+0x6a8>
  409260:	ldur	x8, [x29, #-64]
  409264:	str	x8, [x19, #64]
  409268:	mov	x8, xzr
  40926c:	stur	x8, [x29, #-64]
  409270:	ldr	x8, [x19, #64]
  409274:	str	x8, [x19, #56]
  409278:	ldr	x8, [x19, #56]
  40927c:	ldur	x9, [x29, #-48]
  409280:	str	x8, [x9]
  409284:	ldur	w8, [x29, #-108]
  409288:	stur	w8, [x29, #-4]
  40928c:	mov	w8, #0x1                   	// #1
  409290:	str	w8, [x19, #132]
  409294:	sub	x0, x29, #0x4c
  409298:	bl	40b374 <closep>
  40929c:	sub	x0, x29, #0x48
  4092a0:	bl	40cbbc <fclosep>
  4092a4:	sub	x0, x29, #0x40
  4092a8:	bl	405118 <freep>
  4092ac:	sub	x0, x29, #0x38
  4092b0:	bl	405118 <freep>
  4092b4:	ldur	w0, [x29, #-4]
  4092b8:	mov	sp, x29
  4092bc:	ldp	x28, x19, [sp, #16]
  4092c0:	ldp	x29, x30, [sp], #32
  4092c4:	ret

00000000004092c8 <set_isempty>:
  4092c8:	sub	sp, sp, #0x20
  4092cc:	stp	x29, x30, [sp, #16]
  4092d0:	add	x29, sp, #0x10
  4092d4:	str	x0, [sp, #8]
  4092d8:	ldr	x0, [sp, #8]
  4092dc:	bl	40ce00 <set_size>
  4092e0:	cmp	w0, #0x0
  4092e4:	cset	w8, eq  // eq = none
  4092e8:	and	w0, w8, #0x1
  4092ec:	ldp	x29, x30, [sp, #16]
  4092f0:	add	sp, sp, #0x20
  4092f4:	ret

00000000004092f8 <portable_changes_add_with_prefix>:
  4092f8:	stp	x29, x30, [sp, #-32]!
  4092fc:	str	x28, [sp, #16]
  409300:	mov	x29, sp
  409304:	sub	sp, sp, #0x100
  409308:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  40930c:	add	x8, x8, #0x4ee
  409310:	add	x8, x8, #0x3
  409314:	adrp	x9, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409318:	add	x9, x9, #0x9f9
  40931c:	stur	x0, [x29, #-16]
  409320:	stur	x1, [x29, #-24]
  409324:	stur	w2, [x29, #-28]
  409328:	stur	x3, [x29, #-40]
  40932c:	stur	x4, [x29, #-48]
  409330:	stur	x5, [x29, #-56]
  409334:	stur	x8, [x29, #-208]
  409338:	stur	x9, [x29, #-216]
  40933c:	ldur	x8, [x29, #-48]
  409340:	cmp	x8, #0x0
  409344:	cset	w9, ne  // ne = any
  409348:	mov	w10, #0x1                   	// #1
  40934c:	eor	w9, w9, #0x1
  409350:	eor	w9, w9, w10
  409354:	eor	w9, w9, w10
  409358:	and	w9, w9, #0x1
  40935c:	mov	w0, w9
  409360:	sxtw	x8, w0
  409364:	cbz	x8, 409388 <portable_changes_add_with_prefix+0x90>
  409368:	mov	w8, wzr
  40936c:	mov	w0, w8
  409370:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  409374:	add	x1, x1, #0xb39
  409378:	ldur	x2, [x29, #-208]
  40937c:	mov	w3, #0x28a                 	// #650
  409380:	ldur	x4, [x29, #-216]
  409384:	bl	404150 <log_assert_failed_realm@plt>
  409388:	ldur	x8, [x29, #-16]
  40938c:	cmp	x8, #0x0
  409390:	cset	w9, ne  // ne = any
  409394:	mov	w10, #0x1                   	// #1
  409398:	eor	w9, w9, #0x1
  40939c:	and	w9, w9, #0x1
  4093a0:	ldur	x8, [x29, #-24]
  4093a4:	cmp	x8, #0x0
  4093a8:	cset	w11, ne  // ne = any
  4093ac:	eor	w11, w11, w10
  4093b0:	and	w11, w11, #0x1
  4093b4:	cmp	w9, w11
  4093b8:	cset	w9, eq  // eq = none
  4093bc:	eor	w9, w9, w10
  4093c0:	eor	w9, w9, w10
  4093c4:	eor	w9, w9, w10
  4093c8:	and	w9, w9, #0x1
  4093cc:	mov	w0, w9
  4093d0:	sxtw	x8, w0
  4093d4:	cbz	x8, 4093f8 <portable_changes_add_with_prefix+0x100>
  4093d8:	mov	w8, wzr
  4093dc:	mov	w0, w8
  4093e0:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4093e4:	add	x1, x1, #0xa79
  4093e8:	ldur	x2, [x29, #-208]
  4093ec:	mov	w3, #0x28b                 	// #651
  4093f0:	ldur	x4, [x29, #-216]
  4093f4:	bl	404150 <log_assert_failed_realm@plt>
  4093f8:	ldur	x8, [x29, #-16]
  4093fc:	cbnz	x8, 409408 <portable_changes_add_with_prefix+0x110>
  409400:	stur	wzr, [x29, #-4]
  409404:	b	40986c <portable_changes_add_with_prefix+0x574>
  409408:	ldur	x8, [x29, #-40]
  40940c:	cbz	x8, 409850 <portable_changes_add_with_prefix+0x558>
  409410:	ldur	x8, [x29, #-48]
  409414:	stur	x8, [x29, #-64]
  409418:	ldur	x8, [x29, #-40]
  40941c:	stur	x8, [x29, #-72]
  409420:	ldur	x8, [x29, #-64]
  409424:	ldrb	w9, [x8]
  409428:	mov	w10, #0x0                   	// #0
  40942c:	cmp	w9, #0x2f
  409430:	stur	w10, [x29, #-220]
  409434:	b.ne	40944c <portable_changes_add_with_prefix+0x154>  // b.any
  409438:	ldur	x8, [x29, #-64]
  40943c:	ldrb	w9, [x8, #1]
  409440:	cmp	w9, #0x2f
  409444:	cset	w9, eq  // eq = none
  409448:	stur	w9, [x29, #-220]
  40944c:	ldur	w8, [x29, #-220]
  409450:	tbnz	w8, #0, 409458 <portable_changes_add_with_prefix+0x160>
  409454:	b	409468 <portable_changes_add_with_prefix+0x170>
  409458:	ldur	x8, [x29, #-64]
  40945c:	add	x8, x8, #0x1
  409460:	stur	x8, [x29, #-64]
  409464:	b	409420 <portable_changes_add_with_prefix+0x128>
  409468:	ldur	x0, [x29, #-72]
  40946c:	bl	40b700 <isempty>
  409470:	tbnz	w0, #0, 409478 <portable_changes_add_with_prefix+0x180>
  409474:	b	409484 <portable_changes_add_with_prefix+0x18c>
  409478:	ldur	x8, [x29, #-64]
  40947c:	stur	x8, [x29, #-80]
  409480:	b	40961c <portable_changes_add_with_prefix+0x324>
  409484:	ldur	x0, [x29, #-72]
  409488:	bl	4043d0 <strlen@plt>
  40948c:	add	x8, x0, #0x1
  409490:	ldur	x0, [x29, #-64]
  409494:	stur	x8, [x29, #-232]
  409498:	bl	4043d0 <strlen@plt>
  40949c:	ldur	x8, [x29, #-232]
  4094a0:	add	x9, x8, x0
  4094a4:	add	x9, x9, #0x1
  4094a8:	stur	x9, [x29, #-104]
  4094ac:	ldur	x9, [x29, #-104]
  4094b0:	stur	x9, [x29, #-112]
  4094b4:	ldur	x1, [x29, #-112]
  4094b8:	mov	x0, #0x1                   	// #1
  4094bc:	bl	40a720 <size_multiply_overflow>
  4094c0:	mov	w8, #0x1                   	// #1
  4094c4:	eor	w9, w0, #0x1
  4094c8:	eor	w9, w9, w8
  4094cc:	eor	w9, w9, w8
  4094d0:	eor	w8, w9, w8
  4094d4:	and	w8, w8, #0x1
  4094d8:	mov	w1, w8
  4094dc:	sxtw	x10, w1
  4094e0:	cbz	x10, 409504 <portable_changes_add_with_prefix+0x20c>
  4094e4:	mov	w8, wzr
  4094e8:	mov	w0, w8
  4094ec:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4094f0:	add	x1, x1, #0x2fd
  4094f4:	ldur	x2, [x29, #-208]
  4094f8:	mov	w3, #0x291                 	// #657
  4094fc:	ldur	x4, [x29, #-216]
  409500:	bl	404150 <log_assert_failed_realm@plt>
  409504:	ldur	x8, [x29, #-112]
  409508:	mov	x9, #0x1                   	// #1
  40950c:	mul	x8, x9, x8
  409510:	cmp	x8, #0x400, lsl #12
  409514:	cset	w10, ls  // ls = plast
  409518:	mov	w11, #0x1                   	// #1
  40951c:	eor	w10, w10, #0x1
  409520:	eor	w10, w10, w11
  409524:	eor	w10, w10, w11
  409528:	and	w10, w10, #0x1
  40952c:	mov	w0, w10
  409530:	sxtw	x8, w0
  409534:	cbz	x8, 409558 <portable_changes_add_with_prefix+0x260>
  409538:	mov	w8, wzr
  40953c:	mov	w0, w8
  409540:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409544:	add	x1, x1, #0x328
  409548:	ldur	x2, [x29, #-208]
  40954c:	mov	w3, #0x291                 	// #657
  409550:	ldur	x4, [x29, #-216]
  409554:	bl	404150 <log_assert_failed_realm@plt>
  409558:	ldur	x8, [x29, #-112]
  40955c:	mov	x9, #0x1                   	// #1
  409560:	mul	x8, x9, x8
  409564:	mul	x8, x8, x9
  409568:	add	x8, x8, #0xf
  40956c:	and	x8, x8, #0xfffffffffffffff0
  409570:	mov	x9, sp
  409574:	subs	x8, x9, x8
  409578:	mov	sp, x8
  40957c:	stur	x8, [x29, #-120]
  409580:	ldur	x8, [x29, #-120]
  409584:	stur	x8, [x29, #-96]
  409588:	ldur	x0, [x29, #-96]
  40958c:	ldur	x1, [x29, #-72]
  409590:	bl	4043e0 <stpcpy@plt>
  409594:	stur	x0, [x29, #-88]
  409598:	ldur	x8, [x29, #-88]
  40959c:	ldur	x9, [x29, #-96]
  4095a0:	mov	w10, #0x0                   	// #0
  4095a4:	cmp	x8, x9
  4095a8:	stur	w10, [x29, #-236]
  4095ac:	b.ls	4095c4 <portable_changes_add_with_prefix+0x2cc>  // b.plast
  4095b0:	ldur	x8, [x29, #-88]
  4095b4:	ldurb	w9, [x8, #-1]
  4095b8:	cmp	w9, #0x2f
  4095bc:	cset	w9, eq  // eq = none
  4095c0:	stur	w9, [x29, #-236]
  4095c4:	ldur	w8, [x29, #-236]
  4095c8:	tbnz	w8, #0, 4095d0 <portable_changes_add_with_prefix+0x2d8>
  4095cc:	b	4095e4 <portable_changes_add_with_prefix+0x2ec>
  4095d0:	ldur	x8, [x29, #-88]
  4095d4:	mov	x9, #0xffffffffffffffff    	// #-1
  4095d8:	add	x8, x8, x9
  4095dc:	stur	x8, [x29, #-88]
  4095e0:	b	409598 <portable_changes_add_with_prefix+0x2a0>
  4095e4:	ldur	x8, [x29, #-64]
  4095e8:	ldrb	w9, [x8]
  4095ec:	cmp	w9, #0x2f
  4095f0:	b.eq	409608 <portable_changes_add_with_prefix+0x310>  // b.none
  4095f4:	ldur	x8, [x29, #-88]
  4095f8:	add	x9, x8, #0x1
  4095fc:	stur	x9, [x29, #-88]
  409600:	mov	w10, #0x2f                  	// #47
  409604:	strb	w10, [x8]
  409608:	ldur	x0, [x29, #-88]
  40960c:	ldur	x1, [x29, #-64]
  409610:	bl	404430 <strcpy@plt>
  409614:	ldur	x8, [x29, #-96]
  409618:	stur	x8, [x29, #-80]
  40961c:	ldur	x8, [x29, #-80]
  409620:	stur	x8, [x29, #-128]
  409624:	ldur	x8, [x29, #-128]
  409628:	stur	x8, [x29, #-48]
  40962c:	ldur	x8, [x29, #-56]
  409630:	cbz	x8, 409850 <portable_changes_add_with_prefix+0x558>
  409634:	ldur	x8, [x29, #-56]
  409638:	stur	x8, [x29, #-136]
  40963c:	ldur	x8, [x29, #-40]
  409640:	stur	x8, [x29, #-144]
  409644:	ldur	x8, [x29, #-136]
  409648:	ldrb	w9, [x8]
  40964c:	mov	w10, #0x0                   	// #0
  409650:	cmp	w9, #0x2f
  409654:	stur	w10, [x29, #-240]
  409658:	b.ne	409670 <portable_changes_add_with_prefix+0x378>  // b.any
  40965c:	ldur	x8, [x29, #-136]
  409660:	ldrb	w9, [x8, #1]
  409664:	cmp	w9, #0x2f
  409668:	cset	w9, eq  // eq = none
  40966c:	stur	w9, [x29, #-240]
  409670:	ldur	w8, [x29, #-240]
  409674:	tbnz	w8, #0, 40967c <portable_changes_add_with_prefix+0x384>
  409678:	b	40968c <portable_changes_add_with_prefix+0x394>
  40967c:	ldur	x8, [x29, #-136]
  409680:	add	x8, x8, #0x1
  409684:	stur	x8, [x29, #-136]
  409688:	b	409644 <portable_changes_add_with_prefix+0x34c>
  40968c:	ldur	x0, [x29, #-144]
  409690:	bl	40b700 <isempty>
  409694:	tbnz	w0, #0, 40969c <portable_changes_add_with_prefix+0x3a4>
  409698:	b	4096a8 <portable_changes_add_with_prefix+0x3b0>
  40969c:	ldur	x8, [x29, #-136]
  4096a0:	stur	x8, [x29, #-152]
  4096a4:	b	409840 <portable_changes_add_with_prefix+0x548>
  4096a8:	ldur	x0, [x29, #-144]
  4096ac:	bl	4043d0 <strlen@plt>
  4096b0:	add	x8, x0, #0x1
  4096b4:	ldur	x0, [x29, #-136]
  4096b8:	stur	x8, [x29, #-248]
  4096bc:	bl	4043d0 <strlen@plt>
  4096c0:	ldur	x8, [x29, #-248]
  4096c4:	add	x9, x8, x0
  4096c8:	add	x9, x9, #0x1
  4096cc:	stur	x9, [x29, #-176]
  4096d0:	ldur	x9, [x29, #-176]
  4096d4:	stur	x9, [x29, #-184]
  4096d8:	ldur	x1, [x29, #-184]
  4096dc:	mov	x0, #0x1                   	// #1
  4096e0:	bl	40a720 <size_multiply_overflow>
  4096e4:	mov	w8, #0x1                   	// #1
  4096e8:	eor	w9, w0, #0x1
  4096ec:	eor	w9, w9, w8
  4096f0:	eor	w9, w9, w8
  4096f4:	eor	w8, w9, w8
  4096f8:	and	w8, w8, #0x1
  4096fc:	mov	w1, w8
  409700:	sxtw	x10, w1
  409704:	cbz	x10, 409728 <portable_changes_add_with_prefix+0x430>
  409708:	mov	w8, wzr
  40970c:	mov	w0, w8
  409710:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409714:	add	x1, x1, #0x2fd
  409718:	ldur	x2, [x29, #-208]
  40971c:	mov	w3, #0x294                 	// #660
  409720:	ldur	x4, [x29, #-216]
  409724:	bl	404150 <log_assert_failed_realm@plt>
  409728:	ldur	x8, [x29, #-184]
  40972c:	mov	x9, #0x1                   	// #1
  409730:	mul	x8, x9, x8
  409734:	cmp	x8, #0x400, lsl #12
  409738:	cset	w10, ls  // ls = plast
  40973c:	mov	w11, #0x1                   	// #1
  409740:	eor	w10, w10, #0x1
  409744:	eor	w10, w10, w11
  409748:	eor	w10, w10, w11
  40974c:	and	w10, w10, #0x1
  409750:	mov	w0, w10
  409754:	sxtw	x8, w0
  409758:	cbz	x8, 40977c <portable_changes_add_with_prefix+0x484>
  40975c:	mov	w8, wzr
  409760:	mov	w0, w8
  409764:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409768:	add	x1, x1, #0x328
  40976c:	ldur	x2, [x29, #-208]
  409770:	mov	w3, #0x294                 	// #660
  409774:	ldur	x4, [x29, #-216]
  409778:	bl	404150 <log_assert_failed_realm@plt>
  40977c:	ldur	x8, [x29, #-184]
  409780:	mov	x9, #0x1                   	// #1
  409784:	mul	x8, x9, x8
  409788:	mul	x8, x8, x9
  40978c:	add	x8, x8, #0xf
  409790:	and	x8, x8, #0xfffffffffffffff0
  409794:	mov	x9, sp
  409798:	subs	x8, x9, x8
  40979c:	mov	sp, x8
  4097a0:	stur	x8, [x29, #-192]
  4097a4:	ldur	x8, [x29, #-192]
  4097a8:	stur	x8, [x29, #-168]
  4097ac:	ldur	x0, [x29, #-168]
  4097b0:	ldur	x1, [x29, #-144]
  4097b4:	bl	4043e0 <stpcpy@plt>
  4097b8:	stur	x0, [x29, #-160]
  4097bc:	ldur	x8, [x29, #-160]
  4097c0:	ldur	x9, [x29, #-168]
  4097c4:	mov	w10, #0x0                   	// #0
  4097c8:	cmp	x8, x9
  4097cc:	stur	w10, [x29, #-252]
  4097d0:	b.ls	4097e8 <portable_changes_add_with_prefix+0x4f0>  // b.plast
  4097d4:	ldur	x8, [x29, #-160]
  4097d8:	ldurb	w9, [x8, #-1]
  4097dc:	cmp	w9, #0x2f
  4097e0:	cset	w9, eq  // eq = none
  4097e4:	stur	w9, [x29, #-252]
  4097e8:	ldur	w8, [x29, #-252]
  4097ec:	tbnz	w8, #0, 4097f4 <portable_changes_add_with_prefix+0x4fc>
  4097f0:	b	409808 <portable_changes_add_with_prefix+0x510>
  4097f4:	ldur	x8, [x29, #-160]
  4097f8:	mov	x9, #0xffffffffffffffff    	// #-1
  4097fc:	add	x8, x8, x9
  409800:	stur	x8, [x29, #-160]
  409804:	b	4097bc <portable_changes_add_with_prefix+0x4c4>
  409808:	ldur	x8, [x29, #-136]
  40980c:	ldrb	w9, [x8]
  409810:	cmp	w9, #0x2f
  409814:	b.eq	40982c <portable_changes_add_with_prefix+0x534>  // b.none
  409818:	ldur	x8, [x29, #-160]
  40981c:	add	x9, x8, #0x1
  409820:	stur	x9, [x29, #-160]
  409824:	mov	w10, #0x2f                  	// #47
  409828:	strb	w10, [x8]
  40982c:	ldur	x0, [x29, #-160]
  409830:	ldur	x1, [x29, #-136]
  409834:	bl	404430 <strcpy@plt>
  409838:	ldur	x8, [x29, #-168]
  40983c:	stur	x8, [x29, #-152]
  409840:	ldur	x8, [x29, #-152]
  409844:	stur	x8, [x29, #-200]
  409848:	ldur	x8, [x29, #-200]
  40984c:	stur	x8, [x29, #-56]
  409850:	ldur	x0, [x29, #-16]
  409854:	ldur	x1, [x29, #-24]
  409858:	ldur	w2, [x29, #-28]
  40985c:	ldur	x3, [x29, #-48]
  409860:	ldur	x4, [x29, #-56]
  409864:	bl	4099d0 <portable_changes_add>
  409868:	stur	w0, [x29, #-4]
  40986c:	ldur	w0, [x29, #-4]
  409870:	mov	sp, x29
  409874:	ldr	x28, [sp, #16]
  409878:	ldp	x29, x30, [sp], #32
  40987c:	ret

0000000000409880 <image_symlink>:
  409880:	sub	sp, sp, #0x50
  409884:	stp	x29, x30, [sp, #64]
  409888:	add	x29, sp, #0x40
  40988c:	mov	x8, xzr
  409890:	adrp	x9, 413000 <manager_connect_bus+0x4e4>
  409894:	add	x9, x9, #0x4ee
  409898:	add	x9, x9, #0x3
  40989c:	stur	x0, [x29, #-16]
  4098a0:	stur	w1, [x29, #-20]
  4098a4:	str	x2, [sp, #32]
  4098a8:	str	x8, [sp, #8]
  4098ac:	str	x9, [sp]
  4098b0:	ldur	x8, [x29, #-16]
  4098b4:	cmp	x8, #0x0
  4098b8:	cset	w9, ne  // ne = any
  4098bc:	mov	w10, #0x1                   	// #1
  4098c0:	eor	w9, w9, #0x1
  4098c4:	eor	w9, w9, w10
  4098c8:	eor	w9, w9, w10
  4098cc:	and	w9, w9, #0x1
  4098d0:	mov	w0, w9
  4098d4:	sxtw	x8, w0
  4098d8:	cbz	x8, 409900 <image_symlink+0x80>
  4098dc:	mov	w8, wzr
  4098e0:	mov	w0, w8
  4098e4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4098e8:	add	x1, x1, #0x415
  4098ec:	ldr	x2, [sp]
  4098f0:	mov	w3, #0x399                 	// #921
  4098f4:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4098f8:	add	x4, x4, #0xa90
  4098fc:	bl	404150 <log_assert_failed_realm@plt>
  409900:	ldr	x8, [sp, #32]
  409904:	cmp	x8, #0x0
  409908:	cset	w9, ne  // ne = any
  40990c:	mov	w10, #0x1                   	// #1
  409910:	eor	w9, w9, #0x1
  409914:	eor	w9, w9, w10
  409918:	eor	w9, w9, w10
  40991c:	and	w9, w9, #0x1
  409920:	mov	w0, w9
  409924:	sxtw	x8, w0
  409928:	cbz	x8, 409950 <image_symlink+0xd0>
  40992c:	mov	w8, wzr
  409930:	mov	w0, w8
  409934:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  409938:	add	x1, x1, #0xabc
  40993c:	ldr	x2, [sp]
  409940:	mov	w3, #0x39a                 	// #922
  409944:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409948:	add	x4, x4, #0xa90
  40994c:	bl	404150 <log_assert_failed_realm@plt>
  409950:	ldur	x0, [x29, #-16]
  409954:	bl	404610 <last_path_component@plt>
  409958:	str	x0, [sp, #24]
  40995c:	ldur	w8, [x29, #-20]
  409960:	and	w8, w8, #0x4
  409964:	cbz	w8, 409978 <image_symlink+0xf8>
  409968:	adrp	x8, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40996c:	add	x8, x8, #0xac8
  409970:	str	x8, [sp, #16]
  409974:	b	409984 <image_symlink+0x104>
  409978:	adrp	x8, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40997c:	add	x8, x8, #0xad8
  409980:	str	x8, [sp, #16]
  409984:	ldr	x0, [sp, #16]
  409988:	ldr	x1, [sp, #24]
  40998c:	mov	x8, xzr
  409990:	mov	x2, x8
  409994:	bl	404440 <strjoin_real@plt>
  409998:	str	x0, [sp, #8]
  40999c:	ldr	x8, [sp, #8]
  4099a0:	cbnz	x8, 4099b0 <image_symlink+0x130>
  4099a4:	mov	w8, #0xfffffff4            	// #-12
  4099a8:	stur	w8, [x29, #-4]
  4099ac:	b	4099c0 <image_symlink+0x140>
  4099b0:	ldr	x8, [sp, #8]
  4099b4:	ldr	x9, [sp, #32]
  4099b8:	str	x8, [x9]
  4099bc:	stur	wzr, [x29, #-4]
  4099c0:	ldur	w0, [x29, #-4]
  4099c4:	ldp	x29, x30, [sp, #64]
  4099c8:	add	sp, sp, #0x50
  4099cc:	ret

00000000004099d0 <portable_changes_add>:
  4099d0:	sub	sp, sp, #0xa0
  4099d4:	stp	x29, x30, [sp, #144]
  4099d8:	add	x29, sp, #0x90
  4099dc:	mov	x8, xzr
  4099e0:	adrp	x9, 413000 <manager_connect_bus+0x4e4>
  4099e4:	add	x9, x9, #0x4ee
  4099e8:	add	x9, x9, #0x3
  4099ec:	stur	x0, [x29, #-16]
  4099f0:	stur	x1, [x29, #-24]
  4099f4:	stur	w2, [x29, #-28]
  4099f8:	stur	x3, [x29, #-40]
  4099fc:	stur	x4, [x29, #-48]
  409a00:	stur	x8, [x29, #-56]
  409a04:	stur	x8, [x29, #-64]
  409a08:	str	x9, [sp]
  409a0c:	ldur	x8, [x29, #-40]
  409a10:	cmp	x8, #0x0
  409a14:	cset	w9, ne  // ne = any
  409a18:	mov	w10, #0x1                   	// #1
  409a1c:	eor	w9, w9, #0x1
  409a20:	eor	w9, w9, w10
  409a24:	eor	w9, w9, w10
  409a28:	and	w9, w9, #0x1
  409a2c:	mov	w0, w9
  409a30:	sxtw	x8, w0
  409a34:	cbz	x8, 409a5c <portable_changes_add+0x8c>
  409a38:	mov	w8, wzr
  409a3c:	mov	w0, w8
  409a40:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  409a44:	add	x1, x1, #0xb39
  409a48:	ldr	x2, [sp]
  409a4c:	mov	w3, #0x260                 	// #608
  409a50:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409a54:	add	x4, x4, #0xae8
  409a58:	bl	404150 <log_assert_failed_realm@plt>
  409a5c:	ldur	x8, [x29, #-16]
  409a60:	cmp	x8, #0x0
  409a64:	cset	w9, ne  // ne = any
  409a68:	mov	w10, #0x1                   	// #1
  409a6c:	eor	w9, w9, #0x1
  409a70:	and	w9, w9, #0x1
  409a74:	ldur	x8, [x29, #-24]
  409a78:	cmp	x8, #0x0
  409a7c:	cset	w11, ne  // ne = any
  409a80:	eor	w11, w11, w10
  409a84:	and	w11, w11, #0x1
  409a88:	cmp	w9, w11
  409a8c:	cset	w9, eq  // eq = none
  409a90:	eor	w9, w9, w10
  409a94:	eor	w9, w9, w10
  409a98:	eor	w9, w9, w10
  409a9c:	and	w9, w9, #0x1
  409aa0:	mov	w0, w9
  409aa4:	sxtw	x8, w0
  409aa8:	cbz	x8, 409ad0 <portable_changes_add+0x100>
  409aac:	mov	w8, wzr
  409ab0:	mov	w0, w8
  409ab4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409ab8:	add	x1, x1, #0xa79
  409abc:	ldr	x2, [sp]
  409ac0:	mov	w3, #0x261                 	// #609
  409ac4:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409ac8:	add	x4, x4, #0xae8
  409acc:	bl	404150 <log_assert_failed_realm@plt>
  409ad0:	ldur	x8, [x29, #-16]
  409ad4:	cbnz	x8, 409ae8 <portable_changes_add+0x118>
  409ad8:	stur	wzr, [x29, #-4]
  409adc:	mov	w8, #0x1                   	// #1
  409ae0:	str	w8, [sp, #68]
  409ae4:	b	409c2c <portable_changes_add+0x25c>
  409ae8:	ldur	x8, [x29, #-16]
  409aec:	ldr	x0, [x8]
  409af0:	ldur	x8, [x29, #-24]
  409af4:	ldr	x8, [x8]
  409af8:	add	x1, x8, #0x1
  409afc:	mov	x2, #0x18                  	// #24
  409b00:	bl	404620 <reallocarray@plt>
  409b04:	str	x0, [sp, #72]
  409b08:	ldr	x8, [sp, #72]
  409b0c:	cbnz	x8, 409b24 <portable_changes_add+0x154>
  409b10:	mov	w8, #0xfffffff4            	// #-12
  409b14:	stur	w8, [x29, #-4]
  409b18:	mov	w8, #0x1                   	// #1
  409b1c:	str	w8, [sp, #68]
  409b20:	b	409c2c <portable_changes_add+0x25c>
  409b24:	ldr	x8, [sp, #72]
  409b28:	ldur	x9, [x29, #-16]
  409b2c:	str	x8, [x9]
  409b30:	ldur	x0, [x29, #-40]
  409b34:	bl	404630 <strdup@plt>
  409b38:	stur	x0, [x29, #-56]
  409b3c:	ldur	x8, [x29, #-56]
  409b40:	cbnz	x8, 409b58 <portable_changes_add+0x188>
  409b44:	mov	w8, #0xfffffff4            	// #-12
  409b48:	stur	w8, [x29, #-4]
  409b4c:	mov	w8, #0x1                   	// #1
  409b50:	str	w8, [sp, #68]
  409b54:	b	409c2c <portable_changes_add+0x25c>
  409b58:	ldur	x0, [x29, #-56]
  409b5c:	mov	w8, wzr
  409b60:	and	w1, w8, #0x1
  409b64:	bl	404640 <path_simplify@plt>
  409b68:	ldur	x9, [x29, #-48]
  409b6c:	cbz	x9, 409ba8 <portable_changes_add+0x1d8>
  409b70:	ldur	x0, [x29, #-48]
  409b74:	bl	404630 <strdup@plt>
  409b78:	stur	x0, [x29, #-64]
  409b7c:	ldur	x8, [x29, #-64]
  409b80:	cbnz	x8, 409b98 <portable_changes_add+0x1c8>
  409b84:	mov	w8, #0xfffffff4            	// #-12
  409b88:	stur	w8, [x29, #-4]
  409b8c:	mov	w8, #0x1                   	// #1
  409b90:	str	w8, [sp, #68]
  409b94:	b	409c2c <portable_changes_add+0x25c>
  409b98:	ldur	x0, [x29, #-64]
  409b9c:	mov	w8, wzr
  409ba0:	and	w1, w8, #0x1
  409ba4:	bl	404640 <path_simplify@plt>
  409ba8:	ldr	x8, [sp, #72]
  409bac:	ldur	x9, [x29, #-24]
  409bb0:	ldr	x10, [x9]
  409bb4:	add	x11, x10, #0x1
  409bb8:	str	x11, [x9]
  409bbc:	mov	x9, #0x18                  	// #24
  409bc0:	mul	x9, x9, x10
  409bc4:	add	x8, x8, x9
  409bc8:	ldur	w12, [x29, #-28]
  409bcc:	add	x9, sp, #0x28
  409bd0:	str	w12, [sp, #40]
  409bd4:	ldur	x10, [x29, #-56]
  409bd8:	str	x10, [sp, #32]
  409bdc:	mov	x10, xzr
  409be0:	stur	x10, [x29, #-56]
  409be4:	ldr	x11, [sp, #32]
  409be8:	str	x11, [sp, #24]
  409bec:	ldr	x11, [sp, #24]
  409bf0:	str	x11, [x9, #8]
  409bf4:	ldur	x11, [x29, #-64]
  409bf8:	str	x11, [sp, #16]
  409bfc:	stur	x10, [x29, #-64]
  409c00:	ldr	x10, [sp, #16]
  409c04:	str	x10, [sp, #8]
  409c08:	ldr	x10, [sp, #8]
  409c0c:	str	x10, [x9, #16]
  409c10:	ldur	q0, [sp, #40]
  409c14:	str	q0, [x8]
  409c18:	ldr	x9, [sp, #56]
  409c1c:	str	x9, [x8, #16]
  409c20:	stur	wzr, [x29, #-4]
  409c24:	mov	w12, #0x1                   	// #1
  409c28:	str	w12, [sp, #68]
  409c2c:	sub	x0, x29, #0x40
  409c30:	bl	405118 <freep>
  409c34:	sub	x0, x29, #0x38
  409c38:	bl	405118 <freep>
  409c3c:	ldur	w0, [x29, #-4]
  409c40:	ldp	x29, x30, [sp, #144]
  409c44:	add	sp, sp, #0xa0
  409c48:	ret

0000000000409c4c <portable_get_state>:
  409c4c:	sub	sp, sp, #0x50
  409c50:	stp	x29, x30, [sp, #64]
  409c54:	add	x29, sp, #0x40
  409c58:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  409c5c:	add	x8, x8, #0x4ee
  409c60:	add	x8, x8, #0x3
  409c64:	stur	x0, [x29, #-16]
  409c68:	stur	x1, [x29, #-24]
  409c6c:	stur	w2, [x29, #-28]
  409c70:	str	x3, [sp, #24]
  409c74:	str	x4, [sp, #16]
  409c78:	str	x8, [sp]
  409c7c:	ldur	x8, [x29, #-24]
  409c80:	cmp	x8, #0x0
  409c84:	cset	w9, ne  // ne = any
  409c88:	mov	w10, #0x1                   	// #1
  409c8c:	eor	w9, w9, #0x1
  409c90:	eor	w9, w9, w10
  409c94:	eor	w9, w9, w10
  409c98:	and	w9, w9, #0x1
  409c9c:	mov	w0, w9
  409ca0:	sxtw	x8, w0
  409ca4:	cbz	x8, 409ccc <portable_get_state+0x80>
  409ca8:	mov	w8, wzr
  409cac:	mov	w0, w8
  409cb0:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  409cb4:	add	x1, x1, #0x558
  409cb8:	ldr	x2, [sp]
  409cbc:	mov	w3, #0x574                 	// #1396
  409cc0:	adrp	x4, 413000 <manager_connect_bus+0x4e4>
  409cc4:	add	x4, x4, #0xa5d
  409cc8:	bl	404150 <log_assert_failed_realm@plt>
  409ccc:	ldr	x8, [sp, #24]
  409cd0:	cmp	x8, #0x0
  409cd4:	cset	w9, ne  // ne = any
  409cd8:	mov	w10, #0x1                   	// #1
  409cdc:	eor	w9, w9, #0x1
  409ce0:	eor	w9, w9, w10
  409ce4:	eor	w9, w9, w10
  409ce8:	and	w9, w9, #0x1
  409cec:	mov	w0, w9
  409cf0:	sxtw	x8, w0
  409cf4:	cbz	x8, 409d1c <portable_get_state+0xd0>
  409cf8:	mov	w8, wzr
  409cfc:	mov	w0, w8
  409d00:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  409d04:	add	x1, x1, #0xabc
  409d08:	ldr	x2, [sp]
  409d0c:	mov	w3, #0x575                 	// #1397
  409d10:	adrp	x4, 413000 <manager_connect_bus+0x4e4>
  409d14:	add	x4, x4, #0xa5d
  409d18:	bl	404150 <log_assert_failed_realm@plt>
  409d1c:	ldur	x0, [x29, #-16]
  409d20:	ldur	x1, [x29, #-24]
  409d24:	ldur	w8, [x29, #-28]
  409d28:	and	w2, w8, #0xfffffffb
  409d2c:	ldr	x4, [sp, #16]
  409d30:	add	x3, sp, #0xc
  409d34:	bl	409dbc <portable_get_state_internal>
  409d38:	str	w0, [sp, #8]
  409d3c:	ldr	w8, [sp, #8]
  409d40:	cmp	w8, #0x0
  409d44:	cset	w8, ge  // ge = tcont
  409d48:	tbnz	w8, #0, 409d58 <portable_get_state+0x10c>
  409d4c:	ldr	w8, [sp, #8]
  409d50:	stur	w8, [x29, #-4]
  409d54:	b	409dac <portable_get_state+0x160>
  409d58:	ldr	w8, [sp, #12]
  409d5c:	cbnz	w8, 409d9c <portable_get_state+0x150>
  409d60:	ldur	x0, [x29, #-16]
  409d64:	ldur	x1, [x29, #-24]
  409d68:	ldur	w8, [x29, #-28]
  409d6c:	orr	w2, w8, #0x4
  409d70:	ldr	x4, [sp, #16]
  409d74:	add	x3, sp, #0xc
  409d78:	bl	409dbc <portable_get_state_internal>
  409d7c:	str	w0, [sp, #8]
  409d80:	ldr	w8, [sp, #8]
  409d84:	cmp	w8, #0x0
  409d88:	cset	w8, ge  // ge = tcont
  409d8c:	tbnz	w8, #0, 409d9c <portable_get_state+0x150>
  409d90:	ldr	w8, [sp, #8]
  409d94:	stur	w8, [x29, #-4]
  409d98:	b	409dac <portable_get_state+0x160>
  409d9c:	ldr	w8, [sp, #12]
  409da0:	ldr	x9, [sp, #24]
  409da4:	str	w8, [x9]
  409da8:	stur	wzr, [x29, #-4]
  409dac:	ldur	w0, [x29, #-4]
  409db0:	ldp	x29, x30, [sp, #64]
  409db4:	add	sp, sp, #0x50
  409db8:	ret

0000000000409dbc <portable_get_state_internal>:
  409dbc:	sub	sp, sp, #0x190
  409dc0:	stp	x29, x30, [sp, #368]
  409dc4:	str	x28, [sp, #384]
  409dc8:	add	x29, sp, #0x170
  409dcc:	sub	x8, x29, #0x30
  409dd0:	mov	w9, #0x0                   	// #0
  409dd4:	mov	x10, #0x68                  	// #104
  409dd8:	mov	x11, xzr
  409ddc:	mov	w12, wzr
  409de0:	adrp	x13, 413000 <manager_connect_bus+0x4e4>
  409de4:	add	x13, x13, #0x4ee
  409de8:	add	x13, x13, #0x3
  409dec:	adrp	x14, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409df0:	add	x14, x14, #0xbb6
  409df4:	sub	x15, x29, #0x98
  409df8:	str	x0, [x8, #32]
  409dfc:	str	x1, [x8, #24]
  409e00:	stur	w2, [x29, #-28]
  409e04:	str	x3, [x8, #8]
  409e08:	str	x4, [x8]
  409e0c:	mov	x0, x15
  409e10:	mov	w1, w12
  409e14:	mov	x2, x10
  409e18:	str	x8, [sp, #80]
  409e1c:	str	w9, [sp, #76]
  409e20:	str	x11, [sp, #64]
  409e24:	str	x13, [sp, #56]
  409e28:	str	x14, [sp, #48]
  409e2c:	bl	4042f0 <memset@plt>
  409e30:	ldr	w9, [sp, #76]
  409e34:	sturb	w9, [x29, #-153]
  409e38:	sturb	w9, [x29, #-154]
  409e3c:	ldr	x8, [sp, #64]
  409e40:	stur	x8, [x29, #-168]
  409e44:	stur	x8, [x29, #-176]
  409e48:	ldr	x8, [sp, #80]
  409e4c:	ldr	x9, [x8, #24]
  409e50:	cmp	x9, #0x0
  409e54:	cset	w10, ne  // ne = any
  409e58:	mov	w11, #0x1                   	// #1
  409e5c:	eor	w10, w10, #0x1
  409e60:	eor	w10, w10, w11
  409e64:	eor	w10, w10, w11
  409e68:	and	w10, w10, #0x1
  409e6c:	mov	w0, w10
  409e70:	sxtw	x9, w0
  409e74:	cbz	x9, 409e9c <portable_get_state_internal+0xe0>
  409e78:	mov	w8, wzr
  409e7c:	mov	w0, w8
  409e80:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  409e84:	add	x1, x1, #0x558
  409e88:	ldr	x2, [sp, #56]
  409e8c:	mov	w3, #0x526                 	// #1318
  409e90:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409e94:	add	x4, x4, #0xb4e
  409e98:	bl	404150 <log_assert_failed_realm@plt>
  409e9c:	ldr	x8, [sp, #80]
  409ea0:	ldr	x9, [x8, #8]
  409ea4:	cmp	x9, #0x0
  409ea8:	cset	w10, ne  // ne = any
  409eac:	mov	w11, #0x1                   	// #1
  409eb0:	eor	w10, w10, #0x1
  409eb4:	eor	w10, w10, w11
  409eb8:	eor	w10, w10, w11
  409ebc:	and	w10, w10, #0x1
  409ec0:	mov	w0, w10
  409ec4:	sxtw	x9, w0
  409ec8:	cbz	x9, 409ef0 <portable_get_state_internal+0x134>
  409ecc:	mov	w8, wzr
  409ed0:	mov	w0, w8
  409ed4:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  409ed8:	add	x1, x1, #0xabc
  409edc:	ldr	x2, [sp, #56]
  409ee0:	mov	w3, #0x527                 	// #1319
  409ee4:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  409ee8:	add	x4, x4, #0xb4e
  409eec:	bl	404150 <log_assert_failed_realm@plt>
  409ef0:	sub	x0, x29, #0x98
  409ef4:	mov	w8, wzr
  409ef8:	mov	w1, w8
  409efc:	mov	w2, #0x4                   	// #4
  409f00:	mov	x9, xzr
  409f04:	mov	x3, x9
  409f08:	bl	404300 <lookup_paths_init@plt>
  409f0c:	str	w0, [sp, #172]
  409f10:	ldr	w8, [sp, #172]
  409f14:	cmp	w8, #0x0
  409f18:	cset	w8, ge  // ge = tcont
  409f1c:	tbnz	w8, #0, 409f34 <portable_get_state_internal+0x178>
  409f20:	ldr	w8, [sp, #172]
  409f24:	stur	w8, [x29, #-4]
  409f28:	mov	w8, #0x1                   	// #1
  409f2c:	str	w8, [sp, #168]
  409f30:	b	40a538 <portable_get_state_internal+0x77c>
  409f34:	ldur	w1, [x29, #-28]
  409f38:	sub	x0, x29, #0x98
  409f3c:	bl	408ab4 <attached_path>
  409f40:	str	x0, [sp, #184]
  409f44:	ldr	x0, [sp, #184]
  409f48:	bl	4044b0 <opendir@plt>
  409f4c:	stur	x0, [x29, #-176]
  409f50:	ldur	x8, [x29, #-176]
  409f54:	cbnz	x8, 40a018 <portable_get_state_internal+0x25c>
  409f58:	bl	404270 <__errno_location@plt>
  409f5c:	ldr	w8, [x0]
  409f60:	cmp	w8, #0x2
  409f64:	b.ne	409f84 <portable_get_state_internal+0x1c8>  // b.any
  409f68:	ldr	x8, [sp, #80]
  409f6c:	ldr	x9, [x8, #8]
  409f70:	str	wzr, [x9]
  409f74:	stur	wzr, [x29, #-4]
  409f78:	mov	w10, #0x1                   	// #1
  409f7c:	str	w10, [sp, #168]
  409f80:	b	40a538 <portable_get_state_internal+0x77c>
  409f84:	mov	w8, #0x7                   	// #7
  409f88:	str	w8, [sp, #164]
  409f8c:	bl	404270 <__errno_location@plt>
  409f90:	ldr	w8, [x0]
  409f94:	str	w8, [sp, #160]
  409f98:	str	wzr, [sp, #156]
  409f9c:	ldr	w0, [sp, #156]
  409fa0:	bl	4041e0 <log_get_max_level_realm@plt>
  409fa4:	ldr	w8, [sp, #164]
  409fa8:	and	w8, w8, #0x7
  409fac:	cmp	w0, w8
  409fb0:	b.lt	409fe8 <portable_get_state_internal+0x22c>  // b.tstop
  409fb4:	ldr	w8, [sp, #156]
  409fb8:	ldr	w9, [sp, #164]
  409fbc:	orr	w0, w9, w8, lsl #10
  409fc0:	ldr	w1, [sp, #160]
  409fc4:	ldr	x6, [sp, #184]
  409fc8:	ldr	x2, [sp, #56]
  409fcc:	mov	w3, #0x537                 	// #1335
  409fd0:	ldr	x4, [sp, #48]
  409fd4:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  409fd8:	add	x5, x5, #0x7ca
  409fdc:	bl	4041f0 <log_internal_realm@plt>
  409fe0:	str	w0, [sp, #44]
  409fe4:	b	409ffc <portable_get_state_internal+0x240>
  409fe8:	ldr	w0, [sp, #160]
  409fec:	bl	404200 <abs@plt>
  409ff0:	mov	w8, wzr
  409ff4:	subs	w8, w8, w0, uxtb
  409ff8:	str	w8, [sp, #44]
  409ffc:	ldr	w8, [sp, #44]
  40a000:	str	w8, [sp, #152]
  40a004:	ldr	w8, [sp, #152]
  40a008:	stur	w8, [x29, #-4]
  40a00c:	mov	w8, #0x1                   	// #1
  40a010:	str	w8, [sp, #168]
  40a014:	b	40a538 <portable_get_state_internal+0x77c>
  40a018:	adrp	x0, 42f000 <__FRAME_END__+0x18438>
  40a01c:	add	x0, x0, #0xf98
  40a020:	bl	4044c0 <internal_set_new@plt>
  40a024:	stur	x0, [x29, #-168]
  40a028:	ldur	x8, [x29, #-168]
  40a02c:	cbnz	x8, 40a044 <portable_get_state_internal+0x288>
  40a030:	mov	w8, #0xfffffff4            	// #-12
  40a034:	stur	w8, [x29, #-4]
  40a038:	mov	w8, #0x1                   	// #1
  40a03c:	str	w8, [sp, #168]
  40a040:	b	40a538 <portable_get_state_internal+0x77c>
  40a044:	bl	404270 <__errno_location@plt>
  40a048:	str	wzr, [x0]
  40a04c:	ldur	x0, [x29, #-176]
  40a050:	bl	4044d0 <readdir64@plt>
  40a054:	str	x0, [sp, #176]
  40a058:	ldr	x8, [sp, #176]
  40a05c:	cbnz	x8, 40a10c <portable_get_state_internal+0x350>
  40a060:	bl	404270 <__errno_location@plt>
  40a064:	ldr	w8, [x0]
  40a068:	cmp	w8, #0x0
  40a06c:	cset	w8, le
  40a070:	tbnz	w8, #0, 40a108 <portable_get_state_internal+0x34c>
  40a074:	mov	w8, #0x7                   	// #7
  40a078:	str	w8, [sp, #148]
  40a07c:	bl	404270 <__errno_location@plt>
  40a080:	ldr	w8, [x0]
  40a084:	str	w8, [sp, #144]
  40a088:	str	wzr, [sp, #140]
  40a08c:	ldr	w0, [sp, #140]
  40a090:	bl	4041e0 <log_get_max_level_realm@plt>
  40a094:	ldr	w8, [sp, #148]
  40a098:	and	w8, w8, #0x7
  40a09c:	cmp	w0, w8
  40a0a0:	b.lt	40a0d8 <portable_get_state_internal+0x31c>  // b.tstop
  40a0a4:	ldr	w8, [sp, #140]
  40a0a8:	ldr	w9, [sp, #148]
  40a0ac:	orr	w0, w9, w8, lsl #10
  40a0b0:	ldr	w1, [sp, #144]
  40a0b4:	ldr	x6, [sp, #184]
  40a0b8:	ldr	x2, [sp, #56]
  40a0bc:	mov	w3, #0x53e                 	// #1342
  40a0c0:	ldr	x4, [sp, #48]
  40a0c4:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  40a0c8:	add	x5, x5, #0x7ec
  40a0cc:	bl	4041f0 <log_internal_realm@plt>
  40a0d0:	str	w0, [sp, #40]
  40a0d4:	b	40a0ec <portable_get_state_internal+0x330>
  40a0d8:	ldr	w0, [sp, #144]
  40a0dc:	bl	404200 <abs@plt>
  40a0e0:	mov	w8, wzr
  40a0e4:	subs	w8, w8, w0, uxtb
  40a0e8:	str	w8, [sp, #40]
  40a0ec:	ldr	w8, [sp, #40]
  40a0f0:	str	w8, [sp, #136]
  40a0f4:	ldr	w8, [sp, #136]
  40a0f8:	stur	w8, [x29, #-4]
  40a0fc:	mov	w8, #0x1                   	// #1
  40a100:	str	w8, [sp, #168]
  40a104:	b	40a538 <portable_get_state_internal+0x77c>
  40a108:	b	40a468 <portable_get_state_internal+0x6ac>
  40a10c:	ldr	x8, [sp, #176]
  40a110:	add	x0, x8, #0x13
  40a114:	bl	4044e0 <hidden_or_backup_file@plt>
  40a118:	tbnz	w0, #0, 40a120 <portable_get_state_internal+0x364>
  40a11c:	b	40a124 <portable_get_state_internal+0x368>
  40a120:	b	40a450 <portable_get_state_internal+0x694>
  40a124:	ldr	x8, [sp, #176]
  40a128:	add	x0, x8, #0x13
  40a12c:	mov	w1, #0x7                   	// #7
  40a130:	bl	404340 <unit_name_is_valid@plt>
  40a134:	tbnz	w0, #0, 40a13c <portable_get_state_internal+0x380>
  40a138:	b	40a450 <portable_get_state_internal+0x694>
  40a13c:	ldur	x0, [x29, #-168]
  40a140:	ldr	x8, [sp, #176]
  40a144:	add	x1, x8, #0x13
  40a148:	bl	408bb0 <set_get>
  40a14c:	cbz	x0, 40a154 <portable_get_state_internal+0x398>
  40a150:	b	40a450 <portable_get_state_internal+0x694>
  40a154:	ldur	x0, [x29, #-176]
  40a158:	ldr	x1, [sp, #176]
  40a15c:	bl	4044f0 <dirent_ensure_type@plt>
  40a160:	mov	w8, #0x0                   	// #0
  40a164:	strb	w8, [sp, #131]
  40a168:	ldr	x9, [sp, #176]
  40a16c:	ldrb	w8, [x9, #18]
  40a170:	cmp	w8, #0x8
  40a174:	str	w8, [sp, #36]
  40a178:	b.eq	40a198 <portable_get_state_internal+0x3dc>  // b.none
  40a17c:	b	40a180 <portable_get_state_internal+0x3c4>
  40a180:	ldr	w8, [sp, #36]
  40a184:	cmp	w8, #0xa
  40a188:	cset	w9, eq  // eq = none
  40a18c:	eor	w9, w9, #0x1
  40a190:	tbnz	w9, #0, 40a1a4 <portable_get_state_internal+0x3e8>
  40a194:	b	40a198 <portable_get_state_internal+0x3dc>
  40a198:	mov	w8, #0x1                   	// #1
  40a19c:	strb	w8, [sp, #131]
  40a1a0:	b	40a1a4 <portable_get_state_internal+0x3e8>
  40a1a4:	ldrb	w8, [sp, #131]
  40a1a8:	and	w8, w8, #0x1
  40a1ac:	strb	w8, [sp, #130]
  40a1b0:	ldrb	w8, [sp, #130]
  40a1b4:	tbnz	w8, #0, 40a1bc <portable_get_state_internal+0x400>
  40a1b8:	b	40a450 <portable_get_state_internal+0x694>
  40a1bc:	ldur	x0, [x29, #-176]
  40a1c0:	ldr	x1, [sp, #184]
  40a1c4:	ldr	x8, [sp, #176]
  40a1c8:	add	x2, x8, #0x13
  40a1cc:	ldr	x8, [sp, #80]
  40a1d0:	ldr	x3, [x8, #24]
  40a1d4:	mov	x9, xzr
  40a1d8:	mov	x4, x9
  40a1dc:	bl	408bdc <test_chroot_dropin>
  40a1e0:	str	w0, [sp, #172]
  40a1e4:	ldr	w10, [sp, #172]
  40a1e8:	cmp	w10, #0x0
  40a1ec:	cset	w10, ge  // ge = tcont
  40a1f0:	tbnz	w10, #0, 40a208 <portable_get_state_internal+0x44c>
  40a1f4:	ldr	w8, [sp, #172]
  40a1f8:	stur	w8, [x29, #-4]
  40a1fc:	mov	w8, #0x1                   	// #1
  40a200:	str	w8, [sp, #168]
  40a204:	b	40a538 <portable_get_state_internal+0x77c>
  40a208:	ldr	w8, [sp, #172]
  40a20c:	cbnz	w8, 40a214 <portable_get_state_internal+0x458>
  40a210:	b	40a450 <portable_get_state_internal+0x694>
  40a214:	ldr	x8, [sp, #176]
  40a218:	add	x2, x8, #0x13
  40a21c:	mov	w9, wzr
  40a220:	mov	w0, w9
  40a224:	sub	x1, x29, #0x98
  40a228:	add	x3, sp, #0x84
  40a22c:	bl	404500 <unit_file_lookup_state@plt>
  40a230:	str	w0, [sp, #172]
  40a234:	ldr	w9, [sp, #172]
  40a238:	cmp	w9, #0x0
  40a23c:	cset	w9, ge  // ge = tcont
  40a240:	tbnz	w9, #0, 40a2d8 <portable_get_state_internal+0x51c>
  40a244:	mov	w8, #0x7                   	// #7
  40a248:	str	w8, [sp, #124]
  40a24c:	ldr	w8, [sp, #172]
  40a250:	str	w8, [sp, #120]
  40a254:	str	wzr, [sp, #116]
  40a258:	ldr	w0, [sp, #116]
  40a25c:	bl	4041e0 <log_get_max_level_realm@plt>
  40a260:	ldr	w8, [sp, #124]
  40a264:	and	w8, w8, #0x7
  40a268:	cmp	w0, w8
  40a26c:	b.lt	40a2a8 <portable_get_state_internal+0x4ec>  // b.tstop
  40a270:	ldr	w8, [sp, #116]
  40a274:	ldr	w9, [sp, #124]
  40a278:	orr	w0, w9, w8, lsl #10
  40a27c:	ldr	w1, [sp, #120]
  40a280:	ldr	x10, [sp, #176]
  40a284:	add	x6, x10, #0x13
  40a288:	ldr	x2, [sp, #56]
  40a28c:	mov	w3, #0x554                 	// #1364
  40a290:	ldr	x4, [sp, #48]
  40a294:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  40a298:	add	x5, x5, #0x813
  40a29c:	bl	4041f0 <log_internal_realm@plt>
  40a2a0:	str	w0, [sp, #32]
  40a2a4:	b	40a2bc <portable_get_state_internal+0x500>
  40a2a8:	ldr	w0, [sp, #120]
  40a2ac:	bl	404200 <abs@plt>
  40a2b0:	mov	w8, wzr
  40a2b4:	subs	w8, w8, w0, uxtb
  40a2b8:	str	w8, [sp, #32]
  40a2bc:	ldr	w8, [sp, #32]
  40a2c0:	str	w8, [sp, #112]
  40a2c4:	ldr	w8, [sp, #112]
  40a2c8:	stur	w8, [x29, #-4]
  40a2cc:	mov	w8, #0x1                   	// #1
  40a2d0:	str	w8, [sp, #168]
  40a2d4:	b	40a538 <portable_get_state_internal+0x77c>
  40a2d8:	mov	w8, #0x0                   	// #0
  40a2dc:	strb	w8, [sp, #111]
  40a2e0:	ldr	w8, [sp, #132]
  40a2e4:	subs	w9, w8, #0x2
  40a2e8:	cmp	w9, #0x1
  40a2ec:	str	w8, [sp, #28]
  40a2f0:	b.ls	40a318 <portable_get_state_internal+0x55c>  // b.plast
  40a2f4:	b	40a2f8 <portable_get_state_internal+0x53c>
  40a2f8:	ldr	w8, [sp, #28]
  40a2fc:	subs	w9, w8, #0x6
  40a300:	mov	w10, #0x1                   	// #1
  40a304:	cmp	w9, #0x1
  40a308:	cset	w9, ls  // ls = plast
  40a30c:	eor	w9, w9, w10
  40a310:	tbnz	w9, #0, 40a324 <portable_get_state_internal+0x568>
  40a314:	b	40a318 <portable_get_state_internal+0x55c>
  40a318:	mov	w8, #0x1                   	// #1
  40a31c:	strb	w8, [sp, #111]
  40a320:	b	40a324 <portable_get_state_internal+0x568>
  40a324:	ldrb	w8, [sp, #111]
  40a328:	and	w8, w8, #0x1
  40a32c:	strb	w8, [sp, #110]
  40a330:	ldrb	w8, [sp, #110]
  40a334:	tbnz	w8, #0, 40a340 <portable_get_state_internal+0x584>
  40a338:	mov	w8, #0x1                   	// #1
  40a33c:	sturb	w8, [x29, #-153]
  40a340:	ldr	x8, [sp, #80]
  40a344:	ldr	x0, [x8, #32]
  40a348:	ldr	x9, [sp, #176]
  40a34c:	add	x1, x9, #0x13
  40a350:	ldr	x2, [x8]
  40a354:	bl	4064ac <unit_file_is_active>
  40a358:	str	w0, [sp, #172]
  40a35c:	ldr	w10, [sp, #172]
  40a360:	cmp	w10, #0x0
  40a364:	cset	w10, ge  // ge = tcont
  40a368:	tbnz	w10, #0, 40a380 <portable_get_state_internal+0x5c4>
  40a36c:	ldr	w8, [sp, #172]
  40a370:	stur	w8, [x29, #-4]
  40a374:	mov	w8, #0x1                   	// #1
  40a378:	str	w8, [sp, #168]
  40a37c:	b	40a538 <portable_get_state_internal+0x77c>
  40a380:	ldr	w8, [sp, #172]
  40a384:	cmp	w8, #0x0
  40a388:	cset	w8, le
  40a38c:	tbnz	w8, #0, 40a398 <portable_get_state_internal+0x5dc>
  40a390:	mov	w8, #0x1                   	// #1
  40a394:	sturb	w8, [x29, #-154]
  40a398:	ldur	x0, [x29, #-168]
  40a39c:	ldr	x8, [sp, #176]
  40a3a0:	add	x1, x8, #0x13
  40a3a4:	bl	404520 <set_put_strdup@plt>
  40a3a8:	str	w0, [sp, #172]
  40a3ac:	ldr	w9, [sp, #172]
  40a3b0:	cmp	w9, #0x0
  40a3b4:	cset	w9, ge  // ge = tcont
  40a3b8:	tbnz	w9, #0, 40a450 <portable_get_state_internal+0x694>
  40a3bc:	mov	w8, #0x7                   	// #7
  40a3c0:	str	w8, [sp, #104]
  40a3c4:	ldr	w8, [sp, #172]
  40a3c8:	str	w8, [sp, #100]
  40a3cc:	str	wzr, [sp, #96]
  40a3d0:	ldr	w0, [sp, #96]
  40a3d4:	bl	4041e0 <log_get_max_level_realm@plt>
  40a3d8:	ldr	w8, [sp, #104]
  40a3dc:	and	w8, w8, #0x7
  40a3e0:	cmp	w0, w8
  40a3e4:	b.lt	40a420 <portable_get_state_internal+0x664>  // b.tstop
  40a3e8:	ldr	w8, [sp, #96]
  40a3ec:	ldr	w9, [sp, #104]
  40a3f0:	orr	w0, w9, w8, lsl #10
  40a3f4:	ldr	w1, [sp, #100]
  40a3f8:	ldr	x10, [sp, #176]
  40a3fc:	add	x6, x10, #0x13
  40a400:	ldr	x2, [sp, #56]
  40a404:	mov	w3, #0x560                 	// #1376
  40a408:	ldr	x4, [sp, #48]
  40a40c:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  40a410:	add	x5, x5, #0x89a
  40a414:	bl	4041f0 <log_internal_realm@plt>
  40a418:	str	w0, [sp, #24]
  40a41c:	b	40a434 <portable_get_state_internal+0x678>
  40a420:	ldr	w0, [sp, #100]
  40a424:	bl	404200 <abs@plt>
  40a428:	mov	w8, wzr
  40a42c:	subs	w8, w8, w0, uxtb
  40a430:	str	w8, [sp, #24]
  40a434:	ldr	w8, [sp, #24]
  40a438:	str	w8, [sp, #92]
  40a43c:	ldr	w8, [sp, #92]
  40a440:	stur	w8, [x29, #-4]
  40a444:	mov	w8, #0x1                   	// #1
  40a448:	str	w8, [sp, #168]
  40a44c:	b	40a538 <portable_get_state_internal+0x77c>
  40a450:	bl	404270 <__errno_location@plt>
  40a454:	str	wzr, [x0]
  40a458:	ldur	x0, [x29, #-176]
  40a45c:	bl	4044d0 <readdir64@plt>
  40a460:	str	x0, [sp, #176]
  40a464:	b	40a058 <portable_get_state_internal+0x29c>
  40a468:	ldurb	w8, [x29, #-154]
  40a46c:	tbnz	w8, #0, 40a474 <portable_get_state_internal+0x6b8>
  40a470:	b	40a4b4 <portable_get_state_internal+0x6f8>
  40a474:	ldur	x0, [x29, #-168]
  40a478:	bl	4092c8 <set_isempty>
  40a47c:	mov	w8, #0x0                   	// #0
  40a480:	str	w8, [sp, #20]
  40a484:	tbnz	w0, #0, 40a498 <portable_get_state_internal+0x6dc>
  40a488:	ldur	w8, [x29, #-28]
  40a48c:	tst	w8, #0x4
  40a490:	cset	w8, ne  // ne = any
  40a494:	str	w8, [sp, #20]
  40a498:	ldr	w8, [sp, #20]
  40a49c:	mov	w9, #0x5                   	// #5
  40a4a0:	mov	w10, #0x6                   	// #6
  40a4a4:	tst	w8, #0x1
  40a4a8:	csel	w8, w10, w9, ne  // ne = any
  40a4ac:	str	w8, [sp, #16]
  40a4b0:	b	40a51c <portable_get_state_internal+0x760>
  40a4b4:	ldurb	w8, [x29, #-153]
  40a4b8:	tbnz	w8, #0, 40a4c0 <portable_get_state_internal+0x704>
  40a4bc:	b	40a4dc <portable_get_state_internal+0x720>
  40a4c0:	ldur	w8, [x29, #-28]
  40a4c4:	mov	w9, #0x4                   	// #4
  40a4c8:	mov	w10, #0x3                   	// #3
  40a4cc:	tst	w8, #0x4
  40a4d0:	csel	w8, w9, w10, ne  // ne = any
  40a4d4:	str	w8, [sp, #12]
  40a4d8:	b	40a514 <portable_get_state_internal+0x758>
  40a4dc:	ldur	x0, [x29, #-168]
  40a4e0:	bl	4092c8 <set_isempty>
  40a4e4:	tbnz	w0, #0, 40a504 <portable_get_state_internal+0x748>
  40a4e8:	ldur	w8, [x29, #-28]
  40a4ec:	mov	w9, #0x1                   	// #1
  40a4f0:	mov	w10, #0x2                   	// #2
  40a4f4:	tst	w8, #0x4
  40a4f8:	csel	w8, w10, w9, ne  // ne = any
  40a4fc:	str	w8, [sp, #8]
  40a500:	b	40a50c <portable_get_state_internal+0x750>
  40a504:	mov	w8, wzr
  40a508:	str	w8, [sp, #8]
  40a50c:	ldr	w8, [sp, #8]
  40a510:	str	w8, [sp, #12]
  40a514:	ldr	w8, [sp, #12]
  40a518:	str	w8, [sp, #16]
  40a51c:	ldr	w8, [sp, #16]
  40a520:	ldr	x9, [sp, #80]
  40a524:	ldr	x10, [x9, #8]
  40a528:	str	w8, [x10]
  40a52c:	stur	wzr, [x29, #-4]
  40a530:	mov	w8, #0x1                   	// #1
  40a534:	str	w8, [sp, #168]
  40a538:	sub	x0, x29, #0xb0
  40a53c:	bl	408a80 <closedirp>
  40a540:	sub	x0, x29, #0xa8
  40a544:	bl	408a4c <set_free_freep>
  40a548:	sub	x0, x29, #0x98
  40a54c:	bl	404330 <lookup_paths_free@plt>
  40a550:	ldur	w0, [x29, #-4]
  40a554:	ldr	x28, [sp, #384]
  40a558:	ldp	x29, x30, [sp, #368]
  40a55c:	add	sp, sp, #0x190
  40a560:	ret

000000000040a564 <portable_get_profiles>:
  40a564:	sub	sp, sp, #0x20
  40a568:	stp	x29, x30, [sp, #16]
  40a56c:	add	x29, sp, #0x10
  40a570:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  40a574:	add	x8, x8, #0x4ee
  40a578:	add	x2, x8, #0x3
  40a57c:	str	x0, [sp, #8]
  40a580:	str	x2, [sp]
  40a584:	ldr	x8, [sp, #8]
  40a588:	cmp	x8, #0x0
  40a58c:	cset	w9, ne  // ne = any
  40a590:	mov	w10, #0x1                   	// #1
  40a594:	eor	w9, w9, #0x1
  40a598:	eor	w9, w9, w10
  40a59c:	eor	w9, w9, w10
  40a5a0:	and	w9, w9, #0x1
  40a5a4:	mov	w0, w9
  40a5a8:	sxtw	x8, w0
  40a5ac:	cbz	x8, 40a5d4 <portable_get_profiles+0x70>
  40a5b0:	mov	w8, wzr
  40a5b4:	mov	w0, w8
  40a5b8:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  40a5bc:	add	x1, x1, #0xabc
  40a5c0:	ldr	x2, [sp]
  40a5c4:	mov	w3, #0x589                 	// #1417
  40a5c8:	adrp	x4, 413000 <manager_connect_bus+0x4e4>
  40a5cc:	add	x4, x4, #0xac0
  40a5d0:	bl	404150 <log_assert_failed_realm@plt>
  40a5d4:	ldr	x0, [sp, #8]
  40a5d8:	mov	x8, xzr
  40a5dc:	mov	x1, x8
  40a5e0:	mov	x2, x8
  40a5e4:	mov	w3, #0x1c                  	// #28
  40a5e8:	adrp	x4, 413000 <manager_connect_bus+0x4e4>
  40a5ec:	add	x4, x4, #0x220
  40a5f0:	bl	404650 <conf_files_list_nulstr@plt>
  40a5f4:	ldp	x29, x30, [sp, #16]
  40a5f8:	add	sp, sp, #0x20
  40a5fc:	ret

000000000040a600 <portable_change_type_to_string>:
  40a600:	sub	sp, sp, #0x10
  40a604:	str	w0, [sp, #4]
  40a608:	ldr	w8, [sp, #4]
  40a60c:	cmp	w8, #0x0
  40a610:	cset	w8, lt  // lt = tstop
  40a614:	tbnz	w8, #0, 40a624 <portable_change_type_to_string+0x24>
  40a618:	ldr	w8, [sp, #4]
  40a61c:	cmp	w8, #0x5
  40a620:	b.lt	40a630 <portable_change_type_to_string+0x30>  // b.tstop
  40a624:	mov	x8, xzr
  40a628:	str	x8, [sp, #8]
  40a62c:	b	40a650 <portable_change_type_to_string+0x50>
  40a630:	ldrsw	x8, [sp, #4]
  40a634:	mov	x9, #0x8                   	// #8
  40a638:	mul	x8, x9, x8
  40a63c:	adrp	x9, 413000 <manager_connect_bus+0x4e4>
  40a640:	add	x9, x9, #0x2c8
  40a644:	add	x8, x9, x8
  40a648:	ldr	x8, [x8]
  40a64c:	str	x8, [sp, #8]
  40a650:	ldr	x0, [sp, #8]
  40a654:	add	sp, sp, #0x10
  40a658:	ret

000000000040a65c <portable_change_type_from_string>:
  40a65c:	sub	sp, sp, #0x20
  40a660:	stp	x29, x30, [sp, #16]
  40a664:	add	x29, sp, #0x10
  40a668:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  40a66c:	add	x8, x8, #0x2c8
  40a670:	mov	x1, #0x5                   	// #5
  40a674:	str	x0, [sp, #8]
  40a678:	ldr	x2, [sp, #8]
  40a67c:	mov	x0, x8
  40a680:	bl	404660 <string_table_lookup@plt>
  40a684:	ldp	x29, x30, [sp, #16]
  40a688:	add	sp, sp, #0x20
  40a68c:	ret

000000000040a690 <portable_state_to_string>:
  40a690:	sub	sp, sp, #0x10
  40a694:	str	w0, [sp, #4]
  40a698:	ldr	w8, [sp, #4]
  40a69c:	cmp	w8, #0x0
  40a6a0:	cset	w8, lt  // lt = tstop
  40a6a4:	tbnz	w8, #0, 40a6b4 <portable_state_to_string+0x24>
  40a6a8:	ldr	w8, [sp, #4]
  40a6ac:	cmp	w8, #0x7
  40a6b0:	b.lt	40a6c0 <portable_state_to_string+0x30>  // b.tstop
  40a6b4:	mov	x8, xzr
  40a6b8:	str	x8, [sp, #8]
  40a6bc:	b	40a6e0 <portable_state_to_string+0x50>
  40a6c0:	ldrsw	x8, [sp, #4]
  40a6c4:	mov	x9, #0x8                   	// #8
  40a6c8:	mul	x8, x9, x8
  40a6cc:	adrp	x9, 413000 <manager_connect_bus+0x4e4>
  40a6d0:	add	x9, x9, #0x2f0
  40a6d4:	add	x8, x9, x8
  40a6d8:	ldr	x8, [x8]
  40a6dc:	str	x8, [sp, #8]
  40a6e0:	ldr	x0, [sp, #8]
  40a6e4:	add	sp, sp, #0x10
  40a6e8:	ret

000000000040a6ec <portable_state_from_string>:
  40a6ec:	sub	sp, sp, #0x20
  40a6f0:	stp	x29, x30, [sp, #16]
  40a6f4:	add	x29, sp, #0x10
  40a6f8:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  40a6fc:	add	x8, x8, #0x2f0
  40a700:	mov	x1, #0x7                   	// #7
  40a704:	str	x0, [sp, #8]
  40a708:	ldr	x2, [sp, #8]
  40a70c:	mov	x0, x8
  40a710:	bl	404660 <string_table_lookup@plt>
  40a714:	ldp	x29, x30, [sp, #16]
  40a718:	add	sp, sp, #0x20
  40a71c:	ret

000000000040a720 <size_multiply_overflow>:
  40a720:	sub	sp, sp, #0x20
  40a724:	str	x0, [sp, #24]
  40a728:	str	x1, [sp, #16]
  40a72c:	ldr	x8, [sp, #16]
  40a730:	mov	w9, #0x0                   	// #0
  40a734:	str	w9, [sp, #12]
  40a738:	cbz	x8, 40a758 <size_multiply_overflow+0x38>
  40a73c:	ldr	x8, [sp, #24]
  40a740:	ldr	x9, [sp, #16]
  40a744:	mov	x10, #0xffffffffffffffff    	// #-1
  40a748:	udiv	x9, x10, x9
  40a74c:	cmp	x8, x9
  40a750:	cset	w11, hi  // hi = pmore
  40a754:	str	w11, [sp, #12]
  40a758:	ldr	w8, [sp, #12]
  40a75c:	mov	w9, #0x1                   	// #1
  40a760:	eor	w8, w8, #0x1
  40a764:	eor	w8, w8, w9
  40a768:	and	w8, w8, #0x1
  40a76c:	mov	w0, w8
  40a770:	sxtw	x10, w0
  40a774:	cmp	x10, #0x0
  40a778:	cset	w8, ne  // ne = any
  40a77c:	and	w0, w8, #0x1
  40a780:	add	sp, sp, #0x20
  40a784:	ret

000000000040a788 <portable_metadata_unrefp>:
  40a788:	sub	sp, sp, #0x20
  40a78c:	stp	x29, x30, [sp, #16]
  40a790:	add	x29, sp, #0x10
  40a794:	str	x0, [sp, #8]
  40a798:	ldr	x8, [sp, #8]
  40a79c:	ldr	x8, [x8]
  40a7a0:	cbz	x8, 40a7b0 <portable_metadata_unrefp+0x28>
  40a7a4:	ldr	x8, [sp, #8]
  40a7a8:	ldr	x0, [x8]
  40a7ac:	bl	404ee8 <portable_metadata_unref>
  40a7b0:	ldp	x29, x30, [sp, #16]
  40a7b4:	add	sp, sp, #0x20
  40a7b8:	ret

000000000040a7bc <loop_device_unrefp>:
  40a7bc:	sub	sp, sp, #0x20
  40a7c0:	stp	x29, x30, [sp, #16]
  40a7c4:	add	x29, sp, #0x10
  40a7c8:	str	x0, [sp, #8]
  40a7cc:	ldr	x8, [sp, #8]
  40a7d0:	ldr	x8, [x8]
  40a7d4:	cbz	x8, 40a7e4 <loop_device_unrefp+0x28>
  40a7d8:	ldr	x8, [sp, #8]
  40a7dc:	ldr	x0, [x8]
  40a7e0:	bl	404670 <loop_device_unref@plt>
  40a7e4:	ldp	x29, x30, [sp, #16]
  40a7e8:	add	sp, sp, #0x20
  40a7ec:	ret

000000000040a7f0 <extract_now>:
  40a7f0:	stp	x29, x30, [sp, #-32]!
  40a7f4:	str	x28, [sp, #16]
  40a7f8:	mov	x29, sp
  40a7fc:	sub	sp, sp, #0x1f0
  40a800:	mov	x8, xzr
  40a804:	mov	x9, #0x68                  	// #104
  40a808:	mov	w10, #0xffffffff            	// #-1
  40a80c:	mov	w11, wzr
  40a810:	adrp	x12, 413000 <manager_connect_bus+0x4e4>
  40a814:	add	x12, x12, #0x4ee
  40a818:	add	x12, x12, #0x3
  40a81c:	adrp	x13, 413000 <manager_connect_bus+0x4e4>
  40a820:	add	x13, x13, #0xf74
  40a824:	sub	x14, x29, #0xa8
  40a828:	stur	x0, [x29, #-16]
  40a82c:	stur	x1, [x29, #-24]
  40a830:	stur	w2, [x29, #-28]
  40a834:	stur	x3, [x29, #-40]
  40a838:	stur	x4, [x29, #-48]
  40a83c:	stur	x8, [x29, #-56]
  40a840:	stur	x8, [x29, #-64]
  40a844:	mov	x0, x14
  40a848:	mov	w1, w11
  40a84c:	mov	x2, x9
  40a850:	str	x8, [sp, #72]
  40a854:	str	w10, [sp, #68]
  40a858:	str	x12, [sp, #56]
  40a85c:	str	x13, [sp, #48]
  40a860:	bl	4042f0 <memset@plt>
  40a864:	ldr	w10, [sp, #68]
  40a868:	stur	w10, [x29, #-172]
  40a86c:	ldr	x8, [sp, #72]
  40a870:	stur	x8, [x29, #-184]
  40a874:	ldur	x8, [x29, #-16]
  40a878:	cmp	x8, #0x0
  40a87c:	cset	w9, ne  // ne = any
  40a880:	mov	w10, #0x1                   	// #1
  40a884:	eor	w9, w9, #0x1
  40a888:	eor	w9, w9, w10
  40a88c:	eor	w9, w9, w10
  40a890:	and	w9, w9, #0x1
  40a894:	mov	w0, w9
  40a898:	sxtw	x8, w0
  40a89c:	cbz	x8, 40a8c4 <extract_now+0xd4>
  40a8a0:	mov	w8, wzr
  40a8a4:	mov	w0, w8
  40a8a8:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  40a8ac:	add	x1, x1, #0xf21
  40a8b0:	ldr	x2, [sp, #56]
  40a8b4:	mov	w3, #0xf9                  	// #249
  40a8b8:	adrp	x4, 413000 <manager_connect_bus+0x4e4>
  40a8bc:	add	x4, x4, #0xf27
  40a8c0:	bl	404150 <log_assert_failed_realm@plt>
  40a8c4:	ldur	x0, [x29, #-16]
  40a8c8:	sub	x1, x29, #0xb8
  40a8cc:	sub	x2, x29, #0xac
  40a8d0:	bl	404680 <open_os_release@plt>
  40a8d4:	stur	w0, [x29, #-196]
  40a8d8:	ldur	w8, [x29, #-196]
  40a8dc:	cmp	w8, #0x0
  40a8e0:	cset	w8, ge  // ge = tcont
  40a8e4:	tbnz	w8, #0, 40a964 <extract_now+0x174>
  40a8e8:	mov	w8, #0x7                   	// #7
  40a8ec:	stur	w8, [x29, #-200]
  40a8f0:	ldur	w8, [x29, #-196]
  40a8f4:	stur	w8, [x29, #-204]
  40a8f8:	stur	wzr, [x29, #-208]
  40a8fc:	ldur	w0, [x29, #-208]
  40a900:	bl	4041e0 <log_get_max_level_realm@plt>
  40a904:	ldur	w8, [x29, #-200]
  40a908:	and	w8, w8, #0x7
  40a90c:	cmp	w0, w8
  40a910:	b.lt	40a944 <extract_now+0x154>  // b.tstop
  40a914:	ldur	w8, [x29, #-208]
  40a918:	ldur	w9, [x29, #-200]
  40a91c:	orr	w0, w9, w8, lsl #10
  40a920:	ldur	w1, [x29, #-204]
  40a924:	ldr	x2, [sp, #56]
  40a928:	mov	w3, #0xfe                  	// #254
  40a92c:	ldr	x4, [sp, #48]
  40a930:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  40a934:	add	x5, x5, #0xf80
  40a938:	bl	4041f0 <log_internal_realm@plt>
  40a93c:	str	w0, [sp, #44]
  40a940:	b	40a958 <extract_now+0x168>
  40a944:	ldur	w0, [x29, #-204]
  40a948:	bl	404200 <abs@plt>
  40a94c:	mov	w8, wzr
  40a950:	subs	w8, w8, w0, uxtb
  40a954:	str	w8, [sp, #44]
  40a958:	ldr	w8, [sp, #44]
  40a95c:	stur	w8, [x29, #-212]
  40a960:	b	40aa8c <extract_now+0x29c>
  40a964:	ldur	w8, [x29, #-28]
  40a968:	cmp	w8, #0x0
  40a96c:	cset	w8, lt  // lt = tstop
  40a970:	tbnz	w8, #0, 40aa28 <extract_now+0x238>
  40a974:	ldur	w0, [x29, #-28]
  40a978:	ldur	w2, [x29, #-172]
  40a97c:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  40a980:	add	x1, x1, #0xe75
  40a984:	bl	40b7f0 <send_item>
  40a988:	stur	w0, [x29, #-196]
  40a98c:	ldur	w8, [x29, #-196]
  40a990:	cmp	w8, #0x0
  40a994:	cset	w8, ge  // ge = tcont
  40a998:	tbnz	w8, #0, 40aa28 <extract_now+0x238>
  40a99c:	mov	w8, #0x7                   	// #7
  40a9a0:	stur	w8, [x29, #-216]
  40a9a4:	ldur	w8, [x29, #-196]
  40a9a8:	stur	w8, [x29, #-220]
  40a9ac:	stur	wzr, [x29, #-224]
  40a9b0:	ldur	w0, [x29, #-224]
  40a9b4:	bl	4041e0 <log_get_max_level_realm@plt>
  40a9b8:	ldur	w8, [x29, #-216]
  40a9bc:	and	w8, w8, #0x7
  40a9c0:	cmp	w0, w8
  40a9c4:	b.lt	40a9f8 <extract_now+0x208>  // b.tstop
  40a9c8:	ldur	w8, [x29, #-224]
  40a9cc:	ldur	w9, [x29, #-216]
  40a9d0:	orr	w0, w9, w8, lsl #10
  40a9d4:	ldur	w1, [x29, #-220]
  40a9d8:	ldr	x2, [sp, #56]
  40a9dc:	mov	w3, #0x103                 	// #259
  40a9e0:	ldr	x4, [sp, #48]
  40a9e4:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  40a9e8:	add	x5, x5, #0xfaf
  40a9ec:	bl	4041f0 <log_internal_realm@plt>
  40a9f0:	str	w0, [sp, #40]
  40a9f4:	b	40aa0c <extract_now+0x21c>
  40a9f8:	ldur	w0, [x29, #-220]
  40a9fc:	bl	404200 <abs@plt>
  40aa00:	mov	w8, wzr
  40aa04:	subs	w8, w8, w0, uxtb
  40aa08:	str	w8, [sp, #40]
  40aa0c:	ldr	w8, [sp, #40]
  40aa10:	stur	w8, [x29, #-228]
  40aa14:	ldur	w8, [x29, #-228]
  40aa18:	stur	w8, [x29, #-4]
  40aa1c:	mov	w8, #0x1                   	// #1
  40aa20:	stur	w8, [x29, #-232]
  40aa24:	b	40b1d8 <extract_now+0x9e8>
  40aa28:	ldur	x8, [x29, #-40]
  40aa2c:	cbz	x8, 40aa8c <extract_now+0x29c>
  40aa30:	ldur	w1, [x29, #-172]
  40aa34:	adrp	x0, 413000 <manager_connect_bus+0x4e4>
  40aa38:	add	x0, x0, #0xe75
  40aa3c:	bl	40b740 <portable_metadata_new>
  40aa40:	stur	x0, [x29, #-64]
  40aa44:	ldur	x8, [x29, #-64]
  40aa48:	cbnz	x8, 40aa60 <extract_now+0x270>
  40aa4c:	mov	w8, #0xfffffff4            	// #-12
  40aa50:	stur	w8, [x29, #-4]
  40aa54:	mov	w8, #0x1                   	// #1
  40aa58:	stur	w8, [x29, #-232]
  40aa5c:	b	40b1d8 <extract_now+0x9e8>
  40aa60:	mov	w8, #0xffffffff            	// #-1
  40aa64:	stur	w8, [x29, #-172]
  40aa68:	ldur	x9, [x29, #-184]
  40aa6c:	stur	x9, [x29, #-240]
  40aa70:	mov	x9, xzr
  40aa74:	stur	x9, [x29, #-184]
  40aa78:	ldur	x9, [x29, #-240]
  40aa7c:	str	x9, [sp, #248]
  40aa80:	ldr	x9, [sp, #248]
  40aa84:	ldur	x10, [x29, #-64]
  40aa88:	str	x9, [x10, #8]
  40aa8c:	ldur	x3, [x29, #-16]
  40aa90:	sub	x0, x29, #0xa8
  40aa94:	mov	w8, wzr
  40aa98:	mov	w1, w8
  40aa9c:	mov	w2, #0x4                   	// #4
  40aaa0:	bl	404300 <lookup_paths_init@plt>
  40aaa4:	stur	w0, [x29, #-196]
  40aaa8:	ldur	w8, [x29, #-196]
  40aaac:	cmp	w8, #0x0
  40aab0:	cset	w8, ge  // ge = tcont
  40aab4:	tbnz	w8, #0, 40ab44 <extract_now+0x354>
  40aab8:	mov	w8, #0x7                   	// #7
  40aabc:	str	w8, [sp, #244]
  40aac0:	ldur	w8, [x29, #-196]
  40aac4:	str	w8, [sp, #240]
  40aac8:	str	wzr, [sp, #236]
  40aacc:	ldr	w0, [sp, #236]
  40aad0:	bl	4041e0 <log_get_max_level_realm@plt>
  40aad4:	ldr	w8, [sp, #244]
  40aad8:	and	w8, w8, #0x7
  40aadc:	cmp	w0, w8
  40aae0:	b.lt	40ab14 <extract_now+0x324>  // b.tstop
  40aae4:	ldr	w8, [sp, #236]
  40aae8:	ldr	w9, [sp, #244]
  40aaec:	orr	w0, w9, w8, lsl #10
  40aaf0:	ldr	w1, [sp, #240]
  40aaf4:	ldr	x2, [sp, #56]
  40aaf8:	mov	w3, #0x115                 	// #277
  40aafc:	ldr	x4, [sp, #48]
  40ab00:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  40ab04:	add	x5, x5, #0xfd2
  40ab08:	bl	4041f0 <log_internal_realm@plt>
  40ab0c:	str	w0, [sp, #36]
  40ab10:	b	40ab28 <extract_now+0x338>
  40ab14:	ldr	w0, [sp, #240]
  40ab18:	bl	404200 <abs@plt>
  40ab1c:	mov	w8, wzr
  40ab20:	subs	w8, w8, w0, uxtb
  40ab24:	str	w8, [sp, #36]
  40ab28:	ldr	w8, [sp, #36]
  40ab2c:	str	w8, [sp, #232]
  40ab30:	ldr	w8, [sp, #232]
  40ab34:	stur	w8, [x29, #-4]
  40ab38:	mov	w8, #0x1                   	// #1
  40ab3c:	stur	w8, [x29, #-232]
  40ab40:	b	40b1d8 <extract_now+0x9e8>
  40ab44:	adrp	x0, 413000 <manager_connect_bus+0x4e4>
  40ab48:	add	x0, x0, #0x328
  40ab4c:	bl	4042a0 <internal_hashmap_new@plt>
  40ab50:	stur	x0, [x29, #-56]
  40ab54:	ldur	x8, [x29, #-56]
  40ab58:	cbnz	x8, 40ab70 <extract_now+0x380>
  40ab5c:	mov	w8, #0xfffffff4            	// #-12
  40ab60:	stur	w8, [x29, #-4]
  40ab64:	mov	w8, #0x1                   	// #1
  40ab68:	stur	w8, [x29, #-232]
  40ab6c:	b	40b1d8 <extract_now+0x9e8>
  40ab70:	ldur	x8, [x29, #-168]
  40ab74:	stur	x8, [x29, #-192]
  40ab78:	ldur	x8, [x29, #-192]
  40ab7c:	mov	w9, #0x0                   	// #0
  40ab80:	str	w9, [sp, #32]
  40ab84:	cbz	x8, 40ab9c <extract_now+0x3ac>
  40ab88:	ldur	x8, [x29, #-192]
  40ab8c:	ldr	x8, [x8]
  40ab90:	cmp	x8, #0x0
  40ab94:	cset	w9, ne  // ne = any
  40ab98:	str	w9, [sp, #32]
  40ab9c:	ldr	w8, [sp, #32]
  40aba0:	tbnz	w8, #0, 40aba8 <extract_now+0x3b8>
  40aba4:	b	40b174 <extract_now+0x984>
  40aba8:	add	x3, sp, #0xe0
  40abac:	mov	x8, xzr
  40abb0:	str	x8, [sp, #224]
  40abb4:	add	x4, sp, #0xd8
  40abb8:	str	x8, [sp, #216]
  40abbc:	ldur	x8, [x29, #-192]
  40abc0:	ldr	x0, [x8]
  40abc4:	ldur	x1, [x29, #-16]
  40abc8:	mov	w9, wzr
  40abcc:	mov	w2, w9
  40abd0:	bl	404690 <chase_symlinks_and_opendir@plt>
  40abd4:	stur	w0, [x29, #-196]
  40abd8:	ldur	w9, [x29, #-196]
  40abdc:	cmp	w9, #0x0
  40abe0:	cset	w9, ge  // ge = tcont
  40abe4:	tbnz	w9, #0, 40ac74 <extract_now+0x484>
  40abe8:	mov	w8, #0x7                   	// #7
  40abec:	str	w8, [sp, #204]
  40abf0:	ldur	w8, [x29, #-196]
  40abf4:	str	w8, [sp, #200]
  40abf8:	str	wzr, [sp, #196]
  40abfc:	ldr	w0, [sp, #196]
  40ac00:	bl	4041e0 <log_get_max_level_realm@plt>
  40ac04:	ldr	w8, [sp, #204]
  40ac08:	and	w8, w8, #0x7
  40ac0c:	cmp	w0, w8
  40ac10:	b.lt	40ac4c <extract_now+0x45c>  // b.tstop
  40ac14:	ldr	w8, [sp, #196]
  40ac18:	ldr	w9, [sp, #204]
  40ac1c:	orr	w0, w9, w8, lsl #10
  40ac20:	ldr	w1, [sp, #200]
  40ac24:	ldur	x10, [x29, #-192]
  40ac28:	ldr	x6, [x10]
  40ac2c:	ldr	x2, [sp, #56]
  40ac30:	mov	w3, #0x122                 	// #290
  40ac34:	ldr	x4, [sp, #48]
  40ac38:	adrp	x5, 413000 <manager_connect_bus+0x4e4>
  40ac3c:	add	x5, x5, #0xff5
  40ac40:	bl	4041f0 <log_internal_realm@plt>
  40ac44:	str	w0, [sp, #28]
  40ac48:	b	40ac60 <extract_now+0x470>
  40ac4c:	ldr	w0, [sp, #200]
  40ac50:	bl	404200 <abs@plt>
  40ac54:	mov	w8, wzr
  40ac58:	subs	w8, w8, w0, uxtb
  40ac5c:	str	w8, [sp, #28]
  40ac60:	ldr	w8, [sp, #28]
  40ac64:	str	w8, [sp, #192]
  40ac68:	mov	w8, #0x6                   	// #6
  40ac6c:	stur	w8, [x29, #-232]
  40ac70:	b	40b134 <extract_now+0x944>
  40ac74:	bl	404270 <__errno_location@plt>
  40ac78:	str	wzr, [x0]
  40ac7c:	ldr	x0, [sp, #216]
  40ac80:	bl	4044d0 <readdir64@plt>
  40ac84:	str	x0, [sp, #208]
  40ac88:	ldr	x8, [sp, #208]
  40ac8c:	cbnz	x8, 40ad38 <extract_now+0x548>
  40ac90:	bl	404270 <__errno_location@plt>
  40ac94:	ldr	w8, [x0]
  40ac98:	cmp	w8, #0x0
  40ac9c:	cset	w8, le
  40aca0:	tbnz	w8, #0, 40ad34 <extract_now+0x544>
  40aca4:	mov	w8, #0x7                   	// #7
  40aca8:	str	w8, [sp, #188]
  40acac:	bl	404270 <__errno_location@plt>
  40acb0:	ldr	w8, [x0]
  40acb4:	str	w8, [sp, #184]
  40acb8:	str	wzr, [sp, #180]
  40acbc:	ldr	w0, [sp, #180]
  40acc0:	bl	4041e0 <log_get_max_level_realm@plt>
  40acc4:	ldr	w8, [sp, #188]
  40acc8:	and	w8, w8, #0x7
  40accc:	cmp	w0, w8
  40acd0:	b.lt	40ad04 <extract_now+0x514>  // b.tstop
  40acd4:	ldr	w8, [sp, #180]
  40acd8:	ldr	w9, [sp, #188]
  40acdc:	orr	w0, w9, w8, lsl #10
  40ace0:	ldr	w1, [sp, #184]
  40ace4:	ldr	x2, [sp, #56]
  40ace8:	mov	w3, #0x126                 	// #294
  40acec:	ldr	x4, [sp, #48]
  40acf0:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40acf4:	add	x5, x5, #0x21
  40acf8:	bl	4041f0 <log_internal_realm@plt>
  40acfc:	str	w0, [sp, #24]
  40ad00:	b	40ad18 <extract_now+0x528>
  40ad04:	ldr	w0, [sp, #184]
  40ad08:	bl	404200 <abs@plt>
  40ad0c:	mov	w8, wzr
  40ad10:	subs	w8, w8, w0, uxtb
  40ad14:	str	w8, [sp, #24]
  40ad18:	ldr	w8, [sp, #24]
  40ad1c:	str	w8, [sp, #176]
  40ad20:	ldr	w8, [sp, #176]
  40ad24:	stur	w8, [x29, #-4]
  40ad28:	mov	w8, #0x1                   	// #1
  40ad2c:	stur	w8, [x29, #-232]
  40ad30:	b	40b134 <extract_now+0x944>
  40ad34:	b	40b130 <extract_now+0x940>
  40ad38:	ldr	x8, [sp, #208]
  40ad3c:	add	x0, x8, #0x13
  40ad40:	bl	4044e0 <hidden_or_backup_file@plt>
  40ad44:	tbnz	w0, #0, 40ad4c <extract_now+0x55c>
  40ad48:	b	40ad50 <extract_now+0x560>
  40ad4c:	b	40b118 <extract_now+0x928>
  40ad50:	mov	x8, xzr
  40ad54:	str	x8, [sp, #168]
  40ad58:	mov	w9, #0xffffffff            	// #-1
  40ad5c:	str	w9, [sp, #164]
  40ad60:	ldr	x8, [sp, #208]
  40ad64:	add	x0, x8, #0x13
  40ad68:	mov	w1, #0x7                   	// #7
  40ad6c:	bl	404340 <unit_name_is_valid@plt>
  40ad70:	tbnz	w0, #0, 40ad80 <extract_now+0x590>
  40ad74:	mov	w8, #0x9                   	// #9
  40ad78:	stur	w8, [x29, #-232]
  40ad7c:	b	40b0e8 <extract_now+0x8f8>
  40ad80:	ldr	x8, [sp, #208]
  40ad84:	add	x0, x8, #0x13
  40ad88:	ldur	x1, [x29, #-24]
  40ad8c:	bl	40ba70 <unit_match>
  40ad90:	tbnz	w0, #0, 40ada0 <extract_now+0x5b0>
  40ad94:	mov	w8, #0x9                   	// #9
  40ad98:	stur	w8, [x29, #-232]
  40ad9c:	b	40b0e8 <extract_now+0x8f8>
  40ada0:	ldur	x0, [x29, #-56]
  40ada4:	ldr	x8, [sp, #208]
  40ada8:	add	x1, x8, #0x13
  40adac:	bl	40bb9c <hashmap_get>
  40adb0:	cbz	x0, 40adc0 <extract_now+0x5d0>
  40adb4:	mov	w8, #0x9                   	// #9
  40adb8:	stur	w8, [x29, #-232]
  40adbc:	b	40b0e8 <extract_now+0x8f8>
  40adc0:	ldr	x0, [sp, #216]
  40adc4:	ldr	x1, [sp, #208]
  40adc8:	bl	4044f0 <dirent_ensure_type@plt>
  40adcc:	mov	w8, #0x0                   	// #0
  40add0:	strb	w8, [sp, #163]
  40add4:	ldr	x9, [sp, #208]
  40add8:	ldrb	w8, [x9, #18]
  40addc:	cmp	w8, #0x8
  40ade0:	str	w8, [sp, #20]
  40ade4:	b.eq	40ae04 <extract_now+0x614>  // b.none
  40ade8:	b	40adec <extract_now+0x5fc>
  40adec:	ldr	w8, [sp, #20]
  40adf0:	cmp	w8, #0xa
  40adf4:	cset	w9, eq  // eq = none
  40adf8:	eor	w9, w9, #0x1
  40adfc:	tbnz	w9, #0, 40ae10 <extract_now+0x620>
  40ae00:	b	40ae04 <extract_now+0x614>
  40ae04:	mov	w8, #0x1                   	// #1
  40ae08:	strb	w8, [sp, #163]
  40ae0c:	b	40ae10 <extract_now+0x620>
  40ae10:	ldrb	w8, [sp, #163]
  40ae14:	and	w8, w8, #0x1
  40ae18:	strb	w8, [sp, #162]
  40ae1c:	ldrb	w8, [sp, #162]
  40ae20:	tbnz	w8, #0, 40ae30 <extract_now+0x640>
  40ae24:	mov	w8, #0x9                   	// #9
  40ae28:	stur	w8, [x29, #-232]
  40ae2c:	b	40b0e8 <extract_now+0x8f8>
  40ae30:	ldr	x0, [sp, #216]
  40ae34:	bl	404570 <dirfd@plt>
  40ae38:	ldr	x8, [sp, #208]
  40ae3c:	add	x1, x8, #0x13
  40ae40:	mov	w2, #0x80000               	// #524288
  40ae44:	bl	4045d0 <openat64@plt>
  40ae48:	str	w0, [sp, #164]
  40ae4c:	ldr	w9, [sp, #164]
  40ae50:	cmp	w9, #0x0
  40ae54:	cset	w9, ge  // ge = tcont
  40ae58:	tbnz	w9, #0, 40aeec <extract_now+0x6fc>
  40ae5c:	mov	w8, #0x7                   	// #7
  40ae60:	str	w8, [sp, #156]
  40ae64:	bl	404270 <__errno_location@plt>
  40ae68:	ldr	w8, [x0]
  40ae6c:	str	w8, [sp, #152]
  40ae70:	str	wzr, [sp, #148]
  40ae74:	ldr	w0, [sp, #148]
  40ae78:	bl	4041e0 <log_get_max_level_realm@plt>
  40ae7c:	ldr	w8, [sp, #156]
  40ae80:	and	w8, w8, #0x7
  40ae84:	cmp	w0, w8
  40ae88:	b.lt	40aec4 <extract_now+0x6d4>  // b.tstop
  40ae8c:	ldr	w8, [sp, #148]
  40ae90:	ldr	w9, [sp, #156]
  40ae94:	orr	w0, w9, w8, lsl #10
  40ae98:	ldr	w1, [sp, #152]
  40ae9c:	ldr	x10, [sp, #208]
  40aea0:	add	x6, x10, #0x13
  40aea4:	ldr	x2, [sp, #56]
  40aea8:	mov	w3, #0x13a                 	// #314
  40aeac:	ldr	x4, [sp, #48]
  40aeb0:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40aeb4:	add	x5, x5, #0x3e
  40aeb8:	bl	4041f0 <log_internal_realm@plt>
  40aebc:	str	w0, [sp, #16]
  40aec0:	b	40aed8 <extract_now+0x6e8>
  40aec4:	ldr	w0, [sp, #152]
  40aec8:	bl	404200 <abs@plt>
  40aecc:	mov	w8, wzr
  40aed0:	subs	w8, w8, w0, uxtb
  40aed4:	str	w8, [sp, #16]
  40aed8:	ldr	w8, [sp, #16]
  40aedc:	str	w8, [sp, #144]
  40aee0:	mov	w8, #0x9                   	// #9
  40aee4:	stur	w8, [x29, #-232]
  40aee8:	b	40b0e8 <extract_now+0x8f8>
  40aeec:	ldur	w8, [x29, #-28]
  40aef0:	cmp	w8, #0x0
  40aef4:	cset	w8, lt  // lt = tstop
  40aef8:	tbnz	w8, #0, 40afb0 <extract_now+0x7c0>
  40aefc:	ldur	w0, [x29, #-28]
  40af00:	ldr	x8, [sp, #208]
  40af04:	add	x1, x8, #0x13
  40af08:	ldr	w2, [sp, #164]
  40af0c:	bl	40b7f0 <send_item>
  40af10:	stur	w0, [x29, #-196]
  40af14:	ldur	w9, [x29, #-196]
  40af18:	cmp	w9, #0x0
  40af1c:	cset	w9, ge  // ge = tcont
  40af20:	tbnz	w9, #0, 40afb0 <extract_now+0x7c0>
  40af24:	mov	w8, #0x7                   	// #7
  40af28:	str	w8, [sp, #140]
  40af2c:	ldur	w8, [x29, #-196]
  40af30:	str	w8, [sp, #136]
  40af34:	str	wzr, [sp, #132]
  40af38:	ldr	w0, [sp, #132]
  40af3c:	bl	4041e0 <log_get_max_level_realm@plt>
  40af40:	ldr	w8, [sp, #140]
  40af44:	and	w8, w8, #0x7
  40af48:	cmp	w0, w8
  40af4c:	b.lt	40af80 <extract_now+0x790>  // b.tstop
  40af50:	ldr	w8, [sp, #132]
  40af54:	ldr	w9, [sp, #140]
  40af58:	orr	w0, w9, w8, lsl #10
  40af5c:	ldr	w1, [sp, #136]
  40af60:	ldr	x2, [sp, #56]
  40af64:	mov	w3, #0x141                 	// #321
  40af68:	ldr	x4, [sp, #48]
  40af6c:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40af70:	add	x5, x5, #0x6a
  40af74:	bl	4041f0 <log_internal_realm@plt>
  40af78:	str	w0, [sp, #12]
  40af7c:	b	40af94 <extract_now+0x7a4>
  40af80:	ldr	w0, [sp, #136]
  40af84:	bl	404200 <abs@plt>
  40af88:	mov	w8, wzr
  40af8c:	subs	w8, w8, w0, uxtb
  40af90:	str	w8, [sp, #12]
  40af94:	ldr	w8, [sp, #12]
  40af98:	str	w8, [sp, #128]
  40af9c:	ldr	w8, [sp, #128]
  40afa0:	stur	w8, [x29, #-4]
  40afa4:	mov	w8, #0x1                   	// #1
  40afa8:	stur	w8, [x29, #-232]
  40afac:	b	40b0e8 <extract_now+0x8f8>
  40afb0:	ldr	x8, [sp, #208]
  40afb4:	add	x0, x8, #0x13
  40afb8:	ldr	w1, [sp, #164]
  40afbc:	bl	40b740 <portable_metadata_new>
  40afc0:	str	x0, [sp, #168]
  40afc4:	ldr	x8, [sp, #168]
  40afc8:	cbnz	x8, 40afe0 <extract_now+0x7f0>
  40afcc:	mov	w8, #0xfffffff4            	// #-12
  40afd0:	stur	w8, [x29, #-4]
  40afd4:	mov	w8, #0x1                   	// #1
  40afd8:	stur	w8, [x29, #-232]
  40afdc:	b	40b0e8 <extract_now+0x8f8>
  40afe0:	mov	w8, #0xffffffff            	// #-1
  40afe4:	str	w8, [sp, #164]
  40afe8:	ldr	x0, [sp, #224]
  40afec:	ldr	x9, [sp, #208]
  40aff0:	add	x1, x9, #0x13
  40aff4:	mov	x9, #0xffffffffffffffff    	// #-1
  40aff8:	mov	x2, x9
  40affc:	bl	4046a0 <path_join_internal@plt>
  40b000:	ldr	x9, [sp, #168]
  40b004:	str	x0, [x9, #8]
  40b008:	ldr	x9, [sp, #168]
  40b00c:	ldr	x9, [x9, #8]
  40b010:	cbnz	x9, 40b028 <extract_now+0x838>
  40b014:	mov	w8, #0xfffffff4            	// #-12
  40b018:	stur	w8, [x29, #-4]
  40b01c:	mov	w8, #0x1                   	// #1
  40b020:	stur	w8, [x29, #-232]
  40b024:	b	40b0e8 <extract_now+0x8f8>
  40b028:	ldur	x0, [x29, #-56]
  40b02c:	ldr	x8, [sp, #168]
  40b030:	add	x1, x8, #0x10
  40b034:	ldr	x2, [sp, #168]
  40b038:	bl	4042b0 <hashmap_put@plt>
  40b03c:	stur	w0, [x29, #-196]
  40b040:	ldur	w9, [x29, #-196]
  40b044:	cmp	w9, #0x0
  40b048:	cset	w9, ge  // ge = tcont
  40b04c:	tbnz	w9, #0, 40b0dc <extract_now+0x8ec>
  40b050:	mov	w8, #0x7                   	// #7
  40b054:	str	w8, [sp, #124]
  40b058:	ldur	w8, [x29, #-196]
  40b05c:	str	w8, [sp, #120]
  40b060:	str	wzr, [sp, #116]
  40b064:	ldr	w0, [sp, #116]
  40b068:	bl	4041e0 <log_get_max_level_realm@plt>
  40b06c:	ldr	w8, [sp, #124]
  40b070:	and	w8, w8, #0x7
  40b074:	cmp	w0, w8
  40b078:	b.lt	40b0ac <extract_now+0x8bc>  // b.tstop
  40b07c:	ldr	w8, [sp, #116]
  40b080:	ldr	w9, [sp, #124]
  40b084:	orr	w0, w9, w8, lsl #10
  40b088:	ldr	w1, [sp, #120]
  40b08c:	ldr	x2, [sp, #56]
  40b090:	mov	w3, #0x14f                 	// #335
  40b094:	ldr	x4, [sp, #48]
  40b098:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40b09c:	add	x5, x5, #0x95
  40b0a0:	bl	4041f0 <log_internal_realm@plt>
  40b0a4:	str	w0, [sp, #8]
  40b0a8:	b	40b0c0 <extract_now+0x8d0>
  40b0ac:	ldr	w0, [sp, #120]
  40b0b0:	bl	404200 <abs@plt>
  40b0b4:	mov	w8, wzr
  40b0b8:	subs	w8, w8, w0, uxtb
  40b0bc:	str	w8, [sp, #8]
  40b0c0:	ldr	w8, [sp, #8]
  40b0c4:	str	w8, [sp, #112]
  40b0c8:	ldr	w8, [sp, #112]
  40b0cc:	stur	w8, [x29, #-4]
  40b0d0:	mov	w8, #0x1                   	// #1
  40b0d4:	stur	w8, [x29, #-232]
  40b0d8:	b	40b0e8 <extract_now+0x8f8>
  40b0dc:	mov	x8, xzr
  40b0e0:	str	x8, [sp, #168]
  40b0e4:	stur	wzr, [x29, #-232]
  40b0e8:	add	x0, sp, #0xa4
  40b0ec:	bl	40b374 <closep>
  40b0f0:	add	x0, sp, #0xa8
  40b0f4:	bl	40a788 <portable_metadata_unrefp>
  40b0f8:	ldur	w8, [x29, #-232]
  40b0fc:	str	w8, [sp, #4]
  40b100:	cbz	w8, 40b118 <extract_now+0x928>
  40b104:	b	40b108 <extract_now+0x918>
  40b108:	ldr	w8, [sp, #4]
  40b10c:	cmp	w8, #0x9
  40b110:	b.eq	40b118 <extract_now+0x928>  // b.none
  40b114:	b	40b134 <extract_now+0x944>
  40b118:	bl	404270 <__errno_location@plt>
  40b11c:	str	wzr, [x0]
  40b120:	ldr	x0, [sp, #216]
  40b124:	bl	4044d0 <readdir64@plt>
  40b128:	str	x0, [sp, #208]
  40b12c:	b	40ac88 <extract_now+0x498>
  40b130:	stur	wzr, [x29, #-232]
  40b134:	add	x0, sp, #0xd8
  40b138:	bl	408a80 <closedirp>
  40b13c:	add	x0, sp, #0xe0
  40b140:	bl	405118 <freep>
  40b144:	ldur	w8, [x29, #-232]
  40b148:	str	w8, [sp]
  40b14c:	cbz	w8, 40b164 <extract_now+0x974>
  40b150:	b	40b154 <extract_now+0x964>
  40b154:	ldr	w8, [sp]
  40b158:	cmp	w8, #0x6
  40b15c:	b.eq	40b164 <extract_now+0x974>  // b.none
  40b160:	b	40b1d8 <extract_now+0x9e8>
  40b164:	ldur	x8, [x29, #-192]
  40b168:	add	x8, x8, #0x8
  40b16c:	stur	x8, [x29, #-192]
  40b170:	b	40ab78 <extract_now+0x388>
  40b174:	ldur	x8, [x29, #-40]
  40b178:	cbz	x8, 40b1a0 <extract_now+0x9b0>
  40b17c:	ldur	x8, [x29, #-64]
  40b180:	str	x8, [sp, #104]
  40b184:	mov	x8, xzr
  40b188:	stur	x8, [x29, #-64]
  40b18c:	ldr	x8, [sp, #104]
  40b190:	str	x8, [sp, #96]
  40b194:	ldr	x8, [sp, #96]
  40b198:	ldur	x9, [x29, #-40]
  40b19c:	str	x8, [x9]
  40b1a0:	ldur	x8, [x29, #-48]
  40b1a4:	cbz	x8, 40b1cc <extract_now+0x9dc>
  40b1a8:	ldur	x8, [x29, #-56]
  40b1ac:	str	x8, [sp, #88]
  40b1b0:	mov	x8, xzr
  40b1b4:	stur	x8, [x29, #-56]
  40b1b8:	ldr	x8, [sp, #88]
  40b1bc:	str	x8, [sp, #80]
  40b1c0:	ldr	x8, [sp, #80]
  40b1c4:	ldur	x9, [x29, #-48]
  40b1c8:	str	x8, [x9]
  40b1cc:	stur	wzr, [x29, #-4]
  40b1d0:	mov	w8, #0x1                   	// #1
  40b1d4:	stur	w8, [x29, #-232]
  40b1d8:	sub	x0, x29, #0xb8
  40b1dc:	bl	405118 <freep>
  40b1e0:	sub	x0, x29, #0xac
  40b1e4:	bl	40b374 <closep>
  40b1e8:	sub	x0, x29, #0xa8
  40b1ec:	bl	404330 <lookup_paths_free@plt>
  40b1f0:	sub	x0, x29, #0x40
  40b1f4:	bl	40a788 <portable_metadata_unrefp>
  40b1f8:	sub	x0, x29, #0x38
  40b1fc:	bl	406478 <hashmap_freep>
  40b200:	ldur	w0, [x29, #-4]
  40b204:	add	sp, sp, #0x1f0
  40b208:	ldr	x28, [sp, #16]
  40b20c:	ldp	x29, x30, [sp], #32
  40b210:	ret

000000000040b214 <dissected_image_unrefp>:
  40b214:	sub	sp, sp, #0x20
  40b218:	stp	x29, x30, [sp, #16]
  40b21c:	add	x29, sp, #0x10
  40b220:	str	x0, [sp, #8]
  40b224:	ldr	x8, [sp, #8]
  40b228:	ldr	x8, [x8]
  40b22c:	cbz	x8, 40b23c <dissected_image_unrefp+0x28>
  40b230:	ldr	x8, [sp, #8]
  40b234:	ldr	x0, [x8]
  40b238:	bl	4046b0 <dissected_image_unref@plt>
  40b23c:	ldp	x29, x30, [sp, #16]
  40b240:	add	sp, sp, #0x20
  40b244:	ret

000000000040b248 <rmdir_and_freep>:
  40b248:	sub	sp, sp, #0x20
  40b24c:	stp	x29, x30, [sp, #16]
  40b250:	add	x29, sp, #0x10
  40b254:	str	x0, [sp, #8]
  40b258:	ldr	x8, [sp, #8]
  40b25c:	ldr	x8, [x8]
  40b260:	cbz	x8, 40b270 <rmdir_and_freep+0x28>
  40b264:	ldr	x8, [sp, #8]
  40b268:	ldr	x0, [x8]
  40b26c:	bl	40bd28 <rmdir_and_free>
  40b270:	ldp	x29, x30, [sp, #16]
  40b274:	add	sp, sp, #0x20
  40b278:	ret

000000000040b27c <close_pairp>:
  40b27c:	sub	sp, sp, #0x20
  40b280:	stp	x29, x30, [sp, #16]
  40b284:	add	x29, sp, #0x10
  40b288:	str	x0, [sp, #8]
  40b28c:	ldr	x0, [sp, #8]
  40b290:	bl	4046c0 <safe_close_pair@plt>
  40b294:	ldp	x29, x30, [sp, #16]
  40b298:	add	sp, sp, #0x20
  40b29c:	ret

000000000040b2a0 <block_signals_reset>:
  40b2a0:	sub	sp, sp, #0x20
  40b2a4:	stp	x29, x30, [sp, #16]
  40b2a8:	add	x29, sp, #0x10
  40b2ac:	adrp	x8, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40b2b0:	add	x8, x8, #0x147
  40b2b4:	add	x2, x8, #0x3
  40b2b8:	str	x0, [sp, #8]
  40b2bc:	str	x2, [sp]
  40b2c0:	ldr	x1, [sp, #8]
  40b2c4:	mov	w0, #0x2                   	// #2
  40b2c8:	mov	x8, xzr
  40b2cc:	mov	x2, x8
  40b2d0:	bl	4046d0 <sigprocmask@plt>
  40b2d4:	cmp	w0, #0x0
  40b2d8:	cset	w9, ge  // ge = tcont
  40b2dc:	mov	w10, #0x1                   	// #1
  40b2e0:	eor	w9, w9, #0x1
  40b2e4:	eor	w9, w9, w10
  40b2e8:	eor	w9, w9, w10
  40b2ec:	and	w9, w9, #0x1
  40b2f0:	mov	w1, w9
  40b2f4:	sxtw	x8, w1
  40b2f8:	cbz	x8, 40b320 <block_signals_reset+0x80>
  40b2fc:	mov	w8, wzr
  40b300:	mov	w0, w8
  40b304:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40b308:	add	x1, x1, #0x11f
  40b30c:	ldr	x2, [sp]
  40b310:	mov	w3, #0x18                  	// #24
  40b314:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40b318:	add	x4, x4, #0x162
  40b31c:	bl	404150 <log_assert_failed_realm@plt>
  40b320:	ldp	x29, x30, [sp, #16]
  40b324:	add	sp, sp, #0x20
  40b328:	ret

000000000040b32c <safe_fork>:
  40b32c:	sub	sp, sp, #0x30
  40b330:	stp	x29, x30, [sp, #32]
  40b334:	add	x29, sp, #0x20
  40b338:	mov	x8, xzr
  40b33c:	mov	x3, x8
  40b340:	stur	x0, [x29, #-8]
  40b344:	stur	w1, [x29, #-12]
  40b348:	str	x2, [sp, #8]
  40b34c:	ldur	x0, [x29, #-8]
  40b350:	ldur	w9, [x29, #-12]
  40b354:	ldr	x4, [sp, #8]
  40b358:	mov	x1, x3
  40b35c:	mov	x2, x8
  40b360:	mov	w3, w9
  40b364:	bl	4046e0 <safe_fork_full@plt>
  40b368:	ldp	x29, x30, [sp, #32]
  40b36c:	add	sp, sp, #0x30
  40b370:	ret

000000000040b374 <closep>:
  40b374:	sub	sp, sp, #0x20
  40b378:	stp	x29, x30, [sp, #16]
  40b37c:	add	x29, sp, #0x10
  40b380:	str	x0, [sp, #8]
  40b384:	ldr	x8, [sp, #8]
  40b388:	ldr	w0, [x8]
  40b38c:	bl	404130 <safe_close@plt>
  40b390:	ldp	x29, x30, [sp, #16]
  40b394:	add	sp, sp, #0x20
  40b398:	ret

000000000040b39c <recv_item>:
  40b39c:	stp	x29, x30, [sp, #-32]!
  40b3a0:	str	x28, [sp, #16]
  40b3a4:	mov	x29, sp
  40b3a8:	sub	sp, sp, #0x1, lsl #12
  40b3ac:	sub	sp, sp, #0xd0
  40b3b0:	sub	x8, x29, #0x30
  40b3b4:	adrp	x9, 413000 <manager_connect_bus+0x4e4>
  40b3b8:	add	x9, x9, #0x3f0
  40b3bc:	mov	x10, #0x18                  	// #24
  40b3c0:	mov	x11, #0x1001                	// #4097
  40b3c4:	mov	x12, xzr
  40b3c8:	mov	x13, #0x1                   	// #1
  40b3cc:	mov	w14, #0xffffffff            	// #-1
  40b3d0:	adrp	x15, 413000 <manager_connect_bus+0x4e4>
  40b3d4:	add	x15, x15, #0x4ee
  40b3d8:	add	x15, x15, #0x3
  40b3dc:	adrp	x16, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40b3e0:	add	x16, x16, #0x187
  40b3e4:	sub	x17, x29, #0x30
  40b3e8:	add	x18, sp, #0x9e
  40b3ec:	add	x3, sp, #0x88
  40b3f0:	add	x4, sp, #0x50
  40b3f4:	stur	w0, [x29, #-8]
  40b3f8:	str	x1, [x8, #32]
  40b3fc:	str	x2, [x8, #24]
  40b400:	ldr	q0, [x9]
  40b404:	str	q0, [x8]
  40b408:	ldr	x9, [x9, #16]
  40b40c:	str	x9, [x8, #16]
  40b410:	str	x18, [sp, #136]
  40b414:	str	x11, [sp, #144]
  40b418:	str	x12, [sp, #80]
  40b41c:	str	wzr, [sp, #88]
  40b420:	str	x3, [x4, #16]
  40b424:	str	x13, [sp, #104]
  40b428:	str	x17, [x4, #32]
  40b42c:	str	x10, [sp, #120]
  40b430:	str	wzr, [sp, #128]
  40b434:	str	w14, [sp, #68]
  40b438:	str	x8, [sp, #24]
  40b43c:	str	x15, [sp, #16]
  40b440:	str	x16, [sp, #8]
  40b444:	ldur	w8, [x29, #-8]
  40b448:	cmp	w8, #0x0
  40b44c:	cset	w8, ge  // ge = tcont
  40b450:	mov	w9, #0x1                   	// #1
  40b454:	eor	w8, w8, #0x1
  40b458:	eor	w8, w8, w9
  40b45c:	eor	w8, w8, w9
  40b460:	and	w8, w8, #0x1
  40b464:	mov	w0, w8
  40b468:	sxtw	x10, w0
  40b46c:	cbz	x10, 40b490 <recv_item+0xf4>
  40b470:	mov	w8, wzr
  40b474:	mov	w0, w8
  40b478:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40b47c:	add	x1, x1, #0xb7
  40b480:	ldr	x2, [sp, #16]
  40b484:	mov	w3, #0xbb                  	// #187
  40b488:	ldr	x4, [sp, #8]
  40b48c:	bl	404150 <log_assert_failed_realm@plt>
  40b490:	ldr	x8, [sp, #24]
  40b494:	ldr	x9, [x8, #32]
  40b498:	cmp	x9, #0x0
  40b49c:	cset	w10, ne  // ne = any
  40b4a0:	mov	w11, #0x1                   	// #1
  40b4a4:	eor	w10, w10, #0x1
  40b4a8:	eor	w10, w10, w11
  40b4ac:	eor	w10, w10, w11
  40b4b0:	and	w10, w10, #0x1
  40b4b4:	mov	w0, w10
  40b4b8:	sxtw	x9, w0
  40b4bc:	cbz	x9, 40b4e0 <recv_item+0x144>
  40b4c0:	mov	w8, wzr
  40b4c4:	mov	w0, w8
  40b4c8:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40b4cc:	add	x1, x1, #0x1aa
  40b4d0:	ldr	x2, [sp, #16]
  40b4d4:	mov	w3, #0xbc                  	// #188
  40b4d8:	ldr	x4, [sp, #8]
  40b4dc:	bl	404150 <log_assert_failed_realm@plt>
  40b4e0:	ldr	x8, [sp, #24]
  40b4e4:	ldr	x9, [x8, #24]
  40b4e8:	cmp	x9, #0x0
  40b4ec:	cset	w10, ne  // ne = any
  40b4f0:	mov	w11, #0x1                   	// #1
  40b4f4:	eor	w10, w10, #0x1
  40b4f8:	eor	w10, w10, w11
  40b4fc:	eor	w10, w10, w11
  40b500:	and	w10, w10, #0x1
  40b504:	mov	w0, w10
  40b508:	sxtw	x9, w0
  40b50c:	cbz	x9, 40b530 <recv_item+0x194>
  40b510:	mov	w8, wzr
  40b514:	mov	w0, w8
  40b518:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40b51c:	add	x1, x1, #0x1b3
  40b520:	ldr	x2, [sp, #16]
  40b524:	mov	w3, #0xbd                  	// #189
  40b528:	ldr	x4, [sp, #8]
  40b52c:	bl	404150 <log_assert_failed_realm@plt>
  40b530:	ldur	w0, [x29, #-8]
  40b534:	add	x1, sp, #0x50
  40b538:	mov	w2, #0x40000000            	// #1073741824
  40b53c:	bl	4046f0 <recvmsg@plt>
  40b540:	str	x0, [sp, #48]
  40b544:	ldr	x8, [sp, #48]
  40b548:	cmp	x8, #0x0
  40b54c:	cset	w9, ge  // ge = tcont
  40b550:	tbnz	w9, #0, 40b574 <recv_item+0x1d8>
  40b554:	bl	404270 <__errno_location@plt>
  40b558:	ldr	w8, [x0]
  40b55c:	mov	w9, wzr
  40b560:	subs	w8, w9, w8
  40b564:	stur	w8, [x29, #-4]
  40b568:	mov	w8, #0x1                   	// #1
  40b56c:	str	w8, [sp, #44]
  40b570:	b	40b6e0 <recv_item+0x344>
  40b574:	ldr	x8, [sp, #120]
  40b578:	cmp	x8, #0x10
  40b57c:	b.cc	40b590 <recv_item+0x1f4>  // b.lo, b.ul, b.last
  40b580:	add	x8, sp, #0x50
  40b584:	ldr	x8, [x8, #32]
  40b588:	str	x8, [sp]
  40b58c:	b	40b598 <recv_item+0x1fc>
  40b590:	mov	x8, xzr
  40b594:	str	x8, [sp]
  40b598:	ldr	x8, [sp]
  40b59c:	str	x8, [sp, #72]
  40b5a0:	ldr	x8, [sp, #72]
  40b5a4:	cbz	x8, 40b664 <recv_item+0x2c8>
  40b5a8:	ldr	x8, [sp, #72]
  40b5ac:	ldr	w9, [x8, #8]
  40b5b0:	cmp	w9, #0x1
  40b5b4:	b.ne	40b650 <recv_item+0x2b4>  // b.any
  40b5b8:	ldr	x8, [sp, #72]
  40b5bc:	ldr	w9, [x8, #12]
  40b5c0:	cmp	w9, #0x1
  40b5c4:	b.ne	40b650 <recv_item+0x2b4>  // b.any
  40b5c8:	ldr	x8, [sp, #72]
  40b5cc:	ldr	x8, [x8]
  40b5d0:	cmp	x8, #0x14
  40b5d4:	b.ne	40b634 <recv_item+0x298>  // b.any
  40b5d8:	ldr	w8, [sp, #68]
  40b5dc:	cmp	w8, #0x0
  40b5e0:	cset	w8, lt  // lt = tstop
  40b5e4:	mov	w9, #0x1                   	// #1
  40b5e8:	eor	w8, w8, #0x1
  40b5ec:	eor	w8, w8, w9
  40b5f0:	eor	w8, w8, w9
  40b5f4:	and	w8, w8, #0x1
  40b5f8:	mov	w0, w8
  40b5fc:	sxtw	x10, w0
  40b600:	cbz	x10, 40b624 <recv_item+0x288>
  40b604:	mov	w8, wzr
  40b608:	mov	w0, w8
  40b60c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40b610:	add	x1, x1, #0x1ba
  40b614:	ldr	x2, [sp, #16]
  40b618:	mov	w3, #0xc8                  	// #200
  40b61c:	ldr	x4, [sp, #8]
  40b620:	bl	404150 <log_assert_failed_realm@plt>
  40b624:	ldr	x8, [sp, #72]
  40b628:	ldr	w9, [x8, #16]
  40b62c:	str	w9, [sp, #68]
  40b630:	b	40b664 <recv_item+0x2c8>
  40b634:	add	x0, sp, #0x50
  40b638:	bl	404700 <cmsg_close_all@plt>
  40b63c:	mov	w8, #0xfffffffb            	// #-5
  40b640:	stur	w8, [x29, #-4]
  40b644:	mov	w8, #0x1                   	// #1
  40b648:	str	w8, [sp, #44]
  40b64c:	b	40b6e0 <recv_item+0x344>
  40b650:	ldr	x1, [sp, #72]
  40b654:	add	x0, sp, #0x50
  40b658:	bl	404710 <__cmsg_nxthdr@plt>
  40b65c:	str	x0, [sp, #72]
  40b660:	b	40b5a0 <recv_item+0x204>
  40b664:	ldr	x8, [sp, #48]
  40b668:	add	x9, sp, #0x9e
  40b66c:	add	x8, x9, x8
  40b670:	mov	w10, #0x0                   	// #0
  40b674:	strb	w10, [x8]
  40b678:	mov	x0, x9
  40b67c:	bl	404630 <strdup@plt>
  40b680:	str	x0, [sp, #56]
  40b684:	ldr	x8, [sp, #56]
  40b688:	cbnz	x8, 40b6a0 <recv_item+0x304>
  40b68c:	mov	w8, #0xfffffff4            	// #-12
  40b690:	stur	w8, [x29, #-4]
  40b694:	mov	w8, #0x1                   	// #1
  40b698:	str	w8, [sp, #44]
  40b69c:	b	40b6e0 <recv_item+0x344>
  40b6a0:	ldr	x8, [sp, #56]
  40b6a4:	ldr	x9, [sp, #24]
  40b6a8:	ldr	x10, [x9, #32]
  40b6ac:	str	x8, [x10]
  40b6b0:	ldr	w11, [sp, #68]
  40b6b4:	str	w11, [sp, #40]
  40b6b8:	mov	w11, #0xffffffff            	// #-1
  40b6bc:	str	w11, [sp, #68]
  40b6c0:	ldr	w11, [sp, #40]
  40b6c4:	str	w11, [sp, #36]
  40b6c8:	ldr	w11, [sp, #36]
  40b6cc:	ldr	x8, [x9, #24]
  40b6d0:	str	w11, [x8]
  40b6d4:	stur	wzr, [x29, #-4]
  40b6d8:	mov	w11, #0x1                   	// #1
  40b6dc:	str	w11, [sp, #44]
  40b6e0:	add	x0, sp, #0x44
  40b6e4:	bl	40b374 <closep>
  40b6e8:	ldur	w0, [x29, #-4]
  40b6ec:	add	sp, sp, #0x1, lsl #12
  40b6f0:	add	sp, sp, #0xd0
  40b6f4:	ldr	x28, [sp, #16]
  40b6f8:	ldp	x29, x30, [sp], #32
  40b6fc:	ret

000000000040b700 <isempty>:
  40b700:	sub	sp, sp, #0x10
  40b704:	str	x0, [sp, #8]
  40b708:	ldr	x8, [sp, #8]
  40b70c:	mov	w9, #0x1                   	// #1
  40b710:	str	w9, [sp, #4]
  40b714:	cbz	x8, 40b730 <isempty+0x30>
  40b718:	ldr	x8, [sp, #8]
  40b71c:	ldrb	w9, [x8]
  40b720:	cmp	w9, #0x0
  40b724:	cset	w9, ne  // ne = any
  40b728:	eor	w9, w9, #0x1
  40b72c:	str	w9, [sp, #4]
  40b730:	ldr	w8, [sp, #4]
  40b734:	and	w0, w8, #0x1
  40b738:	add	sp, sp, #0x10
  40b73c:	ret

000000000040b740 <portable_metadata_new>:
  40b740:	sub	sp, sp, #0x40
  40b744:	stp	x29, x30, [sp, #48]
  40b748:	add	x29, sp, #0x30
  40b74c:	mov	x8, #0x1                   	// #1
  40b750:	stur	x0, [x29, #-16]
  40b754:	stur	w1, [x29, #-20]
  40b758:	ldur	x0, [x29, #-16]
  40b75c:	str	x8, [sp, #8]
  40b760:	bl	4043d0 <strlen@plt>
  40b764:	add	x8, x0, #0x10
  40b768:	add	x1, x8, #0x1
  40b76c:	ldr	x0, [sp, #8]
  40b770:	bl	404720 <calloc@plt>
  40b774:	str	x0, [sp, #16]
  40b778:	ldr	x8, [sp, #16]
  40b77c:	cbnz	x8, 40b78c <portable_metadata_new+0x4c>
  40b780:	mov	x8, xzr
  40b784:	stur	x8, [x29, #-8]
  40b788:	b	40b7b0 <portable_metadata_new+0x70>
  40b78c:	ldr	x8, [sp, #16]
  40b790:	add	x0, x8, #0x10
  40b794:	ldur	x1, [x29, #-16]
  40b798:	bl	404430 <strcpy@plt>
  40b79c:	ldur	w9, [x29, #-20]
  40b7a0:	ldr	x8, [sp, #16]
  40b7a4:	str	w9, [x8]
  40b7a8:	ldr	x8, [sp, #16]
  40b7ac:	stur	x8, [x29, #-8]
  40b7b0:	ldur	x0, [x29, #-8]
  40b7b4:	ldp	x29, x30, [sp, #48]
  40b7b8:	add	sp, sp, #0x40
  40b7bc:	ret

000000000040b7c0 <hashmap_isempty>:
  40b7c0:	sub	sp, sp, #0x20
  40b7c4:	stp	x29, x30, [sp, #16]
  40b7c8:	add	x29, sp, #0x10
  40b7cc:	str	x0, [sp, #8]
  40b7d0:	ldr	x0, [sp, #8]
  40b7d4:	bl	4051bc <hashmap_size>
  40b7d8:	cmp	w0, #0x0
  40b7dc:	cset	w8, eq  // eq = none
  40b7e0:	and	w0, w8, #0x1
  40b7e4:	ldp	x29, x30, [sp, #16]
  40b7e8:	add	sp, sp, #0x20
  40b7ec:	ret

000000000040b7f0 <send_item>:
  40b7f0:	sub	sp, sp, #0xd0
  40b7f4:	stp	x29, x30, [sp, #192]
  40b7f8:	add	x29, sp, #0xc0
  40b7fc:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  40b800:	add	x8, x8, #0x390
  40b804:	mov	x9, #0x18                  	// #24
  40b808:	mov	x10, xzr
  40b80c:	mov	x11, #0x1                   	// #1
  40b810:	mov	w12, #0xffffffff            	// #-1
  40b814:	adrp	x13, 413000 <manager_connect_bus+0x4e4>
  40b818:	add	x13, x13, #0x4ee
  40b81c:	add	x13, x13, #0x3
  40b820:	adrp	x14, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40b824:	add	x14, x14, #0xc6
  40b828:	sub	x15, x29, #0x30
  40b82c:	sub	x16, x29, #0x40
  40b830:	add	x17, sp, #0x48
  40b834:	stur	w0, [x29, #-8]
  40b838:	stur	x1, [x29, #-16]
  40b83c:	stur	w2, [x29, #-20]
  40b840:	ldr	q0, [x8]
  40b844:	stur	q0, [x29, #-48]
  40b848:	ldr	x8, [x8, #16]
  40b84c:	stur	x8, [x29, #-32]
  40b850:	str	x10, [sp, #72]
  40b854:	str	wzr, [sp, #80]
  40b858:	str	x16, [x17, #16]
  40b85c:	str	x11, [sp, #96]
  40b860:	str	x15, [x17, #32]
  40b864:	str	x9, [sp, #112]
  40b868:	str	wzr, [sp, #120]
  40b86c:	str	w12, [sp, #60]
  40b870:	str	x13, [sp, #32]
  40b874:	str	x14, [sp, #24]
  40b878:	ldur	w8, [x29, #-8]
  40b87c:	cmp	w8, #0x0
  40b880:	cset	w8, ge  // ge = tcont
  40b884:	mov	w9, #0x1                   	// #1
  40b888:	eor	w8, w8, #0x1
  40b88c:	eor	w8, w8, w9
  40b890:	eor	w8, w8, w9
  40b894:	and	w8, w8, #0x1
  40b898:	mov	w0, w8
  40b89c:	sxtw	x10, w0
  40b8a0:	cbz	x10, 40b8c4 <send_item+0xd4>
  40b8a4:	mov	w8, wzr
  40b8a8:	mov	w0, w8
  40b8ac:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40b8b0:	add	x1, x1, #0xb7
  40b8b4:	ldr	x2, [sp, #32]
  40b8b8:	mov	w3, #0x8e                  	// #142
  40b8bc:	ldr	x4, [sp, #24]
  40b8c0:	bl	404150 <log_assert_failed_realm@plt>
  40b8c4:	ldur	x8, [x29, #-16]
  40b8c8:	cmp	x8, #0x0
  40b8cc:	cset	w9, ne  // ne = any
  40b8d0:	mov	w10, #0x1                   	// #1
  40b8d4:	eor	w9, w9, #0x1
  40b8d8:	eor	w9, w9, w10
  40b8dc:	eor	w9, w9, w10
  40b8e0:	and	w9, w9, #0x1
  40b8e4:	mov	w0, w9
  40b8e8:	sxtw	x8, w0
  40b8ec:	cbz	x8, 40b910 <send_item+0x120>
  40b8f0:	mov	w8, wzr
  40b8f4:	mov	w0, w8
  40b8f8:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40b8fc:	add	x1, x1, #0xec
  40b900:	ldr	x2, [sp, #32]
  40b904:	mov	w3, #0x8f                  	// #143
  40b908:	ldr	x4, [sp, #24]
  40b90c:	bl	404150 <log_assert_failed_realm@plt>
  40b910:	ldur	w8, [x29, #-20]
  40b914:	cmp	w8, #0x0
  40b918:	cset	w8, ge  // ge = tcont
  40b91c:	mov	w9, #0x1                   	// #1
  40b920:	eor	w8, w8, #0x1
  40b924:	eor	w8, w8, w9
  40b928:	eor	w8, w8, w9
  40b92c:	and	w8, w8, #0x1
  40b930:	mov	w0, w8
  40b934:	sxtw	x10, w0
  40b938:	cbz	x10, 40b95c <send_item+0x16c>
  40b93c:	mov	w8, wzr
  40b940:	mov	w0, w8
  40b944:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40b948:	add	x1, x1, #0xf1
  40b94c:	ldr	x2, [sp, #32]
  40b950:	mov	w3, #0x90                  	// #144
  40b954:	ldr	x4, [sp, #24]
  40b958:	bl	404150 <log_assert_failed_realm@plt>
  40b95c:	ldur	w0, [x29, #-20]
  40b960:	bl	404730 <fd_duplicate_data_fd@plt>
  40b964:	str	w0, [sp, #60]
  40b968:	ldr	w8, [sp, #60]
  40b96c:	cmp	w8, #0x0
  40b970:	cset	w8, ge  // ge = tcont
  40b974:	tbnz	w8, #0, 40b98c <send_item+0x19c>
  40b978:	ldr	w8, [sp, #60]
  40b97c:	stur	w8, [x29, #-4]
  40b980:	mov	w8, #0x1                   	// #1
  40b984:	str	w8, [sp, #56]
  40b988:	b	40ba58 <send_item+0x268>
  40b98c:	ldr	x8, [sp, #112]
  40b990:	cmp	x8, #0x10
  40b994:	b.cc	40b9a8 <send_item+0x1b8>  // b.lo, b.ul, b.last
  40b998:	add	x8, sp, #0x48
  40b99c:	ldr	x8, [x8, #32]
  40b9a0:	str	x8, [sp, #16]
  40b9a4:	b	40b9b0 <send_item+0x1c0>
  40b9a8:	mov	x8, xzr
  40b9ac:	str	x8, [sp, #16]
  40b9b0:	ldr	x8, [sp, #16]
  40b9b4:	str	x8, [sp, #64]
  40b9b8:	ldr	x8, [sp, #64]
  40b9bc:	mov	w9, #0x1                   	// #1
  40b9c0:	str	w9, [x8, #8]
  40b9c4:	ldr	x8, [sp, #64]
  40b9c8:	str	w9, [x8, #12]
  40b9cc:	ldr	x8, [sp, #64]
  40b9d0:	mov	x10, #0x14                  	// #20
  40b9d4:	str	x10, [x8]
  40b9d8:	ldr	x8, [sp, #64]
  40b9dc:	ldr	w9, [sp, #60]
  40b9e0:	str	w9, [x8, #16]
  40b9e4:	add	x1, sp, #0x48
  40b9e8:	mov	x8, #0x18                  	// #24
  40b9ec:	str	x8, [sp, #112]
  40b9f0:	ldur	x8, [x29, #-16]
  40b9f4:	str	x8, [sp, #40]
  40b9f8:	ldur	x0, [x29, #-16]
  40b9fc:	str	x1, [sp, #8]
  40ba00:	bl	4043d0 <strlen@plt>
  40ba04:	str	x0, [sp, #48]
  40ba08:	ldur	q0, [sp, #40]
  40ba0c:	stur	q0, [x29, #-64]
  40ba10:	ldur	w0, [x29, #-8]
  40ba14:	ldr	x1, [sp, #8]
  40ba18:	mov	w2, #0x4000                	// #16384
  40ba1c:	bl	404740 <sendmsg@plt>
  40ba20:	cmp	x0, #0x0
  40ba24:	cset	w9, ge  // ge = tcont
  40ba28:	tbnz	w9, #0, 40ba4c <send_item+0x25c>
  40ba2c:	bl	404270 <__errno_location@plt>
  40ba30:	ldr	w8, [x0]
  40ba34:	mov	w9, wzr
  40ba38:	subs	w8, w9, w8
  40ba3c:	stur	w8, [x29, #-4]
  40ba40:	mov	w8, #0x1                   	// #1
  40ba44:	str	w8, [sp, #56]
  40ba48:	b	40ba58 <send_item+0x268>
  40ba4c:	stur	wzr, [x29, #-4]
  40ba50:	mov	w8, #0x1                   	// #1
  40ba54:	str	w8, [sp, #56]
  40ba58:	add	x0, sp, #0x3c
  40ba5c:	bl	40b374 <closep>
  40ba60:	ldur	w0, [x29, #-4]
  40ba64:	ldp	x29, x30, [sp, #192]
  40ba68:	add	sp, sp, #0xd0
  40ba6c:	ret

000000000040ba70 <unit_match>:
  40ba70:	sub	sp, sp, #0x80
  40ba74:	stp	x29, x30, [sp, #112]
  40ba78:	add	x29, sp, #0x70
  40ba7c:	mov	w8, #0x2e                  	// #46
  40ba80:	stur	x0, [x29, #-16]
  40ba84:	stur	x1, [x29, #-24]
  40ba88:	ldur	x0, [x29, #-16]
  40ba8c:	mov	w1, w8
  40ba90:	bl	404750 <strrchr@plt>
  40ba94:	stur	x0, [x29, #-32]
  40ba98:	ldur	x9, [x29, #-32]
  40ba9c:	cbnz	x9, 40bab0 <unit_match+0x40>
  40baa0:	mov	w8, wzr
  40baa4:	and	w8, w8, #0x1
  40baa8:	sturb	w8, [x29, #-1]
  40baac:	b	40bb88 <unit_match+0x118>
  40bab0:	add	x8, sp, #0x18
  40bab4:	mov	x0, x8
  40bab8:	adrp	x1, 430000 <__TMC_END__>
  40babc:	add	x1, x1, #0x0
  40bac0:	mov	x2, #0x30                  	// #48
  40bac4:	str	x8, [sp, #16]
  40bac8:	bl	404220 <memcpy@plt>
  40bacc:	ldur	x1, [x29, #-32]
  40bad0:	ldr	x0, [sp, #16]
  40bad4:	bl	404380 <strv_find@plt>
  40bad8:	cbnz	x0, 40baec <unit_match+0x7c>
  40badc:	mov	w8, wzr
  40bae0:	and	w8, w8, #0x1
  40bae4:	sturb	w8, [x29, #-1]
  40bae8:	b	40bb88 <unit_match+0x118>
  40baec:	ldur	x0, [x29, #-24]
  40baf0:	bl	40bbc8 <strv_isempty>
  40baf4:	tbnz	w0, #0, 40bafc <unit_match+0x8c>
  40baf8:	b	40bb0c <unit_match+0x9c>
  40bafc:	mov	w8, #0x1                   	// #1
  40bb00:	and	w8, w8, #0x1
  40bb04:	sturb	w8, [x29, #-1]
  40bb08:	b	40bb88 <unit_match+0x118>
  40bb0c:	ldur	x8, [x29, #-24]
  40bb10:	stur	x8, [x29, #-40]
  40bb14:	ldur	x8, [x29, #-40]
  40bb18:	mov	w9, #0x0                   	// #0
  40bb1c:	str	w9, [sp, #12]
  40bb20:	cbz	x8, 40bb38 <unit_match+0xc8>
  40bb24:	ldur	x8, [x29, #-40]
  40bb28:	ldr	x8, [x8]
  40bb2c:	cmp	x8, #0x0
  40bb30:	cset	w9, ne  // ne = any
  40bb34:	str	w9, [sp, #12]
  40bb38:	ldr	w8, [sp, #12]
  40bb3c:	tbnz	w8, #0, 40bb44 <unit_match+0xd4>
  40bb40:	b	40bb7c <unit_match+0x10c>
  40bb44:	ldur	x0, [x29, #-16]
  40bb48:	ldur	x8, [x29, #-40]
  40bb4c:	ldr	x1, [x8]
  40bb50:	bl	40bc08 <prefix_match>
  40bb54:	tbnz	w0, #0, 40bb5c <unit_match+0xec>
  40bb58:	b	40bb6c <unit_match+0xfc>
  40bb5c:	mov	w8, #0x1                   	// #1
  40bb60:	and	w8, w8, #0x1
  40bb64:	sturb	w8, [x29, #-1]
  40bb68:	b	40bb88 <unit_match+0x118>
  40bb6c:	ldur	x8, [x29, #-40]
  40bb70:	add	x8, x8, #0x8
  40bb74:	stur	x8, [x29, #-40]
  40bb78:	b	40bb14 <unit_match+0xa4>
  40bb7c:	mov	w8, wzr
  40bb80:	and	w8, w8, #0x1
  40bb84:	sturb	w8, [x29, #-1]
  40bb88:	ldurb	w8, [x29, #-1]
  40bb8c:	and	w0, w8, #0x1
  40bb90:	ldp	x29, x30, [sp, #112]
  40bb94:	add	sp, sp, #0x80
  40bb98:	ret

000000000040bb9c <hashmap_get>:
  40bb9c:	sub	sp, sp, #0x20
  40bba0:	stp	x29, x30, [sp, #16]
  40bba4:	add	x29, sp, #0x10
  40bba8:	str	x0, [sp, #8]
  40bbac:	str	x1, [sp]
  40bbb0:	ldr	x0, [sp, #8]
  40bbb4:	ldr	x1, [sp]
  40bbb8:	bl	4045c0 <internal_hashmap_get@plt>
  40bbbc:	ldp	x29, x30, [sp, #16]
  40bbc0:	add	sp, sp, #0x20
  40bbc4:	ret

000000000040bbc8 <strv_isempty>:
  40bbc8:	sub	sp, sp, #0x10
  40bbcc:	str	x0, [sp, #8]
  40bbd0:	ldr	x8, [sp, #8]
  40bbd4:	mov	w9, #0x1                   	// #1
  40bbd8:	str	w9, [sp, #4]
  40bbdc:	cbz	x8, 40bbf8 <strv_isempty+0x30>
  40bbe0:	ldr	x8, [sp, #8]
  40bbe4:	ldr	x8, [x8]
  40bbe8:	cmp	x8, #0x0
  40bbec:	cset	w9, ne  // ne = any
  40bbf0:	eor	w9, w9, #0x1
  40bbf4:	str	w9, [sp, #4]
  40bbf8:	ldr	w8, [sp, #4]
  40bbfc:	and	w0, w8, #0x1
  40bc00:	add	sp, sp, #0x10
  40bc04:	ret

000000000040bc08 <prefix_match>:
  40bc08:	sub	sp, sp, #0x40
  40bc0c:	stp	x29, x30, [sp, #48]
  40bc10:	add	x29, sp, #0x30
  40bc14:	stur	x0, [x29, #-16]
  40bc18:	str	x1, [sp, #24]
  40bc1c:	ldur	x0, [x29, #-16]
  40bc20:	ldr	x1, [sp, #24]
  40bc24:	bl	40bcc8 <startswith>
  40bc28:	str	x0, [sp, #16]
  40bc2c:	ldr	x8, [sp, #16]
  40bc30:	cbnz	x8, 40bc44 <prefix_match+0x3c>
  40bc34:	mov	w8, wzr
  40bc38:	and	w8, w8, #0x1
  40bc3c:	sturb	w8, [x29, #-1]
  40bc40:	b	40bcb4 <prefix_match+0xac>
  40bc44:	mov	w8, #0x0                   	// #0
  40bc48:	strb	w8, [sp, #15]
  40bc4c:	ldr	x9, [sp, #16]
  40bc50:	ldrb	w8, [x9]
  40bc54:	str	w8, [sp, #8]
  40bc58:	cbz	w8, 40bc8c <prefix_match+0x84>
  40bc5c:	b	40bc60 <prefix_match+0x58>
  40bc60:	ldr	w8, [sp, #8]
  40bc64:	subs	w9, w8, #0x2d
  40bc68:	cmp	w9, #0x1
  40bc6c:	b.ls	40bc8c <prefix_match+0x84>  // b.plast
  40bc70:	b	40bc74 <prefix_match+0x6c>
  40bc74:	ldr	w8, [sp, #8]
  40bc78:	cmp	w8, #0x40
  40bc7c:	cset	w9, eq  // eq = none
  40bc80:	eor	w9, w9, #0x1
  40bc84:	tbnz	w9, #0, 40bc98 <prefix_match+0x90>
  40bc88:	b	40bc8c <prefix_match+0x84>
  40bc8c:	mov	w8, #0x1                   	// #1
  40bc90:	strb	w8, [sp, #15]
  40bc94:	b	40bc98 <prefix_match+0x90>
  40bc98:	ldrb	w8, [sp, #15]
  40bc9c:	mov	w9, #0x1                   	// #1
  40bca0:	and	w8, w8, w9
  40bca4:	strb	w8, [sp, #14]
  40bca8:	ldrb	w8, [sp, #14]
  40bcac:	and	w8, w8, #0x1
  40bcb0:	sturb	w8, [x29, #-1]
  40bcb4:	ldurb	w8, [x29, #-1]
  40bcb8:	and	w0, w8, #0x1
  40bcbc:	ldp	x29, x30, [sp, #48]
  40bcc0:	add	sp, sp, #0x40
  40bcc4:	ret

000000000040bcc8 <startswith>:
  40bcc8:	sub	sp, sp, #0x30
  40bccc:	stp	x29, x30, [sp, #32]
  40bcd0:	add	x29, sp, #0x20
  40bcd4:	str	x0, [sp, #16]
  40bcd8:	str	x1, [sp, #8]
  40bcdc:	ldr	x0, [sp, #8]
  40bce0:	bl	4043d0 <strlen@plt>
  40bce4:	str	x0, [sp]
  40bce8:	ldr	x0, [sp, #16]
  40bcec:	ldr	x1, [sp, #8]
  40bcf0:	ldr	x2, [sp]
  40bcf4:	bl	404760 <strncmp@plt>
  40bcf8:	cbnz	w0, 40bd10 <startswith+0x48>
  40bcfc:	ldr	x8, [sp, #16]
  40bd00:	ldr	x9, [sp]
  40bd04:	add	x8, x8, x9
  40bd08:	stur	x8, [x29, #-8]
  40bd0c:	b	40bd18 <startswith+0x50>
  40bd10:	mov	x8, xzr
  40bd14:	stur	x8, [x29, #-8]
  40bd18:	ldur	x0, [x29, #-8]
  40bd1c:	ldp	x29, x30, [sp, #32]
  40bd20:	add	sp, sp, #0x30
  40bd24:	ret

000000000040bd28 <rmdir_and_free>:
  40bd28:	sub	sp, sp, #0x30
  40bd2c:	stp	x29, x30, [sp, #32]
  40bd30:	add	x29, sp, #0x20
  40bd34:	sub	x8, x29, #0xc
  40bd38:	stur	x0, [x29, #-8]
  40bd3c:	str	x8, [sp, #8]
  40bd40:	bl	404270 <__errno_location@plt>
  40bd44:	ldr	w9, [x0]
  40bd48:	stur	w9, [x29, #-12]
  40bd4c:	ldur	x0, [x29, #-8]
  40bd50:	bl	4045a0 <rmdir@plt>
  40bd54:	ldur	x8, [x29, #-8]
  40bd58:	mov	x0, x8
  40bd5c:	bl	404140 <free@plt>
  40bd60:	ldr	x0, [sp, #8]
  40bd64:	bl	40bd74 <_reset_errno_>
  40bd68:	ldp	x29, x30, [sp, #32]
  40bd6c:	add	sp, sp, #0x30
  40bd70:	ret

000000000040bd74 <_reset_errno_>:
  40bd74:	sub	sp, sp, #0x20
  40bd78:	stp	x29, x30, [sp, #16]
  40bd7c:	add	x29, sp, #0x10
  40bd80:	str	x0, [sp, #8]
  40bd84:	ldr	x8, [sp, #8]
  40bd88:	ldr	w9, [x8]
  40bd8c:	cmp	w9, #0x0
  40bd90:	cset	w9, ge  // ge = tcont
  40bd94:	tbnz	w9, #0, 40bd9c <_reset_errno_+0x28>
  40bd98:	b	40bdb4 <_reset_errno_+0x40>
  40bd9c:	ldr	x8, [sp, #8]
  40bda0:	ldr	w9, [x8]
  40bda4:	str	w9, [sp, #4]
  40bda8:	bl	404270 <__errno_location@plt>
  40bdac:	ldr	w9, [sp, #4]
  40bdb0:	str	w9, [x0]
  40bdb4:	ldp	x29, x30, [sp, #16]
  40bdb8:	add	sp, sp, #0x20
  40bdbc:	ret

000000000040bdc0 <__unique_prefix_static_free_wrapper4>:
  40bdc0:	sub	sp, sp, #0x20
  40bdc4:	stp	x29, x30, [sp, #16]
  40bdc8:	add	x29, sp, #0x10
  40bdcc:	str	x0, [sp, #8]
  40bdd0:	ldr	x8, [sp, #8]
  40bdd4:	str	x8, [sp]
  40bdd8:	ldr	x0, [sp]
  40bddc:	bl	404ee8 <portable_metadata_unref>
  40bde0:	ldp	x29, x30, [sp, #16]
  40bde4:	add	sp, sp, #0x20
  40bde8:	ret

000000000040bdec <hashmap_free>:
  40bdec:	sub	sp, sp, #0x20
  40bdf0:	stp	x29, x30, [sp, #16]
  40bdf4:	add	x29, sp, #0x10
  40bdf8:	mov	x8, xzr
  40bdfc:	str	x0, [sp, #8]
  40be00:	ldr	x0, [sp, #8]
  40be04:	mov	x1, x8
  40be08:	mov	x2, x8
  40be0c:	bl	404770 <internal_hashmap_free@plt>
  40be10:	ldp	x29, x30, [sp, #16]
  40be14:	add	sp, sp, #0x20
  40be18:	ret

000000000040be1c <sd_bus_message_unrefp>:
  40be1c:	sub	sp, sp, #0x20
  40be20:	stp	x29, x30, [sp, #16]
  40be24:	add	x29, sp, #0x10
  40be28:	str	x0, [sp, #8]
  40be2c:	ldr	x8, [sp, #8]
  40be30:	ldr	x8, [x8]
  40be34:	cbz	x8, 40be44 <sd_bus_message_unrefp+0x28>
  40be38:	ldr	x8, [sp, #8]
  40be3c:	ldr	x0, [x8]
  40be40:	bl	404780 <sd_bus_message_unref@plt>
  40be44:	ldp	x29, x30, [sp, #16]
  40be48:	add	sp, sp, #0x20
  40be4c:	ret

000000000040be50 <unlink_and_freep>:
  40be50:	sub	sp, sp, #0x20
  40be54:	stp	x29, x30, [sp, #16]
  40be58:	add	x29, sp, #0x10
  40be5c:	str	x0, [sp, #8]
  40be60:	ldr	x8, [sp, #8]
  40be64:	ldr	x8, [x8]
  40be68:	cbz	x8, 40be78 <unlink_and_freep+0x28>
  40be6c:	ldr	x8, [sp, #8]
  40be70:	ldr	x0, [x8]
  40be74:	bl	40c838 <unlink_and_free>
  40be78:	ldp	x29, x30, [sp, #16]
  40be7c:	add	sp, sp, #0x20
  40be80:	ret

000000000040be84 <install_chroot_dropin>:
  40be84:	sub	sp, sp, #0xe0
  40be88:	stp	x29, x30, [sp, #208]
  40be8c:	add	x29, sp, #0xd0
  40be90:	mov	x8, xzr
  40be94:	adrp	x9, 413000 <manager_connect_bus+0x4e4>
  40be98:	add	x9, x9, #0x4ee
  40be9c:	add	x9, x9, #0x3
  40bea0:	adrp	x10, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40bea4:	add	x10, x10, #0x514
  40bea8:	stur	x0, [x29, #-16]
  40beac:	stur	w1, [x29, #-20]
  40beb0:	stur	x2, [x29, #-32]
  40beb4:	stur	x3, [x29, #-40]
  40beb8:	stur	x4, [x29, #-48]
  40bebc:	stur	x5, [x29, #-56]
  40bec0:	stur	x6, [x29, #-64]
  40bec4:	stur	x8, [x29, #-72]
  40bec8:	stur	x8, [x29, #-80]
  40becc:	str	x9, [sp, #72]
  40bed0:	str	x10, [sp, #64]
  40bed4:	ldur	x8, [x29, #-16]
  40bed8:	cmp	x8, #0x0
  40bedc:	cset	w9, ne  // ne = any
  40bee0:	mov	w10, #0x1                   	// #1
  40bee4:	eor	w9, w9, #0x1
  40bee8:	eor	w9, w9, w10
  40beec:	eor	w9, w9, w10
  40bef0:	and	w9, w9, #0x1
  40bef4:	mov	w0, w9
  40bef8:	sxtw	x8, w0
  40befc:	cbz	x8, 40bf20 <install_chroot_dropin+0x9c>
  40bf00:	mov	w8, wzr
  40bf04:	mov	w0, w8
  40bf08:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40bf0c:	add	x1, x1, #0x415
  40bf10:	ldr	x2, [sp, #72]
  40bf14:	mov	w3, #0x2b3                 	// #691
  40bf18:	ldr	x4, [sp, #64]
  40bf1c:	bl	404150 <log_assert_failed_realm@plt>
  40bf20:	ldur	x8, [x29, #-32]
  40bf24:	cmp	x8, #0x0
  40bf28:	cset	w9, ne  // ne = any
  40bf2c:	mov	w10, #0x1                   	// #1
  40bf30:	eor	w9, w9, #0x1
  40bf34:	eor	w9, w9, w10
  40bf38:	eor	w9, w9, w10
  40bf3c:	and	w9, w9, #0x1
  40bf40:	mov	w0, w9
  40bf44:	sxtw	x8, w0
  40bf48:	cbz	x8, 40bf6c <install_chroot_dropin+0xe8>
  40bf4c:	mov	w8, wzr
  40bf50:	mov	w0, w8
  40bf54:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40bf58:	add	x1, x1, #0x420
  40bf5c:	ldr	x2, [sp, #72]
  40bf60:	mov	w3, #0x2b4                 	// #692
  40bf64:	ldr	x4, [sp, #64]
  40bf68:	bl	404150 <log_assert_failed_realm@plt>
  40bf6c:	ldur	x8, [x29, #-40]
  40bf70:	cmp	x8, #0x0
  40bf74:	cset	w9, ne  // ne = any
  40bf78:	mov	w10, #0x1                   	// #1
  40bf7c:	eor	w9, w9, #0x1
  40bf80:	eor	w9, w9, w10
  40bf84:	eor	w9, w9, w10
  40bf88:	and	w9, w9, #0x1
  40bf8c:	mov	w0, w9
  40bf90:	sxtw	x8, w0
  40bf94:	cbz	x8, 40bfb8 <install_chroot_dropin+0x134>
  40bf98:	mov	w8, wzr
  40bf9c:	mov	w0, w8
  40bfa0:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40bfa4:	add	x1, x1, #0x595
  40bfa8:	ldr	x2, [sp, #72]
  40bfac:	mov	w3, #0x2b5                 	// #693
  40bfb0:	ldr	x4, [sp, #64]
  40bfb4:	bl	404150 <log_assert_failed_realm@plt>
  40bfb8:	ldur	x0, [x29, #-40]
  40bfbc:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40bfc0:	add	x1, x1, #0x5a0
  40bfc4:	mov	x8, #0xffffffffffffffff    	// #-1
  40bfc8:	mov	x2, x8
  40bfcc:	bl	4046a0 <path_join_internal@plt>
  40bfd0:	stur	x0, [x29, #-80]
  40bfd4:	ldur	x8, [x29, #-80]
  40bfd8:	cbnz	x8, 40bff0 <install_chroot_dropin+0x16c>
  40bfdc:	mov	w8, #0xfffffff4            	// #-12
  40bfe0:	stur	w8, [x29, #-4]
  40bfe4:	mov	w8, #0x1                   	// #1
  40bfe8:	stur	w8, [x29, #-88]
  40bfec:	b	40c24c <install_chroot_dropin+0x3c8>
  40bff0:	ldur	x1, [x29, #-16]
  40bff4:	adrp	x0, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40bff8:	add	x0, x0, #0x5b1
  40bffc:	adrp	x2, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c000:	add	x2, x2, #0x5cf
  40c004:	mov	x8, xzr
  40c008:	mov	x3, x8
  40c00c:	bl	404440 <strjoin_real@plt>
  40c010:	stur	x0, [x29, #-72]
  40c014:	ldur	x8, [x29, #-72]
  40c018:	cbnz	x8, 40c030 <install_chroot_dropin+0x1ac>
  40c01c:	mov	w8, #0xfffffff4            	// #-12
  40c020:	stur	w8, [x29, #-4]
  40c024:	mov	w8, #0x1                   	// #1
  40c028:	stur	w8, [x29, #-88]
  40c02c:	b	40c24c <install_chroot_dropin+0x3c8>
  40c030:	ldur	x8, [x29, #-32]
  40c034:	add	x0, x8, #0x10
  40c038:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c03c:	add	x1, x1, #0xf9
  40c040:	bl	4045f0 <endswith@plt>
  40c044:	cbz	x0, 40c140 <install_chroot_dropin+0x2bc>
  40c048:	mov	w8, #0x0                   	// #0
  40c04c:	sturb	w8, [x29, #-89]
  40c050:	ldur	w8, [x29, #-20]
  40c054:	subs	w8, w8, #0x0
  40c058:	mov	w9, #0x1                   	// #1
  40c05c:	cmp	w8, #0x1
  40c060:	cset	w8, ls  // ls = plast
  40c064:	eor	w8, w8, w9
  40c068:	tbnz	w8, #0, 40c07c <install_chroot_dropin+0x1f8>
  40c06c:	b	40c070 <install_chroot_dropin+0x1ec>
  40c070:	mov	w8, #0x1                   	// #1
  40c074:	sturb	w8, [x29, #-89]
  40c078:	b	40c07c <install_chroot_dropin+0x1f8>
  40c07c:	ldurb	w8, [x29, #-89]
  40c080:	and	w8, w8, #0x1
  40c084:	sturb	w8, [x29, #-90]
  40c088:	ldurb	w8, [x29, #-90]
  40c08c:	adrp	x9, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c090:	add	x9, x9, #0x5fb
  40c094:	adrp	x10, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c098:	add	x10, x10, #0x5ec
  40c09c:	tst	w8, #0x1
  40c0a0:	csel	x3, x10, x9, ne  // ne = any
  40c0a4:	ldur	x4, [x29, #-16]
  40c0a8:	ldur	x0, [x29, #-16]
  40c0ac:	str	x3, [sp, #56]
  40c0b0:	str	x4, [sp, #48]
  40c0b4:	bl	404790 <basename@plt>
  40c0b8:	ldur	x9, [x29, #-16]
  40c0bc:	str	x0, [sp, #40]
  40c0c0:	mov	x0, x9
  40c0c4:	bl	404790 <basename@plt>
  40c0c8:	sub	x9, x29, #0x48
  40c0cc:	str	x0, [sp, #32]
  40c0d0:	mov	x0, x9
  40c0d4:	mov	x9, xzr
  40c0d8:	mov	x1, x9
  40c0dc:	adrp	x2, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c0e0:	add	x2, x2, #0x5e0
  40c0e4:	ldr	x3, [sp, #56]
  40c0e8:	ldr	x4, [sp, #48]
  40c0ec:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c0f0:	add	x5, x5, #0x606
  40c0f4:	ldr	x6, [sp, #40]
  40c0f8:	adrp	x7, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c0fc:	add	x7, x7, #0x61d
  40c100:	mov	x10, sp
  40c104:	ldr	x11, [sp, #32]
  40c108:	str	x11, [x10]
  40c10c:	mov	x10, sp
  40c110:	adrp	x12, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c114:	add	x12, x12, #0x637
  40c118:	str	x12, [x10, #8]
  40c11c:	mov	x10, sp
  40c120:	str	x9, [x10, #16]
  40c124:	bl	4047a0 <strextend_with_separator@plt>
  40c128:	cbnz	x0, 40c140 <install_chroot_dropin+0x2bc>
  40c12c:	mov	w8, #0xfffffff4            	// #-12
  40c130:	stur	w8, [x29, #-4]
  40c134:	mov	w8, #0x1                   	// #1
  40c138:	stur	w8, [x29, #-88]
  40c13c:	b	40c24c <install_chroot_dropin+0x3c8>
  40c140:	ldur	x0, [x29, #-80]
  40c144:	ldur	x1, [x29, #-72]
  40c148:	mov	w2, #0x3                   	// #3
  40c14c:	bl	40c868 <write_string_file>
  40c150:	stur	w0, [x29, #-84]
  40c154:	ldur	w8, [x29, #-84]
  40c158:	cmp	w8, #0x0
  40c15c:	cset	w8, ge  // ge = tcont
  40c160:	tbnz	w8, #0, 40c1f8 <install_chroot_dropin+0x374>
  40c164:	mov	w8, #0x7                   	// #7
  40c168:	stur	w8, [x29, #-96]
  40c16c:	ldur	w8, [x29, #-84]
  40c170:	stur	w8, [x29, #-100]
  40c174:	str	wzr, [sp, #104]
  40c178:	ldr	w0, [sp, #104]
  40c17c:	bl	4041e0 <log_get_max_level_realm@plt>
  40c180:	ldur	w8, [x29, #-96]
  40c184:	and	w8, w8, #0x7
  40c188:	cmp	w0, w8
  40c18c:	b.lt	40c1c8 <install_chroot_dropin+0x344>  // b.tstop
  40c190:	ldr	w8, [sp, #104]
  40c194:	ldur	w9, [x29, #-96]
  40c198:	orr	w0, w9, w8, lsl #10
  40c19c:	ldur	w1, [x29, #-100]
  40c1a0:	ldur	x6, [x29, #-80]
  40c1a4:	ldr	x2, [sp, #72]
  40c1a8:	mov	w3, #0x2cc                 	// #716
  40c1ac:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c1b0:	add	x4, x4, #0x639
  40c1b4:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c1b8:	add	x5, x5, #0x64f
  40c1bc:	bl	4041f0 <log_internal_realm@plt>
  40c1c0:	str	w0, [sp, #28]
  40c1c4:	b	40c1dc <install_chroot_dropin+0x358>
  40c1c8:	ldur	w0, [x29, #-100]
  40c1cc:	bl	404200 <abs@plt>
  40c1d0:	mov	w8, wzr
  40c1d4:	subs	w8, w8, w0, uxtb
  40c1d8:	str	w8, [sp, #28]
  40c1dc:	ldr	w8, [sp, #28]
  40c1e0:	str	w8, [sp, #100]
  40c1e4:	ldr	w8, [sp, #100]
  40c1e8:	stur	w8, [x29, #-4]
  40c1ec:	mov	w8, #0x1                   	// #1
  40c1f0:	stur	w8, [x29, #-88]
  40c1f4:	b	40c24c <install_chroot_dropin+0x3c8>
  40c1f8:	ldur	x0, [x29, #-56]
  40c1fc:	ldur	x1, [x29, #-64]
  40c200:	ldur	x3, [x29, #-80]
  40c204:	mov	w2, #0x3                   	// #3
  40c208:	mov	x8, xzr
  40c20c:	mov	x4, x8
  40c210:	bl	4099d0 <portable_changes_add>
  40c214:	ldur	x8, [x29, #-48]
  40c218:	cbz	x8, 40c240 <install_chroot_dropin+0x3bc>
  40c21c:	ldur	x8, [x29, #-80]
  40c220:	str	x8, [sp, #88]
  40c224:	mov	x8, xzr
  40c228:	stur	x8, [x29, #-80]
  40c22c:	ldr	x8, [sp, #88]
  40c230:	str	x8, [sp, #80]
  40c234:	ldr	x8, [sp, #80]
  40c238:	ldur	x9, [x29, #-48]
  40c23c:	str	x8, [x9]
  40c240:	stur	wzr, [x29, #-4]
  40c244:	mov	w8, #0x1                   	// #1
  40c248:	stur	w8, [x29, #-88]
  40c24c:	sub	x0, x29, #0x50
  40c250:	bl	405118 <freep>
  40c254:	sub	x0, x29, #0x48
  40c258:	bl	405118 <freep>
  40c25c:	ldur	w0, [x29, #-4]
  40c260:	ldp	x29, x30, [sp, #208]
  40c264:	add	sp, sp, #0xe0
  40c268:	ret

000000000040c26c <install_profile_dropin>:
  40c26c:	sub	sp, sp, #0x140
  40c270:	stp	x29, x30, [sp, #288]
  40c274:	str	x28, [sp, #304]
  40c278:	add	x29, sp, #0x120
  40c27c:	mov	x8, xzr
  40c280:	adrp	x9, 413000 <manager_connect_bus+0x4e4>
  40c284:	add	x9, x9, #0x4ee
  40c288:	add	x9, x9, #0x3
  40c28c:	adrp	x10, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c290:	add	x10, x10, #0x6fc
  40c294:	adrp	x11, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c298:	add	x11, x11, #0x668
  40c29c:	stur	x0, [x29, #-16]
  40c2a0:	stur	x1, [x29, #-24]
  40c2a4:	stur	x2, [x29, #-32]
  40c2a8:	stur	x3, [x29, #-40]
  40c2ac:	stur	w4, [x29, #-44]
  40c2b0:	stur	x5, [x29, #-56]
  40c2b4:	stur	x6, [x29, #-64]
  40c2b8:	stur	x7, [x29, #-72]
  40c2bc:	stur	x8, [x29, #-80]
  40c2c0:	stur	x8, [x29, #-88]
  40c2c4:	str	x9, [sp, #104]
  40c2c8:	str	x10, [sp, #96]
  40c2cc:	str	x11, [sp, #88]
  40c2d0:	ldur	x8, [x29, #-16]
  40c2d4:	cmp	x8, #0x0
  40c2d8:	cset	w9, ne  // ne = any
  40c2dc:	mov	w10, #0x1                   	// #1
  40c2e0:	eor	w9, w9, #0x1
  40c2e4:	eor	w9, w9, w10
  40c2e8:	eor	w9, w9, w10
  40c2ec:	and	w9, w9, #0x1
  40c2f0:	mov	w0, w9
  40c2f4:	sxtw	x8, w0
  40c2f8:	cbz	x8, 40c31c <install_profile_dropin+0xb0>
  40c2fc:	mov	w8, wzr
  40c300:	mov	w0, w8
  40c304:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c308:	add	x1, x1, #0x415
  40c30c:	ldr	x2, [sp, #104]
  40c310:	mov	w3, #0x2fe                 	// #766
  40c314:	ldr	x4, [sp, #88]
  40c318:	bl	404150 <log_assert_failed_realm@plt>
  40c31c:	ldur	x8, [x29, #-24]
  40c320:	cmp	x8, #0x0
  40c324:	cset	w9, ne  // ne = any
  40c328:	mov	w10, #0x1                   	// #1
  40c32c:	eor	w9, w9, #0x1
  40c330:	eor	w9, w9, w10
  40c334:	eor	w9, w9, w10
  40c338:	and	w9, w9, #0x1
  40c33c:	mov	w0, w9
  40c340:	sxtw	x8, w0
  40c344:	cbz	x8, 40c368 <install_profile_dropin+0xfc>
  40c348:	mov	w8, wzr
  40c34c:	mov	w0, w8
  40c350:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c354:	add	x1, x1, #0x420
  40c358:	ldr	x2, [sp, #104]
  40c35c:	mov	w3, #0x2ff                 	// #767
  40c360:	ldr	x4, [sp, #88]
  40c364:	bl	404150 <log_assert_failed_realm@plt>
  40c368:	ldur	x8, [x29, #-32]
  40c36c:	cmp	x8, #0x0
  40c370:	cset	w9, ne  // ne = any
  40c374:	mov	w10, #0x1                   	// #1
  40c378:	eor	w9, w9, #0x1
  40c37c:	eor	w9, w9, w10
  40c380:	eor	w9, w9, w10
  40c384:	and	w9, w9, #0x1
  40c388:	mov	w0, w9
  40c38c:	sxtw	x8, w0
  40c390:	cbz	x8, 40c3b4 <install_profile_dropin+0x148>
  40c394:	mov	w8, wzr
  40c398:	mov	w0, w8
  40c39c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c3a0:	add	x1, x1, #0x595
  40c3a4:	ldr	x2, [sp, #104]
  40c3a8:	mov	w3, #0x300                 	// #768
  40c3ac:	ldr	x4, [sp, #88]
  40c3b0:	bl	404150 <log_assert_failed_realm@plt>
  40c3b4:	ldur	x8, [x29, #-40]
  40c3b8:	cbnz	x8, 40c3cc <install_profile_dropin+0x160>
  40c3bc:	stur	wzr, [x29, #-4]
  40c3c0:	mov	w8, #0x1                   	// #1
  40c3c4:	stur	w8, [x29, #-96]
  40c3c8:	b	40c7c4 <install_profile_dropin+0x558>
  40c3cc:	ldur	x0, [x29, #-40]
  40c3d0:	ldur	x8, [x29, #-24]
  40c3d4:	add	x1, x8, #0x10
  40c3d8:	sub	x2, x29, #0x58
  40c3dc:	bl	40c8a4 <find_profile>
  40c3e0:	stur	w0, [x29, #-92]
  40c3e4:	ldur	w9, [x29, #-92]
  40c3e8:	cmp	w9, #0x0
  40c3ec:	cset	w9, ge  // ge = tcont
  40c3f0:	tbnz	w9, #0, 40c528 <install_profile_dropin+0x2bc>
  40c3f4:	ldur	w8, [x29, #-92]
  40c3f8:	mov	w9, #0xfffffffe            	// #-2
  40c3fc:	cmp	w8, w9
  40c400:	b.eq	40c498 <install_profile_dropin+0x22c>  // b.none
  40c404:	mov	w8, #0x7                   	// #7
  40c408:	stur	w8, [x29, #-100]
  40c40c:	bl	404270 <__errno_location@plt>
  40c410:	ldr	w8, [x0]
  40c414:	stur	w8, [x29, #-104]
  40c418:	stur	wzr, [x29, #-108]
  40c41c:	ldur	w0, [x29, #-108]
  40c420:	bl	4041e0 <log_get_max_level_realm@plt>
  40c424:	ldur	w8, [x29, #-100]
  40c428:	and	w8, w8, #0x7
  40c42c:	cmp	w0, w8
  40c430:	b.lt	40c468 <install_profile_dropin+0x1fc>  // b.tstop
  40c434:	ldur	w8, [x29, #-108]
  40c438:	ldur	w9, [x29, #-100]
  40c43c:	orr	w0, w9, w8, lsl #10
  40c440:	ldur	w1, [x29, #-104]
  40c444:	ldur	x6, [x29, #-40]
  40c448:	ldr	x2, [sp, #104]
  40c44c:	mov	w3, #0x308                 	// #776
  40c450:	ldr	x4, [sp, #96]
  40c454:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c458:	add	x5, x5, #0x713
  40c45c:	bl	4041f0 <log_internal_realm@plt>
  40c460:	str	w0, [sp, #84]
  40c464:	b	40c47c <install_profile_dropin+0x210>
  40c468:	ldur	w0, [x29, #-104]
  40c46c:	bl	404200 <abs@plt>
  40c470:	mov	w8, wzr
  40c474:	subs	w8, w8, w0, uxtb
  40c478:	str	w8, [sp, #84]
  40c47c:	ldr	w8, [sp, #84]
  40c480:	stur	w8, [x29, #-112]
  40c484:	ldur	w8, [x29, #-112]
  40c488:	stur	w8, [x29, #-4]
  40c48c:	mov	w8, #0x1                   	// #1
  40c490:	stur	w8, [x29, #-96]
  40c494:	b	40c7c4 <install_profile_dropin+0x558>
  40c498:	mov	w8, #0x7                   	// #7
  40c49c:	stur	w8, [x29, #-116]
  40c4a0:	bl	404270 <__errno_location@plt>
  40c4a4:	ldr	w8, [x0]
  40c4a8:	stur	w8, [x29, #-120]
  40c4ac:	stur	wzr, [x29, #-124]
  40c4b0:	ldur	w0, [x29, #-124]
  40c4b4:	bl	4041e0 <log_get_max_level_realm@plt>
  40c4b8:	ldur	w8, [x29, #-116]
  40c4bc:	and	w8, w8, #0x7
  40c4c0:	cmp	w0, w8
  40c4c4:	b.lt	40c4fc <install_profile_dropin+0x290>  // b.tstop
  40c4c8:	ldur	w8, [x29, #-124]
  40c4cc:	ldur	w9, [x29, #-116]
  40c4d0:	orr	w0, w9, w8, lsl #10
  40c4d4:	ldur	w1, [x29, #-120]
  40c4d8:	ldur	x6, [x29, #-40]
  40c4dc:	ldr	x2, [sp, #104]
  40c4e0:	mov	w3, #0x30a                 	// #778
  40c4e4:	ldr	x4, [sp, #96]
  40c4e8:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c4ec:	add	x5, x5, #0x736
  40c4f0:	bl	4041f0 <log_internal_realm@plt>
  40c4f4:	str	w0, [sp, #80]
  40c4f8:	b	40c510 <install_profile_dropin+0x2a4>
  40c4fc:	ldur	w0, [x29, #-120]
  40c500:	bl	404200 <abs@plt>
  40c504:	mov	w8, wzr
  40c508:	subs	w8, w8, w0, uxtb
  40c50c:	str	w8, [sp, #80]
  40c510:	ldr	w8, [sp, #80]
  40c514:	stur	w8, [x29, #-128]
  40c518:	stur	wzr, [x29, #-4]
  40c51c:	mov	w8, #0x1                   	// #1
  40c520:	stur	w8, [x29, #-96]
  40c524:	b	40c7c4 <install_profile_dropin+0x558>
  40c528:	ldur	x0, [x29, #-32]
  40c52c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c530:	add	x1, x1, #0x76e
  40c534:	mov	x8, #0xffffffffffffffff    	// #-1
  40c538:	mov	x2, x8
  40c53c:	bl	4046a0 <path_join_internal@plt>
  40c540:	stur	x0, [x29, #-80]
  40c544:	ldur	x8, [x29, #-80]
  40c548:	cbnz	x8, 40c560 <install_profile_dropin+0x2f4>
  40c54c:	mov	w8, #0xfffffff4            	// #-12
  40c550:	stur	w8, [x29, #-4]
  40c554:	mov	w8, #0x1                   	// #1
  40c558:	stur	w8, [x29, #-96]
  40c55c:	b	40c7c4 <install_profile_dropin+0x558>
  40c560:	ldur	w8, [x29, #-44]
  40c564:	and	w8, w8, #0x1
  40c568:	cbz	w8, 40c68c <install_profile_dropin+0x420>
  40c56c:	ldur	x0, [x29, #-88]
  40c570:	ldur	x1, [x29, #-80]
  40c574:	mov	w2, #0x1a4                 	// #420
  40c578:	mov	w8, wzr
  40c57c:	mov	w3, w8
  40c580:	mov	w4, w8
  40c584:	mov	w5, #0x1                   	// #1
  40c588:	bl	40cb30 <copy_file_atomic>
  40c58c:	stur	w0, [x29, #-92]
  40c590:	ldur	w8, [x29, #-92]
  40c594:	cmp	w8, #0x0
  40c598:	cset	w8, ge  // ge = tcont
  40c59c:	tbnz	w8, #0, 40c66c <install_profile_dropin+0x400>
  40c5a0:	mov	w8, #0x7                   	// #7
  40c5a4:	stur	w8, [x29, #-132]
  40c5a8:	ldur	w8, [x29, #-92]
  40c5ac:	stur	w8, [x29, #-136]
  40c5b0:	stur	wzr, [x29, #-140]
  40c5b4:	ldur	w0, [x29, #-140]
  40c5b8:	bl	4041e0 <log_get_max_level_realm@plt>
  40c5bc:	ldur	w8, [x29, #-132]
  40c5c0:	and	w8, w8, #0x7
  40c5c4:	cmp	w0, w8
  40c5c8:	b.lt	40c63c <install_profile_dropin+0x3d0>  // b.tstop
  40c5cc:	ldur	w8, [x29, #-140]
  40c5d0:	ldur	w9, [x29, #-132]
  40c5d4:	orr	w0, w9, w8, lsl #10
  40c5d8:	ldur	w1, [x29, #-136]
  40c5dc:	ldur	x6, [x29, #-88]
  40c5e0:	mov	w8, #0x7                   	// #7
  40c5e4:	str	w0, [sp, #76]
  40c5e8:	mov	w0, w8
  40c5ec:	str	w1, [sp, #72]
  40c5f0:	str	x6, [sp, #64]
  40c5f4:	bl	4044a0 <special_glyph@plt>
  40c5f8:	ldur	x10, [x29, #-80]
  40c5fc:	ldr	w8, [sp, #76]
  40c600:	str	x0, [sp, #56]
  40c604:	mov	w0, w8
  40c608:	ldr	w1, [sp, #72]
  40c60c:	ldr	x2, [sp, #104]
  40c610:	mov	w3, #0x316                 	// #790
  40c614:	ldr	x4, [sp, #96]
  40c618:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c61c:	add	x5, x5, #0x77e
  40c620:	ldr	x6, [sp, #64]
  40c624:	ldr	x7, [sp, #56]
  40c628:	mov	x11, sp
  40c62c:	str	x10, [x11]
  40c630:	bl	4041f0 <log_internal_realm@plt>
  40c634:	str	w0, [sp, #52]
  40c638:	b	40c650 <install_profile_dropin+0x3e4>
  40c63c:	ldur	w0, [x29, #-136]
  40c640:	bl	404200 <abs@plt>
  40c644:	mov	w8, wzr
  40c648:	subs	w8, w8, w0, uxtb
  40c64c:	str	w8, [sp, #52]
  40c650:	ldr	w8, [sp, #52]
  40c654:	str	w8, [sp, #144]
  40c658:	ldr	w8, [sp, #144]
  40c65c:	stur	w8, [x29, #-4]
  40c660:	mov	w8, #0x1                   	// #1
  40c664:	stur	w8, [x29, #-96]
  40c668:	b	40c7c4 <install_profile_dropin+0x558>
  40c66c:	ldur	x0, [x29, #-64]
  40c670:	ldur	x1, [x29, #-72]
  40c674:	ldur	x3, [x29, #-80]
  40c678:	ldur	x4, [x29, #-88]
  40c67c:	mov	w8, wzr
  40c680:	mov	w2, w8
  40c684:	bl	4099d0 <portable_changes_add>
  40c688:	b	40c78c <install_profile_dropin+0x520>
  40c68c:	ldur	x0, [x29, #-88]
  40c690:	ldur	x1, [x29, #-80]
  40c694:	bl	404450 <symlink@plt>
  40c698:	cmp	w0, #0x0
  40c69c:	cset	w8, ge  // ge = tcont
  40c6a0:	tbnz	w8, #0, 40c774 <install_profile_dropin+0x508>
  40c6a4:	mov	w8, #0x7                   	// #7
  40c6a8:	str	w8, [sp, #140]
  40c6ac:	bl	404270 <__errno_location@plt>
  40c6b0:	ldr	w8, [x0]
  40c6b4:	str	w8, [sp, #136]
  40c6b8:	str	wzr, [sp, #132]
  40c6bc:	ldr	w0, [sp, #132]
  40c6c0:	bl	4041e0 <log_get_max_level_realm@plt>
  40c6c4:	ldr	w8, [sp, #140]
  40c6c8:	and	w8, w8, #0x7
  40c6cc:	cmp	w0, w8
  40c6d0:	b.lt	40c744 <install_profile_dropin+0x4d8>  // b.tstop
  40c6d4:	ldr	w8, [sp, #132]
  40c6d8:	ldr	w9, [sp, #140]
  40c6dc:	orr	w0, w9, w8, lsl #10
  40c6e0:	ldr	w1, [sp, #136]
  40c6e4:	ldur	x6, [x29, #-88]
  40c6e8:	mov	w8, #0x7                   	// #7
  40c6ec:	str	w0, [sp, #48]
  40c6f0:	mov	w0, w8
  40c6f4:	str	w1, [sp, #44]
  40c6f8:	str	x6, [sp, #32]
  40c6fc:	bl	4044a0 <special_glyph@plt>
  40c700:	ldur	x10, [x29, #-80]
  40c704:	ldr	w8, [sp, #48]
  40c708:	str	x0, [sp, #24]
  40c70c:	mov	w0, w8
  40c710:	ldr	w1, [sp, #44]
  40c714:	ldr	x2, [sp, #104]
  40c718:	mov	w3, #0x31d                 	// #797
  40c71c:	ldr	x4, [sp, #96]
  40c720:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c724:	add	x5, x5, #0x79a
  40c728:	ldr	x6, [sp, #32]
  40c72c:	ldr	x7, [sp, #24]
  40c730:	mov	x11, sp
  40c734:	str	x10, [x11]
  40c738:	bl	4041f0 <log_internal_realm@plt>
  40c73c:	str	w0, [sp, #20]
  40c740:	b	40c758 <install_profile_dropin+0x4ec>
  40c744:	ldr	w0, [sp, #136]
  40c748:	bl	404200 <abs@plt>
  40c74c:	mov	w8, wzr
  40c750:	subs	w8, w8, w0, uxtb
  40c754:	str	w8, [sp, #20]
  40c758:	ldr	w8, [sp, #20]
  40c75c:	str	w8, [sp, #128]
  40c760:	ldr	w8, [sp, #128]
  40c764:	stur	w8, [x29, #-4]
  40c768:	mov	w8, #0x1                   	// #1
  40c76c:	stur	w8, [x29, #-96]
  40c770:	b	40c7c4 <install_profile_dropin+0x558>
  40c774:	ldur	x0, [x29, #-64]
  40c778:	ldur	x1, [x29, #-72]
  40c77c:	ldur	x3, [x29, #-80]
  40c780:	ldur	x4, [x29, #-88]
  40c784:	mov	w2, #0x1                   	// #1
  40c788:	bl	4099d0 <portable_changes_add>
  40c78c:	ldur	x8, [x29, #-56]
  40c790:	cbz	x8, 40c7b8 <install_profile_dropin+0x54c>
  40c794:	ldur	x8, [x29, #-80]
  40c798:	str	x8, [sp, #120]
  40c79c:	mov	x8, xzr
  40c7a0:	stur	x8, [x29, #-80]
  40c7a4:	ldr	x8, [sp, #120]
  40c7a8:	str	x8, [sp, #112]
  40c7ac:	ldr	x8, [sp, #112]
  40c7b0:	ldur	x9, [x29, #-56]
  40c7b4:	str	x8, [x9]
  40c7b8:	stur	wzr, [x29, #-4]
  40c7bc:	mov	w8, #0x1                   	// #1
  40c7c0:	stur	w8, [x29, #-96]
  40c7c4:	sub	x0, x29, #0x58
  40c7c8:	bl	405118 <freep>
  40c7cc:	sub	x0, x29, #0x50
  40c7d0:	bl	405118 <freep>
  40c7d4:	ldur	w0, [x29, #-4]
  40c7d8:	ldr	x28, [sp, #304]
  40c7dc:	ldp	x29, x30, [sp, #288]
  40c7e0:	add	sp, sp, #0x140
  40c7e4:	ret

000000000040c7e8 <copy_bytes>:
  40c7e8:	sub	sp, sp, #0x30
  40c7ec:	stp	x29, x30, [sp, #32]
  40c7f0:	add	x29, sp, #0x20
  40c7f4:	mov	x8, xzr
  40c7f8:	mov	x4, x8
  40c7fc:	mov	x5, x8
  40c800:	mov	x6, x8
  40c804:	stur	w0, [x29, #-4]
  40c808:	stur	w1, [x29, #-8]
  40c80c:	str	x2, [sp, #16]
  40c810:	str	w3, [sp, #12]
  40c814:	ldur	w0, [x29, #-4]
  40c818:	ldur	w1, [x29, #-8]
  40c81c:	ldr	x2, [sp, #16]
  40c820:	ldr	w3, [sp, #12]
  40c824:	mov	x7, x8
  40c828:	bl	4047b0 <copy_bytes_full@plt>
  40c82c:	ldp	x29, x30, [sp, #32]
  40c830:	add	sp, sp, #0x30
  40c834:	ret

000000000040c838 <unlink_and_free>:
  40c838:	sub	sp, sp, #0x20
  40c83c:	stp	x29, x30, [sp, #16]
  40c840:	add	x29, sp, #0x10
  40c844:	str	x0, [sp, #8]
  40c848:	ldr	x0, [sp, #8]
  40c84c:	bl	4047c0 <unlink_noerrno@plt>
  40c850:	ldr	x8, [sp, #8]
  40c854:	mov	x0, x8
  40c858:	bl	404140 <free@plt>
  40c85c:	ldp	x29, x30, [sp, #16]
  40c860:	add	sp, sp, #0x20
  40c864:	ret

000000000040c868 <write_string_file>:
  40c868:	sub	sp, sp, #0x30
  40c86c:	stp	x29, x30, [sp, #32]
  40c870:	add	x29, sp, #0x20
  40c874:	mov	x8, xzr
  40c878:	stur	x0, [x29, #-8]
  40c87c:	str	x1, [sp, #16]
  40c880:	str	w2, [sp, #12]
  40c884:	ldur	x0, [x29, #-8]
  40c888:	ldr	x1, [sp, #16]
  40c88c:	ldr	w2, [sp, #12]
  40c890:	mov	x3, x8
  40c894:	bl	4047d0 <write_string_file_ts@plt>
  40c898:	ldp	x29, x30, [sp, #32]
  40c89c:	add	sp, sp, #0x30
  40c8a0:	ret

000000000040c8a4 <find_profile>:
  40c8a4:	sub	sp, sp, #0x80
  40c8a8:	stp	x29, x30, [sp, #112]
  40c8ac:	add	x29, sp, #0x70
  40c8b0:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  40c8b4:	add	x8, x8, #0x4ee
  40c8b8:	add	x8, x8, #0x3
  40c8bc:	adrp	x9, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c8c0:	add	x9, x9, #0x7b6
  40c8c4:	stur	x0, [x29, #-16]
  40c8c8:	stur	x1, [x29, #-24]
  40c8cc:	stur	x2, [x29, #-32]
  40c8d0:	str	x8, [sp, #24]
  40c8d4:	str	x9, [sp, #16]
  40c8d8:	ldur	x8, [x29, #-16]
  40c8dc:	cmp	x8, #0x0
  40c8e0:	cset	w9, ne  // ne = any
  40c8e4:	mov	w10, #0x1                   	// #1
  40c8e8:	eor	w9, w9, #0x1
  40c8ec:	eor	w9, w9, w10
  40c8f0:	eor	w9, w9, w10
  40c8f4:	and	w9, w9, #0x1
  40c8f8:	mov	w0, w9
  40c8fc:	sxtw	x8, w0
  40c900:	cbz	x8, 40c924 <find_profile+0x80>
  40c904:	mov	w8, wzr
  40c908:	mov	w0, w8
  40c90c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c910:	add	x1, x1, #0xec
  40c914:	ldr	x2, [sp, #24]
  40c918:	mov	w3, #0x2d9                 	// #729
  40c91c:	ldr	x4, [sp, #16]
  40c920:	bl	404150 <log_assert_failed_realm@plt>
  40c924:	ldur	x8, [x29, #-32]
  40c928:	cmp	x8, #0x0
  40c92c:	cset	w9, ne  // ne = any
  40c930:	mov	w10, #0x1                   	// #1
  40c934:	eor	w9, w9, #0x1
  40c938:	eor	w9, w9, w10
  40c93c:	eor	w9, w9, w10
  40c940:	and	w9, w9, #0x1
  40c944:	mov	w0, w9
  40c948:	sxtw	x8, w0
  40c94c:	cbz	x8, 40c970 <find_profile+0xcc>
  40c950:	mov	w8, wzr
  40c954:	mov	w0, w8
  40c958:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  40c95c:	add	x1, x1, #0xabc
  40c960:	ldr	x2, [sp, #24]
  40c964:	mov	w3, #0x2da                 	// #730
  40c968:	ldr	x4, [sp, #16]
  40c96c:	bl	404150 <log_assert_failed_realm@plt>
  40c970:	ldur	x0, [x29, #-24]
  40c974:	mov	w1, #0x2e                  	// #46
  40c978:	bl	404750 <strrchr@plt>
  40c97c:	stur	x0, [x29, #-48]
  40c980:	cmp	x0, #0x0
  40c984:	cset	w8, ne  // ne = any
  40c988:	mov	w9, #0x1                   	// #1
  40c98c:	eor	w8, w8, #0x1
  40c990:	eor	w8, w8, w9
  40c994:	eor	w8, w8, w9
  40c998:	and	w8, w8, #0x1
  40c99c:	mov	w0, w8
  40c9a0:	sxtw	x10, w0
  40c9a4:	cbz	x10, 40c9c8 <find_profile+0x124>
  40c9a8:	mov	w8, wzr
  40c9ac:	mov	w0, w8
  40c9b0:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40c9b4:	add	x1, x1, #0x7ec
  40c9b8:	ldr	x2, [sp, #24]
  40c9bc:	mov	w3, #0x2dc                 	// #732
  40c9c0:	ldr	x4, [sp, #16]
  40c9c4:	bl	404150 <log_assert_failed_realm@plt>
  40c9c8:	adrp	x8, 413000 <manager_connect_bus+0x4e4>
  40c9cc:	add	x8, x8, #0x220
  40c9d0:	stur	x8, [x29, #-40]
  40c9d4:	ldur	x8, [x29, #-40]
  40c9d8:	mov	w9, #0x0                   	// #0
  40c9dc:	str	w9, [sp, #12]
  40c9e0:	cbz	x8, 40c9f8 <find_profile+0x154>
  40c9e4:	ldur	x8, [x29, #-40]
  40c9e8:	ldrb	w9, [x8]
  40c9ec:	cmp	w9, #0x0
  40c9f0:	cset	w9, ne  // ne = any
  40c9f4:	str	w9, [sp, #12]
  40c9f8:	ldr	w8, [sp, #12]
  40c9fc:	tbnz	w8, #0, 40ca04 <find_profile+0x160>
  40ca00:	b	40cb18 <find_profile+0x274>
  40ca04:	ldur	x0, [x29, #-40]
  40ca08:	ldur	x2, [x29, #-16]
  40ca0c:	ldur	x8, [x29, #-48]
  40ca10:	add	x4, x8, #0x1
  40ca14:	adrp	x8, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40ca18:	add	x8, x8, #0x805
  40ca1c:	mov	x1, x8
  40ca20:	mov	x3, x8
  40ca24:	adrp	x5, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40ca28:	add	x5, x5, #0x807
  40ca2c:	mov	x8, xzr
  40ca30:	mov	x6, x8
  40ca34:	bl	404440 <strjoin_real@plt>
  40ca38:	str	x0, [sp, #56]
  40ca3c:	ldr	x8, [sp, #56]
  40ca40:	cbnz	x8, 40ca58 <find_profile+0x1b4>
  40ca44:	mov	w8, #0xfffffff4            	// #-12
  40ca48:	stur	w8, [x29, #-4]
  40ca4c:	mov	w8, #0x1                   	// #1
  40ca50:	str	w8, [sp, #52]
  40ca54:	b	40cae4 <find_profile+0x240>
  40ca58:	ldr	x1, [sp, #56]
  40ca5c:	mov	w0, #0xffffff9c            	// #-100
  40ca60:	mov	w8, wzr
  40ca64:	mov	w2, w8
  40ca68:	mov	w3, #0x100                 	// #256
  40ca6c:	bl	4047e0 <faccessat@plt>
  40ca70:	cmp	w0, #0x0
  40ca74:	cset	w8, lt  // lt = tstop
  40ca78:	tbnz	w8, #0, 40cab0 <find_profile+0x20c>
  40ca7c:	ldr	x8, [sp, #56]
  40ca80:	str	x8, [sp, #40]
  40ca84:	mov	x8, xzr
  40ca88:	str	x8, [sp, #56]
  40ca8c:	ldr	x8, [sp, #40]
  40ca90:	str	x8, [sp, #32]
  40ca94:	ldr	x8, [sp, #32]
  40ca98:	ldur	x9, [x29, #-32]
  40ca9c:	str	x8, [x9]
  40caa0:	stur	wzr, [x29, #-4]
  40caa4:	mov	w10, #0x1                   	// #1
  40caa8:	str	w10, [sp, #52]
  40caac:	b	40cae4 <find_profile+0x240>
  40cab0:	bl	404270 <__errno_location@plt>
  40cab4:	ldr	w8, [x0]
  40cab8:	cmp	w8, #0x2
  40cabc:	b.eq	40cae0 <find_profile+0x23c>  // b.none
  40cac0:	bl	404270 <__errno_location@plt>
  40cac4:	ldr	w8, [x0]
  40cac8:	mov	w9, wzr
  40cacc:	subs	w8, w9, w8
  40cad0:	stur	w8, [x29, #-4]
  40cad4:	mov	w8, #0x1                   	// #1
  40cad8:	str	w8, [sp, #52]
  40cadc:	b	40cae4 <find_profile+0x240>
  40cae0:	str	wzr, [sp, #52]
  40cae4:	add	x0, sp, #0x38
  40cae8:	bl	405118 <freep>
  40caec:	ldr	w8, [sp, #52]
  40caf0:	cbz	w8, 40cafc <find_profile+0x258>
  40caf4:	b	40caf8 <find_profile+0x254>
  40caf8:	b	40cb20 <find_profile+0x27c>
  40cafc:	ldur	x0, [x29, #-40]
  40cb00:	mov	w8, wzr
  40cb04:	mov	w1, w8
  40cb08:	bl	4043b0 <strchr@plt>
  40cb0c:	add	x9, x0, #0x1
  40cb10:	stur	x9, [x29, #-40]
  40cb14:	b	40c9d4 <find_profile+0x130>
  40cb18:	mov	w8, #0xfffffffe            	// #-2
  40cb1c:	stur	w8, [x29, #-4]
  40cb20:	ldur	w0, [x29, #-4]
  40cb24:	ldp	x29, x30, [sp, #112]
  40cb28:	add	sp, sp, #0x80
  40cb2c:	ret

000000000040cb30 <copy_file_atomic>:
  40cb30:	sub	sp, sp, #0x30
  40cb34:	stp	x29, x30, [sp, #32]
  40cb38:	add	x29, sp, #0x20
  40cb3c:	mov	x8, xzr
  40cb40:	mov	x6, x8
  40cb44:	stur	x0, [x29, #-8]
  40cb48:	str	x1, [sp, #16]
  40cb4c:	str	w2, [sp, #12]
  40cb50:	str	w3, [sp, #8]
  40cb54:	str	w4, [sp, #4]
  40cb58:	str	w5, [sp]
  40cb5c:	ldur	x0, [x29, #-8]
  40cb60:	ldr	x1, [sp, #16]
  40cb64:	ldr	w2, [sp, #12]
  40cb68:	ldr	w3, [sp, #8]
  40cb6c:	ldr	w4, [sp, #4]
  40cb70:	ldr	w5, [sp]
  40cb74:	mov	x7, x8
  40cb78:	bl	4047f0 <copy_file_atomic_full@plt>
  40cb7c:	ldp	x29, x30, [sp, #32]
  40cb80:	add	sp, sp, #0x30
  40cb84:	ret

000000000040cb88 <set_free_free>:
  40cb88:	sub	sp, sp, #0x20
  40cb8c:	stp	x29, x30, [sp, #16]
  40cb90:	add	x29, sp, #0x10
  40cb94:	adrp	x1, 404000 <_init-0xc8>
  40cb98:	add	x1, x1, #0x140
  40cb9c:	mov	x8, xzr
  40cba0:	str	x0, [sp, #8]
  40cba4:	ldr	x0, [sp, #8]
  40cba8:	mov	x2, x8
  40cbac:	bl	404770 <internal_hashmap_free@plt>
  40cbb0:	ldp	x29, x30, [sp, #16]
  40cbb4:	add	sp, sp, #0x20
  40cbb8:	ret

000000000040cbbc <fclosep>:
  40cbbc:	sub	sp, sp, #0x20
  40cbc0:	stp	x29, x30, [sp, #16]
  40cbc4:	add	x29, sp, #0x10
  40cbc8:	str	x0, [sp, #8]
  40cbcc:	ldr	x8, [sp, #8]
  40cbd0:	ldr	x0, [x8]
  40cbd4:	bl	404800 <safe_fclose@plt>
  40cbd8:	ldp	x29, x30, [sp, #16]
  40cbdc:	add	sp, sp, #0x20
  40cbe0:	ret

000000000040cbe4 <read_line>:
  40cbe4:	sub	sp, sp, #0x30
  40cbe8:	stp	x29, x30, [sp, #32]
  40cbec:	add	x29, sp, #0x20
  40cbf0:	mov	w8, wzr
  40cbf4:	stur	x0, [x29, #-8]
  40cbf8:	str	x1, [sp, #16]
  40cbfc:	str	x2, [sp, #8]
  40cc00:	ldur	x0, [x29, #-8]
  40cc04:	ldr	x1, [sp, #16]
  40cc08:	ldr	x3, [sp, #8]
  40cc0c:	mov	w2, w8
  40cc10:	bl	404810 <read_line_full@plt>
  40cc14:	ldp	x29, x30, [sp, #32]
  40cc18:	add	sp, sp, #0x30
  40cc1c:	ret

000000000040cc20 <marker_matches_image>:
  40cc20:	sub	sp, sp, #0x70
  40cc24:	stp	x29, x30, [sp, #96]
  40cc28:	add	x29, sp, #0x60
  40cc2c:	adrp	x8, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cc30:	add	x8, x8, #0x805
  40cc34:	adrp	x9, 413000 <manager_connect_bus+0x4e4>
  40cc38:	add	x9, x9, #0x4ee
  40cc3c:	add	x9, x9, #0x3
  40cc40:	stur	x0, [x29, #-16]
  40cc44:	stur	x1, [x29, #-24]
  40cc48:	str	x8, [sp, #32]
  40cc4c:	str	x9, [sp, #24]
  40cc50:	ldur	x8, [x29, #-16]
  40cc54:	cmp	x8, #0x0
  40cc58:	cset	w9, ne  // ne = any
  40cc5c:	mov	w10, #0x1                   	// #1
  40cc60:	eor	w9, w9, #0x1
  40cc64:	eor	w9, w9, w10
  40cc68:	eor	w9, w9, w10
  40cc6c:	and	w9, w9, #0x1
  40cc70:	mov	w0, w9
  40cc74:	sxtw	x8, w0
  40cc78:	cbz	x8, 40cca0 <marker_matches_image+0x80>
  40cc7c:	mov	w8, wzr
  40cc80:	mov	w0, w8
  40cc84:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cc88:	add	x1, x1, #0x9b6
  40cc8c:	ldr	x2, [sp, #24]
  40cc90:	mov	w3, #0x406                 	// #1030
  40cc94:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cc98:	add	x4, x4, #0x9bd
  40cc9c:	bl	404150 <log_assert_failed_realm@plt>
  40cca0:	ldur	x8, [x29, #-24]
  40cca4:	cmp	x8, #0x0
  40cca8:	cset	w9, ne  // ne = any
  40ccac:	mov	w10, #0x1                   	// #1
  40ccb0:	eor	w9, w9, #0x1
  40ccb4:	eor	w9, w9, w10
  40ccb8:	eor	w9, w9, w10
  40ccbc:	and	w9, w9, #0x1
  40ccc0:	mov	w0, w9
  40ccc4:	sxtw	x8, w0
  40ccc8:	cbz	x8, 40ccf0 <marker_matches_image+0xd0>
  40cccc:	mov	w8, wzr
  40ccd0:	mov	w0, w8
  40ccd4:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  40ccd8:	add	x1, x1, #0x558
  40ccdc:	ldr	x2, [sp, #24]
  40cce0:	mov	w3, #0x407                 	// #1031
  40cce4:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cce8:	add	x4, x4, #0x9bd
  40ccec:	bl	404150 <log_assert_failed_realm@plt>
  40ccf0:	ldur	x0, [x29, #-16]
  40ccf4:	bl	404610 <last_path_component@plt>
  40ccf8:	stur	x0, [x29, #-32]
  40ccfc:	ldur	x0, [x29, #-24]
  40cd00:	bl	404820 <image_name_is_valid@plt>
  40cd04:	tbnz	w0, #0, 40cd0c <marker_matches_image+0xec>
  40cd08:	b	40cd88 <marker_matches_image+0x168>
  40cd0c:	ldur	x0, [x29, #-32]
  40cd10:	ldur	x1, [x29, #-24]
  40cd14:	bl	40bcc8 <startswith>
  40cd18:	stur	x0, [x29, #-40]
  40cd1c:	ldur	x8, [x29, #-40]
  40cd20:	cbnz	x8, 40cd34 <marker_matches_image+0x114>
  40cd24:	mov	w8, wzr
  40cd28:	and	w8, w8, #0x1
  40cd2c:	sturb	w8, [x29, #-1]
  40cd30:	b	40cdec <marker_matches_image+0x1cc>
  40cd34:	ldur	x8, [x29, #-40]
  40cd38:	ldur	x0, [x29, #-40]
  40cd3c:	ldr	x1, [sp, #32]
  40cd40:	str	x8, [sp, #16]
  40cd44:	bl	404830 <strspn@plt>
  40cd48:	ldr	x8, [sp, #16]
  40cd4c:	ldrb	w9, [x8, x0]
  40cd50:	mov	w10, #0x1                   	// #1
  40cd54:	str	w10, [sp, #12]
  40cd58:	cbz	w9, 40cd78 <marker_matches_image+0x158>
  40cd5c:	ldur	x0, [x29, #-40]
  40cd60:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cd64:	add	x1, x1, #0x9f4
  40cd68:	bl	404190 <strcmp@plt>
  40cd6c:	cmp	w0, #0x0
  40cd70:	cset	w8, eq  // eq = none
  40cd74:	str	w8, [sp, #12]
  40cd78:	ldr	w8, [sp, #12]
  40cd7c:	and	w8, w8, #0x1
  40cd80:	sturb	w8, [x29, #-1]
  40cd84:	b	40cdec <marker_matches_image+0x1cc>
  40cd88:	ldur	x0, [x29, #-32]
  40cd8c:	ldr	x1, [sp, #32]
  40cd90:	bl	404840 <strcspn@plt>
  40cd94:	str	x0, [sp, #40]
  40cd98:	ldur	x0, [x29, #-24]
  40cd9c:	bl	404610 <last_path_component@plt>
  40cda0:	str	x0, [sp, #48]
  40cda4:	ldr	x0, [sp, #48]
  40cda8:	ldr	x1, [sp, #32]
  40cdac:	bl	404840 <strcspn@plt>
  40cdb0:	ldr	x8, [sp, #40]
  40cdb4:	cmp	x0, x8
  40cdb8:	b.eq	40cdcc <marker_matches_image+0x1ac>  // b.none
  40cdbc:	mov	w8, wzr
  40cdc0:	and	w8, w8, #0x1
  40cdc4:	sturb	w8, [x29, #-1]
  40cdc8:	b	40cdec <marker_matches_image+0x1cc>
  40cdcc:	ldur	x0, [x29, #-32]
  40cdd0:	ldr	x1, [sp, #48]
  40cdd4:	ldr	x2, [sp, #40]
  40cdd8:	bl	404850 <memcmp@plt>
  40cddc:	cmp	w0, #0x0
  40cde0:	cset	w8, eq  // eq = none
  40cde4:	and	w8, w8, #0x1
  40cde8:	sturb	w8, [x29, #-1]
  40cdec:	ldurb	w8, [x29, #-1]
  40cdf0:	and	w0, w8, #0x1
  40cdf4:	ldp	x29, x30, [sp, #96]
  40cdf8:	add	sp, sp, #0x70
  40cdfc:	ret

000000000040ce00 <set_size>:
  40ce00:	sub	sp, sp, #0x20
  40ce04:	stp	x29, x30, [sp, #16]
  40ce08:	add	x29, sp, #0x10
  40ce0c:	str	x0, [sp, #8]
  40ce10:	ldr	x0, [sp, #8]
  40ce14:	bl	404170 <internal_hashmap_size@plt>
  40ce18:	ldp	x29, x30, [sp, #16]
  40ce1c:	add	sp, sp, #0x20
  40ce20:	ret

000000000040ce24 <property_get_pool_path>:
  40ce24:	sub	sp, sp, #0x50
  40ce28:	stp	x29, x30, [sp, #64]
  40ce2c:	add	x29, sp, #0x40
  40ce30:	adrp	x8, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40ce34:	add	x8, x8, #0xd3f
  40ce38:	add	x8, x8, #0x3
  40ce3c:	stur	x0, [x29, #-8]
  40ce40:	stur	x1, [x29, #-16]
  40ce44:	stur	x2, [x29, #-24]
  40ce48:	str	x3, [sp, #32]
  40ce4c:	str	x4, [sp, #24]
  40ce50:	str	x5, [sp, #16]
  40ce54:	str	x6, [sp, #8]
  40ce58:	str	x8, [sp]
  40ce5c:	ldur	x8, [x29, #-8]
  40ce60:	cmp	x8, #0x0
  40ce64:	cset	w9, ne  // ne = any
  40ce68:	mov	w10, #0x1                   	// #1
  40ce6c:	eor	w9, w9, #0x1
  40ce70:	eor	w9, w9, w10
  40ce74:	eor	w9, w9, w10
  40ce78:	and	w9, w9, #0x1
  40ce7c:	mov	w0, w9
  40ce80:	sxtw	x8, w0
  40ce84:	cbz	x8, 40ceac <property_get_pool_path+0x88>
  40ce88:	mov	w8, wzr
  40ce8c:	mov	w0, w8
  40ce90:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40ce94:	add	x1, x1, #0xdb2
  40ce98:	ldr	x2, [sp]
  40ce9c:	mov	w3, #0x1c                  	// #28
  40cea0:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cea4:	add	x4, x4, #0xdb6
  40cea8:	bl	404150 <log_assert_failed_realm@plt>
  40ceac:	ldr	x8, [sp, #24]
  40ceb0:	cmp	x8, #0x0
  40ceb4:	cset	w9, ne  // ne = any
  40ceb8:	mov	w10, #0x1                   	// #1
  40cebc:	eor	w9, w9, #0x1
  40cec0:	eor	w9, w9, w10
  40cec4:	eor	w9, w9, w10
  40cec8:	and	w9, w9, #0x1
  40cecc:	mov	w0, w9
  40ced0:	sxtw	x8, w0
  40ced4:	cbz	x8, 40cefc <property_get_pool_path+0xd8>
  40ced8:	mov	w8, wzr
  40cedc:	mov	w0, w8
  40cee0:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cee4:	add	x1, x1, #0xe2f
  40cee8:	ldr	x2, [sp]
  40ceec:	mov	w3, #0x1d                  	// #29
  40cef0:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cef4:	add	x4, x4, #0xdb6
  40cef8:	bl	404150 <log_assert_failed_realm@plt>
  40cefc:	ldr	x0, [sp, #24]
  40cf00:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cf04:	add	x1, x1, #0xc4e
  40cf08:	adrp	x2, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cf0c:	add	x2, x2, #0xe35
  40cf10:	bl	404870 <sd_bus_message_append@plt>
  40cf14:	ldp	x29, x30, [sp, #64]
  40cf18:	add	sp, sp, #0x50
  40cf1c:	ret

000000000040cf20 <property_get_pool_usage>:
  40cf20:	sub	sp, sp, #0x90
  40cf24:	stp	x29, x30, [sp, #128]
  40cf28:	add	x29, sp, #0x80
  40cf2c:	mov	w8, #0xffffffff            	// #-1
  40cf30:	mov	x9, #0xffffffffffffffff    	// #-1
  40cf34:	adrp	x10, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cf38:	add	x10, x10, #0xd3f
  40cf3c:	add	x10, x10, #0x3
  40cf40:	stur	x0, [x29, #-8]
  40cf44:	stur	x1, [x29, #-16]
  40cf48:	stur	x2, [x29, #-24]
  40cf4c:	stur	x3, [x29, #-32]
  40cf50:	stur	x4, [x29, #-40]
  40cf54:	stur	x5, [x29, #-48]
  40cf58:	stur	x6, [x29, #-56]
  40cf5c:	stur	w8, [x29, #-60]
  40cf60:	str	x9, [sp, #56]
  40cf64:	str	x10, [sp, #16]
  40cf68:	ldur	x8, [x29, #-8]
  40cf6c:	cmp	x8, #0x0
  40cf70:	cset	w9, ne  // ne = any
  40cf74:	mov	w10, #0x1                   	// #1
  40cf78:	eor	w9, w9, #0x1
  40cf7c:	eor	w9, w9, w10
  40cf80:	eor	w9, w9, w10
  40cf84:	and	w9, w9, #0x1
  40cf88:	mov	w0, w9
  40cf8c:	sxtw	x8, w0
  40cf90:	cbz	x8, 40cfb8 <property_get_pool_usage+0x98>
  40cf94:	mov	w8, wzr
  40cf98:	mov	w0, w8
  40cf9c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cfa0:	add	x1, x1, #0xdb2
  40cfa4:	ldr	x2, [sp, #16]
  40cfa8:	mov	w3, #0x2e                  	// #46
  40cfac:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cfb0:	add	x4, x4, #0xe48
  40cfb4:	bl	404150 <log_assert_failed_realm@plt>
  40cfb8:	ldur	x8, [x29, #-40]
  40cfbc:	cmp	x8, #0x0
  40cfc0:	cset	w9, ne  // ne = any
  40cfc4:	mov	w10, #0x1                   	// #1
  40cfc8:	eor	w9, w9, #0x1
  40cfcc:	eor	w9, w9, w10
  40cfd0:	eor	w9, w9, w10
  40cfd4:	and	w9, w9, #0x1
  40cfd8:	mov	w0, w9
  40cfdc:	sxtw	x8, w0
  40cfe0:	cbz	x8, 40d008 <property_get_pool_usage+0xe8>
  40cfe4:	mov	w8, wzr
  40cfe8:	mov	w0, w8
  40cfec:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40cff0:	add	x1, x1, #0xe2f
  40cff4:	ldr	x2, [sp, #16]
  40cff8:	mov	w3, #0x2f                  	// #47
  40cffc:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d000:	add	x4, x4, #0xe48
  40d004:	bl	404150 <log_assert_failed_realm@plt>
  40d008:	adrp	x0, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d00c:	add	x0, x0, #0xe35
  40d010:	mov	w1, #0x4000                	// #16384
  40d014:	movk	w1, #0x8, lsl #16
  40d018:	bl	404880 <open64@plt>
  40d01c:	stur	w0, [x29, #-60]
  40d020:	ldur	w8, [x29, #-60]
  40d024:	cmp	w8, #0x0
  40d028:	cset	w8, lt  // lt = tstop
  40d02c:	tbnz	w8, #0, 40d058 <property_get_pool_usage+0x138>
  40d030:	ldur	w0, [x29, #-60]
  40d034:	mov	x8, xzr
  40d038:	mov	x1, x8
  40d03c:	add	x2, sp, #0x18
  40d040:	bl	404890 <btrfs_subvol_get_subtree_quota_fd@plt>
  40d044:	cmp	w0, #0x0
  40d048:	cset	w9, lt  // lt = tstop
  40d04c:	tbnz	w9, #0, 40d058 <property_get_pool_usage+0x138>
  40d050:	ldr	x8, [sp, #24]
  40d054:	str	x8, [sp, #56]
  40d058:	ldur	x0, [x29, #-40]
  40d05c:	ldr	x2, [sp, #56]
  40d060:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d064:	add	x1, x1, #0xc5a
  40d068:	bl	404870 <sd_bus_message_append@plt>
  40d06c:	sub	x8, x29, #0x3c
  40d070:	str	w0, [sp, #12]
  40d074:	mov	x0, x8
  40d078:	bl	40e304 <closep>
  40d07c:	ldr	w0, [sp, #12]
  40d080:	ldp	x29, x30, [sp, #128]
  40d084:	add	sp, sp, #0x90
  40d088:	ret

000000000040d08c <property_get_pool_limit>:
  40d08c:	sub	sp, sp, #0x90
  40d090:	stp	x29, x30, [sp, #128]
  40d094:	add	x29, sp, #0x80
  40d098:	mov	w8, #0xffffffff            	// #-1
  40d09c:	mov	x9, #0xffffffffffffffff    	// #-1
  40d0a0:	adrp	x10, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d0a4:	add	x10, x10, #0xd3f
  40d0a8:	add	x10, x10, #0x3
  40d0ac:	stur	x0, [x29, #-8]
  40d0b0:	stur	x1, [x29, #-16]
  40d0b4:	stur	x2, [x29, #-24]
  40d0b8:	stur	x3, [x29, #-32]
  40d0bc:	stur	x4, [x29, #-40]
  40d0c0:	stur	x5, [x29, #-48]
  40d0c4:	stur	x6, [x29, #-56]
  40d0c8:	stur	w8, [x29, #-60]
  40d0cc:	str	x9, [sp, #56]
  40d0d0:	str	x10, [sp, #16]
  40d0d4:	ldur	x8, [x29, #-8]
  40d0d8:	cmp	x8, #0x0
  40d0dc:	cset	w9, ne  // ne = any
  40d0e0:	mov	w10, #0x1                   	// #1
  40d0e4:	eor	w9, w9, #0x1
  40d0e8:	eor	w9, w9, w10
  40d0ec:	eor	w9, w9, w10
  40d0f0:	and	w9, w9, #0x1
  40d0f4:	mov	w0, w9
  40d0f8:	sxtw	x8, w0
  40d0fc:	cbz	x8, 40d124 <property_get_pool_limit+0x98>
  40d100:	mov	w8, wzr
  40d104:	mov	w0, w8
  40d108:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d10c:	add	x1, x1, #0xdb2
  40d110:	ldr	x2, [sp, #16]
  40d114:	mov	w3, #0x48                  	// #72
  40d118:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d11c:	add	x4, x4, #0xec2
  40d120:	bl	404150 <log_assert_failed_realm@plt>
  40d124:	ldur	x8, [x29, #-40]
  40d128:	cmp	x8, #0x0
  40d12c:	cset	w9, ne  // ne = any
  40d130:	mov	w10, #0x1                   	// #1
  40d134:	eor	w9, w9, #0x1
  40d138:	eor	w9, w9, w10
  40d13c:	eor	w9, w9, w10
  40d140:	and	w9, w9, #0x1
  40d144:	mov	w0, w9
  40d148:	sxtw	x8, w0
  40d14c:	cbz	x8, 40d174 <property_get_pool_limit+0xe8>
  40d150:	mov	w8, wzr
  40d154:	mov	w0, w8
  40d158:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d15c:	add	x1, x1, #0xe2f
  40d160:	ldr	x2, [sp, #16]
  40d164:	mov	w3, #0x49                  	// #73
  40d168:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d16c:	add	x4, x4, #0xec2
  40d170:	bl	404150 <log_assert_failed_realm@plt>
  40d174:	adrp	x0, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d178:	add	x0, x0, #0xe35
  40d17c:	mov	w1, #0x4000                	// #16384
  40d180:	movk	w1, #0x8, lsl #16
  40d184:	bl	404880 <open64@plt>
  40d188:	stur	w0, [x29, #-60]
  40d18c:	ldur	w8, [x29, #-60]
  40d190:	cmp	w8, #0x0
  40d194:	cset	w8, lt  // lt = tstop
  40d198:	tbnz	w8, #0, 40d1c4 <property_get_pool_limit+0x138>
  40d19c:	ldur	w0, [x29, #-60]
  40d1a0:	mov	x8, xzr
  40d1a4:	mov	x1, x8
  40d1a8:	add	x2, sp, #0x18
  40d1ac:	bl	404890 <btrfs_subvol_get_subtree_quota_fd@plt>
  40d1b0:	cmp	w0, #0x0
  40d1b4:	cset	w9, lt  // lt = tstop
  40d1b8:	tbnz	w9, #0, 40d1c4 <property_get_pool_limit+0x138>
  40d1bc:	ldr	x8, [sp, #40]
  40d1c0:	str	x8, [sp, #56]
  40d1c4:	ldur	x0, [x29, #-40]
  40d1c8:	ldr	x2, [sp, #56]
  40d1cc:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d1d0:	add	x1, x1, #0xc5a
  40d1d4:	bl	404870 <sd_bus_message_append@plt>
  40d1d8:	sub	x8, x29, #0x3c
  40d1dc:	str	w0, [sp, #12]
  40d1e0:	mov	x0, x8
  40d1e4:	bl	40e304 <closep>
  40d1e8:	ldr	w0, [sp, #12]
  40d1ec:	ldp	x29, x30, [sp, #128]
  40d1f0:	add	sp, sp, #0x90
  40d1f4:	ret

000000000040d1f8 <property_get_profiles>:
  40d1f8:	sub	sp, sp, #0x70
  40d1fc:	stp	x29, x30, [sp, #96]
  40d200:	add	x29, sp, #0x60
  40d204:	mov	x8, xzr
  40d208:	adrp	x9, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d20c:	add	x9, x9, #0xd3f
  40d210:	add	x9, x9, #0x3
  40d214:	stur	x0, [x29, #-16]
  40d218:	stur	x1, [x29, #-24]
  40d21c:	stur	x2, [x29, #-32]
  40d220:	stur	x3, [x29, #-40]
  40d224:	str	x4, [sp, #48]
  40d228:	str	x5, [sp, #40]
  40d22c:	str	x6, [sp, #32]
  40d230:	str	x8, [sp, #24]
  40d234:	str	x9, [sp, #8]
  40d238:	ldur	x8, [x29, #-16]
  40d23c:	cmp	x8, #0x0
  40d240:	cset	w9, ne  // ne = any
  40d244:	mov	w10, #0x1                   	// #1
  40d248:	eor	w9, w9, #0x1
  40d24c:	eor	w9, w9, w10
  40d250:	eor	w9, w9, w10
  40d254:	and	w9, w9, #0x1
  40d258:	mov	w0, w9
  40d25c:	sxtw	x8, w0
  40d260:	cbz	x8, 40d288 <property_get_profiles+0x90>
  40d264:	mov	w8, wzr
  40d268:	mov	w0, w8
  40d26c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d270:	add	x1, x1, #0xdb2
  40d274:	ldr	x2, [sp, #8]
  40d278:	mov	w3, #0x62                  	// #98
  40d27c:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d280:	add	x4, x4, #0xf3c
  40d284:	bl	404150 <log_assert_failed_realm@plt>
  40d288:	ldr	x8, [sp, #48]
  40d28c:	cmp	x8, #0x0
  40d290:	cset	w9, ne  // ne = any
  40d294:	mov	w10, #0x1                   	// #1
  40d298:	eor	w9, w9, #0x1
  40d29c:	eor	w9, w9, w10
  40d2a0:	eor	w9, w9, w10
  40d2a4:	and	w9, w9, #0x1
  40d2a8:	mov	w0, w9
  40d2ac:	sxtw	x8, w0
  40d2b0:	cbz	x8, 40d2d8 <property_get_profiles+0xe0>
  40d2b4:	mov	w8, wzr
  40d2b8:	mov	w0, w8
  40d2bc:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d2c0:	add	x1, x1, #0xe2f
  40d2c4:	ldr	x2, [sp, #8]
  40d2c8:	mov	w3, #0x63                  	// #99
  40d2cc:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d2d0:	add	x4, x4, #0xf3c
  40d2d4:	bl	404150 <log_assert_failed_realm@plt>
  40d2d8:	add	x0, sp, #0x18
  40d2dc:	bl	40a564 <portable_get_profiles>
  40d2e0:	str	w0, [sp, #20]
  40d2e4:	ldr	w8, [sp, #20]
  40d2e8:	cmp	w8, #0x0
  40d2ec:	cset	w8, ge  // ge = tcont
  40d2f0:	tbnz	w8, #0, 40d308 <property_get_profiles+0x110>
  40d2f4:	ldr	w8, [sp, #20]
  40d2f8:	stur	w8, [x29, #-4]
  40d2fc:	mov	w8, #0x1                   	// #1
  40d300:	str	w8, [sp, #16]
  40d304:	b	40d320 <property_get_profiles+0x128>
  40d308:	ldr	x0, [sp, #48]
  40d30c:	ldr	x1, [sp, #24]
  40d310:	bl	4043a0 <sd_bus_message_append_strv@plt>
  40d314:	stur	w0, [x29, #-4]
  40d318:	mov	w8, #0x1                   	// #1
  40d31c:	str	w8, [sp, #16]
  40d320:	add	x0, sp, #0x18
  40d324:	bl	40e32c <strv_freep>
  40d328:	ldur	w0, [x29, #-4]
  40d32c:	ldp	x29, x30, [sp, #96]
  40d330:	add	sp, sp, #0x70
  40d334:	ret

000000000040d338 <method_get_image>:
  40d338:	sub	sp, sp, #0x60
  40d33c:	stp	x29, x30, [sp, #80]
  40d340:	add	x29, sp, #0x50
  40d344:	mov	x8, xzr
  40d348:	adrp	x9, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d34c:	add	x9, x9, #0xd3f
  40d350:	add	x9, x9, #0x3
  40d354:	stur	x0, [x29, #-16]
  40d358:	stur	x1, [x29, #-24]
  40d35c:	stur	x2, [x29, #-32]
  40d360:	str	x8, [sp, #40]
  40d364:	ldur	x8, [x29, #-24]
  40d368:	str	x8, [sp, #32]
  40d36c:	str	x9, [sp]
  40d370:	ldur	x8, [x29, #-16]
  40d374:	cmp	x8, #0x0
  40d378:	cset	w9, ne  // ne = any
  40d37c:	mov	w10, #0x1                   	// #1
  40d380:	eor	w9, w9, #0x1
  40d384:	eor	w9, w9, w10
  40d388:	eor	w9, w9, w10
  40d38c:	and	w9, w9, #0x1
  40d390:	mov	w0, w9
  40d394:	sxtw	x8, w0
  40d398:	cbz	x8, 40d3c0 <method_get_image+0x88>
  40d39c:	mov	w8, wzr
  40d3a0:	mov	w0, w8
  40d3a4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d3a8:	add	x1, x1, #0xfb4
  40d3ac:	ldr	x2, [sp]
  40d3b0:	mov	w3, #0x73                  	// #115
  40d3b4:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d3b8:	add	x4, x4, #0xfbc
  40d3bc:	bl	404150 <log_assert_failed_realm@plt>
  40d3c0:	ldr	x8, [sp, #32]
  40d3c4:	cmp	x8, #0x0
  40d3c8:	cset	w9, ne  // ne = any
  40d3cc:	mov	w10, #0x1                   	// #1
  40d3d0:	eor	w9, w9, #0x1
  40d3d4:	eor	w9, w9, w10
  40d3d8:	eor	w9, w9, w10
  40d3dc:	and	w9, w9, #0x1
  40d3e0:	mov	w0, w9
  40d3e4:	sxtw	x8, w0
  40d3e8:	cbz	x8, 40d410 <method_get_image+0xd8>
  40d3ec:	mov	w8, wzr
  40d3f0:	mov	w0, w8
  40d3f4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d3f8:	add	x1, x1, #0x420
  40d3fc:	ldr	x2, [sp]
  40d400:	mov	w3, #0x74                  	// #116
  40d404:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d408:	add	x4, x4, #0xfbc
  40d40c:	bl	404150 <log_assert_failed_realm@plt>
  40d410:	ldur	x0, [x29, #-16]
  40d414:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d418:	add	x1, x1, #0xc4e
  40d41c:	add	x2, sp, #0x18
  40d420:	bl	4048a0 <sd_bus_message_read@plt>
  40d424:	str	w0, [sp, #12]
  40d428:	ldr	w8, [sp, #12]
  40d42c:	cmp	w8, #0x0
  40d430:	cset	w8, ge  // ge = tcont
  40d434:	tbnz	w8, #0, 40d44c <method_get_image+0x114>
  40d438:	ldr	w8, [sp, #12]
  40d43c:	stur	w8, [x29, #-4]
  40d440:	mov	w8, #0x1                   	// #1
  40d444:	str	w8, [sp, #8]
  40d448:	b	40d4f4 <method_get_image+0x1bc>
  40d44c:	ldr	x0, [sp, #32]
  40d450:	ldur	x1, [x29, #-16]
  40d454:	ldr	x2, [sp, #24]
  40d458:	ldur	x7, [x29, #-32]
  40d45c:	mov	x8, xzr
  40d460:	mov	x3, x8
  40d464:	mov	w9, wzr
  40d468:	mov	w4, w9
  40d46c:	mov	x5, x8
  40d470:	add	x6, sp, #0x10
  40d474:	bl	40e83c <bus_image_acquire>
  40d478:	str	w0, [sp, #12]
  40d47c:	ldr	w9, [sp, #12]
  40d480:	cmp	w9, #0x0
  40d484:	cset	w9, ge  // ge = tcont
  40d488:	tbnz	w9, #0, 40d4a0 <method_get_image+0x168>
  40d48c:	ldr	w8, [sp, #12]
  40d490:	stur	w8, [x29, #-4]
  40d494:	mov	w8, #0x1                   	// #1
  40d498:	str	w8, [sp, #8]
  40d49c:	b	40d4f4 <method_get_image+0x1bc>
  40d4a0:	ldr	x0, [sp, #16]
  40d4a4:	add	x1, sp, #0x28
  40d4a8:	bl	4109f8 <bus_image_path>
  40d4ac:	str	w0, [sp, #12]
  40d4b0:	ldr	w8, [sp, #12]
  40d4b4:	cmp	w8, #0x0
  40d4b8:	cset	w8, ge  // ge = tcont
  40d4bc:	tbnz	w8, #0, 40d4d4 <method_get_image+0x19c>
  40d4c0:	ldr	w8, [sp, #12]
  40d4c4:	stur	w8, [x29, #-4]
  40d4c8:	mov	w8, #0x1                   	// #1
  40d4cc:	str	w8, [sp, #8]
  40d4d0:	b	40d4f4 <method_get_image+0x1bc>
  40d4d4:	ldur	x0, [x29, #-16]
  40d4d8:	ldr	x2, [sp, #40]
  40d4dc:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d4e0:	add	x1, x1, #0xc7b
  40d4e4:	bl	4048b0 <sd_bus_reply_method_return@plt>
  40d4e8:	stur	w0, [x29, #-4]
  40d4ec:	mov	w8, #0x1                   	// #1
  40d4f0:	str	w8, [sp, #8]
  40d4f4:	add	x0, sp, #0x28
  40d4f8:	bl	40e360 <freep>
  40d4fc:	ldur	w0, [x29, #-4]
  40d500:	ldp	x29, x30, [sp, #80]
  40d504:	add	sp, sp, #0x60
  40d508:	ret

000000000040d50c <method_list_images>:
  40d50c:	sub	sp, sp, #0x140
  40d510:	stp	x29, x30, [sp, #288]
  40d514:	str	x28, [sp, #304]
  40d518:	add	x29, sp, #0x120
  40d51c:	mov	x8, xzr
  40d520:	adrp	x9, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d524:	add	x9, x9, #0xd3f
  40d528:	add	x9, x9, #0x3
  40d52c:	stur	x0, [x29, #-16]
  40d530:	stur	x1, [x29, #-24]
  40d534:	stur	x2, [x29, #-32]
  40d538:	stur	x8, [x29, #-40]
  40d53c:	stur	x8, [x29, #-48]
  40d540:	ldur	x8, [x29, #-24]
  40d544:	stur	x8, [x29, #-56]
  40d548:	str	x9, [sp, #120]
  40d54c:	ldur	x8, [x29, #-16]
  40d550:	cmp	x8, #0x0
  40d554:	cset	w9, ne  // ne = any
  40d558:	mov	w10, #0x1                   	// #1
  40d55c:	eor	w9, w9, #0x1
  40d560:	eor	w9, w9, w10
  40d564:	eor	w9, w9, w10
  40d568:	and	w9, w9, #0x1
  40d56c:	mov	w0, w9
  40d570:	sxtw	x8, w0
  40d574:	cbz	x8, 40d59c <method_list_images+0x90>
  40d578:	mov	w8, wzr
  40d57c:	mov	w0, w8
  40d580:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d584:	add	x1, x1, #0xfb4
  40d588:	ldr	x2, [sp, #120]
  40d58c:	mov	w3, #0x8d                  	// #141
  40d590:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d594:	add	x4, x4, #0xffb
  40d598:	bl	404150 <log_assert_failed_realm@plt>
  40d59c:	ldur	x8, [x29, #-56]
  40d5a0:	cmp	x8, #0x0
  40d5a4:	cset	w9, ne  // ne = any
  40d5a8:	mov	w10, #0x1                   	// #1
  40d5ac:	eor	w9, w9, #0x1
  40d5b0:	eor	w9, w9, w10
  40d5b4:	eor	w9, w9, w10
  40d5b8:	and	w9, w9, #0x1
  40d5bc:	mov	w0, w9
  40d5c0:	sxtw	x8, w0
  40d5c4:	cbz	x8, 40d5ec <method_list_images+0xe0>
  40d5c8:	mov	w8, wzr
  40d5cc:	mov	w0, w8
  40d5d0:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d5d4:	add	x1, x1, #0x420
  40d5d8:	ldr	x2, [sp, #120]
  40d5dc:	mov	w3, #0x8e                  	// #142
  40d5e0:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40d5e4:	add	x4, x4, #0xffb
  40d5e8:	bl	404150 <log_assert_failed_realm@plt>
  40d5ec:	adrp	x0, 42f000 <__FRAME_END__+0x18438>
  40d5f0:	add	x0, x0, #0xfd8
  40d5f4:	bl	4042a0 <internal_hashmap_new@plt>
  40d5f8:	stur	x0, [x29, #-48]
  40d5fc:	ldur	x8, [x29, #-48]
  40d600:	cbnz	x8, 40d618 <method_list_images+0x10c>
  40d604:	mov	w8, #0xfffffff4            	// #-12
  40d608:	stur	w8, [x29, #-4]
  40d60c:	mov	w8, #0x1                   	// #1
  40d610:	stur	w8, [x29, #-88]
  40d614:	b	40d998 <method_list_images+0x48c>
  40d618:	ldur	x0, [x29, #-56]
  40d61c:	ldur	x1, [x29, #-48]
  40d620:	ldur	x2, [x29, #-32]
  40d624:	bl	411528 <manager_image_cache_discover>
  40d628:	stur	w0, [x29, #-84]
  40d62c:	ldur	w8, [x29, #-84]
  40d630:	cmp	w8, #0x0
  40d634:	cset	w8, ge  // ge = tcont
  40d638:	tbnz	w8, #0, 40d650 <method_list_images+0x144>
  40d63c:	ldur	w8, [x29, #-84]
  40d640:	stur	w8, [x29, #-4]
  40d644:	mov	w8, #0x1                   	// #1
  40d648:	stur	w8, [x29, #-88]
  40d64c:	b	40d998 <method_list_images+0x48c>
  40d650:	ldur	x0, [x29, #-16]
  40d654:	sub	x1, x29, #0x28
  40d658:	bl	4048c0 <sd_bus_message_new_method_return@plt>
  40d65c:	stur	w0, [x29, #-84]
  40d660:	ldur	w8, [x29, #-84]
  40d664:	cmp	w8, #0x0
  40d668:	cset	w8, ge  // ge = tcont
  40d66c:	tbnz	w8, #0, 40d684 <method_list_images+0x178>
  40d670:	ldur	w8, [x29, #-84]
  40d674:	stur	w8, [x29, #-4]
  40d678:	mov	w8, #0x1                   	// #1
  40d67c:	stur	w8, [x29, #-88]
  40d680:	b	40d998 <method_list_images+0x48c>
  40d684:	ldur	x0, [x29, #-40]
  40d688:	mov	w1, #0x61                  	// #97
  40d68c:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40d690:	add	x2, x2, #0x3c
  40d694:	bl	4048d0 <sd_bus_message_open_container@plt>
  40d698:	stur	w0, [x29, #-84]
  40d69c:	ldur	w8, [x29, #-84]
  40d6a0:	cmp	w8, #0x0
  40d6a4:	cset	w8, ge  // ge = tcont
  40d6a8:	tbnz	w8, #0, 40d6c0 <method_list_images+0x1b4>
  40d6ac:	ldur	w8, [x29, #-84]
  40d6b0:	stur	w8, [x29, #-4]
  40d6b4:	mov	w8, #0x1                   	// #1
  40d6b8:	stur	w8, [x29, #-88]
  40d6bc:	b	40d998 <method_list_images+0x48c>
  40d6c0:	sub	x8, x29, #0x68
  40d6c4:	mov	w9, #0xfffffffe            	// #-2
  40d6c8:	stur	w9, [x29, #-104]
  40d6cc:	mov	x10, xzr
  40d6d0:	str	x10, [x8, #8]
  40d6d4:	ldur	q0, [x29, #-104]
  40d6d8:	stur	q0, [x29, #-80]
  40d6dc:	ldur	x0, [x29, #-48]
  40d6e0:	sub	x1, x29, #0x50
  40d6e4:	sub	x2, x29, #0x40
  40d6e8:	mov	x8, xzr
  40d6ec:	mov	x3, x8
  40d6f0:	bl	40e3bc <hashmap_iterate>
  40d6f4:	tbnz	w0, #0, 40d6fc <method_list_images+0x1f0>
  40d6f8:	b	40d948 <method_list_images+0x43c>
  40d6fc:	stur	xzr, [x29, #-128]
  40d700:	stur	xzr, [x29, #-120]
  40d704:	stur	xzr, [x29, #-112]
  40d708:	mov	w8, #0xffffffff            	// #-1
  40d70c:	stur	w8, [x29, #-132]
  40d710:	add	x1, sp, #0x90
  40d714:	mov	x9, xzr
  40d718:	str	x9, [sp, #144]
  40d71c:	ldur	x0, [x29, #-64]
  40d720:	bl	4109f8 <bus_image_path>
  40d724:	stur	w0, [x29, #-84]
  40d728:	ldur	w8, [x29, #-84]
  40d72c:	cmp	w8, #0x0
  40d730:	cset	w8, ge  // ge = tcont
  40d734:	tbnz	w8, #0, 40d74c <method_list_images+0x240>
  40d738:	ldur	w8, [x29, #-84]
  40d73c:	stur	w8, [x29, #-4]
  40d740:	mov	w8, #0x1                   	// #1
  40d744:	stur	w8, [x29, #-88]
  40d748:	b	40d91c <method_list_images+0x410>
  40d74c:	ldur	x0, [x29, #-16]
  40d750:	bl	4048e0 <sd_bus_message_get_bus@plt>
  40d754:	ldur	x8, [x29, #-64]
  40d758:	ldr	x1, [x8, #16]
  40d75c:	mov	w9, wzr
  40d760:	mov	w2, w9
  40d764:	sub	x3, x29, #0x84
  40d768:	sub	x4, x29, #0x80
  40d76c:	bl	409c4c <portable_get_state>
  40d770:	stur	w0, [x29, #-84]
  40d774:	ldur	w9, [x29, #-84]
  40d778:	cmp	w9, #0x0
  40d77c:	cset	w9, ge  // ge = tcont
  40d780:	tbnz	w9, #0, 40d840 <method_list_images+0x334>
  40d784:	mov	w8, #0x7                   	// #7
  40d788:	str	w8, [sp, #140]
  40d78c:	ldur	w8, [x29, #-84]
  40d790:	str	w8, [sp, #136]
  40d794:	str	wzr, [sp, #132]
  40d798:	ldr	w0, [sp, #132]
  40d79c:	bl	4041e0 <log_get_max_level_realm@plt>
  40d7a0:	ldr	w8, [sp, #140]
  40d7a4:	and	w8, w8, #0x7
  40d7a8:	cmp	w0, w8
  40d7ac:	b.lt	40d824 <method_list_images+0x318>  // b.tstop
  40d7b0:	ldr	w8, [sp, #132]
  40d7b4:	ldr	w9, [sp, #140]
  40d7b8:	orr	w0, w9, w8, lsl #10
  40d7bc:	ldr	w1, [sp, #136]
  40d7c0:	ldur	x10, [x29, #-64]
  40d7c4:	ldr	x6, [x10, #16]
  40d7c8:	ldur	w8, [x29, #-84]
  40d7cc:	sub	x10, x29, #0x80
  40d7d0:	str	w0, [sp, #116]
  40d7d4:	mov	x0, x10
  40d7d8:	str	w1, [sp, #112]
  40d7dc:	mov	w1, w8
  40d7e0:	str	x6, [sp, #104]
  40d7e4:	bl	404370 <bus_error_message@plt>
  40d7e8:	ldr	w8, [sp, #116]
  40d7ec:	str	x0, [sp, #96]
  40d7f0:	mov	w0, w8
  40d7f4:	ldr	w1, [sp, #112]
  40d7f8:	ldr	x2, [sp, #120]
  40d7fc:	mov	w3, #0xb1                  	// #177
  40d800:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40d804:	add	x4, x4, #0x47
  40d808:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40d80c:	add	x5, x5, #0x5a
  40d810:	ldr	x6, [sp, #104]
  40d814:	ldr	x7, [sp, #96]
  40d818:	bl	4041f0 <log_internal_realm@plt>
  40d81c:	str	w0, [sp, #92]
  40d820:	b	40d838 <method_list_images+0x32c>
  40d824:	ldr	w0, [sp, #136]
  40d828:	bl	404200 <abs@plt>
  40d82c:	mov	w8, wzr
  40d830:	subs	w8, w8, w0, uxtb
  40d834:	str	w8, [sp, #92]
  40d838:	ldr	w8, [sp, #92]
  40d83c:	str	w8, [sp, #128]
  40d840:	ldur	x0, [x29, #-40]
  40d844:	ldur	x8, [x29, #-64]
  40d848:	ldr	x2, [x8, #8]
  40d84c:	ldur	x8, [x29, #-64]
  40d850:	ldr	w9, [x8, #4]
  40d854:	str	x0, [sp, #80]
  40d858:	mov	w0, w9
  40d85c:	str	x2, [sp, #72]
  40d860:	bl	4048f0 <image_type_to_string@plt>
  40d864:	ldur	x8, [x29, #-64]
  40d868:	ldrb	w9, [x8, #24]
  40d86c:	and	w4, w9, #0x1
  40d870:	ldur	x8, [x29, #-64]
  40d874:	ldr	x5, [x8, #32]
  40d878:	ldur	x8, [x29, #-64]
  40d87c:	ldr	x6, [x8, #40]
  40d880:	ldur	x8, [x29, #-64]
  40d884:	ldr	x7, [x8, #48]
  40d888:	ldur	w9, [x29, #-132]
  40d88c:	str	x0, [sp, #64]
  40d890:	mov	w0, w9
  40d894:	str	w4, [sp, #60]
  40d898:	str	x5, [sp, #48]
  40d89c:	str	x6, [sp, #40]
  40d8a0:	str	x7, [sp, #32]
  40d8a4:	bl	40a690 <portable_state_to_string>
  40d8a8:	ldr	x8, [sp, #144]
  40d8ac:	ldr	x10, [sp, #80]
  40d8b0:	str	x0, [sp, #24]
  40d8b4:	mov	x0, x10
  40d8b8:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40d8bc:	add	x1, x1, #0x3c
  40d8c0:	ldr	x2, [sp, #72]
  40d8c4:	ldr	x3, [sp, #64]
  40d8c8:	ldr	w4, [sp, #60]
  40d8cc:	ldr	x5, [sp, #48]
  40d8d0:	ldr	x6, [sp, #40]
  40d8d4:	ldr	x7, [sp, #32]
  40d8d8:	mov	x11, sp
  40d8dc:	ldr	x12, [sp, #24]
  40d8e0:	str	x12, [x11]
  40d8e4:	mov	x11, sp
  40d8e8:	str	x8, [x11, #8]
  40d8ec:	bl	404870 <sd_bus_message_append@plt>
  40d8f0:	stur	w0, [x29, #-84]
  40d8f4:	ldur	w9, [x29, #-84]
  40d8f8:	cmp	w9, #0x0
  40d8fc:	cset	w9, ge  // ge = tcont
  40d900:	tbnz	w9, #0, 40d918 <method_list_images+0x40c>
  40d904:	ldur	w8, [x29, #-84]
  40d908:	stur	w8, [x29, #-4]
  40d90c:	mov	w8, #0x1                   	// #1
  40d910:	stur	w8, [x29, #-88]
  40d914:	b	40d91c <method_list_images+0x410>
  40d918:	stur	wzr, [x29, #-88]
  40d91c:	add	x0, sp, #0x90
  40d920:	bl	40e360 <freep>
  40d924:	sub	x0, x29, #0x80
  40d928:	bl	404900 <sd_bus_error_free@plt>
  40d92c:	ldur	w8, [x29, #-88]
  40d930:	cmp	w8, #0x0
  40d934:	cset	w8, eq  // eq = none
  40d938:	eor	w8, w8, #0x1
  40d93c:	tbnz	w8, #0, 40d998 <method_list_images+0x48c>
  40d940:	b	40d944 <method_list_images+0x438>
  40d944:	b	40d6dc <method_list_images+0x1d0>
  40d948:	ldur	x0, [x29, #-40]
  40d94c:	bl	404910 <sd_bus_message_close_container@plt>
  40d950:	stur	w0, [x29, #-84]
  40d954:	ldur	w8, [x29, #-84]
  40d958:	cmp	w8, #0x0
  40d95c:	cset	w8, ge  // ge = tcont
  40d960:	tbnz	w8, #0, 40d978 <method_list_images+0x46c>
  40d964:	ldur	w8, [x29, #-84]
  40d968:	stur	w8, [x29, #-4]
  40d96c:	mov	w8, #0x1                   	// #1
  40d970:	stur	w8, [x29, #-88]
  40d974:	b	40d998 <method_list_images+0x48c>
  40d978:	ldur	x1, [x29, #-40]
  40d97c:	mov	x8, xzr
  40d980:	mov	x0, x8
  40d984:	mov	x2, x8
  40d988:	bl	404920 <sd_bus_send@plt>
  40d98c:	stur	w0, [x29, #-4]
  40d990:	mov	w9, #0x1                   	// #1
  40d994:	stur	w9, [x29, #-88]
  40d998:	sub	x0, x29, #0x30
  40d99c:	bl	40e388 <hashmap_freep>
  40d9a0:	sub	x0, x29, #0x28
  40d9a4:	bl	40e2d0 <sd_bus_message_unrefp>
  40d9a8:	ldur	w0, [x29, #-4]
  40d9ac:	ldr	x28, [sp, #304]
  40d9b0:	ldp	x29, x30, [sp, #288]
  40d9b4:	add	sp, sp, #0x140
  40d9b8:	ret

000000000040d9bc <method_get_image_os_release>:
  40d9bc:	sub	sp, sp, #0x30
  40d9c0:	stp	x29, x30, [sp, #32]
  40d9c4:	add	x29, sp, #0x20
  40d9c8:	adrp	x3, 40e000 <method_set_pool_limit+0x1b0>
  40d9cc:	add	x3, x3, #0x628
  40d9d0:	stur	x0, [x29, #-8]
  40d9d4:	str	x1, [sp, #16]
  40d9d8:	str	x2, [sp, #8]
  40d9dc:	ldr	x0, [sp, #16]
  40d9e0:	ldur	x1, [x29, #-8]
  40d9e4:	ldr	x2, [sp, #8]
  40d9e8:	bl	40e42c <redirect_method_to_image>
  40d9ec:	ldp	x29, x30, [sp, #32]
  40d9f0:	add	sp, sp, #0x30
  40d9f4:	ret

000000000040d9f8 <method_get_image_metadata>:
  40d9f8:	sub	sp, sp, #0x30
  40d9fc:	stp	x29, x30, [sp, #32]
  40da00:	add	x29, sp, #0x20
  40da04:	adrp	x3, 40e000 <method_set_pool_limit+0x1b0>
  40da08:	add	x3, x3, #0xe18
  40da0c:	stur	x0, [x29, #-8]
  40da10:	str	x1, [sp, #16]
  40da14:	str	x2, [sp, #8]
  40da18:	ldr	x0, [sp, #16]
  40da1c:	ldur	x1, [x29, #-8]
  40da20:	ldr	x2, [sp, #8]
  40da24:	bl	40e42c <redirect_method_to_image>
  40da28:	ldp	x29, x30, [sp, #32]
  40da2c:	add	sp, sp, #0x30
  40da30:	ret

000000000040da34 <method_get_image_state>:
  40da34:	sub	sp, sp, #0x60
  40da38:	stp	x29, x30, [sp, #80]
  40da3c:	add	x29, sp, #0x50
  40da40:	adrp	x8, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40da44:	add	x8, x8, #0xd3f
  40da48:	add	x8, x8, #0x3
  40da4c:	stur	x0, [x29, #-16]
  40da50:	stur	x1, [x29, #-24]
  40da54:	stur	x2, [x29, #-32]
  40da58:	str	x8, [sp, #24]
  40da5c:	ldur	x8, [x29, #-16]
  40da60:	cmp	x8, #0x0
  40da64:	cset	w9, ne  // ne = any
  40da68:	mov	w10, #0x1                   	// #1
  40da6c:	eor	w9, w9, #0x1
  40da70:	eor	w9, w9, w10
  40da74:	eor	w9, w9, w10
  40da78:	and	w9, w9, #0x1
  40da7c:	mov	w0, w9
  40da80:	sxtw	x8, w0
  40da84:	cbz	x8, 40daac <method_get_image_state+0x78>
  40da88:	mov	w8, wzr
  40da8c:	mov	w0, w8
  40da90:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40da94:	add	x1, x1, #0xfb4
  40da98:	ldr	x2, [sp, #24]
  40da9c:	mov	w3, #0xe8                  	// #232
  40daa0:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40daa4:	add	x4, x4, #0x128
  40daa8:	bl	404150 <log_assert_failed_realm@plt>
  40daac:	ldur	x0, [x29, #-16]
  40dab0:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40dab4:	add	x1, x1, #0xc4e
  40dab8:	add	x2, sp, #0x28
  40dabc:	bl	4048a0 <sd_bus_message_read@plt>
  40dac0:	str	w0, [sp, #32]
  40dac4:	ldr	w8, [sp, #32]
  40dac8:	cmp	w8, #0x0
  40dacc:	cset	w8, ge  // ge = tcont
  40dad0:	tbnz	w8, #0, 40dae0 <method_get_image_state+0xac>
  40dad4:	ldr	w8, [sp, #32]
  40dad8:	stur	w8, [x29, #-4]
  40dadc:	b	40db54 <method_get_image_state+0x120>
  40dae0:	ldur	x0, [x29, #-16]
  40dae4:	bl	4048e0 <sd_bus_message_get_bus@plt>
  40dae8:	ldr	x1, [sp, #40]
  40daec:	ldur	x4, [x29, #-32]
  40daf0:	mov	w8, wzr
  40daf4:	mov	w2, w8
  40daf8:	add	x3, sp, #0x24
  40dafc:	bl	409c4c <portable_get_state>
  40db00:	str	w0, [sp, #32]
  40db04:	ldr	w8, [sp, #32]
  40db08:	cmp	w8, #0x0
  40db0c:	cset	w8, ge  // ge = tcont
  40db10:	tbnz	w8, #0, 40db20 <method_get_image_state+0xec>
  40db14:	ldr	w8, [sp, #32]
  40db18:	stur	w8, [x29, #-4]
  40db1c:	b	40db54 <method_get_image_state+0x120>
  40db20:	ldur	x0, [x29, #-16]
  40db24:	ldr	w8, [sp, #36]
  40db28:	str	x0, [sp, #16]
  40db2c:	mov	w0, w8
  40db30:	bl	40a690 <portable_state_to_string>
  40db34:	ldr	x9, [sp, #16]
  40db38:	str	x0, [sp, #8]
  40db3c:	mov	x0, x9
  40db40:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40db44:	add	x1, x1, #0xc4e
  40db48:	ldr	x2, [sp, #8]
  40db4c:	bl	4048b0 <sd_bus_reply_method_return@plt>
  40db50:	stur	w0, [x29, #-4]
  40db54:	ldur	w0, [x29, #-4]
  40db58:	ldp	x29, x30, [sp, #80]
  40db5c:	add	sp, sp, #0x60
  40db60:	ret

000000000040db64 <method_attach_image>:
  40db64:	sub	sp, sp, #0x30
  40db68:	stp	x29, x30, [sp, #32]
  40db6c:	add	x29, sp, #0x20
  40db70:	adrp	x3, 40f000 <bus_image_common_get_metadata+0x1e8>
  40db74:	add	x3, x3, #0x640
  40db78:	stur	x0, [x29, #-8]
  40db7c:	str	x1, [sp, #16]
  40db80:	str	x2, [sp, #8]
  40db84:	ldr	x0, [sp, #16]
  40db88:	ldur	x1, [x29, #-8]
  40db8c:	ldr	x2, [sp, #8]
  40db90:	bl	40e42c <redirect_method_to_image>
  40db94:	ldp	x29, x30, [sp, #32]
  40db98:	add	sp, sp, #0x30
  40db9c:	ret

000000000040dba0 <method_detach_image>:
  40dba0:	sub	sp, sp, #0x60
  40dba4:	stp	x29, x30, [sp, #80]
  40dba8:	add	x29, sp, #0x50
  40dbac:	mov	x8, xzr
  40dbb0:	adrp	x9, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40dbb4:	add	x9, x9, #0xd3f
  40dbb8:	add	x9, x9, #0x3
  40dbbc:	stur	x0, [x29, #-16]
  40dbc0:	stur	x1, [x29, #-24]
  40dbc4:	stur	x2, [x29, #-32]
  40dbc8:	str	x8, [sp, #40]
  40dbcc:	ldur	x8, [x29, #-24]
  40dbd0:	str	x8, [sp, #32]
  40dbd4:	str	xzr, [sp, #24]
  40dbd8:	str	x9, [sp]
  40dbdc:	ldur	x8, [x29, #-16]
  40dbe0:	cmp	x8, #0x0
  40dbe4:	cset	w9, ne  // ne = any
  40dbe8:	mov	w10, #0x1                   	// #1
  40dbec:	eor	w9, w9, #0x1
  40dbf0:	eor	w9, w9, w10
  40dbf4:	eor	w9, w9, w10
  40dbf8:	and	w9, w9, #0x1
  40dbfc:	mov	w0, w9
  40dc00:	sxtw	x8, w0
  40dc04:	cbz	x8, 40dc2c <method_detach_image+0x8c>
  40dc08:	mov	w8, wzr
  40dc0c:	mov	w0, w8
  40dc10:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40dc14:	add	x1, x1, #0xfb4
  40dc18:	ldr	x2, [sp]
  40dc1c:	mov	w3, #0x105                 	// #261
  40dc20:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40dc24:	add	x4, x4, #0x16d
  40dc28:	bl	404150 <log_assert_failed_realm@plt>
  40dc2c:	ldr	x8, [sp, #32]
  40dc30:	cmp	x8, #0x0
  40dc34:	cset	w9, ne  // ne = any
  40dc38:	mov	w10, #0x1                   	// #1
  40dc3c:	eor	w9, w9, #0x1
  40dc40:	eor	w9, w9, w10
  40dc44:	eor	w9, w9, w10
  40dc48:	and	w9, w9, #0x1
  40dc4c:	mov	w0, w9
  40dc50:	sxtw	x8, w0
  40dc54:	cbz	x8, 40dc7c <method_detach_image+0xdc>
  40dc58:	mov	w8, wzr
  40dc5c:	mov	w0, w8
  40dc60:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40dc64:	add	x1, x1, #0x420
  40dc68:	ldr	x2, [sp]
  40dc6c:	mov	w3, #0x106                 	// #262
  40dc70:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40dc74:	add	x4, x4, #0x16d
  40dc78:	bl	404150 <log_assert_failed_realm@plt>
  40dc7c:	ldur	x0, [x29, #-16]
  40dc80:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40dc84:	add	x1, x1, #0xd00
  40dc88:	add	x2, sp, #0x10
  40dc8c:	add	x3, sp, #0x8
  40dc90:	bl	4048a0 <sd_bus_message_read@plt>
  40dc94:	str	w0, [sp, #12]
  40dc98:	ldr	w8, [sp, #12]
  40dc9c:	cmp	w8, #0x0
  40dca0:	cset	w8, ge  // ge = tcont
  40dca4:	tbnz	w8, #0, 40dcb4 <method_detach_image+0x114>
  40dca8:	ldr	w8, [sp, #12]
  40dcac:	stur	w8, [x29, #-4]
  40dcb0:	b	40dd8c <method_detach_image+0x1ec>
  40dcb4:	ldur	x0, [x29, #-16]
  40dcb8:	ldr	x8, [sp, #32]
  40dcbc:	add	x6, x8, #0x10
  40dcc0:	ldur	x7, [x29, #-32]
  40dcc4:	mov	w1, #0x15                  	// #21
  40dcc8:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40dccc:	add	x2, x2, #0x1af
  40dcd0:	mov	x8, xzr
  40dcd4:	mov	x3, x8
  40dcd8:	mov	w9, wzr
  40dcdc:	and	w4, w9, #0x1
  40dce0:	mov	w5, #0xffffffff            	// #-1
  40dce4:	bl	404930 <bus_verify_polkit_async@plt>
  40dce8:	str	w0, [sp, #12]
  40dcec:	ldr	w9, [sp, #12]
  40dcf0:	cmp	w9, #0x0
  40dcf4:	cset	w9, ge  // ge = tcont
  40dcf8:	tbnz	w9, #0, 40dd08 <method_detach_image+0x168>
  40dcfc:	ldr	w8, [sp, #12]
  40dd00:	stur	w8, [x29, #-4]
  40dd04:	b	40dd8c <method_detach_image+0x1ec>
  40dd08:	ldr	w8, [sp, #12]
  40dd0c:	cbnz	w8, 40dd1c <method_detach_image+0x17c>
  40dd10:	mov	w8, #0x1                   	// #1
  40dd14:	stur	w8, [x29, #-4]
  40dd18:	b	40dd8c <method_detach_image+0x1ec>
  40dd1c:	ldur	x0, [x29, #-16]
  40dd20:	bl	4048e0 <sd_bus_message_get_bus@plt>
  40dd24:	ldr	x1, [sp, #16]
  40dd28:	ldr	w8, [sp, #8]
  40dd2c:	mov	w9, wzr
  40dd30:	mov	w10, #0x4                   	// #4
  40dd34:	cmp	w8, #0x0
  40dd38:	csel	w2, w10, w9, ne  // ne = any
  40dd3c:	ldur	x5, [x29, #-32]
  40dd40:	add	x3, sp, #0x28
  40dd44:	add	x4, sp, #0x18
  40dd48:	bl	4079e0 <portable_detach>
  40dd4c:	str	w0, [sp, #12]
  40dd50:	ldr	w8, [sp, #12]
  40dd54:	cmp	w8, #0x0
  40dd58:	cset	w8, ge  // ge = tcont
  40dd5c:	tbnz	w8, #0, 40dd64 <method_detach_image+0x1c4>
  40dd60:	b	40dd78 <method_detach_image+0x1d8>
  40dd64:	ldur	x0, [x29, #-16]
  40dd68:	ldr	x1, [sp, #40]
  40dd6c:	ldr	x2, [sp, #24]
  40dd70:	bl	40e054 <reply_portable_changes>
  40dd74:	str	w0, [sp, #12]
  40dd78:	ldr	x0, [sp, #40]
  40dd7c:	ldr	x1, [sp, #24]
  40dd80:	bl	405fbc <portable_changes_free>
  40dd84:	ldr	w8, [sp, #12]
  40dd88:	stur	w8, [x29, #-4]
  40dd8c:	ldur	w0, [x29, #-4]
  40dd90:	ldp	x29, x30, [sp, #80]
  40dd94:	add	sp, sp, #0x60
  40dd98:	ret

000000000040dd9c <method_remove_image>:
  40dd9c:	sub	sp, sp, #0x30
  40dda0:	stp	x29, x30, [sp, #32]
  40dda4:	add	x29, sp, #0x20
  40dda8:	adrp	x3, 40f000 <bus_image_common_get_metadata+0x1e8>
  40ddac:	add	x3, x3, #0x9e0
  40ddb0:	stur	x0, [x29, #-8]
  40ddb4:	str	x1, [sp, #16]
  40ddb8:	str	x2, [sp, #8]
  40ddbc:	ldr	x0, [sp, #16]
  40ddc0:	ldur	x1, [x29, #-8]
  40ddc4:	ldr	x2, [sp, #8]
  40ddc8:	bl	40e42c <redirect_method_to_image>
  40ddcc:	ldp	x29, x30, [sp, #32]
  40ddd0:	add	sp, sp, #0x30
  40ddd4:	ret

000000000040ddd8 <method_mark_image_read_only>:
  40ddd8:	sub	sp, sp, #0x30
  40dddc:	stp	x29, x30, [sp, #32]
  40dde0:	add	x29, sp, #0x20
  40dde4:	adrp	x3, 40f000 <bus_image_common_get_metadata+0x1e8>
  40dde8:	add	x3, x3, #0xe44
  40ddec:	stur	x0, [x29, #-8]
  40ddf0:	str	x1, [sp, #16]
  40ddf4:	str	x2, [sp, #8]
  40ddf8:	ldr	x0, [sp, #16]
  40ddfc:	ldur	x1, [x29, #-8]
  40de00:	ldr	x2, [sp, #8]
  40de04:	bl	40e42c <redirect_method_to_image>
  40de08:	ldp	x29, x30, [sp, #32]
  40de0c:	add	sp, sp, #0x30
  40de10:	ret

000000000040de14 <method_set_image_limit>:
  40de14:	sub	sp, sp, #0x30
  40de18:	stp	x29, x30, [sp, #32]
  40de1c:	add	x29, sp, #0x20
  40de20:	adrp	x3, 410000 <bus_image_common_mark_read_only+0x1bc>
  40de24:	add	x3, x3, #0x7c
  40de28:	stur	x0, [x29, #-8]
  40de2c:	str	x1, [sp, #16]
  40de30:	str	x2, [sp, #8]
  40de34:	ldr	x0, [sp, #16]
  40de38:	ldur	x1, [x29, #-8]
  40de3c:	ldr	x2, [sp, #8]
  40de40:	bl	40e42c <redirect_method_to_image>
  40de44:	ldp	x29, x30, [sp, #32]
  40de48:	add	sp, sp, #0x30
  40de4c:	ret

000000000040de50 <method_set_pool_limit>:
  40de50:	sub	sp, sp, #0x60
  40de54:	stp	x29, x30, [sp, #80]
  40de58:	add	x29, sp, #0x50
  40de5c:	adrp	x8, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40de60:	add	x8, x8, #0xd3f
  40de64:	add	x8, x8, #0x3
  40de68:	stur	x0, [x29, #-16]
  40de6c:	stur	x1, [x29, #-24]
  40de70:	stur	x2, [x29, #-32]
  40de74:	ldur	x9, [x29, #-24]
  40de78:	str	x9, [sp, #40]
  40de7c:	str	x8, [sp, #16]
  40de80:	ldur	x8, [x29, #-16]
  40de84:	cmp	x8, #0x0
  40de88:	cset	w9, ne  // ne = any
  40de8c:	mov	w10, #0x1                   	// #1
  40de90:	eor	w9, w9, #0x1
  40de94:	eor	w9, w9, w10
  40de98:	eor	w9, w9, w10
  40de9c:	and	w9, w9, #0x1
  40dea0:	mov	w0, w9
  40dea4:	sxtw	x8, w0
  40dea8:	cbz	x8, 40ded0 <method_set_pool_limit+0x80>
  40deac:	mov	w8, wzr
  40deb0:	mov	w0, w8
  40deb4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40deb8:	add	x1, x1, #0xfb4
  40debc:	ldr	x2, [sp, #16]
  40dec0:	mov	w3, #0x140                 	// #320
  40dec4:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40dec8:	add	x4, x4, #0x1d7
  40decc:	bl	404150 <log_assert_failed_realm@plt>
  40ded0:	ldur	x0, [x29, #-16]
  40ded4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40ded8:	add	x1, x1, #0xc5a
  40dedc:	add	x2, sp, #0x20
  40dee0:	bl	4048a0 <sd_bus_message_read@plt>
  40dee4:	str	w0, [sp, #28]
  40dee8:	ldr	w8, [sp, #28]
  40deec:	cmp	w8, #0x0
  40def0:	cset	w8, ge  // ge = tcont
  40def4:	tbnz	w8, #0, 40df04 <method_set_pool_limit+0xb4>
  40def8:	ldr	w8, [sp, #28]
  40defc:	stur	w8, [x29, #-4]
  40df00:	b	40e044 <method_set_pool_limit+0x1f4>
  40df04:	ldr	x0, [sp, #32]
  40df08:	bl	40e5b0 <FILE_SIZE_VALID_OR_INFINITY>
  40df0c:	tbnz	w0, #0, 40df30 <method_set_pool_limit+0xe0>
  40df10:	ldur	x0, [x29, #-32]
  40df14:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  40df18:	add	x1, x1, #0xc4c
  40df1c:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40df20:	add	x2, x2, #0x21b
  40df24:	bl	404250 <sd_bus_error_setf@plt>
  40df28:	stur	w0, [x29, #-4]
  40df2c:	b	40e044 <method_set_pool_limit+0x1f4>
  40df30:	ldur	x0, [x29, #-16]
  40df34:	ldr	x8, [sp, #40]
  40df38:	add	x6, x8, #0x10
  40df3c:	ldur	x7, [x29, #-32]
  40df40:	mov	w1, #0x15                  	// #21
  40df44:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40df48:	add	x2, x2, #0x232
  40df4c:	mov	x8, xzr
  40df50:	mov	x3, x8
  40df54:	mov	w9, wzr
  40df58:	and	w4, w9, #0x1
  40df5c:	mov	w5, #0xffffffff            	// #-1
  40df60:	bl	404930 <bus_verify_polkit_async@plt>
  40df64:	str	w0, [sp, #28]
  40df68:	ldr	w9, [sp, #28]
  40df6c:	cmp	w9, #0x0
  40df70:	cset	w9, ge  // ge = tcont
  40df74:	tbnz	w9, #0, 40df84 <method_set_pool_limit+0x134>
  40df78:	ldr	w8, [sp, #28]
  40df7c:	stur	w8, [x29, #-4]
  40df80:	b	40e044 <method_set_pool_limit+0x1f4>
  40df84:	ldr	w8, [sp, #28]
  40df88:	cbnz	w8, 40df98 <method_set_pool_limit+0x148>
  40df8c:	mov	w8, #0x1                   	// #1
  40df90:	stur	w8, [x29, #-4]
  40df94:	b	40e044 <method_set_pool_limit+0x1f4>
  40df98:	ldr	x2, [sp, #32]
  40df9c:	adrp	x8, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40dfa0:	add	x8, x8, #0xe35
  40dfa4:	mov	x0, x8
  40dfa8:	mov	x9, xzr
  40dfac:	mov	x1, x9
  40dfb0:	str	x8, [sp, #8]
  40dfb4:	str	x9, [sp]
  40dfb8:	bl	404940 <btrfs_qgroup_set_limit@plt>
  40dfbc:	ldr	x2, [sp, #32]
  40dfc0:	ldr	x8, [sp, #8]
  40dfc4:	mov	x0, x8
  40dfc8:	ldr	x1, [sp]
  40dfcc:	bl	404950 <btrfs_subvol_set_subtree_quota_limit@plt>
  40dfd0:	str	w0, [sp, #28]
  40dfd4:	ldr	w10, [sp, #28]
  40dfd8:	mov	w11, #0xffffffe7            	// #-25
  40dfdc:	cmp	w10, w11
  40dfe0:	b.ne	40e004 <method_set_pool_limit+0x1b4>  // b.any
  40dfe4:	ldur	x0, [x29, #-32]
  40dfe8:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40dfec:	add	x1, x1, #0x25a
  40dff0:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40dff4:	add	x2, x2, #0x282
  40dff8:	bl	404250 <sd_bus_error_setf@plt>
  40dffc:	stur	w0, [x29, #-4]
  40e000:	b	40e044 <method_set_pool_limit+0x1f4>
  40e004:	ldr	w8, [sp, #28]
  40e008:	cmp	w8, #0x0
  40e00c:	cset	w8, ge  // ge = tcont
  40e010:	tbnz	w8, #0, 40e030 <method_set_pool_limit+0x1e0>
  40e014:	ldur	x0, [x29, #-32]
  40e018:	ldr	w1, [sp, #28]
  40e01c:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40e020:	add	x2, x2, #0x2a4
  40e024:	bl	404320 <sd_bus_error_set_errnof@plt>
  40e028:	stur	w0, [x29, #-4]
  40e02c:	b	40e044 <method_set_pool_limit+0x1f4>
  40e030:	ldur	x0, [x29, #-16]
  40e034:	mov	x8, xzr
  40e038:	mov	x1, x8
  40e03c:	bl	4048b0 <sd_bus_reply_method_return@plt>
  40e040:	stur	w0, [x29, #-4]
  40e044:	ldur	w0, [x29, #-4]
  40e048:	ldp	x29, x30, [sp, #80]
  40e04c:	add	sp, sp, #0x60
  40e050:	ret

000000000040e054 <reply_portable_changes>:
  40e054:	sub	sp, sp, #0x70
  40e058:	stp	x29, x30, [sp, #96]
  40e05c:	add	x29, sp, #0x60
  40e060:	mov	x8, xzr
  40e064:	adrp	x9, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40e068:	add	x9, x9, #0xd3f
  40e06c:	add	x9, x9, #0x3
  40e070:	stur	x0, [x29, #-16]
  40e074:	stur	x1, [x29, #-24]
  40e078:	stur	x2, [x29, #-32]
  40e07c:	stur	x8, [x29, #-40]
  40e080:	str	x9, [sp, #32]
  40e084:	ldur	x8, [x29, #-16]
  40e088:	cmp	x8, #0x0
  40e08c:	cset	w9, ne  // ne = any
  40e090:	mov	w10, #0x1                   	// #1
  40e094:	eor	w9, w9, #0x1
  40e098:	eor	w9, w9, w10
  40e09c:	eor	w9, w9, w10
  40e0a0:	and	w9, w9, #0x1
  40e0a4:	mov	w0, w9
  40e0a8:	sxtw	x8, w0
  40e0ac:	cbz	x8, 40e0d4 <reply_portable_changes+0x80>
  40e0b0:	mov	w8, wzr
  40e0b4:	mov	w0, w8
  40e0b8:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40e0bc:	add	x1, x1, #0x420
  40e0c0:	ldr	x2, [sp, #32]
  40e0c4:	mov	w3, #0x17a                 	// #378
  40e0c8:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40e0cc:	add	x4, x4, #0xd5f
  40e0d0:	bl	404150 <log_assert_failed_realm@plt>
  40e0d4:	ldur	x8, [x29, #-24]
  40e0d8:	mov	w9, #0x1                   	// #1
  40e0dc:	str	w9, [sp, #28]
  40e0e0:	cbnz	x8, 40e0f4 <reply_portable_changes+0xa0>
  40e0e4:	ldur	x8, [x29, #-32]
  40e0e8:	cmp	x8, #0x0
  40e0ec:	cset	w9, eq  // eq = none
  40e0f0:	str	w9, [sp, #28]
  40e0f4:	ldr	w8, [sp, #28]
  40e0f8:	mov	w9, #0x1                   	// #1
  40e0fc:	eor	w8, w8, #0x1
  40e100:	eor	w8, w8, w9
  40e104:	eor	w8, w8, w9
  40e108:	and	w8, w8, #0x1
  40e10c:	mov	w0, w8
  40e110:	sxtw	x10, w0
  40e114:	cbz	x10, 40e13c <reply_portable_changes+0xe8>
  40e118:	mov	w8, wzr
  40e11c:	mov	w0, w8
  40e120:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  40e124:	add	x1, x1, #0x5c2
  40e128:	ldr	x2, [sp, #32]
  40e12c:	mov	w3, #0x17b                 	// #379
  40e130:	adrp	x4, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40e134:	add	x4, x4, #0xd5f
  40e138:	bl	404150 <log_assert_failed_realm@plt>
  40e13c:	ldur	x0, [x29, #-16]
  40e140:	sub	x1, x29, #0x28
  40e144:	bl	4048c0 <sd_bus_message_new_method_return@plt>
  40e148:	str	w0, [sp, #44]
  40e14c:	ldr	w8, [sp, #44]
  40e150:	cmp	w8, #0x0
  40e154:	cset	w8, ge  // ge = tcont
  40e158:	tbnz	w8, #0, 40e170 <reply_portable_changes+0x11c>
  40e15c:	ldr	w8, [sp, #44]
  40e160:	stur	w8, [x29, #-4]
  40e164:	mov	w8, #0x1                   	// #1
  40e168:	str	w8, [sp, #40]
  40e16c:	b	40e2b8 <reply_portable_changes+0x264>
  40e170:	ldur	x0, [x29, #-40]
  40e174:	mov	w1, #0x61                  	// #97
  40e178:	adrp	x2, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40e17c:	add	x2, x2, #0xdac
  40e180:	bl	4048d0 <sd_bus_message_open_container@plt>
  40e184:	str	w0, [sp, #44]
  40e188:	ldr	w8, [sp, #44]
  40e18c:	cmp	w8, #0x0
  40e190:	cset	w8, ge  // ge = tcont
  40e194:	tbnz	w8, #0, 40e1ac <reply_portable_changes+0x158>
  40e198:	ldr	w8, [sp, #44]
  40e19c:	stur	w8, [x29, #-4]
  40e1a0:	mov	w8, #0x1                   	// #1
  40e1a4:	str	w8, [sp, #40]
  40e1a8:	b	40e2b8 <reply_portable_changes+0x264>
  40e1ac:	str	xzr, [sp, #48]
  40e1b0:	ldr	x8, [sp, #48]
  40e1b4:	ldur	x9, [x29, #-32]
  40e1b8:	cmp	x8, x9
  40e1bc:	b.cs	40e268 <reply_portable_changes+0x214>  // b.hs, b.nlast
  40e1c0:	ldur	x0, [x29, #-40]
  40e1c4:	ldur	x8, [x29, #-24]
  40e1c8:	ldr	x9, [sp, #48]
  40e1cc:	mov	x10, #0x18                  	// #24
  40e1d0:	mul	x9, x10, x9
  40e1d4:	ldr	w11, [x8, x9]
  40e1d8:	str	x0, [sp, #16]
  40e1dc:	mov	w0, w11
  40e1e0:	str	x10, [sp, #8]
  40e1e4:	bl	40a600 <portable_change_type_to_string>
  40e1e8:	ldur	x8, [x29, #-24]
  40e1ec:	ldr	x9, [sp, #48]
  40e1f0:	ldr	x10, [sp, #8]
  40e1f4:	mul	x9, x10, x9
  40e1f8:	add	x8, x8, x9
  40e1fc:	ldr	x3, [x8, #8]
  40e200:	ldur	x8, [x29, #-24]
  40e204:	ldr	x9, [sp, #48]
  40e208:	mul	x9, x10, x9
  40e20c:	add	x8, x8, x9
  40e210:	ldr	x4, [x8, #16]
  40e214:	ldr	x8, [sp, #16]
  40e218:	str	x0, [sp]
  40e21c:	mov	x0, x8
  40e220:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40e224:	add	x1, x1, #0xdac
  40e228:	ldr	x2, [sp]
  40e22c:	bl	404870 <sd_bus_message_append@plt>
  40e230:	str	w0, [sp, #44]
  40e234:	ldr	w11, [sp, #44]
  40e238:	cmp	w11, #0x0
  40e23c:	cset	w11, ge  // ge = tcont
  40e240:	tbnz	w11, #0, 40e258 <reply_portable_changes+0x204>
  40e244:	ldr	w8, [sp, #44]
  40e248:	stur	w8, [x29, #-4]
  40e24c:	mov	w8, #0x1                   	// #1
  40e250:	str	w8, [sp, #40]
  40e254:	b	40e2b8 <reply_portable_changes+0x264>
  40e258:	ldr	x8, [sp, #48]
  40e25c:	add	x8, x8, #0x1
  40e260:	str	x8, [sp, #48]
  40e264:	b	40e1b0 <reply_portable_changes+0x15c>
  40e268:	ldur	x0, [x29, #-40]
  40e26c:	bl	404910 <sd_bus_message_close_container@plt>
  40e270:	str	w0, [sp, #44]
  40e274:	ldr	w8, [sp, #44]
  40e278:	cmp	w8, #0x0
  40e27c:	cset	w8, ge  // ge = tcont
  40e280:	tbnz	w8, #0, 40e298 <reply_portable_changes+0x244>
  40e284:	ldr	w8, [sp, #44]
  40e288:	stur	w8, [x29, #-4]
  40e28c:	mov	w8, #0x1                   	// #1
  40e290:	str	w8, [sp, #40]
  40e294:	b	40e2b8 <reply_portable_changes+0x264>
  40e298:	ldur	x1, [x29, #-40]
  40e29c:	mov	x8, xzr
  40e2a0:	mov	x0, x8
  40e2a4:	mov	x2, x8
  40e2a8:	bl	404920 <sd_bus_send@plt>
  40e2ac:	stur	w0, [x29, #-4]
  40e2b0:	mov	w9, #0x1                   	// #1
  40e2b4:	str	w9, [sp, #40]
  40e2b8:	sub	x0, x29, #0x28
  40e2bc:	bl	40e2d0 <sd_bus_message_unrefp>
  40e2c0:	ldur	w0, [x29, #-4]
  40e2c4:	ldp	x29, x30, [sp, #96]
  40e2c8:	add	sp, sp, #0x70
  40e2cc:	ret

000000000040e2d0 <sd_bus_message_unrefp>:
  40e2d0:	sub	sp, sp, #0x20
  40e2d4:	stp	x29, x30, [sp, #16]
  40e2d8:	add	x29, sp, #0x10
  40e2dc:	str	x0, [sp, #8]
  40e2e0:	ldr	x8, [sp, #8]
  40e2e4:	ldr	x8, [x8]
  40e2e8:	cbz	x8, 40e2f8 <sd_bus_message_unrefp+0x28>
  40e2ec:	ldr	x8, [sp, #8]
  40e2f0:	ldr	x0, [x8]
  40e2f4:	bl	404780 <sd_bus_message_unref@plt>
  40e2f8:	ldp	x29, x30, [sp, #16]
  40e2fc:	add	sp, sp, #0x20
  40e300:	ret

000000000040e304 <closep>:
  40e304:	sub	sp, sp, #0x20
  40e308:	stp	x29, x30, [sp, #16]
  40e30c:	add	x29, sp, #0x10
  40e310:	str	x0, [sp, #8]
  40e314:	ldr	x8, [sp, #8]
  40e318:	ldr	w0, [x8]
  40e31c:	bl	404130 <safe_close@plt>
  40e320:	ldp	x29, x30, [sp, #16]
  40e324:	add	sp, sp, #0x20
  40e328:	ret

000000000040e32c <strv_freep>:
  40e32c:	sub	sp, sp, #0x20
  40e330:	stp	x29, x30, [sp, #16]
  40e334:	add	x29, sp, #0x10
  40e338:	str	x0, [sp, #8]
  40e33c:	ldr	x8, [sp, #8]
  40e340:	ldr	x8, [x8]
  40e344:	cbz	x8, 40e354 <strv_freep+0x28>
  40e348:	ldr	x8, [sp, #8]
  40e34c:	ldr	x0, [x8]
  40e350:	bl	404960 <strv_free@plt>
  40e354:	ldp	x29, x30, [sp, #16]
  40e358:	add	sp, sp, #0x20
  40e35c:	ret

000000000040e360 <freep>:
  40e360:	sub	sp, sp, #0x20
  40e364:	stp	x29, x30, [sp, #16]
  40e368:	add	x29, sp, #0x10
  40e36c:	str	x0, [sp, #8]
  40e370:	ldr	x8, [sp, #8]
  40e374:	ldr	x0, [x8]
  40e378:	bl	404140 <free@plt>
  40e37c:	ldp	x29, x30, [sp, #16]
  40e380:	add	sp, sp, #0x20
  40e384:	ret

000000000040e388 <hashmap_freep>:
  40e388:	sub	sp, sp, #0x20
  40e38c:	stp	x29, x30, [sp, #16]
  40e390:	add	x29, sp, #0x10
  40e394:	str	x0, [sp, #8]
  40e398:	ldr	x8, [sp, #8]
  40e39c:	ldr	x8, [x8]
  40e3a0:	cbz	x8, 40e3b0 <hashmap_freep+0x28>
  40e3a4:	ldr	x8, [sp, #8]
  40e3a8:	ldr	x0, [x8]
  40e3ac:	bl	40e3fc <hashmap_free>
  40e3b0:	ldp	x29, x30, [sp, #16]
  40e3b4:	add	sp, sp, #0x20
  40e3b8:	ret

000000000040e3bc <hashmap_iterate>:
  40e3bc:	sub	sp, sp, #0x30
  40e3c0:	stp	x29, x30, [sp, #32]
  40e3c4:	add	x29, sp, #0x20
  40e3c8:	stur	x0, [x29, #-8]
  40e3cc:	str	x1, [sp, #16]
  40e3d0:	str	x2, [sp, #8]
  40e3d4:	str	x3, [sp]
  40e3d8:	ldur	x0, [x29, #-8]
  40e3dc:	ldr	x1, [sp, #16]
  40e3e0:	ldr	x2, [sp, #8]
  40e3e4:	ldr	x3, [sp]
  40e3e8:	bl	404180 <internal_hashmap_iterate@plt>
  40e3ec:	and	w0, w0, #0x1
  40e3f0:	ldp	x29, x30, [sp, #32]
  40e3f4:	add	sp, sp, #0x30
  40e3f8:	ret

000000000040e3fc <hashmap_free>:
  40e3fc:	sub	sp, sp, #0x20
  40e400:	stp	x29, x30, [sp, #16]
  40e404:	add	x29, sp, #0x10
  40e408:	mov	x8, xzr
  40e40c:	str	x0, [sp, #8]
  40e410:	ldr	x0, [sp, #8]
  40e414:	mov	x1, x8
  40e418:	mov	x2, x8
  40e41c:	bl	404770 <internal_hashmap_free@plt>
  40e420:	ldp	x29, x30, [sp, #16]
  40e424:	add	sp, sp, #0x20
  40e428:	ret

000000000040e42c <redirect_method_to_image>:
  40e42c:	sub	sp, sp, #0x60
  40e430:	stp	x29, x30, [sp, #80]
  40e434:	add	x29, sp, #0x50
  40e438:	adrp	x8, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40e43c:	add	x8, x8, #0xd3f
  40e440:	add	x8, x8, #0x3
  40e444:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40e448:	add	x9, x9, #0x8a
  40e44c:	stur	x0, [x29, #-16]
  40e450:	stur	x1, [x29, #-24]
  40e454:	stur	x2, [x29, #-32]
  40e458:	str	x3, [sp, #40]
  40e45c:	str	x8, [sp, #16]
  40e460:	str	x9, [sp, #8]
  40e464:	ldur	x8, [x29, #-16]
  40e468:	cmp	x8, #0x0
  40e46c:	cset	w9, ne  // ne = any
  40e470:	mov	w10, #0x1                   	// #1
  40e474:	eor	w9, w9, #0x1
  40e478:	eor	w9, w9, w10
  40e47c:	eor	w9, w9, w10
  40e480:	and	w9, w9, #0x1
  40e484:	mov	w0, w9
  40e488:	sxtw	x8, w0
  40e48c:	cbz	x8, 40e4b0 <redirect_method_to_image+0x84>
  40e490:	mov	w8, wzr
  40e494:	mov	w0, w8
  40e498:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40e49c:	add	x1, x1, #0x420
  40e4a0:	ldr	x2, [sp, #16]
  40e4a4:	mov	w3, #0xd0                  	// #208
  40e4a8:	ldr	x4, [sp, #8]
  40e4ac:	bl	404150 <log_assert_failed_realm@plt>
  40e4b0:	ldur	x8, [x29, #-24]
  40e4b4:	cmp	x8, #0x0
  40e4b8:	cset	w9, ne  // ne = any
  40e4bc:	mov	w10, #0x1                   	// #1
  40e4c0:	eor	w9, w9, #0x1
  40e4c4:	eor	w9, w9, w10
  40e4c8:	eor	w9, w9, w10
  40e4cc:	and	w9, w9, #0x1
  40e4d0:	mov	w0, w9
  40e4d4:	sxtw	x8, w0
  40e4d8:	cbz	x8, 40e4fc <redirect_method_to_image+0xd0>
  40e4dc:	mov	w8, wzr
  40e4e0:	mov	w0, w8
  40e4e4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40e4e8:	add	x1, x1, #0xfb4
  40e4ec:	ldr	x2, [sp, #16]
  40e4f0:	mov	w3, #0xd1                  	// #209
  40e4f4:	ldr	x4, [sp, #8]
  40e4f8:	bl	404150 <log_assert_failed_realm@plt>
  40e4fc:	ldr	x8, [sp, #40]
  40e500:	cmp	x8, #0x0
  40e504:	cset	w9, ne  // ne = any
  40e508:	mov	w10, #0x1                   	// #1
  40e50c:	eor	w9, w9, #0x1
  40e510:	eor	w9, w9, w10
  40e514:	eor	w9, w9, w10
  40e518:	and	w9, w9, #0x1
  40e51c:	mov	w0, w9
  40e520:	sxtw	x8, w0
  40e524:	cbz	x8, 40e548 <redirect_method_to_image+0x11c>
  40e528:	mov	w8, wzr
  40e52c:	mov	w0, w8
  40e530:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40e534:	add	x1, x1, #0x121
  40e538:	ldr	x2, [sp, #16]
  40e53c:	mov	w3, #0xd2                  	// #210
  40e540:	ldr	x4, [sp, #8]
  40e544:	bl	404150 <log_assert_failed_realm@plt>
  40e548:	ldur	x0, [x29, #-24]
  40e54c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40e550:	add	x1, x1, #0xc4e
  40e554:	add	x2, sp, #0x20
  40e558:	bl	4048a0 <sd_bus_message_read@plt>
  40e55c:	str	w0, [sp, #28]
  40e560:	ldr	w8, [sp, #28]
  40e564:	cmp	w8, #0x0
  40e568:	cset	w8, ge  // ge = tcont
  40e56c:	tbnz	w8, #0, 40e57c <redirect_method_to_image+0x150>
  40e570:	ldr	w8, [sp, #28]
  40e574:	stur	w8, [x29, #-4]
  40e578:	b	40e5a0 <redirect_method_to_image+0x174>
  40e57c:	ldr	x8, [sp, #40]
  40e580:	ldur	x0, [x29, #-16]
  40e584:	ldur	x1, [x29, #-24]
  40e588:	ldr	x2, [sp, #32]
  40e58c:	ldur	x4, [x29, #-32]
  40e590:	mov	x9, xzr
  40e594:	mov	x3, x9
  40e598:	blr	x8
  40e59c:	stur	w0, [x29, #-4]
  40e5a0:	ldur	w0, [x29, #-4]
  40e5a4:	ldp	x29, x30, [sp, #80]
  40e5a8:	add	sp, sp, #0x60
  40e5ac:	ret

000000000040e5b0 <FILE_SIZE_VALID_OR_INFINITY>:
  40e5b0:	sub	sp, sp, #0x20
  40e5b4:	stp	x29, x30, [sp, #16]
  40e5b8:	add	x29, sp, #0x10
  40e5bc:	mov	x8, #0xffffffffffffffff    	// #-1
  40e5c0:	str	x0, [sp]
  40e5c4:	ldr	x9, [sp]
  40e5c8:	cmp	x9, x8
  40e5cc:	b.ne	40e5e0 <FILE_SIZE_VALID_OR_INFINITY+0x30>  // b.any
  40e5d0:	mov	w8, #0x1                   	// #1
  40e5d4:	and	w8, w8, #0x1
  40e5d8:	sturb	w8, [x29, #-1]
  40e5dc:	b	40e5f0 <FILE_SIZE_VALID_OR_INFINITY+0x40>
  40e5e0:	ldr	x0, [sp]
  40e5e4:	bl	40e604 <FILE_SIZE_VALID>
  40e5e8:	and	w8, w0, #0x1
  40e5ec:	sturb	w8, [x29, #-1]
  40e5f0:	ldurb	w8, [x29, #-1]
  40e5f4:	and	w0, w8, #0x1
  40e5f8:	ldp	x29, x30, [sp, #16]
  40e5fc:	add	sp, sp, #0x20
  40e600:	ret

000000000040e604 <FILE_SIZE_VALID>:
  40e604:	sub	sp, sp, #0x10
  40e608:	str	x0, [sp, #8]
  40e60c:	ldr	x8, [sp, #8]
  40e610:	lsr	x8, x8, #63
  40e614:	cmp	x8, #0x0
  40e618:	cset	w9, eq  // eq = none
  40e61c:	and	w0, w9, #0x1
  40e620:	add	sp, sp, #0x10
  40e624:	ret

000000000040e628 <bus_image_common_get_os_release>:
  40e628:	sub	sp, sp, #0x60
  40e62c:	stp	x29, x30, [sp, #80]
  40e630:	add	x29, sp, #0x50
  40e634:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40e638:	add	x8, x8, #0x2db
  40e63c:	add	x8, x8, #0x3
  40e640:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40e644:	add	x9, x9, #0x301
  40e648:	stur	x0, [x29, #-16]
  40e64c:	stur	x1, [x29, #-24]
  40e650:	stur	x2, [x29, #-32]
  40e654:	str	x3, [sp, #40]
  40e658:	str	x4, [sp, #32]
  40e65c:	str	x8, [sp, #16]
  40e660:	str	x9, [sp, #8]
  40e664:	ldur	x8, [x29, #-32]
  40e668:	mov	w9, #0x1                   	// #1
  40e66c:	str	w9, [sp, #4]
  40e670:	cbnz	x8, 40e684 <bus_image_common_get_os_release+0x5c>
  40e674:	ldr	x8, [sp, #40]
  40e678:	cmp	x8, #0x0
  40e67c:	cset	w9, ne  // ne = any
  40e680:	str	w9, [sp, #4]
  40e684:	ldr	w8, [sp, #4]
  40e688:	mov	w9, #0x1                   	// #1
  40e68c:	eor	w8, w8, #0x1
  40e690:	eor	w8, w8, w9
  40e694:	eor	w8, w8, w9
  40e698:	and	w8, w8, #0x1
  40e69c:	mov	w0, w8
  40e6a0:	sxtw	x10, w0
  40e6a4:	cbz	x10, 40e6c8 <bus_image_common_get_os_release+0xa0>
  40e6a8:	mov	w8, wzr
  40e6ac:	mov	w0, w8
  40e6b0:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40e6b4:	add	x1, x1, #0x2c5
  40e6b8:	ldr	x2, [sp, #16]
  40e6bc:	mov	w3, #0x25                  	// #37
  40e6c0:	ldr	x4, [sp, #8]
  40e6c4:	bl	404150 <log_assert_failed_realm@plt>
  40e6c8:	ldur	x8, [x29, #-24]
  40e6cc:	cmp	x8, #0x0
  40e6d0:	cset	w9, ne  // ne = any
  40e6d4:	mov	w10, #0x1                   	// #1
  40e6d8:	eor	w9, w9, #0x1
  40e6dc:	eor	w9, w9, w10
  40e6e0:	eor	w9, w9, w10
  40e6e4:	and	w9, w9, #0x1
  40e6e8:	mov	w0, w9
  40e6ec:	sxtw	x8, w0
  40e6f0:	cbz	x8, 40e714 <bus_image_common_get_os_release+0xec>
  40e6f4:	mov	w8, wzr
  40e6f8:	mov	w0, w8
  40e6fc:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40e700:	add	x1, x1, #0xfb4
  40e704:	ldr	x2, [sp, #16]
  40e708:	mov	w3, #0x26                  	// #38
  40e70c:	ldr	x4, [sp, #8]
  40e710:	bl	404150 <log_assert_failed_realm@plt>
  40e714:	ldur	x8, [x29, #-16]
  40e718:	cbnz	x8, 40e774 <bus_image_common_get_os_release+0x14c>
  40e71c:	ldr	x8, [sp, #40]
  40e720:	cmp	x8, #0x0
  40e724:	cset	w9, ne  // ne = any
  40e728:	mov	w10, #0x1                   	// #1
  40e72c:	eor	w9, w9, #0x1
  40e730:	eor	w9, w9, w10
  40e734:	eor	w9, w9, w10
  40e738:	and	w9, w9, #0x1
  40e73c:	mov	w0, w9
  40e740:	sxtw	x8, w0
  40e744:	cbz	x8, 40e768 <bus_image_common_get_os_release+0x140>
  40e748:	mov	w8, wzr
  40e74c:	mov	w0, w8
  40e750:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40e754:	add	x1, x1, #0x369
  40e758:	ldr	x2, [sp, #16]
  40e75c:	mov	w3, #0x29                  	// #41
  40e760:	ldr	x4, [sp, #8]
  40e764:	bl	404150 <log_assert_failed_realm@plt>
  40e768:	ldr	x8, [sp, #40]
  40e76c:	ldr	x8, [x8, #128]
  40e770:	stur	x8, [x29, #-16]
  40e774:	ldur	x0, [x29, #-16]
  40e778:	ldur	x1, [x29, #-24]
  40e77c:	ldur	x2, [x29, #-32]
  40e780:	add	x6, sp, #0x28
  40e784:	ldr	x3, [sp, #40]
  40e788:	ldr	x7, [sp, #32]
  40e78c:	mov	w4, #0x1                   	// #1
  40e790:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40e794:	add	x5, x5, #0x36f
  40e798:	bl	40e83c <bus_image_acquire>
  40e79c:	str	w0, [sp, #28]
  40e7a0:	ldr	w8, [sp, #28]
  40e7a4:	cmp	w8, #0x0
  40e7a8:	cset	w8, ge  // ge = tcont
  40e7ac:	tbnz	w8, #0, 40e7bc <bus_image_common_get_os_release+0x194>
  40e7b0:	ldr	w8, [sp, #28]
  40e7b4:	stur	w8, [x29, #-4]
  40e7b8:	b	40e82c <bus_image_common_get_os_release+0x204>
  40e7bc:	ldr	w8, [sp, #28]
  40e7c0:	cbnz	w8, 40e7d0 <bus_image_common_get_os_release+0x1a8>
  40e7c4:	mov	w8, #0x1                   	// #1
  40e7c8:	stur	w8, [x29, #-4]
  40e7cc:	b	40e82c <bus_image_common_get_os_release+0x204>
  40e7d0:	ldr	x8, [sp, #40]
  40e7d4:	ldrb	w9, [x8, #120]
  40e7d8:	and	w9, w9, #0x1
  40e7dc:	tbnz	w9, #0, 40e818 <bus_image_common_get_os_release+0x1f0>
  40e7e0:	ldr	x0, [sp, #40]
  40e7e4:	bl	404970 <image_read_metadata@plt>
  40e7e8:	str	w0, [sp, #28]
  40e7ec:	ldr	w8, [sp, #28]
  40e7f0:	cmp	w8, #0x0
  40e7f4:	cset	w8, ge  // ge = tcont
  40e7f8:	tbnz	w8, #0, 40e818 <bus_image_common_get_os_release+0x1f0>
  40e7fc:	ldr	x0, [sp, #32]
  40e800:	ldr	w1, [sp, #28]
  40e804:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40e808:	add	x2, x2, #0x398
  40e80c:	bl	404320 <sd_bus_error_set_errnof@plt>
  40e810:	stur	w0, [x29, #-4]
  40e814:	b	40e82c <bus_image_common_get_os_release+0x204>
  40e818:	ldur	x0, [x29, #-24]
  40e81c:	ldr	x8, [sp, #40]
  40e820:	ldr	x1, [x8, #112]
  40e824:	bl	404980 <bus_reply_pair_array@plt>
  40e828:	stur	w0, [x29, #-4]
  40e82c:	ldur	w0, [x29, #-4]
  40e830:	ldp	x29, x30, [sp, #80]
  40e834:	add	sp, sp, #0x60
  40e838:	ret

000000000040e83c <bus_image_acquire>:
  40e83c:	sub	sp, sp, #0x90
  40e840:	stp	x29, x30, [sp, #128]
  40e844:	add	x29, sp, #0x80
  40e848:	mov	x8, xzr
  40e84c:	adrp	x9, 413000 <manager_connect_bus+0x4e4>
  40e850:	add	x9, x9, #0xc4c
  40e854:	adrp	x10, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40e858:	add	x10, x10, #0x2db
  40e85c:	add	x10, x10, #0x3
  40e860:	adrp	x11, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40e864:	add	x11, x11, #0x77c
  40e868:	stur	x0, [x29, #-16]
  40e86c:	stur	x1, [x29, #-24]
  40e870:	stur	x2, [x29, #-32]
  40e874:	stur	x3, [x29, #-40]
  40e878:	stur	w4, [x29, #-44]
  40e87c:	stur	x5, [x29, #-56]
  40e880:	str	x6, [sp, #64]
  40e884:	str	x7, [sp, #56]
  40e888:	str	x8, [sp, #48]
  40e88c:	str	x9, [sp, #24]
  40e890:	str	x10, [sp, #16]
  40e894:	str	x11, [sp, #8]
  40e898:	ldur	x8, [x29, #-16]
  40e89c:	cmp	x8, #0x0
  40e8a0:	cset	w9, ne  // ne = any
  40e8a4:	mov	w10, #0x1                   	// #1
  40e8a8:	eor	w9, w9, #0x1
  40e8ac:	eor	w9, w9, w10
  40e8b0:	eor	w9, w9, w10
  40e8b4:	and	w9, w9, #0x1
  40e8b8:	mov	w0, w9
  40e8bc:	sxtw	x8, w0
  40e8c0:	cbz	x8, 40e8e4 <bus_image_acquire+0xa8>
  40e8c4:	mov	w8, wzr
  40e8c8:	mov	w0, w8
  40e8cc:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40e8d0:	add	x1, x1, #0x420
  40e8d4:	ldr	x2, [sp, #16]
  40e8d8:	mov	w3, #0x235                 	// #565
  40e8dc:	ldr	x4, [sp, #8]
  40e8e0:	bl	404150 <log_assert_failed_realm@plt>
  40e8e4:	ldur	x8, [x29, #-24]
  40e8e8:	cmp	x8, #0x0
  40e8ec:	cset	w9, ne  // ne = any
  40e8f0:	mov	w10, #0x1                   	// #1
  40e8f4:	eor	w9, w9, #0x1
  40e8f8:	eor	w9, w9, w10
  40e8fc:	eor	w9, w9, w10
  40e900:	and	w9, w9, #0x1
  40e904:	mov	w0, w9
  40e908:	sxtw	x8, w0
  40e90c:	cbz	x8, 40e930 <bus_image_acquire+0xf4>
  40e910:	mov	w8, wzr
  40e914:	mov	w0, w8
  40e918:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40e91c:	add	x1, x1, #0xfb4
  40e920:	ldr	x2, [sp, #16]
  40e924:	mov	w3, #0x236                 	// #566
  40e928:	ldr	x4, [sp, #8]
  40e92c:	bl	404150 <log_assert_failed_realm@plt>
  40e930:	ldur	x8, [x29, #-32]
  40e934:	mov	w9, #0x1                   	// #1
  40e938:	str	w9, [sp, #4]
  40e93c:	cbnz	x8, 40e950 <bus_image_acquire+0x114>
  40e940:	ldur	x8, [x29, #-40]
  40e944:	cmp	x8, #0x0
  40e948:	cset	w9, ne  // ne = any
  40e94c:	str	w9, [sp, #4]
  40e950:	ldr	w8, [sp, #4]
  40e954:	mov	w9, #0x1                   	// #1
  40e958:	eor	w8, w8, #0x1
  40e95c:	eor	w8, w8, w9
  40e960:	eor	w8, w8, w9
  40e964:	and	w8, w8, #0x1
  40e968:	mov	w0, w8
  40e96c:	sxtw	x10, w0
  40e970:	cbz	x10, 40e994 <bus_image_acquire+0x158>
  40e974:	mov	w8, wzr
  40e978:	mov	w0, w8
  40e97c:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40e980:	add	x1, x1, #0x2c5
  40e984:	ldr	x2, [sp, #16]
  40e988:	mov	w3, #0x237                 	// #567
  40e98c:	ldr	x4, [sp, #8]
  40e990:	bl	404150 <log_assert_failed_realm@plt>
  40e994:	ldur	w8, [x29, #-44]
  40e998:	cmp	w8, #0x0
  40e99c:	cset	w8, ge  // ge = tcont
  40e9a0:	mov	w9, #0x1                   	// #1
  40e9a4:	eor	w8, w8, #0x1
  40e9a8:	eor	w8, w8, w9
  40e9ac:	eor	w8, w8, w9
  40e9b0:	and	w8, w8, #0x1
  40e9b4:	mov	w0, w8
  40e9b8:	sxtw	x10, w0
  40e9bc:	cbz	x10, 40e9e0 <bus_image_acquire+0x1a4>
  40e9c0:	mov	w8, wzr
  40e9c4:	mov	w0, w8
  40e9c8:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40e9cc:	add	x1, x1, #0x800
  40e9d0:	ldr	x2, [sp, #16]
  40e9d4:	mov	w3, #0x238                 	// #568
  40e9d8:	ldr	x4, [sp, #8]
  40e9dc:	bl	404150 <log_assert_failed_realm@plt>
  40e9e0:	ldur	w8, [x29, #-44]
  40e9e4:	cmp	w8, #0x3
  40e9e8:	cset	w8, lt  // lt = tstop
  40e9ec:	mov	w9, #0x1                   	// #1
  40e9f0:	eor	w8, w8, #0x1
  40e9f4:	eor	w8, w8, w9
  40e9f8:	eor	w8, w8, w9
  40e9fc:	and	w8, w8, #0x1
  40ea00:	mov	w0, w8
  40ea04:	sxtw	x10, w0
  40ea08:	cbz	x10, 40ea2c <bus_image_acquire+0x1f0>
  40ea0c:	mov	w8, wzr
  40ea10:	mov	w0, w8
  40ea14:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ea18:	add	x1, x1, #0x80a
  40ea1c:	ldr	x2, [sp, #16]
  40ea20:	mov	w3, #0x239                 	// #569
  40ea24:	ldr	x4, [sp, #8]
  40ea28:	bl	404150 <log_assert_failed_realm@plt>
  40ea2c:	ldur	x8, [x29, #-56]
  40ea30:	mov	w9, #0x1                   	// #1
  40ea34:	str	w9, [sp]
  40ea38:	cbnz	x8, 40ea4c <bus_image_acquire+0x210>
  40ea3c:	ldur	w8, [x29, #-44]
  40ea40:	cmp	w8, #0x0
  40ea44:	cset	w8, eq  // eq = none
  40ea48:	str	w8, [sp]
  40ea4c:	ldr	w8, [sp]
  40ea50:	mov	w9, #0x1                   	// #1
  40ea54:	eor	w8, w8, #0x1
  40ea58:	eor	w8, w8, w9
  40ea5c:	eor	w8, w8, w9
  40ea60:	and	w8, w8, #0x1
  40ea64:	mov	w0, w8
  40ea68:	sxtw	x10, w0
  40ea6c:	cbz	x10, 40ea90 <bus_image_acquire+0x254>
  40ea70:	mov	w8, wzr
  40ea74:	mov	w0, w8
  40ea78:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ea7c:	add	x1, x1, #0x82d
  40ea80:	ldr	x2, [sp, #16]
  40ea84:	mov	w3, #0x23a                 	// #570
  40ea88:	ldr	x4, [sp, #8]
  40ea8c:	bl	404150 <log_assert_failed_realm@plt>
  40ea90:	ldr	x8, [sp, #64]
  40ea94:	cmp	x8, #0x0
  40ea98:	cset	w9, ne  // ne = any
  40ea9c:	mov	w10, #0x1                   	// #1
  40eaa0:	eor	w9, w9, #0x1
  40eaa4:	eor	w9, w9, w10
  40eaa8:	eor	w9, w9, w10
  40eaac:	and	w9, w9, #0x1
  40eab0:	mov	w0, w9
  40eab4:	sxtw	x8, w0
  40eab8:	cbz	x8, 40eadc <bus_image_acquire+0x2a0>
  40eabc:	mov	w8, wzr
  40eac0:	mov	w0, w8
  40eac4:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  40eac8:	add	x1, x1, #0xabc
  40eacc:	ldr	x2, [sp, #16]
  40ead0:	mov	w3, #0x23b                 	// #571
  40ead4:	ldr	x4, [sp, #8]
  40ead8:	bl	404150 <log_assert_failed_realm@plt>
  40eadc:	ldur	w8, [x29, #-44]
  40eae0:	cmp	w8, #0x2
  40eae4:	b.ne	40eb64 <bus_image_acquire+0x328>  // b.any
  40eae8:	ldur	x0, [x29, #-24]
  40eaec:	ldur	x2, [x29, #-56]
  40eaf0:	ldur	x8, [x29, #-16]
  40eaf4:	add	x6, x8, #0x10
  40eaf8:	ldr	x7, [sp, #56]
  40eafc:	mov	w1, #0x15                  	// #21
  40eb00:	mov	x8, xzr
  40eb04:	mov	x3, x8
  40eb08:	mov	w9, wzr
  40eb0c:	and	w4, w9, #0x1
  40eb10:	mov	w5, #0xffffffff            	// #-1
  40eb14:	bl	404930 <bus_verify_polkit_async@plt>
  40eb18:	str	w0, [sp, #36]
  40eb1c:	ldr	w9, [sp, #36]
  40eb20:	cmp	w9, #0x0
  40eb24:	cset	w9, ge  // ge = tcont
  40eb28:	tbnz	w9, #0, 40eb40 <bus_image_acquire+0x304>
  40eb2c:	ldr	w8, [sp, #36]
  40eb30:	stur	w8, [x29, #-4]
  40eb34:	mov	w8, #0x1                   	// #1
  40eb38:	str	w8, [sp, #32]
  40eb3c:	b	40ee00 <bus_image_acquire+0x5c4>
  40eb40:	ldr	w8, [sp, #36]
  40eb44:	cbnz	w8, 40eb64 <bus_image_acquire+0x328>
  40eb48:	ldr	x8, [sp, #64]
  40eb4c:	mov	x9, xzr
  40eb50:	str	x9, [x8]
  40eb54:	stur	wzr, [x29, #-4]
  40eb58:	mov	w10, #0x1                   	// #1
  40eb5c:	str	w10, [sp, #32]
  40eb60:	b	40ee00 <bus_image_acquire+0x5c4>
  40eb64:	ldur	x8, [x29, #-40]
  40eb68:	cbz	x8, 40eb88 <bus_image_acquire+0x34c>
  40eb6c:	ldur	x8, [x29, #-40]
  40eb70:	ldr	x9, [sp, #64]
  40eb74:	str	x8, [x9]
  40eb78:	mov	w10, #0x1                   	// #1
  40eb7c:	stur	w10, [x29, #-4]
  40eb80:	str	w10, [sp, #32]
  40eb84:	b	40ee00 <bus_image_acquire+0x5c4>
  40eb88:	ldur	x0, [x29, #-16]
  40eb8c:	ldur	x1, [x29, #-32]
  40eb90:	bl	4111b0 <manager_image_cache_get>
  40eb94:	str	x0, [sp, #40]
  40eb98:	ldr	x8, [sp, #40]
  40eb9c:	cbz	x8, 40ebbc <bus_image_acquire+0x380>
  40eba0:	ldr	x8, [sp, #40]
  40eba4:	ldr	x9, [sp, #64]
  40eba8:	str	x8, [x9]
  40ebac:	mov	w10, #0x1                   	// #1
  40ebb0:	stur	w10, [x29, #-4]
  40ebb4:	str	w10, [sp, #32]
  40ebb8:	b	40ee00 <bus_image_acquire+0x5c4>
  40ebbc:	ldur	x0, [x29, #-32]
  40ebc0:	bl	404820 <image_name_is_valid@plt>
  40ebc4:	tbnz	w0, #0, 40ebcc <bus_image_acquire+0x390>
  40ebc8:	b	40ec20 <bus_image_acquire+0x3e4>
  40ebcc:	ldur	x1, [x29, #-32]
  40ebd0:	mov	w0, #0x1                   	// #1
  40ebd4:	add	x2, sp, #0x30
  40ebd8:	bl	404990 <image_find@plt>
  40ebdc:	str	w0, [sp, #36]
  40ebe0:	ldr	w8, [sp, #36]
  40ebe4:	mov	w9, #0xfffffffe            	// #-2
  40ebe8:	cmp	w8, w9
  40ebec:	b.ne	40ec1c <bus_image_acquire+0x3e0>  // b.any
  40ebf0:	ldr	x0, [sp, #56]
  40ebf4:	ldur	x3, [x29, #-32]
  40ebf8:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ebfc:	add	x1, x1, #0x85f
  40ec00:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ec04:	add	x2, x2, #0x885
  40ec08:	bl	404250 <sd_bus_error_setf@plt>
  40ec0c:	stur	w0, [x29, #-4]
  40ec10:	mov	w8, #0x1                   	// #1
  40ec14:	str	w8, [sp, #32]
  40ec18:	b	40ee00 <bus_image_acquire+0x5c4>
  40ec1c:	b	40ed50 <bus_image_acquire+0x514>
  40ec20:	ldur	w8, [x29, #-44]
  40ec24:	cbnz	w8, 40ec50 <bus_image_acquire+0x414>
  40ec28:	ldr	x0, [sp, #56]
  40ec2c:	ldur	x3, [x29, #-32]
  40ec30:	ldr	x1, [sp, #24]
  40ec34:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ec38:	add	x2, x2, #0x89a
  40ec3c:	bl	404250 <sd_bus_error_setf@plt>
  40ec40:	stur	w0, [x29, #-4]
  40ec44:	mov	w8, #0x1                   	// #1
  40ec48:	str	w8, [sp, #32]
  40ec4c:	b	40ee00 <bus_image_acquire+0x5c4>
  40ec50:	ldur	x0, [x29, #-32]
  40ec54:	bl	404530 <path_is_absolute@plt>
  40ec58:	tbnz	w0, #0, 40ec84 <bus_image_acquire+0x448>
  40ec5c:	ldr	x0, [sp, #56]
  40ec60:	ldur	x3, [x29, #-32]
  40ec64:	ldr	x1, [sp, #24]
  40ec68:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ec6c:	add	x2, x2, #0x8ca
  40ec70:	bl	404250 <sd_bus_error_setf@plt>
  40ec74:	stur	w0, [x29, #-4]
  40ec78:	mov	w8, #0x1                   	// #1
  40ec7c:	str	w8, [sp, #32]
  40ec80:	b	40ee00 <bus_image_acquire+0x5c4>
  40ec84:	ldur	x0, [x29, #-32]
  40ec88:	bl	4049a0 <path_is_normalized@plt>
  40ec8c:	tbnz	w0, #0, 40ecb8 <bus_image_acquire+0x47c>
  40ec90:	ldr	x0, [sp, #56]
  40ec94:	ldur	x3, [x29, #-32]
  40ec98:	ldr	x1, [sp, #24]
  40ec9c:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40eca0:	add	x2, x2, #0x8fc
  40eca4:	bl	404250 <sd_bus_error_setf@plt>
  40eca8:	stur	w0, [x29, #-4]
  40ecac:	mov	w8, #0x1                   	// #1
  40ecb0:	str	w8, [sp, #32]
  40ecb4:	b	40ee00 <bus_image_acquire+0x5c4>
  40ecb8:	ldur	w8, [x29, #-44]
  40ecbc:	cmp	w8, #0x1
  40ecc0:	b.ne	40ed40 <bus_image_acquire+0x504>  // b.any
  40ecc4:	ldur	x0, [x29, #-24]
  40ecc8:	ldur	x2, [x29, #-56]
  40eccc:	ldur	x8, [x29, #-16]
  40ecd0:	add	x6, x8, #0x10
  40ecd4:	ldr	x7, [sp, #56]
  40ecd8:	mov	w1, #0x15                  	// #21
  40ecdc:	mov	x8, xzr
  40ece0:	mov	x3, x8
  40ece4:	mov	w9, wzr
  40ece8:	and	w4, w9, #0x1
  40ecec:	mov	w5, #0xffffffff            	// #-1
  40ecf0:	bl	404930 <bus_verify_polkit_async@plt>
  40ecf4:	str	w0, [sp, #36]
  40ecf8:	ldr	w9, [sp, #36]
  40ecfc:	cmp	w9, #0x0
  40ed00:	cset	w9, ge  // ge = tcont
  40ed04:	tbnz	w9, #0, 40ed1c <bus_image_acquire+0x4e0>
  40ed08:	ldr	w8, [sp, #36]
  40ed0c:	stur	w8, [x29, #-4]
  40ed10:	mov	w8, #0x1                   	// #1
  40ed14:	str	w8, [sp, #32]
  40ed18:	b	40ee00 <bus_image_acquire+0x5c4>
  40ed1c:	ldr	w8, [sp, #36]
  40ed20:	cbnz	w8, 40ed40 <bus_image_acquire+0x504>
  40ed24:	ldr	x8, [sp, #64]
  40ed28:	mov	x9, xzr
  40ed2c:	str	x9, [x8]
  40ed30:	stur	wzr, [x29, #-4]
  40ed34:	mov	w10, #0x1                   	// #1
  40ed38:	str	w10, [sp, #32]
  40ed3c:	b	40ee00 <bus_image_acquire+0x5c4>
  40ed40:	ldur	x0, [x29, #-32]
  40ed44:	add	x1, sp, #0x30
  40ed48:	bl	4049b0 <image_from_path@plt>
  40ed4c:	str	w0, [sp, #36]
  40ed50:	ldr	w8, [sp, #36]
  40ed54:	mov	w9, #0xffffff84            	// #-124
  40ed58:	cmp	w8, w9
  40ed5c:	b.ne	40ed90 <bus_image_acquire+0x554>  // b.any
  40ed60:	ldr	x0, [sp, #56]
  40ed64:	ldur	x3, [x29, #-32]
  40ed68:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ed6c:	add	x1, x1, #0x91f
  40ed70:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ed74:	add	x2, x2, #0x946
  40ed78:	bl	404250 <sd_bus_error_setf@plt>
  40ed7c:	ldr	w8, [sp, #36]
  40ed80:	stur	w8, [x29, #-4]
  40ed84:	mov	w8, #0x1                   	// #1
  40ed88:	str	w8, [sp, #32]
  40ed8c:	b	40ee00 <bus_image_acquire+0x5c4>
  40ed90:	ldr	w8, [sp, #36]
  40ed94:	cmp	w8, #0x0
  40ed98:	cset	w8, ge  // ge = tcont
  40ed9c:	tbnz	w8, #0, 40edb4 <bus_image_acquire+0x578>
  40eda0:	ldr	w8, [sp, #36]
  40eda4:	stur	w8, [x29, #-4]
  40eda8:	mov	w8, #0x1                   	// #1
  40edac:	str	w8, [sp, #32]
  40edb0:	b	40ee00 <bus_image_acquire+0x5c4>
  40edb4:	ldur	x0, [x29, #-16]
  40edb8:	ldr	x1, [sp, #48]
  40edbc:	bl	41126c <manager_image_cache_add>
  40edc0:	str	w0, [sp, #36]
  40edc4:	ldr	w8, [sp, #36]
  40edc8:	cmp	w8, #0x0
  40edcc:	cset	w8, ge  // ge = tcont
  40edd0:	tbnz	w8, #0, 40ede8 <bus_image_acquire+0x5ac>
  40edd4:	ldr	w8, [sp, #36]
  40edd8:	stur	w8, [x29, #-4]
  40eddc:	mov	w8, #0x1                   	// #1
  40ede0:	str	w8, [sp, #32]
  40ede4:	b	40ee00 <bus_image_acquire+0x5c4>
  40ede8:	ldr	x8, [sp, #48]
  40edec:	ldr	x9, [sp, #64]
  40edf0:	str	x8, [x9]
  40edf4:	mov	w10, #0x1                   	// #1
  40edf8:	stur	w10, [x29, #-4]
  40edfc:	str	w10, [sp, #32]
  40ee00:	add	x0, sp, #0x30
  40ee04:	bl	410b0c <image_unrefp>
  40ee08:	ldur	w0, [x29, #-4]
  40ee0c:	ldp	x29, x30, [sp, #128]
  40ee10:	add	sp, sp, #0x90
  40ee14:	ret

000000000040ee18 <bus_image_common_get_metadata>:
  40ee18:	sub	sp, sp, #0xa0
  40ee1c:	stp	x29, x30, [sp, #144]
  40ee20:	add	x29, sp, #0x90
  40ee24:	mov	x8, xzr
  40ee28:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ee2c:	add	x9, x9, #0x2db
  40ee30:	add	x9, x9, #0x3
  40ee34:	adrp	x10, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ee38:	add	x10, x10, #0x3ba
  40ee3c:	stur	x0, [x29, #-16]
  40ee40:	stur	x1, [x29, #-24]
  40ee44:	stur	x2, [x29, #-32]
  40ee48:	stur	x3, [x29, #-40]
  40ee4c:	stur	x4, [x29, #-48]
  40ee50:	stur	x8, [x29, #-56]
  40ee54:	stur	x8, [x29, #-64]
  40ee58:	str	x8, [sp, #72]
  40ee5c:	str	x8, [sp, #64]
  40ee60:	str	x8, [sp, #56]
  40ee64:	str	x9, [sp, #32]
  40ee68:	str	x10, [sp, #24]
  40ee6c:	ldur	x8, [x29, #-32]
  40ee70:	mov	w9, #0x1                   	// #1
  40ee74:	str	w9, [sp, #20]
  40ee78:	cbnz	x8, 40ee8c <bus_image_common_get_metadata+0x74>
  40ee7c:	ldur	x8, [x29, #-40]
  40ee80:	cmp	x8, #0x0
  40ee84:	cset	w9, ne  // ne = any
  40ee88:	str	w9, [sp, #20]
  40ee8c:	ldr	w8, [sp, #20]
  40ee90:	mov	w9, #0x1                   	// #1
  40ee94:	eor	w8, w8, #0x1
  40ee98:	eor	w8, w8, w9
  40ee9c:	eor	w8, w8, w9
  40eea0:	and	w8, w8, #0x1
  40eea4:	mov	w0, w8
  40eea8:	sxtw	x10, w0
  40eeac:	cbz	x10, 40eed0 <bus_image_common_get_metadata+0xb8>
  40eeb0:	mov	w8, wzr
  40eeb4:	mov	w0, w8
  40eeb8:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40eebc:	add	x1, x1, #0x2c5
  40eec0:	ldr	x2, [sp, #32]
  40eec4:	mov	w3, #0x6d                  	// #109
  40eec8:	ldr	x4, [sp, #24]
  40eecc:	bl	404150 <log_assert_failed_realm@plt>
  40eed0:	ldur	x8, [x29, #-24]
  40eed4:	cmp	x8, #0x0
  40eed8:	cset	w9, ne  // ne = any
  40eedc:	mov	w10, #0x1                   	// #1
  40eee0:	eor	w9, w9, #0x1
  40eee4:	eor	w9, w9, w10
  40eee8:	eor	w9, w9, w10
  40eeec:	and	w9, w9, #0x1
  40eef0:	mov	w0, w9
  40eef4:	sxtw	x8, w0
  40eef8:	cbz	x8, 40ef1c <bus_image_common_get_metadata+0x104>
  40eefc:	mov	w8, wzr
  40ef00:	mov	w0, w8
  40ef04:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40ef08:	add	x1, x1, #0xfb4
  40ef0c:	ldr	x2, [sp, #32]
  40ef10:	mov	w3, #0x6e                  	// #110
  40ef14:	ldr	x4, [sp, #24]
  40ef18:	bl	404150 <log_assert_failed_realm@plt>
  40ef1c:	ldur	x8, [x29, #-16]
  40ef20:	cbnz	x8, 40ef7c <bus_image_common_get_metadata+0x164>
  40ef24:	ldur	x8, [x29, #-40]
  40ef28:	cmp	x8, #0x0
  40ef2c:	cset	w9, ne  // ne = any
  40ef30:	mov	w10, #0x1                   	// #1
  40ef34:	eor	w9, w9, #0x1
  40ef38:	eor	w9, w9, w10
  40ef3c:	eor	w9, w9, w10
  40ef40:	and	w9, w9, #0x1
  40ef44:	mov	w0, w9
  40ef48:	sxtw	x8, w0
  40ef4c:	cbz	x8, 40ef70 <bus_image_common_get_metadata+0x158>
  40ef50:	mov	w8, wzr
  40ef54:	mov	w0, w8
  40ef58:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ef5c:	add	x1, x1, #0x369
  40ef60:	ldr	x2, [sp, #32]
  40ef64:	mov	w3, #0x71                  	// #113
  40ef68:	ldr	x4, [sp, #24]
  40ef6c:	bl	404150 <log_assert_failed_realm@plt>
  40ef70:	ldur	x8, [x29, #-40]
  40ef74:	ldr	x8, [x8, #128]
  40ef78:	stur	x8, [x29, #-16]
  40ef7c:	ldur	x0, [x29, #-24]
  40ef80:	add	x1, sp, #0x38
  40ef84:	bl	4049c0 <sd_bus_message_read_strv@plt>
  40ef88:	str	w0, [sp, #44]
  40ef8c:	ldr	w8, [sp, #44]
  40ef90:	cmp	w8, #0x0
  40ef94:	cset	w8, ge  // ge = tcont
  40ef98:	tbnz	w8, #0, 40efb0 <bus_image_common_get_metadata+0x198>
  40ef9c:	ldr	w8, [sp, #44]
  40efa0:	stur	w8, [x29, #-4]
  40efa4:	mov	w8, #0x1                   	// #1
  40efa8:	str	w8, [sp, #40]
  40efac:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40efb0:	ldur	x0, [x29, #-16]
  40efb4:	ldur	x1, [x29, #-24]
  40efb8:	ldur	x2, [x29, #-32]
  40efbc:	sub	x6, x29, #0x28
  40efc0:	ldur	x3, [x29, #-40]
  40efc4:	ldur	x7, [x29, #-48]
  40efc8:	mov	w4, #0x1                   	// #1
  40efcc:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40efd0:	add	x5, x5, #0x36f
  40efd4:	bl	40e83c <bus_image_acquire>
  40efd8:	str	w0, [sp, #44]
  40efdc:	ldr	w8, [sp, #44]
  40efe0:	cmp	w8, #0x0
  40efe4:	cset	w8, ge  // ge = tcont
  40efe8:	tbnz	w8, #0, 40f000 <bus_image_common_get_metadata+0x1e8>
  40efec:	ldr	w8, [sp, #44]
  40eff0:	stur	w8, [x29, #-4]
  40eff4:	mov	w8, #0x1                   	// #1
  40eff8:	str	w8, [sp, #40]
  40effc:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40f000:	ldr	w8, [sp, #44]
  40f004:	cbnz	w8, 40f018 <bus_image_common_get_metadata+0x200>
  40f008:	mov	w8, #0x1                   	// #1
  40f00c:	stur	w8, [x29, #-4]
  40f010:	str	w8, [sp, #40]
  40f014:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40f018:	ldur	x8, [x29, #-40]
  40f01c:	ldr	x0, [x8, #16]
  40f020:	ldr	x1, [sp, #56]
  40f024:	ldur	x4, [x29, #-48]
  40f028:	sub	x2, x29, #0x38
  40f02c:	sub	x3, x29, #0x40
  40f030:	bl	405308 <portable_extract>
  40f034:	str	w0, [sp, #44]
  40f038:	ldr	w9, [sp, #44]
  40f03c:	cmp	w9, #0x0
  40f040:	cset	w9, ge  // ge = tcont
  40f044:	tbnz	w9, #0, 40f05c <bus_image_common_get_metadata+0x244>
  40f048:	ldr	w8, [sp, #44]
  40f04c:	stur	w8, [x29, #-4]
  40f050:	mov	w8, #0x1                   	// #1
  40f054:	str	w8, [sp, #40]
  40f058:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40f05c:	ldur	x0, [x29, #-64]
  40f060:	add	x1, sp, #0x40
  40f064:	bl	404f74 <portable_metadata_hashmap_to_sorted_array>
  40f068:	str	w0, [sp, #44]
  40f06c:	ldr	w8, [sp, #44]
  40f070:	cmp	w8, #0x0
  40f074:	cset	w8, ge  // ge = tcont
  40f078:	tbnz	w8, #0, 40f090 <bus_image_common_get_metadata+0x278>
  40f07c:	ldr	w8, [sp, #44]
  40f080:	stur	w8, [x29, #-4]
  40f084:	mov	w8, #0x1                   	// #1
  40f088:	str	w8, [sp, #40]
  40f08c:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40f090:	ldur	x0, [x29, #-24]
  40f094:	add	x1, sp, #0x48
  40f098:	bl	4048c0 <sd_bus_message_new_method_return@plt>
  40f09c:	str	w0, [sp, #44]
  40f0a0:	ldr	w8, [sp, #44]
  40f0a4:	cmp	w8, #0x0
  40f0a8:	cset	w8, ge  // ge = tcont
  40f0ac:	tbnz	w8, #0, 40f0c4 <bus_image_common_get_metadata+0x2ac>
  40f0b0:	ldr	w8, [sp, #44]
  40f0b4:	stur	w8, [x29, #-4]
  40f0b8:	mov	w8, #0x1                   	// #1
  40f0bc:	str	w8, [sp, #40]
  40f0c0:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40f0c4:	ldr	x0, [sp, #72]
  40f0c8:	ldur	x8, [x29, #-40]
  40f0cc:	ldr	x2, [x8, #16]
  40f0d0:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40f0d4:	add	x1, x1, #0xc4e
  40f0d8:	bl	404870 <sd_bus_message_append@plt>
  40f0dc:	str	w0, [sp, #44]
  40f0e0:	ldr	w9, [sp, #44]
  40f0e4:	cmp	w9, #0x0
  40f0e8:	cset	w9, ge  // ge = tcont
  40f0ec:	tbnz	w9, #0, 40f104 <bus_image_common_get_metadata+0x2ec>
  40f0f0:	ldr	w8, [sp, #44]
  40f0f4:	stur	w8, [x29, #-4]
  40f0f8:	mov	w8, #0x1                   	// #1
  40f0fc:	str	w8, [sp, #40]
  40f100:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40f104:	ldr	x0, [sp, #72]
  40f108:	ldur	x1, [x29, #-56]
  40f10c:	bl	40f434 <append_fd>
  40f110:	str	w0, [sp, #44]
  40f114:	ldr	w8, [sp, #44]
  40f118:	cmp	w8, #0x0
  40f11c:	cset	w8, ge  // ge = tcont
  40f120:	tbnz	w8, #0, 40f138 <bus_image_common_get_metadata+0x320>
  40f124:	ldr	w8, [sp, #44]
  40f128:	stur	w8, [x29, #-4]
  40f12c:	mov	w8, #0x1                   	// #1
  40f130:	str	w8, [sp, #40]
  40f134:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40f138:	ldr	x0, [sp, #72]
  40f13c:	mov	w1, #0x61                  	// #97
  40f140:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40f144:	add	x2, x2, #0x420
  40f148:	bl	4048d0 <sd_bus_message_open_container@plt>
  40f14c:	str	w0, [sp, #44]
  40f150:	ldr	w8, [sp, #44]
  40f154:	cmp	w8, #0x0
  40f158:	cset	w8, ge  // ge = tcont
  40f15c:	tbnz	w8, #0, 40f174 <bus_image_common_get_metadata+0x35c>
  40f160:	ldr	w8, [sp, #44]
  40f164:	stur	w8, [x29, #-4]
  40f168:	mov	w8, #0x1                   	// #1
  40f16c:	str	w8, [sp, #40]
  40f170:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40f174:	str	xzr, [sp, #48]
  40f178:	ldr	x8, [sp, #48]
  40f17c:	ldur	x0, [x29, #-64]
  40f180:	str	x8, [sp, #8]
  40f184:	bl	40f61c <hashmap_size>
  40f188:	mov	w8, w0
  40f18c:	ubfx	x8, x8, #0, #32
  40f190:	ldr	x9, [sp, #8]
  40f194:	cmp	x9, x8
  40f198:	b.cs	40f2b4 <bus_image_common_get_metadata+0x49c>  // b.hs, b.nlast
  40f19c:	ldr	x0, [sp, #72]
  40f1a0:	mov	w1, #0x65                  	// #101
  40f1a4:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40f1a8:	add	x2, x2, #0x426
  40f1ac:	bl	4048d0 <sd_bus_message_open_container@plt>
  40f1b0:	str	w0, [sp, #44]
  40f1b4:	ldr	w8, [sp, #44]
  40f1b8:	cmp	w8, #0x0
  40f1bc:	cset	w8, ge  // ge = tcont
  40f1c0:	tbnz	w8, #0, 40f1d8 <bus_image_common_get_metadata+0x3c0>
  40f1c4:	ldr	w8, [sp, #44]
  40f1c8:	stur	w8, [x29, #-4]
  40f1cc:	mov	w8, #0x1                   	// #1
  40f1d0:	str	w8, [sp, #40]
  40f1d4:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40f1d8:	ldr	x0, [sp, #72]
  40f1dc:	ldr	x8, [sp, #64]
  40f1e0:	ldr	x9, [sp, #48]
  40f1e4:	mov	x10, #0x8                   	// #8
  40f1e8:	mul	x9, x10, x9
  40f1ec:	add	x8, x8, x9
  40f1f0:	ldr	x8, [x8]
  40f1f4:	add	x2, x8, #0x10
  40f1f8:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40f1fc:	add	x1, x1, #0xc4e
  40f200:	bl	404870 <sd_bus_message_append@plt>
  40f204:	str	w0, [sp, #44]
  40f208:	ldr	w11, [sp, #44]
  40f20c:	cmp	w11, #0x0
  40f210:	cset	w11, ge  // ge = tcont
  40f214:	tbnz	w11, #0, 40f22c <bus_image_common_get_metadata+0x414>
  40f218:	ldr	w8, [sp, #44]
  40f21c:	stur	w8, [x29, #-4]
  40f220:	mov	w8, #0x1                   	// #1
  40f224:	str	w8, [sp, #40]
  40f228:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40f22c:	ldr	x0, [sp, #72]
  40f230:	ldr	x8, [sp, #64]
  40f234:	ldr	x9, [sp, #48]
  40f238:	mov	x10, #0x8                   	// #8
  40f23c:	mul	x9, x10, x9
  40f240:	add	x8, x8, x9
  40f244:	ldr	x1, [x8]
  40f248:	bl	40f434 <append_fd>
  40f24c:	str	w0, [sp, #44]
  40f250:	ldr	w11, [sp, #44]
  40f254:	cmp	w11, #0x0
  40f258:	cset	w11, ge  // ge = tcont
  40f25c:	tbnz	w11, #0, 40f274 <bus_image_common_get_metadata+0x45c>
  40f260:	ldr	w8, [sp, #44]
  40f264:	stur	w8, [x29, #-4]
  40f268:	mov	w8, #0x1                   	// #1
  40f26c:	str	w8, [sp, #40]
  40f270:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40f274:	ldr	x0, [sp, #72]
  40f278:	bl	404910 <sd_bus_message_close_container@plt>
  40f27c:	str	w0, [sp, #44]
  40f280:	ldr	w8, [sp, #44]
  40f284:	cmp	w8, #0x0
  40f288:	cset	w8, ge  // ge = tcont
  40f28c:	tbnz	w8, #0, 40f2a4 <bus_image_common_get_metadata+0x48c>
  40f290:	ldr	w8, [sp, #44]
  40f294:	stur	w8, [x29, #-4]
  40f298:	mov	w8, #0x1                   	// #1
  40f29c:	str	w8, [sp, #40]
  40f2a0:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40f2a4:	ldr	x8, [sp, #48]
  40f2a8:	add	x8, x8, #0x1
  40f2ac:	str	x8, [sp, #48]
  40f2b0:	b	40f178 <bus_image_common_get_metadata+0x360>
  40f2b4:	ldr	x0, [sp, #72]
  40f2b8:	bl	404910 <sd_bus_message_close_container@plt>
  40f2bc:	str	w0, [sp, #44]
  40f2c0:	ldr	w8, [sp, #44]
  40f2c4:	cmp	w8, #0x0
  40f2c8:	cset	w8, ge  // ge = tcont
  40f2cc:	tbnz	w8, #0, 40f2e4 <bus_image_common_get_metadata+0x4cc>
  40f2d0:	ldr	w8, [sp, #44]
  40f2d4:	stur	w8, [x29, #-4]
  40f2d8:	mov	w8, #0x1                   	// #1
  40f2dc:	str	w8, [sp, #40]
  40f2e0:	b	40f304 <bus_image_common_get_metadata+0x4ec>
  40f2e4:	ldr	x1, [sp, #72]
  40f2e8:	mov	x8, xzr
  40f2ec:	mov	x0, x8
  40f2f0:	mov	x2, x8
  40f2f4:	bl	404920 <sd_bus_send@plt>
  40f2f8:	stur	w0, [x29, #-4]
  40f2fc:	mov	w9, #0x1                   	// #1
  40f300:	str	w9, [sp, #40]
  40f304:	add	x0, sp, #0x38
  40f308:	bl	40f400 <strv_freep>
  40f30c:	add	x0, sp, #0x40
  40f310:	bl	40f3d8 <freep>
  40f314:	add	x0, sp, #0x48
  40f318:	bl	40f3a4 <sd_bus_message_unrefp>
  40f31c:	sub	x0, x29, #0x40
  40f320:	bl	40f370 <hashmap_freep>
  40f324:	sub	x0, x29, #0x38
  40f328:	bl	40f33c <portable_metadata_unrefp>
  40f32c:	ldur	w0, [x29, #-4]
  40f330:	ldp	x29, x30, [sp, #144]
  40f334:	add	sp, sp, #0xa0
  40f338:	ret

000000000040f33c <portable_metadata_unrefp>:
  40f33c:	sub	sp, sp, #0x20
  40f340:	stp	x29, x30, [sp, #16]
  40f344:	add	x29, sp, #0x10
  40f348:	str	x0, [sp, #8]
  40f34c:	ldr	x8, [sp, #8]
  40f350:	ldr	x8, [x8]
  40f354:	cbz	x8, 40f364 <portable_metadata_unrefp+0x28>
  40f358:	ldr	x8, [sp, #8]
  40f35c:	ldr	x0, [x8]
  40f360:	bl	404ee8 <portable_metadata_unref>
  40f364:	ldp	x29, x30, [sp, #16]
  40f368:	add	sp, sp, #0x20
  40f36c:	ret

000000000040f370 <hashmap_freep>:
  40f370:	sub	sp, sp, #0x20
  40f374:	stp	x29, x30, [sp, #16]
  40f378:	add	x29, sp, #0x10
  40f37c:	str	x0, [sp, #8]
  40f380:	ldr	x8, [sp, #8]
  40f384:	ldr	x8, [x8]
  40f388:	cbz	x8, 40f398 <hashmap_freep+0x28>
  40f38c:	ldr	x8, [sp, #8]
  40f390:	ldr	x0, [x8]
  40f394:	bl	4110f0 <hashmap_free>
  40f398:	ldp	x29, x30, [sp, #16]
  40f39c:	add	sp, sp, #0x20
  40f3a0:	ret

000000000040f3a4 <sd_bus_message_unrefp>:
  40f3a4:	sub	sp, sp, #0x20
  40f3a8:	stp	x29, x30, [sp, #16]
  40f3ac:	add	x29, sp, #0x10
  40f3b0:	str	x0, [sp, #8]
  40f3b4:	ldr	x8, [sp, #8]
  40f3b8:	ldr	x8, [x8]
  40f3bc:	cbz	x8, 40f3cc <sd_bus_message_unrefp+0x28>
  40f3c0:	ldr	x8, [sp, #8]
  40f3c4:	ldr	x0, [x8]
  40f3c8:	bl	404780 <sd_bus_message_unref@plt>
  40f3cc:	ldp	x29, x30, [sp, #16]
  40f3d0:	add	sp, sp, #0x20
  40f3d4:	ret

000000000040f3d8 <freep>:
  40f3d8:	sub	sp, sp, #0x20
  40f3dc:	stp	x29, x30, [sp, #16]
  40f3e0:	add	x29, sp, #0x10
  40f3e4:	str	x0, [sp, #8]
  40f3e8:	ldr	x8, [sp, #8]
  40f3ec:	ldr	x0, [x8]
  40f3f0:	bl	404140 <free@plt>
  40f3f4:	ldp	x29, x30, [sp, #16]
  40f3f8:	add	sp, sp, #0x20
  40f3fc:	ret

000000000040f400 <strv_freep>:
  40f400:	sub	sp, sp, #0x20
  40f404:	stp	x29, x30, [sp, #16]
  40f408:	add	x29, sp, #0x10
  40f40c:	str	x0, [sp, #8]
  40f410:	ldr	x8, [sp, #8]
  40f414:	ldr	x8, [x8]
  40f418:	cbz	x8, 40f428 <strv_freep+0x28>
  40f41c:	ldr	x8, [sp, #8]
  40f420:	ldr	x0, [x8]
  40f424:	bl	404960 <strv_free@plt>
  40f428:	ldp	x29, x30, [sp, #16]
  40f42c:	add	sp, sp, #0x20
  40f430:	ret

000000000040f434 <append_fd>:
  40f434:	sub	sp, sp, #0x60
  40f438:	stp	x29, x30, [sp, #80]
  40f43c:	add	x29, sp, #0x50
  40f440:	mov	x8, xzr
  40f444:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40f448:	add	x9, x9, #0x2db
  40f44c:	add	x9, x9, #0x3
  40f450:	adrp	x10, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40f454:	add	x10, x10, #0xaab
  40f458:	stur	x0, [x29, #-16]
  40f45c:	stur	x1, [x29, #-24]
  40f460:	stur	x8, [x29, #-32]
  40f464:	str	x8, [sp, #40]
  40f468:	str	x9, [sp, #16]
  40f46c:	str	x10, [sp, #8]
  40f470:	ldur	x8, [x29, #-16]
  40f474:	cmp	x8, #0x0
  40f478:	cset	w9, ne  // ne = any
  40f47c:	mov	w10, #0x1                   	// #1
  40f480:	eor	w9, w9, #0x1
  40f484:	eor	w9, w9, w10
  40f488:	eor	w9, w9, w10
  40f48c:	and	w9, w9, #0x1
  40f490:	mov	w0, w9
  40f494:	sxtw	x8, w0
  40f498:	cbz	x8, 40f4bc <append_fd+0x88>
  40f49c:	mov	w8, wzr
  40f4a0:	mov	w0, w8
  40f4a4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40f4a8:	add	x1, x1, #0x420
  40f4ac:	ldr	x2, [sp, #16]
  40f4b0:	mov	w3, #0x4d                  	// #77
  40f4b4:	ldr	x4, [sp, #8]
  40f4b8:	bl	404150 <log_assert_failed_realm@plt>
  40f4bc:	ldur	x8, [x29, #-24]
  40f4c0:	cmp	x8, #0x0
  40f4c4:	cset	w9, ne  // ne = any
  40f4c8:	mov	w10, #0x1                   	// #1
  40f4cc:	eor	w9, w9, #0x1
  40f4d0:	eor	w9, w9, w10
  40f4d4:	eor	w9, w9, w10
  40f4d8:	and	w9, w9, #0x1
  40f4dc:	mov	w0, w9
  40f4e0:	sxtw	x8, w0
  40f4e4:	cbz	x8, 40f508 <append_fd+0xd4>
  40f4e8:	mov	w8, wzr
  40f4ec:	mov	w0, w8
  40f4f0:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40f4f4:	add	x1, x1, #0x8df
  40f4f8:	ldr	x2, [sp, #16]
  40f4fc:	mov	w3, #0x4e                  	// #78
  40f500:	ldr	x4, [sp, #8]
  40f504:	bl	404150 <log_assert_failed_realm@plt>
  40f508:	ldur	x8, [x29, #-24]
  40f50c:	ldr	w9, [x8]
  40f510:	cmp	w9, #0x0
  40f514:	cset	w9, ge  // ge = tcont
  40f518:	mov	w10, #0x1                   	// #1
  40f51c:	eor	w9, w9, #0x1
  40f520:	eor	w9, w9, w10
  40f524:	eor	w9, w9, w10
  40f528:	and	w9, w9, #0x1
  40f52c:	mov	w0, w9
  40f530:	sxtw	x8, w0
  40f534:	cbz	x8, 40f558 <append_fd+0x124>
  40f538:	mov	w8, wzr
  40f53c:	mov	w0, w8
  40f540:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40f544:	add	x1, x1, #0xadf
  40f548:	ldr	x2, [sp, #16]
  40f54c:	mov	w3, #0x4f                  	// #79
  40f550:	ldr	x4, [sp, #8]
  40f554:	bl	404150 <log_assert_failed_realm@plt>
  40f558:	ldur	x8, [x29, #-24]
  40f55c:	ldr	w0, [x8]
  40f560:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40f564:	add	x1, x1, #0x964
  40f568:	bl	4049d0 <fdopen@plt>
  40f56c:	stur	x0, [x29, #-32]
  40f570:	ldur	x8, [x29, #-32]
  40f574:	cbnz	x8, 40f598 <append_fd+0x164>
  40f578:	bl	404270 <__errno_location@plt>
  40f57c:	ldr	w8, [x0]
  40f580:	mov	w9, wzr
  40f584:	subs	w8, w9, w8
  40f588:	stur	w8, [x29, #-4]
  40f58c:	mov	w8, #0x1                   	// #1
  40f590:	str	w8, [sp, #24]
  40f594:	b	40f5fc <append_fd+0x1c8>
  40f598:	ldur	x8, [x29, #-24]
  40f59c:	mov	w9, #0xffffffff            	// #-1
  40f5a0:	str	w9, [x8]
  40f5a4:	ldur	x0, [x29, #-32]
  40f5a8:	add	x1, sp, #0x28
  40f5ac:	add	x2, sp, #0x20
  40f5b0:	bl	411148 <read_full_stream>
  40f5b4:	str	w0, [sp, #28]
  40f5b8:	ldr	w9, [sp, #28]
  40f5bc:	cmp	w9, #0x0
  40f5c0:	cset	w9, ge  // ge = tcont
  40f5c4:	tbnz	w9, #0, 40f5dc <append_fd+0x1a8>
  40f5c8:	ldr	w8, [sp, #28]
  40f5cc:	stur	w8, [x29, #-4]
  40f5d0:	mov	w8, #0x1                   	// #1
  40f5d4:	str	w8, [sp, #24]
  40f5d8:	b	40f5fc <append_fd+0x1c8>
  40f5dc:	ldur	x0, [x29, #-16]
  40f5e0:	ldr	x2, [sp, #40]
  40f5e4:	ldr	x3, [sp, #32]
  40f5e8:	mov	w1, #0x79                  	// #121
  40f5ec:	bl	4049e0 <sd_bus_message_append_array@plt>
  40f5f0:	stur	w0, [x29, #-4]
  40f5f4:	mov	w8, #0x1                   	// #1
  40f5f8:	str	w8, [sp, #24]
  40f5fc:	add	x0, sp, #0x28
  40f600:	bl	40f3d8 <freep>
  40f604:	sub	x0, x29, #0x20
  40f608:	bl	411120 <fclosep>
  40f60c:	ldur	w0, [x29, #-4]
  40f610:	ldp	x29, x30, [sp, #80]
  40f614:	add	sp, sp, #0x60
  40f618:	ret

000000000040f61c <hashmap_size>:
  40f61c:	sub	sp, sp, #0x20
  40f620:	stp	x29, x30, [sp, #16]
  40f624:	add	x29, sp, #0x10
  40f628:	str	x0, [sp, #8]
  40f62c:	ldr	x0, [sp, #8]
  40f630:	bl	404170 <internal_hashmap_size@plt>
  40f634:	ldp	x29, x30, [sp, #16]
  40f638:	add	sp, sp, #0x20
  40f63c:	ret

000000000040f640 <bus_image_common_attach>:
  40f640:	sub	sp, sp, #0xa0
  40f644:	stp	x29, x30, [sp, #144]
  40f648:	add	x29, sp, #0x90
  40f64c:	mov	x8, xzr
  40f650:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40f654:	add	x9, x9, #0x2db
  40f658:	add	x9, x9, #0x3
  40f65c:	adrp	x10, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40f660:	add	x10, x10, #0x42a
  40f664:	stur	x0, [x29, #-16]
  40f668:	stur	x1, [x29, #-24]
  40f66c:	stur	x2, [x29, #-32]
  40f670:	stur	x3, [x29, #-40]
  40f674:	stur	x4, [x29, #-48]
  40f678:	stur	x8, [x29, #-56]
  40f67c:	stur	x8, [x29, #-64]
  40f680:	stur	wzr, [x29, #-68]
  40f684:	str	xzr, [sp, #48]
  40f688:	str	x9, [sp, #24]
  40f68c:	str	x10, [sp, #16]
  40f690:	ldur	x8, [x29, #-24]
  40f694:	cmp	x8, #0x0
  40f698:	cset	w9, ne  // ne = any
  40f69c:	mov	w10, #0x1                   	// #1
  40f6a0:	eor	w9, w9, #0x1
  40f6a4:	eor	w9, w9, w10
  40f6a8:	eor	w9, w9, w10
  40f6ac:	and	w9, w9, #0x1
  40f6b0:	mov	w0, w9
  40f6b4:	sxtw	x8, w0
  40f6b8:	cbz	x8, 40f6dc <bus_image_common_attach+0x9c>
  40f6bc:	mov	w8, wzr
  40f6c0:	mov	w0, w8
  40f6c4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40f6c8:	add	x1, x1, #0xfb4
  40f6cc:	ldr	x2, [sp, #24]
  40f6d0:	mov	w3, #0xe7                  	// #231
  40f6d4:	ldr	x4, [sp, #16]
  40f6d8:	bl	404150 <log_assert_failed_realm@plt>
  40f6dc:	ldur	x8, [x29, #-32]
  40f6e0:	mov	w9, #0x1                   	// #1
  40f6e4:	str	w9, [sp, #12]
  40f6e8:	cbnz	x8, 40f6fc <bus_image_common_attach+0xbc>
  40f6ec:	ldur	x8, [x29, #-40]
  40f6f0:	cmp	x8, #0x0
  40f6f4:	cset	w9, ne  // ne = any
  40f6f8:	str	w9, [sp, #12]
  40f6fc:	ldr	w8, [sp, #12]
  40f700:	mov	w9, #0x1                   	// #1
  40f704:	eor	w8, w8, #0x1
  40f708:	eor	w8, w8, w9
  40f70c:	eor	w8, w8, w9
  40f710:	and	w8, w8, #0x1
  40f714:	mov	w0, w8
  40f718:	sxtw	x10, w0
  40f71c:	cbz	x10, 40f740 <bus_image_common_attach+0x100>
  40f720:	mov	w8, wzr
  40f724:	mov	w0, w8
  40f728:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40f72c:	add	x1, x1, #0x2c5
  40f730:	ldr	x2, [sp, #24]
  40f734:	mov	w3, #0xe8                  	// #232
  40f738:	ldr	x4, [sp, #16]
  40f73c:	bl	404150 <log_assert_failed_realm@plt>
  40f740:	ldur	x8, [x29, #-16]
  40f744:	cbnz	x8, 40f7a0 <bus_image_common_attach+0x160>
  40f748:	ldur	x8, [x29, #-40]
  40f74c:	cmp	x8, #0x0
  40f750:	cset	w9, ne  // ne = any
  40f754:	mov	w10, #0x1                   	// #1
  40f758:	eor	w9, w9, #0x1
  40f75c:	eor	w9, w9, w10
  40f760:	eor	w9, w9, w10
  40f764:	and	w9, w9, #0x1
  40f768:	mov	w0, w9
  40f76c:	sxtw	x8, w0
  40f770:	cbz	x8, 40f794 <bus_image_common_attach+0x154>
  40f774:	mov	w8, wzr
  40f778:	mov	w0, w8
  40f77c:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40f780:	add	x1, x1, #0x369
  40f784:	ldr	x2, [sp, #24]
  40f788:	mov	w3, #0xeb                  	// #235
  40f78c:	ldr	x4, [sp, #16]
  40f790:	bl	404150 <log_assert_failed_realm@plt>
  40f794:	ldur	x8, [x29, #-40]
  40f798:	ldr	x8, [x8, #128]
  40f79c:	stur	x8, [x29, #-16]
  40f7a0:	ldur	x0, [x29, #-24]
  40f7a4:	sub	x1, x29, #0x38
  40f7a8:	bl	4049c0 <sd_bus_message_read_strv@plt>
  40f7ac:	str	w0, [sp, #40]
  40f7b0:	ldr	w8, [sp, #40]
  40f7b4:	cmp	w8, #0x0
  40f7b8:	cset	w8, ge  // ge = tcont
  40f7bc:	tbnz	w8, #0, 40f7d4 <bus_image_common_attach+0x194>
  40f7c0:	ldr	w8, [sp, #40]
  40f7c4:	stur	w8, [x29, #-4]
  40f7c8:	mov	w8, #0x1                   	// #1
  40f7cc:	str	w8, [sp, #36]
  40f7d0:	b	40f988 <bus_image_common_attach+0x348>
  40f7d4:	ldur	x0, [x29, #-24]
  40f7d8:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40f7dc:	add	x1, x1, #0x48a
  40f7e0:	add	x2, sp, #0x40
  40f7e4:	add	x3, sp, #0x2c
  40f7e8:	add	x4, sp, #0x38
  40f7ec:	bl	4048a0 <sd_bus_message_read@plt>
  40f7f0:	str	w0, [sp, #40]
  40f7f4:	ldr	w8, [sp, #40]
  40f7f8:	cmp	w8, #0x0
  40f7fc:	cset	w8, ge  // ge = tcont
  40f800:	tbnz	w8, #0, 40f818 <bus_image_common_attach+0x1d8>
  40f804:	ldr	w8, [sp, #40]
  40f808:	stur	w8, [x29, #-4]
  40f80c:	mov	w8, #0x1                   	// #1
  40f810:	str	w8, [sp, #36]
  40f814:	b	40f988 <bus_image_common_attach+0x348>
  40f818:	ldr	x0, [sp, #56]
  40f81c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40f820:	add	x1, x1, #0xbd7
  40f824:	bl	404190 <strcmp@plt>
  40f828:	cbnz	w0, 40f83c <bus_image_common_attach+0x1fc>
  40f82c:	ldur	w8, [x29, #-68]
  40f830:	orr	w8, w8, #0x2
  40f834:	stur	w8, [x29, #-68]
  40f838:	b	40f898 <bus_image_common_attach+0x258>
  40f83c:	ldr	x0, [sp, #56]
  40f840:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40f844:	add	x1, x1, #0xbd2
  40f848:	bl	404190 <strcmp@plt>
  40f84c:	cbnz	w0, 40f860 <bus_image_common_attach+0x220>
  40f850:	ldur	w8, [x29, #-68]
  40f854:	orr	w8, w8, #0x1
  40f858:	stur	w8, [x29, #-68]
  40f85c:	b	40f898 <bus_image_common_attach+0x258>
  40f860:	ldr	x0, [sp, #56]
  40f864:	bl	40f9a0 <isempty>
  40f868:	tbnz	w0, #0, 40f898 <bus_image_common_attach+0x258>
  40f86c:	ldur	x0, [x29, #-24]
  40f870:	ldr	x3, [sp, #56]
  40f874:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  40f878:	add	x1, x1, #0xc4c
  40f87c:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40f880:	add	x2, x2, #0x48e
  40f884:	bl	4049f0 <sd_bus_reply_method_errorf@plt>
  40f888:	stur	w0, [x29, #-4]
  40f88c:	mov	w8, #0x1                   	// #1
  40f890:	str	w8, [sp, #36]
  40f894:	b	40f988 <bus_image_common_attach+0x348>
  40f898:	ldr	w8, [sp, #44]
  40f89c:	cbz	w8, 40f8ac <bus_image_common_attach+0x26c>
  40f8a0:	ldur	w8, [x29, #-68]
  40f8a4:	orr	w8, w8, #0x4
  40f8a8:	stur	w8, [x29, #-68]
  40f8ac:	ldur	x0, [x29, #-16]
  40f8b0:	ldur	x1, [x29, #-24]
  40f8b4:	ldur	x2, [x29, #-32]
  40f8b8:	sub	x6, x29, #0x28
  40f8bc:	ldur	x3, [x29, #-40]
  40f8c0:	ldur	x7, [x29, #-48]
  40f8c4:	mov	w4, #0x2                   	// #2
  40f8c8:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40f8cc:	add	x5, x5, #0x1af
  40f8d0:	bl	40e83c <bus_image_acquire>
  40f8d4:	str	w0, [sp, #40]
  40f8d8:	ldr	w8, [sp, #40]
  40f8dc:	cmp	w8, #0x0
  40f8e0:	cset	w8, ge  // ge = tcont
  40f8e4:	tbnz	w8, #0, 40f8fc <bus_image_common_attach+0x2bc>
  40f8e8:	ldr	w8, [sp, #40]
  40f8ec:	stur	w8, [x29, #-4]
  40f8f0:	mov	w8, #0x1                   	// #1
  40f8f4:	str	w8, [sp, #36]
  40f8f8:	b	40f988 <bus_image_common_attach+0x348>
  40f8fc:	ldr	w8, [sp, #40]
  40f900:	cbnz	w8, 40f914 <bus_image_common_attach+0x2d4>
  40f904:	mov	w8, #0x1                   	// #1
  40f908:	stur	w8, [x29, #-4]
  40f90c:	str	w8, [sp, #36]
  40f910:	b	40f988 <bus_image_common_attach+0x348>
  40f914:	ldur	x0, [x29, #-24]
  40f918:	bl	4048e0 <sd_bus_message_get_bus@plt>
  40f91c:	ldur	x8, [x29, #-40]
  40f920:	ldr	x1, [x8, #16]
  40f924:	ldur	x2, [x29, #-56]
  40f928:	ldr	x3, [sp, #64]
  40f92c:	ldur	w4, [x29, #-68]
  40f930:	ldur	x7, [x29, #-48]
  40f934:	sub	x5, x29, #0x40
  40f938:	add	x6, sp, #0x30
  40f93c:	bl	4060bc <portable_attach>
  40f940:	str	w0, [sp, #40]
  40f944:	ldr	w9, [sp, #40]
  40f948:	cmp	w9, #0x0
  40f94c:	cset	w9, ge  // ge = tcont
  40f950:	tbnz	w9, #0, 40f958 <bus_image_common_attach+0x318>
  40f954:	b	40f96c <bus_image_common_attach+0x32c>
  40f958:	ldur	x0, [x29, #-24]
  40f95c:	ldur	x1, [x29, #-64]
  40f960:	ldr	x2, [sp, #48]
  40f964:	bl	40e054 <reply_portable_changes>
  40f968:	str	w0, [sp, #40]
  40f96c:	ldur	x0, [x29, #-64]
  40f970:	ldr	x1, [sp, #48]
  40f974:	bl	405fbc <portable_changes_free>
  40f978:	ldr	w8, [sp, #40]
  40f97c:	stur	w8, [x29, #-4]
  40f980:	mov	w8, #0x1                   	// #1
  40f984:	str	w8, [sp, #36]
  40f988:	sub	x0, x29, #0x38
  40f98c:	bl	40f400 <strv_freep>
  40f990:	ldur	w0, [x29, #-4]
  40f994:	ldp	x29, x30, [sp, #144]
  40f998:	add	sp, sp, #0xa0
  40f99c:	ret

000000000040f9a0 <isempty>:
  40f9a0:	sub	sp, sp, #0x10
  40f9a4:	str	x0, [sp, #8]
  40f9a8:	ldr	x8, [sp, #8]
  40f9ac:	mov	w9, #0x1                   	// #1
  40f9b0:	str	w9, [sp, #4]
  40f9b4:	cbz	x8, 40f9d0 <isempty+0x30>
  40f9b8:	ldr	x8, [sp, #8]
  40f9bc:	ldrb	w9, [x8]
  40f9c0:	cmp	w9, #0x0
  40f9c4:	cset	w9, ne  // ne = any
  40f9c8:	eor	w9, w9, #0x1
  40f9cc:	str	w9, [sp, #4]
  40f9d0:	ldr	w8, [sp, #4]
  40f9d4:	and	w0, w8, #0x1
  40f9d8:	add	sp, sp, #0x10
  40f9dc:	ret

000000000040f9e0 <bus_image_common_remove>:
  40f9e0:	sub	sp, sp, #0x80
  40f9e4:	stp	x29, x30, [sp, #112]
  40f9e8:	add	x29, sp, #0x70
  40f9ec:	adrp	x8, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  40f9f0:	add	x8, x8, #0x280
  40f9f4:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40f9f8:	add	x9, x9, #0x2db
  40f9fc:	add	x9, x9, #0x3
  40fa00:	adrp	x10, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40fa04:	add	x10, x10, #0x4a5
  40fa08:	stur	x0, [x29, #-16]
  40fa0c:	stur	x1, [x29, #-24]
  40fa10:	stur	x2, [x29, #-32]
  40fa14:	stur	x3, [x29, #-40]
  40fa18:	stur	x4, [x29, #-48]
  40fa1c:	ldr	x8, [x8]
  40fa20:	str	x8, [sp, #56]
  40fa24:	str	wzr, [sp, #52]
  40fa28:	str	x9, [sp, #32]
  40fa2c:	str	x10, [sp, #24]
  40fa30:	ldur	x8, [x29, #-24]
  40fa34:	cmp	x8, #0x0
  40fa38:	cset	w9, ne  // ne = any
  40fa3c:	mov	w10, #0x1                   	// #1
  40fa40:	eor	w9, w9, #0x1
  40fa44:	eor	w9, w9, w10
  40fa48:	eor	w9, w9, w10
  40fa4c:	and	w9, w9, #0x1
  40fa50:	mov	w0, w9
  40fa54:	sxtw	x8, w0
  40fa58:	cbz	x8, 40fa7c <bus_image_common_remove+0x9c>
  40fa5c:	mov	w8, wzr
  40fa60:	mov	w0, w8
  40fa64:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40fa68:	add	x1, x1, #0xfb4
  40fa6c:	ldr	x2, [sp, #32]
  40fa70:	mov	w3, #0x163                 	// #355
  40fa74:	ldr	x4, [sp, #24]
  40fa78:	bl	404150 <log_assert_failed_realm@plt>
  40fa7c:	ldur	x8, [x29, #-32]
  40fa80:	mov	w9, #0x1                   	// #1
  40fa84:	str	w9, [sp, #20]
  40fa88:	cbnz	x8, 40fa9c <bus_image_common_remove+0xbc>
  40fa8c:	ldur	x8, [x29, #-40]
  40fa90:	cmp	x8, #0x0
  40fa94:	cset	w9, ne  // ne = any
  40fa98:	str	w9, [sp, #20]
  40fa9c:	ldr	w8, [sp, #20]
  40faa0:	mov	w9, #0x1                   	// #1
  40faa4:	eor	w8, w8, #0x1
  40faa8:	eor	w8, w8, w9
  40faac:	eor	w8, w8, w9
  40fab0:	and	w8, w8, #0x1
  40fab4:	mov	w0, w8
  40fab8:	sxtw	x10, w0
  40fabc:	cbz	x10, 40fae0 <bus_image_common_remove+0x100>
  40fac0:	mov	w8, wzr
  40fac4:	mov	w0, w8
  40fac8:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40facc:	add	x1, x1, #0x2c5
  40fad0:	ldr	x2, [sp, #32]
  40fad4:	mov	w3, #0x164                 	// #356
  40fad8:	ldr	x4, [sp, #24]
  40fadc:	bl	404150 <log_assert_failed_realm@plt>
  40fae0:	ldur	x8, [x29, #-16]
  40fae4:	cbnz	x8, 40fb40 <bus_image_common_remove+0x160>
  40fae8:	ldur	x8, [x29, #-40]
  40faec:	cmp	x8, #0x0
  40faf0:	cset	w9, ne  // ne = any
  40faf4:	mov	w10, #0x1                   	// #1
  40faf8:	eor	w9, w9, #0x1
  40fafc:	eor	w9, w9, w10
  40fb00:	eor	w9, w9, w10
  40fb04:	and	w9, w9, #0x1
  40fb08:	mov	w0, w9
  40fb0c:	sxtw	x8, w0
  40fb10:	cbz	x8, 40fb34 <bus_image_common_remove+0x154>
  40fb14:	mov	w8, wzr
  40fb18:	mov	w0, w8
  40fb1c:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40fb20:	add	x1, x1, #0x369
  40fb24:	ldr	x2, [sp, #32]
  40fb28:	mov	w3, #0x167                 	// #359
  40fb2c:	ldr	x4, [sp, #24]
  40fb30:	bl	404150 <log_assert_failed_realm@plt>
  40fb34:	ldur	x8, [x29, #-40]
  40fb38:	ldr	x8, [x8, #128]
  40fb3c:	stur	x8, [x29, #-16]
  40fb40:	ldur	x8, [x29, #-16]
  40fb44:	ldr	w9, [x8, #48]
  40fb48:	cmp	w9, #0x40
  40fb4c:	b.cc	40fb78 <bus_image_common_remove+0x198>  // b.lo, b.ul, b.last
  40fb50:	ldur	x0, [x29, #-48]
  40fb54:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40fb58:	add	x1, x1, #0x505
  40fb5c:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40fb60:	add	x2, x2, #0x52f
  40fb64:	bl	404250 <sd_bus_error_setf@plt>
  40fb68:	stur	w0, [x29, #-4]
  40fb6c:	mov	w8, #0x1                   	// #1
  40fb70:	str	w8, [sp, #40]
  40fb74:	b	40fdb8 <bus_image_common_remove+0x3d8>
  40fb78:	ldur	x0, [x29, #-16]
  40fb7c:	ldur	x1, [x29, #-24]
  40fb80:	ldur	x2, [x29, #-32]
  40fb84:	sub	x6, x29, #0x28
  40fb88:	ldur	x3, [x29, #-40]
  40fb8c:	ldur	x7, [x29, #-48]
  40fb90:	mov	w4, #0x2                   	// #2
  40fb94:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40fb98:	add	x5, x5, #0x232
  40fb9c:	bl	40e83c <bus_image_acquire>
  40fba0:	str	w0, [sp, #44]
  40fba4:	ldr	w8, [sp, #44]
  40fba8:	cmp	w8, #0x0
  40fbac:	cset	w8, ge  // ge = tcont
  40fbb0:	tbnz	w8, #0, 40fbc8 <bus_image_common_remove+0x1e8>
  40fbb4:	ldr	w8, [sp, #44]
  40fbb8:	stur	w8, [x29, #-4]
  40fbbc:	mov	w8, #0x1                   	// #1
  40fbc0:	str	w8, [sp, #40]
  40fbc4:	b	40fdb8 <bus_image_common_remove+0x3d8>
  40fbc8:	ldr	w8, [sp, #44]
  40fbcc:	cbnz	w8, 40fbe0 <bus_image_common_remove+0x200>
  40fbd0:	mov	w8, #0x1                   	// #1
  40fbd4:	stur	w8, [x29, #-4]
  40fbd8:	str	w8, [sp, #40]
  40fbdc:	b	40fdb8 <bus_image_common_remove+0x3d8>
  40fbe0:	ldur	x0, [x29, #-24]
  40fbe4:	bl	4048e0 <sd_bus_message_get_bus@plt>
  40fbe8:	ldur	x8, [x29, #-40]
  40fbec:	ldr	x1, [x8, #16]
  40fbf0:	ldur	x4, [x29, #-48]
  40fbf4:	mov	w9, wzr
  40fbf8:	mov	w2, w9
  40fbfc:	add	x3, sp, #0x30
  40fc00:	bl	409c4c <portable_get_state>
  40fc04:	str	w0, [sp, #44]
  40fc08:	ldr	w9, [sp, #44]
  40fc0c:	cmp	w9, #0x0
  40fc10:	cset	w9, ge  // ge = tcont
  40fc14:	tbnz	w9, #0, 40fc2c <bus_image_common_remove+0x24c>
  40fc18:	ldr	w8, [sp, #44]
  40fc1c:	stur	w8, [x29, #-4]
  40fc20:	mov	w8, #0x1                   	// #1
  40fc24:	str	w8, [sp, #40]
  40fc28:	b	40fdb8 <bus_image_common_remove+0x3d8>
  40fc2c:	ldr	w8, [sp, #48]
  40fc30:	cbz	w8, 40fc60 <bus_image_common_remove+0x280>
  40fc34:	ldur	x0, [x29, #-48]
  40fc38:	ldur	x8, [x29, #-40]
  40fc3c:	ldr	x3, [x8, #16]
  40fc40:	mov	w1, #0x10                  	// #16
  40fc44:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40fc48:	add	x2, x2, #0x54c
  40fc4c:	bl	404320 <sd_bus_error_set_errnof@plt>
  40fc50:	stur	w0, [x29, #-4]
  40fc54:	mov	w9, #0x1                   	// #1
  40fc58:	str	w9, [sp, #40]
  40fc5c:	b	40fdb8 <bus_image_common_remove+0x3d8>
  40fc60:	add	x0, sp, #0x38
  40fc64:	mov	w1, #0x800                 	// #2048
  40fc68:	movk	w1, #0x8, lsl #16
  40fc6c:	bl	404a00 <pipe2@plt>
  40fc70:	cmp	w0, #0x0
  40fc74:	cset	w8, ge  // ge = tcont
  40fc78:	tbnz	w8, #0, 40fcac <bus_image_common_remove+0x2cc>
  40fc7c:	ldur	x0, [x29, #-48]
  40fc80:	str	x0, [sp, #8]
  40fc84:	bl	404270 <__errno_location@plt>
  40fc88:	ldr	w1, [x0]
  40fc8c:	ldr	x0, [sp, #8]
  40fc90:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40fc94:	add	x2, x2, #0x572
  40fc98:	bl	404320 <sd_bus_error_set_errnof@plt>
  40fc9c:	stur	w0, [x29, #-4]
  40fca0:	mov	w8, #0x1                   	// #1
  40fca4:	str	w8, [sp, #40]
  40fca8:	b	40fdb8 <bus_image_common_remove+0x3d8>
  40fcac:	adrp	x0, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40fcb0:	add	x0, x0, #0x58c
  40fcb4:	mov	w1, #0x1                   	// #1
  40fcb8:	add	x2, sp, #0x34
  40fcbc:	bl	40fdfc <safe_fork>
  40fcc0:	str	w0, [sp, #44]
  40fcc4:	ldr	w8, [sp, #44]
  40fcc8:	cmp	w8, #0x0
  40fccc:	cset	w8, ge  // ge = tcont
  40fcd0:	tbnz	w8, #0, 40fcf8 <bus_image_common_remove+0x318>
  40fcd4:	ldur	x0, [x29, #-48]
  40fcd8:	ldr	w1, [sp, #44]
  40fcdc:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40fce0:	add	x2, x2, #0x597
  40fce4:	bl	404320 <sd_bus_error_set_errnof@plt>
  40fce8:	stur	w0, [x29, #-4]
  40fcec:	mov	w8, #0x1                   	// #1
  40fcf0:	str	w8, [sp, #40]
  40fcf4:	b	40fdb8 <bus_image_common_remove+0x3d8>
  40fcf8:	ldr	w8, [sp, #44]
  40fcfc:	cbnz	w8, 40fd50 <bus_image_common_remove+0x370>
  40fd00:	ldr	w0, [sp, #56]
  40fd04:	bl	404130 <safe_close@plt>
  40fd08:	str	w0, [sp, #56]
  40fd0c:	ldur	x0, [x29, #-40]
  40fd10:	bl	404a10 <image_remove@plt>
  40fd14:	str	w0, [sp, #44]
  40fd18:	ldr	w8, [sp, #44]
  40fd1c:	cmp	w8, #0x0
  40fd20:	cset	w8, ge  // ge = tcont
  40fd24:	tbnz	w8, #0, 40fd44 <bus_image_common_remove+0x364>
  40fd28:	ldr	w0, [sp, #60]
  40fd2c:	add	x1, sp, #0x2c
  40fd30:	mov	x2, #0x4                   	// #4
  40fd34:	bl	404a20 <write@plt>
  40fd38:	mov	w8, #0x1                   	// #1
  40fd3c:	mov	w0, w8
  40fd40:	bl	404290 <_exit@plt>
  40fd44:	mov	w8, wzr
  40fd48:	mov	w0, w8
  40fd4c:	bl	404290 <_exit@plt>
  40fd50:	ldr	w0, [sp, #60]
  40fd54:	bl	404130 <safe_close@plt>
  40fd58:	str	w0, [sp, #60]
  40fd5c:	ldur	x0, [x29, #-16]
  40fd60:	ldr	w1, [sp, #52]
  40fd64:	ldur	x2, [x29, #-24]
  40fd68:	ldr	w3, [sp, #56]
  40fd6c:	mov	x8, xzr
  40fd70:	mov	x4, x8
  40fd74:	bl	411788 <operation_new>
  40fd78:	str	w0, [sp, #44]
  40fd7c:	ldr	w9, [sp, #44]
  40fd80:	cmp	w9, #0x0
  40fd84:	cset	w9, ge  // ge = tcont
  40fd88:	tbnz	w9, #0, 40fda0 <bus_image_common_remove+0x3c0>
  40fd8c:	ldr	w8, [sp, #44]
  40fd90:	stur	w8, [x29, #-4]
  40fd94:	mov	w8, #0x1                   	// #1
  40fd98:	str	w8, [sp, #40]
  40fd9c:	b	40fdb8 <bus_image_common_remove+0x3d8>
  40fda0:	str	wzr, [sp, #52]
  40fda4:	mov	w8, #0xffffffff            	// #-1
  40fda8:	str	w8, [sp, #56]
  40fdac:	mov	w8, #0x1                   	// #1
  40fdb0:	stur	w8, [x29, #-4]
  40fdb4:	str	w8, [sp, #40]
  40fdb8:	add	x0, sp, #0x34
  40fdbc:	bl	4042e0 <sigkill_waitp@plt>
  40fdc0:	add	x0, sp, #0x38
  40fdc4:	bl	40fdd8 <close_pairp>
  40fdc8:	ldur	w0, [x29, #-4]
  40fdcc:	ldp	x29, x30, [sp, #112]
  40fdd0:	add	sp, sp, #0x80
  40fdd4:	ret

000000000040fdd8 <close_pairp>:
  40fdd8:	sub	sp, sp, #0x20
  40fddc:	stp	x29, x30, [sp, #16]
  40fde0:	add	x29, sp, #0x10
  40fde4:	str	x0, [sp, #8]
  40fde8:	ldr	x0, [sp, #8]
  40fdec:	bl	4046c0 <safe_close_pair@plt>
  40fdf0:	ldp	x29, x30, [sp, #16]
  40fdf4:	add	sp, sp, #0x20
  40fdf8:	ret

000000000040fdfc <safe_fork>:
  40fdfc:	sub	sp, sp, #0x30
  40fe00:	stp	x29, x30, [sp, #32]
  40fe04:	add	x29, sp, #0x20
  40fe08:	mov	x8, xzr
  40fe0c:	mov	x3, x8
  40fe10:	stur	x0, [x29, #-8]
  40fe14:	stur	w1, [x29, #-12]
  40fe18:	str	x2, [sp, #8]
  40fe1c:	ldur	x0, [x29, #-8]
  40fe20:	ldur	w9, [x29, #-12]
  40fe24:	ldr	x4, [sp, #8]
  40fe28:	mov	x1, x3
  40fe2c:	mov	x2, x8
  40fe30:	mov	w3, w9
  40fe34:	bl	4046e0 <safe_fork_full@plt>
  40fe38:	ldp	x29, x30, [sp, #32]
  40fe3c:	add	sp, sp, #0x30
  40fe40:	ret

000000000040fe44 <bus_image_common_mark_read_only>:
  40fe44:	sub	sp, sp, #0x60
  40fe48:	stp	x29, x30, [sp, #80]
  40fe4c:	add	x29, sp, #0x50
  40fe50:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40fe54:	add	x8, x8, #0x2db
  40fe58:	add	x8, x8, #0x3
  40fe5c:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40fe60:	add	x9, x9, #0x5ac
  40fe64:	stur	x0, [x29, #-16]
  40fe68:	stur	x1, [x29, #-24]
  40fe6c:	stur	x2, [x29, #-32]
  40fe70:	str	x3, [sp, #40]
  40fe74:	str	x4, [sp, #32]
  40fe78:	str	x8, [sp, #16]
  40fe7c:	str	x9, [sp, #8]
  40fe80:	ldur	x8, [x29, #-24]
  40fe84:	cmp	x8, #0x0
  40fe88:	cset	w9, ne  // ne = any
  40fe8c:	mov	w10, #0x1                   	// #1
  40fe90:	eor	w9, w9, #0x1
  40fe94:	eor	w9, w9, w10
  40fe98:	eor	w9, w9, w10
  40fe9c:	and	w9, w9, #0x1
  40fea0:	mov	w0, w9
  40fea4:	sxtw	x8, w0
  40fea8:	cbz	x8, 40fecc <bus_image_common_mark_read_only+0x88>
  40feac:	mov	w8, wzr
  40feb0:	mov	w0, w8
  40feb4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  40feb8:	add	x1, x1, #0xfb4
  40febc:	ldr	x2, [sp, #16]
  40fec0:	mov	w3, #0x1b2                 	// #434
  40fec4:	ldr	x4, [sp, #8]
  40fec8:	bl	404150 <log_assert_failed_realm@plt>
  40fecc:	ldur	x8, [x29, #-32]
  40fed0:	mov	w9, #0x1                   	// #1
  40fed4:	str	w9, [sp, #4]
  40fed8:	cbnz	x8, 40feec <bus_image_common_mark_read_only+0xa8>
  40fedc:	ldr	x8, [sp, #40]
  40fee0:	cmp	x8, #0x0
  40fee4:	cset	w9, ne  // ne = any
  40fee8:	str	w9, [sp, #4]
  40feec:	ldr	w8, [sp, #4]
  40fef0:	mov	w9, #0x1                   	// #1
  40fef4:	eor	w8, w8, #0x1
  40fef8:	eor	w8, w8, w9
  40fefc:	eor	w8, w8, w9
  40ff00:	and	w8, w8, #0x1
  40ff04:	mov	w0, w8
  40ff08:	sxtw	x10, w0
  40ff0c:	cbz	x10, 40ff30 <bus_image_common_mark_read_only+0xec>
  40ff10:	mov	w8, wzr
  40ff14:	mov	w0, w8
  40ff18:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ff1c:	add	x1, x1, #0x2c5
  40ff20:	ldr	x2, [sp, #16]
  40ff24:	mov	w3, #0x1b3                 	// #435
  40ff28:	ldr	x4, [sp, #8]
  40ff2c:	bl	404150 <log_assert_failed_realm@plt>
  40ff30:	ldur	x8, [x29, #-16]
  40ff34:	cbnz	x8, 40ff90 <bus_image_common_mark_read_only+0x14c>
  40ff38:	ldr	x8, [sp, #40]
  40ff3c:	cmp	x8, #0x0
  40ff40:	cset	w9, ne  // ne = any
  40ff44:	mov	w10, #0x1                   	// #1
  40ff48:	eor	w9, w9, #0x1
  40ff4c:	eor	w9, w9, w10
  40ff50:	eor	w9, w9, w10
  40ff54:	and	w9, w9, #0x1
  40ff58:	mov	w0, w9
  40ff5c:	sxtw	x8, w0
  40ff60:	cbz	x8, 40ff84 <bus_image_common_mark_read_only+0x140>
  40ff64:	mov	w8, wzr
  40ff68:	mov	w0, w8
  40ff6c:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ff70:	add	x1, x1, #0x369
  40ff74:	ldr	x2, [sp, #16]
  40ff78:	mov	w3, #0x1b6                 	// #438
  40ff7c:	ldr	x4, [sp, #8]
  40ff80:	bl	404150 <log_assert_failed_realm@plt>
  40ff84:	ldr	x8, [sp, #40]
  40ff88:	ldr	x8, [x8, #128]
  40ff8c:	stur	x8, [x29, #-16]
  40ff90:	ldur	x0, [x29, #-24]
  40ff94:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ff98:	add	x1, x1, #0x614
  40ff9c:	add	x2, sp, #0x18
  40ffa0:	bl	4048a0 <sd_bus_message_read@plt>
  40ffa4:	str	w0, [sp, #28]
  40ffa8:	ldr	w8, [sp, #28]
  40ffac:	cmp	w8, #0x0
  40ffb0:	cset	w8, ge  // ge = tcont
  40ffb4:	tbnz	w8, #0, 40ffc4 <bus_image_common_mark_read_only+0x180>
  40ffb8:	ldr	w8, [sp, #28]
  40ffbc:	stur	w8, [x29, #-4]
  40ffc0:	b	41006c <bus_image_common_mark_read_only+0x228>
  40ffc4:	ldur	x0, [x29, #-16]
  40ffc8:	ldur	x1, [x29, #-24]
  40ffcc:	ldur	x2, [x29, #-32]
  40ffd0:	add	x6, sp, #0x28
  40ffd4:	ldr	x3, [sp, #40]
  40ffd8:	ldr	x7, [sp, #32]
  40ffdc:	mov	w4, #0x2                   	// #2
  40ffe0:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  40ffe4:	add	x5, x5, #0x232
  40ffe8:	bl	40e83c <bus_image_acquire>
  40ffec:	str	w0, [sp, #28]
  40fff0:	ldr	w8, [sp, #28]
  40fff4:	cmp	w8, #0x0
  40fff8:	cset	w8, ge  // ge = tcont
  40fffc:	tbnz	w8, #0, 41000c <bus_image_common_mark_read_only+0x1c8>
  410000:	ldr	w8, [sp, #28]
  410004:	stur	w8, [x29, #-4]
  410008:	b	41006c <bus_image_common_mark_read_only+0x228>
  41000c:	ldr	w8, [sp, #28]
  410010:	cbnz	w8, 410020 <bus_image_common_mark_read_only+0x1dc>
  410014:	mov	w8, #0x1                   	// #1
  410018:	stur	w8, [x29, #-4]
  41001c:	b	41006c <bus_image_common_mark_read_only+0x228>
  410020:	ldr	x0, [sp, #40]
  410024:	ldr	w8, [sp, #24]
  410028:	cmp	w8, #0x0
  41002c:	cset	w8, ne  // ne = any
  410030:	and	w1, w8, #0x1
  410034:	bl	404a30 <image_read_only@plt>
  410038:	str	w0, [sp, #28]
  41003c:	ldr	w8, [sp, #28]
  410040:	cmp	w8, #0x0
  410044:	cset	w8, ge  // ge = tcont
  410048:	tbnz	w8, #0, 410058 <bus_image_common_mark_read_only+0x214>
  41004c:	ldr	w8, [sp, #28]
  410050:	stur	w8, [x29, #-4]
  410054:	b	41006c <bus_image_common_mark_read_only+0x228>
  410058:	ldur	x0, [x29, #-24]
  41005c:	mov	x8, xzr
  410060:	mov	x1, x8
  410064:	bl	4048b0 <sd_bus_reply_method_return@plt>
  410068:	stur	w0, [x29, #-4]
  41006c:	ldur	w0, [x29, #-4]
  410070:	ldp	x29, x30, [sp, #80]
  410074:	add	sp, sp, #0x60
  410078:	ret

000000000041007c <bus_image_common_set_limit>:
  41007c:	sub	sp, sp, #0x70
  410080:	stp	x29, x30, [sp, #96]
  410084:	add	x29, sp, #0x60
  410088:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  41008c:	add	x8, x8, #0x2db
  410090:	add	x8, x8, #0x3
  410094:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410098:	add	x9, x9, #0x616
  41009c:	stur	x0, [x29, #-16]
  4100a0:	stur	x1, [x29, #-24]
  4100a4:	stur	x2, [x29, #-32]
  4100a8:	stur	x3, [x29, #-40]
  4100ac:	str	x4, [sp, #48]
  4100b0:	str	x8, [sp, #24]
  4100b4:	str	x9, [sp, #16]
  4100b8:	ldur	x8, [x29, #-24]
  4100bc:	cmp	x8, #0x0
  4100c0:	cset	w9, ne  // ne = any
  4100c4:	mov	w10, #0x1                   	// #1
  4100c8:	eor	w9, w9, #0x1
  4100cc:	eor	w9, w9, w10
  4100d0:	eor	w9, w9, w10
  4100d4:	and	w9, w9, #0x1
  4100d8:	mov	w0, w9
  4100dc:	sxtw	x8, w0
  4100e0:	cbz	x8, 410104 <bus_image_common_set_limit+0x88>
  4100e4:	mov	w8, wzr
  4100e8:	mov	w0, w8
  4100ec:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4100f0:	add	x1, x1, #0xfb4
  4100f4:	ldr	x2, [sp, #24]
  4100f8:	mov	w3, #0x1e0                 	// #480
  4100fc:	ldr	x4, [sp, #16]
  410100:	bl	404150 <log_assert_failed_realm@plt>
  410104:	ldur	x8, [x29, #-32]
  410108:	mov	w9, #0x1                   	// #1
  41010c:	str	w9, [sp, #12]
  410110:	cbnz	x8, 410124 <bus_image_common_set_limit+0xa8>
  410114:	ldur	x8, [x29, #-40]
  410118:	cmp	x8, #0x0
  41011c:	cset	w9, ne  // ne = any
  410120:	str	w9, [sp, #12]
  410124:	ldr	w8, [sp, #12]
  410128:	mov	w9, #0x1                   	// #1
  41012c:	eor	w8, w8, #0x1
  410130:	eor	w8, w8, w9
  410134:	eor	w8, w8, w9
  410138:	and	w8, w8, #0x1
  41013c:	mov	w0, w8
  410140:	sxtw	x10, w0
  410144:	cbz	x10, 410168 <bus_image_common_set_limit+0xec>
  410148:	mov	w8, wzr
  41014c:	mov	w0, w8
  410150:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410154:	add	x1, x1, #0x2c5
  410158:	ldr	x2, [sp, #24]
  41015c:	mov	w3, #0x1e1                 	// #481
  410160:	ldr	x4, [sp, #16]
  410164:	bl	404150 <log_assert_failed_realm@plt>
  410168:	ldur	x8, [x29, #-16]
  41016c:	cbnz	x8, 4101c8 <bus_image_common_set_limit+0x14c>
  410170:	ldur	x8, [x29, #-40]
  410174:	cmp	x8, #0x0
  410178:	cset	w9, ne  // ne = any
  41017c:	mov	w10, #0x1                   	// #1
  410180:	eor	w9, w9, #0x1
  410184:	eor	w9, w9, w10
  410188:	eor	w9, w9, w10
  41018c:	and	w9, w9, #0x1
  410190:	mov	w0, w9
  410194:	sxtw	x8, w0
  410198:	cbz	x8, 4101bc <bus_image_common_set_limit+0x140>
  41019c:	mov	w8, wzr
  4101a0:	mov	w0, w8
  4101a4:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4101a8:	add	x1, x1, #0x369
  4101ac:	ldr	x2, [sp, #24]
  4101b0:	mov	w3, #0x1e4                 	// #484
  4101b4:	ldr	x4, [sp, #16]
  4101b8:	bl	404150 <log_assert_failed_realm@plt>
  4101bc:	ldur	x8, [x29, #-40]
  4101c0:	ldr	x8, [x8, #128]
  4101c4:	stur	x8, [x29, #-16]
  4101c8:	ldur	x0, [x29, #-24]
  4101cc:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4101d0:	add	x1, x1, #0xc5a
  4101d4:	add	x2, sp, #0x28
  4101d8:	bl	4048a0 <sd_bus_message_read@plt>
  4101dc:	str	w0, [sp, #36]
  4101e0:	ldr	w8, [sp, #36]
  4101e4:	cmp	w8, #0x0
  4101e8:	cset	w8, ge  // ge = tcont
  4101ec:	tbnz	w8, #0, 4101fc <bus_image_common_set_limit+0x180>
  4101f0:	ldr	w8, [sp, #36]
  4101f4:	stur	w8, [x29, #-4]
  4101f8:	b	4102c4 <bus_image_common_set_limit+0x248>
  4101fc:	ldr	x0, [sp, #40]
  410200:	bl	4102d4 <FILE_SIZE_VALID_OR_INFINITY>
  410204:	tbnz	w0, #0, 410228 <bus_image_common_set_limit+0x1ac>
  410208:	ldr	x0, [sp, #48]
  41020c:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  410210:	add	x1, x1, #0xc4c
  410214:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410218:	add	x2, x2, #0x21b
  41021c:	bl	404250 <sd_bus_error_setf@plt>
  410220:	stur	w0, [x29, #-4]
  410224:	b	4102c4 <bus_image_common_set_limit+0x248>
  410228:	ldur	x0, [x29, #-16]
  41022c:	ldur	x1, [x29, #-24]
  410230:	ldur	x2, [x29, #-32]
  410234:	sub	x6, x29, #0x28
  410238:	ldur	x3, [x29, #-40]
  41023c:	ldr	x7, [sp, #48]
  410240:	mov	w4, #0x2                   	// #2
  410244:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410248:	add	x5, x5, #0x232
  41024c:	bl	40e83c <bus_image_acquire>
  410250:	str	w0, [sp, #36]
  410254:	ldr	w8, [sp, #36]
  410258:	cmp	w8, #0x0
  41025c:	cset	w8, ge  // ge = tcont
  410260:	tbnz	w8, #0, 410270 <bus_image_common_set_limit+0x1f4>
  410264:	ldr	w8, [sp, #36]
  410268:	stur	w8, [x29, #-4]
  41026c:	b	4102c4 <bus_image_common_set_limit+0x248>
  410270:	ldr	w8, [sp, #36]
  410274:	cbnz	w8, 410284 <bus_image_common_set_limit+0x208>
  410278:	mov	w8, #0x1                   	// #1
  41027c:	stur	w8, [x29, #-4]
  410280:	b	4102c4 <bus_image_common_set_limit+0x248>
  410284:	ldur	x0, [x29, #-40]
  410288:	ldr	x1, [sp, #40]
  41028c:	bl	404a40 <image_set_limit@plt>
  410290:	str	w0, [sp, #36]
  410294:	ldr	w8, [sp, #36]
  410298:	cmp	w8, #0x0
  41029c:	cset	w8, ge  // ge = tcont
  4102a0:	tbnz	w8, #0, 4102b0 <bus_image_common_set_limit+0x234>
  4102a4:	ldr	w8, [sp, #36]
  4102a8:	stur	w8, [x29, #-4]
  4102ac:	b	4102c4 <bus_image_common_set_limit+0x248>
  4102b0:	ldur	x0, [x29, #-24]
  4102b4:	mov	x8, xzr
  4102b8:	mov	x1, x8
  4102bc:	bl	4048b0 <sd_bus_reply_method_return@plt>
  4102c0:	stur	w0, [x29, #-4]
  4102c4:	ldur	w0, [x29, #-4]
  4102c8:	ldp	x29, x30, [sp, #96]
  4102cc:	add	sp, sp, #0x70
  4102d0:	ret

00000000004102d4 <FILE_SIZE_VALID_OR_INFINITY>:
  4102d4:	sub	sp, sp, #0x20
  4102d8:	stp	x29, x30, [sp, #16]
  4102dc:	add	x29, sp, #0x10
  4102e0:	mov	x8, #0xffffffffffffffff    	// #-1
  4102e4:	str	x0, [sp]
  4102e8:	ldr	x9, [sp]
  4102ec:	cmp	x9, x8
  4102f0:	b.ne	410304 <FILE_SIZE_VALID_OR_INFINITY+0x30>  // b.any
  4102f4:	mov	w8, #0x1                   	// #1
  4102f8:	and	w8, w8, #0x1
  4102fc:	sturb	w8, [x29, #-1]
  410300:	b	410314 <FILE_SIZE_VALID_OR_INFINITY+0x40>
  410304:	ldr	x0, [sp]
  410308:	bl	41118c <FILE_SIZE_VALID>
  41030c:	and	w8, w0, #0x1
  410310:	sturb	w8, [x29, #-1]
  410314:	ldurb	w8, [x29, #-1]
  410318:	and	w0, w8, #0x1
  41031c:	ldp	x29, x30, [sp, #16]
  410320:	add	sp, sp, #0x20
  410324:	ret

0000000000410328 <property_get_type>:
  410328:	sub	sp, sp, #0x70
  41032c:	stp	x29, x30, [sp, #96]
  410330:	add	x29, sp, #0x60
  410334:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410338:	add	x8, x8, #0x2db
  41033c:	add	x8, x8, #0x3
  410340:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410344:	add	x9, x9, #0xaea
  410348:	stur	x0, [x29, #-8]
  41034c:	stur	x1, [x29, #-16]
  410350:	stur	x2, [x29, #-24]
  410354:	stur	x3, [x29, #-32]
  410358:	stur	x4, [x29, #-40]
  41035c:	str	x5, [sp, #48]
  410360:	str	x6, [sp, #40]
  410364:	ldr	x10, [sp, #48]
  410368:	str	x10, [sp, #32]
  41036c:	str	x8, [sp, #24]
  410370:	str	x9, [sp, #16]
  410374:	ldur	x8, [x29, #-8]
  410378:	cmp	x8, #0x0
  41037c:	cset	w9, ne  // ne = any
  410380:	mov	w10, #0x1                   	// #1
  410384:	eor	w9, w9, #0x1
  410388:	eor	w9, w9, w10
  41038c:	eor	w9, w9, w10
  410390:	and	w9, w9, #0x1
  410394:	mov	w0, w9
  410398:	sxtw	x8, w0
  41039c:	cbz	x8, 4103c0 <property_get_type+0x98>
  4103a0:	mov	w8, wzr
  4103a4:	mov	w0, w8
  4103a8:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4103ac:	add	x1, x1, #0xdb2
  4103b0:	ldr	x2, [sp, #24]
  4103b4:	mov	w3, #0x1a                  	// #26
  4103b8:	ldr	x4, [sp, #16]
  4103bc:	bl	404150 <log_assert_failed_realm@plt>
  4103c0:	ldur	x8, [x29, #-40]
  4103c4:	cmp	x8, #0x0
  4103c8:	cset	w9, ne  // ne = any
  4103cc:	mov	w10, #0x1                   	// #1
  4103d0:	eor	w9, w9, #0x1
  4103d4:	eor	w9, w9, w10
  4103d8:	eor	w9, w9, w10
  4103dc:	and	w9, w9, #0x1
  4103e0:	mov	w0, w9
  4103e4:	sxtw	x8, w0
  4103e8:	cbz	x8, 41040c <property_get_type+0xe4>
  4103ec:	mov	w8, wzr
  4103f0:	mov	w0, w8
  4103f4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4103f8:	add	x1, x1, #0xe2f
  4103fc:	ldr	x2, [sp, #24]
  410400:	mov	w3, #0x1a                  	// #26
  410404:	ldr	x4, [sp, #16]
  410408:	bl	404150 <log_assert_failed_realm@plt>
  41040c:	ldr	x8, [sp, #32]
  410410:	cmp	x8, #0x0
  410414:	cset	w9, ne  // ne = any
  410418:	mov	w10, #0x1                   	// #1
  41041c:	eor	w9, w9, #0x1
  410420:	eor	w9, w9, w10
  410424:	eor	w9, w9, w10
  410428:	and	w9, w9, #0x1
  41042c:	mov	w0, w9
  410430:	sxtw	x8, w0
  410434:	cbz	x8, 410458 <property_get_type+0x130>
  410438:	mov	w8, wzr
  41043c:	mov	w0, w8
  410440:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410444:	add	x1, x1, #0xb5e
  410448:	ldr	x2, [sp, #24]
  41044c:	mov	w3, #0x1a                  	// #26
  410450:	ldr	x4, [sp, #16]
  410454:	bl	404150 <log_assert_failed_realm@plt>
  410458:	ldur	x0, [x29, #-40]
  41045c:	ldr	x8, [sp, #32]
  410460:	ldr	w9, [x8]
  410464:	str	x0, [sp, #8]
  410468:	mov	w0, w9
  41046c:	bl	4048f0 <image_type_to_string@plt>
  410470:	ldr	x8, [sp, #8]
  410474:	str	x0, [sp]
  410478:	mov	x0, x8
  41047c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  410480:	add	x1, x1, #0xc4e
  410484:	ldr	x2, [sp]
  410488:	bl	404870 <sd_bus_message_append@plt>
  41048c:	ldp	x29, x30, [sp, #96]
  410490:	add	sp, sp, #0x70
  410494:	ret

0000000000410498 <bus_image_method_get_os_release>:
  410498:	sub	sp, sp, #0x30
  41049c:	stp	x29, x30, [sp, #32]
  4104a0:	add	x29, sp, #0x20
  4104a4:	mov	x8, xzr
  4104a8:	mov	x3, x8
  4104ac:	stur	x0, [x29, #-8]
  4104b0:	str	x1, [sp, #16]
  4104b4:	str	x2, [sp, #8]
  4104b8:	ldur	x1, [x29, #-8]
  4104bc:	ldr	x9, [sp, #16]
  4104c0:	ldr	x4, [sp, #8]
  4104c4:	mov	x0, x3
  4104c8:	mov	x2, x8
  4104cc:	mov	x3, x9
  4104d0:	bl	40e628 <bus_image_common_get_os_release>
  4104d4:	ldp	x29, x30, [sp, #32]
  4104d8:	add	sp, sp, #0x30
  4104dc:	ret

00000000004104e0 <bus_image_method_get_metadata>:
  4104e0:	sub	sp, sp, #0x30
  4104e4:	stp	x29, x30, [sp, #32]
  4104e8:	add	x29, sp, #0x20
  4104ec:	mov	x8, xzr
  4104f0:	mov	x3, x8
  4104f4:	stur	x0, [x29, #-8]
  4104f8:	str	x1, [sp, #16]
  4104fc:	str	x2, [sp, #8]
  410500:	ldur	x1, [x29, #-8]
  410504:	ldr	x9, [sp, #16]
  410508:	ldr	x4, [sp, #8]
  41050c:	mov	x0, x3
  410510:	mov	x2, x8
  410514:	mov	x3, x9
  410518:	bl	40ee18 <bus_image_common_get_metadata>
  41051c:	ldp	x29, x30, [sp, #32]
  410520:	add	sp, sp, #0x30
  410524:	ret

0000000000410528 <bus_image_method_get_state>:
  410528:	sub	sp, sp, #0x60
  41052c:	stp	x29, x30, [sp, #80]
  410530:	add	x29, sp, #0x50
  410534:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410538:	add	x8, x8, #0x2db
  41053c:	add	x8, x8, #0x3
  410540:	stur	x0, [x29, #-16]
  410544:	stur	x1, [x29, #-24]
  410548:	stur	x2, [x29, #-32]
  41054c:	ldur	x9, [x29, #-24]
  410550:	str	x9, [sp, #40]
  410554:	str	x8, [sp, #24]
  410558:	ldur	x8, [x29, #-16]
  41055c:	cmp	x8, #0x0
  410560:	cset	w9, ne  // ne = any
  410564:	mov	w10, #0x1                   	// #1
  410568:	eor	w9, w9, #0x1
  41056c:	eor	w9, w9, w10
  410570:	eor	w9, w9, w10
  410574:	and	w9, w9, #0x1
  410578:	mov	w0, w9
  41057c:	sxtw	x8, w0
  410580:	cbz	x8, 4105a8 <bus_image_method_get_state+0x80>
  410584:	mov	w8, wzr
  410588:	mov	w0, w8
  41058c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  410590:	add	x1, x1, #0xfb4
  410594:	ldr	x2, [sp, #24]
  410598:	mov	w3, #0xca                  	// #202
  41059c:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4105a0:	add	x4, x4, #0xb63
  4105a4:	bl	404150 <log_assert_failed_realm@plt>
  4105a8:	ldr	x8, [sp, #40]
  4105ac:	cmp	x8, #0x0
  4105b0:	cset	w9, ne  // ne = any
  4105b4:	mov	w10, #0x1                   	// #1
  4105b8:	eor	w9, w9, #0x1
  4105bc:	eor	w9, w9, w10
  4105c0:	eor	w9, w9, w10
  4105c4:	and	w9, w9, #0x1
  4105c8:	mov	w0, w9
  4105cc:	sxtw	x8, w0
  4105d0:	cbz	x8, 4105f8 <bus_image_method_get_state+0xd0>
  4105d4:	mov	w8, wzr
  4105d8:	mov	w0, w8
  4105dc:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4105e0:	add	x1, x1, #0x369
  4105e4:	ldr	x2, [sp, #24]
  4105e8:	mov	w3, #0xcb                  	// #203
  4105ec:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4105f0:	add	x4, x4, #0xb63
  4105f4:	bl	404150 <log_assert_failed_realm@plt>
  4105f8:	ldur	x0, [x29, #-16]
  4105fc:	bl	4048e0 <sd_bus_message_get_bus@plt>
  410600:	ldr	x8, [sp, #40]
  410604:	ldr	x1, [x8, #16]
  410608:	ldur	x4, [x29, #-32]
  41060c:	mov	w9, wzr
  410610:	mov	w2, w9
  410614:	add	x3, sp, #0x24
  410618:	bl	409c4c <portable_get_state>
  41061c:	str	w0, [sp, #32]
  410620:	ldr	w9, [sp, #32]
  410624:	cmp	w9, #0x0
  410628:	cset	w9, ge  // ge = tcont
  41062c:	tbnz	w9, #0, 41063c <bus_image_method_get_state+0x114>
  410630:	ldr	w8, [sp, #32]
  410634:	stur	w8, [x29, #-4]
  410638:	b	410670 <bus_image_method_get_state+0x148>
  41063c:	ldur	x0, [x29, #-16]
  410640:	ldr	w8, [sp, #36]
  410644:	str	x0, [sp, #16]
  410648:	mov	w0, w8
  41064c:	bl	40a690 <portable_state_to_string>
  410650:	ldr	x9, [sp, #16]
  410654:	str	x0, [sp, #8]
  410658:	mov	x0, x9
  41065c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  410660:	add	x1, x1, #0xc4e
  410664:	ldr	x2, [sp, #8]
  410668:	bl	4048b0 <sd_bus_reply_method_return@plt>
  41066c:	stur	w0, [x29, #-4]
  410670:	ldur	w0, [x29, #-4]
  410674:	ldp	x29, x30, [sp, #80]
  410678:	add	sp, sp, #0x60
  41067c:	ret

0000000000410680 <bus_image_method_attach>:
  410680:	sub	sp, sp, #0x30
  410684:	stp	x29, x30, [sp, #32]
  410688:	add	x29, sp, #0x20
  41068c:	mov	x8, xzr
  410690:	mov	x3, x8
  410694:	stur	x0, [x29, #-8]
  410698:	str	x1, [sp, #16]
  41069c:	str	x2, [sp, #8]
  4106a0:	ldur	x1, [x29, #-8]
  4106a4:	ldr	x9, [sp, #16]
  4106a8:	ldr	x4, [sp, #8]
  4106ac:	mov	x0, x3
  4106b0:	mov	x2, x8
  4106b4:	mov	x3, x9
  4106b8:	bl	40f640 <bus_image_common_attach>
  4106bc:	ldp	x29, x30, [sp, #32]
  4106c0:	add	sp, sp, #0x30
  4106c4:	ret

00000000004106c8 <bus_image_method_detach>:
  4106c8:	sub	sp, sp, #0x70
  4106cc:	stp	x29, x30, [sp, #96]
  4106d0:	add	x29, sp, #0x60
  4106d4:	mov	x8, xzr
  4106d8:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4106dc:	add	x9, x9, #0x2db
  4106e0:	add	x9, x9, #0x3
  4106e4:	adrp	x10, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4106e8:	add	x10, x10, #0xbac
  4106ec:	stur	x0, [x29, #-16]
  4106f0:	stur	x1, [x29, #-24]
  4106f4:	stur	x2, [x29, #-32]
  4106f8:	stur	x8, [x29, #-40]
  4106fc:	ldur	x8, [x29, #-24]
  410700:	str	x8, [sp, #48]
  410704:	ldr	x8, [sp, #48]
  410708:	ldr	x8, [x8, #128]
  41070c:	str	x8, [sp, #40]
  410710:	str	xzr, [sp, #32]
  410714:	str	x9, [sp, #16]
  410718:	str	x10, [sp, #8]
  41071c:	ldur	x8, [x29, #-16]
  410720:	cmp	x8, #0x0
  410724:	cset	w9, ne  // ne = any
  410728:	mov	w10, #0x1                   	// #1
  41072c:	eor	w9, w9, #0x1
  410730:	eor	w9, w9, w10
  410734:	eor	w9, w9, w10
  410738:	and	w9, w9, #0x1
  41073c:	mov	w0, w9
  410740:	sxtw	x8, w0
  410744:	cbz	x8, 410768 <bus_image_method_detach+0xa0>
  410748:	mov	w8, wzr
  41074c:	mov	w0, w8
  410750:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  410754:	add	x1, x1, #0xfb4
  410758:	ldr	x2, [sp, #16]
  41075c:	mov	w3, #0x130                 	// #304
  410760:	ldr	x4, [sp, #8]
  410764:	bl	404150 <log_assert_failed_realm@plt>
  410768:	ldr	x8, [sp, #48]
  41076c:	cmp	x8, #0x0
  410770:	cset	w9, ne  // ne = any
  410774:	mov	w10, #0x1                   	// #1
  410778:	eor	w9, w9, #0x1
  41077c:	eor	w9, w9, w10
  410780:	eor	w9, w9, w10
  410784:	and	w9, w9, #0x1
  410788:	mov	w0, w9
  41078c:	sxtw	x8, w0
  410790:	cbz	x8, 4107b4 <bus_image_method_detach+0xec>
  410794:	mov	w8, wzr
  410798:	mov	w0, w8
  41079c:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4107a0:	add	x1, x1, #0x369
  4107a4:	ldr	x2, [sp, #16]
  4107a8:	mov	w3, #0x131                 	// #305
  4107ac:	ldr	x4, [sp, #8]
  4107b0:	bl	404150 <log_assert_failed_realm@plt>
  4107b4:	ldr	x8, [sp, #40]
  4107b8:	cmp	x8, #0x0
  4107bc:	cset	w9, ne  // ne = any
  4107c0:	mov	w10, #0x1                   	// #1
  4107c4:	eor	w9, w9, #0x1
  4107c8:	eor	w9, w9, w10
  4107cc:	eor	w9, w9, w10
  4107d0:	and	w9, w9, #0x1
  4107d4:	mov	w0, w9
  4107d8:	sxtw	x8, w0
  4107dc:	cbz	x8, 410800 <bus_image_method_detach+0x138>
  4107e0:	mov	w8, wzr
  4107e4:	mov	w0, w8
  4107e8:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4107ec:	add	x1, x1, #0x420
  4107f0:	ldr	x2, [sp, #16]
  4107f4:	mov	w3, #0x132                 	// #306
  4107f8:	ldr	x4, [sp, #8]
  4107fc:	bl	404150 <log_assert_failed_realm@plt>
  410800:	ldur	x0, [x29, #-16]
  410804:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410808:	add	x1, x1, #0x614
  41080c:	add	x2, sp, #0x18
  410810:	bl	4048a0 <sd_bus_message_read@plt>
  410814:	str	w0, [sp, #28]
  410818:	ldr	w8, [sp, #28]
  41081c:	cmp	w8, #0x0
  410820:	cset	w8, ge  // ge = tcont
  410824:	tbnz	w8, #0, 410834 <bus_image_method_detach+0x16c>
  410828:	ldr	w8, [sp, #28]
  41082c:	stur	w8, [x29, #-4]
  410830:	b	410910 <bus_image_method_detach+0x248>
  410834:	ldur	x0, [x29, #-16]
  410838:	ldr	x8, [sp, #40]
  41083c:	add	x6, x8, #0x10
  410840:	ldur	x7, [x29, #-32]
  410844:	mov	w1, #0x15                  	// #21
  410848:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  41084c:	add	x2, x2, #0x1af
  410850:	mov	x8, xzr
  410854:	mov	x3, x8
  410858:	mov	w9, wzr
  41085c:	and	w4, w9, #0x1
  410860:	mov	w5, #0xffffffff            	// #-1
  410864:	bl	404930 <bus_verify_polkit_async@plt>
  410868:	str	w0, [sp, #28]
  41086c:	ldr	w9, [sp, #28]
  410870:	cmp	w9, #0x0
  410874:	cset	w9, ge  // ge = tcont
  410878:	tbnz	w9, #0, 410888 <bus_image_method_detach+0x1c0>
  41087c:	ldr	w8, [sp, #28]
  410880:	stur	w8, [x29, #-4]
  410884:	b	410910 <bus_image_method_detach+0x248>
  410888:	ldr	w8, [sp, #28]
  41088c:	cbnz	w8, 41089c <bus_image_method_detach+0x1d4>
  410890:	mov	w8, #0x1                   	// #1
  410894:	stur	w8, [x29, #-4]
  410898:	b	410910 <bus_image_method_detach+0x248>
  41089c:	ldur	x0, [x29, #-16]
  4108a0:	bl	4048e0 <sd_bus_message_get_bus@plt>
  4108a4:	ldr	x8, [sp, #48]
  4108a8:	ldr	x1, [x8, #16]
  4108ac:	ldr	w9, [sp, #24]
  4108b0:	mov	w10, wzr
  4108b4:	mov	w11, #0x4                   	// #4
  4108b8:	cmp	w9, #0x0
  4108bc:	csel	w2, w11, w10, ne  // ne = any
  4108c0:	ldur	x5, [x29, #-32]
  4108c4:	sub	x3, x29, #0x28
  4108c8:	add	x4, sp, #0x20
  4108cc:	bl	4079e0 <portable_detach>
  4108d0:	str	w0, [sp, #28]
  4108d4:	ldr	w9, [sp, #28]
  4108d8:	cmp	w9, #0x0
  4108dc:	cset	w9, ge  // ge = tcont
  4108e0:	tbnz	w9, #0, 4108e8 <bus_image_method_detach+0x220>
  4108e4:	b	4108fc <bus_image_method_detach+0x234>
  4108e8:	ldur	x0, [x29, #-16]
  4108ec:	ldur	x1, [x29, #-40]
  4108f0:	ldr	x2, [sp, #32]
  4108f4:	bl	40e054 <reply_portable_changes>
  4108f8:	str	w0, [sp, #28]
  4108fc:	ldur	x0, [x29, #-40]
  410900:	ldr	x1, [sp, #32]
  410904:	bl	405fbc <portable_changes_free>
  410908:	ldr	w8, [sp, #28]
  41090c:	stur	w8, [x29, #-4]
  410910:	ldur	w0, [x29, #-4]
  410914:	ldp	x29, x30, [sp, #96]
  410918:	add	sp, sp, #0x70
  41091c:	ret

0000000000410920 <bus_image_method_remove>:
  410920:	sub	sp, sp, #0x30
  410924:	stp	x29, x30, [sp, #32]
  410928:	add	x29, sp, #0x20
  41092c:	mov	x8, xzr
  410930:	mov	x3, x8
  410934:	stur	x0, [x29, #-8]
  410938:	str	x1, [sp, #16]
  41093c:	str	x2, [sp, #8]
  410940:	ldur	x1, [x29, #-8]
  410944:	ldr	x9, [sp, #16]
  410948:	ldr	x4, [sp, #8]
  41094c:	mov	x0, x3
  410950:	mov	x2, x8
  410954:	mov	x3, x9
  410958:	bl	40f9e0 <bus_image_common_remove>
  41095c:	ldp	x29, x30, [sp, #32]
  410960:	add	sp, sp, #0x30
  410964:	ret

0000000000410968 <bus_image_method_mark_read_only>:
  410968:	sub	sp, sp, #0x30
  41096c:	stp	x29, x30, [sp, #32]
  410970:	add	x29, sp, #0x20
  410974:	mov	x8, xzr
  410978:	mov	x3, x8
  41097c:	stur	x0, [x29, #-8]
  410980:	str	x1, [sp, #16]
  410984:	str	x2, [sp, #8]
  410988:	ldur	x1, [x29, #-8]
  41098c:	ldr	x9, [sp, #16]
  410990:	ldr	x4, [sp, #8]
  410994:	mov	x0, x3
  410998:	mov	x2, x8
  41099c:	mov	x3, x9
  4109a0:	bl	40fe44 <bus_image_common_mark_read_only>
  4109a4:	ldp	x29, x30, [sp, #32]
  4109a8:	add	sp, sp, #0x30
  4109ac:	ret

00000000004109b0 <bus_image_method_set_limit>:
  4109b0:	sub	sp, sp, #0x30
  4109b4:	stp	x29, x30, [sp, #32]
  4109b8:	add	x29, sp, #0x20
  4109bc:	mov	x8, xzr
  4109c0:	mov	x3, x8
  4109c4:	stur	x0, [x29, #-8]
  4109c8:	str	x1, [sp, #16]
  4109cc:	str	x2, [sp, #8]
  4109d0:	ldur	x1, [x29, #-8]
  4109d4:	ldr	x9, [sp, #16]
  4109d8:	ldr	x4, [sp, #8]
  4109dc:	mov	x0, x3
  4109e0:	mov	x2, x8
  4109e4:	mov	x3, x9
  4109e8:	bl	41007c <bus_image_common_set_limit>
  4109ec:	ldp	x29, x30, [sp, #32]
  4109f0:	add	sp, sp, #0x30
  4109f4:	ret

00000000004109f8 <bus_image_path>:
  4109f8:	sub	sp, sp, #0x30
  4109fc:	stp	x29, x30, [sp, #32]
  410a00:	add	x29, sp, #0x20
  410a04:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410a08:	add	x8, x8, #0x2db
  410a0c:	add	x8, x8, #0x3
  410a10:	str	x0, [sp, #16]
  410a14:	str	x1, [sp, #8]
  410a18:	str	x8, [sp]
  410a1c:	ldr	x8, [sp, #16]
  410a20:	cmp	x8, #0x0
  410a24:	cset	w9, ne  // ne = any
  410a28:	mov	w10, #0x1                   	// #1
  410a2c:	eor	w9, w9, #0x1
  410a30:	eor	w9, w9, w10
  410a34:	eor	w9, w9, w10
  410a38:	and	w9, w9, #0x1
  410a3c:	mov	w0, w9
  410a40:	sxtw	x8, w0
  410a44:	cbz	x8, 410a6c <bus_image_path+0x74>
  410a48:	mov	w8, wzr
  410a4c:	mov	w0, w8
  410a50:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410a54:	add	x1, x1, #0x369
  410a58:	ldr	x2, [sp]
  410a5c:	mov	w3, #0x21e                 	// #542
  410a60:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410a64:	add	x4, x4, #0x736
  410a68:	bl	404150 <log_assert_failed_realm@plt>
  410a6c:	ldr	x8, [sp, #8]
  410a70:	cmp	x8, #0x0
  410a74:	cset	w9, ne  // ne = any
  410a78:	mov	w10, #0x1                   	// #1
  410a7c:	eor	w9, w9, #0x1
  410a80:	eor	w9, w9, w10
  410a84:	eor	w9, w9, w10
  410a88:	and	w9, w9, #0x1
  410a8c:	mov	w0, w9
  410a90:	sxtw	x8, w0
  410a94:	cbz	x8, 410abc <bus_image_path+0xc4>
  410a98:	mov	w8, wzr
  410a9c:	mov	w0, w8
  410aa0:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  410aa4:	add	x1, x1, #0xabc
  410aa8:	ldr	x2, [sp]
  410aac:	mov	w3, #0x21f                 	// #543
  410ab0:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410ab4:	add	x4, x4, #0x736
  410ab8:	bl	404150 <log_assert_failed_realm@plt>
  410abc:	ldr	x8, [sp, #16]
  410ac0:	ldrb	w9, [x8, #120]
  410ac4:	mov	w10, #0x1                   	// #1
  410ac8:	lsr	w9, w9, w10
  410acc:	and	w9, w9, w10
  410ad0:	tbnz	w9, #0, 410ae0 <bus_image_path+0xe8>
  410ad4:	mov	w8, #0xffffffea            	// #-22
  410ad8:	stur	w8, [x29, #-4]
  410adc:	b	410afc <bus_image_path+0x104>
  410ae0:	ldr	x8, [sp, #16]
  410ae4:	ldr	x1, [x8, #8]
  410ae8:	ldr	x2, [sp, #8]
  410aec:	adrp	x0, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410af0:	add	x0, x0, #0x75b
  410af4:	bl	404a50 <sd_bus_path_encode@plt>
  410af8:	stur	w0, [x29, #-4]
  410afc:	ldur	w0, [x29, #-4]
  410b00:	ldp	x29, x30, [sp, #32]
  410b04:	add	sp, sp, #0x30
  410b08:	ret

0000000000410b0c <image_unrefp>:
  410b0c:	sub	sp, sp, #0x20
  410b10:	stp	x29, x30, [sp, #16]
  410b14:	add	x29, sp, #0x10
  410b18:	str	x0, [sp, #8]
  410b1c:	ldr	x8, [sp, #8]
  410b20:	ldr	x8, [x8]
  410b24:	cbz	x8, 410b34 <image_unrefp+0x28>
  410b28:	ldr	x8, [sp, #8]
  410b2c:	ldr	x0, [x8]
  410b30:	bl	4041c0 <image_unref@plt>
  410b34:	ldp	x29, x30, [sp, #16]
  410b38:	add	sp, sp, #0x20
  410b3c:	ret

0000000000410b40 <bus_image_object_find>:
  410b40:	sub	sp, sp, #0x90
  410b44:	stp	x29, x30, [sp, #128]
  410b48:	add	x29, sp, #0x80
  410b4c:	mov	x8, xzr
  410b50:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410b54:	add	x9, x9, #0x2db
  410b58:	add	x9, x9, #0x3
  410b5c:	adrp	x10, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410b60:	add	x10, x10, #0x9dc
  410b64:	stur	x0, [x29, #-16]
  410b68:	stur	x1, [x29, #-24]
  410b6c:	stur	x2, [x29, #-32]
  410b70:	stur	x3, [x29, #-40]
  410b74:	stur	x4, [x29, #-48]
  410b78:	stur	x5, [x29, #-56]
  410b7c:	str	x8, [sp, #64]
  410b80:	ldur	x11, [x29, #-40]
  410b84:	str	x11, [sp, #56]
  410b88:	str	x8, [sp, #48]
  410b8c:	str	x9, [sp, #32]
  410b90:	str	x10, [sp, #24]
  410b94:	ldur	x8, [x29, #-16]
  410b98:	cmp	x8, #0x0
  410b9c:	cset	w9, ne  // ne = any
  410ba0:	mov	w10, #0x1                   	// #1
  410ba4:	eor	w9, w9, #0x1
  410ba8:	eor	w9, w9, w10
  410bac:	eor	w9, w9, w10
  410bb0:	and	w9, w9, #0x1
  410bb4:	mov	w0, w9
  410bb8:	sxtw	x8, w0
  410bbc:	cbz	x8, 410be0 <bus_image_object_find+0xa0>
  410bc0:	mov	w8, wzr
  410bc4:	mov	w0, w8
  410bc8:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  410bcc:	add	x1, x1, #0xdb2
  410bd0:	ldr	x2, [sp, #32]
  410bd4:	mov	w3, #0x2a4                 	// #676
  410bd8:	ldr	x4, [sp, #24]
  410bdc:	bl	404150 <log_assert_failed_realm@plt>
  410be0:	ldur	x8, [x29, #-24]
  410be4:	cmp	x8, #0x0
  410be8:	cset	w9, ne  // ne = any
  410bec:	mov	w10, #0x1                   	// #1
  410bf0:	eor	w9, w9, #0x1
  410bf4:	eor	w9, w9, w10
  410bf8:	eor	w9, w9, w10
  410bfc:	and	w9, w9, #0x1
  410c00:	mov	w0, w9
  410c04:	sxtw	x8, w0
  410c08:	cbz	x8, 410c2c <bus_image_object_find+0xec>
  410c0c:	mov	w8, wzr
  410c10:	mov	w0, w8
  410c14:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  410c18:	add	x1, x1, #0xb39
  410c1c:	ldr	x2, [sp, #32]
  410c20:	mov	w3, #0x2a5                 	// #677
  410c24:	ldr	x4, [sp, #24]
  410c28:	bl	404150 <log_assert_failed_realm@plt>
  410c2c:	ldur	x8, [x29, #-32]
  410c30:	cmp	x8, #0x0
  410c34:	cset	w9, ne  // ne = any
  410c38:	mov	w10, #0x1                   	// #1
  410c3c:	eor	w9, w9, #0x1
  410c40:	eor	w9, w9, w10
  410c44:	eor	w9, w9, w10
  410c48:	and	w9, w9, #0x1
  410c4c:	mov	w0, w9
  410c50:	sxtw	x8, w0
  410c54:	cbz	x8, 410c78 <bus_image_object_find+0x138>
  410c58:	mov	w8, wzr
  410c5c:	mov	w0, w8
  410c60:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410c64:	add	x1, x1, #0xa3d
  410c68:	ldr	x2, [sp, #32]
  410c6c:	mov	w3, #0x2a6                 	// #678
  410c70:	ldr	x4, [sp, #24]
  410c74:	bl	404150 <log_assert_failed_realm@plt>
  410c78:	ldur	x8, [x29, #-48]
  410c7c:	cmp	x8, #0x0
  410c80:	cset	w9, ne  // ne = any
  410c84:	mov	w10, #0x1                   	// #1
  410c88:	eor	w9, w9, #0x1
  410c8c:	eor	w9, w9, w10
  410c90:	eor	w9, w9, w10
  410c94:	and	w9, w9, #0x1
  410c98:	mov	w0, w9
  410c9c:	sxtw	x8, w0
  410ca0:	cbz	x8, 410cc4 <bus_image_object_find+0x184>
  410ca4:	mov	w8, wzr
  410ca8:	mov	w0, w8
  410cac:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410cb0:	add	x1, x1, #0xa47
  410cb4:	ldr	x2, [sp, #32]
  410cb8:	mov	w3, #0x2a7                 	// #679
  410cbc:	ldr	x4, [sp, #24]
  410cc0:	bl	404150 <log_assert_failed_realm@plt>
  410cc4:	ldur	x0, [x29, #-24]
  410cc8:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410ccc:	add	x1, x1, #0x75b
  410cd0:	add	x2, sp, #0x40
  410cd4:	bl	404a60 <sd_bus_path_decode@plt>
  410cd8:	str	w0, [sp, #44]
  410cdc:	ldr	w8, [sp, #44]
  410ce0:	cmp	w8, #0x0
  410ce4:	cset	w8, ge  // ge = tcont
  410ce8:	tbnz	w8, #0, 410cfc <bus_image_object_find+0x1bc>
  410cec:	stur	wzr, [x29, #-4]
  410cf0:	mov	w8, #0x1                   	// #1
  410cf4:	str	w8, [sp, #40]
  410cf8:	b	410dc0 <bus_image_object_find+0x280>
  410cfc:	ldr	w8, [sp, #44]
  410d00:	cbnz	w8, 410d08 <bus_image_object_find+0x1c8>
  410d04:	b	410da8 <bus_image_object_find+0x268>
  410d08:	ldr	x0, [sp, #56]
  410d0c:	ldur	x8, [x29, #-16]
  410d10:	str	x0, [sp, #16]
  410d14:	mov	x0, x8
  410d18:	bl	404a70 <sd_bus_get_current_message@plt>
  410d1c:	ldr	x2, [sp, #64]
  410d20:	ldur	x7, [x29, #-56]
  410d24:	ldr	x8, [sp, #16]
  410d28:	str	x0, [sp, #8]
  410d2c:	mov	x0, x8
  410d30:	ldr	x1, [sp, #8]
  410d34:	mov	x9, xzr
  410d38:	mov	x3, x9
  410d3c:	mov	w10, wzr
  410d40:	mov	w4, w10
  410d44:	mov	x5, x9
  410d48:	add	x6, sp, #0x30
  410d4c:	bl	40e83c <bus_image_acquire>
  410d50:	str	w0, [sp, #44]
  410d54:	ldr	w10, [sp, #44]
  410d58:	mov	w11, #0xfffffffe            	// #-2
  410d5c:	cmp	w10, w11
  410d60:	b.ne	410d68 <bus_image_object_find+0x228>  // b.any
  410d64:	b	410da8 <bus_image_object_find+0x268>
  410d68:	ldr	w8, [sp, #44]
  410d6c:	cmp	w8, #0x0
  410d70:	cset	w8, ge  // ge = tcont
  410d74:	tbnz	w8, #0, 410d8c <bus_image_object_find+0x24c>
  410d78:	ldr	w8, [sp, #44]
  410d7c:	stur	w8, [x29, #-4]
  410d80:	mov	w8, #0x1                   	// #1
  410d84:	str	w8, [sp, #40]
  410d88:	b	410dc0 <bus_image_object_find+0x280>
  410d8c:	ldr	x8, [sp, #48]
  410d90:	ldur	x9, [x29, #-48]
  410d94:	str	x8, [x9]
  410d98:	mov	w10, #0x1                   	// #1
  410d9c:	stur	w10, [x29, #-4]
  410da0:	str	w10, [sp, #40]
  410da4:	b	410dc0 <bus_image_object_find+0x280>
  410da8:	ldur	x8, [x29, #-48]
  410dac:	mov	x9, xzr
  410db0:	str	x9, [x8]
  410db4:	stur	wzr, [x29, #-4]
  410db8:	mov	w10, #0x1                   	// #1
  410dbc:	str	w10, [sp, #40]
  410dc0:	add	x0, sp, #0x40
  410dc4:	bl	40f3d8 <freep>
  410dc8:	ldur	w0, [x29, #-4]
  410dcc:	ldp	x29, x30, [sp, #128]
  410dd0:	add	sp, sp, #0x90
  410dd4:	ret

0000000000410dd8 <bus_image_node_enumerator>:
  410dd8:	sub	sp, sp, #0xc0
  410ddc:	stp	x29, x30, [sp, #176]
  410de0:	add	x29, sp, #0xb0
  410de4:	mov	x8, xzr
  410de8:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410dec:	add	x9, x9, #0x2db
  410df0:	add	x9, x9, #0x3
  410df4:	adrp	x10, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410df8:	add	x10, x10, #0xa4d
  410dfc:	stur	x0, [x29, #-16]
  410e00:	stur	x1, [x29, #-24]
  410e04:	stur	x2, [x29, #-32]
  410e08:	stur	x3, [x29, #-40]
  410e0c:	stur	x4, [x29, #-48]
  410e10:	stur	x8, [x29, #-56]
  410e14:	stur	x8, [x29, #-64]
  410e18:	stur	xzr, [x29, #-72]
  410e1c:	stur	xzr, [x29, #-80]
  410e20:	ldur	x8, [x29, #-32]
  410e24:	str	x8, [sp, #88]
  410e28:	str	x9, [sp, #8]
  410e2c:	str	x10, [sp]
  410e30:	ldur	x8, [x29, #-16]
  410e34:	cmp	x8, #0x0
  410e38:	cset	w9, ne  // ne = any
  410e3c:	mov	w10, #0x1                   	// #1
  410e40:	eor	w9, w9, #0x1
  410e44:	eor	w9, w9, w10
  410e48:	eor	w9, w9, w10
  410e4c:	and	w9, w9, #0x1
  410e50:	mov	w0, w9
  410e54:	sxtw	x8, w0
  410e58:	cbz	x8, 410e7c <bus_image_node_enumerator+0xa4>
  410e5c:	mov	w8, wzr
  410e60:	mov	w0, w8
  410e64:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  410e68:	add	x1, x1, #0xdb2
  410e6c:	ldr	x2, [sp, #8]
  410e70:	mov	w3, #0x2c6                 	// #710
  410e74:	ldr	x4, [sp]
  410e78:	bl	404150 <log_assert_failed_realm@plt>
  410e7c:	ldur	x8, [x29, #-24]
  410e80:	cmp	x8, #0x0
  410e84:	cset	w9, ne  // ne = any
  410e88:	mov	w10, #0x1                   	// #1
  410e8c:	eor	w9, w9, #0x1
  410e90:	eor	w9, w9, w10
  410e94:	eor	w9, w9, w10
  410e98:	and	w9, w9, #0x1
  410e9c:	mov	w0, w9
  410ea0:	sxtw	x8, w0
  410ea4:	cbz	x8, 410ec8 <bus_image_node_enumerator+0xf0>
  410ea8:	mov	w8, wzr
  410eac:	mov	w0, w8
  410eb0:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  410eb4:	add	x1, x1, #0xb39
  410eb8:	ldr	x2, [sp, #8]
  410ebc:	mov	w3, #0x2c7                 	// #711
  410ec0:	ldr	x4, [sp]
  410ec4:	bl	404150 <log_assert_failed_realm@plt>
  410ec8:	ldur	x8, [x29, #-40]
  410ecc:	cmp	x8, #0x0
  410ed0:	cset	w9, ne  // ne = any
  410ed4:	mov	w10, #0x1                   	// #1
  410ed8:	eor	w9, w9, #0x1
  410edc:	eor	w9, w9, w10
  410ee0:	eor	w9, w9, w10
  410ee4:	and	w9, w9, #0x1
  410ee8:	mov	w0, w9
  410eec:	sxtw	x8, w0
  410ef0:	cbz	x8, 410f14 <bus_image_node_enumerator+0x13c>
  410ef4:	mov	w8, wzr
  410ef8:	mov	w0, w8
  410efc:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  410f00:	add	x1, x1, #0xaa5
  410f04:	ldr	x2, [sp, #8]
  410f08:	mov	w3, #0x2c8                 	// #712
  410f0c:	ldr	x4, [sp]
  410f10:	bl	404150 <log_assert_failed_realm@plt>
  410f14:	adrp	x0, 42f000 <__FRAME_END__+0x18438>
  410f18:	add	x0, x0, #0xfd8
  410f1c:	bl	4042a0 <internal_hashmap_new@plt>
  410f20:	stur	x0, [x29, #-56]
  410f24:	ldur	x8, [x29, #-56]
  410f28:	cbnz	x8, 410f40 <bus_image_node_enumerator+0x168>
  410f2c:	mov	w8, #0xfffffff4            	// #-12
  410f30:	stur	w8, [x29, #-4]
  410f34:	mov	w8, #0x1                   	// #1
  410f38:	str	w8, [sp, #56]
  410f3c:	b	411090 <bus_image_node_enumerator+0x2b8>
  410f40:	ldr	x0, [sp, #88]
  410f44:	ldur	x1, [x29, #-56]
  410f48:	ldur	x2, [x29, #-48]
  410f4c:	bl	411528 <manager_image_cache_discover>
  410f50:	str	w0, [sp, #60]
  410f54:	ldr	w8, [sp, #60]
  410f58:	cmp	w8, #0x0
  410f5c:	cset	w8, ge  // ge = tcont
  410f60:	tbnz	w8, #0, 410f78 <bus_image_node_enumerator+0x1a0>
  410f64:	ldr	w8, [sp, #60]
  410f68:	stur	w8, [x29, #-4]
  410f6c:	mov	w8, #0x1                   	// #1
  410f70:	str	w8, [sp, #56]
  410f74:	b	411090 <bus_image_node_enumerator+0x2b8>
  410f78:	add	x8, sp, #0x28
  410f7c:	mov	w9, #0xfffffffe            	// #-2
  410f80:	str	w9, [sp, #40]
  410f84:	mov	x10, xzr
  410f88:	str	x10, [x8, #8]
  410f8c:	ldur	q0, [sp, #40]
  410f90:	str	q0, [sp, #64]
  410f94:	ldur	x0, [x29, #-56]
  410f98:	add	x1, sp, #0x40
  410f9c:	add	x2, sp, #0x50
  410fa0:	mov	x8, xzr
  410fa4:	mov	x3, x8
  410fa8:	bl	4110b0 <hashmap_iterate>
  410fac:	tbnz	w0, #0, 410fb4 <bus_image_node_enumerator+0x1dc>
  410fb0:	b	411060 <bus_image_node_enumerator+0x288>
  410fb4:	ldr	x0, [sp, #80]
  410fb8:	add	x1, sp, #0x20
  410fbc:	bl	4109f8 <bus_image_path>
  410fc0:	str	w0, [sp, #60]
  410fc4:	ldr	w8, [sp, #60]
  410fc8:	cmp	w8, #0x0
  410fcc:	cset	w8, ge  // ge = tcont
  410fd0:	tbnz	w8, #0, 410fe8 <bus_image_node_enumerator+0x210>
  410fd4:	ldr	w8, [sp, #60]
  410fd8:	stur	w8, [x29, #-4]
  410fdc:	mov	w8, #0x1                   	// #1
  410fe0:	str	w8, [sp, #56]
  410fe4:	b	411090 <bus_image_node_enumerator+0x2b8>
  410fe8:	ldur	x8, [x29, #-80]
  410fec:	add	x2, x8, #0x2
  410ff0:	sub	x0, x29, #0x40
  410ff4:	sub	x1, x29, #0x48
  410ff8:	mov	x3, #0x8                   	// #8
  410ffc:	bl	404a80 <greedy_realloc@plt>
  411000:	cbnz	x0, 411020 <bus_image_node_enumerator+0x248>
  411004:	ldr	x0, [sp, #32]
  411008:	bl	404140 <free@plt>
  41100c:	mov	w8, #0xfffffff4            	// #-12
  411010:	stur	w8, [x29, #-4]
  411014:	mov	w8, #0x1                   	// #1
  411018:	str	w8, [sp, #56]
  41101c:	b	411090 <bus_image_node_enumerator+0x2b8>
  411020:	ldr	x8, [sp, #32]
  411024:	ldur	x9, [x29, #-64]
  411028:	ldur	x10, [x29, #-80]
  41102c:	add	x11, x10, #0x1
  411030:	stur	x11, [x29, #-80]
  411034:	mov	x11, #0x8                   	// #8
  411038:	mul	x10, x11, x10
  41103c:	add	x9, x9, x10
  411040:	str	x8, [x9]
  411044:	ldur	x8, [x29, #-64]
  411048:	ldur	x9, [x29, #-80]
  41104c:	mul	x9, x11, x9
  411050:	add	x8, x8, x9
  411054:	mov	x9, xzr
  411058:	str	x9, [x8]
  41105c:	b	410f94 <bus_image_node_enumerator+0x1bc>
  411060:	ldur	x8, [x29, #-64]
  411064:	str	x8, [sp, #24]
  411068:	mov	x8, xzr
  41106c:	stur	x8, [x29, #-64]
  411070:	ldr	x8, [sp, #24]
  411074:	str	x8, [sp, #16]
  411078:	ldr	x8, [sp, #16]
  41107c:	ldur	x9, [x29, #-40]
  411080:	str	x8, [x9]
  411084:	mov	w10, #0x1                   	// #1
  411088:	stur	w10, [x29, #-4]
  41108c:	str	w10, [sp, #56]
  411090:	sub	x0, x29, #0x40
  411094:	bl	40f400 <strv_freep>
  411098:	sub	x0, x29, #0x38
  41109c:	bl	40f370 <hashmap_freep>
  4110a0:	ldur	w0, [x29, #-4]
  4110a4:	ldp	x29, x30, [sp, #176]
  4110a8:	add	sp, sp, #0xc0
  4110ac:	ret

00000000004110b0 <hashmap_iterate>:
  4110b0:	sub	sp, sp, #0x30
  4110b4:	stp	x29, x30, [sp, #32]
  4110b8:	add	x29, sp, #0x20
  4110bc:	stur	x0, [x29, #-8]
  4110c0:	str	x1, [sp, #16]
  4110c4:	str	x2, [sp, #8]
  4110c8:	str	x3, [sp]
  4110cc:	ldur	x0, [x29, #-8]
  4110d0:	ldr	x1, [sp, #16]
  4110d4:	ldr	x2, [sp, #8]
  4110d8:	ldr	x3, [sp]
  4110dc:	bl	404180 <internal_hashmap_iterate@plt>
  4110e0:	and	w0, w0, #0x1
  4110e4:	ldp	x29, x30, [sp, #32]
  4110e8:	add	sp, sp, #0x30
  4110ec:	ret

00000000004110f0 <hashmap_free>:
  4110f0:	sub	sp, sp, #0x20
  4110f4:	stp	x29, x30, [sp, #16]
  4110f8:	add	x29, sp, #0x10
  4110fc:	mov	x8, xzr
  411100:	str	x0, [sp, #8]
  411104:	ldr	x0, [sp, #8]
  411108:	mov	x1, x8
  41110c:	mov	x2, x8
  411110:	bl	404770 <internal_hashmap_free@plt>
  411114:	ldp	x29, x30, [sp, #16]
  411118:	add	sp, sp, #0x20
  41111c:	ret

0000000000411120 <fclosep>:
  411120:	sub	sp, sp, #0x20
  411124:	stp	x29, x30, [sp, #16]
  411128:	add	x29, sp, #0x10
  41112c:	str	x0, [sp, #8]
  411130:	ldr	x8, [sp, #8]
  411134:	ldr	x0, [x8]
  411138:	bl	404800 <safe_fclose@plt>
  41113c:	ldp	x29, x30, [sp, #16]
  411140:	add	sp, sp, #0x20
  411144:	ret

0000000000411148 <read_full_stream>:
  411148:	sub	sp, sp, #0x30
  41114c:	stp	x29, x30, [sp, #32]
  411150:	add	x29, sp, #0x20
  411154:	mov	x8, xzr
  411158:	mov	w9, wzr
  41115c:	stur	x0, [x29, #-8]
  411160:	str	x1, [sp, #16]
  411164:	str	x2, [sp, #8]
  411168:	ldur	x0, [x29, #-8]
  41116c:	ldr	x3, [sp, #16]
  411170:	ldr	x4, [sp, #8]
  411174:	mov	x1, x8
  411178:	mov	w2, w9
  41117c:	bl	404a90 <read_full_stream_full@plt>
  411180:	ldp	x29, x30, [sp, #32]
  411184:	add	sp, sp, #0x30
  411188:	ret

000000000041118c <FILE_SIZE_VALID>:
  41118c:	sub	sp, sp, #0x10
  411190:	str	x0, [sp, #8]
  411194:	ldr	x8, [sp, #8]
  411198:	lsr	x8, x8, #63
  41119c:	cmp	x8, #0x0
  4111a0:	cset	w9, eq  // eq = none
  4111a4:	and	w0, w9, #0x1
  4111a8:	add	sp, sp, #0x10
  4111ac:	ret

00000000004111b0 <manager_image_cache_get>:
  4111b0:	sub	sp, sp, #0x30
  4111b4:	stp	x29, x30, [sp, #32]
  4111b8:	add	x29, sp, #0x20
  4111bc:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4111c0:	add	x8, x8, #0xbf2
  4111c4:	add	x2, x8, #0x3
  4111c8:	stur	x0, [x29, #-8]
  4111cc:	str	x1, [sp, #16]
  4111d0:	str	x2, [sp, #8]
  4111d4:	ldur	x8, [x29, #-8]
  4111d8:	cmp	x8, #0x0
  4111dc:	cset	w9, ne  // ne = any
  4111e0:	mov	w10, #0x1                   	// #1
  4111e4:	eor	w9, w9, #0x1
  4111e8:	eor	w9, w9, w10
  4111ec:	eor	w9, w9, w10
  4111f0:	and	w9, w9, #0x1
  4111f4:	mov	w0, w9
  4111f8:	sxtw	x8, w0
  4111fc:	cbz	x8, 411224 <manager_image_cache_get+0x74>
  411200:	mov	w8, wzr
  411204:	mov	w0, w8
  411208:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  41120c:	add	x1, x1, #0x420
  411210:	ldr	x2, [sp, #8]
  411214:	mov	w3, #0x8                   	// #8
  411218:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  41121c:	add	x4, x4, #0xc14
  411220:	bl	404150 <log_assert_failed_realm@plt>
  411224:	ldur	x8, [x29, #-8]
  411228:	ldr	x0, [x8, #24]
  41122c:	ldr	x1, [sp, #16]
  411230:	bl	411240 <hashmap_get>
  411234:	ldp	x29, x30, [sp, #32]
  411238:	add	sp, sp, #0x30
  41123c:	ret

0000000000411240 <hashmap_get>:
  411240:	sub	sp, sp, #0x20
  411244:	stp	x29, x30, [sp, #16]
  411248:	add	x29, sp, #0x10
  41124c:	str	x0, [sp, #8]
  411250:	str	x1, [sp]
  411254:	ldr	x0, [sp, #8]
  411258:	ldr	x1, [sp]
  41125c:	bl	4045c0 <internal_hashmap_get@plt>
  411260:	ldp	x29, x30, [sp, #16]
  411264:	add	sp, sp, #0x20
  411268:	ret

000000000041126c <manager_image_cache_add>:
  41126c:	sub	sp, sp, #0x40
  411270:	stp	x29, x30, [sp, #48]
  411274:	add	x29, sp, #0x30
  411278:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  41127c:	add	x8, x8, #0xbf2
  411280:	add	x2, x8, #0x3
  411284:	stur	x0, [x29, #-16]
  411288:	str	x1, [sp, #24]
  41128c:	str	x2, [sp, #8]
  411290:	ldur	x8, [x29, #-16]
  411294:	cmp	x8, #0x0
  411298:	cset	w9, ne  // ne = any
  41129c:	mov	w10, #0x1                   	// #1
  4112a0:	eor	w9, w9, #0x1
  4112a4:	eor	w9, w9, w10
  4112a8:	eor	w9, w9, w10
  4112ac:	and	w9, w9, #0x1
  4112b0:	mov	w0, w9
  4112b4:	sxtw	x8, w0
  4112b8:	cbz	x8, 4112e0 <manager_image_cache_add+0x74>
  4112bc:	mov	w8, wzr
  4112c0:	mov	w0, w8
  4112c4:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4112c8:	add	x1, x1, #0x420
  4112cc:	ldr	x2, [sp, #8]
  4112d0:	mov	w3, #0x35                  	// #53
  4112d4:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4112d8:	add	x4, x4, #0xc4c
  4112dc:	bl	404150 <log_assert_failed_realm@plt>
  4112e0:	ldur	x0, [x29, #-16]
  4112e4:	bl	4113c4 <manager_image_cache_initialize>
  4112e8:	str	w0, [sp, #20]
  4112ec:	ldr	w8, [sp, #20]
  4112f0:	cmp	w8, #0x0
  4112f4:	cset	w8, ge  // ge = tcont
  4112f8:	tbnz	w8, #0, 411308 <manager_image_cache_add+0x9c>
  4112fc:	ldr	w8, [sp, #20]
  411300:	stur	w8, [x29, #-4]
  411304:	b	4113b4 <manager_image_cache_add+0x148>
  411308:	ldur	x8, [x29, #-16]
  41130c:	ldr	x9, [sp, #24]
  411310:	str	x8, [x9, #128]
  411314:	ldur	x8, [x29, #-16]
  411318:	ldr	x0, [x8, #24]
  41131c:	ldr	x8, [sp, #24]
  411320:	ldr	x1, [x8, #16]
  411324:	ldr	x2, [sp, #24]
  411328:	bl	4042b0 <hashmap_put@plt>
  41132c:	str	w0, [sp, #20]
  411330:	ldr	w10, [sp, #20]
  411334:	cmp	w10, #0x0
  411338:	cset	w10, ge  // ge = tcont
  41133c:	tbnz	w10, #0, 41134c <manager_image_cache_add+0xe0>
  411340:	ldr	w8, [sp, #20]
  411344:	stur	w8, [x29, #-4]
  411348:	b	4113b4 <manager_image_cache_add+0x148>
  41134c:	ldr	x0, [sp, #24]
  411350:	bl	404ab0 <image_ref@plt>
  411354:	ldr	x8, [sp, #24]
  411358:	ldrb	w9, [x8, #120]
  41135c:	mov	w10, #0x1                   	// #1
  411360:	lsr	w9, w9, w10
  411364:	and	w9, w9, w10
  411368:	tbnz	w9, #0, 411370 <manager_image_cache_add+0x104>
  41136c:	b	4113b0 <manager_image_cache_add+0x144>
  411370:	ldur	x8, [x29, #-16]
  411374:	ldr	x0, [x8, #24]
  411378:	ldr	x8, [sp, #24]
  41137c:	ldr	x1, [x8, #8]
  411380:	ldr	x2, [sp, #24]
  411384:	bl	4042b0 <hashmap_put@plt>
  411388:	str	w0, [sp, #20]
  41138c:	ldr	w9, [sp, #20]
  411390:	cmp	w9, #0x0
  411394:	cset	w9, ge  // ge = tcont
  411398:	tbnz	w9, #0, 4113a8 <manager_image_cache_add+0x13c>
  41139c:	ldr	w8, [sp, #20]
  4113a0:	stur	w8, [x29, #-4]
  4113a4:	b	4113b4 <manager_image_cache_add+0x148>
  4113a8:	ldr	x0, [sp, #24]
  4113ac:	bl	404ab0 <image_ref@plt>
  4113b0:	stur	wzr, [x29, #-4]
  4113b4:	ldur	w0, [x29, #-4]
  4113b8:	ldp	x29, x30, [sp, #48]
  4113bc:	add	sp, sp, #0x40
  4113c0:	ret

00000000004113c4 <manager_image_cache_initialize>:
  4113c4:	sub	sp, sp, #0x30
  4113c8:	stp	x29, x30, [sp, #32]
  4113cc:	add	x29, sp, #0x20
  4113d0:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4113d4:	add	x8, x8, #0xbf2
  4113d8:	add	x2, x8, #0x3
  4113dc:	str	x0, [sp, #16]
  4113e0:	str	x2, [sp]
  4113e4:	ldr	x8, [sp, #16]
  4113e8:	cmp	x8, #0x0
  4113ec:	cset	w9, ne  // ne = any
  4113f0:	mov	w10, #0x1                   	// #1
  4113f4:	eor	w9, w9, #0x1
  4113f8:	eor	w9, w9, w10
  4113fc:	eor	w9, w9, w10
  411400:	and	w9, w9, #0x1
  411404:	mov	w0, w9
  411408:	sxtw	x8, w0
  41140c:	cbz	x8, 411434 <manager_image_cache_initialize+0x70>
  411410:	mov	w8, wzr
  411414:	mov	w0, w8
  411418:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  41141c:	add	x1, x1, #0x420
  411420:	ldr	x2, [sp]
  411424:	mov	w3, #0x1a                  	// #26
  411428:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  41142c:	add	x4, x4, #0xcc3
  411430:	bl	404150 <log_assert_failed_realm@plt>
  411434:	ldr	x8, [sp, #16]
  411438:	add	x0, x8, #0x18
  41143c:	adrp	x1, 42f000 <__FRAME_END__+0x18438>
  411440:	add	x1, x1, #0xfd8
  411444:	bl	404ac0 <internal_hashmap_ensure_allocated@plt>
  411448:	str	w0, [sp, #12]
  41144c:	ldr	w9, [sp, #12]
  411450:	cmp	w9, #0x0
  411454:	cset	w9, ge  // ge = tcont
  411458:	tbnz	w9, #0, 411468 <manager_image_cache_initialize+0xa4>
  41145c:	ldr	w8, [sp, #12]
  411460:	stur	w8, [x29, #-4]
  411464:	b	411518 <manager_image_cache_initialize+0x154>
  411468:	ldr	x8, [sp, #16]
  41146c:	ldr	x8, [x8, #32]
  411470:	cbnz	x8, 4114e4 <manager_image_cache_initialize+0x120>
  411474:	ldr	x8, [sp, #16]
  411478:	ldr	x0, [x8]
  41147c:	ldr	x8, [sp, #16]
  411480:	add	x1, x8, #0x20
  411484:	ldr	x3, [sp, #16]
  411488:	adrp	x2, 411000 <bus_image_node_enumerator+0x228>
  41148c:	add	x2, x2, #0x66c
  411490:	bl	404ad0 <sd_event_add_defer@plt>
  411494:	str	w0, [sp, #12]
  411498:	ldr	w9, [sp, #12]
  41149c:	cmp	w9, #0x0
  4114a0:	cset	w9, ge  // ge = tcont
  4114a4:	tbnz	w9, #0, 4114b4 <manager_image_cache_initialize+0xf0>
  4114a8:	ldr	w8, [sp, #12]
  4114ac:	stur	w8, [x29, #-4]
  4114b0:	b	411518 <manager_image_cache_initialize+0x154>
  4114b4:	ldr	x8, [sp, #16]
  4114b8:	ldr	x0, [x8, #32]
  4114bc:	mov	x1, #0x64                  	// #100
  4114c0:	bl	404ae0 <sd_event_source_set_priority@plt>
  4114c4:	str	w0, [sp, #12]
  4114c8:	ldr	w9, [sp, #12]
  4114cc:	cmp	w9, #0x0
  4114d0:	cset	w9, ge  // ge = tcont
  4114d4:	tbnz	w9, #0, 4114e4 <manager_image_cache_initialize+0x120>
  4114d8:	ldr	w8, [sp, #12]
  4114dc:	stur	w8, [x29, #-4]
  4114e0:	b	411518 <manager_image_cache_initialize+0x154>
  4114e4:	ldr	x8, [sp, #16]
  4114e8:	ldr	x0, [x8, #32]
  4114ec:	mov	w1, #0xffffffff            	// #-1
  4114f0:	bl	404af0 <sd_event_source_set_enabled@plt>
  4114f4:	str	w0, [sp, #12]
  4114f8:	ldr	w9, [sp, #12]
  4114fc:	cmp	w9, #0x0
  411500:	cset	w9, ge  // ge = tcont
  411504:	tbnz	w9, #0, 411514 <manager_image_cache_initialize+0x150>
  411508:	ldr	w8, [sp, #12]
  41150c:	stur	w8, [x29, #-4]
  411510:	b	411518 <manager_image_cache_initialize+0x154>
  411514:	stur	wzr, [x29, #-4]
  411518:	ldur	w0, [x29, #-4]
  41151c:	ldp	x29, x30, [sp, #32]
  411520:	add	sp, sp, #0x30
  411524:	ret

0000000000411528 <manager_image_cache_discover>:
  411528:	sub	sp, sp, #0x70
  41152c:	stp	x29, x30, [sp, #96]
  411530:	add	x29, sp, #0x60
  411534:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411538:	add	x8, x8, #0xbf2
  41153c:	add	x8, x8, #0x3
  411540:	stur	x0, [x29, #-16]
  411544:	stur	x1, [x29, #-24]
  411548:	stur	x2, [x29, #-32]
  41154c:	str	x8, [sp]
  411550:	ldur	x8, [x29, #-16]
  411554:	cmp	x8, #0x0
  411558:	cset	w9, ne  // ne = any
  41155c:	mov	w10, #0x1                   	// #1
  411560:	eor	w9, w9, #0x1
  411564:	eor	w9, w9, w10
  411568:	eor	w9, w9, w10
  41156c:	and	w9, w9, #0x1
  411570:	mov	w0, w9
  411574:	sxtw	x8, w0
  411578:	cbz	x8, 4115a0 <manager_image_cache_discover+0x78>
  41157c:	mov	w8, wzr
  411580:	mov	w0, w8
  411584:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  411588:	add	x1, x1, #0x420
  41158c:	ldr	x2, [sp]
  411590:	mov	w3, #0x5b                  	// #91
  411594:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411598:	add	x4, x4, #0xc7c
  41159c:	bl	404150 <log_assert_failed_realm@plt>
  4115a0:	ldur	x1, [x29, #-24]
  4115a4:	mov	w0, #0x1                   	// #1
  4115a8:	bl	404b00 <image_discover@plt>
  4115ac:	str	w0, [sp, #28]
  4115b0:	ldr	w8, [sp, #28]
  4115b4:	cmp	w8, #0x0
  4115b8:	cset	w8, ge  // ge = tcont
  4115bc:	tbnz	w8, #0, 4115cc <manager_image_cache_discover+0xa4>
  4115c0:	ldr	w8, [sp, #28]
  4115c4:	stur	w8, [x29, #-4]
  4115c8:	b	41161c <manager_image_cache_discover+0xf4>
  4115cc:	add	x8, sp, #0x8
  4115d0:	mov	w9, #0xfffffffe            	// #-2
  4115d4:	str	w9, [sp, #8]
  4115d8:	mov	x10, xzr
  4115dc:	str	x10, [x8, #8]
  4115e0:	ldur	q0, [sp, #8]
  4115e4:	str	q0, [sp, #32]
  4115e8:	ldur	x0, [x29, #-24]
  4115ec:	add	x1, sp, #0x20
  4115f0:	sub	x2, x29, #0x28
  4115f4:	mov	x8, xzr
  4115f8:	mov	x3, x8
  4115fc:	bl	41162c <hashmap_iterate>
  411600:	tbnz	w0, #0, 411608 <manager_image_cache_discover+0xe0>
  411604:	b	411618 <manager_image_cache_discover+0xf0>
  411608:	ldur	x0, [x29, #-16]
  41160c:	ldur	x1, [x29, #-40]
  411610:	bl	41126c <manager_image_cache_add>
  411614:	b	4115e8 <manager_image_cache_discover+0xc0>
  411618:	stur	wzr, [x29, #-4]
  41161c:	ldur	w0, [x29, #-4]
  411620:	ldp	x29, x30, [sp, #96]
  411624:	add	sp, sp, #0x70
  411628:	ret

000000000041162c <hashmap_iterate>:
  41162c:	sub	sp, sp, #0x30
  411630:	stp	x29, x30, [sp, #32]
  411634:	add	x29, sp, #0x20
  411638:	stur	x0, [x29, #-8]
  41163c:	str	x1, [sp, #16]
  411640:	str	x2, [sp, #8]
  411644:	str	x3, [sp]
  411648:	ldur	x0, [x29, #-8]
  41164c:	ldr	x1, [sp, #16]
  411650:	ldr	x2, [sp, #8]
  411654:	ldr	x3, [sp]
  411658:	bl	404180 <internal_hashmap_iterate@plt>
  41165c:	and	w0, w0, #0x1
  411660:	ldp	x29, x30, [sp, #32]
  411664:	add	sp, sp, #0x30
  411668:	ret

000000000041166c <image_cache_flush>:
  41166c:	sub	sp, sp, #0x30
  411670:	stp	x29, x30, [sp, #32]
  411674:	add	x29, sp, #0x20
  411678:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  41167c:	add	x8, x8, #0xbf2
  411680:	add	x8, x8, #0x3
  411684:	stur	x0, [x29, #-8]
  411688:	str	x1, [sp, #16]
  41168c:	ldr	x9, [sp, #16]
  411690:	str	x9, [sp, #8]
  411694:	str	x8, [sp]
  411698:	ldur	x8, [x29, #-8]
  41169c:	cmp	x8, #0x0
  4116a0:	cset	w9, ne  // ne = any
  4116a4:	mov	w10, #0x1                   	// #1
  4116a8:	eor	w9, w9, #0x1
  4116ac:	eor	w9, w9, w10
  4116b0:	eor	w9, w9, w10
  4116b4:	and	w9, w9, #0x1
  4116b8:	mov	w0, w9
  4116bc:	sxtw	x8, w0
  4116c0:	cbz	x8, 4116e8 <image_cache_flush+0x7c>
  4116c4:	mov	w8, wzr
  4116c8:	mov	w0, w8
  4116cc:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4116d0:	add	x1, x1, #0xc4e
  4116d4:	ldr	x2, [sp]
  4116d8:	mov	w3, #0x10                  	// #16
  4116dc:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4116e0:	add	x4, x4, #0xcf1
  4116e4:	bl	404150 <log_assert_failed_realm@plt>
  4116e8:	ldr	x8, [sp, #8]
  4116ec:	cmp	x8, #0x0
  4116f0:	cset	w9, ne  // ne = any
  4116f4:	mov	w10, #0x1                   	// #1
  4116f8:	eor	w9, w9, #0x1
  4116fc:	eor	w9, w9, w10
  411700:	eor	w9, w9, w10
  411704:	and	w9, w9, #0x1
  411708:	mov	w0, w9
  41170c:	sxtw	x8, w0
  411710:	cbz	x8, 411738 <image_cache_flush+0xcc>
  411714:	mov	w8, wzr
  411718:	mov	w0, w8
  41171c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  411720:	add	x1, x1, #0x420
  411724:	ldr	x2, [sp]
  411728:	mov	w3, #0x11                  	// #17
  41172c:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411730:	add	x4, x4, #0xcf1
  411734:	bl	404150 <log_assert_failed_realm@plt>
  411738:	ldr	x8, [sp, #8]
  41173c:	ldr	x0, [x8, #24]
  411740:	bl	411758 <hashmap_clear>
  411744:	mov	w9, wzr
  411748:	mov	w0, w9
  41174c:	ldp	x29, x30, [sp, #32]
  411750:	add	sp, sp, #0x30
  411754:	ret

0000000000411758 <hashmap_clear>:
  411758:	sub	sp, sp, #0x20
  41175c:	stp	x29, x30, [sp, #16]
  411760:	add	x29, sp, #0x10
  411764:	mov	x8, xzr
  411768:	str	x0, [sp, #8]
  41176c:	ldr	x0, [sp, #8]
  411770:	mov	x1, x8
  411774:	mov	x2, x8
  411778:	bl	404b10 <internal_hashmap_clear@plt>
  41177c:	ldp	x29, x30, [sp, #16]
  411780:	add	sp, sp, #0x20
  411784:	ret

0000000000411788 <operation_new>:
  411788:	sub	sp, sp, #0x90
  41178c:	stp	x29, x30, [sp, #128]
  411790:	add	x29, sp, #0x80
  411794:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411798:	add	x8, x8, #0xd2a
  41179c:	add	x8, x8, #0x3
  4117a0:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4117a4:	add	x9, x9, #0xd50
  4117a8:	stur	x0, [x29, #-16]
  4117ac:	stur	w1, [x29, #-20]
  4117b0:	stur	x2, [x29, #-32]
  4117b4:	stur	w3, [x29, #-36]
  4117b8:	stur	x4, [x29, #-48]
  4117bc:	str	x8, [sp, #24]
  4117c0:	str	x9, [sp, #16]
  4117c4:	ldur	x8, [x29, #-16]
  4117c8:	cmp	x8, #0x0
  4117cc:	cset	w9, ne  // ne = any
  4117d0:	mov	w10, #0x1                   	// #1
  4117d4:	eor	w9, w9, #0x1
  4117d8:	eor	w9, w9, w10
  4117dc:	eor	w9, w9, w10
  4117e0:	and	w9, w9, #0x1
  4117e4:	mov	w0, w9
  4117e8:	sxtw	x8, w0
  4117ec:	cbz	x8, 411810 <operation_new+0x88>
  4117f0:	mov	w8, wzr
  4117f4:	mov	w0, w8
  4117f8:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4117fc:	add	x1, x1, #0xd22
  411800:	ldr	x2, [sp, #24]
  411804:	mov	w3, #0x49                  	// #73
  411808:	ldr	x4, [sp, #16]
  41180c:	bl	404150 <log_assert_failed_realm@plt>
  411810:	ldur	w8, [x29, #-20]
  411814:	cmp	w8, #0x1
  411818:	cset	w8, gt
  41181c:	mov	w9, #0x1                   	// #1
  411820:	eor	w8, w8, #0x1
  411824:	eor	w8, w8, w9
  411828:	eor	w8, w8, w9
  41182c:	and	w8, w8, #0x1
  411830:	mov	w0, w8
  411834:	sxtw	x10, w0
  411838:	cbz	x10, 41185c <operation_new+0xd4>
  41183c:	mov	w8, wzr
  411840:	mov	w0, w8
  411844:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411848:	add	x1, x1, #0xd99
  41184c:	ldr	x2, [sp, #24]
  411850:	mov	w3, #0x4a                  	// #74
  411854:	ldr	x4, [sp, #16]
  411858:	bl	404150 <log_assert_failed_realm@plt>
  41185c:	ldur	x8, [x29, #-32]
  411860:	cmp	x8, #0x0
  411864:	cset	w9, ne  // ne = any
  411868:	mov	w10, #0x1                   	// #1
  41186c:	eor	w9, w9, #0x1
  411870:	eor	w9, w9, w10
  411874:	eor	w9, w9, w10
  411878:	and	w9, w9, #0x1
  41187c:	mov	w0, w9
  411880:	sxtw	x8, w0
  411884:	cbz	x8, 4118a8 <operation_new+0x120>
  411888:	mov	w8, wzr
  41188c:	mov	w0, w8
  411890:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  411894:	add	x1, x1, #0xfb4
  411898:	ldr	x2, [sp, #24]
  41189c:	mov	w3, #0x4b                  	// #75
  4118a0:	ldr	x4, [sp, #16]
  4118a4:	bl	404150 <log_assert_failed_realm@plt>
  4118a8:	ldur	w8, [x29, #-36]
  4118ac:	cmp	w8, #0x0
  4118b0:	cset	w8, ge  // ge = tcont
  4118b4:	mov	w9, #0x1                   	// #1
  4118b8:	eor	w8, w8, #0x1
  4118bc:	eor	w8, w8, w9
  4118c0:	eor	w8, w8, w9
  4118c4:	and	w8, w8, #0x1
  4118c8:	mov	w0, w8
  4118cc:	sxtw	x10, w0
  4118d0:	cbz	x10, 4118f4 <operation_new+0x16c>
  4118d4:	mov	w8, wzr
  4118d8:	mov	w0, w8
  4118dc:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4118e0:	add	x1, x1, #0xda3
  4118e4:	ldr	x2, [sp, #24]
  4118e8:	mov	w3, #0x4c                  	// #76
  4118ec:	ldr	x4, [sp, #16]
  4118f0:	bl	404150 <log_assert_failed_realm@plt>
  4118f4:	mov	x0, #0x1                   	// #1
  4118f8:	mov	x1, #0x40                  	// #64
  4118fc:	bl	404720 <calloc@plt>
  411900:	stur	x0, [x29, #-56]
  411904:	ldur	x8, [x29, #-56]
  411908:	cbnz	x8, 411918 <operation_new+0x190>
  41190c:	mov	w8, #0xfffffff4            	// #-12
  411910:	stur	w8, [x29, #-4]
  411914:	b	411ae8 <operation_new+0x360>
  411918:	ldur	x8, [x29, #-56]
  41191c:	mov	w9, #0xffffffff            	// #-1
  411920:	str	w9, [x8, #28]
  411924:	ldur	x8, [x29, #-16]
  411928:	ldr	x0, [x8]
  41192c:	ldur	x8, [x29, #-56]
  411930:	add	x1, x8, #0x20
  411934:	ldur	w2, [x29, #-20]
  411938:	ldur	x5, [x29, #-56]
  41193c:	mov	w3, #0x4                   	// #4
  411940:	adrp	x4, 411000 <bus_image_node_enumerator+0x228>
  411944:	add	x4, x4, #0xaf8
  411948:	bl	404b20 <sd_event_add_child@plt>
  41194c:	stur	w0, [x29, #-60]
  411950:	ldur	w9, [x29, #-60]
  411954:	cmp	w9, #0x0
  411958:	cset	w9, ge  // ge = tcont
  41195c:	tbnz	w9, #0, 411974 <operation_new+0x1ec>
  411960:	ldur	x0, [x29, #-56]
  411964:	bl	404140 <free@plt>
  411968:	ldur	w8, [x29, #-60]
  41196c:	stur	w8, [x29, #-4]
  411970:	b	411ae8 <operation_new+0x360>
  411974:	ldur	w8, [x29, #-20]
  411978:	ldur	x9, [x29, #-56]
  41197c:	str	w8, [x9, #8]
  411980:	ldur	x0, [x29, #-32]
  411984:	bl	404b30 <sd_bus_message_ref@plt>
  411988:	ldur	x9, [x29, #-56]
  41198c:	str	x0, [x9, #16]
  411990:	ldur	w8, [x29, #-36]
  411994:	ldur	x9, [x29, #-56]
  411998:	str	w8, [x9, #24]
  41199c:	ldur	x8, [x29, #-16]
  4119a0:	add	x8, x8, #0x28
  4119a4:	str	x8, [sp, #56]
  4119a8:	ldur	x8, [x29, #-56]
  4119ac:	str	x8, [sp, #48]
  4119b0:	ldr	x8, [sp, #48]
  4119b4:	cmp	x8, #0x0
  4119b8:	cset	w9, ne  // ne = any
  4119bc:	mov	w10, #0x1                   	// #1
  4119c0:	eor	w9, w9, #0x1
  4119c4:	eor	w9, w9, w10
  4119c8:	eor	w9, w9, w10
  4119cc:	and	w9, w9, #0x1
  4119d0:	mov	w0, w9
  4119d4:	sxtw	x8, w0
  4119d8:	cbz	x8, 4119fc <operation_new+0x274>
  4119dc:	mov	w8, wzr
  4119e0:	mov	w0, w8
  4119e4:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4119e8:	add	x1, x1, #0xdb1
  4119ec:	ldr	x2, [sp, #24]
  4119f0:	mov	w3, #0x5e                  	// #94
  4119f4:	ldr	x4, [sp, #16]
  4119f8:	bl	404150 <log_assert_failed_realm@plt>
  4119fc:	ldr	x8, [sp, #56]
  411a00:	ldr	x8, [x8]
  411a04:	ldr	x9, [sp, #48]
  411a08:	str	x8, [x9, #48]
  411a0c:	cbz	x8, 411a20 <operation_new+0x298>
  411a10:	ldr	x8, [sp, #48]
  411a14:	ldr	x9, [sp, #48]
  411a18:	ldr	x9, [x9, #48]
  411a1c:	str	x8, [x9, #56]
  411a20:	ldr	x8, [sp, #48]
  411a24:	mov	x9, xzr
  411a28:	str	x9, [x8, #56]
  411a2c:	ldr	x8, [sp, #48]
  411a30:	ldr	x9, [sp, #56]
  411a34:	str	x8, [x9]
  411a38:	ldur	x8, [x29, #-16]
  411a3c:	ldr	w9, [x8, #48]
  411a40:	add	w9, w9, #0x1
  411a44:	str	w9, [x8, #48]
  411a48:	ldur	x8, [x29, #-16]
  411a4c:	ldur	x10, [x29, #-56]
  411a50:	str	x8, [x10]
  411a54:	mov	w9, #0x7                   	// #7
  411a58:	str	w9, [sp, #44]
  411a5c:	str	wzr, [sp, #40]
  411a60:	str	wzr, [sp, #36]
  411a64:	ldr	w0, [sp, #36]
  411a68:	bl	4041e0 <log_get_max_level_realm@plt>
  411a6c:	ldr	w9, [sp, #44]
  411a70:	and	w9, w9, #0x7
  411a74:	cmp	w0, w9
  411a78:	b.lt	411ab4 <operation_new+0x32c>  // b.tstop
  411a7c:	ldr	w8, [sp, #36]
  411a80:	ldr	w9, [sp, #44]
  411a84:	orr	w0, w9, w8, lsl #10
  411a88:	ldr	w1, [sp, #40]
  411a8c:	ldur	w6, [x29, #-20]
  411a90:	ldr	x2, [sp, #24]
  411a94:	mov	w3, #0x62                  	// #98
  411a98:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411a9c:	add	x4, x4, #0xdb7
  411aa0:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411aa4:	add	x5, x5, #0xdc5
  411aa8:	bl	4041f0 <log_internal_realm@plt>
  411aac:	str	w0, [sp, #12]
  411ab0:	b	411ac8 <operation_new+0x340>
  411ab4:	ldr	w0, [sp, #40]
  411ab8:	bl	404200 <abs@plt>
  411abc:	mov	w8, wzr
  411ac0:	subs	w8, w8, w0, uxtb
  411ac4:	str	w8, [sp, #12]
  411ac8:	ldr	w8, [sp, #12]
  411acc:	str	w8, [sp, #32]
  411ad0:	ldur	x9, [x29, #-48]
  411ad4:	cbz	x9, 411ae4 <operation_new+0x35c>
  411ad8:	ldur	x8, [x29, #-56]
  411adc:	ldur	x9, [x29, #-48]
  411ae0:	str	x8, [x9]
  411ae4:	stur	wzr, [x29, #-4]
  411ae8:	ldur	w0, [x29, #-4]
  411aec:	ldp	x29, x30, [sp, #128]
  411af0:	add	sp, sp, #0x90
  411af4:	ret

0000000000411af8 <operation_done>:
  411af8:	sub	sp, sp, #0xd0
  411afc:	stp	x29, x30, [sp, #192]
  411b00:	add	x29, sp, #0xc0
  411b04:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411b08:	add	x8, x8, #0xd2a
  411b0c:	add	x8, x8, #0x3
  411b10:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411b14:	add	x9, x9, #0xe5a
  411b18:	stur	x0, [x29, #-16]
  411b1c:	stur	x1, [x29, #-24]
  411b20:	stur	x2, [x29, #-32]
  411b24:	stur	xzr, [x29, #-56]
  411b28:	stur	xzr, [x29, #-48]
  411b2c:	stur	xzr, [x29, #-40]
  411b30:	ldur	x10, [x29, #-32]
  411b34:	stur	x10, [x29, #-64]
  411b38:	str	x8, [sp, #64]
  411b3c:	str	x9, [sp, #56]
  411b40:	ldur	x8, [x29, #-64]
  411b44:	cmp	x8, #0x0
  411b48:	cset	w9, ne  // ne = any
  411b4c:	mov	w10, #0x1                   	// #1
  411b50:	eor	w9, w9, #0x1
  411b54:	eor	w9, w9, w10
  411b58:	eor	w9, w9, w10
  411b5c:	and	w9, w9, #0x1
  411b60:	mov	w0, w9
  411b64:	sxtw	x8, w0
  411b68:	cbz	x8, 411b90 <operation_done+0x98>
  411b6c:	mov	w8, wzr
  411b70:	mov	w0, w8
  411b74:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  411b78:	add	x1, x1, #0xc7b
  411b7c:	ldr	x2, [sp, #64]
  411b80:	mov	w3, #0xd                   	// #13
  411b84:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411b88:	add	x4, x4, #0xe16
  411b8c:	bl	404150 <log_assert_failed_realm@plt>
  411b90:	ldur	x8, [x29, #-24]
  411b94:	cmp	x8, #0x0
  411b98:	cset	w9, ne  // ne = any
  411b9c:	mov	w10, #0x1                   	// #1
  411ba0:	eor	w9, w9, #0x1
  411ba4:	eor	w9, w9, w10
  411ba8:	eor	w9, w9, w10
  411bac:	and	w9, w9, #0x1
  411bb0:	mov	w0, w9
  411bb4:	sxtw	x8, w0
  411bb8:	cbz	x8, 411be0 <operation_done+0xe8>
  411bbc:	mov	w8, wzr
  411bc0:	mov	w0, w8
  411bc4:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411bc8:	add	x1, x1, #0xe57
  411bcc:	ldr	x2, [sp, #64]
  411bd0:	mov	w3, #0xe                   	// #14
  411bd4:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411bd8:	add	x4, x4, #0xe16
  411bdc:	bl	404150 <log_assert_failed_realm@plt>
  411be0:	mov	w8, #0x7                   	// #7
  411be4:	stur	w8, [x29, #-72]
  411be8:	stur	wzr, [x29, #-76]
  411bec:	stur	wzr, [x29, #-80]
  411bf0:	ldur	w0, [x29, #-80]
  411bf4:	bl	4041e0 <log_get_max_level_realm@plt>
  411bf8:	ldur	w8, [x29, #-72]
  411bfc:	and	w8, w8, #0x7
  411c00:	cmp	w0, w8
  411c04:	b.lt	411c84 <operation_done+0x18c>  // b.tstop
  411c08:	ldur	w8, [x29, #-80]
  411c0c:	ldur	w9, [x29, #-72]
  411c10:	orr	w0, w9, w8, lsl #10
  411c14:	ldur	w1, [x29, #-76]
  411c18:	ldur	x10, [x29, #-64]
  411c1c:	ldr	w6, [x10, #8]
  411c20:	ldur	x10, [x29, #-24]
  411c24:	ldr	w8, [x10, #8]
  411c28:	str	w0, [sp, #52]
  411c2c:	mov	w0, w8
  411c30:	str	w1, [sp, #48]
  411c34:	str	w6, [sp, #44]
  411c38:	bl	404b40 <sigchld_code_to_string@plt>
  411c3c:	ldur	x10, [x29, #-24]
  411c40:	ldr	w8, [x10, #24]
  411c44:	ldr	w9, [sp, #52]
  411c48:	str	x0, [sp, #32]
  411c4c:	mov	w0, w9
  411c50:	ldr	w1, [sp, #48]
  411c54:	ldr	x2, [sp, #64]
  411c58:	mov	w3, #0x12                  	// #18
  411c5c:	ldr	x4, [sp, #56]
  411c60:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411c64:	add	x5, x5, #0xe69
  411c68:	ldr	w6, [sp, #44]
  411c6c:	ldr	x7, [sp, #32]
  411c70:	mov	x10, sp
  411c74:	str	w8, [x10]
  411c78:	bl	4041f0 <log_internal_realm@plt>
  411c7c:	str	w0, [sp, #28]
  411c80:	b	411c98 <operation_done+0x1a0>
  411c84:	ldur	w0, [x29, #-76]
  411c88:	bl	404200 <abs@plt>
  411c8c:	mov	w8, wzr
  411c90:	subs	w8, w8, w0, uxtb
  411c94:	str	w8, [sp, #28]
  411c98:	ldr	w8, [sp, #28]
  411c9c:	stur	w8, [x29, #-84]
  411ca0:	ldur	x9, [x29, #-64]
  411ca4:	str	wzr, [x9, #8]
  411ca8:	ldur	x9, [x29, #-24]
  411cac:	ldr	w8, [x9, #8]
  411cb0:	cmp	w8, #0x1
  411cb4:	b.eq	411cd8 <operation_done+0x1e0>  // b.none
  411cb8:	sub	x0, x29, #0x38
  411cbc:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411cc0:	add	x1, x1, #0xe9d
  411cc4:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411cc8:	add	x2, x2, #0xebf
  411ccc:	bl	404250 <sd_bus_error_setf@plt>
  411cd0:	stur	w0, [x29, #-68]
  411cd4:	b	411e58 <operation_done+0x360>
  411cd8:	ldur	x8, [x29, #-24]
  411cdc:	ldr	w9, [x8, #24]
  411ce0:	cbnz	w9, 411cec <operation_done+0x1f4>
  411ce4:	stur	wzr, [x29, #-68]
  411ce8:	b	411d28 <operation_done+0x230>
  411cec:	ldur	x8, [x29, #-64]
  411cf0:	ldr	w0, [x8, #24]
  411cf4:	sub	x1, x29, #0x44
  411cf8:	mov	x2, #0x4                   	// #4
  411cfc:	bl	404b50 <read@plt>
  411d00:	cmp	x0, #0x4
  411d04:	b.eq	411d28 <operation_done+0x230>  // b.none
  411d08:	sub	x0, x29, #0x38
  411d0c:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411d10:	add	x1, x1, #0xe9d
  411d14:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411d18:	add	x2, x2, #0xed6
  411d1c:	bl	404250 <sd_bus_error_setf@plt>
  411d20:	stur	w0, [x29, #-68]
  411d24:	b	411e58 <operation_done+0x360>
  411d28:	ldur	x8, [x29, #-64]
  411d2c:	ldr	x8, [x8, #40]
  411d30:	cbz	x8, 411d80 <operation_done+0x288>
  411d34:	ldur	x8, [x29, #-64]
  411d38:	ldr	x8, [x8, #40]
  411d3c:	ldur	x0, [x29, #-64]
  411d40:	ldur	w1, [x29, #-68]
  411d44:	sub	x2, x29, #0x38
  411d48:	blr	x8
  411d4c:	stur	w0, [x29, #-68]
  411d50:	ldur	w9, [x29, #-68]
  411d54:	cmp	w9, #0x0
  411d58:	cset	w9, ge  // ge = tcont
  411d5c:	tbnz	w9, #0, 411d7c <operation_done+0x284>
  411d60:	sub	x0, x29, #0x38
  411d64:	bl	404b60 <sd_bus_error_is_set@plt>
  411d68:	cbnz	w0, 411d78 <operation_done+0x280>
  411d6c:	ldur	w1, [x29, #-68]
  411d70:	sub	x0, x29, #0x38
  411d74:	bl	404b70 <sd_bus_error_set_errno@plt>
  411d78:	b	411e58 <operation_done+0x360>
  411d7c:	b	411e40 <operation_done+0x348>
  411d80:	ldur	w8, [x29, #-68]
  411d84:	cmp	w8, #0x0
  411d88:	cset	w8, ge  // ge = tcont
  411d8c:	tbnz	w8, #0, 411da0 <operation_done+0x2a8>
  411d90:	ldur	w1, [x29, #-68]
  411d94:	sub	x0, x29, #0x38
  411d98:	bl	404b70 <sd_bus_error_set_errno@plt>
  411d9c:	b	411e58 <operation_done+0x360>
  411da0:	ldur	x8, [x29, #-64]
  411da4:	ldr	x0, [x8, #16]
  411da8:	mov	x8, xzr
  411dac:	mov	x1, x8
  411db0:	bl	4048b0 <sd_bus_reply_method_return@plt>
  411db4:	stur	w0, [x29, #-68]
  411db8:	ldur	w9, [x29, #-68]
  411dbc:	cmp	w9, #0x0
  411dc0:	cset	w9, ge  // ge = tcont
  411dc4:	tbnz	w9, #0, 411e40 <operation_done+0x348>
  411dc8:	mov	w8, #0x3                   	// #3
  411dcc:	stur	w8, [x29, #-88]
  411dd0:	ldur	w8, [x29, #-68]
  411dd4:	stur	w8, [x29, #-92]
  411dd8:	str	wzr, [sp, #96]
  411ddc:	ldr	w0, [sp, #96]
  411de0:	bl	4041e0 <log_get_max_level_realm@plt>
  411de4:	ldur	w8, [x29, #-88]
  411de8:	and	w8, w8, #0x7
  411dec:	cmp	w0, w8
  411df0:	b.lt	411e24 <operation_done+0x32c>  // b.tstop
  411df4:	ldr	w8, [sp, #96]
  411df8:	ldur	w9, [x29, #-88]
  411dfc:	orr	w0, w9, w8, lsl #10
  411e00:	ldur	w1, [x29, #-92]
  411e04:	ldr	x2, [sp, #64]
  411e08:	mov	w3, #0x36                  	// #54
  411e0c:	ldr	x4, [sp, #56]
  411e10:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411e14:	add	x5, x5, #0xee4
  411e18:	bl	4041f0 <log_internal_realm@plt>
  411e1c:	str	w0, [sp, #24]
  411e20:	b	411e38 <operation_done+0x340>
  411e24:	ldur	w0, [x29, #-92]
  411e28:	bl	404200 <abs@plt>
  411e2c:	mov	w8, wzr
  411e30:	subs	w8, w8, w0, uxtb
  411e34:	str	w8, [sp, #24]
  411e38:	ldr	w8, [sp, #24]
  411e3c:	str	w8, [sp, #92]
  411e40:	ldur	x0, [x29, #-64]
  411e44:	bl	411f20 <operation_free>
  411e48:	stur	wzr, [x29, #-4]
  411e4c:	mov	w8, #0x1                   	// #1
  411e50:	str	w8, [sp, #88]
  411e54:	b	411f08 <operation_done+0x410>
  411e58:	ldur	x8, [x29, #-64]
  411e5c:	ldr	x0, [x8, #16]
  411e60:	sub	x1, x29, #0x38
  411e64:	bl	404b80 <sd_bus_reply_method_error@plt>
  411e68:	stur	w0, [x29, #-68]
  411e6c:	ldur	w9, [x29, #-68]
  411e70:	cmp	w9, #0x0
  411e74:	cset	w9, ge  // ge = tcont
  411e78:	tbnz	w9, #0, 411ef4 <operation_done+0x3fc>
  411e7c:	mov	w8, #0x3                   	// #3
  411e80:	str	w8, [sp, #84]
  411e84:	ldur	w8, [x29, #-68]
  411e88:	str	w8, [sp, #80]
  411e8c:	str	wzr, [sp, #76]
  411e90:	ldr	w0, [sp, #76]
  411e94:	bl	4041e0 <log_get_max_level_realm@plt>
  411e98:	ldr	w8, [sp, #84]
  411e9c:	and	w8, w8, #0x7
  411ea0:	cmp	w0, w8
  411ea4:	b.lt	411ed8 <operation_done+0x3e0>  // b.tstop
  411ea8:	ldr	w8, [sp, #76]
  411eac:	ldr	w9, [sp, #84]
  411eb0:	orr	w0, w9, w8, lsl #10
  411eb4:	ldr	w1, [sp, #80]
  411eb8:	ldr	x2, [sp, #64]
  411ebc:	mov	w3, #0x3f                  	// #63
  411ec0:	ldr	x4, [sp, #56]
  411ec4:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411ec8:	add	x5, x5, #0xee4
  411ecc:	bl	4041f0 <log_internal_realm@plt>
  411ed0:	str	w0, [sp, #20]
  411ed4:	b	411eec <operation_done+0x3f4>
  411ed8:	ldr	w0, [sp, #80]
  411edc:	bl	404200 <abs@plt>
  411ee0:	mov	w8, wzr
  411ee4:	subs	w8, w8, w0, uxtb
  411ee8:	str	w8, [sp, #20]
  411eec:	ldr	w8, [sp, #20]
  411ef0:	str	w8, [sp, #72]
  411ef4:	ldur	x0, [x29, #-64]
  411ef8:	bl	411f20 <operation_free>
  411efc:	stur	wzr, [x29, #-4]
  411f00:	mov	w8, #0x1                   	// #1
  411f04:	str	w8, [sp, #88]
  411f08:	sub	x0, x29, #0x38
  411f0c:	bl	404900 <sd_bus_error_free@plt>
  411f10:	ldur	w0, [x29, #-4]
  411f14:	ldp	x29, x30, [sp, #192]
  411f18:	add	sp, sp, #0xd0
  411f1c:	ret

0000000000411f20 <operation_free>:
  411f20:	sub	sp, sp, #0x40
  411f24:	stp	x29, x30, [sp, #48]
  411f28:	add	x29, sp, #0x30
  411f2c:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  411f30:	add	x8, x8, #0xd2a
  411f34:	add	x8, x8, #0x3
  411f38:	stur	x0, [x29, #-16]
  411f3c:	ldur	x9, [x29, #-16]
  411f40:	str	x8, [sp, #8]
  411f44:	cbnz	x9, 411f54 <operation_free+0x34>
  411f48:	mov	x8, xzr
  411f4c:	stur	x8, [x29, #-8]
  411f50:	b	4120fc <operation_free+0x1dc>
  411f54:	ldur	x8, [x29, #-16]
  411f58:	ldr	x0, [x8, #32]
  411f5c:	bl	404b90 <sd_event_source_unref@plt>
  411f60:	ldur	x8, [x29, #-16]
  411f64:	ldr	w9, [x8, #24]
  411f68:	mov	w0, w9
  411f6c:	bl	404130 <safe_close@plt>
  411f70:	ldur	x8, [x29, #-16]
  411f74:	ldr	w9, [x8, #28]
  411f78:	mov	w0, w9
  411f7c:	bl	404130 <safe_close@plt>
  411f80:	ldur	x8, [x29, #-16]
  411f84:	ldr	w9, [x8, #8]
  411f88:	cmp	w9, #0x1
  411f8c:	b.le	411f9c <operation_free+0x7c>
  411f90:	ldur	x8, [x29, #-16]
  411f94:	ldr	w0, [x8, #8]
  411f98:	bl	404ba0 <sigkill_wait@plt>
  411f9c:	ldur	x8, [x29, #-16]
  411fa0:	ldr	x0, [x8, #16]
  411fa4:	bl	404780 <sd_bus_message_unref@plt>
  411fa8:	ldur	x8, [x29, #-16]
  411fac:	ldr	x8, [x8]
  411fb0:	cbz	x8, 4120f0 <operation_free+0x1d0>
  411fb4:	ldur	x8, [x29, #-16]
  411fb8:	ldr	x8, [x8]
  411fbc:	add	x8, x8, #0x28
  411fc0:	str	x8, [sp, #24]
  411fc4:	ldur	x8, [x29, #-16]
  411fc8:	str	x8, [sp, #16]
  411fcc:	ldr	x8, [sp, #16]
  411fd0:	cmp	x8, #0x0
  411fd4:	cset	w9, ne  // ne = any
  411fd8:	mov	w10, #0x1                   	// #1
  411fdc:	eor	w9, w9, #0x1
  411fe0:	eor	w9, w9, w10
  411fe4:	eor	w9, w9, w10
  411fe8:	and	w9, w9, #0x1
  411fec:	mov	w0, w9
  411ff0:	sxtw	x8, w0
  411ff4:	cbz	x8, 41201c <operation_free+0xfc>
  411ff8:	mov	w8, wzr
  411ffc:	mov	w0, w8
  412000:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  412004:	add	x1, x1, #0xdb1
  412008:	ldr	x2, [sp, #8]
  41200c:	mov	w3, #0x7b                  	// #123
  412010:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  412014:	add	x4, x4, #0xddf
  412018:	bl	404150 <log_assert_failed_realm@plt>
  41201c:	ldr	x8, [sp, #16]
  412020:	ldr	x8, [x8, #48]
  412024:	cbz	x8, 41203c <operation_free+0x11c>
  412028:	ldr	x8, [sp, #16]
  41202c:	ldr	x8, [x8, #56]
  412030:	ldr	x9, [sp, #16]
  412034:	ldr	x9, [x9, #48]
  412038:	str	x8, [x9, #56]
  41203c:	ldr	x8, [sp, #16]
  412040:	ldr	x8, [x8, #56]
  412044:	cbz	x8, 412060 <operation_free+0x140>
  412048:	ldr	x8, [sp, #16]
  41204c:	ldr	x8, [x8, #48]
  412050:	ldr	x9, [sp, #16]
  412054:	ldr	x9, [x9, #56]
  412058:	str	x8, [x9, #48]
  41205c:	b	4120c8 <operation_free+0x1a8>
  412060:	ldr	x8, [sp, #24]
  412064:	ldr	x8, [x8]
  412068:	ldr	x9, [sp, #16]
  41206c:	cmp	x8, x9
  412070:	cset	w10, eq  // eq = none
  412074:	mov	w11, #0x1                   	// #1
  412078:	eor	w10, w10, #0x1
  41207c:	eor	w10, w10, w11
  412080:	eor	w10, w10, w11
  412084:	and	w10, w10, #0x1
  412088:	mov	w0, w10
  41208c:	sxtw	x8, w0
  412090:	cbz	x8, 4120b8 <operation_free+0x198>
  412094:	mov	w8, wzr
  412098:	mov	w0, w8
  41209c:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4120a0:	add	x1, x1, #0xe06
  4120a4:	ldr	x2, [sp, #8]
  4120a8:	mov	w3, #0x7b                  	// #123
  4120ac:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4120b0:	add	x4, x4, #0xddf
  4120b4:	bl	404150 <log_assert_failed_realm@plt>
  4120b8:	ldr	x8, [sp, #16]
  4120bc:	ldr	x8, [x8, #48]
  4120c0:	ldr	x9, [sp, #24]
  4120c4:	str	x8, [x9]
  4120c8:	ldr	x8, [sp, #16]
  4120cc:	mov	x9, xzr
  4120d0:	str	x9, [x8, #56]
  4120d4:	ldr	x8, [sp, #16]
  4120d8:	str	x9, [x8, #48]
  4120dc:	ldur	x8, [x29, #-16]
  4120e0:	ldr	x8, [x8]
  4120e4:	ldr	w9, [x8, #48]
  4120e8:	subs	w9, w9, #0x1
  4120ec:	str	w9, [x8, #48]
  4120f0:	ldur	x0, [x29, #-16]
  4120f4:	bl	41210c <mfree>
  4120f8:	stur	x0, [x29, #-8]
  4120fc:	ldur	x0, [x29, #-8]
  412100:	ldp	x29, x30, [sp, #48]
  412104:	add	sp, sp, #0x40
  412108:	ret

000000000041210c <mfree>:
  41210c:	sub	sp, sp, #0x20
  412110:	stp	x29, x30, [sp, #16]
  412114:	add	x29, sp, #0x10
  412118:	mov	x8, xzr
  41211c:	str	x0, [sp, #8]
  412120:	ldr	x0, [sp, #8]
  412124:	str	x8, [sp]
  412128:	bl	404140 <free@plt>
  41212c:	ldr	x0, [sp]
  412130:	ldp	x29, x30, [sp, #16]
  412134:	add	sp, sp, #0x20
  412138:	ret

000000000041213c <main>:
  41213c:	sub	sp, sp, #0x30
  412140:	stp	x29, x30, [sp, #32]
  412144:	add	x29, sp, #0x20
  412148:	mov	w8, wzr
  41214c:	mov	w9, #0x1                   	// #1
  412150:	stur	wzr, [x29, #-4]
  412154:	stur	w0, [x29, #-8]
  412158:	str	x1, [sp, #16]
  41215c:	ldur	w0, [x29, #-8]
  412160:	ldr	x1, [sp, #16]
  412164:	str	w8, [sp, #8]
  412168:	str	w9, [sp, #4]
  41216c:	bl	4121b4 <save_argc_argv>
  412170:	ldur	w0, [x29, #-8]
  412174:	ldr	x1, [sp, #16]
  412178:	bl	4121e8 <run>
  41217c:	str	w0, [sp, #12]
  412180:	bl	404bb0 <ask_password_agent_close@plt>
  412184:	bl	404bc0 <polkit_agent_close@plt>
  412188:	bl	404bd0 <pager_close@plt>
  41218c:	bl	404be0 <mac_selinux_finish@plt>
  412190:	bl	41261c <static_destruct>
  412194:	ldr	w8, [sp, #12]
  412198:	cmp	w8, #0x0
  41219c:	ldr	w8, [sp, #4]
  4121a0:	ldr	w9, [sp, #8]
  4121a4:	csel	w0, w8, w9, lt  // lt = tstop
  4121a8:	ldp	x29, x30, [sp, #32]
  4121ac:	add	sp, sp, #0x30
  4121b0:	ret

00000000004121b4 <save_argc_argv>:
  4121b4:	sub	sp, sp, #0x10
  4121b8:	adrp	x8, 430000 <__TMC_END__>
  4121bc:	add	x8, x8, #0x7d8
  4121c0:	adrp	x9, 430000 <__TMC_END__>
  4121c4:	add	x9, x9, #0x7e0
  4121c8:	str	w0, [sp, #12]
  4121cc:	str	x1, [sp]
  4121d0:	ldr	w10, [sp, #12]
  4121d4:	str	w10, [x8]
  4121d8:	ldr	x8, [sp]
  4121dc:	str	x8, [x9]
  4121e0:	add	sp, sp, #0x10
  4121e4:	ret

00000000004121e8 <run>:
  4121e8:	sub	sp, sp, #0xd0
  4121ec:	stp	x29, x30, [sp, #192]
  4121f0:	add	x29, sp, #0xc0
  4121f4:	mov	x8, xzr
  4121f8:	mov	w9, #0x12                  	// #18
  4121fc:	adrp	x10, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  412200:	add	x10, x10, #0xf03
  412204:	add	x10, x10, #0x3
  412208:	adrp	x11, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  41220c:	add	x11, x11, #0xf1f
  412210:	stur	w0, [x29, #-8]
  412214:	stur	x1, [x29, #-16]
  412218:	stur	x8, [x29, #-24]
  41221c:	str	w9, [sp, #76]
  412220:	str	x10, [sp, #64]
  412224:	str	x11, [sp, #56]
  412228:	bl	404bf0 <log_setup_service@plt>
  41222c:	ldr	w0, [sp, #76]
  412230:	bl	404c00 <umask@plt>
  412234:	ldur	w9, [x29, #-8]
  412238:	cmp	w9, #0x1
  41223c:	b.eq	4122d0 <run+0xe8>  // b.none
  412240:	mov	w8, #0x3                   	// #3
  412244:	stur	w8, [x29, #-32]
  412248:	mov	w8, #0x16                  	// #22
  41224c:	movk	w8, #0x4000, lsl #16
  412250:	stur	w8, [x29, #-36]
  412254:	stur	wzr, [x29, #-40]
  412258:	ldur	w0, [x29, #-40]
  41225c:	bl	4041e0 <log_get_max_level_realm@plt>
  412260:	ldur	w8, [x29, #-32]
  412264:	and	w8, w8, #0x7
  412268:	cmp	w0, w8
  41226c:	b.lt	4122a0 <run+0xb8>  // b.tstop
  412270:	ldur	w8, [x29, #-40]
  412274:	ldur	w9, [x29, #-32]
  412278:	orr	w0, w9, w8, lsl #10
  41227c:	ldur	w1, [x29, #-36]
  412280:	ldr	x2, [sp, #64]
  412284:	mov	w3, #0x8a                  	// #138
  412288:	ldr	x4, [sp, #56]
  41228c:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  412290:	add	x5, x5, #0xf23
  412294:	bl	4041f0 <log_internal_realm@plt>
  412298:	str	w0, [sp, #52]
  41229c:	b	4122b4 <run+0xcc>
  4122a0:	ldur	w0, [x29, #-36]
  4122a4:	bl	404200 <abs@plt>
  4122a8:	mov	w8, wzr
  4122ac:	subs	w8, w8, w0, uxtb
  4122b0:	str	w8, [sp, #52]
  4122b4:	ldr	w8, [sp, #52]
  4122b8:	stur	w8, [x29, #-44]
  4122bc:	ldur	w8, [x29, #-44]
  4122c0:	stur	w8, [x29, #-4]
  4122c4:	mov	w8, #0x1                   	// #1
  4122c8:	stur	w8, [x29, #-48]
  4122cc:	b	412604 <run+0x41c>
  4122d0:	mov	w8, wzr
  4122d4:	mov	w0, w8
  4122d8:	mov	x9, xzr
  4122dc:	mov	x1, x9
  4122e0:	mov	w2, #0x11                  	// #17
  4122e4:	mov	w3, #0xf                   	// #15
  4122e8:	mov	w4, #0x2                   	// #2
  4122ec:	mov	w5, #0xffffffff            	// #-1
  4122f0:	bl	404210 <sigprocmask_many@plt>
  4122f4:	cmp	w0, #0x0
  4122f8:	cset	w8, ge  // ge = tcont
  4122fc:	mov	w10, #0x1                   	// #1
  412300:	eor	w8, w8, #0x1
  412304:	eor	w8, w8, w10
  412308:	eor	w8, w8, w10
  41230c:	and	w8, w8, #0x1
  412310:	mov	w1, w8
  412314:	sxtw	x9, w1
  412318:	cbz	x9, 412340 <run+0x158>
  41231c:	mov	w8, wzr
  412320:	mov	w0, w8
  412324:	adrp	x1, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  412328:	add	x1, x1, #0xf44
  41232c:	ldr	x2, [sp, #64]
  412330:	mov	w3, #0x8c                  	// #140
  412334:	adrp	x4, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  412338:	add	x4, x4, #0xf89
  41233c:	bl	404150 <log_assert_failed_realm@plt>
  412340:	sub	x0, x29, #0x18
  412344:	bl	4126d0 <manager_new>
  412348:	stur	w0, [x29, #-28]
  41234c:	ldur	w8, [x29, #-28]
  412350:	cmp	w8, #0x0
  412354:	cset	w8, ge  // ge = tcont
  412358:	tbnz	w8, #0, 4123e8 <run+0x200>
  41235c:	mov	w8, #0x3                   	// #3
  412360:	stur	w8, [x29, #-52]
  412364:	ldur	w8, [x29, #-28]
  412368:	stur	w8, [x29, #-56]
  41236c:	stur	wzr, [x29, #-60]
  412370:	ldur	w0, [x29, #-60]
  412374:	bl	4041e0 <log_get_max_level_realm@plt>
  412378:	ldur	w8, [x29, #-52]
  41237c:	and	w8, w8, #0x7
  412380:	cmp	w0, w8
  412384:	b.lt	4123b8 <run+0x1d0>  // b.tstop
  412388:	ldur	w8, [x29, #-60]
  41238c:	ldur	w9, [x29, #-52]
  412390:	orr	w0, w9, w8, lsl #10
  412394:	ldur	w1, [x29, #-56]
  412398:	ldr	x2, [sp, #64]
  41239c:	mov	w3, #0x90                  	// #144
  4123a0:	ldr	x4, [sp, #56]
  4123a4:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4123a8:	add	x5, x5, #0xf9f
  4123ac:	bl	4041f0 <log_internal_realm@plt>
  4123b0:	str	w0, [sp, #48]
  4123b4:	b	4123cc <run+0x1e4>
  4123b8:	ldur	w0, [x29, #-56]
  4123bc:	bl	404200 <abs@plt>
  4123c0:	mov	w8, wzr
  4123c4:	subs	w8, w8, w0, uxtb
  4123c8:	str	w8, [sp, #48]
  4123cc:	ldr	w8, [sp, #48]
  4123d0:	stur	w8, [x29, #-64]
  4123d4:	ldur	w8, [x29, #-64]
  4123d8:	stur	w8, [x29, #-4]
  4123dc:	mov	w8, #0x1                   	// #1
  4123e0:	stur	w8, [x29, #-48]
  4123e4:	b	412604 <run+0x41c>
  4123e8:	ldur	x0, [x29, #-24]
  4123ec:	bl	412894 <manager_startup>
  4123f0:	stur	w0, [x29, #-28]
  4123f4:	ldur	w8, [x29, #-28]
  4123f8:	cmp	w8, #0x0
  4123fc:	cset	w8, ge  // ge = tcont
  412400:	tbnz	w8, #0, 412490 <run+0x2a8>
  412404:	mov	w8, #0x3                   	// #3
  412408:	stur	w8, [x29, #-68]
  41240c:	ldur	w8, [x29, #-28]
  412410:	stur	w8, [x29, #-72]
  412414:	stur	wzr, [x29, #-76]
  412418:	ldur	w0, [x29, #-76]
  41241c:	bl	4041e0 <log_get_max_level_realm@plt>
  412420:	ldur	w8, [x29, #-68]
  412424:	and	w8, w8, #0x7
  412428:	cmp	w0, w8
  41242c:	b.lt	412460 <run+0x278>  // b.tstop
  412430:	ldur	w8, [x29, #-76]
  412434:	ldur	w9, [x29, #-68]
  412438:	orr	w0, w9, w8, lsl #10
  41243c:	ldur	w1, [x29, #-72]
  412440:	ldr	x2, [sp, #64]
  412444:	mov	w3, #0x94                  	// #148
  412448:	ldr	x4, [sp, #56]
  41244c:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  412450:	add	x5, x5, #0xfc5
  412454:	bl	4041f0 <log_internal_realm@plt>
  412458:	str	w0, [sp, #44]
  41245c:	b	412474 <run+0x28c>
  412460:	ldur	w0, [x29, #-72]
  412464:	bl	404200 <abs@plt>
  412468:	mov	w8, wzr
  41246c:	subs	w8, w8, w0, uxtb
  412470:	str	w8, [sp, #44]
  412474:	ldr	w8, [sp, #44]
  412478:	stur	w8, [x29, #-80]
  41247c:	ldur	w8, [x29, #-80]
  412480:	stur	w8, [x29, #-4]
  412484:	mov	w8, #0x1                   	// #1
  412488:	stur	w8, [x29, #-48]
  41248c:	b	412604 <run+0x41c>
  412490:	mov	w8, #0x7                   	// #7
  412494:	stur	w8, [x29, #-84]
  412498:	stur	wzr, [x29, #-88]
  41249c:	stur	wzr, [x29, #-92]
  4124a0:	ldur	w0, [x29, #-92]
  4124a4:	bl	4041e0 <log_get_max_level_realm@plt>
  4124a8:	ldur	w8, [x29, #-84]
  4124ac:	and	w8, w8, #0x7
  4124b0:	cmp	w0, w8
  4124b4:	b.lt	412508 <run+0x320>  // b.tstop
  4124b8:	ldur	w8, [x29, #-92]
  4124bc:	ldur	w9, [x29, #-84]
  4124c0:	orr	w0, w9, w8, lsl #10
  4124c4:	ldur	w1, [x29, #-88]
  4124c8:	str	w0, [sp, #40]
  4124cc:	str	w1, [sp, #36]
  4124d0:	bl	404c10 <getpid_cached@plt>
  4124d4:	ldr	w8, [sp, #40]
  4124d8:	str	w0, [sp, #32]
  4124dc:	mov	w0, w8
  4124e0:	ldr	w1, [sp, #36]
  4124e4:	ldr	x2, [sp, #64]
  4124e8:	mov	w3, #0x96                  	// #150
  4124ec:	ldr	x4, [sp, #56]
  4124f0:	adrp	x5, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4124f4:	add	x5, x5, #0xfe9
  4124f8:	ldr	w6, [sp, #32]
  4124fc:	bl	4041f0 <log_internal_realm@plt>
  412500:	str	w0, [sp, #28]
  412504:	b	41251c <run+0x334>
  412508:	ldur	w0, [x29, #-88]
  41250c:	bl	404200 <abs@plt>
  412510:	mov	w8, wzr
  412514:	subs	w8, w8, w0, uxtb
  412518:	str	w8, [sp, #28]
  41251c:	ldr	w8, [sp, #28]
  412520:	str	w8, [sp, #96]
  412524:	mov	w8, wzr
  412528:	mov	w0, w8
  41252c:	adrp	x1, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412530:	add	x1, x1, #0xd
  412534:	str	w8, [sp, #24]
  412538:	bl	404c20 <sd_notify@plt>
  41253c:	ldur	x9, [x29, #-24]
  412540:	mov	x0, x9
  412544:	bl	412940 <manager_run>
  412548:	stur	w0, [x29, #-28]
  41254c:	ldr	w0, [sp, #24]
  412550:	adrp	x1, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412554:	add	x1, x1, #0x33
  412558:	bl	404c20 <sd_notify@plt>
  41255c:	mov	w8, #0x7                   	// #7
  412560:	str	w8, [sp, #92]
  412564:	str	wzr, [sp, #88]
  412568:	str	wzr, [sp, #84]
  41256c:	ldr	w8, [sp, #84]
  412570:	mov	w0, w8
  412574:	bl	4041e0 <log_get_max_level_realm@plt>
  412578:	ldr	w8, [sp, #92]
  41257c:	and	w8, w8, #0x7
  412580:	cmp	w0, w8
  412584:	b.lt	4125d8 <run+0x3f0>  // b.tstop
  412588:	ldr	w8, [sp, #84]
  41258c:	ldr	w9, [sp, #92]
  412590:	orr	w0, w9, w8, lsl #10
  412594:	ldr	w1, [sp, #88]
  412598:	str	w0, [sp, #20]
  41259c:	str	w1, [sp, #16]
  4125a0:	bl	404c10 <getpid_cached@plt>
  4125a4:	ldr	w8, [sp, #20]
  4125a8:	str	w0, [sp, #12]
  4125ac:	mov	w0, w8
  4125b0:	ldr	w1, [sp, #16]
  4125b4:	ldr	x2, [sp, #64]
  4125b8:	mov	w3, #0xa0                  	// #160
  4125bc:	ldr	x4, [sp, #56]
  4125c0:	adrp	x5, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  4125c4:	add	x5, x5, #0x56
  4125c8:	ldr	w6, [sp, #12]
  4125cc:	bl	4041f0 <log_internal_realm@plt>
  4125d0:	str	w0, [sp, #8]
  4125d4:	b	4125ec <run+0x404>
  4125d8:	ldr	w0, [sp, #88]
  4125dc:	bl	404200 <abs@plt>
  4125e0:	mov	w8, wzr
  4125e4:	subs	w8, w8, w0, uxtb
  4125e8:	str	w8, [sp, #8]
  4125ec:	ldr	w8, [sp, #8]
  4125f0:	str	w8, [sp, #80]
  4125f4:	ldur	w8, [x29, #-28]
  4125f8:	stur	w8, [x29, #-4]
  4125fc:	mov	w8, #0x1                   	// #1
  412600:	stur	w8, [x29, #-48]
  412604:	sub	x0, x29, #0x18
  412608:	bl	41269c <manager_unrefp>
  41260c:	ldur	w0, [x29, #-4]
  412610:	ldp	x29, x30, [sp, #192]
  412614:	add	sp, sp, #0xd0
  412618:	ret

000000000041261c <static_destruct>:
  41261c:	sub	sp, sp, #0x20
  412620:	stp	x29, x30, [sp, #16]
  412624:	add	x29, sp, #0x10
  412628:	adrp	x8, 42f000 <__FRAME_END__+0x18438>
  41262c:	ldr	x8, [x8, #2400]
  412630:	str	x8, [sp]
  412634:	cbnz	x8, 41263c <static_destruct+0x20>
  412638:	b	412690 <static_destruct+0x74>
  41263c:	ldr	x0, [sp]
  412640:	mov	x1, #0x8                   	// #8
  412644:	bl	4130b4 <ALIGN_TO>
  412648:	str	x0, [sp, #8]
  41264c:	ldr	x8, [sp, #8]
  412650:	adrp	x9, 42f000 <__FRAME_END__+0x18438>
  412654:	ldr	x9, [x9, #2408]
  412658:	cmp	x8, x9
  41265c:	b.cs	412690 <static_destruct+0x74>  // b.hs, b.nlast
  412660:	ldr	x8, [sp, #8]
  412664:	ldr	x8, [x8, #8]
  412668:	ldr	x9, [sp, #8]
  41266c:	ldr	x0, [x9]
  412670:	blr	x8
  412674:	ldr	x8, [sp, #8]
  412678:	add	x8, x8, #0x10
  41267c:	mov	x0, x8
  412680:	mov	x1, #0x8                   	// #8
  412684:	bl	4130b4 <ALIGN_TO>
  412688:	str	x0, [sp, #8]
  41268c:	b	41264c <static_destruct+0x30>
  412690:	ldp	x29, x30, [sp, #16]
  412694:	add	sp, sp, #0x20
  412698:	ret

000000000041269c <manager_unrefp>:
  41269c:	sub	sp, sp, #0x20
  4126a0:	stp	x29, x30, [sp, #16]
  4126a4:	add	x29, sp, #0x10
  4126a8:	str	x0, [sp, #8]
  4126ac:	ldr	x8, [sp, #8]
  4126b0:	ldr	x8, [x8]
  4126b4:	cbz	x8, 4126c4 <manager_unrefp+0x28>
  4126b8:	ldr	x8, [sp, #8]
  4126bc:	ldr	x0, [x8]
  4126c0:	bl	4129ec <manager_unref>
  4126c4:	ldp	x29, x30, [sp, #16]
  4126c8:	add	sp, sp, #0x20
  4126cc:	ret

00000000004126d0 <manager_new>:
  4126d0:	sub	sp, sp, #0x50
  4126d4:	stp	x29, x30, [sp, #64]
  4126d8:	add	x29, sp, #0x40
  4126dc:	mov	x8, xzr
  4126e0:	adrp	x9, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4126e4:	add	x9, x9, #0xf03
  4126e8:	add	x2, x9, #0x3
  4126ec:	stur	x0, [x29, #-16]
  4126f0:	stur	x8, [x29, #-24]
  4126f4:	str	x2, [sp, #8]
  4126f8:	ldur	x8, [x29, #-16]
  4126fc:	cmp	x8, #0x0
  412700:	cset	w9, ne  // ne = any
  412704:	mov	w10, #0x1                   	// #1
  412708:	eor	w9, w9, #0x1
  41270c:	eor	w9, w9, w10
  412710:	eor	w9, w9, w10
  412714:	and	w9, w9, #0x1
  412718:	mov	w0, w9
  41271c:	sxtw	x8, w0
  412720:	cbz	x8, 412748 <manager_new+0x78>
  412724:	mov	w8, wzr
  412728:	mov	w0, w8
  41272c:	adrp	x1, 413000 <manager_connect_bus+0x4e4>
  412730:	add	x1, x1, #0xabc
  412734:	ldr	x2, [sp, #8]
  412738:	mov	w3, #0x1a                  	// #26
  41273c:	adrp	x4, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412740:	add	x4, x4, #0x9c
  412744:	bl	404150 <log_assert_failed_realm@plt>
  412748:	mov	x0, #0x1                   	// #1
  41274c:	mov	x1, #0x38                  	// #56
  412750:	bl	404720 <calloc@plt>
  412754:	stur	x0, [x29, #-24]
  412758:	ldur	x8, [x29, #-24]
  41275c:	cbnz	x8, 412774 <manager_new+0xa4>
  412760:	mov	w8, #0xfffffff4            	// #-12
  412764:	stur	w8, [x29, #-4]
  412768:	mov	w8, #0x1                   	// #1
  41276c:	str	w8, [sp, #32]
  412770:	b	41287c <manager_new+0x1ac>
  412774:	ldur	x0, [x29, #-24]
  412778:	bl	404c30 <sd_event_default@plt>
  41277c:	stur	w0, [x29, #-28]
  412780:	ldur	w8, [x29, #-28]
  412784:	cmp	w8, #0x0
  412788:	cset	w8, ge  // ge = tcont
  41278c:	tbnz	w8, #0, 4127a4 <manager_new+0xd4>
  412790:	ldur	w8, [x29, #-28]
  412794:	stur	w8, [x29, #-4]
  412798:	mov	w8, #0x1                   	// #1
  41279c:	str	w8, [sp, #32]
  4127a0:	b	41287c <manager_new+0x1ac>
  4127a4:	ldur	x8, [x29, #-24]
  4127a8:	ldr	x0, [x8]
  4127ac:	mov	x8, xzr
  4127b0:	mov	x1, x8
  4127b4:	mov	w2, #0x2                   	// #2
  4127b8:	mov	x3, x8
  4127bc:	mov	x4, x8
  4127c0:	bl	404c40 <sd_event_add_signal@plt>
  4127c4:	stur	w0, [x29, #-28]
  4127c8:	ldur	w9, [x29, #-28]
  4127cc:	cmp	w9, #0x0
  4127d0:	cset	w9, ge  // ge = tcont
  4127d4:	tbnz	w9, #0, 4127ec <manager_new+0x11c>
  4127d8:	ldur	w8, [x29, #-28]
  4127dc:	stur	w8, [x29, #-4]
  4127e0:	mov	w8, #0x1                   	// #1
  4127e4:	str	w8, [sp, #32]
  4127e8:	b	41287c <manager_new+0x1ac>
  4127ec:	ldur	x8, [x29, #-24]
  4127f0:	ldr	x0, [x8]
  4127f4:	mov	x8, xzr
  4127f8:	mov	x1, x8
  4127fc:	mov	w2, #0xf                   	// #15
  412800:	mov	x3, x8
  412804:	mov	x4, x8
  412808:	bl	404c40 <sd_event_add_signal@plt>
  41280c:	stur	w0, [x29, #-28]
  412810:	ldur	w9, [x29, #-28]
  412814:	cmp	w9, #0x0
  412818:	cset	w9, ge  // ge = tcont
  41281c:	tbnz	w9, #0, 412834 <manager_new+0x164>
  412820:	ldur	w8, [x29, #-28]
  412824:	stur	w8, [x29, #-4]
  412828:	mov	w8, #0x1                   	// #1
  41282c:	str	w8, [sp, #32]
  412830:	b	41287c <manager_new+0x1ac>
  412834:	ldur	x8, [x29, #-24]
  412838:	ldr	x0, [x8]
  41283c:	mov	w9, #0x1                   	// #1
  412840:	mov	w1, w9
  412844:	str	w9, [sp, #4]
  412848:	bl	404c50 <sd_event_set_watchdog@plt>
  41284c:	ldur	x8, [x29, #-24]
  412850:	str	x8, [sp, #24]
  412854:	mov	x8, xzr
  412858:	stur	x8, [x29, #-24]
  41285c:	ldr	x8, [sp, #24]
  412860:	str	x8, [sp, #16]
  412864:	ldr	x8, [sp, #16]
  412868:	ldur	x10, [x29, #-16]
  41286c:	str	x8, [x10]
  412870:	stur	wzr, [x29, #-4]
  412874:	ldr	w9, [sp, #4]
  412878:	str	w9, [sp, #32]
  41287c:	sub	x0, x29, #0x18
  412880:	bl	41269c <manager_unrefp>
  412884:	ldur	w0, [x29, #-4]
  412888:	ldp	x29, x30, [sp, #64]
  41288c:	add	sp, sp, #0x50
  412890:	ret

0000000000412894 <manager_startup>:
  412894:	sub	sp, sp, #0x30
  412898:	stp	x29, x30, [sp, #32]
  41289c:	add	x29, sp, #0x20
  4128a0:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4128a4:	add	x8, x8, #0xf03
  4128a8:	add	x2, x8, #0x3
  4128ac:	str	x0, [sp, #16]
  4128b0:	str	x2, [sp]
  4128b4:	ldr	x8, [sp, #16]
  4128b8:	cmp	x8, #0x0
  4128bc:	cset	w9, ne  // ne = any
  4128c0:	mov	w10, #0x1                   	// #1
  4128c4:	eor	w9, w9, #0x1
  4128c8:	eor	w9, w9, w10
  4128cc:	eor	w9, w9, w10
  4128d0:	and	w9, w9, #0x1
  4128d4:	mov	w0, w9
  4128d8:	sxtw	x8, w0
  4128dc:	cbz	x8, 412904 <manager_startup+0x70>
  4128e0:	mov	w8, wzr
  4128e4:	mov	w0, w8
  4128e8:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  4128ec:	add	x1, x1, #0x420
  4128f0:	ldr	x2, [sp]
  4128f4:	mov	w3, #0x67                  	// #103
  4128f8:	adrp	x4, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  4128fc:	add	x4, x4, #0xb8
  412900:	bl	404150 <log_assert_failed_realm@plt>
  412904:	ldr	x0, [sp, #16]
  412908:	bl	412b1c <manager_connect_bus>
  41290c:	str	w0, [sp, #12]
  412910:	ldr	w8, [sp, #12]
  412914:	cmp	w8, #0x0
  412918:	cset	w8, ge  // ge = tcont
  41291c:	tbnz	w8, #0, 41292c <manager_startup+0x98>
  412920:	ldr	w8, [sp, #12]
  412924:	stur	w8, [x29, #-4]
  412928:	b	412930 <manager_startup+0x9c>
  41292c:	stur	wzr, [x29, #-4]
  412930:	ldur	w0, [x29, #-4]
  412934:	ldp	x29, x30, [sp, #32]
  412938:	add	sp, sp, #0x30
  41293c:	ret

0000000000412940 <manager_run>:
  412940:	sub	sp, sp, #0x20
  412944:	stp	x29, x30, [sp, #16]
  412948:	add	x29, sp, #0x10
  41294c:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  412950:	add	x8, x8, #0xf03
  412954:	add	x2, x8, #0x3
  412958:	str	x0, [sp, #8]
  41295c:	str	x2, [sp]
  412960:	ldr	x8, [sp, #8]
  412964:	cmp	x8, #0x0
  412968:	cset	w9, ne  // ne = any
  41296c:	mov	w10, #0x1                   	// #1
  412970:	eor	w9, w9, #0x1
  412974:	eor	w9, w9, w10
  412978:	eor	w9, w9, w10
  41297c:	and	w9, w9, #0x1
  412980:	mov	w0, w9
  412984:	sxtw	x8, w0
  412988:	cbz	x8, 4129b0 <manager_run+0x70>
  41298c:	mov	w8, wzr
  412990:	mov	w0, w8
  412994:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  412998:	add	x1, x1, #0x420
  41299c:	ldr	x2, [sp]
  4129a0:	mov	w3, #0x77                  	// #119
  4129a4:	adrp	x4, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  4129a8:	add	x4, x4, #0x264
  4129ac:	bl	404150 <log_assert_failed_realm@plt>
  4129b0:	ldr	x8, [sp, #8]
  4129b4:	ldr	x0, [x8]
  4129b8:	ldr	x8, [sp, #8]
  4129bc:	ldr	x1, [x8, #8]
  4129c0:	ldr	x5, [sp, #8]
  4129c4:	adrp	x2, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  4129c8:	add	x2, x2, #0x208
  4129cc:	mov	x3, #0xc380                	// #50048
  4129d0:	movk	x3, #0x1c9, lsl #16
  4129d4:	adrp	x4, 413000 <manager_connect_bus+0x4e4>
  4129d8:	add	x4, x4, #0x84
  4129dc:	bl	404c60 <bus_event_loop_with_idle@plt>
  4129e0:	ldp	x29, x30, [sp, #16]
  4129e4:	add	sp, sp, #0x20
  4129e8:	ret

00000000004129ec <manager_unref>:
  4129ec:	sub	sp, sp, #0x20
  4129f0:	stp	x29, x30, [sp, #16]
  4129f4:	add	x29, sp, #0x10
  4129f8:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  4129fc:	add	x8, x8, #0xf03
  412a00:	add	x2, x8, #0x3
  412a04:	str	x0, [sp, #8]
  412a08:	str	x2, [sp]
  412a0c:	ldr	x8, [sp, #8]
  412a10:	cmp	x8, #0x0
  412a14:	cset	w9, ne  // ne = any
  412a18:	mov	w10, #0x1                   	// #1
  412a1c:	eor	w9, w9, #0x1
  412a20:	eor	w9, w9, w10
  412a24:	eor	w9, w9, w10
  412a28:	and	w9, w9, #0x1
  412a2c:	mov	w0, w9
  412a30:	sxtw	x8, w0
  412a34:	cbz	x8, 412a5c <manager_unref+0x70>
  412a38:	mov	w8, wzr
  412a3c:	mov	w0, w8
  412a40:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  412a44:	add	x1, x1, #0x420
  412a48:	ldr	x2, [sp]
  412a4c:	mov	w3, #0x33                  	// #51
  412a50:	adrp	x4, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412a54:	add	x4, x4, #0x7a
  412a58:	bl	404150 <log_assert_failed_realm@plt>
  412a5c:	ldr	x8, [sp, #8]
  412a60:	ldr	x0, [x8, #24]
  412a64:	bl	412abc <hashmap_free>
  412a68:	ldr	x8, [sp, #8]
  412a6c:	ldr	x8, [x8, #32]
  412a70:	mov	x0, x8
  412a74:	bl	404b90 <sd_event_source_unref@plt>
  412a78:	ldr	x8, [sp, #8]
  412a7c:	ldr	x8, [x8, #16]
  412a80:	mov	x0, x8
  412a84:	bl	404c70 <bus_verify_polkit_async_registry_free@plt>
  412a88:	ldr	x8, [sp, #8]
  412a8c:	ldr	x0, [x8, #8]
  412a90:	bl	404c80 <sd_bus_flush_close_unref@plt>
  412a94:	ldr	x8, [sp, #8]
  412a98:	ldr	x8, [x8]
  412a9c:	mov	x0, x8
  412aa0:	bl	404c90 <sd_event_unref@plt>
  412aa4:	ldr	x8, [sp, #8]
  412aa8:	mov	x0, x8
  412aac:	bl	412aec <mfree>
  412ab0:	ldp	x29, x30, [sp, #16]
  412ab4:	add	sp, sp, #0x20
  412ab8:	ret

0000000000412abc <hashmap_free>:
  412abc:	sub	sp, sp, #0x20
  412ac0:	stp	x29, x30, [sp, #16]
  412ac4:	add	x29, sp, #0x10
  412ac8:	mov	x8, xzr
  412acc:	str	x0, [sp, #8]
  412ad0:	ldr	x0, [sp, #8]
  412ad4:	mov	x1, x8
  412ad8:	mov	x2, x8
  412adc:	bl	404770 <internal_hashmap_free@plt>
  412ae0:	ldp	x29, x30, [sp, #16]
  412ae4:	add	sp, sp, #0x20
  412ae8:	ret

0000000000412aec <mfree>:
  412aec:	sub	sp, sp, #0x20
  412af0:	stp	x29, x30, [sp, #16]
  412af4:	add	x29, sp, #0x10
  412af8:	mov	x8, xzr
  412afc:	str	x0, [sp, #8]
  412b00:	ldr	x0, [sp, #8]
  412b04:	str	x8, [sp]
  412b08:	bl	404140 <free@plt>
  412b0c:	ldr	x0, [sp]
  412b10:	ldp	x29, x30, [sp, #16]
  412b14:	add	sp, sp, #0x20
  412b18:	ret

0000000000412b1c <manager_connect_bus>:
  412b1c:	sub	sp, sp, #0xb0
  412b20:	stp	x29, x30, [sp, #160]
  412b24:	add	x29, sp, #0xa0
  412b28:	adrp	x8, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  412b2c:	add	x8, x8, #0xf03
  412b30:	add	x8, x8, #0x3
  412b34:	adrp	x9, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412b38:	add	x9, x9, #0x102
  412b3c:	stur	x0, [x29, #-16]
  412b40:	str	x8, [sp, #32]
  412b44:	str	x9, [sp, #24]
  412b48:	ldur	x8, [x29, #-16]
  412b4c:	cmp	x8, #0x0
  412b50:	cset	w9, ne  // ne = any
  412b54:	mov	w10, #0x1                   	// #1
  412b58:	eor	w9, w9, #0x1
  412b5c:	eor	w9, w9, w10
  412b60:	eor	w9, w9, w10
  412b64:	and	w9, w9, #0x1
  412b68:	mov	w0, w9
  412b6c:	sxtw	x8, w0
  412b70:	cbz	x8, 412b98 <manager_connect_bus+0x7c>
  412b74:	mov	w8, wzr
  412b78:	mov	w0, w8
  412b7c:	adrp	x1, 414000 <portable_get_state_internal.__assert_in_set.133+0xb70>
  412b80:	add	x1, x1, #0x420
  412b84:	ldr	x2, [sp, #32]
  412b88:	mov	w3, #0x44                  	// #68
  412b8c:	adrp	x4, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412b90:	add	x4, x4, #0xd7
  412b94:	bl	404150 <log_assert_failed_realm@plt>
  412b98:	ldur	x8, [x29, #-16]
  412b9c:	ldr	x8, [x8, #8]
  412ba0:	cmp	x8, #0x0
  412ba4:	cset	w9, ne  // ne = any
  412ba8:	mov	w10, #0x1                   	// #1
  412bac:	eor	w9, w9, #0x1
  412bb0:	eor	w9, w9, w10
  412bb4:	eor	w9, w9, w10
  412bb8:	eor	w9, w9, w10
  412bbc:	and	w9, w9, #0x1
  412bc0:	mov	w0, w9
  412bc4:	sxtw	x8, w0
  412bc8:	cbz	x8, 412bf0 <manager_connect_bus+0xd4>
  412bcc:	mov	w8, wzr
  412bd0:	mov	w0, w8
  412bd4:	adrp	x1, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412bd8:	add	x1, x1, #0xfa
  412bdc:	ldr	x2, [sp, #32]
  412be0:	mov	w3, #0x45                  	// #69
  412be4:	adrp	x4, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412be8:	add	x4, x4, #0xd7
  412bec:	bl	404150 <log_assert_failed_realm@plt>
  412bf0:	ldur	x8, [x29, #-16]
  412bf4:	add	x0, x8, #0x8
  412bf8:	bl	404ca0 <sd_bus_default_system@plt>
  412bfc:	stur	w0, [x29, #-20]
  412c00:	ldur	w9, [x29, #-20]
  412c04:	cmp	w9, #0x0
  412c08:	cset	w9, ge  // ge = tcont
  412c0c:	tbnz	w9, #0, 412c94 <manager_connect_bus+0x178>
  412c10:	mov	w8, #0x3                   	// #3
  412c14:	stur	w8, [x29, #-24]
  412c18:	ldur	w8, [x29, #-20]
  412c1c:	stur	w8, [x29, #-28]
  412c20:	stur	wzr, [x29, #-32]
  412c24:	ldur	w0, [x29, #-32]
  412c28:	bl	4041e0 <log_get_max_level_realm@plt>
  412c2c:	ldur	w8, [x29, #-24]
  412c30:	and	w8, w8, #0x7
  412c34:	cmp	w0, w8
  412c38:	b.lt	412c6c <manager_connect_bus+0x150>  // b.tstop
  412c3c:	ldur	w8, [x29, #-32]
  412c40:	ldur	w9, [x29, #-24]
  412c44:	orr	w0, w9, w8, lsl #10
  412c48:	ldur	w1, [x29, #-28]
  412c4c:	ldr	x2, [sp, #32]
  412c50:	mov	w3, #0x49                  	// #73
  412c54:	ldr	x4, [sp, #24]
  412c58:	adrp	x5, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412c5c:	add	x5, x5, #0x116
  412c60:	bl	4041f0 <log_internal_realm@plt>
  412c64:	str	w0, [sp, #20]
  412c68:	b	412c80 <manager_connect_bus+0x164>
  412c6c:	ldur	w0, [x29, #-28]
  412c70:	bl	404200 <abs@plt>
  412c74:	mov	w8, wzr
  412c78:	subs	w8, w8, w0, uxtb
  412c7c:	str	w8, [sp, #20]
  412c80:	ldr	w8, [sp, #20]
  412c84:	stur	w8, [x29, #-36]
  412c88:	ldur	w8, [x29, #-36]
  412c8c:	stur	w8, [x29, #-4]
  412c90:	b	413074 <manager_connect_bus+0x558>
  412c94:	ldur	x8, [x29, #-16]
  412c98:	ldr	x0, [x8, #8]
  412c9c:	ldur	x5, [x29, #-16]
  412ca0:	mov	x8, xzr
  412ca4:	mov	x1, x8
  412ca8:	adrp	x2, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412cac:	add	x2, x2, #0x13a
  412cb0:	adrp	x3, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412cb4:	add	x3, x3, #0x155
  412cb8:	adrp	x4, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412cbc:	add	x4, x4, #0x298
  412cc0:	bl	404cb0 <sd_bus_add_object_vtable@plt>
  412cc4:	stur	w0, [x29, #-20]
  412cc8:	ldur	w9, [x29, #-20]
  412ccc:	cmp	w9, #0x0
  412cd0:	cset	w9, ge  // ge = tcont
  412cd4:	tbnz	w9, #0, 412d5c <manager_connect_bus+0x240>
  412cd8:	mov	w8, #0x3                   	// #3
  412cdc:	stur	w8, [x29, #-40]
  412ce0:	ldur	w8, [x29, #-20]
  412ce4:	stur	w8, [x29, #-44]
  412ce8:	stur	wzr, [x29, #-48]
  412cec:	ldur	w0, [x29, #-48]
  412cf0:	bl	4041e0 <log_get_max_level_realm@plt>
  412cf4:	ldur	w8, [x29, #-40]
  412cf8:	and	w8, w8, #0x7
  412cfc:	cmp	w0, w8
  412d00:	b.lt	412d34 <manager_connect_bus+0x218>  // b.tstop
  412d04:	ldur	w8, [x29, #-48]
  412d08:	ldur	w9, [x29, #-40]
  412d0c:	orr	w0, w9, w8, lsl #10
  412d10:	ldur	w1, [x29, #-44]
  412d14:	ldr	x2, [sp, #32]
  412d18:	mov	w3, #0x4d                  	// #77
  412d1c:	ldr	x4, [sp, #24]
  412d20:	adrp	x5, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412d24:	add	x5, x5, #0x177
  412d28:	bl	4041f0 <log_internal_realm@plt>
  412d2c:	str	w0, [sp, #16]
  412d30:	b	412d48 <manager_connect_bus+0x22c>
  412d34:	ldur	w0, [x29, #-44]
  412d38:	bl	404200 <abs@plt>
  412d3c:	mov	w8, wzr
  412d40:	subs	w8, w8, w0, uxtb
  412d44:	str	w8, [sp, #16]
  412d48:	ldr	w8, [sp, #16]
  412d4c:	stur	w8, [x29, #-52]
  412d50:	ldur	w8, [x29, #-52]
  412d54:	stur	w8, [x29, #-4]
  412d58:	b	413074 <manager_connect_bus+0x558>
  412d5c:	ldur	x8, [x29, #-16]
  412d60:	ldr	x0, [x8, #8]
  412d64:	ldur	x6, [x29, #-16]
  412d68:	mov	x8, xzr
  412d6c:	mov	x1, x8
  412d70:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  412d74:	add	x2, x2, #0x75b
  412d78:	adrp	x3, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412d7c:	add	x3, x3, #0x19f
  412d80:	adrp	x4, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412d84:	add	x4, x4, #0x660
  412d88:	adrp	x5, 410000 <bus_image_common_mark_read_only+0x1bc>
  412d8c:	add	x5, x5, #0xb40
  412d90:	bl	404cc0 <sd_bus_add_fallback_vtable@plt>
  412d94:	stur	w0, [x29, #-20]
  412d98:	ldur	w9, [x29, #-20]
  412d9c:	cmp	w9, #0x0
  412da0:	cset	w9, ge  // ge = tcont
  412da4:	tbnz	w9, #0, 412e2c <manager_connect_bus+0x310>
  412da8:	mov	w8, #0x3                   	// #3
  412dac:	stur	w8, [x29, #-56]
  412db0:	ldur	w8, [x29, #-20]
  412db4:	stur	w8, [x29, #-60]
  412db8:	stur	wzr, [x29, #-64]
  412dbc:	ldur	w0, [x29, #-64]
  412dc0:	bl	4041e0 <log_get_max_level_realm@plt>
  412dc4:	ldur	w8, [x29, #-56]
  412dc8:	and	w8, w8, #0x7
  412dcc:	cmp	w0, w8
  412dd0:	b.lt	412e04 <manager_connect_bus+0x2e8>  // b.tstop
  412dd4:	ldur	w8, [x29, #-64]
  412dd8:	ldur	w9, [x29, #-56]
  412ddc:	orr	w0, w9, w8, lsl #10
  412de0:	ldur	w1, [x29, #-60]
  412de4:	ldr	x2, [sp, #32]
  412de8:	mov	w3, #0x51                  	// #81
  412dec:	ldr	x4, [sp, #24]
  412df0:	adrp	x5, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412df4:	add	x5, x5, #0x1bf
  412df8:	bl	4041f0 <log_internal_realm@plt>
  412dfc:	str	w0, [sp, #12]
  412e00:	b	412e18 <manager_connect_bus+0x2fc>
  412e04:	ldur	w0, [x29, #-60]
  412e08:	bl	404200 <abs@plt>
  412e0c:	mov	w8, wzr
  412e10:	subs	w8, w8, w0, uxtb
  412e14:	str	w8, [sp, #12]
  412e18:	ldr	w8, [sp, #12]
  412e1c:	stur	w8, [x29, #-68]
  412e20:	ldur	w8, [x29, #-68]
  412e24:	stur	w8, [x29, #-4]
  412e28:	b	413074 <manager_connect_bus+0x558>
  412e2c:	ldur	x8, [x29, #-16]
  412e30:	ldr	x0, [x8, #8]
  412e34:	ldur	x4, [x29, #-16]
  412e38:	mov	x8, xzr
  412e3c:	mov	x1, x8
  412e40:	adrp	x2, 415000 <portable_get_state_internal.__assert_in_set.133+0x1b70>
  412e44:	add	x2, x2, #0x75b
  412e48:	adrp	x3, 410000 <bus_image_common_mark_read_only+0x1bc>
  412e4c:	add	x3, x3, #0xdd8
  412e50:	bl	404cd0 <sd_bus_add_node_enumerator@plt>
  412e54:	stur	w0, [x29, #-20]
  412e58:	ldur	w9, [x29, #-20]
  412e5c:	cmp	w9, #0x0
  412e60:	cset	w9, ge  // ge = tcont
  412e64:	tbnz	w9, #0, 412eec <manager_connect_bus+0x3d0>
  412e68:	mov	w8, #0x3                   	// #3
  412e6c:	stur	w8, [x29, #-72]
  412e70:	ldur	w8, [x29, #-20]
  412e74:	stur	w8, [x29, #-76]
  412e78:	str	wzr, [sp, #80]
  412e7c:	ldr	w0, [sp, #80]
  412e80:	bl	4041e0 <log_get_max_level_realm@plt>
  412e84:	ldur	w8, [x29, #-72]
  412e88:	and	w8, w8, #0x7
  412e8c:	cmp	w0, w8
  412e90:	b.lt	412ec4 <manager_connect_bus+0x3a8>  // b.tstop
  412e94:	ldr	w8, [sp, #80]
  412e98:	ldur	w9, [x29, #-72]
  412e9c:	orr	w0, w9, w8, lsl #10
  412ea0:	ldur	w1, [x29, #-76]
  412ea4:	ldr	x2, [sp, #32]
  412ea8:	mov	w3, #0x55                  	// #85
  412eac:	ldr	x4, [sp, #24]
  412eb0:	adrp	x5, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412eb4:	add	x5, x5, #0x1e5
  412eb8:	bl	4041f0 <log_internal_realm@plt>
  412ebc:	str	w0, [sp, #8]
  412ec0:	b	412ed8 <manager_connect_bus+0x3bc>
  412ec4:	ldur	w0, [x29, #-76]
  412ec8:	bl	404200 <abs@plt>
  412ecc:	mov	w8, wzr
  412ed0:	subs	w8, w8, w0, uxtb
  412ed4:	str	w8, [sp, #8]
  412ed8:	ldr	w8, [sp, #8]
  412edc:	str	w8, [sp, #76]
  412ee0:	ldr	w8, [sp, #76]
  412ee4:	stur	w8, [x29, #-4]
  412ee8:	b	413074 <manager_connect_bus+0x558>
  412eec:	ldur	x8, [x29, #-16]
  412ef0:	ldr	x0, [x8, #8]
  412ef4:	mov	x8, xzr
  412ef8:	mov	x1, x8
  412efc:	adrp	x2, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412f00:	add	x2, x2, #0x208
  412f04:	mov	x3, x8
  412f08:	mov	x4, x8
  412f0c:	mov	x5, x8
  412f10:	bl	404ce0 <sd_bus_request_name_async@plt>
  412f14:	stur	w0, [x29, #-20]
  412f18:	ldur	w9, [x29, #-20]
  412f1c:	cmp	w9, #0x0
  412f20:	cset	w9, ge  // ge = tcont
  412f24:	tbnz	w9, #0, 412fac <manager_connect_bus+0x490>
  412f28:	mov	w8, #0x3                   	// #3
  412f2c:	str	w8, [sp, #72]
  412f30:	ldur	w8, [x29, #-20]
  412f34:	str	w8, [sp, #68]
  412f38:	str	wzr, [sp, #64]
  412f3c:	ldr	w0, [sp, #64]
  412f40:	bl	4041e0 <log_get_max_level_realm@plt>
  412f44:	ldr	w8, [sp, #72]
  412f48:	and	w8, w8, #0x7
  412f4c:	cmp	w0, w8
  412f50:	b.lt	412f84 <manager_connect_bus+0x468>  // b.tstop
  412f54:	ldr	w8, [sp, #64]
  412f58:	ldr	w9, [sp, #72]
  412f5c:	orr	w0, w9, w8, lsl #10
  412f60:	ldr	w1, [sp, #68]
  412f64:	ldr	x2, [sp, #32]
  412f68:	mov	w3, #0x59                  	// #89
  412f6c:	ldr	x4, [sp, #24]
  412f70:	adrp	x5, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  412f74:	add	x5, x5, #0x222
  412f78:	bl	4041f0 <log_internal_realm@plt>
  412f7c:	str	w0, [sp, #4]
  412f80:	b	412f98 <manager_connect_bus+0x47c>
  412f84:	ldr	w0, [sp, #68]
  412f88:	bl	404200 <abs@plt>
  412f8c:	mov	w8, wzr
  412f90:	subs	w8, w8, w0, uxtb
  412f94:	str	w8, [sp, #4]
  412f98:	ldr	w8, [sp, #4]
  412f9c:	str	w8, [sp, #60]
  412fa0:	ldr	w8, [sp, #60]
  412fa4:	stur	w8, [x29, #-4]
  412fa8:	b	413074 <manager_connect_bus+0x558>
  412fac:	ldur	x8, [x29, #-16]
  412fb0:	ldr	x0, [x8, #8]
  412fb4:	ldur	x8, [x29, #-16]
  412fb8:	ldr	x1, [x8]
  412fbc:	mov	w9, wzr
  412fc0:	mov	w2, w9
  412fc4:	bl	404cf0 <sd_bus_attach_event@plt>
  412fc8:	stur	w0, [x29, #-20]
  412fcc:	ldur	w9, [x29, #-20]
  412fd0:	cmp	w9, #0x0
  412fd4:	cset	w9, ge  // ge = tcont
  412fd8:	tbnz	w9, #0, 413060 <manager_connect_bus+0x544>
  412fdc:	mov	w8, #0x3                   	// #3
  412fe0:	str	w8, [sp, #56]
  412fe4:	ldur	w8, [x29, #-20]
  412fe8:	str	w8, [sp, #52]
  412fec:	str	wzr, [sp, #48]
  412ff0:	ldr	w0, [sp, #48]
  412ff4:	bl	4041e0 <log_get_max_level_realm@plt>
  412ff8:	ldr	w8, [sp, #56]
  412ffc:	and	w8, w8, #0x7
  413000:	cmp	w0, w8
  413004:	b.lt	413038 <manager_connect_bus+0x51c>  // b.tstop
  413008:	ldr	w8, [sp, #48]
  41300c:	ldr	w9, [sp, #56]
  413010:	orr	w0, w9, w8, lsl #10
  413014:	ldr	w1, [sp, #52]
  413018:	ldr	x2, [sp, #32]
  41301c:	mov	w3, #0x5d                  	// #93
  413020:	ldr	x4, [sp, #24]
  413024:	adrp	x5, 416000 <portable_get_state_internal.__assert_in_set.133+0x2b70>
  413028:	add	x5, x5, #0x23d
  41302c:	bl	4041f0 <log_internal_realm@plt>
  413030:	str	w0, [sp]
  413034:	b	41304c <manager_connect_bus+0x530>
  413038:	ldr	w0, [sp, #52]
  41303c:	bl	404200 <abs@plt>
  413040:	mov	w8, wzr
  413044:	subs	w8, w8, w0, uxtb
  413048:	str	w8, [sp]
  41304c:	ldr	w8, [sp]
  413050:	str	w8, [sp, #44]
  413054:	ldr	w8, [sp, #44]
  413058:	stur	w8, [x29, #-4]
  41305c:	b	413074 <manager_connect_bus+0x558>
  413060:	ldur	x8, [x29, #-16]
  413064:	ldr	x0, [x8, #8]
  413068:	mov	w1, #0x1                   	// #1
  41306c:	bl	404d00 <sd_bus_set_exit_on_disconnect@plt>
  413070:	stur	wzr, [x29, #-4]
  413074:	ldur	w0, [x29, #-4]
  413078:	ldp	x29, x30, [sp, #160]
  41307c:	add	sp, sp, #0xb0
  413080:	ret

0000000000413084 <check_idle>:
  413084:	sub	sp, sp, #0x10
  413088:	str	x0, [sp, #8]
  41308c:	ldr	x8, [sp, #8]
  413090:	str	x8, [sp]
  413094:	ldr	x8, [sp]
  413098:	ldr	x8, [x8, #40]
  41309c:	cmp	x8, #0x0
  4130a0:	cset	w9, ne  // ne = any
  4130a4:	eor	w9, w9, #0x1
  4130a8:	and	w0, w9, #0x1
  4130ac:	add	sp, sp, #0x10
  4130b0:	ret

00000000004130b4 <ALIGN_TO>:
  4130b4:	sub	sp, sp, #0x10
  4130b8:	str	x0, [sp, #8]
  4130bc:	str	x1, [sp]
  4130c0:	ldr	x8, [sp, #8]
  4130c4:	ldr	x9, [sp]
  4130c8:	add	x8, x8, x9
  4130cc:	subs	x8, x8, #0x1
  4130d0:	ldr	x9, [sp]
  4130d4:	subs	x9, x9, #0x1
  4130d8:	bic	x0, x8, x9
  4130dc:	add	sp, sp, #0x10
  4130e0:	ret
  4130e4:	udf	#0

00000000004130e8 <__libc_csu_init>:
  4130e8:	stp	x29, x30, [sp, #-64]!
  4130ec:	mov	x29, sp
  4130f0:	stp	x19, x20, [sp, #16]
  4130f4:	adrp	x20, 42f000 <__FRAME_END__+0x18438>
  4130f8:	add	x20, x20, #0x720
  4130fc:	stp	x21, x22, [sp, #32]
  413100:	adrp	x21, 42f000 <__FRAME_END__+0x18438>
  413104:	add	x21, x21, #0x718
  413108:	sub	x20, x20, x21
  41310c:	mov	w22, w0
  413110:	stp	x23, x24, [sp, #48]
  413114:	mov	x23, x1
  413118:	mov	x24, x2
  41311c:	bl	4040c8 <_init>
  413120:	cmp	xzr, x20, asr #3
  413124:	b.eq	413150 <__libc_csu_init+0x68>  // b.none
  413128:	asr	x20, x20, #3
  41312c:	mov	x19, #0x0                   	// #0
  413130:	ldr	x3, [x21, x19, lsl #3]
  413134:	mov	x2, x24
  413138:	add	x19, x19, #0x1
  41313c:	mov	x1, x23
  413140:	mov	w0, w22
  413144:	blr	x3
  413148:	cmp	x20, x19
  41314c:	b.ne	413130 <__libc_csu_init+0x48>  // b.any
  413150:	ldp	x19, x20, [sp, #16]
  413154:	ldp	x21, x22, [sp, #32]
  413158:	ldp	x23, x24, [sp, #48]
  41315c:	ldp	x29, x30, [sp], #64
  413160:	ret
  413164:	nop

0000000000413168 <__libc_csu_fini>:
  413168:	ret
  41316c:	udf	#0

0000000000413170 <lstat64>:
  413170:	mov	x2, x1
  413174:	mov	x1, x0
  413178:	mov	w0, #0x0                   	// #0
  41317c:	b	404d10 <__lxstat64@plt>

Disassembly of section .fini:

0000000000413180 <_fini>:
  413180:	stp	x29, x30, [sp, #-16]!
  413184:	mov	x29, sp
  413188:	ldp	x29, x30, [sp], #16
  41318c:	ret
