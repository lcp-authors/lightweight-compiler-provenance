
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//zstd.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_memcpy>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #40]
       c:	str	x1, [sp, #32]
      10:	str	x2, [sp, #24]
      14:	ldr	x2, [sp, #24]
      18:	ldr	x1, [sp, #32]
      1c:	ldr	x0, [sp, #40]
      20:	bl	0 <grub_memmove>
      24:	ldp	x29, x30, [sp], #48
      28:	ret

000000000000002c <MEM_isLittleEndian>:
      2c:	sub	sp, sp, #0x10
      30:	mov	w0, #0x1                   	// #1
      34:	str	w0, [sp, #8]
      38:	ldrb	w0, [sp, #8]
      3c:	add	sp, sp, #0x10
      40:	ret

0000000000000044 <MEM_read32>:
      44:	sub	sp, sp, #0x10
      48:	str	x0, [sp, #8]
      4c:	ldr	x0, [sp, #8]
      50:	ldr	w0, [x0]
      54:	add	sp, sp, #0x10
      58:	ret

000000000000005c <MEM_swap32>:
      5c:	sub	sp, sp, #0x10
      60:	str	w0, [sp, #12]
      64:	ldr	w0, [sp, #12]
      68:	rev	w0, w0
      6c:	add	sp, sp, #0x10
      70:	ret

0000000000000074 <MEM_readLE32>:
      74:	stp	x29, x30, [sp, #-32]!
      78:	mov	x29, sp
      7c:	str	x0, [sp, #24]
      80:	bl	2c <MEM_isLittleEndian>
      84:	cmp	w0, #0x0
      88:	b.eq	98 <MEM_readLE32+0x24>  // b.none
      8c:	ldr	x0, [sp, #24]
      90:	bl	44 <MEM_read32>
      94:	b	a4 <MEM_readLE32+0x30>
      98:	ldr	x0, [sp, #24]
      9c:	bl	44 <MEM_read32>
      a0:	bl	5c <MEM_swap32>
      a4:	ldp	x29, x30, [sp], #32
      a8:	ret

00000000000000ac <ERR_isError>:
      ac:	sub	sp, sp, #0x10
      b0:	str	x0, [sp, #8]
      b4:	ldr	x0, [sp, #8]
      b8:	cmn	x0, #0x78
      bc:	cset	w0, hi  // hi = pmore
      c0:	and	w0, w0, #0xff
      c4:	add	sp, sp, #0x10
      c8:	ret

00000000000000cc <ERR_getErrorCode>:
      cc:	stp	x29, x30, [sp, #-32]!
      d0:	mov	x29, sp
      d4:	str	x0, [sp, #24]
      d8:	ldr	x0, [sp, #24]
      dc:	bl	ac <ERR_isError>
      e0:	cmp	w0, #0x0
      e4:	b.ne	f0 <ERR_getErrorCode+0x24>  // b.any
      e8:	mov	w0, #0x0                   	// #0
      ec:	b	f8 <ERR_getErrorCode+0x2c>
      f0:	ldr	x0, [sp, #24]
      f4:	neg	w0, w0
      f8:	ldp	x29, x30, [sp], #32
      fc:	ret

0000000000000100 <ERR_getErrorName>:
     100:	stp	x29, x30, [sp, #-32]!
     104:	mov	x29, sp
     108:	str	x0, [sp, #24]
     10c:	ldr	x0, [sp, #24]
     110:	bl	cc <ERR_getErrorCode>
     114:	bl	b6c <ERR_getErrorString>
     118:	ldp	x29, x30, [sp], #32
     11c:	ret

0000000000000120 <BIT_highbit32>:
     120:	sub	sp, sp, #0x10
     124:	str	w0, [sp, #12]
     128:	ldr	w0, [sp, #12]
     12c:	clz	w0, w0
     130:	mov	w1, #0x1f                  	// #31
     134:	sub	w0, w1, w0
     138:	add	sp, sp, #0x10
     13c:	ret

0000000000000140 <FSE_versionNumber>:
     140:	mov	w0, #0x384                 	// #900
     144:	ret

0000000000000148 <FSE_isError>:
     148:	stp	x29, x30, [sp, #-32]!
     14c:	mov	x29, sp
     150:	str	x0, [sp, #24]
     154:	ldr	x0, [sp, #24]
     158:	bl	ac <ERR_isError>
     15c:	ldp	x29, x30, [sp], #32
     160:	ret

0000000000000164 <FSE_getErrorName>:
     164:	stp	x29, x30, [sp, #-32]!
     168:	mov	x29, sp
     16c:	str	x0, [sp, #24]
     170:	ldr	x0, [sp, #24]
     174:	bl	100 <ERR_getErrorName>
     178:	ldp	x29, x30, [sp], #32
     17c:	ret

0000000000000180 <HUF_isError>:
     180:	stp	x29, x30, [sp, #-32]!
     184:	mov	x29, sp
     188:	str	x0, [sp, #24]
     18c:	ldr	x0, [sp, #24]
     190:	bl	ac <ERR_isError>
     194:	ldp	x29, x30, [sp], #32
     198:	ret

000000000000019c <HUF_getErrorName>:
     19c:	stp	x29, x30, [sp, #-32]!
     1a0:	mov	x29, sp
     1a4:	str	x0, [sp, #24]
     1a8:	ldr	x0, [sp, #24]
     1ac:	bl	100 <ERR_getErrorName>
     1b0:	ldp	x29, x30, [sp], #32
     1b4:	ret

00000000000001b8 <FSE_readNCount>:
     1b8:	stp	x29, x30, [sp, #-160]!
     1bc:	mov	x29, sp
     1c0:	str	x0, [sp, #56]
     1c4:	str	x1, [sp, #48]
     1c8:	str	x2, [sp, #40]
     1cc:	str	x3, [sp, #32]
     1d0:	str	x4, [sp, #24]
     1d4:	ldr	x0, [sp, #32]
     1d8:	str	x0, [sp, #104]
     1dc:	ldr	x1, [sp, #104]
     1e0:	ldr	x0, [sp, #24]
     1e4:	add	x0, x1, x0
     1e8:	str	x0, [sp, #96]
     1ec:	ldr	x0, [sp, #104]
     1f0:	str	x0, [sp, #152]
     1f4:	str	wzr, [sp, #128]
     1f8:	str	wzr, [sp, #124]
     1fc:	ldr	x0, [sp, #24]
     200:	cmp	x0, #0x3
     204:	b.hi	280 <FSE_readNCount+0xc8>  // b.pmore
     208:	add	x0, sp, #0x48
     20c:	mov	x2, #0x4                   	// #4
     210:	mov	w1, #0x0                   	// #0
     214:	bl	0 <grub_memset>
     218:	add	x0, sp, #0x48
     21c:	ldr	x2, [sp, #24]
     220:	ldr	x1, [sp, #32]
     224:	bl	0 <grub_memcpy>
     228:	add	x0, sp, #0x48
     22c:	mov	x4, #0x4                   	// #4
     230:	mov	x3, x0
     234:	ldr	x2, [sp, #40]
     238:	ldr	x1, [sp, #48]
     23c:	ldr	x0, [sp, #56]
     240:	bl	1b8 <FSE_readNCount>
     244:	str	x0, [sp, #80]
     248:	ldr	x0, [sp, #80]
     24c:	bl	148 <FSE_isError>
     250:	cmp	w0, #0x0
     254:	b.eq	260 <FSE_readNCount+0xa8>  // b.none
     258:	ldr	x0, [sp, #80]
     25c:	b	760 <FSE_readNCount+0x5a8>
     260:	ldr	x1, [sp, #80]
     264:	ldr	x0, [sp, #24]
     268:	cmp	x1, x0
     26c:	b.ls	278 <FSE_readNCount+0xc0>  // b.plast
     270:	mov	x0, #0xffffffffffffffec    	// #-20
     274:	b	760 <FSE_readNCount+0x5a8>
     278:	ldr	x0, [sp, #80]
     27c:	b	760 <FSE_readNCount+0x5a8>
     280:	ldr	x0, [sp, #48]
     284:	ldr	w0, [x0]
     288:	add	w0, w0, #0x1
     28c:	mov	w0, w0
     290:	lsl	x0, x0, #1
     294:	mov	x2, x0
     298:	mov	w1, #0x0                   	// #0
     29c:	ldr	x0, [sp, #56]
     2a0:	bl	0 <grub_memset>
     2a4:	ldr	x0, [sp, #152]
     2a8:	bl	74 <MEM_readLE32>
     2ac:	str	w0, [sp, #136]
     2b0:	ldr	w0, [sp, #136]
     2b4:	and	w0, w0, #0xf
     2b8:	add	w0, w0, #0x5
     2bc:	str	w0, [sp, #148]
     2c0:	ldr	w0, [sp, #148]
     2c4:	cmp	w0, #0xf
     2c8:	b.le	2d4 <FSE_readNCount+0x11c>
     2cc:	mov	x0, #0xffffffffffffffd4    	// #-44
     2d0:	b	760 <FSE_readNCount+0x5a8>
     2d4:	ldr	w0, [sp, #136]
     2d8:	lsr	w0, w0, #4
     2dc:	str	w0, [sp, #136]
     2e0:	mov	w0, #0x4                   	// #4
     2e4:	str	w0, [sp, #132]
     2e8:	ldr	w1, [sp, #148]
     2ec:	ldr	x0, [sp, #40]
     2f0:	str	w1, [x0]
     2f4:	ldr	w0, [sp, #148]
     2f8:	mov	w1, #0x1                   	// #1
     2fc:	lsl	w0, w1, w0
     300:	add	w0, w0, #0x1
     304:	str	w0, [sp, #144]
     308:	ldr	w0, [sp, #148]
     30c:	mov	w1, #0x1                   	// #1
     310:	lsl	w0, w1, w0
     314:	str	w0, [sp, #140]
     318:	ldr	w0, [sp, #148]
     31c:	add	w0, w0, #0x1
     320:	str	w0, [sp, #148]
     324:	b	6c8 <FSE_readNCount+0x510>
     328:	ldr	w0, [sp, #124]
     32c:	cmp	w0, #0x0
     330:	b.eq	4dc <FSE_readNCount+0x324>  // b.none
     334:	ldr	w0, [sp, #128]
     338:	str	w0, [sp, #120]
     33c:	b	3a0 <FSE_readNCount+0x1e8>
     340:	ldr	w0, [sp, #120]
     344:	add	w0, w0, #0x18
     348:	str	w0, [sp, #120]
     34c:	ldr	x0, [sp, #96]
     350:	sub	x0, x0, #0x5
     354:	ldr	x1, [sp, #152]
     358:	cmp	x1, x0
     35c:	b.cs	388 <FSE_readNCount+0x1d0>  // b.hs, b.nlast
     360:	ldr	x0, [sp, #152]
     364:	add	x0, x0, #0x2
     368:	str	x0, [sp, #152]
     36c:	ldr	x0, [sp, #152]
     370:	bl	74 <MEM_readLE32>
     374:	mov	w1, w0
     378:	ldr	w0, [sp, #132]
     37c:	lsr	w0, w1, w0
     380:	str	w0, [sp, #136]
     384:	b	3a0 <FSE_readNCount+0x1e8>
     388:	ldr	w0, [sp, #136]
     38c:	lsr	w0, w0, #16
     390:	str	w0, [sp, #136]
     394:	ldr	w0, [sp, #132]
     398:	add	w0, w0, #0x10
     39c:	str	w0, [sp, #132]
     3a0:	ldr	w0, [sp, #136]
     3a4:	and	w1, w0, #0xffff
     3a8:	mov	w0, #0xffff                	// #65535
     3ac:	cmp	w1, w0
     3b0:	b.eq	340 <FSE_readNCount+0x188>  // b.none
     3b4:	b	3dc <FSE_readNCount+0x224>
     3b8:	ldr	w0, [sp, #120]
     3bc:	add	w0, w0, #0x3
     3c0:	str	w0, [sp, #120]
     3c4:	ldr	w0, [sp, #136]
     3c8:	lsr	w0, w0, #2
     3cc:	str	w0, [sp, #136]
     3d0:	ldr	w0, [sp, #132]
     3d4:	add	w0, w0, #0x2
     3d8:	str	w0, [sp, #132]
     3dc:	ldr	w0, [sp, #136]
     3e0:	and	w0, w0, #0x3
     3e4:	cmp	w0, #0x3
     3e8:	b.eq	3b8 <FSE_readNCount+0x200>  // b.none
     3ec:	ldr	w0, [sp, #136]
     3f0:	and	w0, w0, #0x3
     3f4:	ldr	w1, [sp, #120]
     3f8:	add	w0, w1, w0
     3fc:	str	w0, [sp, #120]
     400:	ldr	w0, [sp, #132]
     404:	add	w0, w0, #0x2
     408:	str	w0, [sp, #132]
     40c:	ldr	x0, [sp, #48]
     410:	ldr	w0, [x0]
     414:	ldr	w1, [sp, #120]
     418:	cmp	w1, w0
     41c:	b.ls	448 <FSE_readNCount+0x290>  // b.plast
     420:	mov	x0, #0xffffffffffffffd0    	// #-48
     424:	b	760 <FSE_readNCount+0x5a8>
     428:	ldr	w0, [sp, #128]
     42c:	add	w1, w0, #0x1
     430:	str	w1, [sp, #128]
     434:	mov	w0, w0
     438:	lsl	x0, x0, #1
     43c:	ldr	x1, [sp, #56]
     440:	add	x0, x1, x0
     444:	strh	wzr, [x0]
     448:	ldr	w1, [sp, #128]
     44c:	ldr	w0, [sp, #120]
     450:	cmp	w1, w0
     454:	b.cc	428 <FSE_readNCount+0x270>  // b.lo, b.ul, b.last
     458:	ldr	x0, [sp, #96]
     45c:	sub	x0, x0, #0x7
     460:	ldr	x1, [sp, #152]
     464:	cmp	x1, x0
     468:	b.ls	490 <FSE_readNCount+0x2d8>  // b.plast
     46c:	ldr	w0, [sp, #132]
     470:	asr	w0, w0, #3
     474:	sxtw	x0, w0
     478:	ldr	x1, [sp, #152]
     47c:	add	x1, x1, x0
     480:	ldr	x0, [sp, #96]
     484:	sub	x0, x0, #0x4
     488:	cmp	x1, x0
     48c:	b.hi	4d0 <FSE_readNCount+0x318>  // b.pmore
     490:	ldr	w0, [sp, #132]
     494:	asr	w0, w0, #3
     498:	sxtw	x0, w0
     49c:	ldr	x1, [sp, #152]
     4a0:	add	x0, x1, x0
     4a4:	str	x0, [sp, #152]
     4a8:	ldr	w0, [sp, #132]
     4ac:	and	w0, w0, #0x7
     4b0:	str	w0, [sp, #132]
     4b4:	ldr	x0, [sp, #152]
     4b8:	bl	74 <MEM_readLE32>
     4bc:	mov	w1, w0
     4c0:	ldr	w0, [sp, #132]
     4c4:	lsr	w0, w1, w0
     4c8:	str	w0, [sp, #136]
     4cc:	b	4dc <FSE_readNCount+0x324>
     4d0:	ldr	w0, [sp, #136]
     4d4:	lsr	w0, w0, #2
     4d8:	str	w0, [sp, #136]
     4dc:	ldr	w0, [sp, #140]
     4e0:	lsl	w0, w0, #1
     4e4:	sub	w1, w0, #0x1
     4e8:	ldr	w0, [sp, #144]
     4ec:	sub	w0, w1, w0
     4f0:	str	w0, [sp, #92]
     4f4:	ldr	w0, [sp, #140]
     4f8:	sub	w0, w0, #0x1
     4fc:	mov	w1, w0
     500:	ldr	w0, [sp, #136]
     504:	and	w1, w1, w0
     508:	ldr	w0, [sp, #92]
     50c:	cmp	w1, w0
     510:	b.cs	544 <FSE_readNCount+0x38c>  // b.hs, b.nlast
     514:	ldr	w0, [sp, #140]
     518:	sub	w0, w0, #0x1
     51c:	mov	w1, w0
     520:	ldr	w0, [sp, #136]
     524:	and	w0, w1, w0
     528:	str	w0, [sp, #116]
     52c:	ldr	w0, [sp, #148]
     530:	sub	w0, w0, #0x1
     534:	ldr	w1, [sp, #132]
     538:	add	w0, w1, w0
     53c:	str	w0, [sp, #132]
     540:	b	590 <FSE_readNCount+0x3d8>
     544:	ldr	w0, [sp, #140]
     548:	lsl	w0, w0, #1
     54c:	sub	w0, w0, #0x1
     550:	mov	w1, w0
     554:	ldr	w0, [sp, #136]
     558:	and	w0, w1, w0
     55c:	str	w0, [sp, #116]
     560:	ldr	w1, [sp, #116]
     564:	ldr	w0, [sp, #140]
     568:	cmp	w1, w0
     56c:	b.lt	580 <FSE_readNCount+0x3c8>  // b.tstop
     570:	ldr	w1, [sp, #116]
     574:	ldr	w0, [sp, #92]
     578:	sub	w0, w1, w0
     57c:	str	w0, [sp, #116]
     580:	ldr	w1, [sp, #132]
     584:	ldr	w0, [sp, #148]
     588:	add	w0, w1, w0
     58c:	str	w0, [sp, #132]
     590:	ldr	w0, [sp, #116]
     594:	sub	w0, w0, #0x1
     598:	str	w0, [sp, #116]
     59c:	ldr	w0, [sp, #116]
     5a0:	cmp	w0, #0x0
     5a4:	cneg	w0, w0, lt  // lt = tstop
     5a8:	ldr	w1, [sp, #144]
     5ac:	sub	w0, w1, w0
     5b0:	str	w0, [sp, #144]
     5b4:	ldr	w0, [sp, #128]
     5b8:	add	w1, w0, #0x1
     5bc:	str	w1, [sp, #128]
     5c0:	mov	w0, w0
     5c4:	lsl	x0, x0, #1
     5c8:	ldr	x1, [sp, #56]
     5cc:	add	x0, x1, x0
     5d0:	ldr	w1, [sp, #116]
     5d4:	sxth	w1, w1
     5d8:	strh	w1, [x0]
     5dc:	ldr	w0, [sp, #116]
     5e0:	cmp	w0, #0x0
     5e4:	cset	w0, eq  // eq = none
     5e8:	and	w0, w0, #0xff
     5ec:	str	w0, [sp, #124]
     5f0:	b	60c <FSE_readNCount+0x454>
     5f4:	ldr	w0, [sp, #148]
     5f8:	sub	w0, w0, #0x1
     5fc:	str	w0, [sp, #148]
     600:	ldr	w0, [sp, #140]
     604:	asr	w0, w0, #1
     608:	str	w0, [sp, #140]
     60c:	ldr	w1, [sp, #144]
     610:	ldr	w0, [sp, #140]
     614:	cmp	w1, w0
     618:	b.lt	5f4 <FSE_readNCount+0x43c>  // b.tstop
     61c:	ldr	x0, [sp, #96]
     620:	sub	x0, x0, #0x7
     624:	ldr	x1, [sp, #152]
     628:	cmp	x1, x0
     62c:	b.ls	654 <FSE_readNCount+0x49c>  // b.plast
     630:	ldr	w0, [sp, #132]
     634:	asr	w0, w0, #3
     638:	sxtw	x0, w0
     63c:	ldr	x1, [sp, #152]
     640:	add	x1, x1, x0
     644:	ldr	x0, [sp, #96]
     648:	sub	x0, x0, #0x4
     64c:	cmp	x1, x0
     650:	b.hi	67c <FSE_readNCount+0x4c4>  // b.pmore
     654:	ldr	w0, [sp, #132]
     658:	asr	w0, w0, #3
     65c:	sxtw	x0, w0
     660:	ldr	x1, [sp, #152]
     664:	add	x0, x1, x0
     668:	str	x0, [sp, #152]
     66c:	ldr	w0, [sp, #132]
     670:	and	w0, w0, #0x7
     674:	str	w0, [sp, #132]
     678:	b	6ac <FSE_readNCount+0x4f4>
     67c:	ldr	x0, [sp, #96]
     680:	sub	x1, x0, #0x4
     684:	ldr	x0, [sp, #152]
     688:	sub	x0, x1, x0
     68c:	lsl	w0, w0, #3
     690:	mov	w1, w0
     694:	ldr	w0, [sp, #132]
     698:	sub	w0, w0, w1
     69c:	str	w0, [sp, #132]
     6a0:	ldr	x0, [sp, #96]
     6a4:	sub	x0, x0, #0x4
     6a8:	str	x0, [sp, #152]
     6ac:	ldr	x0, [sp, #152]
     6b0:	bl	74 <MEM_readLE32>
     6b4:	mov	w1, w0
     6b8:	ldr	w0, [sp, #132]
     6bc:	and	w0, w0, #0x1f
     6c0:	lsr	w0, w1, w0
     6c4:	str	w0, [sp, #136]
     6c8:	ldr	w0, [sp, #144]
     6cc:	cmp	w0, #0x1
     6d0:	cset	w0, gt
     6d4:	and	w1, w0, #0xff
     6d8:	ldr	x0, [sp, #48]
     6dc:	ldr	w0, [x0]
     6e0:	ldr	w2, [sp, #128]
     6e4:	cmp	w2, w0
     6e8:	cset	w0, ls  // ls = plast
     6ec:	and	w0, w0, #0xff
     6f0:	and	w0, w1, w0
     6f4:	and	w0, w0, #0xff
     6f8:	cmp	w0, #0x0
     6fc:	b.ne	328 <FSE_readNCount+0x170>  // b.any
     700:	ldr	w0, [sp, #144]
     704:	cmp	w0, #0x1
     708:	b.eq	714 <FSE_readNCount+0x55c>  // b.none
     70c:	mov	x0, #0xffffffffffffffec    	// #-20
     710:	b	760 <FSE_readNCount+0x5a8>
     714:	ldr	w0, [sp, #132]
     718:	cmp	w0, #0x20
     71c:	b.le	728 <FSE_readNCount+0x570>
     720:	mov	x0, #0xffffffffffffffec    	// #-20
     724:	b	760 <FSE_readNCount+0x5a8>
     728:	ldr	w0, [sp, #128]
     72c:	sub	w1, w0, #0x1
     730:	ldr	x0, [sp, #48]
     734:	str	w1, [x0]
     738:	ldr	w0, [sp, #132]
     73c:	add	w0, w0, #0x7
     740:	asr	w0, w0, #3
     744:	sxtw	x0, w0
     748:	ldr	x1, [sp, #152]
     74c:	add	x0, x1, x0
     750:	str	x0, [sp, #152]
     754:	ldr	x1, [sp, #152]
     758:	ldr	x0, [sp, #104]
     75c:	sub	x0, x1, x0
     760:	ldp	x29, x30, [sp], #160
     764:	ret

0000000000000768 <HUF_readStats>:
     768:	stp	x29, x30, [sp, #-400]!
     76c:	mov	x29, sp
     770:	str	x0, [sp, #72]
     774:	str	x1, [sp, #64]
     778:	str	x2, [sp, #56]
     77c:	str	x3, [sp, #48]
     780:	str	x4, [sp, #40]
     784:	str	x5, [sp, #32]
     788:	str	x6, [sp, #24]
     78c:	ldr	x0, [sp, #32]
     790:	str	x0, [sp, #360]
     794:	ldr	x0, [sp, #24]
     798:	cmp	x0, #0x0
     79c:	b.ne	7a8 <HUF_readStats+0x40>  // b.any
     7a0:	mov	x0, #0xffffffffffffffb8    	// #-72
     7a4:	b	aec <HUF_readStats+0x384>
     7a8:	ldr	x0, [sp, #360]
     7ac:	ldrb	w0, [x0]
     7b0:	and	x0, x0, #0xff
     7b4:	str	x0, [sp, #384]
     7b8:	ldr	x0, [sp, #384]
     7bc:	cmp	x0, #0x7f
     7c0:	b.ls	8b0 <HUF_readStats+0x148>  // b.plast
     7c4:	ldr	x0, [sp, #384]
     7c8:	sub	x0, x0, #0x7f
     7cc:	str	x0, [sp, #376]
     7d0:	ldr	x0, [sp, #376]
     7d4:	add	x0, x0, #0x1
     7d8:	lsr	x0, x0, #1
     7dc:	str	x0, [sp, #384]
     7e0:	ldr	x0, [sp, #384]
     7e4:	add	x0, x0, #0x1
     7e8:	ldr	x1, [sp, #24]
     7ec:	cmp	x1, x0
     7f0:	b.cs	7fc <HUF_readStats+0x94>  // b.hs, b.nlast
     7f4:	mov	x0, #0xffffffffffffffb8    	// #-72
     7f8:	b	aec <HUF_readStats+0x384>
     7fc:	ldr	x1, [sp, #376]
     800:	ldr	x0, [sp, #64]
     804:	cmp	x1, x0
     808:	b.cc	814 <HUF_readStats+0xac>  // b.lo, b.ul, b.last
     80c:	mov	x0, #0xffffffffffffffec    	// #-20
     810:	b	aec <HUF_readStats+0x384>
     814:	ldr	x0, [sp, #360]
     818:	add	x0, x0, #0x1
     81c:	str	x0, [sp, #360]
     820:	str	wzr, [sp, #372]
     824:	b	89c <HUF_readStats+0x134>
     828:	ldr	w0, [sp, #372]
     82c:	lsr	w0, w0, #1
     830:	mov	w0, w0
     834:	ldr	x1, [sp, #360]
     838:	add	x0, x1, x0
     83c:	ldrb	w1, [x0]
     840:	ldr	w0, [sp, #372]
     844:	ldr	x2, [sp, #72]
     848:	add	x0, x2, x0
     84c:	lsr	w1, w1, #4
     850:	and	w1, w1, #0xff
     854:	strb	w1, [x0]
     858:	ldr	w0, [sp, #372]
     85c:	lsr	w0, w0, #1
     860:	mov	w0, w0
     864:	ldr	x1, [sp, #360]
     868:	add	x0, x1, x0
     86c:	ldrb	w1, [x0]
     870:	ldr	w0, [sp, #372]
     874:	add	w0, w0, #0x1
     878:	mov	w0, w0
     87c:	ldr	x2, [sp, #72]
     880:	add	x0, x2, x0
     884:	and	w1, w1, #0xf
     888:	and	w1, w1, #0xff
     88c:	strb	w1, [x0]
     890:	ldr	w0, [sp, #372]
     894:	add	w0, w0, #0x2
     898:	str	w0, [sp, #372]
     89c:	ldr	w0, [sp, #372]
     8a0:	ldr	x1, [sp, #376]
     8a4:	cmp	x1, x0
     8a8:	b.hi	828 <HUF_readStats+0xc0>  // b.pmore
     8ac:	b	914 <HUF_readStats+0x1ac>
     8b0:	ldr	x0, [sp, #384]
     8b4:	add	x0, x0, #0x1
     8b8:	ldr	x1, [sp, #24]
     8bc:	cmp	x1, x0
     8c0:	b.cs	8cc <HUF_readStats+0x164>  // b.hs, b.nlast
     8c4:	mov	x0, #0xffffffffffffffb8    	// #-72
     8c8:	b	aec <HUF_readStats+0x384>
     8cc:	ldr	x0, [sp, #64]
     8d0:	sub	x1, x0, #0x1
     8d4:	ldr	x0, [sp, #360]
     8d8:	add	x0, x0, #0x1
     8dc:	add	x2, sp, #0x50
     8e0:	mov	w5, #0x6                   	// #6
     8e4:	mov	x4, x2
     8e8:	ldr	x3, [sp, #384]
     8ec:	mov	x2, x0
     8f0:	ldr	x0, [sp, #72]
     8f4:	bl	219c <FSE_decompress_wksp>
     8f8:	str	x0, [sp, #376]
     8fc:	ldr	x0, [sp, #376]
     900:	bl	148 <FSE_isError>
     904:	cmp	w0, #0x0
     908:	b.eq	914 <HUF_readStats+0x1ac>  // b.none
     90c:	ldr	x0, [sp, #376]
     910:	b	aec <HUF_readStats+0x384>
     914:	mov	x2, #0x34                  	// #52
     918:	mov	w1, #0x0                   	// #0
     91c:	ldr	x0, [sp, #56]
     920:	bl	0 <grub_memset>
     924:	str	wzr, [sp, #396]
     928:	str	wzr, [sp, #368]
     92c:	b	9b8 <HUF_readStats+0x250>
     930:	ldr	w0, [sp, #368]
     934:	ldr	x1, [sp, #72]
     938:	add	x0, x1, x0
     93c:	ldrb	w0, [x0]
     940:	cmp	w0, #0xb
     944:	b.ls	950 <HUF_readStats+0x1e8>  // b.plast
     948:	mov	x0, #0xffffffffffffffec    	// #-20
     94c:	b	aec <HUF_readStats+0x384>
     950:	ldr	w0, [sp, #368]
     954:	ldr	x1, [sp, #72]
     958:	add	x0, x1, x0
     95c:	ldrb	w0, [x0]
     960:	and	x0, x0, #0xff
     964:	lsl	x0, x0, #2
     968:	ldr	x1, [sp, #56]
     96c:	add	x0, x1, x0
     970:	ldr	w1, [x0]
     974:	add	w1, w1, #0x1
     978:	str	w1, [x0]
     97c:	ldr	w0, [sp, #368]
     980:	ldr	x1, [sp, #72]
     984:	add	x0, x1, x0
     988:	ldrb	w0, [x0]
     98c:	mov	w1, w0
     990:	mov	w0, #0x1                   	// #1
     994:	lsl	w0, w0, w1
     998:	asr	w0, w0, #1
     99c:	mov	w1, w0
     9a0:	ldr	w0, [sp, #396]
     9a4:	add	w0, w0, w1
     9a8:	str	w0, [sp, #396]
     9ac:	ldr	w0, [sp, #368]
     9b0:	add	w0, w0, #0x1
     9b4:	str	w0, [sp, #368]
     9b8:	ldr	w0, [sp, #368]
     9bc:	ldr	x1, [sp, #376]
     9c0:	cmp	x1, x0
     9c4:	b.hi	930 <HUF_readStats+0x1c8>  // b.pmore
     9c8:	ldr	w0, [sp, #396]
     9cc:	cmp	w0, #0x0
     9d0:	b.ne	9dc <HUF_readStats+0x274>  // b.any
     9d4:	mov	x0, #0xffffffffffffffec    	// #-20
     9d8:	b	aec <HUF_readStats+0x384>
     9dc:	ldr	w0, [sp, #396]
     9e0:	bl	120 <BIT_highbit32>
     9e4:	add	w0, w0, #0x1
     9e8:	str	w0, [sp, #356]
     9ec:	ldr	w0, [sp, #356]
     9f0:	cmp	w0, #0xc
     9f4:	b.ls	a00 <HUF_readStats+0x298>  // b.plast
     9f8:	mov	x0, #0xffffffffffffffec    	// #-20
     9fc:	b	aec <HUF_readStats+0x384>
     a00:	ldr	x0, [sp, #40]
     a04:	ldr	w1, [sp, #356]
     a08:	str	w1, [x0]
     a0c:	ldr	w0, [sp, #356]
     a10:	mov	w1, #0x1                   	// #1
     a14:	lsl	w0, w1, w0
     a18:	str	w0, [sp, #352]
     a1c:	ldr	w1, [sp, #352]
     a20:	ldr	w0, [sp, #396]
     a24:	sub	w0, w1, w0
     a28:	str	w0, [sp, #348]
     a2c:	ldr	w0, [sp, #348]
     a30:	bl	120 <BIT_highbit32>
     a34:	mov	w1, w0
     a38:	mov	w0, #0x1                   	// #1
     a3c:	lsl	w0, w0, w1
     a40:	str	w0, [sp, #344]
     a44:	ldr	w0, [sp, #348]
     a48:	bl	120 <BIT_highbit32>
     a4c:	add	w0, w0, #0x1
     a50:	str	w0, [sp, #340]
     a54:	ldr	w1, [sp, #344]
     a58:	ldr	w0, [sp, #348]
     a5c:	cmp	w1, w0
     a60:	b.eq	a6c <HUF_readStats+0x304>  // b.none
     a64:	mov	x0, #0xffffffffffffffec    	// #-20
     a68:	b	aec <HUF_readStats+0x384>
     a6c:	ldr	x1, [sp, #72]
     a70:	ldr	x0, [sp, #376]
     a74:	add	x0, x1, x0
     a78:	ldr	w1, [sp, #340]
     a7c:	and	w1, w1, #0xff
     a80:	strb	w1, [x0]
     a84:	ldr	w0, [sp, #340]
     a88:	lsl	x0, x0, #2
     a8c:	ldr	x1, [sp, #56]
     a90:	add	x0, x1, x0
     a94:	ldr	w1, [x0]
     a98:	add	w1, w1, #0x1
     a9c:	str	w1, [x0]
     aa0:	ldr	x0, [sp, #56]
     aa4:	add	x0, x0, #0x4
     aa8:	ldr	w0, [x0]
     aac:	cmp	w0, #0x1
     ab0:	b.ls	acc <HUF_readStats+0x364>  // b.plast
     ab4:	ldr	x0, [sp, #56]
     ab8:	add	x0, x0, #0x4
     abc:	ldr	w0, [x0]
     ac0:	and	w0, w0, #0x1
     ac4:	cmp	w0, #0x0
     ac8:	b.eq	ad4 <HUF_readStats+0x36c>  // b.none
     acc:	mov	x0, #0xffffffffffffffec    	// #-20
     ad0:	b	aec <HUF_readStats+0x384>
     ad4:	ldr	x0, [sp, #376]
     ad8:	add	w1, w0, #0x1
     adc:	ldr	x0, [sp, #48]
     ae0:	str	w1, [x0]
     ae4:	ldr	x0, [sp, #384]
     ae8:	add	x0, x0, #0x1
     aec:	ldp	x29, x30, [sp], #400
     af0:	ret
     af4:	nop

0000000000000af8 <ERR_isError>:
     af8:	sub	sp, sp, #0x10
     afc:	str	x0, [sp, #8]
     b00:	ldr	x0, [sp, #8]
     b04:	cmn	x0, #0x78
     b08:	cset	w0, hi  // hi = pmore
     b0c:	and	w0, w0, #0xff
     b10:	add	sp, sp, #0x10
     b14:	ret

0000000000000b18 <ERR_getErrorCode>:
     b18:	stp	x29, x30, [sp, #-32]!
     b1c:	mov	x29, sp
     b20:	str	x0, [sp, #24]
     b24:	ldr	x0, [sp, #24]
     b28:	bl	af8 <ERR_isError>
     b2c:	cmp	w0, #0x0
     b30:	b.ne	b3c <ERR_getErrorCode+0x24>  // b.any
     b34:	mov	w0, #0x0                   	// #0
     b38:	b	b44 <ERR_getErrorCode+0x2c>
     b3c:	ldr	x0, [sp, #24]
     b40:	neg	w0, w0
     b44:	ldp	x29, x30, [sp], #32
     b48:	ret

0000000000000b4c <ERR_getErrorName>:
     b4c:	stp	x29, x30, [sp, #-32]!
     b50:	mov	x29, sp
     b54:	str	x0, [sp, #24]
     b58:	ldr	x0, [sp, #24]
     b5c:	bl	b18 <ERR_getErrorCode>
     b60:	bl	b6c <ERR_getErrorString>
     b64:	ldp	x29, x30, [sp], #32
     b68:	ret

0000000000000b6c <ERR_getErrorString>:
     b6c:	sub	sp, sp, #0x10
     b70:	str	w0, [sp, #12]
     b74:	ldr	w0, [sp, #12]
     b78:	cmp	w0, #0x66
     b7c:	b.hi	d1c <ERR_getErrorString+0x1b0>  // b.pmore
     b80:	adrp	x1, 0 <grub_memcpy>
     b84:	add	x1, x1, #0x0
     b88:	ldr	x1, [x1]
     b8c:	ldr	w0, [x1, w0, uxtw #2]
     b90:	adr	x1, b9c <ERR_getErrorString+0x30>
     b94:	add	x0, x1, w0, sxtw #2
     b98:	br	x0
     b9c:	adrp	x0, 0 <grub_memcpy>
     ba0:	add	x0, x0, #0x0
     ba4:	ldr	x0, [x0]
     ba8:	b	d2c <ERR_getErrorString+0x1c0>
     bac:	adrp	x0, 0 <grub_memcpy>
     bb0:	add	x0, x0, #0x0
     bb4:	ldr	x0, [x0]
     bb8:	b	d2c <ERR_getErrorString+0x1c0>
     bbc:	adrp	x0, 0 <grub_memcpy>
     bc0:	add	x0, x0, #0x0
     bc4:	ldr	x0, [x0]
     bc8:	b	d2c <ERR_getErrorString+0x1c0>
     bcc:	adrp	x0, 0 <grub_memcpy>
     bd0:	add	x0, x0, #0x0
     bd4:	ldr	x0, [x0]
     bd8:	b	d2c <ERR_getErrorString+0x1c0>
     bdc:	adrp	x0, 0 <grub_memcpy>
     be0:	add	x0, x0, #0x0
     be4:	ldr	x0, [x0]
     be8:	b	d2c <ERR_getErrorString+0x1c0>
     bec:	adrp	x0, 0 <grub_memcpy>
     bf0:	add	x0, x0, #0x0
     bf4:	ldr	x0, [x0]
     bf8:	b	d2c <ERR_getErrorString+0x1c0>
     bfc:	adrp	x0, 0 <grub_memcpy>
     c00:	add	x0, x0, #0x0
     c04:	ldr	x0, [x0]
     c08:	b	d2c <ERR_getErrorString+0x1c0>
     c0c:	adrp	x0, 0 <grub_memcpy>
     c10:	add	x0, x0, #0x0
     c14:	ldr	x0, [x0]
     c18:	b	d2c <ERR_getErrorString+0x1c0>
     c1c:	adrp	x0, 0 <grub_memcpy>
     c20:	add	x0, x0, #0x0
     c24:	ldr	x0, [x0]
     c28:	b	d2c <ERR_getErrorString+0x1c0>
     c2c:	adrp	x0, 0 <grub_memcpy>
     c30:	add	x0, x0, #0x0
     c34:	ldr	x0, [x0]
     c38:	b	d2c <ERR_getErrorString+0x1c0>
     c3c:	adrp	x0, 0 <grub_memcpy>
     c40:	add	x0, x0, #0x0
     c44:	ldr	x0, [x0]
     c48:	b	d2c <ERR_getErrorString+0x1c0>
     c4c:	adrp	x0, 0 <grub_memcpy>
     c50:	add	x0, x0, #0x0
     c54:	ldr	x0, [x0]
     c58:	b	d2c <ERR_getErrorString+0x1c0>
     c5c:	adrp	x0, 0 <grub_memcpy>
     c60:	add	x0, x0, #0x0
     c64:	ldr	x0, [x0]
     c68:	b	d2c <ERR_getErrorString+0x1c0>
     c6c:	adrp	x0, 0 <grub_memcpy>
     c70:	add	x0, x0, #0x0
     c74:	ldr	x0, [x0]
     c78:	b	d2c <ERR_getErrorString+0x1c0>
     c7c:	adrp	x0, 0 <grub_memcpy>
     c80:	add	x0, x0, #0x0
     c84:	ldr	x0, [x0]
     c88:	b	d2c <ERR_getErrorString+0x1c0>
     c8c:	adrp	x0, 0 <grub_memcpy>
     c90:	add	x0, x0, #0x0
     c94:	ldr	x0, [x0]
     c98:	b	d2c <ERR_getErrorString+0x1c0>
     c9c:	adrp	x0, 0 <grub_memcpy>
     ca0:	add	x0, x0, #0x0
     ca4:	ldr	x0, [x0]
     ca8:	b	d2c <ERR_getErrorString+0x1c0>
     cac:	adrp	x0, 0 <grub_memcpy>
     cb0:	add	x0, x0, #0x0
     cb4:	ldr	x0, [x0]
     cb8:	b	d2c <ERR_getErrorString+0x1c0>
     cbc:	adrp	x0, 0 <grub_memcpy>
     cc0:	add	x0, x0, #0x0
     cc4:	ldr	x0, [x0]
     cc8:	b	d2c <ERR_getErrorString+0x1c0>
     ccc:	adrp	x0, 0 <grub_memcpy>
     cd0:	add	x0, x0, #0x0
     cd4:	ldr	x0, [x0]
     cd8:	b	d2c <ERR_getErrorString+0x1c0>
     cdc:	adrp	x0, 0 <grub_memcpy>
     ce0:	add	x0, x0, #0x0
     ce4:	ldr	x0, [x0]
     ce8:	b	d2c <ERR_getErrorString+0x1c0>
     cec:	adrp	x0, 0 <grub_memcpy>
     cf0:	add	x0, x0, #0x0
     cf4:	ldr	x0, [x0]
     cf8:	b	d2c <ERR_getErrorString+0x1c0>
     cfc:	adrp	x0, 0 <grub_memcpy>
     d00:	add	x0, x0, #0x0
     d04:	ldr	x0, [x0]
     d08:	b	d2c <ERR_getErrorString+0x1c0>
     d0c:	adrp	x0, 0 <grub_memcpy>
     d10:	add	x0, x0, #0x0
     d14:	ldr	x0, [x0]
     d18:	b	d2c <ERR_getErrorString+0x1c0>
     d1c:	adrp	x0, 0 <grub_memcpy>
     d20:	add	x0, x0, #0x0
     d24:	ldr	x0, [x0]
     d28:	ldr	x0, [x0]
     d2c:	add	sp, sp, #0x10
     d30:	ret
     d34:	nop
	...

0000000000000e08 <grub_memcpy>:
     e08:	stp	x29, x30, [sp, #-48]!
     e0c:	mov	x29, sp
     e10:	str	x0, [sp, #40]
     e14:	str	x1, [sp, #32]
     e18:	str	x2, [sp, #24]
     e1c:	ldr	x2, [sp, #24]
     e20:	ldr	x1, [sp, #32]
     e24:	ldr	x0, [sp, #40]
     e28:	bl	0 <grub_memmove>
     e2c:	ldp	x29, x30, [sp], #48
     e30:	ret

0000000000000e34 <free>:
     e34:	stp	x29, x30, [sp, #-32]!
     e38:	mov	x29, sp
     e3c:	str	x0, [sp, #24]
     e40:	ldr	x0, [sp, #24]
     e44:	bl	0 <grub_free>
     e48:	nop
     e4c:	ldp	x29, x30, [sp], #32
     e50:	ret

0000000000000e54 <malloc>:
     e54:	stp	x29, x30, [sp, #-32]!
     e58:	mov	x29, sp
     e5c:	str	x0, [sp, #24]
     e60:	ldr	x0, [sp, #24]
     e64:	bl	0 <grub_malloc>
     e68:	ldp	x29, x30, [sp], #32
     e6c:	ret

0000000000000e70 <MEM_32bits>:
     e70:	mov	w0, #0x0                   	// #0
     e74:	ret

0000000000000e78 <MEM_isLittleEndian>:
     e78:	sub	sp, sp, #0x10
     e7c:	mov	w0, #0x1                   	// #1
     e80:	str	w0, [sp, #8]
     e84:	ldrb	w0, [sp, #8]
     e88:	add	sp, sp, #0x10
     e8c:	ret

0000000000000e90 <MEM_read32>:
     e90:	sub	sp, sp, #0x10
     e94:	str	x0, [sp, #8]
     e98:	ldr	x0, [sp, #8]
     e9c:	ldr	w0, [x0]
     ea0:	add	sp, sp, #0x10
     ea4:	ret

0000000000000ea8 <MEM_read64>:
     ea8:	sub	sp, sp, #0x10
     eac:	str	x0, [sp, #8]
     eb0:	ldr	x0, [sp, #8]
     eb4:	ldr	x0, [x0]
     eb8:	add	sp, sp, #0x10
     ebc:	ret

0000000000000ec0 <MEM_swap32>:
     ec0:	sub	sp, sp, #0x10
     ec4:	str	w0, [sp, #12]
     ec8:	ldr	w0, [sp, #12]
     ecc:	rev	w0, w0
     ed0:	add	sp, sp, #0x10
     ed4:	ret

0000000000000ed8 <MEM_swap64>:
     ed8:	sub	sp, sp, #0x10
     edc:	str	x0, [sp, #8]
     ee0:	ldr	x0, [sp, #8]
     ee4:	rev	x0, x0
     ee8:	add	sp, sp, #0x10
     eec:	ret

0000000000000ef0 <MEM_readLE32>:
     ef0:	stp	x29, x30, [sp, #-32]!
     ef4:	mov	x29, sp
     ef8:	str	x0, [sp, #24]
     efc:	bl	e78 <MEM_isLittleEndian>
     f00:	cmp	w0, #0x0
     f04:	b.eq	f14 <MEM_readLE32+0x24>  // b.none
     f08:	ldr	x0, [sp, #24]
     f0c:	bl	e90 <MEM_read32>
     f10:	b	f20 <MEM_readLE32+0x30>
     f14:	ldr	x0, [sp, #24]
     f18:	bl	e90 <MEM_read32>
     f1c:	bl	ec0 <MEM_swap32>
     f20:	ldp	x29, x30, [sp], #32
     f24:	ret

0000000000000f28 <MEM_readLE64>:
     f28:	stp	x29, x30, [sp, #-32]!
     f2c:	mov	x29, sp
     f30:	str	x0, [sp, #24]
     f34:	bl	e78 <MEM_isLittleEndian>
     f38:	cmp	w0, #0x0
     f3c:	b.eq	f4c <MEM_readLE64+0x24>  // b.none
     f40:	ldr	x0, [sp, #24]
     f44:	bl	ea8 <MEM_read64>
     f48:	b	f58 <MEM_readLE64+0x30>
     f4c:	ldr	x0, [sp, #24]
     f50:	bl	ea8 <MEM_read64>
     f54:	bl	ed8 <MEM_swap64>
     f58:	ldp	x29, x30, [sp], #32
     f5c:	ret

0000000000000f60 <MEM_readLEST>:
     f60:	stp	x29, x30, [sp, #-32]!
     f64:	mov	x29, sp
     f68:	str	x0, [sp, #24]
     f6c:	bl	e70 <MEM_32bits>
     f70:	cmp	w0, #0x0
     f74:	b.eq	f88 <MEM_readLEST+0x28>  // b.none
     f78:	ldr	x0, [sp, #24]
     f7c:	bl	ef0 <MEM_readLE32>
     f80:	mov	w0, w0
     f84:	b	f94 <MEM_readLEST+0x34>
     f88:	ldr	x0, [sp, #24]
     f8c:	bl	f28 <MEM_readLE64>
     f90:	nop
     f94:	ldp	x29, x30, [sp], #32
     f98:	ret

0000000000000f9c <ERR_isError>:
     f9c:	sub	sp, sp, #0x10
     fa0:	str	x0, [sp, #8]
     fa4:	ldr	x0, [sp, #8]
     fa8:	cmn	x0, #0x78
     fac:	cset	w0, hi  // hi = pmore
     fb0:	and	w0, w0, #0xff
     fb4:	add	sp, sp, #0x10
     fb8:	ret

0000000000000fbc <ERR_getErrorCode>:
     fbc:	stp	x29, x30, [sp, #-32]!
     fc0:	mov	x29, sp
     fc4:	str	x0, [sp, #24]
     fc8:	ldr	x0, [sp, #24]
     fcc:	bl	f9c <ERR_isError>
     fd0:	cmp	w0, #0x0
     fd4:	b.ne	fe0 <ERR_getErrorCode+0x24>  // b.any
     fd8:	mov	w0, #0x0                   	// #0
     fdc:	b	fe8 <ERR_getErrorCode+0x2c>
     fe0:	ldr	x0, [sp, #24]
     fe4:	neg	w0, w0
     fe8:	ldp	x29, x30, [sp], #32
     fec:	ret

0000000000000ff0 <ERR_getErrorName>:
     ff0:	stp	x29, x30, [sp, #-32]!
     ff4:	mov	x29, sp
     ff8:	str	x0, [sp, #24]
     ffc:	ldr	x0, [sp, #24]
    1000:	bl	fbc <ERR_getErrorCode>
    1004:	bl	b6c <ERR_getErrorString>
    1008:	ldp	x29, x30, [sp], #32
    100c:	ret

0000000000001010 <BIT_highbit32>:
    1010:	sub	sp, sp, #0x10
    1014:	str	w0, [sp, #12]
    1018:	ldr	w0, [sp, #12]
    101c:	clz	w0, w0
    1020:	mov	w1, #0x1f                  	// #31
    1024:	sub	w0, w1, w0
    1028:	add	sp, sp, #0x10
    102c:	ret

0000000000001030 <BIT_initDStream>:
    1030:	stp	x29, x30, [sp, #-64]!
    1034:	mov	x29, sp
    1038:	str	x0, [sp, #40]
    103c:	str	x1, [sp, #32]
    1040:	str	x2, [sp, #24]
    1044:	ldr	x0, [sp, #24]
    1048:	cmp	x0, #0x0
    104c:	b.ne	1068 <BIT_initDStream+0x38>  // b.any
    1050:	mov	x2, #0x28                  	// #40
    1054:	mov	w1, #0x0                   	// #0
    1058:	ldr	x0, [sp, #40]
    105c:	bl	0 <grub_memset>
    1060:	mov	x0, #0xffffffffffffffb8    	// #-72
    1064:	b	133c <BIT_initDStream+0x30c>
    1068:	ldr	x0, [sp, #40]
    106c:	ldr	x1, [sp, #32]
    1070:	str	x1, [x0, #24]
    1074:	ldr	x0, [sp, #40]
    1078:	ldr	x0, [x0, #24]
    107c:	add	x1, x0, #0x8
    1080:	ldr	x0, [sp, #40]
    1084:	str	x1, [x0, #32]
    1088:	ldr	x0, [sp, #24]
    108c:	cmp	x0, #0x7
    1090:	b.ls	1120 <BIT_initDStream+0xf0>  // b.plast
    1094:	ldr	x0, [sp, #24]
    1098:	sub	x0, x0, #0x8
    109c:	ldr	x1, [sp, #32]
    10a0:	add	x1, x1, x0
    10a4:	ldr	x0, [sp, #40]
    10a8:	str	x1, [x0, #16]
    10ac:	ldr	x0, [sp, #40]
    10b0:	ldr	x0, [x0, #16]
    10b4:	bl	f60 <MEM_readLEST>
    10b8:	mov	x1, x0
    10bc:	ldr	x0, [sp, #40]
    10c0:	str	x1, [x0]
    10c4:	ldr	x0, [sp, #24]
    10c8:	sub	x0, x0, #0x1
    10cc:	ldr	x1, [sp, #32]
    10d0:	add	x0, x1, x0
    10d4:	ldrb	w0, [x0]
    10d8:	strb	w0, [sp, #62]
    10dc:	ldrb	w0, [sp, #62]
    10e0:	cmp	w0, #0x0
    10e4:	b.eq	1100 <BIT_initDStream+0xd0>  // b.none
    10e8:	ldrb	w0, [sp, #62]
    10ec:	bl	1010 <BIT_highbit32>
    10f0:	mov	w1, w0
    10f4:	mov	w0, #0x8                   	// #8
    10f8:	sub	w0, w0, w1
    10fc:	b	1104 <BIT_initDStream+0xd4>
    1100:	mov	w0, #0x0                   	// #0
    1104:	ldr	x1, [sp, #40]
    1108:	str	w0, [x1, #8]
    110c:	ldrb	w0, [sp, #62]
    1110:	cmp	w0, #0x0
    1114:	b.ne	1338 <BIT_initDStream+0x308>  // b.any
    1118:	mov	x0, #0xffffffffffffffff    	// #-1
    111c:	b	133c <BIT_initDStream+0x30c>
    1120:	ldr	x0, [sp, #40]
    1124:	ldr	x1, [x0, #24]
    1128:	ldr	x0, [sp, #40]
    112c:	str	x1, [x0, #16]
    1130:	ldr	x0, [sp, #40]
    1134:	ldr	x0, [x0, #24]
    1138:	ldrb	w0, [x0]
    113c:	and	x1, x0, #0xff
    1140:	ldr	x0, [sp, #40]
    1144:	str	x1, [x0]
    1148:	ldr	x0, [sp, #24]
    114c:	cmp	x0, #0x7
    1150:	b.eq	11c4 <BIT_initDStream+0x194>  // b.none
    1154:	ldr	x0, [sp, #24]
    1158:	cmp	x0, #0x7
    115c:	b.hi	12b4 <BIT_initDStream+0x284>  // b.pmore
    1160:	ldr	x0, [sp, #24]
    1164:	cmp	x0, #0x6
    1168:	b.eq	11ec <BIT_initDStream+0x1bc>  // b.none
    116c:	ldr	x0, [sp, #24]
    1170:	cmp	x0, #0x6
    1174:	b.hi	12b4 <BIT_initDStream+0x284>  // b.pmore
    1178:	ldr	x0, [sp, #24]
    117c:	cmp	x0, #0x5
    1180:	b.eq	1214 <BIT_initDStream+0x1e4>  // b.none
    1184:	ldr	x0, [sp, #24]
    1188:	cmp	x0, #0x5
    118c:	b.hi	12b4 <BIT_initDStream+0x284>  // b.pmore
    1190:	ldr	x0, [sp, #24]
    1194:	cmp	x0, #0x4
    1198:	b.eq	123c <BIT_initDStream+0x20c>  // b.none
    119c:	ldr	x0, [sp, #24]
    11a0:	cmp	x0, #0x4
    11a4:	b.hi	12b4 <BIT_initDStream+0x284>  // b.pmore
    11a8:	ldr	x0, [sp, #24]
    11ac:	cmp	x0, #0x2
    11b0:	b.eq	128c <BIT_initDStream+0x25c>  // b.none
    11b4:	ldr	x0, [sp, #24]
    11b8:	cmp	x0, #0x3
    11bc:	b.eq	1264 <BIT_initDStream+0x234>  // b.none
    11c0:	b	12b4 <BIT_initDStream+0x284>
    11c4:	ldr	x0, [sp, #40]
    11c8:	ldr	x1, [x0]
    11cc:	ldr	x0, [sp, #32]
    11d0:	add	x0, x0, #0x6
    11d4:	ldrb	w0, [x0]
    11d8:	and	x0, x0, #0xff
    11dc:	lsl	x0, x0, #48
    11e0:	add	x1, x1, x0
    11e4:	ldr	x0, [sp, #40]
    11e8:	str	x1, [x0]
    11ec:	ldr	x0, [sp, #40]
    11f0:	ldr	x1, [x0]
    11f4:	ldr	x0, [sp, #32]
    11f8:	add	x0, x0, #0x5
    11fc:	ldrb	w0, [x0]
    1200:	and	x0, x0, #0xff
    1204:	lsl	x0, x0, #40
    1208:	add	x1, x1, x0
    120c:	ldr	x0, [sp, #40]
    1210:	str	x1, [x0]
    1214:	ldr	x0, [sp, #40]
    1218:	ldr	x1, [x0]
    121c:	ldr	x0, [sp, #32]
    1220:	add	x0, x0, #0x4
    1224:	ldrb	w0, [x0]
    1228:	and	x0, x0, #0xff
    122c:	lsl	x0, x0, #32
    1230:	add	x1, x1, x0
    1234:	ldr	x0, [sp, #40]
    1238:	str	x1, [x0]
    123c:	ldr	x0, [sp, #40]
    1240:	ldr	x1, [x0]
    1244:	ldr	x0, [sp, #32]
    1248:	add	x0, x0, #0x3
    124c:	ldrb	w0, [x0]
    1250:	and	x0, x0, #0xff
    1254:	lsl	x0, x0, #24
    1258:	add	x1, x1, x0
    125c:	ldr	x0, [sp, #40]
    1260:	str	x1, [x0]
    1264:	ldr	x0, [sp, #40]
    1268:	ldr	x1, [x0]
    126c:	ldr	x0, [sp, #32]
    1270:	add	x0, x0, #0x2
    1274:	ldrb	w0, [x0]
    1278:	and	x0, x0, #0xff
    127c:	lsl	x0, x0, #16
    1280:	add	x1, x1, x0
    1284:	ldr	x0, [sp, #40]
    1288:	str	x1, [x0]
    128c:	ldr	x0, [sp, #40]
    1290:	ldr	x1, [x0]
    1294:	ldr	x0, [sp, #32]
    1298:	add	x0, x0, #0x1
    129c:	ldrb	w0, [x0]
    12a0:	and	x0, x0, #0xff
    12a4:	lsl	x0, x0, #8
    12a8:	add	x1, x1, x0
    12ac:	ldr	x0, [sp, #40]
    12b0:	str	x1, [x0]
    12b4:	ldr	x0, [sp, #24]
    12b8:	sub	x0, x0, #0x1
    12bc:	ldr	x1, [sp, #32]
    12c0:	add	x0, x1, x0
    12c4:	ldrb	w0, [x0]
    12c8:	strb	w0, [sp, #63]
    12cc:	ldrb	w0, [sp, #63]
    12d0:	cmp	w0, #0x0
    12d4:	b.eq	12f0 <BIT_initDStream+0x2c0>  // b.none
    12d8:	ldrb	w0, [sp, #63]
    12dc:	bl	1010 <BIT_highbit32>
    12e0:	mov	w1, w0
    12e4:	mov	w0, #0x8                   	// #8
    12e8:	sub	w0, w0, w1
    12ec:	b	12f4 <BIT_initDStream+0x2c4>
    12f0:	mov	w0, #0x0                   	// #0
    12f4:	ldr	x1, [sp, #40]
    12f8:	str	w0, [x1, #8]
    12fc:	ldrb	w0, [sp, #63]
    1300:	cmp	w0, #0x0
    1304:	b.ne	1310 <BIT_initDStream+0x2e0>  // b.any
    1308:	mov	x0, #0xffffffffffffffec    	// #-20
    130c:	b	133c <BIT_initDStream+0x30c>
    1310:	ldr	x0, [sp, #40]
    1314:	ldr	w1, [x0, #8]
    1318:	ldr	x0, [sp, #24]
    131c:	mov	w2, w0
    1320:	mov	w0, #0x8                   	// #8
    1324:	sub	w0, w0, w2
    1328:	lsl	w0, w0, #3
    132c:	add	w1, w1, w0
    1330:	ldr	x0, [sp, #40]
    1334:	str	w1, [x0, #8]
    1338:	ldr	x0, [sp, #24]
    133c:	ldp	x29, x30, [sp], #64
    1340:	ret

0000000000001344 <BIT_lookBits>:
    1344:	sub	sp, sp, #0x20
    1348:	str	x0, [sp, #8]
    134c:	str	w1, [sp, #4]
    1350:	mov	w0, #0x3f                  	// #63
    1354:	str	w0, [sp, #28]
    1358:	ldr	x0, [sp, #8]
    135c:	ldr	x1, [x0]
    1360:	ldr	x0, [sp, #8]
    1364:	ldr	w2, [x0, #8]
    1368:	ldr	w0, [sp, #28]
    136c:	and	w0, w2, w0
    1370:	lsl	x0, x1, x0
    1374:	lsr	x1, x0, #1
    1378:	ldr	w2, [sp, #28]
    137c:	ldr	w0, [sp, #4]
    1380:	sub	w2, w2, w0
    1384:	ldr	w0, [sp, #28]
    1388:	and	w0, w2, w0
    138c:	lsr	x0, x1, x0
    1390:	add	sp, sp, #0x20
    1394:	ret

0000000000001398 <BIT_lookBitsFast>:
    1398:	sub	sp, sp, #0x20
    139c:	str	x0, [sp, #8]
    13a0:	str	w1, [sp, #4]
    13a4:	mov	w0, #0x3f                  	// #63
    13a8:	str	w0, [sp, #28]
    13ac:	ldr	x0, [sp, #8]
    13b0:	ldr	x1, [x0]
    13b4:	ldr	x0, [sp, #8]
    13b8:	ldr	w2, [x0, #8]
    13bc:	ldr	w0, [sp, #28]
    13c0:	and	w0, w2, w0
    13c4:	lsl	x1, x1, x0
    13c8:	ldr	w2, [sp, #28]
    13cc:	ldr	w0, [sp, #4]
    13d0:	sub	w0, w2, w0
    13d4:	add	w2, w0, #0x1
    13d8:	ldr	w0, [sp, #28]
    13dc:	and	w0, w2, w0
    13e0:	lsr	x0, x1, x0
    13e4:	add	sp, sp, #0x20
    13e8:	ret

00000000000013ec <BIT_skipBits>:
    13ec:	sub	sp, sp, #0x10
    13f0:	str	x0, [sp, #8]
    13f4:	str	w1, [sp, #4]
    13f8:	ldr	x0, [sp, #8]
    13fc:	ldr	w1, [x0, #8]
    1400:	ldr	w0, [sp, #4]
    1404:	add	w1, w1, w0
    1408:	ldr	x0, [sp, #8]
    140c:	str	w1, [x0, #8]
    1410:	nop
    1414:	add	sp, sp, #0x10
    1418:	ret

000000000000141c <BIT_readBits>:
    141c:	stp	x29, x30, [sp, #-48]!
    1420:	mov	x29, sp
    1424:	str	x0, [sp, #24]
    1428:	str	w1, [sp, #20]
    142c:	ldr	w1, [sp, #20]
    1430:	ldr	x0, [sp, #24]
    1434:	bl	1344 <BIT_lookBits>
    1438:	str	x0, [sp, #40]
    143c:	ldr	w1, [sp, #20]
    1440:	ldr	x0, [sp, #24]
    1444:	bl	13ec <BIT_skipBits>
    1448:	ldr	x0, [sp, #40]
    144c:	ldp	x29, x30, [sp], #48
    1450:	ret

0000000000001454 <BIT_readBitsFast>:
    1454:	stp	x29, x30, [sp, #-48]!
    1458:	mov	x29, sp
    145c:	str	x0, [sp, #24]
    1460:	str	w1, [sp, #20]
    1464:	ldr	w1, [sp, #20]
    1468:	ldr	x0, [sp, #24]
    146c:	bl	1398 <BIT_lookBitsFast>
    1470:	str	x0, [sp, #40]
    1474:	ldr	w1, [sp, #20]
    1478:	ldr	x0, [sp, #24]
    147c:	bl	13ec <BIT_skipBits>
    1480:	ldr	x0, [sp, #40]
    1484:	ldp	x29, x30, [sp], #48
    1488:	ret

000000000000148c <BIT_reloadDStream>:
    148c:	stp	x29, x30, [sp, #-48]!
    1490:	mov	x29, sp
    1494:	str	x0, [sp, #24]
    1498:	ldr	x0, [sp, #24]
    149c:	ldr	w0, [x0, #8]
    14a0:	cmp	w0, #0x40
    14a4:	b.ls	14b0 <BIT_reloadDStream+0x24>  // b.plast
    14a8:	mov	w0, #0x3                   	// #3
    14ac:	b	1608 <BIT_reloadDStream+0x17c>
    14b0:	ldr	x0, [sp, #24]
    14b4:	ldr	x1, [x0, #16]
    14b8:	ldr	x0, [sp, #24]
    14bc:	ldr	x0, [x0, #32]
    14c0:	cmp	x1, x0
    14c4:	b.cc	1524 <BIT_reloadDStream+0x98>  // b.lo, b.ul, b.last
    14c8:	ldr	x0, [sp, #24]
    14cc:	ldr	x1, [x0, #16]
    14d0:	ldr	x0, [sp, #24]
    14d4:	ldr	w0, [x0, #8]
    14d8:	lsr	w0, w0, #3
    14dc:	mov	w0, w0
    14e0:	neg	x0, x0
    14e4:	add	x1, x1, x0
    14e8:	ldr	x0, [sp, #24]
    14ec:	str	x1, [x0, #16]
    14f0:	ldr	x0, [sp, #24]
    14f4:	ldr	w0, [x0, #8]
    14f8:	and	w1, w0, #0x7
    14fc:	ldr	x0, [sp, #24]
    1500:	str	w1, [x0, #8]
    1504:	ldr	x0, [sp, #24]
    1508:	ldr	x0, [x0, #16]
    150c:	bl	f60 <MEM_readLEST>
    1510:	mov	x1, x0
    1514:	ldr	x0, [sp, #24]
    1518:	str	x1, [x0]
    151c:	mov	w0, #0x0                   	// #0
    1520:	b	1608 <BIT_reloadDStream+0x17c>
    1524:	ldr	x0, [sp, #24]
    1528:	ldr	x1, [x0, #16]
    152c:	ldr	x0, [sp, #24]
    1530:	ldr	x0, [x0, #24]
    1534:	cmp	x1, x0
    1538:	b.ne	155c <BIT_reloadDStream+0xd0>  // b.any
    153c:	ldr	x0, [sp, #24]
    1540:	ldr	w0, [x0, #8]
    1544:	cmp	w0, #0x3f
    1548:	b.hi	1554 <BIT_reloadDStream+0xc8>  // b.pmore
    154c:	mov	w0, #0x1                   	// #1
    1550:	b	1608 <BIT_reloadDStream+0x17c>
    1554:	mov	w0, #0x2                   	// #2
    1558:	b	1608 <BIT_reloadDStream+0x17c>
    155c:	ldr	x0, [sp, #24]
    1560:	ldr	w0, [x0, #8]
    1564:	lsr	w0, w0, #3
    1568:	str	w0, [sp, #44]
    156c:	str	wzr, [sp, #40]
    1570:	ldr	x0, [sp, #24]
    1574:	ldr	x1, [x0, #16]
    1578:	ldr	w0, [sp, #44]
    157c:	neg	x0, x0
    1580:	add	x1, x1, x0
    1584:	ldr	x0, [sp, #24]
    1588:	ldr	x0, [x0, #24]
    158c:	cmp	x1, x0
    1590:	b.cs	15b4 <BIT_reloadDStream+0x128>  // b.hs, b.nlast
    1594:	ldr	x0, [sp, #24]
    1598:	ldr	x1, [x0, #16]
    159c:	ldr	x0, [sp, #24]
    15a0:	ldr	x0, [x0, #24]
    15a4:	sub	x0, x1, x0
    15a8:	str	w0, [sp, #44]
    15ac:	mov	w0, #0x1                   	// #1
    15b0:	str	w0, [sp, #40]
    15b4:	ldr	x0, [sp, #24]
    15b8:	ldr	x1, [x0, #16]
    15bc:	ldr	w0, [sp, #44]
    15c0:	neg	x0, x0
    15c4:	add	x1, x1, x0
    15c8:	ldr	x0, [sp, #24]
    15cc:	str	x1, [x0, #16]
    15d0:	ldr	x0, [sp, #24]
    15d4:	ldr	w1, [x0, #8]
    15d8:	ldr	w0, [sp, #44]
    15dc:	lsl	w0, w0, #3
    15e0:	sub	w1, w1, w0
    15e4:	ldr	x0, [sp, #24]
    15e8:	str	w1, [x0, #8]
    15ec:	ldr	x0, [sp, #24]
    15f0:	ldr	x0, [x0, #16]
    15f4:	bl	f60 <MEM_readLEST>
    15f8:	mov	x1, x0
    15fc:	ldr	x0, [sp, #24]
    1600:	str	x1, [x0]
    1604:	ldr	w0, [sp, #40]
    1608:	ldp	x29, x30, [sp], #48
    160c:	ret

0000000000001610 <FSE_initDState>:
    1610:	stp	x29, x30, [sp, #-64]!
    1614:	mov	x29, sp
    1618:	str	x0, [sp, #40]
    161c:	str	x1, [sp, #32]
    1620:	str	x2, [sp, #24]
    1624:	ldr	x0, [sp, #24]
    1628:	str	x0, [sp, #56]
    162c:	ldr	x0, [sp, #56]
    1630:	str	x0, [sp, #48]
    1634:	ldr	x0, [sp, #48]
    1638:	ldrh	w0, [x0]
    163c:	mov	w1, w0
    1640:	ldr	x0, [sp, #32]
    1644:	bl	141c <BIT_readBits>
    1648:	mov	x1, x0
    164c:	ldr	x0, [sp, #40]
    1650:	str	x1, [x0]
    1654:	ldr	x0, [sp, #32]
    1658:	bl	148c <BIT_reloadDStream>
    165c:	ldr	x0, [sp, #24]
    1660:	add	x1, x0, #0x4
    1664:	ldr	x0, [sp, #40]
    1668:	str	x1, [x0, #8]
    166c:	nop
    1670:	ldp	x29, x30, [sp], #64
    1674:	ret

0000000000001678 <FSE_decodeSymbol>:
    1678:	stp	x29, x30, [sp, #-64]!
    167c:	mov	x29, sp
    1680:	str	x0, [sp, #24]
    1684:	str	x1, [sp, #16]
    1688:	ldr	x0, [sp, #24]
    168c:	ldr	x1, [x0, #8]
    1690:	ldr	x0, [sp, #24]
    1694:	ldr	x0, [x0]
    1698:	lsl	x0, x0, #2
    169c:	add	x0, x1, x0
    16a0:	ldr	w0, [x0]
    16a4:	str	w0, [sp, #40]
    16a8:	ldrb	w0, [sp, #43]
    16ac:	str	w0, [sp, #60]
    16b0:	ldrb	w0, [sp, #42]
    16b4:	strb	w0, [sp, #59]
    16b8:	ldr	w1, [sp, #60]
    16bc:	ldr	x0, [sp, #16]
    16c0:	bl	141c <BIT_readBits>
    16c4:	str	x0, [sp, #48]
    16c8:	ldrh	w0, [sp, #40]
    16cc:	and	x1, x0, #0xffff
    16d0:	ldr	x0, [sp, #48]
    16d4:	add	x1, x1, x0
    16d8:	ldr	x0, [sp, #24]
    16dc:	str	x1, [x0]
    16e0:	ldrb	w0, [sp, #59]
    16e4:	ldp	x29, x30, [sp], #64
    16e8:	ret

00000000000016ec <FSE_decodeSymbolFast>:
    16ec:	stp	x29, x30, [sp, #-64]!
    16f0:	mov	x29, sp
    16f4:	str	x0, [sp, #24]
    16f8:	str	x1, [sp, #16]
    16fc:	ldr	x0, [sp, #24]
    1700:	ldr	x1, [x0, #8]
    1704:	ldr	x0, [sp, #24]
    1708:	ldr	x0, [x0]
    170c:	lsl	x0, x0, #2
    1710:	add	x0, x1, x0
    1714:	ldr	w0, [x0]
    1718:	str	w0, [sp, #40]
    171c:	ldrb	w0, [sp, #43]
    1720:	str	w0, [sp, #60]
    1724:	ldrb	w0, [sp, #42]
    1728:	strb	w0, [sp, #59]
    172c:	ldr	w1, [sp, #60]
    1730:	ldr	x0, [sp, #16]
    1734:	bl	1454 <BIT_readBitsFast>
    1738:	str	x0, [sp, #48]
    173c:	ldrh	w0, [sp, #40]
    1740:	and	x1, x0, #0xffff
    1744:	ldr	x0, [sp, #48]
    1748:	add	x1, x1, x0
    174c:	ldr	x0, [sp, #24]
    1750:	str	x1, [x0]
    1754:	ldrb	w0, [sp, #59]
    1758:	ldp	x29, x30, [sp], #64
    175c:	ret

0000000000001760 <FSE_createDTable>:
    1760:	stp	x29, x30, [sp, #-32]!
    1764:	mov	x29, sp
    1768:	str	w0, [sp, #28]
    176c:	ldr	w0, [sp, #28]
    1770:	cmp	w0, #0xf
    1774:	b.ls	1780 <FSE_createDTable+0x20>  // b.plast
    1778:	mov	w0, #0xf                   	// #15
    177c:	str	w0, [sp, #28]
    1780:	ldr	w0, [sp, #28]
    1784:	mov	w1, #0x1                   	// #1
    1788:	lsl	w0, w1, w0
    178c:	add	w0, w0, #0x1
    1790:	sxtw	x0, w0
    1794:	lsl	x0, x0, #2
    1798:	bl	e54 <malloc>
    179c:	ldp	x29, x30, [sp], #32
    17a0:	ret

00000000000017a4 <FSE_freeDTable>:
    17a4:	stp	x29, x30, [sp, #-32]!
    17a8:	mov	x29, sp
    17ac:	str	x0, [sp, #24]
    17b0:	ldr	x0, [sp, #24]
    17b4:	bl	e34 <free>
    17b8:	nop
    17bc:	ldp	x29, x30, [sp], #32
    17c0:	ret

00000000000017c4 <FSE_buildDTable>:
    17c4:	sub	sp, sp, #0x290
    17c8:	stp	x29, x30, [sp]
    17cc:	mov	x29, sp
    17d0:	str	x19, [sp, #16]
    17d4:	str	x0, [sp, #56]
    17d8:	str	x1, [sp, #48]
    17dc:	str	w2, [sp, #44]
    17e0:	str	w3, [sp, #40]
    17e4:	ldr	x0, [sp, #56]
    17e8:	add	x0, x0, #0x4
    17ec:	str	x0, [sp, #624]
    17f0:	ldr	x0, [sp, #624]
    17f4:	str	x0, [sp, #616]
    17f8:	ldr	w0, [sp, #44]
    17fc:	add	w0, w0, #0x1
    1800:	str	w0, [sp, #612]
    1804:	ldr	w0, [sp, #40]
    1808:	mov	w1, #0x1                   	// #1
    180c:	lsl	w0, w1, w0
    1810:	str	w0, [sp, #608]
    1814:	ldr	w0, [sp, #608]
    1818:	sub	w0, w0, #0x1
    181c:	str	w0, [sp, #652]
    1820:	ldr	w0, [sp, #44]
    1824:	cmp	w0, #0xff
    1828:	b.ls	1834 <FSE_buildDTable+0x70>  // b.plast
    182c:	mov	x0, #0xffffffffffffffd2    	// #-46
    1830:	b	1b34 <FSE_buildDTable+0x370>
    1834:	ldr	w0, [sp, #40]
    1838:	cmp	w0, #0xc
    183c:	b.ls	1848 <FSE_buildDTable+0x84>  // b.plast
    1840:	mov	x0, #0xffffffffffffffd4    	// #-44
    1844:	b	1b34 <FSE_buildDTable+0x370>
    1848:	ldr	w0, [sp, #40]
    184c:	and	w0, w0, #0xffff
    1850:	strh	w0, [sp, #64]
    1854:	mov	w0, #0x1                   	// #1
    1858:	strh	w0, [sp, #66]
    185c:	ldr	w0, [sp, #40]
    1860:	sub	w0, w0, #0x1
    1864:	mov	w1, #0x1                   	// #1
    1868:	lsl	w0, w1, w0
    186c:	strh	w0, [sp, #606]
    1870:	str	wzr, [sp, #648]
    1874:	b	192c <FSE_buildDTable+0x168>
    1878:	ldr	w0, [sp, #648]
    187c:	lsl	x0, x0, #1
    1880:	ldr	x1, [sp, #48]
    1884:	add	x0, x1, x0
    1888:	ldrsh	w0, [x0]
    188c:	cmn	w0, #0x1
    1890:	b.ne	18d4 <FSE_buildDTable+0x110>  // b.any
    1894:	ldr	w0, [sp, #652]
    1898:	sub	w1, w0, #0x1
    189c:	str	w1, [sp, #652]
    18a0:	mov	w0, w0
    18a4:	lsl	x0, x0, #2
    18a8:	ldr	x1, [sp, #616]
    18ac:	add	x0, x1, x0
    18b0:	ldr	w1, [sp, #648]
    18b4:	and	w1, w1, #0xff
    18b8:	strb	w1, [x0, #2]
    18bc:	ldr	w0, [sp, #648]
    18c0:	lsl	x0, x0, #1
    18c4:	add	x1, sp, #0x48
    18c8:	mov	w2, #0x1                   	// #1
    18cc:	strh	w2, [x1, x0]
    18d0:	b	1920 <FSE_buildDTable+0x15c>
    18d4:	ldr	w0, [sp, #648]
    18d8:	lsl	x0, x0, #1
    18dc:	ldr	x1, [sp, #48]
    18e0:	add	x0, x1, x0
    18e4:	ldrsh	w0, [x0]
    18e8:	ldrsh	w1, [sp, #606]
    18ec:	cmp	w1, w0
    18f0:	b.gt	18f8 <FSE_buildDTable+0x134>
    18f4:	strh	wzr, [sp, #66]
    18f8:	ldr	w0, [sp, #648]
    18fc:	lsl	x0, x0, #1
    1900:	ldr	x1, [sp, #48]
    1904:	add	x0, x1, x0
    1908:	ldrsh	w0, [x0]
    190c:	and	w2, w0, #0xffff
    1910:	ldr	w0, [sp, #648]
    1914:	lsl	x0, x0, #1
    1918:	add	x1, sp, #0x48
    191c:	strh	w2, [x1, x0]
    1920:	ldr	w0, [sp, #648]
    1924:	add	w0, w0, #0x1
    1928:	str	w0, [sp, #648]
    192c:	ldr	w1, [sp, #648]
    1930:	ldr	w0, [sp, #612]
    1934:	cmp	w1, w0
    1938:	b.cc	1878 <FSE_buildDTable+0xb4>  // b.lo, b.ul, b.last
    193c:	add	x0, sp, #0x40
    1940:	mov	x2, #0x4                   	// #4
    1944:	mov	x1, x0
    1948:	ldr	x0, [sp, #56]
    194c:	bl	e08 <grub_memcpy>
    1950:	ldr	w0, [sp, #608]
    1954:	sub	w0, w0, #0x1
    1958:	str	w0, [sp, #600]
    195c:	ldr	w0, [sp, #608]
    1960:	lsr	w1, w0, #1
    1964:	ldr	w0, [sp, #608]
    1968:	lsr	w0, w0, #3
    196c:	add	w0, w1, w0
    1970:	add	w0, w0, #0x3
    1974:	str	w0, [sp, #596]
    1978:	str	wzr, [sp, #640]
    197c:	str	wzr, [sp, #644]
    1980:	b	1a28 <FSE_buildDTable+0x264>
    1984:	str	wzr, [sp, #636]
    1988:	b	19f8 <FSE_buildDTable+0x234>
    198c:	ldr	w0, [sp, #640]
    1990:	lsl	x0, x0, #2
    1994:	ldr	x1, [sp, #616]
    1998:	add	x0, x1, x0
    199c:	ldr	w1, [sp, #644]
    19a0:	and	w1, w1, #0xff
    19a4:	strb	w1, [x0, #2]
    19a8:	ldr	w1, [sp, #640]
    19ac:	ldr	w0, [sp, #596]
    19b0:	add	w0, w1, w0
    19b4:	ldr	w1, [sp, #600]
    19b8:	and	w0, w1, w0
    19bc:	str	w0, [sp, #640]
    19c0:	b	19dc <FSE_buildDTable+0x218>
    19c4:	ldr	w1, [sp, #640]
    19c8:	ldr	w0, [sp, #596]
    19cc:	add	w0, w1, w0
    19d0:	ldr	w1, [sp, #600]
    19d4:	and	w0, w1, w0
    19d8:	str	w0, [sp, #640]
    19dc:	ldr	w1, [sp, #640]
    19e0:	ldr	w0, [sp, #652]
    19e4:	cmp	w1, w0
    19e8:	b.hi	19c4 <FSE_buildDTable+0x200>  // b.pmore
    19ec:	ldr	w0, [sp, #636]
    19f0:	add	w0, w0, #0x1
    19f4:	str	w0, [sp, #636]
    19f8:	ldr	w0, [sp, #644]
    19fc:	lsl	x0, x0, #1
    1a00:	ldr	x1, [sp, #48]
    1a04:	add	x0, x1, x0
    1a08:	ldrsh	w0, [x0]
    1a0c:	mov	w1, w0
    1a10:	ldr	w0, [sp, #636]
    1a14:	cmp	w0, w1
    1a18:	b.lt	198c <FSE_buildDTable+0x1c8>  // b.tstop
    1a1c:	ldr	w0, [sp, #644]
    1a20:	add	w0, w0, #0x1
    1a24:	str	w0, [sp, #644]
    1a28:	ldr	w1, [sp, #644]
    1a2c:	ldr	w0, [sp, #612]
    1a30:	cmp	w1, w0
    1a34:	b.cc	1984 <FSE_buildDTable+0x1c0>  // b.lo, b.ul, b.last
    1a38:	ldr	w0, [sp, #640]
    1a3c:	cmp	w0, #0x0
    1a40:	b.eq	1a4c <FSE_buildDTable+0x288>  // b.none
    1a44:	mov	x0, #0xffffffffffffffff    	// #-1
    1a48:	b	1b34 <FSE_buildDTable+0x370>
    1a4c:	str	wzr, [sp, #632]
    1a50:	b	1b20 <FSE_buildDTable+0x35c>
    1a54:	ldr	w0, [sp, #632]
    1a58:	lsl	x0, x0, #2
    1a5c:	ldr	x1, [sp, #616]
    1a60:	add	x0, x1, x0
    1a64:	ldrb	w0, [x0, #2]
    1a68:	strb	w0, [sp, #595]
    1a6c:	ldrb	w2, [sp, #595]
    1a70:	sxtw	x0, w2
    1a74:	lsl	x0, x0, #1
    1a78:	add	x1, sp, #0x48
    1a7c:	ldrh	w0, [x1, x0]
    1a80:	add	w1, w0, #0x1
    1a84:	and	w3, w1, #0xffff
    1a88:	sxtw	x1, w2
    1a8c:	lsl	x1, x1, #1
    1a90:	add	x2, sp, #0x48
    1a94:	strh	w3, [x2, x1]
    1a98:	str	w0, [sp, #588]
    1a9c:	ldr	w0, [sp, #40]
    1aa0:	and	w19, w0, #0xff
    1aa4:	ldr	w0, [sp, #588]
    1aa8:	bl	1010 <BIT_highbit32>
    1aac:	and	w1, w0, #0xff
    1ab0:	ldr	w0, [sp, #632]
    1ab4:	lsl	x0, x0, #2
    1ab8:	ldr	x2, [sp, #616]
    1abc:	add	x0, x2, x0
    1ac0:	sub	w1, w19, w1
    1ac4:	and	w1, w1, #0xff
    1ac8:	strb	w1, [x0, #3]
    1acc:	ldr	w0, [sp, #632]
    1ad0:	lsl	x0, x0, #2
    1ad4:	ldr	x1, [sp, #616]
    1ad8:	add	x0, x1, x0
    1adc:	ldrb	w0, [x0, #3]
    1ae0:	mov	w1, w0
    1ae4:	ldr	w0, [sp, #588]
    1ae8:	lsl	w0, w0, w1
    1aec:	and	w2, w0, #0xffff
    1af0:	ldr	w0, [sp, #608]
    1af4:	and	w1, w0, #0xffff
    1af8:	ldr	w0, [sp, #632]
    1afc:	lsl	x0, x0, #2
    1b00:	ldr	x3, [sp, #616]
    1b04:	add	x0, x3, x0
    1b08:	sub	w1, w2, w1
    1b0c:	and	w1, w1, #0xffff
    1b10:	strh	w1, [x0]
    1b14:	ldr	w0, [sp, #632]
    1b18:	add	w0, w0, #0x1
    1b1c:	str	w0, [sp, #632]
    1b20:	ldr	w1, [sp, #632]
    1b24:	ldr	w0, [sp, #608]
    1b28:	cmp	w1, w0
    1b2c:	b.cc	1a54 <FSE_buildDTable+0x290>  // b.lo, b.ul, b.last
    1b30:	mov	x0, #0x0                   	// #0
    1b34:	ldr	x19, [sp, #16]
    1b38:	ldp	x29, x30, [sp]
    1b3c:	add	sp, sp, #0x290
    1b40:	ret

0000000000001b44 <FSE_buildDTable_rle>:
    1b44:	sub	sp, sp, #0x30
    1b48:	str	x0, [sp, #8]
    1b4c:	strb	w1, [sp, #7]
    1b50:	ldr	x0, [sp, #8]
    1b54:	str	x0, [sp, #40]
    1b58:	ldr	x0, [sp, #40]
    1b5c:	str	x0, [sp, #32]
    1b60:	ldr	x0, [sp, #8]
    1b64:	add	x0, x0, #0x4
    1b68:	str	x0, [sp, #24]
    1b6c:	ldr	x0, [sp, #24]
    1b70:	str	x0, [sp, #16]
    1b74:	ldr	x0, [sp, #32]
    1b78:	strh	wzr, [x0]
    1b7c:	ldr	x0, [sp, #32]
    1b80:	strh	wzr, [x0, #2]
    1b84:	ldr	x0, [sp, #16]
    1b88:	strh	wzr, [x0]
    1b8c:	ldr	x0, [sp, #16]
    1b90:	ldrb	w1, [sp, #7]
    1b94:	strb	w1, [x0, #2]
    1b98:	ldr	x0, [sp, #16]
    1b9c:	strb	wzr, [x0, #3]
    1ba0:	mov	x0, #0x0                   	// #0
    1ba4:	add	sp, sp, #0x30
    1ba8:	ret

0000000000001bac <FSE_buildDTable_raw>:
    1bac:	sub	sp, sp, #0x50
    1bb0:	str	x0, [sp, #8]
    1bb4:	str	w1, [sp, #4]
    1bb8:	ldr	x0, [sp, #8]
    1bbc:	str	x0, [sp, #64]
    1bc0:	ldr	x0, [sp, #64]
    1bc4:	str	x0, [sp, #56]
    1bc8:	ldr	x0, [sp, #8]
    1bcc:	add	x0, x0, #0x4
    1bd0:	str	x0, [sp, #48]
    1bd4:	ldr	x0, [sp, #48]
    1bd8:	str	x0, [sp, #40]
    1bdc:	ldr	w0, [sp, #4]
    1be0:	mov	w1, #0x1                   	// #1
    1be4:	lsl	w0, w1, w0
    1be8:	str	w0, [sp, #36]
    1bec:	ldr	w0, [sp, #36]
    1bf0:	sub	w0, w0, #0x1
    1bf4:	str	w0, [sp, #32]
    1bf8:	ldr	w0, [sp, #32]
    1bfc:	add	w0, w0, #0x1
    1c00:	str	w0, [sp, #28]
    1c04:	ldr	w0, [sp, #4]
    1c08:	cmp	w0, #0x0
    1c0c:	b.ne	1c18 <FSE_buildDTable_raw+0x6c>  // b.any
    1c10:	mov	x0, #0xffffffffffffffff    	// #-1
    1c14:	b	1ca8 <FSE_buildDTable_raw+0xfc>
    1c18:	ldr	w0, [sp, #4]
    1c1c:	and	w1, w0, #0xffff
    1c20:	ldr	x0, [sp, #56]
    1c24:	strh	w1, [x0]
    1c28:	ldr	x0, [sp, #56]
    1c2c:	mov	w1, #0x1                   	// #1
    1c30:	strh	w1, [x0, #2]
    1c34:	str	wzr, [sp, #76]
    1c38:	b	1c94 <FSE_buildDTable_raw+0xe8>
    1c3c:	ldr	w0, [sp, #76]
    1c40:	lsl	x0, x0, #2
    1c44:	ldr	x1, [sp, #40]
    1c48:	add	x0, x1, x0
    1c4c:	strh	wzr, [x0]
    1c50:	ldr	w0, [sp, #76]
    1c54:	lsl	x0, x0, #2
    1c58:	ldr	x1, [sp, #40]
    1c5c:	add	x0, x1, x0
    1c60:	ldr	w1, [sp, #76]
    1c64:	and	w1, w1, #0xff
    1c68:	strb	w1, [x0, #2]
    1c6c:	ldr	w0, [sp, #76]
    1c70:	lsl	x0, x0, #2
    1c74:	ldr	x1, [sp, #40]
    1c78:	add	x0, x1, x0
    1c7c:	ldr	w1, [sp, #4]
    1c80:	and	w1, w1, #0xff
    1c84:	strb	w1, [x0, #3]
    1c88:	ldr	w0, [sp, #76]
    1c8c:	add	w0, w0, #0x1
    1c90:	str	w0, [sp, #76]
    1c94:	ldr	w1, [sp, #76]
    1c98:	ldr	w0, [sp, #28]
    1c9c:	cmp	w1, w0
    1ca0:	b.cc	1c3c <FSE_buildDTable_raw+0x90>  // b.lo, b.ul, b.last
    1ca4:	mov	x0, #0x0                   	// #0
    1ca8:	add	sp, sp, #0x50
    1cac:	ret

0000000000001cb0 <FSE_decompress_usingDTable>:
    1cb0:	stp	x29, x30, [sp, #-352]!
    1cb4:	mov	x29, sp
    1cb8:	str	x0, [sp, #56]
    1cbc:	str	x1, [sp, #48]
    1cc0:	str	x2, [sp, #40]
    1cc4:	str	x3, [sp, #32]
    1cc8:	str	x4, [sp, #24]
    1ccc:	ldr	x0, [sp, #24]
    1cd0:	str	x0, [sp, #344]
    1cd4:	ldr	x0, [sp, #344]
    1cd8:	str	x0, [sp, #336]
    1cdc:	ldr	x0, [sp, #336]
    1ce0:	ldrh	w0, [x0, #2]
    1ce4:	str	w0, [sp, #332]
    1ce8:	ldr	w0, [sp, #332]
    1cec:	cmp	w0, #0x0
    1cf0:	b.eq	1f44 <FSE_decompress_usingDTable+0x294>  // b.none
    1cf4:	ldr	x0, [sp, #56]
    1cf8:	str	x0, [sp, #320]
    1cfc:	ldr	x0, [sp, #48]
    1d00:	str	x0, [sp, #312]
    1d04:	ldr	x0, [sp, #40]
    1d08:	str	x0, [sp, #304]
    1d0c:	ldr	x0, [sp, #32]
    1d10:	str	x0, [sp, #296]
    1d14:	ldr	x0, [sp, #24]
    1d18:	str	x0, [sp, #288]
    1d1c:	ldr	x0, [sp, #320]
    1d20:	str	x0, [sp, #280]
    1d24:	ldr	x0, [sp, #280]
    1d28:	str	x0, [sp, #272]
    1d2c:	ldr	x1, [sp, #272]
    1d30:	ldr	x0, [sp, #312]
    1d34:	add	x0, x1, x0
    1d38:	str	x0, [sp, #264]
    1d3c:	ldr	x0, [sp, #264]
    1d40:	sub	x0, x0, #0x3
    1d44:	str	x0, [sp, #256]
    1d48:	add	x0, sp, #0x40
    1d4c:	ldr	x2, [sp, #296]
    1d50:	ldr	x1, [sp, #304]
    1d54:	bl	1030 <BIT_initDStream>
    1d58:	str	x0, [sp, #248]
    1d5c:	ldr	x0, [sp, #248]
    1d60:	bl	f9c <ERR_isError>
    1d64:	cmp	w0, #0x0
    1d68:	b.eq	1d74 <FSE_decompress_usingDTable+0xc4>  // b.none
    1d6c:	ldr	x0, [sp, #248]
    1d70:	b	1f40 <FSE_decompress_usingDTable+0x290>
    1d74:	add	x1, sp, #0x40
    1d78:	add	x0, sp, #0x78
    1d7c:	ldr	x2, [sp, #288]
    1d80:	bl	1610 <FSE_initDState>
    1d84:	add	x1, sp, #0x40
    1d88:	add	x0, sp, #0x68
    1d8c:	ldr	x2, [sp, #288]
    1d90:	bl	1610 <FSE_initDState>
    1d94:	b	1e10 <FSE_decompress_usingDTable+0x160>
    1d98:	add	x1, sp, #0x40
    1d9c:	add	x0, sp, #0x78
    1da0:	bl	16ec <FSE_decodeSymbolFast>
    1da4:	and	w1, w0, #0xff
    1da8:	ldr	x0, [sp, #272]
    1dac:	strb	w1, [x0]
    1db0:	add	x1, sp, #0x40
    1db4:	add	x0, sp, #0x68
    1db8:	bl	16ec <FSE_decodeSymbolFast>
    1dbc:	and	w1, w0, #0xff
    1dc0:	ldr	x0, [sp, #272]
    1dc4:	add	x0, x0, #0x1
    1dc8:	strb	w1, [x0]
    1dcc:	add	x1, sp, #0x40
    1dd0:	add	x0, sp, #0x78
    1dd4:	bl	16ec <FSE_decodeSymbolFast>
    1dd8:	and	w1, w0, #0xff
    1ddc:	ldr	x0, [sp, #272]
    1de0:	add	x0, x0, #0x2
    1de4:	strb	w1, [x0]
    1de8:	add	x1, sp, #0x40
    1dec:	add	x0, sp, #0x68
    1df0:	bl	16ec <FSE_decodeSymbolFast>
    1df4:	and	w1, w0, #0xff
    1df8:	ldr	x0, [sp, #272]
    1dfc:	add	x0, x0, #0x3
    1e00:	strb	w1, [x0]
    1e04:	ldr	x0, [sp, #272]
    1e08:	add	x0, x0, #0x4
    1e0c:	str	x0, [sp, #272]
    1e10:	add	x0, sp, #0x40
    1e14:	bl	148c <BIT_reloadDStream>
    1e18:	cmp	w0, #0x0
    1e1c:	cset	w0, eq  // eq = none
    1e20:	and	w1, w0, #0xff
    1e24:	ldr	x2, [sp, #256]
    1e28:	ldr	x0, [sp, #272]
    1e2c:	cmp	x2, x0
    1e30:	cset	w0, hi  // hi = pmore
    1e34:	and	w0, w0, #0xff
    1e38:	and	w0, w1, w0
    1e3c:	and	w0, w0, #0xff
    1e40:	cmp	w0, #0x0
    1e44:	b.ne	1d98 <FSE_decompress_usingDTable+0xe8>  // b.any
    1e48:	ldr	x0, [sp, #264]
    1e4c:	sub	x1, x0, #0x2
    1e50:	ldr	x0, [sp, #272]
    1e54:	cmp	x1, x0
    1e58:	b.cs	1e64 <FSE_decompress_usingDTable+0x1b4>  // b.hs, b.nlast
    1e5c:	mov	x0, #0xffffffffffffffba    	// #-70
    1e60:	b	1f40 <FSE_decompress_usingDTable+0x290>
    1e64:	add	x1, sp, #0x40
    1e68:	add	x0, sp, #0x78
    1e6c:	bl	16ec <FSE_decodeSymbolFast>
    1e70:	and	w2, w0, #0xff
    1e74:	ldr	x0, [sp, #272]
    1e78:	add	x1, x0, #0x1
    1e7c:	str	x1, [sp, #272]
    1e80:	mov	w1, w2
    1e84:	strb	w1, [x0]
    1e88:	add	x0, sp, #0x40
    1e8c:	bl	148c <BIT_reloadDStream>
    1e90:	cmp	w0, #0x3
    1e94:	b.ne	1ec0 <FSE_decompress_usingDTable+0x210>  // b.any
    1e98:	add	x1, sp, #0x40
    1e9c:	add	x0, sp, #0x68
    1ea0:	bl	16ec <FSE_decodeSymbolFast>
    1ea4:	and	w2, w0, #0xff
    1ea8:	ldr	x0, [sp, #272]
    1eac:	add	x1, x0, #0x1
    1eb0:	str	x1, [sp, #272]
    1eb4:	mov	w1, w2
    1eb8:	strb	w1, [x0]
    1ebc:	b	1f34 <FSE_decompress_usingDTable+0x284>
    1ec0:	ldr	x0, [sp, #264]
    1ec4:	sub	x0, x0, #0x2
    1ec8:	ldr	x1, [sp, #272]
    1ecc:	cmp	x1, x0
    1ed0:	b.ls	1edc <FSE_decompress_usingDTable+0x22c>  // b.plast
    1ed4:	mov	x0, #0xffffffffffffffba    	// #-70
    1ed8:	b	1f40 <FSE_decompress_usingDTable+0x290>
    1edc:	add	x1, sp, #0x40
    1ee0:	add	x0, sp, #0x68
    1ee4:	bl	16ec <FSE_decodeSymbolFast>
    1ee8:	and	w2, w0, #0xff
    1eec:	ldr	x0, [sp, #272]
    1ef0:	add	x1, x0, #0x1
    1ef4:	str	x1, [sp, #272]
    1ef8:	mov	w1, w2
    1efc:	strb	w1, [x0]
    1f00:	add	x0, sp, #0x40
    1f04:	bl	148c <BIT_reloadDStream>
    1f08:	cmp	w0, #0x3
    1f0c:	b.ne	1e48 <FSE_decompress_usingDTable+0x198>  // b.any
    1f10:	add	x1, sp, #0x40
    1f14:	add	x0, sp, #0x78
    1f18:	bl	16ec <FSE_decodeSymbolFast>
    1f1c:	and	w2, w0, #0xff
    1f20:	ldr	x0, [sp, #272]
    1f24:	add	x1, x0, #0x1
    1f28:	str	x1, [sp, #272]
    1f2c:	mov	w1, w2
    1f30:	strb	w1, [x0]
    1f34:	ldr	x1, [sp, #272]
    1f38:	ldr	x0, [sp, #280]
    1f3c:	sub	x0, x1, x0
    1f40:	b	2194 <FSE_decompress_usingDTable+0x4e4>
    1f44:	ldr	x0, [sp, #56]
    1f48:	str	x0, [sp, #240]
    1f4c:	ldr	x0, [sp, #48]
    1f50:	str	x0, [sp, #232]
    1f54:	ldr	x0, [sp, #40]
    1f58:	str	x0, [sp, #224]
    1f5c:	ldr	x0, [sp, #32]
    1f60:	str	x0, [sp, #216]
    1f64:	ldr	x0, [sp, #24]
    1f68:	str	x0, [sp, #208]
    1f6c:	ldr	x0, [sp, #240]
    1f70:	str	x0, [sp, #200]
    1f74:	ldr	x0, [sp, #200]
    1f78:	str	x0, [sp, #192]
    1f7c:	ldr	x1, [sp, #192]
    1f80:	ldr	x0, [sp, #232]
    1f84:	add	x0, x1, x0
    1f88:	str	x0, [sp, #184]
    1f8c:	ldr	x0, [sp, #184]
    1f90:	sub	x0, x0, #0x3
    1f94:	str	x0, [sp, #176]
    1f98:	add	x0, sp, #0x40
    1f9c:	ldr	x2, [sp, #216]
    1fa0:	ldr	x1, [sp, #224]
    1fa4:	bl	1030 <BIT_initDStream>
    1fa8:	str	x0, [sp, #168]
    1fac:	ldr	x0, [sp, #168]
    1fb0:	bl	f9c <ERR_isError>
    1fb4:	cmp	w0, #0x0
    1fb8:	b.eq	1fc4 <FSE_decompress_usingDTable+0x314>  // b.none
    1fbc:	ldr	x0, [sp, #168]
    1fc0:	b	2190 <FSE_decompress_usingDTable+0x4e0>
    1fc4:	add	x1, sp, #0x40
    1fc8:	add	x0, sp, #0x98
    1fcc:	ldr	x2, [sp, #208]
    1fd0:	bl	1610 <FSE_initDState>
    1fd4:	add	x1, sp, #0x40
    1fd8:	add	x0, sp, #0x88
    1fdc:	ldr	x2, [sp, #208]
    1fe0:	bl	1610 <FSE_initDState>
    1fe4:	b	2060 <FSE_decompress_usingDTable+0x3b0>
    1fe8:	add	x1, sp, #0x40
    1fec:	add	x0, sp, #0x98
    1ff0:	bl	1678 <FSE_decodeSymbol>
    1ff4:	and	w1, w0, #0xff
    1ff8:	ldr	x0, [sp, #192]
    1ffc:	strb	w1, [x0]
    2000:	add	x1, sp, #0x40
    2004:	add	x0, sp, #0x88
    2008:	bl	1678 <FSE_decodeSymbol>
    200c:	and	w1, w0, #0xff
    2010:	ldr	x0, [sp, #192]
    2014:	add	x0, x0, #0x1
    2018:	strb	w1, [x0]
    201c:	add	x1, sp, #0x40
    2020:	add	x0, sp, #0x98
    2024:	bl	1678 <FSE_decodeSymbol>
    2028:	and	w1, w0, #0xff
    202c:	ldr	x0, [sp, #192]
    2030:	add	x0, x0, #0x2
    2034:	strb	w1, [x0]
    2038:	add	x1, sp, #0x40
    203c:	add	x0, sp, #0x88
    2040:	bl	1678 <FSE_decodeSymbol>
    2044:	and	w1, w0, #0xff
    2048:	ldr	x0, [sp, #192]
    204c:	add	x0, x0, #0x3
    2050:	strb	w1, [x0]
    2054:	ldr	x0, [sp, #192]
    2058:	add	x0, x0, #0x4
    205c:	str	x0, [sp, #192]
    2060:	add	x0, sp, #0x40
    2064:	bl	148c <BIT_reloadDStream>
    2068:	cmp	w0, #0x0
    206c:	cset	w0, eq  // eq = none
    2070:	and	w1, w0, #0xff
    2074:	ldr	x2, [sp, #176]
    2078:	ldr	x0, [sp, #192]
    207c:	cmp	x2, x0
    2080:	cset	w0, hi  // hi = pmore
    2084:	and	w0, w0, #0xff
    2088:	and	w0, w1, w0
    208c:	and	w0, w0, #0xff
    2090:	cmp	w0, #0x0
    2094:	b.ne	1fe8 <FSE_decompress_usingDTable+0x338>  // b.any
    2098:	ldr	x0, [sp, #184]
    209c:	sub	x1, x0, #0x2
    20a0:	ldr	x0, [sp, #192]
    20a4:	cmp	x1, x0
    20a8:	b.cs	20b4 <FSE_decompress_usingDTable+0x404>  // b.hs, b.nlast
    20ac:	mov	x0, #0xffffffffffffffba    	// #-70
    20b0:	b	2190 <FSE_decompress_usingDTable+0x4e0>
    20b4:	add	x1, sp, #0x40
    20b8:	add	x0, sp, #0x98
    20bc:	bl	1678 <FSE_decodeSymbol>
    20c0:	and	w2, w0, #0xff
    20c4:	ldr	x0, [sp, #192]
    20c8:	add	x1, x0, #0x1
    20cc:	str	x1, [sp, #192]
    20d0:	mov	w1, w2
    20d4:	strb	w1, [x0]
    20d8:	add	x0, sp, #0x40
    20dc:	bl	148c <BIT_reloadDStream>
    20e0:	cmp	w0, #0x3
    20e4:	b.ne	2110 <FSE_decompress_usingDTable+0x460>  // b.any
    20e8:	add	x1, sp, #0x40
    20ec:	add	x0, sp, #0x88
    20f0:	bl	1678 <FSE_decodeSymbol>
    20f4:	and	w2, w0, #0xff
    20f8:	ldr	x0, [sp, #192]
    20fc:	add	x1, x0, #0x1
    2100:	str	x1, [sp, #192]
    2104:	mov	w1, w2
    2108:	strb	w1, [x0]
    210c:	b	2184 <FSE_decompress_usingDTable+0x4d4>
    2110:	ldr	x0, [sp, #184]
    2114:	sub	x0, x0, #0x2
    2118:	ldr	x1, [sp, #192]
    211c:	cmp	x1, x0
    2120:	b.ls	212c <FSE_decompress_usingDTable+0x47c>  // b.plast
    2124:	mov	x0, #0xffffffffffffffba    	// #-70
    2128:	b	2190 <FSE_decompress_usingDTable+0x4e0>
    212c:	add	x1, sp, #0x40
    2130:	add	x0, sp, #0x88
    2134:	bl	1678 <FSE_decodeSymbol>
    2138:	and	w2, w0, #0xff
    213c:	ldr	x0, [sp, #192]
    2140:	add	x1, x0, #0x1
    2144:	str	x1, [sp, #192]
    2148:	mov	w1, w2
    214c:	strb	w1, [x0]
    2150:	add	x0, sp, #0x40
    2154:	bl	148c <BIT_reloadDStream>
    2158:	cmp	w0, #0x3
    215c:	b.ne	2098 <FSE_decompress_usingDTable+0x3e8>  // b.any
    2160:	add	x1, sp, #0x40
    2164:	add	x0, sp, #0x98
    2168:	bl	1678 <FSE_decodeSymbol>
    216c:	and	w2, w0, #0xff
    2170:	ldr	x0, [sp, #192]
    2174:	add	x1, x0, #0x1
    2178:	str	x1, [sp, #192]
    217c:	mov	w1, w2
    2180:	strb	w1, [x0]
    2184:	ldr	x1, [sp, #192]
    2188:	ldr	x0, [sp, #200]
    218c:	sub	x0, x1, x0
    2190:	nop
    2194:	ldp	x29, x30, [sp], #352
    2198:	ret

000000000000219c <FSE_decompress_wksp>:
    219c:	sub	sp, sp, #0x270
    21a0:	stp	x29, x30, [sp]
    21a4:	mov	x29, sp
    21a8:	str	x0, [sp, #56]
    21ac:	str	x1, [sp, #48]
    21b0:	str	x2, [sp, #40]
    21b4:	str	x3, [sp, #32]
    21b8:	str	x4, [sp, #24]
    21bc:	str	w5, [sp, #20]
    21c0:	ldr	x0, [sp, #40]
    21c4:	str	x0, [sp, #616]
    21c8:	ldr	x0, [sp, #616]
    21cc:	str	x0, [sp, #608]
    21d0:	mov	w0, #0xff                  	// #255
    21d4:	str	w0, [sp, #72]
    21d8:	add	x2, sp, #0x4c
    21dc:	add	x1, sp, #0x48
    21e0:	add	x0, sp, #0x50
    21e4:	ldr	x4, [sp, #32]
    21e8:	ldr	x3, [sp, #616]
    21ec:	bl	1b8 <FSE_readNCount>
    21f0:	str	x0, [sp, #600]
    21f4:	ldr	x0, [sp, #600]
    21f8:	bl	f9c <ERR_isError>
    21fc:	cmp	w0, #0x0
    2200:	b.eq	220c <FSE_decompress_wksp+0x70>  // b.none
    2204:	ldr	x0, [sp, #600]
    2208:	b	2298 <FSE_decompress_wksp+0xfc>
    220c:	ldr	w0, [sp, #76]
    2210:	ldr	w1, [sp, #20]
    2214:	cmp	w1, w0
    2218:	b.cs	2224 <FSE_decompress_wksp+0x88>  // b.hs, b.nlast
    221c:	mov	x0, #0xffffffffffffffd4    	// #-44
    2220:	b	2298 <FSE_decompress_wksp+0xfc>
    2224:	ldr	x1, [sp, #608]
    2228:	ldr	x0, [sp, #600]
    222c:	add	x0, x1, x0
    2230:	str	x0, [sp, #608]
    2234:	ldr	x1, [sp, #32]
    2238:	ldr	x0, [sp, #600]
    223c:	sub	x0, x1, x0
    2240:	str	x0, [sp, #32]
    2244:	ldr	w1, [sp, #72]
    2248:	ldr	w2, [sp, #76]
    224c:	add	x0, sp, #0x50
    2250:	mov	w3, w2
    2254:	mov	w2, w1
    2258:	mov	x1, x0
    225c:	ldr	x0, [sp, #24]
    2260:	bl	17c4 <FSE_buildDTable>
    2264:	str	x0, [sp, #592]
    2268:	ldr	x0, [sp, #592]
    226c:	bl	f9c <ERR_isError>
    2270:	cmp	w0, #0x0
    2274:	b.eq	2280 <FSE_decompress_wksp+0xe4>  // b.none
    2278:	ldr	x0, [sp, #592]
    227c:	b	2298 <FSE_decompress_wksp+0xfc>
    2280:	ldr	x4, [sp, #24]
    2284:	ldr	x3, [sp, #32]
    2288:	ldr	x2, [sp, #608]
    228c:	ldr	x1, [sp, #48]
    2290:	ldr	x0, [sp, #56]
    2294:	bl	1cb0 <FSE_decompress_usingDTable>
    2298:	ldp	x29, x30, [sp]
    229c:	add	sp, sp, #0x270
    22a0:	ret

00000000000022a4 <FSE_decompress>:
    22a4:	mov	x12, #0x4040                	// #16448
    22a8:	sub	sp, sp, x12
    22ac:	stp	x29, x30, [sp]
    22b0:	mov	x29, sp
    22b4:	str	x0, [sp, #40]
    22b8:	str	x1, [sp, #32]
    22bc:	str	x2, [sp, #24]
    22c0:	str	x3, [sp, #16]
    22c4:	add	x0, sp, #0x38
    22c8:	mov	w5, #0xc                   	// #12
    22cc:	mov	x4, x0
    22d0:	ldr	x3, [sp, #16]
    22d4:	ldr	x2, [sp, #24]
    22d8:	ldr	x1, [sp, #32]
    22dc:	ldr	x0, [sp, #40]
    22e0:	bl	219c <FSE_decompress_wksp>
    22e4:	ldp	x29, x30, [sp]
    22e8:	mov	x12, #0x4040                	// #16448
    22ec:	add	sp, sp, x12
    22f0:	ret
    22f4:	nop

00000000000022f8 <grub_memcpy>:
    22f8:	stp	x29, x30, [sp, #-48]!
    22fc:	mov	x29, sp
    2300:	str	x0, [sp, #40]
    2304:	str	x1, [sp, #32]
    2308:	str	x2, [sp, #24]
    230c:	ldr	x2, [sp, #24]
    2310:	ldr	x1, [sp, #32]
    2314:	ldr	x0, [sp, #40]
    2318:	bl	0 <grub_memmove>
    231c:	ldp	x29, x30, [sp], #48
    2320:	ret

0000000000002324 <MEM_32bits>:
    2324:	mov	w0, #0x0                   	// #0
    2328:	ret

000000000000232c <MEM_64bits>:
    232c:	mov	w0, #0x1                   	// #1
    2330:	ret

0000000000002334 <MEM_isLittleEndian>:
    2334:	sub	sp, sp, #0x10
    2338:	mov	w0, #0x1                   	// #1
    233c:	str	w0, [sp, #8]
    2340:	ldrb	w0, [sp, #8]
    2344:	add	sp, sp, #0x10
    2348:	ret

000000000000234c <MEM_read16>:
    234c:	sub	sp, sp, #0x10
    2350:	str	x0, [sp, #8]
    2354:	ldr	x0, [sp, #8]
    2358:	ldrh	w0, [x0]
    235c:	add	sp, sp, #0x10
    2360:	ret

0000000000002364 <MEM_read32>:
    2364:	sub	sp, sp, #0x10
    2368:	str	x0, [sp, #8]
    236c:	ldr	x0, [sp, #8]
    2370:	ldr	w0, [x0]
    2374:	add	sp, sp, #0x10
    2378:	ret

000000000000237c <MEM_read64>:
    237c:	sub	sp, sp, #0x10
    2380:	str	x0, [sp, #8]
    2384:	ldr	x0, [sp, #8]
    2388:	ldr	x0, [x0]
    238c:	add	sp, sp, #0x10
    2390:	ret

0000000000002394 <MEM_write16>:
    2394:	sub	sp, sp, #0x10
    2398:	str	x0, [sp, #8]
    239c:	strh	w1, [sp, #6]
    23a0:	ldr	x0, [sp, #8]
    23a4:	ldrh	w1, [sp, #6]
    23a8:	strh	w1, [x0]
    23ac:	nop
    23b0:	add	sp, sp, #0x10
    23b4:	ret

00000000000023b8 <MEM_swap32>:
    23b8:	sub	sp, sp, #0x10
    23bc:	str	w0, [sp, #12]
    23c0:	ldr	w0, [sp, #12]
    23c4:	rev	w0, w0
    23c8:	add	sp, sp, #0x10
    23cc:	ret

00000000000023d0 <MEM_swap64>:
    23d0:	sub	sp, sp, #0x10
    23d4:	str	x0, [sp, #8]
    23d8:	ldr	x0, [sp, #8]
    23dc:	rev	x0, x0
    23e0:	add	sp, sp, #0x10
    23e4:	ret

00000000000023e8 <MEM_readLE16>:
    23e8:	stp	x29, x30, [sp, #-48]!
    23ec:	mov	x29, sp
    23f0:	str	x0, [sp, #24]
    23f4:	bl	2334 <MEM_isLittleEndian>
    23f8:	cmp	w0, #0x0
    23fc:	b.eq	2410 <MEM_readLE16+0x28>  // b.none
    2400:	ldr	x0, [sp, #24]
    2404:	bl	234c <MEM_read16>
    2408:	and	w0, w0, #0xffff
    240c:	b	2444 <MEM_readLE16+0x5c>
    2410:	ldr	x0, [sp, #24]
    2414:	str	x0, [sp, #40]
    2418:	ldr	x0, [sp, #40]
    241c:	ldrb	w0, [x0]
    2420:	and	w1, w0, #0xffff
    2424:	ldr	x0, [sp, #40]
    2428:	add	x0, x0, #0x1
    242c:	ldrb	w0, [x0]
    2430:	and	w0, w0, #0xffff
    2434:	ubfiz	w0, w0, #8, #8
    2438:	and	w0, w0, #0xffff
    243c:	add	w0, w1, w0
    2440:	and	w0, w0, #0xffff
    2444:	ldp	x29, x30, [sp], #48
    2448:	ret

000000000000244c <MEM_writeLE16>:
    244c:	stp	x29, x30, [sp, #-48]!
    2450:	mov	x29, sp
    2454:	str	x0, [sp, #24]
    2458:	strh	w1, [sp, #22]
    245c:	bl	2334 <MEM_isLittleEndian>
    2460:	cmp	w0, #0x0
    2464:	b.eq	2478 <MEM_writeLE16+0x2c>  // b.none
    2468:	ldrh	w1, [sp, #22]
    246c:	ldr	x0, [sp, #24]
    2470:	bl	2394 <MEM_write16>
    2474:	b	24ac <MEM_writeLE16+0x60>
    2478:	ldr	x0, [sp, #24]
    247c:	str	x0, [sp, #40]
    2480:	ldrh	w0, [sp, #22]
    2484:	and	w1, w0, #0xff
    2488:	ldr	x0, [sp, #40]
    248c:	strb	w1, [x0]
    2490:	ldrh	w0, [sp, #22]
    2494:	lsr	w0, w0, #8
    2498:	and	w1, w0, #0xffff
    249c:	ldr	x0, [sp, #40]
    24a0:	add	x0, x0, #0x1
    24a4:	and	w1, w1, #0xff
    24a8:	strb	w1, [x0]
    24ac:	nop
    24b0:	ldp	x29, x30, [sp], #48
    24b4:	ret

00000000000024b8 <MEM_readLE32>:
    24b8:	stp	x29, x30, [sp, #-32]!
    24bc:	mov	x29, sp
    24c0:	str	x0, [sp, #24]
    24c4:	bl	2334 <MEM_isLittleEndian>
    24c8:	cmp	w0, #0x0
    24cc:	b.eq	24dc <MEM_readLE32+0x24>  // b.none
    24d0:	ldr	x0, [sp, #24]
    24d4:	bl	2364 <MEM_read32>
    24d8:	b	24e8 <MEM_readLE32+0x30>
    24dc:	ldr	x0, [sp, #24]
    24e0:	bl	2364 <MEM_read32>
    24e4:	bl	23b8 <MEM_swap32>
    24e8:	ldp	x29, x30, [sp], #32
    24ec:	ret

00000000000024f0 <MEM_readLE64>:
    24f0:	stp	x29, x30, [sp, #-32]!
    24f4:	mov	x29, sp
    24f8:	str	x0, [sp, #24]
    24fc:	bl	2334 <MEM_isLittleEndian>
    2500:	cmp	w0, #0x0
    2504:	b.eq	2514 <MEM_readLE64+0x24>  // b.none
    2508:	ldr	x0, [sp, #24]
    250c:	bl	237c <MEM_read64>
    2510:	b	2520 <MEM_readLE64+0x30>
    2514:	ldr	x0, [sp, #24]
    2518:	bl	237c <MEM_read64>
    251c:	bl	23d0 <MEM_swap64>
    2520:	ldp	x29, x30, [sp], #32
    2524:	ret

0000000000002528 <MEM_readLEST>:
    2528:	stp	x29, x30, [sp, #-32]!
    252c:	mov	x29, sp
    2530:	str	x0, [sp, #24]
    2534:	bl	2324 <MEM_32bits>
    2538:	cmp	w0, #0x0
    253c:	b.eq	2550 <MEM_readLEST+0x28>  // b.none
    2540:	ldr	x0, [sp, #24]
    2544:	bl	24b8 <MEM_readLE32>
    2548:	mov	w0, w0
    254c:	b	255c <MEM_readLEST+0x34>
    2550:	ldr	x0, [sp, #24]
    2554:	bl	24f0 <MEM_readLE64>
    2558:	nop
    255c:	ldp	x29, x30, [sp], #32
    2560:	ret

0000000000002564 <ERR_isError>:
    2564:	sub	sp, sp, #0x10
    2568:	str	x0, [sp, #8]
    256c:	ldr	x0, [sp, #8]
    2570:	cmn	x0, #0x78
    2574:	cset	w0, hi  // hi = pmore
    2578:	and	w0, w0, #0xff
    257c:	add	sp, sp, #0x10
    2580:	ret

0000000000002584 <ERR_getErrorCode>:
    2584:	stp	x29, x30, [sp, #-32]!
    2588:	mov	x29, sp
    258c:	str	x0, [sp, #24]
    2590:	ldr	x0, [sp, #24]
    2594:	bl	2564 <ERR_isError>
    2598:	cmp	w0, #0x0
    259c:	b.ne	25a8 <ERR_getErrorCode+0x24>  // b.any
    25a0:	mov	w0, #0x0                   	// #0
    25a4:	b	25b0 <ERR_getErrorCode+0x2c>
    25a8:	ldr	x0, [sp, #24]
    25ac:	neg	w0, w0
    25b0:	ldp	x29, x30, [sp], #32
    25b4:	ret

00000000000025b8 <ERR_getErrorName>:
    25b8:	stp	x29, x30, [sp, #-32]!
    25bc:	mov	x29, sp
    25c0:	str	x0, [sp, #24]
    25c4:	ldr	x0, [sp, #24]
    25c8:	bl	2584 <ERR_getErrorCode>
    25cc:	bl	b6c <ERR_getErrorString>
    25d0:	ldp	x29, x30, [sp], #32
    25d4:	ret

00000000000025d8 <BIT_highbit32>:
    25d8:	sub	sp, sp, #0x10
    25dc:	str	w0, [sp, #12]
    25e0:	ldr	w0, [sp, #12]
    25e4:	clz	w0, w0
    25e8:	mov	w1, #0x1f                  	// #31
    25ec:	sub	w0, w1, w0
    25f0:	add	sp, sp, #0x10
    25f4:	ret

00000000000025f8 <BIT_initDStream>:
    25f8:	stp	x29, x30, [sp, #-64]!
    25fc:	mov	x29, sp
    2600:	str	x0, [sp, #40]
    2604:	str	x1, [sp, #32]
    2608:	str	x2, [sp, #24]
    260c:	ldr	x0, [sp, #24]
    2610:	cmp	x0, #0x0
    2614:	b.ne	2630 <BIT_initDStream+0x38>  // b.any
    2618:	mov	x2, #0x28                  	// #40
    261c:	mov	w1, #0x0                   	// #0
    2620:	ldr	x0, [sp, #40]
    2624:	bl	0 <grub_memset>
    2628:	mov	x0, #0xffffffffffffffb8    	// #-72
    262c:	b	2904 <BIT_initDStream+0x30c>
    2630:	ldr	x0, [sp, #40]
    2634:	ldr	x1, [sp, #32]
    2638:	str	x1, [x0, #24]
    263c:	ldr	x0, [sp, #40]
    2640:	ldr	x0, [x0, #24]
    2644:	add	x1, x0, #0x8
    2648:	ldr	x0, [sp, #40]
    264c:	str	x1, [x0, #32]
    2650:	ldr	x0, [sp, #24]
    2654:	cmp	x0, #0x7
    2658:	b.ls	26e8 <BIT_initDStream+0xf0>  // b.plast
    265c:	ldr	x0, [sp, #24]
    2660:	sub	x0, x0, #0x8
    2664:	ldr	x1, [sp, #32]
    2668:	add	x1, x1, x0
    266c:	ldr	x0, [sp, #40]
    2670:	str	x1, [x0, #16]
    2674:	ldr	x0, [sp, #40]
    2678:	ldr	x0, [x0, #16]
    267c:	bl	2528 <MEM_readLEST>
    2680:	mov	x1, x0
    2684:	ldr	x0, [sp, #40]
    2688:	str	x1, [x0]
    268c:	ldr	x0, [sp, #24]
    2690:	sub	x0, x0, #0x1
    2694:	ldr	x1, [sp, #32]
    2698:	add	x0, x1, x0
    269c:	ldrb	w0, [x0]
    26a0:	strb	w0, [sp, #62]
    26a4:	ldrb	w0, [sp, #62]
    26a8:	cmp	w0, #0x0
    26ac:	b.eq	26c8 <BIT_initDStream+0xd0>  // b.none
    26b0:	ldrb	w0, [sp, #62]
    26b4:	bl	25d8 <BIT_highbit32>
    26b8:	mov	w1, w0
    26bc:	mov	w0, #0x8                   	// #8
    26c0:	sub	w0, w0, w1
    26c4:	b	26cc <BIT_initDStream+0xd4>
    26c8:	mov	w0, #0x0                   	// #0
    26cc:	ldr	x1, [sp, #40]
    26d0:	str	w0, [x1, #8]
    26d4:	ldrb	w0, [sp, #62]
    26d8:	cmp	w0, #0x0
    26dc:	b.ne	2900 <BIT_initDStream+0x308>  // b.any
    26e0:	mov	x0, #0xffffffffffffffff    	// #-1
    26e4:	b	2904 <BIT_initDStream+0x30c>
    26e8:	ldr	x0, [sp, #40]
    26ec:	ldr	x1, [x0, #24]
    26f0:	ldr	x0, [sp, #40]
    26f4:	str	x1, [x0, #16]
    26f8:	ldr	x0, [sp, #40]
    26fc:	ldr	x0, [x0, #24]
    2700:	ldrb	w0, [x0]
    2704:	and	x1, x0, #0xff
    2708:	ldr	x0, [sp, #40]
    270c:	str	x1, [x0]
    2710:	ldr	x0, [sp, #24]
    2714:	cmp	x0, #0x7
    2718:	b.eq	278c <BIT_initDStream+0x194>  // b.none
    271c:	ldr	x0, [sp, #24]
    2720:	cmp	x0, #0x7
    2724:	b.hi	287c <BIT_initDStream+0x284>  // b.pmore
    2728:	ldr	x0, [sp, #24]
    272c:	cmp	x0, #0x6
    2730:	b.eq	27b4 <BIT_initDStream+0x1bc>  // b.none
    2734:	ldr	x0, [sp, #24]
    2738:	cmp	x0, #0x6
    273c:	b.hi	287c <BIT_initDStream+0x284>  // b.pmore
    2740:	ldr	x0, [sp, #24]
    2744:	cmp	x0, #0x5
    2748:	b.eq	27dc <BIT_initDStream+0x1e4>  // b.none
    274c:	ldr	x0, [sp, #24]
    2750:	cmp	x0, #0x5
    2754:	b.hi	287c <BIT_initDStream+0x284>  // b.pmore
    2758:	ldr	x0, [sp, #24]
    275c:	cmp	x0, #0x4
    2760:	b.eq	2804 <BIT_initDStream+0x20c>  // b.none
    2764:	ldr	x0, [sp, #24]
    2768:	cmp	x0, #0x4
    276c:	b.hi	287c <BIT_initDStream+0x284>  // b.pmore
    2770:	ldr	x0, [sp, #24]
    2774:	cmp	x0, #0x2
    2778:	b.eq	2854 <BIT_initDStream+0x25c>  // b.none
    277c:	ldr	x0, [sp, #24]
    2780:	cmp	x0, #0x3
    2784:	b.eq	282c <BIT_initDStream+0x234>  // b.none
    2788:	b	287c <BIT_initDStream+0x284>
    278c:	ldr	x0, [sp, #40]
    2790:	ldr	x1, [x0]
    2794:	ldr	x0, [sp, #32]
    2798:	add	x0, x0, #0x6
    279c:	ldrb	w0, [x0]
    27a0:	and	x0, x0, #0xff
    27a4:	lsl	x0, x0, #48
    27a8:	add	x1, x1, x0
    27ac:	ldr	x0, [sp, #40]
    27b0:	str	x1, [x0]
    27b4:	ldr	x0, [sp, #40]
    27b8:	ldr	x1, [x0]
    27bc:	ldr	x0, [sp, #32]
    27c0:	add	x0, x0, #0x5
    27c4:	ldrb	w0, [x0]
    27c8:	and	x0, x0, #0xff
    27cc:	lsl	x0, x0, #40
    27d0:	add	x1, x1, x0
    27d4:	ldr	x0, [sp, #40]
    27d8:	str	x1, [x0]
    27dc:	ldr	x0, [sp, #40]
    27e0:	ldr	x1, [x0]
    27e4:	ldr	x0, [sp, #32]
    27e8:	add	x0, x0, #0x4
    27ec:	ldrb	w0, [x0]
    27f0:	and	x0, x0, #0xff
    27f4:	lsl	x0, x0, #32
    27f8:	add	x1, x1, x0
    27fc:	ldr	x0, [sp, #40]
    2800:	str	x1, [x0]
    2804:	ldr	x0, [sp, #40]
    2808:	ldr	x1, [x0]
    280c:	ldr	x0, [sp, #32]
    2810:	add	x0, x0, #0x3
    2814:	ldrb	w0, [x0]
    2818:	and	x0, x0, #0xff
    281c:	lsl	x0, x0, #24
    2820:	add	x1, x1, x0
    2824:	ldr	x0, [sp, #40]
    2828:	str	x1, [x0]
    282c:	ldr	x0, [sp, #40]
    2830:	ldr	x1, [x0]
    2834:	ldr	x0, [sp, #32]
    2838:	add	x0, x0, #0x2
    283c:	ldrb	w0, [x0]
    2840:	and	x0, x0, #0xff
    2844:	lsl	x0, x0, #16
    2848:	add	x1, x1, x0
    284c:	ldr	x0, [sp, #40]
    2850:	str	x1, [x0]
    2854:	ldr	x0, [sp, #40]
    2858:	ldr	x1, [x0]
    285c:	ldr	x0, [sp, #32]
    2860:	add	x0, x0, #0x1
    2864:	ldrb	w0, [x0]
    2868:	and	x0, x0, #0xff
    286c:	lsl	x0, x0, #8
    2870:	add	x1, x1, x0
    2874:	ldr	x0, [sp, #40]
    2878:	str	x1, [x0]
    287c:	ldr	x0, [sp, #24]
    2880:	sub	x0, x0, #0x1
    2884:	ldr	x1, [sp, #32]
    2888:	add	x0, x1, x0
    288c:	ldrb	w0, [x0]
    2890:	strb	w0, [sp, #63]
    2894:	ldrb	w0, [sp, #63]
    2898:	cmp	w0, #0x0
    289c:	b.eq	28b8 <BIT_initDStream+0x2c0>  // b.none
    28a0:	ldrb	w0, [sp, #63]
    28a4:	bl	25d8 <BIT_highbit32>
    28a8:	mov	w1, w0
    28ac:	mov	w0, #0x8                   	// #8
    28b0:	sub	w0, w0, w1
    28b4:	b	28bc <BIT_initDStream+0x2c4>
    28b8:	mov	w0, #0x0                   	// #0
    28bc:	ldr	x1, [sp, #40]
    28c0:	str	w0, [x1, #8]
    28c4:	ldrb	w0, [sp, #63]
    28c8:	cmp	w0, #0x0
    28cc:	b.ne	28d8 <BIT_initDStream+0x2e0>  // b.any
    28d0:	mov	x0, #0xffffffffffffffec    	// #-20
    28d4:	b	2904 <BIT_initDStream+0x30c>
    28d8:	ldr	x0, [sp, #40]
    28dc:	ldr	w1, [x0, #8]
    28e0:	ldr	x0, [sp, #24]
    28e4:	mov	w2, w0
    28e8:	mov	w0, #0x8                   	// #8
    28ec:	sub	w0, w0, w2
    28f0:	lsl	w0, w0, #3
    28f4:	add	w1, w1, w0
    28f8:	ldr	x0, [sp, #40]
    28fc:	str	w1, [x0, #8]
    2900:	ldr	x0, [sp, #24]
    2904:	ldp	x29, x30, [sp], #64
    2908:	ret

000000000000290c <BIT_lookBitsFast>:
    290c:	sub	sp, sp, #0x20
    2910:	str	x0, [sp, #8]
    2914:	str	w1, [sp, #4]
    2918:	mov	w0, #0x3f                  	// #63
    291c:	str	w0, [sp, #28]
    2920:	ldr	x0, [sp, #8]
    2924:	ldr	x1, [x0]
    2928:	ldr	x0, [sp, #8]
    292c:	ldr	w2, [x0, #8]
    2930:	ldr	w0, [sp, #28]
    2934:	and	w0, w2, w0
    2938:	lsl	x1, x1, x0
    293c:	ldr	w2, [sp, #28]
    2940:	ldr	w0, [sp, #4]
    2944:	sub	w0, w2, w0
    2948:	add	w2, w0, #0x1
    294c:	ldr	w0, [sp, #28]
    2950:	and	w0, w2, w0
    2954:	lsr	x0, x1, x0
    2958:	add	sp, sp, #0x20
    295c:	ret

0000000000002960 <BIT_skipBits>:
    2960:	sub	sp, sp, #0x10
    2964:	str	x0, [sp, #8]
    2968:	str	w1, [sp, #4]
    296c:	ldr	x0, [sp, #8]
    2970:	ldr	w1, [x0, #8]
    2974:	ldr	w0, [sp, #4]
    2978:	add	w1, w1, w0
    297c:	ldr	x0, [sp, #8]
    2980:	str	w1, [x0, #8]
    2984:	nop
    2988:	add	sp, sp, #0x10
    298c:	ret

0000000000002990 <BIT_reloadDStream>:
    2990:	stp	x29, x30, [sp, #-48]!
    2994:	mov	x29, sp
    2998:	str	x0, [sp, #24]
    299c:	ldr	x0, [sp, #24]
    29a0:	ldr	w0, [x0, #8]
    29a4:	cmp	w0, #0x40
    29a8:	b.ls	29b4 <BIT_reloadDStream+0x24>  // b.plast
    29ac:	mov	w0, #0x3                   	// #3
    29b0:	b	2b0c <BIT_reloadDStream+0x17c>
    29b4:	ldr	x0, [sp, #24]
    29b8:	ldr	x1, [x0, #16]
    29bc:	ldr	x0, [sp, #24]
    29c0:	ldr	x0, [x0, #32]
    29c4:	cmp	x1, x0
    29c8:	b.cc	2a28 <BIT_reloadDStream+0x98>  // b.lo, b.ul, b.last
    29cc:	ldr	x0, [sp, #24]
    29d0:	ldr	x1, [x0, #16]
    29d4:	ldr	x0, [sp, #24]
    29d8:	ldr	w0, [x0, #8]
    29dc:	lsr	w0, w0, #3
    29e0:	mov	w0, w0
    29e4:	neg	x0, x0
    29e8:	add	x1, x1, x0
    29ec:	ldr	x0, [sp, #24]
    29f0:	str	x1, [x0, #16]
    29f4:	ldr	x0, [sp, #24]
    29f8:	ldr	w0, [x0, #8]
    29fc:	and	w1, w0, #0x7
    2a00:	ldr	x0, [sp, #24]
    2a04:	str	w1, [x0, #8]
    2a08:	ldr	x0, [sp, #24]
    2a0c:	ldr	x0, [x0, #16]
    2a10:	bl	2528 <MEM_readLEST>
    2a14:	mov	x1, x0
    2a18:	ldr	x0, [sp, #24]
    2a1c:	str	x1, [x0]
    2a20:	mov	w0, #0x0                   	// #0
    2a24:	b	2b0c <BIT_reloadDStream+0x17c>
    2a28:	ldr	x0, [sp, #24]
    2a2c:	ldr	x1, [x0, #16]
    2a30:	ldr	x0, [sp, #24]
    2a34:	ldr	x0, [x0, #24]
    2a38:	cmp	x1, x0
    2a3c:	b.ne	2a60 <BIT_reloadDStream+0xd0>  // b.any
    2a40:	ldr	x0, [sp, #24]
    2a44:	ldr	w0, [x0, #8]
    2a48:	cmp	w0, #0x3f
    2a4c:	b.hi	2a58 <BIT_reloadDStream+0xc8>  // b.pmore
    2a50:	mov	w0, #0x1                   	// #1
    2a54:	b	2b0c <BIT_reloadDStream+0x17c>
    2a58:	mov	w0, #0x2                   	// #2
    2a5c:	b	2b0c <BIT_reloadDStream+0x17c>
    2a60:	ldr	x0, [sp, #24]
    2a64:	ldr	w0, [x0, #8]
    2a68:	lsr	w0, w0, #3
    2a6c:	str	w0, [sp, #44]
    2a70:	str	wzr, [sp, #40]
    2a74:	ldr	x0, [sp, #24]
    2a78:	ldr	x1, [x0, #16]
    2a7c:	ldr	w0, [sp, #44]
    2a80:	neg	x0, x0
    2a84:	add	x1, x1, x0
    2a88:	ldr	x0, [sp, #24]
    2a8c:	ldr	x0, [x0, #24]
    2a90:	cmp	x1, x0
    2a94:	b.cs	2ab8 <BIT_reloadDStream+0x128>  // b.hs, b.nlast
    2a98:	ldr	x0, [sp, #24]
    2a9c:	ldr	x1, [x0, #16]
    2aa0:	ldr	x0, [sp, #24]
    2aa4:	ldr	x0, [x0, #24]
    2aa8:	sub	x0, x1, x0
    2aac:	str	w0, [sp, #44]
    2ab0:	mov	w0, #0x1                   	// #1
    2ab4:	str	w0, [sp, #40]
    2ab8:	ldr	x0, [sp, #24]
    2abc:	ldr	x1, [x0, #16]
    2ac0:	ldr	w0, [sp, #44]
    2ac4:	neg	x0, x0
    2ac8:	add	x1, x1, x0
    2acc:	ldr	x0, [sp, #24]
    2ad0:	str	x1, [x0, #16]
    2ad4:	ldr	x0, [sp, #24]
    2ad8:	ldr	w1, [x0, #8]
    2adc:	ldr	w0, [sp, #44]
    2ae0:	lsl	w0, w0, #3
    2ae4:	sub	w1, w1, w0
    2ae8:	ldr	x0, [sp, #24]
    2aec:	str	w1, [x0, #8]
    2af0:	ldr	x0, [sp, #24]
    2af4:	ldr	x0, [x0, #16]
    2af8:	bl	2528 <MEM_readLEST>
    2afc:	mov	x1, x0
    2b00:	ldr	x0, [sp, #24]
    2b04:	str	x1, [x0]
    2b08:	ldr	w0, [sp, #40]
    2b0c:	ldp	x29, x30, [sp], #48
    2b10:	ret

0000000000002b14 <BIT_endOfDStream>:
    2b14:	sub	sp, sp, #0x10
    2b18:	str	x0, [sp, #8]
    2b1c:	ldr	x0, [sp, #8]
    2b20:	ldr	x1, [x0, #16]
    2b24:	ldr	x0, [sp, #8]
    2b28:	ldr	x0, [x0, #24]
    2b2c:	cmp	x1, x0
    2b30:	b.ne	2b4c <BIT_endOfDStream+0x38>  // b.any
    2b34:	ldr	x0, [sp, #8]
    2b38:	ldr	w0, [x0, #8]
    2b3c:	cmp	w0, #0x40
    2b40:	b.ne	2b4c <BIT_endOfDStream+0x38>  // b.any
    2b44:	mov	w0, #0x1                   	// #1
    2b48:	b	2b50 <BIT_endOfDStream+0x3c>
    2b4c:	mov	w0, #0x0                   	// #0
    2b50:	add	sp, sp, #0x10
    2b54:	ret

0000000000002b58 <HUF_getDTableDesc>:
    2b58:	stp	x29, x30, [sp, #-48]!
    2b5c:	mov	x29, sp
    2b60:	str	x0, [sp, #24]
    2b64:	add	x0, sp, #0x28
    2b68:	mov	x2, #0x4                   	// #4
    2b6c:	ldr	x1, [sp, #24]
    2b70:	bl	22f8 <grub_memcpy>
    2b74:	ldr	w0, [sp, #40]
    2b78:	ldp	x29, x30, [sp], #48
    2b7c:	ret

0000000000002b80 <HUF_readDTableX1_wksp>:
    2b80:	stp	x29, x30, [sp, #-160]!
    2b84:	mov	x29, sp
    2b88:	str	x0, [sp, #56]
    2b8c:	str	x1, [sp, #48]
    2b90:	str	x2, [sp, #40]
    2b94:	str	x3, [sp, #32]
    2b98:	str	x4, [sp, #24]
    2b9c:	str	wzr, [sp, #80]
    2ba0:	str	wzr, [sp, #76]
    2ba4:	ldr	x0, [sp, #56]
    2ba8:	add	x0, x0, #0x4
    2bac:	str	x0, [sp, #136]
    2bb0:	ldr	x0, [sp, #136]
    2bb4:	str	x0, [sp, #128]
    2bb8:	str	xzr, [sp, #120]
    2bbc:	ldr	x0, [sp, #120]
    2bc0:	lsl	x0, x0, #2
    2bc4:	ldr	x1, [sp, #32]
    2bc8:	add	x0, x1, x0
    2bcc:	str	x0, [sp, #112]
    2bd0:	ldr	x0, [sp, #120]
    2bd4:	add	x0, x0, #0x10
    2bd8:	str	x0, [sp, #120]
    2bdc:	ldr	x0, [sp, #120]
    2be0:	lsl	x0, x0, #2
    2be4:	ldr	x1, [sp, #32]
    2be8:	add	x0, x1, x0
    2bec:	str	x0, [sp, #104]
    2bf0:	ldr	x0, [sp, #120]
    2bf4:	add	x0, x0, #0x40
    2bf8:	str	x0, [sp, #120]
    2bfc:	ldr	x0, [sp, #120]
    2c00:	lsl	x0, x0, #2
    2c04:	ldr	x1, [sp, #24]
    2c08:	cmp	x1, x0
    2c0c:	b.cs	2c18 <HUF_readDTableX1_wksp+0x98>  // b.hs, b.nlast
    2c10:	mov	x0, #0xffffffffffffffd4    	// #-44
    2c14:	b	2e40 <HUF_readDTableX1_wksp+0x2c0>
    2c18:	add	x1, sp, #0x50
    2c1c:	add	x0, sp, #0x4c
    2c20:	ldr	x6, [sp, #40]
    2c24:	ldr	x5, [sp, #48]
    2c28:	mov	x4, x1
    2c2c:	mov	x3, x0
    2c30:	ldr	x2, [sp, #112]
    2c34:	mov	x1, #0x100                 	// #256
    2c38:	ldr	x0, [sp, #104]
    2c3c:	bl	768 <HUF_readStats>
    2c40:	str	x0, [sp, #96]
    2c44:	ldr	x0, [sp, #96]
    2c48:	bl	2564 <ERR_isError>
    2c4c:	cmp	w0, #0x0
    2c50:	b.eq	2c5c <HUF_readDTableX1_wksp+0xdc>  // b.none
    2c54:	ldr	x0, [sp, #96]
    2c58:	b	2e40 <HUF_readDTableX1_wksp+0x2c0>
    2c5c:	ldr	x0, [sp, #56]
    2c60:	bl	2b58 <HUF_getDTableDesc>
    2c64:	str	w0, [sp, #72]
    2c68:	ldrb	w0, [sp, #72]
    2c6c:	add	w0, w0, #0x1
    2c70:	mov	w1, w0
    2c74:	ldr	w0, [sp, #80]
    2c78:	cmp	w1, w0
    2c7c:	b.cs	2c88 <HUF_readDTableX1_wksp+0x108>  // b.hs, b.nlast
    2c80:	mov	x0, #0xffffffffffffffd4    	// #-44
    2c84:	b	2e40 <HUF_readDTableX1_wksp+0x2c0>
    2c88:	strb	wzr, [sp, #73]
    2c8c:	ldr	w0, [sp, #80]
    2c90:	and	w0, w0, #0xff
    2c94:	strb	w0, [sp, #74]
    2c98:	add	x0, sp, #0x48
    2c9c:	mov	x2, #0x4                   	// #4
    2ca0:	mov	x1, x0
    2ca4:	ldr	x0, [sp, #56]
    2ca8:	bl	22f8 <grub_memcpy>
    2cac:	str	wzr, [sp, #152]
    2cb0:	mov	w0, #0x1                   	// #1
    2cb4:	str	w0, [sp, #156]
    2cb8:	b	2d14 <HUF_readDTableX1_wksp+0x194>
    2cbc:	ldr	w0, [sp, #152]
    2cc0:	str	w0, [sp, #84]
    2cc4:	ldr	w0, [sp, #156]
    2cc8:	lsl	x0, x0, #2
    2ccc:	ldr	x1, [sp, #112]
    2cd0:	add	x0, x1, x0
    2cd4:	ldr	w1, [x0]
    2cd8:	ldr	w0, [sp, #156]
    2cdc:	sub	w0, w0, #0x1
    2ce0:	lsl	w0, w1, w0
    2ce4:	ldr	w1, [sp, #152]
    2ce8:	add	w0, w1, w0
    2cec:	str	w0, [sp, #152]
    2cf0:	ldr	w0, [sp, #156]
    2cf4:	lsl	x0, x0, #2
    2cf8:	ldr	x1, [sp, #112]
    2cfc:	add	x0, x1, x0
    2d00:	ldr	w1, [sp, #84]
    2d04:	str	w1, [x0]
    2d08:	ldr	w0, [sp, #156]
    2d0c:	add	w0, w0, #0x1
    2d10:	str	w0, [sp, #156]
    2d14:	ldr	w0, [sp, #80]
    2d18:	add	w0, w0, #0x1
    2d1c:	ldr	w1, [sp, #156]
    2d20:	cmp	w1, w0
    2d24:	b.cc	2cbc <HUF_readDTableX1_wksp+0x13c>  // b.lo, b.ul, b.last
    2d28:	str	wzr, [sp, #148]
    2d2c:	b	2e2c <HUF_readDTableX1_wksp+0x2ac>
    2d30:	ldr	w0, [sp, #148]
    2d34:	ldr	x1, [sp, #104]
    2d38:	add	x0, x1, x0
    2d3c:	ldrb	w0, [x0]
    2d40:	str	w0, [sp, #92]
    2d44:	ldr	w0, [sp, #92]
    2d48:	mov	w1, #0x1                   	// #1
    2d4c:	lsl	w0, w1, w0
    2d50:	asr	w0, w0, #1
    2d54:	str	w0, [sp, #88]
    2d58:	ldr	w0, [sp, #148]
    2d5c:	and	w0, w0, #0xff
    2d60:	strb	w0, [sp, #64]
    2d64:	ldr	w0, [sp, #80]
    2d68:	and	w1, w0, #0xff
    2d6c:	ldr	w0, [sp, #92]
    2d70:	and	w0, w0, #0xff
    2d74:	sub	w0, w1, w0
    2d78:	and	w0, w0, #0xff
    2d7c:	add	w0, w0, #0x1
    2d80:	and	w0, w0, #0xff
    2d84:	strb	w0, [sp, #65]
    2d88:	ldr	w0, [sp, #92]
    2d8c:	lsl	x0, x0, #2
    2d90:	ldr	x1, [sp, #112]
    2d94:	add	x0, x1, x0
    2d98:	ldr	w0, [x0]
    2d9c:	str	w0, [sp, #144]
    2da0:	b	2dc8 <HUF_readDTableX1_wksp+0x248>
    2da4:	ldr	w0, [sp, #144]
    2da8:	lsl	x0, x0, #1
    2dac:	ldr	x1, [sp, #128]
    2db0:	add	x0, x1, x0
    2db4:	ldrh	w1, [sp, #64]
    2db8:	strh	w1, [x0]
    2dbc:	ldr	w0, [sp, #144]
    2dc0:	add	w0, w0, #0x1
    2dc4:	str	w0, [sp, #144]
    2dc8:	ldr	w0, [sp, #92]
    2dcc:	lsl	x0, x0, #2
    2dd0:	ldr	x1, [sp, #112]
    2dd4:	add	x0, x1, x0
    2dd8:	ldr	w1, [x0]
    2ddc:	ldr	w0, [sp, #88]
    2de0:	add	w0, w1, w0
    2de4:	ldr	w1, [sp, #144]
    2de8:	cmp	w1, w0
    2dec:	b.cc	2da4 <HUF_readDTableX1_wksp+0x224>  // b.lo, b.ul, b.last
    2df0:	ldr	w0, [sp, #92]
    2df4:	lsl	x0, x0, #2
    2df8:	ldr	x1, [sp, #112]
    2dfc:	add	x0, x1, x0
    2e00:	ldr	w2, [x0]
    2e04:	ldr	w0, [sp, #92]
    2e08:	lsl	x0, x0, #2
    2e0c:	ldr	x1, [sp, #112]
    2e10:	add	x0, x1, x0
    2e14:	ldr	w1, [sp, #88]
    2e18:	add	w1, w2, w1
    2e1c:	str	w1, [x0]
    2e20:	ldr	w0, [sp, #148]
    2e24:	add	w0, w0, #0x1
    2e28:	str	w0, [sp, #148]
    2e2c:	ldr	w0, [sp, #76]
    2e30:	ldr	w1, [sp, #148]
    2e34:	cmp	w1, w0
    2e38:	b.cc	2d30 <HUF_readDTableX1_wksp+0x1b0>  // b.lo, b.ul, b.last
    2e3c:	ldr	x0, [sp, #96]
    2e40:	ldp	x29, x30, [sp], #160
    2e44:	ret

0000000000002e48 <HUF_readDTableX1>:
    2e48:	sub	sp, sp, #0x830
    2e4c:	stp	x29, x30, [sp]
    2e50:	mov	x29, sp
    2e54:	str	x0, [sp, #40]
    2e58:	str	x1, [sp, #32]
    2e5c:	str	x2, [sp, #24]
    2e60:	add	x0, sp, #0x30
    2e64:	mov	x4, #0x800                 	// #2048
    2e68:	mov	x3, x0
    2e6c:	ldr	x2, [sp, #24]
    2e70:	ldr	x1, [sp, #32]
    2e74:	ldr	x0, [sp, #40]
    2e78:	bl	2b80 <HUF_readDTableX1_wksp>
    2e7c:	ldp	x29, x30, [sp]
    2e80:	add	sp, sp, #0x830
    2e84:	ret

0000000000002e88 <HUF_decompress1X1_usingDTable_internal>:
    2e88:	stp	x29, x30, [sp, #-496]!
    2e8c:	mov	x29, sp
    2e90:	str	x19, [sp, #16]
    2e94:	str	x0, [sp, #72]
    2e98:	str	x1, [sp, #64]
    2e9c:	str	x2, [sp, #56]
    2ea0:	str	x3, [sp, #48]
    2ea4:	str	x4, [sp, #40]
    2ea8:	str	w5, [sp, #36]
    2eac:	ldr	x0, [sp, #72]
    2eb0:	str	x0, [sp, #488]
    2eb4:	ldr	x0, [sp, #64]
    2eb8:	str	x0, [sp, #480]
    2ebc:	ldr	x0, [sp, #56]
    2ec0:	str	x0, [sp, #472]
    2ec4:	ldr	x0, [sp, #48]
    2ec8:	str	x0, [sp, #464]
    2ecc:	ldr	x0, [sp, #40]
    2ed0:	str	x0, [sp, #456]
    2ed4:	ldr	x0, [sp, #488]
    2ed8:	str	x0, [sp, #448]
    2edc:	ldr	x1, [sp, #448]
    2ee0:	ldr	x0, [sp, #480]
    2ee4:	add	x0, x1, x0
    2ee8:	str	x0, [sp, #440]
    2eec:	ldr	x0, [sp, #456]
    2ef0:	add	x0, x0, #0x4
    2ef4:	str	x0, [sp, #432]
    2ef8:	ldr	x0, [sp, #432]
    2efc:	str	x0, [sp, #424]
    2f00:	ldr	x0, [sp, #456]
    2f04:	bl	2b58 <HUF_getDTableDesc>
    2f08:	str	w0, [sp, #128]
    2f0c:	ldrb	w0, [sp, #130]
    2f10:	str	w0, [sp, #420]
    2f14:	add	x0, sp, #0x58
    2f18:	ldr	x2, [sp, #464]
    2f1c:	ldr	x1, [sp, #472]
    2f20:	bl	25f8 <BIT_initDStream>
    2f24:	str	x0, [sp, #408]
    2f28:	ldr	x0, [sp, #408]
    2f2c:	bl	2564 <ERR_isError>
    2f30:	cmp	w0, #0x0
    2f34:	b.eq	2f40 <HUF_decompress1X1_usingDTable_internal+0xb8>  // b.none
    2f38:	ldr	x0, [sp, #408]
    2f3c:	b	32f4 <HUF_decompress1X1_usingDTable_internal+0x46c>
    2f40:	ldr	x0, [sp, #448]
    2f44:	str	x0, [sp, #400]
    2f48:	ldr	x0, [sp, #440]
    2f4c:	str	x0, [sp, #392]
    2f50:	ldr	x0, [sp, #424]
    2f54:	str	x0, [sp, #384]
    2f58:	ldr	w0, [sp, #420]
    2f5c:	str	w0, [sp, #380]
    2f60:	ldr	x0, [sp, #400]
    2f64:	str	x0, [sp, #368]
    2f68:	b	3158 <HUF_decompress1X1_usingDTable_internal+0x2d0>
    2f6c:	bl	232c <MEM_64bits>
    2f70:	cmp	w0, #0x0
    2f74:	b.eq	2fec <HUF_decompress1X1_usingDTable_internal+0x164>  // b.none
    2f78:	ldr	x19, [sp, #400]
    2f7c:	add	x0, x19, #0x1
    2f80:	str	x0, [sp, #400]
    2f84:	add	x0, sp, #0x58
    2f88:	str	x0, [sp, #360]
    2f8c:	ldr	x0, [sp, #384]
    2f90:	str	x0, [sp, #352]
    2f94:	ldr	w0, [sp, #380]
    2f98:	str	w0, [sp, #348]
    2f9c:	ldr	w1, [sp, #348]
    2fa0:	ldr	x0, [sp, #360]
    2fa4:	bl	290c <BIT_lookBitsFast>
    2fa8:	str	x0, [sp, #336]
    2fac:	ldr	x0, [sp, #336]
    2fb0:	lsl	x0, x0, #1
    2fb4:	ldr	x1, [sp, #352]
    2fb8:	add	x0, x1, x0
    2fbc:	ldrb	w0, [x0]
    2fc0:	strb	w0, [sp, #335]
    2fc4:	ldr	x0, [sp, #336]
    2fc8:	lsl	x0, x0, #1
    2fcc:	ldr	x1, [sp, #352]
    2fd0:	add	x0, x1, x0
    2fd4:	ldrb	w0, [x0, #1]
    2fd8:	mov	w1, w0
    2fdc:	ldr	x0, [sp, #360]
    2fe0:	bl	2960 <BIT_skipBits>
    2fe4:	ldrb	w0, [sp, #335]
    2fe8:	strb	w0, [x19]
    2fec:	bl	232c <MEM_64bits>
    2ff0:	ldr	x19, [sp, #400]
    2ff4:	add	x0, x19, #0x1
    2ff8:	str	x0, [sp, #400]
    2ffc:	add	x0, sp, #0x58
    3000:	str	x0, [sp, #320]
    3004:	ldr	x0, [sp, #384]
    3008:	str	x0, [sp, #312]
    300c:	ldr	w0, [sp, #380]
    3010:	str	w0, [sp, #308]
    3014:	ldr	w1, [sp, #308]
    3018:	ldr	x0, [sp, #320]
    301c:	bl	290c <BIT_lookBitsFast>
    3020:	str	x0, [sp, #296]
    3024:	ldr	x0, [sp, #296]
    3028:	lsl	x0, x0, #1
    302c:	ldr	x1, [sp, #312]
    3030:	add	x0, x1, x0
    3034:	ldrb	w0, [x0]
    3038:	strb	w0, [sp, #295]
    303c:	ldr	x0, [sp, #296]
    3040:	lsl	x0, x0, #1
    3044:	ldr	x1, [sp, #312]
    3048:	add	x0, x1, x0
    304c:	ldrb	w0, [x0, #1]
    3050:	mov	w1, w0
    3054:	ldr	x0, [sp, #320]
    3058:	bl	2960 <BIT_skipBits>
    305c:	ldrb	w0, [sp, #295]
    3060:	strb	w0, [x19]
    3064:	bl	232c <MEM_64bits>
    3068:	cmp	w0, #0x0
    306c:	b.eq	30e4 <HUF_decompress1X1_usingDTable_internal+0x25c>  // b.none
    3070:	ldr	x19, [sp, #400]
    3074:	add	x0, x19, #0x1
    3078:	str	x0, [sp, #400]
    307c:	add	x0, sp, #0x58
    3080:	str	x0, [sp, #280]
    3084:	ldr	x0, [sp, #384]
    3088:	str	x0, [sp, #272]
    308c:	ldr	w0, [sp, #380]
    3090:	str	w0, [sp, #268]
    3094:	ldr	w1, [sp, #268]
    3098:	ldr	x0, [sp, #280]
    309c:	bl	290c <BIT_lookBitsFast>
    30a0:	str	x0, [sp, #256]
    30a4:	ldr	x0, [sp, #256]
    30a8:	lsl	x0, x0, #1
    30ac:	ldr	x1, [sp, #272]
    30b0:	add	x0, x1, x0
    30b4:	ldrb	w0, [x0]
    30b8:	strb	w0, [sp, #255]
    30bc:	ldr	x0, [sp, #256]
    30c0:	lsl	x0, x0, #1
    30c4:	ldr	x1, [sp, #272]
    30c8:	add	x0, x1, x0
    30cc:	ldrb	w0, [x0, #1]
    30d0:	mov	w1, w0
    30d4:	ldr	x0, [sp, #280]
    30d8:	bl	2960 <BIT_skipBits>
    30dc:	ldrb	w0, [sp, #255]
    30e0:	strb	w0, [x19]
    30e4:	ldr	x19, [sp, #400]
    30e8:	add	x0, x19, #0x1
    30ec:	str	x0, [sp, #400]
    30f0:	add	x0, sp, #0x58
    30f4:	str	x0, [sp, #240]
    30f8:	ldr	x0, [sp, #384]
    30fc:	str	x0, [sp, #232]
    3100:	ldr	w0, [sp, #380]
    3104:	str	w0, [sp, #228]
    3108:	ldr	w1, [sp, #228]
    310c:	ldr	x0, [sp, #240]
    3110:	bl	290c <BIT_lookBitsFast>
    3114:	str	x0, [sp, #216]
    3118:	ldr	x0, [sp, #216]
    311c:	lsl	x0, x0, #1
    3120:	ldr	x1, [sp, #232]
    3124:	add	x0, x1, x0
    3128:	ldrb	w0, [x0]
    312c:	strb	w0, [sp, #215]
    3130:	ldr	x0, [sp, #216]
    3134:	lsl	x0, x0, #1
    3138:	ldr	x1, [sp, #232]
    313c:	add	x0, x1, x0
    3140:	ldrb	w0, [x0, #1]
    3144:	mov	w1, w0
    3148:	ldr	x0, [sp, #240]
    314c:	bl	2960 <BIT_skipBits>
    3150:	ldrb	w0, [sp, #215]
    3154:	strb	w0, [x19]
    3158:	add	x0, sp, #0x58
    315c:	bl	2990 <BIT_reloadDStream>
    3160:	cmp	w0, #0x0
    3164:	cset	w0, eq  // eq = none
    3168:	and	w1, w0, #0xff
    316c:	ldr	x0, [sp, #392]
    3170:	sub	x0, x0, #0x3
    3174:	ldr	x2, [sp, #400]
    3178:	cmp	x2, x0
    317c:	cset	w0, cc  // cc = lo, ul, last
    3180:	and	w0, w0, #0xff
    3184:	and	w0, w1, w0
    3188:	and	w0, w0, #0xff
    318c:	cmp	w0, #0x0
    3190:	b.ne	2f6c <HUF_decompress1X1_usingDTable_internal+0xe4>  // b.any
    3194:	bl	2324 <MEM_32bits>
    3198:	cmp	w0, #0x0
    319c:	b.eq	32c8 <HUF_decompress1X1_usingDTable_internal+0x440>  // b.none
    31a0:	b	3218 <HUF_decompress1X1_usingDTable_internal+0x390>
    31a4:	ldr	x19, [sp, #400]
    31a8:	add	x0, x19, #0x1
    31ac:	str	x0, [sp, #400]
    31b0:	add	x0, sp, #0x58
    31b4:	str	x0, [sp, #200]
    31b8:	ldr	x0, [sp, #384]
    31bc:	str	x0, [sp, #192]
    31c0:	ldr	w0, [sp, #380]
    31c4:	str	w0, [sp, #188]
    31c8:	ldr	w1, [sp, #188]
    31cc:	ldr	x0, [sp, #200]
    31d0:	bl	290c <BIT_lookBitsFast>
    31d4:	str	x0, [sp, #176]
    31d8:	ldr	x0, [sp, #176]
    31dc:	lsl	x0, x0, #1
    31e0:	ldr	x1, [sp, #192]
    31e4:	add	x0, x1, x0
    31e8:	ldrb	w0, [x0]
    31ec:	strb	w0, [sp, #175]
    31f0:	ldr	x0, [sp, #176]
    31f4:	lsl	x0, x0, #1
    31f8:	ldr	x1, [sp, #192]
    31fc:	add	x0, x1, x0
    3200:	ldrb	w0, [x0, #1]
    3204:	mov	w1, w0
    3208:	ldr	x0, [sp, #200]
    320c:	bl	2960 <BIT_skipBits>
    3210:	ldrb	w0, [sp, #175]
    3214:	strb	w0, [x19]
    3218:	add	x0, sp, #0x58
    321c:	bl	2990 <BIT_reloadDStream>
    3220:	cmp	w0, #0x0
    3224:	cset	w0, eq  // eq = none
    3228:	and	w1, w0, #0xff
    322c:	ldr	x2, [sp, #392]
    3230:	ldr	x0, [sp, #400]
    3234:	cmp	x2, x0
    3238:	cset	w0, hi  // hi = pmore
    323c:	and	w0, w0, #0xff
    3240:	and	w0, w1, w0
    3244:	and	w0, w0, #0xff
    3248:	cmp	w0, #0x0
    324c:	b.ne	31a4 <HUF_decompress1X1_usingDTable_internal+0x31c>  // b.any
    3250:	b	32c8 <HUF_decompress1X1_usingDTable_internal+0x440>
    3254:	ldr	x19, [sp, #400]
    3258:	add	x0, x19, #0x1
    325c:	str	x0, [sp, #400]
    3260:	add	x0, sp, #0x58
    3264:	str	x0, [sp, #160]
    3268:	ldr	x0, [sp, #384]
    326c:	str	x0, [sp, #152]
    3270:	ldr	w0, [sp, #380]
    3274:	str	w0, [sp, #148]
    3278:	ldr	w1, [sp, #148]
    327c:	ldr	x0, [sp, #160]
    3280:	bl	290c <BIT_lookBitsFast>
    3284:	str	x0, [sp, #136]
    3288:	ldr	x0, [sp, #136]
    328c:	lsl	x0, x0, #1
    3290:	ldr	x1, [sp, #152]
    3294:	add	x0, x1, x0
    3298:	ldrb	w0, [x0]
    329c:	strb	w0, [sp, #135]
    32a0:	ldr	x0, [sp, #136]
    32a4:	lsl	x0, x0, #1
    32a8:	ldr	x1, [sp, #152]
    32ac:	add	x0, x1, x0
    32b0:	ldrb	w0, [x0, #1]
    32b4:	mov	w1, w0
    32b8:	ldr	x0, [sp, #160]
    32bc:	bl	2960 <BIT_skipBits>
    32c0:	ldrb	w0, [sp, #135]
    32c4:	strb	w0, [x19]
    32c8:	ldr	x1, [sp, #392]
    32cc:	ldr	x0, [sp, #400]
    32d0:	cmp	x1, x0
    32d4:	b.hi	3254 <HUF_decompress1X1_usingDTable_internal+0x3cc>  // b.pmore
    32d8:	add	x0, sp, #0x58
    32dc:	bl	2b14 <BIT_endOfDStream>
    32e0:	cmp	w0, #0x0
    32e4:	b.ne	32f0 <HUF_decompress1X1_usingDTable_internal+0x468>  // b.any
    32e8:	mov	x0, #0xffffffffffffffec    	// #-20
    32ec:	b	32f4 <HUF_decompress1X1_usingDTable_internal+0x46c>
    32f0:	ldr	x0, [sp, #480]
    32f4:	ldr	x19, [sp, #16]
    32f8:	ldp	x29, x30, [sp], #496
    32fc:	ret

0000000000003300 <HUF_decompress4X1_usingDTable_internal>:
    3300:	sub	sp, sp, #0x8d0
    3304:	stp	x29, x30, [sp]
    3308:	mov	x29, sp
    330c:	str	x19, [sp, #16]
    3310:	str	x0, [sp, #72]
    3314:	str	x1, [sp, #64]
    3318:	str	x2, [sp, #56]
    331c:	str	x3, [sp, #48]
    3320:	str	x4, [sp, #40]
    3324:	str	w5, [sp, #36]
    3328:	ldr	x0, [sp, #72]
    332c:	str	x0, [sp, #2248]
    3330:	ldr	x0, [sp, #64]
    3334:	str	x0, [sp, #2240]
    3338:	ldr	x0, [sp, #56]
    333c:	str	x0, [sp, #2232]
    3340:	ldr	x0, [sp, #48]
    3344:	str	x0, [sp, #2224]
    3348:	ldr	x0, [sp, #40]
    334c:	str	x0, [sp, #2216]
    3350:	ldr	x0, [sp, #2224]
    3354:	cmp	x0, #0x9
    3358:	b.hi	3364 <HUF_decompress4X1_usingDTable_internal+0x64>  // b.pmore
    335c:	mov	x0, #0xffffffffffffffec    	// #-20
    3360:	b	4c98 <HUF_decompress4X1_usingDTable_internal+0x1998>
    3364:	ldr	x0, [sp, #2232]
    3368:	str	x0, [sp, #2208]
    336c:	ldr	x0, [sp, #2248]
    3370:	str	x0, [sp, #2200]
    3374:	ldr	x1, [sp, #2200]
    3378:	ldr	x0, [sp, #2240]
    337c:	add	x0, x1, x0
    3380:	str	x0, [sp, #2192]
    3384:	ldr	x0, [sp, #2216]
    3388:	add	x0, x0, #0x4
    338c:	str	x0, [sp, #2184]
    3390:	ldr	x0, [sp, #2184]
    3394:	str	x0, [sp, #2176]
    3398:	ldr	x0, [sp, #2208]
    339c:	bl	23e8 <MEM_readLE16>
    33a0:	and	w0, w0, #0xffff
    33a4:	and	x0, x0, #0xffff
    33a8:	str	x0, [sp, #2168]
    33ac:	ldr	x0, [sp, #2208]
    33b0:	add	x0, x0, #0x2
    33b4:	bl	23e8 <MEM_readLE16>
    33b8:	and	w0, w0, #0xffff
    33bc:	and	x0, x0, #0xffff
    33c0:	str	x0, [sp, #2160]
    33c4:	ldr	x0, [sp, #2208]
    33c8:	add	x0, x0, #0x4
    33cc:	bl	23e8 <MEM_readLE16>
    33d0:	and	w0, w0, #0xffff
    33d4:	and	x0, x0, #0xffff
    33d8:	str	x0, [sp, #2152]
    33dc:	ldr	x1, [sp, #2168]
    33e0:	ldr	x0, [sp, #2160]
    33e4:	add	x1, x1, x0
    33e8:	ldr	x0, [sp, #2152]
    33ec:	add	x0, x1, x0
    33f0:	ldr	x1, [sp, #2224]
    33f4:	sub	x0, x1, x0
    33f8:	sub	x0, x0, #0x6
    33fc:	str	x0, [sp, #2144]
    3400:	ldr	x0, [sp, #2208]
    3404:	add	x0, x0, #0x6
    3408:	str	x0, [sp, #2136]
    340c:	ldr	x1, [sp, #2136]
    3410:	ldr	x0, [sp, #2168]
    3414:	add	x0, x1, x0
    3418:	str	x0, [sp, #2128]
    341c:	ldr	x1, [sp, #2128]
    3420:	ldr	x0, [sp, #2160]
    3424:	add	x0, x1, x0
    3428:	str	x0, [sp, #2120]
    342c:	ldr	x1, [sp, #2120]
    3430:	ldr	x0, [sp, #2152]
    3434:	add	x0, x1, x0
    3438:	str	x0, [sp, #2112]
    343c:	ldr	x0, [sp, #2240]
    3440:	add	x0, x0, #0x3
    3444:	lsr	x0, x0, #2
    3448:	str	x0, [sp, #2104]
    344c:	ldr	x1, [sp, #2200]
    3450:	ldr	x0, [sp, #2104]
    3454:	add	x0, x1, x0
    3458:	str	x0, [sp, #2096]
    345c:	ldr	x1, [sp, #2096]
    3460:	ldr	x0, [sp, #2104]
    3464:	add	x0, x1, x0
    3468:	str	x0, [sp, #2088]
    346c:	ldr	x1, [sp, #2088]
    3470:	ldr	x0, [sp, #2104]
    3474:	add	x0, x1, x0
    3478:	str	x0, [sp, #2080]
    347c:	ldr	x0, [sp, #2200]
    3480:	str	x0, [sp, #2072]
    3484:	ldr	x0, [sp, #2096]
    3488:	str	x0, [sp, #2064]
    348c:	ldr	x0, [sp, #2088]
    3490:	str	x0, [sp, #2056]
    3494:	ldr	x0, [sp, #2080]
    3498:	str	x0, [sp, #2048]
    349c:	str	wzr, [sp, #2044]
    34a0:	ldr	x0, [sp, #2216]
    34a4:	bl	2b58 <HUF_getDTableDesc>
    34a8:	str	w0, [sp, #240]
    34ac:	ldrb	w0, [sp, #242]
    34b0:	str	w0, [sp, #2040]
    34b4:	ldr	x1, [sp, #2224]
    34b8:	ldr	x0, [sp, #2144]
    34bc:	cmp	x1, x0
    34c0:	b.cs	34cc <HUF_decompress4X1_usingDTable_internal+0x1cc>  // b.hs, b.nlast
    34c4:	mov	x0, #0xffffffffffffffec    	// #-20
    34c8:	b	4c98 <HUF_decompress4X1_usingDTable_internal+0x1998>
    34cc:	add	x0, sp, #0x50
    34d0:	ldr	x2, [sp, #2168]
    34d4:	ldr	x1, [sp, #2136]
    34d8:	bl	25f8 <BIT_initDStream>
    34dc:	str	x0, [sp, #2032]
    34e0:	ldr	x0, [sp, #2032]
    34e4:	bl	2564 <ERR_isError>
    34e8:	cmp	w0, #0x0
    34ec:	b.eq	34f8 <HUF_decompress4X1_usingDTable_internal+0x1f8>  // b.none
    34f0:	ldr	x0, [sp, #2032]
    34f4:	b	4c98 <HUF_decompress4X1_usingDTable_internal+0x1998>
    34f8:	add	x0, sp, #0x78
    34fc:	ldr	x2, [sp, #2160]
    3500:	ldr	x1, [sp, #2128]
    3504:	bl	25f8 <BIT_initDStream>
    3508:	str	x0, [sp, #2024]
    350c:	ldr	x0, [sp, #2024]
    3510:	bl	2564 <ERR_isError>
    3514:	cmp	w0, #0x0
    3518:	b.eq	3524 <HUF_decompress4X1_usingDTable_internal+0x224>  // b.none
    351c:	ldr	x0, [sp, #2024]
    3520:	b	4c98 <HUF_decompress4X1_usingDTable_internal+0x1998>
    3524:	add	x0, sp, #0xa0
    3528:	ldr	x2, [sp, #2152]
    352c:	ldr	x1, [sp, #2120]
    3530:	bl	25f8 <BIT_initDStream>
    3534:	str	x0, [sp, #2016]
    3538:	ldr	x0, [sp, #2016]
    353c:	bl	2564 <ERR_isError>
    3540:	cmp	w0, #0x0
    3544:	b.eq	3550 <HUF_decompress4X1_usingDTable_internal+0x250>  // b.none
    3548:	ldr	x0, [sp, #2016]
    354c:	b	4c98 <HUF_decompress4X1_usingDTable_internal+0x1998>
    3550:	add	x0, sp, #0xc8
    3554:	ldr	x2, [sp, #2144]
    3558:	ldr	x1, [sp, #2112]
    355c:	bl	25f8 <BIT_initDStream>
    3560:	str	x0, [sp, #2008]
    3564:	ldr	x0, [sp, #2008]
    3568:	bl	2564 <ERR_isError>
    356c:	cmp	w0, #0x0
    3570:	b.eq	357c <HUF_decompress4X1_usingDTable_internal+0x27c>  // b.none
    3574:	ldr	x0, [sp, #2008]
    3578:	b	4c98 <HUF_decompress4X1_usingDTable_internal+0x1998>
    357c:	add	x0, sp, #0x50
    3580:	bl	2990 <BIT_reloadDStream>
    3584:	mov	w19, w0
    3588:	add	x0, sp, #0x78
    358c:	bl	2990 <BIT_reloadDStream>
    3590:	orr	w19, w19, w0
    3594:	add	x0, sp, #0xa0
    3598:	bl	2990 <BIT_reloadDStream>
    359c:	orr	w19, w19, w0
    35a0:	add	x0, sp, #0xc8
    35a4:	bl	2990 <BIT_reloadDStream>
    35a8:	orr	w0, w19, w0
    35ac:	str	w0, [sp, #2044]
    35b0:	b	3d84 <HUF_decompress4X1_usingDTable_internal+0xa84>
    35b4:	bl	232c <MEM_64bits>
    35b8:	cmp	w0, #0x0
    35bc:	b.eq	3634 <HUF_decompress4X1_usingDTable_internal+0x334>  // b.none
    35c0:	ldr	x19, [sp, #2072]
    35c4:	add	x0, x19, #0x1
    35c8:	str	x0, [sp, #2072]
    35cc:	add	x0, sp, #0x50
    35d0:	str	x0, [sp, #2000]
    35d4:	ldr	x0, [sp, #2176]
    35d8:	str	x0, [sp, #1992]
    35dc:	ldr	w0, [sp, #2040]
    35e0:	str	w0, [sp, #1988]
    35e4:	ldr	w1, [sp, #1988]
    35e8:	ldr	x0, [sp, #2000]
    35ec:	bl	290c <BIT_lookBitsFast>
    35f0:	str	x0, [sp, #1976]
    35f4:	ldr	x0, [sp, #1976]
    35f8:	lsl	x0, x0, #1
    35fc:	ldr	x1, [sp, #1992]
    3600:	add	x0, x1, x0
    3604:	ldrb	w0, [x0]
    3608:	strb	w0, [sp, #1975]
    360c:	ldr	x0, [sp, #1976]
    3610:	lsl	x0, x0, #1
    3614:	ldr	x1, [sp, #1992]
    3618:	add	x0, x1, x0
    361c:	ldrb	w0, [x0, #1]
    3620:	mov	w1, w0
    3624:	ldr	x0, [sp, #2000]
    3628:	bl	2960 <BIT_skipBits>
    362c:	ldrb	w0, [sp, #1975]
    3630:	strb	w0, [x19]
    3634:	bl	232c <MEM_64bits>
    3638:	cmp	w0, #0x0
    363c:	b.eq	36b4 <HUF_decompress4X1_usingDTable_internal+0x3b4>  // b.none
    3640:	ldr	x19, [sp, #2064]
    3644:	add	x0, x19, #0x1
    3648:	str	x0, [sp, #2064]
    364c:	add	x0, sp, #0x78
    3650:	str	x0, [sp, #1960]
    3654:	ldr	x0, [sp, #2176]
    3658:	str	x0, [sp, #1952]
    365c:	ldr	w0, [sp, #2040]
    3660:	str	w0, [sp, #1948]
    3664:	ldr	w1, [sp, #1948]
    3668:	ldr	x0, [sp, #1960]
    366c:	bl	290c <BIT_lookBitsFast>
    3670:	str	x0, [sp, #1936]
    3674:	ldr	x0, [sp, #1936]
    3678:	lsl	x0, x0, #1
    367c:	ldr	x1, [sp, #1952]
    3680:	add	x0, x1, x0
    3684:	ldrb	w0, [x0]
    3688:	strb	w0, [sp, #1935]
    368c:	ldr	x0, [sp, #1936]
    3690:	lsl	x0, x0, #1
    3694:	ldr	x1, [sp, #1952]
    3698:	add	x0, x1, x0
    369c:	ldrb	w0, [x0, #1]
    36a0:	mov	w1, w0
    36a4:	ldr	x0, [sp, #1960]
    36a8:	bl	2960 <BIT_skipBits>
    36ac:	ldrb	w0, [sp, #1935]
    36b0:	strb	w0, [x19]
    36b4:	bl	232c <MEM_64bits>
    36b8:	cmp	w0, #0x0
    36bc:	b.eq	3734 <HUF_decompress4X1_usingDTable_internal+0x434>  // b.none
    36c0:	ldr	x19, [sp, #2056]
    36c4:	add	x0, x19, #0x1
    36c8:	str	x0, [sp, #2056]
    36cc:	add	x0, sp, #0xa0
    36d0:	str	x0, [sp, #1920]
    36d4:	ldr	x0, [sp, #2176]
    36d8:	str	x0, [sp, #1912]
    36dc:	ldr	w0, [sp, #2040]
    36e0:	str	w0, [sp, #1908]
    36e4:	ldr	w1, [sp, #1908]
    36e8:	ldr	x0, [sp, #1920]
    36ec:	bl	290c <BIT_lookBitsFast>
    36f0:	str	x0, [sp, #1896]
    36f4:	ldr	x0, [sp, #1896]
    36f8:	lsl	x0, x0, #1
    36fc:	ldr	x1, [sp, #1912]
    3700:	add	x0, x1, x0
    3704:	ldrb	w0, [x0]
    3708:	strb	w0, [sp, #1895]
    370c:	ldr	x0, [sp, #1896]
    3710:	lsl	x0, x0, #1
    3714:	ldr	x1, [sp, #1912]
    3718:	add	x0, x1, x0
    371c:	ldrb	w0, [x0, #1]
    3720:	mov	w1, w0
    3724:	ldr	x0, [sp, #1920]
    3728:	bl	2960 <BIT_skipBits>
    372c:	ldrb	w0, [sp, #1895]
    3730:	strb	w0, [x19]
    3734:	bl	232c <MEM_64bits>
    3738:	cmp	w0, #0x0
    373c:	b.eq	37b4 <HUF_decompress4X1_usingDTable_internal+0x4b4>  // b.none
    3740:	ldr	x19, [sp, #2048]
    3744:	add	x0, x19, #0x1
    3748:	str	x0, [sp, #2048]
    374c:	add	x0, sp, #0xc8
    3750:	str	x0, [sp, #1880]
    3754:	ldr	x0, [sp, #2176]
    3758:	str	x0, [sp, #1872]
    375c:	ldr	w0, [sp, #2040]
    3760:	str	w0, [sp, #1868]
    3764:	ldr	w1, [sp, #1868]
    3768:	ldr	x0, [sp, #1880]
    376c:	bl	290c <BIT_lookBitsFast>
    3770:	str	x0, [sp, #1856]
    3774:	ldr	x0, [sp, #1856]
    3778:	lsl	x0, x0, #1
    377c:	ldr	x1, [sp, #1872]
    3780:	add	x0, x1, x0
    3784:	ldrb	w0, [x0]
    3788:	strb	w0, [sp, #1855]
    378c:	ldr	x0, [sp, #1856]
    3790:	lsl	x0, x0, #1
    3794:	ldr	x1, [sp, #1872]
    3798:	add	x0, x1, x0
    379c:	ldrb	w0, [x0, #1]
    37a0:	mov	w1, w0
    37a4:	ldr	x0, [sp, #1880]
    37a8:	bl	2960 <BIT_skipBits>
    37ac:	ldrb	w0, [sp, #1855]
    37b0:	strb	w0, [x19]
    37b4:	bl	232c <MEM_64bits>
    37b8:	ldr	x19, [sp, #2072]
    37bc:	add	x0, x19, #0x1
    37c0:	str	x0, [sp, #2072]
    37c4:	add	x0, sp, #0x50
    37c8:	str	x0, [sp, #1840]
    37cc:	ldr	x0, [sp, #2176]
    37d0:	str	x0, [sp, #1832]
    37d4:	ldr	w0, [sp, #2040]
    37d8:	str	w0, [sp, #1828]
    37dc:	ldr	w1, [sp, #1828]
    37e0:	ldr	x0, [sp, #1840]
    37e4:	bl	290c <BIT_lookBitsFast>
    37e8:	str	x0, [sp, #1816]
    37ec:	ldr	x0, [sp, #1816]
    37f0:	lsl	x0, x0, #1
    37f4:	ldr	x1, [sp, #1832]
    37f8:	add	x0, x1, x0
    37fc:	ldrb	w0, [x0]
    3800:	strb	w0, [sp, #1815]
    3804:	ldr	x0, [sp, #1816]
    3808:	lsl	x0, x0, #1
    380c:	ldr	x1, [sp, #1832]
    3810:	add	x0, x1, x0
    3814:	ldrb	w0, [x0, #1]
    3818:	mov	w1, w0
    381c:	ldr	x0, [sp, #1840]
    3820:	bl	2960 <BIT_skipBits>
    3824:	ldrb	w0, [sp, #1815]
    3828:	strb	w0, [x19]
    382c:	bl	232c <MEM_64bits>
    3830:	ldr	x19, [sp, #2064]
    3834:	add	x0, x19, #0x1
    3838:	str	x0, [sp, #2064]
    383c:	add	x0, sp, #0x78
    3840:	str	x0, [sp, #1800]
    3844:	ldr	x0, [sp, #2176]
    3848:	str	x0, [sp, #1792]
    384c:	ldr	w0, [sp, #2040]
    3850:	str	w0, [sp, #1788]
    3854:	ldr	w1, [sp, #1788]
    3858:	ldr	x0, [sp, #1800]
    385c:	bl	290c <BIT_lookBitsFast>
    3860:	str	x0, [sp, #1776]
    3864:	ldr	x0, [sp, #1776]
    3868:	lsl	x0, x0, #1
    386c:	ldr	x1, [sp, #1792]
    3870:	add	x0, x1, x0
    3874:	ldrb	w0, [x0]
    3878:	strb	w0, [sp, #1775]
    387c:	ldr	x0, [sp, #1776]
    3880:	lsl	x0, x0, #1
    3884:	ldr	x1, [sp, #1792]
    3888:	add	x0, x1, x0
    388c:	ldrb	w0, [x0, #1]
    3890:	mov	w1, w0
    3894:	ldr	x0, [sp, #1800]
    3898:	bl	2960 <BIT_skipBits>
    389c:	ldrb	w0, [sp, #1775]
    38a0:	strb	w0, [x19]
    38a4:	bl	232c <MEM_64bits>
    38a8:	ldr	x19, [sp, #2056]
    38ac:	add	x0, x19, #0x1
    38b0:	str	x0, [sp, #2056]
    38b4:	add	x0, sp, #0xa0
    38b8:	str	x0, [sp, #1760]
    38bc:	ldr	x0, [sp, #2176]
    38c0:	str	x0, [sp, #1752]
    38c4:	ldr	w0, [sp, #2040]
    38c8:	str	w0, [sp, #1748]
    38cc:	ldr	w1, [sp, #1748]
    38d0:	ldr	x0, [sp, #1760]
    38d4:	bl	290c <BIT_lookBitsFast>
    38d8:	str	x0, [sp, #1736]
    38dc:	ldr	x0, [sp, #1736]
    38e0:	lsl	x0, x0, #1
    38e4:	ldr	x1, [sp, #1752]
    38e8:	add	x0, x1, x0
    38ec:	ldrb	w0, [x0]
    38f0:	strb	w0, [sp, #1735]
    38f4:	ldr	x0, [sp, #1736]
    38f8:	lsl	x0, x0, #1
    38fc:	ldr	x1, [sp, #1752]
    3900:	add	x0, x1, x0
    3904:	ldrb	w0, [x0, #1]
    3908:	mov	w1, w0
    390c:	ldr	x0, [sp, #1760]
    3910:	bl	2960 <BIT_skipBits>
    3914:	ldrb	w0, [sp, #1735]
    3918:	strb	w0, [x19]
    391c:	bl	232c <MEM_64bits>
    3920:	ldr	x19, [sp, #2048]
    3924:	add	x0, x19, #0x1
    3928:	str	x0, [sp, #2048]
    392c:	add	x0, sp, #0xc8
    3930:	str	x0, [sp, #1720]
    3934:	ldr	x0, [sp, #2176]
    3938:	str	x0, [sp, #1712]
    393c:	ldr	w0, [sp, #2040]
    3940:	str	w0, [sp, #1708]
    3944:	ldr	w1, [sp, #1708]
    3948:	ldr	x0, [sp, #1720]
    394c:	bl	290c <BIT_lookBitsFast>
    3950:	str	x0, [sp, #1696]
    3954:	ldr	x0, [sp, #1696]
    3958:	lsl	x0, x0, #1
    395c:	ldr	x1, [sp, #1712]
    3960:	add	x0, x1, x0
    3964:	ldrb	w0, [x0]
    3968:	strb	w0, [sp, #1695]
    396c:	ldr	x0, [sp, #1696]
    3970:	lsl	x0, x0, #1
    3974:	ldr	x1, [sp, #1712]
    3978:	add	x0, x1, x0
    397c:	ldrb	w0, [x0, #1]
    3980:	mov	w1, w0
    3984:	ldr	x0, [sp, #1720]
    3988:	bl	2960 <BIT_skipBits>
    398c:	ldrb	w0, [sp, #1695]
    3990:	strb	w0, [x19]
    3994:	bl	232c <MEM_64bits>
    3998:	cmp	w0, #0x0
    399c:	b.eq	3a14 <HUF_decompress4X1_usingDTable_internal+0x714>  // b.none
    39a0:	ldr	x19, [sp, #2072]
    39a4:	add	x0, x19, #0x1
    39a8:	str	x0, [sp, #2072]
    39ac:	add	x0, sp, #0x50
    39b0:	str	x0, [sp, #1680]
    39b4:	ldr	x0, [sp, #2176]
    39b8:	str	x0, [sp, #1672]
    39bc:	ldr	w0, [sp, #2040]
    39c0:	str	w0, [sp, #1668]
    39c4:	ldr	w1, [sp, #1668]
    39c8:	ldr	x0, [sp, #1680]
    39cc:	bl	290c <BIT_lookBitsFast>
    39d0:	str	x0, [sp, #1656]
    39d4:	ldr	x0, [sp, #1656]
    39d8:	lsl	x0, x0, #1
    39dc:	ldr	x1, [sp, #1672]
    39e0:	add	x0, x1, x0
    39e4:	ldrb	w0, [x0]
    39e8:	strb	w0, [sp, #1655]
    39ec:	ldr	x0, [sp, #1656]
    39f0:	lsl	x0, x0, #1
    39f4:	ldr	x1, [sp, #1672]
    39f8:	add	x0, x1, x0
    39fc:	ldrb	w0, [x0, #1]
    3a00:	mov	w1, w0
    3a04:	ldr	x0, [sp, #1680]
    3a08:	bl	2960 <BIT_skipBits>
    3a0c:	ldrb	w0, [sp, #1655]
    3a10:	strb	w0, [x19]
    3a14:	bl	232c <MEM_64bits>
    3a18:	cmp	w0, #0x0
    3a1c:	b.eq	3a94 <HUF_decompress4X1_usingDTable_internal+0x794>  // b.none
    3a20:	ldr	x19, [sp, #2064]
    3a24:	add	x0, x19, #0x1
    3a28:	str	x0, [sp, #2064]
    3a2c:	add	x0, sp, #0x78
    3a30:	str	x0, [sp, #1640]
    3a34:	ldr	x0, [sp, #2176]
    3a38:	str	x0, [sp, #1632]
    3a3c:	ldr	w0, [sp, #2040]
    3a40:	str	w0, [sp, #1628]
    3a44:	ldr	w1, [sp, #1628]
    3a48:	ldr	x0, [sp, #1640]
    3a4c:	bl	290c <BIT_lookBitsFast>
    3a50:	str	x0, [sp, #1616]
    3a54:	ldr	x0, [sp, #1616]
    3a58:	lsl	x0, x0, #1
    3a5c:	ldr	x1, [sp, #1632]
    3a60:	add	x0, x1, x0
    3a64:	ldrb	w0, [x0]
    3a68:	strb	w0, [sp, #1615]
    3a6c:	ldr	x0, [sp, #1616]
    3a70:	lsl	x0, x0, #1
    3a74:	ldr	x1, [sp, #1632]
    3a78:	add	x0, x1, x0
    3a7c:	ldrb	w0, [x0, #1]
    3a80:	mov	w1, w0
    3a84:	ldr	x0, [sp, #1640]
    3a88:	bl	2960 <BIT_skipBits>
    3a8c:	ldrb	w0, [sp, #1615]
    3a90:	strb	w0, [x19]
    3a94:	bl	232c <MEM_64bits>
    3a98:	cmp	w0, #0x0
    3a9c:	b.eq	3b14 <HUF_decompress4X1_usingDTable_internal+0x814>  // b.none
    3aa0:	ldr	x19, [sp, #2056]
    3aa4:	add	x0, x19, #0x1
    3aa8:	str	x0, [sp, #2056]
    3aac:	add	x0, sp, #0xa0
    3ab0:	str	x0, [sp, #1600]
    3ab4:	ldr	x0, [sp, #2176]
    3ab8:	str	x0, [sp, #1592]
    3abc:	ldr	w0, [sp, #2040]
    3ac0:	str	w0, [sp, #1588]
    3ac4:	ldr	w1, [sp, #1588]
    3ac8:	ldr	x0, [sp, #1600]
    3acc:	bl	290c <BIT_lookBitsFast>
    3ad0:	str	x0, [sp, #1576]
    3ad4:	ldr	x0, [sp, #1576]
    3ad8:	lsl	x0, x0, #1
    3adc:	ldr	x1, [sp, #1592]
    3ae0:	add	x0, x1, x0
    3ae4:	ldrb	w0, [x0]
    3ae8:	strb	w0, [sp, #1575]
    3aec:	ldr	x0, [sp, #1576]
    3af0:	lsl	x0, x0, #1
    3af4:	ldr	x1, [sp, #1592]
    3af8:	add	x0, x1, x0
    3afc:	ldrb	w0, [x0, #1]
    3b00:	mov	w1, w0
    3b04:	ldr	x0, [sp, #1600]
    3b08:	bl	2960 <BIT_skipBits>
    3b0c:	ldrb	w0, [sp, #1575]
    3b10:	strb	w0, [x19]
    3b14:	bl	232c <MEM_64bits>
    3b18:	cmp	w0, #0x0
    3b1c:	b.eq	3b94 <HUF_decompress4X1_usingDTable_internal+0x894>  // b.none
    3b20:	ldr	x19, [sp, #2048]
    3b24:	add	x0, x19, #0x1
    3b28:	str	x0, [sp, #2048]
    3b2c:	add	x0, sp, #0xc8
    3b30:	str	x0, [sp, #1560]
    3b34:	ldr	x0, [sp, #2176]
    3b38:	str	x0, [sp, #1552]
    3b3c:	ldr	w0, [sp, #2040]
    3b40:	str	w0, [sp, #1548]
    3b44:	ldr	w1, [sp, #1548]
    3b48:	ldr	x0, [sp, #1560]
    3b4c:	bl	290c <BIT_lookBitsFast>
    3b50:	str	x0, [sp, #1536]
    3b54:	ldr	x0, [sp, #1536]
    3b58:	lsl	x0, x0, #1
    3b5c:	ldr	x1, [sp, #1552]
    3b60:	add	x0, x1, x0
    3b64:	ldrb	w0, [x0]
    3b68:	strb	w0, [sp, #1535]
    3b6c:	ldr	x0, [sp, #1536]
    3b70:	lsl	x0, x0, #1
    3b74:	ldr	x1, [sp, #1552]
    3b78:	add	x0, x1, x0
    3b7c:	ldrb	w0, [x0, #1]
    3b80:	mov	w1, w0
    3b84:	ldr	x0, [sp, #1560]
    3b88:	bl	2960 <BIT_skipBits>
    3b8c:	ldrb	w0, [sp, #1535]
    3b90:	strb	w0, [x19]
    3b94:	ldr	x19, [sp, #2072]
    3b98:	add	x0, x19, #0x1
    3b9c:	str	x0, [sp, #2072]
    3ba0:	add	x0, sp, #0x50
    3ba4:	str	x0, [sp, #1520]
    3ba8:	ldr	x0, [sp, #2176]
    3bac:	str	x0, [sp, #1512]
    3bb0:	ldr	w0, [sp, #2040]
    3bb4:	str	w0, [sp, #1508]
    3bb8:	ldr	w1, [sp, #1508]
    3bbc:	ldr	x0, [sp, #1520]
    3bc0:	bl	290c <BIT_lookBitsFast>
    3bc4:	str	x0, [sp, #1496]
    3bc8:	ldr	x0, [sp, #1496]
    3bcc:	lsl	x0, x0, #1
    3bd0:	ldr	x1, [sp, #1512]
    3bd4:	add	x0, x1, x0
    3bd8:	ldrb	w0, [x0]
    3bdc:	strb	w0, [sp, #1495]
    3be0:	ldr	x0, [sp, #1496]
    3be4:	lsl	x0, x0, #1
    3be8:	ldr	x1, [sp, #1512]
    3bec:	add	x0, x1, x0
    3bf0:	ldrb	w0, [x0, #1]
    3bf4:	mov	w1, w0
    3bf8:	ldr	x0, [sp, #1520]
    3bfc:	bl	2960 <BIT_skipBits>
    3c00:	ldrb	w0, [sp, #1495]
    3c04:	strb	w0, [x19]
    3c08:	ldr	x19, [sp, #2064]
    3c0c:	add	x0, x19, #0x1
    3c10:	str	x0, [sp, #2064]
    3c14:	add	x0, sp, #0x78
    3c18:	str	x0, [sp, #1480]
    3c1c:	ldr	x0, [sp, #2176]
    3c20:	str	x0, [sp, #1472]
    3c24:	ldr	w0, [sp, #2040]
    3c28:	str	w0, [sp, #1468]
    3c2c:	ldr	w1, [sp, #1468]
    3c30:	ldr	x0, [sp, #1480]
    3c34:	bl	290c <BIT_lookBitsFast>
    3c38:	str	x0, [sp, #1456]
    3c3c:	ldr	x0, [sp, #1456]
    3c40:	lsl	x0, x0, #1
    3c44:	ldr	x1, [sp, #1472]
    3c48:	add	x0, x1, x0
    3c4c:	ldrb	w0, [x0]
    3c50:	strb	w0, [sp, #1455]
    3c54:	ldr	x0, [sp, #1456]
    3c58:	lsl	x0, x0, #1
    3c5c:	ldr	x1, [sp, #1472]
    3c60:	add	x0, x1, x0
    3c64:	ldrb	w0, [x0, #1]
    3c68:	mov	w1, w0
    3c6c:	ldr	x0, [sp, #1480]
    3c70:	bl	2960 <BIT_skipBits>
    3c74:	ldrb	w0, [sp, #1455]
    3c78:	strb	w0, [x19]
    3c7c:	ldr	x19, [sp, #2056]
    3c80:	add	x0, x19, #0x1
    3c84:	str	x0, [sp, #2056]
    3c88:	add	x0, sp, #0xa0
    3c8c:	str	x0, [sp, #1440]
    3c90:	ldr	x0, [sp, #2176]
    3c94:	str	x0, [sp, #1432]
    3c98:	ldr	w0, [sp, #2040]
    3c9c:	str	w0, [sp, #1428]
    3ca0:	ldr	w1, [sp, #1428]
    3ca4:	ldr	x0, [sp, #1440]
    3ca8:	bl	290c <BIT_lookBitsFast>
    3cac:	str	x0, [sp, #1416]
    3cb0:	ldr	x0, [sp, #1416]
    3cb4:	lsl	x0, x0, #1
    3cb8:	ldr	x1, [sp, #1432]
    3cbc:	add	x0, x1, x0
    3cc0:	ldrb	w0, [x0]
    3cc4:	strb	w0, [sp, #1415]
    3cc8:	ldr	x0, [sp, #1416]
    3ccc:	lsl	x0, x0, #1
    3cd0:	ldr	x1, [sp, #1432]
    3cd4:	add	x0, x1, x0
    3cd8:	ldrb	w0, [x0, #1]
    3cdc:	mov	w1, w0
    3ce0:	ldr	x0, [sp, #1440]
    3ce4:	bl	2960 <BIT_skipBits>
    3ce8:	ldrb	w0, [sp, #1415]
    3cec:	strb	w0, [x19]
    3cf0:	ldr	x19, [sp, #2048]
    3cf4:	add	x0, x19, #0x1
    3cf8:	str	x0, [sp, #2048]
    3cfc:	add	x0, sp, #0xc8
    3d00:	str	x0, [sp, #1400]
    3d04:	ldr	x0, [sp, #2176]
    3d08:	str	x0, [sp, #1392]
    3d0c:	ldr	w0, [sp, #2040]
    3d10:	str	w0, [sp, #1388]
    3d14:	ldr	w1, [sp, #1388]
    3d18:	ldr	x0, [sp, #1400]
    3d1c:	bl	290c <BIT_lookBitsFast>
    3d20:	str	x0, [sp, #1376]
    3d24:	ldr	x0, [sp, #1376]
    3d28:	lsl	x0, x0, #1
    3d2c:	ldr	x1, [sp, #1392]
    3d30:	add	x0, x1, x0
    3d34:	ldrb	w0, [x0]
    3d38:	strb	w0, [sp, #1375]
    3d3c:	ldr	x0, [sp, #1376]
    3d40:	lsl	x0, x0, #1
    3d44:	ldr	x1, [sp, #1392]
    3d48:	add	x0, x1, x0
    3d4c:	ldrb	w0, [x0, #1]
    3d50:	mov	w1, w0
    3d54:	ldr	x0, [sp, #1400]
    3d58:	bl	2960 <BIT_skipBits>
    3d5c:	ldrb	w0, [sp, #1375]
    3d60:	strb	w0, [x19]
    3d64:	add	x0, sp, #0x50
    3d68:	bl	2990 <BIT_reloadDStream>
    3d6c:	add	x0, sp, #0x78
    3d70:	bl	2990 <BIT_reloadDStream>
    3d74:	add	x0, sp, #0xa0
    3d78:	bl	2990 <BIT_reloadDStream>
    3d7c:	add	x0, sp, #0xc8
    3d80:	bl	2990 <BIT_reloadDStream>
    3d84:	ldr	w0, [sp, #2044]
    3d88:	cmp	w0, #0x0
    3d8c:	b.ne	3da4 <HUF_decompress4X1_usingDTable_internal+0xaa4>  // b.any
    3d90:	ldr	x0, [sp, #2192]
    3d94:	sub	x0, x0, #0x3
    3d98:	ldr	x1, [sp, #2048]
    3d9c:	cmp	x1, x0
    3da0:	b.cc	35b4 <HUF_decompress4X1_usingDTable_internal+0x2b4>  // b.lo, b.ul, b.last
    3da4:	ldr	x1, [sp, #2096]
    3da8:	ldr	x0, [sp, #2072]
    3dac:	cmp	x1, x0
    3db0:	b.cs	3dbc <HUF_decompress4X1_usingDTable_internal+0xabc>  // b.hs, b.nlast
    3db4:	mov	x0, #0xffffffffffffffec    	// #-20
    3db8:	b	4c98 <HUF_decompress4X1_usingDTable_internal+0x1998>
    3dbc:	ldr	x1, [sp, #2088]
    3dc0:	ldr	x0, [sp, #2064]
    3dc4:	cmp	x1, x0
    3dc8:	b.cs	3dd4 <HUF_decompress4X1_usingDTable_internal+0xad4>  // b.hs, b.nlast
    3dcc:	mov	x0, #0xffffffffffffffec    	// #-20
    3dd0:	b	4c98 <HUF_decompress4X1_usingDTable_internal+0x1998>
    3dd4:	ldr	x1, [sp, #2080]
    3dd8:	ldr	x0, [sp, #2056]
    3ddc:	cmp	x1, x0
    3de0:	b.cs	3dec <HUF_decompress4X1_usingDTable_internal+0xaec>  // b.hs, b.nlast
    3de4:	mov	x0, #0xffffffffffffffec    	// #-20
    3de8:	b	4c98 <HUF_decompress4X1_usingDTable_internal+0x1998>
    3dec:	ldr	x0, [sp, #2072]
    3df0:	str	x0, [sp, #1360]
    3df4:	ldr	x0, [sp, #2096]
    3df8:	str	x0, [sp, #1352]
    3dfc:	ldr	x0, [sp, #2176]
    3e00:	str	x0, [sp, #1344]
    3e04:	ldr	w0, [sp, #2040]
    3e08:	str	w0, [sp, #1340]
    3e0c:	ldr	x0, [sp, #1360]
    3e10:	str	x0, [sp, #1328]
    3e14:	b	4004 <HUF_decompress4X1_usingDTable_internal+0xd04>
    3e18:	bl	232c <MEM_64bits>
    3e1c:	cmp	w0, #0x0
    3e20:	b.eq	3e98 <HUF_decompress4X1_usingDTable_internal+0xb98>  // b.none
    3e24:	ldr	x19, [sp, #1360]
    3e28:	add	x0, x19, #0x1
    3e2c:	str	x0, [sp, #1360]
    3e30:	add	x0, sp, #0x50
    3e34:	str	x0, [sp, #1320]
    3e38:	ldr	x0, [sp, #1344]
    3e3c:	str	x0, [sp, #1312]
    3e40:	ldr	w0, [sp, #1340]
    3e44:	str	w0, [sp, #1308]
    3e48:	ldr	w1, [sp, #1308]
    3e4c:	ldr	x0, [sp, #1320]
    3e50:	bl	290c <BIT_lookBitsFast>
    3e54:	str	x0, [sp, #1296]
    3e58:	ldr	x0, [sp, #1296]
    3e5c:	lsl	x0, x0, #1
    3e60:	ldr	x1, [sp, #1312]
    3e64:	add	x0, x1, x0
    3e68:	ldrb	w0, [x0]
    3e6c:	strb	w0, [sp, #1295]
    3e70:	ldr	x0, [sp, #1296]
    3e74:	lsl	x0, x0, #1
    3e78:	ldr	x1, [sp, #1312]
    3e7c:	add	x0, x1, x0
    3e80:	ldrb	w0, [x0, #1]
    3e84:	mov	w1, w0
    3e88:	ldr	x0, [sp, #1320]
    3e8c:	bl	2960 <BIT_skipBits>
    3e90:	ldrb	w0, [sp, #1295]
    3e94:	strb	w0, [x19]
    3e98:	bl	232c <MEM_64bits>
    3e9c:	ldr	x19, [sp, #1360]
    3ea0:	add	x0, x19, #0x1
    3ea4:	str	x0, [sp, #1360]
    3ea8:	add	x0, sp, #0x50
    3eac:	str	x0, [sp, #1280]
    3eb0:	ldr	x0, [sp, #1344]
    3eb4:	str	x0, [sp, #1272]
    3eb8:	ldr	w0, [sp, #1340]
    3ebc:	str	w0, [sp, #1268]
    3ec0:	ldr	w1, [sp, #1268]
    3ec4:	ldr	x0, [sp, #1280]
    3ec8:	bl	290c <BIT_lookBitsFast>
    3ecc:	str	x0, [sp, #1256]
    3ed0:	ldr	x0, [sp, #1256]
    3ed4:	lsl	x0, x0, #1
    3ed8:	ldr	x1, [sp, #1272]
    3edc:	add	x0, x1, x0
    3ee0:	ldrb	w0, [x0]
    3ee4:	strb	w0, [sp, #1255]
    3ee8:	ldr	x0, [sp, #1256]
    3eec:	lsl	x0, x0, #1
    3ef0:	ldr	x1, [sp, #1272]
    3ef4:	add	x0, x1, x0
    3ef8:	ldrb	w0, [x0, #1]
    3efc:	mov	w1, w0
    3f00:	ldr	x0, [sp, #1280]
    3f04:	bl	2960 <BIT_skipBits>
    3f08:	ldrb	w0, [sp, #1255]
    3f0c:	strb	w0, [x19]
    3f10:	bl	232c <MEM_64bits>
    3f14:	cmp	w0, #0x0
    3f18:	b.eq	3f90 <HUF_decompress4X1_usingDTable_internal+0xc90>  // b.none
    3f1c:	ldr	x19, [sp, #1360]
    3f20:	add	x0, x19, #0x1
    3f24:	str	x0, [sp, #1360]
    3f28:	add	x0, sp, #0x50
    3f2c:	str	x0, [sp, #1240]
    3f30:	ldr	x0, [sp, #1344]
    3f34:	str	x0, [sp, #1232]
    3f38:	ldr	w0, [sp, #1340]
    3f3c:	str	w0, [sp, #1228]
    3f40:	ldr	w1, [sp, #1228]
    3f44:	ldr	x0, [sp, #1240]
    3f48:	bl	290c <BIT_lookBitsFast>
    3f4c:	str	x0, [sp, #1216]
    3f50:	ldr	x0, [sp, #1216]
    3f54:	lsl	x0, x0, #1
    3f58:	ldr	x1, [sp, #1232]
    3f5c:	add	x0, x1, x0
    3f60:	ldrb	w0, [x0]
    3f64:	strb	w0, [sp, #1215]
    3f68:	ldr	x0, [sp, #1216]
    3f6c:	lsl	x0, x0, #1
    3f70:	ldr	x1, [sp, #1232]
    3f74:	add	x0, x1, x0
    3f78:	ldrb	w0, [x0, #1]
    3f7c:	mov	w1, w0
    3f80:	ldr	x0, [sp, #1240]
    3f84:	bl	2960 <BIT_skipBits>
    3f88:	ldrb	w0, [sp, #1215]
    3f8c:	strb	w0, [x19]
    3f90:	ldr	x19, [sp, #1360]
    3f94:	add	x0, x19, #0x1
    3f98:	str	x0, [sp, #1360]
    3f9c:	add	x0, sp, #0x50
    3fa0:	str	x0, [sp, #1200]
    3fa4:	ldr	x0, [sp, #1344]
    3fa8:	str	x0, [sp, #1192]
    3fac:	ldr	w0, [sp, #1340]
    3fb0:	str	w0, [sp, #1188]
    3fb4:	ldr	w1, [sp, #1188]
    3fb8:	ldr	x0, [sp, #1200]
    3fbc:	bl	290c <BIT_lookBitsFast>
    3fc0:	str	x0, [sp, #1176]
    3fc4:	ldr	x0, [sp, #1176]
    3fc8:	lsl	x0, x0, #1
    3fcc:	ldr	x1, [sp, #1192]
    3fd0:	add	x0, x1, x0
    3fd4:	ldrb	w0, [x0]
    3fd8:	strb	w0, [sp, #1175]
    3fdc:	ldr	x0, [sp, #1176]
    3fe0:	lsl	x0, x0, #1
    3fe4:	ldr	x1, [sp, #1192]
    3fe8:	add	x0, x1, x0
    3fec:	ldrb	w0, [x0, #1]
    3ff0:	mov	w1, w0
    3ff4:	ldr	x0, [sp, #1200]
    3ff8:	bl	2960 <BIT_skipBits>
    3ffc:	ldrb	w0, [sp, #1175]
    4000:	strb	w0, [x19]
    4004:	add	x0, sp, #0x50
    4008:	bl	2990 <BIT_reloadDStream>
    400c:	cmp	w0, #0x0
    4010:	cset	w0, eq  // eq = none
    4014:	and	w1, w0, #0xff
    4018:	ldr	x0, [sp, #1352]
    401c:	sub	x0, x0, #0x3
    4020:	ldr	x2, [sp, #1360]
    4024:	cmp	x2, x0
    4028:	cset	w0, cc  // cc = lo, ul, last
    402c:	and	w0, w0, #0xff
    4030:	and	w0, w1, w0
    4034:	and	w0, w0, #0xff
    4038:	cmp	w0, #0x0
    403c:	b.ne	3e18 <HUF_decompress4X1_usingDTable_internal+0xb18>  // b.any
    4040:	bl	2324 <MEM_32bits>
    4044:	cmp	w0, #0x0
    4048:	b.eq	4174 <HUF_decompress4X1_usingDTable_internal+0xe74>  // b.none
    404c:	b	40c4 <HUF_decompress4X1_usingDTable_internal+0xdc4>
    4050:	ldr	x19, [sp, #1360]
    4054:	add	x0, x19, #0x1
    4058:	str	x0, [sp, #1360]
    405c:	add	x0, sp, #0x50
    4060:	str	x0, [sp, #1160]
    4064:	ldr	x0, [sp, #1344]
    4068:	str	x0, [sp, #1152]
    406c:	ldr	w0, [sp, #1340]
    4070:	str	w0, [sp, #1148]
    4074:	ldr	w1, [sp, #1148]
    4078:	ldr	x0, [sp, #1160]
    407c:	bl	290c <BIT_lookBitsFast>
    4080:	str	x0, [sp, #1136]
    4084:	ldr	x0, [sp, #1136]
    4088:	lsl	x0, x0, #1
    408c:	ldr	x1, [sp, #1152]
    4090:	add	x0, x1, x0
    4094:	ldrb	w0, [x0]
    4098:	strb	w0, [sp, #1135]
    409c:	ldr	x0, [sp, #1136]
    40a0:	lsl	x0, x0, #1
    40a4:	ldr	x1, [sp, #1152]
    40a8:	add	x0, x1, x0
    40ac:	ldrb	w0, [x0, #1]
    40b0:	mov	w1, w0
    40b4:	ldr	x0, [sp, #1160]
    40b8:	bl	2960 <BIT_skipBits>
    40bc:	ldrb	w0, [sp, #1135]
    40c0:	strb	w0, [x19]
    40c4:	add	x0, sp, #0x50
    40c8:	bl	2990 <BIT_reloadDStream>
    40cc:	cmp	w0, #0x0
    40d0:	cset	w0, eq  // eq = none
    40d4:	and	w1, w0, #0xff
    40d8:	ldr	x2, [sp, #1352]
    40dc:	ldr	x0, [sp, #1360]
    40e0:	cmp	x2, x0
    40e4:	cset	w0, hi  // hi = pmore
    40e8:	and	w0, w0, #0xff
    40ec:	and	w0, w1, w0
    40f0:	and	w0, w0, #0xff
    40f4:	cmp	w0, #0x0
    40f8:	b.ne	4050 <HUF_decompress4X1_usingDTable_internal+0xd50>  // b.any
    40fc:	b	4174 <HUF_decompress4X1_usingDTable_internal+0xe74>
    4100:	ldr	x19, [sp, #1360]
    4104:	add	x0, x19, #0x1
    4108:	str	x0, [sp, #1360]
    410c:	add	x0, sp, #0x50
    4110:	str	x0, [sp, #1120]
    4114:	ldr	x0, [sp, #1344]
    4118:	str	x0, [sp, #1112]
    411c:	ldr	w0, [sp, #1340]
    4120:	str	w0, [sp, #1108]
    4124:	ldr	w1, [sp, #1108]
    4128:	ldr	x0, [sp, #1120]
    412c:	bl	290c <BIT_lookBitsFast>
    4130:	str	x0, [sp, #1096]
    4134:	ldr	x0, [sp, #1096]
    4138:	lsl	x0, x0, #1
    413c:	ldr	x1, [sp, #1112]
    4140:	add	x0, x1, x0
    4144:	ldrb	w0, [x0]
    4148:	strb	w0, [sp, #1095]
    414c:	ldr	x0, [sp, #1096]
    4150:	lsl	x0, x0, #1
    4154:	ldr	x1, [sp, #1112]
    4158:	add	x0, x1, x0
    415c:	ldrb	w0, [x0, #1]
    4160:	mov	w1, w0
    4164:	ldr	x0, [sp, #1120]
    4168:	bl	2960 <BIT_skipBits>
    416c:	ldrb	w0, [sp, #1095]
    4170:	strb	w0, [x19]
    4174:	ldr	x1, [sp, #1352]
    4178:	ldr	x0, [sp, #1360]
    417c:	cmp	x1, x0
    4180:	b.hi	4100 <HUF_decompress4X1_usingDTable_internal+0xe00>  // b.pmore
    4184:	ldr	x0, [sp, #2064]
    4188:	str	x0, [sp, #1080]
    418c:	ldr	x0, [sp, #2088]
    4190:	str	x0, [sp, #1072]
    4194:	ldr	x0, [sp, #2176]
    4198:	str	x0, [sp, #1064]
    419c:	ldr	w0, [sp, #2040]
    41a0:	str	w0, [sp, #1060]
    41a4:	ldr	x0, [sp, #1080]
    41a8:	str	x0, [sp, #1048]
    41ac:	b	439c <HUF_decompress4X1_usingDTable_internal+0x109c>
    41b0:	bl	232c <MEM_64bits>
    41b4:	cmp	w0, #0x0
    41b8:	b.eq	4230 <HUF_decompress4X1_usingDTable_internal+0xf30>  // b.none
    41bc:	ldr	x19, [sp, #1080]
    41c0:	add	x0, x19, #0x1
    41c4:	str	x0, [sp, #1080]
    41c8:	add	x0, sp, #0x78
    41cc:	str	x0, [sp, #1040]
    41d0:	ldr	x0, [sp, #1064]
    41d4:	str	x0, [sp, #1032]
    41d8:	ldr	w0, [sp, #1060]
    41dc:	str	w0, [sp, #1028]
    41e0:	ldr	w1, [sp, #1028]
    41e4:	ldr	x0, [sp, #1040]
    41e8:	bl	290c <BIT_lookBitsFast>
    41ec:	str	x0, [sp, #1016]
    41f0:	ldr	x0, [sp, #1016]
    41f4:	lsl	x0, x0, #1
    41f8:	ldr	x1, [sp, #1032]
    41fc:	add	x0, x1, x0
    4200:	ldrb	w0, [x0]
    4204:	strb	w0, [sp, #1015]
    4208:	ldr	x0, [sp, #1016]
    420c:	lsl	x0, x0, #1
    4210:	ldr	x1, [sp, #1032]
    4214:	add	x0, x1, x0
    4218:	ldrb	w0, [x0, #1]
    421c:	mov	w1, w0
    4220:	ldr	x0, [sp, #1040]
    4224:	bl	2960 <BIT_skipBits>
    4228:	ldrb	w0, [sp, #1015]
    422c:	strb	w0, [x19]
    4230:	bl	232c <MEM_64bits>
    4234:	ldr	x19, [sp, #1080]
    4238:	add	x0, x19, #0x1
    423c:	str	x0, [sp, #1080]
    4240:	add	x0, sp, #0x78
    4244:	str	x0, [sp, #1000]
    4248:	ldr	x0, [sp, #1064]
    424c:	str	x0, [sp, #992]
    4250:	ldr	w0, [sp, #1060]
    4254:	str	w0, [sp, #988]
    4258:	ldr	w1, [sp, #988]
    425c:	ldr	x0, [sp, #1000]
    4260:	bl	290c <BIT_lookBitsFast>
    4264:	str	x0, [sp, #976]
    4268:	ldr	x0, [sp, #976]
    426c:	lsl	x0, x0, #1
    4270:	ldr	x1, [sp, #992]
    4274:	add	x0, x1, x0
    4278:	ldrb	w0, [x0]
    427c:	strb	w0, [sp, #975]
    4280:	ldr	x0, [sp, #976]
    4284:	lsl	x0, x0, #1
    4288:	ldr	x1, [sp, #992]
    428c:	add	x0, x1, x0
    4290:	ldrb	w0, [x0, #1]
    4294:	mov	w1, w0
    4298:	ldr	x0, [sp, #1000]
    429c:	bl	2960 <BIT_skipBits>
    42a0:	ldrb	w0, [sp, #975]
    42a4:	strb	w0, [x19]
    42a8:	bl	232c <MEM_64bits>
    42ac:	cmp	w0, #0x0
    42b0:	b.eq	4328 <HUF_decompress4X1_usingDTable_internal+0x1028>  // b.none
    42b4:	ldr	x19, [sp, #1080]
    42b8:	add	x0, x19, #0x1
    42bc:	str	x0, [sp, #1080]
    42c0:	add	x0, sp, #0x78
    42c4:	str	x0, [sp, #960]
    42c8:	ldr	x0, [sp, #1064]
    42cc:	str	x0, [sp, #952]
    42d0:	ldr	w0, [sp, #1060]
    42d4:	str	w0, [sp, #948]
    42d8:	ldr	w1, [sp, #948]
    42dc:	ldr	x0, [sp, #960]
    42e0:	bl	290c <BIT_lookBitsFast>
    42e4:	str	x0, [sp, #936]
    42e8:	ldr	x0, [sp, #936]
    42ec:	lsl	x0, x0, #1
    42f0:	ldr	x1, [sp, #952]
    42f4:	add	x0, x1, x0
    42f8:	ldrb	w0, [x0]
    42fc:	strb	w0, [sp, #935]
    4300:	ldr	x0, [sp, #936]
    4304:	lsl	x0, x0, #1
    4308:	ldr	x1, [sp, #952]
    430c:	add	x0, x1, x0
    4310:	ldrb	w0, [x0, #1]
    4314:	mov	w1, w0
    4318:	ldr	x0, [sp, #960]
    431c:	bl	2960 <BIT_skipBits>
    4320:	ldrb	w0, [sp, #935]
    4324:	strb	w0, [x19]
    4328:	ldr	x19, [sp, #1080]
    432c:	add	x0, x19, #0x1
    4330:	str	x0, [sp, #1080]
    4334:	add	x0, sp, #0x78
    4338:	str	x0, [sp, #920]
    433c:	ldr	x0, [sp, #1064]
    4340:	str	x0, [sp, #912]
    4344:	ldr	w0, [sp, #1060]
    4348:	str	w0, [sp, #908]
    434c:	ldr	w1, [sp, #908]
    4350:	ldr	x0, [sp, #920]
    4354:	bl	290c <BIT_lookBitsFast>
    4358:	str	x0, [sp, #896]
    435c:	ldr	x0, [sp, #896]
    4360:	lsl	x0, x0, #1
    4364:	ldr	x1, [sp, #912]
    4368:	add	x0, x1, x0
    436c:	ldrb	w0, [x0]
    4370:	strb	w0, [sp, #895]
    4374:	ldr	x0, [sp, #896]
    4378:	lsl	x0, x0, #1
    437c:	ldr	x1, [sp, #912]
    4380:	add	x0, x1, x0
    4384:	ldrb	w0, [x0, #1]
    4388:	mov	w1, w0
    438c:	ldr	x0, [sp, #920]
    4390:	bl	2960 <BIT_skipBits>
    4394:	ldrb	w0, [sp, #895]
    4398:	strb	w0, [x19]
    439c:	add	x0, sp, #0x78
    43a0:	bl	2990 <BIT_reloadDStream>
    43a4:	cmp	w0, #0x0
    43a8:	cset	w0, eq  // eq = none
    43ac:	and	w1, w0, #0xff
    43b0:	ldr	x0, [sp, #1072]
    43b4:	sub	x0, x0, #0x3
    43b8:	ldr	x2, [sp, #1080]
    43bc:	cmp	x2, x0
    43c0:	cset	w0, cc  // cc = lo, ul, last
    43c4:	and	w0, w0, #0xff
    43c8:	and	w0, w1, w0
    43cc:	and	w0, w0, #0xff
    43d0:	cmp	w0, #0x0
    43d4:	b.ne	41b0 <HUF_decompress4X1_usingDTable_internal+0xeb0>  // b.any
    43d8:	bl	2324 <MEM_32bits>
    43dc:	cmp	w0, #0x0
    43e0:	b.eq	450c <HUF_decompress4X1_usingDTable_internal+0x120c>  // b.none
    43e4:	b	445c <HUF_decompress4X1_usingDTable_internal+0x115c>
    43e8:	ldr	x19, [sp, #1080]
    43ec:	add	x0, x19, #0x1
    43f0:	str	x0, [sp, #1080]
    43f4:	add	x0, sp, #0x78
    43f8:	str	x0, [sp, #880]
    43fc:	ldr	x0, [sp, #1064]
    4400:	str	x0, [sp, #872]
    4404:	ldr	w0, [sp, #1060]
    4408:	str	w0, [sp, #868]
    440c:	ldr	w1, [sp, #868]
    4410:	ldr	x0, [sp, #880]
    4414:	bl	290c <BIT_lookBitsFast>
    4418:	str	x0, [sp, #856]
    441c:	ldr	x0, [sp, #856]
    4420:	lsl	x0, x0, #1
    4424:	ldr	x1, [sp, #872]
    4428:	add	x0, x1, x0
    442c:	ldrb	w0, [x0]
    4430:	strb	w0, [sp, #855]
    4434:	ldr	x0, [sp, #856]
    4438:	lsl	x0, x0, #1
    443c:	ldr	x1, [sp, #872]
    4440:	add	x0, x1, x0
    4444:	ldrb	w0, [x0, #1]
    4448:	mov	w1, w0
    444c:	ldr	x0, [sp, #880]
    4450:	bl	2960 <BIT_skipBits>
    4454:	ldrb	w0, [sp, #855]
    4458:	strb	w0, [x19]
    445c:	add	x0, sp, #0x78
    4460:	bl	2990 <BIT_reloadDStream>
    4464:	cmp	w0, #0x0
    4468:	cset	w0, eq  // eq = none
    446c:	and	w1, w0, #0xff
    4470:	ldr	x2, [sp, #1072]
    4474:	ldr	x0, [sp, #1080]
    4478:	cmp	x2, x0
    447c:	cset	w0, hi  // hi = pmore
    4480:	and	w0, w0, #0xff
    4484:	and	w0, w1, w0
    4488:	and	w0, w0, #0xff
    448c:	cmp	w0, #0x0
    4490:	b.ne	43e8 <HUF_decompress4X1_usingDTable_internal+0x10e8>  // b.any
    4494:	b	450c <HUF_decompress4X1_usingDTable_internal+0x120c>
    4498:	ldr	x19, [sp, #1080]
    449c:	add	x0, x19, #0x1
    44a0:	str	x0, [sp, #1080]
    44a4:	add	x0, sp, #0x78
    44a8:	str	x0, [sp, #840]
    44ac:	ldr	x0, [sp, #1064]
    44b0:	str	x0, [sp, #832]
    44b4:	ldr	w0, [sp, #1060]
    44b8:	str	w0, [sp, #828]
    44bc:	ldr	w1, [sp, #828]
    44c0:	ldr	x0, [sp, #840]
    44c4:	bl	290c <BIT_lookBitsFast>
    44c8:	str	x0, [sp, #816]
    44cc:	ldr	x0, [sp, #816]
    44d0:	lsl	x0, x0, #1
    44d4:	ldr	x1, [sp, #832]
    44d8:	add	x0, x1, x0
    44dc:	ldrb	w0, [x0]
    44e0:	strb	w0, [sp, #815]
    44e4:	ldr	x0, [sp, #816]
    44e8:	lsl	x0, x0, #1
    44ec:	ldr	x1, [sp, #832]
    44f0:	add	x0, x1, x0
    44f4:	ldrb	w0, [x0, #1]
    44f8:	mov	w1, w0
    44fc:	ldr	x0, [sp, #840]
    4500:	bl	2960 <BIT_skipBits>
    4504:	ldrb	w0, [sp, #815]
    4508:	strb	w0, [x19]
    450c:	ldr	x1, [sp, #1072]
    4510:	ldr	x0, [sp, #1080]
    4514:	cmp	x1, x0
    4518:	b.hi	4498 <HUF_decompress4X1_usingDTable_internal+0x1198>  // b.pmore
    451c:	ldr	x0, [sp, #2056]
    4520:	str	x0, [sp, #800]
    4524:	ldr	x0, [sp, #2080]
    4528:	str	x0, [sp, #792]
    452c:	ldr	x0, [sp, #2176]
    4530:	str	x0, [sp, #784]
    4534:	ldr	w0, [sp, #2040]
    4538:	str	w0, [sp, #780]
    453c:	ldr	x0, [sp, #800]
    4540:	str	x0, [sp, #768]
    4544:	b	4734 <HUF_decompress4X1_usingDTable_internal+0x1434>
    4548:	bl	232c <MEM_64bits>
    454c:	cmp	w0, #0x0
    4550:	b.eq	45c8 <HUF_decompress4X1_usingDTable_internal+0x12c8>  // b.none
    4554:	ldr	x19, [sp, #800]
    4558:	add	x0, x19, #0x1
    455c:	str	x0, [sp, #800]
    4560:	add	x0, sp, #0xa0
    4564:	str	x0, [sp, #760]
    4568:	ldr	x0, [sp, #784]
    456c:	str	x0, [sp, #752]
    4570:	ldr	w0, [sp, #780]
    4574:	str	w0, [sp, #748]
    4578:	ldr	w1, [sp, #748]
    457c:	ldr	x0, [sp, #760]
    4580:	bl	290c <BIT_lookBitsFast>
    4584:	str	x0, [sp, #736]
    4588:	ldr	x0, [sp, #736]
    458c:	lsl	x0, x0, #1
    4590:	ldr	x1, [sp, #752]
    4594:	add	x0, x1, x0
    4598:	ldrb	w0, [x0]
    459c:	strb	w0, [sp, #735]
    45a0:	ldr	x0, [sp, #736]
    45a4:	lsl	x0, x0, #1
    45a8:	ldr	x1, [sp, #752]
    45ac:	add	x0, x1, x0
    45b0:	ldrb	w0, [x0, #1]
    45b4:	mov	w1, w0
    45b8:	ldr	x0, [sp, #760]
    45bc:	bl	2960 <BIT_skipBits>
    45c0:	ldrb	w0, [sp, #735]
    45c4:	strb	w0, [x19]
    45c8:	bl	232c <MEM_64bits>
    45cc:	ldr	x19, [sp, #800]
    45d0:	add	x0, x19, #0x1
    45d4:	str	x0, [sp, #800]
    45d8:	add	x0, sp, #0xa0
    45dc:	str	x0, [sp, #720]
    45e0:	ldr	x0, [sp, #784]
    45e4:	str	x0, [sp, #712]
    45e8:	ldr	w0, [sp, #780]
    45ec:	str	w0, [sp, #708]
    45f0:	ldr	w1, [sp, #708]
    45f4:	ldr	x0, [sp, #720]
    45f8:	bl	290c <BIT_lookBitsFast>
    45fc:	str	x0, [sp, #696]
    4600:	ldr	x0, [sp, #696]
    4604:	lsl	x0, x0, #1
    4608:	ldr	x1, [sp, #712]
    460c:	add	x0, x1, x0
    4610:	ldrb	w0, [x0]
    4614:	strb	w0, [sp, #695]
    4618:	ldr	x0, [sp, #696]
    461c:	lsl	x0, x0, #1
    4620:	ldr	x1, [sp, #712]
    4624:	add	x0, x1, x0
    4628:	ldrb	w0, [x0, #1]
    462c:	mov	w1, w0
    4630:	ldr	x0, [sp, #720]
    4634:	bl	2960 <BIT_skipBits>
    4638:	ldrb	w0, [sp, #695]
    463c:	strb	w0, [x19]
    4640:	bl	232c <MEM_64bits>
    4644:	cmp	w0, #0x0
    4648:	b.eq	46c0 <HUF_decompress4X1_usingDTable_internal+0x13c0>  // b.none
    464c:	ldr	x19, [sp, #800]
    4650:	add	x0, x19, #0x1
    4654:	str	x0, [sp, #800]
    4658:	add	x0, sp, #0xa0
    465c:	str	x0, [sp, #680]
    4660:	ldr	x0, [sp, #784]
    4664:	str	x0, [sp, #672]
    4668:	ldr	w0, [sp, #780]
    466c:	str	w0, [sp, #668]
    4670:	ldr	w1, [sp, #668]
    4674:	ldr	x0, [sp, #680]
    4678:	bl	290c <BIT_lookBitsFast>
    467c:	str	x0, [sp, #656]
    4680:	ldr	x0, [sp, #656]
    4684:	lsl	x0, x0, #1
    4688:	ldr	x1, [sp, #672]
    468c:	add	x0, x1, x0
    4690:	ldrb	w0, [x0]
    4694:	strb	w0, [sp, #655]
    4698:	ldr	x0, [sp, #656]
    469c:	lsl	x0, x0, #1
    46a0:	ldr	x1, [sp, #672]
    46a4:	add	x0, x1, x0
    46a8:	ldrb	w0, [x0, #1]
    46ac:	mov	w1, w0
    46b0:	ldr	x0, [sp, #680]
    46b4:	bl	2960 <BIT_skipBits>
    46b8:	ldrb	w0, [sp, #655]
    46bc:	strb	w0, [x19]
    46c0:	ldr	x19, [sp, #800]
    46c4:	add	x0, x19, #0x1
    46c8:	str	x0, [sp, #800]
    46cc:	add	x0, sp, #0xa0
    46d0:	str	x0, [sp, #640]
    46d4:	ldr	x0, [sp, #784]
    46d8:	str	x0, [sp, #632]
    46dc:	ldr	w0, [sp, #780]
    46e0:	str	w0, [sp, #628]
    46e4:	ldr	w1, [sp, #628]
    46e8:	ldr	x0, [sp, #640]
    46ec:	bl	290c <BIT_lookBitsFast>
    46f0:	str	x0, [sp, #616]
    46f4:	ldr	x0, [sp, #616]
    46f8:	lsl	x0, x0, #1
    46fc:	ldr	x1, [sp, #632]
    4700:	add	x0, x1, x0
    4704:	ldrb	w0, [x0]
    4708:	strb	w0, [sp, #615]
    470c:	ldr	x0, [sp, #616]
    4710:	lsl	x0, x0, #1
    4714:	ldr	x1, [sp, #632]
    4718:	add	x0, x1, x0
    471c:	ldrb	w0, [x0, #1]
    4720:	mov	w1, w0
    4724:	ldr	x0, [sp, #640]
    4728:	bl	2960 <BIT_skipBits>
    472c:	ldrb	w0, [sp, #615]
    4730:	strb	w0, [x19]
    4734:	add	x0, sp, #0xa0
    4738:	bl	2990 <BIT_reloadDStream>
    473c:	cmp	w0, #0x0
    4740:	cset	w0, eq  // eq = none
    4744:	and	w1, w0, #0xff
    4748:	ldr	x0, [sp, #792]
    474c:	sub	x0, x0, #0x3
    4750:	ldr	x2, [sp, #800]
    4754:	cmp	x2, x0
    4758:	cset	w0, cc  // cc = lo, ul, last
    475c:	and	w0, w0, #0xff
    4760:	and	w0, w1, w0
    4764:	and	w0, w0, #0xff
    4768:	cmp	w0, #0x0
    476c:	b.ne	4548 <HUF_decompress4X1_usingDTable_internal+0x1248>  // b.any
    4770:	bl	2324 <MEM_32bits>
    4774:	cmp	w0, #0x0
    4778:	b.eq	48a4 <HUF_decompress4X1_usingDTable_internal+0x15a4>  // b.none
    477c:	b	47f4 <HUF_decompress4X1_usingDTable_internal+0x14f4>
    4780:	ldr	x19, [sp, #800]
    4784:	add	x0, x19, #0x1
    4788:	str	x0, [sp, #800]
    478c:	add	x0, sp, #0xa0
    4790:	str	x0, [sp, #600]
    4794:	ldr	x0, [sp, #784]
    4798:	str	x0, [sp, #592]
    479c:	ldr	w0, [sp, #780]
    47a0:	str	w0, [sp, #588]
    47a4:	ldr	w1, [sp, #588]
    47a8:	ldr	x0, [sp, #600]
    47ac:	bl	290c <BIT_lookBitsFast>
    47b0:	str	x0, [sp, #576]
    47b4:	ldr	x0, [sp, #576]
    47b8:	lsl	x0, x0, #1
    47bc:	ldr	x1, [sp, #592]
    47c0:	add	x0, x1, x0
    47c4:	ldrb	w0, [x0]
    47c8:	strb	w0, [sp, #575]
    47cc:	ldr	x0, [sp, #576]
    47d0:	lsl	x0, x0, #1
    47d4:	ldr	x1, [sp, #592]
    47d8:	add	x0, x1, x0
    47dc:	ldrb	w0, [x0, #1]
    47e0:	mov	w1, w0
    47e4:	ldr	x0, [sp, #600]
    47e8:	bl	2960 <BIT_skipBits>
    47ec:	ldrb	w0, [sp, #575]
    47f0:	strb	w0, [x19]
    47f4:	add	x0, sp, #0xa0
    47f8:	bl	2990 <BIT_reloadDStream>
    47fc:	cmp	w0, #0x0
    4800:	cset	w0, eq  // eq = none
    4804:	and	w1, w0, #0xff
    4808:	ldr	x2, [sp, #792]
    480c:	ldr	x0, [sp, #800]
    4810:	cmp	x2, x0
    4814:	cset	w0, hi  // hi = pmore
    4818:	and	w0, w0, #0xff
    481c:	and	w0, w1, w0
    4820:	and	w0, w0, #0xff
    4824:	cmp	w0, #0x0
    4828:	b.ne	4780 <HUF_decompress4X1_usingDTable_internal+0x1480>  // b.any
    482c:	b	48a4 <HUF_decompress4X1_usingDTable_internal+0x15a4>
    4830:	ldr	x19, [sp, #800]
    4834:	add	x0, x19, #0x1
    4838:	str	x0, [sp, #800]
    483c:	add	x0, sp, #0xa0
    4840:	str	x0, [sp, #560]
    4844:	ldr	x0, [sp, #784]
    4848:	str	x0, [sp, #552]
    484c:	ldr	w0, [sp, #780]
    4850:	str	w0, [sp, #548]
    4854:	ldr	w1, [sp, #548]
    4858:	ldr	x0, [sp, #560]
    485c:	bl	290c <BIT_lookBitsFast>
    4860:	str	x0, [sp, #536]
    4864:	ldr	x0, [sp, #536]
    4868:	lsl	x0, x0, #1
    486c:	ldr	x1, [sp, #552]
    4870:	add	x0, x1, x0
    4874:	ldrb	w0, [x0]
    4878:	strb	w0, [sp, #535]
    487c:	ldr	x0, [sp, #536]
    4880:	lsl	x0, x0, #1
    4884:	ldr	x1, [sp, #552]
    4888:	add	x0, x1, x0
    488c:	ldrb	w0, [x0, #1]
    4890:	mov	w1, w0
    4894:	ldr	x0, [sp, #560]
    4898:	bl	2960 <BIT_skipBits>
    489c:	ldrb	w0, [sp, #535]
    48a0:	strb	w0, [x19]
    48a4:	ldr	x1, [sp, #792]
    48a8:	ldr	x0, [sp, #800]
    48ac:	cmp	x1, x0
    48b0:	b.hi	4830 <HUF_decompress4X1_usingDTable_internal+0x1530>  // b.pmore
    48b4:	ldr	x0, [sp, #2048]
    48b8:	str	x0, [sp, #520]
    48bc:	ldr	x0, [sp, #2192]
    48c0:	str	x0, [sp, #512]
    48c4:	ldr	x0, [sp, #2176]
    48c8:	str	x0, [sp, #504]
    48cc:	ldr	w0, [sp, #2040]
    48d0:	str	w0, [sp, #500]
    48d4:	ldr	x0, [sp, #520]
    48d8:	str	x0, [sp, #488]
    48dc:	b	4acc <HUF_decompress4X1_usingDTable_internal+0x17cc>
    48e0:	bl	232c <MEM_64bits>
    48e4:	cmp	w0, #0x0
    48e8:	b.eq	4960 <HUF_decompress4X1_usingDTable_internal+0x1660>  // b.none
    48ec:	ldr	x19, [sp, #520]
    48f0:	add	x0, x19, #0x1
    48f4:	str	x0, [sp, #520]
    48f8:	add	x0, sp, #0xc8
    48fc:	str	x0, [sp, #480]
    4900:	ldr	x0, [sp, #504]
    4904:	str	x0, [sp, #472]
    4908:	ldr	w0, [sp, #500]
    490c:	str	w0, [sp, #468]
    4910:	ldr	w1, [sp, #468]
    4914:	ldr	x0, [sp, #480]
    4918:	bl	290c <BIT_lookBitsFast>
    491c:	str	x0, [sp, #456]
    4920:	ldr	x0, [sp, #456]
    4924:	lsl	x0, x0, #1
    4928:	ldr	x1, [sp, #472]
    492c:	add	x0, x1, x0
    4930:	ldrb	w0, [x0]
    4934:	strb	w0, [sp, #455]
    4938:	ldr	x0, [sp, #456]
    493c:	lsl	x0, x0, #1
    4940:	ldr	x1, [sp, #472]
    4944:	add	x0, x1, x0
    4948:	ldrb	w0, [x0, #1]
    494c:	mov	w1, w0
    4950:	ldr	x0, [sp, #480]
    4954:	bl	2960 <BIT_skipBits>
    4958:	ldrb	w0, [sp, #455]
    495c:	strb	w0, [x19]
    4960:	bl	232c <MEM_64bits>
    4964:	ldr	x19, [sp, #520]
    4968:	add	x0, x19, #0x1
    496c:	str	x0, [sp, #520]
    4970:	add	x0, sp, #0xc8
    4974:	str	x0, [sp, #440]
    4978:	ldr	x0, [sp, #504]
    497c:	str	x0, [sp, #432]
    4980:	ldr	w0, [sp, #500]
    4984:	str	w0, [sp, #428]
    4988:	ldr	w1, [sp, #428]
    498c:	ldr	x0, [sp, #440]
    4990:	bl	290c <BIT_lookBitsFast>
    4994:	str	x0, [sp, #416]
    4998:	ldr	x0, [sp, #416]
    499c:	lsl	x0, x0, #1
    49a0:	ldr	x1, [sp, #432]
    49a4:	add	x0, x1, x0
    49a8:	ldrb	w0, [x0]
    49ac:	strb	w0, [sp, #415]
    49b0:	ldr	x0, [sp, #416]
    49b4:	lsl	x0, x0, #1
    49b8:	ldr	x1, [sp, #432]
    49bc:	add	x0, x1, x0
    49c0:	ldrb	w0, [x0, #1]
    49c4:	mov	w1, w0
    49c8:	ldr	x0, [sp, #440]
    49cc:	bl	2960 <BIT_skipBits>
    49d0:	ldrb	w0, [sp, #415]
    49d4:	strb	w0, [x19]
    49d8:	bl	232c <MEM_64bits>
    49dc:	cmp	w0, #0x0
    49e0:	b.eq	4a58 <HUF_decompress4X1_usingDTable_internal+0x1758>  // b.none
    49e4:	ldr	x19, [sp, #520]
    49e8:	add	x0, x19, #0x1
    49ec:	str	x0, [sp, #520]
    49f0:	add	x0, sp, #0xc8
    49f4:	str	x0, [sp, #400]
    49f8:	ldr	x0, [sp, #504]
    49fc:	str	x0, [sp, #392]
    4a00:	ldr	w0, [sp, #500]
    4a04:	str	w0, [sp, #388]
    4a08:	ldr	w1, [sp, #388]
    4a0c:	ldr	x0, [sp, #400]
    4a10:	bl	290c <BIT_lookBitsFast>
    4a14:	str	x0, [sp, #376]
    4a18:	ldr	x0, [sp, #376]
    4a1c:	lsl	x0, x0, #1
    4a20:	ldr	x1, [sp, #392]
    4a24:	add	x0, x1, x0
    4a28:	ldrb	w0, [x0]
    4a2c:	strb	w0, [sp, #375]
    4a30:	ldr	x0, [sp, #376]
    4a34:	lsl	x0, x0, #1
    4a38:	ldr	x1, [sp, #392]
    4a3c:	add	x0, x1, x0
    4a40:	ldrb	w0, [x0, #1]
    4a44:	mov	w1, w0
    4a48:	ldr	x0, [sp, #400]
    4a4c:	bl	2960 <BIT_skipBits>
    4a50:	ldrb	w0, [sp, #375]
    4a54:	strb	w0, [x19]
    4a58:	ldr	x19, [sp, #520]
    4a5c:	add	x0, x19, #0x1
    4a60:	str	x0, [sp, #520]
    4a64:	add	x0, sp, #0xc8
    4a68:	str	x0, [sp, #360]
    4a6c:	ldr	x0, [sp, #504]
    4a70:	str	x0, [sp, #352]
    4a74:	ldr	w0, [sp, #500]
    4a78:	str	w0, [sp, #348]
    4a7c:	ldr	w1, [sp, #348]
    4a80:	ldr	x0, [sp, #360]
    4a84:	bl	290c <BIT_lookBitsFast>
    4a88:	str	x0, [sp, #336]
    4a8c:	ldr	x0, [sp, #336]
    4a90:	lsl	x0, x0, #1
    4a94:	ldr	x1, [sp, #352]
    4a98:	add	x0, x1, x0
    4a9c:	ldrb	w0, [x0]
    4aa0:	strb	w0, [sp, #335]
    4aa4:	ldr	x0, [sp, #336]
    4aa8:	lsl	x0, x0, #1
    4aac:	ldr	x1, [sp, #352]
    4ab0:	add	x0, x1, x0
    4ab4:	ldrb	w0, [x0, #1]
    4ab8:	mov	w1, w0
    4abc:	ldr	x0, [sp, #360]
    4ac0:	bl	2960 <BIT_skipBits>
    4ac4:	ldrb	w0, [sp, #335]
    4ac8:	strb	w0, [x19]
    4acc:	add	x0, sp, #0xc8
    4ad0:	bl	2990 <BIT_reloadDStream>
    4ad4:	cmp	w0, #0x0
    4ad8:	cset	w0, eq  // eq = none
    4adc:	and	w1, w0, #0xff
    4ae0:	ldr	x0, [sp, #512]
    4ae4:	sub	x0, x0, #0x3
    4ae8:	ldr	x2, [sp, #520]
    4aec:	cmp	x2, x0
    4af0:	cset	w0, cc  // cc = lo, ul, last
    4af4:	and	w0, w0, #0xff
    4af8:	and	w0, w1, w0
    4afc:	and	w0, w0, #0xff
    4b00:	cmp	w0, #0x0
    4b04:	b.ne	48e0 <HUF_decompress4X1_usingDTable_internal+0x15e0>  // b.any
    4b08:	bl	2324 <MEM_32bits>
    4b0c:	cmp	w0, #0x0
    4b10:	b.eq	4c3c <HUF_decompress4X1_usingDTable_internal+0x193c>  // b.none
    4b14:	b	4b8c <HUF_decompress4X1_usingDTable_internal+0x188c>
    4b18:	ldr	x19, [sp, #520]
    4b1c:	add	x0, x19, #0x1
    4b20:	str	x0, [sp, #520]
    4b24:	add	x0, sp, #0xc8
    4b28:	str	x0, [sp, #320]
    4b2c:	ldr	x0, [sp, #504]
    4b30:	str	x0, [sp, #312]
    4b34:	ldr	w0, [sp, #500]
    4b38:	str	w0, [sp, #308]
    4b3c:	ldr	w1, [sp, #308]
    4b40:	ldr	x0, [sp, #320]
    4b44:	bl	290c <BIT_lookBitsFast>
    4b48:	str	x0, [sp, #296]
    4b4c:	ldr	x0, [sp, #296]
    4b50:	lsl	x0, x0, #1
    4b54:	ldr	x1, [sp, #312]
    4b58:	add	x0, x1, x0
    4b5c:	ldrb	w0, [x0]
    4b60:	strb	w0, [sp, #295]
    4b64:	ldr	x0, [sp, #296]
    4b68:	lsl	x0, x0, #1
    4b6c:	ldr	x1, [sp, #312]
    4b70:	add	x0, x1, x0
    4b74:	ldrb	w0, [x0, #1]
    4b78:	mov	w1, w0
    4b7c:	ldr	x0, [sp, #320]
    4b80:	bl	2960 <BIT_skipBits>
    4b84:	ldrb	w0, [sp, #295]
    4b88:	strb	w0, [x19]
    4b8c:	add	x0, sp, #0xc8
    4b90:	bl	2990 <BIT_reloadDStream>
    4b94:	cmp	w0, #0x0
    4b98:	cset	w0, eq  // eq = none
    4b9c:	and	w1, w0, #0xff
    4ba0:	ldr	x2, [sp, #512]
    4ba4:	ldr	x0, [sp, #520]
    4ba8:	cmp	x2, x0
    4bac:	cset	w0, hi  // hi = pmore
    4bb0:	and	w0, w0, #0xff
    4bb4:	and	w0, w1, w0
    4bb8:	and	w0, w0, #0xff
    4bbc:	cmp	w0, #0x0
    4bc0:	b.ne	4b18 <HUF_decompress4X1_usingDTable_internal+0x1818>  // b.any
    4bc4:	b	4c3c <HUF_decompress4X1_usingDTable_internal+0x193c>
    4bc8:	ldr	x19, [sp, #520]
    4bcc:	add	x0, x19, #0x1
    4bd0:	str	x0, [sp, #520]
    4bd4:	add	x0, sp, #0xc8
    4bd8:	str	x0, [sp, #280]
    4bdc:	ldr	x0, [sp, #504]
    4be0:	str	x0, [sp, #272]
    4be4:	ldr	w0, [sp, #500]
    4be8:	str	w0, [sp, #268]
    4bec:	ldr	w1, [sp, #268]
    4bf0:	ldr	x0, [sp, #280]
    4bf4:	bl	290c <BIT_lookBitsFast>
    4bf8:	str	x0, [sp, #256]
    4bfc:	ldr	x0, [sp, #256]
    4c00:	lsl	x0, x0, #1
    4c04:	ldr	x1, [sp, #272]
    4c08:	add	x0, x1, x0
    4c0c:	ldrb	w0, [x0]
    4c10:	strb	w0, [sp, #255]
    4c14:	ldr	x0, [sp, #256]
    4c18:	lsl	x0, x0, #1
    4c1c:	ldr	x1, [sp, #272]
    4c20:	add	x0, x1, x0
    4c24:	ldrb	w0, [x0, #1]
    4c28:	mov	w1, w0
    4c2c:	ldr	x0, [sp, #280]
    4c30:	bl	2960 <BIT_skipBits>
    4c34:	ldrb	w0, [sp, #255]
    4c38:	strb	w0, [x19]
    4c3c:	ldr	x1, [sp, #512]
    4c40:	ldr	x0, [sp, #520]
    4c44:	cmp	x1, x0
    4c48:	b.hi	4bc8 <HUF_decompress4X1_usingDTable_internal+0x18c8>  // b.pmore
    4c4c:	add	x0, sp, #0x50
    4c50:	bl	2b14 <BIT_endOfDStream>
    4c54:	mov	w19, w0
    4c58:	add	x0, sp, #0x78
    4c5c:	bl	2b14 <BIT_endOfDStream>
    4c60:	and	w19, w19, w0
    4c64:	add	x0, sp, #0xa0
    4c68:	bl	2b14 <BIT_endOfDStream>
    4c6c:	and	w19, w19, w0
    4c70:	add	x0, sp, #0xc8
    4c74:	bl	2b14 <BIT_endOfDStream>
    4c78:	and	w0, w19, w0
    4c7c:	str	w0, [sp, #248]
    4c80:	ldr	w0, [sp, #248]
    4c84:	cmp	w0, #0x0
    4c88:	b.ne	4c94 <HUF_decompress4X1_usingDTable_internal+0x1994>  // b.any
    4c8c:	mov	x0, #0xffffffffffffffec    	// #-20
    4c90:	b	4c98 <HUF_decompress4X1_usingDTable_internal+0x1998>
    4c94:	ldr	x0, [sp, #2240]
    4c98:	ldr	x19, [sp, #16]
    4c9c:	ldp	x29, x30, [sp]
    4ca0:	add	sp, sp, #0x8d0
    4ca4:	ret

0000000000004ca8 <HUF_decompress1X1_usingDTable>:
    4ca8:	stp	x29, x30, [sp, #-80]!
    4cac:	mov	x29, sp
    4cb0:	str	x0, [sp, #56]
    4cb4:	str	x1, [sp, #48]
    4cb8:	str	x2, [sp, #40]
    4cbc:	str	x3, [sp, #32]
    4cc0:	str	x4, [sp, #24]
    4cc4:	ldr	x0, [sp, #24]
    4cc8:	bl	2b58 <HUF_getDTableDesc>
    4ccc:	str	w0, [sp, #72]
    4cd0:	ldrb	w0, [sp, #73]
    4cd4:	cmp	w0, #0x0
    4cd8:	b.eq	4ce4 <HUF_decompress1X1_usingDTable+0x3c>  // b.none
    4cdc:	mov	x0, #0xffffffffffffffff    	// #-1
    4ce0:	b	4d00 <HUF_decompress1X1_usingDTable+0x58>
    4ce4:	mov	w5, #0x0                   	// #0
    4ce8:	ldr	x4, [sp, #24]
    4cec:	ldr	x3, [sp, #32]
    4cf0:	ldr	x2, [sp, #40]
    4cf4:	ldr	x1, [sp, #48]
    4cf8:	ldr	x0, [sp, #56]
    4cfc:	bl	2e88 <HUF_decompress1X1_usingDTable_internal>
    4d00:	ldp	x29, x30, [sp], #80
    4d04:	ret

0000000000004d08 <HUF_decompress1X1_DCtx_wksp>:
    4d08:	stp	x29, x30, [sp, #-96]!
    4d0c:	mov	x29, sp
    4d10:	str	x0, [sp, #72]
    4d14:	str	x1, [sp, #64]
    4d18:	str	x2, [sp, #56]
    4d1c:	str	x3, [sp, #48]
    4d20:	str	x4, [sp, #40]
    4d24:	str	x5, [sp, #32]
    4d28:	str	x6, [sp, #24]
    4d2c:	ldr	x0, [sp, #48]
    4d30:	str	x0, [sp, #88]
    4d34:	ldr	x4, [sp, #24]
    4d38:	ldr	x3, [sp, #32]
    4d3c:	ldr	x2, [sp, #40]
    4d40:	ldr	x1, [sp, #48]
    4d44:	ldr	x0, [sp, #72]
    4d48:	bl	2b80 <HUF_readDTableX1_wksp>
    4d4c:	str	x0, [sp, #80]
    4d50:	ldr	x0, [sp, #80]
    4d54:	bl	2564 <ERR_isError>
    4d58:	cmp	w0, #0x0
    4d5c:	b.eq	4d68 <HUF_decompress1X1_DCtx_wksp+0x60>  // b.none
    4d60:	ldr	x0, [sp, #80]
    4d64:	b	4dbc <HUF_decompress1X1_DCtx_wksp+0xb4>
    4d68:	ldr	x1, [sp, #80]
    4d6c:	ldr	x0, [sp, #40]
    4d70:	cmp	x1, x0
    4d74:	b.cc	4d80 <HUF_decompress1X1_DCtx_wksp+0x78>  // b.lo, b.ul, b.last
    4d78:	mov	x0, #0xffffffffffffffb8    	// #-72
    4d7c:	b	4dbc <HUF_decompress1X1_DCtx_wksp+0xb4>
    4d80:	ldr	x1, [sp, #88]
    4d84:	ldr	x0, [sp, #80]
    4d88:	add	x0, x1, x0
    4d8c:	str	x0, [sp, #88]
    4d90:	ldr	x1, [sp, #40]
    4d94:	ldr	x0, [sp, #80]
    4d98:	sub	x0, x1, x0
    4d9c:	str	x0, [sp, #40]
    4da0:	mov	w5, #0x0                   	// #0
    4da4:	ldr	x4, [sp, #72]
    4da8:	ldr	x3, [sp, #40]
    4dac:	ldr	x2, [sp, #88]
    4db0:	ldr	x1, [sp, #56]
    4db4:	ldr	x0, [sp, #64]
    4db8:	bl	2e88 <HUF_decompress1X1_usingDTable_internal>
    4dbc:	ldp	x29, x30, [sp], #96
    4dc0:	ret

0000000000004dc4 <HUF_decompress1X1_DCtx>:
    4dc4:	sub	sp, sp, #0x840
    4dc8:	stp	x29, x30, [sp]
    4dcc:	mov	x29, sp
    4dd0:	str	x0, [sp, #56]
    4dd4:	str	x1, [sp, #48]
    4dd8:	str	x2, [sp, #40]
    4ddc:	str	x3, [sp, #32]
    4de0:	str	x4, [sp, #24]
    4de4:	add	x0, sp, #0x40
    4de8:	mov	x6, #0x800                 	// #2048
    4dec:	mov	x5, x0
    4df0:	ldr	x4, [sp, #24]
    4df4:	ldr	x3, [sp, #32]
    4df8:	ldr	x2, [sp, #40]
    4dfc:	ldr	x1, [sp, #48]
    4e00:	ldr	x0, [sp, #56]
    4e04:	bl	4d08 <HUF_decompress1X1_DCtx_wksp>
    4e08:	ldp	x29, x30, [sp]
    4e0c:	add	sp, sp, #0x840
    4e10:	ret

0000000000004e14 <HUF_decompress1X1>:
    4e14:	mov	x12, #0x2040                	// #8256
    4e18:	sub	sp, sp, x12
    4e1c:	stp	x29, x30, [sp]
    4e20:	mov	x29, sp
    4e24:	str	x0, [sp, #40]
    4e28:	str	x1, [sp, #32]
    4e2c:	str	x2, [sp, #24]
    4e30:	str	x3, [sp, #16]
    4e34:	add	x0, sp, #0x38
    4e38:	mov	x1, #0x2004                	// #8196
    4e3c:	mov	x2, x1
    4e40:	mov	w1, #0x0                   	// #0
    4e44:	bl	0 <memset>
    4e48:	mov	w0, #0xb                   	// #11
    4e4c:	movk	w0, #0xb00, lsl #16
    4e50:	str	w0, [sp, #56]
    4e54:	add	x0, sp, #0x38
    4e58:	ldr	x4, [sp, #16]
    4e5c:	ldr	x3, [sp, #24]
    4e60:	ldr	x2, [sp, #32]
    4e64:	ldr	x1, [sp, #40]
    4e68:	bl	4dc4 <HUF_decompress1X1_DCtx>
    4e6c:	ldp	x29, x30, [sp]
    4e70:	mov	x12, #0x2040                	// #8256
    4e74:	add	sp, sp, x12
    4e78:	ret

0000000000004e7c <HUF_decompress4X1_usingDTable>:
    4e7c:	stp	x29, x30, [sp, #-80]!
    4e80:	mov	x29, sp
    4e84:	str	x0, [sp, #56]
    4e88:	str	x1, [sp, #48]
    4e8c:	str	x2, [sp, #40]
    4e90:	str	x3, [sp, #32]
    4e94:	str	x4, [sp, #24]
    4e98:	ldr	x0, [sp, #24]
    4e9c:	bl	2b58 <HUF_getDTableDesc>
    4ea0:	str	w0, [sp, #72]
    4ea4:	ldrb	w0, [sp, #73]
    4ea8:	cmp	w0, #0x0
    4eac:	b.eq	4eb8 <HUF_decompress4X1_usingDTable+0x3c>  // b.none
    4eb0:	mov	x0, #0xffffffffffffffff    	// #-1
    4eb4:	b	4ed4 <HUF_decompress4X1_usingDTable+0x58>
    4eb8:	mov	w5, #0x0                   	// #0
    4ebc:	ldr	x4, [sp, #24]
    4ec0:	ldr	x3, [sp, #32]
    4ec4:	ldr	x2, [sp, #40]
    4ec8:	ldr	x1, [sp, #48]
    4ecc:	ldr	x0, [sp, #56]
    4ed0:	bl	3300 <HUF_decompress4X1_usingDTable_internal>
    4ed4:	ldp	x29, x30, [sp], #80
    4ed8:	ret

0000000000004edc <HUF_decompress4X1_DCtx_wksp_bmi2>:
    4edc:	stp	x29, x30, [sp, #-96]!
    4ee0:	mov	x29, sp
    4ee4:	str	x0, [sp, #72]
    4ee8:	str	x1, [sp, #64]
    4eec:	str	x2, [sp, #56]
    4ef0:	str	x3, [sp, #48]
    4ef4:	str	x4, [sp, #40]
    4ef8:	str	x5, [sp, #32]
    4efc:	str	x6, [sp, #24]
    4f00:	str	w7, [sp, #20]
    4f04:	ldr	x0, [sp, #48]
    4f08:	str	x0, [sp, #88]
    4f0c:	ldr	x4, [sp, #24]
    4f10:	ldr	x3, [sp, #32]
    4f14:	ldr	x2, [sp, #40]
    4f18:	ldr	x1, [sp, #48]
    4f1c:	ldr	x0, [sp, #72]
    4f20:	bl	2b80 <HUF_readDTableX1_wksp>
    4f24:	str	x0, [sp, #80]
    4f28:	ldr	x0, [sp, #80]
    4f2c:	bl	2564 <ERR_isError>
    4f30:	cmp	w0, #0x0
    4f34:	b.eq	4f40 <HUF_decompress4X1_DCtx_wksp_bmi2+0x64>  // b.none
    4f38:	ldr	x0, [sp, #80]
    4f3c:	b	4f94 <HUF_decompress4X1_DCtx_wksp_bmi2+0xb8>
    4f40:	ldr	x1, [sp, #80]
    4f44:	ldr	x0, [sp, #40]
    4f48:	cmp	x1, x0
    4f4c:	b.cc	4f58 <HUF_decompress4X1_DCtx_wksp_bmi2+0x7c>  // b.lo, b.ul, b.last
    4f50:	mov	x0, #0xffffffffffffffb8    	// #-72
    4f54:	b	4f94 <HUF_decompress4X1_DCtx_wksp_bmi2+0xb8>
    4f58:	ldr	x1, [sp, #88]
    4f5c:	ldr	x0, [sp, #80]
    4f60:	add	x0, x1, x0
    4f64:	str	x0, [sp, #88]
    4f68:	ldr	x1, [sp, #40]
    4f6c:	ldr	x0, [sp, #80]
    4f70:	sub	x0, x1, x0
    4f74:	str	x0, [sp, #40]
    4f78:	ldr	w5, [sp, #20]
    4f7c:	ldr	x4, [sp, #72]
    4f80:	ldr	x3, [sp, #40]
    4f84:	ldr	x2, [sp, #88]
    4f88:	ldr	x1, [sp, #56]
    4f8c:	ldr	x0, [sp, #64]
    4f90:	bl	3300 <HUF_decompress4X1_usingDTable_internal>
    4f94:	ldp	x29, x30, [sp], #96
    4f98:	ret

0000000000004f9c <HUF_decompress4X1_DCtx_wksp>:
    4f9c:	stp	x29, x30, [sp, #-80]!
    4fa0:	mov	x29, sp
    4fa4:	str	x0, [sp, #72]
    4fa8:	str	x1, [sp, #64]
    4fac:	str	x2, [sp, #56]
    4fb0:	str	x3, [sp, #48]
    4fb4:	str	x4, [sp, #40]
    4fb8:	str	x5, [sp, #32]
    4fbc:	str	x6, [sp, #24]
    4fc0:	mov	w7, #0x0                   	// #0
    4fc4:	ldr	x6, [sp, #24]
    4fc8:	ldr	x5, [sp, #32]
    4fcc:	ldr	x4, [sp, #40]
    4fd0:	ldr	x3, [sp, #48]
    4fd4:	ldr	x2, [sp, #56]
    4fd8:	ldr	x1, [sp, #64]
    4fdc:	ldr	x0, [sp, #72]
    4fe0:	bl	4edc <HUF_decompress4X1_DCtx_wksp_bmi2>
    4fe4:	ldp	x29, x30, [sp], #80
    4fe8:	ret

0000000000004fec <HUF_decompress4X1_DCtx>:
    4fec:	sub	sp, sp, #0x840
    4ff0:	stp	x29, x30, [sp]
    4ff4:	mov	x29, sp
    4ff8:	str	x0, [sp, #56]
    4ffc:	str	x1, [sp, #48]
    5000:	str	x2, [sp, #40]
    5004:	str	x3, [sp, #32]
    5008:	str	x4, [sp, #24]
    500c:	add	x0, sp, #0x40
    5010:	mov	x6, #0x800                 	// #2048
    5014:	mov	x5, x0
    5018:	ldr	x4, [sp, #24]
    501c:	ldr	x3, [sp, #32]
    5020:	ldr	x2, [sp, #40]
    5024:	ldr	x1, [sp, #48]
    5028:	ldr	x0, [sp, #56]
    502c:	bl	4f9c <HUF_decompress4X1_DCtx_wksp>
    5030:	ldp	x29, x30, [sp]
    5034:	add	sp, sp, #0x840
    5038:	ret

000000000000503c <HUF_decompress4X1>:
    503c:	mov	x12, #0x2040                	// #8256
    5040:	sub	sp, sp, x12
    5044:	stp	x29, x30, [sp]
    5048:	mov	x29, sp
    504c:	str	x0, [sp, #40]
    5050:	str	x1, [sp, #32]
    5054:	str	x2, [sp, #24]
    5058:	str	x3, [sp, #16]
    505c:	add	x0, sp, #0x38
    5060:	mov	x1, #0x2004                	// #8196
    5064:	mov	x2, x1
    5068:	mov	w1, #0x0                   	// #0
    506c:	bl	0 <memset>
    5070:	mov	w0, #0xb                   	// #11
    5074:	movk	w0, #0xb00, lsl #16
    5078:	str	w0, [sp, #56]
    507c:	add	x0, sp, #0x38
    5080:	ldr	x4, [sp, #16]
    5084:	ldr	x3, [sp, #24]
    5088:	ldr	x2, [sp, #32]
    508c:	ldr	x1, [sp, #40]
    5090:	bl	4fec <HUF_decompress4X1_DCtx>
    5094:	ldp	x29, x30, [sp]
    5098:	mov	x12, #0x2040                	// #8256
    509c:	add	sp, sp, x12
    50a0:	ret

00000000000050a4 <HUF_fillDTableX2Level2>:
    50a4:	stp	x29, x30, [sp, #-176]!
    50a8:	mov	x29, sp
    50ac:	str	x0, [sp, #56]
    50b0:	str	w1, [sp, #52]
    50b4:	str	w2, [sp, #48]
    50b8:	str	x3, [sp, #40]
    50bc:	str	w4, [sp, #36]
    50c0:	str	x5, [sp, #24]
    50c4:	str	w6, [sp, #32]
    50c8:	str	w7, [sp, #20]
    50cc:	add	x0, sp, #0x48
    50d0:	mov	x2, #0x34                  	// #52
    50d4:	ldr	x1, [sp, #40]
    50d8:	bl	22f8 <grub_memcpy>
    50dc:	ldr	w0, [sp, #36]
    50e0:	cmp	w0, #0x1
    50e4:	b.le	5158 <HUF_fillDTableX2Level2+0xb4>
    50e8:	ldrsw	x0, [sp, #36]
    50ec:	lsl	x0, x0, #2
    50f0:	add	x1, sp, #0x48
    50f4:	ldr	w0, [x1, x0]
    50f8:	str	w0, [sp, #160]
    50fc:	add	x0, sp, #0x80
    5100:	ldrh	w1, [sp, #176]
    5104:	bl	244c <MEM_writeLE16>
    5108:	ldr	w0, [sp, #48]
    510c:	and	w0, w0, #0xff
    5110:	strb	w0, [sp, #130]
    5114:	mov	w0, #0x1                   	// #1
    5118:	strb	w0, [sp, #131]
    511c:	str	wzr, [sp, #172]
    5120:	b	5148 <HUF_fillDTableX2Level2+0xa4>
    5124:	ldr	w0, [sp, #172]
    5128:	lsl	x0, x0, #2
    512c:	ldr	x1, [sp, #56]
    5130:	add	x0, x1, x0
    5134:	ldr	w1, [sp, #128]
    5138:	str	w1, [x0]
    513c:	ldr	w0, [sp, #172]
    5140:	add	w0, w0, #0x1
    5144:	str	w0, [sp, #172]
    5148:	ldr	w1, [sp, #172]
    514c:	ldr	w0, [sp, #160]
    5150:	cmp	w1, w0
    5154:	b.cc	5124 <HUF_fillDTableX2Level2+0x80>  // b.lo, b.ul, b.last
    5158:	str	wzr, [sp, #168]
    515c:	b	5294 <HUF_fillDTableX2Level2+0x1f0>
    5160:	ldr	w0, [sp, #168]
    5164:	lsl	x0, x0, #1
    5168:	ldr	x1, [sp, #24]
    516c:	add	x0, x1, x0
    5170:	ldrb	w0, [x0]
    5174:	str	w0, [sp, #156]
    5178:	ldr	w0, [sp, #168]
    517c:	lsl	x0, x0, #1
    5180:	ldr	x1, [sp, #24]
    5184:	add	x0, x1, x0
    5188:	ldrb	w0, [x0, #1]
    518c:	str	w0, [sp, #152]
    5190:	ldr	w1, [sp, #20]
    5194:	ldr	w0, [sp, #152]
    5198:	sub	w0, w1, w0
    519c:	str	w0, [sp, #148]
    51a0:	ldr	w1, [sp, #52]
    51a4:	ldr	w0, [sp, #148]
    51a8:	sub	w0, w1, w0
    51ac:	mov	w1, #0x1                   	// #1
    51b0:	lsl	w0, w1, w0
    51b4:	str	w0, [sp, #144]
    51b8:	ldr	w0, [sp, #152]
    51bc:	lsl	x0, x0, #2
    51c0:	add	x1, sp, #0x48
    51c4:	ldr	w0, [x1, x0]
    51c8:	str	w0, [sp, #140]
    51cc:	ldr	w0, [sp, #140]
    51d0:	str	w0, [sp, #164]
    51d4:	ldr	w1, [sp, #140]
    51d8:	ldr	w0, [sp, #144]
    51dc:	add	w0, w1, w0
    51e0:	str	w0, [sp, #136]
    51e4:	ldr	w0, [sp, #156]
    51e8:	and	w0, w0, #0xffff
    51ec:	ubfiz	w0, w0, #8, #8
    51f0:	and	w0, w0, #0xffff
    51f4:	ldrh	w1, [sp, #176]
    51f8:	add	w0, w0, w1
    51fc:	and	w1, w0, #0xffff
    5200:	add	x0, sp, #0x80
    5204:	bl	244c <MEM_writeLE16>
    5208:	ldr	w0, [sp, #148]
    520c:	and	w1, w0, #0xff
    5210:	ldr	w0, [sp, #48]
    5214:	and	w0, w0, #0xff
    5218:	add	w0, w1, w0
    521c:	and	w0, w0, #0xff
    5220:	strb	w0, [sp, #130]
    5224:	mov	w0, #0x2                   	// #2
    5228:	strb	w0, [sp, #131]
    522c:	ldr	w0, [sp, #164]
    5230:	add	w1, w0, #0x1
    5234:	str	w1, [sp, #164]
    5238:	mov	w0, w0
    523c:	lsl	x0, x0, #2
    5240:	ldr	x1, [sp, #56]
    5244:	add	x0, x1, x0
    5248:	ldr	w1, [sp, #128]
    524c:	str	w1, [x0]
    5250:	ldr	w1, [sp, #164]
    5254:	ldr	w0, [sp, #136]
    5258:	cmp	w1, w0
    525c:	b.cc	522c <HUF_fillDTableX2Level2+0x188>  // b.lo, b.ul, b.last
    5260:	ldr	w0, [sp, #152]
    5264:	lsl	x0, x0, #2
    5268:	add	x1, sp, #0x48
    526c:	ldr	w1, [x1, x0]
    5270:	ldr	w0, [sp, #144]
    5274:	add	w2, w1, w0
    5278:	ldr	w0, [sp, #152]
    527c:	lsl	x0, x0, #2
    5280:	add	x1, sp, #0x48
    5284:	str	w2, [x1, x0]
    5288:	ldr	w0, [sp, #168]
    528c:	add	w0, w0, #0x1
    5290:	str	w0, [sp, #168]
    5294:	ldr	w1, [sp, #168]
    5298:	ldr	w0, [sp, #32]
    529c:	cmp	w1, w0
    52a0:	b.cc	5160 <HUF_fillDTableX2Level2+0xbc>  // b.lo, b.ul, b.last
    52a4:	nop
    52a8:	nop
    52ac:	ldp	x29, x30, [sp], #176
    52b0:	ret

00000000000052b4 <HUF_fillDTableX2>:
    52b4:	sub	sp, sp, #0xc0
    52b8:	stp	x29, x30, [sp, #16]
    52bc:	add	x29, sp, #0x10
    52c0:	str	x0, [sp, #72]
    52c4:	str	w1, [sp, #68]
    52c8:	str	x2, [sp, #56]
    52cc:	str	w3, [sp, #64]
    52d0:	str	x4, [sp, #48]
    52d4:	str	x5, [sp, #40]
    52d8:	str	w6, [sp, #36]
    52dc:	str	w7, [sp, #32]
    52e0:	ldr	w1, [sp, #32]
    52e4:	ldr	w0, [sp, #68]
    52e8:	sub	w0, w1, w0
    52ec:	str	w0, [sp, #176]
    52f0:	ldr	w1, [sp, #32]
    52f4:	ldr	w0, [sp, #36]
    52f8:	sub	w0, w1, w0
    52fc:	str	w0, [sp, #172]
    5300:	add	x0, sp, #0x58
    5304:	mov	x2, #0x34                  	// #52
    5308:	ldr	x1, [sp, #40]
    530c:	bl	22f8 <grub_memcpy>
    5310:	str	wzr, [sp, #188]
    5314:	b	550c <HUF_fillDTableX2+0x258>
    5318:	ldr	w0, [sp, #188]
    531c:	lsl	x0, x0, #1
    5320:	ldr	x1, [sp, #56]
    5324:	add	x0, x1, x0
    5328:	ldrb	w0, [x0]
    532c:	strh	w0, [sp, #170]
    5330:	ldr	w0, [sp, #188]
    5334:	lsl	x0, x0, #1
    5338:	ldr	x1, [sp, #56]
    533c:	add	x0, x1, x0
    5340:	ldrb	w0, [x0, #1]
    5344:	str	w0, [sp, #164]
    5348:	ldr	w1, [sp, #32]
    534c:	ldr	w0, [sp, #164]
    5350:	sub	w0, w1, w0
    5354:	str	w0, [sp, #160]
    5358:	ldr	w0, [sp, #164]
    535c:	lsl	x0, x0, #2
    5360:	add	x1, sp, #0x58
    5364:	ldr	w0, [x1, x0]
    5368:	str	w0, [sp, #156]
    536c:	ldr	w1, [sp, #68]
    5370:	ldr	w0, [sp, #160]
    5374:	sub	w0, w1, w0
    5378:	mov	w1, #0x1                   	// #1
    537c:	lsl	w0, w1, w0
    5380:	str	w0, [sp, #152]
    5384:	ldr	w1, [sp, #68]
    5388:	ldr	w0, [sp, #160]
    538c:	sub	w0, w1, w0
    5390:	ldr	w1, [sp, #172]
    5394:	cmp	w1, w0
    5398:	b.hi	5468 <HUF_fillDTableX2+0x1b4>  // b.pmore
    539c:	ldr	w1, [sp, #176]
    53a0:	ldr	w0, [sp, #160]
    53a4:	add	w0, w1, w0
    53a8:	str	w0, [sp, #184]
    53ac:	ldr	w0, [sp, #184]
    53b0:	cmp	w0, #0x0
    53b4:	b.gt	53c0 <HUF_fillDTableX2+0x10c>
    53b8:	mov	w0, #0x1                   	// #1
    53bc:	str	w0, [sp, #184]
    53c0:	ldrsw	x0, [sp, #184]
    53c4:	lsl	x0, x0, #2
    53c8:	ldr	x1, [sp, #48]
    53cc:	add	x0, x1, x0
    53d0:	ldr	w0, [x0]
    53d4:	str	w0, [sp, #144]
    53d8:	ldr	w0, [sp, #156]
    53dc:	lsl	x0, x0, #2
    53e0:	ldr	x1, [sp, #72]
    53e4:	add	x8, x1, x0
    53e8:	ldr	w1, [sp, #68]
    53ec:	ldr	w0, [sp, #160]
    53f0:	sub	w9, w1, w0
    53f4:	ldr	w1, [sp, #160]
    53f8:	mov	x0, x1
    53fc:	lsl	x0, x0, #1
    5400:	add	x0, x0, x1
    5404:	lsl	x0, x0, #2
    5408:	add	x0, x0, x1
    540c:	lsl	x0, x0, #2
    5410:	mov	x1, x0
    5414:	ldr	x0, [sp, #40]
    5418:	add	x2, x0, x1
    541c:	ldr	w0, [sp, #144]
    5420:	lsl	x0, x0, #1
    5424:	ldr	x1, [sp, #56]
    5428:	add	x3, x1, x0
    542c:	ldr	w1, [sp, #64]
    5430:	ldr	w0, [sp, #144]
    5434:	sub	w1, w1, w0
    5438:	ldrh	w0, [sp, #170]
    543c:	strh	w0, [sp]
    5440:	ldr	w7, [sp, #32]
    5444:	mov	w6, w1
    5448:	mov	x5, x3
    544c:	ldr	w4, [sp, #184]
    5450:	mov	x3, x2
    5454:	ldr	w2, [sp, #160]
    5458:	mov	w1, w9
    545c:	mov	x0, x8
    5460:	bl	50a4 <HUF_fillDTableX2Level2>
    5464:	b	54d8 <HUF_fillDTableX2+0x224>
    5468:	add	x0, sp, #0x50
    546c:	ldrh	w1, [sp, #170]
    5470:	bl	244c <MEM_writeLE16>
    5474:	ldr	w0, [sp, #160]
    5478:	and	w0, w0, #0xff
    547c:	strb	w0, [sp, #82]
    5480:	mov	w0, #0x1                   	// #1
    5484:	strb	w0, [sp, #83]
    5488:	ldr	w1, [sp, #156]
    548c:	ldr	w0, [sp, #152]
    5490:	add	w0, w1, w0
    5494:	str	w0, [sp, #148]
    5498:	ldr	w0, [sp, #156]
    549c:	str	w0, [sp, #180]
    54a0:	b	54c8 <HUF_fillDTableX2+0x214>
    54a4:	ldr	w0, [sp, #180]
    54a8:	lsl	x0, x0, #2
    54ac:	ldr	x1, [sp, #72]
    54b0:	add	x0, x1, x0
    54b4:	ldr	w1, [sp, #80]
    54b8:	str	w1, [x0]
    54bc:	ldr	w0, [sp, #180]
    54c0:	add	w0, w0, #0x1
    54c4:	str	w0, [sp, #180]
    54c8:	ldr	w1, [sp, #180]
    54cc:	ldr	w0, [sp, #148]
    54d0:	cmp	w1, w0
    54d4:	b.cc	54a4 <HUF_fillDTableX2+0x1f0>  // b.lo, b.ul, b.last
    54d8:	ldr	w0, [sp, #164]
    54dc:	lsl	x0, x0, #2
    54e0:	add	x1, sp, #0x58
    54e4:	ldr	w1, [x1, x0]
    54e8:	ldr	w0, [sp, #152]
    54ec:	add	w2, w1, w0
    54f0:	ldr	w0, [sp, #164]
    54f4:	lsl	x0, x0, #2
    54f8:	add	x1, sp, #0x58
    54fc:	str	w2, [x1, x0]
    5500:	ldr	w0, [sp, #188]
    5504:	add	w0, w0, #0x1
    5508:	str	w0, [sp, #188]
    550c:	ldr	w1, [sp, #188]
    5510:	ldr	w0, [sp, #64]
    5514:	cmp	w1, w0
    5518:	b.cc	5318 <HUF_fillDTableX2+0x64>  // b.lo, b.ul, b.last
    551c:	nop
    5520:	nop
    5524:	ldp	x29, x30, [sp, #16]
    5528:	add	sp, sp, #0xc0
    552c:	ret

0000000000005530 <HUF_readDTableX2_wksp>:
    5530:	stp	x29, x30, [sp, #-256]!
    5534:	mov	x29, sp
    5538:	str	x0, [sp, #56]
    553c:	str	x1, [sp, #48]
    5540:	str	x2, [sp, #40]
    5544:	str	x3, [sp, #32]
    5548:	str	x4, [sp, #24]
    554c:	ldr	x0, [sp, #56]
    5550:	bl	2b58 <HUF_getDTableDesc>
    5554:	str	w0, [sp, #72]
    5558:	ldrb	w0, [sp, #72]
    555c:	str	w0, [sp, #220]
    5560:	ldr	x0, [sp, #56]
    5564:	add	x0, x0, #0x4
    5568:	str	x0, [sp, #208]
    556c:	ldr	x0, [sp, #208]
    5570:	str	x0, [sp, #200]
    5574:	str	xzr, [sp, #192]
    5578:	ldr	x0, [sp, #192]
    557c:	lsl	x0, x0, #2
    5580:	ldr	x1, [sp, #32]
    5584:	add	x0, x1, x0
    5588:	str	x0, [sp, #184]
    558c:	ldr	x0, [sp, #192]
    5590:	add	x0, x0, #0x9c
    5594:	str	x0, [sp, #192]
    5598:	ldr	x0, [sp, #192]
    559c:	lsl	x0, x0, #2
    55a0:	ldr	x1, [sp, #32]
    55a4:	add	x0, x1, x0
    55a8:	str	x0, [sp, #176]
    55ac:	ldr	x0, [sp, #192]
    55b0:	add	x0, x0, #0xd
    55b4:	str	x0, [sp, #192]
    55b8:	ldr	x0, [sp, #192]
    55bc:	lsl	x0, x0, #2
    55c0:	ldr	x1, [sp, #32]
    55c4:	add	x0, x1, x0
    55c8:	str	x0, [sp, #168]
    55cc:	ldr	x0, [sp, #192]
    55d0:	add	x0, x0, #0xe
    55d4:	str	x0, [sp, #192]
    55d8:	ldr	x0, [sp, #192]
    55dc:	lsl	x0, x0, #2
    55e0:	ldr	x1, [sp, #32]
    55e4:	add	x0, x1, x0
    55e8:	str	x0, [sp, #160]
    55ec:	ldr	x0, [sp, #192]
    55f0:	add	x0, x0, #0x80
    55f4:	str	x0, [sp, #192]
    55f8:	ldr	x0, [sp, #192]
    55fc:	lsl	x0, x0, #2
    5600:	ldr	x1, [sp, #32]
    5604:	add	x0, x1, x0
    5608:	str	x0, [sp, #152]
    560c:	ldr	x0, [sp, #192]
    5610:	add	x0, x0, #0x40
    5614:	str	x0, [sp, #192]
    5618:	ldr	x0, [sp, #192]
    561c:	lsl	x0, x0, #2
    5620:	ldr	x1, [sp, #24]
    5624:	cmp	x1, x0
    5628:	b.cs	5634 <HUF_readDTableX2_wksp+0x104>  // b.hs, b.nlast
    562c:	mov	x0, #0xffffffffffffffd4    	// #-44
    5630:	b	59d4 <HUF_readDTableX2_wksp+0x4a4>
    5634:	ldr	x0, [sp, #168]
    5638:	add	x0, x0, #0x4
    563c:	str	x0, [sp, #144]
    5640:	mov	x2, #0x6c                  	// #108
    5644:	mov	w1, #0x0                   	// #0
    5648:	ldr	x0, [sp, #176]
    564c:	bl	0 <grub_memset>
    5650:	ldr	w0, [sp, #220]
    5654:	cmp	w0, #0xc
    5658:	b.ls	5664 <HUF_readDTableX2_wksp+0x134>  // b.plast
    565c:	mov	x0, #0xffffffffffffffd4    	// #-44
    5660:	b	59d4 <HUF_readDTableX2_wksp+0x4a4>
    5664:	add	x1, sp, #0x54
    5668:	add	x0, sp, #0x50
    566c:	ldr	x6, [sp, #40]
    5670:	ldr	x5, [sp, #48]
    5674:	mov	x4, x1
    5678:	mov	x3, x0
    567c:	ldr	x2, [sp, #176]
    5680:	mov	x1, #0x100                 	// #256
    5684:	ldr	x0, [sp, #152]
    5688:	bl	768 <HUF_readStats>
    568c:	str	x0, [sp, #136]
    5690:	ldr	x0, [sp, #136]
    5694:	bl	2564 <ERR_isError>
    5698:	cmp	w0, #0x0
    569c:	b.eq	56a8 <HUF_readDTableX2_wksp+0x178>  // b.none
    56a0:	ldr	x0, [sp, #136]
    56a4:	b	59d4 <HUF_readDTableX2_wksp+0x4a4>
    56a8:	ldr	w0, [sp, #84]
    56ac:	ldr	w1, [sp, #220]
    56b0:	cmp	w1, w0
    56b4:	b.cs	56c0 <HUF_readDTableX2_wksp+0x190>  // b.hs, b.nlast
    56b8:	mov	x0, #0xffffffffffffffd4    	// #-44
    56bc:	b	59d4 <HUF_readDTableX2_wksp+0x4a4>
    56c0:	ldr	w0, [sp, #84]
    56c4:	str	w0, [sp, #252]
    56c8:	b	56d8 <HUF_readDTableX2_wksp+0x1a8>
    56cc:	ldr	w0, [sp, #252]
    56d0:	sub	w0, w0, #0x1
    56d4:	str	w0, [sp, #252]
    56d8:	ldr	w0, [sp, #252]
    56dc:	lsl	x0, x0, #2
    56e0:	ldr	x1, [sp, #176]
    56e4:	add	x0, x1, x0
    56e8:	ldr	w0, [x0]
    56ec:	cmp	w0, #0x0
    56f0:	b.eq	56cc <HUF_readDTableX2_wksp+0x19c>  // b.none
    56f4:	str	wzr, [sp, #244]
    56f8:	mov	w0, #0x1                   	// #1
    56fc:	str	w0, [sp, #248]
    5700:	b	5750 <HUF_readDTableX2_wksp+0x220>
    5704:	ldr	w0, [sp, #244]
    5708:	str	w0, [sp, #88]
    570c:	ldr	w0, [sp, #248]
    5710:	lsl	x0, x0, #2
    5714:	ldr	x1, [sp, #176]
    5718:	add	x0, x1, x0
    571c:	ldr	w0, [x0]
    5720:	ldr	w1, [sp, #244]
    5724:	add	w0, w1, w0
    5728:	str	w0, [sp, #244]
    572c:	ldr	w0, [sp, #248]
    5730:	lsl	x0, x0, #2
    5734:	ldr	x1, [sp, #144]
    5738:	add	x0, x1, x0
    573c:	ldr	w1, [sp, #88]
    5740:	str	w1, [x0]
    5744:	ldr	w0, [sp, #248]
    5748:	add	w0, w0, #0x1
    574c:	str	w0, [sp, #248]
    5750:	ldr	w0, [sp, #252]
    5754:	add	w0, w0, #0x1
    5758:	ldr	w1, [sp, #248]
    575c:	cmp	w1, w0
    5760:	b.cc	5704 <HUF_readDTableX2_wksp+0x1d4>  // b.lo, b.ul, b.last
    5764:	ldr	x0, [sp, #144]
    5768:	ldr	w1, [sp, #244]
    576c:	str	w1, [x0]
    5770:	ldr	w0, [sp, #244]
    5774:	str	w0, [sp, #132]
    5778:	str	wzr, [sp, #240]
    577c:	b	57f8 <HUF_readDTableX2_wksp+0x2c8>
    5780:	ldr	w0, [sp, #240]
    5784:	ldr	x1, [sp, #152]
    5788:	add	x0, x1, x0
    578c:	ldrb	w0, [x0]
    5790:	str	w0, [sp, #96]
    5794:	ldr	w0, [sp, #96]
    5798:	lsl	x0, x0, #2
    579c:	ldr	x1, [sp, #144]
    57a0:	add	x1, x1, x0
    57a4:	ldr	w0, [x1]
    57a8:	add	w2, w0, #0x1
    57ac:	str	w2, [x1]
    57b0:	str	w0, [sp, #92]
    57b4:	ldr	w0, [sp, #92]
    57b8:	lsl	x0, x0, #1
    57bc:	ldr	x1, [sp, #160]
    57c0:	add	x0, x1, x0
    57c4:	ldr	w1, [sp, #240]
    57c8:	and	w1, w1, #0xff
    57cc:	strb	w1, [x0]
    57d0:	ldr	w0, [sp, #92]
    57d4:	lsl	x0, x0, #1
    57d8:	ldr	x1, [sp, #160]
    57dc:	add	x0, x1, x0
    57e0:	ldr	w1, [sp, #96]
    57e4:	and	w1, w1, #0xff
    57e8:	strb	w1, [x0, #1]
    57ec:	ldr	w0, [sp, #240]
    57f0:	add	w0, w0, #0x1
    57f4:	str	w0, [sp, #240]
    57f8:	ldr	w0, [sp, #80]
    57fc:	ldr	w1, [sp, #240]
    5800:	cmp	w1, w0
    5804:	b.cc	5780 <HUF_readDTableX2_wksp+0x250>  // b.lo, b.ul, b.last
    5808:	ldr	x0, [sp, #144]
    580c:	str	wzr, [x0]
    5810:	ldr	x0, [sp, #184]
    5814:	str	x0, [sp, #120]
    5818:	ldr	w0, [sp, #84]
    581c:	ldr	w1, [sp, #220]
    5820:	sub	w0, w1, w0
    5824:	sub	w0, w0, #0x1
    5828:	str	w0, [sp, #116]
    582c:	str	wzr, [sp, #236]
    5830:	mov	w0, #0x1                   	// #1
    5834:	str	w0, [sp, #232]
    5838:	b	5898 <HUF_readDTableX2_wksp+0x368>
    583c:	ldr	w0, [sp, #236]
    5840:	str	w0, [sp, #100]
    5844:	ldr	w0, [sp, #232]
    5848:	lsl	x0, x0, #2
    584c:	ldr	x1, [sp, #176]
    5850:	add	x0, x1, x0
    5854:	ldr	w1, [x0]
    5858:	ldr	w2, [sp, #116]
    585c:	ldr	w0, [sp, #232]
    5860:	add	w0, w2, w0
    5864:	lsl	w0, w1, w0
    5868:	ldr	w1, [sp, #236]
    586c:	add	w0, w1, w0
    5870:	str	w0, [sp, #236]
    5874:	ldr	w0, [sp, #232]
    5878:	lsl	x0, x0, #2
    587c:	ldr	x1, [sp, #120]
    5880:	add	x0, x1, x0
    5884:	ldr	w1, [sp, #100]
    5888:	str	w1, [x0]
    588c:	ldr	w0, [sp, #232]
    5890:	add	w0, w0, #0x1
    5894:	str	w0, [sp, #232]
    5898:	ldr	w0, [sp, #252]
    589c:	add	w0, w0, #0x1
    58a0:	ldr	w1, [sp, #232]
    58a4:	cmp	w1, w0
    58a8:	b.cc	583c <HUF_readDTableX2_wksp+0x30c>  // b.lo, b.ul, b.last
    58ac:	ldr	w1, [sp, #84]
    58b0:	ldr	w0, [sp, #252]
    58b4:	sub	w0, w1, w0
    58b8:	add	w0, w0, #0x1
    58bc:	str	w0, [sp, #112]
    58c0:	ldr	w0, [sp, #112]
    58c4:	str	w0, [sp, #228]
    58c8:	b	5960 <HUF_readDTableX2_wksp+0x430>
    58cc:	ldr	w1, [sp, #228]
    58d0:	mov	x0, x1
    58d4:	lsl	x0, x0, #1
    58d8:	add	x0, x0, x1
    58dc:	lsl	x0, x0, #2
    58e0:	add	x0, x0, x1
    58e4:	lsl	x0, x0, #2
    58e8:	mov	x1, x0
    58ec:	ldr	x0, [sp, #184]
    58f0:	add	x0, x0, x1
    58f4:	str	x0, [sp, #104]
    58f8:	mov	w0, #0x1                   	// #1
    58fc:	str	w0, [sp, #224]
    5900:	b	5940 <HUF_readDTableX2_wksp+0x410>
    5904:	ldr	w0, [sp, #224]
    5908:	lsl	x0, x0, #2
    590c:	ldr	x1, [sp, #120]
    5910:	add	x0, x1, x0
    5914:	ldr	w2, [x0]
    5918:	ldr	w0, [sp, #224]
    591c:	lsl	x0, x0, #2
    5920:	ldr	x1, [sp, #104]
    5924:	add	x0, x1, x0
    5928:	ldr	w1, [sp, #228]
    592c:	lsr	w1, w2, w1
    5930:	str	w1, [x0]
    5934:	ldr	w0, [sp, #224]
    5938:	add	w0, w0, #0x1
    593c:	str	w0, [sp, #224]
    5940:	ldr	w0, [sp, #252]
    5944:	add	w0, w0, #0x1
    5948:	ldr	w1, [sp, #224]
    594c:	cmp	w1, w0
    5950:	b.cc	5904 <HUF_readDTableX2_wksp+0x3d4>  // b.lo, b.ul, b.last
    5954:	ldr	w0, [sp, #228]
    5958:	add	w0, w0, #0x1
    595c:	str	w0, [sp, #228]
    5960:	ldr	w1, [sp, #220]
    5964:	ldr	w0, [sp, #112]
    5968:	sub	w0, w1, w0
    596c:	add	w0, w0, #0x1
    5970:	ldr	w1, [sp, #228]
    5974:	cmp	w1, w0
    5978:	b.cc	58cc <HUF_readDTableX2_wksp+0x39c>  // b.lo, b.ul, b.last
    597c:	ldr	w0, [sp, #84]
    5980:	add	w0, w0, #0x1
    5984:	mov	w7, w0
    5988:	ldr	w6, [sp, #252]
    598c:	ldr	x5, [sp, #184]
    5990:	ldr	x4, [sp, #168]
    5994:	ldr	w3, [sp, #132]
    5998:	ldr	x2, [sp, #160]
    599c:	ldr	w1, [sp, #220]
    59a0:	ldr	x0, [sp, #200]
    59a4:	bl	52b4 <HUF_fillDTableX2>
    59a8:	ldr	w0, [sp, #220]
    59ac:	and	w0, w0, #0xff
    59b0:	strb	w0, [sp, #74]
    59b4:	mov	w0, #0x1                   	// #1
    59b8:	strb	w0, [sp, #73]
    59bc:	add	x0, sp, #0x48
    59c0:	mov	x2, #0x4                   	// #4
    59c4:	mov	x1, x0
    59c8:	ldr	x0, [sp, #56]
    59cc:	bl	22f8 <grub_memcpy>
    59d0:	ldr	x0, [sp, #136]
    59d4:	ldp	x29, x30, [sp], #256
    59d8:	ret

00000000000059dc <HUF_readDTableX2>:
    59dc:	sub	sp, sp, #0x830
    59e0:	stp	x29, x30, [sp]
    59e4:	mov	x29, sp
    59e8:	str	x0, [sp, #40]
    59ec:	str	x1, [sp, #32]
    59f0:	str	x2, [sp, #24]
    59f4:	add	x0, sp, #0x30
    59f8:	mov	x4, #0x800                 	// #2048
    59fc:	mov	x3, x0
    5a00:	ldr	x2, [sp, #24]
    5a04:	ldr	x1, [sp, #32]
    5a08:	ldr	x0, [sp, #40]
    5a0c:	bl	5530 <HUF_readDTableX2_wksp>
    5a10:	ldp	x29, x30, [sp]
    5a14:	add	sp, sp, #0x830
    5a18:	ret

0000000000005a1c <HUF_decompress1X2_usingDTable_internal>:
    5a1c:	sub	sp, sp, #0x210
    5a20:	stp	x29, x30, [sp]
    5a24:	mov	x29, sp
    5a28:	str	x0, [sp, #56]
    5a2c:	str	x1, [sp, #48]
    5a30:	str	x2, [sp, #40]
    5a34:	str	x3, [sp, #32]
    5a38:	str	x4, [sp, #24]
    5a3c:	str	w5, [sp, #20]
    5a40:	ldr	x0, [sp, #56]
    5a44:	str	x0, [sp, #520]
    5a48:	ldr	x0, [sp, #48]
    5a4c:	str	x0, [sp, #512]
    5a50:	ldr	x0, [sp, #40]
    5a54:	str	x0, [sp, #504]
    5a58:	ldr	x0, [sp, #32]
    5a5c:	str	x0, [sp, #496]
    5a60:	ldr	x0, [sp, #24]
    5a64:	str	x0, [sp, #488]
    5a68:	add	x0, sp, #0x48
    5a6c:	ldr	x2, [sp, #496]
    5a70:	ldr	x1, [sp, #504]
    5a74:	bl	25f8 <BIT_initDStream>
    5a78:	str	x0, [sp, #480]
    5a7c:	ldr	x0, [sp, #480]
    5a80:	bl	2564 <ERR_isError>
    5a84:	cmp	w0, #0x0
    5a88:	b.eq	5a94 <HUF_decompress1X2_usingDTable_internal+0x78>  // b.none
    5a8c:	ldr	x0, [sp, #480]
    5a90:	b	6048 <HUF_decompress1X2_usingDTable_internal+0x62c>
    5a94:	ldr	x0, [sp, #520]
    5a98:	str	x0, [sp, #472]
    5a9c:	ldr	x1, [sp, #472]
    5aa0:	ldr	x0, [sp, #512]
    5aa4:	add	x0, x1, x0
    5aa8:	str	x0, [sp, #464]
    5aac:	ldr	x0, [sp, #488]
    5ab0:	add	x0, x0, #0x4
    5ab4:	str	x0, [sp, #456]
    5ab8:	ldr	x0, [sp, #456]
    5abc:	str	x0, [sp, #448]
    5ac0:	ldr	x0, [sp, #488]
    5ac4:	bl	2b58 <HUF_getDTableDesc>
    5ac8:	str	w0, [sp, #112]
    5acc:	ldrb	w0, [sp, #114]
    5ad0:	mov	w1, w0
    5ad4:	ldr	x0, [sp, #472]
    5ad8:	str	x0, [sp, #440]
    5adc:	add	x0, sp, #0x48
    5ae0:	str	x0, [sp, #432]
    5ae4:	ldr	x0, [sp, #464]
    5ae8:	str	x0, [sp, #424]
    5aec:	ldr	x0, [sp, #448]
    5af0:	str	x0, [sp, #416]
    5af4:	str	w1, [sp, #412]
    5af8:	ldr	x0, [sp, #440]
    5afc:	str	x0, [sp, #400]
    5b00:	b	5d70 <HUF_decompress1X2_usingDTable_internal+0x354>
    5b04:	bl	232c <MEM_64bits>
    5b08:	cmp	w0, #0x0
    5b0c:	b.eq	5ba4 <HUF_decompress1X2_usingDTable_internal+0x188>  // b.none
    5b10:	ldr	x0, [sp, #440]
    5b14:	str	x0, [sp, #392]
    5b18:	ldr	x0, [sp, #432]
    5b1c:	str	x0, [sp, #384]
    5b20:	ldr	x0, [sp, #416]
    5b24:	str	x0, [sp, #376]
    5b28:	ldr	w0, [sp, #412]
    5b2c:	str	w0, [sp, #372]
    5b30:	ldr	w1, [sp, #372]
    5b34:	ldr	x0, [sp, #384]
    5b38:	bl	290c <BIT_lookBitsFast>
    5b3c:	str	x0, [sp, #360]
    5b40:	ldr	x0, [sp, #360]
    5b44:	lsl	x0, x0, #2
    5b48:	ldr	x1, [sp, #376]
    5b4c:	add	x0, x1, x0
    5b50:	mov	x2, #0x2                   	// #2
    5b54:	mov	x1, x0
    5b58:	ldr	x0, [sp, #392]
    5b5c:	bl	22f8 <grub_memcpy>
    5b60:	ldr	x0, [sp, #360]
    5b64:	lsl	x0, x0, #2
    5b68:	ldr	x1, [sp, #376]
    5b6c:	add	x0, x1, x0
    5b70:	ldrb	w0, [x0, #2]
    5b74:	mov	w1, w0
    5b78:	ldr	x0, [sp, #384]
    5b7c:	bl	2960 <BIT_skipBits>
    5b80:	ldr	x0, [sp, #360]
    5b84:	lsl	x0, x0, #2
    5b88:	ldr	x1, [sp, #376]
    5b8c:	add	x0, x1, x0
    5b90:	ldrb	w0, [x0, #3]
    5b94:	mov	w0, w0
    5b98:	ldr	x1, [sp, #440]
    5b9c:	add	x0, x1, x0
    5ba0:	str	x0, [sp, #440]
    5ba4:	bl	232c <MEM_64bits>
    5ba8:	ldr	x0, [sp, #440]
    5bac:	str	x0, [sp, #352]
    5bb0:	ldr	x0, [sp, #432]
    5bb4:	str	x0, [sp, #344]
    5bb8:	ldr	x0, [sp, #416]
    5bbc:	str	x0, [sp, #336]
    5bc0:	ldr	w0, [sp, #412]
    5bc4:	str	w0, [sp, #332]
    5bc8:	ldr	w1, [sp, #332]
    5bcc:	ldr	x0, [sp, #344]
    5bd0:	bl	290c <BIT_lookBitsFast>
    5bd4:	str	x0, [sp, #320]
    5bd8:	ldr	x0, [sp, #320]
    5bdc:	lsl	x0, x0, #2
    5be0:	ldr	x1, [sp, #336]
    5be4:	add	x0, x1, x0
    5be8:	mov	x2, #0x2                   	// #2
    5bec:	mov	x1, x0
    5bf0:	ldr	x0, [sp, #352]
    5bf4:	bl	22f8 <grub_memcpy>
    5bf8:	ldr	x0, [sp, #320]
    5bfc:	lsl	x0, x0, #2
    5c00:	ldr	x1, [sp, #336]
    5c04:	add	x0, x1, x0
    5c08:	ldrb	w0, [x0, #2]
    5c0c:	mov	w1, w0
    5c10:	ldr	x0, [sp, #344]
    5c14:	bl	2960 <BIT_skipBits>
    5c18:	ldr	x0, [sp, #320]
    5c1c:	lsl	x0, x0, #2
    5c20:	ldr	x1, [sp, #336]
    5c24:	add	x0, x1, x0
    5c28:	ldrb	w0, [x0, #3]
    5c2c:	mov	w0, w0
    5c30:	ldr	x1, [sp, #440]
    5c34:	add	x0, x1, x0
    5c38:	str	x0, [sp, #440]
    5c3c:	bl	232c <MEM_64bits>
    5c40:	cmp	w0, #0x0
    5c44:	b.eq	5cdc <HUF_decompress1X2_usingDTable_internal+0x2c0>  // b.none
    5c48:	ldr	x0, [sp, #440]
    5c4c:	str	x0, [sp, #312]
    5c50:	ldr	x0, [sp, #432]
    5c54:	str	x0, [sp, #304]
    5c58:	ldr	x0, [sp, #416]
    5c5c:	str	x0, [sp, #296]
    5c60:	ldr	w0, [sp, #412]
    5c64:	str	w0, [sp, #292]
    5c68:	ldr	w1, [sp, #292]
    5c6c:	ldr	x0, [sp, #304]
    5c70:	bl	290c <BIT_lookBitsFast>
    5c74:	str	x0, [sp, #280]
    5c78:	ldr	x0, [sp, #280]
    5c7c:	lsl	x0, x0, #2
    5c80:	ldr	x1, [sp, #296]
    5c84:	add	x0, x1, x0
    5c88:	mov	x2, #0x2                   	// #2
    5c8c:	mov	x1, x0
    5c90:	ldr	x0, [sp, #312]
    5c94:	bl	22f8 <grub_memcpy>
    5c98:	ldr	x0, [sp, #280]
    5c9c:	lsl	x0, x0, #2
    5ca0:	ldr	x1, [sp, #296]
    5ca4:	add	x0, x1, x0
    5ca8:	ldrb	w0, [x0, #2]
    5cac:	mov	w1, w0
    5cb0:	ldr	x0, [sp, #304]
    5cb4:	bl	2960 <BIT_skipBits>
    5cb8:	ldr	x0, [sp, #280]
    5cbc:	lsl	x0, x0, #2
    5cc0:	ldr	x1, [sp, #296]
    5cc4:	add	x0, x1, x0
    5cc8:	ldrb	w0, [x0, #3]
    5ccc:	mov	w0, w0
    5cd0:	ldr	x1, [sp, #440]
    5cd4:	add	x0, x1, x0
    5cd8:	str	x0, [sp, #440]
    5cdc:	ldr	x0, [sp, #440]
    5ce0:	str	x0, [sp, #272]
    5ce4:	ldr	x0, [sp, #432]
    5ce8:	str	x0, [sp, #264]
    5cec:	ldr	x0, [sp, #416]
    5cf0:	str	x0, [sp, #256]
    5cf4:	ldr	w0, [sp, #412]
    5cf8:	str	w0, [sp, #252]
    5cfc:	ldr	w1, [sp, #252]
    5d00:	ldr	x0, [sp, #264]
    5d04:	bl	290c <BIT_lookBitsFast>
    5d08:	str	x0, [sp, #240]
    5d0c:	ldr	x0, [sp, #240]
    5d10:	lsl	x0, x0, #2
    5d14:	ldr	x1, [sp, #256]
    5d18:	add	x0, x1, x0
    5d1c:	mov	x2, #0x2                   	// #2
    5d20:	mov	x1, x0
    5d24:	ldr	x0, [sp, #272]
    5d28:	bl	22f8 <grub_memcpy>
    5d2c:	ldr	x0, [sp, #240]
    5d30:	lsl	x0, x0, #2
    5d34:	ldr	x1, [sp, #256]
    5d38:	add	x0, x1, x0
    5d3c:	ldrb	w0, [x0, #2]
    5d40:	mov	w1, w0
    5d44:	ldr	x0, [sp, #264]
    5d48:	bl	2960 <BIT_skipBits>
    5d4c:	ldr	x0, [sp, #240]
    5d50:	lsl	x0, x0, #2
    5d54:	ldr	x1, [sp, #256]
    5d58:	add	x0, x1, x0
    5d5c:	ldrb	w0, [x0, #3]
    5d60:	mov	w0, w0
    5d64:	ldr	x1, [sp, #440]
    5d68:	add	x0, x1, x0
    5d6c:	str	x0, [sp, #440]
    5d70:	ldr	x0, [sp, #432]
    5d74:	bl	2990 <BIT_reloadDStream>
    5d78:	cmp	w0, #0x0
    5d7c:	cset	w0, eq  // eq = none
    5d80:	and	w1, w0, #0xff
    5d84:	ldr	x0, [sp, #424]
    5d88:	sub	x0, x0, #0x7
    5d8c:	ldr	x2, [sp, #440]
    5d90:	cmp	x2, x0
    5d94:	cset	w0, cc  // cc = lo, ul, last
    5d98:	and	w0, w0, #0xff
    5d9c:	and	w0, w1, w0
    5da0:	and	w0, w0, #0xff
    5da4:	cmp	w0, #0x0
    5da8:	b.ne	5b04 <HUF_decompress1X2_usingDTable_internal+0xe8>  // b.any
    5dac:	b	5e44 <HUF_decompress1X2_usingDTable_internal+0x428>
    5db0:	ldr	x0, [sp, #440]
    5db4:	str	x0, [sp, #232]
    5db8:	ldr	x0, [sp, #432]
    5dbc:	str	x0, [sp, #224]
    5dc0:	ldr	x0, [sp, #416]
    5dc4:	str	x0, [sp, #216]
    5dc8:	ldr	w0, [sp, #412]
    5dcc:	str	w0, [sp, #212]
    5dd0:	ldr	w1, [sp, #212]
    5dd4:	ldr	x0, [sp, #224]
    5dd8:	bl	290c <BIT_lookBitsFast>
    5ddc:	str	x0, [sp, #200]
    5de0:	ldr	x0, [sp, #200]
    5de4:	lsl	x0, x0, #2
    5de8:	ldr	x1, [sp, #216]
    5dec:	add	x0, x1, x0
    5df0:	mov	x2, #0x2                   	// #2
    5df4:	mov	x1, x0
    5df8:	ldr	x0, [sp, #232]
    5dfc:	bl	22f8 <grub_memcpy>
    5e00:	ldr	x0, [sp, #200]
    5e04:	lsl	x0, x0, #2
    5e08:	ldr	x1, [sp, #216]
    5e0c:	add	x0, x1, x0
    5e10:	ldrb	w0, [x0, #2]
    5e14:	mov	w1, w0
    5e18:	ldr	x0, [sp, #224]
    5e1c:	bl	2960 <BIT_skipBits>
    5e20:	ldr	x0, [sp, #200]
    5e24:	lsl	x0, x0, #2
    5e28:	ldr	x1, [sp, #216]
    5e2c:	add	x0, x1, x0
    5e30:	ldrb	w0, [x0, #3]
    5e34:	mov	w0, w0
    5e38:	ldr	x1, [sp, #440]
    5e3c:	add	x0, x1, x0
    5e40:	str	x0, [sp, #440]
    5e44:	ldr	x0, [sp, #432]
    5e48:	bl	2990 <BIT_reloadDStream>
    5e4c:	cmp	w0, #0x0
    5e50:	cset	w0, eq  // eq = none
    5e54:	and	w1, w0, #0xff
    5e58:	ldr	x0, [sp, #424]
    5e5c:	sub	x0, x0, #0x2
    5e60:	ldr	x2, [sp, #440]
    5e64:	cmp	x2, x0
    5e68:	cset	w0, ls  // ls = plast
    5e6c:	and	w0, w0, #0xff
    5e70:	and	w0, w1, w0
    5e74:	and	w0, w0, #0xff
    5e78:	cmp	w0, #0x0
    5e7c:	b.ne	5db0 <HUF_decompress1X2_usingDTable_internal+0x394>  // b.any
    5e80:	b	5f18 <HUF_decompress1X2_usingDTable_internal+0x4fc>
    5e84:	ldr	x0, [sp, #440]
    5e88:	str	x0, [sp, #192]
    5e8c:	ldr	x0, [sp, #432]
    5e90:	str	x0, [sp, #184]
    5e94:	ldr	x0, [sp, #416]
    5e98:	str	x0, [sp, #176]
    5e9c:	ldr	w0, [sp, #412]
    5ea0:	str	w0, [sp, #172]
    5ea4:	ldr	w1, [sp, #172]
    5ea8:	ldr	x0, [sp, #184]
    5eac:	bl	290c <BIT_lookBitsFast>
    5eb0:	str	x0, [sp, #160]
    5eb4:	ldr	x0, [sp, #160]
    5eb8:	lsl	x0, x0, #2
    5ebc:	ldr	x1, [sp, #176]
    5ec0:	add	x0, x1, x0
    5ec4:	mov	x2, #0x2                   	// #2
    5ec8:	mov	x1, x0
    5ecc:	ldr	x0, [sp, #192]
    5ed0:	bl	22f8 <grub_memcpy>
    5ed4:	ldr	x0, [sp, #160]
    5ed8:	lsl	x0, x0, #2
    5edc:	ldr	x1, [sp, #176]
    5ee0:	add	x0, x1, x0
    5ee4:	ldrb	w0, [x0, #2]
    5ee8:	mov	w1, w0
    5eec:	ldr	x0, [sp, #184]
    5ef0:	bl	2960 <BIT_skipBits>
    5ef4:	ldr	x0, [sp, #160]
    5ef8:	lsl	x0, x0, #2
    5efc:	ldr	x1, [sp, #176]
    5f00:	add	x0, x1, x0
    5f04:	ldrb	w0, [x0, #3]
    5f08:	mov	w0, w0
    5f0c:	ldr	x1, [sp, #440]
    5f10:	add	x0, x1, x0
    5f14:	str	x0, [sp, #440]
    5f18:	ldr	x0, [sp, #424]
    5f1c:	sub	x0, x0, #0x2
    5f20:	ldr	x1, [sp, #440]
    5f24:	cmp	x1, x0
    5f28:	b.ls	5e84 <HUF_decompress1X2_usingDTable_internal+0x468>  // b.plast
    5f2c:	ldr	x1, [sp, #424]
    5f30:	ldr	x0, [sp, #440]
    5f34:	cmp	x1, x0
    5f38:	b.ls	602c <HUF_decompress1X2_usingDTable_internal+0x610>  // b.plast
    5f3c:	ldr	x0, [sp, #440]
    5f40:	str	x0, [sp, #152]
    5f44:	ldr	x0, [sp, #432]
    5f48:	str	x0, [sp, #144]
    5f4c:	ldr	x0, [sp, #416]
    5f50:	str	x0, [sp, #136]
    5f54:	ldr	w0, [sp, #412]
    5f58:	str	w0, [sp, #132]
    5f5c:	ldr	w1, [sp, #132]
    5f60:	ldr	x0, [sp, #144]
    5f64:	bl	290c <BIT_lookBitsFast>
    5f68:	str	x0, [sp, #120]
    5f6c:	ldr	x0, [sp, #120]
    5f70:	lsl	x0, x0, #2
    5f74:	ldr	x1, [sp, #136]
    5f78:	add	x0, x1, x0
    5f7c:	mov	x2, #0x1                   	// #1
    5f80:	mov	x1, x0
    5f84:	ldr	x0, [sp, #152]
    5f88:	bl	22f8 <grub_memcpy>
    5f8c:	ldr	x0, [sp, #120]
    5f90:	lsl	x0, x0, #2
    5f94:	ldr	x1, [sp, #136]
    5f98:	add	x0, x1, x0
    5f9c:	ldrb	w0, [x0, #3]
    5fa0:	cmp	w0, #0x1
    5fa4:	b.ne	5fcc <HUF_decompress1X2_usingDTable_internal+0x5b0>  // b.any
    5fa8:	ldr	x0, [sp, #120]
    5fac:	lsl	x0, x0, #2
    5fb0:	ldr	x1, [sp, #136]
    5fb4:	add	x0, x1, x0
    5fb8:	ldrb	w0, [x0, #2]
    5fbc:	mov	w1, w0
    5fc0:	ldr	x0, [sp, #144]
    5fc4:	bl	2960 <BIT_skipBits>
    5fc8:	b	6018 <HUF_decompress1X2_usingDTable_internal+0x5fc>
    5fcc:	ldr	x0, [sp, #144]
    5fd0:	ldr	w0, [x0, #8]
    5fd4:	cmp	w0, #0x3f
    5fd8:	b.hi	6018 <HUF_decompress1X2_usingDTable_internal+0x5fc>  // b.pmore
    5fdc:	ldr	x0, [sp, #120]
    5fe0:	lsl	x0, x0, #2
    5fe4:	ldr	x1, [sp, #136]
    5fe8:	add	x0, x1, x0
    5fec:	ldrb	w0, [x0, #2]
    5ff0:	mov	w1, w0
    5ff4:	ldr	x0, [sp, #144]
    5ff8:	bl	2960 <BIT_skipBits>
    5ffc:	ldr	x0, [sp, #144]
    6000:	ldr	w0, [x0, #8]
    6004:	cmp	w0, #0x40
    6008:	b.ls	6018 <HUF_decompress1X2_usingDTable_internal+0x5fc>  // b.plast
    600c:	ldr	x0, [sp, #144]
    6010:	mov	w1, #0x40                  	// #64
    6014:	str	w1, [x0, #8]
    6018:	mov	w0, #0x1                   	// #1
    601c:	mov	w0, w0
    6020:	ldr	x1, [sp, #440]
    6024:	add	x0, x1, x0
    6028:	str	x0, [sp, #440]
    602c:	add	x0, sp, #0x48
    6030:	bl	2b14 <BIT_endOfDStream>
    6034:	cmp	w0, #0x0
    6038:	b.ne	6044 <HUF_decompress1X2_usingDTable_internal+0x628>  // b.any
    603c:	mov	x0, #0xffffffffffffffec    	// #-20
    6040:	b	6048 <HUF_decompress1X2_usingDTable_internal+0x62c>
    6044:	ldr	x0, [sp, #512]
    6048:	ldp	x29, x30, [sp]
    604c:	add	sp, sp, #0x210
    6050:	ret

0000000000006054 <HUF_decompress4X2_usingDTable_internal>:
    6054:	sub	sp, sp, #0x9a0
    6058:	stp	x29, x30, [sp]
    605c:	mov	x29, sp
    6060:	str	x19, [sp, #16]
    6064:	str	x0, [sp, #72]
    6068:	str	x1, [sp, #64]
    606c:	str	x2, [sp, #56]
    6070:	str	x3, [sp, #48]
    6074:	str	x4, [sp, #40]
    6078:	str	w5, [sp, #36]
    607c:	ldr	x0, [sp, #72]
    6080:	str	x0, [sp, #2456]
    6084:	ldr	x0, [sp, #64]
    6088:	str	x0, [sp, #2448]
    608c:	ldr	x0, [sp, #56]
    6090:	str	x0, [sp, #2440]
    6094:	ldr	x0, [sp, #48]
    6098:	str	x0, [sp, #2432]
    609c:	ldr	x0, [sp, #40]
    60a0:	str	x0, [sp, #2424]
    60a4:	ldr	x0, [sp, #2432]
    60a8:	cmp	x0, #0x9
    60ac:	b.hi	60b8 <HUF_decompress4X2_usingDTable_internal+0x64>  // b.pmore
    60b0:	mov	x0, #0xffffffffffffffec    	// #-20
    60b4:	b	8324 <HUF_decompress4X2_usingDTable_internal+0x22d0>
    60b8:	ldr	x0, [sp, #2440]
    60bc:	str	x0, [sp, #2416]
    60c0:	ldr	x0, [sp, #2456]
    60c4:	str	x0, [sp, #2408]
    60c8:	ldr	x1, [sp, #2408]
    60cc:	ldr	x0, [sp, #2448]
    60d0:	add	x0, x1, x0
    60d4:	str	x0, [sp, #2400]
    60d8:	ldr	x0, [sp, #2424]
    60dc:	add	x0, x0, #0x4
    60e0:	str	x0, [sp, #2392]
    60e4:	ldr	x0, [sp, #2392]
    60e8:	str	x0, [sp, #2384]
    60ec:	ldr	x0, [sp, #2416]
    60f0:	bl	23e8 <MEM_readLE16>
    60f4:	and	w0, w0, #0xffff
    60f8:	and	x0, x0, #0xffff
    60fc:	str	x0, [sp, #2376]
    6100:	ldr	x0, [sp, #2416]
    6104:	add	x0, x0, #0x2
    6108:	bl	23e8 <MEM_readLE16>
    610c:	and	w0, w0, #0xffff
    6110:	and	x0, x0, #0xffff
    6114:	str	x0, [sp, #2368]
    6118:	ldr	x0, [sp, #2416]
    611c:	add	x0, x0, #0x4
    6120:	bl	23e8 <MEM_readLE16>
    6124:	and	w0, w0, #0xffff
    6128:	and	x0, x0, #0xffff
    612c:	str	x0, [sp, #2360]
    6130:	ldr	x1, [sp, #2376]
    6134:	ldr	x0, [sp, #2368]
    6138:	add	x1, x1, x0
    613c:	ldr	x0, [sp, #2360]
    6140:	add	x0, x1, x0
    6144:	ldr	x1, [sp, #2432]
    6148:	sub	x0, x1, x0
    614c:	sub	x0, x0, #0x6
    6150:	str	x0, [sp, #2352]
    6154:	ldr	x0, [sp, #2416]
    6158:	add	x0, x0, #0x6
    615c:	str	x0, [sp, #2344]
    6160:	ldr	x1, [sp, #2344]
    6164:	ldr	x0, [sp, #2376]
    6168:	add	x0, x1, x0
    616c:	str	x0, [sp, #2336]
    6170:	ldr	x1, [sp, #2336]
    6174:	ldr	x0, [sp, #2368]
    6178:	add	x0, x1, x0
    617c:	str	x0, [sp, #2328]
    6180:	ldr	x1, [sp, #2328]
    6184:	ldr	x0, [sp, #2360]
    6188:	add	x0, x1, x0
    618c:	str	x0, [sp, #2320]
    6190:	ldr	x0, [sp, #2448]
    6194:	add	x0, x0, #0x3
    6198:	lsr	x0, x0, #2
    619c:	str	x0, [sp, #2312]
    61a0:	ldr	x1, [sp, #2408]
    61a4:	ldr	x0, [sp, #2312]
    61a8:	add	x0, x1, x0
    61ac:	str	x0, [sp, #2304]
    61b0:	ldr	x1, [sp, #2304]
    61b4:	ldr	x0, [sp, #2312]
    61b8:	add	x0, x1, x0
    61bc:	str	x0, [sp, #2296]
    61c0:	ldr	x1, [sp, #2296]
    61c4:	ldr	x0, [sp, #2312]
    61c8:	add	x0, x1, x0
    61cc:	str	x0, [sp, #2288]
    61d0:	ldr	x0, [sp, #2408]
    61d4:	str	x0, [sp, #2280]
    61d8:	ldr	x0, [sp, #2304]
    61dc:	str	x0, [sp, #2272]
    61e0:	ldr	x0, [sp, #2296]
    61e4:	str	x0, [sp, #2264]
    61e8:	ldr	x0, [sp, #2288]
    61ec:	str	x0, [sp, #2256]
    61f0:	ldr	x0, [sp, #2424]
    61f4:	bl	2b58 <HUF_getDTableDesc>
    61f8:	str	w0, [sp, #248]
    61fc:	ldrb	w0, [sp, #250]
    6200:	str	w0, [sp, #2252]
    6204:	ldr	x1, [sp, #2432]
    6208:	ldr	x0, [sp, #2352]
    620c:	cmp	x1, x0
    6210:	b.cs	621c <HUF_decompress4X2_usingDTable_internal+0x1c8>  // b.hs, b.nlast
    6214:	mov	x0, #0xffffffffffffffec    	// #-20
    6218:	b	8324 <HUF_decompress4X2_usingDTable_internal+0x22d0>
    621c:	add	x0, sp, #0x58
    6220:	ldr	x2, [sp, #2376]
    6224:	ldr	x1, [sp, #2344]
    6228:	bl	25f8 <BIT_initDStream>
    622c:	str	x0, [sp, #2240]
    6230:	ldr	x0, [sp, #2240]
    6234:	bl	2564 <ERR_isError>
    6238:	cmp	w0, #0x0
    623c:	b.eq	6248 <HUF_decompress4X2_usingDTable_internal+0x1f4>  // b.none
    6240:	ldr	x0, [sp, #2240]
    6244:	b	8324 <HUF_decompress4X2_usingDTable_internal+0x22d0>
    6248:	add	x0, sp, #0x80
    624c:	ldr	x2, [sp, #2368]
    6250:	ldr	x1, [sp, #2336]
    6254:	bl	25f8 <BIT_initDStream>
    6258:	str	x0, [sp, #2232]
    625c:	ldr	x0, [sp, #2232]
    6260:	bl	2564 <ERR_isError>
    6264:	cmp	w0, #0x0
    6268:	b.eq	6274 <HUF_decompress4X2_usingDTable_internal+0x220>  // b.none
    626c:	ldr	x0, [sp, #2232]
    6270:	b	8324 <HUF_decompress4X2_usingDTable_internal+0x22d0>
    6274:	add	x0, sp, #0xa8
    6278:	ldr	x2, [sp, #2360]
    627c:	ldr	x1, [sp, #2328]
    6280:	bl	25f8 <BIT_initDStream>
    6284:	str	x0, [sp, #2224]
    6288:	ldr	x0, [sp, #2224]
    628c:	bl	2564 <ERR_isError>
    6290:	cmp	w0, #0x0
    6294:	b.eq	62a0 <HUF_decompress4X2_usingDTable_internal+0x24c>  // b.none
    6298:	ldr	x0, [sp, #2224]
    629c:	b	8324 <HUF_decompress4X2_usingDTable_internal+0x22d0>
    62a0:	add	x0, sp, #0xd0
    62a4:	ldr	x2, [sp, #2352]
    62a8:	ldr	x1, [sp, #2320]
    62ac:	bl	25f8 <BIT_initDStream>
    62b0:	str	x0, [sp, #2216]
    62b4:	ldr	x0, [sp, #2216]
    62b8:	bl	2564 <ERR_isError>
    62bc:	cmp	w0, #0x0
    62c0:	b.eq	62cc <HUF_decompress4X2_usingDTable_internal+0x278>  // b.none
    62c4:	ldr	x0, [sp, #2216]
    62c8:	b	8324 <HUF_decompress4X2_usingDTable_internal+0x22d0>
    62cc:	add	x0, sp, #0x58
    62d0:	bl	2990 <BIT_reloadDStream>
    62d4:	mov	w19, w0
    62d8:	add	x0, sp, #0x80
    62dc:	bl	2990 <BIT_reloadDStream>
    62e0:	orr	w19, w19, w0
    62e4:	add	x0, sp, #0xa8
    62e8:	bl	2990 <BIT_reloadDStream>
    62ec:	orr	w19, w19, w0
    62f0:	add	x0, sp, #0xd0
    62f4:	bl	2990 <BIT_reloadDStream>
    62f8:	orr	w0, w19, w0
    62fc:	str	w0, [sp, #2212]
    6300:	b	6ce8 <HUF_decompress4X2_usingDTable_internal+0xc94>
    6304:	bl	232c <MEM_64bits>
    6308:	cmp	w0, #0x0
    630c:	b.eq	63a4 <HUF_decompress4X2_usingDTable_internal+0x350>  // b.none
    6310:	ldr	x0, [sp, #2280]
    6314:	str	x0, [sp, #2200]
    6318:	add	x0, sp, #0x58
    631c:	str	x0, [sp, #2192]
    6320:	ldr	x0, [sp, #2384]
    6324:	str	x0, [sp, #2184]
    6328:	ldr	w0, [sp, #2252]
    632c:	str	w0, [sp, #2180]
    6330:	ldr	w1, [sp, #2180]
    6334:	ldr	x0, [sp, #2192]
    6338:	bl	290c <BIT_lookBitsFast>
    633c:	str	x0, [sp, #2168]
    6340:	ldr	x0, [sp, #2168]
    6344:	lsl	x0, x0, #2
    6348:	ldr	x1, [sp, #2184]
    634c:	add	x0, x1, x0
    6350:	mov	x2, #0x2                   	// #2
    6354:	mov	x1, x0
    6358:	ldr	x0, [sp, #2200]
    635c:	bl	22f8 <grub_memcpy>
    6360:	ldr	x0, [sp, #2168]
    6364:	lsl	x0, x0, #2
    6368:	ldr	x1, [sp, #2184]
    636c:	add	x0, x1, x0
    6370:	ldrb	w0, [x0, #2]
    6374:	mov	w1, w0
    6378:	ldr	x0, [sp, #2192]
    637c:	bl	2960 <BIT_skipBits>
    6380:	ldr	x0, [sp, #2168]
    6384:	lsl	x0, x0, #2
    6388:	ldr	x1, [sp, #2184]
    638c:	add	x0, x1, x0
    6390:	ldrb	w0, [x0, #3]
    6394:	mov	w0, w0
    6398:	ldr	x1, [sp, #2280]
    639c:	add	x0, x1, x0
    63a0:	str	x0, [sp, #2280]
    63a4:	bl	232c <MEM_64bits>
    63a8:	cmp	w0, #0x0
    63ac:	b.eq	6444 <HUF_decompress4X2_usingDTable_internal+0x3f0>  // b.none
    63b0:	ldr	x0, [sp, #2272]
    63b4:	str	x0, [sp, #2160]
    63b8:	add	x0, sp, #0x80
    63bc:	str	x0, [sp, #2152]
    63c0:	ldr	x0, [sp, #2384]
    63c4:	str	x0, [sp, #2144]
    63c8:	ldr	w0, [sp, #2252]
    63cc:	str	w0, [sp, #2140]
    63d0:	ldr	w1, [sp, #2140]
    63d4:	ldr	x0, [sp, #2152]
    63d8:	bl	290c <BIT_lookBitsFast>
    63dc:	str	x0, [sp, #2128]
    63e0:	ldr	x0, [sp, #2128]
    63e4:	lsl	x0, x0, #2
    63e8:	ldr	x1, [sp, #2144]
    63ec:	add	x0, x1, x0
    63f0:	mov	x2, #0x2                   	// #2
    63f4:	mov	x1, x0
    63f8:	ldr	x0, [sp, #2160]
    63fc:	bl	22f8 <grub_memcpy>
    6400:	ldr	x0, [sp, #2128]
    6404:	lsl	x0, x0, #2
    6408:	ldr	x1, [sp, #2144]
    640c:	add	x0, x1, x0
    6410:	ldrb	w0, [x0, #2]
    6414:	mov	w1, w0
    6418:	ldr	x0, [sp, #2152]
    641c:	bl	2960 <BIT_skipBits>
    6420:	ldr	x0, [sp, #2128]
    6424:	lsl	x0, x0, #2
    6428:	ldr	x1, [sp, #2144]
    642c:	add	x0, x1, x0
    6430:	ldrb	w0, [x0, #3]
    6434:	mov	w0, w0
    6438:	ldr	x1, [sp, #2272]
    643c:	add	x0, x1, x0
    6440:	str	x0, [sp, #2272]
    6444:	bl	232c <MEM_64bits>
    6448:	cmp	w0, #0x0
    644c:	b.eq	64e4 <HUF_decompress4X2_usingDTable_internal+0x490>  // b.none
    6450:	ldr	x0, [sp, #2264]
    6454:	str	x0, [sp, #2120]
    6458:	add	x0, sp, #0xa8
    645c:	str	x0, [sp, #2112]
    6460:	ldr	x0, [sp, #2384]
    6464:	str	x0, [sp, #2104]
    6468:	ldr	w0, [sp, #2252]
    646c:	str	w0, [sp, #2100]
    6470:	ldr	w1, [sp, #2100]
    6474:	ldr	x0, [sp, #2112]
    6478:	bl	290c <BIT_lookBitsFast>
    647c:	str	x0, [sp, #2088]
    6480:	ldr	x0, [sp, #2088]
    6484:	lsl	x0, x0, #2
    6488:	ldr	x1, [sp, #2104]
    648c:	add	x0, x1, x0
    6490:	mov	x2, #0x2                   	// #2
    6494:	mov	x1, x0
    6498:	ldr	x0, [sp, #2120]
    649c:	bl	22f8 <grub_memcpy>
    64a0:	ldr	x0, [sp, #2088]
    64a4:	lsl	x0, x0, #2
    64a8:	ldr	x1, [sp, #2104]
    64ac:	add	x0, x1, x0
    64b0:	ldrb	w0, [x0, #2]
    64b4:	mov	w1, w0
    64b8:	ldr	x0, [sp, #2112]
    64bc:	bl	2960 <BIT_skipBits>
    64c0:	ldr	x0, [sp, #2088]
    64c4:	lsl	x0, x0, #2
    64c8:	ldr	x1, [sp, #2104]
    64cc:	add	x0, x1, x0
    64d0:	ldrb	w0, [x0, #3]
    64d4:	mov	w0, w0
    64d8:	ldr	x1, [sp, #2264]
    64dc:	add	x0, x1, x0
    64e0:	str	x0, [sp, #2264]
    64e4:	bl	232c <MEM_64bits>
    64e8:	cmp	w0, #0x0
    64ec:	b.eq	6584 <HUF_decompress4X2_usingDTable_internal+0x530>  // b.none
    64f0:	ldr	x0, [sp, #2256]
    64f4:	str	x0, [sp, #2080]
    64f8:	add	x0, sp, #0xd0
    64fc:	str	x0, [sp, #2072]
    6500:	ldr	x0, [sp, #2384]
    6504:	str	x0, [sp, #2064]
    6508:	ldr	w0, [sp, #2252]
    650c:	str	w0, [sp, #2060]
    6510:	ldr	w1, [sp, #2060]
    6514:	ldr	x0, [sp, #2072]
    6518:	bl	290c <BIT_lookBitsFast>
    651c:	str	x0, [sp, #2048]
    6520:	ldr	x0, [sp, #2048]
    6524:	lsl	x0, x0, #2
    6528:	ldr	x1, [sp, #2064]
    652c:	add	x0, x1, x0
    6530:	mov	x2, #0x2                   	// #2
    6534:	mov	x1, x0
    6538:	ldr	x0, [sp, #2080]
    653c:	bl	22f8 <grub_memcpy>
    6540:	ldr	x0, [sp, #2048]
    6544:	lsl	x0, x0, #2
    6548:	ldr	x1, [sp, #2064]
    654c:	add	x0, x1, x0
    6550:	ldrb	w0, [x0, #2]
    6554:	mov	w1, w0
    6558:	ldr	x0, [sp, #2072]
    655c:	bl	2960 <BIT_skipBits>
    6560:	ldr	x0, [sp, #2048]
    6564:	lsl	x0, x0, #2
    6568:	ldr	x1, [sp, #2064]
    656c:	add	x0, x1, x0
    6570:	ldrb	w0, [x0, #3]
    6574:	mov	w0, w0
    6578:	ldr	x1, [sp, #2256]
    657c:	add	x0, x1, x0
    6580:	str	x0, [sp, #2256]
    6584:	bl	232c <MEM_64bits>
    6588:	ldr	x0, [sp, #2280]
    658c:	str	x0, [sp, #2040]
    6590:	add	x0, sp, #0x58
    6594:	str	x0, [sp, #2032]
    6598:	ldr	x0, [sp, #2384]
    659c:	str	x0, [sp, #2024]
    65a0:	ldr	w0, [sp, #2252]
    65a4:	str	w0, [sp, #2020]
    65a8:	ldr	w1, [sp, #2020]
    65ac:	ldr	x0, [sp, #2032]
    65b0:	bl	290c <BIT_lookBitsFast>
    65b4:	str	x0, [sp, #2008]
    65b8:	ldr	x0, [sp, #2008]
    65bc:	lsl	x0, x0, #2
    65c0:	ldr	x1, [sp, #2024]
    65c4:	add	x0, x1, x0
    65c8:	mov	x2, #0x2                   	// #2
    65cc:	mov	x1, x0
    65d0:	ldr	x0, [sp, #2040]
    65d4:	bl	22f8 <grub_memcpy>
    65d8:	ldr	x0, [sp, #2008]
    65dc:	lsl	x0, x0, #2
    65e0:	ldr	x1, [sp, #2024]
    65e4:	add	x0, x1, x0
    65e8:	ldrb	w0, [x0, #2]
    65ec:	mov	w1, w0
    65f0:	ldr	x0, [sp, #2032]
    65f4:	bl	2960 <BIT_skipBits>
    65f8:	ldr	x0, [sp, #2008]
    65fc:	lsl	x0, x0, #2
    6600:	ldr	x1, [sp, #2024]
    6604:	add	x0, x1, x0
    6608:	ldrb	w0, [x0, #3]
    660c:	mov	w0, w0
    6610:	ldr	x1, [sp, #2280]
    6614:	add	x0, x1, x0
    6618:	str	x0, [sp, #2280]
    661c:	bl	232c <MEM_64bits>
    6620:	ldr	x0, [sp, #2272]
    6624:	str	x0, [sp, #2000]
    6628:	add	x0, sp, #0x80
    662c:	str	x0, [sp, #1992]
    6630:	ldr	x0, [sp, #2384]
    6634:	str	x0, [sp, #1984]
    6638:	ldr	w0, [sp, #2252]
    663c:	str	w0, [sp, #1980]
    6640:	ldr	w1, [sp, #1980]
    6644:	ldr	x0, [sp, #1992]
    6648:	bl	290c <BIT_lookBitsFast>
    664c:	str	x0, [sp, #1968]
    6650:	ldr	x0, [sp, #1968]
    6654:	lsl	x0, x0, #2
    6658:	ldr	x1, [sp, #1984]
    665c:	add	x0, x1, x0
    6660:	mov	x2, #0x2                   	// #2
    6664:	mov	x1, x0
    6668:	ldr	x0, [sp, #2000]
    666c:	bl	22f8 <grub_memcpy>
    6670:	ldr	x0, [sp, #1968]
    6674:	lsl	x0, x0, #2
    6678:	ldr	x1, [sp, #1984]
    667c:	add	x0, x1, x0
    6680:	ldrb	w0, [x0, #2]
    6684:	mov	w1, w0
    6688:	ldr	x0, [sp, #1992]
    668c:	bl	2960 <BIT_skipBits>
    6690:	ldr	x0, [sp, #1968]
    6694:	lsl	x0, x0, #2
    6698:	ldr	x1, [sp, #1984]
    669c:	add	x0, x1, x0
    66a0:	ldrb	w0, [x0, #3]
    66a4:	mov	w0, w0
    66a8:	ldr	x1, [sp, #2272]
    66ac:	add	x0, x1, x0
    66b0:	str	x0, [sp, #2272]
    66b4:	bl	232c <MEM_64bits>
    66b8:	ldr	x0, [sp, #2264]
    66bc:	str	x0, [sp, #1960]
    66c0:	add	x0, sp, #0xa8
    66c4:	str	x0, [sp, #1952]
    66c8:	ldr	x0, [sp, #2384]
    66cc:	str	x0, [sp, #1944]
    66d0:	ldr	w0, [sp, #2252]
    66d4:	str	w0, [sp, #1940]
    66d8:	ldr	w1, [sp, #1940]
    66dc:	ldr	x0, [sp, #1952]
    66e0:	bl	290c <BIT_lookBitsFast>
    66e4:	str	x0, [sp, #1928]
    66e8:	ldr	x0, [sp, #1928]
    66ec:	lsl	x0, x0, #2
    66f0:	ldr	x1, [sp, #1944]
    66f4:	add	x0, x1, x0
    66f8:	mov	x2, #0x2                   	// #2
    66fc:	mov	x1, x0
    6700:	ldr	x0, [sp, #1960]
    6704:	bl	22f8 <grub_memcpy>
    6708:	ldr	x0, [sp, #1928]
    670c:	lsl	x0, x0, #2
    6710:	ldr	x1, [sp, #1944]
    6714:	add	x0, x1, x0
    6718:	ldrb	w0, [x0, #2]
    671c:	mov	w1, w0
    6720:	ldr	x0, [sp, #1952]
    6724:	bl	2960 <BIT_skipBits>
    6728:	ldr	x0, [sp, #1928]
    672c:	lsl	x0, x0, #2
    6730:	ldr	x1, [sp, #1944]
    6734:	add	x0, x1, x0
    6738:	ldrb	w0, [x0, #3]
    673c:	mov	w0, w0
    6740:	ldr	x1, [sp, #2264]
    6744:	add	x0, x1, x0
    6748:	str	x0, [sp, #2264]
    674c:	bl	232c <MEM_64bits>
    6750:	ldr	x0, [sp, #2256]
    6754:	str	x0, [sp, #1920]
    6758:	add	x0, sp, #0xd0
    675c:	str	x0, [sp, #1912]
    6760:	ldr	x0, [sp, #2384]
    6764:	str	x0, [sp, #1904]
    6768:	ldr	w0, [sp, #2252]
    676c:	str	w0, [sp, #1900]
    6770:	ldr	w1, [sp, #1900]
    6774:	ldr	x0, [sp, #1912]
    6778:	bl	290c <BIT_lookBitsFast>
    677c:	str	x0, [sp, #1888]
    6780:	ldr	x0, [sp, #1888]
    6784:	lsl	x0, x0, #2
    6788:	ldr	x1, [sp, #1904]
    678c:	add	x0, x1, x0
    6790:	mov	x2, #0x2                   	// #2
    6794:	mov	x1, x0
    6798:	ldr	x0, [sp, #1920]
    679c:	bl	22f8 <grub_memcpy>
    67a0:	ldr	x0, [sp, #1888]
    67a4:	lsl	x0, x0, #2
    67a8:	ldr	x1, [sp, #1904]
    67ac:	add	x0, x1, x0
    67b0:	ldrb	w0, [x0, #2]
    67b4:	mov	w1, w0
    67b8:	ldr	x0, [sp, #1912]
    67bc:	bl	2960 <BIT_skipBits>
    67c0:	ldr	x0, [sp, #1888]
    67c4:	lsl	x0, x0, #2
    67c8:	ldr	x1, [sp, #1904]
    67cc:	add	x0, x1, x0
    67d0:	ldrb	w0, [x0, #3]
    67d4:	mov	w0, w0
    67d8:	ldr	x1, [sp, #2256]
    67dc:	add	x0, x1, x0
    67e0:	str	x0, [sp, #2256]
    67e4:	bl	232c <MEM_64bits>
    67e8:	cmp	w0, #0x0
    67ec:	b.eq	6884 <HUF_decompress4X2_usingDTable_internal+0x830>  // b.none
    67f0:	ldr	x0, [sp, #2280]
    67f4:	str	x0, [sp, #1880]
    67f8:	add	x0, sp, #0x58
    67fc:	str	x0, [sp, #1872]
    6800:	ldr	x0, [sp, #2384]
    6804:	str	x0, [sp, #1864]
    6808:	ldr	w0, [sp, #2252]
    680c:	str	w0, [sp, #1860]
    6810:	ldr	w1, [sp, #1860]
    6814:	ldr	x0, [sp, #1872]
    6818:	bl	290c <BIT_lookBitsFast>
    681c:	str	x0, [sp, #1848]
    6820:	ldr	x0, [sp, #1848]
    6824:	lsl	x0, x0, #2
    6828:	ldr	x1, [sp, #1864]
    682c:	add	x0, x1, x0
    6830:	mov	x2, #0x2                   	// #2
    6834:	mov	x1, x0
    6838:	ldr	x0, [sp, #1880]
    683c:	bl	22f8 <grub_memcpy>
    6840:	ldr	x0, [sp, #1848]
    6844:	lsl	x0, x0, #2
    6848:	ldr	x1, [sp, #1864]
    684c:	add	x0, x1, x0
    6850:	ldrb	w0, [x0, #2]
    6854:	mov	w1, w0
    6858:	ldr	x0, [sp, #1872]
    685c:	bl	2960 <BIT_skipBits>
    6860:	ldr	x0, [sp, #1848]
    6864:	lsl	x0, x0, #2
    6868:	ldr	x1, [sp, #1864]
    686c:	add	x0, x1, x0
    6870:	ldrb	w0, [x0, #3]
    6874:	mov	w0, w0
    6878:	ldr	x1, [sp, #2280]
    687c:	add	x0, x1, x0
    6880:	str	x0, [sp, #2280]
    6884:	bl	232c <MEM_64bits>
    6888:	cmp	w0, #0x0
    688c:	b.eq	6924 <HUF_decompress4X2_usingDTable_internal+0x8d0>  // b.none
    6890:	ldr	x0, [sp, #2272]
    6894:	str	x0, [sp, #1840]
    6898:	add	x0, sp, #0x80
    689c:	str	x0, [sp, #1832]
    68a0:	ldr	x0, [sp, #2384]
    68a4:	str	x0, [sp, #1824]
    68a8:	ldr	w0, [sp, #2252]
    68ac:	str	w0, [sp, #1820]
    68b0:	ldr	w1, [sp, #1820]
    68b4:	ldr	x0, [sp, #1832]
    68b8:	bl	290c <BIT_lookBitsFast>
    68bc:	str	x0, [sp, #1808]
    68c0:	ldr	x0, [sp, #1808]
    68c4:	lsl	x0, x0, #2
    68c8:	ldr	x1, [sp, #1824]
    68cc:	add	x0, x1, x0
    68d0:	mov	x2, #0x2                   	// #2
    68d4:	mov	x1, x0
    68d8:	ldr	x0, [sp, #1840]
    68dc:	bl	22f8 <grub_memcpy>
    68e0:	ldr	x0, [sp, #1808]
    68e4:	lsl	x0, x0, #2
    68e8:	ldr	x1, [sp, #1824]
    68ec:	add	x0, x1, x0
    68f0:	ldrb	w0, [x0, #2]
    68f4:	mov	w1, w0
    68f8:	ldr	x0, [sp, #1832]
    68fc:	bl	2960 <BIT_skipBits>
    6900:	ldr	x0, [sp, #1808]
    6904:	lsl	x0, x0, #2
    6908:	ldr	x1, [sp, #1824]
    690c:	add	x0, x1, x0
    6910:	ldrb	w0, [x0, #3]
    6914:	mov	w0, w0
    6918:	ldr	x1, [sp, #2272]
    691c:	add	x0, x1, x0
    6920:	str	x0, [sp, #2272]
    6924:	bl	232c <MEM_64bits>
    6928:	cmp	w0, #0x0
    692c:	b.eq	69c4 <HUF_decompress4X2_usingDTable_internal+0x970>  // b.none
    6930:	ldr	x0, [sp, #2264]
    6934:	str	x0, [sp, #1800]
    6938:	add	x0, sp, #0xa8
    693c:	str	x0, [sp, #1792]
    6940:	ldr	x0, [sp, #2384]
    6944:	str	x0, [sp, #1784]
    6948:	ldr	w0, [sp, #2252]
    694c:	str	w0, [sp, #1780]
    6950:	ldr	w1, [sp, #1780]
    6954:	ldr	x0, [sp, #1792]
    6958:	bl	290c <BIT_lookBitsFast>
    695c:	str	x0, [sp, #1768]
    6960:	ldr	x0, [sp, #1768]
    6964:	lsl	x0, x0, #2
    6968:	ldr	x1, [sp, #1784]
    696c:	add	x0, x1, x0
    6970:	mov	x2, #0x2                   	// #2
    6974:	mov	x1, x0
    6978:	ldr	x0, [sp, #1800]
    697c:	bl	22f8 <grub_memcpy>
    6980:	ldr	x0, [sp, #1768]
    6984:	lsl	x0, x0, #2
    6988:	ldr	x1, [sp, #1784]
    698c:	add	x0, x1, x0
    6990:	ldrb	w0, [x0, #2]
    6994:	mov	w1, w0
    6998:	ldr	x0, [sp, #1792]
    699c:	bl	2960 <BIT_skipBits>
    69a0:	ldr	x0, [sp, #1768]
    69a4:	lsl	x0, x0, #2
    69a8:	ldr	x1, [sp, #1784]
    69ac:	add	x0, x1, x0
    69b0:	ldrb	w0, [x0, #3]
    69b4:	mov	w0, w0
    69b8:	ldr	x1, [sp, #2264]
    69bc:	add	x0, x1, x0
    69c0:	str	x0, [sp, #2264]
    69c4:	bl	232c <MEM_64bits>
    69c8:	cmp	w0, #0x0
    69cc:	b.eq	6a64 <HUF_decompress4X2_usingDTable_internal+0xa10>  // b.none
    69d0:	ldr	x0, [sp, #2256]
    69d4:	str	x0, [sp, #1760]
    69d8:	add	x0, sp, #0xd0
    69dc:	str	x0, [sp, #1752]
    69e0:	ldr	x0, [sp, #2384]
    69e4:	str	x0, [sp, #1744]
    69e8:	ldr	w0, [sp, #2252]
    69ec:	str	w0, [sp, #1740]
    69f0:	ldr	w1, [sp, #1740]
    69f4:	ldr	x0, [sp, #1752]
    69f8:	bl	290c <BIT_lookBitsFast>
    69fc:	str	x0, [sp, #1728]
    6a00:	ldr	x0, [sp, #1728]
    6a04:	lsl	x0, x0, #2
    6a08:	ldr	x1, [sp, #1744]
    6a0c:	add	x0, x1, x0
    6a10:	mov	x2, #0x2                   	// #2
    6a14:	mov	x1, x0
    6a18:	ldr	x0, [sp, #1760]
    6a1c:	bl	22f8 <grub_memcpy>
    6a20:	ldr	x0, [sp, #1728]
    6a24:	lsl	x0, x0, #2
    6a28:	ldr	x1, [sp, #1744]
    6a2c:	add	x0, x1, x0
    6a30:	ldrb	w0, [x0, #2]
    6a34:	mov	w1, w0
    6a38:	ldr	x0, [sp, #1752]
    6a3c:	bl	2960 <BIT_skipBits>
    6a40:	ldr	x0, [sp, #1728]
    6a44:	lsl	x0, x0, #2
    6a48:	ldr	x1, [sp, #1744]
    6a4c:	add	x0, x1, x0
    6a50:	ldrb	w0, [x0, #3]
    6a54:	mov	w0, w0
    6a58:	ldr	x1, [sp, #2256]
    6a5c:	add	x0, x1, x0
    6a60:	str	x0, [sp, #2256]
    6a64:	ldr	x0, [sp, #2280]
    6a68:	str	x0, [sp, #1720]
    6a6c:	add	x0, sp, #0x58
    6a70:	str	x0, [sp, #1712]
    6a74:	ldr	x0, [sp, #2384]
    6a78:	str	x0, [sp, #1704]
    6a7c:	ldr	w0, [sp, #2252]
    6a80:	str	w0, [sp, #1700]
    6a84:	ldr	w1, [sp, #1700]
    6a88:	ldr	x0, [sp, #1712]
    6a8c:	bl	290c <BIT_lookBitsFast>
    6a90:	str	x0, [sp, #1688]
    6a94:	ldr	x0, [sp, #1688]
    6a98:	lsl	x0, x0, #2
    6a9c:	ldr	x1, [sp, #1704]
    6aa0:	add	x0, x1, x0
    6aa4:	mov	x2, #0x2                   	// #2
    6aa8:	mov	x1, x0
    6aac:	ldr	x0, [sp, #1720]
    6ab0:	bl	22f8 <grub_memcpy>
    6ab4:	ldr	x0, [sp, #1688]
    6ab8:	lsl	x0, x0, #2
    6abc:	ldr	x1, [sp, #1704]
    6ac0:	add	x0, x1, x0
    6ac4:	ldrb	w0, [x0, #2]
    6ac8:	mov	w1, w0
    6acc:	ldr	x0, [sp, #1712]
    6ad0:	bl	2960 <BIT_skipBits>
    6ad4:	ldr	x0, [sp, #1688]
    6ad8:	lsl	x0, x0, #2
    6adc:	ldr	x1, [sp, #1704]
    6ae0:	add	x0, x1, x0
    6ae4:	ldrb	w0, [x0, #3]
    6ae8:	mov	w0, w0
    6aec:	ldr	x1, [sp, #2280]
    6af0:	add	x0, x1, x0
    6af4:	str	x0, [sp, #2280]
    6af8:	ldr	x0, [sp, #2272]
    6afc:	str	x0, [sp, #1680]
    6b00:	add	x0, sp, #0x80
    6b04:	str	x0, [sp, #1672]
    6b08:	ldr	x0, [sp, #2384]
    6b0c:	str	x0, [sp, #1664]
    6b10:	ldr	w0, [sp, #2252]
    6b14:	str	w0, [sp, #1660]
    6b18:	ldr	w1, [sp, #1660]
    6b1c:	ldr	x0, [sp, #1672]
    6b20:	bl	290c <BIT_lookBitsFast>
    6b24:	str	x0, [sp, #1648]
    6b28:	ldr	x0, [sp, #1648]
    6b2c:	lsl	x0, x0, #2
    6b30:	ldr	x1, [sp, #1664]
    6b34:	add	x0, x1, x0
    6b38:	mov	x2, #0x2                   	// #2
    6b3c:	mov	x1, x0
    6b40:	ldr	x0, [sp, #1680]
    6b44:	bl	22f8 <grub_memcpy>
    6b48:	ldr	x0, [sp, #1648]
    6b4c:	lsl	x0, x0, #2
    6b50:	ldr	x1, [sp, #1664]
    6b54:	add	x0, x1, x0
    6b58:	ldrb	w0, [x0, #2]
    6b5c:	mov	w1, w0
    6b60:	ldr	x0, [sp, #1672]
    6b64:	bl	2960 <BIT_skipBits>
    6b68:	ldr	x0, [sp, #1648]
    6b6c:	lsl	x0, x0, #2
    6b70:	ldr	x1, [sp, #1664]
    6b74:	add	x0, x1, x0
    6b78:	ldrb	w0, [x0, #3]
    6b7c:	mov	w0, w0
    6b80:	ldr	x1, [sp, #2272]
    6b84:	add	x0, x1, x0
    6b88:	str	x0, [sp, #2272]
    6b8c:	ldr	x0, [sp, #2264]
    6b90:	str	x0, [sp, #1640]
    6b94:	add	x0, sp, #0xa8
    6b98:	str	x0, [sp, #1632]
    6b9c:	ldr	x0, [sp, #2384]
    6ba0:	str	x0, [sp, #1624]
    6ba4:	ldr	w0, [sp, #2252]
    6ba8:	str	w0, [sp, #1620]
    6bac:	ldr	w1, [sp, #1620]
    6bb0:	ldr	x0, [sp, #1632]
    6bb4:	bl	290c <BIT_lookBitsFast>
    6bb8:	str	x0, [sp, #1608]
    6bbc:	ldr	x0, [sp, #1608]
    6bc0:	lsl	x0, x0, #2
    6bc4:	ldr	x1, [sp, #1624]
    6bc8:	add	x0, x1, x0
    6bcc:	mov	x2, #0x2                   	// #2
    6bd0:	mov	x1, x0
    6bd4:	ldr	x0, [sp, #1640]
    6bd8:	bl	22f8 <grub_memcpy>
    6bdc:	ldr	x0, [sp, #1608]
    6be0:	lsl	x0, x0, #2
    6be4:	ldr	x1, [sp, #1624]
    6be8:	add	x0, x1, x0
    6bec:	ldrb	w0, [x0, #2]
    6bf0:	mov	w1, w0
    6bf4:	ldr	x0, [sp, #1632]
    6bf8:	bl	2960 <BIT_skipBits>
    6bfc:	ldr	x0, [sp, #1608]
    6c00:	lsl	x0, x0, #2
    6c04:	ldr	x1, [sp, #1624]
    6c08:	add	x0, x1, x0
    6c0c:	ldrb	w0, [x0, #3]
    6c10:	mov	w0, w0
    6c14:	ldr	x1, [sp, #2264]
    6c18:	add	x0, x1, x0
    6c1c:	str	x0, [sp, #2264]
    6c20:	ldr	x0, [sp, #2256]
    6c24:	str	x0, [sp, #1600]
    6c28:	add	x0, sp, #0xd0
    6c2c:	str	x0, [sp, #1592]
    6c30:	ldr	x0, [sp, #2384]
    6c34:	str	x0, [sp, #1584]
    6c38:	ldr	w0, [sp, #2252]
    6c3c:	str	w0, [sp, #1580]
    6c40:	ldr	w1, [sp, #1580]
    6c44:	ldr	x0, [sp, #1592]
    6c48:	bl	290c <BIT_lookBitsFast>
    6c4c:	str	x0, [sp, #1568]
    6c50:	ldr	x0, [sp, #1568]
    6c54:	lsl	x0, x0, #2
    6c58:	ldr	x1, [sp, #1584]
    6c5c:	add	x0, x1, x0
    6c60:	mov	x2, #0x2                   	// #2
    6c64:	mov	x1, x0
    6c68:	ldr	x0, [sp, #1600]
    6c6c:	bl	22f8 <grub_memcpy>
    6c70:	ldr	x0, [sp, #1568]
    6c74:	lsl	x0, x0, #2
    6c78:	ldr	x1, [sp, #1584]
    6c7c:	add	x0, x1, x0
    6c80:	ldrb	w0, [x0, #2]
    6c84:	mov	w1, w0
    6c88:	ldr	x0, [sp, #1592]
    6c8c:	bl	2960 <BIT_skipBits>
    6c90:	ldr	x0, [sp, #1568]
    6c94:	lsl	x0, x0, #2
    6c98:	ldr	x1, [sp, #1584]
    6c9c:	add	x0, x1, x0
    6ca0:	ldrb	w0, [x0, #3]
    6ca4:	mov	w0, w0
    6ca8:	ldr	x1, [sp, #2256]
    6cac:	add	x0, x1, x0
    6cb0:	str	x0, [sp, #2256]
    6cb4:	add	x0, sp, #0x58
    6cb8:	bl	2990 <BIT_reloadDStream>
    6cbc:	mov	w19, w0
    6cc0:	add	x0, sp, #0x80
    6cc4:	bl	2990 <BIT_reloadDStream>
    6cc8:	orr	w19, w19, w0
    6ccc:	add	x0, sp, #0xa8
    6cd0:	bl	2990 <BIT_reloadDStream>
    6cd4:	orr	w19, w19, w0
    6cd8:	add	x0, sp, #0xd0
    6cdc:	bl	2990 <BIT_reloadDStream>
    6ce0:	orr	w0, w19, w0
    6ce4:	str	w0, [sp, #2212]
    6ce8:	ldr	w0, [sp, #2212]
    6cec:	cmp	w0, #0x0
    6cf0:	cset	w0, eq  // eq = none
    6cf4:	and	w1, w0, #0xff
    6cf8:	ldr	x0, [sp, #2400]
    6cfc:	sub	x0, x0, #0x7
    6d00:	ldr	x2, [sp, #2256]
    6d04:	cmp	x2, x0
    6d08:	cset	w0, cc  // cc = lo, ul, last
    6d0c:	and	w0, w0, #0xff
    6d10:	and	w0, w1, w0
    6d14:	and	w0, w0, #0xff
    6d18:	cmp	w0, #0x0
    6d1c:	b.ne	6304 <HUF_decompress4X2_usingDTable_internal+0x2b0>  // b.any
    6d20:	ldr	x1, [sp, #2304]
    6d24:	ldr	x0, [sp, #2280]
    6d28:	cmp	x1, x0
    6d2c:	b.cs	6d38 <HUF_decompress4X2_usingDTable_internal+0xce4>  // b.hs, b.nlast
    6d30:	mov	x0, #0xffffffffffffffec    	// #-20
    6d34:	b	8324 <HUF_decompress4X2_usingDTable_internal+0x22d0>
    6d38:	ldr	x1, [sp, #2296]
    6d3c:	ldr	x0, [sp, #2272]
    6d40:	cmp	x1, x0
    6d44:	b.cs	6d50 <HUF_decompress4X2_usingDTable_internal+0xcfc>  // b.hs, b.nlast
    6d48:	mov	x0, #0xffffffffffffffec    	// #-20
    6d4c:	b	8324 <HUF_decompress4X2_usingDTable_internal+0x22d0>
    6d50:	ldr	x1, [sp, #2288]
    6d54:	ldr	x0, [sp, #2264]
    6d58:	cmp	x1, x0
    6d5c:	b.cs	6d68 <HUF_decompress4X2_usingDTable_internal+0xd14>  // b.hs, b.nlast
    6d60:	mov	x0, #0xffffffffffffffec    	// #-20
    6d64:	b	8324 <HUF_decompress4X2_usingDTable_internal+0x22d0>
    6d68:	ldr	x0, [sp, #2280]
    6d6c:	str	x0, [sp, #1560]
    6d70:	add	x0, sp, #0x58
    6d74:	str	x0, [sp, #1552]
    6d78:	ldr	x0, [sp, #2304]
    6d7c:	str	x0, [sp, #1544]
    6d80:	ldr	x0, [sp, #2384]
    6d84:	str	x0, [sp, #1536]
    6d88:	ldr	w0, [sp, #2252]
    6d8c:	str	w0, [sp, #1532]
    6d90:	ldr	x0, [sp, #1560]
    6d94:	str	x0, [sp, #1520]
    6d98:	b	7008 <HUF_decompress4X2_usingDTable_internal+0xfb4>
    6d9c:	bl	232c <MEM_64bits>
    6da0:	cmp	w0, #0x0
    6da4:	b.eq	6e3c <HUF_decompress4X2_usingDTable_internal+0xde8>  // b.none
    6da8:	ldr	x0, [sp, #1560]
    6dac:	str	x0, [sp, #1512]
    6db0:	ldr	x0, [sp, #1552]
    6db4:	str	x0, [sp, #1504]
    6db8:	ldr	x0, [sp, #1536]
    6dbc:	str	x0, [sp, #1496]
    6dc0:	ldr	w0, [sp, #1532]
    6dc4:	str	w0, [sp, #1492]
    6dc8:	ldr	w1, [sp, #1492]
    6dcc:	ldr	x0, [sp, #1504]
    6dd0:	bl	290c <BIT_lookBitsFast>
    6dd4:	str	x0, [sp, #1480]
    6dd8:	ldr	x0, [sp, #1480]
    6ddc:	lsl	x0, x0, #2
    6de0:	ldr	x1, [sp, #1496]
    6de4:	add	x0, x1, x0
    6de8:	mov	x2, #0x2                   	// #2
    6dec:	mov	x1, x0
    6df0:	ldr	x0, [sp, #1512]
    6df4:	bl	22f8 <grub_memcpy>
    6df8:	ldr	x0, [sp, #1480]
    6dfc:	lsl	x0, x0, #2
    6e00:	ldr	x1, [sp, #1496]
    6e04:	add	x0, x1, x0
    6e08:	ldrb	w0, [x0, #2]
    6e0c:	mov	w1, w0
    6e10:	ldr	x0, [sp, #1504]
    6e14:	bl	2960 <BIT_skipBits>
    6e18:	ldr	x0, [sp, #1480]
    6e1c:	lsl	x0, x0, #2
    6e20:	ldr	x1, [sp, #1496]
    6e24:	add	x0, x1, x0
    6e28:	ldrb	w0, [x0, #3]
    6e2c:	mov	w0, w0
    6e30:	ldr	x1, [sp, #1560]
    6e34:	add	x0, x1, x0
    6e38:	str	x0, [sp, #1560]
    6e3c:	bl	232c <MEM_64bits>
    6e40:	ldr	x0, [sp, #1560]
    6e44:	str	x0, [sp, #1472]
    6e48:	ldr	x0, [sp, #1552]
    6e4c:	str	x0, [sp, #1464]
    6e50:	ldr	x0, [sp, #1536]
    6e54:	str	x0, [sp, #1456]
    6e58:	ldr	w0, [sp, #1532]
    6e5c:	str	w0, [sp, #1452]
    6e60:	ldr	w1, [sp, #1452]
    6e64:	ldr	x0, [sp, #1464]
    6e68:	bl	290c <BIT_lookBitsFast>
    6e6c:	str	x0, [sp, #1440]
    6e70:	ldr	x0, [sp, #1440]
    6e74:	lsl	x0, x0, #2
    6e78:	ldr	x1, [sp, #1456]
    6e7c:	add	x0, x1, x0
    6e80:	mov	x2, #0x2                   	// #2
    6e84:	mov	x1, x0
    6e88:	ldr	x0, [sp, #1472]
    6e8c:	bl	22f8 <grub_memcpy>
    6e90:	ldr	x0, [sp, #1440]
    6e94:	lsl	x0, x0, #2
    6e98:	ldr	x1, [sp, #1456]
    6e9c:	add	x0, x1, x0
    6ea0:	ldrb	w0, [x0, #2]
    6ea4:	mov	w1, w0
    6ea8:	ldr	x0, [sp, #1464]
    6eac:	bl	2960 <BIT_skipBits>
    6eb0:	ldr	x0, [sp, #1440]
    6eb4:	lsl	x0, x0, #2
    6eb8:	ldr	x1, [sp, #1456]
    6ebc:	add	x0, x1, x0
    6ec0:	ldrb	w0, [x0, #3]
    6ec4:	mov	w0, w0
    6ec8:	ldr	x1, [sp, #1560]
    6ecc:	add	x0, x1, x0
    6ed0:	str	x0, [sp, #1560]
    6ed4:	bl	232c <MEM_64bits>
    6ed8:	cmp	w0, #0x0
    6edc:	b.eq	6f74 <HUF_decompress4X2_usingDTable_internal+0xf20>  // b.none
    6ee0:	ldr	x0, [sp, #1560]
    6ee4:	str	x0, [sp, #1432]
    6ee8:	ldr	x0, [sp, #1552]
    6eec:	str	x0, [sp, #1424]
    6ef0:	ldr	x0, [sp, #1536]
    6ef4:	str	x0, [sp, #1416]
    6ef8:	ldr	w0, [sp, #1532]
    6efc:	str	w0, [sp, #1412]
    6f00:	ldr	w1, [sp, #1412]
    6f04:	ldr	x0, [sp, #1424]
    6f08:	bl	290c <BIT_lookBitsFast>
    6f0c:	str	x0, [sp, #1400]
    6f10:	ldr	x0, [sp, #1400]
    6f14:	lsl	x0, x0, #2
    6f18:	ldr	x1, [sp, #1416]
    6f1c:	add	x0, x1, x0
    6f20:	mov	x2, #0x2                   	// #2
    6f24:	mov	x1, x0
    6f28:	ldr	x0, [sp, #1432]
    6f2c:	bl	22f8 <grub_memcpy>
    6f30:	ldr	x0, [sp, #1400]
    6f34:	lsl	x0, x0, #2
    6f38:	ldr	x1, [sp, #1416]
    6f3c:	add	x0, x1, x0
    6f40:	ldrb	w0, [x0, #2]
    6f44:	mov	w1, w0
    6f48:	ldr	x0, [sp, #1424]
    6f4c:	bl	2960 <BIT_skipBits>
    6f50:	ldr	x0, [sp, #1400]
    6f54:	lsl	x0, x0, #2
    6f58:	ldr	x1, [sp, #1416]
    6f5c:	add	x0, x1, x0
    6f60:	ldrb	w0, [x0, #3]
    6f64:	mov	w0, w0
    6f68:	ldr	x1, [sp, #1560]
    6f6c:	add	x0, x1, x0
    6f70:	str	x0, [sp, #1560]
    6f74:	ldr	x0, [sp, #1560]
    6f78:	str	x0, [sp, #1392]
    6f7c:	ldr	x0, [sp, #1552]
    6f80:	str	x0, [sp, #1384]
    6f84:	ldr	x0, [sp, #1536]
    6f88:	str	x0, [sp, #1376]
    6f8c:	ldr	w0, [sp, #1532]
    6f90:	str	w0, [sp, #1372]
    6f94:	ldr	w1, [sp, #1372]
    6f98:	ldr	x0, [sp, #1384]
    6f9c:	bl	290c <BIT_lookBitsFast>
    6fa0:	str	x0, [sp, #1360]
    6fa4:	ldr	x0, [sp, #1360]
    6fa8:	lsl	x0, x0, #2
    6fac:	ldr	x1, [sp, #1376]
    6fb0:	add	x0, x1, x0
    6fb4:	mov	x2, #0x2                   	// #2
    6fb8:	mov	x1, x0
    6fbc:	ldr	x0, [sp, #1392]
    6fc0:	bl	22f8 <grub_memcpy>
    6fc4:	ldr	x0, [sp, #1360]
    6fc8:	lsl	x0, x0, #2
    6fcc:	ldr	x1, [sp, #1376]
    6fd0:	add	x0, x1, x0
    6fd4:	ldrb	w0, [x0, #2]
    6fd8:	mov	w1, w0
    6fdc:	ldr	x0, [sp, #1384]
    6fe0:	bl	2960 <BIT_skipBits>
    6fe4:	ldr	x0, [sp, #1360]
    6fe8:	lsl	x0, x0, #2
    6fec:	ldr	x1, [sp, #1376]
    6ff0:	add	x0, x1, x0
    6ff4:	ldrb	w0, [x0, #3]
    6ff8:	mov	w0, w0
    6ffc:	ldr	x1, [sp, #1560]
    7000:	add	x0, x1, x0
    7004:	str	x0, [sp, #1560]
    7008:	ldr	x0, [sp, #1552]
    700c:	bl	2990 <BIT_reloadDStream>
    7010:	cmp	w0, #0x0
    7014:	cset	w0, eq  // eq = none
    7018:	and	w1, w0, #0xff
    701c:	ldr	x0, [sp, #1544]
    7020:	sub	x0, x0, #0x7
    7024:	ldr	x2, [sp, #1560]
    7028:	cmp	x2, x0
    702c:	cset	w0, cc  // cc = lo, ul, last
    7030:	and	w0, w0, #0xff
    7034:	and	w0, w1, w0
    7038:	and	w0, w0, #0xff
    703c:	cmp	w0, #0x0
    7040:	b.ne	6d9c <HUF_decompress4X2_usingDTable_internal+0xd48>  // b.any
    7044:	b	70dc <HUF_decompress4X2_usingDTable_internal+0x1088>
    7048:	ldr	x0, [sp, #1560]
    704c:	str	x0, [sp, #1352]
    7050:	ldr	x0, [sp, #1552]
    7054:	str	x0, [sp, #1344]
    7058:	ldr	x0, [sp, #1536]
    705c:	str	x0, [sp, #1336]
    7060:	ldr	w0, [sp, #1532]
    7064:	str	w0, [sp, #1332]
    7068:	ldr	w1, [sp, #1332]
    706c:	ldr	x0, [sp, #1344]
    7070:	bl	290c <BIT_lookBitsFast>
    7074:	str	x0, [sp, #1320]
    7078:	ldr	x0, [sp, #1320]
    707c:	lsl	x0, x0, #2
    7080:	ldr	x1, [sp, #1336]
    7084:	add	x0, x1, x0
    7088:	mov	x2, #0x2                   	// #2
    708c:	mov	x1, x0
    7090:	ldr	x0, [sp, #1352]
    7094:	bl	22f8 <grub_memcpy>
    7098:	ldr	x0, [sp, #1320]
    709c:	lsl	x0, x0, #2
    70a0:	ldr	x1, [sp, #1336]
    70a4:	add	x0, x1, x0
    70a8:	ldrb	w0, [x0, #2]
    70ac:	mov	w1, w0
    70b0:	ldr	x0, [sp, #1344]
    70b4:	bl	2960 <BIT_skipBits>
    70b8:	ldr	x0, [sp, #1320]
    70bc:	lsl	x0, x0, #2
    70c0:	ldr	x1, [sp, #1336]
    70c4:	add	x0, x1, x0
    70c8:	ldrb	w0, [x0, #3]
    70cc:	mov	w0, w0
    70d0:	ldr	x1, [sp, #1560]
    70d4:	add	x0, x1, x0
    70d8:	str	x0, [sp, #1560]
    70dc:	ldr	x0, [sp, #1552]
    70e0:	bl	2990 <BIT_reloadDStream>
    70e4:	cmp	w0, #0x0
    70e8:	cset	w0, eq  // eq = none
    70ec:	and	w1, w0, #0xff
    70f0:	ldr	x0, [sp, #1544]
    70f4:	sub	x0, x0, #0x2
    70f8:	ldr	x2, [sp, #1560]
    70fc:	cmp	x2, x0
    7100:	cset	w0, ls  // ls = plast
    7104:	and	w0, w0, #0xff
    7108:	and	w0, w1, w0
    710c:	and	w0, w0, #0xff
    7110:	cmp	w0, #0x0
    7114:	b.ne	7048 <HUF_decompress4X2_usingDTable_internal+0xff4>  // b.any
    7118:	b	71b0 <HUF_decompress4X2_usingDTable_internal+0x115c>
    711c:	ldr	x0, [sp, #1560]
    7120:	str	x0, [sp, #1312]
    7124:	ldr	x0, [sp, #1552]
    7128:	str	x0, [sp, #1304]
    712c:	ldr	x0, [sp, #1536]
    7130:	str	x0, [sp, #1296]
    7134:	ldr	w0, [sp, #1532]
    7138:	str	w0, [sp, #1292]
    713c:	ldr	w1, [sp, #1292]
    7140:	ldr	x0, [sp, #1304]
    7144:	bl	290c <BIT_lookBitsFast>
    7148:	str	x0, [sp, #1280]
    714c:	ldr	x0, [sp, #1280]
    7150:	lsl	x0, x0, #2
    7154:	ldr	x1, [sp, #1296]
    7158:	add	x0, x1, x0
    715c:	mov	x2, #0x2                   	// #2
    7160:	mov	x1, x0
    7164:	ldr	x0, [sp, #1312]
    7168:	bl	22f8 <grub_memcpy>
    716c:	ldr	x0, [sp, #1280]
    7170:	lsl	x0, x0, #2
    7174:	ldr	x1, [sp, #1296]
    7178:	add	x0, x1, x0
    717c:	ldrb	w0, [x0, #2]
    7180:	mov	w1, w0
    7184:	ldr	x0, [sp, #1304]
    7188:	bl	2960 <BIT_skipBits>
    718c:	ldr	x0, [sp, #1280]
    7190:	lsl	x0, x0, #2
    7194:	ldr	x1, [sp, #1296]
    7198:	add	x0, x1, x0
    719c:	ldrb	w0, [x0, #3]
    71a0:	mov	w0, w0
    71a4:	ldr	x1, [sp, #1560]
    71a8:	add	x0, x1, x0
    71ac:	str	x0, [sp, #1560]
    71b0:	ldr	x0, [sp, #1544]
    71b4:	sub	x0, x0, #0x2
    71b8:	ldr	x1, [sp, #1560]
    71bc:	cmp	x1, x0
    71c0:	b.ls	711c <HUF_decompress4X2_usingDTable_internal+0x10c8>  // b.plast
    71c4:	ldr	x1, [sp, #1544]
    71c8:	ldr	x0, [sp, #1560]
    71cc:	cmp	x1, x0
    71d0:	b.ls	72c4 <HUF_decompress4X2_usingDTable_internal+0x1270>  // b.plast
    71d4:	ldr	x0, [sp, #1560]
    71d8:	str	x0, [sp, #1272]
    71dc:	ldr	x0, [sp, #1552]
    71e0:	str	x0, [sp, #1264]
    71e4:	ldr	x0, [sp, #1536]
    71e8:	str	x0, [sp, #1256]
    71ec:	ldr	w0, [sp, #1532]
    71f0:	str	w0, [sp, #1252]
    71f4:	ldr	w1, [sp, #1252]
    71f8:	ldr	x0, [sp, #1264]
    71fc:	bl	290c <BIT_lookBitsFast>
    7200:	str	x0, [sp, #1240]
    7204:	ldr	x0, [sp, #1240]
    7208:	lsl	x0, x0, #2
    720c:	ldr	x1, [sp, #1256]
    7210:	add	x0, x1, x0
    7214:	mov	x2, #0x1                   	// #1
    7218:	mov	x1, x0
    721c:	ldr	x0, [sp, #1272]
    7220:	bl	22f8 <grub_memcpy>
    7224:	ldr	x0, [sp, #1240]
    7228:	lsl	x0, x0, #2
    722c:	ldr	x1, [sp, #1256]
    7230:	add	x0, x1, x0
    7234:	ldrb	w0, [x0, #3]
    7238:	cmp	w0, #0x1
    723c:	b.ne	7264 <HUF_decompress4X2_usingDTable_internal+0x1210>  // b.any
    7240:	ldr	x0, [sp, #1240]
    7244:	lsl	x0, x0, #2
    7248:	ldr	x1, [sp, #1256]
    724c:	add	x0, x1, x0
    7250:	ldrb	w0, [x0, #2]
    7254:	mov	w1, w0
    7258:	ldr	x0, [sp, #1264]
    725c:	bl	2960 <BIT_skipBits>
    7260:	b	72b0 <HUF_decompress4X2_usingDTable_internal+0x125c>
    7264:	ldr	x0, [sp, #1264]
    7268:	ldr	w0, [x0, #8]
    726c:	cmp	w0, #0x3f
    7270:	b.hi	72b0 <HUF_decompress4X2_usingDTable_internal+0x125c>  // b.pmore
    7274:	ldr	x0, [sp, #1240]
    7278:	lsl	x0, x0, #2
    727c:	ldr	x1, [sp, #1256]
    7280:	add	x0, x1, x0
    7284:	ldrb	w0, [x0, #2]
    7288:	mov	w1, w0
    728c:	ldr	x0, [sp, #1264]
    7290:	bl	2960 <BIT_skipBits>
    7294:	ldr	x0, [sp, #1264]
    7298:	ldr	w0, [x0, #8]
    729c:	cmp	w0, #0x40
    72a0:	b.ls	72b0 <HUF_decompress4X2_usingDTable_internal+0x125c>  // b.plast
    72a4:	ldr	x0, [sp, #1264]
    72a8:	mov	w1, #0x40                  	// #64
    72ac:	str	w1, [x0, #8]
    72b0:	mov	w0, #0x1                   	// #1
    72b4:	mov	w0, w0
    72b8:	ldr	x1, [sp, #1560]
    72bc:	add	x0, x1, x0
    72c0:	str	x0, [sp, #1560]
    72c4:	ldr	x0, [sp, #2272]
    72c8:	str	x0, [sp, #1232]
    72cc:	add	x0, sp, #0x80
    72d0:	str	x0, [sp, #1224]
    72d4:	ldr	x0, [sp, #2296]
    72d8:	str	x0, [sp, #1216]
    72dc:	ldr	x0, [sp, #2384]
    72e0:	str	x0, [sp, #1208]
    72e4:	ldr	w0, [sp, #2252]
    72e8:	str	w0, [sp, #1204]
    72ec:	ldr	x0, [sp, #1232]
    72f0:	str	x0, [sp, #1192]
    72f4:	b	7564 <HUF_decompress4X2_usingDTable_internal+0x1510>
    72f8:	bl	232c <MEM_64bits>
    72fc:	cmp	w0, #0x0
    7300:	b.eq	7398 <HUF_decompress4X2_usingDTable_internal+0x1344>  // b.none
    7304:	ldr	x0, [sp, #1232]
    7308:	str	x0, [sp, #1184]
    730c:	ldr	x0, [sp, #1224]
    7310:	str	x0, [sp, #1176]
    7314:	ldr	x0, [sp, #1208]
    7318:	str	x0, [sp, #1168]
    731c:	ldr	w0, [sp, #1204]
    7320:	str	w0, [sp, #1164]
    7324:	ldr	w1, [sp, #1164]
    7328:	ldr	x0, [sp, #1176]
    732c:	bl	290c <BIT_lookBitsFast>
    7330:	str	x0, [sp, #1152]
    7334:	ldr	x0, [sp, #1152]
    7338:	lsl	x0, x0, #2
    733c:	ldr	x1, [sp, #1168]
    7340:	add	x0, x1, x0
    7344:	mov	x2, #0x2                   	// #2
    7348:	mov	x1, x0
    734c:	ldr	x0, [sp, #1184]
    7350:	bl	22f8 <grub_memcpy>
    7354:	ldr	x0, [sp, #1152]
    7358:	lsl	x0, x0, #2
    735c:	ldr	x1, [sp, #1168]
    7360:	add	x0, x1, x0
    7364:	ldrb	w0, [x0, #2]
    7368:	mov	w1, w0
    736c:	ldr	x0, [sp, #1176]
    7370:	bl	2960 <BIT_skipBits>
    7374:	ldr	x0, [sp, #1152]
    7378:	lsl	x0, x0, #2
    737c:	ldr	x1, [sp, #1168]
    7380:	add	x0, x1, x0
    7384:	ldrb	w0, [x0, #3]
    7388:	mov	w0, w0
    738c:	ldr	x1, [sp, #1232]
    7390:	add	x0, x1, x0
    7394:	str	x0, [sp, #1232]
    7398:	bl	232c <MEM_64bits>
    739c:	ldr	x0, [sp, #1232]
    73a0:	str	x0, [sp, #1144]
    73a4:	ldr	x0, [sp, #1224]
    73a8:	str	x0, [sp, #1136]
    73ac:	ldr	x0, [sp, #1208]
    73b0:	str	x0, [sp, #1128]
    73b4:	ldr	w0, [sp, #1204]
    73b8:	str	w0, [sp, #1124]
    73bc:	ldr	w1, [sp, #1124]
    73c0:	ldr	x0, [sp, #1136]
    73c4:	bl	290c <BIT_lookBitsFast>
    73c8:	str	x0, [sp, #1112]
    73cc:	ldr	x0, [sp, #1112]
    73d0:	lsl	x0, x0, #2
    73d4:	ldr	x1, [sp, #1128]
    73d8:	add	x0, x1, x0
    73dc:	mov	x2, #0x2                   	// #2
    73e0:	mov	x1, x0
    73e4:	ldr	x0, [sp, #1144]
    73e8:	bl	22f8 <grub_memcpy>
    73ec:	ldr	x0, [sp, #1112]
    73f0:	lsl	x0, x0, #2
    73f4:	ldr	x1, [sp, #1128]
    73f8:	add	x0, x1, x0
    73fc:	ldrb	w0, [x0, #2]
    7400:	mov	w1, w0
    7404:	ldr	x0, [sp, #1136]
    7408:	bl	2960 <BIT_skipBits>
    740c:	ldr	x0, [sp, #1112]
    7410:	lsl	x0, x0, #2
    7414:	ldr	x1, [sp, #1128]
    7418:	add	x0, x1, x0
    741c:	ldrb	w0, [x0, #3]
    7420:	mov	w0, w0
    7424:	ldr	x1, [sp, #1232]
    7428:	add	x0, x1, x0
    742c:	str	x0, [sp, #1232]
    7430:	bl	232c <MEM_64bits>
    7434:	cmp	w0, #0x0
    7438:	b.eq	74d0 <HUF_decompress4X2_usingDTable_internal+0x147c>  // b.none
    743c:	ldr	x0, [sp, #1232]
    7440:	str	x0, [sp, #1104]
    7444:	ldr	x0, [sp, #1224]
    7448:	str	x0, [sp, #1096]
    744c:	ldr	x0, [sp, #1208]
    7450:	str	x0, [sp, #1088]
    7454:	ldr	w0, [sp, #1204]
    7458:	str	w0, [sp, #1084]
    745c:	ldr	w1, [sp, #1084]
    7460:	ldr	x0, [sp, #1096]
    7464:	bl	290c <BIT_lookBitsFast>
    7468:	str	x0, [sp, #1072]
    746c:	ldr	x0, [sp, #1072]
    7470:	lsl	x0, x0, #2
    7474:	ldr	x1, [sp, #1088]
    7478:	add	x0, x1, x0
    747c:	mov	x2, #0x2                   	// #2
    7480:	mov	x1, x0
    7484:	ldr	x0, [sp, #1104]
    7488:	bl	22f8 <grub_memcpy>
    748c:	ldr	x0, [sp, #1072]
    7490:	lsl	x0, x0, #2
    7494:	ldr	x1, [sp, #1088]
    7498:	add	x0, x1, x0
    749c:	ldrb	w0, [x0, #2]
    74a0:	mov	w1, w0
    74a4:	ldr	x0, [sp, #1096]
    74a8:	bl	2960 <BIT_skipBits>
    74ac:	ldr	x0, [sp, #1072]
    74b0:	lsl	x0, x0, #2
    74b4:	ldr	x1, [sp, #1088]
    74b8:	add	x0, x1, x0
    74bc:	ldrb	w0, [x0, #3]
    74c0:	mov	w0, w0
    74c4:	ldr	x1, [sp, #1232]
    74c8:	add	x0, x1, x0
    74cc:	str	x0, [sp, #1232]
    74d0:	ldr	x0, [sp, #1232]
    74d4:	str	x0, [sp, #1064]
    74d8:	ldr	x0, [sp, #1224]
    74dc:	str	x0, [sp, #1056]
    74e0:	ldr	x0, [sp, #1208]
    74e4:	str	x0, [sp, #1048]
    74e8:	ldr	w0, [sp, #1204]
    74ec:	str	w0, [sp, #1044]
    74f0:	ldr	w1, [sp, #1044]
    74f4:	ldr	x0, [sp, #1056]
    74f8:	bl	290c <BIT_lookBitsFast>
    74fc:	str	x0, [sp, #1032]
    7500:	ldr	x0, [sp, #1032]
    7504:	lsl	x0, x0, #2
    7508:	ldr	x1, [sp, #1048]
    750c:	add	x0, x1, x0
    7510:	mov	x2, #0x2                   	// #2
    7514:	mov	x1, x0
    7518:	ldr	x0, [sp, #1064]
    751c:	bl	22f8 <grub_memcpy>
    7520:	ldr	x0, [sp, #1032]
    7524:	lsl	x0, x0, #2
    7528:	ldr	x1, [sp, #1048]
    752c:	add	x0, x1, x0
    7530:	ldrb	w0, [x0, #2]
    7534:	mov	w1, w0
    7538:	ldr	x0, [sp, #1056]
    753c:	bl	2960 <BIT_skipBits>
    7540:	ldr	x0, [sp, #1032]
    7544:	lsl	x0, x0, #2
    7548:	ldr	x1, [sp, #1048]
    754c:	add	x0, x1, x0
    7550:	ldrb	w0, [x0, #3]
    7554:	mov	w0, w0
    7558:	ldr	x1, [sp, #1232]
    755c:	add	x0, x1, x0
    7560:	str	x0, [sp, #1232]
    7564:	ldr	x0, [sp, #1224]
    7568:	bl	2990 <BIT_reloadDStream>
    756c:	cmp	w0, #0x0
    7570:	cset	w0, eq  // eq = none
    7574:	and	w1, w0, #0xff
    7578:	ldr	x0, [sp, #1216]
    757c:	sub	x0, x0, #0x7
    7580:	ldr	x2, [sp, #1232]
    7584:	cmp	x2, x0
    7588:	cset	w0, cc  // cc = lo, ul, last
    758c:	and	w0, w0, #0xff
    7590:	and	w0, w1, w0
    7594:	and	w0, w0, #0xff
    7598:	cmp	w0, #0x0
    759c:	b.ne	72f8 <HUF_decompress4X2_usingDTable_internal+0x12a4>  // b.any
    75a0:	b	7638 <HUF_decompress4X2_usingDTable_internal+0x15e4>
    75a4:	ldr	x0, [sp, #1232]
    75a8:	str	x0, [sp, #1024]
    75ac:	ldr	x0, [sp, #1224]
    75b0:	str	x0, [sp, #1016]
    75b4:	ldr	x0, [sp, #1208]
    75b8:	str	x0, [sp, #1008]
    75bc:	ldr	w0, [sp, #1204]
    75c0:	str	w0, [sp, #1004]
    75c4:	ldr	w1, [sp, #1004]
    75c8:	ldr	x0, [sp, #1016]
    75cc:	bl	290c <BIT_lookBitsFast>
    75d0:	str	x0, [sp, #992]
    75d4:	ldr	x0, [sp, #992]
    75d8:	lsl	x0, x0, #2
    75dc:	ldr	x1, [sp, #1008]
    75e0:	add	x0, x1, x0
    75e4:	mov	x2, #0x2                   	// #2
    75e8:	mov	x1, x0
    75ec:	ldr	x0, [sp, #1024]
    75f0:	bl	22f8 <grub_memcpy>
    75f4:	ldr	x0, [sp, #992]
    75f8:	lsl	x0, x0, #2
    75fc:	ldr	x1, [sp, #1008]
    7600:	add	x0, x1, x0
    7604:	ldrb	w0, [x0, #2]
    7608:	mov	w1, w0
    760c:	ldr	x0, [sp, #1016]
    7610:	bl	2960 <BIT_skipBits>
    7614:	ldr	x0, [sp, #992]
    7618:	lsl	x0, x0, #2
    761c:	ldr	x1, [sp, #1008]
    7620:	add	x0, x1, x0
    7624:	ldrb	w0, [x0, #3]
    7628:	mov	w0, w0
    762c:	ldr	x1, [sp, #1232]
    7630:	add	x0, x1, x0
    7634:	str	x0, [sp, #1232]
    7638:	ldr	x0, [sp, #1224]
    763c:	bl	2990 <BIT_reloadDStream>
    7640:	cmp	w0, #0x0
    7644:	cset	w0, eq  // eq = none
    7648:	and	w1, w0, #0xff
    764c:	ldr	x0, [sp, #1216]
    7650:	sub	x0, x0, #0x2
    7654:	ldr	x2, [sp, #1232]
    7658:	cmp	x2, x0
    765c:	cset	w0, ls  // ls = plast
    7660:	and	w0, w0, #0xff
    7664:	and	w0, w1, w0
    7668:	and	w0, w0, #0xff
    766c:	cmp	w0, #0x0
    7670:	b.ne	75a4 <HUF_decompress4X2_usingDTable_internal+0x1550>  // b.any
    7674:	b	770c <HUF_decompress4X2_usingDTable_internal+0x16b8>
    7678:	ldr	x0, [sp, #1232]
    767c:	str	x0, [sp, #984]
    7680:	ldr	x0, [sp, #1224]
    7684:	str	x0, [sp, #976]
    7688:	ldr	x0, [sp, #1208]
    768c:	str	x0, [sp, #968]
    7690:	ldr	w0, [sp, #1204]
    7694:	str	w0, [sp, #964]
    7698:	ldr	w1, [sp, #964]
    769c:	ldr	x0, [sp, #976]
    76a0:	bl	290c <BIT_lookBitsFast>
    76a4:	str	x0, [sp, #952]
    76a8:	ldr	x0, [sp, #952]
    76ac:	lsl	x0, x0, #2
    76b0:	ldr	x1, [sp, #968]
    76b4:	add	x0, x1, x0
    76b8:	mov	x2, #0x2                   	// #2
    76bc:	mov	x1, x0
    76c0:	ldr	x0, [sp, #984]
    76c4:	bl	22f8 <grub_memcpy>
    76c8:	ldr	x0, [sp, #952]
    76cc:	lsl	x0, x0, #2
    76d0:	ldr	x1, [sp, #968]
    76d4:	add	x0, x1, x0
    76d8:	ldrb	w0, [x0, #2]
    76dc:	mov	w1, w0
    76e0:	ldr	x0, [sp, #976]
    76e4:	bl	2960 <BIT_skipBits>
    76e8:	ldr	x0, [sp, #952]
    76ec:	lsl	x0, x0, #2
    76f0:	ldr	x1, [sp, #968]
    76f4:	add	x0, x1, x0
    76f8:	ldrb	w0, [x0, #3]
    76fc:	mov	w0, w0
    7700:	ldr	x1, [sp, #1232]
    7704:	add	x0, x1, x0
    7708:	str	x0, [sp, #1232]
    770c:	ldr	x0, [sp, #1216]
    7710:	sub	x0, x0, #0x2
    7714:	ldr	x1, [sp, #1232]
    7718:	cmp	x1, x0
    771c:	b.ls	7678 <HUF_decompress4X2_usingDTable_internal+0x1624>  // b.plast
    7720:	ldr	x1, [sp, #1216]
    7724:	ldr	x0, [sp, #1232]
    7728:	cmp	x1, x0
    772c:	b.ls	7820 <HUF_decompress4X2_usingDTable_internal+0x17cc>  // b.plast
    7730:	ldr	x0, [sp, #1232]
    7734:	str	x0, [sp, #944]
    7738:	ldr	x0, [sp, #1224]
    773c:	str	x0, [sp, #936]
    7740:	ldr	x0, [sp, #1208]
    7744:	str	x0, [sp, #928]
    7748:	ldr	w0, [sp, #1204]
    774c:	str	w0, [sp, #924]
    7750:	ldr	w1, [sp, #924]
    7754:	ldr	x0, [sp, #936]
    7758:	bl	290c <BIT_lookBitsFast>
    775c:	str	x0, [sp, #912]
    7760:	ldr	x0, [sp, #912]
    7764:	lsl	x0, x0, #2
    7768:	ldr	x1, [sp, #928]
    776c:	add	x0, x1, x0
    7770:	mov	x2, #0x1                   	// #1
    7774:	mov	x1, x0
    7778:	ldr	x0, [sp, #944]
    777c:	bl	22f8 <grub_memcpy>
    7780:	ldr	x0, [sp, #912]
    7784:	lsl	x0, x0, #2
    7788:	ldr	x1, [sp, #928]
    778c:	add	x0, x1, x0
    7790:	ldrb	w0, [x0, #3]
    7794:	cmp	w0, #0x1
    7798:	b.ne	77c0 <HUF_decompress4X2_usingDTable_internal+0x176c>  // b.any
    779c:	ldr	x0, [sp, #912]
    77a0:	lsl	x0, x0, #2
    77a4:	ldr	x1, [sp, #928]
    77a8:	add	x0, x1, x0
    77ac:	ldrb	w0, [x0, #2]
    77b0:	mov	w1, w0
    77b4:	ldr	x0, [sp, #936]
    77b8:	bl	2960 <BIT_skipBits>
    77bc:	b	780c <HUF_decompress4X2_usingDTable_internal+0x17b8>
    77c0:	ldr	x0, [sp, #936]
    77c4:	ldr	w0, [x0, #8]
    77c8:	cmp	w0, #0x3f
    77cc:	b.hi	780c <HUF_decompress4X2_usingDTable_internal+0x17b8>  // b.pmore
    77d0:	ldr	x0, [sp, #912]
    77d4:	lsl	x0, x0, #2
    77d8:	ldr	x1, [sp, #928]
    77dc:	add	x0, x1, x0
    77e0:	ldrb	w0, [x0, #2]
    77e4:	mov	w1, w0
    77e8:	ldr	x0, [sp, #936]
    77ec:	bl	2960 <BIT_skipBits>
    77f0:	ldr	x0, [sp, #936]
    77f4:	ldr	w0, [x0, #8]
    77f8:	cmp	w0, #0x40
    77fc:	b.ls	780c <HUF_decompress4X2_usingDTable_internal+0x17b8>  // b.plast
    7800:	ldr	x0, [sp, #936]
    7804:	mov	w1, #0x40                  	// #64
    7808:	str	w1, [x0, #8]
    780c:	mov	w0, #0x1                   	// #1
    7810:	mov	w0, w0
    7814:	ldr	x1, [sp, #1232]
    7818:	add	x0, x1, x0
    781c:	str	x0, [sp, #1232]
    7820:	ldr	x0, [sp, #2264]
    7824:	str	x0, [sp, #904]
    7828:	add	x0, sp, #0xa8
    782c:	str	x0, [sp, #896]
    7830:	ldr	x0, [sp, #2288]
    7834:	str	x0, [sp, #888]
    7838:	ldr	x0, [sp, #2384]
    783c:	str	x0, [sp, #880]
    7840:	ldr	w0, [sp, #2252]
    7844:	str	w0, [sp, #876]
    7848:	ldr	x0, [sp, #904]
    784c:	str	x0, [sp, #864]
    7850:	b	7ac0 <HUF_decompress4X2_usingDTable_internal+0x1a6c>
    7854:	bl	232c <MEM_64bits>
    7858:	cmp	w0, #0x0
    785c:	b.eq	78f4 <HUF_decompress4X2_usingDTable_internal+0x18a0>  // b.none
    7860:	ldr	x0, [sp, #904]
    7864:	str	x0, [sp, #856]
    7868:	ldr	x0, [sp, #896]
    786c:	str	x0, [sp, #848]
    7870:	ldr	x0, [sp, #880]
    7874:	str	x0, [sp, #840]
    7878:	ldr	w0, [sp, #876]
    787c:	str	w0, [sp, #836]
    7880:	ldr	w1, [sp, #836]
    7884:	ldr	x0, [sp, #848]
    7888:	bl	290c <BIT_lookBitsFast>
    788c:	str	x0, [sp, #824]
    7890:	ldr	x0, [sp, #824]
    7894:	lsl	x0, x0, #2
    7898:	ldr	x1, [sp, #840]
    789c:	add	x0, x1, x0
    78a0:	mov	x2, #0x2                   	// #2
    78a4:	mov	x1, x0
    78a8:	ldr	x0, [sp, #856]
    78ac:	bl	22f8 <grub_memcpy>
    78b0:	ldr	x0, [sp, #824]
    78b4:	lsl	x0, x0, #2
    78b8:	ldr	x1, [sp, #840]
    78bc:	add	x0, x1, x0
    78c0:	ldrb	w0, [x0, #2]
    78c4:	mov	w1, w0
    78c8:	ldr	x0, [sp, #848]
    78cc:	bl	2960 <BIT_skipBits>
    78d0:	ldr	x0, [sp, #824]
    78d4:	lsl	x0, x0, #2
    78d8:	ldr	x1, [sp, #840]
    78dc:	add	x0, x1, x0
    78e0:	ldrb	w0, [x0, #3]
    78e4:	mov	w0, w0
    78e8:	ldr	x1, [sp, #904]
    78ec:	add	x0, x1, x0
    78f0:	str	x0, [sp, #904]
    78f4:	bl	232c <MEM_64bits>
    78f8:	ldr	x0, [sp, #904]
    78fc:	str	x0, [sp, #816]
    7900:	ldr	x0, [sp, #896]
    7904:	str	x0, [sp, #808]
    7908:	ldr	x0, [sp, #880]
    790c:	str	x0, [sp, #800]
    7910:	ldr	w0, [sp, #876]
    7914:	str	w0, [sp, #796]
    7918:	ldr	w1, [sp, #796]
    791c:	ldr	x0, [sp, #808]
    7920:	bl	290c <BIT_lookBitsFast>
    7924:	str	x0, [sp, #784]
    7928:	ldr	x0, [sp, #784]
    792c:	lsl	x0, x0, #2
    7930:	ldr	x1, [sp, #800]
    7934:	add	x0, x1, x0
    7938:	mov	x2, #0x2                   	// #2
    793c:	mov	x1, x0
    7940:	ldr	x0, [sp, #816]
    7944:	bl	22f8 <grub_memcpy>
    7948:	ldr	x0, [sp, #784]
    794c:	lsl	x0, x0, #2
    7950:	ldr	x1, [sp, #800]
    7954:	add	x0, x1, x0
    7958:	ldrb	w0, [x0, #2]
    795c:	mov	w1, w0
    7960:	ldr	x0, [sp, #808]
    7964:	bl	2960 <BIT_skipBits>
    7968:	ldr	x0, [sp, #784]
    796c:	lsl	x0, x0, #2
    7970:	ldr	x1, [sp, #800]
    7974:	add	x0, x1, x0
    7978:	ldrb	w0, [x0, #3]
    797c:	mov	w0, w0
    7980:	ldr	x1, [sp, #904]
    7984:	add	x0, x1, x0
    7988:	str	x0, [sp, #904]
    798c:	bl	232c <MEM_64bits>
    7990:	cmp	w0, #0x0
    7994:	b.eq	7a2c <HUF_decompress4X2_usingDTable_internal+0x19d8>  // b.none
    7998:	ldr	x0, [sp, #904]
    799c:	str	x0, [sp, #776]
    79a0:	ldr	x0, [sp, #896]
    79a4:	str	x0, [sp, #768]
    79a8:	ldr	x0, [sp, #880]
    79ac:	str	x0, [sp, #760]
    79b0:	ldr	w0, [sp, #876]
    79b4:	str	w0, [sp, #756]
    79b8:	ldr	w1, [sp, #756]
    79bc:	ldr	x0, [sp, #768]
    79c0:	bl	290c <BIT_lookBitsFast>
    79c4:	str	x0, [sp, #744]
    79c8:	ldr	x0, [sp, #744]
    79cc:	lsl	x0, x0, #2
    79d0:	ldr	x1, [sp, #760]
    79d4:	add	x0, x1, x0
    79d8:	mov	x2, #0x2                   	// #2
    79dc:	mov	x1, x0
    79e0:	ldr	x0, [sp, #776]
    79e4:	bl	22f8 <grub_memcpy>
    79e8:	ldr	x0, [sp, #744]
    79ec:	lsl	x0, x0, #2
    79f0:	ldr	x1, [sp, #760]
    79f4:	add	x0, x1, x0
    79f8:	ldrb	w0, [x0, #2]
    79fc:	mov	w1, w0
    7a00:	ldr	x0, [sp, #768]
    7a04:	bl	2960 <BIT_skipBits>
    7a08:	ldr	x0, [sp, #744]
    7a0c:	lsl	x0, x0, #2
    7a10:	ldr	x1, [sp, #760]
    7a14:	add	x0, x1, x0
    7a18:	ldrb	w0, [x0, #3]
    7a1c:	mov	w0, w0
    7a20:	ldr	x1, [sp, #904]
    7a24:	add	x0, x1, x0
    7a28:	str	x0, [sp, #904]
    7a2c:	ldr	x0, [sp, #904]
    7a30:	str	x0, [sp, #736]
    7a34:	ldr	x0, [sp, #896]
    7a38:	str	x0, [sp, #728]
    7a3c:	ldr	x0, [sp, #880]
    7a40:	str	x0, [sp, #720]
    7a44:	ldr	w0, [sp, #876]
    7a48:	str	w0, [sp, #716]
    7a4c:	ldr	w1, [sp, #716]
    7a50:	ldr	x0, [sp, #728]
    7a54:	bl	290c <BIT_lookBitsFast>
    7a58:	str	x0, [sp, #704]
    7a5c:	ldr	x0, [sp, #704]
    7a60:	lsl	x0, x0, #2
    7a64:	ldr	x1, [sp, #720]
    7a68:	add	x0, x1, x0
    7a6c:	mov	x2, #0x2                   	// #2
    7a70:	mov	x1, x0
    7a74:	ldr	x0, [sp, #736]
    7a78:	bl	22f8 <grub_memcpy>
    7a7c:	ldr	x0, [sp, #704]
    7a80:	lsl	x0, x0, #2
    7a84:	ldr	x1, [sp, #720]
    7a88:	add	x0, x1, x0
    7a8c:	ldrb	w0, [x0, #2]
    7a90:	mov	w1, w0
    7a94:	ldr	x0, [sp, #728]
    7a98:	bl	2960 <BIT_skipBits>
    7a9c:	ldr	x0, [sp, #704]
    7aa0:	lsl	x0, x0, #2
    7aa4:	ldr	x1, [sp, #720]
    7aa8:	add	x0, x1, x0
    7aac:	ldrb	w0, [x0, #3]
    7ab0:	mov	w0, w0
    7ab4:	ldr	x1, [sp, #904]
    7ab8:	add	x0, x1, x0
    7abc:	str	x0, [sp, #904]
    7ac0:	ldr	x0, [sp, #896]
    7ac4:	bl	2990 <BIT_reloadDStream>
    7ac8:	cmp	w0, #0x0
    7acc:	cset	w0, eq  // eq = none
    7ad0:	and	w1, w0, #0xff
    7ad4:	ldr	x0, [sp, #888]
    7ad8:	sub	x0, x0, #0x7
    7adc:	ldr	x2, [sp, #904]
    7ae0:	cmp	x2, x0
    7ae4:	cset	w0, cc  // cc = lo, ul, last
    7ae8:	and	w0, w0, #0xff
    7aec:	and	w0, w1, w0
    7af0:	and	w0, w0, #0xff
    7af4:	cmp	w0, #0x0
    7af8:	b.ne	7854 <HUF_decompress4X2_usingDTable_internal+0x1800>  // b.any
    7afc:	b	7b94 <HUF_decompress4X2_usingDTable_internal+0x1b40>
    7b00:	ldr	x0, [sp, #904]
    7b04:	str	x0, [sp, #696]
    7b08:	ldr	x0, [sp, #896]
    7b0c:	str	x0, [sp, #688]
    7b10:	ldr	x0, [sp, #880]
    7b14:	str	x0, [sp, #680]
    7b18:	ldr	w0, [sp, #876]
    7b1c:	str	w0, [sp, #676]
    7b20:	ldr	w1, [sp, #676]
    7b24:	ldr	x0, [sp, #688]
    7b28:	bl	290c <BIT_lookBitsFast>
    7b2c:	str	x0, [sp, #664]
    7b30:	ldr	x0, [sp, #664]
    7b34:	lsl	x0, x0, #2
    7b38:	ldr	x1, [sp, #680]
    7b3c:	add	x0, x1, x0
    7b40:	mov	x2, #0x2                   	// #2
    7b44:	mov	x1, x0
    7b48:	ldr	x0, [sp, #696]
    7b4c:	bl	22f8 <grub_memcpy>
    7b50:	ldr	x0, [sp, #664]
    7b54:	lsl	x0, x0, #2
    7b58:	ldr	x1, [sp, #680]
    7b5c:	add	x0, x1, x0
    7b60:	ldrb	w0, [x0, #2]
    7b64:	mov	w1, w0
    7b68:	ldr	x0, [sp, #688]
    7b6c:	bl	2960 <BIT_skipBits>
    7b70:	ldr	x0, [sp, #664]
    7b74:	lsl	x0, x0, #2
    7b78:	ldr	x1, [sp, #680]
    7b7c:	add	x0, x1, x0
    7b80:	ldrb	w0, [x0, #3]
    7b84:	mov	w0, w0
    7b88:	ldr	x1, [sp, #904]
    7b8c:	add	x0, x1, x0
    7b90:	str	x0, [sp, #904]
    7b94:	ldr	x0, [sp, #896]
    7b98:	bl	2990 <BIT_reloadDStream>
    7b9c:	cmp	w0, #0x0
    7ba0:	cset	w0, eq  // eq = none
    7ba4:	and	w1, w0, #0xff
    7ba8:	ldr	x0, [sp, #888]
    7bac:	sub	x0, x0, #0x2
    7bb0:	ldr	x2, [sp, #904]
    7bb4:	cmp	x2, x0
    7bb8:	cset	w0, ls  // ls = plast
    7bbc:	and	w0, w0, #0xff
    7bc0:	and	w0, w1, w0
    7bc4:	and	w0, w0, #0xff
    7bc8:	cmp	w0, #0x0
    7bcc:	b.ne	7b00 <HUF_decompress4X2_usingDTable_internal+0x1aac>  // b.any
    7bd0:	b	7c68 <HUF_decompress4X2_usingDTable_internal+0x1c14>
    7bd4:	ldr	x0, [sp, #904]
    7bd8:	str	x0, [sp, #656]
    7bdc:	ldr	x0, [sp, #896]
    7be0:	str	x0, [sp, #648]
    7be4:	ldr	x0, [sp, #880]
    7be8:	str	x0, [sp, #640]
    7bec:	ldr	w0, [sp, #876]
    7bf0:	str	w0, [sp, #636]
    7bf4:	ldr	w1, [sp, #636]
    7bf8:	ldr	x0, [sp, #648]
    7bfc:	bl	290c <BIT_lookBitsFast>
    7c00:	str	x0, [sp, #624]
    7c04:	ldr	x0, [sp, #624]
    7c08:	lsl	x0, x0, #2
    7c0c:	ldr	x1, [sp, #640]
    7c10:	add	x0, x1, x0
    7c14:	mov	x2, #0x2                   	// #2
    7c18:	mov	x1, x0
    7c1c:	ldr	x0, [sp, #656]
    7c20:	bl	22f8 <grub_memcpy>
    7c24:	ldr	x0, [sp, #624]
    7c28:	lsl	x0, x0, #2
    7c2c:	ldr	x1, [sp, #640]
    7c30:	add	x0, x1, x0
    7c34:	ldrb	w0, [x0, #2]
    7c38:	mov	w1, w0
    7c3c:	ldr	x0, [sp, #648]
    7c40:	bl	2960 <BIT_skipBits>
    7c44:	ldr	x0, [sp, #624]
    7c48:	lsl	x0, x0, #2
    7c4c:	ldr	x1, [sp, #640]
    7c50:	add	x0, x1, x0
    7c54:	ldrb	w0, [x0, #3]
    7c58:	mov	w0, w0
    7c5c:	ldr	x1, [sp, #904]
    7c60:	add	x0, x1, x0
    7c64:	str	x0, [sp, #904]
    7c68:	ldr	x0, [sp, #888]
    7c6c:	sub	x0, x0, #0x2
    7c70:	ldr	x1, [sp, #904]
    7c74:	cmp	x1, x0
    7c78:	b.ls	7bd4 <HUF_decompress4X2_usingDTable_internal+0x1b80>  // b.plast
    7c7c:	ldr	x1, [sp, #888]
    7c80:	ldr	x0, [sp, #904]
    7c84:	cmp	x1, x0
    7c88:	b.ls	7d7c <HUF_decompress4X2_usingDTable_internal+0x1d28>  // b.plast
    7c8c:	ldr	x0, [sp, #904]
    7c90:	str	x0, [sp, #616]
    7c94:	ldr	x0, [sp, #896]
    7c98:	str	x0, [sp, #608]
    7c9c:	ldr	x0, [sp, #880]
    7ca0:	str	x0, [sp, #600]
    7ca4:	ldr	w0, [sp, #876]
    7ca8:	str	w0, [sp, #596]
    7cac:	ldr	w1, [sp, #596]
    7cb0:	ldr	x0, [sp, #608]
    7cb4:	bl	290c <BIT_lookBitsFast>
    7cb8:	str	x0, [sp, #584]
    7cbc:	ldr	x0, [sp, #584]
    7cc0:	lsl	x0, x0, #2
    7cc4:	ldr	x1, [sp, #600]
    7cc8:	add	x0, x1, x0
    7ccc:	mov	x2, #0x1                   	// #1
    7cd0:	mov	x1, x0
    7cd4:	ldr	x0, [sp, #616]
    7cd8:	bl	22f8 <grub_memcpy>
    7cdc:	ldr	x0, [sp, #584]
    7ce0:	lsl	x0, x0, #2
    7ce4:	ldr	x1, [sp, #600]
    7ce8:	add	x0, x1, x0
    7cec:	ldrb	w0, [x0, #3]
    7cf0:	cmp	w0, #0x1
    7cf4:	b.ne	7d1c <HUF_decompress4X2_usingDTable_internal+0x1cc8>  // b.any
    7cf8:	ldr	x0, [sp, #584]
    7cfc:	lsl	x0, x0, #2
    7d00:	ldr	x1, [sp, #600]
    7d04:	add	x0, x1, x0
    7d08:	ldrb	w0, [x0, #2]
    7d0c:	mov	w1, w0
    7d10:	ldr	x0, [sp, #608]
    7d14:	bl	2960 <BIT_skipBits>
    7d18:	b	7d68 <HUF_decompress4X2_usingDTable_internal+0x1d14>
    7d1c:	ldr	x0, [sp, #608]
    7d20:	ldr	w0, [x0, #8]
    7d24:	cmp	w0, #0x3f
    7d28:	b.hi	7d68 <HUF_decompress4X2_usingDTable_internal+0x1d14>  // b.pmore
    7d2c:	ldr	x0, [sp, #584]
    7d30:	lsl	x0, x0, #2
    7d34:	ldr	x1, [sp, #600]
    7d38:	add	x0, x1, x0
    7d3c:	ldrb	w0, [x0, #2]
    7d40:	mov	w1, w0
    7d44:	ldr	x0, [sp, #608]
    7d48:	bl	2960 <BIT_skipBits>
    7d4c:	ldr	x0, [sp, #608]
    7d50:	ldr	w0, [x0, #8]
    7d54:	cmp	w0, #0x40
    7d58:	b.ls	7d68 <HUF_decompress4X2_usingDTable_internal+0x1d14>  // b.plast
    7d5c:	ldr	x0, [sp, #608]
    7d60:	mov	w1, #0x40                  	// #64
    7d64:	str	w1, [x0, #8]
    7d68:	mov	w0, #0x1                   	// #1
    7d6c:	mov	w0, w0
    7d70:	ldr	x1, [sp, #904]
    7d74:	add	x0, x1, x0
    7d78:	str	x0, [sp, #904]
    7d7c:	ldr	x0, [sp, #2256]
    7d80:	str	x0, [sp, #576]
    7d84:	add	x0, sp, #0xd0
    7d88:	str	x0, [sp, #568]
    7d8c:	ldr	x0, [sp, #2400]
    7d90:	str	x0, [sp, #560]
    7d94:	ldr	x0, [sp, #2384]
    7d98:	str	x0, [sp, #552]
    7d9c:	ldr	w0, [sp, #2252]
    7da0:	str	w0, [sp, #548]
    7da4:	ldr	x0, [sp, #576]
    7da8:	str	x0, [sp, #536]
    7dac:	b	801c <HUF_decompress4X2_usingDTable_internal+0x1fc8>
    7db0:	bl	232c <MEM_64bits>
    7db4:	cmp	w0, #0x0
    7db8:	b.eq	7e50 <HUF_decompress4X2_usingDTable_internal+0x1dfc>  // b.none
    7dbc:	ldr	x0, [sp, #576]
    7dc0:	str	x0, [sp, #528]
    7dc4:	ldr	x0, [sp, #568]
    7dc8:	str	x0, [sp, #520]
    7dcc:	ldr	x0, [sp, #552]
    7dd0:	str	x0, [sp, #512]
    7dd4:	ldr	w0, [sp, #548]
    7dd8:	str	w0, [sp, #508]
    7ddc:	ldr	w1, [sp, #508]
    7de0:	ldr	x0, [sp, #520]
    7de4:	bl	290c <BIT_lookBitsFast>
    7de8:	str	x0, [sp, #496]
    7dec:	ldr	x0, [sp, #496]
    7df0:	lsl	x0, x0, #2
    7df4:	ldr	x1, [sp, #512]
    7df8:	add	x0, x1, x0
    7dfc:	mov	x2, #0x2                   	// #2
    7e00:	mov	x1, x0
    7e04:	ldr	x0, [sp, #528]
    7e08:	bl	22f8 <grub_memcpy>
    7e0c:	ldr	x0, [sp, #496]
    7e10:	lsl	x0, x0, #2
    7e14:	ldr	x1, [sp, #512]
    7e18:	add	x0, x1, x0
    7e1c:	ldrb	w0, [x0, #2]
    7e20:	mov	w1, w0
    7e24:	ldr	x0, [sp, #520]
    7e28:	bl	2960 <BIT_skipBits>
    7e2c:	ldr	x0, [sp, #496]
    7e30:	lsl	x0, x0, #2
    7e34:	ldr	x1, [sp, #512]
    7e38:	add	x0, x1, x0
    7e3c:	ldrb	w0, [x0, #3]
    7e40:	mov	w0, w0
    7e44:	ldr	x1, [sp, #576]
    7e48:	add	x0, x1, x0
    7e4c:	str	x0, [sp, #576]
    7e50:	bl	232c <MEM_64bits>
    7e54:	ldr	x0, [sp, #576]
    7e58:	str	x0, [sp, #488]
    7e5c:	ldr	x0, [sp, #568]
    7e60:	str	x0, [sp, #480]
    7e64:	ldr	x0, [sp, #552]
    7e68:	str	x0, [sp, #472]
    7e6c:	ldr	w0, [sp, #548]
    7e70:	str	w0, [sp, #468]
    7e74:	ldr	w1, [sp, #468]
    7e78:	ldr	x0, [sp, #480]
    7e7c:	bl	290c <BIT_lookBitsFast>
    7e80:	str	x0, [sp, #456]
    7e84:	ldr	x0, [sp, #456]
    7e88:	lsl	x0, x0, #2
    7e8c:	ldr	x1, [sp, #472]
    7e90:	add	x0, x1, x0
    7e94:	mov	x2, #0x2                   	// #2
    7e98:	mov	x1, x0
    7e9c:	ldr	x0, [sp, #488]
    7ea0:	bl	22f8 <grub_memcpy>
    7ea4:	ldr	x0, [sp, #456]
    7ea8:	lsl	x0, x0, #2
    7eac:	ldr	x1, [sp, #472]
    7eb0:	add	x0, x1, x0
    7eb4:	ldrb	w0, [x0, #2]
    7eb8:	mov	w1, w0
    7ebc:	ldr	x0, [sp, #480]
    7ec0:	bl	2960 <BIT_skipBits>
    7ec4:	ldr	x0, [sp, #456]
    7ec8:	lsl	x0, x0, #2
    7ecc:	ldr	x1, [sp, #472]
    7ed0:	add	x0, x1, x0
    7ed4:	ldrb	w0, [x0, #3]
    7ed8:	mov	w0, w0
    7edc:	ldr	x1, [sp, #576]
    7ee0:	add	x0, x1, x0
    7ee4:	str	x0, [sp, #576]
    7ee8:	bl	232c <MEM_64bits>
    7eec:	cmp	w0, #0x0
    7ef0:	b.eq	7f88 <HUF_decompress4X2_usingDTable_internal+0x1f34>  // b.none
    7ef4:	ldr	x0, [sp, #576]
    7ef8:	str	x0, [sp, #448]
    7efc:	ldr	x0, [sp, #568]
    7f00:	str	x0, [sp, #440]
    7f04:	ldr	x0, [sp, #552]
    7f08:	str	x0, [sp, #432]
    7f0c:	ldr	w0, [sp, #548]
    7f10:	str	w0, [sp, #428]
    7f14:	ldr	w1, [sp, #428]
    7f18:	ldr	x0, [sp, #440]
    7f1c:	bl	290c <BIT_lookBitsFast>
    7f20:	str	x0, [sp, #416]
    7f24:	ldr	x0, [sp, #416]
    7f28:	lsl	x0, x0, #2
    7f2c:	ldr	x1, [sp, #432]
    7f30:	add	x0, x1, x0
    7f34:	mov	x2, #0x2                   	// #2
    7f38:	mov	x1, x0
    7f3c:	ldr	x0, [sp, #448]
    7f40:	bl	22f8 <grub_memcpy>
    7f44:	ldr	x0, [sp, #416]
    7f48:	lsl	x0, x0, #2
    7f4c:	ldr	x1, [sp, #432]
    7f50:	add	x0, x1, x0
    7f54:	ldrb	w0, [x0, #2]
    7f58:	mov	w1, w0
    7f5c:	ldr	x0, [sp, #440]
    7f60:	bl	2960 <BIT_skipBits>
    7f64:	ldr	x0, [sp, #416]
    7f68:	lsl	x0, x0, #2
    7f6c:	ldr	x1, [sp, #432]
    7f70:	add	x0, x1, x0
    7f74:	ldrb	w0, [x0, #3]
    7f78:	mov	w0, w0
    7f7c:	ldr	x1, [sp, #576]
    7f80:	add	x0, x1, x0
    7f84:	str	x0, [sp, #576]
    7f88:	ldr	x0, [sp, #576]
    7f8c:	str	x0, [sp, #408]
    7f90:	ldr	x0, [sp, #568]
    7f94:	str	x0, [sp, #400]
    7f98:	ldr	x0, [sp, #552]
    7f9c:	str	x0, [sp, #392]
    7fa0:	ldr	w0, [sp, #548]
    7fa4:	str	w0, [sp, #388]
    7fa8:	ldr	w1, [sp, #388]
    7fac:	ldr	x0, [sp, #400]
    7fb0:	bl	290c <BIT_lookBitsFast>
    7fb4:	str	x0, [sp, #376]
    7fb8:	ldr	x0, [sp, #376]
    7fbc:	lsl	x0, x0, #2
    7fc0:	ldr	x1, [sp, #392]
    7fc4:	add	x0, x1, x0
    7fc8:	mov	x2, #0x2                   	// #2
    7fcc:	mov	x1, x0
    7fd0:	ldr	x0, [sp, #408]
    7fd4:	bl	22f8 <grub_memcpy>
    7fd8:	ldr	x0, [sp, #376]
    7fdc:	lsl	x0, x0, #2
    7fe0:	ldr	x1, [sp, #392]
    7fe4:	add	x0, x1, x0
    7fe8:	ldrb	w0, [x0, #2]
    7fec:	mov	w1, w0
    7ff0:	ldr	x0, [sp, #400]
    7ff4:	bl	2960 <BIT_skipBits>
    7ff8:	ldr	x0, [sp, #376]
    7ffc:	lsl	x0, x0, #2
    8000:	ldr	x1, [sp, #392]
    8004:	add	x0, x1, x0
    8008:	ldrb	w0, [x0, #3]
    800c:	mov	w0, w0
    8010:	ldr	x1, [sp, #576]
    8014:	add	x0, x1, x0
    8018:	str	x0, [sp, #576]
    801c:	ldr	x0, [sp, #568]
    8020:	bl	2990 <BIT_reloadDStream>
    8024:	cmp	w0, #0x0
    8028:	cset	w0, eq  // eq = none
    802c:	and	w1, w0, #0xff
    8030:	ldr	x0, [sp, #560]
    8034:	sub	x0, x0, #0x7
    8038:	ldr	x2, [sp, #576]
    803c:	cmp	x2, x0
    8040:	cset	w0, cc  // cc = lo, ul, last
    8044:	and	w0, w0, #0xff
    8048:	and	w0, w1, w0
    804c:	and	w0, w0, #0xff
    8050:	cmp	w0, #0x0
    8054:	b.ne	7db0 <HUF_decompress4X2_usingDTable_internal+0x1d5c>  // b.any
    8058:	b	80f0 <HUF_decompress4X2_usingDTable_internal+0x209c>
    805c:	ldr	x0, [sp, #576]
    8060:	str	x0, [sp, #368]
    8064:	ldr	x0, [sp, #568]
    8068:	str	x0, [sp, #360]
    806c:	ldr	x0, [sp, #552]
    8070:	str	x0, [sp, #352]
    8074:	ldr	w0, [sp, #548]
    8078:	str	w0, [sp, #348]
    807c:	ldr	w1, [sp, #348]
    8080:	ldr	x0, [sp, #360]
    8084:	bl	290c <BIT_lookBitsFast>
    8088:	str	x0, [sp, #336]
    808c:	ldr	x0, [sp, #336]
    8090:	lsl	x0, x0, #2
    8094:	ldr	x1, [sp, #352]
    8098:	add	x0, x1, x0
    809c:	mov	x2, #0x2                   	// #2
    80a0:	mov	x1, x0
    80a4:	ldr	x0, [sp, #368]
    80a8:	bl	22f8 <grub_memcpy>
    80ac:	ldr	x0, [sp, #336]
    80b0:	lsl	x0, x0, #2
    80b4:	ldr	x1, [sp, #352]
    80b8:	add	x0, x1, x0
    80bc:	ldrb	w0, [x0, #2]
    80c0:	mov	w1, w0
    80c4:	ldr	x0, [sp, #360]
    80c8:	bl	2960 <BIT_skipBits>
    80cc:	ldr	x0, [sp, #336]
    80d0:	lsl	x0, x0, #2
    80d4:	ldr	x1, [sp, #352]
    80d8:	add	x0, x1, x0
    80dc:	ldrb	w0, [x0, #3]
    80e0:	mov	w0, w0
    80e4:	ldr	x1, [sp, #576]
    80e8:	add	x0, x1, x0
    80ec:	str	x0, [sp, #576]
    80f0:	ldr	x0, [sp, #568]
    80f4:	bl	2990 <BIT_reloadDStream>
    80f8:	cmp	w0, #0x0
    80fc:	cset	w0, eq  // eq = none
    8100:	and	w1, w0, #0xff
    8104:	ldr	x0, [sp, #560]
    8108:	sub	x0, x0, #0x2
    810c:	ldr	x2, [sp, #576]
    8110:	cmp	x2, x0
    8114:	cset	w0, ls  // ls = plast
    8118:	and	w0, w0, #0xff
    811c:	and	w0, w1, w0
    8120:	and	w0, w0, #0xff
    8124:	cmp	w0, #0x0
    8128:	b.ne	805c <HUF_decompress4X2_usingDTable_internal+0x2008>  // b.any
    812c:	b	81c4 <HUF_decompress4X2_usingDTable_internal+0x2170>
    8130:	ldr	x0, [sp, #576]
    8134:	str	x0, [sp, #328]
    8138:	ldr	x0, [sp, #568]
    813c:	str	x0, [sp, #320]
    8140:	ldr	x0, [sp, #552]
    8144:	str	x0, [sp, #312]
    8148:	ldr	w0, [sp, #548]
    814c:	str	w0, [sp, #308]
    8150:	ldr	w1, [sp, #308]
    8154:	ldr	x0, [sp, #320]
    8158:	bl	290c <BIT_lookBitsFast>
    815c:	str	x0, [sp, #296]
    8160:	ldr	x0, [sp, #296]
    8164:	lsl	x0, x0, #2
    8168:	ldr	x1, [sp, #312]
    816c:	add	x0, x1, x0
    8170:	mov	x2, #0x2                   	// #2
    8174:	mov	x1, x0
    8178:	ldr	x0, [sp, #328]
    817c:	bl	22f8 <grub_memcpy>
    8180:	ldr	x0, [sp, #296]
    8184:	lsl	x0, x0, #2
    8188:	ldr	x1, [sp, #312]
    818c:	add	x0, x1, x0
    8190:	ldrb	w0, [x0, #2]
    8194:	mov	w1, w0
    8198:	ldr	x0, [sp, #320]
    819c:	bl	2960 <BIT_skipBits>
    81a0:	ldr	x0, [sp, #296]
    81a4:	lsl	x0, x0, #2
    81a8:	ldr	x1, [sp, #312]
    81ac:	add	x0, x1, x0
    81b0:	ldrb	w0, [x0, #3]
    81b4:	mov	w0, w0
    81b8:	ldr	x1, [sp, #576]
    81bc:	add	x0, x1, x0
    81c0:	str	x0, [sp, #576]
    81c4:	ldr	x0, [sp, #560]
    81c8:	sub	x0, x0, #0x2
    81cc:	ldr	x1, [sp, #576]
    81d0:	cmp	x1, x0
    81d4:	b.ls	8130 <HUF_decompress4X2_usingDTable_internal+0x20dc>  // b.plast
    81d8:	ldr	x1, [sp, #560]
    81dc:	ldr	x0, [sp, #576]
    81e0:	cmp	x1, x0
    81e4:	b.ls	82d8 <HUF_decompress4X2_usingDTable_internal+0x2284>  // b.plast
    81e8:	ldr	x0, [sp, #576]
    81ec:	str	x0, [sp, #288]
    81f0:	ldr	x0, [sp, #568]
    81f4:	str	x0, [sp, #280]
    81f8:	ldr	x0, [sp, #552]
    81fc:	str	x0, [sp, #272]
    8200:	ldr	w0, [sp, #548]
    8204:	str	w0, [sp, #268]
    8208:	ldr	w1, [sp, #268]
    820c:	ldr	x0, [sp, #280]
    8210:	bl	290c <BIT_lookBitsFast>
    8214:	str	x0, [sp, #256]
    8218:	ldr	x0, [sp, #256]
    821c:	lsl	x0, x0, #2
    8220:	ldr	x1, [sp, #272]
    8224:	add	x0, x1, x0
    8228:	mov	x2, #0x1                   	// #1
    822c:	mov	x1, x0
    8230:	ldr	x0, [sp, #288]
    8234:	bl	22f8 <grub_memcpy>
    8238:	ldr	x0, [sp, #256]
    823c:	lsl	x0, x0, #2
    8240:	ldr	x1, [sp, #272]
    8244:	add	x0, x1, x0
    8248:	ldrb	w0, [x0, #3]
    824c:	cmp	w0, #0x1
    8250:	b.ne	8278 <HUF_decompress4X2_usingDTable_internal+0x2224>  // b.any
    8254:	ldr	x0, [sp, #256]
    8258:	lsl	x0, x0, #2
    825c:	ldr	x1, [sp, #272]
    8260:	add	x0, x1, x0
    8264:	ldrb	w0, [x0, #2]
    8268:	mov	w1, w0
    826c:	ldr	x0, [sp, #280]
    8270:	bl	2960 <BIT_skipBits>
    8274:	b	82c4 <HUF_decompress4X2_usingDTable_internal+0x2270>
    8278:	ldr	x0, [sp, #280]
    827c:	ldr	w0, [x0, #8]
    8280:	cmp	w0, #0x3f
    8284:	b.hi	82c4 <HUF_decompress4X2_usingDTable_internal+0x2270>  // b.pmore
    8288:	ldr	x0, [sp, #256]
    828c:	lsl	x0, x0, #2
    8290:	ldr	x1, [sp, #272]
    8294:	add	x0, x1, x0
    8298:	ldrb	w0, [x0, #2]
    829c:	mov	w1, w0
    82a0:	ldr	x0, [sp, #280]
    82a4:	bl	2960 <BIT_skipBits>
    82a8:	ldr	x0, [sp, #280]
    82ac:	ldr	w0, [x0, #8]
    82b0:	cmp	w0, #0x40
    82b4:	b.ls	82c4 <HUF_decompress4X2_usingDTable_internal+0x2270>  // b.plast
    82b8:	ldr	x0, [sp, #280]
    82bc:	mov	w1, #0x40                  	// #64
    82c0:	str	w1, [x0, #8]
    82c4:	mov	w0, #0x1                   	// #1
    82c8:	mov	w0, w0
    82cc:	ldr	x1, [sp, #576]
    82d0:	add	x0, x1, x0
    82d4:	str	x0, [sp, #576]
    82d8:	add	x0, sp, #0x58
    82dc:	bl	2b14 <BIT_endOfDStream>
    82e0:	mov	w19, w0
    82e4:	add	x0, sp, #0x80
    82e8:	bl	2b14 <BIT_endOfDStream>
    82ec:	and	w19, w19, w0
    82f0:	add	x0, sp, #0xa8
    82f4:	bl	2b14 <BIT_endOfDStream>
    82f8:	and	w19, w19, w0
    82fc:	add	x0, sp, #0xd0
    8300:	bl	2b14 <BIT_endOfDStream>
    8304:	and	w0, w19, w0
    8308:	str	w0, [sp, #252]
    830c:	ldr	w0, [sp, #252]
    8310:	cmp	w0, #0x0
    8314:	b.ne	8320 <HUF_decompress4X2_usingDTable_internal+0x22cc>  // b.any
    8318:	mov	x0, #0xffffffffffffffec    	// #-20
    831c:	b	8324 <HUF_decompress4X2_usingDTable_internal+0x22d0>
    8320:	ldr	x0, [sp, #2448]
    8324:	ldr	x19, [sp, #16]
    8328:	ldp	x29, x30, [sp]
    832c:	add	sp, sp, #0x9a0
    8330:	ret

0000000000008334 <HUF_decompress1X2_usingDTable>:
    8334:	stp	x29, x30, [sp, #-80]!
    8338:	mov	x29, sp
    833c:	str	x0, [sp, #56]
    8340:	str	x1, [sp, #48]
    8344:	str	x2, [sp, #40]
    8348:	str	x3, [sp, #32]
    834c:	str	x4, [sp, #24]
    8350:	ldr	x0, [sp, #24]
    8354:	bl	2b58 <HUF_getDTableDesc>
    8358:	str	w0, [sp, #72]
    835c:	ldrb	w0, [sp, #73]
    8360:	cmp	w0, #0x1
    8364:	b.eq	8370 <HUF_decompress1X2_usingDTable+0x3c>  // b.none
    8368:	mov	x0, #0xffffffffffffffff    	// #-1
    836c:	b	838c <HUF_decompress1X2_usingDTable+0x58>
    8370:	mov	w5, #0x0                   	// #0
    8374:	ldr	x4, [sp, #24]
    8378:	ldr	x3, [sp, #32]
    837c:	ldr	x2, [sp, #40]
    8380:	ldr	x1, [sp, #48]
    8384:	ldr	x0, [sp, #56]
    8388:	bl	5a1c <HUF_decompress1X2_usingDTable_internal>
    838c:	ldp	x29, x30, [sp], #80
    8390:	ret

0000000000008394 <HUF_decompress1X2_DCtx_wksp>:
    8394:	stp	x29, x30, [sp, #-96]!
    8398:	mov	x29, sp
    839c:	str	x0, [sp, #72]
    83a0:	str	x1, [sp, #64]
    83a4:	str	x2, [sp, #56]
    83a8:	str	x3, [sp, #48]
    83ac:	str	x4, [sp, #40]
    83b0:	str	x5, [sp, #32]
    83b4:	str	x6, [sp, #24]
    83b8:	ldr	x0, [sp, #48]
    83bc:	str	x0, [sp, #88]
    83c0:	ldr	x4, [sp, #24]
    83c4:	ldr	x3, [sp, #32]
    83c8:	ldr	x2, [sp, #40]
    83cc:	ldr	x1, [sp, #48]
    83d0:	ldr	x0, [sp, #72]
    83d4:	bl	5530 <HUF_readDTableX2_wksp>
    83d8:	str	x0, [sp, #80]
    83dc:	ldr	x0, [sp, #80]
    83e0:	bl	2564 <ERR_isError>
    83e4:	cmp	w0, #0x0
    83e8:	b.eq	83f4 <HUF_decompress1X2_DCtx_wksp+0x60>  // b.none
    83ec:	ldr	x0, [sp, #80]
    83f0:	b	8448 <HUF_decompress1X2_DCtx_wksp+0xb4>
    83f4:	ldr	x1, [sp, #80]
    83f8:	ldr	x0, [sp, #40]
    83fc:	cmp	x1, x0
    8400:	b.cc	840c <HUF_decompress1X2_DCtx_wksp+0x78>  // b.lo, b.ul, b.last
    8404:	mov	x0, #0xffffffffffffffb8    	// #-72
    8408:	b	8448 <HUF_decompress1X2_DCtx_wksp+0xb4>
    840c:	ldr	x1, [sp, #88]
    8410:	ldr	x0, [sp, #80]
    8414:	add	x0, x1, x0
    8418:	str	x0, [sp, #88]
    841c:	ldr	x1, [sp, #40]
    8420:	ldr	x0, [sp, #80]
    8424:	sub	x0, x1, x0
    8428:	str	x0, [sp, #40]
    842c:	mov	w5, #0x0                   	// #0
    8430:	ldr	x4, [sp, #72]
    8434:	ldr	x3, [sp, #40]
    8438:	ldr	x2, [sp, #88]
    843c:	ldr	x1, [sp, #56]
    8440:	ldr	x0, [sp, #64]
    8444:	bl	5a1c <HUF_decompress1X2_usingDTable_internal>
    8448:	ldp	x29, x30, [sp], #96
    844c:	ret

0000000000008450 <HUF_decompress1X2_DCtx>:
    8450:	sub	sp, sp, #0x840
    8454:	stp	x29, x30, [sp]
    8458:	mov	x29, sp
    845c:	str	x0, [sp, #56]
    8460:	str	x1, [sp, #48]
    8464:	str	x2, [sp, #40]
    8468:	str	x3, [sp, #32]
    846c:	str	x4, [sp, #24]
    8470:	add	x0, sp, #0x40
    8474:	mov	x6, #0x800                 	// #2048
    8478:	mov	x5, x0
    847c:	ldr	x4, [sp, #24]
    8480:	ldr	x3, [sp, #32]
    8484:	ldr	x2, [sp, #40]
    8488:	ldr	x1, [sp, #48]
    848c:	ldr	x0, [sp, #56]
    8490:	bl	8394 <HUF_decompress1X2_DCtx_wksp>
    8494:	ldp	x29, x30, [sp]
    8498:	add	sp, sp, #0x840
    849c:	ret

00000000000084a0 <HUF_decompress1X2>:
    84a0:	mov	x12, #0x4040                	// #16448
    84a4:	sub	sp, sp, x12
    84a8:	stp	x29, x30, [sp]
    84ac:	mov	x29, sp
    84b0:	str	x0, [sp, #40]
    84b4:	str	x1, [sp, #32]
    84b8:	str	x2, [sp, #24]
    84bc:	str	x3, [sp, #16]
    84c0:	add	x0, sp, #0x38
    84c4:	mov	x1, #0x4004                	// #16388
    84c8:	mov	x2, x1
    84cc:	mov	w1, #0x0                   	// #0
    84d0:	bl	0 <memset>
    84d4:	mov	w0, #0xc                   	// #12
    84d8:	movk	w0, #0xc00, lsl #16
    84dc:	str	w0, [sp, #56]
    84e0:	add	x0, sp, #0x38
    84e4:	ldr	x4, [sp, #16]
    84e8:	ldr	x3, [sp, #24]
    84ec:	ldr	x2, [sp, #32]
    84f0:	ldr	x1, [sp, #40]
    84f4:	bl	8450 <HUF_decompress1X2_DCtx>
    84f8:	ldp	x29, x30, [sp]
    84fc:	mov	x12, #0x4040                	// #16448
    8500:	add	sp, sp, x12
    8504:	ret

0000000000008508 <HUF_decompress4X2_usingDTable>:
    8508:	stp	x29, x30, [sp, #-80]!
    850c:	mov	x29, sp
    8510:	str	x0, [sp, #56]
    8514:	str	x1, [sp, #48]
    8518:	str	x2, [sp, #40]
    851c:	str	x3, [sp, #32]
    8520:	str	x4, [sp, #24]
    8524:	ldr	x0, [sp, #24]
    8528:	bl	2b58 <HUF_getDTableDesc>
    852c:	str	w0, [sp, #72]
    8530:	ldrb	w0, [sp, #73]
    8534:	cmp	w0, #0x1
    8538:	b.eq	8544 <HUF_decompress4X2_usingDTable+0x3c>  // b.none
    853c:	mov	x0, #0xffffffffffffffff    	// #-1
    8540:	b	8560 <HUF_decompress4X2_usingDTable+0x58>
    8544:	mov	w5, #0x0                   	// #0
    8548:	ldr	x4, [sp, #24]
    854c:	ldr	x3, [sp, #32]
    8550:	ldr	x2, [sp, #40]
    8554:	ldr	x1, [sp, #48]
    8558:	ldr	x0, [sp, #56]
    855c:	bl	6054 <HUF_decompress4X2_usingDTable_internal>
    8560:	ldp	x29, x30, [sp], #80
    8564:	ret

0000000000008568 <HUF_decompress4X2_DCtx_wksp_bmi2>:
    8568:	stp	x29, x30, [sp, #-96]!
    856c:	mov	x29, sp
    8570:	str	x0, [sp, #72]
    8574:	str	x1, [sp, #64]
    8578:	str	x2, [sp, #56]
    857c:	str	x3, [sp, #48]
    8580:	str	x4, [sp, #40]
    8584:	str	x5, [sp, #32]
    8588:	str	x6, [sp, #24]
    858c:	str	w7, [sp, #20]
    8590:	ldr	x0, [sp, #48]
    8594:	str	x0, [sp, #88]
    8598:	ldr	x4, [sp, #24]
    859c:	ldr	x3, [sp, #32]
    85a0:	ldr	x2, [sp, #40]
    85a4:	ldr	x1, [sp, #48]
    85a8:	ldr	x0, [sp, #72]
    85ac:	bl	5530 <HUF_readDTableX2_wksp>
    85b0:	str	x0, [sp, #80]
    85b4:	ldr	x0, [sp, #80]
    85b8:	bl	2564 <ERR_isError>
    85bc:	cmp	w0, #0x0
    85c0:	b.eq	85cc <HUF_decompress4X2_DCtx_wksp_bmi2+0x64>  // b.none
    85c4:	ldr	x0, [sp, #80]
    85c8:	b	8620 <HUF_decompress4X2_DCtx_wksp_bmi2+0xb8>
    85cc:	ldr	x1, [sp, #80]
    85d0:	ldr	x0, [sp, #40]
    85d4:	cmp	x1, x0
    85d8:	b.cc	85e4 <HUF_decompress4X2_DCtx_wksp_bmi2+0x7c>  // b.lo, b.ul, b.last
    85dc:	mov	x0, #0xffffffffffffffb8    	// #-72
    85e0:	b	8620 <HUF_decompress4X2_DCtx_wksp_bmi2+0xb8>
    85e4:	ldr	x1, [sp, #88]
    85e8:	ldr	x0, [sp, #80]
    85ec:	add	x0, x1, x0
    85f0:	str	x0, [sp, #88]
    85f4:	ldr	x1, [sp, #40]
    85f8:	ldr	x0, [sp, #80]
    85fc:	sub	x0, x1, x0
    8600:	str	x0, [sp, #40]
    8604:	ldr	w5, [sp, #20]
    8608:	ldr	x4, [sp, #72]
    860c:	ldr	x3, [sp, #40]
    8610:	ldr	x2, [sp, #88]
    8614:	ldr	x1, [sp, #56]
    8618:	ldr	x0, [sp, #64]
    861c:	bl	6054 <HUF_decompress4X2_usingDTable_internal>
    8620:	ldp	x29, x30, [sp], #96
    8624:	ret

0000000000008628 <HUF_decompress4X2_DCtx_wksp>:
    8628:	stp	x29, x30, [sp, #-80]!
    862c:	mov	x29, sp
    8630:	str	x0, [sp, #72]
    8634:	str	x1, [sp, #64]
    8638:	str	x2, [sp, #56]
    863c:	str	x3, [sp, #48]
    8640:	str	x4, [sp, #40]
    8644:	str	x5, [sp, #32]
    8648:	str	x6, [sp, #24]
    864c:	mov	w7, #0x0                   	// #0
    8650:	ldr	x6, [sp, #24]
    8654:	ldr	x5, [sp, #32]
    8658:	ldr	x4, [sp, #40]
    865c:	ldr	x3, [sp, #48]
    8660:	ldr	x2, [sp, #56]
    8664:	ldr	x1, [sp, #64]
    8668:	ldr	x0, [sp, #72]
    866c:	bl	8568 <HUF_decompress4X2_DCtx_wksp_bmi2>
    8670:	ldp	x29, x30, [sp], #80
    8674:	ret

0000000000008678 <HUF_decompress4X2_DCtx>:
    8678:	sub	sp, sp, #0x840
    867c:	stp	x29, x30, [sp]
    8680:	mov	x29, sp
    8684:	str	x0, [sp, #56]
    8688:	str	x1, [sp, #48]
    868c:	str	x2, [sp, #40]
    8690:	str	x3, [sp, #32]
    8694:	str	x4, [sp, #24]
    8698:	add	x0, sp, #0x40
    869c:	mov	x6, #0x800                 	// #2048
    86a0:	mov	x5, x0
    86a4:	ldr	x4, [sp, #24]
    86a8:	ldr	x3, [sp, #32]
    86ac:	ldr	x2, [sp, #40]
    86b0:	ldr	x1, [sp, #48]
    86b4:	ldr	x0, [sp, #56]
    86b8:	bl	8628 <HUF_decompress4X2_DCtx_wksp>
    86bc:	ldp	x29, x30, [sp]
    86c0:	add	sp, sp, #0x840
    86c4:	ret

00000000000086c8 <HUF_decompress4X2>:
    86c8:	mov	x12, #0x4040                	// #16448
    86cc:	sub	sp, sp, x12
    86d0:	stp	x29, x30, [sp]
    86d4:	mov	x29, sp
    86d8:	str	x0, [sp, #40]
    86dc:	str	x1, [sp, #32]
    86e0:	str	x2, [sp, #24]
    86e4:	str	x3, [sp, #16]
    86e8:	add	x0, sp, #0x38
    86ec:	mov	x1, #0x4004                	// #16388
    86f0:	mov	x2, x1
    86f4:	mov	w1, #0x0                   	// #0
    86f8:	bl	0 <memset>
    86fc:	mov	w0, #0xc                   	// #12
    8700:	movk	w0, #0xc00, lsl #16
    8704:	str	w0, [sp, #56]
    8708:	add	x0, sp, #0x38
    870c:	ldr	x4, [sp, #16]
    8710:	ldr	x3, [sp, #24]
    8714:	ldr	x2, [sp, #32]
    8718:	ldr	x1, [sp, #40]
    871c:	bl	8678 <HUF_decompress4X2_DCtx>
    8720:	ldp	x29, x30, [sp]
    8724:	mov	x12, #0x4040                	// #16448
    8728:	add	sp, sp, x12
    872c:	ret

0000000000008730 <HUF_decompress1X_usingDTable>:
    8730:	stp	x29, x30, [sp, #-80]!
    8734:	mov	x29, sp
    8738:	str	x0, [sp, #56]
    873c:	str	x1, [sp, #48]
    8740:	str	x2, [sp, #40]
    8744:	str	x3, [sp, #32]
    8748:	str	x4, [sp, #24]
    874c:	ldr	x0, [sp, #24]
    8750:	bl	2b58 <HUF_getDTableDesc>
    8754:	str	w0, [sp, #72]
    8758:	ldrb	w0, [sp, #73]
    875c:	cmp	w0, #0x0
    8760:	b.eq	8784 <HUF_decompress1X_usingDTable+0x54>  // b.none
    8764:	mov	w5, #0x0                   	// #0
    8768:	ldr	x4, [sp, #24]
    876c:	ldr	x3, [sp, #32]
    8770:	ldr	x2, [sp, #40]
    8774:	ldr	x1, [sp, #48]
    8778:	ldr	x0, [sp, #56]
    877c:	bl	5a1c <HUF_decompress1X2_usingDTable_internal>
    8780:	b	87a0 <HUF_decompress1X_usingDTable+0x70>
    8784:	mov	w5, #0x0                   	// #0
    8788:	ldr	x4, [sp, #24]
    878c:	ldr	x3, [sp, #32]
    8790:	ldr	x2, [sp, #40]
    8794:	ldr	x1, [sp, #48]
    8798:	ldr	x0, [sp, #56]
    879c:	bl	2e88 <HUF_decompress1X1_usingDTable_internal>
    87a0:	ldp	x29, x30, [sp], #80
    87a4:	ret

00000000000087a8 <HUF_decompress4X_usingDTable>:
    87a8:	stp	x29, x30, [sp, #-80]!
    87ac:	mov	x29, sp
    87b0:	str	x0, [sp, #56]
    87b4:	str	x1, [sp, #48]
    87b8:	str	x2, [sp, #40]
    87bc:	str	x3, [sp, #32]
    87c0:	str	x4, [sp, #24]
    87c4:	ldr	x0, [sp, #24]
    87c8:	bl	2b58 <HUF_getDTableDesc>
    87cc:	str	w0, [sp, #72]
    87d0:	ldrb	w0, [sp, #73]
    87d4:	cmp	w0, #0x0
    87d8:	b.eq	87fc <HUF_decompress4X_usingDTable+0x54>  // b.none
    87dc:	mov	w5, #0x0                   	// #0
    87e0:	ldr	x4, [sp, #24]
    87e4:	ldr	x3, [sp, #32]
    87e8:	ldr	x2, [sp, #40]
    87ec:	ldr	x1, [sp, #48]
    87f0:	ldr	x0, [sp, #56]
    87f4:	bl	6054 <HUF_decompress4X2_usingDTable_internal>
    87f8:	b	8818 <HUF_decompress4X_usingDTable+0x70>
    87fc:	mov	w5, #0x0                   	// #0
    8800:	ldr	x4, [sp, #24]
    8804:	ldr	x3, [sp, #32]
    8808:	ldr	x2, [sp, #40]
    880c:	ldr	x1, [sp, #48]
    8810:	ldr	x0, [sp, #56]
    8814:	bl	3300 <HUF_decompress4X1_usingDTable_internal>
    8818:	ldp	x29, x30, [sp], #80
    881c:	ret

0000000000008820 <HUF_selectDecoder>:
    8820:	sub	sp, sp, #0x20
    8824:	str	x0, [sp, #8]
    8828:	str	x1, [sp]
    882c:	ldr	x1, [sp]
    8830:	ldr	x0, [sp, #8]
    8834:	cmp	x1, x0
    8838:	b.cs	8850 <HUF_selectDecoder+0x30>  // b.hs, b.nlast
    883c:	ldr	x0, [sp]
    8840:	lsl	x1, x0, #4
    8844:	ldr	x0, [sp, #8]
    8848:	udiv	x0, x1, x0
    884c:	b	8854 <HUF_selectDecoder+0x34>
    8850:	mov	w0, #0xf                   	// #15
    8854:	str	w0, [sp, #28]
    8858:	ldr	x0, [sp, #8]
    885c:	lsr	x0, x0, #8
    8860:	str	w0, [sp, #24]
    8864:	adrp	x0, 0 <grub_memcpy>
    8868:	add	x0, x0, #0x0
    886c:	ldr	x2, [x0]
    8870:	ldr	w1, [sp, #28]
    8874:	mov	x0, x1
    8878:	lsl	x0, x0, #1
    887c:	add	x0, x0, x1
    8880:	lsl	x0, x0, #3
    8884:	add	x0, x2, x0
    8888:	ldr	w2, [x0]
    888c:	adrp	x0, 0 <grub_memcpy>
    8890:	add	x0, x0, #0x0
    8894:	ldr	x3, [x0]
    8898:	ldr	w1, [sp, #28]
    889c:	mov	x0, x1
    88a0:	lsl	x0, x0, #1
    88a4:	add	x0, x0, x1
    88a8:	lsl	x0, x0, #3
    88ac:	add	x0, x3, x0
    88b0:	ldr	w1, [x0, #4]
    88b4:	ldr	w0, [sp, #24]
    88b8:	mul	w0, w1, w0
    88bc:	add	w0, w2, w0
    88c0:	str	w0, [sp, #20]
    88c4:	adrp	x0, 0 <grub_memcpy>
    88c8:	add	x0, x0, #0x0
    88cc:	ldr	x2, [x0]
    88d0:	ldr	w1, [sp, #28]
    88d4:	mov	x0, x1
    88d8:	lsl	x0, x0, #1
    88dc:	add	x0, x0, x1
    88e0:	lsl	x0, x0, #3
    88e4:	add	x0, x2, x0
    88e8:	ldr	w2, [x0, #8]
    88ec:	adrp	x0, 0 <grub_memcpy>
    88f0:	add	x0, x0, #0x0
    88f4:	ldr	x3, [x0]
    88f8:	ldr	w1, [sp, #28]
    88fc:	mov	x0, x1
    8900:	lsl	x0, x0, #1
    8904:	add	x0, x0, x1
    8908:	lsl	x0, x0, #3
    890c:	add	x0, x3, x0
    8910:	ldr	w1, [x0, #12]
    8914:	ldr	w0, [sp, #24]
    8918:	mul	w0, w1, w0
    891c:	add	w0, w2, w0
    8920:	str	w0, [sp, #16]
    8924:	ldr	w0, [sp, #16]
    8928:	lsr	w0, w0, #3
    892c:	ldr	w1, [sp, #16]
    8930:	add	w0, w1, w0
    8934:	str	w0, [sp, #16]
    8938:	ldr	w1, [sp, #16]
    893c:	ldr	w0, [sp, #20]
    8940:	cmp	w1, w0
    8944:	cset	w0, cc  // cc = lo, ul, last
    8948:	and	w0, w0, #0xff
    894c:	add	sp, sp, #0x20
    8950:	ret
    8954:	nop
	...

0000000000008960 <HUF_decompress>:
    8960:	stp	x29, x30, [sp, #-64]!
    8964:	mov	x29, sp
    8968:	str	x0, [sp, #40]
    896c:	str	x1, [sp, #32]
    8970:	str	x2, [sp, #24]
    8974:	str	x3, [sp, #16]
    8978:	ldr	x0, [sp, #32]
    897c:	cmp	x0, #0x0
    8980:	b.ne	898c <HUF_decompress+0x2c>  // b.any
    8984:	mov	x0, #0xffffffffffffffba    	// #-70
    8988:	b	8a30 <HUF_decompress+0xd0>
    898c:	ldr	x1, [sp, #16]
    8990:	ldr	x0, [sp, #32]
    8994:	cmp	x1, x0
    8998:	b.ls	89a4 <HUF_decompress+0x44>  // b.plast
    899c:	mov	x0, #0xffffffffffffffec    	// #-20
    89a0:	b	8a30 <HUF_decompress+0xd0>
    89a4:	ldr	x1, [sp, #16]
    89a8:	ldr	x0, [sp, #32]
    89ac:	cmp	x1, x0
    89b0:	b.ne	89cc <HUF_decompress+0x6c>  // b.any
    89b4:	ldr	x2, [sp, #32]
    89b8:	ldr	x1, [sp, #24]
    89bc:	ldr	x0, [sp, #40]
    89c0:	bl	22f8 <grub_memcpy>
    89c4:	ldr	x0, [sp, #32]
    89c8:	b	8a30 <HUF_decompress+0xd0>
    89cc:	ldr	x0, [sp, #16]
    89d0:	cmp	x0, #0x1
    89d4:	b.ne	89f8 <HUF_decompress+0x98>  // b.any
    89d8:	ldr	x0, [sp, #24]
    89dc:	ldrb	w0, [x0]
    89e0:	ldr	x2, [sp, #32]
    89e4:	mov	w1, w0
    89e8:	ldr	x0, [sp, #40]
    89ec:	bl	0 <grub_memset>
    89f0:	ldr	x0, [sp, #32]
    89f4:	b	8a30 <HUF_decompress+0xd0>
    89f8:	ldr	x1, [sp, #16]
    89fc:	ldr	x0, [sp, #32]
    8a00:	bl	8820 <HUF_selectDecoder>
    8a04:	str	w0, [sp, #60]
    8a08:	adrp	x0, 0 <grub_memcpy>
    8a0c:	add	x0, x0, #0x0
    8a10:	ldr	x0, [x0]
    8a14:	ldr	w1, [sp, #60]
    8a18:	ldr	x4, [x0, x1, lsl #3]
    8a1c:	ldr	x3, [sp, #16]
    8a20:	ldr	x2, [sp, #24]
    8a24:	ldr	x1, [sp, #32]
    8a28:	ldr	x0, [sp, #40]
    8a2c:	blr	x4
    8a30:	ldp	x29, x30, [sp], #64
    8a34:	ret
	...

0000000000008a40 <HUF_decompress4X_DCtx>:
    8a40:	stp	x29, x30, [sp, #-80]!
    8a44:	mov	x29, sp
    8a48:	str	x0, [sp, #56]
    8a4c:	str	x1, [sp, #48]
    8a50:	str	x2, [sp, #40]
    8a54:	str	x3, [sp, #32]
    8a58:	str	x4, [sp, #24]
    8a5c:	ldr	x0, [sp, #40]
    8a60:	cmp	x0, #0x0
    8a64:	b.ne	8a70 <HUF_decompress4X_DCtx+0x30>  // b.any
    8a68:	mov	x0, #0xffffffffffffffba    	// #-70
    8a6c:	b	8b30 <HUF_decompress4X_DCtx+0xf0>
    8a70:	ldr	x1, [sp, #24]
    8a74:	ldr	x0, [sp, #40]
    8a78:	cmp	x1, x0
    8a7c:	b.ls	8a88 <HUF_decompress4X_DCtx+0x48>  // b.plast
    8a80:	mov	x0, #0xffffffffffffffec    	// #-20
    8a84:	b	8b30 <HUF_decompress4X_DCtx+0xf0>
    8a88:	ldr	x1, [sp, #24]
    8a8c:	ldr	x0, [sp, #40]
    8a90:	cmp	x1, x0
    8a94:	b.ne	8ab0 <HUF_decompress4X_DCtx+0x70>  // b.any
    8a98:	ldr	x2, [sp, #40]
    8a9c:	ldr	x1, [sp, #32]
    8aa0:	ldr	x0, [sp, #48]
    8aa4:	bl	22f8 <grub_memcpy>
    8aa8:	ldr	x0, [sp, #40]
    8aac:	b	8b30 <HUF_decompress4X_DCtx+0xf0>
    8ab0:	ldr	x0, [sp, #24]
    8ab4:	cmp	x0, #0x1
    8ab8:	b.ne	8adc <HUF_decompress4X_DCtx+0x9c>  // b.any
    8abc:	ldr	x0, [sp, #32]
    8ac0:	ldrb	w0, [x0]
    8ac4:	ldr	x2, [sp, #40]
    8ac8:	mov	w1, w0
    8acc:	ldr	x0, [sp, #48]
    8ad0:	bl	0 <grub_memset>
    8ad4:	ldr	x0, [sp, #40]
    8ad8:	b	8b30 <HUF_decompress4X_DCtx+0xf0>
    8adc:	ldr	x1, [sp, #24]
    8ae0:	ldr	x0, [sp, #40]
    8ae4:	bl	8820 <HUF_selectDecoder>
    8ae8:	str	w0, [sp, #76]
    8aec:	ldr	w0, [sp, #76]
    8af0:	cmp	w0, #0x0
    8af4:	b.eq	8b14 <HUF_decompress4X_DCtx+0xd4>  // b.none
    8af8:	ldr	x4, [sp, #24]
    8afc:	ldr	x3, [sp, #32]
    8b00:	ldr	x2, [sp, #40]
    8b04:	ldr	x1, [sp, #48]
    8b08:	ldr	x0, [sp, #56]
    8b0c:	bl	8678 <HUF_decompress4X2_DCtx>
    8b10:	b	8b2c <HUF_decompress4X_DCtx+0xec>
    8b14:	ldr	x4, [sp, #24]
    8b18:	ldr	x3, [sp, #32]
    8b1c:	ldr	x2, [sp, #40]
    8b20:	ldr	x1, [sp, #48]
    8b24:	ldr	x0, [sp, #56]
    8b28:	bl	4fec <HUF_decompress4X1_DCtx>
    8b2c:	nop
    8b30:	ldp	x29, x30, [sp], #80
    8b34:	ret

0000000000008b38 <HUF_decompress4X_hufOnly>:
    8b38:	sub	sp, sp, #0x840
    8b3c:	stp	x29, x30, [sp]
    8b40:	mov	x29, sp
    8b44:	str	x0, [sp, #56]
    8b48:	str	x1, [sp, #48]
    8b4c:	str	x2, [sp, #40]
    8b50:	str	x3, [sp, #32]
    8b54:	str	x4, [sp, #24]
    8b58:	add	x0, sp, #0x40
    8b5c:	mov	x6, #0x800                 	// #2048
    8b60:	mov	x5, x0
    8b64:	ldr	x4, [sp, #24]
    8b68:	ldr	x3, [sp, #32]
    8b6c:	ldr	x2, [sp, #40]
    8b70:	ldr	x1, [sp, #48]
    8b74:	ldr	x0, [sp, #56]
    8b78:	bl	8b88 <HUF_decompress4X_hufOnly_wksp>
    8b7c:	ldp	x29, x30, [sp]
    8b80:	add	sp, sp, #0x840
    8b84:	ret

0000000000008b88 <HUF_decompress4X_hufOnly_wksp>:
    8b88:	stp	x29, x30, [sp, #-96]!
    8b8c:	mov	x29, sp
    8b90:	str	x0, [sp, #72]
    8b94:	str	x1, [sp, #64]
    8b98:	str	x2, [sp, #56]
    8b9c:	str	x3, [sp, #48]
    8ba0:	str	x4, [sp, #40]
    8ba4:	str	x5, [sp, #32]
    8ba8:	str	x6, [sp, #24]
    8bac:	ldr	x0, [sp, #56]
    8bb0:	cmp	x0, #0x0
    8bb4:	b.ne	8bc0 <HUF_decompress4X_hufOnly_wksp+0x38>  // b.any
    8bb8:	mov	x0, #0xffffffffffffffba    	// #-70
    8bbc:	b	8c38 <HUF_decompress4X_hufOnly_wksp+0xb0>
    8bc0:	ldr	x0, [sp, #40]
    8bc4:	cmp	x0, #0x0
    8bc8:	b.ne	8bd4 <HUF_decompress4X_hufOnly_wksp+0x4c>  // b.any
    8bcc:	mov	x0, #0xffffffffffffffec    	// #-20
    8bd0:	b	8c38 <HUF_decompress4X_hufOnly_wksp+0xb0>
    8bd4:	ldr	x1, [sp, #40]
    8bd8:	ldr	x0, [sp, #56]
    8bdc:	bl	8820 <HUF_selectDecoder>
    8be0:	str	w0, [sp, #92]
    8be4:	ldr	w0, [sp, #92]
    8be8:	cmp	w0, #0x0
    8bec:	b.eq	8c14 <HUF_decompress4X_hufOnly_wksp+0x8c>  // b.none
    8bf0:	ldr	x6, [sp, #24]
    8bf4:	ldr	x5, [sp, #32]
    8bf8:	ldr	x4, [sp, #40]
    8bfc:	ldr	x3, [sp, #48]
    8c00:	ldr	x2, [sp, #56]
    8c04:	ldr	x1, [sp, #64]
    8c08:	ldr	x0, [sp, #72]
    8c0c:	bl	8628 <HUF_decompress4X2_DCtx_wksp>
    8c10:	b	8c34 <HUF_decompress4X_hufOnly_wksp+0xac>
    8c14:	ldr	x6, [sp, #24]
    8c18:	ldr	x5, [sp, #32]
    8c1c:	ldr	x4, [sp, #40]
    8c20:	ldr	x3, [sp, #48]
    8c24:	ldr	x2, [sp, #56]
    8c28:	ldr	x1, [sp, #64]
    8c2c:	ldr	x0, [sp, #72]
    8c30:	bl	4f9c <HUF_decompress4X1_DCtx_wksp>
    8c34:	nop
    8c38:	ldp	x29, x30, [sp], #96
    8c3c:	ret

0000000000008c40 <HUF_decompress1X_DCtx_wksp>:
    8c40:	stp	x29, x30, [sp, #-96]!
    8c44:	mov	x29, sp
    8c48:	str	x0, [sp, #72]
    8c4c:	str	x1, [sp, #64]
    8c50:	str	x2, [sp, #56]
    8c54:	str	x3, [sp, #48]
    8c58:	str	x4, [sp, #40]
    8c5c:	str	x5, [sp, #32]
    8c60:	str	x6, [sp, #24]
    8c64:	ldr	x0, [sp, #56]
    8c68:	cmp	x0, #0x0
    8c6c:	b.ne	8c78 <HUF_decompress1X_DCtx_wksp+0x38>  // b.any
    8c70:	mov	x0, #0xffffffffffffffba    	// #-70
    8c74:	b	8d48 <HUF_decompress1X_DCtx_wksp+0x108>
    8c78:	ldr	x1, [sp, #40]
    8c7c:	ldr	x0, [sp, #56]
    8c80:	cmp	x1, x0
    8c84:	b.ls	8c90 <HUF_decompress1X_DCtx_wksp+0x50>  // b.plast
    8c88:	mov	x0, #0xffffffffffffffec    	// #-20
    8c8c:	b	8d48 <HUF_decompress1X_DCtx_wksp+0x108>
    8c90:	ldr	x1, [sp, #40]
    8c94:	ldr	x0, [sp, #56]
    8c98:	cmp	x1, x0
    8c9c:	b.ne	8cb8 <HUF_decompress1X_DCtx_wksp+0x78>  // b.any
    8ca0:	ldr	x2, [sp, #56]
    8ca4:	ldr	x1, [sp, #48]
    8ca8:	ldr	x0, [sp, #64]
    8cac:	bl	22f8 <grub_memcpy>
    8cb0:	ldr	x0, [sp, #56]
    8cb4:	b	8d48 <HUF_decompress1X_DCtx_wksp+0x108>
    8cb8:	ldr	x0, [sp, #40]
    8cbc:	cmp	x0, #0x1
    8cc0:	b.ne	8ce4 <HUF_decompress1X_DCtx_wksp+0xa4>  // b.any
    8cc4:	ldr	x0, [sp, #48]
    8cc8:	ldrb	w0, [x0]
    8ccc:	ldr	x2, [sp, #56]
    8cd0:	mov	w1, w0
    8cd4:	ldr	x0, [sp, #64]
    8cd8:	bl	0 <grub_memset>
    8cdc:	ldr	x0, [sp, #56]
    8ce0:	b	8d48 <HUF_decompress1X_DCtx_wksp+0x108>
    8ce4:	ldr	x1, [sp, #40]
    8ce8:	ldr	x0, [sp, #56]
    8cec:	bl	8820 <HUF_selectDecoder>
    8cf0:	str	w0, [sp, #92]
    8cf4:	ldr	w0, [sp, #92]
    8cf8:	cmp	w0, #0x0
    8cfc:	b.eq	8d24 <HUF_decompress1X_DCtx_wksp+0xe4>  // b.none
    8d00:	ldr	x6, [sp, #24]
    8d04:	ldr	x5, [sp, #32]
    8d08:	ldr	x4, [sp, #40]
    8d0c:	ldr	x3, [sp, #48]
    8d10:	ldr	x2, [sp, #56]
    8d14:	ldr	x1, [sp, #64]
    8d18:	ldr	x0, [sp, #72]
    8d1c:	bl	8394 <HUF_decompress1X2_DCtx_wksp>
    8d20:	b	8d44 <HUF_decompress1X_DCtx_wksp+0x104>
    8d24:	ldr	x6, [sp, #24]
    8d28:	ldr	x5, [sp, #32]
    8d2c:	ldr	x4, [sp, #40]
    8d30:	ldr	x3, [sp, #48]
    8d34:	ldr	x2, [sp, #56]
    8d38:	ldr	x1, [sp, #64]
    8d3c:	ldr	x0, [sp, #72]
    8d40:	bl	4d08 <HUF_decompress1X1_DCtx_wksp>
    8d44:	nop
    8d48:	ldp	x29, x30, [sp], #96
    8d4c:	ret

0000000000008d50 <HUF_decompress1X_DCtx>:
    8d50:	sub	sp, sp, #0x840
    8d54:	stp	x29, x30, [sp]
    8d58:	mov	x29, sp
    8d5c:	str	x0, [sp, #56]
    8d60:	str	x1, [sp, #48]
    8d64:	str	x2, [sp, #40]
    8d68:	str	x3, [sp, #32]
    8d6c:	str	x4, [sp, #24]
    8d70:	add	x0, sp, #0x40
    8d74:	mov	x6, #0x800                 	// #2048
    8d78:	mov	x5, x0
    8d7c:	ldr	x4, [sp, #24]
    8d80:	ldr	x3, [sp, #32]
    8d84:	ldr	x2, [sp, #40]
    8d88:	ldr	x1, [sp, #48]
    8d8c:	ldr	x0, [sp, #56]
    8d90:	bl	8c40 <HUF_decompress1X_DCtx_wksp>
    8d94:	ldp	x29, x30, [sp]
    8d98:	add	sp, sp, #0x840
    8d9c:	ret

0000000000008da0 <HUF_decompress1X_usingDTable_bmi2>:
    8da0:	stp	x29, x30, [sp, #-80]!
    8da4:	mov	x29, sp
    8da8:	str	x0, [sp, #56]
    8dac:	str	x1, [sp, #48]
    8db0:	str	x2, [sp, #40]
    8db4:	str	x3, [sp, #32]
    8db8:	str	x4, [sp, #24]
    8dbc:	str	w5, [sp, #20]
    8dc0:	ldr	x0, [sp, #24]
    8dc4:	bl	2b58 <HUF_getDTableDesc>
    8dc8:	str	w0, [sp, #72]
    8dcc:	ldrb	w0, [sp, #73]
    8dd0:	cmp	w0, #0x0
    8dd4:	b.eq	8df8 <HUF_decompress1X_usingDTable_bmi2+0x58>  // b.none
    8dd8:	ldr	w5, [sp, #20]
    8ddc:	ldr	x4, [sp, #24]
    8de0:	ldr	x3, [sp, #32]
    8de4:	ldr	x2, [sp, #40]
    8de8:	ldr	x1, [sp, #48]
    8dec:	ldr	x0, [sp, #56]
    8df0:	bl	5a1c <HUF_decompress1X2_usingDTable_internal>
    8df4:	b	8e14 <HUF_decompress1X_usingDTable_bmi2+0x74>
    8df8:	ldr	w5, [sp, #20]
    8dfc:	ldr	x4, [sp, #24]
    8e00:	ldr	x3, [sp, #32]
    8e04:	ldr	x2, [sp, #40]
    8e08:	ldr	x1, [sp, #48]
    8e0c:	ldr	x0, [sp, #56]
    8e10:	bl	2e88 <HUF_decompress1X1_usingDTable_internal>
    8e14:	ldp	x29, x30, [sp], #80
    8e18:	ret

0000000000008e1c <HUF_decompress1X1_DCtx_wksp_bmi2>:
    8e1c:	stp	x29, x30, [sp, #-96]!
    8e20:	mov	x29, sp
    8e24:	str	x0, [sp, #72]
    8e28:	str	x1, [sp, #64]
    8e2c:	str	x2, [sp, #56]
    8e30:	str	x3, [sp, #48]
    8e34:	str	x4, [sp, #40]
    8e38:	str	x5, [sp, #32]
    8e3c:	str	x6, [sp, #24]
    8e40:	str	w7, [sp, #20]
    8e44:	ldr	x0, [sp, #48]
    8e48:	str	x0, [sp, #88]
    8e4c:	ldr	x4, [sp, #24]
    8e50:	ldr	x3, [sp, #32]
    8e54:	ldr	x2, [sp, #40]
    8e58:	ldr	x1, [sp, #48]
    8e5c:	ldr	x0, [sp, #72]
    8e60:	bl	2b80 <HUF_readDTableX1_wksp>
    8e64:	str	x0, [sp, #80]
    8e68:	ldr	x0, [sp, #80]
    8e6c:	bl	2564 <ERR_isError>
    8e70:	cmp	w0, #0x0
    8e74:	b.eq	8e80 <HUF_decompress1X1_DCtx_wksp_bmi2+0x64>  // b.none
    8e78:	ldr	x0, [sp, #80]
    8e7c:	b	8ed4 <HUF_decompress1X1_DCtx_wksp_bmi2+0xb8>
    8e80:	ldr	x1, [sp, #80]
    8e84:	ldr	x0, [sp, #40]
    8e88:	cmp	x1, x0
    8e8c:	b.cc	8e98 <HUF_decompress1X1_DCtx_wksp_bmi2+0x7c>  // b.lo, b.ul, b.last
    8e90:	mov	x0, #0xffffffffffffffb8    	// #-72
    8e94:	b	8ed4 <HUF_decompress1X1_DCtx_wksp_bmi2+0xb8>
    8e98:	ldr	x1, [sp, #88]
    8e9c:	ldr	x0, [sp, #80]
    8ea0:	add	x0, x1, x0
    8ea4:	str	x0, [sp, #88]
    8ea8:	ldr	x1, [sp, #40]
    8eac:	ldr	x0, [sp, #80]
    8eb0:	sub	x0, x1, x0
    8eb4:	str	x0, [sp, #40]
    8eb8:	ldr	w5, [sp, #20]
    8ebc:	ldr	x4, [sp, #72]
    8ec0:	ldr	x3, [sp, #40]
    8ec4:	ldr	x2, [sp, #88]
    8ec8:	ldr	x1, [sp, #56]
    8ecc:	ldr	x0, [sp, #64]
    8ed0:	bl	2e88 <HUF_decompress1X1_usingDTable_internal>
    8ed4:	ldp	x29, x30, [sp], #96
    8ed8:	ret

0000000000008edc <HUF_decompress4X_usingDTable_bmi2>:
    8edc:	stp	x29, x30, [sp, #-80]!
    8ee0:	mov	x29, sp
    8ee4:	str	x0, [sp, #56]
    8ee8:	str	x1, [sp, #48]
    8eec:	str	x2, [sp, #40]
    8ef0:	str	x3, [sp, #32]
    8ef4:	str	x4, [sp, #24]
    8ef8:	str	w5, [sp, #20]
    8efc:	ldr	x0, [sp, #24]
    8f00:	bl	2b58 <HUF_getDTableDesc>
    8f04:	str	w0, [sp, #72]
    8f08:	ldrb	w0, [sp, #73]
    8f0c:	cmp	w0, #0x0
    8f10:	b.eq	8f34 <HUF_decompress4X_usingDTable_bmi2+0x58>  // b.none
    8f14:	ldr	w5, [sp, #20]
    8f18:	ldr	x4, [sp, #24]
    8f1c:	ldr	x3, [sp, #32]
    8f20:	ldr	x2, [sp, #40]
    8f24:	ldr	x1, [sp, #48]
    8f28:	ldr	x0, [sp, #56]
    8f2c:	bl	6054 <HUF_decompress4X2_usingDTable_internal>
    8f30:	b	8f50 <HUF_decompress4X_usingDTable_bmi2+0x74>
    8f34:	ldr	w5, [sp, #20]
    8f38:	ldr	x4, [sp, #24]
    8f3c:	ldr	x3, [sp, #32]
    8f40:	ldr	x2, [sp, #40]
    8f44:	ldr	x1, [sp, #48]
    8f48:	ldr	x0, [sp, #56]
    8f4c:	bl	3300 <HUF_decompress4X1_usingDTable_internal>
    8f50:	ldp	x29, x30, [sp], #80
    8f54:	ret

0000000000008f58 <HUF_decompress4X_hufOnly_wksp_bmi2>:
    8f58:	stp	x29, x30, [sp, #-96]!
    8f5c:	mov	x29, sp
    8f60:	str	x0, [sp, #72]
    8f64:	str	x1, [sp, #64]
    8f68:	str	x2, [sp, #56]
    8f6c:	str	x3, [sp, #48]
    8f70:	str	x4, [sp, #40]
    8f74:	str	x5, [sp, #32]
    8f78:	str	x6, [sp, #24]
    8f7c:	str	w7, [sp, #20]
    8f80:	ldr	x0, [sp, #56]
    8f84:	cmp	x0, #0x0
    8f88:	b.ne	8f94 <HUF_decompress4X_hufOnly_wksp_bmi2+0x3c>  // b.any
    8f8c:	mov	x0, #0xffffffffffffffba    	// #-70
    8f90:	b	9014 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    8f94:	ldr	x0, [sp, #40]
    8f98:	cmp	x0, #0x0
    8f9c:	b.ne	8fa8 <HUF_decompress4X_hufOnly_wksp_bmi2+0x50>  // b.any
    8fa0:	mov	x0, #0xffffffffffffffec    	// #-20
    8fa4:	b	9014 <HUF_decompress4X_hufOnly_wksp_bmi2+0xbc>
    8fa8:	ldr	x1, [sp, #40]
    8fac:	ldr	x0, [sp, #56]
    8fb0:	bl	8820 <HUF_selectDecoder>
    8fb4:	str	w0, [sp, #92]
    8fb8:	ldr	w0, [sp, #92]
    8fbc:	cmp	w0, #0x0
    8fc0:	b.eq	8fec <HUF_decompress4X_hufOnly_wksp_bmi2+0x94>  // b.none
    8fc4:	ldr	w7, [sp, #20]
    8fc8:	ldr	x6, [sp, #24]
    8fcc:	ldr	x5, [sp, #32]
    8fd0:	ldr	x4, [sp, #40]
    8fd4:	ldr	x3, [sp, #48]
    8fd8:	ldr	x2, [sp, #56]
    8fdc:	ldr	x1, [sp, #64]
    8fe0:	ldr	x0, [sp, #72]
    8fe4:	bl	8568 <HUF_decompress4X2_DCtx_wksp_bmi2>
    8fe8:	b	9010 <HUF_decompress4X_hufOnly_wksp_bmi2+0xb8>
    8fec:	ldr	w7, [sp, #20]
    8ff0:	ldr	x6, [sp, #24]
    8ff4:	ldr	x5, [sp, #32]
    8ff8:	ldr	x4, [sp, #40]
    8ffc:	ldr	x3, [sp, #48]
    9000:	ldr	x2, [sp, #56]
    9004:	ldr	x1, [sp, #64]
    9008:	ldr	x0, [sp, #72]
    900c:	bl	4edc <HUF_decompress4X1_DCtx_wksp_bmi2>
    9010:	nop
    9014:	ldp	x29, x30, [sp], #96
    9018:	ret
    901c:	nop

0000000000009020 <grub_memcpy>:
    9020:	stp	x29, x30, [sp, #-48]!
    9024:	mov	x29, sp
    9028:	str	x0, [sp, #40]
    902c:	str	x1, [sp, #32]
    9030:	str	x2, [sp, #24]
    9034:	ldr	x2, [sp, #24]
    9038:	ldr	x1, [sp, #32]
    903c:	ldr	x0, [sp, #40]
    9040:	bl	0 <grub_memmove>
    9044:	ldp	x29, x30, [sp], #48
    9048:	ret

000000000000904c <free>:
    904c:	stp	x29, x30, [sp, #-32]!
    9050:	mov	x29, sp
    9054:	str	x0, [sp, #24]
    9058:	ldr	x0, [sp, #24]
    905c:	bl	0 <grub_free>
    9060:	nop
    9064:	ldp	x29, x30, [sp], #32
    9068:	ret

000000000000906c <malloc>:
    906c:	stp	x29, x30, [sp, #-32]!
    9070:	mov	x29, sp
    9074:	str	x0, [sp, #24]
    9078:	ldr	x0, [sp, #24]
    907c:	bl	0 <grub_malloc>
    9080:	ldp	x29, x30, [sp], #32
    9084:	ret

0000000000009088 <XXH_malloc>:
    9088:	stp	x29, x30, [sp, #-32]!
    908c:	mov	x29, sp
    9090:	str	x0, [sp, #24]
    9094:	ldr	x0, [sp, #24]
    9098:	bl	906c <malloc>
    909c:	ldp	x29, x30, [sp], #32
    90a0:	ret

00000000000090a4 <XXH_free>:
    90a4:	stp	x29, x30, [sp, #-32]!
    90a8:	mov	x29, sp
    90ac:	str	x0, [sp, #24]
    90b0:	ldr	x0, [sp, #24]
    90b4:	bl	904c <free>
    90b8:	nop
    90bc:	ldp	x29, x30, [sp], #32
    90c0:	ret

00000000000090c4 <XXH_memcpy>:
    90c4:	stp	x29, x30, [sp, #-48]!
    90c8:	mov	x29, sp
    90cc:	str	x0, [sp, #40]
    90d0:	str	x1, [sp, #32]
    90d4:	str	x2, [sp, #24]
    90d8:	ldr	x2, [sp, #24]
    90dc:	ldr	x1, [sp, #32]
    90e0:	ldr	x0, [sp, #40]
    90e4:	bl	9020 <grub_memcpy>
    90e8:	ldp	x29, x30, [sp], #48
    90ec:	ret

00000000000090f0 <XXH_read32>:
    90f0:	stp	x29, x30, [sp, #-48]!
    90f4:	mov	x29, sp
    90f8:	str	x0, [sp, #24]
    90fc:	add	x0, sp, #0x2c
    9100:	mov	x2, #0x4                   	// #4
    9104:	ldr	x1, [sp, #24]
    9108:	bl	9020 <grub_memcpy>
    910c:	ldr	w0, [sp, #44]
    9110:	ldp	x29, x30, [sp], #48
    9114:	ret

0000000000009118 <XXH_read64>:
    9118:	stp	x29, x30, [sp, #-48]!
    911c:	mov	x29, sp
    9120:	str	x0, [sp, #24]
    9124:	add	x0, sp, #0x28
    9128:	mov	x2, #0x8                   	// #8
    912c:	ldr	x1, [sp, #24]
    9130:	bl	9020 <grub_memcpy>
    9134:	ldr	x0, [sp, #40]
    9138:	ldp	x29, x30, [sp], #48
    913c:	ret

0000000000009140 <XXH_readBE32>:
    9140:	stp	x29, x30, [sp, #-32]!
    9144:	mov	x29, sp
    9148:	str	x0, [sp, #24]
    914c:	adrp	x0, 0 <grub_memcpy>
    9150:	add	x0, x0, #0x0
    9154:	ldr	x0, [x0]
    9158:	ldrb	w0, [x0]
    915c:	cmp	w0, #0x0
    9160:	b.eq	9174 <XXH_readBE32+0x34>  // b.none
    9164:	ldr	x0, [sp, #24]
    9168:	bl	90f0 <XXH_read32>
    916c:	rev	w0, w0
    9170:	b	917c <XXH_readBE32+0x3c>
    9174:	ldr	x0, [sp, #24]
    9178:	bl	90f0 <XXH_read32>
    917c:	ldp	x29, x30, [sp], #32
    9180:	ret
    9184:	nop
	...

0000000000009190 <XXH_readBE64>:
    9190:	stp	x29, x30, [sp, #-32]!
    9194:	mov	x29, sp
    9198:	str	x0, [sp, #24]
    919c:	adrp	x0, 0 <grub_memcpy>
    91a0:	add	x0, x0, #0x0
    91a4:	ldr	x0, [x0]
    91a8:	ldrb	w0, [x0]
    91ac:	cmp	w0, #0x0
    91b0:	b.eq	91c4 <XXH_readBE64+0x34>  // b.none
    91b4:	ldr	x0, [sp, #24]
    91b8:	bl	9118 <XXH_read64>
    91bc:	rev	x0, x0
    91c0:	b	91cc <XXH_readBE64+0x3c>
    91c4:	ldr	x0, [sp, #24]
    91c8:	bl	9118 <XXH_read64>
    91cc:	ldp	x29, x30, [sp], #32
    91d0:	ret
    91d4:	nop
	...

00000000000091e0 <XXH_versionNumber>:
    91e0:	mov	w0, #0x25a                 	// #602
    91e4:	ret

00000000000091e8 <XXH32_copyState>:
    91e8:	stp	x29, x30, [sp, #-32]!
    91ec:	mov	x29, sp
    91f0:	str	x0, [sp, #24]
    91f4:	str	x1, [sp, #16]
    91f8:	mov	x2, #0x30                  	// #48
    91fc:	ldr	x1, [sp, #16]
    9200:	ldr	x0, [sp, #24]
    9204:	bl	9020 <grub_memcpy>
    9208:	nop
    920c:	ldp	x29, x30, [sp], #32
    9210:	ret

0000000000009214 <XXH64_copyState>:
    9214:	stp	x29, x30, [sp, #-32]!
    9218:	mov	x29, sp
    921c:	str	x0, [sp, #24]
    9220:	str	x1, [sp, #16]
    9224:	mov	x2, #0x58                  	// #88
    9228:	ldr	x1, [sp, #16]
    922c:	ldr	x0, [sp, #24]
    9230:	bl	9020 <grub_memcpy>
    9234:	nop
    9238:	ldp	x29, x30, [sp], #32
    923c:	ret

0000000000009240 <XXH32_round>:
    9240:	sub	sp, sp, #0x10
    9244:	str	w0, [sp, #12]
    9248:	str	w1, [sp, #8]
    924c:	mov	w1, #0xca77                	// #51831
    9250:	movk	w1, #0x85eb, lsl #16
    9254:	ldr	w0, [sp, #8]
    9258:	mul	w0, w1, w0
    925c:	ldr	w1, [sp, #12]
    9260:	add	w0, w1, w0
    9264:	str	w0, [sp, #12]
    9268:	ldr	w0, [sp, #12]
    926c:	ror	w0, w0, #19
    9270:	str	w0, [sp, #12]
    9274:	mov	w0, #0x79b1                	// #31153
    9278:	movk	w0, #0x9e37, lsl #16
    927c:	ldr	w1, [sp, #12]
    9280:	mul	w0, w1, w0
    9284:	str	w0, [sp, #12]
    9288:	ldr	w0, [sp, #12]
    928c:	add	sp, sp, #0x10
    9290:	ret

0000000000009294 <XXH32>:
    9294:	sub	sp, sp, #0x2c0
    9298:	stp	x29, x30, [sp]
    929c:	mov	x29, sp
    92a0:	str	x0, [sp, #40]
    92a4:	str	x1, [sp, #32]
    92a8:	str	w2, [sp, #28]
    92ac:	adrp	x0, 0 <grub_memcpy>
    92b0:	add	x0, x0, #0x0
    92b4:	ldr	x0, [x0]
    92b8:	ldrb	w0, [x0]
    92bc:	str	w0, [sp, #700]
    92c0:	ldr	x0, [sp, #40]
    92c4:	and	x0, x0, #0x3
    92c8:	cmp	x0, #0x0
    92cc:	b.ne	9c98 <XXH32+0xa04>  // b.any
    92d0:	ldr	w0, [sp, #700]
    92d4:	cmp	w0, #0x1
    92d8:	b.ne	97bc <XXH32+0x528>  // b.any
    92dc:	ldr	x0, [sp, #40]
    92e0:	str	x0, [sp, #688]
    92e4:	ldr	x0, [sp, #32]
    92e8:	str	x0, [sp, #680]
    92ec:	ldr	w0, [sp, #28]
    92f0:	str	w0, [sp, #676]
    92f4:	mov	w0, #0x1                   	// #1
    92f8:	str	w0, [sp, #672]
    92fc:	str	wzr, [sp, #668]
    9300:	ldr	x0, [sp, #688]
    9304:	str	x0, [sp, #656]
    9308:	ldr	x1, [sp, #656]
    930c:	ldr	x0, [sp, #680]
    9310:	add	x0, x1, x0
    9314:	str	x0, [sp, #648]
    9318:	ldr	x0, [sp, #680]
    931c:	cmp	x0, #0xf
    9320:	b.ls	9604 <XXH32+0x370>  // b.plast
    9324:	ldr	x0, [sp, #648]
    9328:	sub	x0, x0, #0x10
    932c:	str	x0, [sp, #640]
    9330:	mov	w1, #0x79b1                	// #31153
    9334:	movk	w1, #0x9e37, lsl #16
    9338:	ldr	w0, [sp, #676]
    933c:	add	w1, w1, w0
    9340:	mov	w0, #0xca77                	// #51831
    9344:	movk	w0, #0x85eb, lsl #16
    9348:	add	w0, w1, w0
    934c:	str	w0, [sp, #636]
    9350:	mov	w0, #0xca77                	// #51831
    9354:	movk	w0, #0x85eb, lsl #16
    9358:	ldr	w1, [sp, #676]
    935c:	add	w0, w1, w0
    9360:	str	w0, [sp, #632]
    9364:	ldr	w0, [sp, #676]
    9368:	str	w0, [sp, #628]
    936c:	mov	w0, #0x79b1                	// #31153
    9370:	movk	w0, #0x9e37, lsl #16
    9374:	ldr	w1, [sp, #676]
    9378:	sub	w0, w1, w0
    937c:	str	w0, [sp, #624]
    9380:	ldr	x0, [sp, #656]
    9384:	str	x0, [sp, #616]
    9388:	ldr	w0, [sp, #672]
    938c:	str	w0, [sp, #612]
    9390:	ldr	w0, [sp, #668]
    9394:	str	w0, [sp, #608]
    9398:	ldr	w0, [sp, #608]
    939c:	cmp	w0, #0x1
    93a0:	b.ne	93cc <XXH32+0x138>  // b.any
    93a4:	ldr	w0, [sp, #612]
    93a8:	cmp	w0, #0x1
    93ac:	b.ne	93bc <XXH32+0x128>  // b.any
    93b0:	ldr	x0, [sp, #616]
    93b4:	bl	90f0 <XXH_read32>
    93b8:	b	93f4 <XXH32+0x160>
    93bc:	ldr	x0, [sp, #616]
    93c0:	bl	90f0 <XXH_read32>
    93c4:	rev	w0, w0
    93c8:	b	93f4 <XXH32+0x160>
    93cc:	ldr	w0, [sp, #612]
    93d0:	cmp	w0, #0x1
    93d4:	b.ne	93e4 <XXH32+0x150>  // b.any
    93d8:	ldr	x0, [sp, #616]
    93dc:	ldr	w0, [x0]
    93e0:	b	93f0 <XXH32+0x15c>
    93e4:	ldr	x0, [sp, #616]
    93e8:	ldr	w0, [x0]
    93ec:	rev	w0, w0
    93f0:	nop
    93f4:	mov	w1, w0
    93f8:	ldr	w0, [sp, #636]
    93fc:	bl	9240 <XXH32_round>
    9400:	str	w0, [sp, #636]
    9404:	ldr	x0, [sp, #656]
    9408:	add	x0, x0, #0x4
    940c:	str	x0, [sp, #656]
    9410:	ldr	x0, [sp, #656]
    9414:	str	x0, [sp, #600]
    9418:	ldr	w0, [sp, #672]
    941c:	str	w0, [sp, #596]
    9420:	ldr	w0, [sp, #668]
    9424:	str	w0, [sp, #592]
    9428:	ldr	w0, [sp, #592]
    942c:	cmp	w0, #0x1
    9430:	b.ne	945c <XXH32+0x1c8>  // b.any
    9434:	ldr	w0, [sp, #596]
    9438:	cmp	w0, #0x1
    943c:	b.ne	944c <XXH32+0x1b8>  // b.any
    9440:	ldr	x0, [sp, #600]
    9444:	bl	90f0 <XXH_read32>
    9448:	b	9484 <XXH32+0x1f0>
    944c:	ldr	x0, [sp, #600]
    9450:	bl	90f0 <XXH_read32>
    9454:	rev	w0, w0
    9458:	b	9484 <XXH32+0x1f0>
    945c:	ldr	w0, [sp, #596]
    9460:	cmp	w0, #0x1
    9464:	b.ne	9474 <XXH32+0x1e0>  // b.any
    9468:	ldr	x0, [sp, #600]
    946c:	ldr	w0, [x0]
    9470:	b	9480 <XXH32+0x1ec>
    9474:	ldr	x0, [sp, #600]
    9478:	ldr	w0, [x0]
    947c:	rev	w0, w0
    9480:	nop
    9484:	mov	w1, w0
    9488:	ldr	w0, [sp, #632]
    948c:	bl	9240 <XXH32_round>
    9490:	str	w0, [sp, #632]
    9494:	ldr	x0, [sp, #656]
    9498:	add	x0, x0, #0x4
    949c:	str	x0, [sp, #656]
    94a0:	ldr	x0, [sp, #656]
    94a4:	str	x0, [sp, #584]
    94a8:	ldr	w0, [sp, #672]
    94ac:	str	w0, [sp, #580]
    94b0:	ldr	w0, [sp, #668]
    94b4:	str	w0, [sp, #576]
    94b8:	ldr	w0, [sp, #576]
    94bc:	cmp	w0, #0x1
    94c0:	b.ne	94ec <XXH32+0x258>  // b.any
    94c4:	ldr	w0, [sp, #580]
    94c8:	cmp	w0, #0x1
    94cc:	b.ne	94dc <XXH32+0x248>  // b.any
    94d0:	ldr	x0, [sp, #584]
    94d4:	bl	90f0 <XXH_read32>
    94d8:	b	9514 <XXH32+0x280>
    94dc:	ldr	x0, [sp, #584]
    94e0:	bl	90f0 <XXH_read32>
    94e4:	rev	w0, w0
    94e8:	b	9514 <XXH32+0x280>
    94ec:	ldr	w0, [sp, #580]
    94f0:	cmp	w0, #0x1
    94f4:	b.ne	9504 <XXH32+0x270>  // b.any
    94f8:	ldr	x0, [sp, #584]
    94fc:	ldr	w0, [x0]
    9500:	b	9510 <XXH32+0x27c>
    9504:	ldr	x0, [sp, #584]
    9508:	ldr	w0, [x0]
    950c:	rev	w0, w0
    9510:	nop
    9514:	mov	w1, w0
    9518:	ldr	w0, [sp, #628]
    951c:	bl	9240 <XXH32_round>
    9520:	str	w0, [sp, #628]
    9524:	ldr	x0, [sp, #656]
    9528:	add	x0, x0, #0x4
    952c:	str	x0, [sp, #656]
    9530:	ldr	x0, [sp, #656]
    9534:	str	x0, [sp, #568]
    9538:	ldr	w0, [sp, #672]
    953c:	str	w0, [sp, #564]
    9540:	ldr	w0, [sp, #668]
    9544:	str	w0, [sp, #560]
    9548:	ldr	w0, [sp, #560]
    954c:	cmp	w0, #0x1
    9550:	b.ne	957c <XXH32+0x2e8>  // b.any
    9554:	ldr	w0, [sp, #564]
    9558:	cmp	w0, #0x1
    955c:	b.ne	956c <XXH32+0x2d8>  // b.any
    9560:	ldr	x0, [sp, #568]
    9564:	bl	90f0 <XXH_read32>
    9568:	b	95a4 <XXH32+0x310>
    956c:	ldr	x0, [sp, #568]
    9570:	bl	90f0 <XXH_read32>
    9574:	rev	w0, w0
    9578:	b	95a4 <XXH32+0x310>
    957c:	ldr	w0, [sp, #564]
    9580:	cmp	w0, #0x1
    9584:	b.ne	9594 <XXH32+0x300>  // b.any
    9588:	ldr	x0, [sp, #568]
    958c:	ldr	w0, [x0]
    9590:	b	95a0 <XXH32+0x30c>
    9594:	ldr	x0, [sp, #568]
    9598:	ldr	w0, [x0]
    959c:	rev	w0, w0
    95a0:	nop
    95a4:	mov	w1, w0
    95a8:	ldr	w0, [sp, #624]
    95ac:	bl	9240 <XXH32_round>
    95b0:	str	w0, [sp, #624]
    95b4:	ldr	x0, [sp, #656]
    95b8:	add	x0, x0, #0x4
    95bc:	str	x0, [sp, #656]
    95c0:	ldr	x1, [sp, #640]
    95c4:	ldr	x0, [sp, #656]
    95c8:	cmp	x1, x0
    95cc:	b.cs	9380 <XXH32+0xec>  // b.hs, b.nlast
    95d0:	ldr	w0, [sp, #636]
    95d4:	ror	w1, w0, #31
    95d8:	ldr	w0, [sp, #632]
    95dc:	ror	w0, w0, #25
    95e0:	add	w1, w1, w0
    95e4:	ldr	w0, [sp, #628]
    95e8:	ror	w0, w0, #20
    95ec:	add	w1, w1, w0
    95f0:	ldr	w0, [sp, #624]
    95f4:	ror	w0, w0, #14
    95f8:	add	w0, w1, w0
    95fc:	str	w0, [sp, #556]
    9600:	b	9618 <XXH32+0x384>
    9604:	mov	w0, #0x67b1                	// #26545
    9608:	movk	w0, #0x1656, lsl #16
    960c:	ldr	w1, [sp, #676]
    9610:	add	w0, w1, w0
    9614:	str	w0, [sp, #556]
    9618:	ldr	x0, [sp, #680]
    961c:	mov	w1, w0
    9620:	ldr	w0, [sp, #556]
    9624:	add	w0, w0, w1
    9628:	str	w0, [sp, #556]
    962c:	b	96e0 <XXH32+0x44c>
    9630:	ldr	x0, [sp, #656]
    9634:	str	x0, [sp, #544]
    9638:	ldr	w0, [sp, #672]
    963c:	str	w0, [sp, #540]
    9640:	ldr	w0, [sp, #668]
    9644:	str	w0, [sp, #536]
    9648:	ldr	w0, [sp, #536]
    964c:	cmp	w0, #0x1
    9650:	b.ne	967c <XXH32+0x3e8>  // b.any
    9654:	ldr	w0, [sp, #540]
    9658:	cmp	w0, #0x1
    965c:	b.ne	966c <XXH32+0x3d8>  // b.any
    9660:	ldr	x0, [sp, #544]
    9664:	bl	90f0 <XXH_read32>
    9668:	b	96a4 <XXH32+0x410>
    966c:	ldr	x0, [sp, #544]
    9670:	bl	90f0 <XXH_read32>
    9674:	rev	w0, w0
    9678:	b	96a4 <XXH32+0x410>
    967c:	ldr	w0, [sp, #540]
    9680:	cmp	w0, #0x1
    9684:	b.ne	9694 <XXH32+0x400>  // b.any
    9688:	ldr	x0, [sp, #544]
    968c:	ldr	w0, [x0]
    9690:	b	96a0 <XXH32+0x40c>
    9694:	ldr	x0, [sp, #544]
    9698:	ldr	w0, [x0]
    969c:	rev	w0, w0
    96a0:	nop
    96a4:	mov	w1, #0xae3d                	// #44605
    96a8:	movk	w1, #0xc2b2, lsl #16
    96ac:	mul	w0, w0, w1
    96b0:	ldr	w1, [sp, #556]
    96b4:	add	w0, w1, w0
    96b8:	str	w0, [sp, #556]
    96bc:	ldr	w0, [sp, #556]
    96c0:	ror	w1, w0, #15
    96c4:	mov	w0, #0xeb2f                	// #60207
    96c8:	movk	w0, #0x27d4, lsl #16
    96cc:	mul	w0, w1, w0
    96d0:	str	w0, [sp, #556]
    96d4:	ldr	x0, [sp, #656]
    96d8:	add	x0, x0, #0x4
    96dc:	str	x0, [sp, #656]
    96e0:	ldr	x0, [sp, #656]
    96e4:	add	x0, x0, #0x4
    96e8:	ldr	x1, [sp, #648]
    96ec:	cmp	x1, x0
    96f0:	b.cs	9630 <XXH32+0x39c>  // b.hs, b.nlast
    96f4:	b	9740 <XXH32+0x4ac>
    96f8:	ldr	x0, [sp, #656]
    96fc:	ldrb	w0, [x0]
    9700:	mov	w1, w0
    9704:	mov	w0, #0x67b1                	// #26545
    9708:	movk	w0, #0x1656, lsl #16
    970c:	mul	w0, w1, w0
    9710:	ldr	w1, [sp, #556]
    9714:	add	w0, w1, w0
    9718:	str	w0, [sp, #556]
    971c:	ldr	w0, [sp, #556]
    9720:	ror	w1, w0, #21
    9724:	mov	w0, #0x79b1                	// #31153
    9728:	movk	w0, #0x9e37, lsl #16
    972c:	mul	w0, w1, w0
    9730:	str	w0, [sp, #556]
    9734:	ldr	x0, [sp, #656]
    9738:	add	x0, x0, #0x1
    973c:	str	x0, [sp, #656]
    9740:	ldr	x1, [sp, #648]
    9744:	ldr	x0, [sp, #656]
    9748:	cmp	x1, x0
    974c:	b.hi	96f8 <XXH32+0x464>  // b.pmore
    9750:	ldr	w0, [sp, #556]
    9754:	lsr	w0, w0, #15
    9758:	ldr	w1, [sp, #556]
    975c:	eor	w0, w1, w0
    9760:	str	w0, [sp, #556]
    9764:	mov	w0, #0xca77                	// #51831
    9768:	movk	w0, #0x85eb, lsl #16
    976c:	ldr	w1, [sp, #556]
    9770:	mul	w0, w1, w0
    9774:	str	w0, [sp, #556]
    9778:	ldr	w0, [sp, #556]
    977c:	lsr	w0, w0, #13
    9780:	ldr	w1, [sp, #556]
    9784:	eor	w0, w1, w0
    9788:	str	w0, [sp, #556]
    978c:	mov	w0, #0xae3d                	// #44605
    9790:	movk	w0, #0xc2b2, lsl #16
    9794:	ldr	w1, [sp, #556]
    9798:	mul	w0, w1, w0
    979c:	str	w0, [sp, #556]
    97a0:	ldr	w0, [sp, #556]
    97a4:	lsr	w0, w0, #16
    97a8:	ldr	w1, [sp, #556]
    97ac:	eor	w0, w1, w0
    97b0:	str	w0, [sp, #556]
    97b4:	ldr	w0, [sp, #556]
    97b8:	b	a668 <XXH32+0x13d4>
    97bc:	ldr	x0, [sp, #40]
    97c0:	str	x0, [sp, #528]
    97c4:	ldr	x0, [sp, #32]
    97c8:	str	x0, [sp, #520]
    97cc:	ldr	w0, [sp, #28]
    97d0:	str	w0, [sp, #516]
    97d4:	str	wzr, [sp, #512]
    97d8:	str	wzr, [sp, #508]
    97dc:	ldr	x0, [sp, #528]
    97e0:	str	x0, [sp, #496]
    97e4:	ldr	x1, [sp, #496]
    97e8:	ldr	x0, [sp, #520]
    97ec:	add	x0, x1, x0
    97f0:	str	x0, [sp, #488]
    97f4:	ldr	x0, [sp, #520]
    97f8:	cmp	x0, #0xf
    97fc:	b.ls	9ae0 <XXH32+0x84c>  // b.plast
    9800:	ldr	x0, [sp, #488]
    9804:	sub	x0, x0, #0x10
    9808:	str	x0, [sp, #480]
    980c:	mov	w1, #0x79b1                	// #31153
    9810:	movk	w1, #0x9e37, lsl #16
    9814:	ldr	w0, [sp, #516]
    9818:	add	w1, w1, w0
    981c:	mov	w0, #0xca77                	// #51831
    9820:	movk	w0, #0x85eb, lsl #16
    9824:	add	w0, w1, w0
    9828:	str	w0, [sp, #476]
    982c:	mov	w0, #0xca77                	// #51831
    9830:	movk	w0, #0x85eb, lsl #16
    9834:	ldr	w1, [sp, #516]
    9838:	add	w0, w1, w0
    983c:	str	w0, [sp, #472]
    9840:	ldr	w0, [sp, #516]
    9844:	str	w0, [sp, #468]
    9848:	mov	w0, #0x79b1                	// #31153
    984c:	movk	w0, #0x9e37, lsl #16
    9850:	ldr	w1, [sp, #516]
    9854:	sub	w0, w1, w0
    9858:	str	w0, [sp, #464]
    985c:	ldr	x0, [sp, #496]
    9860:	str	x0, [sp, #456]
    9864:	ldr	w0, [sp, #512]
    9868:	str	w0, [sp, #452]
    986c:	ldr	w0, [sp, #508]
    9870:	str	w0, [sp, #448]
    9874:	ldr	w0, [sp, #448]
    9878:	cmp	w0, #0x1
    987c:	b.ne	98a8 <XXH32+0x614>  // b.any
    9880:	ldr	w0, [sp, #452]
    9884:	cmp	w0, #0x1
    9888:	b.ne	9898 <XXH32+0x604>  // b.any
    988c:	ldr	x0, [sp, #456]
    9890:	bl	90f0 <XXH_read32>
    9894:	b	98d0 <XXH32+0x63c>
    9898:	ldr	x0, [sp, #456]
    989c:	bl	90f0 <XXH_read32>
    98a0:	rev	w0, w0
    98a4:	b	98d0 <XXH32+0x63c>
    98a8:	ldr	w0, [sp, #452]
    98ac:	cmp	w0, #0x1
    98b0:	b.ne	98c0 <XXH32+0x62c>  // b.any
    98b4:	ldr	x0, [sp, #456]
    98b8:	ldr	w0, [x0]
    98bc:	b	98cc <XXH32+0x638>
    98c0:	ldr	x0, [sp, #456]
    98c4:	ldr	w0, [x0]
    98c8:	rev	w0, w0
    98cc:	nop
    98d0:	mov	w1, w0
    98d4:	ldr	w0, [sp, #476]
    98d8:	bl	9240 <XXH32_round>
    98dc:	str	w0, [sp, #476]
    98e0:	ldr	x0, [sp, #496]
    98e4:	add	x0, x0, #0x4
    98e8:	str	x0, [sp, #496]
    98ec:	ldr	x0, [sp, #496]
    98f0:	str	x0, [sp, #440]
    98f4:	ldr	w0, [sp, #512]
    98f8:	str	w0, [sp, #436]
    98fc:	ldr	w0, [sp, #508]
    9900:	str	w0, [sp, #432]
    9904:	ldr	w0, [sp, #432]
    9908:	cmp	w0, #0x1
    990c:	b.ne	9938 <XXH32+0x6a4>  // b.any
    9910:	ldr	w0, [sp, #436]
    9914:	cmp	w0, #0x1
    9918:	b.ne	9928 <XXH32+0x694>  // b.any
    991c:	ldr	x0, [sp, #440]
    9920:	bl	90f0 <XXH_read32>
    9924:	b	9960 <XXH32+0x6cc>
    9928:	ldr	x0, [sp, #440]
    992c:	bl	90f0 <XXH_read32>
    9930:	rev	w0, w0
    9934:	b	9960 <XXH32+0x6cc>
    9938:	ldr	w0, [sp, #436]
    993c:	cmp	w0, #0x1
    9940:	b.ne	9950 <XXH32+0x6bc>  // b.any
    9944:	ldr	x0, [sp, #440]
    9948:	ldr	w0, [x0]
    994c:	b	995c <XXH32+0x6c8>
    9950:	ldr	x0, [sp, #440]
    9954:	ldr	w0, [x0]
    9958:	rev	w0, w0
    995c:	nop
    9960:	mov	w1, w0
    9964:	ldr	w0, [sp, #472]
    9968:	bl	9240 <XXH32_round>
    996c:	str	w0, [sp, #472]
    9970:	ldr	x0, [sp, #496]
    9974:	add	x0, x0, #0x4
    9978:	str	x0, [sp, #496]
    997c:	ldr	x0, [sp, #496]
    9980:	str	x0, [sp, #424]
    9984:	ldr	w0, [sp, #512]
    9988:	str	w0, [sp, #420]
    998c:	ldr	w0, [sp, #508]
    9990:	str	w0, [sp, #416]
    9994:	ldr	w0, [sp, #416]
    9998:	cmp	w0, #0x1
    999c:	b.ne	99c8 <XXH32+0x734>  // b.any
    99a0:	ldr	w0, [sp, #420]
    99a4:	cmp	w0, #0x1
    99a8:	b.ne	99b8 <XXH32+0x724>  // b.any
    99ac:	ldr	x0, [sp, #424]
    99b0:	bl	90f0 <XXH_read32>
    99b4:	b	99f0 <XXH32+0x75c>
    99b8:	ldr	x0, [sp, #424]
    99bc:	bl	90f0 <XXH_read32>
    99c0:	rev	w0, w0
    99c4:	b	99f0 <XXH32+0x75c>
    99c8:	ldr	w0, [sp, #420]
    99cc:	cmp	w0, #0x1
    99d0:	b.ne	99e0 <XXH32+0x74c>  // b.any
    99d4:	ldr	x0, [sp, #424]
    99d8:	ldr	w0, [x0]
    99dc:	b	99ec <XXH32+0x758>
    99e0:	ldr	x0, [sp, #424]
    99e4:	ldr	w0, [x0]
    99e8:	rev	w0, w0
    99ec:	nop
    99f0:	mov	w1, w0
    99f4:	ldr	w0, [sp, #468]
    99f8:	bl	9240 <XXH32_round>
    99fc:	str	w0, [sp, #468]
    9a00:	ldr	x0, [sp, #496]
    9a04:	add	x0, x0, #0x4
    9a08:	str	x0, [sp, #496]
    9a0c:	ldr	x0, [sp, #496]
    9a10:	str	x0, [sp, #408]
    9a14:	ldr	w0, [sp, #512]
    9a18:	str	w0, [sp, #404]
    9a1c:	ldr	w0, [sp, #508]
    9a20:	str	w0, [sp, #400]
    9a24:	ldr	w0, [sp, #400]
    9a28:	cmp	w0, #0x1
    9a2c:	b.ne	9a58 <XXH32+0x7c4>  // b.any
    9a30:	ldr	w0, [sp, #404]
    9a34:	cmp	w0, #0x1
    9a38:	b.ne	9a48 <XXH32+0x7b4>  // b.any
    9a3c:	ldr	x0, [sp, #408]
    9a40:	bl	90f0 <XXH_read32>
    9a44:	b	9a80 <XXH32+0x7ec>
    9a48:	ldr	x0, [sp, #408]
    9a4c:	bl	90f0 <XXH_read32>
    9a50:	rev	w0, w0
    9a54:	b	9a80 <XXH32+0x7ec>
    9a58:	ldr	w0, [sp, #404]
    9a5c:	cmp	w0, #0x1
    9a60:	b.ne	9a70 <XXH32+0x7dc>  // b.any
    9a64:	ldr	x0, [sp, #408]
    9a68:	ldr	w0, [x0]
    9a6c:	b	9a7c <XXH32+0x7e8>
    9a70:	ldr	x0, [sp, #408]
    9a74:	ldr	w0, [x0]
    9a78:	rev	w0, w0
    9a7c:	nop
    9a80:	mov	w1, w0
    9a84:	ldr	w0, [sp, #464]
    9a88:	bl	9240 <XXH32_round>
    9a8c:	str	w0, [sp, #464]
    9a90:	ldr	x0, [sp, #496]
    9a94:	add	x0, x0, #0x4
    9a98:	str	x0, [sp, #496]
    9a9c:	ldr	x1, [sp, #480]
    9aa0:	ldr	x0, [sp, #496]
    9aa4:	cmp	x1, x0
    9aa8:	b.cs	985c <XXH32+0x5c8>  // b.hs, b.nlast
    9aac:	ldr	w0, [sp, #476]
    9ab0:	ror	w1, w0, #31
    9ab4:	ldr	w0, [sp, #472]
    9ab8:	ror	w0, w0, #25
    9abc:	add	w1, w1, w0
    9ac0:	ldr	w0, [sp, #468]
    9ac4:	ror	w0, w0, #20
    9ac8:	add	w1, w1, w0
    9acc:	ldr	w0, [sp, #464]
    9ad0:	ror	w0, w0, #14
    9ad4:	add	w0, w1, w0
    9ad8:	str	w0, [sp, #396]
    9adc:	b	9af4 <XXH32+0x860>
    9ae0:	mov	w0, #0x67b1                	// #26545
    9ae4:	movk	w0, #0x1656, lsl #16
    9ae8:	ldr	w1, [sp, #516]
    9aec:	add	w0, w1, w0
    9af0:	str	w0, [sp, #396]
    9af4:	ldr	x0, [sp, #520]
    9af8:	mov	w1, w0
    9afc:	ldr	w0, [sp, #396]
    9b00:	add	w0, w0, w1
    9b04:	str	w0, [sp, #396]
    9b08:	b	9bbc <XXH32+0x928>
    9b0c:	ldr	x0, [sp, #496]
    9b10:	str	x0, [sp, #384]
    9b14:	ldr	w0, [sp, #512]
    9b18:	str	w0, [sp, #380]
    9b1c:	ldr	w0, [sp, #508]
    9b20:	str	w0, [sp, #376]
    9b24:	ldr	w0, [sp, #376]
    9b28:	cmp	w0, #0x1
    9b2c:	b.ne	9b58 <XXH32+0x8c4>  // b.any
    9b30:	ldr	w0, [sp, #380]
    9b34:	cmp	w0, #0x1
    9b38:	b.ne	9b48 <XXH32+0x8b4>  // b.any
    9b3c:	ldr	x0, [sp, #384]
    9b40:	bl	90f0 <XXH_read32>
    9b44:	b	9b80 <XXH32+0x8ec>
    9b48:	ldr	x0, [sp, #384]
    9b4c:	bl	90f0 <XXH_read32>
    9b50:	rev	w0, w0
    9b54:	b	9b80 <XXH32+0x8ec>
    9b58:	ldr	w0, [sp, #380]
    9b5c:	cmp	w0, #0x1
    9b60:	b.ne	9b70 <XXH32+0x8dc>  // b.any
    9b64:	ldr	x0, [sp, #384]
    9b68:	ldr	w0, [x0]
    9b6c:	b	9b7c <XXH32+0x8e8>
    9b70:	ldr	x0, [sp, #384]
    9b74:	ldr	w0, [x0]
    9b78:	rev	w0, w0
    9b7c:	nop
    9b80:	mov	w1, #0xae3d                	// #44605
    9b84:	movk	w1, #0xc2b2, lsl #16
    9b88:	mul	w0, w0, w1
    9b8c:	ldr	w1, [sp, #396]
    9b90:	add	w0, w1, w0
    9b94:	str	w0, [sp, #396]
    9b98:	ldr	w0, [sp, #396]
    9b9c:	ror	w1, w0, #15
    9ba0:	mov	w0, #0xeb2f                	// #60207
    9ba4:	movk	w0, #0x27d4, lsl #16
    9ba8:	mul	w0, w1, w0
    9bac:	str	w0, [sp, #396]
    9bb0:	ldr	x0, [sp, #496]
    9bb4:	add	x0, x0, #0x4
    9bb8:	str	x0, [sp, #496]
    9bbc:	ldr	x0, [sp, #496]
    9bc0:	add	x0, x0, #0x4
    9bc4:	ldr	x1, [sp, #488]
    9bc8:	cmp	x1, x0
    9bcc:	b.cs	9b0c <XXH32+0x878>  // b.hs, b.nlast
    9bd0:	b	9c1c <XXH32+0x988>
    9bd4:	ldr	x0, [sp, #496]
    9bd8:	ldrb	w0, [x0]
    9bdc:	mov	w1, w0
    9be0:	mov	w0, #0x67b1                	// #26545
    9be4:	movk	w0, #0x1656, lsl #16
    9be8:	mul	w0, w1, w0
    9bec:	ldr	w1, [sp, #396]
    9bf0:	add	w0, w1, w0
    9bf4:	str	w0, [sp, #396]
    9bf8:	ldr	w0, [sp, #396]
    9bfc:	ror	w1, w0, #21
    9c00:	mov	w0, #0x79b1                	// #31153
    9c04:	movk	w0, #0x9e37, lsl #16
    9c08:	mul	w0, w1, w0
    9c0c:	str	w0, [sp, #396]
    9c10:	ldr	x0, [sp, #496]
    9c14:	add	x0, x0, #0x1
    9c18:	str	x0, [sp, #496]
    9c1c:	ldr	x1, [sp, #488]
    9c20:	ldr	x0, [sp, #496]
    9c24:	cmp	x1, x0
    9c28:	b.hi	9bd4 <XXH32+0x940>  // b.pmore
    9c2c:	ldr	w0, [sp, #396]
    9c30:	lsr	w0, w0, #15
    9c34:	ldr	w1, [sp, #396]
    9c38:	eor	w0, w1, w0
    9c3c:	str	w0, [sp, #396]
    9c40:	mov	w0, #0xca77                	// #51831
    9c44:	movk	w0, #0x85eb, lsl #16
    9c48:	ldr	w1, [sp, #396]
    9c4c:	mul	w0, w1, w0
    9c50:	str	w0, [sp, #396]
    9c54:	ldr	w0, [sp, #396]
    9c58:	lsr	w0, w0, #13
    9c5c:	ldr	w1, [sp, #396]
    9c60:	eor	w0, w1, w0
    9c64:	str	w0, [sp, #396]
    9c68:	mov	w0, #0xae3d                	// #44605
    9c6c:	movk	w0, #0xc2b2, lsl #16
    9c70:	ldr	w1, [sp, #396]
    9c74:	mul	w0, w1, w0
    9c78:	str	w0, [sp, #396]
    9c7c:	ldr	w0, [sp, #396]
    9c80:	lsr	w0, w0, #16
    9c84:	ldr	w1, [sp, #396]
    9c88:	eor	w0, w1, w0
    9c8c:	str	w0, [sp, #396]
    9c90:	ldr	w0, [sp, #396]
    9c94:	b	a668 <XXH32+0x13d4>
    9c98:	ldr	w0, [sp, #700]
    9c9c:	cmp	w0, #0x1
    9ca0:	b.ne	a188 <XXH32+0xef4>  // b.any
    9ca4:	ldr	x0, [sp, #40]
    9ca8:	str	x0, [sp, #368]
    9cac:	ldr	x0, [sp, #32]
    9cb0:	str	x0, [sp, #360]
    9cb4:	ldr	w0, [sp, #28]
    9cb8:	str	w0, [sp, #356]
    9cbc:	mov	w0, #0x1                   	// #1
    9cc0:	str	w0, [sp, #352]
    9cc4:	mov	w0, #0x1                   	// #1
    9cc8:	str	w0, [sp, #348]
    9ccc:	ldr	x0, [sp, #368]
    9cd0:	str	x0, [sp, #336]
    9cd4:	ldr	x1, [sp, #336]
    9cd8:	ldr	x0, [sp, #360]
    9cdc:	add	x0, x1, x0
    9ce0:	str	x0, [sp, #328]
    9ce4:	ldr	x0, [sp, #360]
    9ce8:	cmp	x0, #0xf
    9cec:	b.ls	9fd0 <XXH32+0xd3c>  // b.plast
    9cf0:	ldr	x0, [sp, #328]
    9cf4:	sub	x0, x0, #0x10
    9cf8:	str	x0, [sp, #320]
    9cfc:	mov	w1, #0x79b1                	// #31153
    9d00:	movk	w1, #0x9e37, lsl #16
    9d04:	ldr	w0, [sp, #356]
    9d08:	add	w1, w1, w0
    9d0c:	mov	w0, #0xca77                	// #51831
    9d10:	movk	w0, #0x85eb, lsl #16
    9d14:	add	w0, w1, w0
    9d18:	str	w0, [sp, #316]
    9d1c:	mov	w0, #0xca77                	// #51831
    9d20:	movk	w0, #0x85eb, lsl #16
    9d24:	ldr	w1, [sp, #356]
    9d28:	add	w0, w1, w0
    9d2c:	str	w0, [sp, #312]
    9d30:	ldr	w0, [sp, #356]
    9d34:	str	w0, [sp, #308]
    9d38:	mov	w0, #0x79b1                	// #31153
    9d3c:	movk	w0, #0x9e37, lsl #16
    9d40:	ldr	w1, [sp, #356]
    9d44:	sub	w0, w1, w0
    9d48:	str	w0, [sp, #304]
    9d4c:	ldr	x0, [sp, #336]
    9d50:	str	x0, [sp, #296]
    9d54:	ldr	w0, [sp, #352]
    9d58:	str	w0, [sp, #292]
    9d5c:	ldr	w0, [sp, #348]
    9d60:	str	w0, [sp, #288]
    9d64:	ldr	w0, [sp, #288]
    9d68:	cmp	w0, #0x1
    9d6c:	b.ne	9d98 <XXH32+0xb04>  // b.any
    9d70:	ldr	w0, [sp, #292]
    9d74:	cmp	w0, #0x1
    9d78:	b.ne	9d88 <XXH32+0xaf4>  // b.any
    9d7c:	ldr	x0, [sp, #296]
    9d80:	bl	90f0 <XXH_read32>
    9d84:	b	9dc0 <XXH32+0xb2c>
    9d88:	ldr	x0, [sp, #296]
    9d8c:	bl	90f0 <XXH_read32>
    9d90:	rev	w0, w0
    9d94:	b	9dc0 <XXH32+0xb2c>
    9d98:	ldr	w0, [sp, #292]
    9d9c:	cmp	w0, #0x1
    9da0:	b.ne	9db0 <XXH32+0xb1c>  // b.any
    9da4:	ldr	x0, [sp, #296]
    9da8:	ldr	w0, [x0]
    9dac:	b	9dbc <XXH32+0xb28>
    9db0:	ldr	x0, [sp, #296]
    9db4:	ldr	w0, [x0]
    9db8:	rev	w0, w0
    9dbc:	nop
    9dc0:	mov	w1, w0
    9dc4:	ldr	w0, [sp, #316]
    9dc8:	bl	9240 <XXH32_round>
    9dcc:	str	w0, [sp, #316]
    9dd0:	ldr	x0, [sp, #336]
    9dd4:	add	x0, x0, #0x4
    9dd8:	str	x0, [sp, #336]
    9ddc:	ldr	x0, [sp, #336]
    9de0:	str	x0, [sp, #280]
    9de4:	ldr	w0, [sp, #352]
    9de8:	str	w0, [sp, #276]
    9dec:	ldr	w0, [sp, #348]
    9df0:	str	w0, [sp, #272]
    9df4:	ldr	w0, [sp, #272]
    9df8:	cmp	w0, #0x1
    9dfc:	b.ne	9e28 <XXH32+0xb94>  // b.any
    9e00:	ldr	w0, [sp, #276]
    9e04:	cmp	w0, #0x1
    9e08:	b.ne	9e18 <XXH32+0xb84>  // b.any
    9e0c:	ldr	x0, [sp, #280]
    9e10:	bl	90f0 <XXH_read32>
    9e14:	b	9e50 <XXH32+0xbbc>
    9e18:	ldr	x0, [sp, #280]
    9e1c:	bl	90f0 <XXH_read32>
    9e20:	rev	w0, w0
    9e24:	b	9e50 <XXH32+0xbbc>
    9e28:	ldr	w0, [sp, #276]
    9e2c:	cmp	w0, #0x1
    9e30:	b.ne	9e40 <XXH32+0xbac>  // b.any
    9e34:	ldr	x0, [sp, #280]
    9e38:	ldr	w0, [x0]
    9e3c:	b	9e4c <XXH32+0xbb8>
    9e40:	ldr	x0, [sp, #280]
    9e44:	ldr	w0, [x0]
    9e48:	rev	w0, w0
    9e4c:	nop
    9e50:	mov	w1, w0
    9e54:	ldr	w0, [sp, #312]
    9e58:	bl	9240 <XXH32_round>
    9e5c:	str	w0, [sp, #312]
    9e60:	ldr	x0, [sp, #336]
    9e64:	add	x0, x0, #0x4
    9e68:	str	x0, [sp, #336]
    9e6c:	ldr	x0, [sp, #336]
    9e70:	str	x0, [sp, #264]
    9e74:	ldr	w0, [sp, #352]
    9e78:	str	w0, [sp, #260]
    9e7c:	ldr	w0, [sp, #348]
    9e80:	str	w0, [sp, #256]
    9e84:	ldr	w0, [sp, #256]
    9e88:	cmp	w0, #0x1
    9e8c:	b.ne	9eb8 <XXH32+0xc24>  // b.any
    9e90:	ldr	w0, [sp, #260]
    9e94:	cmp	w0, #0x1
    9e98:	b.ne	9ea8 <XXH32+0xc14>  // b.any
    9e9c:	ldr	x0, [sp, #264]
    9ea0:	bl	90f0 <XXH_read32>
    9ea4:	b	9ee0 <XXH32+0xc4c>
    9ea8:	ldr	x0, [sp, #264]
    9eac:	bl	90f0 <XXH_read32>
    9eb0:	rev	w0, w0
    9eb4:	b	9ee0 <XXH32+0xc4c>
    9eb8:	ldr	w0, [sp, #260]
    9ebc:	cmp	w0, #0x1
    9ec0:	b.ne	9ed0 <XXH32+0xc3c>  // b.any
    9ec4:	ldr	x0, [sp, #264]
    9ec8:	ldr	w0, [x0]
    9ecc:	b	9edc <XXH32+0xc48>
    9ed0:	ldr	x0, [sp, #264]
    9ed4:	ldr	w0, [x0]
    9ed8:	rev	w0, w0
    9edc:	nop
    9ee0:	mov	w1, w0
    9ee4:	ldr	w0, [sp, #308]
    9ee8:	bl	9240 <XXH32_round>
    9eec:	str	w0, [sp, #308]
    9ef0:	ldr	x0, [sp, #336]
    9ef4:	add	x0, x0, #0x4
    9ef8:	str	x0, [sp, #336]
    9efc:	ldr	x0, [sp, #336]
    9f00:	str	x0, [sp, #248]
    9f04:	ldr	w0, [sp, #352]
    9f08:	str	w0, [sp, #244]
    9f0c:	ldr	w0, [sp, #348]
    9f10:	str	w0, [sp, #240]
    9f14:	ldr	w0, [sp, #240]
    9f18:	cmp	w0, #0x1
    9f1c:	b.ne	9f48 <XXH32+0xcb4>  // b.any
    9f20:	ldr	w0, [sp, #244]
    9f24:	cmp	w0, #0x1
    9f28:	b.ne	9f38 <XXH32+0xca4>  // b.any
    9f2c:	ldr	x0, [sp, #248]
    9f30:	bl	90f0 <XXH_read32>
    9f34:	b	9f70 <XXH32+0xcdc>
    9f38:	ldr	x0, [sp, #248]
    9f3c:	bl	90f0 <XXH_read32>
    9f40:	rev	w0, w0
    9f44:	b	9f70 <XXH32+0xcdc>
    9f48:	ldr	w0, [sp, #244]
    9f4c:	cmp	w0, #0x1
    9f50:	b.ne	9f60 <XXH32+0xccc>  // b.any
    9f54:	ldr	x0, [sp, #248]
    9f58:	ldr	w0, [x0]
    9f5c:	b	9f6c <XXH32+0xcd8>
    9f60:	ldr	x0, [sp, #248]
    9f64:	ldr	w0, [x0]
    9f68:	rev	w0, w0
    9f6c:	nop
    9f70:	mov	w1, w0
    9f74:	ldr	w0, [sp, #304]
    9f78:	bl	9240 <XXH32_round>
    9f7c:	str	w0, [sp, #304]
    9f80:	ldr	x0, [sp, #336]
    9f84:	add	x0, x0, #0x4
    9f88:	str	x0, [sp, #336]
    9f8c:	ldr	x1, [sp, #320]
    9f90:	ldr	x0, [sp, #336]
    9f94:	cmp	x1, x0
    9f98:	b.cs	9d4c <XXH32+0xab8>  // b.hs, b.nlast
    9f9c:	ldr	w0, [sp, #316]
    9fa0:	ror	w1, w0, #31
    9fa4:	ldr	w0, [sp, #312]
    9fa8:	ror	w0, w0, #25
    9fac:	add	w1, w1, w0
    9fb0:	ldr	w0, [sp, #308]
    9fb4:	ror	w0, w0, #20
    9fb8:	add	w1, w1, w0
    9fbc:	ldr	w0, [sp, #304]
    9fc0:	ror	w0, w0, #14
    9fc4:	add	w0, w1, w0
    9fc8:	str	w0, [sp, #236]
    9fcc:	b	9fe4 <XXH32+0xd50>
    9fd0:	mov	w0, #0x67b1                	// #26545
    9fd4:	movk	w0, #0x1656, lsl #16
    9fd8:	ldr	w1, [sp, #356]
    9fdc:	add	w0, w1, w0
    9fe0:	str	w0, [sp, #236]
    9fe4:	ldr	x0, [sp, #360]
    9fe8:	mov	w1, w0
    9fec:	ldr	w0, [sp, #236]
    9ff0:	add	w0, w0, w1
    9ff4:	str	w0, [sp, #236]
    9ff8:	b	a0ac <XXH32+0xe18>
    9ffc:	ldr	x0, [sp, #336]
    a000:	str	x0, [sp, #224]
    a004:	ldr	w0, [sp, #352]
    a008:	str	w0, [sp, #220]
    a00c:	ldr	w0, [sp, #348]
    a010:	str	w0, [sp, #216]
    a014:	ldr	w0, [sp, #216]
    a018:	cmp	w0, #0x1
    a01c:	b.ne	a048 <XXH32+0xdb4>  // b.any
    a020:	ldr	w0, [sp, #220]
    a024:	cmp	w0, #0x1
    a028:	b.ne	a038 <XXH32+0xda4>  // b.any
    a02c:	ldr	x0, [sp, #224]
    a030:	bl	90f0 <XXH_read32>
    a034:	b	a070 <XXH32+0xddc>
    a038:	ldr	x0, [sp, #224]
    a03c:	bl	90f0 <XXH_read32>
    a040:	rev	w0, w0
    a044:	b	a070 <XXH32+0xddc>
    a048:	ldr	w0, [sp, #220]
    a04c:	cmp	w0, #0x1
    a050:	b.ne	a060 <XXH32+0xdcc>  // b.any
    a054:	ldr	x0, [sp, #224]
    a058:	ldr	w0, [x0]
    a05c:	b	a06c <XXH32+0xdd8>
    a060:	ldr	x0, [sp, #224]
    a064:	ldr	w0, [x0]
    a068:	rev	w0, w0
    a06c:	nop
    a070:	mov	w1, #0xae3d                	// #44605
    a074:	movk	w1, #0xc2b2, lsl #16
    a078:	mul	w0, w0, w1
    a07c:	ldr	w1, [sp, #236]
    a080:	add	w0, w1, w0
    a084:	str	w0, [sp, #236]
    a088:	ldr	w0, [sp, #236]
    a08c:	ror	w1, w0, #15
    a090:	mov	w0, #0xeb2f                	// #60207
    a094:	movk	w0, #0x27d4, lsl #16
    a098:	mul	w0, w1, w0
    a09c:	str	w0, [sp, #236]
    a0a0:	ldr	x0, [sp, #336]
    a0a4:	add	x0, x0, #0x4
    a0a8:	str	x0, [sp, #336]
    a0ac:	ldr	x0, [sp, #336]
    a0b0:	add	x0, x0, #0x4
    a0b4:	ldr	x1, [sp, #328]
    a0b8:	cmp	x1, x0
    a0bc:	b.cs	9ffc <XXH32+0xd68>  // b.hs, b.nlast
    a0c0:	b	a10c <XXH32+0xe78>
    a0c4:	ldr	x0, [sp, #336]
    a0c8:	ldrb	w0, [x0]
    a0cc:	mov	w1, w0
    a0d0:	mov	w0, #0x67b1                	// #26545
    a0d4:	movk	w0, #0x1656, lsl #16
    a0d8:	mul	w0, w1, w0
    a0dc:	ldr	w1, [sp, #236]
    a0e0:	add	w0, w1, w0
    a0e4:	str	w0, [sp, #236]
    a0e8:	ldr	w0, [sp, #236]
    a0ec:	ror	w1, w0, #21
    a0f0:	mov	w0, #0x79b1                	// #31153
    a0f4:	movk	w0, #0x9e37, lsl #16
    a0f8:	mul	w0, w1, w0
    a0fc:	str	w0, [sp, #236]
    a100:	ldr	x0, [sp, #336]
    a104:	add	x0, x0, #0x1
    a108:	str	x0, [sp, #336]
    a10c:	ldr	x1, [sp, #328]
    a110:	ldr	x0, [sp, #336]
    a114:	cmp	x1, x0
    a118:	b.hi	a0c4 <XXH32+0xe30>  // b.pmore
    a11c:	ldr	w0, [sp, #236]
    a120:	lsr	w0, w0, #15
    a124:	ldr	w1, [sp, #236]
    a128:	eor	w0, w1, w0
    a12c:	str	w0, [sp, #236]
    a130:	mov	w0, #0xca77                	// #51831
    a134:	movk	w0, #0x85eb, lsl #16
    a138:	ldr	w1, [sp, #236]
    a13c:	mul	w0, w1, w0
    a140:	str	w0, [sp, #236]
    a144:	ldr	w0, [sp, #236]
    a148:	lsr	w0, w0, #13
    a14c:	ldr	w1, [sp, #236]
    a150:	eor	w0, w1, w0
    a154:	str	w0, [sp, #236]
    a158:	mov	w0, #0xae3d                	// #44605
    a15c:	movk	w0, #0xc2b2, lsl #16
    a160:	ldr	w1, [sp, #236]
    a164:	mul	w0, w1, w0
    a168:	str	w0, [sp, #236]
    a16c:	ldr	w0, [sp, #236]
    a170:	lsr	w0, w0, #16
    a174:	ldr	w1, [sp, #236]
    a178:	eor	w0, w1, w0
    a17c:	str	w0, [sp, #236]
    a180:	ldr	w0, [sp, #236]
    a184:	b	a668 <XXH32+0x13d4>
    a188:	ldr	x0, [sp, #40]
    a18c:	str	x0, [sp, #208]
    a190:	ldr	x0, [sp, #32]
    a194:	str	x0, [sp, #200]
    a198:	ldr	w0, [sp, #28]
    a19c:	str	w0, [sp, #196]
    a1a0:	str	wzr, [sp, #192]
    a1a4:	mov	w0, #0x1                   	// #1
    a1a8:	str	w0, [sp, #188]
    a1ac:	ldr	x0, [sp, #208]
    a1b0:	str	x0, [sp, #176]
    a1b4:	ldr	x1, [sp, #176]
    a1b8:	ldr	x0, [sp, #200]
    a1bc:	add	x0, x1, x0
    a1c0:	str	x0, [sp, #168]
    a1c4:	ldr	x0, [sp, #200]
    a1c8:	cmp	x0, #0xf
    a1cc:	b.ls	a4b0 <XXH32+0x121c>  // b.plast
    a1d0:	ldr	x0, [sp, #168]
    a1d4:	sub	x0, x0, #0x10
    a1d8:	str	x0, [sp, #160]
    a1dc:	mov	w1, #0x79b1                	// #31153
    a1e0:	movk	w1, #0x9e37, lsl #16
    a1e4:	ldr	w0, [sp, #196]
    a1e8:	add	w1, w1, w0
    a1ec:	mov	w0, #0xca77                	// #51831
    a1f0:	movk	w0, #0x85eb, lsl #16
    a1f4:	add	w0, w1, w0
    a1f8:	str	w0, [sp, #156]
    a1fc:	mov	w0, #0xca77                	// #51831
    a200:	movk	w0, #0x85eb, lsl #16
    a204:	ldr	w1, [sp, #196]
    a208:	add	w0, w1, w0
    a20c:	str	w0, [sp, #152]
    a210:	ldr	w0, [sp, #196]
    a214:	str	w0, [sp, #148]
    a218:	mov	w0, #0x79b1                	// #31153
    a21c:	movk	w0, #0x9e37, lsl #16
    a220:	ldr	w1, [sp, #196]
    a224:	sub	w0, w1, w0
    a228:	str	w0, [sp, #144]
    a22c:	ldr	x0, [sp, #176]
    a230:	str	x0, [sp, #136]
    a234:	ldr	w0, [sp, #192]
    a238:	str	w0, [sp, #132]
    a23c:	ldr	w0, [sp, #188]
    a240:	str	w0, [sp, #128]
    a244:	ldr	w0, [sp, #128]
    a248:	cmp	w0, #0x1
    a24c:	b.ne	a278 <XXH32+0xfe4>  // b.any
    a250:	ldr	w0, [sp, #132]
    a254:	cmp	w0, #0x1
    a258:	b.ne	a268 <XXH32+0xfd4>  // b.any
    a25c:	ldr	x0, [sp, #136]
    a260:	bl	90f0 <XXH_read32>
    a264:	b	a2a0 <XXH32+0x100c>
    a268:	ldr	x0, [sp, #136]
    a26c:	bl	90f0 <XXH_read32>
    a270:	rev	w0, w0
    a274:	b	a2a0 <XXH32+0x100c>
    a278:	ldr	w0, [sp, #132]
    a27c:	cmp	w0, #0x1
    a280:	b.ne	a290 <XXH32+0xffc>  // b.any
    a284:	ldr	x0, [sp, #136]
    a288:	ldr	w0, [x0]
    a28c:	b	a29c <XXH32+0x1008>
    a290:	ldr	x0, [sp, #136]
    a294:	ldr	w0, [x0]
    a298:	rev	w0, w0
    a29c:	nop
    a2a0:	mov	w1, w0
    a2a4:	ldr	w0, [sp, #156]
    a2a8:	bl	9240 <XXH32_round>
    a2ac:	str	w0, [sp, #156]
    a2b0:	ldr	x0, [sp, #176]
    a2b4:	add	x0, x0, #0x4
    a2b8:	str	x0, [sp, #176]
    a2bc:	ldr	x0, [sp, #176]
    a2c0:	str	x0, [sp, #120]
    a2c4:	ldr	w0, [sp, #192]
    a2c8:	str	w0, [sp, #116]
    a2cc:	ldr	w0, [sp, #188]
    a2d0:	str	w0, [sp, #112]
    a2d4:	ldr	w0, [sp, #112]
    a2d8:	cmp	w0, #0x1
    a2dc:	b.ne	a308 <XXH32+0x1074>  // b.any
    a2e0:	ldr	w0, [sp, #116]
    a2e4:	cmp	w0, #0x1
    a2e8:	b.ne	a2f8 <XXH32+0x1064>  // b.any
    a2ec:	ldr	x0, [sp, #120]
    a2f0:	bl	90f0 <XXH_read32>
    a2f4:	b	a330 <XXH32+0x109c>
    a2f8:	ldr	x0, [sp, #120]
    a2fc:	bl	90f0 <XXH_read32>
    a300:	rev	w0, w0
    a304:	b	a330 <XXH32+0x109c>
    a308:	ldr	w0, [sp, #116]
    a30c:	cmp	w0, #0x1
    a310:	b.ne	a320 <XXH32+0x108c>  // b.any
    a314:	ldr	x0, [sp, #120]
    a318:	ldr	w0, [x0]
    a31c:	b	a32c <XXH32+0x1098>
    a320:	ldr	x0, [sp, #120]
    a324:	ldr	w0, [x0]
    a328:	rev	w0, w0
    a32c:	nop
    a330:	mov	w1, w0
    a334:	ldr	w0, [sp, #152]
    a338:	bl	9240 <XXH32_round>
    a33c:	str	w0, [sp, #152]
    a340:	ldr	x0, [sp, #176]
    a344:	add	x0, x0, #0x4
    a348:	str	x0, [sp, #176]
    a34c:	ldr	x0, [sp, #176]
    a350:	str	x0, [sp, #104]
    a354:	ldr	w0, [sp, #192]
    a358:	str	w0, [sp, #100]
    a35c:	ldr	w0, [sp, #188]
    a360:	str	w0, [sp, #96]
    a364:	ldr	w0, [sp, #96]
    a368:	cmp	w0, #0x1
    a36c:	b.ne	a398 <XXH32+0x1104>  // b.any
    a370:	ldr	w0, [sp, #100]
    a374:	cmp	w0, #0x1
    a378:	b.ne	a388 <XXH32+0x10f4>  // b.any
    a37c:	ldr	x0, [sp, #104]
    a380:	bl	90f0 <XXH_read32>
    a384:	b	a3c0 <XXH32+0x112c>
    a388:	ldr	x0, [sp, #104]
    a38c:	bl	90f0 <XXH_read32>
    a390:	rev	w0, w0
    a394:	b	a3c0 <XXH32+0x112c>
    a398:	ldr	w0, [sp, #100]
    a39c:	cmp	w0, #0x1
    a3a0:	b.ne	a3b0 <XXH32+0x111c>  // b.any
    a3a4:	ldr	x0, [sp, #104]
    a3a8:	ldr	w0, [x0]
    a3ac:	b	a3bc <XXH32+0x1128>
    a3b0:	ldr	x0, [sp, #104]
    a3b4:	ldr	w0, [x0]
    a3b8:	rev	w0, w0
    a3bc:	nop
    a3c0:	mov	w1, w0
    a3c4:	ldr	w0, [sp, #148]
    a3c8:	bl	9240 <XXH32_round>
    a3cc:	str	w0, [sp, #148]
    a3d0:	ldr	x0, [sp, #176]
    a3d4:	add	x0, x0, #0x4
    a3d8:	str	x0, [sp, #176]
    a3dc:	ldr	x0, [sp, #176]
    a3e0:	str	x0, [sp, #88]
    a3e4:	ldr	w0, [sp, #192]
    a3e8:	str	w0, [sp, #84]
    a3ec:	ldr	w0, [sp, #188]
    a3f0:	str	w0, [sp, #80]
    a3f4:	ldr	w0, [sp, #80]
    a3f8:	cmp	w0, #0x1
    a3fc:	b.ne	a428 <XXH32+0x1194>  // b.any
    a400:	ldr	w0, [sp, #84]
    a404:	cmp	w0, #0x1
    a408:	b.ne	a418 <XXH32+0x1184>  // b.any
    a40c:	ldr	x0, [sp, #88]
    a410:	bl	90f0 <XXH_read32>
    a414:	b	a450 <XXH32+0x11bc>
    a418:	ldr	x0, [sp, #88]
    a41c:	bl	90f0 <XXH_read32>
    a420:	rev	w0, w0
    a424:	b	a450 <XXH32+0x11bc>
    a428:	ldr	w0, [sp, #84]
    a42c:	cmp	w0, #0x1
    a430:	b.ne	a440 <XXH32+0x11ac>  // b.any
    a434:	ldr	x0, [sp, #88]
    a438:	ldr	w0, [x0]
    a43c:	b	a44c <XXH32+0x11b8>
    a440:	ldr	x0, [sp, #88]
    a444:	ldr	w0, [x0]
    a448:	rev	w0, w0
    a44c:	nop
    a450:	mov	w1, w0
    a454:	ldr	w0, [sp, #144]
    a458:	bl	9240 <XXH32_round>
    a45c:	str	w0, [sp, #144]
    a460:	ldr	x0, [sp, #176]
    a464:	add	x0, x0, #0x4
    a468:	str	x0, [sp, #176]
    a46c:	ldr	x1, [sp, #160]
    a470:	ldr	x0, [sp, #176]
    a474:	cmp	x1, x0
    a478:	b.cs	a22c <XXH32+0xf98>  // b.hs, b.nlast
    a47c:	ldr	w0, [sp, #156]
    a480:	ror	w1, w0, #31
    a484:	ldr	w0, [sp, #152]
    a488:	ror	w0, w0, #25
    a48c:	add	w1, w1, w0
    a490:	ldr	w0, [sp, #148]
    a494:	ror	w0, w0, #20
    a498:	add	w1, w1, w0
    a49c:	ldr	w0, [sp, #144]
    a4a0:	ror	w0, w0, #14
    a4a4:	add	w0, w1, w0
    a4a8:	str	w0, [sp, #76]
    a4ac:	b	a4c4 <XXH32+0x1230>
    a4b0:	mov	w0, #0x67b1                	// #26545
    a4b4:	movk	w0, #0x1656, lsl #16
    a4b8:	ldr	w1, [sp, #196]
    a4bc:	add	w0, w1, w0
    a4c0:	str	w0, [sp, #76]
    a4c4:	ldr	x0, [sp, #200]
    a4c8:	mov	w1, w0
    a4cc:	ldr	w0, [sp, #76]
    a4d0:	add	w0, w0, w1
    a4d4:	str	w0, [sp, #76]
    a4d8:	b	a58c <XXH32+0x12f8>
    a4dc:	ldr	x0, [sp, #176]
    a4e0:	str	x0, [sp, #64]
    a4e4:	ldr	w0, [sp, #192]
    a4e8:	str	w0, [sp, #60]
    a4ec:	ldr	w0, [sp, #188]
    a4f0:	str	w0, [sp, #56]
    a4f4:	ldr	w0, [sp, #56]
    a4f8:	cmp	w0, #0x1
    a4fc:	b.ne	a528 <XXH32+0x1294>  // b.any
    a500:	ldr	w0, [sp, #60]
    a504:	cmp	w0, #0x1
    a508:	b.ne	a518 <XXH32+0x1284>  // b.any
    a50c:	ldr	x0, [sp, #64]
    a510:	bl	90f0 <XXH_read32>
    a514:	b	a550 <XXH32+0x12bc>
    a518:	ldr	x0, [sp, #64]
    a51c:	bl	90f0 <XXH_read32>
    a520:	rev	w0, w0
    a524:	b	a550 <XXH32+0x12bc>
    a528:	ldr	w0, [sp, #60]
    a52c:	cmp	w0, #0x1
    a530:	b.ne	a540 <XXH32+0x12ac>  // b.any
    a534:	ldr	x0, [sp, #64]
    a538:	ldr	w0, [x0]
    a53c:	b	a54c <XXH32+0x12b8>
    a540:	ldr	x0, [sp, #64]
    a544:	ldr	w0, [x0]
    a548:	rev	w0, w0
    a54c:	nop
    a550:	mov	w1, #0xae3d                	// #44605
    a554:	movk	w1, #0xc2b2, lsl #16
    a558:	mul	w0, w0, w1
    a55c:	ldr	w1, [sp, #76]
    a560:	add	w0, w1, w0
    a564:	str	w0, [sp, #76]
    a568:	ldr	w0, [sp, #76]
    a56c:	ror	w1, w0, #15
    a570:	mov	w0, #0xeb2f                	// #60207
    a574:	movk	w0, #0x27d4, lsl #16
    a578:	mul	w0, w1, w0
    a57c:	str	w0, [sp, #76]
    a580:	ldr	x0, [sp, #176]
    a584:	add	x0, x0, #0x4
    a588:	str	x0, [sp, #176]
    a58c:	ldr	x0, [sp, #176]
    a590:	add	x0, x0, #0x4
    a594:	ldr	x1, [sp, #168]
    a598:	cmp	x1, x0
    a59c:	b.cs	a4dc <XXH32+0x1248>  // b.hs, b.nlast
    a5a0:	b	a5ec <XXH32+0x1358>
    a5a4:	ldr	x0, [sp, #176]
    a5a8:	ldrb	w0, [x0]
    a5ac:	mov	w1, w0
    a5b0:	mov	w0, #0x67b1                	// #26545
    a5b4:	movk	w0, #0x1656, lsl #16
    a5b8:	mul	w0, w1, w0
    a5bc:	ldr	w1, [sp, #76]
    a5c0:	add	w0, w1, w0
    a5c4:	str	w0, [sp, #76]
    a5c8:	ldr	w0, [sp, #76]
    a5cc:	ror	w1, w0, #21
    a5d0:	mov	w0, #0x79b1                	// #31153
    a5d4:	movk	w0, #0x9e37, lsl #16
    a5d8:	mul	w0, w1, w0
    a5dc:	str	w0, [sp, #76]
    a5e0:	ldr	x0, [sp, #176]
    a5e4:	add	x0, x0, #0x1
    a5e8:	str	x0, [sp, #176]
    a5ec:	ldr	x1, [sp, #168]
    a5f0:	ldr	x0, [sp, #176]
    a5f4:	cmp	x1, x0
    a5f8:	b.hi	a5a4 <XXH32+0x1310>  // b.pmore
    a5fc:	ldr	w0, [sp, #76]
    a600:	lsr	w0, w0, #15
    a604:	ldr	w1, [sp, #76]
    a608:	eor	w0, w1, w0
    a60c:	str	w0, [sp, #76]
    a610:	mov	w0, #0xca77                	// #51831
    a614:	movk	w0, #0x85eb, lsl #16
    a618:	ldr	w1, [sp, #76]
    a61c:	mul	w0, w1, w0
    a620:	str	w0, [sp, #76]
    a624:	ldr	w0, [sp, #76]
    a628:	lsr	w0, w0, #13
    a62c:	ldr	w1, [sp, #76]
    a630:	eor	w0, w1, w0
    a634:	str	w0, [sp, #76]
    a638:	mov	w0, #0xae3d                	// #44605
    a63c:	movk	w0, #0xc2b2, lsl #16
    a640:	ldr	w1, [sp, #76]
    a644:	mul	w0, w1, w0
    a648:	str	w0, [sp, #76]
    a64c:	ldr	w0, [sp, #76]
    a650:	lsr	w0, w0, #16
    a654:	ldr	w1, [sp, #76]
    a658:	eor	w0, w1, w0
    a65c:	str	w0, [sp, #76]
    a660:	ldr	w0, [sp, #76]
    a664:	nop
    a668:	ldp	x29, x30, [sp]
    a66c:	add	sp, sp, #0x2c0
    a670:	ret
    a674:	nop
	...

000000000000a680 <XXH64_round>:
    a680:	sub	sp, sp, #0x10
    a684:	str	x0, [sp, #8]
    a688:	str	x1, [sp]
    a68c:	mov	x1, #0xeb4f                	// #60239
    a690:	movk	x1, #0x27d4, lsl #16
    a694:	movk	x1, #0xae3d, lsl #32
    a698:	movk	x1, #0xc2b2, lsl #48
    a69c:	ldr	x0, [sp]
    a6a0:	mul	x0, x1, x0
    a6a4:	ldr	x1, [sp, #8]
    a6a8:	add	x0, x1, x0
    a6ac:	str	x0, [sp, #8]
    a6b0:	ldr	x0, [sp, #8]
    a6b4:	ror	x0, x0, #33
    a6b8:	str	x0, [sp, #8]
    a6bc:	mov	x0, #0xca87                	// #51847
    a6c0:	movk	x0, #0x85eb, lsl #16
    a6c4:	movk	x0, #0x79b1, lsl #32
    a6c8:	movk	x0, #0x9e37, lsl #48
    a6cc:	ldr	x1, [sp, #8]
    a6d0:	mul	x0, x1, x0
    a6d4:	str	x0, [sp, #8]
    a6d8:	ldr	x0, [sp, #8]
    a6dc:	add	sp, sp, #0x10
    a6e0:	ret

000000000000a6e4 <XXH64_mergeRound>:
    a6e4:	stp	x29, x30, [sp, #-32]!
    a6e8:	mov	x29, sp
    a6ec:	str	x0, [sp, #24]
    a6f0:	str	x1, [sp, #16]
    a6f4:	ldr	x1, [sp, #16]
    a6f8:	mov	x0, #0x0                   	// #0
    a6fc:	bl	a680 <XXH64_round>
    a700:	str	x0, [sp, #16]
    a704:	ldr	x1, [sp, #24]
    a708:	ldr	x0, [sp, #16]
    a70c:	eor	x0, x1, x0
    a710:	str	x0, [sp, #24]
    a714:	mov	x1, #0xca87                	// #51847
    a718:	movk	x1, #0x85eb, lsl #16
    a71c:	movk	x1, #0x79b1, lsl #32
    a720:	movk	x1, #0x9e37, lsl #48
    a724:	ldr	x0, [sp, #24]
    a728:	mul	x1, x1, x0
    a72c:	mov	x0, #0xae63                	// #44643
    a730:	movk	x0, #0xc2b2, lsl #16
    a734:	movk	x0, #0xca77, lsl #32
    a738:	movk	x0, #0x85eb, lsl #48
    a73c:	add	x0, x1, x0
    a740:	str	x0, [sp, #24]
    a744:	ldr	x0, [sp, #24]
    a748:	ldp	x29, x30, [sp], #32
    a74c:	ret

000000000000a750 <XXH64>:
    a750:	sub	sp, sp, #0x360
    a754:	stp	x29, x30, [sp]
    a758:	mov	x29, sp
    a75c:	str	x0, [sp, #40]
    a760:	str	x1, [sp, #32]
    a764:	str	x2, [sp, #24]
    a768:	adrp	x0, 0 <grub_memcpy>
    a76c:	add	x0, x0, #0x0
    a770:	ldr	x0, [x0]
    a774:	ldrb	w0, [x0]
    a778:	str	w0, [sp, #860]
    a77c:	ldr	x0, [sp, #40]
    a780:	and	x0, x0, #0x7
    a784:	cmp	x0, #0x0
    a788:	b.ne	b47c <XXH64+0xd2c>  // b.any
    a78c:	ldr	w0, [sp, #860]
    a790:	cmp	w0, #0x1
    a794:	b.ne	ae0c <XXH64+0x6bc>  // b.any
    a798:	ldr	x0, [sp, #40]
    a79c:	str	x0, [sp, #848]
    a7a0:	ldr	x0, [sp, #32]
    a7a4:	str	x0, [sp, #840]
    a7a8:	ldr	x0, [sp, #24]
    a7ac:	str	x0, [sp, #832]
    a7b0:	mov	w0, #0x1                   	// #1
    a7b4:	str	w0, [sp, #828]
    a7b8:	str	wzr, [sp, #824]
    a7bc:	ldr	x0, [sp, #848]
    a7c0:	str	x0, [sp, #816]
    a7c4:	ldr	x1, [sp, #816]
    a7c8:	ldr	x0, [sp, #840]
    a7cc:	add	x0, x1, x0
    a7d0:	str	x0, [sp, #808]
    a7d4:	ldr	x0, [sp, #840]
    a7d8:	cmp	x0, #0x1f
    a7dc:	b.ls	ab20 <XXH64+0x3d0>  // b.plast
    a7e0:	ldr	x0, [sp, #808]
    a7e4:	sub	x0, x0, #0x20
    a7e8:	str	x0, [sp, #800]
    a7ec:	mov	x1, #0xca87                	// #51847
    a7f0:	movk	x1, #0x85eb, lsl #16
    a7f4:	movk	x1, #0x79b1, lsl #32
    a7f8:	movk	x1, #0x9e37, lsl #48
    a7fc:	ldr	x0, [sp, #832]
    a800:	add	x1, x1, x0
    a804:	mov	x0, #0xeb4f                	// #60239
    a808:	movk	x0, #0x27d4, lsl #16
    a80c:	movk	x0, #0xae3d, lsl #32
    a810:	movk	x0, #0xc2b2, lsl #48
    a814:	add	x0, x1, x0
    a818:	str	x0, [sp, #792]
    a81c:	mov	x0, #0xeb4f                	// #60239
    a820:	movk	x0, #0x27d4, lsl #16
    a824:	movk	x0, #0xae3d, lsl #32
    a828:	movk	x0, #0xc2b2, lsl #48
    a82c:	ldr	x1, [sp, #832]
    a830:	add	x0, x1, x0
    a834:	str	x0, [sp, #784]
    a838:	ldr	x0, [sp, #832]
    a83c:	str	x0, [sp, #776]
    a840:	mov	x0, #0xca87                	// #51847
    a844:	movk	x0, #0x85eb, lsl #16
    a848:	movk	x0, #0x79b1, lsl #32
    a84c:	movk	x0, #0x9e37, lsl #48
    a850:	ldr	x1, [sp, #832]
    a854:	sub	x0, x1, x0
    a858:	str	x0, [sp, #768]
    a85c:	ldr	x0, [sp, #816]
    a860:	str	x0, [sp, #760]
    a864:	ldr	w0, [sp, #828]
    a868:	str	w0, [sp, #756]
    a86c:	ldr	w0, [sp, #824]
    a870:	str	w0, [sp, #752]
    a874:	ldr	w0, [sp, #752]
    a878:	cmp	w0, #0x1
    a87c:	b.ne	a8a8 <XXH64+0x158>  // b.any
    a880:	ldr	w0, [sp, #756]
    a884:	cmp	w0, #0x1
    a888:	b.ne	a898 <XXH64+0x148>  // b.any
    a88c:	ldr	x0, [sp, #760]
    a890:	bl	9118 <XXH_read64>
    a894:	b	a8d0 <XXH64+0x180>
    a898:	ldr	x0, [sp, #760]
    a89c:	bl	9118 <XXH_read64>
    a8a0:	rev	x0, x0
    a8a4:	b	a8d0 <XXH64+0x180>
    a8a8:	ldr	w0, [sp, #756]
    a8ac:	cmp	w0, #0x1
    a8b0:	b.ne	a8c0 <XXH64+0x170>  // b.any
    a8b4:	ldr	x0, [sp, #760]
    a8b8:	ldr	x0, [x0]
    a8bc:	b	a8cc <XXH64+0x17c>
    a8c0:	ldr	x0, [sp, #760]
    a8c4:	ldr	x0, [x0]
    a8c8:	rev	x0, x0
    a8cc:	nop
    a8d0:	mov	x1, x0
    a8d4:	ldr	x0, [sp, #792]
    a8d8:	bl	a680 <XXH64_round>
    a8dc:	str	x0, [sp, #792]
    a8e0:	ldr	x0, [sp, #816]
    a8e4:	add	x0, x0, #0x8
    a8e8:	str	x0, [sp, #816]
    a8ec:	ldr	x0, [sp, #816]
    a8f0:	str	x0, [sp, #744]
    a8f4:	ldr	w0, [sp, #828]
    a8f8:	str	w0, [sp, #740]
    a8fc:	ldr	w0, [sp, #824]
    a900:	str	w0, [sp, #736]
    a904:	ldr	w0, [sp, #736]
    a908:	cmp	w0, #0x1
    a90c:	b.ne	a938 <XXH64+0x1e8>  // b.any
    a910:	ldr	w0, [sp, #740]
    a914:	cmp	w0, #0x1
    a918:	b.ne	a928 <XXH64+0x1d8>  // b.any
    a91c:	ldr	x0, [sp, #744]
    a920:	bl	9118 <XXH_read64>
    a924:	b	a960 <XXH64+0x210>
    a928:	ldr	x0, [sp, #744]
    a92c:	bl	9118 <XXH_read64>
    a930:	rev	x0, x0
    a934:	b	a960 <XXH64+0x210>
    a938:	ldr	w0, [sp, #740]
    a93c:	cmp	w0, #0x1
    a940:	b.ne	a950 <XXH64+0x200>  // b.any
    a944:	ldr	x0, [sp, #744]
    a948:	ldr	x0, [x0]
    a94c:	b	a95c <XXH64+0x20c>
    a950:	ldr	x0, [sp, #744]
    a954:	ldr	x0, [x0]
    a958:	rev	x0, x0
    a95c:	nop
    a960:	mov	x1, x0
    a964:	ldr	x0, [sp, #784]
    a968:	bl	a680 <XXH64_round>
    a96c:	str	x0, [sp, #784]
    a970:	ldr	x0, [sp, #816]
    a974:	add	x0, x0, #0x8
    a978:	str	x0, [sp, #816]
    a97c:	ldr	x0, [sp, #816]
    a980:	str	x0, [sp, #728]
    a984:	ldr	w0, [sp, #828]
    a988:	str	w0, [sp, #724]
    a98c:	ldr	w0, [sp, #824]
    a990:	str	w0, [sp, #720]
    a994:	ldr	w0, [sp, #720]
    a998:	cmp	w0, #0x1
    a99c:	b.ne	a9c8 <XXH64+0x278>  // b.any
    a9a0:	ldr	w0, [sp, #724]
    a9a4:	cmp	w0, #0x1
    a9a8:	b.ne	a9b8 <XXH64+0x268>  // b.any
    a9ac:	ldr	x0, [sp, #728]
    a9b0:	bl	9118 <XXH_read64>
    a9b4:	b	a9f0 <XXH64+0x2a0>
    a9b8:	ldr	x0, [sp, #728]
    a9bc:	bl	9118 <XXH_read64>
    a9c0:	rev	x0, x0
    a9c4:	b	a9f0 <XXH64+0x2a0>
    a9c8:	ldr	w0, [sp, #724]
    a9cc:	cmp	w0, #0x1
    a9d0:	b.ne	a9e0 <XXH64+0x290>  // b.any
    a9d4:	ldr	x0, [sp, #728]
    a9d8:	ldr	x0, [x0]
    a9dc:	b	a9ec <XXH64+0x29c>
    a9e0:	ldr	x0, [sp, #728]
    a9e4:	ldr	x0, [x0]
    a9e8:	rev	x0, x0
    a9ec:	nop
    a9f0:	mov	x1, x0
    a9f4:	ldr	x0, [sp, #776]
    a9f8:	bl	a680 <XXH64_round>
    a9fc:	str	x0, [sp, #776]
    aa00:	ldr	x0, [sp, #816]
    aa04:	add	x0, x0, #0x8
    aa08:	str	x0, [sp, #816]
    aa0c:	ldr	x0, [sp, #816]
    aa10:	str	x0, [sp, #712]
    aa14:	ldr	w0, [sp, #828]
    aa18:	str	w0, [sp, #708]
    aa1c:	ldr	w0, [sp, #824]
    aa20:	str	w0, [sp, #704]
    aa24:	ldr	w0, [sp, #704]
    aa28:	cmp	w0, #0x1
    aa2c:	b.ne	aa58 <XXH64+0x308>  // b.any
    aa30:	ldr	w0, [sp, #708]
    aa34:	cmp	w0, #0x1
    aa38:	b.ne	aa48 <XXH64+0x2f8>  // b.any
    aa3c:	ldr	x0, [sp, #712]
    aa40:	bl	9118 <XXH_read64>
    aa44:	b	aa80 <XXH64+0x330>
    aa48:	ldr	x0, [sp, #712]
    aa4c:	bl	9118 <XXH_read64>
    aa50:	rev	x0, x0
    aa54:	b	aa80 <XXH64+0x330>
    aa58:	ldr	w0, [sp, #708]
    aa5c:	cmp	w0, #0x1
    aa60:	b.ne	aa70 <XXH64+0x320>  // b.any
    aa64:	ldr	x0, [sp, #712]
    aa68:	ldr	x0, [x0]
    aa6c:	b	aa7c <XXH64+0x32c>
    aa70:	ldr	x0, [sp, #712]
    aa74:	ldr	x0, [x0]
    aa78:	rev	x0, x0
    aa7c:	nop
    aa80:	mov	x1, x0
    aa84:	ldr	x0, [sp, #768]
    aa88:	bl	a680 <XXH64_round>
    aa8c:	str	x0, [sp, #768]
    aa90:	ldr	x0, [sp, #816]
    aa94:	add	x0, x0, #0x8
    aa98:	str	x0, [sp, #816]
    aa9c:	ldr	x1, [sp, #800]
    aaa0:	ldr	x0, [sp, #816]
    aaa4:	cmp	x1, x0
    aaa8:	b.cs	a85c <XXH64+0x10c>  // b.hs, b.nlast
    aaac:	ldr	x0, [sp, #792]
    aab0:	ror	x1, x0, #63
    aab4:	ldr	x0, [sp, #784]
    aab8:	ror	x0, x0, #57
    aabc:	add	x1, x1, x0
    aac0:	ldr	x0, [sp, #776]
    aac4:	ror	x0, x0, #52
    aac8:	add	x1, x1, x0
    aacc:	ldr	x0, [sp, #768]
    aad0:	ror	x0, x0, #46
    aad4:	add	x0, x1, x0
    aad8:	str	x0, [sp, #696]
    aadc:	ldr	x1, [sp, #792]
    aae0:	ldr	x0, [sp, #696]
    aae4:	bl	a6e4 <XXH64_mergeRound>
    aae8:	str	x0, [sp, #696]
    aaec:	ldr	x1, [sp, #784]
    aaf0:	ldr	x0, [sp, #696]
    aaf4:	bl	a6e4 <XXH64_mergeRound>
    aaf8:	str	x0, [sp, #696]
    aafc:	ldr	x1, [sp, #776]
    ab00:	ldr	x0, [sp, #696]
    ab04:	bl	a6e4 <XXH64_mergeRound>
    ab08:	str	x0, [sp, #696]
    ab0c:	ldr	x1, [sp, #768]
    ab10:	ldr	x0, [sp, #696]
    ab14:	bl	a6e4 <XXH64_mergeRound>
    ab18:	str	x0, [sp, #696]
    ab1c:	b	ab3c <XXH64+0x3ec>
    ab20:	mov	x0, #0x67c5                	// #26565
    ab24:	movk	x0, #0x1656, lsl #16
    ab28:	movk	x0, #0xeb2f, lsl #32
    ab2c:	movk	x0, #0x27d4, lsl #48
    ab30:	ldr	x1, [sp, #832]
    ab34:	add	x0, x1, x0
    ab38:	str	x0, [sp, #696]
    ab3c:	ldr	x1, [sp, #696]
    ab40:	ldr	x0, [sp, #840]
    ab44:	add	x0, x1, x0
    ab48:	str	x0, [sp, #696]
    ab4c:	b	ac24 <XXH64+0x4d4>
    ab50:	ldr	x0, [sp, #816]
    ab54:	str	x0, [sp, #688]
    ab58:	ldr	w0, [sp, #828]
    ab5c:	str	w0, [sp, #684]
    ab60:	ldr	w0, [sp, #824]
    ab64:	str	w0, [sp, #680]
    ab68:	ldr	w0, [sp, #680]
    ab6c:	cmp	w0, #0x1
    ab70:	b.ne	ab9c <XXH64+0x44c>  // b.any
    ab74:	ldr	w0, [sp, #684]
    ab78:	cmp	w0, #0x1
    ab7c:	b.ne	ab8c <XXH64+0x43c>  // b.any
    ab80:	ldr	x0, [sp, #688]
    ab84:	bl	9118 <XXH_read64>
    ab88:	b	abc4 <XXH64+0x474>
    ab8c:	ldr	x0, [sp, #688]
    ab90:	bl	9118 <XXH_read64>
    ab94:	rev	x0, x0
    ab98:	b	abc4 <XXH64+0x474>
    ab9c:	ldr	w0, [sp, #684]
    aba0:	cmp	w0, #0x1
    aba4:	b.ne	abb4 <XXH64+0x464>  // b.any
    aba8:	ldr	x0, [sp, #688]
    abac:	ldr	x0, [x0]
    abb0:	b	abc0 <XXH64+0x470>
    abb4:	ldr	x0, [sp, #688]
    abb8:	ldr	x0, [x0]
    abbc:	rev	x0, x0
    abc0:	nop
    abc4:	mov	x1, x0
    abc8:	mov	x0, #0x0                   	// #0
    abcc:	bl	a680 <XXH64_round>
    abd0:	str	x0, [sp, #672]
    abd4:	ldr	x1, [sp, #696]
    abd8:	ldr	x0, [sp, #672]
    abdc:	eor	x0, x1, x0
    abe0:	str	x0, [sp, #696]
    abe4:	ldr	x0, [sp, #696]
    abe8:	ror	x1, x0, #37
    abec:	mov	x0, #0xca87                	// #51847
    abf0:	movk	x0, #0x85eb, lsl #16
    abf4:	movk	x0, #0x79b1, lsl #32
    abf8:	movk	x0, #0x9e37, lsl #48
    abfc:	mul	x1, x1, x0
    ac00:	mov	x0, #0xae63                	// #44643
    ac04:	movk	x0, #0xc2b2, lsl #16
    ac08:	movk	x0, #0xca77, lsl #32
    ac0c:	movk	x0, #0x85eb, lsl #48
    ac10:	add	x0, x1, x0
    ac14:	str	x0, [sp, #696]
    ac18:	ldr	x0, [sp, #816]
    ac1c:	add	x0, x0, #0x8
    ac20:	str	x0, [sp, #816]
    ac24:	ldr	x0, [sp, #816]
    ac28:	add	x0, x0, #0x8
    ac2c:	ldr	x1, [sp, #808]
    ac30:	cmp	x1, x0
    ac34:	b.cs	ab50 <XXH64+0x400>  // b.hs, b.nlast
    ac38:	ldr	x0, [sp, #816]
    ac3c:	add	x0, x0, #0x4
    ac40:	ldr	x1, [sp, #808]
    ac44:	cmp	x1, x0
    ac48:	b.cc	ad80 <XXH64+0x630>  // b.lo, b.ul, b.last
    ac4c:	ldr	x0, [sp, #816]
    ac50:	str	x0, [sp, #664]
    ac54:	ldr	w0, [sp, #828]
    ac58:	str	w0, [sp, #660]
    ac5c:	ldr	w0, [sp, #824]
    ac60:	str	w0, [sp, #656]
    ac64:	ldr	w0, [sp, #656]
    ac68:	cmp	w0, #0x1
    ac6c:	b.ne	ac98 <XXH64+0x548>  // b.any
    ac70:	ldr	w0, [sp, #660]
    ac74:	cmp	w0, #0x1
    ac78:	b.ne	ac88 <XXH64+0x538>  // b.any
    ac7c:	ldr	x0, [sp, #664]
    ac80:	bl	90f0 <XXH_read32>
    ac84:	b	acc0 <XXH64+0x570>
    ac88:	ldr	x0, [sp, #664]
    ac8c:	bl	90f0 <XXH_read32>
    ac90:	rev	w0, w0
    ac94:	b	acc0 <XXH64+0x570>
    ac98:	ldr	w0, [sp, #660]
    ac9c:	cmp	w0, #0x1
    aca0:	b.ne	acb0 <XXH64+0x560>  // b.any
    aca4:	ldr	x0, [sp, #664]
    aca8:	ldr	w0, [x0]
    acac:	b	acbc <XXH64+0x56c>
    acb0:	ldr	x0, [sp, #664]
    acb4:	ldr	w0, [x0]
    acb8:	rev	w0, w0
    acbc:	nop
    acc0:	mov	w1, w0
    acc4:	mov	x0, #0xca87                	// #51847
    acc8:	movk	x0, #0x85eb, lsl #16
    accc:	movk	x0, #0x79b1, lsl #32
    acd0:	movk	x0, #0x9e37, lsl #48
    acd4:	mul	x0, x1, x0
    acd8:	ldr	x1, [sp, #696]
    acdc:	eor	x0, x1, x0
    ace0:	str	x0, [sp, #696]
    ace4:	ldr	x0, [sp, #696]
    ace8:	ror	x1, x0, #41
    acec:	mov	x0, #0xeb4f                	// #60239
    acf0:	movk	x0, #0x27d4, lsl #16
    acf4:	movk	x0, #0xae3d, lsl #32
    acf8:	movk	x0, #0xc2b2, lsl #48
    acfc:	mul	x1, x1, x0
    ad00:	mov	x0, #0x79f9                	// #31225
    ad04:	movk	x0, #0x9e37, lsl #16
    ad08:	movk	x0, #0x67b1, lsl #32
    ad0c:	movk	x0, #0x1656, lsl #48
    ad10:	add	x0, x1, x0
    ad14:	str	x0, [sp, #696]
    ad18:	ldr	x0, [sp, #816]
    ad1c:	add	x0, x0, #0x4
    ad20:	str	x0, [sp, #816]
    ad24:	b	ad80 <XXH64+0x630>
    ad28:	ldr	x0, [sp, #816]
    ad2c:	ldrb	w0, [x0]
    ad30:	and	x1, x0, #0xff
    ad34:	mov	x0, #0x67c5                	// #26565
    ad38:	movk	x0, #0x1656, lsl #16
    ad3c:	movk	x0, #0xeb2f, lsl #32
    ad40:	movk	x0, #0x27d4, lsl #48
    ad44:	mul	x0, x1, x0
    ad48:	ldr	x1, [sp, #696]
    ad4c:	eor	x0, x1, x0
    ad50:	str	x0, [sp, #696]
    ad54:	ldr	x0, [sp, #696]
    ad58:	ror	x1, x0, #53
    ad5c:	mov	x0, #0xca87                	// #51847
    ad60:	movk	x0, #0x85eb, lsl #16
    ad64:	movk	x0, #0x79b1, lsl #32
    ad68:	movk	x0, #0x9e37, lsl #48
    ad6c:	mul	x0, x1, x0
    ad70:	str	x0, [sp, #696]
    ad74:	ldr	x0, [sp, #816]
    ad78:	add	x0, x0, #0x1
    ad7c:	str	x0, [sp, #816]
    ad80:	ldr	x1, [sp, #808]
    ad84:	ldr	x0, [sp, #816]
    ad88:	cmp	x1, x0
    ad8c:	b.hi	ad28 <XXH64+0x5d8>  // b.pmore
    ad90:	ldr	x0, [sp, #696]
    ad94:	lsr	x0, x0, #33
    ad98:	ldr	x1, [sp, #696]
    ad9c:	eor	x0, x1, x0
    ada0:	str	x0, [sp, #696]
    ada4:	mov	x0, #0xeb4f                	// #60239
    ada8:	movk	x0, #0x27d4, lsl #16
    adac:	movk	x0, #0xae3d, lsl #32
    adb0:	movk	x0, #0xc2b2, lsl #48
    adb4:	ldr	x1, [sp, #696]
    adb8:	mul	x0, x1, x0
    adbc:	str	x0, [sp, #696]
    adc0:	ldr	x0, [sp, #696]
    adc4:	lsr	x0, x0, #29
    adc8:	ldr	x1, [sp, #696]
    adcc:	eor	x0, x1, x0
    add0:	str	x0, [sp, #696]
    add4:	mov	x0, #0x79f9                	// #31225
    add8:	movk	x0, #0x9e37, lsl #16
    addc:	movk	x0, #0x67b1, lsl #32
    ade0:	movk	x0, #0x1656, lsl #48
    ade4:	ldr	x1, [sp, #696]
    ade8:	mul	x0, x1, x0
    adec:	str	x0, [sp, #696]
    adf0:	ldr	x0, [sp, #696]
    adf4:	lsr	x0, x0, #32
    adf8:	ldr	x1, [sp, #696]
    adfc:	eor	x0, x1, x0
    ae00:	str	x0, [sp, #696]
    ae04:	ldr	x0, [sp, #696]
    ae08:	b	c174 <XXH64+0x1a24>
    ae0c:	ldr	x0, [sp, #40]
    ae10:	str	x0, [sp, #648]
    ae14:	ldr	x0, [sp, #32]
    ae18:	str	x0, [sp, #640]
    ae1c:	ldr	x0, [sp, #24]
    ae20:	str	x0, [sp, #632]
    ae24:	str	wzr, [sp, #628]
    ae28:	str	wzr, [sp, #624]
    ae2c:	ldr	x0, [sp, #648]
    ae30:	str	x0, [sp, #616]
    ae34:	ldr	x1, [sp, #616]
    ae38:	ldr	x0, [sp, #640]
    ae3c:	add	x0, x1, x0
    ae40:	str	x0, [sp, #608]
    ae44:	ldr	x0, [sp, #640]
    ae48:	cmp	x0, #0x1f
    ae4c:	b.ls	b190 <XXH64+0xa40>  // b.plast
    ae50:	ldr	x0, [sp, #608]
    ae54:	sub	x0, x0, #0x20
    ae58:	str	x0, [sp, #600]
    ae5c:	mov	x1, #0xca87                	// #51847
    ae60:	movk	x1, #0x85eb, lsl #16
    ae64:	movk	x1, #0x79b1, lsl #32
    ae68:	movk	x1, #0x9e37, lsl #48
    ae6c:	ldr	x0, [sp, #632]
    ae70:	add	x1, x1, x0
    ae74:	mov	x0, #0xeb4f                	// #60239
    ae78:	movk	x0, #0x27d4, lsl #16
    ae7c:	movk	x0, #0xae3d, lsl #32
    ae80:	movk	x0, #0xc2b2, lsl #48
    ae84:	add	x0, x1, x0
    ae88:	str	x0, [sp, #592]
    ae8c:	mov	x0, #0xeb4f                	// #60239
    ae90:	movk	x0, #0x27d4, lsl #16
    ae94:	movk	x0, #0xae3d, lsl #32
    ae98:	movk	x0, #0xc2b2, lsl #48
    ae9c:	ldr	x1, [sp, #632]
    aea0:	add	x0, x1, x0
    aea4:	str	x0, [sp, #584]
    aea8:	ldr	x0, [sp, #632]
    aeac:	str	x0, [sp, #576]
    aeb0:	mov	x0, #0xca87                	// #51847
    aeb4:	movk	x0, #0x85eb, lsl #16
    aeb8:	movk	x0, #0x79b1, lsl #32
    aebc:	movk	x0, #0x9e37, lsl #48
    aec0:	ldr	x1, [sp, #632]
    aec4:	sub	x0, x1, x0
    aec8:	str	x0, [sp, #568]
    aecc:	ldr	x0, [sp, #616]
    aed0:	str	x0, [sp, #560]
    aed4:	ldr	w0, [sp, #628]
    aed8:	str	w0, [sp, #556]
    aedc:	ldr	w0, [sp, #624]
    aee0:	str	w0, [sp, #552]
    aee4:	ldr	w0, [sp, #552]
    aee8:	cmp	w0, #0x1
    aeec:	b.ne	af18 <XXH64+0x7c8>  // b.any
    aef0:	ldr	w0, [sp, #556]
    aef4:	cmp	w0, #0x1
    aef8:	b.ne	af08 <XXH64+0x7b8>  // b.any
    aefc:	ldr	x0, [sp, #560]
    af00:	bl	9118 <XXH_read64>
    af04:	b	af40 <XXH64+0x7f0>
    af08:	ldr	x0, [sp, #560]
    af0c:	bl	9118 <XXH_read64>
    af10:	rev	x0, x0
    af14:	b	af40 <XXH64+0x7f0>
    af18:	ldr	w0, [sp, #556]
    af1c:	cmp	w0, #0x1
    af20:	b.ne	af30 <XXH64+0x7e0>  // b.any
    af24:	ldr	x0, [sp, #560]
    af28:	ldr	x0, [x0]
    af2c:	b	af3c <XXH64+0x7ec>
    af30:	ldr	x0, [sp, #560]
    af34:	ldr	x0, [x0]
    af38:	rev	x0, x0
    af3c:	nop
    af40:	mov	x1, x0
    af44:	ldr	x0, [sp, #592]
    af48:	bl	a680 <XXH64_round>
    af4c:	str	x0, [sp, #592]
    af50:	ldr	x0, [sp, #616]
    af54:	add	x0, x0, #0x8
    af58:	str	x0, [sp, #616]
    af5c:	ldr	x0, [sp, #616]
    af60:	str	x0, [sp, #544]
    af64:	ldr	w0, [sp, #628]
    af68:	str	w0, [sp, #540]
    af6c:	ldr	w0, [sp, #624]
    af70:	str	w0, [sp, #536]
    af74:	ldr	w0, [sp, #536]
    af78:	cmp	w0, #0x1
    af7c:	b.ne	afa8 <XXH64+0x858>  // b.any
    af80:	ldr	w0, [sp, #540]
    af84:	cmp	w0, #0x1
    af88:	b.ne	af98 <XXH64+0x848>  // b.any
    af8c:	ldr	x0, [sp, #544]
    af90:	bl	9118 <XXH_read64>
    af94:	b	afd0 <XXH64+0x880>
    af98:	ldr	x0, [sp, #544]
    af9c:	bl	9118 <XXH_read64>
    afa0:	rev	x0, x0
    afa4:	b	afd0 <XXH64+0x880>
    afa8:	ldr	w0, [sp, #540]
    afac:	cmp	w0, #0x1
    afb0:	b.ne	afc0 <XXH64+0x870>  // b.any
    afb4:	ldr	x0, [sp, #544]
    afb8:	ldr	x0, [x0]
    afbc:	b	afcc <XXH64+0x87c>
    afc0:	ldr	x0, [sp, #544]
    afc4:	ldr	x0, [x0]
    afc8:	rev	x0, x0
    afcc:	nop
    afd0:	mov	x1, x0
    afd4:	ldr	x0, [sp, #584]
    afd8:	bl	a680 <XXH64_round>
    afdc:	str	x0, [sp, #584]
    afe0:	ldr	x0, [sp, #616]
    afe4:	add	x0, x0, #0x8
    afe8:	str	x0, [sp, #616]
    afec:	ldr	x0, [sp, #616]
    aff0:	str	x0, [sp, #528]
    aff4:	ldr	w0, [sp, #628]
    aff8:	str	w0, [sp, #524]
    affc:	ldr	w0, [sp, #624]
    b000:	str	w0, [sp, #520]
    b004:	ldr	w0, [sp, #520]
    b008:	cmp	w0, #0x1
    b00c:	b.ne	b038 <XXH64+0x8e8>  // b.any
    b010:	ldr	w0, [sp, #524]
    b014:	cmp	w0, #0x1
    b018:	b.ne	b028 <XXH64+0x8d8>  // b.any
    b01c:	ldr	x0, [sp, #528]
    b020:	bl	9118 <XXH_read64>
    b024:	b	b060 <XXH64+0x910>
    b028:	ldr	x0, [sp, #528]
    b02c:	bl	9118 <XXH_read64>
    b030:	rev	x0, x0
    b034:	b	b060 <XXH64+0x910>
    b038:	ldr	w0, [sp, #524]
    b03c:	cmp	w0, #0x1
    b040:	b.ne	b050 <XXH64+0x900>  // b.any
    b044:	ldr	x0, [sp, #528]
    b048:	ldr	x0, [x0]
    b04c:	b	b05c <XXH64+0x90c>
    b050:	ldr	x0, [sp, #528]
    b054:	ldr	x0, [x0]
    b058:	rev	x0, x0
    b05c:	nop
    b060:	mov	x1, x0
    b064:	ldr	x0, [sp, #576]
    b068:	bl	a680 <XXH64_round>
    b06c:	str	x0, [sp, #576]
    b070:	ldr	x0, [sp, #616]
    b074:	add	x0, x0, #0x8
    b078:	str	x0, [sp, #616]
    b07c:	ldr	x0, [sp, #616]
    b080:	str	x0, [sp, #512]
    b084:	ldr	w0, [sp, #628]
    b088:	str	w0, [sp, #508]
    b08c:	ldr	w0, [sp, #624]
    b090:	str	w0, [sp, #504]
    b094:	ldr	w0, [sp, #504]
    b098:	cmp	w0, #0x1
    b09c:	b.ne	b0c8 <XXH64+0x978>  // b.any
    b0a0:	ldr	w0, [sp, #508]
    b0a4:	cmp	w0, #0x1
    b0a8:	b.ne	b0b8 <XXH64+0x968>  // b.any
    b0ac:	ldr	x0, [sp, #512]
    b0b0:	bl	9118 <XXH_read64>
    b0b4:	b	b0f0 <XXH64+0x9a0>
    b0b8:	ldr	x0, [sp, #512]
    b0bc:	bl	9118 <XXH_read64>
    b0c0:	rev	x0, x0
    b0c4:	b	b0f0 <XXH64+0x9a0>
    b0c8:	ldr	w0, [sp, #508]
    b0cc:	cmp	w0, #0x1
    b0d0:	b.ne	b0e0 <XXH64+0x990>  // b.any
    b0d4:	ldr	x0, [sp, #512]
    b0d8:	ldr	x0, [x0]
    b0dc:	b	b0ec <XXH64+0x99c>
    b0e0:	ldr	x0, [sp, #512]
    b0e4:	ldr	x0, [x0]
    b0e8:	rev	x0, x0
    b0ec:	nop
    b0f0:	mov	x1, x0
    b0f4:	ldr	x0, [sp, #568]
    b0f8:	bl	a680 <XXH64_round>
    b0fc:	str	x0, [sp, #568]
    b100:	ldr	x0, [sp, #616]
    b104:	add	x0, x0, #0x8
    b108:	str	x0, [sp, #616]
    b10c:	ldr	x1, [sp, #600]
    b110:	ldr	x0, [sp, #616]
    b114:	cmp	x1, x0
    b118:	b.cs	aecc <XXH64+0x77c>  // b.hs, b.nlast
    b11c:	ldr	x0, [sp, #592]
    b120:	ror	x1, x0, #63
    b124:	ldr	x0, [sp, #584]
    b128:	ror	x0, x0, #57
    b12c:	add	x1, x1, x0
    b130:	ldr	x0, [sp, #576]
    b134:	ror	x0, x0, #52
    b138:	add	x1, x1, x0
    b13c:	ldr	x0, [sp, #568]
    b140:	ror	x0, x0, #46
    b144:	add	x0, x1, x0
    b148:	str	x0, [sp, #496]
    b14c:	ldr	x1, [sp, #592]
    b150:	ldr	x0, [sp, #496]
    b154:	bl	a6e4 <XXH64_mergeRound>
    b158:	str	x0, [sp, #496]
    b15c:	ldr	x1, [sp, #584]
    b160:	ldr	x0, [sp, #496]
    b164:	bl	a6e4 <XXH64_mergeRound>
    b168:	str	x0, [sp, #496]
    b16c:	ldr	x1, [sp, #576]
    b170:	ldr	x0, [sp, #496]
    b174:	bl	a6e4 <XXH64_mergeRound>
    b178:	str	x0, [sp, #496]
    b17c:	ldr	x1, [sp, #568]
    b180:	ldr	x0, [sp, #496]
    b184:	bl	a6e4 <XXH64_mergeRound>
    b188:	str	x0, [sp, #496]
    b18c:	b	b1ac <XXH64+0xa5c>
    b190:	mov	x0, #0x67c5                	// #26565
    b194:	movk	x0, #0x1656, lsl #16
    b198:	movk	x0, #0xeb2f, lsl #32
    b19c:	movk	x0, #0x27d4, lsl #48
    b1a0:	ldr	x1, [sp, #632]
    b1a4:	add	x0, x1, x0
    b1a8:	str	x0, [sp, #496]
    b1ac:	ldr	x1, [sp, #496]
    b1b0:	ldr	x0, [sp, #640]
    b1b4:	add	x0, x1, x0
    b1b8:	str	x0, [sp, #496]
    b1bc:	b	b294 <XXH64+0xb44>
    b1c0:	ldr	x0, [sp, #616]
    b1c4:	str	x0, [sp, #488]
    b1c8:	ldr	w0, [sp, #628]
    b1cc:	str	w0, [sp, #484]
    b1d0:	ldr	w0, [sp, #624]
    b1d4:	str	w0, [sp, #480]
    b1d8:	ldr	w0, [sp, #480]
    b1dc:	cmp	w0, #0x1
    b1e0:	b.ne	b20c <XXH64+0xabc>  // b.any
    b1e4:	ldr	w0, [sp, #484]
    b1e8:	cmp	w0, #0x1
    b1ec:	b.ne	b1fc <XXH64+0xaac>  // b.any
    b1f0:	ldr	x0, [sp, #488]
    b1f4:	bl	9118 <XXH_read64>
    b1f8:	b	b234 <XXH64+0xae4>
    b1fc:	ldr	x0, [sp, #488]
    b200:	bl	9118 <XXH_read64>
    b204:	rev	x0, x0
    b208:	b	b234 <XXH64+0xae4>
    b20c:	ldr	w0, [sp, #484]
    b210:	cmp	w0, #0x1
    b214:	b.ne	b224 <XXH64+0xad4>  // b.any
    b218:	ldr	x0, [sp, #488]
    b21c:	ldr	x0, [x0]
    b220:	b	b230 <XXH64+0xae0>
    b224:	ldr	x0, [sp, #488]
    b228:	ldr	x0, [x0]
    b22c:	rev	x0, x0
    b230:	nop
    b234:	mov	x1, x0
    b238:	mov	x0, #0x0                   	// #0
    b23c:	bl	a680 <XXH64_round>
    b240:	str	x0, [sp, #472]
    b244:	ldr	x1, [sp, #496]
    b248:	ldr	x0, [sp, #472]
    b24c:	eor	x0, x1, x0
    b250:	str	x0, [sp, #496]
    b254:	ldr	x0, [sp, #496]
    b258:	ror	x1, x0, #37
    b25c:	mov	x0, #0xca87                	// #51847
    b260:	movk	x0, #0x85eb, lsl #16
    b264:	movk	x0, #0x79b1, lsl #32
    b268:	movk	x0, #0x9e37, lsl #48
    b26c:	mul	x1, x1, x0
    b270:	mov	x0, #0xae63                	// #44643
    b274:	movk	x0, #0xc2b2, lsl #16
    b278:	movk	x0, #0xca77, lsl #32
    b27c:	movk	x0, #0x85eb, lsl #48
    b280:	add	x0, x1, x0
    b284:	str	x0, [sp, #496]
    b288:	ldr	x0, [sp, #616]
    b28c:	add	x0, x0, #0x8
    b290:	str	x0, [sp, #616]
    b294:	ldr	x0, [sp, #616]
    b298:	add	x0, x0, #0x8
    b29c:	ldr	x1, [sp, #608]
    b2a0:	cmp	x1, x0
    b2a4:	b.cs	b1c0 <XXH64+0xa70>  // b.hs, b.nlast
    b2a8:	ldr	x0, [sp, #616]
    b2ac:	add	x0, x0, #0x4
    b2b0:	ldr	x1, [sp, #608]
    b2b4:	cmp	x1, x0
    b2b8:	b.cc	b3f0 <XXH64+0xca0>  // b.lo, b.ul, b.last
    b2bc:	ldr	x0, [sp, #616]
    b2c0:	str	x0, [sp, #464]
    b2c4:	ldr	w0, [sp, #628]
    b2c8:	str	w0, [sp, #460]
    b2cc:	ldr	w0, [sp, #624]
    b2d0:	str	w0, [sp, #456]
    b2d4:	ldr	w0, [sp, #456]
    b2d8:	cmp	w0, #0x1
    b2dc:	b.ne	b308 <XXH64+0xbb8>  // b.any
    b2e0:	ldr	w0, [sp, #460]
    b2e4:	cmp	w0, #0x1
    b2e8:	b.ne	b2f8 <XXH64+0xba8>  // b.any
    b2ec:	ldr	x0, [sp, #464]
    b2f0:	bl	90f0 <XXH_read32>
    b2f4:	b	b330 <XXH64+0xbe0>
    b2f8:	ldr	x0, [sp, #464]
    b2fc:	bl	90f0 <XXH_read32>
    b300:	rev	w0, w0
    b304:	b	b330 <XXH64+0xbe0>
    b308:	ldr	w0, [sp, #460]
    b30c:	cmp	w0, #0x1
    b310:	b.ne	b320 <XXH64+0xbd0>  // b.any
    b314:	ldr	x0, [sp, #464]
    b318:	ldr	w0, [x0]
    b31c:	b	b32c <XXH64+0xbdc>
    b320:	ldr	x0, [sp, #464]
    b324:	ldr	w0, [x0]
    b328:	rev	w0, w0
    b32c:	nop
    b330:	mov	w1, w0
    b334:	mov	x0, #0xca87                	// #51847
    b338:	movk	x0, #0x85eb, lsl #16
    b33c:	movk	x0, #0x79b1, lsl #32
    b340:	movk	x0, #0x9e37, lsl #48
    b344:	mul	x0, x1, x0
    b348:	ldr	x1, [sp, #496]
    b34c:	eor	x0, x1, x0
    b350:	str	x0, [sp, #496]
    b354:	ldr	x0, [sp, #496]
    b358:	ror	x1, x0, #41
    b35c:	mov	x0, #0xeb4f                	// #60239
    b360:	movk	x0, #0x27d4, lsl #16
    b364:	movk	x0, #0xae3d, lsl #32
    b368:	movk	x0, #0xc2b2, lsl #48
    b36c:	mul	x1, x1, x0
    b370:	mov	x0, #0x79f9                	// #31225
    b374:	movk	x0, #0x9e37, lsl #16
    b378:	movk	x0, #0x67b1, lsl #32
    b37c:	movk	x0, #0x1656, lsl #48
    b380:	add	x0, x1, x0
    b384:	str	x0, [sp, #496]
    b388:	ldr	x0, [sp, #616]
    b38c:	add	x0, x0, #0x4
    b390:	str	x0, [sp, #616]
    b394:	b	b3f0 <XXH64+0xca0>
    b398:	ldr	x0, [sp, #616]
    b39c:	ldrb	w0, [x0]
    b3a0:	and	x1, x0, #0xff
    b3a4:	mov	x0, #0x67c5                	// #26565
    b3a8:	movk	x0, #0x1656, lsl #16
    b3ac:	movk	x0, #0xeb2f, lsl #32
    b3b0:	movk	x0, #0x27d4, lsl #48
    b3b4:	mul	x0, x1, x0
    b3b8:	ldr	x1, [sp, #496]
    b3bc:	eor	x0, x1, x0
    b3c0:	str	x0, [sp, #496]
    b3c4:	ldr	x0, [sp, #496]
    b3c8:	ror	x1, x0, #53
    b3cc:	mov	x0, #0xca87                	// #51847
    b3d0:	movk	x0, #0x85eb, lsl #16
    b3d4:	movk	x0, #0x79b1, lsl #32
    b3d8:	movk	x0, #0x9e37, lsl #48
    b3dc:	mul	x0, x1, x0
    b3e0:	str	x0, [sp, #496]
    b3e4:	ldr	x0, [sp, #616]
    b3e8:	add	x0, x0, #0x1
    b3ec:	str	x0, [sp, #616]
    b3f0:	ldr	x1, [sp, #608]
    b3f4:	ldr	x0, [sp, #616]
    b3f8:	cmp	x1, x0
    b3fc:	b.hi	b398 <XXH64+0xc48>  // b.pmore
    b400:	ldr	x0, [sp, #496]
    b404:	lsr	x0, x0, #33
    b408:	ldr	x1, [sp, #496]
    b40c:	eor	x0, x1, x0
    b410:	str	x0, [sp, #496]
    b414:	mov	x0, #0xeb4f                	// #60239
    b418:	movk	x0, #0x27d4, lsl #16
    b41c:	movk	x0, #0xae3d, lsl #32
    b420:	movk	x0, #0xc2b2, lsl #48
    b424:	ldr	x1, [sp, #496]
    b428:	mul	x0, x1, x0
    b42c:	str	x0, [sp, #496]
    b430:	ldr	x0, [sp, #496]
    b434:	lsr	x0, x0, #29
    b438:	ldr	x1, [sp, #496]
    b43c:	eor	x0, x1, x0
    b440:	str	x0, [sp, #496]
    b444:	mov	x0, #0x79f9                	// #31225
    b448:	movk	x0, #0x9e37, lsl #16
    b44c:	movk	x0, #0x67b1, lsl #32
    b450:	movk	x0, #0x1656, lsl #48
    b454:	ldr	x1, [sp, #496]
    b458:	mul	x0, x1, x0
    b45c:	str	x0, [sp, #496]
    b460:	ldr	x0, [sp, #496]
    b464:	lsr	x0, x0, #32
    b468:	ldr	x1, [sp, #496]
    b46c:	eor	x0, x1, x0
    b470:	str	x0, [sp, #496]
    b474:	ldr	x0, [sp, #496]
    b478:	b	c174 <XXH64+0x1a24>
    b47c:	ldr	w0, [sp, #860]
    b480:	cmp	w0, #0x1
    b484:	b.ne	bb00 <XXH64+0x13b0>  // b.any
    b488:	ldr	x0, [sp, #40]
    b48c:	str	x0, [sp, #448]
    b490:	ldr	x0, [sp, #32]
    b494:	str	x0, [sp, #440]
    b498:	ldr	x0, [sp, #24]
    b49c:	str	x0, [sp, #432]
    b4a0:	mov	w0, #0x1                   	// #1
    b4a4:	str	w0, [sp, #428]
    b4a8:	mov	w0, #0x1                   	// #1
    b4ac:	str	w0, [sp, #424]
    b4b0:	ldr	x0, [sp, #448]
    b4b4:	str	x0, [sp, #416]
    b4b8:	ldr	x1, [sp, #416]
    b4bc:	ldr	x0, [sp, #440]
    b4c0:	add	x0, x1, x0
    b4c4:	str	x0, [sp, #408]
    b4c8:	ldr	x0, [sp, #440]
    b4cc:	cmp	x0, #0x1f
    b4d0:	b.ls	b814 <XXH64+0x10c4>  // b.plast
    b4d4:	ldr	x0, [sp, #408]
    b4d8:	sub	x0, x0, #0x20
    b4dc:	str	x0, [sp, #400]
    b4e0:	mov	x1, #0xca87                	// #51847
    b4e4:	movk	x1, #0x85eb, lsl #16
    b4e8:	movk	x1, #0x79b1, lsl #32
    b4ec:	movk	x1, #0x9e37, lsl #48
    b4f0:	ldr	x0, [sp, #432]
    b4f4:	add	x1, x1, x0
    b4f8:	mov	x0, #0xeb4f                	// #60239
    b4fc:	movk	x0, #0x27d4, lsl #16
    b500:	movk	x0, #0xae3d, lsl #32
    b504:	movk	x0, #0xc2b2, lsl #48
    b508:	add	x0, x1, x0
    b50c:	str	x0, [sp, #392]
    b510:	mov	x0, #0xeb4f                	// #60239
    b514:	movk	x0, #0x27d4, lsl #16
    b518:	movk	x0, #0xae3d, lsl #32
    b51c:	movk	x0, #0xc2b2, lsl #48
    b520:	ldr	x1, [sp, #432]
    b524:	add	x0, x1, x0
    b528:	str	x0, [sp, #384]
    b52c:	ldr	x0, [sp, #432]
    b530:	str	x0, [sp, #376]
    b534:	mov	x0, #0xca87                	// #51847
    b538:	movk	x0, #0x85eb, lsl #16
    b53c:	movk	x0, #0x79b1, lsl #32
    b540:	movk	x0, #0x9e37, lsl #48
    b544:	ldr	x1, [sp, #432]
    b548:	sub	x0, x1, x0
    b54c:	str	x0, [sp, #368]
    b550:	ldr	x0, [sp, #416]
    b554:	str	x0, [sp, #360]
    b558:	ldr	w0, [sp, #428]
    b55c:	str	w0, [sp, #356]
    b560:	ldr	w0, [sp, #424]
    b564:	str	w0, [sp, #352]
    b568:	ldr	w0, [sp, #352]
    b56c:	cmp	w0, #0x1
    b570:	b.ne	b59c <XXH64+0xe4c>  // b.any
    b574:	ldr	w0, [sp, #356]
    b578:	cmp	w0, #0x1
    b57c:	b.ne	b58c <XXH64+0xe3c>  // b.any
    b580:	ldr	x0, [sp, #360]
    b584:	bl	9118 <XXH_read64>
    b588:	b	b5c4 <XXH64+0xe74>
    b58c:	ldr	x0, [sp, #360]
    b590:	bl	9118 <XXH_read64>
    b594:	rev	x0, x0
    b598:	b	b5c4 <XXH64+0xe74>
    b59c:	ldr	w0, [sp, #356]
    b5a0:	cmp	w0, #0x1
    b5a4:	b.ne	b5b4 <XXH64+0xe64>  // b.any
    b5a8:	ldr	x0, [sp, #360]
    b5ac:	ldr	x0, [x0]
    b5b0:	b	b5c0 <XXH64+0xe70>
    b5b4:	ldr	x0, [sp, #360]
    b5b8:	ldr	x0, [x0]
    b5bc:	rev	x0, x0
    b5c0:	nop
    b5c4:	mov	x1, x0
    b5c8:	ldr	x0, [sp, #392]
    b5cc:	bl	a680 <XXH64_round>
    b5d0:	str	x0, [sp, #392]
    b5d4:	ldr	x0, [sp, #416]
    b5d8:	add	x0, x0, #0x8
    b5dc:	str	x0, [sp, #416]
    b5e0:	ldr	x0, [sp, #416]
    b5e4:	str	x0, [sp, #344]
    b5e8:	ldr	w0, [sp, #428]
    b5ec:	str	w0, [sp, #340]
    b5f0:	ldr	w0, [sp, #424]
    b5f4:	str	w0, [sp, #336]
    b5f8:	ldr	w0, [sp, #336]
    b5fc:	cmp	w0, #0x1
    b600:	b.ne	b62c <XXH64+0xedc>  // b.any
    b604:	ldr	w0, [sp, #340]
    b608:	cmp	w0, #0x1
    b60c:	b.ne	b61c <XXH64+0xecc>  // b.any
    b610:	ldr	x0, [sp, #344]
    b614:	bl	9118 <XXH_read64>
    b618:	b	b654 <XXH64+0xf04>
    b61c:	ldr	x0, [sp, #344]
    b620:	bl	9118 <XXH_read64>
    b624:	rev	x0, x0
    b628:	b	b654 <XXH64+0xf04>
    b62c:	ldr	w0, [sp, #340]
    b630:	cmp	w0, #0x1
    b634:	b.ne	b644 <XXH64+0xef4>  // b.any
    b638:	ldr	x0, [sp, #344]
    b63c:	ldr	x0, [x0]
    b640:	b	b650 <XXH64+0xf00>
    b644:	ldr	x0, [sp, #344]
    b648:	ldr	x0, [x0]
    b64c:	rev	x0, x0
    b650:	nop
    b654:	mov	x1, x0
    b658:	ldr	x0, [sp, #384]
    b65c:	bl	a680 <XXH64_round>
    b660:	str	x0, [sp, #384]
    b664:	ldr	x0, [sp, #416]
    b668:	add	x0, x0, #0x8
    b66c:	str	x0, [sp, #416]
    b670:	ldr	x0, [sp, #416]
    b674:	str	x0, [sp, #328]
    b678:	ldr	w0, [sp, #428]
    b67c:	str	w0, [sp, #324]
    b680:	ldr	w0, [sp, #424]
    b684:	str	w0, [sp, #320]
    b688:	ldr	w0, [sp, #320]
    b68c:	cmp	w0, #0x1
    b690:	b.ne	b6bc <XXH64+0xf6c>  // b.any
    b694:	ldr	w0, [sp, #324]
    b698:	cmp	w0, #0x1
    b69c:	b.ne	b6ac <XXH64+0xf5c>  // b.any
    b6a0:	ldr	x0, [sp, #328]
    b6a4:	bl	9118 <XXH_read64>
    b6a8:	b	b6e4 <XXH64+0xf94>
    b6ac:	ldr	x0, [sp, #328]
    b6b0:	bl	9118 <XXH_read64>
    b6b4:	rev	x0, x0
    b6b8:	b	b6e4 <XXH64+0xf94>
    b6bc:	ldr	w0, [sp, #324]
    b6c0:	cmp	w0, #0x1
    b6c4:	b.ne	b6d4 <XXH64+0xf84>  // b.any
    b6c8:	ldr	x0, [sp, #328]
    b6cc:	ldr	x0, [x0]
    b6d0:	b	b6e0 <XXH64+0xf90>
    b6d4:	ldr	x0, [sp, #328]
    b6d8:	ldr	x0, [x0]
    b6dc:	rev	x0, x0
    b6e0:	nop
    b6e4:	mov	x1, x0
    b6e8:	ldr	x0, [sp, #376]
    b6ec:	bl	a680 <XXH64_round>
    b6f0:	str	x0, [sp, #376]
    b6f4:	ldr	x0, [sp, #416]
    b6f8:	add	x0, x0, #0x8
    b6fc:	str	x0, [sp, #416]
    b700:	ldr	x0, [sp, #416]
    b704:	str	x0, [sp, #312]
    b708:	ldr	w0, [sp, #428]
    b70c:	str	w0, [sp, #308]
    b710:	ldr	w0, [sp, #424]
    b714:	str	w0, [sp, #304]
    b718:	ldr	w0, [sp, #304]
    b71c:	cmp	w0, #0x1
    b720:	b.ne	b74c <XXH64+0xffc>  // b.any
    b724:	ldr	w0, [sp, #308]
    b728:	cmp	w0, #0x1
    b72c:	b.ne	b73c <XXH64+0xfec>  // b.any
    b730:	ldr	x0, [sp, #312]
    b734:	bl	9118 <XXH_read64>
    b738:	b	b774 <XXH64+0x1024>
    b73c:	ldr	x0, [sp, #312]
    b740:	bl	9118 <XXH_read64>
    b744:	rev	x0, x0
    b748:	b	b774 <XXH64+0x1024>
    b74c:	ldr	w0, [sp, #308]
    b750:	cmp	w0, #0x1
    b754:	b.ne	b764 <XXH64+0x1014>  // b.any
    b758:	ldr	x0, [sp, #312]
    b75c:	ldr	x0, [x0]
    b760:	b	b770 <XXH64+0x1020>
    b764:	ldr	x0, [sp, #312]
    b768:	ldr	x0, [x0]
    b76c:	rev	x0, x0
    b770:	nop
    b774:	mov	x1, x0
    b778:	ldr	x0, [sp, #368]
    b77c:	bl	a680 <XXH64_round>
    b780:	str	x0, [sp, #368]
    b784:	ldr	x0, [sp, #416]
    b788:	add	x0, x0, #0x8
    b78c:	str	x0, [sp, #416]
    b790:	ldr	x1, [sp, #400]
    b794:	ldr	x0, [sp, #416]
    b798:	cmp	x1, x0
    b79c:	b.cs	b550 <XXH64+0xe00>  // b.hs, b.nlast
    b7a0:	ldr	x0, [sp, #392]
    b7a4:	ror	x1, x0, #63
    b7a8:	ldr	x0, [sp, #384]
    b7ac:	ror	x0, x0, #57
    b7b0:	add	x1, x1, x0
    b7b4:	ldr	x0, [sp, #376]
    b7b8:	ror	x0, x0, #52
    b7bc:	add	x1, x1, x0
    b7c0:	ldr	x0, [sp, #368]
    b7c4:	ror	x0, x0, #46
    b7c8:	add	x0, x1, x0
    b7cc:	str	x0, [sp, #296]
    b7d0:	ldr	x1, [sp, #392]
    b7d4:	ldr	x0, [sp, #296]
    b7d8:	bl	a6e4 <XXH64_mergeRound>
    b7dc:	str	x0, [sp, #296]
    b7e0:	ldr	x1, [sp, #384]
    b7e4:	ldr	x0, [sp, #296]
    b7e8:	bl	a6e4 <XXH64_mergeRound>
    b7ec:	str	x0, [sp, #296]
    b7f0:	ldr	x1, [sp, #376]
    b7f4:	ldr	x0, [sp, #296]
    b7f8:	bl	a6e4 <XXH64_mergeRound>
    b7fc:	str	x0, [sp, #296]
    b800:	ldr	x1, [sp, #368]
    b804:	ldr	x0, [sp, #296]
    b808:	bl	a6e4 <XXH64_mergeRound>
    b80c:	str	x0, [sp, #296]
    b810:	b	b830 <XXH64+0x10e0>
    b814:	mov	x0, #0x67c5                	// #26565
    b818:	movk	x0, #0x1656, lsl #16
    b81c:	movk	x0, #0xeb2f, lsl #32
    b820:	movk	x0, #0x27d4, lsl #48
    b824:	ldr	x1, [sp, #432]
    b828:	add	x0, x1, x0
    b82c:	str	x0, [sp, #296]
    b830:	ldr	x1, [sp, #296]
    b834:	ldr	x0, [sp, #440]
    b838:	add	x0, x1, x0
    b83c:	str	x0, [sp, #296]
    b840:	b	b918 <XXH64+0x11c8>
    b844:	ldr	x0, [sp, #416]
    b848:	str	x0, [sp, #288]
    b84c:	ldr	w0, [sp, #428]
    b850:	str	w0, [sp, #284]
    b854:	ldr	w0, [sp, #424]
    b858:	str	w0, [sp, #280]
    b85c:	ldr	w0, [sp, #280]
    b860:	cmp	w0, #0x1
    b864:	b.ne	b890 <XXH64+0x1140>  // b.any
    b868:	ldr	w0, [sp, #284]
    b86c:	cmp	w0, #0x1
    b870:	b.ne	b880 <XXH64+0x1130>  // b.any
    b874:	ldr	x0, [sp, #288]
    b878:	bl	9118 <XXH_read64>
    b87c:	b	b8b8 <XXH64+0x1168>
    b880:	ldr	x0, [sp, #288]
    b884:	bl	9118 <XXH_read64>
    b888:	rev	x0, x0
    b88c:	b	b8b8 <XXH64+0x1168>
    b890:	ldr	w0, [sp, #284]
    b894:	cmp	w0, #0x1
    b898:	b.ne	b8a8 <XXH64+0x1158>  // b.any
    b89c:	ldr	x0, [sp, #288]
    b8a0:	ldr	x0, [x0]
    b8a4:	b	b8b4 <XXH64+0x1164>
    b8a8:	ldr	x0, [sp, #288]
    b8ac:	ldr	x0, [x0]
    b8b0:	rev	x0, x0
    b8b4:	nop
    b8b8:	mov	x1, x0
    b8bc:	mov	x0, #0x0                   	// #0
    b8c0:	bl	a680 <XXH64_round>
    b8c4:	str	x0, [sp, #272]
    b8c8:	ldr	x1, [sp, #296]
    b8cc:	ldr	x0, [sp, #272]
    b8d0:	eor	x0, x1, x0
    b8d4:	str	x0, [sp, #296]
    b8d8:	ldr	x0, [sp, #296]
    b8dc:	ror	x1, x0, #37
    b8e0:	mov	x0, #0xca87                	// #51847
    b8e4:	movk	x0, #0x85eb, lsl #16
    b8e8:	movk	x0, #0x79b1, lsl #32
    b8ec:	movk	x0, #0x9e37, lsl #48
    b8f0:	mul	x1, x1, x0
    b8f4:	mov	x0, #0xae63                	// #44643
    b8f8:	movk	x0, #0xc2b2, lsl #16
    b8fc:	movk	x0, #0xca77, lsl #32
    b900:	movk	x0, #0x85eb, lsl #48
    b904:	add	x0, x1, x0
    b908:	str	x0, [sp, #296]
    b90c:	ldr	x0, [sp, #416]
    b910:	add	x0, x0, #0x8
    b914:	str	x0, [sp, #416]
    b918:	ldr	x0, [sp, #416]
    b91c:	add	x0, x0, #0x8
    b920:	ldr	x1, [sp, #408]
    b924:	cmp	x1, x0
    b928:	b.cs	b844 <XXH64+0x10f4>  // b.hs, b.nlast
    b92c:	ldr	x0, [sp, #416]
    b930:	add	x0, x0, #0x4
    b934:	ldr	x1, [sp, #408]
    b938:	cmp	x1, x0
    b93c:	b.cc	ba74 <XXH64+0x1324>  // b.lo, b.ul, b.last
    b940:	ldr	x0, [sp, #416]
    b944:	str	x0, [sp, #264]
    b948:	ldr	w0, [sp, #428]
    b94c:	str	w0, [sp, #260]
    b950:	ldr	w0, [sp, #424]
    b954:	str	w0, [sp, #256]
    b958:	ldr	w0, [sp, #256]
    b95c:	cmp	w0, #0x1
    b960:	b.ne	b98c <XXH64+0x123c>  // b.any
    b964:	ldr	w0, [sp, #260]
    b968:	cmp	w0, #0x1
    b96c:	b.ne	b97c <XXH64+0x122c>  // b.any
    b970:	ldr	x0, [sp, #264]
    b974:	bl	90f0 <XXH_read32>
    b978:	b	b9b4 <XXH64+0x1264>
    b97c:	ldr	x0, [sp, #264]
    b980:	bl	90f0 <XXH_read32>
    b984:	rev	w0, w0
    b988:	b	b9b4 <XXH64+0x1264>
    b98c:	ldr	w0, [sp, #260]
    b990:	cmp	w0, #0x1
    b994:	b.ne	b9a4 <XXH64+0x1254>  // b.any
    b998:	ldr	x0, [sp, #264]
    b99c:	ldr	w0, [x0]
    b9a0:	b	b9b0 <XXH64+0x1260>
    b9a4:	ldr	x0, [sp, #264]
    b9a8:	ldr	w0, [x0]
    b9ac:	rev	w0, w0
    b9b0:	nop
    b9b4:	mov	w1, w0
    b9b8:	mov	x0, #0xca87                	// #51847
    b9bc:	movk	x0, #0x85eb, lsl #16
    b9c0:	movk	x0, #0x79b1, lsl #32
    b9c4:	movk	x0, #0x9e37, lsl #48
    b9c8:	mul	x0, x1, x0
    b9cc:	ldr	x1, [sp, #296]
    b9d0:	eor	x0, x1, x0
    b9d4:	str	x0, [sp, #296]
    b9d8:	ldr	x0, [sp, #296]
    b9dc:	ror	x1, x0, #41
    b9e0:	mov	x0, #0xeb4f                	// #60239
    b9e4:	movk	x0, #0x27d4, lsl #16
    b9e8:	movk	x0, #0xae3d, lsl #32
    b9ec:	movk	x0, #0xc2b2, lsl #48
    b9f0:	mul	x1, x1, x0
    b9f4:	mov	x0, #0x79f9                	// #31225
    b9f8:	movk	x0, #0x9e37, lsl #16
    b9fc:	movk	x0, #0x67b1, lsl #32
    ba00:	movk	x0, #0x1656, lsl #48
    ba04:	add	x0, x1, x0
    ba08:	str	x0, [sp, #296]
    ba0c:	ldr	x0, [sp, #416]
    ba10:	add	x0, x0, #0x4
    ba14:	str	x0, [sp, #416]
    ba18:	b	ba74 <XXH64+0x1324>
    ba1c:	ldr	x0, [sp, #416]
    ba20:	ldrb	w0, [x0]
    ba24:	and	x1, x0, #0xff
    ba28:	mov	x0, #0x67c5                	// #26565
    ba2c:	movk	x0, #0x1656, lsl #16
    ba30:	movk	x0, #0xeb2f, lsl #32
    ba34:	movk	x0, #0x27d4, lsl #48
    ba38:	mul	x0, x1, x0
    ba3c:	ldr	x1, [sp, #296]
    ba40:	eor	x0, x1, x0
    ba44:	str	x0, [sp, #296]
    ba48:	ldr	x0, [sp, #296]
    ba4c:	ror	x1, x0, #53
    ba50:	mov	x0, #0xca87                	// #51847
    ba54:	movk	x0, #0x85eb, lsl #16
    ba58:	movk	x0, #0x79b1, lsl #32
    ba5c:	movk	x0, #0x9e37, lsl #48
    ba60:	mul	x0, x1, x0
    ba64:	str	x0, [sp, #296]
    ba68:	ldr	x0, [sp, #416]
    ba6c:	add	x0, x0, #0x1
    ba70:	str	x0, [sp, #416]
    ba74:	ldr	x1, [sp, #408]
    ba78:	ldr	x0, [sp, #416]
    ba7c:	cmp	x1, x0
    ba80:	b.hi	ba1c <XXH64+0x12cc>  // b.pmore
    ba84:	ldr	x0, [sp, #296]
    ba88:	lsr	x0, x0, #33
    ba8c:	ldr	x1, [sp, #296]
    ba90:	eor	x0, x1, x0
    ba94:	str	x0, [sp, #296]
    ba98:	mov	x0, #0xeb4f                	// #60239
    ba9c:	movk	x0, #0x27d4, lsl #16
    baa0:	movk	x0, #0xae3d, lsl #32
    baa4:	movk	x0, #0xc2b2, lsl #48
    baa8:	ldr	x1, [sp, #296]
    baac:	mul	x0, x1, x0
    bab0:	str	x0, [sp, #296]
    bab4:	ldr	x0, [sp, #296]
    bab8:	lsr	x0, x0, #29
    babc:	ldr	x1, [sp, #296]
    bac0:	eor	x0, x1, x0
    bac4:	str	x0, [sp, #296]
    bac8:	mov	x0, #0x79f9                	// #31225
    bacc:	movk	x0, #0x9e37, lsl #16
    bad0:	movk	x0, #0x67b1, lsl #32
    bad4:	movk	x0, #0x1656, lsl #48
    bad8:	ldr	x1, [sp, #296]
    badc:	mul	x0, x1, x0
    bae0:	str	x0, [sp, #296]
    bae4:	ldr	x0, [sp, #296]
    bae8:	lsr	x0, x0, #32
    baec:	ldr	x1, [sp, #296]
    baf0:	eor	x0, x1, x0
    baf4:	str	x0, [sp, #296]
    baf8:	ldr	x0, [sp, #296]
    bafc:	b	c174 <XXH64+0x1a24>
    bb00:	ldr	x0, [sp, #40]
    bb04:	str	x0, [sp, #248]
    bb08:	ldr	x0, [sp, #32]
    bb0c:	str	x0, [sp, #240]
    bb10:	ldr	x0, [sp, #24]
    bb14:	str	x0, [sp, #232]
    bb18:	str	wzr, [sp, #228]
    bb1c:	mov	w0, #0x1                   	// #1
    bb20:	str	w0, [sp, #224]
    bb24:	ldr	x0, [sp, #248]
    bb28:	str	x0, [sp, #216]
    bb2c:	ldr	x1, [sp, #216]
    bb30:	ldr	x0, [sp, #240]
    bb34:	add	x0, x1, x0
    bb38:	str	x0, [sp, #208]
    bb3c:	ldr	x0, [sp, #240]
    bb40:	cmp	x0, #0x1f
    bb44:	b.ls	be88 <XXH64+0x1738>  // b.plast
    bb48:	ldr	x0, [sp, #208]
    bb4c:	sub	x0, x0, #0x20
    bb50:	str	x0, [sp, #200]
    bb54:	mov	x1, #0xca87                	// #51847
    bb58:	movk	x1, #0x85eb, lsl #16
    bb5c:	movk	x1, #0x79b1, lsl #32
    bb60:	movk	x1, #0x9e37, lsl #48
    bb64:	ldr	x0, [sp, #232]
    bb68:	add	x1, x1, x0
    bb6c:	mov	x0, #0xeb4f                	// #60239
    bb70:	movk	x0, #0x27d4, lsl #16
    bb74:	movk	x0, #0xae3d, lsl #32
    bb78:	movk	x0, #0xc2b2, lsl #48
    bb7c:	add	x0, x1, x0
    bb80:	str	x0, [sp, #192]
    bb84:	mov	x0, #0xeb4f                	// #60239
    bb88:	movk	x0, #0x27d4, lsl #16
    bb8c:	movk	x0, #0xae3d, lsl #32
    bb90:	movk	x0, #0xc2b2, lsl #48
    bb94:	ldr	x1, [sp, #232]
    bb98:	add	x0, x1, x0
    bb9c:	str	x0, [sp, #184]
    bba0:	ldr	x0, [sp, #232]
    bba4:	str	x0, [sp, #176]
    bba8:	mov	x0, #0xca87                	// #51847
    bbac:	movk	x0, #0x85eb, lsl #16
    bbb0:	movk	x0, #0x79b1, lsl #32
    bbb4:	movk	x0, #0x9e37, lsl #48
    bbb8:	ldr	x1, [sp, #232]
    bbbc:	sub	x0, x1, x0
    bbc0:	str	x0, [sp, #168]
    bbc4:	ldr	x0, [sp, #216]
    bbc8:	str	x0, [sp, #160]
    bbcc:	ldr	w0, [sp, #228]
    bbd0:	str	w0, [sp, #156]
    bbd4:	ldr	w0, [sp, #224]
    bbd8:	str	w0, [sp, #152]
    bbdc:	ldr	w0, [sp, #152]
    bbe0:	cmp	w0, #0x1
    bbe4:	b.ne	bc10 <XXH64+0x14c0>  // b.any
    bbe8:	ldr	w0, [sp, #156]
    bbec:	cmp	w0, #0x1
    bbf0:	b.ne	bc00 <XXH64+0x14b0>  // b.any
    bbf4:	ldr	x0, [sp, #160]
    bbf8:	bl	9118 <XXH_read64>
    bbfc:	b	bc38 <XXH64+0x14e8>
    bc00:	ldr	x0, [sp, #160]
    bc04:	bl	9118 <XXH_read64>
    bc08:	rev	x0, x0
    bc0c:	b	bc38 <XXH64+0x14e8>
    bc10:	ldr	w0, [sp, #156]
    bc14:	cmp	w0, #0x1
    bc18:	b.ne	bc28 <XXH64+0x14d8>  // b.any
    bc1c:	ldr	x0, [sp, #160]
    bc20:	ldr	x0, [x0]
    bc24:	b	bc34 <XXH64+0x14e4>
    bc28:	ldr	x0, [sp, #160]
    bc2c:	ldr	x0, [x0]
    bc30:	rev	x0, x0
    bc34:	nop
    bc38:	mov	x1, x0
    bc3c:	ldr	x0, [sp, #192]
    bc40:	bl	a680 <XXH64_round>
    bc44:	str	x0, [sp, #192]
    bc48:	ldr	x0, [sp, #216]
    bc4c:	add	x0, x0, #0x8
    bc50:	str	x0, [sp, #216]
    bc54:	ldr	x0, [sp, #216]
    bc58:	str	x0, [sp, #144]
    bc5c:	ldr	w0, [sp, #228]
    bc60:	str	w0, [sp, #140]
    bc64:	ldr	w0, [sp, #224]
    bc68:	str	w0, [sp, #136]
    bc6c:	ldr	w0, [sp, #136]
    bc70:	cmp	w0, #0x1
    bc74:	b.ne	bca0 <XXH64+0x1550>  // b.any
    bc78:	ldr	w0, [sp, #140]
    bc7c:	cmp	w0, #0x1
    bc80:	b.ne	bc90 <XXH64+0x1540>  // b.any
    bc84:	ldr	x0, [sp, #144]
    bc88:	bl	9118 <XXH_read64>
    bc8c:	b	bcc8 <XXH64+0x1578>
    bc90:	ldr	x0, [sp, #144]
    bc94:	bl	9118 <XXH_read64>
    bc98:	rev	x0, x0
    bc9c:	b	bcc8 <XXH64+0x1578>
    bca0:	ldr	w0, [sp, #140]
    bca4:	cmp	w0, #0x1
    bca8:	b.ne	bcb8 <XXH64+0x1568>  // b.any
    bcac:	ldr	x0, [sp, #144]
    bcb0:	ldr	x0, [x0]
    bcb4:	b	bcc4 <XXH64+0x1574>
    bcb8:	ldr	x0, [sp, #144]
    bcbc:	ldr	x0, [x0]
    bcc0:	rev	x0, x0
    bcc4:	nop
    bcc8:	mov	x1, x0
    bccc:	ldr	x0, [sp, #184]
    bcd0:	bl	a680 <XXH64_round>
    bcd4:	str	x0, [sp, #184]
    bcd8:	ldr	x0, [sp, #216]
    bcdc:	add	x0, x0, #0x8
    bce0:	str	x0, [sp, #216]
    bce4:	ldr	x0, [sp, #216]
    bce8:	str	x0, [sp, #128]
    bcec:	ldr	w0, [sp, #228]
    bcf0:	str	w0, [sp, #124]
    bcf4:	ldr	w0, [sp, #224]
    bcf8:	str	w0, [sp, #120]
    bcfc:	ldr	w0, [sp, #120]
    bd00:	cmp	w0, #0x1
    bd04:	b.ne	bd30 <XXH64+0x15e0>  // b.any
    bd08:	ldr	w0, [sp, #124]
    bd0c:	cmp	w0, #0x1
    bd10:	b.ne	bd20 <XXH64+0x15d0>  // b.any
    bd14:	ldr	x0, [sp, #128]
    bd18:	bl	9118 <XXH_read64>
    bd1c:	b	bd58 <XXH64+0x1608>
    bd20:	ldr	x0, [sp, #128]
    bd24:	bl	9118 <XXH_read64>
    bd28:	rev	x0, x0
    bd2c:	b	bd58 <XXH64+0x1608>
    bd30:	ldr	w0, [sp, #124]
    bd34:	cmp	w0, #0x1
    bd38:	b.ne	bd48 <XXH64+0x15f8>  // b.any
    bd3c:	ldr	x0, [sp, #128]
    bd40:	ldr	x0, [x0]
    bd44:	b	bd54 <XXH64+0x1604>
    bd48:	ldr	x0, [sp, #128]
    bd4c:	ldr	x0, [x0]
    bd50:	rev	x0, x0
    bd54:	nop
    bd58:	mov	x1, x0
    bd5c:	ldr	x0, [sp, #176]
    bd60:	bl	a680 <XXH64_round>
    bd64:	str	x0, [sp, #176]
    bd68:	ldr	x0, [sp, #216]
    bd6c:	add	x0, x0, #0x8
    bd70:	str	x0, [sp, #216]
    bd74:	ldr	x0, [sp, #216]
    bd78:	str	x0, [sp, #112]
    bd7c:	ldr	w0, [sp, #228]
    bd80:	str	w0, [sp, #108]
    bd84:	ldr	w0, [sp, #224]
    bd88:	str	w0, [sp, #104]
    bd8c:	ldr	w0, [sp, #104]
    bd90:	cmp	w0, #0x1
    bd94:	b.ne	bdc0 <XXH64+0x1670>  // b.any
    bd98:	ldr	w0, [sp, #108]
    bd9c:	cmp	w0, #0x1
    bda0:	b.ne	bdb0 <XXH64+0x1660>  // b.any
    bda4:	ldr	x0, [sp, #112]
    bda8:	bl	9118 <XXH_read64>
    bdac:	b	bde8 <XXH64+0x1698>
    bdb0:	ldr	x0, [sp, #112]
    bdb4:	bl	9118 <XXH_read64>
    bdb8:	rev	x0, x0
    bdbc:	b	bde8 <XXH64+0x1698>
    bdc0:	ldr	w0, [sp, #108]
    bdc4:	cmp	w0, #0x1
    bdc8:	b.ne	bdd8 <XXH64+0x1688>  // b.any
    bdcc:	ldr	x0, [sp, #112]
    bdd0:	ldr	x0, [x0]
    bdd4:	b	bde4 <XXH64+0x1694>
    bdd8:	ldr	x0, [sp, #112]
    bddc:	ldr	x0, [x0]
    bde0:	rev	x0, x0
    bde4:	nop
    bde8:	mov	x1, x0
    bdec:	ldr	x0, [sp, #168]
    bdf0:	bl	a680 <XXH64_round>
    bdf4:	str	x0, [sp, #168]
    bdf8:	ldr	x0, [sp, #216]
    bdfc:	add	x0, x0, #0x8
    be00:	str	x0, [sp, #216]
    be04:	ldr	x1, [sp, #200]
    be08:	ldr	x0, [sp, #216]
    be0c:	cmp	x1, x0
    be10:	b.cs	bbc4 <XXH64+0x1474>  // b.hs, b.nlast
    be14:	ldr	x0, [sp, #192]
    be18:	ror	x1, x0, #63
    be1c:	ldr	x0, [sp, #184]
    be20:	ror	x0, x0, #57
    be24:	add	x1, x1, x0
    be28:	ldr	x0, [sp, #176]
    be2c:	ror	x0, x0, #52
    be30:	add	x1, x1, x0
    be34:	ldr	x0, [sp, #168]
    be38:	ror	x0, x0, #46
    be3c:	add	x0, x1, x0
    be40:	str	x0, [sp, #96]
    be44:	ldr	x1, [sp, #192]
    be48:	ldr	x0, [sp, #96]
    be4c:	bl	a6e4 <XXH64_mergeRound>
    be50:	str	x0, [sp, #96]
    be54:	ldr	x1, [sp, #184]
    be58:	ldr	x0, [sp, #96]
    be5c:	bl	a6e4 <XXH64_mergeRound>
    be60:	str	x0, [sp, #96]
    be64:	ldr	x1, [sp, #176]
    be68:	ldr	x0, [sp, #96]
    be6c:	bl	a6e4 <XXH64_mergeRound>
    be70:	str	x0, [sp, #96]
    be74:	ldr	x1, [sp, #168]
    be78:	ldr	x0, [sp, #96]
    be7c:	bl	a6e4 <XXH64_mergeRound>
    be80:	str	x0, [sp, #96]
    be84:	b	bea4 <XXH64+0x1754>
    be88:	mov	x0, #0x67c5                	// #26565
    be8c:	movk	x0, #0x1656, lsl #16
    be90:	movk	x0, #0xeb2f, lsl #32
    be94:	movk	x0, #0x27d4, lsl #48
    be98:	ldr	x1, [sp, #232]
    be9c:	add	x0, x1, x0
    bea0:	str	x0, [sp, #96]
    bea4:	ldr	x1, [sp, #96]
    bea8:	ldr	x0, [sp, #240]
    beac:	add	x0, x1, x0
    beb0:	str	x0, [sp, #96]
    beb4:	b	bf8c <XXH64+0x183c>
    beb8:	ldr	x0, [sp, #216]
    bebc:	str	x0, [sp, #88]
    bec0:	ldr	w0, [sp, #228]
    bec4:	str	w0, [sp, #84]
    bec8:	ldr	w0, [sp, #224]
    becc:	str	w0, [sp, #80]
    bed0:	ldr	w0, [sp, #80]
    bed4:	cmp	w0, #0x1
    bed8:	b.ne	bf04 <XXH64+0x17b4>  // b.any
    bedc:	ldr	w0, [sp, #84]
    bee0:	cmp	w0, #0x1
    bee4:	b.ne	bef4 <XXH64+0x17a4>  // b.any
    bee8:	ldr	x0, [sp, #88]
    beec:	bl	9118 <XXH_read64>
    bef0:	b	bf2c <XXH64+0x17dc>
    bef4:	ldr	x0, [sp, #88]
    bef8:	bl	9118 <XXH_read64>
    befc:	rev	x0, x0
    bf00:	b	bf2c <XXH64+0x17dc>
    bf04:	ldr	w0, [sp, #84]
    bf08:	cmp	w0, #0x1
    bf0c:	b.ne	bf1c <XXH64+0x17cc>  // b.any
    bf10:	ldr	x0, [sp, #88]
    bf14:	ldr	x0, [x0]
    bf18:	b	bf28 <XXH64+0x17d8>
    bf1c:	ldr	x0, [sp, #88]
    bf20:	ldr	x0, [x0]
    bf24:	rev	x0, x0
    bf28:	nop
    bf2c:	mov	x1, x0
    bf30:	mov	x0, #0x0                   	// #0
    bf34:	bl	a680 <XXH64_round>
    bf38:	str	x0, [sp, #72]
    bf3c:	ldr	x1, [sp, #96]
    bf40:	ldr	x0, [sp, #72]
    bf44:	eor	x0, x1, x0
    bf48:	str	x0, [sp, #96]
    bf4c:	ldr	x0, [sp, #96]
    bf50:	ror	x1, x0, #37
    bf54:	mov	x0, #0xca87                	// #51847
    bf58:	movk	x0, #0x85eb, lsl #16
    bf5c:	movk	x0, #0x79b1, lsl #32
    bf60:	movk	x0, #0x9e37, lsl #48
    bf64:	mul	x1, x1, x0
    bf68:	mov	x0, #0xae63                	// #44643
    bf6c:	movk	x0, #0xc2b2, lsl #16
    bf70:	movk	x0, #0xca77, lsl #32
    bf74:	movk	x0, #0x85eb, lsl #48
    bf78:	add	x0, x1, x0
    bf7c:	str	x0, [sp, #96]
    bf80:	ldr	x0, [sp, #216]
    bf84:	add	x0, x0, #0x8
    bf88:	str	x0, [sp, #216]
    bf8c:	ldr	x0, [sp, #216]
    bf90:	add	x0, x0, #0x8
    bf94:	ldr	x1, [sp, #208]
    bf98:	cmp	x1, x0
    bf9c:	b.cs	beb8 <XXH64+0x1768>  // b.hs, b.nlast
    bfa0:	ldr	x0, [sp, #216]
    bfa4:	add	x0, x0, #0x4
    bfa8:	ldr	x1, [sp, #208]
    bfac:	cmp	x1, x0
    bfb0:	b.cc	c0e8 <XXH64+0x1998>  // b.lo, b.ul, b.last
    bfb4:	ldr	x0, [sp, #216]
    bfb8:	str	x0, [sp, #64]
    bfbc:	ldr	w0, [sp, #228]
    bfc0:	str	w0, [sp, #60]
    bfc4:	ldr	w0, [sp, #224]
    bfc8:	str	w0, [sp, #56]
    bfcc:	ldr	w0, [sp, #56]
    bfd0:	cmp	w0, #0x1
    bfd4:	b.ne	c000 <XXH64+0x18b0>  // b.any
    bfd8:	ldr	w0, [sp, #60]
    bfdc:	cmp	w0, #0x1
    bfe0:	b.ne	bff0 <XXH64+0x18a0>  // b.any
    bfe4:	ldr	x0, [sp, #64]
    bfe8:	bl	90f0 <XXH_read32>
    bfec:	b	c028 <XXH64+0x18d8>
    bff0:	ldr	x0, [sp, #64]
    bff4:	bl	90f0 <XXH_read32>
    bff8:	rev	w0, w0
    bffc:	b	c028 <XXH64+0x18d8>
    c000:	ldr	w0, [sp, #60]
    c004:	cmp	w0, #0x1
    c008:	b.ne	c018 <XXH64+0x18c8>  // b.any
    c00c:	ldr	x0, [sp, #64]
    c010:	ldr	w0, [x0]
    c014:	b	c024 <XXH64+0x18d4>
    c018:	ldr	x0, [sp, #64]
    c01c:	ldr	w0, [x0]
    c020:	rev	w0, w0
    c024:	nop
    c028:	mov	w1, w0
    c02c:	mov	x0, #0xca87                	// #51847
    c030:	movk	x0, #0x85eb, lsl #16
    c034:	movk	x0, #0x79b1, lsl #32
    c038:	movk	x0, #0x9e37, lsl #48
    c03c:	mul	x0, x1, x0
    c040:	ldr	x1, [sp, #96]
    c044:	eor	x0, x1, x0
    c048:	str	x0, [sp, #96]
    c04c:	ldr	x0, [sp, #96]
    c050:	ror	x1, x0, #41
    c054:	mov	x0, #0xeb4f                	// #60239
    c058:	movk	x0, #0x27d4, lsl #16
    c05c:	movk	x0, #0xae3d, lsl #32
    c060:	movk	x0, #0xc2b2, lsl #48
    c064:	mul	x1, x1, x0
    c068:	mov	x0, #0x79f9                	// #31225
    c06c:	movk	x0, #0x9e37, lsl #16
    c070:	movk	x0, #0x67b1, lsl #32
    c074:	movk	x0, #0x1656, lsl #48
    c078:	add	x0, x1, x0
    c07c:	str	x0, [sp, #96]
    c080:	ldr	x0, [sp, #216]
    c084:	add	x0, x0, #0x4
    c088:	str	x0, [sp, #216]
    c08c:	b	c0e8 <XXH64+0x1998>
    c090:	ldr	x0, [sp, #216]
    c094:	ldrb	w0, [x0]
    c098:	and	x1, x0, #0xff
    c09c:	mov	x0, #0x67c5                	// #26565
    c0a0:	movk	x0, #0x1656, lsl #16
    c0a4:	movk	x0, #0xeb2f, lsl #32
    c0a8:	movk	x0, #0x27d4, lsl #48
    c0ac:	mul	x0, x1, x0
    c0b0:	ldr	x1, [sp, #96]
    c0b4:	eor	x0, x1, x0
    c0b8:	str	x0, [sp, #96]
    c0bc:	ldr	x0, [sp, #96]
    c0c0:	ror	x1, x0, #53
    c0c4:	mov	x0, #0xca87                	// #51847
    c0c8:	movk	x0, #0x85eb, lsl #16
    c0cc:	movk	x0, #0x79b1, lsl #32
    c0d0:	movk	x0, #0x9e37, lsl #48
    c0d4:	mul	x0, x1, x0
    c0d8:	str	x0, [sp, #96]
    c0dc:	ldr	x0, [sp, #216]
    c0e0:	add	x0, x0, #0x1
    c0e4:	str	x0, [sp, #216]
    c0e8:	ldr	x1, [sp, #208]
    c0ec:	ldr	x0, [sp, #216]
    c0f0:	cmp	x1, x0
    c0f4:	b.hi	c090 <XXH64+0x1940>  // b.pmore
    c0f8:	ldr	x0, [sp, #96]
    c0fc:	lsr	x0, x0, #33
    c100:	ldr	x1, [sp, #96]
    c104:	eor	x0, x1, x0
    c108:	str	x0, [sp, #96]
    c10c:	mov	x0, #0xeb4f                	// #60239
    c110:	movk	x0, #0x27d4, lsl #16
    c114:	movk	x0, #0xae3d, lsl #32
    c118:	movk	x0, #0xc2b2, lsl #48
    c11c:	ldr	x1, [sp, #96]
    c120:	mul	x0, x1, x0
    c124:	str	x0, [sp, #96]
    c128:	ldr	x0, [sp, #96]
    c12c:	lsr	x0, x0, #29
    c130:	ldr	x1, [sp, #96]
    c134:	eor	x0, x1, x0
    c138:	str	x0, [sp, #96]
    c13c:	mov	x0, #0x79f9                	// #31225
    c140:	movk	x0, #0x9e37, lsl #16
    c144:	movk	x0, #0x67b1, lsl #32
    c148:	movk	x0, #0x1656, lsl #48
    c14c:	ldr	x1, [sp, #96]
    c150:	mul	x0, x1, x0
    c154:	str	x0, [sp, #96]
    c158:	ldr	x0, [sp, #96]
    c15c:	lsr	x0, x0, #32
    c160:	ldr	x1, [sp, #96]
    c164:	eor	x0, x1, x0
    c168:	str	x0, [sp, #96]
    c16c:	ldr	x0, [sp, #96]
    c170:	nop
    c174:	ldp	x29, x30, [sp]
    c178:	add	sp, sp, #0x360
    c17c:	ret
	...

000000000000c188 <XXH32_createState>:
    c188:	stp	x29, x30, [sp, #-16]!
    c18c:	mov	x29, sp
    c190:	mov	x0, #0x30                  	// #48
    c194:	bl	9088 <XXH_malloc>
    c198:	ldp	x29, x30, [sp], #16
    c19c:	ret

000000000000c1a0 <XXH32_freeState>:
    c1a0:	stp	x29, x30, [sp, #-32]!
    c1a4:	mov	x29, sp
    c1a8:	str	x0, [sp, #24]
    c1ac:	ldr	x0, [sp, #24]
    c1b0:	bl	90a4 <XXH_free>
    c1b4:	mov	w0, #0x0                   	// #0
    c1b8:	ldp	x29, x30, [sp], #32
    c1bc:	ret

000000000000c1c0 <XXH64_createState>:
    c1c0:	stp	x29, x30, [sp, #-16]!
    c1c4:	mov	x29, sp
    c1c8:	mov	x0, #0x58                  	// #88
    c1cc:	bl	9088 <XXH_malloc>
    c1d0:	ldp	x29, x30, [sp], #16
    c1d4:	ret

000000000000c1d8 <XXH64_freeState>:
    c1d8:	stp	x29, x30, [sp, #-32]!
    c1dc:	mov	x29, sp
    c1e0:	str	x0, [sp, #24]
    c1e4:	ldr	x0, [sp, #24]
    c1e8:	bl	90a4 <XXH_free>
    c1ec:	mov	w0, #0x0                   	// #0
    c1f0:	ldp	x29, x30, [sp], #32
    c1f4:	ret

000000000000c1f8 <XXH32_reset>:
    c1f8:	stp	x29, x30, [sp, #-80]!
    c1fc:	mov	x29, sp
    c200:	str	x0, [sp, #24]
    c204:	str	w1, [sp, #20]
    c208:	add	x0, sp, #0x20
    c20c:	mov	x2, #0x2c                  	// #44
    c210:	mov	w1, #0x0                   	// #0
    c214:	bl	0 <grub_memset>
    c218:	mov	w1, #0x79b1                	// #31153
    c21c:	movk	w1, #0x9e37, lsl #16
    c220:	ldr	w0, [sp, #20]
    c224:	add	w1, w1, w0
    c228:	mov	w0, #0xca77                	// #51831
    c22c:	movk	w0, #0x85eb, lsl #16
    c230:	add	w0, w1, w0
    c234:	str	w0, [sp, #40]
    c238:	mov	w1, #0xca77                	// #51831
    c23c:	movk	w1, #0x85eb, lsl #16
    c240:	ldr	w0, [sp, #20]
    c244:	add	w0, w1, w0
    c248:	str	w0, [sp, #44]
    c24c:	ldr	w0, [sp, #20]
    c250:	str	w0, [sp, #48]
    c254:	mov	w0, #0x79b1                	// #31153
    c258:	movk	w0, #0x9e37, lsl #16
    c25c:	ldr	w1, [sp, #20]
    c260:	sub	w0, w1, w0
    c264:	str	w0, [sp, #52]
    c268:	add	x0, sp, #0x20
    c26c:	mov	x2, #0x30                  	// #48
    c270:	mov	x1, x0
    c274:	ldr	x0, [sp, #24]
    c278:	bl	9020 <grub_memcpy>
    c27c:	mov	w0, #0x0                   	// #0
    c280:	ldp	x29, x30, [sp], #80
    c284:	ret

000000000000c288 <XXH64_reset>:
    c288:	stp	x29, x30, [sp, #-128]!
    c28c:	mov	x29, sp
    c290:	str	x0, [sp, #24]
    c294:	str	x1, [sp, #16]
    c298:	add	x0, sp, #0x28
    c29c:	mov	x2, #0x50                  	// #80
    c2a0:	mov	w1, #0x0                   	// #0
    c2a4:	bl	0 <grub_memset>
    c2a8:	mov	x1, #0xca87                	// #51847
    c2ac:	movk	x1, #0x85eb, lsl #16
    c2b0:	movk	x1, #0x79b1, lsl #32
    c2b4:	movk	x1, #0x9e37, lsl #48
    c2b8:	ldr	x0, [sp, #16]
    c2bc:	add	x1, x1, x0
    c2c0:	mov	x0, #0xeb4f                	// #60239
    c2c4:	movk	x0, #0x27d4, lsl #16
    c2c8:	movk	x0, #0xae3d, lsl #32
    c2cc:	movk	x0, #0xc2b2, lsl #48
    c2d0:	add	x0, x1, x0
    c2d4:	str	x0, [sp, #48]
    c2d8:	mov	x1, #0xeb4f                	// #60239
    c2dc:	movk	x1, #0x27d4, lsl #16
    c2e0:	movk	x1, #0xae3d, lsl #32
    c2e4:	movk	x1, #0xc2b2, lsl #48
    c2e8:	ldr	x0, [sp, #16]
    c2ec:	add	x0, x1, x0
    c2f0:	str	x0, [sp, #56]
    c2f4:	ldr	x0, [sp, #16]
    c2f8:	str	x0, [sp, #64]
    c2fc:	mov	x0, #0xca87                	// #51847
    c300:	movk	x0, #0x85eb, lsl #16
    c304:	movk	x0, #0x79b1, lsl #32
    c308:	movk	x0, #0x9e37, lsl #48
    c30c:	ldr	x1, [sp, #16]
    c310:	sub	x0, x1, x0
    c314:	str	x0, [sp, #72]
    c318:	add	x0, sp, #0x28
    c31c:	mov	x2, #0x58                  	// #88
    c320:	mov	x1, x0
    c324:	ldr	x0, [sp, #24]
    c328:	bl	9020 <grub_memcpy>
    c32c:	mov	w0, #0x0                   	// #0
    c330:	ldp	x29, x30, [sp], #128
    c334:	ret

000000000000c338 <XXH32_update>:
    c338:	sub	sp, sp, #0x2f0
    c33c:	stp	x29, x30, [sp]
    c340:	mov	x29, sp
    c344:	str	x19, [sp, #16]
    c348:	str	x0, [sp, #56]
    c34c:	str	x1, [sp, #48]
    c350:	str	x2, [sp, #40]
    c354:	adrp	x0, 0 <grub_memcpy>
    c358:	add	x0, x0, #0x0
    c35c:	ldr	x0, [x0]
    c360:	ldrb	w0, [x0]
    c364:	str	w0, [sp, #748]
    c368:	ldr	w0, [sp, #748]
    c36c:	cmp	w0, #0x1
    c370:	b.ne	cb28 <XXH32_update+0x7f0>  // b.any
    c374:	ldr	x0, [sp, #56]
    c378:	str	x0, [sp, #736]
    c37c:	ldr	x0, [sp, #48]
    c380:	str	x0, [sp, #728]
    c384:	ldr	x0, [sp, #40]
    c388:	str	x0, [sp, #720]
    c38c:	mov	w0, #0x1                   	// #1
    c390:	str	w0, [sp, #716]
    c394:	ldr	x0, [sp, #728]
    c398:	str	x0, [sp, #704]
    c39c:	ldr	x1, [sp, #704]
    c3a0:	ldr	x0, [sp, #720]
    c3a4:	add	x0, x1, x0
    c3a8:	str	x0, [sp, #696]
    c3ac:	ldr	x0, [sp, #736]
    c3b0:	ldr	w0, [x0]
    c3b4:	ldr	x1, [sp, #720]
    c3b8:	add	w1, w0, w1
    c3bc:	ldr	x0, [sp, #736]
    c3c0:	str	w1, [x0]
    c3c4:	ldr	x0, [sp, #736]
    c3c8:	ldr	w0, [x0, #4]
    c3cc:	ldr	x1, [sp, #720]
    c3d0:	cmp	x1, #0xf
    c3d4:	cset	w1, hi  // hi = pmore
    c3d8:	and	w2, w1, #0xff
    c3dc:	ldr	x1, [sp, #736]
    c3e0:	ldr	w1, [x1]
    c3e4:	cmp	w1, #0xf
    c3e8:	cset	w1, hi  // hi = pmore
    c3ec:	and	w1, w1, #0xff
    c3f0:	orr	w1, w2, w1
    c3f4:	and	w1, w1, #0xff
    c3f8:	orr	w1, w0, w1
    c3fc:	ldr	x0, [sp, #736]
    c400:	str	w1, [x0, #4]
    c404:	ldr	x0, [sp, #736]
    c408:	ldr	w0, [x0, #40]
    c40c:	mov	w1, w0
    c410:	ldr	x0, [sp, #720]
    c414:	add	x0, x1, x0
    c418:	cmp	x0, #0xf
    c41c:	b.hi	c464 <XXH32_update+0x12c>  // b.pmore
    c420:	ldr	x0, [sp, #736]
    c424:	add	x1, x0, #0x18
    c428:	ldr	x0, [sp, #736]
    c42c:	ldr	w0, [x0, #40]
    c430:	mov	w0, w0
    c434:	add	x0, x1, x0
    c438:	ldr	x2, [sp, #720]
    c43c:	ldr	x1, [sp, #728]
    c440:	bl	90c4 <XXH_memcpy>
    c444:	ldr	x0, [sp, #736]
    c448:	ldr	w0, [x0, #40]
    c44c:	ldr	x1, [sp, #720]
    c450:	add	w1, w0, w1
    c454:	ldr	x0, [sp, #736]
    c458:	str	w1, [x0, #40]
    c45c:	mov	w0, #0x0                   	// #0
    c460:	b	cb24 <XXH32_update+0x7ec>
    c464:	ldr	x0, [sp, #736]
    c468:	ldr	w0, [x0, #40]
    c46c:	cmp	w0, #0x0
    c470:	b.eq	c7b4 <XXH32_update+0x47c>  // b.none
    c474:	ldr	x0, [sp, #736]
    c478:	add	x1, x0, #0x18
    c47c:	ldr	x0, [sp, #736]
    c480:	ldr	w0, [x0, #40]
    c484:	mov	w0, w0
    c488:	add	x3, x1, x0
    c48c:	ldr	x0, [sp, #736]
    c490:	ldr	w0, [x0, #40]
    c494:	mov	w1, #0x10                  	// #16
    c498:	sub	w0, w1, w0
    c49c:	mov	w0, w0
    c4a0:	mov	x2, x0
    c4a4:	ldr	x1, [sp, #728]
    c4a8:	mov	x0, x3
    c4ac:	bl	90c4 <XXH_memcpy>
    c4b0:	ldr	x0, [sp, #736]
    c4b4:	add	x0, x0, #0x18
    c4b8:	str	x0, [sp, #688]
    c4bc:	ldr	x0, [sp, #736]
    c4c0:	ldr	w19, [x0, #8]
    c4c4:	ldr	x0, [sp, #688]
    c4c8:	str	x0, [sp, #680]
    c4cc:	ldr	w0, [sp, #716]
    c4d0:	str	w0, [sp, #676]
    c4d4:	ldr	x0, [sp, #680]
    c4d8:	str	x0, [sp, #664]
    c4dc:	ldr	w0, [sp, #676]
    c4e0:	str	w0, [sp, #660]
    c4e4:	mov	w0, #0x1                   	// #1
    c4e8:	str	w0, [sp, #656]
    c4ec:	ldr	w0, [sp, #656]
    c4f0:	cmp	w0, #0x1
    c4f4:	b.ne	c520 <XXH32_update+0x1e8>  // b.any
    c4f8:	ldr	w0, [sp, #660]
    c4fc:	cmp	w0, #0x1
    c500:	b.ne	c510 <XXH32_update+0x1d8>  // b.any
    c504:	ldr	x0, [sp, #664]
    c508:	bl	90f0 <XXH_read32>
    c50c:	b	c548 <XXH32_update+0x210>
    c510:	ldr	x0, [sp, #664]
    c514:	bl	90f0 <XXH_read32>
    c518:	rev	w0, w0
    c51c:	b	c548 <XXH32_update+0x210>
    c520:	ldr	w0, [sp, #660]
    c524:	cmp	w0, #0x1
    c528:	b.ne	c538 <XXH32_update+0x200>  // b.any
    c52c:	ldr	x0, [sp, #664]
    c530:	ldr	w0, [x0]
    c534:	b	c544 <XXH32_update+0x20c>
    c538:	ldr	x0, [sp, #664]
    c53c:	ldr	w0, [x0]
    c540:	rev	w0, w0
    c544:	nop
    c548:	nop
    c54c:	mov	w1, w0
    c550:	mov	w0, w19
    c554:	bl	9240 <XXH32_round>
    c558:	mov	w1, w0
    c55c:	ldr	x0, [sp, #736]
    c560:	str	w1, [x0, #8]
    c564:	ldr	x0, [sp, #688]
    c568:	add	x0, x0, #0x4
    c56c:	str	x0, [sp, #688]
    c570:	ldr	x0, [sp, #736]
    c574:	ldr	w19, [x0, #12]
    c578:	ldr	x0, [sp, #688]
    c57c:	str	x0, [sp, #648]
    c580:	ldr	w0, [sp, #716]
    c584:	str	w0, [sp, #644]
    c588:	ldr	x0, [sp, #648]
    c58c:	str	x0, [sp, #632]
    c590:	ldr	w0, [sp, #644]
    c594:	str	w0, [sp, #628]
    c598:	mov	w0, #0x1                   	// #1
    c59c:	str	w0, [sp, #624]
    c5a0:	ldr	w0, [sp, #624]
    c5a4:	cmp	w0, #0x1
    c5a8:	b.ne	c5d4 <XXH32_update+0x29c>  // b.any
    c5ac:	ldr	w0, [sp, #628]
    c5b0:	cmp	w0, #0x1
    c5b4:	b.ne	c5c4 <XXH32_update+0x28c>  // b.any
    c5b8:	ldr	x0, [sp, #632]
    c5bc:	bl	90f0 <XXH_read32>
    c5c0:	b	c5fc <XXH32_update+0x2c4>
    c5c4:	ldr	x0, [sp, #632]
    c5c8:	bl	90f0 <XXH_read32>
    c5cc:	rev	w0, w0
    c5d0:	b	c5fc <XXH32_update+0x2c4>
    c5d4:	ldr	w0, [sp, #628]
    c5d8:	cmp	w0, #0x1
    c5dc:	b.ne	c5ec <XXH32_update+0x2b4>  // b.any
    c5e0:	ldr	x0, [sp, #632]
    c5e4:	ldr	w0, [x0]
    c5e8:	b	c5f8 <XXH32_update+0x2c0>
    c5ec:	ldr	x0, [sp, #632]
    c5f0:	ldr	w0, [x0]
    c5f4:	rev	w0, w0
    c5f8:	nop
    c5fc:	nop
    c600:	mov	w1, w0
    c604:	mov	w0, w19
    c608:	bl	9240 <XXH32_round>
    c60c:	mov	w1, w0
    c610:	ldr	x0, [sp, #736]
    c614:	str	w1, [x0, #12]
    c618:	ldr	x0, [sp, #688]
    c61c:	add	x0, x0, #0x4
    c620:	str	x0, [sp, #688]
    c624:	ldr	x0, [sp, #736]
    c628:	ldr	w19, [x0, #16]
    c62c:	ldr	x0, [sp, #688]
    c630:	str	x0, [sp, #616]
    c634:	ldr	w0, [sp, #716]
    c638:	str	w0, [sp, #612]
    c63c:	ldr	x0, [sp, #616]
    c640:	str	x0, [sp, #600]
    c644:	ldr	w0, [sp, #612]
    c648:	str	w0, [sp, #596]
    c64c:	mov	w0, #0x1                   	// #1
    c650:	str	w0, [sp, #592]
    c654:	ldr	w0, [sp, #592]
    c658:	cmp	w0, #0x1
    c65c:	b.ne	c688 <XXH32_update+0x350>  // b.any
    c660:	ldr	w0, [sp, #596]
    c664:	cmp	w0, #0x1
    c668:	b.ne	c678 <XXH32_update+0x340>  // b.any
    c66c:	ldr	x0, [sp, #600]
    c670:	bl	90f0 <XXH_read32>
    c674:	b	c6b0 <XXH32_update+0x378>
    c678:	ldr	x0, [sp, #600]
    c67c:	bl	90f0 <XXH_read32>
    c680:	rev	w0, w0
    c684:	b	c6b0 <XXH32_update+0x378>
    c688:	ldr	w0, [sp, #596]
    c68c:	cmp	w0, #0x1
    c690:	b.ne	c6a0 <XXH32_update+0x368>  // b.any
    c694:	ldr	x0, [sp, #600]
    c698:	ldr	w0, [x0]
    c69c:	b	c6ac <XXH32_update+0x374>
    c6a0:	ldr	x0, [sp, #600]
    c6a4:	ldr	w0, [x0]
    c6a8:	rev	w0, w0
    c6ac:	nop
    c6b0:	nop
    c6b4:	mov	w1, w0
    c6b8:	mov	w0, w19
    c6bc:	bl	9240 <XXH32_round>
    c6c0:	mov	w1, w0
    c6c4:	ldr	x0, [sp, #736]
    c6c8:	str	w1, [x0, #16]
    c6cc:	ldr	x0, [sp, #688]
    c6d0:	add	x0, x0, #0x4
    c6d4:	str	x0, [sp, #688]
    c6d8:	ldr	x0, [sp, #736]
    c6dc:	ldr	w19, [x0, #20]
    c6e0:	ldr	x0, [sp, #688]
    c6e4:	str	x0, [sp, #584]
    c6e8:	ldr	w0, [sp, #716]
    c6ec:	str	w0, [sp, #580]
    c6f0:	ldr	x0, [sp, #584]
    c6f4:	str	x0, [sp, #568]
    c6f8:	ldr	w0, [sp, #580]
    c6fc:	str	w0, [sp, #564]
    c700:	mov	w0, #0x1                   	// #1
    c704:	str	w0, [sp, #560]
    c708:	ldr	w0, [sp, #560]
    c70c:	cmp	w0, #0x1
    c710:	b.ne	c73c <XXH32_update+0x404>  // b.any
    c714:	ldr	w0, [sp, #564]
    c718:	cmp	w0, #0x1
    c71c:	b.ne	c72c <XXH32_update+0x3f4>  // b.any
    c720:	ldr	x0, [sp, #568]
    c724:	bl	90f0 <XXH_read32>
    c728:	b	c764 <XXH32_update+0x42c>
    c72c:	ldr	x0, [sp, #568]
    c730:	bl	90f0 <XXH_read32>
    c734:	rev	w0, w0
    c738:	b	c764 <XXH32_update+0x42c>
    c73c:	ldr	w0, [sp, #564]
    c740:	cmp	w0, #0x1
    c744:	b.ne	c754 <XXH32_update+0x41c>  // b.any
    c748:	ldr	x0, [sp, #568]
    c74c:	ldr	w0, [x0]
    c750:	b	c760 <XXH32_update+0x428>
    c754:	ldr	x0, [sp, #568]
    c758:	ldr	w0, [x0]
    c75c:	rev	w0, w0
    c760:	nop
    c764:	nop
    c768:	mov	w1, w0
    c76c:	mov	w0, w19
    c770:	bl	9240 <XXH32_round>
    c774:	mov	w1, w0
    c778:	ldr	x0, [sp, #736]
    c77c:	str	w1, [x0, #20]
    c780:	ldr	x0, [sp, #688]
    c784:	add	x0, x0, #0x4
    c788:	str	x0, [sp, #688]
    c78c:	ldr	x0, [sp, #736]
    c790:	ldr	w0, [x0, #40]
    c794:	mov	w1, #0x10                  	// #16
    c798:	sub	w0, w1, w0
    c79c:	mov	w0, w0
    c7a0:	ldr	x1, [sp, #704]
    c7a4:	add	x0, x1, x0
    c7a8:	str	x0, [sp, #704]
    c7ac:	ldr	x0, [sp, #736]
    c7b0:	str	wzr, [x0, #40]
    c7b4:	ldr	x0, [sp, #696]
    c7b8:	sub	x1, x0, #0x10
    c7bc:	ldr	x0, [sp, #704]
    c7c0:	cmp	x1, x0
    c7c4:	b.cc	cad4 <XXH32_update+0x79c>  // b.lo, b.ul, b.last
    c7c8:	ldr	x0, [sp, #696]
    c7cc:	sub	x0, x0, #0x10
    c7d0:	str	x0, [sp, #552]
    c7d4:	ldr	x0, [sp, #736]
    c7d8:	ldr	w0, [x0, #8]
    c7dc:	str	w0, [sp, #548]
    c7e0:	ldr	x0, [sp, #736]
    c7e4:	ldr	w0, [x0, #12]
    c7e8:	str	w0, [sp, #544]
    c7ec:	ldr	x0, [sp, #736]
    c7f0:	ldr	w0, [x0, #16]
    c7f4:	str	w0, [sp, #540]
    c7f8:	ldr	x0, [sp, #736]
    c7fc:	ldr	w0, [x0, #20]
    c800:	str	w0, [sp, #536]
    c804:	ldr	x0, [sp, #704]
    c808:	str	x0, [sp, #528]
    c80c:	ldr	w0, [sp, #716]
    c810:	str	w0, [sp, #524]
    c814:	ldr	x0, [sp, #528]
    c818:	str	x0, [sp, #512]
    c81c:	ldr	w0, [sp, #524]
    c820:	str	w0, [sp, #508]
    c824:	mov	w0, #0x1                   	// #1
    c828:	str	w0, [sp, #504]
    c82c:	ldr	w0, [sp, #504]
    c830:	cmp	w0, #0x1
    c834:	b.ne	c860 <XXH32_update+0x528>  // b.any
    c838:	ldr	w0, [sp, #508]
    c83c:	cmp	w0, #0x1
    c840:	b.ne	c850 <XXH32_update+0x518>  // b.any
    c844:	ldr	x0, [sp, #512]
    c848:	bl	90f0 <XXH_read32>
    c84c:	b	c888 <XXH32_update+0x550>
    c850:	ldr	x0, [sp, #512]
    c854:	bl	90f0 <XXH_read32>
    c858:	rev	w0, w0
    c85c:	b	c888 <XXH32_update+0x550>
    c860:	ldr	w0, [sp, #508]
    c864:	cmp	w0, #0x1
    c868:	b.ne	c878 <XXH32_update+0x540>  // b.any
    c86c:	ldr	x0, [sp, #512]
    c870:	ldr	w0, [x0]
    c874:	b	c884 <XXH32_update+0x54c>
    c878:	ldr	x0, [sp, #512]
    c87c:	ldr	w0, [x0]
    c880:	rev	w0, w0
    c884:	nop
    c888:	nop
    c88c:	mov	w1, w0
    c890:	ldr	w0, [sp, #548]
    c894:	bl	9240 <XXH32_round>
    c898:	str	w0, [sp, #548]
    c89c:	ldr	x0, [sp, #704]
    c8a0:	add	x0, x0, #0x4
    c8a4:	str	x0, [sp, #704]
    c8a8:	ldr	x0, [sp, #704]
    c8ac:	str	x0, [sp, #496]
    c8b0:	ldr	w0, [sp, #716]
    c8b4:	str	w0, [sp, #492]
    c8b8:	ldr	x0, [sp, #496]
    c8bc:	str	x0, [sp, #480]
    c8c0:	ldr	w0, [sp, #492]
    c8c4:	str	w0, [sp, #476]
    c8c8:	mov	w0, #0x1                   	// #1
    c8cc:	str	w0, [sp, #472]
    c8d0:	ldr	w0, [sp, #472]
    c8d4:	cmp	w0, #0x1
    c8d8:	b.ne	c904 <XXH32_update+0x5cc>  // b.any
    c8dc:	ldr	w0, [sp, #476]
    c8e0:	cmp	w0, #0x1
    c8e4:	b.ne	c8f4 <XXH32_update+0x5bc>  // b.any
    c8e8:	ldr	x0, [sp, #480]
    c8ec:	bl	90f0 <XXH_read32>
    c8f0:	b	c92c <XXH32_update+0x5f4>
    c8f4:	ldr	x0, [sp, #480]
    c8f8:	bl	90f0 <XXH_read32>
    c8fc:	rev	w0, w0
    c900:	b	c92c <XXH32_update+0x5f4>
    c904:	ldr	w0, [sp, #476]
    c908:	cmp	w0, #0x1
    c90c:	b.ne	c91c <XXH32_update+0x5e4>  // b.any
    c910:	ldr	x0, [sp, #480]
    c914:	ldr	w0, [x0]
    c918:	b	c928 <XXH32_update+0x5f0>
    c91c:	ldr	x0, [sp, #480]
    c920:	ldr	w0, [x0]
    c924:	rev	w0, w0
    c928:	nop
    c92c:	nop
    c930:	mov	w1, w0
    c934:	ldr	w0, [sp, #544]
    c938:	bl	9240 <XXH32_round>
    c93c:	str	w0, [sp, #544]
    c940:	ldr	x0, [sp, #704]
    c944:	add	x0, x0, #0x4
    c948:	str	x0, [sp, #704]
    c94c:	ldr	x0, [sp, #704]
    c950:	str	x0, [sp, #464]
    c954:	ldr	w0, [sp, #716]
    c958:	str	w0, [sp, #460]
    c95c:	ldr	x0, [sp, #464]
    c960:	str	x0, [sp, #448]
    c964:	ldr	w0, [sp, #460]
    c968:	str	w0, [sp, #444]
    c96c:	mov	w0, #0x1                   	// #1
    c970:	str	w0, [sp, #440]
    c974:	ldr	w0, [sp, #440]
    c978:	cmp	w0, #0x1
    c97c:	b.ne	c9a8 <XXH32_update+0x670>  // b.any
    c980:	ldr	w0, [sp, #444]
    c984:	cmp	w0, #0x1
    c988:	b.ne	c998 <XXH32_update+0x660>  // b.any
    c98c:	ldr	x0, [sp, #448]
    c990:	bl	90f0 <XXH_read32>
    c994:	b	c9d0 <XXH32_update+0x698>
    c998:	ldr	x0, [sp, #448]
    c99c:	bl	90f0 <XXH_read32>
    c9a0:	rev	w0, w0
    c9a4:	b	c9d0 <XXH32_update+0x698>
    c9a8:	ldr	w0, [sp, #444]
    c9ac:	cmp	w0, #0x1
    c9b0:	b.ne	c9c0 <XXH32_update+0x688>  // b.any
    c9b4:	ldr	x0, [sp, #448]
    c9b8:	ldr	w0, [x0]
    c9bc:	b	c9cc <XXH32_update+0x694>
    c9c0:	ldr	x0, [sp, #448]
    c9c4:	ldr	w0, [x0]
    c9c8:	rev	w0, w0
    c9cc:	nop
    c9d0:	nop
    c9d4:	mov	w1, w0
    c9d8:	ldr	w0, [sp, #540]
    c9dc:	bl	9240 <XXH32_round>
    c9e0:	str	w0, [sp, #540]
    c9e4:	ldr	x0, [sp, #704]
    c9e8:	add	x0, x0, #0x4
    c9ec:	str	x0, [sp, #704]
    c9f0:	ldr	x0, [sp, #704]
    c9f4:	str	x0, [sp, #432]
    c9f8:	ldr	w0, [sp, #716]
    c9fc:	str	w0, [sp, #428]
    ca00:	ldr	x0, [sp, #432]
    ca04:	str	x0, [sp, #416]
    ca08:	ldr	w0, [sp, #428]
    ca0c:	str	w0, [sp, #412]
    ca10:	mov	w0, #0x1                   	// #1
    ca14:	str	w0, [sp, #408]
    ca18:	ldr	w0, [sp, #408]
    ca1c:	cmp	w0, #0x1
    ca20:	b.ne	ca4c <XXH32_update+0x714>  // b.any
    ca24:	ldr	w0, [sp, #412]
    ca28:	cmp	w0, #0x1
    ca2c:	b.ne	ca3c <XXH32_update+0x704>  // b.any
    ca30:	ldr	x0, [sp, #416]
    ca34:	bl	90f0 <XXH_read32>
    ca38:	b	ca74 <XXH32_update+0x73c>
    ca3c:	ldr	x0, [sp, #416]
    ca40:	bl	90f0 <XXH_read32>
    ca44:	rev	w0, w0
    ca48:	b	ca74 <XXH32_update+0x73c>
    ca4c:	ldr	w0, [sp, #412]
    ca50:	cmp	w0, #0x1
    ca54:	b.ne	ca64 <XXH32_update+0x72c>  // b.any
    ca58:	ldr	x0, [sp, #416]
    ca5c:	ldr	w0, [x0]
    ca60:	b	ca70 <XXH32_update+0x738>
    ca64:	ldr	x0, [sp, #416]
    ca68:	ldr	w0, [x0]
    ca6c:	rev	w0, w0
    ca70:	nop
    ca74:	nop
    ca78:	mov	w1, w0
    ca7c:	ldr	w0, [sp, #536]
    ca80:	bl	9240 <XXH32_round>
    ca84:	str	w0, [sp, #536]
    ca88:	ldr	x0, [sp, #704]
    ca8c:	add	x0, x0, #0x4
    ca90:	str	x0, [sp, #704]
    ca94:	ldr	x1, [sp, #552]
    ca98:	ldr	x0, [sp, #704]
    ca9c:	cmp	x1, x0
    caa0:	b.cs	c804 <XXH32_update+0x4cc>  // b.hs, b.nlast
    caa4:	ldr	x0, [sp, #736]
    caa8:	ldr	w1, [sp, #548]
    caac:	str	w1, [x0, #8]
    cab0:	ldr	x0, [sp, #736]
    cab4:	ldr	w1, [sp, #544]
    cab8:	str	w1, [x0, #12]
    cabc:	ldr	x0, [sp, #736]
    cac0:	ldr	w1, [sp, #540]
    cac4:	str	w1, [x0, #16]
    cac8:	ldr	x0, [sp, #736]
    cacc:	ldr	w1, [sp, #536]
    cad0:	str	w1, [x0, #20]
    cad4:	ldr	x1, [sp, #696]
    cad8:	ldr	x0, [sp, #704]
    cadc:	cmp	x1, x0
    cae0:	b.ls	cb20 <XXH32_update+0x7e8>  // b.plast
    cae4:	ldr	x0, [sp, #736]
    cae8:	add	x3, x0, #0x18
    caec:	ldr	x1, [sp, #696]
    caf0:	ldr	x0, [sp, #704]
    caf4:	sub	x0, x1, x0
    caf8:	mov	x2, x0
    cafc:	ldr	x1, [sp, #704]
    cb00:	mov	x0, x3
    cb04:	bl	90c4 <XXH_memcpy>
    cb08:	ldr	x1, [sp, #696]
    cb0c:	ldr	x0, [sp, #704]
    cb10:	sub	x0, x1, x0
    cb14:	mov	w1, w0
    cb18:	ldr	x0, [sp, #736]
    cb1c:	str	w1, [x0, #40]
    cb20:	mov	w0, #0x0                   	// #0
    cb24:	b	d2d8 <XXH32_update+0xfa0>
    cb28:	ldr	x0, [sp, #56]
    cb2c:	str	x0, [sp, #400]
    cb30:	ldr	x0, [sp, #48]
    cb34:	str	x0, [sp, #392]
    cb38:	ldr	x0, [sp, #40]
    cb3c:	str	x0, [sp, #384]
    cb40:	str	wzr, [sp, #380]
    cb44:	ldr	x0, [sp, #392]
    cb48:	str	x0, [sp, #368]
    cb4c:	ldr	x1, [sp, #368]
    cb50:	ldr	x0, [sp, #384]
    cb54:	add	x0, x1, x0
    cb58:	str	x0, [sp, #360]
    cb5c:	ldr	x0, [sp, #400]
    cb60:	ldr	w0, [x0]
    cb64:	ldr	x1, [sp, #384]
    cb68:	add	w1, w0, w1
    cb6c:	ldr	x0, [sp, #400]
    cb70:	str	w1, [x0]
    cb74:	ldr	x0, [sp, #400]
    cb78:	ldr	w0, [x0, #4]
    cb7c:	ldr	x1, [sp, #384]
    cb80:	cmp	x1, #0xf
    cb84:	cset	w1, hi  // hi = pmore
    cb88:	and	w2, w1, #0xff
    cb8c:	ldr	x1, [sp, #400]
    cb90:	ldr	w1, [x1]
    cb94:	cmp	w1, #0xf
    cb98:	cset	w1, hi  // hi = pmore
    cb9c:	and	w1, w1, #0xff
    cba0:	orr	w1, w2, w1
    cba4:	and	w1, w1, #0xff
    cba8:	orr	w1, w0, w1
    cbac:	ldr	x0, [sp, #400]
    cbb0:	str	w1, [x0, #4]
    cbb4:	ldr	x0, [sp, #400]
    cbb8:	ldr	w0, [x0, #40]
    cbbc:	mov	w1, w0
    cbc0:	ldr	x0, [sp, #384]
    cbc4:	add	x0, x1, x0
    cbc8:	cmp	x0, #0xf
    cbcc:	b.hi	cc14 <XXH32_update+0x8dc>  // b.pmore
    cbd0:	ldr	x0, [sp, #400]
    cbd4:	add	x1, x0, #0x18
    cbd8:	ldr	x0, [sp, #400]
    cbdc:	ldr	w0, [x0, #40]
    cbe0:	mov	w0, w0
    cbe4:	add	x0, x1, x0
    cbe8:	ldr	x2, [sp, #384]
    cbec:	ldr	x1, [sp, #392]
    cbf0:	bl	90c4 <XXH_memcpy>
    cbf4:	ldr	x0, [sp, #400]
    cbf8:	ldr	w0, [x0, #40]
    cbfc:	ldr	x1, [sp, #384]
    cc00:	add	w1, w0, w1
    cc04:	ldr	x0, [sp, #400]
    cc08:	str	w1, [x0, #40]
    cc0c:	mov	w0, #0x0                   	// #0
    cc10:	b	d2d4 <XXH32_update+0xf9c>
    cc14:	ldr	x0, [sp, #400]
    cc18:	ldr	w0, [x0, #40]
    cc1c:	cmp	w0, #0x0
    cc20:	b.eq	cf64 <XXH32_update+0xc2c>  // b.none
    cc24:	ldr	x0, [sp, #400]
    cc28:	add	x1, x0, #0x18
    cc2c:	ldr	x0, [sp, #400]
    cc30:	ldr	w0, [x0, #40]
    cc34:	mov	w0, w0
    cc38:	add	x3, x1, x0
    cc3c:	ldr	x0, [sp, #400]
    cc40:	ldr	w0, [x0, #40]
    cc44:	mov	w1, #0x10                  	// #16
    cc48:	sub	w0, w1, w0
    cc4c:	mov	w0, w0
    cc50:	mov	x2, x0
    cc54:	ldr	x1, [sp, #392]
    cc58:	mov	x0, x3
    cc5c:	bl	90c4 <XXH_memcpy>
    cc60:	ldr	x0, [sp, #400]
    cc64:	add	x0, x0, #0x18
    cc68:	str	x0, [sp, #352]
    cc6c:	ldr	x0, [sp, #400]
    cc70:	ldr	w19, [x0, #8]
    cc74:	ldr	x0, [sp, #352]
    cc78:	str	x0, [sp, #344]
    cc7c:	ldr	w0, [sp, #380]
    cc80:	str	w0, [sp, #340]
    cc84:	ldr	x0, [sp, #344]
    cc88:	str	x0, [sp, #328]
    cc8c:	ldr	w0, [sp, #340]
    cc90:	str	w0, [sp, #324]
    cc94:	mov	w0, #0x1                   	// #1
    cc98:	str	w0, [sp, #320]
    cc9c:	ldr	w0, [sp, #320]
    cca0:	cmp	w0, #0x1
    cca4:	b.ne	ccd0 <XXH32_update+0x998>  // b.any
    cca8:	ldr	w0, [sp, #324]
    ccac:	cmp	w0, #0x1
    ccb0:	b.ne	ccc0 <XXH32_update+0x988>  // b.any
    ccb4:	ldr	x0, [sp, #328]
    ccb8:	bl	90f0 <XXH_read32>
    ccbc:	b	ccf8 <XXH32_update+0x9c0>
    ccc0:	ldr	x0, [sp, #328]
    ccc4:	bl	90f0 <XXH_read32>
    ccc8:	rev	w0, w0
    cccc:	b	ccf8 <XXH32_update+0x9c0>
    ccd0:	ldr	w0, [sp, #324]
    ccd4:	cmp	w0, #0x1
    ccd8:	b.ne	cce8 <XXH32_update+0x9b0>  // b.any
    ccdc:	ldr	x0, [sp, #328]
    cce0:	ldr	w0, [x0]
    cce4:	b	ccf4 <XXH32_update+0x9bc>
    cce8:	ldr	x0, [sp, #328]
    ccec:	ldr	w0, [x0]
    ccf0:	rev	w0, w0
    ccf4:	nop
    ccf8:	nop
    ccfc:	mov	w1, w0
    cd00:	mov	w0, w19
    cd04:	bl	9240 <XXH32_round>
    cd08:	mov	w1, w0
    cd0c:	ldr	x0, [sp, #400]
    cd10:	str	w1, [x0, #8]
    cd14:	ldr	x0, [sp, #352]
    cd18:	add	x0, x0, #0x4
    cd1c:	str	x0, [sp, #352]
    cd20:	ldr	x0, [sp, #400]
    cd24:	ldr	w19, [x0, #12]
    cd28:	ldr	x0, [sp, #352]
    cd2c:	str	x0, [sp, #312]
    cd30:	ldr	w0, [sp, #380]
    cd34:	str	w0, [sp, #308]
    cd38:	ldr	x0, [sp, #312]
    cd3c:	str	x0, [sp, #296]
    cd40:	ldr	w0, [sp, #308]
    cd44:	str	w0, [sp, #292]
    cd48:	mov	w0, #0x1                   	// #1
    cd4c:	str	w0, [sp, #288]
    cd50:	ldr	w0, [sp, #288]
    cd54:	cmp	w0, #0x1
    cd58:	b.ne	cd84 <XXH32_update+0xa4c>  // b.any
    cd5c:	ldr	w0, [sp, #292]
    cd60:	cmp	w0, #0x1
    cd64:	b.ne	cd74 <XXH32_update+0xa3c>  // b.any
    cd68:	ldr	x0, [sp, #296]
    cd6c:	bl	90f0 <XXH_read32>
    cd70:	b	cdac <XXH32_update+0xa74>
    cd74:	ldr	x0, [sp, #296]
    cd78:	bl	90f0 <XXH_read32>
    cd7c:	rev	w0, w0
    cd80:	b	cdac <XXH32_update+0xa74>
    cd84:	ldr	w0, [sp, #292]
    cd88:	cmp	w0, #0x1
    cd8c:	b.ne	cd9c <XXH32_update+0xa64>  // b.any
    cd90:	ldr	x0, [sp, #296]
    cd94:	ldr	w0, [x0]
    cd98:	b	cda8 <XXH32_update+0xa70>
    cd9c:	ldr	x0, [sp, #296]
    cda0:	ldr	w0, [x0]
    cda4:	rev	w0, w0
    cda8:	nop
    cdac:	nop
    cdb0:	mov	w1, w0
    cdb4:	mov	w0, w19
    cdb8:	bl	9240 <XXH32_round>
    cdbc:	mov	w1, w0
    cdc0:	ldr	x0, [sp, #400]
    cdc4:	str	w1, [x0, #12]
    cdc8:	ldr	x0, [sp, #352]
    cdcc:	add	x0, x0, #0x4
    cdd0:	str	x0, [sp, #352]
    cdd4:	ldr	x0, [sp, #400]
    cdd8:	ldr	w19, [x0, #16]
    cddc:	ldr	x0, [sp, #352]
    cde0:	str	x0, [sp, #280]
    cde4:	ldr	w0, [sp, #380]
    cde8:	str	w0, [sp, #276]
    cdec:	ldr	x0, [sp, #280]
    cdf0:	str	x0, [sp, #264]
    cdf4:	ldr	w0, [sp, #276]
    cdf8:	str	w0, [sp, #260]
    cdfc:	mov	w0, #0x1                   	// #1
    ce00:	str	w0, [sp, #256]
    ce04:	ldr	w0, [sp, #256]
    ce08:	cmp	w0, #0x1
    ce0c:	b.ne	ce38 <XXH32_update+0xb00>  // b.any
    ce10:	ldr	w0, [sp, #260]
    ce14:	cmp	w0, #0x1
    ce18:	b.ne	ce28 <XXH32_update+0xaf0>  // b.any
    ce1c:	ldr	x0, [sp, #264]
    ce20:	bl	90f0 <XXH_read32>
    ce24:	b	ce60 <XXH32_update+0xb28>
    ce28:	ldr	x0, [sp, #264]
    ce2c:	bl	90f0 <XXH_read32>
    ce30:	rev	w0, w0
    ce34:	b	ce60 <XXH32_update+0xb28>
    ce38:	ldr	w0, [sp, #260]
    ce3c:	cmp	w0, #0x1
    ce40:	b.ne	ce50 <XXH32_update+0xb18>  // b.any
    ce44:	ldr	x0, [sp, #264]
    ce48:	ldr	w0, [x0]
    ce4c:	b	ce5c <XXH32_update+0xb24>
    ce50:	ldr	x0, [sp, #264]
    ce54:	ldr	w0, [x0]
    ce58:	rev	w0, w0
    ce5c:	nop
    ce60:	nop
    ce64:	mov	w1, w0
    ce68:	mov	w0, w19
    ce6c:	bl	9240 <XXH32_round>
    ce70:	mov	w1, w0
    ce74:	ldr	x0, [sp, #400]
    ce78:	str	w1, [x0, #16]
    ce7c:	ldr	x0, [sp, #352]
    ce80:	add	x0, x0, #0x4
    ce84:	str	x0, [sp, #352]
    ce88:	ldr	x0, [sp, #400]
    ce8c:	ldr	w19, [x0, #20]
    ce90:	ldr	x0, [sp, #352]
    ce94:	str	x0, [sp, #248]
    ce98:	ldr	w0, [sp, #380]
    ce9c:	str	w0, [sp, #244]
    cea0:	ldr	x0, [sp, #248]
    cea4:	str	x0, [sp, #232]
    cea8:	ldr	w0, [sp, #244]
    ceac:	str	w0, [sp, #228]
    ceb0:	mov	w0, #0x1                   	// #1
    ceb4:	str	w0, [sp, #224]
    ceb8:	ldr	w0, [sp, #224]
    cebc:	cmp	w0, #0x1
    cec0:	b.ne	ceec <XXH32_update+0xbb4>  // b.any
    cec4:	ldr	w0, [sp, #228]
    cec8:	cmp	w0, #0x1
    cecc:	b.ne	cedc <XXH32_update+0xba4>  // b.any
    ced0:	ldr	x0, [sp, #232]
    ced4:	bl	90f0 <XXH_read32>
    ced8:	b	cf14 <XXH32_update+0xbdc>
    cedc:	ldr	x0, [sp, #232]
    cee0:	bl	90f0 <XXH_read32>
    cee4:	rev	w0, w0
    cee8:	b	cf14 <XXH32_update+0xbdc>
    ceec:	ldr	w0, [sp, #228]
    cef0:	cmp	w0, #0x1
    cef4:	b.ne	cf04 <XXH32_update+0xbcc>  // b.any
    cef8:	ldr	x0, [sp, #232]
    cefc:	ldr	w0, [x0]
    cf00:	b	cf10 <XXH32_update+0xbd8>
    cf04:	ldr	x0, [sp, #232]
    cf08:	ldr	w0, [x0]
    cf0c:	rev	w0, w0
    cf10:	nop
    cf14:	nop
    cf18:	mov	w1, w0
    cf1c:	mov	w0, w19
    cf20:	bl	9240 <XXH32_round>
    cf24:	mov	w1, w0
    cf28:	ldr	x0, [sp, #400]
    cf2c:	str	w1, [x0, #20]
    cf30:	ldr	x0, [sp, #352]
    cf34:	add	x0, x0, #0x4
    cf38:	str	x0, [sp, #352]
    cf3c:	ldr	x0, [sp, #400]
    cf40:	ldr	w0, [x0, #40]
    cf44:	mov	w1, #0x10                  	// #16
    cf48:	sub	w0, w1, w0
    cf4c:	mov	w0, w0
    cf50:	ldr	x1, [sp, #368]
    cf54:	add	x0, x1, x0
    cf58:	str	x0, [sp, #368]
    cf5c:	ldr	x0, [sp, #400]
    cf60:	str	wzr, [x0, #40]
    cf64:	ldr	x0, [sp, #360]
    cf68:	sub	x1, x0, #0x10
    cf6c:	ldr	x0, [sp, #368]
    cf70:	cmp	x1, x0
    cf74:	b.cc	d284 <XXH32_update+0xf4c>  // b.lo, b.ul, b.last
    cf78:	ldr	x0, [sp, #360]
    cf7c:	sub	x0, x0, #0x10
    cf80:	str	x0, [sp, #216]
    cf84:	ldr	x0, [sp, #400]
    cf88:	ldr	w0, [x0, #8]
    cf8c:	str	w0, [sp, #212]
    cf90:	ldr	x0, [sp, #400]
    cf94:	ldr	w0, [x0, #12]
    cf98:	str	w0, [sp, #208]
    cf9c:	ldr	x0, [sp, #400]
    cfa0:	ldr	w0, [x0, #16]
    cfa4:	str	w0, [sp, #204]
    cfa8:	ldr	x0, [sp, #400]
    cfac:	ldr	w0, [x0, #20]
    cfb0:	str	w0, [sp, #200]
    cfb4:	ldr	x0, [sp, #368]
    cfb8:	str	x0, [sp, #192]
    cfbc:	ldr	w0, [sp, #380]
    cfc0:	str	w0, [sp, #188]
    cfc4:	ldr	x0, [sp, #192]
    cfc8:	str	x0, [sp, #176]
    cfcc:	ldr	w0, [sp, #188]
    cfd0:	str	w0, [sp, #172]
    cfd4:	mov	w0, #0x1                   	// #1
    cfd8:	str	w0, [sp, #168]
    cfdc:	ldr	w0, [sp, #168]
    cfe0:	cmp	w0, #0x1
    cfe4:	b.ne	d010 <XXH32_update+0xcd8>  // b.any
    cfe8:	ldr	w0, [sp, #172]
    cfec:	cmp	w0, #0x1
    cff0:	b.ne	d000 <XXH32_update+0xcc8>  // b.any
    cff4:	ldr	x0, [sp, #176]
    cff8:	bl	90f0 <XXH_read32>
    cffc:	b	d038 <XXH32_update+0xd00>
    d000:	ldr	x0, [sp, #176]
    d004:	bl	90f0 <XXH_read32>
    d008:	rev	w0, w0
    d00c:	b	d038 <XXH32_update+0xd00>
    d010:	ldr	w0, [sp, #172]
    d014:	cmp	w0, #0x1
    d018:	b.ne	d028 <XXH32_update+0xcf0>  // b.any
    d01c:	ldr	x0, [sp, #176]
    d020:	ldr	w0, [x0]
    d024:	b	d034 <XXH32_update+0xcfc>
    d028:	ldr	x0, [sp, #176]
    d02c:	ldr	w0, [x0]
    d030:	rev	w0, w0
    d034:	nop
    d038:	nop
    d03c:	mov	w1, w0
    d040:	ldr	w0, [sp, #212]
    d044:	bl	9240 <XXH32_round>
    d048:	str	w0, [sp, #212]
    d04c:	ldr	x0, [sp, #368]
    d050:	add	x0, x0, #0x4
    d054:	str	x0, [sp, #368]
    d058:	ldr	x0, [sp, #368]
    d05c:	str	x0, [sp, #160]
    d060:	ldr	w0, [sp, #380]
    d064:	str	w0, [sp, #156]
    d068:	ldr	x0, [sp, #160]
    d06c:	str	x0, [sp, #144]
    d070:	ldr	w0, [sp, #156]
    d074:	str	w0, [sp, #140]
    d078:	mov	w0, #0x1                   	// #1
    d07c:	str	w0, [sp, #136]
    d080:	ldr	w0, [sp, #136]
    d084:	cmp	w0, #0x1
    d088:	b.ne	d0b4 <XXH32_update+0xd7c>  // b.any
    d08c:	ldr	w0, [sp, #140]
    d090:	cmp	w0, #0x1
    d094:	b.ne	d0a4 <XXH32_update+0xd6c>  // b.any
    d098:	ldr	x0, [sp, #144]
    d09c:	bl	90f0 <XXH_read32>
    d0a0:	b	d0dc <XXH32_update+0xda4>
    d0a4:	ldr	x0, [sp, #144]
    d0a8:	bl	90f0 <XXH_read32>
    d0ac:	rev	w0, w0
    d0b0:	b	d0dc <XXH32_update+0xda4>
    d0b4:	ldr	w0, [sp, #140]
    d0b8:	cmp	w0, #0x1
    d0bc:	b.ne	d0cc <XXH32_update+0xd94>  // b.any
    d0c0:	ldr	x0, [sp, #144]
    d0c4:	ldr	w0, [x0]
    d0c8:	b	d0d8 <XXH32_update+0xda0>
    d0cc:	ldr	x0, [sp, #144]
    d0d0:	ldr	w0, [x0]
    d0d4:	rev	w0, w0
    d0d8:	nop
    d0dc:	nop
    d0e0:	mov	w1, w0
    d0e4:	ldr	w0, [sp, #208]
    d0e8:	bl	9240 <XXH32_round>
    d0ec:	str	w0, [sp, #208]
    d0f0:	ldr	x0, [sp, #368]
    d0f4:	add	x0, x0, #0x4
    d0f8:	str	x0, [sp, #368]
    d0fc:	ldr	x0, [sp, #368]
    d100:	str	x0, [sp, #128]
    d104:	ldr	w0, [sp, #380]
    d108:	str	w0, [sp, #124]
    d10c:	ldr	x0, [sp, #128]
    d110:	str	x0, [sp, #112]
    d114:	ldr	w0, [sp, #124]
    d118:	str	w0, [sp, #108]
    d11c:	mov	w0, #0x1                   	// #1
    d120:	str	w0, [sp, #104]
    d124:	ldr	w0, [sp, #104]
    d128:	cmp	w0, #0x1
    d12c:	b.ne	d158 <XXH32_update+0xe20>  // b.any
    d130:	ldr	w0, [sp, #108]
    d134:	cmp	w0, #0x1
    d138:	b.ne	d148 <XXH32_update+0xe10>  // b.any
    d13c:	ldr	x0, [sp, #112]
    d140:	bl	90f0 <XXH_read32>
    d144:	b	d180 <XXH32_update+0xe48>
    d148:	ldr	x0, [sp, #112]
    d14c:	bl	90f0 <XXH_read32>
    d150:	rev	w0, w0
    d154:	b	d180 <XXH32_update+0xe48>
    d158:	ldr	w0, [sp, #108]
    d15c:	cmp	w0, #0x1
    d160:	b.ne	d170 <XXH32_update+0xe38>  // b.any
    d164:	ldr	x0, [sp, #112]
    d168:	ldr	w0, [x0]
    d16c:	b	d17c <XXH32_update+0xe44>
    d170:	ldr	x0, [sp, #112]
    d174:	ldr	w0, [x0]
    d178:	rev	w0, w0
    d17c:	nop
    d180:	nop
    d184:	mov	w1, w0
    d188:	ldr	w0, [sp, #204]
    d18c:	bl	9240 <XXH32_round>
    d190:	str	w0, [sp, #204]
    d194:	ldr	x0, [sp, #368]
    d198:	add	x0, x0, #0x4
    d19c:	str	x0, [sp, #368]
    d1a0:	ldr	x0, [sp, #368]
    d1a4:	str	x0, [sp, #96]
    d1a8:	ldr	w0, [sp, #380]
    d1ac:	str	w0, [sp, #92]
    d1b0:	ldr	x0, [sp, #96]
    d1b4:	str	x0, [sp, #80]
    d1b8:	ldr	w0, [sp, #92]
    d1bc:	str	w0, [sp, #76]
    d1c0:	mov	w0, #0x1                   	// #1
    d1c4:	str	w0, [sp, #72]
    d1c8:	ldr	w0, [sp, #72]
    d1cc:	cmp	w0, #0x1
    d1d0:	b.ne	d1fc <XXH32_update+0xec4>  // b.any
    d1d4:	ldr	w0, [sp, #76]
    d1d8:	cmp	w0, #0x1
    d1dc:	b.ne	d1ec <XXH32_update+0xeb4>  // b.any
    d1e0:	ldr	x0, [sp, #80]
    d1e4:	bl	90f0 <XXH_read32>
    d1e8:	b	d224 <XXH32_update+0xeec>
    d1ec:	ldr	x0, [sp, #80]
    d1f0:	bl	90f0 <XXH_read32>
    d1f4:	rev	w0, w0
    d1f8:	b	d224 <XXH32_update+0xeec>
    d1fc:	ldr	w0, [sp, #76]
    d200:	cmp	w0, #0x1
    d204:	b.ne	d214 <XXH32_update+0xedc>  // b.any
    d208:	ldr	x0, [sp, #80]
    d20c:	ldr	w0, [x0]
    d210:	b	d220 <XXH32_update+0xee8>
    d214:	ldr	x0, [sp, #80]
    d218:	ldr	w0, [x0]
    d21c:	rev	w0, w0
    d220:	nop
    d224:	nop
    d228:	mov	w1, w0
    d22c:	ldr	w0, [sp, #200]
    d230:	bl	9240 <XXH32_round>
    d234:	str	w0, [sp, #200]
    d238:	ldr	x0, [sp, #368]
    d23c:	add	x0, x0, #0x4
    d240:	str	x0, [sp, #368]
    d244:	ldr	x1, [sp, #216]
    d248:	ldr	x0, [sp, #368]
    d24c:	cmp	x1, x0
    d250:	b.cs	cfb4 <XXH32_update+0xc7c>  // b.hs, b.nlast
    d254:	ldr	x0, [sp, #400]
    d258:	ldr	w1, [sp, #212]
    d25c:	str	w1, [x0, #8]
    d260:	ldr	x0, [sp, #400]
    d264:	ldr	w1, [sp, #208]
    d268:	str	w1, [x0, #12]
    d26c:	ldr	x0, [sp, #400]
    d270:	ldr	w1, [sp, #204]
    d274:	str	w1, [x0, #16]
    d278:	ldr	x0, [sp, #400]
    d27c:	ldr	w1, [sp, #200]
    d280:	str	w1, [x0, #20]
    d284:	ldr	x1, [sp, #360]
    d288:	ldr	x0, [sp, #368]
    d28c:	cmp	x1, x0
    d290:	b.ls	d2d0 <XXH32_update+0xf98>  // b.plast
    d294:	ldr	x0, [sp, #400]
    d298:	add	x3, x0, #0x18
    d29c:	ldr	x1, [sp, #360]
    d2a0:	ldr	x0, [sp, #368]
    d2a4:	sub	x0, x1, x0
    d2a8:	mov	x2, x0
    d2ac:	ldr	x1, [sp, #368]
    d2b0:	mov	x0, x3
    d2b4:	bl	90c4 <XXH_memcpy>
    d2b8:	ldr	x1, [sp, #360]
    d2bc:	ldr	x0, [sp, #368]
    d2c0:	sub	x0, x1, x0
    d2c4:	mov	w1, w0
    d2c8:	ldr	x0, [sp, #400]
    d2cc:	str	w1, [x0, #40]
    d2d0:	mov	w0, #0x0                   	// #0
    d2d4:	nop
    d2d8:	ldr	x19, [sp, #16]
    d2dc:	ldp	x29, x30, [sp]
    d2e0:	add	sp, sp, #0x2f0
    d2e4:	ret
	...

000000000000d2f0 <XXH32_digest>:
    d2f0:	stp	x29, x30, [sp, #-192]!
    d2f4:	mov	x29, sp
    d2f8:	str	x0, [sp, #24]
    d2fc:	adrp	x0, 0 <grub_memcpy>
    d300:	add	x0, x0, #0x0
    d304:	ldr	x0, [x0]
    d308:	ldrb	w0, [x0]
    d30c:	str	w0, [sp, #188]
    d310:	ldr	w0, [sp, #188]
    d314:	cmp	w0, #0x1
    d318:	b.ne	d578 <XXH32_digest+0x288>  // b.any
    d31c:	ldr	x0, [sp, #24]
    d320:	str	x0, [sp, #176]
    d324:	mov	w0, #0x1                   	// #1
    d328:	str	w0, [sp, #172]
    d32c:	ldr	x0, [sp, #176]
    d330:	add	x0, x0, #0x18
    d334:	str	x0, [sp, #160]
    d338:	ldr	x0, [sp, #176]
    d33c:	add	x1, x0, #0x18
    d340:	ldr	x0, [sp, #176]
    d344:	ldr	w0, [x0, #40]
    d348:	mov	w0, w0
    d34c:	add	x0, x1, x0
    d350:	str	x0, [sp, #152]
    d354:	ldr	x0, [sp, #176]
    d358:	ldr	w0, [x0, #4]
    d35c:	cmp	w0, #0x0
    d360:	b.eq	d3a8 <XXH32_digest+0xb8>  // b.none
    d364:	ldr	x0, [sp, #176]
    d368:	ldr	w0, [x0, #8]
    d36c:	ror	w1, w0, #31
    d370:	ldr	x0, [sp, #176]
    d374:	ldr	w0, [x0, #12]
    d378:	ror	w0, w0, #25
    d37c:	add	w1, w1, w0
    d380:	ldr	x0, [sp, #176]
    d384:	ldr	w0, [x0, #16]
    d388:	ror	w0, w0, #20
    d38c:	add	w1, w1, w0
    d390:	ldr	x0, [sp, #176]
    d394:	ldr	w0, [x0, #20]
    d398:	ror	w0, w0, #14
    d39c:	add	w0, w1, w0
    d3a0:	str	w0, [sp, #148]
    d3a4:	b	d3c0 <XXH32_digest+0xd0>
    d3a8:	ldr	x0, [sp, #176]
    d3ac:	ldr	w1, [x0, #16]
    d3b0:	mov	w0, #0x67b1                	// #26545
    d3b4:	movk	w0, #0x1656, lsl #16
    d3b8:	add	w0, w1, w0
    d3bc:	str	w0, [sp, #148]
    d3c0:	ldr	x0, [sp, #176]
    d3c4:	ldr	w0, [x0]
    d3c8:	ldr	w1, [sp, #148]
    d3cc:	add	w0, w1, w0
    d3d0:	str	w0, [sp, #148]
    d3d4:	b	d49c <XXH32_digest+0x1ac>
    d3d8:	ldr	x0, [sp, #160]
    d3dc:	str	x0, [sp, #136]
    d3e0:	ldr	w0, [sp, #172]
    d3e4:	str	w0, [sp, #132]
    d3e8:	ldr	x0, [sp, #136]
    d3ec:	str	x0, [sp, #120]
    d3f0:	ldr	w0, [sp, #132]
    d3f4:	str	w0, [sp, #116]
    d3f8:	mov	w0, #0x1                   	// #1
    d3fc:	str	w0, [sp, #112]
    d400:	ldr	w0, [sp, #112]
    d404:	cmp	w0, #0x1
    d408:	b.ne	d434 <XXH32_digest+0x144>  // b.any
    d40c:	ldr	w0, [sp, #116]
    d410:	cmp	w0, #0x1
    d414:	b.ne	d424 <XXH32_digest+0x134>  // b.any
    d418:	ldr	x0, [sp, #120]
    d41c:	bl	90f0 <XXH_read32>
    d420:	b	d45c <XXH32_digest+0x16c>
    d424:	ldr	x0, [sp, #120]
    d428:	bl	90f0 <XXH_read32>
    d42c:	rev	w0, w0
    d430:	b	d45c <XXH32_digest+0x16c>
    d434:	ldr	w0, [sp, #116]
    d438:	cmp	w0, #0x1
    d43c:	b.ne	d44c <XXH32_digest+0x15c>  // b.any
    d440:	ldr	x0, [sp, #120]
    d444:	ldr	w0, [x0]
    d448:	b	d458 <XXH32_digest+0x168>
    d44c:	ldr	x0, [sp, #120]
    d450:	ldr	w0, [x0]
    d454:	rev	w0, w0
    d458:	nop
    d45c:	nop
    d460:	mov	w1, #0xae3d                	// #44605
    d464:	movk	w1, #0xc2b2, lsl #16
    d468:	mul	w0, w0, w1
    d46c:	ldr	w1, [sp, #148]
    d470:	add	w0, w1, w0
    d474:	str	w0, [sp, #148]
    d478:	ldr	w0, [sp, #148]
    d47c:	ror	w1, w0, #15
    d480:	mov	w0, #0xeb2f                	// #60207
    d484:	movk	w0, #0x27d4, lsl #16
    d488:	mul	w0, w1, w0
    d48c:	str	w0, [sp, #148]
    d490:	ldr	x0, [sp, #160]
    d494:	add	x0, x0, #0x4
    d498:	str	x0, [sp, #160]
    d49c:	ldr	x0, [sp, #160]
    d4a0:	add	x0, x0, #0x4
    d4a4:	ldr	x1, [sp, #152]
    d4a8:	cmp	x1, x0
    d4ac:	b.cs	d3d8 <XXH32_digest+0xe8>  // b.hs, b.nlast
    d4b0:	b	d4fc <XXH32_digest+0x20c>
    d4b4:	ldr	x0, [sp, #160]
    d4b8:	ldrb	w0, [x0]
    d4bc:	mov	w1, w0
    d4c0:	mov	w0, #0x67b1                	// #26545
    d4c4:	movk	w0, #0x1656, lsl #16
    d4c8:	mul	w0, w1, w0
    d4cc:	ldr	w1, [sp, #148]
    d4d0:	add	w0, w1, w0
    d4d4:	str	w0, [sp, #148]
    d4d8:	ldr	w0, [sp, #148]
    d4dc:	ror	w1, w0, #21
    d4e0:	mov	w0, #0x79b1                	// #31153
    d4e4:	movk	w0, #0x9e37, lsl #16
    d4e8:	mul	w0, w1, w0
    d4ec:	str	w0, [sp, #148]
    d4f0:	ldr	x0, [sp, #160]
    d4f4:	add	x0, x0, #0x1
    d4f8:	str	x0, [sp, #160]
    d4fc:	ldr	x1, [sp, #152]
    d500:	ldr	x0, [sp, #160]
    d504:	cmp	x1, x0
    d508:	b.hi	d4b4 <XXH32_digest+0x1c4>  // b.pmore
    d50c:	ldr	w0, [sp, #148]
    d510:	lsr	w0, w0, #15
    d514:	ldr	w1, [sp, #148]
    d518:	eor	w0, w1, w0
    d51c:	str	w0, [sp, #148]
    d520:	mov	w0, #0xca77                	// #51831
    d524:	movk	w0, #0x85eb, lsl #16
    d528:	ldr	w1, [sp, #148]
    d52c:	mul	w0, w1, w0
    d530:	str	w0, [sp, #148]
    d534:	ldr	w0, [sp, #148]
    d538:	lsr	w0, w0, #13
    d53c:	ldr	w1, [sp, #148]
    d540:	eor	w0, w1, w0
    d544:	str	w0, [sp, #148]
    d548:	mov	w0, #0xae3d                	// #44605
    d54c:	movk	w0, #0xc2b2, lsl #16
    d550:	ldr	w1, [sp, #148]
    d554:	mul	w0, w1, w0
    d558:	str	w0, [sp, #148]
    d55c:	ldr	w0, [sp, #148]
    d560:	lsr	w0, w0, #16
    d564:	ldr	w1, [sp, #148]
    d568:	eor	w0, w1, w0
    d56c:	str	w0, [sp, #148]
    d570:	ldr	w0, [sp, #148]
    d574:	b	d7d0 <XXH32_digest+0x4e0>
    d578:	ldr	x0, [sp, #24]
    d57c:	str	x0, [sp, #104]
    d580:	str	wzr, [sp, #100]
    d584:	ldr	x0, [sp, #104]
    d588:	add	x0, x0, #0x18
    d58c:	str	x0, [sp, #88]
    d590:	ldr	x0, [sp, #104]
    d594:	add	x1, x0, #0x18
    d598:	ldr	x0, [sp, #104]
    d59c:	ldr	w0, [x0, #40]
    d5a0:	mov	w0, w0
    d5a4:	add	x0, x1, x0
    d5a8:	str	x0, [sp, #80]
    d5ac:	ldr	x0, [sp, #104]
    d5b0:	ldr	w0, [x0, #4]
    d5b4:	cmp	w0, #0x0
    d5b8:	b.eq	d600 <XXH32_digest+0x310>  // b.none
    d5bc:	ldr	x0, [sp, #104]
    d5c0:	ldr	w0, [x0, #8]
    d5c4:	ror	w1, w0, #31
    d5c8:	ldr	x0, [sp, #104]
    d5cc:	ldr	w0, [x0, #12]
    d5d0:	ror	w0, w0, #25
    d5d4:	add	w1, w1, w0
    d5d8:	ldr	x0, [sp, #104]
    d5dc:	ldr	w0, [x0, #16]
    d5e0:	ror	w0, w0, #20
    d5e4:	add	w1, w1, w0
    d5e8:	ldr	x0, [sp, #104]
    d5ec:	ldr	w0, [x0, #20]
    d5f0:	ror	w0, w0, #14
    d5f4:	add	w0, w1, w0
    d5f8:	str	w0, [sp, #76]
    d5fc:	b	d618 <XXH32_digest+0x328>
    d600:	ldr	x0, [sp, #104]
    d604:	ldr	w1, [x0, #16]
    d608:	mov	w0, #0x67b1                	// #26545
    d60c:	movk	w0, #0x1656, lsl #16
    d610:	add	w0, w1, w0
    d614:	str	w0, [sp, #76]
    d618:	ldr	x0, [sp, #104]
    d61c:	ldr	w0, [x0]
    d620:	ldr	w1, [sp, #76]
    d624:	add	w0, w1, w0
    d628:	str	w0, [sp, #76]
    d62c:	b	d6f4 <XXH32_digest+0x404>
    d630:	ldr	x0, [sp, #88]
    d634:	str	x0, [sp, #64]
    d638:	ldr	w0, [sp, #100]
    d63c:	str	w0, [sp, #60]
    d640:	ldr	x0, [sp, #64]
    d644:	str	x0, [sp, #48]
    d648:	ldr	w0, [sp, #60]
    d64c:	str	w0, [sp, #44]
    d650:	mov	w0, #0x1                   	// #1
    d654:	str	w0, [sp, #40]
    d658:	ldr	w0, [sp, #40]
    d65c:	cmp	w0, #0x1
    d660:	b.ne	d68c <XXH32_digest+0x39c>  // b.any
    d664:	ldr	w0, [sp, #44]
    d668:	cmp	w0, #0x1
    d66c:	b.ne	d67c <XXH32_digest+0x38c>  // b.any
    d670:	ldr	x0, [sp, #48]
    d674:	bl	90f0 <XXH_read32>
    d678:	b	d6b4 <XXH32_digest+0x3c4>
    d67c:	ldr	x0, [sp, #48]
    d680:	bl	90f0 <XXH_read32>
    d684:	rev	w0, w0
    d688:	b	d6b4 <XXH32_digest+0x3c4>
    d68c:	ldr	w0, [sp, #44]
    d690:	cmp	w0, #0x1
    d694:	b.ne	d6a4 <XXH32_digest+0x3b4>  // b.any
    d698:	ldr	x0, [sp, #48]
    d69c:	ldr	w0, [x0]
    d6a0:	b	d6b0 <XXH32_digest+0x3c0>
    d6a4:	ldr	x0, [sp, #48]
    d6a8:	ldr	w0, [x0]
    d6ac:	rev	w0, w0
    d6b0:	nop
    d6b4:	nop
    d6b8:	mov	w1, #0xae3d                	// #44605
    d6bc:	movk	w1, #0xc2b2, lsl #16
    d6c0:	mul	w0, w0, w1
    d6c4:	ldr	w1, [sp, #76]
    d6c8:	add	w0, w1, w0
    d6cc:	str	w0, [sp, #76]
    d6d0:	ldr	w0, [sp, #76]
    d6d4:	ror	w1, w0, #15
    d6d8:	mov	w0, #0xeb2f                	// #60207
    d6dc:	movk	w0, #0x27d4, lsl #16
    d6e0:	mul	w0, w1, w0
    d6e4:	str	w0, [sp, #76]
    d6e8:	ldr	x0, [sp, #88]
    d6ec:	add	x0, x0, #0x4
    d6f0:	str	x0, [sp, #88]
    d6f4:	ldr	x0, [sp, #88]
    d6f8:	add	x0, x0, #0x4
    d6fc:	ldr	x1, [sp, #80]
    d700:	cmp	x1, x0
    d704:	b.cs	d630 <XXH32_digest+0x340>  // b.hs, b.nlast
    d708:	b	d754 <XXH32_digest+0x464>
    d70c:	ldr	x0, [sp, #88]
    d710:	ldrb	w0, [x0]
    d714:	mov	w1, w0
    d718:	mov	w0, #0x67b1                	// #26545
    d71c:	movk	w0, #0x1656, lsl #16
    d720:	mul	w0, w1, w0
    d724:	ldr	w1, [sp, #76]
    d728:	add	w0, w1, w0
    d72c:	str	w0, [sp, #76]
    d730:	ldr	w0, [sp, #76]
    d734:	ror	w1, w0, #21
    d738:	mov	w0, #0x79b1                	// #31153
    d73c:	movk	w0, #0x9e37, lsl #16
    d740:	mul	w0, w1, w0
    d744:	str	w0, [sp, #76]
    d748:	ldr	x0, [sp, #88]
    d74c:	add	x0, x0, #0x1
    d750:	str	x0, [sp, #88]
    d754:	ldr	x1, [sp, #80]
    d758:	ldr	x0, [sp, #88]
    d75c:	cmp	x1, x0
    d760:	b.hi	d70c <XXH32_digest+0x41c>  // b.pmore
    d764:	ldr	w0, [sp, #76]
    d768:	lsr	w0, w0, #15
    d76c:	ldr	w1, [sp, #76]
    d770:	eor	w0, w1, w0
    d774:	str	w0, [sp, #76]
    d778:	mov	w0, #0xca77                	// #51831
    d77c:	movk	w0, #0x85eb, lsl #16
    d780:	ldr	w1, [sp, #76]
    d784:	mul	w0, w1, w0
    d788:	str	w0, [sp, #76]
    d78c:	ldr	w0, [sp, #76]
    d790:	lsr	w0, w0, #13
    d794:	ldr	w1, [sp, #76]
    d798:	eor	w0, w1, w0
    d79c:	str	w0, [sp, #76]
    d7a0:	mov	w0, #0xae3d                	// #44605
    d7a4:	movk	w0, #0xc2b2, lsl #16
    d7a8:	ldr	w1, [sp, #76]
    d7ac:	mul	w0, w1, w0
    d7b0:	str	w0, [sp, #76]
    d7b4:	ldr	w0, [sp, #76]
    d7b8:	lsr	w0, w0, #16
    d7bc:	ldr	w1, [sp, #76]
    d7c0:	eor	w0, w1, w0
    d7c4:	str	w0, [sp, #76]
    d7c8:	ldr	w0, [sp, #76]
    d7cc:	nop
    d7d0:	ldp	x29, x30, [sp], #192
    d7d4:	ret
	...

000000000000d7e0 <XXH64_update>:
    d7e0:	sub	sp, sp, #0x300
    d7e4:	stp	x29, x30, [sp]
    d7e8:	mov	x29, sp
    d7ec:	str	x19, [sp, #16]
    d7f0:	str	x0, [sp, #56]
    d7f4:	str	x1, [sp, #48]
    d7f8:	str	x2, [sp, #40]
    d7fc:	adrp	x0, 0 <grub_memcpy>
    d800:	add	x0, x0, #0x0
    d804:	ldr	x0, [x0]
    d808:	ldrb	w0, [x0]
    d80c:	str	w0, [sp, #764]
    d810:	ldr	w0, [sp, #764]
    d814:	cmp	w0, #0x1
    d818:	b.ne	df70 <XXH64_update+0x790>  // b.any
    d81c:	ldr	x0, [sp, #56]
    d820:	str	x0, [sp, #752]
    d824:	ldr	x0, [sp, #48]
    d828:	str	x0, [sp, #744]
    d82c:	ldr	x0, [sp, #40]
    d830:	str	x0, [sp, #736]
    d834:	mov	w0, #0x1                   	// #1
    d838:	str	w0, [sp, #732]
    d83c:	ldr	x0, [sp, #744]
    d840:	str	x0, [sp, #720]
    d844:	ldr	x1, [sp, #720]
    d848:	ldr	x0, [sp, #736]
    d84c:	add	x0, x1, x0
    d850:	str	x0, [sp, #712]
    d854:	ldr	x0, [sp, #752]
    d858:	ldr	x1, [x0]
    d85c:	ldr	x0, [sp, #736]
    d860:	add	x1, x1, x0
    d864:	ldr	x0, [sp, #752]
    d868:	str	x1, [x0]
    d86c:	ldr	x0, [sp, #752]
    d870:	ldr	w0, [x0, #72]
    d874:	mov	w1, w0
    d878:	ldr	x0, [sp, #736]
    d87c:	add	x0, x1, x0
    d880:	cmp	x0, #0x1f
    d884:	b.hi	d8cc <XXH64_update+0xec>  // b.pmore
    d888:	ldr	x0, [sp, #752]
    d88c:	add	x1, x0, #0x28
    d890:	ldr	x0, [sp, #752]
    d894:	ldr	w0, [x0, #72]
    d898:	mov	w0, w0
    d89c:	add	x0, x1, x0
    d8a0:	ldr	x2, [sp, #736]
    d8a4:	ldr	x1, [sp, #744]
    d8a8:	bl	90c4 <XXH_memcpy>
    d8ac:	ldr	x0, [sp, #752]
    d8b0:	ldr	w0, [x0, #72]
    d8b4:	ldr	x1, [sp, #736]
    d8b8:	add	w1, w0, w1
    d8bc:	ldr	x0, [sp, #752]
    d8c0:	str	w1, [x0, #72]
    d8c4:	mov	w0, #0x0                   	// #0
    d8c8:	b	df6c <XXH64_update+0x78c>
    d8cc:	ldr	x0, [sp, #752]
    d8d0:	ldr	w0, [x0, #72]
    d8d4:	cmp	w0, #0x0
    d8d8:	b.eq	dbfc <XXH64_update+0x41c>  // b.none
    d8dc:	ldr	x0, [sp, #752]
    d8e0:	add	x1, x0, #0x28
    d8e4:	ldr	x0, [sp, #752]
    d8e8:	ldr	w0, [x0, #72]
    d8ec:	mov	w0, w0
    d8f0:	add	x3, x1, x0
    d8f4:	ldr	x0, [sp, #752]
    d8f8:	ldr	w0, [x0, #72]
    d8fc:	mov	w1, #0x20                  	// #32
    d900:	sub	w0, w1, w0
    d904:	mov	w0, w0
    d908:	mov	x2, x0
    d90c:	ldr	x1, [sp, #744]
    d910:	mov	x0, x3
    d914:	bl	90c4 <XXH_memcpy>
    d918:	ldr	x0, [sp, #752]
    d91c:	ldr	x19, [x0, #8]
    d920:	ldr	x0, [sp, #752]
    d924:	add	x0, x0, #0x28
    d928:	str	x0, [sp, #704]
    d92c:	ldr	w0, [sp, #732]
    d930:	str	w0, [sp, #700]
    d934:	ldr	x0, [sp, #704]
    d938:	str	x0, [sp, #688]
    d93c:	ldr	w0, [sp, #700]
    d940:	str	w0, [sp, #684]
    d944:	mov	w0, #0x1                   	// #1
    d948:	str	w0, [sp, #680]
    d94c:	ldr	w0, [sp, #680]
    d950:	cmp	w0, #0x1
    d954:	b.ne	d980 <XXH64_update+0x1a0>  // b.any
    d958:	ldr	w0, [sp, #684]
    d95c:	cmp	w0, #0x1
    d960:	b.ne	d970 <XXH64_update+0x190>  // b.any
    d964:	ldr	x0, [sp, #688]
    d968:	bl	9118 <XXH_read64>
    d96c:	b	d9a8 <XXH64_update+0x1c8>
    d970:	ldr	x0, [sp, #688]
    d974:	bl	9118 <XXH_read64>
    d978:	rev	x0, x0
    d97c:	b	d9a8 <XXH64_update+0x1c8>
    d980:	ldr	w0, [sp, #684]
    d984:	cmp	w0, #0x1
    d988:	b.ne	d998 <XXH64_update+0x1b8>  // b.any
    d98c:	ldr	x0, [sp, #688]
    d990:	ldr	x0, [x0]
    d994:	b	d9a4 <XXH64_update+0x1c4>
    d998:	ldr	x0, [sp, #688]
    d99c:	ldr	x0, [x0]
    d9a0:	rev	x0, x0
    d9a4:	nop
    d9a8:	nop
    d9ac:	mov	x1, x0
    d9b0:	mov	x0, x19
    d9b4:	bl	a680 <XXH64_round>
    d9b8:	mov	x1, x0
    d9bc:	ldr	x0, [sp, #752]
    d9c0:	str	x1, [x0, #8]
    d9c4:	ldr	x0, [sp, #752]
    d9c8:	ldr	x19, [x0, #16]
    d9cc:	ldr	x0, [sp, #752]
    d9d0:	add	x0, x0, #0x28
    d9d4:	add	x0, x0, #0x8
    d9d8:	str	x0, [sp, #672]
    d9dc:	ldr	w0, [sp, #732]
    d9e0:	str	w0, [sp, #668]
    d9e4:	ldr	x0, [sp, #672]
    d9e8:	str	x0, [sp, #656]
    d9ec:	ldr	w0, [sp, #668]
    d9f0:	str	w0, [sp, #652]
    d9f4:	mov	w0, #0x1                   	// #1
    d9f8:	str	w0, [sp, #648]
    d9fc:	ldr	w0, [sp, #648]
    da00:	cmp	w0, #0x1
    da04:	b.ne	da30 <XXH64_update+0x250>  // b.any
    da08:	ldr	w0, [sp, #652]
    da0c:	cmp	w0, #0x1
    da10:	b.ne	da20 <XXH64_update+0x240>  // b.any
    da14:	ldr	x0, [sp, #656]
    da18:	bl	9118 <XXH_read64>
    da1c:	b	da58 <XXH64_update+0x278>
    da20:	ldr	x0, [sp, #656]
    da24:	bl	9118 <XXH_read64>
    da28:	rev	x0, x0
    da2c:	b	da58 <XXH64_update+0x278>
    da30:	ldr	w0, [sp, #652]
    da34:	cmp	w0, #0x1
    da38:	b.ne	da48 <XXH64_update+0x268>  // b.any
    da3c:	ldr	x0, [sp, #656]
    da40:	ldr	x0, [x0]
    da44:	b	da54 <XXH64_update+0x274>
    da48:	ldr	x0, [sp, #656]
    da4c:	ldr	x0, [x0]
    da50:	rev	x0, x0
    da54:	nop
    da58:	nop
    da5c:	mov	x1, x0
    da60:	mov	x0, x19
    da64:	bl	a680 <XXH64_round>
    da68:	mov	x1, x0
    da6c:	ldr	x0, [sp, #752]
    da70:	str	x1, [x0, #16]
    da74:	ldr	x0, [sp, #752]
    da78:	ldr	x19, [x0, #24]
    da7c:	ldr	x0, [sp, #752]
    da80:	add	x0, x0, #0x28
    da84:	add	x0, x0, #0x10
    da88:	str	x0, [sp, #640]
    da8c:	ldr	w0, [sp, #732]
    da90:	str	w0, [sp, #636]
    da94:	ldr	x0, [sp, #640]
    da98:	str	x0, [sp, #624]
    da9c:	ldr	w0, [sp, #636]
    daa0:	str	w0, [sp, #620]
    daa4:	mov	w0, #0x1                   	// #1
    daa8:	str	w0, [sp, #616]
    daac:	ldr	w0, [sp, #616]
    dab0:	cmp	w0, #0x1
    dab4:	b.ne	dae0 <XXH64_update+0x300>  // b.any
    dab8:	ldr	w0, [sp, #620]
    dabc:	cmp	w0, #0x1
    dac0:	b.ne	dad0 <XXH64_update+0x2f0>  // b.any
    dac4:	ldr	x0, [sp, #624]
    dac8:	bl	9118 <XXH_read64>
    dacc:	b	db08 <XXH64_update+0x328>
    dad0:	ldr	x0, [sp, #624]
    dad4:	bl	9118 <XXH_read64>
    dad8:	rev	x0, x0
    dadc:	b	db08 <XXH64_update+0x328>
    dae0:	ldr	w0, [sp, #620]
    dae4:	cmp	w0, #0x1
    dae8:	b.ne	daf8 <XXH64_update+0x318>  // b.any
    daec:	ldr	x0, [sp, #624]
    daf0:	ldr	x0, [x0]
    daf4:	b	db04 <XXH64_update+0x324>
    daf8:	ldr	x0, [sp, #624]
    dafc:	ldr	x0, [x0]
    db00:	rev	x0, x0
    db04:	nop
    db08:	nop
    db0c:	mov	x1, x0
    db10:	mov	x0, x19
    db14:	bl	a680 <XXH64_round>
    db18:	mov	x1, x0
    db1c:	ldr	x0, [sp, #752]
    db20:	str	x1, [x0, #24]
    db24:	ldr	x0, [sp, #752]
    db28:	ldr	x19, [x0, #32]
    db2c:	ldr	x0, [sp, #752]
    db30:	add	x0, x0, #0x28
    db34:	add	x0, x0, #0x18
    db38:	str	x0, [sp, #608]
    db3c:	ldr	w0, [sp, #732]
    db40:	str	w0, [sp, #604]
    db44:	ldr	x0, [sp, #608]
    db48:	str	x0, [sp, #592]
    db4c:	ldr	w0, [sp, #604]
    db50:	str	w0, [sp, #588]
    db54:	mov	w0, #0x1                   	// #1
    db58:	str	w0, [sp, #584]
    db5c:	ldr	w0, [sp, #584]
    db60:	cmp	w0, #0x1
    db64:	b.ne	db90 <XXH64_update+0x3b0>  // b.any
    db68:	ldr	w0, [sp, #588]
    db6c:	cmp	w0, #0x1
    db70:	b.ne	db80 <XXH64_update+0x3a0>  // b.any
    db74:	ldr	x0, [sp, #592]
    db78:	bl	9118 <XXH_read64>
    db7c:	b	dbb8 <XXH64_update+0x3d8>
    db80:	ldr	x0, [sp, #592]
    db84:	bl	9118 <XXH_read64>
    db88:	rev	x0, x0
    db8c:	b	dbb8 <XXH64_update+0x3d8>
    db90:	ldr	w0, [sp, #588]
    db94:	cmp	w0, #0x1
    db98:	b.ne	dba8 <XXH64_update+0x3c8>  // b.any
    db9c:	ldr	x0, [sp, #592]
    dba0:	ldr	x0, [x0]
    dba4:	b	dbb4 <XXH64_update+0x3d4>
    dba8:	ldr	x0, [sp, #592]
    dbac:	ldr	x0, [x0]
    dbb0:	rev	x0, x0
    dbb4:	nop
    dbb8:	nop
    dbbc:	mov	x1, x0
    dbc0:	mov	x0, x19
    dbc4:	bl	a680 <XXH64_round>
    dbc8:	mov	x1, x0
    dbcc:	ldr	x0, [sp, #752]
    dbd0:	str	x1, [x0, #32]
    dbd4:	ldr	x0, [sp, #752]
    dbd8:	ldr	w0, [x0, #72]
    dbdc:	mov	w1, #0x20                  	// #32
    dbe0:	sub	w0, w1, w0
    dbe4:	mov	w0, w0
    dbe8:	ldr	x1, [sp, #720]
    dbec:	add	x0, x1, x0
    dbf0:	str	x0, [sp, #720]
    dbf4:	ldr	x0, [sp, #752]
    dbf8:	str	wzr, [x0, #72]
    dbfc:	ldr	x0, [sp, #720]
    dc00:	add	x0, x0, #0x20
    dc04:	ldr	x1, [sp, #712]
    dc08:	cmp	x1, x0
    dc0c:	b.cc	df1c <XXH64_update+0x73c>  // b.lo, b.ul, b.last
    dc10:	ldr	x0, [sp, #712]
    dc14:	sub	x0, x0, #0x20
    dc18:	str	x0, [sp, #576]
    dc1c:	ldr	x0, [sp, #752]
    dc20:	ldr	x0, [x0, #8]
    dc24:	str	x0, [sp, #568]
    dc28:	ldr	x0, [sp, #752]
    dc2c:	ldr	x0, [x0, #16]
    dc30:	str	x0, [sp, #560]
    dc34:	ldr	x0, [sp, #752]
    dc38:	ldr	x0, [x0, #24]
    dc3c:	str	x0, [sp, #552]
    dc40:	ldr	x0, [sp, #752]
    dc44:	ldr	x0, [x0, #32]
    dc48:	str	x0, [sp, #544]
    dc4c:	ldr	x0, [sp, #720]
    dc50:	str	x0, [sp, #536]
    dc54:	ldr	w0, [sp, #732]
    dc58:	str	w0, [sp, #532]
    dc5c:	ldr	x0, [sp, #536]
    dc60:	str	x0, [sp, #520]
    dc64:	ldr	w0, [sp, #532]
    dc68:	str	w0, [sp, #516]
    dc6c:	mov	w0, #0x1                   	// #1
    dc70:	str	w0, [sp, #512]
    dc74:	ldr	w0, [sp, #512]
    dc78:	cmp	w0, #0x1
    dc7c:	b.ne	dca8 <XXH64_update+0x4c8>  // b.any
    dc80:	ldr	w0, [sp, #516]
    dc84:	cmp	w0, #0x1
    dc88:	b.ne	dc98 <XXH64_update+0x4b8>  // b.any
    dc8c:	ldr	x0, [sp, #520]
    dc90:	bl	9118 <XXH_read64>
    dc94:	b	dcd0 <XXH64_update+0x4f0>
    dc98:	ldr	x0, [sp, #520]
    dc9c:	bl	9118 <XXH_read64>
    dca0:	rev	x0, x0
    dca4:	b	dcd0 <XXH64_update+0x4f0>
    dca8:	ldr	w0, [sp, #516]
    dcac:	cmp	w0, #0x1
    dcb0:	b.ne	dcc0 <XXH64_update+0x4e0>  // b.any
    dcb4:	ldr	x0, [sp, #520]
    dcb8:	ldr	x0, [x0]
    dcbc:	b	dccc <XXH64_update+0x4ec>
    dcc0:	ldr	x0, [sp, #520]
    dcc4:	ldr	x0, [x0]
    dcc8:	rev	x0, x0
    dccc:	nop
    dcd0:	nop
    dcd4:	mov	x1, x0
    dcd8:	ldr	x0, [sp, #568]
    dcdc:	bl	a680 <XXH64_round>
    dce0:	str	x0, [sp, #568]
    dce4:	ldr	x0, [sp, #720]
    dce8:	add	x0, x0, #0x8
    dcec:	str	x0, [sp, #720]
    dcf0:	ldr	x0, [sp, #720]
    dcf4:	str	x0, [sp, #504]
    dcf8:	ldr	w0, [sp, #732]
    dcfc:	str	w0, [sp, #500]
    dd00:	ldr	x0, [sp, #504]
    dd04:	str	x0, [sp, #488]
    dd08:	ldr	w0, [sp, #500]
    dd0c:	str	w0, [sp, #484]
    dd10:	mov	w0, #0x1                   	// #1
    dd14:	str	w0, [sp, #480]
    dd18:	ldr	w0, [sp, #480]
    dd1c:	cmp	w0, #0x1
    dd20:	b.ne	dd4c <XXH64_update+0x56c>  // b.any
    dd24:	ldr	w0, [sp, #484]
    dd28:	cmp	w0, #0x1
    dd2c:	b.ne	dd3c <XXH64_update+0x55c>  // b.any
    dd30:	ldr	x0, [sp, #488]
    dd34:	bl	9118 <XXH_read64>
    dd38:	b	dd74 <XXH64_update+0x594>
    dd3c:	ldr	x0, [sp, #488]
    dd40:	bl	9118 <XXH_read64>
    dd44:	rev	x0, x0
    dd48:	b	dd74 <XXH64_update+0x594>
    dd4c:	ldr	w0, [sp, #484]
    dd50:	cmp	w0, #0x1
    dd54:	b.ne	dd64 <XXH64_update+0x584>  // b.any
    dd58:	ldr	x0, [sp, #488]
    dd5c:	ldr	x0, [x0]
    dd60:	b	dd70 <XXH64_update+0x590>
    dd64:	ldr	x0, [sp, #488]
    dd68:	ldr	x0, [x0]
    dd6c:	rev	x0, x0
    dd70:	nop
    dd74:	nop
    dd78:	mov	x1, x0
    dd7c:	ldr	x0, [sp, #560]
    dd80:	bl	a680 <XXH64_round>
    dd84:	str	x0, [sp, #560]
    dd88:	ldr	x0, [sp, #720]
    dd8c:	add	x0, x0, #0x8
    dd90:	str	x0, [sp, #720]
    dd94:	ldr	x0, [sp, #720]
    dd98:	str	x0, [sp, #472]
    dd9c:	ldr	w0, [sp, #732]
    dda0:	str	w0, [sp, #468]
    dda4:	ldr	x0, [sp, #472]
    dda8:	str	x0, [sp, #456]
    ddac:	ldr	w0, [sp, #468]
    ddb0:	str	w0, [sp, #452]
    ddb4:	mov	w0, #0x1                   	// #1
    ddb8:	str	w0, [sp, #448]
    ddbc:	ldr	w0, [sp, #448]
    ddc0:	cmp	w0, #0x1
    ddc4:	b.ne	ddf0 <XXH64_update+0x610>  // b.any
    ddc8:	ldr	w0, [sp, #452]
    ddcc:	cmp	w0, #0x1
    ddd0:	b.ne	dde0 <XXH64_update+0x600>  // b.any
    ddd4:	ldr	x0, [sp, #456]
    ddd8:	bl	9118 <XXH_read64>
    dddc:	b	de18 <XXH64_update+0x638>
    dde0:	ldr	x0, [sp, #456]
    dde4:	bl	9118 <XXH_read64>
    dde8:	rev	x0, x0
    ddec:	b	de18 <XXH64_update+0x638>
    ddf0:	ldr	w0, [sp, #452]
    ddf4:	cmp	w0, #0x1
    ddf8:	b.ne	de08 <XXH64_update+0x628>  // b.any
    ddfc:	ldr	x0, [sp, #456]
    de00:	ldr	x0, [x0]
    de04:	b	de14 <XXH64_update+0x634>
    de08:	ldr	x0, [sp, #456]
    de0c:	ldr	x0, [x0]
    de10:	rev	x0, x0
    de14:	nop
    de18:	nop
    de1c:	mov	x1, x0
    de20:	ldr	x0, [sp, #552]
    de24:	bl	a680 <XXH64_round>
    de28:	str	x0, [sp, #552]
    de2c:	ldr	x0, [sp, #720]
    de30:	add	x0, x0, #0x8
    de34:	str	x0, [sp, #720]
    de38:	ldr	x0, [sp, #720]
    de3c:	str	x0, [sp, #440]
    de40:	ldr	w0, [sp, #732]
    de44:	str	w0, [sp, #436]
    de48:	ldr	x0, [sp, #440]
    de4c:	str	x0, [sp, #424]
    de50:	ldr	w0, [sp, #436]
    de54:	str	w0, [sp, #420]
    de58:	mov	w0, #0x1                   	// #1
    de5c:	str	w0, [sp, #416]
    de60:	ldr	w0, [sp, #416]
    de64:	cmp	w0, #0x1
    de68:	b.ne	de94 <XXH64_update+0x6b4>  // b.any
    de6c:	ldr	w0, [sp, #420]
    de70:	cmp	w0, #0x1
    de74:	b.ne	de84 <XXH64_update+0x6a4>  // b.any
    de78:	ldr	x0, [sp, #424]
    de7c:	bl	9118 <XXH_read64>
    de80:	b	debc <XXH64_update+0x6dc>
    de84:	ldr	x0, [sp, #424]
    de88:	bl	9118 <XXH_read64>
    de8c:	rev	x0, x0
    de90:	b	debc <XXH64_update+0x6dc>
    de94:	ldr	w0, [sp, #420]
    de98:	cmp	w0, #0x1
    de9c:	b.ne	deac <XXH64_update+0x6cc>  // b.any
    dea0:	ldr	x0, [sp, #424]
    dea4:	ldr	x0, [x0]
    dea8:	b	deb8 <XXH64_update+0x6d8>
    deac:	ldr	x0, [sp, #424]
    deb0:	ldr	x0, [x0]
    deb4:	rev	x0, x0
    deb8:	nop
    debc:	nop
    dec0:	mov	x1, x0
    dec4:	ldr	x0, [sp, #544]
    dec8:	bl	a680 <XXH64_round>
    decc:	str	x0, [sp, #544]
    ded0:	ldr	x0, [sp, #720]
    ded4:	add	x0, x0, #0x8
    ded8:	str	x0, [sp, #720]
    dedc:	ldr	x1, [sp, #576]
    dee0:	ldr	x0, [sp, #720]
    dee4:	cmp	x1, x0
    dee8:	b.cs	dc4c <XXH64_update+0x46c>  // b.hs, b.nlast
    deec:	ldr	x0, [sp, #752]
    def0:	ldr	x1, [sp, #568]
    def4:	str	x1, [x0, #8]
    def8:	ldr	x0, [sp, #752]
    defc:	ldr	x1, [sp, #560]
    df00:	str	x1, [x0, #16]
    df04:	ldr	x0, [sp, #752]
    df08:	ldr	x1, [sp, #552]
    df0c:	str	x1, [x0, #24]
    df10:	ldr	x0, [sp, #752]
    df14:	ldr	x1, [sp, #544]
    df18:	str	x1, [x0, #32]
    df1c:	ldr	x1, [sp, #712]
    df20:	ldr	x0, [sp, #720]
    df24:	cmp	x1, x0
    df28:	b.ls	df68 <XXH64_update+0x788>  // b.plast
    df2c:	ldr	x0, [sp, #752]
    df30:	add	x3, x0, #0x28
    df34:	ldr	x1, [sp, #712]
    df38:	ldr	x0, [sp, #720]
    df3c:	sub	x0, x1, x0
    df40:	mov	x2, x0
    df44:	ldr	x1, [sp, #720]
    df48:	mov	x0, x3
    df4c:	bl	90c4 <XXH_memcpy>
    df50:	ldr	x1, [sp, #712]
    df54:	ldr	x0, [sp, #720]
    df58:	sub	x0, x1, x0
    df5c:	mov	w1, w0
    df60:	ldr	x0, [sp, #752]
    df64:	str	w1, [x0, #72]
    df68:	mov	w0, #0x0                   	// #0
    df6c:	b	e6c0 <XXH64_update+0xee0>
    df70:	ldr	x0, [sp, #56]
    df74:	str	x0, [sp, #408]
    df78:	ldr	x0, [sp, #48]
    df7c:	str	x0, [sp, #400]
    df80:	ldr	x0, [sp, #40]
    df84:	str	x0, [sp, #392]
    df88:	str	wzr, [sp, #388]
    df8c:	ldr	x0, [sp, #400]
    df90:	str	x0, [sp, #376]
    df94:	ldr	x1, [sp, #376]
    df98:	ldr	x0, [sp, #392]
    df9c:	add	x0, x1, x0
    dfa0:	str	x0, [sp, #368]
    dfa4:	ldr	x0, [sp, #408]
    dfa8:	ldr	x1, [x0]
    dfac:	ldr	x0, [sp, #392]
    dfb0:	add	x1, x1, x0
    dfb4:	ldr	x0, [sp, #408]
    dfb8:	str	x1, [x0]
    dfbc:	ldr	x0, [sp, #408]
    dfc0:	ldr	w0, [x0, #72]
    dfc4:	mov	w1, w0
    dfc8:	ldr	x0, [sp, #392]
    dfcc:	add	x0, x1, x0
    dfd0:	cmp	x0, #0x1f
    dfd4:	b.hi	e01c <XXH64_update+0x83c>  // b.pmore
    dfd8:	ldr	x0, [sp, #408]
    dfdc:	add	x1, x0, #0x28
    dfe0:	ldr	x0, [sp, #408]
    dfe4:	ldr	w0, [x0, #72]
    dfe8:	mov	w0, w0
    dfec:	add	x0, x1, x0
    dff0:	ldr	x2, [sp, #392]
    dff4:	ldr	x1, [sp, #400]
    dff8:	bl	90c4 <XXH_memcpy>
    dffc:	ldr	x0, [sp, #408]
    e000:	ldr	w0, [x0, #72]
    e004:	ldr	x1, [sp, #392]
    e008:	add	w1, w0, w1
    e00c:	ldr	x0, [sp, #408]
    e010:	str	w1, [x0, #72]
    e014:	mov	w0, #0x0                   	// #0
    e018:	b	e6bc <XXH64_update+0xedc>
    e01c:	ldr	x0, [sp, #408]
    e020:	ldr	w0, [x0, #72]
    e024:	cmp	w0, #0x0
    e028:	b.eq	e34c <XXH64_update+0xb6c>  // b.none
    e02c:	ldr	x0, [sp, #408]
    e030:	add	x1, x0, #0x28
    e034:	ldr	x0, [sp, #408]
    e038:	ldr	w0, [x0, #72]
    e03c:	mov	w0, w0
    e040:	add	x3, x1, x0
    e044:	ldr	x0, [sp, #408]
    e048:	ldr	w0, [x0, #72]
    e04c:	mov	w1, #0x20                  	// #32
    e050:	sub	w0, w1, w0
    e054:	mov	w0, w0
    e058:	mov	x2, x0
    e05c:	ldr	x1, [sp, #400]
    e060:	mov	x0, x3
    e064:	bl	90c4 <XXH_memcpy>
    e068:	ldr	x0, [sp, #408]
    e06c:	ldr	x19, [x0, #8]
    e070:	ldr	x0, [sp, #408]
    e074:	add	x0, x0, #0x28
    e078:	str	x0, [sp, #360]
    e07c:	ldr	w0, [sp, #388]
    e080:	str	w0, [sp, #356]
    e084:	ldr	x0, [sp, #360]
    e088:	str	x0, [sp, #344]
    e08c:	ldr	w0, [sp, #356]
    e090:	str	w0, [sp, #340]
    e094:	mov	w0, #0x1                   	// #1
    e098:	str	w0, [sp, #336]
    e09c:	ldr	w0, [sp, #336]
    e0a0:	cmp	w0, #0x1
    e0a4:	b.ne	e0d0 <XXH64_update+0x8f0>  // b.any
    e0a8:	ldr	w0, [sp, #340]
    e0ac:	cmp	w0, #0x1
    e0b0:	b.ne	e0c0 <XXH64_update+0x8e0>  // b.any
    e0b4:	ldr	x0, [sp, #344]
    e0b8:	bl	9118 <XXH_read64>
    e0bc:	b	e0f8 <XXH64_update+0x918>
    e0c0:	ldr	x0, [sp, #344]
    e0c4:	bl	9118 <XXH_read64>
    e0c8:	rev	x0, x0
    e0cc:	b	e0f8 <XXH64_update+0x918>
    e0d0:	ldr	w0, [sp, #340]
    e0d4:	cmp	w0, #0x1
    e0d8:	b.ne	e0e8 <XXH64_update+0x908>  // b.any
    e0dc:	ldr	x0, [sp, #344]
    e0e0:	ldr	x0, [x0]
    e0e4:	b	e0f4 <XXH64_update+0x914>
    e0e8:	ldr	x0, [sp, #344]
    e0ec:	ldr	x0, [x0]
    e0f0:	rev	x0, x0
    e0f4:	nop
    e0f8:	nop
    e0fc:	mov	x1, x0
    e100:	mov	x0, x19
    e104:	bl	a680 <XXH64_round>
    e108:	mov	x1, x0
    e10c:	ldr	x0, [sp, #408]
    e110:	str	x1, [x0, #8]
    e114:	ldr	x0, [sp, #408]
    e118:	ldr	x19, [x0, #16]
    e11c:	ldr	x0, [sp, #408]
    e120:	add	x0, x0, #0x28
    e124:	add	x0, x0, #0x8
    e128:	str	x0, [sp, #328]
    e12c:	ldr	w0, [sp, #388]
    e130:	str	w0, [sp, #324]
    e134:	ldr	x0, [sp, #328]
    e138:	str	x0, [sp, #312]
    e13c:	ldr	w0, [sp, #324]
    e140:	str	w0, [sp, #308]
    e144:	mov	w0, #0x1                   	// #1
    e148:	str	w0, [sp, #304]
    e14c:	ldr	w0, [sp, #304]
    e150:	cmp	w0, #0x1
    e154:	b.ne	e180 <XXH64_update+0x9a0>  // b.any
    e158:	ldr	w0, [sp, #308]
    e15c:	cmp	w0, #0x1
    e160:	b.ne	e170 <XXH64_update+0x990>  // b.any
    e164:	ldr	x0, [sp, #312]
    e168:	bl	9118 <XXH_read64>
    e16c:	b	e1a8 <XXH64_update+0x9c8>
    e170:	ldr	x0, [sp, #312]
    e174:	bl	9118 <XXH_read64>
    e178:	rev	x0, x0
    e17c:	b	e1a8 <XXH64_update+0x9c8>
    e180:	ldr	w0, [sp, #308]
    e184:	cmp	w0, #0x1
    e188:	b.ne	e198 <XXH64_update+0x9b8>  // b.any
    e18c:	ldr	x0, [sp, #312]
    e190:	ldr	x0, [x0]
    e194:	b	e1a4 <XXH64_update+0x9c4>
    e198:	ldr	x0, [sp, #312]
    e19c:	ldr	x0, [x0]
    e1a0:	rev	x0, x0
    e1a4:	nop
    e1a8:	nop
    e1ac:	mov	x1, x0
    e1b0:	mov	x0, x19
    e1b4:	bl	a680 <XXH64_round>
    e1b8:	mov	x1, x0
    e1bc:	ldr	x0, [sp, #408]
    e1c0:	str	x1, [x0, #16]
    e1c4:	ldr	x0, [sp, #408]
    e1c8:	ldr	x19, [x0, #24]
    e1cc:	ldr	x0, [sp, #408]
    e1d0:	add	x0, x0, #0x28
    e1d4:	add	x0, x0, #0x10
    e1d8:	str	x0, [sp, #296]
    e1dc:	ldr	w0, [sp, #388]
    e1e0:	str	w0, [sp, #292]
    e1e4:	ldr	x0, [sp, #296]
    e1e8:	str	x0, [sp, #280]
    e1ec:	ldr	w0, [sp, #292]
    e1f0:	str	w0, [sp, #276]
    e1f4:	mov	w0, #0x1                   	// #1
    e1f8:	str	w0, [sp, #272]
    e1fc:	ldr	w0, [sp, #272]
    e200:	cmp	w0, #0x1
    e204:	b.ne	e230 <XXH64_update+0xa50>  // b.any
    e208:	ldr	w0, [sp, #276]
    e20c:	cmp	w0, #0x1
    e210:	b.ne	e220 <XXH64_update+0xa40>  // b.any
    e214:	ldr	x0, [sp, #280]
    e218:	bl	9118 <XXH_read64>
    e21c:	b	e258 <XXH64_update+0xa78>
    e220:	ldr	x0, [sp, #280]
    e224:	bl	9118 <XXH_read64>
    e228:	rev	x0, x0
    e22c:	b	e258 <XXH64_update+0xa78>
    e230:	ldr	w0, [sp, #276]
    e234:	cmp	w0, #0x1
    e238:	b.ne	e248 <XXH64_update+0xa68>  // b.any
    e23c:	ldr	x0, [sp, #280]
    e240:	ldr	x0, [x0]
    e244:	b	e254 <XXH64_update+0xa74>
    e248:	ldr	x0, [sp, #280]
    e24c:	ldr	x0, [x0]
    e250:	rev	x0, x0
    e254:	nop
    e258:	nop
    e25c:	mov	x1, x0
    e260:	mov	x0, x19
    e264:	bl	a680 <XXH64_round>
    e268:	mov	x1, x0
    e26c:	ldr	x0, [sp, #408]
    e270:	str	x1, [x0, #24]
    e274:	ldr	x0, [sp, #408]
    e278:	ldr	x19, [x0, #32]
    e27c:	ldr	x0, [sp, #408]
    e280:	add	x0, x0, #0x28
    e284:	add	x0, x0, #0x18
    e288:	str	x0, [sp, #264]
    e28c:	ldr	w0, [sp, #388]
    e290:	str	w0, [sp, #260]
    e294:	ldr	x0, [sp, #264]
    e298:	str	x0, [sp, #248]
    e29c:	ldr	w0, [sp, #260]
    e2a0:	str	w0, [sp, #244]
    e2a4:	mov	w0, #0x1                   	// #1
    e2a8:	str	w0, [sp, #240]
    e2ac:	ldr	w0, [sp, #240]
    e2b0:	cmp	w0, #0x1
    e2b4:	b.ne	e2e0 <XXH64_update+0xb00>  // b.any
    e2b8:	ldr	w0, [sp, #244]
    e2bc:	cmp	w0, #0x1
    e2c0:	b.ne	e2d0 <XXH64_update+0xaf0>  // b.any
    e2c4:	ldr	x0, [sp, #248]
    e2c8:	bl	9118 <XXH_read64>
    e2cc:	b	e308 <XXH64_update+0xb28>
    e2d0:	ldr	x0, [sp, #248]
    e2d4:	bl	9118 <XXH_read64>
    e2d8:	rev	x0, x0
    e2dc:	b	e308 <XXH64_update+0xb28>
    e2e0:	ldr	w0, [sp, #244]
    e2e4:	cmp	w0, #0x1
    e2e8:	b.ne	e2f8 <XXH64_update+0xb18>  // b.any
    e2ec:	ldr	x0, [sp, #248]
    e2f0:	ldr	x0, [x0]
    e2f4:	b	e304 <XXH64_update+0xb24>
    e2f8:	ldr	x0, [sp, #248]
    e2fc:	ldr	x0, [x0]
    e300:	rev	x0, x0
    e304:	nop
    e308:	nop
    e30c:	mov	x1, x0
    e310:	mov	x0, x19
    e314:	bl	a680 <XXH64_round>
    e318:	mov	x1, x0
    e31c:	ldr	x0, [sp, #408]
    e320:	str	x1, [x0, #32]
    e324:	ldr	x0, [sp, #408]
    e328:	ldr	w0, [x0, #72]
    e32c:	mov	w1, #0x20                  	// #32
    e330:	sub	w0, w1, w0
    e334:	mov	w0, w0
    e338:	ldr	x1, [sp, #376]
    e33c:	add	x0, x1, x0
    e340:	str	x0, [sp, #376]
    e344:	ldr	x0, [sp, #408]
    e348:	str	wzr, [x0, #72]
    e34c:	ldr	x0, [sp, #376]
    e350:	add	x0, x0, #0x20
    e354:	ldr	x1, [sp, #368]
    e358:	cmp	x1, x0
    e35c:	b.cc	e66c <XXH64_update+0xe8c>  // b.lo, b.ul, b.last
    e360:	ldr	x0, [sp, #368]
    e364:	sub	x0, x0, #0x20
    e368:	str	x0, [sp, #232]
    e36c:	ldr	x0, [sp, #408]
    e370:	ldr	x0, [x0, #8]
    e374:	str	x0, [sp, #224]
    e378:	ldr	x0, [sp, #408]
    e37c:	ldr	x0, [x0, #16]
    e380:	str	x0, [sp, #216]
    e384:	ldr	x0, [sp, #408]
    e388:	ldr	x0, [x0, #24]
    e38c:	str	x0, [sp, #208]
    e390:	ldr	x0, [sp, #408]
    e394:	ldr	x0, [x0, #32]
    e398:	str	x0, [sp, #200]
    e39c:	ldr	x0, [sp, #376]
    e3a0:	str	x0, [sp, #192]
    e3a4:	ldr	w0, [sp, #388]
    e3a8:	str	w0, [sp, #188]
    e3ac:	ldr	x0, [sp, #192]
    e3b0:	str	x0, [sp, #176]
    e3b4:	ldr	w0, [sp, #188]
    e3b8:	str	w0, [sp, #172]
    e3bc:	mov	w0, #0x1                   	// #1
    e3c0:	str	w0, [sp, #168]
    e3c4:	ldr	w0, [sp, #168]
    e3c8:	cmp	w0, #0x1
    e3cc:	b.ne	e3f8 <XXH64_update+0xc18>  // b.any
    e3d0:	ldr	w0, [sp, #172]
    e3d4:	cmp	w0, #0x1
    e3d8:	b.ne	e3e8 <XXH64_update+0xc08>  // b.any
    e3dc:	ldr	x0, [sp, #176]
    e3e0:	bl	9118 <XXH_read64>
    e3e4:	b	e420 <XXH64_update+0xc40>
    e3e8:	ldr	x0, [sp, #176]
    e3ec:	bl	9118 <XXH_read64>
    e3f0:	rev	x0, x0
    e3f4:	b	e420 <XXH64_update+0xc40>
    e3f8:	ldr	w0, [sp, #172]
    e3fc:	cmp	w0, #0x1
    e400:	b.ne	e410 <XXH64_update+0xc30>  // b.any
    e404:	ldr	x0, [sp, #176]
    e408:	ldr	x0, [x0]
    e40c:	b	e41c <XXH64_update+0xc3c>
    e410:	ldr	x0, [sp, #176]
    e414:	ldr	x0, [x0]
    e418:	rev	x0, x0
    e41c:	nop
    e420:	nop
    e424:	mov	x1, x0
    e428:	ldr	x0, [sp, #224]
    e42c:	bl	a680 <XXH64_round>
    e430:	str	x0, [sp, #224]
    e434:	ldr	x0, [sp, #376]
    e438:	add	x0, x0, #0x8
    e43c:	str	x0, [sp, #376]
    e440:	ldr	x0, [sp, #376]
    e444:	str	x0, [sp, #160]
    e448:	ldr	w0, [sp, #388]
    e44c:	str	w0, [sp, #156]
    e450:	ldr	x0, [sp, #160]
    e454:	str	x0, [sp, #144]
    e458:	ldr	w0, [sp, #156]
    e45c:	str	w0, [sp, #140]
    e460:	mov	w0, #0x1                   	// #1
    e464:	str	w0, [sp, #136]
    e468:	ldr	w0, [sp, #136]
    e46c:	cmp	w0, #0x1
    e470:	b.ne	e49c <XXH64_update+0xcbc>  // b.any
    e474:	ldr	w0, [sp, #140]
    e478:	cmp	w0, #0x1
    e47c:	b.ne	e48c <XXH64_update+0xcac>  // b.any
    e480:	ldr	x0, [sp, #144]
    e484:	bl	9118 <XXH_read64>
    e488:	b	e4c4 <XXH64_update+0xce4>
    e48c:	ldr	x0, [sp, #144]
    e490:	bl	9118 <XXH_read64>
    e494:	rev	x0, x0
    e498:	b	e4c4 <XXH64_update+0xce4>
    e49c:	ldr	w0, [sp, #140]
    e4a0:	cmp	w0, #0x1
    e4a4:	b.ne	e4b4 <XXH64_update+0xcd4>  // b.any
    e4a8:	ldr	x0, [sp, #144]
    e4ac:	ldr	x0, [x0]
    e4b0:	b	e4c0 <XXH64_update+0xce0>
    e4b4:	ldr	x0, [sp, #144]
    e4b8:	ldr	x0, [x0]
    e4bc:	rev	x0, x0
    e4c0:	nop
    e4c4:	nop
    e4c8:	mov	x1, x0
    e4cc:	ldr	x0, [sp, #216]
    e4d0:	bl	a680 <XXH64_round>
    e4d4:	str	x0, [sp, #216]
    e4d8:	ldr	x0, [sp, #376]
    e4dc:	add	x0, x0, #0x8
    e4e0:	str	x0, [sp, #376]
    e4e4:	ldr	x0, [sp, #376]
    e4e8:	str	x0, [sp, #128]
    e4ec:	ldr	w0, [sp, #388]
    e4f0:	str	w0, [sp, #124]
    e4f4:	ldr	x0, [sp, #128]
    e4f8:	str	x0, [sp, #112]
    e4fc:	ldr	w0, [sp, #124]
    e500:	str	w0, [sp, #108]
    e504:	mov	w0, #0x1                   	// #1
    e508:	str	w0, [sp, #104]
    e50c:	ldr	w0, [sp, #104]
    e510:	cmp	w0, #0x1
    e514:	b.ne	e540 <XXH64_update+0xd60>  // b.any
    e518:	ldr	w0, [sp, #108]
    e51c:	cmp	w0, #0x1
    e520:	b.ne	e530 <XXH64_update+0xd50>  // b.any
    e524:	ldr	x0, [sp, #112]
    e528:	bl	9118 <XXH_read64>
    e52c:	b	e568 <XXH64_update+0xd88>
    e530:	ldr	x0, [sp, #112]
    e534:	bl	9118 <XXH_read64>
    e538:	rev	x0, x0
    e53c:	b	e568 <XXH64_update+0xd88>
    e540:	ldr	w0, [sp, #108]
    e544:	cmp	w0, #0x1
    e548:	b.ne	e558 <XXH64_update+0xd78>  // b.any
    e54c:	ldr	x0, [sp, #112]
    e550:	ldr	x0, [x0]
    e554:	b	e564 <XXH64_update+0xd84>
    e558:	ldr	x0, [sp, #112]
    e55c:	ldr	x0, [x0]
    e560:	rev	x0, x0
    e564:	nop
    e568:	nop
    e56c:	mov	x1, x0
    e570:	ldr	x0, [sp, #208]
    e574:	bl	a680 <XXH64_round>
    e578:	str	x0, [sp, #208]
    e57c:	ldr	x0, [sp, #376]
    e580:	add	x0, x0, #0x8
    e584:	str	x0, [sp, #376]
    e588:	ldr	x0, [sp, #376]
    e58c:	str	x0, [sp, #96]
    e590:	ldr	w0, [sp, #388]
    e594:	str	w0, [sp, #92]
    e598:	ldr	x0, [sp, #96]
    e59c:	str	x0, [sp, #80]
    e5a0:	ldr	w0, [sp, #92]
    e5a4:	str	w0, [sp, #76]
    e5a8:	mov	w0, #0x1                   	// #1
    e5ac:	str	w0, [sp, #72]
    e5b0:	ldr	w0, [sp, #72]
    e5b4:	cmp	w0, #0x1
    e5b8:	b.ne	e5e4 <XXH64_update+0xe04>  // b.any
    e5bc:	ldr	w0, [sp, #76]
    e5c0:	cmp	w0, #0x1
    e5c4:	b.ne	e5d4 <XXH64_update+0xdf4>  // b.any
    e5c8:	ldr	x0, [sp, #80]
    e5cc:	bl	9118 <XXH_read64>
    e5d0:	b	e60c <XXH64_update+0xe2c>
    e5d4:	ldr	x0, [sp, #80]
    e5d8:	bl	9118 <XXH_read64>
    e5dc:	rev	x0, x0
    e5e0:	b	e60c <XXH64_update+0xe2c>
    e5e4:	ldr	w0, [sp, #76]
    e5e8:	cmp	w0, #0x1
    e5ec:	b.ne	e5fc <XXH64_update+0xe1c>  // b.any
    e5f0:	ldr	x0, [sp, #80]
    e5f4:	ldr	x0, [x0]
    e5f8:	b	e608 <XXH64_update+0xe28>
    e5fc:	ldr	x0, [sp, #80]
    e600:	ldr	x0, [x0]
    e604:	rev	x0, x0
    e608:	nop
    e60c:	nop
    e610:	mov	x1, x0
    e614:	ldr	x0, [sp, #200]
    e618:	bl	a680 <XXH64_round>
    e61c:	str	x0, [sp, #200]
    e620:	ldr	x0, [sp, #376]
    e624:	add	x0, x0, #0x8
    e628:	str	x0, [sp, #376]
    e62c:	ldr	x1, [sp, #232]
    e630:	ldr	x0, [sp, #376]
    e634:	cmp	x1, x0
    e638:	b.cs	e39c <XXH64_update+0xbbc>  // b.hs, b.nlast
    e63c:	ldr	x0, [sp, #408]
    e640:	ldr	x1, [sp, #224]
    e644:	str	x1, [x0, #8]
    e648:	ldr	x0, [sp, #408]
    e64c:	ldr	x1, [sp, #216]
    e650:	str	x1, [x0, #16]
    e654:	ldr	x0, [sp, #408]
    e658:	ldr	x1, [sp, #208]
    e65c:	str	x1, [x0, #24]
    e660:	ldr	x0, [sp, #408]
    e664:	ldr	x1, [sp, #200]
    e668:	str	x1, [x0, #32]
    e66c:	ldr	x1, [sp, #368]
    e670:	ldr	x0, [sp, #376]
    e674:	cmp	x1, x0
    e678:	b.ls	e6b8 <XXH64_update+0xed8>  // b.plast
    e67c:	ldr	x0, [sp, #408]
    e680:	add	x3, x0, #0x28
    e684:	ldr	x1, [sp, #368]
    e688:	ldr	x0, [sp, #376]
    e68c:	sub	x0, x1, x0
    e690:	mov	x2, x0
    e694:	ldr	x1, [sp, #376]
    e698:	mov	x0, x3
    e69c:	bl	90c4 <XXH_memcpy>
    e6a0:	ldr	x1, [sp, #368]
    e6a4:	ldr	x0, [sp, #376]
    e6a8:	sub	x0, x1, x0
    e6ac:	mov	w1, w0
    e6b0:	ldr	x0, [sp, #408]
    e6b4:	str	w1, [x0, #72]
    e6b8:	mov	w0, #0x0                   	// #0
    e6bc:	nop
    e6c0:	ldr	x19, [sp, #16]
    e6c4:	ldp	x29, x30, [sp]
    e6c8:	add	sp, sp, #0x300
    e6cc:	ret
	...

000000000000e6d8 <XXH64_digest>:
    e6d8:	stp	x29, x30, [sp, #-336]!
    e6dc:	mov	x29, sp
    e6e0:	str	x0, [sp, #24]
    e6e4:	adrp	x0, 0 <grub_memcpy>
    e6e8:	add	x0, x0, #0x0
    e6ec:	ldr	x0, [x0]
    e6f0:	ldrb	w0, [x0]
    e6f4:	str	w0, [sp, #332]
    e6f8:	ldr	w0, [sp, #332]
    e6fc:	cmp	w0, #0x1
    e700:	b.ne	eb0c <XXH64_digest+0x434>  // b.any
    e704:	ldr	x0, [sp, #24]
    e708:	str	x0, [sp, #320]
    e70c:	mov	w0, #0x1                   	// #1
    e710:	str	w0, [sp, #316]
    e714:	ldr	x0, [sp, #320]
    e718:	add	x0, x0, #0x28
    e71c:	str	x0, [sp, #304]
    e720:	ldr	x0, [sp, #320]
    e724:	add	x1, x0, #0x28
    e728:	ldr	x0, [sp, #320]
    e72c:	ldr	w0, [x0, #72]
    e730:	mov	w0, w0
    e734:	add	x0, x1, x0
    e738:	str	x0, [sp, #296]
    e73c:	ldr	x0, [sp, #320]
    e740:	ldr	x0, [x0]
    e744:	cmp	x0, #0x1f
    e748:	b.ls	e7f0 <XXH64_digest+0x118>  // b.plast
    e74c:	ldr	x0, [sp, #320]
    e750:	ldr	x0, [x0, #8]
    e754:	str	x0, [sp, #288]
    e758:	ldr	x0, [sp, #320]
    e75c:	ldr	x0, [x0, #16]
    e760:	str	x0, [sp, #280]
    e764:	ldr	x0, [sp, #320]
    e768:	ldr	x0, [x0, #24]
    e76c:	str	x0, [sp, #272]
    e770:	ldr	x0, [sp, #320]
    e774:	ldr	x0, [x0, #32]
    e778:	str	x0, [sp, #264]
    e77c:	ldr	x0, [sp, #288]
    e780:	ror	x1, x0, #63
    e784:	ldr	x0, [sp, #280]
    e788:	ror	x0, x0, #57
    e78c:	add	x1, x1, x0
    e790:	ldr	x0, [sp, #272]
    e794:	ror	x0, x0, #52
    e798:	add	x1, x1, x0
    e79c:	ldr	x0, [sp, #264]
    e7a0:	ror	x0, x0, #46
    e7a4:	add	x0, x1, x0
    e7a8:	str	x0, [sp, #256]
    e7ac:	ldr	x1, [sp, #288]
    e7b0:	ldr	x0, [sp, #256]
    e7b4:	bl	a6e4 <XXH64_mergeRound>
    e7b8:	str	x0, [sp, #256]
    e7bc:	ldr	x1, [sp, #280]
    e7c0:	ldr	x0, [sp, #256]
    e7c4:	bl	a6e4 <XXH64_mergeRound>
    e7c8:	str	x0, [sp, #256]
    e7cc:	ldr	x1, [sp, #272]
    e7d0:	ldr	x0, [sp, #256]
    e7d4:	bl	a6e4 <XXH64_mergeRound>
    e7d8:	str	x0, [sp, #256]
    e7dc:	ldr	x1, [sp, #264]
    e7e0:	ldr	x0, [sp, #256]
    e7e4:	bl	a6e4 <XXH64_mergeRound>
    e7e8:	str	x0, [sp, #256]
    e7ec:	b	e810 <XXH64_digest+0x138>
    e7f0:	ldr	x0, [sp, #320]
    e7f4:	ldr	x1, [x0, #24]
    e7f8:	mov	x0, #0x67c5                	// #26565
    e7fc:	movk	x0, #0x1656, lsl #16
    e800:	movk	x0, #0xeb2f, lsl #32
    e804:	movk	x0, #0x27d4, lsl #48
    e808:	add	x0, x1, x0
    e80c:	str	x0, [sp, #256]
    e810:	ldr	x0, [sp, #320]
    e814:	ldr	x0, [x0]
    e818:	ldr	x1, [sp, #256]
    e81c:	add	x0, x1, x0
    e820:	str	x0, [sp, #256]
    e824:	b	e910 <XXH64_digest+0x238>
    e828:	ldr	x0, [sp, #304]
    e82c:	str	x0, [sp, #248]
    e830:	ldr	w0, [sp, #316]
    e834:	str	w0, [sp, #244]
    e838:	ldr	x0, [sp, #248]
    e83c:	str	x0, [sp, #232]
    e840:	ldr	w0, [sp, #244]
    e844:	str	w0, [sp, #228]
    e848:	mov	w0, #0x1                   	// #1
    e84c:	str	w0, [sp, #224]
    e850:	ldr	w0, [sp, #224]
    e854:	cmp	w0, #0x1
    e858:	b.ne	e884 <XXH64_digest+0x1ac>  // b.any
    e85c:	ldr	w0, [sp, #228]
    e860:	cmp	w0, #0x1
    e864:	b.ne	e874 <XXH64_digest+0x19c>  // b.any
    e868:	ldr	x0, [sp, #232]
    e86c:	bl	9118 <XXH_read64>
    e870:	b	e8ac <XXH64_digest+0x1d4>
    e874:	ldr	x0, [sp, #232]
    e878:	bl	9118 <XXH_read64>
    e87c:	rev	x0, x0
    e880:	b	e8ac <XXH64_digest+0x1d4>
    e884:	ldr	w0, [sp, #228]
    e888:	cmp	w0, #0x1
    e88c:	b.ne	e89c <XXH64_digest+0x1c4>  // b.any
    e890:	ldr	x0, [sp, #232]
    e894:	ldr	x0, [x0]
    e898:	b	e8a8 <XXH64_digest+0x1d0>
    e89c:	ldr	x0, [sp, #232]
    e8a0:	ldr	x0, [x0]
    e8a4:	rev	x0, x0
    e8a8:	nop
    e8ac:	nop
    e8b0:	mov	x1, x0
    e8b4:	mov	x0, #0x0                   	// #0
    e8b8:	bl	a680 <XXH64_round>
    e8bc:	str	x0, [sp, #216]
    e8c0:	ldr	x1, [sp, #256]
    e8c4:	ldr	x0, [sp, #216]
    e8c8:	eor	x0, x1, x0
    e8cc:	str	x0, [sp, #256]
    e8d0:	ldr	x0, [sp, #256]
    e8d4:	ror	x1, x0, #37
    e8d8:	mov	x0, #0xca87                	// #51847
    e8dc:	movk	x0, #0x85eb, lsl #16
    e8e0:	movk	x0, #0x79b1, lsl #32
    e8e4:	movk	x0, #0x9e37, lsl #48
    e8e8:	mul	x1, x1, x0
    e8ec:	mov	x0, #0xae63                	// #44643
    e8f0:	movk	x0, #0xc2b2, lsl #16
    e8f4:	movk	x0, #0xca77, lsl #32
    e8f8:	movk	x0, #0x85eb, lsl #48
    e8fc:	add	x0, x1, x0
    e900:	str	x0, [sp, #256]
    e904:	ldr	x0, [sp, #304]
    e908:	add	x0, x0, #0x8
    e90c:	str	x0, [sp, #304]
    e910:	ldr	x0, [sp, #304]
    e914:	add	x0, x0, #0x8
    e918:	ldr	x1, [sp, #296]
    e91c:	cmp	x1, x0
    e920:	b.cs	e828 <XXH64_digest+0x150>  // b.hs, b.nlast
    e924:	ldr	x0, [sp, #304]
    e928:	add	x0, x0, #0x4
    e92c:	ldr	x1, [sp, #296]
    e930:	cmp	x1, x0
    e934:	b.cc	ea80 <XXH64_digest+0x3a8>  // b.lo, b.ul, b.last
    e938:	ldr	x0, [sp, #304]
    e93c:	str	x0, [sp, #208]
    e940:	ldr	w0, [sp, #316]
    e944:	str	w0, [sp, #204]
    e948:	ldr	x0, [sp, #208]
    e94c:	str	x0, [sp, #192]
    e950:	ldr	w0, [sp, #204]
    e954:	str	w0, [sp, #188]
    e958:	mov	w0, #0x1                   	// #1
    e95c:	str	w0, [sp, #184]
    e960:	ldr	w0, [sp, #184]
    e964:	cmp	w0, #0x1
    e968:	b.ne	e994 <XXH64_digest+0x2bc>  // b.any
    e96c:	ldr	w0, [sp, #188]
    e970:	cmp	w0, #0x1
    e974:	b.ne	e984 <XXH64_digest+0x2ac>  // b.any
    e978:	ldr	x0, [sp, #192]
    e97c:	bl	90f0 <XXH_read32>
    e980:	b	e9bc <XXH64_digest+0x2e4>
    e984:	ldr	x0, [sp, #192]
    e988:	bl	90f0 <XXH_read32>
    e98c:	rev	w0, w0
    e990:	b	e9bc <XXH64_digest+0x2e4>
    e994:	ldr	w0, [sp, #188]
    e998:	cmp	w0, #0x1
    e99c:	b.ne	e9ac <XXH64_digest+0x2d4>  // b.any
    e9a0:	ldr	x0, [sp, #192]
    e9a4:	ldr	w0, [x0]
    e9a8:	b	e9b8 <XXH64_digest+0x2e0>
    e9ac:	ldr	x0, [sp, #192]
    e9b0:	ldr	w0, [x0]
    e9b4:	rev	w0, w0
    e9b8:	nop
    e9bc:	nop
    e9c0:	mov	w1, w0
    e9c4:	mov	x0, #0xca87                	// #51847
    e9c8:	movk	x0, #0x85eb, lsl #16
    e9cc:	movk	x0, #0x79b1, lsl #32
    e9d0:	movk	x0, #0x9e37, lsl #48
    e9d4:	mul	x0, x1, x0
    e9d8:	ldr	x1, [sp, #256]
    e9dc:	eor	x0, x1, x0
    e9e0:	str	x0, [sp, #256]
    e9e4:	ldr	x0, [sp, #256]
    e9e8:	ror	x1, x0, #41
    e9ec:	mov	x0, #0xeb4f                	// #60239
    e9f0:	movk	x0, #0x27d4, lsl #16
    e9f4:	movk	x0, #0xae3d, lsl #32
    e9f8:	movk	x0, #0xc2b2, lsl #48
    e9fc:	mul	x1, x1, x0
    ea00:	mov	x0, #0x79f9                	// #31225
    ea04:	movk	x0, #0x9e37, lsl #16
    ea08:	movk	x0, #0x67b1, lsl #32
    ea0c:	movk	x0, #0x1656, lsl #48
    ea10:	add	x0, x1, x0
    ea14:	str	x0, [sp, #256]
    ea18:	ldr	x0, [sp, #304]
    ea1c:	add	x0, x0, #0x4
    ea20:	str	x0, [sp, #304]
    ea24:	b	ea80 <XXH64_digest+0x3a8>
    ea28:	ldr	x0, [sp, #304]
    ea2c:	ldrb	w0, [x0]
    ea30:	and	x1, x0, #0xff
    ea34:	mov	x0, #0x67c5                	// #26565
    ea38:	movk	x0, #0x1656, lsl #16
    ea3c:	movk	x0, #0xeb2f, lsl #32
    ea40:	movk	x0, #0x27d4, lsl #48
    ea44:	mul	x0, x1, x0
    ea48:	ldr	x1, [sp, #256]
    ea4c:	eor	x0, x1, x0
    ea50:	str	x0, [sp, #256]
    ea54:	ldr	x0, [sp, #256]
    ea58:	ror	x1, x0, #53
    ea5c:	mov	x0, #0xca87                	// #51847
    ea60:	movk	x0, #0x85eb, lsl #16
    ea64:	movk	x0, #0x79b1, lsl #32
    ea68:	movk	x0, #0x9e37, lsl #48
    ea6c:	mul	x0, x1, x0
    ea70:	str	x0, [sp, #256]
    ea74:	ldr	x0, [sp, #304]
    ea78:	add	x0, x0, #0x1
    ea7c:	str	x0, [sp, #304]
    ea80:	ldr	x1, [sp, #296]
    ea84:	ldr	x0, [sp, #304]
    ea88:	cmp	x1, x0
    ea8c:	b.hi	ea28 <XXH64_digest+0x350>  // b.pmore
    ea90:	ldr	x0, [sp, #256]
    ea94:	lsr	x0, x0, #33
    ea98:	ldr	x1, [sp, #256]
    ea9c:	eor	x0, x1, x0
    eaa0:	str	x0, [sp, #256]
    eaa4:	mov	x0, #0xeb4f                	// #60239
    eaa8:	movk	x0, #0x27d4, lsl #16
    eaac:	movk	x0, #0xae3d, lsl #32
    eab0:	movk	x0, #0xc2b2, lsl #48
    eab4:	ldr	x1, [sp, #256]
    eab8:	mul	x0, x1, x0
    eabc:	str	x0, [sp, #256]
    eac0:	ldr	x0, [sp, #256]
    eac4:	lsr	x0, x0, #29
    eac8:	ldr	x1, [sp, #256]
    eacc:	eor	x0, x1, x0
    ead0:	str	x0, [sp, #256]
    ead4:	mov	x0, #0x79f9                	// #31225
    ead8:	movk	x0, #0x9e37, lsl #16
    eadc:	movk	x0, #0x67b1, lsl #32
    eae0:	movk	x0, #0x1656, lsl #48
    eae4:	ldr	x1, [sp, #256]
    eae8:	mul	x0, x1, x0
    eaec:	str	x0, [sp, #256]
    eaf0:	ldr	x0, [sp, #256]
    eaf4:	lsr	x0, x0, #32
    eaf8:	ldr	x1, [sp, #256]
    eafc:	eor	x0, x1, x0
    eb00:	str	x0, [sp, #256]
    eb04:	ldr	x0, [sp, #256]
    eb08:	b	ef10 <XXH64_digest+0x838>
    eb0c:	ldr	x0, [sp, #24]
    eb10:	str	x0, [sp, #176]
    eb14:	str	wzr, [sp, #172]
    eb18:	ldr	x0, [sp, #176]
    eb1c:	add	x0, x0, #0x28
    eb20:	str	x0, [sp, #160]
    eb24:	ldr	x0, [sp, #176]
    eb28:	add	x1, x0, #0x28
    eb2c:	ldr	x0, [sp, #176]
    eb30:	ldr	w0, [x0, #72]
    eb34:	mov	w0, w0
    eb38:	add	x0, x1, x0
    eb3c:	str	x0, [sp, #152]
    eb40:	ldr	x0, [sp, #176]
    eb44:	ldr	x0, [x0]
    eb48:	cmp	x0, #0x1f
    eb4c:	b.ls	ebf4 <XXH64_digest+0x51c>  // b.plast
    eb50:	ldr	x0, [sp, #176]
    eb54:	ldr	x0, [x0, #8]
    eb58:	str	x0, [sp, #144]
    eb5c:	ldr	x0, [sp, #176]
    eb60:	ldr	x0, [x0, #16]
    eb64:	str	x0, [sp, #136]
    eb68:	ldr	x0, [sp, #176]
    eb6c:	ldr	x0, [x0, #24]
    eb70:	str	x0, [sp, #128]
    eb74:	ldr	x0, [sp, #176]
    eb78:	ldr	x0, [x0, #32]
    eb7c:	str	x0, [sp, #120]
    eb80:	ldr	x0, [sp, #144]
    eb84:	ror	x1, x0, #63
    eb88:	ldr	x0, [sp, #136]
    eb8c:	ror	x0, x0, #57
    eb90:	add	x1, x1, x0
    eb94:	ldr	x0, [sp, #128]
    eb98:	ror	x0, x0, #52
    eb9c:	add	x1, x1, x0
    eba0:	ldr	x0, [sp, #120]
    eba4:	ror	x0, x0, #46
    eba8:	add	x0, x1, x0
    ebac:	str	x0, [sp, #112]
    ebb0:	ldr	x1, [sp, #144]
    ebb4:	ldr	x0, [sp, #112]
    ebb8:	bl	a6e4 <XXH64_mergeRound>
    ebbc:	str	x0, [sp, #112]
    ebc0:	ldr	x1, [sp, #136]
    ebc4:	ldr	x0, [sp, #112]
    ebc8:	bl	a6e4 <XXH64_mergeRound>
    ebcc:	str	x0, [sp, #112]
    ebd0:	ldr	x1, [sp, #128]
    ebd4:	ldr	x0, [sp, #112]
    ebd8:	bl	a6e4 <XXH64_mergeRound>
    ebdc:	str	x0, [sp, #112]
    ebe0:	ldr	x1, [sp, #120]
    ebe4:	ldr	x0, [sp, #112]
    ebe8:	bl	a6e4 <XXH64_mergeRound>
    ebec:	str	x0, [sp, #112]
    ebf0:	b	ec14 <XXH64_digest+0x53c>
    ebf4:	ldr	x0, [sp, #176]
    ebf8:	ldr	x1, [x0, #24]
    ebfc:	mov	x0, #0x67c5                	// #26565
    ec00:	movk	x0, #0x1656, lsl #16
    ec04:	movk	x0, #0xeb2f, lsl #32
    ec08:	movk	x0, #0x27d4, lsl #48
    ec0c:	add	x0, x1, x0
    ec10:	str	x0, [sp, #112]
    ec14:	ldr	x0, [sp, #176]
    ec18:	ldr	x0, [x0]
    ec1c:	ldr	x1, [sp, #112]
    ec20:	add	x0, x1, x0
    ec24:	str	x0, [sp, #112]
    ec28:	b	ed14 <XXH64_digest+0x63c>
    ec2c:	ldr	x0, [sp, #160]
    ec30:	str	x0, [sp, #104]
    ec34:	ldr	w0, [sp, #172]
    ec38:	str	w0, [sp, #100]
    ec3c:	ldr	x0, [sp, #104]
    ec40:	str	x0, [sp, #88]
    ec44:	ldr	w0, [sp, #100]
    ec48:	str	w0, [sp, #84]
    ec4c:	mov	w0, #0x1                   	// #1
    ec50:	str	w0, [sp, #80]
    ec54:	ldr	w0, [sp, #80]
    ec58:	cmp	w0, #0x1
    ec5c:	b.ne	ec88 <XXH64_digest+0x5b0>  // b.any
    ec60:	ldr	w0, [sp, #84]
    ec64:	cmp	w0, #0x1
    ec68:	b.ne	ec78 <XXH64_digest+0x5a0>  // b.any
    ec6c:	ldr	x0, [sp, #88]
    ec70:	bl	9118 <XXH_read64>
    ec74:	b	ecb0 <XXH64_digest+0x5d8>
    ec78:	ldr	x0, [sp, #88]
    ec7c:	bl	9118 <XXH_read64>
    ec80:	rev	x0, x0
    ec84:	b	ecb0 <XXH64_digest+0x5d8>
    ec88:	ldr	w0, [sp, #84]
    ec8c:	cmp	w0, #0x1
    ec90:	b.ne	eca0 <XXH64_digest+0x5c8>  // b.any
    ec94:	ldr	x0, [sp, #88]
    ec98:	ldr	x0, [x0]
    ec9c:	b	ecac <XXH64_digest+0x5d4>
    eca0:	ldr	x0, [sp, #88]
    eca4:	ldr	x0, [x0]
    eca8:	rev	x0, x0
    ecac:	nop
    ecb0:	nop
    ecb4:	mov	x1, x0
    ecb8:	mov	x0, #0x0                   	// #0
    ecbc:	bl	a680 <XXH64_round>
    ecc0:	str	x0, [sp, #72]
    ecc4:	ldr	x1, [sp, #112]
    ecc8:	ldr	x0, [sp, #72]
    eccc:	eor	x0, x1, x0
    ecd0:	str	x0, [sp, #112]
    ecd4:	ldr	x0, [sp, #112]
    ecd8:	ror	x1, x0, #37
    ecdc:	mov	x0, #0xca87                	// #51847
    ece0:	movk	x0, #0x85eb, lsl #16
    ece4:	movk	x0, #0x79b1, lsl #32
    ece8:	movk	x0, #0x9e37, lsl #48
    ecec:	mul	x1, x1, x0
    ecf0:	mov	x0, #0xae63                	// #44643
    ecf4:	movk	x0, #0xc2b2, lsl #16
    ecf8:	movk	x0, #0xca77, lsl #32
    ecfc:	movk	x0, #0x85eb, lsl #48
    ed00:	add	x0, x1, x0
    ed04:	str	x0, [sp, #112]
    ed08:	ldr	x0, [sp, #160]
    ed0c:	add	x0, x0, #0x8
    ed10:	str	x0, [sp, #160]
    ed14:	ldr	x0, [sp, #160]
    ed18:	add	x0, x0, #0x8
    ed1c:	ldr	x1, [sp, #152]
    ed20:	cmp	x1, x0
    ed24:	b.cs	ec2c <XXH64_digest+0x554>  // b.hs, b.nlast
    ed28:	ldr	x0, [sp, #160]
    ed2c:	add	x0, x0, #0x4
    ed30:	ldr	x1, [sp, #152]
    ed34:	cmp	x1, x0
    ed38:	b.cc	ee84 <XXH64_digest+0x7ac>  // b.lo, b.ul, b.last
    ed3c:	ldr	x0, [sp, #160]
    ed40:	str	x0, [sp, #64]
    ed44:	ldr	w0, [sp, #172]
    ed48:	str	w0, [sp, #60]
    ed4c:	ldr	x0, [sp, #64]
    ed50:	str	x0, [sp, #48]
    ed54:	ldr	w0, [sp, #60]
    ed58:	str	w0, [sp, #44]
    ed5c:	mov	w0, #0x1                   	// #1
    ed60:	str	w0, [sp, #40]
    ed64:	ldr	w0, [sp, #40]
    ed68:	cmp	w0, #0x1
    ed6c:	b.ne	ed98 <XXH64_digest+0x6c0>  // b.any
    ed70:	ldr	w0, [sp, #44]
    ed74:	cmp	w0, #0x1
    ed78:	b.ne	ed88 <XXH64_digest+0x6b0>  // b.any
    ed7c:	ldr	x0, [sp, #48]
    ed80:	bl	90f0 <XXH_read32>
    ed84:	b	edc0 <XXH64_digest+0x6e8>
    ed88:	ldr	x0, [sp, #48]
    ed8c:	bl	90f0 <XXH_read32>
    ed90:	rev	w0, w0
    ed94:	b	edc0 <XXH64_digest+0x6e8>
    ed98:	ldr	w0, [sp, #44]
    ed9c:	cmp	w0, #0x1
    eda0:	b.ne	edb0 <XXH64_digest+0x6d8>  // b.any
    eda4:	ldr	x0, [sp, #48]
    eda8:	ldr	w0, [x0]
    edac:	b	edbc <XXH64_digest+0x6e4>
    edb0:	ldr	x0, [sp, #48]
    edb4:	ldr	w0, [x0]
    edb8:	rev	w0, w0
    edbc:	nop
    edc0:	nop
    edc4:	mov	w1, w0
    edc8:	mov	x0, #0xca87                	// #51847
    edcc:	movk	x0, #0x85eb, lsl #16
    edd0:	movk	x0, #0x79b1, lsl #32
    edd4:	movk	x0, #0x9e37, lsl #48
    edd8:	mul	x0, x1, x0
    eddc:	ldr	x1, [sp, #112]
    ede0:	eor	x0, x1, x0
    ede4:	str	x0, [sp, #112]
    ede8:	ldr	x0, [sp, #112]
    edec:	ror	x1, x0, #41
    edf0:	mov	x0, #0xeb4f                	// #60239
    edf4:	movk	x0, #0x27d4, lsl #16
    edf8:	movk	x0, #0xae3d, lsl #32
    edfc:	movk	x0, #0xc2b2, lsl #48
    ee00:	mul	x1, x1, x0
    ee04:	mov	x0, #0x79f9                	// #31225
    ee08:	movk	x0, #0x9e37, lsl #16
    ee0c:	movk	x0, #0x67b1, lsl #32
    ee10:	movk	x0, #0x1656, lsl #48
    ee14:	add	x0, x1, x0
    ee18:	str	x0, [sp, #112]
    ee1c:	ldr	x0, [sp, #160]
    ee20:	add	x0, x0, #0x4
    ee24:	str	x0, [sp, #160]
    ee28:	b	ee84 <XXH64_digest+0x7ac>
    ee2c:	ldr	x0, [sp, #160]
    ee30:	ldrb	w0, [x0]
    ee34:	and	x1, x0, #0xff
    ee38:	mov	x0, #0x67c5                	// #26565
    ee3c:	movk	x0, #0x1656, lsl #16
    ee40:	movk	x0, #0xeb2f, lsl #32
    ee44:	movk	x0, #0x27d4, lsl #48
    ee48:	mul	x0, x1, x0
    ee4c:	ldr	x1, [sp, #112]
    ee50:	eor	x0, x1, x0
    ee54:	str	x0, [sp, #112]
    ee58:	ldr	x0, [sp, #112]
    ee5c:	ror	x1, x0, #53
    ee60:	mov	x0, #0xca87                	// #51847
    ee64:	movk	x0, #0x85eb, lsl #16
    ee68:	movk	x0, #0x79b1, lsl #32
    ee6c:	movk	x0, #0x9e37, lsl #48
    ee70:	mul	x0, x1, x0
    ee74:	str	x0, [sp, #112]
    ee78:	ldr	x0, [sp, #160]
    ee7c:	add	x0, x0, #0x1
    ee80:	str	x0, [sp, #160]
    ee84:	ldr	x1, [sp, #152]
    ee88:	ldr	x0, [sp, #160]
    ee8c:	cmp	x1, x0
    ee90:	b.hi	ee2c <XXH64_digest+0x754>  // b.pmore
    ee94:	ldr	x0, [sp, #112]
    ee98:	lsr	x0, x0, #33
    ee9c:	ldr	x1, [sp, #112]
    eea0:	eor	x0, x1, x0
    eea4:	str	x0, [sp, #112]
    eea8:	mov	x0, #0xeb4f                	// #60239
    eeac:	movk	x0, #0x27d4, lsl #16
    eeb0:	movk	x0, #0xae3d, lsl #32
    eeb4:	movk	x0, #0xc2b2, lsl #48
    eeb8:	ldr	x1, [sp, #112]
    eebc:	mul	x0, x1, x0
    eec0:	str	x0, [sp, #112]
    eec4:	ldr	x0, [sp, #112]
    eec8:	lsr	x0, x0, #29
    eecc:	ldr	x1, [sp, #112]
    eed0:	eor	x0, x1, x0
    eed4:	str	x0, [sp, #112]
    eed8:	mov	x0, #0x79f9                	// #31225
    eedc:	movk	x0, #0x9e37, lsl #16
    eee0:	movk	x0, #0x67b1, lsl #32
    eee4:	movk	x0, #0x1656, lsl #48
    eee8:	ldr	x1, [sp, #112]
    eeec:	mul	x0, x1, x0
    eef0:	str	x0, [sp, #112]
    eef4:	ldr	x0, [sp, #112]
    eef8:	lsr	x0, x0, #32
    eefc:	ldr	x1, [sp, #112]
    ef00:	eor	x0, x1, x0
    ef04:	str	x0, [sp, #112]
    ef08:	ldr	x0, [sp, #112]
    ef0c:	nop
    ef10:	ldp	x29, x30, [sp], #336
    ef14:	ret
	...

000000000000ef20 <XXH32_canonicalFromHash>:
    ef20:	stp	x29, x30, [sp, #-32]!
    ef24:	mov	x29, sp
    ef28:	str	x0, [sp, #24]
    ef2c:	str	w1, [sp, #20]
    ef30:	adrp	x0, 0 <grub_memcpy>
    ef34:	add	x0, x0, #0x0
    ef38:	ldr	x0, [x0]
    ef3c:	ldrb	w0, [x0]
    ef40:	cmp	w0, #0x0
    ef44:	b.eq	ef54 <XXH32_canonicalFromHash+0x34>  // b.none
    ef48:	ldr	w0, [sp, #20]
    ef4c:	rev	w0, w0
    ef50:	str	w0, [sp, #20]
    ef54:	add	x0, sp, #0x14
    ef58:	mov	x2, #0x4                   	// #4
    ef5c:	mov	x1, x0
    ef60:	ldr	x0, [sp, #24]
    ef64:	bl	9020 <grub_memcpy>
    ef68:	nop
    ef6c:	ldp	x29, x30, [sp], #32
    ef70:	ret
    ef74:	nop
	...

000000000000ef80 <XXH64_canonicalFromHash>:
    ef80:	stp	x29, x30, [sp, #-32]!
    ef84:	mov	x29, sp
    ef88:	str	x0, [sp, #24]
    ef8c:	str	x1, [sp, #16]
    ef90:	adrp	x0, 0 <grub_memcpy>
    ef94:	add	x0, x0, #0x0
    ef98:	ldr	x0, [x0]
    ef9c:	ldrb	w0, [x0]
    efa0:	cmp	w0, #0x0
    efa4:	b.eq	efb4 <XXH64_canonicalFromHash+0x34>  // b.none
    efa8:	ldr	x0, [sp, #16]
    efac:	rev	x0, x0
    efb0:	str	x0, [sp, #16]
    efb4:	add	x0, sp, #0x10
    efb8:	mov	x2, #0x8                   	// #8
    efbc:	mov	x1, x0
    efc0:	ldr	x0, [sp, #24]
    efc4:	bl	9020 <grub_memcpy>
    efc8:	nop
    efcc:	ldp	x29, x30, [sp], #32
    efd0:	ret
    efd4:	nop
	...

000000000000efe0 <XXH32_hashFromCanonical>:
    efe0:	stp	x29, x30, [sp, #-32]!
    efe4:	mov	x29, sp
    efe8:	str	x0, [sp, #24]
    efec:	ldr	x0, [sp, #24]
    eff0:	bl	9140 <XXH_readBE32>
    eff4:	ldp	x29, x30, [sp], #32
    eff8:	ret

000000000000effc <XXH64_hashFromCanonical>:
    effc:	stp	x29, x30, [sp, #-32]!
    f000:	mov	x29, sp
    f004:	str	x0, [sp, #24]
    f008:	ldr	x0, [sp, #24]
    f00c:	bl	9190 <XXH_readBE64>
    f010:	ldp	x29, x30, [sp], #32
    f014:	ret

000000000000f018 <grub_memcpy>:
    f018:	stp	x29, x30, [sp, #-48]!
    f01c:	mov	x29, sp
    f020:	str	x0, [sp, #40]
    f024:	str	x1, [sp, #32]
    f028:	str	x2, [sp, #24]
    f02c:	ldr	x2, [sp, #24]
    f030:	ldr	x1, [sp, #32]
    f034:	ldr	x0, [sp, #40]
    f038:	bl	0 <grub_memmove>
    f03c:	ldp	x29, x30, [sp], #48
    f040:	ret

000000000000f044 <free>:
    f044:	stp	x29, x30, [sp, #-32]!
    f048:	mov	x29, sp
    f04c:	str	x0, [sp, #24]
    f050:	ldr	x0, [sp, #24]
    f054:	bl	0 <grub_free>
    f058:	nop
    f05c:	ldp	x29, x30, [sp], #32
    f060:	ret

000000000000f064 <malloc>:
    f064:	stp	x29, x30, [sp, #-32]!
    f068:	mov	x29, sp
    f06c:	str	x0, [sp, #24]
    f070:	ldr	x0, [sp, #24]
    f074:	bl	0 <grub_malloc>
    f078:	ldp	x29, x30, [sp], #32
    f07c:	ret

000000000000f080 <calloc>:
    f080:	stp	x29, x30, [sp, #-32]!
    f084:	mov	x29, sp
    f088:	str	x0, [sp, #24]
    f08c:	str	x1, [sp, #16]
    f090:	ldr	x1, [sp, #24]
    f094:	ldr	x0, [sp, #16]
    f098:	mul	x0, x1, x0
    f09c:	bl	0 <grub_zalloc>
    f0a0:	ldp	x29, x30, [sp], #32
    f0a4:	ret

000000000000f0a8 <ERR_isError>:
    f0a8:	sub	sp, sp, #0x10
    f0ac:	str	x0, [sp, #8]
    f0b0:	ldr	x0, [sp, #8]
    f0b4:	cmn	x0, #0x78
    f0b8:	cset	w0, hi  // hi = pmore
    f0bc:	and	w0, w0, #0xff
    f0c0:	add	sp, sp, #0x10
    f0c4:	ret

000000000000f0c8 <ERR_getErrorCode>:
    f0c8:	stp	x29, x30, [sp, #-32]!
    f0cc:	mov	x29, sp
    f0d0:	str	x0, [sp, #24]
    f0d4:	ldr	x0, [sp, #24]
    f0d8:	bl	f0a8 <ERR_isError>
    f0dc:	cmp	w0, #0x0
    f0e0:	b.ne	f0ec <ERR_getErrorCode+0x24>  // b.any
    f0e4:	mov	w0, #0x0                   	// #0
    f0e8:	b	f0f4 <ERR_getErrorCode+0x2c>
    f0ec:	ldr	x0, [sp, #24]
    f0f0:	neg	w0, w0
    f0f4:	ldp	x29, x30, [sp], #32
    f0f8:	ret

000000000000f0fc <ERR_getErrorName>:
    f0fc:	stp	x29, x30, [sp, #-32]!
    f100:	mov	x29, sp
    f104:	str	x0, [sp, #24]
    f108:	ldr	x0, [sp, #24]
    f10c:	bl	f0c8 <ERR_getErrorCode>
    f110:	bl	b6c <ERR_getErrorString>
    f114:	ldp	x29, x30, [sp], #32
    f118:	ret

000000000000f11c <ZSTD_copy8>:
    f11c:	stp	x29, x30, [sp, #-32]!
    f120:	mov	x29, sp
    f124:	str	x0, [sp, #24]
    f128:	str	x1, [sp, #16]
    f12c:	mov	x2, #0x8                   	// #8
    f130:	ldr	x1, [sp, #16]
    f134:	ldr	x0, [sp, #24]
    f138:	bl	f018 <grub_memcpy>
    f13c:	nop
    f140:	ldp	x29, x30, [sp], #32
    f144:	ret

000000000000f148 <ZSTD_versionNumber>:
    f148:	mov	w0, #0x2842                	// #10306
    f14c:	ret

000000000000f150 <ZSTD_versionString>:
    f150:	adrp	x0, 0 <grub_memcpy>
    f154:	add	x0, x0, #0x0
    f158:	ldr	x0, [x0]
    f15c:	ret
	...

000000000000f168 <ZSTD_isError>:
    f168:	stp	x29, x30, [sp, #-32]!
    f16c:	mov	x29, sp
    f170:	str	x0, [sp, #24]
    f174:	ldr	x0, [sp, #24]
    f178:	bl	f0a8 <ERR_isError>
    f17c:	ldp	x29, x30, [sp], #32
    f180:	ret

000000000000f184 <ZSTD_getErrorName>:
    f184:	stp	x29, x30, [sp, #-32]!
    f188:	mov	x29, sp
    f18c:	str	x0, [sp, #24]
    f190:	ldr	x0, [sp, #24]
    f194:	bl	f0fc <ERR_getErrorName>
    f198:	ldp	x29, x30, [sp], #32
    f19c:	ret

000000000000f1a0 <ZSTD_getErrorCode>:
    f1a0:	stp	x29, x30, [sp, #-32]!
    f1a4:	mov	x29, sp
    f1a8:	str	x0, [sp, #24]
    f1ac:	ldr	x0, [sp, #24]
    f1b0:	bl	f0c8 <ERR_getErrorCode>
    f1b4:	ldp	x29, x30, [sp], #32
    f1b8:	ret

000000000000f1bc <ZSTD_getErrorString>:
    f1bc:	stp	x29, x30, [sp, #-32]!
    f1c0:	mov	x29, sp
    f1c4:	str	w0, [sp, #28]
    f1c8:	ldr	w0, [sp, #28]
    f1cc:	bl	b6c <ERR_getErrorString>
    f1d0:	ldp	x29, x30, [sp], #32
    f1d4:	ret

000000000000f1d8 <ZSTD_malloc>:
    f1d8:	stp	x29, x30, [sp, #-48]!
    f1dc:	mov	x29, sp
    f1e0:	str	x19, [sp, #16]
    f1e4:	str	x0, [sp, #40]
    f1e8:	mov	x19, x1
    f1ec:	ldr	x0, [x19]
    f1f0:	cmp	x0, #0x0
    f1f4:	b.eq	f20c <ZSTD_malloc+0x34>  // b.none
    f1f8:	ldr	x2, [x19]
    f1fc:	ldr	x0, [x19, #16]
    f200:	ldr	x1, [sp, #40]
    f204:	blr	x2
    f208:	b	f214 <ZSTD_malloc+0x3c>
    f20c:	ldr	x0, [sp, #40]
    f210:	bl	f064 <malloc>
    f214:	ldr	x19, [sp, #16]
    f218:	ldp	x29, x30, [sp], #48
    f21c:	ret

000000000000f220 <ZSTD_calloc>:
    f220:	stp	x29, x30, [sp, #-64]!
    f224:	mov	x29, sp
    f228:	str	x19, [sp, #16]
    f22c:	str	x0, [sp, #40]
    f230:	mov	x19, x1
    f234:	ldr	x0, [x19]
    f238:	cmp	x0, #0x0
    f23c:	b.eq	f26c <ZSTD_calloc+0x4c>  // b.none
    f240:	ldr	x2, [x19]
    f244:	ldr	x0, [x19, #16]
    f248:	ldr	x1, [sp, #40]
    f24c:	blr	x2
    f250:	str	x0, [sp, #56]
    f254:	ldr	x2, [sp, #40]
    f258:	mov	w1, #0x0                   	// #0
    f25c:	ldr	x0, [sp, #56]
    f260:	bl	0 <grub_memset>
    f264:	ldr	x0, [sp, #56]
    f268:	b	f278 <ZSTD_calloc+0x58>
    f26c:	ldr	x1, [sp, #40]
    f270:	mov	x0, #0x1                   	// #1
    f274:	bl	f080 <calloc>
    f278:	ldr	x19, [sp, #16]
    f27c:	ldp	x29, x30, [sp], #64
    f280:	ret

000000000000f284 <ZSTD_free>:
    f284:	stp	x29, x30, [sp, #-48]!
    f288:	mov	x29, sp
    f28c:	str	x19, [sp, #16]
    f290:	str	x0, [sp, #40]
    f294:	mov	x19, x1
    f298:	ldr	x0, [sp, #40]
    f29c:	cmp	x0, #0x0
    f2a0:	b.eq	f2cc <ZSTD_free+0x48>  // b.none
    f2a4:	ldr	x0, [x19, #8]
    f2a8:	cmp	x0, #0x0
    f2ac:	b.eq	f2c4 <ZSTD_free+0x40>  // b.none
    f2b0:	ldr	x2, [x19, #8]
    f2b4:	ldr	x0, [x19, #16]
    f2b8:	ldr	x1, [sp, #40]
    f2bc:	blr	x2
    f2c0:	b	f2cc <ZSTD_free+0x48>
    f2c4:	ldr	x0, [sp, #40]
    f2c8:	bl	f044 <free>
    f2cc:	nop
    f2d0:	ldr	x19, [sp, #16]
    f2d4:	ldp	x29, x30, [sp], #48
    f2d8:	ret
    f2dc:	nop

000000000000f2e0 <grub_memcpy>:
    f2e0:	stp	x29, x30, [sp, #-48]!
    f2e4:	mov	x29, sp
    f2e8:	str	x0, [sp, #40]
    f2ec:	str	x1, [sp, #32]
    f2f0:	str	x2, [sp, #24]
    f2f4:	ldr	x2, [sp, #24]
    f2f8:	ldr	x1, [sp, #32]
    f2fc:	ldr	x0, [sp, #40]
    f300:	bl	0 <grub_memmove>
    f304:	ldp	x29, x30, [sp], #48
    f308:	ret

000000000000f30c <MEM_32bits>:
    f30c:	mov	w0, #0x0                   	// #0
    f310:	ret

000000000000f314 <MEM_64bits>:
    f314:	mov	w0, #0x1                   	// #1
    f318:	ret

000000000000f31c <MEM_isLittleEndian>:
    f31c:	sub	sp, sp, #0x10
    f320:	mov	w0, #0x1                   	// #1
    f324:	str	w0, [sp, #8]
    f328:	ldrb	w0, [sp, #8]
    f32c:	add	sp, sp, #0x10
    f330:	ret

000000000000f334 <MEM_read16>:
    f334:	sub	sp, sp, #0x10
    f338:	str	x0, [sp, #8]
    f33c:	ldr	x0, [sp, #8]
    f340:	ldrh	w0, [x0]
    f344:	add	sp, sp, #0x10
    f348:	ret

000000000000f34c <MEM_read32>:
    f34c:	sub	sp, sp, #0x10
    f350:	str	x0, [sp, #8]
    f354:	ldr	x0, [sp, #8]
    f358:	ldr	w0, [x0]
    f35c:	add	sp, sp, #0x10
    f360:	ret

000000000000f364 <MEM_read64>:
    f364:	sub	sp, sp, #0x10
    f368:	str	x0, [sp, #8]
    f36c:	ldr	x0, [sp, #8]
    f370:	ldr	x0, [x0]
    f374:	add	sp, sp, #0x10
    f378:	ret

000000000000f37c <MEM_swap32>:
    f37c:	sub	sp, sp, #0x10
    f380:	str	w0, [sp, #12]
    f384:	ldr	w0, [sp, #12]
    f388:	rev	w0, w0
    f38c:	add	sp, sp, #0x10
    f390:	ret

000000000000f394 <MEM_swap64>:
    f394:	sub	sp, sp, #0x10
    f398:	str	x0, [sp, #8]
    f39c:	ldr	x0, [sp, #8]
    f3a0:	rev	x0, x0
    f3a4:	add	sp, sp, #0x10
    f3a8:	ret

000000000000f3ac <MEM_readLE16>:
    f3ac:	stp	x29, x30, [sp, #-48]!
    f3b0:	mov	x29, sp
    f3b4:	str	x0, [sp, #24]
    f3b8:	bl	f31c <MEM_isLittleEndian>
    f3bc:	cmp	w0, #0x0
    f3c0:	b.eq	f3d4 <MEM_readLE16+0x28>  // b.none
    f3c4:	ldr	x0, [sp, #24]
    f3c8:	bl	f334 <MEM_read16>
    f3cc:	and	w0, w0, #0xffff
    f3d0:	b	f408 <MEM_readLE16+0x5c>
    f3d4:	ldr	x0, [sp, #24]
    f3d8:	str	x0, [sp, #40]
    f3dc:	ldr	x0, [sp, #40]
    f3e0:	ldrb	w0, [x0]
    f3e4:	and	w1, w0, #0xffff
    f3e8:	ldr	x0, [sp, #40]
    f3ec:	add	x0, x0, #0x1
    f3f0:	ldrb	w0, [x0]
    f3f4:	and	w0, w0, #0xffff
    f3f8:	ubfiz	w0, w0, #8, #8
    f3fc:	and	w0, w0, #0xffff
    f400:	add	w0, w1, w0
    f404:	and	w0, w0, #0xffff
    f408:	ldp	x29, x30, [sp], #48
    f40c:	ret

000000000000f410 <MEM_readLE24>:
    f410:	stp	x29, x30, [sp, #-32]!
    f414:	mov	x29, sp
    f418:	str	x0, [sp, #24]
    f41c:	ldr	x0, [sp, #24]
    f420:	bl	f3ac <MEM_readLE16>
    f424:	and	w0, w0, #0xffff
    f428:	mov	w1, w0
    f42c:	ldr	x0, [sp, #24]
    f430:	add	x0, x0, #0x2
    f434:	ldrb	w0, [x0]
    f438:	lsl	w0, w0, #16
    f43c:	add	w0, w1, w0
    f440:	ldp	x29, x30, [sp], #32
    f444:	ret

000000000000f448 <MEM_readLE32>:
    f448:	stp	x29, x30, [sp, #-32]!
    f44c:	mov	x29, sp
    f450:	str	x0, [sp, #24]
    f454:	bl	f31c <MEM_isLittleEndian>
    f458:	cmp	w0, #0x0
    f45c:	b.eq	f46c <MEM_readLE32+0x24>  // b.none
    f460:	ldr	x0, [sp, #24]
    f464:	bl	f34c <MEM_read32>
    f468:	b	f478 <MEM_readLE32+0x30>
    f46c:	ldr	x0, [sp, #24]
    f470:	bl	f34c <MEM_read32>
    f474:	bl	f37c <MEM_swap32>
    f478:	ldp	x29, x30, [sp], #32
    f47c:	ret

000000000000f480 <MEM_readLE64>:
    f480:	stp	x29, x30, [sp, #-32]!
    f484:	mov	x29, sp
    f488:	str	x0, [sp, #24]
    f48c:	bl	f31c <MEM_isLittleEndian>
    f490:	cmp	w0, #0x0
    f494:	b.eq	f4a4 <MEM_readLE64+0x24>  // b.none
    f498:	ldr	x0, [sp, #24]
    f49c:	bl	f364 <MEM_read64>
    f4a0:	b	f4b0 <MEM_readLE64+0x30>
    f4a4:	ldr	x0, [sp, #24]
    f4a8:	bl	f364 <MEM_read64>
    f4ac:	bl	f394 <MEM_swap64>
    f4b0:	ldp	x29, x30, [sp], #32
    f4b4:	ret

000000000000f4b8 <MEM_readLEST>:
    f4b8:	stp	x29, x30, [sp, #-32]!
    f4bc:	mov	x29, sp
    f4c0:	str	x0, [sp, #24]
    f4c4:	bl	f30c <MEM_32bits>
    f4c8:	cmp	w0, #0x0
    f4cc:	b.eq	f4e0 <MEM_readLEST+0x28>  // b.none
    f4d0:	ldr	x0, [sp, #24]
    f4d4:	bl	f448 <MEM_readLE32>
    f4d8:	mov	w0, w0
    f4dc:	b	f4ec <MEM_readLEST+0x34>
    f4e0:	ldr	x0, [sp, #24]
    f4e4:	bl	f480 <MEM_readLE64>
    f4e8:	nop
    f4ec:	ldp	x29, x30, [sp], #32
    f4f0:	ret

000000000000f4f4 <ZSTD_cpuid>:
    f4f4:	sub	sp, sp, #0x20
    f4f8:	str	wzr, [sp, #28]
    f4fc:	str	wzr, [sp, #24]
    f500:	str	wzr, [sp, #20]
    f504:	str	wzr, [sp, #16]
    f508:	ldr	w0, [sp, #28]
    f50c:	str	w0, [sp]
    f510:	ldr	w0, [sp, #24]
    f514:	str	w0, [sp, #4]
    f518:	ldr	w0, [sp, #20]
    f51c:	str	w0, [sp, #8]
    f520:	ldr	w0, [sp, #16]
    f524:	str	w0, [sp, #12]
    f528:	ldp	x0, x1, [sp]
    f52c:	add	sp, sp, #0x20
    f530:	ret

000000000000f534 <ZSTD_cpuid_bmi2>:
    f534:	sub	sp, sp, #0x10
    f538:	stp	x0, x1, [sp]
    f53c:	ldr	w0, [sp, #8]
    f540:	and	w0, w0, #0x100
    f544:	cmp	w0, #0x0
    f548:	cset	w0, ne  // ne = any
    f54c:	and	w0, w0, #0xff
    f550:	add	sp, sp, #0x10
    f554:	ret

000000000000f558 <ERR_isError>:
    f558:	sub	sp, sp, #0x10
    f55c:	str	x0, [sp, #8]
    f560:	ldr	x0, [sp, #8]
    f564:	cmn	x0, #0x78
    f568:	cset	w0, hi  // hi = pmore
    f56c:	and	w0, w0, #0xff
    f570:	add	sp, sp, #0x10
    f574:	ret

000000000000f578 <ERR_getErrorCode>:
    f578:	stp	x29, x30, [sp, #-32]!
    f57c:	mov	x29, sp
    f580:	str	x0, [sp, #24]
    f584:	ldr	x0, [sp, #24]
    f588:	bl	f558 <ERR_isError>
    f58c:	cmp	w0, #0x0
    f590:	b.ne	f59c <ERR_getErrorCode+0x24>  // b.any
    f594:	mov	w0, #0x0                   	// #0
    f598:	b	f5a4 <ERR_getErrorCode+0x2c>
    f59c:	ldr	x0, [sp, #24]
    f5a0:	neg	w0, w0
    f5a4:	ldp	x29, x30, [sp], #32
    f5a8:	ret

000000000000f5ac <ERR_getErrorName>:
    f5ac:	stp	x29, x30, [sp, #-32]!
    f5b0:	mov	x29, sp
    f5b4:	str	x0, [sp, #24]
    f5b8:	ldr	x0, [sp, #24]
    f5bc:	bl	f578 <ERR_getErrorCode>
    f5c0:	bl	b6c <ERR_getErrorString>
    f5c4:	ldp	x29, x30, [sp], #32
    f5c8:	ret

000000000000f5cc <BIT_highbit32>:
    f5cc:	sub	sp, sp, #0x10
    f5d0:	str	w0, [sp, #12]
    f5d4:	ldr	w0, [sp, #12]
    f5d8:	clz	w0, w0
    f5dc:	mov	w1, #0x1f                  	// #31
    f5e0:	sub	w0, w1, w0
    f5e4:	add	sp, sp, #0x10
    f5e8:	ret

000000000000f5ec <BIT_initDStream>:
    f5ec:	stp	x29, x30, [sp, #-64]!
    f5f0:	mov	x29, sp
    f5f4:	str	x0, [sp, #40]
    f5f8:	str	x1, [sp, #32]
    f5fc:	str	x2, [sp, #24]
    f600:	ldr	x0, [sp, #24]
    f604:	cmp	x0, #0x0
    f608:	b.ne	f624 <BIT_initDStream+0x38>  // b.any
    f60c:	mov	x2, #0x28                  	// #40
    f610:	mov	w1, #0x0                   	// #0
    f614:	ldr	x0, [sp, #40]
    f618:	bl	0 <grub_memset>
    f61c:	mov	x0, #0xffffffffffffffb8    	// #-72
    f620:	b	f8f8 <BIT_initDStream+0x30c>
    f624:	ldr	x0, [sp, #40]
    f628:	ldr	x1, [sp, #32]
    f62c:	str	x1, [x0, #24]
    f630:	ldr	x0, [sp, #40]
    f634:	ldr	x0, [x0, #24]
    f638:	add	x1, x0, #0x8
    f63c:	ldr	x0, [sp, #40]
    f640:	str	x1, [x0, #32]
    f644:	ldr	x0, [sp, #24]
    f648:	cmp	x0, #0x7
    f64c:	b.ls	f6dc <BIT_initDStream+0xf0>  // b.plast
    f650:	ldr	x0, [sp, #24]
    f654:	sub	x0, x0, #0x8
    f658:	ldr	x1, [sp, #32]
    f65c:	add	x1, x1, x0
    f660:	ldr	x0, [sp, #40]
    f664:	str	x1, [x0, #16]
    f668:	ldr	x0, [sp, #40]
    f66c:	ldr	x0, [x0, #16]
    f670:	bl	f4b8 <MEM_readLEST>
    f674:	mov	x1, x0
    f678:	ldr	x0, [sp, #40]
    f67c:	str	x1, [x0]
    f680:	ldr	x0, [sp, #24]
    f684:	sub	x0, x0, #0x1
    f688:	ldr	x1, [sp, #32]
    f68c:	add	x0, x1, x0
    f690:	ldrb	w0, [x0]
    f694:	strb	w0, [sp, #62]
    f698:	ldrb	w0, [sp, #62]
    f69c:	cmp	w0, #0x0
    f6a0:	b.eq	f6bc <BIT_initDStream+0xd0>  // b.none
    f6a4:	ldrb	w0, [sp, #62]
    f6a8:	bl	f5cc <BIT_highbit32>
    f6ac:	mov	w1, w0
    f6b0:	mov	w0, #0x8                   	// #8
    f6b4:	sub	w0, w0, w1
    f6b8:	b	f6c0 <BIT_initDStream+0xd4>
    f6bc:	mov	w0, #0x0                   	// #0
    f6c0:	ldr	x1, [sp, #40]
    f6c4:	str	w0, [x1, #8]
    f6c8:	ldrb	w0, [sp, #62]
    f6cc:	cmp	w0, #0x0
    f6d0:	b.ne	f8f4 <BIT_initDStream+0x308>  // b.any
    f6d4:	mov	x0, #0xffffffffffffffff    	// #-1
    f6d8:	b	f8f8 <BIT_initDStream+0x30c>
    f6dc:	ldr	x0, [sp, #40]
    f6e0:	ldr	x1, [x0, #24]
    f6e4:	ldr	x0, [sp, #40]
    f6e8:	str	x1, [x0, #16]
    f6ec:	ldr	x0, [sp, #40]
    f6f0:	ldr	x0, [x0, #24]
    f6f4:	ldrb	w0, [x0]
    f6f8:	and	x1, x0, #0xff
    f6fc:	ldr	x0, [sp, #40]
    f700:	str	x1, [x0]
    f704:	ldr	x0, [sp, #24]
    f708:	cmp	x0, #0x7
    f70c:	b.eq	f780 <BIT_initDStream+0x194>  // b.none
    f710:	ldr	x0, [sp, #24]
    f714:	cmp	x0, #0x7
    f718:	b.hi	f870 <BIT_initDStream+0x284>  // b.pmore
    f71c:	ldr	x0, [sp, #24]
    f720:	cmp	x0, #0x6
    f724:	b.eq	f7a8 <BIT_initDStream+0x1bc>  // b.none
    f728:	ldr	x0, [sp, #24]
    f72c:	cmp	x0, #0x6
    f730:	b.hi	f870 <BIT_initDStream+0x284>  // b.pmore
    f734:	ldr	x0, [sp, #24]
    f738:	cmp	x0, #0x5
    f73c:	b.eq	f7d0 <BIT_initDStream+0x1e4>  // b.none
    f740:	ldr	x0, [sp, #24]
    f744:	cmp	x0, #0x5
    f748:	b.hi	f870 <BIT_initDStream+0x284>  // b.pmore
    f74c:	ldr	x0, [sp, #24]
    f750:	cmp	x0, #0x4
    f754:	b.eq	f7f8 <BIT_initDStream+0x20c>  // b.none
    f758:	ldr	x0, [sp, #24]
    f75c:	cmp	x0, #0x4
    f760:	b.hi	f870 <BIT_initDStream+0x284>  // b.pmore
    f764:	ldr	x0, [sp, #24]
    f768:	cmp	x0, #0x2
    f76c:	b.eq	f848 <BIT_initDStream+0x25c>  // b.none
    f770:	ldr	x0, [sp, #24]
    f774:	cmp	x0, #0x3
    f778:	b.eq	f820 <BIT_initDStream+0x234>  // b.none
    f77c:	b	f870 <BIT_initDStream+0x284>
    f780:	ldr	x0, [sp, #40]
    f784:	ldr	x1, [x0]
    f788:	ldr	x0, [sp, #32]
    f78c:	add	x0, x0, #0x6
    f790:	ldrb	w0, [x0]
    f794:	and	x0, x0, #0xff
    f798:	lsl	x0, x0, #48
    f79c:	add	x1, x1, x0
    f7a0:	ldr	x0, [sp, #40]
    f7a4:	str	x1, [x0]
    f7a8:	ldr	x0, [sp, #40]
    f7ac:	ldr	x1, [x0]
    f7b0:	ldr	x0, [sp, #32]
    f7b4:	add	x0, x0, #0x5
    f7b8:	ldrb	w0, [x0]
    f7bc:	and	x0, x0, #0xff
    f7c0:	lsl	x0, x0, #40
    f7c4:	add	x1, x1, x0
    f7c8:	ldr	x0, [sp, #40]
    f7cc:	str	x1, [x0]
    f7d0:	ldr	x0, [sp, #40]
    f7d4:	ldr	x1, [x0]
    f7d8:	ldr	x0, [sp, #32]
    f7dc:	add	x0, x0, #0x4
    f7e0:	ldrb	w0, [x0]
    f7e4:	and	x0, x0, #0xff
    f7e8:	lsl	x0, x0, #32
    f7ec:	add	x1, x1, x0
    f7f0:	ldr	x0, [sp, #40]
    f7f4:	str	x1, [x0]
    f7f8:	ldr	x0, [sp, #40]
    f7fc:	ldr	x1, [x0]
    f800:	ldr	x0, [sp, #32]
    f804:	add	x0, x0, #0x3
    f808:	ldrb	w0, [x0]
    f80c:	and	x0, x0, #0xff
    f810:	lsl	x0, x0, #24
    f814:	add	x1, x1, x0
    f818:	ldr	x0, [sp, #40]
    f81c:	str	x1, [x0]
    f820:	ldr	x0, [sp, #40]
    f824:	ldr	x1, [x0]
    f828:	ldr	x0, [sp, #32]
    f82c:	add	x0, x0, #0x2
    f830:	ldrb	w0, [x0]
    f834:	and	x0, x0, #0xff
    f838:	lsl	x0, x0, #16
    f83c:	add	x1, x1, x0
    f840:	ldr	x0, [sp, #40]
    f844:	str	x1, [x0]
    f848:	ldr	x0, [sp, #40]
    f84c:	ldr	x1, [x0]
    f850:	ldr	x0, [sp, #32]
    f854:	add	x0, x0, #0x1
    f858:	ldrb	w0, [x0]
    f85c:	and	x0, x0, #0xff
    f860:	lsl	x0, x0, #8
    f864:	add	x1, x1, x0
    f868:	ldr	x0, [sp, #40]
    f86c:	str	x1, [x0]
    f870:	ldr	x0, [sp, #24]
    f874:	sub	x0, x0, #0x1
    f878:	ldr	x1, [sp, #32]
    f87c:	add	x0, x1, x0
    f880:	ldrb	w0, [x0]
    f884:	strb	w0, [sp, #63]
    f888:	ldrb	w0, [sp, #63]
    f88c:	cmp	w0, #0x0
    f890:	b.eq	f8ac <BIT_initDStream+0x2c0>  // b.none
    f894:	ldrb	w0, [sp, #63]
    f898:	bl	f5cc <BIT_highbit32>
    f89c:	mov	w1, w0
    f8a0:	mov	w0, #0x8                   	// #8
    f8a4:	sub	w0, w0, w1
    f8a8:	b	f8b0 <BIT_initDStream+0x2c4>
    f8ac:	mov	w0, #0x0                   	// #0
    f8b0:	ldr	x1, [sp, #40]
    f8b4:	str	w0, [x1, #8]
    f8b8:	ldrb	w0, [sp, #63]
    f8bc:	cmp	w0, #0x0
    f8c0:	b.ne	f8cc <BIT_initDStream+0x2e0>  // b.any
    f8c4:	mov	x0, #0xffffffffffffffec    	// #-20
    f8c8:	b	f8f8 <BIT_initDStream+0x30c>
    f8cc:	ldr	x0, [sp, #40]
    f8d0:	ldr	w1, [x0, #8]
    f8d4:	ldr	x0, [sp, #24]
    f8d8:	mov	w2, w0
    f8dc:	mov	w0, #0x8                   	// #8
    f8e0:	sub	w0, w0, w2
    f8e4:	lsl	w0, w0, #3
    f8e8:	add	w1, w1, w0
    f8ec:	ldr	x0, [sp, #40]
    f8f0:	str	w1, [x0, #8]
    f8f4:	ldr	x0, [sp, #24]
    f8f8:	ldp	x29, x30, [sp], #64
    f8fc:	ret

000000000000f900 <BIT_lookBits>:
    f900:	sub	sp, sp, #0x20
    f904:	str	x0, [sp, #8]
    f908:	str	w1, [sp, #4]
    f90c:	mov	w0, #0x3f                  	// #63
    f910:	str	w0, [sp, #28]
    f914:	ldr	x0, [sp, #8]
    f918:	ldr	x1, [x0]
    f91c:	ldr	x0, [sp, #8]
    f920:	ldr	w2, [x0, #8]
    f924:	ldr	w0, [sp, #28]
    f928:	and	w0, w2, w0
    f92c:	lsl	x0, x1, x0
    f930:	lsr	x1, x0, #1
    f934:	ldr	w2, [sp, #28]
    f938:	ldr	w0, [sp, #4]
    f93c:	sub	w2, w2, w0
    f940:	ldr	w0, [sp, #28]
    f944:	and	w0, w2, w0
    f948:	lsr	x0, x1, x0
    f94c:	add	sp, sp, #0x20
    f950:	ret

000000000000f954 <BIT_lookBitsFast>:
    f954:	sub	sp, sp, #0x20
    f958:	str	x0, [sp, #8]
    f95c:	str	w1, [sp, #4]
    f960:	mov	w0, #0x3f                  	// #63
    f964:	str	w0, [sp, #28]
    f968:	ldr	x0, [sp, #8]
    f96c:	ldr	x1, [x0]
    f970:	ldr	x0, [sp, #8]
    f974:	ldr	w2, [x0, #8]
    f978:	ldr	w0, [sp, #28]
    f97c:	and	w0, w2, w0
    f980:	lsl	x1, x1, x0
    f984:	ldr	w2, [sp, #28]
    f988:	ldr	w0, [sp, #4]
    f98c:	sub	w0, w2, w0
    f990:	add	w2, w0, #0x1
    f994:	ldr	w0, [sp, #28]
    f998:	and	w0, w2, w0
    f99c:	lsr	x0, x1, x0
    f9a0:	add	sp, sp, #0x20
    f9a4:	ret

000000000000f9a8 <BIT_skipBits>:
    f9a8:	sub	sp, sp, #0x10
    f9ac:	str	x0, [sp, #8]
    f9b0:	str	w1, [sp, #4]
    f9b4:	ldr	x0, [sp, #8]
    f9b8:	ldr	w1, [x0, #8]
    f9bc:	ldr	w0, [sp, #4]
    f9c0:	add	w1, w1, w0
    f9c4:	ldr	x0, [sp, #8]
    f9c8:	str	w1, [x0, #8]
    f9cc:	nop
    f9d0:	add	sp, sp, #0x10
    f9d4:	ret

000000000000f9d8 <BIT_readBits>:
    f9d8:	stp	x29, x30, [sp, #-48]!
    f9dc:	mov	x29, sp
    f9e0:	str	x0, [sp, #24]
    f9e4:	str	w1, [sp, #20]
    f9e8:	ldr	w1, [sp, #20]
    f9ec:	ldr	x0, [sp, #24]
    f9f0:	bl	f900 <BIT_lookBits>
    f9f4:	str	x0, [sp, #40]
    f9f8:	ldr	w1, [sp, #20]
    f9fc:	ldr	x0, [sp, #24]
    fa00:	bl	f9a8 <BIT_skipBits>
    fa04:	ldr	x0, [sp, #40]
    fa08:	ldp	x29, x30, [sp], #48
    fa0c:	ret

000000000000fa10 <BIT_readBitsFast>:
    fa10:	stp	x29, x30, [sp, #-48]!
    fa14:	mov	x29, sp
    fa18:	str	x0, [sp, #24]
    fa1c:	str	w1, [sp, #20]
    fa20:	ldr	w1, [sp, #20]
    fa24:	ldr	x0, [sp, #24]
    fa28:	bl	f954 <BIT_lookBitsFast>
    fa2c:	str	x0, [sp, #40]
    fa30:	ldr	w1, [sp, #20]
    fa34:	ldr	x0, [sp, #24]
    fa38:	bl	f9a8 <BIT_skipBits>
    fa3c:	ldr	x0, [sp, #40]
    fa40:	ldp	x29, x30, [sp], #48
    fa44:	ret

000000000000fa48 <BIT_reloadDStream>:
    fa48:	stp	x29, x30, [sp, #-48]!
    fa4c:	mov	x29, sp
    fa50:	str	x0, [sp, #24]
    fa54:	ldr	x0, [sp, #24]
    fa58:	ldr	w0, [x0, #8]
    fa5c:	cmp	w0, #0x40
    fa60:	b.ls	fa6c <BIT_reloadDStream+0x24>  // b.plast
    fa64:	mov	w0, #0x3                   	// #3
    fa68:	b	fbc4 <BIT_reloadDStream+0x17c>
    fa6c:	ldr	x0, [sp, #24]
    fa70:	ldr	x1, [x0, #16]
    fa74:	ldr	x0, [sp, #24]
    fa78:	ldr	x0, [x0, #32]
    fa7c:	cmp	x1, x0
    fa80:	b.cc	fae0 <BIT_reloadDStream+0x98>  // b.lo, b.ul, b.last
    fa84:	ldr	x0, [sp, #24]
    fa88:	ldr	x1, [x0, #16]
    fa8c:	ldr	x0, [sp, #24]
    fa90:	ldr	w0, [x0, #8]
    fa94:	lsr	w0, w0, #3
    fa98:	mov	w0, w0
    fa9c:	neg	x0, x0
    faa0:	add	x1, x1, x0
    faa4:	ldr	x0, [sp, #24]
    faa8:	str	x1, [x0, #16]
    faac:	ldr	x0, [sp, #24]
    fab0:	ldr	w0, [x0, #8]
    fab4:	and	w1, w0, #0x7
    fab8:	ldr	x0, [sp, #24]
    fabc:	str	w1, [x0, #8]
    fac0:	ldr	x0, [sp, #24]
    fac4:	ldr	x0, [x0, #16]
    fac8:	bl	f4b8 <MEM_readLEST>
    facc:	mov	x1, x0
    fad0:	ldr	x0, [sp, #24]
    fad4:	str	x1, [x0]
    fad8:	mov	w0, #0x0                   	// #0
    fadc:	b	fbc4 <BIT_reloadDStream+0x17c>
    fae0:	ldr	x0, [sp, #24]
    fae4:	ldr	x1, [x0, #16]
    fae8:	ldr	x0, [sp, #24]
    faec:	ldr	x0, [x0, #24]
    faf0:	cmp	x1, x0
    faf4:	b.ne	fb18 <BIT_reloadDStream+0xd0>  // b.any
    faf8:	ldr	x0, [sp, #24]
    fafc:	ldr	w0, [x0, #8]
    fb00:	cmp	w0, #0x3f
    fb04:	b.hi	fb10 <BIT_reloadDStream+0xc8>  // b.pmore
    fb08:	mov	w0, #0x1                   	// #1
    fb0c:	b	fbc4 <BIT_reloadDStream+0x17c>
    fb10:	mov	w0, #0x2                   	// #2
    fb14:	b	fbc4 <BIT_reloadDStream+0x17c>
    fb18:	ldr	x0, [sp, #24]
    fb1c:	ldr	w0, [x0, #8]
    fb20:	lsr	w0, w0, #3
    fb24:	str	w0, [sp, #44]
    fb28:	str	wzr, [sp, #40]
    fb2c:	ldr	x0, [sp, #24]
    fb30:	ldr	x1, [x0, #16]
    fb34:	ldr	w0, [sp, #44]
    fb38:	neg	x0, x0
    fb3c:	add	x1, x1, x0
    fb40:	ldr	x0, [sp, #24]
    fb44:	ldr	x0, [x0, #24]
    fb48:	cmp	x1, x0
    fb4c:	b.cs	fb70 <BIT_reloadDStream+0x128>  // b.hs, b.nlast
    fb50:	ldr	x0, [sp, #24]
    fb54:	ldr	x1, [x0, #16]
    fb58:	ldr	x0, [sp, #24]
    fb5c:	ldr	x0, [x0, #24]
    fb60:	sub	x0, x1, x0
    fb64:	str	w0, [sp, #44]
    fb68:	mov	w0, #0x1                   	// #1
    fb6c:	str	w0, [sp, #40]
    fb70:	ldr	x0, [sp, #24]
    fb74:	ldr	x1, [x0, #16]
    fb78:	ldr	w0, [sp, #44]
    fb7c:	neg	x0, x0
    fb80:	add	x1, x1, x0
    fb84:	ldr	x0, [sp, #24]
    fb88:	str	x1, [x0, #16]
    fb8c:	ldr	x0, [sp, #24]
    fb90:	ldr	w1, [x0, #8]
    fb94:	ldr	w0, [sp, #44]
    fb98:	lsl	w0, w0, #3
    fb9c:	sub	w1, w1, w0
    fba0:	ldr	x0, [sp, #24]
    fba4:	str	w1, [x0, #8]
    fba8:	ldr	x0, [sp, #24]
    fbac:	ldr	x0, [x0, #16]
    fbb0:	bl	f4b8 <MEM_readLEST>
    fbb4:	mov	x1, x0
    fbb8:	ldr	x0, [sp, #24]
    fbbc:	str	x1, [x0]
    fbc0:	ldr	w0, [sp, #40]
    fbc4:	ldp	x29, x30, [sp], #48
    fbc8:	ret

000000000000fbcc <ZSTD_copy8>:
    fbcc:	stp	x29, x30, [sp, #-32]!
    fbd0:	mov	x29, sp
    fbd4:	str	x0, [sp, #24]
    fbd8:	str	x1, [sp, #16]
    fbdc:	mov	x2, #0x8                   	// #8
    fbe0:	ldr	x1, [sp, #16]
    fbe4:	ldr	x0, [sp, #24]
    fbe8:	bl	f2e0 <grub_memcpy>
    fbec:	nop
    fbf0:	ldp	x29, x30, [sp], #32
    fbf4:	ret

000000000000fbf8 <ZSTD_wildcopy>:
    fbf8:	stp	x29, x30, [sp, #-80]!
    fbfc:	mov	x29, sp
    fc00:	str	x0, [sp, #40]
    fc04:	str	x1, [sp, #32]
    fc08:	str	x2, [sp, #24]
    fc0c:	ldr	x0, [sp, #32]
    fc10:	str	x0, [sp, #72]
    fc14:	ldr	x0, [sp, #40]
    fc18:	str	x0, [sp, #64]
    fc1c:	ldr	x0, [sp, #24]
    fc20:	ldr	x1, [sp, #64]
    fc24:	add	x0, x1, x0
    fc28:	str	x0, [sp, #56]
    fc2c:	ldr	x1, [sp, #72]
    fc30:	ldr	x0, [sp, #64]
    fc34:	bl	fbcc <ZSTD_copy8>
    fc38:	ldr	x0, [sp, #64]
    fc3c:	add	x0, x0, #0x8
    fc40:	str	x0, [sp, #64]
    fc44:	ldr	x0, [sp, #72]
    fc48:	add	x0, x0, #0x8
    fc4c:	str	x0, [sp, #72]
    fc50:	ldr	x1, [sp, #64]
    fc54:	ldr	x0, [sp, #56]
    fc58:	cmp	x1, x0
    fc5c:	b.cc	fc2c <ZSTD_wildcopy+0x34>  // b.lo, b.ul, b.last
    fc60:	nop
    fc64:	nop
    fc68:	ldp	x29, x30, [sp], #80
    fc6c:	ret

000000000000fc70 <ZSTD_copy4>:
    fc70:	stp	x29, x30, [sp, #-32]!
    fc74:	mov	x29, sp
    fc78:	str	x0, [sp, #24]
    fc7c:	str	x1, [sp, #16]
    fc80:	mov	x2, #0x4                   	// #4
    fc84:	ldr	x1, [sp, #16]
    fc88:	ldr	x0, [sp, #24]
    fc8c:	bl	f2e0 <grub_memcpy>
    fc90:	nop
    fc94:	ldp	x29, x30, [sp], #32
    fc98:	ret

000000000000fc9c <ZSTD_sizeof_DCtx>:
    fc9c:	stp	x29, x30, [sp, #-32]!
    fca0:	mov	x29, sp
    fca4:	str	x0, [sp, #24]
    fca8:	ldr	x0, [sp, #24]
    fcac:	cmp	x0, #0x0
    fcb0:	b.ne	fcbc <ZSTD_sizeof_DCtx+0x20>  // b.any
    fcb4:	mov	x0, #0x0                   	// #0
    fcb8:	b	fcf0 <ZSTD_sizeof_DCtx+0x54>
    fcbc:	ldr	x0, [sp, #24]
    fcc0:	ldr	x0, [x0, #29016]
    fcc4:	bl	167d0 <ZSTD_sizeof_DDict>
    fcc8:	mov	x1, x0
    fccc:	ldr	x0, [sp, #24]
    fcd0:	ldr	x0, [x0, #29056]
    fcd4:	add	x1, x1, x0
    fcd8:	ldr	x0, [sp, #24]
    fcdc:	ldr	x0, [x0, #29088]
    fce0:	add	x1, x1, x0
    fce4:	mov	x0, #0x71f8                	// #29176
    fce8:	movk	x0, #0x2, lsl #16
    fcec:	add	x0, x1, x0
    fcf0:	ldp	x29, x30, [sp], #32
    fcf4:	ret

000000000000fcf8 <ZSTD_estimateDCtxSize>:
    fcf8:	mov	x0, #0x71f8                	// #29176
    fcfc:	movk	x0, #0x2, lsl #16
    fd00:	ret

000000000000fd04 <ZSTD_startingInputLength>:
    fd04:	sub	sp, sp, #0x20
    fd08:	str	w0, [sp, #12]
    fd0c:	ldr	w0, [sp, #12]
    fd10:	cmp	w0, #0x1
    fd14:	b.ne	fd24 <ZSTD_startingInputLength+0x20>  // b.any
    fd18:	mov	x0, #0x5                   	// #5
    fd1c:	sub	x0, x0, #0x4
    fd20:	b	fd28 <ZSTD_startingInputLength+0x24>
    fd24:	mov	x0, #0x5                   	// #5
    fd28:	str	x0, [sp, #24]
    fd2c:	ldr	x0, [sp, #24]
    fd30:	add	sp, sp, #0x20
    fd34:	ret

000000000000fd38 <ZSTD_initDCtx_internal>:
    fd38:	stp	x29, x30, [sp, #-32]!
    fd3c:	mov	x29, sp
    fd40:	str	x0, [sp, #24]
    fd44:	ldr	x0, [sp, #24]
    fd48:	add	x0, x0, #0x4, lsl #12
    fd4c:	str	wzr, [x0, #12560]
    fd50:	ldr	x0, [sp, #24]
    fd54:	str	xzr, [x0, #29000]
    fd58:	ldr	x0, [sp, #24]
    fd5c:	mov	x1, #0x1                   	// #1
    fd60:	movk	x1, #0x800, lsl #16
    fd64:	str	x1, [x0, #29072]
    fd68:	ldr	x0, [sp, #24]
    fd6c:	str	xzr, [x0, #29024]
    fd70:	ldr	x0, [sp, #24]
    fd74:	str	xzr, [x0, #29016]
    fd78:	ldr	x0, [sp, #24]
    fd7c:	str	xzr, [x0, #28768]
    fd80:	ldr	x0, [sp, #24]
    fd84:	add	x0, x0, #0x4, lsl #12
    fd88:	str	wzr, [x0, #12652]
    fd8c:	ldr	x0, [sp, #24]
    fd90:	str	xzr, [x0, #29048]
    fd94:	ldr	x0, [sp, #24]
    fd98:	str	xzr, [x0, #29056]
    fd9c:	ldr	x0, [sp, #24]
    fda0:	str	xzr, [x0, #29088]
    fda4:	ldr	x0, [sp, #24]
    fda8:	add	x0, x0, #0x4, lsl #12
    fdac:	str	wzr, [x0, #12656]
    fdb0:	ldr	x0, [sp, #24]
    fdb4:	str	xzr, [x0, #29120]
    fdb8:	ldr	x0, [sp, #24]
    fdbc:	add	x0, x0, #0x4, lsl #12
    fdc0:	str	wzr, [x0, #12744]
    fdc4:	ldr	x0, [sp, #24]
    fdc8:	add	x0, x0, #0x4, lsl #12
    fdcc:	str	wzr, [x0, #12756]
    fdd0:	bl	f4f4 <ZSTD_cpuid>
    fdd4:	bl	f534 <ZSTD_cpuid_bmi2>
    fdd8:	mov	w1, w0
    fddc:	ldr	x0, [sp, #24]
    fde0:	add	x0, x0, #0x4, lsl #12
    fde4:	str	w1, [x0, #12624]
    fde8:	nop
    fdec:	ldp	x29, x30, [sp], #32
    fdf0:	ret

000000000000fdf4 <ZSTD_initStaticDCtx>:
    fdf4:	stp	x29, x30, [sp, #-48]!
    fdf8:	mov	x29, sp
    fdfc:	str	x0, [sp, #24]
    fe00:	str	x1, [sp, #16]
    fe04:	ldr	x0, [sp, #24]
    fe08:	str	x0, [sp, #40]
    fe0c:	ldr	x0, [sp, #24]
    fe10:	and	x0, x0, #0x7
    fe14:	cmp	x0, #0x0
    fe18:	b.eq	fe24 <ZSTD_initStaticDCtx+0x30>  // b.none
    fe1c:	mov	x0, #0x0                   	// #0
    fe20:	b	fe70 <ZSTD_initStaticDCtx+0x7c>
    fe24:	ldr	x1, [sp, #16]
    fe28:	mov	x0, #0x71f7                	// #29175
    fe2c:	movk	x0, #0x2, lsl #16
    fe30:	cmp	x1, x0
    fe34:	b.hi	fe40 <ZSTD_initStaticDCtx+0x4c>  // b.pmore
    fe38:	mov	x0, #0x0                   	// #0
    fe3c:	b	fe70 <ZSTD_initStaticDCtx+0x7c>
    fe40:	ldr	x0, [sp, #40]
    fe44:	bl	fd38 <ZSTD_initDCtx_internal>
    fe48:	ldr	x0, [sp, #40]
    fe4c:	ldr	x1, [sp, #16]
    fe50:	str	x1, [x0, #29000]
    fe54:	ldr	x1, [sp, #40]
    fe58:	mov	x0, #0x71f8                	// #29176
    fe5c:	movk	x0, #0x2, lsl #16
    fe60:	add	x1, x1, x0
    fe64:	ldr	x0, [sp, #40]
    fe68:	str	x1, [x0, #29048]
    fe6c:	ldr	x0, [sp, #40]
    fe70:	ldp	x29, x30, [sp], #48
    fe74:	ret

000000000000fe78 <ZSTD_createDCtx_advanced>:
    fe78:	stp	x29, x30, [sp, #-80]!
    fe7c:	mov	x29, sp
    fe80:	str	x19, [sp, #16]
    fe84:	mov	x19, x0
    fe88:	ldr	x0, [x19]
    fe8c:	cmp	x0, #0x0
    fe90:	cset	w0, eq  // eq = none
    fe94:	and	w1, w0, #0xff
    fe98:	ldr	x0, [x19, #8]
    fe9c:	cmp	x0, #0x0
    fea0:	cset	w0, eq  // eq = none
    fea4:	and	w0, w0, #0xff
    fea8:	eor	w0, w1, w0
    feac:	and	w0, w0, #0xff
    feb0:	cmp	w0, #0x0
    feb4:	b.eq	fec0 <ZSTD_createDCtx_advanced+0x48>  // b.none
    feb8:	mov	x0, #0x0                   	// #0
    febc:	b	ff34 <ZSTD_createDCtx_advanced+0xbc>
    fec0:	add	x2, sp, #0x20
    fec4:	mov	x3, x19
    fec8:	ldp	x0, x1, [x3]
    fecc:	stp	x0, x1, [x2]
    fed0:	ldr	x0, [x3, #16]
    fed4:	str	x0, [x2, #16]
    fed8:	add	x0, sp, #0x20
    fedc:	mov	x1, x0
    fee0:	mov	x0, #0x71f8                	// #29176
    fee4:	movk	x0, #0x2, lsl #16
    fee8:	bl	f1d8 <ZSTD_malloc>
    feec:	str	x0, [sp, #72]
    fef0:	ldr	x0, [sp, #72]
    fef4:	cmp	x0, #0x0
    fef8:	b.ne	ff04 <ZSTD_createDCtx_advanced+0x8c>  // b.any
    fefc:	mov	x0, #0x0                   	// #0
    ff00:	b	ff34 <ZSTD_createDCtx_advanced+0xbc>
    ff04:	ldr	x0, [sp, #72]
    ff08:	add	x0, x0, #0x7, lsl #12
    ff0c:	add	x0, x0, #0x120
    ff10:	mov	x2, x0
    ff14:	mov	x3, x19
    ff18:	ldp	x0, x1, [x3]
    ff1c:	stp	x0, x1, [x2]
    ff20:	ldr	x0, [x3, #16]
    ff24:	str	x0, [x2, #16]
    ff28:	ldr	x0, [sp, #72]
    ff2c:	bl	fd38 <ZSTD_initDCtx_internal>
    ff30:	ldr	x0, [sp, #72]
    ff34:	ldr	x19, [sp, #16]
    ff38:	ldp	x29, x30, [sp], #80
    ff3c:	ret

000000000000ff40 <ZSTD_createDCtx>:
    ff40:	stp	x29, x30, [sp, #-48]!
    ff44:	mov	x29, sp
    ff48:	adrp	x0, 0 <grub_memcpy>
    ff4c:	add	x0, x0, #0x0
    ff50:	ldr	x0, [x0]
    ff54:	add	x2, sp, #0x10
    ff58:	mov	x3, x0
    ff5c:	ldp	x0, x1, [x3]
    ff60:	stp	x0, x1, [x2]
    ff64:	ldr	x0, [x3, #16]
    ff68:	str	x0, [x2, #16]
    ff6c:	add	x0, sp, #0x10
    ff70:	bl	fe78 <ZSTD_createDCtx_advanced>
    ff74:	ldp	x29, x30, [sp], #48
    ff78:	ret
    ff7c:	nop
	...

000000000000ff88 <ZSTD_freeDCtx>:
    ff88:	stp	x29, x30, [sp, #-96]!
    ff8c:	mov	x29, sp
    ff90:	str	x0, [sp, #56]
    ff94:	ldr	x0, [sp, #56]
    ff98:	cmp	x0, #0x0
    ff9c:	b.ne	ffa8 <ZSTD_freeDCtx+0x20>  // b.any
    ffa0:	mov	x0, #0x0                   	// #0
    ffa4:	b	1005c <ZSTD_freeDCtx+0xd4>
    ffa8:	ldr	x0, [sp, #56]
    ffac:	ldr	x0, [x0, #29000]
    ffb0:	cmp	x0, #0x0
    ffb4:	b.eq	ffc0 <ZSTD_freeDCtx+0x38>  // b.none
    ffb8:	mov	x0, #0xffffffffffffffc0    	// #-64
    ffbc:	b	1005c <ZSTD_freeDCtx+0xd4>
    ffc0:	ldr	x0, [sp, #56]
    ffc4:	add	x0, x0, #0x7, lsl #12
    ffc8:	add	x0, x0, #0x120
    ffcc:	add	x2, sp, #0x48
    ffd0:	mov	x3, x0
    ffd4:	ldp	x0, x1, [x3]
    ffd8:	stp	x0, x1, [x2]
    ffdc:	ldr	x0, [x3, #16]
    ffe0:	str	x0, [x2, #16]
    ffe4:	ldr	x0, [sp, #56]
    ffe8:	ldr	x0, [x0, #29016]
    ffec:	bl	166f0 <ZSTD_freeDDict>
    fff0:	ldr	x0, [sp, #56]
    fff4:	str	xzr, [x0, #29016]
    fff8:	ldr	x0, [sp, #56]
    fffc:	ldr	x4, [x0, #29048]
   10000:	add	x2, sp, #0x10
   10004:	add	x3, sp, #0x48
   10008:	ldp	x0, x1, [x3]
   1000c:	stp	x0, x1, [x2]
   10010:	ldr	x0, [x3, #16]
   10014:	str	x0, [x2, #16]
   10018:	add	x0, sp, #0x10
   1001c:	mov	x1, x0
   10020:	mov	x0, x4
   10024:	bl	f284 <ZSTD_free>
   10028:	ldr	x0, [sp, #56]
   1002c:	str	xzr, [x0, #29048]
   10030:	add	x2, sp, #0x10
   10034:	add	x3, sp, #0x48
   10038:	ldp	x0, x1, [x3]
   1003c:	stp	x0, x1, [x2]
   10040:	ldr	x0, [x3, #16]
   10044:	str	x0, [x2, #16]
   10048:	add	x0, sp, #0x10
   1004c:	mov	x1, x0
   10050:	ldr	x0, [sp, #56]
   10054:	bl	f284 <ZSTD_free>
   10058:	mov	x0, #0x0                   	// #0
   1005c:	ldp	x29, x30, [sp], #96
   10060:	ret

0000000000010064 <ZSTD_copyDCtx>:
   10064:	stp	x29, x30, [sp, #-48]!
   10068:	mov	x29, sp
   1006c:	str	x0, [sp, #24]
   10070:	str	x1, [sp, #16]
   10074:	mov	x0, #0x7178                	// #29048
   10078:	str	x0, [sp, #40]
   1007c:	ldr	x2, [sp, #40]
   10080:	ldr	x1, [sp, #16]
   10084:	ldr	x0, [sp, #24]
   10088:	bl	f2e0 <grub_memcpy>
   1008c:	nop
   10090:	ldp	x29, x30, [sp], #48
   10094:	ret

0000000000010098 <ZSTD_isFrame>:
   10098:	stp	x29, x30, [sp, #-48]!
   1009c:	mov	x29, sp
   100a0:	str	x0, [sp, #24]
   100a4:	str	x1, [sp, #16]
   100a8:	ldr	x0, [sp, #16]
   100ac:	cmp	x0, #0x3
   100b0:	b.hi	100bc <ZSTD_isFrame+0x24>  // b.pmore
   100b4:	mov	w0, #0x0                   	// #0
   100b8:	b	10108 <ZSTD_isFrame+0x70>
   100bc:	ldr	x0, [sp, #24]
   100c0:	bl	f448 <MEM_readLE32>
   100c4:	str	w0, [sp, #44]
   100c8:	ldr	w1, [sp, #44]
   100cc:	mov	w0, #0xb528                	// #46376
   100d0:	movk	w0, #0xfd2f, lsl #16
   100d4:	cmp	w1, w0
   100d8:	b.ne	100e4 <ZSTD_isFrame+0x4c>  // b.any
   100dc:	mov	w0, #0x1                   	// #1
   100e0:	b	10108 <ZSTD_isFrame+0x70>
   100e4:	ldr	w0, [sp, #44]
   100e8:	and	w1, w0, #0xfffffff0
   100ec:	mov	w0, #0x2a50                	// #10832
   100f0:	movk	w0, #0x184d, lsl #16
   100f4:	cmp	w1, w0
   100f8:	b.ne	10104 <ZSTD_isFrame+0x6c>  // b.any
   100fc:	mov	w0, #0x1                   	// #1
   10100:	b	10108 <ZSTD_isFrame+0x70>
   10104:	mov	w0, #0x0                   	// #0
   10108:	ldp	x29, x30, [sp], #48
   1010c:	ret

0000000000010110 <ZSTD_frameHeaderSize_internal>:
   10110:	stp	x29, x30, [sp, #-80]!
   10114:	mov	x29, sp
   10118:	str	x0, [sp, #40]
   1011c:	str	x1, [sp, #32]
   10120:	str	w2, [sp, #28]
   10124:	ldr	w0, [sp, #28]
   10128:	bl	fd04 <ZSTD_startingInputLength>
   1012c:	str	x0, [sp, #72]
   10130:	ldr	x1, [sp, #32]
   10134:	ldr	x0, [sp, #72]
   10138:	cmp	x1, x0
   1013c:	b.cs	10148 <ZSTD_frameHeaderSize_internal+0x38>  // b.hs, b.nlast
   10140:	mov	x0, #0xffffffffffffffb8    	// #-72
   10144:	b	10208 <ZSTD_frameHeaderSize_internal+0xf8>
   10148:	ldr	x0, [sp, #72]
   1014c:	sub	x0, x0, #0x1
   10150:	ldr	x1, [sp, #40]
   10154:	add	x0, x1, x0
   10158:	ldrb	w0, [x0]
   1015c:	strb	w0, [sp, #71]
   10160:	ldrb	w0, [sp, #71]
   10164:	and	w0, w0, #0x3
   10168:	str	w0, [sp, #64]
   1016c:	ldrb	w0, [sp, #71]
   10170:	lsr	w0, w0, #5
   10174:	and	w0, w0, #0xff
   10178:	and	w0, w0, #0x1
   1017c:	str	w0, [sp, #60]
   10180:	ldrb	w0, [sp, #71]
   10184:	lsr	w0, w0, #6
   10188:	and	w0, w0, #0xff
   1018c:	str	w0, [sp, #56]
   10190:	ldr	w0, [sp, #60]
   10194:	cmp	w0, #0x0
   10198:	cset	w0, eq  // eq = none
   1019c:	and	w0, w0, #0xff
   101a0:	and	x1, x0, #0xff
   101a4:	ldr	x0, [sp, #72]
   101a8:	add	x1, x1, x0
   101ac:	adrp	x0, 0 <grub_memcpy>
   101b0:	add	x0, x0, #0x0
   101b4:	ldr	x0, [x0]
   101b8:	ldr	w2, [sp, #64]
   101bc:	ldr	x0, [x0, x2, lsl #3]
   101c0:	add	x1, x1, x0
   101c4:	adrp	x0, 0 <grub_memcpy>
   101c8:	add	x0, x0, #0x0
   101cc:	ldr	x0, [x0]
   101d0:	ldr	w2, [sp, #56]
   101d4:	ldr	x0, [x0, x2, lsl #3]
   101d8:	add	x1, x1, x0
   101dc:	ldr	w0, [sp, #60]
   101e0:	cmp	w0, #0x0
   101e4:	b.eq	101fc <ZSTD_frameHeaderSize_internal+0xec>  // b.none
   101e8:	ldr	w0, [sp, #56]
   101ec:	cmp	w0, #0x0
   101f0:	b.ne	101fc <ZSTD_frameHeaderSize_internal+0xec>  // b.any
   101f4:	mov	w0, #0x1                   	// #1
   101f8:	b	10200 <ZSTD_frameHeaderSize_internal+0xf0>
   101fc:	mov	w0, #0x0                   	// #0
   10200:	sxtw	x0, w0
   10204:	add	x0, x1, x0
   10208:	ldp	x29, x30, [sp], #80
   1020c:	ret
	...

0000000000010220 <ZSTD_frameHeaderSize>:
   10220:	stp	x29, x30, [sp, #-32]!
   10224:	mov	x29, sp
   10228:	str	x0, [sp, #24]
   1022c:	str	x1, [sp, #16]
   10230:	mov	w2, #0x0                   	// #0
   10234:	ldr	x1, [sp, #16]
   10238:	ldr	x0, [sp, #24]
   1023c:	bl	10110 <ZSTD_frameHeaderSize_internal>
   10240:	ldp	x29, x30, [sp], #32
   10244:	ret

0000000000010248 <ZSTD_getFrameHeader_advanced>:
   10248:	stp	x29, x30, [sp, #-144]!
   1024c:	mov	x29, sp
   10250:	str	x0, [sp, #40]
   10254:	str	x1, [sp, #32]
   10258:	str	x2, [sp, #24]
   1025c:	str	w3, [sp, #20]
   10260:	ldr	x0, [sp, #32]
   10264:	str	x0, [sp, #104]
   10268:	ldr	w0, [sp, #20]
   1026c:	bl	fd04 <ZSTD_startingInputLength>
   10270:	str	x0, [sp, #96]
   10274:	mov	x2, #0x28                  	// #40
   10278:	mov	w1, #0x0                   	// #0
   1027c:	ldr	x0, [sp, #40]
   10280:	bl	0 <grub_memset>
   10284:	ldr	x1, [sp, #24]
   10288:	ldr	x0, [sp, #96]
   1028c:	cmp	x1, x0
   10290:	b.cs	1029c <ZSTD_getFrameHeader_advanced+0x54>  // b.hs, b.nlast
   10294:	ldr	x0, [sp, #96]
   10298:	b	10668 <ZSTD_getFrameHeader_advanced+0x420>
   1029c:	ldr	x0, [sp, #32]
   102a0:	cmp	x0, #0x0
   102a4:	b.ne	102b0 <ZSTD_getFrameHeader_advanced+0x68>  // b.any
   102a8:	mov	x0, #0xffffffffffffffff    	// #-1
   102ac:	b	10668 <ZSTD_getFrameHeader_advanced+0x420>
   102b0:	ldr	w0, [sp, #20]
   102b4:	cmp	w0, #0x1
   102b8:	b.eq	10350 <ZSTD_getFrameHeader_advanced+0x108>  // b.none
   102bc:	ldr	x0, [sp, #32]
   102c0:	bl	f448 <MEM_readLE32>
   102c4:	mov	w1, w0
   102c8:	mov	w0, #0xb528                	// #46376
   102cc:	movk	w0, #0xfd2f, lsl #16
   102d0:	cmp	w1, w0
   102d4:	b.eq	10350 <ZSTD_getFrameHeader_advanced+0x108>  // b.none
   102d8:	ldr	x0, [sp, #32]
   102dc:	bl	f448 <MEM_readLE32>
   102e0:	and	w1, w0, #0xfffffff0
   102e4:	mov	w0, #0x2a50                	// #10832
   102e8:	movk	w0, #0x184d, lsl #16
   102ec:	cmp	w1, w0
   102f0:	b.ne	10348 <ZSTD_getFrameHeader_advanced+0x100>  // b.any
   102f4:	mov	x0, #0x8                   	// #8
   102f8:	ldr	x1, [sp, #24]
   102fc:	cmp	x1, x0
   10300:	b.cs	1030c <ZSTD_getFrameHeader_advanced+0xc4>  // b.hs, b.nlast
   10304:	mov	x0, #0x8                   	// #8
   10308:	b	10668 <ZSTD_getFrameHeader_advanced+0x420>
   1030c:	mov	x2, #0x28                  	// #40
   10310:	mov	w1, #0x0                   	// #0
   10314:	ldr	x0, [sp, #40]
   10318:	bl	0 <grub_memset>
   1031c:	ldr	x0, [sp, #32]
   10320:	add	x0, x0, #0x4
   10324:	bl	f448 <MEM_readLE32>
   10328:	mov	w1, w0
   1032c:	ldr	x0, [sp, #40]
   10330:	str	x1, [x0]
   10334:	ldr	x0, [sp, #40]
   10338:	mov	w1, #0x1                   	// #1
   1033c:	str	w1, [x0, #20]
   10340:	mov	x0, #0x0                   	// #0
   10344:	b	10668 <ZSTD_getFrameHeader_advanced+0x420>
   10348:	mov	x0, #0xfffffffffffffff6    	// #-10
   1034c:	b	10668 <ZSTD_getFrameHeader_advanced+0x420>
   10350:	ldr	w2, [sp, #20]
   10354:	ldr	x1, [sp, #24]
   10358:	ldr	x0, [sp, #32]
   1035c:	bl	10110 <ZSTD_frameHeaderSize_internal>
   10360:	str	x0, [sp, #88]
   10364:	ldr	x1, [sp, #24]
   10368:	ldr	x0, [sp, #88]
   1036c:	cmp	x1, x0
   10370:	b.cs	1037c <ZSTD_getFrameHeader_advanced+0x134>  // b.hs, b.nlast
   10374:	ldr	x0, [sp, #88]
   10378:	b	10668 <ZSTD_getFrameHeader_advanced+0x420>
   1037c:	ldr	x0, [sp, #88]
   10380:	mov	w1, w0
   10384:	ldr	x0, [sp, #40]
   10388:	str	w1, [x0, #24]
   1038c:	ldr	x0, [sp, #96]
   10390:	sub	x0, x0, #0x1
   10394:	ldr	x1, [sp, #104]
   10398:	add	x0, x1, x0
   1039c:	ldrb	w0, [x0]
   103a0:	strb	w0, [sp, #87]
   103a4:	ldr	x0, [sp, #96]
   103a8:	str	x0, [sp, #136]
   103ac:	ldrb	w0, [sp, #87]
   103b0:	and	w0, w0, #0x3
   103b4:	str	w0, [sp, #80]
   103b8:	ldrb	w0, [sp, #87]
   103bc:	lsr	w0, w0, #2
   103c0:	and	w0, w0, #0xff
   103c4:	and	w0, w0, #0x1
   103c8:	str	w0, [sp, #76]
   103cc:	ldrb	w0, [sp, #87]
   103d0:	lsr	w0, w0, #5
   103d4:	and	w0, w0, #0xff
   103d8:	and	w0, w0, #0x1
   103dc:	str	w0, [sp, #72]
   103e0:	ldrb	w0, [sp, #87]
   103e4:	lsr	w0, w0, #6
   103e8:	and	w0, w0, #0xff
   103ec:	str	w0, [sp, #68]
   103f0:	str	xzr, [sp, #128]
   103f4:	str	wzr, [sp, #124]
   103f8:	mov	x0, #0xffffffffffffffff    	// #-1
   103fc:	str	x0, [sp, #112]
   10400:	ldrb	w0, [sp, #87]
   10404:	and	w0, w0, #0x8
   10408:	cmp	w0, #0x0
   1040c:	b.eq	10418 <ZSTD_getFrameHeader_advanced+0x1d0>  // b.none
   10410:	mov	x0, #0xfffffffffffffff2    	// #-14
   10414:	b	10668 <ZSTD_getFrameHeader_advanced+0x420>
   10418:	ldr	w0, [sp, #72]
   1041c:	cmp	w0, #0x0
   10420:	b.ne	10498 <ZSTD_getFrameHeader_advanced+0x250>  // b.any
   10424:	ldr	x0, [sp, #136]
   10428:	add	x1, x0, #0x1
   1042c:	str	x1, [sp, #136]
   10430:	ldr	x1, [sp, #104]
   10434:	add	x0, x1, x0
   10438:	ldrb	w0, [x0]
   1043c:	strb	w0, [sp, #67]
   10440:	ldrb	w0, [sp, #67]
   10444:	lsr	w0, w0, #3
   10448:	and	w0, w0, #0xff
   1044c:	add	w0, w0, #0xa
   10450:	str	w0, [sp, #60]
   10454:	ldr	w0, [sp, #60]
   10458:	cmp	w0, #0x1f
   1045c:	b.ls	10468 <ZSTD_getFrameHeader_advanced+0x220>  // b.plast
   10460:	mov	x0, #0xfffffffffffffff0    	// #-16
   10464:	b	10668 <ZSTD_getFrameHeader_advanced+0x420>
   10468:	ldr	w0, [sp, #60]
   1046c:	mov	x1, #0x1                   	// #1
   10470:	lsl	x0, x1, x0
   10474:	str	x0, [sp, #128]
   10478:	ldr	x0, [sp, #128]
   1047c:	lsr	x1, x0, #3
   10480:	ldrb	w0, [sp, #67]
   10484:	and	x0, x0, #0x7
   10488:	mul	x0, x1, x0
   1048c:	ldr	x1, [sp, #128]
   10490:	add	x0, x1, x0
   10494:	str	x0, [sp, #128]
   10498:	ldr	w0, [sp, #80]
   1049c:	cmp	w0, #0x3
   104a0:	b.eq	10518 <ZSTD_getFrameHeader_advanced+0x2d0>  // b.none
   104a4:	ldr	w0, [sp, #80]
   104a8:	cmp	w0, #0x3
   104ac:	b.hi	1053c <ZSTD_getFrameHeader_advanced+0x2f4>  // b.pmore
   104b0:	ldr	w0, [sp, #80]
   104b4:	cmp	w0, #0x1
   104b8:	b.eq	104cc <ZSTD_getFrameHeader_advanced+0x284>  // b.none
   104bc:	ldr	w0, [sp, #80]
   104c0:	cmp	w0, #0x2
   104c4:	b.eq	104f0 <ZSTD_getFrameHeader_advanced+0x2a8>  // b.none
   104c8:	b	1053c <ZSTD_getFrameHeader_advanced+0x2f4>
   104cc:	ldr	x1, [sp, #104]
   104d0:	ldr	x0, [sp, #136]
   104d4:	add	x0, x1, x0
   104d8:	ldrb	w0, [x0]
   104dc:	str	w0, [sp, #124]
   104e0:	ldr	x0, [sp, #136]
   104e4:	add	x0, x0, #0x1
   104e8:	str	x0, [sp, #136]
   104ec:	b	10540 <ZSTD_getFrameHeader_advanced+0x2f8>
   104f0:	ldr	x1, [sp, #104]
   104f4:	ldr	x0, [sp, #136]
   104f8:	add	x0, x1, x0
   104fc:	bl	f3ac <MEM_readLE16>
   10500:	and	w0, w0, #0xffff
   10504:	str	w0, [sp, #124]
   10508:	ldr	x0, [sp, #136]
   1050c:	add	x0, x0, #0x2
   10510:	str	x0, [sp, #136]
   10514:	b	10540 <ZSTD_getFrameHeader_advanced+0x2f8>
   10518:	ldr	x1, [sp, #104]
   1051c:	ldr	x0, [sp, #136]
   10520:	add	x0, x1, x0
   10524:	bl	f448 <MEM_readLE32>
   10528:	str	w0, [sp, #124]
   1052c:	ldr	x0, [sp, #136]
   10530:	add	x0, x0, #0x4
   10534:	str	x0, [sp, #136]
   10538:	b	10540 <ZSTD_getFrameHeader_advanced+0x2f8>
   1053c:	nop
   10540:	ldr	w0, [sp, #68]
   10544:	cmp	w0, #0x3
   10548:	b.eq	105d8 <ZSTD_getFrameHeader_advanced+0x390>  // b.none
   1054c:	ldr	w0, [sp, #68]
   10550:	cmp	w0, #0x3
   10554:	b.hi	10570 <ZSTD_getFrameHeader_advanced+0x328>  // b.pmore
   10558:	ldr	w0, [sp, #68]
   1055c:	cmp	w0, #0x1
   10560:	b.eq	10598 <ZSTD_getFrameHeader_advanced+0x350>  // b.none
   10564:	ldr	w0, [sp, #68]
   10568:	cmp	w0, #0x2
   1056c:	b.eq	105bc <ZSTD_getFrameHeader_advanced+0x374>  // b.none
   10570:	ldr	w0, [sp, #72]
   10574:	cmp	w0, #0x0
   10578:	b.eq	105f0 <ZSTD_getFrameHeader_advanced+0x3a8>  // b.none
   1057c:	ldr	x1, [sp, #104]
   10580:	ldr	x0, [sp, #136]
   10584:	add	x0, x1, x0
   10588:	ldrb	w0, [x0]
   1058c:	and	x0, x0, #0xff
   10590:	str	x0, [sp, #112]
   10594:	b	105f0 <ZSTD_getFrameHeader_advanced+0x3a8>
   10598:	ldr	x1, [sp, #104]
   1059c:	ldr	x0, [sp, #136]
   105a0:	add	x0, x1, x0
   105a4:	bl	f3ac <MEM_readLE16>
   105a8:	and	w0, w0, #0xffff
   105ac:	add	w0, w0, #0x100
   105b0:	sxtw	x0, w0
   105b4:	str	x0, [sp, #112]
   105b8:	b	105f4 <ZSTD_getFrameHeader_advanced+0x3ac>
   105bc:	ldr	x1, [sp, #104]
   105c0:	ldr	x0, [sp, #136]
   105c4:	add	x0, x1, x0
   105c8:	bl	f448 <MEM_readLE32>
   105cc:	mov	w0, w0
   105d0:	str	x0, [sp, #112]
   105d4:	b	105f4 <ZSTD_getFrameHeader_advanced+0x3ac>
   105d8:	ldr	x1, [sp, #104]
   105dc:	ldr	x0, [sp, #136]
   105e0:	add	x0, x1, x0
   105e4:	bl	f480 <MEM_readLE64>
   105e8:	str	x0, [sp, #112]
   105ec:	b	105f4 <ZSTD_getFrameHeader_advanced+0x3ac>
   105f0:	nop
   105f4:	ldr	w0, [sp, #72]
   105f8:	cmp	w0, #0x0
   105fc:	b.eq	10608 <ZSTD_getFrameHeader_advanced+0x3c0>  // b.none
   10600:	ldr	x0, [sp, #112]
   10604:	str	x0, [sp, #128]
   10608:	ldr	x0, [sp, #40]
   1060c:	str	wzr, [x0, #20]
   10610:	ldr	x0, [sp, #40]
   10614:	ldr	x1, [sp, #112]
   10618:	str	x1, [x0]
   1061c:	ldr	x0, [sp, #40]
   10620:	ldr	x1, [sp, #128]
   10624:	str	x1, [x0, #8]
   10628:	ldr	x1, [sp, #128]
   1062c:	mov	x0, #0x1ffff               	// #131071
   10630:	cmp	x1, x0
   10634:	b.hi	10640 <ZSTD_getFrameHeader_advanced+0x3f8>  // b.pmore
   10638:	ldr	x0, [sp, #128]
   1063c:	b	10644 <ZSTD_getFrameHeader_advanced+0x3fc>
   10640:	mov	w0, #0x20000               	// #131072
   10644:	ldr	x1, [sp, #40]
   10648:	str	w0, [x1, #16]
   1064c:	ldr	x0, [sp, #40]
   10650:	ldr	w1, [sp, #124]
   10654:	str	w1, [x0, #28]
   10658:	ldr	x0, [sp, #40]
   1065c:	ldr	w1, [sp, #76]
   10660:	str	w1, [x0, #32]
   10664:	mov	x0, #0x0                   	// #0
   10668:	ldp	x29, x30, [sp], #144
   1066c:	ret

0000000000010670 <ZSTD_getFrameHeader>:
   10670:	stp	x29, x30, [sp, #-48]!
   10674:	mov	x29, sp
   10678:	str	x0, [sp, #40]
   1067c:	str	x1, [sp, #32]
   10680:	str	x2, [sp, #24]
   10684:	mov	w3, #0x0                   	// #0
   10688:	ldr	x2, [sp, #24]
   1068c:	ldr	x1, [sp, #32]
   10690:	ldr	x0, [sp, #40]
   10694:	bl	10248 <ZSTD_getFrameHeader_advanced>
   10698:	ldp	x29, x30, [sp], #48
   1069c:	ret

00000000000106a0 <ZSTD_getFrameContentSize>:
   106a0:	stp	x29, x30, [sp, #-80]!
   106a4:	mov	x29, sp
   106a8:	str	x0, [sp, #24]
   106ac:	str	x1, [sp, #16]
   106b0:	add	x0, sp, #0x28
   106b4:	ldr	x2, [sp, #16]
   106b8:	ldr	x1, [sp, #24]
   106bc:	bl	10670 <ZSTD_getFrameHeader>
   106c0:	cmp	x0, #0x0
   106c4:	b.eq	106d0 <ZSTD_getFrameContentSize+0x30>  // b.none
   106c8:	mov	x0, #0xfffffffffffffffe    	// #-2
   106cc:	b	106e8 <ZSTD_getFrameContentSize+0x48>
   106d0:	ldr	w0, [sp, #60]
   106d4:	cmp	w0, #0x1
   106d8:	b.ne	106e4 <ZSTD_getFrameContentSize+0x44>  // b.any
   106dc:	mov	x0, #0x0                   	// #0
   106e0:	b	106e8 <ZSTD_getFrameContentSize+0x48>
   106e4:	ldr	x0, [sp, #40]
   106e8:	ldp	x29, x30, [sp], #80
   106ec:	ret

00000000000106f0 <ZSTD_findDecompressedSize>:
   106f0:	stp	x29, x30, [sp, #-80]!
   106f4:	mov	x29, sp
   106f8:	str	x0, [sp, #24]
   106fc:	str	x1, [sp, #16]
   10700:	str	xzr, [sp, #72]
   10704:	b	10838 <ZSTD_findDecompressedSize+0x148>
   10708:	ldr	x0, [sp, #24]
   1070c:	bl	f448 <MEM_readLE32>
   10710:	str	w0, [sp, #68]
   10714:	ldr	w0, [sp, #68]
   10718:	and	w1, w0, #0xfffffff0
   1071c:	mov	w0, #0x2a50                	// #10832
   10720:	movk	w0, #0x184d, lsl #16
   10724:	cmp	w1, w0
   10728:	b.ne	1079c <ZSTD_findDecompressedSize+0xac>  // b.any
   1072c:	mov	x0, #0x8                   	// #8
   10730:	ldr	x1, [sp, #16]
   10734:	cmp	x1, x0
   10738:	b.cs	10744 <ZSTD_findDecompressedSize+0x54>  // b.hs, b.nlast
   1073c:	mov	x0, #0xffffffffffffffb8    	// #-72
   10740:	b	10860 <ZSTD_findDecompressedSize+0x170>
   10744:	ldr	x0, [sp, #24]
   10748:	add	x0, x0, #0x4
   1074c:	bl	f448 <MEM_readLE32>
   10750:	mov	w1, w0
   10754:	mov	x0, #0x8                   	// #8
   10758:	add	x0, x1, x0
   1075c:	str	x0, [sp, #40]
   10760:	ldr	x1, [sp, #16]
   10764:	ldr	x0, [sp, #40]
   10768:	cmp	x1, x0
   1076c:	b.cs	10778 <ZSTD_findDecompressedSize+0x88>  // b.hs, b.nlast
   10770:	mov	x0, #0xfffffffffffffffe    	// #-2
   10774:	b	10860 <ZSTD_findDecompressedSize+0x170>
   10778:	ldr	x1, [sp, #24]
   1077c:	ldr	x0, [sp, #40]
   10780:	add	x0, x1, x0
   10784:	str	x0, [sp, #24]
   10788:	ldr	x1, [sp, #16]
   1078c:	ldr	x0, [sp, #40]
   10790:	sub	x0, x1, x0
   10794:	str	x0, [sp, #16]
   10798:	b	10838 <ZSTD_findDecompressedSize+0x148>
   1079c:	ldr	x1, [sp, #16]
   107a0:	ldr	x0, [sp, #24]
   107a4:	bl	106a0 <ZSTD_getFrameContentSize>
   107a8:	str	x0, [sp, #56]
   107ac:	ldr	x0, [sp, #56]
   107b0:	cmn	x0, #0x3
   107b4:	b.ls	107c0 <ZSTD_findDecompressedSize+0xd0>  // b.plast
   107b8:	ldr	x0, [sp, #56]
   107bc:	b	10860 <ZSTD_findDecompressedSize+0x170>
   107c0:	ldr	x1, [sp, #72]
   107c4:	ldr	x0, [sp, #56]
   107c8:	add	x0, x1, x0
   107cc:	ldr	x1, [sp, #72]
   107d0:	cmp	x1, x0
   107d4:	b.ls	107e0 <ZSTD_findDecompressedSize+0xf0>  // b.plast
   107d8:	mov	x0, #0xfffffffffffffffe    	// #-2
   107dc:	b	10860 <ZSTD_findDecompressedSize+0x170>
   107e0:	ldr	x1, [sp, #72]
   107e4:	ldr	x0, [sp, #56]
   107e8:	add	x0, x1, x0
   107ec:	str	x0, [sp, #72]
   107f0:	ldr	x1, [sp, #16]
   107f4:	ldr	x0, [sp, #24]
   107f8:	bl	149a4 <ZSTD_findFrameCompressedSize>
   107fc:	str	x0, [sp, #48]
   10800:	ldr	x0, [sp, #48]
   10804:	bl	f558 <ERR_isError>
   10808:	cmp	w0, #0x0
   1080c:	b.eq	10818 <ZSTD_findDecompressedSize+0x128>  // b.none
   10810:	mov	x0, #0xfffffffffffffffe    	// #-2
   10814:	b	10860 <ZSTD_findDecompressedSize+0x170>
   10818:	ldr	x1, [sp, #24]
   1081c:	ldr	x0, [sp, #48]
   10820:	add	x0, x1, x0
   10824:	str	x0, [sp, #24]
   10828:	ldr	x1, [sp, #16]
   1082c:	ldr	x0, [sp, #48]
   10830:	sub	x0, x1, x0
   10834:	str	x0, [sp, #16]
   10838:	mov	x0, #0x5                   	// #5
   1083c:	ldr	x1, [sp, #16]
   10840:	cmp	x1, x0
   10844:	b.cs	10708 <ZSTD_findDecompressedSize+0x18>  // b.hs, b.nlast
   10848:	ldr	x0, [sp, #16]
   1084c:	cmp	x0, #0x0
   10850:	b.eq	1085c <ZSTD_findDecompressedSize+0x16c>  // b.none
   10854:	mov	x0, #0xfffffffffffffffe    	// #-2
   10858:	b	10860 <ZSTD_findDecompressedSize+0x170>
   1085c:	ldr	x0, [sp, #72]
   10860:	ldp	x29, x30, [sp], #80
   10864:	ret

0000000000010868 <ZSTD_getDecompressedSize>:
   10868:	stp	x29, x30, [sp, #-48]!
   1086c:	mov	x29, sp
   10870:	str	x0, [sp, #24]
   10874:	str	x1, [sp, #16]
   10878:	ldr	x1, [sp, #16]
   1087c:	ldr	x0, [sp, #24]
   10880:	bl	106a0 <ZSTD_getFrameContentSize>
   10884:	str	x0, [sp, #40]
   10888:	ldr	x0, [sp, #40]
   1088c:	cmn	x0, #0x3
   10890:	b.hi	1089c <ZSTD_getDecompressedSize+0x34>  // b.pmore
   10894:	ldr	x0, [sp, #40]
   10898:	b	108a0 <ZSTD_getDecompressedSize+0x38>
   1089c:	mov	x0, #0x0                   	// #0
   108a0:	ldp	x29, x30, [sp], #48
   108a4:	ret

00000000000108a8 <ZSTD_decodeFrameHeader>:
   108a8:	stp	x29, x30, [sp, #-64]!
   108ac:	mov	x29, sp
   108b0:	str	x0, [sp, #40]
   108b4:	str	x1, [sp, #32]
   108b8:	str	x2, [sp, #24]
   108bc:	ldr	x1, [sp, #40]
   108c0:	mov	x0, #0x7070                	// #28784
   108c4:	add	x4, x1, x0
   108c8:	ldr	x0, [sp, #40]
   108cc:	add	x0, x0, #0x4, lsl #12
   108d0:	ldr	w0, [x0, #12560]
   108d4:	mov	w3, w0
   108d8:	ldr	x2, [sp, #24]
   108dc:	ldr	x1, [sp, #32]
   108e0:	mov	x0, x4
   108e4:	bl	10248 <ZSTD_getFrameHeader_advanced>
   108e8:	str	x0, [sp, #56]
   108ec:	ldr	x0, [sp, #56]
   108f0:	bl	f558 <ERR_isError>
   108f4:	cmp	w0, #0x0
   108f8:	b.eq	10904 <ZSTD_decodeFrameHeader+0x5c>  // b.none
   108fc:	ldr	x0, [sp, #56]
   10900:	b	10980 <ZSTD_decodeFrameHeader+0xd8>
   10904:	ldr	x0, [sp, #56]
   10908:	cmp	x0, #0x0
   1090c:	b.eq	10918 <ZSTD_decodeFrameHeader+0x70>  // b.none
   10910:	mov	x0, #0xffffffffffffffb8    	// #-72
   10914:	b	10980 <ZSTD_decodeFrameHeader+0xd8>
   10918:	ldr	x0, [sp, #40]
   1091c:	add	x0, x0, #0x4, lsl #12
   10920:	ldr	w0, [x0, #12428]
   10924:	cmp	w0, #0x0
   10928:	b.eq	10954 <ZSTD_decodeFrameHeader+0xac>  // b.none
   1092c:	ldr	x0, [sp, #40]
   10930:	add	x0, x0, #0x4, lsl #12
   10934:	ldr	w1, [x0, #12648]
   10938:	ldr	x0, [sp, #40]
   1093c:	add	x0, x0, #0x4, lsl #12
   10940:	ldr	w0, [x0, #12428]
   10944:	cmp	w1, w0
   10948:	b.eq	10954 <ZSTD_decodeFrameHeader+0xac>  // b.none
   1094c:	mov	x0, #0xffffffffffffffe0    	// #-32
   10950:	b	10980 <ZSTD_decodeFrameHeader+0xd8>
   10954:	ldr	x0, [sp, #40]
   10958:	add	x0, x0, #0x4, lsl #12
   1095c:	ldr	w0, [x0, #12432]
   10960:	cmp	w0, #0x0
   10964:	b.eq	1097c <ZSTD_decodeFrameHeader+0xd4>  // b.none
   10968:	ldr	x1, [sp, #40]
   1096c:	mov	x0, #0x70b0                	// #28848
   10970:	add	x0, x1, x0
   10974:	mov	x1, #0x0                   	// #0
   10978:	bl	c288 <XXH64_reset>
   1097c:	mov	x0, #0x0                   	// #0
   10980:	ldp	x29, x30, [sp], #64
   10984:	ret

0000000000010988 <ZSTD_getcBlockSize>:
   10988:	stp	x29, x30, [sp, #-64]!
   1098c:	mov	x29, sp
   10990:	str	x0, [sp, #40]
   10994:	str	x1, [sp, #32]
   10998:	str	x2, [sp, #24]
   1099c:	mov	x0, #0x3                   	// #3
   109a0:	ldr	x1, [sp, #32]
   109a4:	cmp	x1, x0
   109a8:	b.cs	109b4 <ZSTD_getcBlockSize+0x2c>  // b.hs, b.nlast
   109ac:	mov	x0, #0xffffffffffffffb8    	// #-72
   109b0:	b	10a30 <ZSTD_getcBlockSize+0xa8>
   109b4:	ldr	x0, [sp, #40]
   109b8:	bl	f410 <MEM_readLE24>
   109bc:	str	w0, [sp, #60]
   109c0:	ldr	w0, [sp, #60]
   109c4:	lsr	w0, w0, #3
   109c8:	str	w0, [sp, #56]
   109cc:	ldr	w0, [sp, #60]
   109d0:	and	w1, w0, #0x1
   109d4:	ldr	x0, [sp, #24]
   109d8:	str	w1, [x0, #4]
   109dc:	ldr	w0, [sp, #60]
   109e0:	lsr	w0, w0, #1
   109e4:	and	w1, w0, #0x3
   109e8:	ldr	x0, [sp, #24]
   109ec:	str	w1, [x0]
   109f0:	ldr	x0, [sp, #24]
   109f4:	ldr	w1, [sp, #56]
   109f8:	str	w1, [x0, #8]
   109fc:	ldr	x0, [sp, #24]
   10a00:	ldr	w0, [x0]
   10a04:	cmp	w0, #0x1
   10a08:	b.ne	10a14 <ZSTD_getcBlockSize+0x8c>  // b.any
   10a0c:	mov	x0, #0x1                   	// #1
   10a10:	b	10a30 <ZSTD_getcBlockSize+0xa8>
   10a14:	ldr	x0, [sp, #24]
   10a18:	ldr	w0, [x0]
   10a1c:	cmp	w0, #0x3
   10a20:	b.ne	10a2c <ZSTD_getcBlockSize+0xa4>  // b.any
   10a24:	mov	x0, #0xffffffffffffffec    	// #-20
   10a28:	b	10a30 <ZSTD_getcBlockSize+0xa8>
   10a2c:	ldr	w0, [sp, #56]
   10a30:	ldp	x29, x30, [sp], #64
   10a34:	ret

0000000000010a38 <ZSTD_copyRawBlock>:
   10a38:	stp	x29, x30, [sp, #-48]!
   10a3c:	mov	x29, sp
   10a40:	str	x0, [sp, #40]
   10a44:	str	x1, [sp, #32]
   10a48:	str	x2, [sp, #24]
   10a4c:	str	x3, [sp, #16]
   10a50:	ldr	x0, [sp, #40]
   10a54:	cmp	x0, #0x0
   10a58:	b.ne	10a64 <ZSTD_copyRawBlock+0x2c>  // b.any
   10a5c:	mov	x0, #0xffffffffffffffba    	// #-70
   10a60:	b	10a90 <ZSTD_copyRawBlock+0x58>
   10a64:	ldr	x1, [sp, #16]
   10a68:	ldr	x0, [sp, #32]
   10a6c:	cmp	x1, x0
   10a70:	b.ls	10a7c <ZSTD_copyRawBlock+0x44>  // b.plast
   10a74:	mov	x0, #0xffffffffffffffba    	// #-70
   10a78:	b	10a90 <ZSTD_copyRawBlock+0x58>
   10a7c:	ldr	x2, [sp, #16]
   10a80:	ldr	x1, [sp, #24]
   10a84:	ldr	x0, [sp, #40]
   10a88:	bl	f2e0 <grub_memcpy>
   10a8c:	ldr	x0, [sp, #16]
   10a90:	ldp	x29, x30, [sp], #48
   10a94:	ret

0000000000010a98 <ZSTD_setRleBlock>:
   10a98:	stp	x29, x30, [sp, #-64]!
   10a9c:	mov	x29, sp
   10aa0:	str	x0, [sp, #56]
   10aa4:	str	x1, [sp, #48]
   10aa8:	str	x2, [sp, #40]
   10aac:	str	x3, [sp, #32]
   10ab0:	str	x4, [sp, #24]
   10ab4:	ldr	x0, [sp, #32]
   10ab8:	cmp	x0, #0x1
   10abc:	b.eq	10ac8 <ZSTD_setRleBlock+0x30>  // b.none
   10ac0:	mov	x0, #0xffffffffffffffb8    	// #-72
   10ac4:	b	10afc <ZSTD_setRleBlock+0x64>
   10ac8:	ldr	x1, [sp, #24]
   10acc:	ldr	x0, [sp, #48]
   10ad0:	cmp	x1, x0
   10ad4:	b.ls	10ae0 <ZSTD_setRleBlock+0x48>  // b.plast
   10ad8:	mov	x0, #0xffffffffffffffba    	// #-70
   10adc:	b	10afc <ZSTD_setRleBlock+0x64>
   10ae0:	ldr	x0, [sp, #40]
   10ae4:	ldrb	w0, [x0]
   10ae8:	ldr	x2, [sp, #24]
   10aec:	mov	w1, w0
   10af0:	ldr	x0, [sp, #56]
   10af4:	bl	0 <grub_memset>
   10af8:	ldr	x0, [sp, #24]
   10afc:	ldp	x29, x30, [sp], #64
   10b00:	ret

0000000000010b04 <ZSTD_decodeLiteralsBlock>:
   10b04:	stp	x29, x30, [sp, #-176]!
   10b08:	mov	x29, sp
   10b0c:	str	x0, [sp, #40]
   10b10:	str	x1, [sp, #32]
   10b14:	str	x2, [sp, #24]
   10b18:	ldr	x0, [sp, #24]
   10b1c:	cmp	x0, #0x2
   10b20:	b.hi	10b2c <ZSTD_decodeLiteralsBlock+0x28>  // b.pmore
   10b24:	mov	x0, #0xffffffffffffffec    	// #-20
   10b28:	b	1121c <ZSTD_decodeLiteralsBlock+0x718>
   10b2c:	ldr	x0, [sp, #32]
   10b30:	str	x0, [sp, #96]
   10b34:	ldr	x0, [sp, #96]
   10b38:	ldrb	w0, [x0]
   10b3c:	and	w0, w0, #0x3
   10b40:	str	w0, [sp, #92]
   10b44:	ldr	w0, [sp, #92]
   10b48:	cmp	w0, #0x3
   10b4c:	b.eq	10b90 <ZSTD_decodeLiteralsBlock+0x8c>  // b.none
   10b50:	ldr	w0, [sp, #92]
   10b54:	cmp	w0, #0x3
   10b58:	b.hi	11218 <ZSTD_decodeLiteralsBlock+0x714>  // b.pmore
   10b5c:	ldr	w0, [sp, #92]
   10b60:	cmp	w0, #0x2
   10b64:	b.eq	10bac <ZSTD_decodeLiteralsBlock+0xa8>  // b.none
   10b68:	ldr	w0, [sp, #92]
   10b6c:	cmp	w0, #0x2
   10b70:	b.hi	11218 <ZSTD_decodeLiteralsBlock+0x714>  // b.pmore
   10b74:	ldr	w0, [sp, #92]
   10b78:	cmp	w0, #0x0
   10b7c:	b.eq	10f70 <ZSTD_decodeLiteralsBlock+0x46c>  // b.none
   10b80:	ldr	w0, [sp, #92]
   10b84:	cmp	w0, #0x1
   10b88:	b.eq	110f4 <ZSTD_decodeLiteralsBlock+0x5f0>  // b.none
   10b8c:	b	11218 <ZSTD_decodeLiteralsBlock+0x714>
   10b90:	ldr	x0, [sp, #40]
   10b94:	add	x0, x0, #0x4, lsl #12
   10b98:	ldr	w0, [x0, #12456]
   10b9c:	cmp	w0, #0x0
   10ba0:	b.ne	10bac <ZSTD_decodeLiteralsBlock+0xa8>  // b.any
   10ba4:	mov	x0, #0xffffffffffffffe2    	// #-30
   10ba8:	b	1121c <ZSTD_decodeLiteralsBlock+0x718>
   10bac:	ldr	x0, [sp, #24]
   10bb0:	cmp	x0, #0x4
   10bb4:	b.hi	10bc0 <ZSTD_decodeLiteralsBlock+0xbc>  // b.pmore
   10bb8:	mov	x0, #0xffffffffffffffec    	// #-20
   10bbc:	b	1121c <ZSTD_decodeLiteralsBlock+0x718>
   10bc0:	str	wzr, [sp, #148]
   10bc4:	ldr	x0, [sp, #96]
   10bc8:	ldrb	w0, [x0]
   10bcc:	lsr	w0, w0, #2
   10bd0:	and	w0, w0, #0xff
   10bd4:	and	w0, w0, #0x3
   10bd8:	str	w0, [sp, #88]
   10bdc:	ldr	x0, [sp, #96]
   10be0:	bl	f448 <MEM_readLE32>
   10be4:	str	w0, [sp, #84]
   10be8:	ldr	w0, [sp, #88]
   10bec:	cmp	w0, #0x2
   10bf0:	b.eq	10c48 <ZSTD_decodeLiteralsBlock+0x144>  // b.none
   10bf4:	ldr	w0, [sp, #88]
   10bf8:	cmp	w0, #0x3
   10bfc:	b.eq	10c78 <ZSTD_decodeLiteralsBlock+0x174>  // b.none
   10c00:	ldr	w0, [sp, #88]
   10c04:	cmp	w0, #0x0
   10c08:	cset	w0, eq  // eq = none
   10c0c:	and	w0, w0, #0xff
   10c10:	str	w0, [sp, #148]
   10c14:	mov	x0, #0x3                   	// #3
   10c18:	str	x0, [sp, #168]
   10c1c:	ldr	w0, [sp, #84]
   10c20:	lsr	w0, w0, #4
   10c24:	mov	w0, w0
   10c28:	and	x0, x0, #0x3ff
   10c2c:	str	x0, [sp, #160]
   10c30:	ldr	w0, [sp, #84]
   10c34:	lsr	w0, w0, #14
   10c38:	mov	w0, w0
   10c3c:	and	x0, x0, #0x3ff
   10c40:	str	x0, [sp, #152]
   10c44:	b	10cbc <ZSTD_decodeLiteralsBlock+0x1b8>
   10c48:	mov	x0, #0x4                   	// #4
   10c4c:	str	x0, [sp, #168]
   10c50:	ldr	w0, [sp, #84]
   10c54:	lsr	w0, w0, #4
   10c58:	mov	w0, w0
   10c5c:	and	x0, x0, #0x3fff
   10c60:	str	x0, [sp, #160]
   10c64:	ldr	w0, [sp, #84]
   10c68:	lsr	w0, w0, #18
   10c6c:	mov	w0, w0
   10c70:	str	x0, [sp, #152]
   10c74:	b	10cbc <ZSTD_decodeLiteralsBlock+0x1b8>
   10c78:	mov	x0, #0x5                   	// #5
   10c7c:	str	x0, [sp, #168]
   10c80:	ldr	w0, [sp, #84]
   10c84:	lsr	w0, w0, #4
   10c88:	mov	w0, w0
   10c8c:	and	x0, x0, #0x3ffff
   10c90:	str	x0, [sp, #160]
   10c94:	ldr	w0, [sp, #84]
   10c98:	lsr	w0, w0, #22
   10c9c:	ldr	x1, [sp, #96]
   10ca0:	add	x1, x1, #0x4
   10ca4:	ldrb	w1, [x1]
   10ca8:	lsl	w1, w1, #10
   10cac:	add	w0, w0, w1
   10cb0:	mov	w0, w0
   10cb4:	str	x0, [sp, #152]
   10cb8:	nop
   10cbc:	ldr	x0, [sp, #160]
   10cc0:	cmp	x0, #0x20, lsl #12
   10cc4:	b.ls	10cd0 <ZSTD_decodeLiteralsBlock+0x1cc>  // b.plast
   10cc8:	mov	x0, #0xffffffffffffffec    	// #-20
   10ccc:	b	1121c <ZSTD_decodeLiteralsBlock+0x718>
   10cd0:	ldr	x1, [sp, #152]
   10cd4:	ldr	x0, [sp, #168]
   10cd8:	add	x0, x1, x0
   10cdc:	ldr	x1, [sp, #24]
   10ce0:	cmp	x1, x0
   10ce4:	b.cs	10cf0 <ZSTD_decodeLiteralsBlock+0x1ec>  // b.hs, b.nlast
   10ce8:	mov	x0, #0xffffffffffffffec    	// #-20
   10cec:	b	1121c <ZSTD_decodeLiteralsBlock+0x718>
   10cf0:	ldr	x0, [sp, #40]
   10cf4:	add	x0, x0, #0x4, lsl #12
   10cf8:	ldr	w0, [x0, #12652]
   10cfc:	cmp	w0, #0x0
   10d00:	b.eq	10d58 <ZSTD_decodeLiteralsBlock+0x254>  // b.none
   10d04:	ldr	x0, [sp, #160]
   10d08:	cmp	x0, #0x300
   10d0c:	b.ls	10d58 <ZSTD_decodeLiteralsBlock+0x254>  // b.plast
   10d10:	ldr	x0, [sp, #40]
   10d14:	ldr	x0, [x0, #24]
   10d18:	str	x0, [sp, #72]
   10d1c:	mov	x0, #0x4004                	// #16388
   10d20:	str	x0, [sp, #64]
   10d24:	str	xzr, [sp, #136]
   10d28:	b	10d48 <ZSTD_decodeLiteralsBlock+0x244>
   10d2c:	ldr	x1, [sp, #72]
   10d30:	ldr	x0, [sp, #136]
   10d34:	add	x0, x1, x0
   10d38:	prfm	pldl2keep, [x0]
   10d3c:	ldr	x0, [sp, #136]
   10d40:	add	x0, x0, #0x40
   10d44:	str	x0, [sp, #136]
   10d48:	ldr	x1, [sp, #136]
   10d4c:	ldr	x0, [sp, #64]
   10d50:	cmp	x1, x0
   10d54:	b.cc	10d2c <ZSTD_decodeLiteralsBlock+0x228>  // b.lo, b.ul, b.last
   10d58:	ldr	w0, [sp, #92]
   10d5c:	cmp	w0, #0x3
   10d60:	b.ne	10e08 <ZSTD_decodeLiteralsBlock+0x304>  // b.any
   10d64:	ldr	w0, [sp, #148]
   10d68:	cmp	w0, #0x0
   10d6c:	b.eq	10dbc <ZSTD_decodeLiteralsBlock+0x2b8>  // b.none
   10d70:	ldr	x1, [sp, #40]
   10d74:	mov	x0, #0x71d8                	// #29144
   10d78:	add	x6, x1, x0
   10d7c:	ldr	x1, [sp, #96]
   10d80:	ldr	x0, [sp, #168]
   10d84:	add	x1, x1, x0
   10d88:	ldr	x0, [sp, #40]
   10d8c:	ldr	x2, [x0, #24]
   10d90:	ldr	x0, [sp, #40]
   10d94:	add	x0, x0, #0x4, lsl #12
   10d98:	ldr	w0, [x0, #12624]
   10d9c:	mov	w5, w0
   10da0:	mov	x4, x2
   10da4:	ldr	x3, [sp, #152]
   10da8:	mov	x2, x1
   10dac:	ldr	x1, [sp, #160]
   10db0:	mov	x0, x6
   10db4:	bl	8da0 <HUF_decompress1X_usingDTable_bmi2>
   10db8:	b	10ed8 <ZSTD_decodeLiteralsBlock+0x3d4>
   10dbc:	ldr	x1, [sp, #40]
   10dc0:	mov	x0, #0x71d8                	// #29144
   10dc4:	add	x6, x1, x0
   10dc8:	ldr	x1, [sp, #96]
   10dcc:	ldr	x0, [sp, #168]
   10dd0:	add	x1, x1, x0
   10dd4:	ldr	x0, [sp, #40]
   10dd8:	ldr	x2, [x0, #24]
   10ddc:	ldr	x0, [sp, #40]
   10de0:	add	x0, x0, #0x4, lsl #12
   10de4:	ldr	w0, [x0, #12624]
   10de8:	mov	w5, w0
   10dec:	mov	x4, x2
   10df0:	ldr	x3, [sp, #152]
   10df4:	mov	x2, x1
   10df8:	ldr	x1, [sp, #160]
   10dfc:	mov	x0, x6
   10e00:	bl	8edc <HUF_decompress4X_usingDTable_bmi2>
   10e04:	b	10ed8 <ZSTD_decodeLiteralsBlock+0x3d4>
   10e08:	ldr	w0, [sp, #148]
   10e0c:	cmp	w0, #0x0
   10e10:	b.eq	10e78 <ZSTD_decodeLiteralsBlock+0x374>  // b.none
   10e14:	ldr	x1, [sp, #40]
   10e18:	mov	x0, #0x2838                	// #10296
   10e1c:	add	x8, x1, x0
   10e20:	ldr	x1, [sp, #40]
   10e24:	mov	x0, #0x71d8                	// #29144
   10e28:	add	x9, x1, x0
   10e2c:	ldr	x1, [sp, #96]
   10e30:	ldr	x0, [sp, #168]
   10e34:	add	x2, x1, x0
   10e38:	ldr	x1, [sp, #40]
   10e3c:	mov	x0, #0x6848                	// #26696
   10e40:	add	x1, x1, x0
   10e44:	ldr	x0, [sp, #40]
   10e48:	add	x0, x0, #0x4, lsl #12
   10e4c:	ldr	w0, [x0, #12624]
   10e50:	mov	w7, w0
   10e54:	mov	x6, #0x800                 	// #2048
   10e58:	mov	x5, x1
   10e5c:	ldr	x4, [sp, #152]
   10e60:	mov	x3, x2
   10e64:	ldr	x2, [sp, #160]
   10e68:	mov	x1, x9
   10e6c:	mov	x0, x8
   10e70:	bl	8e1c <HUF_decompress1X1_DCtx_wksp_bmi2>
   10e74:	b	10ed8 <ZSTD_decodeLiteralsBlock+0x3d4>
   10e78:	ldr	x1, [sp, #40]
   10e7c:	mov	x0, #0x2838                	// #10296
   10e80:	add	x8, x1, x0
   10e84:	ldr	x1, [sp, #40]
   10e88:	mov	x0, #0x71d8                	// #29144
   10e8c:	add	x9, x1, x0
   10e90:	ldr	x1, [sp, #96]
   10e94:	ldr	x0, [sp, #168]
   10e98:	add	x2, x1, x0
   10e9c:	ldr	x1, [sp, #40]
   10ea0:	mov	x0, #0x6848                	// #26696
   10ea4:	add	x1, x1, x0
   10ea8:	ldr	x0, [sp, #40]
   10eac:	add	x0, x0, #0x4, lsl #12
   10eb0:	ldr	w0, [x0, #12624]
   10eb4:	mov	w7, w0
   10eb8:	mov	x6, #0x800                 	// #2048
   10ebc:	mov	x5, x1
   10ec0:	ldr	x4, [sp, #152]
   10ec4:	mov	x3, x2
   10ec8:	ldr	x2, [sp, #160]
   10ecc:	mov	x1, x9
   10ed0:	mov	x0, x8
   10ed4:	bl	8f58 <HUF_decompress4X_hufOnly_wksp_bmi2>
   10ed8:	bl	f558 <ERR_isError>
   10edc:	cmp	w0, #0x0
   10ee0:	b.eq	10eec <ZSTD_decodeLiteralsBlock+0x3e8>  // b.none
   10ee4:	mov	x0, #0xffffffffffffffec    	// #-20
   10ee8:	b	1121c <ZSTD_decodeLiteralsBlock+0x718>
   10eec:	ldr	x1, [sp, #40]
   10ef0:	mov	x0, #0x71d8                	// #29144
   10ef4:	add	x1, x1, x0
   10ef8:	ldr	x0, [sp, #40]
   10efc:	str	x1, [x0, #28952]
   10f00:	ldr	x0, [sp, #40]
   10f04:	ldr	x1, [sp, #160]
   10f08:	str	x1, [x0, #28984]
   10f0c:	ldr	x0, [sp, #40]
   10f10:	add	x0, x0, #0x4, lsl #12
   10f14:	mov	w1, #0x1                   	// #1
   10f18:	str	w1, [x0, #12456]
   10f1c:	ldr	w0, [sp, #92]
   10f20:	cmp	w0, #0x2
   10f24:	b.ne	10f3c <ZSTD_decodeLiteralsBlock+0x438>  // b.any
   10f28:	ldr	x1, [sp, #40]
   10f2c:	mov	x0, #0x2838                	// #10296
   10f30:	add	x1, x1, x0
   10f34:	ldr	x0, [sp, #40]
   10f38:	str	x1, [x0, #24]
   10f3c:	ldr	x1, [sp, #40]
   10f40:	mov	x0, #0x71d8                	// #29144
   10f44:	add	x1, x1, x0
   10f48:	ldr	x0, [sp, #40]
   10f4c:	ldr	x0, [x0, #28984]
   10f50:	add	x0, x1, x0
   10f54:	mov	x2, #0x8                   	// #8
   10f58:	mov	w1, #0x0                   	// #0
   10f5c:	bl	0 <grub_memset>
   10f60:	ldr	x1, [sp, #152]
   10f64:	ldr	x0, [sp, #168]
   10f68:	add	x0, x1, x0
   10f6c:	b	1121c <ZSTD_decodeLiteralsBlock+0x718>
   10f70:	ldr	x0, [sp, #96]
   10f74:	ldrb	w0, [x0]
   10f78:	lsr	w0, w0, #2
   10f7c:	and	w0, w0, #0xff
   10f80:	and	w0, w0, #0x3
   10f84:	str	w0, [sp, #56]
   10f88:	ldr	w0, [sp, #56]
   10f8c:	cmp	w0, #0x1
   10f90:	b.eq	10fc4 <ZSTD_decodeLiteralsBlock+0x4c0>  // b.none
   10f94:	ldr	w0, [sp, #56]
   10f98:	cmp	w0, #0x3
   10f9c:	b.eq	10fec <ZSTD_decodeLiteralsBlock+0x4e8>  // b.none
   10fa0:	mov	x0, #0x1                   	// #1
   10fa4:	str	x0, [sp, #120]
   10fa8:	ldr	x0, [sp, #96]
   10fac:	ldrb	w0, [x0]
   10fb0:	lsr	w0, w0, #3
   10fb4:	and	w0, w0, #0xff
   10fb8:	and	x0, x0, #0xff
   10fbc:	str	x0, [sp, #128]
   10fc0:	b	1100c <ZSTD_decodeLiteralsBlock+0x508>
   10fc4:	mov	x0, #0x2                   	// #2
   10fc8:	str	x0, [sp, #120]
   10fcc:	ldr	x0, [sp, #96]
   10fd0:	bl	f3ac <MEM_readLE16>
   10fd4:	and	w0, w0, #0xffff
   10fd8:	lsr	w0, w0, #4
   10fdc:	and	w0, w0, #0xffff
   10fe0:	and	x0, x0, #0xffff
   10fe4:	str	x0, [sp, #128]
   10fe8:	b	1100c <ZSTD_decodeLiteralsBlock+0x508>
   10fec:	mov	x0, #0x3                   	// #3
   10ff0:	str	x0, [sp, #120]
   10ff4:	ldr	x0, [sp, #96]
   10ff8:	bl	f410 <MEM_readLE24>
   10ffc:	lsr	w0, w0, #4
   11000:	mov	w0, w0
   11004:	str	x0, [sp, #128]
   11008:	nop
   1100c:	ldr	x1, [sp, #120]
   11010:	ldr	x0, [sp, #128]
   11014:	add	x0, x1, x0
   11018:	add	x0, x0, #0x8
   1101c:	ldr	x1, [sp, #24]
   11020:	cmp	x1, x0
   11024:	b.cs	110c4 <ZSTD_decodeLiteralsBlock+0x5c0>  // b.hs, b.nlast
   11028:	ldr	x1, [sp, #128]
   1102c:	ldr	x0, [sp, #120]
   11030:	add	x0, x1, x0
   11034:	ldr	x1, [sp, #24]
   11038:	cmp	x1, x0
   1103c:	b.cs	11048 <ZSTD_decodeLiteralsBlock+0x544>  // b.hs, b.nlast
   11040:	mov	x0, #0xffffffffffffffec    	// #-20
   11044:	b	1121c <ZSTD_decodeLiteralsBlock+0x718>
   11048:	ldr	x1, [sp, #40]
   1104c:	mov	x0, #0x71d8                	// #29144
   11050:	add	x3, x1, x0
   11054:	ldr	x1, [sp, #96]
   11058:	ldr	x0, [sp, #120]
   1105c:	add	x0, x1, x0
   11060:	ldr	x2, [sp, #128]
   11064:	mov	x1, x0
   11068:	mov	x0, x3
   1106c:	bl	f2e0 <grub_memcpy>
   11070:	ldr	x1, [sp, #40]
   11074:	mov	x0, #0x71d8                	// #29144
   11078:	add	x1, x1, x0
   1107c:	ldr	x0, [sp, #40]
   11080:	str	x1, [x0, #28952]
   11084:	ldr	x0, [sp, #40]
   11088:	ldr	x1, [sp, #128]
   1108c:	str	x1, [x0, #28984]
   11090:	ldr	x1, [sp, #40]
   11094:	mov	x0, #0x71d8                	// #29144
   11098:	add	x1, x1, x0
   1109c:	ldr	x0, [sp, #40]
   110a0:	ldr	x0, [x0, #28984]
   110a4:	add	x0, x1, x0
   110a8:	mov	x2, #0x8                   	// #8
   110ac:	mov	w1, #0x0                   	// #0
   110b0:	bl	0 <grub_memset>
   110b4:	ldr	x1, [sp, #120]
   110b8:	ldr	x0, [sp, #128]
   110bc:	add	x0, x1, x0
   110c0:	b	1121c <ZSTD_decodeLiteralsBlock+0x718>
   110c4:	ldr	x1, [sp, #96]
   110c8:	ldr	x0, [sp, #120]
   110cc:	add	x1, x1, x0
   110d0:	ldr	x0, [sp, #40]
   110d4:	str	x1, [x0, #28952]
   110d8:	ldr	x0, [sp, #40]
   110dc:	ldr	x1, [sp, #128]
   110e0:	str	x1, [x0, #28984]
   110e4:	ldr	x1, [sp, #120]
   110e8:	ldr	x0, [sp, #128]
   110ec:	add	x0, x1, x0
   110f0:	b	1121c <ZSTD_decodeLiteralsBlock+0x718>
   110f4:	ldr	x0, [sp, #96]
   110f8:	ldrb	w0, [x0]
   110fc:	lsr	w0, w0, #2
   11100:	and	w0, w0, #0xff
   11104:	and	w0, w0, #0x3
   11108:	str	w0, [sp, #60]
   1110c:	ldr	w0, [sp, #60]
   11110:	cmp	w0, #0x1
   11114:	b.eq	11148 <ZSTD_decodeLiteralsBlock+0x644>  // b.none
   11118:	ldr	w0, [sp, #60]
   1111c:	cmp	w0, #0x3
   11120:	b.eq	11170 <ZSTD_decodeLiteralsBlock+0x66c>  // b.none
   11124:	mov	x0, #0x1                   	// #1
   11128:	str	x0, [sp, #104]
   1112c:	ldr	x0, [sp, #96]
   11130:	ldrb	w0, [x0]
   11134:	lsr	w0, w0, #3
   11138:	and	w0, w0, #0xff
   1113c:	and	x0, x0, #0xff
   11140:	str	x0, [sp, #112]
   11144:	b	111a4 <ZSTD_decodeLiteralsBlock+0x6a0>
   11148:	mov	x0, #0x2                   	// #2
   1114c:	str	x0, [sp, #104]
   11150:	ldr	x0, [sp, #96]
   11154:	bl	f3ac <MEM_readLE16>
   11158:	and	w0, w0, #0xffff
   1115c:	lsr	w0, w0, #4
   11160:	and	w0, w0, #0xffff
   11164:	and	x0, x0, #0xffff
   11168:	str	x0, [sp, #112]
   1116c:	b	111a4 <ZSTD_decodeLiteralsBlock+0x6a0>
   11170:	mov	x0, #0x3                   	// #3
   11174:	str	x0, [sp, #104]
   11178:	ldr	x0, [sp, #96]
   1117c:	bl	f410 <MEM_readLE24>
   11180:	lsr	w0, w0, #4
   11184:	mov	w0, w0
   11188:	str	x0, [sp, #112]
   1118c:	ldr	x0, [sp, #24]
   11190:	cmp	x0, #0x3
   11194:	b.hi	111a0 <ZSTD_decodeLiteralsBlock+0x69c>  // b.pmore
   11198:	mov	x0, #0xffffffffffffffec    	// #-20
   1119c:	b	1121c <ZSTD_decodeLiteralsBlock+0x718>
   111a0:	nop
   111a4:	ldr	x0, [sp, #112]
   111a8:	cmp	x0, #0x20, lsl #12
   111ac:	b.ls	111b8 <ZSTD_decodeLiteralsBlock+0x6b4>  // b.plast
   111b0:	mov	x0, #0xffffffffffffffec    	// #-20
   111b4:	b	1121c <ZSTD_decodeLiteralsBlock+0x718>
   111b8:	ldr	x1, [sp, #40]
   111bc:	mov	x0, #0x71d8                	// #29144
   111c0:	add	x3, x1, x0
   111c4:	ldr	x1, [sp, #96]
   111c8:	ldr	x0, [sp, #104]
   111cc:	add	x0, x1, x0
   111d0:	ldrb	w0, [x0]
   111d4:	mov	w1, w0
   111d8:	ldr	x0, [sp, #112]
   111dc:	add	x0, x0, #0x8
   111e0:	mov	x2, x0
   111e4:	mov	x0, x3
   111e8:	bl	0 <grub_memset>
   111ec:	ldr	x1, [sp, #40]
   111f0:	mov	x0, #0x71d8                	// #29144
   111f4:	add	x1, x1, x0
   111f8:	ldr	x0, [sp, #40]
   111fc:	str	x1, [x0, #28952]
   11200:	ldr	x0, [sp, #40]
   11204:	ldr	x1, [sp, #112]
   11208:	str	x1, [x0, #28984]
   1120c:	ldr	x0, [sp, #104]
   11210:	add	x0, x0, #0x1
   11214:	b	1121c <ZSTD_decodeLiteralsBlock+0x718>
   11218:	mov	x0, #0xffffffffffffffec    	// #-20
   1121c:	ldp	x29, x30, [sp], #176
   11220:	ret

0000000000011224 <ZSTD_buildSeqTable_rle>:
   11224:	sub	sp, sp, #0x30
   11228:	str	x0, [sp, #8]
   1122c:	str	w1, [sp, #4]
   11230:	str	w2, [sp]
   11234:	ldr	x0, [sp, #8]
   11238:	str	x0, [sp, #40]
   1123c:	ldr	x0, [sp, #40]
   11240:	str	x0, [sp, #32]
   11244:	ldr	x0, [sp, #8]
   11248:	add	x0, x0, #0x8
   1124c:	str	x0, [sp, #24]
   11250:	ldr	x0, [sp, #32]
   11254:	str	wzr, [x0, #4]
   11258:	ldr	x0, [sp, #32]
   1125c:	str	wzr, [x0]
   11260:	ldr	x0, [sp, #24]
   11264:	strb	wzr, [x0, #3]
   11268:	ldr	x0, [sp, #24]
   1126c:	strh	wzr, [x0]
   11270:	ldr	w0, [sp]
   11274:	and	w1, w0, #0xff
   11278:	ldr	x0, [sp, #24]
   1127c:	strb	w1, [x0, #2]
   11280:	ldr	x0, [sp, #24]
   11284:	ldr	w1, [sp, #4]
   11288:	str	w1, [x0, #4]
   1128c:	nop
   11290:	add	sp, sp, #0x30
   11294:	ret

0000000000011298 <ZSTD_buildFSETable>:
   11298:	stp	x29, x30, [sp, #-256]!
   1129c:	mov	x29, sp
   112a0:	str	x19, [sp, #16]
   112a4:	str	x0, [sp, #72]
   112a8:	str	x1, [sp, #64]
   112ac:	str	w2, [sp, #60]
   112b0:	str	x3, [sp, #48]
   112b4:	str	x4, [sp, #40]
   112b8:	str	w5, [sp, #56]
   112bc:	ldr	x0, [sp, #72]
   112c0:	add	x0, x0, #0x8
   112c4:	str	x0, [sp, #224]
   112c8:	ldr	w0, [sp, #60]
   112cc:	add	w0, w0, #0x1
   112d0:	str	w0, [sp, #220]
   112d4:	ldr	w0, [sp, #56]
   112d8:	mov	w1, #0x1                   	// #1
   112dc:	lsl	w0, w1, w0
   112e0:	str	w0, [sp, #216]
   112e4:	ldr	w0, [sp, #216]
   112e8:	sub	w0, w0, #0x1
   112ec:	str	w0, [sp, #252]
   112f0:	ldr	w0, [sp, #56]
   112f4:	str	w0, [sp, #84]
   112f8:	mov	w0, #0x1                   	// #1
   112fc:	str	w0, [sp, #80]
   11300:	ldr	w0, [sp, #56]
   11304:	sub	w0, w0, #0x1
   11308:	mov	w1, #0x1                   	// #1
   1130c:	lsl	w0, w1, w0
   11310:	strh	w0, [sp, #214]
   11314:	str	wzr, [sp, #248]
   11318:	b	113cc <ZSTD_buildFSETable+0x134>
   1131c:	ldr	w0, [sp, #248]
   11320:	lsl	x0, x0, #1
   11324:	ldr	x1, [sp, #64]
   11328:	add	x0, x1, x0
   1132c:	ldrsh	w0, [x0]
   11330:	cmn	w0, #0x1
   11334:	b.ne	11374 <ZSTD_buildFSETable+0xdc>  // b.any
   11338:	ldr	w0, [sp, #252]
   1133c:	sub	w1, w0, #0x1
   11340:	str	w1, [sp, #252]
   11344:	mov	w0, w0
   11348:	lsl	x0, x0, #3
   1134c:	ldr	x1, [sp, #224]
   11350:	add	x0, x1, x0
   11354:	ldr	w1, [sp, #248]
   11358:	str	w1, [x0, #4]
   1135c:	ldr	w0, [sp, #248]
   11360:	lsl	x0, x0, #1
   11364:	add	x1, sp, #0x58
   11368:	mov	w2, #0x1                   	// #1
   1136c:	strh	w2, [x1, x0]
   11370:	b	113c0 <ZSTD_buildFSETable+0x128>
   11374:	ldr	w0, [sp, #248]
   11378:	lsl	x0, x0, #1
   1137c:	ldr	x1, [sp, #64]
   11380:	add	x0, x1, x0
   11384:	ldrsh	w0, [x0]
   11388:	ldrsh	w1, [sp, #214]
   1138c:	cmp	w1, w0
   11390:	b.gt	11398 <ZSTD_buildFSETable+0x100>
   11394:	str	wzr, [sp, #80]
   11398:	ldr	w0, [sp, #248]
   1139c:	lsl	x0, x0, #1
   113a0:	ldr	x1, [sp, #64]
   113a4:	add	x0, x1, x0
   113a8:	ldrsh	w0, [x0]
   113ac:	and	w2, w0, #0xffff
   113b0:	ldr	w0, [sp, #248]
   113b4:	lsl	x0, x0, #1
   113b8:	add	x1, sp, #0x58
   113bc:	strh	w2, [x1, x0]
   113c0:	ldr	w0, [sp, #248]
   113c4:	add	w0, w0, #0x1
   113c8:	str	w0, [sp, #248]
   113cc:	ldr	w1, [sp, #248]
   113d0:	ldr	w0, [sp, #220]
   113d4:	cmp	w1, w0
   113d8:	b.cc	1131c <ZSTD_buildFSETable+0x84>  // b.lo, b.ul, b.last
   113dc:	add	x0, sp, #0x50
   113e0:	mov	x2, #0x8                   	// #8
   113e4:	mov	x1, x0
   113e8:	ldr	x0, [sp, #72]
   113ec:	bl	f2e0 <grub_memcpy>
   113f0:	ldr	w0, [sp, #216]
   113f4:	sub	w0, w0, #0x1
   113f8:	str	w0, [sp, #208]
   113fc:	ldr	w0, [sp, #216]
   11400:	lsr	w1, w0, #1
   11404:	ldr	w0, [sp, #216]
   11408:	lsr	w0, w0, #3
   1140c:	add	w0, w1, w0
   11410:	add	w0, w0, #0x3
   11414:	str	w0, [sp, #204]
   11418:	str	wzr, [sp, #240]
   1141c:	str	wzr, [sp, #244]
   11420:	b	114c4 <ZSTD_buildFSETable+0x22c>
   11424:	str	wzr, [sp, #236]
   11428:	b	11494 <ZSTD_buildFSETable+0x1fc>
   1142c:	ldr	w0, [sp, #240]
   11430:	lsl	x0, x0, #3
   11434:	ldr	x1, [sp, #224]
   11438:	add	x0, x1, x0
   1143c:	ldr	w1, [sp, #244]
   11440:	str	w1, [x0, #4]
   11444:	ldr	w1, [sp, #240]
   11448:	ldr	w0, [sp, #204]
   1144c:	add	w0, w1, w0
   11450:	ldr	w1, [sp, #208]
   11454:	and	w0, w1, w0
   11458:	str	w0, [sp, #240]
   1145c:	b	11478 <ZSTD_buildFSETable+0x1e0>
   11460:	ldr	w1, [sp, #240]
   11464:	ldr	w0, [sp, #204]
   11468:	add	w0, w1, w0
   1146c:	ldr	w1, [sp, #208]
   11470:	and	w0, w1, w0
   11474:	str	w0, [sp, #240]
   11478:	ldr	w1, [sp, #240]
   1147c:	ldr	w0, [sp, #252]
   11480:	cmp	w1, w0
   11484:	b.hi	11460 <ZSTD_buildFSETable+0x1c8>  // b.pmore
   11488:	ldr	w0, [sp, #236]
   1148c:	add	w0, w0, #0x1
   11490:	str	w0, [sp, #236]
   11494:	ldr	w0, [sp, #244]
   11498:	lsl	x0, x0, #1
   1149c:	ldr	x1, [sp, #64]
   114a0:	add	x0, x1, x0
   114a4:	ldrsh	w0, [x0]
   114a8:	mov	w1, w0
   114ac:	ldr	w0, [sp, #236]
   114b0:	cmp	w0, w1
   114b4:	b.lt	1142c <ZSTD_buildFSETable+0x194>  // b.tstop
   114b8:	ldr	w0, [sp, #244]
   114bc:	add	w0, w0, #0x1
   114c0:	str	w0, [sp, #244]
   114c4:	ldr	w1, [sp, #244]
   114c8:	ldr	w0, [sp, #220]
   114cc:	cmp	w1, w0
   114d0:	b.cc	11424 <ZSTD_buildFSETable+0x18c>  // b.lo, b.ul, b.last
   114d4:	str	wzr, [sp, #232]
   114d8:	b	115f8 <ZSTD_buildFSETable+0x360>
   114dc:	ldr	w0, [sp, #232]
   114e0:	lsl	x0, x0, #3
   114e4:	ldr	x1, [sp, #224]
   114e8:	add	x0, x1, x0
   114ec:	ldr	w0, [x0, #4]
   114f0:	str	w0, [sp, #200]
   114f4:	ldr	w0, [sp, #200]
   114f8:	lsl	x0, x0, #1
   114fc:	add	x1, sp, #0x58
   11500:	ldrh	w0, [x1, x0]
   11504:	add	w1, w0, #0x1
   11508:	and	w3, w1, #0xffff
   1150c:	ldr	w1, [sp, #200]
   11510:	lsl	x1, x1, #1
   11514:	add	x2, sp, #0x58
   11518:	strh	w3, [x2, x1]
   1151c:	str	w0, [sp, #196]
   11520:	ldr	w0, [sp, #56]
   11524:	and	w19, w0, #0xff
   11528:	ldr	w0, [sp, #196]
   1152c:	bl	f5cc <BIT_highbit32>
   11530:	and	w1, w0, #0xff
   11534:	ldr	w0, [sp, #232]
   11538:	lsl	x0, x0, #3
   1153c:	ldr	x2, [sp, #224]
   11540:	add	x0, x2, x0
   11544:	sub	w1, w19, w1
   11548:	and	w1, w1, #0xff
   1154c:	strb	w1, [x0, #3]
   11550:	ldr	w0, [sp, #232]
   11554:	lsl	x0, x0, #3
   11558:	ldr	x1, [sp, #224]
   1155c:	add	x0, x1, x0
   11560:	ldrb	w0, [x0, #3]
   11564:	mov	w1, w0
   11568:	ldr	w0, [sp, #196]
   1156c:	lsl	w0, w0, w1
   11570:	and	w2, w0, #0xffff
   11574:	ldr	w0, [sp, #216]
   11578:	and	w1, w0, #0xffff
   1157c:	ldr	w0, [sp, #232]
   11580:	lsl	x0, x0, #3
   11584:	ldr	x3, [sp, #224]
   11588:	add	x0, x3, x0
   1158c:	sub	w1, w2, w1
   11590:	and	w1, w1, #0xffff
   11594:	strh	w1, [x0]
   11598:	ldr	w0, [sp, #200]
   1159c:	lsl	x0, x0, #2
   115a0:	ldr	x1, [sp, #40]
   115a4:	add	x0, x1, x0
   115a8:	ldr	w2, [x0]
   115ac:	ldr	w0, [sp, #232]
   115b0:	lsl	x0, x0, #3
   115b4:	ldr	x1, [sp, #224]
   115b8:	add	x0, x1, x0
   115bc:	and	w1, w2, #0xff
   115c0:	strb	w1, [x0, #2]
   115c4:	ldr	w0, [sp, #200]
   115c8:	lsl	x0, x0, #2
   115cc:	ldr	x1, [sp, #48]
   115d0:	add	x1, x1, x0
   115d4:	ldr	w0, [sp, #232]
   115d8:	lsl	x0, x0, #3
   115dc:	ldr	x2, [sp, #224]
   115e0:	add	x0, x2, x0
   115e4:	ldr	w1, [x1]
   115e8:	str	w1, [x0, #4]
   115ec:	ldr	w0, [sp, #232]
   115f0:	add	w0, w0, #0x1
   115f4:	str	w0, [sp, #232]
   115f8:	ldr	w1, [sp, #232]
   115fc:	ldr	w0, [sp, #216]
   11600:	cmp	w1, w0
   11604:	b.cc	114dc <ZSTD_buildFSETable+0x244>  // b.lo, b.ul, b.last
   11608:	nop
   1160c:	nop
   11610:	ldr	x19, [sp, #16]
   11614:	ldp	x29, x30, [sp], #256
   11618:	ret

000000000001161c <ZSTD_buildSeqTable>:
   1161c:	stp	x29, x30, [sp, #-256]!
   11620:	mov	x29, sp
   11624:	str	x0, [sp, #72]
   11628:	str	x1, [sp, #64]
   1162c:	str	w2, [sp, #60]
   11630:	str	w3, [sp, #56]
   11634:	str	w4, [sp, #52]
   11638:	str	x5, [sp, #40]
   1163c:	str	x6, [sp, #32]
   11640:	str	x7, [sp, #24]
   11644:	ldr	w0, [sp, #60]
   11648:	cmp	w0, #0x3
   1164c:	b.eq	11734 <ZSTD_buildSeqTable+0x118>  // b.none
   11650:	ldr	w0, [sp, #60]
   11654:	cmp	w0, #0x3
   11658:	b.hi	1185c <ZSTD_buildSeqTable+0x240>  // b.pmore
   1165c:	ldr	w0, [sp, #60]
   11660:	cmp	w0, #0x2
   11664:	b.eq	117d4 <ZSTD_buildSeqTable+0x1b8>  // b.none
   11668:	ldr	w0, [sp, #60]
   1166c:	cmp	w0, #0x2
   11670:	b.hi	1185c <ZSTD_buildSeqTable+0x240>  // b.pmore
   11674:	ldr	w0, [sp, #60]
   11678:	cmp	w0, #0x0
   1167c:	b.eq	11720 <ZSTD_buildSeqTable+0x104>  // b.none
   11680:	ldr	w0, [sp, #60]
   11684:	cmp	w0, #0x1
   11688:	b.ne	1185c <ZSTD_buildSeqTable+0x240>  // b.any
   1168c:	ldr	x0, [sp, #32]
   11690:	cmp	x0, #0x0
   11694:	b.ne	116a0 <ZSTD_buildSeqTable+0x84>  // b.any
   11698:	mov	x0, #0xffffffffffffffb8    	// #-72
   1169c:	b	11860 <ZSTD_buildSeqTable+0x244>
   116a0:	ldr	x0, [sp, #40]
   116a4:	ldrb	w0, [x0]
   116a8:	mov	w1, w0
   116ac:	ldr	w0, [sp, #56]
   116b0:	cmp	w1, w0
   116b4:	b.ls	116c0 <ZSTD_buildSeqTable+0xa4>  // b.plast
   116b8:	mov	x0, #0xffffffffffffffec    	// #-20
   116bc:	b	11860 <ZSTD_buildSeqTable+0x244>
   116c0:	ldr	x0, [sp, #40]
   116c4:	ldrb	w0, [x0]
   116c8:	str	w0, [sp, #204]
   116cc:	ldr	w0, [sp, #204]
   116d0:	lsl	x0, x0, #2
   116d4:	ldr	x1, [sp, #24]
   116d8:	add	x0, x1, x0
   116dc:	ldr	w0, [x0]
   116e0:	str	w0, [sp, #200]
   116e4:	ldr	w0, [sp, #204]
   116e8:	lsl	x0, x0, #2
   116ec:	ldr	x1, [sp, #256]
   116f0:	add	x0, x1, x0
   116f4:	ldr	w0, [x0]
   116f8:	str	w0, [sp, #196]
   116fc:	ldr	w2, [sp, #196]
   11700:	ldr	w1, [sp, #200]
   11704:	ldr	x0, [sp, #72]
   11708:	bl	11224 <ZSTD_buildSeqTable_rle>
   1170c:	ldr	x0, [sp, #64]
   11710:	ldr	x1, [sp, #72]
   11714:	str	x1, [x0]
   11718:	mov	x0, #0x1                   	// #1
   1171c:	b	11860 <ZSTD_buildSeqTable+0x244>
   11720:	ldr	x0, [sp, #64]
   11724:	ldr	x1, [sp, #264]
   11728:	str	x1, [x0]
   1172c:	mov	x0, #0x0                   	// #0
   11730:	b	11860 <ZSTD_buildSeqTable+0x244>
   11734:	ldr	w0, [sp, #272]
   11738:	cmp	w0, #0x0
   1173c:	b.ne	11748 <ZSTD_buildSeqTable+0x12c>  // b.any
   11740:	mov	x0, #0xffffffffffffffec    	// #-20
   11744:	b	11860 <ZSTD_buildSeqTable+0x244>
   11748:	ldr	w0, [sp, #280]
   1174c:	cmp	w0, #0x0
   11750:	b.eq	117cc <ZSTD_buildSeqTable+0x1b0>  // b.none
   11754:	ldr	w0, [sp, #288]
   11758:	cmp	w0, #0x18
   1175c:	b.le	117cc <ZSTD_buildSeqTable+0x1b0>
   11760:	ldr	x0, [sp, #64]
   11764:	ldr	x0, [x0]
   11768:	str	x0, [sp, #240]
   1176c:	ldr	w0, [sp, #52]
   11770:	mov	w1, #0x1                   	// #1
   11774:	lsl	w0, w1, w0
   11778:	add	w0, w0, #0x1
   1177c:	sxtw	x0, w0
   11780:	lsl	x0, x0, #3
   11784:	str	x0, [sp, #232]
   11788:	ldr	x0, [sp, #240]
   1178c:	str	x0, [sp, #224]
   11790:	ldr	x0, [sp, #232]
   11794:	str	x0, [sp, #216]
   11798:	str	xzr, [sp, #248]
   1179c:	b	117bc <ZSTD_buildSeqTable+0x1a0>
   117a0:	ldr	x1, [sp, #224]
   117a4:	ldr	x0, [sp, #248]
   117a8:	add	x0, x1, x0
   117ac:	prfm	pldl2keep, [x0]
   117b0:	ldr	x0, [sp, #248]
   117b4:	add	x0, x0, #0x40
   117b8:	str	x0, [sp, #248]
   117bc:	ldr	x1, [sp, #248]
   117c0:	ldr	x0, [sp, #216]
   117c4:	cmp	x1, x0
   117c8:	b.cc	117a0 <ZSTD_buildSeqTable+0x184>  // b.lo, b.ul, b.last
   117cc:	mov	x0, #0x0                   	// #0
   117d0:	b	11860 <ZSTD_buildSeqTable+0x244>
   117d4:	add	x2, sp, #0xc0
   117d8:	add	x1, sp, #0x38
   117dc:	add	x0, sp, #0x50
   117e0:	ldr	x4, [sp, #32]
   117e4:	ldr	x3, [sp, #40]
   117e8:	bl	1b8 <FSE_readNCount>
   117ec:	str	x0, [sp, #208]
   117f0:	ldr	x0, [sp, #208]
   117f4:	bl	f558 <ERR_isError>
   117f8:	cmp	w0, #0x0
   117fc:	b.eq	11808 <ZSTD_buildSeqTable+0x1ec>  // b.none
   11800:	mov	x0, #0xffffffffffffffec    	// #-20
   11804:	b	11860 <ZSTD_buildSeqTable+0x244>
   11808:	ldr	w0, [sp, #192]
   1180c:	ldr	w1, [sp, #52]
   11810:	cmp	w1, w0
   11814:	b.cs	11820 <ZSTD_buildSeqTable+0x204>  // b.hs, b.nlast
   11818:	mov	x0, #0xffffffffffffffec    	// #-20
   1181c:	b	11860 <ZSTD_buildSeqTable+0x244>
   11820:	ldr	w1, [sp, #56]
   11824:	ldr	w2, [sp, #192]
   11828:	add	x0, sp, #0x50
   1182c:	mov	w5, w2
   11830:	ldr	x4, [sp, #256]
   11834:	ldr	x3, [sp, #24]
   11838:	mov	w2, w1
   1183c:	mov	x1, x0
   11840:	ldr	x0, [sp, #72]
   11844:	bl	11298 <ZSTD_buildFSETable>
   11848:	ldr	x0, [sp, #64]
   1184c:	ldr	x1, [sp, #72]
   11850:	str	x1, [x0]
   11854:	ldr	x0, [sp, #208]
   11858:	b	11860 <ZSTD_buildSeqTable+0x244>
   1185c:	mov	x0, #0xffffffffffffffff    	// #-1
   11860:	ldp	x29, x30, [sp], #256
   11864:	ret

0000000000011868 <ZSTD_decodeSeqHeaders>:
   11868:	sub	sp, sp, #0xe0
   1186c:	stp	x29, x30, [sp, #48]
   11870:	add	x29, sp, #0x30
   11874:	str	x0, [sp, #88]
   11878:	str	x1, [sp, #80]
   1187c:	str	x2, [sp, #72]
   11880:	str	x3, [sp, #64]
   11884:	ldr	x0, [sp, #72]
   11888:	str	x0, [sp, #192]
   1188c:	ldr	x1, [sp, #192]
   11890:	ldr	x0, [sp, #64]
   11894:	add	x0, x1, x0
   11898:	str	x0, [sp, #184]
   1189c:	ldr	x0, [sp, #192]
   118a0:	str	x0, [sp, #216]
   118a4:	ldr	x0, [sp, #64]
   118a8:	cmp	x0, #0x0
   118ac:	b.ne	118b8 <ZSTD_decodeSeqHeaders+0x50>  // b.any
   118b0:	mov	x0, #0xffffffffffffffb8    	// #-72
   118b4:	b	11d18 <ZSTD_decodeSeqHeaders+0x4b0>
   118b8:	ldr	x0, [sp, #216]
   118bc:	add	x1, x0, #0x1
   118c0:	str	x1, [sp, #216]
   118c4:	ldrb	w0, [x0]
   118c8:	str	w0, [sp, #212]
   118cc:	ldr	w0, [sp, #212]
   118d0:	cmp	w0, #0x0
   118d4:	b.ne	118e8 <ZSTD_decodeSeqHeaders+0x80>  // b.any
   118d8:	ldr	x0, [sp, #80]
   118dc:	str	wzr, [x0]
   118e0:	mov	x0, #0x1                   	// #1
   118e4:	b	11d18 <ZSTD_decodeSeqHeaders+0x4b0>
   118e8:	ldr	w0, [sp, #212]
   118ec:	cmp	w0, #0x7f
   118f0:	b.le	11984 <ZSTD_decodeSeqHeaders+0x11c>
   118f4:	ldr	w0, [sp, #212]
   118f8:	cmp	w0, #0xff
   118fc:	b.ne	11948 <ZSTD_decodeSeqHeaders+0xe0>  // b.any
   11900:	ldr	x0, [sp, #216]
   11904:	add	x0, x0, #0x2
   11908:	ldr	x1, [sp, #184]
   1190c:	cmp	x1, x0
   11910:	b.cs	1191c <ZSTD_decodeSeqHeaders+0xb4>  // b.hs, b.nlast
   11914:	mov	x0, #0xffffffffffffffb8    	// #-72
   11918:	b	11d18 <ZSTD_decodeSeqHeaders+0x4b0>
   1191c:	ldr	x0, [sp, #216]
   11920:	bl	f3ac <MEM_readLE16>
   11924:	and	w0, w0, #0xffff
   11928:	mov	w1, w0
   1192c:	mov	w0, #0x7f00                	// #32512
   11930:	add	w0, w1, w0
   11934:	str	w0, [sp, #212]
   11938:	ldr	x0, [sp, #216]
   1193c:	add	x0, x0, #0x2
   11940:	str	x0, [sp, #216]
   11944:	b	11984 <ZSTD_decodeSeqHeaders+0x11c>
   11948:	ldr	x1, [sp, #216]
   1194c:	ldr	x0, [sp, #184]
   11950:	cmp	x1, x0
   11954:	b.cc	11960 <ZSTD_decodeSeqHeaders+0xf8>  // b.lo, b.ul, b.last
   11958:	mov	x0, #0xffffffffffffffb8    	// #-72
   1195c:	b	11d18 <ZSTD_decodeSeqHeaders+0x4b0>
   11960:	ldr	w0, [sp, #212]
   11964:	sub	w0, w0, #0x80
   11968:	lsl	w1, w0, #8
   1196c:	ldr	x0, [sp, #216]
   11970:	add	x2, x0, #0x1
   11974:	str	x2, [sp, #216]
   11978:	ldrb	w0, [x0]
   1197c:	add	w0, w1, w0
   11980:	str	w0, [sp, #212]
   11984:	ldr	x0, [sp, #80]
   11988:	ldr	w1, [sp, #212]
   1198c:	str	w1, [x0]
   11990:	ldr	x0, [sp, #216]
   11994:	add	x0, x0, #0x4
   11998:	ldr	x1, [sp, #184]
   1199c:	cmp	x1, x0
   119a0:	b.cs	119ac <ZSTD_decodeSeqHeaders+0x144>  // b.hs, b.nlast
   119a4:	mov	x0, #0xffffffffffffffb8    	// #-72
   119a8:	b	11d18 <ZSTD_decodeSeqHeaders+0x4b0>
   119ac:	ldr	x0, [sp, #216]
   119b0:	ldrb	w0, [x0]
   119b4:	lsr	w0, w0, #6
   119b8:	and	w0, w0, #0xff
   119bc:	str	w0, [sp, #180]
   119c0:	ldr	x0, [sp, #216]
   119c4:	ldrb	w0, [x0]
   119c8:	lsr	w0, w0, #4
   119cc:	and	w0, w0, #0xff
   119d0:	and	w0, w0, #0x3
   119d4:	str	w0, [sp, #176]
   119d8:	ldr	x0, [sp, #216]
   119dc:	ldrb	w0, [x0]
   119e0:	lsr	w0, w0, #2
   119e4:	and	w0, w0, #0xff
   119e8:	and	w0, w0, #0x3
   119ec:	str	w0, [sp, #172]
   119f0:	ldr	x0, [sp, #216]
   119f4:	add	x0, x0, #0x1
   119f8:	str	x0, [sp, #216]
   119fc:	ldr	x0, [sp, #88]
   11a00:	add	x8, x0, #0x20
   11a04:	ldr	x9, [sp, #88]
   11a08:	ldr	x1, [sp, #184]
   11a0c:	ldr	x0, [sp, #216]
   11a10:	sub	x0, x1, x0
   11a14:	mov	x3, x0
   11a18:	ldr	x0, [sp, #88]
   11a1c:	add	x0, x0, #0x4, lsl #12
   11a20:	ldr	w0, [x0, #12460]
   11a24:	ldr	x1, [sp, #88]
   11a28:	add	x1, x1, #0x4, lsl #12
   11a2c:	ldr	w1, [x1, #12652]
   11a30:	ldr	w2, [sp, #212]
   11a34:	str	w2, [sp, #32]
   11a38:	str	w1, [sp, #24]
   11a3c:	str	w0, [sp, #16]
   11a40:	adrp	x0, 0 <grub_memcpy>
   11a44:	add	x0, x0, #0x0
   11a48:	ldr	x0, [x0]
   11a4c:	str	x0, [sp, #8]
   11a50:	adrp	x0, 0 <grub_memcpy>
   11a54:	add	x0, x0, #0x0
   11a58:	ldr	x0, [x0]
   11a5c:	str	x0, [sp]
   11a60:	adrp	x0, 0 <grub_memcpy>
   11a64:	add	x0, x0, #0x0
   11a68:	ldr	x7, [x0]
   11a6c:	mov	x6, x3
   11a70:	ldr	x5, [sp, #216]
   11a74:	mov	w4, #0x9                   	// #9
   11a78:	mov	w3, #0x23                  	// #35
   11a7c:	ldr	w2, [sp, #180]
   11a80:	mov	x1, x9
   11a84:	mov	x0, x8
   11a88:	bl	1161c <ZSTD_buildSeqTable>
   11a8c:	str	x0, [sp, #160]
   11a90:	ldr	x0, [sp, #160]
   11a94:	bl	f558 <ERR_isError>
   11a98:	cmp	w0, #0x0
   11a9c:	b.eq	11aa8 <ZSTD_decodeSeqHeaders+0x240>  // b.none
   11aa0:	mov	x0, #0xffffffffffffffec    	// #-20
   11aa4:	b	11d18 <ZSTD_decodeSeqHeaders+0x4b0>
   11aa8:	ldr	x1, [sp, #216]
   11aac:	ldr	x0, [sp, #160]
   11ab0:	add	x0, x1, x0
   11ab4:	str	x0, [sp, #216]
   11ab8:	ldr	x1, [sp, #88]
   11abc:	mov	x0, #0x1028                	// #4136
   11ac0:	add	x8, x1, x0
   11ac4:	ldr	x0, [sp, #88]
   11ac8:	add	x9, x0, #0x10
   11acc:	ldr	x1, [sp, #184]
   11ad0:	ldr	x0, [sp, #216]
   11ad4:	sub	x0, x1, x0
   11ad8:	mov	x3, x0
   11adc:	ldr	x0, [sp, #88]
   11ae0:	add	x0, x0, #0x4, lsl #12
   11ae4:	ldr	w0, [x0, #12460]
   11ae8:	ldr	x1, [sp, #88]
   11aec:	add	x1, x1, #0x4, lsl #12
   11af0:	ldr	w1, [x1, #12652]
   11af4:	ldr	w2, [sp, #212]
   11af8:	str	w2, [sp, #32]
   11afc:	str	w1, [sp, #24]
   11b00:	str	w0, [sp, #16]
   11b04:	adrp	x0, 0 <grub_memcpy>
   11b08:	add	x0, x0, #0x0
   11b0c:	ldr	x0, [x0]
   11b10:	str	x0, [sp, #8]
   11b14:	adrp	x0, 0 <grub_memcpy>
   11b18:	add	x0, x0, #0x0
   11b1c:	ldr	x0, [x0]
   11b20:	str	x0, [sp]
   11b24:	adrp	x0, 0 <grub_memcpy>
   11b28:	add	x0, x0, #0x0
   11b2c:	ldr	x7, [x0]
   11b30:	mov	x6, x3
   11b34:	ldr	x5, [sp, #216]
   11b38:	mov	w4, #0x8                   	// #8
   11b3c:	mov	w3, #0x1f                  	// #31
   11b40:	ldr	w2, [sp, #176]
   11b44:	mov	x1, x9
   11b48:	mov	x0, x8
   11b4c:	bl	1161c <ZSTD_buildSeqTable>
   11b50:	str	x0, [sp, #152]
   11b54:	ldr	x0, [sp, #152]
   11b58:	bl	f558 <ERR_isError>
   11b5c:	cmp	w0, #0x0
   11b60:	b.eq	11b6c <ZSTD_decodeSeqHeaders+0x304>  // b.none
   11b64:	mov	x0, #0xffffffffffffffec    	// #-20
   11b68:	b	11d18 <ZSTD_decodeSeqHeaders+0x4b0>
   11b6c:	ldr	x1, [sp, #216]
   11b70:	ldr	x0, [sp, #152]
   11b74:	add	x0, x1, x0
   11b78:	str	x0, [sp, #216]
   11b7c:	ldr	x1, [sp, #88]
   11b80:	mov	x0, #0x1830                	// #6192
   11b84:	add	x8, x1, x0
   11b88:	ldr	x0, [sp, #88]
   11b8c:	add	x9, x0, #0x8
   11b90:	ldr	x1, [sp, #184]
   11b94:	ldr	x0, [sp, #216]
   11b98:	sub	x0, x1, x0
   11b9c:	mov	x3, x0
   11ba0:	ldr	x0, [sp, #88]
   11ba4:	add	x0, x0, #0x4, lsl #12
   11ba8:	ldr	w0, [x0, #12460]
   11bac:	ldr	x1, [sp, #88]
   11bb0:	add	x1, x1, #0x4, lsl #12
   11bb4:	ldr	w1, [x1, #12652]
   11bb8:	ldr	w2, [sp, #212]
   11bbc:	str	w2, [sp, #32]
   11bc0:	str	w1, [sp, #24]
   11bc4:	str	w0, [sp, #16]
   11bc8:	adrp	x0, 0 <grub_memcpy>
   11bcc:	add	x0, x0, #0x0
   11bd0:	ldr	x0, [x0]
   11bd4:	str	x0, [sp, #8]
   11bd8:	adrp	x0, 0 <grub_memcpy>
   11bdc:	add	x0, x0, #0x0
   11be0:	ldr	x0, [x0]
   11be4:	str	x0, [sp]
   11be8:	adrp	x0, 0 <grub_memcpy>
   11bec:	add	x0, x0, #0x0
   11bf0:	ldr	x7, [x0]
   11bf4:	mov	x6, x3
   11bf8:	ldr	x5, [sp, #216]
   11bfc:	mov	w4, #0x9                   	// #9
   11c00:	mov	w3, #0x34                  	// #52
   11c04:	ldr	w2, [sp, #172]
   11c08:	mov	x1, x9
   11c0c:	mov	x0, x8
   11c10:	bl	1161c <ZSTD_buildSeqTable>
   11c14:	str	x0, [sp, #144]
   11c18:	ldr	x0, [sp, #144]
   11c1c:	bl	f558 <ERR_isError>
   11c20:	cmp	w0, #0x0
   11c24:	b.eq	11c30 <ZSTD_decodeSeqHeaders+0x3c8>  // b.none
   11c28:	mov	x0, #0xffffffffffffffec    	// #-20
   11c2c:	b	11d18 <ZSTD_decodeSeqHeaders+0x4b0>
   11c30:	ldr	x1, [sp, #216]
   11c34:	ldr	x0, [sp, #144]
   11c38:	add	x0, x1, x0
   11c3c:	str	x0, [sp, #216]
   11c40:	ldr	x0, [sp, #88]
   11c44:	add	x0, x0, #0x4, lsl #12
   11c48:	ldr	w0, [x0, #12652]
   11c4c:	cmp	w0, #0x0
   11c50:	b.eq	11d0c <ZSTD_decodeSeqHeaders+0x4a4>  // b.none
   11c54:	ldr	x0, [sp, #88]
   11c58:	ldr	x1, [x0, #28752]
   11c5c:	ldr	x0, [sp, #88]
   11c60:	ldr	x0, [x0, #28760]
   11c64:	sub	x0, x1, x0
   11c68:	str	x0, [sp, #136]
   11c6c:	ldr	w0, [sp, #212]
   11c70:	lsl	w0, w0, #6
   11c74:	sxtw	x0, w0
   11c78:	ldr	x2, [sp, #136]
   11c7c:	ldr	x1, [sp, #136]
   11c80:	cmp	x2, x0
   11c84:	csel	x0, x1, x0, ls  // ls = plast
   11c88:	str	x0, [sp, #128]
   11c8c:	ldr	x2, [sp, #128]
   11c90:	ldr	x1, [sp, #128]
   11c94:	mov	x0, #0x20000               	// #131072
   11c98:	cmp	x2, #0x20, lsl #12
   11c9c:	csel	x0, x1, x0, ls  // ls = plast
   11ca0:	str	x0, [sp, #120]
   11ca4:	ldr	x0, [sp, #88]
   11ca8:	ldr	x1, [x0, #28768]
   11cac:	ldr	x0, [sp, #120]
   11cb0:	neg	x0, x0
   11cb4:	add	x0, x1, x0
   11cb8:	str	x0, [sp, #112]
   11cbc:	ldr	x0, [sp, #112]
   11cc0:	str	x0, [sp, #104]
   11cc4:	ldr	x0, [sp, #120]
   11cc8:	str	x0, [sp, #96]
   11ccc:	str	xzr, [sp, #200]
   11cd0:	b	11cf0 <ZSTD_decodeSeqHeaders+0x488>
   11cd4:	ldr	x1, [sp, #104]
   11cd8:	ldr	x0, [sp, #200]
   11cdc:	add	x0, x1, x0
   11ce0:	prfm	pldl2keep, [x0]
   11ce4:	ldr	x0, [sp, #200]
   11ce8:	add	x0, x0, #0x40
   11cec:	str	x0, [sp, #200]
   11cf0:	ldr	x1, [sp, #200]
   11cf4:	ldr	x0, [sp, #96]
   11cf8:	cmp	x1, x0
   11cfc:	b.cc	11cd4 <ZSTD_decodeSeqHeaders+0x46c>  // b.lo, b.ul, b.last
   11d00:	ldr	x0, [sp, #88]
   11d04:	add	x0, x0, #0x4, lsl #12
   11d08:	str	wzr, [x0, #12652]
   11d0c:	ldr	x1, [sp, #216]
   11d10:	ldr	x0, [sp, #192]
   11d14:	sub	x0, x1, x0
   11d18:	ldp	x29, x30, [sp, #48]
   11d1c:	add	sp, sp, #0xe0
   11d20:	ret
   11d24:	nop
	...

0000000000011d70 <ZSTD_execSequenceLast7>:
   11d70:	stp	x29, x30, [sp, #-160]!
   11d74:	mov	x29, sp
   11d78:	str	x19, [sp, #16]
   11d7c:	str	x0, [sp, #88]
   11d80:	str	x1, [sp, #80]
   11d84:	mov	x19, x2
   11d88:	str	x3, [sp, #72]
   11d8c:	str	x4, [sp, #64]
   11d90:	str	x5, [sp, #56]
   11d94:	str	x6, [sp, #48]
   11d98:	str	x7, [sp, #40]
   11d9c:	ldr	x0, [x19]
   11da0:	ldr	x1, [sp, #88]
   11da4:	add	x0, x1, x0
   11da8:	str	x0, [sp, #144]
   11dac:	ldr	x1, [x19]
   11db0:	ldr	x0, [x19, #8]
   11db4:	add	x0, x1, x0
   11db8:	str	x0, [sp, #136]
   11dbc:	ldr	x1, [sp, #88]
   11dc0:	ldr	x0, [sp, #136]
   11dc4:	add	x0, x1, x0
   11dc8:	str	x0, [sp, #128]
   11dcc:	ldr	x0, [sp, #80]
   11dd0:	sub	x0, x0, #0x8
   11dd4:	str	x0, [sp, #120]
   11dd8:	ldr	x0, [sp, #72]
   11ddc:	ldr	x1, [x0]
   11de0:	ldr	x0, [x19]
   11de4:	add	x0, x1, x0
   11de8:	str	x0, [sp, #112]
   11dec:	ldr	x0, [x19, #16]
   11df0:	neg	x0, x0
   11df4:	ldr	x1, [sp, #144]
   11df8:	add	x0, x1, x0
   11dfc:	str	x0, [sp, #152]
   11e00:	ldr	x1, [sp, #128]
   11e04:	ldr	x0, [sp, #80]
   11e08:	cmp	x1, x0
   11e0c:	b.ls	11e18 <ZSTD_execSequenceLast7+0xa8>  // b.plast
   11e10:	mov	x0, #0xffffffffffffffba    	// #-70
   11e14:	b	11fe8 <ZSTD_execSequenceLast7+0x278>
   11e18:	ldr	x1, [sp, #112]
   11e1c:	ldr	x0, [sp, #64]
   11e20:	cmp	x1, x0
   11e24:	b.ls	11e30 <ZSTD_execSequenceLast7+0xc0>  // b.plast
   11e28:	mov	x0, #0xffffffffffffffec    	// #-20
   11e2c:	b	11fe8 <ZSTD_execSequenceLast7+0x278>
   11e30:	ldr	x1, [sp, #144]
   11e34:	ldr	x0, [sp, #120]
   11e38:	cmp	x1, x0
   11e3c:	b.hi	11e48 <ZSTD_execSequenceLast7+0xd8>  // b.pmore
   11e40:	mov	x0, #0xffffffffffffffff    	// #-1
   11e44:	b	11fe8 <ZSTD_execSequenceLast7+0x278>
   11e48:	ldr	x1, [sp, #88]
   11e4c:	ldr	x0, [sp, #120]
   11e50:	cmp	x1, x0
   11e54:	b.cs	11ed0 <ZSTD_execSequenceLast7+0x160>  // b.hs, b.nlast
   11e58:	ldr	x0, [sp, #72]
   11e5c:	ldr	x3, [x0]
   11e60:	ldr	x1, [sp, #120]
   11e64:	ldr	x0, [sp, #88]
   11e68:	sub	x0, x1, x0
   11e6c:	mov	x2, x0
   11e70:	mov	x1, x3
   11e74:	ldr	x0, [sp, #88]
   11e78:	bl	fbf8 <ZSTD_wildcopy>
   11e7c:	ldr	x0, [sp, #72]
   11e80:	ldr	x0, [x0]
   11e84:	ldr	x2, [sp, #120]
   11e88:	ldr	x1, [sp, #88]
   11e8c:	sub	x1, x2, x1
   11e90:	add	x1, x0, x1
   11e94:	ldr	x0, [sp, #72]
   11e98:	str	x1, [x0]
   11e9c:	ldr	x0, [sp, #120]
   11ea0:	str	x0, [sp, #88]
   11ea4:	b	11ed0 <ZSTD_execSequenceLast7+0x160>
   11ea8:	ldr	x0, [sp, #72]
   11eac:	ldr	x1, [x0]
   11eb0:	add	x2, x1, #0x1
   11eb4:	ldr	x0, [sp, #72]
   11eb8:	str	x2, [x0]
   11ebc:	ldr	x0, [sp, #88]
   11ec0:	add	x2, x0, #0x1
   11ec4:	str	x2, [sp, #88]
   11ec8:	ldrb	w1, [x1]
   11ecc:	strb	w1, [x0]
   11ed0:	ldr	x1, [sp, #88]
   11ed4:	ldr	x0, [sp, #144]
   11ed8:	cmp	x1, x0
   11edc:	b.cc	11ea8 <ZSTD_execSequenceLast7+0x138>  // b.lo, b.ul, b.last
   11ee0:	ldr	x0, [x19, #16]
   11ee4:	ldr	x2, [sp, #144]
   11ee8:	ldr	x1, [sp, #56]
   11eec:	sub	x1, x2, x1
   11ef0:	cmp	x0, x1
   11ef4:	b.ls	11fd4 <ZSTD_execSequenceLast7+0x264>  // b.plast
   11ef8:	ldr	x0, [x19, #16]
   11efc:	ldr	x2, [sp, #144]
   11f00:	ldr	x1, [sp, #48]
   11f04:	sub	x1, x2, x1
   11f08:	cmp	x0, x1
   11f0c:	b.ls	11f18 <ZSTD_execSequenceLast7+0x1a8>  // b.plast
   11f10:	mov	x0, #0xffffffffffffffec    	// #-20
   11f14:	b	11fe8 <ZSTD_execSequenceLast7+0x278>
   11f18:	ldr	x1, [sp, #56]
   11f1c:	ldr	x0, [sp, #152]
   11f20:	sub	x0, x1, x0
   11f24:	neg	x0, x0
   11f28:	ldr	x1, [sp, #40]
   11f2c:	add	x0, x1, x0
   11f30:	str	x0, [sp, #152]
   11f34:	ldr	x0, [x19, #8]
   11f38:	ldr	x1, [sp, #152]
   11f3c:	add	x0, x1, x0
   11f40:	ldr	x1, [sp, #40]
   11f44:	cmp	x1, x0
   11f48:	b.cc	11f68 <ZSTD_execSequenceLast7+0x1f8>  // b.lo, b.ul, b.last
   11f4c:	ldr	x0, [x19, #8]
   11f50:	mov	x2, x0
   11f54:	ldr	x1, [sp, #152]
   11f58:	ldr	x0, [sp, #144]
   11f5c:	bl	0 <grub_memmove>
   11f60:	ldr	x0, [sp, #136]
   11f64:	b	11fe8 <ZSTD_execSequenceLast7+0x278>
   11f68:	ldr	x1, [sp, #40]
   11f6c:	ldr	x0, [sp, #152]
   11f70:	sub	x0, x1, x0
   11f74:	str	x0, [sp, #104]
   11f78:	ldr	x2, [sp, #104]
   11f7c:	ldr	x1, [sp, #152]
   11f80:	ldr	x0, [sp, #144]
   11f84:	bl	0 <grub_memmove>
   11f88:	ldr	x1, [sp, #144]
   11f8c:	ldr	x0, [sp, #104]
   11f90:	add	x0, x1, x0
   11f94:	str	x0, [sp, #88]
   11f98:	ldr	x1, [x19, #8]
   11f9c:	ldr	x0, [sp, #104]
   11fa0:	sub	x0, x1, x0
   11fa4:	str	x0, [x19, #8]
   11fa8:	ldr	x0, [sp, #56]
   11fac:	str	x0, [sp, #152]
   11fb0:	b	11fd4 <ZSTD_execSequenceLast7+0x264>
   11fb4:	ldr	x1, [sp, #152]
   11fb8:	add	x0, x1, #0x1
   11fbc:	str	x0, [sp, #152]
   11fc0:	ldr	x0, [sp, #88]
   11fc4:	add	x2, x0, #0x1
   11fc8:	str	x2, [sp, #88]
   11fcc:	ldrb	w1, [x1]
   11fd0:	strb	w1, [x0]
   11fd4:	ldr	x1, [sp, #88]
   11fd8:	ldr	x0, [sp, #128]
   11fdc:	cmp	x1, x0
   11fe0:	b.cc	11fb4 <ZSTD_execSequenceLast7+0x244>  // b.lo, b.ul, b.last
   11fe4:	ldr	x0, [sp, #136]
   11fe8:	ldr	x19, [sp, #16]
   11fec:	ldp	x29, x30, [sp], #160
   11ff0:	ret

0000000000011ff4 <ZSTD_initFseState>:
   11ff4:	stp	x29, x30, [sp, #-64]!
   11ff8:	mov	x29, sp
   11ffc:	str	x0, [sp, #40]
   12000:	str	x1, [sp, #32]
   12004:	str	x2, [sp, #24]
   12008:	ldr	x0, [sp, #24]
   1200c:	str	x0, [sp, #56]
   12010:	ldr	x0, [sp, #56]
   12014:	str	x0, [sp, #48]
   12018:	ldr	x0, [sp, #48]
   1201c:	ldr	w0, [x0, #4]
   12020:	mov	w1, w0
   12024:	ldr	x0, [sp, #32]
   12028:	bl	f9d8 <BIT_readBits>
   1202c:	mov	x1, x0
   12030:	ldr	x0, [sp, #40]
   12034:	str	x1, [x0]
   12038:	ldr	x0, [sp, #32]
   1203c:	bl	fa48 <BIT_reloadDStream>
   12040:	ldr	x0, [sp, #24]
   12044:	add	x1, x0, #0x8
   12048:	ldr	x0, [sp, #40]
   1204c:	str	x1, [x0, #8]
   12050:	nop
   12054:	ldp	x29, x30, [sp], #64
   12058:	ret

000000000001205c <ZSTD_decompressSequences_default>:
   1205c:	sub	sp, sp, #0x310
   12060:	stp	x29, x30, [sp]
   12064:	mov	x29, sp
   12068:	str	x19, [sp, #16]
   1206c:	str	x0, [sp, #104]
   12070:	str	x1, [sp, #96]
   12074:	str	x2, [sp, #88]
   12078:	str	x3, [sp, #80]
   1207c:	str	x4, [sp, #72]
   12080:	str	w5, [sp, #68]
   12084:	str	w6, [sp, #64]
   12088:	ldr	x0, [sp, #104]
   1208c:	str	x0, [sp, #776]
   12090:	ldr	x0, [sp, #96]
   12094:	str	x0, [sp, #768]
   12098:	ldr	x0, [sp, #88]
   1209c:	str	x0, [sp, #760]
   120a0:	ldr	x0, [sp, #80]
   120a4:	str	x0, [sp, #752]
   120a8:	ldr	x0, [sp, #72]
   120ac:	str	x0, [sp, #744]
   120b0:	ldr	w0, [sp, #68]
   120b4:	str	w0, [sp, #740]
   120b8:	ldr	w0, [sp, #64]
   120bc:	str	w0, [sp, #736]
   120c0:	ldr	x0, [sp, #752]
   120c4:	str	x0, [sp, #728]
   120c8:	ldr	x1, [sp, #728]
   120cc:	ldr	x0, [sp, #744]
   120d0:	add	x0, x1, x0
   120d4:	str	x0, [sp, #720]
   120d8:	ldr	x0, [sp, #768]
   120dc:	str	x0, [sp, #712]
   120e0:	ldr	x1, [sp, #712]
   120e4:	ldr	x0, [sp, #760]
   120e8:	add	x0, x1, x0
   120ec:	str	x0, [sp, #704]
   120f0:	ldr	x0, [sp, #712]
   120f4:	str	x0, [sp, #696]
   120f8:	ldr	x0, [sp, #776]
   120fc:	ldr	x0, [x0, #28952]
   12100:	str	x0, [sp, #336]
   12104:	ldr	x1, [sp, #336]
   12108:	ldr	x0, [sp, #776]
   1210c:	ldr	x0, [x0, #28984]
   12110:	add	x0, x1, x0
   12114:	str	x0, [sp, #688]
   12118:	ldr	x0, [sp, #776]
   1211c:	ldr	x0, [x0, #28752]
   12120:	str	x0, [sp, #680]
   12124:	ldr	x0, [sp, #776]
   12128:	ldr	x0, [x0, #28760]
   1212c:	str	x0, [sp, #672]
   12130:	ldr	x0, [sp, #776]
   12134:	ldr	x0, [x0, #28768]
   12138:	str	x0, [sp, #664]
   1213c:	ldr	w0, [sp, #740]
   12140:	cmp	w0, #0x0
   12144:	b.eq	12c74 <ZSTD_decompressSequences_default+0xc18>  // b.none
   12148:	ldr	x0, [sp, #776]
   1214c:	add	x0, x0, #0x4, lsl #12
   12150:	mov	w1, #0x1                   	// #1
   12154:	str	w1, [x0, #12460]
   12158:	str	wzr, [sp, #660]
   1215c:	b	121a0 <ZSTD_decompressSequences_default+0x144>
   12160:	ldr	x1, [sp, #776]
   12164:	ldr	w2, [sp, #660]
   12168:	mov	x0, #0x1a0c                	// #6668
   1216c:	add	x0, x2, x0
   12170:	lsl	x0, x0, #2
   12174:	add	x0, x1, x0
   12178:	ldr	w0, [x0, #12]
   1217c:	mov	w2, w0
   12180:	ldr	w0, [sp, #660]
   12184:	add	x0, x0, #0xa
   12188:	lsl	x0, x0, #3
   1218c:	add	x1, sp, #0xb8
   12190:	str	x2, [x1, x0]
   12194:	ldr	w0, [sp, #660]
   12198:	add	w0, w0, #0x1
   1219c:	str	w0, [sp, #660]
   121a0:	ldr	w0, [sp, #660]
   121a4:	cmp	w0, #0x2
   121a8:	b.ls	12160 <ZSTD_decompressSequences_default+0x104>  // b.plast
   121ac:	ldr	x1, [sp, #720]
   121b0:	ldr	x0, [sp, #728]
   121b4:	sub	x0, x1, x0
   121b8:	mov	x1, x0
   121bc:	add	x0, sp, #0xb0
   121c0:	mov	x2, x1
   121c4:	ldr	x1, [sp, #728]
   121c8:	bl	f5ec <BIT_initDStream>
   121cc:	str	x0, [sp, #648]
   121d0:	ldr	x0, [sp, #648]
   121d4:	bl	f558 <ERR_isError>
   121d8:	cmp	w0, #0x0
   121dc:	b.eq	121e8 <ZSTD_decompressSequences_default+0x18c>  // b.none
   121e0:	mov	x0, #0xffffffffffffffec    	// #-20
   121e4:	b	12c70 <ZSTD_decompressSequences_default+0xc14>
   121e8:	ldr	x0, [sp, #776]
   121ec:	ldr	x2, [x0]
   121f0:	add	x1, sp, #0xb0
   121f4:	add	x0, sp, #0xb0
   121f8:	add	x0, x0, #0x28
   121fc:	bl	11ff4 <ZSTD_initFseState>
   12200:	ldr	x0, [sp, #776]
   12204:	ldr	x2, [x0, #16]
   12208:	add	x1, sp, #0xb0
   1220c:	add	x0, sp, #0xb0
   12210:	add	x0, x0, #0x38
   12214:	bl	11ff4 <ZSTD_initFseState>
   12218:	ldr	x0, [sp, #776]
   1221c:	ldr	x2, [x0, #8]
   12220:	add	x1, sp, #0xb0
   12224:	add	x0, sp, #0xb0
   12228:	add	x0, x0, #0x48
   1222c:	bl	11ff4 <ZSTD_initFseState>
   12230:	b	12be8 <ZSTD_decompressSequences_default+0xb8c>
   12234:	ldr	w0, [sp, #740]
   12238:	sub	w0, w0, #0x1
   1223c:	str	w0, [sp, #740]
   12240:	add	x0, sp, #0xb0
   12244:	str	x0, [sp, #640]
   12248:	ldr	w0, [sp, #736]
   1224c:	str	w0, [sp, #636]
   12250:	ldr	x0, [sp, #640]
   12254:	ldr	x1, [x0, #48]
   12258:	ldr	x0, [sp, #640]
   1225c:	ldr	x0, [x0, #40]
   12260:	lsl	x0, x0, #3
   12264:	add	x0, x1, x0
   12268:	ldrb	w0, [x0, #2]
   1226c:	str	w0, [sp, #632]
   12270:	ldr	x0, [sp, #640]
   12274:	ldr	x1, [x0, #80]
   12278:	ldr	x0, [sp, #640]
   1227c:	ldr	x0, [x0, #72]
   12280:	lsl	x0, x0, #3
   12284:	add	x0, x1, x0
   12288:	ldrb	w0, [x0, #2]
   1228c:	str	w0, [sp, #628]
   12290:	ldr	x0, [sp, #640]
   12294:	ldr	x1, [x0, #64]
   12298:	ldr	x0, [sp, #640]
   1229c:	ldr	x0, [x0, #56]
   122a0:	lsl	x0, x0, #3
   122a4:	add	x0, x1, x0
   122a8:	ldrb	w0, [x0, #2]
   122ac:	str	w0, [sp, #624]
   122b0:	ldr	w1, [sp, #632]
   122b4:	ldr	w0, [sp, #628]
   122b8:	add	w0, w1, w0
   122bc:	ldr	w1, [sp, #624]
   122c0:	add	w0, w1, w0
   122c4:	str	w0, [sp, #620]
   122c8:	ldr	x0, [sp, #640]
   122cc:	ldr	x1, [x0, #48]
   122d0:	ldr	x0, [sp, #640]
   122d4:	ldr	x0, [x0, #40]
   122d8:	lsl	x0, x0, #3
   122dc:	add	x0, x1, x0
   122e0:	ldr	w0, [x0, #4]
   122e4:	str	w0, [sp, #616]
   122e8:	ldr	x0, [sp, #640]
   122ec:	ldr	x1, [x0, #80]
   122f0:	ldr	x0, [sp, #640]
   122f4:	ldr	x0, [x0, #72]
   122f8:	lsl	x0, x0, #3
   122fc:	add	x0, x1, x0
   12300:	ldr	w0, [x0, #4]
   12304:	str	w0, [sp, #612]
   12308:	ldr	x0, [sp, #640]
   1230c:	ldr	x1, [x0, #64]
   12310:	ldr	x0, [sp, #640]
   12314:	ldr	x0, [x0, #56]
   12318:	lsl	x0, x0, #3
   1231c:	add	x0, x1, x0
   12320:	ldr	w0, [x0, #4]
   12324:	str	w0, [sp, #608]
   12328:	ldr	w0, [sp, #624]
   1232c:	cmp	w0, #0x0
   12330:	b.ne	1233c <ZSTD_decompressSequences_default+0x2e0>  // b.any
   12334:	str	xzr, [sp, #600]
   12338:	b	12428 <ZSTD_decompressSequences_default+0x3cc>
   1233c:	bl	f30c <MEM_32bits>
   12340:	cmp	w0, #0x0
   12344:	b.eq	123f4 <ZSTD_decompressSequences_default+0x398>  // b.none
   12348:	ldr	w0, [sp, #636]
   1234c:	cmp	w0, #0x0
   12350:	b.eq	123f4 <ZSTD_decompressSequences_default+0x398>  // b.none
   12354:	ldr	w0, [sp, #624]
   12358:	cmp	w0, #0x18
   1235c:	b.ls	123f4 <ZSTD_decompressSequences_default+0x398>  // b.plast
   12360:	ldr	x0, [sp, #640]
   12364:	ldr	w0, [x0, #8]
   12368:	mov	w1, #0x20                  	// #32
   1236c:	sub	w0, w1, w0
   12370:	ldr	w2, [sp, #624]
   12374:	ldr	w1, [sp, #624]
   12378:	cmp	w2, w0
   1237c:	csel	w0, w1, w0, ls  // ls = plast
   12380:	ldr	w1, [sp, #624]
   12384:	sub	w0, w1, w0
   12388:	str	w0, [sp, #596]
   1238c:	ldr	w19, [sp, #608]
   12390:	ldr	x2, [sp, #640]
   12394:	ldr	w1, [sp, #624]
   12398:	ldr	w0, [sp, #596]
   1239c:	sub	w0, w1, w0
   123a0:	mov	w1, w0
   123a4:	mov	x0, x2
   123a8:	bl	fa10 <BIT_readBitsFast>
   123ac:	mov	x1, x0
   123b0:	ldr	w0, [sp, #596]
   123b4:	lsl	x0, x1, x0
   123b8:	add	x0, x19, x0
   123bc:	str	x0, [sp, #600]
   123c0:	ldr	x0, [sp, #640]
   123c4:	bl	fa48 <BIT_reloadDStream>
   123c8:	ldr	w0, [sp, #596]
   123cc:	cmp	w0, #0x0
   123d0:	b.eq	12424 <ZSTD_decompressSequences_default+0x3c8>  // b.none
   123d4:	ldr	x0, [sp, #640]
   123d8:	ldr	w1, [sp, #596]
   123dc:	bl	fa10 <BIT_readBitsFast>
   123e0:	mov	x1, x0
   123e4:	ldr	x0, [sp, #600]
   123e8:	add	x0, x0, x1
   123ec:	str	x0, [sp, #600]
   123f0:	b	12424 <ZSTD_decompressSequences_default+0x3c8>
   123f4:	ldr	w19, [sp, #608]
   123f8:	ldr	x0, [sp, #640]
   123fc:	ldr	w1, [sp, #624]
   12400:	bl	fa10 <BIT_readBitsFast>
   12404:	add	x0, x19, x0
   12408:	str	x0, [sp, #600]
   1240c:	bl	f30c <MEM_32bits>
   12410:	cmp	w0, #0x0
   12414:	b.eq	12428 <ZSTD_decompressSequences_default+0x3cc>  // b.none
   12418:	ldr	x0, [sp, #640]
   1241c:	bl	fa48 <BIT_reloadDStream>
   12420:	b	12428 <ZSTD_decompressSequences_default+0x3cc>
   12424:	nop
   12428:	ldr	w0, [sp, #624]
   1242c:	cmp	w0, #0x1
   12430:	b.hi	1250c <ZSTD_decompressSequences_default+0x4b0>  // b.pmore
   12434:	ldr	w0, [sp, #616]
   12438:	cmp	w0, #0x0
   1243c:	cset	w0, eq  // eq = none
   12440:	and	w0, w0, #0xff
   12444:	and	x0, x0, #0xff
   12448:	ldr	x1, [sp, #600]
   1244c:	add	x0, x1, x0
   12450:	str	x0, [sp, #600]
   12454:	ldr	x0, [sp, #600]
   12458:	cmp	x0, #0x0
   1245c:	b.eq	124fc <ZSTD_decompressSequences_default+0x4a0>  // b.none
   12460:	ldr	x0, [sp, #600]
   12464:	cmp	x0, #0x3
   12468:	b.ne	1247c <ZSTD_decompressSequences_default+0x420>  // b.any
   1246c:	ldr	x0, [sp, #640]
   12470:	ldr	x0, [x0, #88]
   12474:	sub	x0, x0, #0x1
   12478:	b	12494 <ZSTD_decompressSequences_default+0x438>
   1247c:	ldr	x1, [sp, #640]
   12480:	ldr	x0, [sp, #600]
   12484:	add	x0, x0, #0xa
   12488:	lsl	x0, x0, #3
   1248c:	add	x0, x1, x0
   12490:	ldr	x0, [x0, #8]
   12494:	str	x0, [sp, #584]
   12498:	ldr	x0, [sp, #584]
   1249c:	cmp	x0, #0x0
   124a0:	cset	w0, eq  // eq = none
   124a4:	and	w0, w0, #0xff
   124a8:	and	x0, x0, #0xff
   124ac:	ldr	x1, [sp, #584]
   124b0:	add	x0, x1, x0
   124b4:	str	x0, [sp, #584]
   124b8:	ldr	x0, [sp, #600]
   124bc:	cmp	x0, #0x1
   124c0:	b.eq	124d4 <ZSTD_decompressSequences_default+0x478>  // b.none
   124c4:	ldr	x0, [sp, #640]
   124c8:	ldr	x1, [x0, #96]
   124cc:	ldr	x0, [sp, #640]
   124d0:	str	x1, [x0, #104]
   124d4:	ldr	x0, [sp, #640]
   124d8:	ldr	x1, [x0, #88]
   124dc:	ldr	x0, [sp, #640]
   124e0:	str	x1, [x0, #96]
   124e4:	ldr	x0, [sp, #584]
   124e8:	str	x0, [sp, #600]
   124ec:	ldr	x0, [sp, #640]
   124f0:	ldr	x1, [sp, #600]
   124f4:	str	x1, [x0, #88]
   124f8:	b	12538 <ZSTD_decompressSequences_default+0x4dc>
   124fc:	ldr	x0, [sp, #640]
   12500:	ldr	x0, [x0, #88]
   12504:	str	x0, [sp, #600]
   12508:	b	12538 <ZSTD_decompressSequences_default+0x4dc>
   1250c:	ldr	x0, [sp, #640]
   12510:	ldr	x1, [x0, #96]
   12514:	ldr	x0, [sp, #640]
   12518:	str	x1, [x0, #104]
   1251c:	ldr	x0, [sp, #640]
   12520:	ldr	x1, [x0, #88]
   12524:	ldr	x0, [sp, #640]
   12528:	str	x1, [x0, #96]
   1252c:	ldr	x0, [sp, #640]
   12530:	ldr	x1, [sp, #600]
   12534:	str	x1, [x0, #88]
   12538:	ldr	x0, [sp, #600]
   1253c:	str	x0, [sp, #160]
   12540:	ldr	w19, [sp, #612]
   12544:	ldr	w0, [sp, #628]
   12548:	cmp	w0, #0x0
   1254c:	b.eq	12560 <ZSTD_decompressSequences_default+0x504>  // b.none
   12550:	ldr	x0, [sp, #640]
   12554:	ldr	w1, [sp, #628]
   12558:	bl	fa10 <BIT_readBitsFast>
   1255c:	b	12564 <ZSTD_decompressSequences_default+0x508>
   12560:	mov	x0, #0x0                   	// #0
   12564:	add	x0, x19, x0
   12568:	str	x0, [sp, #152]
   1256c:	bl	f30c <MEM_32bits>
   12570:	cmp	w0, #0x0
   12574:	b.eq	12594 <ZSTD_decompressSequences_default+0x538>  // b.none
   12578:	ldr	w1, [sp, #632]
   1257c:	ldr	w0, [sp, #628]
   12580:	add	w0, w1, w0
   12584:	cmp	w0, #0x13
   12588:	b.ls	12594 <ZSTD_decompressSequences_default+0x538>  // b.plast
   1258c:	ldr	x0, [sp, #640]
   12590:	bl	fa48 <BIT_reloadDStream>
   12594:	bl	f314 <MEM_64bits>
   12598:	cmp	w0, #0x0
   1259c:	b.eq	125b4 <ZSTD_decompressSequences_default+0x558>  // b.none
   125a0:	ldr	w0, [sp, #620]
   125a4:	cmp	w0, #0x1e
   125a8:	b.ls	125b4 <ZSTD_decompressSequences_default+0x558>  // b.plast
   125ac:	ldr	x0, [sp, #640]
   125b0:	bl	fa48 <BIT_reloadDStream>
   125b4:	ldr	w19, [sp, #616]
   125b8:	ldr	w0, [sp, #632]
   125bc:	cmp	w0, #0x0
   125c0:	b.eq	125d4 <ZSTD_decompressSequences_default+0x578>  // b.none
   125c4:	ldr	x0, [sp, #640]
   125c8:	ldr	w1, [sp, #632]
   125cc:	bl	fa10 <BIT_readBitsFast>
   125d0:	b	125d8 <ZSTD_decompressSequences_default+0x57c>
   125d4:	mov	x0, #0x0                   	// #0
   125d8:	add	x0, x19, x0
   125dc:	str	x0, [sp, #144]
   125e0:	bl	f30c <MEM_32bits>
   125e4:	cmp	w0, #0x0
   125e8:	b.eq	125f4 <ZSTD_decompressSequences_default+0x598>  // b.none
   125ec:	ldr	x0, [sp, #640]
   125f0:	bl	fa48 <BIT_reloadDStream>
   125f4:	ldr	x0, [sp, #640]
   125f8:	add	x1, x0, #0x28
   125fc:	ldr	x0, [sp, #640]
   12600:	str	x1, [sp, #576]
   12604:	str	x0, [sp, #568]
   12608:	ldr	x0, [sp, #576]
   1260c:	ldr	x1, [x0, #8]
   12610:	ldr	x0, [sp, #576]
   12614:	ldr	x0, [x0]
   12618:	lsl	x0, x0, #3
   1261c:	add	x0, x1, x0
   12620:	ldr	x0, [x0]
   12624:	str	x0, [sp, #320]
   12628:	ldrb	w0, [sp, #323]
   1262c:	str	w0, [sp, #564]
   12630:	ldr	w1, [sp, #564]
   12634:	ldr	x0, [sp, #568]
   12638:	bl	f9d8 <BIT_readBits>
   1263c:	str	x0, [sp, #552]
   12640:	ldrh	w0, [sp, #320]
   12644:	and	x1, x0, #0xffff
   12648:	ldr	x0, [sp, #552]
   1264c:	add	x1, x1, x0
   12650:	ldr	x0, [sp, #576]
   12654:	str	x1, [x0]
   12658:	nop
   1265c:	ldr	x0, [sp, #640]
   12660:	add	x1, x0, #0x48
   12664:	ldr	x0, [sp, #640]
   12668:	str	x1, [sp, #544]
   1266c:	str	x0, [sp, #536]
   12670:	ldr	x0, [sp, #544]
   12674:	ldr	x1, [x0, #8]
   12678:	ldr	x0, [sp, #544]
   1267c:	ldr	x0, [x0]
   12680:	lsl	x0, x0, #3
   12684:	add	x0, x1, x0
   12688:	ldr	x0, [x0]
   1268c:	str	x0, [sp, #312]
   12690:	ldrb	w0, [sp, #315]
   12694:	str	w0, [sp, #532]
   12698:	ldr	w1, [sp, #532]
   1269c:	ldr	x0, [sp, #536]
   126a0:	bl	f9d8 <BIT_readBits>
   126a4:	str	x0, [sp, #520]
   126a8:	ldrh	w0, [sp, #312]
   126ac:	and	x1, x0, #0xffff
   126b0:	ldr	x0, [sp, #520]
   126b4:	add	x1, x1, x0
   126b8:	ldr	x0, [sp, #544]
   126bc:	str	x1, [x0]
   126c0:	nop
   126c4:	bl	f30c <MEM_32bits>
   126c8:	cmp	w0, #0x0
   126cc:	b.eq	126d8 <ZSTD_decompressSequences_default+0x67c>  // b.none
   126d0:	ldr	x0, [sp, #640]
   126d4:	bl	fa48 <BIT_reloadDStream>
   126d8:	ldr	x0, [sp, #640]
   126dc:	add	x1, x0, #0x38
   126e0:	ldr	x0, [sp, #640]
   126e4:	str	x1, [sp, #512]
   126e8:	str	x0, [sp, #504]
   126ec:	ldr	x0, [sp, #512]
   126f0:	ldr	x1, [x0, #8]
   126f4:	ldr	x0, [sp, #512]
   126f8:	ldr	x0, [x0]
   126fc:	lsl	x0, x0, #3
   12700:	add	x0, x1, x0
   12704:	ldr	x0, [x0]
   12708:	str	x0, [sp, #328]
   1270c:	ldrb	w0, [sp, #331]
   12710:	str	w0, [sp, #500]
   12714:	ldr	w1, [sp, #500]
   12718:	ldr	x0, [sp, #504]
   1271c:	bl	f9d8 <BIT_readBits>
   12720:	str	x0, [sp, #488]
   12724:	ldrh	w0, [sp, #328]
   12728:	and	x1, x0, #0xffff
   1272c:	ldr	x0, [sp, #488]
   12730:	add	x1, x1, x0
   12734:	ldr	x0, [sp, #512]
   12738:	str	x1, [x0]
   1273c:	nop
   12740:	add	x2, sp, #0x70
   12744:	add	x3, sp, #0x90
   12748:	ldp	x0, x1, [x3]
   1274c:	stp	x0, x1, [x2]
   12750:	ldp	x0, x1, [x3, #16]
   12754:	stp	x0, x1, [x2, #16]
   12758:	ldr	x0, [sp, #696]
   1275c:	str	x0, [sp, #480]
   12760:	ldr	x0, [sp, #704]
   12764:	str	x0, [sp, #472]
   12768:	add	x2, sp, #0x90
   1276c:	add	x3, sp, #0x70
   12770:	ldp	x0, x1, [x3]
   12774:	stp	x0, x1, [x2]
   12778:	ldp	x0, x1, [x3, #16]
   1277c:	stp	x0, x1, [x2, #16]
   12780:	add	x0, sp, #0x150
   12784:	str	x0, [sp, #464]
   12788:	ldr	x0, [sp, #688]
   1278c:	str	x0, [sp, #456]
   12790:	ldr	x0, [sp, #680]
   12794:	str	x0, [sp, #448]
   12798:	ldr	x0, [sp, #672]
   1279c:	str	x0, [sp, #440]
   127a0:	ldr	x0, [sp, #664]
   127a4:	str	x0, [sp, #432]
   127a8:	ldr	x0, [sp, #144]
   127ac:	ldr	x1, [sp, #480]
   127b0:	add	x0, x1, x0
   127b4:	str	x0, [sp, #424]
   127b8:	ldr	x1, [sp, #144]
   127bc:	ldr	x0, [sp, #152]
   127c0:	add	x0, x1, x0
   127c4:	str	x0, [sp, #416]
   127c8:	ldr	x1, [sp, #480]
   127cc:	ldr	x0, [sp, #416]
   127d0:	add	x0, x1, x0
   127d4:	str	x0, [sp, #408]
   127d8:	ldr	x0, [sp, #472]
   127dc:	sub	x0, x0, #0x8
   127e0:	str	x0, [sp, #400]
   127e4:	ldr	x0, [sp, #464]
   127e8:	ldr	x1, [x0]
   127ec:	ldr	x0, [sp, #144]
   127f0:	add	x0, x1, x0
   127f4:	str	x0, [sp, #392]
   127f8:	ldr	x0, [sp, #160]
   127fc:	neg	x0, x0
   12800:	ldr	x1, [sp, #424]
   12804:	add	x0, x1, x0
   12808:	str	x0, [sp, #384]
   1280c:	ldr	x1, [sp, #472]
   12810:	ldr	x0, [sp, #408]
   12814:	cmp	x1, x0
   12818:	b.cs	12824 <ZSTD_decompressSequences_default+0x7c8>  // b.hs, b.nlast
   1281c:	mov	x0, #0xffffffffffffffba    	// #-70
   12820:	b	12bbc <ZSTD_decompressSequences_default+0xb60>
   12824:	ldr	x1, [sp, #456]
   12828:	ldr	x0, [sp, #392]
   1282c:	cmp	x1, x0
   12830:	b.cs	1283c <ZSTD_decompressSequences_default+0x7e0>  // b.hs, b.nlast
   12834:	mov	x0, #0xffffffffffffffec    	// #-20
   12838:	b	12bbc <ZSTD_decompressSequences_default+0xb60>
   1283c:	ldr	x1, [sp, #424]
   12840:	ldr	x0, [sp, #400]
   12844:	cmp	x1, x0
   12848:	b.ls	12890 <ZSTD_decompressSequences_default+0x834>  // b.plast
   1284c:	add	x2, sp, #0x20
   12850:	add	x3, sp, #0x90
   12854:	ldp	x0, x1, [x3]
   12858:	stp	x0, x1, [x2]
   1285c:	ldp	x0, x1, [x3, #16]
   12860:	stp	x0, x1, [x2, #16]
   12864:	add	x0, sp, #0x20
   12868:	ldr	x7, [sp, #432]
   1286c:	ldr	x6, [sp, #440]
   12870:	ldr	x5, [sp, #448]
   12874:	ldr	x4, [sp, #456]
   12878:	ldr	x3, [sp, #464]
   1287c:	mov	x2, x0
   12880:	ldr	x1, [sp, #472]
   12884:	ldr	x0, [sp, #480]
   12888:	bl	11d70 <ZSTD_execSequenceLast7>
   1288c:	b	12bbc <ZSTD_decompressSequences_default+0xb60>
   12890:	ldr	x0, [sp, #464]
   12894:	ldr	x0, [x0]
   12898:	mov	x1, x0
   1289c:	ldr	x0, [sp, #480]
   128a0:	bl	fbcc <ZSTD_copy8>
   128a4:	ldr	x0, [sp, #144]
   128a8:	cmp	x0, #0x8
   128ac:	b.ls	128d8 <ZSTD_decompressSequences_default+0x87c>  // b.plast
   128b0:	ldr	x0, [sp, #480]
   128b4:	add	x3, x0, #0x8
   128b8:	ldr	x0, [sp, #464]
   128bc:	ldr	x0, [x0]
   128c0:	add	x1, x0, #0x8
   128c4:	ldr	x0, [sp, #144]
   128c8:	sub	x0, x0, #0x8
   128cc:	mov	x2, x0
   128d0:	mov	x0, x3
   128d4:	bl	fbf8 <ZSTD_wildcopy>
   128d8:	ldr	x0, [sp, #424]
   128dc:	str	x0, [sp, #480]
   128e0:	ldr	x0, [sp, #464]
   128e4:	ldr	x1, [sp, #392]
   128e8:	str	x1, [x0]
   128ec:	ldr	x0, [sp, #160]
   128f0:	ldr	x2, [sp, #424]
   128f4:	ldr	x1, [sp, #448]
   128f8:	sub	x1, x2, x1
   128fc:	cmp	x0, x1
   12900:	b.ls	12a24 <ZSTD_decompressSequences_default+0x9c8>  // b.plast
   12904:	ldr	x0, [sp, #160]
   12908:	ldr	x2, [sp, #424]
   1290c:	ldr	x1, [sp, #440]
   12910:	sub	x1, x2, x1
   12914:	cmp	x0, x1
   12918:	b.ls	12924 <ZSTD_decompressSequences_default+0x8c8>  // b.plast
   1291c:	mov	x0, #0xffffffffffffffec    	// #-20
   12920:	b	12bbc <ZSTD_decompressSequences_default+0xb60>
   12924:	ldr	x1, [sp, #384]
   12928:	ldr	x0, [sp, #448]
   1292c:	sub	x0, x1, x0
   12930:	mov	x1, x0
   12934:	ldr	x0, [sp, #432]
   12938:	add	x0, x0, x1
   1293c:	str	x0, [sp, #384]
   12940:	ldr	x0, [sp, #152]
   12944:	ldr	x1, [sp, #384]
   12948:	add	x0, x1, x0
   1294c:	ldr	x1, [sp, #432]
   12950:	cmp	x1, x0
   12954:	b.cc	12974 <ZSTD_decompressSequences_default+0x918>  // b.lo, b.ul, b.last
   12958:	ldr	x0, [sp, #152]
   1295c:	mov	x2, x0
   12960:	ldr	x1, [sp, #384]
   12964:	ldr	x0, [sp, #424]
   12968:	bl	0 <grub_memmove>
   1296c:	ldr	x0, [sp, #416]
   12970:	b	12bbc <ZSTD_decompressSequences_default+0xb60>
   12974:	ldr	x1, [sp, #432]
   12978:	ldr	x0, [sp, #384]
   1297c:	sub	x0, x1, x0
   12980:	str	x0, [sp, #376]
   12984:	ldr	x2, [sp, #376]
   12988:	ldr	x1, [sp, #384]
   1298c:	ldr	x0, [sp, #424]
   12990:	bl	0 <grub_memmove>
   12994:	ldr	x1, [sp, #424]
   12998:	ldr	x0, [sp, #376]
   1299c:	add	x0, x1, x0
   129a0:	str	x0, [sp, #480]
   129a4:	ldr	x1, [sp, #152]
   129a8:	ldr	x0, [sp, #376]
   129ac:	sub	x0, x1, x0
   129b0:	str	x0, [sp, #152]
   129b4:	ldr	x0, [sp, #448]
   129b8:	str	x0, [sp, #384]
   129bc:	ldr	x1, [sp, #400]
   129c0:	ldr	x0, [sp, #480]
   129c4:	cmp	x1, x0
   129c8:	b.cc	129d8 <ZSTD_decompressSequences_default+0x97c>  // b.lo, b.ul, b.last
   129cc:	ldr	x0, [sp, #152]
   129d0:	cmp	x0, #0x2
   129d4:	b.hi	12a24 <ZSTD_decompressSequences_default+0x9c8>  // b.pmore
   129d8:	str	wzr, [sp, #372]
   129dc:	b	12a0c <ZSTD_decompressSequences_default+0x9b0>
   129e0:	ldr	w0, [sp, #372]
   129e4:	ldr	x1, [sp, #384]
   129e8:	add	x1, x1, x0
   129ec:	ldr	w0, [sp, #372]
   129f0:	ldr	x2, [sp, #480]
   129f4:	add	x0, x2, x0
   129f8:	ldrb	w1, [x1]
   129fc:	strb	w1, [x0]
   12a00:	ldr	w0, [sp, #372]
   12a04:	add	w0, w0, #0x1
   12a08:	str	w0, [sp, #372]
   12a0c:	ldr	w1, [sp, #372]
   12a10:	ldr	x0, [sp, #152]
   12a14:	cmp	x1, x0
   12a18:	b.cc	129e0 <ZSTD_decompressSequences_default+0x984>  // b.lo, b.ul, b.last
   12a1c:	ldr	x0, [sp, #416]
   12a20:	b	12bbc <ZSTD_decompressSequences_default+0xb60>
   12a24:	ldr	x0, [sp, #160]
   12a28:	cmp	x0, #0x7
   12a2c:	b.hi	12ae0 <ZSTD_decompressSequences_default+0xa84>  // b.pmore
   12a30:	ldr	x1, [sp, #160]
   12a34:	adrp	x0, 0 <grub_memcpy>
   12a38:	add	x0, x0, #0x0
   12a3c:	ldr	x0, [x0]
   12a40:	ldr	w0, [x0, x1, lsl #2]
   12a44:	str	w0, [sp, #368]
   12a48:	ldr	x0, [sp, #384]
   12a4c:	ldrb	w1, [x0]
   12a50:	ldr	x0, [sp, #480]
   12a54:	strb	w1, [x0]
   12a58:	ldr	x0, [sp, #480]
   12a5c:	add	x0, x0, #0x1
   12a60:	ldr	x1, [sp, #384]
   12a64:	ldrb	w1, [x1, #1]
   12a68:	strb	w1, [x0]
   12a6c:	ldr	x0, [sp, #480]
   12a70:	add	x0, x0, #0x2
   12a74:	ldr	x1, [sp, #384]
   12a78:	ldrb	w1, [x1, #2]
   12a7c:	strb	w1, [x0]
   12a80:	ldr	x0, [sp, #480]
   12a84:	add	x0, x0, #0x3
   12a88:	ldr	x1, [sp, #384]
   12a8c:	ldrb	w1, [x1, #3]
   12a90:	strb	w1, [x0]
   12a94:	ldr	x1, [sp, #160]
   12a98:	adrp	x0, 0 <grub_memcpy>
   12a9c:	add	x0, x0, #0x0
   12aa0:	ldr	x0, [x0]
   12aa4:	ldr	w0, [x0, x1, lsl #2]
   12aa8:	mov	w0, w0
   12aac:	ldr	x1, [sp, #384]
   12ab0:	add	x0, x1, x0
   12ab4:	str	x0, [sp, #384]
   12ab8:	ldr	x0, [sp, #480]
   12abc:	add	x0, x0, #0x4
   12ac0:	ldr	x1, [sp, #384]
   12ac4:	bl	fc70 <ZSTD_copy4>
   12ac8:	ldrsw	x0, [sp, #368]
   12acc:	neg	x0, x0
   12ad0:	ldr	x1, [sp, #384]
   12ad4:	add	x0, x1, x0
   12ad8:	str	x0, [sp, #384]
   12adc:	b	12aec <ZSTD_decompressSequences_default+0xa90>
   12ae0:	ldr	x1, [sp, #384]
   12ae4:	ldr	x0, [sp, #480]
   12ae8:	bl	fbcc <ZSTD_copy8>
   12aec:	ldr	x0, [sp, #480]
   12af0:	add	x0, x0, #0x8
   12af4:	str	x0, [sp, #480]
   12af8:	ldr	x0, [sp, #384]
   12afc:	add	x0, x0, #0x8
   12b00:	str	x0, [sp, #384]
   12b04:	ldr	x0, [sp, #472]
   12b08:	sub	x0, x0, #0xd
   12b0c:	ldr	x1, [sp, #408]
   12b10:	cmp	x1, x0
   12b14:	b.ls	12ba0 <ZSTD_decompressSequences_default+0xb44>  // b.plast
   12b18:	ldr	x1, [sp, #400]
   12b1c:	ldr	x0, [sp, #480]
   12b20:	cmp	x1, x0
   12b24:	b.ls	12b8c <ZSTD_decompressSequences_default+0xb30>  // b.plast
   12b28:	ldr	x1, [sp, #400]
   12b2c:	ldr	x0, [sp, #480]
   12b30:	sub	x0, x1, x0
   12b34:	mov	x2, x0
   12b38:	ldr	x1, [sp, #384]
   12b3c:	ldr	x0, [sp, #480]
   12b40:	bl	fbf8 <ZSTD_wildcopy>
   12b44:	ldr	x1, [sp, #400]
   12b48:	ldr	x0, [sp, #480]
   12b4c:	sub	x0, x1, x0
   12b50:	mov	x1, x0
   12b54:	ldr	x0, [sp, #384]
   12b58:	add	x0, x0, x1
   12b5c:	str	x0, [sp, #384]
   12b60:	ldr	x0, [sp, #400]
   12b64:	str	x0, [sp, #480]
   12b68:	b	12b8c <ZSTD_decompressSequences_default+0xb30>
   12b6c:	ldr	x1, [sp, #384]
   12b70:	add	x0, x1, #0x1
   12b74:	str	x0, [sp, #384]
   12b78:	ldr	x0, [sp, #480]
   12b7c:	add	x2, x0, #0x1
   12b80:	str	x2, [sp, #480]
   12b84:	ldrb	w1, [x1]
   12b88:	strb	w1, [x0]
   12b8c:	ldr	x1, [sp, #408]
   12b90:	ldr	x0, [sp, #480]
   12b94:	cmp	x1, x0
   12b98:	b.hi	12b6c <ZSTD_decompressSequences_default+0xb10>  // b.pmore
   12b9c:	b	12bb8 <ZSTD_decompressSequences_default+0xb5c>
   12ba0:	ldr	x0, [sp, #152]
   12ba4:	sub	x0, x0, #0x8
   12ba8:	mov	x2, x0
   12bac:	ldr	x1, [sp, #384]
   12bb0:	ldr	x0, [sp, #480]
   12bb4:	bl	fbf8 <ZSTD_wildcopy>
   12bb8:	ldr	x0, [sp, #416]
   12bbc:	str	x0, [sp, #360]
   12bc0:	ldr	x0, [sp, #360]
   12bc4:	bl	f558 <ERR_isError>
   12bc8:	cmp	w0, #0x0
   12bcc:	b.eq	12bd8 <ZSTD_decompressSequences_default+0xb7c>  // b.none
   12bd0:	ldr	x0, [sp, #360]
   12bd4:	b	12cd8 <ZSTD_decompressSequences_default+0xc7c>
   12bd8:	ldr	x1, [sp, #696]
   12bdc:	ldr	x0, [sp, #360]
   12be0:	add	x0, x1, x0
   12be4:	str	x0, [sp, #696]
   12be8:	add	x0, sp, #0xb0
   12bec:	bl	fa48 <BIT_reloadDStream>
   12bf0:	cmp	w0, #0x2
   12bf4:	b.hi	12c04 <ZSTD_decompressSequences_default+0xba8>  // b.pmore
   12bf8:	ldr	w0, [sp, #740]
   12bfc:	cmp	w0, #0x0
   12c00:	b.ne	12234 <ZSTD_decompressSequences_default+0x1d8>  // b.any
   12c04:	ldr	w0, [sp, #740]
   12c08:	cmp	w0, #0x0
   12c0c:	b.eq	12c18 <ZSTD_decompressSequences_default+0xbbc>  // b.none
   12c10:	mov	x0, #0xffffffffffffffec    	// #-20
   12c14:	b	12c70 <ZSTD_decompressSequences_default+0xc14>
   12c18:	str	wzr, [sp, #356]
   12c1c:	b	12c60 <ZSTD_decompressSequences_default+0xc04>
   12c20:	ldr	w0, [sp, #356]
   12c24:	add	x0, x0, #0xa
   12c28:	lsl	x0, x0, #3
   12c2c:	add	x1, sp, #0xb8
   12c30:	ldr	x0, [x1, x0]
   12c34:	mov	w3, w0
   12c38:	ldr	x1, [sp, #776]
   12c3c:	ldr	w2, [sp, #356]
   12c40:	mov	x0, #0x1a0c                	// #6668
   12c44:	add	x0, x2, x0
   12c48:	lsl	x0, x0, #2
   12c4c:	add	x0, x1, x0
   12c50:	str	w3, [x0, #12]
   12c54:	ldr	w0, [sp, #356]
   12c58:	add	w0, w0, #0x1
   12c5c:	str	w0, [sp, #356]
   12c60:	ldr	w0, [sp, #356]
   12c64:	cmp	w0, #0x2
   12c68:	b.ls	12c20 <ZSTD_decompressSequences_default+0xbc4>  // b.plast
   12c6c:	b	12c74 <ZSTD_decompressSequences_default+0xc18>
   12c70:	b	12cd8 <ZSTD_decompressSequences_default+0xc7c>
   12c74:	ldr	x0, [sp, #336]
   12c78:	ldr	x1, [sp, #688]
   12c7c:	sub	x0, x1, x0
   12c80:	str	x0, [sp, #344]
   12c84:	ldr	x1, [sp, #704]
   12c88:	ldr	x0, [sp, #696]
   12c8c:	sub	x0, x1, x0
   12c90:	mov	x1, x0
   12c94:	ldr	x0, [sp, #344]
   12c98:	cmp	x0, x1
   12c9c:	b.ls	12ca8 <ZSTD_decompressSequences_default+0xc4c>  // b.plast
   12ca0:	mov	x0, #0xffffffffffffffba    	// #-70
   12ca4:	b	12cd8 <ZSTD_decompressSequences_default+0xc7c>
   12ca8:	ldr	x0, [sp, #336]
   12cac:	ldr	x2, [sp, #344]
   12cb0:	mov	x1, x0
   12cb4:	ldr	x0, [sp, #696]
   12cb8:	bl	f2e0 <grub_memcpy>
   12cbc:	ldr	x1, [sp, #696]
   12cc0:	ldr	x0, [sp, #344]
   12cc4:	add	x0, x1, x0
   12cc8:	str	x0, [sp, #696]
   12ccc:	ldr	x1, [sp, #696]
   12cd0:	ldr	x0, [sp, #712]
   12cd4:	sub	x0, x1, x0
   12cd8:	ldr	x19, [sp, #16]
   12cdc:	ldp	x29, x30, [sp]
   12ce0:	add	sp, sp, #0x310
   12ce4:	ret
	...

0000000000012cf8 <ZSTD_decompressSequencesLong_default>:
   12cf8:	sub	sp, sp, #0x4f0
   12cfc:	stp	x29, x30, [sp]
   12d00:	mov	x29, sp
   12d04:	str	x19, [sp, #16]
   12d08:	str	x0, [sp, #104]
   12d0c:	str	x1, [sp, #96]
   12d10:	str	x2, [sp, #88]
   12d14:	str	x3, [sp, #80]
   12d18:	str	x4, [sp, #72]
   12d1c:	str	w5, [sp, #68]
   12d20:	str	w6, [sp, #64]
   12d24:	ldr	x0, [sp, #104]
   12d28:	str	x0, [sp, #1256]
   12d2c:	ldr	x0, [sp, #96]
   12d30:	str	x0, [sp, #1248]
   12d34:	ldr	x0, [sp, #88]
   12d38:	str	x0, [sp, #1240]
   12d3c:	ldr	x0, [sp, #80]
   12d40:	str	x0, [sp, #1232]
   12d44:	ldr	x0, [sp, #72]
   12d48:	str	x0, [sp, #1224]
   12d4c:	ldr	w0, [sp, #68]
   12d50:	str	w0, [sp, #1220]
   12d54:	ldr	w0, [sp, #64]
   12d58:	str	w0, [sp, #1216]
   12d5c:	ldr	x0, [sp, #1232]
   12d60:	str	x0, [sp, #1208]
   12d64:	ldr	x1, [sp, #1208]
   12d68:	ldr	x0, [sp, #1224]
   12d6c:	add	x0, x1, x0
   12d70:	str	x0, [sp, #1200]
   12d74:	ldr	x0, [sp, #1248]
   12d78:	str	x0, [sp, #1192]
   12d7c:	ldr	x1, [sp, #1192]
   12d80:	ldr	x0, [sp, #1240]
   12d84:	add	x0, x1, x0
   12d88:	str	x0, [sp, #1184]
   12d8c:	ldr	x0, [sp, #1192]
   12d90:	str	x0, [sp, #1176]
   12d94:	ldr	x0, [sp, #1256]
   12d98:	ldr	x0, [x0, #28952]
   12d9c:	str	x0, [sp, #488]
   12da0:	ldr	x1, [sp, #488]
   12da4:	ldr	x0, [sp, #1256]
   12da8:	ldr	x0, [x0, #28984]
   12dac:	add	x0, x1, x0
   12db0:	str	x0, [sp, #1168]
   12db4:	ldr	x0, [sp, #1256]
   12db8:	ldr	x0, [x0, #28752]
   12dbc:	str	x0, [sp, #1160]
   12dc0:	ldr	x0, [sp, #1256]
   12dc4:	ldr	x0, [x0, #28760]
   12dc8:	str	x0, [sp, #1152]
   12dcc:	ldr	x0, [sp, #1256]
   12dd0:	ldr	x0, [x0, #28768]
   12dd4:	str	x0, [sp, #1144]
   12dd8:	ldr	w0, [sp, #1220]
   12ddc:	cmp	w0, #0x0
   12de0:	b.eq	14470 <ZSTD_decompressSequencesLong_default+0x1778>  // b.none
   12de4:	ldr	w2, [sp, #1220]
   12de8:	ldr	w1, [sp, #1220]
   12dec:	mov	w0, #0x4                   	// #4
   12df0:	cmp	w2, #0x4
   12df4:	csel	w0, w1, w0, le
   12df8:	str	w0, [sp, #1140]
   12dfc:	ldr	x0, [sp, #1256]
   12e00:	add	x0, x0, #0x4, lsl #12
   12e04:	mov	w1, #0x1                   	// #1
   12e08:	str	w1, [x0, #12460]
   12e0c:	str	wzr, [sp, #1136]
   12e10:	b	12e54 <ZSTD_decompressSequencesLong_default+0x15c>
   12e14:	ldr	x1, [sp, #1256]
   12e18:	ldr	w2, [sp, #1136]
   12e1c:	mov	x0, #0x1a0c                	// #6668
   12e20:	add	x0, x2, x0
   12e24:	lsl	x0, x0, #2
   12e28:	add	x0, x1, x0
   12e2c:	ldr	w0, [x0, #12]
   12e30:	mov	w2, w0
   12e34:	ldr	w0, [sp, #1136]
   12e38:	add	x0, x0, #0xa
   12e3c:	lsl	x0, x0, #3
   12e40:	add	x1, sp, #0x138
   12e44:	str	x2, [x1, x0]
   12e48:	ldr	w0, [sp, #1136]
   12e4c:	add	w0, w0, #0x1
   12e50:	str	w0, [sp, #1136]
   12e54:	ldr	w0, [sp, #1136]
   12e58:	cmp	w0, #0x2
   12e5c:	b.ls	12e14 <ZSTD_decompressSequencesLong_default+0x11c>  // b.plast
   12e60:	ldr	x0, [sp, #1160]
   12e64:	str	x0, [sp, #416]
   12e68:	ldr	x1, [sp, #1176]
   12e6c:	ldr	x0, [sp, #1160]
   12e70:	sub	x0, x1, x0
   12e74:	str	x0, [sp, #432]
   12e78:	ldr	x0, [sp, #1144]
   12e7c:	str	x0, [sp, #424]
   12e80:	ldr	x1, [sp, #1200]
   12e84:	ldr	x0, [sp, #1208]
   12e88:	sub	x0, x1, x0
   12e8c:	mov	x1, x0
   12e90:	add	x0, sp, #0x130
   12e94:	mov	x2, x1
   12e98:	ldr	x1, [sp, #1208]
   12e9c:	bl	f5ec <BIT_initDStream>
   12ea0:	str	x0, [sp, #1128]
   12ea4:	ldr	x0, [sp, #1128]
   12ea8:	bl	f558 <ERR_isError>
   12eac:	cmp	w0, #0x0
   12eb0:	b.eq	12ebc <ZSTD_decompressSequencesLong_default+0x1c4>  // b.none
   12eb4:	mov	x0, #0xffffffffffffffec    	// #-20
   12eb8:	b	1446c <ZSTD_decompressSequencesLong_default+0x1774>
   12ebc:	ldr	x0, [sp, #1256]
   12ec0:	ldr	x2, [x0]
   12ec4:	add	x1, sp, #0x130
   12ec8:	add	x0, sp, #0x130
   12ecc:	add	x0, x0, #0x28
   12ed0:	bl	11ff4 <ZSTD_initFseState>
   12ed4:	ldr	x0, [sp, #1256]
   12ed8:	ldr	x2, [x0, #16]
   12edc:	add	x1, sp, #0x130
   12ee0:	add	x0, sp, #0x130
   12ee4:	add	x0, x0, #0x38
   12ee8:	bl	11ff4 <ZSTD_initFseState>
   12eec:	ldr	x0, [sp, #1256]
   12ef0:	ldr	x2, [x0, #8]
   12ef4:	add	x1, sp, #0x130
   12ef8:	add	x0, sp, #0x130
   12efc:	add	x0, x0, #0x48
   12f00:	bl	11ff4 <ZSTD_initFseState>
   12f04:	str	wzr, [sp, #1124]
   12f08:	b	134bc <ZSTD_decompressSequencesLong_default+0x7c4>
   12f0c:	add	x0, sp, #0x130
   12f10:	str	x0, [sp, #1112]
   12f14:	ldr	w0, [sp, #1216]
   12f18:	str	w0, [sp, #1108]
   12f1c:	ldr	x0, [sp, #1112]
   12f20:	ldr	x1, [x0, #48]
   12f24:	ldr	x0, [sp, #1112]
   12f28:	ldr	x0, [x0, #40]
   12f2c:	lsl	x0, x0, #3
   12f30:	add	x0, x1, x0
   12f34:	ldrb	w0, [x0, #2]
   12f38:	str	w0, [sp, #1104]
   12f3c:	ldr	x0, [sp, #1112]
   12f40:	ldr	x1, [x0, #80]
   12f44:	ldr	x0, [sp, #1112]
   12f48:	ldr	x0, [x0, #72]
   12f4c:	lsl	x0, x0, #3
   12f50:	add	x0, x1, x0
   12f54:	ldrb	w0, [x0, #2]
   12f58:	str	w0, [sp, #1100]
   12f5c:	ldr	x0, [sp, #1112]
   12f60:	ldr	x1, [x0, #64]
   12f64:	ldr	x0, [sp, #1112]
   12f68:	ldr	x0, [x0, #56]
   12f6c:	lsl	x0, x0, #3
   12f70:	add	x0, x1, x0
   12f74:	ldrb	w0, [x0, #2]
   12f78:	str	w0, [sp, #1096]
   12f7c:	ldr	w1, [sp, #1104]
   12f80:	ldr	w0, [sp, #1100]
   12f84:	add	w0, w1, w0
   12f88:	ldr	w1, [sp, #1096]
   12f8c:	add	w0, w1, w0
   12f90:	str	w0, [sp, #1092]
   12f94:	ldr	x0, [sp, #1112]
   12f98:	ldr	x1, [x0, #48]
   12f9c:	ldr	x0, [sp, #1112]
   12fa0:	ldr	x0, [x0, #40]
   12fa4:	lsl	x0, x0, #3
   12fa8:	add	x0, x1, x0
   12fac:	ldr	w0, [x0, #4]
   12fb0:	str	w0, [sp, #1088]
   12fb4:	ldr	x0, [sp, #1112]
   12fb8:	ldr	x1, [x0, #80]
   12fbc:	ldr	x0, [sp, #1112]
   12fc0:	ldr	x0, [x0, #72]
   12fc4:	lsl	x0, x0, #3
   12fc8:	add	x0, x1, x0
   12fcc:	ldr	w0, [x0, #4]
   12fd0:	str	w0, [sp, #1084]
   12fd4:	ldr	x0, [sp, #1112]
   12fd8:	ldr	x1, [x0, #64]
   12fdc:	ldr	x0, [sp, #1112]
   12fe0:	ldr	x0, [x0, #56]
   12fe4:	lsl	x0, x0, #3
   12fe8:	add	x0, x1, x0
   12fec:	ldr	w0, [x0, #4]
   12ff0:	str	w0, [sp, #1080]
   12ff4:	ldr	w0, [sp, #1096]
   12ff8:	cmp	w0, #0x0
   12ffc:	b.ne	13008 <ZSTD_decompressSequencesLong_default+0x310>  // b.any
   13000:	str	xzr, [sp, #1072]
   13004:	b	130f4 <ZSTD_decompressSequencesLong_default+0x3fc>
   13008:	bl	f30c <MEM_32bits>
   1300c:	cmp	w0, #0x0
   13010:	b.eq	130c0 <ZSTD_decompressSequencesLong_default+0x3c8>  // b.none
   13014:	ldr	w0, [sp, #1108]
   13018:	cmp	w0, #0x0
   1301c:	b.eq	130c0 <ZSTD_decompressSequencesLong_default+0x3c8>  // b.none
   13020:	ldr	w2, [sp, #1096]
   13024:	ldr	w1, [sp, #1096]
   13028:	mov	w0, #0x18                  	// #24
   1302c:	cmp	w2, #0x18
   13030:	csel	w0, w1, w0, ls  // ls = plast
   13034:	ldr	w1, [sp, #1096]
   13038:	sub	w0, w1, w0
   1303c:	str	w0, [sp, #1068]
   13040:	ldr	w19, [sp, #1080]
   13044:	ldr	x2, [sp, #1112]
   13048:	ldr	w1, [sp, #1096]
   1304c:	ldr	w0, [sp, #1068]
   13050:	sub	w0, w1, w0
   13054:	mov	w1, w0
   13058:	mov	x0, x2
   1305c:	bl	fa10 <BIT_readBitsFast>
   13060:	mov	x1, x0
   13064:	ldr	w0, [sp, #1068]
   13068:	lsl	x0, x1, x0
   1306c:	add	x0, x19, x0
   13070:	str	x0, [sp, #1072]
   13074:	bl	f30c <MEM_32bits>
   13078:	cmp	w0, #0x0
   1307c:	b.ne	1308c <ZSTD_decompressSequencesLong_default+0x394>  // b.any
   13080:	ldr	w0, [sp, #1068]
   13084:	cmp	w0, #0x0
   13088:	b.eq	13094 <ZSTD_decompressSequencesLong_default+0x39c>  // b.none
   1308c:	ldr	x0, [sp, #1112]
   13090:	bl	fa48 <BIT_reloadDStream>
   13094:	ldr	w0, [sp, #1068]
   13098:	cmp	w0, #0x0
   1309c:	b.eq	130f0 <ZSTD_decompressSequencesLong_default+0x3f8>  // b.none
   130a0:	ldr	x0, [sp, #1112]
   130a4:	ldr	w1, [sp, #1068]
   130a8:	bl	fa10 <BIT_readBitsFast>
   130ac:	mov	x1, x0
   130b0:	ldr	x0, [sp, #1072]
   130b4:	add	x0, x0, x1
   130b8:	str	x0, [sp, #1072]
   130bc:	b	130f0 <ZSTD_decompressSequencesLong_default+0x3f8>
   130c0:	ldr	w19, [sp, #1080]
   130c4:	ldr	x0, [sp, #1112]
   130c8:	ldr	w1, [sp, #1096]
   130cc:	bl	fa10 <BIT_readBitsFast>
   130d0:	add	x0, x19, x0
   130d4:	str	x0, [sp, #1072]
   130d8:	bl	f30c <MEM_32bits>
   130dc:	cmp	w0, #0x0
   130e0:	b.eq	130f4 <ZSTD_decompressSequencesLong_default+0x3fc>  // b.none
   130e4:	ldr	x0, [sp, #1112]
   130e8:	bl	fa48 <BIT_reloadDStream>
   130ec:	b	130f4 <ZSTD_decompressSequencesLong_default+0x3fc>
   130f0:	nop
   130f4:	ldr	w0, [sp, #1096]
   130f8:	cmp	w0, #0x1
   130fc:	b.hi	131d8 <ZSTD_decompressSequencesLong_default+0x4e0>  // b.pmore
   13100:	ldr	w0, [sp, #1088]
   13104:	cmp	w0, #0x0
   13108:	cset	w0, eq  // eq = none
   1310c:	and	w0, w0, #0xff
   13110:	and	x0, x0, #0xff
   13114:	ldr	x1, [sp, #1072]
   13118:	add	x0, x1, x0
   1311c:	str	x0, [sp, #1072]
   13120:	ldr	x0, [sp, #1072]
   13124:	cmp	x0, #0x0
   13128:	b.eq	131c8 <ZSTD_decompressSequencesLong_default+0x4d0>  // b.none
   1312c:	ldr	x0, [sp, #1072]
   13130:	cmp	x0, #0x3
   13134:	b.ne	13148 <ZSTD_decompressSequencesLong_default+0x450>  // b.any
   13138:	ldr	x0, [sp, #1112]
   1313c:	ldr	x0, [x0, #88]
   13140:	sub	x0, x0, #0x1
   13144:	b	13160 <ZSTD_decompressSequencesLong_default+0x468>
   13148:	ldr	x1, [sp, #1112]
   1314c:	ldr	x0, [sp, #1072]
   13150:	add	x0, x0, #0xa
   13154:	lsl	x0, x0, #3
   13158:	add	x0, x1, x0
   1315c:	ldr	x0, [x0, #8]
   13160:	str	x0, [sp, #1056]
   13164:	ldr	x0, [sp, #1056]
   13168:	cmp	x0, #0x0
   1316c:	cset	w0, eq  // eq = none
   13170:	and	w0, w0, #0xff
   13174:	and	x0, x0, #0xff
   13178:	ldr	x1, [sp, #1056]
   1317c:	add	x0, x1, x0
   13180:	str	x0, [sp, #1056]
   13184:	ldr	x0, [sp, #1072]
   13188:	cmp	x0, #0x1
   1318c:	b.eq	131a0 <ZSTD_decompressSequencesLong_default+0x4a8>  // b.none
   13190:	ldr	x0, [sp, #1112]
   13194:	ldr	x1, [x0, #96]
   13198:	ldr	x0, [sp, #1112]
   1319c:	str	x1, [x0, #104]
   131a0:	ldr	x0, [sp, #1112]
   131a4:	ldr	x1, [x0, #88]
   131a8:	ldr	x0, [sp, #1112]
   131ac:	str	x1, [x0, #96]
   131b0:	ldr	x0, [sp, #1056]
   131b4:	str	x0, [sp, #1072]
   131b8:	ldr	x0, [sp, #1112]
   131bc:	ldr	x1, [sp, #1072]
   131c0:	str	x1, [x0, #88]
   131c4:	b	13204 <ZSTD_decompressSequencesLong_default+0x50c>
   131c8:	ldr	x0, [sp, #1112]
   131cc:	ldr	x0, [x0, #88]
   131d0:	str	x0, [sp, #1072]
   131d4:	b	13204 <ZSTD_decompressSequencesLong_default+0x50c>
   131d8:	ldr	x0, [sp, #1112]
   131dc:	ldr	x1, [x0, #96]
   131e0:	ldr	x0, [sp, #1112]
   131e4:	str	x1, [x0, #104]
   131e8:	ldr	x0, [sp, #1112]
   131ec:	ldr	x1, [x0, #88]
   131f0:	ldr	x0, [sp, #1112]
   131f4:	str	x1, [x0, #96]
   131f8:	ldr	x0, [sp, #1112]
   131fc:	ldr	x1, [sp, #1072]
   13200:	str	x1, [x0, #88]
   13204:	ldr	x0, [sp, #1072]
   13208:	str	x0, [sp, #160]
   1320c:	ldr	w19, [sp, #1084]
   13210:	ldr	w0, [sp, #1100]
   13214:	cmp	w0, #0x0
   13218:	b.eq	1322c <ZSTD_decompressSequencesLong_default+0x534>  // b.none
   1321c:	ldr	x0, [sp, #1112]
   13220:	ldr	w1, [sp, #1100]
   13224:	bl	fa10 <BIT_readBitsFast>
   13228:	b	13230 <ZSTD_decompressSequencesLong_default+0x538>
   1322c:	mov	x0, #0x0                   	// #0
   13230:	add	x0, x19, x0
   13234:	str	x0, [sp, #152]
   13238:	bl	f30c <MEM_32bits>
   1323c:	cmp	w0, #0x0
   13240:	b.eq	13260 <ZSTD_decompressSequencesLong_default+0x568>  // b.none
   13244:	ldr	w1, [sp, #1104]
   13248:	ldr	w0, [sp, #1100]
   1324c:	add	w0, w1, w0
   13250:	cmp	w0, #0x13
   13254:	b.ls	13260 <ZSTD_decompressSequencesLong_default+0x568>  // b.plast
   13258:	ldr	x0, [sp, #1112]
   1325c:	bl	fa48 <BIT_reloadDStream>
   13260:	bl	f314 <MEM_64bits>
   13264:	cmp	w0, #0x0
   13268:	b.eq	13280 <ZSTD_decompressSequencesLong_default+0x588>  // b.none
   1326c:	ldr	w0, [sp, #1092]
   13270:	cmp	w0, #0x1e
   13274:	b.ls	13280 <ZSTD_decompressSequencesLong_default+0x588>  // b.plast
   13278:	ldr	x0, [sp, #1112]
   1327c:	bl	fa48 <BIT_reloadDStream>
   13280:	ldr	w19, [sp, #1088]
   13284:	ldr	w0, [sp, #1104]
   13288:	cmp	w0, #0x0
   1328c:	b.eq	132a0 <ZSTD_decompressSequencesLong_default+0x5a8>  // b.none
   13290:	ldr	x0, [sp, #1112]
   13294:	ldr	w1, [sp, #1104]
   13298:	bl	fa10 <BIT_readBitsFast>
   1329c:	b	132a4 <ZSTD_decompressSequencesLong_default+0x5ac>
   132a0:	mov	x0, #0x0                   	// #0
   132a4:	add	x0, x19, x0
   132a8:	str	x0, [sp, #144]
   132ac:	bl	f30c <MEM_32bits>
   132b0:	cmp	w0, #0x0
   132b4:	b.eq	132c0 <ZSTD_decompressSequencesLong_default+0x5c8>  // b.none
   132b8:	ldr	x0, [sp, #1112]
   132bc:	bl	fa48 <BIT_reloadDStream>
   132c0:	ldr	x0, [sp, #1112]
   132c4:	ldr	x1, [x0, #128]
   132c8:	ldr	x0, [sp, #144]
   132cc:	add	x0, x1, x0
   132d0:	str	x0, [sp, #1048]
   132d4:	ldr	x0, [sp, #160]
   132d8:	ldr	x1, [sp, #1048]
   132dc:	cmp	x1, x0
   132e0:	b.cs	132f0 <ZSTD_decompressSequencesLong_default+0x5f8>  // b.hs, b.nlast
   132e4:	ldr	x0, [sp, #1112]
   132e8:	ldr	x0, [x0, #120]
   132ec:	b	132f8 <ZSTD_decompressSequencesLong_default+0x600>
   132f0:	ldr	x0, [sp, #1112]
   132f4:	ldr	x0, [x0, #112]
   132f8:	str	x0, [sp, #1040]
   132fc:	ldr	x0, [sp, #160]
   13300:	ldr	x1, [sp, #1048]
   13304:	sub	x0, x1, x0
   13308:	ldr	x1, [sp, #1040]
   1330c:	add	x0, x1, x0
   13310:	str	x0, [sp, #168]
   13314:	ldr	x1, [sp, #152]
   13318:	ldr	x0, [sp, #1048]
   1331c:	add	x1, x1, x0
   13320:	ldr	x0, [sp, #1112]
   13324:	str	x1, [x0, #128]
   13328:	ldr	x0, [sp, #1112]
   1332c:	add	x1, x0, #0x28
   13330:	ldr	x0, [sp, #1112]
   13334:	str	x1, [sp, #1032]
   13338:	str	x0, [sp, #1024]
   1333c:	ldr	x0, [sp, #1032]
   13340:	ldr	x1, [x0, #8]
   13344:	ldr	x0, [sp, #1032]
   13348:	ldr	x0, [x0]
   1334c:	lsl	x0, x0, #3
   13350:	add	x0, x1, x0
   13354:	ldr	x0, [x0]
   13358:	str	x0, [sp, #472]
   1335c:	ldrb	w0, [sp, #475]
   13360:	str	w0, [sp, #1020]
   13364:	ldr	w1, [sp, #1020]
   13368:	ldr	x0, [sp, #1024]
   1336c:	bl	f9d8 <BIT_readBits>
   13370:	str	x0, [sp, #1008]
   13374:	ldrh	w0, [sp, #472]
   13378:	and	x1, x0, #0xffff
   1337c:	ldr	x0, [sp, #1008]
   13380:	add	x1, x1, x0
   13384:	ldr	x0, [sp, #1032]
   13388:	str	x1, [x0]
   1338c:	nop
   13390:	ldr	x0, [sp, #1112]
   13394:	add	x1, x0, #0x48
   13398:	ldr	x0, [sp, #1112]
   1339c:	str	x1, [sp, #1000]
   133a0:	str	x0, [sp, #992]
   133a4:	ldr	x0, [sp, #1000]
   133a8:	ldr	x1, [x0, #8]
   133ac:	ldr	x0, [sp, #1000]
   133b0:	ldr	x0, [x0]
   133b4:	lsl	x0, x0, #3
   133b8:	add	x0, x1, x0
   133bc:	ldr	x0, [x0]
   133c0:	str	x0, [sp, #464]
   133c4:	ldrb	w0, [sp, #467]
   133c8:	str	w0, [sp, #988]
   133cc:	ldr	w1, [sp, #988]
   133d0:	ldr	x0, [sp, #992]
   133d4:	bl	f9d8 <BIT_readBits>
   133d8:	str	x0, [sp, #976]
   133dc:	ldrh	w0, [sp, #464]
   133e0:	and	x1, x0, #0xffff
   133e4:	ldr	x0, [sp, #976]
   133e8:	add	x1, x1, x0
   133ec:	ldr	x0, [sp, #1000]
   133f0:	str	x1, [x0]
   133f4:	nop
   133f8:	bl	f30c <MEM_32bits>
   133fc:	cmp	w0, #0x0
   13400:	b.eq	1340c <ZSTD_decompressSequencesLong_default+0x714>  // b.none
   13404:	ldr	x0, [sp, #1112]
   13408:	bl	fa48 <BIT_reloadDStream>
   1340c:	ldr	x0, [sp, #1112]
   13410:	add	x1, x0, #0x38
   13414:	ldr	x0, [sp, #1112]
   13418:	str	x1, [sp, #968]
   1341c:	str	x0, [sp, #960]
   13420:	ldr	x0, [sp, #968]
   13424:	ldr	x1, [x0, #8]
   13428:	ldr	x0, [sp, #968]
   1342c:	ldr	x0, [x0]
   13430:	lsl	x0, x0, #3
   13434:	add	x0, x1, x0
   13438:	ldr	x0, [x0]
   1343c:	str	x0, [sp, #480]
   13440:	ldrb	w0, [sp, #483]
   13444:	str	w0, [sp, #956]
   13448:	ldr	w1, [sp, #956]
   1344c:	ldr	x0, [sp, #960]
   13450:	bl	f9d8 <BIT_readBits>
   13454:	str	x0, [sp, #944]
   13458:	ldrh	w0, [sp, #480]
   1345c:	and	x1, x0, #0xffff
   13460:	ldr	x0, [sp, #944]
   13464:	add	x1, x1, x0
   13468:	ldr	x0, [sp, #968]
   1346c:	str	x1, [x0]
   13470:	nop
   13474:	add	x2, sp, #0x70
   13478:	add	x3, sp, #0x90
   1347c:	ldp	x0, x1, [x3]
   13480:	stp	x0, x1, [x2]
   13484:	ldp	x0, x1, [x3, #16]
   13488:	stp	x0, x1, [x2, #16]
   1348c:	ldrsw	x0, [sp, #1124]
   13490:	lsl	x0, x0, #5
   13494:	add	x1, sp, #0xb0
   13498:	add	x2, x1, x0
   1349c:	add	x3, sp, #0x70
   134a0:	ldp	x0, x1, [x3]
   134a4:	stp	x0, x1, [x2]
   134a8:	ldp	x0, x1, [x3, #16]
   134ac:	stp	x0, x1, [x2, #16]
   134b0:	ldr	w0, [sp, #1124]
   134b4:	add	w0, w0, #0x1
   134b8:	str	w0, [sp, #1124]
   134bc:	add	x0, sp, #0x130
   134c0:	bl	fa48 <BIT_reloadDStream>
   134c4:	cmp	w0, #0x2
   134c8:	b.hi	134dc <ZSTD_decompressSequencesLong_default+0x7e4>  // b.pmore
   134cc:	ldr	w1, [sp, #1140]
   134d0:	ldr	w0, [sp, #1124]
   134d4:	cmp	w1, w0
   134d8:	b.gt	12f0c <ZSTD_decompressSequencesLong_default+0x214>
   134dc:	ldr	w1, [sp, #1140]
   134e0:	ldr	w0, [sp, #1124]
   134e4:	cmp	w1, w0
   134e8:	b.le	13f30 <ZSTD_decompressSequencesLong_default+0x1238>
   134ec:	mov	x0, #0xffffffffffffffec    	// #-20
   134f0:	b	1446c <ZSTD_decompressSequencesLong_default+0x1774>
   134f4:	add	x0, sp, #0x130
   134f8:	str	x0, [sp, #936]
   134fc:	ldr	w0, [sp, #1216]
   13500:	str	w0, [sp, #932]
   13504:	ldr	x0, [sp, #936]
   13508:	ldr	x1, [x0, #48]
   1350c:	ldr	x0, [sp, #936]
   13510:	ldr	x0, [x0, #40]
   13514:	lsl	x0, x0, #3
   13518:	add	x0, x1, x0
   1351c:	ldrb	w0, [x0, #2]
   13520:	str	w0, [sp, #928]
   13524:	ldr	x0, [sp, #936]
   13528:	ldr	x1, [x0, #80]
   1352c:	ldr	x0, [sp, #936]
   13530:	ldr	x0, [x0, #72]
   13534:	lsl	x0, x0, #3
   13538:	add	x0, x1, x0
   1353c:	ldrb	w0, [x0, #2]
   13540:	str	w0, [sp, #924]
   13544:	ldr	x0, [sp, #936]
   13548:	ldr	x1, [x0, #64]
   1354c:	ldr	x0, [sp, #936]
   13550:	ldr	x0, [x0, #56]
   13554:	lsl	x0, x0, #3
   13558:	add	x0, x1, x0
   1355c:	ldrb	w0, [x0, #2]
   13560:	str	w0, [sp, #920]
   13564:	ldr	w1, [sp, #928]
   13568:	ldr	w0, [sp, #924]
   1356c:	add	w0, w1, w0
   13570:	ldr	w1, [sp, #920]
   13574:	add	w0, w1, w0
   13578:	str	w0, [sp, #916]
   1357c:	ldr	x0, [sp, #936]
   13580:	ldr	x1, [x0, #48]
   13584:	ldr	x0, [sp, #936]
   13588:	ldr	x0, [x0, #40]
   1358c:	lsl	x0, x0, #3
   13590:	add	x0, x1, x0
   13594:	ldr	w0, [x0, #4]
   13598:	str	w0, [sp, #912]
   1359c:	ldr	x0, [sp, #936]
   135a0:	ldr	x1, [x0, #80]
   135a4:	ldr	x0, [sp, #936]
   135a8:	ldr	x0, [x0, #72]
   135ac:	lsl	x0, x0, #3
   135b0:	add	x0, x1, x0
   135b4:	ldr	w0, [x0, #4]
   135b8:	str	w0, [sp, #908]
   135bc:	ldr	x0, [sp, #936]
   135c0:	ldr	x1, [x0, #64]
   135c4:	ldr	x0, [sp, #936]
   135c8:	ldr	x0, [x0, #56]
   135cc:	lsl	x0, x0, #3
   135d0:	add	x0, x1, x0
   135d4:	ldr	w0, [x0, #4]
   135d8:	str	w0, [sp, #904]
   135dc:	ldr	w0, [sp, #920]
   135e0:	cmp	w0, #0x0
   135e4:	b.ne	135f0 <ZSTD_decompressSequencesLong_default+0x8f8>  // b.any
   135e8:	str	xzr, [sp, #896]
   135ec:	b	136dc <ZSTD_decompressSequencesLong_default+0x9e4>
   135f0:	bl	f30c <MEM_32bits>
   135f4:	cmp	w0, #0x0
   135f8:	b.eq	136a8 <ZSTD_decompressSequencesLong_default+0x9b0>  // b.none
   135fc:	ldr	w0, [sp, #932]
   13600:	cmp	w0, #0x0
   13604:	b.eq	136a8 <ZSTD_decompressSequencesLong_default+0x9b0>  // b.none
   13608:	ldr	w2, [sp, #920]
   1360c:	ldr	w1, [sp, #920]
   13610:	mov	w0, #0x18                  	// #24
   13614:	cmp	w2, #0x18
   13618:	csel	w0, w1, w0, ls  // ls = plast
   1361c:	ldr	w1, [sp, #920]
   13620:	sub	w0, w1, w0
   13624:	str	w0, [sp, #892]
   13628:	ldr	w19, [sp, #904]
   1362c:	ldr	x2, [sp, #936]
   13630:	ldr	w1, [sp, #920]
   13634:	ldr	w0, [sp, #892]
   13638:	sub	w0, w1, w0
   1363c:	mov	w1, w0
   13640:	mov	x0, x2
   13644:	bl	fa10 <BIT_readBitsFast>
   13648:	mov	x1, x0
   1364c:	ldr	w0, [sp, #892]
   13650:	lsl	x0, x1, x0
   13654:	add	x0, x19, x0
   13658:	str	x0, [sp, #896]
   1365c:	bl	f30c <MEM_32bits>
   13660:	cmp	w0, #0x0
   13664:	b.ne	13674 <ZSTD_decompressSequencesLong_default+0x97c>  // b.any
   13668:	ldr	w0, [sp, #892]
   1366c:	cmp	w0, #0x0
   13670:	b.eq	1367c <ZSTD_decompressSequencesLong_default+0x984>  // b.none
   13674:	ldr	x0, [sp, #936]
   13678:	bl	fa48 <BIT_reloadDStream>
   1367c:	ldr	w0, [sp, #892]
   13680:	cmp	w0, #0x0
   13684:	b.eq	136d8 <ZSTD_decompressSequencesLong_default+0x9e0>  // b.none
   13688:	ldr	x0, [sp, #936]
   1368c:	ldr	w1, [sp, #892]
   13690:	bl	fa10 <BIT_readBitsFast>
   13694:	mov	x1, x0
   13698:	ldr	x0, [sp, #896]
   1369c:	add	x0, x0, x1
   136a0:	str	x0, [sp, #896]
   136a4:	b	136d8 <ZSTD_decompressSequencesLong_default+0x9e0>
   136a8:	ldr	w19, [sp, #904]
   136ac:	ldr	x0, [sp, #936]
   136b0:	ldr	w1, [sp, #920]
   136b4:	bl	fa10 <BIT_readBitsFast>
   136b8:	add	x0, x19, x0
   136bc:	str	x0, [sp, #896]
   136c0:	bl	f30c <MEM_32bits>
   136c4:	cmp	w0, #0x0
   136c8:	b.eq	136dc <ZSTD_decompressSequencesLong_default+0x9e4>  // b.none
   136cc:	ldr	x0, [sp, #936]
   136d0:	bl	fa48 <BIT_reloadDStream>
   136d4:	b	136dc <ZSTD_decompressSequencesLong_default+0x9e4>
   136d8:	nop
   136dc:	ldr	w0, [sp, #920]
   136e0:	cmp	w0, #0x1
   136e4:	b.hi	137c0 <ZSTD_decompressSequencesLong_default+0xac8>  // b.pmore
   136e8:	ldr	w0, [sp, #912]
   136ec:	cmp	w0, #0x0
   136f0:	cset	w0, eq  // eq = none
   136f4:	and	w0, w0, #0xff
   136f8:	and	x0, x0, #0xff
   136fc:	ldr	x1, [sp, #896]
   13700:	add	x0, x1, x0
   13704:	str	x0, [sp, #896]
   13708:	ldr	x0, [sp, #896]
   1370c:	cmp	x0, #0x0
   13710:	b.eq	137b0 <ZSTD_decompressSequencesLong_default+0xab8>  // b.none
   13714:	ldr	x0, [sp, #896]
   13718:	cmp	x0, #0x3
   1371c:	b.ne	13730 <ZSTD_decompressSequencesLong_default+0xa38>  // b.any
   13720:	ldr	x0, [sp, #936]
   13724:	ldr	x0, [x0, #88]
   13728:	sub	x0, x0, #0x1
   1372c:	b	13748 <ZSTD_decompressSequencesLong_default+0xa50>
   13730:	ldr	x1, [sp, #936]
   13734:	ldr	x0, [sp, #896]
   13738:	add	x0, x0, #0xa
   1373c:	lsl	x0, x0, #3
   13740:	add	x0, x1, x0
   13744:	ldr	x0, [x0, #8]
   13748:	str	x0, [sp, #880]
   1374c:	ldr	x0, [sp, #880]
   13750:	cmp	x0, #0x0
   13754:	cset	w0, eq  // eq = none
   13758:	and	w0, w0, #0xff
   1375c:	and	x0, x0, #0xff
   13760:	ldr	x1, [sp, #880]
   13764:	add	x0, x1, x0
   13768:	str	x0, [sp, #880]
   1376c:	ldr	x0, [sp, #896]
   13770:	cmp	x0, #0x1
   13774:	b.eq	13788 <ZSTD_decompressSequencesLong_default+0xa90>  // b.none
   13778:	ldr	x0, [sp, #936]
   1377c:	ldr	x1, [x0, #96]
   13780:	ldr	x0, [sp, #936]
   13784:	str	x1, [x0, #104]
   13788:	ldr	x0, [sp, #936]
   1378c:	ldr	x1, [x0, #88]
   13790:	ldr	x0, [sp, #936]
   13794:	str	x1, [x0, #96]
   13798:	ldr	x0, [sp, #880]
   1379c:	str	x0, [sp, #896]
   137a0:	ldr	x0, [sp, #936]
   137a4:	ldr	x1, [sp, #896]
   137a8:	str	x1, [x0, #88]
   137ac:	b	137ec <ZSTD_decompressSequencesLong_default+0xaf4>
   137b0:	ldr	x0, [sp, #936]
   137b4:	ldr	x0, [x0, #88]
   137b8:	str	x0, [sp, #896]
   137bc:	b	137ec <ZSTD_decompressSequencesLong_default+0xaf4>
   137c0:	ldr	x0, [sp, #936]
   137c4:	ldr	x1, [x0, #96]
   137c8:	ldr	x0, [sp, #936]
   137cc:	str	x1, [x0, #104]
   137d0:	ldr	x0, [sp, #936]
   137d4:	ldr	x1, [x0, #88]
   137d8:	ldr	x0, [sp, #936]
   137dc:	str	x1, [x0, #96]
   137e0:	ldr	x0, [sp, #936]
   137e4:	ldr	x1, [sp, #896]
   137e8:	str	x1, [x0, #88]
   137ec:	ldr	x0, [sp, #896]
   137f0:	str	x0, [sp, #160]
   137f4:	ldr	w19, [sp, #908]
   137f8:	ldr	w0, [sp, #924]
   137fc:	cmp	w0, #0x0
   13800:	b.eq	13814 <ZSTD_decompressSequencesLong_default+0xb1c>  // b.none
   13804:	ldr	x0, [sp, #936]
   13808:	ldr	w1, [sp, #924]
   1380c:	bl	fa10 <BIT_readBitsFast>
   13810:	b	13818 <ZSTD_decompressSequencesLong_default+0xb20>
   13814:	mov	x0, #0x0                   	// #0
   13818:	add	x0, x19, x0
   1381c:	str	x0, [sp, #152]
   13820:	bl	f30c <MEM_32bits>
   13824:	cmp	w0, #0x0
   13828:	b.eq	13848 <ZSTD_decompressSequencesLong_default+0xb50>  // b.none
   1382c:	ldr	w1, [sp, #928]
   13830:	ldr	w0, [sp, #924]
   13834:	add	w0, w1, w0
   13838:	cmp	w0, #0x13
   1383c:	b.ls	13848 <ZSTD_decompressSequencesLong_default+0xb50>  // b.plast
   13840:	ldr	x0, [sp, #936]
   13844:	bl	fa48 <BIT_reloadDStream>
   13848:	bl	f314 <MEM_64bits>
   1384c:	cmp	w0, #0x0
   13850:	b.eq	13868 <ZSTD_decompressSequencesLong_default+0xb70>  // b.none
   13854:	ldr	w0, [sp, #916]
   13858:	cmp	w0, #0x1e
   1385c:	b.ls	13868 <ZSTD_decompressSequencesLong_default+0xb70>  // b.plast
   13860:	ldr	x0, [sp, #936]
   13864:	bl	fa48 <BIT_reloadDStream>
   13868:	ldr	w19, [sp, #912]
   1386c:	ldr	w0, [sp, #928]
   13870:	cmp	w0, #0x0
   13874:	b.eq	13888 <ZSTD_decompressSequencesLong_default+0xb90>  // b.none
   13878:	ldr	x0, [sp, #936]
   1387c:	ldr	w1, [sp, #928]
   13880:	bl	fa10 <BIT_readBitsFast>
   13884:	b	1388c <ZSTD_decompressSequencesLong_default+0xb94>
   13888:	mov	x0, #0x0                   	// #0
   1388c:	add	x0, x19, x0
   13890:	str	x0, [sp, #144]
   13894:	bl	f30c <MEM_32bits>
   13898:	cmp	w0, #0x0
   1389c:	b.eq	138a8 <ZSTD_decompressSequencesLong_default+0xbb0>  // b.none
   138a0:	ldr	x0, [sp, #936]
   138a4:	bl	fa48 <BIT_reloadDStream>
   138a8:	ldr	x0, [sp, #936]
   138ac:	ldr	x1, [x0, #128]
   138b0:	ldr	x0, [sp, #144]
   138b4:	add	x0, x1, x0
   138b8:	str	x0, [sp, #872]
   138bc:	ldr	x0, [sp, #160]
   138c0:	ldr	x1, [sp, #872]
   138c4:	cmp	x1, x0
   138c8:	b.cs	138d8 <ZSTD_decompressSequencesLong_default+0xbe0>  // b.hs, b.nlast
   138cc:	ldr	x0, [sp, #936]
   138d0:	ldr	x0, [x0, #120]
   138d4:	b	138e0 <ZSTD_decompressSequencesLong_default+0xbe8>
   138d8:	ldr	x0, [sp, #936]
   138dc:	ldr	x0, [x0, #112]
   138e0:	str	x0, [sp, #864]
   138e4:	ldr	x0, [sp, #160]
   138e8:	ldr	x1, [sp, #872]
   138ec:	sub	x0, x1, x0
   138f0:	ldr	x1, [sp, #864]
   138f4:	add	x0, x1, x0
   138f8:	str	x0, [sp, #168]
   138fc:	ldr	x1, [sp, #152]
   13900:	ldr	x0, [sp, #872]
   13904:	add	x1, x1, x0
   13908:	ldr	x0, [sp, #936]
   1390c:	str	x1, [x0, #128]
   13910:	ldr	x0, [sp, #936]
   13914:	add	x1, x0, #0x28
   13918:	ldr	x0, [sp, #936]
   1391c:	str	x1, [sp, #856]
   13920:	str	x0, [sp, #848]
   13924:	ldr	x0, [sp, #856]
   13928:	ldr	x1, [x0, #8]
   1392c:	ldr	x0, [sp, #856]
   13930:	ldr	x0, [x0]
   13934:	lsl	x0, x0, #3
   13938:	add	x0, x1, x0
   1393c:	ldr	x0, [x0]
   13940:	str	x0, [sp, #448]
   13944:	ldrb	w0, [sp, #451]
   13948:	str	w0, [sp, #844]
   1394c:	ldr	w1, [sp, #844]
   13950:	ldr	x0, [sp, #848]
   13954:	bl	f9d8 <BIT_readBits>
   13958:	str	x0, [sp, #832]
   1395c:	ldrh	w0, [sp, #448]
   13960:	and	x1, x0, #0xffff
   13964:	ldr	x0, [sp, #832]
   13968:	add	x1, x1, x0
   1396c:	ldr	x0, [sp, #856]
   13970:	str	x1, [x0]
   13974:	nop
   13978:	ldr	x0, [sp, #936]
   1397c:	add	x1, x0, #0x48
   13980:	ldr	x0, [sp, #936]
   13984:	str	x1, [sp, #824]
   13988:	str	x0, [sp, #816]
   1398c:	ldr	x0, [sp, #824]
   13990:	ldr	x1, [x0, #8]
   13994:	ldr	x0, [sp, #824]
   13998:	ldr	x0, [x0]
   1399c:	lsl	x0, x0, #3
   139a0:	add	x0, x1, x0
   139a4:	ldr	x0, [x0]
   139a8:	str	x0, [sp, #440]
   139ac:	ldrb	w0, [sp, #443]
   139b0:	str	w0, [sp, #812]
   139b4:	ldr	w1, [sp, #812]
   139b8:	ldr	x0, [sp, #816]
   139bc:	bl	f9d8 <BIT_readBits>
   139c0:	str	x0, [sp, #800]
   139c4:	ldrh	w0, [sp, #440]
   139c8:	and	x1, x0, #0xffff
   139cc:	ldr	x0, [sp, #800]
   139d0:	add	x1, x1, x0
   139d4:	ldr	x0, [sp, #824]
   139d8:	str	x1, [x0]
   139dc:	nop
   139e0:	bl	f30c <MEM_32bits>
   139e4:	cmp	w0, #0x0
   139e8:	b.eq	139f4 <ZSTD_decompressSequencesLong_default+0xcfc>  // b.none
   139ec:	ldr	x0, [sp, #936]
   139f0:	bl	fa48 <BIT_reloadDStream>
   139f4:	ldr	x0, [sp, #936]
   139f8:	add	x1, x0, #0x38
   139fc:	ldr	x0, [sp, #936]
   13a00:	str	x1, [sp, #792]
   13a04:	str	x0, [sp, #784]
   13a08:	ldr	x0, [sp, #792]
   13a0c:	ldr	x1, [x0, #8]
   13a10:	ldr	x0, [sp, #792]
   13a14:	ldr	x0, [x0]
   13a18:	lsl	x0, x0, #3
   13a1c:	add	x0, x1, x0
   13a20:	ldr	x0, [x0]
   13a24:	str	x0, [sp, #456]
   13a28:	ldrb	w0, [sp, #459]
   13a2c:	str	w0, [sp, #780]
   13a30:	ldr	w1, [sp, #780]
   13a34:	ldr	x0, [sp, #784]
   13a38:	bl	f9d8 <BIT_readBits>
   13a3c:	str	x0, [sp, #768]
   13a40:	ldrh	w0, [sp, #456]
   13a44:	and	x1, x0, #0xffff
   13a48:	ldr	x0, [sp, #768]
   13a4c:	add	x1, x1, x0
   13a50:	ldr	x0, [sp, #792]
   13a54:	str	x1, [x0]
   13a58:	nop
   13a5c:	add	x2, sp, #0x70
   13a60:	add	x3, sp, #0x90
   13a64:	ldp	x0, x1, [x3]
   13a68:	stp	x0, x1, [x2]
   13a6c:	ldp	x0, x1, [x3, #16]
   13a70:	stp	x0, x1, [x2, #16]
   13a74:	ldr	w0, [sp, #1124]
   13a78:	and	w1, w0, #0x3
   13a7c:	ldr	x0, [sp, #1176]
   13a80:	str	x0, [sp, #760]
   13a84:	ldr	x0, [sp, #1184]
   13a88:	str	x0, [sp, #752]
   13a8c:	sxtw	x0, w1
   13a90:	lsl	x0, x0, #5
   13a94:	add	x1, sp, #0xb0
   13a98:	add	x2, sp, #0x90
   13a9c:	add	x3, x1, x0
   13aa0:	ldp	x0, x1, [x3]
   13aa4:	stp	x0, x1, [x2]
   13aa8:	ldp	x0, x1, [x3, #16]
   13aac:	stp	x0, x1, [x2, #16]
   13ab0:	add	x0, sp, #0x1e8
   13ab4:	str	x0, [sp, #744]
   13ab8:	ldr	x0, [sp, #1168]
   13abc:	str	x0, [sp, #736]
   13ac0:	ldr	x0, [sp, #1160]
   13ac4:	str	x0, [sp, #728]
   13ac8:	ldr	x0, [sp, #1152]
   13acc:	str	x0, [sp, #720]
   13ad0:	ldr	x0, [sp, #1144]
   13ad4:	str	x0, [sp, #712]
   13ad8:	ldr	x0, [sp, #144]
   13adc:	ldr	x1, [sp, #760]
   13ae0:	add	x0, x1, x0
   13ae4:	str	x0, [sp, #704]
   13ae8:	ldr	x1, [sp, #144]
   13aec:	ldr	x0, [sp, #152]
   13af0:	add	x0, x1, x0
   13af4:	str	x0, [sp, #696]
   13af8:	ldr	x1, [sp, #760]
   13afc:	ldr	x0, [sp, #696]
   13b00:	add	x0, x1, x0
   13b04:	str	x0, [sp, #688]
   13b08:	ldr	x0, [sp, #752]
   13b0c:	sub	x0, x0, #0x8
   13b10:	str	x0, [sp, #680]
   13b14:	ldr	x0, [sp, #744]
   13b18:	ldr	x1, [x0]
   13b1c:	ldr	x0, [sp, #144]
   13b20:	add	x0, x1, x0
   13b24:	str	x0, [sp, #672]
   13b28:	ldr	x0, [sp, #168]
   13b2c:	str	x0, [sp, #664]
   13b30:	ldr	x1, [sp, #752]
   13b34:	ldr	x0, [sp, #688]
   13b38:	cmp	x1, x0
   13b3c:	b.cs	13b48 <ZSTD_decompressSequencesLong_default+0xe50>  // b.hs, b.nlast
   13b40:	mov	x0, #0xffffffffffffffba    	// #-70
   13b44:	b	13ec4 <ZSTD_decompressSequencesLong_default+0x11cc>
   13b48:	ldr	x1, [sp, #736]
   13b4c:	ldr	x0, [sp, #672]
   13b50:	cmp	x1, x0
   13b54:	b.cs	13b60 <ZSTD_decompressSequencesLong_default+0xe68>  // b.hs, b.nlast
   13b58:	mov	x0, #0xffffffffffffffec    	// #-20
   13b5c:	b	13ec4 <ZSTD_decompressSequencesLong_default+0x11cc>
   13b60:	ldr	x1, [sp, #704]
   13b64:	ldr	x0, [sp, #680]
   13b68:	cmp	x1, x0
   13b6c:	b.ls	13bb4 <ZSTD_decompressSequencesLong_default+0xebc>  // b.plast
   13b70:	add	x2, sp, #0x20
   13b74:	add	x3, sp, #0x90
   13b78:	ldp	x0, x1, [x3]
   13b7c:	stp	x0, x1, [x2]
   13b80:	ldp	x0, x1, [x3, #16]
   13b84:	stp	x0, x1, [x2, #16]
   13b88:	add	x0, sp, #0x20
   13b8c:	ldr	x7, [sp, #712]
   13b90:	ldr	x6, [sp, #720]
   13b94:	ldr	x5, [sp, #728]
   13b98:	ldr	x4, [sp, #736]
   13b9c:	ldr	x3, [sp, #744]
   13ba0:	mov	x2, x0
   13ba4:	ldr	x1, [sp, #752]
   13ba8:	ldr	x0, [sp, #760]
   13bac:	bl	11d70 <ZSTD_execSequenceLast7>
   13bb0:	b	13ec4 <ZSTD_decompressSequencesLong_default+0x11cc>
   13bb4:	ldr	x0, [sp, #744]
   13bb8:	ldr	x0, [x0]
   13bbc:	mov	x1, x0
   13bc0:	ldr	x0, [sp, #760]
   13bc4:	bl	fbcc <ZSTD_copy8>
   13bc8:	ldr	x0, [sp, #144]
   13bcc:	cmp	x0, #0x8
   13bd0:	b.ls	13bfc <ZSTD_decompressSequencesLong_default+0xf04>  // b.plast
   13bd4:	ldr	x0, [sp, #760]
   13bd8:	add	x3, x0, #0x8
   13bdc:	ldr	x0, [sp, #744]
   13be0:	ldr	x0, [x0]
   13be4:	add	x1, x0, #0x8
   13be8:	ldr	x0, [sp, #144]
   13bec:	sub	x0, x0, #0x8
   13bf0:	mov	x2, x0
   13bf4:	mov	x0, x3
   13bf8:	bl	fbf8 <ZSTD_wildcopy>
   13bfc:	ldr	x0, [sp, #704]
   13c00:	str	x0, [sp, #760]
   13c04:	ldr	x0, [sp, #744]
   13c08:	ldr	x1, [sp, #672]
   13c0c:	str	x1, [x0]
   13c10:	ldr	x0, [sp, #160]
   13c14:	ldr	x2, [sp, #704]
   13c18:	ldr	x1, [sp, #728]
   13c1c:	sub	x1, x2, x1
   13c20:	cmp	x0, x1
   13c24:	b.ls	13d2c <ZSTD_decompressSequencesLong_default+0x1034>  // b.plast
   13c28:	ldr	x0, [sp, #160]
   13c2c:	ldr	x2, [sp, #704]
   13c30:	ldr	x1, [sp, #720]
   13c34:	sub	x1, x2, x1
   13c38:	cmp	x0, x1
   13c3c:	b.ls	13c48 <ZSTD_decompressSequencesLong_default+0xf50>  // b.plast
   13c40:	mov	x0, #0xffffffffffffffec    	// #-20
   13c44:	b	13ec4 <ZSTD_decompressSequencesLong_default+0x11cc>
   13c48:	ldr	x0, [sp, #152]
   13c4c:	ldr	x1, [sp, #664]
   13c50:	add	x0, x1, x0
   13c54:	ldr	x1, [sp, #712]
   13c58:	cmp	x1, x0
   13c5c:	b.cc	13c7c <ZSTD_decompressSequencesLong_default+0xf84>  // b.lo, b.ul, b.last
   13c60:	ldr	x0, [sp, #152]
   13c64:	mov	x2, x0
   13c68:	ldr	x1, [sp, #664]
   13c6c:	ldr	x0, [sp, #704]
   13c70:	bl	0 <grub_memmove>
   13c74:	ldr	x0, [sp, #696]
   13c78:	b	13ec4 <ZSTD_decompressSequencesLong_default+0x11cc>
   13c7c:	ldr	x1, [sp, #712]
   13c80:	ldr	x0, [sp, #664]
   13c84:	sub	x0, x1, x0
   13c88:	str	x0, [sp, #656]
   13c8c:	ldr	x2, [sp, #656]
   13c90:	ldr	x1, [sp, #664]
   13c94:	ldr	x0, [sp, #704]
   13c98:	bl	0 <grub_memmove>
   13c9c:	ldr	x1, [sp, #704]
   13ca0:	ldr	x0, [sp, #656]
   13ca4:	add	x0, x1, x0
   13ca8:	str	x0, [sp, #760]
   13cac:	ldr	x1, [sp, #152]
   13cb0:	ldr	x0, [sp, #656]
   13cb4:	sub	x0, x1, x0
   13cb8:	str	x0, [sp, #152]
   13cbc:	ldr	x0, [sp, #728]
   13cc0:	str	x0, [sp, #664]
   13cc4:	ldr	x1, [sp, #680]
   13cc8:	ldr	x0, [sp, #760]
   13ccc:	cmp	x1, x0
   13cd0:	b.cc	13ce0 <ZSTD_decompressSequencesLong_default+0xfe8>  // b.lo, b.ul, b.last
   13cd4:	ldr	x0, [sp, #152]
   13cd8:	cmp	x0, #0x2
   13cdc:	b.hi	13d2c <ZSTD_decompressSequencesLong_default+0x1034>  // b.pmore
   13ce0:	str	wzr, [sp, #652]
   13ce4:	b	13d14 <ZSTD_decompressSequencesLong_default+0x101c>
   13ce8:	ldr	w0, [sp, #652]
   13cec:	ldr	x1, [sp, #664]
   13cf0:	add	x1, x1, x0
   13cf4:	ldr	w0, [sp, #652]
   13cf8:	ldr	x2, [sp, #760]
   13cfc:	add	x0, x2, x0
   13d00:	ldrb	w1, [x1]
   13d04:	strb	w1, [x0]
   13d08:	ldr	w0, [sp, #652]
   13d0c:	add	w0, w0, #0x1
   13d10:	str	w0, [sp, #652]
   13d14:	ldr	w1, [sp, #652]
   13d18:	ldr	x0, [sp, #152]
   13d1c:	cmp	x1, x0
   13d20:	b.cc	13ce8 <ZSTD_decompressSequencesLong_default+0xff0>  // b.lo, b.ul, b.last
   13d24:	ldr	x0, [sp, #696]
   13d28:	b	13ec4 <ZSTD_decompressSequencesLong_default+0x11cc>
   13d2c:	ldr	x0, [sp, #160]
   13d30:	cmp	x0, #0x7
   13d34:	b.hi	13de8 <ZSTD_decompressSequencesLong_default+0x10f0>  // b.pmore
   13d38:	ldr	x1, [sp, #160]
   13d3c:	adrp	x0, 0 <grub_memcpy>
   13d40:	add	x0, x0, #0x0
   13d44:	ldr	x0, [x0]
   13d48:	ldr	w0, [x0, x1, lsl #2]
   13d4c:	str	w0, [sp, #648]
   13d50:	ldr	x0, [sp, #664]
   13d54:	ldrb	w1, [x0]
   13d58:	ldr	x0, [sp, #760]
   13d5c:	strb	w1, [x0]
   13d60:	ldr	x0, [sp, #760]
   13d64:	add	x0, x0, #0x1
   13d68:	ldr	x1, [sp, #664]
   13d6c:	ldrb	w1, [x1, #1]
   13d70:	strb	w1, [x0]
   13d74:	ldr	x0, [sp, #760]
   13d78:	add	x0, x0, #0x2
   13d7c:	ldr	x1, [sp, #664]
   13d80:	ldrb	w1, [x1, #2]
   13d84:	strb	w1, [x0]
   13d88:	ldr	x0, [sp, #760]
   13d8c:	add	x0, x0, #0x3
   13d90:	ldr	x1, [sp, #664]
   13d94:	ldrb	w1, [x1, #3]
   13d98:	strb	w1, [x0]
   13d9c:	ldr	x1, [sp, #160]
   13da0:	adrp	x0, 0 <grub_memcpy>
   13da4:	add	x0, x0, #0x0
   13da8:	ldr	x0, [x0]
   13dac:	ldr	w0, [x0, x1, lsl #2]
   13db0:	mov	w0, w0
   13db4:	ldr	x1, [sp, #664]
   13db8:	add	x0, x1, x0
   13dbc:	str	x0, [sp, #664]
   13dc0:	ldr	x0, [sp, #760]
   13dc4:	add	x0, x0, #0x4
   13dc8:	ldr	x1, [sp, #664]
   13dcc:	bl	fc70 <ZSTD_copy4>
   13dd0:	ldrsw	x0, [sp, #648]
   13dd4:	neg	x0, x0
   13dd8:	ldr	x1, [sp, #664]
   13ddc:	add	x0, x1, x0
   13de0:	str	x0, [sp, #664]
   13de4:	b	13df4 <ZSTD_decompressSequencesLong_default+0x10fc>
   13de8:	ldr	x1, [sp, #664]
   13dec:	ldr	x0, [sp, #760]
   13df0:	bl	fbcc <ZSTD_copy8>
   13df4:	ldr	x0, [sp, #760]
   13df8:	add	x0, x0, #0x8
   13dfc:	str	x0, [sp, #760]
   13e00:	ldr	x0, [sp, #664]
   13e04:	add	x0, x0, #0x8
   13e08:	str	x0, [sp, #664]
   13e0c:	ldr	x0, [sp, #752]
   13e10:	sub	x0, x0, #0xd
   13e14:	ldr	x1, [sp, #688]
   13e18:	cmp	x1, x0
   13e1c:	b.ls	13ea8 <ZSTD_decompressSequencesLong_default+0x11b0>  // b.plast
   13e20:	ldr	x1, [sp, #680]
   13e24:	ldr	x0, [sp, #760]
   13e28:	cmp	x1, x0
   13e2c:	b.ls	13e94 <ZSTD_decompressSequencesLong_default+0x119c>  // b.plast
   13e30:	ldr	x1, [sp, #680]
   13e34:	ldr	x0, [sp, #760]
   13e38:	sub	x0, x1, x0
   13e3c:	mov	x2, x0
   13e40:	ldr	x1, [sp, #664]
   13e44:	ldr	x0, [sp, #760]
   13e48:	bl	fbf8 <ZSTD_wildcopy>
   13e4c:	ldr	x1, [sp, #680]
   13e50:	ldr	x0, [sp, #760]
   13e54:	sub	x0, x1, x0
   13e58:	mov	x1, x0
   13e5c:	ldr	x0, [sp, #664]
   13e60:	add	x0, x0, x1
   13e64:	str	x0, [sp, #664]
   13e68:	ldr	x0, [sp, #680]
   13e6c:	str	x0, [sp, #760]
   13e70:	b	13e94 <ZSTD_decompressSequencesLong_default+0x119c>
   13e74:	ldr	x1, [sp, #664]
   13e78:	add	x0, x1, #0x1
   13e7c:	str	x0, [sp, #664]
   13e80:	ldr	x0, [sp, #760]
   13e84:	add	x2, x0, #0x1
   13e88:	str	x2, [sp, #760]
   13e8c:	ldrb	w1, [x1]
   13e90:	strb	w1, [x0]
   13e94:	ldr	x1, [sp, #688]
   13e98:	ldr	x0, [sp, #760]
   13e9c:	cmp	x1, x0
   13ea0:	b.hi	13e74 <ZSTD_decompressSequencesLong_default+0x117c>  // b.pmore
   13ea4:	b	13ec0 <ZSTD_decompressSequencesLong_default+0x11c8>
   13ea8:	ldr	x0, [sp, #152]
   13eac:	sub	x0, x0, #0x8
   13eb0:	mov	x2, x0
   13eb4:	ldr	x1, [sp, #664]
   13eb8:	ldr	x0, [sp, #760]
   13ebc:	bl	fbf8 <ZSTD_wildcopy>
   13ec0:	ldr	x0, [sp, #696]
   13ec4:	str	x0, [sp, #640]
   13ec8:	ldr	x0, [sp, #640]
   13ecc:	bl	f558 <ERR_isError>
   13ed0:	cmp	w0, #0x0
   13ed4:	b.eq	13ee0 <ZSTD_decompressSequencesLong_default+0x11e8>  // b.none
   13ed8:	ldr	x0, [sp, #640]
   13edc:	b	144d4 <ZSTD_decompressSequencesLong_default+0x17dc>
   13ee0:	ldr	x0, [sp, #136]
   13ee4:	prfm	pldl2keep, [x0]
   13ee8:	ldr	w0, [sp, #1124]
   13eec:	and	w0, w0, #0x3
   13ef0:	sxtw	x0, w0
   13ef4:	lsl	x0, x0, #5
   13ef8:	add	x1, sp, #0xb0
   13efc:	add	x2, x1, x0
   13f00:	add	x3, sp, #0x70
   13f04:	ldp	x0, x1, [x3]
   13f08:	stp	x0, x1, [x2]
   13f0c:	ldp	x0, x1, [x3, #16]
   13f10:	stp	x0, x1, [x2, #16]
   13f14:	ldr	x1, [sp, #1176]
   13f18:	ldr	x0, [sp, #640]
   13f1c:	add	x0, x1, x0
   13f20:	str	x0, [sp, #1176]
   13f24:	ldr	w0, [sp, #1124]
   13f28:	add	w0, w0, #0x1
   13f2c:	str	w0, [sp, #1124]
   13f30:	add	x0, sp, #0x130
   13f34:	bl	fa48 <BIT_reloadDStream>
   13f38:	cmp	w0, #0x2
   13f3c:	b.hi	13f50 <ZSTD_decompressSequencesLong_default+0x1258>  // b.pmore
   13f40:	ldr	w1, [sp, #1220]
   13f44:	ldr	w0, [sp, #1124]
   13f48:	cmp	w1, w0
   13f4c:	b.gt	134f4 <ZSTD_decompressSequencesLong_default+0x7fc>
   13f50:	ldr	w1, [sp, #1220]
   13f54:	ldr	w0, [sp, #1124]
   13f58:	cmp	w1, w0
   13f5c:	b.le	13f68 <ZSTD_decompressSequencesLong_default+0x1270>
   13f60:	mov	x0, #0xffffffffffffffec    	// #-20
   13f64:	b	1446c <ZSTD_decompressSequencesLong_default+0x1774>
   13f68:	ldr	w1, [sp, #1124]
   13f6c:	ldr	w0, [sp, #1140]
   13f70:	sub	w0, w1, w0
   13f74:	str	w0, [sp, #1124]
   13f78:	b	14404 <ZSTD_decompressSequencesLong_default+0x170c>
   13f7c:	ldr	w0, [sp, #1124]
   13f80:	and	w1, w0, #0x3
   13f84:	ldr	x0, [sp, #1176]
   13f88:	str	x0, [sp, #632]
   13f8c:	ldr	x0, [sp, #1184]
   13f90:	str	x0, [sp, #624]
   13f94:	sxtw	x0, w1
   13f98:	lsl	x0, x0, #5
   13f9c:	add	x1, sp, #0xb0
   13fa0:	add	x2, sp, #0x90
   13fa4:	add	x3, x1, x0
   13fa8:	ldp	x0, x1, [x3]
   13fac:	stp	x0, x1, [x2]
   13fb0:	ldp	x0, x1, [x3, #16]
   13fb4:	stp	x0, x1, [x2, #16]
   13fb8:	add	x0, sp, #0x1e8
   13fbc:	str	x0, [sp, #616]
   13fc0:	ldr	x0, [sp, #1168]
   13fc4:	str	x0, [sp, #608]
   13fc8:	ldr	x0, [sp, #1160]
   13fcc:	str	x0, [sp, #600]
   13fd0:	ldr	x0, [sp, #1152]
   13fd4:	str	x0, [sp, #592]
   13fd8:	ldr	x0, [sp, #1144]
   13fdc:	str	x0, [sp, #584]
   13fe0:	ldr	x0, [sp, #144]
   13fe4:	ldr	x1, [sp, #632]
   13fe8:	add	x0, x1, x0
   13fec:	str	x0, [sp, #576]
   13ff0:	ldr	x1, [sp, #144]
   13ff4:	ldr	x0, [sp, #152]
   13ff8:	add	x0, x1, x0
   13ffc:	str	x0, [sp, #568]
   14000:	ldr	x1, [sp, #632]
   14004:	ldr	x0, [sp, #568]
   14008:	add	x0, x1, x0
   1400c:	str	x0, [sp, #560]
   14010:	ldr	x0, [sp, #624]
   14014:	sub	x0, x0, #0x8
   14018:	str	x0, [sp, #552]
   1401c:	ldr	x0, [sp, #616]
   14020:	ldr	x1, [x0]
   14024:	ldr	x0, [sp, #144]
   14028:	add	x0, x1, x0
   1402c:	str	x0, [sp, #544]
   14030:	ldr	x0, [sp, #168]
   14034:	str	x0, [sp, #536]
   14038:	ldr	x1, [sp, #624]
   1403c:	ldr	x0, [sp, #560]
   14040:	cmp	x1, x0
   14044:	b.cs	14050 <ZSTD_decompressSequencesLong_default+0x1358>  // b.hs, b.nlast
   14048:	mov	x0, #0xffffffffffffffba    	// #-70
   1404c:	b	143cc <ZSTD_decompressSequencesLong_default+0x16d4>
   14050:	ldr	x1, [sp, #608]
   14054:	ldr	x0, [sp, #544]
   14058:	cmp	x1, x0
   1405c:	b.cs	14068 <ZSTD_decompressSequencesLong_default+0x1370>  // b.hs, b.nlast
   14060:	mov	x0, #0xffffffffffffffec    	// #-20
   14064:	b	143cc <ZSTD_decompressSequencesLong_default+0x16d4>
   14068:	ldr	x1, [sp, #576]
   1406c:	ldr	x0, [sp, #552]
   14070:	cmp	x1, x0
   14074:	b.ls	140bc <ZSTD_decompressSequencesLong_default+0x13c4>  // b.plast
   14078:	add	x2, sp, #0x20
   1407c:	add	x3, sp, #0x90
   14080:	ldp	x0, x1, [x3]
   14084:	stp	x0, x1, [x2]
   14088:	ldp	x0, x1, [x3, #16]
   1408c:	stp	x0, x1, [x2, #16]
   14090:	add	x0, sp, #0x20
   14094:	ldr	x7, [sp, #584]
   14098:	ldr	x6, [sp, #592]
   1409c:	ldr	x5, [sp, #600]
   140a0:	ldr	x4, [sp, #608]
   140a4:	ldr	x3, [sp, #616]
   140a8:	mov	x2, x0
   140ac:	ldr	x1, [sp, #624]
   140b0:	ldr	x0, [sp, #632]
   140b4:	bl	11d70 <ZSTD_execSequenceLast7>
   140b8:	b	143cc <ZSTD_decompressSequencesLong_default+0x16d4>
   140bc:	ldr	x0, [sp, #616]
   140c0:	ldr	x0, [x0]
   140c4:	mov	x1, x0
   140c8:	ldr	x0, [sp, #632]
   140cc:	bl	fbcc <ZSTD_copy8>
   140d0:	ldr	x0, [sp, #144]
   140d4:	cmp	x0, #0x8
   140d8:	b.ls	14104 <ZSTD_decompressSequencesLong_default+0x140c>  // b.plast
   140dc:	ldr	x0, [sp, #632]
   140e0:	add	x3, x0, #0x8
   140e4:	ldr	x0, [sp, #616]
   140e8:	ldr	x0, [x0]
   140ec:	add	x1, x0, #0x8
   140f0:	ldr	x0, [sp, #144]
   140f4:	sub	x0, x0, #0x8
   140f8:	mov	x2, x0
   140fc:	mov	x0, x3
   14100:	bl	fbf8 <ZSTD_wildcopy>
   14104:	ldr	x0, [sp, #576]
   14108:	str	x0, [sp, #632]
   1410c:	ldr	x0, [sp, #616]
   14110:	ldr	x1, [sp, #544]
   14114:	str	x1, [x0]
   14118:	ldr	x0, [sp, #160]
   1411c:	ldr	x2, [sp, #576]
   14120:	ldr	x1, [sp, #600]
   14124:	sub	x1, x2, x1
   14128:	cmp	x0, x1
   1412c:	b.ls	14234 <ZSTD_decompressSequencesLong_default+0x153c>  // b.plast
   14130:	ldr	x0, [sp, #160]
   14134:	ldr	x2, [sp, #576]
   14138:	ldr	x1, [sp, #592]
   1413c:	sub	x1, x2, x1
   14140:	cmp	x0, x1
   14144:	b.ls	14150 <ZSTD_decompressSequencesLong_default+0x1458>  // b.plast
   14148:	mov	x0, #0xffffffffffffffec    	// #-20
   1414c:	b	143cc <ZSTD_decompressSequencesLong_default+0x16d4>
   14150:	ldr	x0, [sp, #152]
   14154:	ldr	x1, [sp, #536]
   14158:	add	x0, x1, x0
   1415c:	ldr	x1, [sp, #584]
   14160:	cmp	x1, x0
   14164:	b.cc	14184 <ZSTD_decompressSequencesLong_default+0x148c>  // b.lo, b.ul, b.last
   14168:	ldr	x0, [sp, #152]
   1416c:	mov	x2, x0
   14170:	ldr	x1, [sp, #536]
   14174:	ldr	x0, [sp, #576]
   14178:	bl	0 <grub_memmove>
   1417c:	ldr	x0, [sp, #568]
   14180:	b	143cc <ZSTD_decompressSequencesLong_default+0x16d4>
   14184:	ldr	x1, [sp, #584]
   14188:	ldr	x0, [sp, #536]
   1418c:	sub	x0, x1, x0
   14190:	str	x0, [sp, #528]
   14194:	ldr	x2, [sp, #528]
   14198:	ldr	x1, [sp, #536]
   1419c:	ldr	x0, [sp, #576]
   141a0:	bl	0 <grub_memmove>
   141a4:	ldr	x1, [sp, #576]
   141a8:	ldr	x0, [sp, #528]
   141ac:	add	x0, x1, x0
   141b0:	str	x0, [sp, #632]
   141b4:	ldr	x1, [sp, #152]
   141b8:	ldr	x0, [sp, #528]
   141bc:	sub	x0, x1, x0
   141c0:	str	x0, [sp, #152]
   141c4:	ldr	x0, [sp, #600]
   141c8:	str	x0, [sp, #536]
   141cc:	ldr	x1, [sp, #552]
   141d0:	ldr	x0, [sp, #632]
   141d4:	cmp	x1, x0
   141d8:	b.cc	141e8 <ZSTD_decompressSequencesLong_default+0x14f0>  // b.lo, b.ul, b.last
   141dc:	ldr	x0, [sp, #152]
   141e0:	cmp	x0, #0x2
   141e4:	b.hi	14234 <ZSTD_decompressSequencesLong_default+0x153c>  // b.pmore
   141e8:	str	wzr, [sp, #524]
   141ec:	b	1421c <ZSTD_decompressSequencesLong_default+0x1524>
   141f0:	ldr	w0, [sp, #524]
   141f4:	ldr	x1, [sp, #536]
   141f8:	add	x1, x1, x0
   141fc:	ldr	w0, [sp, #524]
   14200:	ldr	x2, [sp, #632]
   14204:	add	x0, x2, x0
   14208:	ldrb	w1, [x1]
   1420c:	strb	w1, [x0]
   14210:	ldr	w0, [sp, #524]
   14214:	add	w0, w0, #0x1
   14218:	str	w0, [sp, #524]
   1421c:	ldr	w1, [sp, #524]
   14220:	ldr	x0, [sp, #152]
   14224:	cmp	x1, x0
   14228:	b.cc	141f0 <ZSTD_decompressSequencesLong_default+0x14f8>  // b.lo, b.ul, b.last
   1422c:	ldr	x0, [sp, #568]
   14230:	b	143cc <ZSTD_decompressSequencesLong_default+0x16d4>
   14234:	ldr	x0, [sp, #160]
   14238:	cmp	x0, #0x7
   1423c:	b.hi	142f0 <ZSTD_decompressSequencesLong_default+0x15f8>  // b.pmore
   14240:	ldr	x1, [sp, #160]
   14244:	adrp	x0, 0 <grub_memcpy>
   14248:	add	x0, x0, #0x0
   1424c:	ldr	x0, [x0]
   14250:	ldr	w0, [x0, x1, lsl #2]
   14254:	str	w0, [sp, #520]
   14258:	ldr	x0, [sp, #536]
   1425c:	ldrb	w1, [x0]
   14260:	ldr	x0, [sp, #632]
   14264:	strb	w1, [x0]
   14268:	ldr	x0, [sp, #632]
   1426c:	add	x0, x0, #0x1
   14270:	ldr	x1, [sp, #536]
   14274:	ldrb	w1, [x1, #1]
   14278:	strb	w1, [x0]
   1427c:	ldr	x0, [sp, #632]
   14280:	add	x0, x0, #0x2
   14284:	ldr	x1, [sp, #536]
   14288:	ldrb	w1, [x1, #2]
   1428c:	strb	w1, [x0]
   14290:	ldr	x0, [sp, #632]
   14294:	add	x0, x0, #0x3
   14298:	ldr	x1, [sp, #536]
   1429c:	ldrb	w1, [x1, #3]
   142a0:	strb	w1, [x0]
   142a4:	ldr	x1, [sp, #160]
   142a8:	adrp	x0, 0 <grub_memcpy>
   142ac:	add	x0, x0, #0x0
   142b0:	ldr	x0, [x0]
   142b4:	ldr	w0, [x0, x1, lsl #2]
   142b8:	mov	w0, w0
   142bc:	ldr	x1, [sp, #536]
   142c0:	add	x0, x1, x0
   142c4:	str	x0, [sp, #536]
   142c8:	ldr	x0, [sp, #632]
   142cc:	add	x0, x0, #0x4
   142d0:	ldr	x1, [sp, #536]
   142d4:	bl	fc70 <ZSTD_copy4>
   142d8:	ldrsw	x0, [sp, #520]
   142dc:	neg	x0, x0
   142e0:	ldr	x1, [sp, #536]
   142e4:	add	x0, x1, x0
   142e8:	str	x0, [sp, #536]
   142ec:	b	142fc <ZSTD_decompressSequencesLong_default+0x1604>
   142f0:	ldr	x1, [sp, #536]
   142f4:	ldr	x0, [sp, #632]
   142f8:	bl	fbcc <ZSTD_copy8>
   142fc:	ldr	x0, [sp, #632]
   14300:	add	x0, x0, #0x8
   14304:	str	x0, [sp, #632]
   14308:	ldr	x0, [sp, #536]
   1430c:	add	x0, x0, #0x8
   14310:	str	x0, [sp, #536]
   14314:	ldr	x0, [sp, #624]
   14318:	sub	x0, x0, #0xd
   1431c:	ldr	x1, [sp, #560]
   14320:	cmp	x1, x0
   14324:	b.ls	143b0 <ZSTD_decompressSequencesLong_default+0x16b8>  // b.plast
   14328:	ldr	x1, [sp, #552]
   1432c:	ldr	x0, [sp, #632]
   14330:	cmp	x1, x0
   14334:	b.ls	1439c <ZSTD_decompressSequencesLong_default+0x16a4>  // b.plast
   14338:	ldr	x1, [sp, #552]
   1433c:	ldr	x0, [sp, #632]
   14340:	sub	x0, x1, x0
   14344:	mov	x2, x0
   14348:	ldr	x1, [sp, #536]
   1434c:	ldr	x0, [sp, #632]
   14350:	bl	fbf8 <ZSTD_wildcopy>
   14354:	ldr	x1, [sp, #552]
   14358:	ldr	x0, [sp, #632]
   1435c:	sub	x0, x1, x0
   14360:	mov	x1, x0
   14364:	ldr	x0, [sp, #536]
   14368:	add	x0, x0, x1
   1436c:	str	x0, [sp, #536]
   14370:	ldr	x0, [sp, #552]
   14374:	str	x0, [sp, #632]
   14378:	b	1439c <ZSTD_decompressSequencesLong_default+0x16a4>
   1437c:	ldr	x1, [sp, #536]
   14380:	add	x0, x1, #0x1
   14384:	str	x0, [sp, #536]
   14388:	ldr	x0, [sp, #632]
   1438c:	add	x2, x0, #0x1
   14390:	str	x2, [sp, #632]
   14394:	ldrb	w1, [x1]
   14398:	strb	w1, [x0]
   1439c:	ldr	x1, [sp, #560]
   143a0:	ldr	x0, [sp, #632]
   143a4:	cmp	x1, x0
   143a8:	b.hi	1437c <ZSTD_decompressSequencesLong_default+0x1684>  // b.pmore
   143ac:	b	143c8 <ZSTD_decompressSequencesLong_default+0x16d0>
   143b0:	ldr	x0, [sp, #152]
   143b4:	sub	x0, x0, #0x8
   143b8:	mov	x2, x0
   143bc:	ldr	x1, [sp, #536]
   143c0:	ldr	x0, [sp, #632]
   143c4:	bl	fbf8 <ZSTD_wildcopy>
   143c8:	ldr	x0, [sp, #568]
   143cc:	str	x0, [sp, #512]
   143d0:	ldr	x0, [sp, #512]
   143d4:	bl	f558 <ERR_isError>
   143d8:	cmp	w0, #0x0
   143dc:	b.eq	143e8 <ZSTD_decompressSequencesLong_default+0x16f0>  // b.none
   143e0:	ldr	x0, [sp, #512]
   143e4:	b	1446c <ZSTD_decompressSequencesLong_default+0x1774>
   143e8:	ldr	x1, [sp, #1176]
   143ec:	ldr	x0, [sp, #512]
   143f0:	add	x0, x1, x0
   143f4:	str	x0, [sp, #1176]
   143f8:	ldr	w0, [sp, #1124]
   143fc:	add	w0, w0, #0x1
   14400:	str	w0, [sp, #1124]
   14404:	ldr	w1, [sp, #1220]
   14408:	ldr	w0, [sp, #1124]
   1440c:	cmp	w1, w0
   14410:	b.gt	13f7c <ZSTD_decompressSequencesLong_default+0x1284>
   14414:	str	wzr, [sp, #508]
   14418:	b	1445c <ZSTD_decompressSequencesLong_default+0x1764>
   1441c:	ldr	w0, [sp, #508]
   14420:	add	x0, x0, #0xa
   14424:	lsl	x0, x0, #3
   14428:	add	x1, sp, #0x138
   1442c:	ldr	x0, [x1, x0]
   14430:	mov	w3, w0
   14434:	ldr	x1, [sp, #1256]
   14438:	ldr	w2, [sp, #508]
   1443c:	mov	x0, #0x1a0c                	// #6668
   14440:	add	x0, x2, x0
   14444:	lsl	x0, x0, #2
   14448:	add	x0, x1, x0
   1444c:	str	w3, [x0, #12]
   14450:	ldr	w0, [sp, #508]
   14454:	add	w0, w0, #0x1
   14458:	str	w0, [sp, #508]
   1445c:	ldr	w0, [sp, #508]
   14460:	cmp	w0, #0x2
   14464:	b.ls	1441c <ZSTD_decompressSequencesLong_default+0x1724>  // b.plast
   14468:	b	14470 <ZSTD_decompressSequencesLong_default+0x1778>
   1446c:	b	144d4 <ZSTD_decompressSequencesLong_default+0x17dc>
   14470:	ldr	x0, [sp, #488]
   14474:	ldr	x1, [sp, #1168]
   14478:	sub	x0, x1, x0
   1447c:	str	x0, [sp, #496]
   14480:	ldr	x1, [sp, #1184]
   14484:	ldr	x0, [sp, #1176]
   14488:	sub	x0, x1, x0
   1448c:	mov	x1, x0
   14490:	ldr	x0, [sp, #496]
   14494:	cmp	x0, x1
   14498:	b.ls	144a4 <ZSTD_decompressSequencesLong_default+0x17ac>  // b.plast
   1449c:	mov	x0, #0xffffffffffffffba    	// #-70
   144a0:	b	144d4 <ZSTD_decompressSequencesLong_default+0x17dc>
   144a4:	ldr	x0, [sp, #488]
   144a8:	ldr	x2, [sp, #496]
   144ac:	mov	x1, x0
   144b0:	ldr	x0, [sp, #1176]
   144b4:	bl	f2e0 <grub_memcpy>
   144b8:	ldr	x1, [sp, #1176]
   144bc:	ldr	x0, [sp, #496]
   144c0:	add	x0, x1, x0
   144c4:	str	x0, [sp, #1176]
   144c8:	ldr	x1, [sp, #1176]
   144cc:	ldr	x0, [sp, #1192]
   144d0:	sub	x0, x1, x0
   144d4:	ldr	x19, [sp, #16]
   144d8:	ldp	x29, x30, [sp]
   144dc:	add	sp, sp, #0x4f0
   144e0:	ret
   144e4:	nop
	...

00000000000144f8 <ZSTD_decompressSequences>:
   144f8:	stp	x29, x30, [sp, #-64]!
   144fc:	mov	x29, sp
   14500:	str	x0, [sp, #56]
   14504:	str	x1, [sp, #48]
   14508:	str	x2, [sp, #40]
   1450c:	str	x3, [sp, #32]
   14510:	str	x4, [sp, #24]
   14514:	str	w5, [sp, #20]
   14518:	str	w6, [sp, #16]
   1451c:	ldr	w6, [sp, #16]
   14520:	ldr	w5, [sp, #20]
   14524:	ldr	x4, [sp, #24]
   14528:	ldr	x3, [sp, #32]
   1452c:	ldr	x2, [sp, #40]
   14530:	ldr	x1, [sp, #48]
   14534:	ldr	x0, [sp, #56]
   14538:	bl	1205c <ZSTD_decompressSequences_default>
   1453c:	ldp	x29, x30, [sp], #64
   14540:	ret

0000000000014544 <ZSTD_decompressSequencesLong>:
   14544:	stp	x29, x30, [sp, #-64]!
   14548:	mov	x29, sp
   1454c:	str	x0, [sp, #56]
   14550:	str	x1, [sp, #48]
   14554:	str	x2, [sp, #40]
   14558:	str	x3, [sp, #32]
   1455c:	str	x4, [sp, #24]
   14560:	str	w5, [sp, #20]
   14564:	str	w6, [sp, #16]
   14568:	ldr	w6, [sp, #16]
   1456c:	ldr	w5, [sp, #20]
   14570:	ldr	x4, [sp, #24]
   14574:	ldr	x3, [sp, #32]
   14578:	ldr	x2, [sp, #40]
   1457c:	ldr	x1, [sp, #48]
   14580:	ldr	x0, [sp, #56]
   14584:	bl	12cf8 <ZSTD_decompressSequencesLong_default>
   14588:	ldp	x29, x30, [sp], #64
   1458c:	ret

0000000000014590 <ZSTD_getLongOffsetsShare>:
   14590:	sub	sp, sp, #0x40
   14594:	str	x0, [sp, #8]
   14598:	ldr	x0, [sp, #8]
   1459c:	str	x0, [sp, #48]
   145a0:	ldr	x0, [sp, #48]
   145a4:	ldr	w0, [x0, #4]
   145a8:	str	w0, [sp, #44]
   145ac:	ldr	x0, [sp, #8]
   145b0:	add	x0, x0, #0x8
   145b4:	str	x0, [sp, #32]
   145b8:	ldr	w0, [sp, #44]
   145bc:	mov	w1, #0x1                   	// #1
   145c0:	lsl	w0, w1, w0
   145c4:	str	w0, [sp, #28]
   145c8:	str	wzr, [sp, #56]
   145cc:	str	wzr, [sp, #60]
   145d0:	b	14608 <ZSTD_getLongOffsetsShare+0x78>
   145d4:	ldr	w0, [sp, #60]
   145d8:	lsl	x0, x0, #3
   145dc:	ldr	x1, [sp, #32]
   145e0:	add	x0, x1, x0
   145e4:	ldrb	w0, [x0, #2]
   145e8:	cmp	w0, #0x16
   145ec:	b.ls	145fc <ZSTD_getLongOffsetsShare+0x6c>  // b.plast
   145f0:	ldr	w0, [sp, #56]
   145f4:	add	w0, w0, #0x1
   145f8:	str	w0, [sp, #56]
   145fc:	ldr	w0, [sp, #60]
   14600:	add	w0, w0, #0x1
   14604:	str	w0, [sp, #60]
   14608:	ldr	w1, [sp, #60]
   1460c:	ldr	w0, [sp, #28]
   14610:	cmp	w1, w0
   14614:	b.cc	145d4 <ZSTD_getLongOffsetsShare+0x44>  // b.lo, b.ul, b.last
   14618:	mov	w1, #0x8                   	// #8
   1461c:	ldr	w0, [sp, #44]
   14620:	sub	w0, w1, w0
   14624:	ldr	w1, [sp, #56]
   14628:	lsl	w0, w1, w0
   1462c:	str	w0, [sp, #56]
   14630:	ldr	w0, [sp, #56]
   14634:	add	sp, sp, #0x40
   14638:	ret

000000000001463c <ZSTD_decompressBlock_internal>:
   1463c:	stp	x29, x30, [sp, #-128]!
   14640:	mov	x29, sp
   14644:	str	x19, [sp, #16]
   14648:	str	x0, [sp, #72]
   1464c:	str	x1, [sp, #64]
   14650:	str	x2, [sp, #56]
   14654:	str	x3, [sp, #48]
   14658:	str	x4, [sp, #40]
   1465c:	str	w5, [sp, #36]
   14660:	ldr	x0, [sp, #48]
   14664:	str	x0, [sp, #120]
   14668:	bl	f30c <MEM_32bits>
   1466c:	cmp	w0, #0x0
   14670:	b.eq	146b0 <ZSTD_decompressBlock_internal+0x74>  // b.none
   14674:	ldr	w0, [sp, #36]
   14678:	cmp	w0, #0x0
   1467c:	b.eq	146a8 <ZSTD_decompressBlock_internal+0x6c>  // b.none
   14680:	ldr	x0, [sp, #72]
   14684:	ldr	x19, [x0, #28792]
   14688:	bl	f30c <MEM_32bits>
   1468c:	cmp	w0, #0x0
   14690:	b.eq	1469c <ZSTD_decompressBlock_internal+0x60>  // b.none
   14694:	mov	x0, #0x2000000             	// #33554432
   14698:	b	146a0 <ZSTD_decompressBlock_internal+0x64>
   1469c:	mov	x0, #0x200000000000000     	// #144115188075855872
   146a0:	cmp	x0, x19
   146a4:	b.cs	146b0 <ZSTD_decompressBlock_internal+0x74>  // b.hs, b.nlast
   146a8:	mov	w0, #0x1                   	// #1
   146ac:	b	146b4 <ZSTD_decompressBlock_internal+0x78>
   146b0:	mov	w0, #0x0                   	// #0
   146b4:	str	w0, [sp, #116]
   146b8:	ldr	x1, [sp, #40]
   146bc:	mov	x0, #0x1ffff               	// #131071
   146c0:	cmp	x1, x0
   146c4:	b.ls	146d0 <ZSTD_decompressBlock_internal+0x94>  // b.plast
   146c8:	mov	x0, #0xffffffffffffffb8    	// #-72
   146cc:	b	14824 <ZSTD_decompressBlock_internal+0x1e8>
   146d0:	ldr	x2, [sp, #40]
   146d4:	ldr	x1, [sp, #48]
   146d8:	ldr	x0, [sp, #72]
   146dc:	bl	10b04 <ZSTD_decodeLiteralsBlock>
   146e0:	str	x0, [sp, #104]
   146e4:	ldr	x0, [sp, #104]
   146e8:	bl	f558 <ERR_isError>
   146ec:	cmp	w0, #0x0
   146f0:	b.eq	146fc <ZSTD_decompressBlock_internal+0xc0>  // b.none
   146f4:	ldr	x0, [sp, #104]
   146f8:	b	14824 <ZSTD_decompressBlock_internal+0x1e8>
   146fc:	ldr	x1, [sp, #120]
   14700:	ldr	x0, [sp, #104]
   14704:	add	x0, x1, x0
   14708:	str	x0, [sp, #120]
   1470c:	ldr	x1, [sp, #40]
   14710:	ldr	x0, [sp, #104]
   14714:	sub	x0, x1, x0
   14718:	str	x0, [sp, #40]
   1471c:	add	x0, sp, #0x54
   14720:	ldr	x3, [sp, #40]
   14724:	ldr	x2, [sp, #120]
   14728:	mov	x1, x0
   1472c:	ldr	x0, [sp, #72]
   14730:	bl	11868 <ZSTD_decodeSeqHeaders>
   14734:	str	x0, [sp, #96]
   14738:	ldr	x0, [sp, #96]
   1473c:	bl	f558 <ERR_isError>
   14740:	cmp	w0, #0x0
   14744:	b.eq	14750 <ZSTD_decompressBlock_internal+0x114>  // b.none
   14748:	ldr	x0, [sp, #96]
   1474c:	b	14824 <ZSTD_decompressBlock_internal+0x1e8>
   14750:	ldr	x1, [sp, #120]
   14754:	ldr	x0, [sp, #96]
   14758:	add	x0, x1, x0
   1475c:	str	x0, [sp, #120]
   14760:	ldr	x1, [sp, #40]
   14764:	ldr	x0, [sp, #96]
   14768:	sub	x0, x1, x0
   1476c:	str	x0, [sp, #40]
   14770:	ldr	w0, [sp, #36]
   14774:	cmp	w0, #0x0
   14778:	b.eq	14790 <ZSTD_decompressBlock_internal+0x154>  // b.none
   1477c:	ldr	x0, [sp, #72]
   14780:	ldr	x1, [x0, #28792]
   14784:	mov	x0, #0x1000000             	// #16777216
   14788:	cmp	x1, x0
   1478c:	b.ls	14800 <ZSTD_decompressBlock_internal+0x1c4>  // b.plast
   14790:	ldr	w0, [sp, #84]
   14794:	cmp	w0, #0x0
   14798:	b.le	14800 <ZSTD_decompressBlock_internal+0x1c4>
   1479c:	ldr	x0, [sp, #72]
   147a0:	ldr	x0, [x0, #16]
   147a4:	bl	14590 <ZSTD_getLongOffsetsShare>
   147a8:	str	w0, [sp, #92]
   147ac:	bl	f314 <MEM_64bits>
   147b0:	cmp	w0, #0x0
   147b4:	b.eq	147c0 <ZSTD_decompressBlock_internal+0x184>  // b.none
   147b8:	mov	w0, #0x7                   	// #7
   147bc:	b	147c4 <ZSTD_decompressBlock_internal+0x188>
   147c0:	mov	w0, #0x14                  	// #20
   147c4:	str	w0, [sp, #88]
   147c8:	ldr	w1, [sp, #92]
   147cc:	ldr	w0, [sp, #88]
   147d0:	cmp	w1, w0
   147d4:	b.cc	14800 <ZSTD_decompressBlock_internal+0x1c4>  // b.lo, b.ul, b.last
   147d8:	ldr	w0, [sp, #84]
   147dc:	ldr	w6, [sp, #116]
   147e0:	mov	w5, w0
   147e4:	ldr	x4, [sp, #40]
   147e8:	ldr	x3, [sp, #120]
   147ec:	ldr	x2, [sp, #56]
   147f0:	ldr	x1, [sp, #64]
   147f4:	ldr	x0, [sp, #72]
   147f8:	bl	14544 <ZSTD_decompressSequencesLong>
   147fc:	b	14824 <ZSTD_decompressBlock_internal+0x1e8>
   14800:	ldr	w0, [sp, #84]
   14804:	ldr	w6, [sp, #116]
   14808:	mov	w5, w0
   1480c:	ldr	x4, [sp, #40]
   14810:	ldr	x3, [sp, #120]
   14814:	ldr	x2, [sp, #56]
   14818:	ldr	x1, [sp, #64]
   1481c:	ldr	x0, [sp, #72]
   14820:	bl	144f8 <ZSTD_decompressSequences>
   14824:	ldr	x19, [sp, #16]
   14828:	ldp	x29, x30, [sp], #128
   1482c:	ret

0000000000014830 <ZSTD_checkContinuity>:
   14830:	sub	sp, sp, #0x10
   14834:	str	x0, [sp, #8]
   14838:	str	x1, [sp]
   1483c:	ldr	x0, [sp, #8]
   14840:	ldr	x0, [x0, #28744]
   14844:	ldr	x1, [sp]
   14848:	cmp	x1, x0
   1484c:	b.eq	148a0 <ZSTD_checkContinuity+0x70>  // b.none
   14850:	ldr	x0, [sp, #8]
   14854:	ldr	x1, [x0, #28744]
   14858:	ldr	x0, [sp, #8]
   1485c:	str	x1, [x0, #28768]
   14860:	ldr	x0, [sp, #8]
   14864:	ldr	x1, [x0, #28744]
   14868:	ldr	x0, [sp, #8]
   1486c:	ldr	x0, [x0, #28752]
   14870:	sub	x0, x1, x0
   14874:	neg	x0, x0
   14878:	ldr	x1, [sp]
   1487c:	add	x1, x1, x0
   14880:	ldr	x0, [sp, #8]
   14884:	str	x1, [x0, #28760]
   14888:	ldr	x0, [sp, #8]
   1488c:	ldr	x1, [sp]
   14890:	str	x1, [x0, #28752]
   14894:	ldr	x0, [sp, #8]
   14898:	ldr	x1, [sp]
   1489c:	str	x1, [x0, #28744]
   148a0:	nop
   148a4:	add	sp, sp, #0x10
   148a8:	ret

00000000000148ac <ZSTD_decompressBlock>:
   148ac:	stp	x29, x30, [sp, #-80]!
   148b0:	mov	x29, sp
   148b4:	str	x0, [sp, #56]
   148b8:	str	x1, [sp, #48]
   148bc:	str	x2, [sp, #40]
   148c0:	str	x3, [sp, #32]
   148c4:	str	x4, [sp, #24]
   148c8:	ldr	x1, [sp, #48]
   148cc:	ldr	x0, [sp, #56]
   148d0:	bl	14830 <ZSTD_checkContinuity>
   148d4:	mov	w5, #0x0                   	// #0
   148d8:	ldr	x4, [sp, #24]
   148dc:	ldr	x3, [sp, #32]
   148e0:	ldr	x2, [sp, #40]
   148e4:	ldr	x1, [sp, #48]
   148e8:	ldr	x0, [sp, #56]
   148ec:	bl	1463c <ZSTD_decompressBlock_internal>
   148f0:	str	x0, [sp, #72]
   148f4:	ldr	x1, [sp, #48]
   148f8:	ldr	x0, [sp, #72]
   148fc:	add	x1, x1, x0
   14900:	ldr	x0, [sp, #56]
   14904:	str	x1, [x0, #28744]
   14908:	ldr	x0, [sp, #72]
   1490c:	ldp	x29, x30, [sp], #80
   14910:	ret

0000000000014914 <ZSTD_insertBlock>:
   14914:	stp	x29, x30, [sp, #-48]!
   14918:	mov	x29, sp
   1491c:	str	x0, [sp, #40]
   14920:	str	x1, [sp, #32]
   14924:	str	x2, [sp, #24]
   14928:	ldr	x1, [sp, #32]
   1492c:	ldr	x0, [sp, #40]
   14930:	bl	14830 <ZSTD_checkContinuity>
   14934:	ldr	x1, [sp, #32]
   14938:	ldr	x0, [sp, #24]
   1493c:	add	x1, x1, x0
   14940:	ldr	x0, [sp, #40]
   14944:	str	x1, [x0, #28744]
   14948:	ldr	x0, [sp, #24]
   1494c:	ldp	x29, x30, [sp], #48
   14950:	ret

0000000000014954 <ZSTD_generateNxBytes>:
   14954:	stp	x29, x30, [sp, #-48]!
   14958:	mov	x29, sp
   1495c:	str	x0, [sp, #40]
   14960:	str	x1, [sp, #32]
   14964:	strb	w2, [sp, #31]
   14968:	str	x3, [sp, #16]
   1496c:	ldr	x1, [sp, #16]
   14970:	ldr	x0, [sp, #32]
   14974:	cmp	x1, x0
   14978:	b.ls	14984 <ZSTD_generateNxBytes+0x30>  // b.plast
   1497c:	mov	x0, #0xffffffffffffffba    	// #-70
   14980:	b	1499c <ZSTD_generateNxBytes+0x48>
   14984:	ldrb	w0, [sp, #31]
   14988:	ldr	x2, [sp, #16]
   1498c:	mov	w1, w0
   14990:	ldr	x0, [sp, #40]
   14994:	bl	0 <grub_memset>
   14998:	ldr	x0, [sp, #16]
   1499c:	ldp	x29, x30, [sp], #48
   149a0:	ret

00000000000149a4 <ZSTD_findFrameCompressedSize>:
   149a4:	stp	x29, x30, [sp, #-128]!
   149a8:	mov	x29, sp
   149ac:	str	x0, [sp, #24]
   149b0:	str	x1, [sp, #16]
   149b4:	mov	x0, #0x8                   	// #8
   149b8:	ldr	x1, [sp, #16]
   149bc:	cmp	x1, x0
   149c0:	b.cc	149fc <ZSTD_findFrameCompressedSize+0x58>  // b.lo, b.ul, b.last
   149c4:	ldr	x0, [sp, #24]
   149c8:	bl	f448 <MEM_readLE32>
   149cc:	and	w1, w0, #0xfffffff0
   149d0:	mov	w0, #0x2a50                	// #10832
   149d4:	movk	w0, #0x184d, lsl #16
   149d8:	cmp	w1, w0
   149dc:	b.ne	149fc <ZSTD_findFrameCompressedSize+0x58>  // b.any
   149e0:	ldr	x0, [sp, #24]
   149e4:	add	x0, x0, #0x4
   149e8:	bl	f448 <MEM_readLE32>
   149ec:	mov	w1, w0
   149f0:	mov	x0, #0x8                   	// #8
   149f4:	add	x0, x1, x0
   149f8:	b	14b44 <ZSTD_findFrameCompressedSize+0x1a0>
   149fc:	ldr	x0, [sp, #24]
   14a00:	str	x0, [sp, #120]
   14a04:	ldr	x0, [sp, #120]
   14a08:	str	x0, [sp, #104]
   14a0c:	ldr	x0, [sp, #16]
   14a10:	str	x0, [sp, #112]
   14a14:	add	x0, sp, #0x20
   14a18:	ldr	x2, [sp, #16]
   14a1c:	ldr	x1, [sp, #24]
   14a20:	bl	10670 <ZSTD_getFrameHeader>
   14a24:	str	x0, [sp, #96]
   14a28:	ldr	x0, [sp, #96]
   14a2c:	bl	f558 <ERR_isError>
   14a30:	cmp	w0, #0x0
   14a34:	b.eq	14a40 <ZSTD_findFrameCompressedSize+0x9c>  // b.none
   14a38:	ldr	x0, [sp, #96]
   14a3c:	b	14b44 <ZSTD_findFrameCompressedSize+0x1a0>
   14a40:	ldr	x0, [sp, #96]
   14a44:	cmp	x0, #0x0
   14a48:	b.eq	14a54 <ZSTD_findFrameCompressedSize+0xb0>  // b.none
   14a4c:	mov	x0, #0xffffffffffffffb8    	// #-72
   14a50:	b	14b44 <ZSTD_findFrameCompressedSize+0x1a0>
   14a54:	ldr	w0, [sp, #56]
   14a58:	mov	w0, w0
   14a5c:	ldr	x1, [sp, #120]
   14a60:	add	x0, x1, x0
   14a64:	str	x0, [sp, #120]
   14a68:	ldr	w0, [sp, #56]
   14a6c:	mov	w0, w0
   14a70:	ldr	x1, [sp, #112]
   14a74:	sub	x0, x1, x0
   14a78:	str	x0, [sp, #112]
   14a7c:	add	x0, sp, #0x48
   14a80:	mov	x2, x0
   14a84:	ldr	x1, [sp, #112]
   14a88:	ldr	x0, [sp, #120]
   14a8c:	bl	10988 <ZSTD_getcBlockSize>
   14a90:	str	x0, [sp, #88]
   14a94:	ldr	x0, [sp, #88]
   14a98:	bl	f558 <ERR_isError>
   14a9c:	cmp	w0, #0x0
   14aa0:	b.eq	14aac <ZSTD_findFrameCompressedSize+0x108>  // b.none
   14aa4:	ldr	x0, [sp, #88]
   14aa8:	b	14b44 <ZSTD_findFrameCompressedSize+0x1a0>
   14aac:	mov	x1, #0x3                   	// #3
   14ab0:	ldr	x0, [sp, #88]
   14ab4:	add	x0, x1, x0
   14ab8:	ldr	x1, [sp, #112]
   14abc:	cmp	x1, x0
   14ac0:	b.cs	14acc <ZSTD_findFrameCompressedSize+0x128>  // b.hs, b.nlast
   14ac4:	mov	x0, #0xffffffffffffffb8    	// #-72
   14ac8:	b	14b44 <ZSTD_findFrameCompressedSize+0x1a0>
   14acc:	mov	x1, #0x3                   	// #3
   14ad0:	ldr	x0, [sp, #88]
   14ad4:	add	x0, x1, x0
   14ad8:	ldr	x1, [sp, #120]
   14adc:	add	x0, x1, x0
   14ae0:	str	x0, [sp, #120]
   14ae4:	mov	x1, #0x3                   	// #3
   14ae8:	ldr	x0, [sp, #88]
   14aec:	add	x0, x1, x0
   14af0:	ldr	x1, [sp, #112]
   14af4:	sub	x0, x1, x0
   14af8:	str	x0, [sp, #112]
   14afc:	ldr	w0, [sp, #76]
   14b00:	cmp	w0, #0x0
   14b04:	b.eq	14a7c <ZSTD_findFrameCompressedSize+0xd8>  // b.none
   14b08:	ldr	w0, [sp, #64]
   14b0c:	cmp	w0, #0x0
   14b10:	b.ne	14b18 <ZSTD_findFrameCompressedSize+0x174>  // b.any
   14b14:	b	14b38 <ZSTD_findFrameCompressedSize+0x194>
   14b18:	ldr	x0, [sp, #112]
   14b1c:	cmp	x0, #0x3
   14b20:	b.hi	14b2c <ZSTD_findFrameCompressedSize+0x188>  // b.pmore
   14b24:	mov	x0, #0xffffffffffffffb8    	// #-72
   14b28:	b	14b44 <ZSTD_findFrameCompressedSize+0x1a0>
   14b2c:	ldr	x0, [sp, #120]
   14b30:	add	x0, x0, #0x4
   14b34:	str	x0, [sp, #120]
   14b38:	ldr	x1, [sp, #120]
   14b3c:	ldr	x0, [sp, #104]
   14b40:	sub	x0, x1, x0
   14b44:	ldp	x29, x30, [sp], #128
   14b48:	ret

0000000000014b4c <ZSTD_decompressFrame>:
   14b4c:	stp	x29, x30, [sp, #-160]!
   14b50:	mov	x29, sp
   14b54:	str	x0, [sp, #56]
   14b58:	str	x1, [sp, #48]
   14b5c:	str	x2, [sp, #40]
   14b60:	str	x3, [sp, #32]
   14b64:	str	x4, [sp, #24]
   14b68:	ldr	x0, [sp, #32]
   14b6c:	ldr	x0, [x0]
   14b70:	str	x0, [sp, #152]
   14b74:	ldr	x0, [sp, #48]
   14b78:	str	x0, [sp, #120]
   14b7c:	ldr	x1, [sp, #120]
   14b80:	ldr	x0, [sp, #40]
   14b84:	add	x0, x1, x0
   14b88:	str	x0, [sp, #112]
   14b8c:	ldr	x0, [sp, #120]
   14b90:	str	x0, [sp, #144]
   14b94:	ldr	x0, [sp, #24]
   14b98:	ldr	x0, [x0]
   14b9c:	str	x0, [sp, #136]
   14ba0:	mov	x1, #0x6                   	// #6
   14ba4:	mov	x0, #0x3                   	// #3
   14ba8:	add	x0, x1, x0
   14bac:	ldr	x1, [sp, #136]
   14bb0:	cmp	x1, x0
   14bb4:	b.cs	14bc0 <ZSTD_decompressFrame+0x74>  // b.hs, b.nlast
   14bb8:	mov	x0, #0xffffffffffffffb8    	// #-72
   14bbc:	b	14edc <ZSTD_decompressFrame+0x390>
   14bc0:	mov	x0, #0x5                   	// #5
   14bc4:	mov	x1, x0
   14bc8:	ldr	x0, [sp, #152]
   14bcc:	bl	10220 <ZSTD_frameHeaderSize>
   14bd0:	str	x0, [sp, #104]
   14bd4:	ldr	x0, [sp, #104]
   14bd8:	bl	f558 <ERR_isError>
   14bdc:	cmp	w0, #0x0
   14be0:	b.eq	14bec <ZSTD_decompressFrame+0xa0>  // b.none
   14be4:	ldr	x0, [sp, #104]
   14be8:	b	14edc <ZSTD_decompressFrame+0x390>
   14bec:	mov	x1, #0x3                   	// #3
   14bf0:	ldr	x0, [sp, #104]
   14bf4:	add	x0, x1, x0
   14bf8:	ldr	x1, [sp, #136]
   14bfc:	cmp	x1, x0
   14c00:	b.cs	14c0c <ZSTD_decompressFrame+0xc0>  // b.hs, b.nlast
   14c04:	mov	x0, #0xffffffffffffffb8    	// #-72
   14c08:	b	14edc <ZSTD_decompressFrame+0x390>
   14c0c:	ldr	x2, [sp, #104]
   14c10:	ldr	x1, [sp, #152]
   14c14:	ldr	x0, [sp, #56]
   14c18:	bl	108a8 <ZSTD_decodeFrameHeader>
   14c1c:	str	x0, [sp, #96]
   14c20:	ldr	x0, [sp, #96]
   14c24:	bl	f558 <ERR_isError>
   14c28:	cmp	w0, #0x0
   14c2c:	b.eq	14c38 <ZSTD_decompressFrame+0xec>  // b.none
   14c30:	ldr	x0, [sp, #96]
   14c34:	b	14edc <ZSTD_decompressFrame+0x390>
   14c38:	ldr	x1, [sp, #152]
   14c3c:	ldr	x0, [sp, #104]
   14c40:	add	x0, x1, x0
   14c44:	str	x0, [sp, #152]
   14c48:	ldr	x1, [sp, #136]
   14c4c:	ldr	x0, [sp, #104]
   14c50:	sub	x0, x1, x0
   14c54:	str	x0, [sp, #136]
   14c58:	add	x0, sp, #0x40
   14c5c:	mov	x2, x0
   14c60:	ldr	x1, [sp, #136]
   14c64:	ldr	x0, [sp, #152]
   14c68:	bl	10988 <ZSTD_getcBlockSize>
   14c6c:	str	x0, [sp, #88]
   14c70:	ldr	x0, [sp, #88]
   14c74:	bl	f558 <ERR_isError>
   14c78:	cmp	w0, #0x0
   14c7c:	b.eq	14c88 <ZSTD_decompressFrame+0x13c>  // b.none
   14c80:	ldr	x0, [sp, #88]
   14c84:	b	14edc <ZSTD_decompressFrame+0x390>
   14c88:	mov	x0, #0x3                   	// #3
   14c8c:	ldr	x1, [sp, #152]
   14c90:	add	x0, x1, x0
   14c94:	str	x0, [sp, #152]
   14c98:	mov	x0, #0x3                   	// #3
   14c9c:	ldr	x1, [sp, #136]
   14ca0:	sub	x0, x1, x0
   14ca4:	str	x0, [sp, #136]
   14ca8:	ldr	x1, [sp, #88]
   14cac:	ldr	x0, [sp, #136]
   14cb0:	cmp	x1, x0
   14cb4:	b.ls	14cc0 <ZSTD_decompressFrame+0x174>  // b.plast
   14cb8:	mov	x0, #0xffffffffffffffb8    	// #-72
   14cbc:	b	14edc <ZSTD_decompressFrame+0x390>
   14cc0:	ldr	w0, [sp, #64]
   14cc4:	cmp	w0, #0x2
   14cc8:	b.eq	14ce8 <ZSTD_decompressFrame+0x19c>  // b.none
   14ccc:	cmp	w0, #0x2
   14cd0:	b.hi	14d7c <ZSTD_decompressFrame+0x230>  // b.pmore
   14cd4:	cmp	w0, #0x0
   14cd8:	b.eq	14d18 <ZSTD_decompressFrame+0x1cc>  // b.none
   14cdc:	cmp	w0, #0x1
   14ce0:	b.eq	14d40 <ZSTD_decompressFrame+0x1f4>  // b.none
   14ce4:	b	14d7c <ZSTD_decompressFrame+0x230>
   14ce8:	ldr	x1, [sp, #112]
   14cec:	ldr	x0, [sp, #144]
   14cf0:	sub	x0, x1, x0
   14cf4:	mov	w5, #0x1                   	// #1
   14cf8:	ldr	x4, [sp, #88]
   14cfc:	ldr	x3, [sp, #152]
   14d00:	mov	x2, x0
   14d04:	ldr	x1, [sp, #144]
   14d08:	ldr	x0, [sp, #56]
   14d0c:	bl	1463c <ZSTD_decompressBlock_internal>
   14d10:	str	x0, [sp, #128]
   14d14:	b	14d84 <ZSTD_decompressFrame+0x238>
   14d18:	ldr	x1, [sp, #112]
   14d1c:	ldr	x0, [sp, #144]
   14d20:	sub	x0, x1, x0
   14d24:	ldr	x3, [sp, #88]
   14d28:	ldr	x2, [sp, #152]
   14d2c:	mov	x1, x0
   14d30:	ldr	x0, [sp, #144]
   14d34:	bl	10a38 <ZSTD_copyRawBlock>
   14d38:	str	x0, [sp, #128]
   14d3c:	b	14d84 <ZSTD_decompressFrame+0x238>
   14d40:	ldr	x1, [sp, #112]
   14d44:	ldr	x0, [sp, #144]
   14d48:	sub	x0, x1, x0
   14d4c:	mov	x4, x0
   14d50:	ldr	x0, [sp, #152]
   14d54:	ldrb	w1, [x0]
   14d58:	ldr	w0, [sp, #72]
   14d5c:	mov	w0, w0
   14d60:	mov	x3, x0
   14d64:	mov	w2, w1
   14d68:	mov	x1, x4
   14d6c:	ldr	x0, [sp, #144]
   14d70:	bl	14954 <ZSTD_generateNxBytes>
   14d74:	str	x0, [sp, #128]
   14d78:	b	14d84 <ZSTD_decompressFrame+0x238>
   14d7c:	mov	x0, #0xffffffffffffffec    	// #-20
   14d80:	b	14edc <ZSTD_decompressFrame+0x390>
   14d84:	ldr	x0, [sp, #128]
   14d88:	bl	f558 <ERR_isError>
   14d8c:	cmp	w0, #0x0
   14d90:	b.eq	14d9c <ZSTD_decompressFrame+0x250>  // b.none
   14d94:	ldr	x0, [sp, #128]
   14d98:	b	14edc <ZSTD_decompressFrame+0x390>
   14d9c:	ldr	x0, [sp, #56]
   14da0:	add	x0, x0, #0x4, lsl #12
   14da4:	ldr	w0, [x0, #12432]
   14da8:	cmp	w0, #0x0
   14dac:	b.eq	14dc8 <ZSTD_decompressFrame+0x27c>  // b.none
   14db0:	ldr	x1, [sp, #56]
   14db4:	mov	x0, #0x70b0                	// #28848
   14db8:	add	x0, x1, x0
   14dbc:	ldr	x2, [sp, #128]
   14dc0:	ldr	x1, [sp, #144]
   14dc4:	bl	d7e0 <XXH64_update>
   14dc8:	ldr	x1, [sp, #144]
   14dcc:	ldr	x0, [sp, #128]
   14dd0:	add	x0, x1, x0
   14dd4:	str	x0, [sp, #144]
   14dd8:	ldr	x1, [sp, #152]
   14ddc:	ldr	x0, [sp, #88]
   14de0:	add	x0, x1, x0
   14de4:	str	x0, [sp, #152]
   14de8:	ldr	x1, [sp, #136]
   14dec:	ldr	x0, [sp, #88]
   14df0:	sub	x0, x1, x0
   14df4:	str	x0, [sp, #136]
   14df8:	ldr	w0, [sp, #68]
   14dfc:	cmp	w0, #0x0
   14e00:	b.eq	14c58 <ZSTD_decompressFrame+0x10c>  // b.none
   14e04:	ldr	x0, [sp, #56]
   14e08:	ldr	x0, [x0, #28784]
   14e0c:	cmn	x0, #0x1
   14e10:	b.ne	14e18 <ZSTD_decompressFrame+0x2cc>  // b.any
   14e14:	b	14e40 <ZSTD_decompressFrame+0x2f4>
   14e18:	ldr	x1, [sp, #144]
   14e1c:	ldr	x0, [sp, #120]
   14e20:	sub	x0, x1, x0
   14e24:	mov	x1, x0
   14e28:	ldr	x0, [sp, #56]
   14e2c:	ldr	x0, [x0, #28784]
   14e30:	cmp	x1, x0
   14e34:	b.eq	14e40 <ZSTD_decompressFrame+0x2f4>  // b.none
   14e38:	mov	x0, #0xffffffffffffffec    	// #-20
   14e3c:	b	14edc <ZSTD_decompressFrame+0x390>
   14e40:	ldr	x0, [sp, #56]
   14e44:	add	x0, x0, #0x4, lsl #12
   14e48:	ldr	w0, [x0, #12432]
   14e4c:	cmp	w0, #0x0
   14e50:	b.eq	14eb8 <ZSTD_decompressFrame+0x36c>  // b.none
   14e54:	ldr	x1, [sp, #56]
   14e58:	mov	x0, #0x70b0                	// #28848
   14e5c:	add	x0, x1, x0
   14e60:	bl	e6d8 <XXH64_digest>
   14e64:	str	w0, [sp, #84]
   14e68:	ldr	x0, [sp, #136]
   14e6c:	cmp	x0, #0x3
   14e70:	b.hi	14e7c <ZSTD_decompressFrame+0x330>  // b.pmore
   14e74:	mov	x0, #0xffffffffffffffea    	// #-22
   14e78:	b	14edc <ZSTD_decompressFrame+0x390>
   14e7c:	ldr	x0, [sp, #152]
   14e80:	bl	f448 <MEM_readLE32>
   14e84:	str	w0, [sp, #80]
   14e88:	ldr	w1, [sp, #80]
   14e8c:	ldr	w0, [sp, #84]
   14e90:	cmp	w1, w0
   14e94:	b.eq	14ea0 <ZSTD_decompressFrame+0x354>  // b.none
   14e98:	mov	x0, #0xffffffffffffffea    	// #-22
   14e9c:	b	14edc <ZSTD_decompressFrame+0x390>
   14ea0:	ldr	x0, [sp, #152]
   14ea4:	add	x0, x0, #0x4
   14ea8:	str	x0, [sp, #152]
   14eac:	ldr	x0, [sp, #136]
   14eb0:	sub	x0, x0, #0x4
   14eb4:	str	x0, [sp, #136]
   14eb8:	ldr	x0, [sp, #32]
   14ebc:	ldr	x1, [sp, #152]
   14ec0:	str	x1, [x0]
   14ec4:	ldr	x0, [sp, #24]
   14ec8:	ldr	x1, [sp, #136]
   14ecc:	str	x1, [x0]
   14ed0:	ldr	x1, [sp, #144]
   14ed4:	ldr	x0, [sp, #120]
   14ed8:	sub	x0, x1, x0
   14edc:	ldp	x29, x30, [sp], #160
   14ee0:	ret

0000000000014ee4 <ZSTD_decompressMultiFrame>:
   14ee4:	stp	x29, x30, [sp, #-144]!
   14ee8:	mov	x29, sp
   14eec:	str	x0, [sp, #72]
   14ef0:	str	x1, [sp, #64]
   14ef4:	str	x2, [sp, #56]
   14ef8:	str	x3, [sp, #48]
   14efc:	str	x4, [sp, #40]
   14f00:	str	x5, [sp, #32]
   14f04:	str	x6, [sp, #24]
   14f08:	str	x7, [sp, #16]
   14f0c:	ldr	x0, [sp, #64]
   14f10:	str	x0, [sp, #128]
   14f14:	str	wzr, [sp, #140]
   14f18:	ldr	x0, [sp, #16]
   14f1c:	cmp	x0, #0x0
   14f20:	b.eq	150c8 <ZSTD_decompressMultiFrame+0x1e4>  // b.none
   14f24:	ldr	x0, [sp, #16]
   14f28:	bl	15ff0 <ZSTD_DDictDictContent>
   14f2c:	str	x0, [sp, #32]
   14f30:	ldr	x0, [sp, #16]
   14f34:	bl	16008 <ZSTD_DDictDictSize>
   14f38:	str	x0, [sp, #24]
   14f3c:	b	150c8 <ZSTD_decompressMultiFrame+0x1e4>
   14f40:	ldr	x0, [sp, #48]
   14f44:	bl	f448 <MEM_readLE32>
   14f48:	str	w0, [sp, #124]
   14f4c:	ldr	w0, [sp, #124]
   14f50:	and	w1, w0, #0xfffffff0
   14f54:	mov	w0, #0x2a50                	// #10832
   14f58:	movk	w0, #0x184d, lsl #16
   14f5c:	cmp	w1, w0
   14f60:	b.ne	14fd4 <ZSTD_decompressMultiFrame+0xf0>  // b.any
   14f64:	ldr	x1, [sp, #40]
   14f68:	mov	x0, #0x8                   	// #8
   14f6c:	cmp	x1, x0
   14f70:	b.cs	14f7c <ZSTD_decompressMultiFrame+0x98>  // b.hs, b.nlast
   14f74:	mov	x0, #0xffffffffffffffb8    	// #-72
   14f78:	b	150f8 <ZSTD_decompressMultiFrame+0x214>
   14f7c:	ldr	x0, [sp, #48]
   14f80:	add	x0, x0, #0x4
   14f84:	bl	f448 <MEM_readLE32>
   14f88:	mov	w1, w0
   14f8c:	mov	x0, #0x8                   	// #8
   14f90:	add	x0, x1, x0
   14f94:	str	x0, [sp, #88]
   14f98:	ldr	x0, [sp, #40]
   14f9c:	ldr	x1, [sp, #88]
   14fa0:	cmp	x1, x0
   14fa4:	b.ls	14fb0 <ZSTD_decompressMultiFrame+0xcc>  // b.plast
   14fa8:	mov	x0, #0xffffffffffffffb8    	// #-72
   14fac:	b	150f8 <ZSTD_decompressMultiFrame+0x214>
   14fb0:	ldr	x1, [sp, #48]
   14fb4:	ldr	x0, [sp, #88]
   14fb8:	add	x0, x1, x0
   14fbc:	str	x0, [sp, #48]
   14fc0:	ldr	x1, [sp, #40]
   14fc4:	ldr	x0, [sp, #88]
   14fc8:	sub	x0, x1, x0
   14fcc:	str	x0, [sp, #40]
   14fd0:	b	150c8 <ZSTD_decompressMultiFrame+0x1e4>
   14fd4:	ldr	x0, [sp, #16]
   14fd8:	cmp	x0, #0x0
   14fdc:	b.eq	15008 <ZSTD_decompressMultiFrame+0x124>  // b.none
   14fe0:	ldr	x1, [sp, #16]
   14fe4:	ldr	x0, [sp, #72]
   14fe8:	bl	16020 <ZSTD_decompressBegin_usingDDict>
   14fec:	str	x0, [sp, #104]
   14ff0:	ldr	x0, [sp, #104]
   14ff4:	bl	f558 <ERR_isError>
   14ff8:	cmp	w0, #0x0
   14ffc:	b.eq	15034 <ZSTD_decompressMultiFrame+0x150>  // b.none
   15000:	ldr	x0, [sp, #104]
   15004:	b	150f8 <ZSTD_decompressMultiFrame+0x214>
   15008:	ldr	x2, [sp, #24]
   1500c:	ldr	x1, [sp, #32]
   15010:	ldr	x0, [sp, #72]
   15014:	bl	15f68 <ZSTD_decompressBegin_usingDict>
   15018:	str	x0, [sp, #112]
   1501c:	ldr	x0, [sp, #112]
   15020:	bl	f558 <ERR_isError>
   15024:	cmp	w0, #0x0
   15028:	b.eq	15034 <ZSTD_decompressMultiFrame+0x150>  // b.none
   1502c:	ldr	x0, [sp, #112]
   15030:	b	150f8 <ZSTD_decompressMultiFrame+0x214>
   15034:	ldr	x1, [sp, #64]
   15038:	ldr	x0, [sp, #72]
   1503c:	bl	14830 <ZSTD_checkContinuity>
   15040:	add	x1, sp, #0x28
   15044:	add	x0, sp, #0x30
   15048:	mov	x4, x1
   1504c:	mov	x3, x0
   15050:	ldr	x2, [sp, #56]
   15054:	ldr	x1, [sp, #64]
   15058:	ldr	x0, [sp, #72]
   1505c:	bl	14b4c <ZSTD_decompressFrame>
   15060:	str	x0, [sp, #96]
   15064:	ldr	x0, [sp, #96]
   15068:	bl	f1a0 <ZSTD_getErrorCode>
   1506c:	cmp	w0, #0xa
   15070:	b.ne	15088 <ZSTD_decompressMultiFrame+0x1a4>  // b.any
   15074:	ldr	w0, [sp, #140]
   15078:	cmp	w0, #0x1
   1507c:	b.ne	15088 <ZSTD_decompressMultiFrame+0x1a4>  // b.any
   15080:	mov	x0, #0xffffffffffffffb8    	// #-72
   15084:	b	150f8 <ZSTD_decompressMultiFrame+0x214>
   15088:	ldr	x0, [sp, #96]
   1508c:	bl	f558 <ERR_isError>
   15090:	cmp	w0, #0x0
   15094:	b.eq	150a0 <ZSTD_decompressMultiFrame+0x1bc>  // b.none
   15098:	ldr	x0, [sp, #96]
   1509c:	b	150f8 <ZSTD_decompressMultiFrame+0x214>
   150a0:	ldr	x1, [sp, #64]
   150a4:	ldr	x0, [sp, #96]
   150a8:	add	x0, x1, x0
   150ac:	str	x0, [sp, #64]
   150b0:	ldr	x1, [sp, #56]
   150b4:	ldr	x0, [sp, #96]
   150b8:	sub	x0, x1, x0
   150bc:	str	x0, [sp, #56]
   150c0:	mov	w0, #0x1                   	// #1
   150c4:	str	w0, [sp, #140]
   150c8:	ldr	x1, [sp, #40]
   150cc:	mov	x0, #0x5                   	// #5
   150d0:	cmp	x1, x0
   150d4:	b.cs	14f40 <ZSTD_decompressMultiFrame+0x5c>  // b.hs, b.nlast
   150d8:	ldr	x0, [sp, #40]
   150dc:	cmp	x0, #0x0
   150e0:	b.eq	150ec <ZSTD_decompressMultiFrame+0x208>  // b.none
   150e4:	mov	x0, #0xffffffffffffffb8    	// #-72
   150e8:	b	150f8 <ZSTD_decompressMultiFrame+0x214>
   150ec:	ldr	x1, [sp, #64]
   150f0:	ldr	x0, [sp, #128]
   150f4:	sub	x0, x1, x0
   150f8:	ldp	x29, x30, [sp], #144
   150fc:	ret

0000000000015100 <ZSTD_decompress_usingDict>:
   15100:	stp	x29, x30, [sp, #-80]!
   15104:	mov	x29, sp
   15108:	str	x0, [sp, #72]
   1510c:	str	x1, [sp, #64]
   15110:	str	x2, [sp, #56]
   15114:	str	x3, [sp, #48]
   15118:	str	x4, [sp, #40]
   1511c:	str	x5, [sp, #32]
   15120:	str	x6, [sp, #24]
   15124:	mov	x7, #0x0                   	// #0
   15128:	ldr	x6, [sp, #24]
   1512c:	ldr	x5, [sp, #32]
   15130:	ldr	x4, [sp, #40]
   15134:	ldr	x3, [sp, #48]
   15138:	ldr	x2, [sp, #56]
   1513c:	ldr	x1, [sp, #64]
   15140:	ldr	x0, [sp, #72]
   15144:	bl	14ee4 <ZSTD_decompressMultiFrame>
   15148:	ldp	x29, x30, [sp], #80
   1514c:	ret

0000000000015150 <ZSTD_decompressDCtx>:
   15150:	stp	x29, x30, [sp, #-64]!
   15154:	mov	x29, sp
   15158:	str	x0, [sp, #56]
   1515c:	str	x1, [sp, #48]
   15160:	str	x2, [sp, #40]
   15164:	str	x3, [sp, #32]
   15168:	str	x4, [sp, #24]
   1516c:	mov	x6, #0x0                   	// #0
   15170:	mov	x5, #0x0                   	// #0
   15174:	ldr	x4, [sp, #24]
   15178:	ldr	x3, [sp, #32]
   1517c:	ldr	x2, [sp, #40]
   15180:	ldr	x1, [sp, #48]
   15184:	ldr	x0, [sp, #56]
   15188:	bl	15100 <ZSTD_decompress_usingDict>
   1518c:	ldp	x29, x30, [sp], #64
   15190:	ret

0000000000015194 <ZSTD_decompress>:
   15194:	stp	x29, x30, [sp, #-64]!
   15198:	mov	x29, sp
   1519c:	str	x0, [sp, #40]
   151a0:	str	x1, [sp, #32]
   151a4:	str	x2, [sp, #24]
   151a8:	str	x3, [sp, #16]
   151ac:	bl	ff40 <ZSTD_createDCtx>
   151b0:	str	x0, [sp, #56]
   151b4:	ldr	x0, [sp, #56]
   151b8:	cmp	x0, #0x0
   151bc:	b.ne	151c8 <ZSTD_decompress+0x34>  // b.any
   151c0:	mov	x0, #0xffffffffffffffc0    	// #-64
   151c4:	b	151f0 <ZSTD_decompress+0x5c>
   151c8:	ldr	x4, [sp, #16]
   151cc:	ldr	x3, [sp, #24]
   151d0:	ldr	x2, [sp, #32]
   151d4:	ldr	x1, [sp, #40]
   151d8:	ldr	x0, [sp, #56]
   151dc:	bl	15150 <ZSTD_decompressDCtx>
   151e0:	str	x0, [sp, #48]
   151e4:	ldr	x0, [sp, #56]
   151e8:	bl	ff88 <ZSTD_freeDCtx>
   151ec:	ldr	x0, [sp, #48]
   151f0:	ldp	x29, x30, [sp], #64
   151f4:	ret

00000000000151f8 <ZSTD_nextSrcSizeToDecompress>:
   151f8:	sub	sp, sp, #0x10
   151fc:	str	x0, [sp, #8]
   15200:	ldr	x0, [sp, #8]
   15204:	ldr	x0, [x0, #28776]
   15208:	add	sp, sp, #0x10
   1520c:	ret

0000000000015210 <ZSTD_nextInputType>:
   15210:	sub	sp, sp, #0x10
   15214:	str	x0, [sp, #8]
   15218:	ldr	x0, [sp, #8]
   1521c:	add	x0, x0, #0x4, lsl #12
   15220:	ldr	w0, [x0, #12452]
   15224:	cmp	w0, #0x7
   15228:	b.hi	15264 <ZSTD_nextInputType+0x54>  // b.pmore
   1522c:	cmp	w0, #0x6
   15230:	b.cs	1528c <ZSTD_nextInputType+0x7c>  // b.hs, b.nlast
   15234:	cmp	w0, #0x5
   15238:	b.eq	15284 <ZSTD_nextInputType+0x74>  // b.none
   1523c:	cmp	w0, #0x5
   15240:	b.hi	15264 <ZSTD_nextInputType+0x54>  // b.pmore
   15244:	cmp	w0, #0x4
   15248:	b.eq	1527c <ZSTD_nextInputType+0x6c>  // b.none
   1524c:	cmp	w0, #0x4
   15250:	b.hi	15264 <ZSTD_nextInputType+0x54>  // b.pmore
   15254:	cmp	w0, #0x2
   15258:	b.eq	1526c <ZSTD_nextInputType+0x5c>  // b.none
   1525c:	cmp	w0, #0x3
   15260:	b.eq	15274 <ZSTD_nextInputType+0x64>  // b.none
   15264:	mov	w0, #0x0                   	// #0
   15268:	b	15290 <ZSTD_nextInputType+0x80>
   1526c:	mov	w0, #0x1                   	// #1
   15270:	b	15290 <ZSTD_nextInputType+0x80>
   15274:	mov	w0, #0x2                   	// #2
   15278:	b	15290 <ZSTD_nextInputType+0x80>
   1527c:	mov	w0, #0x3                   	// #3
   15280:	b	15290 <ZSTD_nextInputType+0x80>
   15284:	mov	w0, #0x4                   	// #4
   15288:	b	15290 <ZSTD_nextInputType+0x80>
   1528c:	mov	w0, #0x5                   	// #5
   15290:	add	sp, sp, #0x10
   15294:	ret

0000000000015298 <ZSTD_isSkipFrame>:
   15298:	sub	sp, sp, #0x10
   1529c:	str	x0, [sp, #8]
   152a0:	ldr	x0, [sp, #8]
   152a4:	add	x0, x0, #0x4, lsl #12
   152a8:	ldr	w0, [x0, #12452]
   152ac:	cmp	w0, #0x7
   152b0:	cset	w0, eq  // eq = none
   152b4:	and	w0, w0, #0xff
   152b8:	add	sp, sp, #0x10
   152bc:	ret

00000000000152c0 <ZSTD_decompressContinue>:
   152c0:	stp	x29, x30, [sp, #-112]!
   152c4:	mov	x29, sp
   152c8:	str	x0, [sp, #56]
   152cc:	str	x1, [sp, #48]
   152d0:	str	x2, [sp, #40]
   152d4:	str	x3, [sp, #32]
   152d8:	str	x4, [sp, #24]
   152dc:	ldr	x0, [sp, #56]
   152e0:	ldr	x0, [x0, #28776]
   152e4:	ldr	x1, [sp, #24]
   152e8:	cmp	x1, x0
   152ec:	b.eq	152f8 <ZSTD_decompressContinue+0x38>  // b.none
   152f0:	mov	x0, #0xffffffffffffffb8    	// #-72
   152f4:	b	158d4 <ZSTD_decompressContinue+0x614>
   152f8:	ldr	x0, [sp, #40]
   152fc:	cmp	x0, #0x0
   15300:	b.eq	15310 <ZSTD_decompressContinue+0x50>  // b.none
   15304:	ldr	x1, [sp, #48]
   15308:	ldr	x0, [sp, #56]
   1530c:	bl	14830 <ZSTD_checkContinuity>
   15310:	ldr	x0, [sp, #56]
   15314:	add	x0, x0, #0x4, lsl #12
   15318:	ldr	w0, [x0, #12452]
   1531c:	cmp	w0, #0x7
   15320:	b.eq	158b4 <ZSTD_decompressContinue+0x5f4>  // b.none
   15324:	cmp	w0, #0x7
   15328:	b.hi	158d0 <ZSTD_decompressContinue+0x610>  // b.pmore
   1532c:	cmp	w0, #0x6
   15330:	b.eq	1584c <ZSTD_decompressContinue+0x58c>  // b.none
   15334:	cmp	w0, #0x6
   15338:	b.hi	158d0 <ZSTD_decompressContinue+0x610>  // b.pmore
   1533c:	cmp	w0, #0x5
   15340:	b.eq	157f8 <ZSTD_decompressContinue+0x538>  // b.none
   15344:	cmp	w0, #0x5
   15348:	b.hi	158d0 <ZSTD_decompressContinue+0x610>  // b.pmore
   1534c:	cmp	w0, #0x4
   15350:	b.hi	158d0 <ZSTD_decompressContinue+0x610>  // b.pmore
   15354:	cmp	w0, #0x3
   15358:	b.cs	15634 <ZSTD_decompressContinue+0x374>  // b.hs, b.nlast
   1535c:	cmp	w0, #0x2
   15360:	b.eq	15520 <ZSTD_decompressContinue+0x260>  // b.none
   15364:	cmp	w0, #0x2
   15368:	b.hi	158d0 <ZSTD_decompressContinue+0x610>  // b.pmore
   1536c:	cmp	w0, #0x0
   15370:	b.eq	15380 <ZSTD_decompressContinue+0xc0>  // b.none
   15374:	cmp	w0, #0x1
   15378:	b.eq	1548c <ZSTD_decompressContinue+0x1cc>  // b.none
   1537c:	b	158d0 <ZSTD_decompressContinue+0x610>
   15380:	ldr	x0, [sp, #56]
   15384:	add	x0, x0, #0x4, lsl #12
   15388:	ldr	w0, [x0, #12560]
   1538c:	cmp	w0, #0x0
   15390:	b.ne	153f8 <ZSTD_decompressContinue+0x138>  // b.any
   15394:	ldr	x0, [sp, #32]
   15398:	bl	f448 <MEM_readLE32>
   1539c:	and	w1, w0, #0xfffffff0
   153a0:	mov	w0, #0x2a50                	// #10832
   153a4:	movk	w0, #0x184d, lsl #16
   153a8:	cmp	w1, w0
   153ac:	b.ne	153f8 <ZSTD_decompressContinue+0x138>  // b.any
   153b0:	ldr	x1, [sp, #56]
   153b4:	mov	x0, #0x71e0                	// #29152
   153b8:	movk	x0, #0x2, lsl #16
   153bc:	add	x0, x1, x0
   153c0:	ldr	x2, [sp, #24]
   153c4:	ldr	x1, [sp, #32]
   153c8:	bl	f2e0 <grub_memcpy>
   153cc:	mov	x1, #0x8                   	// #8
   153d0:	ldr	x0, [sp, #24]
   153d4:	sub	x1, x1, x0
   153d8:	ldr	x0, [sp, #56]
   153dc:	str	x1, [x0, #28776]
   153e0:	ldr	x0, [sp, #56]
   153e4:	add	x0, x0, #0x4, lsl #12
   153e8:	mov	w1, #0x6                   	// #6
   153ec:	str	w1, [x0, #12452]
   153f0:	mov	x0, #0x0                   	// #0
   153f4:	b	158d4 <ZSTD_decompressContinue+0x614>
   153f8:	ldr	x0, [sp, #56]
   153fc:	add	x0, x0, #0x4, lsl #12
   15400:	ldr	w0, [x0, #12560]
   15404:	mov	w2, w0
   15408:	ldr	x1, [sp, #24]
   1540c:	ldr	x0, [sp, #32]
   15410:	bl	10110 <ZSTD_frameHeaderSize_internal>
   15414:	mov	x1, x0
   15418:	ldr	x0, [sp, #56]
   1541c:	str	x1, [x0, #28936]
   15420:	ldr	x0, [sp, #56]
   15424:	ldr	x0, [x0, #28936]
   15428:	bl	f558 <ERR_isError>
   1542c:	cmp	w0, #0x0
   15430:	b.eq	15440 <ZSTD_decompressContinue+0x180>  // b.none
   15434:	ldr	x0, [sp, #56]
   15438:	ldr	x0, [x0, #28936]
   1543c:	b	158d4 <ZSTD_decompressContinue+0x614>
   15440:	ldr	x1, [sp, #56]
   15444:	mov	x0, #0x71e0                	// #29152
   15448:	movk	x0, #0x2, lsl #16
   1544c:	add	x0, x1, x0
   15450:	ldr	x2, [sp, #24]
   15454:	ldr	x1, [sp, #32]
   15458:	bl	f2e0 <grub_memcpy>
   1545c:	ldr	x0, [sp, #56]
   15460:	ldr	x1, [x0, #28936]
   15464:	ldr	x0, [sp, #24]
   15468:	sub	x1, x1, x0
   1546c:	ldr	x0, [sp, #56]
   15470:	str	x1, [x0, #28776]
   15474:	ldr	x0, [sp, #56]
   15478:	add	x0, x0, #0x4, lsl #12
   1547c:	mov	w1, #0x1                   	// #1
   15480:	str	w1, [x0, #12452]
   15484:	mov	x0, #0x0                   	// #0
   15488:	b	158d4 <ZSTD_decompressContinue+0x614>
   1548c:	ldr	x1, [sp, #56]
   15490:	mov	x0, #0x71e0                	// #29152
   15494:	movk	x0, #0x2, lsl #16
   15498:	add	x1, x1, x0
   1549c:	ldr	x0, [sp, #56]
   154a0:	ldr	x2, [x0, #28936]
   154a4:	ldr	x0, [sp, #24]
   154a8:	sub	x0, x2, x0
   154ac:	add	x0, x1, x0
   154b0:	ldr	x2, [sp, #24]
   154b4:	ldr	x1, [sp, #32]
   154b8:	bl	f2e0 <grub_memcpy>
   154bc:	ldr	x1, [sp, #56]
   154c0:	mov	x0, #0x71e0                	// #29152
   154c4:	movk	x0, #0x2, lsl #16
   154c8:	add	x1, x1, x0
   154cc:	ldr	x0, [sp, #56]
   154d0:	ldr	x0, [x0, #28936]
   154d4:	mov	x2, x0
   154d8:	ldr	x0, [sp, #56]
   154dc:	bl	108a8 <ZSTD_decodeFrameHeader>
   154e0:	str	x0, [sp, #80]
   154e4:	ldr	x0, [sp, #80]
   154e8:	bl	f558 <ERR_isError>
   154ec:	cmp	w0, #0x0
   154f0:	b.eq	154fc <ZSTD_decompressContinue+0x23c>  // b.none
   154f4:	ldr	x0, [sp, #80]
   154f8:	b	158d4 <ZSTD_decompressContinue+0x614>
   154fc:	mov	x1, #0x3                   	// #3
   15500:	ldr	x0, [sp, #56]
   15504:	str	x1, [x0, #28776]
   15508:	ldr	x0, [sp, #56]
   1550c:	add	x0, x0, #0x4, lsl #12
   15510:	mov	w1, #0x2                   	// #2
   15514:	str	w1, [x0, #12452]
   15518:	mov	x0, #0x0                   	// #0
   1551c:	b	158d4 <ZSTD_decompressContinue+0x614>
   15520:	mov	x0, #0x3                   	// #3
   15524:	add	x1, sp, #0x40
   15528:	mov	x2, x1
   1552c:	mov	x1, x0
   15530:	ldr	x0, [sp, #32]
   15534:	bl	10988 <ZSTD_getcBlockSize>
   15538:	str	x0, [sp, #88]
   1553c:	ldr	x0, [sp, #88]
   15540:	bl	f558 <ERR_isError>
   15544:	cmp	w0, #0x0
   15548:	b.eq	15554 <ZSTD_decompressContinue+0x294>  // b.none
   1554c:	ldr	x0, [sp, #88]
   15550:	b	158d4 <ZSTD_decompressContinue+0x614>
   15554:	ldr	x0, [sp, #56]
   15558:	ldr	x1, [sp, #88]
   1555c:	str	x1, [x0, #28776]
   15560:	ldr	w1, [sp, #64]
   15564:	ldr	x0, [sp, #56]
   15568:	add	x0, x0, #0x4, lsl #12
   1556c:	str	w1, [x0, #12448]
   15570:	ldr	w0, [sp, #72]
   15574:	mov	w1, w0
   15578:	ldr	x0, [sp, #56]
   1557c:	str	x1, [x0, #28992]
   15580:	ldr	x0, [sp, #88]
   15584:	cmp	x0, #0x0
   15588:	b.eq	155b8 <ZSTD_decompressContinue+0x2f8>  // b.none
   1558c:	ldr	w0, [sp, #68]
   15590:	cmp	w0, #0x0
   15594:	b.eq	155a0 <ZSTD_decompressContinue+0x2e0>  // b.none
   15598:	mov	w0, #0x4                   	// #4
   1559c:	b	155a4 <ZSTD_decompressContinue+0x2e4>
   155a0:	mov	w0, #0x3                   	// #3
   155a4:	ldr	x1, [sp, #56]
   155a8:	add	x1, x1, #0x4, lsl #12
   155ac:	str	w0, [x1, #12452]
   155b0:	mov	x0, #0x0                   	// #0
   155b4:	b	158d4 <ZSTD_decompressContinue+0x614>
   155b8:	ldr	w0, [sp, #68]
   155bc:	cmp	w0, #0x0
   155c0:	b.eq	15610 <ZSTD_decompressContinue+0x350>  // b.none
   155c4:	ldr	x0, [sp, #56]
   155c8:	add	x0, x0, #0x4, lsl #12
   155cc:	ldr	w0, [x0, #12432]
   155d0:	cmp	w0, #0x0
   155d4:	b.eq	155f8 <ZSTD_decompressContinue+0x338>  // b.none
   155d8:	ldr	x0, [sp, #56]
   155dc:	mov	x1, #0x4                   	// #4
   155e0:	str	x1, [x0, #28776]
   155e4:	ldr	x0, [sp, #56]
   155e8:	add	x0, x0, #0x4, lsl #12
   155ec:	mov	w1, #0x5                   	// #5
   155f0:	str	w1, [x0, #12452]
   155f4:	b	1562c <ZSTD_decompressContinue+0x36c>
   155f8:	ldr	x0, [sp, #56]
   155fc:	str	xzr, [x0, #28776]
   15600:	ldr	x0, [sp, #56]
   15604:	add	x0, x0, #0x4, lsl #12
   15608:	str	wzr, [x0, #12452]
   1560c:	b	1562c <ZSTD_decompressContinue+0x36c>
   15610:	mov	x1, #0x3                   	// #3
   15614:	ldr	x0, [sp, #56]
   15618:	str	x1, [x0, #28776]
   1561c:	ldr	x0, [sp, #56]
   15620:	add	x0, x0, #0x4, lsl #12
   15624:	mov	w1, #0x2                   	// #2
   15628:	str	w1, [x0, #12452]
   1562c:	mov	x0, #0x0                   	// #0
   15630:	b	158d4 <ZSTD_decompressContinue+0x614>
   15634:	ldr	x0, [sp, #56]
   15638:	add	x0, x0, #0x4, lsl #12
   1563c:	ldr	w0, [x0, #12448]
   15640:	cmp	w0, #0x2
   15644:	b.eq	15664 <ZSTD_decompressContinue+0x3a4>  // b.none
   15648:	cmp	w0, #0x2
   1564c:	b.hi	156cc <ZSTD_decompressContinue+0x40c>  // b.pmore
   15650:	cmp	w0, #0x0
   15654:	b.eq	15688 <ZSTD_decompressContinue+0x3c8>  // b.none
   15658:	cmp	w0, #0x1
   1565c:	b.eq	156a4 <ZSTD_decompressContinue+0x3e4>  // b.none
   15660:	b	156cc <ZSTD_decompressContinue+0x40c>
   15664:	mov	w5, #0x1                   	// #1
   15668:	ldr	x4, [sp, #24]
   1566c:	ldr	x3, [sp, #32]
   15670:	ldr	x2, [sp, #40]
   15674:	ldr	x1, [sp, #48]
   15678:	ldr	x0, [sp, #56]
   1567c:	bl	1463c <ZSTD_decompressBlock_internal>
   15680:	str	x0, [sp, #104]
   15684:	b	156d4 <ZSTD_decompressContinue+0x414>
   15688:	ldr	x3, [sp, #24]
   1568c:	ldr	x2, [sp, #32]
   15690:	ldr	x1, [sp, #40]
   15694:	ldr	x0, [sp, #48]
   15698:	bl	10a38 <ZSTD_copyRawBlock>
   1569c:	str	x0, [sp, #104]
   156a0:	b	156d4 <ZSTD_decompressContinue+0x414>
   156a4:	ldr	x0, [sp, #56]
   156a8:	ldr	x0, [x0, #28992]
   156ac:	mov	x4, x0
   156b0:	ldr	x3, [sp, #24]
   156b4:	ldr	x2, [sp, #32]
   156b8:	ldr	x1, [sp, #40]
   156bc:	ldr	x0, [sp, #48]
   156c0:	bl	10a98 <ZSTD_setRleBlock>
   156c4:	str	x0, [sp, #104]
   156c8:	b	156d4 <ZSTD_decompressContinue+0x414>
   156cc:	mov	x0, #0xffffffffffffffec    	// #-20
   156d0:	b	158d4 <ZSTD_decompressContinue+0x614>
   156d4:	ldr	x0, [sp, #104]
   156d8:	bl	f558 <ERR_isError>
   156dc:	cmp	w0, #0x0
   156e0:	b.eq	156ec <ZSTD_decompressContinue+0x42c>  // b.none
   156e4:	ldr	x0, [sp, #104]
   156e8:	b	158d4 <ZSTD_decompressContinue+0x614>
   156ec:	ldr	x0, [sp, #56]
   156f0:	ldr	x1, [x0, #28824]
   156f4:	ldr	x0, [sp, #104]
   156f8:	add	x1, x1, x0
   156fc:	ldr	x0, [sp, #56]
   15700:	str	x1, [x0, #28824]
   15704:	ldr	x0, [sp, #56]
   15708:	add	x0, x0, #0x4, lsl #12
   1570c:	ldr	w0, [x0, #12432]
   15710:	cmp	w0, #0x0
   15714:	b.eq	15730 <ZSTD_decompressContinue+0x470>  // b.none
   15718:	ldr	x1, [sp, #56]
   1571c:	mov	x0, #0x70b0                	// #28848
   15720:	add	x0, x1, x0
   15724:	ldr	x2, [sp, #104]
   15728:	ldr	x1, [sp, #48]
   1572c:	bl	d7e0 <XXH64_update>
   15730:	ldr	x0, [sp, #56]
   15734:	add	x0, x0, #0x4, lsl #12
   15738:	ldr	w0, [x0, #12452]
   1573c:	cmp	w0, #0x4
   15740:	b.ne	157c0 <ZSTD_decompressContinue+0x500>  // b.any
   15744:	ldr	x0, [sp, #56]
   15748:	ldr	x0, [x0, #28784]
   1574c:	cmn	x0, #0x1
   15750:	b.eq	15774 <ZSTD_decompressContinue+0x4b4>  // b.none
   15754:	ldr	x0, [sp, #56]
   15758:	ldr	x1, [x0, #28824]
   1575c:	ldr	x0, [sp, #56]
   15760:	ldr	x0, [x0, #28784]
   15764:	cmp	x1, x0
   15768:	b.eq	15774 <ZSTD_decompressContinue+0x4b4>  // b.none
   1576c:	mov	x0, #0xffffffffffffffec    	// #-20
   15770:	b	158d4 <ZSTD_decompressContinue+0x614>
   15774:	ldr	x0, [sp, #56]
   15778:	add	x0, x0, #0x4, lsl #12
   1577c:	ldr	w0, [x0, #12432]
   15780:	cmp	w0, #0x0
   15784:	b.eq	157a8 <ZSTD_decompressContinue+0x4e8>  // b.none
   15788:	ldr	x0, [sp, #56]
   1578c:	mov	x1, #0x4                   	// #4
   15790:	str	x1, [x0, #28776]
   15794:	ldr	x0, [sp, #56]
   15798:	add	x0, x0, #0x4, lsl #12
   1579c:	mov	w1, #0x5                   	// #5
   157a0:	str	w1, [x0, #12452]
   157a4:	b	157f0 <ZSTD_decompressContinue+0x530>
   157a8:	ldr	x0, [sp, #56]
   157ac:	str	xzr, [x0, #28776]
   157b0:	ldr	x0, [sp, #56]
   157b4:	add	x0, x0, #0x4, lsl #12
   157b8:	str	wzr, [x0, #12452]
   157bc:	b	157f0 <ZSTD_decompressContinue+0x530>
   157c0:	ldr	x0, [sp, #56]
   157c4:	add	x0, x0, #0x4, lsl #12
   157c8:	mov	w1, #0x2                   	// #2
   157cc:	str	w1, [x0, #12452]
   157d0:	mov	x1, #0x3                   	// #3
   157d4:	ldr	x0, [sp, #56]
   157d8:	str	x1, [x0, #28776]
   157dc:	ldr	x1, [sp, #48]
   157e0:	ldr	x0, [sp, #104]
   157e4:	add	x1, x1, x0
   157e8:	ldr	x0, [sp, #56]
   157ec:	str	x1, [x0, #28744]
   157f0:	ldr	x0, [sp, #104]
   157f4:	b	158d4 <ZSTD_decompressContinue+0x614>
   157f8:	ldr	x1, [sp, #56]
   157fc:	mov	x0, #0x70b0                	// #28848
   15800:	add	x0, x1, x0
   15804:	bl	e6d8 <XXH64_digest>
   15808:	str	w0, [sp, #100]
   1580c:	ldr	x0, [sp, #32]
   15810:	bl	f448 <MEM_readLE32>
   15814:	str	w0, [sp, #96]
   15818:	ldr	w1, [sp, #96]
   1581c:	ldr	w0, [sp, #100]
   15820:	cmp	w1, w0
   15824:	b.eq	15830 <ZSTD_decompressContinue+0x570>  // b.none
   15828:	mov	x0, #0xffffffffffffffea    	// #-22
   1582c:	b	158d4 <ZSTD_decompressContinue+0x614>
   15830:	ldr	x0, [sp, #56]
   15834:	str	xzr, [x0, #28776]
   15838:	ldr	x0, [sp, #56]
   1583c:	add	x0, x0, #0x4, lsl #12
   15840:	str	wzr, [x0, #12452]
   15844:	mov	x0, #0x0                   	// #0
   15848:	b	158d4 <ZSTD_decompressContinue+0x614>
   1584c:	ldr	x1, [sp, #56]
   15850:	mov	x0, #0x71e0                	// #29152
   15854:	movk	x0, #0x2, lsl #16
   15858:	add	x1, x1, x0
   1585c:	mov	x2, #0x8                   	// #8
   15860:	ldr	x0, [sp, #24]
   15864:	sub	x0, x2, x0
   15868:	add	x0, x1, x0
   1586c:	ldr	x2, [sp, #24]
   15870:	ldr	x1, [sp, #32]
   15874:	bl	f2e0 <grub_memcpy>
   15878:	ldr	x1, [sp, #56]
   1587c:	mov	x0, #0x71e0                	// #29152
   15880:	movk	x0, #0x2, lsl #16
   15884:	add	x0, x1, x0
   15888:	add	x0, x0, #0x4
   1588c:	bl	f448 <MEM_readLE32>
   15890:	mov	w1, w0
   15894:	ldr	x0, [sp, #56]
   15898:	str	x1, [x0, #28776]
   1589c:	ldr	x0, [sp, #56]
   158a0:	add	x0, x0, #0x4, lsl #12
   158a4:	mov	w1, #0x7                   	// #7
   158a8:	str	w1, [x0, #12452]
   158ac:	mov	x0, #0x0                   	// #0
   158b0:	b	158d4 <ZSTD_decompressContinue+0x614>
   158b4:	ldr	x0, [sp, #56]
   158b8:	str	xzr, [x0, #28776]
   158bc:	ldr	x0, [sp, #56]
   158c0:	add	x0, x0, #0x4, lsl #12
   158c4:	str	wzr, [x0, #12452]
   158c8:	mov	x0, #0x0                   	// #0
   158cc:	b	158d4 <ZSTD_decompressContinue+0x614>
   158d0:	mov	x0, #0xffffffffffffffff    	// #-1
   158d4:	ldp	x29, x30, [sp], #112
   158d8:	ret

00000000000158dc <ZSTD_refDictContent>:
   158dc:	sub	sp, sp, #0x20
   158e0:	str	x0, [sp, #24]
   158e4:	str	x1, [sp, #16]
   158e8:	str	x2, [sp, #8]
   158ec:	ldr	x0, [sp, #24]
   158f0:	ldr	x1, [x0, #28744]
   158f4:	ldr	x0, [sp, #24]
   158f8:	str	x1, [x0, #28768]
   158fc:	ldr	x0, [sp, #24]
   15900:	ldr	x1, [x0, #28744]
   15904:	ldr	x0, [sp, #24]
   15908:	ldr	x0, [x0, #28752]
   1590c:	sub	x0, x1, x0
   15910:	neg	x0, x0
   15914:	ldr	x1, [sp, #16]
   15918:	add	x1, x1, x0
   1591c:	ldr	x0, [sp, #24]
   15920:	str	x1, [x0, #28760]
   15924:	ldr	x0, [sp, #24]
   15928:	ldr	x1, [sp, #16]
   1592c:	str	x1, [x0, #28752]
   15930:	ldr	x1, [sp, #16]
   15934:	ldr	x0, [sp, #8]
   15938:	add	x1, x1, x0
   1593c:	ldr	x0, [sp, #24]
   15940:	str	x1, [x0, #28744]
   15944:	mov	x0, #0x0                   	// #0
   15948:	add	sp, sp, #0x20
   1594c:	ret

0000000000015950 <ZSTD_loadEntropy>:
   15950:	stp	x29, x30, [sp, #-272]!
   15954:	mov	x29, sp
   15958:	str	x0, [sp, #40]
   1595c:	str	x1, [sp, #32]
   15960:	str	x2, [sp, #24]
   15964:	ldr	x0, [sp, #32]
   15968:	str	x0, [sp, #264]
   1596c:	ldr	x1, [sp, #264]
   15970:	ldr	x0, [sp, #24]
   15974:	add	x0, x1, x0
   15978:	str	x0, [sp, #248]
   1597c:	ldr	x0, [sp, #24]
   15980:	cmp	x0, #0x8
   15984:	b.hi	15990 <ZSTD_loadEntropy+0x40>  // b.pmore
   15988:	mov	x0, #0xffffffffffffffe2    	// #-30
   1598c:	b	15cf8 <ZSTD_loadEntropy+0x3a8>
   15990:	ldr	x0, [sp, #264]
   15994:	add	x0, x0, #0x8
   15998:	str	x0, [sp, #264]
   1599c:	ldr	x0, [sp, #40]
   159a0:	str	x0, [sp, #240]
   159a4:	mov	x0, #0x2818                	// #10264
   159a8:	str	x0, [sp, #232]
   159ac:	ldr	x1, [sp, #40]
   159b0:	mov	x0, #0x2818                	// #10264
   159b4:	add	x5, x1, x0
   159b8:	ldr	x1, [sp, #248]
   159bc:	ldr	x0, [sp, #264]
   159c0:	sub	x0, x1, x0
   159c4:	ldr	x4, [sp, #232]
   159c8:	ldr	x3, [sp, #240]
   159cc:	mov	x2, x0
   159d0:	ldr	x1, [sp, #264]
   159d4:	mov	x0, x5
   159d8:	bl	5530 <HUF_readDTableX2_wksp>
   159dc:	str	x0, [sp, #224]
   159e0:	ldr	x0, [sp, #224]
   159e4:	bl	f558 <ERR_isError>
   159e8:	cmp	w0, #0x0
   159ec:	b.eq	159f8 <ZSTD_loadEntropy+0xa8>  // b.none
   159f0:	mov	x0, #0xffffffffffffffe2    	// #-30
   159f4:	b	15cf8 <ZSTD_loadEntropy+0x3a8>
   159f8:	ldr	x1, [sp, #264]
   159fc:	ldr	x0, [sp, #224]
   15a00:	add	x0, x1, x0
   15a04:	str	x0, [sp, #264]
   15a08:	mov	w0, #0x1f                  	// #31
   15a0c:	str	w0, [sp, #184]
   15a10:	ldr	x1, [sp, #248]
   15a14:	ldr	x0, [sp, #264]
   15a18:	sub	x0, x1, x0
   15a1c:	mov	x3, x0
   15a20:	add	x2, sp, #0xb4
   15a24:	add	x1, sp, #0xb8
   15a28:	add	x0, sp, #0x38
   15a2c:	mov	x4, x3
   15a30:	ldr	x3, [sp, #264]
   15a34:	bl	1b8 <FSE_readNCount>
   15a38:	str	x0, [sp, #216]
   15a3c:	ldr	x0, [sp, #216]
   15a40:	bl	f558 <ERR_isError>
   15a44:	cmp	w0, #0x0
   15a48:	b.eq	15a54 <ZSTD_loadEntropy+0x104>  // b.none
   15a4c:	mov	x0, #0xffffffffffffffe2    	// #-30
   15a50:	b	15cf8 <ZSTD_loadEntropy+0x3a8>
   15a54:	ldr	w0, [sp, #184]
   15a58:	cmp	w0, #0x1f
   15a5c:	b.ls	15a68 <ZSTD_loadEntropy+0x118>  // b.plast
   15a60:	mov	x0, #0xffffffffffffffe2    	// #-30
   15a64:	b	15cf8 <ZSTD_loadEntropy+0x3a8>
   15a68:	ldr	w0, [sp, #180]
   15a6c:	cmp	w0, #0x8
   15a70:	b.ls	15a7c <ZSTD_loadEntropy+0x12c>  // b.plast
   15a74:	mov	x0, #0xffffffffffffffe2    	// #-30
   15a78:	b	15cf8 <ZSTD_loadEntropy+0x3a8>
   15a7c:	ldr	x1, [sp, #40]
   15a80:	mov	x0, #0x1008                	// #4104
   15a84:	add	x6, x1, x0
   15a88:	ldr	w2, [sp, #184]
   15a8c:	ldr	w0, [sp, #180]
   15a90:	add	x1, sp, #0x38
   15a94:	mov	w5, w0
   15a98:	adrp	x0, 0 <grub_memcpy>
   15a9c:	add	x0, x0, #0x0
   15aa0:	ldr	x4, [x0]
   15aa4:	adrp	x0, 0 <grub_memcpy>
   15aa8:	add	x0, x0, #0x0
   15aac:	ldr	x3, [x0]
   15ab0:	mov	x0, x6
   15ab4:	bl	11298 <ZSTD_buildFSETable>
   15ab8:	ldr	x1, [sp, #264]
   15abc:	ldr	x0, [sp, #216]
   15ac0:	add	x0, x1, x0
   15ac4:	str	x0, [sp, #264]
   15ac8:	mov	w0, #0x34                  	// #52
   15acc:	str	w0, [sp, #176]
   15ad0:	ldr	x1, [sp, #248]
   15ad4:	ldr	x0, [sp, #264]
   15ad8:	sub	x0, x1, x0
   15adc:	mov	x3, x0
   15ae0:	add	x2, sp, #0xac
   15ae4:	add	x1, sp, #0xb0
   15ae8:	add	x0, sp, #0x38
   15aec:	mov	x4, x3
   15af0:	ldr	x3, [sp, #264]
   15af4:	bl	1b8 <FSE_readNCount>
   15af8:	str	x0, [sp, #208]
   15afc:	ldr	x0, [sp, #208]
   15b00:	bl	f558 <ERR_isError>
   15b04:	cmp	w0, #0x0
   15b08:	b.eq	15b14 <ZSTD_loadEntropy+0x1c4>  // b.none
   15b0c:	mov	x0, #0xffffffffffffffe2    	// #-30
   15b10:	b	15cf8 <ZSTD_loadEntropy+0x3a8>
   15b14:	ldr	w0, [sp, #176]
   15b18:	cmp	w0, #0x34
   15b1c:	b.ls	15b28 <ZSTD_loadEntropy+0x1d8>  // b.plast
   15b20:	mov	x0, #0xffffffffffffffe2    	// #-30
   15b24:	b	15cf8 <ZSTD_loadEntropy+0x3a8>
   15b28:	ldr	w0, [sp, #172]
   15b2c:	cmp	w0, #0x9
   15b30:	b.ls	15b3c <ZSTD_loadEntropy+0x1ec>  // b.plast
   15b34:	mov	x0, #0xffffffffffffffe2    	// #-30
   15b38:	b	15cf8 <ZSTD_loadEntropy+0x3a8>
   15b3c:	ldr	x1, [sp, #40]
   15b40:	mov	x0, #0x1810                	// #6160
   15b44:	add	x6, x1, x0
   15b48:	ldr	w2, [sp, #176]
   15b4c:	ldr	w0, [sp, #172]
   15b50:	add	x1, sp, #0x38
   15b54:	mov	w5, w0
   15b58:	adrp	x0, 0 <grub_memcpy>
   15b5c:	add	x0, x0, #0x0
   15b60:	ldr	x4, [x0]
   15b64:	adrp	x0, 0 <grub_memcpy>
   15b68:	add	x0, x0, #0x0
   15b6c:	ldr	x3, [x0]
   15b70:	mov	x0, x6
   15b74:	bl	11298 <ZSTD_buildFSETable>
   15b78:	ldr	x1, [sp, #264]
   15b7c:	ldr	x0, [sp, #208]
   15b80:	add	x0, x1, x0
   15b84:	str	x0, [sp, #264]
   15b88:	mov	w0, #0x23                  	// #35
   15b8c:	str	w0, [sp, #168]
   15b90:	ldr	x1, [sp, #248]
   15b94:	ldr	x0, [sp, #264]
   15b98:	sub	x0, x1, x0
   15b9c:	mov	x3, x0
   15ba0:	add	x2, sp, #0xa4
   15ba4:	add	x1, sp, #0xa8
   15ba8:	add	x0, sp, #0x38
   15bac:	mov	x4, x3
   15bb0:	ldr	x3, [sp, #264]
   15bb4:	bl	1b8 <FSE_readNCount>
   15bb8:	str	x0, [sp, #200]
   15bbc:	ldr	x0, [sp, #200]
   15bc0:	bl	f558 <ERR_isError>
   15bc4:	cmp	w0, #0x0
   15bc8:	b.eq	15bd4 <ZSTD_loadEntropy+0x284>  // b.none
   15bcc:	mov	x0, #0xffffffffffffffe2    	// #-30
   15bd0:	b	15cf8 <ZSTD_loadEntropy+0x3a8>
   15bd4:	ldr	w0, [sp, #168]
   15bd8:	cmp	w0, #0x23
   15bdc:	b.ls	15be8 <ZSTD_loadEntropy+0x298>  // b.plast
   15be0:	mov	x0, #0xffffffffffffffe2    	// #-30
   15be4:	b	15cf8 <ZSTD_loadEntropy+0x3a8>
   15be8:	ldr	w0, [sp, #164]
   15bec:	cmp	w0, #0x9
   15bf0:	b.ls	15bfc <ZSTD_loadEntropy+0x2ac>  // b.plast
   15bf4:	mov	x0, #0xffffffffffffffe2    	// #-30
   15bf8:	b	15cf8 <ZSTD_loadEntropy+0x3a8>
   15bfc:	ldr	x6, [sp, #40]
   15c00:	ldr	w2, [sp, #168]
   15c04:	ldr	w0, [sp, #164]
   15c08:	add	x1, sp, #0x38
   15c0c:	mov	w5, w0
   15c10:	adrp	x0, 0 <grub_memcpy>
   15c14:	add	x0, x0, #0x0
   15c18:	ldr	x4, [x0]
   15c1c:	adrp	x0, 0 <grub_memcpy>
   15c20:	add	x0, x0, #0x0
   15c24:	ldr	x3, [x0]
   15c28:	mov	x0, x6
   15c2c:	bl	11298 <ZSTD_buildFSETable>
   15c30:	ldr	x1, [sp, #264]
   15c34:	ldr	x0, [sp, #200]
   15c38:	add	x0, x1, x0
   15c3c:	str	x0, [sp, #264]
   15c40:	ldr	x0, [sp, #264]
   15c44:	add	x0, x0, #0xc
   15c48:	ldr	x1, [sp, #248]
   15c4c:	cmp	x1, x0
   15c50:	b.cs	15c5c <ZSTD_loadEntropy+0x30c>  // b.hs, b.nlast
   15c54:	mov	x0, #0xffffffffffffffe2    	// #-30
   15c58:	b	15cf8 <ZSTD_loadEntropy+0x3a8>
   15c5c:	ldr	x0, [sp, #264]
   15c60:	add	x0, x0, #0xc
   15c64:	ldr	x1, [sp, #248]
   15c68:	sub	x0, x1, x0
   15c6c:	str	x0, [sp, #192]
   15c70:	str	wzr, [sp, #260]
   15c74:	b	15ce0 <ZSTD_loadEntropy+0x390>
   15c78:	ldr	x0, [sp, #264]
   15c7c:	bl	f448 <MEM_readLE32>
   15c80:	str	w0, [sp, #188]
   15c84:	ldr	x0, [sp, #264]
   15c88:	add	x0, x0, #0x4
   15c8c:	str	x0, [sp, #264]
   15c90:	ldr	w0, [sp, #188]
   15c94:	cmp	w0, #0x0
   15c98:	b.eq	15cac <ZSTD_loadEntropy+0x35c>  // b.none
   15c9c:	ldr	w0, [sp, #188]
   15ca0:	ldr	x1, [sp, #192]
   15ca4:	cmp	x1, x0
   15ca8:	b.hi	15cb4 <ZSTD_loadEntropy+0x364>  // b.pmore
   15cac:	mov	x0, #0xffffffffffffffe2    	// #-30
   15cb0:	b	15cf8 <ZSTD_loadEntropy+0x3a8>
   15cb4:	ldr	x1, [sp, #40]
   15cb8:	ldrsw	x2, [sp, #260]
   15cbc:	mov	x0, #0x1a04                	// #6660
   15cc0:	add	x0, x2, x0
   15cc4:	lsl	x0, x0, #2
   15cc8:	add	x0, x1, x0
   15ccc:	ldr	w1, [sp, #188]
   15cd0:	str	w1, [x0, #12]
   15cd4:	ldr	w0, [sp, #260]
   15cd8:	add	w0, w0, #0x1
   15cdc:	str	w0, [sp, #260]
   15ce0:	ldr	w0, [sp, #260]
   15ce4:	cmp	w0, #0x2
   15ce8:	b.le	15c78 <ZSTD_loadEntropy+0x328>
   15cec:	ldr	x1, [sp, #264]
   15cf0:	ldr	x0, [sp, #32]
   15cf4:	sub	x0, x1, x0
   15cf8:	ldp	x29, x30, [sp], #272
   15cfc:	ret
	...

0000000000015d30 <ZSTD_decompress_insertDictionary>:
   15d30:	stp	x29, x30, [sp, #-64]!
   15d34:	mov	x29, sp
   15d38:	str	x0, [sp, #40]
   15d3c:	str	x1, [sp, #32]
   15d40:	str	x2, [sp, #24]
   15d44:	ldr	x0, [sp, #24]
   15d48:	cmp	x0, #0x7
   15d4c:	b.hi	15d64 <ZSTD_decompress_insertDictionary+0x34>  // b.pmore
   15d50:	ldr	x2, [sp, #24]
   15d54:	ldr	x1, [sp, #32]
   15d58:	ldr	x0, [sp, #40]
   15d5c:	bl	158dc <ZSTD_refDictContent>
   15d60:	b	15e3c <ZSTD_decompress_insertDictionary+0x10c>
   15d64:	ldr	x0, [sp, #32]
   15d68:	bl	f448 <MEM_readLE32>
   15d6c:	str	w0, [sp, #60]
   15d70:	ldr	w1, [sp, #60]
   15d74:	mov	w0, #0xa437                	// #42039
   15d78:	movk	w0, #0xec30, lsl #16
   15d7c:	cmp	w1, w0
   15d80:	b.eq	15d98 <ZSTD_decompress_insertDictionary+0x68>  // b.none
   15d84:	ldr	x2, [sp, #24]
   15d88:	ldr	x1, [sp, #32]
   15d8c:	ldr	x0, [sp, #40]
   15d90:	bl	158dc <ZSTD_refDictContent>
   15d94:	b	15e3c <ZSTD_decompress_insertDictionary+0x10c>
   15d98:	ldr	x0, [sp, #32]
   15d9c:	add	x0, x0, #0x4
   15da0:	bl	f448 <MEM_readLE32>
   15da4:	mov	w1, w0
   15da8:	ldr	x0, [sp, #40]
   15dac:	add	x0, x0, #0x4, lsl #12
   15db0:	str	w1, [x0, #12648]
   15db4:	ldr	x0, [sp, #40]
   15db8:	add	x0, x0, #0x20
   15dbc:	ldr	x2, [sp, #24]
   15dc0:	ldr	x1, [sp, #32]
   15dc4:	bl	15950 <ZSTD_loadEntropy>
   15dc8:	str	x0, [sp, #48]
   15dcc:	ldr	x0, [sp, #48]
   15dd0:	bl	f558 <ERR_isError>
   15dd4:	cmp	w0, #0x0
   15dd8:	b.eq	15de4 <ZSTD_decompress_insertDictionary+0xb4>  // b.none
   15ddc:	mov	x0, #0xffffffffffffffe2    	// #-30
   15de0:	b	15e3c <ZSTD_decompress_insertDictionary+0x10c>
   15de4:	ldr	x1, [sp, #32]
   15de8:	ldr	x0, [sp, #48]
   15dec:	add	x0, x1, x0
   15df0:	str	x0, [sp, #32]
   15df4:	ldr	x1, [sp, #24]
   15df8:	ldr	x0, [sp, #48]
   15dfc:	sub	x0, x1, x0
   15e00:	str	x0, [sp, #24]
   15e04:	ldr	x0, [sp, #40]
   15e08:	add	x0, x0, #0x4, lsl #12
   15e0c:	mov	w1, #0x1                   	// #1
   15e10:	str	w1, [x0, #12460]
   15e14:	ldr	x0, [sp, #40]
   15e18:	add	x0, x0, #0x4, lsl #12
   15e1c:	ldr	w1, [x0, #12460]
   15e20:	ldr	x0, [sp, #40]
   15e24:	add	x0, x0, #0x4, lsl #12
   15e28:	str	w1, [x0, #12456]
   15e2c:	ldr	x2, [sp, #24]
   15e30:	ldr	x1, [sp, #32]
   15e34:	ldr	x0, [sp, #40]
   15e38:	bl	158dc <ZSTD_refDictContent>
   15e3c:	ldp	x29, x30, [sp], #64
   15e40:	ret

0000000000015e44 <ZSTD_decompressBegin>:
   15e44:	stp	x29, x30, [sp, #-32]!
   15e48:	mov	x29, sp
   15e4c:	str	x0, [sp, #24]
   15e50:	ldr	x0, [sp, #24]
   15e54:	add	x0, x0, #0x4, lsl #12
   15e58:	ldr	w0, [x0, #12560]
   15e5c:	bl	fd04 <ZSTD_startingInputLength>
   15e60:	mov	x1, x0
   15e64:	ldr	x0, [sp, #24]
   15e68:	str	x1, [x0, #28776]
   15e6c:	ldr	x0, [sp, #24]
   15e70:	add	x0, x0, #0x4, lsl #12
   15e74:	str	wzr, [x0, #12452]
   15e78:	ldr	x0, [sp, #24]
   15e7c:	str	xzr, [x0, #28824]
   15e80:	ldr	x0, [sp, #24]
   15e84:	str	xzr, [x0, #28744]
   15e88:	ldr	x0, [sp, #24]
   15e8c:	str	xzr, [x0, #28752]
   15e90:	ldr	x0, [sp, #24]
   15e94:	str	xzr, [x0, #28760]
   15e98:	ldr	x0, [sp, #24]
   15e9c:	str	xzr, [x0, #28768]
   15ea0:	ldr	x0, [sp, #24]
   15ea4:	mov	w1, #0xc                   	// #12
   15ea8:	movk	w1, #0xc00, lsl #16
   15eac:	str	w1, [x0, #10296]
   15eb0:	ldr	x0, [sp, #24]
   15eb4:	add	x0, x0, #0x4, lsl #12
   15eb8:	str	wzr, [x0, #12460]
   15ebc:	ldr	x0, [sp, #24]
   15ec0:	add	x0, x0, #0x4, lsl #12
   15ec4:	ldr	w1, [x0, #12460]
   15ec8:	ldr	x0, [sp, #24]
   15ecc:	add	x0, x0, #0x4, lsl #12
   15ed0:	str	w1, [x0, #12456]
   15ed4:	ldr	x0, [sp, #24]
   15ed8:	add	x0, x0, #0x4, lsl #12
   15edc:	str	wzr, [x0, #12648]
   15ee0:	ldr	x1, [sp, #24]
   15ee4:	mov	x0, #0x683c                	// #26684
   15ee8:	add	x3, x1, x0
   15eec:	mov	x2, #0xc                   	// #12
   15ef0:	adrp	x0, 0 <grub_memcpy>
   15ef4:	add	x0, x0, #0x0
   15ef8:	ldr	x1, [x0]
   15efc:	mov	x0, x3
   15f00:	bl	f2e0 <grub_memcpy>
   15f04:	ldr	x0, [sp, #24]
   15f08:	add	x1, x0, #0x20
   15f0c:	ldr	x0, [sp, #24]
   15f10:	str	x1, [x0]
   15f14:	ldr	x1, [sp, #24]
   15f18:	mov	x0, #0x1830                	// #6192
   15f1c:	add	x1, x1, x0
   15f20:	ldr	x0, [sp, #24]
   15f24:	str	x1, [x0, #8]
   15f28:	ldr	x1, [sp, #24]
   15f2c:	mov	x0, #0x1028                	// #4136
   15f30:	add	x1, x1, x0
   15f34:	ldr	x0, [sp, #24]
   15f38:	str	x1, [x0, #16]
   15f3c:	ldr	x1, [sp, #24]
   15f40:	mov	x0, #0x2838                	// #10296
   15f44:	add	x1, x1, x0
   15f48:	ldr	x0, [sp, #24]
   15f4c:	str	x1, [x0, #24]
   15f50:	mov	x0, #0x0                   	// #0
   15f54:	ldp	x29, x30, [sp], #32
   15f58:	ret
   15f5c:	nop
	...

0000000000015f68 <ZSTD_decompressBegin_usingDict>:
   15f68:	stp	x29, x30, [sp, #-64]!
   15f6c:	mov	x29, sp
   15f70:	str	x0, [sp, #40]
   15f74:	str	x1, [sp, #32]
   15f78:	str	x2, [sp, #24]
   15f7c:	ldr	x0, [sp, #40]
   15f80:	bl	15e44 <ZSTD_decompressBegin>
   15f84:	str	x0, [sp, #56]
   15f88:	ldr	x0, [sp, #56]
   15f8c:	bl	f558 <ERR_isError>
   15f90:	cmp	w0, #0x0
   15f94:	b.eq	15fa0 <ZSTD_decompressBegin_usingDict+0x38>  // b.none
   15f98:	ldr	x0, [sp, #56]
   15f9c:	b	15fe8 <ZSTD_decompressBegin_usingDict+0x80>
   15fa0:	ldr	x0, [sp, #32]
   15fa4:	cmp	x0, #0x0
   15fa8:	b.eq	15fe4 <ZSTD_decompressBegin_usingDict+0x7c>  // b.none
   15fac:	ldr	x0, [sp, #24]
   15fb0:	cmp	x0, #0x0
   15fb4:	b.eq	15fe4 <ZSTD_decompressBegin_usingDict+0x7c>  // b.none
   15fb8:	ldr	x2, [sp, #24]
   15fbc:	ldr	x1, [sp, #32]
   15fc0:	ldr	x0, [sp, #40]
   15fc4:	bl	15d30 <ZSTD_decompress_insertDictionary>
   15fc8:	str	x0, [sp, #48]
   15fcc:	ldr	x0, [sp, #48]
   15fd0:	bl	f558 <ERR_isError>
   15fd4:	cmp	w0, #0x0
   15fd8:	b.eq	15fe4 <ZSTD_decompressBegin_usingDict+0x7c>  // b.none
   15fdc:	mov	x0, #0xffffffffffffffe2    	// #-30
   15fe0:	b	15fe8 <ZSTD_decompressBegin_usingDict+0x80>
   15fe4:	mov	x0, #0x0                   	// #0
   15fe8:	ldp	x29, x30, [sp], #64
   15fec:	ret

0000000000015ff0 <ZSTD_DDictDictContent>:
   15ff0:	sub	sp, sp, #0x10
   15ff4:	str	x0, [sp, #8]
   15ff8:	ldr	x0, [sp, #8]
   15ffc:	ldr	x0, [x0, #8]
   16000:	add	sp, sp, #0x10
   16004:	ret

0000000000016008 <ZSTD_DDictDictSize>:
   16008:	sub	sp, sp, #0x10
   1600c:	str	x0, [sp, #8]
   16010:	ldr	x0, [sp, #8]
   16014:	ldr	x0, [x0, #16]
   16018:	add	sp, sp, #0x10
   1601c:	ret

0000000000016020 <ZSTD_decompressBegin_usingDDict>:
   16020:	stp	x29, x30, [sp, #-48]!
   16024:	mov	x29, sp
   16028:	str	x0, [sp, #24]
   1602c:	str	x1, [sp, #16]
   16030:	ldr	x0, [sp, #16]
   16034:	cmp	x0, #0x0
   16038:	b.eq	16074 <ZSTD_decompressBegin_usingDDict+0x54>  // b.none
   1603c:	ldr	x0, [sp, #24]
   16040:	ldr	x1, [x0, #28768]
   16044:	ldr	x0, [sp, #16]
   16048:	ldr	x2, [x0, #8]
   1604c:	ldr	x0, [sp, #16]
   16050:	ldr	x0, [x0, #16]
   16054:	add	x0, x2, x0
   16058:	cmp	x1, x0
   1605c:	cset	w0, ne  // ne = any
   16060:	and	w0, w0, #0xff
   16064:	mov	w1, w0
   16068:	ldr	x0, [sp, #24]
   1606c:	add	x0, x0, #0x4, lsl #12
   16070:	str	w1, [x0, #12652]
   16074:	ldr	x0, [sp, #24]
   16078:	bl	15e44 <ZSTD_decompressBegin>
   1607c:	str	x0, [sp, #40]
   16080:	ldr	x0, [sp, #40]
   16084:	bl	f558 <ERR_isError>
   16088:	cmp	w0, #0x0
   1608c:	b.eq	16098 <ZSTD_decompressBegin_usingDDict+0x78>  // b.none
   16090:	ldr	x0, [sp, #40]
   16094:	b	161f0 <ZSTD_decompressBegin_usingDDict+0x1d0>
   16098:	ldr	x0, [sp, #16]
   1609c:	cmp	x0, #0x0
   160a0:	b.eq	161ec <ZSTD_decompressBegin_usingDDict+0x1cc>  // b.none
   160a4:	ldr	x0, [sp, #16]
   160a8:	add	x0, x0, #0x4, lsl #12
   160ac:	ldr	w1, [x0, #10304]
   160b0:	ldr	x0, [sp, #24]
   160b4:	add	x0, x0, #0x4, lsl #12
   160b8:	str	w1, [x0, #12648]
   160bc:	ldr	x0, [sp, #16]
   160c0:	ldr	x1, [x0, #8]
   160c4:	ldr	x0, [sp, #24]
   160c8:	str	x1, [x0, #28752]
   160cc:	ldr	x0, [sp, #16]
   160d0:	ldr	x1, [x0, #8]
   160d4:	ldr	x0, [sp, #24]
   160d8:	str	x1, [x0, #28760]
   160dc:	ldr	x0, [sp, #16]
   160e0:	ldr	x1, [x0, #8]
   160e4:	ldr	x0, [sp, #16]
   160e8:	ldr	x0, [x0, #16]
   160ec:	add	x1, x1, x0
   160f0:	ldr	x0, [sp, #24]
   160f4:	str	x1, [x0, #28768]
   160f8:	ldr	x0, [sp, #24]
   160fc:	ldr	x1, [x0, #28768]
   16100:	ldr	x0, [sp, #24]
   16104:	str	x1, [x0, #28744]
   16108:	ldr	x0, [sp, #16]
   1610c:	add	x0, x0, #0x4, lsl #12
   16110:	ldr	w0, [x0, #10308]
   16114:	cmp	w0, #0x0
   16118:	b.eq	161d4 <ZSTD_decompressBegin_usingDDict+0x1b4>  // b.none
   1611c:	ldr	x0, [sp, #24]
   16120:	add	x0, x0, #0x4, lsl #12
   16124:	mov	w1, #0x1                   	// #1
   16128:	str	w1, [x0, #12456]
   1612c:	ldr	x0, [sp, #24]
   16130:	add	x0, x0, #0x4, lsl #12
   16134:	mov	w1, #0x1                   	// #1
   16138:	str	w1, [x0, #12460]
   1613c:	ldr	x0, [sp, #16]
   16140:	add	x1, x0, #0x18
   16144:	ldr	x0, [sp, #24]
   16148:	str	x1, [x0]
   1614c:	ldr	x1, [sp, #16]
   16150:	mov	x0, #0x1828                	// #6184
   16154:	add	x1, x1, x0
   16158:	ldr	x0, [sp, #24]
   1615c:	str	x1, [x0, #8]
   16160:	ldr	x1, [sp, #16]
   16164:	mov	x0, #0x1020                	// #4128
   16168:	add	x1, x1, x0
   1616c:	ldr	x0, [sp, #24]
   16170:	str	x1, [x0, #16]
   16174:	ldr	x1, [sp, #16]
   16178:	mov	x0, #0x2830                	// #10288
   1617c:	add	x1, x1, x0
   16180:	ldr	x0, [sp, #24]
   16184:	str	x1, [x0, #24]
   16188:	ldr	x0, [sp, #16]
   1618c:	add	x0, x0, #0x4, lsl #12
   16190:	ldr	w1, [x0, #10292]
   16194:	ldr	x0, [sp, #24]
   16198:	add	x0, x0, #0x4, lsl #12
   1619c:	str	w1, [x0, #10300]
   161a0:	ldr	x0, [sp, #16]
   161a4:	add	x0, x0, #0x4, lsl #12
   161a8:	ldr	w1, [x0, #10296]
   161ac:	ldr	x0, [sp, #24]
   161b0:	add	x0, x0, #0x4, lsl #12
   161b4:	str	w1, [x0, #10304]
   161b8:	ldr	x0, [sp, #16]
   161bc:	add	x0, x0, #0x4, lsl #12
   161c0:	ldr	w1, [x0, #10300]
   161c4:	ldr	x0, [sp, #24]
   161c8:	add	x0, x0, #0x4, lsl #12
   161cc:	str	w1, [x0, #10308]
   161d0:	b	161ec <ZSTD_decompressBegin_usingDDict+0x1cc>
   161d4:	ldr	x0, [sp, #24]
   161d8:	add	x0, x0, #0x4, lsl #12
   161dc:	str	wzr, [x0, #12456]
   161e0:	ldr	x0, [sp, #24]
   161e4:	add	x0, x0, #0x4, lsl #12
   161e8:	str	wzr, [x0, #12460]
   161ec:	mov	x0, #0x0                   	// #0
   161f0:	ldp	x29, x30, [sp], #48
   161f4:	ret

00000000000161f8 <ZSTD_loadEntropy_inDDict>:
   161f8:	stp	x29, x30, [sp, #-48]!
   161fc:	mov	x29, sp
   16200:	str	x0, [sp, #24]
   16204:	str	w1, [sp, #20]
   16208:	ldr	x0, [sp, #24]
   1620c:	add	x0, x0, #0x4, lsl #12
   16210:	str	wzr, [x0, #10304]
   16214:	ldr	x0, [sp, #24]
   16218:	add	x0, x0, #0x4, lsl #12
   1621c:	str	wzr, [x0, #10308]
   16220:	ldr	w0, [sp, #20]
   16224:	cmp	w0, #0x1
   16228:	b.ne	16234 <ZSTD_loadEntropy_inDDict+0x3c>  // b.any
   1622c:	mov	x0, #0x0                   	// #0
   16230:	b	16314 <ZSTD_loadEntropy_inDDict+0x11c>
   16234:	ldr	x0, [sp, #24]
   16238:	ldr	x0, [x0, #16]
   1623c:	cmp	x0, #0x7
   16240:	b.hi	16260 <ZSTD_loadEntropy_inDDict+0x68>  // b.pmore
   16244:	ldr	w0, [sp, #20]
   16248:	cmp	w0, #0x2
   1624c:	b.ne	16258 <ZSTD_loadEntropy_inDDict+0x60>  // b.any
   16250:	mov	x0, #0xffffffffffffffe2    	// #-30
   16254:	b	16314 <ZSTD_loadEntropy_inDDict+0x11c>
   16258:	mov	x0, #0x0                   	// #0
   1625c:	b	16314 <ZSTD_loadEntropy_inDDict+0x11c>
   16260:	ldr	x0, [sp, #24]
   16264:	ldr	x0, [x0, #8]
   16268:	bl	f448 <MEM_readLE32>
   1626c:	str	w0, [sp, #44]
   16270:	ldr	w1, [sp, #44]
   16274:	mov	w0, #0xa437                	// #42039
   16278:	movk	w0, #0xec30, lsl #16
   1627c:	cmp	w1, w0
   16280:	b.eq	162a0 <ZSTD_loadEntropy_inDDict+0xa8>  // b.none
   16284:	ldr	w0, [sp, #20]
   16288:	cmp	w0, #0x2
   1628c:	b.ne	16298 <ZSTD_loadEntropy_inDDict+0xa0>  // b.any
   16290:	mov	x0, #0xffffffffffffffe2    	// #-30
   16294:	b	16314 <ZSTD_loadEntropy_inDDict+0x11c>
   16298:	mov	x0, #0x0                   	// #0
   1629c:	b	16314 <ZSTD_loadEntropy_inDDict+0x11c>
   162a0:	ldr	x0, [sp, #24]
   162a4:	ldr	x0, [x0, #8]
   162a8:	add	x0, x0, #0x4
   162ac:	bl	f448 <MEM_readLE32>
   162b0:	mov	w1, w0
   162b4:	ldr	x0, [sp, #24]
   162b8:	add	x0, x0, #0x4, lsl #12
   162bc:	str	w1, [x0, #10304]
   162c0:	ldr	x0, [sp, #24]
   162c4:	add	x3, x0, #0x18
   162c8:	ldr	x0, [sp, #24]
   162cc:	ldr	x1, [x0, #8]
   162d0:	ldr	x0, [sp, #24]
   162d4:	ldr	x0, [x0, #16]
   162d8:	mov	x2, x0
   162dc:	mov	x0, x3
   162e0:	bl	15950 <ZSTD_loadEntropy>
   162e4:	str	x0, [sp, #32]
   162e8:	ldr	x0, [sp, #32]
   162ec:	bl	f558 <ERR_isError>
   162f0:	cmp	w0, #0x0
   162f4:	b.eq	16300 <ZSTD_loadEntropy_inDDict+0x108>  // b.none
   162f8:	mov	x0, #0xffffffffffffffe2    	// #-30
   162fc:	b	16314 <ZSTD_loadEntropy_inDDict+0x11c>
   16300:	ldr	x0, [sp, #24]
   16304:	add	x0, x0, #0x4, lsl #12
   16308:	mov	w1, #0x1                   	// #1
   1630c:	str	w1, [x0, #10308]
   16310:	mov	x0, #0x0                   	// #0
   16314:	ldp	x29, x30, [sp], #48
   16318:	ret

000000000001631c <ZSTD_initDDict_internal>:
   1631c:	stp	x29, x30, [sp, #-96]!
   16320:	mov	x29, sp
   16324:	str	x0, [sp, #72]
   16328:	str	x1, [sp, #64]
   1632c:	str	x2, [sp, #56]
   16330:	str	w3, [sp, #52]
   16334:	str	w4, [sp, #48]
   16338:	ldr	w0, [sp, #52]
   1633c:	cmp	w0, #0x1
   16340:	b.eq	1635c <ZSTD_initDDict_internal+0x40>  // b.none
   16344:	ldr	x0, [sp, #64]
   16348:	cmp	x0, #0x0
   1634c:	b.eq	1635c <ZSTD_initDDict_internal+0x40>  // b.none
   16350:	ldr	x0, [sp, #56]
   16354:	cmp	x0, #0x0
   16358:	b.ne	16384 <ZSTD_initDDict_internal+0x68>  // b.any
   1635c:	ldr	x0, [sp, #72]
   16360:	str	xzr, [x0]
   16364:	ldr	x0, [sp, #72]
   16368:	ldr	x1, [sp, #64]
   1636c:	str	x1, [x0, #8]
   16370:	ldr	x0, [sp, #64]
   16374:	cmp	x0, #0x0
   16378:	b.ne	163fc <ZSTD_initDDict_internal+0xe0>  // b.any
   1637c:	str	xzr, [sp, #56]
   16380:	b	163fc <ZSTD_initDDict_internal+0xe0>
   16384:	ldr	x1, [sp, #72]
   16388:	mov	x0, #0x6800                	// #26624
   1638c:	add	x0, x1, x0
   16390:	add	x0, x0, #0x48
   16394:	add	x2, sp, #0x10
   16398:	mov	x3, x0
   1639c:	ldp	x0, x1, [x3]
   163a0:	stp	x0, x1, [x2]
   163a4:	ldr	x0, [x3, #16]
   163a8:	str	x0, [x2, #16]
   163ac:	add	x0, sp, #0x10
   163b0:	mov	x1, x0
   163b4:	ldr	x0, [sp, #56]
   163b8:	bl	f1d8 <ZSTD_malloc>
   163bc:	str	x0, [sp, #88]
   163c0:	ldr	x0, [sp, #72]
   163c4:	ldr	x1, [sp, #88]
   163c8:	str	x1, [x0]
   163cc:	ldr	x0, [sp, #72]
   163d0:	ldr	x1, [sp, #88]
   163d4:	str	x1, [x0, #8]
   163d8:	ldr	x0, [sp, #88]
   163dc:	cmp	x0, #0x0
   163e0:	b.ne	163ec <ZSTD_initDDict_internal+0xd0>  // b.any
   163e4:	mov	x0, #0xffffffffffffffc0    	// #-64
   163e8:	b	16444 <ZSTD_initDDict_internal+0x128>
   163ec:	ldr	x2, [sp, #56]
   163f0:	ldr	x1, [sp, #64]
   163f4:	ldr	x0, [sp, #88]
   163f8:	bl	f2e0 <grub_memcpy>
   163fc:	ldr	x0, [sp, #72]
   16400:	ldr	x1, [sp, #56]
   16404:	str	x1, [x0, #16]
   16408:	ldr	x0, [sp, #72]
   1640c:	mov	w1, #0xc                   	// #12
   16410:	movk	w1, #0xc00, lsl #16
   16414:	str	w1, [x0, #10288]
   16418:	ldr	w1, [sp, #48]
   1641c:	ldr	x0, [sp, #72]
   16420:	bl	161f8 <ZSTD_loadEntropy_inDDict>
   16424:	str	x0, [sp, #80]
   16428:	ldr	x0, [sp, #80]
   1642c:	bl	f558 <ERR_isError>
   16430:	cmp	w0, #0x0
   16434:	b.eq	16440 <ZSTD_initDDict_internal+0x124>  // b.none
   16438:	ldr	x0, [sp, #80]
   1643c:	b	16444 <ZSTD_initDDict_internal+0x128>
   16440:	mov	x0, #0x0                   	// #0
   16444:	ldp	x29, x30, [sp], #96
   16448:	ret

000000000001644c <ZSTD_createDDict_advanced>:
   1644c:	stp	x29, x30, [sp, #-112]!
   16450:	mov	x29, sp
   16454:	str	x19, [sp, #16]
   16458:	str	x0, [sp, #88]
   1645c:	str	x1, [sp, #80]
   16460:	str	w2, [sp, #76]
   16464:	str	w3, [sp, #72]
   16468:	mov	x19, x4
   1646c:	ldr	x0, [x19]
   16470:	cmp	x0, #0x0
   16474:	cset	w0, eq  // eq = none
   16478:	and	w1, w0, #0xff
   1647c:	ldr	x0, [x19, #8]
   16480:	cmp	x0, #0x0
   16484:	cset	w0, eq  // eq = none
   16488:	and	w0, w0, #0xff
   1648c:	eor	w0, w1, w0
   16490:	and	w0, w0, #0xff
   16494:	cmp	w0, #0x0
   16498:	b.eq	164a4 <ZSTD_createDDict_advanced+0x58>  // b.none
   1649c:	mov	x0, #0x0                   	// #0
   164a0:	b	1654c <ZSTD_createDDict_advanced+0x100>
   164a4:	add	x2, sp, #0x20
   164a8:	mov	x3, x19
   164ac:	ldp	x0, x1, [x3]
   164b0:	stp	x0, x1, [x2]
   164b4:	ldr	x0, [x3, #16]
   164b8:	str	x0, [x2, #16]
   164bc:	add	x0, sp, #0x20
   164c0:	mov	x1, x0
   164c4:	mov	x0, #0x6860                	// #26720
   164c8:	bl	f1d8 <ZSTD_malloc>
   164cc:	str	x0, [sp, #104]
   164d0:	ldr	x0, [sp, #104]
   164d4:	cmp	x0, #0x0
   164d8:	b.ne	164e4 <ZSTD_createDDict_advanced+0x98>  // b.any
   164dc:	mov	x0, #0x0                   	// #0
   164e0:	b	1654c <ZSTD_createDDict_advanced+0x100>
   164e4:	ldr	x1, [sp, #104]
   164e8:	mov	x0, #0x6800                	// #26624
   164ec:	add	x0, x1, x0
   164f0:	add	x0, x0, #0x48
   164f4:	mov	x2, x0
   164f8:	mov	x3, x19
   164fc:	ldp	x0, x1, [x3]
   16500:	stp	x0, x1, [x2]
   16504:	ldr	x0, [x3, #16]
   16508:	str	x0, [x2, #16]
   1650c:	ldr	w4, [sp, #72]
   16510:	ldr	w3, [sp, #76]
   16514:	ldr	x2, [sp, #80]
   16518:	ldr	x1, [sp, #88]
   1651c:	ldr	x0, [sp, #104]
   16520:	bl	1631c <ZSTD_initDDict_internal>
   16524:	str	x0, [sp, #96]
   16528:	ldr	x0, [sp, #96]
   1652c:	bl	f558 <ERR_isError>
   16530:	cmp	w0, #0x0
   16534:	b.eq	16548 <ZSTD_createDDict_advanced+0xfc>  // b.none
   16538:	ldr	x0, [sp, #104]
   1653c:	bl	166f0 <ZSTD_freeDDict>
   16540:	mov	x0, #0x0                   	// #0
   16544:	b	1654c <ZSTD_createDDict_advanced+0x100>
   16548:	ldr	x0, [sp, #104]
   1654c:	ldr	x19, [sp, #16]
   16550:	ldp	x29, x30, [sp], #112
   16554:	ret

0000000000016558 <ZSTD_createDDict>:
   16558:	stp	x29, x30, [sp, #-96]!
   1655c:	mov	x29, sp
   16560:	str	x0, [sp, #56]
   16564:	str	x1, [sp, #48]
   16568:	str	xzr, [sp, #72]
   1656c:	str	xzr, [sp, #80]
   16570:	str	xzr, [sp, #88]
   16574:	add	x2, sp, #0x10
   16578:	add	x3, sp, #0x48
   1657c:	ldp	x0, x1, [x3]
   16580:	stp	x0, x1, [x2]
   16584:	ldr	x0, [x3, #16]
   16588:	str	x0, [x2, #16]
   1658c:	add	x0, sp, #0x10
   16590:	mov	x4, x0
   16594:	mov	w3, #0x0                   	// #0
   16598:	mov	w2, #0x0                   	// #0
   1659c:	ldr	x1, [sp, #48]
   165a0:	ldr	x0, [sp, #56]
   165a4:	bl	1644c <ZSTD_createDDict_advanced>
   165a8:	ldp	x29, x30, [sp], #96
   165ac:	ret

00000000000165b0 <ZSTD_createDDict_byReference>:
   165b0:	stp	x29, x30, [sp, #-96]!
   165b4:	mov	x29, sp
   165b8:	str	x0, [sp, #56]
   165bc:	str	x1, [sp, #48]
   165c0:	str	xzr, [sp, #72]
   165c4:	str	xzr, [sp, #80]
   165c8:	str	xzr, [sp, #88]
   165cc:	add	x2, sp, #0x10
   165d0:	add	x3, sp, #0x48
   165d4:	ldp	x0, x1, [x3]
   165d8:	stp	x0, x1, [x2]
   165dc:	ldr	x0, [x3, #16]
   165e0:	str	x0, [x2, #16]
   165e4:	add	x0, sp, #0x10
   165e8:	mov	x4, x0
   165ec:	mov	w3, #0x0                   	// #0
   165f0:	mov	w2, #0x1                   	// #1
   165f4:	ldr	x1, [sp, #48]
   165f8:	ldr	x0, [sp, #56]
   165fc:	bl	1644c <ZSTD_createDDict_advanced>
   16600:	ldp	x29, x30, [sp], #96
   16604:	ret

0000000000016608 <ZSTD_initStaticDDict>:
   16608:	stp	x29, x30, [sp, #-80]!
   1660c:	mov	x29, sp
   16610:	str	x0, [sp, #56]
   16614:	str	x1, [sp, #48]
   16618:	str	x2, [sp, #40]
   1661c:	str	x3, [sp, #32]
   16620:	str	w4, [sp, #28]
   16624:	str	w5, [sp, #24]
   16628:	ldr	w0, [sp, #28]
   1662c:	cmp	w0, #0x1
   16630:	b.eq	16644 <ZSTD_initStaticDDict+0x3c>  // b.none
   16634:	ldr	x1, [sp, #32]
   16638:	mov	x0, #0x6860                	// #26720
   1663c:	add	x0, x1, x0
   16640:	b	16648 <ZSTD_initStaticDDict+0x40>
   16644:	mov	x0, #0x6860                	// #26720
   16648:	str	x0, [sp, #72]
   1664c:	ldr	x0, [sp, #56]
   16650:	str	x0, [sp, #64]
   16654:	ldr	x0, [sp, #56]
   16658:	and	x0, x0, #0x7
   1665c:	cmp	x0, #0x0
   16660:	b.eq	1666c <ZSTD_initStaticDDict+0x64>  // b.none
   16664:	mov	x0, #0x0                   	// #0
   16668:	b	166e8 <ZSTD_initStaticDDict+0xe0>
   1666c:	ldr	x1, [sp, #48]
   16670:	ldr	x0, [sp, #72]
   16674:	cmp	x1, x0
   16678:	b.cs	16684 <ZSTD_initStaticDDict+0x7c>  // b.hs, b.nlast
   1667c:	mov	x0, #0x0                   	// #0
   16680:	b	166e8 <ZSTD_initStaticDDict+0xe0>
   16684:	ldr	w0, [sp, #28]
   16688:	cmp	w0, #0x0
   1668c:	b.ne	166b8 <ZSTD_initStaticDDict+0xb0>  // b.any
   16690:	ldr	x1, [sp, #64]
   16694:	mov	x0, #0x6860                	// #26720
   16698:	add	x0, x1, x0
   1669c:	ldr	x2, [sp, #32]
   166a0:	ldr	x1, [sp, #40]
   166a4:	bl	f2e0 <grub_memcpy>
   166a8:	ldr	x1, [sp, #64]
   166ac:	mov	x0, #0x6860                	// #26720
   166b0:	add	x0, x1, x0
   166b4:	str	x0, [sp, #40]
   166b8:	ldr	w4, [sp, #24]
   166bc:	mov	w3, #0x1                   	// #1
   166c0:	ldr	x2, [sp, #32]
   166c4:	ldr	x1, [sp, #40]
   166c8:	ldr	x0, [sp, #64]
   166cc:	bl	1631c <ZSTD_initDDict_internal>
   166d0:	bl	f558 <ERR_isError>
   166d4:	cmp	w0, #0x0
   166d8:	b.eq	166e4 <ZSTD_initStaticDDict+0xdc>  // b.none
   166dc:	mov	x0, #0x0                   	// #0
   166e0:	b	166e8 <ZSTD_initStaticDDict+0xe0>
   166e4:	ldr	x0, [sp, #64]
   166e8:	ldp	x29, x30, [sp], #80
   166ec:	ret

00000000000166f0 <ZSTD_freeDDict>:
   166f0:	stp	x29, x30, [sp, #-96]!
   166f4:	mov	x29, sp
   166f8:	str	x0, [sp, #56]
   166fc:	ldr	x0, [sp, #56]
   16700:	cmp	x0, #0x0
   16704:	b.ne	16710 <ZSTD_freeDDict+0x20>  // b.any
   16708:	mov	x0, #0x0                   	// #0
   1670c:	b	16794 <ZSTD_freeDDict+0xa4>
   16710:	ldr	x1, [sp, #56]
   16714:	mov	x0, #0x6800                	// #26624
   16718:	add	x0, x1, x0
   1671c:	add	x0, x0, #0x48
   16720:	add	x2, sp, #0x48
   16724:	mov	x3, x0
   16728:	ldp	x0, x1, [x3]
   1672c:	stp	x0, x1, [x2]
   16730:	ldr	x0, [x3, #16]
   16734:	str	x0, [x2, #16]
   16738:	ldr	x0, [sp, #56]
   1673c:	ldr	x4, [x0]
   16740:	add	x2, sp, #0x10
   16744:	add	x3, sp, #0x48
   16748:	ldp	x0, x1, [x3]
   1674c:	stp	x0, x1, [x2]
   16750:	ldr	x0, [x3, #16]
   16754:	str	x0, [x2, #16]
   16758:	add	x0, sp, #0x10
   1675c:	mov	x1, x0
   16760:	mov	x0, x4
   16764:	bl	f284 <ZSTD_free>
   16768:	add	x2, sp, #0x10
   1676c:	add	x3, sp, #0x48
   16770:	ldp	x0, x1, [x3]
   16774:	stp	x0, x1, [x2]
   16778:	ldr	x0, [x3, #16]
   1677c:	str	x0, [x2, #16]
   16780:	add	x0, sp, #0x10
   16784:	mov	x1, x0
   16788:	ldr	x0, [sp, #56]
   1678c:	bl	f284 <ZSTD_free>
   16790:	mov	x0, #0x0                   	// #0
   16794:	ldp	x29, x30, [sp], #96
   16798:	ret

000000000001679c <ZSTD_estimateDDictSize>:
   1679c:	sub	sp, sp, #0x10
   167a0:	str	x0, [sp, #8]
   167a4:	str	w1, [sp, #4]
   167a8:	ldr	w0, [sp, #4]
   167ac:	cmp	w0, #0x1
   167b0:	b.eq	167c4 <ZSTD_estimateDDictSize+0x28>  // b.none
   167b4:	ldr	x1, [sp, #8]
   167b8:	mov	x0, #0x6860                	// #26720
   167bc:	add	x0, x1, x0
   167c0:	b	167c8 <ZSTD_estimateDDictSize+0x2c>
   167c4:	mov	x0, #0x6860                	// #26720
   167c8:	add	sp, sp, #0x10
   167cc:	ret

00000000000167d0 <ZSTD_sizeof_DDict>:
   167d0:	sub	sp, sp, #0x10
   167d4:	str	x0, [sp, #8]
   167d8:	ldr	x0, [sp, #8]
   167dc:	cmp	x0, #0x0
   167e0:	b.ne	167ec <ZSTD_sizeof_DDict+0x1c>  // b.any
   167e4:	mov	x0, #0x0                   	// #0
   167e8:	b	16814 <ZSTD_sizeof_DDict+0x44>
   167ec:	ldr	x0, [sp, #8]
   167f0:	ldr	x0, [x0]
   167f4:	cmp	x0, #0x0
   167f8:	b.eq	16810 <ZSTD_sizeof_DDict+0x40>  // b.none
   167fc:	ldr	x0, [sp, #8]
   16800:	ldr	x1, [x0, #16]
   16804:	mov	x0, #0x6860                	// #26720
   16808:	add	x0, x1, x0
   1680c:	b	16814 <ZSTD_sizeof_DDict+0x44>
   16810:	mov	x0, #0x6860                	// #26720
   16814:	add	sp, sp, #0x10
   16818:	ret

000000000001681c <ZSTD_getDictID_fromDict>:
   1681c:	stp	x29, x30, [sp, #-32]!
   16820:	mov	x29, sp
   16824:	str	x0, [sp, #24]
   16828:	str	x1, [sp, #16]
   1682c:	ldr	x0, [sp, #16]
   16830:	cmp	x0, #0x7
   16834:	b.hi	16840 <ZSTD_getDictID_fromDict+0x24>  // b.pmore
   16838:	mov	w0, #0x0                   	// #0
   1683c:	b	16870 <ZSTD_getDictID_fromDict+0x54>
   16840:	ldr	x0, [sp, #24]
   16844:	bl	f448 <MEM_readLE32>
   16848:	mov	w1, w0
   1684c:	mov	w0, #0xa437                	// #42039
   16850:	movk	w0, #0xec30, lsl #16
   16854:	cmp	w1, w0
   16858:	b.eq	16864 <ZSTD_getDictID_fromDict+0x48>  // b.none
   1685c:	mov	w0, #0x0                   	// #0
   16860:	b	16870 <ZSTD_getDictID_fromDict+0x54>
   16864:	ldr	x0, [sp, #24]
   16868:	add	x0, x0, #0x4
   1686c:	bl	f448 <MEM_readLE32>
   16870:	ldp	x29, x30, [sp], #32
   16874:	ret

0000000000016878 <ZSTD_getDictID_fromDDict>:
   16878:	stp	x29, x30, [sp, #-32]!
   1687c:	mov	x29, sp
   16880:	str	x0, [sp, #24]
   16884:	ldr	x0, [sp, #24]
   16888:	cmp	x0, #0x0
   1688c:	b.ne	16898 <ZSTD_getDictID_fromDDict+0x20>  // b.any
   16890:	mov	w0, #0x0                   	// #0
   16894:	b	168b4 <ZSTD_getDictID_fromDDict+0x3c>
   16898:	ldr	x0, [sp, #24]
   1689c:	ldr	x2, [x0, #8]
   168a0:	ldr	x0, [sp, #24]
   168a4:	ldr	x0, [x0, #16]
   168a8:	mov	x1, x0
   168ac:	mov	x0, x2
   168b0:	bl	1681c <ZSTD_getDictID_fromDict>
   168b4:	ldp	x29, x30, [sp], #32
   168b8:	ret

00000000000168bc <ZSTD_getDictID_fromFrame>:
   168bc:	stp	x29, x30, [sp, #-80]!
   168c0:	mov	x29, sp
   168c4:	str	x0, [sp, #24]
   168c8:	str	x1, [sp, #16]
   168cc:	str	xzr, [sp, #32]
   168d0:	str	xzr, [sp, #40]
   168d4:	str	wzr, [sp, #48]
   168d8:	str	wzr, [sp, #52]
   168dc:	str	wzr, [sp, #56]
   168e0:	str	wzr, [sp, #60]
   168e4:	str	wzr, [sp, #64]
   168e8:	add	x0, sp, #0x20
   168ec:	ldr	x2, [sp, #16]
   168f0:	ldr	x1, [sp, #24]
   168f4:	bl	10670 <ZSTD_getFrameHeader>
   168f8:	str	x0, [sp, #72]
   168fc:	ldr	x0, [sp, #72]
   16900:	bl	f558 <ERR_isError>
   16904:	cmp	w0, #0x0
   16908:	b.eq	16914 <ZSTD_getDictID_fromFrame+0x58>  // b.none
   1690c:	mov	w0, #0x0                   	// #0
   16910:	b	16918 <ZSTD_getDictID_fromFrame+0x5c>
   16914:	ldr	w0, [sp, #60]
   16918:	ldp	x29, x30, [sp], #80
   1691c:	ret

0000000000016920 <ZSTD_decompress_usingDDict>:
   16920:	stp	x29, x30, [sp, #-64]!
   16924:	mov	x29, sp
   16928:	str	x0, [sp, #56]
   1692c:	str	x1, [sp, #48]
   16930:	str	x2, [sp, #40]
   16934:	str	x3, [sp, #32]
   16938:	str	x4, [sp, #24]
   1693c:	str	x5, [sp, #16]
   16940:	ldr	x7, [sp, #16]
   16944:	mov	x6, #0x0                   	// #0
   16948:	mov	x5, #0x0                   	// #0
   1694c:	ldr	x4, [sp, #24]
   16950:	ldr	x3, [sp, #32]
   16954:	ldr	x2, [sp, #40]
   16958:	ldr	x1, [sp, #48]
   1695c:	ldr	x0, [sp, #56]
   16960:	bl	14ee4 <ZSTD_decompressMultiFrame>
   16964:	ldp	x29, x30, [sp], #64
   16968:	ret

000000000001696c <ZSTD_createDStream>:
   1696c:	stp	x29, x30, [sp, #-48]!
   16970:	mov	x29, sp
   16974:	adrp	x0, 0 <grub_memcpy>
   16978:	add	x0, x0, #0x0
   1697c:	ldr	x0, [x0]
   16980:	add	x2, sp, #0x10
   16984:	mov	x3, x0
   16988:	ldp	x0, x1, [x3]
   1698c:	stp	x0, x1, [x2]
   16990:	ldr	x0, [x3, #16]
   16994:	str	x0, [x2, #16]
   16998:	add	x0, sp, #0x10
   1699c:	bl	169d4 <ZSTD_createDStream_advanced>
   169a0:	ldp	x29, x30, [sp], #48
   169a4:	ret
	...

00000000000169b0 <ZSTD_initStaticDStream>:
   169b0:	stp	x29, x30, [sp, #-32]!
   169b4:	mov	x29, sp
   169b8:	str	x0, [sp, #24]
   169bc:	str	x1, [sp, #16]
   169c0:	ldr	x1, [sp, #16]
   169c4:	ldr	x0, [sp, #24]
   169c8:	bl	fdf4 <ZSTD_initStaticDCtx>
   169cc:	ldp	x29, x30, [sp], #32
   169d0:	ret

00000000000169d4 <ZSTD_createDStream_advanced>:
   169d4:	stp	x29, x30, [sp, #-64]!
   169d8:	mov	x29, sp
   169dc:	str	x19, [sp, #16]
   169e0:	mov	x19, x0
   169e4:	add	x2, sp, #0x20
   169e8:	mov	x3, x19
   169ec:	ldp	x0, x1, [x3]
   169f0:	stp	x0, x1, [x2]
   169f4:	ldr	x0, [x3, #16]
   169f8:	str	x0, [x2, #16]
   169fc:	add	x0, sp, #0x20
   16a00:	bl	fe78 <ZSTD_createDCtx_advanced>
   16a04:	ldr	x19, [sp, #16]
   16a08:	ldp	x29, x30, [sp], #64
   16a0c:	ret

0000000000016a10 <ZSTD_freeDStream>:
   16a10:	stp	x29, x30, [sp, #-32]!
   16a14:	mov	x29, sp
   16a18:	str	x0, [sp, #24]
   16a1c:	ldr	x0, [sp, #24]
   16a20:	bl	ff88 <ZSTD_freeDCtx>
   16a24:	ldp	x29, x30, [sp], #32
   16a28:	ret

0000000000016a2c <ZSTD_DStreamInSize>:
   16a2c:	mov	x0, #0x3                   	// #3
   16a30:	add	x0, x0, #0x20, lsl #12
   16a34:	ret

0000000000016a38 <ZSTD_DStreamOutSize>:
   16a38:	mov	x0, #0x20000               	// #131072
   16a3c:	ret

0000000000016a40 <ZSTD_DCtx_loadDictionary_advanced>:
   16a40:	stp	x29, x30, [sp, #-80]!
   16a44:	mov	x29, sp
   16a48:	str	x0, [sp, #72]
   16a4c:	str	x1, [sp, #64]
   16a50:	str	x2, [sp, #56]
   16a54:	str	w3, [sp, #52]
   16a58:	str	w4, [sp, #48]
   16a5c:	ldr	x0, [sp, #72]
   16a60:	add	x0, x0, #0x4, lsl #12
   16a64:	ldr	w0, [x0, #12656]
   16a68:	cmp	w0, #0x0
   16a6c:	b.eq	16a78 <ZSTD_DCtx_loadDictionary_advanced+0x38>  // b.none
   16a70:	mov	x0, #0xffffffffffffffc4    	// #-60
   16a74:	b	16b1c <ZSTD_DCtx_loadDictionary_advanced+0xdc>
   16a78:	ldr	x0, [sp, #72]
   16a7c:	ldr	x0, [x0, #29016]
   16a80:	bl	166f0 <ZSTD_freeDDict>
   16a84:	ldr	x0, [sp, #64]
   16a88:	cmp	x0, #0x0
   16a8c:	b.eq	16b00 <ZSTD_DCtx_loadDictionary_advanced+0xc0>  // b.none
   16a90:	ldr	x0, [sp, #56]
   16a94:	cmp	x0, #0x7
   16a98:	b.ls	16b00 <ZSTD_DCtx_loadDictionary_advanced+0xc0>  // b.plast
   16a9c:	ldr	x0, [sp, #72]
   16aa0:	add	x0, x0, #0x7, lsl #12
   16aa4:	add	x0, x0, #0x120
   16aa8:	add	x2, sp, #0x10
   16aac:	mov	x3, x0
   16ab0:	ldp	x0, x1, [x3]
   16ab4:	stp	x0, x1, [x2]
   16ab8:	ldr	x0, [x3, #16]
   16abc:	str	x0, [x2, #16]
   16ac0:	add	x0, sp, #0x10
   16ac4:	mov	x4, x0
   16ac8:	ldr	w3, [sp, #48]
   16acc:	ldr	w2, [sp, #52]
   16ad0:	ldr	x1, [sp, #56]
   16ad4:	ldr	x0, [sp, #64]
   16ad8:	bl	1644c <ZSTD_createDDict_advanced>
   16adc:	mov	x1, x0
   16ae0:	ldr	x0, [sp, #72]
   16ae4:	str	x1, [x0, #29016]
   16ae8:	ldr	x0, [sp, #72]
   16aec:	ldr	x0, [x0, #29016]
   16af0:	cmp	x0, #0x0
   16af4:	b.ne	16b08 <ZSTD_DCtx_loadDictionary_advanced+0xc8>  // b.any
   16af8:	mov	x0, #0xffffffffffffffc0    	// #-64
   16afc:	b	16b1c <ZSTD_DCtx_loadDictionary_advanced+0xdc>
   16b00:	ldr	x0, [sp, #72]
   16b04:	str	xzr, [x0, #29016]
   16b08:	ldr	x0, [sp, #72]
   16b0c:	ldr	x1, [x0, #29016]
   16b10:	ldr	x0, [sp, #72]
   16b14:	str	x1, [x0, #29024]
   16b18:	mov	x0, #0x0                   	// #0
   16b1c:	ldp	x29, x30, [sp], #80
   16b20:	ret

0000000000016b24 <ZSTD_DCtx_loadDictionary_byReference>:
   16b24:	stp	x29, x30, [sp, #-48]!
   16b28:	mov	x29, sp
   16b2c:	str	x0, [sp, #40]
   16b30:	str	x1, [sp, #32]
   16b34:	str	x2, [sp, #24]
   16b38:	mov	w4, #0x0                   	// #0
   16b3c:	mov	w3, #0x1                   	// #1
   16b40:	ldr	x2, [sp, #24]
   16b44:	ldr	x1, [sp, #32]
   16b48:	ldr	x0, [sp, #40]
   16b4c:	bl	16a40 <ZSTD_DCtx_loadDictionary_advanced>
   16b50:	ldp	x29, x30, [sp], #48
   16b54:	ret

0000000000016b58 <ZSTD_DCtx_loadDictionary>:
   16b58:	stp	x29, x30, [sp, #-48]!
   16b5c:	mov	x29, sp
   16b60:	str	x0, [sp, #40]
   16b64:	str	x1, [sp, #32]
   16b68:	str	x2, [sp, #24]
   16b6c:	mov	w4, #0x0                   	// #0
   16b70:	mov	w3, #0x0                   	// #0
   16b74:	ldr	x2, [sp, #24]
   16b78:	ldr	x1, [sp, #32]
   16b7c:	ldr	x0, [sp, #40]
   16b80:	bl	16a40 <ZSTD_DCtx_loadDictionary_advanced>
   16b84:	ldp	x29, x30, [sp], #48
   16b88:	ret

0000000000016b8c <ZSTD_DCtx_refPrefix_advanced>:
   16b8c:	stp	x29, x30, [sp, #-48]!
   16b90:	mov	x29, sp
   16b94:	str	x0, [sp, #40]
   16b98:	str	x1, [sp, #32]
   16b9c:	str	x2, [sp, #24]
   16ba0:	str	w3, [sp, #20]
   16ba4:	ldr	w4, [sp, #20]
   16ba8:	mov	w3, #0x1                   	// #1
   16bac:	ldr	x2, [sp, #24]
   16bb0:	ldr	x1, [sp, #32]
   16bb4:	ldr	x0, [sp, #40]
   16bb8:	bl	16a40 <ZSTD_DCtx_loadDictionary_advanced>
   16bbc:	ldp	x29, x30, [sp], #48
   16bc0:	ret

0000000000016bc4 <ZSTD_DCtx_refPrefix>:
   16bc4:	stp	x29, x30, [sp, #-48]!
   16bc8:	mov	x29, sp
   16bcc:	str	x0, [sp, #40]
   16bd0:	str	x1, [sp, #32]
   16bd4:	str	x2, [sp, #24]
   16bd8:	mov	w3, #0x1                   	// #1
   16bdc:	ldr	x2, [sp, #24]
   16be0:	ldr	x1, [sp, #32]
   16be4:	ldr	x0, [sp, #40]
   16be8:	bl	16b8c <ZSTD_DCtx_refPrefix_advanced>
   16bec:	ldp	x29, x30, [sp], #48
   16bf0:	ret

0000000000016bf4 <ZSTD_initDStream_usingDict>:
   16bf4:	stp	x29, x30, [sp, #-64]!
   16bf8:	mov	x29, sp
   16bfc:	str	x0, [sp, #40]
   16c00:	str	x1, [sp, #32]
   16c04:	str	x2, [sp, #24]
   16c08:	ldr	x0, [sp, #40]
   16c0c:	add	x0, x0, #0x4, lsl #12
   16c10:	str	wzr, [x0, #12656]
   16c14:	ldr	x0, [sp, #40]
   16c18:	add	x0, x0, #0x4, lsl #12
   16c1c:	str	wzr, [x0, #12756]
   16c20:	ldr	x2, [sp, #24]
   16c24:	ldr	x1, [sp, #32]
   16c28:	ldr	x0, [sp, #40]
   16c2c:	bl	16b58 <ZSTD_DCtx_loadDictionary>
   16c30:	str	x0, [sp, #56]
   16c34:	ldr	x0, [sp, #56]
   16c38:	bl	f558 <ERR_isError>
   16c3c:	cmp	w0, #0x0
   16c40:	b.eq	16c4c <ZSTD_initDStream_usingDict+0x58>  // b.none
   16c44:	ldr	x0, [sp, #56]
   16c48:	b	16c50 <ZSTD_initDStream_usingDict+0x5c>
   16c4c:	mov	x0, #0x5                   	// #5
   16c50:	ldp	x29, x30, [sp], #64
   16c54:	ret

0000000000016c58 <ZSTD_initDStream>:
   16c58:	stp	x29, x30, [sp, #-32]!
   16c5c:	mov	x29, sp
   16c60:	str	x0, [sp, #24]
   16c64:	mov	x2, #0x0                   	// #0
   16c68:	mov	x1, #0x0                   	// #0
   16c6c:	ldr	x0, [sp, #24]
   16c70:	bl	16bf4 <ZSTD_initDStream_usingDict>
   16c74:	ldp	x29, x30, [sp], #32
   16c78:	ret

0000000000016c7c <ZSTD_initDStream_usingDDict>:
   16c7c:	stp	x29, x30, [sp, #-48]!
   16c80:	mov	x29, sp
   16c84:	str	x0, [sp, #24]
   16c88:	str	x1, [sp, #16]
   16c8c:	ldr	x0, [sp, #24]
   16c90:	bl	16c58 <ZSTD_initDStream>
   16c94:	str	x0, [sp, #40]
   16c98:	ldr	x0, [sp, #24]
   16c9c:	ldr	x1, [sp, #16]
   16ca0:	str	x1, [x0, #29024]
   16ca4:	ldr	x0, [sp, #40]
   16ca8:	ldp	x29, x30, [sp], #48
   16cac:	ret

0000000000016cb0 <ZSTD_resetDStream>:
   16cb0:	sub	sp, sp, #0x10
   16cb4:	str	x0, [sp, #8]
   16cb8:	ldr	x0, [sp, #8]
   16cbc:	add	x0, x0, #0x4, lsl #12
   16cc0:	mov	w1, #0x1                   	// #1
   16cc4:	str	w1, [x0, #12656]
   16cc8:	ldr	x0, [sp, #8]
   16ccc:	str	xzr, [x0, #29104]
   16cd0:	ldr	x0, [sp, #8]
   16cd4:	ldr	x1, [x0, #29104]
   16cd8:	ldr	x0, [sp, #8]
   16cdc:	str	x1, [x0, #29096]
   16ce0:	ldr	x0, [sp, #8]
   16ce4:	ldr	x1, [x0, #29096]
   16ce8:	ldr	x0, [sp, #8]
   16cec:	str	x1, [x0, #29064]
   16cf0:	ldr	x0, [sp, #8]
   16cf4:	ldr	x1, [x0, #29064]
   16cf8:	ldr	x0, [sp, #8]
   16cfc:	str	x1, [x0, #29112]
   16d00:	ldr	x0, [sp, #8]
   16d04:	add	x0, x0, #0x4, lsl #12
   16d08:	str	wzr, [x0, #12748]
   16d0c:	ldr	x0, [sp, #8]
   16d10:	add	x0, x0, #0x4, lsl #12
   16d14:	str	wzr, [x0, #12752]
   16d18:	mov	x0, #0x5                   	// #5
   16d1c:	add	sp, sp, #0x10
   16d20:	ret

0000000000016d24 <ZSTD_setDStreamParameter>:
   16d24:	sub	sp, sp, #0x10
   16d28:	str	x0, [sp, #8]
   16d2c:	str	w1, [sp, #4]
   16d30:	str	w2, [sp]
   16d34:	ldr	x0, [sp, #8]
   16d38:	add	x0, x0, #0x4, lsl #12
   16d3c:	ldr	w0, [x0, #12656]
   16d40:	cmp	w0, #0x0
   16d44:	b.eq	16d50 <ZSTD_setDStreamParameter+0x2c>  // b.none
   16d48:	mov	x0, #0xffffffffffffffc4    	// #-60
   16d4c:	b	16d8c <ZSTD_setDStreamParameter+0x68>
   16d50:	ldr	w0, [sp, #4]
   16d54:	cmp	w0, #0x0
   16d58:	b.eq	16d64 <ZSTD_setDStreamParameter+0x40>  // b.none
   16d5c:	mov	x0, #0xffffffffffffffd8    	// #-40
   16d60:	b	16d8c <ZSTD_setDStreamParameter+0x68>
   16d64:	ldr	w0, [sp]
   16d68:	cmp	w0, #0x0
   16d6c:	b.eq	16d78 <ZSTD_setDStreamParameter+0x54>  // b.none
   16d70:	ldr	w0, [sp]
   16d74:	b	16d7c <ZSTD_setDStreamParameter+0x58>
   16d78:	mov	x0, #0xffffffff            	// #4294967295
   16d7c:	ldr	x1, [sp, #8]
   16d80:	str	x0, [x1, #29072]
   16d84:	nop
   16d88:	mov	x0, #0x0                   	// #0
   16d8c:	add	sp, sp, #0x10
   16d90:	ret

0000000000016d94 <ZSTD_DCtx_refDDict>:
   16d94:	sub	sp, sp, #0x10
   16d98:	str	x0, [sp, #8]
   16d9c:	str	x1, [sp]
   16da0:	ldr	x0, [sp, #8]
   16da4:	add	x0, x0, #0x4, lsl #12
   16da8:	ldr	w0, [x0, #12656]
   16dac:	cmp	w0, #0x0
   16db0:	b.eq	16dbc <ZSTD_DCtx_refDDict+0x28>  // b.none
   16db4:	mov	x0, #0xffffffffffffffc4    	// #-60
   16db8:	b	16dcc <ZSTD_DCtx_refDDict+0x38>
   16dbc:	ldr	x0, [sp, #8]
   16dc0:	ldr	x1, [sp]
   16dc4:	str	x1, [x0, #29024]
   16dc8:	mov	x0, #0x0                   	// #0
   16dcc:	add	sp, sp, #0x10
   16dd0:	ret

0000000000016dd4 <ZSTD_DCtx_setMaxWindowSize>:
   16dd4:	sub	sp, sp, #0x10
   16dd8:	str	x0, [sp, #8]
   16ddc:	str	x1, [sp]
   16de0:	ldr	x0, [sp, #8]
   16de4:	add	x0, x0, #0x4, lsl #12
   16de8:	ldr	w0, [x0, #12656]
   16dec:	cmp	w0, #0x0
   16df0:	b.eq	16dfc <ZSTD_DCtx_setMaxWindowSize+0x28>  // b.none
   16df4:	mov	x0, #0xffffffffffffffc4    	// #-60
   16df8:	b	16e0c <ZSTD_DCtx_setMaxWindowSize+0x38>
   16dfc:	ldr	x0, [sp, #8]
   16e00:	ldr	x1, [sp]
   16e04:	str	x1, [x0, #29072]
   16e08:	mov	x0, #0x0                   	// #0
   16e0c:	add	sp, sp, #0x10
   16e10:	ret

0000000000016e14 <ZSTD_DCtx_setFormat>:
   16e14:	sub	sp, sp, #0x10
   16e18:	str	x0, [sp, #8]
   16e1c:	str	w1, [sp, #4]
   16e20:	ldr	x0, [sp, #8]
   16e24:	add	x0, x0, #0x4, lsl #12
   16e28:	ldr	w0, [x0, #12656]
   16e2c:	cmp	w0, #0x0
   16e30:	b.eq	16e3c <ZSTD_DCtx_setFormat+0x28>  // b.none
   16e34:	mov	x0, #0xffffffffffffffc4    	// #-60
   16e38:	b	16e50 <ZSTD_DCtx_setFormat+0x3c>
   16e3c:	ldr	x0, [sp, #8]
   16e40:	add	x0, x0, #0x4, lsl #12
   16e44:	ldr	w1, [sp, #4]
   16e48:	str	w1, [x0, #12560]
   16e4c:	mov	x0, #0x0                   	// #0
   16e50:	add	sp, sp, #0x10
   16e54:	ret

0000000000016e58 <ZSTD_sizeof_DStream>:
   16e58:	stp	x29, x30, [sp, #-32]!
   16e5c:	mov	x29, sp
   16e60:	str	x0, [sp, #24]
   16e64:	ldr	x0, [sp, #24]
   16e68:	bl	fc9c <ZSTD_sizeof_DCtx>
   16e6c:	ldp	x29, x30, [sp], #32
   16e70:	ret

0000000000016e74 <ZSTD_decodingBufferSize_min>:
   16e74:	sub	sp, sp, #0x30
   16e78:	str	x0, [sp, #8]
   16e7c:	str	x1, [sp]
   16e80:	ldr	x1, [sp, #8]
   16e84:	mov	x0, #0x1ffff               	// #131071
   16e88:	cmp	x1, x0
   16e8c:	b.hi	16e98 <ZSTD_decodingBufferSize_min+0x24>  // b.pmore
   16e90:	ldr	x0, [sp, #8]
   16e94:	b	16e9c <ZSTD_decodingBufferSize_min+0x28>
   16e98:	mov	x0, #0x20000               	// #131072
   16e9c:	str	x0, [sp, #40]
   16ea0:	ldr	x1, [sp, #8]
   16ea4:	ldr	x0, [sp, #40]
   16ea8:	add	x0, x1, x0
   16eac:	add	x0, x0, #0x10
   16eb0:	str	x0, [sp, #32]
   16eb4:	ldr	x0, [sp]
   16eb8:	ldr	x2, [sp, #32]
   16ebc:	ldr	x1, [sp, #32]
   16ec0:	cmp	x2, x0
   16ec4:	csel	x0, x1, x0, ls  // ls = plast
   16ec8:	str	x0, [sp, #24]
   16ecc:	ldr	x0, [sp, #24]
   16ed0:	str	x0, [sp, #16]
   16ed4:	ldr	x1, [sp, #16]
   16ed8:	ldr	x0, [sp, #24]
   16edc:	cmp	x1, x0
   16ee0:	b.eq	16eec <ZSTD_decodingBufferSize_min+0x78>  // b.none
   16ee4:	mov	x0, #0xfffffffffffffff0    	// #-16
   16ee8:	b	16ef0 <ZSTD_decodingBufferSize_min+0x7c>
   16eec:	ldr	x0, [sp, #16]
   16ef0:	add	sp, sp, #0x30
   16ef4:	ret

0000000000016ef8 <ZSTD_estimateDStreamSize>:
   16ef8:	stp	x29, x30, [sp, #-64]!
   16efc:	mov	x29, sp
   16f00:	str	x0, [sp, #24]
   16f04:	ldr	x2, [sp, #24]
   16f08:	ldr	x1, [sp, #24]
   16f0c:	mov	x0, #0x20000               	// #131072
   16f10:	cmp	x2, #0x20, lsl #12
   16f14:	csel	x0, x1, x0, ls  // ls = plast
   16f18:	str	x0, [sp, #56]
   16f1c:	ldr	x0, [sp, #56]
   16f20:	str	x0, [sp, #48]
   16f24:	mov	x1, #0xffffffffffffffff    	// #-1
   16f28:	ldr	x0, [sp, #24]
   16f2c:	bl	16e74 <ZSTD_decodingBufferSize_min>
   16f30:	str	x0, [sp, #40]
   16f34:	bl	fcf8 <ZSTD_estimateDCtxSize>
   16f38:	mov	x1, x0
   16f3c:	ldr	x0, [sp, #48]
   16f40:	add	x1, x1, x0
   16f44:	ldr	x0, [sp, #40]
   16f48:	add	x0, x1, x0
   16f4c:	ldp	x29, x30, [sp], #64
   16f50:	ret

0000000000016f54 <ZSTD_estimateDStreamSize_fromFrame>:
   16f54:	stp	x29, x30, [sp, #-96]!
   16f58:	mov	x29, sp
   16f5c:	str	x0, [sp, #24]
   16f60:	str	x1, [sp, #16]
   16f64:	mov	w0, #0x80000000            	// #-2147483648
   16f68:	str	w0, [sp, #92]
   16f6c:	add	x0, sp, #0x28
   16f70:	ldr	x2, [sp, #16]
   16f74:	ldr	x1, [sp, #24]
   16f78:	bl	10670 <ZSTD_getFrameHeader>
   16f7c:	str	x0, [sp, #80]
   16f80:	ldr	x0, [sp, #80]
   16f84:	bl	f558 <ERR_isError>
   16f88:	cmp	w0, #0x0
   16f8c:	b.eq	16f98 <ZSTD_estimateDStreamSize_fromFrame+0x44>  // b.none
   16f90:	ldr	x0, [sp, #80]
   16f94:	b	16fcc <ZSTD_estimateDStreamSize_fromFrame+0x78>
   16f98:	ldr	x0, [sp, #80]
   16f9c:	cmp	x0, #0x0
   16fa0:	b.eq	16fac <ZSTD_estimateDStreamSize_fromFrame+0x58>  // b.none
   16fa4:	mov	x0, #0xffffffffffffffb8    	// #-72
   16fa8:	b	16fcc <ZSTD_estimateDStreamSize_fromFrame+0x78>
   16fac:	ldr	x1, [sp, #48]
   16fb0:	ldr	w0, [sp, #92]
   16fb4:	cmp	x1, x0
   16fb8:	b.ls	16fc4 <ZSTD_estimateDStreamSize_fromFrame+0x70>  // b.plast
   16fbc:	mov	x0, #0xfffffffffffffff0    	// #-16
   16fc0:	b	16fcc <ZSTD_estimateDStreamSize_fromFrame+0x78>
   16fc4:	ldr	x0, [sp, #48]
   16fc8:	bl	16ef8 <ZSTD_estimateDStreamSize>
   16fcc:	ldp	x29, x30, [sp], #96
   16fd0:	ret

0000000000016fd4 <ZSTD_limitCopy>:
   16fd4:	stp	x29, x30, [sp, #-64]!
   16fd8:	mov	x29, sp
   16fdc:	str	x0, [sp, #40]
   16fe0:	str	x1, [sp, #32]
   16fe4:	str	x2, [sp, #24]
   16fe8:	str	x3, [sp, #16]
   16fec:	ldr	x0, [sp, #32]
   16ff0:	ldr	x2, [sp, #16]
   16ff4:	ldr	x1, [sp, #16]
   16ff8:	cmp	x2, x0
   16ffc:	csel	x0, x1, x0, ls  // ls = plast
   17000:	str	x0, [sp, #56]
   17004:	ldr	x2, [sp, #56]
   17008:	ldr	x1, [sp, #24]
   1700c:	ldr	x0, [sp, #40]
   17010:	bl	f2e0 <grub_memcpy>
   17014:	ldr	x0, [sp, #56]
   17018:	ldp	x29, x30, [sp], #64
   1701c:	ret

0000000000017020 <ZSTD_decompressStream>:
   17020:	stp	x29, x30, [sp, #-304]!
   17024:	mov	x29, sp
   17028:	str	x0, [sp, #72]
   1702c:	str	x1, [sp, #64]
   17030:	str	x2, [sp, #56]
   17034:	ldr	x0, [sp, #56]
   17038:	ldr	x1, [x0]
   1703c:	ldr	x0, [sp, #56]
   17040:	ldr	x0, [x0, #16]
   17044:	add	x0, x1, x0
   17048:	str	x0, [sp, #264]
   1704c:	ldr	x0, [sp, #56]
   17050:	ldr	x1, [x0]
   17054:	ldr	x0, [sp, #56]
   17058:	ldr	x0, [x0, #8]
   1705c:	add	x0, x1, x0
   17060:	str	x0, [sp, #256]
   17064:	ldr	x0, [sp, #264]
   17068:	str	x0, [sp, #296]
   1706c:	ldr	x0, [sp, #64]
   17070:	ldr	x1, [x0]
   17074:	ldr	x0, [sp, #64]
   17078:	ldr	x0, [x0, #16]
   1707c:	add	x0, x1, x0
   17080:	str	x0, [sp, #248]
   17084:	ldr	x0, [sp, #64]
   17088:	ldr	x1, [x0]
   1708c:	ldr	x0, [sp, #64]
   17090:	ldr	x0, [x0, #8]
   17094:	add	x0, x1, x0
   17098:	str	x0, [sp, #240]
   1709c:	ldr	x0, [sp, #248]
   170a0:	str	x0, [sp, #288]
   170a4:	mov	w0, #0x1                   	// #1
   170a8:	str	w0, [sp, #284]
   170ac:	ldr	x0, [sp, #56]
   170b0:	ldr	x1, [x0, #16]
   170b4:	ldr	x0, [sp, #56]
   170b8:	ldr	x0, [x0, #8]
   170bc:	cmp	x1, x0
   170c0:	b.ls	170cc <ZSTD_decompressStream+0xac>  // b.plast
   170c4:	mov	x0, #0xffffffffffffffb8    	// #-72
   170c8:	b	17c68 <ZSTD_decompressStream+0xc48>
   170cc:	ldr	x0, [sp, #64]
   170d0:	ldr	x1, [x0, #16]
   170d4:	ldr	x0, [sp, #64]
   170d8:	ldr	x0, [x0, #8]
   170dc:	cmp	x1, x0
   170e0:	b.ls	17a7c <ZSTD_decompressStream+0xa5c>  // b.plast
   170e4:	mov	x0, #0xffffffffffffffba    	// #-70
   170e8:	b	17c68 <ZSTD_decompressStream+0xc48>
   170ec:	ldr	x0, [sp, #72]
   170f0:	add	x0, x0, #0x4, lsl #12
   170f4:	ldr	w0, [x0, #12656]
   170f8:	cmp	w0, #0x4
   170fc:	b.eq	17970 <ZSTD_decompressStream+0x950>  // b.none
   17100:	cmp	w0, #0x4
   17104:	b.hi	17a74 <ZSTD_decompressStream+0xa54>  // b.pmore
   17108:	cmp	w0, #0x3
   1710c:	b.eq	177b4 <ZSTD_decompressStream+0x794>  // b.none
   17110:	cmp	w0, #0x3
   17114:	b.hi	17a74 <ZSTD_decompressStream+0xa54>  // b.pmore
   17118:	cmp	w0, #0x2
   1711c:	b.eq	17670 <ZSTD_decompressStream+0x650>  // b.none
   17120:	cmp	w0, #0x2
   17124:	b.hi	17a74 <ZSTD_decompressStream+0xa54>  // b.pmore
   17128:	cmp	w0, #0x0
   1712c:	b.eq	1713c <ZSTD_decompressStream+0x11c>  // b.none
   17130:	cmp	w0, #0x1
   17134:	b.eq	17144 <ZSTD_decompressStream+0x124>  // b.none
   17138:	b	17a74 <ZSTD_decompressStream+0xa54>
   1713c:	ldr	x0, [sp, #72]
   17140:	bl	16cb0 <ZSTD_resetDStream>
   17144:	ldr	x1, [sp, #72]
   17148:	mov	x0, #0x7070                	// #28784
   1714c:	add	x4, x1, x0
   17150:	ldr	x1, [sp, #72]
   17154:	mov	x0, #0x71e0                	// #29152
   17158:	movk	x0, #0x2, lsl #16
   1715c:	add	x1, x1, x0
   17160:	ldr	x0, [sp, #72]
   17164:	ldr	x2, [x0, #29112]
   17168:	ldr	x0, [sp, #72]
   1716c:	add	x0, x0, #0x4, lsl #12
   17170:	ldr	w0, [x0, #12560]
   17174:	mov	w3, w0
   17178:	mov	x0, x4
   1717c:	bl	10248 <ZSTD_getFrameHeader_advanced>
   17180:	str	x0, [sp, #224]
   17184:	ldr	x0, [sp, #224]
   17188:	bl	f558 <ERR_isError>
   1718c:	cmp	w0, #0x0
   17190:	b.eq	1719c <ZSTD_decompressStream+0x17c>  // b.none
   17194:	ldr	x0, [sp, #224]
   17198:	b	17c68 <ZSTD_decompressStream+0xc48>
   1719c:	ldr	x0, [sp, #224]
   171a0:	cmp	x0, #0x0
   171a4:	b.eq	172ac <ZSTD_decompressStream+0x28c>  // b.none
   171a8:	ldr	x0, [sp, #72]
   171ac:	ldr	x0, [x0, #29112]
   171b0:	ldr	x1, [sp, #224]
   171b4:	sub	x0, x1, x0
   171b8:	str	x0, [sp, #160]
   171bc:	ldr	x1, [sp, #256]
   171c0:	ldr	x0, [sp, #296]
   171c4:	sub	x0, x1, x0
   171c8:	str	x0, [sp, #152]
   171cc:	ldr	x1, [sp, #160]
   171d0:	ldr	x0, [sp, #152]
   171d4:	cmp	x1, x0
   171d8:	b.ls	17264 <ZSTD_decompressStream+0x244>  // b.plast
   171dc:	ldr	x0, [sp, #152]
   171e0:	cmp	x0, #0x0
   171e4:	b.eq	17228 <ZSTD_decompressStream+0x208>  // b.none
   171e8:	ldr	x1, [sp, #72]
   171ec:	mov	x0, #0x71e0                	// #29152
   171f0:	movk	x0, #0x2, lsl #16
   171f4:	add	x1, x1, x0
   171f8:	ldr	x0, [sp, #72]
   171fc:	ldr	x0, [x0, #29112]
   17200:	add	x0, x1, x0
   17204:	ldr	x2, [sp, #152]
   17208:	ldr	x1, [sp, #296]
   1720c:	bl	f2e0 <grub_memcpy>
   17210:	ldr	x0, [sp, #72]
   17214:	ldr	x1, [x0, #29112]
   17218:	ldr	x0, [sp, #152]
   1721c:	add	x1, x1, x0
   17220:	ldr	x0, [sp, #72]
   17224:	str	x1, [x0, #29112]
   17228:	ldr	x0, [sp, #56]
   1722c:	ldr	x1, [x0, #8]
   17230:	ldr	x0, [sp, #56]
   17234:	str	x1, [x0, #16]
   17238:	mov	x0, #0x6                   	// #6
   1723c:	ldr	x2, [sp, #224]
   17240:	ldr	x1, [sp, #224]
   17244:	cmp	x2, x0
   17248:	csel	x1, x1, x0, cs  // cs = hs, nlast
   1724c:	ldr	x0, [sp, #72]
   17250:	ldr	x0, [x0, #29112]
   17254:	sub	x1, x1, x0
   17258:	mov	x0, #0x3                   	// #3
   1725c:	add	x0, x1, x0
   17260:	b	17c68 <ZSTD_decompressStream+0xc48>
   17264:	ldr	x1, [sp, #72]
   17268:	mov	x0, #0x71e0                	// #29152
   1726c:	movk	x0, #0x2, lsl #16
   17270:	add	x1, x1, x0
   17274:	ldr	x0, [sp, #72]
   17278:	ldr	x0, [x0, #29112]
   1727c:	add	x0, x1, x0
   17280:	ldr	x2, [sp, #160]
   17284:	ldr	x1, [sp, #296]
   17288:	bl	f2e0 <grub_memcpy>
   1728c:	ldr	x0, [sp, #72]
   17290:	ldr	x1, [sp, #224]
   17294:	str	x1, [x0, #29112]
   17298:	ldr	x1, [sp, #296]
   1729c:	ldr	x0, [sp, #160]
   172a0:	add	x0, x1, x0
   172a4:	str	x0, [sp, #296]
   172a8:	b	17a7c <ZSTD_decompressStream+0xa5c>
   172ac:	ldr	x0, [sp, #72]
   172b0:	ldr	x0, [x0, #28784]
   172b4:	cmp	x0, #0x0
   172b8:	b.eq	173b0 <ZSTD_decompressStream+0x390>  // b.none
   172bc:	ldr	x0, [sp, #72]
   172c0:	ldr	x0, [x0, #28792]
   172c4:	cmp	x0, #0x0
   172c8:	b.eq	173b0 <ZSTD_decompressStream+0x390>  // b.none
   172cc:	ldr	x1, [sp, #240]
   172d0:	ldr	x0, [sp, #288]
   172d4:	sub	x0, x1, x0
   172d8:	mov	x1, x0
   172dc:	ldr	x0, [sp, #72]
   172e0:	ldr	x0, [x0, #28784]
   172e4:	cmp	x1, x0
   172e8:	b.cc	173b0 <ZSTD_decompressStream+0x390>  // b.lo, b.ul, b.last
   172ec:	ldr	x1, [sp, #256]
   172f0:	ldr	x0, [sp, #264]
   172f4:	sub	x0, x1, x0
   172f8:	mov	x1, x0
   172fc:	ldr	x0, [sp, #264]
   17300:	bl	149a4 <ZSTD_findFrameCompressedSize>
   17304:	str	x0, [sp, #216]
   17308:	ldr	x1, [sp, #256]
   1730c:	ldr	x0, [sp, #264]
   17310:	sub	x0, x1, x0
   17314:	mov	x1, x0
   17318:	ldr	x0, [sp, #216]
   1731c:	cmp	x0, x1
   17320:	b.hi	173b0 <ZSTD_decompressStream+0x390>  // b.pmore
   17324:	ldr	x1, [sp, #240]
   17328:	ldr	x0, [sp, #288]
   1732c:	sub	x0, x1, x0
   17330:	mov	x1, x0
   17334:	ldr	x0, [sp, #72]
   17338:	ldr	x0, [x0, #29024]
   1733c:	mov	x5, x0
   17340:	ldr	x4, [sp, #216]
   17344:	ldr	x3, [sp, #264]
   17348:	mov	x2, x1
   1734c:	ldr	x1, [sp, #288]
   17350:	ldr	x0, [sp, #72]
   17354:	bl	16920 <ZSTD_decompress_usingDDict>
   17358:	str	x0, [sp, #208]
   1735c:	ldr	x0, [sp, #208]
   17360:	bl	f558 <ERR_isError>
   17364:	cmp	w0, #0x0
   17368:	b.eq	17374 <ZSTD_decompressStream+0x354>  // b.none
   1736c:	ldr	x0, [sp, #208]
   17370:	b	17c68 <ZSTD_decompressStream+0xc48>
   17374:	ldr	x1, [sp, #264]
   17378:	ldr	x0, [sp, #216]
   1737c:	add	x0, x1, x0
   17380:	str	x0, [sp, #296]
   17384:	ldr	x1, [sp, #288]
   17388:	ldr	x0, [sp, #208]
   1738c:	add	x0, x1, x0
   17390:	str	x0, [sp, #288]
   17394:	ldr	x0, [sp, #72]
   17398:	str	xzr, [x0, #28776]
   1739c:	ldr	x0, [sp, #72]
   173a0:	add	x0, x0, #0x4, lsl #12
   173a4:	str	wzr, [x0, #12656]
   173a8:	str	wzr, [sp, #284]
   173ac:	b	17a7c <ZSTD_decompressStream+0xa5c>
   173b0:	ldr	x0, [sp, #72]
   173b4:	ldr	x0, [x0, #29024]
   173b8:	mov	x1, x0
   173bc:	ldr	x0, [sp, #72]
   173c0:	bl	16020 <ZSTD_decompressBegin_usingDDict>
   173c4:	str	x0, [sp, #200]
   173c8:	ldr	x0, [sp, #200]
   173cc:	bl	f558 <ERR_isError>
   173d0:	cmp	w0, #0x0
   173d4:	b.eq	173e0 <ZSTD_decompressStream+0x3c0>  // b.none
   173d8:	ldr	x0, [sp, #200]
   173dc:	b	17c68 <ZSTD_decompressStream+0xc48>
   173e0:	ldr	x1, [sp, #72]
   173e4:	mov	x0, #0x71e0                	// #29152
   173e8:	movk	x0, #0x2, lsl #16
   173ec:	add	x0, x1, x0
   173f0:	bl	f448 <MEM_readLE32>
   173f4:	and	w1, w0, #0xfffffff0
   173f8:	mov	w0, #0x2a50                	// #10832
   173fc:	movk	w0, #0x184d, lsl #16
   17400:	cmp	w1, w0
   17404:	b.ne	17440 <ZSTD_decompressStream+0x420>  // b.any
   17408:	ldr	x1, [sp, #72]
   1740c:	mov	x0, #0x71e0                	// #29152
   17410:	movk	x0, #0x2, lsl #16
   17414:	add	x0, x1, x0
   17418:	add	x0, x0, #0x4
   1741c:	bl	f448 <MEM_readLE32>
   17420:	mov	w1, w0
   17424:	ldr	x0, [sp, #72]
   17428:	str	x1, [x0, #28776]
   1742c:	ldr	x0, [sp, #72]
   17430:	add	x0, x0, #0x4, lsl #12
   17434:	mov	w1, #0x7                   	// #7
   17438:	str	w1, [x0, #12452]
   1743c:	b	1749c <ZSTD_decompressStream+0x47c>
   17440:	ldr	x1, [sp, #72]
   17444:	mov	x0, #0x71e0                	// #29152
   17448:	movk	x0, #0x2, lsl #16
   1744c:	add	x1, x1, x0
   17450:	ldr	x0, [sp, #72]
   17454:	ldr	x0, [x0, #29112]
   17458:	mov	x2, x0
   1745c:	ldr	x0, [sp, #72]
   17460:	bl	108a8 <ZSTD_decodeFrameHeader>
   17464:	str	x0, [sp, #192]
   17468:	ldr	x0, [sp, #192]
   1746c:	bl	f558 <ERR_isError>
   17470:	cmp	w0, #0x0
   17474:	b.eq	17480 <ZSTD_decompressStream+0x460>  // b.none
   17478:	ldr	x0, [sp, #192]
   1747c:	b	17c68 <ZSTD_decompressStream+0xc48>
   17480:	mov	x1, #0x3                   	// #3
   17484:	ldr	x0, [sp, #72]
   17488:	str	x1, [x0, #28776]
   1748c:	ldr	x0, [sp, #72]
   17490:	add	x0, x0, #0x4, lsl #12
   17494:	mov	w1, #0x2                   	// #2
   17498:	str	w1, [x0, #12452]
   1749c:	ldr	x0, [sp, #72]
   174a0:	ldr	x0, [x0, #28792]
   174a4:	mov	x1, #0x400                 	// #1024
   174a8:	cmp	x0, #0x400
   174ac:	csel	x1, x0, x1, cs  // cs = hs, nlast
   174b0:	ldr	x0, [sp, #72]
   174b4:	str	x1, [x0, #28792]
   174b8:	ldr	x0, [sp, #72]
   174bc:	ldr	x1, [x0, #28792]
   174c0:	ldr	x0, [sp, #72]
   174c4:	ldr	x0, [x0, #29072]
   174c8:	cmp	x1, x0
   174cc:	b.ls	174d8 <ZSTD_decompressStream+0x4b8>  // b.plast
   174d0:	mov	x0, #0xfffffffffffffff0    	// #-16
   174d4:	b	17c68 <ZSTD_decompressStream+0xc48>
   174d8:	ldr	x0, [sp, #72]
   174dc:	add	x0, x0, #0x4, lsl #12
   174e0:	ldr	w0, [x0, #12416]
   174e4:	mov	w1, #0x4                   	// #4
   174e8:	cmp	w0, #0x4
   174ec:	csel	w0, w0, w1, cs  // cs = hs, nlast
   174f0:	mov	w0, w0
   174f4:	str	x0, [sp, #184]
   174f8:	ldr	x0, [sp, #72]
   174fc:	ldr	x2, [x0, #28792]
   17500:	ldr	x0, [sp, #72]
   17504:	ldr	x0, [x0, #28784]
   17508:	mov	x1, x0
   1750c:	mov	x0, x2
   17510:	bl	16e74 <ZSTD_decodingBufferSize_min>
   17514:	str	x0, [sp, #176]
   17518:	ldr	x0, [sp, #72]
   1751c:	ldr	x0, [x0, #29056]
   17520:	ldr	x1, [sp, #184]
   17524:	cmp	x1, x0
   17528:	b.hi	17540 <ZSTD_decompressStream+0x520>  // b.pmore
   1752c:	ldr	x0, [sp, #72]
   17530:	ldr	x0, [x0, #29088]
   17534:	ldr	x1, [sp, #176]
   17538:	cmp	x1, x0
   1753c:	b.ls	17660 <ZSTD_decompressStream+0x640>  // b.plast
   17540:	ldr	x1, [sp, #184]
   17544:	ldr	x0, [sp, #176]
   17548:	add	x0, x1, x0
   1754c:	str	x0, [sp, #168]
   17550:	ldr	x0, [sp, #72]
   17554:	ldr	x0, [x0, #29000]
   17558:	cmp	x0, #0x0
   1755c:	b.eq	17588 <ZSTD_decompressStream+0x568>  // b.none
   17560:	ldr	x0, [sp, #72]
   17564:	ldr	x1, [x0, #29000]
   17568:	mov	x0, #0xffffffffffff8e08    	// #-29176
   1756c:	movk	x0, #0xfffd, lsl #16
   17570:	add	x0, x1, x0
   17574:	ldr	x1, [sp, #168]
   17578:	cmp	x1, x0
   1757c:	b.ls	1762c <ZSTD_decompressStream+0x60c>  // b.plast
   17580:	mov	x0, #0xffffffffffffffc0    	// #-64
   17584:	b	17c68 <ZSTD_decompressStream+0xc48>
   17588:	ldr	x0, [sp, #72]
   1758c:	ldr	x4, [x0, #29048]
   17590:	ldr	x0, [sp, #72]
   17594:	add	x0, x0, #0x7, lsl #12
   17598:	add	x0, x0, #0x120
   1759c:	add	x2, sp, #0x10
   175a0:	mov	x3, x0
   175a4:	ldp	x0, x1, [x3]
   175a8:	stp	x0, x1, [x2]
   175ac:	ldr	x0, [x3, #16]
   175b0:	str	x0, [x2, #16]
   175b4:	add	x0, sp, #0x10
   175b8:	mov	x1, x0
   175bc:	mov	x0, x4
   175c0:	bl	f284 <ZSTD_free>
   175c4:	ldr	x0, [sp, #72]
   175c8:	str	xzr, [x0, #29056]
   175cc:	ldr	x0, [sp, #72]
   175d0:	str	xzr, [x0, #29088]
   175d4:	ldr	x0, [sp, #72]
   175d8:	add	x0, x0, #0x7, lsl #12
   175dc:	add	x0, x0, #0x120
   175e0:	add	x2, sp, #0x10
   175e4:	mov	x3, x0
   175e8:	ldp	x0, x1, [x3]
   175ec:	stp	x0, x1, [x2]
   175f0:	ldr	x0, [x3, #16]
   175f4:	str	x0, [x2, #16]
   175f8:	add	x0, sp, #0x10
   175fc:	mov	x1, x0
   17600:	ldr	x0, [sp, #168]
   17604:	bl	f1d8 <ZSTD_malloc>
   17608:	mov	x1, x0
   1760c:	ldr	x0, [sp, #72]
   17610:	str	x1, [x0, #29048]
   17614:	ldr	x0, [sp, #72]
   17618:	ldr	x0, [x0, #29048]
   1761c:	cmp	x0, #0x0
   17620:	b.ne	1762c <ZSTD_decompressStream+0x60c>  // b.any
   17624:	mov	x0, #0xffffffffffffffc0    	// #-64
   17628:	b	17c68 <ZSTD_decompressStream+0xc48>
   1762c:	ldr	x0, [sp, #72]
   17630:	ldr	x1, [sp, #184]
   17634:	str	x1, [x0, #29056]
   17638:	ldr	x0, [sp, #72]
   1763c:	ldr	x1, [x0, #29048]
   17640:	ldr	x0, [sp, #72]
   17644:	ldr	x0, [x0, #29056]
   17648:	add	x1, x1, x0
   1764c:	ldr	x0, [sp, #72]
   17650:	str	x1, [x0, #29080]
   17654:	ldr	x0, [sp, #72]
   17658:	ldr	x1, [sp, #176]
   1765c:	str	x1, [x0, #29088]
   17660:	ldr	x0, [sp, #72]
   17664:	add	x0, x0, #0x4, lsl #12
   17668:	mov	w1, #0x2                   	// #2
   1766c:	str	w1, [x0, #12656]
   17670:	ldr	x0, [sp, #72]
   17674:	bl	151f8 <ZSTD_nextSrcSizeToDecompress>
   17678:	str	x0, [sp, #144]
   1767c:	ldr	x0, [sp, #144]
   17680:	cmp	x0, #0x0
   17684:	b.ne	1769c <ZSTD_decompressStream+0x67c>  // b.any
   17688:	ldr	x0, [sp, #72]
   1768c:	add	x0, x0, #0x4, lsl #12
   17690:	str	wzr, [x0, #12656]
   17694:	str	wzr, [sp, #284]
   17698:	b	17a7c <ZSTD_decompressStream+0xa5c>
   1769c:	ldr	x1, [sp, #256]
   176a0:	ldr	x0, [sp, #296]
   176a4:	sub	x0, x1, x0
   176a8:	mov	x1, x0
   176ac:	ldr	x0, [sp, #144]
   176b0:	cmp	x0, x1
   176b4:	b.hi	1778c <ZSTD_decompressStream+0x76c>  // b.pmore
   176b8:	ldr	x0, [sp, #72]
   176bc:	bl	15298 <ZSTD_isSkipFrame>
   176c0:	str	w0, [sp, #140]
   176c4:	ldr	x0, [sp, #72]
   176c8:	ldr	x1, [x0, #29080]
   176cc:	ldr	x0, [sp, #72]
   176d0:	ldr	x0, [x0, #29096]
   176d4:	add	x5, x1, x0
   176d8:	ldr	w0, [sp, #140]
   176dc:	cmp	w0, #0x0
   176e0:	b.ne	176fc <ZSTD_decompressStream+0x6dc>  // b.any
   176e4:	ldr	x0, [sp, #72]
   176e8:	ldr	x1, [x0, #29088]
   176ec:	ldr	x0, [sp, #72]
   176f0:	ldr	x0, [x0, #29096]
   176f4:	sub	x0, x1, x0
   176f8:	b	17700 <ZSTD_decompressStream+0x6e0>
   176fc:	mov	x0, #0x0                   	// #0
   17700:	ldr	x4, [sp, #144]
   17704:	ldr	x3, [sp, #296]
   17708:	mov	x2, x0
   1770c:	mov	x1, x5
   17710:	ldr	x0, [sp, #72]
   17714:	bl	152c0 <ZSTD_decompressContinue>
   17718:	str	x0, [sp, #128]
   1771c:	ldr	x0, [sp, #128]
   17720:	bl	f558 <ERR_isError>
   17724:	cmp	w0, #0x0
   17728:	b.eq	17734 <ZSTD_decompressStream+0x714>  // b.none
   1772c:	ldr	x0, [sp, #128]
   17730:	b	17c68 <ZSTD_decompressStream+0xc48>
   17734:	ldr	x1, [sp, #296]
   17738:	ldr	x0, [sp, #144]
   1773c:	add	x0, x1, x0
   17740:	str	x0, [sp, #296]
   17744:	ldr	x0, [sp, #128]
   17748:	cmp	x0, #0x0
   1774c:	b.ne	17760 <ZSTD_decompressStream+0x740>  // b.any
   17750:	ldr	w0, [sp, #140]
   17754:	cmp	w0, #0x0
   17758:	b.ne	17760 <ZSTD_decompressStream+0x740>  // b.any
   1775c:	b	17a7c <ZSTD_decompressStream+0xa5c>
   17760:	ldr	x0, [sp, #72]
   17764:	ldr	x1, [x0, #29096]
   17768:	ldr	x0, [sp, #128]
   1776c:	add	x1, x1, x0
   17770:	ldr	x0, [sp, #72]
   17774:	str	x1, [x0, #29104]
   17778:	ldr	x0, [sp, #72]
   1777c:	add	x0, x0, #0x4, lsl #12
   17780:	mov	w1, #0x4                   	// #4
   17784:	str	w1, [x0, #12656]
   17788:	b	17a7c <ZSTD_decompressStream+0xa5c>
   1778c:	ldr	x1, [sp, #296]
   17790:	ldr	x0, [sp, #256]
   17794:	cmp	x1, x0
   17798:	b.ne	177a4 <ZSTD_decompressStream+0x784>  // b.any
   1779c:	str	wzr, [sp, #284]
   177a0:	b	17a7c <ZSTD_decompressStream+0xa5c>
   177a4:	ldr	x0, [sp, #72]
   177a8:	add	x0, x0, #0x4, lsl #12
   177ac:	mov	w1, #0x3                   	// #3
   177b0:	str	w1, [x0, #12656]
   177b4:	ldr	x0, [sp, #72]
   177b8:	bl	151f8 <ZSTD_nextSrcSizeToDecompress>
   177bc:	str	x0, [sp, #120]
   177c0:	ldr	x0, [sp, #72]
   177c4:	ldr	x0, [x0, #29064]
   177c8:	ldr	x1, [sp, #120]
   177cc:	sub	x0, x1, x0
   177d0:	str	x0, [sp, #112]
   177d4:	ldr	x0, [sp, #72]
   177d8:	bl	15298 <ZSTD_isSkipFrame>
   177dc:	str	w0, [sp, #108]
   177e0:	ldr	w0, [sp, #108]
   177e4:	cmp	w0, #0x0
   177e8:	b.eq	17810 <ZSTD_decompressStream+0x7f0>  // b.none
   177ec:	ldr	x1, [sp, #256]
   177f0:	ldr	x0, [sp, #296]
   177f4:	sub	x0, x1, x0
   177f8:	ldr	x2, [sp, #112]
   177fc:	ldr	x1, [sp, #112]
   17800:	cmp	x2, x0
   17804:	csel	x0, x1, x0, ls  // ls = plast
   17808:	str	x0, [sp, #272]
   1780c:	b	17870 <ZSTD_decompressStream+0x850>
   17810:	ldr	x0, [sp, #72]
   17814:	ldr	x1, [x0, #29056]
   17818:	ldr	x0, [sp, #72]
   1781c:	ldr	x0, [x0, #29064]
   17820:	sub	x0, x1, x0
   17824:	ldr	x1, [sp, #112]
   17828:	cmp	x1, x0
   1782c:	b.ls	17838 <ZSTD_decompressStream+0x818>  // b.plast
   17830:	mov	x0, #0xffffffffffffffec    	// #-20
   17834:	b	17c68 <ZSTD_decompressStream+0xc48>
   17838:	ldr	x0, [sp, #72]
   1783c:	ldr	x1, [x0, #29048]
   17840:	ldr	x0, [sp, #72]
   17844:	ldr	x0, [x0, #29064]
   17848:	add	x4, x1, x0
   1784c:	ldr	x1, [sp, #256]
   17850:	ldr	x0, [sp, #296]
   17854:	sub	x0, x1, x0
   17858:	mov	x3, x0
   1785c:	ldr	x2, [sp, #296]
   17860:	ldr	x1, [sp, #112]
   17864:	mov	x0, x4
   17868:	bl	16fd4 <ZSTD_limitCopy>
   1786c:	str	x0, [sp, #272]
   17870:	ldr	x1, [sp, #296]
   17874:	ldr	x0, [sp, #272]
   17878:	add	x0, x1, x0
   1787c:	str	x0, [sp, #296]
   17880:	ldr	x0, [sp, #72]
   17884:	ldr	x1, [x0, #29064]
   17888:	ldr	x0, [sp, #272]
   1788c:	add	x1, x1, x0
   17890:	ldr	x0, [sp, #72]
   17894:	str	x1, [x0, #29064]
   17898:	ldr	x1, [sp, #272]
   1789c:	ldr	x0, [sp, #112]
   178a0:	cmp	x1, x0
   178a4:	b.cs	178b0 <ZSTD_decompressStream+0x890>  // b.hs, b.nlast
   178a8:	str	wzr, [sp, #284]
   178ac:	b	17a7c <ZSTD_decompressStream+0xa5c>
   178b0:	ldr	x0, [sp, #72]
   178b4:	ldr	x1, [x0, #29080]
   178b8:	ldr	x0, [sp, #72]
   178bc:	ldr	x0, [x0, #29096]
   178c0:	add	x5, x1, x0
   178c4:	ldr	x0, [sp, #72]
   178c8:	ldr	x1, [x0, #29088]
   178cc:	ldr	x0, [sp, #72]
   178d0:	ldr	x0, [x0, #29096]
   178d4:	sub	x1, x1, x0
   178d8:	ldr	x0, [sp, #72]
   178dc:	ldr	x0, [x0, #29048]
   178e0:	ldr	x4, [sp, #120]
   178e4:	mov	x3, x0
   178e8:	mov	x2, x1
   178ec:	mov	x1, x5
   178f0:	ldr	x0, [sp, #72]
   178f4:	bl	152c0 <ZSTD_decompressContinue>
   178f8:	str	x0, [sp, #96]
   178fc:	ldr	x0, [sp, #96]
   17900:	bl	f558 <ERR_isError>
   17904:	cmp	w0, #0x0
   17908:	b.eq	17914 <ZSTD_decompressStream+0x8f4>  // b.none
   1790c:	ldr	x0, [sp, #96]
   17910:	b	17c68 <ZSTD_decompressStream+0xc48>
   17914:	ldr	x0, [sp, #72]
   17918:	str	xzr, [x0, #29064]
   1791c:	ldr	x0, [sp, #96]
   17920:	cmp	x0, #0x0
   17924:	b.ne	17948 <ZSTD_decompressStream+0x928>  // b.any
   17928:	ldr	w0, [sp, #108]
   1792c:	cmp	w0, #0x0
   17930:	b.ne	17948 <ZSTD_decompressStream+0x928>  // b.any
   17934:	ldr	x0, [sp, #72]
   17938:	add	x0, x0, #0x4, lsl #12
   1793c:	mov	w1, #0x2                   	// #2
   17940:	str	w1, [x0, #12656]
   17944:	b	17a7c <ZSTD_decompressStream+0xa5c>
   17948:	ldr	x0, [sp, #72]
   1794c:	ldr	x1, [x0, #29096]
   17950:	ldr	x0, [sp, #96]
   17954:	add	x1, x1, x0
   17958:	ldr	x0, [sp, #72]
   1795c:	str	x1, [x0, #29104]
   17960:	ldr	x0, [sp, #72]
   17964:	add	x0, x0, #0x4, lsl #12
   17968:	mov	w1, #0x4                   	// #4
   1796c:	str	w1, [x0, #12656]
   17970:	ldr	x0, [sp, #72]
   17974:	ldr	x1, [x0, #29104]
   17978:	ldr	x0, [sp, #72]
   1797c:	ldr	x0, [x0, #29096]
   17980:	sub	x0, x1, x0
   17984:	str	x0, [sp, #88]
   17988:	ldr	x1, [sp, #240]
   1798c:	ldr	x0, [sp, #288]
   17990:	sub	x0, x1, x0
   17994:	mov	x4, x0
   17998:	ldr	x0, [sp, #72]
   1799c:	ldr	x1, [x0, #29080]
   179a0:	ldr	x0, [sp, #72]
   179a4:	ldr	x0, [x0, #29096]
   179a8:	add	x0, x1, x0
   179ac:	ldr	x3, [sp, #88]
   179b0:	mov	x2, x0
   179b4:	mov	x1, x4
   179b8:	ldr	x0, [sp, #288]
   179bc:	bl	16fd4 <ZSTD_limitCopy>
   179c0:	str	x0, [sp, #80]
   179c4:	ldr	x1, [sp, #288]
   179c8:	ldr	x0, [sp, #80]
   179cc:	add	x0, x1, x0
   179d0:	str	x0, [sp, #288]
   179d4:	ldr	x0, [sp, #72]
   179d8:	ldr	x1, [x0, #29096]
   179dc:	ldr	x0, [sp, #80]
   179e0:	add	x1, x1, x0
   179e4:	ldr	x0, [sp, #72]
   179e8:	str	x1, [x0, #29096]
   179ec:	ldr	x1, [sp, #80]
   179f0:	ldr	x0, [sp, #88]
   179f4:	cmp	x1, x0
   179f8:	b.ne	17a6c <ZSTD_decompressStream+0xa4c>  // b.any
   179fc:	ldr	x0, [sp, #72]
   17a00:	add	x0, x0, #0x4, lsl #12
   17a04:	mov	w1, #0x2                   	// #2
   17a08:	str	w1, [x0, #12656]
   17a0c:	ldr	x0, [sp, #72]
   17a10:	ldr	x1, [x0, #29088]
   17a14:	ldr	x0, [sp, #72]
   17a18:	ldr	x0, [x0, #28784]
   17a1c:	cmp	x1, x0
   17a20:	b.cs	17a7c <ZSTD_decompressStream+0xa5c>  // b.hs, b.nlast
   17a24:	ldr	x0, [sp, #72]
   17a28:	ldr	x1, [x0, #29096]
   17a2c:	ldr	x0, [sp, #72]
   17a30:	add	x0, x0, #0x4, lsl #12
   17a34:	ldr	w0, [x0, #12416]
   17a38:	mov	w0, w0
   17a3c:	add	x1, x1, x0
   17a40:	ldr	x0, [sp, #72]
   17a44:	ldr	x0, [x0, #29088]
   17a48:	cmp	x1, x0
   17a4c:	b.ls	17a7c <ZSTD_decompressStream+0xa5c>  // b.plast
   17a50:	ldr	x0, [sp, #72]
   17a54:	str	xzr, [x0, #29104]
   17a58:	ldr	x0, [sp, #72]
   17a5c:	ldr	x1, [x0, #29104]
   17a60:	ldr	x0, [sp, #72]
   17a64:	str	x1, [x0, #29096]
   17a68:	b	17a7c <ZSTD_decompressStream+0xa5c>
   17a6c:	str	wzr, [sp, #284]
   17a70:	b	17a7c <ZSTD_decompressStream+0xa5c>
   17a74:	mov	x0, #0xffffffffffffffff    	// #-1
   17a78:	b	17c68 <ZSTD_decompressStream+0xc48>
   17a7c:	ldr	w0, [sp, #284]
   17a80:	cmp	w0, #0x0
   17a84:	b.ne	170ec <ZSTD_decompressStream+0xcc>  // b.any
   17a88:	ldr	x0, [sp, #56]
   17a8c:	ldr	x0, [x0]
   17a90:	ldr	x1, [sp, #296]
   17a94:	sub	x0, x1, x0
   17a98:	mov	x1, x0
   17a9c:	ldr	x0, [sp, #56]
   17aa0:	str	x1, [x0, #16]
   17aa4:	ldr	x0, [sp, #64]
   17aa8:	ldr	x0, [x0]
   17aac:	ldr	x1, [sp, #288]
   17ab0:	sub	x0, x1, x0
   17ab4:	mov	x1, x0
   17ab8:	ldr	x0, [sp, #64]
   17abc:	str	x1, [x0, #16]
   17ac0:	ldr	x1, [sp, #296]
   17ac4:	ldr	x0, [sp, #264]
   17ac8:	cmp	x1, x0
   17acc:	b.ne	17b40 <ZSTD_decompressStream+0xb20>  // b.any
   17ad0:	ldr	x1, [sp, #288]
   17ad4:	ldr	x0, [sp, #248]
   17ad8:	cmp	x1, x0
   17adc:	b.ne	17b40 <ZSTD_decompressStream+0xb20>  // b.any
   17ae0:	ldr	x0, [sp, #72]
   17ae4:	add	x0, x0, #0x4, lsl #12
   17ae8:	ldr	w0, [x0, #12756]
   17aec:	add	w1, w0, #0x1
   17af0:	ldr	x0, [sp, #72]
   17af4:	add	x0, x0, #0x4, lsl #12
   17af8:	str	w1, [x0, #12756]
   17afc:	ldr	x0, [sp, #72]
   17b00:	add	x0, x0, #0x4, lsl #12
   17b04:	ldr	w0, [x0, #12756]
   17b08:	cmp	w0, #0xf
   17b0c:	b.le	17b50 <ZSTD_decompressStream+0xb30>
   17b10:	ldr	x1, [sp, #288]
   17b14:	ldr	x0, [sp, #240]
   17b18:	cmp	x1, x0
   17b1c:	b.ne	17b28 <ZSTD_decompressStream+0xb08>  // b.any
   17b20:	mov	x0, #0xffffffffffffffba    	// #-70
   17b24:	b	17c68 <ZSTD_decompressStream+0xc48>
   17b28:	ldr	x1, [sp, #296]
   17b2c:	ldr	x0, [sp, #256]
   17b30:	cmp	x1, x0
   17b34:	b.ne	17b50 <ZSTD_decompressStream+0xb30>  // b.any
   17b38:	mov	x0, #0xffffffffffffffb8    	// #-72
   17b3c:	b	17c68 <ZSTD_decompressStream+0xc48>
   17b40:	ldr	x0, [sp, #72]
   17b44:	add	x0, x0, #0x4, lsl #12
   17b48:	str	wzr, [x0, #12756]
   17b4c:	b	17b54 <ZSTD_decompressStream+0xb34>
   17b50:	nop
   17b54:	ldr	x0, [sp, #72]
   17b58:	bl	151f8 <ZSTD_nextSrcSizeToDecompress>
   17b5c:	str	x0, [sp, #232]
   17b60:	ldr	x0, [sp, #232]
   17b64:	cmp	x0, #0x0
   17b68:	b.ne	17c24 <ZSTD_decompressStream+0xc04>  // b.any
   17b6c:	ldr	x0, [sp, #72]
   17b70:	ldr	x1, [x0, #29104]
   17b74:	ldr	x0, [sp, #72]
   17b78:	ldr	x0, [x0, #29096]
   17b7c:	cmp	x1, x0
   17b80:	b.ne	17be4 <ZSTD_decompressStream+0xbc4>  // b.any
   17b84:	ldr	x0, [sp, #72]
   17b88:	add	x0, x0, #0x4, lsl #12
   17b8c:	ldr	w0, [x0, #12752]
   17b90:	cmp	w0, #0x0
   17b94:	b.eq	17bdc <ZSTD_decompressStream+0xbbc>  // b.none
   17b98:	ldr	x0, [sp, #56]
   17b9c:	ldr	x1, [x0, #16]
   17ba0:	ldr	x0, [sp, #56]
   17ba4:	ldr	x0, [x0, #8]
   17ba8:	cmp	x1, x0
   17bac:	b.cc	17bc8 <ZSTD_decompressStream+0xba8>  // b.lo, b.ul, b.last
   17bb0:	ldr	x0, [sp, #72]
   17bb4:	add	x0, x0, #0x4, lsl #12
   17bb8:	mov	w1, #0x2                   	// #2
   17bbc:	str	w1, [x0, #12656]
   17bc0:	mov	x0, #0x1                   	// #1
   17bc4:	b	17c68 <ZSTD_decompressStream+0xc48>
   17bc8:	ldr	x0, [sp, #56]
   17bcc:	ldr	x0, [x0, #16]
   17bd0:	add	x1, x0, #0x1
   17bd4:	ldr	x0, [sp, #56]
   17bd8:	str	x1, [x0, #16]
   17bdc:	mov	x0, #0x0                   	// #0
   17be0:	b	17c68 <ZSTD_decompressStream+0xc48>
   17be4:	ldr	x0, [sp, #72]
   17be8:	add	x0, x0, #0x4, lsl #12
   17bec:	ldr	w0, [x0, #12752]
   17bf0:	cmp	w0, #0x0
   17bf4:	b.ne	17c1c <ZSTD_decompressStream+0xbfc>  // b.any
   17bf8:	ldr	x0, [sp, #56]
   17bfc:	ldr	x0, [x0, #16]
   17c00:	sub	x1, x0, #0x1
   17c04:	ldr	x0, [sp, #56]
   17c08:	str	x1, [x0, #16]
   17c0c:	ldr	x0, [sp, #72]
   17c10:	add	x0, x0, #0x4, lsl #12
   17c14:	mov	w1, #0x1                   	// #1
   17c18:	str	w1, [x0, #12752]
   17c1c:	mov	x0, #0x1                   	// #1
   17c20:	b	17c68 <ZSTD_decompressStream+0xc48>
   17c24:	ldr	x0, [sp, #72]
   17c28:	bl	15210 <ZSTD_nextInputType>
   17c2c:	cmp	w0, #0x2
   17c30:	cset	w0, eq  // eq = none
   17c34:	and	w0, w0, #0xff
   17c38:	and	x1, x0, #0xff
   17c3c:	mov	x0, #0x3                   	// #3
   17c40:	mul	x0, x1, x0
   17c44:	ldr	x1, [sp, #232]
   17c48:	add	x0, x1, x0
   17c4c:	str	x0, [sp, #232]
   17c50:	ldr	x0, [sp, #72]
   17c54:	ldr	x0, [x0, #29064]
   17c58:	ldr	x1, [sp, #232]
   17c5c:	sub	x0, x1, x0
   17c60:	str	x0, [sp, #232]
   17c64:	ldr	x0, [sp, #232]
   17c68:	ldp	x29, x30, [sp], #304
   17c6c:	ret

0000000000017c70 <ZSTD_decompress_generic>:
   17c70:	stp	x29, x30, [sp, #-48]!
   17c74:	mov	x29, sp
   17c78:	str	x0, [sp, #40]
   17c7c:	str	x1, [sp, #32]
   17c80:	str	x2, [sp, #24]
   17c84:	ldr	x2, [sp, #24]
   17c88:	ldr	x1, [sp, #32]
   17c8c:	ldr	x0, [sp, #40]
   17c90:	bl	17020 <ZSTD_decompressStream>
   17c94:	ldp	x29, x30, [sp], #48
   17c98:	ret

0000000000017c9c <ZSTD_decompress_generic_simpleArgs>:
   17c9c:	stp	x29, x30, [sp, #-144]!
   17ca0:	mov	x29, sp
   17ca4:	str	x0, [sp, #72]
   17ca8:	str	x1, [sp, #64]
   17cac:	str	x2, [sp, #56]
   17cb0:	str	x3, [sp, #48]
   17cb4:	str	x4, [sp, #40]
   17cb8:	str	x5, [sp, #32]
   17cbc:	str	x6, [sp, #24]
   17cc0:	ldr	x0, [sp, #64]
   17cc4:	str	x0, [sp, #112]
   17cc8:	ldr	x0, [sp, #56]
   17ccc:	str	x0, [sp, #120]
   17cd0:	ldr	x0, [sp, #48]
   17cd4:	ldr	x0, [x0]
   17cd8:	str	x0, [sp, #128]
   17cdc:	ldr	x0, [sp, #40]
   17ce0:	str	x0, [sp, #88]
   17ce4:	ldr	x0, [sp, #32]
   17ce8:	str	x0, [sp, #96]
   17cec:	ldr	x0, [sp, #24]
   17cf0:	ldr	x0, [x0]
   17cf4:	str	x0, [sp, #104]
   17cf8:	add	x1, sp, #0x58
   17cfc:	add	x0, sp, #0x70
   17d00:	mov	x2, x1
   17d04:	mov	x1, x0
   17d08:	ldr	x0, [sp, #72]
   17d0c:	bl	17c70 <ZSTD_decompress_generic>
   17d10:	str	x0, [sp, #136]
   17d14:	ldr	x1, [sp, #128]
   17d18:	ldr	x0, [sp, #48]
   17d1c:	str	x1, [x0]
   17d20:	ldr	x1, [sp, #104]
   17d24:	ldr	x0, [sp, #24]
   17d28:	str	x1, [x0]
   17d2c:	ldr	x0, [sp, #136]
   17d30:	ldp	x29, x30, [sp], #144
   17d34:	ret

0000000000017d38 <ZSTD_DCtx_reset>:
   17d38:	stp	x29, x30, [sp, #-32]!
   17d3c:	mov	x29, sp
   17d40:	str	x0, [sp, #24]
   17d44:	ldr	x0, [sp, #24]
   17d48:	bl	16c58 <ZSTD_initDStream>
   17d4c:	ldr	x0, [sp, #24]
   17d50:	add	x0, x0, #0x4, lsl #12
   17d54:	str	wzr, [x0, #12560]
   17d58:	ldr	x0, [sp, #24]
   17d5c:	mov	x1, #0x1                   	// #1
   17d60:	movk	x1, #0x800, lsl #16
   17d64:	str	x1, [x0, #29072]
   17d68:	nop
   17d6c:	ldp	x29, x30, [sp], #32
   17d70:	ret
