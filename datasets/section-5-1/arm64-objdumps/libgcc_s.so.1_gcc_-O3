
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libgcc_s.so.1_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000002a68 <.init>:
    2a68:	stp	x29, x30, [sp, #-16]!
    2a6c:	mov	x29, sp
    2a70:	bl	2db0 <_Unwind_GetDataRelBase@plt+0x10>
    2a74:	ldp	x29, x30, [sp], #16
    2a78:	ret

Disassembly of section .plt:

0000000000002a80 <memcpy@plt-0x20>:
    2a80:	stp	x16, x30, [sp, #-16]!
    2a84:	adrp	x16, 23000 <__emutls_register_common@@GCC_4.3.0+0x11c90>
    2a88:	ldr	x17, [x16, #4088]
    2a8c:	add	x16, x16, #0xff8
    2a90:	br	x17
    2a94:	nop
    2a98:	nop
    2a9c:	nop

0000000000002aa0 <memcpy@plt>:
    2aa0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2aa4:	ldr	x17, [x16]
    2aa8:	add	x16, x16, #0x0
    2aac:	br	x17

0000000000002ab0 <_Unwind_GetRegionStart@plt>:
    2ab0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ab4:	ldr	x17, [x16, #8]
    2ab8:	add	x16, x16, #0x8
    2abc:	br	x17

0000000000002ac0 <strlen@plt>:
    2ac0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ac4:	ldr	x17, [x16, #16]
    2ac8:	add	x16, x16, #0x10
    2acc:	br	x17

0000000000002ad0 <_Unwind_RaiseException@plt>:
    2ad0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ad4:	ldr	x17, [x16, #24]
    2ad8:	add	x16, x16, #0x18
    2adc:	br	x17

0000000000002ae0 <_Unwind_SetIP@plt>:
    2ae0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ae4:	ldr	x17, [x16, #32]
    2ae8:	add	x16, x16, #0x20
    2aec:	br	x17

0000000000002af0 <_Unwind_GetLanguageSpecificData@plt>:
    2af0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2af4:	ldr	x17, [x16, #40]
    2af8:	add	x16, x16, #0x28
    2afc:	br	x17

0000000000002b00 <__floatunditf@plt>:
    2b00:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b04:	ldr	x17, [x16, #48]
    2b08:	add	x16, x16, #0x30
    2b0c:	br	x17

0000000000002b10 <__multf3@plt>:
    2b10:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b14:	ldr	x17, [x16, #56]
    2b18:	add	x16, x16, #0x38
    2b1c:	br	x17

0000000000002b20 <__cxa_finalize@plt>:
    2b20:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b24:	ldr	x17, [x16, #64]
    2b28:	add	x16, x16, #0x40
    2b2c:	br	x17

0000000000002b30 <__eqtf2@plt>:
    2b30:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b34:	ldr	x17, [x16, #72]
    2b38:	add	x16, x16, #0x48
    2b3c:	br	x17

0000000000002b40 <__floatditf@plt>:
    2b40:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b44:	ldr	x17, [x16, #80]
    2b48:	add	x16, x16, #0x50
    2b4c:	br	x17

0000000000002b50 <_Unwind_GetTextRelBase@plt>:
    2b50:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b54:	ldr	x17, [x16, #88]
    2b58:	add	x16, x16, #0x58
    2b5c:	br	x17

0000000000002b60 <__deregister_frame_info_bases@plt>:
    2b60:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b64:	ldr	x17, [x16, #96]
    2b68:	add	x16, x16, #0x60
    2b6c:	br	x17

0000000000002b70 <malloc@plt>:
    2b70:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b74:	ldr	x17, [x16, #104]
    2b78:	add	x16, x16, #0x68
    2b7c:	br	x17

0000000000002b80 <pthread_getspecific@plt>:
    2b80:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b84:	ldr	x17, [x16, #112]
    2b88:	add	x16, x16, #0x70
    2b8c:	br	x17

0000000000002b90 <_Unwind_GetCFA@plt>:
    2b90:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2b94:	ldr	x17, [x16, #120]
    2b98:	add	x16, x16, #0x78
    2b9c:	br	x17

0000000000002ba0 <memset@plt>:
    2ba0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ba4:	ldr	x17, [x16, #128]
    2ba8:	add	x16, x16, #0x80
    2bac:	br	x17

0000000000002bb0 <__fixunssfti@plt>:
    2bb0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2bb4:	ldr	x17, [x16, #136]
    2bb8:	add	x16, x16, #0x88
    2bbc:	br	x17

0000000000002bc0 <__letf2@plt>:
    2bc0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2bc4:	ldr	x17, [x16, #144]
    2bc8:	add	x16, x16, #0x90
    2bcc:	br	x17

0000000000002bd0 <__register_frame_info_table_bases@plt>:
    2bd0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2bd4:	ldr	x17, [x16, #152]
    2bd8:	add	x16, x16, #0x98
    2bdc:	br	x17

0000000000002be0 <calloc@plt>:
    2be0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2be4:	ldr	x17, [x16, #160]
    2be8:	add	x16, x16, #0xa0
    2bec:	br	x17

0000000000002bf0 <__gttf2@plt>:
    2bf0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2bf4:	ldr	x17, [x16, #168]
    2bf8:	add	x16, x16, #0xa8
    2bfc:	br	x17

0000000000002c00 <_Unwind_GetIPInfo@plt>:
    2c00:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c04:	ldr	x17, [x16, #176]
    2c08:	add	x16, x16, #0xb0
    2c0c:	br	x17

0000000000002c10 <realloc@plt>:
    2c10:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c14:	ldr	x17, [x16, #184]
    2c18:	add	x16, x16, #0xb8
    2c1c:	br	x17

0000000000002c20 <__addtf3@plt>:
    2c20:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c24:	ldr	x17, [x16, #192]
    2c28:	add	x16, x16, #0xc0
    2c2c:	br	x17

0000000000002c30 <pthread_key_create@plt>:
    2c30:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c34:	ldr	x17, [x16, #200]
    2c38:	add	x16, x16, #0xc8
    2c3c:	br	x17

0000000000002c40 <__gmon_start__@plt>:
    2c40:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c44:	ldr	x17, [x16, #208]
    2c48:	add	x16, x16, #0xd0
    2c4c:	br	x17

0000000000002c50 <abort@plt>:
    2c50:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c54:	ldr	x17, [x16, #216]
    2c58:	add	x16, x16, #0xd8
    2c5c:	br	x17

0000000000002c60 <__divtf3@plt>:
    2c60:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c64:	ldr	x17, [x16, #224]
    2c68:	add	x16, x16, #0xe0
    2c6c:	br	x17

0000000000002c70 <pthread_once@plt>:
    2c70:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c74:	ldr	x17, [x16, #232]
    2c78:	add	x16, x16, #0xe8
    2c7c:	br	x17

0000000000002c80 <dl_iterate_phdr@plt>:
    2c80:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c84:	ldr	x17, [x16, #240]
    2c88:	add	x16, x16, #0xf0
    2c8c:	br	x17

0000000000002c90 <__trunctfdf2@plt>:
    2c90:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2c94:	ldr	x17, [x16, #248]
    2c98:	add	x16, x16, #0xf8
    2c9c:	br	x17

0000000000002ca0 <pthread_setspecific@plt>:
    2ca0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ca4:	ldr	x17, [x16, #256]
    2ca8:	add	x16, x16, #0x100
    2cac:	br	x17

0000000000002cb0 <_Unwind_Find_FDE@plt>:
    2cb0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2cb4:	ldr	x17, [x16, #264]
    2cb8:	add	x16, x16, #0x108
    2cbc:	br	x17

0000000000002cc0 <free@plt>:
    2cc0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2cc4:	ldr	x17, [x16, #272]
    2cc8:	add	x16, x16, #0x110
    2ccc:	br	x17

0000000000002cd0 <__register_frame_info_table@plt>:
    2cd0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2cd4:	ldr	x17, [x16, #280]
    2cd8:	add	x16, x16, #0x118
    2cdc:	br	x17

0000000000002ce0 <__deregister_frame_info@plt>:
    2ce0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2ce4:	ldr	x17, [x16, #288]
    2ce8:	add	x16, x16, #0x120
    2cec:	br	x17

0000000000002cf0 <__lttf2@plt>:
    2cf0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2cf4:	ldr	x17, [x16, #296]
    2cf8:	add	x16, x16, #0x128
    2cfc:	br	x17

0000000000002d00 <__register_frame_info@plt>:
    2d00:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d04:	ldr	x17, [x16, #304]
    2d08:	add	x16, x16, #0x130
    2d0c:	br	x17

0000000000002d10 <__register_frame_info_bases@plt>:
    2d10:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d14:	ldr	x17, [x16, #312]
    2d18:	add	x16, x16, #0x138
    2d1c:	br	x17

0000000000002d20 <__fixunsdfti@plt>:
    2d20:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d24:	ldr	x17, [x16, #320]
    2d28:	add	x16, x16, #0x140
    2d2c:	br	x17

0000000000002d30 <__unordtf2@plt>:
    2d30:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d34:	ldr	x17, [x16, #328]
    2d38:	add	x16, x16, #0x148
    2d3c:	br	x17

0000000000002d40 <_Unwind_SetGR@plt>:
    2d40:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d44:	ldr	x17, [x16, #336]
    2d48:	add	x16, x16, #0x150
    2d4c:	br	x17

0000000000002d50 <pthread_mutex_lock@plt>:
    2d50:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d54:	ldr	x17, [x16, #344]
    2d58:	add	x16, x16, #0x158
    2d5c:	br	x17

0000000000002d60 <pthread_mutex_unlock@plt>:
    2d60:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d64:	ldr	x17, [x16, #352]
    2d68:	add	x16, x16, #0x160
    2d6c:	br	x17

0000000000002d70 <__floatsitf@plt>:
    2d70:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d74:	ldr	x17, [x16, #360]
    2d78:	add	x16, x16, #0x168
    2d7c:	br	x17

0000000000002d80 <__subtf3@plt>:
    2d80:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d84:	ldr	x17, [x16, #368]
    2d88:	add	x16, x16, #0x170
    2d8c:	br	x17

0000000000002d90 <__trunctfsf2@plt>:
    2d90:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2d94:	ldr	x17, [x16, #376]
    2d98:	add	x16, x16, #0x178
    2d9c:	br	x17

0000000000002da0 <_Unwind_GetDataRelBase@plt>:
    2da0:	adrp	x16, 24000 <memcpy@GLIBC_2.17>
    2da4:	ldr	x17, [x16, #384]
    2da8:	add	x16, x16, #0x180
    2dac:	br	x17

Disassembly of section .text:

0000000000002db0 <__multi3@@GCC_3.0-0xd8>:
    2db0:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x11c90>
    2db4:	ldr	x0, [x0, #4056]
    2db8:	cbz	x0, 2dc0 <_Unwind_GetDataRelBase@plt+0x20>
    2dbc:	b	2c40 <__gmon_start__@plt>
    2dc0:	ret
    2dc4:	nop
    2dc8:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    2dcc:	add	x0, x0, #0x198
    2dd0:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    2dd4:	add	x1, x1, #0x198
    2dd8:	cmp	x1, x0
    2ddc:	b.eq	2df4 <_Unwind_GetDataRelBase@plt+0x54>  // b.none
    2de0:	adrp	x1, 23000 <__emutls_register_common@@GCC_4.3.0+0x11c90>
    2de4:	ldr	x1, [x1, #4040]
    2de8:	cbz	x1, 2df4 <_Unwind_GetDataRelBase@plt+0x54>
    2dec:	mov	x16, x1
    2df0:	br	x16
    2df4:	ret
    2df8:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    2dfc:	add	x0, x0, #0x198
    2e00:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    2e04:	add	x1, x1, #0x198
    2e08:	sub	x1, x1, x0
    2e0c:	lsr	x2, x1, #63
    2e10:	add	x1, x2, x1, asr #3
    2e14:	cmp	xzr, x1, asr #1
    2e18:	asr	x1, x1, #1
    2e1c:	b.eq	2e34 <_Unwind_GetDataRelBase@plt+0x94>  // b.none
    2e20:	adrp	x2, 23000 <__emutls_register_common@@GCC_4.3.0+0x11c90>
    2e24:	ldr	x2, [x2, #4064]
    2e28:	cbz	x2, 2e34 <_Unwind_GetDataRelBase@plt+0x94>
    2e2c:	mov	x16, x2
    2e30:	br	x16
    2e34:	ret
    2e38:	stp	x29, x30, [sp, #-32]!
    2e3c:	mov	x29, sp
    2e40:	str	x19, [sp, #16]
    2e44:	adrp	x19, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    2e48:	ldrb	w0, [x19, #416]
    2e4c:	cbnz	w0, 2e74 <_Unwind_GetDataRelBase@plt+0xd4>
    2e50:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x11c90>
    2e54:	ldr	x0, [x0, #4048]
    2e58:	cbz	x0, 2e68 <_Unwind_GetDataRelBase@plt+0xc8>
    2e5c:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    2e60:	ldr	x0, [x0, #392]
    2e64:	bl	2b20 <__cxa_finalize@plt>
    2e68:	bl	2dc8 <_Unwind_GetDataRelBase@plt+0x28>
    2e6c:	mov	w0, #0x1                   	// #1
    2e70:	strb	w0, [x19, #416]
    2e74:	ldr	x19, [sp, #16]
    2e78:	ldp	x29, x30, [sp], #32
    2e7c:	ret
    2e80:	b	2df8 <_Unwind_GetDataRelBase@plt+0x58>
    2e84:	nop

0000000000002e88 <__multi3@@GCC_3.0>:
    2e88:	mov	x5, x0
    2e8c:	and	x0, x2, #0xffffffff
    2e90:	and	x7, x5, #0xffffffff
    2e94:	lsr	x9, x2, #32
    2e98:	lsr	x6, x5, #32
    2e9c:	mov	x8, #0x100000000           	// #4294967296
    2ea0:	mul	x4, x7, x0
    2ea4:	mul	x0, x6, x0
    2ea8:	madd	x7, x7, x9, x0
    2eac:	and	x10, x4, #0xffffffff
    2eb0:	mul	x6, x6, x9
    2eb4:	add	x4, x7, x4, lsr #32
    2eb8:	add	x8, x6, x8
    2ebc:	cmp	x0, x4
    2ec0:	csel	x6, x8, x6, hi  // hi = pmore
    2ec4:	add	x0, x10, x4, lsl #32
    2ec8:	add	x4, x6, x4, lsr #32
    2ecc:	madd	x4, x5, x3, x4
    2ed0:	madd	x1, x2, x1, x4
    2ed4:	ret

0000000000002ed8 <__negti2@@GCC_3.0>:
    2ed8:	cmp	x0, #0x0
    2edc:	neg	x1, x1
    2ee0:	cset	x2, ne  // ne = any
    2ee4:	neg	x0, x0
    2ee8:	sub	x1, x1, x2
    2eec:	ret

0000000000002ef0 <__lshrti3@@GCC_3.0>:
    2ef0:	mov	x4, x1
    2ef4:	cbz	x2, 2f18 <__lshrti3@@GCC_3.0+0x28>
    2ef8:	mov	x3, #0x40                  	// #64
    2efc:	sub	x3, x3, x2
    2f00:	cmp	x3, #0x0
    2f04:	b.le	2f1c <__lshrti3@@GCC_3.0+0x2c>
    2f08:	lsl	x3, x1, x3
    2f0c:	lsr	x0, x0, x2
    2f10:	orr	x0, x0, x3
    2f14:	lsr	x1, x1, x2
    2f18:	ret
    2f1c:	neg	w0, w3
    2f20:	mov	x1, #0x0                   	// #0
    2f24:	lsr	x0, x4, x0
    2f28:	ret
    2f2c:	nop

0000000000002f30 <__ashlti3@@GCC_3.0>:
    2f30:	mov	x4, x0
    2f34:	cbz	x2, 2f58 <__ashlti3@@GCC_3.0+0x28>
    2f38:	mov	x3, #0x40                  	// #64
    2f3c:	sub	x3, x3, x2
    2f40:	cmp	x3, #0x0
    2f44:	b.le	2f5c <__ashlti3@@GCC_3.0+0x2c>
    2f48:	lsr	x3, x0, x3
    2f4c:	lsl	x1, x1, x2
    2f50:	orr	x1, x1, x3
    2f54:	lsl	x0, x0, x2
    2f58:	ret
    2f5c:	neg	w1, w3
    2f60:	mov	x0, #0x0                   	// #0
    2f64:	lsl	x1, x4, x1
    2f68:	ret
    2f6c:	nop

0000000000002f70 <__ashrti3@@GCC_3.0>:
    2f70:	mov	x3, x1
    2f74:	cbz	x2, 2f98 <__ashrti3@@GCC_3.0+0x28>
    2f78:	mov	x1, #0x40                  	// #64
    2f7c:	sub	x1, x1, x2
    2f80:	cmp	x1, #0x0
    2f84:	b.le	2f9c <__ashrti3@@GCC_3.0+0x2c>
    2f88:	lsl	x1, x3, x1
    2f8c:	lsr	x0, x0, x2
    2f90:	orr	x0, x0, x1
    2f94:	asr	x1, x3, x2
    2f98:	ret
    2f9c:	neg	w0, w1
    2fa0:	asr	x1, x3, #63
    2fa4:	asr	x0, x3, x0
    2fa8:	ret
    2fac:	nop

0000000000002fb0 <__cmpti2@@GCC_3.0>:
    2fb0:	mov	x4, x0
    2fb4:	cmp	x1, x3
    2fb8:	mov	w0, #0x0                   	// #0
    2fbc:	b.lt	2fdc <__cmpti2@@GCC_3.0+0x2c>  // b.tstop
    2fc0:	mov	w0, #0x2                   	// #2
    2fc4:	b.gt	2fdc <__cmpti2@@GCC_3.0+0x2c>
    2fc8:	cmp	x4, x2
    2fcc:	mov	w3, #0x0                   	// #0
    2fd0:	cset	w1, hi  // hi = pmore
    2fd4:	add	w0, w1, #0x1
    2fd8:	csel	w0, w0, w3, cs  // cs = hs, nlast
    2fdc:	ret

0000000000002fe0 <__ucmpti2@@GCC_3.0>:
    2fe0:	mov	x4, x0
    2fe4:	cmp	x1, x3
    2fe8:	mov	w0, #0x0                   	// #0
    2fec:	b.cc	300c <__ucmpti2@@GCC_3.0+0x2c>  // b.lo, b.ul, b.last
    2ff0:	mov	w0, #0x2                   	// #2
    2ff4:	b.hi	300c <__ucmpti2@@GCC_3.0+0x2c>  // b.pmore
    2ff8:	cmp	x4, x2
    2ffc:	mov	w3, #0x0                   	// #0
    3000:	cset	w1, hi  // hi = pmore
    3004:	add	w0, w1, #0x1
    3008:	csel	w0, w0, w3, cs  // cs = hs, nlast
    300c:	ret

0000000000003010 <__clear_cache@@GCC_3.0>:
    3010:	b	6b30 <__udivmodti4@@GCC_3.0+0x3c8>
    3014:	nop

0000000000003018 <__absvdi2@@GCC_3.0>:
    3018:	tbnz	x0, #63, 3020 <__absvdi2@@GCC_3.0+0x8>
    301c:	ret
    3020:	negs	x0, x0
    3024:	b.pl	301c <__absvdi2@@GCC_3.0+0x4>  // b.nfrst
    3028:	stp	x29, x30, [sp, #-16]!
    302c:	mov	x29, sp
    3030:	bl	2c50 <abort@plt>
    3034:	nop

0000000000003038 <__absvsi2@@GCC_3.0>:
    3038:	tbnz	w0, #31, 3040 <__absvsi2@@GCC_3.0+0x8>
    303c:	ret
    3040:	negs	w0, w0
    3044:	b.pl	303c <__absvsi2@@GCC_3.0+0x4>  // b.nfrst
    3048:	stp	x29, x30, [sp, #-16]!
    304c:	mov	x29, sp
    3050:	bl	2c50 <abort@plt>
    3054:	nop

0000000000003058 <__absvti2@@GCC_3.4.4>:
    3058:	tbnz	x1, #63, 3060 <__absvti2@@GCC_3.4.4+0x8>
    305c:	ret
    3060:	negs	x0, x0
    3064:	ngc	x1, x1
    3068:	tbz	x1, #63, 305c <__absvti2@@GCC_3.4.4+0x4>
    306c:	stp	x29, x30, [sp, #-16]!
    3070:	mov	x29, sp
    3074:	bl	2c50 <abort@plt>

0000000000003078 <__addvdi3@@GCC_3.0>:
    3078:	mov	x2, x0
    307c:	add	x0, x0, x1
    3080:	tbnz	x1, #63, 3094 <__addvdi3@@GCC_3.0+0x1c>
    3084:	cmp	x2, x0
    3088:	cset	w1, gt
    308c:	cbnz	w1, 30a0 <__addvdi3@@GCC_3.0+0x28>
    3090:	ret
    3094:	cmp	x2, x0
    3098:	cset	w1, lt  // lt = tstop
    309c:	b	308c <__addvdi3@@GCC_3.0+0x14>
    30a0:	stp	x29, x30, [sp, #-16]!
    30a4:	mov	x29, sp
    30a8:	bl	2c50 <abort@plt>
    30ac:	nop

00000000000030b0 <__addvsi3@@GCC_3.0>:
    30b0:	mov	w2, w0
    30b4:	add	w0, w0, w1
    30b8:	tbnz	w1, #31, 30cc <__addvsi3@@GCC_3.0+0x1c>
    30bc:	cmp	w2, w0
    30c0:	cset	w1, gt
    30c4:	cbnz	w1, 30d8 <__addvsi3@@GCC_3.0+0x28>
    30c8:	ret
    30cc:	cmp	w2, w0
    30d0:	cset	w1, lt  // lt = tstop
    30d4:	b	30c4 <__addvsi3@@GCC_3.0+0x14>
    30d8:	stp	x29, x30, [sp, #-16]!
    30dc:	mov	x29, sp
    30e0:	bl	2c50 <abort@plt>
    30e4:	nop

00000000000030e8 <__addvti3@@GCC_3.4.4>:
    30e8:	mov	x4, x0
    30ec:	adds	x0, x0, x2
    30f0:	mov	x2, x1
    30f4:	adc	x1, x1, x3
    30f8:	tbnz	x3, #63, 311c <__addvti3@@GCC_3.4.4+0x34>
    30fc:	cmp	x2, x1
    3100:	mov	w2, #0x1                   	// #1
    3104:	b.le	3110 <__addvti3@@GCC_3.4.4+0x28>
    3108:	cbnz	w2, 314c <__addvti3@@GCC_3.4.4+0x64>
    310c:	ret
    3110:	b.eq	313c <__addvti3@@GCC_3.4.4+0x54>  // b.none
    3114:	mov	w2, #0x0                   	// #0
    3118:	b	3108 <__addvti3@@GCC_3.4.4+0x20>
    311c:	cmp	x1, x2
    3120:	mov	w2, #0x1                   	// #1
    3124:	b.gt	3108 <__addvti3@@GCC_3.4.4+0x20>
    3128:	b.ne	3114 <__addvti3@@GCC_3.4.4+0x2c>  // b.any
    312c:	cmp	x0, x4
    3130:	b.hi	3108 <__addvti3@@GCC_3.4.4+0x20>  // b.pmore
    3134:	mov	w2, #0x0                   	// #0
    3138:	b	3108 <__addvti3@@GCC_3.4.4+0x20>
    313c:	cmp	x4, x0
    3140:	b.hi	3108 <__addvti3@@GCC_3.4.4+0x20>  // b.pmore
    3144:	mov	w2, #0x0                   	// #0
    3148:	b	3108 <__addvti3@@GCC_3.4.4+0x20>
    314c:	stp	x29, x30, [sp, #-16]!
    3150:	mov	x29, sp
    3154:	bl	2c50 <abort@plt>

0000000000003158 <__subvdi3@@GCC_3.0>:
    3158:	mov	x2, x0
    315c:	sub	x0, x0, x1
    3160:	tbnz	x1, #63, 3174 <__subvdi3@@GCC_3.0+0x1c>
    3164:	cmp	x2, x0
    3168:	cset	w1, lt  // lt = tstop
    316c:	cbnz	w1, 3180 <__subvdi3@@GCC_3.0+0x28>
    3170:	ret
    3174:	cmp	x2, x0
    3178:	cset	w1, gt
    317c:	b	316c <__subvdi3@@GCC_3.0+0x14>
    3180:	stp	x29, x30, [sp, #-16]!
    3184:	mov	x29, sp
    3188:	bl	2c50 <abort@plt>
    318c:	nop

0000000000003190 <__subvsi3@@GCC_3.0>:
    3190:	mov	w2, w0
    3194:	sub	w0, w0, w1
    3198:	tbnz	w1, #31, 31ac <__subvsi3@@GCC_3.0+0x1c>
    319c:	cmp	w2, w0
    31a0:	cset	w1, lt  // lt = tstop
    31a4:	cbnz	w1, 31b8 <__subvsi3@@GCC_3.0+0x28>
    31a8:	ret
    31ac:	cmp	w2, w0
    31b0:	cset	w1, gt
    31b4:	b	31a4 <__subvsi3@@GCC_3.0+0x14>
    31b8:	stp	x29, x30, [sp, #-16]!
    31bc:	mov	x29, sp
    31c0:	bl	2c50 <abort@plt>
    31c4:	nop

00000000000031c8 <__subvti3@@GCC_3.4.4>:
    31c8:	mov	x4, x0
    31cc:	subs	x0, x0, x2
    31d0:	mov	x2, x1
    31d4:	sbc	x1, x1, x3
    31d8:	tbnz	x3, #63, 31fc <__subvti3@@GCC_3.4.4+0x34>
    31dc:	cmp	x1, x2
    31e0:	mov	w2, #0x1                   	// #1
    31e4:	b.le	31f0 <__subvti3@@GCC_3.4.4+0x28>
    31e8:	cbnz	w2, 322c <__subvti3@@GCC_3.4.4+0x64>
    31ec:	ret
    31f0:	b.eq	321c <__subvti3@@GCC_3.4.4+0x54>  // b.none
    31f4:	mov	w2, #0x0                   	// #0
    31f8:	b	31e8 <__subvti3@@GCC_3.4.4+0x20>
    31fc:	cmp	x2, x1
    3200:	mov	w2, #0x1                   	// #1
    3204:	b.gt	31e8 <__subvti3@@GCC_3.4.4+0x20>
    3208:	b.ne	31f4 <__subvti3@@GCC_3.4.4+0x2c>  // b.any
    320c:	cmp	x4, x0
    3210:	b.hi	31e8 <__subvti3@@GCC_3.4.4+0x20>  // b.pmore
    3214:	mov	w2, #0x0                   	// #0
    3218:	b	31e8 <__subvti3@@GCC_3.4.4+0x20>
    321c:	cmp	x0, x4
    3220:	b.hi	31e8 <__subvti3@@GCC_3.4.4+0x20>  // b.pmore
    3224:	mov	w2, #0x0                   	// #0
    3228:	b	31e8 <__subvti3@@GCC_3.4.4+0x20>
    322c:	stp	x29, x30, [sp, #-16]!
    3230:	mov	x29, sp
    3234:	bl	2c50 <abort@plt>

0000000000003238 <__mulvdi3@@GCC_3.0>:
    3238:	mov	x2, x0
    323c:	mul	x0, x0, x1
    3240:	smulh	x2, x2, x1
    3244:	cmp	x2, x0, asr #63
    3248:	b.ne	3250 <__mulvdi3@@GCC_3.0+0x18>  // b.any
    324c:	ret
    3250:	stp	x29, x30, [sp, #-16]!
    3254:	mov	x29, sp
    3258:	bl	2c50 <abort@plt>
    325c:	nop

0000000000003260 <__mulvsi3@@GCC_3.0>:
    3260:	smull	x0, w0, w1
    3264:	asr	x1, x0, #32
    3268:	cmp	w1, w0, asr #31
    326c:	b.ne	3274 <__mulvsi3@@GCC_3.0+0x14>  // b.any
    3270:	ret
    3274:	stp	x29, x30, [sp, #-16]!
    3278:	mov	x29, sp
    327c:	bl	2c50 <abort@plt>

0000000000003280 <__mulvti3@@GCC_3.4.4>:
    3280:	cmp	x1, x0, asr #63
    3284:	asr	x4, x2, #63
    3288:	b.ne	32a0 <__mulvti3@@GCC_3.4.4+0x20>  // b.any
    328c:	cmp	x4, x3
    3290:	b.ne	32e4 <__mulvti3@@GCC_3.4.4+0x64>  // b.any
    3294:	smulh	x1, x0, x2
    3298:	mul	x0, x0, x2
    329c:	ret
    32a0:	cmp	x4, x3
    32a4:	b.ne	3334 <__mulvti3@@GCC_3.4.4+0xb4>  // b.any
    32a8:	mul	x6, x1, x2
    32ac:	umulh	x4, x1, x2
    32b0:	mul	x7, x0, x2
    32b4:	mov	x5, x6
    32b8:	umulh	x3, x0, x2
    32bc:	tbnz	x1, #63, 332c <__mulvti3@@GCC_3.4.4+0xac>
    32c0:	tbz	x2, #63, 32cc <__mulvti3@@GCC_3.4.4+0x4c>
    32c4:	subs	x5, x6, x0
    32c8:	sbc	x4, x4, x1
    32cc:	adds	x1, x3, x5
    32d0:	cinc	x4, x4, cs  // cs = hs, nlast
    32d4:	cmp	x4, x1, asr #63
    32d8:	b.ne	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.any
    32dc:	mov	x0, x7
    32e0:	ret
    32e4:	mul	x6, x3, x0
    32e8:	umulh	x4, x3, x0
    32ec:	mul	x7, x2, x0
    32f0:	mov	x5, x6
    32f4:	umulh	x1, x2, x0
    32f8:	tbnz	x3, #63, 3324 <__mulvti3@@GCC_3.4.4+0xa4>
    32fc:	tbz	x0, #63, 3308 <__mulvti3@@GCC_3.4.4+0x88>
    3300:	subs	x5, x6, x2
    3304:	sbc	x4, x4, x3
    3308:	adds	x1, x1, x5
    330c:	cinc	x4, x4, cs  // cs = hs, nlast
    3310:	cmp	x4, x1, asr #63
    3314:	b.eq	32dc <__mulvti3@@GCC_3.4.4+0x5c>  // b.none
    3318:	stp	x29, x30, [sp, #-16]!
    331c:	mov	x29, sp
    3320:	bl	2c50 <abort@plt>
    3324:	sub	x4, x4, x0
    3328:	b	32fc <__mulvti3@@GCC_3.4.4+0x7c>
    332c:	sub	x4, x4, x2
    3330:	b	32c0 <__mulvti3@@GCC_3.4.4+0x40>
    3334:	tbnz	x1, #63, 3354 <__mulvti3@@GCC_3.4.4+0xd4>
    3338:	tbnz	x3, #63, 3380 <__mulvti3@@GCC_3.4.4+0x100>
    333c:	orr	x4, x3, x1
    3340:	cbnz	x4, 3318 <__mulvti3@@GCC_3.4.4+0x98>
    3344:	umulh	x1, x0, x2
    3348:	mul	x0, x0, x2
    334c:	tbnz	x1, #63, 3318 <__mulvti3@@GCC_3.4.4+0x98>
    3350:	ret
    3354:	cmp	x3, #0x0
    3358:	b.lt	33a4 <__mulvti3@@GCC_3.4.4+0x124>  // b.tstop
    335c:	ccmn	x1, #0x1, #0x0, eq  // eq = none
    3360:	b.ne	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.any
    3364:	umulh	x3, x0, x2
    3368:	mul	x1, x0, x2
    336c:	subs	x3, x3, x2
    3370:	b.pl	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.nfrst
    3374:	mov	x0, x1
    3378:	mov	x1, x3
    337c:	ret
    3380:	cmp	x1, #0x0
    3384:	ccmn	x3, #0x1, #0x0, eq  // eq = none
    3388:	b.ne	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.any
    338c:	umulh	x1, x0, x2
    3390:	mul	x2, x0, x2
    3394:	subs	x1, x1, x0
    3398:	b.pl	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.nfrst
    339c:	mov	x0, x2
    33a0:	ret
    33a4:	and	x4, x3, x1
    33a8:	cmn	x4, #0x1
    33ac:	b.ne	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.any
    33b0:	orr	x1, x2, x0
    33b4:	cbz	x1, 3318 <__mulvti3@@GCC_3.4.4+0x98>
    33b8:	umulh	x4, x0, x2
    33bc:	mul	x3, x0, x2
    33c0:	sub	x1, x4, x0
    33c4:	subs	x1, x1, x2
    33c8:	b.mi	3318 <__mulvti3@@GCC_3.4.4+0x98>  // b.first
    33cc:	mov	x0, x3
    33d0:	ret
    33d4:	nop

00000000000033d8 <__negvdi2@@GCC_3.0>:
    33d8:	mov	x1, x0
    33dc:	neg	x0, x0
    33e0:	tbnz	x1, #63, 33f4 <__negvdi2@@GCC_3.0+0x1c>
    33e4:	cmp	x0, #0x0
    33e8:	cset	w1, gt
    33ec:	cbnz	w1, 3400 <__negvdi2@@GCC_3.0+0x28>
    33f0:	ret
    33f4:	lsr	x1, x0, #63
    33f8:	and	w1, w1, #0xff
    33fc:	b	33ec <__negvdi2@@GCC_3.0+0x14>
    3400:	stp	x29, x30, [sp, #-16]!
    3404:	mov	x29, sp
    3408:	bl	2c50 <abort@plt>
    340c:	nop

0000000000003410 <__negvsi2@@GCC_3.0>:
    3410:	mov	w1, w0
    3414:	neg	w0, w0
    3418:	lsr	w2, w0, #31
    341c:	tbnz	w1, #31, 3428 <__negvsi2@@GCC_3.0+0x18>
    3420:	cmp	w0, #0x0
    3424:	cset	w2, gt
    3428:	cbnz	w2, 3430 <__negvsi2@@GCC_3.0+0x20>
    342c:	ret
    3430:	stp	x29, x30, [sp, #-16]!
    3434:	mov	x29, sp
    3438:	bl	2c50 <abort@plt>
    343c:	nop

0000000000003440 <__negvti2@@GCC_3.4.4>:
    3440:	negs	x0, x0
    3444:	mov	x2, x1
    3448:	ngc	x1, x1
    344c:	tbnz	x2, #63, 346c <__negvti2@@GCC_3.4.4+0x2c>
    3450:	asr	x2, x1, #63
    3454:	subs	x3, x2, x0
    3458:	sbc	x2, x2, x1
    345c:	lsr	x2, x2, #63
    3460:	and	w2, w2, #0xff
    3464:	cbnz	w2, 3478 <__negvti2@@GCC_3.4.4+0x38>
    3468:	ret
    346c:	lsr	x2, x1, #63
    3470:	and	w2, w2, #0xff
    3474:	b	3464 <__negvti2@@GCC_3.4.4+0x24>
    3478:	stp	x29, x30, [sp, #-16]!
    347c:	mov	x29, sp
    3480:	bl	2c50 <abort@plt>
    3484:	nop

0000000000003488 <__ffsdi2@@GCC_3.0>:
    3488:	rbit	x1, x0
    348c:	cmp	x0, #0x0
    3490:	clz	x1, x1
    3494:	csinc	w0, wzr, w1, eq  // eq = none
    3498:	ret
    349c:	nop

00000000000034a0 <__ffsti2@@GCC_3.0>:
    34a0:	cbz	x0, 34bc <__ffsti2@@GCC_3.0+0x1c>
    34a4:	mov	w1, #0x0                   	// #0
    34a8:	rbit	x0, x0
    34ac:	add	w1, w1, #0x1
    34b0:	clz	x0, x0
    34b4:	add	w0, w1, w0
    34b8:	ret
    34bc:	mov	w0, #0x0                   	// #0
    34c0:	cbz	x1, 34b8 <__ffsti2@@GCC_3.0+0x18>
    34c4:	mov	x0, x1
    34c8:	mov	w1, #0x40                  	// #64
    34cc:	b	34a8 <__ffsti2@@GCC_3.0+0x8>

00000000000034d0 <__clzdi2@@GCC_3.4>:
    34d0:	clz	x0, x0
    34d4:	ret

00000000000034d8 <__clzti2@@GCC_3.4>:
    34d8:	cbz	x1, 34f0 <__clzti2@@GCC_3.4+0x18>
    34dc:	mov	x0, x1
    34e0:	mov	w1, #0x0                   	// #0
    34e4:	clz	x0, x0
    34e8:	add	w0, w1, w0
    34ec:	ret
    34f0:	clz	x0, x0
    34f4:	mov	w1, #0x40                  	// #64
    34f8:	add	w0, w1, w0
    34fc:	ret

0000000000003500 <__ctzdi2@@GCC_3.4>:
    3500:	rbit	x0, x0
    3504:	clz	x0, x0
    3508:	ret
    350c:	nop

0000000000003510 <__ctzti2@@GCC_3.4>:
    3510:	cbz	x0, 352c <__ctzti2@@GCC_3.4+0x1c>
    3514:	mov	x1, x0
    3518:	mov	w0, #0x0                   	// #0
    351c:	rbit	x1, x1
    3520:	clz	x1, x1
    3524:	add	w0, w0, w1
    3528:	ret
    352c:	rbit	x1, x1
    3530:	mov	w0, #0x40                  	// #64
    3534:	clz	x1, x1
    3538:	add	w0, w0, w1
    353c:	ret

0000000000003540 <__popcountdi2@@GCC_3.4>:
    3540:	lsr	x1, x0, #1
    3544:	mov	x3, #0x101010101010101     	// #72340172838076673
    3548:	and	x1, x1, #0x5555555555555555
    354c:	sub	x1, x0, x1
    3550:	and	x2, x1, #0x3333333333333333
    3554:	lsr	x1, x1, #2
    3558:	and	x1, x1, #0x3333333333333333
    355c:	add	x1, x2, x1
    3560:	add	x1, x1, x1, lsr #4
    3564:	and	x0, x1, #0xf0f0f0f0f0f0f0f
    3568:	mul	x0, x0, x3
    356c:	lsr	x0, x0, #56
    3570:	ret
    3574:	nop

0000000000003578 <__popcountti2@@GCC_3.4>:
    3578:	lsr	x3, x0, #1
    357c:	lsr	x2, x1, #1
    3580:	and	x3, x3, #0x5555555555555555
    3584:	and	x2, x2, #0x5555555555555555
    3588:	sub	x0, x0, x3
    358c:	sub	x2, x1, x2
    3590:	and	x3, x0, #0x3333333333333333
    3594:	and	x1, x2, #0x3333333333333333
    3598:	lsr	x0, x0, #2
    359c:	lsr	x2, x2, #2
    35a0:	and	x2, x2, #0x3333333333333333
    35a4:	and	x0, x0, #0x3333333333333333
    35a8:	add	x0, x3, x0
    35ac:	add	x1, x1, x2
    35b0:	mov	x4, #0x101010101010101     	// #72340172838076673
    35b4:	add	x0, x0, x0, lsr #4
    35b8:	add	x1, x1, x1, lsr #4
    35bc:	and	x2, x0, #0xf0f0f0f0f0f0f0f
    35c0:	and	x0, x1, #0xf0f0f0f0f0f0f0f
    35c4:	add	x0, x0, x2
    35c8:	mul	x0, x0, x4
    35cc:	lsr	x0, x0, #56
    35d0:	ret
    35d4:	nop

00000000000035d8 <__paritydi2@@GCC_3.4>:
    35d8:	eor	x1, x0, x0, lsr #32
    35dc:	mov	w2, #0x6996                	// #27030
    35e0:	eor	x1, x1, x1, lsr #16
    35e4:	eor	x1, x1, x1, lsr #8
    35e8:	eor	x1, x1, x1, lsr #4
    35ec:	and	x1, x1, #0xf
    35f0:	asr	w1, w2, w1
    35f4:	and	w0, w1, #0x1
    35f8:	ret
    35fc:	nop

0000000000003600 <__parityti2@@GCC_3.4>:
    3600:	eor	x1, x0, x1
    3604:	mov	w0, #0x6996                	// #27030
    3608:	eor	x1, x1, x1, lsr #32
    360c:	eor	x1, x1, x1, lsr #16
    3610:	eor	x1, x1, x1, lsr #8
    3614:	eor	x1, x1, x1, lsr #4
    3618:	and	x1, x1, #0xf
    361c:	asr	w0, w0, w1
    3620:	and	w0, w0, #0x1
    3624:	ret

0000000000003628 <__powisf2@@GCC_4.0.0>:
    3628:	cmp	w0, #0x0
    362c:	fmov	s2, #1.000000000000000000e+00
    3630:	cneg	w2, w0, lt  // lt = tstop
    3634:	tst	x0, #0x1
    3638:	fmov	s1, s0
    363c:	lsr	w1, w2, #1
    3640:	fcsel	s0, s0, s2, ne  // ne = any
    3644:	cmp	wzr, w2, lsr #1
    3648:	b.eq	3664 <__powisf2@@GCC_4.0.0+0x3c>  // b.none
    364c:	nop
    3650:	fmul	s1, s1, s1
    3654:	tbz	w1, #0, 365c <__powisf2@@GCC_4.0.0+0x34>
    3658:	fmul	s0, s0, s1
    365c:	lsr	w1, w1, #1
    3660:	cbnz	w1, 3650 <__powisf2@@GCC_4.0.0+0x28>
    3664:	tbnz	w0, #31, 366c <__powisf2@@GCC_4.0.0+0x44>
    3668:	ret
    366c:	fmov	s1, #1.000000000000000000e+00
    3670:	fdiv	s0, s1, s0
    3674:	ret

0000000000003678 <__powidf2@@GCC_4.0.0>:
    3678:	cmp	w0, #0x0
    367c:	fmov	d2, #1.000000000000000000e+00
    3680:	cneg	w2, w0, lt  // lt = tstop
    3684:	tst	x0, #0x1
    3688:	fmov	d1, d0
    368c:	lsr	w1, w2, #1
    3690:	fcsel	d0, d0, d2, ne  // ne = any
    3694:	cmp	wzr, w2, lsr #1
    3698:	b.eq	36b4 <__powidf2@@GCC_4.0.0+0x3c>  // b.none
    369c:	nop
    36a0:	fmul	d1, d1, d1
    36a4:	tbz	w1, #0, 36ac <__powidf2@@GCC_4.0.0+0x34>
    36a8:	fmul	d0, d0, d1
    36ac:	lsr	w1, w1, #1
    36b0:	cbnz	w1, 36a0 <__powidf2@@GCC_4.0.0+0x28>
    36b4:	tbnz	w0, #31, 36bc <__powidf2@@GCC_4.0.0+0x44>
    36b8:	ret
    36bc:	fmov	d1, #1.000000000000000000e+00
    36c0:	fdiv	d0, d1, d0
    36c4:	ret

00000000000036c8 <__powitf2@@GCC_4.0.0>:
    36c8:	stp	x29, x30, [sp, #-48]!
    36cc:	cmp	w0, #0x0
    36d0:	mov	v2.16b, v0.16b
    36d4:	mov	x29, sp
    36d8:	stp	x19, x20, [sp, #16]
    36dc:	mov	v4.16b, v0.16b
    36e0:	mov	w20, w0
    36e4:	cneg	w19, w0, lt  // lt = tstop
    36e8:	tbnz	w20, #0, 36f8 <__powitf2@@GCC_4.0.0+0x30>
    36ec:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    36f0:	add	x0, x0, #0x5c0
    36f4:	ldr	q4, [x0]
    36f8:	cmp	wzr, w19, lsr #1
    36fc:	lsr	w19, w19, #1
    3700:	b.eq	3744 <__powitf2@@GCC_4.0.0+0x7c>  // b.none
    3704:	nop
    3708:	mov	v1.16b, v2.16b
    370c:	mov	v0.16b, v2.16b
    3710:	str	q4, [sp, #32]
    3714:	bl	2b10 <__multf3@plt>
    3718:	ldr	q4, [sp, #32]
    371c:	mov	v2.16b, v0.16b
    3720:	mov	v1.16b, v2.16b
    3724:	mov	v0.16b, v4.16b
    3728:	tbz	w19, #0, 373c <__powitf2@@GCC_4.0.0+0x74>
    372c:	str	q2, [sp, #32]
    3730:	bl	2b10 <__multf3@plt>
    3734:	mov	v4.16b, v0.16b
    3738:	ldr	q2, [sp, #32]
    373c:	lsr	w19, w19, #1
    3740:	cbnz	w19, 3708 <__powitf2@@GCC_4.0.0+0x40>
    3744:	tbz	w20, #31, 3760 <__powitf2@@GCC_4.0.0+0x98>
    3748:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    374c:	add	x0, x0, #0x5c0
    3750:	mov	v1.16b, v4.16b
    3754:	ldr	q0, [x0]
    3758:	bl	2c60 <__divtf3@plt>
    375c:	mov	v4.16b, v0.16b
    3760:	mov	v0.16b, v4.16b
    3764:	ldp	x19, x20, [sp, #16]
    3768:	ldp	x29, x30, [sp], #48
    376c:	ret
    3770:	fcvt	s5, h0
    3774:	fcvt	s4, h1
    3778:	fcvt	s19, h2
    377c:	fcvt	s20, h3
    3780:	mov	v22.h[0], v0.h[0]
    3784:	mov	v21.h[0], v1.h[0]
    3788:	fmul	s17, s5, s19
    378c:	fmul	s16, s4, s20
    3790:	fmul	s7, s5, s20
    3794:	fmul	s6, s19, s4
    3798:	fcvt	h17, s17
    379c:	fcvt	h16, s16
    37a0:	fcvt	h7, s7
    37a4:	fcvt	h6, s6
    37a8:	fcvt	s17, h17
    37ac:	fcvt	s16, h16
    37b0:	fcvt	s23, h7
    37b4:	fcvt	s24, h6
    37b8:	fsub	s0, s17, s16
    37bc:	fadd	s1, s23, s24
    37c0:	fcvt	h0, s0
    37c4:	fcvt	h1, s1
    37c8:	fcvt	s7, h0
    37cc:	fcvt	s6, h1
    37d0:	fcmp	s7, s7
    37d4:	cset	w0, vs
    37d8:	fcmp	s6, s6
    37dc:	cset	w1, vs
    37e0:	ands	w0, w0, w1
    37e4:	b.eq	3940 <__powitf2@@GCC_4.0.0+0x278>  // b.none
    37e8:	fabs	s18, s5
    37ec:	fabs	s4, s4
    37f0:	mov	w1, #0xe000                	// #57344
    37f4:	movk	w1, #0x477f, lsl #16
    37f8:	fmov	s5, w1
    37fc:	fcvt	h18, s18
    3800:	fcvt	h4, s4
    3804:	fcvt	s18, h18
    3808:	fcvt	s4, h4
    380c:	fcmp	s18, s5
    3810:	b.le	3944 <__powitf2@@GCC_4.0.0+0x27c>
    3814:	mov	w1, #0xe000                	// #57344
    3818:	umov	w4, v22.h[0]
    381c:	movk	w1, #0x477f, lsl #16
    3820:	fmov	s5, w1
    3824:	umov	w3, v21.h[0]
    3828:	fcmp	s18, s5
    382c:	cset	w1, gt
    3830:	fcmp	s4, s5
    3834:	scvtf	d5, w1
    3838:	cset	w1, gt
    383c:	fcmp	s19, s19
    3840:	scvtf	d4, w1
    3844:	fcvt	h5, d5
    3848:	fcvt	h4, d4
    384c:	umov	w2, v5.h[0]
    3850:	umov	w1, v4.h[0]
    3854:	bfxil	w4, w2, #0, #15
    3858:	mov	w2, w3
    385c:	dup	v22.4h, w4
    3860:	bfxil	w2, w1, #0, #15
    3864:	dup	v21.4h, w2
    3868:	b.vs	3a28 <__powitf2@@GCC_4.0.0+0x360>
    386c:	fcmp	s20, s20
    3870:	b.vs	3a40 <__powitf2@@GCC_4.0.0+0x378>
    3874:	fabs	s6, s19
    3878:	fabs	s7, s20
    387c:	mov	w1, #0xe000                	// #57344
    3880:	movk	w1, #0x477f, lsl #16
    3884:	fmov	s4, w1
    3888:	fcvt	h6, s6
    388c:	fcvt	h7, s7
    3890:	fcvt	s6, h6
    3894:	fcvt	s7, h7
    3898:	fcmp	s6, s4
    389c:	b.gt	38a8 <__powitf2@@GCC_4.0.0+0x1e0>
    38a0:	fcmp	s7, s4
    38a4:	b.le	3954 <__powitf2@@GCC_4.0.0+0x28c>
    38a8:	mov	w0, #0xe000                	// #57344
    38ac:	umov	w3, v2.h[0]
    38b0:	movk	w0, #0x477f, lsl #16
    38b4:	fmov	s0, w0
    38b8:	umov	w2, v3.h[0]
    38bc:	fcvt	s5, h22
    38c0:	fcmp	s6, s0
    38c4:	cset	w0, gt
    38c8:	fcmp	s7, s0
    38cc:	scvtf	d1, w0
    38d0:	cset	w0, gt
    38d4:	fcmp	s5, s5
    38d8:	scvtf	d0, w0
    38dc:	fcvt	h1, d1
    38e0:	fcvt	h0, d0
    38e4:	umov	w1, v1.h[0]
    38e8:	umov	w0, v0.h[0]
    38ec:	bfxil	w3, w1, #0, #15
    38f0:	mov	w1, w2
    38f4:	dup	v2.4h, w3
    38f8:	bfxil	w1, w0, #0, #15
    38fc:	dup	v3.4h, w1
    3900:	b.vs	39f0 <__powitf2@@GCC_4.0.0+0x328>
    3904:	fcvt	s4, h21
    3908:	fcmp	s4, s4
    390c:	b.vs	3a08 <__powitf2@@GCC_4.0.0+0x340>
    3910:	fcvt	s19, h2
    3914:	fcvt	s20, h3
    3918:	fmul	s0, s4, s20
    391c:	fmul	s1, s19, s4
    3920:	fnmsub	s0, s5, s19, s0
    3924:	fmadd	s1, s5, s20, s1
    3928:	mov	w0, #0x7f800000            	// #2139095040
    392c:	fmov	s4, w0
    3930:	fmul	s0, s0, s4
    3934:	fmul	s1, s1, s4
    3938:	fcvt	h0, s0
    393c:	fcvt	h1, s1
    3940:	ret
    3944:	fcmp	s4, s5
    3948:	b.gt	3814 <__powitf2@@GCC_4.0.0+0x14c>
    394c:	mov	w0, #0x0                   	// #0
    3950:	b	3874 <__powitf2@@GCC_4.0.0+0x1ac>
    3954:	cbnz	w0, 3aa0 <__powitf2@@GCC_4.0.0+0x3d8>
    3958:	fabs	s5, s17
    395c:	fcvt	h5, s5
    3960:	fcvt	s5, h5
    3964:	fcmp	s5, s4
    3968:	b.gt	3998 <__powitf2@@GCC_4.0.0+0x2d0>
    396c:	fabs	s16, s16
    3970:	fcvt	h16, s16
    3974:	fcvt	s16, h16
    3978:	fcmp	s16, s4
    397c:	b.gt	3998 <__powitf2@@GCC_4.0.0+0x2d0>
    3980:	fabs	s5, s23
    3984:	fcvt	h5, s5
    3988:	fcvt	s5, h5
    398c:	fcmp	s5, s4
    3990:	b.le	39d8 <__powitf2@@GCC_4.0.0+0x310>
    3994:	nop
    3998:	fcvt	s5, h22
    399c:	fcmp	s5, s5
    39a0:	b.vs	3a88 <__powitf2@@GCC_4.0.0+0x3c0>
    39a4:	fcvt	s4, h21
    39a8:	fcmp	s4, s4
    39ac:	b.vs	3a70 <__powitf2@@GCC_4.0.0+0x3a8>
    39b0:	fcmp	s19, s19
    39b4:	b.vs	3a58 <__powitf2@@GCC_4.0.0+0x390>
    39b8:	fcmp	s20, s20
    39bc:	b.vc	3918 <__powitf2@@GCC_4.0.0+0x250>
    39c0:	umov	w0, v3.h[0]
    39c4:	movi	v1.4h, #0x0
    39c8:	tbz	w0, #15, 39d0 <__powitf2@@GCC_4.0.0+0x308>
    39cc:	movi	v1.4h, #0x80, lsl #8
    39d0:	fcvt	s20, h1
    39d4:	b	3918 <__powitf2@@GCC_4.0.0+0x250>
    39d8:	fabs	s5, s24
    39dc:	fcvt	h5, s5
    39e0:	fcvt	s5, h5
    39e4:	fcmp	s5, s4
    39e8:	b.gt	3998 <__powitf2@@GCC_4.0.0+0x2d0>
    39ec:	ret
    39f0:	umov	w0, v22.h[0]
    39f4:	movi	v1.4h, #0x0
    39f8:	tbz	w0, #15, 3a00 <__powitf2@@GCC_4.0.0+0x338>
    39fc:	movi	v1.4h, #0x80, lsl #8
    3a00:	fcvt	s5, h1
    3a04:	b	3904 <__powitf2@@GCC_4.0.0+0x23c>
    3a08:	umov	w0, v21.h[0]
    3a0c:	movi	v4.4h, #0x0
    3a10:	tbz	w0, #15, 3a18 <__powitf2@@GCC_4.0.0+0x350>
    3a14:	movi	v4.4h, #0x80, lsl #8
    3a18:	fcvt	s19, h2
    3a1c:	fcvt	s4, h4
    3a20:	fcvt	s20, h3
    3a24:	b	3918 <__powitf2@@GCC_4.0.0+0x250>
    3a28:	umov	w1, v2.h[0]
    3a2c:	movi	v2.4h, #0x0
    3a30:	tbz	w1, #15, 3a38 <__powitf2@@GCC_4.0.0+0x370>
    3a34:	movi	v2.4h, #0x80, lsl #8
    3a38:	fcvt	s19, h2
    3a3c:	b	386c <__powitf2@@GCC_4.0.0+0x1a4>
    3a40:	umov	w1, v3.h[0]
    3a44:	movi	v3.4h, #0x0
    3a48:	tbz	w1, #15, 3a50 <__powitf2@@GCC_4.0.0+0x388>
    3a4c:	movi	v3.4h, #0x80, lsl #8
    3a50:	fcvt	s20, h3
    3a54:	b	3874 <__powitf2@@GCC_4.0.0+0x1ac>
    3a58:	umov	w0, v2.h[0]
    3a5c:	movi	v19.4h, #0x0
    3a60:	tbz	w0, #15, 3a68 <__powitf2@@GCC_4.0.0+0x3a0>
    3a64:	movi	v19.4h, #0x80, lsl #8
    3a68:	fcvt	s19, h19
    3a6c:	b	39b8 <__powitf2@@GCC_4.0.0+0x2f0>
    3a70:	umov	w0, v21.h[0]
    3a74:	movi	v0.4h, #0x0
    3a78:	tbz	w0, #15, 3a80 <__powitf2@@GCC_4.0.0+0x3b8>
    3a7c:	movi	v0.4h, #0x80, lsl #8
    3a80:	fcvt	s4, h0
    3a84:	b	39b0 <__powitf2@@GCC_4.0.0+0x2e8>
    3a88:	umov	w0, v22.h[0]
    3a8c:	movi	v1.4h, #0x0
    3a90:	tbz	w0, #15, 3a98 <__powitf2@@GCC_4.0.0+0x3d0>
    3a94:	movi	v1.4h, #0x80, lsl #8
    3a98:	fcvt	s5, h1
    3a9c:	b	39a4 <__powitf2@@GCC_4.0.0+0x2dc>
    3aa0:	fcvt	s5, h22
    3aa4:	fcvt	s4, h21
    3aa8:	b	3918 <__powitf2@@GCC_4.0.0+0x250>
    3aac:	nop

0000000000003ab0 <__mulsc3@@GCC_4.0.0>:
    3ab0:	fmul	s7, s1, s3
    3ab4:	fmul	s5, s0, s2
    3ab8:	fmul	s16, s0, s3
    3abc:	fmov	s18, s0
    3ac0:	fmul	s17, s2, s1
    3ac4:	fmov	s4, s1
    3ac8:	fsub	s0, s5, s7
    3acc:	fadd	s1, s16, s17
    3ad0:	fcmp	s0, s0
    3ad4:	cset	w0, vs
    3ad8:	fcmp	s1, s1
    3adc:	cset	w1, vs
    3ae0:	ands	w0, w0, w1
    3ae4:	b.eq	3c14 <__mulsc3@@GCC_4.0.0+0x164>  // b.none
    3ae8:	fabs	s19, s18
    3aec:	mov	w1, #0x7f7fffff            	// #2139095039
    3af0:	fmov	s6, w1
    3af4:	fabs	s21, s4
    3af8:	fcmp	s19, s6
    3afc:	b.le	3c18 <__mulsc3@@GCC_4.0.0+0x168>
    3b00:	mov	w1, #0x7f7fffff            	// #2139095039
    3b04:	fmov	s6, w1
    3b08:	movi	v20.2s, #0x80, lsl #24
    3b0c:	fcmp	s19, s6
    3b10:	cset	w1, gt
    3b14:	fcmp	s21, s6
    3b18:	scvtf	s19, w1
    3b1c:	cset	w1, gt
    3b20:	fcmp	s2, s2
    3b24:	scvtf	s6, w1
    3b28:	bif	v18.8b, v19.8b, v20.8b
    3b2c:	bif	v4.8b, v6.8b, v20.8b
    3b30:	b.vs	3c54 <__mulsc3@@GCC_4.0.0+0x1a4>
    3b34:	fcmp	s3, s3
    3b38:	b.vs	3c60 <__mulsc3@@GCC_4.0.0+0x1b0>
    3b3c:	fabs	s19, s2
    3b40:	mov	w1, #0x7f7fffff            	// #2139095039
    3b44:	fmov	s6, w1
    3b48:	fabs	s20, s3
    3b4c:	fcmp	s19, s6
    3b50:	b.gt	3bb8 <__mulsc3@@GCC_4.0.0+0x108>
    3b54:	fcmp	s20, s6
    3b58:	b.gt	3bb8 <__mulsc3@@GCC_4.0.0+0x108>
    3b5c:	cbnz	w0, 3bf4 <__mulsc3@@GCC_4.0.0+0x144>
    3b60:	fabs	s5, s5
    3b64:	fcmp	s5, s6
    3b68:	b.gt	3b88 <__mulsc3@@GCC_4.0.0+0xd8>
    3b6c:	fabs	s7, s7
    3b70:	fcmp	s7, s6
    3b74:	b.gt	3b88 <__mulsc3@@GCC_4.0.0+0xd8>
    3b78:	fabs	s16, s16
    3b7c:	fcmp	s16, s6
    3b80:	b.le	3c28 <__mulsc3@@GCC_4.0.0+0x178>
    3b84:	nop
    3b88:	fcmp	s18, s18
    3b8c:	b.vs	3c90 <__mulsc3@@GCC_4.0.0+0x1e0>
    3b90:	fcmp	s4, s4
    3b94:	b.vs	3c80 <__mulsc3@@GCC_4.0.0+0x1d0>
    3b98:	fcmp	s2, s2
    3b9c:	b.vs	3c70 <__mulsc3@@GCC_4.0.0+0x1c0>
    3ba0:	fcmp	s3, s3
    3ba4:	b.vc	3bf4 <__mulsc3@@GCC_4.0.0+0x144>
    3ba8:	movi	v0.2s, #0x0
    3bac:	movi	v1.2s, #0x80, lsl #24
    3bb0:	bif	v3.8b, v0.8b, v1.8b
    3bb4:	b	3bf4 <__mulsc3@@GCC_4.0.0+0x144>
    3bb8:	mov	w0, #0x7f7fffff            	// #2139095039
    3bbc:	fmov	s0, w0
    3bc0:	movi	v5.2s, #0x80, lsl #24
    3bc4:	fcmp	s19, s0
    3bc8:	cset	w0, gt
    3bcc:	fcmp	s20, s0
    3bd0:	scvtf	s1, w0
    3bd4:	cset	w0, gt
    3bd8:	fcmp	s18, s18
    3bdc:	scvtf	s0, w0
    3be0:	bif	v2.8b, v1.8b, v5.8b
    3be4:	bif	v3.8b, v0.8b, v5.8b
    3be8:	b.vs	3c38 <__mulsc3@@GCC_4.0.0+0x188>
    3bec:	fcmp	s4, s4
    3bf0:	b.vs	3c44 <__mulsc3@@GCC_4.0.0+0x194>
    3bf4:	fmul	s5, s4, s3
    3bf8:	fmul	s4, s4, s2
    3bfc:	fmadd	s3, s18, s3, s4
    3c00:	fnmsub	s2, s18, s2, s5
    3c04:	mov	w0, #0x7f800000            	// #2139095040
    3c08:	fmov	s1, w0
    3c0c:	fmul	s0, s2, s1
    3c10:	fmul	s1, s3, s1
    3c14:	ret
    3c18:	fcmp	s21, s6
    3c1c:	b.gt	3b00 <__mulsc3@@GCC_4.0.0+0x50>
    3c20:	mov	w0, #0x0                   	// #0
    3c24:	b	3b3c <__mulsc3@@GCC_4.0.0+0x8c>
    3c28:	fabs	s17, s17
    3c2c:	fcmp	s17, s6
    3c30:	b.gt	3b88 <__mulsc3@@GCC_4.0.0+0xd8>
    3c34:	ret
    3c38:	movi	v0.2s, #0x0
    3c3c:	bif	v18.8b, v0.8b, v5.8b
    3c40:	b	3bec <__mulsc3@@GCC_4.0.0+0x13c>
    3c44:	movi	v0.2s, #0x0
    3c48:	movi	v1.2s, #0x80, lsl #24
    3c4c:	bif	v4.8b, v0.8b, v1.8b
    3c50:	b	3bf4 <__mulsc3@@GCC_4.0.0+0x144>
    3c54:	movi	v6.2s, #0x0
    3c58:	bif	v2.8b, v6.8b, v20.8b
    3c5c:	b	3b34 <__mulsc3@@GCC_4.0.0+0x84>
    3c60:	movi	v6.2s, #0x0
    3c64:	movi	v19.2s, #0x80, lsl #24
    3c68:	bif	v3.8b, v6.8b, v19.8b
    3c6c:	b	3b3c <__mulsc3@@GCC_4.0.0+0x8c>
    3c70:	movi	v0.2s, #0x0
    3c74:	movi	v1.2s, #0x80, lsl #24
    3c78:	bif	v2.8b, v0.8b, v1.8b
    3c7c:	b	3ba0 <__mulsc3@@GCC_4.0.0+0xf0>
    3c80:	movi	v0.2s, #0x0
    3c84:	movi	v1.2s, #0x80, lsl #24
    3c88:	bif	v4.8b, v0.8b, v1.8b
    3c8c:	b	3b98 <__mulsc3@@GCC_4.0.0+0xe8>
    3c90:	movi	v0.2s, #0x0
    3c94:	movi	v1.2s, #0x80, lsl #24
    3c98:	bif	v18.8b, v0.8b, v1.8b
    3c9c:	b	3b90 <__mulsc3@@GCC_4.0.0+0xe0>

0000000000003ca0 <__muldc3@@GCC_4.0.0>:
    3ca0:	fmul	d7, d1, d3
    3ca4:	fmul	d5, d0, d2
    3ca8:	fmul	d16, d0, d3
    3cac:	fmov	d18, d0
    3cb0:	fmul	d17, d2, d1
    3cb4:	fmov	d4, d1
    3cb8:	fsub	d0, d5, d7
    3cbc:	fadd	d1, d16, d17
    3cc0:	fcmp	d0, d0
    3cc4:	cset	w0, vs
    3cc8:	fcmp	d1, d1
    3ccc:	cset	w1, vs
    3cd0:	ands	w0, w0, w1
    3cd4:	b.eq	3e0c <__muldc3@@GCC_4.0.0+0x16c>  // b.none
    3cd8:	fabs	d19, d18
    3cdc:	mov	x1, #0x7fefffffffffffff    	// #9218868437227405311
    3ce0:	fmov	d6, x1
    3ce4:	fabs	d21, d4
    3ce8:	fcmp	d19, d6
    3cec:	b.le	3e10 <__muldc3@@GCC_4.0.0+0x170>
    3cf0:	mov	x1, #0x7fefffffffffffff    	// #9218868437227405311
    3cf4:	fmov	d6, x1
    3cf8:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    3cfc:	fmov	d20, x1
    3d00:	fcmp	d19, d6
    3d04:	cset	w1, gt
    3d08:	fcmp	d21, d6
    3d0c:	scvtf	d19, w1
    3d10:	cset	w1, gt
    3d14:	fcmp	d2, d2
    3d18:	scvtf	d6, w1
    3d1c:	bif	v18.8b, v19.8b, v20.8b
    3d20:	bif	v4.8b, v6.8b, v20.8b
    3d24:	b.vs	3e50 <__muldc3@@GCC_4.0.0+0x1b0>
    3d28:	fcmp	d3, d3
    3d2c:	b.vs	3e5c <__muldc3@@GCC_4.0.0+0x1bc>
    3d30:	fabs	d19, d2
    3d34:	mov	x1, #0x7fefffffffffffff    	// #9218868437227405311
    3d38:	fmov	d6, x1
    3d3c:	fabs	d20, d3
    3d40:	fcmp	d19, d6
    3d44:	b.gt	3dac <__muldc3@@GCC_4.0.0+0x10c>
    3d48:	fcmp	d20, d6
    3d4c:	b.gt	3dac <__muldc3@@GCC_4.0.0+0x10c>
    3d50:	cbnz	w0, 3dec <__muldc3@@GCC_4.0.0+0x14c>
    3d54:	fabs	d5, d5
    3d58:	fcmp	d5, d6
    3d5c:	b.gt	3d78 <__muldc3@@GCC_4.0.0+0xd8>
    3d60:	fabs	d7, d7
    3d64:	fcmp	d7, d6
    3d68:	b.gt	3d78 <__muldc3@@GCC_4.0.0+0xd8>
    3d6c:	fabs	d16, d16
    3d70:	fcmp	d16, d6
    3d74:	b.le	3e20 <__muldc3@@GCC_4.0.0+0x180>
    3d78:	fcmp	d18, d18
    3d7c:	b.vs	3e98 <__muldc3@@GCC_4.0.0+0x1f8>
    3d80:	fcmp	d4, d4
    3d84:	b.vs	3e84 <__muldc3@@GCC_4.0.0+0x1e4>
    3d88:	fcmp	d2, d2
    3d8c:	b.vs	3e70 <__muldc3@@GCC_4.0.0+0x1d0>
    3d90:	fcmp	d3, d3
    3d94:	b.vc	3dec <__muldc3@@GCC_4.0.0+0x14c>
    3d98:	movi	d0, #0x0
    3d9c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3da0:	fmov	d1, x0
    3da4:	bif	v3.8b, v0.8b, v1.8b
    3da8:	b	3dec <__muldc3@@GCC_4.0.0+0x14c>
    3dac:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    3db0:	fmov	d0, x0
    3db4:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3db8:	fmov	d5, x0
    3dbc:	fcmp	d19, d0
    3dc0:	cset	w0, gt
    3dc4:	fcmp	d20, d0
    3dc8:	scvtf	d1, w0
    3dcc:	cset	w0, gt
    3dd0:	fcmp	d18, d18
    3dd4:	scvtf	d0, w0
    3dd8:	bif	v2.8b, v1.8b, v5.8b
    3ddc:	bif	v3.8b, v0.8b, v5.8b
    3de0:	b.vs	3e30 <__muldc3@@GCC_4.0.0+0x190>
    3de4:	fcmp	d4, d4
    3de8:	b.vs	3e3c <__muldc3@@GCC_4.0.0+0x19c>
    3dec:	fmul	d5, d4, d3
    3df0:	fmul	d4, d4, d2
    3df4:	fmadd	d3, d18, d3, d4
    3df8:	fnmsub	d2, d18, d2, d5
    3dfc:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
    3e00:	fmov	d1, x0
    3e04:	fmul	d0, d2, d1
    3e08:	fmul	d1, d3, d1
    3e0c:	ret
    3e10:	fcmp	d21, d6
    3e14:	b.gt	3cf0 <__muldc3@@GCC_4.0.0+0x50>
    3e18:	mov	w0, #0x0                   	// #0
    3e1c:	b	3d30 <__muldc3@@GCC_4.0.0+0x90>
    3e20:	fabs	d17, d17
    3e24:	fcmp	d17, d6
    3e28:	b.gt	3d78 <__muldc3@@GCC_4.0.0+0xd8>
    3e2c:	ret
    3e30:	movi	d0, #0x0
    3e34:	bif	v18.8b, v0.8b, v5.8b
    3e38:	b	3de4 <__muldc3@@GCC_4.0.0+0x144>
    3e3c:	movi	d0, #0x0
    3e40:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3e44:	fmov	d1, x0
    3e48:	bif	v4.8b, v0.8b, v1.8b
    3e4c:	b	3dec <__muldc3@@GCC_4.0.0+0x14c>
    3e50:	movi	d6, #0x0
    3e54:	bif	v2.8b, v6.8b, v20.8b
    3e58:	b	3d28 <__muldc3@@GCC_4.0.0+0x88>
    3e5c:	movi	d6, #0x0
    3e60:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    3e64:	fmov	d19, x1
    3e68:	bif	v3.8b, v6.8b, v19.8b
    3e6c:	b	3d30 <__muldc3@@GCC_4.0.0+0x90>
    3e70:	movi	d0, #0x0
    3e74:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3e78:	fmov	d1, x0
    3e7c:	bif	v2.8b, v0.8b, v1.8b
    3e80:	b	3d90 <__muldc3@@GCC_4.0.0+0xf0>
    3e84:	movi	d0, #0x0
    3e88:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3e8c:	fmov	d1, x0
    3e90:	bif	v4.8b, v0.8b, v1.8b
    3e94:	b	3d88 <__muldc3@@GCC_4.0.0+0xe8>
    3e98:	movi	d0, #0x0
    3e9c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3ea0:	fmov	d1, x0
    3ea4:	bif	v18.8b, v0.8b, v1.8b
    3ea8:	b	3d80 <__muldc3@@GCC_4.0.0+0xe0>
    3eac:	nop

0000000000003eb0 <__multc3@@GCC_4.0.0>:
    3eb0:	stp	x29, x30, [sp, #-256]!
    3eb4:	mov	x29, sp
    3eb8:	stp	x19, x20, [sp, #16]
    3ebc:	stp	x23, x24, [sp, #48]
    3ec0:	stp	x25, x26, [sp, #64]
    3ec4:	str	q0, [sp, #96]
    3ec8:	str	q2, [sp, #112]
    3ecc:	ldp	x20, x25, [sp, #96]
    3ed0:	stp	x21, x22, [sp, #32]
    3ed4:	ldp	x19, x24, [sp, #112]
    3ed8:	stp	x19, x24, [sp, #96]
    3edc:	stp	x20, x25, [sp, #112]
    3ee0:	stp	x27, x28, [sp, #80]
    3ee4:	ldr	q0, [sp, #112]
    3ee8:	str	q1, [sp, #128]
    3eec:	str	q3, [sp, #144]
    3ef0:	ldp	x21, x23, [sp, #128]
    3ef4:	ldp	x22, x26, [sp, #144]
    3ef8:	ldr	q1, [sp, #96]
    3efc:	bl	2b10 <__multf3@plt>
    3f00:	stp	x22, x26, [sp, #96]
    3f04:	stp	x21, x23, [sp, #112]
    3f08:	ldr	q1, [sp, #96]
    3f0c:	str	q0, [sp, #128]
    3f10:	ldr	q0, [sp, #112]
    3f14:	ldp	x28, x27, [sp, #128]
    3f18:	bl	2b10 <__multf3@plt>
    3f1c:	str	q0, [sp, #128]
    3f20:	ldp	x1, x0, [sp, #128]
    3f24:	stp	x22, x26, [sp, #96]
    3f28:	stp	x20, x25, [sp, #112]
    3f2c:	ldr	q1, [sp, #96]
    3f30:	ldr	q0, [sp, #112]
    3f34:	str	x1, [sp, #144]
    3f38:	str	x0, [sp, #168]
    3f3c:	bl	2b10 <__multf3@plt>
    3f40:	str	q0, [sp, #128]
    3f44:	ldp	x1, x0, [sp, #128]
    3f48:	stp	x21, x23, [sp, #96]
    3f4c:	stp	x19, x24, [sp, #112]
    3f50:	ldr	q1, [sp, #96]
    3f54:	ldr	q0, [sp, #112]
    3f58:	stp	x1, x0, [sp, #176]
    3f5c:	bl	2b10 <__multf3@plt>
    3f60:	str	q0, [sp, #128]
    3f64:	ldp	x0, x2, [sp, #136]
    3f68:	str	x2, [sp, #96]
    3f6c:	ldr	x2, [sp, #168]
    3f70:	str	x2, [sp, #104]
    3f74:	stp	x28, x27, [sp, #112]
    3f78:	ldr	q1, [sp, #96]
    3f7c:	ldr	q0, [sp, #112]
    3f80:	str	x0, [sp, #224]
    3f84:	bl	2d80 <__subtf3@plt>
    3f88:	ldr	x1, [sp, #176]
    3f8c:	str	x1, [sp, #112]
    3f90:	ldr	x2, [sp, #128]
    3f94:	str	x2, [sp, #96]
    3f98:	ldr	x1, [sp, #224]
    3f9c:	str	x1, [sp, #104]
    3fa0:	ldr	x0, [sp, #184]
    3fa4:	ldr	q1, [sp, #96]
    3fa8:	str	x0, [sp, #120]
    3fac:	str	q0, [sp, #96]
    3fb0:	ldr	q0, [sp, #112]
    3fb4:	bl	2c20 <__addtf3@plt>
    3fb8:	str	q0, [sp, #112]
    3fbc:	ldr	q1, [sp, #96]
    3fc0:	mov	v0.16b, v1.16b
    3fc4:	bl	2d30 <__unordtf2@plt>
    3fc8:	cmp	w0, #0x0
    3fcc:	ldr	q0, [sp, #112]
    3fd0:	cset	w1, ne  // ne = any
    3fd4:	str	w1, [sp, #192]
    3fd8:	mov	v1.16b, v0.16b
    3fdc:	bl	2d30 <__unordtf2@plt>
    3fe0:	cmp	w0, #0x0
    3fe4:	ldr	w1, [sp, #192]
    3fe8:	cset	w0, ne  // ne = any
    3fec:	ands	w0, w0, w1
    3ff0:	str	w0, [sp, #236]
    3ff4:	b.eq	4320 <__multc3@@GCC_4.0.0+0x470>  // b.none
    3ff8:	adrp	x1, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    3ffc:	add	x1, x1, #0x5d0
    4000:	and	x0, x25, #0x7fffffffffffffff
    4004:	stp	x20, x0, [sp, #192]
    4008:	ldr	q1, [x1]
    400c:	and	x1, x23, #0x7fffffffffffffff
    4010:	ldr	q0, [sp, #192]
    4014:	str	x1, [sp, #192]
    4018:	str	x0, [sp, #208]
    401c:	bl	2d30 <__unordtf2@plt>
    4020:	cbnz	w0, 4048 <__multc3@@GCC_4.0.0+0x198>
    4024:	adrp	x1, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4028:	add	x1, x1, #0x5d0
    402c:	ldr	x0, [sp, #208]
    4030:	stp	x20, x0, [sp, #192]
    4034:	ldr	q1, [x1]
    4038:	ldr	q0, [sp, #192]
    403c:	bl	2bc0 <__letf2@plt>
    4040:	cmp	w0, #0x0
    4044:	b.gt	408c <__multc3@@GCC_4.0.0+0x1dc>
    4048:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    404c:	add	x0, x0, #0x5d0
    4050:	ldr	q1, [x0]
    4054:	and	x0, x23, #0x7fffffffffffffff
    4058:	stp	x21, x0, [sp, #192]
    405c:	ldr	q0, [sp, #192]
    4060:	bl	2d30 <__unordtf2@plt>
    4064:	cbnz	w0, 4528 <__multc3@@GCC_4.0.0+0x678>
    4068:	adrp	x1, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    406c:	add	x1, x1, #0x5d0
    4070:	and	x0, x23, #0x7fffffffffffffff
    4074:	stp	x21, x0, [sp, #192]
    4078:	ldr	q1, [x1]
    407c:	ldr	q0, [sp, #192]
    4080:	bl	2bc0 <__letf2@plt>
    4084:	cmp	w0, #0x0
    4088:	b.le	4528 <__multc3@@GCC_4.0.0+0x678>
    408c:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4090:	add	x0, x0, #0x5d0
    4094:	mov	w1, #0x1                   	// #1
    4098:	str	w1, [sp, #240]
    409c:	ldr	q1, [x0]
    40a0:	ldr	x0, [sp, #208]
    40a4:	stp	x20, x0, [sp, #192]
    40a8:	ldr	q0, [sp, #192]
    40ac:	bl	2d30 <__unordtf2@plt>
    40b0:	ldr	w1, [sp, #240]
    40b4:	cbz	w0, 43b4 <__multc3@@GCC_4.0.0+0x504>
    40b8:	eor	w0, w1, #0x1
    40bc:	mov	w1, #0x1                   	// #1
    40c0:	and	w0, w0, #0x1
    40c4:	str	w1, [sp, #240]
    40c8:	bl	2d70 <__floatsitf@plt>
    40cc:	str	q0, [sp, #208]
    40d0:	ldp	x20, x0, [sp, #208]
    40d4:	and	x1, x23, #0x7fffffffffffffff
    40d8:	stp	x21, x1, [sp, #192]
    40dc:	ldr	q0, [sp, #192]
    40e0:	bfxil	x25, x0, #0, #63
    40e4:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    40e8:	add	x0, x0, #0x5d0
    40ec:	ldr	q1, [x0]
    40f0:	bl	2d30 <__unordtf2@plt>
    40f4:	ldr	w1, [sp, #240]
    40f8:	cbz	w0, 438c <__multc3@@GCC_4.0.0+0x4dc>
    40fc:	eor	w0, w1, #0x1
    4100:	and	w0, w0, #0x1
    4104:	bl	2d70 <__floatsitf@plt>
    4108:	str	q0, [sp, #240]
    410c:	ldp	x21, x0, [sp, #240]
    4110:	stp	x19, x24, [sp, #192]
    4114:	stp	x19, x24, [sp, #208]
    4118:	ldr	q1, [sp, #192]
    411c:	ldr	q0, [sp, #208]
    4120:	bfxil	x23, x0, #0, #63
    4124:	bl	2d30 <__unordtf2@plt>
    4128:	cbnz	w0, 45c4 <__multc3@@GCC_4.0.0+0x714>
    412c:	stp	x22, x26, [sp, #192]
    4130:	stp	x22, x26, [sp, #208]
    4134:	ldr	q1, [sp, #192]
    4138:	ldr	q0, [sp, #208]
    413c:	bl	2d30 <__unordtf2@plt>
    4140:	cbnz	w0, 45ac <__multc3@@GCC_4.0.0+0x6fc>
    4144:	adrp	x1, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4148:	add	x1, x1, #0x5d0
    414c:	and	x0, x24, #0x7fffffffffffffff
    4150:	stp	x19, x0, [sp, #192]
    4154:	ldr	q1, [x1]
    4158:	and	x1, x26, #0x7fffffffffffffff
    415c:	ldr	q0, [sp, #192]
    4160:	str	x1, [sp, #192]
    4164:	str	x0, [sp, #208]
    4168:	bl	2d30 <__unordtf2@plt>
    416c:	cbnz	w0, 4194 <__multc3@@GCC_4.0.0+0x2e4>
    4170:	adrp	x1, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4174:	add	x1, x1, #0x5d0
    4178:	ldr	x0, [sp, #208]
    417c:	stp	x19, x0, [sp, #192]
    4180:	ldr	q1, [x1]
    4184:	ldr	q0, [sp, #192]
    4188:	bl	2bc0 <__letf2@plt>
    418c:	cmp	w0, #0x0
    4190:	b.gt	41d8 <__multc3@@GCC_4.0.0+0x328>
    4194:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4198:	add	x0, x0, #0x5d0
    419c:	ldr	q1, [x0]
    41a0:	and	x0, x26, #0x7fffffffffffffff
    41a4:	stp	x22, x0, [sp, #192]
    41a8:	ldr	q0, [sp, #192]
    41ac:	bl	2d30 <__unordtf2@plt>
    41b0:	cbnz	w0, 43dc <__multc3@@GCC_4.0.0+0x52c>
    41b4:	adrp	x1, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    41b8:	add	x1, x1, #0x5d0
    41bc:	and	x0, x26, #0x7fffffffffffffff
    41c0:	stp	x22, x0, [sp, #192]
    41c4:	ldr	q1, [x1]
    41c8:	ldr	q0, [sp, #192]
    41cc:	bl	2bc0 <__letf2@plt>
    41d0:	cmp	w0, #0x0
    41d4:	b.le	43dc <__multc3@@GCC_4.0.0+0x52c>
    41d8:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    41dc:	add	x0, x0, #0x5d0
    41e0:	ldr	x28, [sp, #208]
    41e4:	stp	x19, x28, [sp, #96]
    41e8:	ldr	q1, [x0]
    41ec:	ldr	q0, [sp, #96]
    41f0:	mov	w27, #0x1                   	// #1
    41f4:	bl	2d30 <__unordtf2@plt>
    41f8:	cbz	w0, 4368 <__multc3@@GCC_4.0.0+0x4b8>
    41fc:	eor	w0, w27, #0x1
    4200:	and	x28, x26, #0x7fffffffffffffff
    4204:	and	w0, w0, #0x1
    4208:	bl	2d70 <__floatsitf@plt>
    420c:	str	q0, [sp, #112]
    4210:	mov	w27, #0x1                   	// #1
    4214:	ldp	x19, x0, [sp, #112]
    4218:	stp	x22, x28, [sp, #96]
    421c:	ldr	q0, [sp, #96]
    4220:	bfxil	x24, x0, #0, #63
    4224:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4228:	add	x0, x0, #0x5d0
    422c:	ldr	q1, [x0]
    4230:	bl	2d30 <__unordtf2@plt>
    4234:	cbz	w0, 4344 <__multc3@@GCC_4.0.0+0x494>
    4238:	eor	w0, w27, #0x1
    423c:	and	w0, w0, #0x1
    4240:	bl	2d70 <__floatsitf@plt>
    4244:	str	q0, [sp, #128]
    4248:	ldp	x22, x0, [sp, #128]
    424c:	stp	x20, x25, [sp, #96]
    4250:	stp	x20, x25, [sp, #112]
    4254:	ldr	q1, [sp, #96]
    4258:	ldr	q0, [sp, #112]
    425c:	bfxil	x26, x0, #0, #63
    4260:	bl	2d30 <__unordtf2@plt>
    4264:	cbnz	w0, 457c <__multc3@@GCC_4.0.0+0x6cc>
    4268:	stp	x21, x23, [sp, #96]
    426c:	stp	x21, x23, [sp, #112]
    4270:	ldr	q1, [sp, #96]
    4274:	ldr	q0, [sp, #112]
    4278:	bl	2d30 <__unordtf2@plt>
    427c:	cbnz	w0, 4594 <__multc3@@GCC_4.0.0+0x6e4>
    4280:	stp	x19, x24, [sp, #96]
    4284:	stp	x20, x25, [sp, #112]
    4288:	ldr	q1, [sp, #96]
    428c:	ldr	q0, [sp, #112]
    4290:	bl	2b10 <__multf3@plt>
    4294:	stp	x22, x26, [sp, #96]
    4298:	stp	x21, x23, [sp, #112]
    429c:	ldr	q1, [sp, #96]
    42a0:	str	q0, [sp, #96]
    42a4:	ldr	q0, [sp, #112]
    42a8:	bl	2b10 <__multf3@plt>
    42ac:	mov	v1.16b, v0.16b
    42b0:	ldr	q2, [sp, #96]
    42b4:	mov	v0.16b, v2.16b
    42b8:	bl	2d80 <__subtf3@plt>
    42bc:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    42c0:	add	x0, x0, #0x5e0
    42c4:	ldr	q1, [x0]
    42c8:	bl	2b10 <__multf3@plt>
    42cc:	stp	x22, x26, [sp, #96]
    42d0:	stp	x20, x25, [sp, #112]
    42d4:	ldr	q1, [sp, #96]
    42d8:	str	q0, [sp, #96]
    42dc:	ldr	q0, [sp, #112]
    42e0:	bl	2b10 <__multf3@plt>
    42e4:	stp	x19, x24, [sp, #112]
    42e8:	stp	x21, x23, [sp, #128]
    42ec:	ldr	q1, [sp, #112]
    42f0:	str	q0, [sp, #112]
    42f4:	ldr	q0, [sp, #128]
    42f8:	bl	2b10 <__multf3@plt>
    42fc:	mov	v1.16b, v0.16b
    4300:	ldr	q2, [sp, #112]
    4304:	mov	v0.16b, v2.16b
    4308:	bl	2c20 <__addtf3@plt>
    430c:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4310:	add	x0, x0, #0x5e0
    4314:	ldr	q1, [x0]
    4318:	bl	2b10 <__multf3@plt>
    431c:	str	q0, [sp, #112]
    4320:	ldp	x19, x20, [sp, #16]
    4324:	ldp	x21, x22, [sp, #32]
    4328:	ldp	x23, x24, [sp, #48]
    432c:	ldp	x25, x26, [sp, #64]
    4330:	ldp	x27, x28, [sp, #80]
    4334:	ldr	q0, [sp, #96]
    4338:	ldr	q1, [sp, #112]
    433c:	ldp	x29, x30, [sp], #256
    4340:	ret
    4344:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4348:	add	x0, x0, #0x5d0
    434c:	stp	x22, x28, [sp, #96]
    4350:	ldr	q1, [x0]
    4354:	ldr	q0, [sp, #96]
    4358:	bl	2bc0 <__letf2@plt>
    435c:	cmp	w0, #0x0
    4360:	cset	w27, le
    4364:	b	4238 <__multc3@@GCC_4.0.0+0x388>
    4368:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    436c:	add	x0, x0, #0x5d0
    4370:	stp	x19, x28, [sp, #96]
    4374:	ldr	q1, [x0]
    4378:	ldr	q0, [sp, #96]
    437c:	bl	2bc0 <__letf2@plt>
    4380:	cmp	w0, #0x0
    4384:	cset	w27, le
    4388:	b	41fc <__multc3@@GCC_4.0.0+0x34c>
    438c:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4390:	add	x0, x0, #0x5d0
    4394:	and	x1, x23, #0x7fffffffffffffff
    4398:	stp	x21, x1, [sp, #192]
    439c:	ldr	q1, [x0]
    43a0:	ldr	q0, [sp, #192]
    43a4:	bl	2bc0 <__letf2@plt>
    43a8:	cmp	w0, #0x0
    43ac:	cset	w1, le
    43b0:	b	40fc <__multc3@@GCC_4.0.0+0x24c>
    43b4:	adrp	x1, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    43b8:	add	x1, x1, #0x5d0
    43bc:	ldr	x0, [sp, #208]
    43c0:	stp	x20, x0, [sp, #192]
    43c4:	ldr	q1, [x1]
    43c8:	ldr	q0, [sp, #192]
    43cc:	bl	2bc0 <__letf2@plt>
    43d0:	cmp	w0, #0x0
    43d4:	cset	w1, le
    43d8:	b	40b8 <__multc3@@GCC_4.0.0+0x208>
    43dc:	ldr	w0, [sp, #236]
    43e0:	cbnz	w0, 4280 <__multc3@@GCC_4.0.0+0x3d0>
    43e4:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    43e8:	add	x0, x0, #0x5d0
    43ec:	and	x27, x27, #0x7fffffffffffffff
    43f0:	stp	x28, x27, [sp, #192]
    43f4:	ldr	q1, [x0]
    43f8:	ldr	q0, [sp, #192]
    43fc:	bl	2d30 <__unordtf2@plt>
    4400:	cbnz	w0, 4424 <__multc3@@GCC_4.0.0+0x574>
    4404:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4408:	add	x0, x0, #0x5d0
    440c:	stp	x28, x27, [sp, #192]
    4410:	ldr	q1, [x0]
    4414:	ldr	q0, [sp, #192]
    4418:	bl	2bc0 <__letf2@plt>
    441c:	cmp	w0, #0x0
    4420:	b.gt	44b0 <__multc3@@GCC_4.0.0+0x600>
    4424:	ldr	x0, [sp, #168]
    4428:	ldr	x28, [sp, #144]
    442c:	and	x27, x0, #0x7fffffffffffffff
    4430:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4434:	add	x0, x0, #0x5d0
    4438:	stp	x28, x27, [sp, #192]
    443c:	ldr	q1, [x0]
    4440:	ldr	q0, [sp, #192]
    4444:	bl	2d30 <__unordtf2@plt>
    4448:	cbnz	w0, 446c <__multc3@@GCC_4.0.0+0x5bc>
    444c:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4450:	add	x0, x0, #0x5d0
    4454:	stp	x28, x27, [sp, #144]
    4458:	ldr	q1, [x0]
    445c:	ldr	q0, [sp, #144]
    4460:	bl	2bc0 <__letf2@plt>
    4464:	cmp	w0, #0x0
    4468:	b.gt	44b0 <__multc3@@GCC_4.0.0+0x600>
    446c:	ldp	x28, x0, [sp, #176]
    4470:	and	x27, x0, #0x7fffffffffffffff
    4474:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4478:	add	x0, x0, #0x5d0
    447c:	stp	x28, x27, [sp, #144]
    4480:	ldr	q0, [sp, #144]
    4484:	ldr	q1, [x0]
    4488:	bl	2d30 <__unordtf2@plt>
    448c:	cbnz	w0, 4530 <__multc3@@GCC_4.0.0+0x680>
    4490:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4494:	add	x0, x0, #0x5d0
    4498:	stp	x28, x27, [sp, #144]
    449c:	ldr	q1, [x0]
    44a0:	ldr	q0, [sp, #144]
    44a4:	bl	2bc0 <__letf2@plt>
    44a8:	cmp	w0, #0x0
    44ac:	b.le	4530 <__multc3@@GCC_4.0.0+0x680>
    44b0:	stp	x20, x25, [sp, #96]
    44b4:	stp	x20, x25, [sp, #112]
    44b8:	ldr	q1, [sp, #96]
    44bc:	ldr	q0, [sp, #112]
    44c0:	bl	2d30 <__unordtf2@plt>
    44c4:	cbnz	w0, 460c <__multc3@@GCC_4.0.0+0x75c>
    44c8:	stp	x21, x23, [sp, #96]
    44cc:	stp	x21, x23, [sp, #112]
    44d0:	ldr	q1, [sp, #96]
    44d4:	ldr	q0, [sp, #112]
    44d8:	bl	2d30 <__unordtf2@plt>
    44dc:	cbnz	w0, 45f4 <__multc3@@GCC_4.0.0+0x744>
    44e0:	stp	x19, x24, [sp, #96]
    44e4:	stp	x19, x24, [sp, #112]
    44e8:	ldr	q1, [sp, #96]
    44ec:	ldr	q0, [sp, #112]
    44f0:	bl	2d30 <__unordtf2@plt>
    44f4:	cbnz	w0, 45dc <__multc3@@GCC_4.0.0+0x72c>
    44f8:	stp	x22, x26, [sp, #96]
    44fc:	stp	x22, x26, [sp, #112]
    4500:	ldr	q1, [sp, #96]
    4504:	ldr	q0, [sp, #112]
    4508:	bl	2d30 <__unordtf2@plt>
    450c:	cbz	w0, 4280 <__multc3@@GCC_4.0.0+0x3d0>
    4510:	mov	x22, #0x0                   	// #0
    4514:	mov	x0, #0x0                   	// #0
    4518:	tbz	x26, #63, 4520 <__multc3@@GCC_4.0.0+0x670>
    451c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    4520:	mov	x26, x0
    4524:	b	4280 <__multc3@@GCC_4.0.0+0x3d0>
    4528:	str	wzr, [sp, #236]
    452c:	b	4144 <__multc3@@GCC_4.0.0+0x294>
    4530:	ldr	x0, [sp, #224]
    4534:	ldr	x28, [sp, #128]
    4538:	and	x27, x0, #0x7fffffffffffffff
    453c:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4540:	add	x0, x0, #0x5d0
    4544:	stp	x28, x27, [sp, #144]
    4548:	ldr	q1, [x0]
    454c:	ldr	q0, [sp, #144]
    4550:	bl	2d30 <__unordtf2@plt>
    4554:	cbnz	w0, 4320 <__multc3@@GCC_4.0.0+0x470>
    4558:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    455c:	add	x0, x0, #0x5d0
    4560:	stp	x28, x27, [sp, #128]
    4564:	ldr	q1, [x0]
    4568:	ldr	q0, [sp, #128]
    456c:	bl	2bc0 <__letf2@plt>
    4570:	cmp	w0, #0x0
    4574:	b.gt	44b0 <__multc3@@GCC_4.0.0+0x600>
    4578:	b	4320 <__multc3@@GCC_4.0.0+0x470>
    457c:	mov	x20, #0x0                   	// #0
    4580:	mov	x0, #0x0                   	// #0
    4584:	tbz	x25, #63, 458c <__multc3@@GCC_4.0.0+0x6dc>
    4588:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    458c:	mov	x25, x0
    4590:	b	4268 <__multc3@@GCC_4.0.0+0x3b8>
    4594:	mov	x21, #0x0                   	// #0
    4598:	mov	x0, #0x0                   	// #0
    459c:	tbz	x23, #63, 45a4 <__multc3@@GCC_4.0.0+0x6f4>
    45a0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    45a4:	mov	x23, x0
    45a8:	b	4280 <__multc3@@GCC_4.0.0+0x3d0>
    45ac:	mov	x22, #0x0                   	// #0
    45b0:	mov	x0, #0x0                   	// #0
    45b4:	tbz	x26, #63, 45bc <__multc3@@GCC_4.0.0+0x70c>
    45b8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    45bc:	mov	x26, x0
    45c0:	b	4144 <__multc3@@GCC_4.0.0+0x294>
    45c4:	mov	x19, #0x0                   	// #0
    45c8:	mov	x0, #0x0                   	// #0
    45cc:	tbz	x24, #63, 45d4 <__multc3@@GCC_4.0.0+0x724>
    45d0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    45d4:	mov	x24, x0
    45d8:	b	412c <__multc3@@GCC_4.0.0+0x27c>
    45dc:	mov	x19, #0x0                   	// #0
    45e0:	mov	x0, #0x0                   	// #0
    45e4:	tbz	x24, #63, 45ec <__multc3@@GCC_4.0.0+0x73c>
    45e8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    45ec:	mov	x24, x0
    45f0:	b	44f8 <__multc3@@GCC_4.0.0+0x648>
    45f4:	mov	x21, #0x0                   	// #0
    45f8:	mov	x0, #0x0                   	// #0
    45fc:	tbz	x23, #63, 4604 <__multc3@@GCC_4.0.0+0x754>
    4600:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    4604:	mov	x23, x0
    4608:	b	44e0 <__multc3@@GCC_4.0.0+0x630>
    460c:	mov	x20, #0x0                   	// #0
    4610:	mov	x0, #0x0                   	// #0
    4614:	tbz	x25, #63, 461c <__multc3@@GCC_4.0.0+0x76c>
    4618:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    461c:	mov	x25, x0
    4620:	b	44c8 <__multc3@@GCC_4.0.0+0x618>
    4624:	nop
    4628:	fcvt	s19, h2
    462c:	fcvt	s16, h3
    4630:	mov	v17.h[0], v0.h[0]
    4634:	mov	v18.h[0], v1.h[0]
    4638:	fcvt	s20, h1
    463c:	fcvt	s21, h0
    4640:	fabs	s5, s19
    4644:	fabs	s6, s16
    4648:	fcvt	h5, s5
    464c:	fcvt	h6, s6
    4650:	fcvt	s5, h5
    4654:	fcvt	s6, h6
    4658:	fcmpe	s5, s6
    465c:	b.pl	47a0 <__multc3@@GCC_4.0.0+0x8f0>  // b.nfrst
    4660:	fdiv	s4, s19, s16
    4664:	fcvt	h4, s4
    4668:	fcvt	s4, h4
    466c:	fmadd	s1, s4, s19, s16
    4670:	fmadd	s0, s4, s21, s20
    4674:	fnmsub	s4, s4, s20, s21
    4678:	fcvt	h1, s1
    467c:	fcvt	s1, h1
    4680:	fdiv	s0, s0, s1
    4684:	fdiv	s4, s4, s1
    4688:	fcvt	h0, s0
    468c:	fcvt	h1, s4
    4690:	fcvt	s7, h0
    4694:	fcvt	s4, h1
    4698:	fcmp	s7, s7
    469c:	cset	w1, vs
    46a0:	fcmp	s4, s4
    46a4:	cset	w0, vs
    46a8:	tst	w1, w0
    46ac:	b.eq	479c <__multc3@@GCC_4.0.0+0x8ec>  // b.none
    46b0:	fcmp	s19, #0.0
    46b4:	b.eq	47bc <__multc3@@GCC_4.0.0+0x90c>  // b.none
    46b8:	fabs	s4, s21
    46bc:	mov	w0, #0xe000                	// #57344
    46c0:	movk	w0, #0x477f, lsl #16
    46c4:	fmov	s7, w0
    46c8:	fcvt	h4, s4
    46cc:	fcvt	s4, h4
    46d0:	fcmp	s4, s7
    46d4:	b.gt	4800 <__multc3@@GCC_4.0.0+0x950>
    46d8:	fabs	s22, s20
    46dc:	fcvt	h22, s22
    46e0:	fcvt	s22, h22
    46e4:	fcmp	s22, s7
    46e8:	b.gt	4800 <__multc3@@GCC_4.0.0+0x950>
    46ec:	mov	w0, #0xe000                	// #57344
    46f0:	movk	w0, #0x477f, lsl #16
    46f4:	fmov	s7, w0
    46f8:	fcmp	s5, s7
    46fc:	cset	w0, le
    4700:	fcmp	s6, s7
    4704:	cset	w1, le
    4708:	cmp	w0, #0x0
    470c:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    4710:	b.ne	479c <__multc3@@GCC_4.0.0+0x8ec>  // b.any
    4714:	fcmp	s4, s7
    4718:	b.hi	479c <__multc3@@GCC_4.0.0+0x8ec>  // b.pmore
    471c:	fabs	s4, s20
    4720:	fcvt	h4, s4
    4724:	fcvt	s4, h4
    4728:	fcmp	s4, s7
    472c:	b.hi	479c <__multc3@@GCC_4.0.0+0x8ec>  // b.pmore
    4730:	eor	w3, w1, #0x1
    4734:	eor	w2, w0, #0x1
    4738:	umov	w1, v2.h[0]
    473c:	umov	w0, v3.h[0]
    4740:	scvtf	d2, w3
    4744:	scvtf	d0, w2
    4748:	movi	d4, #0x0
    474c:	fcvt	h1, d2
    4750:	fcvt	h0, d0
    4754:	umov	w3, v1.h[0]
    4758:	umov	w2, v0.h[0]
    475c:	bfxil	w0, w3, #0, #15
    4760:	bfxil	w1, w2, #0, #15
    4764:	dup	v2.4h, w0
    4768:	dup	v1.4h, w1
    476c:	fcvt	s2, h2
    4770:	fcvt	s3, h1
    4774:	fmul	s0, s2, s20
    4778:	fmul	s1, s2, s21
    477c:	fmadd	s0, s3, s21, s0
    4780:	fnmsub	s1, s3, s20, s1
    4784:	fcvt	d0, s0
    4788:	fcvt	d1, s1
    478c:	fmul	d0, d0, d4
    4790:	fmul	d1, d1, d4
    4794:	fcvt	h0, d0
    4798:	fcvt	h1, d1
    479c:	ret
    47a0:	fdiv	s4, s16, s19
    47a4:	fcvt	h4, s4
    47a8:	fcvt	s4, h4
    47ac:	fmadd	s1, s4, s16, s19
    47b0:	fmadd	s0, s4, s20, s21
    47b4:	fmsub	s4, s4, s21, s20
    47b8:	b	4678 <__multc3@@GCC_4.0.0+0x7c8>
    47bc:	fcmp	s16, #0.0
    47c0:	b.ne	46b8 <__multc3@@GCC_4.0.0+0x808>  // b.any
    47c4:	fcmp	s21, s21
    47c8:	cset	w0, vc
    47cc:	fcmp	s20, s20
    47d0:	cset	w1, vc
    47d4:	orr	w0, w0, w1
    47d8:	cbz	w0, 46b8 <__multc3@@GCC_4.0.0+0x808>
    47dc:	umov	w0, v2.h[0]
    47e0:	movi	v1.4h, #0x7c, lsl #8
    47e4:	tbnz	w0, #15, 489c <__multc3@@GCC_4.0.0+0x9ec>
    47e8:	fcvt	s1, h1
    47ec:	fmul	s0, s1, s21
    47f0:	fmul	s1, s1, s20
    47f4:	fcvt	h0, s0
    47f8:	fcvt	h1, s1
    47fc:	ret
    4800:	mov	w0, #0xe000                	// #57344
    4804:	movk	w0, #0x477f, lsl #16
    4808:	fmov	s7, w0
    480c:	fcmp	s5, s7
    4810:	b.hi	46ec <__multc3@@GCC_4.0.0+0x83c>  // b.pmore
    4814:	fcmp	s6, s7
    4818:	b.hi	46ec <__multc3@@GCC_4.0.0+0x83c>  // b.pmore
    481c:	fcmp	s4, s7
    4820:	mov	w2, #0x7f800000            	// #2139095040
    4824:	fmov	s4, w2
    4828:	fabs	s1, s20
    482c:	umov	w0, v17.h[0]
    4830:	umov	w1, v18.h[0]
    4834:	cset	w2, gt
    4838:	fcvt	h1, s1
    483c:	scvtf	d2, w2
    4840:	fcvt	s1, h1
    4844:	fcvt	h0, d2
    4848:	fcmp	s1, s7
    484c:	umov	w2, v0.h[0]
    4850:	bfxil	w0, w2, #0, #15
    4854:	dup	v0.4h, w0
    4858:	cset	w0, gt
    485c:	scvtf	d1, w0
    4860:	fcvt	s2, h0
    4864:	fcvt	h0, d1
    4868:	fmul	s1, s2, s16
    486c:	umov	w0, v0.h[0]
    4870:	bfxil	w1, w0, #0, #15
    4874:	dup	v3.4h, w1
    4878:	fcvt	s3, h3
    487c:	fmul	s0, s3, s16
    4880:	fnmsub	s1, s3, s19, s1
    4884:	fmadd	s0, s2, s19, s0
    4888:	fmul	s1, s1, s4
    488c:	fmul	s0, s0, s4
    4890:	fcvt	h1, s1
    4894:	fcvt	h0, s0
    4898:	ret
    489c:	movi	v1.4h, #0xfc, lsl #8
    48a0:	b	47e8 <__multc3@@GCC_4.0.0+0x938>
    48a4:	nop

00000000000048a8 <__divsc3@@GCC_4.0.0>:
    48a8:	fabs	s6, s2
    48ac:	fabs	s7, s3
    48b0:	fmov	s16, s0
    48b4:	fmov	s17, s1
    48b8:	fcmpe	s6, s7
    48bc:	b.pl	491c <__divsc3@@GCC_4.0.0+0x74>  // b.nfrst
    48c0:	fdiv	s4, s2, s3
    48c4:	fmadd	s1, s2, s4, s3
    48c8:	fmadd	s5, s0, s4, s17
    48cc:	fnmsub	s4, s17, s4, s0
    48d0:	fdiv	s0, s5, s1
    48d4:	fdiv	s1, s4, s1
    48d8:	fcmp	s0, s0
    48dc:	fccmp	s1, s1, #0x0, vs
    48e0:	b.vc	4918 <__divsc3@@GCC_4.0.0+0x70>
    48e4:	fcmp	s2, #0.0
    48e8:	movi	v4.2s, #0x0
    48ec:	fccmp	s3, s4, #0x0, eq  // eq = none
    48f0:	b.ne	4938 <__divsc3@@GCC_4.0.0+0x90>  // b.any
    48f4:	fcmp	s16, s16
    48f8:	fccmp	s17, s17, #0x0, vs
    48fc:	b.vs	4938 <__divsc3@@GCC_4.0.0+0x90>
    4900:	movi	v1.2s, #0x80, lsl #24
    4904:	mov	w0, #0x7f800000            	// #2139095040
    4908:	fmov	s3, w0
    490c:	bif	v2.8b, v3.8b, v1.8b
    4910:	fmul	s0, s2, s16
    4914:	fmul	s1, s2, s17
    4918:	ret
    491c:	fdiv	s4, s3, s2
    4920:	fmadd	s1, s3, s4, s2
    4924:	fmadd	s5, s4, s17, s0
    4928:	fmsub	s4, s4, s0, s17
    492c:	fdiv	s0, s5, s1
    4930:	fdiv	s1, s4, s1
    4934:	b	48d8 <__divsc3@@GCC_4.0.0+0x30>
    4938:	fabs	s5, s16
    493c:	mov	w0, #0x7f7fffff            	// #2139095039
    4940:	fmov	s4, w0
    4944:	fcmp	s5, s4
    4948:	b.gt	49cc <__divsc3@@GCC_4.0.0+0x124>
    494c:	fabs	s18, s17
    4950:	fcmp	s18, s4
    4954:	b.gt	49cc <__divsc3@@GCC_4.0.0+0x124>
    4958:	mov	w0, #0x7f7fffff            	// #2139095039
    495c:	fmov	s4, w0
    4960:	fcmp	s6, s4
    4964:	cset	w1, le
    4968:	fcmp	s7, s4
    496c:	cset	w0, le
    4970:	cmp	w1, #0x0
    4974:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    4978:	b.ne	4918 <__divsc3@@GCC_4.0.0+0x70>  // b.any
    497c:	fcmp	s5, s4
    4980:	b.hi	4918 <__divsc3@@GCC_4.0.0+0x70>  // b.pmore
    4984:	fabs	s5, s17
    4988:	fcmp	s5, s4
    498c:	b.hi	4918 <__divsc3@@GCC_4.0.0+0x70>  // b.pmore
    4990:	eor	w0, w0, #0x1
    4994:	eor	w1, w1, #0x1
    4998:	movi	v5.2s, #0x80, lsl #24
    499c:	movi	v4.2s, #0x0
    49a0:	scvtf	s0, w0
    49a4:	scvtf	s1, w1
    49a8:	bit	v0.8b, v3.8b, v5.8b
    49ac:	bif	v2.8b, v1.8b, v5.8b
    49b0:	fmul	s1, s16, s0
    49b4:	fmul	s5, s17, s0
    49b8:	fmadd	s0, s16, s2, s5
    49bc:	fnmsub	s1, s17, s2, s1
    49c0:	fmul	s0, s0, s4
    49c4:	fmul	s1, s1, s4
    49c8:	ret
    49cc:	mov	w0, #0x7f7fffff            	// #2139095039
    49d0:	fmov	s4, w0
    49d4:	fcmp	s6, s4
    49d8:	b.hi	4958 <__divsc3@@GCC_4.0.0+0xb0>  // b.pmore
    49dc:	fcmp	s7, s4
    49e0:	b.hi	4958 <__divsc3@@GCC_4.0.0+0xb0>  // b.pmore
    49e4:	fcmp	s5, s4
    49e8:	fabs	s0, s17
    49ec:	mov	w0, #0x7f800000            	// #2139095040
    49f0:	fmov	s5, w0
    49f4:	movi	v6.2s, #0x80, lsl #24
    49f8:	cset	w0, gt
    49fc:	fcmp	s0, s4
    4a00:	scvtf	s0, w0
    4a04:	cset	w0, gt
    4a08:	scvtf	s1, w0
    4a0c:	bif	v16.8b, v0.8b, v6.8b
    4a10:	bit	v1.8b, v17.8b, v6.8b
    4a14:	fmul	s4, s3, s16
    4a18:	fmul	s0, s3, s1
    4a1c:	fnmsub	s3, s2, s1, s4
    4a20:	fmadd	s2, s2, s16, s0
    4a24:	fmul	s1, s3, s5
    4a28:	fmul	s0, s2, s5
    4a2c:	ret

0000000000004a30 <__divdc3@@GCC_4.0.0>:
    4a30:	fabs	d6, d2
    4a34:	fabs	d7, d3
    4a38:	fmov	d16, d0
    4a3c:	fmov	d17, d1
    4a40:	fcmpe	d6, d7
    4a44:	b.pl	4aa8 <__divdc3@@GCC_4.0.0+0x78>  // b.nfrst
    4a48:	fdiv	d4, d2, d3
    4a4c:	fmadd	d1, d2, d4, d3
    4a50:	fmadd	d5, d0, d4, d17
    4a54:	fnmsub	d4, d17, d4, d0
    4a58:	fdiv	d0, d5, d1
    4a5c:	fdiv	d1, d4, d1
    4a60:	fcmp	d0, d0
    4a64:	fccmp	d1, d1, #0x0, vs
    4a68:	b.vc	4aa4 <__divdc3@@GCC_4.0.0+0x74>
    4a6c:	fcmp	d2, #0.0
    4a70:	movi	d4, #0x0
    4a74:	fccmp	d3, d4, #0x0, eq  // eq = none
    4a78:	b.ne	4ac4 <__divdc3@@GCC_4.0.0+0x94>  // b.any
    4a7c:	fcmp	d16, d16
    4a80:	fccmp	d17, d17, #0x0, vs
    4a84:	b.vs	4ac4 <__divdc3@@GCC_4.0.0+0x94>
    4a88:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
    4a8c:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    4a90:	fmov	d3, x0
    4a94:	fmov	d1, x1
    4a98:	bif	v2.8b, v3.8b, v1.8b
    4a9c:	fmul	d0, d2, d16
    4aa0:	fmul	d1, d2, d17
    4aa4:	ret
    4aa8:	fdiv	d4, d3, d2
    4aac:	fmadd	d1, d3, d4, d2
    4ab0:	fmadd	d5, d4, d17, d0
    4ab4:	fmsub	d4, d4, d0, d17
    4ab8:	fdiv	d0, d5, d1
    4abc:	fdiv	d1, d4, d1
    4ac0:	b	4a60 <__divdc3@@GCC_4.0.0+0x30>
    4ac4:	fabs	d5, d16
    4ac8:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    4acc:	fmov	d4, x0
    4ad0:	fcmp	d5, d4
    4ad4:	b.gt	4b5c <__divdc3@@GCC_4.0.0+0x12c>
    4ad8:	fabs	d18, d17
    4adc:	fcmp	d18, d4
    4ae0:	b.gt	4b5c <__divdc3@@GCC_4.0.0+0x12c>
    4ae4:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    4ae8:	fmov	d4, x0
    4aec:	fcmp	d6, d4
    4af0:	cset	w1, le
    4af4:	fcmp	d7, d4
    4af8:	cset	w0, le
    4afc:	cmp	w1, #0x0
    4b00:	ccmp	w0, #0x0, #0x4, ne  // ne = any
    4b04:	b.ne	4aa4 <__divdc3@@GCC_4.0.0+0x74>  // b.any
    4b08:	fcmp	d5, d4
    4b0c:	b.hi	4aa4 <__divdc3@@GCC_4.0.0+0x74>  // b.pmore
    4b10:	fabs	d5, d17
    4b14:	fcmp	d5, d4
    4b18:	b.hi	4aa4 <__divdc3@@GCC_4.0.0+0x74>  // b.pmore
    4b1c:	eor	w0, w0, #0x1
    4b20:	eor	w1, w1, #0x1
    4b24:	mov	x2, #0x8000000000000000    	// #-9223372036854775808
    4b28:	fmov	d5, x2
    4b2c:	scvtf	d0, w0
    4b30:	scvtf	d1, w1
    4b34:	movi	d4, #0x0
    4b38:	bit	v0.8b, v3.8b, v5.8b
    4b3c:	bif	v2.8b, v1.8b, v5.8b
    4b40:	fmul	d1, d16, d0
    4b44:	fmul	d5, d17, d0
    4b48:	fmadd	d0, d16, d2, d5
    4b4c:	fnmsub	d1, d17, d2, d1
    4b50:	fmul	d0, d0, d4
    4b54:	fmul	d1, d1, d4
    4b58:	ret
    4b5c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    4b60:	fmov	d4, x0
    4b64:	fcmp	d6, d4
    4b68:	b.hi	4ae4 <__divdc3@@GCC_4.0.0+0xb4>  // b.pmore
    4b6c:	fcmp	d7, d4
    4b70:	b.hi	4ae4 <__divdc3@@GCC_4.0.0+0xb4>  // b.pmore
    4b74:	fcmp	d5, d4
    4b78:	fabs	d0, d17
    4b7c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    4b80:	fmov	d6, x0
    4b84:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
    4b88:	fmov	d5, x0
    4b8c:	cset	w0, gt
    4b90:	fcmp	d0, d4
    4b94:	scvtf	d0, w0
    4b98:	cset	w0, gt
    4b9c:	scvtf	d1, w0
    4ba0:	bif	v16.8b, v0.8b, v6.8b
    4ba4:	bit	v1.8b, v17.8b, v6.8b
    4ba8:	fmul	d4, d3, d16
    4bac:	fmul	d0, d3, d1
    4bb0:	fnmsub	d3, d2, d1, d4
    4bb4:	fmadd	d2, d2, d16, d0
    4bb8:	fmul	d1, d3, d5
    4bbc:	fmul	d0, d2, d5
    4bc0:	ret
    4bc4:	nop

0000000000004bc8 <__divtc3@@GCC_4.0.0>:
    4bc8:	stp	x29, x30, [sp, #-176]!
    4bcc:	mov	x29, sp
    4bd0:	stp	x19, x20, [sp, #16]
    4bd4:	stp	x21, x22, [sp, #32]
    4bd8:	stp	x23, x24, [sp, #48]
    4bdc:	str	q2, [sp, #96]
    4be0:	str	q3, [sp, #112]
    4be4:	ldp	x19, x22, [sp, #96]
    4be8:	stp	x27, x28, [sp, #80]
    4bec:	ldp	x20, x23, [sp, #112]
    4bf0:	stp	x25, x26, [sp, #64]
    4bf4:	and	x27, x22, #0x7fffffffffffffff
    4bf8:	stp	x19, x27, [sp, #112]
    4bfc:	str	q0, [sp, #128]
    4c00:	and	x28, x23, #0x7fffffffffffffff
    4c04:	stp	x20, x28, [sp, #96]
    4c08:	ldr	q0, [sp, #112]
    4c0c:	str	q1, [sp, #144]
    4c10:	ldp	x21, x25, [sp, #128]
    4c14:	ldp	x24, x26, [sp, #144]
    4c18:	ldr	q1, [sp, #96]
    4c1c:	bl	2cf0 <__lttf2@plt>
    4c20:	tbz	w0, #31, 4f38 <__divtc3@@GCC_4.0.0+0x370>
    4c24:	stp	x20, x23, [sp, #96]
    4c28:	stp	x19, x22, [sp, #112]
    4c2c:	ldr	q1, [sp, #96]
    4c30:	ldr	q0, [sp, #112]
    4c34:	bl	2c60 <__divtf3@plt>
    4c38:	stp	x19, x22, [sp, #96]
    4c3c:	mov	v1.16b, v0.16b
    4c40:	str	q0, [sp, #112]
    4c44:	ldr	q0, [sp, #96]
    4c48:	bl	2b10 <__multf3@plt>
    4c4c:	stp	x20, x23, [sp, #96]
    4c50:	ldr	q1, [sp, #96]
    4c54:	bl	2c20 <__addtf3@plt>
    4c58:	stp	x21, x25, [sp, #96]
    4c5c:	ldr	q2, [sp, #112]
    4c60:	str	q0, [sp, #112]
    4c64:	ldr	q0, [sp, #96]
    4c68:	mov	v1.16b, v2.16b
    4c6c:	str	q2, [sp, #144]
    4c70:	bl	2b10 <__multf3@plt>
    4c74:	stp	x24, x26, [sp, #96]
    4c78:	ldr	q1, [sp, #96]
    4c7c:	bl	2c20 <__addtf3@plt>
    4c80:	ldr	q4, [sp, #112]
    4c84:	mov	v1.16b, v4.16b
    4c88:	str	q4, [sp, #128]
    4c8c:	bl	2c60 <__divtf3@plt>
    4c90:	stp	x24, x26, [sp, #112]
    4c94:	ldr	q2, [sp, #144]
    4c98:	str	q0, [sp, #96]
    4c9c:	ldr	q0, [sp, #112]
    4ca0:	mov	v1.16b, v2.16b
    4ca4:	bl	2b10 <__multf3@plt>
    4ca8:	stp	x21, x25, [sp, #112]
    4cac:	ldr	q1, [sp, #112]
    4cb0:	bl	2d80 <__subtf3@plt>
    4cb4:	ldr	q4, [sp, #128]
    4cb8:	mov	v1.16b, v4.16b
    4cbc:	bl	2c60 <__divtf3@plt>
    4cc0:	str	q0, [sp, #112]
    4cc4:	ldr	q0, [sp, #96]
    4cc8:	mov	v1.16b, v0.16b
    4ccc:	bl	2d30 <__unordtf2@plt>
    4cd0:	cmp	w0, #0x0
    4cd4:	ldr	q0, [sp, #112]
    4cd8:	cset	w1, ne  // ne = any
    4cdc:	str	w1, [sp, #128]
    4ce0:	mov	v1.16b, v0.16b
    4ce4:	bl	2d30 <__unordtf2@plt>
    4ce8:	cmp	w0, #0x0
    4cec:	ldr	w1, [sp, #128]
    4cf0:	cset	w0, ne  // ne = any
    4cf4:	tst	w0, w1
    4cf8:	b.eq	4f14 <__divtc3@@GCC_4.0.0+0x34c>  // b.none
    4cfc:	movi	v1.2d, #0x0
    4d00:	stp	x19, x22, [sp, #128]
    4d04:	ldr	q0, [sp, #128]
    4d08:	bl	2b30 <__eqtf2@plt>
    4d0c:	stp	x20, x23, [sp, #128]
    4d10:	cmp	w0, #0x0
    4d14:	movi	v1.2d, #0x0
    4d18:	cset	w1, eq  // eq = none
    4d1c:	ldr	q0, [sp, #128]
    4d20:	str	w1, [sp, #144]
    4d24:	bl	2b30 <__eqtf2@plt>
    4d28:	cmp	w0, #0x0
    4d2c:	ldr	w1, [sp, #144]
    4d30:	cset	w0, eq  // eq = none
    4d34:	tst	w0, w1
    4d38:	b.ne	4fd0 <__divtc3@@GCC_4.0.0+0x408>  // b.any
    4d3c:	adrp	x1, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4d40:	add	x1, x1, #0x5d0
    4d44:	and	x0, x25, #0x7fffffffffffffff
    4d48:	stp	x21, x0, [sp, #128]
    4d4c:	ldr	q1, [x1]
    4d50:	ldr	q0, [sp, #128]
    4d54:	str	x0, [sp, #144]
    4d58:	bl	2d30 <__unordtf2@plt>
    4d5c:	cbnz	w0, 5068 <__divtc3@@GCC_4.0.0+0x4a0>
    4d60:	adrp	x1, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4d64:	add	x1, x1, #0x5d0
    4d68:	ldr	x0, [sp, #144]
    4d6c:	stp	x21, x0, [sp, #128]
    4d70:	ldr	q1, [x1]
    4d74:	ldr	q0, [sp, #128]
    4d78:	bl	2bc0 <__letf2@plt>
    4d7c:	cmp	w0, #0x0
    4d80:	b.le	5068 <__divtc3@@GCC_4.0.0+0x4a0>
    4d84:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4d88:	add	x0, x0, #0x5d0
    4d8c:	stp	x19, x27, [sp, #128]
    4d90:	ldr	q1, [x0]
    4d94:	ldr	q0, [sp, #128]
    4d98:	bl	2d30 <__unordtf2@plt>
    4d9c:	cbnz	w0, 50b0 <__divtc3@@GCC_4.0.0+0x4e8>
    4da0:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4da4:	add	x0, x0, #0x5d0
    4da8:	stp	x19, x27, [sp, #128]
    4dac:	ldr	q1, [x0]
    4db0:	ldr	q0, [sp, #128]
    4db4:	bl	2bf0 <__gttf2@plt>
    4db8:	cmp	w0, #0x0
    4dbc:	b.gt	50b0 <__divtc3@@GCC_4.0.0+0x4e8>
    4dc0:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4dc4:	add	x0, x0, #0x5d0
    4dc8:	stp	x20, x28, [sp, #128]
    4dcc:	ldr	q1, [x0]
    4dd0:	ldr	q0, [sp, #128]
    4dd4:	bl	2d30 <__unordtf2@plt>
    4dd8:	cbnz	w0, 50b0 <__divtc3@@GCC_4.0.0+0x4e8>
    4ddc:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4de0:	add	x0, x0, #0x5d0
    4de4:	stp	x20, x28, [sp, #128]
    4de8:	ldr	q1, [x0]
    4dec:	ldr	q0, [sp, #128]
    4df0:	bl	2bf0 <__gttf2@plt>
    4df4:	cmp	w0, #0x0
    4df8:	b.gt	50b0 <__divtc3@@GCC_4.0.0+0x4e8>
    4dfc:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4e00:	add	x0, x0, #0x5d0
    4e04:	ldr	x28, [sp, #144]
    4e08:	stp	x21, x28, [sp, #96]
    4e0c:	ldr	q1, [x0]
    4e10:	ldr	q0, [sp, #96]
    4e14:	mov	w27, #0x1                   	// #1
    4e18:	bl	2d30 <__unordtf2@plt>
    4e1c:	cbz	w0, 52b4 <__divtc3@@GCC_4.0.0+0x6ec>
    4e20:	eor	w0, w27, #0x1
    4e24:	and	x27, x26, #0x7fffffffffffffff
    4e28:	and	w0, w0, #0x1
    4e2c:	bl	2d70 <__floatsitf@plt>
    4e30:	str	q0, [sp, #112]
    4e34:	mov	w28, #0x1                   	// #1
    4e38:	ldp	x21, x0, [sp, #112]
    4e3c:	stp	x24, x27, [sp, #96]
    4e40:	ldr	q0, [sp, #96]
    4e44:	bfxil	x25, x0, #0, #63
    4e48:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4e4c:	add	x0, x0, #0x5d0
    4e50:	ldr	q1, [x0]
    4e54:	bl	2d30 <__unordtf2@plt>
    4e58:	cbz	w0, 5290 <__divtc3@@GCC_4.0.0+0x6c8>
    4e5c:	eor	w0, w28, #0x1
    4e60:	and	w0, w0, #0x1
    4e64:	bl	2d70 <__floatsitf@plt>
    4e68:	str	q0, [sp, #128]
    4e6c:	ldp	x24, x0, [sp, #128]
    4e70:	stp	x21, x25, [sp, #96]
    4e74:	stp	x19, x22, [sp, #112]
    4e78:	ldr	q1, [sp, #96]
    4e7c:	ldr	q0, [sp, #112]
    4e80:	bfxil	x26, x0, #0, #63
    4e84:	bl	2b10 <__multf3@plt>
    4e88:	stp	x24, x26, [sp, #96]
    4e8c:	stp	x20, x23, [sp, #112]
    4e90:	ldr	q1, [sp, #96]
    4e94:	str	q0, [sp, #96]
    4e98:	ldr	q0, [sp, #112]
    4e9c:	bl	2b10 <__multf3@plt>
    4ea0:	mov	v1.16b, v0.16b
    4ea4:	ldr	q2, [sp, #96]
    4ea8:	mov	v0.16b, v2.16b
    4eac:	bl	2c20 <__addtf3@plt>
    4eb0:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4eb4:	add	x0, x0, #0x5e0
    4eb8:	ldr	q1, [x0]
    4ebc:	bl	2b10 <__multf3@plt>
    4ec0:	stp	x24, x26, [sp, #96]
    4ec4:	stp	x19, x22, [sp, #112]
    4ec8:	ldr	q1, [sp, #96]
    4ecc:	str	q0, [sp, #96]
    4ed0:	ldr	q0, [sp, #112]
    4ed4:	bl	2b10 <__multf3@plt>
    4ed8:	stp	x21, x25, [sp, #112]
    4edc:	stp	x20, x23, [sp, #128]
    4ee0:	ldr	q1, [sp, #112]
    4ee4:	str	q0, [sp, #112]
    4ee8:	ldr	q0, [sp, #128]
    4eec:	bl	2b10 <__multf3@plt>
    4ef0:	mov	v1.16b, v0.16b
    4ef4:	ldr	q2, [sp, #112]
    4ef8:	mov	v0.16b, v2.16b
    4efc:	bl	2d80 <__subtf3@plt>
    4f00:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    4f04:	add	x0, x0, #0x5e0
    4f08:	ldr	q1, [x0]
    4f0c:	bl	2b10 <__multf3@plt>
    4f10:	str	q0, [sp, #112]
    4f14:	ldp	x19, x20, [sp, #16]
    4f18:	ldp	x21, x22, [sp, #32]
    4f1c:	ldp	x23, x24, [sp, #48]
    4f20:	ldp	x25, x26, [sp, #64]
    4f24:	ldp	x27, x28, [sp, #80]
    4f28:	ldr	q0, [sp, #96]
    4f2c:	ldr	q1, [sp, #112]
    4f30:	ldp	x29, x30, [sp], #176
    4f34:	ret
    4f38:	stp	x19, x22, [sp, #96]
    4f3c:	stp	x20, x23, [sp, #112]
    4f40:	ldr	q1, [sp, #96]
    4f44:	ldr	q0, [sp, #112]
    4f48:	bl	2c60 <__divtf3@plt>
    4f4c:	stp	x20, x23, [sp, #96]
    4f50:	mov	v1.16b, v0.16b
    4f54:	str	q0, [sp, #128]
    4f58:	ldr	q0, [sp, #96]
    4f5c:	bl	2b10 <__multf3@plt>
    4f60:	stp	x19, x22, [sp, #96]
    4f64:	ldr	q1, [sp, #96]
    4f68:	bl	2c20 <__addtf3@plt>
    4f6c:	stp	x24, x26, [sp, #96]
    4f70:	ldr	q2, [sp, #128]
    4f74:	ldr	q1, [sp, #96]
    4f78:	str	q0, [sp, #112]
    4f7c:	mov	v0.16b, v2.16b
    4f80:	str	q2, [sp, #144]
    4f84:	bl	2b10 <__multf3@plt>
    4f88:	stp	x21, x25, [sp, #96]
    4f8c:	ldr	q1, [sp, #96]
    4f90:	bl	2c20 <__addtf3@plt>
    4f94:	ldr	q4, [sp, #112]
    4f98:	mov	v1.16b, v4.16b
    4f9c:	str	q4, [sp, #128]
    4fa0:	bl	2c60 <__divtf3@plt>
    4fa4:	stp	x21, x25, [sp, #112]
    4fa8:	mov	v6.16b, v0.16b
    4fac:	ldr	q1, [sp, #112]
    4fb0:	ldr	q2, [sp, #144]
    4fb4:	str	q6, [sp, #96]
    4fb8:	mov	v0.16b, v2.16b
    4fbc:	bl	2b10 <__multf3@plt>
    4fc0:	stp	x24, x26, [sp, #112]
    4fc4:	mov	v1.16b, v0.16b
    4fc8:	ldr	q0, [sp, #112]
    4fcc:	b	4cb0 <__divtc3@@GCC_4.0.0+0xe8>
    4fd0:	stp	x21, x25, [sp, #128]
    4fd4:	stp	x21, x25, [sp, #144]
    4fd8:	ldr	q1, [sp, #128]
    4fdc:	ldr	q0, [sp, #144]
    4fe0:	bl	2d30 <__unordtf2@plt>
    4fe4:	stp	x24, x26, [sp, #128]
    4fe8:	cmp	w0, #0x0
    4fec:	stp	x24, x26, [sp, #144]
    4ff0:	cset	w1, eq  // eq = none
    4ff4:	ldr	q1, [sp, #128]
    4ff8:	ldr	q0, [sp, #144]
    4ffc:	str	w1, [sp, #168]
    5000:	bl	2d30 <__unordtf2@plt>
    5004:	cmp	w0, #0x0
    5008:	ldr	w1, [sp, #168]
    500c:	cset	w0, eq  // eq = none
    5010:	orr	w1, w1, w0
    5014:	tbz	w1, #0, 4d3c <__divtc3@@GCC_4.0.0+0x174>
    5018:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    501c:	add	x0, x0, #0x5e0
    5020:	ldr	q2, [x0]
    5024:	tbz	x22, #63, 5034 <__divtc3@@GCC_4.0.0+0x46c>
    5028:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    502c:	add	x0, x0, #0x5f0
    5030:	ldr	q2, [x0]
    5034:	stp	x21, x25, [sp, #96]
    5038:	mov	v0.16b, v2.16b
    503c:	ldr	q1, [sp, #96]
    5040:	str	q2, [sp, #128]
    5044:	bl	2b10 <__multf3@plt>
    5048:	stp	x24, x26, [sp, #112]
    504c:	ldr	q2, [sp, #128]
    5050:	ldr	q1, [sp, #112]
    5054:	str	q0, [sp, #96]
    5058:	mov	v0.16b, v2.16b
    505c:	bl	2b10 <__multf3@plt>
    5060:	str	q0, [sp, #112]
    5064:	b	4f14 <__divtc3@@GCC_4.0.0+0x34c>
    5068:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    506c:	add	x0, x0, #0x5d0
    5070:	and	x1, x26, #0x7fffffffffffffff
    5074:	stp	x24, x1, [sp, #128]
    5078:	ldr	q1, [x0]
    507c:	ldr	q0, [sp, #128]
    5080:	str	x1, [sp, #168]
    5084:	bl	2d30 <__unordtf2@plt>
    5088:	cbnz	w0, 50b0 <__divtc3@@GCC_4.0.0+0x4e8>
    508c:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    5090:	add	x0, x0, #0x5d0
    5094:	ldr	x1, [sp, #168]
    5098:	stp	x24, x1, [sp, #128]
    509c:	ldr	q1, [x0]
    50a0:	ldr	q0, [sp, #128]
    50a4:	bl	2bc0 <__letf2@plt>
    50a8:	cmp	w0, #0x0
    50ac:	b.gt	4d84 <__divtc3@@GCC_4.0.0+0x1bc>
    50b0:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    50b4:	add	x0, x0, #0x5d0
    50b8:	stp	x19, x27, [sp, #128]
    50bc:	mov	w1, #0x1                   	// #1
    50c0:	ldr	q1, [x0]
    50c4:	ldr	q0, [sp, #128]
    50c8:	str	w1, [sp, #168]
    50cc:	bl	2d30 <__unordtf2@plt>
    50d0:	ldr	w1, [sp, #168]
    50d4:	cbz	w0, 526c <__divtc3@@GCC_4.0.0+0x6a4>
    50d8:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    50dc:	add	x0, x0, #0x5d0
    50e0:	stp	x20, x28, [sp, #128]
    50e4:	and	w19, w1, #0xff
    50e8:	mov	w27, #0x1                   	// #1
    50ec:	ldr	q1, [x0]
    50f0:	ldr	q0, [sp, #128]
    50f4:	bl	2d30 <__unordtf2@plt>
    50f8:	cbz	w0, 5248 <__divtc3@@GCC_4.0.0+0x680>
    50fc:	and	w27, w27, #0xff
    5100:	cmp	w19, #0x0
    5104:	ccmp	w27, #0x0, #0x4, ne  // ne = any
    5108:	b.ne	4f14 <__divtc3@@GCC_4.0.0+0x34c>  // b.any
    510c:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    5110:	add	x0, x0, #0x5d0
    5114:	ldr	x20, [sp, #144]
    5118:	stp	x21, x20, [sp, #128]
    511c:	ldr	q1, [x0]
    5120:	ldr	q0, [sp, #128]
    5124:	bl	2d30 <__unordtf2@plt>
    5128:	cbnz	w0, 4f14 <__divtc3@@GCC_4.0.0+0x34c>
    512c:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    5130:	add	x0, x0, #0x5d0
    5134:	stp	x21, x20, [sp, #128]
    5138:	ldr	q1, [x0]
    513c:	ldr	q0, [sp, #128]
    5140:	bl	2bf0 <__gttf2@plt>
    5144:	cmp	w0, #0x0
    5148:	b.gt	4f14 <__divtc3@@GCC_4.0.0+0x34c>
    514c:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    5150:	add	x0, x0, #0x5d0
    5154:	and	x20, x26, #0x7fffffffffffffff
    5158:	stp	x24, x20, [sp, #128]
    515c:	ldr	q1, [x0]
    5160:	ldr	q0, [sp, #128]
    5164:	bl	2d30 <__unordtf2@plt>
    5168:	cbnz	w0, 4f14 <__divtc3@@GCC_4.0.0+0x34c>
    516c:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    5170:	add	x0, x0, #0x5d0
    5174:	stp	x24, x20, [sp, #128]
    5178:	ldr	q1, [x0]
    517c:	ldr	q0, [sp, #128]
    5180:	bl	2bf0 <__gttf2@plt>
    5184:	cmp	w0, #0x0
    5188:	b.gt	4f14 <__divtc3@@GCC_4.0.0+0x34c>
    518c:	eor	w0, w19, #0x1
    5190:	bl	2d70 <__floatsitf@plt>
    5194:	str	q0, [sp, #96]
    5198:	eor	w0, w27, #0x1
    519c:	ldp	x20, x1, [sp, #96]
    51a0:	bfxil	x22, x1, #0, #63
    51a4:	bl	2d70 <__floatsitf@plt>
    51a8:	str	q0, [sp, #128]
    51ac:	ldp	x19, x0, [sp, #128]
    51b0:	stp	x20, x22, [sp, #96]
    51b4:	stp	x21, x25, [sp, #112]
    51b8:	ldr	q1, [sp, #96]
    51bc:	ldr	q0, [sp, #112]
    51c0:	bfxil	x23, x0, #0, #63
    51c4:	bl	2b10 <__multf3@plt>
    51c8:	stp	x19, x23, [sp, #96]
    51cc:	stp	x24, x26, [sp, #112]
    51d0:	ldr	q1, [sp, #96]
    51d4:	str	q0, [sp, #96]
    51d8:	ldr	q0, [sp, #112]
    51dc:	bl	2b10 <__multf3@plt>
    51e0:	mov	v1.16b, v0.16b
    51e4:	ldr	q2, [sp, #96]
    51e8:	mov	v0.16b, v2.16b
    51ec:	bl	2c20 <__addtf3@plt>
    51f0:	movi	v1.2d, #0x0
    51f4:	bl	2b10 <__multf3@plt>
    51f8:	stp	x20, x22, [sp, #96]
    51fc:	stp	x24, x26, [sp, #112]
    5200:	ldr	q1, [sp, #96]
    5204:	str	q0, [sp, #96]
    5208:	ldr	q0, [sp, #112]
    520c:	bl	2b10 <__multf3@plt>
    5210:	stp	x19, x23, [sp, #112]
    5214:	stp	x21, x25, [sp, #128]
    5218:	ldr	q1, [sp, #112]
    521c:	str	q0, [sp, #112]
    5220:	ldr	q0, [sp, #128]
    5224:	bl	2b10 <__multf3@plt>
    5228:	mov	v1.16b, v0.16b
    522c:	ldr	q2, [sp, #112]
    5230:	mov	v0.16b, v2.16b
    5234:	bl	2d80 <__subtf3@plt>
    5238:	movi	v1.2d, #0x0
    523c:	bl	2b10 <__multf3@plt>
    5240:	str	q0, [sp, #112]
    5244:	b	4f14 <__divtc3@@GCC_4.0.0+0x34c>
    5248:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    524c:	add	x0, x0, #0x5d0
    5250:	stp	x20, x28, [sp, #128]
    5254:	ldr	q1, [x0]
    5258:	ldr	q0, [sp, #128]
    525c:	bl	2bc0 <__letf2@plt>
    5260:	cmp	w0, #0x0
    5264:	cset	w27, le
    5268:	b	50fc <__divtc3@@GCC_4.0.0+0x534>
    526c:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    5270:	add	x0, x0, #0x5d0
    5274:	stp	x19, x27, [sp, #128]
    5278:	ldr	q1, [x0]
    527c:	ldr	q0, [sp, #128]
    5280:	bl	2bc0 <__letf2@plt>
    5284:	cmp	w0, #0x0
    5288:	cset	w1, le
    528c:	b	50d8 <__divtc3@@GCC_4.0.0+0x510>
    5290:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    5294:	add	x0, x0, #0x5d0
    5298:	stp	x24, x27, [sp, #96]
    529c:	ldr	q1, [x0]
    52a0:	ldr	q0, [sp, #96]
    52a4:	bl	2bc0 <__letf2@plt>
    52a8:	cmp	w0, #0x0
    52ac:	cset	w28, le
    52b0:	b	4e5c <__divtc3@@GCC_4.0.0+0x294>
    52b4:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    52b8:	add	x0, x0, #0x5d0
    52bc:	stp	x21, x28, [sp, #96]
    52c0:	ldr	q1, [x0]
    52c4:	ldr	q0, [sp, #96]
    52c8:	bl	2bc0 <__letf2@plt>
    52cc:	cmp	w0, #0x0
    52d0:	cset	w27, le
    52d4:	b	4e20 <__divtc3@@GCC_4.0.0+0x258>

00000000000052d8 <__bswapsi2@@GCC_4.3.0>:
    52d8:	rev	w0, w0
    52dc:	ret

00000000000052e0 <__bswapdi2@@GCC_4.3.0>:
    52e0:	rev	x0, x0
    52e4:	ret

00000000000052e8 <__clrsbdi2@@GCC_4.7.0>:
    52e8:	eor	x1, x0, x0, asr #63
    52ec:	mov	w2, #0x3f                  	// #63
    52f0:	clz	x0, x1
    52f4:	cmp	x1, #0x0
    52f8:	sub	w0, w0, #0x1
    52fc:	csel	w0, w0, w2, ne  // ne = any
    5300:	ret
    5304:	nop

0000000000005308 <__clrsbti2@@GCC_4.7.0>:
    5308:	cbnz	x1, 531c <__clrsbti2@@GCC_4.7.0+0x14>
    530c:	mov	x1, x0
    5310:	mov	w0, #0x7f                  	// #127
    5314:	cbnz	x1, 5348 <__clrsbti2@@GCC_4.7.0+0x40>
    5318:	ret
    531c:	cmn	x1, #0x1
    5320:	b.eq	533c <__clrsbti2@@GCC_4.7.0+0x34>  // b.none
    5324:	tbnz	x1, #63, 5350 <__clrsbti2@@GCC_4.7.0+0x48>
    5328:	mov	w0, #0x0                   	// #0
    532c:	clz	x1, x1
    5330:	sub	w0, w0, #0x1
    5334:	add	w0, w0, w1
    5338:	ret
    533c:	mvn	x1, x0
    5340:	mov	w0, #0x7f                  	// #127
    5344:	cbz	x1, 5318 <__clrsbti2@@GCC_4.7.0+0x10>
    5348:	mov	w0, #0x40                  	// #64
    534c:	b	532c <__clrsbti2@@GCC_4.7.0+0x24>
    5350:	mvn	x1, x1
    5354:	b	5328 <__clrsbti2@@GCC_4.7.0+0x20>

0000000000005358 <__fixunssfdi@@GCC_3.0>:
    5358:	movi	v1.2s, #0x5f, lsl #24
    535c:	fcmpe	s0, s1
    5360:	b.ge	536c <__fixunssfdi@@GCC_3.0+0x14>  // b.tcont
    5364:	fcvtzs	x0, s0
    5368:	ret
    536c:	fsub	s0, s0, s1
    5370:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    5374:	fcvtzs	x0, s0
    5378:	add	x0, x0, x1
    537c:	ret

0000000000005380 <__fixunsdfdi@@GCC_3.0>:
    5380:	mov	x0, #0x43e0000000000000    	// #4890909195324358656
    5384:	fmov	d1, x0
    5388:	fcmpe	d0, d1
    538c:	b.ge	5398 <__fixunsdfdi@@GCC_3.0+0x18>  // b.tcont
    5390:	fcvtzs	x0, d0
    5394:	ret
    5398:	fsub	d0, d0, d1
    539c:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    53a0:	fcvtzs	x0, d0
    53a4:	add	x0, x0, x1
    53a8:	ret
    53ac:	nop

00000000000053b0 <__fixsfti@@GCC_3.0>:
    53b0:	fcmpe	s0, #0.0
    53b4:	b.mi	53bc <__fixsfti@@GCC_3.0+0xc>  // b.first
    53b8:	b	2bb0 <__fixunssfti@plt>
    53bc:	fneg	s0, s0
    53c0:	stp	x29, x30, [sp, #-16]!
    53c4:	mov	x29, sp
    53c8:	bl	2bb0 <__fixunssfti@plt>
    53cc:	negs	x0, x0
    53d0:	ngc	x1, x1
    53d4:	ldp	x29, x30, [sp], #16
    53d8:	ret
    53dc:	nop

00000000000053e0 <__fixdfti@@GCC_3.0>:
    53e0:	fcmpe	d0, #0.0
    53e4:	b.mi	53ec <__fixdfti@@GCC_3.0+0xc>  // b.first
    53e8:	b	2d20 <__fixunsdfti@plt>
    53ec:	fneg	d0, d0
    53f0:	stp	x29, x30, [sp, #-16]!
    53f4:	mov	x29, sp
    53f8:	bl	2d20 <__fixunsdfti@plt>
    53fc:	negs	x0, x0
    5400:	ngc	x1, x1
    5404:	ldp	x29, x30, [sp], #16
    5408:	ret
    540c:	nop

0000000000005410 <__fixunssfti@@GCC_3.0>:
    5410:	fcvt	d0, s0
    5414:	mov	x0, #0x3bf0000000000000    	// #4318952042648305664
    5418:	fmov	d1, x0
    541c:	mov	x0, #0x43f0000000000000    	// #4895412794951729152
    5420:	fmov	d2, x0
    5424:	fmul	d1, d0, d1
    5428:	fcvtzu	x1, d1
    542c:	ucvtf	d1, x1
    5430:	fmsub	d0, d1, d2, d0
    5434:	fcvtzu	x0, d0
    5438:	ret
    543c:	nop

0000000000005440 <__fixunsdfti@@GCC_3.0>:
    5440:	mov	x0, #0x3bf0000000000000    	// #4318952042648305664
    5444:	fmov	d1, x0
    5448:	mov	x0, #0x43f0000000000000    	// #4895412794951729152
    544c:	fmov	d2, x0
    5450:	fmul	d1, d0, d1
    5454:	fcvtzu	x1, d1
    5458:	ucvtf	d1, x1
    545c:	fmsub	d0, d1, d2, d0
    5460:	fcvtzu	x0, d0
    5464:	ret

0000000000005468 <__floattisf@@GCC_3.0>:
    5468:	stp	x29, x30, [sp, #-48]!
    546c:	mov	x2, #0x3ffffffffffff       	// #1125899906842623
    5470:	mov	x29, sp
    5474:	str	x19, [sp, #16]
    5478:	mov	x19, x0
    547c:	subs	x3, x19, #0x1
    5480:	mov	x0, x1
    5484:	mov	x1, #0x1ffffffffffff       	// #562949953421311
    5488:	adc	x1, x0, x1
    548c:	cmp	x1, x2
    5490:	b.hi	54d8 <__floattisf@@GCC_3.0+0x70>  // b.pmore
    5494:	b.eq	54d0 <__floattisf@@GCC_3.0+0x68>  // b.none
    5498:	bl	2b40 <__floatditf@plt>
    549c:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    54a0:	add	x0, x0, #0x600
    54a4:	ldr	q1, [x0]
    54a8:	bl	2b10 <__multf3@plt>
    54ac:	str	q0, [sp, #32]
    54b0:	mov	x0, x19
    54b4:	bl	2b00 <__floatunditf@plt>
    54b8:	ldr	q1, [sp, #32]
    54bc:	bl	2c20 <__addtf3@plt>
    54c0:	bl	2d90 <__trunctfsf2@plt>
    54c4:	ldr	x19, [sp, #16]
    54c8:	ldp	x29, x30, [sp], #48
    54cc:	ret
    54d0:	cmn	x3, #0x2
    54d4:	b.ls	5498 <__floattisf@@GCC_3.0+0x30>  // b.plast
    54d8:	and	x1, x19, #0xffffffffffff8000
    54dc:	tst	x19, #0x7fff
    54e0:	orr	x1, x1, #0x8000
    54e4:	csel	x19, x1, x19, ne  // ne = any
    54e8:	b	5498 <__floattisf@@GCC_3.0+0x30>
    54ec:	nop

00000000000054f0 <__floattidf@@GCC_3.0>:
    54f0:	stp	x29, x30, [sp, #-48]!
    54f4:	mov	x2, #0x3ffffffffffff       	// #1125899906842623
    54f8:	mov	x29, sp
    54fc:	str	x19, [sp, #16]
    5500:	mov	x19, x0
    5504:	subs	x3, x19, #0x1
    5508:	mov	x0, x1
    550c:	mov	x1, #0x1ffffffffffff       	// #562949953421311
    5510:	adc	x1, x0, x1
    5514:	cmp	x1, x2
    5518:	b.hi	5560 <__floattidf@@GCC_3.0+0x70>  // b.pmore
    551c:	b.eq	5558 <__floattidf@@GCC_3.0+0x68>  // b.none
    5520:	bl	2b40 <__floatditf@plt>
    5524:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    5528:	add	x0, x0, #0x600
    552c:	ldr	q1, [x0]
    5530:	bl	2b10 <__multf3@plt>
    5534:	str	q0, [sp, #32]
    5538:	mov	x0, x19
    553c:	bl	2b00 <__floatunditf@plt>
    5540:	ldr	q1, [sp, #32]
    5544:	bl	2c20 <__addtf3@plt>
    5548:	bl	2c90 <__trunctfdf2@plt>
    554c:	ldr	x19, [sp, #16]
    5550:	ldp	x29, x30, [sp], #48
    5554:	ret
    5558:	cmn	x3, #0x2
    555c:	b.ls	5520 <__floattidf@@GCC_3.0+0x30>  // b.plast
    5560:	and	x1, x19, #0xffffffffffff8000
    5564:	tst	x19, #0x7fff
    5568:	orr	x1, x1, #0x8000
    556c:	csel	x19, x1, x19, ne  // ne = any
    5570:	b	5520 <__floattidf@@GCC_3.0+0x30>
    5574:	nop

0000000000005578 <__floatuntisf@@GCC_4.2.0>:
    5578:	stp	x29, x30, [sp, #-48]!
    557c:	mov	x29, sp
    5580:	str	x19, [sp, #16]
    5584:	mov	x19, x0
    5588:	mov	x0, x1
    558c:	mov	x1, #0x1ffffffffffff       	// #562949953421311
    5590:	cmp	x0, x1
    5594:	b.ls	55a8 <__floatuntisf@@GCC_4.2.0+0x30>  // b.plast
    5598:	and	x1, x19, #0xffffffffffff8000
    559c:	tst	x19, #0x7fff
    55a0:	orr	x1, x1, #0x8000
    55a4:	csel	x19, x1, x19, ne  // ne = any
    55a8:	bl	2b00 <__floatunditf@plt>
    55ac:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    55b0:	add	x0, x0, #0x600
    55b4:	ldr	q1, [x0]
    55b8:	bl	2b10 <__multf3@plt>
    55bc:	str	q0, [sp, #32]
    55c0:	mov	x0, x19
    55c4:	bl	2b00 <__floatunditf@plt>
    55c8:	ldr	q1, [sp, #32]
    55cc:	bl	2c20 <__addtf3@plt>
    55d0:	bl	2d90 <__trunctfsf2@plt>
    55d4:	ldr	x19, [sp, #16]
    55d8:	ldp	x29, x30, [sp], #48
    55dc:	ret

00000000000055e0 <__floatuntidf@@GCC_4.2.0>:
    55e0:	stp	x29, x30, [sp, #-48]!
    55e4:	mov	x29, sp
    55e8:	str	x19, [sp, #16]
    55ec:	mov	x19, x0
    55f0:	mov	x0, x1
    55f4:	mov	x1, #0x1ffffffffffff       	// #562949953421311
    55f8:	cmp	x0, x1
    55fc:	b.ls	5610 <__floatuntidf@@GCC_4.2.0+0x30>  // b.plast
    5600:	and	x1, x19, #0xffffffffffff8000
    5604:	tst	x19, #0x7fff
    5608:	orr	x1, x1, #0x8000
    560c:	csel	x19, x1, x19, ne  // ne = any
    5610:	bl	2b00 <__floatunditf@plt>
    5614:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    5618:	add	x0, x0, #0x600
    561c:	ldr	q1, [x0]
    5620:	bl	2b10 <__multf3@plt>
    5624:	str	q0, [sp, #32]
    5628:	mov	x0, x19
    562c:	bl	2b00 <__floatunditf@plt>
    5630:	ldr	q1, [sp, #32]
    5634:	bl	2c20 <__addtf3@plt>
    5638:	bl	2c90 <__trunctfdf2@plt>
    563c:	ldr	x19, [sp, #16]
    5640:	ldp	x29, x30, [sp], #48
    5644:	ret

0000000000005648 <__divti3@@GCC_3.0>:
    5648:	mov	x4, #0xffffffffffffffff    	// #-1
    564c:	mov	x6, #0x0                   	// #0
    5650:	tbnz	x1, #63, 5730 <__divti3@@GCC_3.0+0xe8>
    5654:	tbz	x3, #63, 5664 <__divti3@@GCC_3.0+0x1c>
    5658:	negs	x2, x2
    565c:	mov	x6, x4
    5660:	ngc	x3, x3
    5664:	mov	x4, x2
    5668:	mov	x7, x0
    566c:	mov	x5, x1
    5670:	cbnz	x3, 571c <__divti3@@GCC_3.0+0xd4>
    5674:	cmp	x2, x1
    5678:	b.ls	5844 <__divti3@@GCC_3.0+0x1fc>  // b.plast
    567c:	clz	x0, x2
    5680:	cbz	x0, 569c <__divti3@@GCC_3.0+0x54>
    5684:	neg	w1, w0
    5688:	lsl	x3, x5, x0
    568c:	lsl	x4, x2, x0
    5690:	lsr	x5, x7, x1
    5694:	orr	x5, x5, x3
    5698:	lsl	x7, x7, x0
    569c:	lsr	x2, x4, #32
    56a0:	and	x8, x4, #0xffffffff
    56a4:	udiv	x3, x5, x2
    56a8:	mov	x0, x3
    56ac:	msub	x3, x3, x2, x5
    56b0:	mul	x5, x8, x0
    56b4:	extr	x1, x3, x7, #32
    56b8:	cmp	x5, x1
    56bc:	b.ls	56d0 <__divti3@@GCC_3.0+0x88>  // b.plast
    56c0:	adds	x1, x4, x1
    56c4:	ccmp	x5, x1, #0x0, cc  // cc = lo, ul, last
    56c8:	b.hi	59b8 <__divti3@@GCC_3.0+0x370>  // b.pmore
    56cc:	sub	x0, x0, #0x1
    56d0:	sub	x1, x1, x5
    56d4:	udiv	x5, x1, x2
    56d8:	msub	x1, x5, x2, x1
    56dc:	mov	x2, x7
    56e0:	mul	x8, x8, x5
    56e4:	mov	x3, x5
    56e8:	bfi	x2, x1, #32, #32
    56ec:	cmp	x8, x2
    56f0:	b.ls	5704 <__divti3@@GCC_3.0+0xbc>  // b.plast
    56f4:	adds	x2, x4, x2
    56f8:	ccmp	x8, x2, #0x0, cc  // cc = lo, ul, last
    56fc:	cinc	x3, x5, ls  // ls = plast
    5700:	sub	x3, x3, #0x2
    5704:	orr	x0, x3, x0, lsl #32
    5708:	mov	x1, #0x0                   	// #0
    570c:	cbz	x6, 5718 <__divti3@@GCC_3.0+0xd0>
    5710:	negs	x0, x0
    5714:	ngc	x1, x1
    5718:	ret
    571c:	cmp	x3, x1
    5720:	b.ls	5744 <__divti3@@GCC_3.0+0xfc>  // b.plast
    5724:	mov	x1, #0x0                   	// #0
    5728:	mov	x0, #0x0                   	// #0
    572c:	b	570c <__divti3@@GCC_3.0+0xc4>
    5730:	negs	x0, x0
    5734:	mov	x4, #0x0                   	// #0
    5738:	ngc	x1, x1
    573c:	mov	x6, #0xffffffffffffffff    	// #-1
    5740:	b	5654 <__divti3@@GCC_3.0+0xc>
    5744:	clz	x8, x3
    5748:	cbz	x8, 5960 <__divti3@@GCC_3.0+0x318>
    574c:	mov	x4, #0x40                  	// #64
    5750:	sub	x4, x4, x8
    5754:	lsl	x3, x3, x8
    5758:	lsr	x5, x2, x4
    575c:	orr	x3, x5, x3
    5760:	lsr	x7, x1, x4
    5764:	and	x9, x3, #0xffffffff
    5768:	lsr	x11, x3, #32
    576c:	lsl	x1, x1, x8
    5770:	lsr	x4, x0, x4
    5774:	orr	x4, x4, x1
    5778:	lsl	x2, x2, x8
    577c:	udiv	x5, x7, x11
    5780:	mov	x1, x5
    5784:	msub	x5, x5, x11, x7
    5788:	mul	x7, x9, x1
    578c:	extr	x5, x5, x4, #32
    5790:	cmp	x7, x5
    5794:	b.ls	57a8 <__divti3@@GCC_3.0+0x160>  // b.plast
    5798:	adds	x5, x3, x5
    579c:	ccmp	x7, x5, #0x0, cc  // cc = lo, ul, last
    57a0:	b.hi	59a0 <__divti3@@GCC_3.0+0x358>  // b.pmore
    57a4:	sub	x1, x1, #0x1
    57a8:	sub	x7, x5, x7
    57ac:	udiv	x10, x7, x11
    57b0:	msub	x7, x10, x11, x7
    57b4:	mov	x5, x10
    57b8:	mul	x9, x9, x10
    57bc:	bfi	x4, x7, #32, #32
    57c0:	cmp	x9, x4
    57c4:	b.ls	57d8 <__divti3@@GCC_3.0+0x190>  // b.plast
    57c8:	adds	x4, x3, x4
    57cc:	ccmp	x9, x4, #0x0, cc  // cc = lo, ul, last
    57d0:	b.hi	5988 <__divti3@@GCC_3.0+0x340>  // b.pmore
    57d4:	sub	x5, x10, #0x1
    57d8:	orr	x1, x5, x1, lsl #32
    57dc:	and	x10, x2, #0xffffffff
    57e0:	mov	w5, w5
    57e4:	lsr	x2, x2, #32
    57e8:	lsr	x7, x1, #32
    57ec:	sub	x4, x4, x9
    57f0:	mov	x11, #0x100000000           	// #4294967296
    57f4:	mul	x12, x5, x10
    57f8:	mul	x9, x7, x10
    57fc:	madd	x5, x5, x2, x9
    5800:	mul	x2, x7, x2
    5804:	add	x3, x5, x12, lsr #32
    5808:	add	x5, x2, x11
    580c:	cmp	x9, x3
    5810:	csel	x2, x5, x2, hi  // hi = pmore
    5814:	add	x2, x2, x3, lsr #32
    5818:	cmp	x4, x2
    581c:	b.cc	5838 <__divti3@@GCC_3.0+0x1f0>  // b.lo, b.ul, b.last
    5820:	and	x12, x12, #0xffffffff
    5824:	lsl	x0, x0, x8
    5828:	add	x3, x12, x3, lsl #32
    582c:	cmp	x0, x3
    5830:	ccmp	x4, x2, #0x0, cc  // cc = lo, ul, last
    5834:	b.ne	5970 <__divti3@@GCC_3.0+0x328>  // b.any
    5838:	sub	x0, x1, #0x1
    583c:	mov	x1, #0x0                   	// #0
    5840:	b	570c <__divti3@@GCC_3.0+0xc4>
    5844:	cbnz	x2, 5850 <__divti3@@GCC_3.0+0x208>
    5848:	mov	x2, #0x1                   	// #1
    584c:	udiv	x4, x2, x3
    5850:	clz	x8, x4
    5854:	cbnz	x8, 58d0 <__divti3@@GCC_3.0+0x288>
    5858:	lsr	x11, x4, #32
    585c:	and	x10, x4, #0xffffffff
    5860:	sub	x3, x1, x4
    5864:	mov	x1, #0x1                   	// #1
    5868:	udiv	x5, x3, x11
    586c:	mov	x0, x5
    5870:	msub	x5, x5, x11, x3
    5874:	mul	x2, x0, x10
    5878:	extr	x3, x5, x7, #32
    587c:	cmp	x2, x3
    5880:	b.ls	5894 <__divti3@@GCC_3.0+0x24c>  // b.plast
    5884:	adds	x3, x4, x3
    5888:	ccmp	x2, x3, #0x0, cc  // cc = lo, ul, last
    588c:	b.hi	59ac <__divti3@@GCC_3.0+0x364>  // b.pmore
    5890:	sub	x0, x0, #0x1
    5894:	sub	x3, x3, x2
    5898:	mov	x2, x7
    589c:	udiv	x9, x3, x11
    58a0:	msub	x3, x9, x11, x3
    58a4:	mov	x8, x9
    58a8:	mul	x5, x9, x10
    58ac:	bfi	x2, x3, #32, #32
    58b0:	cmp	x5, x2
    58b4:	b.ls	58c8 <__divti3@@GCC_3.0+0x280>  // b.plast
    58b8:	adds	x2, x4, x2
    58bc:	ccmp	x5, x2, #0x0, cc  // cc = lo, ul, last
    58c0:	cinc	x8, x9, ls  // ls = plast
    58c4:	sub	x8, x8, #0x2
    58c8:	orr	x0, x8, x0, lsl #32
    58cc:	b	570c <__divti3@@GCC_3.0+0xc4>
    58d0:	lsl	x4, x4, x8
    58d4:	mov	x2, #0x40                  	// #64
    58d8:	sub	x2, x2, x8
    58dc:	lsr	x11, x4, #32
    58e0:	lsl	x3, x1, x8
    58e4:	and	x10, x4, #0xffffffff
    58e8:	lsr	x1, x1, x2
    58ec:	lsr	x5, x0, x2
    58f0:	orr	x5, x5, x3
    58f4:	udiv	x2, x1, x11
    58f8:	lsl	x7, x0, x8
    58fc:	msub	x1, x2, x11, x1
    5900:	mov	x0, x2
    5904:	mul	x2, x10, x2
    5908:	extr	x1, x1, x5, #32
    590c:	cmp	x2, x1
    5910:	b.ls	5924 <__divti3@@GCC_3.0+0x2dc>  // b.plast
    5914:	adds	x1, x4, x1
    5918:	ccmp	x2, x1, #0x0, cc  // cc = lo, ul, last
    591c:	b.hi	597c <__divti3@@GCC_3.0+0x334>  // b.pmore
    5920:	sub	x0, x0, #0x1
    5924:	sub	x1, x1, x2
    5928:	udiv	x2, x1, x11
    592c:	msub	x1, x2, x11, x1
    5930:	mov	x8, x2
    5934:	mul	x3, x10, x2
    5938:	bfi	x5, x1, #32, #32
    593c:	cmp	x3, x5
    5940:	b.ls	5954 <__divti3@@GCC_3.0+0x30c>  // b.plast
    5944:	adds	x5, x4, x5
    5948:	ccmp	x3, x5, #0x0, cc  // cc = lo, ul, last
    594c:	b.hi	5994 <__divti3@@GCC_3.0+0x34c>  // b.pmore
    5950:	sub	x8, x2, #0x1
    5954:	sub	x3, x5, x3
    5958:	orr	x1, x8, x0, lsl #32
    595c:	b	5868 <__divti3@@GCC_3.0+0x220>
    5960:	ccmp	x2, x0, #0x0, cs  // cs = hs, nlast
    5964:	mov	x1, #0x0                   	// #0
    5968:	cset	x0, ls  // ls = plast
    596c:	b	570c <__divti3@@GCC_3.0+0xc4>
    5970:	mov	x0, x1
    5974:	mov	x1, #0x0                   	// #0
    5978:	b	570c <__divti3@@GCC_3.0+0xc4>
    597c:	sub	x0, x0, #0x2
    5980:	add	x1, x1, x4
    5984:	b	5924 <__divti3@@GCC_3.0+0x2dc>
    5988:	sub	x5, x10, #0x2
    598c:	add	x4, x4, x3
    5990:	b	57d8 <__divti3@@GCC_3.0+0x190>
    5994:	sub	x8, x2, #0x2
    5998:	add	x5, x5, x4
    599c:	b	5954 <__divti3@@GCC_3.0+0x30c>
    59a0:	sub	x1, x1, #0x2
    59a4:	add	x5, x5, x3
    59a8:	b	57a8 <__divti3@@GCC_3.0+0x160>
    59ac:	sub	x0, x0, #0x2
    59b0:	add	x3, x3, x4
    59b4:	b	5894 <__divti3@@GCC_3.0+0x24c>
    59b8:	sub	x0, x0, #0x2
    59bc:	add	x1, x1, x4
    59c0:	b	56d0 <__divti3@@GCC_3.0+0x88>
    59c4:	nop

00000000000059c8 <__modti3@@GCC_3.0>:
    59c8:	mov	x6, #0x0                   	// #0
    59cc:	tbnz	x1, #63, 5ab0 <__modti3@@GCC_3.0+0xe8>
    59d0:	tbz	x3, #63, 59dc <__modti3@@GCC_3.0+0x14>
    59d4:	negs	x2, x2
    59d8:	ngc	x3, x3
    59dc:	mov	x4, x2
    59e0:	mov	x10, x0
    59e4:	mov	x5, x1
    59e8:	cbnz	x3, 5a84 <__modti3@@GCC_3.0+0xbc>
    59ec:	cmp	x2, x1
    59f0:	b.ls	5ac0 <__modti3@@GCC_3.0+0xf8>  // b.plast
    59f4:	clz	x0, x2
    59f8:	mov	x7, x0
    59fc:	cbz	x0, 5a18 <__modti3@@GCC_3.0+0x50>
    5a00:	neg	w1, w0
    5a04:	lsl	x5, x5, x0
    5a08:	lsl	x4, x2, x0
    5a0c:	lsr	x1, x10, x1
    5a10:	orr	x5, x1, x5
    5a14:	lsl	x10, x10, x0
    5a18:	lsr	x2, x4, #32
    5a1c:	and	x0, x4, #0xffffffff
    5a20:	udiv	x1, x5, x2
    5a24:	msub	x5, x1, x2, x5
    5a28:	mul	x1, x0, x1
    5a2c:	extr	x5, x5, x10, #32
    5a30:	cmp	x1, x5
    5a34:	b.ls	5a48 <__modti3@@GCC_3.0+0x80>  // b.plast
    5a38:	adds	x5, x4, x5
    5a3c:	ccmp	x1, x5, #0x0, cc  // cc = lo, ul, last
    5a40:	add	x3, x5, x4
    5a44:	csel	x5, x3, x5, hi  // hi = pmore
    5a48:	sub	x5, x5, x1
    5a4c:	udiv	x1, x5, x2
    5a50:	msub	x5, x1, x2, x5
    5a54:	mul	x0, x0, x1
    5a58:	mov	x1, x10
    5a5c:	bfi	x1, x5, #32, #32
    5a60:	cmp	x0, x1
    5a64:	b.hi	5bc8 <__modti3@@GCC_3.0+0x200>  // b.pmore
    5a68:	sub	x0, x1, x0
    5a6c:	lsr	x0, x0, x7
    5a70:	mov	x1, #0x0                   	// #0
    5a74:	cbz	x6, 5a80 <__modti3@@GCC_3.0+0xb8>
    5a78:	negs	x0, x0
    5a7c:	ngc	x1, x1
    5a80:	ret
    5a84:	cmp	x3, x1
    5a88:	mov	x4, x0
    5a8c:	b.hi	5a74 <__modti3@@GCC_3.0+0xac>  // b.pmore
    5a90:	clz	x8, x3
    5a94:	cbnz	x8, 5bdc <__modti3@@GCC_3.0+0x214>
    5a98:	ccmp	x2, x0, #0x0, cs  // cs = hs, nlast
    5a9c:	b.hi	5aa8 <__modti3@@GCC_3.0+0xe0>  // b.pmore
    5aa0:	subs	x4, x0, x2
    5aa4:	sbc	x1, x1, x3
    5aa8:	mov	x0, x4
    5aac:	b	5a74 <__modti3@@GCC_3.0+0xac>
    5ab0:	negs	x0, x0
    5ab4:	mov	x6, #0xffffffffffffffff    	// #-1
    5ab8:	ngc	x1, x1
    5abc:	b	59d0 <__modti3@@GCC_3.0+0x8>
    5ac0:	cbnz	x2, 5acc <__modti3@@GCC_3.0+0x104>
    5ac4:	mov	x4, #0x1                   	// #1
    5ac8:	udiv	x4, x4, x3
    5acc:	clz	x11, x4
    5ad0:	mov	x7, x11
    5ad4:	cbnz	x11, 5b44 <__modti3@@GCC_3.0+0x17c>
    5ad8:	sub	x5, x1, x4
    5adc:	lsr	x12, x4, #32
    5ae0:	and	x13, x4, #0xffffffff
    5ae4:	udiv	x8, x5, x12
    5ae8:	msub	x5, x8, x12, x5
    5aec:	mul	x8, x8, x13
    5af0:	extr	x3, x5, x10, #32
    5af4:	cmp	x8, x3
    5af8:	b.ls	5b0c <__modti3@@GCC_3.0+0x144>  // b.plast
    5afc:	adds	x5, x4, x3
    5b00:	ccmp	x8, x5, #0x0, cc  // cc = lo, ul, last
    5b04:	add	x3, x5, x4
    5b08:	csel	x3, x3, x5, hi  // hi = pmore
    5b0c:	sub	x3, x3, x8
    5b10:	mov	x1, x10
    5b14:	udiv	x2, x3, x12
    5b18:	msub	x3, x2, x12, x3
    5b1c:	mul	x2, x2, x13
    5b20:	bfi	x1, x3, #32, #32
    5b24:	cmp	x2, x1
    5b28:	b.ls	5b3c <__modti3@@GCC_3.0+0x174>  // b.plast
    5b2c:	adds	x1, x4, x1
    5b30:	add	x4, x1, x4
    5b34:	ccmp	x2, x1, #0x0, cc  // cc = lo, ul, last
    5b38:	csel	x1, x4, x1, hi  // hi = pmore
    5b3c:	sub	x0, x1, x2
    5b40:	b	5a6c <__modti3@@GCC_3.0+0xa4>
    5b44:	lsl	x4, x4, x11
    5b48:	mov	x5, #0x40                  	// #64
    5b4c:	sub	x5, x5, x11
    5b50:	lsr	x12, x4, #32
    5b54:	and	x13, x4, #0xffffffff
    5b58:	lsl	x2, x1, x11
    5b5c:	lsr	x9, x1, x5
    5b60:	lsr	x5, x0, x5
    5b64:	orr	x5, x5, x2
    5b68:	udiv	x8, x9, x12
    5b6c:	lsl	x10, x0, x11
    5b70:	msub	x9, x8, x12, x9
    5b74:	mul	x0, x13, x8
    5b78:	extr	x8, x9, x5, #32
    5b7c:	cmp	x0, x8
    5b80:	b.ls	5b94 <__modti3@@GCC_3.0+0x1cc>  // b.plast
    5b84:	adds	x8, x4, x8
    5b88:	ccmp	x0, x8, #0x0, cc  // cc = lo, ul, last
    5b8c:	add	x1, x8, x4
    5b90:	csel	x8, x1, x8, hi  // hi = pmore
    5b94:	sub	x8, x8, x0
    5b98:	udiv	x1, x8, x12
    5b9c:	msub	x8, x1, x12, x8
    5ba0:	mul	x1, x13, x1
    5ba4:	bfi	x5, x8, #32, #32
    5ba8:	cmp	x1, x5
    5bac:	b.ls	5bc0 <__modti3@@GCC_3.0+0x1f8>  // b.plast
    5bb0:	adds	x5, x4, x5
    5bb4:	ccmp	x1, x5, #0x0, cc  // cc = lo, ul, last
    5bb8:	add	x0, x5, x4
    5bbc:	csel	x5, x0, x5, hi  // hi = pmore
    5bc0:	sub	x5, x5, x1
    5bc4:	b	5ae4 <__modti3@@GCC_3.0+0x11c>
    5bc8:	adds	x1, x4, x1
    5bcc:	add	x4, x1, x4
    5bd0:	ccmp	x0, x1, #0x0, cc  // cc = lo, ul, last
    5bd4:	csel	x1, x4, x1, hi  // hi = pmore
    5bd8:	b	5a68 <__modti3@@GCC_3.0+0xa0>
    5bdc:	mov	x10, #0x40                  	// #64
    5be0:	sub	x10, x10, x8
    5be4:	lsl	x3, x3, x8
    5be8:	lsr	x9, x2, x10
    5bec:	orr	x9, x9, x3
    5bf0:	lsr	x7, x1, x10
    5bf4:	and	x11, x9, #0xffffffff
    5bf8:	lsr	x12, x9, #32
    5bfc:	lsl	x4, x2, x8
    5c00:	lsr	x3, x0, x10
    5c04:	lsl	x1, x1, x8
    5c08:	orr	x3, x3, x1
    5c0c:	udiv	x2, x7, x12
    5c10:	lsl	x13, x0, x8
    5c14:	mov	x5, x2
    5c18:	msub	x2, x2, x12, x7
    5c1c:	mul	x0, x11, x5
    5c20:	extr	x2, x2, x3, #32
    5c24:	cmp	x0, x2
    5c28:	b.ls	5c3c <__modti3@@GCC_3.0+0x274>  // b.plast
    5c2c:	adds	x2, x9, x2
    5c30:	ccmp	x0, x2, #0x0, cc  // cc = lo, ul, last
    5c34:	b.hi	5d00 <__modti3@@GCC_3.0+0x338>  // b.pmore
    5c38:	sub	x5, x5, #0x1
    5c3c:	sub	x2, x2, x0
    5c40:	udiv	x0, x2, x12
    5c44:	msub	x2, x0, x12, x2
    5c48:	mov	x7, x0
    5c4c:	mul	x1, x11, x0
    5c50:	bfi	x3, x2, #32, #32
    5c54:	mov	x2, x3
    5c58:	cmp	x1, x3
    5c5c:	b.ls	5c70 <__modti3@@GCC_3.0+0x2a8>  // b.plast
    5c60:	adds	x2, x9, x3
    5c64:	ccmp	x1, x2, #0x0, cc  // cc = lo, ul, last
    5c68:	b.hi	5cf4 <__modti3@@GCC_3.0+0x32c>  // b.pmore
    5c6c:	sub	x7, x0, #0x1
    5c70:	orr	x5, x7, x5, lsl #32
    5c74:	and	x12, x4, #0xffffffff
    5c78:	mov	w3, w7
    5c7c:	lsr	x0, x4, #32
    5c80:	lsr	x5, x5, #32
    5c84:	sub	x1, x2, x1
    5c88:	mov	x14, #0x100000000           	// #4294967296
    5c8c:	mul	x7, x3, x12
    5c90:	mul	x12, x5, x12
    5c94:	madd	x3, x3, x0, x12
    5c98:	and	x11, x7, #0xffffffff
    5c9c:	mul	x2, x5, x0
    5ca0:	add	x5, x3, x7, lsr #32
    5ca4:	add	x0, x2, x14
    5ca8:	cmp	x12, x5
    5cac:	csel	x2, x0, x2, hi  // hi = pmore
    5cb0:	add	x7, x11, x5, lsl #32
    5cb4:	add	x2, x2, x5, lsr #32
    5cb8:	cmp	x1, x2
    5cbc:	b.cc	5cc8 <__modti3@@GCC_3.0+0x300>  // b.lo, b.ul, b.last
    5cc0:	ccmp	x13, x7, #0x2, eq  // eq = none
    5cc4:	b.cs	5cd4 <__modti3@@GCC_3.0+0x30c>  // b.hs, b.nlast
    5cc8:	subs	x7, x7, x4
    5ccc:	cinc	x3, x9, cc  // cc = lo, ul, last
    5cd0:	sub	x2, x2, x3
    5cd4:	subs	x0, x13, x7
    5cd8:	cmp	x13, x7
    5cdc:	sbc	x1, x1, x2
    5ce0:	lsr	x0, x0, x8
    5ce4:	lsl	x10, x1, x10
    5ce8:	orr	x0, x10, x0
    5cec:	lsr	x1, x1, x8
    5cf0:	b	5a74 <__modti3@@GCC_3.0+0xac>
    5cf4:	sub	x7, x0, #0x2
    5cf8:	add	x2, x2, x9
    5cfc:	b	5c70 <__modti3@@GCC_3.0+0x2a8>
    5d00:	sub	x5, x5, #0x2
    5d04:	add	x2, x2, x9
    5d08:	b	5c3c <__modti3@@GCC_3.0+0x274>
    5d0c:	nop

0000000000005d10 <__divmodti4@@GCC_7.0.0>:
    5d10:	mov	x6, #0xffffffffffffffff    	// #-1
    5d14:	mov	x5, #0x0                   	// #0
    5d18:	tbnz	x1, #63, 5e1c <__divmodti4@@GCC_7.0.0+0x10c>
    5d1c:	tbnz	x3, #63, 5e30 <__divmodti4@@GCC_7.0.0+0x120>
    5d20:	mov	x6, x5
    5d24:	mov	x7, x2
    5d28:	mov	x11, x0
    5d2c:	mov	x8, x1
    5d30:	cbnz	x3, 5dfc <__divmodti4@@GCC_7.0.0+0xec>
    5d34:	cmp	x2, x1
    5d38:	b.ls	5e6c <__divmodti4@@GCC_7.0.0+0x15c>  // b.plast
    5d3c:	clz	x0, x2
    5d40:	mov	x10, x0
    5d44:	cbz	x0, 5d60 <__divmodti4@@GCC_7.0.0+0x50>
    5d48:	neg	w1, w0
    5d4c:	lsl	x3, x8, x0
    5d50:	lsl	x7, x2, x0
    5d54:	lsr	x8, x11, x1
    5d58:	orr	x8, x8, x3
    5d5c:	lsl	x11, x11, x0
    5d60:	lsr	x9, x7, #32
    5d64:	and	x2, x7, #0xffffffff
    5d68:	udiv	x3, x8, x9
    5d6c:	mov	x0, x3
    5d70:	msub	x3, x3, x9, x8
    5d74:	mul	x1, x2, x0
    5d78:	extr	x3, x3, x11, #32
    5d7c:	cmp	x1, x3
    5d80:	b.ls	5d94 <__divmodti4@@GCC_7.0.0+0x84>  // b.plast
    5d84:	adds	x3, x7, x3
    5d88:	ccmp	x1, x3, #0x0, cc  // cc = lo, ul, last
    5d8c:	b.hi	60f8 <__divmodti4@@GCC_7.0.0+0x3e8>  // b.pmore
    5d90:	sub	x0, x0, #0x1
    5d94:	sub	x3, x3, x1
    5d98:	udiv	x1, x3, x9
    5d9c:	msub	x3, x1, x9, x3
    5da0:	mov	x8, x1
    5da4:	mul	x2, x2, x1
    5da8:	mov	x1, x11
    5dac:	bfi	x1, x3, #32, #32
    5db0:	cmp	x2, x1
    5db4:	b.ls	5dc8 <__divmodti4@@GCC_7.0.0+0xb8>  // b.plast
    5db8:	adds	x1, x7, x1
    5dbc:	ccmp	x2, x1, #0x0, cc  // cc = lo, ul, last
    5dc0:	b.hi	6104 <__divmodti4@@GCC_7.0.0+0x3f4>  // b.pmore
    5dc4:	sub	x8, x8, #0x1
    5dc8:	orr	x0, x8, x0, lsl #32
    5dcc:	sub	x2, x1, x2
    5dd0:	mov	x1, #0x0                   	// #0
    5dd4:	lsr	x2, x2, x10
    5dd8:	mov	x3, #0x0                   	// #0
    5ddc:	cbz	x6, 5de8 <__divmodti4@@GCC_7.0.0+0xd8>
    5de0:	negs	x0, x0
    5de4:	ngc	x1, x1
    5de8:	cbz	x5, 5df4 <__divmodti4@@GCC_7.0.0+0xe4>
    5dec:	negs	x2, x2
    5df0:	ngc	x3, x3
    5df4:	stp	x2, x3, [x4]
    5df8:	ret
    5dfc:	cmp	x3, x1
    5e00:	mov	x7, x0
    5e04:	b.ls	5e3c <__divmodti4@@GCC_7.0.0+0x12c>  // b.plast
    5e08:	mov	x2, x0
    5e0c:	mov	x3, x1
    5e10:	mov	x0, #0x0                   	// #0
    5e14:	mov	x1, #0x0                   	// #0
    5e18:	b	5ddc <__divmodti4@@GCC_7.0.0+0xcc>
    5e1c:	negs	x0, x0
    5e20:	mov	x6, #0x0                   	// #0
    5e24:	ngc	x1, x1
    5e28:	mov	x5, #0xffffffffffffffff    	// #-1
    5e2c:	tbz	x3, #63, 5d20 <__divmodti4@@GCC_7.0.0+0x10>
    5e30:	negs	x2, x2
    5e34:	ngc	x3, x3
    5e38:	b	5d24 <__divmodti4@@GCC_7.0.0+0x14>
    5e3c:	clz	x8, x3
    5e40:	cbnz	x8, 5f90 <__divmodti4@@GCC_7.0.0+0x280>
    5e44:	ccmp	x2, x11, #0x0, cs  // cs = hs, nlast
    5e48:	mov	x0, #0x0                   	// #0
    5e4c:	b.hi	5e5c <__divmodti4@@GCC_7.0.0+0x14c>  // b.pmore
    5e50:	subs	x7, x11, x2
    5e54:	mov	x0, #0x1                   	// #1
    5e58:	sbc	x1, x1, x3
    5e5c:	mov	x3, x1
    5e60:	mov	x2, x7
    5e64:	mov	x1, #0x0                   	// #0
    5e68:	b	5ddc <__divmodti4@@GCC_7.0.0+0xcc>
    5e6c:	cbnz	x2, 5e78 <__divmodti4@@GCC_7.0.0+0x168>
    5e70:	mov	x7, #0x1                   	// #1
    5e74:	udiv	x7, x7, x3
    5e78:	clz	x3, x7
    5e7c:	mov	x10, x3
    5e80:	cbnz	x3, 5f00 <__divmodti4@@GCC_7.0.0+0x1f0>
    5e84:	lsr	x12, x7, #32
    5e88:	and	x2, x7, #0xffffffff
    5e8c:	sub	x9, x1, x7
    5e90:	mov	x1, #0x1                   	// #1
    5e94:	udiv	x8, x9, x12
    5e98:	mov	x0, x8
    5e9c:	msub	x8, x8, x12, x9
    5ea0:	mul	x3, x0, x2
    5ea4:	extr	x8, x8, x11, #32
    5ea8:	cmp	x3, x8
    5eac:	b.ls	5ec0 <__divmodti4@@GCC_7.0.0+0x1b0>  // b.plast
    5eb0:	adds	x8, x7, x8
    5eb4:	ccmp	x3, x8, #0x0, cc  // cc = lo, ul, last
    5eb8:	b.hi	60ec <__divmodti4@@GCC_7.0.0+0x3dc>  // b.pmore
    5ebc:	sub	x0, x0, #0x1
    5ec0:	sub	x8, x8, x3
    5ec4:	udiv	x9, x8, x12
    5ec8:	msub	x8, x9, x12, x8
    5ecc:	mov	x13, x9
    5ed0:	mul	x3, x9, x2
    5ed4:	mov	x2, x11
    5ed8:	bfi	x2, x8, #32, #32
    5edc:	cmp	x3, x2
    5ee0:	b.ls	5ef4 <__divmodti4@@GCC_7.0.0+0x1e4>  // b.plast
    5ee4:	adds	x2, x7, x2
    5ee8:	ccmp	x3, x2, #0x0, cc  // cc = lo, ul, last
    5eec:	b.hi	60e0 <__divmodti4@@GCC_7.0.0+0x3d0>  // b.pmore
    5ef0:	sub	x13, x9, #0x1
    5ef4:	sub	x2, x2, x3
    5ef8:	orr	x0, x13, x0, lsl #32
    5efc:	b	5dd4 <__divmodti4@@GCC_7.0.0+0xc4>
    5f00:	lsl	x7, x7, x3
    5f04:	mov	x9, #0x40                  	// #64
    5f08:	sub	x9, x9, x3
    5f0c:	lsr	x12, x7, #32
    5f10:	lsl	x11, x1, x3
    5f14:	and	x2, x7, #0xffffffff
    5f18:	lsr	x13, x1, x9
    5f1c:	lsr	x8, x0, x9
    5f20:	orr	x8, x8, x11
    5f24:	udiv	x9, x13, x12
    5f28:	lsl	x11, x0, x3
    5f2c:	mov	x1, x9
    5f30:	msub	x9, x9, x12, x13
    5f34:	mul	x3, x2, x1
    5f38:	extr	x0, x9, x8, #32
    5f3c:	cmp	x3, x0
    5f40:	b.ls	5f54 <__divmodti4@@GCC_7.0.0+0x244>  // b.plast
    5f44:	adds	x0, x7, x0
    5f48:	ccmp	x3, x0, #0x0, cc  // cc = lo, ul, last
    5f4c:	b.hi	60bc <__divmodti4@@GCC_7.0.0+0x3ac>  // b.pmore
    5f50:	sub	x1, x1, #0x1
    5f54:	sub	x0, x0, x3
    5f58:	udiv	x3, x0, x12
    5f5c:	msub	x0, x3, x12, x0
    5f60:	mov	x13, x3
    5f64:	mul	x9, x2, x3
    5f68:	bfi	x8, x0, #32, #32
    5f6c:	cmp	x9, x8
    5f70:	b.ls	5f84 <__divmodti4@@GCC_7.0.0+0x274>  // b.plast
    5f74:	adds	x8, x7, x8
    5f78:	ccmp	x9, x8, #0x0, cc  // cc = lo, ul, last
    5f7c:	b.hi	60d4 <__divmodti4@@GCC_7.0.0+0x3c4>  // b.pmore
    5f80:	sub	x13, x3, #0x1
    5f84:	sub	x9, x8, x9
    5f88:	orr	x1, x13, x1, lsl #32
    5f8c:	b	5e94 <__divmodti4@@GCC_7.0.0+0x184>
    5f90:	mov	x9, #0x40                  	// #64
    5f94:	sub	x9, x9, x8
    5f98:	lsl	x3, x3, x8
    5f9c:	lsr	x10, x2, x9
    5fa0:	orr	x10, x10, x3
    5fa4:	lsr	x11, x1, x9
    5fa8:	and	x3, x10, #0xffffffff
    5fac:	lsr	x14, x10, #32
    5fb0:	lsr	x7, x0, x9
    5fb4:	lsl	x1, x1, x8
    5fb8:	orr	x1, x7, x1
    5fbc:	lsl	x13, x0, x8
    5fc0:	udiv	x7, x11, x14
    5fc4:	lsl	x2, x2, x8
    5fc8:	mov	x0, x7
    5fcc:	msub	x7, x7, x14, x11
    5fd0:	mul	x11, x3, x0
    5fd4:	extr	x7, x7, x1, #32
    5fd8:	cmp	x11, x7
    5fdc:	b.ls	5ff0 <__divmodti4@@GCC_7.0.0+0x2e0>  // b.plast
    5fe0:	adds	x7, x10, x7
    5fe4:	ccmp	x11, x7, #0x0, cc  // cc = lo, ul, last
    5fe8:	b.hi	60b0 <__divmodti4@@GCC_7.0.0+0x3a0>  // b.pmore
    5fec:	sub	x0, x0, #0x1
    5ff0:	sub	x7, x7, x11
    5ff4:	udiv	x12, x7, x14
    5ff8:	msub	x7, x12, x14, x7
    5ffc:	mov	x11, x12
    6000:	mul	x3, x3, x12
    6004:	bfi	x1, x7, #32, #32
    6008:	cmp	x3, x1
    600c:	b.ls	6020 <__divmodti4@@GCC_7.0.0+0x310>  // b.plast
    6010:	adds	x1, x10, x1
    6014:	ccmp	x3, x1, #0x0, cc  // cc = lo, ul, last
    6018:	b.hi	60c8 <__divmodti4@@GCC_7.0.0+0x3b8>  // b.pmore
    601c:	sub	x11, x12, #0x1
    6020:	orr	x0, x11, x0, lsl #32
    6024:	and	x15, x2, #0xffffffff
    6028:	mov	w11, w11
    602c:	lsr	x12, x2, #32
    6030:	lsr	x14, x0, #32
    6034:	sub	x3, x1, x3
    6038:	mov	x16, #0x100000000           	// #4294967296
    603c:	mul	x7, x11, x15
    6040:	mul	x15, x14, x15
    6044:	madd	x11, x11, x12, x15
    6048:	and	x1, x7, #0xffffffff
    604c:	mul	x12, x14, x12
    6050:	add	x7, x11, x7, lsr #32
    6054:	add	x11, x12, x16
    6058:	cmp	x15, x7
    605c:	csel	x12, x11, x12, hi  // hi = pmore
    6060:	add	x1, x1, x7, lsl #32
    6064:	add	x7, x12, x7, lsr #32
    6068:	cmp	x3, x7
    606c:	b.cc	6078 <__divmodti4@@GCC_7.0.0+0x368>  // b.lo, b.ul, b.last
    6070:	ccmp	x13, x1, #0x2, eq  // eq = none
    6074:	b.cs	608c <__divmodti4@@GCC_7.0.0+0x37c>  // b.hs, b.nlast
    6078:	cmp	x1, x2
    607c:	sub	x0, x0, #0x1
    6080:	cinc	x10, x10, cc  // cc = lo, ul, last
    6084:	sub	x1, x1, x2
    6088:	sub	x7, x7, x10
    608c:	subs	x2, x13, x1
    6090:	cmp	x13, x1
    6094:	mov	x1, #0x0                   	// #0
    6098:	sbc	x3, x3, x7
    609c:	lsr	x2, x2, x8
    60a0:	lsl	x9, x3, x9
    60a4:	orr	x2, x9, x2
    60a8:	lsr	x3, x3, x8
    60ac:	b	5ddc <__divmodti4@@GCC_7.0.0+0xcc>
    60b0:	sub	x0, x0, #0x2
    60b4:	add	x7, x7, x10
    60b8:	b	5ff0 <__divmodti4@@GCC_7.0.0+0x2e0>
    60bc:	sub	x1, x1, #0x2
    60c0:	add	x0, x0, x7
    60c4:	b	5f54 <__divmodti4@@GCC_7.0.0+0x244>
    60c8:	sub	x11, x12, #0x2
    60cc:	add	x1, x1, x10
    60d0:	b	6020 <__divmodti4@@GCC_7.0.0+0x310>
    60d4:	sub	x13, x3, #0x2
    60d8:	add	x8, x8, x7
    60dc:	b	5f84 <__divmodti4@@GCC_7.0.0+0x274>
    60e0:	sub	x13, x9, #0x2
    60e4:	add	x2, x2, x7
    60e8:	b	5ef4 <__divmodti4@@GCC_7.0.0+0x1e4>
    60ec:	sub	x0, x0, #0x2
    60f0:	add	x8, x8, x7
    60f4:	b	5ec0 <__divmodti4@@GCC_7.0.0+0x1b0>
    60f8:	sub	x0, x0, #0x2
    60fc:	add	x3, x3, x7
    6100:	b	5d94 <__divmodti4@@GCC_7.0.0+0x84>
    6104:	sub	x8, x8, #0x2
    6108:	add	x1, x1, x7
    610c:	b	5dc8 <__divmodti4@@GCC_7.0.0+0xb8>

0000000000006110 <__udivti3@@GCC_3.0>:
    6110:	mov	x4, x2
    6114:	mov	x5, x0
    6118:	mov	x6, x1
    611c:	cbnz	x3, 61b8 <__udivti3@@GCC_3.0+0xa8>
    6120:	cmp	x2, x1
    6124:	b.ls	62cc <__udivti3@@GCC_3.0+0x1bc>  // b.plast
    6128:	clz	x0, x2
    612c:	cbz	x0, 6148 <__udivti3@@GCC_3.0+0x38>
    6130:	neg	w1, w0
    6134:	lsl	x2, x6, x0
    6138:	lsl	x4, x4, x0
    613c:	lsr	x6, x5, x1
    6140:	orr	x6, x6, x2
    6144:	lsl	x5, x5, x0
    6148:	lsr	x3, x4, #32
    614c:	and	x7, x4, #0xffffffff
    6150:	udiv	x2, x6, x3
    6154:	mov	x0, x2
    6158:	msub	x2, x2, x3, x6
    615c:	mul	x6, x7, x0
    6160:	extr	x1, x2, x5, #32
    6164:	cmp	x6, x1
    6168:	b.ls	617c <__udivti3@@GCC_3.0+0x6c>  // b.plast
    616c:	adds	x1, x4, x1
    6170:	ccmp	x6, x1, #0x0, cc  // cc = lo, ul, last
    6174:	b.hi	643c <__udivti3@@GCC_3.0+0x32c>  // b.pmore
    6178:	sub	x0, x0, #0x1
    617c:	sub	x1, x1, x6
    6180:	udiv	x6, x1, x3
    6184:	msub	x1, x6, x3, x1
    6188:	mov	x2, x6
    618c:	mul	x7, x7, x6
    6190:	bfi	x5, x1, #32, #32
    6194:	cmp	x7, x5
    6198:	b.ls	61ac <__udivti3@@GCC_3.0+0x9c>  // b.plast
    619c:	adds	x5, x4, x5
    61a0:	ccmp	x7, x5, #0x0, cc  // cc = lo, ul, last
    61a4:	cinc	x2, x6, ls  // ls = plast
    61a8:	sub	x2, x2, #0x2
    61ac:	orr	x0, x2, x0, lsl #32
    61b0:	mov	x1, #0x0                   	// #0
    61b4:	ret
    61b8:	cmp	x3, x1
    61bc:	b.ls	61cc <__udivti3@@GCC_3.0+0xbc>  // b.plast
    61c0:	mov	x1, #0x0                   	// #0
    61c4:	mov	x0, #0x0                   	// #0
    61c8:	ret
    61cc:	clz	x7, x3
    61d0:	cbz	x7, 63e4 <__udivti3@@GCC_3.0+0x2d4>
    61d4:	mov	x4, #0x40                  	// #64
    61d8:	sub	x4, x4, x7
    61dc:	lsl	x3, x3, x7
    61e0:	lsr	x5, x2, x4
    61e4:	orr	x3, x5, x3
    61e8:	lsr	x6, x1, x4
    61ec:	and	x8, x3, #0xffffffff
    61f0:	lsr	x10, x3, #32
    61f4:	lsr	x4, x0, x4
    61f8:	lsl	x1, x1, x7
    61fc:	orr	x1, x4, x1
    6200:	lsl	x2, x2, x7
    6204:	udiv	x5, x6, x10
    6208:	mov	x4, x5
    620c:	msub	x5, x5, x10, x6
    6210:	mul	x6, x8, x4
    6214:	extr	x5, x5, x1, #32
    6218:	cmp	x6, x5
    621c:	b.ls	6230 <__udivti3@@GCC_3.0+0x120>  // b.plast
    6220:	adds	x5, x3, x5
    6224:	ccmp	x6, x5, #0x0, cc  // cc = lo, ul, last
    6228:	b.hi	6424 <__udivti3@@GCC_3.0+0x314>  // b.pmore
    622c:	sub	x4, x4, #0x1
    6230:	sub	x6, x5, x6
    6234:	udiv	x9, x6, x10
    6238:	msub	x6, x9, x10, x6
    623c:	mov	x5, x9
    6240:	mul	x8, x8, x9
    6244:	bfi	x1, x6, #32, #32
    6248:	cmp	x8, x1
    624c:	b.ls	6260 <__udivti3@@GCC_3.0+0x150>  // b.plast
    6250:	adds	x1, x3, x1
    6254:	ccmp	x8, x1, #0x0, cc  // cc = lo, ul, last
    6258:	b.hi	640c <__udivti3@@GCC_3.0+0x2fc>  // b.pmore
    625c:	sub	x5, x9, #0x1
    6260:	orr	x4, x5, x4, lsl #32
    6264:	and	x9, x2, #0xffffffff
    6268:	mov	w5, w5
    626c:	lsr	x2, x2, #32
    6270:	lsr	x6, x4, #32
    6274:	sub	x1, x1, x8
    6278:	mov	x10, #0x100000000           	// #4294967296
    627c:	mul	x11, x5, x9
    6280:	mul	x8, x6, x9
    6284:	madd	x5, x5, x2, x8
    6288:	mul	x2, x6, x2
    628c:	add	x3, x5, x11, lsr #32
    6290:	add	x5, x2, x10
    6294:	cmp	x8, x3
    6298:	csel	x2, x5, x2, hi  // hi = pmore
    629c:	add	x2, x2, x3, lsr #32
    62a0:	cmp	x1, x2
    62a4:	b.cc	62c0 <__udivti3@@GCC_3.0+0x1b0>  // b.lo, b.ul, b.last
    62a8:	and	x11, x11, #0xffffffff
    62ac:	lsl	x0, x0, x7
    62b0:	add	x3, x11, x3, lsl #32
    62b4:	cmp	x0, x3
    62b8:	ccmp	x1, x2, #0x0, cc  // cc = lo, ul, last
    62bc:	b.ne	63f4 <__udivti3@@GCC_3.0+0x2e4>  // b.any
    62c0:	sub	x0, x4, #0x1
    62c4:	mov	x1, #0x0                   	// #0
    62c8:	ret
    62cc:	cbnz	x2, 62d8 <__udivti3@@GCC_3.0+0x1c8>
    62d0:	mov	x2, #0x1                   	// #1
    62d4:	udiv	x4, x2, x4
    62d8:	clz	x8, x4
    62dc:	cbnz	x8, 6354 <__udivti3@@GCC_3.0+0x244>
    62e0:	lsr	x6, x4, #32
    62e4:	and	x7, x4, #0xffffffff
    62e8:	sub	x2, x1, x4
    62ec:	mov	x1, #0x1                   	// #1
    62f0:	udiv	x3, x2, x6
    62f4:	mov	x0, x3
    62f8:	msub	x3, x3, x6, x2
    62fc:	mul	x8, x0, x7
    6300:	extr	x2, x3, x5, #32
    6304:	cmp	x8, x2
    6308:	b.ls	631c <__udivti3@@GCC_3.0+0x20c>  // b.plast
    630c:	adds	x2, x4, x2
    6310:	ccmp	x8, x2, #0x0, cc  // cc = lo, ul, last
    6314:	b.hi	6430 <__udivti3@@GCC_3.0+0x320>  // b.pmore
    6318:	sub	x0, x0, #0x1
    631c:	sub	x2, x2, x8
    6320:	udiv	x8, x2, x6
    6324:	msub	x2, x8, x6, x2
    6328:	mov	x3, x8
    632c:	mul	x7, x8, x7
    6330:	bfi	x5, x2, #32, #32
    6334:	cmp	x7, x5
    6338:	b.ls	634c <__udivti3@@GCC_3.0+0x23c>  // b.plast
    633c:	adds	x4, x4, x5
    6340:	ccmp	x7, x4, #0x0, cc  // cc = lo, ul, last
    6344:	cinc	x3, x8, ls  // ls = plast
    6348:	sub	x3, x3, #0x2
    634c:	orr	x0, x3, x0, lsl #32
    6350:	ret
    6354:	lsl	x4, x4, x8
    6358:	mov	x3, #0x40                  	// #64
    635c:	sub	x3, x3, x8
    6360:	lsr	x6, x4, #32
    6364:	lsl	x2, x1, x8
    6368:	and	x7, x4, #0xffffffff
    636c:	lsr	x1, x1, x3
    6370:	lsr	x3, x0, x3
    6374:	orr	x3, x3, x2
    6378:	udiv	x2, x1, x6
    637c:	lsl	x5, x0, x8
    6380:	msub	x1, x2, x6, x1
    6384:	mov	x0, x2
    6388:	mul	x2, x7, x2
    638c:	extr	x1, x1, x3, #32
    6390:	cmp	x2, x1
    6394:	b.ls	63a8 <__udivti3@@GCC_3.0+0x298>  // b.plast
    6398:	adds	x1, x4, x1
    639c:	ccmp	x2, x1, #0x0, cc  // cc = lo, ul, last
    63a0:	b.hi	6400 <__udivti3@@GCC_3.0+0x2f0>  // b.pmore
    63a4:	sub	x0, x0, #0x1
    63a8:	sub	x1, x1, x2
    63ac:	udiv	x2, x1, x6
    63b0:	msub	x1, x2, x6, x1
    63b4:	mov	x8, x2
    63b8:	mul	x2, x7, x2
    63bc:	bfi	x3, x1, #32, #32
    63c0:	cmp	x2, x3
    63c4:	b.ls	63d8 <__udivti3@@GCC_3.0+0x2c8>  // b.plast
    63c8:	adds	x3, x4, x3
    63cc:	ccmp	x2, x3, #0x0, cc  // cc = lo, ul, last
    63d0:	b.hi	6418 <__udivti3@@GCC_3.0+0x308>  // b.pmore
    63d4:	sub	x8, x8, #0x1
    63d8:	sub	x2, x3, x2
    63dc:	orr	x1, x8, x0, lsl #32
    63e0:	b	62f0 <__udivti3@@GCC_3.0+0x1e0>
    63e4:	ccmp	x2, x0, #0x0, cs  // cs = hs, nlast
    63e8:	mov	x1, #0x0                   	// #0
    63ec:	cset	x0, ls  // ls = plast
    63f0:	ret
    63f4:	mov	x0, x4
    63f8:	mov	x1, #0x0                   	// #0
    63fc:	ret
    6400:	sub	x0, x0, #0x2
    6404:	add	x1, x1, x4
    6408:	b	63a8 <__udivti3@@GCC_3.0+0x298>
    640c:	sub	x5, x9, #0x2
    6410:	add	x1, x1, x3
    6414:	b	6260 <__udivti3@@GCC_3.0+0x150>
    6418:	sub	x8, x8, #0x2
    641c:	add	x3, x3, x4
    6420:	b	63d8 <__udivti3@@GCC_3.0+0x2c8>
    6424:	sub	x4, x4, #0x2
    6428:	add	x5, x5, x3
    642c:	b	6230 <__udivti3@@GCC_3.0+0x120>
    6430:	sub	x0, x0, #0x2
    6434:	add	x2, x2, x4
    6438:	b	631c <__udivti3@@GCC_3.0+0x20c>
    643c:	sub	x0, x0, #0x2
    6440:	add	x1, x1, x4
    6444:	b	617c <__udivti3@@GCC_3.0+0x6c>

0000000000006448 <__umodti3@@GCC_3.0>:
    6448:	mov	x4, x2
    644c:	mov	x7, x0
    6450:	mov	x6, x1
    6454:	mov	x5, x1
    6458:	cbnz	x3, 64e8 <__umodti3@@GCC_3.0+0xa0>
    645c:	cmp	x2, x1
    6460:	b.ls	651c <__umodti3@@GCC_3.0+0xd4>  // b.plast
    6464:	clz	x0, x2
    6468:	mov	x6, x0
    646c:	cbz	x0, 6488 <__umodti3@@GCC_3.0+0x40>
    6470:	neg	w1, w0
    6474:	lsl	x5, x5, x0
    6478:	lsl	x4, x2, x0
    647c:	lsr	x1, x7, x1
    6480:	orr	x5, x1, x5
    6484:	lsl	x7, x7, x0
    6488:	lsr	x2, x4, #32
    648c:	and	x0, x4, #0xffffffff
    6490:	udiv	x1, x5, x2
    6494:	msub	x5, x1, x2, x5
    6498:	mul	x1, x0, x1
    649c:	extr	x5, x5, x7, #32
    64a0:	cmp	x1, x5
    64a4:	b.ls	64b8 <__umodti3@@GCC_3.0+0x70>  // b.plast
    64a8:	adds	x5, x4, x5
    64ac:	ccmp	x1, x5, #0x0, cc  // cc = lo, ul, last
    64b0:	add	x3, x5, x4
    64b4:	csel	x5, x3, x5, hi  // hi = pmore
    64b8:	sub	x5, x5, x1
    64bc:	udiv	x1, x5, x2
    64c0:	msub	x5, x1, x2, x5
    64c4:	mul	x0, x0, x1
    64c8:	mov	x1, x7
    64cc:	bfi	x1, x5, #32, #32
    64d0:	cmp	x0, x1
    64d4:	b.hi	6624 <__umodti3@@GCC_3.0+0x1dc>  // b.pmore
    64d8:	sub	x0, x1, x0
    64dc:	lsr	x0, x0, x6
    64e0:	mov	x1, #0x0                   	// #0
    64e4:	ret
    64e8:	cmp	x3, x1
    64ec:	mov	x4, x0
    64f0:	b.hi	64e4 <__umodti3@@GCC_3.0+0x9c>  // b.pmore
    64f4:	clz	x7, x3
    64f8:	cbnz	x7, 6638 <__umodti3@@GCC_3.0+0x1f0>
    64fc:	cmp	x3, x1
    6500:	ccmp	x2, x0, #0x0, cs  // cs = hs, nlast
    6504:	b.hi	6510 <__umodti3@@GCC_3.0+0xc8>  // b.pmore
    6508:	subs	x4, x0, x2
    650c:	sbc	x6, x1, x3
    6510:	mov	x0, x4
    6514:	mov	x1, x6
    6518:	ret
    651c:	cbnz	x2, 6528 <__umodti3@@GCC_3.0+0xe0>
    6520:	mov	x2, #0x1                   	// #1
    6524:	udiv	x4, x2, x4
    6528:	clz	x3, x4
    652c:	mov	x6, x3
    6530:	cbnz	x3, 65a0 <__umodti3@@GCC_3.0+0x158>
    6534:	sub	x5, x1, x4
    6538:	lsr	x8, x4, #32
    653c:	and	x10, x4, #0xffffffff
    6540:	udiv	x3, x5, x8
    6544:	msub	x5, x3, x8, x5
    6548:	mul	x9, x3, x10
    654c:	extr	x3, x5, x7, #32
    6550:	cmp	x9, x3
    6554:	b.ls	6568 <__umodti3@@GCC_3.0+0x120>  // b.plast
    6558:	adds	x5, x4, x3
    655c:	ccmp	x9, x5, #0x0, cc  // cc = lo, ul, last
    6560:	add	x3, x5, x4
    6564:	csel	x3, x3, x5, hi  // hi = pmore
    6568:	sub	x3, x3, x9
    656c:	mov	x1, x7
    6570:	udiv	x2, x3, x8
    6574:	msub	x3, x2, x8, x3
    6578:	mul	x2, x2, x10
    657c:	bfi	x1, x3, #32, #32
    6580:	cmp	x2, x1
    6584:	b.ls	6598 <__umodti3@@GCC_3.0+0x150>  // b.plast
    6588:	adds	x0, x4, x1
    658c:	add	x4, x0, x4
    6590:	ccmp	x2, x0, #0x0, cc  // cc = lo, ul, last
    6594:	csel	x1, x4, x0, hi  // hi = pmore
    6598:	sub	x0, x1, x2
    659c:	b	64dc <__umodti3@@GCC_3.0+0x94>
    65a0:	lsl	x4, x4, x3
    65a4:	mov	x5, #0x40                  	// #64
    65a8:	sub	x5, x5, x3
    65ac:	lsr	x8, x4, #32
    65b0:	lsl	x2, x1, x3
    65b4:	and	x10, x4, #0xffffffff
    65b8:	lsr	x1, x1, x5
    65bc:	lsr	x5, x0, x5
    65c0:	orr	x5, x5, x2
    65c4:	udiv	x2, x1, x8
    65c8:	lsl	x7, x0, x3
    65cc:	msub	x1, x2, x8, x1
    65d0:	mul	x0, x10, x2
    65d4:	extr	x2, x1, x5, #32
    65d8:	cmp	x0, x2
    65dc:	b.ls	65f0 <__umodti3@@GCC_3.0+0x1a8>  // b.plast
    65e0:	adds	x2, x4, x2
    65e4:	ccmp	x0, x2, #0x0, cc  // cc = lo, ul, last
    65e8:	add	x1, x2, x4
    65ec:	csel	x2, x1, x2, hi  // hi = pmore
    65f0:	sub	x2, x2, x0
    65f4:	udiv	x1, x2, x8
    65f8:	msub	x2, x1, x8, x2
    65fc:	mul	x1, x10, x1
    6600:	bfi	x5, x2, #32, #32
    6604:	cmp	x1, x5
    6608:	b.ls	661c <__umodti3@@GCC_3.0+0x1d4>  // b.plast
    660c:	adds	x5, x4, x5
    6610:	ccmp	x1, x5, #0x0, cc  // cc = lo, ul, last
    6614:	add	x0, x5, x4
    6618:	csel	x5, x0, x5, hi  // hi = pmore
    661c:	sub	x5, x5, x1
    6620:	b	6540 <__umodti3@@GCC_3.0+0xf8>
    6624:	adds	x1, x4, x1
    6628:	add	x4, x1, x4
    662c:	ccmp	x0, x1, #0x0, cc  // cc = lo, ul, last
    6630:	csel	x1, x4, x1, hi  // hi = pmore
    6634:	b	64d8 <__umodti3@@GCC_3.0+0x90>
    6638:	mov	x8, #0x40                  	// #64
    663c:	sub	x8, x8, x7
    6640:	lsl	x3, x3, x7
    6644:	lsr	x4, x2, x8
    6648:	orr	x3, x4, x3
    664c:	lsr	x6, x1, x8
    6650:	and	x9, x3, #0xffffffff
    6654:	lsr	x10, x3, #32
    6658:	lsr	x4, x0, x8
    665c:	lsl	x1, x1, x7
    6660:	orr	x1, x4, x1
    6664:	lsl	x12, x0, x7
    6668:	udiv	x4, x6, x10
    666c:	lsl	x2, x2, x7
    6670:	mov	x5, x4
    6674:	msub	x4, x4, x10, x6
    6678:	mul	x0, x9, x5
    667c:	extr	x4, x4, x1, #32
    6680:	cmp	x0, x4
    6684:	b.ls	6698 <__umodti3@@GCC_3.0+0x250>  // b.plast
    6688:	adds	x4, x3, x4
    668c:	ccmp	x0, x4, #0x0, cc  // cc = lo, ul, last
    6690:	b.hi	6758 <__umodti3@@GCC_3.0+0x310>  // b.pmore
    6694:	sub	x5, x5, #0x1
    6698:	sub	x4, x4, x0
    669c:	udiv	x0, x4, x10
    66a0:	msub	x4, x0, x10, x4
    66a4:	mov	x6, x0
    66a8:	mul	x0, x9, x0
    66ac:	bfi	x1, x4, #32, #32
    66b0:	cmp	x0, x1
    66b4:	b.ls	66c8 <__umodti3@@GCC_3.0+0x280>  // b.plast
    66b8:	adds	x1, x3, x1
    66bc:	ccmp	x0, x1, #0x0, cc  // cc = lo, ul, last
    66c0:	b.hi	674c <__umodti3@@GCC_3.0+0x304>  // b.pmore
    66c4:	sub	x6, x6, #0x1
    66c8:	orr	x5, x6, x5, lsl #32
    66cc:	and	x11, x2, #0xffffffff
    66d0:	mov	w9, w6
    66d4:	lsr	x4, x2, #32
    66d8:	lsr	x5, x5, #32
    66dc:	sub	x1, x1, x0
    66e0:	mov	x13, #0x100000000           	// #4294967296
    66e4:	mul	x6, x9, x11
    66e8:	mul	x11, x5, x11
    66ec:	madd	x9, x9, x4, x11
    66f0:	and	x10, x6, #0xffffffff
    66f4:	mul	x4, x5, x4
    66f8:	add	x5, x9, x6, lsr #32
    66fc:	add	x0, x4, x13
    6700:	cmp	x11, x5
    6704:	csel	x4, x0, x4, hi  // hi = pmore
    6708:	add	x6, x10, x5, lsl #32
    670c:	add	x4, x4, x5, lsr #32
    6710:	cmp	x1, x4
    6714:	b.cc	6720 <__umodti3@@GCC_3.0+0x2d8>  // b.lo, b.ul, b.last
    6718:	ccmp	x12, x6, #0x2, eq  // eq = none
    671c:	b.cs	672c <__umodti3@@GCC_3.0+0x2e4>  // b.hs, b.nlast
    6720:	subs	x6, x6, x2
    6724:	cinc	x3, x3, cc  // cc = lo, ul, last
    6728:	sub	x4, x4, x3
    672c:	subs	x0, x12, x6
    6730:	cmp	x12, x6
    6734:	sbc	x1, x1, x4
    6738:	lsr	x0, x0, x7
    673c:	lsl	x8, x1, x8
    6740:	orr	x0, x8, x0
    6744:	lsr	x1, x1, x7
    6748:	ret
    674c:	sub	x6, x6, #0x2
    6750:	add	x1, x1, x3
    6754:	b	66c8 <__umodti3@@GCC_3.0+0x280>
    6758:	sub	x5, x5, #0x2
    675c:	add	x4, x4, x3
    6760:	b	6698 <__umodti3@@GCC_3.0+0x250>
    6764:	nop

0000000000006768 <__udivmodti4@@GCC_3.0>:
    6768:	mov	x9, x0
    676c:	mov	x6, x1
    6770:	mov	x7, x2
    6774:	mov	x5, x0
    6778:	mov	x8, x1
    677c:	cbnz	x3, 68bc <__udivmodti4@@GCC_3.0+0x154>
    6780:	cmp	x2, x1
    6784:	b.ls	682c <__udivmodti4@@GCC_3.0+0xc4>  // b.plast
    6788:	clz	x0, x2
    678c:	mov	x3, x0
    6790:	cbz	x0, 67ac <__udivmodti4@@GCC_3.0+0x44>
    6794:	neg	w2, w0
    6798:	lsl	x1, x1, x0
    679c:	lsl	x7, x7, x0
    67a0:	lsr	x8, x9, x2
    67a4:	orr	x8, x8, x1
    67a8:	lsl	x5, x9, x0
    67ac:	lsr	x9, x7, #32
    67b0:	and	x2, x7, #0xffffffff
    67b4:	udiv	x1, x8, x9
    67b8:	mov	x0, x1
    67bc:	msub	x1, x1, x9, x8
    67c0:	mul	x6, x2, x0
    67c4:	extr	x1, x1, x5, #32
    67c8:	cmp	x6, x1
    67cc:	b.ls	67e0 <__udivmodti4@@GCC_3.0+0x78>  // b.plast
    67d0:	adds	x1, x7, x1
    67d4:	ccmp	x6, x1, #0x0, cc  // cc = lo, ul, last
    67d8:	b.hi	6b10 <__udivmodti4@@GCC_3.0+0x3a8>  // b.pmore
    67dc:	sub	x0, x0, #0x1
    67e0:	sub	x1, x1, x6
    67e4:	udiv	x6, x1, x9
    67e8:	msub	x1, x6, x9, x1
    67ec:	mov	x8, x6
    67f0:	mul	x2, x2, x6
    67f4:	bfi	x5, x1, #32, #32
    67f8:	cmp	x2, x5
    67fc:	b.ls	6810 <__udivmodti4@@GCC_3.0+0xa8>  // b.plast
    6800:	adds	x5, x7, x5
    6804:	ccmp	x2, x5, #0x0, cc  // cc = lo, ul, last
    6808:	b.hi	6b1c <__udivmodti4@@GCC_3.0+0x3b4>  // b.pmore
    680c:	sub	x8, x6, #0x1
    6810:	sub	x5, x5, x2
    6814:	orr	x0, x8, x0, lsl #32
    6818:	mov	x1, #0x0                   	// #0
    681c:	cbz	x4, 6828 <__udivmodti4@@GCC_3.0+0xc0>
    6820:	lsr	x5, x5, x3
    6824:	stp	x5, xzr, [x4]
    6828:	ret
    682c:	cbnz	x2, 6838 <__udivmodti4@@GCC_3.0+0xd0>
    6830:	mov	x0, #0x1                   	// #1
    6834:	udiv	x7, x0, x2
    6838:	clz	x11, x7
    683c:	mov	x3, x11
    6840:	cbnz	x11, 690c <__udivmodti4@@GCC_3.0+0x1a4>
    6844:	sub	x2, x6, x7
    6848:	lsr	x10, x7, #32
    684c:	and	x8, x7, #0xffffffff
    6850:	mov	x1, #0x1                   	// #1
    6854:	udiv	x6, x2, x10
    6858:	mov	x0, x6
    685c:	msub	x6, x6, x10, x2
    6860:	mul	x2, x0, x8
    6864:	extr	x6, x6, x5, #32
    6868:	cmp	x2, x6
    686c:	b.ls	6880 <__udivmodti4@@GCC_3.0+0x118>  // b.plast
    6870:	adds	x6, x7, x6
    6874:	ccmp	x2, x6, #0x0, cc  // cc = lo, ul, last
    6878:	b.hi	6b04 <__udivmodti4@@GCC_3.0+0x39c>  // b.pmore
    687c:	sub	x0, x0, #0x1
    6880:	sub	x6, x6, x2
    6884:	udiv	x2, x6, x10
    6888:	msub	x6, x2, x10, x6
    688c:	mov	x9, x2
    6890:	mul	x8, x2, x8
    6894:	bfi	x5, x6, #32, #32
    6898:	cmp	x8, x5
    689c:	b.ls	68b0 <__udivmodti4@@GCC_3.0+0x148>  // b.plast
    68a0:	adds	x5, x7, x5
    68a4:	ccmp	x8, x5, #0x0, cc  // cc = lo, ul, last
    68a8:	b.hi	6af8 <__udivmodti4@@GCC_3.0+0x390>  // b.pmore
    68ac:	sub	x9, x2, #0x1
    68b0:	sub	x5, x5, x8
    68b4:	orr	x0, x9, x0, lsl #32
    68b8:	b	681c <__udivmodti4@@GCC_3.0+0xb4>
    68bc:	cmp	x3, x1
    68c0:	b.ls	68d8 <__udivmodti4@@GCC_3.0+0x170>  // b.plast
    68c4:	mov	x1, #0x0                   	// #0
    68c8:	mov	x0, #0x0                   	// #0
    68cc:	cbz	x4, 6828 <__udivmodti4@@GCC_3.0+0xc0>
    68d0:	stp	x9, x6, [x4]
    68d4:	ret
    68d8:	clz	x7, x3
    68dc:	cbnz	x7, 699c <__udivmodti4@@GCC_3.0+0x234>
    68e0:	cmp	x3, x1
    68e4:	mov	x0, #0x0                   	// #0
    68e8:	ccmp	x2, x9, #0x0, cs  // cs = hs, nlast
    68ec:	b.hi	68fc <__udivmodti4@@GCC_3.0+0x194>  // b.pmore
    68f0:	subs	x5, x9, x2
    68f4:	mov	x0, #0x1                   	// #1
    68f8:	sbc	x8, x1, x3
    68fc:	mov	x1, #0x0                   	// #0
    6900:	cbz	x4, 6828 <__udivmodti4@@GCC_3.0+0xc0>
    6904:	stp	x5, x8, [x4]
    6908:	ret
    690c:	lsl	x7, x7, x11
    6910:	mov	x2, #0x40                  	// #64
    6914:	sub	x2, x2, x11
    6918:	lsr	x10, x7, #32
    691c:	lsl	x0, x6, x11
    6920:	and	x8, x7, #0xffffffff
    6924:	lsr	x1, x6, x2
    6928:	lsr	x2, x9, x2
    692c:	orr	x6, x2, x0
    6930:	udiv	x0, x1, x10
    6934:	lsl	x5, x9, x11
    6938:	mov	x9, x0
    693c:	msub	x0, x0, x10, x1
    6940:	mul	x1, x8, x9
    6944:	extr	x0, x0, x6, #32
    6948:	cmp	x1, x0
    694c:	b.ls	6960 <__udivmodti4@@GCC_3.0+0x1f8>  // b.plast
    6950:	adds	x0, x7, x0
    6954:	ccmp	x1, x0, #0x0, cc  // cc = lo, ul, last
    6958:	b.hi	6ad4 <__udivmodti4@@GCC_3.0+0x36c>  // b.pmore
    695c:	sub	x9, x9, #0x1
    6960:	sub	x0, x0, x1
    6964:	udiv	x2, x0, x10
    6968:	msub	x0, x2, x10, x0
    696c:	mov	x1, x2
    6970:	mul	x2, x8, x2
    6974:	bfi	x6, x0, #32, #32
    6978:	cmp	x2, x6
    697c:	b.ls	6990 <__udivmodti4@@GCC_3.0+0x228>  // b.plast
    6980:	adds	x6, x7, x6
    6984:	ccmp	x2, x6, #0x0, cc  // cc = lo, ul, last
    6988:	b.hi	6aec <__udivmodti4@@GCC_3.0+0x384>  // b.pmore
    698c:	sub	x1, x1, #0x1
    6990:	sub	x2, x6, x2
    6994:	orr	x1, x1, x9, lsl #32
    6998:	b	6854 <__udivmodti4@@GCC_3.0+0xec>
    699c:	mov	x8, #0x40                  	// #64
    69a0:	sub	x8, x8, x7
    69a4:	lsl	x3, x3, x7
    69a8:	lsr	x0, x2, x8
    69ac:	orr	x3, x0, x3
    69b0:	lsr	x5, x1, x8
    69b4:	and	x13, x3, #0xffffffff
    69b8:	lsr	x11, x3, #32
    69bc:	lsl	x6, x1, x7
    69c0:	lsr	x1, x9, x8
    69c4:	orr	x6, x1, x6
    69c8:	lsl	x2, x2, x7
    69cc:	udiv	x1, x5, x11
    69d0:	lsl	x9, x9, x7
    69d4:	mov	x0, x1
    69d8:	msub	x1, x1, x11, x5
    69dc:	mul	x5, x13, x0
    69e0:	extr	x1, x1, x6, #32
    69e4:	cmp	x5, x1
    69e8:	b.ls	69fc <__udivmodti4@@GCC_3.0+0x294>  // b.plast
    69ec:	adds	x1, x3, x1
    69f0:	ccmp	x5, x1, #0x0, cc  // cc = lo, ul, last
    69f4:	b.hi	6ac8 <__udivmodti4@@GCC_3.0+0x360>  // b.pmore
    69f8:	sub	x0, x0, #0x1
    69fc:	sub	x1, x1, x5
    6a00:	udiv	x10, x1, x11
    6a04:	msub	x1, x10, x11, x1
    6a08:	mov	x5, x10
    6a0c:	mul	x13, x13, x10
    6a10:	bfi	x6, x1, #32, #32
    6a14:	cmp	x13, x6
    6a18:	b.ls	6a2c <__udivmodti4@@GCC_3.0+0x2c4>  // b.plast
    6a1c:	adds	x6, x3, x6
    6a20:	ccmp	x13, x6, #0x0, cc  // cc = lo, ul, last
    6a24:	b.hi	6ae0 <__udivmodti4@@GCC_3.0+0x378>  // b.pmore
    6a28:	sub	x5, x10, #0x1
    6a2c:	orr	x0, x5, x0, lsl #32
    6a30:	and	x12, x2, #0xffffffff
    6a34:	mov	w1, w5
    6a38:	lsr	x10, x2, #32
    6a3c:	lsr	x11, x0, #32
    6a40:	sub	x6, x6, x13
    6a44:	mov	x14, #0x100000000           	// #4294967296
    6a48:	mul	x5, x1, x12
    6a4c:	mul	x12, x11, x12
    6a50:	madd	x1, x1, x10, x12
    6a54:	and	x13, x5, #0xffffffff
    6a58:	mul	x10, x11, x10
    6a5c:	add	x5, x1, x5, lsr #32
    6a60:	add	x1, x10, x14
    6a64:	cmp	x12, x5
    6a68:	csel	x10, x1, x10, hi  // hi = pmore
    6a6c:	add	x11, x13, x5, lsl #32
    6a70:	add	x5, x10, x5, lsr #32
    6a74:	cmp	x6, x5
    6a78:	b.cc	6ab0 <__udivmodti4@@GCC_3.0+0x348>  // b.lo, b.ul, b.last
    6a7c:	ccmp	x9, x11, #0x2, eq  // eq = none
    6a80:	b.cc	6ab0 <__udivmodti4@@GCC_3.0+0x348>  // b.lo, b.ul, b.last
    6a84:	mov	x1, #0x0                   	// #0
    6a88:	cbz	x4, 6828 <__udivmodti4@@GCC_3.0+0xc0>
    6a8c:	subs	x2, x9, x11
    6a90:	cmp	x9, x11
    6a94:	sbc	x6, x6, x5
    6a98:	lsr	x2, x2, x7
    6a9c:	lsl	x8, x6, x8
    6aa0:	orr	x8, x8, x2
    6aa4:	lsr	x6, x6, x7
    6aa8:	stp	x8, x6, [x4]
    6aac:	ret
    6ab0:	cmp	x11, x2
    6ab4:	sub	x0, x0, #0x1
    6ab8:	cinc	x3, x3, cc  // cc = lo, ul, last
    6abc:	sub	x11, x11, x2
    6ac0:	sub	x5, x5, x3
    6ac4:	b	6a84 <__udivmodti4@@GCC_3.0+0x31c>
    6ac8:	sub	x0, x0, #0x2
    6acc:	add	x1, x1, x3
    6ad0:	b	69fc <__udivmodti4@@GCC_3.0+0x294>
    6ad4:	sub	x9, x9, #0x2
    6ad8:	add	x0, x0, x7
    6adc:	b	6960 <__udivmodti4@@GCC_3.0+0x1f8>
    6ae0:	sub	x5, x10, #0x2
    6ae4:	add	x6, x6, x3
    6ae8:	b	6a2c <__udivmodti4@@GCC_3.0+0x2c4>
    6aec:	sub	x1, x1, #0x2
    6af0:	add	x6, x6, x7
    6af4:	b	6990 <__udivmodti4@@GCC_3.0+0x228>
    6af8:	sub	x9, x2, #0x2
    6afc:	add	x5, x5, x7
    6b00:	b	68b0 <__udivmodti4@@GCC_3.0+0x148>
    6b04:	sub	x0, x0, #0x2
    6b08:	add	x6, x6, x7
    6b0c:	b	6880 <__udivmodti4@@GCC_3.0+0x118>
    6b10:	sub	x0, x0, #0x2
    6b14:	add	x1, x1, x7
    6b18:	b	67e0 <__udivmodti4@@GCC_3.0+0x78>
    6b1c:	sub	x8, x6, #0x2
    6b20:	add	x5, x5, x7
    6b24:	b	6810 <__udivmodti4@@GCC_3.0+0xa8>
    6b28:	mov	x0, #0x0                   	// #0
    6b2c:	ret
    6b30:	adrp	x3, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    6b34:	ldr	w2, [x3, #456]
    6b38:	cbnz	w2, 6b48 <__udivmodti4@@GCC_3.0+0x3e0>
    6b3c:	mrs	x4, ctr_el0
    6b40:	mov	w2, w4
    6b44:	str	w4, [x3, #456]
    6b48:	ubfx	x4, x2, #16, #4
    6b4c:	mov	w3, #0x4                   	// #4
    6b50:	and	w5, w2, #0xf
    6b54:	lsl	w4, w3, w4
    6b58:	sub	w2, w4, #0x1
    6b5c:	bic	x2, x0, x2
    6b60:	sxtw	x4, w4
    6b64:	cmp	x2, x1
    6b68:	lsl	w3, w3, w5
    6b6c:	b.cs	6b80 <__udivmodti4@@GCC_3.0+0x418>  // b.hs, b.nlast
    6b70:	dc	cvau, x2
    6b74:	add	x2, x2, x4
    6b78:	cmp	x1, x2
    6b7c:	b.hi	6b70 <__udivmodti4@@GCC_3.0+0x408>  // b.pmore
    6b80:	dsb	ish
    6b84:	sub	w2, w3, #0x1
    6b88:	sxtw	x3, w3
    6b8c:	bic	x0, x0, x2
    6b90:	cmp	x1, x0
    6b94:	b.ls	6ba8 <__udivmodti4@@GCC_3.0+0x440>  // b.plast
    6b98:	ic	ivau, x0
    6b9c:	add	x0, x0, x3
    6ba0:	cmp	x1, x0
    6ba4:	b.hi	6b98 <__udivmodti4@@GCC_3.0+0x430>  // b.pmore
    6ba8:	dsb	ish
    6bac:	isb
    6bb0:	ret
    6bb4:	nop
    6bb8:	tbz	w0, #0, 6bc8 <__udivmodti4@@GCC_3.0+0x460>
    6bbc:	movi	v1.2s, #0x0
    6bc0:	fdiv	s0, s1, s1
    6bc4:	mrs	x1, fpsr
    6bc8:	tbz	w0, #1, 6bdc <__udivmodti4@@GCC_3.0+0x474>
    6bcc:	fmov	s1, #1.000000000000000000e+00
    6bd0:	movi	v2.2s, #0x0
    6bd4:	fdiv	s0, s1, s2
    6bd8:	mrs	x1, fpsr
    6bdc:	tbz	w0, #2, 6bfc <__udivmodti4@@GCC_3.0+0x494>
    6be0:	mov	w2, #0xc5ae                	// #50606
    6be4:	mov	w1, #0x7f7fffff            	// #2139095039
    6be8:	movk	w2, #0x749d, lsl #16
    6bec:	fmov	s1, w1
    6bf0:	fmov	s2, w2
    6bf4:	fadd	s0, s1, s2
    6bf8:	mrs	x1, fpsr
    6bfc:	tbz	w0, #3, 6c0c <__udivmodti4@@GCC_3.0+0x4a4>
    6c00:	movi	v1.2s, #0x80, lsl #16
    6c04:	fmul	s0, s1, s1
    6c08:	mrs	x1, fpsr
    6c0c:	tbz	w0, #4, 6c24 <__udivmodti4@@GCC_3.0+0x4bc>
    6c10:	mov	w0, #0x7f7fffff            	// #2139095039
    6c14:	fmov	s2, #1.000000000000000000e+00
    6c18:	fmov	s1, w0
    6c1c:	fsub	s0, s1, s2
    6c20:	mrs	x0, fpsr
    6c24:	ret

0000000000006c28 <__addtf3@@GCC_3.0>:
    6c28:	stp	x29, x30, [sp, #-48]!
    6c2c:	mov	x29, sp
    6c30:	str	q0, [sp, #16]
    6c34:	str	q1, [sp, #32]
    6c38:	ldp	x4, x1, [sp, #16]
    6c3c:	ldp	x0, x3, [sp, #32]
    6c40:	mrs	x15, fpcr
    6c44:	mov	x11, x0
    6c48:	ubfiz	x0, x3, #3, #48
    6c4c:	lsr	x6, x1, #63
    6c50:	lsr	x5, x3, #63
    6c54:	ubfiz	x2, x1, #3, #48
    6c58:	orr	x9, x0, x11, lsr #61
    6c5c:	ubfx	x7, x1, #48, #15
    6c60:	ubfx	x0, x3, #48, #15
    6c64:	mov	x12, x6
    6c68:	and	w10, w6, #0xff
    6c6c:	mov	x16, x6
    6c70:	cmp	x6, x5
    6c74:	orr	x2, x2, x4, lsr #61
    6c78:	and	w6, w5, #0xff
    6c7c:	mov	x1, x7
    6c80:	lsl	x8, x4, #3
    6c84:	mov	x3, x0
    6c88:	lsl	x13, x11, #3
    6c8c:	b.eq	6e38 <__addtf3@@GCC_3.0+0x210>  // b.none
    6c90:	sub	w0, w7, w0
    6c94:	cmp	w0, #0x0
    6c98:	b.le	6de4 <__addtf3@@GCC_3.0+0x1bc>
    6c9c:	cbz	x3, 6e98 <__addtf3@@GCC_3.0+0x270>
    6ca0:	orr	x9, x9, #0x8000000000000
    6ca4:	mov	x3, #0x7fff                	// #32767
    6ca8:	cmp	x1, x3
    6cac:	b.eq	709c <__addtf3@@GCC_3.0+0x474>  // b.none
    6cb0:	cmp	w0, #0x74
    6cb4:	b.gt	7120 <__addtf3@@GCC_3.0+0x4f8>
    6cb8:	cmp	w0, #0x3f
    6cbc:	b.gt	7280 <__addtf3@@GCC_3.0+0x658>
    6cc0:	mov	w3, #0x40                  	// #64
    6cc4:	sub	w3, w3, w0
    6cc8:	lsr	x5, x13, x0
    6ccc:	lsl	x13, x13, x3
    6cd0:	cmp	x13, #0x0
    6cd4:	cset	x4, ne  // ne = any
    6cd8:	lsl	x3, x9, x3
    6cdc:	orr	x3, x3, x5
    6ce0:	lsr	x0, x9, x0
    6ce4:	orr	x3, x3, x4
    6ce8:	sub	x2, x2, x0
    6cec:	subs	x8, x8, x3
    6cf0:	sbc	x2, x2, xzr
    6cf4:	and	x3, x2, #0x7ffffffffffff
    6cf8:	tbz	x2, #51, 6ed8 <__addtf3@@GCC_3.0+0x2b0>
    6cfc:	cbz	x3, 7104 <__addtf3@@GCC_3.0+0x4dc>
    6d00:	clz	x0, x3
    6d04:	sub	w0, w0, #0xc
    6d08:	neg	w2, w0
    6d0c:	lsl	x4, x3, x0
    6d10:	lsl	x3, x8, x0
    6d14:	lsr	x8, x8, x2
    6d18:	orr	x2, x8, x4
    6d1c:	cmp	x1, w0, sxtw
    6d20:	sxtw	x4, w0
    6d24:	b.gt	70e4 <__addtf3@@GCC_3.0+0x4bc>
    6d28:	sub	w1, w0, w1
    6d2c:	add	w0, w1, #0x1
    6d30:	cmp	w0, #0x3f
    6d34:	b.gt	7248 <__addtf3@@GCC_3.0+0x620>
    6d38:	mov	w1, #0x40                  	// #64
    6d3c:	sub	w1, w1, w0
    6d40:	lsr	x4, x3, x0
    6d44:	lsl	x3, x3, x1
    6d48:	cmp	x3, #0x0
    6d4c:	lsl	x8, x2, x1
    6d50:	cset	x1, ne  // ne = any
    6d54:	orr	x8, x8, x4
    6d58:	lsr	x2, x2, x0
    6d5c:	orr	x8, x8, x1
    6d60:	orr	x5, x8, x2
    6d64:	cbz	x5, 6eec <__addtf3@@GCC_3.0+0x2c4>
    6d68:	and	x3, x8, #0x7
    6d6c:	mov	x1, #0x0                   	// #0
    6d70:	mov	w7, #0x1                   	// #1
    6d74:	cbz	x3, 7130 <__addtf3@@GCC_3.0+0x508>
    6d78:	and	x3, x15, #0xc00000
    6d7c:	cmp	x3, #0x400, lsl #12
    6d80:	b.eq	7074 <__addtf3@@GCC_3.0+0x44c>  // b.none
    6d84:	cmp	x3, #0x800, lsl #12
    6d88:	b.eq	7054 <__addtf3@@GCC_3.0+0x42c>  // b.none
    6d8c:	cbz	x3, 7080 <__addtf3@@GCC_3.0+0x458>
    6d90:	and	x3, x2, #0x8000000000000
    6d94:	mov	w0, #0x10                  	// #16
    6d98:	cbz	w7, 6da0 <__addtf3@@GCC_3.0+0x178>
    6d9c:	orr	w0, w0, #0x8
    6da0:	cbz	x3, 70b8 <__addtf3@@GCC_3.0+0x490>
    6da4:	add	x1, x1, #0x1
    6da8:	mov	x3, #0x7fff                	// #32767
    6dac:	cmp	x1, x3
    6db0:	b.eq	6f9c <__addtf3@@GCC_3.0+0x374>  // b.none
    6db4:	ubfx	x5, x2, #3, #48
    6db8:	extr	x8, x2, x8, #3
    6dbc:	and	w1, w1, #0x7fff
    6dc0:	mov	x7, #0x0                   	// #0
    6dc4:	orr	w1, w1, w10, lsl #15
    6dc8:	bfxil	x7, x5, #0, #48
    6dcc:	fmov	d0, x8
    6dd0:	bfi	x7, x1, #48, #16
    6dd4:	fmov	v0.d[1], x7
    6dd8:	cbnz	w0, 6ff8 <__addtf3@@GCC_3.0+0x3d0>
    6ddc:	ldp	x29, x30, [sp], #48
    6de0:	ret
    6de4:	mov	x14, x5
    6de8:	b.eq	6f04 <__addtf3@@GCC_3.0+0x2dc>  // b.none
    6dec:	cbnz	x7, 7188 <__addtf3@@GCC_3.0+0x560>
    6df0:	orr	x1, x2, x8
    6df4:	cbz	x1, 6eb4 <__addtf3@@GCC_3.0+0x28c>
    6df8:	cmn	w0, #0x1
    6dfc:	b.eq	75a4 <__addtf3@@GCC_3.0+0x97c>  // b.none
    6e00:	mov	x1, #0x7fff                	// #32767
    6e04:	mvn	w0, w0
    6e08:	cmp	x3, x1
    6e0c:	b.ne	719c <__addtf3@@GCC_3.0+0x574>  // b.any
    6e10:	orr	x0, x9, x13
    6e14:	cbnz	x0, 74fc <__addtf3@@GCC_3.0+0x8d4>
    6e18:	mov	x16, x14
    6e1c:	nop
    6e20:	mov	x6, #0x0                   	// #0
    6e24:	fmov	d0, x6
    6e28:	lsl	x16, x16, #63
    6e2c:	orr	x7, x16, #0x7fff000000000000
    6e30:	fmov	v0.d[1], x7
    6e34:	b	6ddc <__addtf3@@GCC_3.0+0x1b4>
    6e38:	sub	w7, w7, w0
    6e3c:	cmp	w7, #0x0
    6e40:	b.le	700c <__addtf3@@GCC_3.0+0x3e4>
    6e44:	cbz	x0, 6f4c <__addtf3@@GCC_3.0+0x324>
    6e48:	orr	x9, x9, #0x8000000000000
    6e4c:	mov	x0, #0x7fff                	// #32767
    6e50:	cmp	x1, x0
    6e54:	b.eq	709c <__addtf3@@GCC_3.0+0x474>  // b.none
    6e58:	cmp	w7, #0x74
    6e5c:	b.gt	7230 <__addtf3@@GCC_3.0+0x608>
    6e60:	cmp	w7, #0x3f
    6e64:	b.gt	7330 <__addtf3@@GCC_3.0+0x708>
    6e68:	mov	w0, #0x40                  	// #64
    6e6c:	sub	w0, w0, w7
    6e70:	lsr	x5, x13, x7
    6e74:	lsl	x13, x13, x0
    6e78:	cmp	x13, #0x0
    6e7c:	lsl	x3, x9, x0
    6e80:	cset	x4, ne  // ne = any
    6e84:	orr	x3, x3, x5
    6e88:	lsr	x0, x9, x7
    6e8c:	orr	x3, x3, x4
    6e90:	add	x2, x2, x0
    6e94:	b	723c <__addtf3@@GCC_3.0+0x614>
    6e98:	orr	x3, x9, x13
    6e9c:	cbz	x3, 720c <__addtf3@@GCC_3.0+0x5e4>
    6ea0:	subs	w0, w0, #0x1
    6ea4:	b.ne	6ca4 <__addtf3@@GCC_3.0+0x7c>  // b.any
    6ea8:	subs	x8, x8, x13
    6eac:	sbc	x2, x2, x9
    6eb0:	b	6cf4 <__addtf3@@GCC_3.0+0xcc>
    6eb4:	mov	x0, #0x7fff                	// #32767
    6eb8:	cmp	x3, x0
    6ebc:	b.eq	75f0 <__addtf3@@GCC_3.0+0x9c8>  // b.none
    6ec0:	mov	w10, w6
    6ec4:	mov	x2, x9
    6ec8:	mov	x8, x13
    6ecc:	mov	x1, x3
    6ed0:	mov	x12, x5
    6ed4:	nop
    6ed8:	orr	x5, x8, x2
    6edc:	and	x3, x8, #0x7
    6ee0:	mov	w7, #0x0                   	// #0
    6ee4:	cbnz	x1, 6d74 <__addtf3@@GCC_3.0+0x14c>
    6ee8:	cbnz	x5, 6d68 <__addtf3@@GCC_3.0+0x140>
    6eec:	mov	x8, #0x0                   	// #0
    6ef0:	mov	x1, #0x0                   	// #0
    6ef4:	mov	w0, #0x0                   	// #0
    6ef8:	and	x5, x5, #0xffffffffffff
    6efc:	and	w1, w1, #0x7fff
    6f00:	b	6dc0 <__addtf3@@GCC_3.0+0x198>
    6f04:	add	x5, x7, #0x1
    6f08:	tst	x5, #0x7ffe
    6f0c:	b.ne	71dc <__addtf3@@GCC_3.0+0x5b4>  // b.any
    6f10:	orr	x7, x2, x8
    6f14:	orr	x5, x9, x13
    6f18:	cbnz	x1, 739c <__addtf3@@GCC_3.0+0x774>
    6f1c:	cbz	x7, 7444 <__addtf3@@GCC_3.0+0x81c>
    6f20:	cbz	x5, 7458 <__addtf3@@GCC_3.0+0x830>
    6f24:	subs	x4, x8, x13
    6f28:	cmp	x8, x13
    6f2c:	sbc	x3, x2, x9
    6f30:	tbz	x3, #51, 7624 <__addtf3@@GCC_3.0+0x9fc>
    6f34:	subs	x8, x13, x8
    6f38:	mov	w10, w6
    6f3c:	sbc	x2, x9, x2
    6f40:	mov	x12, x14
    6f44:	orr	x5, x8, x2
    6f48:	b	6d64 <__addtf3@@GCC_3.0+0x13c>
    6f4c:	orr	x0, x9, x13
    6f50:	cbz	x0, 7424 <__addtf3@@GCC_3.0+0x7fc>
    6f54:	subs	w7, w7, #0x1
    6f58:	b.ne	6e4c <__addtf3@@GCC_3.0+0x224>  // b.any
    6f5c:	adds	x8, x8, x13
    6f60:	adc	x2, x9, x2
    6f64:	nop
    6f68:	tbz	x2, #51, 6ed8 <__addtf3@@GCC_3.0+0x2b0>
    6f6c:	add	x1, x1, #0x1
    6f70:	mov	x0, #0x7fff                	// #32767
    6f74:	cmp	x1, x0
    6f78:	b.eq	7464 <__addtf3@@GCC_3.0+0x83c>  // b.none
    6f7c:	and	x0, x8, #0x1
    6f80:	and	x3, x2, #0xfff7ffffffffffff
    6f84:	orr	x8, x0, x8, lsr #1
    6f88:	mov	w7, #0x0                   	// #0
    6f8c:	orr	x8, x8, x2, lsl #63
    6f90:	lsr	x2, x3, #1
    6f94:	and	x3, x8, #0x7
    6f98:	b	6d74 <__addtf3@@GCC_3.0+0x14c>
    6f9c:	and	x3, x15, #0xc00000
    6fa0:	cbz	x3, 6fd8 <__addtf3@@GCC_3.0+0x3b0>
    6fa4:	cmp	x3, #0x400, lsl #12
    6fa8:	b.eq	6fd0 <__addtf3@@GCC_3.0+0x3a8>  // b.none
    6fac:	cmp	x3, #0x800, lsl #12
    6fb0:	csel	w12, w12, wzr, eq  // eq = none
    6fb4:	cbnz	w12, 6fd8 <__addtf3@@GCC_3.0+0x3b0>
    6fb8:	mov	w1, #0x14                  	// #20
    6fbc:	mov	x8, #0xffffffffffffffff    	// #-1
    6fc0:	orr	w0, w0, w1
    6fc4:	mov	x5, #0x1fffffffffffffff    	// #2305843009213693951
    6fc8:	mov	x1, #0x7ffe                	// #32766
    6fcc:	b	6ef8 <__addtf3@@GCC_3.0+0x2d0>
    6fd0:	cbnz	x12, 6fb8 <__addtf3@@GCC_3.0+0x390>
    6fd4:	nop
    6fd8:	mov	w1, #0x14                  	// #20
    6fdc:	and	x16, x10, #0xff
    6fe0:	orr	w0, w0, w1
    6fe4:	mov	x6, #0x0                   	// #0
    6fe8:	fmov	d0, x6
    6fec:	lsl	x16, x16, #63
    6ff0:	orr	x7, x16, #0x7fff000000000000
    6ff4:	fmov	v0.d[1], x7
    6ff8:	str	q0, [sp, #16]
    6ffc:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    7000:	ldr	q0, [sp, #16]
    7004:	ldp	x29, x30, [sp], #48
    7008:	ret
    700c:	b.eq	714c <__addtf3@@GCC_3.0+0x524>  // b.none
    7010:	cbnz	x1, 72d0 <__addtf3@@GCC_3.0+0x6a8>
    7014:	orr	x0, x2, x8
    7018:	cbz	x0, 753c <__addtf3@@GCC_3.0+0x914>
    701c:	cmn	w7, #0x1
    7020:	b.eq	769c <__addtf3@@GCC_3.0+0xa74>  // b.none
    7024:	mov	x0, #0x7fff                	// #32767
    7028:	mvn	w7, w7
    702c:	cmp	x3, x0
    7030:	b.ne	72e4 <__addtf3@@GCC_3.0+0x6bc>  // b.any
    7034:	orr	x0, x9, x13
    7038:	cbz	x0, 6e20 <__addtf3@@GCC_3.0+0x1f8>
    703c:	lsr	x7, x9, #50
    7040:	mov	x8, x13
    7044:	eor	x7, x7, #0x1
    7048:	mov	x2, x9
    704c:	and	w7, w7, #0x1
    7050:	b	70b0 <__addtf3@@GCC_3.0+0x488>
    7054:	mov	w0, #0x10                  	// #16
    7058:	cbz	x12, 7064 <__addtf3@@GCC_3.0+0x43c>
    705c:	adds	x8, x8, #0x8
    7060:	cinc	x2, x2, cs  // cs = hs, nlast
    7064:	and	x3, x2, #0x8000000000000
    7068:	cbz	w7, 6da0 <__addtf3@@GCC_3.0+0x178>
    706c:	orr	w0, w0, #0x8
    7070:	b	6da0 <__addtf3@@GCC_3.0+0x178>
    7074:	mov	w0, #0x10                  	// #16
    7078:	cbnz	x12, 7064 <__addtf3@@GCC_3.0+0x43c>
    707c:	b	705c <__addtf3@@GCC_3.0+0x434>
    7080:	and	x3, x8, #0xf
    7084:	mov	w0, #0x10                  	// #16
    7088:	cmp	x3, #0x4
    708c:	b.eq	7064 <__addtf3@@GCC_3.0+0x43c>  // b.none
    7090:	adds	x8, x8, #0x4
    7094:	cinc	x2, x2, cs  // cs = hs, nlast
    7098:	b	7064 <__addtf3@@GCC_3.0+0x43c>
    709c:	orr	x0, x2, x8
    70a0:	cbz	x0, 6e20 <__addtf3@@GCC_3.0+0x1f8>
    70a4:	lsr	x7, x2, #50
    70a8:	eor	x7, x7, #0x1
    70ac:	and	w7, w7, #0x1
    70b0:	mov	w0, w7
    70b4:	mov	x1, #0x7fff                	// #32767
    70b8:	lsr	x5, x2, #3
    70bc:	extr	x8, x2, x8, #3
    70c0:	mov	x2, #0x7fff                	// #32767
    70c4:	cmp	x1, x2
    70c8:	b.ne	6ef8 <__addtf3@@GCC_3.0+0x2d0>  // b.any
    70cc:	orr	x1, x5, x8
    70d0:	cbz	x1, 773c <__addtf3@@GCC_3.0+0xb14>
    70d4:	orr	x5, x5, #0x800000000000
    70d8:	mov	w1, #0x7fff                	// #32767
    70dc:	and	x5, x5, #0xffffffffffff
    70e0:	b	6dc0 <__addtf3@@GCC_3.0+0x198>
    70e4:	mov	x8, x3
    70e8:	and	x2, x2, #0xfff7ffffffffffff
    70ec:	sub	x1, x1, x4
    70f0:	orr	x5, x8, x2
    70f4:	and	x3, x8, #0x7
    70f8:	mov	w7, #0x0                   	// #0
    70fc:	cbz	x1, 6ee8 <__addtf3@@GCC_3.0+0x2c0>
    7100:	b	6d74 <__addtf3@@GCC_3.0+0x14c>
    7104:	clz	x2, x8
    7108:	add	w0, w2, #0x34
    710c:	cmp	w0, #0x3f
    7110:	b.le	6d08 <__addtf3@@GCC_3.0+0xe0>
    7114:	sub	w2, w2, #0xc
    7118:	lsl	x2, x8, x2
    711c:	b	6d1c <__addtf3@@GCC_3.0+0xf4>
    7120:	orr	x0, x9, x13
    7124:	cmp	x0, #0x0
    7128:	cset	x3, ne  // ne = any
    712c:	b	6cec <__addtf3@@GCC_3.0+0xc4>
    7130:	and	x3, x2, #0x8000000000000
    7134:	mov	w0, #0x0                   	// #0
    7138:	cbz	w7, 6da0 <__addtf3@@GCC_3.0+0x178>
    713c:	mov	w0, #0x0                   	// #0
    7140:	tbz	w15, #11, 6da0 <__addtf3@@GCC_3.0+0x178>
    7144:	orr	w0, w0, #0x8
    7148:	b	6da0 <__addtf3@@GCC_3.0+0x178>
    714c:	add	x0, x1, #0x1
    7150:	tst	x0, #0x7ffe
    7154:	b.ne	735c <__addtf3@@GCC_3.0+0x734>  // b.any
    7158:	orr	x14, x2, x8
    715c:	cbnz	x1, 7518 <__addtf3@@GCC_3.0+0x8f0>
    7160:	orr	x5, x9, x13
    7164:	cbz	x14, 756c <__addtf3@@GCC_3.0+0x944>
    7168:	cbz	x5, 7458 <__addtf3@@GCC_3.0+0x830>
    716c:	adds	x8, x8, x13
    7170:	adc	x2, x9, x2
    7174:	tbz	x2, #51, 6f44 <__addtf3@@GCC_3.0+0x31c>
    7178:	and	x2, x2, #0xfff7ffffffffffff
    717c:	and	x3, x8, #0x7
    7180:	mov	x1, #0x1                   	// #1
    7184:	b	6d74 <__addtf3@@GCC_3.0+0x14c>
    7188:	mov	x1, #0x7fff                	// #32767
    718c:	neg	w0, w0
    7190:	orr	x2, x2, #0x8000000000000
    7194:	cmp	x3, x1
    7198:	b.eq	6e10 <__addtf3@@GCC_3.0+0x1e8>  // b.none
    719c:	cmp	w0, #0x74
    71a0:	b.gt	72ac <__addtf3@@GCC_3.0+0x684>
    71a4:	cmp	w0, #0x3f
    71a8:	b.gt	74c8 <__addtf3@@GCC_3.0+0x8a0>
    71ac:	mov	w1, #0x40                  	// #64
    71b0:	sub	w1, w1, w0
    71b4:	lsr	x4, x8, x0
    71b8:	lsl	x8, x8, x1
    71bc:	cmp	x8, #0x0
    71c0:	lsl	x8, x2, x1
    71c4:	cset	x1, ne  // ne = any
    71c8:	orr	x8, x8, x4
    71cc:	lsr	x0, x2, x0
    71d0:	orr	x8, x8, x1
    71d4:	sub	x9, x9, x0
    71d8:	b	72b8 <__addtf3@@GCC_3.0+0x690>
    71dc:	subs	x4, x8, x13
    71e0:	cmp	x8, x13
    71e4:	sbc	x3, x2, x9
    71e8:	tbnz	x3, #51, 7384 <__addtf3@@GCC_3.0+0x75c>
    71ec:	orr	x5, x4, x3
    71f0:	cbnz	x5, 74b0 <__addtf3@@GCC_3.0+0x888>
    71f4:	and	x15, x15, #0xc00000
    71f8:	mov	x8, #0x0                   	// #0
    71fc:	cmp	x15, #0x800, lsl #12
    7200:	mov	x1, #0x0                   	// #0
    7204:	cset	w10, eq  // eq = none
    7208:	b	6ef8 <__addtf3@@GCC_3.0+0x2d0>
    720c:	mov	x0, #0x7fff                	// #32767
    7210:	cmp	x7, x0
    7214:	b.ne	6ed8 <__addtf3@@GCC_3.0+0x2b0>  // b.any
    7218:	orr	x0, x2, x8
    721c:	cbnz	x0, 70a4 <__addtf3@@GCC_3.0+0x47c>
    7220:	mov	x8, #0x0                   	// #0
    7224:	mov	x5, #0x0                   	// #0
    7228:	mov	w0, #0x0                   	// #0
    722c:	b	70cc <__addtf3@@GCC_3.0+0x4a4>
    7230:	orr	x0, x9, x13
    7234:	cmp	x0, #0x0
    7238:	cset	x3, ne  // ne = any
    723c:	adds	x8, x3, x8
    7240:	cinc	x2, x2, cs  // cs = hs, nlast
    7244:	b	6f68 <__addtf3@@GCC_3.0+0x340>
    7248:	mov	w4, #0x80                  	// #128
    724c:	sub	w4, w4, w0
    7250:	cmp	w0, #0x40
    7254:	sub	w8, w1, #0x3f
    7258:	lsl	x0, x2, x4
    725c:	orr	x0, x3, x0
    7260:	csel	x3, x0, x3, ne  // ne = any
    7264:	lsr	x8, x2, x8
    7268:	cmp	x3, #0x0
    726c:	mov	x2, #0x0                   	// #0
    7270:	cset	x0, ne  // ne = any
    7274:	orr	x8, x0, x8
    7278:	mov	x5, x8
    727c:	b	6d64 <__addtf3@@GCC_3.0+0x13c>
    7280:	mov	w4, #0x80                  	// #128
    7284:	sub	w4, w4, w0
    7288:	subs	w0, w0, #0x40
    728c:	lsl	x4, x9, x4
    7290:	orr	x4, x13, x4
    7294:	csel	x13, x4, x13, ne  // ne = any
    7298:	lsr	x0, x9, x0
    729c:	cmp	x13, #0x0
    72a0:	cset	x3, ne  // ne = any
    72a4:	orr	x3, x3, x0
    72a8:	b	6cec <__addtf3@@GCC_3.0+0xc4>
    72ac:	orr	x2, x2, x8
    72b0:	cmp	x2, #0x0
    72b4:	cset	x8, ne  // ne = any
    72b8:	subs	x8, x13, x8
    72bc:	mov	w10, w6
    72c0:	sbc	x2, x9, xzr
    72c4:	mov	x1, x3
    72c8:	mov	x12, x14
    72cc:	b	6cf4 <__addtf3@@GCC_3.0+0xcc>
    72d0:	mov	x0, #0x7fff                	// #32767
    72d4:	neg	w7, w7
    72d8:	orr	x2, x2, #0x8000000000000
    72dc:	cmp	x3, x0
    72e0:	b.eq	7034 <__addtf3@@GCC_3.0+0x40c>  // b.none
    72e4:	cmp	w7, #0x74
    72e8:	b.gt	74b8 <__addtf3@@GCC_3.0+0x890>
    72ec:	cmp	w7, #0x3f
    72f0:	b.gt	7578 <__addtf3@@GCC_3.0+0x950>
    72f4:	mov	w1, #0x40                  	// #64
    72f8:	sub	w1, w1, w7
    72fc:	lsr	x4, x8, x7
    7300:	lsl	x8, x8, x1
    7304:	cmp	x8, #0x0
    7308:	cset	x0, ne  // ne = any
    730c:	lsl	x8, x2, x1
    7310:	orr	x8, x8, x4
    7314:	lsr	x7, x2, x7
    7318:	orr	x8, x8, x0
    731c:	add	x9, x9, x7
    7320:	adds	x8, x8, x13
    7324:	mov	x1, x3
    7328:	cinc	x2, x9, cs  // cs = hs, nlast
    732c:	b	6f68 <__addtf3@@GCC_3.0+0x340>
    7330:	mov	w3, #0x80                  	// #128
    7334:	sub	w3, w3, w7
    7338:	subs	w0, w7, #0x40
    733c:	lsl	x3, x9, x3
    7340:	orr	x3, x13, x3
    7344:	csel	x13, x3, x13, ne  // ne = any
    7348:	lsr	x0, x9, x0
    734c:	cmp	x13, #0x0
    7350:	cset	x3, ne  // ne = any
    7354:	orr	x3, x3, x0
    7358:	b	723c <__addtf3@@GCC_3.0+0x614>
    735c:	mov	x1, #0x7fff                	// #32767
    7360:	cmp	x0, x1
    7364:	b.eq	75c0 <__addtf3@@GCC_3.0+0x998>  // b.none
    7368:	adds	x8, x8, x13
    736c:	mov	x1, x0
    7370:	adc	x2, x9, x2
    7374:	ubfx	x3, x8, #1, #3
    7378:	extr	x8, x2, x8, #1
    737c:	lsr	x2, x2, #1
    7380:	b	6d74 <__addtf3@@GCC_3.0+0x14c>
    7384:	cmp	x13, x8
    7388:	mov	w10, w6
    738c:	sbc	x3, x9, x2
    7390:	sub	x8, x13, x8
    7394:	mov	x12, x14
    7398:	b	6cfc <__addtf3@@GCC_3.0+0xd4>
    739c:	mov	x12, #0x7fff                	// #32767
    73a0:	cmp	x1, x12
    73a4:	b.eq	73d0 <__addtf3@@GCC_3.0+0x7a8>  // b.none
    73a8:	cmp	x3, x12
    73ac:	b.eq	7600 <__addtf3@@GCC_3.0+0x9d8>  // b.none
    73b0:	cbnz	x7, 73e8 <__addtf3@@GCC_3.0+0x7c0>
    73b4:	mov	w7, w0
    73b8:	cbnz	x5, 76e0 <__addtf3@@GCC_3.0+0xab8>
    73bc:	mov	x8, #0xffffffffffffffff    	// #-1
    73c0:	mov	x5, #0xffffffffffff        	// #281474976710655
    73c4:	mov	w0, #0x1                   	// #1
    73c8:	mov	w10, #0x0                   	// #0
    73cc:	b	70d4 <__addtf3@@GCC_3.0+0x4ac>
    73d0:	cbz	x7, 76fc <__addtf3@@GCC_3.0+0xad4>
    73d4:	lsr	x0, x2, #50
    73d8:	cmp	x3, x1
    73dc:	eor	x0, x0, #0x1
    73e0:	and	w0, w0, #0x1
    73e4:	b.eq	7600 <__addtf3@@GCC_3.0+0x9d8>  // b.none
    73e8:	cbz	x5, 761c <__addtf3@@GCC_3.0+0x9f4>
    73ec:	bfi	x4, x2, #61, #3
    73f0:	lsr	x5, x2, #3
    73f4:	mov	x8, x4
    73f8:	tbz	x2, #50, 7414 <__addtf3@@GCC_3.0+0x7ec>
    73fc:	lsr	x1, x9, #3
    7400:	tbnz	x9, #50, 7414 <__addtf3@@GCC_3.0+0x7ec>
    7404:	mov	x8, x11
    7408:	mov	w10, w6
    740c:	bfi	x8, x9, #61, #3
    7410:	mov	x5, x1
    7414:	extr	x5, x5, x8, #61
    7418:	bfi	x8, x5, #61, #3
    741c:	lsr	x5, x5, #3
    7420:	b	70cc <__addtf3@@GCC_3.0+0x4a4>
    7424:	mov	x0, #0x7fff                	// #32767
    7428:	cmp	x1, x0
    742c:	b.ne	6ed8 <__addtf3@@GCC_3.0+0x2b0>  // b.any
    7430:	orr	x0, x2, x8
    7434:	cbz	x0, 7220 <__addtf3@@GCC_3.0+0x5f8>
    7438:	lsr	x7, x2, #50
    743c:	eor	w7, w7, #0x1
    7440:	b	70b0 <__addtf3@@GCC_3.0+0x488>
    7444:	cbz	x5, 7558 <__addtf3@@GCC_3.0+0x930>
    7448:	mov	w10, w6
    744c:	mov	x2, x9
    7450:	mov	x8, x13
    7454:	mov	x12, x14
    7458:	mov	x1, #0x0                   	// #0
    745c:	mov	x3, #0x0                   	// #0
    7460:	b	713c <__addtf3@@GCC_3.0+0x514>
    7464:	ands	x3, x15, #0xc00000
    7468:	b.eq	74f4 <__addtf3@@GCC_3.0+0x8cc>  // b.none
    746c:	cmp	x3, #0x400, lsl #12
    7470:	eor	w0, w10, #0x1
    7474:	cset	w1, eq  // eq = none
    7478:	tst	w1, w0
    747c:	b.ne	7718 <__addtf3@@GCC_3.0+0xaf0>  // b.any
    7480:	cmp	x3, #0x800, lsl #12
    7484:	b.eq	76c4 <__addtf3@@GCC_3.0+0xa9c>  // b.none
    7488:	cmp	x3, #0x400, lsl #12
    748c:	mov	w0, #0x14                  	// #20
    7490:	b.ne	6fa0 <__addtf3@@GCC_3.0+0x378>  // b.any
    7494:	mov	x2, #0xffffffffffffffff    	// #-1
    7498:	mov	x1, #0x7ffe                	// #32766
    749c:	mov	x8, x2
    74a0:	mov	w7, #0x0                   	// #0
    74a4:	mov	w0, #0x14                  	// #20
    74a8:	cbnz	x12, 7064 <__addtf3@@GCC_3.0+0x43c>
    74ac:	b	705c <__addtf3@@GCC_3.0+0x434>
    74b0:	mov	x8, x4
    74b4:	b	6cfc <__addtf3@@GCC_3.0+0xd4>
    74b8:	orr	x2, x2, x8
    74bc:	cmp	x2, #0x0
    74c0:	cset	x8, ne  // ne = any
    74c4:	b	7320 <__addtf3@@GCC_3.0+0x6f8>
    74c8:	mov	w1, #0x80                  	// #128
    74cc:	sub	w1, w1, w0
    74d0:	subs	w0, w0, #0x40
    74d4:	lsl	x1, x2, x1
    74d8:	orr	x1, x8, x1
    74dc:	csel	x8, x1, x8, ne  // ne = any
    74e0:	lsr	x2, x2, x0
    74e4:	cmp	x8, #0x0
    74e8:	cset	x8, ne  // ne = any
    74ec:	orr	x8, x8, x2
    74f0:	b	72b8 <__addtf3@@GCC_3.0+0x690>
    74f4:	mov	w0, #0x14                  	// #20
    74f8:	b	6fe4 <__addtf3@@GCC_3.0+0x3bc>
    74fc:	lsr	x7, x9, #50
    7500:	mov	w10, w6
    7504:	eor	x7, x7, #0x1
    7508:	mov	x8, x13
    750c:	and	w7, w7, #0x1
    7510:	mov	x2, x9
    7514:	b	70b0 <__addtf3@@GCC_3.0+0x488>
    7518:	mov	x0, #0x7fff                	// #32767
    751c:	cmp	x1, x0
    7520:	b.eq	7640 <__addtf3@@GCC_3.0+0xa18>  // b.none
    7524:	cmp	x3, x0
    7528:	b.eq	76b4 <__addtf3@@GCC_3.0+0xa8c>  // b.none
    752c:	cbnz	x14, 7658 <__addtf3@@GCC_3.0+0xa30>
    7530:	mov	x2, x9
    7534:	mov	x8, x13
    7538:	b	70b0 <__addtf3@@GCC_3.0+0x488>
    753c:	mov	x0, #0x7fff                	// #32767
    7540:	cmp	x3, x0
    7544:	b.eq	76f0 <__addtf3@@GCC_3.0+0xac8>  // b.none
    7548:	mov	x2, x9
    754c:	mov	x8, x13
    7550:	mov	x1, x3
    7554:	b	6ed8 <__addtf3@@GCC_3.0+0x2b0>
    7558:	and	x15, x15, #0xc00000
    755c:	mov	x8, #0x0                   	// #0
    7560:	cmp	x15, #0x800, lsl #12
    7564:	cset	w10, eq  // eq = none
    7568:	b	6ef8 <__addtf3@@GCC_3.0+0x2d0>
    756c:	mov	x2, x9
    7570:	mov	x8, x13
    7574:	b	6d64 <__addtf3@@GCC_3.0+0x13c>
    7578:	mov	w0, #0x80                  	// #128
    757c:	sub	w0, w0, w7
    7580:	subs	w7, w7, #0x40
    7584:	lsl	x0, x2, x0
    7588:	orr	x0, x8, x0
    758c:	csel	x8, x0, x8, ne  // ne = any
    7590:	lsr	x2, x2, x7
    7594:	cmp	x8, #0x0
    7598:	cset	x8, ne  // ne = any
    759c:	orr	x8, x8, x2
    75a0:	b	7320 <__addtf3@@GCC_3.0+0x6f8>
    75a4:	cmp	x13, x8
    75a8:	mov	w10, w6
    75ac:	sbc	x2, x9, x2
    75b0:	sub	x8, x13, x8
    75b4:	mov	x1, x3
    75b8:	mov	x12, x5
    75bc:	b	6cf4 <__addtf3@@GCC_3.0+0xcc>
    75c0:	ands	x3, x15, #0xc00000
    75c4:	b.eq	74f4 <__addtf3@@GCC_3.0+0x8cc>  // b.none
    75c8:	cmp	x3, #0x400, lsl #12
    75cc:	eor	w0, w10, #0x1
    75d0:	csel	w0, w0, wzr, eq  // eq = none
    75d4:	cbnz	w0, 7718 <__addtf3@@GCC_3.0+0xaf0>
    75d8:	cmp	x3, #0x800, lsl #12
    75dc:	b.ne	7488 <__addtf3@@GCC_3.0+0x860>  // b.any
    75e0:	cbz	x12, 76c8 <__addtf3@@GCC_3.0+0xaa0>
    75e4:	mov	w0, #0x14                  	// #20
    75e8:	mov	x16, #0x1                   	// #1
    75ec:	b	6fe4 <__addtf3@@GCC_3.0+0x3bc>
    75f0:	orr	x0, x9, x13
    75f4:	cbnz	x0, 74fc <__addtf3@@GCC_3.0+0x8d4>
    75f8:	mov	w10, w6
    75fc:	b	7220 <__addtf3@@GCC_3.0+0x5f8>
    7600:	cbz	x5, 770c <__addtf3@@GCC_3.0+0xae4>
    7604:	tst	x9, #0x4000000000000
    7608:	csinc	w0, w0, wzr, ne  // ne = any
    760c:	cbnz	x7, 73ec <__addtf3@@GCC_3.0+0x7c4>
    7610:	mov	w10, w6
    7614:	mov	x2, x9
    7618:	mov	x8, x13
    761c:	mov	w7, w0
    7620:	b	70b0 <__addtf3@@GCC_3.0+0x488>
    7624:	orr	x5, x4, x3
    7628:	cbz	x5, 7558 <__addtf3@@GCC_3.0+0x930>
    762c:	mov	x2, x3
    7630:	mov	x8, x4
    7634:	and	x3, x4, #0x7
    7638:	mov	w7, #0x1                   	// #1
    763c:	b	6d74 <__addtf3@@GCC_3.0+0x14c>
    7640:	cbz	x14, 76ac <__addtf3@@GCC_3.0+0xa84>
    7644:	lsr	x7, x2, #50
    7648:	cmp	x3, x1
    764c:	eor	x7, x7, #0x1
    7650:	and	w7, w7, #0x1
    7654:	b.eq	7724 <__addtf3@@GCC_3.0+0xafc>  // b.none
    7658:	orr	x13, x9, x13
    765c:	cbz	x13, 70b0 <__addtf3@@GCC_3.0+0x488>
    7660:	bfi	x4, x2, #61, #3
    7664:	lsr	x5, x2, #3
    7668:	mov	x8, x4
    766c:	tbz	x2, #50, 7688 <__addtf3@@GCC_3.0+0xa60>
    7670:	lsr	x0, x9, #3
    7674:	tbnz	x9, #50, 7688 <__addtf3@@GCC_3.0+0xa60>
    7678:	and	x8, x11, #0x1fffffffffffffff
    767c:	mov	w10, w6
    7680:	orr	x8, x8, x9, lsl #61
    7684:	mov	x5, x0
    7688:	mov	w0, w7
    768c:	extr	x5, x5, x8, #61
    7690:	bfi	x8, x5, #61, #3
    7694:	lsr	x5, x5, #3
    7698:	b	70cc <__addtf3@@GCC_3.0+0x4a4>
    769c:	adds	x8, x8, x13
    76a0:	mov	x1, x3
    76a4:	adc	x2, x9, x2
    76a8:	b	6f68 <__addtf3@@GCC_3.0+0x340>
    76ac:	cmp	x3, x1
    76b0:	b.ne	7530 <__addtf3@@GCC_3.0+0x908>  // b.any
    76b4:	orr	x0, x9, x13
    76b8:	cbnz	x0, 772c <__addtf3@@GCC_3.0+0xb04>
    76bc:	cbz	x14, 7220 <__addtf3@@GCC_3.0+0x5f8>
    76c0:	b	70b0 <__addtf3@@GCC_3.0+0x488>
    76c4:	cbnz	x16, 75e4 <__addtf3@@GCC_3.0+0x9bc>
    76c8:	mov	x2, #0xffffffffffffffff    	// #-1
    76cc:	mov	w10, #0x0                   	// #0
    76d0:	mov	x8, x2
    76d4:	mov	x1, #0x7ffe                	// #32766
    76d8:	mov	w0, #0x14                  	// #20
    76dc:	b	6da4 <__addtf3@@GCC_3.0+0x17c>
    76e0:	mov	w10, w6
    76e4:	mov	x2, x9
    76e8:	mov	x8, x13
    76ec:	b	70b0 <__addtf3@@GCC_3.0+0x488>
    76f0:	orr	x0, x9, x13
    76f4:	cbz	x0, 7220 <__addtf3@@GCC_3.0+0x5f8>
    76f8:	b	703c <__addtf3@@GCC_3.0+0x414>
    76fc:	cmp	x3, x1
    7700:	b.eq	7600 <__addtf3@@GCC_3.0+0x9d8>  // b.none
    7704:	mov	w7, #0x0                   	// #0
    7708:	b	73b8 <__addtf3@@GCC_3.0+0x790>
    770c:	cbnz	x7, 761c <__addtf3@@GCC_3.0+0x9f4>
    7710:	mov	w7, w0
    7714:	b	73b8 <__addtf3@@GCC_3.0+0x790>
    7718:	mov	w0, #0x14                  	// #20
    771c:	mov	x16, #0x0                   	// #0
    7720:	b	6fe4 <__addtf3@@GCC_3.0+0x3bc>
    7724:	orr	x0, x9, x13
    7728:	cbz	x0, 70b0 <__addtf3@@GCC_3.0+0x488>
    772c:	tst	x9, #0x4000000000000
    7730:	csinc	w7, w7, wzr, ne  // ne = any
    7734:	cbnz	x14, 7660 <__addtf3@@GCC_3.0+0xa38>
    7738:	b	7530 <__addtf3@@GCC_3.0+0x908>
    773c:	mov	x8, #0x0                   	// #0
    7740:	mov	w1, #0x7fff                	// #32767
    7744:	mov	x5, #0x0                   	// #0
    7748:	b	6dc0 <__addtf3@@GCC_3.0+0x198>
    774c:	nop

0000000000007750 <__divtf3@@GCC_3.0>:
    7750:	stp	x29, x30, [sp, #-48]!
    7754:	mov	x29, sp
    7758:	str	q0, [sp, #16]
    775c:	str	q1, [sp, #32]
    7760:	ldp	x2, x0, [sp, #16]
    7764:	ldp	x5, x3, [sp, #32]
    7768:	mrs	x11, fpcr
    776c:	lsr	x1, x0, #63
    7770:	ubfx	x6, x0, #0, #48
    7774:	and	w13, w1, #0xff
    7778:	mov	x9, x1
    777c:	ubfx	x7, x0, #48, #15
    7780:	cbz	w7, 7b98 <__divtf3@@GCC_3.0+0x448>
    7784:	mov	w1, #0x7fff                	// #32767
    7788:	cmp	w7, w1
    778c:	b.eq	7bd8 <__divtf3@@GCC_3.0+0x488>  // b.none
    7790:	and	x7, x7, #0xffff
    7794:	extr	x6, x6, x2, #61
    7798:	mov	x15, #0xffffffffffffc001    	// #-16383
    779c:	orr	x4, x6, #0x8000000000000
    77a0:	add	x7, x7, x15
    77a4:	lsl	x2, x2, #3
    77a8:	mov	x14, #0x2                   	// #2
    77ac:	mov	x12, #0x1                   	// #1
    77b0:	mov	x1, #0x3                   	// #3
    77b4:	mov	x16, #0x0                   	// #0
    77b8:	mov	x17, #0x0                   	// #0
    77bc:	mov	w0, #0x0                   	// #0
    77c0:	lsr	x8, x3, #63
    77c4:	ubfx	x6, x3, #0, #48
    77c8:	and	w15, w8, #0xff
    77cc:	ubfx	x10, x3, #48, #15
    77d0:	cbz	w10, 7b50 <__divtf3@@GCC_3.0+0x400>
    77d4:	mov	w12, #0x7fff                	// #32767
    77d8:	cmp	w10, w12
    77dc:	b.eq	7b1c <__divtf3@@GCC_3.0+0x3cc>  // b.none
    77e0:	and	x10, x10, #0xffff
    77e4:	extr	x6, x6, x5, #61
    77e8:	mov	x14, #0xffffffffffffc001    	// #-16383
    77ec:	add	x10, x10, x14
    77f0:	orr	x6, x6, #0x8000000000000
    77f4:	sub	x7, x7, x10
    77f8:	lsl	x5, x5, #3
    77fc:	mov	x1, x16
    7800:	mov	x3, #0x0                   	// #0
    7804:	eor	w10, w13, w15
    7808:	cmp	x1, #0x9
    780c:	and	x12, x10, #0xff
    7810:	mov	x14, x12
    7814:	b.gt	78dc <__divtf3@@GCC_3.0+0x18c>
    7818:	cmp	x1, #0x7
    781c:	b.gt	7c94 <__divtf3@@GCC_3.0+0x544>
    7820:	cmp	x1, #0x3
    7824:	b.eq	7840 <__divtf3@@GCC_3.0+0xf0>  // b.none
    7828:	b.le	7904 <__divtf3@@GCC_3.0+0x1b4>
    782c:	cmp	x1, #0x5
    7830:	b.eq	78ec <__divtf3@@GCC_3.0+0x19c>  // b.none
    7834:	b.le	7934 <__divtf3@@GCC_3.0+0x1e4>
    7838:	cmp	x1, #0x6
    783c:	b.eq	78a8 <__divtf3@@GCC_3.0+0x158>  // b.none
    7840:	cmp	x3, #0x1
    7844:	b.eq	78a4 <__divtf3@@GCC_3.0+0x154>  // b.none
    7848:	cbz	x3, 785c <__divtf3@@GCC_3.0+0x10c>
    784c:	cmp	x3, #0x2
    7850:	b.eq	7c90 <__divtf3@@GCC_3.0+0x540>  // b.none
    7854:	cmp	x3, #0x3
    7858:	b.eq	7e88 <__divtf3@@GCC_3.0+0x738>  // b.none
    785c:	mov	x1, #0x3fff                	// #16383
    7860:	mov	w10, w15
    7864:	mov	x14, x8
    7868:	add	x3, x7, x1
    786c:	cmp	x3, #0x0
    7870:	b.le	7d60 <__divtf3@@GCC_3.0+0x610>
    7874:	tst	x5, #0x7
    7878:	b.ne	7cc0 <__divtf3@@GCC_3.0+0x570>  // b.any
    787c:	tbz	x6, #52, 7888 <__divtf3@@GCC_3.0+0x138>
    7880:	and	x6, x6, #0xffefffffffffffff
    7884:	add	x3, x7, #0x4, lsl #12
    7888:	mov	x1, #0x7ffe                	// #32766
    788c:	cmp	x3, x1
    7890:	b.gt	7e44 <__divtf3@@GCC_3.0+0x6f4>
    7894:	and	w1, w3, #0x7fff
    7898:	extr	x2, x6, x5, #3
    789c:	ubfx	x6, x6, #3, #48
    78a0:	b	78b4 <__divtf3@@GCC_3.0+0x164>
    78a4:	mov	w10, w15
    78a8:	mov	w1, #0x0                   	// #0
    78ac:	mov	x6, #0x0                   	// #0
    78b0:	mov	x2, #0x0                   	// #0
    78b4:	mov	x5, #0x0                   	// #0
    78b8:	orr	w1, w1, w10, lsl #15
    78bc:	bfxil	x5, x6, #0, #48
    78c0:	fmov	d0, x2
    78c4:	bfi	x5, x1, #48, #16
    78c8:	fmov	v0.d[1], x5
    78cc:	cbnz	w0, 7924 <__divtf3@@GCC_3.0+0x1d4>
    78d0:	ldp	x29, x30, [sp], #48
    78d4:	ret
    78d8:	mov	x3, #0x3                   	// #3
    78dc:	cmp	x1, #0xb
    78e0:	b.gt	7c04 <__divtf3@@GCC_3.0+0x4b4>
    78e4:	cmp	x1, #0xa
    78e8:	b.ne	7840 <__divtf3@@GCC_3.0+0xf0>  // b.any
    78ec:	mov	w10, #0x0                   	// #0
    78f0:	mov	x6, #0xffffffffffff        	// #281474976710655
    78f4:	mov	x2, #0xffffffffffffffff    	// #-1
    78f8:	mov	w0, #0x1                   	// #1
    78fc:	mov	w1, #0x7fff                	// #32767
    7900:	b	78b4 <__divtf3@@GCC_3.0+0x164>
    7904:	cmp	x1, #0x1
    7908:	b.ne	7b10 <__divtf3@@GCC_3.0+0x3c0>  // b.any
    790c:	mov	x4, #0x0                   	// #0
    7910:	fmov	d0, x4
    7914:	lsl	x12, x12, #63
    7918:	orr	w0, w0, #0x2
    791c:	orr	x5, x12, #0x7fff000000000000
    7920:	fmov	v0.d[1], x5
    7924:	str	q0, [sp, #16]
    7928:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    792c:	ldr	q0, [sp, #16]
    7930:	b	78d0 <__divtf3@@GCC_3.0+0x180>
    7934:	cmp	x1, #0x4
    7938:	b.eq	78a8 <__divtf3@@GCC_3.0+0x158>  // b.none
    793c:	cmp	x4, x6
    7940:	b.ls	7ca4 <__divtf3@@GCC_3.0+0x554>  // b.plast
    7944:	lsr	x3, x4, #1
    7948:	extr	x8, x4, x2, #1
    794c:	lsl	x2, x2, #63
    7950:	ubfx	x13, x6, #20, #32
    7954:	extr	x9, x6, x5, #52
    7958:	lsl	x12, x5, #12
    795c:	and	x15, x9, #0xffffffff
    7960:	udiv	x5, x3, x13
    7964:	msub	x3, x5, x13, x3
    7968:	mul	x1, x15, x5
    796c:	extr	x3, x3, x8, #32
    7970:	cmp	x1, x3
    7974:	b.ls	7988 <__divtf3@@GCC_3.0+0x238>  // b.plast
    7978:	adds	x3, x9, x3
    797c:	ccmp	x1, x3, #0x0, cc  // cc = lo, ul, last
    7980:	b.hi	7f60 <__divtf3@@GCC_3.0+0x810>  // b.pmore
    7984:	sub	x5, x5, #0x1
    7988:	sub	x3, x3, x1
    798c:	mov	x4, x8
    7990:	udiv	x1, x3, x13
    7994:	msub	x3, x1, x13, x3
    7998:	mul	x6, x15, x1
    799c:	bfi	x4, x3, #32, #32
    79a0:	cmp	x6, x4
    79a4:	b.ls	79b8 <__divtf3@@GCC_3.0+0x268>  // b.plast
    79a8:	adds	x4, x9, x4
    79ac:	ccmp	x6, x4, #0x0, cc  // cc = lo, ul, last
    79b0:	b.hi	7f6c <__divtf3@@GCC_3.0+0x81c>  // b.pmore
    79b4:	sub	x1, x1, #0x1
    79b8:	orr	x8, x1, x5, lsl #32
    79bc:	and	x17, x12, #0xffffffff
    79c0:	and	x1, x8, #0xffffffff
    79c4:	lsr	x16, x12, #32
    79c8:	lsr	x5, x8, #32
    79cc:	sub	x4, x4, x6
    79d0:	mov	x18, #0x100000000           	// #4294967296
    79d4:	mul	x3, x1, x17
    79d8:	mul	x30, x5, x17
    79dc:	madd	x6, x16, x1, x30
    79e0:	and	x1, x3, #0xffffffff
    79e4:	mul	x5, x5, x16
    79e8:	add	x3, x6, x3, lsr #32
    79ec:	add	x6, x5, x18
    79f0:	cmp	x30, x3
    79f4:	csel	x5, x6, x5, hi  // hi = pmore
    79f8:	add	x1, x1, x3, lsl #32
    79fc:	add	x5, x5, x3, lsr #32
    7a00:	cmp	x4, x5
    7a04:	b.cc	7d2c <__divtf3@@GCC_3.0+0x5dc>  // b.lo, b.ul, b.last
    7a08:	ccmp	x2, x1, #0x2, eq  // eq = none
    7a0c:	mov	x6, x8
    7a10:	b.cc	7d2c <__divtf3@@GCC_3.0+0x5dc>  // b.lo, b.ul, b.last
    7a14:	subs	x8, x2, x1
    7a18:	mov	x3, #0x3fff                	// #16383
    7a1c:	cmp	x2, x1
    7a20:	add	x3, x7, x3
    7a24:	sbc	x4, x4, x5
    7a28:	cmp	x9, x4
    7a2c:	b.eq	7f78 <__divtf3@@GCC_3.0+0x828>  // b.none
    7a30:	udiv	x5, x4, x13
    7a34:	msub	x4, x5, x13, x4
    7a38:	mul	x2, x15, x5
    7a3c:	extr	x1, x4, x8, #32
    7a40:	cmp	x2, x1
    7a44:	b.ls	7a58 <__divtf3@@GCC_3.0+0x308>  // b.plast
    7a48:	adds	x1, x9, x1
    7a4c:	ccmp	x2, x1, #0x0, cc  // cc = lo, ul, last
    7a50:	b.hi	8030 <__divtf3@@GCC_3.0+0x8e0>  // b.pmore
    7a54:	sub	x5, x5, #0x1
    7a58:	sub	x1, x1, x2
    7a5c:	udiv	x2, x1, x13
    7a60:	msub	x1, x2, x13, x1
    7a64:	mul	x15, x15, x2
    7a68:	bfi	x8, x1, #32, #32
    7a6c:	mov	x1, x8
    7a70:	cmp	x15, x8
    7a74:	b.ls	7a88 <__divtf3@@GCC_3.0+0x338>  // b.plast
    7a78:	adds	x1, x9, x8
    7a7c:	ccmp	x15, x1, #0x0, cc  // cc = lo, ul, last
    7a80:	b.hi	803c <__divtf3@@GCC_3.0+0x8ec>  // b.pmore
    7a84:	sub	x2, x2, #0x1
    7a88:	orr	x5, x2, x5, lsl #32
    7a8c:	sub	x1, x1, x15
    7a90:	and	x4, x5, #0xffffffff
    7a94:	mov	x13, #0x100000000           	// #4294967296
    7a98:	lsr	x15, x5, #32
    7a9c:	mul	x2, x17, x4
    7aa0:	mul	x17, x15, x17
    7aa4:	madd	x4, x16, x4, x17
    7aa8:	and	x8, x2, #0xffffffff
    7aac:	mul	x16, x16, x15
    7ab0:	add	x2, x4, x2, lsr #32
    7ab4:	add	x4, x16, x13
    7ab8:	cmp	x17, x2
    7abc:	csel	x16, x4, x16, hi  // hi = pmore
    7ac0:	add	x4, x8, x2, lsl #32
    7ac4:	add	x16, x16, x2, lsr #32
    7ac8:	cmp	x1, x16
    7acc:	b.cs	7eb0 <__divtf3@@GCC_3.0+0x760>  // b.hs, b.nlast
    7ad0:	adds	x2, x9, x1
    7ad4:	sub	x8, x5, #0x1
    7ad8:	mov	x1, x2
    7adc:	b.cs	7af0 <__divtf3@@GCC_3.0+0x3a0>  // b.hs, b.nlast
    7ae0:	cmp	x2, x16
    7ae4:	b.cc	7fb0 <__divtf3@@GCC_3.0+0x860>  // b.lo, b.ul, b.last
    7ae8:	ccmp	x12, x4, #0x2, eq  // eq = none
    7aec:	b.cc	7fb0 <__divtf3@@GCC_3.0+0x860>  // b.lo, b.ul, b.last
    7af0:	cmp	x12, x4
    7af4:	mov	x5, x8
    7af8:	cset	w2, ne  // ne = any
    7afc:	cmp	w2, #0x0
    7b00:	orr	x2, x5, #0x1
    7b04:	ccmp	x1, x16, #0x0, eq  // eq = none
    7b08:	csel	x5, x2, x5, ne  // ne = any
    7b0c:	b	786c <__divtf3@@GCC_3.0+0x11c>
    7b10:	cmp	x1, #0x2
    7b14:	b.eq	78a8 <__divtf3@@GCC_3.0+0x158>  // b.none
    7b18:	b	793c <__divtf3@@GCC_3.0+0x1ec>
    7b1c:	mov	x10, #0xffffffffffff8001    	// #-32767
    7b20:	orr	x3, x6, x5
    7b24:	add	x7, x7, x10
    7b28:	cbz	x3, 7c7c <__divtf3@@GCC_3.0+0x52c>
    7b2c:	eor	w10, w13, w15
    7b30:	ands	x3, x6, #0x800000000000
    7b34:	and	x12, x10, #0xff
    7b38:	csinc	w0, w0, wzr, ne  // ne = any
    7b3c:	mov	x14, x12
    7b40:	cmp	x1, #0x9
    7b44:	b.gt	7cf4 <__divtf3@@GCC_3.0+0x5a4>
    7b48:	mov	x3, #0x3                   	// #3
    7b4c:	b	7818 <__divtf3@@GCC_3.0+0xc8>
    7b50:	orr	x1, x6, x5
    7b54:	cbz	x1, 7c68 <__divtf3@@GCC_3.0+0x518>
    7b58:	cbz	x6, 7dfc <__divtf3@@GCC_3.0+0x6ac>
    7b5c:	clz	x1, x6
    7b60:	sub	x3, x1, #0xf
    7b64:	add	w12, w3, #0x3
    7b68:	mov	w10, #0x3d                  	// #61
    7b6c:	sub	w3, w10, w3
    7b70:	lsl	x6, x6, x12
    7b74:	lsr	x3, x5, x3
    7b78:	orr	x6, x3, x6
    7b7c:	lsl	x5, x5, x12
    7b80:	add	x7, x1, x7
    7b84:	mov	x12, #0x3fef                	// #16367
    7b88:	mov	x1, x16
    7b8c:	add	x7, x7, x12
    7b90:	mov	x3, #0x0                   	// #0
    7b94:	b	7804 <__divtf3@@GCC_3.0+0xb4>
    7b98:	orr	x4, x6, x2
    7b9c:	cbz	x4, 7c44 <__divtf3@@GCC_3.0+0x4f4>
    7ba0:	cbz	x6, 7e20 <__divtf3@@GCC_3.0+0x6d0>
    7ba4:	clz	x0, x6
    7ba8:	sub	x4, x0, #0xf
    7bac:	add	w7, w4, #0x3
    7bb0:	mov	w1, #0x3d                  	// #61
    7bb4:	sub	w4, w1, w4
    7bb8:	lsl	x6, x6, x7
    7bbc:	lsr	x4, x2, x4
    7bc0:	orr	x4, x4, x6
    7bc4:	lsl	x2, x2, x7
    7bc8:	mov	x7, #0xffffffffffffc011    	// #-16367
    7bcc:	mov	x14, #0x2                   	// #2
    7bd0:	sub	x7, x7, x0
    7bd4:	b	77ac <__divtf3@@GCC_3.0+0x5c>
    7bd8:	orr	x4, x6, x2
    7bdc:	cbnz	x4, 7c1c <__divtf3@@GCC_3.0+0x4cc>
    7be0:	mov	x2, #0x0                   	// #0
    7be4:	mov	x14, #0xa                   	// #10
    7be8:	mov	x12, #0x9                   	// #9
    7bec:	mov	x1, #0xb                   	// #11
    7bf0:	mov	x16, #0x8                   	// #8
    7bf4:	mov	x7, #0x7fff                	// #32767
    7bf8:	mov	x17, #0x2                   	// #2
    7bfc:	mov	w0, #0x0                   	// #0
    7c00:	b	77c0 <__divtf3@@GCC_3.0+0x70>
    7c04:	mov	w15, w13
    7c08:	mov	x6, x4
    7c0c:	mov	x5, x2
    7c10:	mov	x8, x9
    7c14:	mov	x3, x17
    7c18:	b	7840 <__divtf3@@GCC_3.0+0xf0>
    7c1c:	lsr	x0, x6, #47
    7c20:	mov	x4, x6
    7c24:	eor	w0, w0, #0x1
    7c28:	mov	x14, #0xe                   	// #14
    7c2c:	mov	x12, #0xd                   	// #13
    7c30:	mov	x1, #0xf                   	// #15
    7c34:	mov	x16, #0xc                   	// #12
    7c38:	mov	x7, #0x7fff                	// #32767
    7c3c:	mov	x17, #0x3                   	// #3
    7c40:	b	77c0 <__divtf3@@GCC_3.0+0x70>
    7c44:	mov	x2, #0x0                   	// #0
    7c48:	mov	x14, #0x6                   	// #6
    7c4c:	mov	x12, #0x5                   	// #5
    7c50:	mov	x1, #0x7                   	// #7
    7c54:	mov	x16, #0x4                   	// #4
    7c58:	mov	x7, #0x0                   	// #0
    7c5c:	mov	x17, #0x1                   	// #1
    7c60:	mov	w0, #0x0                   	// #0
    7c64:	b	77c0 <__divtf3@@GCC_3.0+0x70>
    7c68:	mov	x1, x12
    7c6c:	mov	x6, #0x0                   	// #0
    7c70:	mov	x5, #0x0                   	// #0
    7c74:	mov	x3, #0x1                   	// #1
    7c78:	b	7804 <__divtf3@@GCC_3.0+0xb4>
    7c7c:	mov	x1, x14
    7c80:	mov	x6, #0x0                   	// #0
    7c84:	mov	x5, #0x0                   	// #0
    7c88:	mov	x3, #0x2                   	// #2
    7c8c:	b	7804 <__divtf3@@GCC_3.0+0xb4>
    7c90:	mov	w10, w15
    7c94:	mov	w1, #0x7fff                	// #32767
    7c98:	mov	x6, #0x0                   	// #0
    7c9c:	mov	x2, #0x0                   	// #0
    7ca0:	b	78b4 <__divtf3@@GCC_3.0+0x164>
    7ca4:	ccmp	x5, x2, #0x2, eq  // eq = none
    7ca8:	b.ls	7944 <__divtf3@@GCC_3.0+0x1f4>  // b.plast
    7cac:	mov	x8, x2
    7cb0:	sub	x7, x7, #0x1
    7cb4:	mov	x3, x4
    7cb8:	mov	x2, #0x0                   	// #0
    7cbc:	b	7950 <__divtf3@@GCC_3.0+0x200>
    7cc0:	and	x1, x11, #0xc00000
    7cc4:	orr	w0, w0, #0x10
    7cc8:	cmp	x1, #0x400, lsl #12
    7ccc:	b.eq	7ffc <__divtf3@@GCC_3.0+0x8ac>  // b.none
    7cd0:	cmp	x1, #0x800, lsl #12
    7cd4:	b.eq	7f2c <__divtf3@@GCC_3.0+0x7dc>  // b.none
    7cd8:	cbnz	x1, 787c <__divtf3@@GCC_3.0+0x12c>
    7cdc:	and	x1, x5, #0xf
    7ce0:	cmp	x1, #0x4
    7ce4:	b.eq	787c <__divtf3@@GCC_3.0+0x12c>  // b.none
    7ce8:	adds	x5, x5, #0x4
    7cec:	cinc	x6, x6, cs  // cs = hs, nlast
    7cf0:	b	787c <__divtf3@@GCC_3.0+0x12c>
    7cf4:	cmp	x1, #0xf
    7cf8:	b.ne	78d8 <__divtf3@@GCC_3.0+0x188>  // b.any
    7cfc:	tbz	x4, #47, 7d18 <__divtf3@@GCC_3.0+0x5c8>
    7d00:	cbnz	x3, 7d18 <__divtf3@@GCC_3.0+0x5c8>
    7d04:	orr	x6, x6, #0x800000000000
    7d08:	mov	w10, w15
    7d0c:	mov	x2, x5
    7d10:	mov	w1, #0x7fff                	// #32767
    7d14:	b	78b4 <__divtf3@@GCC_3.0+0x164>
    7d18:	orr	x6, x4, #0x800000000000
    7d1c:	mov	w10, w13
    7d20:	and	x6, x6, #0xffffffffffff
    7d24:	mov	w1, #0x7fff                	// #32767
    7d28:	b	78b4 <__divtf3@@GCC_3.0+0x164>
    7d2c:	adds	x3, x2, x12
    7d30:	sub	x6, x8, #0x1
    7d34:	adc	x4, x4, x9
    7d38:	cset	x18, cs  // cs = hs, nlast
    7d3c:	mov	x2, x3
    7d40:	cmp	x9, x4
    7d44:	b.cs	7ea0 <__divtf3@@GCC_3.0+0x750>  // b.hs, b.nlast
    7d48:	cmp	x5, x4
    7d4c:	b.ls	7ec8 <__divtf3@@GCC_3.0+0x778>  // b.plast
    7d50:	adds	x2, x12, x3
    7d54:	sub	x6, x8, #0x2
    7d58:	adc	x4, x4, x9
    7d5c:	b	7a14 <__divtf3@@GCC_3.0+0x2c4>
    7d60:	mov	x1, #0x1                   	// #1
    7d64:	sub	x1, x1, x3
    7d68:	cmp	x1, #0x74
    7d6c:	b.le	7d88 <__divtf3@@GCC_3.0+0x638>
    7d70:	orr	x2, x5, x6
    7d74:	cbnz	x2, 7f94 <__divtf3@@GCC_3.0+0x844>
    7d78:	orr	w0, w0, #0x8
    7d7c:	mov	w1, #0x0                   	// #0
    7d80:	mov	x6, #0x0                   	// #0
    7d84:	b	7e6c <__divtf3@@GCC_3.0+0x71c>
    7d88:	cmp	x1, #0x3f
    7d8c:	b.le	7ed4 <__divtf3@@GCC_3.0+0x784>
    7d90:	mov	w2, #0x80                  	// #128
    7d94:	sub	w2, w2, w1
    7d98:	cmp	x1, #0x40
    7d9c:	sub	w1, w1, #0x40
    7da0:	lsl	x2, x6, x2
    7da4:	orr	x2, x5, x2
    7da8:	csel	x5, x2, x5, ne  // ne = any
    7dac:	lsr	x6, x6, x1
    7db0:	cmp	x5, #0x0
    7db4:	cset	x2, ne  // ne = any
    7db8:	orr	x2, x2, x6
    7dbc:	ands	x6, x2, #0x7
    7dc0:	b.eq	7f08 <__divtf3@@GCC_3.0+0x7b8>  // b.none
    7dc4:	mov	x6, #0x0                   	// #0
    7dc8:	and	x11, x11, #0xc00000
    7dcc:	orr	w0, w0, #0x10
    7dd0:	cmp	x11, #0x400, lsl #12
    7dd4:	b.eq	8048 <__divtf3@@GCC_3.0+0x8f8>  // b.none
    7dd8:	cmp	x11, #0x800, lsl #12
    7ddc:	b.eq	8068 <__divtf3@@GCC_3.0+0x918>  // b.none
    7de0:	cbz	x11, 7fd0 <__divtf3@@GCC_3.0+0x880>
    7de4:	tbnz	x6, #51, 7fe8 <__divtf3@@GCC_3.0+0x898>
    7de8:	orr	w0, w0, #0x8
    7dec:	extr	x2, x6, x2, #3
    7df0:	mov	w1, #0x0                   	// #0
    7df4:	ubfx	x6, x6, #3, #48
    7df8:	b	7e6c <__divtf3@@GCC_3.0+0x71c>
    7dfc:	clz	x1, x5
    7e00:	add	x3, x1, #0x31
    7e04:	add	x1, x1, #0x40
    7e08:	cmp	x3, #0x3c
    7e0c:	b.le	7b64 <__divtf3@@GCC_3.0+0x414>
    7e10:	sub	w6, w3, #0x3d
    7e14:	lsl	x6, x5, x6
    7e18:	mov	x5, #0x0                   	// #0
    7e1c:	b	7b80 <__divtf3@@GCC_3.0+0x430>
    7e20:	clz	x7, x2
    7e24:	add	x4, x7, #0x31
    7e28:	add	x0, x7, #0x40
    7e2c:	cmp	x4, #0x3c
    7e30:	b.le	7bac <__divtf3@@GCC_3.0+0x45c>
    7e34:	sub	w4, w4, #0x3d
    7e38:	lsl	x4, x2, x4
    7e3c:	mov	x2, #0x0                   	// #0
    7e40:	b	7bc8 <__divtf3@@GCC_3.0+0x478>
    7e44:	and	x2, x11, #0xc00000
    7e48:	cmp	x2, #0x400, lsl #12
    7e4c:	b.eq	8014 <__divtf3@@GCC_3.0+0x8c4>  // b.none
    7e50:	cmp	x2, #0x800, lsl #12
    7e54:	b.eq	7f44 <__divtf3@@GCC_3.0+0x7f4>  // b.none
    7e58:	cbz	x2, 7f20 <__divtf3@@GCC_3.0+0x7d0>
    7e5c:	mov	x6, #0xffffffffffff        	// #281474976710655
    7e60:	mov	x2, #0xffffffffffffffff    	// #-1
    7e64:	mov	w3, #0x14                  	// #20
    7e68:	orr	w0, w0, w3
    7e6c:	mov	x5, #0x0                   	// #0
    7e70:	orr	w1, w1, w10, lsl #15
    7e74:	bfxil	x5, x6, #0, #48
    7e78:	fmov	d0, x2
    7e7c:	bfi	x5, x1, #48, #16
    7e80:	fmov	v0.d[1], x5
    7e84:	b	7924 <__divtf3@@GCC_3.0+0x1d4>
    7e88:	orr	x6, x6, #0x800000000000
    7e8c:	mov	w10, w15
    7e90:	and	x6, x6, #0xffffffffffff
    7e94:	mov	x2, x5
    7e98:	mov	w1, #0x7fff                	// #32767
    7e9c:	b	78b4 <__divtf3@@GCC_3.0+0x164>
    7ea0:	cmp	x18, #0x0
    7ea4:	ccmp	x9, x4, #0x0, eq  // eq = none
    7ea8:	b.ne	7a14 <__divtf3@@GCC_3.0+0x2c4>  // b.any
    7eac:	b	7d48 <__divtf3@@GCC_3.0+0x5f8>
    7eb0:	cmp	x4, #0x0
    7eb4:	cset	w2, ne  // ne = any
    7eb8:	cmp	w2, #0x0
    7ebc:	ccmp	x1, x16, #0x0, ne  // ne = any
    7ec0:	b.ne	7afc <__divtf3@@GCC_3.0+0x3ac>  // b.any
    7ec4:	b	7ad0 <__divtf3@@GCC_3.0+0x380>
    7ec8:	ccmp	x1, x3, #0x0, eq  // eq = none
    7ecc:	b.ls	7a14 <__divtf3@@GCC_3.0+0x2c4>  // b.plast
    7ed0:	b	7d50 <__divtf3@@GCC_3.0+0x600>
    7ed4:	mov	w2, #0x40                  	// #64
    7ed8:	sub	w2, w2, w1
    7edc:	lsr	x4, x5, x1
    7ee0:	lsl	x5, x5, x2
    7ee4:	cmp	x5, #0x0
    7ee8:	cset	x3, ne  // ne = any
    7eec:	lsl	x2, x6, x2
    7ef0:	orr	x2, x2, x4
    7ef4:	lsr	x6, x6, x1
    7ef8:	orr	x2, x2, x3
    7efc:	tst	x2, #0x7
    7f00:	b.ne	7dc8 <__divtf3@@GCC_3.0+0x678>  // b.any
    7f04:	tbnz	x6, #51, 8074 <__divtf3@@GCC_3.0+0x924>
    7f08:	mov	w1, #0x0                   	// #0
    7f0c:	extr	x2, x6, x2, #3
    7f10:	ubfx	x6, x6, #3, #48
    7f14:	tbz	w11, #11, 78b4 <__divtf3@@GCC_3.0+0x164>
    7f18:	orr	w0, w0, #0x8
    7f1c:	b	7e6c <__divtf3@@GCC_3.0+0x71c>
    7f20:	mov	w1, #0x7fff                	// #32767
    7f24:	mov	x6, #0x0                   	// #0
    7f28:	b	7e64 <__divtf3@@GCC_3.0+0x714>
    7f2c:	mov	w10, #0x0                   	// #0
    7f30:	cbz	x14, 787c <__divtf3@@GCC_3.0+0x12c>
    7f34:	adds	x5, x5, #0x8
    7f38:	mov	w10, #0x1                   	// #1
    7f3c:	cinc	x6, x6, cs  // cs = hs, nlast
    7f40:	b	787c <__divtf3@@GCC_3.0+0x12c>
    7f44:	cmp	x14, #0x0
    7f48:	mov	w2, #0x7fff                	// #32767
    7f4c:	mov	x6, #0xffffffffffff        	// #281474976710655
    7f50:	csel	w1, w1, w2, eq  // eq = none
    7f54:	csel	x6, x6, xzr, eq  // eq = none
    7f58:	csetm	x2, eq  // eq = none
    7f5c:	b	7e64 <__divtf3@@GCC_3.0+0x714>
    7f60:	sub	x5, x5, #0x2
    7f64:	add	x3, x3, x9
    7f68:	b	7988 <__divtf3@@GCC_3.0+0x238>
    7f6c:	sub	x1, x1, #0x2
    7f70:	add	x4, x4, x9
    7f74:	b	79b8 <__divtf3@@GCC_3.0+0x268>
    7f78:	cmp	x3, #0x0
    7f7c:	mov	x5, #0xffffffffffffffff    	// #-1
    7f80:	b.gt	7cc0 <__divtf3@@GCC_3.0+0x570>
    7f84:	mov	x1, #0x1                   	// #1
    7f88:	sub	x1, x1, x3
    7f8c:	cmp	x1, #0x74
    7f90:	b.le	7d88 <__divtf3@@GCC_3.0+0x638>
    7f94:	and	x11, x11, #0xc00000
    7f98:	orr	w0, w0, #0x10
    7f9c:	cmp	x11, #0x400, lsl #12
    7fa0:	b.eq	805c <__divtf3@@GCC_3.0+0x90c>  // b.none
    7fa4:	cmp	x11, #0x800, lsl #12
    7fa8:	csel	x2, x14, xzr, eq  // eq = none
    7fac:	b	7d78 <__divtf3@@GCC_3.0+0x628>
    7fb0:	lsl	x8, x12, #1
    7fb4:	sub	x5, x5, #0x2
    7fb8:	cmp	x12, x8
    7fbc:	cinc	x1, x9, hi  // hi = pmore
    7fc0:	cmp	x4, x8
    7fc4:	add	x1, x2, x1
    7fc8:	cset	w2, ne  // ne = any
    7fcc:	b	7afc <__divtf3@@GCC_3.0+0x3ac>
    7fd0:	and	x1, x2, #0xf
    7fd4:	cmp	x1, #0x4
    7fd8:	b.eq	7fe4 <__divtf3@@GCC_3.0+0x894>  // b.none
    7fdc:	adds	x2, x2, #0x4
    7fe0:	cinc	x6, x6, cs  // cs = hs, nlast
    7fe4:	tbz	x6, #51, 7de8 <__divtf3@@GCC_3.0+0x698>
    7fe8:	orr	w0, w0, #0x8
    7fec:	mov	w1, #0x1                   	// #1
    7ff0:	mov	x6, #0x0                   	// #0
    7ff4:	mov	x2, #0x0                   	// #0
    7ff8:	b	7e6c <__divtf3@@GCC_3.0+0x71c>
    7ffc:	mov	w10, #0x1                   	// #1
    8000:	cbnz	x14, 787c <__divtf3@@GCC_3.0+0x12c>
    8004:	adds	x5, x5, #0x8
    8008:	mov	w10, #0x0                   	// #0
    800c:	cinc	x6, x6, cs  // cs = hs, nlast
    8010:	b	787c <__divtf3@@GCC_3.0+0x12c>
    8014:	cmp	x14, #0x0
    8018:	mov	w2, #0x7fff                	// #32767
    801c:	mov	x6, #0xffffffffffff        	// #281474976710655
    8020:	csel	w1, w1, w2, ne  // ne = any
    8024:	csel	x6, x6, xzr, ne  // ne = any
    8028:	csetm	x2, ne  // ne = any
    802c:	b	7e64 <__divtf3@@GCC_3.0+0x714>
    8030:	sub	x5, x5, #0x2
    8034:	add	x1, x1, x9
    8038:	b	7a58 <__divtf3@@GCC_3.0+0x308>
    803c:	sub	x2, x2, #0x2
    8040:	add	x1, x1, x9
    8044:	b	7a88 <__divtf3@@GCC_3.0+0x338>
    8048:	cbnz	x14, 7fe4 <__divtf3@@GCC_3.0+0x894>
    804c:	adds	x2, x2, #0x8
    8050:	cinc	x6, x6, cs  // cs = hs, nlast
    8054:	tbnz	x6, #51, 7fe8 <__divtf3@@GCC_3.0+0x898>
    8058:	b	7de8 <__divtf3@@GCC_3.0+0x698>
    805c:	mov	x2, #0x1                   	// #1
    8060:	sub	x2, x2, x14
    8064:	b	7d78 <__divtf3@@GCC_3.0+0x628>
    8068:	cbnz	x14, 804c <__divtf3@@GCC_3.0+0x8fc>
    806c:	tbnz	x6, #51, 7fe8 <__divtf3@@GCC_3.0+0x898>
    8070:	b	7de8 <__divtf3@@GCC_3.0+0x698>
    8074:	orr	w0, w0, #0x10
    8078:	b	7fe8 <__divtf3@@GCC_3.0+0x898>
    807c:	nop

0000000000008080 <__eqtf2@@GCC_3.0>:
    8080:	stp	x29, x30, [sp, #-48]!
    8084:	mov	x29, sp
    8088:	str	q0, [sp, #16]
    808c:	str	q1, [sp, #32]
    8090:	ldp	x6, x1, [sp, #16]
    8094:	ldp	x7, x0, [sp, #32]
    8098:	mrs	x2, fpcr
    809c:	ubfx	x4, x1, #48, #15
    80a0:	lsr	x2, x1, #63
    80a4:	lsr	x3, x0, #63
    80a8:	ubfx	x9, x0, #0, #48
    80ac:	mov	x5, #0x7fff                	// #32767
    80b0:	mov	x10, x6
    80b4:	cmp	x4, x5
    80b8:	and	w2, w2, #0xff
    80bc:	ubfx	x1, x1, #0, #48
    80c0:	and	w3, w3, #0xff
    80c4:	ubfx	x0, x0, #48, #15
    80c8:	b.eq	80fc <__eqtf2@@GCC_3.0+0x7c>  // b.none
    80cc:	cmp	x0, x5
    80d0:	b.eq	80e8 <__eqtf2@@GCC_3.0+0x68>  // b.none
    80d4:	cmp	x4, x0
    80d8:	mov	w0, #0x1                   	// #1
    80dc:	b.eq	8114 <__eqtf2@@GCC_3.0+0x94>  // b.none
    80e0:	ldp	x29, x30, [sp], #48
    80e4:	ret
    80e8:	orr	x8, x9, x7
    80ec:	cbnz	x8, 8178 <__eqtf2@@GCC_3.0+0xf8>
    80f0:	mov	w0, #0x1                   	// #1
    80f4:	ldp	x29, x30, [sp], #48
    80f8:	ret
    80fc:	orr	x5, x1, x6
    8100:	cbnz	x5, 8148 <__eqtf2@@GCC_3.0+0xc8>
    8104:	cmp	x0, x4
    8108:	b.ne	80f0 <__eqtf2@@GCC_3.0+0x70>  // b.any
    810c:	orr	x8, x9, x7
    8110:	cbnz	x8, 8178 <__eqtf2@@GCC_3.0+0xf8>
    8114:	cmp	x1, x9
    8118:	mov	w0, #0x1                   	// #1
    811c:	ccmp	x6, x7, #0x0, eq  // eq = none
    8120:	b.ne	80e0 <__eqtf2@@GCC_3.0+0x60>  // b.any
    8124:	cmp	w2, w3
    8128:	mov	w0, #0x0                   	// #0
    812c:	b.eq	80e0 <__eqtf2@@GCC_3.0+0x60>  // b.none
    8130:	mov	w0, #0x1                   	// #1
    8134:	cbnz	x4, 80e0 <__eqtf2@@GCC_3.0+0x60>
    8138:	orr	x1, x1, x10
    813c:	cmp	x1, #0x0
    8140:	cset	w0, ne  // ne = any
    8144:	b	80e0 <__eqtf2@@GCC_3.0+0x60>
    8148:	tst	x1, #0x800000000000
    814c:	b.ne	8164 <__eqtf2@@GCC_3.0+0xe4>  // b.any
    8150:	mov	w0, #0x1                   	// #1
    8154:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    8158:	mov	w0, #0x1                   	// #1
    815c:	ldp	x29, x30, [sp], #48
    8160:	ret
    8164:	cmp	x0, x4
    8168:	mov	w0, #0x1                   	// #1
    816c:	b.ne	80e0 <__eqtf2@@GCC_3.0+0x60>  // b.any
    8170:	orr	x8, x9, x7
    8174:	cbz	x8, 80e0 <__eqtf2@@GCC_3.0+0x60>
    8178:	tst	x9, #0x800000000000
    817c:	b.eq	8150 <__eqtf2@@GCC_3.0+0xd0>  // b.none
    8180:	b	80f0 <__eqtf2@@GCC_3.0+0x70>
    8184:	nop

0000000000008188 <__getf2@@GCC_3.0>:
    8188:	stp	x29, x30, [sp, #-48]!
    818c:	mov	x29, sp
    8190:	str	q0, [sp, #16]
    8194:	str	q1, [sp, #32]
    8198:	ldp	x8, x1, [sp, #16]
    819c:	ldp	x9, x0, [sp, #32]
    81a0:	mrs	x2, fpcr
    81a4:	ubfx	x4, x1, #48, #15
    81a8:	ubfx	x10, x1, #0, #48
    81ac:	lsr	x2, x1, #63
    81b0:	mov	x7, #0x7fff                	// #32767
    81b4:	mov	x5, x8
    81b8:	cmp	x4, x7
    81bc:	ubfx	x11, x0, #0, #48
    81c0:	ubfx	x6, x0, #48, #15
    81c4:	lsr	x1, x0, #63
    81c8:	mov	x3, x9
    81cc:	b.eq	8208 <__getf2@@GCC_3.0+0x80>  // b.none
    81d0:	cmp	x6, x7
    81d4:	b.eq	8218 <__getf2@@GCC_3.0+0x90>  // b.none
    81d8:	cbnz	x4, 8240 <__getf2@@GCC_3.0+0xb8>
    81dc:	orr	x5, x10, x8
    81e0:	cmp	x5, #0x0
    81e4:	cset	w0, eq  // eq = none
    81e8:	cbnz	x6, 81f4 <__getf2@@GCC_3.0+0x6c>
    81ec:	orr	x3, x11, x9
    81f0:	cbz	x3, 8260 <__getf2@@GCC_3.0+0xd8>
    81f4:	cbz	w0, 8224 <__getf2@@GCC_3.0+0x9c>
    81f8:	cmp	x1, #0x0
    81fc:	csinv	w0, w0, wzr, ne  // ne = any
    8200:	ldp	x29, x30, [sp], #48
    8204:	ret
    8208:	orr	x0, x10, x8
    820c:	cbnz	x0, 826c <__getf2@@GCC_3.0+0xe4>
    8210:	cmp	x6, x4
    8214:	b.ne	8240 <__getf2@@GCC_3.0+0xb8>  // b.any
    8218:	orr	x3, x11, x3
    821c:	cbnz	x3, 826c <__getf2@@GCC_3.0+0xe4>
    8220:	cbz	x4, 8250 <__getf2@@GCC_3.0+0xc8>
    8224:	cmp	x2, x1
    8228:	b.eq	8280 <__getf2@@GCC_3.0+0xf8>  // b.none
    822c:	cmp	x2, #0x0
    8230:	mov	w0, #0xffffffff            	// #-1
    8234:	cneg	w0, w0, eq  // eq = none
    8238:	ldp	x29, x30, [sp], #48
    823c:	ret
    8240:	cbnz	x6, 8224 <__getf2@@GCC_3.0+0x9c>
    8244:	orr	x3, x11, x3
    8248:	cbnz	x3, 8224 <__getf2@@GCC_3.0+0x9c>
    824c:	b	822c <__getf2@@GCC_3.0+0xa4>
    8250:	orr	x5, x10, x5
    8254:	cmp	x5, #0x0
    8258:	cset	w0, eq  // eq = none
    825c:	b	81f4 <__getf2@@GCC_3.0+0x6c>
    8260:	mov	w0, #0x0                   	// #0
    8264:	cbz	x5, 8200 <__getf2@@GCC_3.0+0x78>
    8268:	b	822c <__getf2@@GCC_3.0+0xa4>
    826c:	mov	w0, #0x1                   	// #1
    8270:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    8274:	mov	w0, #0xfffffffe            	// #-2
    8278:	ldp	x29, x30, [sp], #48
    827c:	ret
    8280:	cmp	x4, x6
    8284:	b.gt	822c <__getf2@@GCC_3.0+0xa4>
    8288:	b.lt	82c0 <__getf2@@GCC_3.0+0x138>  // b.tstop
    828c:	cmp	x10, x11
    8290:	b.hi	822c <__getf2@@GCC_3.0+0xa4>  // b.pmore
    8294:	cset	w0, eq  // eq = none
    8298:	cmp	w0, #0x0
    829c:	ccmp	x8, x9, #0x0, ne  // ne = any
    82a0:	b.hi	822c <__getf2@@GCC_3.0+0xa4>  // b.pmore
    82a4:	cmp	x10, x11
    82a8:	b.cc	82c0 <__getf2@@GCC_3.0+0x138>  // b.lo, b.ul, b.last
    82ac:	cmp	w0, #0x0
    82b0:	mov	w0, #0x0                   	// #0
    82b4:	ccmp	x8, x9, #0x2, ne  // ne = any
    82b8:	b.cs	8200 <__getf2@@GCC_3.0+0x78>  // b.hs, b.nlast
    82bc:	nop
    82c0:	cmp	x2, #0x0
    82c4:	mov	w0, #0x1                   	// #1
    82c8:	cneg	w0, w0, eq  // eq = none
    82cc:	b	8200 <__getf2@@GCC_3.0+0x78>

00000000000082d0 <__letf2@@GCC_3.0>:
    82d0:	stp	x29, x30, [sp, #-48]!
    82d4:	mov	x29, sp
    82d8:	str	q0, [sp, #16]
    82dc:	str	q1, [sp, #32]
    82e0:	ldp	x8, x1, [sp, #16]
    82e4:	ldp	x9, x0, [sp, #32]
    82e8:	mrs	x2, fpcr
    82ec:	ubfx	x4, x1, #48, #15
    82f0:	ubfx	x10, x1, #0, #48
    82f4:	lsr	x2, x1, #63
    82f8:	mov	x5, #0x7fff                	// #32767
    82fc:	mov	x6, x8
    8300:	cmp	x4, x5
    8304:	ubfx	x11, x0, #0, #48
    8308:	ubfx	x7, x0, #48, #15
    830c:	lsr	x1, x0, #63
    8310:	mov	x3, x9
    8314:	b.eq	834c <__letf2@@GCC_3.0+0x7c>  // b.none
    8318:	cmp	x7, x5
    831c:	b.eq	835c <__letf2@@GCC_3.0+0x8c>  // b.none
    8320:	cbnz	x4, 8388 <__letf2@@GCC_3.0+0xb8>
    8324:	orr	x6, x10, x8
    8328:	cmp	x6, #0x0
    832c:	cset	w0, eq  // eq = none
    8330:	cbnz	x7, 8374 <__letf2@@GCC_3.0+0xa4>
    8334:	orr	x3, x11, x9
    8338:	cbnz	x3, 8374 <__letf2@@GCC_3.0+0xa4>
    833c:	mov	w0, #0x0                   	// #0
    8340:	cbnz	x6, 839c <__letf2@@GCC_3.0+0xcc>
    8344:	ldp	x29, x30, [sp], #48
    8348:	ret
    834c:	orr	x0, x10, x8
    8350:	cbnz	x0, 83b0 <__letf2@@GCC_3.0+0xe0>
    8354:	cmp	x7, x4
    8358:	b.ne	8388 <__letf2@@GCC_3.0+0xb8>  // b.any
    835c:	orr	x3, x11, x3
    8360:	cbnz	x3, 83b0 <__letf2@@GCC_3.0+0xe0>
    8364:	cbnz	x4, 8394 <__letf2@@GCC_3.0+0xc4>
    8368:	orr	x6, x10, x6
    836c:	cmp	x6, #0x0
    8370:	cset	w0, eq  // eq = none
    8374:	cbz	w0, 8394 <__letf2@@GCC_3.0+0xc4>
    8378:	cmp	x1, #0x0
    837c:	csinv	w0, w0, wzr, ne  // ne = any
    8380:	ldp	x29, x30, [sp], #48
    8384:	ret
    8388:	cbnz	x7, 8394 <__letf2@@GCC_3.0+0xc4>
    838c:	orr	x3, x11, x3
    8390:	cbz	x3, 839c <__letf2@@GCC_3.0+0xcc>
    8394:	cmp	x2, x1
    8398:	b.eq	83c4 <__letf2@@GCC_3.0+0xf4>  // b.none
    839c:	cmp	x2, #0x0
    83a0:	mov	w0, #0xffffffff            	// #-1
    83a4:	cneg	w0, w0, eq  // eq = none
    83a8:	ldp	x29, x30, [sp], #48
    83ac:	ret
    83b0:	mov	w0, #0x1                   	// #1
    83b4:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    83b8:	mov	w0, #0x2                   	// #2
    83bc:	ldp	x29, x30, [sp], #48
    83c0:	ret
    83c4:	cmp	x4, x7
    83c8:	b.gt	839c <__letf2@@GCC_3.0+0xcc>
    83cc:	b.lt	8400 <__letf2@@GCC_3.0+0x130>  // b.tstop
    83d0:	cmp	x10, x11
    83d4:	b.hi	839c <__letf2@@GCC_3.0+0xcc>  // b.pmore
    83d8:	cset	w0, eq  // eq = none
    83dc:	cmp	w0, #0x0
    83e0:	ccmp	x8, x9, #0x0, ne  // ne = any
    83e4:	b.hi	839c <__letf2@@GCC_3.0+0xcc>  // b.pmore
    83e8:	cmp	x10, x11
    83ec:	b.cc	8400 <__letf2@@GCC_3.0+0x130>  // b.lo, b.ul, b.last
    83f0:	cmp	w0, #0x0
    83f4:	mov	w0, #0x0                   	// #0
    83f8:	ccmp	x8, x9, #0x2, ne  // ne = any
    83fc:	b.cs	8344 <__letf2@@GCC_3.0+0x74>  // b.hs, b.nlast
    8400:	cmp	x2, #0x0
    8404:	mov	w0, #0x1                   	// #1
    8408:	cneg	w0, w0, eq  // eq = none
    840c:	b	8344 <__letf2@@GCC_3.0+0x74>

0000000000008410 <__multf3@@GCC_3.0>:
    8410:	stp	x29, x30, [sp, #-80]!
    8414:	mov	x29, sp
    8418:	str	q0, [sp, #48]
    841c:	str	q1, [sp, #64]
    8420:	ldp	x1, x0, [sp, #48]
    8424:	ldp	x3, x2, [sp, #64]
    8428:	mrs	x12, fpcr
    842c:	lsr	x4, x0, #63
    8430:	ubfx	x8, x0, #0, #48
    8434:	and	w16, w4, #0xff
    8438:	mov	x14, x4
    843c:	ubfx	x10, x0, #48, #15
    8440:	cbz	w10, 87c4 <__multf3@@GCC_3.0+0x3b4>
    8444:	mov	w4, #0x7fff                	// #32767
    8448:	cmp	w10, w4
    844c:	b.eq	8804 <__multf3@@GCC_3.0+0x3f4>  // b.none
    8450:	and	x10, x10, #0xffff
    8454:	extr	x4, x8, x1, #61
    8458:	mov	x5, #0xffffffffffffc001    	// #-16383
    845c:	orr	x8, x4, #0x8000000000000
    8460:	add	x10, x10, x5
    8464:	lsl	x7, x1, #3
    8468:	mov	x11, #0x2                   	// #2
    846c:	mov	x9, #0x1                   	// #1
    8470:	mov	x6, #0x3                   	// #3
    8474:	mov	x1, #0x0                   	// #0
    8478:	mov	x17, #0x0                   	// #0
    847c:	mov	w0, #0x0                   	// #0
    8480:	lsr	x5, x2, #63
    8484:	ubfx	x4, x2, #0, #48
    8488:	and	w15, w5, #0xff
    848c:	mov	x13, x5
    8490:	ubfx	x5, x2, #48, #15
    8494:	cbz	w5, 8848 <__multf3@@GCC_3.0+0x438>
    8498:	mov	w9, #0x7fff                	// #32767
    849c:	cmp	w5, w9
    84a0:	b.eq	8530 <__multf3@@GCC_3.0+0x120>  // b.none
    84a4:	and	x5, x5, #0xffff
    84a8:	extr	x2, x4, x3, #61
    84ac:	mov	x4, #0xffffffffffffc001    	// #-16383
    84b0:	add	x5, x5, x4
    84b4:	add	x10, x10, x5
    84b8:	orr	x4, x2, #0x8000000000000
    84bc:	lsl	x5, x3, #3
    84c0:	mov	x6, #0x0                   	// #0
    84c4:	eor	w3, w16, w15
    84c8:	cmp	x1, #0xa
    84cc:	and	w11, w3, #0xff
    84d0:	and	x9, x3, #0xff
    84d4:	add	x18, x10, #0x1
    84d8:	b.gt	87b0 <__multf3@@GCC_3.0+0x3a0>
    84dc:	cmp	x1, #0x2
    84e0:	b.gt	8570 <__multf3@@GCC_3.0+0x160>
    84e4:	sub	x1, x1, #0x1
    84e8:	cmp	x1, #0x1
    84ec:	b.hi	85d0 <__multf3@@GCC_3.0+0x1c0>  // b.pmore
    84f0:	cmp	x6, #0x2
    84f4:	b.eq	888c <__multf3@@GCC_3.0+0x47c>  // b.none
    84f8:	cmp	x6, #0x1
    84fc:	b.ne	8730 <__multf3@@GCC_3.0+0x320>  // b.any
    8500:	mov	w1, #0x0                   	// #0
    8504:	mov	x4, #0x0                   	// #0
    8508:	mov	x7, #0x0                   	// #0
    850c:	mov	x3, #0x0                   	// #0
    8510:	orr	w1, w1, w11, lsl #15
    8514:	bfxil	x3, x4, #0, #48
    8518:	fmov	d0, x7
    851c:	bfi	x3, x1, #48, #16
    8520:	fmov	v0.d[1], x3
    8524:	cbnz	w0, 8a38 <__multf3@@GCC_3.0+0x628>
    8528:	ldp	x29, x30, [sp], #80
    852c:	ret
    8530:	mov	x2, #0x7fff                	// #32767
    8534:	orr	x5, x4, x3
    8538:	add	x2, x10, x2
    853c:	cbz	x5, 889c <__multf3@@GCC_3.0+0x48c>
    8540:	ands	x1, x4, #0x800000000000
    8544:	eor	w9, w16, w15
    8548:	csinc	w0, w0, wzr, ne  // ne = any
    854c:	and	w11, w9, #0xff
    8550:	add	x18, x10, #0x8, lsl #12
    8554:	cmp	x6, #0xa
    8558:	and	x9, x9, #0xff
    855c:	b.gt	8994 <__multf3@@GCC_3.0+0x584>
    8560:	mov	x10, x2
    8564:	mov	x5, x3
    8568:	mov	x1, x6
    856c:	mov	x6, #0x3                   	// #3
    8570:	mov	x2, #0x1                   	// #1
    8574:	mov	x3, #0x530                 	// #1328
    8578:	lsl	x1, x2, x1
    857c:	tst	x1, x3
    8580:	b.ne	87a4 <__multf3@@GCC_3.0+0x394>  // b.any
    8584:	mov	x3, #0x240                 	// #576
    8588:	tst	x1, x3
    858c:	b.ne	878c <__multf3@@GCC_3.0+0x37c>  // b.any
    8590:	mov	x2, #0x88                  	// #136
    8594:	tst	x1, x2
    8598:	b.eq	85d0 <__multf3@@GCC_3.0+0x1c0>  // b.none
    859c:	mov	x8, x4
    85a0:	mov	x7, x5
    85a4:	mov	x17, x6
    85a8:	cmp	x17, #0x2
    85ac:	b.eq	8be4 <__multf3@@GCC_3.0+0x7d4>  // b.none
    85b0:	mov	x6, x17
    85b4:	mov	w11, w15
    85b8:	cmp	x17, #0x3
    85bc:	mov	x4, x8
    85c0:	mov	x5, x7
    85c4:	mov	x9, x13
    85c8:	b.ne	84f8 <__multf3@@GCC_3.0+0xe8>  // b.any
    85cc:	b	89dc <__multf3@@GCC_3.0+0x5cc>
    85d0:	lsr	x13, x7, #32
    85d4:	and	x6, x5, #0xffffffff
    85d8:	and	x17, x4, #0xffffffff
    85dc:	and	x7, x7, #0xffffffff
    85e0:	stp	x21, x22, [sp, #32]
    85e4:	lsr	x22, x5, #32
    85e8:	lsr	x2, x4, #32
    85ec:	stp	x19, x20, [sp, #16]
    85f0:	mul	x19, x13, x6
    85f4:	lsr	x4, x8, #32
    85f8:	mul	x1, x13, x17
    85fc:	and	x3, x8, #0xffffffff
    8600:	madd	x5, x22, x7, x19
    8604:	mov	x14, #0x100000000           	// #4294967296
    8608:	mul	x15, x6, x7
    860c:	mul	x16, x7, x17
    8610:	madd	x7, x2, x7, x1
    8614:	and	x30, x15, #0xffffffff
    8618:	mul	x21, x4, x6
    861c:	add	x15, x5, x15, lsr #32
    8620:	mul	x20, x4, x17
    8624:	cmp	x19, x15
    8628:	mul	x5, x13, x22
    862c:	add	x30, x30, x15, lsl #32
    8630:	mul	x19, x13, x2
    8634:	add	x13, x7, x16, lsr #32
    8638:	mul	x6, x6, x3
    863c:	add	x8, x5, x14
    8640:	mul	x17, x3, x17
    8644:	csel	x5, x8, x5, hi  // hi = pmore
    8648:	madd	x7, x22, x3, x21
    864c:	cmp	x1, x13
    8650:	madd	x3, x2, x3, x20
    8654:	and	x16, x16, #0xffffffff
    8658:	mul	x8, x22, x4
    865c:	add	x16, x16, x13, lsl #32
    8660:	add	x7, x7, x6, lsr #32
    8664:	mul	x2, x2, x4
    8668:	add	x3, x3, x17, lsr #32
    866c:	add	x4, x19, x14
    8670:	csel	x19, x4, x19, hi  // hi = pmore
    8674:	and	x1, x17, #0xffffffff
    8678:	cmp	x21, x7
    867c:	add	x4, x8, x14
    8680:	csel	x8, x4, x8, hi  // hi = pmore
    8684:	add	x1, x1, x3, lsl #32
    8688:	cmp	x20, x3
    868c:	add	x15, x16, x15, lsr #32
    8690:	add	x13, x19, x13, lsr #32
    8694:	add	x14, x2, x14
    8698:	add	x15, x5, x15
    869c:	csel	x2, x14, x2, hi  // hi = pmore
    86a0:	adds	x1, x1, x13
    86a4:	and	x6, x6, #0xffffffff
    86a8:	cset	x5, cs  // cs = hs, nlast
    86ac:	cmp	x15, x16
    86b0:	cset	x4, cc  // cc = lo, ul, last
    86b4:	add	x6, x6, x7, lsl #32
    86b8:	adds	x1, x1, x4
    86bc:	lsr	x3, x3, #32
    86c0:	cset	x4, cs  // cs = hs, nlast
    86c4:	cmp	x5, #0x0
    86c8:	ccmp	x4, #0x0, #0x0, eq  // eq = none
    86cc:	add	x7, x8, x7, lsr #32
    86d0:	cinc	x3, x3, ne  // ne = any
    86d4:	adds	x5, x15, x6
    86d8:	cset	x4, cs  // cs = hs, nlast
    86dc:	adds	x1, x1, x7
    86e0:	cset	x6, cs  // cs = hs, nlast
    86e4:	adds	x1, x1, x4
    86e8:	cset	x4, cs  // cs = hs, nlast
    86ec:	cmp	x6, #0x0
    86f0:	ccmp	x4, #0x0, #0x0, eq  // eq = none
    86f4:	orr	x30, x30, x5, lsl #13
    86f8:	cinc	x2, x2, ne  // ne = any
    86fc:	cmp	x30, #0x0
    8700:	add	x2, x2, x3
    8704:	cset	x3, ne  // ne = any
    8708:	orr	x5, x3, x5, lsr #51
    870c:	orr	x5, x5, x1, lsl #13
    8710:	extr	x4, x2, x1, #51
    8714:	tbz	x2, #39, 8ac0 <__multf3@@GCC_3.0+0x6b0>
    8718:	ldp	x19, x20, [sp, #16]
    871c:	and	x1, x5, #0x1
    8720:	ldp	x21, x22, [sp, #32]
    8724:	orr	x5, x1, x5, lsr #1
    8728:	orr	x5, x5, x4, lsl #63
    872c:	lsr	x4, x4, #1
    8730:	mov	x1, #0x3fff                	// #16383
    8734:	add	x2, x18, x1
    8738:	cmp	x2, #0x0
    873c:	b.le	8910 <__multf3@@GCC_3.0+0x500>
    8740:	tst	x5, #0x7
    8744:	b.eq	8764 <__multf3@@GCC_3.0+0x354>  // b.none
    8748:	and	x1, x12, #0xc00000
    874c:	orr	w0, w0, #0x10
    8750:	cmp	x1, #0x400, lsl #12
    8754:	b.eq	8b98 <__multf3@@GCC_3.0+0x788>  // b.none
    8758:	cmp	x1, #0x800, lsl #12
    875c:	b.eq	8b28 <__multf3@@GCC_3.0+0x718>  // b.none
    8760:	cbz	x1, 8b54 <__multf3@@GCC_3.0+0x744>
    8764:	tbz	x4, #52, 8770 <__multf3@@GCC_3.0+0x360>
    8768:	and	x4, x4, #0xffefffffffffffff
    876c:	add	x2, x18, #0x4, lsl #12
    8770:	mov	x1, #0x7ffe                	// #32766
    8774:	cmp	x2, x1
    8778:	b.gt	8a94 <__multf3@@GCC_3.0+0x684>
    877c:	and	w1, w2, #0x7fff
    8780:	extr	x7, x4, x5, #3
    8784:	ubfx	x4, x4, #3, #48
    8788:	b	850c <__multf3@@GCC_3.0+0xfc>
    878c:	mov	w0, w2
    8790:	mov	w11, #0x0                   	// #0
    8794:	mov	x4, #0xffffffffffff        	// #281474976710655
    8798:	mov	x7, #0xffffffffffffffff    	// #-1
    879c:	mov	w1, #0x7fff                	// #32767
    87a0:	b	850c <__multf3@@GCC_3.0+0xfc>
    87a4:	mov	w15, w11
    87a8:	mov	x13, x9
    87ac:	b	85a8 <__multf3@@GCC_3.0+0x198>
    87b0:	cmp	x1, #0xb
    87b4:	b.eq	859c <__multf3@@GCC_3.0+0x18c>  // b.none
    87b8:	mov	w15, w16
    87bc:	mov	x13, x14
    87c0:	b	85a8 <__multf3@@GCC_3.0+0x198>
    87c4:	orr	x7, x8, x1
    87c8:	cbz	x7, 88ec <__multf3@@GCC_3.0+0x4dc>
    87cc:	cbz	x8, 8a4c <__multf3@@GCC_3.0+0x63c>
    87d0:	clz	x0, x8
    87d4:	sub	x4, x0, #0xf
    87d8:	add	w7, w4, #0x3
    87dc:	mov	w5, #0x3d                  	// #61
    87e0:	sub	w5, w5, w4
    87e4:	lsl	x4, x8, x7
    87e8:	lsr	x5, x1, x5
    87ec:	orr	x8, x5, x4
    87f0:	lsl	x7, x1, x7
    87f4:	mov	x10, #0xffffffffffffc011    	// #-16367
    87f8:	mov	x11, #0x2                   	// #2
    87fc:	sub	x10, x10, x0
    8800:	b	846c <__multf3@@GCC_3.0+0x5c>
    8804:	orr	x7, x8, x1
    8808:	cbnz	x7, 88c0 <__multf3@@GCC_3.0+0x4b0>
    880c:	lsr	x5, x2, #63
    8810:	ubfx	x4, x2, #0, #48
    8814:	and	w15, w5, #0xff
    8818:	mov	x13, x5
    881c:	mov	x8, #0x0                   	// #0
    8820:	ubfx	x5, x2, #48, #15
    8824:	mov	x11, #0xa                   	// #10
    8828:	mov	x9, #0x9                   	// #9
    882c:	mov	x6, #0xb                   	// #11
    8830:	mov	x1, #0x8                   	// #8
    8834:	mov	x10, #0x7fff                	// #32767
    8838:	mov	x17, #0x2                   	// #2
    883c:	mov	w0, #0x0                   	// #0
    8840:	cbnz	w5, 8498 <__multf3@@GCC_3.0+0x88>
    8844:	nop
    8848:	orr	x5, x4, x3
    884c:	cbz	x5, 88b0 <__multf3@@GCC_3.0+0x4a0>
    8850:	cbz	x4, 8a70 <__multf3@@GCC_3.0+0x660>
    8854:	clz	x6, x4
    8858:	sub	x2, x6, #0xf
    885c:	add	w5, w2, #0x3
    8860:	mov	w9, #0x3d                  	// #61
    8864:	sub	w9, w9, w2
    8868:	lsl	x2, x4, x5
    886c:	lsr	x9, x3, x9
    8870:	orr	x4, x9, x2
    8874:	lsl	x5, x3, x5
    8878:	sub	x10, x10, x6
    887c:	mov	x3, #0xffffffffffffc011    	// #-16367
    8880:	mov	x6, #0x0                   	// #0
    8884:	add	x10, x10, x3
    8888:	b	84c4 <__multf3@@GCC_3.0+0xb4>
    888c:	mov	w1, #0x7fff                	// #32767
    8890:	mov	x4, #0x0                   	// #0
    8894:	mov	x7, #0x0                   	// #0
    8898:	b	850c <__multf3@@GCC_3.0+0xfc>
    889c:	mov	x1, x11
    88a0:	mov	x10, x2
    88a4:	mov	x4, #0x0                   	// #0
    88a8:	mov	x6, #0x2                   	// #2
    88ac:	b	84c4 <__multf3@@GCC_3.0+0xb4>
    88b0:	mov	x1, x9
    88b4:	mov	x4, #0x0                   	// #0
    88b8:	mov	x6, #0x1                   	// #1
    88bc:	b	84c4 <__multf3@@GCC_3.0+0xb4>
    88c0:	lsr	x0, x8, #47
    88c4:	mov	x7, x1
    88c8:	eor	x0, x0, #0x1
    88cc:	mov	x11, #0xe                   	// #14
    88d0:	and	w0, w0, #0x1
    88d4:	mov	x9, #0xd                   	// #13
    88d8:	mov	x6, #0xf                   	// #15
    88dc:	mov	x1, #0xc                   	// #12
    88e0:	mov	x10, #0x7fff                	// #32767
    88e4:	mov	x17, #0x3                   	// #3
    88e8:	b	8480 <__multf3@@GCC_3.0+0x70>
    88ec:	mov	x8, #0x0                   	// #0
    88f0:	mov	x11, #0x6                   	// #6
    88f4:	mov	x9, #0x5                   	// #5
    88f8:	mov	x6, #0x7                   	// #7
    88fc:	mov	x1, #0x4                   	// #4
    8900:	mov	x10, #0x0                   	// #0
    8904:	mov	x17, #0x1                   	// #1
    8908:	mov	w0, #0x0                   	// #0
    890c:	b	8480 <__multf3@@GCC_3.0+0x70>
    8910:	mov	x1, #0x1                   	// #1
    8914:	sub	x2, x1, x2
    8918:	cmp	x2, #0x74
    891c:	b.gt	89f0 <__multf3@@GCC_3.0+0x5e0>
    8920:	cmp	x2, #0x3f
    8924:	b.le	8ad0 <__multf3@@GCC_3.0+0x6c0>
    8928:	mov	w1, #0x80                  	// #128
    892c:	sub	w1, w1, w2
    8930:	cmp	x2, #0x40
    8934:	sub	w2, w2, #0x40
    8938:	lsl	x1, x4, x1
    893c:	orr	x1, x5, x1
    8940:	csel	x5, x1, x5, ne  // ne = any
    8944:	lsr	x2, x4, x2
    8948:	cmp	x5, #0x0
    894c:	cset	x7, ne  // ne = any
    8950:	orr	x7, x7, x2
    8954:	ands	x4, x7, #0x7
    8958:	b.eq	8b04 <__multf3@@GCC_3.0+0x6f4>  // b.none
    895c:	mov	x4, #0x0                   	// #0
    8960:	and	x12, x12, #0xc00000
    8964:	orr	w0, w0, #0x10
    8968:	cmp	x12, #0x400, lsl #12
    896c:	b.eq	8bd0 <__multf3@@GCC_3.0+0x7c0>  // b.none
    8970:	cmp	x12, #0x800, lsl #12
    8974:	b.eq	8bbc <__multf3@@GCC_3.0+0x7ac>  // b.none
    8978:	cbz	x12, 8b6c <__multf3@@GCC_3.0+0x75c>
    897c:	tbnz	x4, #51, 8b84 <__multf3@@GCC_3.0+0x774>
    8980:	orr	w0, w0, #0x8
    8984:	extr	x7, x4, x7, #3
    8988:	mov	w1, #0x0                   	// #0
    898c:	ubfx	x4, x4, #3, #48
    8990:	b	8a20 <__multf3@@GCC_3.0+0x610>
    8994:	cmp	x6, #0xf
    8998:	b.ne	89cc <__multf3@@GCC_3.0+0x5bc>  // b.any
    899c:	tbz	x8, #47, 89b8 <__multf3@@GCC_3.0+0x5a8>
    89a0:	cbnz	x1, 89b8 <__multf3@@GCC_3.0+0x5a8>
    89a4:	orr	x4, x4, #0x800000000000
    89a8:	mov	w11, w15
    89ac:	mov	x7, x3
    89b0:	mov	w1, #0x7fff                	// #32767
    89b4:	b	850c <__multf3@@GCC_3.0+0xfc>
    89b8:	orr	x4, x8, #0x800000000000
    89bc:	mov	w11, w16
    89c0:	and	x4, x4, #0xffffffffffff
    89c4:	mov	w1, #0x7fff                	// #32767
    89c8:	b	850c <__multf3@@GCC_3.0+0xfc>
    89cc:	cmp	x6, #0xb
    89d0:	b.ne	87b8 <__multf3@@GCC_3.0+0x3a8>  // b.any
    89d4:	mov	w11, w15
    89d8:	mov	x5, x3
    89dc:	orr	x4, x4, #0x800000000000
    89e0:	mov	x7, x5
    89e4:	and	x4, x4, #0xffffffffffff
    89e8:	mov	w1, #0x7fff                	// #32767
    89ec:	b	850c <__multf3@@GCC_3.0+0xfc>
    89f0:	orr	x7, x5, x4
    89f4:	cbz	x7, 8a14 <__multf3@@GCC_3.0+0x604>
    89f8:	and	x12, x12, #0xc00000
    89fc:	orr	w0, w0, #0x10
    8a00:	cmp	x12, #0x400, lsl #12
    8a04:	sub	x7, x1, x9
    8a08:	b.eq	8a14 <__multf3@@GCC_3.0+0x604>  // b.none
    8a0c:	cmp	x12, #0x800, lsl #12
    8a10:	csel	x7, x9, xzr, eq  // eq = none
    8a14:	orr	w0, w0, #0x8
    8a18:	mov	w1, #0x0                   	// #0
    8a1c:	mov	x4, #0x0                   	// #0
    8a20:	mov	x3, #0x0                   	// #0
    8a24:	fmov	d0, x7
    8a28:	bfxil	x3, x4, #0, #48
    8a2c:	bfi	x3, x1, #48, #15
    8a30:	bfi	x3, x11, #63, #1
    8a34:	fmov	v0.d[1], x3
    8a38:	str	q0, [sp, #48]
    8a3c:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    8a40:	ldr	q0, [sp, #48]
    8a44:	ldp	x29, x30, [sp], #80
    8a48:	ret
    8a4c:	clz	x10, x1
    8a50:	add	x4, x10, #0x31
    8a54:	add	x0, x10, #0x40
    8a58:	cmp	x4, #0x3c
    8a5c:	b.le	87d8 <__multf3@@GCC_3.0+0x3c8>
    8a60:	sub	w4, w4, #0x3d
    8a64:	mov	x7, #0x0                   	// #0
    8a68:	lsl	x8, x1, x4
    8a6c:	b	87f4 <__multf3@@GCC_3.0+0x3e4>
    8a70:	clz	x6, x3
    8a74:	add	x2, x6, #0x31
    8a78:	add	x6, x6, #0x40
    8a7c:	cmp	x2, #0x3c
    8a80:	b.le	885c <__multf3@@GCC_3.0+0x44c>
    8a84:	sub	w2, w2, #0x3d
    8a88:	mov	x5, #0x0                   	// #0
    8a8c:	lsl	x4, x3, x2
    8a90:	b	8878 <__multf3@@GCC_3.0+0x468>
    8a94:	and	x7, x12, #0xc00000
    8a98:	cmp	x7, #0x400, lsl #12
    8a9c:	b.eq	8ba0 <__multf3@@GCC_3.0+0x790>  // b.none
    8aa0:	cmp	x7, #0x800, lsl #12
    8aa4:	b.eq	8b38 <__multf3@@GCC_3.0+0x728>  // b.none
    8aa8:	cbz	x7, 8b1c <__multf3@@GCC_3.0+0x70c>
    8aac:	mov	x4, #0xffffffffffff        	// #281474976710655
    8ab0:	mov	x7, #0xffffffffffffffff    	// #-1
    8ab4:	mov	w2, #0x14                  	// #20
    8ab8:	orr	w0, w0, w2
    8abc:	b	8a20 <__multf3@@GCC_3.0+0x610>
    8ac0:	mov	x18, x10
    8ac4:	ldp	x19, x20, [sp, #16]
    8ac8:	ldp	x21, x22, [sp, #32]
    8acc:	b	8730 <__multf3@@GCC_3.0+0x320>
    8ad0:	mov	w1, #0x40                  	// #64
    8ad4:	sub	w1, w1, w2
    8ad8:	lsr	x3, x5, x2
    8adc:	lsl	x5, x5, x1
    8ae0:	cmp	x5, #0x0
    8ae4:	lsl	x7, x4, x1
    8ae8:	cset	x1, ne  // ne = any
    8aec:	orr	x7, x7, x3
    8af0:	lsr	x4, x4, x2
    8af4:	orr	x7, x7, x1
    8af8:	tst	x7, #0x7
    8afc:	b.ne	8960 <__multf3@@GCC_3.0+0x550>  // b.any
    8b00:	tbnz	x4, #51, 8bdc <__multf3@@GCC_3.0+0x7cc>
    8b04:	mov	w1, #0x0                   	// #0
    8b08:	extr	x7, x4, x7, #3
    8b0c:	ubfx	x4, x4, #3, #48
    8b10:	tbz	w12, #11, 850c <__multf3@@GCC_3.0+0xfc>
    8b14:	orr	w0, w0, #0x8
    8b18:	b	8a20 <__multf3@@GCC_3.0+0x610>
    8b1c:	mov	w1, #0x7fff                	// #32767
    8b20:	mov	x4, #0x0                   	// #0
    8b24:	b	8ab4 <__multf3@@GCC_3.0+0x6a4>
    8b28:	cbz	x9, 8764 <__multf3@@GCC_3.0+0x354>
    8b2c:	adds	x5, x5, #0x8
    8b30:	cinc	x4, x4, cs  // cs = hs, nlast
    8b34:	b	8764 <__multf3@@GCC_3.0+0x354>
    8b38:	cmp	x9, #0x0
    8b3c:	mov	w2, #0x7fff                	// #32767
    8b40:	mov	x4, #0xffffffffffff        	// #281474976710655
    8b44:	csel	w1, w1, w2, eq  // eq = none
    8b48:	csel	x4, x4, xzr, eq  // eq = none
    8b4c:	csetm	x7, eq  // eq = none
    8b50:	b	8ab4 <__multf3@@GCC_3.0+0x6a4>
    8b54:	and	x1, x5, #0xf
    8b58:	cmp	x1, #0x4
    8b5c:	b.eq	8764 <__multf3@@GCC_3.0+0x354>  // b.none
    8b60:	adds	x5, x5, #0x4
    8b64:	cinc	x4, x4, cs  // cs = hs, nlast
    8b68:	b	8764 <__multf3@@GCC_3.0+0x354>
    8b6c:	and	x1, x7, #0xf
    8b70:	cmp	x1, #0x4
    8b74:	b.eq	8b80 <__multf3@@GCC_3.0+0x770>  // b.none
    8b78:	adds	x7, x7, #0x4
    8b7c:	cinc	x4, x4, cs  // cs = hs, nlast
    8b80:	tbz	x4, #51, 8980 <__multf3@@GCC_3.0+0x570>
    8b84:	orr	w0, w0, #0x8
    8b88:	mov	w1, #0x1                   	// #1
    8b8c:	mov	x4, #0x0                   	// #0
    8b90:	mov	x7, #0x0                   	// #0
    8b94:	b	8a20 <__multf3@@GCC_3.0+0x610>
    8b98:	cbnz	x9, 8764 <__multf3@@GCC_3.0+0x354>
    8b9c:	b	8b2c <__multf3@@GCC_3.0+0x71c>
    8ba0:	cmp	x9, #0x0
    8ba4:	mov	w2, #0x7fff                	// #32767
    8ba8:	mov	x4, #0xffffffffffff        	// #281474976710655
    8bac:	csel	w1, w1, w2, ne  // ne = any
    8bb0:	csel	x4, x4, xzr, ne  // ne = any
    8bb4:	csetm	x7, ne  // ne = any
    8bb8:	b	8ab4 <__multf3@@GCC_3.0+0x6a4>
    8bbc:	cbz	x9, 8b80 <__multf3@@GCC_3.0+0x770>
    8bc0:	adds	x7, x7, #0x8
    8bc4:	cinc	x4, x4, cs  // cs = hs, nlast
    8bc8:	tbnz	x4, #51, 8b84 <__multf3@@GCC_3.0+0x774>
    8bcc:	b	8980 <__multf3@@GCC_3.0+0x570>
    8bd0:	cbz	x9, 8bc0 <__multf3@@GCC_3.0+0x7b0>
    8bd4:	tbnz	x4, #51, 8b84 <__multf3@@GCC_3.0+0x774>
    8bd8:	b	8980 <__multf3@@GCC_3.0+0x570>
    8bdc:	orr	w0, w0, #0x10
    8be0:	b	8b84 <__multf3@@GCC_3.0+0x774>
    8be4:	mov	w11, w15
    8be8:	mov	w1, #0x7fff                	// #32767
    8bec:	mov	x4, #0x0                   	// #0
    8bf0:	mov	x7, #0x0                   	// #0
    8bf4:	b	850c <__multf3@@GCC_3.0+0xfc>

0000000000008bf8 <__negtf2@@GCC_3.0>:
    8bf8:	sub	sp, sp, #0x10
    8bfc:	mov	x1, #0x0                   	// #0
    8c00:	str	q0, [sp]
    8c04:	ldp	x3, x2, [sp]
    8c08:	add	sp, sp, #0x10
    8c0c:	mov	x0, x3
    8c10:	lsr	x3, x2, #48
    8c14:	bfxil	x1, x2, #0, #48
    8c18:	fmov	d0, x0
    8c1c:	eor	w2, w3, #0x8000
    8c20:	bfi	x1, x2, #48, #16
    8c24:	fmov	v0.d[1], x1
    8c28:	ret
    8c2c:	nop

0000000000008c30 <__subtf3@@GCC_3.0>:
    8c30:	stp	x29, x30, [sp, #-48]!
    8c34:	mov	x29, sp
    8c38:	str	q0, [sp, #16]
    8c3c:	str	q1, [sp, #32]
    8c40:	ldp	x6, x1, [sp, #16]
    8c44:	ldp	x0, x2, [sp, #32]
    8c48:	mrs	x13, fpcr
    8c4c:	mov	x9, x0
    8c50:	ubfx	x0, x2, #48, #15
    8c54:	lsr	x4, x1, #63
    8c58:	ubfx	x7, x1, #48, #15
    8c5c:	ubfiz	x3, x1, #3, #48
    8c60:	mov	x12, x0
    8c64:	lsr	x5, x2, #63
    8c68:	ubfiz	x2, x2, #3, #48
    8c6c:	mov	x11, x4
    8c70:	and	w8, w4, #0xff
    8c74:	mov	x14, x4
    8c78:	sub	w0, w7, w0
    8c7c:	mov	x1, x7
    8c80:	orr	x3, x3, x6, lsr #61
    8c84:	mov	x7, #0x7fff                	// #32767
    8c88:	and	w5, w5, #0xff
    8c8c:	cmp	x12, x7
    8c90:	orr	x2, x2, x9, lsr #61
    8c94:	lsl	x4, x6, #3
    8c98:	lsl	x10, x9, #3
    8c9c:	b.eq	8e0c <__subtf3@@GCC_3.0+0x1dc>  // b.none
    8ca0:	eor	w5, w5, #0x1
    8ca4:	and	x15, x5, #0xff
    8ca8:	cmp	x11, w5, uxtb
    8cac:	b.eq	8e78 <__subtf3@@GCC_3.0+0x248>  // b.none
    8cb0:	cmp	w0, #0x0
    8cb4:	b.le	8e28 <__subtf3@@GCC_3.0+0x1f8>
    8cb8:	cbnz	x12, 8f6c <__subtf3@@GCC_3.0+0x33c>
    8cbc:	orr	x5, x2, x10
    8cc0:	cbz	x5, 915c <__subtf3@@GCC_3.0+0x52c>
    8cc4:	subs	w0, w0, #0x1
    8cc8:	b.eq	9450 <__subtf3@@GCC_3.0+0x820>  // b.none
    8ccc:	mov	x5, #0x7fff                	// #32767
    8cd0:	cmp	x1, x5
    8cd4:	b.eq	9130 <__subtf3@@GCC_3.0+0x500>  // b.none
    8cd8:	cmp	w0, #0x74
    8cdc:	b.gt	914c <__subtf3@@GCC_3.0+0x51c>
    8ce0:	cmp	w0, #0x3f
    8ce4:	b.gt	92b0 <__subtf3@@GCC_3.0+0x680>
    8ce8:	mov	w5, #0x40                  	// #64
    8cec:	sub	w5, w5, w0
    8cf0:	lsr	x7, x10, x0
    8cf4:	lsl	x10, x10, x5
    8cf8:	cmp	x10, #0x0
    8cfc:	lsl	x5, x2, x5
    8d00:	cset	x6, ne  // ne = any
    8d04:	orr	x5, x5, x7
    8d08:	lsr	x2, x2, x0
    8d0c:	orr	x5, x5, x6
    8d10:	sub	x3, x3, x2
    8d14:	subs	x4, x4, x5
    8d18:	sbc	x3, x3, xzr
    8d1c:	and	x6, x3, #0x7ffffffffffff
    8d20:	tbz	x3, #51, 8ef8 <__subtf3@@GCC_3.0+0x2c8>
    8d24:	cbz	x6, 9114 <__subtf3@@GCC_3.0+0x4e4>
    8d28:	clz	x0, x6
    8d2c:	sub	w0, w0, #0xc
    8d30:	neg	w3, w0
    8d34:	lsl	x2, x6, x0
    8d38:	lsl	x6, x4, x0
    8d3c:	lsr	x4, x4, x3
    8d40:	orr	x3, x4, x2
    8d44:	cmp	x1, w0, sxtw
    8d48:	sxtw	x2, w0
    8d4c:	b.gt	90f4 <__subtf3@@GCC_3.0+0x4c4>
    8d50:	sub	w1, w0, w1
    8d54:	add	w0, w1, #0x1
    8d58:	cmp	w0, #0x3f
    8d5c:	b.gt	9278 <__subtf3@@GCC_3.0+0x648>
    8d60:	mov	w1, #0x40                  	// #64
    8d64:	sub	w1, w1, w0
    8d68:	lsr	x2, x6, x0
    8d6c:	lsl	x6, x6, x1
    8d70:	cmp	x6, #0x0
    8d74:	lsl	x4, x3, x1
    8d78:	cset	x1, ne  // ne = any
    8d7c:	orr	x4, x4, x2
    8d80:	lsr	x3, x3, x0
    8d84:	orr	x4, x4, x1
    8d88:	orr	x7, x4, x3
    8d8c:	cbz	x7, 8f0c <__subtf3@@GCC_3.0+0x2dc>
    8d90:	and	x0, x4, #0x7
    8d94:	mov	x1, #0x0                   	// #0
    8d98:	mov	w5, #0x1                   	// #1
    8d9c:	cbz	x0, 9180 <__subtf3@@GCC_3.0+0x550>
    8da0:	and	x2, x13, #0xc00000
    8da4:	cmp	x2, #0x400, lsl #12
    8da8:	b.eq	90cc <__subtf3@@GCC_3.0+0x49c>  // b.none
    8dac:	cmp	x2, #0x800, lsl #12
    8db0:	b.eq	90ac <__subtf3@@GCC_3.0+0x47c>  // b.none
    8db4:	cbz	x2, 90d8 <__subtf3@@GCC_3.0+0x4a8>
    8db8:	and	x2, x3, #0x8000000000000
    8dbc:	mov	w0, #0x10                  	// #16
    8dc0:	cbz	w5, 8dc8 <__subtf3@@GCC_3.0+0x198>
    8dc4:	orr	w0, w0, #0x8
    8dc8:	cbz	x2, 9080 <__subtf3@@GCC_3.0+0x450>
    8dcc:	add	x1, x1, #0x1
    8dd0:	mov	x2, #0x7fff                	// #32767
    8dd4:	cmp	x1, x2
    8dd8:	b.eq	8fc4 <__subtf3@@GCC_3.0+0x394>  // b.none
    8ddc:	ubfx	x7, x3, #3, #48
    8de0:	extr	x6, x3, x4, #3
    8de4:	and	w1, w1, #0x7fff
    8de8:	mov	x3, #0x0                   	// #0
    8dec:	orr	w1, w1, w8, lsl #15
    8df0:	bfxil	x3, x7, #0, #48
    8df4:	fmov	d0, x6
    8df8:	bfi	x3, x1, #48, #16
    8dfc:	fmov	v0.d[1], x3
    8e00:	cbnz	w0, 9020 <__subtf3@@GCC_3.0+0x3f0>
    8e04:	ldp	x29, x30, [sp], #48
    8e08:	ret
    8e0c:	orr	x7, x2, x10
    8e10:	cbz	x7, 8ca0 <__subtf3@@GCC_3.0+0x70>
    8e14:	cmp	x11, w5, uxtb
    8e18:	and	x15, x5, #0xff
    8e1c:	b.eq	9034 <__subtf3@@GCC_3.0+0x404>  // b.none
    8e20:	cmp	w0, #0x0
    8e24:	b.gt	8f6c <__subtf3@@GCC_3.0+0x33c>
    8e28:	cbz	w0, 8f24 <__subtf3@@GCC_3.0+0x2f4>
    8e2c:	cbnz	x1, 920c <__subtf3@@GCC_3.0+0x5dc>
    8e30:	orr	x1, x3, x4
    8e34:	cbz	x1, 8ed4 <__subtf3@@GCC_3.0+0x2a4>
    8e38:	cmn	w0, #0x1
    8e3c:	b.eq	95c4 <__subtf3@@GCC_3.0+0x994>  // b.none
    8e40:	mov	x1, #0x7fff                	// #32767
    8e44:	mvn	w0, w0
    8e48:	cmp	x12, x1
    8e4c:	b.ne	9220 <__subtf3@@GCC_3.0+0x5f0>  // b.any
    8e50:	orr	x0, x2, x10
    8e54:	cbnz	x0, 9514 <__subtf3@@GCC_3.0+0x8e4>
    8e58:	and	x11, x5, #0xff
    8e5c:	nop
    8e60:	mov	x2, #0x0                   	// #0
    8e64:	fmov	d0, x2
    8e68:	lsl	x0, x11, #63
    8e6c:	orr	x3, x0, #0x7fff000000000000
    8e70:	fmov	v0.d[1], x3
    8e74:	b	8e04 <__subtf3@@GCC_3.0+0x1d4>
    8e78:	cmp	w0, #0x0
    8e7c:	b.le	9034 <__subtf3@@GCC_3.0+0x404>
    8e80:	cbz	x12, 8f74 <__subtf3@@GCC_3.0+0x344>
    8e84:	orr	x2, x2, #0x8000000000000
    8e88:	mov	x5, #0x7fff                	// #32767
    8e8c:	cmp	x1, x5
    8e90:	b.eq	9130 <__subtf3@@GCC_3.0+0x500>  // b.none
    8e94:	cmp	w0, #0x74
    8e98:	b.gt	9260 <__subtf3@@GCC_3.0+0x630>
    8e9c:	cmp	w0, #0x3f
    8ea0:	b.gt	9360 <__subtf3@@GCC_3.0+0x730>
    8ea4:	mov	w5, #0x40                  	// #64
    8ea8:	sub	w5, w5, w0
    8eac:	lsr	x7, x10, x0
    8eb0:	lsl	x10, x10, x5
    8eb4:	cmp	x10, #0x0
    8eb8:	lsl	x5, x2, x5
    8ebc:	cset	x6, ne  // ne = any
    8ec0:	orr	x5, x5, x7
    8ec4:	lsr	x2, x2, x0
    8ec8:	orr	x0, x5, x6
    8ecc:	add	x3, x3, x2
    8ed0:	b	926c <__subtf3@@GCC_3.0+0x63c>
    8ed4:	mov	x0, #0x7fff                	// #32767
    8ed8:	cmp	x12, x0
    8edc:	b.eq	95e0 <__subtf3@@GCC_3.0+0x9b0>  // b.none
    8ee0:	mov	w8, w5
    8ee4:	mov	x3, x2
    8ee8:	mov	x4, x10
    8eec:	mov	x1, x12
    8ef0:	mov	x14, x15
    8ef4:	nop
    8ef8:	orr	x7, x4, x3
    8efc:	and	x0, x4, #0x7
    8f00:	mov	w5, #0x0                   	// #0
    8f04:	cbnz	x1, 8d9c <__subtf3@@GCC_3.0+0x16c>
    8f08:	cbnz	x7, 8d90 <__subtf3@@GCC_3.0+0x160>
    8f0c:	mov	x6, #0x0                   	// #0
    8f10:	mov	x1, #0x0                   	// #0
    8f14:	mov	w0, #0x0                   	// #0
    8f18:	and	x7, x7, #0xffffffffffff
    8f1c:	and	w1, w1, #0x7fff
    8f20:	b	8de8 <__subtf3@@GCC_3.0+0x1b8>
    8f24:	add	x7, x1, #0x1
    8f28:	tst	x7, #0x7ffe
    8f2c:	b.ne	91dc <__subtf3@@GCC_3.0+0x5ac>  // b.any
    8f30:	orr	x11, x3, x4
    8f34:	orr	x7, x2, x10
    8f38:	cbnz	x1, 93b8 <__subtf3@@GCC_3.0+0x788>
    8f3c:	cbz	x11, 94a8 <__subtf3@@GCC_3.0+0x878>
    8f40:	cbz	x7, 94bc <__subtf3@@GCC_3.0+0x88c>
    8f44:	subs	x9, x4, x10
    8f48:	cmp	x4, x10
    8f4c:	sbc	x6, x3, x2
    8f50:	tbz	x6, #51, 9610 <__subtf3@@GCC_3.0+0x9e0>
    8f54:	subs	x4, x10, x4
    8f58:	mov	w8, w5
    8f5c:	sbc	x3, x2, x3
    8f60:	mov	x14, x15
    8f64:	orr	x7, x4, x3
    8f68:	b	8d8c <__subtf3@@GCC_3.0+0x15c>
    8f6c:	orr	x2, x2, #0x8000000000000
    8f70:	b	8ccc <__subtf3@@GCC_3.0+0x9c>
    8f74:	orr	x5, x2, x10
    8f78:	cbz	x5, 915c <__subtf3@@GCC_3.0+0x52c>
    8f7c:	subs	w0, w0, #0x1
    8f80:	b.ne	8e88 <__subtf3@@GCC_3.0+0x258>  // b.any
    8f84:	adds	x4, x4, x10
    8f88:	adc	x3, x2, x3
    8f8c:	nop
    8f90:	tbz	x3, #51, 8ef8 <__subtf3@@GCC_3.0+0x2c8>
    8f94:	add	x1, x1, #0x1
    8f98:	mov	x0, #0x7fff                	// #32767
    8f9c:	cmp	x1, x0
    8fa0:	b.eq	945c <__subtf3@@GCC_3.0+0x82c>  // b.none
    8fa4:	and	x0, x4, #0x1
    8fa8:	and	x2, x3, #0xfff7ffffffffffff
    8fac:	orr	x4, x0, x4, lsr #1
    8fb0:	mov	w5, #0x0                   	// #0
    8fb4:	orr	x4, x4, x3, lsl #63
    8fb8:	lsr	x3, x2, #1
    8fbc:	and	x0, x4, #0x7
    8fc0:	b	8d9c <__subtf3@@GCC_3.0+0x16c>
    8fc4:	and	x2, x13, #0xc00000
    8fc8:	cbz	x2, 9000 <__subtf3@@GCC_3.0+0x3d0>
    8fcc:	cmp	x2, #0x400, lsl #12
    8fd0:	b.eq	8ffc <__subtf3@@GCC_3.0+0x3cc>  // b.none
    8fd4:	cmp	x2, #0x800, lsl #12
    8fd8:	and	w14, w14, #0x1
    8fdc:	csel	w14, w14, wzr, eq  // eq = none
    8fe0:	cbnz	w14, 9000 <__subtf3@@GCC_3.0+0x3d0>
    8fe4:	mov	w1, #0x14                  	// #20
    8fe8:	mov	x6, #0xffffffffffffffff    	// #-1
    8fec:	orr	w0, w0, w1
    8ff0:	mov	x7, #0x1fffffffffffffff    	// #2305843009213693951
    8ff4:	mov	x1, #0x7ffe                	// #32766
    8ff8:	b	8f18 <__subtf3@@GCC_3.0+0x2e8>
    8ffc:	cbnz	x14, 8fe4 <__subtf3@@GCC_3.0+0x3b4>
    9000:	mov	w1, #0x14                  	// #20
    9004:	and	x11, x8, #0xff
    9008:	orr	w0, w0, w1
    900c:	mov	x2, #0x0                   	// #0
    9010:	fmov	d0, x2
    9014:	lsl	x11, x11, #63
    9018:	orr	x3, x11, #0x7fff000000000000
    901c:	fmov	v0.d[1], x3
    9020:	str	q0, [sp, #16]
    9024:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9028:	ldr	q0, [sp, #16]
    902c:	ldp	x29, x30, [sp], #48
    9030:	ret
    9034:	cbz	w0, 919c <__subtf3@@GCC_3.0+0x56c>
    9038:	cbnz	x1, 9300 <__subtf3@@GCC_3.0+0x6d0>
    903c:	orr	x1, x3, x4
    9040:	cbz	x1, 955c <__subtf3@@GCC_3.0+0x92c>
    9044:	cmn	w0, #0x1
    9048:	b.eq	9690 <__subtf3@@GCC_3.0+0xa60>  // b.none
    904c:	mov	x1, #0x7fff                	// #32767
    9050:	mvn	w0, w0
    9054:	cmp	x12, x1
    9058:	b.ne	9314 <__subtf3@@GCC_3.0+0x6e4>  // b.any
    905c:	orr	x0, x2, x10
    9060:	cbz	x0, 8e60 <__subtf3@@GCC_3.0+0x230>
    9064:	lsr	x0, x2, #50
    9068:	mov	x4, x10
    906c:	eor	x0, x0, #0x1
    9070:	mov	x3, x2
    9074:	and	w0, w0, #0x1
    9078:	mov	x1, #0x7fff                	// #32767
    907c:	nop
    9080:	mov	x2, #0x7fff                	// #32767
    9084:	extr	x6, x3, x4, #3
    9088:	lsr	x7, x3, #3
    908c:	cmp	x1, x2
    9090:	b.ne	8f18 <__subtf3@@GCC_3.0+0x2e8>  // b.any
    9094:	orr	x1, x7, x6
    9098:	cbz	x1, 9714 <__subtf3@@GCC_3.0+0xae4>
    909c:	orr	x7, x7, #0x800000000000
    90a0:	mov	w1, #0x7fff                	// #32767
    90a4:	and	x7, x7, #0xffffffffffff
    90a8:	b	8de8 <__subtf3@@GCC_3.0+0x1b8>
    90ac:	mov	w0, #0x10                  	// #16
    90b0:	cbz	x14, 90bc <__subtf3@@GCC_3.0+0x48c>
    90b4:	adds	x4, x4, #0x8
    90b8:	cinc	x3, x3, cs  // cs = hs, nlast
    90bc:	and	x2, x3, #0x8000000000000
    90c0:	cbz	w5, 8dc8 <__subtf3@@GCC_3.0+0x198>
    90c4:	orr	w0, w0, #0x8
    90c8:	b	8dc8 <__subtf3@@GCC_3.0+0x198>
    90cc:	mov	w0, #0x10                  	// #16
    90d0:	cbnz	x14, 90bc <__subtf3@@GCC_3.0+0x48c>
    90d4:	b	90b4 <__subtf3@@GCC_3.0+0x484>
    90d8:	and	x2, x4, #0xf
    90dc:	mov	w0, #0x10                  	// #16
    90e0:	cmp	x2, #0x4
    90e4:	b.eq	90bc <__subtf3@@GCC_3.0+0x48c>  // b.none
    90e8:	adds	x4, x4, #0x4
    90ec:	cinc	x3, x3, cs  // cs = hs, nlast
    90f0:	b	90bc <__subtf3@@GCC_3.0+0x48c>
    90f4:	mov	x4, x6
    90f8:	and	x3, x3, #0xfff7ffffffffffff
    90fc:	sub	x1, x1, x2
    9100:	orr	x7, x4, x3
    9104:	and	x0, x4, #0x7
    9108:	mov	w5, #0x0                   	// #0
    910c:	cbz	x1, 8f08 <__subtf3@@GCC_3.0+0x2d8>
    9110:	b	8d9c <__subtf3@@GCC_3.0+0x16c>
    9114:	clz	x3, x4
    9118:	add	w0, w3, #0x34
    911c:	cmp	w0, #0x3f
    9120:	b.le	8d30 <__subtf3@@GCC_3.0+0x100>
    9124:	sub	w3, w3, #0xc
    9128:	lsl	x3, x4, x3
    912c:	b	8d44 <__subtf3@@GCC_3.0+0x114>
    9130:	orr	x0, x3, x4
    9134:	cbz	x0, 8e60 <__subtf3@@GCC_3.0+0x230>
    9138:	lsr	x0, x3, #50
    913c:	mov	x1, #0x7fff                	// #32767
    9140:	eor	x0, x0, #0x1
    9144:	and	w0, w0, #0x1
    9148:	b	9080 <__subtf3@@GCC_3.0+0x450>
    914c:	orr	x2, x2, x10
    9150:	cmp	x2, #0x0
    9154:	cset	x5, ne  // ne = any
    9158:	b	8d14 <__subtf3@@GCC_3.0+0xe4>
    915c:	mov	x0, #0x7fff                	// #32767
    9160:	cmp	x1, x0
    9164:	b.ne	8ef8 <__subtf3@@GCC_3.0+0x2c8>  // b.any
    9168:	orr	x0, x3, x4
    916c:	cbnz	x0, 9138 <__subtf3@@GCC_3.0+0x508>
    9170:	mov	x6, #0x0                   	// #0
    9174:	mov	x7, #0x0                   	// #0
    9178:	mov	w0, #0x0                   	// #0
    917c:	b	9094 <__subtf3@@GCC_3.0+0x464>
    9180:	and	x2, x3, #0x8000000000000
    9184:	mov	w0, #0x0                   	// #0
    9188:	cbz	w5, 8dc8 <__subtf3@@GCC_3.0+0x198>
    918c:	mov	w0, #0x0                   	// #0
    9190:	tbz	w13, #11, 8dc8 <__subtf3@@GCC_3.0+0x198>
    9194:	orr	w0, w0, #0x8
    9198:	b	8dc8 <__subtf3@@GCC_3.0+0x198>
    919c:	add	x7, x1, #0x1
    91a0:	tst	x7, #0x7ffe
    91a4:	b.ne	938c <__subtf3@@GCC_3.0+0x75c>  // b.any
    91a8:	orr	x11, x3, x4
    91ac:	cbnz	x1, 9534 <__subtf3@@GCC_3.0+0x904>
    91b0:	orr	x7, x2, x10
    91b4:	cbz	x11, 958c <__subtf3@@GCC_3.0+0x95c>
    91b8:	cbz	x7, 94bc <__subtf3@@GCC_3.0+0x88c>
    91bc:	adds	x4, x4, x10
    91c0:	adc	x3, x2, x3
    91c4:	tbz	x3, #51, 8f64 <__subtf3@@GCC_3.0+0x334>
    91c8:	and	x3, x3, #0xfff7ffffffffffff
    91cc:	and	x0, x4, #0x7
    91d0:	mov	w5, #0x0                   	// #0
    91d4:	mov	x1, #0x1                   	// #1
    91d8:	b	8d9c <__subtf3@@GCC_3.0+0x16c>
    91dc:	subs	x9, x4, x10
    91e0:	cmp	x4, x10
    91e4:	sbc	x6, x3, x2
    91e8:	tbnz	x6, #51, 93e8 <__subtf3@@GCC_3.0+0x7b8>
    91ec:	orr	x7, x9, x6
    91f0:	cbnz	x7, 94c8 <__subtf3@@GCC_3.0+0x898>
    91f4:	and	x13, x13, #0xc00000
    91f8:	mov	x6, #0x0                   	// #0
    91fc:	cmp	x13, #0x800, lsl #12
    9200:	mov	x1, #0x0                   	// #0
    9204:	cset	w8, eq  // eq = none
    9208:	b	8f18 <__subtf3@@GCC_3.0+0x2e8>
    920c:	mov	x1, #0x7fff                	// #32767
    9210:	neg	w0, w0
    9214:	orr	x3, x3, #0x8000000000000
    9218:	cmp	x12, x1
    921c:	b.eq	8e50 <__subtf3@@GCC_3.0+0x220>  // b.none
    9220:	cmp	w0, #0x74
    9224:	b.gt	92dc <__subtf3@@GCC_3.0+0x6ac>
    9228:	cmp	w0, #0x3f
    922c:	b.gt	94e0 <__subtf3@@GCC_3.0+0x8b0>
    9230:	mov	w1, #0x40                  	// #64
    9234:	sub	w1, w1, w0
    9238:	lsr	x6, x4, x0
    923c:	lsl	x4, x4, x1
    9240:	cmp	x4, #0x0
    9244:	lsl	x4, x3, x1
    9248:	cset	x1, ne  // ne = any
    924c:	orr	x4, x4, x6
    9250:	lsr	x0, x3, x0
    9254:	orr	x4, x4, x1
    9258:	sub	x2, x2, x0
    925c:	b	92e8 <__subtf3@@GCC_3.0+0x6b8>
    9260:	orr	x2, x2, x10
    9264:	cmp	x2, #0x0
    9268:	cset	x0, ne  // ne = any
    926c:	adds	x4, x0, x4
    9270:	cinc	x3, x3, cs  // cs = hs, nlast
    9274:	b	8f90 <__subtf3@@GCC_3.0+0x360>
    9278:	mov	w2, #0x80                  	// #128
    927c:	sub	w2, w2, w0
    9280:	cmp	w0, #0x40
    9284:	sub	w4, w1, #0x3f
    9288:	lsl	x0, x3, x2
    928c:	orr	x0, x6, x0
    9290:	csel	x6, x0, x6, ne  // ne = any
    9294:	lsr	x4, x3, x4
    9298:	cmp	x6, #0x0
    929c:	mov	x3, #0x0                   	// #0
    92a0:	cset	x0, ne  // ne = any
    92a4:	orr	x4, x0, x4
    92a8:	mov	x7, x4
    92ac:	b	8d8c <__subtf3@@GCC_3.0+0x15c>
    92b0:	mov	w6, #0x80                  	// #128
    92b4:	sub	w6, w6, w0
    92b8:	subs	w0, w0, #0x40
    92bc:	lsl	x6, x2, x6
    92c0:	orr	x6, x10, x6
    92c4:	csel	x10, x6, x10, ne  // ne = any
    92c8:	lsr	x2, x2, x0
    92cc:	cmp	x10, #0x0
    92d0:	cset	x5, ne  // ne = any
    92d4:	orr	x5, x5, x2
    92d8:	b	8d14 <__subtf3@@GCC_3.0+0xe4>
    92dc:	orr	x3, x3, x4
    92e0:	cmp	x3, #0x0
    92e4:	cset	x4, ne  // ne = any
    92e8:	subs	x4, x10, x4
    92ec:	mov	w8, w5
    92f0:	sbc	x3, x2, xzr
    92f4:	mov	x1, x12
    92f8:	mov	x14, x15
    92fc:	b	8d1c <__subtf3@@GCC_3.0+0xec>
    9300:	mov	x1, #0x7fff                	// #32767
    9304:	neg	w0, w0
    9308:	orr	x3, x3, #0x8000000000000
    930c:	cmp	x12, x1
    9310:	b.eq	905c <__subtf3@@GCC_3.0+0x42c>  // b.none
    9314:	cmp	w0, #0x74
    9318:	b.gt	94d0 <__subtf3@@GCC_3.0+0x8a0>
    931c:	cmp	w0, #0x3f
    9320:	b.gt	9598 <__subtf3@@GCC_3.0+0x968>
    9324:	mov	w1, #0x40                  	// #64
    9328:	sub	w1, w1, w0
    932c:	lsr	x5, x4, x0
    9330:	lsl	x4, x4, x1
    9334:	cmp	x4, #0x0
    9338:	lsl	x4, x3, x1
    933c:	cset	x1, ne  // ne = any
    9340:	orr	x4, x4, x5
    9344:	lsr	x0, x3, x0
    9348:	orr	x4, x4, x1
    934c:	add	x2, x2, x0
    9350:	adds	x4, x4, x10
    9354:	mov	x1, x12
    9358:	cinc	x3, x2, cs  // cs = hs, nlast
    935c:	b	8f90 <__subtf3@@GCC_3.0+0x360>
    9360:	mov	w5, #0x80                  	// #128
    9364:	sub	w5, w5, w0
    9368:	subs	w0, w0, #0x40
    936c:	lsl	x5, x2, x5
    9370:	orr	x5, x10, x5
    9374:	csel	x10, x5, x10, ne  // ne = any
    9378:	lsr	x2, x2, x0
    937c:	cmp	x10, #0x0
    9380:	cset	x0, ne  // ne = any
    9384:	orr	x0, x0, x2
    9388:	b	926c <__subtf3@@GCC_3.0+0x63c>
    938c:	mov	x0, #0x7fff                	// #32767
    9390:	cmp	x7, x0
    9394:	b.eq	945c <__subtf3@@GCC_3.0+0x82c>  // b.none
    9398:	adds	x4, x4, x10
    939c:	mov	x1, x7
    93a0:	adc	x3, x2, x3
    93a4:	mov	w5, #0x0                   	// #0
    93a8:	ubfx	x0, x4, #1, #3
    93ac:	extr	x4, x3, x4, #1
    93b0:	lsr	x3, x3, #1
    93b4:	b	8d9c <__subtf3@@GCC_3.0+0x16c>
    93b8:	mov	x13, #0x7fff                	// #32767
    93bc:	cmp	x1, x13
    93c0:	b.eq	9400 <__subtf3@@GCC_3.0+0x7d0>  // b.none
    93c4:	cmp	x12, x13
    93c8:	b.eq	95f8 <__subtf3@@GCC_3.0+0x9c8>  // b.none
    93cc:	cbnz	x11, 9418 <__subtf3@@GCC_3.0+0x7e8>
    93d0:	cbnz	x7, 9608 <__subtf3@@GCC_3.0+0x9d8>
    93d4:	mov	w8, #0x0                   	// #0
    93d8:	mov	x6, #0xffffffffffffffff    	// #-1
    93dc:	mov	x7, #0xffffffffffff        	// #281474976710655
    93e0:	mov	w0, #0x1                   	// #1
    93e4:	b	909c <__subtf3@@GCC_3.0+0x46c>
    93e8:	cmp	x10, x4
    93ec:	mov	w8, w5
    93f0:	sbc	x6, x2, x3
    93f4:	sub	x4, x10, x4
    93f8:	mov	x14, x15
    93fc:	b	8d24 <__subtf3@@GCC_3.0+0xf4>
    9400:	cbz	x11, 95f0 <__subtf3@@GCC_3.0+0x9c0>
    9404:	lsr	x0, x3, #50
    9408:	cmp	x12, x1
    940c:	eor	x0, x0, #0x1
    9410:	and	w0, w0, #0x1
    9414:	b.eq	95f8 <__subtf3@@GCC_3.0+0x9c8>  // b.none
    9418:	cbz	x7, 9078 <__subtf3@@GCC_3.0+0x448>
    941c:	bfi	x6, x3, #61, #3
    9420:	lsr	x7, x3, #3
    9424:	tbz	x3, #50, 9440 <__subtf3@@GCC_3.0+0x810>
    9428:	lsr	x1, x2, #3
    942c:	tbnz	x2, #50, 9440 <__subtf3@@GCC_3.0+0x810>
    9430:	mov	x6, x9
    9434:	mov	w8, w5
    9438:	bfi	x6, x2, #61, #3
    943c:	mov	x7, x1
    9440:	extr	x7, x7, x6, #61
    9444:	bfi	x6, x7, #61, #3
    9448:	lsr	x7, x7, #3
    944c:	b	9094 <__subtf3@@GCC_3.0+0x464>
    9450:	subs	x4, x4, x10
    9454:	sbc	x3, x3, x2
    9458:	b	8d1c <__subtf3@@GCC_3.0+0xec>
    945c:	ands	x2, x13, #0xc00000
    9460:	b.eq	950c <__subtf3@@GCC_3.0+0x8dc>  // b.none
    9464:	cmp	x2, #0x400, lsl #12
    9468:	eor	w0, w8, #0x1
    946c:	cset	w1, eq  // eq = none
    9470:	tst	w1, w0
    9474:	b.ne	96cc <__subtf3@@GCC_3.0+0xa9c>  // b.any
    9478:	cmp	x2, #0x800, lsl #12
    947c:	b.eq	962c <__subtf3@@GCC_3.0+0x9fc>  // b.none
    9480:	cmp	x2, #0x400, lsl #12
    9484:	mov	w0, #0x14                  	// #20
    9488:	b.ne	8fc8 <__subtf3@@GCC_3.0+0x398>  // b.any
    948c:	mov	x3, #0xffffffffffffffff    	// #-1
    9490:	mov	x1, #0x7ffe                	// #32766
    9494:	mov	x4, x3
    9498:	mov	w5, #0x0                   	// #0
    949c:	mov	w0, #0x14                  	// #20
    94a0:	cbnz	x14, 90bc <__subtf3@@GCC_3.0+0x48c>
    94a4:	b	90b4 <__subtf3@@GCC_3.0+0x484>
    94a8:	cbz	x7, 9578 <__subtf3@@GCC_3.0+0x948>
    94ac:	mov	w8, w5
    94b0:	mov	x3, x2
    94b4:	mov	x4, x10
    94b8:	mov	x14, x15
    94bc:	mov	x1, #0x0                   	// #0
    94c0:	mov	x2, #0x0                   	// #0
    94c4:	b	918c <__subtf3@@GCC_3.0+0x55c>
    94c8:	mov	x4, x9
    94cc:	b	8d24 <__subtf3@@GCC_3.0+0xf4>
    94d0:	orr	x3, x3, x4
    94d4:	cmp	x3, #0x0
    94d8:	cset	x4, ne  // ne = any
    94dc:	b	9350 <__subtf3@@GCC_3.0+0x720>
    94e0:	mov	w1, #0x80                  	// #128
    94e4:	sub	w1, w1, w0
    94e8:	subs	w0, w0, #0x40
    94ec:	lsl	x1, x3, x1
    94f0:	orr	x1, x4, x1
    94f4:	csel	x4, x1, x4, ne  // ne = any
    94f8:	lsr	x3, x3, x0
    94fc:	cmp	x4, #0x0
    9500:	cset	x4, ne  // ne = any
    9504:	orr	x4, x4, x3
    9508:	b	92e8 <__subtf3@@GCC_3.0+0x6b8>
    950c:	mov	w0, #0x14                  	// #20
    9510:	b	900c <__subtf3@@GCC_3.0+0x3dc>
    9514:	lsr	x0, x2, #50
    9518:	mov	w8, w5
    951c:	eor	x0, x0, #0x1
    9520:	mov	x4, x10
    9524:	and	w0, w0, #0x1
    9528:	mov	x3, x2
    952c:	mov	x1, #0x7fff                	// #32767
    9530:	b	9080 <__subtf3@@GCC_3.0+0x450>
    9534:	mov	x7, #0x7fff                	// #32767
    9538:	cmp	x1, x7
    953c:	b.eq	9648 <__subtf3@@GCC_3.0+0xa18>  // b.none
    9540:	cmp	x12, x7
    9544:	b.eq	96b8 <__subtf3@@GCC_3.0+0xa88>  // b.none
    9548:	cbnz	x11, 9660 <__subtf3@@GCC_3.0+0xa30>
    954c:	mov	x3, x2
    9550:	mov	x4, x10
    9554:	mov	x1, #0x7fff                	// #32767
    9558:	b	9080 <__subtf3@@GCC_3.0+0x450>
    955c:	mov	x0, #0x7fff                	// #32767
    9560:	cmp	x12, x0
    9564:	b.eq	96a0 <__subtf3@@GCC_3.0+0xa70>  // b.none
    9568:	mov	x3, x2
    956c:	mov	x4, x10
    9570:	mov	x1, x12
    9574:	b	8ef8 <__subtf3@@GCC_3.0+0x2c8>
    9578:	and	x13, x13, #0xc00000
    957c:	mov	x6, #0x0                   	// #0
    9580:	cmp	x13, #0x800, lsl #12
    9584:	cset	w8, eq  // eq = none
    9588:	b	8f18 <__subtf3@@GCC_3.0+0x2e8>
    958c:	mov	x3, x2
    9590:	mov	x4, x10
    9594:	b	8d8c <__subtf3@@GCC_3.0+0x15c>
    9598:	mov	w1, #0x80                  	// #128
    959c:	sub	w1, w1, w0
    95a0:	subs	w0, w0, #0x40
    95a4:	lsl	x1, x3, x1
    95a8:	orr	x1, x4, x1
    95ac:	csel	x4, x1, x4, ne  // ne = any
    95b0:	lsr	x3, x3, x0
    95b4:	cmp	x4, #0x0
    95b8:	cset	x4, ne  // ne = any
    95bc:	orr	x4, x4, x3
    95c0:	b	9350 <__subtf3@@GCC_3.0+0x720>
    95c4:	cmp	x10, x4
    95c8:	mov	w8, w5
    95cc:	sbc	x3, x2, x3
    95d0:	sub	x4, x10, x4
    95d4:	mov	x1, x12
    95d8:	mov	x14, x15
    95dc:	b	8d1c <__subtf3@@GCC_3.0+0xec>
    95e0:	orr	x0, x2, x10
    95e4:	cbnz	x0, 9514 <__subtf3@@GCC_3.0+0x8e4>
    95e8:	mov	w8, w5
    95ec:	b	9170 <__subtf3@@GCC_3.0+0x540>
    95f0:	cmp	x12, x1
    95f4:	b.ne	93d0 <__subtf3@@GCC_3.0+0x7a0>  // b.any
    95f8:	cbz	x7, 96ac <__subtf3@@GCC_3.0+0xa7c>
    95fc:	tst	x2, #0x4000000000000
    9600:	csinc	w0, w0, wzr, ne  // ne = any
    9604:	cbnz	x11, 941c <__subtf3@@GCC_3.0+0x7ec>
    9608:	mov	w8, w5
    960c:	b	954c <__subtf3@@GCC_3.0+0x91c>
    9610:	orr	x7, x9, x6
    9614:	cbz	x7, 9578 <__subtf3@@GCC_3.0+0x948>
    9618:	mov	x3, x6
    961c:	and	x0, x9, #0x7
    9620:	mov	x4, x9
    9624:	mov	w5, #0x1                   	// #1
    9628:	b	8d9c <__subtf3@@GCC_3.0+0x16c>
    962c:	cbnz	x11, 96d8 <__subtf3@@GCC_3.0+0xaa8>
    9630:	mov	x3, #0xffffffffffffffff    	// #-1
    9634:	mov	w8, #0x0                   	// #0
    9638:	mov	x4, x3
    963c:	mov	x1, #0x7ffe                	// #32766
    9640:	mov	w0, #0x14                  	// #20
    9644:	b	8dcc <__subtf3@@GCC_3.0+0x19c>
    9648:	cbz	x11, 96e4 <__subtf3@@GCC_3.0+0xab4>
    964c:	lsr	x0, x3, #50
    9650:	cmp	x12, x1
    9654:	eor	x0, x0, #0x1
    9658:	and	w0, w0, #0x1
    965c:	b.eq	9704 <__subtf3@@GCC_3.0+0xad4>  // b.none
    9660:	orr	x10, x2, x10
    9664:	cbz	x10, 9078 <__subtf3@@GCC_3.0+0x448>
    9668:	bfi	x6, x3, #61, #3
    966c:	lsr	x7, x3, #3
    9670:	tbz	x3, #50, 9440 <__subtf3@@GCC_3.0+0x810>
    9674:	lsr	x1, x2, #3
    9678:	tbnz	x2, #50, 9440 <__subtf3@@GCC_3.0+0x810>
    967c:	and	x6, x9, #0x1fffffffffffffff
    9680:	mov	w8, w5
    9684:	orr	x6, x6, x2, lsl #61
    9688:	mov	x7, x1
    968c:	b	9440 <__subtf3@@GCC_3.0+0x810>
    9690:	adds	x4, x4, x10
    9694:	mov	x1, x12
    9698:	adc	x3, x2, x3
    969c:	b	8f90 <__subtf3@@GCC_3.0+0x360>
    96a0:	orr	x0, x2, x10
    96a4:	cbz	x0, 9170 <__subtf3@@GCC_3.0+0x540>
    96a8:	b	9064 <__subtf3@@GCC_3.0+0x434>
    96ac:	cbz	x11, 93d4 <__subtf3@@GCC_3.0+0x7a4>
    96b0:	mov	x1, #0x7fff                	// #32767
    96b4:	b	9080 <__subtf3@@GCC_3.0+0x450>
    96b8:	orr	x1, x2, x10
    96bc:	cbnz	x1, 96f4 <__subtf3@@GCC_3.0+0xac4>
    96c0:	cbz	x11, 9170 <__subtf3@@GCC_3.0+0x540>
    96c4:	mov	x1, #0x7fff                	// #32767
    96c8:	b	9080 <__subtf3@@GCC_3.0+0x450>
    96cc:	mov	w0, #0x14                  	// #20
    96d0:	mov	x11, #0x0                   	// #0
    96d4:	b	900c <__subtf3@@GCC_3.0+0x3dc>
    96d8:	mov	w0, #0x14                  	// #20
    96dc:	mov	x11, #0x1                   	// #1
    96e0:	b	900c <__subtf3@@GCC_3.0+0x3dc>
    96e4:	cmp	x12, x1
    96e8:	b.ne	954c <__subtf3@@GCC_3.0+0x91c>  // b.any
    96ec:	orr	x1, x2, x10
    96f0:	cbz	x1, 9170 <__subtf3@@GCC_3.0+0x540>
    96f4:	tst	x2, #0x4000000000000
    96f8:	csinc	w0, w0, wzr, ne  // ne = any
    96fc:	cbnz	x11, 9668 <__subtf3@@GCC_3.0+0xa38>
    9700:	b	954c <__subtf3@@GCC_3.0+0x91c>
    9704:	orr	x1, x2, x10
    9708:	cbnz	x1, 96f4 <__subtf3@@GCC_3.0+0xac4>
    970c:	mov	x1, #0x7fff                	// #32767
    9710:	b	9080 <__subtf3@@GCC_3.0+0x450>
    9714:	mov	x6, #0x0                   	// #0
    9718:	mov	w1, #0x7fff                	// #32767
    971c:	mov	x7, #0x0                   	// #0
    9720:	b	8de8 <__subtf3@@GCC_3.0+0x1b8>
    9724:	nop

0000000000009728 <__unordtf2@@GCC_4.5.0>:
    9728:	stp	x29, x30, [sp, #-48]!
    972c:	mov	x29, sp
    9730:	str	q0, [sp, #16]
    9734:	str	q1, [sp, #32]
    9738:	ldp	x3, x1, [sp, #16]
    973c:	ldp	x2, x0, [sp, #32]
    9740:	mrs	x4, fpcr
    9744:	ubfx	x5, x1, #48, #15
    9748:	mov	x4, x3
    974c:	mov	x3, x2
    9750:	ubfx	x2, x1, #0, #48
    9754:	mov	x1, #0x7fff                	// #32767
    9758:	ubfx	x7, x0, #0, #48
    975c:	cmp	x5, x1
    9760:	ubfx	x1, x0, #48, #15
    9764:	b.eq	9780 <__unordtf2@@GCC_4.5.0+0x58>  // b.none
    9768:	mov	x6, #0x7fff                	// #32767
    976c:	mov	w0, #0x0                   	// #0
    9770:	cmp	x1, x6
    9774:	b.eq	97a4 <__unordtf2@@GCC_4.5.0+0x7c>  // b.none
    9778:	ldp	x29, x30, [sp], #48
    977c:	ret
    9780:	orr	x0, x4, x2
    9784:	cbz	x0, 9768 <__unordtf2@@GCC_4.5.0+0x40>
    9788:	tst	x2, #0x800000000000
    978c:	b.ne	97c4 <__unordtf2@@GCC_4.5.0+0x9c>  // b.any
    9790:	mov	w0, #0x1                   	// #1
    9794:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9798:	mov	w0, #0x1                   	// #1
    979c:	ldp	x29, x30, [sp], #48
    97a0:	ret
    97a4:	orr	x3, x7, x3
    97a8:	cbz	x3, 9778 <__unordtf2@@GCC_4.5.0+0x50>
    97ac:	cmp	x5, x1
    97b0:	b.eq	97d8 <__unordtf2@@GCC_4.5.0+0xb0>  // b.none
    97b4:	tst	x7, #0x800000000000
    97b8:	mov	w0, #0x1                   	// #1
    97bc:	b.ne	9778 <__unordtf2@@GCC_4.5.0+0x50>  // b.any
    97c0:	b	9790 <__unordtf2@@GCC_4.5.0+0x68>
    97c4:	cmp	x1, x5
    97c8:	mov	w0, #0x1                   	// #1
    97cc:	b.ne	9778 <__unordtf2@@GCC_4.5.0+0x50>  // b.any
    97d0:	orr	x3, x7, x3
    97d4:	b	97e8 <__unordtf2@@GCC_4.5.0+0xc0>
    97d8:	orr	x4, x4, x2
    97dc:	cbz	x4, 97b4 <__unordtf2@@GCC_4.5.0+0x8c>
    97e0:	tst	x2, #0x800000000000
    97e4:	b.eq	9790 <__unordtf2@@GCC_4.5.0+0x68>  // b.none
    97e8:	mov	w0, #0x1                   	// #1
    97ec:	cbz	x3, 9778 <__unordtf2@@GCC_4.5.0+0x50>
    97f0:	b	97b4 <__unordtf2@@GCC_4.5.0+0x8c>
    97f4:	nop

00000000000097f8 <__fixtfsi@@GCC_3.0>:
    97f8:	stp	x29, x30, [sp, #-48]!
    97fc:	mov	x29, sp
    9800:	str	x19, [sp, #16]
    9804:	str	q0, [sp, #32]
    9808:	ldp	x0, x1, [sp, #32]
    980c:	mrs	x2, fpcr
    9810:	mov	x3, x0
    9814:	ubfx	x4, x1, #48, #15
    9818:	mov	x0, #0x3ffe                	// #16382
    981c:	cmp	x4, x0
    9820:	ubfx	x0, x1, #0, #48
    9824:	b.gt	9850 <__fixtfsi@@GCC_3.0+0x58>
    9828:	cbnz	x4, 98cc <__fixtfsi@@GCC_3.0+0xd4>
    982c:	orr	x0, x0, x3
    9830:	mov	w19, #0x0                   	// #0
    9834:	cbz	x0, 9840 <__fixtfsi@@GCC_3.0+0x48>
    9838:	mov	w0, #0x10                  	// #16
    983c:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9840:	mov	w0, w19
    9844:	ldr	x19, [sp, #16]
    9848:	ldp	x29, x30, [sp], #48
    984c:	ret
    9850:	lsr	x19, x1, #63
    9854:	mov	x5, #0x401d                	// #16413
    9858:	and	w2, w19, #0xff
    985c:	cmp	x4, x5
    9860:	b.le	9894 <__fixtfsi@@GCC_3.0+0x9c>
    9864:	mov	x1, #0x401e                	// #16414
    9868:	cmp	x4, x1
    986c:	mov	w19, #0x7fffffff            	// #2147483647
    9870:	csel	w1, w2, wzr, eq  // eq = none
    9874:	add	w19, w2, w19
    9878:	cbz	w1, 98dc <__fixtfsi@@GCC_3.0+0xe4>
    987c:	cmp	xzr, x0, lsr #17
    9880:	b.ne	98dc <__fixtfsi@@GCC_3.0+0xe4>  // b.any
    9884:	orr	x0, x3, x0, lsl #47
    9888:	cbz	x0, 9840 <__fixtfsi@@GCC_3.0+0x48>
    988c:	mov	w0, #0x10                  	// #16
    9890:	b	983c <__fixtfsi@@GCC_3.0+0x44>
    9894:	mov	x1, x4
    9898:	orr	x0, x0, #0x1000000000000
    989c:	mov	w19, #0x402f                	// #16431
    98a0:	mov	w4, #0xffffc011            	// #-16367
    98a4:	add	w4, w1, w4
    98a8:	sub	w1, w19, w1
    98ac:	cmp	w2, #0x0
    98b0:	lsr	x19, x0, x1
    98b4:	cneg	w19, w19, ne  // ne = any
    98b8:	lsl	x0, x0, x4
    98bc:	orr	x0, x0, x3
    98c0:	cbz	x0, 9840 <__fixtfsi@@GCC_3.0+0x48>
    98c4:	mov	w0, #0x10                  	// #16
    98c8:	b	983c <__fixtfsi@@GCC_3.0+0x44>
    98cc:	mov	w19, #0x0                   	// #0
    98d0:	mov	w0, #0x10                  	// #16
    98d4:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    98d8:	b	9840 <__fixtfsi@@GCC_3.0+0x48>
    98dc:	mov	w0, #0x1                   	// #1
    98e0:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    98e4:	b	9840 <__fixtfsi@@GCC_3.0+0x48>

00000000000098e8 <__fixunstfsi@@GCC_3.0>:
    98e8:	stp	x29, x30, [sp, #-48]!
    98ec:	mov	x29, sp
    98f0:	str	x19, [sp, #16]
    98f4:	str	q0, [sp, #32]
    98f8:	ldp	x0, x1, [sp, #32]
    98fc:	mrs	x2, fpcr
    9900:	ubfx	x3, x1, #48, #15
    9904:	mov	x4, #0x3ffe                	// #16382
    9908:	mov	x2, x0
    990c:	cmp	x3, x4
    9910:	ubfx	x19, x1, #0, #48
    9914:	b.gt	9954 <__fixunstfsi@@GCC_3.0+0x6c>
    9918:	cbnz	x3, 9938 <__fixunstfsi@@GCC_3.0+0x50>
    991c:	orr	x0, x0, x19
    9920:	mov	w19, #0x0                   	// #0
    9924:	cbnz	x0, 9938 <__fixunstfsi@@GCC_3.0+0x50>
    9928:	mov	w0, w19
    992c:	ldr	x19, [sp, #16]
    9930:	ldp	x29, x30, [sp], #48
    9934:	ret
    9938:	mov	w0, #0x10                  	// #16
    993c:	mov	w19, #0x0                   	// #0
    9940:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9944:	mov	w0, w19
    9948:	ldr	x19, [sp, #16]
    994c:	ldp	x29, x30, [sp], #48
    9950:	ret
    9954:	lsr	x0, x1, #63
    9958:	mov	x4, #0x401f                	// #16415
    995c:	and	w0, w0, #0xff
    9960:	mov	x5, #0x401e                	// #16414
    9964:	ands	x6, x0, #0xff
    9968:	csel	x4, x4, x5, eq  // eq = none
    996c:	cmp	x4, x3
    9970:	b.le	9988 <__fixunstfsi@@GCC_3.0+0xa0>
    9974:	cbz	x6, 9998 <__fixunstfsi@@GCC_3.0+0xb0>
    9978:	mov	w0, #0x1                   	// #1
    997c:	mov	w19, #0x0                   	// #0
    9980:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9984:	b	9944 <__fixunstfsi@@GCC_3.0+0x5c>
    9988:	sub	w19, w0, #0x1
    998c:	mov	w0, #0x1                   	// #1
    9990:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9994:	b	9944 <__fixunstfsi@@GCC_3.0+0x5c>
    9998:	mov	x1, x3
    999c:	orr	x0, x19, #0x1000000000000
    99a0:	mov	w3, #0xffffc011            	// #-16367
    99a4:	mov	w19, #0x402f                	// #16431
    99a8:	add	w3, w1, w3
    99ac:	sub	w1, w19, w1
    99b0:	lsl	x3, x0, x3
    99b4:	orr	x2, x3, x2
    99b8:	lsr	x19, x0, x1
    99bc:	mov	w0, #0x10                  	// #16
    99c0:	cbnz	x2, 9940 <__fixunstfsi@@GCC_3.0+0x58>
    99c4:	b	9928 <__fixunstfsi@@GCC_3.0+0x40>

00000000000099c8 <__floatsitf@@GCC_3.0>:
    99c8:	cmp	w0, #0x0
    99cc:	cbz	w0, 9a18 <__floatsitf@@GCC_3.0+0x50>
    99d0:	cneg	w1, w0, lt  // lt = tstop
    99d4:	mov	w4, #0x403e                	// #16446
    99d8:	clz	x3, x1
    99dc:	mov	w2, #0x402f                	// #16431
    99e0:	sub	w4, w4, w3
    99e4:	lsr	w0, w0, #31
    99e8:	sub	w2, w2, w4
    99ec:	mov	x3, #0x0                   	// #0
    99f0:	and	w4, w4, #0x7fff
    99f4:	lsl	x1, x1, x2
    99f8:	and	x1, x1, #0xffffffffffff
    99fc:	orr	w0, w4, w0, lsl #15
    9a00:	mov	x2, #0x0                   	// #0
    9a04:	bfxil	x3, x1, #0, #48
    9a08:	fmov	d0, x2
    9a0c:	bfi	x3, x0, #48, #16
    9a10:	fmov	v0.d[1], x3
    9a14:	ret
    9a18:	mov	w4, #0x0                   	// #0
    9a1c:	mov	x1, #0x0                   	// #0
    9a20:	mov	w0, #0x0                   	// #0
    9a24:	mov	x3, #0x0                   	// #0
    9a28:	orr	w0, w4, w0, lsl #15
    9a2c:	bfxil	x3, x1, #0, #48
    9a30:	mov	x2, #0x0                   	// #0
    9a34:	fmov	d0, x2
    9a38:	bfi	x3, x0, #48, #16
    9a3c:	fmov	v0.d[1], x3
    9a40:	ret
    9a44:	nop

0000000000009a48 <__floatunsitf@@GCC_4.2.0>:
    9a48:	cbz	w0, 9a8c <__floatunsitf@@GCC_4.2.0+0x44>
    9a4c:	mov	w0, w0
    9a50:	mov	w1, #0x403e                	// #16446
    9a54:	clz	x3, x0
    9a58:	mov	w2, #0x402f                	// #16431
    9a5c:	sub	w1, w1, w3
    9a60:	mov	x3, #0x0                   	// #0
    9a64:	sub	w2, w2, w1
    9a68:	and	w1, w1, #0x7fff
    9a6c:	lsl	x0, x0, x2
    9a70:	and	x0, x0, #0xffffffffffff
    9a74:	mov	x2, #0x0                   	// #0
    9a78:	fmov	d0, x2
    9a7c:	bfxil	x3, x0, #0, #48
    9a80:	bfi	x3, x1, #48, #16
    9a84:	fmov	v0.d[1], x3
    9a88:	ret
    9a8c:	mov	x0, #0x0                   	// #0
    9a90:	mov	x3, #0x0                   	// #0
    9a94:	bfxil	x3, x0, #0, #48
    9a98:	mov	x2, #0x0                   	// #0
    9a9c:	fmov	d0, x2
    9aa0:	mov	w1, #0x0                   	// #0
    9aa4:	bfi	x3, x1, #48, #16
    9aa8:	fmov	v0.d[1], x3
    9aac:	ret

0000000000009ab0 <__fixtfdi@@GCC_3.0>:
    9ab0:	stp	x29, x30, [sp, #-48]!
    9ab4:	mov	x29, sp
    9ab8:	str	x19, [sp, #16]
    9abc:	str	q0, [sp, #32]
    9ac0:	ldp	x2, x0, [sp, #32]
    9ac4:	mrs	x1, fpcr
    9ac8:	ubfx	x19, x0, #48, #15
    9acc:	mov	x3, #0x3ffe                	// #16382
    9ad0:	ubfx	x4, x0, #0, #48
    9ad4:	cmp	x19, x3
    9ad8:	b.gt	9b00 <__fixtfdi@@GCC_3.0+0x50>
    9adc:	cbnz	x19, 9ba0 <__fixtfdi@@GCC_3.0+0xf0>
    9ae0:	orr	x2, x4, x2
    9ae4:	cbz	x2, 9af0 <__fixtfdi@@GCC_3.0+0x40>
    9ae8:	mov	w0, #0x10                  	// #16
    9aec:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9af0:	mov	x0, x19
    9af4:	ldr	x19, [sp, #16]
    9af8:	ldp	x29, x30, [sp], #48
    9afc:	ret
    9b00:	lsr	x1, x0, #63
    9b04:	and	w3, w1, #0xff
    9b08:	mov	x1, #0x403d                	// #16445
    9b0c:	cmp	x19, x1
    9b10:	b.le	9b48 <__fixtfdi@@GCC_3.0+0x98>
    9b14:	mov	x0, #0x403e                	// #16446
    9b18:	and	x5, x3, #0xff
    9b1c:	cmp	x19, x0
    9b20:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    9b24:	csel	w1, w3, wzr, eq  // eq = none
    9b28:	add	x19, x5, x0
    9b2c:	cbz	w1, 9bb0 <__fixtfdi@@GCC_3.0+0x100>
    9b30:	extr	x4, x4, x2, #49
    9b34:	cbnz	x4, 9bb0 <__fixtfdi@@GCC_3.0+0x100>
    9b38:	cmp	xzr, x2, lsl #15
    9b3c:	b.eq	9af0 <__fixtfdi@@GCC_3.0+0x40>  // b.none
    9b40:	mov	w0, #0x10                  	// #16
    9b44:	b	9aec <__fixtfdi@@GCC_3.0+0x3c>
    9b48:	mov	x5, #0x406f                	// #16495
    9b4c:	sub	x1, x5, x19
    9b50:	mov	x0, x19
    9b54:	cmp	x1, #0x3f
    9b58:	orr	x19, x4, #0x1000000000000
    9b5c:	b.le	9bbc <__fixtfdi@@GCC_3.0+0x10c>
    9b60:	mov	w4, #0xffffc011            	// #-16367
    9b64:	add	w4, w0, w4
    9b68:	cmp	x1, #0x40
    9b6c:	mov	w1, #0x402f                	// #16431
    9b70:	sub	w0, w1, w0
    9b74:	lsl	x1, x19, x4
    9b78:	orr	x1, x2, x1
    9b7c:	csel	x2, x1, x2, ne  // ne = any
    9b80:	lsr	x19, x19, x0
    9b84:	cmp	x2, #0x0
    9b88:	cset	w0, ne  // ne = any
    9b8c:	cmp	w3, #0x0
    9b90:	cneg	x19, x19, ne  // ne = any
    9b94:	cbz	w0, 9af0 <__fixtfdi@@GCC_3.0+0x40>
    9b98:	mov	w0, #0x10                  	// #16
    9b9c:	b	9aec <__fixtfdi@@GCC_3.0+0x3c>
    9ba0:	mov	x19, #0x0                   	// #0
    9ba4:	mov	w0, #0x10                  	// #16
    9ba8:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9bac:	b	9af0 <__fixtfdi@@GCC_3.0+0x40>
    9bb0:	mov	w0, #0x1                   	// #1
    9bb4:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9bb8:	b	9af0 <__fixtfdi@@GCC_3.0+0x40>
    9bbc:	mov	w6, #0xffffbfd1            	// #-16431
    9bc0:	add	w4, w0, w6
    9bc4:	sub	w0, w5, w0
    9bc8:	lsl	x1, x2, x4
    9bcc:	cmp	x1, #0x0
    9bd0:	lsr	x2, x2, x0
    9bd4:	cset	w0, ne  // ne = any
    9bd8:	lsl	x19, x19, x4
    9bdc:	orr	x19, x2, x19
    9be0:	b	9b8c <__fixtfdi@@GCC_3.0+0xdc>
    9be4:	nop

0000000000009be8 <__fixunstfdi@@GCC_3.0>:
    9be8:	stp	x29, x30, [sp, #-48]!
    9bec:	mov	x29, sp
    9bf0:	str	x19, [sp, #16]
    9bf4:	str	q0, [sp, #32]
    9bf8:	ldr	x19, [sp, #32]
    9bfc:	ldr	x1, [sp, #40]
    9c00:	mrs	x0, fpcr
    9c04:	ubfx	x3, x1, #48, #15
    9c08:	mov	x2, x19
    9c0c:	mov	x4, #0x3ffe                	// #16382
    9c10:	ubfx	x19, x1, #0, #48
    9c14:	cmp	x3, x4
    9c18:	b.gt	9c44 <__fixunstfdi@@GCC_3.0+0x5c>
    9c1c:	cbnz	x3, 9c28 <__fixunstfdi@@GCC_3.0+0x40>
    9c20:	orr	x19, x2, x19
    9c24:	cbz	x19, 9c34 <__fixunstfdi@@GCC_3.0+0x4c>
    9c28:	mov	w0, #0x10                  	// #16
    9c2c:	mov	x19, #0x0                   	// #0
    9c30:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9c34:	mov	x0, x19
    9c38:	ldr	x19, [sp, #16]
    9c3c:	ldp	x29, x30, [sp], #48
    9c40:	ret
    9c44:	lsr	x0, x1, #63
    9c48:	mov	x4, #0x403f                	// #16447
    9c4c:	and	w0, w0, #0xff
    9c50:	and	x5, x0, #0xff
    9c54:	sub	x4, x4, x5
    9c58:	cmp	x4, x3
    9c5c:	b.le	9cb0 <__fixunstfdi@@GCC_3.0+0xc8>
    9c60:	cbnz	x5, 9cc4 <__fixunstfdi@@GCC_3.0+0xdc>
    9c64:	mov	x1, x3
    9c68:	mov	x0, #0x406f                	// #16495
    9c6c:	sub	x3, x0, x3
    9c70:	orr	x4, x19, #0x1000000000000
    9c74:	cmp	x3, #0x3f
    9c78:	b.gt	9cd4 <__fixunstfdi@@GCC_3.0+0xec>
    9c7c:	mov	w3, #0xffffbfd1            	// #-16431
    9c80:	add	w3, w1, w3
    9c84:	sub	w1, w0, w1
    9c88:	lsl	x0, x2, x3
    9c8c:	cmp	x0, #0x0
    9c90:	lsr	x19, x2, x1
    9c94:	cset	w0, ne  // ne = any
    9c98:	lsl	x4, x4, x3
    9c9c:	orr	x19, x19, x4
    9ca0:	cbz	w0, 9c34 <__fixunstfdi@@GCC_3.0+0x4c>
    9ca4:	mov	w0, #0x10                  	// #16
    9ca8:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9cac:	b	9c34 <__fixunstfdi@@GCC_3.0+0x4c>
    9cb0:	eor	w19, w0, #0x1
    9cb4:	mov	w0, #0x1                   	// #1
    9cb8:	sbfx	x19, x19, #0, #1
    9cbc:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9cc0:	b	9c34 <__fixunstfdi@@GCC_3.0+0x4c>
    9cc4:	mov	w0, #0x1                   	// #1
    9cc8:	mov	x19, #0x0                   	// #0
    9ccc:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9cd0:	b	9c34 <__fixunstfdi@@GCC_3.0+0x4c>
    9cd4:	mov	w0, #0xffffc011            	// #-16367
    9cd8:	add	w5, w1, w0
    9cdc:	mov	w0, #0x402f                	// #16431
    9ce0:	cmp	x3, #0x40
    9ce4:	sub	w1, w0, w1
    9ce8:	lsl	x0, x4, x5
    9cec:	orr	x0, x2, x0
    9cf0:	csel	x2, x0, x2, ne  // ne = any
    9cf4:	lsr	x19, x4, x1
    9cf8:	cmp	x2, #0x0
    9cfc:	cset	w0, ne  // ne = any
    9d00:	b	9ca0 <__fixunstfdi@@GCC_3.0+0xb8>
    9d04:	nop

0000000000009d08 <__floatditf@@GCC_3.0>:
    9d08:	cmp	x0, #0x0
    9d0c:	cbz	x0, 9d70 <__floatditf@@GCC_3.0+0x68>
    9d10:	cneg	x1, x0, lt  // lt = tstop
    9d14:	mov	w2, #0x403e                	// #16446
    9d18:	clz	x3, x1
    9d1c:	mov	x4, #0x406f                	// #16495
    9d20:	sub	w2, w2, w3
    9d24:	lsr	x0, x0, #63
    9d28:	and	w0, w0, #0xff
    9d2c:	and	w5, w2, #0x7fff
    9d30:	sub	x3, x4, w2, sxtw
    9d34:	cmp	x3, #0x3f
    9d38:	b.gt	9d9c <__floatditf@@GCC_3.0+0x94>
    9d3c:	sub	w4, w4, w2
    9d40:	mov	w3, #0xffffbfd1            	// #-16431
    9d44:	add	w2, w2, w3
    9d48:	mov	x3, #0x0                   	// #0
    9d4c:	lsl	x4, x1, x4
    9d50:	orr	w0, w5, w0, lsl #15
    9d54:	lsr	x1, x1, x2
    9d58:	and	x1, x1, #0xffffffffffff
    9d5c:	fmov	d0, x4
    9d60:	bfxil	x3, x1, #0, #48
    9d64:	bfi	x3, x0, #48, #16
    9d68:	fmov	v0.d[1], x3
    9d6c:	ret
    9d70:	mov	w5, #0x0                   	// #0
    9d74:	mov	x1, #0x0                   	// #0
    9d78:	mov	w0, #0x0                   	// #0
    9d7c:	mov	x3, #0x0                   	// #0
    9d80:	orr	w0, w5, w0, lsl #15
    9d84:	bfxil	x3, x1, #0, #48
    9d88:	mov	x4, #0x0                   	// #0
    9d8c:	fmov	d0, x4
    9d90:	bfi	x3, x0, #48, #16
    9d94:	fmov	v0.d[1], x3
    9d98:	ret
    9d9c:	mov	w3, #0x402f                	// #16431
    9da0:	sub	w2, w3, w2
    9da4:	mov	x3, #0x0                   	// #0
    9da8:	orr	w0, w5, w0, lsl #15
    9dac:	lsl	x1, x1, x2
    9db0:	and	x1, x1, #0xffffffffffff
    9db4:	mov	x4, #0x0                   	// #0
    9db8:	fmov	d0, x4
    9dbc:	bfxil	x3, x1, #0, #48
    9dc0:	bfi	x3, x0, #48, #16
    9dc4:	fmov	v0.d[1], x3
    9dc8:	ret
    9dcc:	nop

0000000000009dd0 <__floatunditf@@GCC_4.2.0>:
    9dd0:	cbz	x0, 9e24 <__floatunditf@@GCC_4.2.0+0x54>
    9dd4:	clz	x2, x0
    9dd8:	mov	w1, #0x403e                	// #16446
    9ddc:	sub	w1, w1, w2
    9de0:	mov	x2, #0x406f                	// #16495
    9de4:	and	w4, w1, #0x7fff
    9de8:	sub	x3, x2, w1, sxtw
    9dec:	cmp	x3, #0x3f
    9df0:	b.gt	9e44 <__floatunditf@@GCC_4.2.0+0x74>
    9df4:	sub	w2, w2, w1
    9df8:	mov	w3, #0xffffbfd1            	// #-16431
    9dfc:	add	w1, w1, w3
    9e00:	mov	x3, #0x0                   	// #0
    9e04:	lsr	x1, x0, x1
    9e08:	and	x1, x1, #0xffffffffffff
    9e0c:	lsl	x0, x0, x2
    9e10:	fmov	d0, x0
    9e14:	bfxil	x3, x1, #0, #48
    9e18:	bfi	x3, x4, #48, #16
    9e1c:	fmov	v0.d[1], x3
    9e20:	ret
    9e24:	mov	x1, #0x0                   	// #0
    9e28:	mov	x3, #0x0                   	// #0
    9e2c:	bfxil	x3, x1, #0, #48
    9e30:	fmov	d0, x0
    9e34:	mov	w4, #0x0                   	// #0
    9e38:	bfi	x3, x4, #48, #16
    9e3c:	fmov	v0.d[1], x3
    9e40:	ret
    9e44:	mov	w2, #0x402f                	// #16431
    9e48:	sub	w1, w2, w1
    9e4c:	mov	x3, #0x0                   	// #0
    9e50:	lsl	x1, x0, x1
    9e54:	and	x1, x1, #0xffffffffffff
    9e58:	mov	x0, #0x0                   	// #0
    9e5c:	fmov	d0, x0
    9e60:	bfxil	x3, x1, #0, #48
    9e64:	bfi	x3, x4, #48, #16
    9e68:	fmov	v0.d[1], x3
    9e6c:	ret

0000000000009e70 <__fixtfti@@GCC_3.0>:
    9e70:	stp	x29, x30, [sp, #-48]!
    9e74:	mov	x29, sp
    9e78:	str	x19, [sp, #16]
    9e7c:	str	q0, [sp, #32]
    9e80:	ldp	x3, x0, [sp, #32]
    9e84:	mrs	x1, fpcr
    9e88:	ubfx	x4, x0, #48, #15
    9e8c:	mov	x6, x3
    9e90:	mov	x5, #0x3ffe                	// #16382
    9e94:	ubfx	x3, x0, #0, #48
    9e98:	cmp	x4, x5
    9e9c:	b.gt	9ecc <__fixtfti@@GCC_3.0+0x5c>
    9ea0:	cbz	x4, 9f8c <__fixtfti@@GCC_3.0+0x11c>
    9ea4:	mov	x19, #0x0                   	// #0
    9ea8:	mov	x1, #0x0                   	// #0
    9eac:	mov	w0, #0x10                  	// #16
    9eb0:	str	x1, [sp, #32]
    9eb4:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    9eb8:	ldr	x1, [sp, #32]
    9ebc:	mov	x0, x19
    9ec0:	ldr	x19, [sp, #16]
    9ec4:	ldp	x29, x30, [sp], #48
    9ec8:	ret
    9ecc:	lsr	x2, x0, #63
    9ed0:	mov	x1, #0x407d                	// #16509
    9ed4:	and	w2, w2, #0xff
    9ed8:	cmp	x4, x1
    9edc:	and	x7, x2, #0xff
    9ee0:	b.le	9f1c <__fixtfti@@GCC_3.0+0xac>
    9ee4:	adrp	x1, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    9ee8:	mov	x0, #0x1                   	// #1
    9eec:	sub	x19, x0, x7
    9ef0:	mov	x5, #0x407e                	// #16510
    9ef4:	ldr	x1, [x1, #1560]
    9ef8:	asr	x7, x19, #63
    9efc:	negs	x19, x19
    9f00:	sbc	x1, x1, x7
    9f04:	cmp	x4, x5
    9f08:	csel	w2, w2, wzr, eq  // eq = none
    9f0c:	cbz	w2, 9eb0 <__fixtfti@@GCC_3.0+0x40>
    9f10:	orr	x3, x6, x3
    9f14:	cbnz	x3, 9eb0 <__fixtfti@@GCC_3.0+0x40>
    9f18:	b	9ebc <__fixtfti@@GCC_3.0+0x4c>
    9f1c:	mov	x1, #0x406e                	// #16494
    9f20:	mov	x0, x4
    9f24:	orr	x5, x3, #0x1000000000000
    9f28:	cmp	x4, x1
    9f2c:	b.gt	9fa4 <__fixtfti@@GCC_3.0+0x134>
    9f30:	mov	x3, #0x406f                	// #16495
    9f34:	sub	x4, x3, x4
    9f38:	cmp	x4, #0x3f
    9f3c:	b.gt	9ff4 <__fixtfti@@GCC_3.0+0x184>
    9f40:	mov	w2, #0xffffbfd1            	// #-16431
    9f44:	add	w2, w0, w2
    9f48:	sub	w0, w3, w0
    9f4c:	mov	x19, #0x0                   	// #0
    9f50:	lsl	x1, x6, x2
    9f54:	cmp	x1, #0x0
    9f58:	lsr	x3, x6, x0
    9f5c:	cset	w4, ne  // ne = any
    9f60:	lsl	x2, x5, x2
    9f64:	orr	x1, x2, x3
    9f68:	lsr	x0, x5, x0
    9f6c:	adds	x19, x1, x19
    9f70:	cinc	x1, x0, cs  // cs = hs, nlast
    9f74:	cbz	x7, 9f80 <__fixtfti@@GCC_3.0+0x110>
    9f78:	negs	x19, x19
    9f7c:	ngc	x1, x1
    9f80:	cbz	w4, 9ebc <__fixtfti@@GCC_3.0+0x4c>
    9f84:	mov	w0, #0x10                  	// #16
    9f88:	b	9eb0 <__fixtfti@@GCC_3.0+0x40>
    9f8c:	orr	x3, x6, x3
    9f90:	mov	x19, #0x0                   	// #0
    9f94:	mov	x1, #0x0                   	// #0
    9f98:	cbz	x3, 9ebc <__fixtfti@@GCC_3.0+0x4c>
    9f9c:	mov	w0, #0x10                  	// #16
    9fa0:	b	9eb0 <__fixtfti@@GCC_3.0+0x40>
    9fa4:	mov	w3, #0xffffbf91            	// #-16495
    9fa8:	add	w2, w4, w3
    9fac:	mov	w3, #0x3f                  	// #63
    9fb0:	sub	w4, w3, w2
    9fb4:	lsr	x3, x6, #1
    9fb8:	mov	x19, x6
    9fbc:	mov	w6, #0xffffbf51            	// #-16559
    9fc0:	add	w0, w0, w6
    9fc4:	cmp	w0, #0x0
    9fc8:	lsr	x3, x3, x4
    9fcc:	lsl	x1, x5, x2
    9fd0:	orr	x1, x3, x1
    9fd4:	lsl	x3, x19, x0
    9fd8:	csel	x1, x3, x1, ge  // ge = tcont
    9fdc:	lsl	x19, x19, x2
    9fe0:	csel	x19, xzr, x19, ge  // ge = tcont
    9fe4:	cbz	x7, 9ebc <__fixtfti@@GCC_3.0+0x4c>
    9fe8:	negs	x19, x19
    9fec:	ngc	x1, x1
    9ff0:	b	9ebc <__fixtfti@@GCC_3.0+0x4c>
    9ff4:	mov	w1, #0xffffc011            	// #-16367
    9ff8:	add	w2, w0, w1
    9ffc:	mov	w1, #0x402f                	// #16431
    a000:	cmp	x4, #0x40
    a004:	sub	w0, w1, w0
    a008:	lsl	x1, x5, x2
    a00c:	orr	x1, x6, x1
    a010:	mov	x19, #0x0                   	// #0
    a014:	csel	x6, x1, x6, ne  // ne = any
    a018:	lsr	x1, x5, x0
    a01c:	cmp	x6, #0x0
    a020:	mov	x0, #0x0                   	// #0
    a024:	cset	w4, ne  // ne = any
    a028:	b	9f6c <__fixtfti@@GCC_3.0+0xfc>
    a02c:	nop

000000000000a030 <__fixunstfti@@GCC_3.0>:
    a030:	stp	x29, x30, [sp, #-48]!
    a034:	mov	x29, sp
    a038:	str	x19, [sp, #16]
    a03c:	str	q0, [sp, #32]
    a040:	ldp	x1, x0, [sp, #32]
    a044:	mrs	x2, fpcr
    a048:	ubfx	x4, x0, #48, #15
    a04c:	mov	x2, #0x3ffe                	// #16382
    a050:	mov	x3, x1
    a054:	cmp	x4, x2
    a058:	ubfx	x5, x0, #0, #48
    a05c:	b.gt	a0a8 <__fixunstfti@@GCC_3.0+0x78>
    a060:	cbz	x4, a08c <__fixunstfti@@GCC_3.0+0x5c>
    a064:	mov	w0, #0x10                  	// #16
    a068:	mov	x19, #0x0                   	// #0
    a06c:	mov	x1, #0x0                   	// #0
    a070:	str	x1, [sp, #32]
    a074:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    a078:	ldr	x1, [sp, #32]
    a07c:	mov	x0, x19
    a080:	ldr	x19, [sp, #16]
    a084:	ldp	x29, x30, [sp], #48
    a088:	ret
    a08c:	orr	x1, x1, x5
    a090:	mov	x19, #0x0                   	// #0
    a094:	cbnz	x1, a064 <__fixunstfti@@GCC_3.0+0x34>
    a098:	mov	x0, x19
    a09c:	ldr	x19, [sp, #16]
    a0a0:	ldp	x29, x30, [sp], #48
    a0a4:	ret
    a0a8:	lsr	x1, x0, #63
    a0ac:	mov	x2, #0x407f                	// #16511
    a0b0:	and	w1, w1, #0xff
    a0b4:	and	x6, x1, #0xff
    a0b8:	sub	x2, x2, x6
    a0bc:	cmp	x2, x4
    a0c0:	b.le	a120 <__fixunstfti@@GCC_3.0+0xf0>
    a0c4:	cbnz	x6, a134 <__fixunstfti@@GCC_3.0+0x104>
    a0c8:	mov	x1, #0x406e                	// #16494
    a0cc:	mov	x0, x4
    a0d0:	orr	x5, x5, #0x1000000000000
    a0d4:	cmp	x4, x1
    a0d8:	b.le	a144 <__fixunstfti@@GCC_3.0+0x114>
    a0dc:	adds	x3, x3, x6
    a0e0:	mov	w2, #0x3f                  	// #63
    a0e4:	mov	w6, #0xffffbf91            	// #-16495
    a0e8:	add	w19, w4, w6
    a0ec:	sub	w4, w2, w19
    a0f0:	lsr	x2, x3, #1
    a0f4:	mov	w7, #0xffffbf51            	// #-16559
    a0f8:	add	w0, w0, w7
    a0fc:	cmp	w0, #0x0
    a100:	lsl	x1, x5, x19
    a104:	lsr	x2, x2, x4
    a108:	orr	x1, x2, x1
    a10c:	lsl	x19, x3, x19
    a110:	csel	x19, xzr, x19, ge  // ge = tcont
    a114:	lsl	x2, x3, x0
    a118:	csel	x1, x2, x1, ge  // ge = tcont
    a11c:	b	a07c <__fixunstfti@@GCC_3.0+0x4c>
    a120:	eor	w1, w1, #0x1
    a124:	mov	w0, #0x1                   	// #1
    a128:	sbfx	x19, x1, #0, #1
    a12c:	mov	x1, x19
    a130:	b	a070 <__fixunstfti@@GCC_3.0+0x40>
    a134:	mov	w0, #0x1                   	// #1
    a138:	mov	x19, #0x0                   	// #0
    a13c:	mov	x1, #0x0                   	// #0
    a140:	b	a070 <__fixunstfti@@GCC_3.0+0x40>
    a144:	mov	x2, #0x406f                	// #16495
    a148:	sub	x4, x2, x4
    a14c:	cmp	x4, #0x3f
    a150:	b.le	a1a0 <__fixunstfti@@GCC_3.0+0x170>
    a154:	mov	w1, #0xffffc011            	// #-16367
    a158:	add	w1, w0, w1
    a15c:	cmp	x4, #0x40
    a160:	mov	w2, #0x402f                	// #16431
    a164:	lsl	x1, x5, x1
    a168:	orr	x1, x3, x1
    a16c:	csel	x3, x1, x3, ne  // ne = any
    a170:	sub	w0, w2, w0
    a174:	cmp	x3, #0x0
    a178:	mov	x19, #0x0                   	// #0
    a17c:	cset	w2, ne  // ne = any
    a180:	lsr	x0, x5, x0
    a184:	mov	x1, #0x0                   	// #0
    a188:	adds	x3, x0, x19
    a18c:	mov	w0, #0x10                  	// #16
    a190:	mov	x19, x3
    a194:	cinc	x1, x1, cs  // cs = hs, nlast
    a198:	cbnz	w2, a070 <__fixunstfti@@GCC_3.0+0x40>
    a19c:	b	a07c <__fixunstfti@@GCC_3.0+0x4c>
    a1a0:	mov	w4, #0xffffbfd1            	// #-16431
    a1a4:	add	w4, w0, w4
    a1a8:	sub	w1, w2, w0
    a1ac:	mov	x19, #0x0                   	// #0
    a1b0:	lsl	x0, x3, x4
    a1b4:	cmp	x0, #0x0
    a1b8:	lsl	x4, x5, x4
    a1bc:	cset	w2, ne  // ne = any
    a1c0:	lsr	x0, x3, x1
    a1c4:	orr	x0, x4, x0
    a1c8:	lsr	x1, x5, x1
    a1cc:	b	a188 <__fixunstfti@@GCC_3.0+0x158>

000000000000a1d0 <__floattitf@@GCC_3.0>:
    a1d0:	mrs	x9, fpcr
    a1d4:	orr	x2, x0, x1
    a1d8:	cbz	x2, a298 <__floattitf@@GCC_3.0+0xc8>
    a1dc:	lsr	x4, x1, #63
    a1e0:	mov	x2, x1
    a1e4:	and	w8, w4, #0xff
    a1e8:	tbnz	x1, #63, a2c4 <__floattitf@@GCC_3.0+0xf4>
    a1ec:	mov	x3, x2
    a1f0:	cbz	x2, a2d4 <__floattitf@@GCC_3.0+0x104>
    a1f4:	clz	x4, x2
    a1f8:	mov	w5, #0x407e                	// #16510
    a1fc:	sub	w5, w5, w4
    a200:	mov	w4, #0x406f                	// #16495
    a204:	cmp	w5, w4
    a208:	sxtw	x7, w5
    a20c:	b.le	a424 <__floattitf@@GCC_3.0+0x254>
    a210:	mov	w2, #0x4072                	// #16498
    a214:	cmp	w5, w2
    a218:	b.gt	a320 <__floattitf@@GCC_3.0+0x150>
    a21c:	mov	x4, #0x4072                	// #16498
    a220:	cmp	x7, x4
    a224:	b.eq	a244 <__floattitf@@GCC_3.0+0x74>  // b.none
    a228:	sub	w2, w2, w5
    a22c:	mov	w4, #0xffffbfce            	// #-16434
    a230:	add	w5, w5, w4
    a234:	lsl	x3, x3, x2
    a238:	lsr	x5, x0, x5
    a23c:	orr	x3, x5, x3
    a240:	lsl	x0, x0, x2
    a244:	and	x5, x3, #0xfff7ffffffffffff
    a248:	tst	x0, #0x7
    a24c:	mov	w4, #0x0                   	// #0
    a250:	b.eq	a270 <__floattitf@@GCC_3.0+0xa0>  // b.none
    a254:	and	x2, x9, #0xc00000
    a258:	mov	w4, #0x10                  	// #16
    a25c:	cmp	x2, #0x400, lsl #12
    a260:	b.eq	a3dc <__floattitf@@GCC_3.0+0x20c>  // b.none
    a264:	cmp	x2, #0x800, lsl #12
    a268:	b.eq	a41c <__floattitf@@GCC_3.0+0x24c>  // b.none
    a26c:	cbz	x2, a400 <__floattitf@@GCC_3.0+0x230>
    a270:	lsr	x1, x5, #3
    a274:	mov	x3, #0x0                   	// #0
    a278:	extr	x2, x5, x0, #3
    a27c:	bfxil	x3, x1, #0, #48
    a280:	fmov	d0, x2
    a284:	bfi	x3, x7, #48, #15
    a288:	bfi	x3, x8, #63, #1
    a28c:	fmov	v0.d[1], x3
    a290:	cbnz	w4, a3bc <__floattitf@@GCC_3.0+0x1ec>
    a294:	ret
    a298:	mov	w8, #0x0                   	// #0
    a29c:	mov	w4, #0x0                   	// #0
    a2a0:	mov	x1, #0x0                   	// #0
    a2a4:	mov	x6, #0x0                   	// #0
    a2a8:	mov	x3, #0x0                   	// #0
    a2ac:	orr	w4, w4, w8, lsl #15
    a2b0:	bfxil	x3, x1, #0, #48
    a2b4:	fmov	d0, x6
    a2b8:	bfi	x3, x4, #48, #16
    a2bc:	fmov	v0.d[1], x3
    a2c0:	ret
    a2c4:	negs	x0, x0
    a2c8:	ngc	x2, x1
    a2cc:	mov	x3, x2
    a2d0:	cbnz	x2, a1f4 <__floattitf@@GCC_3.0+0x24>
    a2d4:	clz	x1, x0
    a2d8:	mov	w3, #0x403e                	// #16446
    a2dc:	sub	w1, w3, w1
    a2e0:	mov	x3, #0x406f                	// #16495
    a2e4:	mov	w5, w1
    a2e8:	and	w4, w1, #0x7fff
    a2ec:	sub	x3, x3, w1, sxtw
    a2f0:	cmp	x3, #0x3f
    a2f4:	b.gt	a3a4 <__floattitf@@GCC_3.0+0x1d4>
    a2f8:	mov	w6, #0x406f                	// #16495
    a2fc:	mov	w13, #0xffffbfd1            	// #-16431
    a300:	add	w1, w5, w13
    a304:	sub	w5, w6, w5
    a308:	lsr	x1, x0, x1
    a30c:	lsl	x2, x2, x5
    a310:	orr	x2, x1, x2
    a314:	and	x1, x2, #0xffffffffffff
    a318:	lsl	x6, x0, x5
    a31c:	b	a2a8 <__floattitf@@GCC_3.0+0xd8>
    a320:	sub	w6, w5, w2
    a324:	mov	w10, #0x3f                  	// #63
    a328:	lsl	x2, x3, #1
    a32c:	sub	w11, w10, w6
    a330:	mov	w4, #0x40f2                	// #16626
    a334:	mov	w12, #0xffffbf4e            	// #-16562
    a338:	add	w12, w5, w12
    a33c:	sub	w5, w4, w5
    a340:	sub	w10, w10, w5
    a344:	lsl	x4, x2, x11
    a348:	lsr	x11, x0, #1
    a34c:	cmp	w12, #0x0
    a350:	lsr	x2, x0, x6
    a354:	orr	x2, x4, x2
    a358:	sub	w4, w5, #0x40
    a35c:	lsr	x13, x3, x12
    a360:	lsr	x6, x3, x6
    a364:	csel	x2, x13, x2, ge  // ge = tcont
    a368:	csel	x6, xzr, x6, ge  // ge = tcont
    a36c:	lsr	x10, x11, x10
    a370:	cmp	w4, #0x0
    a374:	lsl	x3, x3, x5
    a378:	orr	x3, x10, x3
    a37c:	lsl	x10, x0, x4
    a380:	lsl	x0, x0, x5
    a384:	csel	x3, x10, x3, ge  // ge = tcont
    a388:	csel	x0, xzr, x0, ge  // ge = tcont
    a38c:	orr	x0, x0, x3
    a390:	mov	x3, x6
    a394:	cmp	x0, #0x0
    a398:	cset	x0, ne  // ne = any
    a39c:	orr	x0, x2, x0
    a3a0:	b	a244 <__floattitf@@GCC_3.0+0x74>
    a3a4:	mov	w2, #0x402f                	// #16431
    a3a8:	sub	w2, w2, w1
    a3ac:	mov	x6, #0x0                   	// #0
    a3b0:	lsl	x1, x0, x2
    a3b4:	and	x1, x1, #0xffffffffffff
    a3b8:	b	a2a8 <__floattitf@@GCC_3.0+0xd8>
    a3bc:	stp	x29, x30, [sp, #-32]!
    a3c0:	mov	w0, w4
    a3c4:	mov	x29, sp
    a3c8:	str	q0, [sp, #16]
    a3cc:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    a3d0:	ldr	q0, [sp, #16]
    a3d4:	ldp	x29, x30, [sp], #32
    a3d8:	ret
    a3dc:	tbnz	x1, #63, a270 <__floattitf@@GCC_3.0+0xa0>
    a3e0:	adds	x0, x0, #0x8
    a3e4:	cinc	x5, x5, cs  // cs = hs, nlast
    a3e8:	and	x1, x5, #0x8000000000000
    a3ec:	cbz	x1, a458 <__floattitf@@GCC_3.0+0x288>
    a3f0:	and	x5, x5, #0xfff7ffffffffffff
    a3f4:	add	x7, x7, #0x1
    a3f8:	mov	w4, #0x10                  	// #16
    a3fc:	b	a270 <__floattitf@@GCC_3.0+0xa0>
    a400:	and	x1, x0, #0xf
    a404:	cmp	x1, #0x4
    a408:	b.eq	a270 <__floattitf@@GCC_3.0+0xa0>  // b.none
    a40c:	adds	x0, x0, #0x4
    a410:	cinc	x5, x5, cs  // cs = hs, nlast
    a414:	and	x1, x5, #0x8000000000000
    a418:	b	a3ec <__floattitf@@GCC_3.0+0x21c>
    a41c:	tbz	x1, #63, a270 <__floattitf@@GCC_3.0+0xa0>
    a420:	b	a3e0 <__floattitf@@GCC_3.0+0x210>
    a424:	mov	x1, #0x406f                	// #16495
    a428:	mov	x6, x0
    a42c:	cmp	x7, x1
    a430:	b.ne	a460 <__floattitf@@GCC_3.0+0x290>  // b.any
    a434:	and	x1, x2, #0xffffffffffff
    a438:	mov	w4, w7
    a43c:	mov	x3, #0x0                   	// #0
    a440:	orr	w4, w4, w8, lsl #15
    a444:	bfxil	x3, x1, #0, #48
    a448:	fmov	d0, x6
    a44c:	bfi	x3, x4, #48, #16
    a450:	fmov	v0.d[1], x3
    a454:	ret
    a458:	mov	w4, #0x10                  	// #16
    a45c:	b	a270 <__floattitf@@GCC_3.0+0xa0>
    a460:	and	w4, w5, #0x7fff
    a464:	b	a2f8 <__floattitf@@GCC_3.0+0x128>

000000000000a468 <__floatuntitf@@GCC_4.2.0>:
    a468:	mrs	x6, fpcr
    a46c:	orr	x2, x0, x1
    a470:	cbz	x2, a534 <__floatuntitf@@GCC_4.2.0+0xcc>
    a474:	mov	x3, x1
    a478:	cbz	x1, a558 <__floatuntitf@@GCC_4.2.0+0xf0>
    a47c:	clz	x4, x1
    a480:	mov	w2, #0x407e                	// #16510
    a484:	sub	w2, w2, w4
    a488:	mov	w4, #0x406f                	// #16495
    a48c:	cmp	w2, w4
    a490:	sxtw	x4, w2
    a494:	b.le	a694 <__floatuntitf@@GCC_4.2.0+0x22c>
    a498:	mov	w1, #0x4072                	// #16498
    a49c:	cmp	w2, w1
    a4a0:	b.gt	a5a4 <__floatuntitf@@GCC_4.2.0+0x13c>
    a4a4:	mov	x5, x0
    a4a8:	mov	x0, #0x4072                	// #16498
    a4ac:	cmp	x4, x0
    a4b0:	b.eq	a4d0 <__floatuntitf@@GCC_4.2.0+0x68>  // b.none
    a4b4:	sub	w1, w1, w2
    a4b8:	mov	w0, #0xffffbfce            	// #-16434
    a4bc:	add	w2, w2, w0
    a4c0:	lsl	x3, x3, x1
    a4c4:	lsr	x2, x5, x2
    a4c8:	orr	x3, x2, x3
    a4cc:	lsl	x5, x5, x1
    a4d0:	and	x1, x3, #0xfff7ffffffffffff
    a4d4:	tst	x5, #0x7
    a4d8:	mov	w0, #0x0                   	// #0
    a4dc:	b.eq	a510 <__floatuntitf@@GCC_4.2.0+0xa8>  // b.none
    a4e0:	ands	x6, x6, #0xc00000
    a4e4:	b.eq	a670 <__floatuntitf@@GCC_4.2.0+0x208>  // b.none
    a4e8:	cmp	x6, #0x400, lsl #12
    a4ec:	b.ne	a668 <__floatuntitf@@GCC_4.2.0+0x200>  // b.any
    a4f0:	adds	x0, x5, #0x8
    a4f4:	cinc	x1, x1, cs  // cs = hs, nlast
    a4f8:	mov	x5, x0
    a4fc:	and	x0, x1, #0x8000000000000
    a500:	cbz	x0, a668 <__floatuntitf@@GCC_4.2.0+0x200>
    a504:	and	x1, x1, #0xfff7ffffffffffff
    a508:	add	x4, x4, #0x1
    a50c:	mov	w0, #0x10                  	// #16
    a510:	lsr	x6, x1, #3
    a514:	mov	x3, #0x0                   	// #0
    a518:	extr	x2, x1, x5, #3
    a51c:	bfxil	x3, x6, #0, #48
    a520:	fmov	d0, x2
    a524:	bfi	x3, x4, #48, #16
    a528:	fmov	v0.d[1], x3
    a52c:	cbnz	w0, a64c <__floatuntitf@@GCC_4.2.0+0x1e4>
    a530:	ret
    a534:	mov	w4, #0x0                   	// #0
    a538:	mov	x1, #0x0                   	// #0
    a53c:	mov	x5, #0x0                   	// #0
    a540:	mov	x3, #0x0                   	// #0
    a544:	fmov	d0, x5
    a548:	bfxil	x3, x1, #0, #48
    a54c:	bfi	x3, x4, #48, #16
    a550:	fmov	v0.d[1], x3
    a554:	ret
    a558:	clz	x3, x0
    a55c:	mov	w2, #0x403e                	// #16446
    a560:	sub	w3, w2, w3
    a564:	mov	x5, #0x406f                	// #16495
    a568:	mov	w2, w3
    a56c:	and	w4, w3, #0x7fff
    a570:	sub	x5, x5, w3, sxtw
    a574:	cmp	x5, #0x3f
    a578:	b.gt	a620 <__floatuntitf@@GCC_4.2.0+0x1b8>
    a57c:	mov	w5, #0x406f                	// #16495
    a580:	mov	w10, #0xffffbfd1            	// #-16431
    a584:	add	w3, w2, w10
    a588:	sub	w2, w5, w2
    a58c:	lsr	x3, x0, x3
    a590:	lsl	x1, x1, x2
    a594:	orr	x1, x3, x1
    a598:	and	x1, x1, #0xffffffffffff
    a59c:	lsl	x5, x0, x2
    a5a0:	b	a540 <__floatuntitf@@GCC_4.2.0+0xd8>
    a5a4:	mov	w5, #0x40f2                	// #16626
    a5a8:	sub	w5, w5, w2
    a5ac:	lsr	x10, x0, #1
    a5b0:	mov	w8, #0x3f                  	// #63
    a5b4:	sub	w11, w8, w5
    a5b8:	subs	w9, w5, #0x40
    a5bc:	lsl	x7, x3, x5
    a5c0:	sub	w1, w2, w1
    a5c4:	lsr	x10, x10, x11
    a5c8:	orr	x7, x10, x7
    a5cc:	lsl	x5, x0, x5
    a5d0:	csel	x5, xzr, x5, pl  // pl = nfrst
    a5d4:	lsl	x10, x0, x9
    a5d8:	csel	x7, x10, x7, pl  // pl = nfrst
    a5dc:	orr	x5, x5, x7
    a5e0:	sub	w8, w8, w1
    a5e4:	lsl	x7, x3, #1
    a5e8:	cmp	x5, #0x0
    a5ec:	mov	w9, #0xffffbf4e            	// #-16562
    a5f0:	add	w2, w2, w9
    a5f4:	lsr	x5, x0, x1
    a5f8:	cset	x0, ne  // ne = any
    a5fc:	lsl	x8, x7, x8
    a600:	cmp	w2, #0x0
    a604:	orr	x5, x8, x5
    a608:	lsr	x7, x3, x2
    a60c:	csel	x5, x7, x5, ge  // ge = tcont
    a610:	lsr	x2, x3, x1
    a614:	orr	x5, x0, x5
    a618:	csel	x3, x2, xzr, lt  // lt = tstop
    a61c:	b	a4d0 <__floatuntitf@@GCC_4.2.0+0x68>
    a620:	mov	w1, #0x402f                	// #16431
    a624:	sub	w1, w1, w3
    a628:	mov	x5, #0x0                   	// #0
    a62c:	lsl	x1, x0, x1
    a630:	and	x1, x1, #0xffffffffffff
    a634:	mov	x3, #0x0                   	// #0
    a638:	fmov	d0, x5
    a63c:	bfxil	x3, x1, #0, #48
    a640:	bfi	x3, x4, #48, #16
    a644:	fmov	v0.d[1], x3
    a648:	ret
    a64c:	stp	x29, x30, [sp, #-32]!
    a650:	mov	x29, sp
    a654:	str	q0, [sp, #16]
    a658:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    a65c:	ldr	q0, [sp, #16]
    a660:	ldp	x29, x30, [sp], #32
    a664:	ret
    a668:	mov	w0, #0x10                  	// #16
    a66c:	b	a510 <__floatuntitf@@GCC_4.2.0+0xa8>
    a670:	and	x2, x5, #0xf
    a674:	mov	w0, #0x10                  	// #16
    a678:	cmp	x2, #0x4
    a67c:	b.eq	a510 <__floatuntitf@@GCC_4.2.0+0xa8>  // b.none
    a680:	adds	x0, x5, #0x4
    a684:	cinc	x1, x1, cs  // cs = hs, nlast
    a688:	mov	x5, x0
    a68c:	and	x0, x1, #0x8000000000000
    a690:	b	a500 <__floatuntitf@@GCC_4.2.0+0x98>
    a694:	mov	x3, #0x406f                	// #16495
    a698:	mov	x5, x0
    a69c:	cmp	x4, x3
    a6a0:	b.eq	a630 <__floatuntitf@@GCC_4.2.0+0x1c8>  // b.none
    a6a4:	and	w4, w2, #0x7fff
    a6a8:	b	a57c <__floatuntitf@@GCC_4.2.0+0x114>
    a6ac:	nop

000000000000a6b0 <__extendsftf2@@GCC_3.0>:
    a6b0:	mrs	x0, fpcr
    a6b4:	fmov	w0, s0
    a6b8:	ubfx	x2, x0, #23, #8
    a6bc:	and	x1, x0, #0x7fffff
    a6c0:	add	x3, x2, #0x1
    a6c4:	ubfx	x5, x0, #0, #23
    a6c8:	tst	x3, #0xfe
    a6cc:	lsr	w0, w0, #31
    a6d0:	b.eq	a700 <__extendsftf2@@GCC_3.0+0x50>  // b.none
    a6d4:	lsl	x1, x1, #25
    a6d8:	mov	w3, #0x3f80                	// #16256
    a6dc:	add	w4, w2, w3
    a6e0:	mov	x3, #0x0                   	// #0
    a6e4:	bfxil	x3, x1, #0, #48
    a6e8:	mov	x2, #0x0                   	// #0
    a6ec:	fmov	d0, x2
    a6f0:	bfi	x3, x4, #48, #15
    a6f4:	bfi	x3, x0, #63, #1
    a6f8:	fmov	v0.d[1], x3
    a6fc:	ret
    a700:	cbnz	w2, a730 <__extendsftf2@@GCC_3.0+0x80>
    a704:	cbnz	x1, a77c <__extendsftf2@@GCC_3.0+0xcc>
    a708:	mov	x1, #0x0                   	// #0
    a70c:	mov	x3, #0x0                   	// #0
    a710:	bfxil	x3, x1, #0, #48
    a714:	mov	w4, #0x0                   	// #0
    a718:	mov	x2, #0x0                   	// #0
    a71c:	fmov	d0, x2
    a720:	bfi	x3, x4, #48, #15
    a724:	bfi	x3, x0, #63, #1
    a728:	fmov	v0.d[1], x3
    a72c:	ret
    a730:	cbz	x1, a7b8 <__extendsftf2@@GCC_3.0+0x108>
    a734:	lsl	x1, x1, #25
    a738:	mov	x3, #0x0                   	// #0
    a73c:	orr	x1, x1, #0x800000000000
    a740:	mov	x2, #0x0                   	// #0
    a744:	fmov	d0, x2
    a748:	bfxil	x3, x1, #0, #48
    a74c:	orr	x3, x3, #0x7fff000000000000
    a750:	bfi	x3, x0, #63, #1
    a754:	fmov	v0.d[1], x3
    a758:	tbnz	w5, #22, a7e0 <__extendsftf2@@GCC_3.0+0x130>
    a75c:	stp	x29, x30, [sp, #-32]!
    a760:	mov	w0, #0x1                   	// #1
    a764:	mov	x29, sp
    a768:	str	q0, [sp, #16]
    a76c:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    a770:	ldr	q0, [sp, #16]
    a774:	ldp	x29, x30, [sp], #32
    a778:	ret
    a77c:	clz	x4, x1
    a780:	mov	w2, #0x3fa9                	// #16297
    a784:	sub	w3, w4, #0xf
    a788:	sub	w2, w2, w4
    a78c:	and	w4, w2, #0x7fff
    a790:	mov	x2, #0x0                   	// #0
    a794:	lsl	x1, x1, x3
    a798:	and	x1, x1, #0xffffffffffff
    a79c:	mov	x3, #0x0                   	// #0
    a7a0:	fmov	d0, x2
    a7a4:	bfxil	x3, x1, #0, #48
    a7a8:	bfi	x3, x4, #48, #15
    a7ac:	bfi	x3, x0, #63, #1
    a7b0:	fmov	v0.d[1], x3
    a7b4:	ret
    a7b8:	mov	x1, #0x0                   	// #0
    a7bc:	mov	x3, #0x0                   	// #0
    a7c0:	bfxil	x3, x1, #0, #48
    a7c4:	mov	w4, #0x7fff                	// #32767
    a7c8:	mov	x2, #0x0                   	// #0
    a7cc:	fmov	d0, x2
    a7d0:	bfi	x3, x4, #48, #15
    a7d4:	bfi	x3, x0, #63, #1
    a7d8:	fmov	v0.d[1], x3
    a7dc:	ret
    a7e0:	ret
    a7e4:	nop

000000000000a7e8 <__extenddftf2@@GCC_3.0>:
    a7e8:	mrs	x0, fpcr
    a7ec:	fmov	x0, d0
    a7f0:	ubfx	x1, x0, #52, #11
    a7f4:	lsr	x4, x0, #63
    a7f8:	add	x2, x1, #0x1
    a7fc:	and	w4, w4, #0xff
    a800:	tst	x2, #0x7fe
    a804:	ubfx	x0, x0, #0, #52
    a808:	b.eq	a83c <__extenddftf2@@GCC_3.0+0x54>  // b.none
    a80c:	lsr	x5, x0, #4
    a810:	mov	x3, #0x0                   	// #0
    a814:	and	x5, x5, #0xffffffffffff
    a818:	mov	w2, #0x3c00                	// #15360
    a81c:	add	w1, w1, w2
    a820:	lsl	x0, x0, #60
    a824:	bfxil	x3, x5, #0, #48
    a828:	fmov	d0, x0
    a82c:	bfi	x3, x1, #48, #15
    a830:	bfi	x3, x4, #63, #1
    a834:	fmov	v0.d[1], x3
    a838:	ret
    a83c:	cbnz	x1, a890 <__extenddftf2@@GCC_3.0+0xa8>
    a840:	cbz	x0, a8dc <__extenddftf2@@GCC_3.0+0xf4>
    a844:	clz	x2, x0
    a848:	cmp	w2, #0xe
    a84c:	b.gt	a928 <__extenddftf2@@GCC_3.0+0x140>
    a850:	add	w1, w2, #0x31
    a854:	mov	w5, #0xf                   	// #15
    a858:	sub	w5, w5, w2
    a85c:	lsr	x5, x0, x5
    a860:	lsl	x0, x0, x1
    a864:	and	x5, x5, #0xffffffffffff
    a868:	mov	w1, #0x3c0c                	// #15372
    a86c:	mov	x3, #0x0                   	// #0
    a870:	sub	w1, w1, w2
    a874:	and	w1, w1, #0x7fff
    a878:	bfxil	x3, x5, #0, #48
    a87c:	fmov	d0, x0
    a880:	bfi	x3, x1, #48, #15
    a884:	bfi	x3, x4, #63, #1
    a888:	fmov	v0.d[1], x3
    a88c:	ret
    a890:	cbz	x0, a900 <__extenddftf2@@GCC_3.0+0x118>
    a894:	lsr	x1, x0, #4
    a898:	mov	x3, #0x0                   	// #0
    a89c:	orr	x1, x1, #0x800000000000
    a8a0:	lsl	x2, x0, #60
    a8a4:	fmov	d0, x2
    a8a8:	bfxil	x3, x1, #0, #48
    a8ac:	orr	x3, x3, #0x7fff000000000000
    a8b0:	bfi	x3, x4, #63, #1
    a8b4:	fmov	v0.d[1], x3
    a8b8:	tbnz	x0, #51, a924 <__extenddftf2@@GCC_3.0+0x13c>
    a8bc:	stp	x29, x30, [sp, #-32]!
    a8c0:	mov	w0, #0x1                   	// #1
    a8c4:	mov	x29, sp
    a8c8:	str	q0, [sp, #16]
    a8cc:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    a8d0:	ldr	q0, [sp, #16]
    a8d4:	ldp	x29, x30, [sp], #32
    a8d8:	ret
    a8dc:	mov	x5, #0x0                   	// #0
    a8e0:	mov	x3, #0x0                   	// #0
    a8e4:	bfxil	x3, x5, #0, #48
    a8e8:	mov	w1, #0x0                   	// #0
    a8ec:	fmov	d0, x0
    a8f0:	bfi	x3, x1, #48, #15
    a8f4:	bfi	x3, x4, #63, #1
    a8f8:	fmov	v0.d[1], x3
    a8fc:	ret
    a900:	mov	x5, #0x0                   	// #0
    a904:	mov	x3, #0x0                   	// #0
    a908:	bfxil	x3, x5, #0, #48
    a90c:	mov	w1, #0x7fff                	// #32767
    a910:	fmov	d0, x0
    a914:	bfi	x3, x1, #48, #15
    a918:	bfi	x3, x4, #63, #1
    a91c:	fmov	v0.d[1], x3
    a920:	ret
    a924:	ret
    a928:	sub	w5, w2, #0xf
    a92c:	lsl	x5, x0, x5
    a930:	mov	x0, #0x0                   	// #0
    a934:	b	a864 <__extenddftf2@@GCC_3.0+0x7c>
    a938:	mrs	x0, fpcr
    a93c:	umov	w1, v0.h[0]
    a940:	mov	w0, #0x0                   	// #0
    a944:	bfxil	w0, w1, #0, #16
    a948:	and	w4, w0, #0x3ff
    a94c:	and	x2, x0, #0x3ff
    a950:	ubfx	x1, x0, #10, #5
    a954:	ubfx	x0, x0, #15, #1
    a958:	add	x3, x1, #0x1
    a95c:	tst	x3, #0x1e
    a960:	b.eq	a990 <__extenddftf2@@GCC_3.0+0x1a8>  // b.none
    a964:	lsl	x4, x2, #38
    a968:	mov	x3, #0x0                   	// #0
    a96c:	mov	w2, #0x3ff0                	// #16368
    a970:	add	w1, w1, w2
    a974:	bfxil	x3, x4, #0, #48
    a978:	mov	x2, #0x0                   	// #0
    a97c:	fmov	d0, x2
    a980:	bfi	x3, x1, #48, #15
    a984:	bfi	x3, x0, #63, #1
    a988:	fmov	v0.d[1], x3
    a98c:	ret
    a990:	cbnz	x1, a9c0 <__extenddftf2@@GCC_3.0+0x1d8>
    a994:	cbnz	x2, aa0c <__extenddftf2@@GCC_3.0+0x224>
    a998:	mov	x4, #0x0                   	// #0
    a99c:	mov	x3, #0x0                   	// #0
    a9a0:	bfxil	x3, x4, #0, #48
    a9a4:	mov	w1, #0x0                   	// #0
    a9a8:	mov	x2, #0x0                   	// #0
    a9ac:	fmov	d0, x2
    a9b0:	bfi	x3, x1, #48, #15
    a9b4:	bfi	x3, x0, #63, #1
    a9b8:	fmov	v0.d[1], x3
    a9bc:	ret
    a9c0:	cbz	x2, aa48 <__extenddftf2@@GCC_3.0+0x260>
    a9c4:	lsl	x1, x2, #38
    a9c8:	mov	x3, #0x0                   	// #0
    a9cc:	orr	x1, x1, #0x800000000000
    a9d0:	mov	x2, #0x0                   	// #0
    a9d4:	fmov	d0, x2
    a9d8:	bfxil	x3, x1, #0, #48
    a9dc:	orr	x3, x3, #0x7fff000000000000
    a9e0:	bfi	x3, x0, #63, #1
    a9e4:	fmov	v0.d[1], x3
    a9e8:	tbnz	w4, #9, aa70 <__extenddftf2@@GCC_3.0+0x288>
    a9ec:	stp	x29, x30, [sp, #-32]!
    a9f0:	mov	w0, #0x1                   	// #1
    a9f4:	mov	x29, sp
    a9f8:	str	q0, [sp, #16]
    a9fc:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    aa00:	ldr	q0, [sp, #16]
    aa04:	ldp	x29, x30, [sp], #32
    aa08:	ret
    aa0c:	clz	x3, x2
    aa10:	mov	w1, #0x4026                	// #16422
    aa14:	sub	w4, w3, #0xf
    aa18:	sub	w1, w1, w3
    aa1c:	mov	x3, #0x0                   	// #0
    aa20:	and	w1, w1, #0x7fff
    aa24:	lsl	x4, x2, x4
    aa28:	and	x4, x4, #0xffffffffffff
    aa2c:	mov	x2, #0x0                   	// #0
    aa30:	fmov	d0, x2
    aa34:	bfxil	x3, x4, #0, #48
    aa38:	bfi	x3, x1, #48, #15
    aa3c:	bfi	x3, x0, #63, #1
    aa40:	fmov	v0.d[1], x3
    aa44:	ret
    aa48:	mov	x4, #0x0                   	// #0
    aa4c:	mov	x3, #0x0                   	// #0
    aa50:	bfxil	x3, x4, #0, #48
    aa54:	mov	w1, #0x7fff                	// #32767
    aa58:	mov	x2, #0x0                   	// #0
    aa5c:	fmov	d0, x2
    aa60:	bfi	x3, x1, #48, #15
    aa64:	bfi	x3, x0, #63, #1
    aa68:	fmov	v0.d[1], x3
    aa6c:	ret
    aa70:	ret
    aa74:	nop

000000000000aa78 <__trunctfsf2@@GCC_3.0>:
    aa78:	stp	x29, x30, [sp, #-48]!
    aa7c:	mov	x29, sp
    aa80:	str	x19, [sp, #16]
    aa84:	str	q0, [sp, #32]
    aa88:	ldp	x5, x0, [sp, #32]
    aa8c:	mrs	x3, fpcr
    aa90:	ubfx	x4, x0, #48, #15
    aa94:	lsr	x6, x0, #63
    aa98:	add	x1, x4, #0x1
    aa9c:	ubfiz	x0, x0, #3, #48
    aaa0:	orr	x0, x0, x5, lsr #61
    aaa4:	tst	x1, #0x7ffe
    aaa8:	and	w6, w6, #0xff
    aaac:	lsl	x5, x5, #3
    aab0:	b.eq	ab30 <__trunctfsf2@@GCC_3.0+0xb8>  // b.none
    aab4:	mov	x1, #0xffffffffffffc080    	// #-16256
    aab8:	add	x4, x4, x1
    aabc:	cmp	x4, #0xfe
    aac0:	b.le	ab8c <__trunctfsf2@@GCC_3.0+0x114>
    aac4:	ands	x0, x3, #0xc00000
    aac8:	b.eq	ac24 <__trunctfsf2@@GCC_3.0+0x1ac>  // b.none
    aacc:	cmp	x0, #0x400, lsl #12
    aad0:	b.eq	ad00 <__trunctfsf2@@GCC_3.0+0x288>  // b.none
    aad4:	cmp	x0, #0x800, lsl #12
    aad8:	csel	w7, w6, wzr, eq  // eq = none
    aadc:	cbnz	w7, ac24 <__trunctfsf2@@GCC_3.0+0x1ac>
    aae0:	mov	x4, #0xfe                  	// #254
    aae4:	mov	x1, #0xffffffffffffffff    	// #-1
    aae8:	mov	w0, #0x14                  	// #20
    aaec:	b.ne	abcc <__trunctfsf2@@GCC_3.0+0x154>  // b.any
    aaf0:	cmp	w6, #0x0
    aaf4:	add	x2, x1, #0x8
    aaf8:	csel	x1, x2, x1, ne  // ne = any
    aafc:	and	x2, x1, #0x4000000
    ab00:	cbnz	w7, abd4 <__trunctfsf2@@GCC_3.0+0x15c>
    ab04:	cbnz	x2, abdc <__trunctfsf2@@GCC_3.0+0x164>
    ab08:	lsr	x3, x1, #3
    ab0c:	and	w2, w4, #0xff
    ab10:	mov	w1, w3
    ab14:	bfi	w1, w2, #23, #9
    ab18:	orr	w19, w1, w6, lsl #31
    ab1c:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    ab20:	fmov	s0, w19
    ab24:	ldr	x19, [sp, #16]
    ab28:	ldp	x29, x30, [sp], #48
    ab2c:	ret
    ab30:	orr	x5, x0, x5
    ab34:	cbnz	x4, ab4c <__trunctfsf2@@GCC_3.0+0xd4>
    ab38:	cbnz	x5, abfc <__trunctfsf2@@GCC_3.0+0x184>
    ab3c:	mov	w4, #0x0                   	// #0
    ab40:	mov	w0, #0x0                   	// #0
    ab44:	mov	x1, #0x0                   	// #0
    ab48:	b	ab70 <__trunctfsf2@@GCC_3.0+0xf8>
    ab4c:	cbz	x5, ac34 <__trunctfsf2@@GCC_3.0+0x1bc>
    ab50:	lsr	x2, x0, #50
    ab54:	lsr	x1, x0, #28
    ab58:	eor	w0, w2, #0x1
    ab5c:	mov	x2, #0x7fff                	// #32767
    ab60:	cmp	x4, x2
    ab64:	orr	x1, x1, #0x400000
    ab68:	csel	w0, w0, wzr, eq  // eq = none
    ab6c:	mov	w4, #0xff                  	// #255
    ab70:	bfi	w1, w4, #23, #9
    ab74:	orr	w19, w1, w6, lsl #31
    ab78:	cbnz	w0, ab1c <__trunctfsf2@@GCC_3.0+0xa4>
    ab7c:	fmov	s0, w19
    ab80:	ldr	x19, [sp, #16]
    ab84:	ldp	x29, x30, [sp], #48
    ab88:	ret
    ab8c:	cmp	x4, #0x0
    ab90:	b.le	ac44 <__trunctfsf2@@GCC_3.0+0x1cc>
    ab94:	orr	x5, x5, x0, lsl #39
    ab98:	mov	w7, #0x0                   	// #0
    ab9c:	cmp	x5, #0x0
    aba0:	cset	x1, ne  // ne = any
    aba4:	orr	x1, x1, x0, lsr #25
    aba8:	tst	x1, #0x7
    abac:	b.eq	acdc <__trunctfsf2@@GCC_3.0+0x264>  // b.none
    abb0:	and	x2, x3, #0xc00000
    abb4:	cmp	x2, #0x400, lsl #12
    abb8:	b.eq	ac14 <__trunctfsf2@@GCC_3.0+0x19c>  // b.none
    abbc:	cmp	x2, #0x800, lsl #12
    abc0:	mov	w0, #0x10                  	// #16
    abc4:	b.eq	aaf0 <__trunctfsf2@@GCC_3.0+0x78>  // b.none
    abc8:	cbz	x2, acec <__trunctfsf2@@GCC_3.0+0x274>
    abcc:	and	x2, x1, #0x4000000
    abd0:	cbz	w7, abd8 <__trunctfsf2@@GCC_3.0+0x160>
    abd4:	orr	w0, w0, #0x8
    abd8:	cbz	x2, ace0 <__trunctfsf2@@GCC_3.0+0x268>
    abdc:	cmp	x4, #0xfe
    abe0:	add	x4, x4, #0x1
    abe4:	b.eq	ac9c <__trunctfsf2@@GCC_3.0+0x224>  // b.none
    abe8:	ubfx	x2, x1, #3, #23
    abec:	orr	w4, w2, w4, lsl #23
    abf0:	orr	w19, w4, w6, lsl #31
    abf4:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    abf8:	b	ab20 <__trunctfsf2@@GCC_3.0+0xa8>
    abfc:	and	x2, x3, #0xc00000
    ac00:	mov	w7, #0x1                   	// #1
    ac04:	cmp	x2, #0x400, lsl #12
    ac08:	mov	x4, #0x0                   	// #0
    ac0c:	mov	x1, #0x1                   	// #1
    ac10:	b.ne	abbc <__trunctfsf2@@GCC_3.0+0x144>  // b.any
    ac14:	cbnz	w6, ac1c <__trunctfsf2@@GCC_3.0+0x1a4>
    ac18:	add	x1, x1, #0x8
    ac1c:	mov	w0, #0x10                  	// #16
    ac20:	b	aafc <__trunctfsf2@@GCC_3.0+0x84>
    ac24:	mov	w4, #0xff                  	// #255
    ac28:	mov	w0, #0x14                  	// #20
    ac2c:	mov	x1, #0x0                   	// #0
    ac30:	b	ab70 <__trunctfsf2@@GCC_3.0+0xf8>
    ac34:	mov	w4, #0xff                  	// #255
    ac38:	mov	w0, #0x0                   	// #0
    ac3c:	mov	x1, #0x0                   	// #0
    ac40:	b	ab70 <__trunctfsf2@@GCC_3.0+0xf8>
    ac44:	cmn	x4, #0x17
    ac48:	b.lt	abfc <__trunctfsf2@@GCC_3.0+0x184>  // b.tstop
    ac4c:	orr	x0, x0, #0x8000000000000
    ac50:	add	w2, w4, #0x26
    ac54:	mov	w1, #0x1a                  	// #26
    ac58:	sub	w1, w1, w4
    ac5c:	lsl	x2, x0, x2
    ac60:	orr	x5, x2, x5
    ac64:	cmp	x5, #0x0
    ac68:	lsr	x0, x0, x1
    ac6c:	cset	x1, ne  // ne = any
    ac70:	orr	x1, x0, x1
    ac74:	ands	x2, x1, #0x7
    ac78:	b.eq	ac88 <__trunctfsf2@@GCC_3.0+0x210>  // b.none
    ac7c:	mov	w7, #0x1                   	// #1
    ac80:	mov	x4, #0x0                   	// #0
    ac84:	b	abb0 <__trunctfsf2@@GCC_3.0+0x138>
    ac88:	tbz	w3, #11, acd8 <__trunctfsf2@@GCC_3.0+0x260>
    ac8c:	mov	w0, #0x0                   	// #0
    ac90:	mov	x4, #0x0                   	// #0
    ac94:	orr	w0, w0, #0x8
    ac98:	b	abd8 <__trunctfsf2@@GCC_3.0+0x160>
    ac9c:	mov	w2, w4
    aca0:	ands	x3, x3, #0xc00000
    aca4:	b.eq	accc <__trunctfsf2@@GCC_3.0+0x254>  // b.none
    aca8:	cmp	x3, #0x400, lsl #12
    acac:	b.eq	ad18 <__trunctfsf2@@GCC_3.0+0x2a0>  // b.none
    acb0:	cmp	x3, #0x800, lsl #12
    acb4:	mov	w3, #0xfe                  	// #254
    acb8:	csel	w1, w6, wzr, eq  // eq = none
    acbc:	mov	x4, #0x1fffffffffffffff    	// #2305843009213693951
    acc0:	cmp	w1, #0x0
    acc4:	csel	w2, w2, w3, ne  // ne = any
    acc8:	csel	x3, xzr, x4, ne  // ne = any
    accc:	mov	w1, #0x14                  	// #20
    acd0:	orr	w0, w0, w1
    acd4:	b	ab10 <__trunctfsf2@@GCC_3.0+0x98>
    acd8:	mov	x4, #0x0                   	// #0
    acdc:	mov	w0, #0x0                   	// #0
    ace0:	and	w4, w4, #0xff
    ace4:	lsr	x1, x1, #3
    ace8:	b	ab70 <__trunctfsf2@@GCC_3.0+0xf8>
    acec:	and	x2, x1, #0xf
    acf0:	cmp	x2, #0x4
    acf4:	add	x2, x1, #0x4
    acf8:	csel	x1, x2, x1, ne  // ne = any
    acfc:	b	aafc <__trunctfsf2@@GCC_3.0+0x84>
    ad00:	cbz	w6, ac24 <__trunctfsf2@@GCC_3.0+0x1ac>
    ad04:	mov	x4, #0xfe                  	// #254
    ad08:	mov	w0, #0x14                  	// #20
    ad0c:	mov	w7, #0x0                   	// #0
    ad10:	mov	x1, #0xffffffffffffffff    	// #-1
    ad14:	b	aafc <__trunctfsf2@@GCC_3.0+0x84>
    ad18:	cmp	w6, #0x0
    ad1c:	mov	w1, #0xfe                  	// #254
    ad20:	csel	w2, w4, w1, eq  // eq = none
    ad24:	mov	x4, #0x1fffffffffffffff    	// #2305843009213693951
    ad28:	csel	x3, xzr, x4, eq  // eq = none
    ad2c:	b	accc <__trunctfsf2@@GCC_3.0+0x254>

000000000000ad30 <__trunctfdf2@@GCC_3.0>:
    ad30:	stp	x29, x30, [sp, #-48]!
    ad34:	mov	x29, sp
    ad38:	str	x19, [sp, #16]
    ad3c:	str	q0, [sp, #32]
    ad40:	ldp	x3, x0, [sp, #32]
    ad44:	mrs	x6, fpcr
    ad48:	ubfx	x2, x0, #48, #15
    ad4c:	lsr	x4, x0, #63
    ad50:	add	x1, x2, #0x1
    ad54:	ubfiz	x0, x0, #3, #48
    ad58:	tst	x1, #0x7ffe
    ad5c:	and	w4, w4, #0xff
    ad60:	orr	x0, x0, x3, lsr #61
    ad64:	lsl	x5, x3, #3
    ad68:	b.eq	ade8 <__trunctfdf2@@GCC_3.0+0xb8>  // b.none
    ad6c:	mov	x1, #0xffffffffffffc400    	// #-15360
    ad70:	add	x2, x2, x1
    ad74:	cmp	x2, #0x7fe
    ad78:	b.le	ae50 <__trunctfdf2@@GCC_3.0+0x120>
    ad7c:	ands	x0, x6, #0xc00000
    ad80:	b.eq	aee8 <__trunctfdf2@@GCC_3.0+0x1b8>  // b.none
    ad84:	cmp	x0, #0x400, lsl #12
    ad88:	b.eq	b008 <__trunctfdf2@@GCC_3.0+0x2d8>  // b.none
    ad8c:	cmp	x0, #0x800, lsl #12
    ad90:	csel	w7, w4, wzr, eq  // eq = none
    ad94:	cbnz	w7, aee8 <__trunctfdf2@@GCC_3.0+0x1b8>
    ad98:	mov	w0, #0x14                  	// #20
    ad9c:	mov	x1, #0xffffffffffffffff    	// #-1
    ada0:	mov	x2, #0x7fe                 	// #2046
    ada4:	b.ne	ae94 <__trunctfdf2@@GCC_3.0+0x164>  // b.any
    ada8:	cmp	w4, #0x0
    adac:	add	x3, x1, #0x8
    adb0:	csel	x1, x3, x1, ne  // ne = any
    adb4:	and	x3, x1, #0x80000000000000
    adb8:	cbnz	w7, ae9c <__trunctfdf2@@GCC_3.0+0x16c>
    adbc:	cbnz	x3, aea4 <__trunctfdf2@@GCC_3.0+0x174>
    adc0:	lsr	x1, x1, #3
    adc4:	and	w3, w2, #0x7ff
    adc8:	and	x4, x4, #0xff
    adcc:	bfi	x1, x3, #52, #12
    add0:	orr	x19, x1, x4, lsl #63
    add4:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    add8:	fmov	d0, x19
    addc:	ldr	x19, [sp, #16]
    ade0:	ldp	x29, x30, [sp], #48
    ade4:	ret
    ade8:	orr	x1, x0, x5
    adec:	cbnz	x2, ae04 <__trunctfdf2@@GCC_3.0+0xd4>
    adf0:	cbnz	x1, aec0 <__trunctfdf2@@GCC_3.0+0x190>
    adf4:	mov	w2, #0x0                   	// #0
    adf8:	mov	w0, #0x0                   	// #0
    adfc:	mov	x1, #0x0                   	// #0
    ae00:	b	ae30 <__trunctfdf2@@GCC_3.0+0x100>
    ae04:	cbz	x1, aef8 <__trunctfdf2@@GCC_3.0+0x1c8>
    ae08:	mov	x3, #0x7fff                	// #32767
    ae0c:	extr	x1, x0, x5, #60
    ae10:	lsr	x0, x0, #50
    ae14:	cmp	x2, x3
    ae18:	lsr	x1, x1, #3
    ae1c:	eor	w0, w0, #0x1
    ae20:	orr	x1, x1, #0x8000000000000
    ae24:	csel	w0, w0, wzr, eq  // eq = none
    ae28:	mov	w2, #0x7ff                 	// #2047
    ae2c:	nop
    ae30:	and	x4, x4, #0xff
    ae34:	bfi	x1, x2, #52, #12
    ae38:	orr	x19, x1, x4, lsl #63
    ae3c:	cbnz	w0, add4 <__trunctfdf2@@GCC_3.0+0xa4>
    ae40:	fmov	d0, x19
    ae44:	ldr	x19, [sp, #16]
    ae48:	ldp	x29, x30, [sp], #48
    ae4c:	ret
    ae50:	cmp	x2, #0x0
    ae54:	b.le	af08 <__trunctfdf2@@GCC_3.0+0x1d8>
    ae58:	cmp	xzr, x3, lsl #7
    ae5c:	mov	w7, #0x0                   	// #0
    ae60:	cset	x1, ne  // ne = any
    ae64:	orr	x5, x1, x5, lsr #60
    ae68:	orr	x1, x5, x0, lsl #4
    ae6c:	mov	w0, #0x0                   	// #0
    ae70:	tst	x5, #0x7
    ae74:	b.eq	afc0 <__trunctfdf2@@GCC_3.0+0x290>  // b.none
    ae78:	and	x3, x6, #0xc00000
    ae7c:	cmp	x3, #0x400, lsl #12
    ae80:	b.eq	aed8 <__trunctfdf2@@GCC_3.0+0x1a8>  // b.none
    ae84:	cmp	x3, #0x800, lsl #12
    ae88:	mov	w0, #0x10                  	// #16
    ae8c:	b.eq	ada8 <__trunctfdf2@@GCC_3.0+0x78>  // b.none
    ae90:	cbz	x3, afcc <__trunctfdf2@@GCC_3.0+0x29c>
    ae94:	and	x3, x1, #0x80000000000000
    ae98:	cbz	w7, aea0 <__trunctfdf2@@GCC_3.0+0x170>
    ae9c:	orr	w0, w0, #0x8
    aea0:	cbz	x3, afc0 <__trunctfdf2@@GCC_3.0+0x290>
    aea4:	cmp	x2, #0x7fe
    aea8:	add	x2, x2, #0x1
    aeac:	b.eq	af68 <__trunctfdf2@@GCC_3.0+0x238>  // b.none
    aeb0:	mov	x3, #0x1fefffffffffffff    	// #2301339409586323455
    aeb4:	and	w2, w2, #0x7ff
    aeb8:	and	x1, x3, x1, lsr #3
    aebc:	b	ae30 <__trunctfdf2@@GCC_3.0+0x100>
    aec0:	and	x3, x6, #0xc00000
    aec4:	mov	w7, #0x1                   	// #1
    aec8:	cmp	x3, #0x400, lsl #12
    aecc:	mov	x2, #0x0                   	// #0
    aed0:	mov	x1, #0x1                   	// #1
    aed4:	b.ne	ae84 <__trunctfdf2@@GCC_3.0+0x154>  // b.any
    aed8:	cbnz	w4, aee0 <__trunctfdf2@@GCC_3.0+0x1b0>
    aedc:	add	x1, x1, #0x8
    aee0:	mov	w0, #0x10                  	// #16
    aee4:	b	adb4 <__trunctfdf2@@GCC_3.0+0x84>
    aee8:	mov	w2, #0x7ff                 	// #2047
    aeec:	mov	w0, #0x14                  	// #20
    aef0:	mov	x1, #0x0                   	// #0
    aef4:	b	ae30 <__trunctfdf2@@GCC_3.0+0x100>
    aef8:	mov	w2, #0x7ff                 	// #2047
    aefc:	mov	w0, #0x0                   	// #0
    af00:	mov	x1, #0x0                   	// #0
    af04:	b	ae30 <__trunctfdf2@@GCC_3.0+0x100>
    af08:	cmn	x2, #0x34
    af0c:	b.lt	aec0 <__trunctfdf2@@GCC_3.0+0x190>  // b.tstop
    af10:	mov	x3, #0x3d                  	// #61
    af14:	sub	x7, x3, x2
    af18:	orr	x0, x0, #0x8000000000000
    af1c:	cmp	x7, #0x3f
    af20:	b.le	afe0 <__trunctfdf2@@GCC_3.0+0x2b0>
    af24:	add	w1, w2, #0x43
    af28:	cmp	x7, #0x40
    af2c:	mov	w3, #0xfffffffd            	// #-3
    af30:	sub	w2, w3, w2
    af34:	lsl	x1, x0, x1
    af38:	orr	x1, x5, x1
    af3c:	csel	x5, x1, x5, ne  // ne = any
    af40:	lsr	x0, x0, x2
    af44:	cmp	x5, #0x0
    af48:	cset	x1, ne  // ne = any
    af4c:	orr	x1, x1, x0
    af50:	cmp	x1, #0x0
    af54:	cset	w7, ne  // ne = any
    af58:	tst	x1, #0x7
    af5c:	b.eq	afa4 <__trunctfdf2@@GCC_3.0+0x274>  // b.none
    af60:	mov	x2, #0x0                   	// #0
    af64:	b	ae78 <__trunctfdf2@@GCC_3.0+0x148>
    af68:	mov	w3, w2
    af6c:	ands	x1, x6, #0xc00000
    af70:	b.eq	af98 <__trunctfdf2@@GCC_3.0+0x268>  // b.none
    af74:	cmp	x1, #0x400, lsl #12
    af78:	b.eq	b020 <__trunctfdf2@@GCC_3.0+0x2f0>  // b.none
    af7c:	cmp	x1, #0x800, lsl #12
    af80:	mov	w5, #0x7fe                 	// #2046
    af84:	csel	w1, w4, wzr, eq  // eq = none
    af88:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    af8c:	cmp	w1, #0x0
    af90:	csel	w3, w3, w5, ne  // ne = any
    af94:	csel	x1, xzr, x2, ne  // ne = any
    af98:	mov	w2, #0x14                  	// #20
    af9c:	orr	w0, w0, w2
    afa0:	b	adc8 <__trunctfdf2@@GCC_3.0+0x98>
    afa4:	and	x3, x1, #0x80000000000000
    afa8:	cbnz	x1, b038 <__trunctfdf2@@GCC_3.0+0x308>
    afac:	nop
    afb0:	mov	w0, #0x0                   	// #0
    afb4:	mov	x2, #0x1                   	// #1
    afb8:	cbnz	x3, aeb0 <__trunctfdf2@@GCC_3.0+0x180>
    afbc:	mov	x2, #0x0                   	// #0
    afc0:	and	w2, w2, #0x7ff
    afc4:	lsr	x1, x1, #3
    afc8:	b	ae30 <__trunctfdf2@@GCC_3.0+0x100>
    afcc:	and	x3, x1, #0xf
    afd0:	cmp	x3, #0x4
    afd4:	add	x3, x1, #0x4
    afd8:	csel	x1, x3, x1, ne  // ne = any
    afdc:	b	adb4 <__trunctfdf2@@GCC_3.0+0x84>
    afe0:	add	w1, w2, #0x3
    afe4:	sub	w2, w3, w2
    afe8:	lsl	x3, x5, x1
    afec:	cmp	x3, #0x0
    aff0:	cset	x3, ne  // ne = any
    aff4:	lsr	x2, x5, x2
    aff8:	orr	x2, x2, x3
    affc:	lsl	x0, x0, x1
    b000:	orr	x1, x0, x2
    b004:	b	af50 <__trunctfdf2@@GCC_3.0+0x220>
    b008:	cbz	w4, aee8 <__trunctfdf2@@GCC_3.0+0x1b8>
    b00c:	mov	w7, #0x0                   	// #0
    b010:	mov	w0, #0x14                  	// #20
    b014:	mov	x2, #0x7fe                 	// #2046
    b018:	mov	x1, #0xffffffffffffffff    	// #-1
    b01c:	b	adb4 <__trunctfdf2@@GCC_3.0+0x84>
    b020:	cmp	w4, #0x0
    b024:	mov	w1, #0x7fe                 	// #2046
    b028:	csel	w3, w2, w1, eq  // eq = none
    b02c:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    b030:	csel	x1, xzr, x2, eq  // eq = none
    b034:	b	af98 <__trunctfdf2@@GCC_3.0+0x268>
    b038:	tbz	w6, #11, afb0 <__trunctfdf2@@GCC_3.0+0x280>
    b03c:	mov	w0, #0x0                   	// #0
    b040:	mov	x2, #0x0                   	// #0
    b044:	orr	w0, w0, #0x8
    b048:	b	aea0 <__trunctfdf2@@GCC_3.0+0x170>
    b04c:	nop
    b050:	stp	x29, x30, [sp, #-48]!
    b054:	mov	x29, sp
    b058:	str	x19, [sp, #16]
    b05c:	str	q0, [sp, #32]
    b060:	ldp	x3, x0, [sp, #32]
    b064:	mrs	x6, fpcr
    b068:	ubfx	x1, x0, #48, #15
    b06c:	lsr	x19, x0, #63
    b070:	add	x4, x1, #0x1
    b074:	ubfiz	x0, x0, #3, #48
    b078:	tst	x4, #0x7ffe
    b07c:	orr	x0, x0, x3, lsr #61
    b080:	and	w4, w19, #0xff
    b084:	lsl	x3, x3, #3
    b088:	b.eq	b108 <__trunctfdf2@@GCC_3.0+0x3d8>  // b.none
    b08c:	mov	x2, #0xffffffffffffc010    	// #-16368
    b090:	add	x1, x1, x2
    b094:	cmp	x1, #0x1e
    b098:	b.le	b168 <__trunctfdf2@@GCC_3.0+0x438>
    b09c:	ands	x0, x6, #0xc00000
    b0a0:	b.eq	b204 <__trunctfdf2@@GCC_3.0+0x4d4>  // b.none
    b0a4:	cmp	x0, #0x400, lsl #12
    b0a8:	b.eq	b2e0 <__trunctfdf2@@GCC_3.0+0x5b0>  // b.none
    b0ac:	cmp	x0, #0x800, lsl #12
    b0b0:	csel	w5, w4, wzr, eq  // eq = none
    b0b4:	cbnz	w5, b204 <__trunctfdf2@@GCC_3.0+0x4d4>
    b0b8:	mov	x1, #0x1e                  	// #30
    b0bc:	mov	x2, #0xffffffffffffffff    	// #-1
    b0c0:	mov	w0, #0x14                  	// #20
    b0c4:	b.ne	b1a8 <__trunctfdf2@@GCC_3.0+0x478>  // b.any
    b0c8:	cmp	w4, #0x0
    b0cc:	add	x3, x2, #0x8
    b0d0:	csel	x2, x3, x2, ne  // ne = any
    b0d4:	and	x3, x2, #0x2000
    b0d8:	cbnz	w5, b1b0 <__trunctfdf2@@GCC_3.0+0x480>
    b0dc:	cbnz	x3, b1b8 <__trunctfdf2@@GCC_3.0+0x488>
    b0e0:	lsr	x2, x2, #3
    b0e4:	and	w1, w1, #0x1f
    b0e8:	bfi	w2, w1, #10, #22
    b0ec:	orr	w19, w2, w4, lsl #15
    b0f0:	sxth	x19, w19
    b0f4:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    b0f8:	dup	v0.4h, w19
    b0fc:	ldr	x19, [sp, #16]
    b100:	ldp	x29, x30, [sp], #48
    b104:	ret
    b108:	orr	x3, x0, x3
    b10c:	cbnz	x1, b124 <__trunctfdf2@@GCC_3.0+0x3f4>
    b110:	cbnz	x3, b1dc <__trunctfdf2@@GCC_3.0+0x4ac>
    b114:	mov	w1, #0x0                   	// #0
    b118:	mov	w0, #0x0                   	// #0
    b11c:	mov	x19, #0x0                   	// #0
    b120:	b	b148 <__trunctfdf2@@GCC_3.0+0x418>
    b124:	cbz	x3, b214 <__trunctfdf2@@GCC_3.0+0x4e4>
    b128:	lsr	x2, x0, #50
    b12c:	mov	x3, #0x7fff                	// #32767
    b130:	lsr	x0, x0, #41
    b134:	cmp	x1, x3
    b138:	eor	w2, w2, #0x1
    b13c:	orr	x19, x0, #0x200
    b140:	csel	w0, w2, wzr, eq  // eq = none
    b144:	mov	w1, #0x1f                  	// #31
    b148:	bfi	w19, w1, #10, #22
    b14c:	orr	w19, w19, w4, lsl #15
    b150:	sxth	x19, w19
    b154:	cbnz	w0, b0f4 <__trunctfdf2@@GCC_3.0+0x3c4>
    b158:	dup	v0.4h, w19
    b15c:	ldr	x19, [sp, #16]
    b160:	ldp	x29, x30, [sp], #48
    b164:	ret
    b168:	cmp	x1, #0x0
    b16c:	b.le	b224 <__trunctfdf2@@GCC_3.0+0x4f4>
    b170:	orr	x3, x3, x0, lsl #26
    b174:	mov	w5, #0x0                   	// #0
    b178:	cmp	x3, #0x0
    b17c:	cset	x19, ne  // ne = any
    b180:	orr	x2, x19, x0, lsr #38
    b184:	tst	x2, #0x7
    b188:	b.eq	b2b8 <__trunctfdf2@@GCC_3.0+0x588>  // b.none
    b18c:	and	x3, x6, #0xc00000
    b190:	cmp	x3, #0x400, lsl #12
    b194:	b.eq	b1f4 <__trunctfdf2@@GCC_3.0+0x4c4>  // b.none
    b198:	cmp	x3, #0x800, lsl #12
    b19c:	mov	w0, #0x10                  	// #16
    b1a0:	b.eq	b0c8 <__trunctfdf2@@GCC_3.0+0x398>  // b.none
    b1a4:	cbz	x3, b2c8 <__trunctfdf2@@GCC_3.0+0x598>
    b1a8:	and	x3, x2, #0x2000
    b1ac:	cbz	w5, b1b4 <__trunctfdf2@@GCC_3.0+0x484>
    b1b0:	orr	w0, w0, #0x8
    b1b4:	cbz	x3, b2bc <__trunctfdf2@@GCC_3.0+0x58c>
    b1b8:	cmp	x1, #0x1e
    b1bc:	add	x1, x1, #0x1
    b1c0:	b.eq	b27c <__trunctfdf2@@GCC_3.0+0x54c>  // b.none
    b1c4:	ubfx	x19, x2, #3, #10
    b1c8:	orr	w1, w19, w1, lsl #10
    b1cc:	orr	w19, w1, w4, lsl #15
    b1d0:	sxth	x19, w19
    b1d4:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    b1d8:	b	b0f8 <__trunctfdf2@@GCC_3.0+0x3c8>
    b1dc:	and	x3, x6, #0xc00000
    b1e0:	mov	w5, #0x1                   	// #1
    b1e4:	cmp	x3, #0x400, lsl #12
    b1e8:	mov	x1, #0x0                   	// #0
    b1ec:	mov	x2, #0x1                   	// #1
    b1f0:	b.ne	b198 <__trunctfdf2@@GCC_3.0+0x468>  // b.any
    b1f4:	cbnz	w4, b1fc <__trunctfdf2@@GCC_3.0+0x4cc>
    b1f8:	add	x2, x2, #0x8
    b1fc:	mov	w0, #0x10                  	// #16
    b200:	b	b0d4 <__trunctfdf2@@GCC_3.0+0x3a4>
    b204:	mov	w1, #0x1f                  	// #31
    b208:	mov	w0, #0x14                  	// #20
    b20c:	mov	x19, #0x0                   	// #0
    b210:	b	b148 <__trunctfdf2@@GCC_3.0+0x418>
    b214:	mov	w1, #0x1f                  	// #31
    b218:	mov	w0, #0x0                   	// #0
    b21c:	mov	x19, #0x0                   	// #0
    b220:	b	b148 <__trunctfdf2@@GCC_3.0+0x418>
    b224:	cmn	x1, #0xa
    b228:	b.lt	b1dc <__trunctfdf2@@GCC_3.0+0x4ac>  // b.tstop
    b22c:	orr	x0, x0, #0x8000000000000
    b230:	add	w5, w1, #0x19
    b234:	mov	w2, #0x27                  	// #39
    b238:	sub	w1, w2, w1
    b23c:	lsl	x5, x0, x5
    b240:	orr	x3, x5, x3
    b244:	cmp	x3, #0x0
    b248:	lsr	x0, x0, x1
    b24c:	cset	x19, ne  // ne = any
    b250:	orr	x2, x0, x19
    b254:	ands	x3, x2, #0x7
    b258:	b.eq	b268 <__trunctfdf2@@GCC_3.0+0x538>  // b.none
    b25c:	mov	w5, #0x1                   	// #1
    b260:	mov	x1, #0x0                   	// #0
    b264:	b	b18c <__trunctfdf2@@GCC_3.0+0x45c>
    b268:	tbz	w6, #11, b2b4 <__trunctfdf2@@GCC_3.0+0x584>
    b26c:	mov	w0, #0x0                   	// #0
    b270:	mov	x1, #0x0                   	// #0
    b274:	orr	w0, w0, #0x8
    b278:	b	b1b4 <__trunctfdf2@@GCC_3.0+0x484>
    b27c:	ands	x2, x6, #0xc00000
    b280:	b.eq	b2a8 <__trunctfdf2@@GCC_3.0+0x578>  // b.none
    b284:	cmp	x2, #0x400, lsl #12
    b288:	b.eq	b2f8 <__trunctfdf2@@GCC_3.0+0x5c8>  // b.none
    b28c:	cmp	x2, #0x800, lsl #12
    b290:	mov	w5, #0x1e                  	// #30
    b294:	csel	w3, w4, wzr, eq  // eq = none
    b298:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    b29c:	cmp	w3, #0x0
    b2a0:	csel	w1, w1, w5, ne  // ne = any
    b2a4:	csel	x2, xzr, x2, ne  // ne = any
    b2a8:	mov	w3, #0x14                  	// #20
    b2ac:	orr	w0, w0, w3
    b2b0:	b	b0e8 <__trunctfdf2@@GCC_3.0+0x3b8>
    b2b4:	mov	x1, #0x0                   	// #0
    b2b8:	mov	w0, #0x0                   	// #0
    b2bc:	and	w1, w1, #0x1f
    b2c0:	lsr	x19, x2, #3
    b2c4:	b	b148 <__trunctfdf2@@GCC_3.0+0x418>
    b2c8:	and	x3, x2, #0xf
    b2cc:	mov	x19, x2
    b2d0:	cmp	x3, #0x4
    b2d4:	add	x2, x2, #0x4
    b2d8:	csel	x2, x2, x19, ne  // ne = any
    b2dc:	b	b0d4 <__trunctfdf2@@GCC_3.0+0x3a4>
    b2e0:	cbz	w4, b204 <__trunctfdf2@@GCC_3.0+0x4d4>
    b2e4:	mov	x1, #0x1e                  	// #30
    b2e8:	mov	w0, #0x14                  	// #20
    b2ec:	mov	w5, #0x0                   	// #0
    b2f0:	mov	x2, #0xffffffffffffffff    	// #-1
    b2f4:	b	b0d4 <__trunctfdf2@@GCC_3.0+0x3a4>
    b2f8:	cmp	w4, #0x0
    b2fc:	mov	w2, #0x1e                  	// #30
    b300:	csel	w1, w1, w2, eq  // eq = none
    b304:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    b308:	csel	x2, xzr, x2, eq  // eq = none
    b30c:	b	b2a8 <__trunctfdf2@@GCC_3.0+0x578>
    b310:	stp	x29, x30, [sp, #-48]!
    b314:	mov	x29, sp
    b318:	str	x19, [sp, #16]
    b31c:	mrs	x0, fpcr
    b320:	umov	w0, v0.h[0]
    b324:	mov	w19, #0x0                   	// #0
    b328:	bfxil	w19, w0, #0, #16
    b32c:	ubfx	x1, x19, #10, #5
    b330:	ubfx	x0, x19, #0, #10
    b334:	cmp	x1, #0xe
    b338:	ubfx	x19, x19, #15, #1
    b33c:	b.gt	b374 <__trunctfdf2@@GCC_3.0+0x644>
    b340:	and	x0, x0, #0xffff
    b344:	mov	x19, #0x0                   	// #0
    b348:	orr	x0, x0, x1
    b34c:	mov	x1, #0x0                   	// #0
    b350:	cbz	x0, b364 <__trunctfdf2@@GCC_3.0+0x634>
    b354:	mov	w0, #0x10                  	// #16
    b358:	str	x1, [sp, #40]
    b35c:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    b360:	ldr	x1, [sp, #40]
    b364:	mov	x0, x19
    b368:	ldr	x19, [sp, #16]
    b36c:	ldp	x29, x30, [sp], #48
    b370:	ret
    b374:	and	x2, x19, #0xff
    b378:	cmp	x1, #0x1f
    b37c:	b.eq	b3c8 <__trunctfdf2@@GCC_3.0+0x698>  // b.none
    b380:	and	x0, x0, #0xffff
    b384:	cmp	x1, #0x18
    b388:	orr	x0, x0, #0x400
    b38c:	b.le	b3e8 <__trunctfdf2@@GCC_3.0+0x6b8>
    b390:	sub	w19, w1, #0x19
    b394:	subs	w3, w1, #0x59
    b398:	lsr	x4, x0, #1
    b39c:	mov	w5, #0x3f                  	// #63
    b3a0:	sub	w5, w5, w19
    b3a4:	lsl	x1, x0, x3
    b3a8:	lsl	x19, x0, x19
    b3ac:	csel	x19, xzr, x19, pl  // pl = nfrst
    b3b0:	lsr	x4, x4, x5
    b3b4:	csel	x1, x1, x4, pl  // pl = nfrst
    b3b8:	cbz	x2, b364 <__trunctfdf2@@GCC_3.0+0x634>
    b3bc:	negs	x19, x19
    b3c0:	ngc	x1, x1
    b3c4:	b	b364 <__trunctfdf2@@GCC_3.0+0x634>
    b3c8:	adrp	x1, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    b3cc:	mov	x0, #0x1                   	// #1
    b3d0:	sub	x19, x0, x2
    b3d4:	ldr	x1, [x1, #1560]
    b3d8:	asr	x2, x19, #63
    b3dc:	negs	x19, x19
    b3e0:	sbc	x1, x1, x2
    b3e4:	b	b358 <__trunctfdf2@@GCC_3.0+0x628>
    b3e8:	add	w4, w1, #0x27
    b3ec:	mov	w19, #0x19                  	// #25
    b3f0:	sub	w19, w19, w1
    b3f4:	mov	x1, #0x0                   	// #0
    b3f8:	lsl	x4, x0, x4
    b3fc:	lsr	x19, x0, x19
    b400:	cbz	x2, b40c <__trunctfdf2@@GCC_3.0+0x6dc>
    b404:	negs	x19, x19
    b408:	csetm	x1, cc  // cc = lo, ul, last
    b40c:	cbnz	x4, b354 <__trunctfdf2@@GCC_3.0+0x624>
    b410:	b	b364 <__trunctfdf2@@GCC_3.0+0x634>
    b414:	nop
    b418:	stp	x29, x30, [sp, #-48]!
    b41c:	mov	x29, sp
    b420:	str	x19, [sp, #16]
    b424:	mrs	x0, fpcr
    b428:	umov	w0, v0.h[0]
    b42c:	mov	w1, #0x0                   	// #0
    b430:	bfxil	w1, w0, #0, #16
    b434:	and	x19, x1, #0x3ff
    b438:	ubfx	x0, x1, #10, #5
    b43c:	ubfx	x1, x1, #15, #1
    b440:	cmp	x0, #0xe
    b444:	b.gt	b47c <__trunctfdf2@@GCC_3.0+0x74c>
    b448:	orr	x19, x0, x19
    b44c:	mov	x1, #0x0                   	// #0
    b450:	cbz	x19, b46c <__trunctfdf2@@GCC_3.0+0x73c>
    b454:	mov	w0, #0x10                  	// #16
    b458:	mov	x19, #0x0                   	// #0
    b45c:	mov	x1, #0x0                   	// #0
    b460:	str	x1, [sp, #40]
    b464:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    b468:	ldr	x1, [sp, #40]
    b46c:	mov	x0, x19
    b470:	ldr	x19, [sp, #16]
    b474:	ldp	x29, x30, [sp], #48
    b478:	ret
    b47c:	cmp	x0, #0x1e
    b480:	cset	w3, gt
    b484:	orr	w3, w1, w3
    b488:	cbz	w3, b4a0 <__trunctfdf2@@GCC_3.0+0x770>
    b48c:	eor	w1, w1, #0x1
    b490:	mov	w0, #0x1                   	// #1
    b494:	sbfx	x19, x1, #0, #1
    b498:	mov	x1, x19
    b49c:	b	b460 <__trunctfdf2@@GCC_3.0+0x730>
    b4a0:	mov	x2, x0
    b4a4:	orr	x19, x19, #0x400
    b4a8:	cmp	x0, #0x18
    b4ac:	b.gt	b4d4 <__trunctfdf2@@GCC_3.0+0x7a4>
    b4b0:	mov	w1, #0x19                  	// #25
    b4b4:	add	w0, w0, #0x27
    b4b8:	sub	w2, w1, w2
    b4bc:	mov	x1, #0x0                   	// #0
    b4c0:	lsl	x0, x19, x0
    b4c4:	lsr	x19, x19, x2
    b4c8:	cbz	x0, b46c <__trunctfdf2@@GCC_3.0+0x73c>
    b4cc:	mov	w0, #0x10                  	// #16
    b4d0:	b	b460 <__trunctfdf2@@GCC_3.0+0x730>
    b4d4:	sub	w4, w0, #0x19
    b4d8:	subs	w2, w0, #0x59
    b4dc:	mov	w3, #0x3f                  	// #63
    b4e0:	lsr	x0, x19, #1
    b4e4:	sub	w3, w3, w4
    b4e8:	lsl	x1, x19, x2
    b4ec:	lsl	x19, x19, x4
    b4f0:	csel	x19, xzr, x19, pl  // pl = nfrst
    b4f4:	lsr	x0, x0, x3
    b4f8:	csel	x1, x1, x0, pl  // pl = nfrst
    b4fc:	mov	x0, x19
    b500:	ldr	x19, [sp, #16]
    b504:	ldp	x29, x30, [sp], #48
    b508:	ret
    b50c:	nop
    b510:	mrs	x5, fpcr
    b514:	orr	x2, x0, x1
    b518:	cbnz	x2, b524 <__trunctfdf2@@GCC_3.0+0x7f4>
    b51c:	fmov	d0, xzr
    b520:	ret
    b524:	lsr	x2, x1, #63
    b528:	and	w6, w2, #0xff
    b52c:	mov	x2, x1
    b530:	tbnz	x1, #63, b578 <__trunctfdf2@@GCC_3.0+0x848>
    b534:	cbz	x2, b584 <__trunctfdf2@@GCC_3.0+0x854>
    b538:	and	x3, x5, #0xc00000
    b53c:	mov	x2, x3
    b540:	cbnz	x3, b680 <__trunctfdf2@@GCC_3.0+0x950>
    b544:	mov	w4, #0x1f                  	// #31
    b548:	mov	w0, #0x14                  	// #20
    b54c:	bfi	w2, w4, #10, #22
    b550:	orr	w2, w2, w6, lsl #15
    b554:	sxth	x1, w2
    b558:	fmov	d0, x1
    b55c:	stp	x29, x30, [sp, #-32]!
    b560:	mov	x29, sp
    b564:	str	s0, [sp, #28]
    b568:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    b56c:	ldr	s0, [sp, #28]
    b570:	ldp	x29, x30, [sp], #32
    b574:	ret
    b578:	negs	x0, x0
    b57c:	ngc	x2, x1
    b580:	cbnz	x2, b538 <__trunctfdf2@@GCC_3.0+0x808>
    b584:	clz	x3, x0
    b588:	mov	w4, #0x4e                  	// #78
    b58c:	sub	w3, w4, w3
    b590:	mov	x2, x0
    b594:	cmp	w3, #0x1e
    b598:	sxtw	x4, w3
    b59c:	b.gt	b538 <__trunctfdf2@@GCC_3.0+0x808>
    b5a0:	cmp	w3, #0x19
    b5a4:	b.le	b65c <__trunctfdf2@@GCC_3.0+0x92c>
    b5a8:	cmp	x4, #0x1c
    b5ac:	b.le	b6ec <__trunctfdf2@@GCC_3.0+0x9bc>
    b5b0:	sub	w0, w3, #0x1c
    b5b4:	mov	w7, #0x9c                  	// #156
    b5b8:	sub	w7, w7, w3
    b5bc:	cmp	w3, #0x5c
    b5c0:	sub	w8, w7, #0x40
    b5c4:	lsr	x9, x2, #1
    b5c8:	mov	w10, #0x3f                  	// #63
    b5cc:	sub	w10, w10, w7
    b5d0:	lsr	x0, x2, x0
    b5d4:	csel	x0, xzr, x0, pl  // pl = nfrst
    b5d8:	cmp	w8, #0x0
    b5dc:	lsl	x3, x2, x8
    b5e0:	lsr	x9, x9, x10
    b5e4:	csel	x3, x3, x9, ge  // ge = tcont
    b5e8:	lsl	x2, x2, x7
    b5ec:	csel	x2, xzr, x2, ge  // ge = tcont
    b5f0:	orr	x2, x2, x3
    b5f4:	cmp	x2, #0x0
    b5f8:	cset	x2, ne  // ne = any
    b5fc:	orr	x2, x0, x2
    b600:	tst	x2, #0x7
    b604:	and	x2, x2, #0xffffffffffffdfff
    b608:	b.eq	b77c <__trunctfdf2@@GCC_3.0+0xa4c>  // b.none
    b60c:	and	x3, x5, #0xc00000
    b610:	mov	w0, #0x10                  	// #16
    b614:	cmp	x3, #0x400, lsl #12
    b618:	b.eq	b784 <__trunctfdf2@@GCC_3.0+0xa54>  // b.none
    b61c:	cmp	x3, #0x800, lsl #12
    b620:	b.eq	b7dc <__trunctfdf2@@GCC_3.0+0xaac>  // b.none
    b624:	cbz	x3, b7b4 <__trunctfdf2@@GCC_3.0+0xa84>
    b628:	lsr	x2, x2, #3
    b62c:	and	w1, w4, #0x1f
    b630:	cmp	x2, #0x0
    b634:	ccmp	x4, #0x1f, #0x0, ne  // ne = any
    b638:	b.ne	b644 <__trunctfdf2@@GCC_3.0+0x914>  // b.any
    b63c:	orr	x2, x2, #0x200
    b640:	mov	w1, #0x1f                  	// #31
    b644:	bfi	w2, w1, #10, #22
    b648:	orr	w2, w2, w6, lsl #15
    b64c:	sxth	x1, w2
    b650:	fmov	d0, x1
    b654:	cbnz	w0, b55c <__trunctfdf2@@GCC_3.0+0x82c>
    b658:	ret
    b65c:	cmp	x4, #0x19
    b660:	b.ne	b724 <__trunctfdf2@@GCC_3.0+0x9f4>  // b.any
    b664:	and	x0, x0, #0x3ff
    b668:	mov	w1, #0x6400                	// #25600
    b66c:	orr	w0, w1, w0
    b670:	orr	w0, w0, w6, lsl #15
    b674:	sxth	x0, w0
    b678:	fmov	d0, x0
    b67c:	ret
    b680:	mvn	x0, x1
    b684:	cmp	x3, #0x400, lsl #12
    b688:	cset	w4, eq  // eq = none
    b68c:	lsr	x2, x0, #63
    b690:	tst	w4, w2
    b694:	b.ne	b7cc <__trunctfdf2@@GCC_3.0+0xa9c>  // b.any
    b698:	cmp	x3, #0x800, lsl #12
    b69c:	ccmp	w6, #0x0, #0x4, eq  // eq = none
    b6a0:	b.ne	b7cc <__trunctfdf2@@GCC_3.0+0xa9c>  // b.any
    b6a4:	cmp	x3, #0x400, lsl #12
    b6a8:	b.eq	b768 <__trunctfdf2@@GCC_3.0+0xa38>  // b.none
    b6ac:	cmp	x3, #0x800, lsl #12
    b6b0:	b.eq	b748 <__trunctfdf2@@GCC_3.0+0xa18>  // b.none
    b6b4:	cmp	x3, #0x400, lsl #12
    b6b8:	lsr	x0, x0, #63
    b6bc:	cset	w1, eq  // eq = none
    b6c0:	tst	w1, w0
    b6c4:	b.ne	b750 <__trunctfdf2@@GCC_3.0+0xa20>  // b.any
    b6c8:	cmp	x3, #0x800, lsl #12
    b6cc:	ccmp	w6, #0x0, #0x4, eq  // eq = none
    b6d0:	b.ne	b7e4 <__trunctfdf2@@GCC_3.0+0xab4>  // b.any
    b6d4:	mov	w1, #0x7bff                	// #31743
    b6d8:	mov	w0, #0x14                  	// #20
    b6dc:	orr	w1, w1, w6, lsl #15
    b6e0:	sxth	x1, w1
    b6e4:	fmov	d0, x1
    b6e8:	b	b55c <__trunctfdf2@@GCC_3.0+0x82c>
    b6ec:	b.eq	b600 <__trunctfdf2@@GCC_3.0+0x8d0>  // b.none
    b6f0:	mov	w2, #0x1c                  	// #28
    b6f4:	sub	w2, w2, w3
    b6f8:	lsl	x0, x0, x2
    b6fc:	and	x2, x0, #0xffffffffffffdfff
    b700:	tst	x0, #0x7
    b704:	b.ne	b60c <__trunctfdf2@@GCC_3.0+0x8dc>  // b.any
    b708:	and	w3, w3, #0x1f
    b70c:	ubfx	x2, x2, #3, #10
    b710:	orr	w2, w2, w3, lsl #10
    b714:	orr	w1, w2, w6, lsl #15
    b718:	sxth	x0, w1
    b71c:	fmov	d0, x0
    b720:	ret
    b724:	mov	w1, #0x19                  	// #25
    b728:	sub	w1, w1, w3
    b72c:	and	w3, w3, #0x1f
    b730:	lsl	x0, x0, x1
    b734:	bfi	w0, w3, #10, #22
    b738:	orr	w0, w0, w6, lsl #15
    b73c:	sxth	x0, w0
    b740:	fmov	d0, x0
    b744:	ret
    b748:	tbnz	x1, #63, b76c <__trunctfdf2@@GCC_3.0+0xa3c>
    b74c:	cbnz	x3, b7f4 <__trunctfdf2@@GCC_3.0+0xac4>
    b750:	ubfiz	w1, w6, #15, #1
    b754:	mov	w0, #0x14                  	// #20
    b758:	orr	w1, w1, #0x7c00
    b75c:	sxth	x1, w1
    b760:	fmov	d0, x1
    b764:	b	b55c <__trunctfdf2@@GCC_3.0+0x82c>
    b768:	tbnz	x1, #63, b74c <__trunctfdf2@@GCC_3.0+0xa1c>
    b76c:	mov	x2, #0xffffffffffffffff    	// #-1
    b770:	mov	x4, #0x1e                  	// #30
    b774:	mov	w0, #0x14                  	// #20
    b778:	b	b788 <__trunctfdf2@@GCC_3.0+0xa58>
    b77c:	mov	w0, #0x0                   	// #0
    b780:	b	b628 <__trunctfdf2@@GCC_3.0+0x8f8>
    b784:	tbnz	x1, #63, b628 <__trunctfdf2@@GCC_3.0+0x8f8>
    b788:	add	x2, x2, #0x8
    b78c:	and	x5, x2, #0x2000
    b790:	cbz	x5, b628 <__trunctfdf2@@GCC_3.0+0x8f8>
    b794:	cmp	x4, #0x1e
    b798:	add	x4, x4, #0x1
    b79c:	b.eq	b74c <__trunctfdf2@@GCC_3.0+0xa1c>  // b.none
    b7a0:	mov	x1, #0xfffffffffffffbff    	// #-1025
    b7a4:	and	w4, w4, #0x1f
    b7a8:	movk	x1, #0x1fff, lsl #48
    b7ac:	and	x2, x1, x2, lsr #3
    b7b0:	b	b54c <__trunctfdf2@@GCC_3.0+0x81c>
    b7b4:	and	x5, x2, #0xf
    b7b8:	cmp	x5, #0x4
    b7bc:	b.eq	b628 <__trunctfdf2@@GCC_3.0+0x8f8>  // b.none
    b7c0:	add	x2, x2, #0x4
    b7c4:	and	x5, x2, #0x2000
    b7c8:	b	b790 <__trunctfdf2@@GCC_3.0+0xa60>
    b7cc:	mov	w4, #0x1f                  	// #31
    b7d0:	mov	w0, #0x14                  	// #20
    b7d4:	mov	x2, #0x0                   	// #0
    b7d8:	b	b54c <__trunctfdf2@@GCC_3.0+0x81c>
    b7dc:	tbnz	x1, #63, b788 <__trunctfdf2@@GCC_3.0+0xa58>
    b7e0:	b	b628 <__trunctfdf2@@GCC_3.0+0x8f8>
    b7e4:	mov	x0, #0xfffffffffffffc00    	// #-1024
    b7e8:	fmov	d0, x0
    b7ec:	mov	w0, #0x14                  	// #20
    b7f0:	b	b55c <__trunctfdf2@@GCC_3.0+0x82c>
    b7f4:	mvn	x0, x1
    b7f8:	b	b6b4 <__trunctfdf2@@GCC_3.0+0x984>
    b7fc:	nop
    b800:	mrs	x5, fpcr
    b804:	orr	x2, x0, x1
    b808:	cbnz	x2, b814 <__trunctfdf2@@GCC_3.0+0xae4>
    b80c:	fmov	d0, xzr
    b810:	ret
    b814:	cbz	x1, b854 <__trunctfdf2@@GCC_3.0+0xb24>
    b818:	and	x2, x5, #0x800000
    b81c:	mov	w3, #0x1f                  	// #31
    b820:	mov	x1, x2
    b824:	mov	w0, #0x14                  	// #20
    b828:	cbnz	x2, b984 <__trunctfdf2@@GCC_3.0+0xc54>
    b82c:	bfi	w1, w3, #10, #22
    b830:	and	x1, x1, #0x7fff
    b834:	fmov	d0, x1
    b838:	stp	x29, x30, [sp, #-32]!
    b83c:	mov	x29, sp
    b840:	str	s0, [sp, #28]
    b844:	bl	6bb8 <__udivmodti4@@GCC_3.0+0x450>
    b848:	ldr	s0, [sp, #28]
    b84c:	ldp	x29, x30, [sp], #32
    b850:	ret
    b854:	clz	x2, x0
    b858:	mov	w1, #0x4e                  	// #78
    b85c:	sub	w2, w1, w2
    b860:	mov	x1, x0
    b864:	cmp	w2, #0x1e
    b868:	sxtw	x3, w2
    b86c:	b.gt	b818 <__trunctfdf2@@GCC_3.0+0xae8>
    b870:	cmp	w2, #0x19
    b874:	b.le	b918 <__trunctfdf2@@GCC_3.0+0xbe8>
    b878:	cmp	x3, #0x1c
    b87c:	b.le	b934 <__trunctfdf2@@GCC_3.0+0xc04>
    b880:	mov	w4, #0x9c                  	// #156
    b884:	sub	w4, w4, w2
    b888:	subs	w0, w4, #0x40
    b88c:	lsr	x7, x1, #1
    b890:	mov	w8, #0x3f                  	// #63
    b894:	sub	w8, w8, w4
    b898:	lsl	x6, x1, x0
    b89c:	sub	w0, w2, #0x1c
    b8a0:	lsl	x4, x1, x4
    b8a4:	csel	x4, xzr, x4, pl  // pl = nfrst
    b8a8:	lsr	x7, x7, x8
    b8ac:	csel	x6, x6, x7, pl  // pl = nfrst
    b8b0:	orr	x4, x4, x6
    b8b4:	lsr	x1, x1, x0
    b8b8:	cmp	x4, #0x0
    b8bc:	cset	x0, ne  // ne = any
    b8c0:	cmp	w2, #0x5c
    b8c4:	csel	x1, xzr, x1, pl  // pl = nfrst
    b8c8:	orr	x1, x0, x1
    b8cc:	tst	x1, #0x7
    b8d0:	and	x1, x1, #0xffffffffffffdfff
    b8d4:	b.eq	ba24 <__trunctfdf2@@GCC_3.0+0xcf4>  // b.none
    b8d8:	ands	x0, x5, #0xc00000
    b8dc:	b.eq	ba08 <__trunctfdf2@@GCC_3.0+0xcd8>  // b.none
    b8e0:	cmp	x0, #0x400, lsl #12
    b8e4:	b.ne	b9cc <__trunctfdf2@@GCC_3.0+0xc9c>  // b.any
    b8e8:	add	x1, x1, #0x8
    b8ec:	and	x0, x1, #0x2000
    b8f0:	cbz	x0, b9cc <__trunctfdf2@@GCC_3.0+0xc9c>
    b8f4:	cmp	x3, #0x1e
    b8f8:	add	x3, x3, #0x1
    b8fc:	b.eq	b9a8 <__trunctfdf2@@GCC_3.0+0xc78>  // b.none
    b900:	mov	x0, #0xfffffffffffffbff    	// #-1025
    b904:	and	w3, w3, #0x1f
    b908:	movk	x0, #0x1fff, lsl #48
    b90c:	and	x1, x0, x1, lsr #3
    b910:	mov	w0, #0x10                  	// #16
    b914:	b	b82c <__trunctfdf2@@GCC_3.0+0xafc>
    b918:	cmp	x3, #0x19
    b91c:	b.ne	b964 <__trunctfdf2@@GCC_3.0+0xc34>  // b.any
    b920:	and	x1, x0, #0x3ff
    b924:	mov	w0, #0x6400                	// #25600
    b928:	orr	w0, w0, w1
    b92c:	fmov	s0, w0
    b930:	ret
    b934:	b.eq	b8cc <__trunctfdf2@@GCC_3.0+0xb9c>  // b.none
    b938:	mov	w1, #0x1c                  	// #28
    b93c:	sub	w1, w1, w2
    b940:	lsl	x0, x0, x1
    b944:	and	x1, x0, #0xffffffffffffdfff
    b948:	tst	x0, #0x7
    b94c:	b.ne	b8d8 <__trunctfdf2@@GCC_3.0+0xba8>  // b.any
    b950:	ubfx	x1, x1, #3, #10
    b954:	ubfiz	x2, x2, #10, #5
    b958:	orr	x0, x2, x1
    b95c:	fmov	d0, x0
    b960:	ret
    b964:	mov	w1, #0x19                  	// #25
    b968:	sub	w1, w1, w2
    b96c:	and	w2, w2, #0x1f
    b970:	lsl	x0, x0, x1
    b974:	bfi	w0, w2, #10, #22
    b978:	and	x0, x0, #0x7fff
    b97c:	fmov	d0, x0
    b980:	ret
    b984:	ands	x0, x5, #0xc00000
    b988:	b.eq	ba00 <__trunctfdf2@@GCC_3.0+0xcd0>  // b.none
    b98c:	cmp	x0, #0x400, lsl #12
    b990:	b.ne	b9ac <__trunctfdf2@@GCC_3.0+0xc7c>  // b.any
    b994:	mov	x1, #0x7                   	// #7
    b998:	lsr	x1, x1, #3
    b99c:	mov	w2, #0x1e                  	// #30
    b9a0:	mov	w0, #0x14                  	// #20
    b9a4:	b	b9ec <__trunctfdf2@@GCC_3.0+0xcbc>
    b9a8:	and	x2, x5, #0x800000
    b9ac:	mov	x0, #0x7c00                	// #31744
    b9b0:	fmov	d0, x0
    b9b4:	mov	w0, #0x14                  	// #20
    b9b8:	cbz	x2, b838 <__trunctfdf2@@GCC_3.0+0xb08>
    b9bc:	mov	x0, #0x7bff                	// #31743
    b9c0:	fmov	d0, x0
    b9c4:	mov	w0, #0x14                  	// #20
    b9c8:	b	b838 <__trunctfdf2@@GCC_3.0+0xb08>
    b9cc:	mov	w0, #0x10                  	// #16
    b9d0:	lsr	x1, x1, #3
    b9d4:	and	w2, w2, #0x1f
    b9d8:	cmp	x1, #0x0
    b9dc:	ccmp	x3, #0x1f, #0x0, ne  // ne = any
    b9e0:	b.ne	b9ec <__trunctfdf2@@GCC_3.0+0xcbc>  // b.any
    b9e4:	orr	x1, x1, #0x200
    b9e8:	mov	w2, #0x1f                  	// #31
    b9ec:	bfi	w1, w2, #10, #22
    b9f0:	and	x1, x1, #0x7fff
    b9f4:	fmov	d0, x1
    b9f8:	cbnz	w0, b838 <__trunctfdf2@@GCC_3.0+0xb08>
    b9fc:	ret
    ba00:	mov	x1, #0x3                   	// #3
    ba04:	b	b998 <__trunctfdf2@@GCC_3.0+0xc68>
    ba08:	and	x4, x1, #0xf
    ba0c:	mov	w0, #0x10                  	// #16
    ba10:	cmp	x4, #0x4
    ba14:	b.eq	b9d0 <__trunctfdf2@@GCC_3.0+0xca0>  // b.none
    ba18:	add	x1, x1, #0x4
    ba1c:	and	x0, x1, #0x2000
    ba20:	b	b8f0 <__trunctfdf2@@GCC_3.0+0xbc0>
    ba24:	mov	w0, #0x0                   	// #0
    ba28:	b	b9d0 <__trunctfdf2@@GCC_3.0+0xca0>
    ba2c:	nop

000000000000ba30 <__enable_execute_stack@@GCC_3.4.2>:
    ba30:	ret
    ba34:	nop
    ba38:	and	w5, w0, #0xff
    ba3c:	cmp	w5, #0x50
    ba40:	b.eq	bb58 <__enable_execute_stack@@GCC_3.4.2+0x128>  // b.none
    ba44:	and	w4, w5, #0xf
    ba48:	cmp	w4, #0x4
    ba4c:	b.eq	ba68 <__enable_execute_stack@@GCC_3.4.2+0x38>  // b.none
    ba50:	b.ls	ba7c <__enable_execute_stack@@GCC_3.4.2+0x4c>  // b.plast
    ba54:	cmp	w4, #0xb
    ba58:	b.eq	bb7c <__enable_execute_stack@@GCC_3.4.2+0x14c>  // b.none
    ba5c:	b.ls	bad8 <__enable_execute_stack@@GCC_3.4.2+0xa8>  // b.plast
    ba60:	cmp	w4, #0xc
    ba64:	b.ne	bb8c <__enable_execute_stack@@GCC_3.4.2+0x15c>  // b.any
    ba68:	mov	x0, x2
    ba6c:	ldr	x4, [x0], #8
    ba70:	cbnz	x4, bb38 <__enable_execute_stack@@GCC_3.4.2+0x108>
    ba74:	str	x4, [x3]
    ba78:	ret
    ba7c:	cmp	w4, #0x2
    ba80:	b.eq	bb6c <__enable_execute_stack@@GCC_3.4.2+0x13c>  // b.none
    ba84:	b.ls	baa0 <__enable_execute_stack@@GCC_3.4.2+0x70>  // b.plast
    ba88:	cmp	w4, #0x3
    ba8c:	b.ne	bb8c <__enable_execute_stack@@GCC_3.4.2+0x15c>  // b.any
    ba90:	mov	x0, x2
    ba94:	ldr	w4, [x0], #4
    ba98:	cbz	x4, ba74 <__enable_execute_stack@@GCC_3.4.2+0x44>
    ba9c:	b	bb38 <__enable_execute_stack@@GCC_3.4.2+0x108>
    baa0:	cbz	w4, ba68 <__enable_execute_stack@@GCC_3.4.2+0x38>
    baa4:	cmp	w4, #0x1
    baa8:	b.ne	bb8c <__enable_execute_stack@@GCC_3.4.2+0x15c>  // b.any
    baac:	mov	x0, x2
    bab0:	mov	x4, #0x0                   	// #0
    bab4:	mov	w7, #0x0                   	// #0
    bab8:	ldrb	w8, [x0], #1
    babc:	and	x6, x8, #0x7f
    bac0:	lsl	x6, x6, x7
    bac4:	add	w7, w7, #0x7
    bac8:	orr	x4, x4, x6
    bacc:	tbnz	w8, #7, bab8 <__enable_execute_stack@@GCC_3.4.2+0x88>
    bad0:	cbz	x4, ba74 <__enable_execute_stack@@GCC_3.4.2+0x44>
    bad4:	b	bb38 <__enable_execute_stack@@GCC_3.4.2+0x108>
    bad8:	cmp	w4, #0x9
    badc:	b.eq	baf8 <__enable_execute_stack@@GCC_3.4.2+0xc8>  // b.none
    bae0:	cmp	w4, #0xa
    bae4:	b.ne	bb8c <__enable_execute_stack@@GCC_3.4.2+0x15c>  // b.any
    bae8:	mov	x0, x2
    baec:	ldrsh	x4, [x0], #2
    baf0:	cbz	x4, ba74 <__enable_execute_stack@@GCC_3.4.2+0x44>
    baf4:	b	bb38 <__enable_execute_stack@@GCC_3.4.2+0x108>
    baf8:	mov	x0, x2
    bafc:	mov	x4, #0x0                   	// #0
    bb00:	mov	w7, #0x0                   	// #0
    bb04:	ldrb	w8, [x0], #1
    bb08:	and	x6, x8, #0x7f
    bb0c:	lsl	x6, x6, x7
    bb10:	add	w7, w7, #0x7
    bb14:	orr	x4, x4, x6
    bb18:	tbnz	w8, #7, bb04 <__enable_execute_stack@@GCC_3.4.2+0xd4>
    bb1c:	cmp	w7, #0x3f
    bb20:	b.hi	ba70 <__enable_execute_stack@@GCC_3.4.2+0x40>  // b.pmore
    bb24:	tbz	w8, #6, ba70 <__enable_execute_stack@@GCC_3.4.2+0x40>
    bb28:	mov	x6, #0xffffffffffffffff    	// #-1
    bb2c:	lsl	x7, x6, x7
    bb30:	orr	x4, x4, x7
    bb34:	nop
    bb38:	and	w6, w5, #0x70
    bb3c:	cmp	w6, #0x10
    bb40:	csel	x1, x2, x1, eq  // eq = none
    bb44:	add	x4, x4, x1
    bb48:	tbz	w5, #7, ba74 <__enable_execute_stack@@GCC_3.4.2+0x44>
    bb4c:	ldr	x4, [x4]
    bb50:	str	x4, [x3]
    bb54:	ret
    bb58:	add	x0, x2, #0x7
    bb5c:	and	x0, x0, #0xfffffffffffffff8
    bb60:	ldr	x4, [x0], #8
    bb64:	str	x4, [x3]
    bb68:	ret
    bb6c:	mov	x0, x2
    bb70:	ldrh	w4, [x0], #2
    bb74:	cbz	x4, ba74 <__enable_execute_stack@@GCC_3.4.2+0x44>
    bb78:	b	bb38 <__enable_execute_stack@@GCC_3.4.2+0x108>
    bb7c:	mov	x0, x2
    bb80:	ldrsw	x4, [x0], #4
    bb84:	cbz	x4, ba74 <__enable_execute_stack@@GCC_3.4.2+0x44>
    bb88:	b	bb38 <__enable_execute_stack@@GCC_3.4.2+0x108>
    bb8c:	stp	x29, x30, [sp, #-16]!
    bb90:	mov	x29, sp
    bb94:	bl	2c50 <abort@plt>
    bb98:	adrp	x2, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    bb9c:	add	x1, x2, #0x1d0
    bba0:	mov	w0, #0x8                   	// #8
    bba4:	strb	w0, [x2, #464]
    bba8:	strb	w0, [x1, #1]
    bbac:	strb	w0, [x1, #2]
    bbb0:	strb	w0, [x1, #3]
    bbb4:	strb	w0, [x1, #4]
    bbb8:	strb	w0, [x1, #5]
    bbbc:	strb	w0, [x1, #6]
    bbc0:	strb	w0, [x1, #7]
    bbc4:	strb	w0, [x1, #8]
    bbc8:	strb	w0, [x1, #9]
    bbcc:	strb	w0, [x1, #10]
    bbd0:	strb	w0, [x1, #11]
    bbd4:	strb	w0, [x1, #12]
    bbd8:	strb	w0, [x1, #13]
    bbdc:	strb	w0, [x1, #14]
    bbe0:	strb	w0, [x1, #15]
    bbe4:	strb	w0, [x1, #16]
    bbe8:	strb	w0, [x1, #17]
    bbec:	strb	w0, [x1, #18]
    bbf0:	strb	w0, [x1, #19]
    bbf4:	strb	w0, [x1, #20]
    bbf8:	strb	w0, [x1, #21]
    bbfc:	strb	w0, [x1, #22]
    bc00:	strb	w0, [x1, #23]
    bc04:	strb	w0, [x1, #24]
    bc08:	strb	w0, [x1, #25]
    bc0c:	strb	w0, [x1, #26]
    bc10:	strb	w0, [x1, #27]
    bc14:	strb	w0, [x1, #28]
    bc18:	strb	w0, [x1, #29]
    bc1c:	strb	w0, [x1, #30]
    bc20:	strb	w0, [x1, #31]
    bc24:	strb	w0, [x1, #64]
    bc28:	strb	w0, [x1, #46]
    bc2c:	strb	w0, [x1, #65]
    bc30:	strb	w0, [x1, #66]
    bc34:	strb	w0, [x1, #67]
    bc38:	strb	w0, [x1, #68]
    bc3c:	strb	w0, [x1, #69]
    bc40:	strb	w0, [x1, #70]
    bc44:	strb	w0, [x1, #71]
    bc48:	strb	w0, [x1, #72]
    bc4c:	strb	w0, [x1, #73]
    bc50:	strb	w0, [x1, #74]
    bc54:	strb	w0, [x1, #75]
    bc58:	strb	w0, [x1, #76]
    bc5c:	strb	w0, [x1, #77]
    bc60:	strb	w0, [x1, #78]
    bc64:	strb	w0, [x1, #79]
    bc68:	strb	w0, [x1, #80]
    bc6c:	strb	w0, [x1, #81]
    bc70:	strb	w0, [x1, #82]
    bc74:	strb	w0, [x1, #83]
    bc78:	strb	w0, [x1, #84]
    bc7c:	strb	w0, [x1, #85]
    bc80:	strb	w0, [x1, #86]
    bc84:	strb	w0, [x1, #87]
    bc88:	strb	w0, [x1, #88]
    bc8c:	strb	w0, [x1, #89]
    bc90:	strb	w0, [x1, #90]
    bc94:	strb	w0, [x1, #91]
    bc98:	strb	w0, [x1, #92]
    bc9c:	strb	w0, [x1, #93]
    bca0:	strb	w0, [x1, #94]
    bca4:	strb	w0, [x1, #95]
    bca8:	strb	w0, [x1, #48]
    bcac:	strb	w0, [x1, #49]
    bcb0:	strb	w0, [x1, #50]
    bcb4:	strb	w0, [x1, #51]
    bcb8:	strb	w0, [x1, #52]
    bcbc:	strb	w0, [x1, #53]
    bcc0:	strb	w0, [x1, #54]
    bcc4:	strb	w0, [x1, #55]
    bcc8:	strb	w0, [x1, #56]
    bccc:	strb	w0, [x1, #57]
    bcd0:	strb	w0, [x1, #58]
    bcd4:	strb	w0, [x1, #59]
    bcd8:	strb	w0, [x1, #60]
    bcdc:	strb	w0, [x1, #61]
    bce0:	strb	w0, [x1, #62]
    bce4:	strb	w0, [x1, #63]
    bce8:	strb	w0, [x1, #96]
    bcec:	ret
    bcf0:	stp	x29, x30, [sp, #-80]!
    bcf4:	mov	x29, sp
    bcf8:	stp	x21, x22, [sp, #32]
    bcfc:	mov	x21, x0
    bd00:	ldr	x0, [x1, #832]
    bd04:	stp	x19, x20, [sp, #16]
    bd08:	mov	x20, x1
    bd0c:	stp	x23, x24, [sp, #48]
    bd10:	tbz	x0, #62, bd1c <__enable_execute_stack@@GCC_3.4.2+0x2ec>
    bd14:	ldrb	w1, [x1, #887]
    bd18:	cbnz	w1, bd24 <__enable_execute_stack@@GCC_3.4.2+0x2f4>
    bd1c:	ldr	x1, [x20, #248]
    bd20:	cbz	x1, bde0 <__enable_execute_stack@@GCC_3.4.2+0x3b0>
    bd24:	adrp	x24, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    bd28:	add	x23, x21, #0x358
    bd2c:	add	x24, x24, #0x1d0
    bd30:	add	x22, x20, #0x358
    bd34:	mov	x19, #0x0                   	// #0
    bd38:	b	bd5c <__enable_execute_stack@@GCC_3.4.2+0x32c>
    bd3c:	cbz	x0, bd50 <__enable_execute_stack@@GCC_3.4.2+0x320>
    bd40:	ldrb	w2, [x19, x24]
    bd44:	cmp	w2, #0x8
    bd48:	b.ne	be4c <__enable_execute_stack@@GCC_3.4.2+0x41c>  // b.any
    bd4c:	str	x1, [x0]
    bd50:	add	x19, x19, #0x1
    bd54:	cmp	x19, #0x61
    bd58:	b.eq	bd98 <__enable_execute_stack@@GCC_3.4.2+0x368>  // b.none
    bd5c:	ldrb	w2, [x23, x19]
    bd60:	ldr	x0, [x21, x19, lsl #3]
    bd64:	ldr	x1, [x20, x19, lsl #3]
    bd68:	cbnz	w2, be4c <__enable_execute_stack@@GCC_3.4.2+0x41c>
    bd6c:	ldrb	w2, [x22, x19]
    bd70:	cbnz	w2, bd3c <__enable_execute_stack@@GCC_3.4.2+0x30c>
    bd74:	cmp	x1, #0x0
    bd78:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    bd7c:	ccmp	x0, x1, #0x4, ne  // ne = any
    bd80:	b.eq	bd50 <__enable_execute_stack@@GCC_3.4.2+0x320>  // b.none
    bd84:	ldrb	w2, [x24, x19]
    bd88:	add	x19, x19, #0x1
    bd8c:	bl	2aa0 <memcpy@plt>
    bd90:	cmp	x19, #0x61
    bd94:	b.ne	bd5c <__enable_execute_stack@@GCC_3.4.2+0x32c>  // b.any
    bd98:	ldr	x0, [x21, #832]
    bd9c:	tbz	x0, #62, bda8 <__enable_execute_stack@@GCC_3.4.2+0x378>
    bda0:	ldrb	w0, [x21, #887]
    bda4:	cbnz	w0, bdc8 <__enable_execute_stack@@GCC_3.4.2+0x398>
    bda8:	ldr	x1, [x21, #248]
    bdac:	mov	x0, #0x0                   	// #0
    bdb0:	cbz	x1, be0c <__enable_execute_stack@@GCC_3.4.2+0x3dc>
    bdb4:	ldp	x19, x20, [sp, #16]
    bdb8:	ldp	x21, x22, [sp, #32]
    bdbc:	ldp	x23, x24, [sp, #48]
    bdc0:	ldp	x29, x30, [sp], #80
    bdc4:	ret
    bdc8:	mov	x0, #0x0                   	// #0
    bdcc:	ldp	x19, x20, [sp, #16]
    bdd0:	ldp	x21, x22, [sp, #32]
    bdd4:	ldp	x23, x24, [sp, #48]
    bdd8:	ldp	x29, x30, [sp], #80
    bddc:	ret
    bde0:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    bde4:	ldr	x2, [x20, #784]
    bde8:	ldrb	w1, [x1, #495]
    bdec:	cmp	w1, #0x8
    bdf0:	b.ne	be4c <__enable_execute_stack@@GCC_3.4.2+0x41c>  // b.any
    bdf4:	str	x2, [sp, #72]
    bdf8:	tbz	x0, #62, be00 <__enable_execute_stack@@GCC_3.4.2+0x3d0>
    bdfc:	strb	wzr, [x20, #887]
    be00:	add	x0, sp, #0x48
    be04:	str	x0, [x20, #248]
    be08:	b	bd24 <__enable_execute_stack@@GCC_3.4.2+0x2f4>
    be0c:	ldr	x1, [x20, #832]
    be10:	ldr	x0, [x20, #248]
    be14:	tbnz	x1, #62, be40 <__enable_execute_stack@@GCC_3.4.2+0x410>
    be18:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    be1c:	ldrb	w1, [x1, #495]
    be20:	cmp	w1, #0x8
    be24:	b.ne	be4c <__enable_execute_stack@@GCC_3.4.2+0x41c>  // b.any
    be28:	ldr	x0, [x0]
    be2c:	ldr	x2, [x21, #784]
    be30:	ldr	x1, [x20, #848]
    be34:	sub	x0, x0, x2
    be38:	add	x0, x0, x1
    be3c:	b	bdb4 <__enable_execute_stack@@GCC_3.4.2+0x384>
    be40:	ldrb	w1, [x20, #887]
    be44:	cbz	w1, be18 <__enable_execute_stack@@GCC_3.4.2+0x3e8>
    be48:	b	be2c <__enable_execute_stack@@GCC_3.4.2+0x3fc>
    be4c:	bl	2c50 <abort@plt>

000000000000be50 <_Unwind_GetGR@@GCC_3.0>:
    be50:	cmp	w1, #0x61
    be54:	b.gt	beac <_Unwind_GetGR@@GCC_3.0+0x5c>
    be58:	ldr	x4, [x0, #832]
    be5c:	sxtw	x3, w1
    be60:	ldr	x2, [x0, x3, lsl #3]
    be64:	tbz	x4, #62, be74 <_Unwind_GetGR@@GCC_3.0+0x24>
    be68:	add	x0, x0, x3
    be6c:	ldrb	w0, [x0, #856]
    be70:	cbnz	w0, bea4 <_Unwind_GetGR@@GCC_3.0+0x54>
    be74:	cmp	w1, #0x2e
    be78:	b.eq	be98 <_Unwind_GetGR@@GCC_3.0+0x48>  // b.none
    be7c:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    be80:	add	x0, x0, #0x1d0
    be84:	ldrb	w0, [x0, w1, sxtw]
    be88:	cmp	w0, #0x8
    be8c:	b.ne	beac <_Unwind_GetGR@@GCC_3.0+0x5c>  // b.any
    be90:	ldr	x0, [x2]
    be94:	ret
    be98:	cntd	x0
    be9c:	sxtw	x0, w0
    bea0:	ret
    bea4:	mov	x0, x2
    bea8:	ret
    beac:	stp	x29, x30, [sp, #-16]!
    beb0:	mov	x29, sp
    beb4:	bl	2c50 <abort@plt>

000000000000beb8 <_Unwind_GetCFA@@GCC_3.3>:
    beb8:	ldr	x0, [x0, #784]
    bebc:	ret

000000000000bec0 <_Unwind_SetGR@@GCC_3.0>:
    bec0:	cmp	w1, #0x61
    bec4:	b.gt	bf08 <_Unwind_SetGR@@GCC_3.0+0x48>
    bec8:	ldr	x5, [x0, #832]
    becc:	adrp	x3, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    bed0:	add	x3, x3, #0x1d0
    bed4:	sxtw	x4, w1
    bed8:	ldrb	w1, [x3, w1, sxtw]
    bedc:	tbz	x5, #62, beec <_Unwind_SetGR@@GCC_3.0+0x2c>
    bee0:	add	x3, x0, x4
    bee4:	ldrb	w3, [x3, #856]
    bee8:	cbnz	w3, bf00 <_Unwind_SetGR@@GCC_3.0+0x40>
    beec:	cmp	w1, #0x8
    bef0:	ldr	x0, [x0, x4, lsl #3]
    bef4:	b.ne	bf08 <_Unwind_SetGR@@GCC_3.0+0x48>  // b.any
    bef8:	str	x2, [x0]
    befc:	ret
    bf00:	str	x2, [x0, x4, lsl #3]
    bf04:	ret
    bf08:	stp	x29, x30, [sp, #-16]!
    bf0c:	mov	x29, sp
    bf10:	bl	2c50 <abort@plt>
    bf14:	nop

000000000000bf18 <_Unwind_GetIP@@GCC_3.0>:
    bf18:	ldr	x0, [x0, #792]
    bf1c:	ret

000000000000bf20 <_Unwind_GetIPInfo@@GCC_4.2.0>:
    bf20:	ldr	x2, [x0, #832]
    bf24:	ldr	x0, [x0, #792]
    bf28:	lsr	x2, x2, #63
    bf2c:	str	w2, [x1]
    bf30:	ret
    bf34:	nop

000000000000bf38 <_Unwind_SetIP@@GCC_3.0>:
    bf38:	str	x1, [x0, #792]
    bf3c:	ret

000000000000bf40 <_Unwind_GetLanguageSpecificData@@GCC_3.0>:
    bf40:	ldr	x0, [x0, #800]
    bf44:	ret

000000000000bf48 <_Unwind_GetRegionStart@@GCC_3.0>:
    bf48:	ldr	x0, [x0, #824]
    bf4c:	ret

000000000000bf50 <_Unwind_FindEnclosingFunction@@GCC_3.3>:
    bf50:	stp	x29, x30, [sp, #-48]!
    bf54:	sub	x0, x0, #0x1
    bf58:	mov	x29, sp
    bf5c:	add	x1, sp, #0x18
    bf60:	bl	2cb0 <_Unwind_Find_FDE@plt>
    bf64:	ldr	x1, [sp, #40]
    bf68:	cmp	x0, #0x0
    bf6c:	ldp	x29, x30, [sp], #48
    bf70:	csel	x0, x1, x0, ne  // ne = any
    bf74:	ret

000000000000bf78 <_Unwind_GetDataRelBase@@GCC_3.0>:
    bf78:	ldr	x0, [x0, #816]
    bf7c:	ret

000000000000bf80 <_Unwind_GetTextRelBase@@GCC_3.0>:
    bf80:	ldr	x0, [x0, #808]
    bf84:	ret
    bf88:	str	xzr, [x3, #1568]
    bf8c:	cmp	x0, x1
    bf90:	b.cs	c794 <_Unwind_GetTextRelBase@@GCC_3.0+0x814>  // b.hs, b.nlast
    bf94:	stp	x29, x30, [sp, #-112]!
    bf98:	mov	x29, sp
    bf9c:	stp	x21, x22, [sp, #32]
    bfa0:	mov	x21, x2
    bfa4:	mov	x22, x1
    bfa8:	stp	x19, x20, [sp, #16]
    bfac:	mov	x20, x3
    bfb0:	ldr	x2, [x21, #792]
    bfb4:	stp	x23, x24, [sp, #48]
    bfb8:	adrp	x23, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    bfbc:	ldr	x5, [x21, #832]
    bfc0:	stp	x25, x26, [sp, #64]
    bfc4:	add	x23, x23, #0x620
    bfc8:	ldr	x1, [x20, #1608]
    bfcc:	stp	x27, x28, [sp, #80]
    bfd0:	add	x5, x2, x5, lsr #63
    bfd4:	add	x27, x29, #0x68
    bfd8:	cmp	x1, x5
    bfdc:	mov	x25, #0x0                   	// #0
    bfe0:	mov	w24, #0x1                   	// #1
    bfe4:	mov	w26, #0x5                   	// #5
    bfe8:	b.cs	c0b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x138>  // b.hs, b.nlast
    bfec:	nop
    bff0:	mov	x19, x0
    bff4:	ldrb	w4, [x19], #1
    bff8:	and	w5, w4, #0xc0
    bffc:	cmp	w5, #0x40
    c000:	b.eq	c5b4 <_Unwind_GetTextRelBase@@GCC_3.0+0x634>  // b.none
    c004:	cmp	w5, #0x80
    c008:	b.eq	c5d8 <_Unwind_GetTextRelBase@@GCC_3.0+0x658>  // b.none
    c00c:	cmp	w5, #0xc0
    c010:	b.eq	c5c8 <_Unwind_GetTextRelBase@@GCC_3.0+0x648>  // b.none
    c014:	cmp	w4, #0x2f
    c018:	b.hi	c778 <_Unwind_GetTextRelBase@@GCC_3.0+0x7f8>  // b.pmore
    c01c:	ldrh	w2, [x23, w4, uxtw #1]
    c020:	adr	x3, c02c <_Unwind_GetTextRelBase@@GCC_3.0+0xac>
    c024:	add	x2, x3, w2, sxth #2
    c028:	br	x2
    c02c:	mov	x1, #0x0                   	// #0
    c030:	mov	w0, #0x0                   	// #0
    c034:	ldrb	w3, [x19], #1
    c038:	and	x2, x3, #0x7f
    c03c:	lsl	x2, x2, x0
    c040:	add	w0, w0, #0x7
    c044:	orr	x1, x1, x2
    c048:	tbnz	w3, #7, c034 <_Unwind_GetTextRelBase@@GCC_3.0+0xb4>
    c04c:	mov	x4, #0x0                   	// #0
    c050:	mov	w2, #0x0                   	// #0
    c054:	nop
    c058:	ldrb	w3, [x19], #1
    c05c:	and	x0, x3, #0x7f
    c060:	lsl	x0, x0, x2
    c064:	add	w2, w2, #0x7
    c068:	orr	x4, x4, x0
    c06c:	tbnz	w3, #7, c058 <_Unwind_GetTextRelBase@@GCC_3.0+0xd8>
    c070:	ldr	x0, [x20, #1624]
    c074:	cmp	x1, #0x61
    c078:	mul	x4, x4, x0
    c07c:	b.hi	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>  // b.pmore
    c080:	lsl	x1, x1, #4
    c084:	neg	x4, x4
    c088:	add	x0, x20, x1
    c08c:	str	w24, [x0, #8]
    c090:	str	x4, [x20, x1]
    c094:	cmp	x22, x19
    c098:	b.ls	c0b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x138>  // b.plast
    c09c:	ldr	x2, [x21, #792]
    c0a0:	mov	x0, x19
    c0a4:	ldr	x5, [x21, #832]
    c0a8:	ldr	x1, [x20, #1608]
    c0ac:	add	x5, x2, x5, lsr #63
    c0b0:	cmp	x1, x5
    c0b4:	b.cc	bff0 <_Unwind_GetTextRelBase@@GCC_3.0+0x70>  // b.lo, b.ul, b.last
    c0b8:	mov	sp, x29
    c0bc:	ldp	x19, x20, [sp, #16]
    c0c0:	ldp	x21, x22, [sp, #32]
    c0c4:	ldp	x23, x24, [sp, #48]
    c0c8:	ldp	x25, x26, [sp, #64]
    c0cc:	ldp	x27, x28, [sp, #80]
    c0d0:	ldp	x29, x30, [sp], #112
    c0d4:	ret
    c0d8:	mov	x1, #0x0                   	// #0
    c0dc:	mov	w0, #0x0                   	// #0
    c0e0:	ldrb	w3, [x19], #1
    c0e4:	and	x2, x3, #0x7f
    c0e8:	lsl	x2, x2, x0
    c0ec:	add	w0, w0, #0x7
    c0f0:	orr	x1, x1, x2
    c0f4:	tbnz	w3, #7, c0e0 <_Unwind_GetTextRelBase@@GCC_3.0+0x160>
    c0f8:	str	x1, [x21, #848]
    c0fc:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c100:	mov	x1, #0x0                   	// #0
    c104:	mov	w0, #0x0                   	// #0
    c108:	ldrb	w3, [x19], #1
    c10c:	and	x2, x3, #0x7f
    c110:	lsl	x2, x2, x0
    c114:	add	w0, w0, #0x7
    c118:	orr	x1, x1, x2
    c11c:	tbnz	w3, #7, c108 <_Unwind_GetTextRelBase@@GCC_3.0+0x188>
    c120:	cmp	x1, #0x61
    c124:	b.hi	c138 <_Unwind_GetTextRelBase@@GCC_3.0+0x1b8>  // b.pmore
    c128:	lsl	x1, x1, #4
    c12c:	add	x0, x20, x1
    c130:	str	w26, [x0, #8]
    c134:	str	x19, [x20, x1]
    c138:	mov	x3, #0x0                   	// #0
    c13c:	mov	w1, #0x0                   	// #0
    c140:	ldrb	w2, [x19], #1
    c144:	and	x0, x2, #0x7f
    c148:	lsl	x0, x0, x1
    c14c:	add	w1, w1, #0x7
    c150:	orr	x3, x3, x0
    c154:	tbnz	w2, #7, c140 <_Unwind_GetTextRelBase@@GCC_3.0+0x1c0>
    c158:	add	x19, x19, x3
    c15c:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c160:	mov	x1, #0x0                   	// #0
    c164:	mov	w0, #0x0                   	// #0
    c168:	ldrb	w3, [x19], #1
    c16c:	and	x2, x3, #0x7f
    c170:	lsl	x2, x2, x0
    c174:	add	w0, w0, #0x7
    c178:	orr	x1, x1, x2
    c17c:	tbnz	w3, #7, c168 <_Unwind_GetTextRelBase@@GCC_3.0+0x1e8>
    c180:	mov	x4, #0x0                   	// #0
    c184:	mov	w2, #0x0                   	// #0
    c188:	ldrb	w3, [x19], #1
    c18c:	and	x0, x3, #0x7f
    c190:	lsl	x0, x0, x2
    c194:	add	w2, w2, #0x7
    c198:	orr	x4, x4, x0
    c19c:	tbnz	w3, #7, c188 <_Unwind_GetTextRelBase@@GCC_3.0+0x208>
    c1a0:	cmp	w2, #0x3f
    c1a4:	b.hi	c1bc <_Unwind_GetTextRelBase@@GCC_3.0+0x23c>  // b.pmore
    c1a8:	mov	x0, #0xffffffffffffffff    	// #-1
    c1ac:	tst	x3, #0x40
    c1b0:	lsl	x0, x0, x2
    c1b4:	orr	x0, x4, x0
    c1b8:	csel	x4, x0, x4, ne  // ne = any
    c1bc:	ldr	x0, [x20, #1624]
    c1c0:	cmp	x1, #0x61
    c1c4:	mul	x4, x4, x0
    c1c8:	b.hi	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>  // b.pmore
    c1cc:	lsl	x1, x1, #4
    c1d0:	mov	w2, #0x4                   	// #4
    c1d4:	add	x0, x20, x1
    c1d8:	str	w2, [x0, #8]
    c1dc:	str	x4, [x20, x1]
    c1e0:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c1e4:	mov	x1, #0x0                   	// #0
    c1e8:	mov	w0, #0x0                   	// #0
    c1ec:	ldrb	w3, [x19], #1
    c1f0:	and	x2, x3, #0x7f
    c1f4:	lsl	x2, x2, x0
    c1f8:	add	w0, w0, #0x7
    c1fc:	orr	x1, x1, x2
    c200:	tbnz	w3, #7, c1ec <_Unwind_GetTextRelBase@@GCC_3.0+0x26c>
    c204:	mov	x4, #0x0                   	// #0
    c208:	mov	w2, #0x0                   	// #0
    c20c:	nop
    c210:	ldrb	w3, [x19], #1
    c214:	and	x0, x3, #0x7f
    c218:	lsl	x0, x0, x2
    c21c:	add	w2, w2, #0x7
    c220:	orr	x4, x4, x0
    c224:	tbnz	w3, #7, c210 <_Unwind_GetTextRelBase@@GCC_3.0+0x290>
    c228:	b	c1bc <_Unwind_GetTextRelBase@@GCC_3.0+0x23c>
    c22c:	mov	x1, #0x0                   	// #0
    c230:	mov	w0, #0x0                   	// #0
    c234:	ldrb	w3, [x19], #1
    c238:	and	x2, x3, #0x7f
    c23c:	lsl	x2, x2, x0
    c240:	add	w0, w0, #0x7
    c244:	orr	x1, x1, x2
    c248:	tbnz	w3, #7, c234 <_Unwind_GetTextRelBase@@GCC_3.0+0x2b4>
    c24c:	cmp	w0, #0x3f
    c250:	b.hi	c268 <_Unwind_GetTextRelBase@@GCC_3.0+0x2e8>  // b.pmore
    c254:	mov	x2, #0xffffffffffffffff    	// #-1
    c258:	tst	x3, #0x40
    c25c:	lsl	x0, x2, x0
    c260:	orr	x0, x1, x0
    c264:	csel	x1, x0, x1, ne  // ne = any
    c268:	ldr	x0, [x20, #1624]
    c26c:	mul	x1, x0, x1
    c270:	str	x1, [x20, #1576]
    c274:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c278:	mov	x1, #0x0                   	// #0
    c27c:	mov	w0, #0x0                   	// #0
    c280:	ldrb	w3, [x19], #1
    c284:	and	x2, x3, #0x7f
    c288:	lsl	x2, x2, x0
    c28c:	add	w0, w0, #0x7
    c290:	orr	x1, x1, x2
    c294:	tbnz	w3, #7, c280 <_Unwind_GetTextRelBase@@GCC_3.0+0x300>
    c298:	mov	x3, #0x0                   	// #0
    c29c:	mov	w2, #0x0                   	// #0
    c2a0:	str	x1, [x20, #1584]
    c2a4:	nop
    c2a8:	ldrb	w1, [x19], #1
    c2ac:	and	x0, x1, #0x7f
    c2b0:	lsl	x0, x0, x2
    c2b4:	add	w2, w2, #0x7
    c2b8:	orr	x3, x3, x0
    c2bc:	tbnz	w1, #7, c2a8 <_Unwind_GetTextRelBase@@GCC_3.0+0x328>
    c2c0:	cmp	w2, #0x3f
    c2c4:	b.hi	c2dc <_Unwind_GetTextRelBase@@GCC_3.0+0x35c>  // b.pmore
    c2c8:	mov	x0, #0xffffffffffffffff    	// #-1
    c2cc:	tst	x1, #0x40
    c2d0:	lsl	x0, x0, x2
    c2d4:	orr	x0, x3, x0
    c2d8:	csel	x3, x0, x3, ne  // ne = any
    c2dc:	ldr	x0, [x20, #1624]
    c2e0:	str	w24, [x20, #1600]
    c2e4:	mul	x3, x0, x3
    c2e8:	str	x3, [x20, #1576]
    c2ec:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c2f0:	mov	x1, #0x0                   	// #0
    c2f4:	mov	w0, #0x0                   	// #0
    c2f8:	ldrb	w3, [x19], #1
    c2fc:	and	x2, x3, #0x7f
    c300:	lsl	x2, x2, x0
    c304:	add	w0, w0, #0x7
    c308:	orr	x1, x1, x2
    c30c:	tbnz	w3, #7, c2f8 <_Unwind_GetTextRelBase@@GCC_3.0+0x378>
    c310:	mov	x4, #0x0                   	// #0
    c314:	mov	w2, #0x0                   	// #0
    c318:	ldrb	w3, [x19], #1
    c31c:	and	x0, x3, #0x7f
    c320:	lsl	x0, x0, x2
    c324:	add	w2, w2, #0x7
    c328:	orr	x4, x4, x0
    c32c:	tbnz	w3, #7, c318 <_Unwind_GetTextRelBase@@GCC_3.0+0x398>
    c330:	cmp	w2, #0x3f
    c334:	b.hi	c34c <_Unwind_GetTextRelBase@@GCC_3.0+0x3cc>  // b.pmore
    c338:	mov	x0, #0xffffffffffffffff    	// #-1
    c33c:	tst	x3, #0x40
    c340:	lsl	x0, x0, x2
    c344:	orr	x0, x4, x0
    c348:	csel	x4, x0, x4, ne  // ne = any
    c34c:	ldr	x0, [x20, #1624]
    c350:	cmp	x1, #0x61
    c354:	mul	x4, x4, x0
    c358:	b.hi	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>  // b.pmore
    c35c:	lsl	x1, x1, #4
    c360:	add	x0, x20, x1
    c364:	str	w24, [x0, #8]
    c368:	str	x4, [x20, x1]
    c36c:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c370:	mov	x1, #0x0                   	// #0
    c374:	mov	w0, #0x0                   	// #0
    c378:	ldrb	w3, [x19], #1
    c37c:	and	x2, x3, #0x7f
    c380:	lsl	x2, x2, x0
    c384:	add	w0, w0, #0x7
    c388:	orr	x1, x1, x2
    c38c:	tbnz	w3, #7, c378 <_Unwind_GetTextRelBase@@GCC_3.0+0x3f8>
    c390:	cmp	x1, #0x61
    c394:	b.hi	c3ac <_Unwind_GetTextRelBase@@GCC_3.0+0x42c>  // b.pmore
    c398:	lsl	x1, x1, #4
    c39c:	mov	w2, #0x3                   	// #3
    c3a0:	add	x0, x20, x1
    c3a4:	str	w2, [x0, #8]
    c3a8:	str	x19, [x20, x1]
    c3ac:	mov	x3, #0x0                   	// #0
    c3b0:	mov	w1, #0x0                   	// #0
    c3b4:	nop
    c3b8:	ldrb	w2, [x19], #1
    c3bc:	and	x0, x2, #0x7f
    c3c0:	lsl	x0, x0, x1
    c3c4:	add	w1, w1, #0x7
    c3c8:	orr	x3, x3, x0
    c3cc:	tbnz	w2, #7, c3b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x438>
    c3d0:	add	x19, x19, x3
    c3d4:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c3d8:	mov	x1, #0x0                   	// #0
    c3dc:	mov	w0, #0x0                   	// #0
    c3e0:	ldrb	w3, [x19], #1
    c3e4:	and	x2, x3, #0x7f
    c3e8:	lsl	x2, x2, x0
    c3ec:	add	w0, w0, #0x7
    c3f0:	orr	x1, x1, x2
    c3f4:	tbnz	w3, #7, c3e0 <_Unwind_GetTextRelBase@@GCC_3.0+0x460>
    c3f8:	str	x1, [x20, #1576]
    c3fc:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c400:	mov	x1, #0x0                   	// #0
    c404:	mov	w0, #0x0                   	// #0
    c408:	ldrb	w3, [x19], #1
    c40c:	and	x2, x3, #0x7f
    c410:	lsl	x2, x2, x0
    c414:	add	w0, w0, #0x7
    c418:	orr	x1, x1, x2
    c41c:	tbnz	w3, #7, c408 <_Unwind_GetTextRelBase@@GCC_3.0+0x488>
    c420:	str	x1, [x20, #1584]
    c424:	str	w24, [x20, #1600]
    c428:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c42c:	mov	x1, #0x0                   	// #0
    c430:	mov	w0, #0x0                   	// #0
    c434:	ldrb	w3, [x19], #1
    c438:	and	x2, x3, #0x7f
    c43c:	lsl	x2, x2, x0
    c440:	add	w0, w0, #0x7
    c444:	orr	x1, x1, x2
    c448:	tbnz	w3, #7, c434 <_Unwind_GetTextRelBase@@GCC_3.0+0x4b4>
    c44c:	mov	x3, #0x0                   	// #0
    c450:	mov	w2, #0x0                   	// #0
    c454:	str	x1, [x20, #1584]
    c458:	ldrb	w1, [x19], #1
    c45c:	and	x0, x1, #0x7f
    c460:	lsl	x0, x0, x2
    c464:	add	w2, w2, #0x7
    c468:	orr	x3, x3, x0
    c46c:	tbnz	w1, #7, c458 <_Unwind_GetTextRelBase@@GCC_3.0+0x4d8>
    c470:	str	x3, [x20, #1576]
    c474:	str	w24, [x20, #1600]
    c478:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c47c:	mov	x1, #0x0                   	// #0
    c480:	mov	w0, #0x0                   	// #0
    c484:	ldrb	w3, [x19], #1
    c488:	and	x2, x3, #0x7f
    c48c:	lsl	x2, x2, x0
    c490:	add	w0, w0, #0x7
    c494:	orr	x1, x1, x2
    c498:	tbnz	w3, #7, c484 <_Unwind_GetTextRelBase@@GCC_3.0+0x504>
    c49c:	mov	x4, #0x0                   	// #0
    c4a0:	mov	w2, #0x0                   	// #0
    c4a4:	nop
    c4a8:	ldrb	w3, [x19], #1
    c4ac:	and	x0, x3, #0x7f
    c4b0:	lsl	x0, x0, x2
    c4b4:	add	w2, w2, #0x7
    c4b8:	orr	x4, x4, x0
    c4bc:	tbnz	w3, #7, c4a8 <_Unwind_GetTextRelBase@@GCC_3.0+0x528>
    c4c0:	cmp	x1, #0x61
    c4c4:	b.hi	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>  // b.pmore
    c4c8:	lsl	x1, x1, #4
    c4cc:	mov	w2, #0x2                   	// #2
    c4d0:	add	x0, x20, x1
    c4d4:	str	w2, [x0, #8]
    c4d8:	str	x4, [x20, x1]
    c4dc:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c4e0:	mov	x1, #0x0                   	// #0
    c4e4:	mov	w0, #0x0                   	// #0
    c4e8:	ldrb	w3, [x19], #1
    c4ec:	and	x2, x3, #0x7f
    c4f0:	lsl	x2, x2, x0
    c4f4:	add	w0, w0, #0x7
    c4f8:	orr	x1, x1, x2
    c4fc:	tbnz	w3, #7, c4e8 <_Unwind_GetTextRelBase@@GCC_3.0+0x568>
    c500:	cmp	x1, #0x61
    c504:	b.hi	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>  // b.pmore
    c508:	add	x1, x20, x1, lsl #4
    c50c:	str	wzr, [x1, #8]
    c510:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c514:	mov	x1, #0x0                   	// #0
    c518:	mov	w0, #0x0                   	// #0
    c51c:	ldrb	w3, [x19], #1
    c520:	and	x2, x3, #0x7f
    c524:	lsl	x2, x2, x0
    c528:	add	w0, w0, #0x7
    c52c:	orr	x1, x1, x2
    c530:	tbnz	w3, #7, c51c <_Unwind_GetTextRelBase@@GCC_3.0+0x59c>
    c534:	cmp	x1, #0x61
    c538:	b.hi	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>  // b.pmore
    c53c:	add	x1, x20, x1, lsl #4
    c540:	mov	w0, #0x6                   	// #6
    c544:	str	w0, [x1, #8]
    c548:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c54c:	mov	x1, #0x0                   	// #0
    c550:	mov	w0, #0x0                   	// #0
    c554:	ldrb	w3, [x19], #1
    c558:	and	x2, x3, #0x7f
    c55c:	lsl	x2, x2, x0
    c560:	add	w0, w0, #0x7
    c564:	orr	x1, x1, x2
    c568:	tbnz	w3, #7, c554 <_Unwind_GetTextRelBase@@GCC_3.0+0x5d4>
    c56c:	b	c500 <_Unwind_GetTextRelBase@@GCC_3.0+0x580>
    c570:	mov	x1, #0x0                   	// #0
    c574:	mov	w0, #0x0                   	// #0
    c578:	ldrb	w3, [x19], #1
    c57c:	and	x2, x3, #0x7f
    c580:	lsl	x2, x2, x0
    c584:	add	w0, w0, #0x7
    c588:	orr	x1, x1, x2
    c58c:	tbnz	w3, #7, c578 <_Unwind_GetTextRelBase@@GCC_3.0+0x5f8>
    c590:	mov	x4, #0x0                   	// #0
    c594:	mov	w2, #0x0                   	// #0
    c598:	ldrb	w3, [x19], #1
    c59c:	and	x0, x3, #0x7f
    c5a0:	lsl	x0, x0, x2
    c5a4:	add	w2, w2, #0x7
    c5a8:	orr	x4, x4, x0
    c5ac:	tbnz	w3, #7, c598 <_Unwind_GetTextRelBase@@GCC_3.0+0x618>
    c5b0:	b	c34c <_Unwind_GetTextRelBase@@GCC_3.0+0x3cc>
    c5b4:	ldr	x0, [x20, #1632]
    c5b8:	and	x4, x4, #0x3f
    c5bc:	madd	x4, x4, x0, x1
    c5c0:	str	x4, [x20, #1608]
    c5c4:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c5c8:	ubfiz	x4, x4, #4, #6
    c5cc:	add	x4, x20, x4
    c5d0:	str	wzr, [x4, #8]
    c5d4:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c5d8:	and	w4, w4, #0x3f
    c5dc:	mov	x1, #0x0                   	// #0
    c5e0:	mov	w5, #0x0                   	// #0
    c5e4:	nop
    c5e8:	ldrb	w6, [x19], #1
    c5ec:	and	x0, x6, #0x7f
    c5f0:	lsl	x0, x0, x5
    c5f4:	add	w5, w5, #0x7
    c5f8:	orr	x1, x1, x0
    c5fc:	tbnz	w6, #7, c5e8 <_Unwind_GetTextRelBase@@GCC_3.0+0x668>
    c600:	ubfiz	x4, x4, #4, #6
    c604:	ldr	x2, [x20, #1624]
    c608:	add	x0, x20, x4
    c60c:	mul	x1, x1, x2
    c610:	str	w24, [x0, #8]
    c614:	str	x1, [x20, x4]
    c618:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c61c:	ldr	x0, [x20, #544]
    c620:	eor	x0, x0, #0x1
    c624:	str	x0, [x20, #544]
    c628:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c62c:	ldrb	w28, [x20, #1648]
    c630:	cmp	w28, #0xff
    c634:	b.eq	c748 <_Unwind_GetTextRelBase@@GCC_3.0+0x7c8>  // b.none
    c638:	and	w0, w28, #0x70
    c63c:	cmp	w0, #0x30
    c640:	b.eq	c7a4 <_Unwind_GetTextRelBase@@GCC_3.0+0x824>  // b.none
    c644:	b.hi	c77c <_Unwind_GetTextRelBase@@GCC_3.0+0x7fc>  // b.pmore
    c648:	cmp	w0, #0x20
    c64c:	b.ne	c76c <_Unwind_GetTextRelBase@@GCC_3.0+0x7ec>  // b.any
    c650:	mov	x0, x21
    c654:	bl	2b50 <_Unwind_GetTextRelBase@plt>
    c658:	mov	x1, x0
    c65c:	mov	x2, x19
    c660:	mov	w0, w28
    c664:	mov	x3, x27
    c668:	bl	ba38 <__enable_execute_stack@@GCC_3.4.2+0x8>
    c66c:	ldr	x1, [x29, #104]
    c670:	mov	x19, x0
    c674:	str	x1, [x20, #1608]
    c678:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c67c:	ldrb	w2, [x0, #1]
    c680:	add	x19, x0, #0x2
    c684:	ldr	x0, [x20, #1632]
    c688:	madd	x1, x2, x0, x1
    c68c:	str	x1, [x20, #1608]
    c690:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c694:	ldurh	w2, [x0, #1]
    c698:	add	x19, x0, #0x3
    c69c:	ldr	x0, [x20, #1632]
    c6a0:	madd	x1, x2, x0, x1
    c6a4:	str	x1, [x20, #1608]
    c6a8:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c6ac:	ldur	w2, [x0, #1]
    c6b0:	add	x19, x0, #0x5
    c6b4:	ldr	x0, [x20, #1632]
    c6b8:	madd	x1, x2, x0, x1
    c6bc:	str	x1, [x20, #1608]
    c6c0:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c6c4:	cbz	x25, c798 <_Unwind_GetTextRelBase@@GCC_3.0+0x818>
    c6c8:	mov	x3, x25
    c6cc:	ldr	x25, [x25, #1568]
    c6d0:	mov	x1, x20
    c6d4:	mov	x0, x3
    c6d8:	mov	x2, #0x648                 	// #1608
    c6dc:	bl	2aa0 <memcpy@plt>
    c6e0:	str	x0, [x20, #1568]
    c6e4:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c6e8:	ldr	x28, [x20, #1568]
    c6ec:	mov	x0, x20
    c6f0:	mov	x2, #0x648                 	// #1608
    c6f4:	mov	x1, x28
    c6f8:	bl	2aa0 <memcpy@plt>
    c6fc:	str	x25, [x28, #1568]
    c700:	mov	x25, x28
    c704:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c708:	mov	w0, #0x2                   	// #2
    c70c:	mov	x3, #0x0                   	// #0
    c710:	mov	w1, #0x0                   	// #0
    c714:	str	x19, [x20, #1592]
    c718:	str	w0, [x20, #1600]
    c71c:	nop
    c720:	ldrb	w2, [x19], #1
    c724:	and	x0, x2, #0x7f
    c728:	lsl	x0, x0, x1
    c72c:	add	w1, w1, #0x7
    c730:	orr	x3, x3, x0
    c734:	tbnz	w2, #7, c720 <_Unwind_GetTextRelBase@@GCC_3.0+0x7a0>
    c738:	add	x19, x19, x3
    c73c:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c740:	cmp	w0, #0x50
    c744:	b.ne	c778 <_Unwind_GetTextRelBase@@GCC_3.0+0x7f8>  // b.any
    c748:	mov	x2, x19
    c74c:	mov	x1, #0x0                   	// #0
    c750:	mov	w0, w28
    c754:	mov	x3, x27
    c758:	bl	ba38 <__enable_execute_stack@@GCC_3.4.2+0x8>
    c75c:	mov	x19, x0
    c760:	ldr	x1, [x29, #104]
    c764:	str	x1, [x20, #1608]
    c768:	b	c094 <_Unwind_GetTextRelBase@@GCC_3.0+0x114>
    c76c:	b.hi	c778 <_Unwind_GetTextRelBase@@GCC_3.0+0x7f8>  // b.pmore
    c770:	tst	w28, #0x60
    c774:	b.eq	c748 <_Unwind_GetTextRelBase@@GCC_3.0+0x7c8>  // b.none
    c778:	bl	2c50 <abort@plt>
    c77c:	cmp	w0, #0x40
    c780:	b.ne	c740 <_Unwind_GetTextRelBase@@GCC_3.0+0x7c0>  // b.any
    c784:	mov	x0, x21
    c788:	bl	2ab0 <_Unwind_GetRegionStart@plt>
    c78c:	mov	x1, x0
    c790:	b	c65c <_Unwind_GetTextRelBase@@GCC_3.0+0x6dc>
    c794:	ret
    c798:	sub	sp, sp, #0x650
    c79c:	mov	x3, sp
    c7a0:	b	c6d0 <_Unwind_GetTextRelBase@@GCC_3.0+0x750>
    c7a4:	mov	x0, x21
    c7a8:	bl	2da0 <_Unwind_GetDataRelBase@plt>
    c7ac:	mov	x1, x0
    c7b0:	b	c65c <_Unwind_GetTextRelBase@@GCC_3.0+0x6dc>
    c7b4:	nop
    c7b8:	stp	x29, x30, [sp, #-112]!
    c7bc:	mov	x2, #0x680                 	// #1664
    c7c0:	mov	x29, sp
    c7c4:	stp	x19, x20, [sp, #16]
    c7c8:	mov	x20, x0
    c7cc:	mov	x19, x1
    c7d0:	mov	x0, x1
    c7d4:	mov	w1, #0x0                   	// #0
    c7d8:	bl	2ba0 <memset@plt>
    c7dc:	str	xzr, [x20, #800]
    c7e0:	ldr	x2, [x20, #792]
    c7e4:	str	xzr, [x20, #848]
    c7e8:	cbz	x2, cbe0 <_Unwind_GetTextRelBase@@GCC_3.0+0xc60>
    c7ec:	ldr	d0, [x20, #832]
    c7f0:	add	x1, x20, #0x328
    c7f4:	stp	x21, x22, [sp, #32]
    c7f8:	cmge	d0, d0, #0
    c7fc:	fmov	x0, d0
    c800:	add	x0, x2, x0
    c804:	bl	2cb0 <_Unwind_Find_FDE@plt>
    c808:	mov	x21, x0
    c80c:	cbz	x0, cc80 <_Unwind_GetTextRelBase@@GCC_3.0+0xd00>
    c810:	ldrsw	x1, [x0, #4]
    c814:	add	x22, x0, #0x4
    c818:	stp	x23, x24, [sp, #48]
    c81c:	sub	x22, x22, x1
    c820:	ldr	x0, [x20, #824]
    c824:	str	x0, [x19, #1608]
    c828:	add	x23, x22, #0x9
    c82c:	mov	x0, x23
    c830:	bl	2ac0 <strlen@plt>
    c834:	ldrb	w1, [x22, #9]
    c838:	add	x2, x0, #0x1
    c83c:	add	x2, x23, x2
    c840:	cmp	w1, #0x65
    c844:	b.eq	ca28 <_Unwind_GetTextRelBase@@GCC_3.0+0xaa8>  // b.none
    c848:	ldrb	w6, [x22, #8]
    c84c:	cmp	w6, #0x3
    c850:	b.hi	cdb8 <_Unwind_GetTextRelBase@@GCC_3.0+0xe38>  // b.pmore
    c854:	stp	x25, x26, [sp, #64]
    c858:	stp	x27, x28, [sp, #80]
    c85c:	mov	x5, #0x0                   	// #0
    c860:	mov	w1, #0x0                   	// #0
    c864:	nop
    c868:	ldrb	w3, [x2], #1
    c86c:	and	x0, x3, #0x7f
    c870:	lsl	x0, x0, x1
    c874:	add	w1, w1, #0x7
    c878:	orr	x5, x5, x0
    c87c:	tbnz	w3, #7, c868 <_Unwind_GetTextRelBase@@GCC_3.0+0x8e8>
    c880:	mov	x4, #0x0                   	// #0
    c884:	mov	w0, #0x0                   	// #0
    c888:	str	x5, [x19, #1632]
    c88c:	nop
    c890:	mov	x5, x2
    c894:	ldrb	w3, [x2], #1
    c898:	and	x1, x3, #0x7f
    c89c:	lsl	x1, x1, x0
    c8a0:	add	w0, w0, #0x7
    c8a4:	orr	x4, x4, x1
    c8a8:	tbnz	w3, #7, c890 <_Unwind_GetTextRelBase@@GCC_3.0+0x910>
    c8ac:	cmp	w0, #0x3f
    c8b0:	b.hi	c8c8 <_Unwind_GetTextRelBase@@GCC_3.0+0x948>  // b.pmore
    c8b4:	mov	x1, #0xffffffffffffffff    	// #-1
    c8b8:	tst	x3, #0x40
    c8bc:	lsl	x0, x1, x0
    c8c0:	orr	x0, x4, x0
    c8c4:	csel	x4, x0, x4, ne  // ne = any
    c8c8:	str	x4, [x19, #1624]
    c8cc:	cmp	w6, #0x1
    c8d0:	mov	w0, #0x0                   	// #0
    c8d4:	mov	x4, #0x0                   	// #0
    c8d8:	b.eq	ca44 <_Unwind_GetTextRelBase@@GCC_3.0+0xac4>  // b.none
    c8dc:	nop
    c8e0:	ldrb	w3, [x2], #1
    c8e4:	and	x1, x3, #0x7f
    c8e8:	lsl	x1, x1, x0
    c8ec:	add	w0, w0, #0x7
    c8f0:	orr	x4, x4, x1
    c8f4:	tbnz	w3, #7, c8e0 <_Unwind_GetTextRelBase@@GCC_3.0+0x960>
    c8f8:	mov	w0, #0xffffffff            	// #-1
    c8fc:	str	x4, [x19, #1640]
    c900:	strb	w0, [x19, #1649]
    c904:	ldrb	w3, [x23]
    c908:	cmp	w3, #0x7a
    c90c:	b.eq	ca64 <_Unwind_GetTextRelBase@@GCC_3.0+0xae4>  // b.none
    c910:	mov	x25, #0x0                   	// #0
    c914:	cbz	w3, ce30 <_Unwind_GetTextRelBase@@GCC_3.0+0xeb0>
    c918:	add	x23, x23, #0x1
    c91c:	add	x24, sp, #0x68
    c920:	mov	w27, #0x1                   	// #1
    c924:	b	c94c <_Unwind_GetTextRelBase@@GCC_3.0+0x9cc>
    c928:	cmp	w3, #0x52
    c92c:	b.eq	caa8 <_Unwind_GetTextRelBase@@GCC_3.0+0xb28>  // b.none
    c930:	cmp	w3, #0x50
    c934:	b.eq	cab4 <_Unwind_GetTextRelBase@@GCC_3.0+0xb34>  // b.none
    c938:	cmp	w3, #0x53
    c93c:	b.ne	cbf4 <_Unwind_GetTextRelBase@@GCC_3.0+0xc74>  // b.any
    c940:	strb	w27, [x19, #1651]
    c944:	ldrb	w3, [x23], #1
    c948:	cbz	w3, c964 <_Unwind_GetTextRelBase@@GCC_3.0+0x9e4>
    c94c:	cmp	w3, #0x4c
    c950:	b.ne	c928 <_Unwind_GetTextRelBase@@GCC_3.0+0x9a8>  // b.any
    c954:	ldrb	w0, [x2], #1
    c958:	strb	w0, [x19, #1649]
    c95c:	ldrb	w3, [x23], #1
    c960:	cbnz	w3, c94c <_Unwind_GetTextRelBase@@GCC_3.0+0x9cc>
    c964:	cbz	x25, cbf0 <_Unwind_GetTextRelBase@@GCC_3.0+0xc70>
    c968:	ldr	w1, [x22]
    c96c:	mov	x0, x25
    c970:	mov	x3, x19
    c974:	mov	x2, x20
    c978:	add	x1, x1, #0x4
    c97c:	add	x1, x22, x1
    c980:	bl	bf88 <_Unwind_GetTextRelBase@@GCC_3.0+0x8>
    c984:	ldrb	w0, [x19, #1648]
    c988:	cmp	w0, #0xff
    c98c:	b.eq	cdb0 <_Unwind_GetTextRelBase@@GCC_3.0+0xe30>  // b.none
    c990:	and	w0, w0, #0x7
    c994:	cmp	w0, #0x2
    c998:	b.eq	cd60 <_Unwind_GetTextRelBase@@GCC_3.0+0xde0>  // b.none
    c99c:	b.ls	cbd0 <_Unwind_GetTextRelBase@@GCC_3.0+0xc50>  // b.plast
    c9a0:	cmp	w0, #0x3
    c9a4:	mov	x22, #0x10                  	// #16
    c9a8:	b.ne	cb5c <_Unwind_GetTextRelBase@@GCC_3.0+0xbdc>  // b.any
    c9ac:	ldrb	w0, [x19, #1650]
    c9b0:	add	x22, x21, x22
    c9b4:	ldrb	w24, [x19, #1649]
    c9b8:	cbz	w0, cb78 <_Unwind_GetTextRelBase@@GCC_3.0+0xbf8>
    c9bc:	mov	x0, #0x0                   	// #0
    c9c0:	mov	w2, #0x0                   	// #0
    c9c4:	nop
    c9c8:	ldrb	w3, [x22], #1
    c9cc:	and	x1, x3, #0x7f
    c9d0:	lsl	x1, x1, x2
    c9d4:	add	w2, w2, #0x7
    c9d8:	orr	x0, x0, x1
    c9dc:	tbnz	w3, #7, c9c8 <_Unwind_GetTextRelBase@@GCC_3.0+0xa48>
    c9e0:	add	x23, x22, x0
    c9e4:	cmp	w24, #0xff
    c9e8:	b.ne	cc18 <_Unwind_GetTextRelBase@@GCC_3.0+0xc98>  // b.any
    c9ec:	ldr	w1, [x21]
    c9f0:	mov	x0, x23
    c9f4:	mov	x3, x19
    c9f8:	mov	x2, x20
    c9fc:	add	x1, x1, #0x4
    ca00:	add	x1, x21, x1
    ca04:	bl	bf88 <_Unwind_GetTextRelBase@@GCC_3.0+0x8>
    ca08:	ldp	x21, x22, [sp, #32]
    ca0c:	mov	w0, #0x0                   	// #0
    ca10:	ldp	x23, x24, [sp, #48]
    ca14:	ldp	x25, x26, [sp, #64]
    ca18:	ldp	x27, x28, [sp, #80]
    ca1c:	ldp	x19, x20, [sp, #16]
    ca20:	ldp	x29, x30, [sp], #112
    ca24:	ret
    ca28:	ldrb	w0, [x22, #10]
    ca2c:	cmp	w0, #0x68
    ca30:	b.ne	c848 <_Unwind_GetTextRelBase@@GCC_3.0+0x8c8>  // b.any
    ca34:	ldr	x0, [x2], #8
    ca38:	add	x23, x22, #0xb
    ca3c:	str	x0, [x19, #1656]
    ca40:	b	c848 <_Unwind_GetTextRelBase@@GCC_3.0+0x8c8>
    ca44:	ldrb	w0, [x2]
    ca48:	add	x2, x5, #0x2
    ca4c:	str	x0, [x19, #1640]
    ca50:	mov	w0, #0xffffffff            	// #-1
    ca54:	strb	w0, [x19, #1649]
    ca58:	ldrb	w3, [x23]
    ca5c:	cmp	w3, #0x7a
    ca60:	b.ne	c910 <_Unwind_GetTextRelBase@@GCC_3.0+0x990>  // b.any
    ca64:	mov	x0, #0x0                   	// #0
    ca68:	mov	w3, #0x0                   	// #0
    ca6c:	nop
    ca70:	ldrb	w4, [x2], #1
    ca74:	and	x1, x4, #0x7f
    ca78:	lsl	x1, x1, x3
    ca7c:	add	w3, w3, #0x7
    ca80:	orr	x0, x0, x1
    ca84:	tbnz	w4, #7, ca70 <_Unwind_GetTextRelBase@@GCC_3.0+0xaf0>
    ca88:	mov	w1, #0x1                   	// #1
    ca8c:	strb	w1, [x19, #1650]
    ca90:	add	x25, x2, x0
    ca94:	add	x0, x23, #0x1
    ca98:	ldrb	w3, [x23, #1]
    ca9c:	cbz	w3, c968 <_Unwind_GetTextRelBase@@GCC_3.0+0x9e8>
    caa0:	mov	x23, x0
    caa4:	b	c918 <_Unwind_GetTextRelBase@@GCC_3.0+0x998>
    caa8:	ldrb	w0, [x2], #1
    caac:	strb	w0, [x19, #1648]
    cab0:	b	c944 <_Unwind_GetTextRelBase@@GCC_3.0+0x9c4>
    cab4:	mov	x28, x2
    cab8:	ldrb	w26, [x28], #1
    cabc:	cmp	w26, #0xff
    cac0:	b.eq	cb10 <_Unwind_GetTextRelBase@@GCC_3.0+0xb90>  // b.none
    cac4:	and	w0, w26, #0x70
    cac8:	cmp	w0, #0x30
    cacc:	b.eq	cd50 <_Unwind_GetTextRelBase@@GCC_3.0+0xdd0>  // b.none
    cad0:	b.hi	cb44 <_Unwind_GetTextRelBase@@GCC_3.0+0xbc4>  // b.pmore
    cad4:	cmp	w0, #0x20
    cad8:	b.ne	cb34 <_Unwind_GetTextRelBase@@GCC_3.0+0xbb4>  // b.any
    cadc:	mov	x0, x20
    cae0:	bl	2b50 <_Unwind_GetTextRelBase@plt>
    cae4:	mov	x1, x0
    cae8:	mov	x2, x28
    caec:	mov	w0, w26
    caf0:	mov	x3, x24
    caf4:	bl	ba38 <__enable_execute_stack@@GCC_3.4.2+0x8>
    caf8:	ldr	x1, [sp, #104]
    cafc:	mov	x2, x0
    cb00:	str	x1, [x19, #1616]
    cb04:	b	c944 <_Unwind_GetTextRelBase@@GCC_3.0+0x9c4>
    cb08:	cmp	w0, #0x50
    cb0c:	b.ne	cb40 <_Unwind_GetTextRelBase@@GCC_3.0+0xbc0>  // b.any
    cb10:	mov	x2, x28
    cb14:	mov	x1, #0x0                   	// #0
    cb18:	mov	w0, w26
    cb1c:	mov	x3, x24
    cb20:	bl	ba38 <__enable_execute_stack@@GCC_3.4.2+0x8>
    cb24:	mov	x2, x0
    cb28:	ldr	x1, [sp, #104]
    cb2c:	str	x1, [x19, #1616]
    cb30:	b	c944 <_Unwind_GetTextRelBase@@GCC_3.0+0x9c4>
    cb34:	b.hi	cb40 <_Unwind_GetTextRelBase@@GCC_3.0+0xbc0>  // b.pmore
    cb38:	tst	w26, #0x60
    cb3c:	b.eq	cb10 <_Unwind_GetTextRelBase@@GCC_3.0+0xb90>  // b.none
    cb40:	bl	2c50 <abort@plt>
    cb44:	cmp	w0, #0x40
    cb48:	b.ne	cb08 <_Unwind_GetTextRelBase@@GCC_3.0+0xb88>  // b.any
    cb4c:	mov	x0, x20
    cb50:	bl	2ab0 <_Unwind_GetRegionStart@plt>
    cb54:	mov	x1, x0
    cb58:	b	cae8 <_Unwind_GetTextRelBase@@GCC_3.0+0xb68>
    cb5c:	cmp	w0, #0x4
    cb60:	b.ne	cb40 <_Unwind_GetTextRelBase@@GCC_3.0+0xbc0>  // b.any
    cb64:	ldrb	w0, [x19, #1650]
    cb68:	mov	x22, #0x18                  	// #24
    cb6c:	ldrb	w24, [x19, #1649]
    cb70:	add	x22, x21, x22
    cb74:	cbnz	w0, c9bc <_Unwind_GetTextRelBase@@GCC_3.0+0xa3c>
    cb78:	mov	x23, x22
    cb7c:	cmp	w24, #0xff
    cb80:	b.eq	c9ec <_Unwind_GetTextRelBase@@GCC_3.0+0xa6c>  // b.none
    cb84:	and	w0, w24, #0x70
    cb88:	cmp	w0, #0x30
    cb8c:	b.eq	ce1c <_Unwind_GetTextRelBase@@GCC_3.0+0xe9c>  // b.none
    cb90:	b.hi	cd78 <_Unwind_GetTextRelBase@@GCC_3.0+0xdf8>  // b.pmore
    cb94:	cmp	w0, #0x20
    cb98:	mov	x23, #0x0                   	// #0
    cb9c:	b.ne	cd68 <_Unwind_GetTextRelBase@@GCC_3.0+0xde8>  // b.any
    cba0:	mov	x0, x20
    cba4:	bl	2b50 <_Unwind_GetTextRelBase@plt>
    cba8:	mov	x1, x0
    cbac:	mov	x2, x22
    cbb0:	mov	w0, w24
    cbb4:	add	x3, sp, #0x68
    cbb8:	bl	ba38 <__enable_execute_stack@@GCC_3.4.2+0x8>
    cbbc:	cmp	x23, #0x0
    cbc0:	csel	x23, x23, x0, ne  // ne = any
    cbc4:	ldr	x0, [sp, #104]
    cbc8:	str	x0, [x20, #800]
    cbcc:	b	c9ec <_Unwind_GetTextRelBase@@GCC_3.0+0xa6c>
    cbd0:	mov	x22, #0x18                  	// #24
    cbd4:	cbz	w0, c9ac <_Unwind_GetTextRelBase@@GCC_3.0+0xa2c>
    cbd8:	bl	2c50 <abort@plt>
    cbdc:	ldp	x21, x22, [sp, #32]
    cbe0:	mov	w0, #0x5                   	// #5
    cbe4:	ldp	x19, x20, [sp, #16]
    cbe8:	ldp	x29, x30, [sp], #112
    cbec:	ret
    cbf0:	mov	x25, x2
    cbf4:	cbnz	x25, c968 <_Unwind_GetTextRelBase@@GCC_3.0+0x9e8>
    cbf8:	ldp	x25, x26, [sp, #64]
    cbfc:	ldp	x27, x28, [sp, #80]
    cc00:	mov	w0, #0x3                   	// #3
    cc04:	ldp	x19, x20, [sp, #16]
    cc08:	ldp	x21, x22, [sp, #32]
    cc0c:	ldp	x23, x24, [sp, #48]
    cc10:	ldp	x29, x30, [sp], #112
    cc14:	ret
    cc18:	and	w0, w24, #0x70
    cc1c:	cmp	w0, #0x30
    cc20:	b.eq	ce20 <_Unwind_GetTextRelBase@@GCC_3.0+0xea0>  // b.none
    cc24:	b.hi	cc40 <_Unwind_GetTextRelBase@@GCC_3.0+0xcc0>  // b.pmore
    cc28:	cmp	w0, #0x10
    cc2c:	b.eq	cc60 <_Unwind_GetTextRelBase@@GCC_3.0+0xce0>  // b.none
    cc30:	cmp	w0, #0x20
    cc34:	b.eq	cba0 <_Unwind_GetTextRelBase@@GCC_3.0+0xc20>  // b.none
    cc38:	cbz	w0, cc60 <_Unwind_GetTextRelBase@@GCC_3.0+0xce0>
    cc3c:	bl	2c50 <abort@plt>
    cc40:	cmp	w0, #0x40
    cc44:	b.ne	cc58 <_Unwind_GetTextRelBase@@GCC_3.0+0xcd8>  // b.any
    cc48:	mov	x0, x20
    cc4c:	bl	2ab0 <_Unwind_GetRegionStart@plt>
    cc50:	mov	x1, x0
    cc54:	b	cbac <_Unwind_GetTextRelBase@@GCC_3.0+0xc2c>
    cc58:	cmp	w0, #0x50
    cc5c:	b.ne	cb40 <_Unwind_GetTextRelBase@@GCC_3.0+0xbc0>  // b.any
    cc60:	mov	x2, x22
    cc64:	mov	w0, w24
    cc68:	add	x3, sp, #0x68
    cc6c:	mov	x1, #0x0                   	// #0
    cc70:	bl	ba38 <__enable_execute_stack@@GCC_3.4.2+0x8>
    cc74:	ldr	x0, [sp, #104]
    cc78:	str	x0, [x20, #800]
    cc7c:	b	c9ec <_Unwind_GetTextRelBase@@GCC_3.0+0xa6c>
    cc80:	ldr	x0, [x20, #792]
    cc84:	mov	w1, #0x1168                	// #4456
    cc88:	movk	w1, #0xd280, lsl #16
    cc8c:	ldr	w2, [x0]
    cc90:	cmp	w2, w1
    cc94:	b.ne	cbdc <_Unwind_GetTextRelBase@@GCC_3.0+0xc5c>  // b.any
    cc98:	ldr	w1, [x0, #4]
    cc9c:	mov	w0, #0x1                   	// #1
    cca0:	movk	w0, #0xd400, lsl #16
    cca4:	cmp	w1, w0
    cca8:	b.ne	cbdc <_Unwind_GetTextRelBase@@GCC_3.0+0xc5c>  // b.any
    ccac:	ldr	x6, [x20, #784]
    ccb0:	mov	w3, #0x1                   	// #1
    ccb4:	mov	x1, x19
    ccb8:	mov	w2, w3
    ccbc:	add	x8, x6, #0x130
    ccc0:	mov	x4, #0x1f                  	// #31
    ccc4:	mov	x5, #0x130                 	// #304
    ccc8:	mov	x0, #0x8                   	// #8
    cccc:	str	x5, [x19, #1576]
    ccd0:	str	x4, [x19, #1584]
    ccd4:	str	w3, [x19, #1600]
    ccd8:	str	w2, [x1, #8]
    ccdc:	str	x0, [x1], #16
    cce0:	add	x0, x0, #0x8
    cce4:	cmp	x0, #0x100
    cce8:	b.ne	ccd8 <_Unwind_GetTextRelBase@@GCC_3.0+0xd58>  // b.any
    ccec:	ldr	w0, [x6, #592]
    ccf0:	add	x5, x6, #0x250
    ccf4:	cbz	w0, cddc <_Unwind_GetTextRelBase@@GCC_3.0+0xe5c>
    ccf8:	mov	w7, #0x8001                	// #32769
    ccfc:	add	x4, x19, #0x600
    cd00:	add	x9, x6, x19
    cd04:	movk	w7, #0x4650, lsl #16
    cd08:	mov	w3, #0x1                   	// #1
    cd0c:	b	cd20 <_Unwind_GetTextRelBase@@GCC_3.0+0xda0>
    cd10:	ldr	w0, [x5, #4]
    cd14:	add	x5, x5, x0
    cd18:	ldr	w0, [x5]
    cd1c:	cbz	w0, cddc <_Unwind_GetTextRelBase@@GCC_3.0+0xe5c>
    cd20:	cmp	w0, w7
    cd24:	b.ne	cd10 <_Unwind_GetTextRelBase@@GCC_3.0+0xd90>  // b.any
    cd28:	sub	x2, x5, #0x520
    cd2c:	add	x0, x19, #0x400
    cd30:	sub	x2, x2, x9
    cd34:	nop
    cd38:	str	w3, [x0, #8]
    cd3c:	add	x1, x2, x0
    cd40:	str	x1, [x0], #16
    cd44:	cmp	x4, x0
    cd48:	b.ne	cd38 <_Unwind_GetTextRelBase@@GCC_3.0+0xdb8>  // b.any
    cd4c:	b	cd10 <_Unwind_GetTextRelBase@@GCC_3.0+0xd90>
    cd50:	mov	x0, x20
    cd54:	bl	2da0 <_Unwind_GetDataRelBase@plt>
    cd58:	mov	x1, x0
    cd5c:	b	cae8 <_Unwind_GetTextRelBase@@GCC_3.0+0xb68>
    cd60:	mov	x22, #0xc                   	// #12
    cd64:	b	c9ac <_Unwind_GetTextRelBase@@GCC_3.0+0xa2c>
    cd68:	b.hi	cb40 <_Unwind_GetTextRelBase@@GCC_3.0+0xbc0>  // b.pmore
    cd6c:	tst	w24, #0x60
    cd70:	b.eq	cd8c <_Unwind_GetTextRelBase@@GCC_3.0+0xe0c>  // b.none
    cd74:	bl	2c50 <abort@plt>
    cd78:	cmp	w0, #0x40
    cd7c:	mov	x23, #0x0                   	// #0
    cd80:	b.eq	cc48 <_Unwind_GetTextRelBase@@GCC_3.0+0xcc8>  // b.none
    cd84:	cmp	w0, #0x50
    cd88:	b.ne	cb40 <_Unwind_GetTextRelBase@@GCC_3.0+0xbc0>  // b.any
    cd8c:	mov	x1, #0x0                   	// #0
    cd90:	mov	x2, x22
    cd94:	mov	w0, w24
    cd98:	add	x3, sp, #0x68
    cd9c:	bl	ba38 <__enable_execute_stack@@GCC_3.4.2+0x8>
    cda0:	mov	x23, x0
    cda4:	ldr	x1, [sp, #104]
    cda8:	str	x1, [x20, #800]
    cdac:	b	c9ec <_Unwind_GetTextRelBase@@GCC_3.0+0xa6c>
    cdb0:	mov	x22, #0x8                   	// #8
    cdb4:	b	c9ac <_Unwind_GetTextRelBase@@GCC_3.0+0xa2c>
    cdb8:	ldrb	w0, [x2]
    cdbc:	cmp	w0, #0x8
    cdc0:	b.ne	cc00 <_Unwind_GetTextRelBase@@GCC_3.0+0xc80>  // b.any
    cdc4:	ldrb	w0, [x2, #1]
    cdc8:	cbnz	w0, cc00 <_Unwind_GetTextRelBase@@GCC_3.0+0xc80>
    cdcc:	add	x2, x2, #0x2
    cdd0:	stp	x25, x26, [sp, #64]
    cdd4:	stp	x27, x28, [sp, #80]
    cdd8:	b	c85c <_Unwind_GetTextRelBase@@GCC_3.0+0x8dc>
    cddc:	mov	w3, #0x1                   	// #1
    cde0:	strb	w3, [x19, #1651]
    cde4:	add	x1, x6, #0x230
    cde8:	mov	w5, #0x4                   	// #4
    cdec:	ldr	x2, [x8, #264]
    cdf0:	sub	x1, x1, x8
    cdf4:	mov	x4, #0x60                  	// #96
    cdf8:	mov	w0, #0x0                   	// #0
    cdfc:	sub	x8, x2, x8
    ce00:	ldp	x21, x22, [sp, #32]
    ce04:	str	x1, [x19, #496]
    ce08:	str	w3, [x19, #504]
    ce0c:	str	x8, [x19, #1536]
    ce10:	str	w5, [x19, #1544]
    ce14:	str	x4, [x19, #1640]
    ce18:	b	ca1c <_Unwind_GetTextRelBase@@GCC_3.0+0xa9c>
    ce1c:	mov	x23, #0x0                   	// #0
    ce20:	mov	x0, x20
    ce24:	bl	2da0 <_Unwind_GetDataRelBase@plt>
    ce28:	mov	x1, x0
    ce2c:	b	cbac <_Unwind_GetTextRelBase@@GCC_3.0+0xc2c>
    ce30:	mov	x25, x2
    ce34:	b	c968 <_Unwind_GetTextRelBase@@GCC_3.0+0x9e8>
    ce38:	sub	sp, sp, #0x260
    ce3c:	cmp	x0, x1
    ce40:	stp	x29, x30, [sp]
    ce44:	mov	x29, sp
    ce48:	str	x3, [sp, #96]
    ce4c:	b.cs	d2f8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1378>  // b.hs, b.nlast
    ce50:	mov	x4, x0
    ce54:	stp	x19, x20, [sp, #16]
    ce58:	mov	x20, x1
    ce5c:	stp	x21, x22, [sp, #32]
    ce60:	adrp	x22, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    ce64:	add	x21, sp, #0x60
    ce68:	add	x22, x22, #0x680
    ce6c:	stp	x23, x24, [sp, #48]
    ce70:	adrp	x24, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    ce74:	mov	x23, x2
    ce78:	add	x24, x24, #0x860
    ce7c:	mov	w19, #0x1                   	// #1
    ce80:	mov	x5, x4
    ce84:	ldrb	w6, [x5], #1
    ce88:	sub	w0, w6, #0x3
    ce8c:	cmp	w0, #0xee
    ce90:	b.hi	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>  // b.pmore
    ce94:	ldrh	w0, [x22, w0, uxtw #1]
    ce98:	adr	x1, cea4 <_Unwind_GetTextRelBase@@GCC_3.0+0xf24>
    ce9c:	add	x0, x1, w0, sxth #2
    cea0:	br	x0
    cea4:	cmp	w19, #0x1
    cea8:	b.le	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    ceac:	sub	w3, w19, #0x2
    ceb0:	sub	w19, w19, #0x1
    ceb4:	sub	w6, w6, #0x1a
    ceb8:	cmp	w6, #0x14
    cebc:	ldr	x1, [x21, w19, sxtw #3]
    cec0:	ldr	x0, [x21, w3, sxtw #3]
    cec4:	b.ls	d2b0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1330>  // b.plast
    cec8:	stp	x25, x26, [sp, #64]
    cecc:	bl	2c50 <abort@plt>
    ced0:	mov	x3, #0x0                   	// #0
    ced4:	mov	w1, #0x0                   	// #0
    ced8:	ldrb	w2, [x5], #1
    cedc:	and	x0, x2, #0x7f
    cee0:	lsl	x0, x0, x1
    cee4:	add	w1, w1, #0x7
    cee8:	orr	x3, x3, x0
    ceec:	tbnz	w2, #7, ced8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf58>
    cef0:	cmp	w1, #0x3f
    cef4:	b.ls	d298 <_Unwind_GetTextRelBase@@GCC_3.0+0x1318>  // b.plast
    cef8:	sub	w6, w6, #0x70
    cefc:	cmp	w6, #0x61
    cf00:	b.gt	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    cf04:	ldr	x2, [x23, #832]
    cf08:	sxtw	x1, w6
    cf0c:	ldr	x0, [x23, x1, lsl #3]
    cf10:	tbz	x2, #62, cf20 <_Unwind_GetTextRelBase@@GCC_3.0+0xfa0>
    cf14:	add	x1, x23, x1
    cf18:	ldrb	w1, [x1, #856]
    cf1c:	cbnz	w1, cf40 <_Unwind_GetTextRelBase@@GCC_3.0+0xfc0>
    cf20:	cmp	w6, #0x2e
    cf24:	b.eq	d2c8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1348>  // b.none
    cf28:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    cf2c:	add	x1, x1, #0x1d0
    cf30:	ldrb	w1, [x1, w6, sxtw]
    cf34:	cmp	w1, #0x8
    cf38:	b.ne	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>  // b.any
    cf3c:	ldr	x0, [x0]
    cf40:	add	x0, x3, x0
    cf44:	mov	w3, w19
    cf48:	mov	x4, x5
    cf4c:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    cf50:	mov	w3, w19
    cf54:	add	x4, x4, #0x9
    cf58:	ldur	x0, [x4, #-8]
    cf5c:	nop
    cf60:	cmp	w3, #0x3f
    cf64:	b.gt	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    cf68:	add	w19, w3, #0x1
    cf6c:	str	x0, [x21, w3, sxtw #3]
    cf70:	cmp	x20, x4
    cf74:	b.hi	ce80 <_Unwind_GetTextRelBase@@GCC_3.0+0xf00>  // b.pmore
    cf78:	cbz	w19, cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    cf7c:	sub	w19, w19, #0x1
    cf80:	add	x0, sp, #0x60
    cf84:	ldp	x29, x30, [sp]
    cf88:	ldr	x0, [x0, w19, sxtw #3]
    cf8c:	ldp	x19, x20, [sp, #16]
    cf90:	ldp	x21, x22, [sp, #32]
    cf94:	ldp	x23, x24, [sp, #48]
    cf98:	add	sp, sp, #0x260
    cf9c:	ret
    cfa0:	sub	w6, w6, #0x50
    cfa4:	cmp	w6, #0x61
    cfa8:	b.gt	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    cfac:	ldr	x2, [x23, #832]
    cfb0:	sxtw	x1, w6
    cfb4:	ldr	x0, [x23, x1, lsl #3]
    cfb8:	tbz	x2, #62, cfc8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1048>
    cfbc:	add	x1, x23, x1
    cfc0:	ldrb	w1, [x1, #856]
    cfc4:	cbnz	w1, cf44 <_Unwind_GetTextRelBase@@GCC_3.0+0xfc4>
    cfc8:	cmp	w6, #0x2e
    cfcc:	b.eq	d2d4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1354>  // b.none
    cfd0:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    cfd4:	add	x1, x1, #0x1d0
    cfd8:	ldrb	w1, [x1, w6, sxtw]
    cfdc:	cmp	w1, #0x8
    cfe0:	b.ne	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>  // b.any
    cfe4:	mov	w3, w19
    cfe8:	mov	x4, x5
    cfec:	ldr	x0, [x0]
    cff0:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    cff4:	sub	w0, w6, #0x30
    cff8:	mov	w3, w19
    cffc:	mov	x4, x5
    d000:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d004:	cbz	w19, cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    d008:	sub	w3, w19, #0x1
    d00c:	cmp	w6, #0x20
    d010:	ldr	x0, [x21, w3, sxtw #3]
    d014:	b.eq	d5d8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1658>  // b.none
    d018:	b.hi	d038 <_Unwind_GetTextRelBase@@GCC_3.0+0x10b8>  // b.pmore
    d01c:	cmp	w6, #0x19
    d020:	b.eq	d308 <_Unwind_GetTextRelBase@@GCC_3.0+0x1388>  // b.none
    d024:	cmp	w6, #0x1f
    d028:	b.ne	d258 <_Unwind_GetTextRelBase@@GCC_3.0+0x12d8>  // b.any
    d02c:	neg	x0, x0
    d030:	mov	x4, x5
    d034:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d038:	cmp	w6, #0x23
    d03c:	b.eq	d26c <_Unwind_GetTextRelBase@@GCC_3.0+0x12ec>  // b.none
    d040:	cmp	w6, #0x94
    d044:	b.ne	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>  // b.any
    d048:	ldrb	w1, [x4, #1]
    d04c:	add	x4, x4, #0x2
    d050:	cmp	w1, #0x4
    d054:	b.eq	d4c8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1548>  // b.none
    d058:	b.hi	d5f4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1674>  // b.pmore
    d05c:	cmp	w1, #0x1
    d060:	b.ne	d5e4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1664>  // b.any
    d064:	ldrb	w0, [x0]
    d068:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d06c:	cmp	w19, #0x2
    d070:	b.le	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    d074:	sub	w1, w19, #0x1
    d078:	sub	w0, w19, #0x3
    d07c:	mov	x4, x5
    d080:	add	x3, x21, w1, sxtw #3
    d084:	add	x2, x21, w0, sxtw #3
    d088:	ldr	x6, [x21, w1, sxtw #3]
    d08c:	ldp	x5, x1, [x3, #-16]
    d090:	str	x6, [x21, w0, sxtw #3]
    d094:	stp	x5, x1, [x2, #8]
    d098:	b	cf70 <_Unwind_GetTextRelBase@@GCC_3.0+0xff0>
    d09c:	cmp	w19, #0x1
    d0a0:	b.le	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    d0a4:	sub	w1, w19, #0x1
    d0a8:	sub	w0, w19, #0x2
    d0ac:	mov	x4, x5
    d0b0:	add	x1, x21, w1, sxtw #3
    d0b4:	sbfiz	x0, x0, #3, #32
    d0b8:	ldur	q0, [x1, #-8]
    d0bc:	ext	v0.16b, v0.16b, v0.16b, #8
    d0c0:	str	q0, [x21, x0]
    d0c4:	b	cf70 <_Unwind_GetTextRelBase@@GCC_3.0+0xff0>
    d0c8:	ldrb	w3, [x4, #1]
    d0cc:	sub	w1, w19, #0x1
    d0d0:	add	x4, x4, #0x2
    d0d4:	sxtw	x2, w1
    d0d8:	cmp	x3, w1, sxtw
    d0dc:	b.ge	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>  // b.tcont
    d0e0:	sub	x1, x2, x3
    d0e4:	mov	w3, w19
    d0e8:	ldr	x0, [x21, x1, lsl #3]
    d0ec:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d0f0:	cmp	w19, #0x1
    d0f4:	b.le	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    d0f8:	sub	w0, w19, #0x2
    d0fc:	mov	x4, x5
    d100:	mov	w3, w19
    d104:	ldr	x0, [x21, w0, sxtw #3]
    d108:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d10c:	cbz	w19, cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    d110:	sub	w19, w19, #0x1
    d114:	mov	x4, x5
    d118:	b	cf70 <_Unwind_GetTextRelBase@@GCC_3.0+0xff0>
    d11c:	cbz	w19, cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    d120:	sub	w0, w19, #0x1
    d124:	mov	x4, x5
    d128:	mov	w3, w19
    d12c:	ldr	x0, [x21, w0, sxtw #3]
    d130:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d134:	ldursh	x1, [x4, #1]
    d138:	add	x4, x4, #0x3
    d13c:	add	x4, x4, x1
    d140:	b	cf70 <_Unwind_GetTextRelBase@@GCC_3.0+0xff0>
    d144:	ldrb	w0, [x4, #1]
    d148:	mov	w3, w19
    d14c:	add	x4, x4, #0x2
    d150:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d154:	stp	x25, x26, [sp, #64]
    d158:	add	x26, x4, #0x2
    d15c:	ldrb	w25, [x4, #1]
    d160:	cmp	w25, #0xff
    d164:	b.eq	d1b4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1234>  // b.none
    d168:	and	w0, w25, #0x70
    d16c:	cmp	w0, #0x30
    d170:	b.eq	d2e8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1368>  // b.none
    d174:	b.hi	d190 <_Unwind_GetTextRelBase@@GCC_3.0+0x1210>  // b.pmore
    d178:	cmp	w0, #0x20
    d17c:	b.ne	d1a8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1228>  // b.any
    d180:	mov	x0, x23
    d184:	bl	2b50 <_Unwind_GetTextRelBase@plt>
    d188:	mov	x1, x0
    d18c:	b	d1b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1238>
    d190:	cmp	w0, #0x40
    d194:	b.ne	d1dc <_Unwind_GetTextRelBase@@GCC_3.0+0x125c>  // b.any
    d198:	mov	x0, x23
    d19c:	bl	2ab0 <_Unwind_GetRegionStart@plt>
    d1a0:	mov	x1, x0
    d1a4:	b	d1b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1238>
    d1a8:	b.hi	cecc <_Unwind_GetTextRelBase@@GCC_3.0+0xf4c>  // b.pmore
    d1ac:	tst	w25, #0x60
    d1b0:	b.ne	cecc <_Unwind_GetTextRelBase@@GCC_3.0+0xf4c>  // b.any
    d1b4:	mov	x1, #0x0                   	// #0
    d1b8:	mov	x2, x26
    d1bc:	mov	w0, w25
    d1c0:	add	x3, sp, #0x58
    d1c4:	bl	ba38 <__enable_execute_stack@@GCC_3.4.2+0x8>
    d1c8:	mov	w3, w19
    d1cc:	mov	x4, x0
    d1d0:	ldp	x25, x26, [sp, #64]
    d1d4:	ldr	x0, [sp, #88]
    d1d8:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d1dc:	cmp	w0, #0x50
    d1e0:	b.eq	d1b4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1234>  // b.none
    d1e4:	bl	2c50 <abort@plt>
    d1e8:	cbz	w19, cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    d1ec:	sub	w19, w19, #0x1
    d1f0:	add	x1, x4, #0x3
    d1f4:	ldr	x0, [x21, w19, sxtw #3]
    d1f8:	cbz	x0, d2c0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1340>
    d1fc:	ldursh	x4, [x4, #1]
    d200:	add	x4, x1, x4
    d204:	b	cf70 <_Unwind_GetTextRelBase@@GCC_3.0+0xff0>
    d208:	ldursw	x0, [x4, #1]
    d20c:	mov	w3, w19
    d210:	add	x4, x4, #0x5
    d214:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d218:	ldur	w0, [x4, #1]
    d21c:	mov	w3, w19
    d220:	add	x4, x4, #0x5
    d224:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d228:	ldursh	x0, [x4, #1]
    d22c:	mov	w3, w19
    d230:	add	x4, x4, #0x3
    d234:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d238:	ldurh	w0, [x4, #1]
    d23c:	mov	w3, w19
    d240:	add	x4, x4, #0x3
    d244:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d248:	ldrsb	x0, [x4, #1]
    d24c:	mov	w3, w19
    d250:	add	x4, x4, #0x2
    d254:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d258:	cmp	w6, #0x6
    d25c:	b.ne	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>  // b.any
    d260:	mov	x4, x5
    d264:	ldr	x0, [x0]
    d268:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d26c:	mov	x6, #0x0                   	// #0
    d270:	mov	w2, #0x0                   	// #0
    d274:	ldrb	w4, [x5], #1
    d278:	and	x1, x4, #0x7f
    d27c:	lsl	x1, x1, x2
    d280:	add	w2, w2, #0x7
    d284:	orr	x6, x6, x1
    d288:	tbnz	w4, #7, d274 <_Unwind_GetTextRelBase@@GCC_3.0+0x12f4>
    d28c:	add	x0, x0, x6
    d290:	mov	x4, x5
    d294:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d298:	mov	x0, #0xffffffffffffffff    	// #-1
    d29c:	tst	x2, #0x40
    d2a0:	lsl	x0, x0, x1
    d2a4:	orr	x0, x3, x0
    d2a8:	csel	x3, x0, x3, ne  // ne = any
    d2ac:	b	cef8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf78>
    d2b0:	ldrh	w2, [x24, w6, uxtw #1]
    d2b4:	adr	x4, d2c0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1340>
    d2b8:	add	x2, x4, w2, sxth #2
    d2bc:	br	x2
    d2c0:	mov	x4, x1
    d2c4:	b	cf70 <_Unwind_GetTextRelBase@@GCC_3.0+0xff0>
    d2c8:	cntd	x0
    d2cc:	sxtw	x0, w0
    d2d0:	b	cf40 <_Unwind_GetTextRelBase@@GCC_3.0+0xfc0>
    d2d4:	cntd	x0
    d2d8:	mov	w3, w19
    d2dc:	mov	x4, x5
    d2e0:	sxtw	x0, w0
    d2e4:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d2e8:	mov	x0, x23
    d2ec:	bl	2da0 <_Unwind_GetDataRelBase@plt>
    d2f0:	mov	x1, x0
    d2f4:	b	d1b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1238>
    d2f8:	mov	x0, x3
    d2fc:	ldp	x29, x30, [sp]
    d300:	add	sp, sp, #0x260
    d304:	ret
    d308:	cmp	x0, #0x0
    d30c:	mov	x4, x5
    d310:	cneg	x0, x0, lt  // lt = tstop
    d314:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d318:	mov	x4, x5
    d31c:	mov	x3, #0x0                   	// #0
    d320:	mov	w1, #0x0                   	// #0
    d324:	nop
    d328:	ldrb	w2, [x4], #1
    d32c:	and	x0, x2, #0x7f
    d330:	lsl	x0, x0, x1
    d334:	add	w1, w1, #0x7
    d338:	orr	x3, x3, x0
    d33c:	tbnz	w2, #7, d328 <_Unwind_GetTextRelBase@@GCC_3.0+0x13a8>
    d340:	cmp	w3, #0x61
    d344:	mov	w1, w3
    d348:	b.gt	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    d34c:	ldr	x2, [x23, #832]
    d350:	sxtw	x3, w3
    d354:	ldr	x0, [x23, x3, lsl #3]
    d358:	tbz	x2, #62, d368 <_Unwind_GetTextRelBase@@GCC_3.0+0x13e8>
    d35c:	add	x3, x23, x3
    d360:	ldrb	w2, [x3, #856]
    d364:	cbnz	w2, d3b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1438>
    d368:	cmp	w1, #0x2e
    d36c:	b.eq	d5c8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1648>  // b.none
    d370:	adrp	x2, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    d374:	add	x2, x2, #0x1d0
    d378:	ldrb	w1, [x2, w1, sxtw]
    d37c:	cmp	w1, #0x8
    d380:	b.ne	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>  // b.any
    d384:	mov	w3, w19
    d388:	ldr	x0, [x0]
    d38c:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d390:	mov	x4, x5
    d394:	mov	x0, #0x0                   	// #0
    d398:	mov	w2, #0x0                   	// #0
    d39c:	nop
    d3a0:	ldrb	w3, [x4], #1
    d3a4:	and	x1, x3, #0x7f
    d3a8:	lsl	x1, x1, x2
    d3ac:	add	w2, w2, #0x7
    d3b0:	orr	x0, x0, x1
    d3b4:	tbnz	w3, #7, d3a0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1420>
    d3b8:	mov	w3, w19
    d3bc:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d3c0:	mov	x4, x5
    d3c4:	b	cf70 <_Unwind_GetTextRelBase@@GCC_3.0+0xff0>
    d3c8:	mov	x4, x5
    d3cc:	mov	x0, #0x0                   	// #0
    d3d0:	mov	w2, #0x0                   	// #0
    d3d4:	nop
    d3d8:	ldrb	w5, [x4], #1
    d3dc:	and	x1, x5, #0x7f
    d3e0:	lsl	x1, x1, x2
    d3e4:	add	w2, w2, #0x7
    d3e8:	orr	x0, x0, x1
    d3ec:	tbnz	w5, #7, d3d8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1458>
    d3f0:	mov	w3, w19
    d3f4:	cmp	w2, #0x3f
    d3f8:	b.hi	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>  // b.pmore
    d3fc:	tbz	w5, #6, cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d400:	mov	x1, #0xffffffffffffffff    	// #-1
    d404:	lsl	x2, x1, x2
    d408:	orr	x0, x0, x2
    d40c:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d410:	mov	x4, x5
    d414:	mov	w1, #0x0                   	// #0
    d418:	mov	x5, #0x0                   	// #0
    d41c:	nop
    d420:	ldrb	w2, [x4], #1
    d424:	and	x0, x2, #0x7f
    d428:	lsl	x0, x0, x1
    d42c:	add	w1, w1, #0x7
    d430:	orr	x5, x5, x0
    d434:	tbnz	w2, #7, d420 <_Unwind_GetTextRelBase@@GCC_3.0+0x14a0>
    d438:	mov	x3, #0x0                   	// #0
    d43c:	mov	w1, #0x0                   	// #0
    d440:	ldrb	w2, [x4], #1
    d444:	and	x0, x2, #0x7f
    d448:	lsl	x0, x0, x1
    d44c:	add	w1, w1, #0x7
    d450:	orr	x3, x3, x0
    d454:	tbnz	w2, #7, d440 <_Unwind_GetTextRelBase@@GCC_3.0+0x14c0>
    d458:	cmp	w1, #0x3f
    d45c:	b.hi	d474 <_Unwind_GetTextRelBase@@GCC_3.0+0x14f4>  // b.pmore
    d460:	mov	x0, #0xffffffffffffffff    	// #-1
    d464:	tst	x2, #0x40
    d468:	lsl	x0, x0, x1
    d46c:	orr	x0, x3, x0
    d470:	csel	x3, x0, x3, ne  // ne = any
    d474:	cmp	w5, #0x61
    d478:	mov	w1, w5
    d47c:	b.gt	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>
    d480:	ldr	x2, [x23, #832]
    d484:	sxtw	x5, w5
    d488:	ldr	x0, [x23, x5, lsl #3]
    d48c:	tbz	x2, #62, d49c <_Unwind_GetTextRelBase@@GCC_3.0+0x151c>
    d490:	add	x5, x23, x5
    d494:	ldrb	w2, [x5, #856]
    d498:	cbnz	w2, d4bc <_Unwind_GetTextRelBase@@GCC_3.0+0x153c>
    d49c:	cmp	w1, #0x2e
    d4a0:	b.eq	d5b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1638>  // b.none
    d4a4:	adrp	x2, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    d4a8:	add	x2, x2, #0x1d0
    d4ac:	ldrb	w1, [x2, w1, sxtw]
    d4b0:	cmp	w1, #0x8
    d4b4:	b.ne	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>  // b.any
    d4b8:	ldr	x0, [x0]
    d4bc:	add	x0, x3, x0
    d4c0:	mov	w3, w19
    d4c4:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d4c8:	ldr	w0, [x0]
    d4cc:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d4d0:	cmp	x0, x1
    d4d4:	mov	x4, x5
    d4d8:	cset	x0, lt  // lt = tstop
    d4dc:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d4e0:	cmp	x0, x1
    d4e4:	mov	x4, x5
    d4e8:	cset	x0, le
    d4ec:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d4f0:	cmp	x0, x1
    d4f4:	mov	x4, x5
    d4f8:	cset	x0, gt
    d4fc:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d500:	cmp	x0, x1
    d504:	mov	x4, x5
    d508:	cset	x0, ge  // ge = tcont
    d50c:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d510:	cmp	x0, x1
    d514:	mov	x4, x5
    d518:	cset	x0, eq  // eq = none
    d51c:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d520:	eor	x0, x0, x1
    d524:	mov	x4, x5
    d528:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d52c:	mov	x4, x5
    d530:	asr	x0, x0, x1
    d534:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d538:	mov	x4, x5
    d53c:	lsr	x0, x0, x1
    d540:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d544:	mov	x4, x5
    d548:	lsl	x0, x0, x1
    d54c:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d550:	add	x0, x0, x1
    d554:	mov	x4, x5
    d558:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d55c:	cmp	x0, x1
    d560:	mov	x4, x5
    d564:	cset	x0, ne  // ne = any
    d568:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d56c:	sdiv	x0, x0, x1
    d570:	mov	x4, x5
    d574:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d578:	and	x0, x0, x1
    d57c:	mov	x4, x5
    d580:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d584:	orr	x0, x0, x1
    d588:	mov	x4, x5
    d58c:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d590:	mul	x0, x0, x1
    d594:	mov	x4, x5
    d598:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d59c:	udiv	x2, x0, x1
    d5a0:	mov	x4, x5
    d5a4:	msub	x0, x2, x1, x0
    d5a8:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d5ac:	sub	x0, x0, x1
    d5b0:	mov	x4, x5
    d5b4:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d5b8:	cntd	x0
    d5bc:	sxtw	x0, w0
    d5c0:	add	x0, x3, x0
    d5c4:	b	d4c0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1540>
    d5c8:	cntd	x0
    d5cc:	mov	w3, w19
    d5d0:	sxtw	x0, w0
    d5d4:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d5d8:	mvn	x0, x0
    d5dc:	mov	x4, x5
    d5e0:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d5e4:	cmp	w1, #0x2
    d5e8:	b.ne	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>  // b.any
    d5ec:	ldrh	w0, [x0]
    d5f0:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d5f4:	cmp	w1, #0x8
    d5f8:	b.ne	cec8 <_Unwind_GetTextRelBase@@GCC_3.0+0xf48>  // b.any
    d5fc:	ldr	x0, [x0]
    d600:	b	cf60 <_Unwind_GetTextRelBase@@GCC_3.0+0xfe0>
    d604:	nop
    d608:	sub	sp, sp, #0x440
    d60c:	mov	x2, #0x3c0                 	// #960
    d610:	stp	x29, x30, [sp]
    d614:	mov	x29, sp
    d618:	stp	x27, x28, [sp, #80]
    d61c:	add	x28, sp, #0x80
    d620:	mov	x27, x0
    d624:	stp	x19, x20, [sp, #16]
    d628:	stp	x21, x22, [sp, #32]
    d62c:	stp	x23, x24, [sp, #48]
    d630:	stp	x25, x26, [sp, #64]
    d634:	str	x1, [sp, #104]
    d638:	mov	x1, x0
    d63c:	mov	x0, x28
    d640:	bl	2aa0 <memcpy@plt>
    d644:	ldr	x1, [sp, #960]
    d648:	tbz	x1, #62, d654 <_Unwind_GetTextRelBase@@GCC_3.0+0x16d4>
    d64c:	ldrb	w0, [sp, #1015]
    d650:	cbnz	w0, d65c <_Unwind_GetTextRelBase@@GCC_3.0+0x16dc>
    d654:	ldr	x0, [x28, #248]
    d658:	cbz	x0, d928 <_Unwind_GetTextRelBase@@GCC_3.0+0x19a8>
    d65c:	ldr	x0, [x27, #832]
    d660:	tbz	x0, #62, d668 <_Unwind_GetTextRelBase@@GCC_3.0+0x16e8>
    d664:	strb	wzr, [x27, #887]
    d668:	ldr	x0, [sp, #104]
    d66c:	ldr	w0, [x0, #1600]
    d670:	str	xzr, [x27, #248]
    d674:	cmp	w0, #0x1
    d678:	b.ne	d6c8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1748>  // b.any
    d67c:	ldr	x0, [sp, #104]
    d680:	ldr	x0, [x0, #1584]
    d684:	cmp	w0, #0x61
    d688:	b.gt	d890 <_Unwind_GetTextRelBase@@GCC_3.0+0x1910>
    d68c:	sxtw	x2, w0
    d690:	ldr	x3, [x28, x2, lsl #3]
    d694:	tbnz	x1, #62, d908 <_Unwind_GetTextRelBase@@GCC_3.0+0x1988>
    d698:	cmp	w0, #0x2e
    d69c:	b.eq	d91c <_Unwind_GetTextRelBase@@GCC_3.0+0x199c>  // b.none
    d6a0:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    d6a4:	add	x0, x0, #0x1d0
    d6a8:	ldrb	w0, [x0, x2]
    d6ac:	cmp	w0, #0x8
    d6b0:	b.ne	d890 <_Unwind_GetTextRelBase@@GCC_3.0+0x1910>  // b.any
    d6b4:	ldr	x3, [x3]
    d6b8:	ldr	x0, [sp, #104]
    d6bc:	ldr	x0, [x0, #1576]
    d6c0:	add	x22, x3, x0
    d6c4:	b	d70c <_Unwind_GetTextRelBase@@GCC_3.0+0x178c>
    d6c8:	cmp	w0, #0x2
    d6cc:	b.ne	d890 <_Unwind_GetTextRelBase@@GCC_3.0+0x1910>  // b.any
    d6d0:	ldr	x0, [sp, #104]
    d6d4:	mov	x1, #0x0                   	// #0
    d6d8:	mov	w3, #0x0                   	// #0
    d6dc:	ldr	x0, [x0, #1592]
    d6e0:	ldrb	w4, [x0], #1
    d6e4:	and	x2, x4, #0x7f
    d6e8:	lsl	x2, x2, x3
    d6ec:	add	w3, w3, #0x7
    d6f0:	orr	x1, x1, x2
    d6f4:	tbnz	w4, #7, d6e0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1760>
    d6f8:	add	x1, x0, x1
    d6fc:	mov	x2, x28
    d700:	mov	x3, #0x0                   	// #0
    d704:	bl	ce38 <_Unwind_GetTextRelBase@@GCC_3.0+0xeb8>
    d708:	mov	x22, x0
    d70c:	ldr	x25, [sp, #104]
    d710:	adrp	x23, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    d714:	add	x26, x27, #0x358
    d718:	add	x20, x23, #0x1d0
    d71c:	add	x21, sp, #0x3d8
    d720:	mov	x24, #0x0                   	// #0
    d724:	mov	w19, #0x1                   	// #1
    d728:	str	x22, [x27, #784]
    d72c:	nop
    d730:	ldr	w2, [x25, #8]
    d734:	cmp	w2, #0x3
    d738:	b.eq	d7dc <_Unwind_GetTextRelBase@@GCC_3.0+0x185c>  // b.none
    d73c:	b.hi	d820 <_Unwind_GetTextRelBase@@GCC_3.0+0x18a0>  // b.pmore
    d740:	cmp	w2, #0x1
    d744:	b.eq	d894 <_Unwind_GetTextRelBase@@GCC_3.0+0x1914>  // b.none
    d748:	cmp	w2, #0x2
    d74c:	b.ne	d774 <_Unwind_GetTextRelBase@@GCC_3.0+0x17f4>  // b.any
    d750:	ldr	x0, [x25]
    d754:	ldrb	w2, [x21, w0, sxtw]
    d758:	sxtw	x1, w0
    d75c:	cbnz	w2, d8ac <_Unwind_GetTextRelBase@@GCC_3.0+0x192c>
    d760:	ldr	x2, [x27, #832]
    d764:	ldr	x0, [x28, x1, lsl #3]
    d768:	tbnz	x2, #62, d818 <_Unwind_GetTextRelBase@@GCC_3.0+0x1898>
    d76c:	nop
    d770:	str	x0, [x27, x24, lsl #3]
    d774:	add	x24, x24, #0x1
    d778:	add	x25, x25, #0x10
    d77c:	cmp	x24, #0x62
    d780:	add	x26, x26, #0x1
    d784:	b.ne	d730 <_Unwind_GetTextRelBase@@GCC_3.0+0x17b0>  // b.any
    d788:	ldr	x3, [sp, #104]
    d78c:	ldr	x0, [x27, #832]
    d790:	ldrb	w2, [x3, #1651]
    d794:	orr	x1, x0, #0x8000000000000000
    d798:	and	x0, x0, #0x7fffffffffffffff
    d79c:	cmp	w2, #0x0
    d7a0:	csel	x0, x0, x1, eq  // eq = none
    d7a4:	ldp	x29, x30, [sp]
    d7a8:	orr	x1, x0, #0x2000000000000000
    d7ac:	ldp	x19, x20, [sp, #16]
    d7b0:	ldp	x21, x22, [sp, #32]
    d7b4:	ldp	x23, x24, [sp, #48]
    d7b8:	ldp	x25, x26, [sp, #64]
    d7bc:	str	x0, [x27, #832]
    d7c0:	ldr	x2, [x3, #544]
    d7c4:	tst	x2, #0x1
    d7c8:	csel	x0, x1, x0, ne  // ne = any
    d7cc:	str	x0, [x27, #832]
    d7d0:	ldp	x27, x28, [sp, #80]
    d7d4:	add	sp, sp, #0x440
    d7d8:	ret
    d7dc:	ldr	x0, [x25]
    d7e0:	mov	x1, #0x0                   	// #0
    d7e4:	mov	w4, #0x0                   	// #0
    d7e8:	ldrb	w5, [x0], #1
    d7ec:	and	x2, x5, #0x7f
    d7f0:	lsl	x2, x2, x4
    d7f4:	add	w4, w4, #0x7
    d7f8:	orr	x1, x1, x2
    d7fc:	tbnz	w5, #7, d7e8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1868>
    d800:	add	x1, x0, x1
    d804:	mov	x3, x22
    d808:	mov	x2, x28
    d80c:	bl	ce38 <_Unwind_GetTextRelBase@@GCC_3.0+0xeb8>
    d810:	ldr	x1, [x27, #832]
    d814:	tbz	x1, #62, d770 <_Unwind_GetTextRelBase@@GCC_3.0+0x17f0>
    d818:	strb	wzr, [x26]
    d81c:	b	d770 <_Unwind_GetTextRelBase@@GCC_3.0+0x17f0>
    d820:	cmp	w2, #0x4
    d824:	b.eq	d87c <_Unwind_GetTextRelBase@@GCC_3.0+0x18fc>  // b.none
    d828:	cmp	w2, #0x5
    d82c:	b.ne	d774 <_Unwind_GetTextRelBase@@GCC_3.0+0x17f4>  // b.any
    d830:	ldr	x0, [x25]
    d834:	mov	x1, #0x0                   	// #0
    d838:	mov	w4, #0x0                   	// #0
    d83c:	nop
    d840:	ldrb	w5, [x0], #1
    d844:	and	x2, x5, #0x7f
    d848:	lsl	x2, x2, x4
    d84c:	add	w4, w4, #0x7
    d850:	orr	x1, x1, x2
    d854:	tbnz	w5, #7, d840 <_Unwind_GetTextRelBase@@GCC_3.0+0x18c0>
    d858:	add	x1, x0, x1
    d85c:	mov	x3, x22
    d860:	mov	x2, x28
    d864:	bl	ce38 <_Unwind_GetTextRelBase@@GCC_3.0+0xeb8>
    d868:	ldrb	w1, [x24, x20]
    d86c:	cmp	w1, #0x8
    d870:	b.hi	d890 <_Unwind_GetTextRelBase@@GCC_3.0+0x1910>  // b.pmore
    d874:	strb	w19, [x26]
    d878:	b	d770 <_Unwind_GetTextRelBase@@GCC_3.0+0x17f0>
    d87c:	ldr	x0, [x25]
    d880:	ldrb	w1, [x24, x20]
    d884:	add	x0, x22, x0
    d888:	cmp	w1, #0x8
    d88c:	b.ls	d874 <_Unwind_GetTextRelBase@@GCC_3.0+0x18f4>  // b.plast
    d890:	bl	2c50 <abort@plt>
    d894:	ldr	x1, [x27, #832]
    d898:	ldr	x0, [x25]
    d89c:	add	x0, x22, x0
    d8a0:	tbz	x1, #62, d770 <_Unwind_GetTextRelBase@@GCC_3.0+0x17f0>
    d8a4:	strb	wzr, [x26]
    d8a8:	b	d770 <_Unwind_GetTextRelBase@@GCC_3.0+0x17f0>
    d8ac:	cmp	w0, #0x61
    d8b0:	b.gt	d890 <_Unwind_GetTextRelBase@@GCC_3.0+0x1910>
    d8b4:	ldr	x4, [sp, #960]
    d8b8:	ldr	x2, [x28, x1, lsl #3]
    d8bc:	tbz	x4, #62, d8e0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1960>
    d8c0:	mov	x0, x2
    d8c4:	nop
    d8c8:	add	x1, x23, #0x1d0
    d8cc:	ldrb	w1, [x24, x1]
    d8d0:	cmp	w1, #0x8
    d8d4:	b.hi	d890 <_Unwind_GetTextRelBase@@GCC_3.0+0x1910>  // b.pmore
    d8d8:	strb	w19, [x26]
    d8dc:	b	d770 <_Unwind_GetTextRelBase@@GCC_3.0+0x17f0>
    d8e0:	cmp	w0, #0x2e
    d8e4:	b.eq	d8fc <_Unwind_GetTextRelBase@@GCC_3.0+0x197c>  // b.none
    d8e8:	ldrb	w0, [x20, x1]
    d8ec:	cmp	w0, #0x8
    d8f0:	b.ne	d890 <_Unwind_GetTextRelBase@@GCC_3.0+0x1910>  // b.any
    d8f4:	ldr	x0, [x2]
    d8f8:	b	d8c8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1948>
    d8fc:	cntd	x0
    d900:	sxtw	x0, w0
    d904:	b	d8c8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1948>
    d908:	add	x1, sp, #0x3d8
    d90c:	ldrb	w1, [x1, x2]
    d910:	cbnz	w1, d6b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1738>
    d914:	cmp	w0, #0x2e
    d918:	b.ne	d6a0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1720>  // b.any
    d91c:	cntd	x0
    d920:	sxtw	x3, w0
    d924:	b	d6b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1738>
    d928:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    d92c:	ldr	x2, [x27, #784]
    d930:	ldrb	w0, [x0, #495]
    d934:	cmp	w0, #0x8
    d938:	b.ne	d890 <_Unwind_GetTextRelBase@@GCC_3.0+0x1910>  // b.any
    d93c:	str	x2, [sp, #120]
    d940:	tbz	x1, #62, d948 <_Unwind_GetTextRelBase@@GCC_3.0+0x19c8>
    d944:	strb	wzr, [sp, #1015]
    d948:	add	x0, sp, #0x78
    d94c:	str	x0, [x28, #248]
    d950:	b	d65c <_Unwind_GetTextRelBase@@GCC_3.0+0x16dc>
    d954:	nop
    d958:	sub	sp, sp, #0x6d0
    d95c:	stp	x29, x30, [sp]
    d960:	mov	x29, sp
    d964:	xpaclri
    d968:	stp	x19, x20, [sp, #16]
    d96c:	mov	x19, x0
    d970:	mov	x20, x30
    d974:	stp	x21, x22, [sp, #32]
    d978:	mov	x22, x1
    d97c:	mov	x21, x2
    d980:	mov	w1, #0x0                   	// #0
    d984:	mov	x2, #0x3c0                 	// #960
    d988:	str	x23, [sp, #48]
    d98c:	bl	2ba0 <memset@plt>
    d990:	mov	x0, #0x4000000000000000    	// #4611686018427387904
    d994:	str	x20, [x19, #792]
    d998:	str	x0, [x19, #832]
    d99c:	add	x23, sp, #0x50
    d9a0:	mov	x1, x23
    d9a4:	mov	x0, x19
    d9a8:	bl	c7b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x838>
    d9ac:	cbnz	w0, dba0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1c20>
    d9b0:	adrp	x0, 23000 <__emutls_register_common@@GCC_4.3.0+0x11c90>
    d9b4:	adrp	x20, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    d9b8:	ldr	x0, [x0, #4032]
    d9bc:	cbz	x0, da44 <_Unwind_GetTextRelBase@@GCC_3.0+0x1ac4>
    d9c0:	add	x0, x20, #0x1d0
    d9c4:	adrp	x1, b000 <__trunctfdf2@@GCC_3.0+0x2d0>
    d9c8:	add	x0, x0, #0x64
    d9cc:	add	x1, x1, #0xb98
    d9d0:	bl	2c70 <pthread_once@plt>
    d9d4:	cbnz	w0, da44 <_Unwind_GetTextRelBase@@GCC_3.0+0x1ac4>
    d9d8:	add	x20, x20, #0x1d0
    d9dc:	ldrb	w0, [x20, #31]
    d9e0:	cmp	w0, #0x8
    d9e4:	b.ne	dba0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1c20>  // b.any
    d9e8:	ldr	x0, [x19, #832]
    d9ec:	str	x22, [sp, #72]
    d9f0:	tbz	x0, #62, d9f8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a78>
    d9f4:	strb	wzr, [x19, #887]
    d9f8:	add	x0, sp, #0x48
    d9fc:	mov	x3, #0x1f                  	// #31
    da00:	mov	w2, #0x1                   	// #1
    da04:	str	x0, [x19, #248]
    da08:	mov	x1, x23
    da0c:	mov	x0, x19
    da10:	str	xzr, [sp, #1656]
    da14:	str	x3, [sp, #1664]
    da18:	str	w2, [sp, #1680]
    da1c:	bl	d608 <_Unwind_GetTextRelBase@@GCC_3.0+0x1688>
    da20:	mov	x30, x21
    da24:	xpaclri
    da28:	ldp	x21, x22, [sp, #32]
    da2c:	ldr	x23, [sp, #48]
    da30:	str	x30, [x19, #792]
    da34:	ldp	x29, x30, [sp]
    da38:	ldp	x19, x20, [sp, #16]
    da3c:	add	sp, sp, #0x6d0
    da40:	ret
    da44:	ldrb	w0, [x20, #464]
    da48:	add	x3, x20, #0x1d0
    da4c:	cbnz	w0, d9d8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a58>
    da50:	mov	w4, #0x8                   	// #8
    da54:	strb	w4, [x20, #464]
    da58:	strb	w4, [x3, #1]
    da5c:	strb	w4, [x3, #2]
    da60:	strb	w4, [x3, #3]
    da64:	strb	w4, [x3, #4]
    da68:	strb	w4, [x3, #5]
    da6c:	strb	w4, [x3, #6]
    da70:	strb	w4, [x3, #7]
    da74:	strb	w4, [x3, #8]
    da78:	strb	w4, [x3, #9]
    da7c:	strb	w4, [x3, #10]
    da80:	strb	w4, [x3, #11]
    da84:	strb	w4, [x3, #12]
    da88:	strb	w4, [x3, #13]
    da8c:	strb	w4, [x3, #14]
    da90:	strb	w4, [x3, #15]
    da94:	strb	w4, [x3, #16]
    da98:	strb	w4, [x3, #17]
    da9c:	strb	w4, [x3, #18]
    daa0:	strb	w4, [x3, #19]
    daa4:	strb	w4, [x3, #20]
    daa8:	strb	w4, [x3, #21]
    daac:	strb	w4, [x3, #22]
    dab0:	strb	w4, [x3, #23]
    dab4:	strb	w4, [x3, #24]
    dab8:	strb	w4, [x3, #25]
    dabc:	strb	w4, [x3, #26]
    dac0:	strb	w4, [x3, #27]
    dac4:	strb	w4, [x3, #28]
    dac8:	strb	w4, [x3, #29]
    dacc:	strb	w4, [x3, #30]
    dad0:	strb	w4, [x3, #31]
    dad4:	strb	w4, [x3, #64]
    dad8:	strb	w4, [x3, #46]
    dadc:	strb	w4, [x3, #65]
    dae0:	strb	w4, [x3, #66]
    dae4:	strb	w4, [x3, #67]
    dae8:	strb	w4, [x3, #68]
    daec:	strb	w4, [x3, #69]
    daf0:	strb	w4, [x3, #70]
    daf4:	strb	w4, [x3, #71]
    daf8:	strb	w4, [x3, #72]
    dafc:	strb	w4, [x3, #73]
    db00:	strb	w4, [x3, #74]
    db04:	strb	w4, [x3, #75]
    db08:	strb	w4, [x3, #76]
    db0c:	strb	w4, [x3, #77]
    db10:	strb	w4, [x3, #78]
    db14:	strb	w4, [x3, #79]
    db18:	strb	w4, [x3, #80]
    db1c:	strb	w4, [x3, #81]
    db20:	strb	w4, [x3, #82]
    db24:	strb	w4, [x3, #83]
    db28:	strb	w4, [x3, #84]
    db2c:	strb	w4, [x3, #85]
    db30:	strb	w4, [x3, #86]
    db34:	strb	w4, [x3, #87]
    db38:	strb	w4, [x3, #88]
    db3c:	strb	w4, [x3, #89]
    db40:	strb	w4, [x3, #90]
    db44:	strb	w4, [x3, #91]
    db48:	strb	w4, [x3, #92]
    db4c:	strb	w4, [x3, #93]
    db50:	strb	w4, [x3, #94]
    db54:	strb	w4, [x3, #95]
    db58:	strb	w4, [x3, #48]
    db5c:	strb	w4, [x3, #49]
    db60:	strb	w4, [x3, #50]
    db64:	strb	w4, [x3, #51]
    db68:	strb	w4, [x3, #52]
    db6c:	strb	w4, [x3, #53]
    db70:	strb	w4, [x3, #54]
    db74:	strb	w4, [x3, #55]
    db78:	strb	w4, [x3, #56]
    db7c:	strb	w4, [x3, #57]
    db80:	strb	w4, [x3, #58]
    db84:	strb	w4, [x3, #59]
    db88:	strb	w4, [x3, #60]
    db8c:	strb	w4, [x3, #61]
    db90:	strb	w4, [x3, #62]
    db94:	strb	w4, [x3, #63]
    db98:	strb	w4, [x3, #96]
    db9c:	b	d9d8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1a58>
    dba0:	bl	2c50 <abort@plt>
    dba4:	nop
    dba8:	sub	sp, sp, #0x6e0
    dbac:	stp	x29, x30, [sp]
    dbb0:	mov	x29, sp
    dbb4:	stp	x19, x20, [sp, #16]
    dbb8:	mov	x19, x1
    dbbc:	stp	x21, x22, [sp, #32]
    dbc0:	mov	x22, x0
    dbc4:	stp	x23, x24, [sp, #48]
    dbc8:	add	x23, sp, #0x60
    dbcc:	mov	x24, #0x1                   	// #1
    dbd0:	stp	x25, x26, [sp, #64]
    dbd4:	adrp	x26, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    dbd8:	add	x25, sp, #0x68
    dbdc:	add	x26, x26, #0x1d0
    dbe0:	str	x27, [sp, #80]
    dbe4:	mov	x27, x2
    dbe8:	mov	x1, x23
    dbec:	mov	x0, x19
    dbf0:	bl	c7b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x838>
    dbf4:	mov	w21, w0
    dbf8:	mov	x0, x19
    dbfc:	bl	2b90 <_Unwind_GetCFA@plt>
    dc00:	ldr	x1, [x19, #832]
    dc04:	ldr	x2, [x22, #24]
    dc08:	sub	x1, x0, x1, lsr #63
    dc0c:	cmp	x2, x1
    dc10:	cset	w20, eq  // eq = none
    dc14:	lsl	w20, w20, #2
    dc18:	cbnz	w21, dc7c <_Unwind_GetTextRelBase@@GCC_3.0+0x1cfc>
    dc1c:	ldr	x5, [sp, #1712]
    dc20:	cbz	x5, dc4c <_Unwind_GetTextRelBase@@GCC_3.0+0x1ccc>
    dc24:	ldr	x2, [x22]
    dc28:	mov	x4, x19
    dc2c:	mov	x3, x22
    dc30:	orr	w1, w20, #0x2
    dc34:	mov	w0, #0x1                   	// #1
    dc38:	blr	x5
    dc3c:	cmp	w0, #0x7
    dc40:	b.eq	dd08 <_Unwind_GetTextRelBase@@GCC_3.0+0x1d88>  // b.none
    dc44:	cmp	w0, #0x8
    dc48:	b.ne	dc7c <_Unwind_GetTextRelBase@@GCC_3.0+0x1cfc>  // b.any
    dc4c:	cbnz	w20, dd2c <_Unwind_GetTextRelBase@@GCC_3.0+0x1dac>
    dc50:	mov	x1, x23
    dc54:	mov	x0, x19
    dc58:	bl	d608 <_Unwind_GetTextRelBase@@GCC_3.0+0x1688>
    dc5c:	ldr	x0, [sp, #1736]
    dc60:	lsl	x1, x0, #4
    dc64:	ldr	w1, [x25, x1]
    dc68:	cmp	w1, #0x6
    dc6c:	b.ne	dca0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1d20>  // b.any
    dc70:	add	x24, x24, #0x1
    dc74:	str	xzr, [x19, #792]
    dc78:	b	dbe8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1c68>
    dc7c:	mov	w0, #0x2                   	// #2
    dc80:	ldp	x29, x30, [sp]
    dc84:	ldp	x19, x20, [sp, #16]
    dc88:	ldp	x21, x22, [sp, #32]
    dc8c:	ldp	x23, x24, [sp, #48]
    dc90:	ldp	x25, x26, [sp, #64]
    dc94:	ldr	x27, [sp, #80]
    dc98:	add	sp, sp, #0x6e0
    dc9c:	ret
    dca0:	cmp	w0, #0x61
    dca4:	b.gt	dd2c <_Unwind_GetTextRelBase@@GCC_3.0+0x1dac>
    dca8:	ldr	x2, [x19, #832]
    dcac:	sxtw	x1, w0
    dcb0:	ldr	x17, [x19, x1, lsl #3]
    dcb4:	tbz	x2, #62, dcc4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1d44>
    dcb8:	add	x2, x19, x1
    dcbc:	ldrb	w2, [x2, #856]
    dcc0:	cbnz	w2, dcdc <_Unwind_GetTextRelBase@@GCC_3.0+0x1d5c>
    dcc4:	cmp	w0, #0x2e
    dcc8:	b.eq	dcfc <_Unwind_GetTextRelBase@@GCC_3.0+0x1d7c>  // b.none
    dccc:	ldrb	w0, [x26, x1]
    dcd0:	cmp	w0, #0x8
    dcd4:	b.ne	dd2c <_Unwind_GetTextRelBase@@GCC_3.0+0x1dac>  // b.any
    dcd8:	ldr	x17, [x17]
    dcdc:	str	x17, [x19, #792]
    dce0:	ldr	x0, [sp, #640]
    dce4:	tbz	w0, #0, dcf0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1d70>
    dce8:	ldr	x16, [x19, #784]
    dcec:	autia1716
    dcf0:	add	x24, x24, #0x1
    dcf4:	str	x17, [x19, #792]
    dcf8:	b	dbe8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1c68>
    dcfc:	cntd	x0
    dd00:	sxtw	x17, w0
    dd04:	b	dcdc <_Unwind_GetTextRelBase@@GCC_3.0+0x1d5c>
    dd08:	str	x24, [x27]
    dd0c:	ldp	x29, x30, [sp]
    dd10:	ldp	x19, x20, [sp, #16]
    dd14:	ldp	x21, x22, [sp, #32]
    dd18:	ldp	x23, x24, [sp, #48]
    dd1c:	ldp	x25, x26, [sp, #64]
    dd20:	ldr	x27, [sp, #80]
    dd24:	add	sp, sp, #0x6e0
    dd28:	ret
    dd2c:	bl	2c50 <abort@plt>
    dd30:	sub	sp, sp, #0x6e0
    dd34:	stp	x29, x30, [sp]
    dd38:	mov	x29, sp
    dd3c:	stp	x21, x22, [sp, #32]
    dd40:	add	x21, sp, #0x60
    dd44:	mov	x22, #0x1                   	// #1
    dd48:	stp	x27, x28, [sp, #80]
    dd4c:	mov	x28, x1
    dd50:	mov	x27, x2
    dd54:	mov	x1, x21
    dd58:	stp	x19, x20, [sp, #16]
    dd5c:	mov	x20, x0
    dd60:	stp	x23, x24, [sp, #48]
    dd64:	stp	x25, x26, [sp, #64]
    dd68:	adrp	x26, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    dd6c:	add	x25, sp, #0x68
    dd70:	ldp	x23, x24, [x0, #16]
    dd74:	mov	x0, x28
    dd78:	bl	c7b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x838>
    dd7c:	cmp	w0, #0x0
    dd80:	add	x26, x26, #0x1d0
    dd84:	mov	w19, w0
    dd88:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    dd8c:	b.ne	de30 <_Unwind_GetTextRelBase@@GCC_3.0+0x1eb0>  // b.any
    dd90:	cmp	w0, #0x5
    dd94:	ldr	x2, [x20]
    dd98:	b.eq	deb4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1f34>  // b.none
    dd9c:	mov	x5, x24
    dda0:	mov	x4, x28
    dda4:	mov	x3, x20
    dda8:	mov	w1, #0xa                   	// #10
    ddac:	mov	w0, #0x1                   	// #1
    ddb0:	blr	x23
    ddb4:	cbnz	w0, de30 <_Unwind_GetTextRelBase@@GCC_3.0+0x1eb0>
    ddb8:	ldr	x5, [sp, #1712]
    ddbc:	cbz	x5, ddec <_Unwind_GetTextRelBase@@GCC_3.0+0x1e6c>
    ddc0:	ldr	x2, [x20]
    ddc4:	mov	x4, x28
    ddc8:	mov	x3, x20
    ddcc:	mov	w1, #0xa                   	// #10
    ddd0:	mov	w0, #0x1                   	// #1
    ddd4:	blr	x5
    ddd8:	mov	w19, w0
    dddc:	cmp	w0, #0x7
    dde0:	b.eq	ded0 <_Unwind_GetTextRelBase@@GCC_3.0+0x1f50>  // b.none
    dde4:	cmp	w0, #0x8
    dde8:	b.ne	de30 <_Unwind_GetTextRelBase@@GCC_3.0+0x1eb0>  // b.any
    ddec:	mov	x1, x21
    ddf0:	mov	x0, x28
    ddf4:	bl	d608 <_Unwind_GetTextRelBase@@GCC_3.0+0x1688>
    ddf8:	ldr	x0, [sp, #1736]
    ddfc:	lsl	x1, x0, #4
    de00:	ldr	w1, [x25, x1]
    de04:	cmp	w1, #0x6
    de08:	b.ne	de58 <_Unwind_GetTextRelBase@@GCC_3.0+0x1ed8>  // b.any
    de0c:	add	x22, x22, #0x1
    de10:	str	xzr, [x28, #792]
    de14:	mov	x1, x21
    de18:	mov	x0, x28
    de1c:	bl	c7b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x838>
    de20:	cmp	w0, #0x0
    de24:	mov	w19, w0
    de28:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    de2c:	b.eq	dd90 <_Unwind_GetTextRelBase@@GCC_3.0+0x1e10>  // b.none
    de30:	mov	w19, #0x2                   	// #2
    de34:	mov	w0, w19
    de38:	ldp	x29, x30, [sp]
    de3c:	ldp	x19, x20, [sp, #16]
    de40:	ldp	x21, x22, [sp, #32]
    de44:	ldp	x23, x24, [sp, #48]
    de48:	ldp	x25, x26, [sp, #64]
    de4c:	ldp	x27, x28, [sp, #80]
    de50:	add	sp, sp, #0x6e0
    de54:	ret
    de58:	cmp	w0, #0x61
    de5c:	b.gt	dee4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1f64>
    de60:	ldr	x2, [x28, #832]
    de64:	sxtw	x1, w0
    de68:	ldr	x17, [x28, x1, lsl #3]
    de6c:	tbz	x2, #62, de7c <_Unwind_GetTextRelBase@@GCC_3.0+0x1efc>
    de70:	add	x2, x28, x1
    de74:	ldrb	w2, [x2, #856]
    de78:	cbnz	w2, de94 <_Unwind_GetTextRelBase@@GCC_3.0+0x1f14>
    de7c:	cmp	w0, #0x2e
    de80:	b.eq	ded8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1f58>  // b.none
    de84:	ldrb	w0, [x26, x1]
    de88:	cmp	w0, #0x8
    de8c:	b.ne	dee4 <_Unwind_GetTextRelBase@@GCC_3.0+0x1f64>  // b.any
    de90:	ldr	x17, [x17]
    de94:	str	x17, [x28, #792]
    de98:	ldr	x0, [sp, #640]
    de9c:	tbz	w0, #0, dea8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1f28>
    dea0:	ldr	x16, [x28, #784]
    dea4:	autia1716
    dea8:	add	x22, x22, #0x1
    deac:	str	x17, [x28, #792]
    deb0:	b	de14 <_Unwind_GetTextRelBase@@GCC_3.0+0x1e94>
    deb4:	mov	x5, x24
    deb8:	mov	x4, x28
    debc:	mov	x3, x20
    dec0:	mov	w1, #0x1a                  	// #26
    dec4:	mov	w0, #0x1                   	// #1
    dec8:	blr	x23
    decc:	cbnz	w0, de30 <_Unwind_GetTextRelBase@@GCC_3.0+0x1eb0>
    ded0:	str	x22, [x27]
    ded4:	b	de34 <_Unwind_GetTextRelBase@@GCC_3.0+0x1eb4>
    ded8:	cntd	x0
    dedc:	sxtw	x17, w0
    dee0:	b	de94 <_Unwind_GetTextRelBase@@GCC_3.0+0x1f14>
    dee4:	bl	2c50 <abort@plt>

000000000000dee8 <__frame_state_for@@GLIBC_2.0>:
    dee8:	sub	sp, sp, #0xa70
    deec:	mov	x2, #0x3c0                 	// #960
    def0:	add	x3, sp, #0x30
    def4:	stp	x29, x30, [sp]
    def8:	mov	x29, sp
    defc:	stp	x19, x20, [sp, #16]
    df00:	mov	x20, x1
    df04:	mov	w1, #0x0                   	// #0
    df08:	str	x21, [sp, #32]
    df0c:	mov	x21, x0
    df10:	mov	x0, x3
    df14:	bl	2ba0 <memset@plt>
    df18:	mov	x2, #0x4000000000000000    	// #4611686018427387904
    df1c:	add	x19, sp, #0x3f0
    df20:	add	x21, x21, #0x1
    df24:	mov	x1, x19
    df28:	str	x21, [sp, #840]
    df2c:	str	x2, [sp, #880]
    df30:	bl	c7b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x838>
    df34:	cbnz	w0, dfe0 <__frame_state_for@@GLIBC_2.0+0xf8>
    df38:	ldr	w0, [sp, #2608]
    df3c:	cmp	w0, #0x2
    df40:	b.eq	dfe0 <__frame_state_for@@GLIBC_2.0+0xf8>  // b.none
    df44:	sub	x4, x20, x20, lsl #3
    df48:	mov	x1, #0xffffffffffffe680    	// #-6528
    df4c:	mov	x0, x19
    df50:	add	x5, x19, #0x620
    df54:	add	x4, x4, x1
    df58:	add	x2, x20, #0x334
    df5c:	b	df74 <__frame_state_for@@GLIBC_2.0+0x8c>
    df60:	str	xzr, [x4, x2, lsl #3]
    df64:	add	x0, x0, #0x10
    df68:	add	x2, x2, #0x1
    df6c:	cmp	x0, x5
    df70:	b.eq	dfa4 <__frame_state_for@@GLIBC_2.0+0xbc>  // b.none
    df74:	ldrb	w3, [x0, #8]
    df78:	strb	w3, [x2]
    df7c:	cmp	w3, #0x1
    df80:	b.eq	df8c <__frame_state_for@@GLIBC_2.0+0xa4>  // b.none
    df84:	cmp	w3, #0x2
    df88:	b.ne	df60 <__frame_state_for@@GLIBC_2.0+0x78>  // b.any
    df8c:	ldr	x3, [x0]
    df90:	str	x3, [x4, x2, lsl #3]
    df94:	add	x0, x0, #0x10
    df98:	add	x2, x2, #0x1
    df9c:	cmp	x0, x5
    dfa0:	b.ne	df74 <__frame_state_for@@GLIBC_2.0+0x8c>  // b.any
    dfa4:	ldr	x1, [sp, #896]
    dfa8:	mov	x0, x20
    dfac:	ldr	x2, [sp, #2584]
    dfb0:	stp	x2, x1, [x20, #16]
    dfb4:	ldr	x2, [sp, #2592]
    dfb8:	strh	w2, [x20, #816]
    dfbc:	ldr	x1, [sp, #2648]
    dfc0:	strh	w1, [x20, #818]
    dfc4:	ldr	x2, [sp, #2664]
    dfc8:	str	x2, [x20, #8]
    dfcc:	ldp	x29, x30, [sp]
    dfd0:	ldp	x19, x20, [sp, #16]
    dfd4:	ldr	x21, [sp, #32]
    dfd8:	add	sp, sp, #0xa70
    dfdc:	ret
    dfe0:	mov	x0, #0x0                   	// #0
    dfe4:	ldp	x29, x30, [sp]
    dfe8:	ldp	x19, x20, [sp, #16]
    dfec:	ldr	x21, [sp, #32]
    dff0:	add	sp, sp, #0xa70
    dff4:	ret
    dff8:	ret
    dffc:	nop

000000000000e000 <_Unwind_RaiseException@@GCC_3.0>:
    e000:	sub	sp, sp, #0xec0
    e004:	stp	x29, x30, [sp]
    e008:	mov	x29, sp
    e00c:	stp	x19, x20, [sp, #48]
    e010:	add	x20, sp, #0x840
    e014:	add	x19, sp, #0x480
    e018:	stp	x21, x22, [sp, #64]
    e01c:	add	x22, sp, #0x848
    e020:	mov	x21, x0
    e024:	stp	x23, x24, [sp, #80]
    e028:	adrp	x23, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    e02c:	add	x23, x23, #0x1d0
    e030:	stp	x25, x26, [sp, #96]
    e034:	add	x25, sp, #0x7d8
    e038:	add	x24, sp, #0xc0
    e03c:	stp	x0, x1, [sp, #16]
    e040:	mov	x0, x24
    e044:	add	x1, sp, #0xec0
    e048:	stp	x2, x3, [sp, #32]
    e04c:	mov	x2, x30
    e050:	stp	x27, x28, [sp, #112]
    e054:	stp	d8, d9, [sp, #128]
    e058:	stp	d10, d11, [sp, #144]
    e05c:	stp	d12, d13, [sp, #160]
    e060:	stp	d14, d15, [sp, #176]
    e064:	bl	d958 <_Unwind_GetTextRelBase@@GCC_3.0+0x19d8>
    e068:	mov	x1, x24
    e06c:	mov	x0, x19
    e070:	mov	x2, #0x3c0                 	// #960
    e074:	bl	2aa0 <memcpy@plt>
    e078:	mov	x1, x20
    e07c:	mov	x0, x19
    e080:	bl	c7b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x838>
    e084:	cmp	w0, #0x5
    e088:	b.eq	e0f8 <_Unwind_RaiseException@@GCC_3.0+0xf8>  // b.none
    e08c:	cbnz	w0, e194 <_Unwind_RaiseException@@GCC_3.0+0x194>
    e090:	ldr	x5, [sp, #3728]
    e094:	cbz	x5, e0c0 <_Unwind_RaiseException@@GCC_3.0+0xc0>
    e098:	ldr	x2, [x21]
    e09c:	mov	w1, #0x1                   	// #1
    e0a0:	mov	x4, x19
    e0a4:	mov	w0, w1
    e0a8:	mov	x3, x21
    e0ac:	blr	x5
    e0b0:	cmp	w0, #0x6
    e0b4:	b.eq	e19c <_Unwind_RaiseException@@GCC_3.0+0x19c>  // b.none
    e0b8:	cmp	w0, #0x8
    e0bc:	b.ne	e194 <_Unwind_RaiseException@@GCC_3.0+0x194>  // b.any
    e0c0:	mov	x1, x20
    e0c4:	mov	x0, x19
    e0c8:	bl	d608 <_Unwind_GetTextRelBase@@GCC_3.0+0x1688>
    e0cc:	ldr	x0, [sp, #3752]
    e0d0:	lsl	x1, x0, #4
    e0d4:	ldr	w1, [x22, x1]
    e0d8:	cmp	w1, #0x6
    e0dc:	b.ne	e138 <_Unwind_RaiseException@@GCC_3.0+0x138>  // b.any
    e0e0:	mov	x1, x20
    e0e4:	mov	x0, x19
    e0e8:	str	xzr, [sp, #1944]
    e0ec:	bl	c7b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x838>
    e0f0:	cmp	w0, #0x5
    e0f4:	b.ne	e08c <_Unwind_RaiseException@@GCC_3.0+0x8c>  // b.any
    e0f8:	mov	x4, #0x0                   	// #0
    e0fc:	ldp	x29, x30, [sp]
    e100:	ldp	x0, x1, [sp, #16]
    e104:	ldp	x2, x3, [sp, #32]
    e108:	ldp	x19, x20, [sp, #48]
    e10c:	ldp	x21, x22, [sp, #64]
    e110:	ldp	x23, x24, [sp, #80]
    e114:	ldp	x25, x26, [sp, #96]
    e118:	ldp	x27, x28, [sp, #112]
    e11c:	ldp	d8, d9, [sp, #128]
    e120:	ldp	d10, d11, [sp, #144]
    e124:	ldp	d12, d13, [sp, #160]
    e128:	ldp	d14, d15, [sp, #176]
    e12c:	add	sp, sp, #0xec0
    e130:	add	sp, sp, x4
    e134:	ret
    e138:	cmp	w0, #0x61
    e13c:	b.gt	e21c <_Unwind_RaiseException@@GCC_3.0+0x21c>
    e140:	ldr	x2, [sp, #1984]
    e144:	sxtw	x1, w0
    e148:	ldr	x17, [x19, x1, lsl #3]
    e14c:	tbz	x2, #62, e158 <_Unwind_RaiseException@@GCC_3.0+0x158>
    e150:	ldrb	w2, [x25, x1]
    e154:	cbnz	w2, e170 <_Unwind_RaiseException@@GCC_3.0+0x170>
    e158:	cmp	w0, #0x2e
    e15c:	b.eq	e188 <_Unwind_RaiseException@@GCC_3.0+0x188>  // b.none
    e160:	ldrb	w0, [x23, x1]
    e164:	cmp	w0, #0x8
    e168:	b.ne	e21c <_Unwind_RaiseException@@GCC_3.0+0x21c>  // b.any
    e16c:	ldr	x17, [x17]
    e170:	ldr	x0, [sp, #2656]
    e174:	tbz	w0, #0, e180 <_Unwind_RaiseException@@GCC_3.0+0x180>
    e178:	ldr	x16, [sp, #1936]
    e17c:	autia1716
    e180:	str	x17, [sp, #1944]
    e184:	b	e078 <_Unwind_RaiseException@@GCC_3.0+0x78>
    e188:	cntd	x0
    e18c:	sxtw	x17, w0
    e190:	b	e170 <_Unwind_RaiseException@@GCC_3.0+0x170>
    e194:	mov	w0, #0x3                   	// #3
    e198:	b	e0f8 <_Unwind_RaiseException@@GCC_3.0+0xf8>
    e19c:	str	xzr, [x21, #16]
    e1a0:	mov	x0, x19
    e1a4:	bl	2b90 <_Unwind_GetCFA@plt>
    e1a8:	mov	x4, x0
    e1ac:	ldr	x3, [sp, #1984]
    e1b0:	mov	x1, x24
    e1b4:	mov	x2, #0x3c0                 	// #960
    e1b8:	mov	x0, x19
    e1bc:	sub	x3, x4, x3, lsr #63
    e1c0:	str	x3, [x21, #24]
    e1c4:	bl	2aa0 <memcpy@plt>
    e1c8:	mov	x2, x20
    e1cc:	mov	x1, x19
    e1d0:	mov	x0, x21
    e1d4:	bl	dba8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1c28>
    e1d8:	cmp	w0, #0x7
    e1dc:	b.ne	e0f8 <_Unwind_RaiseException@@GCC_3.0+0xf8>  // b.any
    e1e0:	mov	x1, x19
    e1e4:	mov	x0, x24
    e1e8:	bl	bcf0 <__enable_execute_stack@@GCC_3.4.2+0x2c0>
    e1ec:	mov	x4, x0
    e1f0:	ldr	x2, [sp, #1024]
    e1f4:	ldr	x1, [sp, #1944]
    e1f8:	tbz	x2, #61, e20c <_Unwind_RaiseException@@GCC_3.0+0x20c>
    e1fc:	mov	x17, x1
    e200:	ldr	x16, [sp, #976]
    e204:	pacia1716
    e208:	mov	x1, x17
    e20c:	ldr	x0, [sp, #1936]
    e210:	bl	dff8 <__frame_state_for@@GLIBC_2.0+0x110>
    e214:	str	x1, [x29, #8]
    e218:	b	e0fc <_Unwind_RaiseException@@GCC_3.0+0xfc>
    e21c:	bl	2c50 <abort@plt>

000000000000e220 <_Unwind_ForcedUnwind@@GCC_3.0>:
    e220:	sub	sp, sp, #0x850
    e224:	stp	x29, x30, [sp]
    e228:	mov	x29, sp
    e22c:	stp	x19, x20, [sp, #48]
    e230:	mov	x19, x0
    e234:	mov	x20, x2
    e238:	stp	x21, x22, [sp, #64]
    e23c:	add	x22, sp, #0xd0
    e240:	mov	x21, x1
    e244:	stp	x0, x1, [sp, #16]
    e248:	mov	x0, x22
    e24c:	add	x1, sp, #0x850
    e250:	stp	x2, x3, [sp, #32]
    e254:	mov	x2, x30
    e258:	stp	x23, x24, [sp, #80]
    e25c:	add	x23, sp, #0x490
    e260:	stp	x25, x26, [sp, #96]
    e264:	stp	x27, x28, [sp, #112]
    e268:	stp	d8, d9, [sp, #128]
    e26c:	stp	d10, d11, [sp, #144]
    e270:	stp	d12, d13, [sp, #160]
    e274:	stp	d14, d15, [sp, #176]
    e278:	bl	d958 <_Unwind_GetTextRelBase@@GCC_3.0+0x19d8>
    e27c:	mov	x1, x22
    e280:	mov	x2, #0x3c0                 	// #960
    e284:	mov	x0, x23
    e288:	bl	2aa0 <memcpy@plt>
    e28c:	stp	x21, x20, [x19, #16]
    e290:	mov	x0, x19
    e294:	mov	x1, x23
    e298:	add	x2, sp, #0xc8
    e29c:	bl	dd30 <_Unwind_GetTextRelBase@@GCC_3.0+0x1db0>
    e2a0:	cmp	w0, #0x7
    e2a4:	mov	x4, #0x0                   	// #0
    e2a8:	b.eq	e2e8 <_Unwind_ForcedUnwind@@GCC_3.0+0xc8>  // b.none
    e2ac:	ldp	x29, x30, [sp]
    e2b0:	ldp	x0, x1, [sp, #16]
    e2b4:	ldp	x2, x3, [sp, #32]
    e2b8:	ldp	x19, x20, [sp, #48]
    e2bc:	ldp	x21, x22, [sp, #64]
    e2c0:	ldp	x23, x24, [sp, #80]
    e2c4:	ldp	x25, x26, [sp, #96]
    e2c8:	ldp	x27, x28, [sp, #112]
    e2cc:	ldp	d8, d9, [sp, #128]
    e2d0:	ldp	d10, d11, [sp, #144]
    e2d4:	ldp	d12, d13, [sp, #160]
    e2d8:	ldp	d14, d15, [sp, #176]
    e2dc:	add	sp, sp, #0x850
    e2e0:	add	sp, sp, x4
    e2e4:	ret
    e2e8:	mov	x1, x23
    e2ec:	mov	x0, x22
    e2f0:	bl	bcf0 <__enable_execute_stack@@GCC_3.4.2+0x2c0>
    e2f4:	mov	x4, x0
    e2f8:	ldr	x2, [sp, #1040]
    e2fc:	ldr	x1, [sp, #1960]
    e300:	tbz	x2, #61, e314 <_Unwind_ForcedUnwind@@GCC_3.0+0xf4>
    e304:	mov	x17, x1
    e308:	ldr	x16, [sp, #992]
    e30c:	pacia1716
    e310:	mov	x1, x17
    e314:	ldr	x0, [sp, #1952]
    e318:	bl	dff8 <__frame_state_for@@GLIBC_2.0+0x110>
    e31c:	str	x1, [x29, #8]
    e320:	b	e2ac <_Unwind_ForcedUnwind@@GCC_3.0+0x8c>
    e324:	nop

000000000000e328 <_Unwind_Resume@@GCC_3.0>:
    e328:	sub	sp, sp, #0x850
    e32c:	stp	x29, x30, [sp]
    e330:	mov	x29, sp
    e334:	stp	x19, x20, [sp, #48]
    e338:	mov	x19, x0
    e33c:	add	x20, sp, #0xd0
    e340:	stp	x0, x1, [sp, #16]
    e344:	mov	x0, x20
    e348:	add	x1, sp, #0x850
    e34c:	stp	x2, x3, [sp, #32]
    e350:	mov	x2, x30
    e354:	stp	x21, x22, [sp, #64]
    e358:	add	x21, sp, #0x490
    e35c:	stp	x23, x24, [sp, #80]
    e360:	stp	x25, x26, [sp, #96]
    e364:	stp	x27, x28, [sp, #112]
    e368:	stp	d8, d9, [sp, #128]
    e36c:	stp	d10, d11, [sp, #144]
    e370:	stp	d12, d13, [sp, #160]
    e374:	stp	d14, d15, [sp, #176]
    e378:	bl	d958 <_Unwind_GetTextRelBase@@GCC_3.0+0x19d8>
    e37c:	mov	x1, x20
    e380:	mov	x0, x21
    e384:	mov	x2, #0x3c0                 	// #960
    e388:	bl	2aa0 <memcpy@plt>
    e38c:	ldr	x0, [x19, #16]
    e390:	cbnz	x0, e420 <_Unwind_Resume@@GCC_3.0+0xf8>
    e394:	mov	x0, x19
    e398:	add	x2, sp, #0xc8
    e39c:	mov	x1, x21
    e3a0:	bl	dba8 <_Unwind_GetTextRelBase@@GCC_3.0+0x1c28>
    e3a4:	cmp	w0, #0x7
    e3a8:	b.ne	e434 <_Unwind_Resume@@GCC_3.0+0x10c>  // b.any
    e3ac:	mov	x1, x21
    e3b0:	mov	x0, x20
    e3b4:	bl	bcf0 <__enable_execute_stack@@GCC_3.4.2+0x2c0>
    e3b8:	mov	x4, x0
    e3bc:	ldr	x2, [sp, #1040]
    e3c0:	ldr	x1, [sp, #1960]
    e3c4:	tbz	x2, #61, e3d8 <_Unwind_Resume@@GCC_3.0+0xb0>
    e3c8:	mov	x17, x1
    e3cc:	ldr	x16, [sp, #992]
    e3d0:	pacia1716
    e3d4:	mov	x1, x17
    e3d8:	ldr	x0, [sp, #1952]
    e3dc:	bl	dff8 <__frame_state_for@@GLIBC_2.0+0x110>
    e3e0:	str	x1, [x29, #8]
    e3e4:	ldp	x29, x30, [sp]
    e3e8:	ldp	x0, x1, [sp, #16]
    e3ec:	ldp	x2, x3, [sp, #32]
    e3f0:	ldp	x19, x20, [sp, #48]
    e3f4:	ldp	x21, x22, [sp, #64]
    e3f8:	ldp	x23, x24, [sp, #80]
    e3fc:	ldp	x25, x26, [sp, #96]
    e400:	ldp	x27, x28, [sp, #112]
    e404:	ldp	d8, d9, [sp, #128]
    e408:	ldp	d10, d11, [sp, #144]
    e40c:	ldp	d12, d13, [sp, #160]
    e410:	ldp	d14, d15, [sp, #176]
    e414:	add	sp, sp, #0x850
    e418:	add	sp, sp, x4
    e41c:	ret
    e420:	mov	x0, x19
    e424:	add	x2, sp, #0xc8
    e428:	mov	x1, x21
    e42c:	bl	dd30 <_Unwind_GetTextRelBase@@GCC_3.0+0x1db0>
    e430:	b	e3a4 <_Unwind_Resume@@GCC_3.0+0x7c>
    e434:	bl	2c50 <abort@plt>

000000000000e438 <_Unwind_Resume_or_Rethrow@@GCC_3.3>:
    e438:	sub	sp, sp, #0x850
    e43c:	stp	x29, x30, [sp]
    e440:	mov	x29, sp
    e444:	stp	x0, x1, [sp, #16]
    e448:	ldr	x1, [x0, #16]
    e44c:	stp	x2, x3, [sp, #32]
    e450:	stp	x19, x20, [sp, #48]
    e454:	mov	x19, x0
    e458:	stp	x21, x22, [sp, #64]
    e45c:	stp	x23, x24, [sp, #80]
    e460:	stp	x25, x26, [sp, #96]
    e464:	stp	x27, x28, [sp, #112]
    e468:	stp	d8, d9, [sp, #128]
    e46c:	stp	d10, d11, [sp, #144]
    e470:	stp	d12, d13, [sp, #160]
    e474:	stp	d14, d15, [sp, #176]
    e478:	cbnz	x1, e4c0 <_Unwind_Resume_or_Rethrow@@GCC_3.3+0x88>
    e47c:	bl	2ad0 <_Unwind_RaiseException@plt>
    e480:	mov	x4, #0x0                   	// #0
    e484:	ldp	x29, x30, [sp]
    e488:	ldp	x0, x1, [sp, #16]
    e48c:	ldp	x2, x3, [sp, #32]
    e490:	ldp	x19, x20, [sp, #48]
    e494:	ldp	x21, x22, [sp, #64]
    e498:	ldp	x23, x24, [sp, #80]
    e49c:	ldp	x25, x26, [sp, #96]
    e4a0:	ldp	x27, x28, [sp, #112]
    e4a4:	ldp	d8, d9, [sp, #128]
    e4a8:	ldp	d10, d11, [sp, #144]
    e4ac:	ldp	d12, d13, [sp, #160]
    e4b0:	ldp	d14, d15, [sp, #176]
    e4b4:	add	sp, sp, #0x850
    e4b8:	add	sp, sp, x4
    e4bc:	ret
    e4c0:	add	x20, sp, #0xd0
    e4c4:	mov	x2, x30
    e4c8:	mov	x0, x20
    e4cc:	add	x1, sp, #0x850
    e4d0:	add	x21, sp, #0x490
    e4d4:	bl	d958 <_Unwind_GetTextRelBase@@GCC_3.0+0x19d8>
    e4d8:	mov	x1, x20
    e4dc:	mov	x2, #0x3c0                 	// #960
    e4e0:	mov	x0, x21
    e4e4:	bl	2aa0 <memcpy@plt>
    e4e8:	mov	x0, x19
    e4ec:	mov	x1, x21
    e4f0:	add	x2, sp, #0xc8
    e4f4:	bl	dd30 <_Unwind_GetTextRelBase@@GCC_3.0+0x1db0>
    e4f8:	cmp	w0, #0x7
    e4fc:	b.ne	e53c <_Unwind_Resume_or_Rethrow@@GCC_3.3+0x104>  // b.any
    e500:	mov	x1, x21
    e504:	mov	x0, x20
    e508:	bl	bcf0 <__enable_execute_stack@@GCC_3.4.2+0x2c0>
    e50c:	mov	x4, x0
    e510:	ldr	x2, [sp, #1040]
    e514:	ldr	x1, [sp, #1960]
    e518:	tbz	x2, #61, e52c <_Unwind_Resume_or_Rethrow@@GCC_3.3+0xf4>
    e51c:	mov	x17, x1
    e520:	ldr	x16, [sp, #992]
    e524:	pacia1716
    e528:	mov	x1, x17
    e52c:	ldr	x0, [sp, #1952]
    e530:	bl	dff8 <__frame_state_for@@GLIBC_2.0+0x110>
    e534:	str	x1, [x29, #8]
    e538:	b	e484 <_Unwind_Resume_or_Rethrow@@GCC_3.3+0x4c>
    e53c:	bl	2c50 <abort@plt>

000000000000e540 <_Unwind_DeleteException@@GCC_3.0>:
    e540:	ldr	x2, [x0, #8]
    e544:	mov	x1, x0
    e548:	cbz	x2, e558 <_Unwind_DeleteException@@GCC_3.0+0x18>
    e54c:	mov	x16, x2
    e550:	mov	w0, #0x1                   	// #1
    e554:	br	x16
    e558:	ret
    e55c:	nop

000000000000e560 <_Unwind_Backtrace@@GCC_3.3>:
    e560:	sub	sp, sp, #0xae0
    e564:	mov	x2, x30
    e568:	stp	x29, x30, [sp]
    e56c:	mov	x29, sp
    e570:	stp	x21, x22, [sp, #32]
    e574:	add	x21, sp, #0x460
    e578:	mov	x22, x1
    e57c:	stp	x23, x24, [sp, #48]
    e580:	add	x24, sp, #0x468
    e584:	mov	x23, x0
    e588:	stp	x25, x26, [sp, #64]
    e58c:	adrp	x25, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    e590:	add	x26, sp, #0x3f8
    e594:	add	x25, x25, #0x1d0
    e598:	stp	x19, x20, [sp, #16]
    e59c:	add	x20, sp, #0xa0
    e5a0:	mov	x0, x20
    e5a4:	add	x1, sp, #0xae0
    e5a8:	stp	x27, x28, [sp, #80]
    e5ac:	stp	d8, d9, [sp, #96]
    e5b0:	stp	d10, d11, [sp, #112]
    e5b4:	stp	d12, d13, [sp, #128]
    e5b8:	stp	d14, d15, [sp, #144]
    e5bc:	bl	d958 <_Unwind_GetTextRelBase@@GCC_3.0+0x19d8>
    e5c0:	mov	x1, x21
    e5c4:	mov	x0, x20
    e5c8:	bl	c7b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x838>
    e5cc:	cmp	w0, #0x0
    e5d0:	mov	w19, w0
    e5d4:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    e5d8:	b.ne	e634 <_Unwind_Backtrace@@GCC_3.3+0xd4>  // b.any
    e5dc:	mov	x1, x22
    e5e0:	mov	x0, x20
    e5e4:	blr	x23
    e5e8:	cbnz	w0, e634 <_Unwind_Backtrace@@GCC_3.3+0xd4>
    e5ec:	cmp	w19, #0x5
    e5f0:	b.eq	e638 <_Unwind_Backtrace@@GCC_3.3+0xd8>  // b.none
    e5f4:	mov	x1, x21
    e5f8:	mov	x0, x20
    e5fc:	bl	d608 <_Unwind_GetTextRelBase@@GCC_3.0+0x1688>
    e600:	ldr	x0, [sp, #2760]
    e604:	lsl	x1, x0, #4
    e608:	ldr	w1, [x24, x1]
    e60c:	cmp	w1, #0x6
    e610:	b.ne	e66c <_Unwind_Backtrace@@GCC_3.3+0x10c>  // b.any
    e614:	mov	x1, x21
    e618:	mov	x0, x20
    e61c:	str	xzr, [sp, #952]
    e620:	bl	c7b8 <_Unwind_GetTextRelBase@@GCC_3.0+0x838>
    e624:	cmp	w0, #0x0
    e628:	mov	w19, w0
    e62c:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    e630:	b.eq	e5dc <_Unwind_Backtrace@@GCC_3.3+0x7c>  // b.none
    e634:	mov	w19, #0x3                   	// #3
    e638:	mov	w0, w19
    e63c:	ldp	x29, x30, [sp]
    e640:	ldp	x19, x20, [sp, #16]
    e644:	ldp	x21, x22, [sp, #32]
    e648:	ldp	x23, x24, [sp, #48]
    e64c:	ldp	x25, x26, [sp, #64]
    e650:	ldp	x27, x28, [sp, #80]
    e654:	ldp	d8, d9, [sp, #96]
    e658:	ldp	d10, d11, [sp, #112]
    e65c:	ldp	d12, d13, [sp, #128]
    e660:	ldp	d14, d15, [sp, #144]
    e664:	add	sp, sp, #0xae0
    e668:	ret
    e66c:	cmp	w0, #0x61
    e670:	b.gt	e6c8 <_Unwind_Backtrace@@GCC_3.3+0x168>
    e674:	ldr	x2, [sp, #992]
    e678:	sxtw	x1, w0
    e67c:	ldr	x17, [x20, x1, lsl #3]
    e680:	tbz	x2, #62, e68c <_Unwind_Backtrace@@GCC_3.3+0x12c>
    e684:	ldrb	w2, [x26, x1]
    e688:	cbnz	w2, e6a4 <_Unwind_Backtrace@@GCC_3.3+0x144>
    e68c:	cmp	w0, #0x2e
    e690:	b.eq	e6bc <_Unwind_Backtrace@@GCC_3.3+0x15c>  // b.none
    e694:	ldrb	w0, [x25, x1]
    e698:	cmp	w0, #0x8
    e69c:	b.ne	e6c8 <_Unwind_Backtrace@@GCC_3.3+0x168>  // b.any
    e6a0:	ldr	x17, [x17]
    e6a4:	ldr	x0, [sp, #1664]
    e6a8:	tbz	w0, #0, e6b4 <_Unwind_Backtrace@@GCC_3.3+0x154>
    e6ac:	ldr	x16, [sp, #944]
    e6b0:	autia1716
    e6b4:	str	x17, [sp, #952]
    e6b8:	b	e5c0 <_Unwind_Backtrace@@GCC_3.3+0x60>
    e6bc:	cntd	x0
    e6c0:	sxtw	x17, w0
    e6c4:	b	e6a4 <_Unwind_Backtrace@@GCC_3.3+0x144>
    e6c8:	bl	2c50 <abort@plt>
    e6cc:	nop
    e6d0:	ldr	x3, [x1, #8]
    e6d4:	mov	w4, #0x1                   	// #1
    e6d8:	ldr	x1, [x2, #8]
    e6dc:	cmp	x3, x1
    e6e0:	csetm	w0, cc  // cc = lo, ul, last
    e6e4:	csel	w0, w0, w4, ls  // ls = plast
    e6e8:	ret
    e6ec:	nop
    e6f0:	and	w5, w0, #0xff
    e6f4:	cmp	w5, #0x50
    e6f8:	b.eq	e810 <_Unwind_Backtrace@@GCC_3.3+0x2b0>  // b.none
    e6fc:	and	w4, w5, #0xf
    e700:	cmp	w4, #0x4
    e704:	b.eq	e720 <_Unwind_Backtrace@@GCC_3.3+0x1c0>  // b.none
    e708:	b.ls	e734 <_Unwind_Backtrace@@GCC_3.3+0x1d4>  // b.plast
    e70c:	cmp	w4, #0xb
    e710:	b.eq	e834 <_Unwind_Backtrace@@GCC_3.3+0x2d4>  // b.none
    e714:	b.ls	e790 <_Unwind_Backtrace@@GCC_3.3+0x230>  // b.plast
    e718:	cmp	w4, #0xc
    e71c:	b.ne	e844 <_Unwind_Backtrace@@GCC_3.3+0x2e4>  // b.any
    e720:	mov	x0, x2
    e724:	ldr	x4, [x0], #8
    e728:	cbnz	x4, e7f0 <_Unwind_Backtrace@@GCC_3.3+0x290>
    e72c:	str	x4, [x3]
    e730:	ret
    e734:	cmp	w4, #0x2
    e738:	b.eq	e824 <_Unwind_Backtrace@@GCC_3.3+0x2c4>  // b.none
    e73c:	b.ls	e758 <_Unwind_Backtrace@@GCC_3.3+0x1f8>  // b.plast
    e740:	cmp	w4, #0x3
    e744:	b.ne	e844 <_Unwind_Backtrace@@GCC_3.3+0x2e4>  // b.any
    e748:	mov	x0, x2
    e74c:	ldr	w4, [x0], #4
    e750:	cbz	x4, e72c <_Unwind_Backtrace@@GCC_3.3+0x1cc>
    e754:	b	e7f0 <_Unwind_Backtrace@@GCC_3.3+0x290>
    e758:	cbz	w4, e720 <_Unwind_Backtrace@@GCC_3.3+0x1c0>
    e75c:	cmp	w4, #0x1
    e760:	b.ne	e844 <_Unwind_Backtrace@@GCC_3.3+0x2e4>  // b.any
    e764:	mov	x0, x2
    e768:	mov	x4, #0x0                   	// #0
    e76c:	mov	w7, #0x0                   	// #0
    e770:	ldrb	w8, [x0], #1
    e774:	and	x6, x8, #0x7f
    e778:	lsl	x6, x6, x7
    e77c:	add	w7, w7, #0x7
    e780:	orr	x4, x4, x6
    e784:	tbnz	w8, #7, e770 <_Unwind_Backtrace@@GCC_3.3+0x210>
    e788:	cbz	x4, e72c <_Unwind_Backtrace@@GCC_3.3+0x1cc>
    e78c:	b	e7f0 <_Unwind_Backtrace@@GCC_3.3+0x290>
    e790:	cmp	w4, #0x9
    e794:	b.eq	e7b0 <_Unwind_Backtrace@@GCC_3.3+0x250>  // b.none
    e798:	cmp	w4, #0xa
    e79c:	b.ne	e844 <_Unwind_Backtrace@@GCC_3.3+0x2e4>  // b.any
    e7a0:	mov	x0, x2
    e7a4:	ldrsh	x4, [x0], #2
    e7a8:	cbz	x4, e72c <_Unwind_Backtrace@@GCC_3.3+0x1cc>
    e7ac:	b	e7f0 <_Unwind_Backtrace@@GCC_3.3+0x290>
    e7b0:	mov	x0, x2
    e7b4:	mov	x4, #0x0                   	// #0
    e7b8:	mov	w7, #0x0                   	// #0
    e7bc:	ldrb	w8, [x0], #1
    e7c0:	and	x6, x8, #0x7f
    e7c4:	lsl	x6, x6, x7
    e7c8:	add	w7, w7, #0x7
    e7cc:	orr	x4, x4, x6
    e7d0:	tbnz	w8, #7, e7bc <_Unwind_Backtrace@@GCC_3.3+0x25c>
    e7d4:	cmp	w7, #0x3f
    e7d8:	b.hi	e728 <_Unwind_Backtrace@@GCC_3.3+0x1c8>  // b.pmore
    e7dc:	tbz	w8, #6, e728 <_Unwind_Backtrace@@GCC_3.3+0x1c8>
    e7e0:	mov	x6, #0xffffffffffffffff    	// #-1
    e7e4:	lsl	x7, x6, x7
    e7e8:	orr	x4, x4, x7
    e7ec:	nop
    e7f0:	and	w6, w5, #0x70
    e7f4:	cmp	w6, #0x10
    e7f8:	csel	x1, x2, x1, eq  // eq = none
    e7fc:	add	x4, x4, x1
    e800:	tbz	w5, #7, e72c <_Unwind_Backtrace@@GCC_3.3+0x1cc>
    e804:	ldr	x4, [x4]
    e808:	str	x4, [x3]
    e80c:	ret
    e810:	add	x0, x2, #0x7
    e814:	and	x0, x0, #0xfffffffffffffff8
    e818:	ldr	x4, [x0], #8
    e81c:	str	x4, [x3]
    e820:	ret
    e824:	mov	x0, x2
    e828:	ldrh	w4, [x0], #2
    e82c:	cbz	x4, e72c <_Unwind_Backtrace@@GCC_3.3+0x1cc>
    e830:	b	e7f0 <_Unwind_Backtrace@@GCC_3.3+0x290>
    e834:	mov	x0, x2
    e838:	ldrsw	x4, [x0], #4
    e83c:	cbz	x4, e72c <_Unwind_Backtrace@@GCC_3.3+0x1cc>
    e840:	b	e7f0 <_Unwind_Backtrace@@GCC_3.3+0x290>
    e844:	stp	x29, x30, [sp, #-16]!
    e848:	mov	x29, sp
    e84c:	bl	2c50 <abort@plt>
    e850:	stp	x29, x30, [sp, #-48]!
    e854:	mov	x29, sp
    e858:	stp	x19, x20, [sp, #16]
    e85c:	mov	x20, x0
    e860:	add	x19, x0, #0x9
    e864:	mov	x0, x19
    e868:	bl	2ac0 <strlen@plt>
    e86c:	ldrb	w3, [x20, #8]
    e870:	add	x0, x0, #0x1
    e874:	add	x2, x19, x0
    e878:	cmp	w3, #0x3
    e87c:	b.hi	e948 <_Unwind_Backtrace@@GCC_3.3+0x3e8>  // b.pmore
    e880:	ldrb	w0, [x20, #9]
    e884:	cmp	w0, #0x7a
    e888:	b.eq	e89c <_Unwind_Backtrace@@GCC_3.3+0x33c>  // b.none
    e88c:	mov	w0, #0x0                   	// #0
    e890:	ldp	x19, x20, [sp, #16]
    e894:	ldp	x29, x30, [sp], #48
    e898:	ret
    e89c:	ldrsb	w1, [x2], #1
    e8a0:	tbnz	w1, #31, e89c <_Unwind_Backtrace@@GCC_3.3+0x33c>
    e8a4:	nop
    e8a8:	mov	x0, x2
    e8ac:	ldrsb	w1, [x2], #1
    e8b0:	tbnz	w1, #31, e8a8 <_Unwind_Backtrace@@GCC_3.3+0x348>
    e8b4:	cmp	w3, #0x1
    e8b8:	b.eq	e940 <_Unwind_Backtrace@@GCC_3.3+0x3e0>  // b.none
    e8bc:	nop
    e8c0:	ldrsb	w0, [x2], #1
    e8c4:	tbnz	w0, #31, e8c0 <_Unwind_Backtrace@@GCC_3.3+0x360>
    e8c8:	add	x19, x20, #0xa
    e8cc:	nop
    e8d0:	ldrsb	w1, [x2], #1
    e8d4:	tbnz	w1, #31, e8d0 <_Unwind_Backtrace@@GCC_3.3+0x370>
    e8d8:	ldrb	w0, [x20, #10]
    e8dc:	add	x20, sp, #0x28
    e8e0:	cmp	w0, #0x52
    e8e4:	b.ne	e904 <_Unwind_Backtrace@@GCC_3.3+0x3a4>  // b.any
    e8e8:	b	e930 <_Unwind_Backtrace@@GCC_3.3+0x3d0>
    e8ec:	add	x2, x2, #0x1
    e8f0:	cmp	w0, #0x4c
    e8f4:	b.ne	e88c <_Unwind_Backtrace@@GCC_3.3+0x32c>  // b.any
    e8f8:	ldrb	w0, [x19, #1]!
    e8fc:	cmp	w0, #0x52
    e900:	b.eq	e930 <_Unwind_Backtrace@@GCC_3.3+0x3d0>  // b.none
    e904:	cmp	w0, #0x50
    e908:	b.ne	e8ec <_Unwind_Backtrace@@GCC_3.3+0x38c>  // b.any
    e90c:	ldrb	w0, [x2], #1
    e910:	mov	x3, x20
    e914:	mov	x1, #0x0                   	// #0
    e918:	and	w0, w0, #0x7f
    e91c:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    e920:	mov	x2, x0
    e924:	ldrb	w0, [x19, #1]!
    e928:	cmp	w0, #0x52
    e92c:	b.ne	e904 <_Unwind_Backtrace@@GCC_3.3+0x3a4>  // b.any
    e930:	ldrb	w0, [x2]
    e934:	ldp	x19, x20, [sp, #16]
    e938:	ldp	x29, x30, [sp], #48
    e93c:	ret
    e940:	add	x2, x0, #0x2
    e944:	b	e8c8 <_Unwind_Backtrace@@GCC_3.3+0x368>
    e948:	ldrb	w1, [x19, x0]
    e94c:	mov	w0, #0xff                  	// #255
    e950:	cmp	w1, #0x8
    e954:	b.ne	e890 <_Unwind_Backtrace@@GCC_3.3+0x330>  // b.any
    e958:	ldrb	w1, [x2, #1]
    e95c:	cbnz	w1, e890 <_Unwind_Backtrace@@GCC_3.3+0x330>
    e960:	add	x2, x2, #0x2
    e964:	b	e880 <_Unwind_Backtrace@@GCC_3.3+0x320>
    e968:	stp	x29, x30, [sp, #-144]!
    e96c:	mov	x29, sp
    e970:	stp	x21, x22, [sp, #32]
    e974:	mov	x22, x0
    e978:	ldr	x0, [x2, #8]
    e97c:	stp	x23, x24, [sp, #48]
    e980:	mov	x23, x1
    e984:	stp	x19, x20, [sp, #16]
    e988:	add	x19, x2, #0x10
    e98c:	lsr	x24, x0, #1
    e990:	sub	w24, w24, #0x1
    e994:	stp	x25, x26, [sp, #64]
    e998:	mov	x25, x2
    e99c:	stp	x27, x28, [sp, #80]
    e9a0:	lsl	w26, w24, #1
    e9a4:	mov	w27, w0
    e9a8:	str	x0, [sp, #136]
    e9ac:	add	w26, w26, #0x1
    e9b0:	tbnz	w24, #31, ea88 <_Unwind_Backtrace@@GCC_3.3+0x528>
    e9b4:	nop
    e9b8:	cmp	w26, w27
    e9bc:	mov	w21, w26
    e9c0:	mov	w28, w24
    e9c4:	b.lt	ea1c <_Unwind_Backtrace@@GCC_3.3+0x4bc>  // b.tstop
    e9c8:	b	ea78 <_Unwind_Backtrace@@GCC_3.3+0x518>
    e9cc:	ldr	x6, [sp, #112]
    e9d0:	ldr	x1, [x19, x6, lsl #3]
    e9d4:	sxtw	x4, w28
    e9d8:	mov	x2, x1
    e9dc:	str	x4, [sp, #104]
    e9e0:	mov	x0, x22
    e9e4:	mov	w28, w21
    e9e8:	ldr	x1, [x19, x4, lsl #3]
    e9ec:	blr	x23
    e9f0:	lsl	w3, w21, #1
    e9f4:	tbz	w0, #31, ea78 <_Unwind_Backtrace@@GCC_3.3+0x518>
    e9f8:	ldr	x4, [sp, #104]
    e9fc:	add	w0, w3, #0x1
    ea00:	ldr	x2, [x20]
    ea04:	mov	w21, w0
    ea08:	ldr	x1, [x19, x4, lsl #3]
    ea0c:	str	x2, [x19, x4, lsl #3]
    ea10:	str	x1, [x20]
    ea14:	cmp	w0, w27
    ea18:	b.ge	ea78 <_Unwind_Backtrace@@GCC_3.3+0x518>  // b.tcont
    ea1c:	sbfiz	x20, x21, #3, #32
    ea20:	sxtw	x6, w21
    ea24:	add	x4, x20, #0x8
    ea28:	add	w5, w21, #0x1
    ea2c:	add	x7, x19, x4
    ea30:	stp	x6, x7, [sp, #112]
    ea34:	cmp	w5, w27
    ea38:	str	w5, [sp, #132]
    ea3c:	add	x20, x19, x20
    ea40:	mov	x0, x22
    ea44:	ldr	x1, [x19, x6, lsl #3]
    ea48:	b.ge	e9d4 <_Unwind_Backtrace@@GCC_3.3+0x474>  // b.tcont
    ea4c:	ldr	x2, [x19, x4]
    ea50:	str	x4, [sp, #104]
    ea54:	blr	x23
    ea58:	ldr	w5, [sp, #132]
    ea5c:	ldr	x4, [sp, #104]
    ea60:	ldr	x7, [sp, #120]
    ea64:	tbz	w0, #31, e9cc <_Unwind_Backtrace@@GCC_3.3+0x46c>
    ea68:	mov	x20, x7
    ea6c:	mov	w21, w5
    ea70:	ldr	x1, [x19, x4]
    ea74:	b	e9d4 <_Unwind_Backtrace@@GCC_3.3+0x474>
    ea78:	sub	w24, w24, #0x1
    ea7c:	sub	w26, w26, #0x2
    ea80:	cmn	w24, #0x1
    ea84:	b.ne	e9b8 <_Unwind_Backtrace@@GCC_3.3+0x458>  // b.any
    ea88:	ldr	w0, [sp, #136]
    ea8c:	sub	w21, w0, #0x1
    ea90:	cmp	w21, #0x0
    ea94:	b.le	ebac <_Unwind_Backtrace@@GCC_3.3+0x64c>
    ea98:	sxtw	x21, w21
    ea9c:	ldr	x0, [x25, #16]
    eaa0:	cmp	w21, #0x1
    eaa4:	ldr	x1, [x19, x21, lsl #3]
    eaa8:	str	x1, [x25, #16]
    eaac:	str	x0, [x19, x21, lsl #3]
    eab0:	mov	w26, w21
    eab4:	b.le	eba0 <_Unwind_Backtrace@@GCC_3.3+0x640>
    eab8:	mov	w27, #0x0                   	// #0
    eabc:	mov	w24, #0x1                   	// #1
    eac0:	b	eb0c <_Unwind_Backtrace@@GCC_3.3+0x5ac>
    eac4:	ldr	x4, [sp, #104]
    eac8:	ldr	x1, [x19, x4, lsl #3]
    eacc:	sxtw	x28, w27
    ead0:	mov	x2, x1
    ead4:	mov	w27, w24
    ead8:	mov	x0, x22
    eadc:	lsl	w24, w24, #1
    eae0:	ldr	x1, [x19, x28, lsl #3]
    eae4:	blr	x23
    eae8:	tbz	w0, #31, eb80 <_Unwind_Backtrace@@GCC_3.3+0x620>
    eaec:	ldr	x2, [x20]
    eaf0:	add	w0, w24, #0x1
    eaf4:	ldr	x1, [x19, x28, lsl #3]
    eaf8:	str	x2, [x19, x28, lsl #3]
    eafc:	str	x1, [x20]
    eb00:	mov	w24, w0
    eb04:	cmp	w0, w26
    eb08:	b.ge	eb80 <_Unwind_Backtrace@@GCC_3.3+0x620>  // b.tcont
    eb0c:	sbfiz	x20, x24, #3, #32
    eb10:	sxtw	x4, w24
    eb14:	add	x28, x20, #0x8
    eb18:	add	w3, w24, #0x1
    eb1c:	add	x5, x19, x28
    eb20:	stp	x4, x5, [sp, #104]
    eb24:	cmp	w3, w26
    eb28:	str	w3, [sp, #120]
    eb2c:	add	x20, x19, x20
    eb30:	mov	x0, x22
    eb34:	ldr	x1, [x19, x4, lsl #3]
    eb38:	b.ge	eacc <_Unwind_Backtrace@@GCC_3.3+0x56c>  // b.tcont
    eb3c:	ldr	x2, [x19, x28]
    eb40:	blr	x23
    eb44:	ldr	w3, [sp, #120]
    eb48:	ldr	x5, [sp, #112]
    eb4c:	tbz	w0, #31, eac4 <_Unwind_Backtrace@@GCC_3.3+0x564>
    eb50:	ldr	x1, [x19, x28]
    eb54:	sxtw	x28, w27
    eb58:	mov	w24, w3
    eb5c:	mov	x20, x5
    eb60:	mov	x2, x1
    eb64:	mov	w27, w24
    eb68:	ldr	x1, [x19, x28, lsl #3]
    eb6c:	mov	x0, x22
    eb70:	lsl	w24, w24, #1
    eb74:	blr	x23
    eb78:	tbnz	w0, #31, eaec <_Unwind_Backtrace@@GCC_3.3+0x58c>
    eb7c:	nop
    eb80:	sub	x21, x21, #0x1
    eb84:	ldr	x0, [x25, #16]
    eb88:	cmp	w21, #0x1
    eb8c:	ldr	x1, [x19, x21, lsl #3]
    eb90:	str	x1, [x25, #16]
    eb94:	str	x0, [x19, x21, lsl #3]
    eb98:	mov	w26, w21
    eb9c:	b.gt	eab8 <_Unwind_Backtrace@@GCC_3.3+0x558>
    eba0:	sub	w0, w21, #0x1
    eba4:	cmp	w0, #0x0
    eba8:	b.gt	eb80 <_Unwind_Backtrace@@GCC_3.3+0x620>
    ebac:	ldp	x19, x20, [sp, #16]
    ebb0:	ldp	x21, x22, [sp, #32]
    ebb4:	ldp	x23, x24, [sp, #48]
    ebb8:	ldp	x25, x26, [sp, #64]
    ebbc:	ldp	x27, x28, [sp, #80]
    ebc0:	ldp	x29, x30, [sp], #144
    ebc4:	ret
    ebc8:	stp	x29, x30, [sp, #-112]!
    ebcc:	mov	x29, sp
    ebd0:	stp	x19, x20, [sp, #16]
    ebd4:	mov	x19, x2
    ebd8:	ldrh	w20, [x0, #32]
    ebdc:	stp	x21, x22, [sp, #32]
    ebe0:	mov	x22, x1
    ebe4:	stp	x23, x24, [sp, #48]
    ebe8:	ubfx	x20, x20, #3, #8
    ebec:	cmp	w20, #0xff
    ebf0:	stp	x25, x26, [sp, #64]
    ebf4:	mov	x25, x0
    ebf8:	str	x27, [sp, #80]
    ebfc:	b.eq	edb8 <_Unwind_Backtrace@@GCC_3.3+0x858>  // b.none
    ec00:	and	w0, w20, #0x70
    ec04:	cmp	w0, #0x20
    ec08:	b.eq	ee04 <_Unwind_Backtrace@@GCC_3.3+0x8a4>  // b.none
    ec0c:	b.ls	edb0 <_Unwind_Backtrace@@GCC_3.3+0x850>  // b.plast
    ec10:	cmp	w0, #0x30
    ec14:	b.ne	eda0 <_Unwind_Backtrace@@GCC_3.3+0x840>  // b.any
    ec18:	ldr	x27, [x25, #16]
    ec1c:	nop
    ec20:	add	x23, sp, #0x68
    ec24:	ldr	w3, [x19]
    ec28:	mov	x26, #0x0                   	// #0
    ec2c:	cbz	w3, ecd0 <_Unwind_Backtrace@@GCC_3.3+0x770>
    ec30:	ldr	w2, [x19, #4]
    ec34:	cbz	w2, ecbc <_Unwind_Backtrace@@GCC_3.3+0x75c>
    ec38:	ldrb	w1, [x25, #32]
    ec3c:	tbz	w1, #2, ecec <_Unwind_Backtrace@@GCC_3.3+0x78c>
    ec40:	add	x21, x19, #0x4
    ec44:	sub	x21, x21, w2, sxtw
    ec48:	cmp	x21, x26
    ec4c:	b.eq	ecec <_Unwind_Backtrace@@GCC_3.3+0x78c>  // b.none
    ec50:	mov	x0, x21
    ec54:	bl	e850 <_Unwind_Backtrace@@GCC_3.3+0x2f0>
    ec58:	mov	w20, w0
    ec5c:	and	w0, w0, #0xff
    ec60:	cmp	w0, #0xff
    ec64:	mov	w24, w0
    ec68:	b.eq	ede0 <_Unwind_Backtrace@@GCC_3.3+0x880>  // b.none
    ec6c:	and	w1, w0, #0x70
    ec70:	cmp	w1, #0x20
    ec74:	b.eq	edc0 <_Unwind_Backtrace@@GCC_3.3+0x860>  // b.none
    ec78:	b.ls	ed94 <_Unwind_Backtrace@@GCC_3.3+0x834>  // b.plast
    ec7c:	cmp	w1, #0x30
    ec80:	b.ne	ed58 <_Unwind_Backtrace@@GCC_3.3+0x7f8>  // b.any
    ec84:	mov	x26, x21
    ec88:	ldr	x27, [x25, #16]
    ec8c:	cbnz	w20, edcc <_Unwind_Backtrace@@GCC_3.3+0x86c>
    ec90:	ldr	x0, [x19, #8]
    ec94:	mov	w20, #0x0                   	// #0
    ec98:	ldr	w3, [x19]
    ec9c:	cbz	x0, ecbc <_Unwind_Backtrace@@GCC_3.3+0x75c>
    eca0:	ldr	x1, [x22]
    eca4:	cbz	x1, ecbc <_Unwind_Backtrace@@GCC_3.3+0x75c>
    eca8:	ldr	x2, [x1, #8]
    ecac:	add	x0, x2, #0x2
    ecb0:	add	x2, x2, #0x1
    ecb4:	str	x2, [x1, #8]
    ecb8:	str	x19, [x1, x0, lsl #3]
    ecbc:	mov	w3, w3
    ecc0:	add	x3, x3, #0x4
    ecc4:	add	x19, x19, x3
    ecc8:	ldr	w3, [x19]
    eccc:	cbnz	w3, ec30 <_Unwind_Backtrace@@GCC_3.3+0x6d0>
    ecd0:	ldp	x19, x20, [sp, #16]
    ecd4:	ldp	x21, x22, [sp, #32]
    ecd8:	ldp	x23, x24, [sp, #48]
    ecdc:	ldp	x25, x26, [sp, #64]
    ece0:	ldr	x27, [sp, #80]
    ece4:	ldp	x29, x30, [sp], #112
    ece8:	ret
    ecec:	cbz	w20, ec90 <_Unwind_Backtrace@@GCC_3.3+0x730>
    ecf0:	and	w24, w20, #0xff
    ecf4:	mov	x3, x23
    ecf8:	mov	w0, w24
    ecfc:	add	x2, x19, #0x8
    ed00:	mov	x1, x27
    ed04:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    ed08:	cmp	w24, #0xff
    ed0c:	b.eq	edfc <_Unwind_Backtrace@@GCC_3.3+0x89c>  // b.none
    ed10:	and	w1, w24, #0x7
    ed14:	cmp	w1, #0x2
    ed18:	b.eq	ed8c <_Unwind_Backtrace@@GCC_3.3+0x82c>  // b.none
    ed1c:	b.ls	ed40 <_Unwind_Backtrace@@GCC_3.3+0x7e0>  // b.plast
    ed20:	cmp	w1, #0x3
    ed24:	mov	x0, #0xffffffff            	// #4294967295
    ed28:	b.ne	ed4c <_Unwind_Backtrace@@GCC_3.3+0x7ec>  // b.any
    ed2c:	ldr	x1, [sp, #104]
    ed30:	ldr	w3, [x19]
    ed34:	tst	x0, x1
    ed38:	b.ne	eca0 <_Unwind_Backtrace@@GCC_3.3+0x740>  // b.any
    ed3c:	b	ecbc <_Unwind_Backtrace@@GCC_3.3+0x75c>
    ed40:	cbnz	w1, ed54 <_Unwind_Backtrace@@GCC_3.3+0x7f4>
    ed44:	mov	x0, #0xffffffffffffffff    	// #-1
    ed48:	b	ed2c <_Unwind_Backtrace@@GCC_3.3+0x7cc>
    ed4c:	cmp	w1, #0x4
    ed50:	b.eq	ed44 <_Unwind_Backtrace@@GCC_3.3+0x7e4>  // b.none
    ed54:	bl	2c50 <abort@plt>
    ed58:	cmp	w1, #0x50
    ed5c:	b.ne	ed54 <_Unwind_Backtrace@@GCC_3.3+0x7f4>  // b.any
    ed60:	mov	x26, x21
    ed64:	mov	x27, #0x0                   	// #0
    ed68:	cbz	w20, ec90 <_Unwind_Backtrace@@GCC_3.3+0x730>
    ed6c:	mov	w24, w0
    ed70:	mov	x1, #0x0                   	// #0
    ed74:	mov	x3, x23
    ed78:	add	x2, x19, #0x8
    ed7c:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    ed80:	and	w1, w24, #0x7
    ed84:	cmp	w1, #0x2
    ed88:	b.ne	ed1c <_Unwind_Backtrace@@GCC_3.3+0x7bc>  // b.any
    ed8c:	mov	x0, #0xffff                	// #65535
    ed90:	b	ed2c <_Unwind_Backtrace@@GCC_3.3+0x7cc>
    ed94:	tst	w0, #0x60
    ed98:	b.eq	ed60 <_Unwind_Backtrace@@GCC_3.3+0x800>  // b.none
    ed9c:	bl	2c50 <abort@plt>
    eda0:	cmp	w0, #0x50
    eda4:	mov	x27, #0x0                   	// #0
    eda8:	b.eq	ec20 <_Unwind_Backtrace@@GCC_3.3+0x6c0>  // b.none
    edac:	bl	2c50 <abort@plt>
    edb0:	tst	w20, #0x60
    edb4:	b.ne	ed54 <_Unwind_Backtrace@@GCC_3.3+0x7f4>  // b.any
    edb8:	mov	x27, #0x0                   	// #0
    edbc:	b	ec20 <_Unwind_Backtrace@@GCC_3.3+0x6c0>
    edc0:	mov	x26, x21
    edc4:	ldr	x27, [x25, #8]
    edc8:	cbz	w20, ec90 <_Unwind_Backtrace@@GCC_3.3+0x730>
    edcc:	mov	x3, x23
    edd0:	add	x2, x19, #0x8
    edd4:	mov	x1, x27
    edd8:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    eddc:	b	ed10 <_Unwind_Backtrace@@GCC_3.3+0x7b0>
    ede0:	mov	x26, x21
    ede4:	mov	x3, x23
    ede8:	add	x2, x19, #0x8
    edec:	mov	x1, #0x0                   	// #0
    edf0:	mov	w0, #0xffffffff            	// #-1
    edf4:	mov	x27, #0x0                   	// #0
    edf8:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    edfc:	mov	x0, #0x0                   	// #0
    ee00:	b	ed2c <_Unwind_Backtrace@@GCC_3.3+0x7cc>
    ee04:	ldr	x27, [x25, #8]
    ee08:	b	ec20 <_Unwind_Backtrace@@GCC_3.3+0x6c0>
    ee0c:	nop
    ee10:	stp	x29, x30, [sp, #-112]!
    ee14:	mov	x29, sp
    ee18:	stp	x19, x20, [sp, #16]
    ee1c:	mov	x19, x1
    ee20:	ldrh	w20, [x0, #32]
    ee24:	stp	x21, x22, [sp, #32]
    ee28:	mov	x21, x2
    ee2c:	stp	x27, x28, [sp, #80]
    ee30:	ubfx	x20, x20, #3, #8
    ee34:	mov	x28, x0
    ee38:	cmp	w20, #0xff
    ee3c:	b.eq	f018 <_Unwind_Backtrace@@GCC_3.3+0xab8>  // b.none
    ee40:	and	w0, w20, #0x70
    ee44:	cmp	w0, #0x20
    ee48:	b.eq	f09c <_Unwind_Backtrace@@GCC_3.3+0xb3c>  // b.none
    ee4c:	b.ls	f004 <_Unwind_Backtrace@@GCC_3.3+0xaa4>  // b.plast
    ee50:	cmp	w0, #0x30
    ee54:	b.ne	eff0 <_Unwind_Backtrace@@GCC_3.3+0xa90>  // b.any
    ee58:	ldr	x27, [x28, #16]
    ee5c:	stp	x25, x26, [sp, #64]
    ee60:	ldr	w3, [x19]
    ee64:	mov	x26, #0x0                   	// #0
    ee68:	cbz	w3, ef10 <_Unwind_Backtrace@@GCC_3.3+0x9b0>
    ee6c:	add	x22, sp, #0x68
    ee70:	stp	x23, x24, [sp, #48]
    ee74:	add	x23, sp, #0x60
    ee78:	ldr	w1, [x19, #4]
    ee7c:	cbz	w1, eef8 <_Unwind_Backtrace@@GCC_3.3+0x998>
    ee80:	ldrb	w2, [x28, #32]
    ee84:	tbz	w2, #2, ef3c <_Unwind_Backtrace@@GCC_3.3+0x9dc>
    ee88:	add	x25, x19, #0x4
    ee8c:	sub	x25, x25, w1, sxtw
    ee90:	cmp	x25, x26
    ee94:	b.eq	ef3c <_Unwind_Backtrace@@GCC_3.3+0x9dc>  // b.none
    ee98:	mov	x0, x25
    ee9c:	bl	e850 <_Unwind_Backtrace@@GCC_3.3+0x2f0>
    eea0:	and	w24, w0, #0xff
    eea4:	mov	w20, w0
    eea8:	cmp	w24, #0xff
    eeac:	b.eq	f064 <_Unwind_Backtrace@@GCC_3.3+0xb04>  // b.none
    eeb0:	and	w1, w24, #0x70
    eeb4:	cmp	w1, #0x20
    eeb8:	b.eq	f02c <_Unwind_Backtrace@@GCC_3.3+0xacc>  // b.none
    eebc:	b.ls	efe4 <_Unwind_Backtrace@@GCC_3.3+0xa84>  // b.plast
    eec0:	cmp	w1, #0x30
    eec4:	b.ne	ef2c <_Unwind_Backtrace@@GCC_3.3+0x9cc>  // b.any
    eec8:	mov	x26, x25
    eecc:	ldr	x27, [x28, #16]
    eed0:	cbnz	w20, f038 <_Unwind_Backtrace@@GCC_3.3+0xad8>
    eed4:	nop
    eed8:	ldp	x1, x2, [x19, #8]
    eedc:	stp	x1, x2, [sp, #96]
    eee0:	mov	w20, #0x0                   	// #0
    eee4:	cbz	x1, eef4 <_Unwind_Backtrace@@GCC_3.3+0x994>
    eee8:	sub	x1, x21, x1
    eeec:	cmp	x1, x2
    eef0:	b.cc	efac <_Unwind_Backtrace@@GCC_3.3+0xa4c>  // b.lo, b.ul, b.last
    eef4:	ldr	w3, [x19]
    eef8:	mov	w3, w3
    eefc:	add	x3, x3, #0x4
    ef00:	add	x19, x19, x3
    ef04:	ldr	w3, [x19]
    ef08:	cbnz	w3, ee78 <_Unwind_Backtrace@@GCC_3.3+0x918>
    ef0c:	ldp	x23, x24, [sp, #48]
    ef10:	mov	x0, #0x0                   	// #0
    ef14:	ldp	x19, x20, [sp, #16]
    ef18:	ldp	x21, x22, [sp, #32]
    ef1c:	ldp	x25, x26, [sp, #64]
    ef20:	ldp	x27, x28, [sp, #80]
    ef24:	ldp	x29, x30, [sp], #112
    ef28:	ret
    ef2c:	cmp	w1, #0x50
    ef30:	b.ne	efe0 <_Unwind_Backtrace@@GCC_3.3+0xa80>  // b.any
    ef34:	mov	x26, x25
    ef38:	mov	x27, #0x0                   	// #0
    ef3c:	cbz	w20, eed8 <_Unwind_Backtrace@@GCC_3.3+0x978>
    ef40:	and	w24, w20, #0xff
    ef44:	mov	x3, x23
    ef48:	add	x2, x19, #0x8
    ef4c:	mov	x1, x27
    ef50:	mov	w0, w24
    ef54:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    ef58:	mov	x3, x22
    ef5c:	mov	x2, x0
    ef60:	mov	x1, #0x0                   	// #0
    ef64:	and	w0, w24, #0xf
    ef68:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    ef6c:	cmp	w24, #0xff
    ef70:	b.eq	f094 <_Unwind_Backtrace@@GCC_3.3+0xb34>  // b.none
    ef74:	and	w24, w24, #0x7
    ef78:	cmp	w24, #0x2
    ef7c:	b.eq	f024 <_Unwind_Backtrace@@GCC_3.3+0xac4>  // b.none
    ef80:	b.ls	efcc <_Unwind_Backtrace@@GCC_3.3+0xa6c>  // b.plast
    ef84:	cmp	w24, #0x3
    ef88:	mov	x2, #0xffffffff            	// #4294967295
    ef8c:	b.ne	efd8 <_Unwind_Backtrace@@GCC_3.3+0xa78>  // b.any
    ef90:	ldr	x1, [sp, #96]
    ef94:	tst	x1, x2
    ef98:	b.eq	eef4 <_Unwind_Backtrace@@GCC_3.3+0x994>  // b.none
    ef9c:	ldr	x2, [sp, #104]
    efa0:	sub	x1, x21, x1
    efa4:	cmp	x1, x2
    efa8:	b.cs	eef4 <_Unwind_Backtrace@@GCC_3.3+0x994>  // b.hs, b.nlast
    efac:	mov	x0, x19
    efb0:	ldp	x19, x20, [sp, #16]
    efb4:	ldp	x21, x22, [sp, #32]
    efb8:	ldp	x23, x24, [sp, #48]
    efbc:	ldp	x25, x26, [sp, #64]
    efc0:	ldp	x27, x28, [sp, #80]
    efc4:	ldp	x29, x30, [sp], #112
    efc8:	ret
    efcc:	cbnz	w24, efe0 <_Unwind_Backtrace@@GCC_3.3+0xa80>
    efd0:	mov	x2, #0xffffffffffffffff    	// #-1
    efd4:	b	ef90 <_Unwind_Backtrace@@GCC_3.3+0xa30>
    efd8:	cmp	w24, #0x4
    efdc:	b.eq	efd0 <_Unwind_Backtrace@@GCC_3.3+0xa70>  // b.none
    efe0:	bl	2c50 <abort@plt>
    efe4:	tst	w24, #0x60
    efe8:	b.eq	ef34 <_Unwind_Backtrace@@GCC_3.3+0x9d4>  // b.none
    efec:	bl	2c50 <abort@plt>
    eff0:	cmp	w0, #0x50
    eff4:	mov	x27, #0x0                   	// #0
    eff8:	b.ne	f00c <_Unwind_Backtrace@@GCC_3.3+0xaac>  // b.any
    effc:	stp	x25, x26, [sp, #64]
    f000:	b	ee60 <_Unwind_Backtrace@@GCC_3.3+0x900>
    f004:	tst	w20, #0x60
    f008:	b.eq	f018 <_Unwind_Backtrace@@GCC_3.3+0xab8>  // b.none
    f00c:	stp	x23, x24, [sp, #48]
    f010:	stp	x25, x26, [sp, #64]
    f014:	bl	2c50 <abort@plt>
    f018:	mov	x27, #0x0                   	// #0
    f01c:	stp	x25, x26, [sp, #64]
    f020:	b	ee60 <_Unwind_Backtrace@@GCC_3.3+0x900>
    f024:	mov	x2, #0xffff                	// #65535
    f028:	b	ef90 <_Unwind_Backtrace@@GCC_3.3+0xa30>
    f02c:	mov	x26, x25
    f030:	ldr	x27, [x28, #8]
    f034:	cbz	w20, eed8 <_Unwind_Backtrace@@GCC_3.3+0x978>
    f038:	mov	x3, x23
    f03c:	add	x2, x19, #0x8
    f040:	mov	x1, x27
    f044:	mov	w0, w24
    f048:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    f04c:	mov	x2, x0
    f050:	mov	x3, x22
    f054:	and	w0, w24, #0xf
    f058:	mov	x1, #0x0                   	// #0
    f05c:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    f060:	b	ef74 <_Unwind_Backtrace@@GCC_3.3+0xa14>
    f064:	mov	x3, x23
    f068:	add	x2, x19, #0x8
    f06c:	mov	x1, #0x0                   	// #0
    f070:	mov	w0, #0xffffffff            	// #-1
    f074:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    f078:	mov	x26, x25
    f07c:	mov	x2, x0
    f080:	mov	x3, x22
    f084:	mov	x1, #0x0                   	// #0
    f088:	mov	w0, #0xf                   	// #15
    f08c:	mov	x27, #0x0                   	// #0
    f090:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    f094:	mov	x2, #0x0                   	// #0
    f098:	b	ef90 <_Unwind_Backtrace@@GCC_3.3+0xa30>
    f09c:	stp	x25, x26, [sp, #64]
    f0a0:	ldr	x27, [x28, #8]
    f0a4:	b	ee60 <_Unwind_Backtrace@@GCC_3.3+0x900>
    f0a8:	stp	x29, x30, [sp, #-64]!
    f0ac:	mov	x29, sp
    f0b0:	ldr	w2, [x1]
    f0b4:	str	x23, [sp, #48]
    f0b8:	cbz	w2, f394 <_Unwind_Backtrace@@GCC_3.3+0xe34>
    f0bc:	stp	x19, x20, [sp, #16]
    f0c0:	mov	x19, x1
    f0c4:	mov	x6, #0x0                   	// #0
    f0c8:	mov	x23, #0x0                   	// #0
    f0cc:	mov	x3, #0x0                   	// #0
    f0d0:	mov	x20, #0x1                   	// #1
    f0d4:	stp	x21, x22, [sp, #32]
    f0d8:	mov	x22, x0
    f0dc:	mov	w0, #0x0                   	// #0
    f0e0:	ldr	w1, [x19, #4]
    f0e4:	cbz	w1, f1c8 <_Unwind_Backtrace@@GCC_3.3+0xc68>
    f0e8:	add	x21, x19, #0x4
    f0ec:	and	w2, w0, #0xff
    f0f0:	sub	x21, x21, w1, sxtw
    f0f4:	cmp	x21, x3
    f0f8:	b.eq	f160 <_Unwind_Backtrace@@GCC_3.3+0xc00>  // b.none
    f0fc:	mov	x0, x21
    f100:	bl	e850 <_Unwind_Backtrace@@GCC_3.3+0x2f0>
    f104:	cmp	w0, #0xff
    f108:	b.eq	f38c <_Unwind_Backtrace@@GCC_3.3+0xe2c>  // b.none
    f10c:	and	w2, w0, #0xff
    f110:	cmp	w2, #0xff
    f114:	b.eq	f1fc <_Unwind_Backtrace@@GCC_3.3+0xc9c>  // b.none
    f118:	and	w1, w2, #0x70
    f11c:	cmp	w1, #0x20
    f120:	b.eq	f374 <_Unwind_Backtrace@@GCC_3.3+0xe14>  // b.none
    f124:	b.ls	f34c <_Unwind_Backtrace@@GCC_3.3+0xdec>  // b.plast
    f128:	cmp	w1, #0x30
    f12c:	b.ne	f1f4 <_Unwind_Backtrace@@GCC_3.3+0xc94>  // b.any
    f130:	ldr	x6, [x22, #16]
    f134:	ldrh	w3, [x22, #32]
    f138:	and	w1, w3, #0x7f8
    f13c:	cmp	w1, #0x7f8
    f140:	b.eq	f210 <_Unwind_Backtrace@@GCC_3.3+0xcb0>  // b.none
    f144:	nop
    f148:	ubfx	x3, x3, #3, #8
    f14c:	cmp	w3, w0
    f150:	b.eq	f160 <_Unwind_Backtrace@@GCC_3.3+0xc00>  // b.none
    f154:	ldrb	w1, [x22, #32]
    f158:	orr	w1, w1, #0x4
    f15c:	strb	w1, [x22, #32]
    f160:	cmp	w2, #0x50
    f164:	add	x8, x19, #0x8
    f168:	b.eq	f224 <_Unwind_Backtrace@@GCC_3.3+0xcc4>  // b.none
    f16c:	and	w1, w2, #0xf
    f170:	cmp	w1, #0x4
    f174:	b.eq	f258 <_Unwind_Backtrace@@GCC_3.3+0xcf8>  // b.none
    f178:	b.hi	f244 <_Unwind_Backtrace@@GCC_3.3+0xce4>  // b.pmore
    f17c:	cmp	w1, #0x2
    f180:	b.eq	f384 <_Unwind_Backtrace@@GCC_3.3+0xe24>  // b.none
    f184:	b.ls	f318 <_Unwind_Backtrace@@GCC_3.3+0xdb8>  // b.plast
    f188:	cmp	w1, #0x3
    f18c:	b.ne	f354 <_Unwind_Backtrace@@GCC_3.3+0xdf4>  // b.any
    f190:	ldr	w1, [x19, #8]
    f194:	nop
    f198:	cbz	x1, f260 <_Unwind_Backtrace@@GCC_3.3+0xd00>
    f19c:	and	w3, w2, #0x70
    f1a0:	sxtb	w4, w0
    f1a4:	cmp	w3, #0x10
    f1a8:	b.eq	f2f8 <_Unwind_Backtrace@@GCC_3.3+0xd98>  // b.none
    f1ac:	add	x1, x1, x6
    f1b0:	tbnz	w4, #31, f300 <_Unwind_Backtrace@@GCC_3.3+0xda0>
    f1b4:	cmp	w2, #0xff
    f1b8:	b.ne	f260 <_Unwind_Backtrace@@GCC_3.3+0xd00>  // b.any
    f1bc:	ldr	w2, [x19]
    f1c0:	mov	x3, x21
    f1c4:	nop
    f1c8:	mov	w2, w2
    f1cc:	add	x2, x2, #0x4
    f1d0:	add	x19, x19, x2
    f1d4:	ldr	w2, [x19]
    f1d8:	cbnz	w2, f0e0 <_Unwind_Backtrace@@GCC_3.3+0xb80>
    f1dc:	ldp	x19, x20, [sp, #16]
    f1e0:	ldp	x21, x22, [sp, #32]
    f1e4:	mov	x0, x23
    f1e8:	ldr	x23, [sp, #48]
    f1ec:	ldp	x29, x30, [sp], #64
    f1f0:	ret
    f1f4:	cmp	w1, #0x50
    f1f8:	b.ne	f354 <_Unwind_Backtrace@@GCC_3.3+0xdf4>  // b.any
    f1fc:	ldrh	w3, [x22, #32]
    f200:	mov	x6, #0x0                   	// #0
    f204:	and	w1, w3, #0x7f8
    f208:	cmp	w1, #0x7f8
    f20c:	b.ne	f148 <_Unwind_Backtrace@@GCC_3.3+0xbe8>  // b.any
    f210:	bfi	w3, w2, #3, #8
    f214:	strh	w3, [x22, #32]
    f218:	cmp	w2, #0x50
    f21c:	add	x8, x19, #0x8
    f220:	b.ne	f16c <_Unwind_Backtrace@@GCC_3.3+0xc0c>  // b.any
    f224:	add	x1, x19, #0xf
    f228:	ldr	w2, [x19]
    f22c:	and	x1, x1, #0xfffffffffffffff8
    f230:	ldr	x1, [x1]
    f234:	mov	x3, x1
    f238:	cbnz	x3, f288 <_Unwind_Backtrace@@GCC_3.3+0xd28>
    f23c:	mov	x3, x21
    f240:	b	f1c8 <_Unwind_Backtrace@@GCC_3.3+0xc68>
    f244:	cmp	w1, #0xb
    f248:	b.eq	f37c <_Unwind_Backtrace@@GCC_3.3+0xe1c>  // b.none
    f24c:	b.ls	f2a4 <_Unwind_Backtrace@@GCC_3.3+0xd44>  // b.plast
    f250:	cmp	w1, #0xc
    f254:	b.ne	f354 <_Unwind_Backtrace@@GCC_3.3+0xdf4>  // b.any
    f258:	ldr	x1, [x19, #8]
    f25c:	cbnz	x1, f19c <_Unwind_Backtrace@@GCC_3.3+0xc3c>
    f260:	and	w2, w2, #0x7
    f264:	and	x3, x1, #0xffff
    f268:	cmp	w2, #0x2
    f26c:	b.eq	f280 <_Unwind_Backtrace@@GCC_3.3+0xd20>  // b.none
    f270:	b.ls	f368 <_Unwind_Backtrace@@GCC_3.3+0xe08>  // b.plast
    f274:	cmp	w2, #0x3
    f278:	and	x3, x1, #0xffffffff
    f27c:	b.ne	f358 <_Unwind_Backtrace@@GCC_3.3+0xdf8>  // b.any
    f280:	ldr	w2, [x19]
    f284:	cbz	x3, f23c <_Unwind_Backtrace@@GCC_3.3+0xcdc>
    f288:	ldr	x4, [x22]
    f28c:	add	x23, x23, #0x1
    f290:	mov	x3, x21
    f294:	cmp	x4, x1
    f298:	b.ls	f1c8 <_Unwind_Backtrace@@GCC_3.3+0xc68>  // b.plast
    f29c:	str	x1, [x22]
    f2a0:	b	f1c8 <_Unwind_Backtrace@@GCC_3.3+0xc68>
    f2a4:	cmp	w1, #0x9
    f2a8:	b.ne	f308 <_Unwind_Backtrace@@GCC_3.3+0xda8>  // b.any
    f2ac:	mov	x7, x8
    f2b0:	mov	x1, #0x0                   	// #0
    f2b4:	mov	w4, #0x0                   	// #0
    f2b8:	ldrb	w5, [x7], #1
    f2bc:	and	x3, x5, #0x7f
    f2c0:	lsl	x3, x3, x4
    f2c4:	add	w4, w4, #0x7
    f2c8:	orr	x1, x1, x3
    f2cc:	tbnz	w5, #7, f2b8 <_Unwind_Backtrace@@GCC_3.3+0xd58>
    f2d0:	cmp	w4, #0x3f
    f2d4:	b.hi	f198 <_Unwind_Backtrace@@GCC_3.3+0xc38>  // b.pmore
    f2d8:	tbz	w5, #6, f198 <_Unwind_Backtrace@@GCC_3.3+0xc38>
    f2dc:	lsl	x3, x20, x4
    f2e0:	neg	x3, x3
    f2e4:	orr	x1, x1, x3
    f2e8:	and	w3, w2, #0x70
    f2ec:	sxtb	w4, w0
    f2f0:	cmp	w3, #0x10
    f2f4:	b.ne	f1ac <_Unwind_Backtrace@@GCC_3.3+0xc4c>  // b.any
    f2f8:	add	x1, x8, x1
    f2fc:	tbz	w4, #31, f260 <_Unwind_Backtrace@@GCC_3.3+0xd00>
    f300:	ldr	x1, [x1]
    f304:	b	f1b4 <_Unwind_Backtrace@@GCC_3.3+0xc54>
    f308:	cmp	w1, #0xa
    f30c:	b.ne	f354 <_Unwind_Backtrace@@GCC_3.3+0xdf4>  // b.any
    f310:	ldrsh	x1, [x19, #8]
    f314:	b	f198 <_Unwind_Backtrace@@GCC_3.3+0xc38>
    f318:	cbz	w1, f258 <_Unwind_Backtrace@@GCC_3.3+0xcf8>
    f31c:	cmp	w1, #0x1
    f320:	b.ne	f354 <_Unwind_Backtrace@@GCC_3.3+0xdf4>  // b.any
    f324:	mov	x7, x8
    f328:	mov	x1, #0x0                   	// #0
    f32c:	mov	w4, #0x0                   	// #0
    f330:	ldrb	w5, [x7], #1
    f334:	and	x3, x5, #0x7f
    f338:	lsl	x3, x3, x4
    f33c:	add	w4, w4, #0x7
    f340:	orr	x1, x1, x3
    f344:	tbnz	w5, #7, f330 <_Unwind_Backtrace@@GCC_3.3+0xdd0>
    f348:	b	f198 <_Unwind_Backtrace@@GCC_3.3+0xc38>
    f34c:	tst	w2, #0x60
    f350:	b.eq	f1fc <_Unwind_Backtrace@@GCC_3.3+0xc9c>  // b.none
    f354:	bl	2c50 <abort@plt>
    f358:	cmp	w2, #0x4
    f35c:	b.ne	f354 <_Unwind_Backtrace@@GCC_3.3+0xdf4>  // b.any
    f360:	mov	x3, x1
    f364:	b	f280 <_Unwind_Backtrace@@GCC_3.3+0xd20>
    f368:	cbnz	w2, f354 <_Unwind_Backtrace@@GCC_3.3+0xdf4>
    f36c:	mov	x3, x1
    f370:	b	f280 <_Unwind_Backtrace@@GCC_3.3+0xd20>
    f374:	ldr	x6, [x22, #8]
    f378:	b	f134 <_Unwind_Backtrace@@GCC_3.3+0xbd4>
    f37c:	ldrsw	x1, [x19, #8]
    f380:	b	f198 <_Unwind_Backtrace@@GCC_3.3+0xc38>
    f384:	ldrh	w1, [x19, #8]
    f388:	b	f198 <_Unwind_Backtrace@@GCC_3.3+0xc38>
    f38c:	mov	x23, #0xffffffffffffffff    	// #-1
    f390:	b	f1dc <_Unwind_Backtrace@@GCC_3.3+0xc7c>
    f394:	mov	x23, #0x0                   	// #0
    f398:	b	f1e4 <_Unwind_Backtrace@@GCC_3.3+0xc84>
    f39c:	nop
    f3a0:	stp	x29, x30, [sp, #-160]!
    f3a4:	mov	x29, sp
    f3a8:	stp	x19, x20, [sp, #16]
    f3ac:	mov	x20, x1
    f3b0:	ldrb	w1, [x0, #32]
    f3b4:	stp	x21, x22, [sp, #32]
    f3b8:	mov	x19, x0
    f3bc:	tbz	w1, #0, f428 <_Unwind_Backtrace@@GCC_3.3+0xec8>
    f3c0:	stp	x27, x28, [sp, #80]
    f3c4:	ldr	x28, [x19, #24]
    f3c8:	tbnz	w1, #2, f498 <_Unwind_Backtrace@@GCC_3.3+0xf38>
    f3cc:	ldrh	w22, [x19, #32]
    f3d0:	tst	w22, #0x7f8
    f3d4:	b.ne	f61c <_Unwind_Backtrace@@GCC_3.3+0x10bc>  // b.any
    f3d8:	mov	x2, #0x0                   	// #0
    f3dc:	ldr	x1, [x28, #8]
    f3e0:	b	f404 <_Unwind_Backtrace@@GCC_3.3+0xea4>
    f3e4:	add	x0, x1, x2
    f3e8:	lsr	x0, x0, #1
    f3ec:	add	x3, x0, #0x2
    f3f0:	ldr	x21, [x28, x3, lsl #3]
    f3f4:	ldr	x3, [x21, #8]
    f3f8:	cmp	x20, x3
    f3fc:	b.cs	f480 <_Unwind_Backtrace@@GCC_3.3+0xf20>  // b.hs, b.nlast
    f400:	mov	x1, x0
    f404:	cmp	x1, x2
    f408:	b.hi	f3e4 <_Unwind_Backtrace@@GCC_3.3+0xe84>  // b.pmore
    f40c:	ldp	x27, x28, [sp, #80]
    f410:	mov	x21, #0x0                   	// #0
    f414:	mov	x0, x21
    f418:	ldp	x19, x20, [sp, #16]
    f41c:	ldp	x21, x22, [sp, #32]
    f420:	ldp	x29, x30, [sp], #160
    f424:	ret
    f428:	stp	x25, x26, [sp, #64]
    f42c:	ldr	w26, [x0, #32]
    f430:	tst	x26, #0xfffff800
    f434:	lsr	w26, w26, #11
    f438:	b.ne	f6d4 <_Unwind_Backtrace@@GCC_3.3+0x1174>  // b.any
    f43c:	ldr	x21, [x0, #24]
    f440:	tbz	w1, #1, f558 <_Unwind_Backtrace@@GCC_3.3+0xff8>
    f444:	ldr	x1, [x21]
    f448:	cbnz	x1, f45c <_Unwind_Backtrace@@GCC_3.3+0xefc>
    f44c:	b	f584 <_Unwind_Backtrace@@GCC_3.3+0x1024>
    f450:	ldr	x1, [x21, #8]!
    f454:	add	x26, x26, x0
    f458:	cbz	x1, f56c <_Unwind_Backtrace@@GCC_3.3+0x100c>
    f45c:	mov	x0, x19
    f460:	bl	f0a8 <_Unwind_Backtrace@@GCC_3.3+0xb48>
    f464:	cmn	x0, #0x1
    f468:	b.ne	f450 <_Unwind_Backtrace@@GCC_3.3+0xef0>  // b.any
    f46c:	adrp	x0, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
    f470:	mov	x1, #0x7f8                 	// #2040
    f474:	add	x0, x0, #0x890
    f478:	stp	x0, x1, [x19, #24]
    f47c:	b	f584 <_Unwind_Backtrace@@GCC_3.3+0x1024>
    f480:	ldr	x2, [x21, #16]
    f484:	add	x3, x3, x2
    f488:	cmp	x20, x3
    f48c:	b.cc	f9d4 <_Unwind_Backtrace@@GCC_3.3+0x1474>  // b.lo, b.ul, b.last
    f490:	add	x2, x0, #0x1
    f494:	b	f404 <_Unwind_Backtrace@@GCC_3.3+0xea4>
    f498:	stp	x23, x24, [sp, #48]
    f49c:	ldr	x24, [x28, #8]
    f4a0:	cbz	x24, fa40 <_Unwind_Backtrace@@GCC_3.3+0x14e0>
    f4a4:	add	x27, sp, #0x88
    f4a8:	stp	x25, x26, [sp, #64]
    f4ac:	add	x26, sp, #0x90
    f4b0:	mov	x25, #0x0                   	// #0
    f4b4:	b	f4d4 <_Unwind_Backtrace@@GCC_3.3+0xf74>
    f4b8:	ldr	x1, [sp, #144]
    f4bc:	add	x0, x0, x1
    f4c0:	cmp	x20, x0
    f4c4:	b.cc	f9cc <_Unwind_Backtrace@@GCC_3.3+0x146c>  // b.lo, b.ul, b.last
    f4c8:	add	x25, x23, #0x1
    f4cc:	cmp	x25, x24
    f4d0:	b.cs	f60c <_Unwind_Backtrace@@GCC_3.3+0x10ac>  // b.hs, b.nlast
    f4d4:	add	x23, x24, x25
    f4d8:	lsr	x23, x23, #1
    f4dc:	add	x0, x23, #0x2
    f4e0:	ldr	x21, [x28, x0, lsl #3]
    f4e4:	add	x1, x21, #0x4
    f4e8:	ldrsw	x0, [x21, #4]
    f4ec:	sub	x0, x1, x0
    f4f0:	bl	e850 <_Unwind_Backtrace@@GCC_3.3+0x2f0>
    f4f4:	and	w22, w0, #0xff
    f4f8:	cmp	w22, #0xff
    f4fc:	b.eq	f5e8 <_Unwind_Backtrace@@GCC_3.3+0x1088>  // b.none
    f500:	and	w0, w22, #0x70
    f504:	cmp	w0, #0x20
    f508:	b.eq	f5fc <_Unwind_Backtrace@@GCC_3.3+0x109c>  // b.none
    f50c:	b.ls	f5f0 <_Unwind_Backtrace@@GCC_3.3+0x1090>  // b.plast
    f510:	cmp	w0, #0x30
    f514:	b.ne	f5e0 <_Unwind_Backtrace@@GCC_3.3+0x1080>  // b.any
    f518:	ldr	x1, [x19, #16]
    f51c:	nop
    f520:	mov	x3, x27
    f524:	add	x2, x21, #0x8
    f528:	mov	w0, w22
    f52c:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    f530:	mov	x2, x0
    f534:	mov	x3, x26
    f538:	and	w0, w22, #0xf
    f53c:	mov	x1, #0x0                   	// #0
    f540:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    f544:	ldr	x0, [sp, #136]
    f548:	cmp	x20, x0
    f54c:	b.cs	f4b8 <_Unwind_Backtrace@@GCC_3.3+0xf58>  // b.hs, b.nlast
    f550:	mov	x24, x23
    f554:	b	f4cc <_Unwind_Backtrace@@GCC_3.3+0xf6c>
    f558:	mov	x1, x21
    f55c:	bl	f0a8 <_Unwind_Backtrace@@GCC_3.3+0xb48>
    f560:	mov	x26, x0
    f564:	cmn	x0, #0x1
    f568:	b.eq	f46c <_Unwind_Backtrace@@GCC_3.3+0xf0c>  // b.none
    f56c:	ldr	w0, [x19, #32]
    f570:	tst	x26, #0xffffffffffe00000
    f574:	b.eq	fa0c <_Unwind_Backtrace@@GCC_3.3+0x14ac>  // b.none
    f578:	and	w0, w0, #0x7ff
    f57c:	str	w0, [x19, #32]
    f580:	cbnz	x26, f6d4 <_Unwind_Backtrace@@GCC_3.3+0x1174>
    f584:	ldr	x0, [x19]
    f588:	cmp	x0, x20
    f58c:	b.hi	f604 <_Unwind_Backtrace@@GCC_3.3+0x10a4>  // b.pmore
    f590:	ldrb	w1, [x19, #32]
    f594:	ldr	x22, [x19, #24]
    f598:	tbnz	w1, #0, fa54 <_Unwind_Backtrace@@GCC_3.3+0x14f4>
    f59c:	tbz	w1, #1, f9b0 <_Unwind_Backtrace@@GCC_3.3+0x1450>
    f5a0:	ldr	x1, [x22]
    f5a4:	cbnz	x1, f5b4 <_Unwind_Backtrace@@GCC_3.3+0x1054>
    f5a8:	b	f604 <_Unwind_Backtrace@@GCC_3.3+0x10a4>
    f5ac:	ldr	x1, [x22, #8]!
    f5b0:	cbz	x1, f604 <_Unwind_Backtrace@@GCC_3.3+0x10a4>
    f5b4:	mov	x2, x20
    f5b8:	mov	x0, x19
    f5bc:	bl	ee10 <_Unwind_Backtrace@@GCC_3.3+0x8b0>
    f5c0:	mov	x21, x0
    f5c4:	cbz	x0, f5ac <_Unwind_Backtrace@@GCC_3.3+0x104c>
    f5c8:	mov	x0, x21
    f5cc:	ldp	x19, x20, [sp, #16]
    f5d0:	ldp	x21, x22, [sp, #32]
    f5d4:	ldp	x25, x26, [sp, #64]
    f5d8:	ldp	x29, x30, [sp], #160
    f5dc:	ret
    f5e0:	cmp	w0, #0x50
    f5e4:	b.ne	f5f8 <_Unwind_Backtrace@@GCC_3.3+0x1098>  // b.any
    f5e8:	mov	x1, #0x0                   	// #0
    f5ec:	b	f520 <_Unwind_Backtrace@@GCC_3.3+0xfc0>
    f5f0:	tst	w22, #0x60
    f5f4:	b.eq	f5e8 <_Unwind_Backtrace@@GCC_3.3+0x1088>  // b.none
    f5f8:	bl	2c50 <abort@plt>
    f5fc:	ldr	x1, [x19, #8]
    f600:	b	f520 <_Unwind_Backtrace@@GCC_3.3+0xfc0>
    f604:	ldp	x25, x26, [sp, #64]
    f608:	b	f410 <_Unwind_Backtrace@@GCC_3.3+0xeb0>
    f60c:	ldp	x23, x24, [sp, #48]
    f610:	ldp	x25, x26, [sp, #64]
    f614:	ldp	x27, x28, [sp, #80]
    f618:	b	f410 <_Unwind_Backtrace@@GCC_3.3+0xeb0>
    f61c:	stp	x23, x24, [sp, #48]
    f620:	ubfx	x22, x22, #3, #8
    f624:	cmp	w22, #0xff
    f628:	b.eq	f9a8 <_Unwind_Backtrace@@GCC_3.3+0x1448>  // b.none
    f62c:	and	w0, w22, #0x70
    f630:	cmp	w0, #0x20
    f634:	b.eq	fa18 <_Unwind_Backtrace@@GCC_3.3+0x14b8>  // b.none
    f638:	b.ls	f9a0 <_Unwind_Backtrace@@GCC_3.3+0x1440>  // b.plast
    f63c:	cmp	w0, #0x30
    f640:	b.ne	f98c <_Unwind_Backtrace@@GCC_3.3+0x142c>  // b.any
    f644:	ldr	x24, [x19, #16]
    f648:	ldr	x27, [x28, #8]
    f64c:	cbz	x27, fa40 <_Unwind_Backtrace@@GCC_3.3+0x14e0>
    f650:	and	w0, w22, #0xf
    f654:	add	x23, sp, #0x90
    f658:	stp	x25, x26, [sp, #64]
    f65c:	add	x25, sp, #0x88
    f660:	mov	x26, #0x0                   	// #0
    f664:	str	w0, [sp, #96]
    f668:	b	f688 <_Unwind_Backtrace@@GCC_3.3+0x1128>
    f66c:	ldr	x1, [sp, #144]
    f670:	add	x0, x0, x1
    f674:	cmp	x0, x20
    f678:	b.hi	f9cc <_Unwind_Backtrace@@GCC_3.3+0x146c>  // b.pmore
    f67c:	add	x26, x19, #0x1
    f680:	cmp	x26, x27
    f684:	b.cs	f60c <_Unwind_Backtrace@@GCC_3.3+0x10ac>  // b.hs, b.nlast
    f688:	add	x19, x27, x26
    f68c:	mov	x3, x25
    f690:	mov	x1, x24
    f694:	mov	w0, w22
    f698:	lsr	x19, x19, #1
    f69c:	add	x2, x19, #0x2
    f6a0:	ldr	x21, [x28, x2, lsl #3]
    f6a4:	add	x2, x21, #0x8
    f6a8:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    f6ac:	mov	x2, x0
    f6b0:	ldrb	w0, [sp, #96]
    f6b4:	mov	x3, x23
    f6b8:	mov	x1, #0x0                   	// #0
    f6bc:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    f6c0:	ldr	x0, [sp, #136]
    f6c4:	cmp	x0, x20
    f6c8:	b.ls	f66c <_Unwind_Backtrace@@GCC_3.3+0x110c>  // b.plast
    f6cc:	mov	x27, x19
    f6d0:	b	f680 <_Unwind_Backtrace@@GCC_3.3+0x1120>
    f6d4:	add	x21, x26, #0x2
    f6d8:	lsl	x21, x21, #3
    f6dc:	mov	x0, x21
    f6e0:	bl	2b70 <malloc@plt>
    f6e4:	str	x0, [sp, #144]
    f6e8:	mov	x1, x0
    f6ec:	cbz	x0, f584 <_Unwind_Backtrace@@GCC_3.3+0x1024>
    f6f0:	stp	x23, x24, [sp, #48]
    f6f4:	mov	x0, x21
    f6f8:	str	xzr, [x1, #8]
    f6fc:	bl	2b70 <malloc@plt>
    f700:	str	x0, [sp, #152]
    f704:	cbz	x0, f70c <_Unwind_Backtrace@@GCC_3.3+0x11ac>
    f708:	str	xzr, [x0, #8]
    f70c:	ldrb	w0, [x19, #32]
    f710:	ldr	x21, [x19, #24]
    f714:	tbz	w0, #1, f9e8 <_Unwind_Backtrace@@GCC_3.3+0x1488>
    f718:	ldr	x2, [x21]
    f71c:	cbz	x2, fa4c <_Unwind_Backtrace@@GCC_3.3+0x14ec>
    f720:	add	x23, sp, #0x90
    f724:	nop
    f728:	mov	x1, x23
    f72c:	mov	x0, x19
    f730:	bl	ebc8 <_Unwind_Backtrace@@GCC_3.3+0x668>
    f734:	ldr	x2, [x21, #8]!
    f738:	cbnz	x2, f728 <_Unwind_Backtrace@@GCC_3.3+0x11c8>
    f73c:	ldr	x2, [sp, #144]
    f740:	str	x2, [sp, #112]
    f744:	cbz	x2, f754 <_Unwind_Backtrace@@GCC_3.3+0x11f4>
    f748:	ldr	x0, [x2, #8]
    f74c:	cmp	x26, x0
    f750:	b.ne	fa4c <_Unwind_Backtrace@@GCC_3.3+0x14ec>  // b.any
    f754:	ldrb	w0, [x19, #32]
    f758:	tbnz	w0, #2, f9dc <_Unwind_Backtrace@@GCC_3.3+0x147c>
    f75c:	ldrh	w1, [x19, #32]
    f760:	adrp	x0, f000 <_Unwind_Backtrace@@GCC_3.3+0xaa0>
    f764:	adrp	x21, e000 <_Unwind_RaiseException@@GCC_3.0>
    f768:	add	x0, x0, #0xa60
    f76c:	tst	w1, #0x7f8
    f770:	add	x21, x21, #0x6d0
    f774:	csel	x21, x21, x0, eq  // eq = none
    f778:	ldr	x24, [sp, #152]
    f77c:	str	x24, [sp, #120]
    f780:	cbz	x24, f9fc <_Unwind_Backtrace@@GCC_3.3+0x149c>
    f784:	ldr	x0, [x2, #8]
    f788:	stp	x27, x28, [sp, #80]
    f78c:	str	x0, [sp, #96]
    f790:	cbz	x0, f878 <_Unwind_Backtrace@@GCC_3.3+0x1318>
    f794:	adrp	x23, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
    f798:	add	x23, x23, #0x240
    f79c:	str	x23, [x24, #16]
    f7a0:	cmp	x0, #0x1
    f7a4:	add	x25, x2, #0x10
    f7a8:	b.ls	f818 <_Unwind_Backtrace@@GCC_3.3+0x12b8>  // b.plast
    f7ac:	add	x0, x0, #0x2
    f7b0:	mov	x22, x25
    f7b4:	mov	x27, #0x18                  	// #24
    f7b8:	lsl	x0, x0, #3
    f7bc:	str	x0, [sp, #104]
    f7c0:	cmp	x22, x23
    f7c4:	mov	x28, x22
    f7c8:	b.ne	f7e8 <_Unwind_Backtrace@@GCC_3.3+0x1288>  // b.any
    f7cc:	b	f870 <_Unwind_Backtrace@@GCC_3.3+0x1310>
    f7d0:	sub	x3, x28, x25
    f7d4:	add	x0, x24, x3
    f7d8:	ldr	x28, [x0, #16]
    f7dc:	str	xzr, [x0, #16]
    f7e0:	cmp	x28, x23
    f7e4:	b.eq	f870 <_Unwind_Backtrace@@GCC_3.3+0x1310>  // b.none
    f7e8:	ldr	x2, [x28]
    f7ec:	mov	x0, x19
    f7f0:	ldr	x1, [x22, #8]
    f7f4:	blr	x21
    f7f8:	tbnz	w0, #31, f7d0 <_Unwind_Backtrace@@GCC_3.3+0x1270>
    f7fc:	ldr	x0, [sp, #104]
    f800:	str	x28, [x24, x27]
    f804:	add	x27, x27, #0x8
    f808:	add	x22, x22, #0x8
    f80c:	cmp	x0, x27
    f810:	b.ne	f7c0 <_Unwind_Backtrace@@GCC_3.3+0x1260>  // b.any
    f814:	ldp	x2, x24, [sp, #144]
    f818:	mov	x5, #0x0                   	// #0
    f81c:	ldr	x0, [sp, #120]
    f820:	mov	x3, #0x0                   	// #0
    f824:	add	x6, x0, #0x10
    f828:	mov	x0, #0x0                   	// #0
    f82c:	b	f850 <_Unwind_Backtrace@@GCC_3.3+0x12f0>
    f830:	ldr	x7, [sp, #112]
    f834:	add	x1, x3, #0x2
    f838:	add	x3, x3, #0x1
    f83c:	str	x4, [x7, x1, lsl #3]
    f840:	ldr	x1, [sp, #96]
    f844:	add	x0, x0, #0x1
    f848:	cmp	x1, x0
    f84c:	b.eq	f880 <_Unwind_Backtrace@@GCC_3.3+0x1320>  // b.none
    f850:	ldr	x1, [x6, x0, lsl #3]
    f854:	ldr	x4, [x25, x0, lsl #3]
    f858:	cbnz	x1, f830 <_Unwind_Backtrace@@GCC_3.3+0x12d0>
    f85c:	ldr	x7, [sp, #120]
    f860:	add	x1, x5, #0x2
    f864:	add	x5, x5, #0x1
    f868:	str	x4, [x7, x1, lsl #3]
    f86c:	b	f840 <_Unwind_Backtrace@@GCC_3.3+0x12e0>
    f870:	mov	x28, x23
    f874:	b	f7fc <_Unwind_Backtrace@@GCC_3.3+0x129c>
    f878:	mov	x5, #0x0                   	// #0
    f87c:	mov	x3, #0x0                   	// #0
    f880:	ldr	x0, [sp, #112]
    f884:	str	x3, [x0, #8]
    f888:	ldr	x0, [sp, #120]
    f88c:	str	x5, [x0, #8]
    f890:	ldr	x0, [x2, #8]
    f894:	ldr	x1, [x24, #8]
    f898:	add	x0, x0, x1
    f89c:	cmp	x0, x26
    f8a0:	b.ne	f5f8 <_Unwind_Backtrace@@GCC_3.3+0x1098>  // b.any
    f8a4:	mov	x2, x24
    f8a8:	mov	x1, x21
    f8ac:	mov	x0, x19
    f8b0:	bl	e968 <_Unwind_Backtrace@@GCC_3.3+0x408>
    f8b4:	ldr	x25, [sp, #152]
    f8b8:	ldr	x23, [x25, #8]
    f8bc:	cbz	x23, f95c <_Unwind_Backtrace@@GCC_3.3+0x13fc>
    f8c0:	ldr	x0, [sp, #144]
    f8c4:	str	x0, [sp, #96]
    f8c8:	add	x28, x0, #0x10
    f8cc:	ldr	x26, [x0, #8]
    f8d0:	add	x0, x25, x23, lsl #3
    f8d4:	sub	x24, x23, #0x1
    f8d8:	ldr	x27, [x0, #8]
    f8dc:	cbz	x26, fa20 <_Unwind_Backtrace@@GCC_3.3+0x14c0>
    f8e0:	add	x23, x23, x26
    f8e4:	mov	x22, x26
    f8e8:	sub	x23, x23, #0x1
    f8ec:	b	f900 <_Unwind_Backtrace@@GCC_3.3+0x13a0>
    f8f0:	ldr	x0, [x28, x22, lsl #3]
    f8f4:	str	x0, [x28, x23, lsl #3]
    f8f8:	sub	x23, x23, #0x1
    f8fc:	cbz	x22, f938 <_Unwind_Backtrace@@GCC_3.3+0x13d8>
    f900:	mov	x26, x22
    f904:	sub	x22, x22, #0x1
    f908:	mov	x2, x27
    f90c:	mov	x0, x19
    f910:	ldr	x1, [x28, x22, lsl #3]
    f914:	blr	x21
    f918:	cmp	w0, #0x0
    f91c:	b.gt	f8f0 <_Unwind_Backtrace@@GCC_3.3+0x1390>
    f920:	ldr	x0, [sp, #96]
    f924:	add	x23, x23, #0x2
    f928:	str	x27, [x0, x23, lsl #3]
    f92c:	cbz	x24, f944 <_Unwind_Backtrace@@GCC_3.3+0x13e4>
    f930:	mov	x23, x24
    f934:	b	f8d0 <_Unwind_Backtrace@@GCC_3.3+0x1370>
    f938:	mov	x23, x24
    f93c:	mov	x26, #0x0                   	// #0
    f940:	b	f920 <_Unwind_Backtrace@@GCC_3.3+0x13c0>
    f944:	mov	x2, x0
    f948:	ldr	x1, [x25, #8]
    f94c:	ldr	x0, [x2, #8]
    f950:	ldr	x25, [sp, #152]
    f954:	add	x0, x0, x1
    f958:	str	x0, [x2, #8]
    f95c:	mov	x0, x25
    f960:	bl	2cc0 <free@plt>
    f964:	ldp	x27, x28, [sp, #80]
    f968:	ldr	x1, [sp, #144]
    f96c:	ldrb	w0, [x19, #32]
    f970:	ldr	x2, [x19, #24]
    f974:	orr	w0, w0, #0x1
    f978:	ldp	x23, x24, [sp, #48]
    f97c:	str	x2, [x1]
    f980:	str	x1, [x19, #24]
    f984:	strb	w0, [x19, #32]
    f988:	b	f584 <_Unwind_Backtrace@@GCC_3.3+0x1024>
    f98c:	cmp	w0, #0x50
    f990:	mov	x24, #0x0                   	// #0
    f994:	b.eq	f648 <_Unwind_Backtrace@@GCC_3.3+0x10e8>  // b.none
    f998:	stp	x25, x26, [sp, #64]
    f99c:	bl	2c50 <abort@plt>
    f9a0:	tst	w22, #0x60
    f9a4:	b.ne	f998 <_Unwind_Backtrace@@GCC_3.3+0x1438>  // b.any
    f9a8:	mov	x24, #0x0                   	// #0
    f9ac:	b	f648 <_Unwind_Backtrace@@GCC_3.3+0x10e8>
    f9b0:	mov	x2, x20
    f9b4:	mov	x1, x22
    f9b8:	mov	x0, x19
    f9bc:	bl	ee10 <_Unwind_Backtrace@@GCC_3.3+0x8b0>
    f9c0:	mov	x21, x0
    f9c4:	ldp	x25, x26, [sp, #64]
    f9c8:	b	f414 <_Unwind_Backtrace@@GCC_3.3+0xeb4>
    f9cc:	ldp	x23, x24, [sp, #48]
    f9d0:	ldp	x25, x26, [sp, #64]
    f9d4:	ldp	x27, x28, [sp, #80]
    f9d8:	b	f414 <_Unwind_Backtrace@@GCC_3.3+0xeb4>
    f9dc:	adrp	x21, f000 <_Unwind_Backtrace@@GCC_3.3+0xaa0>
    f9e0:	add	x21, x21, #0xd78
    f9e4:	b	f778 <_Unwind_Backtrace@@GCC_3.3+0x1218>
    f9e8:	mov	x2, x21
    f9ec:	add	x1, sp, #0x90
    f9f0:	mov	x0, x19
    f9f4:	bl	ebc8 <_Unwind_Backtrace@@GCC_3.3+0x668>
    f9f8:	b	f73c <_Unwind_Backtrace@@GCC_3.3+0x11dc>
    f9fc:	mov	x1, x21
    fa00:	mov	x0, x19
    fa04:	bl	e968 <_Unwind_Backtrace@@GCC_3.3+0x408>
    fa08:	b	f968 <_Unwind_Backtrace@@GCC_3.3+0x1408>
    fa0c:	bfi	w0, w26, #11, #21
    fa10:	str	w0, [x19, #32]
    fa14:	b	f580 <_Unwind_Backtrace@@GCC_3.3+0x1020>
    fa18:	ldr	x24, [x19, #8]
    fa1c:	b	f648 <_Unwind_Backtrace@@GCC_3.3+0x10e8>
    fa20:	ldr	x2, [sp, #96]
    fa24:	add	x1, x23, #0x1
    fa28:	str	x27, [x2, x1, lsl #3]
    fa2c:	cbz	x24, f948 <_Unwind_Backtrace@@GCC_3.3+0x13e8>
    fa30:	sub	x24, x23, #0x2
    fa34:	mov	x23, x24
    fa38:	ldr	x27, [x0]
    fa3c:	b	f920 <_Unwind_Backtrace@@GCC_3.3+0x13c0>
    fa40:	ldp	x23, x24, [sp, #48]
    fa44:	ldp	x27, x28, [sp, #80]
    fa48:	b	f410 <_Unwind_Backtrace@@GCC_3.3+0xeb0>
    fa4c:	stp	x27, x28, [sp, #80]
    fa50:	bl	2c50 <abort@plt>
    fa54:	ldp	x25, x26, [sp, #64]
    fa58:	b	f3c0 <_Unwind_Backtrace@@GCC_3.3+0xe60>
    fa5c:	nop
    fa60:	ldrh	w4, [x0, #32]
    fa64:	ubfx	x3, x4, #3, #8
    fa68:	cmp	w3, #0xff
    fa6c:	b.eq	fb98 <_Unwind_Backtrace@@GCC_3.3+0x1638>  // b.none
    fa70:	and	w4, w3, #0x70
    fa74:	mov	x6, x3
    fa78:	cmp	w4, #0x20
    fa7c:	b.eq	fcd4 <_Unwind_Backtrace@@GCC_3.3+0x1774>  // b.none
    fa80:	b.ls	fbe4 <_Unwind_Backtrace@@GCC_3.3+0x1684>  // b.plast
    fa84:	cmp	w4, #0x30
    fa88:	b.ne	fbc8 <_Unwind_Backtrace@@GCC_3.3+0x1668>  // b.any
    fa8c:	ldr	x5, [x0, #16]
    fa90:	cmp	w3, #0x50
    fa94:	add	x8, x1, #0x8
    fa98:	b.eq	fbf4 <_Unwind_Backtrace@@GCC_3.3+0x1694>  // b.none
    fa9c:	nop
    faa0:	and	w0, w3, #0xf
    faa4:	cmp	w0, #0x4
    faa8:	b.eq	fac4 <_Unwind_Backtrace@@GCC_3.3+0x1564>  // b.none
    faac:	b.ls	fb00 <_Unwind_Backtrace@@GCC_3.3+0x15a0>  // b.plast
    fab0:	cmp	w0, #0xb
    fab4:	b.eq	fd38 <_Unwind_Backtrace@@GCC_3.3+0x17d8>  // b.none
    fab8:	b.ls	fba4 <_Unwind_Backtrace@@GCC_3.3+0x1644>  // b.plast
    fabc:	cmp	w0, #0xc
    fac0:	b.ne	fb98 <_Unwind_Backtrace@@GCC_3.3+0x1638>  // b.any
    fac4:	ldr	x1, [x1, #8]
    fac8:	add	x10, x2, #0x8
    facc:	cbnz	x1, fb60 <_Unwind_Backtrace@@GCC_3.3+0x1600>
    fad0:	ldr	x2, [x2, #8]
    fad4:	cbz	x2, fc0c <_Unwind_Backtrace@@GCC_3.3+0x16ac>
    fad8:	cmp	w4, #0x10
    fadc:	csel	x5, x10, x5, eq  // eq = none
    fae0:	add	x2, x2, x5
    fae4:	tbz	w6, #7, fc0c <_Unwind_Backtrace@@GCC_3.3+0x16ac>
    fae8:	ldr	x2, [x2]
    faec:	cmp	x2, x1
    faf0:	mov	w1, #0x1                   	// #1
    faf4:	csetm	w0, hi  // hi = pmore
    faf8:	csel	w0, w0, w1, cs  // cs = hs, nlast
    fafc:	ret
    fb00:	cmp	w0, #0x2
    fb04:	b.eq	fd50 <_Unwind_Backtrace@@GCC_3.3+0x17f0>  // b.none
    fb08:	b.ls	fb28 <_Unwind_Backtrace@@GCC_3.3+0x15c8>  // b.plast
    fb0c:	cmp	w0, #0x3
    fb10:	b.ne	fb98 <_Unwind_Backtrace@@GCC_3.3+0x1638>  // b.any
    fb14:	ldr	w1, [x1, #8]
    fb18:	add	x10, x2, #0x8
    fb1c:	cbnz	x1, fb60 <_Unwind_Backtrace@@GCC_3.3+0x1600>
    fb20:	ldr	w2, [x2, #8]
    fb24:	b	fad4 <_Unwind_Backtrace@@GCC_3.3+0x1574>
    fb28:	cbz	w0, fd20 <_Unwind_Backtrace@@GCC_3.3+0x17c0>
    fb2c:	cmp	w0, #0x1
    fb30:	b.ne	fb98 <_Unwind_Backtrace@@GCC_3.3+0x1638>  // b.any
    fb34:	mov	x10, x8
    fb38:	mov	x1, #0x0                   	// #0
    fb3c:	mov	w7, #0x0                   	// #0
    fb40:	ldrb	w9, [x10], #1
    fb44:	and	x3, x9, #0x7f
    fb48:	lsl	x3, x3, x7
    fb4c:	add	w7, w7, #0x7
    fb50:	orr	x1, x1, x3
    fb54:	tbnz	w9, #7, fb40 <_Unwind_Backtrace@@GCC_3.3+0x15e0>
    fb58:	add	x10, x2, #0x8
    fb5c:	cbz	x1, fc48 <_Unwind_Backtrace@@GCC_3.3+0x16e8>
    fb60:	cmp	w4, #0x10
    fb64:	csel	x8, x8, x5, eq  // eq = none
    fb68:	add	x1, x1, x8
    fb6c:	tbnz	w6, #7, fd64 <_Unwind_Backtrace@@GCC_3.3+0x1804>
    fb70:	cmp	w0, #0x4
    fb74:	b.eq	fad0 <_Unwind_Backtrace@@GCC_3.3+0x1570>  // b.none
    fb78:	b.ls	fc20 <_Unwind_Backtrace@@GCC_3.3+0x16c0>  // b.plast
    fb7c:	cmp	w0, #0xa
    fb80:	b.eq	fbc0 <_Unwind_Backtrace@@GCC_3.3+0x1660>  // b.none
    fb84:	b.ls	fc8c <_Unwind_Backtrace@@GCC_3.3+0x172c>  // b.plast
    fb88:	cmp	w0, #0xb
    fb8c:	b.eq	fd48 <_Unwind_Backtrace@@GCC_3.3+0x17e8>  // b.none
    fb90:	cmp	w0, #0xc
    fb94:	b.eq	fad0 <_Unwind_Backtrace@@GCC_3.3+0x1570>  // b.none
    fb98:	stp	x29, x30, [sp, #-16]!
    fb9c:	mov	x29, sp
    fba0:	bl	2c50 <abort@plt>
    fba4:	cmp	w0, #0x9
    fba8:	b.eq	fcdc <_Unwind_Backtrace@@GCC_3.3+0x177c>  // b.none
    fbac:	cmp	w0, #0xa
    fbb0:	b.ne	fb98 <_Unwind_Backtrace@@GCC_3.3+0x1638>  // b.any
    fbb4:	ldrsh	x1, [x1, #8]
    fbb8:	add	x10, x2, #0x8
    fbbc:	cbnz	x1, fb60 <_Unwind_Backtrace@@GCC_3.3+0x1600>
    fbc0:	ldrsh	x2, [x2, #8]
    fbc4:	b	fad4 <_Unwind_Backtrace@@GCC_3.3+0x1574>
    fbc8:	cmp	w4, #0x50
    fbcc:	mov	x5, #0x0                   	// #0
    fbd0:	b.ne	fb98 <_Unwind_Backtrace@@GCC_3.3+0x1638>  // b.any
    fbd4:	cmp	w3, #0x50
    fbd8:	add	x8, x1, #0x8
    fbdc:	b.ne	faa0 <_Unwind_Backtrace@@GCC_3.3+0x1540>  // b.any
    fbe0:	b	fbf4 <_Unwind_Backtrace@@GCC_3.3+0x1694>
    fbe4:	tst	w3, #0x60
    fbe8:	b.ne	fb98 <_Unwind_Backtrace@@GCC_3.3+0x1638>  // b.any
    fbec:	mov	x5, #0x0                   	// #0
    fbf0:	b	fa90 <_Unwind_Backtrace@@GCC_3.3+0x1530>
    fbf4:	add	x1, x1, #0xf
    fbf8:	add	x2, x2, #0xf
    fbfc:	and	x1, x1, #0xfffffffffffffff8
    fc00:	and	x2, x2, #0xfffffffffffffff8
    fc04:	ldr	x1, [x1]
    fc08:	ldr	x2, [x2]
    fc0c:	cmp	x2, x1
    fc10:	csetm	w0, hi  // hi = pmore
    fc14:	mov	w1, #0x1                   	// #1
    fc18:	csel	w0, w0, w1, cs  // cs = hs, nlast
    fc1c:	ret
    fc20:	cmp	w0, #0x2
    fc24:	b.eq	fd5c <_Unwind_Backtrace@@GCC_3.3+0x17fc>  // b.none
    fc28:	b.ls	fc3c <_Unwind_Backtrace@@GCC_3.3+0x16dc>  // b.plast
    fc2c:	cmp	w0, #0x3
    fc30:	b.ne	fb98 <_Unwind_Backtrace@@GCC_3.3+0x1638>  // b.any
    fc34:	ldr	w2, [x2, #8]
    fc38:	b	fad4 <_Unwind_Backtrace@@GCC_3.3+0x1574>
    fc3c:	cbz	w0, fad0 <_Unwind_Backtrace@@GCC_3.3+0x1570>
    fc40:	cmp	w0, #0x1
    fc44:	b.ne	fb98 <_Unwind_Backtrace@@GCC_3.3+0x1638>  // b.any
    fc48:	mov	x8, x10
    fc4c:	mov	x2, #0x0                   	// #0
    fc50:	mov	w3, #0x0                   	// #0
    fc54:	nop
    fc58:	ldrb	w7, [x8], #1
    fc5c:	and	x0, x7, #0x7f
    fc60:	lsl	x0, x0, x3
    fc64:	add	w3, w3, #0x7
    fc68:	orr	x2, x2, x0
    fc6c:	tbz	w7, #7, fad4 <_Unwind_Backtrace@@GCC_3.3+0x1574>
    fc70:	ldrb	w7, [x8], #1
    fc74:	and	x0, x7, #0x7f
    fc78:	lsl	x0, x0, x3
    fc7c:	add	w3, w3, #0x7
    fc80:	orr	x2, x2, x0
    fc84:	tbnz	w7, #7, fc58 <_Unwind_Backtrace@@GCC_3.3+0x16f8>
    fc88:	b	fad4 <_Unwind_Backtrace@@GCC_3.3+0x1574>
    fc8c:	cmp	w0, #0x9
    fc90:	b.ne	fb98 <_Unwind_Backtrace@@GCC_3.3+0x1638>  // b.any
    fc94:	mov	x8, x10
    fc98:	mov	x2, #0x0                   	// #0
    fc9c:	mov	w3, #0x0                   	// #0
    fca0:	ldrb	w7, [x8], #1
    fca4:	and	x0, x7, #0x7f
    fca8:	lsl	x0, x0, x3
    fcac:	add	w3, w3, #0x7
    fcb0:	orr	x2, x2, x0
    fcb4:	tbnz	w7, #7, fca0 <_Unwind_Backtrace@@GCC_3.3+0x1740>
    fcb8:	cmp	w3, #0x3f
    fcbc:	b.hi	fad4 <_Unwind_Backtrace@@GCC_3.3+0x1574>  // b.pmore
    fcc0:	tbz	w7, #6, fad4 <_Unwind_Backtrace@@GCC_3.3+0x1574>
    fcc4:	mov	x0, #0xffffffffffffffff    	// #-1
    fcc8:	lsl	x3, x0, x3
    fccc:	orr	x2, x2, x3
    fcd0:	b	fad8 <_Unwind_Backtrace@@GCC_3.3+0x1578>
    fcd4:	ldr	x5, [x0, #8]
    fcd8:	b	fa90 <_Unwind_Backtrace@@GCC_3.3+0x1530>
    fcdc:	mov	x10, x8
    fce0:	mov	x1, #0x0                   	// #0
    fce4:	mov	w7, #0x0                   	// #0
    fce8:	ldrb	w9, [x10], #1
    fcec:	and	x3, x9, #0x7f
    fcf0:	lsl	x3, x3, x7
    fcf4:	add	w7, w7, #0x7
    fcf8:	orr	x1, x1, x3
    fcfc:	tbnz	w9, #7, fce8 <_Unwind_Backtrace@@GCC_3.3+0x1788>
    fd00:	cmp	w7, #0x3f
    fd04:	add	x10, x2, #0x8
    fd08:	b.hi	fd6c <_Unwind_Backtrace@@GCC_3.3+0x180c>  // b.pmore
    fd0c:	tbz	w9, #6, fd6c <_Unwind_Backtrace@@GCC_3.3+0x180c>
    fd10:	mov	x3, #0xffffffffffffffff    	// #-1
    fd14:	lsl	x7, x3, x7
    fd18:	orr	x1, x1, x7
    fd1c:	b	fb60 <_Unwind_Backtrace@@GCC_3.3+0x1600>
    fd20:	ldr	x3, [x1, #8]
    fd24:	add	x10, x2, #0x8
    fd28:	mov	x1, #0x0                   	// #0
    fd2c:	cbz	x3, fad0 <_Unwind_Backtrace@@GCC_3.3+0x1570>
    fd30:	mov	x1, x3
    fd34:	b	fb60 <_Unwind_Backtrace@@GCC_3.3+0x1600>
    fd38:	ldrsw	x1, [x1, #8]
    fd3c:	add	x10, x2, #0x8
    fd40:	cbnz	x1, fb60 <_Unwind_Backtrace@@GCC_3.3+0x1600>
    fd44:	nop
    fd48:	ldrsw	x2, [x2, #8]
    fd4c:	b	fad4 <_Unwind_Backtrace@@GCC_3.3+0x1574>
    fd50:	ldrh	w1, [x1, #8]
    fd54:	add	x10, x2, #0x8
    fd58:	cbnz	x1, fb60 <_Unwind_Backtrace@@GCC_3.3+0x1600>
    fd5c:	ldrh	w2, [x2, #8]
    fd60:	b	fad4 <_Unwind_Backtrace@@GCC_3.3+0x1574>
    fd64:	ldr	x1, [x1]
    fd68:	b	fb70 <_Unwind_Backtrace@@GCC_3.3+0x1610>
    fd6c:	cbz	x1, fc94 <_Unwind_Backtrace@@GCC_3.3+0x1734>
    fd70:	b	fb60 <_Unwind_Backtrace@@GCC_3.3+0x1600>
    fd74:	nop
    fd78:	stp	x29, x30, [sp, #-64]!
    fd7c:	mov	x29, sp
    fd80:	stp	x19, x20, [sp, #16]
    fd84:	mov	x19, x1
    fd88:	add	x1, x1, #0x4
    fd8c:	str	x21, [sp, #32]
    fd90:	mov	x21, x0
    fd94:	ldrsw	x0, [x19, #4]
    fd98:	mov	x20, x2
    fd9c:	sub	x0, x1, x0
    fda0:	bl	e850 <_Unwind_Backtrace@@GCC_3.3+0x2f0>
    fda4:	and	w3, w0, #0xff
    fda8:	cmp	w3, #0xff
    fdac:	b.eq	fee8 <_Unwind_Backtrace@@GCC_3.3+0x1988>  // b.none
    fdb0:	and	w4, w3, #0x70
    fdb4:	mov	w2, w0
    fdb8:	cmp	w4, #0x20
    fdbc:	b.eq	1001c <_Unwind_Backtrace@@GCC_3.3+0x1abc>  // b.none
    fdc0:	b.ls	feec <_Unwind_Backtrace@@GCC_3.3+0x198c>  // b.plast
    fdc4:	cmp	w4, #0x30
    fdc8:	b.ne	fedc <_Unwind_Backtrace@@GCC_3.3+0x197c>  // b.any
    fdcc:	ldr	x5, [x21, #16]
    fdd0:	cmp	w3, #0x50
    fdd4:	add	x6, x19, #0x8
    fdd8:	b.eq	ff04 <_Unwind_Backtrace@@GCC_3.3+0x19a4>  // b.none
    fddc:	nop
    fde0:	and	w3, w3, #0xf
    fde4:	cmp	w3, #0x4
    fde8:	b.eq	fe04 <_Unwind_Backtrace@@GCC_3.3+0x18a4>  // b.none
    fdec:	b.ls	fe44 <_Unwind_Backtrace@@GCC_3.3+0x18e4>  // b.plast
    fdf0:	cmp	w3, #0xb
    fdf4:	b.eq	10048 <_Unwind_Backtrace@@GCC_3.3+0x1ae8>  // b.none
    fdf8:	b.ls	feb4 <_Unwind_Backtrace@@GCC_3.3+0x1954>  // b.plast
    fdfc:	cmp	w3, #0xc
    fe00:	b.ne	fee8 <_Unwind_Backtrace@@GCC_3.3+0x1988>  // b.any
    fe04:	ldrsw	x0, [x20, #4]
    fe08:	add	x1, x20, #0x4
    fe0c:	ldr	x19, [x19, #8]
    fe10:	sub	x0, x1, x0
    fe14:	cbnz	x19, ffc8 <_Unwind_Backtrace@@GCC_3.3+0x1a68>
    fe18:	bl	e850 <_Unwind_Backtrace@@GCC_3.3+0x2f0>
    fe1c:	and	w0, w0, #0xff
    fe20:	cmp	w0, #0xff
    fe24:	b.ne	ff2c <_Unwind_Backtrace@@GCC_3.3+0x19cc>  // b.any
    fe28:	mov	x1, #0x0                   	// #0
    fe2c:	add	x2, x20, #0x8
    fe30:	add	x3, sp, #0x38
    fe34:	mov	w0, #0xffffffff            	// #-1
    fe38:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    fe3c:	ldr	x1, [sp, #56]
    fe40:	b	ff64 <_Unwind_Backtrace@@GCC_3.3+0x1a04>
    fe44:	cmp	w3, #0x2
    fe48:	b.eq	10030 <_Unwind_Backtrace@@GCC_3.3+0x1ad0>  // b.none
    fe4c:	b.ls	fe70 <_Unwind_Backtrace@@GCC_3.3+0x1910>  // b.plast
    fe50:	cmp	w3, #0x3
    fe54:	b.ne	fee8 <_Unwind_Backtrace@@GCC_3.3+0x1988>  // b.any
    fe58:	ldr	w19, [x19, #8]
    fe5c:	add	x1, x20, #0x4
    fe60:	ldrsw	x0, [x20, #4]
    fe64:	sub	x0, x1, x0
    fe68:	cbz	x19, fe18 <_Unwind_Backtrace@@GCC_3.3+0x18b8>
    fe6c:	b	ffc8 <_Unwind_Backtrace@@GCC_3.3+0x1a68>
    fe70:	cbz	w3, fe04 <_Unwind_Backtrace@@GCC_3.3+0x18a4>
    fe74:	cmp	w3, #0x1
    fe78:	b.ne	fee8 <_Unwind_Backtrace@@GCC_3.3+0x1988>  // b.any
    fe7c:	mov	x7, x6
    fe80:	mov	x19, #0x0                   	// #0
    fe84:	mov	w1, #0x0                   	// #0
    fe88:	ldrb	w3, [x7], #1
    fe8c:	and	x0, x3, #0x7f
    fe90:	lsl	x0, x0, x1
    fe94:	add	w1, w1, #0x7
    fe98:	orr	x19, x19, x0
    fe9c:	tbnz	w3, #7, fe88 <_Unwind_Backtrace@@GCC_3.3+0x1928>
    fea0:	ldrsw	x0, [x20, #4]
    fea4:	add	x1, x20, #0x4
    fea8:	sub	x0, x1, x0
    feac:	cbz	x19, fe18 <_Unwind_Backtrace@@GCC_3.3+0x18b8>
    feb0:	b	ffc8 <_Unwind_Backtrace@@GCC_3.3+0x1a68>
    feb4:	cmp	w3, #0x9
    feb8:	b.eq	ff7c <_Unwind_Backtrace@@GCC_3.3+0x1a1c>  // b.none
    febc:	cmp	w3, #0xa
    fec0:	b.ne	fee8 <_Unwind_Backtrace@@GCC_3.3+0x1988>  // b.any
    fec4:	ldrsh	x19, [x19, #8]
    fec8:	add	x1, x20, #0x4
    fecc:	ldrsw	x0, [x20, #4]
    fed0:	sub	x0, x1, x0
    fed4:	cbz	x19, fe18 <_Unwind_Backtrace@@GCC_3.3+0x18b8>
    fed8:	b	ffc8 <_Unwind_Backtrace@@GCC_3.3+0x1a68>
    fedc:	cmp	w4, #0x50
    fee0:	mov	x5, #0x0                   	// #0
    fee4:	b.eq	fdd0 <_Unwind_Backtrace@@GCC_3.3+0x1870>  // b.none
    fee8:	bl	2c50 <abort@plt>
    feec:	tst	w3, #0x60
    fef0:	b.ne	fee8 <_Unwind_Backtrace@@GCC_3.3+0x1988>  // b.any
    fef4:	cmp	w3, #0x50
    fef8:	add	x6, x19, #0x8
    fefc:	mov	x5, #0x0                   	// #0
    ff00:	b.ne	fde0 <_Unwind_Backtrace@@GCC_3.3+0x1880>  // b.any
    ff04:	add	x19, x19, #0xf
    ff08:	ldrsw	x1, [x20, #4]
    ff0c:	and	x19, x19, #0xfffffffffffffff8
    ff10:	add	x0, x20, #0x4
    ff14:	sub	x0, x0, x1
    ff18:	ldr	x19, [x19]
    ff1c:	bl	e850 <_Unwind_Backtrace@@GCC_3.3+0x2f0>
    ff20:	and	w0, w0, #0xff
    ff24:	cmp	w0, #0xff
    ff28:	b.eq	fff0 <_Unwind_Backtrace@@GCC_3.3+0x1a90>  // b.none
    ff2c:	and	w1, w0, #0x70
    ff30:	cmp	w1, #0x20
    ff34:	b.eq	10014 <_Unwind_Backtrace@@GCC_3.3+0x1ab4>  // b.none
    ff38:	b.ls	10008 <_Unwind_Backtrace@@GCC_3.3+0x1aa8>  // b.plast
    ff3c:	cmp	w1, #0x30
    ff40:	b.ne	fff8 <_Unwind_Backtrace@@GCC_3.3+0x1a98>  // b.any
    ff44:	ldr	x1, [x21, #16]
    ff48:	add	x2, x20, #0x8
    ff4c:	add	x3, sp, #0x38
    ff50:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
    ff54:	ldr	x1, [sp, #56]
    ff58:	mov	w0, #0x1                   	// #1
    ff5c:	cmp	x1, x19
    ff60:	b.cc	ff6c <_Unwind_Backtrace@@GCC_3.3+0x1a0c>  // b.lo, b.ul, b.last
    ff64:	cmp	x1, x19
    ff68:	csetm	w0, hi  // hi = pmore
    ff6c:	ldp	x19, x20, [sp, #16]
    ff70:	ldr	x21, [sp, #32]
    ff74:	ldp	x29, x30, [sp], #64
    ff78:	ret
    ff7c:	mov	x1, x6
    ff80:	mov	x19, #0x0                   	// #0
    ff84:	mov	w3, #0x0                   	// #0
    ff88:	ldrb	w7, [x1], #1
    ff8c:	and	x0, x7, #0x7f
    ff90:	lsl	x0, x0, x3
    ff94:	add	w3, w3, #0x7
    ff98:	orr	x19, x19, x0
    ff9c:	tbnz	w7, #7, ff88 <_Unwind_Backtrace@@GCC_3.3+0x1a28>
    ffa0:	ldrsw	x0, [x20, #4]
    ffa4:	add	x1, x20, #0x4
    ffa8:	cmp	w3, #0x3f
    ffac:	sub	x0, x1, x0
    ffb0:	b.hi	fe14 <_Unwind_Backtrace@@GCC_3.3+0x18b4>  // b.pmore
    ffb4:	tbz	w7, #6, fe14 <_Unwind_Backtrace@@GCC_3.3+0x18b4>
    ffb8:	mov	x1, #0xffffffffffffffff    	// #-1
    ffbc:	lsl	x3, x1, x3
    ffc0:	orr	x19, x19, x3
    ffc4:	nop
    ffc8:	cmp	w4, #0x10
    ffcc:	csel	x5, x6, x5, eq  // eq = none
    ffd0:	add	x19, x19, x5
    ffd4:	tbz	w2, #7, ff1c <_Unwind_Backtrace@@GCC_3.3+0x19bc>
    ffd8:	ldr	x19, [x19]
    ffdc:	bl	e850 <_Unwind_Backtrace@@GCC_3.3+0x2f0>
    ffe0:	and	w0, w0, #0xff
    ffe4:	cmp	w0, #0xff
    ffe8:	b.ne	ff2c <_Unwind_Backtrace@@GCC_3.3+0x19cc>  // b.any
    ffec:	nop
    fff0:	mov	x1, #0x0                   	// #0
    fff4:	b	ff48 <_Unwind_Backtrace@@GCC_3.3+0x19e8>
    fff8:	cmp	w1, #0x50
    fffc:	mov	x1, #0x0                   	// #0
   10000:	b.eq	ff48 <_Unwind_Backtrace@@GCC_3.3+0x19e8>  // b.none
   10004:	bl	2c50 <abort@plt>
   10008:	tst	w0, #0x60
   1000c:	b.eq	fff0 <_Unwind_Backtrace@@GCC_3.3+0x1a90>  // b.none
   10010:	bl	2c50 <abort@plt>
   10014:	ldr	x1, [x21, #8]
   10018:	b	ff48 <_Unwind_Backtrace@@GCC_3.3+0x19e8>
   1001c:	cmp	w3, #0x50
   10020:	add	x6, x19, #0x8
   10024:	ldr	x5, [x21, #8]
   10028:	b.ne	fde0 <_Unwind_Backtrace@@GCC_3.3+0x1880>  // b.any
   1002c:	b	ff04 <_Unwind_Backtrace@@GCC_3.3+0x19a4>
   10030:	ldrh	w19, [x19, #8]
   10034:	add	x1, x20, #0x4
   10038:	ldrsw	x0, [x20, #4]
   1003c:	sub	x0, x1, x0
   10040:	cbz	x19, fe18 <_Unwind_Backtrace@@GCC_3.3+0x18b8>
   10044:	b	ffc8 <_Unwind_Backtrace@@GCC_3.3+0x1a68>
   10048:	ldrsw	x19, [x19, #8]
   1004c:	add	x1, x20, #0x4
   10050:	ldrsw	x0, [x20, #4]
   10054:	sub	x0, x1, x0
   10058:	cbz	x19, fe18 <_Unwind_Backtrace@@GCC_3.3+0x18b8>
   1005c:	b	ffc8 <_Unwind_Backtrace@@GCC_3.3+0x1a68>
   10060:	stp	x29, x30, [sp, #-112]!
   10064:	cmp	x1, #0x2f
   10068:	mov	x29, sp
   1006c:	stp	x19, x20, [sp, #16]
   10070:	mov	x19, x2
   10074:	ldr	w2, [x2, #40]
   10078:	ldr	x12, [x0]
   1007c:	ccmp	w2, #0x0, #0x4, hi  // hi = pmore
   10080:	ldr	x3, [x0, #16]
   10084:	b.ne	101c4 <_Unwind_Backtrace@@GCC_3.3+0x1c64>  // b.any
   10088:	cmp	x1, #0x19
   1008c:	b.ls	1019c <_Unwind_Backtrace@@GCC_3.3+0x1c3c>  // b.plast
   10090:	mov	x13, #0x0                   	// #0
   10094:	mov	x15, #0x0                   	// #0
   10098:	ldrh	w4, [x0, #24]
   1009c:	cbz	w4, 101b4 <_Unwind_Backtrace@@GCC_3.3+0x1c54>
   100a0:	mov	w0, #0x38                  	// #56
   100a4:	mov	w7, #0xe550                	// #58704
   100a8:	mov	x10, #0x0                   	// #0
   100ac:	mov	x11, #0x0                   	// #0
   100b0:	umaddl	x4, w4, w0, x3
   100b4:	mov	x8, #0x0                   	// #0
   100b8:	mov	x6, #0x0                   	// #0
   100bc:	mov	x9, #0x0                   	// #0
   100c0:	movk	w7, #0x6474, lsl #16
   100c4:	mov	x14, #0x1                   	// #1
   100c8:	b	100e8 <_Unwind_Backtrace@@GCC_3.3+0x1b88>
   100cc:	cmp	w0, w7
   100d0:	b.eq	101ac <_Unwind_Backtrace@@GCC_3.3+0x1c4c>  // b.none
   100d4:	cmp	w0, #0x2
   100d8:	csel	x6, x6, x3, ne  // ne = any
   100dc:	add	x3, x3, #0x38
   100e0:	cmp	x3, x4
   100e4:	b.eq	10130 <_Unwind_Backtrace@@GCC_3.3+0x1bd0>  // b.none
   100e8:	ldr	w0, [x3]
   100ec:	cmp	w0, #0x1
   100f0:	b.ne	100cc <_Unwind_Backtrace@@GCC_3.3+0x1b6c>  // b.any
   100f4:	ldr	x0, [x3, #16]
   100f8:	ldr	x5, [x19]
   100fc:	add	x0, x12, x0
   10100:	cmp	x5, x0
   10104:	b.cc	100dc <_Unwind_Backtrace@@GCC_3.3+0x1b7c>  // b.lo, b.ul, b.last
   10108:	ldr	x2, [x3, #40]
   1010c:	add	x3, x3, #0x38
   10110:	add	x2, x0, x2
   10114:	cmp	x5, x2
   10118:	csel	x10, x10, x2, cs  // cs = hs, nlast
   1011c:	csel	x11, x11, x0, cs  // cs = hs, nlast
   10120:	csel	x8, x8, x14, cs  // cs = hs, nlast
   10124:	cmp	x3, x4
   10128:	b.ne	100e8 <_Unwind_Backtrace@@GCC_3.3+0x1b88>  // b.any
   1012c:	nop
   10130:	cbz	x8, 101b4 <_Unwind_Backtrace@@GCC_3.3+0x1c54>
   10134:	cmp	x1, #0x2f
   10138:	b.ls	10174 <_Unwind_Backtrace@@GCC_3.3+0x1c14>  // b.plast
   1013c:	adrp	x1, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
   10140:	add	x1, x1, #0x240
   10144:	cmp	x13, #0x0
   10148:	ccmp	x15, #0x0, #0x4, ne  // ne = any
   1014c:	ldr	x0, [x1, #16]
   10150:	b.eq	10168 <_Unwind_Backtrace@@GCC_3.3+0x1c08>  // b.none
   10154:	ldr	x2, [x13, #40]
   10158:	str	x2, [x15, #40]
   1015c:	str	x0, [x13, #40]
   10160:	mov	x0, x13
   10164:	str	x13, [x1, #16]
   10168:	stp	x11, x10, [x0]
   1016c:	stp	x12, x9, [x0, #16]
   10170:	str	x6, [x0, #32]
   10174:	cbz	x9, 101b4 <_Unwind_Backtrace@@GCC_3.3+0x1c54>
   10178:	ldr	x0, [x9, #16]
   1017c:	add	x20, x12, x0
   10180:	ldrb	w0, [x12, x0]
   10184:	cmp	w0, #0x1
   10188:	b.eq	1025c <_Unwind_Backtrace@@GCC_3.3+0x1cfc>  // b.none
   1018c:	mov	w0, #0x1                   	// #1
   10190:	ldp	x19, x20, [sp, #16]
   10194:	ldp	x29, x30, [sp], #112
   10198:	ret
   1019c:	mov	w0, #0xffffffff            	// #-1
   101a0:	ldp	x19, x20, [sp, #16]
   101a4:	ldp	x29, x30, [sp], #112
   101a8:	ret
   101ac:	mov	x9, x3
   101b0:	b	100dc <_Unwind_Backtrace@@GCC_3.3+0x1b7c>
   101b4:	mov	w0, #0x0                   	// #0
   101b8:	ldp	x19, x20, [sp, #16]
   101bc:	ldp	x29, x30, [sp], #112
   101c0:	ret
   101c4:	ldp	x5, x6, [x0, #32]
   101c8:	adrp	x2, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
   101cc:	adrp	x4, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
   101d0:	ldr	x7, [x2, #400]
   101d4:	cmp	x5, x7
   101d8:	b.eq	10330 <_Unwind_Backtrace@@GCC_3.3+0x1dd0>  // b.none
   101dc:	movi	v0.4s, #0x0
   101e0:	add	x4, x4, #0x240
   101e4:	add	x13, x4, #0x50
   101e8:	str	x5, [x2, #400]
   101ec:	add	x11, x4, #0x80
   101f0:	add	x10, x4, #0xb0
   101f4:	add	x9, x4, #0xe0
   101f8:	add	x8, x4, #0x110
   101fc:	add	x7, x4, #0x140
   10200:	add	x5, x4, #0x170
   10204:	str	x13, [x4, #72]
   10208:	add	x2, x4, #0x20
   1020c:	str	q0, [x4, #80]
   10210:	mov	x15, #0x0                   	// #0
   10214:	mov	x13, #0x0                   	// #0
   10218:	str	x11, [x4, #120]
   1021c:	str	q0, [x4, #128]
   10220:	str	x10, [x4, #168]
   10224:	str	q0, [x4, #176]
   10228:	str	x9, [x4, #216]
   1022c:	str	q0, [x4, #224]
   10230:	str	x8, [x4, #264]
   10234:	str	q0, [x4, #272]
   10238:	str	x7, [x4, #312]
   1023c:	str	q0, [x4, #320]
   10240:	str	x5, [x4, #360]
   10244:	str	q0, [x4, #368]
   10248:	str	xzr, [x4, #408]
   1024c:	stp	x6, x2, [x4, #8]
   10250:	str	q0, [x4, #32]
   10254:	str	wzr, [x19, #40]
   10258:	b	10098 <_Unwind_Backtrace@@GCC_3.3+0x1b38>
   1025c:	ldrb	w0, [x20, #1]
   10260:	cmp	w0, #0xff
   10264:	b.eq	103b0 <_Unwind_Backtrace@@GCC_3.3+0x1e50>  // b.none
   10268:	and	w1, w0, #0x70
   1026c:	cmp	w1, #0x20
   10270:	b.eq	10510 <_Unwind_Backtrace@@GCC_3.3+0x1fb0>  // b.none
   10274:	b.ls	103a8 <_Unwind_Backtrace@@GCC_3.3+0x1e48>  // b.plast
   10278:	cmp	w1, #0x30
   1027c:	b.ne	10390 <_Unwind_Backtrace@@GCC_3.3+0x1e30>  // b.any
   10280:	ldr	x1, [x19, #16]
   10284:	nop
   10288:	add	x3, sp, #0x30
   1028c:	add	x2, x20, #0x4
   10290:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
   10294:	ldrb	w3, [x20, #2]
   10298:	cmp	w3, #0xff
   1029c:	b.eq	102ac <_Unwind_Backtrace@@GCC_3.3+0x1d4c>  // b.none
   102a0:	ldrb	w1, [x20, #3]
   102a4:	cmp	w1, #0x3b
   102a8:	b.eq	103b8 <_Unwind_Backtrace@@GCC_3.3+0x1e58>  // b.none
   102ac:	ldr	x2, [x19]
   102b0:	mov	x3, #0x4                   	// #4
   102b4:	ldp	x5, x4, [x19, #8]
   102b8:	add	x0, sp, #0x40
   102bc:	ldr	x1, [sp, #48]
   102c0:	stp	xzr, x5, [sp, #64]
   102c4:	stp	x4, x1, [sp, #80]
   102c8:	str	x3, [sp, #96]
   102cc:	bl	ee10 <_Unwind_Backtrace@@GCC_3.3+0x8b0>
   102d0:	str	x0, [x19, #32]
   102d4:	cbz	x0, 1018c <_Unwind_Backtrace@@GCC_3.3+0x1c2c>
   102d8:	ldrsw	x1, [x0, #4]
   102dc:	add	x0, x0, #0x4
   102e0:	sub	x0, x0, x1
   102e4:	bl	e850 <_Unwind_Backtrace@@GCC_3.3+0x2f0>
   102e8:	and	w0, w0, #0xff
   102ec:	cmp	w0, #0xff
   102f0:	b.eq	104f4 <_Unwind_Backtrace@@GCC_3.3+0x1f94>  // b.none
   102f4:	and	w1, w0, #0x70
   102f8:	cmp	w1, #0x20
   102fc:	b.eq	10520 <_Unwind_Backtrace@@GCC_3.3+0x1fc0>  // b.none
   10300:	b.ls	104ec <_Unwind_Backtrace@@GCC_3.3+0x1f8c>  // b.plast
   10304:	cmp	w1, #0x30
   10308:	b.ne	104fc <_Unwind_Backtrace@@GCC_3.3+0x1f9c>  // b.any
   1030c:	ldr	x1, [x19, #16]
   10310:	add	x3, sp, #0x38
   10314:	ldr	x2, [x19, #32]
   10318:	add	x2, x2, #0x8
   1031c:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
   10320:	ldr	x1, [sp, #56]
   10324:	mov	w0, #0x1                   	// #1
   10328:	str	x1, [x19, #24]
   1032c:	b	101a0 <_Unwind_Backtrace@@GCC_3.3+0x1c40>
   10330:	add	x7, x4, #0x240
   10334:	ldr	x8, [x7, #8]
   10338:	cmp	x8, x6
   1033c:	b.ne	101dc <_Unwind_Backtrace@@GCC_3.3+0x1c7c>  // b.any
   10340:	ldr	x7, [x7, #16]
   10344:	cbz	x7, 10090 <_Unwind_Backtrace@@GCC_3.3+0x1b30>
   10348:	mov	x13, x7
   1034c:	mov	x15, #0x0                   	// #0
   10350:	ldr	x6, [x19]
   10354:	ldp	x2, x5, [x13]
   10358:	cmp	x6, x2
   1035c:	b.cc	10368 <_Unwind_Backtrace@@GCC_3.3+0x1e08>  // b.lo, b.ul, b.last
   10360:	cmp	x6, x5
   10364:	b.cc	1054c <_Unwind_Backtrace@@GCC_3.3+0x1fec>  // b.lo, b.ul, b.last
   10368:	orr	x2, x2, x5
   1036c:	cbz	x2, 10098 <_Unwind_Backtrace@@GCC_3.3+0x1b38>
   10370:	ldr	x2, [x13, #40]
   10374:	cbz	x2, 10098 <_Unwind_Backtrace@@GCC_3.3+0x1b38>
   10378:	mov	x15, x13
   1037c:	mov	x13, x2
   10380:	ldp	x2, x5, [x13]
   10384:	cmp	x6, x2
   10388:	b.cc	10368 <_Unwind_Backtrace@@GCC_3.3+0x1e08>  // b.lo, b.ul, b.last
   1038c:	b	10360 <_Unwind_Backtrace@@GCC_3.3+0x1e00>
   10390:	cmp	w1, #0x50
   10394:	mov	x1, #0x0                   	// #0
   10398:	b.eq	10288 <_Unwind_Backtrace@@GCC_3.3+0x1d28>  // b.none
   1039c:	nop
   103a0:	stp	x21, x22, [sp, #32]
   103a4:	bl	2c50 <abort@plt>
   103a8:	tst	w0, #0x60
   103ac:	b.ne	103a0 <_Unwind_Backtrace@@GCC_3.3+0x1e40>  // b.any
   103b0:	mov	x1, #0x0                   	// #0
   103b4:	b	10288 <_Unwind_Backtrace@@GCC_3.3+0x1d28>
   103b8:	and	w1, w3, #0x70
   103bc:	cmp	w1, #0x20
   103c0:	b.eq	10570 <_Unwind_Backtrace@@GCC_3.3+0x2010>  // b.none
   103c4:	b.ls	1053c <_Unwind_Backtrace@@GCC_3.3+0x1fdc>  // b.plast
   103c8:	cmp	w1, #0x30
   103cc:	b.ne	10528 <_Unwind_Backtrace@@GCC_3.3+0x1fc8>  // b.any
   103d0:	ldr	x1, [x19, #16]
   103d4:	mov	x2, x0
   103d8:	mov	w0, w3
   103dc:	add	x3, sp, #0x38
   103e0:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
   103e4:	ldr	x3, [sp, #56]
   103e8:	cbz	x3, 1018c <_Unwind_Backtrace@@GCC_3.3+0x1c2c>
   103ec:	ands	x5, x0, #0x3
   103f0:	ldr	x2, [x19]
   103f4:	b.ne	102b0 <_Unwind_Backtrace@@GCC_3.3+0x1d50>  // b.any
   103f8:	ldrsw	x1, [x0]
   103fc:	add	x1, x1, x20
   10400:	cmp	x1, x2
   10404:	b.hi	1018c <_Unwind_Backtrace@@GCC_3.3+0x1c2c>  // b.pmore
   10408:	sub	x3, x3, #0x1
   1040c:	stp	x21, x22, [sp, #32]
   10410:	lsl	x1, x3, #3
   10414:	add	x21, x0, x1
   10418:	ldrsw	x1, [x0, x1]
   1041c:	add	x1, x1, x20
   10420:	cmp	x1, x2
   10424:	b.ls	10468 <_Unwind_Backtrace@@GCC_3.3+0x1f08>  // b.plast
   10428:	cmp	x5, x3
   1042c:	b.cs	103a4 <_Unwind_Backtrace@@GCC_3.3+0x1e44>  // b.hs, b.nlast
   10430:	add	x1, x5, x3
   10434:	lsr	x1, x1, #1
   10438:	lsl	x4, x1, #3
   1043c:	add	x21, x0, x4
   10440:	ldrsw	x4, [x0, x4]
   10444:	add	x4, x4, x20
   10448:	cmp	x4, x2
   1044c:	b.hi	10518 <_Unwind_Backtrace@@GCC_3.3+0x1fb8>  // b.pmore
   10450:	add	x5, x1, #0x1
   10454:	lsl	x1, x5, #3
   10458:	ldrsw	x1, [x0, x1]
   1045c:	add	x1, x1, x20
   10460:	cmp	x1, x2
   10464:	b.ls	10428 <_Unwind_Backtrace@@GCC_3.3+0x1ec8>  // b.plast
   10468:	ldrsw	x22, [x21, #4]
   1046c:	add	x22, x22, x20
   10470:	add	x1, x22, #0x4
   10474:	ldrsw	x0, [x22, #4]
   10478:	sub	x0, x1, x0
   1047c:	bl	e850 <_Unwind_Backtrace@@GCC_3.3+0x2f0>
   10480:	and	w0, w0, #0xff
   10484:	cmp	w0, #0xff
   10488:	b.eq	1059c <_Unwind_Backtrace@@GCC_3.3+0x203c>  // b.none
   1048c:	and	w1, w0, #0x7
   10490:	cmp	w1, #0x2
   10494:	b.eq	10594 <_Unwind_Backtrace@@GCC_3.3+0x2034>  // b.none
   10498:	b.ls	10588 <_Unwind_Backtrace@@GCC_3.3+0x2028>  // b.plast
   1049c:	cmp	w1, #0x3
   104a0:	mov	x2, #0xc                   	// #12
   104a4:	b.ne	10578 <_Unwind_Backtrace@@GCC_3.3+0x2018>  // b.any
   104a8:	add	x2, x22, x2
   104ac:	mov	x1, #0x0                   	// #0
   104b0:	and	w0, w0, #0xf
   104b4:	add	x3, sp, #0x40
   104b8:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
   104bc:	ldrsw	x0, [x21]
   104c0:	ldr	x1, [sp, #64]
   104c4:	add	x20, x0, x20
   104c8:	ldr	x2, [x19]
   104cc:	add	x0, x20, x1
   104d0:	cmp	x2, x0
   104d4:	b.cs	104dc <_Unwind_Backtrace@@GCC_3.3+0x1f7c>  // b.hs, b.nlast
   104d8:	str	x22, [x19, #32]
   104dc:	mov	w0, #0x1                   	// #1
   104e0:	ldp	x21, x22, [sp, #32]
   104e4:	str	x20, [x19, #24]
   104e8:	b	10190 <_Unwind_Backtrace@@GCC_3.3+0x1c30>
   104ec:	tst	w0, #0x60
   104f0:	b.ne	103a0 <_Unwind_Backtrace@@GCC_3.3+0x1e40>  // b.any
   104f4:	mov	x1, #0x0                   	// #0
   104f8:	b	10310 <_Unwind_Backtrace@@GCC_3.3+0x1db0>
   104fc:	cmp	w1, #0x50
   10500:	mov	x1, #0x0                   	// #0
   10504:	b.eq	10310 <_Unwind_Backtrace@@GCC_3.3+0x1db0>  // b.none
   10508:	stp	x21, x22, [sp, #32]
   1050c:	b	103a4 <_Unwind_Backtrace@@GCC_3.3+0x1e44>
   10510:	ldr	x1, [x19, #8]
   10514:	b	10288 <_Unwind_Backtrace@@GCC_3.3+0x1d28>
   10518:	mov	x3, x1
   1051c:	b	10428 <_Unwind_Backtrace@@GCC_3.3+0x1ec8>
   10520:	ldr	x1, [x19, #8]
   10524:	b	10310 <_Unwind_Backtrace@@GCC_3.3+0x1db0>
   10528:	cmp	w1, #0x50
   1052c:	mov	x1, #0x0                   	// #0
   10530:	b.eq	103d4 <_Unwind_Backtrace@@GCC_3.3+0x1e74>  // b.none
   10534:	stp	x21, x22, [sp, #32]
   10538:	b	103a4 <_Unwind_Backtrace@@GCC_3.3+0x1e44>
   1053c:	tst	w3, #0x60
   10540:	b.ne	103a0 <_Unwind_Backtrace@@GCC_3.3+0x1e40>  // b.any
   10544:	mov	x1, #0x0                   	// #0
   10548:	b	103d4 <_Unwind_Backtrace@@GCC_3.3+0x1e74>
   1054c:	cmp	x13, x7
   10550:	ldp	x12, x9, [x13, #16]
   10554:	b.eq	10174 <_Unwind_Backtrace@@GCC_3.3+0x1c14>  // b.none
   10558:	add	x4, x4, #0x240
   1055c:	ldr	x0, [x13, #40]
   10560:	str	x0, [x15, #40]
   10564:	str	x13, [x4, #16]
   10568:	str	x7, [x13, #40]
   1056c:	b	10174 <_Unwind_Backtrace@@GCC_3.3+0x1c14>
   10570:	ldr	x1, [x19, #8]
   10574:	b	103d4 <_Unwind_Backtrace@@GCC_3.3+0x1e74>
   10578:	cmp	w1, #0x4
   1057c:	b.ne	103a4 <_Unwind_Backtrace@@GCC_3.3+0x1e44>  // b.any
   10580:	mov	x2, #0x10                  	// #16
   10584:	b	104a8 <_Unwind_Backtrace@@GCC_3.3+0x1f48>
   10588:	mov	x2, #0x10                  	// #16
   1058c:	cbz	w1, 104a8 <_Unwind_Backtrace@@GCC_3.3+0x1f48>
   10590:	bl	2c50 <abort@plt>
   10594:	mov	x2, #0xa                   	// #10
   10598:	b	104a8 <_Unwind_Backtrace@@GCC_3.3+0x1f48>
   1059c:	mov	x2, #0x8                   	// #8
   105a0:	b	104a8 <_Unwind_Backtrace@@GCC_3.3+0x1f48>
   105a4:	nop

00000000000105a8 <__register_frame_info_bases@@GCC_3.0>:
   105a8:	cbz	x0, 10658 <__register_frame_info_bases@@GCC_3.0+0xb0>
   105ac:	stp	x29, x30, [sp, #-48]!
   105b0:	mov	x29, sp
   105b4:	stp	x19, x20, [sp, #16]
   105b8:	mov	x19, x1
   105bc:	ldr	w1, [x0]
   105c0:	cbz	w1, 10634 <__register_frame_info_bases@@GCC_3.0+0x8c>
   105c4:	adrp	x20, 23000 <__emutls_register_common@@GCC_4.3.0+0x11c90>
   105c8:	mov	x1, #0xffffffffffffffff    	// #-1
   105cc:	str	x21, [sp, #32]
   105d0:	mov	x4, #0x7f8                 	// #2040
   105d4:	stp	x1, x2, [x19]
   105d8:	adrp	x21, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
   105dc:	ldr	x1, [x20, #4032]
   105e0:	stp	x3, x0, [x19, #16]
   105e4:	str	x4, [x19, #32]
   105e8:	cbz	x1, 105f8 <__register_frame_info_bases@@GCC_3.0+0x50>
   105ec:	add	x0, x21, #0x240
   105f0:	add	x0, x0, #0x1a0
   105f4:	bl	2d50 <pthread_mutex_lock@plt>
   105f8:	add	x0, x21, #0x240
   105fc:	ldr	w1, [x0, #472]
   10600:	ldr	x2, [x0, #464]
   10604:	str	x2, [x19, #40]
   10608:	str	x19, [x0, #464]
   1060c:	cbz	w1, 10640 <__register_frame_info_bases@@GCC_3.0+0x98>
   10610:	ldr	x20, [x20, #4032]
   10614:	cbz	x20, 10630 <__register_frame_info_bases@@GCC_3.0+0x88>
   10618:	add	x0, x21, #0x240
   1061c:	ldp	x19, x20, [sp, #16]
   10620:	add	x0, x0, #0x1a0
   10624:	ldr	x21, [sp, #32]
   10628:	ldp	x29, x30, [sp], #48
   1062c:	b	2d60 <pthread_mutex_unlock@plt>
   10630:	ldr	x21, [sp, #32]
   10634:	ldp	x19, x20, [sp, #16]
   10638:	ldp	x29, x30, [sp], #48
   1063c:	ret
   10640:	add	x0, x0, #0x1d8
   10644:	mov	w1, #0x1                   	// #1
   10648:	str	w1, [x0]
   1064c:	ldr	x20, [x20, #4032]
   10650:	cbnz	x20, 10618 <__register_frame_info_bases@@GCC_3.0+0x70>
   10654:	b	10630 <__register_frame_info_bases@@GCC_3.0+0x88>
   10658:	ret
   1065c:	nop

0000000000010660 <__register_frame_info@@GLIBC_2.0>:
   10660:	mov	x3, #0x0                   	// #0
   10664:	mov	x2, #0x0                   	// #0
   10668:	b	2d10 <__register_frame_info_bases@plt>
   1066c:	nop

0000000000010670 <__register_frame@@GLIBC_2.0>:
   10670:	stp	x29, x30, [sp, #-32]!
   10674:	mov	x29, sp
   10678:	str	x19, [sp, #16]
   1067c:	mov	x19, x0
   10680:	ldr	w0, [x0]
   10684:	cbnz	w0, 10694 <__register_frame@@GLIBC_2.0+0x24>
   10688:	ldr	x19, [sp, #16]
   1068c:	ldp	x29, x30, [sp], #32
   10690:	ret
   10694:	mov	x0, #0x30                  	// #48
   10698:	bl	2b70 <malloc@plt>
   1069c:	mov	x1, x0
   106a0:	mov	x0, x19
   106a4:	ldr	x19, [sp, #16]
   106a8:	ldp	x29, x30, [sp], #32
   106ac:	b	2d00 <__register_frame_info@plt>

00000000000106b0 <__register_frame_info_table_bases@@GCC_3.0>:
   106b0:	stp	x29, x30, [sp, #-48]!
   106b4:	mov	x5, #0xffffffffffffffff    	// #-1
   106b8:	mov	x4, #0x7fa                 	// #2042
   106bc:	mov	x29, sp
   106c0:	stp	x19, x20, [sp, #16]
   106c4:	adrp	x20, 23000 <__emutls_register_common@@GCC_4.3.0+0x11c90>
   106c8:	mov	x19, x1
   106cc:	ldr	x1, [x20, #4032]
   106d0:	str	x21, [sp, #32]
   106d4:	stp	x5, x2, [x19]
   106d8:	adrp	x21, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
   106dc:	stp	x3, x0, [x19, #16]
   106e0:	str	x4, [x19, #32]
   106e4:	cbz	x1, 106f4 <__register_frame_info_table_bases@@GCC_3.0+0x44>
   106e8:	add	x0, x21, #0x240
   106ec:	add	x0, x0, #0x1a0
   106f0:	bl	2d50 <pthread_mutex_lock@plt>
   106f4:	add	x1, x21, #0x240
   106f8:	ldr	w0, [x1, #472]
   106fc:	ldr	x2, [x1, #464]
   10700:	str	x2, [x19, #40]
   10704:	str	x19, [x1, #464]
   10708:	cbz	w0, 1073c <__register_frame_info_table_bases@@GCC_3.0+0x8c>
   1070c:	ldr	x20, [x20, #4032]
   10710:	cbz	x20, 1072c <__register_frame_info_table_bases@@GCC_3.0+0x7c>
   10714:	add	x0, x21, #0x240
   10718:	ldp	x19, x20, [sp, #16]
   1071c:	add	x0, x0, #0x1a0
   10720:	ldr	x21, [sp, #32]
   10724:	ldp	x29, x30, [sp], #48
   10728:	b	2d60 <pthread_mutex_unlock@plt>
   1072c:	ldp	x19, x20, [sp, #16]
   10730:	ldr	x21, [sp, #32]
   10734:	ldp	x29, x30, [sp], #48
   10738:	ret
   1073c:	add	x1, x1, #0x1d8
   10740:	mov	w0, #0x1                   	// #1
   10744:	str	w0, [x1]
   10748:	b	1070c <__register_frame_info_table_bases@@GCC_3.0+0x5c>
   1074c:	nop

0000000000010750 <__register_frame_info_table@@GLIBC_2.0>:
   10750:	mov	x3, #0x0                   	// #0
   10754:	mov	x2, #0x0                   	// #0
   10758:	b	2bd0 <__register_frame_info_table_bases@plt>
   1075c:	nop

0000000000010760 <__register_frame_table@@GLIBC_2.0>:
   10760:	stp	x29, x30, [sp, #-32]!
   10764:	mov	x29, sp
   10768:	str	x19, [sp, #16]
   1076c:	mov	x19, x0
   10770:	mov	x0, #0x30                  	// #48
   10774:	bl	2b70 <malloc@plt>
   10778:	mov	x1, x0
   1077c:	mov	x0, x19
   10780:	ldr	x19, [sp, #16]
   10784:	ldp	x29, x30, [sp], #32
   10788:	b	2cd0 <__register_frame_info_table@plt>
   1078c:	nop

0000000000010790 <__deregister_frame_info_bases@@GCC_3.0>:
   10790:	stp	x29, x30, [sp, #-48]!
   10794:	mov	x29, sp
   10798:	stp	x19, x20, [sp, #16]
   1079c:	cbz	x0, 10868 <__deregister_frame_info_bases@@GCC_3.0+0xd8>
   107a0:	mov	x20, x0
   107a4:	ldr	w0, [x0]
   107a8:	cbz	w0, 10868 <__deregister_frame_info_bases@@GCC_3.0+0xd8>
   107ac:	stp	x21, x22, [sp, #32]
   107b0:	adrp	x21, 23000 <__emutls_register_common@@GCC_4.3.0+0x11c90>
   107b4:	adrp	x22, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
   107b8:	ldr	x0, [x21, #4032]
   107bc:	cbz	x0, 107cc <__deregister_frame_info_bases@@GCC_3.0+0x3c>
   107c0:	add	x0, x22, #0x240
   107c4:	add	x0, x0, #0x1a0
   107c8:	bl	2d50 <pthread_mutex_lock@plt>
   107cc:	add	x2, x22, #0x240
   107d0:	ldr	x1, [x2, #464]
   107d4:	cbz	x1, 1081c <__deregister_frame_info_bases@@GCC_3.0+0x8c>
   107d8:	add	x2, x2, #0x1d0
   107dc:	b	107e8 <__deregister_frame_info_bases@@GCC_3.0+0x58>
   107e0:	add	x2, x19, #0x28
   107e4:	cbz	x1, 1081c <__deregister_frame_info_bases@@GCC_3.0+0x8c>
   107e8:	ldr	x0, [x1, #24]
   107ec:	mov	x19, x1
   107f0:	ldr	x1, [x1, #40]
   107f4:	cmp	x20, x0
   107f8:	b.ne	107e0 <__deregister_frame_info_bases@@GCC_3.0+0x50>  // b.any
   107fc:	str	x1, [x2]
   10800:	ldr	x21, [x21, #4032]
   10804:	cbnz	x21, 1087c <__deregister_frame_info_bases@@GCC_3.0+0xec>
   10808:	mov	x0, x19
   1080c:	ldp	x19, x20, [sp, #16]
   10810:	ldp	x21, x22, [sp, #32]
   10814:	ldp	x29, x30, [sp], #48
   10818:	ret
   1081c:	add	x2, x22, #0x240
   10820:	ldr	x19, [x2, #480]
   10824:	cbz	x19, 1089c <__deregister_frame_info_bases@@GCC_3.0+0x10c>
   10828:	add	x2, x2, #0x1e0
   1082c:	b	10848 <__deregister_frame_info_bases@@GCC_3.0+0xb8>
   10830:	ldr	x1, [x0]
   10834:	cmp	x20, x1
   10838:	b.eq	108b4 <__deregister_frame_info_bases@@GCC_3.0+0x124>  // b.none
   1083c:	add	x2, x19, #0x28
   10840:	ldr	x19, [x19, #40]
   10844:	cbz	x19, 1089c <__deregister_frame_info_bases@@GCC_3.0+0x10c>
   10848:	ldrb	w1, [x19, #32]
   1084c:	ldr	x0, [x19, #24]
   10850:	tbnz	w1, #0, 10830 <__deregister_frame_info_bases@@GCC_3.0+0xa0>
   10854:	cmp	x20, x0
   10858:	b.ne	1083c <__deregister_frame_info_bases@@GCC_3.0+0xac>  // b.any
   1085c:	ldr	x0, [x19, #40]
   10860:	str	x0, [x2]
   10864:	b	10800 <__deregister_frame_info_bases@@GCC_3.0+0x70>
   10868:	mov	x19, #0x0                   	// #0
   1086c:	mov	x0, x19
   10870:	ldp	x19, x20, [sp, #16]
   10874:	ldp	x29, x30, [sp], #48
   10878:	ret
   1087c:	add	x0, x22, #0x240
   10880:	add	x0, x0, #0x1a0
   10884:	bl	2d60 <pthread_mutex_unlock@plt>
   10888:	mov	x0, x19
   1088c:	ldp	x19, x20, [sp, #16]
   10890:	ldp	x21, x22, [sp, #32]
   10894:	ldp	x29, x30, [sp], #48
   10898:	ret
   1089c:	ldr	x21, [x21, #4032]
   108a0:	cbz	x21, 108b0 <__deregister_frame_info_bases@@GCC_3.0+0x120>
   108a4:	add	x0, x22, #0x240
   108a8:	add	x0, x0, #0x1a0
   108ac:	bl	2d60 <pthread_mutex_unlock@plt>
   108b0:	bl	2c50 <abort@plt>
   108b4:	ldr	x1, [x19, #40]
   108b8:	str	x1, [x2]
   108bc:	bl	2cc0 <free@plt>
   108c0:	b	10800 <__deregister_frame_info_bases@@GCC_3.0+0x70>
   108c4:	nop

00000000000108c8 <__deregister_frame_info@@GLIBC_2.0>:
   108c8:	b	2b60 <__deregister_frame_info_bases@plt>
   108cc:	nop

00000000000108d0 <__deregister_frame@@GLIBC_2.0>:
   108d0:	ldr	w1, [x0]
   108d4:	cbnz	w1, 108dc <__deregister_frame@@GLIBC_2.0+0xc>
   108d8:	ret
   108dc:	stp	x29, x30, [sp, #-16]!
   108e0:	mov	x29, sp
   108e4:	bl	2ce0 <__deregister_frame_info@plt>
   108e8:	ldp	x29, x30, [sp], #16
   108ec:	b	2cc0 <free@plt>

00000000000108f0 <_Unwind_Find_FDE@@GCC_3.0>:
   108f0:	stp	x29, x30, [sp, #-128]!
   108f4:	mov	x29, sp
   108f8:	stp	x23, x24, [sp, #48]
   108fc:	adrp	x23, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
   10900:	add	x2, x23, #0x240
   10904:	stp	x19, x20, [sp, #16]
   10908:	mov	x20, x0
   1090c:	add	x0, x2, #0x1d8
   10910:	stp	x21, x22, [sp, #32]
   10914:	mov	x22, x1
   10918:	ldr	w0, [x0]
   1091c:	cbnz	w0, 1097c <_Unwind_Find_FDE@@GCC_3.0+0x8c>
   10920:	movi	v0.4s, #0x0
   10924:	mov	w2, #0x1                   	// #1
   10928:	adrp	x0, 10000 <_Unwind_Backtrace@@GCC_3.3+0x1aa0>
   1092c:	add	x1, sp, #0x50
   10930:	add	x0, x0, #0x60
   10934:	str	x20, [sp, #80]
   10938:	str	w2, [sp, #120]
   1093c:	stur	q0, [sp, #88]
   10940:	stur	q0, [sp, #104]
   10944:	bl	2c80 <dl_iterate_phdr@plt>
   10948:	tbnz	w0, #31, 10a94 <_Unwind_Find_FDE@@GCC_3.0+0x1a4>
   1094c:	ldr	x21, [sp, #112]
   10950:	cbz	x21, 10964 <_Unwind_Find_FDE@@GCC_3.0+0x74>
   10954:	ldur	q0, [sp, #88]
   10958:	ldr	x0, [sp, #104]
   1095c:	str	x0, [x22, #16]
   10960:	str	q0, [x22]
   10964:	mov	x0, x21
   10968:	ldp	x19, x20, [sp, #16]
   1096c:	ldp	x21, x22, [sp, #32]
   10970:	ldp	x23, x24, [sp, #48]
   10974:	ldp	x29, x30, [sp], #128
   10978:	ret
   1097c:	stp	x25, x26, [sp, #64]
   10980:	adrp	x25, 23000 <__emutls_register_common@@GCC_4.3.0+0x11c90>
   10984:	ldr	x0, [x25, #4032]
   10988:	cbz	x0, 10994 <_Unwind_Find_FDE@@GCC_3.0+0xa4>
   1098c:	add	x0, x2, #0x1a0
   10990:	bl	2d50 <pthread_mutex_lock@plt>
   10994:	add	x0, x23, #0x240
   10998:	ldr	x19, [x0, #480]
   1099c:	cbnz	x19, 109ac <_Unwind_Find_FDE@@GCC_3.0+0xbc>
   109a0:	b	10a2c <_Unwind_Find_FDE@@GCC_3.0+0x13c>
   109a4:	ldr	x19, [x19, #40]
   109a8:	cbz	x19, 10a2c <_Unwind_Find_FDE@@GCC_3.0+0x13c>
   109ac:	ldr	x0, [x19]
   109b0:	cmp	x20, x0
   109b4:	b.cc	109a4 <_Unwind_Find_FDE@@GCC_3.0+0xb4>  // b.lo, b.ul, b.last
   109b8:	mov	x1, x20
   109bc:	mov	x0, x19
   109c0:	bl	f3a0 <_Unwind_Backtrace@@GCC_3.3+0xe40>
   109c4:	mov	x21, x0
   109c8:	cbz	x0, 10a2c <_Unwind_Find_FDE@@GCC_3.0+0x13c>
   109cc:	ldr	x25, [x25, #4032]
   109d0:	cbnz	x25, 10a9c <_Unwind_Find_FDE@@GCC_3.0+0x1ac>
   109d4:	ldur	q0, [x19, #8]
   109d8:	str	q0, [x22]
   109dc:	ldrb	w0, [x19, #32]
   109e0:	tbnz	w0, #2, 10aac <_Unwind_Find_FDE@@GCC_3.0+0x1bc>
   109e4:	ldrh	w0, [x19, #32]
   109e8:	ubfx	x0, x0, #3, #8
   109ec:	cmp	w0, #0xff
   109f0:	b.eq	10adc <_Unwind_Find_FDE@@GCC_3.0+0x1ec>  // b.none
   109f4:	and	w1, w0, #0x70
   109f8:	cmp	w1, #0x20
   109fc:	b.eq	10b04 <_Unwind_Find_FDE@@GCC_3.0+0x214>  // b.none
   10a00:	b.ls	10ad4 <_Unwind_Find_FDE@@GCC_3.0+0x1e4>  // b.plast
   10a04:	cmp	w1, #0x30
   10a08:	b.ne	10ac4 <_Unwind_Find_FDE@@GCC_3.0+0x1d4>  // b.any
   10a0c:	ldr	x1, [x19, #16]
   10a10:	add	x3, sp, #0x50
   10a14:	add	x2, x21, #0x8
   10a18:	bl	e6f0 <_Unwind_Backtrace@@GCC_3.3+0x190>
   10a1c:	ldr	x0, [sp, #80]
   10a20:	ldp	x25, x26, [sp, #64]
   10a24:	str	x0, [x22, #16]
   10a28:	b	10964 <_Unwind_Find_FDE@@GCC_3.0+0x74>
   10a2c:	add	x24, x23, #0x240
   10a30:	add	x26, x24, #0x1e0
   10a34:	nop
   10a38:	ldr	x19, [x24, #464]
   10a3c:	cbz	x19, 10ae4 <_Unwind_Find_FDE@@GCC_3.0+0x1f4>
   10a40:	ldr	x2, [x19, #40]
   10a44:	mov	x1, x20
   10a48:	mov	x0, x19
   10a4c:	str	x2, [x24, #464]
   10a50:	bl	f3a0 <_Unwind_Backtrace@@GCC_3.3+0xe40>
   10a54:	mov	x21, x0
   10a58:	ldr	x2, [x24, #480]
   10a5c:	cbz	x2, 10afc <_Unwind_Find_FDE@@GCC_3.0+0x20c>
   10a60:	mov	x0, x26
   10a64:	ldr	x3, [x19]
   10a68:	b	10a78 <_Unwind_Find_FDE@@GCC_3.0+0x188>
   10a6c:	add	x0, x2, #0x28
   10a70:	ldr	x2, [x2, #40]
   10a74:	cbz	x2, 10a84 <_Unwind_Find_FDE@@GCC_3.0+0x194>
   10a78:	ldr	x1, [x2]
   10a7c:	cmp	x1, x3
   10a80:	b.cs	10a6c <_Unwind_Find_FDE@@GCC_3.0+0x17c>  // b.hs, b.nlast
   10a84:	str	x2, [x19, #40]
   10a88:	str	x19, [x0]
   10a8c:	cbz	x21, 10a38 <_Unwind_Find_FDE@@GCC_3.0+0x148>
   10a90:	b	109cc <_Unwind_Find_FDE@@GCC_3.0+0xdc>
   10a94:	mov	x21, #0x0                   	// #0
   10a98:	b	10964 <_Unwind_Find_FDE@@GCC_3.0+0x74>
   10a9c:	add	x0, x23, #0x240
   10aa0:	add	x0, x0, #0x1a0
   10aa4:	bl	2d60 <pthread_mutex_unlock@plt>
   10aa8:	b	109d4 <_Unwind_Find_FDE@@GCC_3.0+0xe4>
   10aac:	add	x1, x21, #0x4
   10ab0:	ldrsw	x0, [x21, #4]
   10ab4:	sub	x0, x1, x0
   10ab8:	bl	e850 <_Unwind_Backtrace@@GCC_3.3+0x2f0>
   10abc:	and	w0, w0, #0xff
   10ac0:	b	109ec <_Unwind_Find_FDE@@GCC_3.0+0xfc>
   10ac4:	cmp	w1, #0x50
   10ac8:	mov	x1, #0x0                   	// #0
   10acc:	b.eq	10a10 <_Unwind_Find_FDE@@GCC_3.0+0x120>  // b.none
   10ad0:	bl	2c50 <abort@plt>
   10ad4:	tst	w0, #0x60
   10ad8:	b.ne	10ad0 <_Unwind_Find_FDE@@GCC_3.0+0x1e0>  // b.any
   10adc:	mov	x1, #0x0                   	// #0
   10ae0:	b	10a10 <_Unwind_Find_FDE@@GCC_3.0+0x120>
   10ae4:	ldr	x25, [x25, #4032]
   10ae8:	cbz	x25, 10b0c <_Unwind_Find_FDE@@GCC_3.0+0x21c>
   10aec:	add	x0, x24, #0x1a0
   10af0:	bl	2d60 <pthread_mutex_unlock@plt>
   10af4:	ldp	x25, x26, [sp, #64]
   10af8:	b	10920 <_Unwind_Find_FDE@@GCC_3.0+0x30>
   10afc:	mov	x0, x26
   10b00:	b	10a84 <_Unwind_Find_FDE@@GCC_3.0+0x194>
   10b04:	ldr	x1, [x19, #8]
   10b08:	b	10a10 <_Unwind_Find_FDE@@GCC_3.0+0x120>
   10b0c:	ldp	x25, x26, [sp, #64]
   10b10:	b	10920 <_Unwind_Find_FDE@@GCC_3.0+0x30>
   10b14:	nop
   10b18:	and	w5, w0, #0xff
   10b1c:	cmp	w5, #0x50
   10b20:	b.eq	10c38 <_Unwind_Find_FDE@@GCC_3.0+0x348>  // b.none
   10b24:	and	w4, w5, #0xf
   10b28:	cmp	w4, #0x4
   10b2c:	b.eq	10b48 <_Unwind_Find_FDE@@GCC_3.0+0x258>  // b.none
   10b30:	b.ls	10b5c <_Unwind_Find_FDE@@GCC_3.0+0x26c>  // b.plast
   10b34:	cmp	w4, #0xb
   10b38:	b.eq	10c5c <_Unwind_Find_FDE@@GCC_3.0+0x36c>  // b.none
   10b3c:	b.ls	10bb8 <_Unwind_Find_FDE@@GCC_3.0+0x2c8>  // b.plast
   10b40:	cmp	w4, #0xc
   10b44:	b.ne	10c6c <_Unwind_Find_FDE@@GCC_3.0+0x37c>  // b.any
   10b48:	mov	x0, x2
   10b4c:	ldr	x4, [x0], #8
   10b50:	cbnz	x4, 10c18 <_Unwind_Find_FDE@@GCC_3.0+0x328>
   10b54:	str	x4, [x3]
   10b58:	ret
   10b5c:	cmp	w4, #0x2
   10b60:	b.eq	10c4c <_Unwind_Find_FDE@@GCC_3.0+0x35c>  // b.none
   10b64:	b.ls	10b80 <_Unwind_Find_FDE@@GCC_3.0+0x290>  // b.plast
   10b68:	cmp	w4, #0x3
   10b6c:	b.ne	10c6c <_Unwind_Find_FDE@@GCC_3.0+0x37c>  // b.any
   10b70:	mov	x0, x2
   10b74:	ldr	w4, [x0], #4
   10b78:	cbz	x4, 10b54 <_Unwind_Find_FDE@@GCC_3.0+0x264>
   10b7c:	b	10c18 <_Unwind_Find_FDE@@GCC_3.0+0x328>
   10b80:	cbz	w4, 10b48 <_Unwind_Find_FDE@@GCC_3.0+0x258>
   10b84:	cmp	w4, #0x1
   10b88:	b.ne	10c6c <_Unwind_Find_FDE@@GCC_3.0+0x37c>  // b.any
   10b8c:	mov	x0, x2
   10b90:	mov	x4, #0x0                   	// #0
   10b94:	mov	w7, #0x0                   	// #0
   10b98:	ldrb	w8, [x0], #1
   10b9c:	and	x6, x8, #0x7f
   10ba0:	lsl	x6, x6, x7
   10ba4:	add	w7, w7, #0x7
   10ba8:	orr	x4, x4, x6
   10bac:	tbnz	w8, #7, 10b98 <_Unwind_Find_FDE@@GCC_3.0+0x2a8>
   10bb0:	cbz	x4, 10b54 <_Unwind_Find_FDE@@GCC_3.0+0x264>
   10bb4:	b	10c18 <_Unwind_Find_FDE@@GCC_3.0+0x328>
   10bb8:	cmp	w4, #0x9
   10bbc:	b.eq	10bd8 <_Unwind_Find_FDE@@GCC_3.0+0x2e8>  // b.none
   10bc0:	cmp	w4, #0xa
   10bc4:	b.ne	10c6c <_Unwind_Find_FDE@@GCC_3.0+0x37c>  // b.any
   10bc8:	mov	x0, x2
   10bcc:	ldrsh	x4, [x0], #2
   10bd0:	cbz	x4, 10b54 <_Unwind_Find_FDE@@GCC_3.0+0x264>
   10bd4:	b	10c18 <_Unwind_Find_FDE@@GCC_3.0+0x328>
   10bd8:	mov	x0, x2
   10bdc:	mov	x4, #0x0                   	// #0
   10be0:	mov	w7, #0x0                   	// #0
   10be4:	ldrb	w8, [x0], #1
   10be8:	and	x6, x8, #0x7f
   10bec:	lsl	x6, x6, x7
   10bf0:	add	w7, w7, #0x7
   10bf4:	orr	x4, x4, x6
   10bf8:	tbnz	w8, #7, 10be4 <_Unwind_Find_FDE@@GCC_3.0+0x2f4>
   10bfc:	cmp	w7, #0x3f
   10c00:	b.hi	10b50 <_Unwind_Find_FDE@@GCC_3.0+0x260>  // b.pmore
   10c04:	tbz	w8, #6, 10b50 <_Unwind_Find_FDE@@GCC_3.0+0x260>
   10c08:	mov	x6, #0xffffffffffffffff    	// #-1
   10c0c:	lsl	x7, x6, x7
   10c10:	orr	x4, x4, x7
   10c14:	nop
   10c18:	and	w6, w5, #0x70
   10c1c:	cmp	w6, #0x10
   10c20:	csel	x1, x2, x1, eq  // eq = none
   10c24:	add	x4, x4, x1
   10c28:	tbz	w5, #7, 10b54 <_Unwind_Find_FDE@@GCC_3.0+0x264>
   10c2c:	ldr	x4, [x4]
   10c30:	str	x4, [x3]
   10c34:	ret
   10c38:	add	x0, x2, #0x7
   10c3c:	and	x0, x0, #0xfffffffffffffff8
   10c40:	ldr	x4, [x0], #8
   10c44:	str	x4, [x3]
   10c48:	ret
   10c4c:	mov	x0, x2
   10c50:	ldrh	w4, [x0], #2
   10c54:	cbz	x4, 10b54 <_Unwind_Find_FDE@@GCC_3.0+0x264>
   10c58:	b	10c18 <_Unwind_Find_FDE@@GCC_3.0+0x328>
   10c5c:	mov	x0, x2
   10c60:	ldrsw	x4, [x0], #4
   10c64:	cbz	x4, 10b54 <_Unwind_Find_FDE@@GCC_3.0+0x264>
   10c68:	b	10c18 <_Unwind_Find_FDE@@GCC_3.0+0x328>
   10c6c:	stp	x29, x30, [sp, #-16]!
   10c70:	mov	x29, sp
   10c74:	bl	2c50 <abort@plt>

0000000000010c78 <__gcc_personality_v0@@GCC_3.3.1>:
   10c78:	stp	x29, x30, [sp, #-160]!
   10c7c:	cmp	w0, #0x1
   10c80:	mov	x29, sp
   10c84:	str	wzr, [sp, #84]
   10c88:	b.ne	10c9c <__gcc_personality_v0@@GCC_3.3.1+0x24>  // b.any
   10c8c:	tbnz	w1, #1, 10ca8 <__gcc_personality_v0@@GCC_3.3.1+0x30>
   10c90:	mov	w0, #0x8                   	// #8
   10c94:	ldp	x29, x30, [sp], #160
   10c98:	ret
   10c9c:	mov	w0, #0x3                   	// #3
   10ca0:	ldp	x29, x30, [sp], #160
   10ca4:	ret
   10ca8:	mov	x0, x4
   10cac:	stp	x19, x20, [sp, #16]
   10cb0:	mov	x20, x4
   10cb4:	stp	x21, x22, [sp, #32]
   10cb8:	mov	x22, x3
   10cbc:	bl	2af0 <_Unwind_GetLanguageSpecificData@plt>
   10cc0:	mov	x19, x0
   10cc4:	cbz	x0, 10d10 <__gcc_personality_v0@@GCC_3.3.1+0x98>
   10cc8:	mov	x0, #0x0                   	// #0
   10ccc:	cbz	x20, 10cd8 <__gcc_personality_v0@@GCC_3.3.1+0x60>
   10cd0:	mov	x0, x20
   10cd4:	bl	2ab0 <_Unwind_GetRegionStart@plt>
   10cd8:	str	x0, [sp, #112]
   10cdc:	ldrb	w21, [x19], #1
   10ce0:	cmp	w21, #0xff
   10ce4:	b.eq	11020 <__gcc_personality_v0@@GCC_3.3.1+0x3a8>  // b.none
   10ce8:	and	w0, w21, #0x70
   10cec:	cmp	w0, #0x30
   10cf0:	b.eq	11064 <__gcc_personality_v0@@GCC_3.3.1+0x3ec>  // b.none
   10cf4:	b.hi	10d20 <__gcc_personality_v0@@GCC_3.3.1+0xa8>  // b.pmore
   10cf8:	cmp	w0, #0x20
   10cfc:	b.ne	10d38 <__gcc_personality_v0@@GCC_3.3.1+0xc0>  // b.any
   10d00:	mov	x0, x20
   10d04:	bl	2b50 <_Unwind_GetTextRelBase@plt>
   10d08:	mov	x1, x0
   10d0c:	b	10d5c <__gcc_personality_v0@@GCC_3.3.1+0xe4>
   10d10:	mov	w0, #0x8                   	// #8
   10d14:	ldp	x19, x20, [sp, #16]
   10d18:	ldp	x21, x22, [sp, #32]
   10d1c:	b	10c94 <__gcc_personality_v0@@GCC_3.3.1+0x1c>
   10d20:	cmp	w0, #0x40
   10d24:	b.ne	10d50 <__gcc_personality_v0@@GCC_3.3.1+0xd8>  // b.any
   10d28:	mov	x0, x20
   10d2c:	bl	2ab0 <_Unwind_GetRegionStart@plt>
   10d30:	mov	x1, x0
   10d34:	b	10d5c <__gcc_personality_v0@@GCC_3.3.1+0xe4>
   10d38:	b.hi	10d44 <__gcc_personality_v0@@GCC_3.3.1+0xcc>  // b.pmore
   10d3c:	tst	w21, #0x60
   10d40:	b.eq	1105c <__gcc_personality_v0@@GCC_3.3.1+0x3e4>  // b.none
   10d44:	stp	x23, x24, [sp, #48]
   10d48:	stp	x25, x26, [sp, #64]
   10d4c:	bl	2c50 <abort@plt>
   10d50:	cmp	w0, #0x50
   10d54:	mov	x1, #0x0                   	// #0
   10d58:	b.ne	10d44 <__gcc_personality_v0@@GCC_3.3.1+0xcc>  // b.any
   10d5c:	mov	x2, x19
   10d60:	mov	w0, w21
   10d64:	add	x3, sp, #0x78
   10d68:	bl	10b18 <_Unwind_Find_FDE@@GCC_3.0+0x228>
   10d6c:	mov	x19, x0
   10d70:	ldrb	w0, [x19], #1
   10d74:	strb	w0, [sp, #152]
   10d78:	cmp	w0, #0xff
   10d7c:	b.eq	11028 <__gcc_personality_v0@@GCC_3.3.1+0x3b0>  // b.none
   10d80:	mov	x3, #0x0                   	// #0
   10d84:	mov	w1, #0x0                   	// #0
   10d88:	ldrb	w2, [x19], #1
   10d8c:	and	x0, x2, #0x7f
   10d90:	lsl	x0, x0, x1
   10d94:	add	w1, w1, #0x7
   10d98:	orr	x3, x3, x0
   10d9c:	tbnz	w2, #7, 10d88 <__gcc_personality_v0@@GCC_3.3.1+0x110>
   10da0:	add	x3, x19, x3
   10da4:	str	x3, [sp, #136]
   10da8:	ldrb	w0, [x19], #1
   10dac:	mov	x3, #0x0                   	// #0
   10db0:	mov	w1, #0x0                   	// #0
   10db4:	strb	w0, [sp, #153]
   10db8:	ldrb	w2, [x19], #1
   10dbc:	and	x0, x2, #0x7f
   10dc0:	lsl	x0, x0, x1
   10dc4:	add	w1, w1, #0x7
   10dc8:	orr	x3, x3, x0
   10dcc:	tbnz	w2, #7, 10db8 <__gcc_personality_v0@@GCC_3.3.1+0x140>
   10dd0:	add	x3, x19, x3
   10dd4:	add	x1, sp, #0x54
   10dd8:	mov	x0, x20
   10ddc:	str	x3, [sp, #144]
   10de0:	bl	2c00 <_Unwind_GetIPInfo@plt>
   10de4:	ldr	w2, [sp, #84]
   10de8:	ldr	x1, [sp, #144]
   10dec:	cmp	w2, #0x0
   10df0:	cset	x2, eq  // eq = none
   10df4:	sub	x21, x0, x2
   10df8:	cmp	x1, x19
   10dfc:	b.ls	10d10 <__gcc_personality_v0@@GCC_3.3.1+0x98>  // b.plast
   10e00:	stp	x23, x24, [sp, #48]
   10e04:	add	x24, sp, #0x60
   10e08:	add	x23, sp, #0x68
   10e0c:	stp	x25, x26, [sp, #64]
   10e10:	add	x25, sp, #0x58
   10e14:	nop
   10e18:	ldrb	w26, [sp, #153]
   10e1c:	cmp	w26, #0xff
   10e20:	b.eq	10f50 <__gcc_personality_v0@@GCC_3.3.1+0x2d8>  // b.none
   10e24:	and	w0, w26, #0x70
   10e28:	cmp	w0, #0x30
   10e2c:	b.eq	11010 <__gcc_personality_v0@@GCC_3.3.1+0x398>  // b.none
   10e30:	b.hi	10fa0 <__gcc_personality_v0@@GCC_3.3.1+0x328>  // b.pmore
   10e34:	cmp	w0, #0x20
   10e38:	b.ne	10f90 <__gcc_personality_v0@@GCC_3.3.1+0x318>  // b.any
   10e3c:	mov	x0, #0x0                   	// #0
   10e40:	bl	2b50 <_Unwind_GetTextRelBase@plt>
   10e44:	mov	x1, x0
   10e48:	mov	x2, x19
   10e4c:	mov	w0, w26
   10e50:	mov	x3, x25
   10e54:	bl	10b18 <_Unwind_Find_FDE@@GCC_3.0+0x228>
   10e58:	ldrb	w19, [sp, #153]
   10e5c:	mov	x26, x0
   10e60:	cmp	w19, #0xff
   10e64:	b.eq	10f40 <__gcc_personality_v0@@GCC_3.3.1+0x2c8>  // b.none
   10e68:	and	w0, w19, #0x70
   10e6c:	cmp	w0, #0x30
   10e70:	b.eq	11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>  // b.none
   10e74:	b.hi	10f68 <__gcc_personality_v0@@GCC_3.3.1+0x2f0>  // b.pmore
   10e78:	cmp	w0, #0x20
   10e7c:	b.ne	10f58 <__gcc_personality_v0@@GCC_3.3.1+0x2e0>  // b.any
   10e80:	mov	x0, #0x0                   	// #0
   10e84:	bl	2b50 <_Unwind_GetTextRelBase@plt>
   10e88:	mov	x1, x0
   10e8c:	nop
   10e90:	mov	x2, x26
   10e94:	mov	w0, w19
   10e98:	mov	x3, x24
   10e9c:	bl	10b18 <_Unwind_Find_FDE@@GCC_3.0+0x228>
   10ea0:	ldrb	w19, [sp, #153]
   10ea4:	mov	x26, x0
   10ea8:	cmp	w19, #0xff
   10eac:	b.eq	10f30 <__gcc_personality_v0@@GCC_3.3.1+0x2b8>  // b.none
   10eb0:	and	w0, w19, #0x70
   10eb4:	cmp	w0, #0x30
   10eb8:	b.eq	10ff0 <__gcc_personality_v0@@GCC_3.3.1+0x378>  // b.none
   10ebc:	b.hi	10fb8 <__gcc_personality_v0@@GCC_3.3.1+0x340>  // b.pmore
   10ec0:	cmp	w0, #0x20
   10ec4:	b.ne	10f80 <__gcc_personality_v0@@GCC_3.3.1+0x308>  // b.any
   10ec8:	mov	x0, #0x0                   	// #0
   10ecc:	bl	2b50 <_Unwind_GetTextRelBase@plt>
   10ed0:	mov	x1, x0
   10ed4:	nop
   10ed8:	mov	w0, w19
   10edc:	mov	x2, x26
   10ee0:	mov	x3, x23
   10ee4:	bl	10b18 <_Unwind_Find_FDE@@GCC_3.0+0x228>
   10ee8:	mov	x19, x0
   10eec:	nop
   10ef0:	ldrsb	w0, [x19], #1
   10ef4:	tbnz	w0, #31, 10ef0 <__gcc_personality_v0@@GCC_3.3.1+0x278>
   10ef8:	ldr	x1, [sp, #88]
   10efc:	ldr	x0, [sp, #112]
   10f00:	add	x0, x0, x1
   10f04:	cmp	x0, x21
   10f08:	b.ls	10fd0 <__gcc_personality_v0@@GCC_3.3.1+0x358>  // b.plast
   10f0c:	mov	w0, #0x8                   	// #8
   10f10:	ldp	x19, x20, [sp, #16]
   10f14:	ldp	x21, x22, [sp, #32]
   10f18:	ldp	x23, x24, [sp, #48]
   10f1c:	ldp	x25, x26, [sp, #64]
   10f20:	ldp	x29, x30, [sp], #160
   10f24:	ret
   10f28:	cmp	w0, #0x50
   10f2c:	b.ne	10d4c <__gcc_personality_v0@@GCC_3.3.1+0xd4>  // b.any
   10f30:	mov	x1, #0x0                   	// #0
   10f34:	b	10ed8 <__gcc_personality_v0@@GCC_3.3.1+0x260>
   10f38:	cmp	w0, #0x50
   10f3c:	b.ne	10d4c <__gcc_personality_v0@@GCC_3.3.1+0xd4>  // b.any
   10f40:	mov	x1, #0x0                   	// #0
   10f44:	b	10e90 <__gcc_personality_v0@@GCC_3.3.1+0x218>
   10f48:	cmp	w0, #0x50
   10f4c:	b.ne	10d4c <__gcc_personality_v0@@GCC_3.3.1+0xd4>  // b.any
   10f50:	mov	x1, #0x0                   	// #0
   10f54:	b	10e48 <__gcc_personality_v0@@GCC_3.3.1+0x1d0>
   10f58:	b.hi	10d4c <__gcc_personality_v0@@GCC_3.3.1+0xd4>  // b.pmore
   10f5c:	tst	w19, #0x60
   10f60:	b.eq	10f40 <__gcc_personality_v0@@GCC_3.3.1+0x2c8>  // b.none
   10f64:	bl	2c50 <abort@plt>
   10f68:	cmp	w0, #0x40
   10f6c:	b.ne	10f38 <__gcc_personality_v0@@GCC_3.3.1+0x2c0>  // b.any
   10f70:	mov	x0, #0x0                   	// #0
   10f74:	bl	2ab0 <_Unwind_GetRegionStart@plt>
   10f78:	mov	x1, x0
   10f7c:	b	10e90 <__gcc_personality_v0@@GCC_3.3.1+0x218>
   10f80:	b.hi	10d4c <__gcc_personality_v0@@GCC_3.3.1+0xd4>  // b.pmore
   10f84:	tst	w19, #0x60
   10f88:	b.eq	10f30 <__gcc_personality_v0@@GCC_3.3.1+0x2b8>  // b.none
   10f8c:	bl	2c50 <abort@plt>
   10f90:	b.hi	10d4c <__gcc_personality_v0@@GCC_3.3.1+0xd4>  // b.pmore
   10f94:	tst	w26, #0x60
   10f98:	b.eq	10f50 <__gcc_personality_v0@@GCC_3.3.1+0x2d8>  // b.none
   10f9c:	bl	2c50 <abort@plt>
   10fa0:	cmp	w0, #0x40
   10fa4:	b.ne	10f48 <__gcc_personality_v0@@GCC_3.3.1+0x2d0>  // b.any
   10fa8:	mov	x0, #0x0                   	// #0
   10fac:	bl	2ab0 <_Unwind_GetRegionStart@plt>
   10fb0:	mov	x1, x0
   10fb4:	b	10e48 <__gcc_personality_v0@@GCC_3.3.1+0x1d0>
   10fb8:	cmp	w0, #0x40
   10fbc:	b.ne	10f28 <__gcc_personality_v0@@GCC_3.3.1+0x2b0>  // b.any
   10fc0:	mov	x0, #0x0                   	// #0
   10fc4:	bl	2ab0 <_Unwind_GetRegionStart@plt>
   10fc8:	mov	x1, x0
   10fcc:	b	10ed8 <__gcc_personality_v0@@GCC_3.3.1+0x260>
   10fd0:	ldr	x1, [sp, #96]
   10fd4:	add	x0, x0, x1
   10fd8:	cmp	x0, x21
   10fdc:	b.hi	11030 <__gcc_personality_v0@@GCC_3.3.1+0x3b8>  // b.pmore
   10fe0:	ldr	x0, [sp, #144]
   10fe4:	cmp	x0, x19
   10fe8:	b.hi	10e18 <__gcc_personality_v0@@GCC_3.3.1+0x1a0>  // b.pmore
   10fec:	b	11044 <__gcc_personality_v0@@GCC_3.3.1+0x3cc>
   10ff0:	mov	x0, #0x0                   	// #0
   10ff4:	bl	2da0 <_Unwind_GetDataRelBase@plt>
   10ff8:	mov	x1, x0
   10ffc:	b	10ed8 <__gcc_personality_v0@@GCC_3.3.1+0x260>
   11000:	mov	x0, #0x0                   	// #0
   11004:	bl	2da0 <_Unwind_GetDataRelBase@plt>
   11008:	mov	x1, x0
   1100c:	b	10e90 <__gcc_personality_v0@@GCC_3.3.1+0x218>
   11010:	mov	x0, #0x0                   	// #0
   11014:	bl	2da0 <_Unwind_GetDataRelBase@plt>
   11018:	mov	x1, x0
   1101c:	b	10e48 <__gcc_personality_v0@@GCC_3.3.1+0x1d0>
   11020:	str	x0, [sp, #120]
   11024:	b	10d70 <__gcc_personality_v0@@GCC_3.3.1+0xf8>
   11028:	str	xzr, [sp, #136]
   1102c:	b	10da8 <__gcc_personality_v0@@GCC_3.3.1+0x130>
   11030:	ldr	x0, [sp, #104]
   11034:	cbz	x0, 10f0c <__gcc_personality_v0@@GCC_3.3.1+0x294>
   11038:	ldr	x19, [sp, #120]
   1103c:	adds	x19, x0, x19
   11040:	b.ne	11074 <__gcc_personality_v0@@GCC_3.3.1+0x3fc>  // b.any
   11044:	mov	w0, #0x8                   	// #8
   11048:	ldp	x19, x20, [sp, #16]
   1104c:	ldp	x21, x22, [sp, #32]
   11050:	ldp	x23, x24, [sp, #48]
   11054:	ldp	x25, x26, [sp, #64]
   11058:	b	10c94 <__gcc_personality_v0@@GCC_3.3.1+0x1c>
   1105c:	mov	x1, #0x0                   	// #0
   11060:	b	10d5c <__gcc_personality_v0@@GCC_3.3.1+0xe4>
   11064:	mov	x0, x20
   11068:	bl	2da0 <_Unwind_GetDataRelBase@plt>
   1106c:	mov	x1, x0
   11070:	b	10d5c <__gcc_personality_v0@@GCC_3.3.1+0xe4>
   11074:	mov	x2, x22
   11078:	mov	x0, x20
   1107c:	mov	w1, #0x0                   	// #0
   11080:	bl	2d40 <_Unwind_SetGR@plt>
   11084:	mov	x2, #0x0                   	// #0
   11088:	mov	x0, x20
   1108c:	mov	w1, #0x1                   	// #1
   11090:	bl	2d40 <_Unwind_SetGR@plt>
   11094:	mov	x0, x20
   11098:	mov	x1, x19
   1109c:	bl	2ae0 <_Unwind_SetIP@plt>
   110a0:	mov	w0, #0x7                   	// #7
   110a4:	ldp	x19, x20, [sp, #16]
   110a8:	ldp	x21, x22, [sp, #32]
   110ac:	ldp	x23, x24, [sp, #48]
   110b0:	ldp	x25, x26, [sp, #64]
   110b4:	b	10ca0 <__gcc_personality_v0@@GCC_3.3.1+0x28>
   110b8:	stp	x29, x30, [sp, #-16]!
   110bc:	adrp	x1, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
   110c0:	adrp	x0, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
   110c4:	mov	x29, sp
   110c8:	add	x1, x1, #0xe8
   110cc:	add	x0, x0, #0x428
   110d0:	bl	2c30 <pthread_key_create@plt>
   110d4:	cbnz	w0, 110e0 <__gcc_personality_v0@@GCC_3.3.1+0x468>
   110d8:	ldp	x29, x30, [sp], #16
   110dc:	ret
   110e0:	bl	2c50 <abort@plt>
   110e4:	nop
   110e8:	stp	x29, x30, [sp, #-48]!
   110ec:	mov	x29, sp
   110f0:	str	x21, [sp, #32]
   110f4:	ldr	x21, [x0]
   110f8:	stp	x19, x20, [sp, #16]
   110fc:	mov	x20, x0
   11100:	cbz	x21, 11124 <__gcc_personality_v0@@GCC_3.3.1+0x4ac>
   11104:	mov	x19, #0x1                   	// #1
   11108:	ldr	x1, [x20, x19, lsl #3]
   1110c:	cbz	x1, 11118 <__gcc_personality_v0@@GCC_3.3.1+0x4a0>
   11110:	ldur	x0, [x1, #-8]
   11114:	bl	2cc0 <free@plt>
   11118:	cmp	x21, x19
   1111c:	add	x19, x19, #0x1
   11120:	b.ne	11108 <__gcc_personality_v0@@GCC_3.3.1+0x490>  // b.any
   11124:	mov	x0, x20
   11128:	ldp	x19, x20, [sp, #16]
   1112c:	ldr	x21, [sp, #32]
   11130:	ldp	x29, x30, [sp], #48
   11134:	b	2cc0 <free@plt>
   11138:	stp	x29, x30, [sp, #-48]!
   1113c:	mov	x29, sp
   11140:	stp	x19, x20, [sp, #16]
   11144:	mov	x19, x0
   11148:	ldr	x20, [x0, #8]
   1114c:	str	x21, [sp, #32]
   11150:	ldr	x21, [x0]
   11154:	cmp	x20, #0x8
   11158:	b.hi	1119c <__gcc_personality_v0@@GCC_3.3.1+0x524>  // b.pmore
   1115c:	add	x0, x21, #0x8
   11160:	bl	2b70 <malloc@plt>
   11164:	cbz	x0, 111f0 <__gcc_personality_v0@@GCC_3.3.1+0x578>
   11168:	ldr	x1, [x19, #24]
   1116c:	str	x0, [x0]
   11170:	add	x3, x0, #0x8
   11174:	mov	x2, x21
   11178:	cbz	x1, 111cc <__gcc_personality_v0@@GCC_3.3.1+0x554>
   1117c:	mov	x0, x3
   11180:	bl	2aa0 <memcpy@plt>
   11184:	mov	x3, x0
   11188:	mov	x0, x3
   1118c:	ldp	x19, x20, [sp, #16]
   11190:	ldr	x21, [sp, #32]
   11194:	ldp	x29, x30, [sp], #48
   11198:	ret
   1119c:	add	x0, x20, x21
   111a0:	add	x0, x0, #0x7
   111a4:	bl	2b70 <malloc@plt>
   111a8:	cbz	x0, 111f0 <__gcc_personality_v0@@GCC_3.3.1+0x578>
   111ac:	add	x3, x20, #0x7
   111b0:	neg	x20, x20
   111b4:	add	x3, x0, x3
   111b8:	mov	x2, x21
   111bc:	and	x3, x3, x20
   111c0:	stur	x0, [x3, #-8]
   111c4:	ldr	x1, [x19, #24]
   111c8:	cbnz	x1, 1117c <__gcc_personality_v0@@GCC_3.3.1+0x504>
   111cc:	mov	x0, x3
   111d0:	mov	w1, #0x0                   	// #0
   111d4:	bl	2ba0 <memset@plt>
   111d8:	mov	x3, x0
   111dc:	mov	x0, x3
   111e0:	ldp	x19, x20, [sp, #16]
   111e4:	ldr	x21, [sp, #32]
   111e8:	ldp	x29, x30, [sp], #48
   111ec:	ret
   111f0:	bl	2c50 <abort@plt>
   111f4:	nop

00000000000111f8 <__emutls_get_address@@GCC_4.3.0>:
   111f8:	stp	x29, x30, [sp, #-64]!
   111fc:	adrp	x1, 23000 <__emutls_register_common@@GCC_4.3.0+0x11c90>
   11200:	mov	x29, sp
   11204:	ldr	x1, [x1, #4032]
   11208:	stp	x19, x20, [sp, #16]
   1120c:	mov	x20, x0
   11210:	cbz	x1, 11268 <__emutls_get_address@@GCC_4.3.0+0x70>
   11214:	add	x19, x0, #0x10
   11218:	stp	x21, x22, [sp, #32]
   1121c:	ldar	x21, [x19]
   11220:	adrp	x22, 24000 <__emutls_register_common@@GCC_4.3.0+0x12c90>
   11224:	cbz	x21, 11280 <__emutls_get_address@@GCC_4.3.0+0x88>
   11228:	ldr	w0, [x22, #1064]
   1122c:	bl	2b80 <pthread_getspecific@plt>
   11230:	mov	x19, x0
   11234:	cbz	x0, 112bc <__emutls_get_address@@GCC_4.3.0+0xc4>
   11238:	stp	x23, x24, [sp, #48]
   1123c:	ldr	x23, [x0]
   11240:	cmp	x23, x21
   11244:	b.cc	11300 <__emutls_get_address@@GCC_4.3.0+0x108>  // b.lo, b.ul, b.last
   11248:	ldp	x23, x24, [sp, #48]
   1124c:	ldr	x1, [x19, x21, lsl #3]
   11250:	cbz	x1, 112e8 <__emutls_get_address@@GCC_4.3.0+0xf0>
   11254:	ldp	x21, x22, [sp, #32]
   11258:	mov	x0, x1
   1125c:	ldp	x19, x20, [sp, #16]
   11260:	ldp	x29, x30, [sp], #64
   11264:	ret
   11268:	ldr	x1, [x0, #16]
   1126c:	cbnz	x1, 11258 <__emutls_get_address@@GCC_4.3.0+0x60>
   11270:	bl	11138 <__gcc_personality_v0@@GCC_3.3.1+0x4c0>
   11274:	mov	x1, x0
   11278:	str	x0, [x20, #16]
   1127c:	b	11258 <__emutls_get_address@@GCC_4.3.0+0x60>
   11280:	adrp	x1, 11000 <__gcc_personality_v0@@GCC_3.3.1+0x388>
   11284:	add	x1, x1, #0xb8
   11288:	stp	x23, x24, [sp, #48]
   1128c:	add	x23, x22, #0x428
   11290:	add	x0, x23, #0x4
   11294:	bl	2c70 <pthread_once@plt>
   11298:	add	x0, x23, #0x8
   1129c:	bl	2d50 <pthread_mutex_lock@plt>
   112a0:	ldr	x21, [x20, #16]
   112a4:	cbz	x21, 11350 <__emutls_get_address@@GCC_4.3.0+0x158>
   112a8:	add	x0, x22, #0x428
   112ac:	add	x0, x0, #0x8
   112b0:	bl	2d60 <pthread_mutex_unlock@plt>
   112b4:	ldp	x23, x24, [sp, #48]
   112b8:	b	11228 <__emutls_get_address@@GCC_4.3.0+0x30>
   112bc:	add	x0, x21, #0x21
   112c0:	mov	x1, #0x8                   	// #8
   112c4:	bl	2be0 <calloc@plt>
   112c8:	mov	x19, x0
   112cc:	add	x2, x21, #0x20
   112d0:	cbz	x0, 11364 <__emutls_get_address@@GCC_4.3.0+0x16c>
   112d4:	ldr	w0, [x22, #1064]
   112d8:	mov	x1, x19
   112dc:	str	x2, [x19]
   112e0:	bl	2ca0 <pthread_setspecific@plt>
   112e4:	b	1124c <__emutls_get_address@@GCC_4.3.0+0x54>
   112e8:	mov	x0, x20
   112ec:	bl	11138 <__gcc_personality_v0@@GCC_3.3.1+0x4c0>
   112f0:	mov	x1, x0
   112f4:	str	x0, [x19, x21, lsl #3]
   112f8:	ldp	x21, x22, [sp, #32]
   112fc:	b	11258 <__emutls_get_address@@GCC_4.3.0+0x60>
   11300:	lsl	x24, x23, #1
   11304:	add	x1, x21, #0x20
   11308:	cmp	x21, x24
   1130c:	csel	x24, x1, x24, hi  // hi = pmore
   11310:	add	x1, x24, #0x1
   11314:	lsl	x1, x1, #3
   11318:	bl	2c10 <realloc@plt>
   1131c:	mov	x19, x0
   11320:	cbz	x0, 11368 <__emutls_get_address@@GCC_4.3.0+0x170>
   11324:	sub	x2, x24, x23
   11328:	str	x24, [x0], #8
   1132c:	mov	w1, #0x0                   	// #0
   11330:	lsl	x2, x2, #3
   11334:	add	x0, x0, x23, lsl #3
   11338:	bl	2ba0 <memset@plt>
   1133c:	ldr	w0, [x22, #1064]
   11340:	mov	x1, x19
   11344:	bl	2ca0 <pthread_setspecific@plt>
   11348:	ldp	x23, x24, [sp, #48]
   1134c:	b	1124c <__emutls_get_address@@GCC_4.3.0+0x54>
   11350:	ldr	x21, [x23, #56]
   11354:	add	x21, x21, #0x1
   11358:	str	x21, [x23, #56]
   1135c:	stlr	x21, [x19]
   11360:	b	112a8 <__emutls_get_address@@GCC_4.3.0+0xb0>
   11364:	stp	x23, x24, [sp, #48]
   11368:	bl	2c50 <abort@plt>
   1136c:	nop

0000000000011370 <__emutls_register_common@@GCC_4.3.0>:
   11370:	ldr	x4, [x0]
   11374:	cmp	x4, x1
   11378:	b.cs	11388 <__emutls_register_common@@GCC_4.3.0+0x18>  // b.hs, b.nlast
   1137c:	mov	x4, x1
   11380:	str	x1, [x0]
   11384:	str	xzr, [x0, #24]
   11388:	ldr	x5, [x0, #8]
   1138c:	cmp	x5, x2
   11390:	b.cs	11398 <__emutls_register_common@@GCC_4.3.0+0x28>  // b.hs, b.nlast
   11394:	str	x2, [x0, #8]
   11398:	cbz	x3, 113a4 <__emutls_register_common@@GCC_4.3.0+0x34>
   1139c:	cmp	x1, x4
   113a0:	b.eq	113a8 <__emutls_register_common@@GCC_4.3.0+0x38>  // b.none
   113a4:	ret
   113a8:	str	x3, [x0, #24]
   113ac:	ret

Disassembly of section .fini:

00000000000113b0 <.fini>:
   113b0:	stp	x29, x30, [sp, #-16]!
   113b4:	mov	x29, sp
   113b8:	ldp	x29, x30, [sp], #16
   113bc:	ret
