
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//gcry_rijndael.module_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <do_encrypt_aligned>:
   0:	ldr	w13, [x0, #480]
   4:	ldr	w4, [x2]
   8:	ldr	w3, [x0]
   c:	eor	w3, w4, w3
  10:	ldr	w5, [x2, #4]
  14:	ldr	w4, [x0, #4]
  18:	eor	w5, w5, w4
  1c:	ldr	w6, [x2, #8]
  20:	ldr	w4, [x0, #8]
  24:	eor	w4, w6, w4
  28:	ldr	w6, [x2, #12]
  2c:	ldr	w2, [x0, #12]
  30:	eor	w2, w6, w2
  34:	adrp	x6, 0 <do_encrypt_aligned>
  38:	ldr	x6, [x6]
  3c:	and	x7, x3, #0xff
  40:	add	x10, x6, #0x400
  44:	ubfx	x8, x5, #8, #8
  48:	ldr	w7, [x6, x7, lsl #2]
  4c:	ldr	w8, [x10, x8, lsl #2]
  50:	eor	w7, w7, w8
  54:	add	x9, x6, #0x800
  58:	ubfx	x11, x4, #16, #8
  5c:	add	x8, x6, #0xc00
  60:	lsr	w12, w2, #24
  64:	ldr	w11, [x9, x11, lsl #2]
  68:	ldr	w12, [x8, x12, lsl #2]
  6c:	eor	w11, w11, w12
  70:	eor	w7, w7, w11
  74:	str	w7, [x1]
  78:	and	x7, x5, #0xff
  7c:	ubfx	x11, x4, #8, #8
  80:	ldr	w7, [x6, x7, lsl #2]
  84:	ldr	w11, [x10, x11, lsl #2]
  88:	eor	w7, w7, w11
  8c:	ubfx	x11, x2, #16, #8
  90:	lsr	w12, w3, #24
  94:	ldr	w11, [x9, x11, lsl #2]
  98:	ldr	w12, [x8, x12, lsl #2]
  9c:	eor	w11, w11, w12
  a0:	eor	w7, w7, w11
  a4:	str	w7, [x1, #4]
  a8:	and	x7, x4, #0xff
  ac:	ubfx	x11, x2, #8, #8
  b0:	ldr	w7, [x6, x7, lsl #2]
  b4:	ldr	w11, [x10, x11, lsl #2]
  b8:	eor	w7, w7, w11
  bc:	ubfx	x11, x3, #16, #8
  c0:	lsr	w12, w5, #24
  c4:	ldr	w11, [x9, x11, lsl #2]
  c8:	ldr	w12, [x8, x12, lsl #2]
  cc:	eor	w11, w11, w12
  d0:	eor	w7, w7, w11
  d4:	str	w7, [x1, #8]
  d8:	and	x2, x2, #0xff
  dc:	ubfx	x3, x3, #8, #8
  e0:	ldr	w2, [x6, x2, lsl #2]
  e4:	ldr	w3, [x10, x3, lsl #2]
  e8:	eor	w2, w2, w3
  ec:	ubfx	x5, x5, #16, #8
  f0:	lsr	w4, w4, #24
  f4:	ldr	w3, [x9, x5, lsl #2]
  f8:	ldr	w4, [x8, x4, lsl #2]
  fc:	eor	w3, w3, w4
 100:	eor	w2, w2, w3
 104:	str	w2, [x1, #12]
 108:	sub	w12, w13, #0x1
 10c:	cmp	w12, #0x1
 110:	b.le	234 <do_encrypt_aligned+0x234>
 114:	add	x7, x0, #0x10
 118:	sub	w13, w13, #0x3
 11c:	add	x2, x0, #0x20
 120:	add	x13, x2, x13, lsl #4
 124:	adrp	x14, 0 <do_encrypt_aligned>
 128:	ldr	w4, [x1]
 12c:	ldr	w2, [x7]
 130:	eor	w4, w4, w2
 134:	ldr	w3, [x1, #4]
 138:	ldr	w2, [x7, #4]
 13c:	eor	w3, w3, w2
 140:	ldr	w5, [x1, #8]
 144:	ldr	w2, [x7, #8]
 148:	eor	w2, w5, w2
 14c:	ldr	w6, [x1, #12]
 150:	ldr	w5, [x7, #12]
 154:	eor	w5, w6, w5
 158:	ldr	x6, [x14]
 15c:	and	x8, x4, #0xff
 160:	add	x11, x6, #0x400
 164:	ubfx	x9, x3, #8, #8
 168:	ldr	w8, [x6, x8, lsl #2]
 16c:	ldr	w9, [x11, x9, lsl #2]
 170:	eor	w8, w8, w9
 174:	add	x10, x6, #0x800
 178:	ubfx	x15, x2, #16, #8
 17c:	add	x9, x6, #0xc00
 180:	lsr	w16, w5, #24
 184:	ldr	w15, [x10, x15, lsl #2]
 188:	ldr	w16, [x9, x16, lsl #2]
 18c:	eor	w15, w15, w16
 190:	eor	w8, w8, w15
 194:	str	w8, [x1]
 198:	and	x8, x3, #0xff
 19c:	ubfx	x15, x2, #8, #8
 1a0:	ldr	w8, [x6, x8, lsl #2]
 1a4:	ldr	w15, [x11, x15, lsl #2]
 1a8:	eor	w8, w8, w15
 1ac:	ubfx	x15, x5, #16, #8
 1b0:	lsr	w16, w4, #24
 1b4:	ldr	w15, [x10, x15, lsl #2]
 1b8:	ldr	w16, [x9, x16, lsl #2]
 1bc:	eor	w15, w15, w16
 1c0:	eor	w8, w8, w15
 1c4:	str	w8, [x1, #4]
 1c8:	and	x8, x2, #0xff
 1cc:	ubfx	x15, x5, #8, #8
 1d0:	ldr	w8, [x6, x8, lsl #2]
 1d4:	ldr	w15, [x11, x15, lsl #2]
 1d8:	eor	w8, w8, w15
 1dc:	ubfx	x15, x4, #16, #8
 1e0:	lsr	w16, w3, #24
 1e4:	ldr	w15, [x10, x15, lsl #2]
 1e8:	ldr	w16, [x9, x16, lsl #2]
 1ec:	eor	w15, w15, w16
 1f0:	eor	w8, w8, w15
 1f4:	str	w8, [x1, #8]
 1f8:	and	x5, x5, #0xff
 1fc:	ubfx	x4, x4, #8, #8
 200:	ldr	w5, [x6, x5, lsl #2]
 204:	ldr	w4, [x11, x4, lsl #2]
 208:	eor	w4, w5, w4
 20c:	ubfx	x3, x3, #16, #8
 210:	lsr	w2, w2, #24
 214:	ldr	w3, [x10, x3, lsl #2]
 218:	ldr	w2, [x9, x2, lsl #2]
 21c:	eor	w2, w3, w2
 220:	eor	w2, w4, w2
 224:	str	w2, [x1, #12]
 228:	add	x7, x7, #0x10
 22c:	cmp	x7, x13
 230:	b.ne	128 <do_encrypt_aligned+0x128>  // b.any
 234:	sbfiz	x12, x12, #4, #32
 238:	ldr	w5, [x0, x12]
 23c:	ldr	w2, [x1]
 240:	eor	w5, w5, w2
 244:	add	x0, x0, x12
 248:	ldr	w4, [x0, #4]
 24c:	ldr	w2, [x1, #4]
 250:	eor	w4, w4, w2
 254:	ldr	w3, [x0, #8]
 258:	ldr	w2, [x1, #8]
 25c:	eor	w3, w3, w2
 260:	ldr	w6, [x0, #12]
 264:	ldr	w2, [x1, #12]
 268:	eor	w6, w6, w2
 26c:	adrp	x2, 0 <do_encrypt_aligned>
 270:	ldr	x2, [x2]
 274:	add	x7, x2, w5, uxtb #2
 278:	ldrb	w7, [x7, #1]
 27c:	strb	w7, [x1]
 280:	ubfx	x7, x4, #8, #8
 284:	add	x7, x2, x7, lsl #2
 288:	ldrb	w7, [x7, #1]
 28c:	strb	w7, [x1, #1]
 290:	ubfx	x7, x3, #16, #8
 294:	add	x7, x2, x7, lsl #2
 298:	ldrb	w7, [x7, #1]
 29c:	strb	w7, [x1, #2]
 2a0:	lsr	w7, w6, #24
 2a4:	add	x7, x2, x7, lsl #2
 2a8:	ldrb	w7, [x7, #1]
 2ac:	strb	w7, [x1, #3]
 2b0:	add	x7, x2, w4, uxtb #2
 2b4:	ldrb	w7, [x7, #1]
 2b8:	strb	w7, [x1, #4]
 2bc:	ubfx	x7, x3, #8, #8
 2c0:	add	x7, x2, x7, lsl #2
 2c4:	ldrb	w7, [x7, #1]
 2c8:	strb	w7, [x1, #5]
 2cc:	ubfx	x7, x6, #16, #8
 2d0:	add	x7, x2, x7, lsl #2
 2d4:	ldrb	w7, [x7, #1]
 2d8:	strb	w7, [x1, #6]
 2dc:	lsr	w7, w5, #24
 2e0:	add	x7, x2, x7, lsl #2
 2e4:	ldrb	w7, [x7, #1]
 2e8:	strb	w7, [x1, #7]
 2ec:	add	x7, x2, w3, uxtb #2
 2f0:	ldrb	w7, [x7, #1]
 2f4:	strb	w7, [x1, #8]
 2f8:	ubfx	x7, x6, #8, #8
 2fc:	add	x7, x2, x7, lsl #2
 300:	ldrb	w7, [x7, #1]
 304:	strb	w7, [x1, #9]
 308:	ubfx	x7, x5, #16, #8
 30c:	add	x7, x2, x7, lsl #2
 310:	ldrb	w7, [x7, #1]
 314:	strb	w7, [x1, #10]
 318:	lsr	w7, w4, #24
 31c:	add	x7, x2, x7, lsl #2
 320:	ldrb	w7, [x7, #1]
 324:	strb	w7, [x1, #11]
 328:	add	x6, x2, w6, uxtb #2
 32c:	ldrb	w6, [x6, #1]
 330:	strb	w6, [x1, #12]
 334:	ubfx	x5, x5, #8, #8
 338:	add	x5, x2, x5, lsl #2
 33c:	ldrb	w5, [x5, #1]
 340:	strb	w5, [x1, #13]
 344:	ubfx	x4, x4, #16, #8
 348:	add	x4, x2, x4, lsl #2
 34c:	ldrb	w4, [x4, #1]
 350:	strb	w4, [x1, #14]
 354:	lsr	w3, w3, #24
 358:	add	x2, x2, x3, lsl #2
 35c:	ldrb	w2, [x2, #1]
 360:	strb	w2, [x1, #15]
 364:	ldr	w2, [x1]
 368:	ldr	w3, [x0, #16]
 36c:	eor	w2, w2, w3
 370:	str	w2, [x1]
 374:	ldr	w2, [x1, #4]
 378:	ldr	w3, [x0, #20]
 37c:	eor	w2, w2, w3
 380:	str	w2, [x1, #4]
 384:	ldr	w2, [x1, #8]
 388:	ldr	w3, [x0, #24]
 38c:	eor	w2, w2, w3
 390:	str	w2, [x1, #8]
 394:	ldr	w2, [x1, #12]
 398:	ldr	w0, [x0, #28]
 39c:	eor	w0, w2, w0
 3a0:	str	w0, [x1, #12]
 3a4:	ret
	...

00000000000003b0 <do_decrypt_aligned>:
 3b0:	ldr	w12, [x0, #480]
 3b4:	sxtw	x3, w12
 3b8:	add	x3, x3, #0xf
 3bc:	lsl	x3, x3, #4
 3c0:	ldr	w9, [x0, x3]
 3c4:	ldr	w4, [x2]
 3c8:	eor	w9, w9, w4
 3cc:	add	x4, x0, x3
 3d0:	ldr	w10, [x4, #4]
 3d4:	ldr	w5, [x2, #4]
 3d8:	eor	w10, w10, w5
 3dc:	ldr	w6, [x4, #8]
 3e0:	ldr	w5, [x2, #8]
 3e4:	eor	w5, w6, w5
 3e8:	ldr	w4, [x4, #12]
 3ec:	ldr	w2, [x2, #12]
 3f0:	eor	w4, w4, w2
 3f4:	adrp	x2, 0 <do_encrypt_aligned>
 3f8:	ldr	x2, [x2]
 3fc:	sub	x8, x2, #0x100
 400:	and	x6, x9, #0xff
 404:	add	x7, x2, #0x300
 408:	ubfx	x11, x4, #8, #8
 40c:	ldr	w6, [x8, x6, lsl #2]
 410:	ldr	w11, [x7, x11, lsl #2]
 414:	eor	w6, w6, w11
 418:	add	x11, x2, #0x700
 41c:	ubfx	x13, x5, #16, #8
 420:	add	x2, x2, #0xb00
 424:	lsr	w14, w10, #24
 428:	ldr	w13, [x11, x13, lsl #2]
 42c:	ldr	w14, [x2, x14, lsl #2]
 430:	eor	w13, w13, w14
 434:	eor	w6, w6, w13
 438:	str	w6, [x1]
 43c:	and	x6, x10, #0xff
 440:	ubfx	x13, x9, #8, #8
 444:	ldr	w6, [x8, x6, lsl #2]
 448:	ldr	w13, [x7, x13, lsl #2]
 44c:	eor	w6, w6, w13
 450:	ubfx	x13, x4, #16, #8
 454:	lsr	w14, w5, #24
 458:	ldr	w13, [x11, x13, lsl #2]
 45c:	ldr	w14, [x2, x14, lsl #2]
 460:	eor	w13, w13, w14
 464:	eor	w6, w6, w13
 468:	str	w6, [x1, #4]
 46c:	and	x6, x5, #0xff
 470:	ubfx	x13, x10, #8, #8
 474:	ldr	w6, [x8, x6, lsl #2]
 478:	ldr	w13, [x7, x13, lsl #2]
 47c:	eor	w6, w6, w13
 480:	ubfx	x13, x9, #16, #8
 484:	lsr	w14, w4, #24
 488:	ldr	w13, [x11, x13, lsl #2]
 48c:	ldr	w14, [x2, x14, lsl #2]
 490:	eor	w13, w13, w14
 494:	eor	w6, w6, w13
 498:	str	w6, [x1, #8]
 49c:	and	x4, x4, #0xff
 4a0:	ubfx	x5, x5, #8, #8
 4a4:	ldr	w6, [x8, x4, lsl #2]
 4a8:	ldr	w4, [x7, x5, lsl #2]
 4ac:	eor	w6, w6, w4
 4b0:	ubfx	x5, x10, #16, #8
 4b4:	lsr	w4, w9, #24
 4b8:	ldr	w5, [x11, x5, lsl #2]
 4bc:	ldr	w2, [x2, x4, lsl #2]
 4c0:	eor	w2, w5, w2
 4c4:	eor	w2, w6, w2
 4c8:	str	w2, [x1, #12]
 4cc:	cmp	w12, #0x2
 4d0:	b.le	604 <do_decrypt_aligned+0x254>
 4d4:	sub	x10, x3, #0x100
 4d8:	add	x10, x0, x10
 4dc:	sub	x3, x3, #0xf0
 4e0:	sub	w12, w12, #0x3
 4e4:	sub	x12, x3, x12, lsl #4
 4e8:	sub	x2, x0, #0x20
 4ec:	add	x12, x12, x2
 4f0:	adrp	x13, 0 <do_encrypt_aligned>
 4f4:	ldr	w4, [x1]
 4f8:	ldr	w2, [x10, #240]
 4fc:	eor	w9, w4, w2
 500:	ldr	w3, [x1, #4]
 504:	ldr	w2, [x10, #244]
 508:	eor	w3, w3, w2
 50c:	ldr	w4, [x1, #8]
 510:	ldr	w2, [x10, #248]
 514:	eor	w4, w4, w2
 518:	ldr	w5, [x1, #12]
 51c:	ldr	w2, [x10, #252]
 520:	eor	w5, w5, w2
 524:	ldr	x2, [x13]
 528:	sub	x8, x2, #0x100
 52c:	and	x6, x9, #0xff
 530:	add	x7, x2, #0x300
 534:	ubfx	x11, x5, #8, #8
 538:	ldr	w6, [x8, x6, lsl #2]
 53c:	ldr	w11, [x7, x11, lsl #2]
 540:	eor	w6, w6, w11
 544:	add	x11, x2, #0x700
 548:	ubfx	x14, x4, #16, #8
 54c:	add	x2, x2, #0xb00
 550:	lsr	w15, w3, #24
 554:	ldr	w14, [x11, x14, lsl #2]
 558:	ldr	w15, [x2, x15, lsl #2]
 55c:	eor	w14, w14, w15
 560:	eor	w6, w6, w14
 564:	str	w6, [x1]
 568:	and	x6, x3, #0xff
 56c:	ubfx	x14, x9, #8, #8
 570:	ldr	w6, [x8, x6, lsl #2]
 574:	ldr	w14, [x7, x14, lsl #2]
 578:	eor	w6, w6, w14
 57c:	ubfx	x14, x5, #16, #8
 580:	lsr	w15, w4, #24
 584:	ldr	w14, [x11, x14, lsl #2]
 588:	ldr	w15, [x2, x15, lsl #2]
 58c:	eor	w14, w14, w15
 590:	eor	w6, w6, w14
 594:	str	w6, [x1, #4]
 598:	and	x6, x4, #0xff
 59c:	ubfx	x14, x3, #8, #8
 5a0:	ldr	w6, [x8, x6, lsl #2]
 5a4:	ldr	w14, [x7, x14, lsl #2]
 5a8:	eor	w6, w6, w14
 5ac:	ubfx	x14, x9, #16, #8
 5b0:	lsr	w15, w5, #24
 5b4:	ldr	w14, [x11, x14, lsl #2]
 5b8:	ldr	w15, [x2, x15, lsl #2]
 5bc:	eor	w14, w14, w15
 5c0:	eor	w6, w6, w14
 5c4:	str	w6, [x1, #8]
 5c8:	and	x5, x5, #0xff
 5cc:	ubfx	x4, x4, #8, #8
 5d0:	ldr	w5, [x8, x5, lsl #2]
 5d4:	ldr	w4, [x7, x4, lsl #2]
 5d8:	eor	w5, w5, w4
 5dc:	ubfx	x3, x3, #16, #8
 5e0:	lsr	w4, w9, #24
 5e4:	ldr	w3, [x11, x3, lsl #2]
 5e8:	ldr	w2, [x2, x4, lsl #2]
 5ec:	eor	w2, w3, w2
 5f0:	eor	w2, w5, w2
 5f4:	str	w2, [x1, #12]
 5f8:	sub	x10, x10, #0x10
 5fc:	cmp	x10, x12
 600:	b.ne	4f4 <do_decrypt_aligned+0x144>  // b.any
 604:	ldr	w3, [x1]
 608:	ldr	w2, [x0, #256]
 60c:	eor	w3, w3, w2
 610:	ldr	w4, [x1, #4]
 614:	ldr	w2, [x0, #260]
 618:	eor	w4, w4, w2
 61c:	ldr	w5, [x1, #8]
 620:	ldr	w2, [x0, #264]
 624:	eor	w5, w5, w2
 628:	ldr	w6, [x1, #12]
 62c:	ldr	w2, [x0, #268]
 630:	eor	w6, w6, w2
 634:	adrp	x2, 0 <do_encrypt_aligned>
 638:	ldr	x2, [x2]
 63c:	add	x2, x2, #0xf00
 640:	and	w7, w3, #0xff
 644:	ldrb	w7, [x2, w7, sxtw]
 648:	strb	w7, [x1]
 64c:	ubfx	x7, x6, #8, #8
 650:	ldrb	w7, [x2, w7, sxtw]
 654:	strb	w7, [x1, #1]
 658:	ubfx	x7, x5, #16, #8
 65c:	ldrb	w7, [x2, w7, sxtw]
 660:	strb	w7, [x1, #2]
 664:	lsr	w7, w4, #24
 668:	ldrb	w7, [x2, w7, sxtw]
 66c:	strb	w7, [x1, #3]
 670:	and	w7, w4, #0xff
 674:	ldrb	w7, [x2, w7, sxtw]
 678:	strb	w7, [x1, #4]
 67c:	ubfx	x7, x3, #8, #8
 680:	ldrb	w7, [x2, w7, sxtw]
 684:	strb	w7, [x1, #5]
 688:	ubfx	x7, x6, #16, #8
 68c:	ldrb	w7, [x2, w7, sxtw]
 690:	strb	w7, [x1, #6]
 694:	lsr	w7, w5, #24
 698:	ldrb	w7, [x2, w7, sxtw]
 69c:	strb	w7, [x1, #7]
 6a0:	and	w7, w5, #0xff
 6a4:	ldrb	w7, [x2, w7, sxtw]
 6a8:	strb	w7, [x1, #8]
 6ac:	ubfx	x7, x4, #8, #8
 6b0:	ldrb	w7, [x2, w7, sxtw]
 6b4:	strb	w7, [x1, #9]
 6b8:	ubfx	x7, x3, #16, #8
 6bc:	ldrb	w7, [x2, w7, sxtw]
 6c0:	strb	w7, [x1, #10]
 6c4:	lsr	w7, w6, #24
 6c8:	ldrb	w7, [x2, w7, sxtw]
 6cc:	strb	w7, [x1, #11]
 6d0:	and	w6, w6, #0xff
 6d4:	ldrb	w6, [x2, w6, sxtw]
 6d8:	strb	w6, [x1, #12]
 6dc:	ubfx	x5, x5, #8, #8
 6e0:	ldrb	w5, [x2, w5, sxtw]
 6e4:	strb	w5, [x1, #13]
 6e8:	ubfx	x4, x4, #16, #8
 6ec:	ldrb	w4, [x2, w4, sxtw]
 6f0:	strb	w4, [x1, #14]
 6f4:	lsr	w3, w3, #24
 6f8:	ldrb	w2, [x2, w3, sxtw]
 6fc:	strb	w2, [x1, #15]
 700:	ldr	w2, [x1]
 704:	ldr	w3, [x0, #240]
 708:	eor	w2, w2, w3
 70c:	str	w2, [x1]
 710:	ldr	w2, [x1, #4]
 714:	ldr	w3, [x0, #244]
 718:	eor	w2, w2, w3
 71c:	str	w2, [x1, #4]
 720:	ldr	w2, [x1, #8]
 724:	ldr	w3, [x0, #248]
 728:	eor	w2, w2, w3
 72c:	str	w2, [x1, #8]
 730:	ldr	w2, [x1, #12]
 734:	ldr	w0, [x0, #252]
 738:	eor	w0, w2, w0
 73c:	str	w0, [x1, #12]
 740:	ret
 744:	nop
	...

0000000000000750 <rijndael_setkey>:
 750:	stp	x29, x30, [sp, #-96]!
 754:	mov	x29, sp
 758:	str	x19, [sp, #16]
 75c:	adrp	x3, 0 <do_encrypt_aligned>
 760:	ldr	x3, [x3]
 764:	ldr	w3, [x3]
 768:	cbnz	w3, 7ac <rijndael_setkey+0x5c>
 76c:	adrp	x3, 0 <do_encrypt_aligned>
 770:	ldr	x3, [x3]
 774:	mov	w4, #0x1                   	// #1
 778:	str	w4, [x3]
 77c:	str	xzr, [x3, #8]
 780:	str	wzr, [x0, #484]
 784:	cmp	w2, #0x10
 788:	b.eq	a78 <rijndael_setkey+0x328>  // b.none
 78c:	cmp	w2, #0x18
 790:	b.eq	b08 <rijndael_setkey+0x3b8>  // b.none
 794:	mov	w4, #0x8                   	// #8
 798:	mov	w7, #0xe                   	// #14
 79c:	mov	w19, #0xd                   	// #13
 7a0:	cmp	w2, #0x20
 7a4:	b.eq	a80 <rijndael_setkey+0x330>  // b.none
 7a8:	b	88c <rijndael_setkey+0x13c>
 7ac:	adrp	x3, 0 <do_encrypt_aligned>
 7b0:	ldr	x3, [x3]
 7b4:	ldr	x3, [x3, #8]
 7b8:	mov	w19, #0x1c                  	// #28
 7bc:	cbnz	x3, 88c <rijndael_setkey+0x13c>
 7c0:	b	780 <rijndael_setkey+0x30>
 7c4:	cmp	w4, w5
 7c8:	ccmp	w2, w7, #0x0, gt
 7cc:	b.gt	840 <rijndael_setkey+0xf0>
 7d0:	cmp	w4, w5
 7d4:	ccmp	w3, #0x3, #0x0, gt
 7d8:	b.gt	82c <rijndael_setkey+0xdc>
 7dc:	add	w5, w5, #0x1
 7e0:	sxtw	x8, w5
 7e4:	add	w3, w3, #0x1
 7e8:	sxtw	x1, w3
 7ec:	add	x10, x0, w2, sxtw #4
 7f0:	sub	x10, x10, #0x4
 7f4:	add	x3, sp, #0x40
 7f8:	add	x3, x3, x8, lsl #2
 7fc:	ldur	w3, [x3, #-4]
 800:	str	w3, [x10, x1, lsl #2]
 804:	mov	w5, w8
 808:	mov	w3, w1
 80c:	cmp	w4, w8
 810:	cset	w12, gt
 814:	cmp	w1, #0x3
 818:	cset	w11, le
 81c:	add	x8, x8, #0x1
 820:	add	x1, x1, #0x1
 824:	tst	w12, w11
 828:	b.ne	7f4 <rijndael_setkey+0xa4>  // b.any
 82c:	cmp	w3, #0x4
 830:	b.ne	7c4 <rijndael_setkey+0x74>  // b.any
 834:	add	w2, w2, #0x1
 838:	mov	w3, w13
 83c:	b	7c4 <rijndael_setkey+0x74>
 840:	cmp	w2, w7
 844:	b.gt	a70 <rijndael_setkey+0x320>
 848:	adrp	x1, 0 <do_encrypt_aligned>
 84c:	ldr	x8, [x1]
 850:	sub	x8, x8, #0x100
 854:	sub	w9, w9, #0x2
 858:	mov	w9, w9
 85c:	add	x1, sp, #0x44
 860:	add	x9, x1, x9, lsl #2
 864:	adrp	x11, 0 <do_encrypt_aligned>
 868:	sbfiz	x6, x6, #2, #32
 86c:	add	x16, sp, #0x41
 870:	add	x15, sp, #0x42
 874:	add	x14, sp, #0x43
 878:	add	x10, sp, #0x40
 87c:	mov	w12, #0x0                   	// #0
 880:	mov	w13, w12
 884:	b	9d4 <rijndael_setkey+0x284>
 888:	mov	w19, #0x0                   	// #0
 88c:	mov	w0, #0xa4                  	// #164
 890:	bl	0 <_gcry_burn_stack>
 894:	mov	w0, w19
 898:	ldr	x19, [sp, #16]
 89c:	ldp	x29, x30, [sp], #96
 8a0:	ret
 8a4:	ldr	w1, [sp, #68]
 8a8:	ldr	w5, [sp, #64]
 8ac:	eor	w1, w1, w5
 8b0:	str	w1, [sp, #68]
 8b4:	ldr	w5, [sp, #72]
 8b8:	eor	w1, w1, w5
 8bc:	str	w1, [sp, #72]
 8c0:	ldr	w5, [sp, #76]
 8c4:	eor	w1, w1, w5
 8c8:	str	w1, [sp, #76]
 8cc:	ldr	x5, [x11]
 8d0:	sub	x5, x5, #0x88
 8d4:	and	w17, w1, #0xff
 8d8:	ldrb	w17, [x5, w17, sxtw]
 8dc:	ldrb	w18, [sp, #80]
 8e0:	eor	w17, w17, w18
 8e4:	strb	w17, [sp, #80]
 8e8:	ubfx	x18, x1, #8, #8
 8ec:	ldrb	w17, [sp, #81]
 8f0:	ldrb	w18, [x5, w18, sxtw]
 8f4:	eor	w17, w17, w18
 8f8:	strb	w17, [sp, #81]
 8fc:	ubfx	x18, x1, #16, #8
 900:	ldrb	w17, [sp, #82]
 904:	ldrb	w18, [x5, w18, sxtw]
 908:	eor	w17, w17, w18
 90c:	strb	w17, [sp, #82]
 910:	lsr	w1, w1, #24
 914:	ldrb	w17, [sp, #83]
 918:	ldrb	w1, [x5, w1, sxtw]
 91c:	eor	w1, w17, w1
 920:	strb	w1, [sp, #83]
 924:	ldr	w1, [sp, #84]
 928:	ldr	w5, [sp, #80]
 92c:	eor	w1, w1, w5
 930:	str	w1, [sp, #84]
 934:	ldr	w5, [sp, #88]
 938:	eor	w1, w1, w5
 93c:	str	w1, [sp, #88]
 940:	ldr	w5, [sp, #92]
 944:	eor	w1, w5, w1
 948:	str	w1, [sp, #92]
 94c:	b	a58 <rijndael_setkey+0x308>
 950:	cmp	w4, w5
 954:	ccmp	w2, w7, #0x0, gt
 958:	b.gt	9c8 <rijndael_setkey+0x278>
 95c:	cmp	w4, w5
 960:	ccmp	w3, #0x3, #0x0, gt
 964:	b.gt	9b4 <rijndael_setkey+0x264>
 968:	add	w5, w5, #0x1
 96c:	sxtw	x17, w5
 970:	add	w3, w3, #0x1
 974:	sxtw	x1, w3
 978:	add	x18, x0, w2, sxtw #4
 97c:	sub	x18, x18, #0x4
 980:	add	x3, x10, x17, lsl #2
 984:	ldur	w3, [x3, #-4]
 988:	str	w3, [x18, x1, lsl #2]
 98c:	mov	w5, w17
 990:	mov	w3, w1
 994:	cmp	w4, w17
 998:	cset	w30, gt
 99c:	cmp	w1, #0x3
 9a0:	cset	w19, le
 9a4:	add	x17, x17, #0x1
 9a8:	add	x1, x1, #0x1
 9ac:	tst	w30, w19
 9b0:	b.ne	980 <rijndael_setkey+0x230>  // b.any
 9b4:	cmp	w3, #0x4
 9b8:	b.ne	950 <rijndael_setkey+0x200>  // b.any
 9bc:	add	w2, w2, #0x1
 9c0:	mov	w3, w13
 9c4:	b	950 <rijndael_setkey+0x200>
 9c8:	add	x8, x8, #0x4
 9cc:	cmp	w2, w7
 9d0:	b.gt	a68 <rijndael_setkey+0x318>
 9d4:	ldr	x1, [x11]
 9d8:	sub	x1, x1, #0x88
 9dc:	ldrb	w5, [x16, x6]
 9e0:	ldrb	w5, [x1, w5, sxtw]
 9e4:	ldrb	w17, [sp, #64]
 9e8:	eor	w5, w5, w17
 9ec:	ldrb	w17, [x15, x6]
 9f0:	ldrb	w17, [x1, w17, sxtw]
 9f4:	ldrb	w18, [sp, #65]
 9f8:	eor	w17, w17, w18
 9fc:	strb	w17, [sp, #65]
 a00:	ldrb	w17, [x14, x6]
 a04:	ldrb	w17, [x1, w17, sxtw]
 a08:	ldrb	w18, [sp, #66]
 a0c:	eor	w17, w17, w18
 a10:	strb	w17, [sp, #66]
 a14:	ldrb	w17, [x10, x6]
 a18:	ldrb	w1, [x1, w17, sxtw]
 a1c:	ldrb	w17, [sp, #67]
 a20:	eor	w1, w1, w17
 a24:	strb	w1, [sp, #67]
 a28:	ldr	w1, [x8]
 a2c:	eor	w1, w5, w1
 a30:	strb	w1, [sp, #64]
 a34:	cmp	w4, #0x8
 a38:	b.eq	8a4 <rijndael_setkey+0x154>  // b.none
 a3c:	add	x1, sp, #0x40
 a40:	ldr	w5, [x1, #4]
 a44:	ldr	w17, [x1]
 a48:	eor	w5, w5, w17
 a4c:	str	w5, [x1, #4]!
 a50:	cmp	x1, x9
 a54:	b.ne	a40 <rijndael_setkey+0x2f0>  // b.any
 a58:	cmp	w7, w2
 a5c:	b.lt	888 <rijndael_setkey+0x138>  // b.tstop
 a60:	mov	w5, w12
 a64:	b	95c <rijndael_setkey+0x20c>
 a68:	mov	w19, #0x0                   	// #0
 a6c:	b	88c <rijndael_setkey+0x13c>
 a70:	mov	w19, #0x0                   	// #0
 a74:	b	88c <rijndael_setkey+0x13c>
 a78:	mov	w4, #0x4                   	// #4
 a7c:	mov	w7, #0xa                   	// #10
 a80:	str	w7, [x0, #480]
 a84:	mov	x3, #0x0                   	// #0
 a88:	and	x6, x3, #0x3
 a8c:	asr	w5, w3, #2
 a90:	add	x8, sp, #0x60
 a94:	add	x5, x8, w5, sxtw #2
 a98:	add	x5, x5, x6
 a9c:	ldrb	w6, [x1, x3]
 aa0:	sturb	w6, [x5, #-64]
 aa4:	add	x3, x3, #0x1
 aa8:	cmp	w2, w3
 aac:	b.hi	a88 <rijndael_setkey+0x338>  // b.pmore
 ab0:	sub	w6, w4, #0x1
 ab4:	sub	w1, w4, #0x2
 ab8:	sxtw	x1, w1
 abc:	mov	w9, w4
 ac0:	sxtw	x3, w4
 ac4:	sub	x3, x3, #0x3
 ac8:	sub	x3, x3, w6, uxtw
 acc:	lsl	x2, x1, #2
 ad0:	add	x5, sp, #0x40
 ad4:	add	x5, x2, x5
 ad8:	add	x8, sp, #0x20
 adc:	add	x2, x2, x8
 ae0:	ldr	w2, [x2, #4]
 ae4:	str	w2, [x5, #4]
 ae8:	sub	x1, x1, #0x1
 aec:	cmp	x3, x1
 af0:	b.ne	acc <rijndael_setkey+0x37c>  // b.any
 af4:	mov	w3, #0x0                   	// #0
 af8:	mov	w5, #0x0                   	// #0
 afc:	mov	w2, #0x0                   	// #0
 b00:	mov	w13, #0x0                   	// #0
 b04:	b	7d0 <rijndael_setkey+0x80>
 b08:	mov	w4, #0x6                   	// #6
 b0c:	mov	w7, #0xc                   	// #12
 b10:	b	a80 <rijndael_setkey+0x330>
 b14:	nop
	...

0000000000000b28 <rijndael_decrypt>:
 b28:	stp	x29, x30, [sp, #-80]!
 b2c:	mov	x29, sp
 b30:	stp	x19, x20, [sp, #16]
 b34:	str	x21, [sp, #32]
 b38:	mov	x19, x0
 b3c:	mov	x20, x1
 b40:	mov	x21, x2
 b44:	ldr	w0, [x0, #484]
 b48:	cbz	w0, ba0 <rijndael_decrypt+0x78>
 b4c:	orr	x0, x21, x20
 b50:	tst	x0, #0xf
 b54:	b.eq	ce8 <rijndael_decrypt+0x1c0>  // b.none
 b58:	mov	x2, #0x10                  	// #16
 b5c:	mov	x1, x21
 b60:	add	x0, sp, #0x30
 b64:	bl	0 <grub_memmove>
 b68:	add	x2, sp, #0x30
 b6c:	add	x1, sp, #0x40
 b70:	mov	x0, x19
 b74:	bl	3b0 <do_decrypt_aligned>
 b78:	mov	x2, #0x10                  	// #16
 b7c:	add	x1, sp, #0x40
 b80:	mov	x0, x20
 b84:	bl	0 <grub_memmove>
 b88:	mov	w0, #0x40                  	// #64
 b8c:	bl	0 <_gcry_burn_stack>
 b90:	ldp	x19, x20, [sp, #16]
 b94:	ldr	x21, [sp, #32]
 b98:	ldp	x29, x30, [sp], #80
 b9c:	ret
 ba0:	mov	x3, x19
 ba4:	add	x1, x19, #0xf0
 ba8:	ldr	w0, [x3]
 bac:	str	w0, [x3, #240]
 bb0:	ldr	w0, [x3, #4]
 bb4:	str	w0, [x3, #244]
 bb8:	ldr	w0, [x3, #8]
 bbc:	str	w0, [x3, #248]
 bc0:	ldr	w0, [x3, #12]
 bc4:	str	w0, [x3, #252]
 bc8:	add	x3, x3, #0x10
 bcc:	cmp	x3, x1
 bd0:	b.ne	ba8 <rijndael_decrypt+0x80>  // b.any
 bd4:	ldr	w0, [x19, #480]
 bd8:	cmp	w0, #0x1
 bdc:	b.le	cd4 <rijndael_decrypt+0x1ac>
 be0:	add	x3, x19, #0x100
 be4:	mov	w7, #0x1                   	// #1
 be8:	adrp	x8, 0 <do_encrypt_aligned>
 bec:	ldr	x4, [x8]
 bf0:	add	x2, x4, #0x78
 bf4:	ldrb	w0, [x3]
 bf8:	add	x1, x4, #0x478
 bfc:	ldrb	w5, [x3, #1]
 c00:	ldr	w0, [x2, x0, lsl #2]
 c04:	ldr	w5, [x1, x5, lsl #2]
 c08:	eor	w0, w0, w5
 c0c:	add	x5, x4, #0x878
 c10:	ldrb	w6, [x3, #2]
 c14:	add	x4, x4, #0xc78
 c18:	ldrb	w9, [x3, #3]
 c1c:	ldr	w6, [x5, x6, lsl #2]
 c20:	ldr	w9, [x4, x9, lsl #2]
 c24:	eor	w6, w6, w9
 c28:	eor	w0, w0, w6
 c2c:	str	w0, [x3]
 c30:	ldrb	w0, [x3, #4]
 c34:	ldrb	w6, [x3, #5]
 c38:	ldr	w0, [x2, x0, lsl #2]
 c3c:	ldr	w6, [x1, x6, lsl #2]
 c40:	eor	w0, w0, w6
 c44:	ldrb	w6, [x3, #6]
 c48:	ldrb	w9, [x3, #7]
 c4c:	ldr	w6, [x5, x6, lsl #2]
 c50:	ldr	w9, [x4, x9, lsl #2]
 c54:	eor	w6, w6, w9
 c58:	eor	w0, w0, w6
 c5c:	str	w0, [x3, #4]
 c60:	ldrb	w0, [x3, #8]
 c64:	ldrb	w6, [x3, #9]
 c68:	ldr	w0, [x2, x0, lsl #2]
 c6c:	ldr	w6, [x1, x6, lsl #2]
 c70:	eor	w0, w0, w6
 c74:	ldrb	w6, [x3, #10]
 c78:	ldrb	w9, [x3, #11]
 c7c:	ldr	w6, [x5, x6, lsl #2]
 c80:	ldr	w9, [x4, x9, lsl #2]
 c84:	eor	w6, w6, w9
 c88:	eor	w0, w0, w6
 c8c:	str	w0, [x3, #8]
 c90:	ldrb	w0, [x3, #14]
 c94:	ldrb	w6, [x3, #15]
 c98:	ldr	w0, [x5, x0, lsl #2]
 c9c:	ldr	w4, [x4, x6, lsl #2]
 ca0:	eor	w0, w0, w4
 ca4:	ldrb	w5, [x3, #12]
 ca8:	ldrb	w4, [x3, #13]
 cac:	ldr	w2, [x2, x5, lsl #2]
 cb0:	ldr	w1, [x1, x4, lsl #2]
 cb4:	eor	w1, w2, w1
 cb8:	eor	w0, w0, w1
 cbc:	str	w0, [x3, #12]
 cc0:	add	w7, w7, #0x1
 cc4:	add	x3, x3, #0x10
 cc8:	ldr	w0, [x19, #480]
 ccc:	cmp	w7, w0
 cd0:	b.lt	bec <rijndael_decrypt+0xc4>  // b.tstop
 cd4:	mov	w0, #0x40                  	// #64
 cd8:	bl	0 <_gcry_burn_stack>
 cdc:	mov	w0, #0x1                   	// #1
 ce0:	str	w0, [x19, #484]
 ce4:	b	b4c <rijndael_decrypt+0x24>
 ce8:	mov	x2, x21
 cec:	mov	x1, x20
 cf0:	mov	x0, x19
 cf4:	bl	3b0 <do_decrypt_aligned>
 cf8:	b	b88 <rijndael_decrypt+0x60>
 cfc:	nop
	...

0000000000000d08 <rijndael_encrypt>:
 d08:	stp	x29, x30, [sp, #-64]!
 d0c:	mov	x29, sp
 d10:	stp	x19, x20, [sp, #16]
 d14:	mov	x20, x0
 d18:	mov	x19, x1
 d1c:	mov	x1, x2
 d20:	orr	x0, x2, x19
 d24:	tst	x0, #0xf
 d28:	b.eq	d6c <rijndael_encrypt+0x64>  // b.none
 d2c:	mov	x2, #0x10                  	// #16
 d30:	add	x0, sp, #0x20
 d34:	bl	0 <grub_memmove>
 d38:	add	x2, sp, #0x20
 d3c:	add	x1, sp, #0x30
 d40:	mov	x0, x20
 d44:	bl	0 <do_encrypt_aligned>
 d48:	mov	x2, #0x10                  	// #16
 d4c:	add	x1, sp, #0x30
 d50:	mov	x0, x19
 d54:	bl	0 <grub_memmove>
 d58:	mov	w0, #0x40                  	// #64
 d5c:	bl	0 <_gcry_burn_stack>
 d60:	ldp	x19, x20, [sp, #16]
 d64:	ldp	x29, x30, [sp], #64
 d68:	ret
 d6c:	mov	x1, x19
 d70:	mov	x0, x20
 d74:	bl	0 <do_encrypt_aligned>
 d78:	b	d58 <rijndael_encrypt+0x50>

0000000000000d7c <grub_mod_init>:
 d7c:	stp	x29, x30, [sp, #-32]!
 d80:	mov	x29, sp
 d84:	str	x19, [sp, #16]
 d88:	adrp	x0, 0 <do_encrypt_aligned>
 d8c:	ldr	x19, [x0]
 d90:	mov	x0, x19
 d94:	bl	0 <grub_cipher_register>
 d98:	add	x0, x19, #0x60
 d9c:	bl	0 <grub_cipher_register>
 da0:	add	x0, x19, #0xc0
 da4:	bl	0 <grub_cipher_register>
 da8:	ldr	x19, [sp, #16]
 dac:	ldp	x29, x30, [sp], #32
 db0:	ret
 db4:	nop
	...

0000000000000dc0 <grub_mod_fini>:
 dc0:	stp	x29, x30, [sp, #-32]!
 dc4:	mov	x29, sp
 dc8:	str	x19, [sp, #16]
 dcc:	adrp	x0, 0 <do_encrypt_aligned>
 dd0:	ldr	x19, [x0]
 dd4:	mov	x0, x19
 dd8:	bl	0 <grub_cipher_unregister>
 ddc:	add	x0, x19, #0x60
 de0:	bl	0 <grub_cipher_unregister>
 de4:	add	x0, x19, #0xc0
 de8:	bl	0 <grub_cipher_unregister>
 dec:	ldr	x19, [sp, #16]
 df0:	ldp	x29, x30, [sp], #32
 df4:	ret
	...
