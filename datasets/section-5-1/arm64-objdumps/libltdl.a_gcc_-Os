In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libltdl.a_gcc_-Os:

libltdl_libltdl_la-preopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <vm_close>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

0000000000000008 <free_symlists>:
   8:	stp	x29, x30, [sp, #-32]!
   c:	adrp	x1, 0 <vm_close>
  10:	mov	x29, sp
  14:	ldr	x0, [x1]
  18:	stp	x19, x20, [sp, #16]
  1c:	mov	x19, x1
  20:	cbnz	x0, 34 <free_symlists+0x2c>
  24:	str	xzr, [x19]
  28:	ldp	x19, x20, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret
  34:	ldr	x20, [x0]
  38:	bl	0 <free>
  3c:	mov	x0, x20
  40:	b	20 <free_symlists+0x18>

0000000000000044 <vl_exit>:
  44:	stp	x29, x30, [sp, #-16]!
  48:	adrp	x0, 0 <vm_close>
  4c:	mov	x29, sp
  50:	str	xzr, [x0]
  54:	bl	8 <free_symlists>
  58:	mov	w0, #0x0                   	// #0
  5c:	ldp	x29, x30, [sp], #16
  60:	ret

0000000000000064 <vm_sym>:
  64:	stp	x29, x30, [sp, #-48]!
  68:	mov	x29, sp
  6c:	ldr	x0, [x1, #16]
  70:	stp	x19, x20, [sp, #16]
  74:	mov	x19, x1
  78:	str	x21, [sp, #32]
  7c:	mov	x21, x2
  80:	cbz	x0, 98 <vm_sym+0x34>
  84:	adrp	x1, 0 <vm_close>
  88:	add	x1, x1, #0x0
  8c:	bl	0 <strcmp>
  90:	cbnz	w0, 98 <vm_sym+0x34>
  94:	add	x19, x19, #0x10
  98:	add	x19, x19, #0x20
  9c:	ldr	x20, [x19]
  a0:	cbnz	x20, b4 <vm_sym+0x50>
  a4:	mov	w0, #0xa                   	// #10
  a8:	bl	0 <lt__error_string>
  ac:	bl	0 <lt__set_last_error>
  b0:	b	c8 <vm_sym+0x64>
  b4:	mov	x1, x21
  b8:	mov	x0, x20
  bc:	bl	0 <strcmp>
  c0:	cbnz	w0, dc <vm_sym+0x78>
  c4:	ldr	x20, [x19, #8]
  c8:	mov	x0, x20
  cc:	ldp	x19, x20, [sp, #16]
  d0:	ldr	x21, [sp, #32]
  d4:	ldp	x29, x30, [sp], #48
  d8:	ret
  dc:	add	x19, x19, #0x10
  e0:	b	9c <vm_sym+0x38>

00000000000000e4 <vm_open>:
  e4:	stp	x29, x30, [sp, #-48]!
  e8:	adrp	x0, 0 <vm_close>
  ec:	mov	x29, sp
  f0:	stp	x19, x20, [sp, #16]
  f4:	ldr	x20, [x0]
  f8:	stp	x21, x22, [sp, #32]
  fc:	cbnz	x20, 120 <vm_open+0x3c>
 100:	mov	w0, #0x7                   	// #7
 104:	bl	0 <lt__error_string>
 108:	bl	0 <lt__set_last_error>
 10c:	mov	x0, x20
 110:	ldp	x19, x20, [sp, #16]
 114:	ldp	x21, x22, [sp, #32]
 118:	ldp	x29, x30, [sp], #48
 11c:	ret
 120:	mov	x19, x1
 124:	cbnz	x1, 130 <vm_open+0x4c>
 128:	adrp	x19, 0 <vm_close>
 12c:	add	x19, x19, #0x0
 130:	mov	x22, x20
 134:	ldr	x20, [x22, #8]
 138:	mov	x21, x20
 13c:	ldr	x0, [x21]
 140:	cbnz	x0, 160 <vm_open+0x7c>
 144:	ldr	x22, [x22]
 148:	cbnz	x22, 134 <vm_open+0x50>
 14c:	mov	w0, #0x5                   	// #5
 150:	mov	x20, #0x0                   	// #0
 154:	bl	0 <lt__error_string>
 158:	bl	0 <lt__set_last_error>
 15c:	b	10c <vm_open+0x28>
 160:	ldr	x1, [x21, #8]
 164:	cbnz	x1, 184 <vm_open+0xa0>
 168:	mov	x1, x19
 16c:	bl	0 <strcmp>
 170:	cbnz	w0, 184 <vm_open+0xa0>
 174:	ldr	x0, [x21, #24]
 178:	cbz	x0, 184 <vm_open+0xa0>
 17c:	ldr	x0, [x21, #16]
 180:	cbnz	x0, 10c <vm_open+0x28>
 184:	add	x21, x21, #0x10
 188:	b	13c <vm_open+0x58>

000000000000018c <preopen_LTX_get_vtable>:
 18c:	stp	x29, x30, [sp, #-32]!
 190:	mov	x29, sp
 194:	stp	x19, x20, [sp, #16]
 198:	adrp	x19, 0 <vm_close>
 19c:	add	x19, x19, #0x0
 1a0:	mov	x20, x0
 1a4:	ldr	x0, [x19, #8]
 1a8:	cbnz	x0, 1b8 <preopen_LTX_get_vtable+0x2c>
 1ac:	mov	x0, #0x48                  	// #72
 1b0:	bl	0 <lt__zalloc>
 1b4:	str	x0, [x19, #8]
 1b8:	ldr	x0, [x19, #8]
 1bc:	cbz	x0, 218 <preopen_LTX_get_vtable+0x8c>
 1c0:	ldr	x1, [x0]
 1c4:	cbnz	x1, 224 <preopen_LTX_get_vtable+0x98>
 1c8:	adrp	x1, 0 <vm_close>
 1cc:	add	x1, x1, #0x0
 1d0:	stp	x1, xzr, [x0]
 1d4:	adrp	x1, 0 <vm_close>
 1d8:	add	x1, x1, #0x0
 1dc:	str	x1, [x0, #16]
 1e0:	adrp	x1, 0 <vm_close>
 1e4:	add	x1, x1, #0x0
 1e8:	str	x1, [x0, #24]
 1ec:	adrp	x1, 0 <vm_close>
 1f0:	add	x1, x1, #0x0
 1f4:	str	x1, [x0, #32]
 1f8:	adrp	x1, 0 <vm_close>
 1fc:	add	x1, x1, #0x0
 200:	str	x1, [x0, #40]
 204:	adrp	x1, 0 <vm_close>
 208:	add	x1, x1, #0x0
 20c:	str	x1, [x0, #48]
 210:	str	x20, [x0, #56]
 214:	str	wzr, [x0, #64]
 218:	ldp	x19, x20, [sp, #16]
 21c:	ldp	x29, x30, [sp], #32
 220:	ret
 224:	ldr	x1, [x0, #56]
 228:	cmp	x1, x20
 22c:	b.eq	218 <preopen_LTX_get_vtable+0x8c>  // b.none
 230:	mov	w0, #0x3                   	// #3
 234:	bl	0 <lt__error_string>
 238:	bl	0 <lt__set_last_error>
 23c:	mov	x0, #0x0                   	// #0
 240:	b	218 <preopen_LTX_get_vtable+0x8c>

0000000000000244 <lt_dlpreload_default>:
 244:	adrp	x1, 0 <vm_close>
 248:	str	x0, [x1]
 24c:	mov	w0, #0x0                   	// #0
 250:	ret

0000000000000254 <lt_dlpreload>:
 254:	stp	x29, x30, [sp, #-32]!
 258:	mov	x29, sp
 25c:	stp	x19, x20, [sp, #16]
 260:	adrp	x20, 0 <vm_close>
 264:	cbz	x0, 2d0 <lt_dlpreload+0x7c>
 268:	mov	x19, x0
 26c:	ldr	x0, [x20]
 270:	cbz	x0, 2e4 <lt_dlpreload+0x90>
 274:	ldr	x1, [x0, #8]
 278:	cmp	x19, x1
 27c:	b.ne	288 <lt_dlpreload+0x34>  // b.any
 280:	mov	w20, #0x0                   	// #0
 284:	b	2c0 <lt_dlpreload+0x6c>
 288:	ldr	x0, [x0]
 28c:	b	270 <lt_dlpreload+0x1c>
 290:	ldr	x1, [x20]
 294:	str	x0, [x20]
 298:	stp	x1, x19, [x0]
 29c:	ldr	x0, [x19, #16]
 2a0:	cbz	x0, 280 <lt_dlpreload+0x2c>
 2a4:	adrp	x1, 0 <vm_close>
 2a8:	add	x1, x1, #0x0
 2ac:	bl	0 <strcmp>
 2b0:	mov	w20, w0
 2b4:	cbnz	w0, 280 <lt_dlpreload+0x2c>
 2b8:	ldr	x0, [x19, #24]
 2bc:	blr	x0
 2c0:	mov	w0, w20
 2c4:	ldp	x19, x20, [sp, #16]
 2c8:	ldp	x29, x30, [sp], #32
 2cc:	ret
 2d0:	bl	8 <free_symlists>
 2d4:	add	x0, x20, #0x0
 2d8:	ldr	x19, [x0, #16]
 2dc:	cbnz	x19, 26c <lt_dlpreload+0x18>
 2e0:	b	280 <lt_dlpreload+0x2c>
 2e4:	mov	x0, #0x10                  	// #16
 2e8:	bl	0 <lt__zalloc>
 2ec:	cbnz	x0, 290 <lt_dlpreload+0x3c>
 2f0:	mov	w20, #0x1                   	// #1
 2f4:	b	2c0 <lt_dlpreload+0x6c>

00000000000002f8 <vl_init>:
 2f8:	adrp	x0, 0 <vm_close>
 2fc:	add	x1, x0, #0x0
 300:	str	xzr, [x0]
 304:	ldr	x0, [x1, #16]
 308:	cbz	x0, 310 <vl_init+0x18>
 30c:	b	254 <lt_dlpreload>
 310:	mov	w0, #0x0                   	// #0
 314:	ret

0000000000000318 <lt_dlpreload_open>:
 318:	stp	x29, x30, [sp, #-80]!
 31c:	mov	x29, sp
 320:	stp	x21, x22, [sp, #32]
 324:	mov	x21, x0
 328:	adrp	x0, 0 <vm_close>
 32c:	stp	x19, x20, [sp, #16]
 330:	adrp	x22, 0 <vm_close>
 334:	add	x22, x22, #0x0
 338:	ldr	x20, [x0]
 33c:	stp	x23, x24, [sp, #48]
 340:	mov	x24, x1
 344:	mov	w23, #0x0                   	// #0
 348:	mov	w19, #0x0                   	// #0
 34c:	stp	x25, x26, [sp, #64]
 350:	cbnz	x20, 384 <lt_dlpreload_open+0x6c>
 354:	cbnz	w23, 368 <lt_dlpreload_open+0x50>
 358:	add	w19, w19, #0x1
 35c:	mov	w0, #0x8                   	// #8
 360:	bl	0 <lt__error_string>
 364:	bl	0 <lt__set_last_error>
 368:	mov	w0, w19
 36c:	ldp	x19, x20, [sp, #16]
 370:	ldp	x21, x22, [sp, #32]
 374:	ldp	x23, x24, [sp, #48]
 378:	ldp	x25, x26, [sp, #64]
 37c:	ldp	x29, x30, [sp], #80
 380:	ret
 384:	ldr	x0, [x20, #8]
 388:	ldr	x0, [x0]
 38c:	cbz	x21, 3c4 <lt_dlpreload_open+0xac>
 390:	mov	x1, x21
 394:	bl	0 <strcmp>
 398:	cbnz	w0, 3bc <lt_dlpreload_open+0xa4>
 39c:	add	w23, w23, #0x1
 3a0:	mov	w26, #0x0                   	// #0
 3a4:	add	w26, w26, #0x1
 3a8:	ldr	x1, [x20, #8]
 3ac:	ubfiz	x0, x26, #4, #32
 3b0:	add	x2, x1, x0
 3b4:	ldr	x25, [x1, x0]
 3b8:	cbnz	x25, 3cc <lt_dlpreload_open+0xb4>
 3bc:	ldr	x20, [x20]
 3c0:	b	350 <lt_dlpreload_open+0x38>
 3c4:	mov	x1, x22
 3c8:	b	394 <lt_dlpreload_open+0x7c>
 3cc:	ldr	x0, [x2, #8]
 3d0:	cbnz	x0, 3a4 <lt_dlpreload_open+0x8c>
 3d4:	mov	x1, x22
 3d8:	mov	x0, x25
 3dc:	bl	0 <strcmp>
 3e0:	cbz	w0, 3a4 <lt_dlpreload_open+0x8c>
 3e4:	mov	x0, x25
 3e8:	bl	0 <lt_dlopen>
 3ec:	cbnz	x0, 3f8 <lt_dlpreload_open+0xe0>
 3f0:	add	w19, w19, #0x1
 3f4:	b	3a4 <lt_dlpreload_open+0x8c>
 3f8:	blr	x24
 3fc:	add	w19, w19, w0
 400:	b	3a4 <lt_dlpreload_open+0x8c>

libltdl_libltdl_la-lt__alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <alloc_die_default>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x0, 0 <stderr>
   8:	mov	x29, sp
   c:	ldr	x1, [x0]
  10:	adrp	x0, 0 <alloc_die_default>
  14:	add	x0, x0, #0x0
  18:	bl	0 <fputs>
  1c:	mov	w0, #0x1                   	// #1
  20:	bl	0 <exit>

0000000000000024 <lt__malloc>:
  24:	stp	x29, x30, [sp, #-32]!
  28:	mov	x29, sp
  2c:	str	x19, [sp, #16]
  30:	bl	0 <malloc>
  34:	mov	x19, x0
  38:	cbnz	x0, 48 <lt__malloc+0x24>
  3c:	adrp	x0, 0 <alloc_die_default>
  40:	ldr	x0, [x0]
  44:	blr	x0
  48:	mov	x0, x19
  4c:	ldr	x19, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	ret

0000000000000058 <lt__zalloc>:
  58:	stp	x29, x30, [sp, #-32]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x20, x0
  68:	bl	24 <lt__malloc>
  6c:	mov	x19, x0
  70:	cbz	x0, 80 <lt__zalloc+0x28>
  74:	mov	x2, x20
  78:	mov	w1, #0x0                   	// #0
  7c:	bl	0 <memset>
  80:	mov	x0, x19
  84:	ldp	x19, x20, [sp, #16]
  88:	ldp	x29, x30, [sp], #32
  8c:	ret

0000000000000090 <lt__realloc>:
  90:	stp	x29, x30, [sp, #-32]!
  94:	mov	x29, sp
  98:	str	x19, [sp, #16]
  9c:	bl	0 <realloc>
  a0:	mov	x19, x0
  a4:	cbnz	x0, b4 <lt__realloc+0x24>
  a8:	adrp	x0, 0 <alloc_die_default>
  ac:	ldr	x0, [x0]
  b0:	blr	x0
  b4:	mov	x0, x19
  b8:	ldr	x19, [sp, #16]
  bc:	ldp	x29, x30, [sp], #32
  c0:	ret

00000000000000c4 <lt__memdup>:
  c4:	stp	x29, x30, [sp, #-32]!
  c8:	mov	x29, sp
  cc:	stp	x19, x20, [sp, #16]
  d0:	mov	x20, x0
  d4:	mov	x19, x1
  d8:	mov	x0, x1
  dc:	bl	24 <lt__malloc>
  e0:	cbz	x0, f8 <lt__memdup+0x34>
  e4:	mov	x2, x19
  e8:	mov	x1, x20
  ec:	ldp	x19, x20, [sp, #16]
  f0:	ldp	x29, x30, [sp], #32
  f4:	b	0 <memcpy>
  f8:	ldp	x19, x20, [sp, #16]
  fc:	ldp	x29, x30, [sp], #32
 100:	ret

0000000000000104 <lt__strdup>:
 104:	stp	x29, x30, [sp, #-32]!
 108:	mov	x29, sp
 10c:	str	x19, [sp, #16]
 110:	mov	x19, x0
 114:	bl	0 <strlen>
 118:	add	x1, x0, #0x1
 11c:	mov	x0, x19
 120:	ldr	x19, [sp, #16]
 124:	ldp	x29, x30, [sp], #32
 128:	b	c4 <lt__memdup>

libltdl_libltdl_la-lt_dlloader.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <loader_callback>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	x0, [x0, #8]
  14:	cbnz	x0, 38 <loader_callback+0x38>
  18:	adrp	x3, 0 <loader_callback>
  1c:	adrp	x1, 0 <loader_callback>
  20:	adrp	x0, 0 <loader_callback>
  24:	add	x3, x3, #0x0
  28:	add	x1, x1, #0x0
  2c:	add	x0, x0, #0x0
  30:	mov	w2, #0x36                  	// #54
  34:	bl	0 <__assert_fail>
  38:	ldr	x0, [x0]
  3c:	bl	0 <strcmp>
  40:	cmp	w0, #0x0
  44:	csel	x0, x19, xzr, eq  // eq = none
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret

0000000000000054 <lt_dlloader_add>:
  54:	stp	x29, x30, [sp, #-32]!
  58:	mov	x29, sp
  5c:	str	x19, [sp, #16]
  60:	cbz	x0, 8c <lt_dlloader_add+0x38>
  64:	ldr	x1, [x0, #16]
  68:	mov	x19, x0
  6c:	cbz	x1, 8c <lt_dlloader_add+0x38>
  70:	ldr	x1, [x0, #24]
  74:	cbz	x1, 8c <lt_dlloader_add+0x38>
  78:	ldr	x1, [x0, #32]
  7c:	cbz	x1, 8c <lt_dlloader_add+0x38>
  80:	ldr	w1, [x0, #64]
  84:	cmp	w1, #0x1
  88:	b.ls	a8 <lt_dlloader_add+0x54>  // b.plast
  8c:	mov	w0, #0x2                   	// #2
  90:	bl	0 <lt__error_string>
  94:	bl	0 <lt__set_last_error>
  98:	mov	w0, #0x1                   	// #1
  9c:	ldr	x19, [sp, #16]
  a0:	ldp	x29, x30, [sp], #32
  a4:	ret
  a8:	bl	0 <lt__slist_box>
  ac:	mov	x1, x0
  b0:	cbnz	x0, c4 <lt_dlloader_add+0x70>
  b4:	adrp	x0, 0 <lt__alloc_die>
  b8:	ldr	x0, [x0]
  bc:	blr	x0
  c0:	b	98 <lt_dlloader_add+0x44>
  c4:	ldr	w2, [x19, #64]
  c8:	adrp	x19, 0 <loader_callback>
  cc:	cbnz	w2, e4 <lt_dlloader_add+0x90>
  d0:	ldr	x1, [x19]
  d4:	bl	0 <lt__slist_cons>
  d8:	str	x0, [x19]
  dc:	mov	w0, #0x0                   	// #0
  e0:	b	9c <lt_dlloader_add+0x48>
  e4:	cmp	w2, #0x1
  e8:	b.eq	110 <lt_dlloader_add+0xbc>  // b.none
  ec:	adrp	x3, 0 <loader_callback>
  f0:	add	x3, x3, #0x0
  f4:	adrp	x1, 0 <loader_callback>
  f8:	adrp	x0, 0 <loader_callback>
  fc:	add	x3, x3, #0x10
 100:	add	x1, x1, #0x0
 104:	add	x0, x0, #0x0
 108:	mov	w2, #0x5e                  	// #94
 10c:	bl	0 <__assert_fail>
 110:	ldr	x0, [x19]
 114:	bl	0 <lt__slist_concat>
 118:	b	d8 <lt_dlloader_add+0x84>

000000000000011c <lt_dlloader_next>:
 11c:	cbz	x0, 128 <lt_dlloader_next+0xc>
 120:	ldr	x0, [x0]
 124:	ret
 128:	adrp	x0, 0 <loader_callback>
 12c:	ldr	x0, [x0]
 130:	b	124 <lt_dlloader_next+0x8>

0000000000000134 <lt_dlloader_get>:
 134:	cbz	x0, 13c <lt_dlloader_get+0x8>
 138:	ldr	x0, [x0, #8]
 13c:	ret

0000000000000140 <lt_dlloader_find>:
 140:	stp	x29, x30, [sp, #-16]!
 144:	mov	x2, x0
 148:	adrp	x0, 0 <loader_callback>
 14c:	mov	x29, sp
 150:	ldr	x0, [x0]
 154:	adrp	x1, 0 <loader_callback>
 158:	add	x1, x1, #0x0
 15c:	bl	0 <lt__slist_find>
 160:	cbz	x0, 168 <lt_dlloader_find+0x28>
 164:	ldr	x0, [x0, #8]
 168:	ldp	x29, x30, [sp], #16
 16c:	ret

0000000000000170 <lt_dlloader_remove>:
 170:	stp	x29, x30, [sp, #-64]!
 174:	mov	x29, sp
 178:	stp	x19, x20, [sp, #16]
 17c:	stp	x21, x22, [sp, #32]
 180:	mov	x22, x0
 184:	stp	x23, x24, [sp, #48]
 188:	bl	140 <lt_dlloader_find>
 18c:	cbnz	x0, 1b4 <lt_dlloader_remove+0x44>
 190:	mov	w0, #0x2                   	// #2
 194:	bl	0 <lt__error_string>
 198:	bl	0 <lt__set_last_error>
 19c:	mov	x0, #0x0                   	// #0
 1a0:	ldp	x19, x20, [sp, #16]
 1a4:	ldp	x21, x22, [sp, #32]
 1a8:	ldp	x23, x24, [sp, #48]
 1ac:	ldp	x29, x30, [sp], #64
 1b0:	ret
 1b4:	mov	x19, x0
 1b8:	adrp	x0, 0 <loader_callback>
 1bc:	add	x0, x0, #0x0
 1c0:	mov	x1, #0x0                   	// #0
 1c4:	add	x0, x0, #0x20
 1c8:	bl	0 <lt_dlinterface_register>
 1cc:	mov	x21, x0
 1d0:	mov	w23, #0x0                   	// #0
 1d4:	mov	w24, #0x0                   	// #0
 1d8:	mov	x20, #0x0                   	// #0
 1dc:	mov	x1, x20
 1e0:	mov	x0, x21
 1e4:	bl	0 <lt_dlhandle_iterate>
 1e8:	mov	x20, x0
 1ec:	cbnz	x0, 208 <lt_dlloader_remove+0x98>
 1f0:	mov	x0, x21
 1f4:	bl	0 <lt_dlinterface_free>
 1f8:	cbz	w24, 228 <lt_dlloader_remove+0xb8>
 1fc:	cbnz	w23, 19c <lt_dlloader_remove+0x2c>
 200:	mov	w0, #0x4                   	// #4
 204:	b	194 <lt_dlloader_remove+0x24>
 208:	ldr	x1, [x20, #8]
 20c:	cmp	x1, x19
 210:	b.ne	1dc <lt_dlloader_remove+0x6c>  // b.any
 214:	bl	0 <lt_dlisresident>
 218:	cbz	w0, 220 <lt_dlloader_remove+0xb0>
 21c:	mov	w23, #0x1                   	// #1
 220:	mov	w24, #0x1                   	// #1
 224:	b	1dc <lt_dlloader_remove+0x6c>
 228:	ldr	x1, [x19, #48]
 22c:	cbnz	x1, 25c <lt_dlloader_remove+0xec>
 230:	mov	x2, x22
 234:	adrp	x1, 0 <loader_callback>
 238:	adrp	x0, 0 <loader_callback>
 23c:	add	x1, x1, #0x0
 240:	add	x0, x0, #0x0
 244:	bl	0 <lt__slist_remove>
 248:	ldp	x19, x20, [sp, #16]
 24c:	ldp	x21, x22, [sp, #32]
 250:	ldp	x23, x24, [sp, #48]
 254:	ldp	x29, x30, [sp], #64
 258:	b	0 <lt__slist_unbox>
 25c:	ldr	x0, [x19, #56]
 260:	blr	x1
 264:	cbz	w0, 230 <lt_dlloader_remove+0xc0>
 268:	b	19c <lt_dlloader_remove+0x2c>

libltdl_libltdl_la-lt_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dladderror>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	cbnz	x0, 34 <lt_dladderror+0x34>
  14:	adrp	x3, 0 <lt_dladderror>
  18:	adrp	x1, 0 <lt_dladderror>
  1c:	adrp	x0, 0 <lt_dladderror>
  20:	add	x3, x3, #0x0
  24:	add	x1, x1, #0x0
  28:	add	x0, x0, #0x0
  2c:	mov	w2, #0x35                  	// #53
  30:	bl	0 <__assert_fail>
  34:	adrp	x21, 0 <lt_dladderror>
  38:	adrp	x22, 0 <lt_dladderror>
  3c:	mov	x20, x0
  40:	ldr	w1, [x21]
  44:	ldr	x0, [x22]
  48:	sub	w1, w1, #0x13
  4c:	sbfiz	x19, x1, #3, #32
  50:	mov	x1, x19
  54:	bl	0 <lt__realloc>
  58:	cbz	x0, 84 <lt_dladderror+0x84>
  5c:	add	x1, x0, x19
  60:	str	x0, [x22]
  64:	ldr	w0, [x21]
  68:	stur	x20, [x1, #-8]
  6c:	add	w1, w0, #0x1
  70:	str	w1, [x21]
  74:	ldp	x19, x20, [sp, #16]
  78:	ldp	x21, x22, [sp, #32]
  7c:	ldp	x29, x30, [sp], #48
  80:	ret
  84:	mov	w0, #0xffffffff            	// #-1
  88:	b	74 <lt_dladderror+0x74>

000000000000008c <lt_dlseterror>:
  8c:	adrp	x1, 0 <lt_dladderror>
  90:	ldr	w1, [x1]
  94:	cmp	w1, w0
  98:	adrp	x1, 0 <lt_dladderror>
  9c:	add	x2, x1, #0x0
  a0:	b.le	a8 <lt_dlseterror+0x1c>
  a4:	tbz	w0, #31, c0 <lt_dlseterror+0x34>
  a8:	adrp	x0, 0 <lt_dladderror>
  ac:	add	x0, x0, #0x0
  b0:	add	x0, x0, #0x25a
  b4:	str	x0, [x2, #8]
  b8:	mov	w0, #0x1                   	// #1
  bc:	ret
  c0:	cmp	w0, #0x13
  c4:	b.gt	e8 <lt_dlseterror+0x5c>
  c8:	adrp	x1, 0 <lt_dladderror>
  cc:	add	x1, x1, #0x0
  d0:	add	x1, x1, #0xe
  d4:	mov	w3, #0x2a                  	// #42
  d8:	smaddl	x0, w0, w3, x1
  dc:	str	x0, [x2, #8]
  e0:	mov	w0, #0x0                   	// #0
  e4:	b	bc <lt_dlseterror+0x30>
  e8:	ldr	x1, [x1]
  ec:	mov	x3, #0xffffffffffffff60    	// #-160
  f0:	add	x0, x3, w0, sxtw #3
  f4:	ldr	x0, [x1, x0]
  f8:	b	dc <lt_dlseterror+0x50>

00000000000000fc <lt__error_string>:
  fc:	stp	x29, x30, [sp, #-16]!
 100:	adrp	x3, 0 <lt_dladderror>
 104:	add	x3, x3, #0x0
 108:	mov	x29, sp
 10c:	tbz	w0, #31, 12c <lt__error_string+0x30>
 110:	adrp	x1, 0 <lt_dladderror>
 114:	adrp	x0, 0 <lt_dladderror>
 118:	add	x3, x3, #0x356
 11c:	add	x1, x1, #0x0
 120:	add	x0, x0, #0x0
 124:	mov	w2, #0x5f                  	// #95
 128:	bl	0 <__assert_fail>
 12c:	cmp	w0, #0x13
 130:	b.le	150 <lt__error_string+0x54>
 134:	adrp	x1, 0 <lt_dladderror>
 138:	adrp	x0, 0 <lt_dladderror>
 13c:	add	x3, x3, #0x356
 140:	add	x1, x1, #0x0
 144:	add	x0, x0, #0x0
 148:	mov	w2, #0x60                  	// #96
 14c:	b	128 <lt__error_string+0x2c>
 150:	add	x3, x3, #0xe
 154:	mov	w1, #0x2a                  	// #42
 158:	ldp	x29, x30, [sp], #16
 15c:	smaddl	x0, w0, w1, x3
 160:	ret

0000000000000164 <lt__get_last_error>:
 164:	adrp	x0, 0 <lt_dladderror>
 168:	ldr	x0, [x0]
 16c:	ret

0000000000000170 <lt__set_last_error>:
 170:	adrp	x1, 0 <lt_dladderror>
 174:	str	x0, [x1]
 178:	ret

libltdl_libltdl_la-ltdl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__alloc_die_callback>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	w0, #0xb                   	// #11
       8:	mov	x29, sp
       c:	bl	0 <lt__error_string>
      10:	ldp	x29, x30, [sp], #16
      14:	b	0 <lt__set_last_error>

0000000000000018 <canonicalize_path>:
      18:	stp	x29, x30, [sp, #-32]!
      1c:	mov	x29, sp
      20:	stp	x19, x20, [sp, #16]
      24:	cbz	x0, 38 <canonicalize_path+0x20>
      28:	mov	x20, x1
      2c:	ldrb	w1, [x0]
      30:	mov	x19, x0
      34:	cbnz	w1, 58 <canonicalize_path+0x40>
      38:	adrp	x3, 0 <lt__alloc_die_callback>
      3c:	adrp	x1, 0 <lt__alloc_die_callback>
      40:	adrp	x0, 0 <lt__alloc_die_callback>
      44:	add	x3, x3, #0x0
      48:	add	x1, x1, #0x0
      4c:	add	x0, x0, #0x0
      50:	mov	w2, #0x24f                 	// #591
      54:	bl	0 <__assert_fail>
      58:	bl	0 <strlen>
      5c:	add	x0, x0, #0x1
      60:	bl	0 <lt__malloc>
      64:	cbz	x0, f0 <canonicalize_path+0xd8>
      68:	mov	x6, #0xffff800000000001    	// #-140737488355327
      6c:	add	x2, x19, #0x1
      70:	mov	x3, #0x0                   	// #0
      74:	mov	w5, #0x2f                  	// #47
      78:	movk	x6, #0x400, lsl #48
      7c:	ldurb	w4, [x2, #-1]
      80:	cbnz	w4, 9c <canonicalize_path+0x84>
      84:	strb	wzr, [x0, x3]
      88:	str	x0, [x20]
      8c:	mov	w0, #0x0                   	// #0
      90:	ldp	x19, x20, [sp, #16]
      94:	ldp	x29, x30, [sp], #32
      98:	ret
      9c:	cmp	w4, #0x3a
      a0:	b.ne	c0 <canonicalize_path+0xa8>  // b.any
      a4:	cbz	x3, b8 <canonicalize_path+0xa0>
      a8:	ldrb	w1, [x2]
      ac:	cmp	w1, #0x3a
      b0:	b.eq	b8 <canonicalize_path+0xa0>  // b.none
      b4:	cbnz	w1, c8 <canonicalize_path+0xb0>
      b8:	add	x2, x2, #0x1
      bc:	b	7c <canonicalize_path+0x64>
      c0:	cmp	w4, #0x2f
      c4:	b.eq	d4 <canonicalize_path+0xbc>  // b.none
      c8:	strb	w4, [x0, x3]
      cc:	add	x3, x3, #0x1
      d0:	b	b8 <canonicalize_path+0xa0>
      d4:	ldrb	w4, [x2]
      d8:	cmp	w4, #0x3a
      dc:	b.hi	e8 <canonicalize_path+0xd0>  // b.pmore
      e0:	lsr	x4, x6, x4
      e4:	tbnz	w4, #0, b8 <canonicalize_path+0xa0>
      e8:	strb	w5, [x0, x3]
      ec:	b	cc <canonicalize_path+0xb4>
      f0:	mov	w0, #0x1                   	// #1
      f4:	b	90 <canonicalize_path+0x78>

00000000000000f8 <tryall_dlopen>:
      f8:	stp	x29, x30, [sp, #-80]!
      fc:	mov	x29, sp
     100:	stp	x19, x20, [sp, #16]
     104:	mov	x20, x0
     108:	adrp	x0, 0 <lt__alloc_die_callback>
     10c:	stp	x21, x22, [sp, #32]
     110:	mov	x21, x1
     114:	mov	x22, x3
     118:	ldr	x19, [x0]
     11c:	stp	x23, x24, [sp, #48]
     120:	str	x25, [sp, #64]
     124:	mov	x25, x2
     128:	bl	0 <lt__get_last_error>
     12c:	mov	x23, x0
     130:	cbnz	x19, 1c4 <tryall_dlopen+0xcc>
     134:	ldr	x20, [x20]
     138:	cbnz	x21, 1ec <tryall_dlopen+0xf4>
     13c:	str	xzr, [x20, #16]
     140:	mov	x0, #0x0                   	// #0
     144:	bl	0 <lt_dlloader_next>
     148:	mov	x19, x0
     14c:	cbnz	x22, 218 <tryall_dlopen+0x120>
     150:	mov	x0, x19
     154:	bl	0 <lt_dlloader_get>
     158:	mov	x24, x0
     15c:	ldr	x3, [x24, #16]
     160:	mov	x2, x25
     164:	ldr	x0, [x24, #56]
     168:	mov	x1, x21
     16c:	blr	x3
     170:	str	x0, [x20, #56]
     174:	cbz	x0, 220 <tryall_dlopen+0x128>
     178:	cbz	x25, 1a8 <tryall_dlopen+0xb0>
     17c:	ldrb	w2, [x25]
     180:	ubfx	x1, x2, #2, #1
     184:	ubfx	x0, x2, #1, #1
     188:	ubfx	x2, x2, #3, #1
     18c:	ubfiz	w1, w1, #1, #7
     190:	orr	w1, w1, w0
     194:	ubfiz	w2, w2, #2, #6
     198:	ldrb	w0, [x20, #36]
     19c:	orr	w1, w1, w2
     1a0:	bfxil	w0, w1, #0, #3
     1a4:	strb	w0, [x20, #36]
     1a8:	cbnz	x22, 1b0 <tryall_dlopen+0xb8>
     1ac:	cbz	x19, 234 <tryall_dlopen+0x13c>
     1b0:	str	x24, [x20, #8]
     1b4:	mov	x0, x23
     1b8:	bl	0 <lt__set_last_error>
     1bc:	mov	w0, #0x0                   	// #0
     1c0:	b	200 <tryall_dlopen+0x108>
     1c4:	ldr	x0, [x19, #16]
     1c8:	cmp	x0, x21
     1cc:	b.eq	244 <tryall_dlopen+0x14c>  // b.none
     1d0:	cbz	x0, 1e4 <tryall_dlopen+0xec>
     1d4:	cbz	x21, 1e4 <tryall_dlopen+0xec>
     1d8:	mov	x1, x21
     1dc:	bl	0 <strcmp>
     1e0:	cbz	w0, 244 <tryall_dlopen+0x14c>
     1e4:	ldr	x19, [x19]
     1e8:	b	130 <tryall_dlopen+0x38>
     1ec:	mov	x0, x21
     1f0:	bl	0 <lt__strdup>
     1f4:	str	x0, [x20, #16]
     1f8:	cbnz	x0, 140 <tryall_dlopen+0x48>
     1fc:	mov	w0, #0x1                   	// #1
     200:	ldp	x19, x20, [sp, #16]
     204:	ldp	x21, x22, [sp, #32]
     208:	ldp	x23, x24, [sp, #48]
     20c:	ldr	x25, [sp, #64]
     210:	ldp	x29, x30, [sp], #80
     214:	ret
     218:	mov	x24, x22
     21c:	b	15c <tryall_dlopen+0x64>
     220:	cbnz	x22, 234 <tryall_dlopen+0x13c>
     224:	mov	x0, x19
     228:	bl	0 <lt_dlloader_next>
     22c:	mov	x19, x0
     230:	cbnz	x0, 150 <tryall_dlopen+0x58>
     234:	ldr	x0, [x20, #16]
     238:	bl	0 <free>
     23c:	str	xzr, [x20, #16]
     240:	b	1fc <tryall_dlopen+0x104>
     244:	ldr	w0, [x19, #32]
     248:	add	w0, w0, #0x1
     24c:	str	w0, [x19, #32]
     250:	str	x19, [x20]
     254:	b	1bc <tryall_dlopen+0xc4>

0000000000000258 <tryall_dlopen_module>:
     258:	stp	x29, x30, [sp, #-80]!
     25c:	mov	x29, sp
     260:	stp	x19, x20, [sp, #16]
     264:	stp	x21, x22, [sp, #32]
     268:	stp	x23, x24, [sp, #48]
     26c:	str	x25, [sp, #64]
     270:	cbz	x2, 388 <tryall_dlopen_module+0x130>
     274:	mov	x23, x0
     278:	ldrb	w0, [x2]
     27c:	mov	x24, x1
     280:	mov	x21, x2
     284:	mov	x20, x3
     288:	mov	x25, x4
     28c:	cbz	w0, 3ac <tryall_dlopen_module+0x154>
     290:	mov	x0, x2
     294:	bl	0 <strlen>
     298:	mov	x19, x0
     29c:	cbnz	x20, 2c4 <tryall_dlopen_module+0x6c>
     2a0:	adrp	x3, 0 <lt__alloc_die_callback>
     2a4:	add	x3, x3, #0x0
     2a8:	adrp	x1, 0 <lt__alloc_die_callback>
     2ac:	adrp	x0, 0 <lt__alloc_die_callback>
     2b0:	add	x3, x3, #0x12
     2b4:	add	x1, x1, #0x0
     2b8:	add	x0, x0, #0x0
     2bc:	mov	w2, #0x1f8                 	// #504
     2c0:	bl	0 <__assert_fail>
     2c4:	cbz	x0, 2d8 <tryall_dlopen_module+0x80>
     2c8:	sub	x0, x0, #0x1
     2cc:	ldrb	w1, [x21, x0]
     2d0:	cmp	w1, #0x2f
     2d4:	csel	x19, x19, x0, ne  // ne = any
     2d8:	ldrb	w0, [x20]
     2dc:	cbz	w0, 358 <tryall_dlopen_module+0x100>
     2e0:	mov	x0, x20
     2e4:	bl	0 <strlen>
     2e8:	add	x1, x19, #0x2
     2ec:	add	x0, x1, x0
     2f0:	bl	0 <lt__malloc>
     2f4:	mov	x22, x0
     2f8:	cbz	x0, 380 <tryall_dlopen_module+0x128>
     2fc:	adrp	x1, 0 <lt__alloc_die_callback>
     300:	mov	x4, x20
     304:	mov	x3, x21
     308:	mov	w2, w19
     30c:	add	x1, x1, #0x0
     310:	bl	0 <sprintf>
     314:	cbz	x24, 360 <tryall_dlopen_module+0x108>
     318:	mov	x4, x25
     31c:	mov	x3, x22
     320:	mov	x2, x24
     324:	mov	x0, x23
     328:	mov	x1, #0x0                   	// #0
     32c:	bl	258 <tryall_dlopen_module>
     330:	mov	w19, w0
     334:	mov	x0, x22
     338:	bl	0 <free>
     33c:	mov	w0, w19
     340:	ldp	x19, x20, [sp, #16]
     344:	ldp	x21, x22, [sp, #32]
     348:	ldp	x23, x24, [sp, #48]
     34c:	ldr	x25, [sp, #64]
     350:	ldp	x29, x30, [sp], #80
     354:	ret
     358:	mov	x0, #0x0                   	// #0
     35c:	b	2e8 <tryall_dlopen_module+0x90>
     360:	mov	x2, x25
     364:	mov	x1, x22
     368:	mov	x0, x23
     36c:	mov	x3, #0x0                   	// #0
     370:	bl	f8 <tryall_dlopen>
     374:	cmp	w0, #0x0
     378:	cset	w19, ne  // ne = any
     37c:	b	334 <tryall_dlopen_module+0xdc>
     380:	mov	w19, #0x1                   	// #1
     384:	b	33c <tryall_dlopen_module+0xe4>
     388:	adrp	x3, 0 <lt__alloc_die_callback>
     38c:	add	x3, x3, #0x0
     390:	adrp	x1, 0 <lt__alloc_die_callback>
     394:	adrp	x0, 0 <lt__alloc_die_callback>
     398:	add	x3, x3, #0x12
     39c:	add	x1, x1, #0x0
     3a0:	add	x0, x0, #0x0
     3a4:	mov	w2, #0x1f7                 	// #503
     3a8:	b	2c0 <tryall_dlopen_module+0x68>
     3ac:	mov	x19, #0x0                   	// #0
     3b0:	cbnz	x3, 2d8 <tryall_dlopen_module+0x80>
     3b4:	b	2a0 <tryall_dlopen_module+0x48>

00000000000003b8 <trim>:
     3b8:	stp	x29, x30, [sp, #-48]!
     3bc:	mov	x29, sp
     3c0:	stp	x19, x20, [sp, #16]
     3c4:	mov	x20, x1
     3c8:	mov	w1, #0x27                  	// #39
     3cc:	stp	x21, x22, [sp, #32]
     3d0:	mov	x21, x0
     3d4:	mov	x0, x20
     3d8:	bl	0 <strrchr>
     3dc:	mov	x19, x0
     3e0:	ldrb	w0, [x20]
     3e4:	cbz	w0, 420 <trim+0x68>
     3e8:	mov	x0, x20
     3ec:	bl	0 <strlen>
     3f0:	mov	x22, x0
     3f4:	ldr	x0, [x21]
     3f8:	bl	0 <free>
     3fc:	str	xzr, [x21]
     400:	cmp	x19, #0x0
     404:	ccmp	x20, x19, #0x4, ne  // ne = any
     408:	b.ne	428 <trim+0x70>  // b.any
     40c:	mov	w0, #0x1                   	// #1
     410:	ldp	x19, x20, [sp, #16]
     414:	ldp	x21, x22, [sp, #32]
     418:	ldp	x29, x30, [sp], #48
     41c:	ret
     420:	mov	x22, #0x0                   	// #0
     424:	b	3f4 <trim+0x3c>
     428:	cmp	x22, #0x3
     42c:	b.ls	468 <trim+0xb0>  // b.plast
     430:	ldrb	w0, [x20]
     434:	cmp	w0, #0x27
     438:	b.ne	468 <trim+0xb0>  // b.any
     43c:	sub	x19, x19, x20
     440:	mov	x0, x19
     444:	bl	0 <lt__malloc>
     448:	mov	x22, x0
     44c:	cbz	x0, 40c <trim+0x54>
     450:	sub	x2, x19, #0x1
     454:	add	x19, x22, x19
     458:	add	x1, x20, #0x1
     45c:	bl	0 <memcpy>
     460:	sturb	wzr, [x19, #-1]
     464:	str	x22, [x21]
     468:	mov	w0, #0x0                   	// #0
     46c:	b	410 <trim+0x58>

0000000000000470 <lt_argz_insert>:
     470:	stp	x29, x30, [sp, #-48]!
     474:	mov	x29, sp
     478:	stp	x19, x20, [sp, #16]
     47c:	str	x21, [sp, #32]
     480:	cbz	x2, 4b4 <lt_argz_insert+0x44>
     484:	bl	0 <argz_insert>
     488:	cbz	w0, 4a4 <lt_argz_insert+0x34>
     48c:	cmp	w0, #0xc
     490:	b.ne	4e0 <lt_argz_insert+0x70>  // b.any
     494:	mov	w0, #0xb                   	// #11
     498:	bl	0 <lt__error_string>
     49c:	bl	0 <lt__set_last_error>
     4a0:	mov	w0, #0x1                   	// #1
     4a4:	ldp	x19, x20, [sp, #16]
     4a8:	ldr	x21, [sp, #32]
     4ac:	ldp	x29, x30, [sp], #48
     4b0:	ret
     4b4:	mov	x19, x3
     4b8:	mov	x20, x0
     4bc:	mov	x21, x1
     4c0:	mov	x0, x3
     4c4:	bl	0 <strlen>
     4c8:	add	x3, x0, #0x1
     4cc:	mov	x2, x19
     4d0:	mov	x1, x21
     4d4:	mov	x0, x20
     4d8:	bl	0 <argz_append>
     4dc:	b	488 <lt_argz_insert+0x18>
     4e0:	mov	w0, #0x0                   	// #0
     4e4:	b	498 <lt_argz_insert+0x28>

00000000000004e8 <find_file_callback>:
     4e8:	stp	x29, x30, [sp, #-48]!
     4ec:	mov	x29, sp
     4f0:	stp	x19, x20, [sp, #16]
     4f4:	str	x21, [sp, #32]
     4f8:	cbz	x0, 50c <find_file_callback+0x24>
     4fc:	mov	x20, x1
     500:	ldrb	w1, [x0]
     504:	mov	x19, x0
     508:	cbnz	w1, 530 <find_file_callback+0x48>
     50c:	adrp	x3, 0 <lt__alloc_die_callback>
     510:	add	x3, x3, #0x0
     514:	adrp	x1, 0 <lt__alloc_die_callback>
     518:	adrp	x0, 0 <lt__alloc_die_callback>
     51c:	add	x3, x3, #0x27
     520:	add	x1, x1, #0x0
     524:	add	x0, x0, #0x0
     528:	mov	w2, #0x2f0                 	// #752
     52c:	bl	0 <__assert_fail>
     530:	cbnz	x20, 558 <find_file_callback+0x70>
     534:	adrp	x3, 0 <lt__alloc_die_callback>
     538:	add	x3, x3, #0x0
     53c:	adrp	x1, 0 <lt__alloc_die_callback>
     540:	adrp	x0, 0 <lt__alloc_die_callback>
     544:	add	x3, x3, #0x27
     548:	add	x1, x1, #0x0
     54c:	add	x0, x0, #0x0
     550:	mov	w2, #0x2f1                 	// #753
     554:	b	52c <find_file_callback+0x44>
     558:	mov	x21, x2
     55c:	cbnz	x2, 584 <find_file_callback+0x9c>
     560:	adrp	x3, 0 <lt__alloc_die_callback>
     564:	add	x3, x3, #0x0
     568:	adrp	x1, 0 <lt__alloc_die_callback>
     56c:	adrp	x0, 0 <lt__alloc_die_callback>
     570:	add	x3, x3, #0x27
     574:	add	x1, x1, #0x0
     578:	add	x0, x0, #0x0
     57c:	mov	w2, #0x2f2                 	// #754
     580:	b	52c <find_file_callback+0x44>
     584:	adrp	x1, 0 <lt__alloc_die_callback>
     588:	add	x1, x1, #0x0
     58c:	bl	0 <fopen>
     590:	str	x0, [x21]
     594:	cbz	x0, 5e8 <find_file_callback+0x100>
     598:	mov	x0, x19
     59c:	mov	w1, #0x2f                  	// #47
     5a0:	bl	0 <strrchr>
     5a4:	cmp	x19, x0
     5a8:	b.cs	5b0 <find_file_callback+0xc8>  // b.hs, b.nlast
     5ac:	strb	wzr, [x0]
     5b0:	ldr	x0, [x20]
     5b4:	bl	0 <free>
     5b8:	str	xzr, [x20]
     5bc:	mov	x0, x19
     5c0:	bl	0 <lt__strdup>
     5c4:	mov	x1, x0
     5c8:	cmp	x1, #0x0
     5cc:	mov	w0, #0x1                   	// #1
     5d0:	cneg	w0, w0, eq  // eq = none
     5d4:	str	x1, [x20]
     5d8:	ldp	x19, x20, [sp, #16]
     5dc:	ldr	x21, [sp, #32]
     5e0:	ldp	x29, x30, [sp], #48
     5e4:	ret
     5e8:	mov	w0, #0x0                   	// #0
     5ec:	b	5d8 <find_file_callback+0xf0>

00000000000005f0 <argzize_path>:
     5f0:	stp	x29, x30, [sp, #-16]!
     5f4:	mov	x29, sp
     5f8:	cbnz	x0, 620 <argzize_path+0x30>
     5fc:	adrp	x3, 0 <lt__alloc_die_callback>
     600:	add	x3, x3, #0x0
     604:	adrp	x1, 0 <lt__alloc_die_callback>
     608:	adrp	x0, 0 <lt__alloc_die_callback>
     60c:	add	x3, x3, #0x3a
     610:	add	x1, x1, #0x0
     614:	add	x0, x0, #0x0
     618:	mov	w2, #0x28c                 	// #652
     61c:	bl	0 <__assert_fail>
     620:	mov	x3, x2
     624:	mov	x2, x1
     628:	mov	w1, #0x3a                  	// #58
     62c:	bl	0 <argz_create_sep>
     630:	cbz	w0, 64c <argzize_path+0x5c>
     634:	cmp	w0, #0xc
     638:	b.ne	654 <argzize_path+0x64>  // b.any
     63c:	mov	w0, #0xb                   	// #11
     640:	bl	0 <lt__error_string>
     644:	bl	0 <lt__set_last_error>
     648:	mov	w0, #0x1                   	// #1
     64c:	ldp	x29, x30, [sp], #16
     650:	ret
     654:	mov	w0, #0x0                   	// #0
     658:	b	640 <argzize_path+0x50>

000000000000065c <foreach_dirinpath>:
     65c:	stp	x29, x30, [sp, #-144]!
     660:	mov	x29, sp
     664:	stp	x19, x20, [sp, #16]
     668:	mov	x19, x0
     66c:	mov	x20, x1
     670:	stp	x21, x22, [sp, #32]
     674:	stp	x23, x24, [sp, #48]
     678:	mov	x24, x2
     67c:	stp	x25, x26, [sp, #64]
     680:	mov	x25, x3
     684:	mov	x26, x4
     688:	stp	x27, x28, [sp, #80]
     68c:	cbz	x1, 6d0 <foreach_dirinpath+0x74>
     690:	ldrb	w0, [x1]
     694:	cbz	w0, 6d0 <foreach_dirinpath+0x74>
     698:	mov	x0, x1
     69c:	bl	0 <strlen>
     6a0:	mov	x22, x0
     6a4:	stp	xzr, xzr, [sp, #120]
     6a8:	str	xzr, [sp, #136]
     6ac:	cbz	x19, 6b8 <foreach_dirinpath+0x5c>
     6b0:	ldrb	w0, [x19]
     6b4:	cbnz	w0, 6d8 <foreach_dirinpath+0x7c>
     6b8:	mov	w0, #0x5                   	// #5
     6bc:	bl	0 <lt__error_string>
     6c0:	bl	0 <lt__set_last_error>
     6c4:	mov	x19, #0x0                   	// #0
     6c8:	mov	w28, #0x0                   	// #0
     6cc:	b	7ec <foreach_dirinpath+0x190>
     6d0:	mov	x22, #0x0                   	// #0
     6d4:	b	6a4 <foreach_dirinpath+0x48>
     6d8:	add	x1, sp, #0x88
     6dc:	mov	x0, x19
     6e0:	bl	18 <canonicalize_path>
     6e4:	cbnz	w0, 6c4 <foreach_dirinpath+0x68>
     6e8:	ldr	x0, [sp, #136]
     6ec:	add	x2, sp, #0x78
     6f0:	add	x1, sp, #0x80
     6f4:	bl	5f0 <argzize_path>
     6f8:	cbnz	w0, 6c4 <foreach_dirinpath+0x68>
     6fc:	mov	x21, #0x0                   	// #0
     700:	mov	x19, #0x0                   	// #0
     704:	mov	x23, #0x0                   	// #0
     708:	mov	w27, #0x2f                  	// #47
     70c:	ldp	x1, x0, [sp, #120]
     710:	mov	x2, x21
     714:	bl	0 <argz_next>
     718:	mov	x21, x0
     71c:	cbz	x0, 6c8 <foreach_dirinpath+0x6c>
     720:	ldrb	w1, [x21]
     724:	cbz	w1, 790 <foreach_dirinpath+0x134>
     728:	bl	0 <strlen>
     72c:	mov	x28, x0
     730:	add	x1, x22, x28
     734:	add	x0, x1, #0x1
     738:	cmp	x0, x23
     73c:	b.cc	764 <foreach_dirinpath+0x108>  // b.lo, b.ul, b.last
     740:	mov	x0, x19
     744:	str	x1, [sp, #104]
     748:	bl	0 <free>
     74c:	ldr	x1, [sp, #104]
     750:	add	x23, x1, #0x2
     754:	mov	x0, x23
     758:	bl	0 <lt__malloc>
     75c:	mov	x19, x0
     760:	cbz	x0, 6c4 <foreach_dirinpath+0x68>
     764:	cmp	x23, x28
     768:	b.hi	798 <foreach_dirinpath+0x13c>  // b.pmore
     76c:	adrp	x3, 0 <lt__alloc_die_callback>
     770:	add	x3, x3, #0x0
     774:	adrp	x1, 0 <lt__alloc_die_callback>
     778:	adrp	x0, 0 <lt__alloc_die_callback>
     77c:	add	x3, x3, #0x47
     780:	add	x1, x1, #0x0
     784:	add	x0, x0, #0x0
     788:	mov	w2, #0x2cd                 	// #717
     78c:	bl	0 <__assert_fail>
     790:	mov	x28, #0x0                   	// #0
     794:	b	730 <foreach_dirinpath+0xd4>
     798:	mov	x1, x21
     79c:	mov	x0, x19
     7a0:	bl	0 <strcpy>
     7a4:	cbz	x20, 7d4 <foreach_dirinpath+0x178>
     7a8:	ldrb	w0, [x20]
     7ac:	cbz	w0, 7d4 <foreach_dirinpath+0x178>
     7b0:	add	x0, x19, x28
     7b4:	ldurb	w0, [x0, #-1]
     7b8:	cmp	w0, #0x2f
     7bc:	b.eq	7c8 <foreach_dirinpath+0x16c>  // b.none
     7c0:	strb	w27, [x19, x28]
     7c4:	add	x28, x28, #0x1
     7c8:	mov	x1, x20
     7cc:	add	x0, x19, x28
     7d0:	bl	0 <strcpy>
     7d4:	mov	x2, x26
     7d8:	mov	x1, x25
     7dc:	mov	x0, x19
     7e0:	blr	x24
     7e4:	mov	w28, w0
     7e8:	cbz	w0, 70c <foreach_dirinpath+0xb0>
     7ec:	ldr	x0, [sp, #128]
     7f0:	bl	0 <free>
     7f4:	ldr	x0, [sp, #136]
     7f8:	bl	0 <free>
     7fc:	mov	x0, x19
     800:	bl	0 <free>
     804:	mov	w0, w28
     808:	ldp	x19, x20, [sp, #16]
     80c:	ldp	x21, x22, [sp, #32]
     810:	ldp	x23, x24, [sp, #48]
     814:	ldp	x25, x26, [sp, #64]
     818:	ldp	x27, x28, [sp, #80]
     81c:	ldp	x29, x30, [sp], #144
     820:	ret

0000000000000824 <find_file>:
     824:	stp	x29, x30, [sp, #-32]!
     828:	mov	x3, x2
     82c:	adrp	x2, 0 <lt__alloc_die_callback>
     830:	mov	x29, sp
     834:	add	x4, sp, #0x18
     838:	add	x2, x2, #0x0
     83c:	str	xzr, [sp, #24]
     840:	bl	65c <foreach_dirinpath>
     844:	ldr	x0, [sp, #24]
     848:	ldp	x29, x30, [sp], #32
     84c:	ret

0000000000000850 <find_handle>:
     850:	stp	x29, x30, [sp, #-32]!
     854:	mov	x29, sp
     858:	str	x19, [sp, #16]
     85c:	cbz	x0, 87c <find_handle+0x2c>
     860:	mov	x19, x2
     864:	mov	x4, x3
     868:	mov	x3, x2
     86c:	adrp	x2, 0 <lt__alloc_die_callback>
     870:	add	x2, x2, #0x0
     874:	bl	65c <foreach_dirinpath>
     878:	cbnz	w0, 880 <find_handle+0x30>
     87c:	mov	x19, #0x0                   	// #0
     880:	mov	x0, x19
     884:	ldr	x19, [sp, #16]
     888:	ldp	x29, x30, [sp], #32
     88c:	ret

0000000000000890 <find_handle_callback>:
     890:	stp	x29, x30, [sp, #-48]!
     894:	mov	x29, sp
     898:	stp	x19, x20, [sp, #16]
     89c:	mov	x19, x1
     8a0:	mov	x20, x0
     8a4:	mov	w1, #0x4                   	// #4
     8a8:	str	x21, [sp, #32]
     8ac:	mov	x21, x2
     8b0:	bl	0 <access>
     8b4:	cbnz	w0, 8dc <find_handle_callback+0x4c>
     8b8:	mov	x2, x21
     8bc:	mov	x1, x20
     8c0:	mov	x0, x19
     8c4:	mov	x3, #0x0                   	// #0
     8c8:	bl	f8 <tryall_dlopen>
     8cc:	cbz	w0, 8d4 <find_handle_callback+0x44>
     8d0:	str	xzr, [x19]
     8d4:	mov	w0, #0x1                   	// #1
     8d8:	b	8e0 <find_handle_callback+0x50>
     8dc:	mov	w0, #0x0                   	// #0
     8e0:	ldp	x19, x20, [sp, #16]
     8e4:	ldr	x21, [sp, #32]
     8e8:	ldp	x29, x30, [sp], #48
     8ec:	ret

00000000000008f0 <lt_dlpath_insertdir.constprop.0>:
     8f0:	stp	x29, x30, [sp, #-80]!
     8f4:	mov	x29, sp
     8f8:	stp	x19, x20, [sp, #16]
     8fc:	str	x21, [sp, #32]
     900:	stp	xzr, xzr, [sp, #56]
     904:	str	xzr, [sp, #72]
     908:	cbz	x1, 91c <lt_dlpath_insertdir.constprop.0+0x2c>
     90c:	mov	x19, x0
     910:	ldrb	w0, [x1]
     914:	mov	x21, x1
     918:	cbnz	w0, 940 <lt_dlpath_insertdir.constprop.0+0x50>
     91c:	adrp	x3, 0 <lt__alloc_die_callback>
     920:	add	x3, x3, #0x0
     924:	adrp	x1, 0 <lt__alloc_die_callback>
     928:	adrp	x0, 0 <lt__alloc_die_callback>
     92c:	add	x3, x3, #0x59
     930:	add	x1, x1, #0x0
     934:	add	x0, x0, #0x0
     938:	mov	w2, #0x84f                 	// #2127
     93c:	bl	0 <__assert_fail>
     940:	add	x1, sp, #0x38
     944:	mov	x0, x21
     948:	bl	18 <canonicalize_path>
     94c:	cbz	w0, 978 <lt_dlpath_insertdir.constprop.0+0x88>
     950:	mov	w19, #0x1                   	// #1
     954:	ldr	x0, [sp, #64]
     958:	bl	0 <free>
     95c:	ldr	x0, [sp, #56]
     960:	bl	0 <free>
     964:	mov	w0, w19
     968:	ldp	x19, x20, [sp, #16]
     96c:	ldr	x21, [sp, #32]
     970:	ldp	x29, x30, [sp], #80
     974:	ret
     978:	ldr	x0, [sp, #56]
     97c:	cbz	x0, 988 <lt_dlpath_insertdir.constprop.0+0x98>
     980:	ldrb	w0, [x0]
     984:	cbnz	w0, 9ac <lt_dlpath_insertdir.constprop.0+0xbc>
     988:	adrp	x3, 0 <lt__alloc_die_callback>
     98c:	add	x3, x3, #0x0
     990:	adrp	x1, 0 <lt__alloc_die_callback>
     994:	adrp	x0, 0 <lt__alloc_die_callback>
     998:	add	x3, x3, #0x59
     99c:	add	x1, x1, #0x0
     9a0:	add	x0, x0, #0x0
     9a4:	mov	w2, #0x857                 	// #2135
     9a8:	b	93c <lt_dlpath_insertdir.constprop.0+0x4c>
     9ac:	adrp	x20, 0 <lt__alloc_die_callback>
     9b0:	add	x20, x20, #0x0
     9b4:	ldr	x0, [x20, #8]
     9b8:	cbnz	x0, 9fc <lt_dlpath_insertdir.constprop.0+0x10c>
     9bc:	cbz	x19, 9e4 <lt_dlpath_insertdir.constprop.0+0xf4>
     9c0:	adrp	x3, 0 <lt__alloc_die_callback>
     9c4:	add	x3, x3, #0x0
     9c8:	adrp	x1, 0 <lt__alloc_die_callback>
     9cc:	adrp	x0, 0 <lt__alloc_die_callback>
     9d0:	add	x3, x3, #0x59
     9d4:	add	x1, x1, #0x0
     9d8:	add	x0, x0, #0x0
     9dc:	mov	w2, #0x85c                 	// #2140
     9e0:	b	93c <lt_dlpath_insertdir.constprop.0+0x4c>
     9e4:	mov	x0, x21
     9e8:	bl	0 <lt__strdup>
     9ec:	cmp	x0, #0x0
     9f0:	str	x0, [x20, #8]
     9f4:	cset	w19, eq  // eq = none
     9f8:	b	954 <lt_dlpath_insertdir.constprop.0+0x64>
     9fc:	add	x2, sp, #0x48
     a00:	add	x1, sp, #0x40
     a04:	bl	5f0 <argzize_path>
     a08:	cbnz	w0, 950 <lt_dlpath_insertdir.constprop.0+0x60>
     a0c:	cbz	x19, a7c <lt_dlpath_insertdir.constprop.0+0x18c>
     a10:	ldr	x0, [x20, #8]
     a14:	cmp	x19, x0
     a18:	b.cs	a40 <lt_dlpath_insertdir.constprop.0+0x150>  // b.hs, b.nlast
     a1c:	adrp	x3, 0 <lt__alloc_die_callback>
     a20:	add	x3, x3, #0x0
     a24:	adrp	x1, 0 <lt__alloc_die_callback>
     a28:	adrp	x0, 0 <lt__alloc_die_callback>
     a2c:	add	x3, x3, #0x59
     a30:	add	x1, x1, #0x0
     a34:	add	x0, x0, #0x0
     a38:	mov	w2, #0x875                 	// #2165
     a3c:	b	93c <lt_dlpath_insertdir.constprop.0+0x4c>
     a40:	sub	x19, x19, x0
     a44:	bl	0 <strlen>
     a48:	cmp	w19, w0
     a4c:	b.le	a74 <lt_dlpath_insertdir.constprop.0+0x184>
     a50:	adrp	x3, 0 <lt__alloc_die_callback>
     a54:	add	x3, x3, #0x0
     a58:	adrp	x1, 0 <lt__alloc_die_callback>
     a5c:	adrp	x0, 0 <lt__alloc_die_callback>
     a60:	add	x3, x3, #0x59
     a64:	add	x1, x1, #0x0
     a68:	add	x0, x0, #0x0
     a6c:	mov	w2, #0x876                 	// #2166
     a70:	b	93c <lt_dlpath_insertdir.constprop.0+0x4c>
     a74:	ldr	x0, [sp, #64]
     a78:	add	x19, x0, x19
     a7c:	mov	x2, x19
     a80:	mov	x3, x21
     a84:	add	x1, sp, #0x48
     a88:	add	x0, sp, #0x40
     a8c:	bl	470 <lt_argz_insert>
     a90:	mov	w19, w0
     a94:	cbnz	w0, 950 <lt_dlpath_insertdir.constprop.0+0x60>
     a98:	ldp	x0, x1, [sp, #64]
     a9c:	mov	w2, #0x3a                  	// #58
     aa0:	bl	0 <argz_stringify>
     aa4:	ldr	x0, [x20, #8]
     aa8:	ldr	x1, [sp, #64]
     aac:	cmp	x0, x1
     ab0:	b.eq	954 <lt_dlpath_insertdir.constprop.0+0x64>  // b.none
     ab4:	bl	0 <free>
     ab8:	ldr	x0, [sp, #64]
     abc:	str	x0, [x20, #8]
     ac0:	str	xzr, [sp, #64]
     ac4:	b	954 <lt_dlpath_insertdir.constprop.0+0x64>

0000000000000ac8 <foreachfile_callback>:
     ac8:	stp	x29, x30, [sp, #-128]!
     acc:	mov	x29, sp
     ad0:	stp	x19, x20, [sp, #16]
     ad4:	stp	x21, x22, [sp, #32]
     ad8:	stp	x23, x24, [sp, #48]
     adc:	stp	x25, x26, [sp, #64]
     ae0:	stp	x27, x28, [sp, #80]
     ae4:	stp	xzr, xzr, [sp, #112]
     ae8:	ldr	x26, [x1]
     aec:	cbz	x0, afc <foreachfile_callback+0x34>
     af0:	ldrb	w1, [x0]
     af4:	mov	x21, x0
     af8:	cbnz	w1, b20 <foreachfile_callback+0x58>
     afc:	adrp	x3, 0 <lt__alloc_die_callback>
     b00:	add	x3, x3, #0x0
     b04:	adrp	x1, 0 <lt__alloc_die_callback>
     b08:	adrp	x0, 0 <lt__alloc_die_callback>
     b0c:	add	x3, x3, #0x6d
     b10:	add	x1, x1, #0x0
     b14:	add	x0, x0, #0x0
     b18:	mov	w2, #0x730                 	// #1840
     b1c:	bl	0 <__assert_fail>
     b20:	mov	x23, x2
     b24:	bl	0 <strlen>
     b28:	add	x0, x21, x0
     b2c:	ldurb	w0, [x0, #-1]
     b30:	cmp	w0, #0x2f
     b34:	b.ne	b5c <foreachfile_callback+0x94>  // b.any
     b38:	adrp	x3, 0 <lt__alloc_die_callback>
     b3c:	add	x3, x3, #0x0
     b40:	adrp	x1, 0 <lt__alloc_die_callback>
     b44:	adrp	x0, 0 <lt__alloc_die_callback>
     b48:	add	x3, x3, #0x6d
     b4c:	add	x1, x1, #0x0
     b50:	add	x0, x0, #0x0
     b54:	mov	w2, #0x733                 	// #1843
     b58:	b	b1c <foreachfile_callback+0x54>
     b5c:	mov	x0, x21
     b60:	bl	0 <opendir>
     b64:	mov	x22, x0
     b68:	cbz	x0, c4c <foreachfile_callback+0x184>
     b6c:	adrp	x24, 0 <lt__alloc_die_callback>
     b70:	adrp	x25, 0 <lt__alloc_die_callback>
     b74:	add	x24, x24, #0x0
     b78:	add	x25, x25, #0x0
     b7c:	mov	x0, x22
     b80:	bl	0 <readdir>
     b84:	mov	x19, x0
     b88:	cbz	x0, c20 <foreachfile_callback+0x158>
     b8c:	ldrb	w0, [x19, #19]
     b90:	cmp	w0, #0x2e
     b94:	b.eq	b7c <foreachfile_callback+0xb4>  // b.none
     b98:	ldrb	w0, [x21]
     b9c:	cbz	w0, c78 <foreachfile_callback+0x1b0>
     ba0:	mov	x0, x21
     ba4:	bl	0 <strlen>
     ba8:	mov	x27, x0
     bac:	add	x19, x19, #0x13
     bb0:	mov	x0, x19
     bb4:	bl	0 <strlen>
     bb8:	add	x20, x19, x0
     bbc:	mov	x28, x20
     bc0:	mov	x2, x28
     bc4:	sub	x28, x28, #0x1
     bc8:	cmp	x19, x28
     bcc:	b.cs	be8 <foreachfile_callback+0x120>  // b.hs, b.nlast
     bd0:	ldrb	w1, [x28]
     bd4:	mov	x0, x24
     bd8:	str	x2, [sp, #104]
     bdc:	bl	0 <strchr>
     be0:	ldr	x2, [sp, #104]
     be4:	cbnz	x0, bc0 <foreachfile_callback+0xf8>
     be8:	ldrb	w0, [x2]
     bec:	cmp	w0, #0x2e
     bf0:	csel	x20, x20, x2, ne  // ne = any
     bf4:	sub	x28, x20, #0x1
     bf8:	cmp	x19, x28
     bfc:	b.cc	c80 <foreachfile_callback+0x1b8>  // b.lo, b.ul, b.last
     c00:	mov	x28, x20
     c04:	sub	x28, x28, x19
     c08:	add	x27, x28, x27
     c0c:	add	x0, x27, #0x2
     c10:	bl	0 <lt__malloc>
     c14:	mov	x20, x0
     c18:	cbnz	x0, c94 <foreachfile_callback+0x1cc>
     c1c:	mov	w19, #0x1                   	// #1
     c20:	mov	x0, x22
     c24:	bl	0 <closedir>
     c28:	cbnz	w19, c4c <foreachfile_callback+0x184>
     c2c:	ldr	x0, [sp, #112]
     c30:	cbz	x0, c4c <foreachfile_callback+0x184>
     c34:	mov	x20, #0x0                   	// #0
     c38:	ldp	x0, x1, [sp, #112]
     c3c:	mov	x2, x20
     c40:	bl	0 <argz_next>
     c44:	mov	x20, x0
     c48:	cbnz	x0, d5c <foreachfile_callback+0x294>
     c4c:	mov	w19, #0x0                   	// #0
     c50:	ldr	x0, [sp, #112]
     c54:	bl	0 <free>
     c58:	mov	w0, w19
     c5c:	ldp	x19, x20, [sp, #16]
     c60:	ldp	x21, x22, [sp, #32]
     c64:	ldp	x23, x24, [sp, #48]
     c68:	ldp	x25, x26, [sp, #64]
     c6c:	ldp	x27, x28, [sp, #80]
     c70:	ldp	x29, x30, [sp], #128
     c74:	ret
     c78:	mov	x27, #0x0                   	// #0
     c7c:	b	bac <foreachfile_callback+0xe4>
     c80:	ldrb	w0, [x28]
     c84:	cmp	w0, #0x2e
     c88:	b.eq	c04 <foreachfile_callback+0x13c>  // b.none
     c8c:	sub	x28, x28, #0x1
     c90:	b	bf8 <foreachfile_callback+0x130>
     c94:	add	x27, x20, x27
     c98:	mov	x1, x21
     c9c:	bl	0 <strcpy>
     ca0:	mov	x1, x25
     ca4:	mov	x0, x20
     ca8:	bl	0 <strcat>
     cac:	mov	x2, x28
     cb0:	mov	x1, x19
     cb4:	mov	x0, x20
     cb8:	bl	0 <strncat>
     cbc:	strb	wzr, [x27, #1]
     cc0:	ldrb	w0, [x20]
     cc4:	cbnz	w0, cec <foreachfile_callback+0x224>
     cc8:	adrp	x3, 0 <lt__alloc_die_callback>
     ccc:	add	x3, x3, #0x0
     cd0:	adrp	x1, 0 <lt__alloc_die_callback>
     cd4:	adrp	x0, 0 <lt__alloc_die_callback>
     cd8:	add	x3, x3, #0x7f
     cdc:	add	x1, x1, #0x0
     ce0:	add	x0, x0, #0x0
     ce4:	mov	w2, #0x6dd                 	// #1757
     ce8:	b	b1c <foreachfile_callback+0x54>
     cec:	ldr	x0, [sp, #112]
     cf0:	cbnz	x0, d18 <foreachfile_callback+0x250>
     cf4:	mov	x19, #0x0                   	// #0
     cf8:	mov	x3, x20
     cfc:	mov	x2, x19
     d00:	add	x1, sp, #0x78
     d04:	add	x0, sp, #0x70
     d08:	bl	470 <lt_argz_insert>
     d0c:	cmp	w0, #0x0
     d10:	cset	w27, ne  // ne = any
     d14:	b	d4c <foreachfile_callback+0x284>
     d18:	mov	x19, #0x0                   	// #0
     d1c:	ldp	x0, x1, [sp, #112]
     d20:	mov	x2, x19
     d24:	bl	0 <argz_next>
     d28:	mov	x19, x0
     d2c:	cbz	x0, cf4 <foreachfile_callback+0x22c>
     d30:	mov	x1, x19
     d34:	mov	x0, x20
     d38:	bl	0 <strcmp>
     d3c:	mov	w27, w0
     d40:	cmp	w0, #0x0
     d44:	b.lt	cf8 <foreachfile_callback+0x230>  // b.tstop
     d48:	b.ne	d1c <foreachfile_callback+0x254>  // b.any
     d4c:	mov	x0, x20
     d50:	bl	0 <free>
     d54:	cbz	w27, b7c <foreachfile_callback+0xb4>
     d58:	b	c1c <foreachfile_callback+0x154>
     d5c:	mov	x1, x23
     d60:	blr	x26
     d64:	mov	w19, w0
     d68:	cbz	w0, c38 <foreachfile_callback+0x170>
     d6c:	b	c50 <foreachfile_callback+0x188>

0000000000000d70 <loader_init.constprop.0>:
     d70:	stp	x29, x30, [sp, #-32]!
     d74:	mov	x29, sp
     d78:	stp	x19, x20, [sp, #16]
     d7c:	cbz	x0, dcc <loader_init.constprop.0+0x5c>
     d80:	mov	x1, x0
     d84:	mov	x0, #0x0                   	// #0
     d88:	blr	x1
     d8c:	mov	x19, x0
     d90:	mov	x0, x19
     d94:	bl	0 <lt_dlloader_add>
     d98:	cmp	w0, #0x0
     d9c:	mov	w20, w0
     da0:	ccmp	x19, #0x0, #0x0, eq  // eq = none
     da4:	b.ne	dd4 <loader_init.constprop.0+0x64>  // b.any
     da8:	adrp	x3, 0 <lt__alloc_die_callback>
     dac:	add	x3, x3, #0x0
     db0:	adrp	x1, 0 <lt__alloc_die_callback>
     db4:	adrp	x0, 0 <lt__alloc_die_callback>
     db8:	add	x3, x3, #0x95
     dbc:	add	x1, x1, #0x0
     dc0:	add	x0, x0, #0x0
     dc4:	mov	w2, #0xc7                  	// #199
     dc8:	bl	0 <__assert_fail>
     dcc:	mov	x19, #0x0                   	// #0
     dd0:	b	d90 <loader_init.constprop.0+0x20>
     dd4:	cbnz	w0, dfc <loader_init.constprop.0+0x8c>
     dd8:	ldr	x1, [x19, #40]
     ddc:	cbz	x1, dfc <loader_init.constprop.0+0x8c>
     de0:	ldr	x0, [x19, #56]
     de4:	blr	x1
     de8:	cbz	w0, dfc <loader_init.constprop.0+0x8c>
     dec:	mov	w20, #0x1                   	// #1
     df0:	mov	w0, #0x3                   	// #3
     df4:	bl	0 <lt__error_string>
     df8:	bl	0 <lt__set_last_error>
     dfc:	mov	w0, w20
     e00:	ldp	x19, x20, [sp, #16]
     e04:	ldp	x29, x30, [sp], #32
     e08:	ret

0000000000000e0c <lt_dlinit>:
     e0c:	adrp	x2, 0 <lt__alloc_die_callback>
     e10:	add	x1, x2, #0x0
     e14:	ldr	w0, [x1, #16]
     e18:	add	w0, w0, #0x1
     e1c:	str	w0, [x1, #16]
     e20:	cmp	w0, #0x1
     e24:	b.ne	e80 <lt_dlinit+0x74>  // b.any
     e28:	stp	x29, x30, [sp, #-16]!
     e2c:	adrp	x3, 0 <lt__alloc_die>
     e30:	adrp	x0, 0 <lt__alloc_die_callback>
     e34:	mov	x29, sp
     e38:	add	x0, x0, #0x0
     e3c:	str	x0, [x3]
     e40:	adrp	x0, 0 <preopen_LTX_get_vtable>
     e44:	str	xzr, [x2]
     e48:	add	x0, x0, #0x0
     e4c:	str	xzr, [x1, #8]
     e50:	bl	d70 <loader_init.constprop.0>
     e54:	cbnz	w0, e88 <lt_dlinit+0x7c>
     e58:	adrp	x0, 0 <lt_libltdl_LTX_preloaded_symbols>
     e5c:	add	x0, x0, #0x0
     e60:	bl	0 <lt_dlpreload>
     e64:	cbnz	w0, e88 <lt_dlinit+0x7c>
     e68:	ldp	x29, x30, [sp], #16
     e6c:	adrp	x1, 0 <lt__alloc_die_callback>
     e70:	adrp	x0, 0 <lt__alloc_die_callback>
     e74:	add	x1, x1, #0x0
     e78:	add	x0, x0, #0x0
     e7c:	b	0 <lt_dlpreload_open>
     e80:	mov	w0, #0x0                   	// #0
     e84:	ret
     e88:	ldp	x29, x30, [sp], #16
     e8c:	ret

0000000000000e90 <lt_dladvise_init>:
     e90:	stp	x29, x30, [sp, #-32]!
     e94:	mov	x29, sp
     e98:	str	x19, [sp, #16]
     e9c:	mov	x19, x0
     ea0:	mov	x0, #0x4                   	// #4
     ea4:	bl	0 <lt__zalloc>
     ea8:	cmp	x0, #0x0
     eac:	str	x0, [x19]
     eb0:	cset	w0, eq  // eq = none
     eb4:	ldr	x19, [sp, #16]
     eb8:	ldp	x29, x30, [sp], #32
     ebc:	ret

0000000000000ec0 <lt_dladvise_destroy>:
     ec0:	cbz	x0, ef0 <lt_dladvise_destroy+0x30>
     ec4:	stp	x29, x30, [sp, #-32]!
     ec8:	mov	x29, sp
     ecc:	str	x19, [sp, #16]
     ed0:	mov	x19, x0
     ed4:	ldr	x0, [x0]
     ed8:	bl	0 <free>
     edc:	str	xzr, [x19]
     ee0:	mov	w0, #0x0                   	// #0
     ee4:	ldr	x19, [sp, #16]
     ee8:	ldp	x29, x30, [sp], #32
     eec:	ret
     ef0:	mov	w0, #0x0                   	// #0
     ef4:	ret

0000000000000ef8 <lt_dladvise_ext>:
     ef8:	cbz	x0, f04 <lt_dladvise_ext+0xc>
     efc:	ldr	x0, [x0]
     f00:	cbnz	x0, f30 <lt_dladvise_ext+0x38>
     f04:	stp	x29, x30, [sp, #-16]!
     f08:	adrp	x3, 0 <lt__alloc_die_callback>
     f0c:	add	x3, x3, #0x0
     f10:	mov	x29, sp
     f14:	adrp	x1, 0 <lt__alloc_die_callback>
     f18:	adrp	x0, 0 <lt__alloc_die_callback>
     f1c:	add	x3, x3, #0xa1
     f20:	add	x1, x1, #0x0
     f24:	add	x0, x0, #0x0
     f28:	mov	w2, #0x631                 	// #1585
     f2c:	bl	0 <__assert_fail>
     f30:	ldrb	w1, [x0]
     f34:	orr	w1, w1, #0x1
     f38:	strb	w1, [x0]
     f3c:	mov	w0, #0x0                   	// #0
     f40:	ret

0000000000000f44 <lt_dladvise_resident>:
     f44:	cbz	x0, f50 <lt_dladvise_resident+0xc>
     f48:	ldr	x0, [x0]
     f4c:	cbnz	x0, f7c <lt_dladvise_resident+0x38>
     f50:	stp	x29, x30, [sp, #-16]!
     f54:	adrp	x3, 0 <lt__alloc_die_callback>
     f58:	add	x3, x3, #0x0
     f5c:	mov	x29, sp
     f60:	adrp	x1, 0 <lt__alloc_die_callback>
     f64:	adrp	x0, 0 <lt__alloc_die_callback>
     f68:	add	x3, x3, #0xb1
     f6c:	add	x1, x1, #0x0
     f70:	add	x0, x0, #0x0
     f74:	mov	w2, #0x639                 	// #1593
     f78:	bl	0 <__assert_fail>
     f7c:	ldrb	w1, [x0]
     f80:	orr	w1, w1, #0x2
     f84:	strb	w1, [x0]
     f88:	mov	w0, #0x0                   	// #0
     f8c:	ret

0000000000000f90 <lt_dladvise_local>:
     f90:	cbz	x0, f9c <lt_dladvise_local+0xc>
     f94:	ldr	x0, [x0]
     f98:	cbnz	x0, fc8 <lt_dladvise_local+0x38>
     f9c:	stp	x29, x30, [sp, #-16]!
     fa0:	adrp	x3, 0 <lt__alloc_die_callback>
     fa4:	add	x3, x3, #0x0
     fa8:	mov	x29, sp
     fac:	adrp	x1, 0 <lt__alloc_die_callback>
     fb0:	adrp	x0, 0 <lt__alloc_die_callback>
     fb4:	add	x3, x3, #0xc6
     fb8:	add	x1, x1, #0x0
     fbc:	add	x0, x0, #0x0
     fc0:	mov	w2, #0x641                 	// #1601
     fc4:	bl	0 <__assert_fail>
     fc8:	ldrb	w1, [x0]
     fcc:	orr	w1, w1, #0x8
     fd0:	strb	w1, [x0]
     fd4:	mov	w0, #0x0                   	// #0
     fd8:	ret

0000000000000fdc <lt_dladvise_global>:
     fdc:	cbz	x0, fe8 <lt_dladvise_global+0xc>
     fe0:	ldr	x0, [x0]
     fe4:	cbnz	x0, 1014 <lt_dladvise_global+0x38>
     fe8:	stp	x29, x30, [sp, #-16]!
     fec:	adrp	x3, 0 <lt__alloc_die_callback>
     ff0:	add	x3, x3, #0x0
     ff4:	mov	x29, sp
     ff8:	adrp	x1, 0 <lt__alloc_die_callback>
     ffc:	adrp	x0, 0 <lt__alloc_die_callback>
    1000:	add	x3, x3, #0xd8
    1004:	add	x1, x1, #0x0
    1008:	add	x0, x0, #0x0
    100c:	mov	w2, #0x649                 	// #1609
    1010:	bl	0 <__assert_fail>
    1014:	ldrb	w1, [x0]
    1018:	orr	w1, w1, #0x4
    101c:	strb	w1, [x0]
    1020:	mov	w0, #0x0                   	// #0
    1024:	ret

0000000000001028 <lt_dladvise_preload>:
    1028:	cbz	x0, 1034 <lt_dladvise_preload+0xc>
    102c:	ldr	x0, [x0]
    1030:	cbnz	x0, 1060 <lt_dladvise_preload+0x38>
    1034:	stp	x29, x30, [sp, #-16]!
    1038:	adrp	x3, 0 <lt__alloc_die_callback>
    103c:	add	x3, x3, #0x0
    1040:	mov	x29, sp
    1044:	adrp	x1, 0 <lt__alloc_die_callback>
    1048:	adrp	x0, 0 <lt__alloc_die_callback>
    104c:	add	x3, x3, #0xeb
    1050:	add	x1, x1, #0x0
    1054:	add	x0, x0, #0x0
    1058:	mov	w2, #0x651                 	// #1617
    105c:	bl	0 <__assert_fail>
    1060:	ldrb	w1, [x0]
    1064:	orr	w1, w1, #0x10
    1068:	strb	w1, [x0]
    106c:	mov	w0, #0x0                   	// #0
    1070:	ret

0000000000001074 <lt_dlforeachfile>:
    1074:	stp	x29, x30, [sp, #-48]!
    1078:	mov	x4, x2
    107c:	mov	x29, sp
    1080:	stp	x19, x20, [sp, #16]
    1084:	adrp	x19, 0 <lt__alloc_die_callback>
    1088:	add	x19, x19, #0x0
    108c:	str	x1, [sp, #40]
    1090:	mov	x20, x2
    1094:	add	x3, sp, #0x28
    1098:	mov	x2, x19
    109c:	mov	x1, #0x0                   	// #0
    10a0:	cbz	x0, 10b4 <lt_dlforeachfile+0x40>
    10a4:	bl	65c <foreach_dirinpath>
    10a8:	ldp	x19, x20, [sp, #16]
    10ac:	ldp	x29, x30, [sp], #48
    10b0:	ret
    10b4:	adrp	x0, 0 <lt__alloc_die_callback>
    10b8:	ldr	x0, [x0]
    10bc:	bl	65c <foreach_dirinpath>
    10c0:	cbnz	w0, 10a8 <lt_dlforeachfile+0x34>
    10c4:	adrp	x0, 0 <lt__alloc_die_callback>
    10c8:	add	x0, x0, #0x0
    10cc:	bl	0 <getenv>
    10d0:	mov	x4, x20
    10d4:	add	x3, sp, #0x28
    10d8:	mov	x2, x19
    10dc:	mov	x1, #0x0                   	// #0
    10e0:	bl	65c <foreach_dirinpath>
    10e4:	cbnz	w0, 10a8 <lt_dlforeachfile+0x34>
    10e8:	adrp	x0, 0 <lt__alloc_die_callback>
    10ec:	add	x0, x0, #0x0
    10f0:	bl	0 <getenv>
    10f4:	mov	x4, x20
    10f8:	add	x3, sp, #0x28
    10fc:	mov	x2, x19
    1100:	mov	x1, #0x0                   	// #0
    1104:	bl	65c <foreach_dirinpath>
    1108:	cbnz	w0, 10a8 <lt_dlforeachfile+0x34>
    110c:	adrp	x0, 0 <lt__alloc_die_callback>
    1110:	add	x0, x0, #0x0
    1114:	mov	x4, x20
    1118:	add	x3, sp, #0x28
    111c:	mov	x2, x19
    1120:	add	x0, x0, #0xff
    1124:	mov	x1, #0x0                   	// #0
    1128:	b	10a4 <lt_dlforeachfile+0x30>

000000000000112c <lt_dlclose>:
    112c:	stp	x29, x30, [sp, #-32]!
    1130:	adrp	x1, 0 <lt__alloc_die_callback>
    1134:	mov	x29, sp
    1138:	ldr	x3, [x1]
    113c:	stp	x19, x20, [sp, #16]
    1140:	mov	x19, x0
    1144:	mov	x5, x3
    1148:	mov	x0, x3
    114c:	cmp	x0, #0x0
    1150:	ccmp	x0, x19, #0x4, ne  // ne = any
    1154:	b.ne	1170 <lt_dlclose+0x44>  // b.any
    1158:	cbnz	x0, 117c <lt_dlclose+0x50>
    115c:	mov	w0, #0xc                   	// #12
    1160:	bl	0 <lt__error_string>
    1164:	mov	w20, #0x1                   	// #1
    1168:	bl	0 <lt__set_last_error>
    116c:	b	11ec <lt_dlclose+0xc0>
    1170:	mov	x5, x0
    1174:	ldr	x0, [x0]
    1178:	b	114c <lt_dlclose+0x20>
    117c:	ldr	w2, [x19, #32]
    1180:	ldrb	w0, [x19, #36]
    1184:	sub	w2, w2, #0x1
    1188:	str	w2, [x19, #32]
    118c:	and	w0, w0, #0x1
    1190:	cmp	w2, #0x0
    1194:	b.gt	1204 <lt_dlclose+0xd8>
    1198:	cbnz	w0, 120c <lt_dlclose+0xe0>
    119c:	ldp	x4, x2, [x19]
    11a0:	cmp	x3, x19
    11a4:	ldr	x0, [x2, #56]
    11a8:	b.eq	11fc <lt_dlclose+0xd0>  // b.none
    11ac:	str	x4, [x5]
    11b0:	ldr	x2, [x2, #24]
    11b4:	ldr	x1, [x19, #56]
    11b8:	blr	x2
    11bc:	mov	w20, w0
    11c0:	mov	x0, x19
    11c4:	bl	1390 <unload_deplibs>
    11c8:	add	w20, w20, w0
    11cc:	ldr	x0, [x19, #72]
    11d0:	bl	0 <free>
    11d4:	ldr	x0, [x19, #16]
    11d8:	bl	0 <free>
    11dc:	ldr	x0, [x19, #24]
    11e0:	bl	0 <free>
    11e4:	mov	x0, x19
    11e8:	bl	0 <free>
    11ec:	mov	w0, w20
    11f0:	ldp	x19, x20, [sp, #16]
    11f4:	ldp	x29, x30, [sp], #32
    11f8:	ret
    11fc:	str	x4, [x1]
    1200:	b	11b0 <lt_dlclose+0x84>
    1204:	mov	w20, #0x0                   	// #0
    1208:	cbz	w0, 11ec <lt_dlclose+0xc0>
    120c:	mov	w0, #0x10                  	// #16
    1210:	b	1160 <lt_dlclose+0x34>

0000000000001214 <lt_dlexit>:
    1214:	stp	x29, x30, [sp, #-64]!
    1218:	adrp	x1, 0 <lt__alloc_die_callback>
    121c:	mov	x29, sp
    1220:	stp	x19, x20, [sp, #16]
    1224:	add	x20, x1, #0x0
    1228:	stp	x21, x22, [sp, #32]
    122c:	ldr	w0, [x20, #16]
    1230:	str	x23, [sp, #48]
    1234:	cbnz	w0, 1260 <lt_dlexit+0x4c>
    1238:	mov	w19, #0x1                   	// #1
    123c:	mov	w0, #0xf                   	// #15
    1240:	bl	0 <lt__error_string>
    1244:	bl	0 <lt__set_last_error>
    1248:	mov	w0, w19
    124c:	ldp	x19, x20, [sp, #16]
    1250:	ldp	x21, x22, [sp, #32]
    1254:	ldr	x23, [sp, #48]
    1258:	ldp	x29, x30, [sp], #64
    125c:	ret
    1260:	sub	w0, w0, #0x1
    1264:	str	w0, [x20, #16]
    1268:	ldr	x23, [x1]
    126c:	cbz	w0, 12c4 <lt_dlexit+0xb0>
    1270:	mov	w19, #0x0                   	// #0
    1274:	b	1248 <lt_dlexit+0x34>
    1278:	ldr	x0, [x0]
    127c:	mov	w1, #0x1                   	// #1
    1280:	cbnz	x0, 12d4 <lt_dlexit+0xc0>
    1284:	cbz	w1, 128c <lt_dlexit+0x78>
    1288:	str	xzr, [x2]
    128c:	mov	w19, #0x0                   	// #0
    1290:	mov	w22, #0x1                   	// #1
    1294:	cbnz	x23, 12e8 <lt_dlexit+0xd4>
    1298:	cbnz	w19, 12a4 <lt_dlexit+0x90>
    129c:	mov	x0, #0x0                   	// #0
    12a0:	bl	0 <lt__set_last_error>
    12a4:	mov	x0, #0x0                   	// #0
    12a8:	bl	0 <lt_dlloader_next>
    12ac:	mov	x21, x0
    12b0:	cbnz	x21, 1354 <lt_dlexit+0x140>
    12b4:	ldr	x0, [x20, #8]
    12b8:	bl	0 <free>
    12bc:	str	xzr, [x20, #8]
    12c0:	b	1248 <lt_dlexit+0x34>
    12c4:	mov	x2, x1
    12c8:	mov	x0, x23
    12cc:	mov	w1, #0x0                   	// #0
    12d0:	b	1280 <lt_dlexit+0x6c>
    12d4:	ldrb	w3, [x0, #36]
    12d8:	tbnz	w3, #0, 1278 <lt_dlexit+0x64>
    12dc:	cbz	w1, 128c <lt_dlexit+0x78>
    12e0:	str	x0, [x2]
    12e4:	b	128c <lt_dlexit+0x78>
    12e8:	ldr	x0, [x20]
    12ec:	mov	w1, #0x0                   	// #0
    12f0:	cbnz	x0, 1300 <lt_dlexit+0xec>
    12f4:	cbz	w1, 1298 <lt_dlexit+0x84>
    12f8:	add	w22, w22, #0x1
    12fc:	b	1294 <lt_dlexit+0x80>
    1300:	ldrb	w2, [x0, #36]
    1304:	ldr	x21, [x0]
    1308:	tbnz	w2, #0, 133c <lt_dlexit+0x128>
    130c:	ldr	w1, [x0, #32]
    1310:	cmp	w1, w22
    1314:	b.gt	1338 <lt_dlexit+0x124>
    1318:	bl	112c <lt_dlclose>
    131c:	cmp	w0, #0x0
    1320:	cinc	w19, w19, ne  // ne = any
    1324:	cbz	x21, 1338 <lt_dlexit+0x124>
    1328:	ldr	x1, [x20]
    132c:	mov	x0, x1
    1330:	cbnz	x0, 1344 <lt_dlexit+0x130>
    1334:	mov	x21, x1
    1338:	mov	w1, #0x1                   	// #1
    133c:	mov	x0, x21
    1340:	b	12f0 <lt_dlexit+0xdc>
    1344:	cmp	x0, x21
    1348:	b.eq	1338 <lt_dlexit+0x124>  // b.none
    134c:	ldr	x0, [x0]
    1350:	b	1330 <lt_dlexit+0x11c>
    1354:	mov	x0, x21
    1358:	bl	0 <lt_dlloader_next>
    135c:	mov	x22, x0
    1360:	mov	x0, x21
    1364:	bl	0 <lt_dlloader_get>
    1368:	ldr	x0, [x0]
    136c:	bl	0 <lt_dlloader_remove>
    1370:	cbz	x0, 1380 <lt_dlexit+0x16c>
    1374:	bl	0 <free>
    1378:	mov	x21, x22
    137c:	b	12b0 <lt_dlexit+0x9c>
    1380:	bl	0 <lt__get_last_error>
    1384:	cmp	x0, #0x0
    1388:	cinc	w19, w19, ne  // ne = any
    138c:	b	1378 <lt_dlexit+0x164>

0000000000001390 <unload_deplibs>:
    1390:	stp	x29, x30, [sp, #-48]!
    1394:	mov	x29, sp
    1398:	stp	x19, x20, [sp, #16]
    139c:	ldr	w20, [x0, #40]
    13a0:	str	x21, [sp, #32]
    13a4:	cbnz	w20, 13f0 <unload_deplibs+0x60>
    13a8:	mov	w0, w20
    13ac:	ldp	x19, x20, [sp, #16]
    13b0:	ldr	x21, [sp, #32]
    13b4:	ldp	x29, x30, [sp], #48
    13b8:	ret
    13bc:	ldr	x0, [x0, x21, lsl #3]
    13c0:	ldrb	w1, [x0, #36]
    13c4:	tbnz	w1, #0, 13d0 <unload_deplibs+0x40>
    13c8:	bl	112c <lt_dlclose>
    13cc:	add	w20, w20, w0
    13d0:	add	x21, x21, #0x1
    13d4:	ldr	w1, [x19, #40]
    13d8:	ldr	x0, [x19, #48]
    13dc:	cmp	w1, w21
    13e0:	b.gt	13bc <unload_deplibs+0x2c>
    13e4:	bl	0 <free>
    13e8:	str	xzr, [x19, #48]
    13ec:	b	13a8 <unload_deplibs+0x18>
    13f0:	mov	x19, x0
    13f4:	mov	x21, #0x0                   	// #0
    13f8:	mov	w20, #0x0                   	// #0
    13fc:	b	13d4 <unload_deplibs+0x44>

0000000000001400 <try_dlopen>:
    1400:	stp	x29, x30, [sp, #-208]!
    1404:	mov	x29, sp
    1408:	stp	x19, x20, [sp, #16]
    140c:	mov	x20, x0
    1410:	ldr	x0, [x0]
    1414:	stp	x21, x22, [sp, #32]
    1418:	stp	x23, x24, [sp, #48]
    141c:	stp	x25, x26, [sp, #64]
    1420:	stp	x27, x28, [sp, #80]
    1424:	stp	xzr, xzr, [sp, #152]
    1428:	cbz	x0, 1450 <try_dlopen+0x50>
    142c:	adrp	x3, 0 <lt__alloc_die_callback>
    1430:	add	x3, x3, #0x0
    1434:	adrp	x1, 0 <lt__alloc_die_callback>
    1438:	adrp	x0, 0 <lt__alloc_die_callback>
    143c:	add	x3, x3, #0x125
    1440:	add	x1, x1, #0x0
    1444:	add	x0, x0, #0x0
    1448:	mov	w2, #0x495                 	// #1173
    144c:	bl	0 <__assert_fail>
    1450:	mov	x22, x1
    1454:	mov	x19, x2
    1458:	mov	x25, x3
    145c:	bl	0 <lt__get_last_error>
    1460:	str	x0, [sp, #112]
    1464:	cbnz	x22, 14d4 <try_dlopen+0xd4>
    1468:	mov	x0, #0x58                  	// #88
    146c:	bl	0 <lt__zalloc>
    1470:	str	x0, [x20]
    1474:	cbnz	x0, 149c <try_dlopen+0x9c>
    1478:	mov	w19, #0x1                   	// #1
    147c:	mov	w0, w19
    1480:	ldp	x19, x20, [sp, #16]
    1484:	ldp	x21, x22, [sp, #32]
    1488:	ldp	x23, x24, [sp, #48]
    148c:	ldp	x25, x26, [sp, #64]
    1490:	ldp	x27, x28, [sp, #80]
    1494:	ldp	x29, x30, [sp], #208
    1498:	ret
    149c:	ldrb	w1, [x0, #36]
    14a0:	mov	x2, x25
    14a4:	mov	x3, #0x0                   	// #0
    14a8:	str	x0, [sp, #168]
    14ac:	orr	w1, w1, #0x1
    14b0:	strb	w1, [x0, #36]
    14b4:	add	x0, sp, #0xa8
    14b8:	mov	x1, #0x0                   	// #0
    14bc:	bl	f8 <tryall_dlopen>
    14c0:	cbz	w0, 1d34 <try_dlopen+0x934>
    14c4:	ldr	x0, [x20]
    14c8:	bl	0 <free>
    14cc:	str	xzr, [x20]
    14d0:	b	1478 <try_dlopen+0x78>
    14d4:	ldrb	w0, [x22]
    14d8:	cbnz	w0, 1500 <try_dlopen+0x100>
    14dc:	adrp	x3, 0 <lt__alloc_die_callback>
    14e0:	add	x3, x3, #0x0
    14e4:	adrp	x1, 0 <lt__alloc_die_callback>
    14e8:	adrp	x0, 0 <lt__alloc_die_callback>
    14ec:	add	x3, x3, #0x125
    14f0:	add	x1, x1, #0x0
    14f4:	add	x0, x0, #0x0
    14f8:	mov	w2, #0x4b4                 	// #1204
    14fc:	b	144c <try_dlopen+0x4c>
    1500:	mov	x0, x22
    1504:	cbz	x19, 15dc <try_dlopen+0x1dc>
    1508:	bl	0 <strlen>
    150c:	mov	x21, x0
    1510:	ldrb	w0, [x19]
    1514:	cbz	w0, 15d4 <try_dlopen+0x1d4>
    1518:	mov	x0, x19
    151c:	bl	0 <strlen>
    1520:	add	x21, x21, #0x1
    1524:	add	x0, x21, x0
    1528:	bl	0 <lt__malloc>
    152c:	mov	x26, x0
    1530:	cbz	x0, 1478 <try_dlopen+0x78>
    1534:	adrp	x1, 0 <lt__alloc_die_callback>
    1538:	mov	x3, x19
    153c:	mov	x2, x22
    1540:	add	x1, x1, #0x0
    1544:	bl	0 <sprintf>
    1548:	add	x1, sp, #0x98
    154c:	mov	x0, x26
    1550:	bl	18 <canonicalize_path>
    1554:	mov	w19, w0
    1558:	cbnz	w0, 1d44 <try_dlopen+0x944>
    155c:	ldr	x22, [sp, #152]
    1560:	mov	w1, #0x2f                  	// #47
    1564:	mov	x0, x22
    1568:	bl	0 <strrchr>
    156c:	mov	x21, x0
    1570:	cbz	x0, 15ec <try_dlopen+0x1ec>
    1574:	add	x23, x0, #0x1
    1578:	sub	x22, x23, x22
    157c:	add	x0, x22, #0x1
    1580:	bl	0 <lt__malloc>
    1584:	str	x0, [sp, #160]
    1588:	mov	x24, x0
    158c:	cbz	x0, 1d54 <try_dlopen+0x954>
    1590:	ldr	x1, [sp, #152]
    1594:	mov	x2, x22
    1598:	mov	x21, x23
    159c:	bl	0 <lt_strlcpy>
    15a0:	ldr	x0, [sp, #160]
    15a4:	strb	wzr, [x0, x22]
    15a8:	ldrb	w0, [x21]
    15ac:	cbnz	w0, 15f8 <try_dlopen+0x1f8>
    15b0:	adrp	x3, 0 <lt__alloc_die_callback>
    15b4:	add	x3, x3, #0x0
    15b8:	adrp	x1, 0 <lt__alloc_die_callback>
    15bc:	adrp	x0, 0 <lt__alloc_die_callback>
    15c0:	add	x3, x3, #0x125
    15c4:	add	x1, x1, #0x0
    15c8:	add	x0, x0, #0x0
    15cc:	mov	w2, #0x4e3                 	// #1251
    15d0:	b	144c <try_dlopen+0x4c>
    15d4:	mov	x0, #0x0                   	// #0
    15d8:	b	1520 <try_dlopen+0x120>
    15dc:	bl	0 <lt__strdup>
    15e0:	mov	x26, x0
    15e4:	cbnz	x0, 1548 <try_dlopen+0x148>
    15e8:	b	1478 <try_dlopen+0x78>
    15ec:	mov	x21, x22
    15f0:	str	xzr, [sp, #152]
    15f4:	b	15a8 <try_dlopen+0x1a8>
    15f8:	mov	x0, x21
    15fc:	mov	w1, #0x2e                  	// #46
    1600:	bl	0 <strrchr>
    1604:	mov	x23, x0
    1608:	cbnz	x0, 1618 <try_dlopen+0x218>
    160c:	mov	x0, x21
    1610:	bl	0 <strlen>
    1614:	add	x23, x21, x0
    1618:	sub	x27, x23, x21
    161c:	mov	x24, #0x0                   	// #0
    1620:	add	x0, x27, #0x1
    1624:	bl	0 <lt__malloc>
    1628:	mov	x22, x0
    162c:	cbz	x0, 16d8 <try_dlopen+0x2d8>
    1630:	mov	w28, #0x5f                  	// #95
    1634:	cmp	x27, x24
    1638:	b.gt	16e0 <try_dlopen+0x2e0>
    163c:	strb	wzr, [x22, x27]
    1640:	ldr	x0, [sp, #160]
    1644:	cbz	x0, 1708 <try_dlopen+0x308>
    1648:	mov	x24, #0x0                   	// #0
    164c:	cbz	x25, 1658 <try_dlopen+0x258>
    1650:	ldrb	w0, [x25]
    1654:	tbnz	w0, #4, 185c <try_dlopen+0x45c>
    1658:	adrp	x0, 0 <lt__alloc_die_callback>
    165c:	add	x0, x0, #0x0
    1660:	add	x1, x0, #0x136
    1664:	str	x0, [sp, #104]
    1668:	mov	x0, x23
    166c:	bl	0 <strcmp>
    1670:	cbnz	w0, 1c6c <try_dlopen+0x86c>
    1674:	ldr	x0, [sp, #160]
    1678:	stp	xzr, xzr, [sp, #176]
    167c:	stp	xzr, xzr, [sp, #192]
    1680:	cbnz	x0, 18c8 <try_dlopen+0x4c8>
    1684:	adrp	x0, 0 <lt__alloc_die_callback>
    1688:	ldr	x0, [x0]
    168c:	cbnz	x0, 17dc <try_dlopen+0x3dc>
    1690:	adrp	x0, 0 <lt__alloc_die_callback>
    1694:	add	x0, x0, #0x0
    1698:	bl	0 <getenv>
    169c:	cbnz	x0, 1898 <try_dlopen+0x498>
    16a0:	adrp	x0, 0 <lt__alloc_die_callback>
    16a4:	add	x0, x0, #0x0
    16a8:	bl	0 <getenv>
    16ac:	cbnz	x0, 18b0 <try_dlopen+0x4b0>
    16b0:	ldr	x0, [sp, #104]
    16b4:	add	x2, sp, #0xa0
    16b8:	mov	x1, x21
    16bc:	add	x0, x0, #0xff
    16c0:	bl	824 <find_file>
    16c4:	mov	x23, x0
    16c8:	cbnz	x0, 17f0 <try_dlopen+0x3f0>
    16cc:	mov	w0, #0x5                   	// #5
    16d0:	bl	0 <lt__error_string>
    16d4:	bl	0 <lt__set_last_error>
    16d8:	mov	w19, #0x1                   	// #1
    16dc:	b	185c <try_dlopen+0x45c>
    16e0:	bl	0 <__ctype_b_loc>
    16e4:	ldrb	w1, [x21, x24]
    16e8:	ldr	x0, [x0]
    16ec:	ldrh	w1, [x0, x1, lsl #1]
    16f0:	ldrb	w0, [x21, x24]
    16f4:	tst	x1, #0x8
    16f8:	csel	w0, w0, w28, ne  // ne = any
    16fc:	strb	w0, [x22, x24]
    1700:	add	x24, x24, #0x1
    1704:	b	1634 <try_dlopen+0x234>
    1708:	adrp	x0, 0 <lt__alloc_die_callback>
    170c:	add	x0, x0, #0x0
    1710:	bl	0 <lt_dlloader_find>
    1714:	mov	x27, x0
    1718:	cbz	x0, 1648 <try_dlopen+0x248>
    171c:	ldrb	w0, [x22]
    1720:	cbz	w0, 17b8 <try_dlopen+0x3b8>
    1724:	mov	x0, x22
    1728:	bl	0 <strlen>
    172c:	add	x0, x0, #0x6
    1730:	bl	0 <lt__malloc>
    1734:	mov	x24, x0
    1738:	mov	x0, #0x58                  	// #88
    173c:	bl	0 <lt__zalloc>
    1740:	str	x0, [x20]
    1744:	cbz	x0, 16d8 <try_dlopen+0x2d8>
    1748:	cbz	x24, 16d8 <try_dlopen+0x2d8>
    174c:	mov	x2, #0x3                   	// #3
    1750:	adrp	x1, 0 <lt__alloc_die_callback>
    1754:	add	x1, x1, #0x0
    1758:	str	x0, [sp, #168]
    175c:	mov	x0, x22
    1760:	bl	0 <strncmp>
    1764:	adrp	x2, 0 <lt__alloc_die_callback>
    1768:	add	x2, x2, #0x0
    176c:	cbnz	w0, 17c0 <try_dlopen+0x3c0>
    1770:	add	x4, x2, #0x130
    1774:	adrp	x1, 0 <lt__alloc_die_callback>
    1778:	add	x3, x22, #0x3
    177c:	add	x2, x2, #0x132
    1780:	add	x1, x1, #0x0
    1784:	mov	x0, x24
    1788:	bl	0 <sprintf>
    178c:	mov	x3, x27
    1790:	mov	x2, x25
    1794:	mov	x1, x24
    1798:	add	x0, sp, #0xa8
    179c:	bl	f8 <tryall_dlopen>
    17a0:	cbz	w0, 1b8c <try_dlopen+0x78c>
    17a4:	ldr	x0, [x20]
    17a8:	bl	0 <free>
    17ac:	str	xzr, [x20]
    17b0:	str	xzr, [sp, #168]
    17b4:	b	164c <try_dlopen+0x24c>
    17b8:	mov	x0, #0x6                   	// #6
    17bc:	b	1730 <try_dlopen+0x330>
    17c0:	add	x3, x2, #0x130
    17c4:	mov	x0, x24
    17c8:	mov	x2, x22
    17cc:	adrp	x1, 0 <lt__alloc_die_callback>
    17d0:	add	x1, x1, #0x0
    17d4:	bl	0 <sprintf>
    17d8:	b	178c <try_dlopen+0x38c>
    17dc:	add	x2, sp, #0xa0
    17e0:	mov	x1, x21
    17e4:	bl	824 <find_file>
    17e8:	mov	x23, x0
    17ec:	cbz	x0, 1690 <try_dlopen+0x290>
    17f0:	mov	x0, #0x800                 	// #2048
    17f4:	bl	0 <lt__malloc>
    17f8:	mov	x19, x0
    17fc:	cbnz	x0, 1aec <try_dlopen+0x6ec>
    1800:	mov	w28, #0x1                   	// #1
    1804:	mov	w19, w28
    1808:	mov	w0, #0x5                   	// #5
    180c:	bl	0 <lt__error_string>
    1810:	bl	0 <lt__set_last_error>
    1814:	mov	x0, x23
    1818:	bl	0 <fclose>
    181c:	mov	x0, #0x58                  	// #88
    1820:	bl	0 <lt__zalloc>
    1824:	str	x0, [x20]
    1828:	cbnz	x0, 1d5c <try_dlopen+0x95c>
    182c:	add	w19, w19, #0x1
    1830:	ldr	x0, [sp, #176]
    1834:	bl	0 <free>
    1838:	ldr	x0, [sp, #184]
    183c:	bl	0 <free>
    1840:	ldr	x0, [sp, #192]
    1844:	bl	0 <free>
    1848:	ldr	x0, [sp, #200]
    184c:	bl	0 <free>
    1850:	ldr	x0, [x20]
    1854:	bl	0 <free>
    1858:	str	xzr, [x20]
    185c:	ldr	x0, [sp, #160]
    1860:	bl	0 <free>
    1864:	mov	x0, x26
    1868:	bl	0 <free>
    186c:	mov	x0, x22
    1870:	bl	0 <free>
    1874:	ldr	x0, [sp, #152]
    1878:	cbnz	x0, 1884 <try_dlopen+0x484>
    187c:	mov	x0, x21
    1880:	bl	0 <free>
    1884:	ldr	x0, [sp, #152]
    1888:	bl	0 <free>
    188c:	mov	x0, x24
    1890:	bl	0 <free>
    1894:	b	147c <try_dlopen+0x7c>
    1898:	add	x2, sp, #0xa0
    189c:	mov	x1, x21
    18a0:	bl	824 <find_file>
    18a4:	mov	x23, x0
    18a8:	cbnz	x0, 17f0 <try_dlopen+0x3f0>
    18ac:	b	16a0 <try_dlopen+0x2a0>
    18b0:	add	x2, sp, #0xa0
    18b4:	mov	x1, x21
    18b8:	bl	824 <find_file>
    18bc:	mov	x23, x0
    18c0:	cbz	x0, 16b0 <try_dlopen+0x2b0>
    18c4:	b	17f0 <try_dlopen+0x3f0>
    18c8:	mov	x0, x26
    18cc:	adrp	x1, 0 <lt__alloc_die_callback>
    18d0:	add	x1, x1, #0x0
    18d4:	bl	0 <fopen>
    18d8:	b	16c4 <try_dlopen+0x2c4>
    18dc:	add	x0, x19, x27
    18e0:	mov	x2, x23
    18e4:	mov	w1, w27
    18e8:	str	w3, [sp, #136]
    18ec:	sturb	wzr, [x0, #-2]
    18f0:	mov	x0, x19
    18f4:	bl	0 <fgets>
    18f8:	ldr	w3, [sp, #136]
    18fc:	cbnz	x0, 1964 <try_dlopen+0x564>
    1900:	mov	x0, x19
    1904:	str	w3, [sp, #120]
    1908:	bl	0 <free>
    190c:	ldr	w3, [sp, #120]
    1910:	cmp	w3, #0x0
    1914:	cset	w19, ne  // ne = any
    1918:	b	1814 <try_dlopen+0x414>
    191c:	lsl	x3, x27, #1
    1920:	mov	x0, x19
    1924:	mov	x1, x3
    1928:	str	x3, [sp, #136]
    192c:	bl	0 <lt__realloc>
    1930:	mov	x19, x0
    1934:	cbz	x0, 1b10 <try_dlopen+0x710>
    1938:	ldr	x3, [sp, #136]
    193c:	mov	x2, x23
    1940:	add	w1, w27, #0x1
    1944:	add	x0, x0, x3
    1948:	sturb	wzr, [x0, #-2]
    194c:	sub	x0, x27, #0x1
    1950:	add	x0, x19, x0
    1954:	bl	0 <fgets>
    1958:	cbz	x0, 1984 <try_dlopen+0x584>
    195c:	ldr	x3, [sp, #136]
    1960:	mov	x27, x3
    1964:	add	x0, x19, x27
    1968:	ldurb	w0, [x0, #-2]
    196c:	cmp	w0, #0x0
    1970:	ccmp	w0, #0xa, #0x4, ne  // ne = any
    1974:	b.eq	1984 <try_dlopen+0x584>  // b.none
    1978:	mov	x0, x23
    197c:	bl	0 <feof>
    1980:	cbz	w0, 191c <try_dlopen+0x51c>
    1984:	ldrb	w0, [x19]
    1988:	cmp	w0, #0x23
    198c:	ccmp	w0, #0xa, #0x4, ne  // ne = any
    1990:	b.eq	19bc <try_dlopen+0x5bc>  // b.none
    1994:	ldr	x1, [sp, #120]
    1998:	mov	x0, x19
    199c:	mov	x2, #0x7                   	// #7
    19a0:	bl	0 <strncmp>
    19a4:	cbnz	w0, 19d4 <try_dlopen+0x5d4>
    19a8:	add	x1, x19, #0x7
    19ac:	add	x0, sp, #0xb0
    19b0:	bl	3b8 <trim>
    19b4:	mov	w3, w0
    19b8:	cbnz	w0, 1900 <try_dlopen+0x500>
    19bc:	mov	x0, x23
    19c0:	bl	0 <feof>
    19c4:	mov	w3, w0
    19c8:	cbz	w0, 18dc <try_dlopen+0x4dc>
    19cc:	mov	w3, #0x0                   	// #0
    19d0:	b	1900 <try_dlopen+0x500>
    19d4:	ldr	x1, [sp, #128]
    19d8:	mov	x0, x19
    19dc:	mov	x2, #0xc                   	// #12
    19e0:	bl	0 <strncmp>
    19e4:	cbnz	w0, 19f4 <try_dlopen+0x5f4>
    19e8:	add	x1, x19, #0xc
    19ec:	add	x0, sp, #0xb8
    19f0:	b	19b0 <try_dlopen+0x5b0>
    19f4:	adrp	x1, 0 <lt__alloc_die_callback>
    19f8:	mov	x0, x19
    19fc:	add	x1, x1, #0x0
    1a00:	mov	x2, #0x7                   	// #7
    1a04:	bl	0 <strncmp>
    1a08:	cbnz	w0, 1a18 <try_dlopen+0x618>
    1a0c:	add	x1, x19, #0x7
    1a10:	add	x0, sp, #0xc0
    1a14:	b	19b0 <try_dlopen+0x5b0>
    1a18:	adrp	x1, 0 <lt__alloc_die_callback>
    1a1c:	mov	x0, x19
    1a20:	add	x1, x1, #0x0
    1a24:	mov	x2, #0x10                  	// #16
    1a28:	bl	0 <strncmp>
    1a2c:	cbnz	w0, 1a3c <try_dlopen+0x63c>
    1a30:	add	x1, x19, #0x10
    1a34:	add	x0, sp, #0xc8
    1a38:	b	19b0 <try_dlopen+0x5b0>
    1a3c:	adrp	x1, 0 <lt__alloc_die_callback>
    1a40:	mov	x0, x19
    1a44:	add	x1, x1, #0x0
    1a48:	bl	0 <strcmp>
    1a4c:	cbz	w0, 1adc <try_dlopen+0x6dc>
    1a50:	adrp	x1, 0 <lt__alloc_die_callback>
    1a54:	mov	x0, x19
    1a58:	add	x1, x1, #0x0
    1a5c:	bl	0 <strcmp>
    1a60:	cbz	w0, 1ae4 <try_dlopen+0x6e4>
    1a64:	ldr	x0, [sp, #176]
    1a68:	cbnz	x0, 19bc <try_dlopen+0x5bc>
    1a6c:	adrp	x1, 0 <lt__alloc_die_callback>
    1a70:	mov	x0, x19
    1a74:	add	x1, x1, #0x0
    1a78:	mov	x2, #0xe                   	// #14
    1a7c:	bl	0 <strncmp>
    1a80:	cbnz	w0, 19bc <try_dlopen+0x5bc>
    1a84:	add	x1, x19, #0xe
    1a88:	add	x0, sp, #0xb0
    1a8c:	bl	3b8 <trim>
    1a90:	mov	w3, w0
    1a94:	cbnz	w0, 1900 <try_dlopen+0x500>
    1a98:	ldr	x0, [sp, #176]
    1a9c:	cbz	x0, 19bc <try_dlopen+0x5bc>
    1aa0:	mov	w1, #0x20                  	// #32
    1aa4:	bl	0 <strrchr>
    1aa8:	cbz	x0, 19bc <try_dlopen+0x5bc>
    1aac:	add	x0, x0, #0x1
    1ab0:	bl	0 <lt__strdup>
    1ab4:	mov	x1, x0
    1ab8:	cbz	x0, 1b10 <try_dlopen+0x710>
    1abc:	ldr	x0, [sp, #176]
    1ac0:	str	x1, [sp, #136]
    1ac4:	cmp	x1, x0
    1ac8:	b.eq	19bc <try_dlopen+0x5bc>  // b.none
    1acc:	bl	0 <free>
    1ad0:	ldr	x1, [sp, #136]
    1ad4:	str	x1, [sp, #176]
    1ad8:	b	19bc <try_dlopen+0x5bc>
    1adc:	mov	w28, #0x1                   	// #1
    1ae0:	b	19bc <try_dlopen+0x5bc>
    1ae4:	mov	w28, #0x0                   	// #0
    1ae8:	b	19bc <try_dlopen+0x5bc>
    1aec:	adrp	x0, 0 <lt__alloc_die_callback>
    1af0:	add	x0, x0, #0x0
    1af4:	mov	w28, #0x1                   	// #1
    1af8:	mov	x27, #0x800                 	// #2048
    1afc:	str	x0, [sp, #120]
    1b00:	adrp	x0, 0 <lt__alloc_die_callback>
    1b04:	add	x0, x0, #0x0
    1b08:	str	x0, [sp, #128]
    1b0c:	b	19bc <try_dlopen+0x5bc>
    1b10:	mov	w3, #0x1                   	// #1
    1b14:	b	1900 <try_dlopen+0x500>
    1b18:	adrp	x0, 0 <lt__alloc_die_callback>
    1b1c:	add	x0, x0, #0x0
    1b20:	stp	x5, x1, [sp, #120]
    1b24:	bl	0 <lt_dlloader_find>
    1b28:	mov	x2, x25
    1b2c:	ldr	x1, [sp, #128]
    1b30:	mov	x3, x0
    1b34:	add	x0, sp, #0xa8
    1b38:	bl	f8 <tryall_dlopen>
    1b3c:	ldr	x5, [sp, #120]
    1b40:	cbnz	w0, 1d78 <try_dlopen+0x978>
    1b44:	ldr	x0, [sp, #176]
    1b48:	bl	0 <free>
    1b4c:	str	xzr, [sp, #176]
    1b50:	ldr	x0, [sp, #184]
    1b54:	bl	0 <free>
    1b58:	str	xzr, [sp, #184]
    1b5c:	ldr	x0, [sp, #192]
    1b60:	bl	0 <free>
    1b64:	str	xzr, [sp, #192]
    1b68:	ldr	x0, [sp, #200]
    1b6c:	bl	0 <free>
    1b70:	str	xzr, [sp, #200]
    1b74:	ldr	x0, [x20]
    1b78:	cbnz	w19, 1854 <try_dlopen+0x454>
    1b7c:	ldr	x1, [sp, #168]
    1b80:	cmp	x0, x1
    1b84:	b.eq	1b8c <try_dlopen+0x78c>  // b.none
    1b88:	bl	1390 <unload_deplibs>
    1b8c:	ldr	x0, [x20]
    1b90:	ldr	x1, [sp, #168]
    1b94:	cmp	x0, x1
    1b98:	b.eq	1bac <try_dlopen+0x7ac>  // b.none
    1b9c:	bl	0 <free>
    1ba0:	ldr	x0, [sp, #168]
    1ba4:	str	x0, [x20]
    1ba8:	str	xzr, [sp, #168]
    1bac:	ldr	x0, [x20]
    1bb0:	ldr	w1, [x0, #32]
    1bb4:	cbnz	w1, 1bf4 <try_dlopen+0x7f4>
    1bb8:	mov	w1, #0x1                   	// #1
    1bbc:	str	w1, [x0, #32]
    1bc0:	ldr	x0, [x0, #24]
    1bc4:	cmp	x0, x22
    1bc8:	b.eq	1bdc <try_dlopen+0x7dc>  // b.none
    1bcc:	bl	0 <free>
    1bd0:	ldr	x0, [x20]
    1bd4:	str	x22, [x0, #24]
    1bd8:	mov	x22, #0x0                   	// #0
    1bdc:	ldr	x1, [x20]
    1be0:	adrp	x0, 0 <lt__alloc_die_callback>
    1be4:	ldr	x2, [x0]
    1be8:	str	x2, [x1]
    1bec:	ldr	x1, [x20]
    1bf0:	str	x1, [x0]
    1bf4:	ldr	x0, [sp, #112]
    1bf8:	mov	w19, #0x0                   	// #0
    1bfc:	bl	0 <lt__set_last_error>
    1c00:	b	185c <try_dlopen+0x45c>
    1c04:	cmp	x5, #0x0
    1c08:	csel	w0, w28, wzr, ne  // ne = any
    1c0c:	cbz	w0, 1c50 <try_dlopen+0x850>
    1c10:	mov	x4, x25
    1c14:	mov	x3, x27
    1c18:	mov	x2, x5
    1c1c:	mov	x1, #0x0                   	// #0
    1c20:	add	x0, sp, #0xa8
    1c24:	bl	258 <tryall_dlopen_module>
    1c28:	cbz	w0, 1b44 <try_dlopen+0x744>
    1c2c:	cbz	x23, 1d7c <try_dlopen+0x97c>
    1c30:	mov	x4, x25
    1c34:	mov	x3, x27
    1c38:	mov	x2, x23
    1c3c:	add	x0, sp, #0xa8
    1c40:	mov	x1, #0x0                   	// #0
    1c44:	bl	258 <tryall_dlopen_module>
    1c48:	cbnz	w0, 1d7c <try_dlopen+0x97c>
    1c4c:	b	1b44 <try_dlopen+0x744>
    1c50:	cbnz	w28, 1c2c <try_dlopen+0x82c>
    1c54:	ldr	x0, [sp, #104]
    1c58:	mov	x4, x25
    1c5c:	mov	x3, x27
    1c60:	mov	x1, x23
    1c64:	add	x2, x0, #0x13a
    1c68:	b	1c20 <try_dlopen+0x820>
    1c6c:	mov	x0, #0x58                  	// #88
    1c70:	bl	0 <lt__zalloc>
    1c74:	str	x0, [x20]
    1c78:	cbz	x0, 16d8 <try_dlopen+0x2d8>
    1c7c:	str	x0, [sp, #168]
    1c80:	ldr	x0, [sp, #160]
    1c84:	cbz	x0, 1cb8 <try_dlopen+0x8b8>
    1c88:	mov	x2, x25
    1c8c:	mov	x1, x26
    1c90:	add	x0, sp, #0xa8
    1c94:	mov	x3, #0x0                   	// #0
    1c98:	bl	f8 <tryall_dlopen>
    1c9c:	cbnz	w0, 1ca8 <try_dlopen+0x8a8>
    1ca0:	ldr	x0, [sp, #168]
    1ca4:	cbnz	x0, 1b8c <try_dlopen+0x78c>
    1ca8:	ldr	x0, [x20]
    1cac:	bl	0 <free>
    1cb0:	str	xzr, [x20]
    1cb4:	b	16d8 <try_dlopen+0x2d8>
    1cb8:	adrp	x0, 0 <lt__alloc_die_callback>
    1cbc:	mov	x3, x25
    1cc0:	add	x2, sp, #0xa8
    1cc4:	mov	x1, x21
    1cc8:	ldr	x0, [x0]
    1ccc:	bl	850 <find_handle>
    1cd0:	cbnz	x0, 1ca0 <try_dlopen+0x8a0>
    1cd4:	adrp	x0, 0 <lt__alloc_die_callback>
    1cd8:	add	x0, x0, #0x0
    1cdc:	bl	0 <getenv>
    1ce0:	mov	x3, x25
    1ce4:	add	x2, sp, #0xa8
    1ce8:	mov	x1, x21
    1cec:	bl	850 <find_handle>
    1cf0:	cbnz	x0, 1ca0 <try_dlopen+0x8a0>
    1cf4:	adrp	x0, 0 <lt__alloc_die_callback>
    1cf8:	add	x0, x0, #0x0
    1cfc:	bl	0 <getenv>
    1d00:	mov	x3, x25
    1d04:	add	x2, sp, #0xa8
    1d08:	mov	x1, x21
    1d0c:	bl	850 <find_handle>
    1d10:	cbnz	x0, 1ca0 <try_dlopen+0x8a0>
    1d14:	ldr	x0, [sp, #104]
    1d18:	mov	x3, x25
    1d1c:	add	x2, sp, #0xa8
    1d20:	mov	x1, x21
    1d24:	add	x0, x0, #0xff
    1d28:	bl	850 <find_handle>
    1d2c:	cbnz	x0, 1ca0 <try_dlopen+0x8a0>
    1d30:	b	1c88 <try_dlopen+0x888>
    1d34:	mov	x26, #0x0                   	// #0
    1d38:	mov	x21, #0x0                   	// #0
    1d3c:	mov	x24, #0x0                   	// #0
    1d40:	b	1b8c <try_dlopen+0x78c>
    1d44:	mov	x22, #0x0                   	// #0
    1d48:	mov	x21, #0x0                   	// #0
    1d4c:	mov	x24, #0x0                   	// #0
    1d50:	b	16d8 <try_dlopen+0x2d8>
    1d54:	mov	x22, #0x0                   	// #0
    1d58:	b	16d8 <try_dlopen+0x2d8>
    1d5c:	ldr	x27, [sp, #176]
    1d60:	cbnz	w19, 1830 <try_dlopen+0x430>
    1d64:	ldp	x1, x5, [sp, #184]
    1d68:	str	wzr, [x0, #40]
    1d6c:	str	x0, [sp, #168]
    1d70:	ldr	x23, [sp, #160]
    1d74:	cbnz	x1, 1b18 <try_dlopen+0x718>
    1d78:	cbnz	x27, 1c04 <try_dlopen+0x804>
    1d7c:	ldr	x0, [x20]
    1d80:	mov	w19, #0x1                   	// #1
    1d84:	bl	1390 <unload_deplibs>
    1d88:	b	1b44 <try_dlopen+0x744>

0000000000001d8c <lt_dlopenadvise>:
    1d8c:	stp	x29, x30, [sp, #-80]!
    1d90:	mov	x29, sp
    1d94:	stp	x19, x20, [sp, #16]
    1d98:	mov	x20, x1
    1d9c:	mov	x19, x0
    1da0:	stp	x21, x22, [sp, #32]
    1da4:	str	x23, [sp, #48]
    1da8:	str	xzr, [sp, #72]
    1dac:	bl	0 <lt__get_last_error>
    1db0:	cbz	x20, 1e1c <lt_dlopenadvise+0x90>
    1db4:	mov	x23, x0
    1db8:	ldrb	w0, [x20]
    1dbc:	and	w1, w0, #0xc
    1dc0:	cmp	w1, #0xc
    1dc4:	b.ne	1ddc <lt_dlopenadvise+0x50>  // b.any
    1dc8:	mov	w0, #0x13                  	// #19
    1dcc:	bl	0 <lt__error_string>
    1dd0:	bl	0 <lt__set_last_error>
    1dd4:	mov	x0, #0x0                   	// #0
    1dd8:	b	1e3c <lt_dlopenadvise+0xb0>
    1ddc:	cbz	x19, 1e1c <lt_dlopenadvise+0x90>
    1de0:	tbz	w0, #0, 1e1c <lt_dlopenadvise+0x90>
    1de4:	mov	x0, x19
    1de8:	mov	w1, #0x2e                  	// #46
    1dec:	bl	0 <strrchr>
    1df0:	mov	x21, x0
    1df4:	cbz	x0, 1e50 <lt_dlopenadvise+0xc4>
    1df8:	adrp	x22, 0 <lt__alloc_die_callback>
    1dfc:	add	x22, x22, #0x0
    1e00:	add	x1, x22, #0x136
    1e04:	bl	0 <strcmp>
    1e08:	cbz	w0, 1e1c <lt_dlopenadvise+0x90>
    1e0c:	add	x1, x22, #0x141
    1e10:	mov	x0, x21
    1e14:	bl	0 <strcmp>
    1e18:	cbnz	w0, 1e50 <lt_dlopenadvise+0xc4>
    1e1c:	mov	x3, x20
    1e20:	mov	x1, x19
    1e24:	add	x0, sp, #0x48
    1e28:	mov	x2, #0x0                   	// #0
    1e2c:	bl	1400 <try_dlopen>
    1e30:	cmp	w0, #0x0
    1e34:	ldr	x0, [sp, #72]
    1e38:	csel	x0, x0, xzr, eq  // eq = none
    1e3c:	ldp	x19, x20, [sp, #16]
    1e40:	ldp	x21, x22, [sp, #32]
    1e44:	ldr	x23, [sp, #48]
    1e48:	ldp	x29, x30, [sp], #80
    1e4c:	ret
    1e50:	ldrb	w0, [x19]
    1e54:	cbz	w0, 1ee8 <lt_dlopenadvise+0x15c>
    1e58:	adrp	x21, 0 <lt__alloc_die_callback>
    1e5c:	add	x21, x21, #0x0
    1e60:	mov	x1, x19
    1e64:	mov	x3, x20
    1e68:	add	x2, x21, #0x136
    1e6c:	add	x0, sp, #0x48
    1e70:	bl	1400 <try_dlopen>
    1e74:	ldr	x1, [sp, #72]
    1e78:	cbz	x1, 1e84 <lt_dlopenadvise+0xf8>
    1e7c:	ldr	x0, [sp, #72]
    1e80:	b	1e3c <lt_dlopenadvise+0xb0>
    1e84:	cmp	w0, #0x0
    1e88:	b.le	1ea4 <lt_dlopenadvise+0x118>
    1e8c:	bl	0 <lt__get_last_error>
    1e90:	mov	x22, x0
    1e94:	mov	w0, #0x5                   	// #5
    1e98:	bl	0 <lt__error_string>
    1e9c:	cmp	x22, x0
    1ea0:	b.ne	1e7c <lt_dlopenadvise+0xf0>  // b.any
    1ea4:	mov	x0, x23
    1ea8:	bl	0 <lt__set_last_error>
    1eac:	mov	x1, x19
    1eb0:	mov	x3, x20
    1eb4:	add	x2, x21, #0x141
    1eb8:	add	x0, sp, #0x48
    1ebc:	bl	1400 <try_dlopen>
    1ec0:	ldr	x1, [sp, #72]
    1ec4:	cbnz	x1, 1e7c <lt_dlopenadvise+0xf0>
    1ec8:	cmp	w0, #0x0
    1ecc:	b.le	1ee8 <lt_dlopenadvise+0x15c>
    1ed0:	bl	0 <lt__get_last_error>
    1ed4:	mov	x19, x0
    1ed8:	mov	w0, #0x5                   	// #5
    1edc:	bl	0 <lt__error_string>
    1ee0:	cmp	x19, x0
    1ee4:	b.ne	1e7c <lt_dlopenadvise+0xf0>  // b.any
    1ee8:	mov	w0, #0x5                   	// #5
    1eec:	b	1dcc <lt_dlopenadvise+0x40>

0000000000001ef0 <lt_dlopen>:
    1ef0:	mov	x1, #0x0                   	// #0
    1ef4:	b	1d8c <lt_dlopenadvise>

0000000000001ef8 <lt_dlopenext>:
    1ef8:	stp	x29, x30, [sp, #-48]!
    1efc:	mov	x29, sp
    1f00:	str	x19, [sp, #16]
    1f04:	mov	x19, x0
    1f08:	add	x0, sp, #0x28
    1f0c:	bl	e90 <lt_dladvise_init>
    1f10:	cbz	w0, 1f30 <lt_dlopenext+0x38>
    1f14:	mov	x19, #0x0                   	// #0
    1f18:	ldr	x0, [sp, #40]
    1f1c:	bl	0 <free>
    1f20:	mov	x0, x19
    1f24:	ldr	x19, [sp, #16]
    1f28:	ldp	x29, x30, [sp], #48
    1f2c:	ret
    1f30:	add	x0, sp, #0x28
    1f34:	bl	ef8 <lt_dladvise_ext>
    1f38:	cbnz	w0, 1f14 <lt_dlopenext+0x1c>
    1f3c:	ldr	x1, [sp, #40]
    1f40:	mov	x0, x19
    1f44:	bl	1d8c <lt_dlopenadvise>
    1f48:	mov	x19, x0
    1f4c:	b	1f18 <lt_dlopenext+0x20>

0000000000001f50 <lt_dlsym>:
    1f50:	stp	x29, x30, [sp, #-208]!
    1f54:	mov	x29, sp
    1f58:	stp	x19, x20, [sp, #16]
    1f5c:	stp	x21, x22, [sp, #32]
    1f60:	stp	x23, x24, [sp, #48]
    1f64:	str	x25, [sp, #64]
    1f68:	cbnz	x0, 1f98 <lt_dlsym+0x48>
    1f6c:	mov	w0, #0xc                   	// #12
    1f70:	mov	x21, #0x0                   	// #0
    1f74:	bl	0 <lt__error_string>
    1f78:	bl	0 <lt__set_last_error>
    1f7c:	mov	x0, x21
    1f80:	ldp	x19, x20, [sp, #16]
    1f84:	ldp	x21, x22, [sp, #32]
    1f88:	ldp	x23, x24, [sp, #48]
    1f8c:	ldr	x25, [sp, #64]
    1f90:	ldp	x29, x30, [sp], #208
    1f94:	ret
    1f98:	mov	x22, x1
    1f9c:	cbnz	x1, 1fa8 <lt_dlsym+0x58>
    1fa0:	mov	w0, #0xa                   	// #10
    1fa4:	b	1f70 <lt_dlsym+0x20>
    1fa8:	mov	x20, x0
    1fac:	ldrb	w0, [x1]
    1fb0:	cbz	w0, 2018 <lt_dlsym+0xc8>
    1fb4:	mov	x0, x1
    1fb8:	bl	0 <strlen>
    1fbc:	mov	x19, x0
    1fc0:	ldr	x0, [x20, #8]
    1fc4:	ldr	x0, [x0, #8]
    1fc8:	cbz	x0, 2020 <lt_dlsym+0xd0>
    1fcc:	ldrb	w1, [x0]
    1fd0:	cbz	w1, 2020 <lt_dlsym+0xd0>
    1fd4:	bl	0 <strlen>
    1fd8:	add	x19, x19, x0
    1fdc:	ldr	x0, [x20, #24]
    1fe0:	cbz	x0, 2028 <lt_dlsym+0xd8>
    1fe4:	ldrb	w1, [x0]
    1fe8:	cbz	w1, 2028 <lt_dlsym+0xd8>
    1fec:	bl	0 <strlen>
    1ff0:	add	x0, x19, x0
    1ff4:	add	x1, x0, #0x5
    1ff8:	cmp	x1, #0x7f
    1ffc:	b.ls	2030 <lt_dlsym+0xe0>  // b.plast
    2000:	add	x0, x0, #0x6
    2004:	bl	0 <lt__malloc>
    2008:	mov	x19, x0
    200c:	cbnz	x0, 2034 <lt_dlsym+0xe4>
    2010:	mov	w0, #0xd                   	// #13
    2014:	b	1f70 <lt_dlsym+0x20>
    2018:	mov	x19, #0x0                   	// #0
    201c:	b	1fc0 <lt_dlsym+0x70>
    2020:	mov	x0, #0x0                   	// #0
    2024:	b	1fd8 <lt_dlsym+0x88>
    2028:	mov	x0, #0x0                   	// #0
    202c:	b	1ff0 <lt_dlsym+0xa0>
    2030:	add	x19, sp, #0x50
    2034:	ldr	x0, [x20, #8]
    2038:	add	x24, sp, #0x50
    203c:	ldr	x25, [x0, #56]
    2040:	ldr	x0, [x20, #24]
    2044:	cbz	x0, 20d8 <lt_dlsym+0x188>
    2048:	bl	0 <lt__get_last_error>
    204c:	mov	x23, x0
    2050:	ldr	x0, [x20, #8]
    2054:	ldr	x1, [x0, #8]
    2058:	cbz	x1, 20c0 <lt_dlsym+0x170>
    205c:	mov	x0, x19
    2060:	bl	0 <strcpy>
    2064:	ldr	x1, [x20, #24]
    2068:	mov	x0, x19
    206c:	bl	0 <strcat>
    2070:	mov	x0, x19
    2074:	adrp	x1, 0 <lt__alloc_die_callback>
    2078:	add	x1, x1, #0x0
    207c:	bl	0 <strcat>
    2080:	mov	x1, x22
    2084:	mov	x0, x19
    2088:	bl	0 <strcat>
    208c:	ldr	x0, [x20, #8]
    2090:	mov	x2, x19
    2094:	ldr	x1, [x20, #56]
    2098:	ldr	x3, [x0, #32]
    209c:	mov	x0, x25
    20a0:	blr	x3
    20a4:	mov	x21, x0
    20a8:	cbz	x0, 20d0 <lt_dlsym+0x180>
    20ac:	cmp	x19, x24
    20b0:	b.eq	1f7c <lt_dlsym+0x2c>  // b.none
    20b4:	mov	x0, x19
    20b8:	bl	0 <free>
    20bc:	b	1f7c <lt_dlsym+0x2c>
    20c0:	ldr	x1, [x20, #24]
    20c4:	mov	x0, x19
    20c8:	bl	0 <strcpy>
    20cc:	b	2070 <lt_dlsym+0x120>
    20d0:	mov	x0, x23
    20d4:	bl	0 <lt__set_last_error>
    20d8:	ldr	x0, [x20, #8]
    20dc:	ldr	x1, [x0, #8]
    20e0:	cbz	x1, 2118 <lt_dlsym+0x1c8>
    20e4:	mov	x0, x19
    20e8:	bl	0 <strcpy>
    20ec:	mov	x1, x22
    20f0:	mov	x0, x19
    20f4:	bl	0 <strcat>
    20f8:	ldr	x0, [x20, #8]
    20fc:	mov	x2, x19
    2100:	ldr	x1, [x20, #56]
    2104:	ldr	x3, [x0, #32]
    2108:	mov	x0, x25
    210c:	blr	x3
    2110:	mov	x21, x0
    2114:	b	20ac <lt_dlsym+0x15c>
    2118:	mov	x1, x22
    211c:	mov	x0, x19
    2120:	bl	0 <strcpy>
    2124:	b	20f8 <lt_dlsym+0x1a8>

0000000000002128 <loader_init_callback>:
    2128:	stp	x29, x30, [sp, #-16]!
    212c:	adrp	x1, 0 <lt__alloc_die_callback>
    2130:	add	x1, x1, #0x0
    2134:	mov	x29, sp
    2138:	bl	1f50 <lt_dlsym>
    213c:	ldp	x29, x30, [sp], #16
    2140:	b	d70 <loader_init.constprop.0>

0000000000002144 <lt_dlerror>:
    2144:	stp	x29, x30, [sp, #-32]!
    2148:	mov	x29, sp
    214c:	str	x19, [sp, #16]
    2150:	bl	0 <lt__get_last_error>
    2154:	mov	x19, x0
    2158:	mov	x0, #0x0                   	// #0
    215c:	bl	0 <lt__set_last_error>
    2160:	mov	x0, x19
    2164:	ldr	x19, [sp, #16]
    2168:	ldp	x29, x30, [sp], #32
    216c:	ret

0000000000002170 <lt_dladdsearchdir>:
    2170:	cbz	x0, 21a0 <lt_dladdsearchdir+0x30>
    2174:	mov	x1, x0
    2178:	ldrb	w0, [x0]
    217c:	cbz	w0, 21a0 <lt_dladdsearchdir+0x30>
    2180:	stp	x29, x30, [sp, #-16]!
    2184:	mov	x0, #0x0                   	// #0
    2188:	mov	x29, sp
    218c:	bl	8f0 <lt_dlpath_insertdir.constprop.0>
    2190:	cmp	w0, #0x0
    2194:	cset	w0, ne  // ne = any
    2198:	ldp	x29, x30, [sp], #16
    219c:	ret
    21a0:	mov	w0, #0x0                   	// #0
    21a4:	ret

00000000000021a8 <lt_dlinsertsearchdir>:
    21a8:	stp	x29, x30, [sp, #-48]!
    21ac:	mov	x29, sp
    21b0:	stp	x19, x20, [sp, #16]
    21b4:	mov	x20, x0
    21b8:	str	x21, [sp, #32]
    21bc:	mov	x21, x1
    21c0:	cbz	x0, 2214 <lt_dlinsertsearchdir+0x6c>
    21c4:	adrp	x0, 0 <lt__alloc_die_callback>
    21c8:	ldr	x19, [x0]
    21cc:	cmp	x19, x20
    21d0:	b.hi	21f4 <lt_dlinsertsearchdir+0x4c>  // b.pmore
    21d4:	cbz	x19, 21f4 <lt_dlinsertsearchdir+0x4c>
    21d8:	ldrb	w0, [x19]
    21dc:	cbz	w0, 21f4 <lt_dlinsertsearchdir+0x4c>
    21e0:	mov	x0, x19
    21e4:	bl	0 <strlen>
    21e8:	add	x19, x19, x0
    21ec:	cmp	x20, x19
    21f0:	b.cc	2214 <lt_dlinsertsearchdir+0x6c>  // b.lo, b.ul, b.last
    21f4:	mov	w0, #0x12                  	// #18
    21f8:	bl	0 <lt__error_string>
    21fc:	bl	0 <lt__set_last_error>
    2200:	mov	w0, #0x1                   	// #1
    2204:	ldp	x19, x20, [sp, #16]
    2208:	ldr	x21, [sp, #32]
    220c:	ldp	x29, x30, [sp], #48
    2210:	ret
    2214:	cbz	x21, 2238 <lt_dlinsertsearchdir+0x90>
    2218:	ldrb	w0, [x21]
    221c:	cbz	w0, 2238 <lt_dlinsertsearchdir+0x90>
    2220:	mov	x1, x21
    2224:	mov	x0, x20
    2228:	bl	8f0 <lt_dlpath_insertdir.constprop.0>
    222c:	cmp	w0, #0x0
    2230:	cset	w0, ne  // ne = any
    2234:	b	2204 <lt_dlinsertsearchdir+0x5c>
    2238:	mov	w0, #0x0                   	// #0
    223c:	b	2204 <lt_dlinsertsearchdir+0x5c>

0000000000002240 <lt_dlsetsearchpath>:
    2240:	stp	x29, x30, [sp, #-32]!
    2244:	mov	x29, sp
    2248:	stp	x19, x20, [sp, #16]
    224c:	adrp	x20, 0 <lt__alloc_die_callback>
    2250:	add	x20, x20, #0x0
    2254:	mov	x19, x0
    2258:	ldr	x0, [x20, #8]
    225c:	bl	0 <free>
    2260:	str	xzr, [x20, #8]
    2264:	cbz	x19, 2290 <lt_dlsetsearchpath+0x50>
    2268:	ldrb	w0, [x19]
    226c:	cbz	w0, 2290 <lt_dlsetsearchpath+0x50>
    2270:	add	x1, x20, #0x8
    2274:	mov	x0, x19
    2278:	bl	18 <canonicalize_path>
    227c:	cmp	w0, #0x0
    2280:	cset	w0, ne  // ne = any
    2284:	ldp	x19, x20, [sp, #16]
    2288:	ldp	x29, x30, [sp], #32
    228c:	ret
    2290:	mov	w0, #0x0                   	// #0
    2294:	b	2284 <lt_dlsetsearchpath+0x44>

0000000000002298 <lt_dlgetsearchpath>:
    2298:	adrp	x0, 0 <lt__alloc_die_callback>
    229c:	ldr	x0, [x0]
    22a0:	ret

00000000000022a4 <lt_dlmakeresident>:
    22a4:	cbnz	x0, 22c8 <lt_dlmakeresident+0x24>
    22a8:	stp	x29, x30, [sp, #-16]!
    22ac:	mov	w0, #0xc                   	// #12
    22b0:	mov	x29, sp
    22b4:	bl	0 <lt__error_string>
    22b8:	bl	0 <lt__set_last_error>
    22bc:	mov	w0, #0x1                   	// #1
    22c0:	ldp	x29, x30, [sp], #16
    22c4:	ret
    22c8:	ldrb	w1, [x0, #36]
    22cc:	orr	w1, w1, #0x1
    22d0:	strb	w1, [x0, #36]
    22d4:	mov	w0, #0x0                   	// #0
    22d8:	ret

00000000000022dc <lt_dlisresident>:
    22dc:	cbnz	x0, 2300 <lt_dlisresident+0x24>
    22e0:	stp	x29, x30, [sp, #-16]!
    22e4:	mov	w0, #0xc                   	// #12
    22e8:	mov	x29, sp
    22ec:	bl	0 <lt__error_string>
    22f0:	bl	0 <lt__set_last_error>
    22f4:	mov	w0, #0xffffffff            	// #-1
    22f8:	ldp	x29, x30, [sp], #16
    22fc:	ret
    2300:	ldrb	w0, [x0, #36]
    2304:	and	w0, w0, #0x1
    2308:	ret

000000000000230c <lt_dlinterface_register>:
    230c:	stp	x29, x30, [sp, #-48]!
    2310:	mov	x29, sp
    2314:	stp	x19, x20, [sp, #16]
    2318:	mov	x20, x1
    231c:	str	x21, [sp, #32]
    2320:	mov	x21, x0
    2324:	mov	x0, #0x10                  	// #16
    2328:	bl	0 <lt__malloc>
    232c:	mov	x19, x0
    2330:	cbz	x0, 2350 <lt_dlinterface_register+0x44>
    2334:	mov	x0, x21
    2338:	bl	0 <lt__strdup>
    233c:	str	x0, [x19]
    2340:	cbnz	x0, 2364 <lt_dlinterface_register+0x58>
    2344:	mov	x0, x19
    2348:	mov	x19, #0x0                   	// #0
    234c:	bl	0 <free>
    2350:	mov	x0, x19
    2354:	ldp	x19, x20, [sp, #16]
    2358:	ldr	x21, [sp, #32]
    235c:	ldp	x29, x30, [sp], #48
    2360:	ret
    2364:	str	x20, [x19, #8]
    2368:	b	2350 <lt_dlinterface_register+0x44>

000000000000236c <lt_dlinterface_free>:
    236c:	stp	x29, x30, [sp, #-32]!
    2370:	mov	x29, sp
    2374:	str	x19, [sp, #16]
    2378:	mov	x19, x0
    237c:	ldr	x0, [x0]
    2380:	bl	0 <free>
    2384:	mov	x0, x19
    2388:	ldr	x19, [sp, #16]
    238c:	ldp	x29, x30, [sp], #32
    2390:	b	0 <free>

0000000000002394 <lt_dlcaller_set_data>:
    2394:	stp	x29, x30, [sp, #-48]!
    2398:	mov	x29, sp
    239c:	stp	x21, x22, [sp, #32]
    23a0:	mov	x21, x0
    23a4:	mov	x22, x2
    23a8:	ldr	x0, [x1, #72]
    23ac:	stp	x19, x20, [sp, #16]
    23b0:	mov	x20, x1
    23b4:	cbz	x0, 2448 <lt_dlcaller_set_data+0xb4>
    23b8:	sub	x4, x0, #0x10
    23bc:	mov	x1, #0x0                   	// #0
    23c0:	mov	w2, w1
    23c4:	add	x1, x1, #0x1
    23c8:	lsl	x3, x1, #4
    23cc:	ldr	x3, [x4, x3]
    23d0:	cbnz	x3, 23c0 <lt_dlcaller_set_data+0x2c>
    23d4:	mov	x1, x0
    23d8:	mov	w19, #0x0                   	// #0
    23dc:	cmp	w2, w19
    23e0:	b.ne	2410 <lt_dlcaller_set_data+0x7c>  // b.any
    23e4:	add	w1, w19, #0x2
    23e8:	sbfiz	x1, x1, #4, #32
    23ec:	bl	0 <lt__realloc>
    23f0:	cbz	x0, 2430 <lt_dlcaller_set_data+0x9c>
    23f4:	sbfiz	x1, x19, #4, #32
    23f8:	add	x2, x0, w19, sxtw #4
    23fc:	str	x0, [x20, #72]
    2400:	str	x21, [x0, x1]
    2404:	mov	x0, #0x0                   	// #0
    2408:	str	xzr, [x2, #16]
    240c:	b	2424 <lt_dlcaller_set_data+0x90>
    2410:	mov	x3, x1
    2414:	ldr	x4, [x1], #16
    2418:	cmp	x4, x21
    241c:	b.ne	2440 <lt_dlcaller_set_data+0xac>  // b.any
    2420:	ldr	x0, [x3, #8]
    2424:	ldr	x1, [x20, #72]
    2428:	add	x19, x1, w19, sxtw #4
    242c:	str	x22, [x19, #8]
    2430:	ldp	x19, x20, [sp, #16]
    2434:	ldp	x21, x22, [sp, #32]
    2438:	ldp	x29, x30, [sp], #48
    243c:	ret
    2440:	add	w19, w19, #0x1
    2444:	b	23dc <lt_dlcaller_set_data+0x48>
    2448:	mov	w19, #0x0                   	// #0
    244c:	b	23e4 <lt_dlcaller_set_data+0x50>

0000000000002450 <lt_dlcaller_get_data>:
    2450:	mov	x2, x0
    2454:	ldr	x0, [x1, #72]
    2458:	cbz	x0, 247c <lt_dlcaller_get_data+0x2c>
    245c:	mov	x1, x0
    2460:	ldr	x0, [x1]
    2464:	mov	x3, x1
    2468:	cbz	x0, 247c <lt_dlcaller_get_data+0x2c>
    246c:	add	x1, x1, #0x10
    2470:	cmp	x0, x2
    2474:	b.ne	2460 <lt_dlcaller_get_data+0x10>  // b.any
    2478:	ldr	x0, [x3, #8]
    247c:	ret

0000000000002480 <lt_dlgetinfo>:
    2480:	stp	x29, x30, [sp, #-32]!
    2484:	mov	x29, sp
    2488:	str	x19, [sp, #16]
    248c:	mov	x19, x0
    2490:	cbnz	x0, 24b0 <lt_dlgetinfo+0x30>
    2494:	mov	w0, #0xc                   	// #12
    2498:	bl	0 <lt__error_string>
    249c:	bl	0 <lt__set_last_error>
    24a0:	mov	x0, x19
    24a4:	ldr	x19, [sp, #16]
    24a8:	ldp	x29, x30, [sp], #32
    24ac:	ret
    24b0:	add	x19, x0, #0x10
    24b4:	b	24a0 <lt_dlgetinfo+0x20>

00000000000024b8 <lt_dlhandle_iterate>:
    24b8:	stp	x29, x30, [sp, #-32]!
    24bc:	mov	x29, sp
    24c0:	stp	x19, x20, [sp, #16]
    24c4:	cbnz	x0, 24ec <lt_dlhandle_iterate+0x34>
    24c8:	adrp	x3, 0 <lt__alloc_die_callback>
    24cc:	add	x3, x3, #0x0
    24d0:	adrp	x1, 0 <lt__alloc_die_callback>
    24d4:	adrp	x0, 0 <lt__alloc_die_callback>
    24d8:	add	x3, x3, #0x145
    24dc:	add	x1, x1, #0x0
    24e0:	add	x0, x0, #0x0
    24e4:	mov	w2, #0x96a                 	// #2410
    24e8:	bl	0 <__assert_fail>
    24ec:	mov	x20, x0
    24f0:	cbnz	x1, 2528 <lt_dlhandle_iterate+0x70>
    24f4:	adrp	x0, 0 <lt__alloc_die_callback>
    24f8:	ldr	x19, [x0]
    24fc:	cbz	x19, 2518 <lt_dlhandle_iterate+0x60>
    2500:	ldr	x2, [x20, #8]
    2504:	cbz	x2, 2518 <lt_dlhandle_iterate+0x60>
    2508:	ldr	x1, [x20]
    250c:	mov	x0, x19
    2510:	blr	x2
    2514:	cbnz	w0, 2530 <lt_dlhandle_iterate+0x78>
    2518:	mov	x0, x19
    251c:	ldp	x19, x20, [sp, #16]
    2520:	ldp	x29, x30, [sp], #32
    2524:	ret
    2528:	ldr	x19, [x1]
    252c:	b	24fc <lt_dlhandle_iterate+0x44>
    2530:	ldr	x19, [x19]
    2534:	b	24fc <lt_dlhandle_iterate+0x44>

0000000000002538 <lt_dlhandle_fetch>:
    2538:	stp	x29, x30, [sp, #-48]!
    253c:	mov	x29, sp
    2540:	stp	x19, x20, [sp, #16]
    2544:	mov	x20, x0
    2548:	mov	x19, #0x0                   	// #0
    254c:	str	x21, [sp, #32]
    2550:	mov	x21, x1
    2554:	cbnz	x0, 2590 <lt_dlhandle_fetch+0x58>
    2558:	adrp	x3, 0 <lt__alloc_die_callback>
    255c:	add	x3, x3, #0x0
    2560:	adrp	x1, 0 <lt__alloc_die_callback>
    2564:	adrp	x0, 0 <lt__alloc_die_callback>
    2568:	add	x3, x3, #0x159
    256c:	add	x1, x1, #0x0
    2570:	add	x0, x0, #0x0
    2574:	mov	w2, #0x981                 	// #2433
    2578:	bl	0 <__assert_fail>
    257c:	ldr	x0, [x19, #24]
    2580:	cbz	x0, 2590 <lt_dlhandle_fetch+0x58>
    2584:	mov	x1, x21
    2588:	bl	0 <strcmp>
    258c:	cbz	w0, 25a4 <lt_dlhandle_fetch+0x6c>
    2590:	mov	x1, x19
    2594:	mov	x0, x20
    2598:	bl	24b8 <lt_dlhandle_iterate>
    259c:	mov	x19, x0
    25a0:	cbnz	x0, 257c <lt_dlhandle_fetch+0x44>
    25a4:	mov	x0, x19
    25a8:	ldp	x19, x20, [sp, #16]
    25ac:	ldr	x21, [sp, #32]
    25b0:	ldp	x29, x30, [sp], #48
    25b4:	ret

00000000000025b8 <lt_dlhandle_map>:
    25b8:	stp	x29, x30, [sp, #-48]!
    25bc:	mov	x29, sp
    25c0:	stp	x19, x20, [sp, #16]
    25c4:	mov	x20, x0
    25c8:	adrp	x0, 0 <lt__alloc_die_callback>
    25cc:	stp	x21, x22, [sp, #32]
    25d0:	ldr	x19, [x0]
    25d4:	cbnz	x20, 2644 <lt_dlhandle_map+0x8c>
    25d8:	adrp	x3, 0 <lt__alloc_die_callback>
    25dc:	add	x3, x3, #0x0
    25e0:	adrp	x1, 0 <lt__alloc_die_callback>
    25e4:	adrp	x0, 0 <lt__alloc_die_callback>
    25e8:	add	x3, x3, #0x16b
    25ec:	add	x1, x1, #0x0
    25f0:	add	x0, x0, #0x0
    25f4:	mov	w2, #0x995                 	// #2453
    25f8:	bl	0 <__assert_fail>
    25fc:	ldr	x19, [x19]
    2600:	cbz	x19, 261c <lt_dlhandle_map+0x64>
    2604:	ldr	x2, [x20, #8]
    2608:	cbz	x2, 261c <lt_dlhandle_map+0x64>
    260c:	ldr	x1, [x20]
    2610:	mov	x0, x19
    2614:	blr	x2
    2618:	cbnz	w0, 25fc <lt_dlhandle_map+0x44>
    261c:	mov	x1, x22
    2620:	mov	x0, x19
    2624:	blr	x21
    2628:	cbnz	w0, 2634 <lt_dlhandle_map+0x7c>
    262c:	cbnz	x19, 2604 <lt_dlhandle_map+0x4c>
    2630:	mov	w0, #0x0                   	// #0
    2634:	ldp	x19, x20, [sp, #16]
    2638:	ldp	x21, x22, [sp, #32]
    263c:	ldp	x29, x30, [sp], #48
    2640:	ret
    2644:	mov	x21, x1
    2648:	mov	x22, x2
    264c:	b	262c <lt_dlhandle_map+0x74>

libltdl_libltdl_la-slist.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__slist_delete>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	cbnz	x1, 4c <lt__slist_delete+0x4c>
  10:	adrp	x3, 0 <lt__slist_delete>
  14:	adrp	x1, 0 <lt__slist_delete>
  18:	adrp	x0, 0 <lt__slist_delete>
  1c:	add	x3, x3, #0x0
  20:	add	x1, x1, #0x0
  24:	add	x0, x0, #0x0
  28:	mov	w2, #0x38                  	// #56
  2c:	bl	0 <__assert_fail>
  30:	ldr	x20, [x0]
  34:	blr	x19
  38:	mov	x0, x20
  3c:	cbnz	x0, 30 <lt__slist_delete+0x30>
  40:	ldp	x19, x20, [sp, #16]
  44:	ldp	x29, x30, [sp], #32
  48:	ret
  4c:	mov	x19, x1
  50:	b	3c <lt__slist_delete+0x3c>

0000000000000054 <lt__slist_remove>:
  54:	stp	x29, x30, [sp, #-48]!
  58:	mov	x29, sp
  5c:	stp	x19, x20, [sp, #16]
  60:	stp	x21, x22, [sp, #32]
  64:	cbnz	x1, 8c <lt__slist_remove+0x38>
  68:	adrp	x3, 0 <lt__slist_delete>
  6c:	add	x3, x3, #0x0
  70:	adrp	x1, 0 <lt__slist_delete>
  74:	adrp	x0, 0 <lt__slist_delete>
  78:	add	x3, x3, #0x11
  7c:	add	x1, x1, #0x0
  80:	add	x0, x0, #0x0
  84:	mov	w2, #0x53                  	// #83
  88:	bl	0 <__assert_fail>
  8c:	mov	x20, x0
  90:	cbnz	x0, a8 <lt__slist_remove+0x54>
  94:	mov	x0, #0x0                   	// #0
  98:	ldp	x19, x20, [sp, #16]
  9c:	ldp	x21, x22, [sp, #32]
  a0:	ldp	x29, x30, [sp], #48
  a4:	ret
  a8:	ldr	x0, [x0]
  ac:	cbz	x0, 94 <lt__slist_remove+0x40>
  b0:	mov	x21, x1
  b4:	mov	x22, x2
  b8:	mov	x1, x2
  bc:	blr	x21
  c0:	ldr	x19, [x20]
  c4:	cbz	x0, d8 <lt__slist_remove+0x84>
  c8:	ldr	x1, [x19]
  cc:	str	x1, [x20]
  d0:	b	98 <lt__slist_remove+0x44>
  d4:	mov	x19, x1
  d8:	ldr	x0, [x19]
  dc:	cbz	x0, 94 <lt__slist_remove+0x40>
  e0:	mov	x1, x22
  e4:	blr	x21
  e8:	ldr	x1, [x19]
  ec:	cbz	x0, d4 <lt__slist_remove+0x80>
  f0:	ldr	x1, [x1]
  f4:	str	x1, [x19]
  f8:	b	98 <lt__slist_remove+0x44>

00000000000000fc <lt__slist_find>:
  fc:	stp	x29, x30, [sp, #-48]!
 100:	mov	x29, sp
 104:	stp	x19, x20, [sp, #16]
 108:	str	x21, [sp, #32]
 10c:	cbnz	x1, 160 <lt__slist_find+0x64>
 110:	adrp	x3, 0 <lt__slist_delete>
 114:	add	x3, x3, #0x0
 118:	adrp	x1, 0 <lt__slist_delete>
 11c:	adrp	x0, 0 <lt__slist_delete>
 120:	add	x3, x3, #0x22
 124:	add	x1, x1, #0x0
 128:	add	x0, x0, #0x0
 12c:	mov	w2, #0x7a                  	// #122
 130:	bl	0 <__assert_fail>
 134:	mov	x1, x21
 138:	mov	x0, x19
 13c:	blr	x20
 140:	cbnz	x0, 150 <lt__slist_find+0x54>
 144:	ldr	x19, [x19]
 148:	cbnz	x19, 134 <lt__slist_find+0x38>
 14c:	mov	x0, #0x0                   	// #0
 150:	ldp	x19, x20, [sp, #16]
 154:	ldr	x21, [sp, #32]
 158:	ldp	x29, x30, [sp], #48
 15c:	ret
 160:	mov	x19, x0
 164:	mov	x20, x1
 168:	mov	x21, x2
 16c:	b	148 <lt__slist_find+0x4c>

0000000000000170 <lt__slist_concat>:
 170:	mov	x2, x0
 174:	mov	x0, x1
 178:	cbz	x2, 194 <lt__slist_concat+0x24>
 17c:	mov	x1, x2
 180:	mov	x3, x1
 184:	ldr	x1, [x1]
 188:	cbnz	x1, 180 <lt__slist_concat+0x10>
 18c:	str	x0, [x3]
 190:	mov	x0, x2
 194:	ret

0000000000000198 <lt__slist_cons>:
 198:	mov	x2, x0
 19c:	mov	x0, x1
 1a0:	cbz	x2, 1e0 <lt__slist_cons+0x48>
 1a4:	ldr	x1, [x2]
 1a8:	cbz	x1, 1d8 <lt__slist_cons+0x40>
 1ac:	stp	x29, x30, [sp, #-16]!
 1b0:	adrp	x3, 0 <lt__slist_delete>
 1b4:	add	x3, x3, #0x0
 1b8:	mov	x29, sp
 1bc:	adrp	x1, 0 <lt__slist_delete>
 1c0:	adrp	x0, 0 <lt__slist_delete>
 1c4:	add	x3, x3, #0x31
 1c8:	add	x1, x1, #0x0
 1cc:	add	x0, x0, #0x0
 1d0:	mov	w2, #0xaf                  	// #175
 1d4:	bl	0 <__assert_fail>
 1d8:	str	x0, [x2]
 1dc:	mov	x0, x2
 1e0:	ret

00000000000001e4 <lt__slist_tail>:
 1e4:	cbz	x0, 1ec <lt__slist_tail+0x8>
 1e8:	ldr	x0, [x0]
 1ec:	ret

00000000000001f0 <lt__slist_nth>:
 1f0:	cmp	x0, #0x0
 1f4:	ccmp	x1, #0x1, #0x0, ne  // ne = any
 1f8:	b.hi	200 <lt__slist_nth+0x10>  // b.pmore
 1fc:	ret
 200:	sub	x1, x1, #0x1
 204:	ldr	x0, [x0]
 208:	b	1f0 <lt__slist_nth>

000000000000020c <lt__slist_length>:
 20c:	mov	x1, x0
 210:	mov	x0, #0x0                   	// #0
 214:	cbnz	x1, 21c <lt__slist_length+0x10>
 218:	ret
 21c:	add	x0, x0, #0x1
 220:	ldr	x1, [x1]
 224:	b	214 <lt__slist_length+0x8>

0000000000000228 <lt__slist_reverse>:
 228:	mov	x1, x0
 22c:	mov	x0, #0x0                   	// #0
 230:	cbnz	x1, 238 <lt__slist_reverse+0x10>
 234:	ret
 238:	ldr	x2, [x1]
 23c:	str	x0, [x1]
 240:	mov	x0, x1
 244:	mov	x1, x2
 248:	b	230 <lt__slist_reverse+0x8>

000000000000024c <lt__slist_foreach>:
 24c:	stp	x29, x30, [sp, #-48]!
 250:	mov	x29, sp
 254:	stp	x19, x20, [sp, #16]
 258:	str	x21, [sp, #32]
 25c:	cbnz	x1, 2ac <lt__slist_foreach+0x60>
 260:	adrp	x3, 0 <lt__slist_delete>
 264:	add	x3, x3, #0x0
 268:	adrp	x1, 0 <lt__slist_delete>
 26c:	adrp	x0, 0 <lt__slist_delete>
 270:	add	x3, x3, #0x40
 274:	add	x1, x1, #0x0
 278:	add	x0, x0, #0x0
 27c:	mov	w2, #0xf6                  	// #246
 280:	bl	0 <__assert_fail>
 284:	mov	x1, x20
 288:	ldr	x21, [x0]
 28c:	blr	x19
 290:	cbnz	x0, 29c <lt__slist_foreach+0x50>
 294:	mov	x0, x21
 298:	cbnz	x0, 284 <lt__slist_foreach+0x38>
 29c:	ldp	x19, x20, [sp, #16]
 2a0:	ldr	x21, [sp, #32]
 2a4:	ldp	x29, x30, [sp], #48
 2a8:	ret
 2ac:	mov	x19, x1
 2b0:	mov	x20, x2
 2b4:	b	298 <lt__slist_foreach+0x4c>

00000000000002b8 <lt__slist_sort>:
 2b8:	cbz	x0, 390 <lt__slist_sort+0xd8>
 2bc:	stp	x29, x30, [sp, #-80]!
 2c0:	mov	x29, sp
 2c4:	stp	x21, x22, [sp, #32]
 2c8:	mov	x22, x1
 2cc:	ldr	x1, [x0]
 2d0:	stp	x19, x20, [sp, #16]
 2d4:	str	x23, [sp, #48]
 2d8:	cbz	x1, 344 <lt__slist_sort+0x8c>
 2dc:	mov	x23, x2
 2e0:	mov	x19, x0
 2e4:	ldr	x1, [x1]
 2e8:	mov	x2, x19
 2ec:	ldr	x19, [x19]
 2f0:	cbz	x1, 2fc <lt__slist_sort+0x44>
 2f4:	ldr	x1, [x1]
 2f8:	cbnz	x1, 2e4 <lt__slist_sort+0x2c>
 2fc:	str	xzr, [x2]
 300:	mov	x1, x22
 304:	mov	x2, x23
 308:	add	x21, sp, #0x40
 30c:	bl	2b8 <lt__slist_sort>
 310:	mov	x20, x0
 314:	mov	x2, x23
 318:	mov	x0, x19
 31c:	mov	x1, x22
 320:	bl	2b8 <lt__slist_sort>
 324:	mov	x19, x0
 328:	cmp	x20, #0x0
 32c:	ccmp	x19, #0x0, #0x4, ne  // ne = any
 330:	b.ne	358 <lt__slist_sort+0xa0>  // b.any
 334:	cmp	x20, #0x0
 338:	csel	x19, x19, x20, eq  // eq = none
 33c:	str	x19, [x21]
 340:	ldr	x0, [sp, #64]
 344:	ldp	x19, x20, [sp, #16]
 348:	ldp	x21, x22, [sp, #32]
 34c:	ldr	x23, [sp, #48]
 350:	ldp	x29, x30, [sp], #80
 354:	ret
 358:	mov	x2, x23
 35c:	mov	x1, x19
 360:	mov	x0, x20
 364:	blr	x22
 368:	cmp	w0, #0x0
 36c:	b.gt	380 <lt__slist_sort+0xc8>
 370:	str	x20, [x21]
 374:	mov	x21, x20
 378:	ldr	x20, [x20]
 37c:	b	328 <lt__slist_sort+0x70>
 380:	str	x19, [x21]
 384:	mov	x21, x19
 388:	ldr	x19, [x19]
 38c:	b	328 <lt__slist_sort+0x70>
 390:	ret

0000000000000394 <lt__slist_box>:
 394:	stp	x29, x30, [sp, #-32]!
 398:	mov	x29, sp
 39c:	str	x19, [sp, #16]
 3a0:	mov	x19, x0
 3a4:	mov	x0, #0x10                  	// #16
 3a8:	bl	0 <malloc>
 3ac:	cbz	x0, 3b4 <lt__slist_box+0x20>
 3b0:	stp	xzr, x19, [x0]
 3b4:	ldr	x19, [sp, #16]
 3b8:	ldp	x29, x30, [sp], #32
 3bc:	ret

00000000000003c0 <lt__slist_unbox>:
 3c0:	stp	x29, x30, [sp, #-32]!
 3c4:	mov	x29, sp
 3c8:	str	x19, [sp, #16]
 3cc:	mov	x19, x0
 3d0:	cbz	x0, 3dc <lt__slist_unbox+0x1c>
 3d4:	ldr	x19, [x0, #8]
 3d8:	bl	0 <free>
 3dc:	mov	x0, x19
 3e0:	ldr	x19, [sp, #16]
 3e4:	ldp	x29, x30, [sp], #32
 3e8:	ret

lt__strl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_strlcat>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	str	x21, [sp, #32]
  10:	cbnz	x0, 34 <lt_strlcat+0x34>
  14:	adrp	x3, 0 <lt_strlcat>
  18:	adrp	x1, 0 <lt_strlcat>
  1c:	adrp	x0, 0 <lt_strlcat>
  20:	add	x3, x3, #0x0
  24:	add	x1, x1, #0x0
  28:	add	x0, x0, #0x0
  2c:	mov	w2, #0x39                  	// #57
  30:	bl	0 <__assert_fail>
  34:	mov	x19, x1
  38:	cbnz	x1, 5c <lt_strlcat+0x5c>
  3c:	adrp	x3, 0 <lt_strlcat>
  40:	adrp	x1, 0 <lt_strlcat>
  44:	adrp	x0, 0 <lt_strlcat>
  48:	add	x3, x3, #0x0
  4c:	add	x1, x1, #0x0
  50:	add	x0, x0, #0x0
  54:	mov	w2, #0x3a                  	// #58
  58:	b	30 <lt_strlcat+0x30>
  5c:	mov	x20, x2
  60:	cbnz	x2, 84 <lt_strlcat+0x84>
  64:	adrp	x3, 0 <lt_strlcat>
  68:	adrp	x1, 0 <lt_strlcat>
  6c:	adrp	x0, 0 <lt_strlcat>
  70:	add	x3, x3, #0x0
  74:	add	x1, x1, #0x0
  78:	add	x0, x0, #0x0
  7c:	mov	w2, #0x3b                  	// #59
  80:	b	30 <lt_strlcat+0x30>
  84:	sub	x20, x20, #0x1
  88:	mov	x21, x0
  8c:	bl	0 <strlen>
  90:	mov	x1, x19
  94:	ldrb	w2, [x1], #1
  98:	cbz	w2, a4 <lt_strlcat+0xa4>
  9c:	cmp	x20, x0
  a0:	b.hi	c4 <lt_strlcat+0xc4>  // b.pmore
  a4:	sub	x19, x19, x0
  a8:	strb	wzr, [x21, x0]
  ac:	ldrb	w1, [x19, x0]
  b0:	cbnz	w1, d4 <lt_strlcat+0xd4>
  b4:	ldp	x19, x20, [sp, #16]
  b8:	ldr	x21, [sp, #32]
  bc:	ldp	x29, x30, [sp], #48
  c0:	ret
  c4:	mov	x19, x1
  c8:	strb	w2, [x21, x0]
  cc:	add	x0, x0, #0x1
  d0:	b	90 <lt_strlcat+0x90>
  d4:	add	x0, x0, #0x1
  d8:	b	ac <lt_strlcat+0xac>

00000000000000dc <lt_strlcpy>:
  dc:	stp	x29, x30, [sp, #-16]!
  e0:	mov	x29, sp
  e4:	cbnz	x0, 10c <lt_strlcpy+0x30>
  e8:	adrp	x3, 0 <lt_strlcat>
  ec:	add	x3, x3, #0x0
  f0:	adrp	x1, 0 <lt_strlcat>
  f4:	adrp	x0, 0 <lt_strlcat>
  f8:	add	x3, x3, #0xb
  fc:	add	x1, x1, #0x0
 100:	add	x0, x0, #0x0
 104:	mov	w2, #0x69                  	// #105
 108:	bl	0 <__assert_fail>
 10c:	cbnz	x1, 134 <lt_strlcpy+0x58>
 110:	adrp	x3, 0 <lt_strlcat>
 114:	add	x3, x3, #0x0
 118:	adrp	x1, 0 <lt_strlcat>
 11c:	adrp	x0, 0 <lt_strlcat>
 120:	add	x3, x3, #0xb
 124:	add	x1, x1, #0x0
 128:	add	x0, x0, #0x0
 12c:	mov	w2, #0x6a                  	// #106
 130:	b	108 <lt_strlcpy+0x2c>
 134:	mov	x3, x0
 138:	mov	x0, #0x0                   	// #0
 13c:	cbz	x2, 170 <lt_strlcpy+0x94>
 140:	sub	x2, x2, #0x1
 144:	ldrb	w5, [x1, x0]
 148:	add	x4, x1, x0
 14c:	cbz	w5, 158 <lt_strlcpy+0x7c>
 150:	cmp	x2, x0
 154:	b.hi	194 <lt_strlcpy+0xb8>  // b.pmore
 158:	sub	x1, x4, x0
 15c:	strb	wzr, [x3, x0]
 160:	ldrb	w2, [x1, x0]
 164:	cbnz	w2, 1a0 <lt_strlcpy+0xc4>
 168:	ldp	x29, x30, [sp], #16
 16c:	ret
 170:	adrp	x3, 0 <lt_strlcat>
 174:	add	x3, x3, #0x0
 178:	adrp	x1, 0 <lt_strlcat>
 17c:	adrp	x0, 0 <lt_strlcat>
 180:	add	x3, x3, #0xb
 184:	add	x1, x1, #0x0
 188:	add	x0, x0, #0x0
 18c:	mov	w2, #0x6b                  	// #107
 190:	b	108 <lt_strlcpy+0x2c>
 194:	strb	w5, [x3, x0]
 198:	add	x0, x0, #0x1
 19c:	b	144 <lt_strlcpy+0x68>
 1a0:	add	x0, x0, #0x1
 1a4:	b	160 <lt_strlcpy+0x84>

libltdlS.o:     file format elf64-littleaarch64


dlopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <vl_exit>:
   0:	adrp	x0, 0 <vl_exit>
   4:	str	xzr, [x0]
   8:	mov	w0, #0x0                   	// #0
   c:	ret

0000000000000010 <vm_open>:
  10:	stp	x29, x30, [sp, #-32]!
  14:	mov	x0, x1
  18:	mov	x29, sp
  1c:	str	x19, [sp, #16]
  20:	cbz	x2, 58 <vm_open+0x48>
  24:	ldrb	w1, [x2]
  28:	mov	w2, #0x101                 	// #257
  2c:	tst	x1, #0x4
  30:	csinc	w1, w2, wzr, ne  // ne = any
  34:	bl	0 <dlopen>
  38:	mov	x19, x0
  3c:	cbnz	x0, 48 <vm_open+0x38>
  40:	bl	0 <dlerror>
  44:	bl	0 <lt__set_last_error>
  48:	mov	x0, x19
  4c:	ldr	x19, [sp, #16]
  50:	ldp	x29, x30, [sp], #32
  54:	ret
  58:	mov	w1, #0x1                   	// #1
  5c:	b	34 <vm_open+0x24>

0000000000000060 <vm_close>:
  60:	stp	x29, x30, [sp, #-16]!
  64:	mov	x0, x1
  68:	mov	x29, sp
  6c:	bl	0 <dlclose>
  70:	cbz	w0, 80 <vm_close+0x20>
  74:	bl	0 <dlerror>
  78:	bl	0 <lt__set_last_error>
  7c:	mov	w0, #0x1                   	// #1
  80:	ldp	x29, x30, [sp], #16
  84:	ret

0000000000000088 <vm_sym>:
  88:	stp	x29, x30, [sp, #-32]!
  8c:	mov	x0, x1
  90:	mov	x1, x2
  94:	mov	x29, sp
  98:	str	x19, [sp, #16]
  9c:	bl	0 <dlsym>
  a0:	mov	x19, x0
  a4:	cbnz	x0, b0 <vm_sym+0x28>
  a8:	bl	0 <dlerror>
  ac:	bl	0 <lt__set_last_error>
  b0:	mov	x0, x19
  b4:	ldr	x19, [sp, #16]
  b8:	ldp	x29, x30, [sp], #32
  bc:	ret

00000000000000c0 <dlopen_LTX_get_vtable>:
  c0:	stp	x29, x30, [sp, #-32]!
  c4:	mov	x29, sp
  c8:	stp	x19, x20, [sp, #16]
  cc:	adrp	x19, 0 <vl_exit>
  d0:	mov	x20, x0
  d4:	ldr	x0, [x19]
  d8:	cbnz	x0, e8 <dlopen_LTX_get_vtable+0x28>
  dc:	mov	x0, #0x48                  	// #72
  e0:	bl	0 <lt__zalloc>
  e4:	str	x0, [x19]
  e8:	ldr	x0, [x19]
  ec:	cbz	x0, 13c <dlopen_LTX_get_vtable+0x7c>
  f0:	ldr	x1, [x0]
  f4:	cbnz	x1, 148 <dlopen_LTX_get_vtable+0x88>
  f8:	adrp	x1, 0 <vl_exit>
  fc:	add	x1, x1, #0x0
 100:	str	x1, [x0]
 104:	adrp	x1, 0 <vl_exit>
 108:	add	x1, x1, #0x0
 10c:	str	x1, [x0, #16]
 110:	adrp	x1, 0 <vl_exit>
 114:	add	x1, x1, #0x0
 118:	str	x1, [x0, #24]
 11c:	adrp	x1, 0 <vl_exit>
 120:	add	x1, x1, #0x0
 124:	str	x1, [x0, #32]
 128:	adrp	x1, 0 <vl_exit>
 12c:	add	x1, x1, #0x0
 130:	str	x1, [x0, #48]
 134:	str	x20, [x0, #56]
 138:	str	wzr, [x0, #64]
 13c:	ldp	x19, x20, [sp, #16]
 140:	ldp	x29, x30, [sp], #32
 144:	ret
 148:	ldr	x1, [x0, #56]
 14c:	cmp	x1, x20
 150:	b.eq	13c <dlopen_LTX_get_vtable+0x7c>  // b.none
 154:	mov	w0, #0x3                   	// #3
 158:	bl	0 <lt__error_string>
 15c:	bl	0 <lt__set_last_error>
 160:	mov	x0, #0x0                   	// #0
 164:	b	13c <dlopen_LTX_get_vtable+0x7c>
