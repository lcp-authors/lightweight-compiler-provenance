In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libubsan.a_gcc_-O3:

ubsan_diag.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>:
       0:	cmp	w0, #0x19
       4:	b.ls	2c <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE+0x2c>  // b.plast
       8:	str	x30, [sp, #-16]!
       c:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      10:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      14:	add	x2, x2, #0x0
      18:	add	x0, x0, #0x0
      1c:	mov	x4, #0x0                   	// #0
      20:	mov	x3, #0x0                   	// #0
      24:	mov	w1, #0x39                  	// #57
      28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
      2c:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      30:	add	x1, x1, #0x0
      34:	ldrb	w0, [x1, w0, uxtw]
      38:	adr	x1, 44 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE+0x44>
      3c:	add	x0, x1, w0, sxtb #2
      40:	br	x0
      44:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      48:	add	x0, x0, #0x0
      4c:	ret
      50:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      54:	add	x0, x0, #0x0
      58:	ret
      5c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      60:	add	x0, x0, #0x0
      64:	ret
      68:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      6c:	add	x0, x0, #0x0
      70:	ret
      74:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      78:	add	x0, x0, #0x0
      7c:	ret
      80:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      84:	add	x0, x0, #0x0
      88:	ret
      8c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      90:	add	x0, x0, #0x0
      94:	ret
      98:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      9c:	add	x0, x0, #0x0
      a0:	ret
      a4:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      a8:	add	x0, x0, #0x0
      ac:	ret
      b0:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      b4:	add	x0, x0, #0x0
      b8:	ret
      bc:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      c0:	add	x0, x0, #0x0
      c4:	ret
      c8:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      cc:	add	x0, x0, #0x0
      d0:	ret
      d4:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      d8:	add	x0, x0, #0x0
      dc:	ret
      e0:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      e4:	add	x0, x0, #0x0
      e8:	ret
      ec:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      f0:	add	x0, x0, #0x0
      f4:	ret
      f8:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
      fc:	add	x0, x0, #0x0
     100:	ret
     104:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     108:	add	x0, x0, #0x0
     10c:	ret
     110:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     114:	add	x0, x0, #0x0
     118:	ret
     11c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     120:	add	x0, x0, #0x0
     124:	ret
     128:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     12c:	add	x0, x0, #0x0
     130:	ret
     134:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     138:	add	x0, x0, #0x0
     13c:	ret
     140:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     144:	add	x0, x0, #0x0
     148:	ret
     14c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     150:	add	x0, x0, #0x0
     154:	ret
     158:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     15c:	add	x0, x0, #0x0
     160:	ret
     164:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     168:	add	x0, x0, #0x0
     16c:	ret
     170:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     174:	add	x0, x0, #0x0
     178:	ret
     17c:	nop

0000000000000180 <_ZL10upperBoundmPN7__ubsan5RangeEj>:
     180:	cbz	w2, 26c <_ZL10upperBoundmPN7__ubsan5RangeEj+0xec>
     184:	sub	w2, w2, #0x1
     188:	add	x3, x1, #0x58
     18c:	mov	w5, #0x58                  	// #88
     190:	mov	x4, #0x0                   	// #0
     194:	str	x30, [sp, #-16]!
     198:	umaddl	x2, w2, w5, x3
     19c:	b	1d4 <_ZL10upperBoundmPN7__ubsan5RangeEj+0x54>
     1a0:	ldr	w3, [x4]
     1a4:	ldr	x5, [x4, #24]
     1a8:	cmp	w3, #0x2
     1ac:	b.ne	22c <_ZL10upperBoundmPN7__ubsan5RangeEj+0xac>  // b.any
     1b0:	ldr	w3, [x1]
     1b4:	ldr	x6, [x1, #24]
     1b8:	cmp	w3, #0x2
     1bc:	b.ne	24c <_ZL10upperBoundmPN7__ubsan5RangeEj+0xcc>  // b.any
     1c0:	cmp	x5, x6
     1c4:	csel	x4, x4, x1, ls  // ls = plast
     1c8:	add	x1, x1, #0x58
     1cc:	cmp	x1, x2
     1d0:	b.eq	200 <_ZL10upperBoundmPN7__ubsan5RangeEj+0x80>  // b.none
     1d4:	ldr	w3, [x1, #40]
     1d8:	ldr	x5, [x1, #64]
     1dc:	cmp	w3, #0x2
     1e0:	b.ne	20c <_ZL10upperBoundmPN7__ubsan5RangeEj+0x8c>  // b.any
     1e4:	cmp	x5, x0
     1e8:	b.ls	1c8 <_ZL10upperBoundmPN7__ubsan5RangeEj+0x48>  // b.plast
     1ec:	cbnz	x4, 1a0 <_ZL10upperBoundmPN7__ubsan5RangeEj+0x20>
     1f0:	mov	x4, x1
     1f4:	add	x1, x1, #0x58
     1f8:	cmp	x1, x2
     1fc:	b.ne	1d4 <_ZL10upperBoundmPN7__ubsan5RangeEj+0x54>  // b.any
     200:	mov	x0, x4
     204:	ldr	x30, [sp], #16
     208:	ret
     20c:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     210:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     214:	add	x2, x2, #0x0
     218:	add	x0, x0, #0x0
     21c:	mov	x4, #0x0                   	// #0
     220:	mov	x3, #0x0                   	// #0
     224:	mov	w1, #0x55                  	// #85
     228:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     22c:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     230:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     234:	add	x2, x2, #0x0
     238:	add	x0, x0, #0x0
     23c:	mov	x4, #0x0                   	// #0
     240:	mov	x3, #0x0                   	// #0
     244:	mov	w1, #0x55                  	// #85
     248:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     24c:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     250:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     254:	add	x2, x2, #0x0
     258:	add	x0, x0, #0x0
     25c:	mov	x4, #0x0                   	// #0
     260:	mov	x3, #0x0                   	// #0
     264:	mov	w1, #0x55                  	// #85
     268:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     26c:	mov	x4, #0x0                   	// #0
     270:	mov	x0, x4
     274:	ret

0000000000000278 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE>:
     278:	stp	x19, x20, [sp, #-112]!
     27c:	mov	x20, x2
     280:	str	x30, [sp, #64]
     284:	ldrb	w2, [x1]
     288:	cbz	w2, 334 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xbc>
     28c:	mov	x19, x1
     290:	stp	x21, x22, [sp, #16]
     294:	adrp	x22, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     298:	mov	x21, x0
     29c:	add	x22, x22, #0x0
     2a0:	stp	x23, x24, [sp, #32]
     2a4:	adrp	x23, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     2a8:	add	x24, sp, #0x50
     2ac:	add	x23, x23, #0x0
     2b0:	stp	x25, x26, [sp, #48]
     2b4:	nop
     2b8:	cmp	w2, #0x25
     2bc:	add	x25, x19, #0x1
     2c0:	b.ne	384 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x10c>  // b.any
     2c4:	ldrb	w3, [x19, #1]
     2c8:	add	x19, x19, #0x2
     2cc:	ubfiz	x3, x3, #5, #8
     2d0:	sub	x3, x3, #0x600
     2d4:	add	x26, x20, x3
     2d8:	ldr	w3, [x20, x3]
     2dc:	cmp	w3, #0x3
     2e0:	b.eq	3c8 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x150>  // b.none
     2e4:	b.hi	35c <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xe4>  // b.pmore
     2e8:	cmp	w3, #0x1
     2ec:	b.eq	3a4 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x12c>  // b.none
     2f0:	cmp	w3, #0x2
     2f4:	b.ne	340 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xc8>  // b.any
     2f8:	ldp	x2, x0, [x26, #16]
     2fc:	cbz	x0, 418 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x1a0>
     300:	mov	w5, w2
     304:	lsr	x4, x2, #32
     308:	mov	w3, w0
     30c:	lsr	x2, x0, #32
     310:	mov	x1, x22
     314:	mov	x0, x21
     318:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     31c:	nop
     320:	ldrb	w2, [x25, #1]
     324:	cbnz	w2, 2b8 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x40>
     328:	ldp	x21, x22, [sp, #16]
     32c:	ldp	x23, x24, [sp, #32]
     330:	ldp	x25, x26, [sp, #48]
     334:	ldr	x30, [sp, #64]
     338:	ldp	x19, x20, [sp], #112
     33c:	ret
     340:	cbnz	w3, 320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     344:	ldr	x2, [x26, #16]
     348:	mov	x0, x21
     34c:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     350:	add	x1, x1, #0x0
     354:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     358:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     35c:	cmp	w3, #0x4
     360:	b.eq	3e8 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x170>  // b.none
     364:	cmp	w3, #0x5
     368:	b.ne	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>  // b.any
     36c:	ldr	x2, [x26, #16]
     370:	mov	x0, x21
     374:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     378:	add	x1, x1, #0x0
     37c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     380:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     384:	mov	x0, x21
     388:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     38c:	add	x1, x1, #0x0
     390:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     394:	mov	x0, x25
     398:	mov	x25, x19
     39c:	mov	x19, x0
     3a0:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     3a4:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
     3a8:	ldr	x1, [x26, #16]
     3ac:	bl	0 <_ZN11__sanitizer10Symbolizer8DemangleEPKc>
     3b0:	mov	x2, x0
     3b4:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     3b8:	mov	x0, x21
     3bc:	add	x1, x1, #0x0
     3c0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     3c4:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     3c8:	ldp	x2, x0, [x26, #16]
     3cc:	cmp	x2, #0x0
     3d0:	cinc	x1, x0, lt  // lt = tstop
     3d4:	cbnz	x1, 300 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0x88>
     3d8:	mov	x1, x23
     3dc:	mov	x0, x21
     3e0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     3e4:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     3e8:	ldr	q0, [x26, #16]
     3ec:	mov	x0, x24
     3f0:	mov	x1, #0x20                  	// #32
     3f4:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     3f8:	add	x2, x2, #0x0
     3fc:	bl	0 <snprintf>
     400:	mov	x2, x24
     404:	mov	x0, x21
     408:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     40c:	add	x1, x1, #0x0
     410:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     414:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     418:	mov	x0, x21
     41c:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     420:	add	x1, x1, #0x0
     424:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     428:	b	320 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE+0xa8>
     42c:	nop

0000000000000430 <_ZL20MaybePrintStackTracemm>:
     430:	adrp	x4, 0 <_ZN7__ubsan11ubsan_flagsE>
     434:	sub	sp, sp, #0x860
     438:	ldr	x4, [x4]
     43c:	stp	x19, x20, [sp]
     440:	mov	x19, x0
     444:	ldrb	w0, [x4, #1]
     448:	str	x30, [sp, #32]
     44c:	cbnz	w0, 460 <_ZL20MaybePrintStackTracemm+0x30>
     450:	ldp	x19, x20, [sp]
     454:	ldr	x30, [sp, #32]
     458:	add	sp, sp, #0x860
     45c:	ret
     460:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     464:	stp	x21, x22, [sp, #16]
     468:	add	x21, sp, #0x48
     46c:	ldr	x0, [x0]
     470:	mov	x20, x1
     474:	add	x1, x21, #0x10
     478:	stp	xzr, xzr, [sp, #56]
     47c:	mov	x6, #0x0                   	// #0
     480:	ldrb	w22, [x0, #33]
     484:	mov	x5, #0x0                   	// #0
     488:	str	x1, [sp, #72]
     48c:	str	xzr, [sp, #80]
     490:	str	xzr, [sp, #2136]
     494:	cbnz	w22, 4d0 <_ZL20MaybePrintStackTracemm+0xa0>
     498:	mov	w7, w22
     49c:	mov	x3, x20
     4a0:	mov	x2, x19
     4a4:	mov	x4, #0x0                   	// #0
     4a8:	mov	w1, #0x100                 	// #256
     4ac:	mov	x0, x21
     4b0:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     4b4:	mov	x0, x21
     4b8:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
     4bc:	ldp	x19, x20, [sp]
     4c0:	ldp	x21, x22, [sp, #16]
     4c4:	ldr	x30, [sp, #32]
     4c8:	add	sp, sp, #0x860
     4cc:	ret
     4d0:	add	x2, sp, #0x40
     4d4:	add	x1, sp, #0x38
     4d8:	mov	w0, #0x0                   	// #0
     4dc:	bl	0 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>
     4e0:	ldp	x5, x6, [sp, #56]
     4e4:	b	498 <_ZL20MaybePrintStackTracemm+0x68>

00000000000004e8 <_ZN7__ubsan13GetStackTraceEPN11__sanitizer18BufferedStackTraceEmmmPvb>:
     4e8:	stp	x19, x20, [sp, #-80]!
     4ec:	mov	x19, x0
     4f0:	mov	x20, x1
     4f4:	stp	x21, x24, [sp, #16]
     4f8:	mov	x21, x2
     4fc:	ands	w24, w5, #0xff
     500:	str	x30, [sp, #32]
     504:	stp	xzr, xzr, [sp, #64]
     508:	b.ne	538 <_ZN7__ubsan13GetStackTraceEPN11__sanitizer18BufferedStackTraceEmmmPvb+0x50>  // b.any
     50c:	mov	x6, #0x0                   	// #0
     510:	mov	x5, #0x0                   	// #0
     514:	mov	w7, w24
     518:	mov	x2, x21
     51c:	mov	w1, w20
     520:	mov	x0, x19
     524:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     528:	ldp	x21, x24, [sp, #16]
     52c:	ldr	x30, [sp, #32]
     530:	ldp	x19, x20, [sp], #80
     534:	ret
     538:	add	x2, sp, #0x48
     53c:	add	x1, sp, #0x40
     540:	mov	w0, #0x0                   	// #0
     544:	stp	x3, x4, [sp, #48]
     548:	bl	0 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>
     54c:	ldp	x3, x4, [sp, #48]
     550:	ldp	x5, x6, [sp, #64]
     554:	b	514 <_ZN7__ubsan13GetStackTraceEPN11__sanitizer18BufferedStackTraceEmmmPvb+0x2c>

0000000000000558 <_ZN7__ubsan21getSymbolizedLocationEm>:
     558:	stp	x19, x30, [sp, #-16]!
     55c:	mov	x19, x0
     560:	bl	0 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv>
     564:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
     568:	mov	x1, x19
     56c:	ldp	x19, x30, [sp], #16
     570:	b	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
     574:	nop

0000000000000578 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>:
     578:	ldr	w3, [x0, #320]
     57c:	cmp	w3, #0x8
     580:	b.eq	5a8 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE+0x30>  // b.none
     584:	ubfiz	x4, x3, #5, #32
     588:	add	w3, w3, #0x1
     58c:	add	x4, x4, #0x40
     590:	str	w3, [x0, #320]
     594:	add	x3, x0, x4
     598:	add	x1, x1, #0x4
     59c:	str	wzr, [x0, x4]
     5a0:	str	x1, [x3, #16]
     5a4:	ret
     5a8:	str	x30, [sp, #-16]!
     5ac:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     5b0:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     5b4:	add	x2, x2, #0x0
     5b8:	add	x0, x0, #0x0
     5bc:	mov	x4, #0x0                   	// #0
     5c0:	mov	x3, #0x0                   	// #0
     5c4:	mov	w1, #0xbf                  	// #191
     5c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     5cc:	nop

00000000000005d0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>:
     5d0:	stp	x19, x30, [sp, #-16]!
     5d4:	mov	x19, x0
     5d8:	ldr	x0, [x1]
     5dc:	ldrh	w2, [x0]
     5e0:	cbz	w2, 62c <_ZN7__ubsan4DiaglsERKNS_5ValueE+0x5c>
     5e4:	cmp	w2, #0x1
     5e8:	b.ne	6b4 <_ZN7__ubsan4DiaglsERKNS_5ValueE+0xe4>  // b.any
     5ec:	mov	x0, x1
     5f0:	bl	0 <_ZNK7__ubsan5Value13getFloatValueEv>
     5f4:	ldr	w0, [x19, #320]
     5f8:	cmp	w0, #0x8
     5fc:	b.eq	6f0 <_ZN7__ubsan4DiaglsERKNS_5ValueE+0x120>  // b.none
     600:	ubfiz	x1, x0, #5, #32
     604:	add	w0, w0, #0x1
     608:	add	x1, x1, #0x40
     60c:	str	w0, [x19, #320]
     610:	add	x0, x19, x1
     614:	mov	w2, #0x4                   	// #4
     618:	str	w2, [x19, x1]
     61c:	str	q0, [x0, #16]
     620:	mov	x0, x19
     624:	ldp	x19, x30, [sp], #16
     628:	ret
     62c:	ldrh	w0, [x0, #2]
     630:	tbz	w0, #0, 674 <_ZN7__ubsan4DiaglsERKNS_5ValueE+0xa4>
     634:	mov	x0, x1
     638:	bl	0 <_ZNK7__ubsan5Value12getSIntValueEv>
     63c:	ldr	w2, [x19, #320]
     640:	cmp	w2, #0x8
     644:	b.eq	6f0 <_ZN7__ubsan4DiaglsERKNS_5ValueE+0x120>  // b.none
     648:	ubfiz	x3, x2, #5, #32
     64c:	add	w2, w2, #0x1
     650:	add	x3, x3, #0x40
     654:	str	w2, [x19, #320]
     658:	add	x2, x19, x3
     65c:	mov	w4, #0x3                   	// #3
     660:	str	w4, [x19, x3]
     664:	stp	x0, x1, [x2, #16]
     668:	mov	x0, x19
     66c:	ldp	x19, x30, [sp], #16
     670:	ret
     674:	mov	x0, x1
     678:	bl	0 <_ZNK7__ubsan5Value12getUIntValueEv>
     67c:	ldr	w2, [x19, #320]
     680:	cmp	w2, #0x8
     684:	b.eq	6f0 <_ZN7__ubsan4DiaglsERKNS_5ValueE+0x120>  // b.none
     688:	ubfiz	x3, x2, #5, #32
     68c:	add	w2, w2, #0x1
     690:	add	x3, x3, #0x40
     694:	str	w2, [x19, #320]
     698:	add	x2, x19, x3
     69c:	mov	w4, #0x2                   	// #2
     6a0:	str	w4, [x19, x3]
     6a4:	stp	x0, x1, [x2, #16]
     6a8:	mov	x0, x19
     6ac:	ldp	x19, x30, [sp], #16
     6b0:	ret
     6b4:	ldr	w0, [x19, #320]
     6b8:	cmp	w0, #0x8
     6bc:	b.eq	6f0 <_ZN7__ubsan4DiaglsERKNS_5ValueE+0x120>  // b.none
     6c0:	ubfiz	x1, x0, #5, #32
     6c4:	add	w0, w0, #0x1
     6c8:	add	x1, x1, #0x40
     6cc:	str	w0, [x19, #320]
     6d0:	add	x2, x19, x1
     6d4:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     6d8:	add	x0, x0, #0x0
     6dc:	str	wzr, [x19, x1]
     6e0:	str	x0, [x2, #16]
     6e4:	mov	x0, x19
     6e8:	ldp	x19, x30, [sp], #16
     6ec:	ret
     6f0:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     6f4:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     6f8:	add	x2, x2, #0x0
     6fc:	add	x0, x0, #0x0
     700:	mov	x4, #0x0                   	// #0
     704:	mov	x3, #0x0                   	// #0
     708:	mov	w1, #0xbf                  	// #191
     70c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000710 <_ZN7__ubsan4DiagD1Ev>:
     710:	stp	x19, x20, [sp, #-208]!
     714:	stp	x27, x28, [sp, #64]
     718:	adrp	x27, 0 <_ZN11__sanitizer14PageSizeCachedE>
     71c:	stp	x21, x22, [sp, #16]
     720:	stp	x23, x24, [sp, #32]
     724:	mov	x24, x0
     728:	stp	x25, x26, [sp, #48]
     72c:	str	x30, [sp, #80]
     730:	bl	0 <_ZN11__sanitizer21ScopedErrorReportLock11CheckLockedEv>
     734:	bl	0 <_ZN11__sanitizer15ColorizeReportsEv>
     738:	and	w26, w0, #0xff
     73c:	ldr	x19, [x27]
     740:	str	xzr, [sp, #128]
     744:	stp	xzr, xzr, [sp, #136]
     748:	ldr	x0, [x19]
     74c:	cbz	x0, 980 <_ZN7__ubsan4DiagD1Ev+0x270>
     750:	sub	x25, x0, #0x1
     754:	ands	x25, x25, x0
     758:	b.ne	c90 <_ZN7__ubsan4DiagD1Ev+0x580>  // b.any
     75c:	add	x19, x0, #0x3ff
     760:	neg	x0, x0
     764:	and	x19, x19, x0
     768:	mov	w2, #0x0                   	// #0
     76c:	mov	x0, x19
     770:	adrp	x28, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     774:	add	x1, x28, #0x0
     778:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     77c:	ldr	x1, [sp, #128]
     780:	mov	x20, x0
     784:	ldr	x2, [sp, #144]
     788:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     78c:	ldp	x0, x1, [sp, #128]
     790:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     794:	stp	x20, x19, [sp, #128]
     798:	ldr	x2, [sp, #144]
     79c:	cmp	x2, #0x3ff
     7a0:	b.hi	7c4 <_ZN7__ubsan4DiagD1Ev+0xb4>  // b.pmore
     7a4:	cmp	x19, #0x3ff
     7a8:	b.ls	c10 <_ZN7__ubsan4DiagD1Ev+0x500>  // b.plast
     7ac:	mov	x3, #0x400                 	// #1024
     7b0:	add	x0, x20, x2
     7b4:	mov	w1, #0x0                   	// #0
     7b8:	sub	x2, x3, x2
     7bc:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     7c0:	ldr	x20, [sp, #128]
     7c4:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     7c8:	add	x19, x24, #0x40
     7cc:	add	x22, sp, #0x80
     7d0:	ldr	q0, [x0]
     7d4:	str	q0, [sp, #144]
     7d8:	strb	wzr, [x20]
     7dc:	ldr	w0, [x24, #40]
     7e0:	cbz	w0, 934 <_ZN7__ubsan4DiagD1Ev+0x224>
     7e4:	cmp	w26, #0x0
     7e8:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     7ec:	adrp	x20, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     7f0:	add	x1, x1, #0x0
     7f4:	add	x20, x20, #0x0
     7f8:	mov	x0, x22
     7fc:	csel	x20, x20, x1, ne  // ne = any
     800:	mov	x1, x20
     804:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     808:	ldp	x2, x3, [x24, #16]
     80c:	stp	x2, x3, [sp, #176]
     810:	ldp	x0, x1, [x24]
     814:	stp	x0, x1, [sp, #160]
     818:	ldr	w0, [x24]
     81c:	ldr	x2, [x24, #32]
     820:	str	x2, [sp, #192]
     824:	cmp	w0, #0x2
     828:	b.eq	9dc <_ZN7__ubsan4DiagD1Ev+0x2cc>  // b.none
     82c:	b.hi	848 <_ZN7__ubsan4DiagD1Ev+0x138>  // b.pmore
     830:	cbz	w0, 98c <_ZN7__ubsan4DiagD1Ev+0x27c>
     834:	ldr	x1, [sp, #168]
     838:	cbz	x1, 98c <_ZN7__ubsan4DiagD1Ev+0x27c>
     83c:	ldp	w2, w3, [sp, #176]
     840:	adrp	x4, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     844:	b	864 <_ZN7__ubsan4DiagD1Ev+0x154>
     848:	cmp	w0, #0x3
     84c:	b.ne	878 <_ZN7__ubsan4DiagD1Ev+0x168>  // b.any
     850:	ldr	x1, [x2, #56]
     854:	add	x0, x2, #0x8
     858:	cbz	x1, ca0 <_ZN7__ubsan4DiagD1Ev+0x590>
     85c:	ldp	w2, w3, [x0, #56]
     860:	adrp	x4, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     864:	ldr	x4, [x4]
     868:	mov	x0, x22
     86c:	ldr	x5, [x4, #24]
     870:	ldrb	w4, [x4, #181]
     874:	bl	0 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_>
     878:	mov	x0, x22
     87c:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     880:	add	x1, x1, #0x0
     884:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     888:	ldr	w0, [x24, #40]
     88c:	cbz	w0, 9b4 <_ZN7__ubsan4DiagD1Ev+0x2a4>
     890:	cmp	w0, #0x1
     894:	b.ne	8b8 <_ZN7__ubsan4DiagD1Ev+0x1a8>  // b.any
     898:	cbnz	w26, c7c <_ZN7__ubsan4DiagD1Ev+0x56c>
     89c:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     8a0:	add	x2, x2, #0x0
     8a4:	mov	x3, x2
     8a8:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     8ac:	mov	x0, x22
     8b0:	add	x1, x1, #0x0
     8b4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     8b8:	ldr	x1, [x24, #48]
     8bc:	mov	x2, x19
     8c0:	mov	x0, x22
     8c4:	adrp	x20, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     8c8:	bl	278 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE>
     8cc:	adrp	x4, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     8d0:	cmp	w26, #0x0
     8d4:	add	x0, x4, #0x0
     8d8:	adrp	x4, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     8dc:	add	x4, x4, #0x0
     8e0:	add	x1, x20, #0x0
     8e4:	csel	x21, x4, x0, ne  // ne = any
     8e8:	mov	x0, x22
     8ec:	mov	x2, x21
     8f0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     8f4:	ldr	x1, [sp, #128]
     8f8:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     8fc:	add	x0, x0, #0x0
     900:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     904:	ldr	w0, [x24]
     908:	cmp	w0, #0x2
     90c:	b.eq	a0c <_ZN7__ubsan4DiagD1Ev+0x2fc>  // b.none
     910:	ldp	x0, x1, [sp, #128]
     914:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     918:	ldp	x21, x22, [sp, #16]
     91c:	ldp	x23, x24, [sp, #32]
     920:	ldp	x25, x26, [sp, #48]
     924:	ldp	x27, x28, [sp, #64]
     928:	ldr	x30, [sp, #80]
     92c:	ldp	x19, x20, [sp], #208
     930:	ret
     934:	ldr	x1, [x24, #48]
     938:	mov	x2, x19
     93c:	mov	x0, x22
     940:	bl	278 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE>
     944:	ldr	w0, [x24, #44]
     948:	bl	0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     94c:	mov	x1, x0
     950:	mov	x3, x22
     954:	add	x0, sp, #0xa0
     958:	mov	x2, x24
     95c:	bl	0 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE>
     960:	ldr	x0, [sp, #144]
     964:	ldr	x1, [sp, #128]
     968:	cbz	x0, cc8 <_ZN7__ubsan4DiagD1Ev+0x5b8>
     96c:	strb	wzr, [x1]
     970:	str	xzr, [sp, #152]
     974:	ldp	x0, x1, [sp, #176]
     978:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     97c:	b	7e4 <_ZN7__ubsan4DiagD1Ev+0xd4>
     980:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     984:	str	x0, [x19]
     988:	b	750 <_ZN7__ubsan4DiagD1Ev+0x40>
     98c:	mov	x0, x22
     990:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     994:	add	x1, x1, #0x0
     998:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     99c:	mov	x0, x22
     9a0:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     9a4:	add	x1, x1, #0x0
     9a8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     9ac:	ldr	w0, [x24, #40]
     9b0:	cbnz	w0, 890 <_ZN7__ubsan4DiagD1Ev+0x180>
     9b4:	cbnz	w26, c68 <_ZN7__ubsan4DiagD1Ev+0x558>
     9b8:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     9bc:	add	x2, x2, #0x0
     9c0:	mov	x3, x2
     9c4:	mov	x4, x20
     9c8:	mov	x0, x22
     9cc:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     9d0:	add	x1, x1, #0x0
     9d4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     9d8:	b	8b8 <_ZN7__ubsan4DiagD1Ev+0x1a8>
     9dc:	ldr	x2, [x24, #24]
     9e0:	mov	x0, x22
     9e4:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     9e8:	add	x1, x1, #0x0
     9ec:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     9f0:	mov	x0, x22
     9f4:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     9f8:	add	x1, x1, #0x0
     9fc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     a00:	ldr	w0, [x24, #40]
     a04:	cbnz	w0, 890 <_ZN7__ubsan4DiagD1Ev+0x180>
     a08:	b	9b4 <_ZN7__ubsan4DiagD1Ev+0x2a4>
     a0c:	ldr	x6, [x24, #24]
     a10:	add	x0, x24, #0x148
     a14:	str	x0, [sp, #96]
     a18:	ldr	w22, [x24, #416]
     a1c:	cmp	x6, #0x3
     a20:	b.ls	be8 <_ZN7__ubsan4DiagD1Ev+0x4d8>  // b.plast
     a24:	cmn	x6, #0x5
     a28:	sub	x25, x6, #0x4
     a2c:	mov	x2, #0xffffffffffffffff    	// #-1
     a30:	b.ls	be8 <_ZN7__ubsan4DiagD1Ev+0x4d8>  // b.plast
     a34:	cbz	w22, f40 <_ZN7__ubsan4DiagD1Ev+0x830>
     a38:	add	x24, x24, #0x1a0
     a3c:	sub	w3, w22, #0x1
     a40:	mov	w0, #0x58                  	// #88
     a44:	mov	x23, x25
     a48:	ldr	x1, [sp, #96]
     a4c:	umaddl	x24, w3, w0, x24
     a50:	ldr	w3, [x1]
     a54:	ldr	x0, [x1, #24]
     a58:	cmp	w3, #0x2
     a5c:	b.ne	bf0 <_ZN7__ubsan4DiagD1Ev+0x4e0>  // b.any
     a60:	ldr	w3, [x1, #40]
     a64:	cmp	x23, x0
     a68:	csel	x23, x23, x0, ls  // ls = plast
     a6c:	cmp	w3, #0x2
     a70:	ldr	x0, [x1, #64]
     a74:	b.ne	bf0 <_ZN7__ubsan4DiagD1Ev+0x4e0>  // b.any
     a78:	cmp	x2, x0
     a7c:	add	x1, x1, #0x58
     a80:	csel	x2, x2, x0, cs  // cs = hs, nlast
     a84:	cmp	x24, x1
     a88:	b.ne	a50 <_ZN7__ubsan4DiagD1Ev+0x340>  // b.any
     a8c:	sub	x0, x2, x23
     a90:	cmp	x0, #0x20
     a94:	b.ls	aa4 <_ZN7__ubsan4DiagD1Ev+0x394>  // b.plast
     a98:	sub	x2, x2, #0x20
     a9c:	cmp	x2, x25
     aa0:	csel	x23, x2, x25, ls  // ls = plast
     aa4:	cmn	x23, #0x21
     aa8:	add	x25, x23, #0x20
     aac:	mov	x1, #0x20                  	// #32
     ab0:	b.ls	abc <_ZN7__ubsan4DiagD1Ev+0x3ac>  // b.plast
     ab4:	mvn	x1, x23
     ab8:	mov	x25, #0xffffffffffffffff    	// #-1
     abc:	mov	x0, x23
     ac0:	str	x6, [sp, #104]
     ac4:	bl	0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>
     ac8:	tst	w0, #0xff
     acc:	ldr	x6, [sp, #104]
     ad0:	b.eq	ec8 <_ZN7__ubsan4DiagD1Ev+0x7b8>  // b.none
     ad4:	ldr	x24, [x27]
     ad8:	str	xzr, [sp, #160]
     adc:	stp	xzr, xzr, [sp, #168]
     ae0:	ldr	x0, [x24]
     ae4:	cbz	x0, f48 <_ZN7__ubsan4DiagD1Ev+0x838>
     ae8:	str	x6, [sp, #104]
     aec:	sub	x1, x0, #0x1
     af0:	tst	x1, x0
     af4:	b.ne	c90 <_ZN7__ubsan4DiagD1Ev+0x580>  // b.any
     af8:	add	x3, x0, #0x3ff
     afc:	neg	x0, x0
     b00:	and	x3, x3, x0
     b04:	add	x1, x28, #0x0
     b08:	mov	x0, x3
     b0c:	mov	w2, #0x0                   	// #0
     b10:	str	x3, [sp, #112]
     b14:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     b18:	mov	x24, x0
     b1c:	ldr	x1, [sp, #160]
     b20:	ldr	x2, [sp, #176]
     b24:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     b28:	ldp	x0, x1, [sp, #160]
     b2c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     b30:	ldp	x6, x3, [sp, #104]
     b34:	stp	x24, x3, [sp, #160]
     b38:	ldr	x2, [sp, #176]
     b3c:	cmp	x2, #0x3ff
     b40:	b.hi	b6c <_ZN7__ubsan4DiagD1Ev+0x45c>  // b.pmore
     b44:	cmp	x3, #0x3ff
     b48:	b.ls	f78 <_ZN7__ubsan4DiagD1Ev+0x868>  // b.plast
     b4c:	mov	x3, #0x400                 	// #1024
     b50:	add	x0, x24, x2
     b54:	mov	w1, #0x0                   	// #0
     b58:	sub	x2, x3, x2
     b5c:	str	x6, [sp, #104]
     b60:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     b64:	ldr	x6, [sp, #104]
     b68:	ldr	x24, [sp, #160]
     b6c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     b70:	cmp	x23, x25
     b74:	ldr	q0, [x0]
     b78:	str	q0, [sp, #176]
     b7c:	strb	wzr, [x24]
     b80:	b.eq	fe0 <_ZN7__ubsan4DiagD1Ev+0x8d0>  // b.none
     b84:	adrp	x28, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     b88:	add	x0, x28, #0x0
     b8c:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     b90:	mov	x28, x23
     b94:	add	x27, x1, #0x0
     b98:	add	x24, sp, #0xa0
     b9c:	str	x0, [sp, #112]
     ba0:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     ba4:	add	x0, x0, #0x0
     ba8:	str	x0, [sp, #120]
     bac:	b	bcc <_ZN7__ubsan4DiagD1Ev+0x4bc>
     bb0:	ldr	x2, [sp, #120]
     bb4:	mov	x1, x27
     bb8:	mov	x0, x24
     bbc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     bc0:	cmp	x25, x28
     bc4:	ldr	x6, [sp, #104]
     bc8:	b.eq	d0c <_ZN7__ubsan4DiagD1Ev+0x5fc>  // b.none
     bcc:	str	x6, [sp, #104]
     bd0:	tst	x28, #0x7
     bd4:	ldrb	w3, [x28]
     bd8:	add	x28, x28, #0x1
     bdc:	b.ne	bb0 <_ZN7__ubsan4DiagD1Ev+0x4a0>  // b.any
     be0:	ldr	x2, [sp, #112]
     be4:	b	bb4 <_ZN7__ubsan4DiagD1Ev+0x4a4>
     be8:	add	x2, x6, #0x4
     bec:	b	a34 <_ZN7__ubsan4DiagD1Ev+0x324>
     bf0:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     bf4:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     bf8:	add	x2, x2, #0x0
     bfc:	add	x0, x0, #0x0
     c00:	mov	x4, #0x0                   	// #0
     c04:	mov	x3, #0x0                   	// #0
     c08:	mov	w1, #0x55                  	// #85
     c0c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     c10:	ldr	x19, [x27]
     c14:	ldr	x0, [x19]
     c18:	cbz	x0, d00 <_ZN7__ubsan4DiagD1Ev+0x5f0>
     c1c:	sub	x1, x0, #0x1
     c20:	tst	x1, x0
     c24:	b.ne	c90 <_ZN7__ubsan4DiagD1Ev+0x580>  // b.any
     c28:	add	x19, x0, #0x3ff
     c2c:	neg	x0, x0
     c30:	and	x19, x19, x0
     c34:	add	x1, x28, #0x0
     c38:	mov	w2, #0x0                   	// #0
     c3c:	mov	x0, x19
     c40:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     c44:	mov	x20, x0
     c48:	ldr	x1, [sp, #128]
     c4c:	ldr	x2, [sp, #144]
     c50:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     c54:	ldp	x0, x1, [sp, #128]
     c58:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     c5c:	stp	x20, x19, [sp, #128]
     c60:	ldr	x2, [sp, #144]
     c64:	b	7ac <_ZN7__ubsan4DiagD1Ev+0x9c>
     c68:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     c6c:	adrp	x3, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     c70:	add	x2, x2, #0x0
     c74:	add	x3, x3, #0x0
     c78:	b	9c4 <_ZN7__ubsan4DiagD1Ev+0x2b4>
     c7c:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     c80:	adrp	x3, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     c84:	add	x2, x2, #0x0
     c88:	add	x3, x3, #0x0
     c8c:	b	8a8 <_ZN7__ubsan4DiagD1Ev+0x198>
     c90:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     c94:	add	x0, x0, #0x0
     c98:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     c9c:	bl	0 <_ZN11__sanitizer3DieEv>
     ca0:	ldr	x1, [x0, #8]
     ca4:	cbz	x1, ce8 <_ZN7__ubsan4DiagD1Ev+0x5d8>
     ca8:	adrp	x4, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     cac:	ldr	w3, [x0, #24]
     cb0:	ldr	x2, [x0, #16]
     cb4:	mov	x0, x22
     cb8:	ldr	x4, [x4]
     cbc:	ldr	x4, [x4, #24]
     cc0:	bl	0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_>
     cc4:	b	878 <_ZN7__ubsan4DiagD1Ev+0x168>
     cc8:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     ccc:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     cd0:	add	x2, x2, #0x0
     cd4:	add	x0, x0, #0x0
     cd8:	mov	x4, #0x0                   	// #0
     cdc:	mov	x3, #0x0                   	// #0
     ce0:	mov	w1, #0x1b6                 	// #438
     ce4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ce8:	ldr	x2, [x2, #8]
     cec:	mov	x0, x22
     cf0:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     cf4:	add	x1, x1, #0x0
     cf8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     cfc:	b	878 <_ZN7__ubsan4DiagD1Ev+0x168>
     d00:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     d04:	str	x0, [x19]
     d08:	b	c1c <_ZN7__ubsan4DiagD1Ev+0x50c>
     d0c:	mov	x0, x24
     d10:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     d14:	add	x1, x1, #0x0
     d18:	str	x6, [sp, #104]
     d1c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     d20:	mov	x27, x23
     d24:	cmp	w26, #0x0
     d28:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     d2c:	add	x2, x2, #0x0
     d30:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     d34:	add	x1, x1, #0x0
     d38:	mov	x0, x24
     d3c:	csel	x1, x2, x1, ne  // ne = any
     d40:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     d44:	ldr	x1, [sp, #96]
     d48:	mov	w2, w22
     d4c:	mov	x0, x23
     d50:	bl	180 <_ZL10upperBoundmPN7__ubsan5RangeEj>
     d54:	mov	x28, x0
     d58:	ldr	x6, [sp, #104]
     d5c:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     d60:	add	x0, x0, #0x0
     d64:	str	x0, [sp, #120]
     d68:	cbz	x28, e94 <_ZN7__ubsan4DiagD1Ev+0x784>
     d6c:	ldr	w0, [x28, #40]
     d70:	ldr	x1, [x28, #64]
     d74:	cmp	w0, #0x2
     d78:	b.ne	bf0 <_ZN7__ubsan4DiagD1Ev+0x4e0>  // b.any
     d7c:	cmp	x27, x1
     d80:	b.eq	f10 <_ZN7__ubsan4DiagD1Ev+0x800>  // b.none
     d84:	ldr	w0, [x28]
     d88:	ldr	x1, [x28, #24]
     d8c:	cmp	w0, #0x2
     d90:	b.ne	bf0 <_ZN7__ubsan4DiagD1Ev+0x4e0>  // b.any
     d94:	cmp	x27, x1
     d98:	b.ls	e80 <_ZN7__ubsan4DiagD1Ev+0x770>  // b.plast
     d9c:	mov	w26, #0x7e                  	// #126
     da0:	mov	w2, w26
     da4:	tst	x27, #0x7
     da8:	b.eq	ea8 <_ZN7__ubsan4DiagD1Ev+0x798>  // b.none
     dac:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     db0:	add	x1, x0, #0x0
     db4:	mov	x0, x24
     db8:	stp	x1, x6, [sp, #104]
     dbc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     dc0:	ldp	x1, x6, [sp, #104]
     dc4:	cmp	x6, x27
     dc8:	b.eq	ed8 <_ZN7__ubsan4DiagD1Ev+0x7c8>  // b.none
     dcc:	mov	w2, w26
     dd0:	mov	x0, x24
     dd4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     dd8:	add	x27, x27, #0x1
     ddc:	ldr	x1, [sp, #104]
     de0:	mov	w2, w26
     de4:	mov	x0, x24
     de8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     dec:	cmp	x27, x25
     df0:	ldr	x6, [sp, #112]
     df4:	b.ne	d68 <_ZN7__ubsan4DiagD1Ev+0x658>  // b.any
     df8:	add	x1, x20, #0x0
     dfc:	mov	w26, #0x0                   	// #0
     e00:	mov	x20, #0x0                   	// #0
     e04:	mov	x2, x21
     e08:	mov	x0, x24
     e0c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     e10:	cbz	x20, f5c <_ZN7__ubsan4DiagD1Ev+0x84c>
     e14:	ldr	w0, [x20, #40]
     e18:	ldr	x1, [x20, #64]
     e1c:	cmp	w0, #0x2
     e20:	b.ne	bf0 <_ZN7__ubsan4DiagD1Ev+0x4e0>  // b.any
     e24:	cmp	x23, x1
     e28:	b.eq	f5c <_ZN7__ubsan4DiagD1Ev+0x84c>  // b.none
     e2c:	tst	x23, #0x7
     e30:	ldr	w1, [x20]
     e34:	cset	w0, eq  // eq = none
     e38:	add	w0, w0, #0x1
     e3c:	cmp	w1, #0x2
     e40:	add	w0, w26, w0
     e44:	ldr	x1, [x20, #24]
     e48:	b.ne	bf0 <_ZN7__ubsan4DiagD1Ev+0x4e0>  // b.any
     e4c:	cmp	x23, x1
     e50:	b.eq	104c <_ZN7__ubsan4DiagD1Ev+0x93c>  // b.none
     e54:	add	x23, x23, #0x1
     e58:	add	w26, w0, #0x2
     e5c:	cmp	x25, x23
     e60:	b.ne	e10 <_ZN7__ubsan4DiagD1Ev+0x700>  // b.any
     e64:	ldr	x1, [sp, #160]
     e68:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     e6c:	add	x0, x0, #0x0
     e70:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     e74:	ldp	x0, x1, [sp, #160]
     e78:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     e7c:	b	910 <_ZN7__ubsan4DiagD1Ev+0x200>
     e80:	mov	w26, #0x20                  	// #32
     e84:	mov	w0, #0x7e                  	// #126
     e88:	csel	w2, w26, w26, cc  // cc = lo, ul, last
     e8c:	csel	w26, w26, w0, cc  // cc = lo, ul, last
     e90:	b	da4 <_ZN7__ubsan4DiagD1Ev+0x694>
     e94:	cmp	x6, x27
     e98:	b.cc	df8 <_ZN7__ubsan4DiagD1Ev+0x6e8>  // b.lo, b.ul, b.last
     e9c:	mov	w26, #0x20                  	// #32
     ea0:	mov	w2, w26
     ea4:	b	da4 <_ZN7__ubsan4DiagD1Ev+0x694>
     ea8:	ldr	x1, [sp, #120]
     eac:	mov	x0, x24
     eb0:	str	w2, [sp, #104]
     eb4:	str	x6, [sp, #112]
     eb8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     ebc:	ldr	w2, [sp, #104]
     ec0:	ldr	x6, [sp, #112]
     ec4:	b	dac <_ZN7__ubsan4DiagD1Ev+0x69c>
     ec8:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     ecc:	add	x0, x0, #0x0
     ed0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     ed4:	b	910 <_ZN7__ubsan4DiagD1Ev+0x200>
     ed8:	mov	x0, x24
     edc:	mov	w2, #0x5e                  	// #94
     ee0:	stp	x1, x6, [sp, #104]
     ee4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     ee8:	mov	w2, w26
     eec:	ldp	x1, x6, [sp, #104]
     ef0:	mov	x0, x24
     ef4:	str	x6, [sp, #104]
     ef8:	add	x27, x6, #0x1
     efc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     f00:	cmp	x25, x27
     f04:	ldr	x6, [sp, #104]
     f08:	b.ne	d68 <_ZN7__ubsan4DiagD1Ev+0x658>  // b.any
     f0c:	b	df8 <_ZN7__ubsan4DiagD1Ev+0x6e8>
     f10:	ldr	x1, [sp, #96]
     f14:	mov	w2, w22
     f18:	mov	x0, x27
     f1c:	str	x6, [sp, #104]
     f20:	bl	180 <_ZL10upperBoundmPN7__ubsan5RangeEj>
     f24:	cmp	x0, #0x0
     f28:	ldr	x6, [sp, #104]
     f2c:	mov	x28, x0
     f30:	ccmp	x6, x27, #0x2, eq  // eq = none
     f34:	b.cc	df8 <_ZN7__ubsan4DiagD1Ev+0x6e8>  // b.lo, b.ul, b.last
     f38:	cbnz	x0, d84 <_ZN7__ubsan4DiagD1Ev+0x674>
     f3c:	b	e9c <_ZN7__ubsan4DiagD1Ev+0x78c>
     f40:	mov	x23, x25
     f44:	b	a8c <_ZN7__ubsan4DiagD1Ev+0x37c>
     f48:	str	x6, [sp, #104]
     f4c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     f50:	str	x0, [x24]
     f54:	ldr	x6, [sp, #104]
     f58:	b	ae8 <_ZN7__ubsan4DiagD1Ev+0x3d8>
     f5c:	ldr	x1, [sp, #96]
     f60:	mov	w2, w22
     f64:	mov	x0, x23
     f68:	bl	180 <_ZL10upperBoundmPN7__ubsan5RangeEj>
     f6c:	mov	x20, x0
     f70:	cbnz	x0, e2c <_ZN7__ubsan4DiagD1Ev+0x71c>
     f74:	b	e64 <_ZN7__ubsan4DiagD1Ev+0x754>
     f78:	ldr	x24, [x27]
     f7c:	ldr	x0, [x24]
     f80:	cbz	x0, 102c <_ZN7__ubsan4DiagD1Ev+0x91c>
     f84:	ldr	x27, [x27]
     f88:	str	x6, [sp, #104]
     f8c:	ldr	x0, [x27]
     f90:	sub	x1, x0, #0x1
     f94:	tst	x1, x0
     f98:	b.ne	c90 <_ZN7__ubsan4DiagD1Ev+0x580>  // b.any
     f9c:	add	x27, x0, #0x3ff
     fa0:	neg	x0, x0
     fa4:	and	x27, x27, x0
     fa8:	add	x1, x28, #0x0
     fac:	mov	w2, #0x0                   	// #0
     fb0:	mov	x0, x27
     fb4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     fb8:	mov	x24, x0
     fbc:	ldr	x1, [sp, #160]
     fc0:	ldr	x2, [sp, #176]
     fc4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     fc8:	ldp	x0, x1, [sp, #160]
     fcc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     fd0:	stp	x24, x27, [sp, #160]
     fd4:	ldr	x6, [sp, #104]
     fd8:	ldr	x2, [sp, #176]
     fdc:	b	b4c <_ZN7__ubsan4DiagD1Ev+0x43c>
     fe0:	add	x24, sp, #0xa0
     fe4:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     fe8:	mov	x0, x24
     fec:	add	x1, x1, #0x0
     ff0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     ff4:	cbnz	w26, 103c <_ZN7__ubsan4DiagD1Ev+0x92c>
     ff8:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
     ffc:	mov	x0, x24
    1000:	add	x1, x1, #0x0
    1004:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
    1008:	ldr	x1, [sp, #96]
    100c:	mov	w2, w22
    1010:	mov	x0, x23
    1014:	bl	180 <_ZL10upperBoundmPN7__ubsan5RangeEj>
    1018:	mov	x2, x21
    101c:	add	x1, x20, #0x0
    1020:	mov	x0, x24
    1024:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
    1028:	b	e64 <_ZN7__ubsan4DiagD1Ev+0x754>
    102c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    1030:	str	x0, [x24]
    1034:	ldr	x6, [sp, #104]
    1038:	b	f84 <_ZN7__ubsan4DiagD1Ev+0x874>
    103c:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1040:	mov	x0, x24
    1044:	add	x1, x1, #0x0
    1048:	b	1004 <_ZN7__ubsan4DiagD1Ev+0x8f4>
    104c:	adrp	x22, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1050:	sub	w23, w0, #0x1
    1054:	add	x22, x22, #0x0
    1058:	cbz	w0, 1074 <_ZN7__ubsan4DiagD1Ev+0x964>
    105c:	sub	w23, w23, #0x1
    1060:	mov	x1, x22
    1064:	mov	x0, x24
    1068:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
    106c:	cmn	w23, #0x1
    1070:	b.ne	105c <_ZN7__ubsan4DiagD1Ev+0x94c>  // b.any
    1074:	ldr	x1, [x20, #80]
    1078:	mov	x2, x19
    107c:	mov	x0, x24
    1080:	bl	278 <_ZL10RenderTextPN11__sanitizer20InternalScopedStringEPKcPKN7__ubsan4Diag3ArgE>
    1084:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1088:	add	x1, x0, #0x0
    108c:	mov	x0, x24
    1090:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
    1094:	b	e64 <_ZN7__ubsan4DiagD1Ev+0x754>

0000000000001098 <_ZN7__ubsan12ScopedReport11InitializerC1Ev>:
    1098:	b	0 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv>
    109c:	nop

00000000000010a0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>:
    10a0:	stp	x19, x20, [sp, #-48]!
    10a4:	mov	x19, x0
    10a8:	mov	x20, x2
    10ac:	stp	x21, x22, [sp, #16]
    10b0:	mov	x21, x1
    10b4:	mov	w22, w3
    10b8:	str	x30, [sp, #32]
    10bc:	bl	0 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv>
    10c0:	add	x0, x19, #0x1
    10c4:	bl	0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>
    10c8:	ldp	x2, x3, [x21]
    10cc:	stp	x2, x3, [x19, #8]
    10d0:	ldp	x2, x3, [x20]
    10d4:	stp	x2, x3, [x19, #32]
    10d8:	ldr	x1, [x21, #16]
    10dc:	ldp	x2, x3, [x20, #16]
    10e0:	stp	x2, x3, [x19, #48]
    10e4:	ldr	x30, [sp, #32]
    10e8:	str	x1, [x19, #24]
    10ec:	ldr	x1, [x20, #32]
    10f0:	str	w22, [x19, #72]
    10f4:	ldp	x21, x22, [sp, #16]
    10f8:	str	x1, [x19, #64]
    10fc:	ldp	x19, x20, [sp], #48
    1100:	ret
    1104:	nop

0000000000001108 <_ZN7__ubsan12ScopedReportD1Ev>:
    1108:	stp	x19, x20, [sp, #-176]!
    110c:	mov	x19, x0
    1110:	adrp	x20, 0 <_ZN7__ubsan11ubsan_flagsE>
    1114:	ldr	x0, [x0, #16]
    1118:	ldr	x1, [x19, #24]
    111c:	str	x30, [sp, #48]
    1120:	bl	430 <_ZL20MaybePrintStackTracemm>
    1124:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1128:	ldr	w0, [x19, #72]
    112c:	ldp	x2, x3, [x19, #32]
    1130:	stp	x2, x3, [sp, #72]
    1134:	ldr	x1, [x1]
    1138:	ldp	x2, x3, [x19, #48]
    113c:	stp	x2, x3, [sp, #88]
    1140:	ldrb	w1, [x1, #60]
    1144:	cbz	w1, 118c <_ZN7__ubsan12ScopedReportD1Ev+0x84>
    1148:	ldr	x1, [x20]
    114c:	stp	x21, x22, [sp, #16]
    1150:	ldrb	w1, [x1, #16]
    1154:	cmp	w1, #0x0
    1158:	csel	w0, w0, wzr, ne  // ne = any
    115c:	bl	0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1160:	ldr	w22, [x19, #32]
    1164:	mov	x21, x0
    1168:	cmp	w22, #0x1
    116c:	b.eq	11d0 <_ZN7__ubsan12ScopedReportD1Ev+0xc8>  // b.none
    1170:	cmp	w22, #0x3
    1174:	b.eq	11ac <_ZN7__ubsan12ScopedReportD1Ev+0xa4>  // b.none
    1178:	bl	0 <_ZN7__ubsan22GetSanititizerToolNameEv>
    117c:	mov	x1, x0
    1180:	mov	x0, x21
    1184:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
    1188:	ldp	x21, x22, [sp, #16]
    118c:	ldr	x20, [x20]
    1190:	ldrb	w0, [x20]
    1194:	cbnz	w0, 1234 <_ZN7__ubsan12ScopedReportD1Ev+0x12c>
    1198:	add	x0, x19, #0x1
    119c:	bl	0 <_ZN11__sanitizer21ScopedErrorReportLockD1Ev>
    11a0:	ldr	x30, [sp, #48]
    11a4:	ldp	x19, x20, [sp], #176
    11a8:	ret
    11ac:	ldr	x22, [x19, #64]
    11b0:	bl	0 <_ZN7__ubsan22GetSanititizerToolNameEv>
    11b4:	mov	x2, x0
    11b8:	mov	x0, x21
    11bc:	add	x22, x22, #0x8
    11c0:	mov	x1, x22
    11c4:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
    11c8:	ldp	x21, x22, [sp, #16]
    11cc:	b	118c <_ZN7__ubsan12ScopedReportD1Ev+0x84>
    11d0:	ldr	x22, [sp, #80]
    11d4:	cbz	x22, 1178 <_ZN7__ubsan12ScopedReportD1Ev+0x70>
    11d8:	stp	x23, x24, [sp, #32]
    11dc:	add	x23, sp, #0x70
    11e0:	mov	x0, x23
    11e4:	ldr	x24, [sp, #88]
    11e8:	bl	0 <_ZN11__sanitizer11AddressInfoC1Ev>
    11ec:	mov	x0, x22
    11f0:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
    11f4:	mov	x1, x0
    11f8:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    11fc:	add	x0, x0, #0x0
    1200:	stp	x1, x24, [sp, #160]
    1204:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
    1208:	str	x0, [sp, #144]
    120c:	bl	0 <_ZN7__ubsan22GetSanititizerToolNameEv>
    1210:	mov	x2, x0
    1214:	mov	x1, x23
    1218:	mov	x0, x21
    121c:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>
    1220:	mov	x0, x23
    1224:	bl	0 <_ZN11__sanitizer11AddressInfo5ClearEv>
    1228:	ldp	x21, x22, [sp, #16]
    122c:	ldp	x23, x24, [sp, #32]
    1230:	b	118c <_ZN7__ubsan12ScopedReportD1Ev+0x84>
    1234:	stp	x21, x22, [sp, #16]
    1238:	stp	x23, x24, [sp, #32]
    123c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000001240 <_ZN7__ubsan22InitializeSuppressionsEv>:
    1240:	stp	x19, x20, [sp, #-32]!
    1244:	adrp	x20, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1248:	ldr	x4, [x20]
    124c:	str	x30, [sp, #16]
    1250:	cbnz	x4, 1290 <_ZN7__ubsan22InitializeSuppressionsEv+0x50>
    1254:	add	x19, x20, #0x0
    1258:	mov	w2, #0x1b                  	// #27
    125c:	add	x19, x19, #0x40
    1260:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1264:	mov	x0, x19
    1268:	add	x1, x1, #0x0
    126c:	bl	0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
    1270:	str	x19, [x20]
    1274:	adrp	x1, 0 <_ZN7__ubsan11ubsan_flagsE>
    1278:	mov	x0, x19
    127c:	ldr	x30, [sp, #16]
    1280:	ldr	x1, [x1]
    1284:	ldp	x19, x20, [sp], #32
    1288:	ldr	x1, [x1, #8]
    128c:	b	0 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc>
    1290:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1294:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1298:	add	x2, x2, #0x0
    129c:	add	x0, x0, #0x0
    12a0:	mov	x3, #0x0                   	// #0
    12a4:	mov	w1, #0x18d                 	// #397
    12a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    12ac:	nop

00000000000012b0 <_ZN7__ubsan21IsVptrCheckSuppressedEPKc>:
    12b0:	stp	x19, x30, [sp, #-32]!
    12b4:	mov	x19, x0
    12b8:	bl	0 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv>
    12bc:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    12c0:	ldr	x0, [x0]
    12c4:	cbz	x0, 12e4 <_ZN7__ubsan21IsVptrCheckSuppressedEPKc+0x34>
    12c8:	mov	x1, x19
    12cc:	add	x3, sp, #0x18
    12d0:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    12d4:	add	x2, x2, #0x0
    12d8:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
    12dc:	ldp	x19, x30, [sp], #32
    12e0:	ret
    12e4:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    12e8:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    12ec:	add	x2, x2, #0x0
    12f0:	add	x0, x0, #0x0
    12f4:	mov	x4, #0x0                   	// #0
    12f8:	mov	x3, #0x0                   	// #0
    12fc:	mov	w1, #0x195                 	// #405
    1300:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1304:	nop

0000000000001308 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>:
    1308:	stp	x19, x20, [sp, #-96]!
    130c:	mov	w19, w0
    1310:	mov	x20, x2
    1314:	stp	x21, x22, [sp, #16]
    1318:	adrp	x22, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    131c:	mov	x21, x1
    1320:	stp	x23, x24, [sp, #32]
    1324:	str	x30, [sp, #48]
    1328:	bl	0 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv>
    132c:	ldr	x0, [x22]
    1330:	cbz	x0, 1450 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x148>
    1334:	cmp	w19, #0x19
    1338:	b.hi	1590 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x288>  // b.pmore
    133c:	adrp	x1, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1340:	add	x1, x1, #0x0
    1344:	ldrh	w1, [x1, w19, uxtw #1]
    1348:	adr	x2, 1354 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x4c>
    134c:	add	x1, x2, w1, sxth #2
    1350:	br	x1
    1354:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1358:	add	x19, x19, #0x0
    135c:	mov	x1, x19
    1360:	bl	0 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc>
    1364:	ands	w23, w0, #0xff
    1368:	b.eq	1408 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x100>  // b.none
    136c:	str	xzr, [sp, #72]
    1370:	cbz	x20, 142c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x124>
    1374:	ldr	x0, [x22]
    1378:	add	x24, sp, #0x48
    137c:	mov	x1, x20
    1380:	mov	x3, x24
    1384:	mov	x2, x19
    1388:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
    138c:	tst	w0, #0xff
    1390:	b.ne	1408 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x100>  // b.any
    1394:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
    1398:	str	xzr, [sp, #80]
    139c:	add	x3, sp, #0x58
    13a0:	add	x2, sp, #0x50
    13a4:	mov	x1, x21
    13a8:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
    13ac:	tst	w0, #0xff
    13b0:	b.eq	13d4 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0xcc>  // b.none
    13b4:	ldr	x1, [sp, #80]
    13b8:	cbz	x1, 13d4 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0xcc>
    13bc:	ldr	x0, [x22]
    13c0:	mov	x3, x24
    13c4:	mov	x2, x19
    13c8:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
    13cc:	tst	w0, #0xff
    13d0:	b.ne	1408 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x100>  // b.any
    13d4:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
    13d8:	mov	x1, x21
    13dc:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
    13e0:	mov	x20, x0
    13e4:	mov	x3, x24
    13e8:	ldr	x0, [x22]
    13ec:	mov	x2, x19
    13f0:	ldr	x1, [x20, #40]
    13f4:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
    13f8:	ands	w23, w0, #0xff
    13fc:	b.eq	1434 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x12c>  // b.none
    1400:	mov	x0, x20
    1404:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
    1408:	mov	w0, w23
    140c:	ldp	x21, x22, [sp, #16]
    1410:	ldp	x23, x24, [sp, #32]
    1414:	ldr	x30, [sp, #48]
    1418:	ldp	x19, x20, [sp], #96
    141c:	ret
    1420:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1424:	add	x19, x19, #0x0
    1428:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    142c:	add	x24, sp, #0x48
    1430:	b	1394 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x8c>
    1434:	ldr	x0, [x22]
    1438:	mov	x3, x24
    143c:	ldr	x1, [x20, #56]
    1440:	mov	x2, x19
    1444:	bl	0 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>
    1448:	and	w23, w0, #0xff
    144c:	b	1400 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0xf8>
    1450:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1454:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1458:	add	x2, x2, #0x0
    145c:	add	x0, x0, #0x0
    1460:	mov	x4, #0x0                   	// #0
    1464:	mov	x3, #0x0                   	// #0
    1468:	mov	w1, #0x19c                 	// #412
    146c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1470:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1474:	add	x19, x19, #0x0
    1478:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    147c:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1480:	add	x19, x19, #0x0
    1484:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1488:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    148c:	add	x19, x19, #0x0
    1490:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1494:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1498:	add	x19, x19, #0x0
    149c:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14a0:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14a4:	add	x19, x19, #0x0
    14a8:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14ac:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14b0:	add	x19, x19, #0x0
    14b4:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14b8:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14bc:	add	x19, x19, #0x0
    14c0:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14c4:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14c8:	add	x19, x19, #0x0
    14cc:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14d0:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14d4:	add	x19, x19, #0x0
    14d8:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14dc:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14e0:	add	x19, x19, #0x0
    14e4:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14e8:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14ec:	add	x19, x19, #0x0
    14f0:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    14f4:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    14f8:	add	x19, x19, #0x0
    14fc:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1500:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1504:	add	x19, x19, #0x0
    1508:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    150c:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1510:	add	x19, x19, #0x0
    1514:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1518:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    151c:	add	x19, x19, #0x0
    1520:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1524:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1528:	add	x19, x19, #0x0
    152c:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1530:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1534:	add	x19, x19, #0x0
    1538:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    153c:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1540:	add	x19, x19, #0x0
    1544:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1548:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    154c:	add	x19, x19, #0x0
    1550:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1554:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1558:	add	x19, x19, #0x0
    155c:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1560:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1564:	add	x19, x19, #0x0
    1568:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    156c:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1570:	add	x19, x19, #0x0
    1574:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1578:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    157c:	add	x19, x19, #0x0
    1580:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1584:	adrp	x19, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1588:	add	x19, x19, #0x0
    158c:	b	135c <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc+0x54>
    1590:	adrp	x2, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1594:	adrp	x0, 0 <_ZL19ConvertTypeToStringN7__ubsan9ErrorTypeE>
    1598:	add	x2, x2, #0x0
    159c:	add	x0, x0, #0x0
    15a0:	mov	x4, #0x0                   	// #0
    15a4:	mov	x3, #0x0                   	// #0
    15a8:	mov	w1, #0x44                  	// #68
    15ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

ubsan_flags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__ubsan_default_options>:
   0:	adrp	x0, 0 <__ubsan_default_options>
   4:	add	x0, x0, #0x0
   8:	ret
   c:	nop

0000000000000010 <_ZN7__ubsan28MaybeCallUbsanDefaultOptionsEv>:
  10:	b	0 <__ubsan_default_options>
  14:	nop

0000000000000018 <_ZN7__ubsan5Flags11SetDefaultsEv>:
  18:	adrp	x1, 0 <__ubsan_default_options>
  1c:	add	x1, x1, #0x0
  20:	strh	wzr, [x0]
  24:	str	x1, [x0, #8]
  28:	strh	wzr, [x0, #16]
  2c:	ret

0000000000000030 <_ZN7__ubsan18RegisterUbsanFlagsEPN11__sanitizer10FlagParserEPNS_5FlagsE>:
  30:	stp	x19, x20, [sp, #-48]!
  34:	mov	x20, x0
  38:	mov	x19, x1
  3c:	stp	x21, x22, [sp, #16]
  40:	adrp	x21, 0 <_ZN11__sanitizer10FlagParser5AllocE>
  44:	mov	x1, #0x10                  	// #16
  48:	ldr	x21, [x21]
  4c:	str	x30, [sp, #32]
  50:	adrp	x22, 0 <__ubsan_default_options>
  54:	add	x22, x22, #0x0
  58:	mov	x0, x21
  5c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  60:	mov	x2, x0
  64:	adrp	x3, 0 <__ubsan_default_options>
  68:	add	x3, x3, #0x0
  6c:	mov	x0, x20
  70:	adrp	x1, 0 <__ubsan_default_options>
  74:	add	x1, x1, #0x0
  78:	stp	x22, x19, [x2]
  7c:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
  80:	mov	x0, x21
  84:	mov	x1, #0x10                  	// #16
  88:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  8c:	mov	x2, x0
  90:	add	x4, x19, #0x1
  94:	adrp	x3, 0 <__ubsan_default_options>
  98:	add	x3, x3, #0x0
  9c:	mov	x0, x20
  a0:	stp	x22, x4, [x2]
  a4:	adrp	x1, 0 <__ubsan_default_options>
  a8:	add	x1, x1, #0x0
  ac:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
  b0:	mov	x0, x21
  b4:	mov	x1, #0x10                  	// #16
  b8:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  bc:	mov	x2, x0
  c0:	add	x1, x19, #0x8
  c4:	adrp	x0, 0 <__ubsan_default_options>
  c8:	adrp	x3, 0 <__ubsan_default_options>
  cc:	add	x0, x0, #0x0
  d0:	add	x3, x3, #0x0
  d4:	stp	x0, x1, [x2]
  d8:	mov	x0, x20
  dc:	adrp	x1, 0 <__ubsan_default_options>
  e0:	add	x1, x1, #0x0
  e4:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
  e8:	mov	x0, x21
  ec:	mov	x1, #0x10                  	// #16
  f0:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  f4:	mov	x2, x0
  f8:	add	x4, x19, #0x10
  fc:	adrp	x3, 0 <__ubsan_default_options>
 100:	add	x3, x3, #0x0
 104:	mov	x0, x20
 108:	stp	x22, x4, [x2]
 10c:	adrp	x1, 0 <__ubsan_default_options>
 110:	add	x1, x1, #0x0
 114:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
 118:	add	x19, x19, #0x11
 11c:	mov	x0, x21
 120:	mov	x1, #0x10                  	// #16
 124:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 128:	mov	x2, x0
 12c:	ldr	x30, [sp, #32]
 130:	mov	x0, x20
 134:	stp	x22, x19, [x2]
 138:	adrp	x3, 0 <__ubsan_default_options>
 13c:	adrp	x1, 0 <__ubsan_default_options>
 140:	ldp	x21, x22, [sp, #16]
 144:	add	x3, x3, #0x0
 148:	ldp	x19, x20, [sp], #48
 14c:	add	x1, x1, #0x0
 150:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
 154:	nop

0000000000000158 <_ZN7__ubsan15InitializeFlagsEv>:
 158:	stp	x19, x20, [sp, #-288]!
 15c:	stp	x21, x22, [sp, #16]
 160:	adrp	x21, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 164:	add	x19, sp, #0x30
 168:	ldr	x20, [x21]
 16c:	str	x30, [sp, #32]
 170:	mov	x0, x20
 174:	bl	0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
 178:	mov	x1, x20
 17c:	mov	x0, x19
 180:	bl	0 <_ZN11__sanitizer11CommonFlags8CopyFromERKS0_>
 184:	strb	wzr, [sp, #108]
 188:	adrp	x0, 0 <__ubsan_default_options>
 18c:	add	x0, x0, #0x0
 190:	bl	0 <getenv>
 194:	mov	x2, x0
 198:	mov	x1, x19
 19c:	mov	x0, x20
 1a0:	str	x2, [sp, #56]
 1a4:	bl	0 <_ZN11__sanitizer11CommonFlags8CopyFromERKS0_>
 1a8:	adrp	x2, 0 <__ubsan_default_options>
 1ac:	adrp	x1, 0 <__ubsan_default_options>
 1b0:	add	x22, x2, #0x0
 1b4:	add	x1, x1, #0x0
 1b8:	strh	wzr, [x2]
 1bc:	mov	x0, x19
 1c0:	str	x1, [x22, #8]
 1c4:	strh	wzr, [x22, #16]
 1c8:	bl	0 <_ZN11__sanitizer10FlagParserC1Ev>
 1cc:	mov	x1, x20
 1d0:	mov	x0, x19
 1d4:	bl	0 <_ZN11__sanitizer19RegisterCommonFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>
 1d8:	mov	x1, x22
 1dc:	mov	x0, x19
 1e0:	bl	30 <_ZN7__ubsan18RegisterUbsanFlagsEPN11__sanitizer10FlagParserEPNS_5FlagsE>
 1e4:	bl	0 <__ubsan_default_options>
 1e8:	mov	x1, x0
 1ec:	mov	x0, x19
 1f0:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
 1f4:	adrp	x0, 0 <__ubsan_default_options>
 1f8:	add	x0, x0, #0x0
 1fc:	bl	0 <getenv>
 200:	mov	x1, x0
 204:	mov	x0, x19
 208:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
 20c:	mov	x0, x20
 210:	bl	0 <_ZN11__sanitizer21InitializeCommonFlagsEPNS_11CommonFlagsE>
 214:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 218:	ldr	x0, [x0]
 21c:	ldr	w0, [x0]
 220:	cbnz	w0, 240 <_ZN7__ubsan15InitializeFlagsEv+0xe8>
 224:	ldr	x21, [x21]
 228:	ldrb	w0, [x21, #122]
 22c:	cbnz	w0, 250 <_ZN7__ubsan15InitializeFlagsEv+0xf8>
 230:	ldp	x21, x22, [sp, #16]
 234:	ldr	x30, [sp, #32]
 238:	ldp	x19, x20, [sp], #288
 23c:	ret
 240:	bl	0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 244:	ldr	x21, [x21]
 248:	ldrb	w0, [x21, #122]
 24c:	cbz	w0, 230 <_ZN7__ubsan15InitializeFlagsEv+0xd8>
 250:	mov	x0, x19
 254:	bl	0 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv>
 258:	ldp	x21, x22, [sp, #16]
 25c:	ldr	x30, [sp, #32]
 260:	ldp	x19, x20, [sp], #288
 264:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_>:
   0:	mov	x2, x0
   4:	mov	w0, #0x1                   	// #1
   8:	ldr	x2, [x2, #8]
   c:	str	x1, [x2]
  10:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIbE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>:
   0:	mov	x2, x0
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x1
   c:	mov	x0, x19
  10:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  14:	add	x1, x1, #0x0
  18:	ldr	x20, [x2, #8]
  1c:	str	x30, [sp, #16]
  20:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  24:	cbnz	w0, 3c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x3c>
  28:	mov	w0, #0x1                   	// #1
  2c:	strb	wzr, [x20]
  30:	ldr	x30, [sp, #16]
  34:	ldp	x19, x20, [sp], #32
  38:	ret
  3c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  40:	mov	x0, x19
  44:	add	x1, x1, #0x0
  48:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  4c:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  50:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  54:	mov	x0, x19
  58:	add	x1, x1, #0x0
  5c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  60:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  64:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  68:	mov	x0, x19
  6c:	add	x1, x1, #0x0
  70:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  74:	cbz	w0, 8c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x8c>
  78:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  7c:	mov	x0, x19
  80:	add	x1, x1, #0x0
  84:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  88:	cbnz	w0, 9c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x9c>
  8c:	mov	w1, #0x1                   	// #1
  90:	mov	w0, #0x1                   	// #1
  94:	strb	w1, [x20]
  98:	b	30 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x30>
  9c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  a0:	mov	x0, x19
  a4:	add	x1, x1, #0x0
  a8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  ac:	cbz	w0, 8c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x8c>
  b0:	mov	x1, x19
  b4:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  c0:	mov	w0, #0x0                   	// #0
  c4:	ldr	x30, [sp, #16]
  c8:	ldp	x19, x20, [sp], #32
  cc:	ret

ubsan_handlers.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>:
       0:	sub	sp, sp, #0x2c0
       4:	ldrb	w3, [x2]
       8:	mov	w4, #0xffffffff            	// #-1
       c:	stp	x19, x20, [sp]
      10:	mov	x19, x0
      14:	add	x0, x0, #0xc
      18:	stp	x23, x24, [sp, #32]
      1c:	mov	x24, x2
      20:	mov	x20, x1
      24:	stp	x21, x22, [sp, #16]
      28:	stp	x25, x26, [sp, #48]
      2c:	ldr	x1, [x2, #8]
      30:	str	x30, [sp, #80]
      34:	ldxr	w21, [x0]
      38:	stxr	w2, w4, [x0]
      3c:	cbnz	w2, 34 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x34>
      40:	dmb	ish
      44:	ldr	x0, [x19, #16]
      48:	mov	w26, w3
      4c:	ldr	w25, [x19, #8]
      50:	ldr	x23, [x19]
      54:	ldrh	w4, [x0]
      58:	cbnz	w4, 94 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x94>
      5c:	ldrh	w0, [x0, #2]
      60:	tbz	w0, #0, 94 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x94>
      64:	cbnz	w3, 220 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x220>
      68:	mov	w26, #0x1                   	// #1
      6c:	mov	w22, #0x5                   	// #5
      70:	cmn	w21, #0x1
      74:	b.ne	198 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x198>  // b.any
      78:	ldp	x19, x20, [sp]
      7c:	ldp	x21, x22, [sp, #16]
      80:	ldp	x23, x24, [sp, #32]
      84:	ldp	x25, x26, [sp, #48]
      88:	ldr	x30, [sp, #80]
      8c:	add	sp, sp, #0x2c0
      90:	ret
      94:	mov	w22, #0x6                   	// #6
      98:	cbz	w3, 70 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x70>
      9c:	adrp	x0, 0 <_ZN7__ubsan11ubsan_flagsE>
      a0:	ldr	x0, [x0]
      a4:	ldrb	w0, [x0, #17]
      a8:	cbnz	w0, 78 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x78>
      ac:	stp	x27, x28, [sp, #64]
      b0:	mov	w28, #0x1                   	// #1
      b4:	add	x26, sp, #0xc0
      b8:	str	w28, [sp, #272]
      bc:	mov	w3, w22
      c0:	str	x23, [sp, #280]
      c4:	add	x2, sp, #0x60
      c8:	str	w25, [sp, #288]
      cc:	mov	x0, x26
      d0:	str	w21, [sp, #292]
      d4:	add	x1, sp, #0x90
      d8:	ldp	x6, x7, [sp, #272]
      dc:	add	x27, sp, #0x110
      e0:	ldr	x8, [x24, #16]
      e4:	stp	x6, x7, [sp, #96]
      e8:	ldp	x6, x7, [x24]
      ec:	stp	x6, x7, [sp, #144]
      f0:	ldp	x4, x5, [sp, #288]
      f4:	stp	x4, x5, [sp, #112]
      f8:	ldr	x9, [sp, #304]
      fc:	str	x9, [sp, #128]
     100:	str	x8, [sp, #160]
     104:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     108:	ldr	x3, [x19, #16]
     10c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     110:	mov	x0, x27
     114:	add	x2, x2, #0x0
     118:	stp	x3, x20, [sp, #176]
     11c:	add	x3, sp, #0x130
     120:	add	x1, sp, #0xb0
     124:	str	w28, [sp, #272]
     128:	str	x23, [sp, #280]
     12c:	stp	w25, w21, [x3, #-16]
     130:	stp	wzr, w22, [x3, #8]
     134:	str	x2, [sp, #320]
     138:	str	wzr, [sp, #592]
     13c:	str	wzr, [sp, #600]
     140:	str	xzr, [sp, #608]
     144:	str	xzr, [sp, #616]
     148:	str	wzr, [sp, #640]
     14c:	str	xzr, [sp, #648]
     150:	str	xzr, [sp, #656]
     154:	str	xzr, [sp, #680]
     158:	str	wzr, [sp, #688]
     15c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     160:	ldr	x1, [x19, #16]
     164:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     168:	mov	x0, x27
     16c:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     170:	mov	x0, x26
     174:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     178:	ldp	x19, x20, [sp]
     17c:	ldp	x21, x22, [sp, #16]
     180:	ldp	x23, x24, [sp, #32]
     184:	ldp	x25, x26, [sp, #48]
     188:	ldp	x27, x28, [sp, #64]
     18c:	ldr	x30, [sp, #80]
     190:	add	sp, sp, #0x2c0
     194:	ret
     198:	mov	x2, x23
     19c:	mov	w0, w22
     1a0:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     1a4:	tst	w0, #0xff
     1a8:	b.ne	78 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x78>  // b.any
     1ac:	cbz	w26, 9c <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x9c>
     1b0:	stp	x27, x28, [sp, #64]
     1b4:	mov	w28, #0x1                   	// #1
     1b8:	str	w28, [sp, #272]
     1bc:	add	x26, sp, #0xc0
     1c0:	str	x23, [sp, #280]
     1c4:	mov	w3, w22
     1c8:	str	w25, [sp, #288]
     1cc:	add	x2, sp, #0x60
     1d0:	str	w21, [sp, #292]
     1d4:	mov	x0, x26
     1d8:	ldp	x6, x7, [sp, #272]
     1dc:	add	x1, sp, #0x90
     1e0:	ldr	x8, [x24, #16]
     1e4:	stp	x6, x7, [sp, #96]
     1e8:	add	x27, sp, #0x110
     1ec:	ldp	x6, x7, [x24]
     1f0:	stp	x6, x7, [sp, #144]
     1f4:	ldp	x4, x5, [sp, #288]
     1f8:	stp	x4, x5, [sp, #112]
     1fc:	ldr	x9, [sp, #304]
     200:	str	x9, [sp, #128]
     204:	str	x8, [sp, #160]
     208:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     20c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     210:	mov	x0, x27
     214:	add	x2, x2, #0x0
     218:	ldr	x3, [x19, #16]
     21c:	b	118 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x118>
     220:	mov	w22, #0x5                   	// #5
     224:	stp	x27, x28, [sp, #64]
     228:	b	1b4 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE+0x1b4>
     22c:	nop

0000000000000230 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE>:
     230:	sub	sp, sp, #0x2b0
     234:	stp	x19, x20, [sp]
     238:	mov	x19, x0
     23c:	mov	x20, x2
     240:	add	x0, x0, #0xc
     244:	stp	x21, x22, [sp, #16]
     248:	mov	x21, x1
     24c:	mov	w1, #0xffffffff            	// #-1
     250:	stp	x25, x26, [sp, #48]
     254:	str	x30, [sp, #72]
     258:	ldxr	w22, [x0]
     25c:	stxr	w2, w1, [x0]
     260:	cbnz	w2, 258 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE+0x28>
     264:	dmb	ish
     268:	ldrb	w0, [x20]
     26c:	ldr	w26, [x19, #8]
     270:	ldr	x25, [x19]
     274:	cbnz	w0, 2b0 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE+0x80>
     278:	cmp	w22, w1
     27c:	b.ne	298 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE+0x68>  // b.any
     280:	ldp	x19, x20, [sp]
     284:	ldp	x21, x22, [sp, #16]
     288:	ldp	x25, x26, [sp, #48]
     28c:	ldr	x30, [sp, #72]
     290:	add	sp, sp, #0x2b0
     294:	ret
     298:	ldr	x1, [x20, #8]
     29c:	mov	x2, x25
     2a0:	mov	w0, #0xe                   	// #14
     2a4:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     2a8:	tst	w0, #0xff
     2ac:	b.ne	280 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE+0x50>  // b.any
     2b0:	str	x25, [sp, #264]
     2b4:	add	x2, sp, #0x50
     2b8:	str	w26, [sp, #272]
     2bc:	add	x1, sp, #0x80
     2c0:	str	w22, [sp, #276]
     2c4:	mov	w3, #0xe                   	// #14
     2c8:	ldp	x8, x9, [x20]
     2cc:	str	x27, [sp, #64]
     2d0:	mov	w27, #0x1                   	// #1
     2d4:	str	w27, [sp, #256]
     2d8:	ldp	x4, x5, [sp, #272]
     2dc:	stp	x23, x24, [sp, #32]
     2e0:	add	x23, sp, #0xb0
     2e4:	ldp	x6, x7, [sp, #256]
     2e8:	stp	x6, x7, [sp, #80]
     2ec:	mov	x0, x23
     2f0:	ldr	x6, [x20, #16]
     2f4:	stp	x4, x5, [sp, #96]
     2f8:	add	x24, sp, #0x100
     2fc:	ldr	x10, [sp, #288]
     300:	str	x10, [sp, #112]
     304:	stp	x8, x9, [sp, #128]
     308:	str	x6, [sp, #144]
     30c:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     310:	ldr	x4, [x19, #24]
     314:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     318:	add	x2, x2, #0x0
     31c:	mov	x3, #0xe00000000           	// #60129542144
     320:	add	x1, sp, #0xa0
     324:	mov	x0, x24
     328:	stp	x4, x21, [sp, #160]
     32c:	str	w27, [sp, #256]
     330:	str	x25, [sp, #264]
     334:	str	w26, [sp, #272]
     338:	str	w22, [sp, #276]
     33c:	stp	x3, x2, [sp, #296]
     340:	str	wzr, [sp, #576]
     344:	str	wzr, [sp, #584]
     348:	str	xzr, [sp, #592]
     34c:	str	xzr, [sp, #600]
     350:	str	wzr, [sp, #624]
     354:	str	xzr, [sp, #632]
     358:	str	xzr, [sp, #640]
     35c:	str	xzr, [sp, #664]
     360:	str	wzr, [sp, #672]
     364:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     368:	ldr	x1, [x19, #16]
     36c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     370:	mov	x0, x24
     374:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     378:	mov	x0, x23
     37c:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     380:	ldp	x19, x20, [sp]
     384:	ldp	x21, x22, [sp, #16]
     388:	ldp	x23, x24, [sp, #32]
     38c:	ldp	x25, x26, [sp, #48]
     390:	ldr	x27, [sp, #64]
     394:	ldr	x30, [sp, #72]
     398:	add	sp, sp, #0x2b0
     39c:	ret

00000000000003a0 <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE>:
     3a0:	sub	sp, sp, #0x2b0
     3a4:	stp	x19, x20, [sp]
     3a8:	mov	x19, x0
     3ac:	mov	x20, x2
     3b0:	add	x0, x0, #0xc
     3b4:	stp	x21, x22, [sp, #16]
     3b8:	mov	x21, x1
     3bc:	mov	w1, #0xffffffff            	// #-1
     3c0:	stp	x23, x24, [sp, #32]
     3c4:	stp	x25, x26, [sp, #48]
     3c8:	str	x30, [sp, #72]
     3cc:	ldxr	w26, [x0]
     3d0:	stxr	w2, w1, [x0]
     3d4:	cbnz	w2, 3cc <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE+0x2c>
     3d8:	dmb	ish
     3dc:	ldrb	w0, [x20]
     3e0:	ldr	w25, [x19, #8]
     3e4:	ldr	x24, [x19]
     3e8:	cbnz	w0, 428 <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE+0x88>
     3ec:	cmp	w26, w1
     3f0:	b.ne	410 <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE+0x70>  // b.any
     3f4:	ldp	x19, x20, [sp]
     3f8:	ldp	x21, x22, [sp, #16]
     3fc:	ldp	x23, x24, [sp, #32]
     400:	ldp	x25, x26, [sp, #48]
     404:	ldr	x30, [sp, #72]
     408:	add	sp, sp, #0x2b0
     40c:	ret
     410:	ldr	x1, [x20, #8]
     414:	mov	x2, x24
     418:	mov	w0, #0x11                  	// #17
     41c:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     420:	tst	w0, #0xff
     424:	b.ne	3f4 <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE+0x54>  // b.any
     428:	str	x27, [sp, #64]
     42c:	mov	w27, #0x1                   	// #1
     430:	str	w27, [sp, #256]
     434:	add	x22, sp, #0xb0
     438:	str	x24, [sp, #264]
     43c:	mov	x0, x22
     440:	str	w25, [sp, #272]
     444:	add	x2, sp, #0x50
     448:	str	w26, [sp, #276]
     44c:	add	x1, sp, #0x80
     450:	ldp	x6, x7, [sp, #256]
     454:	stp	x6, x7, [sp, #80]
     458:	mov	w3, #0x11                  	// #17
     45c:	ldp	x6, x7, [x20]
     460:	add	x23, sp, #0x100
     464:	ldp	x4, x5, [sp, #272]
     468:	stp	x4, x5, [sp, #96]
     46c:	ldr	x4, [x20, #16]
     470:	stp	x6, x7, [sp, #128]
     474:	ldr	x8, [sp, #288]
     478:	str	x8, [sp, #112]
     47c:	str	x4, [sp, #144]
     480:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     484:	str	w27, [sp, #256]
     488:	ldr	x4, [x19, #16]
     48c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     490:	add	x2, x2, #0x0
     494:	add	x1, sp, #0xa0
     498:	mov	x3, #0x1100000000          	// #73014444032
     49c:	mov	x0, x23
     4a0:	stp	x4, x21, [sp, #160]
     4a4:	str	x24, [sp, #264]
     4a8:	str	w25, [sp, #272]
     4ac:	str	w26, [sp, #276]
     4b0:	stp	x3, x2, [sp, #296]
     4b4:	str	wzr, [sp, #576]
     4b8:	str	wzr, [sp, #584]
     4bc:	str	xzr, [sp, #592]
     4c0:	str	xzr, [sp, #600]
     4c4:	str	wzr, [sp, #624]
     4c8:	str	xzr, [sp, #632]
     4cc:	str	xzr, [sp, #640]
     4d0:	str	xzr, [sp, #664]
     4d4:	str	wzr, [sp, #672]
     4d8:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     4dc:	mov	x0, x23
     4e0:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     4e4:	mov	x0, x22
     4e8:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     4ec:	ldp	x19, x20, [sp]
     4f0:	ldp	x21, x22, [sp, #16]
     4f4:	ldp	x23, x24, [sp, #32]
     4f8:	ldp	x25, x26, [sp, #48]
     4fc:	ldr	x27, [sp, #64]
     500:	ldr	x30, [sp, #72]
     504:	add	sp, sp, #0x2b0
     508:	ret
     50c:	nop

0000000000000510 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE>:
     510:	sub	sp, sp, #0x2c0
     514:	stp	x19, x20, [sp]
     518:	mov	x20, x3
     51c:	mov	x19, x0
     520:	add	x0, x0, #0xc
     524:	stp	x21, x22, [sp, #16]
     528:	stp	x23, x24, [sp, #32]
     52c:	stp	x25, x26, [sp, #48]
     530:	ldrb	w25, [x3]
     534:	mov	w3, #0xffffffff            	// #-1
     538:	ldr	x26, [x20, #8]
     53c:	str	x30, [sp, #64]
     540:	ldxr	w21, [x0]
     544:	stxr	w4, w3, [x0]
     548:	cbnz	w4, 540 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x30>
     54c:	dmb	ish
     550:	ldr	x0, [x19, #16]
     554:	stp	x0, x1, [sp, #160]
     558:	ldr	w22, [x19, #8]
     55c:	stp	x0, x2, [sp, #176]
     560:	ldrh	w1, [x0]
     564:	ldr	x23, [x19]
     568:	cbnz	w1, 598 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x88>
     56c:	ldrh	w0, [x0, #2]
     570:	tbz	w0, #0, 6ac <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x19c>
     574:	add	x0, sp, #0xb0
     578:	bl	0 <_ZNK7__ubsan5Value12getSIntValueEv>
     57c:	cmn	x0, #0x1
     580:	b.ne	58c <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x7c>  // b.any
     584:	cmn	x1, #0x1
     588:	b.eq	70c <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x1fc>  // b.none
     58c:	ldr	x0, [x19, #16]
     590:	ldrh	w0, [x0]
     594:	cbz	w0, 6ac <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x19c>
     598:	mov	w24, #0x8                   	// #8
     59c:	cbnz	w25, 6b4 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x1a4>
     5a0:	cmn	w21, #0x1
     5a4:	b.ne	5c4 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0xb4>  // b.any
     5a8:	ldp	x19, x20, [sp]
     5ac:	ldp	x21, x22, [sp, #16]
     5b0:	ldp	x23, x24, [sp, #32]
     5b4:	ldp	x25, x26, [sp, #48]
     5b8:	ldr	x30, [sp, #64]
     5bc:	add	sp, sp, #0x2c0
     5c0:	ret
     5c4:	mov	x1, x26
     5c8:	mov	x2, x23
     5cc:	mov	w0, w24
     5d0:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     5d4:	tst	w0, #0xff
     5d8:	b.ne	5a8 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x98>  // b.any
     5dc:	mov	w0, #0x1                   	// #1
     5e0:	str	w0, [sp, #272]
     5e4:	str	x23, [sp, #280]
     5e8:	add	x25, sp, #0xc0
     5ec:	str	w22, [sp, #288]
     5f0:	mov	w3, w24
     5f4:	str	w21, [sp, #292]
     5f8:	add	x2, sp, #0x50
     5fc:	ldp	x6, x7, [sp, #272]
     600:	stp	x6, x7, [sp, #80]
     604:	add	x1, sp, #0x80
     608:	ldp	x6, x7, [x20]
     60c:	mov	x0, x25
     610:	ldp	x4, x5, [sp, #288]
     614:	stp	x4, x5, [sp, #96]
     618:	ldr	x4, [x20, #16]
     61c:	stp	x6, x7, [sp, #128]
     620:	ldr	x8, [sp, #304]
     624:	str	x8, [sp, #112]
     628:	str	x4, [sp, #144]
     62c:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     630:	cmp	w24, #0x5
     634:	b.eq	768 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x258>  // b.none
     638:	mov	w2, #0x1                   	// #1
     63c:	str	w2, [sp, #272]
     640:	add	x2, sp, #0x130
     644:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     648:	add	x1, x1, #0x0
     64c:	str	x23, [sp, #280]
     650:	add	x0, sp, #0x110
     654:	stp	w22, w21, [x2, #-16]
     658:	stp	wzr, w24, [x2, #8]
     65c:	str	x1, [sp, #320]
     660:	str	wzr, [sp, #592]
     664:	str	wzr, [sp, #600]
     668:	str	xzr, [sp, #608]
     66c:	str	xzr, [sp, #616]
     670:	str	wzr, [sp, #640]
     674:	str	xzr, [sp, #648]
     678:	str	xzr, [sp, #656]
     67c:	str	xzr, [sp, #680]
     680:	str	wzr, [sp, #688]
     684:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     688:	mov	x0, x25
     68c:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     690:	ldp	x19, x20, [sp]
     694:	ldp	x21, x22, [sp, #16]
     698:	ldp	x23, x24, [sp, #32]
     69c:	ldp	x25, x26, [sp, #48]
     6a0:	ldr	x30, [sp, #64]
     6a4:	add	sp, sp, #0x2c0
     6a8:	ret
     6ac:	mov	w24, #0x7                   	// #7
     6b0:	cbz	w25, 5a0 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x90>
     6b4:	mov	w0, #0x1                   	// #1
     6b8:	str	w0, [sp, #272]
     6bc:	str	x23, [sp, #280]
     6c0:	add	x25, sp, #0xc0
     6c4:	str	w22, [sp, #288]
     6c8:	mov	w3, w24
     6cc:	str	w21, [sp, #292]
     6d0:	add	x2, sp, #0x50
     6d4:	ldp	x6, x7, [sp, #272]
     6d8:	stp	x6, x7, [sp, #80]
     6dc:	add	x1, sp, #0x80
     6e0:	ldp	x6, x7, [x20]
     6e4:	mov	x0, x25
     6e8:	ldp	x4, x5, [sp, #288]
     6ec:	stp	x4, x5, [sp, #96]
     6f0:	ldr	x4, [x20, #16]
     6f4:	stp	x6, x7, [sp, #128]
     6f8:	ldr	x8, [sp, #304]
     6fc:	str	x8, [sp, #112]
     700:	str	x4, [sp, #144]
     704:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     708:	b	638 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x128>
     70c:	mov	w24, #0x5                   	// #5
     710:	cbz	w25, 5a0 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x90>
     714:	mov	w0, #0x1                   	// #1
     718:	str	w0, [sp, #272]
     71c:	str	x23, [sp, #280]
     720:	add	x25, sp, #0xc0
     724:	str	w22, [sp, #288]
     728:	add	x2, sp, #0x50
     72c:	str	w21, [sp, #292]
     730:	add	x1, sp, #0x80
     734:	ldp	x6, x7, [sp, #272]
     738:	stp	x6, x7, [sp, #80]
     73c:	mov	x0, x25
     740:	ldp	x6, x7, [x20]
     744:	mov	w3, #0x5                   	// #5
     748:	ldp	x4, x5, [sp, #288]
     74c:	stp	x4, x5, [sp, #96]
     750:	ldr	x4, [x20, #16]
     754:	stp	x6, x7, [sp, #128]
     758:	ldr	x8, [sp, #304]
     75c:	str	x8, [sp, #112]
     760:	str	x4, [sp, #144]
     764:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     768:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     76c:	add	x2, x2, #0x0
     770:	mov	w4, #0x1                   	// #1
     774:	mov	x3, #0x500000000           	// #21474836480
     778:	add	x20, sp, #0x110
     77c:	add	x1, sp, #0xa0
     780:	mov	x0, x20
     784:	str	w4, [sp, #272]
     788:	str	x23, [sp, #280]
     78c:	str	w22, [sp, #288]
     790:	str	w21, [sp, #292]
     794:	stp	x3, x2, [sp, #312]
     798:	str	wzr, [sp, #592]
     79c:	str	wzr, [sp, #600]
     7a0:	str	xzr, [sp, #608]
     7a4:	str	xzr, [sp, #616]
     7a8:	str	wzr, [sp, #640]
     7ac:	str	xzr, [sp, #648]
     7b0:	str	xzr, [sp, #656]
     7b4:	str	xzr, [sp, #680]
     7b8:	str	wzr, [sp, #688]
     7bc:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     7c0:	ldr	x1, [x19, #16]
     7c4:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     7c8:	mov	x0, x20
     7cc:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     7d0:	b	688 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE+0x178>
     7d4:	nop

00000000000007d8 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE>:
     7d8:	sub	sp, sp, #0x2c0
     7dc:	stp	x19, x20, [sp]
     7e0:	mov	x19, x0
     7e4:	mov	x20, x2
     7e8:	add	x0, x0, #0xc
     7ec:	stp	x21, x22, [sp, #16]
     7f0:	mov	x21, x1
     7f4:	mov	w1, #0xffffffff            	// #-1
     7f8:	stp	x23, x24, [sp, #32]
     7fc:	stp	x27, x28, [sp, #64]
     800:	str	x30, [sp, #80]
     804:	ldxr	w22, [x0]
     808:	stxr	w2, w1, [x0]
     80c:	cbnz	w2, 804 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0x2c>
     810:	dmb	ish
     814:	ldr	x0, [x19, #16]
     818:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     81c:	ldr	w24, [x19, #8]
     820:	add	x1, x1, #0x0
     824:	add	x0, x0, #0x4
     828:	ldr	x23, [x19]
     82c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     830:	cbnz	w0, 968 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0x190>
     834:	mov	w27, #0x13                  	// #19
     838:	ldrb	w0, [x20]
     83c:	cbnz	w0, 87c <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0xa4>
     840:	cmn	w22, #0x1
     844:	b.ne	864 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0x8c>  // b.any
     848:	ldp	x19, x20, [sp]
     84c:	ldp	x21, x22, [sp, #16]
     850:	ldp	x23, x24, [sp, #32]
     854:	ldp	x27, x28, [sp, #64]
     858:	ldr	x30, [sp, #80]
     85c:	add	sp, sp, #0x2c0
     860:	ret
     864:	ldr	x1, [x20, #8]
     868:	mov	x2, x23
     86c:	mov	w0, w27
     870:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     874:	tst	w0, #0xff
     878:	b.ne	848 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0x70>  // b.any
     87c:	mov	w28, #0x1                   	// #1
     880:	str	w28, [sp, #272]
     884:	str	x23, [sp, #280]
     888:	mov	w3, w27
     88c:	str	w24, [sp, #288]
     890:	add	x2, sp, #0x60
     894:	str	w22, [sp, #292]
     898:	add	x1, sp, #0x90
     89c:	ldp	x6, x7, [sp, #272]
     8a0:	stp	x25, x26, [sp, #48]
     8a4:	add	x25, sp, #0xc0
     8a8:	ldr	x8, [x20, #16]
     8ac:	stp	x6, x7, [sp, #96]
     8b0:	mov	x0, x25
     8b4:	ldp	x6, x7, [x20]
     8b8:	stp	x6, x7, [sp, #144]
     8bc:	add	x26, sp, #0x110
     8c0:	ldp	x4, x5, [sp, #288]
     8c4:	stp	x4, x5, [sp, #112]
     8c8:	ldr	x9, [sp, #304]
     8cc:	str	x9, [sp, #128]
     8d0:	str	x8, [sp, #160]
     8d4:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     8d8:	str	w28, [sp, #272]
     8dc:	ldr	x3, [x19, #16]
     8e0:	stp	x3, x21, [sp, #176]
     8e4:	add	x3, sp, #0x130
     8e8:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     8ec:	add	x2, x2, #0x0
     8f0:	str	x23, [sp, #280]
     8f4:	add	x1, sp, #0xb0
     8f8:	stp	w24, w22, [x3, #-16]
     8fc:	mov	x0, x26
     900:	stp	wzr, w27, [x3, #8]
     904:	str	x2, [sp, #320]
     908:	str	wzr, [sp, #592]
     90c:	str	wzr, [sp, #600]
     910:	str	xzr, [sp, #608]
     914:	str	xzr, [sp, #616]
     918:	str	wzr, [sp, #640]
     91c:	str	xzr, [sp, #648]
     920:	str	xzr, [sp, #656]
     924:	str	xzr, [sp, #680]
     928:	str	wzr, [sp, #688]
     92c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     930:	ldr	x1, [x19, #16]
     934:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     938:	mov	x0, x26
     93c:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     940:	mov	x0, x25
     944:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     948:	ldp	x19, x20, [sp]
     94c:	ldp	x21, x22, [sp, #16]
     950:	ldp	x23, x24, [sp, #32]
     954:	ldp	x25, x26, [sp, #48]
     958:	ldp	x27, x28, [sp, #64]
     95c:	ldr	x30, [sp, #80]
     960:	add	sp, sp, #0x2c0
     964:	ret
     968:	ldr	x0, [x19, #16]
     96c:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     970:	mov	x2, #0x6                   	// #6
     974:	add	x1, x1, #0x0
     978:	add	x0, x0, #0x4
     97c:	mov	w27, #0x14                  	// #20
     980:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
     984:	cbnz	w0, 838 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0x60>
     988:	b	834 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE+0x5c>
     98c:	nop

0000000000000990 <_ZL23handleMissingReturnImplPN7__ubsan15UnreachableDataENS_13ReportOptionsE.constprop.0>:
     990:	sub	sp, sp, #0x280
     994:	mov	x4, x1
     998:	add	x2, sp, #0x30
     99c:	add	x1, sp, #0x60
     9a0:	mov	w3, #0x10                  	// #16
     9a4:	stp	x19, x20, [sp]
     9a8:	mov	x19, x0
     9ac:	add	x20, sp, #0x80
     9b0:	ldr	x0, [x0]
     9b4:	stp	x21, x22, [sp, #16]
     9b8:	ldr	d0, [x19, #8]
     9bc:	mov	w22, #0x1                   	// #1
     9c0:	str	w22, [sp, #208]
     9c4:	str	x0, [sp, #216]
     9c8:	mov	x0, x20
     9cc:	str	d0, [sp, #224]
     9d0:	add	x21, sp, #0xd0
     9d4:	ldp	x6, x7, [sp, #224]
     9d8:	stp	x6, x7, [sp, #64]
     9dc:	ldp	x6, x7, [x4]
     9e0:	str	x30, [sp, #32]
     9e4:	ldp	x8, x9, [sp, #208]
     9e8:	stp	x8, x9, [sp, #48]
     9ec:	ldr	x4, [x4, #16]
     9f0:	stp	x6, x7, [sp, #96]
     9f4:	ldr	x5, [sp, #240]
     9f8:	str	x5, [sp, #80]
     9fc:	str	x4, [sp, #112]
     a00:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     a04:	str	w22, [sp, #208]
     a08:	ldr	x3, [x19]
     a0c:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     a10:	add	x1, x1, #0x0
     a14:	ldr	d0, [x19, #8]
     a18:	mov	x2, #0x1000000000          	// #68719476736
     a1c:	mov	x0, x21
     a20:	str	x3, [sp, #216]
     a24:	str	d0, [sp, #224]
     a28:	stp	x2, x1, [sp, #248]
     a2c:	str	wzr, [sp, #528]
     a30:	str	wzr, [sp, #536]
     a34:	str	xzr, [sp, #544]
     a38:	str	xzr, [sp, #552]
     a3c:	str	wzr, [sp, #576]
     a40:	str	xzr, [sp, #584]
     a44:	str	xzr, [sp, #592]
     a48:	str	xzr, [sp, #616]
     a4c:	str	wzr, [sp, #624]
     a50:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     a54:	mov	x0, x20
     a58:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     a5c:	ldp	x19, x20, [sp]
     a60:	ldp	x21, x22, [sp, #16]
     a64:	ldr	x30, [sp, #32]
     a68:	add	sp, sp, #0x280
     a6c:	ret

0000000000000a70 <_ZL28handleBuiltinUnreachableImplPN7__ubsan15UnreachableDataENS_13ReportOptionsE.constprop.0>:
     a70:	sub	sp, sp, #0x280
     a74:	mov	x4, x1
     a78:	add	x2, sp, #0x30
     a7c:	add	x1, sp, #0x60
     a80:	mov	w3, #0xf                   	// #15
     a84:	stp	x19, x20, [sp]
     a88:	mov	x19, x0
     a8c:	add	x20, sp, #0x80
     a90:	ldr	x0, [x0]
     a94:	stp	x21, x22, [sp, #16]
     a98:	ldr	d0, [x19, #8]
     a9c:	mov	w22, #0x1                   	// #1
     aa0:	str	w22, [sp, #208]
     aa4:	str	x0, [sp, #216]
     aa8:	mov	x0, x20
     aac:	str	d0, [sp, #224]
     ab0:	add	x21, sp, #0xd0
     ab4:	ldp	x6, x7, [sp, #224]
     ab8:	stp	x6, x7, [sp, #64]
     abc:	ldp	x6, x7, [x4]
     ac0:	str	x30, [sp, #32]
     ac4:	ldp	x8, x9, [sp, #208]
     ac8:	stp	x8, x9, [sp, #48]
     acc:	ldr	x4, [x4, #16]
     ad0:	stp	x6, x7, [sp, #96]
     ad4:	ldr	x5, [sp, #240]
     ad8:	str	x5, [sp, #80]
     adc:	str	x4, [sp, #112]
     ae0:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     ae4:	str	w22, [sp, #208]
     ae8:	ldr	x3, [x19]
     aec:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     af0:	add	x1, x1, #0x0
     af4:	ldr	d0, [x19, #8]
     af8:	mov	x2, #0xf00000000           	// #64424509440
     afc:	mov	x0, x21
     b00:	str	x3, [sp, #216]
     b04:	str	d0, [sp, #224]
     b08:	stp	x2, x1, [sp, #248]
     b0c:	str	wzr, [sp, #528]
     b10:	str	wzr, [sp, #536]
     b14:	str	xzr, [sp, #544]
     b18:	str	xzr, [sp, #552]
     b1c:	str	wzr, [sp, #576]
     b20:	str	xzr, [sp, #584]
     b24:	str	xzr, [sp, #592]
     b28:	str	xzr, [sp, #616]
     b2c:	str	wzr, [sp, #624]
     b30:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     b34:	mov	x0, x20
     b38:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     b3c:	ldp	x19, x20, [sp]
     b40:	ldp	x21, x22, [sp, #16]
     b44:	ldr	x30, [sp, #32]
     b48:	add	sp, sp, #0x280
     b4c:	ret

0000000000000b50 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE>:
     b50:	sub	sp, sp, #0x300
     b54:	stp	x19, x20, [sp]
     b58:	mov	x20, x2
     b5c:	mov	x19, x0
     b60:	stp	x21, x22, [sp, #16]
     b64:	add	x22, sp, #0x150
     b68:	mov	x2, #0x8                   	// #8
     b6c:	mov	x21, x1
     b70:	mov	x1, x0
     b74:	mov	x0, x22
     b78:	stp	x23, x24, [sp, #32]
     b7c:	stp	x25, x26, [sp, #48]
     b80:	stp	x27, x28, [sp, #64]
     b84:	ldr	x23, [x20, #8]
     b88:	str	x30, [sp, #80]
     b8c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     b90:	ldr	x0, [sp, #336]
     b94:	ldrb	w1, [x0]
     b98:	ldrb	w0, [x0, #1]
     b9c:	add	w2, w1, w0
     ba0:	cmp	w2, #0x1
     ba4:	b.ls	c08 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0xb8>  // b.plast
     ba8:	cmp	w1, #0xff
     bac:	b.eq	c08 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0xb8>  // b.none
     bb0:	cmp	w0, #0xff
     bb4:	b.eq	c08 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0xb8>  // b.none
     bb8:	add	x0, x19, #0xc
     bbc:	mov	w1, #0xffffffff            	// #-1
     bc0:	ldxr	w26, [x0]
     bc4:	stxr	w2, w1, [x0]
     bc8:	cbnz	w2, bc0 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0x70>
     bcc:	dmb	ish
     bd0:	ldrb	w0, [x20]
     bd4:	ldr	w28, [x19, #8]
     bd8:	ldr	x27, [x19]
     bdc:	cbnz	w0, d48 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0x1f8>
     be0:	cmn	w26, #0x1
     be4:	b.ne	d2c <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0x1dc>  // b.any
     be8:	ldp	x19, x20, [sp]
     bec:	ldp	x21, x22, [sp, #16]
     bf0:	ldp	x23, x24, [sp, #32]
     bf4:	ldp	x25, x26, [sp, #48]
     bf8:	ldp	x27, x28, [sp, #64]
     bfc:	ldr	x30, [sp, #80]
     c00:	add	sp, sp, #0x300
     c04:	ret
     c08:	cbz	x23, d58 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0x208>
     c0c:	sub	x0, x23, #0x4
     c10:	bl	0 <_ZN7__ubsan21getSymbolizedLocationEm>
     c14:	ldp	x23, x9, [x19]
     c18:	mov	x25, x0
     c1c:	mov	x24, x0
     c20:	mov	w26, #0x0                   	// #0
     c24:	mov	w28, #0x0                   	// #0
     c28:	mov	x27, #0x0                   	// #0
     c2c:	mov	w8, #0x3                   	// #3
     c30:	str	w8, [sp, #216]
     c34:	add	x19, sp, #0x100
     c38:	str	x27, [sp, #224]
     c3c:	add	x2, sp, #0x70
     c40:	stp	w28, w26, [sp, #232]
     c44:	mov	x0, x19
     c48:	ldp	x6, x7, [sp, #216]
     c4c:	stp	x6, x7, [sp, #112]
     c50:	add	x1, sp, #0xa0
     c54:	ldp	x6, x7, [x20]
     c58:	mov	w3, #0x12                  	// #18
     c5c:	ldp	x4, x5, [sp, #232]
     c60:	stp	x4, x5, [sp, #128]
     c64:	ldr	x4, [x20, #16]
     c68:	str	w8, [sp, #100]
     c6c:	str	x9, [sp, #104]
     c70:	str	x24, [sp, #144]
     c74:	stp	x6, x7, [sp, #160]
     c78:	str	x4, [sp, #176]
     c7c:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     c80:	ldr	w8, [sp, #100]
     c84:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     c88:	add	x2, x2, #0x0
     c8c:	mov	x3, #0x1200000000          	// #77309411328
     c90:	add	x1, sp, #0xc8
     c94:	mov	x0, x22
     c98:	stp	x23, x21, [sp, #200]
     c9c:	str	w8, [sp, #336]
     ca0:	str	x27, [sp, #344]
     ca4:	str	w28, [sp, #352]
     ca8:	str	w26, [sp, #356]
     cac:	stp	x24, x3, [sp, #368]
     cb0:	str	x2, [sp, #384]
     cb4:	str	wzr, [sp, #656]
     cb8:	str	wzr, [sp, #664]
     cbc:	str	xzr, [sp, #672]
     cc0:	str	xzr, [sp, #680]
     cc4:	str	wzr, [sp, #704]
     cc8:	str	xzr, [sp, #712]
     ccc:	str	xzr, [sp, #720]
     cd0:	str	xzr, [sp, #744]
     cd4:	str	wzr, [sp, #752]
     cd8:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     cdc:	mov	x1, x23
     ce0:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     ce4:	ldr	x9, [sp, #104]
     ce8:	mov	x1, x9
     cec:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     cf0:	mov	x0, x22
     cf4:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     cf8:	mov	x0, x19
     cfc:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     d00:	cbz	x25, be8 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0x98>
     d04:	mov	x0, x25
     d08:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
     d0c:	ldp	x19, x20, [sp]
     d10:	ldp	x21, x22, [sp, #16]
     d14:	ldp	x23, x24, [sp, #32]
     d18:	ldp	x25, x26, [sp, #48]
     d1c:	ldp	x27, x28, [sp, #64]
     d20:	ldr	x30, [sp, #80]
     d24:	add	sp, sp, #0x300
     d28:	ret
     d2c:	mov	x1, x23
     d30:	mov	x2, x27
     d34:	mov	w0, #0x12                  	// #18
     d38:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     d3c:	tst	w0, #0xff
     d40:	b.ne	be8 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0x98>  // b.any
     d44:	nop
     d48:	mov	w8, #0x1                   	// #1
     d4c:	mov	x25, #0x0                   	// #0
     d50:	ldp	x23, x9, [x19, #16]
     d54:	b	c30 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE+0xe0>
     d58:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     d5c:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     d60:	add	x2, x2, #0x0
     d64:	add	x0, x0, #0x0
     d68:	mov	x4, #0x0                   	// #0
     d6c:	mov	x3, #0x0                   	// #0
     d70:	mov	w1, #0x2b                  	// #43
     d74:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000d78 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE>:
     d78:	sub	sp, sp, #0x2c0
     d7c:	stp	x25, x26, [sp, #48]
     d80:	mov	x25, x3
     d84:	stp	x19, x20, [sp]
     d88:	mov	x19, x0
     d8c:	add	x0, x0, #0xc
     d90:	stp	x21, x22, [sp, #16]
     d94:	stp	x23, x24, [sp, #32]
     d98:	ldrb	w24, [x3]
     d9c:	mov	w3, #0xffffffff            	// #-1
     da0:	ldr	x26, [x25, #8]
     da4:	str	x30, [sp, #72]
     da8:	ldxr	w21, [x0]
     dac:	stxr	w4, w3, [x0]
     db0:	cbnz	w4, da8 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x30>
     db4:	dmb	ish
     db8:	ldr	x0, [x19, #24]
     dbc:	stp	x1, x0, [sp, #168]
     dc0:	ldr	w23, [x19, #8]
     dc4:	ldr	x1, [x19, #16]
     dc8:	str	x1, [sp, #160]
     dcc:	ldrh	w1, [x0]
     dd0:	str	x2, [sp, #184]
     dd4:	ldr	x22, [x19]
     dd8:	cbnz	w1, de8 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x70>
     ddc:	ldrh	w0, [x0, #2]
     de0:	tbnz	w0, #0, f5c <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x1e4>
     de4:	nop
     de8:	add	x20, sp, #0xb0
     dec:	mov	x0, x20
     df0:	bl	0 <_ZNK7__ubsan5Value19getPositiveIntValueEv>
     df4:	ldr	x2, [x19, #16]
     df8:	ldrh	w3, [x2]
     dfc:	cbnz	w3, 1178 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x400>
     e00:	ldrh	w2, [x2, #2]
     e04:	mov	w3, #0x1                   	// #1
     e08:	asr	w2, w2, #1
     e0c:	lsl	w2, w3, w2
     e10:	cbz	x1, f74 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x1fc>
     e14:	cbnz	w24, fd4 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x25c>
     e18:	str	x27, [sp, #64]
     e1c:	mov	w27, #0xd                   	// #13
     e20:	cmn	w21, #0x1
     e24:	b.eq	1158 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x3e0>  // b.none
     e28:	mov	x1, x26
     e2c:	mov	x2, x22
     e30:	mov	w0, w27
     e34:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
     e38:	tst	w0, #0xff
     e3c:	b.ne	1158 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x3e0>  // b.any
     e40:	mov	w0, #0x1                   	// #1
     e44:	str	w0, [sp, #272]
     e48:	str	x22, [sp, #280]
     e4c:	add	x24, sp, #0xc0
     e50:	str	w23, [sp, #288]
     e54:	mov	w3, w27
     e58:	str	w21, [sp, #292]
     e5c:	add	x2, sp, #0x50
     e60:	ldp	x6, x7, [sp, #272]
     e64:	stp	x6, x7, [sp, #80]
     e68:	add	x1, sp, #0x80
     e6c:	ldp	x6, x7, [x25]
     e70:	mov	x0, x24
     e74:	ldp	x4, x5, [sp, #288]
     e78:	stp	x4, x5, [sp, #96]
     e7c:	ldr	x4, [x25, #16]
     e80:	stp	x6, x7, [sp, #128]
     e84:	ldr	x8, [sp, #304]
     e88:	str	x8, [sp, #112]
     e8c:	str	x4, [sp, #144]
     e90:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     e94:	cmp	w27, #0xd
     e98:	ldr	x27, [sp, #64]
     e9c:	b.eq	1028 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x2b0>  // b.none
     ea0:	ldr	x0, [sp, #160]
     ea4:	add	x26, sp, #0xa0
     ea8:	ldrh	w1, [x0]
     eac:	cbnz	w1, ec8 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x150>
     eb0:	ldrh	w0, [x0, #2]
     eb4:	add	x26, sp, #0xa0
     eb8:	tbz	w0, #0, ec8 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x150>
     ebc:	mov	x0, x26
     ec0:	bl	0 <_ZNK7__ubsan5Value12getSIntValueEv>
     ec4:	tbnz	x1, #63, 119c <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x424>
     ec8:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
     ecc:	add	x2, x2, #0x0
     ed0:	mov	w4, #0x1                   	// #1
     ed4:	mov	x3, #0xc00000000           	// #51539607552
     ed8:	add	x25, sp, #0x110
     edc:	mov	x1, x26
     ee0:	mov	x0, x25
     ee4:	str	w4, [sp, #272]
     ee8:	str	x22, [sp, #280]
     eec:	str	w23, [sp, #288]
     ef0:	str	w21, [sp, #292]
     ef4:	stp	x3, x2, [sp, #312]
     ef8:	str	wzr, [sp, #592]
     efc:	str	wzr, [sp, #600]
     f00:	str	xzr, [sp, #608]
     f04:	str	xzr, [sp, #616]
     f08:	str	wzr, [sp, #640]
     f0c:	str	xzr, [sp, #648]
     f10:	str	xzr, [sp, #656]
     f14:	str	xzr, [sp, #680]
     f18:	str	wzr, [sp, #688]
     f1c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     f20:	mov	x1, x20
     f24:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
     f28:	ldr	x1, [x19, #16]
     f2c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
     f30:	mov	x0, x25
     f34:	bl	0 <_ZN7__ubsan4DiagD1Ev>
     f38:	mov	x0, x24
     f3c:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
     f40:	ldp	x19, x20, [sp]
     f44:	ldp	x21, x22, [sp, #16]
     f48:	ldp	x23, x24, [sp, #32]
     f4c:	ldp	x25, x26, [sp, #48]
     f50:	ldr	x30, [sp, #72]
     f54:	add	sp, sp, #0x2c0
     f58:	ret
     f5c:	add	x20, sp, #0xb0
     f60:	mov	x0, x20
     f64:	bl	0 <_ZNK7__ubsan5Value12getSIntValueEv>
     f68:	tbz	x1, #63, dec <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x74>
     f6c:	cbz	w24, e18 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0xa0>
     f70:	b	fd4 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x25c>
     f74:	cmp	x2, x0
     f78:	b.ls	e14 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x9c>  // b.plast
     f7c:	cbz	w24, 11e0 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x468>
     f80:	str	w3, [sp, #272]
     f84:	add	x24, sp, #0xc0
     f88:	str	x22, [sp, #280]
     f8c:	mov	x0, x24
     f90:	str	w23, [sp, #288]
     f94:	add	x2, sp, #0x50
     f98:	str	w21, [sp, #292]
     f9c:	add	x1, sp, #0x80
     fa0:	ldp	x6, x7, [sp, #272]
     fa4:	stp	x6, x7, [sp, #80]
     fa8:	mov	w3, #0xc                   	// #12
     fac:	ldp	x6, x7, [x25]
     fb0:	ldp	x4, x5, [sp, #288]
     fb4:	stp	x4, x5, [sp, #96]
     fb8:	ldr	x4, [x25, #16]
     fbc:	stp	x6, x7, [sp, #128]
     fc0:	ldr	x8, [sp, #304]
     fc4:	str	x8, [sp, #112]
     fc8:	str	x4, [sp, #144]
     fcc:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
     fd0:	b	ea0 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x128>
     fd4:	mov	w0, #0x1                   	// #1
     fd8:	str	w0, [sp, #272]
     fdc:	str	x22, [sp, #280]
     fe0:	add	x24, sp, #0xc0
     fe4:	str	w23, [sp, #288]
     fe8:	add	x2, sp, #0x50
     fec:	str	w21, [sp, #292]
     ff0:	add	x1, sp, #0x80
     ff4:	ldp	x6, x7, [sp, #272]
     ff8:	stp	x6, x7, [sp, #80]
     ffc:	mov	x0, x24
    1000:	ldp	x6, x7, [x25]
    1004:	mov	w3, #0xd                   	// #13
    1008:	ldp	x4, x5, [sp, #288]
    100c:	stp	x4, x5, [sp, #96]
    1010:	ldr	x4, [x25, #16]
    1014:	stp	x6, x7, [sp, #128]
    1018:	ldr	x8, [sp, #304]
    101c:	str	x8, [sp, #112]
    1020:	str	x4, [sp, #144]
    1024:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    1028:	ldr	x0, [sp, #176]
    102c:	ldrh	w1, [x0]
    1030:	cbnz	w1, 10ac <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x334>
    1034:	ldrh	w0, [x0, #2]
    1038:	tbz	w0, #0, 10ac <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x334>
    103c:	mov	x0, x20
    1040:	bl	0 <_ZNK7__ubsan5Value12getSIntValueEv>
    1044:	tbz	x1, #63, 10ac <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x334>
    1048:	add	x19, sp, #0x110
    104c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1050:	mov	x1, x20
    1054:	mov	x0, x19
    1058:	add	x2, x2, #0x0
    105c:	mov	w4, #0x1                   	// #1
    1060:	mov	x3, #0xd00000000           	// #55834574848
    1064:	str	w4, [sp, #272]
    1068:	str	x22, [sp, #280]
    106c:	str	w23, [sp, #288]
    1070:	str	w21, [sp, #292]
    1074:	stp	x3, x2, [sp, #312]
    1078:	str	wzr, [sp, #592]
    107c:	str	wzr, [sp, #600]
    1080:	str	xzr, [sp, #608]
    1084:	str	xzr, [sp, #616]
    1088:	str	wzr, [sp, #640]
    108c:	str	xzr, [sp, #648]
    1090:	str	xzr, [sp, #656]
    1094:	str	xzr, [sp, #680]
    1098:	str	wzr, [sp, #688]
    109c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
    10a0:	mov	x0, x19
    10a4:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    10a8:	b	f38 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x1c0>
    10ac:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    10b0:	add	x2, x2, #0x0
    10b4:	mov	x3, #0xd00000000           	// #55834574848
    10b8:	add	x25, sp, #0x110
    10bc:	mov	x1, x20
    10c0:	mov	x0, x25
    10c4:	mov	w20, #0x1                   	// #1
    10c8:	str	w20, [sp, #272]
    10cc:	str	x22, [sp, #280]
    10d0:	str	w23, [sp, #288]
    10d4:	str	w21, [sp, #292]
    10d8:	stp	x3, x2, [sp, #312]
    10dc:	str	wzr, [sp, #592]
    10e0:	str	wzr, [sp, #600]
    10e4:	str	xzr, [sp, #608]
    10e8:	str	xzr, [sp, #616]
    10ec:	str	wzr, [sp, #640]
    10f0:	str	xzr, [sp, #648]
    10f4:	str	xzr, [sp, #656]
    10f8:	str	xzr, [sp, #680]
    10fc:	str	wzr, [sp, #688]
    1100:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
    1104:	ldr	x1, [x19, #16]
    1108:	ldrh	w3, [x1]
    110c:	cbnz	w3, 1178 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x400>
    1110:	ldrh	w4, [x1, #2]
    1114:	ldr	w3, [x0, #320]
    1118:	asr	w4, w4, #1
    111c:	cmp	w3, #0x8
    1120:	lsl	w20, w20, w4
    1124:	b.eq	11bc <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x444>  // b.none
    1128:	ubfiz	x4, x3, #5, #32
    112c:	add	w3, w3, #0x1
    1130:	add	x4, x4, #0x40
    1134:	str	w3, [x0, #320]
    1138:	add	x3, x0, x4
    113c:	mov	w5, #0x2                   	// #2
    1140:	str	w5, [x0, x4]
    1144:	stp	x20, xzr, [x3, #16]
    1148:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    114c:	mov	x0, x25
    1150:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1154:	b	f38 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x1c0>
    1158:	ldp	x19, x20, [sp]
    115c:	ldp	x21, x22, [sp, #16]
    1160:	ldp	x23, x24, [sp, #32]
    1164:	ldp	x25, x26, [sp, #48]
    1168:	ldr	x27, [sp, #64]
    116c:	ldr	x30, [sp, #72]
    1170:	add	sp, sp, #0x2c0
    1174:	ret
    1178:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    117c:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1180:	add	x2, x2, #0x0
    1184:	add	x0, x0, #0x0
    1188:	mov	x4, #0x0                   	// #0
    118c:	mov	x3, #0x0                   	// #0
    1190:	mov	w1, #0x7b                  	// #123
    1194:	str	x27, [sp, #64]
    1198:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    119c:	add	x19, sp, #0x110
    11a0:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    11a4:	mov	x1, x26
    11a8:	mov	x0, x19
    11ac:	add	x2, x2, #0x0
    11b0:	mov	w4, #0x1                   	// #1
    11b4:	mov	x3, #0xc00000000           	// #51539607552
    11b8:	b	1064 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0x2ec>
    11bc:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    11c0:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    11c4:	add	x2, x2, #0x0
    11c8:	add	x0, x0, #0x0
    11cc:	mov	x4, #0x0                   	// #0
    11d0:	mov	x3, #0x0                   	// #0
    11d4:	mov	w1, #0xbf                  	// #191
    11d8:	str	x27, [sp, #64]
    11dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11e0:	str	x27, [sp, #64]
    11e4:	mov	w27, #0xc                   	// #12
    11e8:	b	e20 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE+0xa8>
    11ec:	nop

00000000000011f0 <_ZL20handleInvalidBuiltinPN7__ubsan18InvalidBuiltinDataENS_13ReportOptionsE.constprop.0>:
    11f0:	sub	sp, sp, #0x290
    11f4:	mov	x4, x1
    11f8:	mov	w1, #0xffffffff            	// #-1
    11fc:	stp	x19, x20, [sp]
    1200:	mov	x19, x0
    1204:	add	x0, x0, #0xc
    1208:	stp	x21, x22, [sp, #16]
    120c:	stp	x23, x24, [sp, #32]
    1210:	str	x30, [sp, #48]
    1214:	ldxr	w22, [x0]
    1218:	stxr	w2, w1, [x0]
    121c:	cbnz	w2, 1214 <_ZL20handleInvalidBuiltinPN7__ubsan18InvalidBuiltinDataENS_13ReportOptionsE.constprop.0+0x24>
    1220:	dmb	ish
    1224:	ldr	x24, [x19]
    1228:	mov	w21, #0x1                   	// #1
    122c:	ldr	w23, [x19, #8]
    1230:	add	x20, sp, #0x90
    1234:	str	w21, [sp, #224]
    1238:	mov	x0, x20
    123c:	str	x24, [sp, #232]
    1240:	add	x2, sp, #0x40
    1244:	stp	w23, w22, [sp, #240]
    1248:	add	x1, sp, #0x70
    124c:	ldp	x6, x7, [sp, #224]
    1250:	stp	x6, x7, [sp, #64]
    1254:	mov	w3, #0x9                   	// #9
    1258:	ldp	x6, x7, [sp, #240]
    125c:	stp	x6, x7, [sp, #80]
    1260:	ldp	x6, x7, [x4]
    1264:	stp	x6, x7, [sp, #112]
    1268:	ldr	x4, [x4, #16]
    126c:	str	x4, [sp, #128]
    1270:	ldr	x5, [sp, #256]
    1274:	str	x5, [sp, #96]
    1278:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    127c:	str	w21, [sp, #224]
    1280:	ldrb	w2, [x19, #16]
    1284:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1288:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    128c:	add	x0, x0, #0x0
    1290:	cmp	w2, #0x0
    1294:	add	x1, x1, #0x0
    1298:	csel	x1, x1, x0, eq  // eq = none
    129c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    12a0:	add	x2, x2, #0x0
    12a4:	mov	x3, #0x900000000           	// #38654705664
    12a8:	add	x0, sp, #0xe0
    12ac:	str	x24, [sp, #232]
    12b0:	stp	w23, w22, [sp, #240]
    12b4:	stp	x3, x2, [sp, #264]
    12b8:	str	wzr, [sp, #288]
    12bc:	str	x1, [sp, #304]
    12c0:	str	w21, [sp, #544]
    12c4:	str	wzr, [sp, #552]
    12c8:	str	xzr, [sp, #560]
    12cc:	str	xzr, [sp, #568]
    12d0:	str	wzr, [sp, #592]
    12d4:	str	xzr, [sp, #600]
    12d8:	str	xzr, [sp, #608]
    12dc:	str	xzr, [sp, #632]
    12e0:	str	wzr, [sp, #640]
    12e4:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    12e8:	mov	x0, x20
    12ec:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    12f0:	ldp	x19, x20, [sp]
    12f4:	ldp	x21, x22, [sp, #16]
    12f8:	ldp	x23, x24, [sp, #32]
    12fc:	ldr	x30, [sp, #48]
    1300:	add	sp, sp, #0x290
    1304:	ret

0000000000001308 <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE>:
    1308:	sub	sp, sp, #0x2a0
    130c:	stp	x19, x20, [sp]
    1310:	mov	x19, x0
    1314:	mov	x20, x2
    1318:	add	x0, x0, #0xc
    131c:	stp	x21, x22, [sp, #16]
    1320:	mov	x21, x1
    1324:	mov	w1, #0xffffffff            	// #-1
    1328:	stp	x23, x24, [sp, #32]
    132c:	stp	x25, x26, [sp, #48]
    1330:	stp	x27, x30, [sp, #64]
    1334:	ldxr	w23, [x0]
    1338:	stxr	w2, w1, [x0]
    133c:	cbnz	w2, 1334 <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE+0x2c>
    1340:	dmb	ish
    1344:	ldrb	w0, [x20]
    1348:	ldr	w27, [x19, #8]
    134c:	ldr	x26, [x19]
    1350:	cbnz	w0, 1390 <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE+0x88>
    1354:	cmp	w23, w1
    1358:	b.ne	1378 <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE+0x70>  // b.any
    135c:	ldp	x19, x20, [sp]
    1360:	ldp	x21, x22, [sp, #16]
    1364:	ldp	x23, x24, [sp, #32]
    1368:	ldp	x25, x26, [sp, #48]
    136c:	ldp	x27, x30, [sp, #64]
    1370:	add	sp, sp, #0x2a0
    1374:	ret
    1378:	ldr	x1, [x20, #8]
    137c:	mov	x2, x26
    1380:	mov	w0, #0x15                  	// #21
    1384:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    1388:	tst	w0, #0xff
    138c:	b.ne	135c <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE+0x54>  // b.any
    1390:	mov	w25, #0x1                   	// #1
    1394:	str	w25, [sp, #240]
    1398:	str	x26, [sp, #248]
    139c:	add	x2, sp, #0x50
    13a0:	str	w27, [sp, #256]
    13a4:	add	x1, sp, #0x80
    13a8:	str	w23, [sp, #260]
    13ac:	add	x24, sp, #0xa0
    13b0:	ldp	x4, x5, [sp, #240]
    13b4:	stp	x4, x5, [sp, #80]
    13b8:	mov	w3, #0x15                  	// #21
    13bc:	ldp	x4, x5, [sp, #256]
    13c0:	stp	x4, x5, [sp, #96]
    13c4:	mov	x0, x24
    13c8:	ldr	x4, [sp, #272]
    13cc:	str	x4, [sp, #112]
    13d0:	ldp	x4, x5, [x20]
    13d4:	stp	x4, x5, [sp, #128]
    13d8:	add	x22, sp, #0xf0
    13dc:	ldr	x4, [x20, #16]
    13e0:	str	x4, [sp, #144]
    13e4:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    13e8:	mov	x0, x21
    13ec:	bl	0 <_ZN7__ubsan21getSymbolizedLocationEm>
    13f0:	mov	x20, x0
    13f4:	adrp	x3, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    13f8:	ldr	x1, [x19, #16]
    13fc:	add	x3, x3, #0x0
    1400:	ldr	x19, [x20, #40]
    1404:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1408:	add	x2, x2, #0x0
    140c:	mov	x4, #0x1500000000          	// #90194313216
    1410:	cmp	x19, #0x0
    1414:	mov	x0, x22
    1418:	csel	x19, x3, x19, eq  // eq = none
    141c:	str	w25, [sp, #240]
    1420:	str	x26, [sp, #248]
    1424:	str	w27, [sp, #256]
    1428:	str	w23, [sp, #260]
    142c:	stp	x4, x2, [sp, #280]
    1430:	str	wzr, [sp, #304]
    1434:	str	x19, [sp, #320]
    1438:	str	w25, [sp, #560]
    143c:	str	wzr, [sp, #568]
    1440:	str	xzr, [sp, #576]
    1444:	str	xzr, [sp, #584]
    1448:	str	wzr, [sp, #608]
    144c:	str	xzr, [sp, #616]
    1450:	str	xzr, [sp, #624]
    1454:	str	xzr, [sp, #648]
    1458:	str	wzr, [sp, #656]
    145c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    1460:	mov	x0, x22
    1464:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1468:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    146c:	mov	x2, #0x1                   	// #1
    1470:	add	x1, x1, #0x0
    1474:	mov	w3, #0x3                   	// #3
    1478:	movk	x2, #0x15, lsl #32
    147c:	mov	x0, x22
    1480:	str	w3, [sp, #240]
    1484:	str	xzr, [sp, #248]
    1488:	str	xzr, [sp, #256]
    148c:	stp	x20, x2, [sp, #272]
    1490:	str	x1, [sp, #288]
    1494:	str	wzr, [sp, #304]
    1498:	str	x19, [sp, #320]
    149c:	str	w25, [sp, #560]
    14a0:	str	wzr, [sp, #568]
    14a4:	str	xzr, [sp, #576]
    14a8:	str	xzr, [sp, #584]
    14ac:	str	wzr, [sp, #608]
    14b0:	str	xzr, [sp, #616]
    14b4:	str	xzr, [sp, #624]
    14b8:	str	xzr, [sp, #648]
    14bc:	str	wzr, [sp, #656]
    14c0:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    14c4:	mov	x0, x20
    14c8:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
    14cc:	mov	x0, x24
    14d0:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    14d4:	ldp	x19, x20, [sp]
    14d8:	ldp	x21, x22, [sp, #16]
    14dc:	ldp	x23, x24, [sp, #32]
    14e0:	ldp	x25, x26, [sp, #48]
    14e4:	ldp	x27, x30, [sp, #64]
    14e8:	add	sp, sp, #0x2a0
    14ec:	ret

00000000000014f0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>:
    14f0:	sub	sp, sp, #0x2e0
    14f4:	str	x2, [sp, #104]
    14f8:	ldrb	w2, [x5]
    14fc:	stp	x19, x20, [sp]
    1500:	mov	x19, x0
    1504:	mov	x20, x5
    1508:	add	x0, x0, #0xc
    150c:	stp	x21, x22, [sp, #16]
    1510:	mov	x21, x1
    1514:	stp	x23, x24, [sp, #32]
    1518:	stp	x25, x26, [sp, #48]
    151c:	stp	x27, x28, [sp, #64]
    1520:	stp	x3, x4, [sp, #192]
    1524:	mov	w3, #0xffffffff            	// #-1
    1528:	ldr	x1, [x5, #8]
    152c:	str	x30, [sp, #80]
    1530:	ldxr	w25, [x0]
    1534:	stxr	w4, w3, [x0]
    1538:	cbnz	w4, 1530 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x40>
    153c:	dmb	ish
    1540:	ldr	x0, [x19, #16]
    1544:	mov	w23, w2
    1548:	ldr	w28, [x19, #8]
    154c:	ldr	x27, [x19]
    1550:	ldrh	w3, [x0]
    1554:	cbnz	w3, 1594 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0xa4>
    1558:	ldrh	w0, [x0, #2]
    155c:	tbz	w0, #0, 1594 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0xa4>
    1560:	cbnz	w2, 1708 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x218>
    1564:	mov	w23, #0x1                   	// #1
    1568:	mov	w26, #0x5                   	// #5
    156c:	cmn	w25, #0x1
    1570:	b.ne	16ec <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x1fc>  // b.any
    1574:	ldp	x19, x20, [sp]
    1578:	ldp	x21, x22, [sp, #16]
    157c:	ldp	x23, x24, [sp, #32]
    1580:	ldp	x25, x26, [sp, #48]
    1584:	ldp	x27, x28, [sp, #64]
    1588:	ldr	x30, [sp, #80]
    158c:	add	sp, sp, #0x2e0
    1590:	ret
    1594:	mov	w26, #0x6                   	// #6
    1598:	cbz	w2, 156c <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x7c>
    159c:	adrp	x0, 0 <_ZN7__ubsan11ubsan_flagsE>
    15a0:	ldr	x0, [x0]
    15a4:	ldrb	w23, [x0, #17]
    15a8:	cbnz	w23, 1574 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x84>
    15ac:	mov	w9, #0x1                   	// #1
    15b0:	str	w9, [sp, #304]
    15b4:	str	x27, [sp, #312]
    15b8:	add	x22, sp, #0xe0
    15bc:	str	w28, [sp, #320]
    15c0:	mov	x0, x22
    15c4:	str	w25, [sp, #324]
    15c8:	mov	w3, w26
    15cc:	ldp	x6, x7, [sp, #304]
    15d0:	stp	x6, x7, [sp, #112]
    15d4:	add	x2, sp, #0x70
    15d8:	ldp	x4, x5, [sp, #320]
    15dc:	add	x1, sp, #0xa0
    15e0:	ldr	x6, [x20, #16]
    15e4:	stp	x4, x5, [sp, #128]
    15e8:	add	x24, sp, #0x130
    15ec:	ldp	x4, x5, [x20]
    15f0:	stp	x4, x5, [sp, #160]
    15f4:	ldr	x10, [sp, #336]
    15f8:	str	x10, [sp, #144]
    15fc:	str	x6, [sp, #176]
    1600:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    1604:	str	x27, [sp, #312]
    1608:	ldr	x4, [x19, #16]
    160c:	stp	x4, x21, [sp, #208]
    1610:	add	x4, sp, #0x150
    1614:	cmp	w23, #0x0
    1618:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    161c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1620:	add	x0, x0, #0x0
    1624:	add	x2, x2, #0x0
    1628:	mov	w9, #0x1                   	// #1
    162c:	csel	x2, x2, x0, ne  // ne = any
    1630:	adrp	x3, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1634:	add	x3, x3, #0x0
    1638:	str	w9, [sp, #304]
    163c:	stp	w28, w25, [x4, #-16]
    1640:	add	x1, sp, #0xd0
    1644:	stp	wzr, w26, [x4, #8]
    1648:	mov	x0, x24
    164c:	str	x3, [sp, #352]
    1650:	str	wzr, [sp, #368]
    1654:	str	x2, [sp, #384]
    1658:	str	w9, [sp, #624]
    165c:	str	wzr, [sp, #632]
    1660:	str	xzr, [sp, #640]
    1664:	str	xzr, [sp, #648]
    1668:	str	wzr, [sp, #672]
    166c:	str	xzr, [sp, #680]
    1670:	str	xzr, [sp, #688]
    1674:	str	xzr, [sp, #712]
    1678:	str	wzr, [sp, #720]
    167c:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
    1680:	ldr	w1, [x0, #320]
    1684:	cmp	w1, #0x8
    1688:	b.eq	1710 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x220>  // b.none
    168c:	ubfiz	x3, x1, #5, #32
    1690:	add	w1, w1, #0x1
    1694:	add	x3, x3, #0x40
    1698:	str	w1, [x0, #320]
    169c:	add	x4, x0, x3
    16a0:	add	x1, sp, #0xc0
    16a4:	ldr	x2, [sp, #104]
    16a8:	str	wzr, [x0, x3]
    16ac:	str	x2, [x4, #16]
    16b0:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
    16b4:	ldr	x1, [x19, #16]
    16b8:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    16bc:	mov	x0, x24
    16c0:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    16c4:	mov	x0, x22
    16c8:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    16cc:	ldp	x19, x20, [sp]
    16d0:	ldp	x21, x22, [sp, #16]
    16d4:	ldp	x23, x24, [sp, #32]
    16d8:	ldp	x25, x26, [sp, #48]
    16dc:	ldp	x27, x28, [sp, #64]
    16e0:	ldr	x30, [sp, #80]
    16e4:	add	sp, sp, #0x2e0
    16e8:	ret
    16ec:	mov	x2, x27
    16f0:	mov	w0, w26
    16f4:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    16f8:	tst	w0, #0xff
    16fc:	b.ne	1574 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0x84>  // b.any
    1700:	cbz	w23, 159c <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0xac>
    1704:	b	15ac <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0xbc>
    1708:	mov	w26, #0x5                   	// #5
    170c:	b	15ac <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE+0xbc>
    1710:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1714:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1718:	add	x2, x2, #0x0
    171c:	add	x0, x0, #0x0
    1720:	mov	x4, #0x0                   	// #0
    1724:	mov	x3, #0x0                   	// #0
    1728:	mov	w1, #0xbf                  	// #191
    172c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000001730 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb>:
    1730:	sub	sp, sp, #0x2a0
    1734:	stp	x19, x20, [sp]
    1738:	mov	x19, x0
    173c:	add	x0, x0, #0xc
    1740:	stp	x23, x24, [sp, #32]
    1744:	and	w23, w2, #0xff
    1748:	mov	x20, x1
    174c:	mov	w1, #0xffffffff            	// #-1
    1750:	stp	x21, x22, [sp, #16]
    1754:	stp	x25, x26, [sp, #48]
    1758:	str	x30, [sp, #72]
    175c:	ldxr	w21, [x0]
    1760:	stxr	w2, w1, [x0]
    1764:	cbnz	w2, 175c <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb+0x2c>
    1768:	dmb	ish
    176c:	ldrb	w0, [x20]
    1770:	ldr	w25, [x19, #8]
    1774:	ldr	x22, [x19]
    1778:	cbnz	w0, 17b8 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb+0x88>
    177c:	cmp	w21, w1
    1780:	b.ne	17a0 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb+0x70>  // b.any
    1784:	ldp	x19, x20, [sp]
    1788:	ldp	x21, x22, [sp, #16]
    178c:	ldp	x23, x24, [sp, #32]
    1790:	ldp	x25, x26, [sp, #48]
    1794:	ldr	x30, [sp, #72]
    1798:	add	sp, sp, #0x2a0
    179c:	ret
    17a0:	ldr	x1, [x20, #8]
    17a4:	mov	x2, x22
    17a8:	mov	w0, #0x17                  	// #23
    17ac:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    17b0:	tst	w0, #0xff
    17b4:	b.ne	1784 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb+0x54>  // b.any
    17b8:	mov	w26, #0x1                   	// #1
    17bc:	str	w26, [sp, #240]
    17c0:	str	x22, [sp, #248]
    17c4:	add	x2, sp, #0x50
    17c8:	str	w25, [sp, #256]
    17cc:	add	x1, sp, #0x80
    17d0:	str	w21, [sp, #260]
    17d4:	mov	w3, #0x17                  	// #23
    17d8:	ldp	x6, x7, [sp, #240]
    17dc:	stp	x6, x7, [sp, #80]
    17e0:	add	x24, sp, #0xf0
    17e4:	ldp	x6, x7, [x20]
    17e8:	str	x27, [sp, #64]
    17ec:	ldp	x4, x5, [sp, #256]
    17f0:	stp	x4, x5, [sp, #96]
    17f4:	add	x27, sp, #0xa0
    17f8:	ldr	x4, [x20, #16]
    17fc:	mov	x0, x27
    1800:	ldr	x8, [sp, #272]
    1804:	str	x8, [sp, #112]
    1808:	stp	x6, x7, [sp, #128]
    180c:	str	x4, [sp, #144]
    1810:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    1814:	ldrsw	x2, [x19, #32]
    1818:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    181c:	add	x1, x1, #0x0
    1820:	mov	x4, #0x1700000000          	// #98784247808
    1824:	mov	w3, #0x2                   	// #2
    1828:	mov	x0, x24
    182c:	str	w26, [sp, #240]
    1830:	str	x22, [sp, #248]
    1834:	str	w25, [sp, #256]
    1838:	str	w21, [sp, #260]
    183c:	stp	x4, x1, [sp, #280]
    1840:	str	w3, [sp, #304]
    1844:	stp	x2, xzr, [sp, #320]
    1848:	str	w26, [sp, #560]
    184c:	str	wzr, [sp, #568]
    1850:	str	xzr, [sp, #576]
    1854:	str	xzr, [sp, #584]
    1858:	str	wzr, [sp, #608]
    185c:	str	xzr, [sp, #616]
    1860:	str	xzr, [sp, #624]
    1864:	str	xzr, [sp, #648]
    1868:	str	wzr, [sp, #656]
    186c:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1870:	ldr	x2, [x19, #16]
    1874:	cbz	x2, 18e8 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb+0x1b8>
    1878:	cmp	w23, #0x0
    187c:	adrp	x3, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1880:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1884:	add	x3, x3, #0x0
    1888:	add	x1, x1, #0x0
    188c:	mov	x4, #0x1                   	// #1
    1890:	csel	x1, x1, x3, ne  // ne = any
    1894:	adrp	x3, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1898:	add	x3, x3, #0x0
    189c:	ldr	d0, [x19, #24]
    18a0:	movk	x4, #0x17, lsl #32
    18a4:	mov	x0, x24
    18a8:	str	w26, [sp, #240]
    18ac:	str	x2, [sp, #248]
    18b0:	str	d0, [sp, #256]
    18b4:	stp	x4, x3, [sp, #280]
    18b8:	str	wzr, [sp, #304]
    18bc:	str	x1, [sp, #320]
    18c0:	str	w26, [sp, #560]
    18c4:	str	wzr, [sp, #568]
    18c8:	str	xzr, [sp, #576]
    18cc:	str	xzr, [sp, #584]
    18d0:	str	wzr, [sp, #608]
    18d4:	str	xzr, [sp, #616]
    18d8:	str	xzr, [sp, #624]
    18dc:	str	xzr, [sp, #648]
    18e0:	str	wzr, [sp, #656]
    18e4:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    18e8:	mov	x0, x27
    18ec:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    18f0:	ldp	x19, x20, [sp]
    18f4:	ldp	x21, x22, [sp, #16]
    18f8:	ldp	x23, x24, [sp, #32]
    18fc:	ldp	x25, x26, [sp, #48]
    1900:	ldr	x27, [sp, #64]
    1904:	ldr	x30, [sp, #72]
    1908:	add	sp, sp, #0x2a0
    190c:	ret

0000000000001910 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb>:
    1910:	sub	sp, sp, #0x2a0
    1914:	stp	x19, x20, [sp]
    1918:	stp	x21, x22, [sp, #16]
    191c:	stp	x23, x24, [sp, #32]
    1920:	stp	x25, x26, [sp, #48]
    1924:	str	x30, [sp, #72]
    1928:	cbz	x1, 1ae8 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb+0x1d8>
    192c:	mov	x19, x2
    1930:	and	w22, w3, #0xff
    1934:	add	x2, x1, #0xc
    1938:	mov	x25, x0
    193c:	mov	w0, #0xffffffff            	// #-1
    1940:	ldxr	w20, [x2]
    1944:	stxr	w3, w0, [x2]
    1948:	cbnz	w3, 1940 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb+0x30>
    194c:	dmb	ish
    1950:	ldrb	w0, [x19]
    1954:	ldr	w24, [x1, #8]
    1958:	ldr	x21, [x1]
    195c:	cbnz	w0, 19a0 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb+0x90>
    1960:	cmn	w20, #0x1
    1964:	b.ne	1984 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb+0x74>  // b.any
    1968:	ldp	x19, x20, [sp]
    196c:	ldp	x21, x22, [sp, #16]
    1970:	ldp	x23, x24, [sp, #32]
    1974:	ldp	x25, x26, [sp, #48]
    1978:	ldr	x30, [sp, #72]
    197c:	add	sp, sp, #0x2a0
    1980:	ret
    1984:	ldr	x1, [x19, #8]
    1988:	mov	x2, x21
    198c:	mov	w0, #0x16                  	// #22
    1990:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    1994:	tst	w0, #0xff
    1998:	b.ne	1968 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb+0x58>  // b.any
    199c:	nop
    19a0:	mov	w26, #0x1                   	// #1
    19a4:	str	w26, [sp, #240]
    19a8:	str	x21, [sp, #248]
    19ac:	mov	w3, #0x16                  	// #22
    19b0:	str	w24, [sp, #256]
    19b4:	add	x2, sp, #0x50
    19b8:	str	w20, [sp, #260]
    19bc:	add	x1, sp, #0x80
    19c0:	ldp	x6, x7, [sp, #240]
    19c4:	stp	x6, x7, [sp, #80]
    19c8:	add	x23, sp, #0xf0
    19cc:	ldp	x6, x7, [x19]
    19d0:	str	x27, [sp, #64]
    19d4:	ldp	x4, x5, [sp, #256]
    19d8:	stp	x4, x5, [sp, #96]
    19dc:	add	x27, sp, #0xa0
    19e0:	ldr	x4, [x19, #16]
    19e4:	mov	x0, x27
    19e8:	ldr	x8, [sp, #272]
    19ec:	str	x8, [sp, #112]
    19f0:	stp	x6, x7, [sp, #128]
    19f4:	str	x4, [sp, #144]
    19f8:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    19fc:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1a00:	add	x1, x1, #0x0
    1a04:	mov	x2, #0x1600000000          	// #94489280512
    1a08:	mov	x0, x23
    1a0c:	str	w26, [sp, #240]
    1a10:	str	x21, [sp, #248]
    1a14:	str	w24, [sp, #256]
    1a18:	str	w20, [sp, #260]
    1a1c:	stp	x2, x1, [sp, #280]
    1a20:	str	wzr, [sp, #560]
    1a24:	str	wzr, [sp, #568]
    1a28:	str	xzr, [sp, #576]
    1a2c:	str	xzr, [sp, #584]
    1a30:	str	wzr, [sp, #608]
    1a34:	str	xzr, [sp, #616]
    1a38:	str	xzr, [sp, #624]
    1a3c:	str	xzr, [sp, #648]
    1a40:	str	wzr, [sp, #656]
    1a44:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1a48:	ldr	x3, [x25]
    1a4c:	cbz	x3, 1ac0 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb+0x1b0>
    1a50:	cmp	w22, #0x0
    1a54:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1a58:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1a5c:	add	x2, x2, #0x0
    1a60:	add	x1, x1, #0x0
    1a64:	mov	x4, #0x1                   	// #1
    1a68:	csel	x1, x1, x2, ne  // ne = any
    1a6c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1a70:	add	x2, x2, #0x0
    1a74:	ldr	d0, [x25, #8]
    1a78:	movk	x4, #0x16, lsl #32
    1a7c:	mov	x0, x23
    1a80:	str	w26, [sp, #240]
    1a84:	str	x3, [sp, #248]
    1a88:	str	d0, [sp, #256]
    1a8c:	stp	x4, x2, [sp, #280]
    1a90:	str	wzr, [sp, #304]
    1a94:	str	x1, [sp, #320]
    1a98:	str	w26, [sp, #560]
    1a9c:	str	wzr, [sp, #568]
    1aa0:	str	xzr, [sp, #576]
    1aa4:	str	xzr, [sp, #584]
    1aa8:	str	wzr, [sp, #608]
    1aac:	str	xzr, [sp, #616]
    1ab0:	str	xzr, [sp, #624]
    1ab4:	str	xzr, [sp, #648]
    1ab8:	str	wzr, [sp, #656]
    1abc:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1ac0:	mov	x0, x27
    1ac4:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    1ac8:	ldp	x19, x20, [sp]
    1acc:	ldp	x21, x22, [sp, #16]
    1ad0:	ldp	x23, x24, [sp, #32]
    1ad4:	ldp	x25, x26, [sp, #48]
    1ad8:	ldr	x27, [sp, #64]
    1adc:	ldr	x30, [sp, #72]
    1ae0:	add	sp, sp, #0x2a0
    1ae4:	ret
    1ae8:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1aec:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1af0:	add	x2, x2, #0x0
    1af4:	add	x0, x0, #0x0
    1af8:	mov	x4, #0x0                   	// #0
    1afc:	mov	x3, #0x0                   	// #0
    1b00:	mov	w1, #0x23f                 	// #575
    1b04:	str	x27, [sp, #64]
    1b08:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1b0c:	nop

0000000000001b10 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm>:
    1b10:	sub	sp, sp, #0x2f0
    1b14:	stp	x19, x20, [sp]
    1b18:	mov	x19, x1
    1b1c:	add	x1, x0, #0xc
    1b20:	stp	x21, x22, [sp, #16]
    1b24:	stp	x23, x24, [sp, #32]
    1b28:	stp	x25, x26, [sp, #48]
    1b2c:	stp	x27, x28, [sp, #64]
    1b30:	str	x30, [sp, #80]
    1b34:	stp	x2, x3, [sp, #96]
    1b38:	mov	w2, #0xffffffff            	// #-1
    1b3c:	ldxr	w21, [x1]
    1b40:	stxr	w3, w2, [x1]
    1b44:	cbnz	w3, 1b3c <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x2c>
    1b48:	dmb	ish
    1b4c:	ldp	x26, x28, [x0, #16]
    1b50:	mov	w23, #0x0                   	// #0
    1b54:	ldr	w20, [x0, #8]
    1b58:	ldr	x10, [x0]
    1b5c:	ldrh	w1, [x26]
    1b60:	cbnz	w1, 1b6c <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x5c>
    1b64:	ldrh	w8, [x26, #2]
    1b68:	and	w23, w8, #0x1
    1b6c:	ldrh	w1, [x28]
    1b70:	cbnz	w1, 1b7c <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x6c>
    1b74:	ldrh	w1, [x28, #2]
    1b78:	tbnz	w1, #0, 1dec <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x2dc>
    1b7c:	mov	w1, w23
    1b80:	str	wzr, [sp, #116]
    1b84:	ldrb	w0, [x0, #32]
    1b88:	mov	w25, #0xa                   	// #10
    1b8c:	cmp	w0, #0x1
    1b90:	b.eq	1ba8 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x98>  // b.none
    1b94:	cmp	w0, #0x2
    1b98:	mov	w25, #0xb                   	// #11
    1b9c:	b.eq	1ba8 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x98>  // b.none
    1ba0:	mov	w25, #0x0                   	// #0
    1ba4:	cbz	w0, 1df8 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x2e8>
    1ba8:	ldrb	w0, [x19]
    1bac:	cbnz	w0, 1bf8 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0xe8>
    1bb0:	cmn	w21, #0x1
    1bb4:	b.ne	1bd8 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0xc8>  // b.any
    1bb8:	ldp	x19, x20, [sp]
    1bbc:	ldp	x21, x22, [sp, #16]
    1bc0:	ldp	x23, x24, [sp, #32]
    1bc4:	ldp	x25, x26, [sp, #48]
    1bc8:	ldp	x27, x28, [sp, #64]
    1bcc:	ldr	x30, [sp, #80]
    1bd0:	add	sp, sp, #0x2f0
    1bd4:	ret
    1bd8:	ldr	x1, [x19, #8]
    1bdc:	mov	x2, x10
    1be0:	mov	w0, w25
    1be4:	str	x10, [sp, #120]
    1be8:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    1bec:	tst	w0, #0xff
    1bf0:	ldr	x10, [sp, #120]
    1bf4:	b.ne	1bb8 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0xa8>  // b.any
    1bf8:	mov	w22, #0x1                   	// #1
    1bfc:	str	w22, [sp, #320]
    1c00:	str	x10, [sp, #328]
    1c04:	add	x24, sp, #0xf0
    1c08:	str	w20, [sp, #336]
    1c0c:	mov	w3, w25
    1c10:	str	w21, [sp, #340]
    1c14:	add	x2, sp, #0x80
    1c18:	ldp	x6, x7, [sp, #320]
    1c1c:	stp	x6, x7, [sp, #128]
    1c20:	mov	x0, x24
    1c24:	ldp	x4, x5, [sp, #336]
    1c28:	stp	x4, x5, [sp, #144]
    1c2c:	add	x1, sp, #0xb0
    1c30:	ldp	x4, x5, [x19]
    1c34:	str	x10, [sp, #120]
    1c38:	ldr	x6, [sp, #352]
    1c3c:	str	x6, [sp, #160]
    1c40:	ldr	x6, [x19, #16]
    1c44:	stp	x4, x5, [sp, #176]
    1c48:	add	x27, sp, #0x140
    1c4c:	str	x6, [sp, #192]
    1c50:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    1c54:	str	w22, [sp, #320]
    1c58:	add	x3, sp, #0x160
    1c5c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1c60:	ldr	x10, [sp, #120]
    1c64:	add	x2, x2, #0x0
    1c68:	str	x10, [sp, #328]
    1c6c:	mov	x1, x26
    1c70:	stp	w20, w21, [x3, #-16]
    1c74:	mov	x0, x27
    1c78:	stp	wzr, w25, [x3, #8]
    1c7c:	str	x2, [sp, #368]
    1c80:	str	wzr, [sp, #640]
    1c84:	str	wzr, [sp, #648]
    1c88:	str	xzr, [sp, #656]
    1c8c:	str	xzr, [sp, #664]
    1c90:	str	wzr, [sp, #688]
    1c94:	str	xzr, [sp, #696]
    1c98:	str	xzr, [sp, #704]
    1c9c:	str	xzr, [sp, #728]
    1ca0:	str	wzr, [sp, #736]
    1ca4:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    1ca8:	ldr	x2, [sp, #96]
    1cac:	add	x1, sp, #0xd0
    1cb0:	stp	x26, x2, [sp, #208]
    1cb4:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
    1cb8:	ldrh	w1, [x26]
    1cbc:	cbnz	w1, 1e08 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x2f8>
    1cc0:	ldrh	w1, [x26, #2]
    1cc4:	ldr	w4, [x0, #320]
    1cc8:	asr	w1, w1, #1
    1ccc:	cmp	w4, #0x8
    1cd0:	lsl	w5, w22, w1
    1cd4:	b.eq	1e28 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x318>  // b.none
    1cd8:	ubfiz	x3, x4, #5, #32
    1cdc:	add	w1, w4, #0x1
    1ce0:	add	x3, x3, #0x40
    1ce4:	str	w1, [x0, #320]
    1ce8:	add	x6, x0, x3
    1cec:	mov	w19, #0x2                   	// #2
    1cf0:	cmp	w23, #0x0
    1cf4:	adrp	x20, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1cf8:	str	w19, [x0, x3]
    1cfc:	add	x20, x20, #0x0
    1d00:	stp	x5, xzr, [x6, #16]
    1d04:	adrp	x25, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1d08:	add	x25, x25, #0x0
    1d0c:	csel	x5, x25, x20, ne  // ne = any
    1d10:	cmp	w1, #0x8
    1d14:	b.eq	1e28 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x318>  // b.none
    1d18:	ubfiz	x1, x1, #5, #32
    1d1c:	add	w4, w4, #0x2
    1d20:	add	x3, x1, #0x40
    1d24:	str	w4, [x0, #320]
    1d28:	add	x4, x0, x3
    1d2c:	mov	x1, x28
    1d30:	str	wzr, [x0, x3]
    1d34:	str	x5, [x4, #16]
    1d38:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    1d3c:	ldr	x2, [sp, #104]
    1d40:	add	x1, sp, #0xe0
    1d44:	stp	x28, x2, [sp, #224]
    1d48:	bl	0 <_ZN7__ubsan4DiaglsERKNS_5ValueE>
    1d4c:	mov	x1, x0
    1d50:	ldrh	w2, [x28]
    1d54:	cbnz	w2, 1e08 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x2f8>
    1d58:	ldrh	w0, [x28, #2]
    1d5c:	ldr	w3, [x1, #320]
    1d60:	asr	w0, w0, #1
    1d64:	cmp	w3, #0x8
    1d68:	lsl	w22, w22, w0
    1d6c:	b.eq	1e28 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x318>  // b.none
    1d70:	ubfiz	x2, x3, #5, #32
    1d74:	add	w0, w3, #0x1
    1d78:	add	x2, x2, #0x40
    1d7c:	str	w0, [x1, #320]
    1d80:	add	x5, x1, x2
    1d84:	ldr	w4, [sp, #116]
    1d88:	str	w19, [x1, x2]
    1d8c:	cmp	w4, #0x0
    1d90:	stp	x22, xzr, [x5, #16]
    1d94:	csel	x4, x25, x20, ne  // ne = any
    1d98:	cmp	w0, #0x8
    1d9c:	b.eq	1e28 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x318>  // b.none
    1da0:	ubfiz	x0, x0, #5, #32
    1da4:	add	w3, w3, #0x2
    1da8:	add	x2, x0, #0x40
    1dac:	str	w3, [x1, #320]
    1db0:	add	x3, x1, x2
    1db4:	mov	x0, x27
    1db8:	str	wzr, [x1, x2]
    1dbc:	str	x4, [x3, #16]
    1dc0:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1dc4:	mov	x0, x24
    1dc8:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    1dcc:	ldp	x19, x20, [sp]
    1dd0:	ldp	x21, x22, [sp, #16]
    1dd4:	ldp	x23, x24, [sp, #32]
    1dd8:	ldp	x25, x26, [sp, #48]
    1ddc:	ldp	x27, x28, [sp, #64]
    1de0:	ldr	x30, [sp, #80]
    1de4:	add	sp, sp, #0x2f0
    1de8:	ret
    1dec:	mov	w1, #0x1                   	// #1
    1df0:	str	w1, [sp, #116]
    1df4:	b	1b84 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x74>
    1df8:	cmp	w1, #0x0
    1dfc:	cset	w25, ne  // ne = any
    1e00:	add	w25, w25, #0xa
    1e04:	b	1ba8 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm+0x98>
    1e08:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1e0c:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1e10:	add	x2, x2, #0x0
    1e14:	add	x0, x0, #0x0
    1e18:	mov	x4, #0x0                   	// #0
    1e1c:	mov	x3, #0x0                   	// #0
    1e20:	mov	w1, #0x7b                  	// #123
    1e24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1e28:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1e2c:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1e30:	add	x2, x2, #0x0
    1e34:	add	x0, x0, #0x0
    1e38:	mov	x4, #0x0                   	// #0
    1e3c:	mov	x3, #0x0                   	// #0
    1e40:	mov	w1, #0xbf                  	// #191
    1e44:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000001e48 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE>:
    1e48:	sub	sp, sp, #0x2c0
    1e4c:	stp	x19, x20, [sp]
    1e50:	mov	x19, x0
    1e54:	ldrb	w0, [x0]
    1e58:	stp	x21, x22, [sp, #16]
    1e5c:	sub	w0, w0, #0x4
    1e60:	stp	x23, x24, [sp, #32]
    1e64:	and	w0, w0, #0xff
    1e68:	cmp	w0, #0x1
    1e6c:	stp	x25, x26, [sp, #48]
    1e70:	stp	x27, x28, [sp, #64]
    1e74:	ldr	x26, [x2, #8]
    1e78:	str	x30, [sp, #80]
    1e7c:	b.hi	216c <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x324>  // b.pmore
    1e80:	mov	x28, x2
    1e84:	add	x0, x19, #0x14
    1e88:	mov	x20, x1
    1e8c:	mov	w1, #0xffffffff            	// #-1
    1e90:	ldxr	w21, [x0]
    1e94:	stxr	w2, w1, [x0]
    1e98:	cbnz	w2, 1e90 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x48>
    1e9c:	dmb	ish
    1ea0:	ldrb	w0, [x28]
    1ea4:	ldr	w24, [x19, #16]
    1ea8:	ldr	x23, [x19, #8]
    1eac:	cbnz	w0, 1ef0 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0xa8>
    1eb0:	cmp	w21, w1
    1eb4:	b.ne	1ed8 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x90>  // b.any
    1eb8:	ldp	x19, x20, [sp]
    1ebc:	ldp	x21, x22, [sp, #16]
    1ec0:	ldp	x23, x24, [sp, #32]
    1ec4:	ldp	x25, x26, [sp, #48]
    1ec8:	ldp	x27, x28, [sp, #64]
    1ecc:	ldr	x30, [sp, #80]
    1ed0:	add	sp, sp, #0x2c0
    1ed4:	ret
    1ed8:	mov	x2, x23
    1edc:	mov	x1, x26
    1ee0:	mov	w0, #0x19                  	// #25
    1ee4:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    1ee8:	tst	w0, #0xff
    1eec:	b.ne	1eb8 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x70>  // b.any
    1ef0:	mov	w25, #0x1                   	// #1
    1ef4:	str	w25, [sp, #272]
    1ef8:	str	x23, [sp, #280]
    1efc:	add	x27, sp, #0xc0
    1f00:	str	w24, [sp, #288]
    1f04:	mov	x0, x27
    1f08:	str	w21, [sp, #292]
    1f0c:	add	x2, sp, #0x60
    1f10:	ldp	x6, x7, [sp, #272]
    1f14:	stp	x6, x7, [sp, #96]
    1f18:	add	x1, sp, #0x90
    1f1c:	ldp	x6, x7, [x28]
    1f20:	mov	w3, #0x19                  	// #25
    1f24:	ldp	x4, x5, [sp, #288]
    1f28:	stp	x4, x5, [sp, #112]
    1f2c:	add	x22, sp, #0x110
    1f30:	ldr	x4, [x28, #16]
    1f34:	stp	x6, x7, [sp, #144]
    1f38:	ldr	x8, [sp, #304]
    1f3c:	str	x8, [sp, #128]
    1f40:	str	x4, [sp, #160]
    1f44:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    1f48:	str	w25, [sp, #272]
    1f4c:	ldrb	w2, [x19]
    1f50:	mov	x3, #0x1900000000          	// #107374182400
    1f54:	ldr	x1, [x19, #24]
    1f58:	cmp	w2, #0x5
    1f5c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1f60:	add	x2, x2, #0x0
    1f64:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1f68:	adrp	x19, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1f6c:	add	x0, x0, #0x0
    1f70:	add	x19, x19, #0x0
    1f74:	csel	x19, x19, x0, eq  // eq = none
    1f78:	mov	x0, x22
    1f7c:	str	x23, [sp, #280]
    1f80:	str	w24, [sp, #288]
    1f84:	str	w21, [sp, #292]
    1f88:	stp	x3, x2, [sp, #312]
    1f8c:	str	wzr, [sp, #592]
    1f90:	str	wzr, [sp, #600]
    1f94:	str	xzr, [sp, #608]
    1f98:	str	xzr, [sp, #616]
    1f9c:	str	wzr, [sp, #640]
    1fa0:	str	xzr, [sp, #648]
    1fa4:	str	xzr, [sp, #656]
    1fa8:	str	xzr, [sp, #680]
    1fac:	str	wzr, [sp, #688]
    1fb0:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    1fb4:	mov	x1, x0
    1fb8:	ldr	w0, [x0, #320]
    1fbc:	cmp	w0, #0x8
    1fc0:	b.eq	20e0 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x298>  // b.none
    1fc4:	ubfiz	x2, x0, #5, #32
    1fc8:	add	w0, w0, #0x1
    1fcc:	add	x2, x2, #0x40
    1fd0:	str	w0, [x1, #320]
    1fd4:	add	x3, x1, x2
    1fd8:	mov	x0, x22
    1fdc:	str	wzr, [x1, x2]
    1fe0:	str	x19, [x3, #16]
    1fe4:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    1fe8:	mov	x0, x20
    1fec:	bl	0 <_ZN7__ubsan21getSymbolizedLocationEm>
    1ff0:	mov	x19, x0
    1ff4:	adrp	x20, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    1ff8:	add	x20, x20, #0x0
    1ffc:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2000:	mov	x3, #0x1                   	// #1
    2004:	add	x2, x2, #0x0
    2008:	ldr	x1, [x19, #40]
    200c:	mov	w4, #0x3                   	// #3
    2010:	movk	x3, #0x19, lsl #32
    2014:	mov	x0, x22
    2018:	cmp	x1, #0x0
    201c:	str	w4, [sp, #272]
    2020:	csel	x1, x20, x1, eq  // eq = none
    2024:	str	xzr, [sp, #280]
    2028:	str	xzr, [sp, #288]
    202c:	stp	x19, x3, [sp, #304]
    2030:	str	x2, [sp, #320]
    2034:	str	wzr, [sp, #336]
    2038:	str	x1, [sp, #352]
    203c:	str	w25, [sp, #592]
    2040:	str	wzr, [sp, #600]
    2044:	str	xzr, [sp, #608]
    2048:	str	xzr, [sp, #616]
    204c:	str	wzr, [sp, #640]
    2050:	str	xzr, [sp, #648]
    2054:	str	xzr, [sp, #656]
    2058:	str	xzr, [sp, #680]
    205c:	str	wzr, [sp, #688]
    2060:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    2064:	ldr	x25, [x19, #16]
    2068:	cmp	x25, #0x0
    206c:	csel	x25, x20, x25, eq  // eq = none
    2070:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
    2074:	str	xzr, [sp, #184]
    2078:	mov	x1, x26
    207c:	mov	x3, x22
    2080:	add	x2, sp, #0xb8
    2084:	mov	x26, x20
    2088:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
    208c:	tst	w0, #0xff
    2090:	b.eq	20a0 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x258>  // b.none
    2094:	ldr	x26, [sp, #184]
    2098:	cmp	x26, #0x0
    209c:	csel	x26, x20, x26, eq  // eq = none
    20a0:	mov	x1, x25
    20a4:	mov	x0, x26
    20a8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
    20ac:	cbnz	w0, 2100 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x2b8>
    20b0:	mov	x0, x19
    20b4:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
    20b8:	mov	x0, x27
    20bc:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    20c0:	ldp	x19, x20, [sp]
    20c4:	ldp	x21, x22, [sp, #16]
    20c8:	ldp	x23, x24, [sp, #32]
    20cc:	ldp	x25, x26, [sp, #48]
    20d0:	ldp	x27, x28, [sp, #64]
    20d4:	ldr	x30, [sp, #80]
    20d8:	add	sp, sp, #0x2c0
    20dc:	ret
    20e0:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    20e4:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    20e8:	add	x2, x2, #0x0
    20ec:	add	x0, x0, #0x0
    20f0:	mov	x4, #0x0                   	// #0
    20f4:	mov	x3, #0x0                   	// #0
    20f8:	mov	w1, #0xbf                  	// #191
    20fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    2100:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2104:	mov	x3, #0x1                   	// #1
    2108:	add	x1, x1, #0x0
    210c:	mov	w4, #0x1                   	// #1
    2110:	movk	x3, #0x19, lsl #32
    2114:	mov	w2, #0x2                   	// #2
    2118:	mov	x0, x22
    211c:	str	w4, [sp, #272]
    2120:	str	x23, [sp, #280]
    2124:	str	w24, [sp, #288]
    2128:	str	w21, [sp, #292]
    212c:	stp	x3, x1, [sp, #312]
    2130:	str	wzr, [sp, #336]
    2134:	str	x26, [sp, #352]
    2138:	str	wzr, [sp, #368]
    213c:	str	x25, [sp, #384]
    2140:	str	w2, [sp, #592]
    2144:	str	wzr, [sp, #600]
    2148:	str	xzr, [sp, #608]
    214c:	str	xzr, [sp, #616]
    2150:	str	wzr, [sp, #640]
    2154:	str	xzr, [sp, #648]
    2158:	str	xzr, [sp, #656]
    215c:	str	xzr, [sp, #680]
    2160:	str	wzr, [sp, #688]
    2164:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    2168:	b	20b0 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE+0x268>
    216c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002170 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE>:
    2170:	sub	sp, sp, #0x2a0
    2174:	stp	x19, x20, [sp]
    2178:	mov	x20, x2
    217c:	add	x2, x0, #0xc
    2180:	stp	x23, x24, [sp, #32]
    2184:	mov	x24, x1
    2188:	mov	x19, x3
    218c:	mov	w3, #0xffffffff            	// #-1
    2190:	stp	x21, x22, [sp, #16]
    2194:	str	x30, [sp, #72]
    2198:	ldxr	w21, [x2]
    219c:	stxr	w1, w3, [x2]
    21a0:	cbnz	w1, 2198 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x28>
    21a4:	dmb	ish
    21a8:	ldrb	w2, [x19]
    21ac:	ldr	w23, [x0, #8]
    21b0:	ldr	x22, [x0]
    21b4:	cbnz	w2, 21f0 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x80>
    21b8:	cmp	w21, w3
    21bc:	b.ne	21d8 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x68>  // b.any
    21c0:	ldp	x19, x20, [sp]
    21c4:	ldp	x21, x22, [sp, #16]
    21c8:	ldp	x23, x24, [sp, #32]
    21cc:	ldr	x30, [sp, #72]
    21d0:	add	sp, sp, #0x2a0
    21d4:	ret
    21d8:	ldr	x1, [x19, #8]
    21dc:	mov	x2, x22
    21e0:	mov	w0, #0x2                   	// #2
    21e4:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    21e8:	tst	w0, #0xff
    21ec:	b.ne	21c0 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x50>  // b.any
    21f0:	stp	x25, x26, [sp, #48]
    21f4:	mov	w25, #0x1                   	// #1
    21f8:	add	x26, sp, #0xa0
    21fc:	str	w25, [sp, #240]
    2200:	mov	x0, x26
    2204:	str	x22, [sp, #248]
    2208:	add	x2, sp, #0x50
    220c:	str	w23, [sp, #256]
    2210:	add	x1, sp, #0x80
    2214:	str	w21, [sp, #260]
    2218:	mov	w3, #0x2                   	// #2
    221c:	ldp	x6, x7, [sp, #240]
    2220:	stp	x6, x7, [sp, #80]
    2224:	ldp	x6, x7, [x19]
    2228:	str	x27, [sp, #64]
    222c:	ldp	x4, x5, [sp, #256]
    2230:	stp	x4, x5, [sp, #96]
    2234:	add	x27, sp, #0xf0
    2238:	ldr	x4, [x19, #16]
    223c:	stp	x6, x7, [sp, #128]
    2240:	ldr	x8, [sp, #272]
    2244:	str	x8, [sp, #112]
    2248:	str	x4, [sp, #144]
    224c:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    2250:	mvn	x0, x24
    2254:	mvn	x2, x20
    2258:	lsr	x0, x0, #63
    225c:	cmp	x0, x2, lsr #63
    2260:	mov	x0, x27
    2264:	b.ne	2280 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x110>  // b.any
    2268:	cmp	x24, x20
    226c:	b.ls	2308 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x198>  // b.plast
    2270:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2274:	mov	x4, #0x200000000           	// #8589934592
    2278:	add	x1, x1, #0x0
    227c:	b	228c <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x11c>
    2280:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2284:	add	x1, x1, #0x0
    2288:	mov	x4, #0x200000000           	// #8589934592
    228c:	mov	w2, #0x5                   	// #5
    2290:	mov	w3, #0x2                   	// #2
    2294:	str	w25, [sp, #240]
    2298:	str	x22, [sp, #248]
    229c:	str	w23, [sp, #256]
    22a0:	str	w21, [sp, #260]
    22a4:	stp	x4, x1, [sp, #280]
    22a8:	str	w2, [sp, #304]
    22ac:	str	x24, [sp, #320]
    22b0:	str	w2, [sp, #336]
    22b4:	str	x20, [sp, #352]
    22b8:	str	w3, [sp, #560]
    22bc:	str	wzr, [sp, #568]
    22c0:	str	xzr, [sp, #576]
    22c4:	str	xzr, [sp, #584]
    22c8:	str	wzr, [sp, #608]
    22cc:	str	xzr, [sp, #616]
    22d0:	str	xzr, [sp, #624]
    22d4:	str	xzr, [sp, #648]
    22d8:	str	wzr, [sp, #656]
    22dc:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    22e0:	mov	x0, x26
    22e4:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    22e8:	ldp	x19, x20, [sp]
    22ec:	ldp	x21, x22, [sp, #16]
    22f0:	ldp	x23, x24, [sp, #32]
    22f4:	ldp	x25, x26, [sp, #48]
    22f8:	ldr	x27, [sp, #64]
    22fc:	ldr	x30, [sp, #72]
    2300:	add	sp, sp, #0x2a0
    2304:	ret
    2308:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    230c:	mov	x4, #0x200000000           	// #8589934592
    2310:	add	x1, x1, #0x0
    2314:	b	228c <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE+0x11c>

0000000000002318 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE>:
    2318:	sub	sp, sp, #0x2f0
    231c:	mov	w3, #0xffffffff            	// #-1
    2320:	stp	x19, x20, [sp]
    2324:	mov	x19, x0
    2328:	mov	x20, x1
    232c:	add	x0, x0, #0xc
    2330:	stp	x25, x26, [sp, #48]
    2334:	mov	x25, x2
    2338:	stp	x21, x22, [sp, #16]
    233c:	stp	x23, x24, [sp, #32]
    2340:	stp	x27, x28, [sp, #64]
    2344:	ldr	x24, [x2, #8]
    2348:	str	x30, [sp, #80]
    234c:	ldxr	w28, [x0]
    2350:	stxr	w1, w3, [x0]
    2354:	cbnz	w1, 234c <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x34>
    2358:	dmb	ish
    235c:	ldrb	w3, [x19, #24]
    2360:	mov	x0, #0x1                   	// #1
    2364:	ldr	w22, [x19, #8]
    2368:	mov	w21, w0
    236c:	lsl	x27, x0, x3
    2370:	ldr	x23, [x19]
    2374:	cbz	x20, 2388 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x70>
    2378:	sub	x0, x27, #0x1
    237c:	tst	x0, x20
    2380:	cset	w21, eq  // eq = none
    2384:	add	w21, w21, #0x3
    2388:	ldrb	w0, [x25]
    238c:	cbnz	w0, 23d8 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0xc0>
    2390:	cmn	w28, #0x1
    2394:	b.ne	23b8 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0xa0>  // b.any
    2398:	ldp	x19, x20, [sp]
    239c:	ldp	x21, x22, [sp, #16]
    23a0:	ldp	x23, x24, [sp, #32]
    23a4:	ldp	x25, x26, [sp, #48]
    23a8:	ldp	x27, x28, [sp, #64]
    23ac:	ldr	x30, [sp, #80]
    23b0:	add	sp, sp, #0x2f0
    23b4:	ret
    23b8:	mov	x2, x23
    23bc:	mov	x1, x24
    23c0:	mov	w0, w21
    23c4:	bl	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    23c8:	tst	w0, #0xff
    23cc:	b.ne	2398 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x80>  // b.any
    23d0:	ldr	x0, [x19]
    23d4:	b	23dc <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0xc4>
    23d8:	mov	x0, x23
    23dc:	str	xzr, [sp, #104]
    23e0:	mov	w26, #0x1                   	// #1
    23e4:	cbz	x0, 264c <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x334>
    23e8:	str	w26, [sp, #200]
    23ec:	add	x24, sp, #0xf0
    23f0:	str	x23, [sp, #208]
    23f4:	mov	x0, x24
    23f8:	stp	w22, w28, [sp, #216]
    23fc:	mov	w3, w21
    2400:	ldp	x6, x7, [sp, #200]
    2404:	stp	x6, x7, [sp, #112]
    2408:	add	x2, sp, #0x70
    240c:	ldp	x6, x7, [x25]
    2410:	add	x1, sp, #0xa0
    2414:	ldp	x4, x5, [sp, #216]
    2418:	stp	x4, x5, [sp, #128]
    241c:	ldr	x4, [x25, #16]
    2420:	stp	x6, x7, [sp, #160]
    2424:	ldr	x5, [sp, #96]
    2428:	str	x5, [sp, #144]
    242c:	str	x4, [sp, #176]
    2430:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
    2434:	cmp	w21, #0x3
    2438:	b.eq	2584 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x26c>  // b.none
    243c:	cmp	w21, #0x4
    2440:	b.ne	2508 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x1f0>  // b.any
    2444:	ldrb	w3, [x19, #25]
    2448:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    244c:	add	x0, x0, #0x0
    2450:	add	x25, sp, #0x140
    2454:	ldr	x1, [x19, #16]
    2458:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    245c:	ldr	x5, [x0, x3, lsl #3]
    2460:	mov	x0, x25
    2464:	ldr	x7, [sp, #96]
    2468:	add	x2, x2, #0x0
    246c:	mov	x6, #0x400000000           	// #17179869184
    2470:	mov	w3, #0x2                   	// #2
    2474:	mov	w4, #0x5                   	// #5
    2478:	str	w26, [sp, #320]
    247c:	str	x23, [sp, #328]
    2480:	str	w22, [sp, #336]
    2484:	str	w28, [sp, #340]
    2488:	stp	x7, x6, [sp, #352]
    248c:	str	x2, [sp, #368]
    2490:	str	wzr, [sp, #384]
    2494:	str	x5, [sp, #400]
    2498:	str	w4, [sp, #416]
    249c:	str	x20, [sp, #432]
    24a0:	str	w3, [sp, #640]
    24a4:	str	wzr, [sp, #648]
    24a8:	str	xzr, [sp, #656]
    24ac:	str	xzr, [sp, #664]
    24b0:	str	wzr, [sp, #688]
    24b4:	str	xzr, [sp, #696]
    24b8:	str	xzr, [sp, #704]
    24bc:	str	xzr, [sp, #728]
    24c0:	str	wzr, [sp, #736]
    24c4:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
    24c8:	mov	x0, x25
    24cc:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    24d0:	cbnz	x20, 25f0 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x2d8>
    24d4:	mov	x0, x24
    24d8:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
    24dc:	ldr	x0, [sp, #104]
    24e0:	cbz	x0, 2398 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x80>
    24e4:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
    24e8:	ldp	x19, x20, [sp]
    24ec:	ldp	x21, x22, [sp, #16]
    24f0:	ldp	x23, x24, [sp, #32]
    24f4:	ldp	x25, x26, [sp, #48]
    24f8:	ldp	x27, x28, [sp, #64]
    24fc:	ldr	x30, [sp, #80]
    2500:	add	sp, sp, #0x2f0
    2504:	ret
    2508:	cmp	w21, #0x1
    250c:	b.eq	2530 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x218>  // b.none
    2510:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2514:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2518:	add	x2, x2, #0x0
    251c:	add	x0, x0, #0x0
    2520:	mov	x4, #0x0                   	// #0
    2524:	mov	x3, #0x0                   	// #0
    2528:	mov	w1, #0x58                  	// #88
    252c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    2530:	ldrb	w3, [x19, #25]
    2534:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2538:	add	x0, x0, #0x0
    253c:	add	x25, sp, #0x140
    2540:	ldr	x5, [sp, #96]
    2544:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2548:	ldr	x3, [x0, x3, lsl #3]
    254c:	add	x2, x2, #0x0
    2550:	mov	x4, #0x100000000           	// #4294967296
    2554:	mov	x0, x25
    2558:	str	w26, [sp, #320]
    255c:	str	x23, [sp, #328]
    2560:	str	w22, [sp, #336]
    2564:	str	w28, [sp, #340]
    2568:	stp	x5, x4, [sp, #352]
    256c:	str	x2, [sp, #368]
    2570:	str	wzr, [sp, #384]
    2574:	str	x3, [sp, #400]
    2578:	ldr	x1, [x19, #16]
    257c:	str	w21, [sp, #640]
    2580:	b	24a4 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x18c>
    2584:	ldrb	w3, [x19, #25]
    2588:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    258c:	add	x0, x0, #0x0
    2590:	add	x25, sp, #0x140
    2594:	ldr	x7, [sp, #96]
    2598:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    259c:	ldr	x5, [x0, x3, lsl #3]
    25a0:	add	x2, x2, #0x0
    25a4:	mov	x6, #0x300000000           	// #12884901888
    25a8:	mov	w4, #0x5                   	// #5
    25ac:	mov	w3, #0x2                   	// #2
    25b0:	mov	x0, x25
    25b4:	str	w26, [sp, #320]
    25b8:	str	x23, [sp, #328]
    25bc:	str	w22, [sp, #336]
    25c0:	str	w28, [sp, #340]
    25c4:	stp	x7, x6, [sp, #352]
    25c8:	str	x2, [sp, #368]
    25cc:	str	wzr, [sp, #384]
    25d0:	str	x5, [sp, #400]
    25d4:	str	w4, [sp, #416]
    25d8:	str	x20, [sp, #432]
    25dc:	str	w3, [sp, #448]
    25e0:	stp	x27, xzr, [sp, #464]
    25e4:	ldr	x1, [x19, #16]
    25e8:	str	w21, [sp, #640]
    25ec:	b	24a4 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x18c>
    25f0:	adrp	x1, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    25f4:	add	x1, x1, #0x0
    25f8:	mov	w3, #0x2                   	// #2
    25fc:	mov	w2, #0x1                   	// #1
    2600:	mov	x0, x25
    2604:	str	w3, [sp, #320]
    2608:	str	xzr, [sp, #328]
    260c:	str	xzr, [sp, #336]
    2610:	str	x20, [sp, #344]
    2614:	str	w2, [sp, #360]
    2618:	str	w21, [sp, #364]
    261c:	str	x1, [sp, #368]
    2620:	str	wzr, [sp, #640]
    2624:	str	wzr, [sp, #648]
    2628:	str	xzr, [sp, #656]
    262c:	str	xzr, [sp, #664]
    2630:	str	wzr, [sp, #688]
    2634:	str	xzr, [sp, #696]
    2638:	str	xzr, [sp, #704]
    263c:	str	xzr, [sp, #728]
    2640:	str	wzr, [sp, #736]
    2644:	bl	0 <_ZN7__ubsan4DiagD1Ev>
    2648:	b	24d4 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x1bc>
    264c:	cbz	x24, 2670 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0x358>
    2650:	sub	x0, x24, #0x4
    2654:	mov	x23, #0x0                   	// #0
    2658:	bl	0 <_ZN7__ubsan21getSymbolizedLocationEm>
    265c:	mov	w28, #0x0                   	// #0
    2660:	mov	w22, #0x0                   	// #0
    2664:	mov	w26, #0x3                   	// #3
    2668:	stp	x0, x0, [sp, #96]
    266c:	b	23e8 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE+0xd0>
    2670:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2674:	adrp	x0, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2678:	add	x2, x2, #0x0
    267c:	add	x0, x0, #0x0
    2680:	mov	x4, #0x0                   	// #0
    2684:	mov	x3, #0x0                   	// #0
    2688:	mov	w1, #0x2b                  	// #43
    268c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000002690 <_ZN7__ubsan12ignoreReportENS_14SourceLocationENS_13ReportOptionsENS_9ErrorTypeE>:
    2690:	mov	x4, x2
    2694:	mov	x2, x0
    2698:	ldrb	w0, [x4]
    269c:	cbnz	w0, 26c0 <_ZN7__ubsan12ignoreReportENS_14SourceLocationENS_13ReportOptionsENS_9ErrorTypeE+0x30>
    26a0:	lsr	x1, x1, #32
    26a4:	mov	w0, #0x1                   	// #1
    26a8:	cmn	w1, #0x1
    26ac:	b.ne	26b4 <_ZN7__ubsan12ignoreReportENS_14SourceLocationENS_13ReportOptionsENS_9ErrorTypeE+0x24>  // b.any
    26b0:	ret
    26b4:	ldr	x1, [x4, #8]
    26b8:	mov	w0, w3
    26bc:	b	0 <_ZN7__ubsan14IsPCSuppressedENS_9ErrorTypeEmPKc>
    26c0:	mov	w0, #0x0                   	// #0
    26c4:	ret

00000000000026c8 <__ubsan_handle_type_mismatch_v1>:
    26c8:	stp	x29, x30, [sp, #-80]!
    26cc:	mov	x29, sp
    26d0:	add	x2, x29, #0x10
    26d4:	stp	xzr, x30, [x29, #56]
    26d8:	ldp	x4, x5, [x29, #56]
    26dc:	stp	x4, x5, [x29, #16]
    26e0:	str	x29, [x29, #32]
    26e4:	bl	2318 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE>
    26e8:	ldp	x29, x30, [sp], #80
    26ec:	ret

00000000000026f0 <__ubsan_handle_type_mismatch_v1_abort>:
    26f0:	stp	x29, x30, [sp, #-80]!
    26f4:	mov	w3, #0x1                   	// #1
    26f8:	mov	x29, sp
    26fc:	add	x2, x29, #0x10
    2700:	strb	w3, [x29, #56]
    2704:	stur	wzr, [x29, #57]
    2708:	sturh	wzr, [x29, #61]
    270c:	strb	wzr, [x29, #63]
    2710:	str	x30, [x29, #64]
    2714:	str	x29, [x29, #32]
    2718:	ldp	x4, x5, [x29, #56]
    271c:	stp	x4, x5, [x29, #16]
    2720:	bl	2318 <_ZL22handleTypeMismatchImplPN7__ubsan16TypeMismatchDataEmNS_13ReportOptionsE>
    2724:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002728 <__ubsan_handle_add_overflow>:
    2728:	stp	x29, x30, [sp, #-80]!
    272c:	mov	x4, x2
    2730:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2734:	mov	x29, sp
    2738:	ldr	x3, [x0, #16]
    273c:	add	x5, x29, #0x10
    2740:	stp	xzr, x30, [x29, #56]
    2744:	add	x2, x2, #0x0
    2748:	ldp	x6, x7, [x29, #56]
    274c:	stp	x6, x7, [x29, #16]
    2750:	str	x29, [x29, #32]
    2754:	bl	14f0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>
    2758:	ldp	x29, x30, [sp], #80
    275c:	ret

0000000000002760 <__ubsan_handle_add_overflow_abort>:
    2760:	stp	x29, x30, [sp, #-80]!
    2764:	mov	w6, #0x1                   	// #1
    2768:	mov	x4, x2
    276c:	mov	x29, sp
    2770:	ldr	x3, [x0, #16]
    2774:	add	x5, x29, #0x10
    2778:	strb	w6, [x29, #56]
    277c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2780:	stur	wzr, [x29, #57]
    2784:	add	x2, x2, #0x0
    2788:	sturh	wzr, [x29, #61]
    278c:	strb	wzr, [x29, #63]
    2790:	str	x30, [x29, #64]
    2794:	str	x29, [x29, #32]
    2798:	ldp	x6, x7, [x29, #56]
    279c:	stp	x6, x7, [x29, #16]
    27a0:	bl	14f0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>
    27a4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000027a8 <__ubsan_handle_sub_overflow>:
    27a8:	stp	x29, x30, [sp, #-80]!
    27ac:	mov	x4, x2
    27b0:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    27b4:	mov	x29, sp
    27b8:	ldr	x3, [x0, #16]
    27bc:	add	x5, x29, #0x10
    27c0:	stp	xzr, x30, [x29, #56]
    27c4:	add	x2, x2, #0x0
    27c8:	ldp	x6, x7, [x29, #56]
    27cc:	stp	x6, x7, [x29, #16]
    27d0:	str	x29, [x29, #32]
    27d4:	bl	14f0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>
    27d8:	ldp	x29, x30, [sp], #80
    27dc:	ret

00000000000027e0 <__ubsan_handle_sub_overflow_abort>:
    27e0:	stp	x29, x30, [sp, #-80]!
    27e4:	mov	w6, #0x1                   	// #1
    27e8:	mov	x4, x2
    27ec:	mov	x29, sp
    27f0:	ldr	x3, [x0, #16]
    27f4:	add	x5, x29, #0x10
    27f8:	strb	w6, [x29, #56]
    27fc:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2800:	stur	wzr, [x29, #57]
    2804:	add	x2, x2, #0x0
    2808:	sturh	wzr, [x29, #61]
    280c:	strb	wzr, [x29, #63]
    2810:	str	x30, [x29, #64]
    2814:	str	x29, [x29, #32]
    2818:	ldp	x6, x7, [x29, #56]
    281c:	stp	x6, x7, [x29, #16]
    2820:	bl	14f0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>
    2824:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002828 <__ubsan_handle_mul_overflow>:
    2828:	stp	x29, x30, [sp, #-80]!
    282c:	mov	x4, x2
    2830:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2834:	mov	x29, sp
    2838:	ldr	x3, [x0, #16]
    283c:	add	x5, x29, #0x10
    2840:	stp	xzr, x30, [x29, #56]
    2844:	add	x2, x2, #0x0
    2848:	ldp	x6, x7, [x29, #56]
    284c:	stp	x6, x7, [x29, #16]
    2850:	str	x29, [x29, #32]
    2854:	bl	14f0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>
    2858:	ldp	x29, x30, [sp], #80
    285c:	ret

0000000000002860 <__ubsan_handle_mul_overflow_abort>:
    2860:	stp	x29, x30, [sp, #-80]!
    2864:	mov	w6, #0x1                   	// #1
    2868:	mov	x4, x2
    286c:	mov	x29, sp
    2870:	ldr	x3, [x0, #16]
    2874:	add	x5, x29, #0x10
    2878:	strb	w6, [x29, #56]
    287c:	adrp	x2, 0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2880:	stur	wzr, [x29, #57]
    2884:	add	x2, x2, #0x0
    2888:	sturh	wzr, [x29, #61]
    288c:	strb	wzr, [x29, #63]
    2890:	str	x30, [x29, #64]
    2894:	str	x29, [x29, #32]
    2898:	ldp	x6, x7, [x29, #56]
    289c:	stp	x6, x7, [x29, #16]
    28a0:	bl	14f0 <_Z25handleIntegerOverflowImplIN7__ubsan5ValueEEvPNS0_12OverflowDataEmPKcT_NS0_13ReportOptionsE>
    28a4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000028a8 <__ubsan_handle_negate_overflow>:
    28a8:	stp	x29, x30, [sp, #-80]!
    28ac:	mov	x29, sp
    28b0:	add	x2, x29, #0x10
    28b4:	stp	xzr, x30, [x29, #56]
    28b8:	ldp	x4, x5, [x29, #56]
    28bc:	stp	x4, x5, [x29, #16]
    28c0:	str	x29, [x29, #32]
    28c4:	bl	0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    28c8:	ldp	x29, x30, [sp], #80
    28cc:	ret

00000000000028d0 <__ubsan_handle_negate_overflow_abort>:
    28d0:	stp	x29, x30, [sp, #-80]!
    28d4:	mov	w3, #0x1                   	// #1
    28d8:	mov	x29, sp
    28dc:	add	x2, x29, #0x10
    28e0:	strb	w3, [x29, #56]
    28e4:	stur	wzr, [x29, #57]
    28e8:	sturh	wzr, [x29, #61]
    28ec:	strb	wzr, [x29, #63]
    28f0:	str	x30, [x29, #64]
    28f4:	str	x29, [x29, #32]
    28f8:	ldp	x4, x5, [x29, #56]
    28fc:	stp	x4, x5, [x29, #16]
    2900:	bl	0 <_ZL24handleNegateOverflowImplPN7__ubsan12OverflowDataEmNS_13ReportOptionsE>
    2904:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002908 <__ubsan_handle_divrem_overflow>:
    2908:	stp	x29, x30, [sp, #-80]!
    290c:	mov	x29, sp
    2910:	add	x3, x29, #0x10
    2914:	stp	xzr, x30, [x29, #56]
    2918:	ldp	x4, x5, [x29, #56]
    291c:	stp	x4, x5, [x29, #16]
    2920:	str	x29, [x29, #32]
    2924:	bl	510 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE>
    2928:	ldp	x29, x30, [sp], #80
    292c:	ret

0000000000002930 <__ubsan_handle_divrem_overflow_abort>:
    2930:	stp	x29, x30, [sp, #-80]!
    2934:	mov	w4, #0x1                   	// #1
    2938:	mov	x29, sp
    293c:	add	x3, x29, #0x10
    2940:	strb	w4, [x29, #56]
    2944:	stur	wzr, [x29, #57]
    2948:	sturh	wzr, [x29, #61]
    294c:	strb	wzr, [x29, #63]
    2950:	str	x30, [x29, #64]
    2954:	str	x29, [x29, #32]
    2958:	ldp	x4, x5, [x29, #56]
    295c:	stp	x4, x5, [x29, #16]
    2960:	bl	510 <_ZL24handleDivremOverflowImplPN7__ubsan12OverflowDataEmmNS_13ReportOptionsE>
    2964:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002968 <__ubsan_handle_shift_out_of_bounds>:
    2968:	stp	x29, x30, [sp, #-80]!
    296c:	mov	x29, sp
    2970:	add	x3, x29, #0x10
    2974:	stp	xzr, x30, [x29, #56]
    2978:	ldp	x4, x5, [x29, #56]
    297c:	stp	x4, x5, [x29, #16]
    2980:	str	x29, [x29, #32]
    2984:	bl	d78 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE>
    2988:	ldp	x29, x30, [sp], #80
    298c:	ret

0000000000002990 <__ubsan_handle_shift_out_of_bounds_abort>:
    2990:	stp	x29, x30, [sp, #-80]!
    2994:	mov	w4, #0x1                   	// #1
    2998:	mov	x29, sp
    299c:	add	x3, x29, #0x10
    29a0:	strb	w4, [x29, #56]
    29a4:	stur	wzr, [x29, #57]
    29a8:	sturh	wzr, [x29, #61]
    29ac:	strb	wzr, [x29, #63]
    29b0:	str	x30, [x29, #64]
    29b4:	str	x29, [x29, #32]
    29b8:	ldp	x4, x5, [x29, #56]
    29bc:	stp	x4, x5, [x29, #16]
    29c0:	bl	d78 <_ZL26handleShiftOutOfBoundsImplPN7__ubsan20ShiftOutOfBoundsDataEmmNS_13ReportOptionsE>
    29c4:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000029c8 <__ubsan_handle_out_of_bounds>:
    29c8:	stp	x29, x30, [sp, #-80]!
    29cc:	mov	x29, sp
    29d0:	add	x2, x29, #0x10
    29d4:	stp	xzr, x30, [x29, #56]
    29d8:	ldp	x4, x5, [x29, #56]
    29dc:	stp	x4, x5, [x29, #16]
    29e0:	str	x29, [x29, #32]
    29e4:	bl	230 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE>
    29e8:	ldp	x29, x30, [sp], #80
    29ec:	ret

00000000000029f0 <__ubsan_handle_out_of_bounds_abort>:
    29f0:	stp	x29, x30, [sp, #-80]!
    29f4:	mov	w3, #0x1                   	// #1
    29f8:	mov	x29, sp
    29fc:	add	x2, x29, #0x10
    2a00:	strb	w3, [x29, #56]
    2a04:	stur	wzr, [x29, #57]
    2a08:	sturh	wzr, [x29, #61]
    2a0c:	strb	wzr, [x29, #63]
    2a10:	str	x30, [x29, #64]
    2a14:	str	x29, [x29, #32]
    2a18:	ldp	x4, x5, [x29, #56]
    2a1c:	stp	x4, x5, [x29, #16]
    2a20:	bl	230 <_ZL21handleOutOfBoundsImplPN7__ubsan15OutOfBoundsDataEmNS_13ReportOptionsE>
    2a24:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002a28 <__ubsan_handle_builtin_unreachable>:
    2a28:	stp	x29, x30, [sp, #-80]!
    2a2c:	mov	w2, #0x1                   	// #1
    2a30:	mov	x29, sp
    2a34:	add	x1, x29, #0x10
    2a38:	strb	w2, [x29, #56]
    2a3c:	stur	wzr, [x29, #57]
    2a40:	sturh	wzr, [x29, #61]
    2a44:	strb	wzr, [x29, #63]
    2a48:	str	x30, [x29, #64]
    2a4c:	str	x29, [x29, #32]
    2a50:	ldp	x2, x3, [x29, #56]
    2a54:	stp	x2, x3, [x29, #16]
    2a58:	bl	a70 <_ZL28handleBuiltinUnreachableImplPN7__ubsan15UnreachableDataENS_13ReportOptionsE.constprop.0>
    2a5c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002a60 <__ubsan_handle_missing_return>:
    2a60:	stp	x29, x30, [sp, #-80]!
    2a64:	mov	w2, #0x1                   	// #1
    2a68:	mov	x29, sp
    2a6c:	add	x1, x29, #0x10
    2a70:	strb	w2, [x29, #56]
    2a74:	stur	wzr, [x29, #57]
    2a78:	sturh	wzr, [x29, #61]
    2a7c:	strb	wzr, [x29, #63]
    2a80:	str	x30, [x29, #64]
    2a84:	str	x29, [x29, #32]
    2a88:	ldp	x2, x3, [x29, #56]
    2a8c:	stp	x2, x3, [x29, #16]
    2a90:	bl	990 <_ZL23handleMissingReturnImplPN7__ubsan15UnreachableDataENS_13ReportOptionsE.constprop.0>
    2a94:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002a98 <__ubsan_handle_vla_bound_not_positive>:
    2a98:	stp	x29, x30, [sp, #-80]!
    2a9c:	mov	x29, sp
    2aa0:	add	x2, x29, #0x10
    2aa4:	stp	xzr, x30, [x29, #56]
    2aa8:	ldp	x4, x5, [x29, #56]
    2aac:	stp	x4, x5, [x29, #16]
    2ab0:	str	x29, [x29, #32]
    2ab4:	bl	3a0 <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE>
    2ab8:	ldp	x29, x30, [sp], #80
    2abc:	ret

0000000000002ac0 <__ubsan_handle_vla_bound_not_positive_abort>:
    2ac0:	stp	x29, x30, [sp, #-80]!
    2ac4:	mov	w3, #0x1                   	// #1
    2ac8:	mov	x29, sp
    2acc:	add	x2, x29, #0x10
    2ad0:	strb	w3, [x29, #56]
    2ad4:	stur	wzr, [x29, #57]
    2ad8:	sturh	wzr, [x29, #61]
    2adc:	strb	wzr, [x29, #63]
    2ae0:	str	x30, [x29, #64]
    2ae4:	str	x29, [x29, #32]
    2ae8:	ldp	x4, x5, [x29, #56]
    2aec:	stp	x4, x5, [x29, #16]
    2af0:	bl	3a0 <_ZL25handleVLABoundNotPositivePN7__ubsan12VLABoundDataEmNS_13ReportOptionsE>
    2af4:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002af8 <__ubsan_handle_float_cast_overflow>:
    2af8:	stp	x29, x30, [sp, #-80]!
    2afc:	mov	x29, sp
    2b00:	add	x2, x29, #0x10
    2b04:	stp	xzr, x30, [x29, #56]
    2b08:	ldp	x4, x5, [x29, #56]
    2b0c:	stp	x4, x5, [x29, #16]
    2b10:	str	x29, [x29, #32]
    2b14:	bl	b50 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE>
    2b18:	ldp	x29, x30, [sp], #80
    2b1c:	ret

0000000000002b20 <__ubsan_handle_float_cast_overflow_abort>:
    2b20:	stp	x29, x30, [sp, #-80]!
    2b24:	mov	w3, #0x1                   	// #1
    2b28:	mov	x29, sp
    2b2c:	add	x2, x29, #0x10
    2b30:	strb	w3, [x29, #56]
    2b34:	stur	wzr, [x29, #57]
    2b38:	sturh	wzr, [x29, #61]
    2b3c:	strb	wzr, [x29, #63]
    2b40:	str	x30, [x29, #64]
    2b44:	str	x29, [x29, #32]
    2b48:	ldp	x4, x5, [x29, #56]
    2b4c:	stp	x4, x5, [x29, #16]
    2b50:	bl	b50 <_ZL23handleFloatCastOverflowPvmN7__ubsan13ReportOptionsE>
    2b54:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002b58 <__ubsan_handle_load_invalid_value>:
    2b58:	stp	x29, x30, [sp, #-80]!
    2b5c:	mov	x29, sp
    2b60:	add	x2, x29, #0x10
    2b64:	stp	xzr, x30, [x29, #56]
    2b68:	ldp	x4, x5, [x29, #56]
    2b6c:	stp	x4, x5, [x29, #16]
    2b70:	str	x29, [x29, #32]
    2b74:	bl	7d8 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE>
    2b78:	ldp	x29, x30, [sp], #80
    2b7c:	ret

0000000000002b80 <__ubsan_handle_load_invalid_value_abort>:
    2b80:	stp	x29, x30, [sp, #-80]!
    2b84:	mov	w3, #0x1                   	// #1
    2b88:	mov	x29, sp
    2b8c:	add	x2, x29, #0x10
    2b90:	strb	w3, [x29, #56]
    2b94:	stur	wzr, [x29, #57]
    2b98:	sturh	wzr, [x29, #61]
    2b9c:	strb	wzr, [x29, #63]
    2ba0:	str	x30, [x29, #64]
    2ba4:	str	x29, [x29, #32]
    2ba8:	ldp	x4, x5, [x29, #56]
    2bac:	stp	x4, x5, [x29, #16]
    2bb0:	bl	7d8 <_ZL22handleLoadInvalidValuePN7__ubsan16InvalidValueDataEmNS_13ReportOptionsE>
    2bb4:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002bb8 <__ubsan_handle_implicit_conversion>:
    2bb8:	stp	x29, x30, [sp, #-80]!
    2bbc:	mov	x6, x1
    2bc0:	mov	x3, x2
    2bc4:	mov	x29, sp
    2bc8:	add	x1, x29, #0x10
    2bcc:	mov	x2, x6
    2bd0:	stp	xzr, x30, [x29, #56]
    2bd4:	ldp	x4, x5, [x29, #56]
    2bd8:	stp	x4, x5, [x29, #16]
    2bdc:	str	x29, [x29, #32]
    2be0:	bl	1b10 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm>
    2be4:	ldp	x29, x30, [sp], #80
    2be8:	ret
    2bec:	nop

0000000000002bf0 <__ubsan_handle_implicit_conversion_abort>:
    2bf0:	stp	x29, x30, [sp, #-80]!
    2bf4:	mov	w4, #0x1                   	// #1
    2bf8:	mov	x3, x2
    2bfc:	mov	x29, sp
    2c00:	mov	x2, x1
    2c04:	add	x1, x29, #0x10
    2c08:	strb	w4, [x29, #56]
    2c0c:	stur	wzr, [x29, #57]
    2c10:	sturh	wzr, [x29, #61]
    2c14:	strb	wzr, [x29, #63]
    2c18:	str	x30, [x29, #64]
    2c1c:	str	x29, [x29, #32]
    2c20:	ldp	x4, x5, [x29, #56]
    2c24:	stp	x4, x5, [x29, #16]
    2c28:	bl	1b10 <_ZL24handleImplicitConversionPN7__ubsan22ImplicitConversionDataENS_13ReportOptionsEmm>
    2c2c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002c30 <__ubsan_handle_invalid_builtin>:
    2c30:	stp	x29, x30, [sp, #-80]!
    2c34:	mov	w1, #0x1                   	// #1
    2c38:	mov	x29, sp
    2c3c:	strb	w1, [x29, #56]
    2c40:	add	x1, x29, #0x10
    2c44:	stur	wzr, [x29, #57]
    2c48:	sturh	wzr, [x29, #61]
    2c4c:	strb	wzr, [x29, #63]
    2c50:	str	x30, [x29, #64]
    2c54:	str	x29, [x29, #32]
    2c58:	ldp	x2, x3, [x29, #56]
    2c5c:	stp	x2, x3, [x29, #16]
    2c60:	bl	11f0 <_ZL20handleInvalidBuiltinPN7__ubsan18InvalidBuiltinDataENS_13ReportOptionsE.constprop.0>
    2c64:	ldp	x29, x30, [sp], #80
    2c68:	ret
    2c6c:	nop

0000000000002c70 <__ubsan_handle_invalid_builtin_abort>:
    2c70:	stp	x29, x30, [sp, #-80]!
    2c74:	mov	w2, #0x1                   	// #1
    2c78:	mov	x29, sp
    2c7c:	add	x1, x29, #0x10
    2c80:	strb	w2, [x29, #56]
    2c84:	stur	wzr, [x29, #57]
    2c88:	sturh	wzr, [x29, #61]
    2c8c:	strb	wzr, [x29, #63]
    2c90:	str	x30, [x29, #64]
    2c94:	str	x29, [x29, #32]
    2c98:	ldp	x2, x3, [x29, #56]
    2c9c:	stp	x2, x3, [x29, #16]
    2ca0:	bl	11f0 <_ZL20handleInvalidBuiltinPN7__ubsan18InvalidBuiltinDataENS_13ReportOptionsE.constprop.0>
    2ca4:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002ca8 <__ubsan_handle_function_type_mismatch>:
    2ca8:	stp	x29, x30, [sp, #-80]!
    2cac:	mov	x29, sp
    2cb0:	add	x2, x29, #0x10
    2cb4:	stp	xzr, x30, [x29, #56]
    2cb8:	ldp	x4, x5, [x29, #56]
    2cbc:	stp	x4, x5, [x29, #16]
    2cc0:	str	x29, [x29, #32]
    2cc4:	bl	1308 <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE>
    2cc8:	ldp	x29, x30, [sp], #80
    2ccc:	ret

0000000000002cd0 <__ubsan_handle_function_type_mismatch_abort>:
    2cd0:	stp	x29, x30, [sp, #-80]!
    2cd4:	mov	w3, #0x1                   	// #1
    2cd8:	mov	x29, sp
    2cdc:	add	x2, x29, #0x10
    2ce0:	strb	w3, [x29, #56]
    2ce4:	stur	wzr, [x29, #57]
    2ce8:	sturh	wzr, [x29, #61]
    2cec:	strb	wzr, [x29, #63]
    2cf0:	str	x30, [x29, #64]
    2cf4:	str	x29, [x29, #32]
    2cf8:	ldp	x4, x5, [x29, #56]
    2cfc:	stp	x4, x5, [x29, #16]
    2d00:	bl	1308 <_ZL26handleFunctionTypeMismatchPN7__ubsan24FunctionTypeMismatchDataEmNS_13ReportOptionsE>
    2d04:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002d08 <__ubsan_handle_nonnull_return_v1>:
    2d08:	stp	x29, x30, [sp, #-80]!
    2d0c:	mov	w3, #0x1                   	// #1
    2d10:	mov	x29, sp
    2d14:	add	x2, x29, #0x10
    2d18:	stp	xzr, x30, [x29, #56]
    2d1c:	ldp	x4, x5, [x29, #56]
    2d20:	stp	x4, x5, [x29, #16]
    2d24:	str	x29, [x29, #32]
    2d28:	bl	1910 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb>
    2d2c:	ldp	x29, x30, [sp], #80
    2d30:	ret
    2d34:	nop

0000000000002d38 <__ubsan_handle_nonnull_return_v1_abort>:
    2d38:	stp	x29, x30, [sp, #-80]!
    2d3c:	mov	w3, #0x1                   	// #1
    2d40:	mov	x29, sp
    2d44:	add	x2, x29, #0x10
    2d48:	strb	w3, [x29, #56]
    2d4c:	stur	wzr, [x29, #57]
    2d50:	sturh	wzr, [x29, #61]
    2d54:	strb	wzr, [x29, #63]
    2d58:	str	x30, [x29, #64]
    2d5c:	str	x29, [x29, #32]
    2d60:	ldp	x4, x5, [x29, #56]
    2d64:	stp	x4, x5, [x29, #16]
    2d68:	bl	1910 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb>
    2d6c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002d70 <__ubsan_handle_nullability_return_v1>:
    2d70:	stp	x29, x30, [sp, #-80]!
    2d74:	mov	w3, #0x0                   	// #0
    2d78:	mov	x29, sp
    2d7c:	add	x2, x29, #0x10
    2d80:	stp	xzr, x30, [x29, #56]
    2d84:	ldp	x4, x5, [x29, #56]
    2d88:	stp	x4, x5, [x29, #16]
    2d8c:	str	x29, [x29, #32]
    2d90:	bl	1910 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb>
    2d94:	ldp	x29, x30, [sp], #80
    2d98:	ret
    2d9c:	nop

0000000000002da0 <__ubsan_handle_nullability_return_v1_abort>:
    2da0:	stp	x29, x30, [sp, #-80]!
    2da4:	mov	w3, #0x1                   	// #1
    2da8:	mov	x29, sp
    2dac:	add	x2, x29, #0x10
    2db0:	strb	w3, [x29, #56]
    2db4:	mov	w3, #0x0                   	// #0
    2db8:	stur	wzr, [x29, #57]
    2dbc:	sturh	wzr, [x29, #61]
    2dc0:	strb	wzr, [x29, #63]
    2dc4:	str	x30, [x29, #64]
    2dc8:	str	x29, [x29, #32]
    2dcc:	ldp	x4, x5, [x29, #56]
    2dd0:	stp	x4, x5, [x29, #16]
    2dd4:	bl	1910 <_ZL19handleNonNullReturnPN7__ubsan17NonNullReturnDataEPNS_14SourceLocationENS_13ReportOptionsEb>
    2dd8:	bl	0 <_ZN11__sanitizer3DieEv>
    2ddc:	nop

0000000000002de0 <__ubsan_handle_nonnull_arg>:
    2de0:	stp	x29, x30, [sp, #-80]!
    2de4:	mov	w2, #0x1                   	// #1
    2de8:	mov	x29, sp
    2dec:	add	x1, x29, #0x10
    2df0:	stp	xzr, x30, [x29, #56]
    2df4:	ldp	x4, x5, [x29, #56]
    2df8:	stp	x4, x5, [x29, #16]
    2dfc:	str	x29, [x29, #32]
    2e00:	bl	1730 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb>
    2e04:	ldp	x29, x30, [sp], #80
    2e08:	ret
    2e0c:	nop

0000000000002e10 <__ubsan_handle_nonnull_arg_abort>:
    2e10:	stp	x29, x30, [sp, #-80]!
    2e14:	mov	w2, #0x1                   	// #1
    2e18:	mov	x29, sp
    2e1c:	add	x1, x29, #0x10
    2e20:	strb	w2, [x29, #56]
    2e24:	stur	wzr, [x29, #57]
    2e28:	sturh	wzr, [x29, #61]
    2e2c:	strb	wzr, [x29, #63]
    2e30:	str	x30, [x29, #64]
    2e34:	str	x29, [x29, #32]
    2e38:	ldp	x4, x5, [x29, #56]
    2e3c:	stp	x4, x5, [x29, #16]
    2e40:	bl	1730 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb>
    2e44:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002e48 <__ubsan_handle_nullability_arg>:
    2e48:	stp	x29, x30, [sp, #-80]!
    2e4c:	mov	w2, #0x0                   	// #0
    2e50:	mov	x29, sp
    2e54:	add	x1, x29, #0x10
    2e58:	stp	xzr, x30, [x29, #56]
    2e5c:	ldp	x4, x5, [x29, #56]
    2e60:	stp	x4, x5, [x29, #16]
    2e64:	str	x29, [x29, #32]
    2e68:	bl	1730 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb>
    2e6c:	ldp	x29, x30, [sp], #80
    2e70:	ret
    2e74:	nop

0000000000002e78 <__ubsan_handle_nullability_arg_abort>:
    2e78:	stp	x29, x30, [sp, #-80]!
    2e7c:	mov	w2, #0x1                   	// #1
    2e80:	mov	x29, sp
    2e84:	add	x1, x29, #0x10
    2e88:	strb	w2, [x29, #56]
    2e8c:	mov	w2, #0x0                   	// #0
    2e90:	stur	wzr, [x29, #57]
    2e94:	sturh	wzr, [x29, #61]
    2e98:	strb	wzr, [x29, #63]
    2e9c:	str	x30, [x29, #64]
    2ea0:	str	x29, [x29, #32]
    2ea4:	ldp	x4, x5, [x29, #56]
    2ea8:	stp	x4, x5, [x29, #16]
    2eac:	bl	1730 <_ZL16handleNonNullArgPN7__ubsan14NonNullArgDataENS_13ReportOptionsEb>
    2eb0:	bl	0 <_ZN11__sanitizer3DieEv>
    2eb4:	nop

0000000000002eb8 <__ubsan_handle_pointer_overflow>:
    2eb8:	stp	x29, x30, [sp, #-80]!
    2ebc:	mov	x29, sp
    2ec0:	add	x3, x29, #0x10
    2ec4:	stp	xzr, x30, [x29, #56]
    2ec8:	ldp	x4, x5, [x29, #56]
    2ecc:	stp	x4, x5, [x29, #16]
    2ed0:	str	x29, [x29, #32]
    2ed4:	bl	2170 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE>
    2ed8:	ldp	x29, x30, [sp], #80
    2edc:	ret

0000000000002ee0 <__ubsan_handle_pointer_overflow_abort>:
    2ee0:	stp	x29, x30, [sp, #-80]!
    2ee4:	mov	w4, #0x1                   	// #1
    2ee8:	mov	x29, sp
    2eec:	add	x3, x29, #0x10
    2ef0:	strb	w4, [x29, #56]
    2ef4:	stur	wzr, [x29, #57]
    2ef8:	sturh	wzr, [x29, #61]
    2efc:	strb	wzr, [x29, #63]
    2f00:	str	x30, [x29, #64]
    2f04:	str	x29, [x29, #32]
    2f08:	ldp	x4, x5, [x29, #56]
    2f0c:	stp	x4, x5, [x29, #16]
    2f10:	bl	2170 <_ZL25handlePointerOverflowImplPN7__ubsan19PointerOverflowDataEmmNS_13ReportOptionsE>
    2f14:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000002f18 <__ubsan_handle_cfi_bad_icall>:
    2f18:	stp	x29, x30, [sp, #-112]!
    2f1c:	mov	x3, x0
    2f20:	mov	w6, #0x4                   	// #4
    2f24:	mov	x29, sp
    2f28:	add	x2, x29, #0x10
    2f2c:	add	x0, x29, #0x50
    2f30:	stp	xzr, x30, [x29, #56]
    2f34:	ldp	x4, x5, [x29, #56]
    2f38:	stp	x4, x5, [x29, #16]
    2f3c:	ldp	x4, x5, [x3]
    2f40:	strb	w6, [x29, #80]
    2f44:	ldr	x3, [x3, #16]
    2f48:	str	x29, [x29, #32]
    2f4c:	stur	wzr, [x29, #81]
    2f50:	sturh	wzr, [x29, #85]
    2f54:	strb	wzr, [x29, #87]
    2f58:	stp	x4, x5, [x29, #88]
    2f5c:	str	x3, [x29, #104]
    2f60:	bl	1e48 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE>
    2f64:	ldp	x29, x30, [sp], #112
    2f68:	ret
    2f6c:	nop

0000000000002f70 <__ubsan_handle_cfi_bad_icall_abort>:
    2f70:	stp	x29, x30, [sp, #-112]!
    2f74:	mov	x3, x0
    2f78:	mov	w4, #0x1                   	// #1
    2f7c:	mov	x29, sp
    2f80:	add	x2, x29, #0x10
    2f84:	add	x0, x29, #0x50
    2f88:	mov	w6, #0x4                   	// #4
    2f8c:	strb	w4, [x29, #56]
    2f90:	stur	wzr, [x29, #57]
    2f94:	sturh	wzr, [x29, #61]
    2f98:	strb	wzr, [x29, #63]
    2f9c:	str	x30, [x29, #64]
    2fa0:	ldp	x4, x5, [x3]
    2fa4:	strb	w6, [x29, #80]
    2fa8:	ldp	x8, x9, [x29, #56]
    2fac:	stur	wzr, [x29, #81]
    2fb0:	ldr	x3, [x3, #16]
    2fb4:	stp	x8, x9, [x29, #16]
    2fb8:	str	x29, [x29, #32]
    2fbc:	sturh	wzr, [x29, #85]
    2fc0:	strb	wzr, [x29, #87]
    2fc4:	stp	x4, x5, [x29, #88]
    2fc8:	str	x3, [x29, #104]
    2fcc:	bl	1e48 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE>
    2fd0:	bl	0 <_ZN11__sanitizer3DieEv>
    2fd4:	nop

0000000000002fd8 <__ubsan_handle_cfi_check_fail>:
    2fd8:	stp	x29, x30, [sp, #-80]!
    2fdc:	mov	x29, sp
    2fe0:	ldrb	w3, [x0]
    2fe4:	sub	w3, w3, #0x4
    2fe8:	stp	xzr, x30, [x29, #56]
    2fec:	and	w3, w3, #0xff
    2ff0:	cmp	w3, #0x1
    2ff4:	b.ls	301c <__ubsan_handle_cfi_check_fail+0x44>  // b.plast
    2ff8:	ldp	x4, x5, [x29, #56]
    2ffc:	cmp	x2, #0x0
    3000:	add	x3, x29, #0x10
    3004:	cset	w2, ne  // ne = any
    3008:	stp	x4, x5, [x29, #16]
    300c:	str	x29, [x29, #32]
    3010:	bl	0 <__ubsan_handle_cfi_bad_type>
    3014:	ldp	x29, x30, [sp], #80
    3018:	ret
    301c:	ldp	x4, x5, [x29, #56]
    3020:	add	x2, x29, #0x10
    3024:	stp	x4, x5, [x29, #16]
    3028:	str	x29, [x29, #32]
    302c:	bl	1e48 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE>
    3030:	ldp	x29, x30, [sp], #80
    3034:	ret

0000000000003038 <__ubsan_handle_cfi_check_fail_abort>:
    3038:	stp	x29, x30, [sp, #-80]!
    303c:	mov	w3, #0x1                   	// #1
    3040:	mov	x29, sp
    3044:	strb	w3, [x29, #56]
    3048:	ldrb	w3, [x0]
    304c:	stur	wzr, [x29, #57]
    3050:	sub	w3, w3, #0x4
    3054:	sturh	wzr, [x29, #61]
    3058:	strb	wzr, [x29, #63]
    305c:	and	w3, w3, #0xff
    3060:	str	x30, [x29, #64]
    3064:	cmp	w3, #0x1
    3068:	b.ls	308c <__ubsan_handle_cfi_check_fail_abort+0x54>  // b.plast
    306c:	ldp	x4, x5, [x29, #56]
    3070:	cmp	x2, #0x0
    3074:	add	x3, x29, #0x10
    3078:	cset	w2, ne  // ne = any
    307c:	stp	x4, x5, [x29, #16]
    3080:	str	x29, [x29, #32]
    3084:	bl	0 <__ubsan_handle_cfi_bad_type>
    3088:	bl	0 <_ZN11__sanitizer3DieEv>
    308c:	ldp	x4, x5, [x29, #56]
    3090:	add	x2, x29, #0x10
    3094:	stp	x4, x5, [x29, #16]
    3098:	str	x29, [x29, #32]
    309c:	bl	1e48 <_ZL17handleCFIBadIcallPN7__ubsan16CFICheckFailDataEmNS_13ReportOptionsE>
    30a0:	bl	0 <_ZN11__sanitizer3DieEv>

ubsan_handlers_cxx.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>:
   0:	sub	sp, sp, #0x2e0
   4:	stp	x19, x20, [sp]
   8:	mov	x19, x0
   c:	mov	x20, x1
  10:	mov	x0, x1
  14:	stp	x21, x22, [sp, #16]
  18:	mov	x21, x3
  1c:	ldr	x1, [x19, #24]
  20:	str	x30, [sp, #80]
  24:	bl	0 <_ZN7__ubsan16checkDynamicTypeEPvS0_m>
  28:	tst	w0, #0xff
  2c:	b.eq	48 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x48>  // b.none
  30:	mov	w0, #0x0                   	// #0
  34:	ldp	x19, x20, [sp]
  38:	ldp	x21, x22, [sp, #16]
  3c:	ldr	x30, [sp, #80]
  40:	add	sp, sp, #0x2e0
  44:	ret
  48:	add	x8, sp, #0xc8
  4c:	mov	x0, x20
  50:	stp	x23, x24, [sp, #32]
  54:	bl	0 <_ZN7__ubsan28getDynamicTypeInfoFromObjectEPv>
  58:	ldp	x22, x23, [sp, #200]
  5c:	cbz	x22, 70 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x70>
  60:	mov	x0, x22
  64:	bl	0 <_ZN7__ubsan21IsVptrCheckSuppressedEPKc>
  68:	tst	w0, #0xff
  6c:	b.ne	26c <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x26c>  // b.any
  70:	add	x0, x19, #0xc
  74:	mov	w1, #0xffffffff            	// #-1
  78:	stp	x25, x26, [sp, #48]
  7c:	stp	x27, x28, [sp, #64]
  80:	ldxr	w24, [x0]
  84:	stxr	w2, w1, [x0]
  88:	cbnz	w2, 80 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x80>
  8c:	dmb	ish
  90:	ldp	x4, x5, [x21]
  94:	mov	x1, #0x0                   	// #0
  98:	ldr	w25, [x19, #8]
  9c:	add	x26, sp, #0xa0
  a0:	ldr	x6, [x21, #16]
  a4:	mov	x2, x26
  a8:	ldr	x27, [x19]
  ac:	bfxil	x1, x25, #0, #32
  b0:	mov	w3, #0x18                  	// #24
  b4:	stp	x4, x5, [sp, #160]
  b8:	bfi	x1, x24, #32, #32
  bc:	mov	x0, x27
  c0:	str	x6, [sp, #176]
  c4:	bl	0 <_ZN7__ubsan12ignoreReportENS_14SourceLocationENS_13ReportOptionsENS_9ErrorTypeE>
  c8:	tst	w0, #0xff
  cc:	b.ne	25c <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x25c>  // b.any
  d0:	mov	w28, #0x1                   	// #1
  d4:	str	w28, [sp, #304]
  d8:	str	x27, [sp, #312]
  dc:	add	x8, sp, #0xe0
  e0:	str	w25, [sp, #320]
  e4:	mov	x0, x8
  e8:	str	w24, [sp, #324]
  ec:	mov	x1, x26
  f0:	ldp	x6, x7, [sp, #304]
  f4:	stp	x6, x7, [sp, #112]
  f8:	add	x2, sp, #0x70
  fc:	ldp	x6, x7, [x21]
 100:	mov	w3, #0x18                  	// #24
 104:	ldp	x4, x5, [sp, #320]
 108:	stp	x4, x5, [sp, #128]
 10c:	add	x26, sp, #0x130
 110:	ldr	x5, [x21, #16]
 114:	str	x8, [sp, #104]
 118:	ldr	x9, [sp, #336]
 11c:	str	x9, [sp, #144]
 120:	stp	x6, x7, [sp, #160]
 124:	str	x5, [sp, #176]
 128:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
 12c:	adrp	x3, 0 <_ZN7__ubsan14TypeCheckKindsE>
 130:	ldrb	w7, [x19, #32]
 134:	ldr	x1, [x19, #16]
 138:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 13c:	ldr	x3, [x3]
 140:	add	x2, x2, #0x0
 144:	mov	w4, #0x2                   	// #2
 148:	mov	x6, #0x1800000000          	// #103079215104
 14c:	mov	w5, #0x5                   	// #5
 150:	mov	x0, x26
 154:	ldr	x3, [x3, x7, lsl #3]
 158:	str	w28, [sp, #304]
 15c:	str	x27, [sp, #312]
 160:	str	w25, [sp, #320]
 164:	str	w24, [sp, #324]
 168:	stp	x6, x2, [sp, #344]
 16c:	str	wzr, [sp, #368]
 170:	str	x3, [sp, #384]
 174:	str	w5, [sp, #400]
 178:	str	x20, [sp, #416]
 17c:	str	w4, [sp, #624]
 180:	str	wzr, [sp, #632]
 184:	str	xzr, [sp, #640]
 188:	str	xzr, [sp, #648]
 18c:	str	wzr, [sp, #672]
 190:	str	xzr, [sp, #680]
 194:	str	xzr, [sp, #688]
 198:	str	xzr, [sp, #712]
 19c:	str	wzr, [sp, #720]
 1a0:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
 1a4:	mov	x0, x26
 1a8:	bl	0 <_ZN7__ubsan4DiagD1Ev>
 1ac:	add	x1, x20, #0x8
 1b0:	mov	w4, #0x2                   	// #2
 1b4:	ldr	x8, [sp, #104]
 1b8:	cbz	x22, 2d0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x2d0>
 1bc:	str	x8, [sp, #104]
 1c0:	cbnz	x23, 274 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x274>
 1c4:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 1c8:	mov	x5, #0x1                   	// #1
 1cc:	mov	x0, x26
 1d0:	add	x2, x2, #0x0
 1d4:	adrp	x3, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 1d8:	movk	x5, #0x18, lsl #32
 1dc:	add	x3, x3, #0x0
 1e0:	str	w4, [sp, #304]
 1e4:	str	xzr, [sp, #312]
 1e8:	str	xzr, [sp, #320]
 1ec:	str	x20, [sp, #328]
 1f0:	stp	x5, x3, [sp, #344]
 1f4:	str	w28, [sp, #368]
 1f8:	str	x22, [sp, #384]
 1fc:	str	w28, [sp, #624]
 200:	str	w4, [sp, #632]
 204:	str	xzr, [sp, #640]
 208:	str	xzr, [sp, #648]
 20c:	str	x20, [sp, #656]
 210:	str	w4, [sp, #672]
 214:	str	xzr, [sp, #680]
 218:	str	xzr, [sp, #688]
 21c:	str	x1, [sp, #696]
 220:	str	x2, [sp, #712]
 224:	str	w28, [sp, #720]
 228:	bl	0 <_ZN7__ubsan4DiagD1Ev>
 22c:	ldr	x8, [sp, #104]
 230:	mov	x0, x8
 234:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
 238:	mov	w0, #0x1                   	// #1
 23c:	ldp	x19, x20, [sp]
 240:	ldp	x21, x22, [sp, #16]
 244:	ldp	x23, x24, [sp, #32]
 248:	ldp	x25, x26, [sp, #48]
 24c:	ldp	x27, x28, [sp, #64]
 250:	ldr	x30, [sp, #80]
 254:	add	sp, sp, #0x2e0
 258:	ret
 25c:	ldp	x23, x24, [sp, #32]
 260:	ldp	x25, x26, [sp, #48]
 264:	ldp	x27, x28, [sp, #64]
 268:	b	30 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x30>
 26c:	ldp	x23, x24, [sp, #32]
 270:	b	30 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x30>
 274:	mov	x7, #0x1                   	// #1
 278:	sub	x9, x20, x23
 27c:	ldr	x6, [sp, #216]
 280:	adrp	x3, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 284:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 288:	add	x3, x3, #0x0
 28c:	movk	x7, #0x18, lsl #32
 290:	mov	w5, #0x3                   	// #3
 294:	mov	x0, x26
 298:	add	x2, x2, #0x0
 29c:	str	w4, [sp, #304]
 2a0:	str	xzr, [sp, #312]
 2a4:	str	xzr, [sp, #320]
 2a8:	str	x9, [sp, #328]
 2ac:	stp	x7, x3, [sp, #344]
 2b0:	str	w4, [sp, #368]
 2b4:	stp	x23, xzr, [sp, #384]
 2b8:	str	w28, [sp, #400]
 2bc:	str	x22, [sp, #416]
 2c0:	str	w28, [sp, #432]
 2c4:	str	x6, [sp, #448]
 2c8:	str	w5, [sp, #624]
 2cc:	b	200 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x200>
 2d0:	add	x23, x23, #0x100, lsl #12
 2d4:	cmp	x23, #0x200, lsl #12
 2d8:	b.ls	320 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x320>  // b.plast
 2dc:	adrp	x3, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 2e0:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 2e4:	mov	x0, x26
 2e8:	add	x3, x3, #0x0
 2ec:	add	x2, x2, #0x0
 2f0:	str	x8, [sp, #104]
 2f4:	mov	x5, #0x1                   	// #1
 2f8:	str	w4, [sp, #304]
 2fc:	movk	x5, #0x18, lsl #32
 300:	str	xzr, [sp, #312]
 304:	str	xzr, [sp, #320]
 308:	str	x20, [sp, #328]
 30c:	stp	x5, x3, [sp, #344]
 310:	str	w28, [sp, #368]
 314:	str	xzr, [sp, #384]
 318:	str	w28, [sp, #624]
 31c:	b	200 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x200>
 320:	adrp	x3, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 324:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 328:	mov	x0, x26
 32c:	add	x3, x3, #0x0
 330:	add	x2, x2, #0x0
 334:	b	2f4 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE+0x2f4>

0000000000000338 <__ubsan_handle_dynamic_type_cache_miss>:
 338:	stp	x29, x30, [sp, #-80]!
 33c:	mov	x29, sp
 340:	add	x3, x29, #0x10
 344:	stp	xzr, x30, [x29, #56]
 348:	ldp	x4, x5, [x29, #56]
 34c:	stp	x4, x5, [x29, #16]
 350:	str	x29, [x29, #32]
 354:	bl	0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 358:	ldp	x29, x30, [sp], #80
 35c:	ret

0000000000000360 <__ubsan_handle_dynamic_type_cache_miss_abort>:
 360:	stp	x29, x30, [sp, #-80]!
 364:	mov	x29, sp
 368:	add	x3, x29, #0x10
 36c:	stp	xzr, x30, [x29, #56]
 370:	ldp	x4, x5, [x29, #56]
 374:	stp	x4, x5, [x29, #16]
 378:	str	x29, [x29, #32]
 37c:	bl	0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 380:	tst	w0, #0xff
 384:	b.ne	390 <__ubsan_handle_dynamic_type_cache_miss_abort+0x30>  // b.any
 388:	ldp	x29, x30, [sp], #80
 38c:	ret
 390:	bl	0 <_ZN11__sanitizer3DieEv>
 394:	nop

0000000000000398 <__ubsan_handle_cfi_bad_type>:
 398:	sub	sp, sp, #0x2d0
 39c:	stp	x19, x20, [sp]
 3a0:	mov	x20, x3
 3a4:	and	w19, w2, #0xff
 3a8:	stp	x27, x28, [sp, #64]
 3ac:	mov	x27, x0
 3b0:	add	x0, x0, #0x14
 3b4:	stp	x21, x22, [sp, #16]
 3b8:	mov	x21, x1
 3bc:	mov	w1, #0xffffffff            	// #-1
 3c0:	stp	x23, x24, [sp, #32]
 3c4:	stp	x25, x26, [sp, #48]
 3c8:	str	x30, [sp, #80]
 3cc:	ldxr	w22, [x0]
 3d0:	stxr	w2, w1, [x0]
 3d4:	cbnz	w2, 3cc <__ubsan_handle_cfi_bad_type+0x34>
 3d8:	dmb	ish
 3dc:	ldp	x4, x5, [x20]
 3e0:	mov	x1, #0x0                   	// #0
 3e4:	ldr	w23, [x27, #16]
 3e8:	add	x26, sp, #0x90
 3ec:	ldr	x6, [x20, #16]
 3f0:	mov	x2, x26
 3f4:	ldr	x24, [x27, #8]
 3f8:	bfxil	x1, x23, #0, #32
 3fc:	mov	w3, #0x19                  	// #25
 400:	stp	x4, x5, [sp, #144]
 404:	bfi	x1, x22, #32, #32
 408:	mov	x0, x24
 40c:	str	x6, [sp, #160]
 410:	bl	0 <_ZN7__ubsan12ignoreReportENS_14SourceLocationENS_13ReportOptionsENS_9ErrorTypeE>
 414:	tst	w0, #0xff
 418:	b.ne	648 <__ubsan_handle_cfi_bad_type+0x2b0>  // b.any
 41c:	mov	w0, #0x1                   	// #1
 420:	str	w0, [sp, #288]
 424:	str	x24, [sp, #296]
 428:	add	x25, sp, #0xd0
 42c:	str	w23, [sp, #304]
 430:	mov	x1, x26
 434:	str	w22, [sp, #308]
 438:	add	x2, sp, #0x60
 43c:	ldp	x8, x9, [x20]
 440:	mov	x0, x25
 444:	ldp	x4, x5, [sp, #288]
 448:	stp	x4, x5, [sp, #96]
 44c:	mov	w3, #0x19                  	// #25
 450:	ldp	x6, x7, [sp, #304]
 454:	mov	x26, #0x0                   	// #0
 458:	ldr	x4, [x20, #16]
 45c:	stp	x6, x7, [sp, #112]
 460:	ldr	x10, [sp, #320]
 464:	str	x10, [sp, #128]
 468:	stp	x8, x9, [sp, #144]
 46c:	str	x4, [sp, #160]
 470:	bl	0 <_ZN7__ubsan12ScopedReportC1ENS_13ReportOptionsENS_8LocationENS_9ErrorTypeE>
 474:	cbnz	w19, 698 <__ubsan_handle_cfi_bad_type+0x300>
 478:	ldrb	w0, [x27]
 47c:	cmp	w0, #0x2
 480:	b.eq	76c <__ubsan_handle_cfi_bad_type+0x3d4>  // b.none
 484:	b.hi	668 <__ubsan_handle_cfi_bad_type+0x2d0>  // b.pmore
 488:	cmp	w0, #0x0
 48c:	adrp	x19, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 490:	adrp	x0, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 494:	add	x19, x19, #0x0
 498:	add	x0, x0, #0x0
 49c:	csel	x19, x19, x0, ne  // ne = any
 4a0:	ldr	x1, [x27, #24]
 4a4:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 4a8:	add	x2, x2, #0x0
 4ac:	mov	x3, #0x1900000000          	// #107374182400
 4b0:	add	x27, sp, #0x120
 4b4:	mov	w28, #0x1                   	// #1
 4b8:	mov	x0, x27
 4bc:	str	w28, [sp, #288]
 4c0:	str	x24, [sp, #296]
 4c4:	str	w23, [sp, #304]
 4c8:	str	w22, [sp, #308]
 4cc:	stp	x3, x2, [sp, #328]
 4d0:	str	wzr, [sp, #608]
 4d4:	str	wzr, [sp, #616]
 4d8:	str	xzr, [sp, #624]
 4dc:	str	xzr, [sp, #632]
 4e0:	str	wzr, [sp, #656]
 4e4:	str	xzr, [sp, #664]
 4e8:	str	xzr, [sp, #672]
 4ec:	str	xzr, [sp, #696]
 4f0:	str	wzr, [sp, #704]
 4f4:	bl	0 <_ZN7__ubsan4DiaglsERKNS_14TypeDescriptorE>
 4f8:	ldr	w3, [x0, #320]
 4fc:	mov	x1, x0
 500:	cmp	w3, #0x8
 504:	b.eq	74c <__ubsan_handle_cfi_bad_type+0x3b4>  // b.none
 508:	ubfiz	x2, x3, #5, #32
 50c:	add	w0, w3, #0x1
 510:	add	x2, x2, #0x40
 514:	str	w0, [x1, #320]
 518:	add	x4, x1, x2
 51c:	cmp	w0, #0x8
 520:	str	wzr, [x1, x2]
 524:	str	x19, [x4, #16]
 528:	b.eq	74c <__ubsan_handle_cfi_bad_type+0x3b4>  // b.none
 52c:	ubfiz	x0, x0, #5, #32
 530:	add	w3, w3, #0x2
 534:	add	x2, x0, #0x40
 538:	str	w3, [x1, #320]
 53c:	add	x3, x1, x2
 540:	mov	w4, #0x5                   	// #5
 544:	mov	x0, x27
 548:	str	w4, [x1, x2]
 54c:	str	x21, [x3, #16]
 550:	bl	0 <_ZN7__ubsan4DiagD1Ev>
 554:	cbz	x26, 718 <__ubsan_handle_cfi_bad_type+0x380>
 558:	mov	x2, #0x1                   	// #1
 55c:	mov	x0, x27
 560:	adrp	x1, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 564:	mov	w3, #0x2                   	// #2
 568:	add	x1, x1, #0x0
 56c:	movk	x2, #0x19, lsl #32
 570:	str	w3, [sp, #288]
 574:	str	xzr, [sp, #296]
 578:	str	xzr, [sp, #304]
 57c:	str	x21, [sp, #312]
 580:	stp	x2, x1, [sp, #328]
 584:	str	w28, [sp, #352]
 588:	str	x26, [sp, #368]
 58c:	str	w28, [sp, #608]
 590:	str	wzr, [sp, #616]
 594:	add	x26, sp, #0xb0
 598:	str	xzr, [sp, #624]
 59c:	adrp	x19, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 5a0:	str	xzr, [sp, #632]
 5a4:	add	x19, x19, #0x0
 5a8:	str	wzr, [sp, #656]
 5ac:	str	xzr, [sp, #664]
 5b0:	str	xzr, [sp, #672]
 5b4:	str	xzr, [sp, #696]
 5b8:	str	wzr, [sp, #704]
 5bc:	bl	0 <_ZN7__ubsan4DiagD1Ev>
 5c0:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 5c4:	str	xzr, [sp, #176]
 5c8:	mov	x1, x21
 5cc:	mov	x2, x26
 5d0:	mov	x3, x27
 5d4:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
 5d8:	tst	w0, #0xff
 5dc:	b.eq	5f4 <__ubsan_handle_cfi_bad_type+0x25c>  // b.none
 5e0:	ldr	x19, [sp, #176]
 5e4:	adrp	x0, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 5e8:	add	x0, x0, #0x0
 5ec:	cmp	x19, #0x0
 5f0:	csel	x19, x0, x19, eq  // eq = none
 5f4:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 5f8:	str	xzr, [sp, #176]
 5fc:	ldr	x1, [x20, #8]
 600:	mov	x2, x26
 604:	mov	x3, x27
 608:	adrp	x20, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 60c:	add	x20, x20, #0x0
 610:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
 614:	tst	w0, #0xff
 618:	b.eq	630 <__ubsan_handle_cfi_bad_type+0x298>  // b.none
 61c:	ldr	x20, [sp, #176]
 620:	adrp	x0, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 624:	add	x0, x0, #0x0
 628:	cmp	x20, #0x0
 62c:	csel	x20, x0, x20, eq  // eq = none
 630:	mov	x1, x19
 634:	mov	x0, x20
 638:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 63c:	cbnz	w0, 6ac <__ubsan_handle_cfi_bad_type+0x314>
 640:	mov	x0, x25
 644:	bl	0 <_ZN7__ubsan12ScopedReportD1Ev>
 648:	ldp	x19, x20, [sp]
 64c:	ldp	x21, x22, [sp, #16]
 650:	ldp	x23, x24, [sp, #32]
 654:	ldp	x25, x26, [sp, #48]
 658:	ldp	x27, x28, [sp, #64]
 65c:	ldr	x30, [sp, #80]
 660:	add	sp, sp, #0x2d0
 664:	ret
 668:	cmp	w0, #0x5
 66c:	b.hi	684 <__ubsan_handle_cfi_bad_type+0x2ec>  // b.pmore
 670:	cmp	w0, #0x3
 674:	b.ne	778 <__ubsan_handle_cfi_bad_type+0x3e0>  // b.any
 678:	adrp	x19, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 67c:	add	x19, x19, #0x0
 680:	b	4a0 <__ubsan_handle_cfi_bad_type+0x108>
 684:	cmp	w0, #0x6
 688:	adrp	x19, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 68c:	add	x19, x19, #0x0
 690:	csel	x19, x19, xzr, eq  // eq = none
 694:	b	4a0 <__ubsan_handle_cfi_bad_type+0x108>
 698:	add	x8, sp, #0xb8
 69c:	mov	x0, x21
 6a0:	bl	0 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv>
 6a4:	ldr	x26, [sp, #184]
 6a8:	b	478 <__ubsan_handle_cfi_bad_type+0xe0>
 6ac:	adrp	x1, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 6b0:	mov	x3, #0x1                   	// #1
 6b4:	add	x1, x1, #0x0
 6b8:	mov	w4, #0x1                   	// #1
 6bc:	movk	x3, #0x19, lsl #32
 6c0:	mov	w2, #0x2                   	// #2
 6c4:	mov	x0, x27
 6c8:	str	w4, [sp, #288]
 6cc:	str	x24, [sp, #296]
 6d0:	str	w23, [sp, #304]
 6d4:	str	w22, [sp, #308]
 6d8:	stp	x3, x1, [sp, #328]
 6dc:	str	wzr, [sp, #352]
 6e0:	str	x20, [sp, #368]
 6e4:	str	wzr, [sp, #384]
 6e8:	str	x19, [sp, #400]
 6ec:	str	w2, [sp, #608]
 6f0:	str	wzr, [sp, #616]
 6f4:	str	xzr, [sp, #624]
 6f8:	str	xzr, [sp, #632]
 6fc:	str	wzr, [sp, #656]
 700:	str	xzr, [sp, #664]
 704:	str	xzr, [sp, #672]
 708:	str	xzr, [sp, #696]
 70c:	str	wzr, [sp, #704]
 710:	bl	0 <_ZN7__ubsan4DiagD1Ev>
 714:	b	640 <__ubsan_handle_cfi_bad_type+0x2a8>
 718:	mov	x2, #0x1                   	// #1
 71c:	adrp	x1, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 720:	mov	w3, #0x2                   	// #2
 724:	add	x1, x1, #0x0
 728:	movk	x2, #0x19, lsl #32
 72c:	mov	x0, x27
 730:	str	w3, [sp, #288]
 734:	str	xzr, [sp, #296]
 738:	str	xzr, [sp, #304]
 73c:	str	x21, [sp, #312]
 740:	stp	x2, x1, [sp, #328]
 744:	str	wzr, [sp, #608]
 748:	b	590 <__ubsan_handle_cfi_bad_type+0x1f8>
 74c:	adrp	x2, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 750:	adrp	x0, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 754:	add	x2, x2, #0x0
 758:	add	x0, x0, #0x0
 75c:	mov	x4, #0x0                   	// #0
 760:	mov	x3, #0x0                   	// #0
 764:	mov	w1, #0xbf                  	// #191
 768:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 76c:	adrp	x19, 0 <_ZL26HandleDynamicTypeCacheMissPN7__ubsan24DynamicTypeCacheMissDataEmmNS_13ReportOptionsE>
 770:	add	x19, x19, #0x0
 774:	b	4a0 <__ubsan_handle_cfi_bad_type+0x108>
 778:	bl	0 <_ZN11__sanitizer3DieEv>

ubsan_init.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN7__ubsan22GetSanititizerToolNameEv>:
   0:	adrp	x0, 0 <_ZN7__ubsan22GetSanititizerToolNameEv>
   4:	add	x0, x0, #0x0
   8:	ret
   c:	nop

0000000000000010 <_ZN7__ubsan16InitAsStandaloneEv>:
  10:	stp	x19, x20, [sp, #-32]!
  14:	adrp	x19, 0 <_ZN7__ubsan22GetSanititizerToolNameEv>
  18:	add	x0, x19, #0x0
  1c:	mov	w2, #0x1                   	// #1
  20:	str	x30, [sp, #24]
  24:	ldxrb	w1, [x0]
  28:	stxrb	w3, w2, [x0]
  2c:	cbnz	w3, 24 <_ZN7__ubsan16InitAsStandaloneEv+0x14>
  30:	dmb	ish
  34:	tst	w1, #0xff
  38:	b.eq	40 <_ZN7__ubsan16InitAsStandaloneEv+0x30>  // b.none
  3c:	bl	0 <_ZN7__ubsan22GetSanititizerToolNameEv>
  40:	add	x20, x19, #0x0
  44:	ldrb	w0, [x20, #1]
  48:	cbz	w0, 60 <_ZN7__ubsan16InitAsStandaloneEv+0x50>
  4c:	dmb	ish
  50:	strb	wzr, [x19]
  54:	ldr	x30, [sp, #24]
  58:	ldp	x19, x20, [sp], #32
  5c:	ret
  60:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  64:	adrp	x1, 0 <_ZN7__ubsan22GetSanititizerToolNameEv>
  68:	add	x1, x1, #0x0
  6c:	str	x21, [sp, #16]
  70:	ldr	x0, [x0]
  74:	adrp	x21, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  78:	str	x1, [x0]
  7c:	bl	0 <_ZN11__sanitizer15CacheBinaryNameEv>
  80:	bl	0 <_ZN7__ubsan15InitializeFlagsEv>
  84:	ldr	x21, [x21]
  88:	ldr	x0, [x21, #40]
  8c:	bl	0 <__sanitizer_set_report_path>
  90:	bl	0 <_ZN11__sanitizer14AndroidLogInitEv>
  94:	ldrb	w0, [x21, #161]
  98:	ldr	x1, [x21, #168]
  9c:	bl	0 <_ZN11__sanitizer18InitializeCoverageEbPKc>
  a0:	bl	0 <_ZN7__ubsan22InitializeSuppressionsEv>
  a4:	mov	w0, #0x1                   	// #1
  a8:	strb	w0, [x20, #1]
  ac:	ldr	x21, [sp, #16]
  b0:	dmb	ish
  b4:	strb	wzr, [x19]
  b8:	ldr	x30, [sp, #24]
  bc:	ldp	x19, x20, [sp], #32
  c0:	ret
  c4:	nop

00000000000000c8 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv>:
  c8:	stp	x19, x20, [sp, #-32]!
  cc:	adrp	x19, 0 <_ZN7__ubsan22GetSanititizerToolNameEv>
  d0:	add	x0, x19, #0x0
  d4:	mov	w2, #0x1                   	// #1
  d8:	str	x30, [sp, #24]
  dc:	ldxrb	w1, [x0]
  e0:	stxrb	w3, w2, [x0]
  e4:	cbnz	w3, dc <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv+0x14>
  e8:	dmb	ish
  ec:	tst	w1, #0xff
  f0:	b.eq	f8 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv+0x30>  // b.none
  f4:	bl	0 <_ZN7__ubsan22GetSanititizerToolNameEv>
  f8:	add	x20, x19, #0x0
  fc:	ldrb	w0, [x20, #1]
 100:	cbz	w0, 118 <_ZN7__ubsan27InitAsStandaloneIfNecessaryEv+0x50>
 104:	dmb	ish
 108:	strb	wzr, [x19]
 10c:	ldr	x30, [sp, #24]
 110:	ldp	x19, x20, [sp], #32
 114:	ret
 118:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 11c:	adrp	x1, 0 <_ZN7__ubsan22GetSanititizerToolNameEv>
 120:	add	x1, x1, #0x0
 124:	str	x21, [sp, #16]
 128:	ldr	x0, [x0]
 12c:	adrp	x21, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 130:	str	x1, [x0]
 134:	bl	0 <_ZN11__sanitizer15CacheBinaryNameEv>
 138:	bl	0 <_ZN7__ubsan15InitializeFlagsEv>
 13c:	ldr	x21, [x21]
 140:	ldr	x0, [x21, #40]
 144:	bl	0 <__sanitizer_set_report_path>
 148:	bl	0 <_ZN11__sanitizer14AndroidLogInitEv>
 14c:	ldrb	w0, [x21, #161]
 150:	ldr	x1, [x21, #168]
 154:	bl	0 <_ZN11__sanitizer18InitializeCoverageEbPKc>
 158:	bl	0 <_ZN7__ubsan22InitializeSuppressionsEv>
 15c:	mov	w0, #0x1                   	// #1
 160:	strb	w0, [x20, #1]
 164:	ldr	x21, [sp, #16]
 168:	dmb	ish
 16c:	strb	wzr, [x19]
 170:	ldr	x30, [sp, #24]
 174:	ldp	x19, x20, [sp], #32
 178:	ret
 17c:	nop

0000000000000180 <_ZN7__ubsan12InitAsPluginEv>:
 180:	stp	x19, x20, [sp, #-32]!
 184:	adrp	x19, 0 <_ZN7__ubsan22GetSanititizerToolNameEv>
 188:	add	x0, x19, #0x0
 18c:	mov	w2, #0x1                   	// #1
 190:	str	x30, [sp, #16]
 194:	ldxrb	w1, [x0]
 198:	stxrb	w3, w2, [x0]
 19c:	cbnz	w3, 194 <_ZN7__ubsan12InitAsPluginEv+0x14>
 1a0:	dmb	ish
 1a4:	tst	w1, #0xff
 1a8:	b.eq	1b0 <_ZN7__ubsan12InitAsPluginEv+0x30>  // b.none
 1ac:	bl	0 <_ZN7__ubsan22GetSanititizerToolNameEv>
 1b0:	add	x20, x19, #0x0
 1b4:	ldrb	w0, [x20, #1]
 1b8:	cbz	w0, 1d0 <_ZN7__ubsan12InitAsPluginEv+0x50>
 1bc:	dmb	ish
 1c0:	strb	wzr, [x19]
 1c4:	ldr	x30, [sp, #16]
 1c8:	ldp	x19, x20, [sp], #32
 1cc:	ret
 1d0:	bl	0 <_ZN7__ubsan22InitializeSuppressionsEv>
 1d4:	mov	w0, #0x1                   	// #1
 1d8:	strb	w0, [x20, #1]
 1dc:	dmb	ish
 1e0:	strb	wzr, [x19]
 1e4:	ldr	x30, [sp, #16]
 1e8:	ldp	x19, x20, [sp], #32
 1ec:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

ubsan_monitor.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>:
   0:	adrp	x1, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
   4:	str	x0, [x1]
   8:	ret
   c:	nop

0000000000000010 <__ubsan_on_report>:
  10:	ret
  14:	nop

0000000000000018 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE>:
  18:	stp	x19, x20, [sp, #-80]!
  1c:	add	x20, x0, #0x10
  20:	mov	x19, x0
  24:	stp	x21, x22, [sp, #16]
  28:	stp	x23, x24, [sp, #32]
  2c:	stp	x25, x26, [sp, #48]
  30:	str	x30, [sp, #64]
  34:	stp	x1, x2, [x0]
  38:	ldr	x0, [x3, #24]
  3c:	stp	xzr, xzr, [x20, #8]
  40:	str	xzr, [x19, #16]
  44:	adds	x21, x0, #0x1
  48:	b.ne	70 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x58>  // b.any
  4c:	str	xzr, [x20, #24]
  50:	adrp	x2, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
  54:	adrp	x0, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
  58:	add	x2, x2, #0x0
  5c:	add	x0, x0, #0x0
  60:	mov	x4, #0x0                   	// #0
  64:	mov	x3, #0x0                   	// #0
  68:	mov	w1, #0x1b6                 	// #438
  6c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  70:	adrp	x25, 0 <_ZN11__sanitizer14PageSizeCachedE>
  74:	mov	x22, x3
  78:	ldr	x23, [x25]
  7c:	ldr	x0, [x23]
  80:	cbz	x0, 138 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x120>
  84:	sub	x1, x0, #0x1
  88:	tst	x0, x1
  8c:	b.ne	1b0 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x198>  // b.any
  90:	add	x1, x21, x1
  94:	neg	x0, x0
  98:	and	x24, x1, x0
  9c:	mov	w2, #0x0                   	// #0
  a0:	mov	x0, x24
  a4:	adrp	x26, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
  a8:	add	x1, x26, #0x0
  ac:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  b0:	ldr	x2, [x20, #16]
  b4:	mov	x23, x0
  b8:	ldr	x1, [x19, #16]
  bc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  c0:	ldr	x1, [x20, #8]
  c4:	ldr	x0, [x19, #16]
  c8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  cc:	ldr	x2, [x20, #16]
  d0:	str	x23, [x19, #16]
  d4:	str	x24, [x20, #8]
  d8:	cmp	x21, x2
  dc:	b.ls	fc <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0xe4>  // b.plast
  e0:	cmp	x21, x24
  e4:	b.hi	144 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x12c>  // b.pmore
  e8:	add	x0, x23, x2
  ec:	mov	w1, #0x0                   	// #0
  f0:	sub	x2, x21, x2
  f4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  f8:	ldr	x23, [x19, #16]
  fc:	stp	x21, xzr, [x20, #16]
 100:	mov	x0, x19
 104:	strb	wzr, [x23]
 108:	bl	0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 10c:	ldr	x2, [x22]
 110:	mov	x0, x20
 114:	adrp	x1, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 118:	add	x1, x1, #0x0
 11c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 120:	ldp	x21, x22, [sp, #16]
 124:	ldp	x23, x24, [sp, #32]
 128:	ldp	x25, x26, [sp, #48]
 12c:	ldr	x30, [sp, #64]
 130:	ldp	x19, x20, [sp], #80
 134:	b	10 <__ubsan_on_report>
 138:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 13c:	str	x0, [x23]
 140:	b	84 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x6c>
 144:	ldr	x25, [x25]
 148:	ldr	x0, [x25]
 14c:	cbz	x0, 1a4 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x18c>
 150:	sub	x1, x0, #0x1
 154:	tst	x0, x1
 158:	b.ne	1b0 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x198>  // b.any
 15c:	add	x1, x21, x1
 160:	neg	x0, x0
 164:	and	x24, x1, x0
 168:	mov	w2, #0x0                   	// #0
 16c:	add	x1, x26, #0x0
 170:	mov	x0, x24
 174:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 178:	mov	x23, x0
 17c:	ldr	x2, [x20, #16]
 180:	ldr	x1, [x19, #16]
 184:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 188:	ldr	x1, [x20, #8]
 18c:	ldr	x0, [x19, #16]
 190:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 194:	ldr	x2, [x20, #16]
 198:	str	x23, [x19, #16]
 19c:	str	x24, [x20, #8]
 1a0:	b	e8 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0xd0>
 1a4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 1a8:	str	x0, [x25]
 1ac:	b	150 <_ZN7__ubsan23UndefinedBehaviorReportC1EPKcRNS_8LocationERN11__sanitizer20InternalScopedStringE+0x138>
 1b0:	adrp	x0, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 1b4:	add	x0, x0, #0x0
 1b8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 1bc:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000001c0 <__ubsan_get_current_report_data>:
 1c0:	cmp	x0, #0x0
 1c4:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 1c8:	b.eq	298 <__ubsan_get_current_report_data+0xd8>  // b.none
 1cc:	cmp	x2, #0x0
 1d0:	ccmp	x3, #0x0, #0x4, ne  // ne = any
 1d4:	b.eq	298 <__ubsan_get_current_report_data+0xd8>  // b.none
 1d8:	cmp	x4, #0x0
 1dc:	ccmp	x5, #0x0, #0x4, ne  // ne = any
 1e0:	b.eq	298 <__ubsan_get_current_report_data+0xd8>  // b.none
 1e4:	adrp	x6, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 1e8:	ldr	x6, [x6]
 1ec:	ldr	x9, [x6, #16]
 1f0:	ldrb	w8, [x9]
 1f4:	sub	w7, w8, #0x61
 1f8:	and	w7, w7, #0xff
 1fc:	cmp	w7, #0x19
 200:	b.ls	248 <__ubsan_get_current_report_data+0x88>  // b.plast
 204:	ldr	x7, [x6]
 208:	str	x7, [x0]
 20c:	ldp	x7, x0, [x6, #8]
 210:	str	x0, [x1]
 214:	ldr	w1, [x7]
 218:	cmp	w1, #0x1
 21c:	b.eq	26c <__ubsan_get_current_report_data+0xac>  // b.none
 220:	adrp	x0, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 224:	add	x0, x0, #0x0
 228:	str	x0, [x2]
 22c:	cmp	w1, #0x2
 230:	str	wzr, [x4]
 234:	str	wzr, [x3]
 238:	b.eq	28c <__ubsan_get_current_report_data+0xcc>  // b.none
 23c:	mov	x0, #0x0                   	// #0
 240:	str	x0, [x5]
 244:	ret
 248:	sub	w8, w8, #0x20
 24c:	strb	w8, [x9]
 250:	ldr	x7, [x6]
 254:	str	x7, [x0]
 258:	ldp	x7, x0, [x6, #8]
 25c:	str	x0, [x1]
 260:	ldr	w1, [x7]
 264:	cmp	w1, #0x1
 268:	b.ne	220 <__ubsan_get_current_report_data+0x60>  // b.any
 26c:	ldr	x8, [x7, #8]
 270:	mov	x0, #0x0                   	// #0
 274:	ldp	w6, w1, [x7, #16]
 278:	str	x8, [x2]
 27c:	str	w6, [x3]
 280:	str	w1, [x4]
 284:	str	x0, [x5]
 288:	ret
 28c:	ldr	x0, [x7, #24]
 290:	str	x0, [x5]
 294:	ret
 298:	str	x30, [sp, #-16]!
 29c:	adrp	x2, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 2a0:	adrp	x0, 0 <_ZN7__ubsan31RegisterUndefinedBehaviorReportEPNS_23UndefinedBehaviorReportE>
 2a4:	add	x2, x2, #0x0
 2a8:	add	x0, x0, #0x0
 2ac:	mov	x4, #0x0                   	// #0
 2b0:	mov	x3, #0x0                   	// #0
 2b4:	mov	w1, #0x30                  	// #48
 2b8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

ubsan_type_hash.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN7__ubsan28getDynamicTypeInfoFromObjectEPv>:
   0:	ldr	x0, [x0]
   4:	str	x30, [sp, #-16]!
   8:	bl	0 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv>
   c:	ldr	x30, [sp], #16
  10:	ret

ubsan_type_hash_itanium.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x20, x0
   8:	str	x30, [sp, #40]
   c:	cbz	x1, 104 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0x104>
  10:	cbz	x0, 10c <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0x10c>
  14:	stp	x21, x22, [sp, #16]
  18:	adrp	x22, 0 <_ZTIN10__cxxabiv120__si_class_type_infoE>
  1c:	adrp	x21, 0 <_ZTIN10__cxxabiv117__class_type_infoE>
  20:	ldr	x22, [x22]
  24:	str	x23, [sp, #32]
  28:	ldr	x21, [x21]
  2c:	mov	x23, x1
  30:	b	3c <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0x3c>
  34:	ldr	x20, [x0, #16]
  38:	cbz	x20, cc <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xcc>
  3c:	mov	x2, x22
  40:	mov	x1, x21
  44:	mov	x0, x20
  48:	mov	x3, #0x0                   	// #0
  4c:	bl	0 <__dynamic_cast>
  50:	mov	x19, x0
  54:	cbnz	x0, 34 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0x34>
  58:	adrp	x2, 0 <_ZTIN10__cxxabiv121__vmi_class_type_infoE>
  5c:	mov	x1, x21
  60:	mov	x0, x20
  64:	mov	x3, #0x0                   	// #0
  68:	ldr	x2, [x2]
  6c:	bl	0 <__dynamic_cast>
  70:	cbz	x0, b4 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xb4>
  74:	ldr	w21, [x0, #20]
  78:	cbz	w21, b4 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xb4>
  7c:	sub	w21, w21, #0x1
  80:	add	x1, x0, #0x28
  84:	add	x20, x0, #0x18
  88:	add	x21, x1, w21, uxtw #4
  8c:	nop
  90:	ldr	x0, [x20, #8]
  94:	sub	x1, x23, x0, asr #8
  98:	tbnz	w0, #0, a8 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xa8>
  9c:	ldr	x0, [x20]
  a0:	bl	0 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl>
  a4:	cbnz	x0, e8 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xe8>
  a8:	add	x20, x20, #0x10
  ac:	cmp	x20, x21
  b0:	b.ne	90 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0x90>  // b.any
  b4:	ldp	x21, x22, [sp, #16]
  b8:	ldr	x23, [sp, #32]
  bc:	mov	x0, x19
  c0:	ldr	x30, [sp, #40]
  c4:	ldp	x19, x20, [sp], #48
  c8:	ret
  cc:	mov	x19, #0x0                   	// #0
  d0:	mov	x0, x19
  d4:	ldp	x21, x22, [sp, #16]
  d8:	ldr	x23, [sp, #32]
  dc:	ldr	x30, [sp, #40]
  e0:	ldp	x19, x20, [sp], #48
  e4:	ret
  e8:	mov	x19, x0
  ec:	mov	x0, x19
  f0:	ldp	x21, x22, [sp, #16]
  f4:	ldr	x23, [sp, #32]
  f8:	ldr	x30, [sp, #40]
  fc:	ldp	x19, x20, [sp], #48
 100:	ret
 104:	mov	x19, x0
 108:	b	bc <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xbc>
 10c:	mov	x19, #0x0                   	// #0
 110:	b	bc <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl+0xbc>
 114:	nop

0000000000000118 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l>:
 118:	stp	x19, x20, [sp, #-48]!
 11c:	mov	x19, x0
 120:	mov	x20, x1
 124:	ldr	x0, [x0, #8]
 128:	stp	x23, x30, [sp, #32]
 12c:	mov	x23, x2
 130:	ldr	x1, [x1, #8]
 134:	cmp	x1, x0
 138:	b.eq	214 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0xfc>  // b.none
 13c:	stp	x21, x22, [sp, #16]
 140:	adrp	x22, 0 <_ZTIN10__cxxabiv120__si_class_type_infoE>
 144:	adrp	x21, 0 <_ZTIN10__cxxabiv117__class_type_infoE>
 148:	ldr	x22, [x22]
 14c:	ldr	x21, [x21]
 150:	b	168 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0x50>
 154:	ldr	x19, [x0, #16]
 158:	ldr	x1, [x20, #8]
 15c:	ldr	x0, [x19, #8]
 160:	cmp	x0, x1
 164:	b.eq	210 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0xf8>  // b.none
 168:	ldrb	w3, [x0]
 16c:	cmp	w3, #0x2a
 170:	b.eq	17c <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0x64>  // b.none
 174:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 178:	cbz	w0, 210 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0xf8>
 17c:	mov	x2, x22
 180:	mov	x1, x21
 184:	mov	x0, x19
 188:	mov	x3, #0x0                   	// #0
 18c:	bl	0 <__dynamic_cast>
 190:	cbnz	x0, 154 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0x3c>
 194:	adrp	x2, 0 <_ZTIN10__cxxabiv121__vmi_class_type_infoE>
 198:	mov	x1, x21
 19c:	mov	x0, x19
 1a0:	mov	x3, #0x0                   	// #0
 1a4:	ldr	x2, [x2]
 1a8:	bl	0 <__dynamic_cast>
 1ac:	mov	x21, x0
 1b0:	cbz	x0, 1fc <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0xe4>
 1b4:	ldr	w0, [x0, #20]
 1b8:	cbz	w0, 1fc <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0xe4>
 1bc:	mov	w19, #0x0                   	// #0
 1c0:	ubfiz	x3, x19, #4, #32
 1c4:	mov	x1, x20
 1c8:	add	x3, x21, x3
 1cc:	add	w19, w19, #0x1
 1d0:	ldr	x0, [x3, #32]
 1d4:	asr	x2, x0, #8
 1d8:	tbnz	w0, #0, 228 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0x110>
 1dc:	ldr	x0, [x3, #24]
 1e0:	sub	x2, x23, x2
 1e4:	bl	118 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l>
 1e8:	tst	w0, #0xff
 1ec:	b.ne	228 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0x110>  // b.any
 1f0:	ldr	w0, [x21, #20]
 1f4:	cmp	w0, w19
 1f8:	b.ne	1c0 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l+0xa8>  // b.any
 1fc:	mov	w0, #0x0                   	// #0
 200:	ldp	x21, x22, [sp, #16]
 204:	ldp	x23, x30, [sp, #32]
 208:	ldp	x19, x20, [sp], #48
 20c:	ret
 210:	ldp	x21, x22, [sp, #16]
 214:	cmp	x23, #0x0
 218:	cset	w0, eq  // eq = none
 21c:	ldp	x23, x30, [sp, #32]
 220:	ldp	x19, x20, [sp], #48
 224:	ret
 228:	mov	w0, #0x1                   	// #1
 22c:	ldp	x21, x22, [sp, #16]
 230:	ldp	x23, x30, [sp, #32]
 234:	ldp	x19, x20, [sp], #48
 238:	ret
 23c:	nop

0000000000000240 <_ZN7__ubsan16checkDynamicTypeEPvS0_m>:
 240:	stp	x19, x20, [sp, #-48]!
 244:	mov	x19, x2
 248:	and	w2, w2, #0xffff
 24c:	eor	w6, w2, #0x1
 250:	stp	x21, x22, [sp, #16]
 254:	adrp	x21, 0 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl>
 258:	add	x5, x21, #0x0
 25c:	mov	x20, x1
 260:	ldr	x3, [x5, x6, lsl #3]
 264:	str	x30, [sp, #32]
 268:	cbz	x3, 3f8 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1b8>
 26c:	cmp	x19, x3
 270:	b.eq	3e8 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1a8>  // b.none
 274:	lsr	w1, w19, #16
 278:	add	w3, w6, w1
 27c:	add	w2, w3, #0x1
 280:	sub	w3, w3, #0x10, lsl #12
 284:	cmp	w2, #0x10, lsl #12
 288:	csel	w2, w3, w2, hi  // hi = pmore
 28c:	mov	w4, w2
 290:	ldr	x3, [x5, x4, lsl #3]
 294:	cbz	x3, 3f4 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1b4>
 298:	cmp	x19, x3
 29c:	b.eq	408 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1c8>  // b.none
 2a0:	add	w2, w1, w2
 2a4:	add	w4, w2, #0x1
 2a8:	sub	w2, w2, #0x10, lsl #12
 2ac:	cmp	w4, #0x10, lsl #12
 2b0:	csel	w4, w2, w4, hi  // hi = pmore
 2b4:	mov	w2, w4
 2b8:	ldr	x3, [x5, x2, lsl #3]
 2bc:	cbz	x3, 410 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1d0>
 2c0:	cmp	x19, x3
 2c4:	b.eq	3e4 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1a4>  // b.none
 2c8:	add	w4, w1, w4
 2cc:	add	w2, w4, #0x1
 2d0:	sub	w4, w4, #0x10, lsl #12
 2d4:	cmp	w2, #0x10, lsl #12
 2d8:	csel	w2, w4, w2, hi  // hi = pmore
 2dc:	mov	w4, w2
 2e0:	ldr	x3, [x5, x4, lsl #3]
 2e4:	cbz	x3, 3f4 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1b4>
 2e8:	cmp	x19, x3
 2ec:	b.eq	408 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1c8>  // b.none
 2f0:	add	w1, w1, w2
 2f4:	add	w2, w1, #0x1
 2f8:	sub	w1, w1, #0x10, lsl #12
 2fc:	cmp	w2, #0x10, lsl #12
 300:	csel	w2, w1, w2, hi  // hi = pmore
 304:	mov	w1, w2
 308:	ldr	x3, [x5, x1, lsl #3]
 30c:	cbz	x3, 41c <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1dc>
 310:	cmp	x19, x3
 314:	b.eq	428 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1e8>  // b.none
 318:	ldr	x3, [x5, x6, lsl #3]
 31c:	add	x21, x5, x6, lsl #3
 320:	cmp	x3, x19
 324:	b.eq	3c0 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x180>  // b.none
 328:	ldr	x22, [x0]
 32c:	mov	x1, #0x10                  	// #16
 330:	sub	x0, x22, #0x10
 334:	bl	0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>
 338:	tst	w0, #0xff
 33c:	b.eq	3ac <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x16c>  // b.none
 340:	ldur	x0, [x22, #-8]
 344:	cbz	x0, 3ac <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x16c>
 348:	ldur	x22, [x22, #-16]
 34c:	add	x1, x22, #0x100, lsl #12
 350:	cmp	x1, #0x200, lsl #12
 354:	b.hi	3ac <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x16c>  // b.pmore
 358:	adrp	x2, 0 <_ZTIN10__cxxabiv117__class_type_infoE>
 35c:	adrp	x1, 0 <_ZTISt9type_info>
 360:	mov	x3, #0x0                   	// #0
 364:	ldr	x2, [x2]
 368:	ldr	x1, [x1]
 36c:	bl	0 <__dynamic_cast>
 370:	cbz	x0, 3ac <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x16c>
 374:	neg	x2, x22
 378:	mov	x1, x20
 37c:	bl	118 <_ZL21isDerivedFromAtOffsetPKN10__cxxabiv117__class_type_infoES2_l>
 380:	ands	w0, w0, #0xff
 384:	b.eq	3ac <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x16c>  // b.none
 388:	adrp	x1, 0 <__ubsan_vptr_type_cache>
 38c:	and	x2, x19, #0x7f
 390:	str	x19, [x21]
 394:	ldr	x1, [x1]
 398:	ldp	x21, x22, [sp, #16]
 39c:	str	x19, [x1, x2, lsl #3]
 3a0:	ldr	x30, [sp, #32]
 3a4:	ldp	x19, x20, [sp], #48
 3a8:	ret
 3ac:	mov	w0, #0x0                   	// #0
 3b0:	ldp	x21, x22, [sp, #16]
 3b4:	ldr	x30, [sp, #32]
 3b8:	ldp	x19, x20, [sp], #48
 3bc:	ret
 3c0:	adrp	x1, 0 <__ubsan_vptr_type_cache>
 3c4:	and	x2, x3, #0x7f
 3c8:	mov	w0, #0x1                   	// #1
 3cc:	ldr	x1, [x1]
 3d0:	ldp	x21, x22, [sp, #16]
 3d4:	str	x3, [x1, x2, lsl #3]
 3d8:	ldr	x30, [sp, #32]
 3dc:	ldp	x19, x20, [sp], #48
 3e0:	ret
 3e4:	mov	x6, x2
 3e8:	add	x21, x21, #0x0
 3ec:	add	x21, x21, x6, lsl #3
 3f0:	b	320 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0xe0>
 3f4:	mov	x6, x4
 3f8:	mov	x3, #0x0                   	// #0
 3fc:	add	x21, x21, #0x0
 400:	add	x21, x21, x6, lsl #3
 404:	b	320 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0xe0>
 408:	mov	x6, x4
 40c:	b	3e8 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1a8>
 410:	mov	x6, x2
 414:	mov	x3, #0x0                   	// #0
 418:	b	3fc <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1bc>
 41c:	mov	x6, x1
 420:	mov	x3, #0x0                   	// #0
 424:	b	3fc <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1bc>
 428:	mov	w6, w2
 42c:	b	3e8 <_ZN7__ubsan16checkDynamicTypeEPvS0_m+0x1a8>

0000000000000430 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv>:
 430:	stp	x19, x20, [sp, #-32]!
 434:	mov	x1, #0x10                  	// #16
 438:	mov	x20, x0
 43c:	mov	x19, x8
 440:	sub	x0, x0, #0x10
 444:	str	x30, [sp, #24]
 448:	bl	0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>
 44c:	tst	w0, #0xff
 450:	b.eq	4c0 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv+0x90>  // b.none
 454:	str	x21, [sp, #16]
 458:	ldur	x21, [x20, #-8]
 45c:	cbz	x21, 4bc <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv+0x8c>
 460:	ldur	x1, [x20, #-16]
 464:	add	x0, x1, #0x100, lsl #12
 468:	cmp	x0, #0x200, lsl #12
 46c:	b.ls	488 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv+0x58>  // b.plast
 470:	ldr	x21, [sp, #16]
 474:	stp	xzr, x1, [x19]
 478:	str	xzr, [x19, #16]
 47c:	ldr	x30, [sp, #24]
 480:	ldp	x19, x20, [sp], #32
 484:	ret
 488:	neg	x20, x1
 48c:	mov	x0, x21
 490:	mov	x1, x20
 494:	bl	0 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl>
 498:	ldr	x1, [x21, #8]
 49c:	cbz	x0, 4d4 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv+0xa4>
 4a0:	ldr	x0, [x0, #8]
 4a4:	ldr	x21, [sp, #16]
 4a8:	stp	x1, x20, [x19]
 4ac:	str	x0, [x19, #16]
 4b0:	ldr	x30, [sp, #24]
 4b4:	ldp	x19, x20, [sp], #32
 4b8:	ret
 4bc:	ldr	x21, [sp, #16]
 4c0:	stp	xzr, xzr, [x19]
 4c4:	str	xzr, [x19, #16]
 4c8:	ldr	x30, [sp, #24]
 4cc:	ldp	x19, x20, [sp], #32
 4d0:	ret
 4d4:	adrp	x0, 0 <_ZL16findBaseAtOffsetPKN10__cxxabiv117__class_type_infoEl>
 4d8:	add	x0, x0, #0x0
 4dc:	b	4a4 <_ZN7__ubsan28getDynamicTypeInfoFromVtableEPv+0x74>

ubsan_type_hash_win.o:     file format elf64-littleaarch64


ubsan_value.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK7__ubsan5Value12getSIntValueEv>:
   0:	ldr	x1, [x0]
   4:	str	x30, [sp, #-16]!
   8:	ldrh	w2, [x1]
   c:	cbnz	w2, 44 <_ZNK7__ubsan5Value12getSIntValueEv+0x44>
  10:	ldrh	w1, [x1, #2]
  14:	tbz	w1, #0, 44 <_ZNK7__ubsan5Value12getSIntValueEv+0x44>
  18:	asr	w2, w1, #1
  1c:	mov	w1, #0x1                   	// #1
  20:	lsl	w1, w1, w2
  24:	cmp	w1, #0x40
  28:	b.ls	64 <_ZNK7__ubsan5Value12getSIntValueEv+0x64>  // b.plast
  2c:	cmp	w1, #0x80
  30:	b.ne	c4 <_ZNK7__ubsan5Value12getSIntValueEv+0xc4>  // b.any
  34:	ldr	x1, [x0, #8]
  38:	ldr	x30, [sp], #16
  3c:	ldp	x0, x1, [x1]
  40:	ret
  44:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
  48:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
  4c:	add	x2, x2, #0x0
  50:	add	x0, x0, #0x0
  54:	mov	x4, #0x0                   	// #0
  58:	mov	x3, #0x0                   	// #0
  5c:	mov	w1, #0x16                  	// #22
  60:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  64:	ldr	x0, [x0, #8]
  68:	mov	w2, #0x80                  	// #128
  6c:	sub	w2, w2, w1
  70:	mov	w4, #0x3f                  	// #63
  74:	sub	w3, w2, #0x40
  78:	sub	w4, w4, w2
  7c:	lsr	x5, x0, #1
  80:	cmp	w3, #0x0
  84:	lsl	x1, x0, x3
  88:	lsr	x5, x5, x4
  8c:	csel	x1, x1, x5, ge  // ge = tcont
  90:	lsl	x0, x0, x2
  94:	csel	x0, xzr, x0, ge  // ge = tcont
  98:	lsl	x5, x1, #1
  9c:	asr	x6, x1, #63
  a0:	lsr	x0, x0, x2
  a4:	lsl	x4, x5, x4
  a8:	orr	x0, x4, x0
  ac:	asr	x7, x1, x3
  b0:	csel	x0, x7, x0, ge  // ge = tcont
  b4:	asr	x1, x1, x2
  b8:	csel	x1, x6, x1, ge  // ge = tcont
  bc:	ldr	x30, [sp], #16
  c0:	ret
  c4:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
  c8:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
  cc:	add	x2, x2, #0x0
  d0:	add	x0, x0, #0x0
  d4:	mov	x4, #0x0                   	// #0
  d8:	mov	x3, #0x0                   	// #0
  dc:	mov	w1, #0x27                  	// #39
  e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  e4:	nop

00000000000000e8 <_ZNK7__ubsan5Value12getUIntValueEv>:
  e8:	ldr	x1, [x0]
  ec:	str	x30, [sp, #-16]!
  f0:	ldrh	w2, [x1]
  f4:	cbnz	w2, 124 <_ZNK7__ubsan5Value12getUIntValueEv+0x3c>
  f8:	ldrh	w1, [x1, #2]
  fc:	tbnz	w1, #0, 124 <_ZNK7__ubsan5Value12getUIntValueEv+0x3c>
 100:	asr	w1, w1, #1
 104:	mov	w2, #0x1                   	// #1
 108:	lsl	w1, w2, w1
 10c:	cmp	w1, #0x40
 110:	b.hi	144 <_ZNK7__ubsan5Value12getUIntValueEv+0x5c>  // b.pmore
 114:	mov	x1, #0x0                   	// #0
 118:	ldr	x0, [x0, #8]
 11c:	ldr	x30, [sp], #16
 120:	ret
 124:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 128:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 12c:	add	x2, x2, #0x0
 130:	add	x0, x0, #0x0
 134:	mov	x4, #0x0                   	// #0
 138:	mov	x3, #0x0                   	// #0
 13c:	mov	w1, #0x2b                  	// #43
 140:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 144:	cmp	w1, #0x80
 148:	b.ne	15c <_ZNK7__ubsan5Value12getUIntValueEv+0x74>  // b.any
 14c:	ldr	x1, [x0, #8]
 150:	ldr	x30, [sp], #16
 154:	ldp	x0, x1, [x1]
 158:	ret
 15c:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 160:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 164:	add	x2, x2, #0x0
 168:	add	x0, x0, #0x0
 16c:	mov	x4, #0x0                   	// #0
 170:	mov	x3, #0x0                   	// #0
 174:	mov	w1, #0x37                  	// #55
 178:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 17c:	nop

0000000000000180 <_ZNK7__ubsan5Value19getPositiveIntValueEv>:
 180:	ldr	x2, [x0]
 184:	str	x30, [sp, #-16]!
 188:	ldrh	w3, [x2]
 18c:	cbnz	w3, 1d4 <_ZNK7__ubsan5Value19getPositiveIntValueEv+0x54>
 190:	ldrh	w2, [x2, #2]
 194:	tbnz	w2, #0, 1a0 <_ZNK7__ubsan5Value19getPositiveIntValueEv+0x20>
 198:	ldr	x30, [sp], #16
 19c:	b	e8 <_ZNK7__ubsan5Value12getUIntValueEv>
 1a0:	asr	w2, w2, #1
 1a4:	mov	x1, x0
 1a8:	mov	w0, #0x1                   	// #1
 1ac:	lsl	w2, w0, w2
 1b0:	cmp	w2, #0x40
 1b4:	b.ls	1f4 <_ZNK7__ubsan5Value19getPositiveIntValueEv+0x74>  // b.plast
 1b8:	cmp	w2, #0x80
 1bc:	b.ne	270 <_ZNK7__ubsan5Value19getPositiveIntValueEv+0xf0>  // b.any
 1c0:	ldr	x1, [x1, #8]
 1c4:	ldp	x0, x1, [x1]
 1c8:	tbnz	x1, #63, 250 <_ZNK7__ubsan5Value19getPositiveIntValueEv+0xd0>
 1cc:	ldr	x30, [sp], #16
 1d0:	ret
 1d4:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 1d8:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 1dc:	add	x2, x2, #0x0
 1e0:	add	x0, x0, #0x0
 1e4:	mov	x4, #0x0                   	// #0
 1e8:	mov	x3, #0x0                   	// #0
 1ec:	mov	w1, #0x16                  	// #22
 1f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1f4:	ldr	x0, [x1, #8]
 1f8:	mov	w1, #0x80                  	// #128
 1fc:	sub	w2, w1, w2
 200:	mov	w4, #0x3f                  	// #63
 204:	sub	w3, w2, #0x40
 208:	sub	w4, w4, w2
 20c:	lsr	x5, x0, #1
 210:	cmp	w3, #0x0
 214:	lsl	x1, x0, x3
 218:	lsr	x5, x5, x4
 21c:	csel	x1, x1, x5, ge  // ge = tcont
 220:	lsl	x0, x0, x2
 224:	csel	x0, xzr, x0, ge  // ge = tcont
 228:	lsl	x5, x1, #1
 22c:	asr	x6, x1, #63
 230:	lsr	x0, x0, x2
 234:	lsl	x4, x5, x4
 238:	orr	x0, x4, x0
 23c:	asr	x7, x1, x3
 240:	csel	x0, x7, x0, ge  // ge = tcont
 244:	asr	x1, x1, x2
 248:	csel	x1, x6, x1, ge  // ge = tcont
 24c:	b	1c8 <_ZNK7__ubsan5Value19getPositiveIntValueEv+0x48>
 250:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 254:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 258:	add	x2, x2, #0x0
 25c:	add	x0, x0, #0x0
 260:	mov	x4, #0x0                   	// #0
 264:	mov	x3, #0x0                   	// #0
 268:	mov	w1, #0x3e                  	// #62
 26c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 270:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 274:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 278:	add	x2, x2, #0x0
 27c:	add	x0, x0, #0x0
 280:	mov	x4, #0x0                   	// #0
 284:	mov	x3, #0x0                   	// #0
 288:	mov	w1, #0x27                  	// #39
 28c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000290 <_ZNK7__ubsan5Value13getFloatValueEv>:
 290:	ldr	x1, [x0]
 294:	str	x30, [sp, #-32]!
 298:	ldrh	w2, [x1]
 29c:	cmp	w2, #0x1
 2a0:	b.ne	348 <_ZNK7__ubsan5Value13getFloatValueEv+0xb8>  // b.any
 2a4:	ldrh	w1, [x1, #2]
 2a8:	cmp	w1, #0x40
 2ac:	b.ls	2d0 <_ZNK7__ubsan5Value13getFloatValueEv+0x40>  // b.plast
 2b0:	cmp	w1, #0x60
 2b4:	b.eq	2c0 <_ZNK7__ubsan5Value13getFloatValueEv+0x30>  // b.none
 2b8:	cmp	w1, #0x80
 2bc:	b.ne	2f8 <_ZNK7__ubsan5Value13getFloatValueEv+0x68>  // b.any
 2c0:	ldr	x0, [x0, #8]
 2c4:	ldr	q0, [x0]
 2c8:	ldr	x30, [sp], #32
 2cc:	ret
 2d0:	cmp	w1, #0x20
 2d4:	b.ne	320 <_ZNK7__ubsan5Value13getFloatValueEv+0x90>  // b.any
 2d8:	add	x1, x0, #0x8
 2dc:	mov	x2, #0x4                   	// #4
 2e0:	add	x0, sp, #0x18
 2e4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2e8:	ldr	s0, [sp, #24]
 2ec:	bl	0 <__extendsftf2>
 2f0:	ldr	x30, [sp], #32
 2f4:	ret
 2f8:	cmp	w1, #0x50
 2fc:	b.eq	2c0 <_ZNK7__ubsan5Value13getFloatValueEv+0x30>  // b.none
 300:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 304:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 308:	add	x2, x2, #0x0
 30c:	add	x0, x0, #0x0
 310:	mov	x4, #0x0                   	// #0
 314:	mov	x3, #0x0                   	// #0
 318:	mov	w1, #0x6c                  	// #108
 31c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 320:	cmp	w1, #0x40
 324:	b.ne	300 <_ZNK7__ubsan5Value13getFloatValueEv+0x70>  // b.any
 328:	add	x1, x0, #0x8
 32c:	mov	x2, #0x8                   	// #8
 330:	add	x0, sp, #0x18
 334:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 338:	ldr	d0, [sp, #24]
 33c:	bl	0 <__extenddftf2>
 340:	ldr	x30, [sp], #32
 344:	ret
 348:	adrp	x2, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 34c:	adrp	x0, 0 <_ZNK7__ubsan5Value12getSIntValueEv>
 350:	add	x2, x2, #0x0
 354:	add	x0, x0, #0x0
 358:	mov	x4, #0x0                   	// #0
 35c:	mov	x3, #0x0                   	// #0
 360:	mov	w1, #0x46                  	// #70
 364:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sancov_flags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__sancov_default_options>:
   0:	adrp	x0, 0 <__sancov_default_options>
   4:	add	x0, x0, #0x0
   8:	ret
   c:	nop

0000000000000010 <_ZN8__sancov11SancovFlags11SetDefaultsEv>:
  10:	mov	w1, #0x1                   	// #1
  14:	strh	w1, [x0]
  18:	ret
  1c:	nop

0000000000000020 <_ZN8__sancov21InitializeSancovFlagsEv>:
  20:	stp	x19, x20, [sp, #-80]!
  24:	adrp	x0, 0 <__sancov_default_options>
  28:	mov	w1, #0x1                   	// #1
  2c:	stp	x21, x22, [sp, #16]
  30:	adrp	x21, 0 <_ZN11__sanitizer10FlagParser5AllocE>
  34:	add	x19, sp, #0x30
  38:	add	x22, x0, #0x0
  3c:	strh	w1, [x0]
  40:	mov	x0, x19
  44:	str	x30, [sp, #32]
  48:	bl	0 <_ZN11__sanitizer10FlagParserC1Ev>
  4c:	adrp	x20, 0 <__sancov_default_options>
  50:	ldr	x21, [x21]
  54:	mov	x1, #0x10                  	// #16
  58:	add	x20, x20, #0x0
  5c:	mov	x0, x21
  60:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  64:	mov	x2, x0
  68:	adrp	x3, 0 <__sancov_default_options>
  6c:	add	x3, x3, #0x0
  70:	mov	x0, x19
  74:	adrp	x1, 0 <__sancov_default_options>
  78:	add	x1, x1, #0x0
  7c:	stp	x20, x22, [x2]
  80:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
  84:	mov	x1, #0x10                  	// #16
  88:	mov	x0, x21
  8c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  90:	mov	x2, x0
  94:	add	x4, x22, #0x1
  98:	mov	x0, x19
  9c:	adrp	x3, 0 <__sancov_default_options>
  a0:	adrp	x1, 0 <__sancov_default_options>
  a4:	add	x3, x3, #0x0
  a8:	add	x1, x1, #0x0
  ac:	stp	x20, x4, [x2]
  b0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
  b4:	bl	0 <__sancov_default_options>
  b8:	mov	x1, x0
  bc:	mov	x0, x19
  c0:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
  c4:	adrp	x0, 0 <__sancov_default_options>
  c8:	add	x0, x0, #0x0
  cc:	bl	0 <_ZN11__sanitizer6GetEnvEPKc>
  d0:	mov	x1, x0
  d4:	mov	x0, x19
  d8:	bl	0 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>
  dc:	bl	0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  e0:	ldrb	w0, [x22, #1]
  e4:	cbnz	w0, f8 <_ZN8__sancov21InitializeSancovFlagsEv+0xd8>
  e8:	ldp	x21, x22, [sp, #16]
  ec:	ldr	x30, [sp, #32]
  f0:	ldp	x19, x20, [sp], #80
  f4:	ret
  f8:	mov	x0, x19
  fc:	bl	0 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv>
 100:	ldp	x21, x22, [sp, #16]
 104:	ldr	x30, [sp, #32]
 108:	ldp	x19, x20, [sp], #80
 10c:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIbE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>:
   0:	mov	x2, x0
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x1
   c:	mov	x0, x19
  10:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  14:	add	x1, x1, #0x0
  18:	ldr	x20, [x2, #8]
  1c:	str	x30, [sp, #16]
  20:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  24:	cbnz	w0, 3c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x3c>
  28:	mov	w0, #0x1                   	// #1
  2c:	strb	wzr, [x20]
  30:	ldr	x30, [sp, #16]
  34:	ldp	x19, x20, [sp], #32
  38:	ret
  3c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  40:	mov	x0, x19
  44:	add	x1, x1, #0x0
  48:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  4c:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  50:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  54:	mov	x0, x19
  58:	add	x1, x1, #0x0
  5c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  60:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  64:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  68:	mov	x0, x19
  6c:	add	x1, x1, #0x0
  70:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  74:	cbz	w0, 8c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x8c>
  78:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  7c:	mov	x0, x19
  80:	add	x1, x1, #0x0
  84:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  88:	cbnz	w0, 9c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x9c>
  8c:	mov	w1, #0x1                   	// #1
  90:	mov	w0, #0x1                   	// #1
  94:	strb	w1, [x20]
  98:	b	30 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x30>
  9c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  a0:	mov	x0, x19
  a4:	add	x1, x1, #0x0
  a8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  ac:	cbz	w0, 8c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x8c>
  b0:	mov	x1, x19
  b4:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  c0:	mov	w0, #0x0                   	// #0
  c4:	ldr	x30, [sp, #16]
  c8:	ldp	x19, x20, [sp], #32
  cc:	ret

sanitizer_allocator.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>:
   0:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
   4:	mov	x2, x0
   8:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
   c:	add	x0, x0, #0x0
  10:	ldr	x1, [x1]
  14:	adrp	x3, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  18:	mov	w4, #0x1                   	// #1
  1c:	str	x30, [sp, #-16]!
  20:	strb	w4, [x3]
  24:	ldr	x1, [x1]
  28:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  2c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000030 <_ZN11__sanitizer18internal_allocatorEv.part.0>:
  30:	stp	x19, x20, [sp, #-32]!
  34:	adrp	x19, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  38:	add	x0, x19, #0x0
  3c:	add	x0, x0, #0x8
  40:	mov	w2, #0x1                   	// #1
  44:	str	x30, [sp, #24]
  48:	ldxrb	w1, [x0]
  4c:	stxrb	w3, w2, [x0]
  50:	cbnz	w3, 48 <_ZN11__sanitizer18internal_allocatorEv.part.0+0x18>
  54:	dmb	ish
  58:	tst	w1, #0xff
  5c:	b.eq	64 <_ZN11__sanitizer18internal_allocatorEv.part.0+0x34>  // b.none
  60:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  64:	add	x0, x19, #0x0
  68:	ldrb	w0, [x0, #16]
  6c:	tst	w0, #0xff
  70:	b.eq	8c <_ZN11__sanitizer18internal_allocatorEv.part.0+0x5c>  // b.none
  74:	dmb	ish
  78:	add	x19, x19, #0x0
  7c:	strb	wzr, [x19, #8]
  80:	ldr	x30, [sp, #24]
  84:	ldp	x19, x20, [sp], #32
  88:	ret
  8c:	adrp	x20, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  90:	str	x21, [sp, #16]
  94:	add	x21, x20, #0x0
  98:	mov	x2, #0x80000               	// #524288
  9c:	mov	x0, x21
  a0:	add	x21, x21, #0x80, lsl #12
  a4:	mov	w1, #0x0                   	// #0
  a8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  ac:	mov	x2, #0xd80                 	// #3456
  b0:	mov	w1, #0x0                   	// #0
  b4:	strb	wzr, [x21]
  b8:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  bc:	adrp	x21, 0 <_ZN11__sanitizer14PageSizeCachedE>
  c0:	add	x0, x0, #0x0
  c4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  c8:	mov	x2, #0x248                 	// #584
  cc:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  d0:	movk	x2, #0x4, lsl #16
  d4:	add	x0, x0, #0x0
  d8:	mov	w1, #0x0                   	// #0
  dc:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  e0:	ldr	x21, [x21]
  e4:	ldr	x3, [x21]
  e8:	cbz	x3, 154 <_ZN11__sanitizer18internal_allocatorEv.part.0+0x124>
  ec:	add	x20, x20, #0x0
  f0:	adrp	x4, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
  f4:	add	x5, x20, #0x80, lsl #12
  f8:	add	x4, x4, #0x0
  fc:	add	x20, x20, #0xc0, lsl #12
 100:	adrp	x21, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 104:	mov	x2, #0x28                  	// #40
 108:	add	x0, x21, #0x0
 10c:	str	x3, [x5, #3520]
 110:	add	x21, x21, #0x0
 114:	str	x4, [x5, #3528]
 118:	mov	w1, #0x0                   	// #0
 11c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 120:	str	x21, [x20, #4104]
 124:	str	x21, [x20, #4112]
 128:	dmb	ish
 12c:	add	x0, x19, #0x0
 130:	mov	w1, #0x1                   	// #1
 134:	strb	w1, [x0, #16]
 138:	ldr	x21, [sp, #16]
 13c:	dmb	ish
 140:	add	x19, x19, #0x0
 144:	strb	wzr, [x19, #8]
 148:	ldr	x30, [sp, #24]
 14c:	ldp	x19, x20, [sp], #32
 150:	ret
 154:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 158:	mov	x3, x0
 15c:	str	x0, [x21]
 160:	b	ec <_ZN11__sanitizer18internal_allocatorEv.part.0+0xbc>
 164:	nop

0000000000000168 <_ZN11__sanitizer18internal_allocatorEv>:
 168:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 16c:	add	x0, x0, #0x0
 170:	ldrb	w0, [x0, #16]
 174:	dmb	ish
 178:	and	w0, w0, #0xff
 17c:	cbz	w0, 18c <_ZN11__sanitizer18internal_allocatorEv+0x24>
 180:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 184:	add	x0, x0, #0x0
 188:	ret
 18c:	str	x30, [sp, #-16]!
 190:	bl	30 <_ZN11__sanitizer18internal_allocatorEv.part.0>
 194:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 198:	add	x0, x0, #0x0
 19c:	ldr	x30, [sp], #16
 1a0:	ret
 1a4:	nop

00000000000001a8 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>:
 1a8:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 1ac:	stp	x19, x20, [sp, #-32]!
 1b0:	mov	x20, x0
 1b4:	ldr	x0, [x2]
 1b8:	str	x30, [sp, #24]
 1bc:	sub	x19, x0, #0x1
 1c0:	tst	x0, x19
 1c4:	b.ne	26c <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0xc4>  // b.any
 1c8:	ldp	x3, x2, [x20]
 1cc:	add	x1, x1, x19
 1d0:	neg	x19, x0
 1d4:	and	x19, x1, x19
 1d8:	sub	x0, x3, x2
 1dc:	cmp	x0, x19
 1e0:	b.ge	248 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0xa0>  // b.tcont
 1e4:	str	x21, [sp, #16]
 1e8:	adrp	x21, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1ec:	ldr	x21, [x21]
 1f0:	ldr	x0, [x21]
 1f4:	cbz	x0, 260 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0xb8>
 1f8:	cmp	x19, x0
 1fc:	mov	w2, #0x0                   	// #0
 200:	csel	x21, x19, x0, cs  // cs = hs, nlast
 204:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 208:	mov	x0, x21
 20c:	add	x1, x1, #0x0
 210:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 214:	add	x1, x0, x21
 218:	adrp	x3, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 21c:	stp	x1, x0, [x20]
 220:	mov	x2, x0
 224:	ldr	x3, [x3]
 228:	cbz	x3, 238 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0x90>
 22c:	mov	x1, x21
 230:	blr	x3
 234:	ldp	x1, x2, [x20]
 238:	sub	x1, x1, x2
 23c:	cmp	x19, x1
 240:	b.gt	280 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0xd8>
 244:	ldr	x21, [sp, #16]
 248:	add	x19, x2, x19
 24c:	ldr	x30, [sp, #24]
 250:	str	x19, [x20, #8]
 254:	mov	x0, x2
 258:	ldp	x19, x20, [sp], #32
 25c:	ret
 260:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 264:	str	x0, [x21]
 268:	b	1f8 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm+0x50>
 26c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 270:	add	x0, x0, #0x0
 274:	str	x21, [sp, #16]
 278:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 27c:	bl	0 <_ZN11__sanitizer3DieEv>
 280:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 284:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 288:	add	x2, x2, #0x0
 28c:	add	x0, x0, #0x0
 290:	mov	x4, #0x0                   	// #0
 294:	mov	x3, #0x0                   	// #0
 298:	mov	w1, #0xd4                  	// #212
 29c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000002a0 <_ZN11__sanitizer31SetLowLevelAllocateMinAlignmentEm>:
 2a0:	sub	x1, x0, #0x1
 2a4:	tst	x1, x0
 2a8:	b.ne	2c4 <_ZN11__sanitizer31SetLowLevelAllocateMinAlignmentEm+0x24>  // b.any
 2ac:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2b0:	ldr	x1, [x2]
 2b4:	cmp	x1, x0
 2b8:	csel	x0, x1, x0, cs  // cs = hs, nlast
 2bc:	str	x0, [x2]
 2c0:	ret
 2c4:	str	x30, [sp, #-16]!
 2c8:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2cc:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2d0:	add	x2, x2, #0x0
 2d4:	add	x0, x0, #0x0
 2d8:	mov	x4, #0x0                   	// #0
 2dc:	mov	x3, #0x0                   	// #0
 2e0:	mov	w1, #0xdb                  	// #219
 2e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000002e8 <_ZN11__sanitizer27SetLowLevelAllocateCallbackEPFvmmE>:
 2e8:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2ec:	str	x0, [x1]
 2f0:	ret
 2f4:	nop

00000000000002f8 <_ZN11__sanitizer22IsAllocatorOutOfMemoryEv>:
 2f8:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 2fc:	ldrb	w0, [x0]
 300:	tst	w0, #0xff
 304:	cset	w0, ne  // ne = any
 308:	ret
 30c:	nop

0000000000000310 <_ZN11__sanitizer23SetAllocatorOutOfMemoryEv>:
 310:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 314:	mov	w1, #0x1                   	// #1
 318:	strb	w1, [x0]
 31c:	ret

0000000000000320 <_ZN11__sanitizer22AllocatorMayReturnNullEv>:
 320:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 324:	add	x0, x0, #0x0
 328:	ldrb	w0, [x0, #32]
 32c:	tst	w0, #0xff
 330:	cset	w0, ne  // ne = any
 334:	ret

0000000000000338 <_ZN11__sanitizer25SetAllocatorMayReturnNullEb>:
 338:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 33c:	add	x1, x1, #0x0
 340:	and	w0, w0, #0xff
 344:	strb	w0, [x1, #32]
 348:	ret
 34c:	nop

0000000000000350 <_ZN11__sanitizer34PrintHintAllocatorCannotReturnNullEv>:
 350:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 354:	add	x0, x0, #0x0
 358:	b	0 <_ZN11__sanitizer6ReportEPKcz>
 35c:	nop

0000000000000360 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>:
 360:	cmn	x0, #0x9
 364:	b.hi	448 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0xe8>  // b.pmore
 368:	stp	x19, x20, [sp, #-48]!
 36c:	cmp	x2, #0x0
 370:	add	x20, x0, #0x8
 374:	str	x30, [sp, #24]
 378:	mov	x0, #0x8                   	// #8
 37c:	csel	x19, x2, x0, ne  // ne = any
 380:	cbz	x1, 3d4 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x74>
 384:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 388:	add	x0, x0, #0x0
 38c:	ldrb	w0, [x0, #16]
 390:	dmb	ish
 394:	and	w0, w0, #0xff
 398:	cbz	w0, 458 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0xf8>
 39c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3a0:	mov	x3, x19
 3a4:	mov	x2, x20
 3a8:	add	x0, x0, #0x0
 3ac:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3b0:	cbz	x0, 468 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x108>
 3b4:	mov	x1, #0xc041                	// #49217
 3b8:	movk	x1, #0xbceb, lsl #16
 3bc:	movk	x1, #0xb03a, lsl #32
 3c0:	movk	x1, #0x6a6c, lsl #48
 3c4:	str	x1, [x0], #8
 3c8:	ldr	x30, [sp, #24]
 3cc:	ldp	x19, x20, [sp], #48
 3d0:	ret
 3d4:	str	x21, [sp, #16]
 3d8:	adrp	x21, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 3dc:	add	x0, x21, #0x0
 3e0:	mov	w2, #0x1                   	// #1
 3e4:	add	x0, x0, #0x28
 3e8:	ldxrb	w1, [x0]
 3ec:	stxrb	w3, w2, [x0]
 3f0:	cbnz	w3, 3e8 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x88>
 3f4:	dmb	ish
 3f8:	tst	w1, #0xff
 3fc:	b.eq	404 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0xa4>  // b.none
 400:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 404:	add	x0, x21, #0x0
 408:	ldrb	w0, [x0, #16]
 40c:	dmb	ish
 410:	and	w0, w0, #0xff
 414:	cbz	w0, 450 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0xf0>
 418:	mov	x3, x19
 41c:	mov	x2, x20
 420:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 424:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 428:	add	x1, x1, #0x0
 42c:	add	x0, x0, #0x0
 430:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 434:	dmb	ish
 438:	add	x21, x21, #0x0
 43c:	strb	wzr, [x21, #40]
 440:	ldr	x21, [sp, #16]
 444:	b	3b0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x50>
 448:	mov	x0, #0x0                   	// #0
 44c:	ret
 450:	bl	30 <_ZN11__sanitizer18internal_allocatorEv.part.0>
 454:	b	418 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0xb8>
 458:	str	x1, [sp, #40]
 45c:	bl	30 <_ZN11__sanitizer18internal_allocatorEv.part.0>
 460:	ldr	x1, [sp, #40]
 464:	b	39c <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm+0x3c>
 468:	mov	x0, x20
 46c:	str	x21, [sp, #16]
 470:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 474:	nop

0000000000000478 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>:
 478:	stp	x19, x20, [sp, #-48]!
 47c:	mov	x19, x2
 480:	str	x30, [sp, #32]
 484:	cbz	x0, 530 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xb8>
 488:	mov	x20, x1
 48c:	umulh	x1, x1, x0
 490:	cbnz	x1, 5c8 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x150>
 494:	mul	x20, x0, x20
 498:	cmn	x20, #0x9
 49c:	b.hi	51c <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xa4>  // b.pmore
 4a0:	stp	x21, x22, [sp, #16]
 4a4:	add	x21, x20, #0x8
 4a8:	cbz	x19, 540 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xc8>
 4ac:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 4b0:	add	x0, x0, #0x0
 4b4:	ldrb	w0, [x0, #16]
 4b8:	dmb	ish
 4bc:	and	w0, w0, #0xff
 4c0:	cbz	w0, 5b0 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x138>
 4c4:	mov	x1, x19
 4c8:	mov	x2, x21
 4cc:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 4d0:	mov	x3, #0x8                   	// #8
 4d4:	add	x0, x0, #0x0
 4d8:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 4dc:	mov	x19, x0
 4e0:	cbz	x19, 5b8 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x140>
 4e4:	mov	x0, #0xc041                	// #49217
 4e8:	mov	x2, x20
 4ec:	movk	x0, #0xbceb, lsl #16
 4f0:	mov	w1, #0x0                   	// #0
 4f4:	movk	x0, #0xb03a, lsl #32
 4f8:	movk	x0, #0x6a6c, lsl #48
 4fc:	str	x0, [x19], #8
 500:	mov	x0, x19
 504:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 508:	mov	x0, x19
 50c:	ldp	x21, x22, [sp, #16]
 510:	ldr	x30, [sp, #32]
 514:	ldp	x19, x20, [sp], #48
 518:	ret
 51c:	mov	x19, #0x0                   	// #0
 520:	mov	x0, x19
 524:	ldr	x30, [sp, #32]
 528:	ldp	x19, x20, [sp], #48
 52c:	ret
 530:	stp	x21, x22, [sp, #16]
 534:	mov	x20, #0x0                   	// #0
 538:	add	x21, x20, #0x8
 53c:	cbnz	x19, 4ac <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x34>
 540:	adrp	x22, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 544:	add	x0, x22, #0x0
 548:	add	x0, x0, #0x28
 54c:	mov	w2, #0x1                   	// #1
 550:	ldxrb	w1, [x0]
 554:	stxrb	w3, w2, [x0]
 558:	cbnz	w3, 550 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xd8>
 55c:	dmb	ish
 560:	tst	w1, #0xff
 564:	b.eq	56c <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xf4>  // b.none
 568:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 56c:	add	x0, x22, #0x0
 570:	ldrb	w0, [x0, #16]
 574:	dmb	ish
 578:	and	w0, w0, #0xff
 57c:	cbz	w0, 5c0 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x148>
 580:	mov	x2, x21
 584:	mov	x3, #0x8                   	// #8
 588:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 58c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 590:	add	x1, x1, #0x0
 594:	add	x0, x0, #0x0
 598:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 59c:	dmb	ish
 5a0:	mov	x19, x0
 5a4:	add	x22, x22, #0x0
 5a8:	strb	wzr, [x22, #40]
 5ac:	b	4e0 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x68>
 5b0:	bl	30 <_ZN11__sanitizer18internal_allocatorEv.part.0>
 5b4:	b	4c4 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x4c>
 5b8:	mov	x0, x21
 5bc:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5c0:	bl	30 <_ZN11__sanitizer18internal_allocatorEv.part.0>
 5c4:	b	580 <_ZN11__sanitizer14InternalCallocEmmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x108>
 5c8:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 5cc:	mov	x2, x0
 5d0:	mov	x3, x20
 5d4:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 5d8:	ldr	x1, [x1]
 5dc:	add	x0, x0, #0x0
 5e0:	stp	x21, x22, [sp, #16]
 5e4:	ldr	x1, [x1]
 5e8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5ec:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000005f0 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>:
 5f0:	stp	x19, x20, [sp, #-48]!
 5f4:	mov	x20, x1
 5f8:	mov	x1, x2
 5fc:	str	x30, [sp, #24]
 600:	cbz	x0, 6f8 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x108>
 604:	cmn	x20, #0x9
 608:	b.hi	70c <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x11c>  // b.pmore
 60c:	mov	x3, #0xc041                	// #49217
 610:	add	x20, x20, #0x8
 614:	ldur	x4, [x0, #-8]
 618:	movk	x3, #0xbceb, lsl #16
 61c:	movk	x3, #0xb03a, lsl #32
 620:	sub	x19, x0, #0x8
 624:	movk	x3, #0x6a6c, lsl #48
 628:	cmp	x4, x3
 62c:	b.ne	72c <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x13c>  // b.any
 630:	cbz	x2, 67c <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x8c>
 634:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 638:	add	x0, x0, #0x0
 63c:	ldrb	w0, [x0, #16]
 640:	dmb	ish
 644:	and	w0, w0, #0xff
 648:	cbz	w0, 71c <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x12c>
 64c:	mov	x2, x19
 650:	mov	x3, x20
 654:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 658:	mov	x4, #0x8                   	// #8
 65c:	add	x0, x0, #0x0
 660:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 664:	mov	x1, x0
 668:	add	x0, x1, #0x8
 66c:	cbz	x1, 748 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x158>
 670:	ldr	x30, [sp, #24]
 674:	ldp	x19, x20, [sp], #48
 678:	ret
 67c:	str	x21, [sp, #16]
 680:	adrp	x21, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 684:	add	x0, x21, #0x0
 688:	mov	w2, #0x1                   	// #1
 68c:	add	x0, x0, #0x28
 690:	ldxrb	w1, [x0]
 694:	stxrb	w3, w2, [x0]
 698:	cbnz	w3, 690 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xa0>
 69c:	dmb	ish
 6a0:	tst	w1, #0xff
 6a4:	b.eq	6ac <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xbc>  // b.none
 6a8:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 6ac:	add	x0, x21, #0x0
 6b0:	ldrb	w0, [x0, #16]
 6b4:	dmb	ish
 6b8:	and	w0, w0, #0xff
 6bc:	cbz	w0, 754 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x164>
 6c0:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 6c4:	add	x1, x1, #0x0
 6c8:	mov	x2, x19
 6cc:	mov	x3, x20
 6d0:	mov	x4, #0x8                   	// #8
 6d4:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 6d8:	add	x0, x0, #0x0
 6dc:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 6e0:	dmb	ish
 6e4:	mov	x1, x0
 6e8:	add	x21, x21, #0x0
 6ec:	strb	wzr, [x21, #40]
 6f0:	ldr	x21, [sp, #16]
 6f4:	b	668 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x78>
 6f8:	mov	x0, x20
 6fc:	mov	x2, #0x0                   	// #0
 700:	ldr	x30, [sp, #24]
 704:	ldp	x19, x20, [sp], #48
 708:	b	360 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 70c:	mov	x0, #0x0                   	// #0
 710:	ldr	x30, [sp, #24]
 714:	ldp	x19, x20, [sp], #48
 718:	ret
 71c:	str	x2, [sp, #40]
 720:	bl	30 <_ZN11__sanitizer18internal_allocatorEv.part.0>
 724:	ldr	x1, [sp, #40]
 728:	b	64c <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x5c>
 72c:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 730:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 734:	add	x2, x2, #0x0
 738:	add	x0, x0, #0x0
 73c:	mov	w1, #0xa5                  	// #165
 740:	str	x21, [sp, #16]
 744:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 748:	mov	x0, x20
 74c:	str	x21, [sp, #16]
 750:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 754:	bl	30 <_ZN11__sanitizer18internal_allocatorEv.part.0>
 758:	b	6c0 <_ZN11__sanitizer15InternalReallocEPvmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xd0>
 75c:	nop

0000000000000760 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>:
 760:	cbz	x0, ac8 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x368>
 764:	stp	x19, x20, [sp, #-64]!
 768:	mov	x3, #0xc041                	// #49217
 76c:	movk	x3, #0xbceb, lsl #16
 770:	ldur	x4, [x0, #-8]
 774:	stp	x21, x22, [sp, #16]
 778:	movk	x3, #0xb03a, lsl #32
 77c:	str	x30, [sp, #48]
 780:	movk	x3, #0x6a6c, lsl #48
 784:	sub	x21, x0, #0x8
 788:	cmp	x4, x3
 78c:	b.ne	aac <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x34c>  // b.any
 790:	stur	xzr, [x0, #-8]
 794:	mov	x19, x1
 798:	cbz	x1, 8c8 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x168>
 79c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 7a0:	add	x0, x0, #0x0
 7a4:	ldrb	w0, [x0, #16]
 7a8:	dmb	ish
 7ac:	and	w0, w0, #0xff
 7b0:	cbz	w0, 8c0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x160>
 7b4:	mov	x0, #0xffffffffffff        	// #281474976710655
 7b8:	adrp	x20, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 7bc:	cmp	x21, x0
 7c0:	b.hi	7e4 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x84>  // b.pmore
 7c4:	lsr	x2, x21, #32
 7c8:	add	x1, x20, #0x0
 7cc:	ldr	x0, [x1, x2, lsl #3]
 7d0:	dmb	ish
 7d4:	cbz	x0, 7e4 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x84>
 7d8:	lsr	w3, w21, #20
 7dc:	ldrb	w0, [x0, x3]
 7e0:	cbnz	w0, acc <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x36c>
 7e4:	add	x0, x20, #0x0
 7e8:	add	x0, x0, #0x80, lsl #12
 7ec:	ldr	x19, [x0, #3520]
 7f0:	sub	x0, x19, #0x1
 7f4:	tst	x21, x0
 7f8:	b.ne	b48 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x3e8>  // b.any
 7fc:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 800:	sub	x19, x21, x19
 804:	add	x0, x0, #0x0
 808:	mov	w2, #0x1                   	// #1
 80c:	ldxrb	w1, [x0]
 810:	stxrb	w3, w2, [x0]
 814:	cbnz	w3, 80c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xac>
 818:	dmb	ish
 81c:	tst	w1, #0xff
 820:	b.eq	828 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0xc8>  // b.none
 824:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 828:	add	x20, x20, #0x0
 82c:	add	x0, x20, #0x80, lsl #12
 830:	ldr	x1, [x19, #24]
 834:	ldr	x2, [x0, #3528]
 838:	ldr	x3, [x2, x1, lsl #3]
 83c:	cmp	x3, x19
 840:	b.ne	b6c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x40c>  // b.any
 844:	add	x0, x20, #0xc0, lsl #12
 848:	ldr	x4, [x0, #3536]
 84c:	cmp	x1, x4
 850:	b.cs	b8c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x42c>  // b.hs, b.nlast
 854:	sub	x4, x4, #0x1
 858:	ldr	x3, [x19, #8]
 85c:	str	x4, [x0, #3536]
 860:	ldr	x4, [x2, x4, lsl #3]
 864:	str	x4, [x2, x1, lsl #3]
 868:	ldr	x2, [x0, #4120]
 86c:	str	x1, [x4, #24]
 870:	sub	x2, x2, x3
 874:	str	x2, [x0, #4120]
 878:	ldr	x4, [x0, #3560]
 87c:	strb	wzr, [x0, #3544]
 880:	ldr	x2, [x0, #3568]
 884:	add	x4, x4, #0x1
 888:	ldr	x1, [x0, #4128]
 88c:	sub	x2, x2, x3
 890:	str	x4, [x0, #3560]
 894:	sub	x1, x1, x3
 898:	str	x2, [x0, #3568]
 89c:	str	x1, [x0, #4128]
 8a0:	dmb	ish
 8a4:	add	x20, x20, #0xc1, lsl #12
 8a8:	strb	wzr, [x20]
 8ac:	ldp	x0, x1, [x19]
 8b0:	ldp	x21, x22, [sp, #16]
 8b4:	ldr	x30, [sp, #48]
 8b8:	ldp	x19, x20, [sp], #64
 8bc:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 8c0:	bl	30 <_ZN11__sanitizer18internal_allocatorEv.part.0>
 8c4:	b	7b4 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x54>
 8c8:	adrp	x19, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 8cc:	add	x0, x19, #0x0
 8d0:	add	x0, x0, #0x28
 8d4:	mov	w2, #0x1                   	// #1
 8d8:	ldxrb	w1, [x0]
 8dc:	stxrb	w3, w2, [x0]
 8e0:	cbnz	w3, 8d8 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x178>
 8e4:	dmb	ish
 8e8:	tst	w1, #0xff
 8ec:	b.eq	8f4 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x194>  // b.none
 8f0:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 8f4:	add	x0, x19, #0x0
 8f8:	ldrb	w0, [x0, #16]
 8fc:	dmb	ish
 900:	and	w0, w0, #0xff
 904:	cbz	w0, b40 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x3e0>
 908:	mov	x0, #0xffffffffffff        	// #281474976710655
 90c:	adrp	x20, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 910:	cmp	x21, x0
 914:	b.hi	9c0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x260>  // b.pmore
 918:	lsr	x2, x21, #32
 91c:	add	x1, x20, #0x0
 920:	ldr	x0, [x1, x2, lsl #3]
 924:	dmb	ish
 928:	cbz	x0, 9c0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x260>
 92c:	lsr	w3, w21, #20
 930:	ldrb	w0, [x0, x3]
 934:	cbz	w0, 9c0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x260>
 938:	stp	x23, x24, [sp, #32]
 93c:	ldr	x0, [x1, x2, lsl #3]
 940:	dmb	ish
 944:	cbz	x0, bac <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x44c>
 948:	ldrb	w24, [x0, x3]
 94c:	cbz	x24, bac <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x44c>
 950:	cmp	x24, #0x35
 954:	b.hi	d48 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x5e8>  // b.pmore
 958:	lsl	x23, x24, #10
 95c:	adrp	x22, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 960:	add	x6, x22, #0x0
 964:	add	x0, x6, x23
 968:	ldr	x2, [x0, #8]
 96c:	cbz	x2, d78 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x618>
 970:	add	x0, x22, #0x0
 974:	add	x1, x0, x23
 978:	ldr	x4, [x0, x23]
 97c:	cmp	x4, x2
 980:	b.eq	d68 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x608>  // b.none
 984:	add	x22, x22, #0x0
 988:	add	x1, x22, x23
 98c:	add	x2, x22, #0x8, lsl #12
 990:	ldr	x0, [x22, x23]
 994:	ldr	x4, [x1, #16]
 998:	add	x1, x0, #0x1
 99c:	add	x0, x0, x24, lsl #7
 9a0:	str	x1, [x22, x23]
 9a4:	add	x0, x0, #0x4
 9a8:	ldr	x1, [x2, #22544]
 9ac:	str	x21, [x22, x0, lsl #3]
 9b0:	sub	x0, x1, x4
 9b4:	ldp	x23, x24, [sp, #32]
 9b8:	str	x0, [x2, #22544]
 9bc:	b	a90 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x330>
 9c0:	add	x0, x20, #0x0
 9c4:	add	x0, x0, #0x80, lsl #12
 9c8:	ldr	x4, [x0, #3520]
 9cc:	sub	x0, x4, #0x1
 9d0:	tst	x21, x0
 9d4:	b.ne	bcc <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x46c>  // b.any
 9d8:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 9dc:	sub	x21, x21, x4
 9e0:	add	x0, x0, #0x0
 9e4:	mov	w2, #0x1                   	// #1
 9e8:	ldxrb	w1, [x0]
 9ec:	stxrb	w3, w2, [x0]
 9f0:	cbnz	w3, 9e8 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x288>
 9f4:	dmb	ish
 9f8:	tst	w1, #0xff
 9fc:	b.eq	a04 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x2a4>  // b.none
 a00:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 a04:	add	x20, x20, #0x0
 a08:	add	x0, x20, #0x80, lsl #12
 a0c:	ldr	x1, [x21, #24]
 a10:	ldr	x2, [x0, #3528]
 a14:	ldr	x3, [x2, x1, lsl #3]
 a18:	cmp	x3, x21
 a1c:	b.ne	bf0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x490>  // b.any
 a20:	add	x0, x20, #0xc0, lsl #12
 a24:	ldr	x4, [x0, #3536]
 a28:	cmp	x1, x4
 a2c:	b.cs	c10 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x4b0>  // b.hs, b.nlast
 a30:	sub	x4, x4, #0x1
 a34:	ldr	x3, [x21, #8]
 a38:	str	x4, [x0, #3536]
 a3c:	ldr	x4, [x2, x4, lsl #3]
 a40:	str	x4, [x2, x1, lsl #3]
 a44:	ldr	x2, [x0, #4120]
 a48:	str	x1, [x4, #24]
 a4c:	sub	x2, x2, x3
 a50:	str	x2, [x0, #4120]
 a54:	ldr	x4, [x0, #3560]
 a58:	strb	wzr, [x0, #3544]
 a5c:	ldr	x2, [x0, #3568]
 a60:	add	x4, x4, #0x1
 a64:	ldr	x1, [x0, #4128]
 a68:	sub	x2, x2, x3
 a6c:	str	x4, [x0, #3560]
 a70:	sub	x1, x1, x3
 a74:	str	x2, [x0, #3568]
 a78:	str	x1, [x0, #4128]
 a7c:	dmb	ish
 a80:	add	x20, x20, #0xc1, lsl #12
 a84:	strb	wzr, [x20]
 a88:	ldp	x0, x1, [x21]
 a8c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a90:	dmb	ish
 a94:	add	x19, x19, #0x0
 a98:	strb	wzr, [x19, #40]
 a9c:	ldp	x21, x22, [sp, #16]
 aa0:	ldr	x30, [sp, #48]
 aa4:	ldp	x19, x20, [sp], #64
 aa8:	ret
 aac:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 ab0:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 ab4:	add	x2, x2, #0x0
 ab8:	add	x0, x0, #0x0
 abc:	mov	w1, #0xbd                  	// #189
 ac0:	stp	x23, x24, [sp, #32]
 ac4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 ac8:	ret
 acc:	stp	x23, x24, [sp, #32]
 ad0:	ldr	x0, [x1, x2, lsl #3]
 ad4:	dmb	ish
 ad8:	cbz	x0, bac <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x44c>
 adc:	ldrb	w22, [x0, x3]
 ae0:	cbz	x22, bac <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x44c>
 ae4:	cmp	x22, #0x35
 ae8:	b.hi	c30 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x4d0>  // b.pmore
 aec:	lsl	x23, x22, #10
 af0:	add	x1, x19, x23
 af4:	ldr	x2, [x1, #8]
 af8:	cbz	x2, c50 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x4f0>
 afc:	ldr	x0, [x19, x23]
 b00:	cmp	x2, x0
 b04:	b.eq	d30 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x5d0>  // b.none
 b08:	add	x22, x0, x22, lsl #7
 b0c:	add	x2, x19, x23
 b10:	add	x22, x22, #0x4
 b14:	add	x0, x0, #0x1
 b18:	mov	x3, #0xd800                	// #55296
 b1c:	add	x1, x19, x3
 b20:	str	x0, [x19, x23]
 b24:	str	x21, [x19, x22, lsl #3]
 b28:	ldr	x0, [x1, #16]
 b2c:	ldr	x2, [x2, #16]
 b30:	ldp	x23, x24, [sp, #32]
 b34:	sub	x0, x0, x2
 b38:	str	x0, [x1, #16]
 b3c:	b	a9c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x33c>
 b40:	bl	30 <_ZN11__sanitizer18internal_allocatorEv.part.0>
 b44:	b	908 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x1a8>
 b48:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 b4c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 b50:	add	x2, x2, #0x0
 b54:	add	x0, x0, #0x0
 b58:	mov	x4, #0x0                   	// #0
 b5c:	mov	x3, #0x0                   	// #0
 b60:	mov	w1, #0x123                 	// #291
 b64:	stp	x23, x24, [sp, #32]
 b68:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 b6c:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 b70:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 b74:	mov	x4, x19
 b78:	add	x2, x2, #0x0
 b7c:	add	x0, x0, #0x0
 b80:	mov	w1, #0x88                  	// #136
 b84:	stp	x23, x24, [sp, #32]
 b88:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 b8c:	mov	x3, x1
 b90:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 b94:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 b98:	add	x2, x2, #0x0
 b9c:	add	x0, x0, #0x0
 ba0:	mov	w1, #0x89                  	// #137
 ba4:	stp	x23, x24, [sp, #32]
 ba8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 bac:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 bb0:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 bb4:	add	x2, x2, #0x0
 bb8:	add	x0, x0, #0x0
 bbc:	mov	x4, #0x0                   	// #0
 bc0:	mov	x3, #0x0                   	// #0
 bc4:	mov	w1, #0xae                  	// #174
 bc8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 bcc:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 bd0:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 bd4:	add	x2, x2, #0x0
 bd8:	add	x0, x0, #0x0
 bdc:	mov	x4, #0x0                   	// #0
 be0:	mov	x3, #0x0                   	// #0
 be4:	mov	w1, #0x123                 	// #291
 be8:	stp	x23, x24, [sp, #32]
 bec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 bf0:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 bf4:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 bf8:	mov	x4, x21
 bfc:	add	x2, x2, #0x0
 c00:	add	x0, x0, #0x0
 c04:	mov	w1, #0x88                  	// #136
 c08:	stp	x23, x24, [sp, #32]
 c0c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 c10:	mov	x3, x1
 c14:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 c18:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 c1c:	add	x2, x2, #0x0
 c20:	add	x0, x0, #0x0
 c24:	mov	w1, #0x89                  	// #137
 c28:	stp	x23, x24, [sp, #32]
 c2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 c30:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 c34:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 c38:	mov	x3, x22
 c3c:	add	x2, x2, #0x0
 c40:	add	x0, x0, #0x0
 c44:	mov	x4, #0x36                  	// #54
 c48:	mov	w1, #0xaf                  	// #175
 c4c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 c50:	mov	x2, #0x1                   	// #1
 c54:	mov	x11, x2
 c58:	mov	x12, #0x7c                  	// #124
 c5c:	mov	x10, #0x14                  	// #20
 c60:	mov	x9, #0x100                 	// #256
 c64:	mov	w8, #0x4000                	// #16384
 c68:	mov	x7, #0x3e                  	// #62
 c6c:	nop
 c70:	add	x5, x19, x2, lsl #10
 c74:	lsl	x6, x2, #4
 c78:	mov	x4, x5
 c7c:	mov	x0, #0x14                  	// #20
 c80:	mov	x3, x2
 c84:	add	x2, x2, #0x1
 c88:	stp	x12, x6, [x5, #8]
 c8c:	cmp	x2, #0x36
 c90:	str	x0, [x4, #24]
 c94:	b.eq	d04 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x5a4>  // b.none
 c98:	cmp	x2, #0x35
 c9c:	b.eq	d0c <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x5ac>  // b.none
 ca0:	cmp	x2, #0x10
 ca4:	b.ls	c70 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x510>  // b.plast
 ca8:	sub	x0, x3, #0xf
 cac:	add	x4, x4, #0x400
 cb0:	and	x6, x0, #0x3
 cb4:	mov	x3, x2
 cb8:	lsr	x0, x0, #2
 cbc:	add	x2, x2, #0x1
 cc0:	lsl	x0, x9, x0
 cc4:	lsr	x5, x0, #2
 cc8:	madd	x5, x5, x6, x0
 ccc:	str	x5, [x4, #16]
 cd0:	udiv	w0, w8, w5
 cd4:	cmp	x0, #0x0
 cd8:	csel	x0, x0, x11, ne  // ne = any
 cdc:	cmp	x0, #0x3e
 ce0:	csel	x0, x0, x7, ls  // ls = plast
 ce4:	add	x6, x0, #0x2
 ce8:	lsl	x0, x0, #1
 cec:	str	x0, [x4, #8]
 cf0:	cmp	x5, x6, lsl #3
 cf4:	csel	x0, x10, xzr, cc  // cc = lo, ul, last
 cf8:	str	x0, [x4, #24]
 cfc:	cmp	x2, #0x36
 d00:	b.ne	c98 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x538>  // b.any
 d04:	ldr	x2, [x1, #8]
 d08:	b	afc <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x39c>
 d0c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 d10:	ldr	q0, [x0]
 d14:	mov	x0, #0xd400                	// #54272
 d18:	add	x2, x19, x0
 d1c:	add	x0, x19, #0x8, lsl #12
 d20:	stur	q0, [x2, #8]
 d24:	str	xzr, [x0, #21528]
 d28:	ldr	x2, [x1, #8]
 d2c:	b	afc <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x39c>
 d30:	mov	x0, x19
 d34:	add	x2, x20, #0x0
 d38:	mov	x3, x22
 d3c:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 d40:	ldr	x0, [x19, x23]
 d44:	b	b08 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x3a8>
 d48:	adrp	x2, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 d4c:	adrp	x0, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 d50:	mov	x3, x24
 d54:	add	x2, x2, #0x0
 d58:	add	x0, x0, #0x0
 d5c:	mov	x4, #0x36                  	// #54
 d60:	mov	w1, #0xaf                  	// #175
 d64:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 d68:	add	x2, x20, #0x0
 d6c:	mov	x3, x24
 d70:	bl	0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 d74:	b	984 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x224>
 d78:	mov	x1, #0x1                   	// #1
 d7c:	mov	x11, x1
 d80:	mov	x12, #0x7c                  	// #124
 d84:	mov	x10, #0x14                  	// #20
 d88:	mov	x9, #0x100                 	// #256
 d8c:	mov	w8, #0x4000                	// #16384
 d90:	mov	x7, #0x3e                  	// #62
 d94:	nop
 d98:	lsl	x0, x1, #10
 d9c:	lsl	x4, x1, #4
 da0:	add	x13, x6, x0
 da4:	add	x0, x0, #0x18
 da8:	add	x2, x0, x6
 dac:	mov	x0, #0x14                  	// #20
 db0:	mov	x5, x1
 db4:	add	x1, x1, #0x1
 db8:	stp	x12, x4, [x13, #8]
 dbc:	cmp	x1, #0x36
 dc0:	str	x0, [x2]
 dc4:	b.eq	e34 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x6d4>  // b.none
 dc8:	cmp	x1, #0x35
 dcc:	b.eq	e44 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x6e4>  // b.none
 dd0:	cmp	x1, #0x10
 dd4:	b.ls	d98 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x638>  // b.plast
 dd8:	sub	x0, x5, #0xf
 ddc:	add	x2, x2, #0x400
 de0:	and	x13, x0, #0x3
 de4:	mov	x5, x1
 de8:	lsr	x0, x0, #2
 dec:	add	x1, x1, #0x1
 df0:	lsl	x0, x9, x0
 df4:	lsr	x4, x0, #2
 df8:	madd	x4, x4, x13, x0
 dfc:	stur	x4, [x2, #-8]
 e00:	udiv	w0, w8, w4
 e04:	cmp	x0, #0x0
 e08:	csel	x0, x0, x11, ne  // ne = any
 e0c:	cmp	x0, #0x3e
 e10:	csel	x0, x0, x7, ls  // ls = plast
 e14:	add	x13, x0, #0x2
 e18:	lsl	x0, x0, #1
 e1c:	stur	x0, [x2, #-16]
 e20:	cmp	x4, x13, lsl #3
 e24:	csel	x0, x10, xzr, cc  // cc = lo, ul, last
 e28:	str	x0, [x2]
 e2c:	cmp	x1, #0x36
 e30:	b.ne	dc8 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x668>  // b.any
 e34:	add	x0, x22, #0x0
 e38:	add	x0, x0, x23
 e3c:	ldr	x2, [x0, #8]
 e40:	b	970 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x210>
 e44:	adrp	x1, 0 <_ZN11__sanitizerL34ReportInternalAllocatorOutOfMemoryEm>
 e48:	add	x0, x22, #0x0
 e4c:	ldr	q0, [x1]
 e50:	mov	x1, #0xd400                	// #54272
 e54:	add	x2, x0, x1
 e58:	add	x1, x0, x23
 e5c:	add	x0, x0, #0x8, lsl #12
 e60:	stur	q0, [x2, #8]
 e64:	str	xzr, [x0, #21528]
 e68:	ldr	x2, [x1, #8]
 e6c:	b	970 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE+0x210>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	mov	x21, x0
   c:	ldr	x0, [x2, #8]
  10:	stp	x23, x30, [sp, #32]
  14:	cbz	x0, c0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0+0xc0>
  18:	mov	x0, #0x2001                	// #8193
  1c:	add	x22, x1, x0
  20:	mov	x20, x2
  24:	mov	x19, x1
  28:	add	x23, x21, x22, lsl #6
  2c:	mov	w1, #0x1                   	// #1
  30:	ldxrb	w0, [x23]
  34:	stxrb	w2, w1, [x23]
  38:	cbnz	w2, 30 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0+0x30>
  3c:	dmb	ish
  40:	tst	w0, #0xff
  44:	b.eq	50 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0+0x50>  // b.none
  48:	mov	x0, x23
  4c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0>
  50:	ldr	x0, [x23, #8]
  54:	cbz	x0, 8c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0+0x8c>
  58:	add	x19, x21, x19, lsl #6
  5c:	add	x0, x0, #0x1
  60:	add	x19, x19, #0x80, lsl #12
  64:	ldr	x1, [x19, #80]
  68:	str	x1, [x20]
  6c:	stp	x0, x20, [x19, #72]
  70:	dmb	ish
  74:	lsl	x22, x22, #6
  78:	strb	wzr, [x21, x22]
  7c:	ldp	x21, x22, [sp, #16]
  80:	ldp	x23, x30, [sp, #32]
  84:	ldp	x19, x20, [sp], #48
  88:	ret
  8c:	add	x0, x21, x22, lsl #6
  90:	dup	v0.2d, x20
  94:	str	xzr, [x20]
  98:	mov	x1, #0x1                   	// #1
  9c:	str	x1, [x0, #8]
  a0:	str	q0, [x0, #16]
  a4:	dmb	ish
  a8:	lsl	x22, x22, #6
  ac:	strb	wzr, [x21, x22]
  b0:	ldp	x21, x22, [sp, #16]
  b4:	ldp	x23, x30, [sp, #32]
  b8:	ldp	x19, x20, [sp], #48
  bc:	ret
  c0:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0>
  c4:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE15DeallocateBatchEPNS_14AllocatorStatsEmPNS2_13TransferBatchE.isra.0>
  c8:	add	x2, x2, #0x0
  cc:	add	x0, x0, #0x0
  d0:	mov	x4, #0x0                   	// #0
  d4:	mov	x3, #0x0                   	// #0
  d8:	mov	w1, #0xad                  	// #173
  dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>:
   0:	sub	sp, sp, #0x210
   4:	adrp	x5, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
   8:	stp	x25, x26, [sp, #48]
   c:	mov	x26, x2
  10:	mov	x25, x3
  14:	ldr	x2, [x5]
  18:	stp	x19, x20, [sp]
  1c:	mov	x19, x1
  20:	mov	x1, #0x100000              	// #1048576
  24:	stp	x21, x22, [sp, #16]
  28:	mov	x21, x0
  2c:	mov	x0, x1
  30:	str	x30, [sp, #80]
  34:	str	x4, [sp, #104]
  38:	bl	0 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc>
  3c:	ldr	x4, [sp, #104]
  40:	cbz	x0, 224 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x224>
  44:	mov	x22, x0
  48:	tst	x0, #0xfffff
  4c:	ldr	x0, [x19, #24]
  50:	stp	x23, x24, [sp, #32]
  54:	stp	x27, x28, [sp, #64]
  58:	add	x0, x0, #0x100, lsl #12
  5c:	str	x0, [x19, #24]
  60:	b.ne	42c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x42c>  // b.any
  64:	mov	x0, #0xfffffff             	// #268435455
  68:	lsr	x19, x22, #20
  6c:	cmp	x0, x22, lsr #20
  70:	b.cc	494 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x494>  // b.lo, b.ul, b.last
  74:	and	w23, w4, #0xff
  78:	lsr	x20, x22, #32
  7c:	ldr	x0, [x21, x20, lsl #3]
  80:	dmb	ish
  84:	cbz	x0, 3e4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3e4>
  88:	and	x3, x19, #0xfff
  8c:	ldrb	w1, [x0, x3]
  90:	cbnz	x1, 4ec <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x4ec>
  94:	strb	w23, [x0, x3]
  98:	cmp	x4, #0x35
  9c:	b.eq	2bc <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2bc>  // b.none
  a0:	lsl	x28, x4, #4
  a4:	cmp	x4, #0x10
  a8:	b.ls	c8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0xc8>  // b.plast
  ac:	sub	x0, x4, #0x10
  b0:	mov	x28, #0x100                 	// #256
  b4:	and	x1, x0, #0x3
  b8:	lsr	x0, x0, #2
  bc:	lsl	x0, x28, x0
  c0:	lsr	x28, x0, #2
  c4:	madd	x28, x28, x1, x0
  c8:	mov	x27, #0x100000              	// #1048576
  cc:	udiv	x27, x27, x28
  d0:	cbz	x28, 3d4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3d4>
  d4:	mov	w23, #0x4000                	// #16384
  d8:	mov	x1, #0x40                  	// #64
  dc:	mov	x0, #0x3e                  	// #62
  e0:	mul	x27, x27, x28
  e4:	udiv	w23, w23, w28
  e8:	cmp	x23, x1
  ec:	csel	x23, x23, x1, ls  // ls = plast
  f0:	cmp	x23, #0x0
  f4:	csinc	x23, x23, xzr, ne  // ne = any
  f8:	cmp	x23, x0
  fc:	csel	x23, x23, x0, ls  // ls = plast
 100:	add	x27, x22, x27
 104:	cmp	x22, x27
 108:	b.cs	3d4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3d4>  // b.hs, b.nlast
 10c:	add	x24, sp, #0x90
 110:	add	x7, x26, x4, lsl #10
 114:	mov	x1, #0x0                   	// #0
 118:	mov	x19, #0x1                   	// #1
 11c:	str	x22, [sp, #144]
 120:	add	x22, x22, x28
 124:	cmp	x22, x27
 128:	b.cs	278 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x278>  // b.hs, b.nlast
 12c:	str	x22, [x24, x19, lsl #3]
 130:	cmp	x19, #0x2f
 134:	add	x19, x19, #0x1
 138:	b.ne	120 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x120>  // b.any
 13c:	mov	x2, #0xd800                	// #55296
 140:	mov	x19, #0x0                   	// #0
 144:	add	x9, x26, x2
 148:	b	154 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x154>
 14c:	cmp	x19, #0x2f
 150:	b.hi	2b4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2b4>  // b.pmore
 154:	ldr	x8, [x24, x19, lsl #3]
 158:	cbz	x1, 1a4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1a4>
 15c:	ldr	x5, [x1, #8]
 160:	add	x6, x5, #0x1
 164:	add	x5, x5, #0x2
 168:	str	x6, [x1, #8]
 16c:	add	x19, x19, #0x1
 170:	cmp	x6, x23
 174:	str	x8, [x1, x5, lsl #3]
 178:	b.ne	14c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x14c>  // b.any
 17c:	ldr	x5, [x25, #8]
 180:	cbnz	x5, 240 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x240>
 184:	dup	v0.2d, x1
 188:	str	xzr, [x1]
 18c:	mov	x0, #0x1                   	// #1
 190:	str	x0, [x25, #8]
 194:	cmp	x19, #0x2f
 198:	str	q0, [x25, #16]
 19c:	b.hi	260 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x260>  // b.pmore
 1a0:	ldr	x8, [x24, x19, lsl #3]
 1a4:	mov	x1, x8
 1a8:	ldr	x20, [x7, #24]
 1ac:	cbnz	x20, 1c4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1c4>
 1b0:	cbz	x1, 21c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x21c>
 1b4:	mov	x5, #0x0                   	// #0
 1b8:	mov	x6, #0x1                   	// #1
 1bc:	str	xzr, [x1, #8]
 1c0:	b	164 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x164>
 1c4:	cmp	x20, #0x35
 1c8:	b.hi	44c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x44c>  // b.pmore
 1cc:	lsl	x5, x20, #10
 1d0:	add	x1, x26, x5
 1d4:	ldr	x0, [x26, x5]
 1d8:	cbz	x0, 4b4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x4b4>
 1dc:	lsl	x20, x20, #7
 1e0:	add	x3, x26, x5
 1e4:	add	x1, x20, x0
 1e8:	sub	x0, x0, #0x1
 1ec:	add	x1, x1, #0x2
 1f0:	str	x0, [x26, x5]
 1f4:	add	x20, x20, x0
 1f8:	add	x20, x20, #0x4
 1fc:	ldr	x2, [x26, x1, lsl #3]
 200:	ldr	x0, [x9, #16]
 204:	ldr	x1, [x3, #16]
 208:	prfm	pldl1keep, [x2]
 20c:	add	x0, x0, x1
 210:	ldr	x1, [x26, x20, lsl #3]
 214:	str	x0, [x9, #16]
 218:	cbnz	x1, 1b4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1b4>
 21c:	ldp	x23, x24, [sp, #32]
 220:	ldp	x27, x28, [sp, #64]
 224:	mov	w0, #0x0                   	// #0
 228:	ldp	x19, x20, [sp]
 22c:	ldp	x21, x22, [sp, #16]
 230:	ldp	x25, x26, [sp, #48]
 234:	ldr	x30, [sp, #80]
 238:	add	sp, sp, #0x210
 23c:	ret
 240:	ldr	x2, [x25, #24]
 244:	str	xzr, [x1]
 248:	add	x5, x5, #0x1
 24c:	cmp	x19, #0x2f
 250:	str	x1, [x2]
 254:	str	x5, [x25, #8]
 258:	str	x1, [x25, #24]
 25c:	b.ls	1a0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1a0>  // b.plast
 260:	add	x22, x22, x28
 264:	mov	x19, #0x0                   	// #0
 268:	cmp	x22, x27
 26c:	mov	x1, #0x0                   	// #0
 270:	b.cc	12c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x12c>  // b.lo, b.ul, b.last
 274:	nop
 278:	cbnz	x19, 2cc <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2cc>
 27c:	cbz	x1, 3d4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3d4>
 280:	ldr	x2, [x1, #8]
 284:	cbz	x2, 50c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x50c>
 288:	ldr	x0, [x25, #8]
 28c:	cbnz	x0, 46c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x46c>
 290:	dup	v0.2d, x1
 294:	ldp	x23, x24, [sp, #32]
 298:	ldp	x27, x28, [sp, #64]
 29c:	str	xzr, [x1]
 2a0:	mov	x1, #0x1                   	// #1
 2a4:	mov	w0, w1
 2a8:	str	x1, [x25, #8]
 2ac:	str	q0, [x25, #16]
 2b0:	b	228 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x228>
 2b4:	mov	x19, #0x0                   	// #0
 2b8:	b	120 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x120>
 2bc:	mov	x27, #0x100000              	// #1048576
 2c0:	mov	x23, #0x20                  	// #32
 2c4:	mov	x28, #0x200                 	// #512
 2c8:	b	100 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x100>
 2cc:	add	x28, x26, x4, lsl #10
 2d0:	mov	x0, #0xd800                	// #55296
 2d4:	add	x27, sp, #0x90
 2d8:	add	x4, x26, x0
 2dc:	mov	x20, #0x0                   	// #0
 2e0:	b	2ec <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2ec>
 2e4:	cmp	x19, x20
 2e8:	b.ls	284 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x284>  // b.plast
 2ec:	ldr	x22, [x27, x20, lsl #3]
 2f0:	cbz	x1, 33c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x33c>
 2f4:	ldr	x0, [x1, #8]
 2f8:	add	x2, x0, #0x1
 2fc:	add	x0, x0, #0x2
 300:	str	x2, [x1, #8]
 304:	add	x20, x20, #0x1
 308:	cmp	x2, x23
 30c:	str	x22, [x1, x0, lsl #3]
 310:	b.ne	2e4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2e4>  // b.any
 314:	ldr	x0, [x25, #8]
 318:	cbnz	x0, 3b4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3b4>
 31c:	dup	v0.2d, x1
 320:	str	xzr, [x1]
 324:	mov	x0, #0x1                   	// #1
 328:	str	x0, [x25, #8]
 32c:	cmp	x19, x20
 330:	str	q0, [x25, #16]
 334:	b.ls	3d4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3d4>  // b.plast
 338:	ldr	x22, [x27, x20, lsl #3]
 33c:	mov	x1, x22
 340:	ldr	x24, [x28, #24]
 344:	cbnz	x24, 35c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x35c>
 348:	cbz	x1, 21c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x21c>
 34c:	mov	x0, #0x0                   	// #0
 350:	mov	x2, #0x1                   	// #1
 354:	str	xzr, [x1, #8]
 358:	b	2fc <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x2fc>
 35c:	cmp	x24, #0x35
 360:	b.hi	554 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x554>  // b.pmore
 364:	lsl	x5, x24, #10
 368:	add	x1, x26, x5
 36c:	ldr	x0, [x26, x5]
 370:	cbz	x0, 55c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x55c>
 374:	lsl	x24, x24, #7
 378:	add	x2, x26, x5
 37c:	add	x1, x24, x0
 380:	sub	x0, x0, #0x1
 384:	add	x1, x1, #0x2
 388:	str	x0, [x26, x5]
 38c:	add	x24, x24, x0
 390:	add	x0, x24, #0x4
 394:	ldr	x3, [x26, x1, lsl #3]
 398:	ldr	x1, [x2, #16]
 39c:	ldr	x2, [x4, #16]
 3a0:	prfm	pldl1keep, [x3]
 3a4:	add	x2, x2, x1
 3a8:	ldr	x1, [x26, x0, lsl #3]
 3ac:	str	x2, [x4, #16]
 3b0:	b	348 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x348>
 3b4:	ldr	x3, [x25, #24]
 3b8:	str	xzr, [x1]
 3bc:	add	x0, x0, #0x1
 3c0:	cmp	x19, x20
 3c4:	str	x1, [x3]
 3c8:	str	x0, [x25, #8]
 3cc:	str	x1, [x25, #24]
 3d0:	b.hi	338 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x338>  // b.pmore
 3d4:	mov	w0, #0x1                   	// #1
 3d8:	ldp	x23, x24, [sp, #32]
 3dc:	ldp	x27, x28, [sp, #64]
 3e0:	b	228 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x228>
 3e4:	add	x24, x21, #0x80, lsl #12
 3e8:	mov	w1, #0x1                   	// #1
 3ec:	ldxrb	w0, [x24]
 3f0:	stxrb	w2, w1, [x24]
 3f4:	cbnz	w2, 3ec <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x3ec>
 3f8:	dmb	ish
 3fc:	tst	w0, #0xff
 400:	b.eq	414 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x414>  // b.none
 404:	mov	x0, x24
 408:	str	x4, [sp, #104]
 40c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 410:	ldr	x4, [sp, #104]
 414:	ldr	x0, [x21, x20, lsl #3]
 418:	dmb	ish
 41c:	cbz	x0, 52c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x52c>
 420:	dmb	ish
 424:	strb	wzr, [x24]
 428:	b	88 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x88>
 42c:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 430:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 434:	add	x2, x2, #0x0
 438:	add	x0, x0, #0x0
 43c:	mov	x4, #0x0                   	// #0
 440:	mov	x3, #0x0                   	// #0
 444:	mov	w1, #0x126                 	// #294
 448:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 44c:	mov	x3, x20
 450:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 454:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 458:	add	x2, x2, #0x0
 45c:	add	x0, x0, #0x0
 460:	mov	x4, #0x36                  	// #54
 464:	mov	w1, #0xa0                  	// #160
 468:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 46c:	ldr	x4, [x25, #24]
 470:	add	x2, x0, #0x1
 474:	ldp	x23, x24, [sp, #32]
 478:	mov	w0, #0x1                   	// #1
 47c:	ldp	x27, x28, [sp, #64]
 480:	str	xzr, [x1]
 484:	str	x1, [x4]
 488:	str	x2, [x25, #8]
 48c:	str	x1, [x25, #24]
 490:	b	228 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x228>
 494:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 498:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 49c:	mov	x3, x19
 4a0:	add	x2, x2, #0x0
 4a4:	add	x0, x0, #0x0
 4a8:	mov	x4, #0x10000000            	// #268435456
 4ac:	mov	w1, #0x116                 	// #278
 4b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4b4:	mov	x3, x20
 4b8:	mov	x2, x21
 4bc:	mov	x0, x26
 4c0:	stp	x8, x4, [sp, #104]
 4c4:	stp	x5, x9, [sp, #120]
 4c8:	str	x7, [sp, #136]
 4cc:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 4d0:	tst	w0, #0xff
 4d4:	b.eq	21c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x21c>  // b.none
 4d8:	ldp	x5, x9, [sp, #120]
 4dc:	ldp	x8, x4, [sp, #104]
 4e0:	ldr	x7, [sp, #136]
 4e4:	ldr	x0, [x26, x5]
 4e8:	b	1dc <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x1dc>
 4ec:	mov	x4, x1
 4f0:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 4f4:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 4f8:	add	x2, x2, #0x0
 4fc:	add	x0, x0, #0x0
 500:	mov	x3, #0x0                   	// #0
 504:	mov	w1, #0x42                  	// #66
 508:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 50c:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 510:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 514:	add	x2, x2, #0x0
 518:	add	x0, x0, #0x0
 51c:	mov	x4, #0x0                   	// #0
 520:	mov	x3, #0x0                   	// #0
 524:	mov	w1, #0x169                 	// #361
 528:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 52c:	mov	w2, #0x0                   	// #0
 530:	adrp	x1, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 534:	mov	x0, #0x1000                	// #4096
 538:	add	x1, x1, #0x0
 53c:	str	x4, [sp, #104]
 540:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 544:	dmb	ish
 548:	str	x0, [x21, x20, lsl #3]
 54c:	ldr	x4, [sp, #104]
 550:	b	420 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x420>
 554:	mov	x3, x24
 558:	b	450 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x450>
 55c:	mov	x3, x24
 560:	mov	x2, x21
 564:	mov	x0, x26
 568:	stp	x5, x4, [sp, #104]
 56c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm>
 570:	tst	w0, #0xff
 574:	b.eq	21c <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x21c>  // b.none
 578:	ldp	x5, x4, [sp, #104]
 57c:	ldr	x0, [x26, x5]
 580:	b	374 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE16PopulateFreeListEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEPNS2_13SizeClassInfoEm+0x374>

Disassembly of section .text._ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm:

0000000000000000 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	mov	x20, x0
   8:	mov	x0, #0x2001                	// #8193
   c:	stp	x21, x22, [sp, #16]
  10:	add	x22, x3, x0
  14:	mov	x19, x3
  18:	lsl	x21, x22, #6
  1c:	stp	x23, x24, [sp, #32]
  20:	add	x23, x20, x21
  24:	stp	x25, x26, [sp, #48]
  28:	mov	x25, x2
  2c:	mov	x24, x1
  30:	mov	w1, #0x1                   	// #1
  34:	str	x30, [sp, #64]
  38:	ldxrb	w0, [x23]
  3c:	stxrb	w2, w1, [x23]
  40:	cbnz	w2, 38 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x38>
  44:	dmb	ish
  48:	tst	w0, #0xff
  4c:	b.eq	58 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x58>  // b.none
  50:	mov	x0, x23
  54:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  58:	add	x21, x21, #0x8
  5c:	add	x26, x20, x21
  60:	ldr	x5, [x20, x21]
  64:	cbnz	x5, 90 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x90>
  68:	mov	x3, x23
  6c:	mov	x2, x25
  70:	mov	x1, x24
  74:	mov	x4, x19
  78:	mov	x0, x20
  7c:	bl	0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  80:	tst	w0, #0xff
  84:	b.eq	100 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0x100>  // b.none
  88:	ldr	x5, [x20, x21]
  8c:	cbz	x5, e0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xe0>
  90:	add	x4, x20, x19, lsl #6
  94:	add	x4, x4, #0x80, lsl #12
  98:	ldr	x0, [x26, #8]
  9c:	ldr	x1, [x4, #80]
  a0:	ldr	x1, [x1]
  a4:	str	x1, [x4, #80]
  a8:	cbz	x1, d8 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xd8>
  ac:	sub	x5, x5, #0x1
  b0:	str	x5, [x4, #72]
  b4:	dmb	ish
  b8:	lsl	x22, x22, #6
  bc:	strb	wzr, [x20, x22]
  c0:	ldp	x21, x22, [sp, #16]
  c4:	ldp	x23, x24, [sp, #32]
  c8:	ldp	x25, x26, [sp, #48]
  cc:	ldr	x30, [sp, #64]
  d0:	ldp	x19, x20, [sp], #80
  d4:	ret
  d8:	str	xzr, [x4, #88]
  dc:	b	ac <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xac>
  e0:	adrp	x2, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  e4:	adrp	x0, 0 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm>
  e8:	add	x2, x2, #0x0
  ec:	add	x0, x0, #0x0
  f0:	mov	x4, #0x0                   	// #0
  f4:	mov	x3, #0x0                   	// #0
  f8:	mov	w1, #0x40                  	// #64
  fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 100:	mov	x0, #0x0                   	// #0
 104:	b	b4 <_ZN11__sanitizer20SizeClassAllocator32INS_4AP32EE13AllocateBatchEPNS_14AllocatorStatsEPNS_30SizeClassAllocator32LocalCacheIS2_EEm+0xb4>

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	mov	x19, x0
   8:	ldr	x0, [x1, #8]
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x21, x1
  14:	stp	x23, x24, [sp, #32]
  18:	mov	x22, x2
  1c:	mov	x23, x3
  20:	str	x30, [sp, #48]
  24:	cbz	x0, 168 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x168>
  28:	mov	x3, #0xd800                	// #55296
  2c:	add	x24, x19, x3
  30:	mov	x1, x24
  34:	mov	x3, x23
  38:	mov	x2, x19
  3c:	mov	x0, x22
  40:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
  44:	mov	x20, x0
  48:	cbz	x0, 150 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x150>
  4c:	ldr	x5, [x0, #8]
  50:	cbz	x5, 244 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x244>
  54:	add	x2, x0, #0x10
  58:	add	x0, x21, #0x30
  5c:	cmp	x2, x0
  60:	sub	x1, x5, #0x1
  64:	ccmp	x21, x20, #0x2, cc  // cc = lo, ul, last
  68:	add	x0, x21, #0x20
  6c:	ccmp	x1, #0x9, #0x0, cs  // cs = hs, nlast
  70:	b.ls	134 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x134>  // b.plast
  74:	lsr	x1, x5, #1
  78:	mov	x4, #0x0                   	// #0
  7c:	lsl	x1, x1, #4
  80:	ldr	q0, [x2, x4]
  84:	str	q0, [x0, x4]
  88:	add	x4, x4, #0x10
  8c:	cmp	x1, x4
  90:	b.ne	80 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x80>  // b.any
  94:	and	x4, x5, #0xfffffffffffffffe
  98:	tbz	w5, #0, a8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0xa8>
  9c:	add	x1, x4, #0x2
  a0:	ldr	x1, [x20, x1, lsl #3]
  a4:	str	x1, [x0, x4, lsl #3]
  a8:	add	x23, x19, x23, lsl #10
  ac:	str	x5, [x21]
  b0:	mov	w0, #0x1                   	// #1
  b4:	ldr	x21, [x23, #24]
  b8:	cbnz	x21, d0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0xd0>
  bc:	ldp	x21, x22, [sp, #16]
  c0:	ldp	x23, x24, [sp, #32]
  c4:	ldr	x30, [sp, #48]
  c8:	ldp	x19, x20, [sp], #64
  cc:	ret
  d0:	cmp	x21, #0x35
  d4:	b.hi	364 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x364>  // b.pmore
  d8:	lsl	x23, x21, #10
  dc:	add	x1, x19, x23
  e0:	ldr	x2, [x1, #8]
  e4:	cbz	x2, 27c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x27c>
  e8:	ldr	x0, [x19, x23]
  ec:	cmp	x0, x2
  f0:	b.eq	264 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x264>  // b.none
  f4:	add	x2, x0, x21, lsl #7
  f8:	add	x3, x19, x23
  fc:	add	x2, x2, #0x4
 100:	add	x0, x0, #0x1
 104:	str	x0, [x19, x23]
 108:	mov	w0, #0x1                   	// #1
 10c:	ldr	x1, [x24, #16]
 110:	str	x20, [x19, x2, lsl #3]
 114:	ldp	x21, x22, [sp, #16]
 118:	ldr	x2, [x3, #16]
 11c:	ldr	x30, [sp, #48]
 120:	sub	x1, x1, x2
 124:	str	x1, [x24, #16]
 128:	ldp	x23, x24, [sp, #32]
 12c:	ldp	x19, x20, [sp], #64
 130:	ret
 134:	mov	x1, #0x0                   	// #0
 138:	ldr	x3, [x2, x1, lsl #3]
 13c:	str	x3, [x0, x1, lsl #3]
 140:	add	x1, x1, #0x1
 144:	cmp	x5, x1
 148:	b.ne	138 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x138>  // b.any
 14c:	b	a8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0xa8>
 150:	mov	w0, #0x0                   	// #0
 154:	ldp	x21, x22, [sp, #16]
 158:	ldp	x23, x24, [sp, #32]
 15c:	ldr	x30, [sp, #48]
 160:	ldp	x19, x20, [sp], #64
 164:	ret
 168:	mov	x5, #0x1                   	// #1
 16c:	mov	x11, x5
 170:	mov	x12, #0x7c                  	// #124
 174:	mov	x10, #0x14                  	// #20
 178:	mov	x9, #0x100                 	// #256
 17c:	mov	w8, #0x4000                	// #16384
 180:	mov	x3, #0x3e                  	// #62
 184:	nop
 188:	add	x2, x19, x5, lsl #10
 18c:	lsl	x4, x5, #4
 190:	mov	x6, x2
 194:	mov	x0, #0x14                  	// #20
 198:	mov	x1, x5
 19c:	add	x5, x5, #0x1
 1a0:	stp	x12, x4, [x2, #8]
 1a4:	cmp	x5, #0x36
 1a8:	str	x0, [x6, #24]
 1ac:	b.eq	28 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x28>  // b.none
 1b0:	cmp	x5, #0x35
 1b4:	b.eq	224 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x224>  // b.none
 1b8:	cmp	x5, #0x10
 1bc:	b.ls	188 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x188>  // b.plast
 1c0:	sub	x4, x1, #0xf
 1c4:	add	x6, x6, #0x400
 1c8:	and	x0, x4, #0x3
 1cc:	mov	x1, x5
 1d0:	lsr	x4, x4, #2
 1d4:	add	x5, x5, #0x1
 1d8:	lsl	x4, x9, x4
 1dc:	lsr	x7, x4, #2
 1e0:	madd	x7, x7, x0, x4
 1e4:	str	x7, [x6, #16]
 1e8:	udiv	w4, w8, w7
 1ec:	cmp	x4, #0x0
 1f0:	csel	x4, x4, x11, ne  // ne = any
 1f4:	cmp	x4, #0x3e
 1f8:	csel	x4, x4, x3, ls  // ls = plast
 1fc:	add	x0, x4, #0x2
 200:	lsl	x4, x4, #1
 204:	str	x4, [x6, #8]
 208:	cmp	x7, x0, lsl #3
 20c:	csel	x0, x10, xzr, cc  // cc = lo, ul, last
 210:	str	x0, [x6, #24]
 214:	cmp	x5, #0x36
 218:	b.eq	28 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x28>  // b.none
 21c:	cmp	x5, #0x35
 220:	b.ne	1b8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x1b8>  // b.any
 224:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 228:	ldr	q0, [x0]
 22c:	mov	x0, #0xd400                	// #54272
 230:	add	x1, x19, x0
 234:	add	x0, x19, #0x8, lsl #12
 238:	stur	q0, [x1, #8]
 23c:	str	xzr, [x0, #21528]
 240:	b	28 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x28>
 244:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 248:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 24c:	add	x2, x2, #0x0
 250:	add	x0, x0, #0x0
 254:	mov	x4, #0x0                   	// #0
 258:	mov	x3, #0x0                   	// #0
 25c:	mov	w1, #0xf6                  	// #246
 260:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 264:	mov	x0, x19
 268:	mov	x2, x22
 26c:	mov	x3, x21
 270:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 274:	ldr	x0, [x19, x23]
 278:	b	f4 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0xf4>
 27c:	mov	x2, #0x1                   	// #1
 280:	mov	x11, x2
 284:	mov	x12, #0x7c                  	// #124
 288:	mov	x10, #0x14                  	// #20
 28c:	mov	x9, #0x100                 	// #256
 290:	mov	w8, #0x4000                	// #16384
 294:	mov	x7, #0x3e                  	// #62
 298:	add	x5, x19, x2, lsl #10
 29c:	lsl	x6, x2, #4
 2a0:	mov	x4, x5
 2a4:	mov	x0, #0x14                  	// #20
 2a8:	mov	x3, x2
 2ac:	add	x2, x2, #0x1
 2b0:	stp	x12, x6, [x5, #8]
 2b4:	cmp	x2, #0x36
 2b8:	str	x0, [x4, #24]
 2bc:	b.eq	32c <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x32c>  // b.none
 2c0:	cmp	x2, #0x35
 2c4:	b.eq	334 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x334>  // b.none
 2c8:	cmp	x2, #0x10
 2cc:	b.ls	298 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x298>  // b.plast
 2d0:	sub	x0, x3, #0xf
 2d4:	add	x4, x4, #0x400
 2d8:	and	x6, x0, #0x3
 2dc:	mov	x3, x2
 2e0:	lsr	x0, x0, #2
 2e4:	add	x2, x2, #0x1
 2e8:	lsl	x0, x9, x0
 2ec:	lsr	x5, x0, #2
 2f0:	madd	x5, x5, x6, x0
 2f4:	str	x5, [x4, #16]
 2f8:	udiv	w0, w8, w5
 2fc:	cmp	x0, #0x0
 300:	csel	x0, x0, x11, ne  // ne = any
 304:	cmp	x0, #0x3e
 308:	csel	x0, x0, x7, ls  // ls = plast
 30c:	add	x6, x0, #0x2
 310:	lsl	x0, x0, #1
 314:	str	x0, [x4, #8]
 318:	cmp	x5, x6, lsl #3
 31c:	csel	x0, x10, xzr, cc  // cc = lo, ul, last
 320:	str	x0, [x4, #24]
 324:	cmp	x2, #0x36
 328:	b.ne	2c0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x2c0>  // b.any
 32c:	ldr	x2, [x1, #8]
 330:	b	e8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0xe8>
 334:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 338:	mov	x2, #0xd400                	// #54272
 33c:	add	x2, x19, x2
 340:	ldr	q0, [x0]
 344:	add	x0, x19, #0x8, lsl #12
 348:	stur	q0, [x2, #8]
 34c:	str	xzr, [x0, #21528]
 350:	ldr	x0, [x19, x23]
 354:	ldr	x2, [x1, #8]
 358:	cmp	x0, x2
 35c:	b.ne	f4 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0xf4>  // b.any
 360:	b	264 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m+0x264>
 364:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 368:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE6RefillEPNS4_8PerClassEPS3_m>
 36c:	mov	x3, x21
 370:	add	x2, x2, #0x0
 374:	add	x0, x0, #0x0
 378:	mov	x4, #0x36                  	// #54
 37c:	mov	w1, #0xaf                  	// #175
 380:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	cmp	x2, #0x0
   8:	stp	x21, x22, [sp, #16]
   c:	csinc	x22, x2, xzr, ne  // ne = any
  10:	mov	x21, x1
  14:	str	x30, [sp, #64]
  18:	adds	x1, x3, x22
  1c:	b.cs	470 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x470>  // b.hs, b.nlast
  20:	stp	x23, x24, [sp, #32]
  24:	mov	x19, x3
  28:	mov	x23, x0
  2c:	cmp	x3, #0x8
  30:	b.hi	278 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x278>  // b.pmore
  34:	cmp	x2, #0x20, lsl #12
  38:	b.hi	fc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xfc>  // b.pmore
  3c:	cmp	x22, #0x100
  40:	b.ls	2ac <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x2ac>  // b.plast
  44:	clz	x3, x22
  48:	mov	w20, #0x3f                  	// #63
  4c:	sub	w20, w20, w3
  50:	mov	w3, #0x1                   	// #1
  54:	sub	w1, w20, #0x2
  58:	lsl	w3, w3, w1
  5c:	sub	w3, w3, #0x1
  60:	tst	x3, x22
  64:	lsr	x3, x22, x1
  68:	and	x3, x3, #0x3
  6c:	cinc	x3, x3, ne  // ne = any
  70:	add	x20, x3, w20, sxtw #2
  74:	sub	x20, x20, #0x10
  78:	cmp	x20, #0x35
  7c:	b.hi	2fc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x2fc>  // b.pmore
  80:	lsl	x22, x20, #10
  84:	add	x1, x21, x22
  88:	ldr	x3, [x21, x22]
  8c:	cbz	x3, 390 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x390>
  90:	lsl	x20, x20, #7
  94:	add	x1, x21, x22
  98:	add	x0, x20, x3
  9c:	mov	x2, #0xd800                	// #55296
  a0:	add	x0, x0, #0x2
  a4:	sub	x3, x3, #0x1
  a8:	add	x2, x21, x2
  ac:	str	x3, [x21, x22]
  b0:	add	x20, x20, x3
  b4:	ldr	x3, [x21, x0, lsl #3]
  b8:	add	x20, x20, #0x4
  bc:	ldr	x0, [x1, #16]
  c0:	ldr	x1, [x2, #16]
  c4:	prfm	pldl1keep, [x3]
  c8:	add	x1, x1, x0
  cc:	ldr	x0, [x21, x20, lsl #3]
  d0:	str	x1, [x2, #16]
  d4:	cmp	x19, #0x8
  d8:	b.ls	e8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xe8>  // b.plast
  dc:	sub	x19, x19, #0x1
  e0:	ands	x3, x0, x19
  e4:	b.ne	350 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x350>  // b.any
  e8:	ldp	x23, x24, [sp, #32]
  ec:	ldp	x21, x22, [sp, #16]
  f0:	ldr	x30, [sp, #64]
  f4:	ldp	x19, x20, [sp], #80
  f8:	ret
  fc:	stp	x25, x26, [sp, #48]
 100:	sub	x24, x3, #0x1
 104:	tst	x3, x24
 108:	b.ne	370 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x370>  // b.any
 10c:	add	x25, x23, #0x80, lsl #12
 110:	add	x25, x25, #0xc00
 114:	ldr	x2, [x25, #448]
 118:	sub	x0, x2, #0x1
 11c:	tst	x2, x0
 120:	b.ne	2ec <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x2ec>  // b.any
 124:	add	x20, x22, x0
 128:	neg	x0, x2
 12c:	and	x20, x20, x0
 130:	cmp	x19, x2
 134:	add	x20, x20, x2
 138:	add	x0, x20, x19
 13c:	csel	x20, x0, x20, hi  // hi = pmore
 140:	cmp	x22, x20
 144:	b.hi	320 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x320>  // b.pmore
 148:	adrp	x1, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 14c:	mov	x0, x20
 150:	ldr	x1, [x1]
 154:	bl	0 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>
 158:	cbz	x0, 3b0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3b0>
 15c:	ldr	x1, [x25, #448]
 160:	sub	x2, x1, #0x1
 164:	tst	x0, x2
 168:	b.ne	3c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3c0>  // b.any
 16c:	add	x21, x0, x1
 170:	ands	x3, x24, x21
 174:	b.eq	188 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x188>  // b.none
 178:	add	x21, x19, x21
 17c:	sub	x21, x21, x3
 180:	tst	x24, x21
 184:	b.ne	3e0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3e0>  // b.any
 188:	tst	x21, x2
 18c:	b.ne	400 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x400>  // b.any
 190:	add	x3, x21, x22
 194:	cmp	x0, x3
 198:	b.hi	420 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x420>  // b.pmore
 19c:	add	x4, x0, x20
 1a0:	cmp	x4, x3
 1a4:	b.cc	43c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x43c>  // b.lo, b.ul, b.last
 1a8:	sub	x24, x21, x1
 1ac:	add	x26, x23, #0xc1, lsl #12
 1b0:	mov	w1, #0x1                   	// #1
 1b4:	stp	x0, x20, [x24]
 1b8:	str	x22, [x24, #16]
 1bc:	ldxrb	w0, [x26]
 1c0:	stxrb	w2, w1, [x26]
 1c4:	cbnz	w2, 1bc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x1bc>
 1c8:	dmb	ish
 1cc:	tst	w0, #0xff
 1d0:	b.eq	1dc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x1dc>  // b.none
 1d4:	mov	x0, x26
 1d8:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 1dc:	add	x25, x25, #0x1c0
 1e0:	mov	x0, #0x7fff                	// #32767
 1e4:	add	x1, x25, #0x40, lsl #12
 1e8:	ldr	x3, [x1, #16]
 1ec:	cmp	x3, x0
 1f0:	b.hi	454 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x454>  // b.pmore
 1f4:	clz	x0, x20
 1f8:	mov	w2, #0x3f                  	// #63
 1fc:	sub	w2, w2, w0
 200:	add	x5, x3, #0x1
 204:	ldp	x0, x4, [x1, #48]
 208:	add	x23, x23, w2, sxtw #3
 20c:	ldr	x6, [x25, #8]
 210:	str	x5, [x1, #16]
 214:	ldr	x5, [x1, #32]
 218:	str	x3, [x24, #24]
 21c:	add	x0, x20, x0
 220:	add	x23, x23, #0xc0, lsl #12
 224:	cmp	x4, x0
 228:	str	x24, [x6, x3, lsl #3]
 22c:	csel	x4, x4, x0, cs  // cs = hs, nlast
 230:	add	x5, x5, #0x1
 234:	strb	wzr, [x1, #24]
 238:	str	x5, [x1, #32]
 23c:	stp	x0, x4, [x1, #48]
 240:	ldr	x1, [x23, #3584]
 244:	ldr	x0, [x26, #24]
 248:	add	x1, x1, #0x1
 24c:	str	x1, [x23, #3584]
 250:	add	x0, x20, x0
 254:	str	x0, [x26, #24]
 258:	ldr	x0, [x26, #32]
 25c:	add	x20, x20, x0
 260:	str	x20, [x26, #32]
 264:	dmb	ish
 268:	strb	wzr, [x26]
 26c:	mov	x0, x21
 270:	ldp	x25, x26, [sp, #48]
 274:	b	d4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xd4>
 278:	sub	x24, x3, #0x1
 27c:	tst	x3, x24
 280:	b.ne	2e8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x2e8>  // b.any
 284:	sub	x3, x1, #0x1
 288:	neg	x1, x19
 28c:	cmp	x19, #0x20, lsl #12
 290:	and	x1, x3, x1
 294:	mov	x0, #0x20000               	// #131072
 298:	ccmp	x1, x0, #0x2, ls  // ls = plast
 29c:	b.hi	2e0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x2e0>  // b.pmore
 2a0:	mov	x22, x1
 2a4:	cmp	x22, #0x100
 2a8:	b.hi	44 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x44>  // b.pmore
 2ac:	add	x20, x22, #0xf
 2b0:	cmp	xzr, x20, lsr #4
 2b4:	lsr	x20, x20, #4
 2b8:	b.ne	80 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x80>  // b.any
 2bc:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 2c0:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 2c4:	add	x2, x2, #0x0
 2c8:	add	x0, x0, #0x0
 2cc:	mov	x4, #0x0                   	// #0
 2d0:	mov	x3, #0x0                   	// #0
 2d4:	mov	w1, #0x9f                  	// #159
 2d8:	stp	x25, x26, [sp, #48]
 2dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2e0:	stp	x25, x26, [sp, #48]
 2e4:	b	10c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x10c>
 2e8:	stp	x25, x26, [sp, #48]
 2ec:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 2f0:	add	x0, x0, #0x0
 2f4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 2f8:	bl	0 <_ZN11__sanitizer3DieEv>
 2fc:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 300:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 304:	mov	x3, x20
 308:	add	x2, x2, #0x0
 30c:	add	x0, x0, #0x0
 310:	mov	x4, #0x36                  	// #54
 314:	mov	w1, #0xa0                  	// #160
 318:	stp	x25, x26, [sp, #48]
 31c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 320:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 324:	mov	x3, x19
 328:	mov	x2, x20
 32c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 330:	ldr	x1, [x1]
 334:	add	x0, x0, #0x0
 338:	ldr	x1, [x1]
 33c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 340:	mov	x0, #0x0                   	// #0
 344:	ldp	x23, x24, [sp, #32]
 348:	ldp	x25, x26, [sp, #48]
 34c:	b	ec <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xec>
 350:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 354:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 358:	add	x2, x2, #0x0
 35c:	add	x0, x0, #0x0
 360:	mov	x4, #0x0                   	// #0
 364:	mov	w1, #0x42                  	// #66
 368:	stp	x25, x26, [sp, #48]
 36c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 370:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 374:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 378:	add	x2, x2, #0x0
 37c:	add	x0, x0, #0x0
 380:	mov	x4, #0x0                   	// #0
 384:	mov	x3, #0x0                   	// #0
 388:	mov	w1, #0x53                  	// #83
 38c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 390:	mov	x2, x23
 394:	mov	x3, x20
 398:	mov	x0, x21
 39c:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3a0:	tst	w0, #0xff
 3a4:	b.eq	3b4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x3b4>  // b.none
 3a8:	ldr	x3, [x21, x22]
 3ac:	b	90 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0x90>
 3b0:	ldp	x25, x26, [sp, #48]
 3b4:	mov	x0, #0x0                   	// #0
 3b8:	ldp	x23, x24, [sp, #32]
 3bc:	b	ec <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xec>
 3c0:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3c4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3c8:	add	x2, x2, #0x0
 3cc:	add	x0, x0, #0x0
 3d0:	mov	x4, #0x0                   	// #0
 3d4:	mov	x3, #0x0                   	// #0
 3d8:	mov	w1, #0x62                  	// #98
 3dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3e0:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3e4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 3e8:	add	x2, x2, #0x0
 3ec:	add	x0, x0, #0x0
 3f0:	mov	x4, #0x0                   	// #0
 3f4:	mov	x3, #0x0                   	// #0
 3f8:	mov	w1, #0x68                  	// #104
 3fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 400:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 404:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 408:	add	x2, x2, #0x0
 40c:	add	x0, x0, #0x0
 410:	mov	x4, #0x0                   	// #0
 414:	mov	x3, #0x0                   	// #0
 418:	mov	w1, #0x69                  	// #105
 41c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 420:	mov	x4, x0
 424:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 428:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 42c:	add	x2, x2, #0x0
 430:	add	x0, x0, #0x0
 434:	mov	w1, #0x6a                  	// #106
 438:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 43c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 440:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 444:	add	x2, x2, #0x0
 448:	add	x0, x0, #0x0
 44c:	mov	w1, #0x6b                  	// #107
 450:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 454:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 458:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 45c:	add	x2, x2, #0x0
 460:	add	x0, x0, #0x0
 464:	mov	x4, #0x8000                	// #32768
 468:	mov	w1, #0x15                  	// #21
 46c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 470:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 474:	mov	x2, x22
 478:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm>
 47c:	add	x0, x0, #0x0
 480:	ldr	x1, [x1]
 484:	ldr	x1, [x1]
 488:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 48c:	mov	x0, #0x0                   	// #0
 490:	b	ec <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE8AllocateEPS5_mm+0xec>

Disassembly of section .text._ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m:

0000000000000000 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	stp	x23, x24, [sp, #32]
   8:	mov	x23, x1
   c:	add	x1, x0, x3, lsl #10
  10:	stp	x25, x26, [sp, #48]
  14:	mov	x24, x3
  18:	mov	x25, x2
  1c:	ldp	x20, x19, [x23]
  20:	stp	x21, x22, [sp, #16]
  24:	ldr	x26, [x1, #24]
  28:	str	x30, [sp, #72]
  2c:	lsr	x19, x19, #1
  30:	cmp	x19, x20
  34:	csel	x19, x19, x20, ls  // ls = plast
  38:	sub	x21, x20, x19
  3c:	cbnz	x26, f4 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0xf4>
  40:	add	x0, x21, #0x4
  44:	ldr	x2, [x23, x0, lsl #3]
  48:	cbz	x2, 180 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x180>
  4c:	add	x5, x21, #0x4
  50:	str	x19, [x2, #8]
  54:	add	x5, x23, x5, lsl #3
  58:	cbz	x19, c8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0xc8>
  5c:	add	x0, x20, #0x6
  60:	add	x4, x20, #0x4
  64:	sub	x0, x0, x19
  68:	sub	x4, x4, x19
  6c:	add	x7, x2, #0x10
  70:	add	x1, x2, #0x20
  74:	add	x0, x23, x0, lsl #3
  78:	add	x4, x23, x4, lsl #3
  7c:	cmp	x7, x0
  80:	sub	x0, x19, #0x1
  84:	ccmp	x1, x4, #0x0, cc  // cc = lo, ul, last
  88:	ccmp	x0, #0x9, #0x0, ls  // ls = plast
  8c:	b.ls	160 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x160>  // b.plast
  90:	lsr	x6, x19, #1
  94:	mov	x0, #0x0                   	// #0
  98:	lsl	x6, x6, #4
  9c:	nop
  a0:	ldr	q0, [x4, x0]
  a4:	str	q0, [x7, x0]
  a8:	add	x0, x0, #0x10
  ac:	cmp	x0, x6
  b0:	b.ne	a0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0xa0>  // b.any
  b4:	and	x0, x19, #0xfffffffffffffffe
  b8:	tbz	w19, #0, c8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0xc8>
  bc:	add	x4, x0, #0x2
  c0:	ldr	x0, [x5, x0, lsl #3]
  c4:	str	x0, [x2, x4, lsl #3]
  c8:	ldr	x3, [x23]
  cc:	mov	x0, x25
  d0:	ldp	x21, x22, [sp, #16]
  d4:	sub	x19, x3, x19
  d8:	ldp	x25, x26, [sp, #48]
  dc:	mov	x1, x24
  e0:	ldr	x30, [sp, #72]
  e4:	str	x19, [x23]
  e8:	ldp	x23, x24, [sp, #32]
  ec:	ldp	x19, x20, [sp], #80
  f0:	b	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
  f4:	str	x27, [sp, #64]
  f8:	cmp	x26, #0x35
  fc:	b.hi	1a0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x1a0>  // b.pmore
 100:	lsl	x27, x26, #10
 104:	mov	x22, x0
 108:	add	x1, x0, x27
 10c:	ldr	x3, [x0, x27]
 110:	cbz	x3, 1c0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x1c0>
 114:	lsl	x26, x26, #7
 118:	add	x2, x22, x27
 11c:	add	x0, x26, x3
 120:	mov	x1, #0xd800                	// #55296
 124:	add	x0, x0, #0x2
 128:	sub	x3, x3, #0x1
 12c:	add	x1, x22, x1
 130:	str	x3, [x22, x27]
 134:	add	x26, x26, x3
 138:	ldr	x3, [x22, x0, lsl #3]
 13c:	add	x26, x26, #0x4
 140:	ldr	x2, [x2, #16]
 144:	ldr	x0, [x1, #16]
 148:	prfm	pldl1keep, [x3]
 14c:	add	x0, x0, x2
 150:	ldr	x2, [x22, x26, lsl #3]
 154:	ldr	x27, [sp, #64]
 158:	str	x0, [x1, #16]
 15c:	b	48 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x48>
 160:	mov	x0, #0x0                   	// #0
 164:	nop
 168:	ldr	x1, [x5, x0, lsl #3]
 16c:	str	x1, [x7, x0, lsl #3]
 170:	add	x0, x0, #0x1
 174:	cmp	x19, x0
 178:	b.ne	168 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x168>  // b.any
 17c:	b	c8 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0xc8>
 180:	str	x27, [sp, #64]
 184:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 188:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
 18c:	add	x0, x0, #0x0
 190:	ldr	x1, [x1]
 194:	ldr	x1, [x1]
 198:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 19c:	bl	0 <_ZN11__sanitizer3DieEv>
 1a0:	adrp	x2, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
 1a4:	adrp	x0, 0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
 1a8:	mov	x3, x26
 1ac:	add	x2, x2, #0x0
 1b0:	add	x0, x0, #0x0
 1b4:	mov	x4, #0x36                  	// #54
 1b8:	mov	w1, #0xa0                  	// #160
 1bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 1c0:	mov	x3, x26
 1c4:	bl	0 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m>
 1c8:	tst	w0, #0xff
 1cc:	b.eq	184 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x184>  // b.none
 1d0:	ldr	x3, [x22, x27]
 1d4:	b	114 <_ZN11__sanitizer30SizeClassAllocator32LocalCacheINS_20SizeClassAllocator32INS_4AP32EEEE5DrainEPNS4_8PerClassEPS3_m+0x114>

Disassembly of section .text._ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm:

0000000000000000 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	stp	x23, x24, [sp, #32]
   8:	mov	x23, x3
   c:	mov	x24, x4
  10:	str	x30, [sp, #56]
  14:	cbz	x2, 2c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x2c0>
  18:	stp	x21, x22, [sp, #16]
  1c:	mov	x19, x2
  20:	mov	x20, x0
  24:	mov	x22, x1
  28:	cbz	x3, 2d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x2d8>
  2c:	str	x25, [sp, #48]
  30:	mov	x0, #0xffffffffffff        	// #281474976710655
  34:	cmp	x2, x0
  38:	b.ls	250 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x250>  // b.plast
  3c:	add	x25, x20, #0xc1, lsl #12
  40:	mov	w2, #0x1                   	// #1
  44:	ldxrb	w1, [x25]
  48:	stxrb	w0, w2, [x25]
  4c:	cbnz	w0, 44 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x44>
  50:	dmb	ish
  54:	tst	w1, #0xff
  58:	b.eq	64 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x64>  // b.none
  5c:	mov	x0, x25
  60:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
  64:	add	x21, x20, #0x80, lsl #12
  68:	add	x21, x21, #0xc00
  6c:	add	x1, x21, #0x1c0
  70:	add	x2, x1, #0x40, lsl #12
  74:	ldr	x7, [x2, #16]
  78:	cbz	x7, 298 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x298>
  7c:	ldr	x6, [x1, #8]
  80:	mov	x3, #0x0                   	// #0
  84:	add	x8, x6, x7, lsl #3
  88:	ldr	x7, [x6]
  8c:	cmp	x19, x7
  90:	b.cc	a4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0xa4>  // b.lo, b.ul, b.last
  94:	sub	x2, x19, x3
  98:	sub	x1, x19, x7
  9c:	cmp	x2, x1
  a0:	csel	x3, x3, x7, ls  // ls = plast
  a4:	add	x6, x6, #0x8
  a8:	cmp	x6, x8
  ac:	b.ne	88 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x88>  // b.any
  b0:	cbz	x3, 298 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x298>
  b4:	ldr	x4, [x3]
  b8:	cmp	x4, x3
  bc:	b.hi	584 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x584>  // b.pmore
  c0:	ldr	x0, [x3, #8]
  c4:	add	x4, x4, x0
  c8:	cmp	x4, x3
  cc:	b.ls	59c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x59c>  // b.plast
  d0:	cmp	x19, x3
  d4:	b.cc	5b4 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x5b4>  // b.lo, b.ul, b.last
  d8:	cmp	x4, x19
  dc:	b.ls	298 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x298>  // b.plast
  e0:	ldr	x0, [x21, #448]
  e4:	sub	x1, x0, #0x1
  e8:	tst	x1, x3
  ec:	b.ne	4f8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x4f8>  // b.any
  f0:	dmb	ish
  f4:	strb	wzr, [x25]
  f8:	cmn	x0, x3
  fc:	b.eq	2a0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x2a0>  // b.none
 100:	mov	x0, #0xffffffffffff        	// #281474976710655
 104:	cmp	x19, x0
 108:	b.ls	440 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x440>  // b.plast
 10c:	ldr	x1, [x21, #448]
 110:	sub	x0, x1, #0x1
 114:	tst	x19, x0
 118:	b.ne	4d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x4d8>  // b.any
 11c:	sub	x2, x19, x1
 120:	tst	x1, x0
 124:	ldr	x5, [x2, #16]
 128:	b.ne	5d0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x5d0>  // b.any
 12c:	add	x5, x5, x0
 130:	neg	x0, x1
 134:	and	x0, x5, x0
 138:	cmp	x0, x23
 13c:	csel	x21, x0, x23, ls  // ls = plast
 140:	mov	x2, x23
 144:	mov	x3, x24
 148:	mov	x1, x22
 14c:	mov	x0, x20
 150:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 154:	mov	x23, x0
 158:	cbz	x0, 168 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x168>
 15c:	mov	x2, x21
 160:	mov	x1, x19
 164:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 168:	mov	x0, #0xffffffffffff        	// #281474976710655
 16c:	cmp	x19, x0
 170:	b.ls	44c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x44c>  // b.plast
 174:	add	x21, x20, #0x80, lsl #12
 178:	add	x21, x21, #0xc00
 17c:	ldr	x4, [x21, #448]
 180:	sub	x0, x4, #0x1
 184:	tst	x19, x0
 188:	b.ne	4d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x4d8>  // b.any
 18c:	sub	x19, x19, x4
 190:	add	x25, x20, #0xc1, lsl #12
 194:	mov	w1, #0x1                   	// #1
 198:	ldxrb	w0, [x25]
 19c:	stxrb	w2, w1, [x25]
 1a0:	cbnz	w2, 198 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x198>
 1a4:	dmb	ish
 1a8:	tst	w0, #0xff
 1ac:	b.eq	1b8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x1b8>  // b.none
 1b0:	mov	x0, x25
 1b4:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 1b8:	ldr	x0, [x19, #24]
 1bc:	add	x21, x21, #0x1c0
 1c0:	ldr	x2, [x21, #8]
 1c4:	ldr	x3, [x2, x0, lsl #3]
 1c8:	cmp	x3, x19
 1cc:	b.ne	5e0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x5e0>  // b.any
 1d0:	add	x21, x21, #0x40, lsl #12
 1d4:	ldr	x4, [x21, #16]
 1d8:	cmp	x0, x4
 1dc:	b.cs	5fc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x5fc>  // b.hs, b.nlast
 1e0:	sub	x4, x4, #0x1
 1e4:	ldr	x3, [x19, #8]
 1e8:	ldr	x5, [x2, x4, lsl #3]
 1ec:	str	x4, [x21, #16]
 1f0:	str	x5, [x2, x0, lsl #3]
 1f4:	ldp	x4, x2, [x21, #40]
 1f8:	str	x0, [x5, #24]
 1fc:	ldr	x0, [x25, #24]
 200:	strb	wzr, [x21, #24]
 204:	sub	x0, x0, x3
 208:	sub	x2, x2, x3
 20c:	add	x4, x4, #0x1
 210:	stp	x4, x2, [x21, #40]
 214:	str	x0, [x25, #24]
 218:	ldr	x0, [x25, #32]
 21c:	sub	x0, x0, x3
 220:	str	x0, [x25, #32]
 224:	dmb	ish
 228:	strb	wzr, [x25]
 22c:	ldp	x0, x1, [x19]
 230:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 234:	ldr	x25, [sp, #48]
 238:	mov	x0, x23
 23c:	ldp	x21, x22, [sp, #16]
 240:	ldp	x23, x24, [sp, #32]
 244:	ldr	x30, [sp, #56]
 248:	ldp	x19, x20, [sp], #64
 24c:	ret
 250:	lsr	x0, x2, #32
 254:	ldr	x1, [x20, x0, lsl #3]
 258:	dmb	ish
 25c:	cbz	x1, 3c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x3c>
 260:	lsr	w2, w2, #20
 264:	lsr	x3, x19, #20
 268:	ldrb	w1, [x1, x2]
 26c:	cbz	w1, 3c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x3c>
 270:	lsl	x1, x0, #3
 274:	ldr	x0, [x20, x0, lsl #3]
 278:	dmb	ish
 27c:	cbz	x0, 28c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x28c>
 280:	and	x3, x3, #0xfff
 284:	ldrb	w0, [x0, x3]
 288:	cbnz	w0, 518 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x518>
 28c:	add	x21, x20, #0x80, lsl #12
 290:	add	x21, x21, #0xc00
 294:	b	10c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x10c>
 298:	dmb	ish
 29c:	strb	wzr, [x25]
 2a0:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 2a4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 2a8:	add	x2, x2, #0x0
 2ac:	add	x0, x0, #0x0
 2b0:	mov	x4, #0x0                   	// #0
 2b4:	mov	x3, #0x0                   	// #0
 2b8:	mov	w1, #0x62                  	// #98
 2bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2c0:	mov	x2, x23
 2c4:	mov	x3, x4
 2c8:	ldp	x23, x24, [sp, #32]
 2cc:	ldr	x30, [sp, #56]
 2d0:	ldp	x19, x20, [sp], #64
 2d4:	b	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 2d8:	mov	x0, #0xffffffffffff        	// #281474976710655
 2dc:	cmp	x2, x0
 2e0:	b.hi	370 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x370>  // b.pmore
 2e4:	lsr	x1, x2, #32
 2e8:	ldr	x0, [x20, x1, lsl #3]
 2ec:	dmb	ish
 2f0:	cbz	x0, 370 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x370>
 2f4:	lsr	w2, w2, #20
 2f8:	ldrb	w0, [x0, x2]
 2fc:	cbz	w0, 370 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x370>
 300:	ldr	x0, [x20, x1, lsl #3]
 304:	dmb	ish
 308:	cbz	x0, 628 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x628>
 30c:	ldrb	w21, [x0, x2]
 310:	cbz	x21, 628 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x628>
 314:	cmp	x21, #0x35
 318:	b.hi	66c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x66c>  // b.pmore
 31c:	lsl	x23, x21, #10
 320:	add	x1, x22, x23
 324:	ldr	x2, [x1, #8]
 328:	cbz	x2, 7a0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x7a0>
 32c:	ldr	x0, [x22, x23]
 330:	cmp	x0, x2
 334:	b.eq	788 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x788>  // b.none
 338:	add	x1, x0, x21, lsl #7
 33c:	add	x3, x22, x23
 340:	add	x1, x1, #0x4
 344:	add	x0, x0, #0x1
 348:	mov	x5, #0xd800                	// #55296
 34c:	add	x2, x22, x5
 350:	str	x0, [x22, x23]
 354:	mov	x23, #0x0                   	// #0
 358:	str	x19, [x22, x1, lsl #3]
 35c:	ldr	x0, [x2, #16]
 360:	ldr	x1, [x3, #16]
 364:	sub	x0, x0, x1
 368:	str	x0, [x2, #16]
 36c:	b	238 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x238>
 370:	add	x21, x20, #0x80, lsl #12
 374:	add	x21, x21, #0xc00
 378:	ldr	x4, [x21, #448]
 37c:	str	x25, [sp, #48]
 380:	sub	x0, x4, #0x1
 384:	tst	x19, x0
 388:	b.ne	4d8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x4d8>  // b.any
 38c:	sub	x19, x19, x4
 390:	add	x25, x20, #0xc1, lsl #12
 394:	mov	w1, #0x1                   	// #1
 398:	ldxrb	w0, [x25]
 39c:	stxrb	w2, w1, [x25]
 3a0:	cbnz	w2, 398 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x398>
 3a4:	dmb	ish
 3a8:	tst	w0, #0xff
 3ac:	b.eq	3b8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x3b8>  // b.none
 3b0:	mov	x0, x25
 3b4:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 3b8:	ldr	x0, [x19, #24]
 3bc:	add	x21, x21, #0x1c0
 3c0:	ldr	x2, [x21, #8]
 3c4:	ldr	x3, [x2, x0, lsl #3]
 3c8:	cmp	x3, x19
 3cc:	b.ne	5e0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x5e0>  // b.any
 3d0:	add	x21, x21, #0x40, lsl #12
 3d4:	ldr	x4, [x21, #16]
 3d8:	cmp	x0, x4
 3dc:	b.cs	5fc <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x5fc>  // b.hs, b.nlast
 3e0:	sub	x4, x4, #0x1
 3e4:	ldr	x3, [x19, #8]
 3e8:	ldr	x5, [x2, x4, lsl #3]
 3ec:	str	x4, [x21, #16]
 3f0:	str	x5, [x2, x0, lsl #3]
 3f4:	ldp	x4, x2, [x21, #40]
 3f8:	str	x0, [x5, #24]
 3fc:	ldr	x0, [x25, #24]
 400:	strb	wzr, [x21, #24]
 404:	sub	x0, x0, x3
 408:	sub	x2, x2, x3
 40c:	add	x4, x4, #0x1
 410:	stp	x4, x2, [x21, #40]
 414:	str	x0, [x25, #24]
 418:	ldr	x0, [x25, #32]
 41c:	sub	x0, x0, x3
 420:	str	x0, [x25, #32]
 424:	dmb	ish
 428:	strb	wzr, [x25]
 42c:	ldp	x0, x1, [x19]
 430:	mov	x23, #0x0                   	// #0
 434:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 438:	ldr	x25, [sp, #48]
 43c:	b	238 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x238>
 440:	lsr	x3, x19, #20
 444:	lsr	x0, x19, #32
 448:	b	270 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x270>
 44c:	lsr	x1, x19, #32
 450:	ldr	x0, [x20, x1, lsl #3]
 454:	dmb	ish
 458:	cbz	x0, 174 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x174>
 45c:	lsr	w2, w19, #20
 460:	ldrb	w0, [x0, x2]
 464:	cbz	w0, 174 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x174>
 468:	ldr	x0, [x20, x1, lsl #3]
 46c:	dmb	ish
 470:	cbz	x0, 62c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x62c>
 474:	ldrb	w21, [x0, x2]
 478:	cbz	x21, 62c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x62c>
 47c:	cmp	x21, #0x35
 480:	b.hi	670 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x670>  // b.pmore
 484:	lsl	x24, x21, #10
 488:	add	x1, x22, x24
 48c:	ldr	x2, [x1, #8]
 490:	cbz	x2, 6a8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x6a8>
 494:	ldr	x0, [x22, x24]
 498:	cmp	x0, x2
 49c:	b.eq	690 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x690>  // b.none
 4a0:	add	x1, x0, x21, lsl #7
 4a4:	add	x3, x22, x24
 4a8:	add	x1, x1, #0x4
 4ac:	add	x0, x0, #0x1
 4b0:	mov	x4, #0xd800                	// #55296
 4b4:	add	x2, x22, x4
 4b8:	str	x0, [x22, x24]
 4bc:	str	x19, [x22, x1, lsl #3]
 4c0:	ldr	x0, [x2, #16]
 4c4:	ldr	x1, [x3, #16]
 4c8:	ldr	x25, [sp, #48]
 4cc:	sub	x0, x0, x1
 4d0:	str	x0, [x2, #16]
 4d4:	b	238 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x238>
 4d8:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 4dc:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 4e0:	add	x2, x2, #0x0
 4e4:	add	x0, x0, #0x0
 4e8:	mov	x4, #0x0                   	// #0
 4ec:	mov	x3, #0x0                   	// #0
 4f0:	mov	w1, #0x123                 	// #291
 4f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4f8:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 4fc:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 500:	add	x2, x2, #0x0
 504:	add	x0, x0, #0x0
 508:	mov	x4, #0x0                   	// #0
 50c:	mov	x3, #0x0                   	// #0
 510:	mov	w1, #0x12b                 	// #299
 514:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 518:	ldr	x0, [x20, x1]
 51c:	dmb	ish
 520:	cbz	x0, 64c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x64c>
 524:	ldrb	w0, [x0, x3]
 528:	cbz	w0, 64c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x64c>
 52c:	ldr	x21, [x20, x1]
 530:	dmb	ish
 534:	cbz	x21, 140 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x140>
 538:	ldrb	w0, [x21, x3]
 53c:	cmp	w0, #0x35
 540:	and	x1, x0, #0xff
 544:	b.eq	618 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x618>  // b.none
 548:	ubfiz	x0, x0, #4, #8
 54c:	cmp	x0, x23
 550:	csel	x21, x0, x23, ls  // ls = plast
 554:	cmp	x1, #0x10
 558:	b.ls	140 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x140>  // b.plast
 55c:	sub	x1, x1, #0x10
 560:	mov	x0, #0x100                 	// #256
 564:	and	x21, x1, #0x3
 568:	lsr	x1, x1, #2
 56c:	lsl	x1, x0, x1
 570:	lsr	x0, x1, #2
 574:	madd	x0, x0, x21, x1
 578:	cmp	x0, x23
 57c:	csel	x21, x0, x23, ls  // ls = plast
 580:	b	140 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x140>
 584:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 588:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 58c:	add	x2, x2, #0x0
 590:	add	x0, x0, #0x0
 594:	mov	w1, #0xc1                  	// #193
 598:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 59c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5a0:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5a4:	add	x2, x2, #0x0
 5a8:	add	x0, x0, #0x0
 5ac:	mov	w1, #0xc2                  	// #194
 5b0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5b4:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5b8:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5bc:	mov	x4, x19
 5c0:	add	x2, x2, #0x0
 5c4:	add	x0, x0, #0x0
 5c8:	mov	w1, #0xc3                  	// #195
 5cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5d0:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5d4:	add	x0, x0, #0x0
 5d8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 5dc:	bl	0 <_ZN11__sanitizer3DieEv>
 5e0:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5e4:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 5e8:	mov	x4, x19
 5ec:	add	x2, x2, #0x0
 5f0:	add	x0, x0, #0x0
 5f4:	mov	w1, #0x88                  	// #136
 5f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5fc:	mov	x3, x0
 600:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 604:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 608:	add	x2, x2, #0x0
 60c:	add	x0, x0, #0x0
 610:	mov	w1, #0x89                  	// #137
 614:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 618:	cmp	x23, #0x200
 61c:	mov	x0, #0x200                 	// #512
 620:	csel	x21, x23, x0, ls  // ls = plast
 624:	b	140 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x140>
 628:	str	x25, [sp, #48]
 62c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 630:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 634:	add	x2, x2, #0x0
 638:	add	x0, x0, #0x0
 63c:	mov	x4, #0x0                   	// #0
 640:	mov	x3, #0x0                   	// #0
 644:	mov	w1, #0xae                  	// #174
 648:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 64c:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 650:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 654:	add	x2, x2, #0x0
 658:	add	x0, x0, #0x0
 65c:	mov	x4, #0x0                   	// #0
 660:	mov	x3, #0x0                   	// #0
 664:	mov	w1, #0xcc                  	// #204
 668:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 66c:	str	x25, [sp, #48]
 670:	adrp	x2, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 674:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 678:	mov	x3, x21
 67c:	add	x2, x2, #0x0
 680:	add	x0, x0, #0x0
 684:	mov	x4, #0x36                  	// #54
 688:	mov	w1, #0xaf                  	// #175
 68c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 690:	mov	x0, x22
 694:	mov	x2, x20
 698:	mov	x3, x21
 69c:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 6a0:	ldr	x0, [x22, x24]
 6a4:	b	4a0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x4a0>
 6a8:	mov	x2, #0x1                   	// #1
 6ac:	mov	x11, x2
 6b0:	mov	x12, #0x7c                  	// #124
 6b4:	mov	x10, #0x14                  	// #20
 6b8:	mov	x9, #0x100                 	// #256
 6bc:	mov	w8, #0x4000                	// #16384
 6c0:	mov	x7, #0x3e                  	// #62
 6c4:	nop
 6c8:	add	x5, x22, x2, lsl #10
 6cc:	lsl	x6, x2, #4
 6d0:	mov	x4, x5
 6d4:	mov	x0, #0x14                  	// #20
 6d8:	mov	x3, x2
 6dc:	add	x2, x2, #0x1
 6e0:	stp	x12, x6, [x5, #8]
 6e4:	cmp	x2, #0x36
 6e8:	str	x0, [x4, #24]
 6ec:	b.eq	75c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x75c>  // b.none
 6f0:	cmp	x2, #0x35
 6f4:	b.eq	764 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x764>  // b.none
 6f8:	cmp	x2, #0x10
 6fc:	b.ls	6c8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x6c8>  // b.plast
 700:	sub	x0, x3, #0xf
 704:	add	x4, x4, #0x400
 708:	and	x6, x0, #0x3
 70c:	mov	x3, x2
 710:	lsr	x0, x0, #2
 714:	add	x2, x2, #0x1
 718:	lsl	x0, x9, x0
 71c:	lsr	x5, x0, #2
 720:	madd	x5, x5, x6, x0
 724:	str	x5, [x4, #16]
 728:	udiv	w0, w8, w5
 72c:	cmp	x0, #0x0
 730:	csel	x0, x0, x11, ne  // ne = any
 734:	cmp	x0, #0x3e
 738:	csel	x0, x0, x7, ls  // ls = plast
 73c:	add	x6, x0, #0x2
 740:	lsl	x0, x0, #1
 744:	str	x0, [x4, #8]
 748:	cmp	x5, x6, lsl #3
 74c:	csel	x0, x10, xzr, cc  // cc = lo, ul, last
 750:	str	x0, [x4, #24]
 754:	cmp	x2, #0x36
 758:	b.ne	6f0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x6f0>  // b.any
 75c:	ldr	x2, [x1, #8]
 760:	b	494 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x494>
 764:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 768:	ldr	q0, [x0]
 76c:	mov	x0, #0xd400                	// #54272
 770:	add	x2, x22, x0
 774:	add	x0, x22, #0x8, lsl #12
 778:	stur	q0, [x2, #8]
 77c:	str	xzr, [x0, #21528]
 780:	ldr	x2, [x1, #8]
 784:	b	494 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x494>
 788:	mov	x0, x22
 78c:	mov	x2, x20
 790:	mov	x3, x21
 794:	bl	0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 798:	ldr	x0, [x22, x23]
 79c:	b	338 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x338>
 7a0:	mov	x2, #0x1                   	// #1
 7a4:	mov	x11, x2
 7a8:	mov	x12, #0x7c                  	// #124
 7ac:	mov	x10, #0x14                  	// #20
 7b0:	mov	x9, #0x100                 	// #256
 7b4:	mov	w8, #0x4000                	// #16384
 7b8:	mov	x7, #0x3e                  	// #62
 7bc:	nop
 7c0:	add	x5, x22, x2, lsl #10
 7c4:	lsl	x6, x2, #4
 7c8:	mov	x4, x5
 7cc:	mov	x0, #0x14                  	// #20
 7d0:	mov	x3, x2
 7d4:	add	x2, x2, #0x1
 7d8:	stp	x12, x6, [x5, #8]
 7dc:	cmp	x2, #0x36
 7e0:	str	x0, [x4, #24]
 7e4:	b.eq	854 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x854>  // b.none
 7e8:	cmp	x2, #0x35
 7ec:	b.eq	85c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x85c>  // b.none
 7f0:	cmp	x2, #0x10
 7f4:	b.ls	7c0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x7c0>  // b.plast
 7f8:	sub	x0, x3, #0xf
 7fc:	add	x4, x4, #0x400
 800:	and	x6, x0, #0x3
 804:	mov	x3, x2
 808:	lsr	x0, x0, #2
 80c:	add	x2, x2, #0x1
 810:	lsl	x0, x9, x0
 814:	lsr	x5, x0, #2
 818:	madd	x5, x5, x6, x0
 81c:	str	x5, [x4, #16]
 820:	udiv	w0, w8, w5
 824:	cmp	x0, #0x0
 828:	csel	x0, x0, x11, ne  // ne = any
 82c:	cmp	x0, #0x3e
 830:	csel	x0, x0, x7, ls  // ls = plast
 834:	add	x6, x0, #0x2
 838:	lsl	x0, x0, #1
 83c:	str	x0, [x4, #8]
 840:	cmp	x5, x6, lsl #3
 844:	csel	x0, x10, xzr, cc  // cc = lo, ul, last
 848:	str	x0, [x4, #24]
 84c:	cmp	x2, #0x36
 850:	b.ne	7e8 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x7e8>  // b.any
 854:	ldr	x2, [x1, #8]
 858:	b	32c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x32c>
 85c:	adrp	x0, 0 <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm>
 860:	mov	x2, #0xd400                	// #54272
 864:	add	x2, x22, x2
 868:	ldr	q0, [x0]
 86c:	add	x0, x22, #0x8, lsl #12
 870:	stur	q0, [x2, #8]
 874:	str	xzr, [x0, #21528]
 878:	ldr	x2, [x1, #8]
 87c:	b	32c <_ZN11__sanitizer17CombinedAllocatorINS_20SizeClassAllocator32INS_4AP32EEENS_28SizeClassAllocatorLocalCacheIS3_EENS_18LargeMmapAllocatorINS_20NoOpMapUnmapCallbackENS_32LargeMmapAllocatorPtrArrayStaticEEEE10ReallocateEPS5_Pvmm+0x32c>

sanitizer_allocator_checks.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer16SetErrnoToENOMEMEv>:
   0:	str	x30, [sp, #-16]!
   4:	bl	0 <__errno_location>
   8:	mov	w1, #0xc                   	// #12
   c:	ldr	x30, [sp], #16
  10:	str	w1, [x0]
  14:	ret

sanitizer_allocator_report.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	mov	x20, x0
   8:	add	x19, sp, #0x20
   c:	stp	x21, x30, [sp, #16]
  10:	mov	x0, x19
  14:	mov	x21, x1
  18:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  1c:	add	x1, x1, #0x0
  20:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  24:	adrp	x4, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  28:	mov	x3, x21
  2c:	mov	x2, x20
  30:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  34:	ldr	x1, [x4]
  38:	add	x0, x0, #0x0
  3c:	ldr	x1, [x1]
  40:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  44:	mov	x0, x19
  48:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  4c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000050 <_ZN11__sanitizer21ReportPvallocOverflowEmPKNS_10StackTraceE>:
  50:	stp	x19, x20, [sp, #-80]!
  54:	adrp	x19, 0 <_ZN11__sanitizer14PageSizeCachedE>
  58:	mov	x2, x1
  5c:	stp	x21, x22, [sp, #16]
  60:	add	x21, sp, #0x30
  64:	mov	x20, x0
  68:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  6c:	mov	x0, x21
  70:	add	x1, x1, #0x0
  74:	str	x30, [sp, #32]
  78:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  7c:	ldr	x19, [x19]
  80:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  84:	ldr	x0, [x0]
  88:	ldr	x3, [x19]
  8c:	ldr	x22, [x0]
  90:	cbz	x3, b4 <_ZN11__sanitizer21ReportPvallocOverflowEmPKNS_10StackTraceE+0x64>
  94:	mov	x2, x20
  98:	mov	x1, x22
  9c:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  a0:	add	x0, x0, #0x0
  a4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  a8:	mov	x0, x21
  ac:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  b0:	bl	0 <_ZN11__sanitizer3DieEv>
  b4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  b8:	mov	x3, x0
  bc:	str	x0, [x19]
  c0:	b	94 <_ZN11__sanitizer21ReportPvallocOverflowEmPKNS_10StackTraceE+0x44>
  c4:	nop

00000000000000c8 <_ZN11__sanitizer32ReportInvalidAllocationAlignmentEmPKNS_10StackTraceE>:
  c8:	stp	x19, x20, [sp, #-64]!
  cc:	mov	x2, x1
  d0:	mov	x20, x0
  d4:	add	x19, sp, #0x20
  d8:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  dc:	mov	x0, x19
  e0:	add	x1, x1, #0x0
  e4:	str	x30, [sp, #16]
  e8:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  ec:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  f0:	mov	x2, x20
  f4:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
  f8:	add	x0, x0, #0x0
  fc:	ldr	x1, [x1]
 100:	ldr	x1, [x1]
 104:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 108:	mov	x0, x19
 10c:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 110:	bl	0 <_ZN11__sanitizer3DieEv>
 114:	nop

0000000000000118 <_ZN11__sanitizer34ReportInvalidAlignedAllocAlignmentEmmPKNS_10StackTraceE>:
 118:	stp	x19, x20, [sp, #-80]!
 11c:	mov	x20, x1
 120:	add	x19, sp, #0x30
 124:	stp	x21, x30, [sp, #16]
 128:	mov	x21, x0
 12c:	mov	x0, x19
 130:	str	x1, [sp, #40]
 134:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 138:	add	x1, x1, #0x0
 13c:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 140:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 144:	mov	x3, x21
 148:	mov	x2, x20
 14c:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 150:	ldr	x1, [x1]
 154:	add	x0, x0, #0x0
 158:	ldr	x1, [x1]
 15c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 160:	mov	x0, x19
 164:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 168:	bl	0 <_ZN11__sanitizer3DieEv>
 16c:	nop

0000000000000170 <_ZN11__sanitizer35ReportInvalidPosixMemalignAlignmentEmPKNS_10StackTraceE>:
 170:	stp	x19, x20, [sp, #-64]!
 174:	mov	x2, x1
 178:	mov	x20, x0
 17c:	add	x19, sp, #0x20
 180:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 184:	mov	x0, x19
 188:	add	x1, x1, #0x0
 18c:	str	x30, [sp, #16]
 190:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 194:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 198:	mov	x2, x20
 19c:	mov	x3, #0x8                   	// #8
 1a0:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1a4:	ldr	x1, [x1]
 1a8:	add	x0, x0, #0x0
 1ac:	ldr	x1, [x1]
 1b0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1b4:	mov	x0, x19
 1b8:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1bc:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000001c0 <_ZN11__sanitizer26ReportAllocationSizeTooBigEmmPKNS_10StackTraceE>:
 1c0:	stp	x19, x20, [sp, #-80]!
 1c4:	mov	x20, x0
 1c8:	add	x19, sp, #0x30
 1cc:	stp	x21, x30, [sp, #16]
 1d0:	mov	x0, x19
 1d4:	mov	x21, x1
 1d8:	str	x1, [sp, #40]
 1dc:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1e0:	add	x1, x1, #0x0
 1e4:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1e8:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 1ec:	mov	x3, x21
 1f0:	mov	x2, x20
 1f4:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 1f8:	ldr	x1, [x1]
 1fc:	add	x0, x0, #0x0
 200:	ldr	x1, [x1]
 204:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 208:	mov	x0, x19
 20c:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 210:	bl	0 <_ZN11__sanitizer3DieEv>
 214:	nop

0000000000000218 <_ZN11__sanitizer17ReportOutOfMemoryEmPKNS_10StackTraceE>:
 218:	stp	x19, x20, [sp, #-64]!
 21c:	mov	x2, x1
 220:	mov	x20, x0
 224:	add	x19, sp, #0x20
 228:	adrp	x1, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 22c:	mov	x0, x19
 230:	add	x1, x1, #0x0
 234:	str	x30, [sp, #16]
 238:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 23c:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 240:	mov	x2, x20
 244:	adrp	x0, 0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 248:	add	x0, x0, #0x0
 24c:	ldr	x1, [x1]
 250:	ldr	x1, [x1]
 254:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 258:	mov	x0, x19
 25c:	bl	0 <_ZN11__sanitizer20ReportCallocOverflowEmmPKNS_10StackTraceE>
 260:	bl	0 <_ZN11__sanitizer3DieEv>

Disassembly of section .text._ZN11__sanitizer26ScopedAllocatorErrorReportC2EPKcPKNS_10StackTraceE:

0000000000000000 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x0
   8:	mov	x20, x2
   c:	stp	x21, x30, [sp, #16]
  10:	mov	x21, x1
  14:	bl	0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>
  18:	stp	x21, x20, [x19, #8]
  1c:	bl	0 <_ZN11__sanitizer15ColorizeReportsEv>
  20:	strb	w0, [x19, #24]
  24:	ldp	x21, x30, [sp, #16]
  28:	tst	w0, #0xff
  2c:	ldp	x19, x20, [sp], #32
  30:	adrp	x2, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>
  34:	adrp	x1, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>
  38:	add	x2, x2, #0x0
  3c:	add	x1, x1, #0x0
  40:	adrp	x0, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportC1EPKcPKNS_10StackTraceE>
  44:	csel	x1, x1, x2, ne  // ne = any
  48:	add	x0, x0, #0x0
  4c:	b	0 <_ZN11__sanitizer6PrintfEPKcz>

Disassembly of section .text._ZN11__sanitizer26ScopedAllocatorErrorReportD2Ev:

0000000000000000 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x19, x0
   8:	adrp	x2, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>
   c:	add	x2, x2, #0x0
  10:	adrp	x1, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>
  14:	ldrb	w3, [x19, #24]
  18:	add	x1, x1, #0x0
  1c:	adrp	x0, 0 <_ZN11__sanitizer26ScopedAllocatorErrorReportD1Ev>
  20:	add	x0, x0, #0x0
  24:	cmp	w3, #0x0
  28:	csel	x1, x1, x2, ne  // ne = any
  2c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  30:	ldr	x0, [x19, #16]
  34:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  38:	bl	0 <_ZN11__sanitizer34PrintHintAllocatorCannotReturnNullEv>
  3c:	ldp	x0, x1, [x19, #8]
  40:	mov	x2, #0x0                   	// #0
  44:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>
  48:	mov	x0, x19
  4c:	ldp	x19, x30, [sp], #16
  50:	b	0 <_ZN11__sanitizer21ScopedErrorReportLockD1Ev>

sanitizer_common.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>:
   0:	str	x30, [sp, #-16]!
   4:	tst	w4, #0xff
   8:	b.ne	1c <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib+0x1c>  // b.any
   c:	adrp	x8, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  10:	mov	x7, x0
  14:	ldr	w0, [x8]
  18:	cbz	w0, 2c <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib+0x2c>
  1c:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  20:	add	x0, x0, #0x0
  24:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  28:	bl	0 <_ZN11__sanitizer3DieEv>
  2c:	adrp	x4, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  30:	mov	x5, x1
  34:	mov	w6, w3
  38:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  3c:	ldr	x1, [x4]
  40:	mov	x3, x7
  44:	mov	x4, x7
  48:	add	x0, x0, #0x0
  4c:	mov	w7, #0x1                   	// #1
  50:	str	w7, [x8]
  54:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  58:	bl	0 <_ZN11__sanitizer14DumpProcessMapEv>
  5c:	adrp	x2, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  60:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
  64:	add	x2, x2, #0x0
  68:	add	x0, x0, #0x0
  6c:	mov	x4, #0x0                   	// #0
  70:	mov	x3, #0x0                   	// #0
  74:	mov	w1, #0x35                  	// #53
  78:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  7c:	nop

0000000000000080 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>:
  80:	stp	x19, x20, [sp, #-32]!
  84:	str	x30, [sp, #24]
  88:	cbz	x0, f8 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x78>
  8c:	mov	x19, x0
  90:	mov	x20, x1
  94:	cbz	x1, c4 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x44>
  98:	str	x21, [sp, #16]
  9c:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
  a0:	mov	x21, x0
  a4:	cbz	x0, b4 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x34>
  a8:	mov	x0, x20
  ac:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  b0:	add	x19, x21, x0
  b4:	ldrb	w0, [x19]
  b8:	cmp	w0, #0x2e
  bc:	b.eq	d4 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x54>  // b.none
  c0:	ldr	x21, [sp, #16]
  c4:	mov	x0, x19
  c8:	ldr	x30, [sp, #24]
  cc:	ldp	x19, x20, [sp], #32
  d0:	ret
  d4:	ldrb	w1, [x19, #1]
  d8:	add	x0, x19, #0x2
  dc:	ldr	x21, [sp, #16]
  e0:	cmp	w1, #0x2f
  e4:	csel	x19, x0, x19, eq  // eq = none
  e8:	mov	x0, x19
  ec:	ldr	x30, [sp, #24]
  f0:	ldp	x19, x20, [sp], #32
  f4:	ret
  f8:	mov	x19, #0x0                   	// #0
  fc:	b	c4 <_ZN11__sanitizer15StripPathPrefixEPKcS1_+0x44>

0000000000000100 <_ZN11__sanitizer15StripModuleNameEPKc>:
 100:	stp	x19, x30, [sp, #-16]!
 104:	mov	x19, x0
 108:	cbz	x0, 11c <_ZN11__sanitizer15StripModuleNameEPKc+0x1c>
 10c:	mov	w1, #0x2f                  	// #47
 110:	bl	0 <_ZN11__sanitizer16internal_strrchrEPKci>
 114:	cmp	x0, #0x0
 118:	csinc	x19, x19, x0, eq  // eq = none
 11c:	mov	x0, x19
 120:	ldp	x19, x30, [sp], #16
 124:	ret

0000000000000128 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc>:
 128:	cbz	x0, 1b4 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x8c>
 12c:	stp	x19, x30, [sp, #-16]!
 130:	mov	x19, x0
 134:	ldrb	w1, [x0]
 138:	cbz	w1, 1a8 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x80>
 13c:	nop
 140:	cmp	w1, #0x1b
 144:	b.eq	18c <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x64>  // b.none
 148:	cmp	x0, x19
 14c:	b.eq	154 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x2c>  // b.none
 150:	strb	w1, [x19]
 154:	add	x19, x19, #0x1
 158:	ldrb	w1, [x0, #1]
 15c:	add	x0, x0, #0x1
 160:	cbz	w1, 1a8 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x80>
 164:	cmp	x0, x19
 168:	b.cs	140 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x18>  // b.hs, b.nlast
 16c:	mov	x3, x0
 170:	adrp	x2, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 174:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 178:	mov	x4, x19
 17c:	add	x2, x2, #0x0
 180:	add	x0, x0, #0x0
 184:	mov	w1, #0x68                  	// #104
 188:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 18c:	ldrb	w2, [x0, #1]
 190:	cmp	w2, #0x5b
 194:	b.ne	148 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x20>  // b.any
 198:	mov	w1, #0x6d                  	// #109
 19c:	bl	0 <_ZN11__sanitizer18internal_strchrnulEPKci>
 1a0:	ldrb	w1, [x0]
 1a4:	cbnz	w1, 158 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc+0x30>
 1a8:	strb	wzr, [x19]
 1ac:	ldp	x19, x30, [sp], #16
 1b0:	ret
 1b4:	ret

00000000000001b8 <_ZN11__sanitizer12LoadedModule5clearEv>:
 1b8:	stp	x19, x20, [sp, #-32]!
 1bc:	mov	x19, x0
 1c0:	mov	x1, #0x0                   	// #0
 1c4:	ldr	x0, [x0]
 1c8:	str	x30, [sp, #16]
 1cc:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 1d0:	str	xzr, [x19]
 1d4:	stp	xzr, xzr, [x19, #8]
 1d8:	mov	x2, #0x10                  	// #16
 1dc:	add	x0, x19, #0x1c
 1e0:	str	wzr, [x19, #24]
 1e4:	mov	w1, #0x0                   	// #0
 1e8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 1ec:	strb	wzr, [x19, #44]
 1f0:	ldr	x2, [x19, #48]
 1f4:	cbz	x2, 228 <_ZN11__sanitizer12LoadedModule5clearEv+0x70>
 1f8:	add	x20, x19, #0x30
 1fc:	nop
 200:	ldr	x0, [x19, #56]
 204:	sub	x4, x2, #0x1
 208:	mov	x1, #0x0                   	// #0
 20c:	ldr	x3, [x0]
 210:	str	x3, [x20, #8]
 214:	cbz	x3, 234 <_ZN11__sanitizer12LoadedModule5clearEv+0x7c>
 218:	str	x4, [x20]
 21c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 220:	ldr	x2, [x19, #48]
 224:	cbnz	x2, 200 <_ZN11__sanitizer12LoadedModule5clearEv+0x48>
 228:	ldr	x30, [sp, #16]
 22c:	ldp	x19, x20, [sp], #32
 230:	ret
 234:	str	x4, [x20]
 238:	str	xzr, [x20, #16]
 23c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 240:	ldr	x2, [x19, #48]
 244:	cbnz	x2, 200 <_ZN11__sanitizer12LoadedModule5clearEv+0x48>
 248:	ldr	x30, [sp, #16]
 24c:	ldp	x19, x20, [sp], #32
 250:	ret
 254:	nop

0000000000000258 <_ZN11__sanitizer12LoadedModule3setEPKcm>:
 258:	stp	x19, x20, [sp, #-32]!
 25c:	mov	x19, x0
 260:	mov	x20, x2
 264:	stp	x21, x30, [sp, #16]
 268:	mov	x21, x1
 26c:	bl	1b8 <_ZN11__sanitizer12LoadedModule5clearEv>
 270:	mov	x0, x21
 274:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 278:	ldp	x21, x30, [sp, #16]
 27c:	stp	x0, x20, [x19]
 280:	ldp	x19, x20, [sp], #32
 284:	ret

0000000000000288 <_ZN11__sanitizer12LoadedModule3setEPKcmNS_10ModuleArchEPhb>:
 288:	stp	x19, x20, [sp, #-64]!
 28c:	mov	x19, x0
 290:	mov	w20, w3
 294:	stp	x21, x22, [sp, #16]
 298:	mov	x21, x4
 29c:	mov	x22, x2
 2a0:	stp	x23, x24, [sp, #32]
 2a4:	and	w24, w5, #0xff
 2a8:	mov	x23, x1
 2ac:	str	x30, [sp, #48]
 2b0:	bl	1b8 <_ZN11__sanitizer12LoadedModule5clearEv>
 2b4:	mov	x0, x23
 2b8:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 2bc:	stp	x0, x22, [x19]
 2c0:	mov	x1, x21
 2c4:	add	x0, x19, #0x1c
 2c8:	str	w20, [x19, #24]
 2cc:	mov	x2, #0x10                  	// #16
 2d0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2d4:	strb	w24, [x19, #44]
 2d8:	ldp	x21, x22, [sp, #16]
 2dc:	ldp	x23, x24, [sp, #32]
 2e0:	ldr	x30, [sp, #48]
 2e4:	ldp	x19, x20, [sp], #64
 2e8:	ret
 2ec:	nop

00000000000002f0 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc>:
 2f0:	stp	x19, x20, [sp, #-64]!
 2f4:	mov	x20, x0
 2f8:	mov	x0, #0x30                  	// #48
 2fc:	stp	x21, x22, [sp, #16]
 300:	mov	x21, x5
 304:	mov	x22, x2
 308:	mov	x2, #0x0                   	// #0
 30c:	stp	x23, x24, [sp, #32]
 310:	and	w24, w3, #0xff
 314:	mov	x23, x1
 318:	mov	x1, #0x0                   	// #0
 31c:	stp	x25, x30, [sp, #48]
 320:	and	w25, w4, #0xff
 324:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 328:	mov	x19, x0
 32c:	cmp	x21, #0x0
 330:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 334:	add	x1, x1, #0x0
 338:	add	x0, x0, #0x1a
 33c:	csel	x1, x1, x21, eq  // eq = none
 340:	stp	xzr, x23, [x19]
 344:	mov	x2, #0x10                  	// #16
 348:	str	x22, [x19, #16]
 34c:	strb	w24, [x19, #24]
 350:	strb	w25, [x19, #25]
 354:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 358:	ldr	x0, [x20, #48]
 35c:	cbnz	x0, 39c <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0xac>
 360:	dup	v0.2d, x19
 364:	str	xzr, [x19]
 368:	mov	x0, #0x1                   	// #1
 36c:	str	x0, [x20, #48]
 370:	stur	q0, [x20, #56]
 374:	cbz	w24, 388 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0x98>
 378:	ldr	x0, [x20, #16]
 37c:	cmp	x0, x22
 380:	b.cs	388 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0x98>  // b.hs, b.nlast
 384:	str	x22, [x20, #16]
 388:	ldp	x21, x22, [sp, #16]
 38c:	ldp	x23, x24, [sp, #32]
 390:	ldp	x25, x30, [sp, #48]
 394:	ldp	x19, x20, [sp], #64
 398:	ret
 39c:	str	xzr, [x19]
 3a0:	add	x0, x0, #0x1
 3a4:	ldr	x2, [x20, #64]
 3a8:	str	x19, [x2]
 3ac:	str	x0, [x20, #48]
 3b0:	str	x19, [x20, #64]
 3b4:	b	374 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc+0x84>

00000000000003b8 <_ZNK11__sanitizer12LoadedModule15containsAddressEm>:
 3b8:	ldr	x0, [x0, #56]
 3bc:	cbz	x0, 3ec <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x34>
 3c0:	ldr	x2, [x0, #8]
 3c4:	cmp	x2, x1
 3c8:	b.hi	3d8 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x20>  // b.pmore
 3cc:	ldr	x2, [x0, #16]
 3d0:	cmp	x2, x1
 3d4:	b.hi	3e4 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x2c>  // b.pmore
 3d8:	ldr	x0, [x0]
 3dc:	cbnz	x0, 3c0 <_ZNK11__sanitizer12LoadedModule15containsAddressEm+0x8>
 3e0:	ret
 3e4:	mov	w0, #0x1                   	// #1
 3e8:	ret
 3ec:	mov	w0, #0x0                   	// #0
 3f0:	ret
 3f4:	nop

00000000000003f8 <_ZN11__sanitizer17IncreaseTotalMmapEm>:
 3f8:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 3fc:	ldr	x1, [x1]
 400:	ldr	x2, [x1, #128]
 404:	cbnz	x2, 40c <_ZN11__sanitizer17IncreaseTotalMmapEm+0x14>
 408:	ret
 40c:	adrp	x2, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 410:	add	x2, x2, #0x0
 414:	add	x2, x2, #0x8
 418:	ldxr	x3, [x2]
 41c:	add	x4, x3, x0
 420:	stlxr	w5, x4, [x2]
 424:	cbnz	w5, 418 <_ZN11__sanitizer17IncreaseTotalMmapEm+0x20>
 428:	dmb	ish
 42c:	ldr	x1, [x1, #128]
 430:	add	x0, x3, x0
 434:	cmp	x1, x0, lsr #20
 438:	b.hi	408 <_ZN11__sanitizer17IncreaseTotalMmapEm+0x10>  // b.pmore
 43c:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 440:	add	x0, x0, #0x0
 444:	str	x30, [sp, #-16]!
 448:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 44c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000450 <_ZN11__sanitizer17DecreaseTotalMmapEm>:
 450:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 454:	ldr	x1, [x1]
 458:	ldr	x1, [x1, #128]
 45c:	cbnz	x1, 464 <_ZN11__sanitizer17DecreaseTotalMmapEm+0x14>
 460:	ret
 464:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 468:	add	x1, x1, #0x0
 46c:	neg	x0, x0
 470:	add	x1, x1, #0x8
 474:	ldxr	x2, [x1]
 478:	add	x2, x2, x0
 47c:	stlxr	w3, x2, [x1]
 480:	cbnz	w3, 474 <_ZN11__sanitizer17DecreaseTotalMmapEm+0x24>
 484:	dmb	ish
 488:	ret
 48c:	nop

0000000000000490 <_ZN11__sanitizer13TemplateMatchEPKcS1_>:
 490:	cbz	x1, 624 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x194>
 494:	stp	x19, x20, [sp, #-80]!
 498:	mov	x19, x0
 49c:	stp	x21, x22, [sp, #16]
 4a0:	mov	x21, x1
 4a4:	str	x30, [sp, #64]
 4a8:	ldrb	w0, [x1]
 4ac:	cbz	w0, 5a4 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x114>
 4b0:	cbz	x19, 588 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xf8>
 4b4:	stp	x23, x24, [sp, #32]
 4b8:	mov	w23, #0x0                   	// #0
 4bc:	stp	x25, x26, [sp, #48]
 4c0:	ldrb	w1, [x19]
 4c4:	cmp	w1, #0x5e
 4c8:	b.ne	4d8 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x48>  // b.any
 4cc:	ldrb	w1, [x19, #1]
 4d0:	add	x19, x19, #0x1
 4d4:	mov	w23, #0x1                   	// #1
 4d8:	mov	w2, #0x0                   	// #0
 4dc:	mov	w25, #0x2a                  	// #42
 4e0:	mov	w24, #0x24                  	// #36
 4e4:	cbz	w1, 580 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xf0>
 4e8:	cmp	w1, #0x2a
 4ec:	b.eq	614 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x184>  // b.none
 4f0:	ldrb	w0, [x21]
 4f4:	cmp	w1, #0x24
 4f8:	b.eq	62c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x19c>  // b.none
 4fc:	cbz	w0, 59c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x10c>
 500:	mov	w1, #0x2a                  	// #42
 504:	mov	x0, x19
 508:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 50c:	mov	x22, x0
 510:	mov	w1, #0x24                  	// #36
 514:	mov	x0, x19
 518:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 51c:	mov	x26, x0
 520:	cbz	x22, 5ec <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x15c>
 524:	cmp	x0, #0x0
 528:	ccmp	x22, x0, #0x0, ne  // ne = any
 52c:	b.ls	5b8 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x128>  // b.plast
 530:	strb	wzr, [x26]
 534:	mov	x1, x19
 538:	mov	x0, x21
 53c:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
 540:	mov	x20, x0
 544:	mov	x0, x19
 548:	mov	x19, x26
 54c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 550:	add	x0, x20, x0
 554:	mov	w1, #0x24                  	// #36
 558:	strb	w1, [x19]
 55c:	cbz	x20, 59c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x10c>
 560:	cmp	x21, x20
 564:	csel	w2, w23, wzr, ne  // ne = any
 568:	cbnz	w2, 59c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x10c>
 56c:	cbz	x19, 580 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xf0>
 570:	ldrb	w1, [x19]
 574:	mov	x21, x0
 578:	mov	w23, #0x0                   	// #0
 57c:	cbnz	w1, 4e8 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x58>
 580:	ldp	x23, x24, [sp, #32]
 584:	ldp	x25, x26, [sp, #48]
 588:	mov	w0, #0x1                   	// #1
 58c:	ldp	x21, x22, [sp, #16]
 590:	ldr	x30, [sp, #64]
 594:	ldp	x19, x20, [sp], #80
 598:	ret
 59c:	ldp	x23, x24, [sp, #32]
 5a0:	ldp	x25, x26, [sp, #48]
 5a4:	mov	w0, #0x0                   	// #0
 5a8:	ldp	x21, x22, [sp, #16]
 5ac:	ldr	x30, [sp, #64]
 5b0:	ldp	x19, x20, [sp], #80
 5b4:	ret
 5b8:	strb	wzr, [x22]
 5bc:	mov	x1, x19
 5c0:	mov	x0, x21
 5c4:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
 5c8:	mov	x20, x0
 5cc:	mov	x0, x19
 5d0:	mov	x19, x22
 5d4:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 5d8:	add	x0, x20, x0
 5dc:	cmp	x22, x26
 5e0:	csel	w1, w24, w25, eq  // eq = none
 5e4:	strb	w1, [x19]
 5e8:	b	55c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xcc>
 5ec:	cbnz	x0, 530 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xa0>
 5f0:	mov	x1, x19
 5f4:	mov	x0, x21
 5f8:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
 5fc:	mov	x20, x0
 600:	mov	x0, x19
 604:	mov	x19, #0x0                   	// #0
 608:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 60c:	add	x0, x20, x0
 610:	b	55c <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xcc>
 614:	add	x19, x19, #0x1
 618:	mov	x0, x21
 61c:	mov	w2, #0x1                   	// #1
 620:	b	570 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0xe0>
 624:	mov	w0, #0x0                   	// #0
 628:	ret
 62c:	cmp	w0, #0x0
 630:	csinc	w0, w2, wzr, ne  // ne = any
 634:	ldp	x23, x24, [sp, #32]
 638:	ldp	x25, x26, [sp, #48]
 63c:	b	5a8 <_ZN11__sanitizer13TemplateMatchEPKcS1_+0x118>

0000000000000640 <_ZN11__sanitizer14GetProcessNameEv>:
 640:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 644:	add	x0, x0, #0x0
 648:	ret
 64c:	nop

0000000000000650 <_ZN11__sanitizer17UpdateProcessNameEv>:
 650:	stp	x19, x20, [sp, #-32]!
 654:	adrp	x19, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 658:	add	x19, x19, #0x0
 65c:	mov	x1, #0x1000                	// #4096
 660:	mov	x0, x19
 664:	str	x30, [sp, #24]
 668:	bl	0 <_ZN11__sanitizer19ReadLongProcessNameEPcm>
 66c:	mov	x0, x19
 670:	mov	w1, #0x2f                  	// #47
 674:	bl	0 <_ZN11__sanitizer16internal_strrchrEPKci>
 678:	cbz	x0, 6bc <_ZN11__sanitizer17UpdateProcessNameEv+0x6c>
 67c:	add	x20, x0, #0x1
 680:	str	x21, [sp, #16]
 684:	mov	x0, x20
 688:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 68c:	cmp	x20, x19
 690:	mov	x21, x0
 694:	b.eq	6ac <_ZN11__sanitizer17UpdateProcessNameEv+0x5c>  // b.none
 698:	mov	x2, x0
 69c:	mov	x1, x20
 6a0:	mov	x0, x19
 6a4:	bl	0 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 6a8:	strb	wzr, [x21, x19]
 6ac:	ldr	x21, [sp, #16]
 6b0:	ldr	x30, [sp, #24]
 6b4:	ldp	x19, x20, [sp], #32
 6b8:	ret
 6bc:	mov	x0, x19
 6c0:	ldr	x30, [sp, #24]
 6c4:	ldp	x19, x20, [sp], #32
 6c8:	b	0 <_ZN11__sanitizer15internal_strlenEPKc>
 6cc:	nop

00000000000006d0 <_ZN11__sanitizer15CacheBinaryNameEv>:
 6d0:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 6d4:	add	x0, x1, #0x0
 6d8:	ldrb	w1, [x1]
 6dc:	cbz	w1, 6e4 <_ZN11__sanitizer15CacheBinaryNameEv+0x14>
 6e0:	ret
 6e4:	stp	x19, x20, [sp, #-32]!
 6e8:	mov	x1, #0x1000                	// #4096
 6ec:	adrp	x19, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 6f0:	add	x19, x19, #0x0
 6f4:	str	x30, [sp, #24]
 6f8:	bl	0 <_ZN11__sanitizer14ReadBinaryNameEPcm>
 6fc:	mov	x1, #0x1000                	// #4096
 700:	mov	x0, x19
 704:	bl	0 <_ZN11__sanitizer19ReadLongProcessNameEPcm>
 708:	mov	x0, x19
 70c:	mov	w1, #0x2f                  	// #47
 710:	bl	0 <_ZN11__sanitizer16internal_strrchrEPKci>
 714:	cbz	x0, 758 <_ZN11__sanitizer15CacheBinaryNameEv+0x88>
 718:	add	x20, x0, #0x1
 71c:	str	x21, [sp, #16]
 720:	mov	x0, x20
 724:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 728:	cmp	x20, x19
 72c:	mov	x21, x0
 730:	b.eq	748 <_ZN11__sanitizer15CacheBinaryNameEv+0x78>  // b.none
 734:	mov	x2, x0
 738:	mov	x1, x20
 73c:	mov	x0, x19
 740:	bl	0 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 744:	strb	wzr, [x21, x19]
 748:	ldr	x21, [sp, #16]
 74c:	ldr	x30, [sp, #24]
 750:	ldp	x19, x20, [sp], #32
 754:	ret
 758:	mov	x0, x19
 75c:	ldr	x30, [sp, #24]
 760:	ldp	x19, x20, [sp], #32
 764:	b	0 <_ZN11__sanitizer15internal_strlenEPKc>

0000000000000768 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm>:
 768:	stp	x19, x20, [sp, #-64]!
 76c:	adrp	x20, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 770:	mov	x19, x1
 774:	ldrb	w2, [x20]
 778:	stp	x21, x22, [sp, #16]
 77c:	mov	x21, x0
 780:	str	x30, [sp, #48]
 784:	cbz	w2, 7d0 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm+0x68>
 788:	add	x20, x20, #0x0
 78c:	mov	x0, x20
 790:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 794:	mov	x2, x0
 798:	cbz	x19, 7bc <_ZN11__sanitizer20ReadBinaryNameCachedEPcm+0x54>
 79c:	sub	x19, x19, #0x1
 7a0:	mov	x1, x20
 7a4:	cmp	x19, x0
 7a8:	mov	x0, x21
 7ac:	csel	x19, x19, x2, ls  // ls = plast
 7b0:	mov	x2, x19
 7b4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 7b8:	strb	wzr, [x21, x19]
 7bc:	mov	x0, x19
 7c0:	ldp	x21, x22, [sp, #16]
 7c4:	ldr	x30, [sp, #48]
 7c8:	ldp	x19, x20, [sp], #64
 7cc:	ret
 7d0:	mov	x1, #0x1000                	// #4096
 7d4:	add	x0, x20, #0x0
 7d8:	adrp	x22, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 7dc:	bl	0 <_ZN11__sanitizer14ReadBinaryNameEPcm>
 7e0:	add	x22, x22, #0x0
 7e4:	mov	x1, #0x1000                	// #4096
 7e8:	mov	x0, x22
 7ec:	bl	0 <_ZN11__sanitizer19ReadLongProcessNameEPcm>
 7f0:	mov	x0, x22
 7f4:	mov	w1, #0x2f                  	// #47
 7f8:	bl	0 <_ZN11__sanitizer16internal_strrchrEPKci>
 7fc:	cbz	x0, 838 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm+0xd0>
 800:	stp	x23, x24, [sp, #32]
 804:	add	x23, x0, #0x1
 808:	mov	x0, x23
 80c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 810:	mov	x24, x0
 814:	cmp	x23, x22
 818:	b.eq	844 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm+0xdc>  // b.none
 81c:	mov	x1, x23
 820:	mov	x2, x0
 824:	mov	x0, x22
 828:	bl	0 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
 82c:	strb	wzr, [x24, x22]
 830:	ldp	x23, x24, [sp, #32]
 834:	b	788 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm+0x20>
 838:	mov	x0, x22
 83c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 840:	b	788 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm+0x20>
 844:	ldp	x23, x24, [sp, #32]
 848:	b	788 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm+0x20>
 84c:	nop

0000000000000850 <_ZN11__sanitizer12PrintCmdlineEv>:
 850:	stp	x19, x20, [sp, #-32]!
 854:	str	x30, [sp, #16]
 858:	bl	0 <_ZN11__sanitizer7GetArgvEv>
 85c:	cbz	x0, 8ac <_ZN11__sanitizer12PrintCmdlineEv+0x5c>
 860:	mov	x19, x0
 864:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 868:	add	x0, x0, #0x0
 86c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 870:	ldr	x1, [x19]
 874:	cbz	x1, 898 <_ZN11__sanitizer12PrintCmdlineEv+0x48>
 878:	adrp	x20, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 87c:	add	x19, x19, #0x8
 880:	add	x20, x20, #0x0
 884:	nop
 888:	mov	x0, x20
 88c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 890:	ldr	x1, [x19], #8
 894:	cbnz	x1, 888 <_ZN11__sanitizer12PrintCmdlineEv+0x38>
 898:	ldr	x30, [sp, #16]
 89c:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 8a0:	ldp	x19, x20, [sp], #32
 8a4:	add	x0, x0, #0x0
 8a8:	b	0 <_ZN11__sanitizer6PrintfEPKcz>
 8ac:	ldr	x30, [sp, #16]
 8b0:	ldp	x19, x20, [sp], #32
 8b4:	ret

00000000000008b8 <_ZN11__sanitizer14RunMallocHooksEPKvm>:
 8b8:	stp	x19, x20, [sp, #-48]!
 8bc:	adrp	x20, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 8c0:	add	x20, x20, #0x0
 8c4:	add	x19, x20, #0x10
 8c8:	add	x20, x20, #0x60
 8cc:	stp	x21, x22, [sp, #16]
 8d0:	mov	x22, x0
 8d4:	mov	x21, x1
 8d8:	str	x30, [sp, #32]
 8dc:	ldr	x2, [x19]
 8e0:	mov	x1, x21
 8e4:	mov	x0, x22
 8e8:	add	x19, x19, #0x10
 8ec:	cbz	x2, 8fc <_ZN11__sanitizer14RunMallocHooksEPKvm+0x44>
 8f0:	blr	x2
 8f4:	cmp	x19, x20
 8f8:	b.ne	8dc <_ZN11__sanitizer14RunMallocHooksEPKvm+0x24>  // b.any
 8fc:	ldp	x21, x22, [sp, #16]
 900:	ldr	x30, [sp, #32]
 904:	ldp	x19, x20, [sp], #48
 908:	ret
 90c:	nop

0000000000000910 <_ZN11__sanitizer12RunFreeHooksEPKv>:
 910:	stp	x19, x20, [sp, #-32]!
 914:	adrp	x20, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 918:	add	x20, x20, #0x0
 91c:	add	x20, x20, #0x10
 920:	stp	x21, x30, [sp, #16]
 924:	mov	x21, x0
 928:	mov	x19, #0x0                   	// #0
 92c:	add	x1, x20, x19
 930:	mov	x0, x21
 934:	add	x19, x19, #0x10
 938:	ldr	x1, [x1, #8]
 93c:	cbz	x1, 94c <_ZN11__sanitizer12RunFreeHooksEPKv+0x3c>
 940:	blr	x1
 944:	cmp	x19, #0x50
 948:	b.ne	92c <_ZN11__sanitizer12RunFreeHooksEPKv+0x1c>  // b.any
 94c:	ldp	x21, x30, [sp, #16]
 950:	ldp	x19, x20, [sp], #32
 954:	ret

0000000000000958 <__sanitizer_report_error_summary>:
 958:	mov	x1, x0
 95c:	adrp	x2, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 960:	add	x0, x2, #0x0
 964:	b	0 <_ZN11__sanitizer6PrintfEPKcz>

0000000000000968 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>:
 968:	adrp	x4, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 96c:	ldr	x4, [x4]
 970:	ldrb	w2, [x4, #60]
 974:	cbnz	w2, 97c <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x14>
 978:	ret
 97c:	stp	x19, x20, [sp, #-96]!
 980:	mov	x20, x1
 984:	stp	x23, x24, [sp, #32]
 988:	adrp	x23, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 98c:	add	x19, x23, #0x0
 990:	stp	x21, x22, [sp, #16]
 994:	mov	x21, x0
 998:	ldr	x2, [x19, #96]
 99c:	str	x30, [sp, #48]
 9a0:	str	xzr, [sp, #64]
 9a4:	stp	xzr, xzr, [sp, #72]
 9a8:	cbz	x2, a78 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x110>
 9ac:	sub	x0, x2, #0x1
 9b0:	tst	x0, x2
 9b4:	b.ne	ae0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x178>  // b.any
 9b8:	add	x22, x2, #0x3ff
 9bc:	neg	x2, x2
 9c0:	and	x22, x22, x2
 9c4:	adrp	x24, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 9c8:	mov	w2, #0x0                   	// #0
 9cc:	add	x1, x24, #0x0
 9d0:	mov	x0, x22
 9d4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 9d8:	ldr	x1, [sp, #64]
 9dc:	mov	x19, x0
 9e0:	ldr	x2, [sp, #80]
 9e4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 9e8:	ldp	x0, x1, [sp, #64]
 9ec:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 9f0:	stp	x19, x22, [sp, #64]
 9f4:	ldr	x2, [sp, #80]
 9f8:	cmp	x2, #0x3ff
 9fc:	b.hi	a20 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0xb8>  // b.pmore
 a00:	cmp	x22, #0x3ff
 a04:	b.ls	a88 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x120>  // b.plast
 a08:	mov	x3, #0x400                 	// #1024
 a0c:	add	x0, x19, x2
 a10:	mov	w1, #0x0                   	// #0
 a14:	sub	x2, x3, x2
 a18:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 a1c:	ldr	x19, [sp, #64]
 a20:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 a24:	adrp	x2, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 a28:	cmp	x20, #0x0
 a2c:	ldr	q0, [x0]
 a30:	mov	x3, x21
 a34:	add	x0, sp, #0x40
 a38:	adrp	x1, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 a3c:	add	x1, x1, #0x0
 a40:	str	q0, [sp, #80]
 a44:	strb	wzr, [x19]
 a48:	ldr	x2, [x2]
 a4c:	csel	x2, x2, x20, eq  // eq = none
 a50:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 a54:	ldr	x0, [sp, #64]
 a58:	bl	958 <__sanitizer_report_error_summary>
 a5c:	ldp	x0, x1, [sp, #64]
 a60:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a64:	ldp	x21, x22, [sp, #16]
 a68:	ldp	x23, x24, [sp, #32]
 a6c:	ldr	x30, [sp, #48]
 a70:	ldp	x19, x20, [sp], #96
 a74:	ret
 a78:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 a7c:	mov	x2, x0
 a80:	str	x0, [x19, #96]
 a84:	b	9ac <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x44>
 a88:	add	x23, x23, #0x0
 a8c:	ldr	x0, [x23, #96]
 a90:	cbz	x0, af0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x188>
 a94:	sub	x1, x0, #0x1
 a98:	tst	x1, x0
 a9c:	b.ne	ae0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x178>  // b.any
 aa0:	add	x22, x0, #0x3ff
 aa4:	neg	x0, x0
 aa8:	and	x22, x22, x0
 aac:	add	x1, x24, #0x0
 ab0:	mov	w2, #0x0                   	// #0
 ab4:	mov	x0, x22
 ab8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 abc:	mov	x19, x0
 ac0:	ldr	x1, [sp, #64]
 ac4:	ldr	x2, [sp, #80]
 ac8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 acc:	ldp	x0, x1, [sp, #64]
 ad0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 ad4:	stp	x19, x22, [sp, #64]
 ad8:	ldr	x2, [sp, #80]
 adc:	b	a08 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0xa0>
 ae0:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 ae4:	add	x0, x0, #0x0
 ae8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 aec:	bl	0 <_ZN11__sanitizer3DieEv>
 af0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 af4:	str	x0, [x23, #96]
 af8:	b	a94 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_+0x12c>
 afc:	nop

0000000000000b00 <__sanitizer_acquire_crash_state>:
 b00:	adrp	x0, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 b04:	add	x0, x0, #0x0
 b08:	add	x0, x0, #0x68
 b0c:	mov	w2, #0x1                   	// #1
 b10:	ldxrb	w1, [x0]
 b14:	stxrb	w3, w2, [x0]
 b18:	cbnz	w3, b10 <__sanitizer_acquire_crash_state+0x10>
 b1c:	tst	w1, #0xff
 b20:	dmb	ish
 b24:	cset	w0, eq  // eq = none
 b28:	ret
 b2c:	nop

0000000000000b30 <__sanitizer_install_malloc_and_free_hooks>:
 b30:	cmp	x0, #0x0
 b34:	mov	x2, x0
 b38:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 b3c:	mov	w0, #0x0                   	// #0
 b40:	b.eq	b7c <__sanitizer_install_malloc_and_free_hooks+0x4c>  // b.none
 b44:	adrp	x3, 0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
 b48:	add	x4, x3, #0x0
 b4c:	add	x0, x4, #0x10
 b50:	ldr	x4, [x4, #16]
 b54:	cbz	x4, ba4 <__sanitizer_install_malloc_and_free_hooks+0x74>
 b58:	ldr	x4, [x0, #16]
 b5c:	cbz	x4, bb0 <__sanitizer_install_malloc_and_free_hooks+0x80>
 b60:	ldr	x4, [x0, #32]
 b64:	cbz	x4, bbc <__sanitizer_install_malloc_and_free_hooks+0x8c>
 b68:	ldr	x4, [x0, #48]
 b6c:	cbz	x4, bc8 <__sanitizer_install_malloc_and_free_hooks+0x98>
 b70:	ldr	x4, [x0, #64]
 b74:	mov	w0, #0x0                   	// #0
 b78:	cbz	x4, b80 <__sanitizer_install_malloc_and_free_hooks+0x50>
 b7c:	ret
 b80:	mov	w4, #0x4                   	// #4
 b84:	mov	w0, #0x5                   	// #5
 b88:	add	x3, x3, #0x0
 b8c:	sbfiz	x4, x4, #4, #32
 b90:	add	x3, x3, #0x10
 b94:	add	x5, x3, x4
 b98:	str	x2, [x3, x4]
 b9c:	str	x1, [x5, #8]
 ba0:	ret
 ba4:	mov	w4, #0x0                   	// #0
 ba8:	mov	w0, #0x1                   	// #1
 bac:	b	b88 <__sanitizer_install_malloc_and_free_hooks+0x58>
 bb0:	mov	w4, #0x1                   	// #1
 bb4:	mov	w0, #0x2                   	// #2
 bb8:	b	b88 <__sanitizer_install_malloc_and_free_hooks+0x58>
 bbc:	mov	w4, #0x2                   	// #2
 bc0:	mov	w0, #0x3                   	// #3
 bc4:	b	b88 <__sanitizer_install_malloc_and_free_hooks+0x58>
 bc8:	mov	w4, #0x3                   	// #3
 bcc:	mov	w0, #0x4                   	// #4
 bd0:	b	b88 <__sanitizer_install_malloc_and_free_hooks+0x58>

sanitizer_common_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>:
   0:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
   4:	ldr	x3, [x1]
   8:	cbnz	x3, 14 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE+0x14>
   c:	str	x0, [x1]
  10:	ret
  14:	str	x30, [sp, #-16]!
  18:	adrp	x2, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  1c:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  20:	add	x2, x2, #0x0
  24:	add	x0, x0, #0x0
  28:	mov	x4, #0x0                   	// #0
  2c:	mov	w1, #0x16                  	// #22
  30:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  34:	nop

0000000000000038 <_ZN11__sanitizer18StackDepotGetStatsEv>:
  38:	mov	x0, #0x0                   	// #0
  3c:	ret

0000000000000040 <_ZN11__sanitizer16BackgroundThreadEPv>:
  40:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  44:	stp	x19, x20, [sp, #-128]!
  48:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  4c:	ldr	x0, [x0]
  50:	stp	x21, x22, [sp, #16]
  54:	add	x1, x1, #0x0
  58:	str	x1, [sp, #120]
  5c:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
  60:	ldp	x21, x19, [x0, #136]
  64:	stp	x23, x24, [sp, #32]
  68:	mov	x22, #0x0                   	// #0
  6c:	stp	x27, x28, [sp, #64]
  70:	mov	x27, #0xcccccccccccccccc    	// #-3689348814741910324
  74:	mov	w23, #0x0                   	// #0
  78:	stp	d8, d9, [sp, #96]
  7c:	mov	x20, #0x0                   	// #0
  80:	cmp	x21, #0x0
  84:	cset	w24, ne  // ne = any
  88:	ldr	d9, [x1]
  8c:	fmov	d8, xzr
  90:	movk	x27, #0xcccd
  94:	stp	x25, x26, [sp, #48]
  98:	adrp	x25, 0 <_ZN11__sanitizer17current_verbosityE>
  9c:	ldrb	w26, [x0, #152]
  a0:	str	x30, [sp, #80]
  a4:	nop
  a8:	mov	w0, #0x64                  	// #100
  ac:	bl	0 <_ZN11__sanitizer14SleepForMillisEi>
  b0:	bl	0 <_ZN11__sanitizer6GetRSSEv>
  b4:	lsr	x28, x0, #20
  b8:	ldr	x1, [x25]
  bc:	ldr	w0, [x1]
  c0:	cbz	w0, 104 <_ZN11__sanitizer16BackgroundThreadEPv+0xc4>
  c4:	add	x0, x20, x20, lsl #1
  c8:	lsl	x0, x0, #2
  cc:	sub	x0, x0, x20
  d0:	umulh	x0, x0, x27
  d4:	cmp	x28, x0, lsr #3
  d8:	b.hi	18c <_ZN11__sanitizer16BackgroundThreadEPv+0x14c>  // b.pmore
  dc:	bl	38 <_ZN11__sanitizer18StackDepotGetStatsEv>
  e0:	mov	x5, x0
  e4:	cbz	x0, 104 <_ZN11__sanitizer16BackgroundThreadEPv+0xc4>
  e8:	add	x1, x22, x22, lsl #1
  ec:	ldr	x3, [x0, #8]
  f0:	lsl	x1, x1, #2
  f4:	sub	x1, x1, x22
  f8:	umulh	x1, x1, x27
  fc:	cmp	x3, x1, lsr #3
 100:	b.hi	1ec <_ZN11__sanitizer16BackgroundThreadEPv+0x1ac>  // b.pmore
 104:	cmp	w24, #0x0
 108:	ccmp	x21, x28, #0x2, ne  // ne = any
 10c:	b.cc	220 <_ZN11__sanitizer16BackgroundThreadEPv+0x1e0>  // b.lo, b.ul, b.last
 110:	cbz	x19, 150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>
 114:	cmp	x19, x28
 118:	eor	w0, w23, #0x1
 11c:	cset	w1, cc  // cc = lo, ul, last
 120:	ands	w1, w1, w0
 124:	b.ne	1b0 <_ZN11__sanitizer16BackgroundThreadEPv+0x170>  // b.any
 128:	cmp	w23, #0x0
 12c:	ccmp	x19, x28, #0x0, ne  // ne = any
 130:	b.cc	150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>  // b.lo, b.ul, b.last
 134:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 138:	mov	w23, #0x0                   	// #0
 13c:	ldr	x1, [x0]
 140:	cbz	x1, 150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>
 144:	mov	w0, #0x0                   	// #0
 148:	blr	x1
 14c:	nop
 150:	cbz	w26, a8 <_ZN11__sanitizer16BackgroundThreadEPv+0x68>
 154:	scvtf	d0, d8
 158:	scvtf	d1, x28
 15c:	fmul	d0, d0, d9
 160:	fcmpe	d1, d0
 164:	b.le	a8 <_ZN11__sanitizer16BackgroundThreadEPv+0x68>
 168:	mov	x1, x28
 16c:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 170:	add	x0, x0, #0x0
 174:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 178:	fmov	d8, x28
 17c:	mov	x1, #0x14                  	// #20
 180:	mov	x0, #0x5a                  	// #90
 184:	bl	0 <__sanitizer_print_memory_profile>
 188:	b	a8 <_ZN11__sanitizer16BackgroundThreadEPv+0x68>
 18c:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 190:	mov	x20, x28
 194:	mov	x2, x28
 198:	ldr	x1, [x0]
 19c:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 1a0:	add	x0, x0, #0x0
 1a4:	ldr	x1, [x1]
 1a8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 1ac:	b	dc <_ZN11__sanitizer16BackgroundThreadEPv+0x9c>
 1b0:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 1b4:	mov	w23, w1
 1b8:	mov	x3, x28
 1bc:	mov	x2, x19
 1c0:	ldr	x5, [x0]
 1c4:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 1c8:	add	x0, x0, #0x0
 1cc:	ldr	x1, [x5]
 1d0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1d4:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 1d8:	ldr	x1, [x0]
 1dc:	cbz	x1, 150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>
 1e0:	mov	w0, #0x1                   	// #1
 1e4:	blr	x1
 1e8:	b	150 <_ZN11__sanitizer16BackgroundThreadEPv+0x110>
 1ec:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 1f0:	lsr	x3, x3, #20
 1f4:	ldr	x2, [x5]
 1f8:	str	x5, [sp, #112]
 1fc:	ldr	x1, [x0]
 200:	ldr	x0, [sp, #120]
 204:	ldr	x1, [x1]
 208:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 20c:	ldr	x5, [sp, #112]
 210:	cmp	w24, #0x0
 214:	ccmp	x21, x28, #0x2, ne  // ne = any
 218:	ldr	x22, [x5, #8]
 21c:	b.cs	110 <_ZN11__sanitizer16BackgroundThreadEPv+0xd0>  // b.hs, b.nlast
 220:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 224:	mov	x3, x28
 228:	mov	x2, x21
 22c:	ldr	x1, [x0]
 230:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 234:	add	x0, x0, #0x0
 238:	ldr	x1, [x1]
 23c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 240:	bl	0 <_ZN11__sanitizer14DumpProcessMapEv>
 244:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000248 <_ZN11__sanitizer13WriteToSyslogEPKc>:
 248:	stp	x19, x20, [sp, #-96]!
 24c:	stp	x23, x24, [sp, #32]
 250:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
 254:	ldr	x19, [x23]
 258:	stp	x21, x22, [sp, #16]
 25c:	mov	x21, x0
 260:	str	xzr, [sp, #64]
 264:	ldr	x1, [x19]
 268:	str	x30, [sp, #48]
 26c:	stp	xzr, xzr, [sp, #72]
 270:	cbz	x1, 388 <_ZN11__sanitizer13WriteToSyslogEPKc+0x140>
 274:	sub	x0, x1, #0x1
 278:	tst	x0, x1
 27c:	b.ne	3f4 <_ZN11__sanitizer13WriteToSyslogEPKc+0x1ac>  // b.any
 280:	neg	x19, x1
 284:	mov	x22, #0xffff                	// #65535
 288:	add	x1, x1, x22
 28c:	mov	w2, #0x0                   	// #0
 290:	and	x19, x1, x19
 294:	adrp	x24, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 298:	mov	x0, x19
 29c:	add	x1, x24, #0x0
 2a0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 2a4:	mov	x20, x0
 2a8:	ldr	x1, [sp, #64]
 2ac:	ldr	x2, [sp, #80]
 2b0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2b4:	ldp	x0, x1, [sp, #64]
 2b8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 2bc:	stp	x20, x19, [sp, #64]
 2c0:	ldr	x2, [sp, #80]
 2c4:	cmp	x2, x22
 2c8:	b.ls	340 <_ZN11__sanitizer13WriteToSyslogEPKc+0xf8>  // b.plast
 2cc:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 2d0:	mov	x2, x21
 2d4:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 2d8:	add	x1, x1, #0x0
 2dc:	ldr	q0, [x0]
 2e0:	add	x0, sp, #0x40
 2e4:	str	q0, [sp, #80]
 2e8:	strb	wzr, [x20]
 2ec:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 2f0:	ldr	x19, [sp, #64]
 2f4:	b	308 <_ZN11__sanitizer13WriteToSyslogEPKc+0xc0>
 2f8:	strb	wzr, [x0]
 2fc:	mov	x0, x19
 300:	add	x19, x1, #0x1
 304:	bl	0 <_ZN11__sanitizer20WriteOneLineToSyslogEPKc>
 308:	mov	w1, #0xa                   	// #10
 30c:	mov	x0, x19
 310:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 314:	mov	x1, x0
 318:	cbnz	x0, 2f8 <_ZN11__sanitizer13WriteToSyslogEPKc+0xb0>
 31c:	ldrb	w0, [x19]
 320:	cbnz	w0, 364 <_ZN11__sanitizer13WriteToSyslogEPKc+0x11c>
 324:	ldp	x0, x1, [sp, #64]
 328:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 32c:	ldp	x21, x22, [sp, #16]
 330:	ldp	x23, x24, [sp, #32]
 334:	ldr	x30, [sp, #48]
 338:	ldp	x19, x20, [sp], #96
 33c:	ret
 340:	cmp	x19, x22
 344:	b.ls	398 <_ZN11__sanitizer13WriteToSyslogEPKc+0x150>  // b.plast
 348:	mov	x3, #0x10000               	// #65536
 34c:	add	x0, x20, x2
 350:	mov	w1, #0x0                   	// #0
 354:	sub	x2, x3, x2
 358:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 35c:	ldr	x20, [sp, #64]
 360:	b	2cc <_ZN11__sanitizer13WriteToSyslogEPKc+0x84>
 364:	mov	x0, x19
 368:	bl	0 <_ZN11__sanitizer20WriteOneLineToSyslogEPKc>
 36c:	ldp	x0, x1, [sp, #64]
 370:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 374:	ldp	x21, x22, [sp, #16]
 378:	ldp	x23, x24, [sp, #32]
 37c:	ldr	x30, [sp, #48]
 380:	ldp	x19, x20, [sp], #96
 384:	ret
 388:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 38c:	mov	x1, x0
 390:	str	x0, [x19]
 394:	b	274 <_ZN11__sanitizer13WriteToSyslogEPKc+0x2c>
 398:	ldr	x23, [x23]
 39c:	ldr	x0, [x23]
 3a0:	cbz	x0, 404 <_ZN11__sanitizer13WriteToSyslogEPKc+0x1bc>
 3a4:	sub	x1, x0, #0x1
 3a8:	tst	x1, x0
 3ac:	b.ne	3f4 <_ZN11__sanitizer13WriteToSyslogEPKc+0x1ac>  // b.any
 3b0:	mov	x1, #0xffff                	// #65535
 3b4:	add	x19, x0, x1
 3b8:	neg	x0, x0
 3bc:	add	x1, x24, #0x0
 3c0:	and	x19, x19, x0
 3c4:	mov	w2, #0x0                   	// #0
 3c8:	mov	x0, x19
 3cc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3d0:	ldr	x1, [sp, #64]
 3d4:	mov	x20, x0
 3d8:	ldr	x2, [sp, #80]
 3dc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3e0:	ldp	x0, x1, [sp, #64]
 3e4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3e8:	stp	x20, x19, [sp, #64]
 3ec:	ldr	x2, [sp, #80]
 3f0:	b	348 <_ZN11__sanitizer13WriteToSyslogEPKc+0x100>
 3f4:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 3f8:	add	x0, x0, #0x0
 3fc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 400:	bl	0 <_ZN11__sanitizer3DieEv>
 404:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 408:	str	x0, [x23]
 40c:	b	3a4 <_ZN11__sanitizer13WriteToSyslogEPKc+0x15c>

0000000000000410 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv>:
 410:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 414:	ldr	x0, [x0]
 418:	ldp	x1, x2, [x0, #136]
 41c:	orr	x1, x1, x2
 420:	cbnz	x1, 42c <_ZN11__sanitizer25MaybeStartBackgroudThreadEv+0x1c>
 424:	ldrb	w0, [x0, #152]
 428:	cbz	w0, 448 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv+0x38>
 42c:	adrp	x0, 0 <_ZN11__sanitizer19real_pthread_createEPvS0_PFS0_S0_ES0_>
 430:	ldr	x0, [x0]
 434:	cbz	x0, 448 <_ZN11__sanitizer25MaybeStartBackgroudThreadEv+0x38>
 438:	adrp	x0, 40 <_ZN11__sanitizer16BackgroundThreadEPv>
 43c:	mov	x1, #0x0                   	// #0
 440:	add	x0, x0, #0x0
 444:	b	0 <_ZN11__sanitizer21internal_start_threadEPFvPvES0_>
 448:	ret
 44c:	nop

0000000000000450 <_ZN11__sanitizer21SetSandboxingCallbackEPFvvE>:
 450:	adrp	x1, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 454:	str	x0, [x1]
 458:	ret
 45c:	nop

0000000000000460 <__sanitizer_sandbox_on_notify>:
 460:	str	x30, [sp, #-16]!
 464:	bl	0 <_ZN11__sanitizer28PlatformPrepareForSandboxingEP29__sanitizer_sandbox_arguments>
 468:	adrp	x0, 0 <_ZN11__sanitizer31SetSoftRssLimitExceededCallbackEPFvbE>
 46c:	ldr	x0, [x0]
 470:	cbz	x0, 480 <__sanitizer_sandbox_on_notify+0x20>
 474:	ldr	x30, [sp], #16
 478:	mov	x16, x0
 47c:	br	x16
 480:	ldr	x30, [sp], #16
 484:	ret

sanitizer_coverage_libcdep_new.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>:
   0:	stp	x19, x20, [sp, #-64]!
   4:	mov	x20, x0
   8:	mov	x0, x1
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x22, x2
  14:	mov	x21, x3
  18:	stp	x23, x30, [sp, #32]
  1c:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
  20:	cbz	x0, f4 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm+0xf4>
  24:	mov	x19, x0
  28:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  2c:	ldr	x0, [x0]
  30:	ldr	x23, [x0, #168]
  34:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
  38:	mov	x4, x19
  3c:	mov	x5, x0
  40:	mov	x3, x23
  44:	adrp	x6, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  48:	add	x6, x6, #0x0
  4c:	mov	x1, #0x1000                	// #4096
  50:	mov	x0, x20
  54:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  58:	add	x2, x2, #0x0
  5c:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
  60:	add	x2, sp, #0x3c
  64:	mov	x0, x20
  68:	mov	w1, #0x1                   	// #1
  6c:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
  70:	mov	w19, w0
  74:	cmn	w0, #0x1
  78:	b.eq	dc <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm+0xdc>  // b.none
  7c:	mov	w0, w19
  80:	mov	x4, #0x0                   	// #0
  84:	mov	x3, #0x0                   	// #0
  88:	mov	x2, #0x8                   	// #8
  8c:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  90:	add	x1, x1, #0x0
  94:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
  98:	mov	x1, x22
  9c:	lsl	x2, x21, #3
  a0:	mov	x4, #0x0                   	// #0
  a4:	mov	x3, #0x0                   	// #0
  a8:	mov	w0, w19
  ac:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
  b0:	mov	w0, w19
  b4:	bl	0 <_ZN11__sanitizer9CloseFileEi>
  b8:	mov	x2, x21
  bc:	mov	x1, x20
  c0:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  c4:	add	x0, x0, #0x0
  c8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  cc:	ldp	x21, x22, [sp, #16]
  d0:	ldp	x23, x30, [sp, #32]
  d4:	ldp	x19, x20, [sp], #64
  d8:	ret
  dc:	ldr	w2, [sp, #60]
  e0:	mov	x1, x20
  e4:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  f0:	b	7c <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm+0x7c>
  f4:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  f8:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
  fc:	add	x2, x2, #0x0
 100:	add	x0, x0, #0x0
 104:	mov	x4, #0x0                   	// #0
 108:	mov	x3, #0x0                   	// #0
 10c:	mov	w1, #0x28                  	// #40
 110:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 114:	nop

0000000000000118 <_ZN11__sanitizer18InitializeCoverageEbPKc>:
 118:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 11c:	ldrb	w2, [x1]
 120:	cbz	w2, 128 <_ZN11__sanitizer18InitializeCoverageEbPKc+0x10>
 124:	ret
 128:	stp	x19, x30, [sp, #-16]!
 12c:	adrp	x19, 6c0 <__sanitizer_cov_dump>
 130:	and	w0, w0, #0xff
 134:	ldr	x19, [x19]
 138:	strb	w0, [x1]
 13c:	mov	x0, x19
 140:	bl	0 <_ZN11__sanitizer6AtexitEPFvvE>
 144:	mov	x0, x19
 148:	ldp	x19, x30, [sp], #16
 14c:	b	0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>

0000000000000150 <__sanitizer_cov_trace_pc_guard>:
 150:	ldr	w3, [x0]
 154:	cbnz	w3, 15c <__sanitizer_cov_trace_pc_guard+0xc>
 158:	ret
 15c:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 160:	add	x0, x0, #0x0
 164:	add	x0, x0, #0x8
 168:	str	x30, [sp, #-16]!
 16c:	sub	w3, w3, #0x1
 170:	ldr	x4, [x0, #24]
 174:	ldr	x0, [x0, #8]
 178:	cmp	x3, x4
 17c:	b.cs	198 <__sanitizer_cov_trace_pc_guard+0x48>  // b.hs, b.nlast
 180:	ldr	x1, [x0, x3, lsl #3]
 184:	cbnz	x1, 190 <__sanitizer_cov_trace_pc_guard+0x40>
 188:	sub	x30, x30, #0x1
 18c:	str	x30, [x0, x3, lsl #3]
 190:	ldr	x30, [sp], #16
 194:	ret
 198:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 19c:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 1a0:	add	x2, x2, #0x0
 1a4:	add	x0, x0, #0x0
 1a8:	mov	w1, #0x1b6                 	// #438
 1ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000001b0 <__sanitizer_cov_trace_pc_guard_init>:
 1b0:	cmp	x0, x1
 1b4:	b.eq	310 <__sanitizer_cov_trace_pc_guard_init+0x160>  // b.none
 1b8:	stp	x19, x20, [sp, #-48]!
 1bc:	mov	x19, x0
 1c0:	ldr	w0, [x0]
 1c4:	str	x30, [sp, #40]
 1c8:	cbz	w0, 1d8 <__sanitizer_cov_trace_pc_guard_init+0x28>
 1cc:	ldr	x30, [sp, #40]
 1d0:	ldp	x19, x20, [sp], #48
 1d4:	ret
 1d8:	stp	x21, x22, [sp, #16]
 1dc:	adrp	x22, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 1e0:	add	x0, x22, #0x0
 1e4:	mov	x20, x1
 1e8:	add	x21, x0, #0x8
 1ec:	ldrb	w1, [x0, #8]
 1f0:	cbz	w1, 314 <__sanitizer_cov_trace_pc_guard_init+0x164>
 1f4:	cmp	x19, x20
 1f8:	mov	x1, x19
 1fc:	b.eq	3c4 <__sanitizer_cov_trace_pc_guard_init+0x214>  // b.none
 200:	add	x0, x22, #0x0
 204:	ldr	x0, [x0, #32]
 208:	mov	w21, w0
 20c:	b.cs	2c0 <__sanitizer_cov_trace_pc_guard_init+0x110>  // b.hs, b.nlast
 210:	sub	x3, x20, #0x1
 214:	sub	x3, x3, x19
 218:	cmp	x3, #0xf
 21c:	lsr	x3, x3, #2
 220:	add	x4, x3, #0x1
 224:	b.ls	3e8 <__sanitizer_cov_trace_pc_guard_init+0x238>  // b.plast
 228:	adrp	x5, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 22c:	dup	v1.4s, w0
 230:	movi	v3.4s, #0x4
 234:	lsr	x2, x4, #2
 238:	ldr	q0, [x5]
 23c:	add	x2, x19, x2, lsl #4
 240:	movi	v2.4s, #0x1
 244:	add	v1.4s, v1.4s, v0.4s
 248:	mov	v0.16b, v1.16b
 24c:	add	v1.4s, v1.4s, v3.4s
 250:	add	v0.4s, v0.4s, v2.4s
 254:	str	q0, [x1], #16
 258:	cmp	x1, x2
 25c:	b.ne	248 <__sanitizer_cov_trace_pc_guard_init+0x98>  // b.any
 260:	and	x2, x4, #0xfffffffffffffffc
 264:	cmp	x4, x2
 268:	add	w1, w21, w2
 26c:	add	x19, x19, x2, lsl #2
 270:	b.eq	2b8 <__sanitizer_cov_trace_pc_guard_init+0x108>  // b.none
 274:	mov	x2, x19
 278:	add	w4, w1, #0x1
 27c:	str	w4, [x2], #4
 280:	cmp	x20, x2
 284:	b.ls	2b8 <__sanitizer_cov_trace_pc_guard_init+0x108>  // b.plast
 288:	add	w2, w1, #0x2
 28c:	str	w2, [x19, #4]
 290:	add	x2, x19, #0x8
 294:	cmp	x20, x2
 298:	b.ls	2b8 <__sanitizer_cov_trace_pc_guard_init+0x108>  // b.plast
 29c:	add	w2, w1, #0x3
 2a0:	str	w2, [x19, #8]
 2a4:	add	x2, x19, #0xc
 2a8:	cmp	x20, x2
 2ac:	b.ls	2b8 <__sanitizer_cov_trace_pc_guard_init+0x108>  // b.plast
 2b0:	add	w1, w1, #0x4
 2b4:	str	w1, [x19, #12]
 2b8:	add	w19, w21, #0x1
 2bc:	add	w21, w19, w3
 2c0:	cmp	x0, w21, uxtw
 2c4:	mov	w20, w21
 2c8:	b.cs	2f8 <__sanitizer_cov_trace_pc_guard_init+0x148>  // b.hs, b.nlast
 2cc:	add	x1, x22, #0x0
 2d0:	add	x1, x1, #0x8
 2d4:	ldr	x2, [x1, #16]
 2d8:	cmp	x20, x2, lsr #3
 2dc:	b.hi	354 <__sanitizer_cov_trace_pc_guard_init+0x1a4>  // b.pmore
 2e0:	ldr	x21, [x1, #8]
 2e4:	sub	x2, x20, x0
 2e8:	mov	w1, #0x0                   	// #0
 2ec:	add	x0, x21, x0, lsl #3
 2f0:	lsl	x2, x2, #3
 2f4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 2f8:	add	x0, x22, #0x0
 2fc:	ldp	x21, x22, [sp, #16]
 300:	str	x20, [x0, #32]
 304:	ldr	x30, [sp, #40]
 308:	ldp	x19, x20, [sp], #48
 30c:	ret
 310:	ret
 314:	mov	w1, #0x1                   	// #1
 318:	strb	w1, [x0, #8]
 31c:	bl	0 <_ZN8__sancov21InitializeSancovFlagsEv>
 320:	ldr	w0, [x19]
 324:	str	xzr, [x21, #8]
 328:	stp	xzr, xzr, [x21, #16]
 32c:	cbz	w0, 1f4 <__sanitizer_cov_trace_pc_guard_init+0x44>
 330:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 334:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 338:	add	x2, x2, #0x0
 33c:	add	x0, x0, #0x0
 340:	mov	x4, #0x0                   	// #0
 344:	mov	x3, #0x0                   	// #0
 348:	mov	w1, #0x77                  	// #119
 34c:	str	x23, [sp, #32]
 350:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 354:	adrp	x19, 0 <_ZN11__sanitizer14PageSizeCachedE>
 358:	ldr	x19, [x19]
 35c:	ldr	x0, [x19]
 360:	str	x23, [sp, #32]
 364:	cbz	x0, 3f0 <__sanitizer_cov_trace_pc_guard_init+0x240>
 368:	sub	x19, x0, #0x1
 36c:	tst	x19, x0
 370:	b.ne	3fc <__sanitizer_cov_trace_pc_guard_init+0x24c>  // b.any
 374:	add	x23, x22, #0x0
 378:	add	x19, x19, w21, uxtw #3
 37c:	neg	x0, x0
 380:	mov	w2, #0x0                   	// #0
 384:	and	x19, x19, x0
 388:	adrp	x1, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 38c:	mov	x0, x19
 390:	add	x1, x1, #0x0
 394:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 398:	mov	x21, x0
 39c:	ldr	x1, [x23, #16]
 3a0:	ldr	x2, [x23, #32]
 3a4:	lsl	x2, x2, #3
 3a8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3ac:	ldp	x0, x1, [x23, #16]
 3b0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3b4:	stp	x21, x19, [x23, #16]
 3b8:	ldr	x0, [x23, #32]
 3bc:	ldr	x23, [sp, #32]
 3c0:	b	2e4 <__sanitizer_cov_trace_pc_guard_init+0x134>
 3c4:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 3c8:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 3cc:	add	x2, x2, #0x0
 3d0:	add	x0, x0, #0x0
 3d4:	mov	x4, x19
 3d8:	mov	x3, x19
 3dc:	mov	w1, #0x78                  	// #120
 3e0:	str	x23, [sp, #32]
 3e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3e8:	mov	w1, w0
 3ec:	b	274 <__sanitizer_cov_trace_pc_guard_init+0xc4>
 3f0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 3f4:	str	x0, [x19]
 3f8:	b	368 <__sanitizer_cov_trace_pc_guard_init+0x1b8>
 3fc:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 400:	add	x0, x0, #0x0
 404:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 408:	bl	0 <_ZN11__sanitizer3DieEv>
 40c:	nop

0000000000000410 <__sanitizer_cov_reset>:
 410:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 414:	add	x0, x0, #0x0
 418:	add	x0, x0, #0x8
 41c:	ldr	x2, [x0, #24]
 420:	ldr	x0, [x0, #8]
 424:	cbz	x2, 434 <__sanitizer_cov_reset+0x24>
 428:	lsl	x2, x2, #3
 42c:	mov	w1, #0x0                   	// #0
 430:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
 434:	str	x30, [sp, #-16]!
 438:	adrp	x2, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 43c:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 440:	add	x2, x2, #0x0
 444:	add	x0, x0, #0x0
 448:	mov	x4, #0x0                   	// #0
 44c:	mov	x3, #0x0                   	// #0
 450:	mov	w1, #0x1b6                 	// #438
 454:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000458 <__sanitizer_cov_trace_cmp>:
 458:	ret
 45c:	nop

0000000000000460 <__sanitizer_cov_trace_cmp1>:
 460:	ret
 464:	nop

0000000000000468 <__sanitizer_cov_trace_cmp2>:
 468:	ret
 46c:	nop

0000000000000470 <__sanitizer_cov_trace_cmp4>:
 470:	ret
 474:	nop

0000000000000478 <__sanitizer_cov_trace_cmp8>:
 478:	ret
 47c:	nop

0000000000000480 <__sanitizer_cov_trace_const_cmp1>:
 480:	ret
 484:	nop

0000000000000488 <__sanitizer_cov_trace_const_cmp2>:
 488:	ret
 48c:	nop

0000000000000490 <__sanitizer_cov_trace_const_cmp4>:
 490:	ret
 494:	nop

0000000000000498 <__sanitizer_cov_trace_const_cmp8>:
 498:	ret
 49c:	nop

00000000000004a0 <__sanitizer_cov_trace_switch>:
 4a0:	ret
 4a4:	nop

00000000000004a8 <__sanitizer_cov_trace_div4>:
 4a8:	ret
 4ac:	nop

00000000000004b0 <__sanitizer_cov_trace_div8>:
 4b0:	ret
 4b4:	nop

00000000000004b8 <__sanitizer_cov_trace_gep>:
 4b8:	ret
 4bc:	nop

00000000000004c0 <__sanitizer_cov_trace_pc_indir>:
 4c0:	ret
 4c4:	nop

00000000000004c8 <__sanitizer_cov_8bit_counters_init>:
 4c8:	ret
 4cc:	nop

00000000000004d0 <__sanitizer_cov_pcs_init>:
 4d0:	ret
 4d4:	nop

00000000000004d8 <__sanitizer_dump_coverage>:
 4d8:	cbnz	x1, 4e0 <__sanitizer_dump_coverage+0x8>
 4dc:	ret
 4e0:	stp	x19, x20, [sp, #-128]!
 4e4:	mov	x20, x1
 4e8:	mov	x19, x0
 4ec:	mov	x2, #0x0                   	// #0
 4f0:	mov	x1, #0x0                   	// #0
 4f4:	mov	x0, #0x1000                	// #4096
 4f8:	stp	x21, x22, [sp, #16]
 4fc:	lsl	x22, x20, #3
 500:	stp	x23, x24, [sp, #32]
 504:	mov	w23, #0x0                   	// #0
 508:	stp	x25, x26, [sp, #48]
 50c:	mov	x26, #0x0                   	// #0
 510:	stp	x27, x28, [sp, #64]
 514:	adrp	x28, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 518:	mov	x27, #0x0                   	// #0
 51c:	str	x30, [sp, #80]
 520:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 524:	mov	x2, #0x0                   	// #0
 528:	mov	x1, #0x0                   	// #0
 52c:	mov	x25, x0
 530:	mov	x0, #0x1000                	// #4096
 534:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 538:	mov	x24, x0
 53c:	mov	x2, #0x0                   	// #0
 540:	mov	x1, #0x0                   	// #0
 544:	mov	x0, x22
 548:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 54c:	mov	x1, x19
 550:	mov	x2, x22
 554:	mov	x21, x0
 558:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 55c:	mov	x0, x21
 560:	mov	x1, x20
 564:	mov	w2, #0x0                   	// #0
 568:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 56c:	add	x0, x28, #0x0
 570:	mov	x19, #0x0                   	// #0
 574:	str	x0, [sp, #104]
 578:	b	5ac <__sanitizer_dump_coverage+0xd4>
 57c:	cbnz	w23, 660 <__sanitizer_dump_coverage+0x188>
 580:	mov	x3, x28
 584:	mov	x0, x22
 588:	mov	x26, x5
 58c:	mov	w23, w4
 590:	mov	x1, x24
 594:	mov	x27, x19
 598:	mov	x2, #0x1000                	// #4096
 59c:	bl	0 <__sanitizer_get_module_and_offset_for_pc>
 5a0:	add	x19, x19, #0x1
 5a4:	cmp	x20, x19
 5a8:	b.eq	5fc <__sanitizer_dump_coverage+0x124>  // b.none
 5ac:	ldr	x22, [x21, x19, lsl #3]
 5b0:	add	x28, x21, x19, lsl #3
 5b4:	mov	x3, x28
 5b8:	mov	x2, #0x0                   	// #0
 5bc:	mov	x0, x22
 5c0:	mov	x1, #0x0                   	// #0
 5c4:	cbz	x22, 5a0 <__sanitizer_dump_coverage+0xc8>
 5c8:	bl	0 <__sanitizer_get_module_and_offset_for_pc>
 5cc:	eor	w1, w23, #0x1
 5d0:	cbz	w0, 650 <__sanitizer_dump_coverage+0x178>
 5d4:	ldr	x5, [x21, x19, lsl #3]
 5d8:	sub	x5, x22, x5
 5dc:	cmp	x5, x26
 5e0:	cset	w4, ne  // ne = any
 5e4:	orr	w4, w4, w1
 5e8:	cbnz	w4, 57c <__sanitizer_dump_coverage+0xa4>
 5ec:	add	x19, x19, #0x1
 5f0:	mov	w23, #0x1                   	// #1
 5f4:	cmp	x20, x19
 5f8:	b.ne	5ac <__sanitizer_dump_coverage+0xd4>  // b.any
 5fc:	cbz	w23, 614 <__sanitizer_dump_coverage+0x13c>
 600:	sub	x3, x20, x27
 604:	add	x2, x21, x27, lsl #3
 608:	mov	x1, x24
 60c:	mov	x0, x25
 610:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 614:	mov	x0, x25
 618:	mov	x1, #0x0                   	// #0
 61c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 620:	mov	x0, x24
 624:	mov	x1, #0x0                   	// #0
 628:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 62c:	mov	x0, x21
 630:	mov	x1, #0x0                   	// #0
 634:	ldp	x21, x22, [sp, #16]
 638:	ldp	x23, x24, [sp, #32]
 63c:	ldp	x25, x26, [sp, #48]
 640:	ldp	x27, x28, [sp, #64]
 644:	ldr	x30, [sp, #80]
 648:	ldp	x19, x20, [sp], #128
 64c:	b	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 650:	ldr	x0, [sp, #104]
 654:	mov	x1, x22
 658:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 65c:	b	5a0 <__sanitizer_dump_coverage+0xc8>
 660:	sub	x3, x19, x27
 664:	add	x2, x21, x27, lsl #3
 668:	mov	x1, x24
 66c:	mov	x0, x25
 670:	str	x5, [sp, #112]
 674:	str	w4, [sp, #124]
 678:	bl	0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 67c:	ldr	w4, [sp, #124]
 680:	ldr	x5, [sp, #112]
 684:	b	580 <__sanitizer_dump_coverage+0xa8>

0000000000000688 <__sanitizer_dump_trace_pc_guard_coverage>:
 688:	adrp	x0, 0 <_ZN8__sancov12_GLOBAL__N_1L19WriteModuleCoverageEPcPKcPKmm>
 68c:	add	x0, x0, #0x0
 690:	add	x1, x0, #0x8
 694:	ldrb	w0, [x0, #8]
 698:	cbz	w0, 6ac <__sanitizer_dump_trace_pc_guard_coverage+0x24>
 69c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 6a0:	ldr	x0, [x0]
 6a4:	ldrb	w0, [x0, #161]
 6a8:	cbnz	w0, 6b0 <__sanitizer_dump_trace_pc_guard_coverage+0x28>
 6ac:	ret
 6b0:	ldr	x0, [x1, #8]
 6b4:	ldr	x1, [x1, #24]
 6b8:	b	4d8 <__sanitizer_dump_coverage>
 6bc:	nop

00000000000006c0 <__sanitizer_cov_dump>:
 6c0:	b	688 <__sanitizer_dump_trace_pc_guard_coverage>

Disassembly of section .text._ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_:

0000000000000000 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_>:
   0:	cmp	x1, #0x1
   4:	mov	x4, #0x1                   	// #1
   8:	b.ls	fc <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xfc>  // b.plast
   c:	nop
  10:	ldr	x5, [x0, x4, lsl #3]
  14:	mov	x2, x4
  18:	sub	x3, x2, #0x1
  1c:	mov	x6, x2
  20:	lsr	x2, x3, #1
  24:	ldr	x3, [x0, x2, lsl #3]
  28:	cmp	x3, x5
  2c:	b.cs	3c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x3c>  // b.hs, b.nlast
  30:	str	x3, [x0, x6, lsl #3]
  34:	str	x5, [x0, x2, lsl #3]
  38:	cbnz	x2, 18 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x18>
  3c:	add	x2, x4, #0x1
  40:	cmp	x1, x2
  44:	b.eq	94 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x94>  // b.none
  48:	mov	x4, x2
  4c:	b	10 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x10>
  50:	cmp	x1, x4
  54:	b.cs	8c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x8c>  // b.hs, b.nlast
  58:	lsl	x5, x5, #4
  5c:	add	x7, x0, x5
  60:	ldr	x3, [x0, x2, lsl #3]
  64:	ldr	x5, [x0, x5]
  68:	cmp	x5, x3
  6c:	b.ls	8c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x8c>  // b.plast
  70:	cmp	x1, x2
  74:	b.eq	8c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x8c>  // b.none
  78:	ldr	x3, [x0, x2, lsl #3]
  7c:	str	x5, [x0, x2, lsl #3]
  80:	str	x3, [x7]
  84:	cmp	x1, x4
  88:	b.cc	f4 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xf4>  // b.lo, b.ul, b.last
  8c:	subs	x4, x4, #0x1
  90:	b.eq	fc <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xfc>  // b.none
  94:	ldr	x3, [x0, x4, lsl #3]
  98:	mov	x2, #0x0                   	// #0
  9c:	ldr	x1, [x0]
  a0:	str	x3, [x0]
  a4:	str	x1, [x0, x4, lsl #3]
  a8:	lsl	x1, x2, #1
  ac:	add	x5, x2, #0x1
  b0:	add	x3, x1, #0x1
  b4:	add	x1, x1, #0x2
  b8:	cmp	x3, x4
  bc:	b.cs	50 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x50>  // b.hs, b.nlast
  c0:	ldr	x6, [x0, x3, lsl #3]
  c4:	add	x8, x0, x3, lsl #3
  c8:	ldr	x7, [x0, x2, lsl #3]
  cc:	cmp	x7, x6
  d0:	b.cs	50 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x50>  // b.hs, b.nlast
  d4:	cmp	x1, x4
  d8:	b.cc	100 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x100>  // b.lo, b.ul, b.last
  dc:	cmp	x3, x2
  e0:	b.eq	8c <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x8c>  // b.none
  e4:	mov	x1, x3
  e8:	ldr	x5, [x0, x2, lsl #3]
  ec:	str	x6, [x0, x2, lsl #3]
  f0:	str	x5, [x0, x3, lsl #3]
  f4:	mov	x2, x1
  f8:	b	a8 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0xa8>
  fc:	ret
 100:	lsl	x9, x5, #4
 104:	add	x7, x0, x5, lsl #4
 108:	ldr	x5, [x0, x9]
 10c:	cmp	x6, x5
 110:	b.cc	70 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x70>  // b.lo, b.ul, b.last
 114:	mov	x5, x6
 118:	mov	x7, x8
 11c:	mov	x1, x3
 120:	b	70 <_ZN11__sanitizer4SortImNS_11CompareLessImEEEEvPT_mT0_+0x70>

sanitizer_deadlock_detector1.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>:
       0:	mov	x0, #0x0                   	// #0
       4:	ret

0000000000000008 <_ZN11__sanitizer2DD21DestroyPhysicalThreadEPNS_16DDPhysicalThreadE>:
       8:	ret
       c:	nop

0000000000000010 <_ZN11__sanitizer2DD9GetReportEPNS_10DDCallbackE>:
      10:	ldr	x1, [x1, #16]
      14:	ldrb	w0, [x1, #2224]
      18:	cbz	w0, 28 <_ZN11__sanitizer2DD9GetReportEPNS_10DDCallbackE+0x18>
      1c:	add	x0, x1, #0x628
      20:	strb	wzr, [x1, #2224]
      24:	ret
      28:	mov	x0, #0x0                   	// #0
      2c:	ret

0000000000000030 <_ZN11__sanitizer2DD19CreateLogicalThreadEy>:
      30:	stp	x19, x30, [sp, #-16]!
      34:	mov	x2, #0x0                   	// #0
      38:	mov	x19, x1
      3c:	mov	x0, #0x8b8                 	// #2232
      40:	mov	x1, #0x0                   	// #0
      44:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
      48:	mov	x3, x0
      4c:	str	x19, [x0]
      50:	str	xzr, [x3, #8]!
      54:	str	xzr, [x3, #520]
      58:	str	xzr, [x3, #1040]
      5c:	str	xzr, [x3, #1560]
      60:	strb	wzr, [x0, #2224]
      64:	ldp	x19, x30, [sp], #16
      68:	ret
      6c:	nop

0000000000000070 <_ZN11__sanitizer2DD20DestroyLogicalThreadEPNS_15DDLogicalThreadE>:
      70:	mov	x0, x1
      74:	mov	x1, #0x0                   	// #0
      78:	b	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
      7c:	nop

0000000000000080 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb>:
      80:	ldr	x1, [x1, #16]
      84:	ldr	x2, [x2]
      88:	ldr	x3, [x1, #528]
      8c:	and	x0, x2, #0xfffffffffffff000
      90:	cmp	x3, x0
      94:	b.eq	9c <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1c>  // b.none
      98:	ret
      9c:	ldr	x7, [x1, #1048]
      a0:	add	x6, x1, #0x8
      a4:	and	x4, x2, #0xfff
      a8:	cbz	x7, f4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x74>
      ac:	sub	x8, x7, #0x1
      b0:	mov	x0, x8
      b4:	tbnz	x8, #63, f4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x74>
      b8:	add	x5, x1, #0x218
      bc:	b	cc <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x4c>
      c0:	sub	x0, x0, #0x1
      c4:	cmn	x0, #0x1
      c8:	b.eq	f4 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x74>  // b.none
      cc:	ldr	x3, [x5, x0, lsl #3]
      d0:	cmp	x4, x3
      d4:	b.ne	c0 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x40>  // b.any
      d8:	add	x1, x1, x7, lsl #3
      dc:	add	x0, x0, #0x42
      e0:	str	x8, [x6, #1040]
      e4:	ldr	x2, [x1, #528]
      e8:	str	x2, [x6, x0, lsl #3]
      ec:	str	x4, [x1, #528]
      f0:	ret
      f4:	ldr	x7, [x1, #8]
      f8:	lsr	x3, x4, #6
      fc:	mov	x0, #0x1                   	// #1
     100:	lsl	x5, x0, x3
     104:	tst	x7, x5
     108:	b.eq	98 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>  // b.none
     10c:	add	x3, x3, x0
     110:	lsl	x0, x0, x2
     114:	ldr	x2, [x6, x3, lsl #3]
     118:	bic	x0, x2, x0
     11c:	str	x0, [x6, x3, lsl #3]
     120:	cbz	x0, 19c <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x11c>
     124:	cmp	x2, x0
     128:	b.eq	98 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>  // b.none
     12c:	ldr	x5, [x6, #1560]
     130:	cbz	x5, 98 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>
     134:	sub	x7, x5, #0x1
     138:	mov	x0, x7
     13c:	tbnz	x7, #63, 98 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>
     140:	add	x1, x1, #0x420
     144:	mov	w3, w4
     148:	b	158 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0xd8>
     14c:	sub	x0, x0, #0x1
     150:	cmn	x0, #0x1
     154:	b.eq	98 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0x18>  // b.none
     158:	lsl	x2, x0, #3
     15c:	ldr	w2, [x1, x2]
     160:	cmp	w3, w2
     164:	b.ne	14c <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0xcc>  // b.any
     168:	add	x3, x6, x0, lsl #3
     16c:	add	x1, x5, #0x82
     170:	add	x5, x6, x7, lsl #3
     174:	mov	x0, x3
     178:	lsl	x1, x1, #3
     17c:	add	x2, x6, x1
     180:	ldr	w3, [x3, #1052]
     184:	ldr	x5, [x5, #1048]
     188:	str	x5, [x0, #1048]
     18c:	str	w4, [x6, x1]
     190:	str	w3, [x2, #4]
     194:	str	x7, [x6, #1560]
     198:	ret
     19c:	bic	x5, x7, x5
     1a0:	str	x5, [x1, #8]
     1a4:	b	124 <_ZN11__sanitizer2DD17MutexBeforeUnlockEPNS_10DDCallbackEPNS_7DDMutexEb+0xa4>

00000000000001a8 <_ZN11__sanitizer2DD9MutexInitEPNS_10DDCallbackEPNS_7DDMutexE>:
     1a8:	ldr	x3, [x1]
     1ac:	stp	x19, x30, [sp, #-16]!
     1b0:	mov	x19, x2
     1b4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     1b8:	add	x2, x2, #0x0
     1bc:	ldr	x3, [x3]
     1c0:	str	xzr, [x19]
     1c4:	mov	w0, #0x0                   	// #0
     1c8:	cmp	x3, x2
     1cc:	b.ne	1dc <_ZN11__sanitizer2DD9MutexInitEPNS_10DDCallbackEPNS_7DDMutexE+0x34>  // b.any
     1d0:	str	w0, [x19, #8]
     1d4:	ldp	x19, x30, [sp], #16
     1d8:	ret
     1dc:	mov	x0, x1
     1e0:	blr	x3
     1e4:	str	w0, [x19, #8]
     1e8:	ldp	x19, x30, [sp], #16
     1ec:	ret

00000000000001f0 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE>:
     1f0:	stp	x19, x20, [sp, #-32]!
     1f4:	mov	x20, x0
     1f8:	ldr	x0, [x2]
     1fc:	str	x30, [sp, #16]
     200:	cbnz	x0, 210 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x20>
     204:	ldr	x30, [sp, #16]
     208:	ldp	x19, x20, [sp], #32
     20c:	ret
     210:	add	x0, x20, #0x8
     214:	mov	x19, x2
     218:	mov	w2, #0x1                   	// #1
     21c:	ldxrb	w1, [x0]
     220:	stxrb	w3, w2, [x0]
     224:	cbnz	w3, 21c <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x2c>
     228:	dmb	ish
     22c:	tst	w1, #0xff
     230:	b.eq	238 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x48>  // b.none
     234:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     238:	ldr	x3, [x19]
     23c:	cbz	x3, 250 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x60>
     240:	ldr	x0, [x20, #16]
     244:	and	x1, x3, #0xfffffffffffff000
     248:	cmp	x1, x0
     24c:	b.eq	268 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x78>  // b.none
     250:	str	xzr, [x19]
     254:	dmb	ish
     258:	strb	wzr, [x20, #8]
     25c:	ldr	x30, [sp, #16]
     260:	ldp	x19, x20, [sp], #32
     264:	ret
     268:	cmp	x3, #0xfff
     26c:	b.ls	328 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x138>  // b.plast
     270:	ubfx	x0, x3, #6, #6
     274:	mov	x1, #0x1                   	// #1
     278:	ldr	x6, [x20, #24]
     27c:	add	x4, x0, x1
     280:	and	x2, x3, #0xfff
     284:	lsl	x0, x1, x0
     288:	lsl	x5, x4, #3
     28c:	tst	x0, x6
     290:	lsl	x3, x1, x3
     294:	b.ne	2c4 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0xd4>  // b.any
     298:	ldr	x1, [x20, #544]
     29c:	add	x5, x20, #0x220
     2a0:	tst	x0, x1
     2a4:	b.ne	2f4 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x104>  // b.any
     2a8:	orr	x0, x0, x1
     2ac:	str	x0, [x20, #544]
     2b0:	str	x3, [x5, x4, lsl #3]
     2b4:	add	x2, x2, x2, lsl #6
     2b8:	add	x2, x20, x2, lsl #3
     2bc:	str	xzr, [x2, #1584]
     2c0:	b	250 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0x60>
     2c4:	add	x5, x20, x5
     2c8:	ldr	x1, [x5, #24]
     2cc:	tst	x3, x1
     2d0:	b.eq	298 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0xa8>  // b.none
     2d4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     2d8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     2dc:	add	x2, x2, #0x0
     2e0:	add	x0, x0, #0x0
     2e4:	mov	x4, #0x0                   	// #0
     2e8:	mov	x3, #0x0                   	// #0
     2ec:	mov	w1, #0xc0                  	// #192
     2f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     2f4:	ldr	x0, [x5, x4, lsl #3]
     2f8:	orr	x3, x0, x3
     2fc:	str	x3, [x5, x4, lsl #3]
     300:	cmp	x0, x3
     304:	b.ne	2b4 <_ZN11__sanitizer2DD12MutexDestroyEPNS_10DDCallbackEPNS_7DDMutexE+0xc4>  // b.any
     308:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     30c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     310:	add	x2, x2, #0x0
     314:	add	x0, x0, #0x0
     318:	mov	x4, #0x0                   	// #0
     31c:	mov	x3, #0x0                   	// #0
     320:	mov	w1, #0xc1                  	// #193
     324:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     328:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     32c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     330:	add	x2, x2, #0x0
     334:	add	x0, x0, #0x0
     338:	mov	x4, #0x1000                	// #4096
     33c:	mov	w1, #0x172                 	// #370
     340:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     344:	nop

0000000000000348 <_ZN11__sanitizer9DDetector6CreateEPKNS_7DDFlagsE>:
     348:	stp	x19, x30, [sp, #-16]!
     34c:	mov	x19, x0
     350:	mov	x0, #0xa50                 	// #2640
     354:	mov	w2, #0x0                   	// #0
     358:	movk	x0, #0x41, lsl #16
     35c:	adrp	x1, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     360:	add	x1, x1, #0x0
     364:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     368:	add	x4, x0, #0x410, lsl #12
     36c:	strb	wzr, [x0, #8]
     370:	adrp	x1, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     374:	add	x3, x1, #0x0
     378:	add	x2, x0, #0x208, lsl #12
     37c:	str	x3, [x0]
     380:	add	x1, x0, #0x630
     384:	ldrb	w3, [x19]
     388:	add	x2, x2, #0x630
     38c:	strb	w3, [x4, #2632]
     390:	stp	xzr, xzr, [x0, #16]
     394:	str	xzr, [x0, #544]
     398:	str	xzr, [x1]
     39c:	add	x1, x1, #0x208
     3a0:	cmp	x1, x2
     3a4:	b.ne	398 <_ZN11__sanitizer9DDetector6CreateEPKNS_7DDFlagsE+0x50>  // b.any
     3a8:	add	x1, x0, #0x10
     3ac:	add	x1, x1, #0x410, lsl #12
     3b0:	str	xzr, [x1, #2608]
     3b4:	ldp	x19, x30, [sp], #16
     3b8:	ret
     3bc:	nop

00000000000003c0 <_ZN11__sanitizer2DDC1EPKNS_7DDFlagsE>:
     3c0:	add	x5, x0, #0x410, lsl #12
     3c4:	strb	wzr, [x0, #8]
     3c8:	add	x3, x0, #0x208, lsl #12
     3cc:	adrp	x4, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     3d0:	ldrb	w1, [x1]
     3d4:	add	x4, x4, #0x0
     3d8:	str	x4, [x0]
     3dc:	add	x2, x0, #0x630
     3e0:	add	x3, x3, #0x630
     3e4:	strb	w1, [x5, #2632]
     3e8:	stp	xzr, xzr, [x0, #16]
     3ec:	str	xzr, [x0, #544]
     3f0:	str	xzr, [x2]
     3f4:	add	x2, x2, #0x208
     3f8:	cmp	x2, x3
     3fc:	b.ne	3f0 <_ZN11__sanitizer2DDC1EPKNS_7DDFlagsE+0x30>  // b.any
     400:	add	x0, x0, #0x10
     404:	add	x0, x0, #0x410, lsl #12
     408:	str	xzr, [x0, #2608]
     40c:	ret

0000000000000410 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE>:
     410:	ldr	x3, [x2]
     414:	cbz	x3, 428 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x18>
     418:	ldr	x4, [x0, #16]
     41c:	and	x3, x3, #0xfffffffffffff000
     420:	cmp	x3, x4
     424:	b.eq	6ec <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2dc>  // b.none
     428:	stp	x19, x20, [sp, #-32]!
     42c:	ldr	x9, [x0, #24]
     430:	str	x30, [sp, #16]
     434:	cbz	x9, 4a0 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x90>
     438:	mov	x4, x0
     43c:	rbit	x3, x9
     440:	clz	x3, x3
     444:	mov	x5, #0x1                   	// #1
     448:	add	x8, x3, x5
     44c:	lsl	x7, x5, x3
     450:	bic	x9, x9, x7
     454:	str	x9, [x4, #24]!
     458:	ldr	x6, [x4, x8, lsl #3]
     45c:	cbz	x6, 848 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x438>
     460:	rbit	x10, x6
     464:	clz	x10, x10
     468:	lsl	x5, x5, x10
     46c:	bic	x5, x6, x5
     470:	str	x5, [x4, x8, lsl #3]
     474:	cbz	x5, 480 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x70>
     478:	orr	x7, x7, x9
     47c:	str	x7, [x0, #24]
     480:	add	x3, x10, x3, lsl #6
     484:	add	x4, x0, #0x10
     488:	add	x5, x3, #0x41, lsl #12
     48c:	add	x5, x5, #0x146
     490:	str	x2, [x4, x5, lsl #3]
     494:	ldr	x4, [x0, #16]
     498:	add	x3, x3, x4
     49c:	b	6a0 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x290>
     4a0:	ldr	x15, [x0, #544]
     4a4:	cbz	x15, 5ec <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x1dc>
     4a8:	add	x11, x0, #0x10
     4ac:	add	x10, x11, #0x410, lsl #12
     4b0:	ldr	x4, [x10, #2608]
     4b4:	subs	x12, x4, #0x1
     4b8:	b.mi	590 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x180>  // b.first
     4bc:	add	x4, x4, #0x21, lsl #12
     4c0:	mov	x16, #0x10a2                	// #4258
     4c4:	add	x4, x4, #0xa3
     4c8:	add	x14, x0, #0x220
     4cc:	mov	x13, #0x1                   	// #1
     4d0:	movk	x16, #0x2, lsl #16
     4d4:	add	x4, x0, x4, lsl #4
     4d8:	ldrh	w6, [x4]
     4dc:	and	x3, x6, #0xffff
     4e0:	cmp	x3, #0x1, lsl #12
     4e4:	b.hi	7e4 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x3d4>  // b.pmore
     4e8:	lsr	x5, x3, #12
     4ec:	ubfx	x3, x3, #6, #6
     4f0:	lsl	x8, x13, x3
     4f4:	ldr	x7, [x14, x5, lsl #3]
     4f8:	tst	x8, x7
     4fc:	b.ne	6d0 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2c0>  // b.any
     500:	ldrh	w6, [x4, #2]
     504:	and	x3, x6, #0xffff
     508:	cmp	x3, #0x1, lsl #12
     50c:	b.hi	80c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x3fc>  // b.pmore
     510:	lsr	x5, x3, #12
     514:	ubfx	x3, x3, #6, #6
     518:	lsl	x8, x13, x3
     51c:	ldr	x7, [x14, x5, lsl #3]
     520:	tst	x8, x7
     524:	b.eq	580 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x170>  // b.none
     528:	add	x3, x3, x5, lsl #6
     52c:	lsl	x6, x13, x6
     530:	add	x3, x3, #0x1
     534:	ldr	x3, [x14, x3, lsl #3]
     538:	tst	x6, x3
     53c:	b.eq	580 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x170>  // b.none
     540:	ldr	x3, [x10, #2608]
     544:	ldrh	w20, [x4]
     548:	add	x8, x3, x16
     54c:	sub	x5, x3, #0x1
     550:	ldrh	w19, [x4, #2]
     554:	lsl	x8, x8, #4
     558:	ldr	w17, [x4, #12]
     55c:	add	x3, x11, x8
     560:	ldp	w30, w18, [x4, #4]
     564:	ldp	x6, x7, [x3]
     568:	stp	x6, x7, [x4]
     56c:	strh	w20, [x11, x8]
     570:	strh	w19, [x3, #2]
     574:	stp	w30, w18, [x3, #4]
     578:	str	w17, [x3, #12]
     57c:	str	x5, [x10, #2608]
     580:	sub	x12, x12, #0x1
     584:	sub	x4, x4, #0x10
     588:	cmn	x12, #0x1
     58c:	b.ne	4d8 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0xc8>  // b.any
     590:	mov	x12, #0x1                   	// #1
     594:	add	x6, x0, #0x630
     598:	mov	x14, x12
     59c:	ldr	x3, [x6, x9, lsl #3]
     5a0:	add	x13, x9, #0x1
     5a4:	and	x3, x15, x3
     5a8:	cbz	x3, 72c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x31c>
     5ac:	rbit	x4, x3
     5b0:	clz	x4, x4
     5b4:	add	x7, x13, x4
     5b8:	add	x10, x0, x4, lsl #3
     5bc:	lsl	x5, x12, x4
     5c0:	bic	x3, x3, x5
     5c4:	ldr	x8, [x6, x7, lsl #3]
     5c8:	ldr	x5, [x10, #552]
     5cc:	bic	x5, x8, x5
     5d0:	str	x5, [x6, x7, lsl #3]
     5d4:	cbnz	x5, 5a8 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x198>
     5d8:	ldr	x5, [x6, x9, lsl #3]
     5dc:	lsl	x4, x14, x4
     5e0:	bic	x4, x5, x4
     5e4:	str	x4, [x6, x9, lsl #3]
     5e8:	b	5a8 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x198>
     5ec:	ldr	x4, [x0, #16]
     5f0:	mov	x5, x0
     5f4:	mvni	v0.4s, #0x0
     5f8:	add	x3, x0, #0x20
     5fc:	add	x4, x4, #0x1, lsl #12
     600:	str	x4, [x0, #16]
     604:	add	x4, x0, #0x220
     608:	mov	x6, #0xffffffffffffffff    	// #-1
     60c:	str	x6, [x5, #24]!
     610:	str	q0, [x3], #16
     614:	cmp	x3, x4
     618:	b.ne	610 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x200>  // b.any
     61c:	add	x4, x0, #0x208, lsl #12
     620:	add	x3, x0, #0x630
     624:	add	x4, x4, #0x630
     628:	str	xzr, [x3]
     62c:	add	x3, x3, #0x208
     630:	cmp	x4, x3
     634:	b.ne	628 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x218>  // b.any
     638:	add	x11, x0, #0x10
     63c:	add	x3, x11, #0x410, lsl #12
     640:	str	xzr, [x3, #2608]
     644:	ldr	x4, [x0, #24]
     648:	cbz	x4, 70c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2fc>
     64c:	rbit	x3, x4
     650:	mov	x6, #0x1                   	// #1
     654:	clz	x3, x3
     658:	add	x9, x3, x6
     65c:	lsl	x8, x6, x3
     660:	bic	x4, x4, x8
     664:	str	x4, [x0, #24]
     668:	ldr	x7, [x5, x9, lsl #3]
     66c:	cbz	x7, 828 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x418>
     670:	rbit	x10, x7
     674:	clz	x10, x10
     678:	lsl	x6, x6, x10
     67c:	bic	x6, x7, x6
     680:	str	x6, [x5, x9, lsl #3]
     684:	cbnz	x6, 800 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x3f0>
     688:	add	x3, x10, x3, lsl #6
     68c:	add	x4, x3, #0x41, lsl #12
     690:	add	x4, x4, #0x146
     694:	str	x2, [x11, x4, lsl #3]
     698:	ldr	x4, [x0, #16]
     69c:	add	x3, x3, x4
     6a0:	str	x3, [x2]
     6a4:	ldr	x2, [x1, #528]
     6a8:	ldr	x4, [x0, #16]
     6ac:	cmp	x2, x4
     6b0:	b.eq	6c4 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2b4>  // b.none
     6b4:	str	xzr, [x1, #8]
     6b8:	str	x4, [x1, #528]
     6bc:	str	xzr, [x1, #1048]
     6c0:	str	xzr, [x1, #1568]
     6c4:	ldr	x30, [sp, #16]
     6c8:	ldp	x19, x20, [sp], #32
     6cc:	ret
     6d0:	add	x3, x3, x5, lsl #6
     6d4:	lsl	x6, x13, x6
     6d8:	add	x3, x3, #0x1
     6dc:	ldr	x3, [x14, x3, lsl #3]
     6e0:	tst	x6, x3
     6e4:	b.ne	540 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x130>  // b.any
     6e8:	b	500 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0xf0>
     6ec:	ldr	x2, [x1, #528]
     6f0:	cmp	x2, x4
     6f4:	b.eq	708 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2f8>  // b.none
     6f8:	str	xzr, [x1, #8]
     6fc:	str	x4, [x1, #528]
     700:	str	xzr, [x1, #1048]
     704:	str	xzr, [x1, #1568]
     708:	ret
     70c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     710:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     714:	add	x2, x2, #0x0
     718:	add	x0, x0, #0x0
     71c:	mov	x4, #0x0                   	// #0
     720:	mov	x3, #0x0                   	// #0
     724:	mov	w1, #0xbf                  	// #191
     728:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     72c:	add	x9, x9, #0x41
     730:	cmp	x9, #0x41, lsl #12
     734:	ldr	x15, [x0, #544]
     738:	b.ne	59c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x18c>  // b.any
     73c:	add	x8, x0, #0x220
     740:	add	x6, x0, #0x18
     744:	mov	x7, #0x1                   	// #1
     748:	cbz	x15, 788 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x378>
     74c:	rbit	x3, x15
     750:	ldr	x5, [x0, #24]
     754:	clz	x3, x3
     758:	lsl	x4, x7, x3
     75c:	add	x3, x3, #0x1
     760:	bic	x15, x15, x4
     764:	orr	x4, x4, x5
     768:	str	x4, [x0, #24]
     76c:	cmp	x4, x5
     770:	lsl	x4, x3, #3
     774:	b.eq	868 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x458>  // b.none
     778:	str	xzr, [x6, x3, lsl #3]
     77c:	ldr	x4, [x8, x3, lsl #3]
     780:	str	x4, [x6, x3, lsl #3]
     784:	cbnz	x15, 74c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x33c>
     788:	ldr	x5, [x0, #24]
     78c:	str	xzr, [x0, #544]
     790:	cbz	x5, 70c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x2fc>
     794:	rbit	x3, x5
     798:	mov	x7, x0
     79c:	clz	x3, x3
     7a0:	mov	x4, #0x1                   	// #1
     7a4:	add	x6, x3, #0x1
     7a8:	lsl	x8, x4, x3
     7ac:	bic	x5, x5, x8
     7b0:	lsl	x6, x6, #3
     7b4:	str	x5, [x7, #24]!
     7b8:	ldr	x9, [x7, x6]
     7bc:	cbz	x9, 880 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x470>
     7c0:	rbit	x10, x9
     7c4:	clz	x10, x10
     7c8:	lsl	x4, x4, x10
     7cc:	bic	x4, x9, x4
     7d0:	str	x4, [x7, x6]
     7d4:	cbz	x4, 688 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x278>
     7d8:	orr	x5, x8, x5
     7dc:	str	x5, [x0, #24]
     7e0:	b	688 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x278>
     7e4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     7e8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     7ec:	add	x2, x2, #0x0
     7f0:	add	x0, x0, #0x0
     7f4:	mov	x4, #0x1000                	// #4096
     7f8:	mov	w1, #0x143                 	// #323
     7fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     800:	orr	x4, x8, x4
     804:	str	x4, [x0, #24]
     808:	b	688 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x278>
     80c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     810:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     814:	add	x2, x2, #0x0
     818:	add	x0, x0, #0x0
     81c:	mov	x4, #0x1000                	// #4096
     820:	mov	w1, #0x143                 	// #323
     824:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     828:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     82c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     830:	add	x2, x2, #0x0
     834:	add	x0, x0, #0x0
     838:	mov	x4, #0x0                   	// #0
     83c:	mov	x3, #0x0                   	// #0
     840:	mov	w1, #0x30                  	// #48
     844:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     848:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     84c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     850:	add	x2, x2, #0x0
     854:	add	x0, x0, #0x0
     858:	mov	x4, #0x0                   	// #0
     85c:	mov	x3, #0x0                   	// #0
     860:	mov	w1, #0x30                  	// #48
     864:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     868:	ldr	x3, [x6, x4]
     86c:	ldr	x5, [x8, x4]
     870:	orr	x3, x3, x5
     874:	str	x3, [x6, x4]
     878:	cbnz	x15, 74c <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x33c>
     87c:	b	788 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE+0x378>
     880:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     884:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     888:	add	x2, x2, #0x0
     88c:	add	x0, x0, #0x0
     890:	mov	x4, #0x0                   	// #0
     894:	mov	x3, #0x0                   	// #0
     898:	mov	w1, #0x30                  	// #48
     89c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000008a0 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb>:
     8a0:	stp	x19, x20, [sp, #-96]!
     8a4:	mov	x20, x1
     8a8:	add	x1, x0, #0x410, lsl #12
     8ac:	stp	x21, x22, [sp, #16]
     8b0:	mov	x19, x0
     8b4:	mov	x21, x2
     8b8:	ldrb	w1, [x1, #2632]
     8bc:	stp	x23, x24, [sp, #32]
     8c0:	and	w24, w3, #0xff
     8c4:	stp	x25, x26, [sp, #48]
     8c8:	and	w26, w4, #0xff
     8cc:	mov	w25, #0x0                   	// #0
     8d0:	ldr	x23, [x20, #16]
     8d4:	str	x30, [sp, #64]
     8d8:	cbz	w1, 8f4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x54>
     8dc:	ldr	x0, [x20]
     8e0:	adrp	x1, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     8e4:	add	x1, x1, #0x0
     8e8:	ldr	x2, [x0]
     8ec:	cmp	x2, x1
     8f0:	b.ne	a8c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x1ec>  // b.any
     8f4:	ldr	x1, [x23, #8]
     8f8:	add	x22, x23, #0x8
     8fc:	ldr	x2, [x21]
     900:	ldr	x5, [x23, #528]
     904:	cbz	x1, a30 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x190>
     908:	cbz	x2, 918 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x78>
     90c:	ldr	x0, [x19, #16]
     910:	cmp	x0, x5
     914:	b.eq	ab0 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x210>  // b.none
     918:	add	x0, x19, #0x8
     91c:	mov	w2, #0x1                   	// #1
     920:	ldxrb	w1, [x0]
     924:	stxrb	w3, w2, [x0]
     928:	cbnz	w3, 920 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x80>
     92c:	dmb	ish
     930:	tst	w1, #0xff
     934:	b.eq	940 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xa0>  // b.none
     938:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     93c:	nop
     940:	mov	x2, x21
     944:	mov	x1, x23
     948:	mov	x0, x19
     94c:	bl	410 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE>
     950:	cbnz	w24, b6c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x2cc>
     954:	ldr	x24, [x21]
     958:	cbnz	w26, 994 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xf4>
     95c:	mov	w3, w25
     960:	ldr	x1, [x20]
     964:	cbz	w25, c34 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x394>
     968:	ldr	x2, [x1, #8]
     96c:	adrp	x1, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     970:	add	x1, x1, #0x0
     974:	mov	w4, #0x0                   	// #0
     978:	cmp	x2, x1
     97c:	b.ne	d00 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x460>  // b.any
     980:	mov	x2, x24
     984:	mov	x1, x22
     988:	add	x0, x19, #0x10
     98c:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     990:	ldr	x24, [x21]
     994:	ldr	x0, [x19, #16]
     998:	ldr	x1, [x22, #520]
     99c:	cmp	x0, x1
     9a0:	b.eq	9b4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x114>  // b.none
     9a4:	str	xzr, [x23, #8]
     9a8:	str	x0, [x22, #520]
     9ac:	str	xzr, [x22, #1040]
     9b0:	str	xzr, [x22, #1560]
     9b4:	cmp	x24, #0xfff
     9b8:	b.ls	cc8 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x428>  // b.plast
     9bc:	ldr	x3, [x19, #16]
     9c0:	and	x4, x24, #0xfffffffffffff000
     9c4:	cmp	x3, x4
     9c8:	b.ne	ce8 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x448>  // b.any
     9cc:	cmp	x3, x0
     9d0:	and	x4, x24, #0xfff
     9d4:	b.ne	d18 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x478>  // b.any
     9d8:	ldr	x1, [x23, #8]
     9dc:	lsr	x2, x4, #6
     9e0:	mov	x0, #0x1                   	// #1
     9e4:	add	x3, x2, x0
     9e8:	lsl	x24, x0, x24
     9ec:	lsl	x0, x0, x2
     9f0:	tst	x1, x0
     9f4:	b.ne	be4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x344>  // b.any
     9f8:	orr	x0, x1, x0
     9fc:	str	x0, [x23, #8]
     a00:	str	x24, [x22, x3, lsl #3]
     a04:	ldr	x3, [x22, #1560]
     a08:	cmp	x3, #0x3f
     a0c:	b.hi	c5c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3bc>  // b.pmore
     a10:	add	x0, x3, #0x83
     a14:	add	x3, x3, #0x1
     a18:	str	x3, [x22, #1560]
     a1c:	lsl	x0, x0, #3
     a20:	add	x1, x22, x0
     a24:	str	w4, [x22, x0]
     a28:	str	w25, [x1, #4]
     a2c:	b	c14 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x374>
     a30:	cbz	x5, 908 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x68>
     a34:	and	x0, x2, #0xfffffffffffff000
     a38:	cmp	x0, x5
     a3c:	b.ne	908 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x68>  // b.any
     a40:	ubfx	x1, x2, #6, #6
     a44:	mov	x0, #0x1                   	// #1
     a48:	add	x3, x1, x0
     a4c:	lsl	x4, x0, x2
     a50:	lsl	x0, x0, x1
     a54:	str	x0, [x23, #8]
     a58:	and	x2, x2, #0xfff
     a5c:	str	x4, [x22, x3, lsl #3]
     a60:	ldr	x3, [x22, #1560]
     a64:	cmp	x3, #0x3f
     a68:	b.hi	c5c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3bc>  // b.pmore
     a6c:	add	x0, x3, #0x83
     a70:	add	x3, x3, #0x1
     a74:	str	x3, [x22, #1560]
     a78:	lsl	x0, x0, #3
     a7c:	add	x1, x22, x0
     a80:	str	w2, [x22, x0]
     a84:	str	w25, [x1, #4]
     a88:	b	c1c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x37c>
     a8c:	mov	x0, x20
     a90:	blr	x2
     a94:	ldr	x1, [x23, #8]
     a98:	mov	w25, w0
     a9c:	add	x22, x23, #0x8
     aa0:	ldr	x2, [x21]
     aa4:	ldr	x5, [x23, #528]
     aa8:	cbnz	x1, 908 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x68>
     aac:	b	a30 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x190>
     ab0:	and	x0, x2, #0xfffffffffffff000
     ab4:	cmp	x0, x5
     ab8:	b.ne	918 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x78>  // b.any
     abc:	ldr	x9, [x23, #1568]
     ac0:	ubfx	x6, x2, #6, #6
     ac4:	mov	x0, #0x1                   	// #1
     ac8:	and	x8, x2, #0xfff
     acc:	add	x5, x6, x0
     ad0:	lsl	x3, x0, x6
     ad4:	lsl	x2, x0, x2
     ad8:	cbz	x9, b2c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x28c>
     adc:	add	x6, x6, #0x1
     ae0:	add	x7, x19, #0x630
     ae4:	add	x11, x23, #0x420
     ae8:	mov	x0, #0x0                   	// #0
     aec:	mov	w10, #0x208                 	// #520
     af0:	mov	w12, #0x41                  	// #65
     af4:	lsl	x4, x0, #3
     af8:	ldr	w4, [x11, x4]
     afc:	umull	x5, w4, w10
     b00:	ldr	x5, [x7, x5]
     b04:	tst	x3, x5
     b08:	b.eq	918 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x78>  // b.none
     b0c:	umaddl	x4, w4, w12, x6
     b10:	mov	x5, x6
     b14:	ldr	x4, [x7, x4, lsl #3]
     b18:	tst	x2, x4
     b1c:	b.eq	918 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x78>  // b.none
     b20:	add	x0, x0, #0x1
     b24:	cmp	x9, x0
     b28:	b.ne	af4 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x254>  // b.any
     b2c:	tst	x1, x3
     b30:	b.ne	c94 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3f4>  // b.any
     b34:	orr	x1, x1, x3
     b38:	str	x1, [x23, #8]
     b3c:	str	x2, [x22, x5, lsl #3]
     b40:	ldr	x3, [x22, #1560]
     b44:	cmp	x3, #0x3f
     b48:	b.hi	c5c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3bc>  // b.pmore
     b4c:	add	x0, x3, #0x83
     b50:	add	x3, x3, #0x1
     b54:	str	x3, [x22, #1560]
     b58:	lsl	x0, x0, #3
     b5c:	add	x1, x22, x0
     b60:	str	w8, [x22, x0]
     b64:	str	w25, [x1, #4]
     b68:	b	c1c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x37c>
     b6c:	ldr	x0, [x19, #16]
     b70:	ldr	x3, [x22, #520]
     b74:	ldr	x24, [x21]
     b78:	cmp	x0, x3
     b7c:	b.ne	d38 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x498>  // b.any
     b80:	cmp	x24, #0xfff
     b84:	b.ls	cc8 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x428>  // b.plast
     b88:	and	x4, x24, #0xfffffffffffff000
     b8c:	mov	x3, x0
     b90:	cmp	x0, x4
     b94:	b.ne	ce8 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x448>  // b.any
     b98:	ldr	x2, [x23, #8]
     b9c:	ubfx	x1, x24, #6, #6
     ba0:	mov	x0, #0x1                   	// #1
     ba4:	lsl	x3, x0, x1
     ba8:	tst	x3, x2
     bac:	b.eq	958 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xb8>  // b.none
     bb0:	add	x1, x1, x0
     bb4:	lsl	x0, x0, x24
     bb8:	ldr	x1, [x22, x1, lsl #3]
     bbc:	tst	x0, x1
     bc0:	b.eq	958 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xb8>  // b.none
     bc4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     bc8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     bcc:	add	x2, x2, #0x0
     bd0:	add	x0, x0, #0x0
     bd4:	mov	x4, #0x0                   	// #0
     bd8:	mov	x3, #0x0                   	// #0
     bdc:	mov	w1, #0xa5                  	// #165
     be0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     be4:	ldr	x0, [x22, x3, lsl #3]
     be8:	orr	x24, x0, x24
     bec:	str	x24, [x22, x3, lsl #3]
     bf0:	cmp	x0, x24
     bf4:	b.ne	a04 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x164>  // b.any
     bf8:	ldr	x3, [x22, #1040]
     bfc:	cmp	x3, #0x3f
     c00:	b.hi	c78 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3d8>  // b.pmore
     c04:	add	x0, x3, #0x42
     c08:	add	x3, x3, #0x1
     c0c:	str	x3, [x22, #1040]
     c10:	str	x4, [x22, x0, lsl #3]
     c14:	dmb	ish
     c18:	strb	wzr, [x19, #8]
     c1c:	ldp	x21, x22, [sp, #16]
     c20:	ldp	x23, x24, [sp, #32]
     c24:	ldp	x25, x26, [sp, #48]
     c28:	ldr	x30, [sp, #64]
     c2c:	ldp	x19, x20, [sp], #96
     c30:	ret
     c34:	ldr	x2, [x1]
     c38:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c3c:	add	x0, x0, #0x0
     c40:	cmp	x2, x0
     c44:	b.eq	968 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xc8>  // b.none
     c48:	mov	x0, x20
     c4c:	blr	x2
     c50:	mov	w3, w0
     c54:	ldr	x1, [x20]
     c58:	b	968 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xc8>
     c5c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c60:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c64:	add	x2, x2, #0x0
     c68:	add	x0, x0, #0x0
     c6c:	mov	x4, #0x40                  	// #64
     c70:	mov	w1, #0x43                  	// #67
     c74:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     c78:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c7c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     c80:	add	x2, x2, #0x0
     c84:	add	x0, x0, #0x0
     c88:	mov	x4, #0x40                  	// #64
     c8c:	mov	w1, #0x3f                  	// #63
     c90:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     c94:	ldr	x0, [x22, x5, lsl #3]
     c98:	orr	x2, x0, x2
     c9c:	str	x2, [x22, x5, lsl #3]
     ca0:	cmp	x0, x2
     ca4:	b.ne	b40 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x2a0>  // b.any
     ca8:	ldr	x3, [x22, #1040]
     cac:	cmp	x3, #0x3f
     cb0:	b.hi	c78 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x3d8>  // b.pmore
     cb4:	add	x0, x3, #0x42
     cb8:	add	x3, x3, #0x1
     cbc:	str	x3, [x22, #1040]
     cc0:	str	x8, [x22, x0, lsl #3]
     cc4:	b	c1c <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0x37c>
     cc8:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     ccc:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     cd0:	mov	x3, x24
     cd4:	add	x2, x2, #0x0
     cd8:	add	x0, x0, #0x0
     cdc:	mov	x4, #0x1000                	// #4096
     ce0:	mov	w1, #0x172                 	// #370
     ce4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ce8:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     cec:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     cf0:	add	x2, x2, #0x0
     cf4:	add	x0, x0, #0x0
     cf8:	mov	w1, #0x173                 	// #371
     cfc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d00:	str	w3, [sp, #92]
     d04:	mov	x0, x20
     d08:	blr	x2
     d0c:	mov	w4, w0
     d10:	ldr	w3, [sp, #92]
     d14:	b	980 <_ZN11__sanitizer2DD14MutexAfterLockEPNS_10DDCallbackEPNS_7DDMutexEbb+0xe0>
     d18:	mov	x4, x3
     d1c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d20:	mov	x3, x0
     d24:	add	x2, x2, #0x0
     d28:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d2c:	mov	w1, #0x3c                  	// #60
     d30:	add	x0, x0, #0x0
     d34:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d38:	mov	x4, x0
     d3c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d40:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     d44:	add	x2, x2, #0x0
     d48:	add	x0, x0, #0x0
     d4c:	mov	w1, #0x6c                  	// #108
     d50:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d54:	nop

0000000000000d58 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE>:
     d58:	stp	x19, x20, [sp, #-336]!
     d5c:	stp	x23, x24, [sp, #32]
     d60:	ldr	x23, [x1, #16]
     d64:	stp	x21, x22, [sp, #16]
     d68:	mov	x22, x2
     d6c:	ldr	x4, [x0, #16]
     d70:	stp	x25, x26, [sp, #48]
     d74:	add	x2, x23, #0x8
     d78:	ldr	x3, [x2, #520]
     d7c:	stp	x27, x28, [sp, #64]
     d80:	ldr	x25, [x22]
     d84:	str	x30, [sp, #80]
     d88:	cmp	x4, x3
     d8c:	b.ne	f98 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x240>  // b.any
     d90:	str	xzr, [x0, #1064]
     d94:	mov	x19, x0
     d98:	add	x21, x0, #0x428
     d9c:	ldr	x1, [x23, #8]
     da0:	cbz	x1, dfc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0xa4>
     da4:	mov	x3, #0x0                   	// #0
     da8:	mov	x6, #0x1                   	// #1
     dac:	rbit	x0, x1
     db0:	clz	x0, x0
     db4:	lsl	x5, x6, x0
     db8:	orr	x4, x5, x3
     dbc:	str	x4, [x19, #1064]
     dc0:	bic	x1, x1, x5
     dc4:	cmp	x4, x3
     dc8:	add	x0, x0, #0x1
     dcc:	b.eq	de8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x90>  // b.none
     dd0:	str	xzr, [x21, x0, lsl #3]
     dd4:	ldr	x3, [x2, x0, lsl #3]
     dd8:	str	x3, [x21, x0, lsl #3]
     ddc:	cbz	x1, dfc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0xa4>
     de0:	ldr	x3, [x19, #1064]
     de4:	b	dac <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x54>
     de8:	ldr	x3, [x21, x0, lsl #3]
     dec:	ldr	x4, [x2, x0, lsl #3]
     df0:	orr	x3, x3, x4
     df4:	str	x3, [x21, x0, lsl #3]
     df8:	cbnz	x1, de0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x88>
     dfc:	mov	x3, x25
     e00:	cmp	x25, #0xfff
     e04:	b.ls	fdc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x284>  // b.plast
     e08:	ldr	x3, [x19, #16]
     e0c:	and	x4, x25, #0xfffffffffffff000
     e10:	cmp	x3, x4
     e14:	b.ne	ffc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x2a4>  // b.any
     e18:	ubfx	x24, x25, #6, #6
     e1c:	mov	x5, #0x1                   	// #1
     e20:	ldr	x20, [x19, #1064]
     e24:	add	x0, x24, x5
     e28:	and	x6, x25, #0xfff
     e2c:	lsl	x24, x5, x24
     e30:	add	x11, x21, x0, lsl #3
     e34:	ands	x20, x20, x24
     e38:	lsl	x5, x5, x25
     e3c:	b.eq	e6c <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x114>  // b.none
     e40:	ldr	x0, [x21, x0, lsl #3]
     e44:	tst	x5, x0
     e48:	b.eq	e6c <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x114>  // b.none
     e4c:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     e50:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     e54:	add	x2, x2, #0x0
     e58:	add	x0, x0, #0x0
     e5c:	mov	x4, #0x0                   	// #0
     e60:	mov	x3, #0x0                   	// #0
     e64:	mov	w1, #0x13e                 	// #318
     e68:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     e6c:	add	x8, x6, x6, lsl #6
     e70:	str	x6, [sp, #176]
     e74:	add	x7, x19, #0x630
     e78:	mov	x26, #0x1                   	// #1
     e7c:	add	x3, sp, #0xb8
     e80:	add	x10, x7, x8, lsl #3
     e84:	mov	x9, x26
     e88:	cbz	x20, ec0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x168>
     e8c:	ldr	x20, [x11]
     e90:	ands	x20, x5, x20
     e94:	b.eq	ec0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x168>  // b.none
     e98:	mov	x0, #0x1                   	// #1
     e9c:	cmp	x0, x26
     ea0:	b.eq	1034 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x2dc>  // b.none
     ea4:	add	x26, x26, #0x1
     ea8:	cmp	x26, #0x15
     eac:	b.eq	11c8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x470>  // b.none
     eb0:	ldr	x20, [x19, #1064]
     eb4:	str	x6, [sp, #176]
     eb8:	and	x20, x20, x24
     ebc:	cbnz	x20, e8c <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x134>
     ec0:	sub	x4, x26, #0x1
     ec4:	mov	x28, #0x0                   	// #0
     ec8:	mov	x27, #0x0                   	// #0
     ecc:	mov	x12, #0x0                   	// #0
     ed0:	cbnz	x27, f74 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x21c>
     ed4:	cbnz	x20, ea4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x14c>
     ed8:	ldr	x27, [x10]
     edc:	cbz	x27, ea4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x14c>
     ee0:	cbnz	x28, fb0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x258>
     ee4:	mov	x1, x8
     ee8:	mov	x20, x28
     eec:	rbit	x12, x27
     ef0:	clz	x12, x12
     ef4:	add	x0, x1, x12
     ef8:	add	x0, x0, #0x1
     efc:	ldr	x2, [x7, x0, lsl #3]
     f00:	cbz	x2, 1014 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x2bc>
     f04:	add	x1, x12, x28
     f08:	lsl	x0, x9, x12
     f0c:	mov	x28, x2
     f10:	bic	x27, x27, x0
     f14:	rbit	x0, x28
     f18:	clz	x0, x0
     f1c:	add	x1, x0, x1, lsl #6
     f20:	lsl	x2, x9, x0
     f24:	bic	x28, x28, x2
     f28:	orr	x0, x28, x27
     f2c:	cbz	x0, fc8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x270>
     f30:	mov	x0, x7
     f34:	mov	x2, x21
     f38:	stp	x7, x3, [sp, #104]
     f3c:	stp	x4, x6, [sp, #120]
     f40:	stp	x10, x12, [sp, #136]
     f44:	stp	x11, x5, [sp, #152]
     f48:	str	x8, [sp, #168]
     f4c:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     f50:	mov	x9, #0x1                   	// #1
     f54:	ldp	x7, x3, [sp, #104]
     f58:	ldp	x4, x6, [sp, #120]
     f5c:	ldp	x10, x12, [sp, #136]
     f60:	ldp	x11, x5, [sp, #152]
     f64:	ldr	x8, [sp, #168]
     f68:	cbz	x0, ed0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x178>
     f6c:	add	x0, x0, x9
     f70:	b	e9c <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x144>
     f74:	lsl	x0, x20, #6
     f78:	cbz	x28, fbc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x264>
     f7c:	rbit	x1, x28
     f80:	add	x0, x12, x0
     f84:	clz	x1, x1
     f88:	lsl	x2, x9, x1
     f8c:	add	x1, x1, x0, lsl #6
     f90:	bic	x28, x28, x2
     f94:	b	f30 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x1d8>
     f98:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     f9c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     fa0:	add	x2, x2, #0x0
     fa4:	add	x0, x0, #0x0
     fa8:	mov	w1, #0x6c                  	// #108
     fac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     fb0:	mov	x1, x12
     fb4:	mov	x27, #0x0                   	// #0
     fb8:	b	f14 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x1bc>
     fbc:	add	x1, x8, x0
     fc0:	mov	x28, x0
     fc4:	b	eec <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x194>
     fc8:	add	x20, x20, #0x1
     fcc:	mov	x27, #0x0                   	// #0
     fd0:	mov	x28, #0x0                   	// #0
     fd4:	b	f30 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x1d8>
     fd8:	mov	x3, x5
     fdc:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     fe0:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
     fe4:	add	x2, x2, #0x0
     fe8:	add	x0, x0, #0x0
     fec:	mov	x4, #0x1000                	// #4096
     ff0:	mov	w1, #0x172                 	// #370
     ff4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ff8:	mov	x3, x1
     ffc:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1000:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1004:	add	x2, x2, #0x0
    1008:	add	x0, x0, #0x0
    100c:	mov	w1, #0x173                 	// #371
    1010:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1014:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1018:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    101c:	add	x2, x2, #0x0
    1020:	add	x0, x0, #0x0
    1024:	mov	x4, #0x0                   	// #0
    1028:	mov	x3, #0x0                   	// #0
    102c:	mov	w1, #0x132                 	// #306
    1030:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1034:	add	x7, sp, #0xb0
    1038:	mov	x0, x7
    103c:	add	x2, x7, x26, lsl #3
    1040:	b	1058 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x300>
    1044:	ldr	x1, [x19, #16]
    1048:	add	x3, x3, x1
    104c:	str	x3, [x0], #8
    1050:	cmp	x2, x0
    1054:	b.eq	1080 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x328>  // b.none
    1058:	ldr	x3, [x0]
    105c:	cmp	x3, #0xfff
    1060:	b.ls	1044 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x2ec>  // b.plast
    1064:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1068:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    106c:	add	x2, x2, #0x0
    1070:	add	x0, x0, #0x0
    1074:	mov	x4, #0x1000                	// #4096
    1078:	mov	w1, #0x16f                 	// #367
    107c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1080:	ldr	x3, [sp, #176]
    1084:	cmp	x25, x3
    1088:	b.ne	1200 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x4a8>  // b.any
    108c:	ldr	x3, [x22]
    1090:	cmp	x3, x25
    1094:	b.ne	11d8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x480>  // b.any
    1098:	add	x10, x19, #0x10
    109c:	mov	x0, #0x14                  	// #20
    10a0:	cmp	x26, #0x14
    10a4:	mov	x13, #0xa40                 	// #2624
    10a8:	mov	x11, #0x1146                	// #4422
    10ac:	add	x12, x10, #0x410, lsl #12
    10b0:	add	x9, x23, #0x630
    10b4:	csel	x26, x26, x0, ls  // ls = plast
    10b8:	mov	x8, #0x1                   	// #1
    10bc:	mov	w0, #0x1                   	// #1
    10c0:	movk	x13, #0x21, lsl #16
    10c4:	movk	x11, #0x4, lsl #16
    10c8:	str	w26, [x23, #1576]
    10cc:	strb	w0, [x23, #2224]
    10d0:	udiv	x0, x8, x26
    10d4:	add	x2, x7, x8, lsl #3
    10d8:	ldur	x5, [x2, #-8]
    10dc:	msub	x0, x0, x26, x8
    10e0:	cmp	x5, #0xfff
    10e4:	b.ls	fd8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x280>  // b.plast
    10e8:	and	x4, x5, #0xfffffffffffff000
    10ec:	cmp	x1, x4
    10f0:	b.ne	ff8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x2a0>  // b.any
    10f4:	ldr	x3, [x7, x0, lsl #3]
    10f8:	and	x5, x5, #0xfff
    10fc:	cmp	x3, #0xfff
    1100:	b.ls	fdc <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x284>  // b.plast
    1104:	and	x4, x3, #0xfffffffffffff000
    1108:	cmp	x1, x4
    110c:	b.ne	ff8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x2a0>  // b.any
    1110:	ldr	x4, [x12, #2608]
    1114:	and	x6, x3, #0xfff
    1118:	cbz	x4, 11f4 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x49c>
    111c:	add	x0, x19, x13
    1120:	mov	x2, #0x0                   	// #0
    1124:	b	1138 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x3e0>
    1128:	add	x2, x2, #0x1
    112c:	add	x0, x0, #0x10
    1130:	cmp	x4, x2
    1134:	b.eq	11b8 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x460>  // b.none
    1138:	ldrh	w3, [x0]
    113c:	cmp	x5, x3
    1140:	b.ne	1128 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x3d0>  // b.any
    1144:	ldrh	w3, [x0, #2]
    1148:	cmp	x6, x3
    114c:	b.ne	1128 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x3d0>  // b.any
    1150:	add	x0, x19, x2, lsl #4
    1154:	add	x0, x0, #0x210, lsl #12
    1158:	ldrsw	x4, [x0, #2636]
    115c:	ldr	w2, [x0, #2628]
    1160:	ldr	w0, [x0, #2632]
    1164:	add	x5, x5, x11
    1168:	add	x3, x6, x11
    116c:	cmp	x26, x8
    1170:	add	x8, x8, #0x1
    1174:	ldr	x5, [x10, x5, lsl #3]
    1178:	ldr	x3, [x10, x3, lsl #3]
    117c:	str	x4, [x9]
    1180:	ldr	x4, [x5, #16]
    1184:	str	x4, [x9, #8]
    1188:	ldr	x3, [x3, #16]
    118c:	str	x3, [x9, #16]
    1190:	stp	w0, w2, [x9, #24]
    1194:	add	x9, x9, #0x20
    1198:	b.ne	10d0 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x378>  // b.any
    119c:	ldp	x21, x22, [sp, #16]
    11a0:	ldp	x23, x24, [sp, #32]
    11a4:	ldp	x25, x26, [sp, #48]
    11a8:	ldp	x27, x28, [sp, #64]
    11ac:	ldr	x30, [sp, #80]
    11b0:	ldp	x19, x20, [sp], #336
    11b4:	ret
    11b8:	mov	w0, #0xffffffff            	// #-1
    11bc:	mov	x4, #0x0                   	// #0
    11c0:	mov	w2, w0
    11c4:	b	1164 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x40c>
    11c8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11cc:	add	x0, x0, #0x0
    11d0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
    11d4:	b	119c <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x444>
    11d8:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11dc:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    11e0:	mov	x4, x25
    11e4:	add	x2, x2, #0x0
    11e8:	add	x0, x0, #0x0
    11ec:	mov	w1, #0x7f                  	// #127
    11f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11f4:	mov	w0, #0xffffffff            	// #-1
    11f8:	mov	w2, w0
    11fc:	b	1164 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE+0x40c>
    1200:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1204:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1208:	mov	x4, x25
    120c:	add	x2, x2, #0x0
    1210:	add	x0, x0, #0x0
    1214:	mov	w1, #0x143                 	// #323
    1218:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    121c:	nop

0000000000001220 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb>:
    1220:	stp	x19, x20, [sp, #-64]!
    1224:	mov	x19, x0
    1228:	stp	x21, x22, [sp, #16]
    122c:	ldr	x21, [x1, #16]
    1230:	ldr	x0, [x21, #8]
    1234:	str	x30, [sp, #40]
    1238:	cbz	x0, 13fc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1dc>
    123c:	ldr	x0, [x2]
    1240:	mov	x22, x1
    1244:	mov	x20, x2
    1248:	cbz	x0, 125c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3c>
    124c:	ldr	x2, [x19, #16]
    1250:	ldr	x1, [x21, #528]
    1254:	cmp	x1, x2
    1258:	b.eq	141c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1fc>  // b.none
    125c:	add	x0, x19, #0x8
    1260:	mov	w2, #0x1                   	// #1
    1264:	str	x23, [sp, #32]
    1268:	ldxrb	w1, [x0]
    126c:	stxrb	w3, w2, [x0]
    1270:	cbnz	w3, 1268 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x48>
    1274:	dmb	ish
    1278:	tst	w1, #0xff
    127c:	b.eq	1284 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x64>  // b.none
    1280:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1284:	add	x23, x21, #0x8
    1288:	mov	x1, x21
    128c:	mov	x0, x19
    1290:	mov	x2, x20
    1294:	bl	410 <_ZN11__sanitizer2DD13MutexEnsureIDEPNS_15DDLogicalThreadEPNS_7DDMutexE>
    1298:	ldr	x1, [x19, #16]
    129c:	ldr	x3, [x23, #520]
    12a0:	ldr	x0, [x20]
    12a4:	cmp	x1, x3
    12a8:	b.ne	15a4 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x384>  // b.any
    12ac:	cmp	x0, #0xfff
    12b0:	b.ls	15c0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3a0>  // b.plast
    12b4:	and	x4, x0, #0xfffffffffffff000
    12b8:	cmp	x1, x4
    12bc:	b.ne	15e0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3c0>  // b.any
    12c0:	ldr	x2, [x21, #8]
    12c4:	ubfx	x1, x0, #6, #6
    12c8:	mov	x3, #0x1                   	// #1
    12cc:	add	x8, x1, x3
    12d0:	lsl	x5, x3, x1
    12d4:	and	x1, x0, #0xfff
    12d8:	tst	x5, x2
    12dc:	lsl	x3, x3, x0
    12e0:	b.ne	140c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1ec>  // b.any
    12e4:	add	x6, x19, #0x208, lsl #12
    12e8:	add	x4, x1, x1, lsl #6
    12ec:	add	x10, x19, #0x630
    12f0:	str	xzr, [x6, #1584]
    12f4:	ldr	x1, [x10, x4, lsl #3]
    12f8:	cbz	x1, 14a8 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x288>
    12fc:	add	x9, x19, #0x208, lsl #12
    1300:	mov	x2, #0x0                   	// #0
    1304:	add	x9, x9, #0x630
    1308:	mov	x11, #0x1                   	// #1
    130c:	rbit	x0, x1
    1310:	clz	x0, x0
    1314:	lsl	x0, x11, x0
    1318:	orr	x7, x0, x2
    131c:	cmp	x7, x2
    1320:	rbit	x2, x1
    1324:	str	x7, [x6, #1584]
    1328:	clz	x2, x2
    132c:	bic	x1, x1, x0
    1330:	add	x0, x2, #0x1
    1334:	add	x2, x2, x4
    1338:	b.eq	1490 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x270>  // b.none
    133c:	add	x2, x2, #0x1
    1340:	str	xzr, [x9, x0, lsl #3]
    1344:	ldr	x2, [x10, x2, lsl #3]
    1348:	str	x2, [x9, x0, lsl #3]
    134c:	cbz	x1, 14a8 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x288>
    1350:	ldr	x2, [x6, #1584]
    1354:	b	130c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0xec>
    1358:	ldr	x0, [x21, #8]
    135c:	mov	x4, #0x1                   	// #1
    1360:	ldr	x3, [x6, #2104]
    1364:	ands	x0, x3, x0
    1368:	b.eq	13f0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1d0>  // b.none
    136c:	rbit	x1, x0
    1370:	clz	x1, x1
    1374:	mov	x2, x1
    1378:	lsl	x1, x4, x1
    137c:	tst	x1, x3
    1380:	bic	x0, x0, x1
    1384:	b.eq	15fc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3dc>  // b.none
    1388:	add	x1, x2, #0x1
    138c:	ldr	x2, [x23, x1, lsl #3]
    1390:	ldr	x1, [x7, x1, lsl #3]
    1394:	tst	x2, x1
    1398:	b.eq	15fc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3dc>  // b.none
    139c:	ldr	x1, [x22]
    13a0:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    13a4:	add	x0, x0, #0x0
    13a8:	mov	w3, #0x0                   	// #0
    13ac:	ldr	x2, [x20]
    13b0:	ldr	x4, [x1]
    13b4:	cmp	x4, x0
    13b8:	b.ne	163c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x41c>  // b.any
    13bc:	ldr	x1, [x1, #8]
    13c0:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    13c4:	add	x0, x0, #0x0
    13c8:	mov	w4, #0x0                   	// #0
    13cc:	cmp	x1, x0
    13d0:	b.ne	161c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3fc>  // b.any
    13d4:	mov	x1, x23
    13d8:	add	x0, x19, #0x10
    13dc:	bl	0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    13e0:	mov	x2, x20
    13e4:	mov	x1, x22
    13e8:	mov	x0, x19
    13ec:	bl	d58 <_ZN11__sanitizer2DD14ReportDeadlockEPNS_10DDCallbackEPNS_7DDMutexE>
    13f0:	dmb	ish
    13f4:	strb	wzr, [x19, #8]
    13f8:	ldr	x23, [sp, #32]
    13fc:	ldp	x21, x22, [sp, #16]
    1400:	ldr	x30, [sp, #40]
    1404:	ldp	x19, x20, [sp], #64
    1408:	ret
    140c:	ldr	x0, [x23, x8, lsl #3]
    1410:	tst	x3, x0
    1414:	b.eq	12e4 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0xc4>  // b.none
    1418:	b	13f0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1d0>
    141c:	and	x2, x0, #0xfffffffffffff000
    1420:	cmp	x1, x2
    1424:	b.ne	125c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3c>  // b.any
    1428:	ldr	x6, [x21, #1568]
    142c:	cbz	x6, 13fc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1dc>
    1430:	ubfx	x3, x0, #6, #6
    1434:	mov	x1, #0x1                   	// #1
    1438:	add	x5, x19, #0x630
    143c:	add	x8, x21, #0x420
    1440:	add	x10, x3, x1
    1444:	lsl	x0, x1, x0
    1448:	lsl	x3, x1, x3
    144c:	mov	w7, #0x208                 	// #520
    1450:	mov	x1, #0x0                   	// #0
    1454:	mov	w9, #0x41                  	// #65
    1458:	lsl	x2, x1, #3
    145c:	ldr	w2, [x8, x2]
    1460:	umull	x4, w2, w7
    1464:	ldr	x4, [x5, x4]
    1468:	tst	x3, x4
    146c:	b.eq	125c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3c>  // b.none
    1470:	umaddl	x2, w2, w9, x10
    1474:	ldr	x2, [x5, x2, lsl #3]
    1478:	tst	x0, x2
    147c:	b.eq	125c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3c>  // b.none
    1480:	add	x1, x1, #0x1
    1484:	cmp	x6, x1
    1488:	b.ne	1458 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x238>  // b.any
    148c:	b	13fc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1dc>
    1490:	add	x2, x2, #0x1
    1494:	ldr	x7, [x9, x0, lsl #3]
    1498:	ldr	x2, [x10, x2, lsl #3]
    149c:	orr	x2, x7, x2
    14a0:	str	x2, [x9, x0, lsl #3]
    14a4:	cbnz	x1, 1350 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x130>
    14a8:	add	x7, x19, #0x208, lsl #12
    14ac:	add	x9, x19, #0x208, lsl #12
    14b0:	add	x7, x7, #0x838
    14b4:	add	x9, x9, #0x630
    14b8:	str	x5, [x6, #2104]
    14bc:	mov	w12, #0x40                  	// #64
    14c0:	mov	x13, #0x208                 	// #520
    14c4:	mov	x5, #0x1                   	// #1
    14c8:	str	x3, [x7, x8, lsl #3]
    14cc:	ldr	x0, [x6, #1584]
    14d0:	cbz	x0, 1358 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x138>
    14d4:	rbit	x1, x0
    14d8:	clz	x1, x1
    14dc:	add	x3, x1, #0x1
    14e0:	lsl	x4, x5, x1
    14e4:	bic	x0, x0, x4
    14e8:	str	x0, [x6, #1584]
    14ec:	ldr	x2, [x9, x3, lsl #3]
    14f0:	cbz	x2, 1658 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x438>
    14f4:	rbit	x11, x2
    14f8:	clz	x11, x11
    14fc:	lsl	x8, x5, x11
    1500:	bic	x2, x2, x8
    1504:	str	x2, [x9, x3, lsl #3]
    1508:	cbz	x2, 1514 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x2f4>
    150c:	orr	x0, x4, x0
    1510:	str	x0, [x6, #1584]
    1514:	sxtw	x11, w11
    1518:	ldr	x3, [x6, #2104]
    151c:	smaddl	x1, w1, w12, x11
    1520:	lsr	x0, x1, #6
    1524:	lsl	x2, x5, x1
    1528:	add	x4, x0, #0x1
    152c:	lsl	x0, x5, x0
    1530:	tst	x3, x0
    1534:	b.ne	1604 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x3e4>  // b.any
    1538:	orr	x0, x3, x0
    153c:	str	x0, [x6, #2104]
    1540:	str	x2, [x7, x4, lsl #3]
    1544:	mul	x0, x1, x13
    1548:	add	x1, x1, x1, lsl #6
    154c:	ldr	x2, [x10, x0]
    1550:	ldr	x11, [x6, #1584]
    1554:	cbz	x2, 14cc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x2ac>
    1558:	rbit	x4, x2
    155c:	clz	x4, x4
    1560:	mov	x0, x4
    1564:	add	x3, x0, #0x1
    1568:	lsl	x4, x5, x4
    156c:	orr	x8, x4, x11
    1570:	str	x8, [x6, #1584]
    1574:	cmp	x11, x8
    1578:	bic	x2, x2, x4
    157c:	lsl	x3, x3, #3
    1580:	b.eq	1588 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x368>  // b.none
    1584:	str	xzr, [x9, x3]
    1588:	add	x0, x0, x1
    158c:	add	x0, x0, #0x1
    1590:	ldr	x4, [x9, x3]
    1594:	ldr	x0, [x10, x0, lsl #3]
    1598:	orr	x0, x4, x0
    159c:	str	x0, [x9, x3]
    15a0:	b	1550 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x330>
    15a4:	mov	x4, x1
    15a8:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    15ac:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    15b0:	add	x2, x2, #0x0
    15b4:	add	x0, x0, #0x0
    15b8:	mov	w1, #0x6c                  	// #108
    15bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    15c0:	mov	x3, x0
    15c4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    15c8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    15cc:	add	x2, x2, #0x0
    15d0:	add	x0, x0, #0x0
    15d4:	mov	x4, #0x1000                	// #4096
    15d8:	mov	w1, #0x172                 	// #370
    15dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    15e0:	mov	x3, x1
    15e4:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    15e8:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    15ec:	add	x2, x2, #0x0
    15f0:	add	x0, x0, #0x0
    15f4:	mov	w1, #0x173                 	// #371
    15f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    15fc:	cbnz	x0, 136c <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x14c>
    1600:	b	13f0 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1d0>
    1604:	ldr	x0, [x7, x4, lsl #3]
    1608:	orr	x2, x0, x2
    160c:	str	x2, [x7, x4, lsl #3]
    1610:	cmp	x0, x2
    1614:	b.eq	14cc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x2ac>  // b.none
    1618:	b	1544 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x324>
    161c:	str	x2, [sp, #48]
    1620:	mov	x0, x22
    1624:	str	w3, [sp, #60]
    1628:	blr	x1
    162c:	mov	w4, w0
    1630:	ldr	w3, [sp, #60]
    1634:	ldr	x2, [sp, #48]
    1638:	b	13d4 <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x1b4>
    163c:	str	x2, [sp, #48]
    1640:	mov	x0, x22
    1644:	blr	x4
    1648:	mov	w3, w0
    164c:	ldr	x1, [x22]
    1650:	ldr	x2, [sp, #48]
    1654:	b	13bc <_ZN11__sanitizer2DD15MutexBeforeLockEPNS_10DDCallbackEPNS_7DDMutexEb+0x19c>
    1658:	adrp	x2, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    165c:	adrp	x0, 0 <_ZN11__sanitizer2DD20CreatePhysicalThreadEv>
    1660:	add	x2, x2, #0x0
    1664:	add	x0, x0, #0x0
    1668:	mov	x4, #0x0                   	// #0
    166c:	mov	x3, #0x0                   	// #0
    1670:	mov	w1, #0x30                  	// #48
    1674:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer10DDCallback6UnwindEv:

0000000000000000 <_ZN11__sanitizer10DDCallback6UnwindEv>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZN11__sanitizer10DDCallback9UniqueTidEv:

0000000000000000 <_ZN11__sanitizer10DDCallback9UniqueTidEv>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0:

0000000000000000 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0>:
   0:	stp	x19, x20, [sp, #-112]!
   4:	add	x1, x1, x1, lsl #6
   8:	mov	x19, #0x0                   	// #0
   c:	stp	x21, x22, [sp, #16]
  10:	mov	x22, x0
  14:	add	x21, x1, #0x1
  18:	stp	x23, x24, [sp, #32]
  1c:	sub	x23, x4, #0x1
  20:	mov	x20, #0x0                   	// #0
  24:	stp	x25, x26, [sp, #48]
  28:	mov	x26, x3
  2c:	add	x3, x3, #0x8
  30:	stp	x27, x28, [sp, #64]
  34:	add	x27, x0, x1, lsl #3
  38:	mov	x25, #0x0                   	// #0
  3c:	mov	x28, #0x0                   	// #0
  40:	mov	x24, #0x1                   	// #1
  44:	str	x30, [sp, #80]
  48:	cbnz	x23, 8c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x8c>
  4c:	mov	x1, #0x1                   	// #1
  50:	cbnz	x20, 130 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x130>
  54:	cbnz	x28, 1d4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x1d4>
  58:	ldr	x20, [x27]
  5c:	cbz	x20, 1d4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x1d4>
  60:	cbz	x19, 14c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x14c>
  64:	mov	x20, #0x0                   	// #0
  68:	rbit	x0, x19
  6c:	clz	x0, x0
  70:	lsl	x0, x1, x0
  74:	bic	x19, x19, x0
  78:	orr	x0, x19, x20
  7c:	cbnz	x0, 50 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x50>
  80:	add	x28, x28, #0x1
  84:	mov	x19, #0x0                   	// #0
  88:	b	54 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x54>
  8c:	cbnz	x20, 190 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x190>
  90:	cbnz	x28, 1d4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x1d4>
  94:	ldr	x20, [x27]
  98:	cbz	x20, 1d4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x1d4>
  9c:	cbz	x19, 1ac <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x1ac>
  a0:	mov	x1, x25
  a4:	mov	x20, #0x0                   	// #0
  a8:	rbit	x0, x19
  ac:	clz	x0, x0
  b0:	lsl	x4, x24, x0
  b4:	bic	x19, x19, x4
  b8:	orr	x4, x19, x20
  bc:	cbnz	x4, cc <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0xcc>
  c0:	add	x28, x28, #0x1
  c4:	mov	x20, #0x0                   	// #0
  c8:	mov	x19, #0x0                   	// #0
  cc:	sxtw	x0, w0
  d0:	add	x1, x0, x1, lsl #6
  d4:	str	x1, [x26, #8]
  d8:	cmp	x1, #0x1, lsl #12
  dc:	b.hi	214 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x214>  // b.pmore
  e0:	lsr	x0, x1, #12
  e4:	ubfx	x4, x1, #6, #6
  e8:	lsl	x6, x24, x4
  ec:	ldr	x5, [x2, x0, lsl #3]
  f0:	tst	x6, x5
  f4:	b.eq	170 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x170>  // b.none
  f8:	add	x0, x4, x0, lsl #6
  fc:	lsl	x4, x24, x1
 100:	add	x0, x0, #0x1
 104:	ldr	x5, [x2, x0, lsl #3]
 108:	tst	x4, x5
 10c:	b.eq	170 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x170>  // b.none
 110:	mov	x0, #0x2                   	// #2
 114:	ldp	x21, x22, [sp, #16]
 118:	ldp	x23, x24, [sp, #32]
 11c:	ldp	x25, x26, [sp, #48]
 120:	ldp	x27, x28, [sp, #64]
 124:	ldr	x30, [sp, #80]
 128:	ldp	x19, x20, [sp], #112
 12c:	ret
 130:	cbz	x19, 14c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x14c>
 134:	rbit	x0, x19
 138:	clz	x0, x0
 13c:	lsl	x0, x1, x0
 140:	bic	x19, x19, x0
 144:	cbz	x20, 54 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x54>
 148:	b	130 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x130>
 14c:	rbit	x2, x20
 150:	add	x0, x21, x28, lsl #6
 154:	clz	x2, x2
 158:	add	x0, x0, x2
 15c:	ldr	x19, [x22, x0, lsl #3]
 160:	cbz	x19, 1f4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x1f4>
 164:	lsl	x2, x1, x2
 168:	bic	x20, x20, x2
 16c:	b	68 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x68>
 170:	mov	x4, x23
 174:	mov	x0, x22
 178:	stp	x2, x3, [sp, #96]
 17c:	bl	0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0>
 180:	ldp	x2, x3, [sp, #96]
 184:	cbz	x0, 48 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x48>
 188:	add	x0, x0, #0x1
 18c:	b	1d8 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x1d8>
 190:	cbz	x19, 1ac <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x1ac>
 194:	rbit	x0, x19
 198:	add	x1, x25, x28, lsl #6
 19c:	clz	x0, x0
 1a0:	lsl	x4, x24, x0
 1a4:	bic	x19, x19, x4
 1a8:	b	cc <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0xcc>
 1ac:	rbit	x25, x20
 1b0:	clz	x25, x25
 1b4:	add	x1, x25, x28, lsl #6
 1b8:	mov	x0, x25
 1bc:	add	x4, x1, x21
 1c0:	ldr	x19, [x22, x4, lsl #3]
 1c4:	cbz	x19, 1f4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0x1f4>
 1c8:	lsl	x0, x24, x0
 1cc:	bic	x20, x20, x0
 1d0:	b	a8 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0+0xa8>
 1d4:	mov	x0, #0x0                   	// #0
 1d8:	ldp	x21, x22, [sp, #16]
 1dc:	ldp	x23, x24, [sp, #32]
 1e0:	ldp	x25, x26, [sp, #48]
 1e4:	ldp	x27, x28, [sp, #64]
 1e8:	ldr	x30, [sp, #80]
 1ec:	ldp	x19, x20, [sp], #112
 1f0:	ret
 1f4:	adrp	x2, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0>
 1f8:	adrp	x0, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0>
 1fc:	add	x2, x2, #0x0
 200:	add	x0, x0, #0x0
 204:	mov	x4, #0x0                   	// #0
 208:	mov	x3, #0x0                   	// #0
 20c:	mov	w1, #0x132                 	// #306
 210:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 214:	mov	x3, x1
 218:	adrp	x2, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0>
 21c:	adrp	x0, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm.part.0>
 220:	add	x2, x2, #0x0
 224:	add	x0, x0, #0x0
 228:	mov	x4, #0x1000                	// #4096
 22c:	mov	w1, #0x143                 	// #323
 230:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

Disassembly of section .text._ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji:

0000000000000000 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>:
   0:	stp	x19, x20, [sp, #-352]!
   4:	mov	x8, x0
   8:	ldr	x0, [x0]
   c:	ldr	x5, [x1, #520]
  10:	str	x30, [sp, #16]
  14:	cmp	x0, x5
  18:	b.eq	2c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x2c>  // b.none
  1c:	str	xzr, [x1]
  20:	str	x0, [x1, #520]
  24:	str	xzr, [x1, #1040]
  28:	str	xzr, [x1, #1560]
  2c:	cmp	x2, #0xfff
  30:	b.ls	224 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x224>  // b.plast
  34:	ldr	x5, [x8]
  38:	and	x6, x2, #0xfffffffffffff000
  3c:	cmp	x5, x6
  40:	b.ne	244 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x244>  // b.any
  44:	cmp	x5, x0
  48:	b.ne	264 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x264>  // b.any
  4c:	add	x12, x8, #0x208, lsl #12
  50:	str	xzr, [x12, #1568]
  54:	ldr	x5, [x1]
  58:	cbz	x5, c0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0xc0>
  5c:	add	x10, x8, #0x208, lsl #12
  60:	mov	x6, #0x0                   	// #0
  64:	add	x10, x10, #0x620
  68:	mov	x11, #0x1                   	// #1
  6c:	rbit	x0, x5
  70:	clz	x0, x0
  74:	lsl	x9, x11, x0
  78:	orr	x7, x9, x6
  7c:	str	x7, [x12, #1568]
  80:	bic	x5, x5, x9
  84:	cmp	x7, x6
  88:	add	x0, x0, #0x1
  8c:	b.eq	a8 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0xa8>  // b.none
  90:	str	xzr, [x10, x0, lsl #3]
  94:	ldr	x6, [x1, x0, lsl #3]
  98:	str	x6, [x10, x0, lsl #3]
  9c:	cbz	x5, bc <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0xbc>
  a0:	ldr	x6, [x12, #1568]
  a4:	b	6c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x6c>
  a8:	ldr	x6, [x10, x0, lsl #3]
  ac:	ldr	x7, [x1, x0, lsl #3]
  b0:	orr	x6, x6, x7
  b4:	str	x6, [x10, x0, lsl #3]
  b8:	cbnz	x5, a0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0xa0>
  bc:	ldr	x5, [x12, #1568]
  c0:	ubfx	x0, x2, #6, #6
  c4:	mov	x6, #0x1                   	// #1
  c8:	add	x10, x8, #0x208, lsl #12
  cc:	add	x19, x0, x6
  d0:	lsl	x16, x6, x0
  d4:	mov	x11, x6
  d8:	and	x14, x2, #0xfff
  dc:	add	x10, x10, #0x620
  e0:	add	x17, x8, #0x620
  e4:	add	x30, sp, #0x20
  e8:	mov	x0, #0x0                   	// #0
  ec:	lsl	x13, x6, x2
  f0:	mov	w20, #0x40                  	// #64
  f4:	cbz	x5, 168 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x168>
  f8:	rbit	x2, x5
  fc:	clz	x2, x2
 100:	add	x9, x2, #0x1
 104:	lsl	x7, x11, x2
 108:	bic	x5, x5, x7
 10c:	str	x5, [x12, #1568]
 110:	ldr	x6, [x10, x9, lsl #3]
 114:	cbz	x6, 2c0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x2c0>
 118:	rbit	x18, x6
 11c:	clz	x18, x18
 120:	lsl	x15, x11, x18
 124:	bic	x6, x6, x15
 128:	str	x6, [x10, x9, lsl #3]
 12c:	cbnz	x6, 28c <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x28c>
 130:	sxtw	x18, w18
 134:	smaddl	x2, w2, w20, x18
 138:	add	x7, x2, x2, lsl #6
 13c:	add	x6, x19, x7
 140:	ldr	x5, [x17, x7, lsl #3]
 144:	tst	x5, x16
 148:	b.ne	298 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x298>  // b.any
 14c:	orr	x5, x5, x16
 150:	str	x5, [x17, x7, lsl #3]
 154:	str	x13, [x17, x6, lsl #3]
 158:	cmp	x0, #0x27
 15c:	b.ls	2b0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x2b0>  // b.plast
 160:	ldr	x5, [x12, #1568]
 164:	cbnz	x5, f8 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0xf8>
 168:	cbz	x0, 218 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x218>
 16c:	add	x15, x8, #0x410, lsl #12
 170:	mov	x16, #0x10a3                	// #4259
 174:	and	w14, w14, #0xffff
 178:	add	x17, sp, #0x20
 17c:	add	x11, x1, #0x418
 180:	mov	x5, #0x1                   	// #1
 184:	mov	x12, #0x1ffff               	// #131071
 188:	movk	x16, #0x2, lsl #16
 18c:	ldr	x10, [x15, #2608]
 190:	b	1a0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x1a0>
 194:	cmp	x0, x5
 198:	add	x5, x5, #0x1
 19c:	b.eq	218 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x218>  // b.none
 1a0:	cmp	x10, x12
 1a4:	b.hi	194 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x194>  // b.pmore
 1a8:	add	x2, x17, x5, lsl #3
 1ac:	ldr	x9, [x1, #1560]
 1b0:	ldur	x7, [x2, #-8]
 1b4:	and	w13, w7, #0xffff
 1b8:	cbz	x9, 284 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x284>
 1bc:	mov	x2, #0x0                   	// #0
 1c0:	b	1d0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x1d0>
 1c4:	add	x2, x2, #0x1
 1c8:	cmp	x2, x9
 1cc:	b.eq	284 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x284>  // b.none
 1d0:	lsl	x6, x2, #3
 1d4:	ldr	w6, [x11, x6]
 1d8:	cmp	w6, w7
 1dc:	b.ne	1c4 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x1c4>  // b.any
 1e0:	add	x2, x1, x2, lsl #3
 1e4:	ldr	w7, [x2, #1052]
 1e8:	add	x6, x10, x16
 1ec:	add	x10, x10, #0x1
 1f0:	str	x10, [x15, #2608]
 1f4:	cmp	x0, x5
 1f8:	lsl	x6, x6, #4
 1fc:	add	x5, x5, #0x1
 200:	add	x2, x8, x6
 204:	strh	w13, [x8, x6]
 208:	strh	w14, [x2, #2]
 20c:	stp	w7, w3, [x2, #4]
 210:	str	w4, [x2, #12]
 214:	b.ne	1a0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x1a0>  // b.any
 218:	ldr	x30, [sp, #16]
 21c:	ldp	x19, x20, [sp], #352
 220:	ret
 224:	mov	x3, x2
 228:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 22c:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 230:	add	x0, x0, #0x0
 234:	add	x2, x2, #0x0
 238:	mov	x4, #0x1000                	// #4096
 23c:	mov	w1, #0x172                 	// #370
 240:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 244:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 248:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 24c:	mov	x4, x6
 250:	mov	x3, x5
 254:	add	x2, x2, #0x0
 258:	add	x0, x0, #0x0
 25c:	mov	w1, #0x173                 	// #371
 260:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 264:	mov	x3, x0
 268:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 26c:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 270:	mov	x4, x5
 274:	add	x2, x2, #0x0
 278:	add	x0, x0, #0x0
 27c:	mov	w1, #0x6c                  	// #108
 280:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 284:	mov	w7, #0x0                   	// #0
 288:	b	1e8 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x1e8>
 28c:	orr	x7, x7, x5
 290:	str	x7, [x12, #1568]
 294:	b	130 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x130>
 298:	ldr	x7, [x17, x6, lsl #3]
 29c:	cmp	x0, #0x27
 2a0:	orr	x5, x7, x13
 2a4:	str	x5, [x17, x6, lsl #3]
 2a8:	ccmp	x7, x5, #0x4, ls  // ls = plast
 2ac:	b.eq	160 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x160>  // b.none
 2b0:	str	x2, [x30, x0, lsl #3]
 2b4:	add	x0, x0, #0x1
 2b8:	ldr	x5, [x12, #1568]
 2bc:	b	164 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji+0x164>
 2c0:	adrp	x2, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 2c4:	adrp	x0, 0 <_ZN11__sanitizer16DeadlockDetectorINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8addEdgesEPNS_19DeadlockDetectorTLSIS4_EEmji>
 2c8:	add	x2, x2, #0x0
 2cc:	add	x0, x0, #0x0
 2d0:	mov	x4, #0x0                   	// #0
 2d4:	mov	x3, #0x0                   	// #0
 2d8:	mov	w1, #0x30                  	// #48
 2dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm:

0000000000000000 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>:
   0:	stp	x19, x20, [sp, #-112]!
   4:	stp	x23, x24, [sp, #32]
   8:	mov	x24, x0
   c:	mov	x0, x4
  10:	str	x30, [sp, #80]
  14:	cbnz	x4, 28 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x28>
  18:	ldp	x23, x24, [sp, #32]
  1c:	ldr	x30, [sp, #80]
  20:	ldp	x19, x20, [sp], #112
  24:	ret
  28:	str	x1, [x3]
  2c:	mov	x23, x3
  30:	cmp	x1, #0x1, lsl #12
  34:	b.hi	234 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x234>  // b.pmore
  38:	lsr	x3, x1, #12
  3c:	ubfx	x5, x1, #6, #6
  40:	mov	x4, #0x1                   	// #1
  44:	lsl	x7, x4, x5
  48:	ldr	x6, [x2, x3, lsl #3]
  4c:	tst	x7, x6
  50:	b.eq	74 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x74>  // b.none
  54:	add	x3, x5, x3, lsl #6
  58:	lsl	x5, x4, x1
  5c:	add	x3, x3, x4
  60:	ldr	x6, [x2, x3, lsl #3]
  64:	tst	x5, x6
  68:	b.eq	74 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x74>  // b.none
  6c:	mov	x0, x4
  70:	b	18 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x18>
  74:	add	x1, x1, x1, lsl #6
  78:	sub	x20, x0, #0x1
  7c:	add	x3, x23, #0x8
  80:	stp	x27, x28, [sp, #64]
  84:	add	x19, x24, x1, lsl #3
  88:	add	x28, x1, #0x1
  8c:	mov	x27, #0x0                   	// #0
  90:	stp	x21, x22, [sp, #16]
  94:	mov	x21, #0x0                   	// #0
  98:	mov	x22, #0x0                   	// #0
  9c:	stp	x25, x26, [sp, #48]
  a0:	mov	x25, #0x0                   	// #0
  a4:	mov	x26, #0x1                   	// #1
  a8:	cbnz	x20, ec <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xec>
  ac:	mov	x1, #0x1                   	// #1
  b0:	cbnz	x22, 130 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x130>
  b4:	cbnz	x25, 280 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x280>
  b8:	ldr	x22, [x19]
  bc:	cbz	x22, 280 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x280>
  c0:	cbz	x21, 1bc <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x1bc>
  c4:	mov	x22, #0x0                   	// #0
  c8:	rbit	x0, x21
  cc:	clz	x0, x0
  d0:	lsl	x0, x1, x0
  d4:	bic	x21, x21, x0
  d8:	orr	x0, x22, x21
  dc:	cbnz	x0, b0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xb0>
  e0:	add	x25, x25, #0x1
  e4:	mov	x21, #0x0                   	// #0
  e8:	b	b4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xb4>
  ec:	cbnz	x22, 14c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x14c>
  f0:	cbnz	x25, 280 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x280>
  f4:	ldr	x22, [x19]
  f8:	cbz	x22, 280 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x280>
  fc:	cbz	x21, 20c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x20c>
 100:	mov	x1, x27
 104:	mov	x22, #0x0                   	// #0
 108:	rbit	x0, x21
 10c:	clz	x0, x0
 110:	lsl	x4, x26, x0
 114:	bic	x21, x21, x4
 118:	orr	x4, x21, x22
 11c:	cbnz	x4, 164 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x164>
 120:	add	x25, x25, #0x1
 124:	mov	x22, #0x0                   	// #0
 128:	mov	x21, #0x0                   	// #0
 12c:	b	164 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x164>
 130:	cbz	x21, 1bc <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x1bc>
 134:	rbit	x0, x21
 138:	clz	x0, x0
 13c:	lsl	x0, x1, x0
 140:	bic	x21, x21, x0
 144:	cbz	x22, b4 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xb4>
 148:	b	130 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x130>
 14c:	cbz	x21, 20c <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x20c>
 150:	rbit	x0, x21
 154:	add	x1, x27, x25, lsl #6
 158:	clz	x0, x0
 15c:	lsl	x4, x26, x0
 160:	bic	x21, x21, x4
 164:	sxtw	x0, w0
 168:	add	x1, x0, x1, lsl #6
 16c:	str	x1, [x23, #8]
 170:	cmp	x1, #0x1, lsl #12
 174:	b.hi	240 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x240>  // b.pmore
 178:	lsr	x0, x1, #12
 17c:	ubfx	x4, x1, #6, #6
 180:	lsl	x6, x26, x4
 184:	ldr	x5, [x2, x0, lsl #3]
 188:	tst	x6, x5
 18c:	b.eq	1e0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x1e0>  // b.none
 190:	add	x0, x4, x0, lsl #6
 194:	lsl	x4, x26, x1
 198:	add	x0, x0, #0x1
 19c:	ldr	x5, [x2, x0, lsl #3]
 1a0:	tst	x4, x5
 1a4:	b.eq	1e0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x1e0>  // b.none
 1a8:	mov	x0, #0x2                   	// #2
 1ac:	ldp	x21, x22, [sp, #16]
 1b0:	ldp	x25, x26, [sp, #48]
 1b4:	ldp	x27, x28, [sp, #64]
 1b8:	b	18 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x18>
 1bc:	rbit	x2, x22
 1c0:	add	x0, x28, x25, lsl #6
 1c4:	clz	x2, x2
 1c8:	add	x0, x0, x2
 1cc:	ldr	x21, [x24, x0, lsl #3]
 1d0:	cbz	x21, 260 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x260>
 1d4:	lsl	x2, x1, x2
 1d8:	bic	x22, x22, x2
 1dc:	b	c8 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xc8>
 1e0:	mov	x4, x20
 1e4:	mov	x0, x24
 1e8:	stp	x2, x3, [sp, #96]
 1ec:	bl	0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 1f0:	ldp	x2, x3, [sp, #96]
 1f4:	cbz	x0, a8 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0xa8>
 1f8:	add	x0, x0, #0x1
 1fc:	ldp	x21, x22, [sp, #16]
 200:	ldp	x25, x26, [sp, #48]
 204:	ldp	x27, x28, [sp, #64]
 208:	b	18 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x18>
 20c:	rbit	x27, x22
 210:	clz	x27, x27
 214:	add	x1, x27, x25, lsl #6
 218:	mov	x0, x27
 21c:	add	x4, x1, x28
 220:	ldr	x21, [x24, x4, lsl #3]
 224:	cbz	x21, 260 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x260>
 228:	lsl	x0, x26, x0
 22c:	bic	x22, x22, x0
 230:	b	108 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x108>
 234:	stp	x21, x22, [sp, #16]
 238:	stp	x25, x26, [sp, #48]
 23c:	stp	x27, x28, [sp, #64]
 240:	mov	x3, x1
 244:	adrp	x2, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 248:	adrp	x0, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 24c:	add	x2, x2, #0x0
 250:	add	x0, x0, #0x0
 254:	mov	x4, #0x1000                	// #4096
 258:	mov	w1, #0x143                 	// #323
 25c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 260:	adrp	x2, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 264:	adrp	x0, 0 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm>
 268:	add	x2, x2, #0x0
 26c:	add	x0, x0, #0x0
 270:	mov	x4, #0x0                   	// #0
 274:	mov	x3, #0x0                   	// #0
 278:	mov	w1, #0x132                 	// #306
 27c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 280:	mov	x0, #0x0                   	// #0
 284:	ldp	x21, x22, [sp, #16]
 288:	ldp	x25, x26, [sp, #48]
 28c:	ldp	x27, x28, [sp, #64]
 290:	b	18 <_ZN11__sanitizer7BVGraphINS_17TwoLevelBitVectorILm1ENS_14BasicBitVectorImEEEEE8findPathEmRKS4_Pmm+0x18>

sanitizer_deadlock_detector2.o:     file format elf64-littleaarch64


sanitizer_errno.o:     file format elf64-littleaarch64


sanitizer_file.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>:
   0:	mov	x2, x1
   4:	mov	x4, #0x0                   	// #0
   8:	mov	x1, x0
   c:	mov	x3, #0x0                   	// #0
  10:	mov	w0, #0x2                   	// #2
  14:	b	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>

0000000000000018 <_ZN11__sanitizer8RawWriteEPKc>:
  18:	stp	x19, x30, [sp, #-16]!
  1c:	mov	x19, x0
  20:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  24:	mov	x2, x0
  28:	mov	x1, x19
  2c:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
  30:	ldp	x19, x30, [sp], #16
  34:	add	x0, x0, #0x0
  38:	b	0 <_ZN11__sanitizer10ReportFile5WriteEPKcm>
  3c:	nop

0000000000000040 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>:
  40:	stp	x19, x20, [sp, #-32]!
  44:	mov	x19, x0
  48:	ldr	x0, [x0]
  4c:	str	x30, [sp, #24]
  50:	ldrb	w3, [x0]
  54:	and	x3, x3, #0xff
  58:	cmp	x3, #0x1
  5c:	b.ne	160 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x120>  // b.any
  60:	ldr	w0, [x19, #8]
  64:	sub	w0, w0, #0x1
  68:	cmp	w0, #0x1
  6c:	b.ls	118 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xd8>  // b.plast
  70:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
  74:	mov	x20, x0
  78:	adrp	x1, 0 <_ZN11__sanitizer23stoptheworld_tracer_pidE>
  7c:	ldr	x1, [x1]
  80:	ldr	x0, [x1]
  84:	cmp	x0, x20
  88:	b.eq	124 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xe4>  // b.none
  8c:	ldr	w0, [x19, #8]
  90:	cmn	w0, #0x1
  94:	b.eq	13c <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xfc>  // b.none
  98:	ldr	x1, [x19, #8208]
  9c:	cmp	x1, x20
  a0:	b.eq	118 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xd8>  // b.none
  a4:	str	x21, [sp, #16]
  a8:	bl	0 <_ZN11__sanitizer9CloseFileEi>
  ac:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
  b0:	cmp	x0, #0x0
  b4:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  b8:	mov	x4, x0
  bc:	mov	x0, #0x100c                	// #4108
  c0:	add	x21, x19, x0
  c4:	ldr	x0, [x1]
  c8:	cset	w1, ne  // ne = any
  cc:	add	x3, x19, #0xc
  d0:	ldrb	w0, [x0, #48]
  d4:	tst	w1, w0
  d8:	b.ne	144 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x104>  // b.any
  dc:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
  e0:	mov	x4, x20
  e4:	add	x2, x2, #0x0
  e8:	mov	x0, x21
  ec:	mov	x1, #0x1000                	// #4096
  f0:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
  f4:	mov	x0, x21
  f8:	mov	x2, #0x0                   	// #0
  fc:	mov	w1, #0x1                   	// #1
 100:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 104:	str	w0, [x19, #8]
 108:	cmn	w0, #0x1
 10c:	b.eq	180 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x140>  // b.none
 110:	ldr	x21, [sp, #16]
 114:	str	x20, [x19, #8208]
 118:	ldr	x30, [sp, #24]
 11c:	ldp	x19, x20, [sp], #32
 120:	ret
 124:	adrp	x0, 0 <_ZN11__sanitizer24stoptheworld_tracer_ppidE>
 128:	ldr	x0, [x0]
 12c:	ldr	x20, [x0]
 130:	ldr	w0, [x19, #8]
 134:	cmn	w0, #0x1
 138:	b.ne	98 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x58>  // b.any
 13c:	str	x21, [sp, #16]
 140:	b	ac <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0x6c>
 144:	mov	x5, x20
 148:	mov	x0, x21
 14c:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 150:	mov	x1, #0x1000                	// #4096
 154:	add	x2, x2, #0x0
 158:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 15c:	b	f4 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv+0xb4>
 160:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 164:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 168:	add	x2, x2, #0x0
 16c:	add	x0, x0, #0x0
 170:	mov	x4, #0x1                   	// #1
 174:	mov	w1, #0x2a                  	// #42
 178:	str	x21, [sp, #16]
 17c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 180:	adrp	x19, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 184:	add	x19, x19, #0x0
 188:	mov	x0, x19
 18c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 190:	mov	x1, x19
 194:	mov	x2, x0
 198:	mov	x4, #0x0                   	// #0
 19c:	mov	x3, #0x0                   	// #0
 1a0:	mov	w0, #0x2                   	// #2
 1a4:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
 1a8:	mov	x0, x21
 1ac:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 1b0:	mov	x1, x21
 1b4:	mov	x2, x0
 1b8:	mov	x4, #0x0                   	// #0
 1bc:	mov	x3, #0x0                   	// #0
 1c0:	mov	w0, #0x2                   	// #2
 1c4:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
 1c8:	bl	0 <_ZN11__sanitizer3DieEv>
 1cc:	nop

00000000000001d0 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc>:
 1d0:	cbz	x1, 2c4 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xf4>
 1d4:	sub	sp, sp, #0x30
 1d8:	stp	x19, x20, [sp, #16]
 1dc:	mov	x19, x0
 1e0:	mov	x20, x1
 1e4:	mov	x0, x1
 1e8:	stp	x21, x30, [sp, #32]
 1ec:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 1f0:	cmp	x0, #0xf9c
 1f4:	b.hi	2e4 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x114>  // b.pmore
 1f8:	ldr	x21, [x19]
 1fc:	mov	w1, #0x1                   	// #1
 200:	ldxrb	w0, [x21]
 204:	stxrb	w2, w1, [x21]
 208:	cbnz	w2, 200 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x30>
 20c:	dmb	ish
 210:	tst	w0, #0xff
 214:	b.eq	220 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x50>  // b.none
 218:	mov	x0, x21
 21c:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 220:	ldr	w0, [x19, #8]
 224:	sub	w1, w0, #0x1
 228:	cmp	w1, #0x1
 22c:	ccmn	w0, #0x1, #0x4, hi  // hi = pmore
 230:	b.ne	270 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xa0>  // b.any
 234:	mov	w0, #0xffffffff            	// #-1
 238:	str	w0, [x19, #8]
 23c:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 240:	mov	x0, x20
 244:	add	x1, x1, #0x0
 248:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 24c:	cbnz	w0, 290 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xc0>
 250:	mov	w0, #0x1                   	// #1
 254:	str	w0, [x19, #8]
 258:	dmb	ish
 25c:	strb	wzr, [x21]
 260:	ldp	x19, x20, [sp, #16]
 264:	ldp	x21, x30, [sp, #32]
 268:	add	sp, sp, #0x30
 26c:	ret
 270:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 274:	mov	w0, #0xffffffff            	// #-1
 278:	str	w0, [x19, #8]
 27c:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 280:	mov	x0, x20
 284:	add	x1, x1, #0x0
 288:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 28c:	cbz	w0, 250 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x80>
 290:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 294:	mov	x0, x20
 298:	add	x1, x1, #0x0
 29c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 2a0:	cbnz	w0, 2c8 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0xf8>
 2a4:	mov	w0, #0x2                   	// #2
 2a8:	str	w0, [x19, #8]
 2ac:	dmb	ish
 2b0:	strb	wzr, [x21]
 2b4:	ldp	x19, x20, [sp, #16]
 2b8:	ldp	x21, x30, [sp, #32]
 2bc:	add	sp, sp, #0x30
 2c0:	ret
 2c4:	ret
 2c8:	mov	x3, x20
 2cc:	add	x0, x19, #0xc
 2d0:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 2d4:	mov	x1, #0x1000                	// #4096
 2d8:	add	x2, x2, #0x0
 2dc:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 2e0:	b	258 <_ZN11__sanitizer10ReportFile13SetReportPathEPKc+0x88>
 2e4:	ldrb	w7, [x20, #6]
 2e8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 2ec:	ldrb	w6, [x20, #5]
 2f0:	add	x0, x0, #0x0
 2f4:	ldrb	w5, [x20, #4]
 2f8:	ldrb	w4, [x20, #3]
 2fc:	ldrb	w3, [x20, #2]
 300:	ldrb	w2, [x20, #1]
 304:	ldrb	w1, [x20]
 308:	ldrb	w8, [x20, #7]
 30c:	str	w8, [sp]
 310:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 314:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000318 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>:
 318:	stp	x19, x20, [sp, #-128]!
 31c:	mov	w19, #0x1                   	// #1
 320:	str	x30, [sp, #80]
 324:	str	xzr, [x1]
 328:	str	xzr, [x2]
 32c:	str	xzr, [x3]
 330:	cbz	x4, 43c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x124>
 334:	adrp	x19, 0 <_ZN11__sanitizer14PageSizeCachedE>
 338:	stp	x21, x22, [sp, #16]
 33c:	mov	x21, x1
 340:	ldr	x19, [x19]
 344:	stp	x23, x24, [sp, #32]
 348:	mov	x22, x4
 34c:	stp	x25, x26, [sp, #48]
 350:	mov	x23, x5
 354:	mov	x26, x0
 358:	ldr	x20, [x19]
 35c:	stp	x27, x28, [sp, #64]
 360:	mov	x25, x2
 364:	mov	x28, x3
 368:	mov	x0, #0x0                   	// #0
 36c:	cbz	x20, 478 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x160>
 370:	cmp	x20, x22
 374:	add	x24, sp, #0x78
 378:	csel	x20, x20, x22, ls  // ls = plast
 37c:	adrp	x27, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 380:	add	x1, x27, #0x0
 384:	str	x1, [sp, #104]
 388:	ldr	x1, [x25]
 38c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 390:	ldr	x1, [sp, #104]
 394:	mov	w2, #0x0                   	// #0
 398:	mov	x0, x20
 39c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3a0:	str	x0, [x21]
 3a4:	str	x20, [x25]
 3a8:	mov	x2, x23
 3ac:	mov	x0, x26
 3b0:	mov	w1, #0x0                   	// #0
 3b4:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 3b8:	mov	w27, w0
 3bc:	cmn	w0, #0x1
 3c0:	b.eq	48c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x174>  // b.none
 3c4:	str	xzr, [x28]
 3c8:	mov	x1, #0x0                   	// #0
 3cc:	cbnz	x20, 3dc <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0xc4>
 3d0:	b	44c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x134>
 3d4:	cmp	x1, x20
 3d8:	b.cs	44c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x134>  // b.hs, b.nlast
 3dc:	ldr	x5, [x21]
 3e0:	sub	x2, x20, x1
 3e4:	mov	x4, x23
 3e8:	mov	x3, x24
 3ec:	mov	w0, w27
 3f0:	add	x1, x5, x1
 3f4:	bl	0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>
 3f8:	ands	w19, w0, #0xff
 3fc:	b.eq	468 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x150>  // b.none
 400:	ldr	x1, [x28]
 404:	ldr	x2, [sp, #120]
 408:	add	x1, x2, x1
 40c:	str	x1, [x28]
 410:	cmp	x1, x22
 414:	cset	w19, eq  // eq = none
 418:	cmp	x2, #0x0
 41c:	csinc	w19, w19, wzr, ne  // ne = any
 420:	cbz	w19, 3d4 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0xbc>
 424:	mov	w0, w27
 428:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 42c:	ldp	x21, x22, [sp, #16]
 430:	ldp	x23, x24, [sp, #32]
 434:	ldp	x25, x26, [sp, #48]
 438:	ldp	x27, x28, [sp, #64]
 43c:	mov	w0, w19
 440:	ldr	x30, [sp, #80]
 444:	ldp	x19, x20, [sp], #128
 448:	ret
 44c:	mov	w0, w27
 450:	lsl	x20, x20, #1
 454:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 458:	cmp	x20, x22
 45c:	csel	x20, x20, x22, ls  // ls = plast
 460:	ldr	x0, [x21]
 464:	b	388 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x70>
 468:	ldr	x0, [x21]
 46c:	ldr	x1, [x25]
 470:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 474:	b	424 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x10c>
 478:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 47c:	mov	x20, x0
 480:	ldr	x0, [x21]
 484:	str	x20, [x19]
 488:	b	370 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x58>
 48c:	ldr	x0, [x21]
 490:	mov	w19, #0x0                   	// #0
 494:	ldr	x1, [x25]
 498:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 49c:	ldp	x21, x22, [sp, #16]
 4a0:	ldp	x23, x24, [sp, #32]
 4a4:	ldp	x25, x26, [sp, #48]
 4a8:	ldp	x27, x28, [sp, #64]
 4ac:	b	43c <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi+0x124>

00000000000004b0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi>:
 4b0:	stp	x19, x20, [sp, #-144]!
 4b4:	stp	x27, x28, [sp, #64]
 4b8:	str	x30, [sp, #80]
 4bc:	str	xzr, [x1, #16]
 4c0:	cbz	x2, 63c <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x18c>
 4c4:	stp	x25, x26, [sp, #48]
 4c8:	adrp	x25, 0 <_ZN11__sanitizer14PageSizeCachedE>
 4cc:	mov	x20, x1
 4d0:	stp	x23, x24, [sp, #32]
 4d4:	mov	x19, x0
 4d8:	ldr	x24, [x25]
 4dc:	stp	x21, x22, [sp, #16]
 4e0:	mov	x21, x2
 4e4:	mov	x22, x3
 4e8:	ldr	x23, [x24]
 4ec:	cbz	x23, 5f0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x140>
 4f0:	mov	x0, x19
 4f4:	mov	x2, x22
 4f8:	mov	w1, #0x0                   	// #0
 4fc:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 500:	mov	w27, w0
 504:	cmn	w0, #0x1
 508:	b.eq	618 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x168>  // b.none
 50c:	ldr	x0, [x25]
 510:	str	x0, [sp, #104]
 514:	ldr	x3, [x20, #16]
 518:	adrp	x26, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 51c:	mov	x19, #0x0                   	// #0
 520:	add	x24, sp, #0x88
 524:	add	x26, x26, #0x0
 528:	cmp	x3, x19
 52c:	b.ls	580 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0xd0>  // b.plast
 530:	cmp	x21, x3
 534:	b.cc	5d4 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x124>  // b.lo, b.ul, b.last
 538:	ldr	x1, [x20]
 53c:	sub	x2, x3, x19
 540:	mov	x4, x22
 544:	mov	x3, x24
 548:	mov	w0, w27
 54c:	add	x1, x1, x19
 550:	bl	0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>
 554:	ands	w28, w0, #0xff
 558:	b.eq	730 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x280>  // b.none
 55c:	ldr	x1, [sp, #136]
 560:	add	x3, x1, x19
 564:	cbz	x1, 6d4 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x224>
 568:	cmp	x21, x3
 56c:	b.ls	6d8 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x228>  // b.plast
 570:	mov	x19, x3
 574:	ldr	x3, [x20, #16]
 578:	cmp	x3, x19
 57c:	b.hi	530 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x80>  // b.pmore
 580:	lsl	x28, x19, #1
 584:	cmp	x28, x23
 588:	csel	x28, x28, x23, cs  // cs = hs, nlast
 58c:	cmp	x28, x21
 590:	csel	x28, x28, x21, ls  // ls = plast
 594:	cmp	x28, x3
 598:	b.ls	5bc <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x10c>  // b.plast
 59c:	ldr	x0, [x20, #8]
 5a0:	cmp	x28, x0
 5a4:	b.hi	674 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x1c4>  // b.pmore
 5a8:	ldr	x4, [x20]
 5ac:	add	x0, x4, x3
 5b0:	sub	x2, x28, x3
 5b4:	mov	w1, #0x0                   	// #0
 5b8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 5bc:	str	x28, [x20, #16]
 5c0:	cmp	x28, x19
 5c4:	b.ls	654 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x1a4>  // b.plast
 5c8:	mov	x3, x28
 5cc:	cmp	x21, x3
 5d0:	b.cs	538 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x88>  // b.hs, b.nlast
 5d4:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 5d8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 5dc:	mov	x4, x21
 5e0:	add	x2, x2, #0x0
 5e4:	add	x0, x0, #0x0
 5e8:	mov	w1, #0x99                  	// #153
 5ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5f0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 5f4:	mov	x23, x0
 5f8:	mov	x2, x22
 5fc:	mov	w1, #0x0                   	// #0
 600:	str	x0, [x24]
 604:	mov	x0, x19
 608:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 60c:	mov	w27, w0
 610:	cmn	w0, #0x1
 614:	b.ne	50c <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x5c>  // b.any
 618:	mov	w28, #0x0                   	// #0
 61c:	mov	w0, w28
 620:	ldp	x21, x22, [sp, #16]
 624:	ldp	x23, x24, [sp, #32]
 628:	ldp	x25, x26, [sp, #48]
 62c:	ldp	x27, x28, [sp, #64]
 630:	ldr	x30, [sp, #80]
 634:	ldp	x19, x20, [sp], #144
 638:	ret
 63c:	mov	w28, #0x1                   	// #1
 640:	mov	w0, w28
 644:	ldp	x27, x28, [sp, #64]
 648:	ldr	x30, [sp, #80]
 64c:	ldp	x19, x20, [sp], #144
 650:	ret
 654:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 658:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 65c:	mov	x4, x28
 660:	mov	x3, x19
 664:	add	x2, x2, #0x0
 668:	add	x0, x0, #0x0
 66c:	mov	w1, #0x98                  	// #152
 670:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 674:	ldr	x0, [sp, #104]
 678:	ldr	x0, [x0]
 67c:	cbz	x0, 748 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x298>
 680:	sub	x1, x0, #0x1
 684:	tst	x1, x0
 688:	b.ne	7e0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x330>  // b.any
 68c:	add	x1, x28, x1
 690:	neg	x0, x0
 694:	and	x6, x1, x0
 698:	mov	w2, #0x0                   	// #0
 69c:	mov	x0, x6
 6a0:	mov	x1, x26
 6a4:	str	x6, [sp, #120]
 6a8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 6ac:	str	x0, [sp, #112]
 6b0:	ldr	x1, [x20]
 6b4:	ldr	x2, [x20, #16]
 6b8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 6bc:	ldp	x0, x1, [x20]
 6c0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 6c4:	ldp	x4, x6, [sp, #112]
 6c8:	stp	x4, x6, [x20]
 6cc:	ldr	x3, [x20, #16]
 6d0:	b	5ac <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0xfc>
 6d4:	mov	x3, x19
 6d8:	mov	w0, w27
 6dc:	str	x3, [sp, #104]
 6e0:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 6e4:	ldr	x2, [x20, #16]
 6e8:	ldr	x3, [sp, #104]
 6ec:	cmp	x3, x2
 6f0:	b.ls	71c <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x26c>  // b.plast
 6f4:	ldr	x0, [x20, #8]
 6f8:	cmp	x3, x0
 6fc:	b.hi	758 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x2a8>  // b.pmore
 700:	ldr	x19, [x20]
 704:	add	x0, x19, x2
 708:	mov	w1, #0x0                   	// #0
 70c:	sub	x2, x3, x2
 710:	str	x3, [sp, #104]
 714:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 718:	ldr	x3, [sp, #104]
 71c:	ldp	x21, x22, [sp, #16]
 720:	ldp	x23, x24, [sp, #32]
 724:	ldp	x25, x26, [sp, #48]
 728:	str	x3, [x20, #16]
 72c:	b	640 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x190>
 730:	mov	w0, w27
 734:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 738:	ldp	x21, x22, [sp, #16]
 73c:	ldp	x23, x24, [sp, #32]
 740:	ldp	x25, x26, [sp, #48]
 744:	b	640 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x190>
 748:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 74c:	ldr	x1, [sp, #104]
 750:	str	x0, [x1]
 754:	b	680 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x1d0>
 758:	cbz	x3, 7c0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x310>
 75c:	ldr	x25, [x25]
 760:	ldr	x0, [x25]
 764:	cbz	x0, 808 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x358>
 768:	sub	x1, x0, #0x1
 76c:	tst	x0, x1
 770:	b.ne	7e0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x330>  // b.any
 774:	add	x1, x3, x1
 778:	neg	x0, x0
 77c:	and	x21, x1, x0
 780:	mov	w2, #0x0                   	// #0
 784:	mov	x0, x21
 788:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 78c:	add	x1, x1, #0x0
 790:	str	x3, [sp, #104]
 794:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 798:	mov	x19, x0
 79c:	ldr	x1, [x20]
 7a0:	ldr	x2, [x20, #16]
 7a4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 7a8:	ldp	x0, x1, [x20]
 7ac:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 7b0:	stp	x19, x21, [x20]
 7b4:	ldr	x2, [x20, #16]
 7b8:	ldr	x3, [sp, #104]
 7bc:	b	704 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x254>
 7c0:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 7c4:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 7c8:	add	x2, x2, #0x0
 7cc:	add	x0, x0, #0x0
 7d0:	mov	x4, #0x0                   	// #0
 7d4:	mov	x3, #0x0                   	// #0
 7d8:	mov	w1, #0x1fc                 	// #508
 7dc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 7e0:	adrp	x19, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 7e4:	add	x19, x19, #0x0
 7e8:	mov	x0, x19
 7ec:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 7f0:	mov	x1, x19
 7f4:	mov	x2, x0
 7f8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 7fc:	add	x0, x0, #0x0
 800:	bl	0 <_ZN11__sanitizer10ReportFile5WriteEPKcm>
 804:	bl	0 <_ZN11__sanitizer3DieEv>
 808:	str	x3, [sp, #104]
 80c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 810:	str	x0, [x25]
 814:	ldr	x3, [sp, #104]
 818:	b	768 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi+0x2b8>
 81c:	nop

0000000000000820 <_ZN11__sanitizer16FindPathToBinaryEPKc>:
 820:	stp	x19, x20, [sp, #-80]!
 824:	stp	x23, x24, [sp, #32]
 828:	mov	x23, x0
 82c:	str	x30, [sp, #72]
 830:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 834:	tst	w0, #0xff
 838:	b.eq	850 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x30>  // b.none
 83c:	mov	x0, x23
 840:	ldp	x23, x24, [sp, #32]
 844:	ldr	x30, [sp, #72]
 848:	ldp	x19, x20, [sp], #80
 84c:	b	0 <_ZN11__sanitizer15internal_strdupEPKc>
 850:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 854:	add	x0, x0, #0x0
 858:	stp	x21, x22, [sp, #16]
 85c:	bl	0 <_ZN11__sanitizer6GetEnvEPKc>
 860:	mov	x21, x0
 864:	cbz	x0, 9a0 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x180>
 868:	adrp	x19, 0 <_ZN11__sanitizer14PageSizeCachedE>
 86c:	mov	x0, x23
 870:	stp	x25, x26, [sp, #48]
 874:	str	x27, [sp, #64]
 878:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 87c:	ldr	x20, [x19]
 880:	mov	x24, x0
 884:	ldr	x0, [x20]
 888:	cbz	x0, 9b8 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x198>
 88c:	sub	x1, x0, #0x1
 890:	tst	x1, x0
 894:	b.ne	a7c <_ZN11__sanitizer16FindPathToBinaryEPKc+0x25c>  // b.any
 898:	add	x25, x0, #0xfff
 89c:	neg	x0, x0
 8a0:	and	x25, x25, x0
 8a4:	mov	w2, #0x0                   	// #0
 8a8:	mov	x0, x25
 8ac:	adrp	x20, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 8b0:	add	x1, x20, #0x0
 8b4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 8b8:	mov	x2, #0x0                   	// #0
 8bc:	mov	x1, #0x0                   	// #0
 8c0:	mov	x22, x0
 8c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 8c8:	mov	x1, #0x0                   	// #0
 8cc:	mov	x0, #0x0                   	// #0
 8d0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 8d4:	cmp	x25, #0xfff
 8d8:	b.ls	a20 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x200>  // b.plast
 8dc:	mov	x0, x22
 8e0:	mov	w26, #0x2f                  	// #47
 8e4:	mov	x2, #0x1000                	// #4096
 8e8:	mov	w1, #0x0                   	// #0
 8ec:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 8f0:	b	900 <_ZN11__sanitizer16FindPathToBinaryEPKc+0xe0>
 8f4:	ldrb	w0, [x19]
 8f8:	cbz	w0, 988 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x168>
 8fc:	add	x21, x19, #0x1
 900:	mov	x0, x21
 904:	mov	w1, #0x3a                  	// #58
 908:	bl	0 <_ZN11__sanitizer18internal_strchrnulEPKci>
 90c:	sub	x20, x0, x21
 910:	add	x27, x24, x20
 914:	mov	x19, x0
 918:	add	x0, x27, #0x2
 91c:	cmp	x0, #0x1, lsl #12
 920:	b.hi	8f4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0xd4>  // b.pmore
 924:	mov	x1, x21
 928:	mov	x2, x20
 92c:	mov	x0, x22
 930:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 934:	cmp	x20, #0xfff
 938:	b.hi	9c4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x1a4>  // b.pmore
 93c:	strb	w26, [x22, x20]
 940:	add	x4, x20, #0x1
 944:	b.eq	9e4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x1c4>  // b.none
 948:	add	x0, x22, x4
 94c:	mov	x2, x24
 950:	mov	x1, x23
 954:	add	x27, x27, #0x1
 958:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 95c:	cmp	x27, #0xfff
 960:	b.hi	a00 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x1e0>  // b.pmore
 964:	strb	wzr, [x22, x27]
 968:	mov	x0, x22
 96c:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 970:	tst	w0, #0xff
 974:	b.eq	8f4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0xd4>  // b.none
 978:	mov	x0, x22
 97c:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 980:	mov	x21, x0
 984:	b	98c <_ZN11__sanitizer16FindPathToBinaryEPKc+0x16c>
 988:	mov	x21, #0x0                   	// #0
 98c:	mov	x1, x25
 990:	mov	x0, x22
 994:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 998:	ldp	x25, x26, [sp, #48]
 99c:	ldr	x27, [sp, #64]
 9a0:	mov	x0, x21
 9a4:	ldp	x21, x22, [sp, #16]
 9a8:	ldp	x23, x24, [sp, #32]
 9ac:	ldr	x30, [sp, #72]
 9b0:	ldp	x19, x20, [sp], #80
 9b4:	ret
 9b8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 9bc:	str	x0, [x20]
 9c0:	b	88c <_ZN11__sanitizer16FindPathToBinaryEPKc+0x6c>
 9c4:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 9c8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 9cc:	mov	x3, x20
 9d0:	add	x2, x2, #0x0
 9d4:	add	x0, x0, #0x0
 9d8:	mov	x4, #0x1000                	// #4096
 9dc:	mov	w1, #0x1b6                 	// #438
 9e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 9e4:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 9e8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 9ec:	add	x2, x2, #0x0
 9f0:	add	x0, x0, #0x0
 9f4:	mov	x3, x4
 9f8:	mov	w1, #0x1b6                 	// #438
 9fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a00:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 a04:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 a08:	add	x2, x2, #0x0
 a0c:	add	x0, x0, #0x0
 a10:	mov	x4, #0x1000                	// #4096
 a14:	mov	x3, #0xffffffffffffffff    	// #-1
 a18:	mov	w1, #0x1b6                 	// #438
 a1c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 a20:	ldr	x19, [x19]
 a24:	ldr	x0, [x19]
 a28:	cbz	x0, aa4 <_ZN11__sanitizer16FindPathToBinaryEPKc+0x284>
 a2c:	sub	x1, x0, #0x1
 a30:	tst	x1, x0
 a34:	b.ne	a7c <_ZN11__sanitizer16FindPathToBinaryEPKc+0x25c>  // b.any
 a38:	add	x19, x0, #0xfff
 a3c:	neg	x0, x0
 a40:	and	x19, x19, x0
 a44:	add	x1, x20, #0x0
 a48:	mov	x0, x19
 a4c:	mov	w2, #0x0                   	// #0
 a50:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 a54:	mov	x20, x0
 a58:	mov	x2, #0x0                   	// #0
 a5c:	mov	x1, x22
 a60:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 a64:	mov	x1, x25
 a68:	mov	x0, x22
 a6c:	mov	x25, x19
 a70:	mov	x22, x20
 a74:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a78:	b	8dc <_ZN11__sanitizer16FindPathToBinaryEPKc+0xbc>
 a7c:	adrp	x19, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 a80:	add	x19, x19, #0x0
 a84:	mov	x0, x19
 a88:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 a8c:	mov	x1, x19
 a90:	mov	x2, x0
 a94:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 a98:	add	x0, x0, #0x0
 a9c:	bl	0 <_ZN11__sanitizer10ReportFile5WriteEPKcm>
 aa0:	bl	0 <_ZN11__sanitizer3DieEv>
 aa4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 aa8:	str	x0, [x19]
 aac:	b	a2c <_ZN11__sanitizer16FindPathToBinaryEPKc+0x20c>

0000000000000ab0 <__sanitizer_set_report_path>:
 ab0:	cbz	x0, bac <__sanitizer_set_report_path+0xfc>
 ab4:	sub	sp, sp, #0x30
 ab8:	stp	x19, x20, [sp, #16]
 abc:	mov	x19, x0
 ac0:	stp	x21, x30, [sp, #32]
 ac4:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 ac8:	cmp	x0, #0xf9c
 acc:	b.hi	bd0 <__sanitizer_set_report_path+0x120>  // b.pmore
 ad0:	adrp	x20, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 ad4:	mov	w1, #0x1                   	// #1
 ad8:	ldr	x21, [x20]
 adc:	ldxrb	w0, [x21]
 ae0:	stxrb	w2, w1, [x21]
 ae4:	cbnz	w2, adc <__sanitizer_set_report_path+0x2c>
 ae8:	dmb	ish
 aec:	tst	w0, #0xff
 af0:	b.eq	afc <__sanitizer_set_report_path+0x4c>  // b.none
 af4:	mov	x0, x21
 af8:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 afc:	add	x0, x20, #0x0
 b00:	ldr	w0, [x0, #8]
 b04:	sub	w1, w0, #0x1
 b08:	cmp	w1, #0x1
 b0c:	ccmn	w0, #0x1, #0x4, hi  // hi = pmore
 b10:	b.ne	b54 <__sanitizer_set_report_path+0xa4>  // b.any
 b14:	add	x20, x20, #0x0
 b18:	mov	w2, #0xffffffff            	// #-1
 b1c:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 b20:	mov	x0, x19
 b24:	add	x1, x1, #0x0
 b28:	str	w2, [x20, #8]
 b2c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 b30:	cbnz	w0, b78 <__sanitizer_set_report_path+0xc8>
 b34:	mov	w0, #0x1                   	// #1
 b38:	str	w0, [x20, #8]
 b3c:	dmb	ish
 b40:	strb	wzr, [x21]
 b44:	ldp	x19, x20, [sp, #16]
 b48:	ldp	x21, x30, [sp, #32]
 b4c:	add	sp, sp, #0x30
 b50:	ret
 b54:	bl	0 <_ZN11__sanitizer9CloseFileEi>
 b58:	add	x20, x20, #0x0
 b5c:	mov	w2, #0xffffffff            	// #-1
 b60:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 b64:	mov	x0, x19
 b68:	add	x1, x1, #0x0
 b6c:	str	w2, [x20, #8]
 b70:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 b74:	cbz	w0, b34 <__sanitizer_set_report_path+0x84>
 b78:	adrp	x1, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 b7c:	mov	x0, x19
 b80:	add	x1, x1, #0x0
 b84:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 b88:	cbnz	w0, bb0 <__sanitizer_set_report_path+0x100>
 b8c:	mov	w0, #0x2                   	// #2
 b90:	str	w0, [x20, #8]
 b94:	dmb	ish
 b98:	strb	wzr, [x21]
 b9c:	ldp	x19, x20, [sp, #16]
 ba0:	ldp	x21, x30, [sp, #32]
 ba4:	add	sp, sp, #0x30
 ba8:	ret
 bac:	ret
 bb0:	mov	x3, x19
 bb4:	adrp	x2, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 bb8:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 bbc:	add	x2, x2, #0x0
 bc0:	mov	x1, #0x1000                	// #4096
 bc4:	add	x0, x0, #0x0
 bc8:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 bcc:	b	b3c <__sanitizer_set_report_path+0x8c>
 bd0:	ldrb	w7, [x19, #6]
 bd4:	adrp	x0, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 bd8:	ldrb	w6, [x19, #5]
 bdc:	add	x0, x0, #0x0
 be0:	ldrb	w5, [x19, #4]
 be4:	ldrb	w4, [x19, #3]
 be8:	ldrb	w3, [x19, #2]
 bec:	ldrb	w2, [x19, #1]
 bf0:	ldrb	w1, [x19]
 bf4:	ldrb	w8, [x19, #7]
 bf8:	str	w8, [sp]
 bfc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 c00:	bl	0 <_ZN11__sanitizer3DieEv>
 c04:	nop

0000000000000c08 <__sanitizer_set_report_fd>:
 c08:	stp	x19, x30, [sp, #-16]!
 c0c:	adrp	x19, 0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
 c10:	add	x19, x19, #0x0
 c14:	str	w0, [x19, #8]
 c18:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 c1c:	str	x0, [x19, #8208]
 c20:	ldp	x19, x30, [sp], #16
 c24:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

sanitizer_flag_parser.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	stp	x21, x22, [sp, #16]
   8:	adrp	x21, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
   c:	add	x19, x21, #0x0
  10:	str	x30, [sp, #32]
  14:	ldr	w1, [x19, #160]
  18:	cbnz	w1, 2c <_ZN11__sanitizer23ReportUnrecognizedFlagsEv+0x2c>
  1c:	ldp	x21, x22, [sp, #16]
  20:	ldr	x30, [sp, #32]
  24:	ldp	x19, x20, [sp], #48
  28:	ret
  2c:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  30:	add	x0, x0, #0x0
  34:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  38:	ldr	w0, [x19, #160]
  3c:	cmp	w0, #0x0
  40:	b.le	6c <_ZN11__sanitizer23ReportUnrecognizedFlagsEv+0x6c>
  44:	adrp	x22, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  48:	add	x22, x22, #0x0
  4c:	mov	x20, #0x0                   	// #0
  50:	ldr	x1, [x19, x20, lsl #3]
  54:	mov	x0, x22
  58:	add	x20, x20, #0x1
  5c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  60:	ldr	w0, [x19, #160]
  64:	cmp	w0, w20
  68:	b.gt	50 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv+0x50>
  6c:	add	x21, x21, #0x0
  70:	ldr	x30, [sp, #32]
  74:	str	wzr, [x21, #160]
  78:	ldp	x21, x22, [sp, #16]
  7c:	ldp	x19, x20, [sp], #48
  80:	ret
  84:	nop

0000000000000088 <_ZN11__sanitizer10FlagParser10ll_strndupEPKcm>:
  88:	stp	x19, x20, [sp, #-32]!
  8c:	stp	x21, x30, [sp, #16]
  90:	mov	x21, x1
  94:	mov	x0, x21
  98:	mov	x1, x2
  9c:	bl	0 <_ZN11__sanitizer16internal_strnlenEPKcm>
  a0:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  a4:	mov	x19, x0
  a8:	add	x0, x1, #0x0
  ac:	add	x1, x19, #0x1
  b0:	add	x0, x0, #0xa8
  b4:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  b8:	mov	x20, x0
  bc:	mov	x1, x21
  c0:	mov	x2, x19
  c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  c8:	mov	x0, x20
  cc:	strb	wzr, [x20, x19]
  d0:	ldp	x21, x30, [sp, #16]
  d4:	ldp	x19, x20, [sp], #32
  d8:	ret
  dc:	nop

00000000000000e0 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv>:
  e0:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  e4:	stp	x19, x20, [sp, #-48]!
  e8:	ldr	x1, [x1]
  ec:	stp	x21, x22, [sp, #16]
  f0:	mov	x21, x0
  f4:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
  f8:	add	x0, x0, #0x0
  fc:	ldr	x1, [x1]
 100:	str	x30, [sp, #32]
 104:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 108:	ldr	w0, [x21, #8]
 10c:	cmp	w0, #0x0
 110:	b.le	154 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv+0x74>
 114:	adrp	x22, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 118:	add	x22, x22, #0x0
 11c:	mov	x19, #0x0                   	// #0
 120:	mov	w20, #0x0                   	// #0
 124:	nop
 128:	ldr	x1, [x21]
 12c:	mov	x0, x22
 130:	add	w20, w20, #0x1
 134:	add	x2, x1, x19
 138:	ldr	x1, [x1, x19]
 13c:	add	x19, x19, #0x18
 140:	ldr	x2, [x2, #8]
 144:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 148:	ldr	w1, [x21, #8]
 14c:	cmp	w1, w20
 150:	b.gt	128 <_ZN11__sanitizer10FlagParser21PrintFlagDescriptionsEv+0x48>
 154:	ldp	x21, x22, [sp, #16]
 158:	ldr	x30, [sp, #32]
 15c:	ldp	x19, x20, [sp], #48
 160:	ret
 164:	nop

0000000000000168 <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>:
 168:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 16c:	add	x0, x0, #0x0
 170:	str	x30, [sp, #-16]!
 174:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 178:	bl	0 <_ZN11__sanitizer3DieEv>
 17c:	nop

0000000000000180 <_ZN11__sanitizer10FlagParser8is_spaceEc>:
 180:	and	w1, w1, #0xff
 184:	cmp	w1, #0x20
 188:	cset	w0, eq  // eq = none
 18c:	cmp	w1, #0x2c
 190:	csinc	w0, w0, wzr, ne  // ne = any
 194:	cbnz	w0, 1ac <_ZN11__sanitizer10FlagParser8is_spaceEc+0x2c>
 198:	cmp	w1, #0x3a
 19c:	cset	w0, eq  // eq = none
 1a0:	cmp	w1, #0xa
 1a4:	csinc	w0, w0, wzr, ne  // ne = any
 1a8:	cbz	w0, 1b0 <_ZN11__sanitizer10FlagParser8is_spaceEc+0x30>
 1ac:	ret
 1b0:	and	w1, w1, #0xfffffffb
 1b4:	cmp	w1, #0x9
 1b8:	cset	w0, eq  // eq = none
 1bc:	ret

00000000000001c0 <_ZN11__sanitizer10FlagParser15skip_whitespaceEv>:
 1c0:	ldp	x4, x2, [x0, #16]
 1c4:	mov	w5, #0x2c                  	// #44
 1c8:	ldrb	w1, [x4, x2]
 1cc:	add	x2, x2, #0x1
 1d0:	cmp	w1, #0x20
 1d4:	ccmp	w1, w5, #0x4, ne  // ne = any
 1d8:	b.eq	1fc <_ZN11__sanitizer10FlagParser15skip_whitespaceEv+0x3c>  // b.none
 1dc:	sub	w3, w1, #0x9
 1e0:	cmp	w1, #0x3a
 1e4:	and	w3, w3, #0xff
 1e8:	b.eq	1fc <_ZN11__sanitizer10FlagParser15skip_whitespaceEv+0x3c>  // b.none
 1ec:	cmp	w3, #0x1
 1f0:	ccmp	w1, #0xd, #0x4, hi  // hi = pmore
 1f4:	b.eq	1fc <_ZN11__sanitizer10FlagParser15skip_whitespaceEv+0x3c>  // b.none
 1f8:	ret
 1fc:	str	x2, [x0, #24]
 200:	b	1c8 <_ZN11__sanitizer10FlagParser15skip_whitespaceEv+0x8>
 204:	nop

0000000000000208 <_ZN11__sanitizer10FlagParser10parse_flagEv>:
 208:	stp	x19, x20, [sp, #-64]!
 20c:	mov	x19, x0
 210:	ldp	x4, x1, [x0, #16]
 214:	stp	x21, x22, [sp, #16]
 218:	stp	x23, x24, [sp, #32]
 21c:	str	x30, [sp, #48]
 220:	add	x21, x4, x1
 224:	ldrb	w2, [x4, x1]
 228:	cmp	w2, #0x3d
 22c:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 230:	b.eq	294 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x8c>  // b.none
 234:	add	x0, x1, #0x1
 238:	mov	w5, #0x2c                  	// #44
 23c:	b	278 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x70>
 240:	cmp	w2, #0x3a
 244:	b.eq	284 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x7c>  // b.none
 248:	sub	w3, w2, #0x9
 24c:	and	w3, w3, #0xff
 250:	cmp	w3, #0x1
 254:	ccmp	w2, #0xd, #0x4, hi  // hi = pmore
 258:	b.eq	284 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x7c>  // b.none
 25c:	str	x0, [x19, #24]
 260:	add	x3, x0, #0x1
 264:	ldrb	w2, [x4, x0]
 268:	cmp	w2, #0x3d
 26c:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 270:	b.eq	298 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x90>  // b.none
 274:	mov	x0, x3
 278:	cmp	w2, #0x20
 27c:	ccmp	w2, w5, #0x4, ne  // ne = any
 280:	b.ne	240 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x38>  // b.any
 284:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 288:	mov	x0, x19
 28c:	add	x1, x1, #0x0
 290:	bl	168 <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>
 294:	mov	x0, x1
 298:	cmp	w2, #0x3d
 29c:	b.ne	284 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x7c>  // b.any
 2a0:	sub	x1, x0, x1
 2a4:	mov	x0, x21
 2a8:	bl	0 <_ZN11__sanitizer16internal_strnlenEPKcm>
 2ac:	adrp	x23, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 2b0:	mov	x20, x0
 2b4:	add	x0, x23, #0x0
 2b8:	add	x1, x20, #0x1
 2bc:	add	x0, x0, #0xa8
 2c0:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 2c4:	mov	x22, x0
 2c8:	mov	x1, x21
 2cc:	mov	x2, x20
 2d0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2d4:	strb	wzr, [x22, x20]
 2d8:	mov	w0, #0x22                  	// #34
 2dc:	ldp	x4, x3, [x19, #16]
 2e0:	add	x5, x3, #0x1
 2e4:	str	x5, [x19, #24]
 2e8:	add	x21, x4, x5
 2ec:	ldrb	w2, [x4, x5]
 2f0:	cmp	w2, #0x27
 2f4:	ccmp	w2, w0, #0x4, ne  // ne = any
 2f8:	b.eq	378 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x170>  // b.none
 2fc:	cbz	w2, 4f8 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x2f0>
 300:	mov	x1, x5
 304:	mov	w6, #0x2c                  	// #44
 308:	cmp	w2, #0x20
 30c:	ccmp	w2, w6, #0x4, ne  // ne = any
 310:	b.eq	340 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x138>  // b.none
 314:	cmp	w2, #0x3a
 318:	b.eq	340 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x138>  // b.none
 31c:	sub	w0, w2, #0x9
 320:	and	w0, w0, #0xff
 324:	cmp	w0, #0x1
 328:	ccmp	w2, #0xd, #0x4, hi  // hi = pmore
 32c:	b.ne	468 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x260>  // b.any
 330:	cmp	w0, #0x1
 334:	ccmp	w2, #0xd, #0x4, hi  // hi = pmore
 338:	b.ne	4e8 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x2e0>  // b.any
 33c:	nop
 340:	sub	x1, x1, x5
 344:	mov	x0, x21
 348:	bl	0 <_ZN11__sanitizer16internal_strnlenEPKcm>
 34c:	mov	x20, x0
 350:	add	x0, x23, #0x0
 354:	add	x1, x20, #0x1
 358:	add	x0, x0, #0xa8
 35c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 360:	mov	x24, x0
 364:	mov	x1, x21
 368:	mov	x2, x20
 36c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 370:	strb	wzr, [x24, x20]
 374:	b	3f0 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x1e8>
 378:	add	x3, x3, #0x2
 37c:	str	x3, [x19, #24]
 380:	add	x21, x4, x3
 384:	ldrb	w1, [x4, x5]
 388:	ldrb	w0, [x4, x3]
 38c:	cbnz	w0, 3a4 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x19c>
 390:	b	4b4 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x2ac>
 394:	add	x3, x3, #0x1
 398:	str	x3, [x19, #24]
 39c:	ldrb	w0, [x4, x3]
 3a0:	cbz	w0, 4b4 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x2ac>
 3a4:	cmp	w0, w1
 3a8:	b.ne	394 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x18c>  // b.any
 3ac:	mvn	x1, x5
 3b0:	mov	x0, x21
 3b4:	add	x1, x1, x3
 3b8:	bl	0 <_ZN11__sanitizer16internal_strnlenEPKcm>
 3bc:	add	x1, x23, #0x0
 3c0:	mov	x20, x0
 3c4:	add	x0, x1, #0xa8
 3c8:	add	x1, x20, #0x1
 3cc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 3d0:	mov	x24, x0
 3d4:	mov	x1, x21
 3d8:	mov	x2, x20
 3dc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3e0:	strb	wzr, [x24, x20]
 3e4:	ldr	x0, [x19, #24]
 3e8:	add	x0, x0, #0x1
 3ec:	str	x0, [x19, #24]
 3f0:	ldr	w0, [x19, #8]
 3f4:	mov	x20, #0x0                   	// #0
 3f8:	mov	w21, #0x0                   	// #0
 3fc:	cmp	w0, #0x0
 400:	b.gt	41c <_ZN11__sanitizer10FlagParser10parse_flagEv+0x214>
 404:	b	480 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x278>
 408:	ldr	w1, [x19, #8]
 40c:	add	w21, w21, #0x1
 410:	add	x20, x20, #0x18
 414:	cmp	w1, w21
 418:	b.le	480 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x278>
 41c:	ldr	x1, [x19]
 420:	mov	x0, x22
 424:	ldr	x1, [x1, x20]
 428:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 42c:	cbnz	w0, 408 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x200>
 430:	ldr	x0, [x19]
 434:	mov	x1, x24
 438:	add	x20, x0, x20
 43c:	ldr	x0, [x20, #16]
 440:	ldr	x2, [x0]
 444:	ldr	x2, [x2]
 448:	blr	x2
 44c:	tst	w0, #0xff
 450:	b.eq	500 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x2f8>  // b.none
 454:	ldp	x21, x22, [sp, #16]
 458:	ldp	x23, x24, [sp, #32]
 45c:	ldr	x30, [sp, #48]
 460:	ldp	x19, x20, [sp], #64
 464:	ret
 468:	add	x0, x1, #0x1
 46c:	str	x0, [x19, #24]
 470:	ldrb	w2, [x4, x0]
 474:	cbz	w2, 4c4 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x2bc>
 478:	mov	x1, x0
 47c:	b	308 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x100>
 480:	add	x23, x23, #0x0
 484:	ldr	w0, [x23, #160]
 488:	sxtw	x3, w0
 48c:	cmp	x3, #0x13
 490:	b.hi	4cc <_ZN11__sanitizer10FlagParser10parse_flagEv+0x2c4>  // b.pmore
 494:	add	w0, w0, #0x1
 498:	str	x22, [x23, x3, lsl #3]
 49c:	str	w0, [x23, #160]
 4a0:	ldp	x21, x22, [sp, #16]
 4a4:	ldp	x23, x24, [sp, #32]
 4a8:	ldr	x30, [sp, #48]
 4ac:	ldp	x19, x20, [sp], #64
 4b0:	ret
 4b4:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 4b8:	mov	x0, x19
 4bc:	add	x1, x1, #0x0
 4c0:	bl	168 <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>
 4c4:	sub	x1, x1, x3
 4c8:	b	344 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x13c>
 4cc:	adrp	x2, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 4d0:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 4d4:	add	x2, x2, #0x0
 4d8:	add	x0, x0, #0x0
 4dc:	mov	x4, #0x14                  	// #20
 4e0:	mov	w1, #0x1e                  	// #30
 4e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4e8:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 4ec:	mov	x0, x19
 4f0:	add	x1, x1, #0x0
 4f4:	bl	168 <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>
 4f8:	mov	x1, #0x0                   	// #0
 4fc:	b	344 <_ZN11__sanitizer10FlagParser10parse_flagEv+0x13c>
 500:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 504:	mov	x0, x19
 508:	add	x1, x1, #0x0
 50c:	bl	168 <_ZN11__sanitizer10FlagParser11fatal_errorEPKc>

0000000000000510 <_ZN11__sanitizer10FlagParser11parse_flagsEv>:
 510:	stp	x19, x20, [sp, #-32]!
 514:	mov	x19, x0
 518:	mov	w20, #0x2c                  	// #44
 51c:	str	x30, [sp, #16]
 520:	ldp	x0, x3, [x19, #16]
 524:	nop
 528:	ldrb	w1, [x0, x3]
 52c:	add	x3, x3, #0x1
 530:	cmp	w1, #0x20
 534:	ccmp	w1, w20, #0x4, ne  // ne = any
 538:	b.eq	568 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x58>  // b.none
 53c:	sub	w2, w1, #0x9
 540:	cmp	w1, #0x3a
 544:	and	w2, w2, #0xff
 548:	b.eq	568 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x58>  // b.none
 54c:	cmp	w2, #0x1
 550:	ccmp	w1, #0xd, #0x4, hi  // hi = pmore
 554:	b.eq	568 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x58>  // b.none
 558:	cbz	w1, 570 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x60>
 55c:	mov	x0, x19
 560:	bl	208 <_ZN11__sanitizer10FlagParser10parse_flagEv>
 564:	b	520 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x10>
 568:	str	x3, [x19, #24]
 56c:	b	528 <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x18>
 570:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 574:	ldr	x0, [x0]
 578:	ldr	w1, [x0, #36]
 57c:	cmp	w1, #0x0
 580:	b.gt	58c <_ZN11__sanitizer10FlagParser11parse_flagsEv+0x7c>
 584:	mov	w1, #0x1                   	// #1
 588:	str	w1, [x0, #36]
 58c:	ldr	x30, [sp, #16]
 590:	ldp	x19, x20, [sp], #32
 594:	ret

0000000000000598 <_ZN11__sanitizer10FlagParser11ParseStringEPKc>:
 598:	cbz	x1, 5c4 <_ZN11__sanitizer10FlagParser11ParseStringEPKc+0x2c>
 59c:	stp	x19, x20, [sp, #-32]!
 5a0:	mov	x19, x0
 5a4:	stp	x21, x30, [sp, #16]
 5a8:	ldp	x21, x20, [x0, #16]
 5ac:	stp	x1, xzr, [x0, #16]
 5b0:	bl	510 <_ZN11__sanitizer10FlagParser11parse_flagsEv>
 5b4:	stp	x21, x20, [x19, #16]
 5b8:	ldp	x21, x30, [sp, #16]
 5bc:	ldp	x19, x20, [sp], #32
 5c0:	ret
 5c4:	ret

00000000000005c8 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb>:
 5c8:	stp	x19, x20, [sp, #-80]!
 5cc:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 5d0:	mov	x19, x0
 5d4:	ldr	x20, [x20]
 5d8:	stp	x21, x22, [sp, #16]
 5dc:	mov	x21, x1
 5e0:	and	w22, w2, #0xff
 5e4:	ldr	x0, [x20]
 5e8:	str	x30, [sp, #32]
 5ec:	cbz	x0, 674 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0xac>
 5f0:	cmp	x0, #0x8, lsl #12
 5f4:	add	x5, sp, #0x34
 5f8:	add	x3, sp, #0x48
 5fc:	add	x2, sp, #0x40
 600:	add	x1, sp, #0x38
 604:	mov	x4, #0x8000                	// #32768
 608:	csel	x4, x0, x4, cs  // cs = hs, nlast
 60c:	mov	x0, x21
 610:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
 614:	ands	w20, w0, #0xff
 618:	b.ne	634 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x6c>  // b.any
 61c:	cbz	w22, 680 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0xb8>
 620:	mov	w0, w22
 624:	ldp	x21, x22, [sp, #16]
 628:	ldr	x30, [sp, #32]
 62c:	ldp	x19, x20, [sp], #80
 630:	ret
 634:	ldr	x0, [sp, #56]
 638:	cbz	x0, 654 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x8c>
 63c:	ldp	x22, x21, [x19, #16]
 640:	stp	x0, xzr, [x19, #16]
 644:	mov	x0, x19
 648:	bl	510 <_ZN11__sanitizer10FlagParser11parse_flagsEv>
 64c:	stp	x22, x21, [x19, #16]
 650:	ldr	x0, [sp, #56]
 654:	mov	w22, w20
 658:	ldr	x1, [sp, #64]
 65c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 660:	mov	w0, w22
 664:	ldp	x21, x22, [sp, #16]
 668:	ldr	x30, [sp, #32]
 66c:	ldp	x19, x20, [sp], #80
 670:	ret
 674:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 678:	str	x0, [x20]
 67c:	b	5f0 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb+0x28>
 680:	ldr	w2, [sp, #52]
 684:	mov	x1, x21
 688:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 68c:	add	x0, x0, #0x0
 690:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 694:	mov	w0, w22
 698:	ldp	x21, x22, [sp, #16]
 69c:	ldr	x30, [sp, #32]
 6a0:	ldp	x19, x20, [sp], #80
 6a4:	ret

00000000000006a8 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_>:
 6a8:	stp	x19, x20, [sp, #-48]!
 6ac:	stp	x21, x22, [sp, #16]
 6b0:	mov	x21, x0
 6b4:	ldr	w0, [x0, #8]
 6b8:	str	x30, [sp, #40]
 6bc:	mov	x22, x1
 6c0:	cmp	w0, #0x0
 6c4:	b.le	738 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0x90>
 6c8:	mov	x19, #0x0                   	// #0
 6cc:	mov	w20, #0x0                   	// #0
 6d0:	str	x23, [sp, #32]
 6d4:	mov	x23, x2
 6d8:	b	6f0 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0x48>
 6dc:	ldr	w0, [x21, #8]
 6e0:	add	w20, w20, #0x1
 6e4:	add	x19, x19, #0x18
 6e8:	cmp	w0, w20
 6ec:	b.le	734 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0x8c>
 6f0:	ldr	x3, [x21]
 6f4:	mov	x0, x22
 6f8:	ldr	x1, [x3, x19]
 6fc:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 700:	cbnz	w0, 6dc <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0x34>
 704:	ldr	x0, [x21]
 708:	mov	x1, x23
 70c:	ldp	x21, x22, [sp, #16]
 710:	add	x19, x0, x19
 714:	ldr	x23, [sp, #32]
 718:	ldr	x0, [x19, #16]
 71c:	ldr	x30, [sp, #40]
 720:	ldr	x2, [x0]
 724:	ldp	x19, x20, [sp], #48
 728:	ldr	x2, [x2]
 72c:	mov	x16, x2
 730:	br	x16
 734:	ldr	x23, [sp, #32]
 738:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 73c:	add	x1, x1, #0x0
 740:	ldr	w0, [x1, #160]
 744:	sxtw	x3, w0
 748:	cmp	x3, #0x13
 74c:	b.hi	770 <_ZN11__sanitizer10FlagParser11run_handlerEPKcS2_+0xc8>  // b.pmore
 750:	add	w2, w0, #0x1
 754:	str	x22, [x1, x3, lsl #3]
 758:	ldp	x21, x22, [sp, #16]
 75c:	mov	w0, #0x1                   	// #1
 760:	ldr	x30, [sp, #40]
 764:	str	w2, [x1, #160]
 768:	ldp	x19, x20, [sp], #48
 76c:	ret
 770:	adrp	x2, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 774:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 778:	add	x2, x2, #0x0
 77c:	add	x0, x0, #0x0
 780:	mov	x4, #0x14                  	// #20
 784:	mov	w1, #0x1e                  	// #30
 788:	str	x23, [sp, #32]
 78c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000790 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>:
 790:	ldr	w4, [x0, #8]
 794:	sxtw	x5, w4
 798:	cmp	x5, #0xc7
 79c:	b.hi	7c4 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_+0x34>  // b.pmore
 7a0:	mov	w5, #0x18                  	// #24
 7a4:	add	w7, w4, #0x1
 7a8:	ldr	x6, [x0]
 7ac:	smull	x4, w4, w5
 7b0:	add	x5, x6, x4
 7b4:	str	x1, [x6, x4]
 7b8:	stp	x3, x2, [x5, #8]
 7bc:	str	w7, [x0, #8]
 7c0:	ret
 7c4:	str	x30, [sp, #-16]!
 7c8:	adrp	x2, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 7cc:	adrp	x0, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 7d0:	mov	x3, x5
 7d4:	add	x2, x2, #0x0
 7d8:	add	x0, x0, #0x0
 7dc:	mov	x4, #0xc8                  	// #200
 7e0:	mov	w1, #0x9e                  	// #158
 7e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000007e8 <_ZN11__sanitizer10FlagParserC1Ev>:
 7e8:	stp	x19, x30, [sp, #-16]!
 7ec:	mov	x19, x0
 7f0:	adrp	x1, 0 <_ZN11__sanitizer23ReportUnrecognizedFlagsEv>
 7f4:	add	x0, x1, #0x0
 7f8:	mov	x1, #0x12c0                	// #4800
 7fc:	str	wzr, [x19, #8]
 800:	add	x0, x0, #0xa8
 804:	stp	xzr, xzr, [x19, #16]
 808:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 80c:	str	x0, [x19]
 810:	ldp	x19, x30, [sp], #16
 814:	ret

sanitizer_flags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>:
       0:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
       4:	add	x7, x1, #0x0
       8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
       c:	mov	x17, #0x10000               	// #65536
      10:	mov	x16, #0x10100000000         	// #1103806595072
      14:	mov	w11, #0x100                 	// #256
      18:	ldr	q1, [x1]
      1c:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
      20:	mov	w5, #0x1                   	// #1
      24:	mov	w8, #0x1                   	// #1
      28:	ldr	q0, [x1]
      2c:	movk	x17, #0x1, lsl #32
      30:	movk	x16, #0x1, lsl #48
      34:	mov	x15, #0x100000000           	// #4294967296
      38:	mov	w14, #0x101                 	// #257
      3c:	mov	x13, #0x10000               	// #65536
      40:	mov	w12, #0x1388                	// #5000
      44:	movk	w11, #0x101, lsl #16
      48:	adrp	x6, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
      4c:	adrp	x4, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
      50:	add	x6, x6, #0x0
      54:	add	x4, x4, #0x0
      58:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
      5c:	adrp	x2, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
      60:	add	x3, x3, #0x0
      64:	add	x2, x2, #0x0
      68:	mov	x10, #0x1                   	// #1
      6c:	strb	w5, [x0]
      70:	str	xzr, [x0, #8]
      74:	movk	x10, #0x100, lsl #32
      78:	strb	wzr, [x0, #16]
      7c:	mov	w9, #0x100                 	// #256
      80:	stp	x7, x17, [x0, #24]
      84:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
      88:	add	x1, x1, #0x0
      8c:	str	x6, [x0, #40]
      90:	strh	wzr, [x0, #48]
      94:	stur	x16, [x0, #52]
      98:	strb	w5, [x0, #60]
      9c:	str	wzr, [x0, #64]
      a0:	strb	w5, [x0, #68]
      a4:	stur	q1, [x0, #72]
      a8:	str	x15, [x0, #88]
      ac:	strh	w14, [x0, #96]
      b0:	strb	wzr, [x0, #98]
      b4:	stp	x13, x4, [x0, #104]
      b8:	strh	wzr, [x0, #120]
      bc:	strb	wzr, [x0, #122]
      c0:	stp	xzr, xzr, [x0, #128]
      c4:	str	xzr, [x0, #144]
      c8:	strb	wzr, [x0, #152]
      cc:	str	w12, [x0, #156]
      d0:	strh	w8, [x0, #160]
      d4:	str	x3, [x0, #168]
      d8:	str	w11, [x0, #176]
      dc:	strh	w8, [x0, #180]
      e0:	str	wzr, [x0, #184]
      e4:	str	x2, [x0, #192]
      e8:	stur	q0, [x0, #200]
      ec:	stp	x10, x1, [x0, #216]
      f0:	strh	w9, [x0, #232]
      f4:	strb	wzr, [x0, #234]
      f8:	ret
      fc:	nop

0000000000000100 <_ZN11__sanitizer11CommonFlags8CopyFromERKS0_>:
     100:	mov	x2, #0xf0                  	// #240
     104:	b	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>

0000000000000108 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm>:
     108:	stp	x19, x20, [sp, #-80]!
     10c:	sub	x2, x2, #0x1
     110:	mov	x19, x1
     114:	stp	x21, x22, [sp, #16]
     118:	mov	x21, x0
     11c:	add	x20, x1, x2
     120:	str	x30, [sp, #32]
     124:	ldrb	w0, [x0]
     128:	cbz	w0, 200 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xf8>
     12c:	cmp	x1, x20
     130:	b.cs	1cc <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xc4>  // b.hs, b.nlast
     134:	mov	w22, #0x6667                	// #26215
     138:	movk	w22, #0x6666, lsl #16
     13c:	nop
     140:	cmp	w0, #0x25
     144:	b.ne	1f0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xe8>  // b.any
     148:	ldrb	w1, [x21, #1]
     14c:	cmp	w1, #0x62
     150:	b.eq	21c <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x114>  // b.none
     154:	cmp	w1, #0x70
     158:	b.ne	1f0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xe8>  // b.any
     15c:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
     160:	add	x3, sp, #0x50
     164:	nop
     168:	smull	x1, w0, w22
     16c:	asr	x1, x1, #34
     170:	sub	w1, w1, w0, asr #31
     174:	add	w2, w1, w1, lsl #2
     178:	sub	w2, w0, w2, lsl #1
     17c:	mov	w0, w1
     180:	add	w1, w2, #0x30
     184:	strb	w1, [x3, #-1]!
     188:	cbnz	w0, 168 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x60>
     18c:	add	x0, sp, #0x50
     190:	cmp	x0, x3
     194:	ccmp	x19, x20, #0x2, hi  // hi = pmore
     198:	b.cs	1b8 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xb0>  // b.hs, b.nlast
     19c:	nop
     1a0:	ldrb	w0, [x3], #1
     1a4:	strb	w0, [x19], #1
     1a8:	add	x0, sp, #0x50
     1ac:	cmp	x19, x20
     1b0:	ccmp	x0, x3, #0x0, cc  // cc = lo, ul, last
     1b4:	b.hi	1a0 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x98>  // b.pmore
     1b8:	ldrb	w0, [x21, #2]
     1bc:	add	x21, x21, #0x2
     1c0:	cbz	w0, 200 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xf8>
     1c4:	cmp	x19, x20
     1c8:	b.cc	140 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x38>  // b.lo, b.ul, b.last
     1cc:	cmp	x19, x20
     1d0:	cset	x3, cc  // cc = lo, ul, last
     1d4:	adrp	x2, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     1d8:	adrp	x0, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     1dc:	add	x2, x2, #0x0
     1e0:	add	x0, x0, #0x0
     1e4:	mov	x4, #0x0                   	// #0
     1e8:	mov	w1, #0x46                  	// #70
     1ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     1f0:	add	x21, x21, #0x1
     1f4:	strb	w0, [x19], #1
     1f8:	ldrb	w0, [x21]
     1fc:	cbnz	w0, 1c4 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xbc>
     200:	cmp	x19, x20
     204:	b.cs	270 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x168>  // b.hs, b.nlast
     208:	strb	wzr, [x19]
     20c:	ldp	x21, x22, [sp, #16]
     210:	ldr	x30, [sp, #32]
     214:	ldp	x19, x20, [sp], #80
     218:	ret
     21c:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
     220:	cbz	x0, 250 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x148>
     224:	ldrb	w1, [x0]
     228:	cmp	w1, #0x0
     22c:	ccmp	x19, x20, #0x2, ne  // ne = any
     230:	b.cs	1b8 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xb0>  // b.hs, b.nlast
     234:	nop
     238:	strb	w1, [x19], #1
     23c:	ldrb	w1, [x0, #1]!
     240:	cmp	w1, #0x0
     244:	ccmp	x19, x20, #0x2, ne  // ne = any
     248:	b.cc	238 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0x130>  // b.lo, b.ul, b.last
     24c:	b	1b8 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xb0>
     250:	adrp	x2, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     254:	adrp	x0, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     258:	add	x2, x2, #0x0
     25c:	add	x0, x0, #0x0
     260:	mov	x4, #0x0                   	// #0
     264:	mov	x3, #0x0                   	// #0
     268:	mov	w1, #0x2e                  	// #46
     26c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     270:	mov	x3, #0x0                   	// #0
     274:	b	1d4 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm+0xcc>

0000000000000278 <_ZN11__sanitizer20RegisterIncludeFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>:
     278:	stp	x19, x20, [sp, #-32]!
     27c:	mov	x1, #0x18                  	// #24
     280:	mov	x19, x0
     284:	stp	x21, x30, [sp, #16]
     288:	adrp	x21, 0 <_ZN11__sanitizer10FlagParser5AllocE>
     28c:	adrp	x20, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     290:	ldr	x21, [x21]
     294:	add	x20, x20, #0x0
     298:	mov	x0, x21
     29c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     2a0:	mov	x2, x0
     2a4:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     2a8:	add	x3, x3, #0x0
     2ac:	mov	x0, x19
     2b0:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     2b4:	add	x1, x1, #0x0
     2b8:	stp	x20, x19, [x2]
     2bc:	strb	wzr, [x2, #16]
     2c0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     2c4:	mov	x0, x21
     2c8:	mov	x1, #0x18                  	// #24
     2cc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     2d0:	mov	x2, x0
     2d4:	mov	w4, #0x1                   	// #1
     2d8:	mov	x0, x19
     2dc:	ldp	x21, x30, [sp, #16]
     2e0:	stp	x20, x19, [x2]
     2e4:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     2e8:	strb	w4, [x2, #16]
     2ec:	add	x3, x3, #0x0
     2f0:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     2f4:	add	x1, x1, #0x0
     2f8:	ldp	x19, x20, [sp], #32
     2fc:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

0000000000000300 <_ZN11__sanitizer19RegisterCommonFlagsEPNS_10FlagParserEPNS_11CommonFlagsE>:
     300:	stp	x19, x20, [sp, #-64]!
     304:	adrp	x20, 0 <_ZN11__sanitizer10FlagParser5AllocE>
     308:	mov	x19, x0
     30c:	ldr	x20, [x20]
     310:	stp	x21, x22, [sp, #16]
     314:	mov	x21, x1
     318:	mov	x0, x20
     31c:	mov	x1, #0x10                  	// #16
     320:	stp	x23, x24, [sp, #32]
     324:	adrp	x22, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     328:	add	x22, x22, #0x0
     32c:	stp	x25, x30, [sp, #48]
     330:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     334:	mov	x2, x0
     338:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     33c:	add	x3, x3, #0x0
     340:	mov	x0, x19
     344:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     348:	stp	x22, x21, [x2]
     34c:	add	x1, x1, #0x0
     350:	adrp	x23, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     354:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     358:	add	x23, x23, #0x0
     35c:	mov	x0, x20
     360:	mov	x1, #0x10                  	// #16
     364:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     368:	mov	x2, x0
     36c:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     370:	add	x0, x21, #0x8
     374:	add	x3, x3, #0x0
     378:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     37c:	stp	x23, x0, [x2]
     380:	add	x1, x1, #0x0
     384:	mov	x0, x19
     388:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     38c:	adrp	x25, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     390:	mov	x0, x20
     394:	mov	x1, #0x10                  	// #16
     398:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     39c:	mov	x2, x0
     3a0:	add	x4, x21, #0x10
     3a4:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     3a8:	add	x3, x3, #0x0
     3ac:	mov	x0, x19
     3b0:	stp	x22, x4, [x2]
     3b4:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     3b8:	add	x1, x1, #0x0
     3bc:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     3c0:	add	x25, x25, #0x0
     3c4:	mov	x0, x20
     3c8:	mov	x1, #0x10                  	// #16
     3cc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     3d0:	mov	x2, x0
     3d4:	add	x4, x21, #0x18
     3d8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     3dc:	add	x3, x3, #0x0
     3e0:	mov	x0, x19
     3e4:	stp	x23, x4, [x2]
     3e8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     3ec:	add	x1, x1, #0x0
     3f0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     3f4:	adrp	x24, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     3f8:	mov	x0, x20
     3fc:	mov	x1, #0x10                  	// #16
     400:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     404:	mov	x2, x0
     408:	add	x4, x21, #0x20
     40c:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     410:	add	x3, x3, #0x0
     414:	mov	x0, x19
     418:	stp	x22, x4, [x2]
     41c:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     420:	add	x1, x1, #0x0
     424:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     428:	add	x24, x24, #0x0
     42c:	mov	x0, x20
     430:	mov	x1, #0x10                  	// #16
     434:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     438:	mov	x2, x0
     43c:	add	x4, x21, #0x21
     440:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     444:	add	x3, x3, #0x0
     448:	mov	x0, x19
     44c:	stp	x22, x4, [x2]
     450:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     454:	add	x1, x1, #0x0
     458:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     45c:	mov	x0, x20
     460:	mov	x1, #0x10                  	// #16
     464:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     468:	mov	x2, x0
     46c:	add	x4, x21, #0x22
     470:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     474:	add	x3, x3, #0x0
     478:	mov	x0, x19
     47c:	stp	x22, x4, [x2]
     480:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     484:	add	x1, x1, #0x0
     488:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     48c:	mov	x0, x20
     490:	mov	x1, #0x10                  	// #16
     494:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     498:	mov	x2, x0
     49c:	add	x4, x21, #0x23
     4a0:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     4a4:	add	x3, x3, #0x0
     4a8:	mov	x0, x19
     4ac:	stp	x22, x4, [x2]
     4b0:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     4b4:	add	x1, x1, #0x0
     4b8:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     4bc:	mov	x0, x20
     4c0:	mov	x1, #0x10                  	// #16
     4c4:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     4c8:	mov	x2, x0
     4cc:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     4d0:	add	x0, x21, #0x24
     4d4:	add	x3, x3, #0x0
     4d8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     4dc:	stp	x25, x0, [x2]
     4e0:	add	x1, x1, #0x0
     4e4:	mov	x0, x19
     4e8:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     4ec:	mov	x0, x20
     4f0:	mov	x1, #0x10                  	// #16
     4f4:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     4f8:	mov	x2, x0
     4fc:	add	x4, x21, #0x28
     500:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     504:	add	x3, x3, #0x0
     508:	mov	x0, x19
     50c:	stp	x23, x4, [x2]
     510:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     514:	add	x1, x1, #0x0
     518:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     51c:	mov	x0, x20
     520:	mov	x1, #0x10                  	// #16
     524:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     528:	mov	x2, x0
     52c:	add	x4, x21, #0x30
     530:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     534:	add	x3, x3, #0x0
     538:	mov	x0, x19
     53c:	stp	x22, x4, [x2]
     540:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     544:	add	x1, x1, #0x0
     548:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     54c:	mov	x0, x20
     550:	mov	x1, #0x10                  	// #16
     554:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     558:	mov	x2, x0
     55c:	add	x4, x21, #0x31
     560:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     564:	add	x3, x3, #0x0
     568:	mov	x0, x19
     56c:	stp	x22, x4, [x2]
     570:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     574:	add	x1, x1, #0x0
     578:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     57c:	mov	x0, x20
     580:	mov	x1, #0x10                  	// #16
     584:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     588:	mov	x2, x0
     58c:	add	x4, x21, #0x34
     590:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     594:	add	x3, x3, #0x0
     598:	mov	x0, x19
     59c:	stp	x25, x4, [x2]
     5a0:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     5a4:	add	x1, x1, #0x0
     5a8:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     5ac:	mov	x0, x20
     5b0:	mov	x1, #0x10                  	// #16
     5b4:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     5b8:	mov	x2, x0
     5bc:	add	x4, x21, #0x38
     5c0:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     5c4:	add	x3, x3, #0x0
     5c8:	mov	x0, x19
     5cc:	stp	x22, x4, [x2]
     5d0:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     5d4:	add	x1, x1, #0x0
     5d8:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     5dc:	mov	x0, x20
     5e0:	mov	x1, #0x10                  	// #16
     5e4:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     5e8:	mov	x2, x0
     5ec:	add	x4, x21, #0x39
     5f0:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     5f4:	add	x3, x3, #0x0
     5f8:	mov	x0, x19
     5fc:	stp	x22, x4, [x2]
     600:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     604:	add	x1, x1, #0x0
     608:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     60c:	mov	x0, x20
     610:	mov	x1, #0x10                  	// #16
     614:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     618:	mov	x2, x0
     61c:	add	x4, x21, #0x3a
     620:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     624:	add	x3, x3, #0x0
     628:	mov	x0, x19
     62c:	stp	x22, x4, [x2]
     630:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     634:	add	x1, x1, #0x0
     638:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     63c:	mov	x0, x20
     640:	mov	x1, #0x10                  	// #16
     644:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     648:	mov	x2, x0
     64c:	add	x4, x21, #0x3b
     650:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     654:	add	x3, x3, #0x0
     658:	mov	x0, x19
     65c:	stp	x22, x4, [x2]
     660:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     664:	add	x1, x1, #0x0
     668:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     66c:	mov	x0, x20
     670:	mov	x1, #0x10                  	// #16
     674:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     678:	mov	x2, x0
     67c:	add	x4, x21, #0x3c
     680:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     684:	add	x3, x3, #0x0
     688:	mov	x0, x19
     68c:	stp	x22, x4, [x2]
     690:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     694:	add	x1, x1, #0x0
     698:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     69c:	mov	x0, x20
     6a0:	mov	x1, #0x10                  	// #16
     6a4:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     6a8:	mov	x2, x0
     6ac:	add	x4, x21, #0x40
     6b0:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     6b4:	add	x3, x3, #0x0
     6b8:	mov	x0, x19
     6bc:	stp	x25, x4, [x2]
     6c0:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     6c4:	add	x1, x1, #0x0
     6c8:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     6cc:	mov	x0, x20
     6d0:	mov	x1, #0x10                  	// #16
     6d4:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     6d8:	mov	x2, x0
     6dc:	add	x4, x21, #0x44
     6e0:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     6e4:	add	x3, x3, #0x0
     6e8:	mov	x0, x19
     6ec:	stp	x22, x4, [x2]
     6f0:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     6f4:	add	x1, x1, #0x0
     6f8:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     6fc:	mov	x0, x20
     700:	mov	x1, #0x10                  	// #16
     704:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     708:	mov	x2, x0
     70c:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     710:	add	x0, x21, #0x48
     714:	add	x3, x3, #0x0
     718:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     71c:	stp	x24, x0, [x2]
     720:	add	x1, x1, #0x0
     724:	mov	x0, x19
     728:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     72c:	mov	x0, x20
     730:	mov	x1, #0x10                  	// #16
     734:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     738:	mov	x2, x0
     73c:	add	x4, x21, #0x4c
     740:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     744:	add	x3, x3, #0x0
     748:	mov	x0, x19
     74c:	stp	x24, x4, [x2]
     750:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     754:	add	x1, x1, #0x0
     758:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     75c:	mov	x0, x20
     760:	mov	x1, #0x10                  	// #16
     764:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     768:	mov	x2, x0
     76c:	add	x4, x21, #0x50
     770:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     774:	add	x3, x3, #0x0
     778:	mov	x0, x19
     77c:	stp	x24, x4, [x2]
     780:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     784:	add	x1, x1, #0x0
     788:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     78c:	mov	x0, x20
     790:	mov	x1, #0x10                  	// #16
     794:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     798:	mov	x2, x0
     79c:	add	x4, x21, #0x54
     7a0:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     7a4:	add	x3, x3, #0x0
     7a8:	mov	x0, x19
     7ac:	stp	x24, x4, [x2]
     7b0:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     7b4:	add	x1, x1, #0x0
     7b8:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     7bc:	mov	x0, x20
     7c0:	mov	x1, #0x10                  	// #16
     7c4:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     7c8:	mov	x2, x0
     7cc:	add	x4, x21, #0x58
     7d0:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     7d4:	add	x3, x3, #0x0
     7d8:	mov	x0, x19
     7dc:	stp	x24, x4, [x2]
     7e0:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     7e4:	add	x1, x1, #0x0
     7e8:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     7ec:	mov	x0, x20
     7f0:	mov	x1, #0x10                  	// #16
     7f4:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     7f8:	mov	x2, x0
     7fc:	add	x4, x21, #0x5c
     800:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     804:	add	x3, x3, #0x0
     808:	mov	x0, x19
     80c:	stp	x24, x4, [x2]
     810:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     814:	add	x1, x1, #0x0
     818:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     81c:	adrp	x24, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     820:	mov	x0, x20
     824:	mov	x1, #0x10                  	// #16
     828:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     82c:	mov	x2, x0
     830:	add	x4, x21, #0x60
     834:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     838:	add	x3, x3, #0x0
     83c:	mov	x0, x19
     840:	stp	x22, x4, [x2]
     844:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     848:	add	x1, x1, #0x0
     84c:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     850:	add	x24, x24, #0x0
     854:	mov	x0, x20
     858:	mov	x1, #0x10                  	// #16
     85c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     860:	mov	x2, x0
     864:	add	x4, x21, #0x61
     868:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     86c:	add	x3, x3, #0x0
     870:	mov	x0, x19
     874:	stp	x22, x4, [x2]
     878:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     87c:	add	x1, x1, #0x0
     880:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     884:	mov	x0, x20
     888:	mov	x1, #0x10                  	// #16
     88c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     890:	mov	x2, x0
     894:	add	x4, x21, #0x62
     898:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     89c:	add	x3, x3, #0x0
     8a0:	mov	x0, x19
     8a4:	stp	x22, x4, [x2]
     8a8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     8ac:	add	x1, x1, #0x0
     8b0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     8b4:	mov	x0, x20
     8b8:	mov	x1, #0x10                  	// #16
     8bc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     8c0:	mov	x2, x0
     8c4:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     8c8:	add	x0, x21, #0x68
     8cc:	add	x3, x3, #0x0
     8d0:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     8d4:	stp	x24, x0, [x2]
     8d8:	add	x1, x1, #0x0
     8dc:	mov	x0, x19
     8e0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     8e4:	mov	x0, x20
     8e8:	mov	x1, #0x10                  	// #16
     8ec:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     8f0:	mov	x2, x0
     8f4:	add	x4, x21, #0x70
     8f8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     8fc:	add	x3, x3, #0x0
     900:	mov	x0, x19
     904:	stp	x23, x4, [x2]
     908:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     90c:	add	x1, x1, #0x0
     910:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     914:	mov	x0, x20
     918:	mov	x1, #0x10                  	// #16
     91c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     920:	mov	x2, x0
     924:	add	x4, x21, #0x78
     928:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     92c:	add	x3, x3, #0x0
     930:	mov	x0, x19
     934:	stp	x22, x4, [x2]
     938:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     93c:	add	x1, x1, #0x0
     940:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     944:	mov	x0, x20
     948:	mov	x1, #0x10                  	// #16
     94c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     950:	mov	x2, x0
     954:	add	x4, x21, #0x79
     958:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     95c:	add	x3, x3, #0x0
     960:	mov	x0, x19
     964:	stp	x22, x4, [x2]
     968:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     96c:	add	x1, x1, #0x0
     970:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     974:	mov	x0, x20
     978:	mov	x1, #0x10                  	// #16
     97c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     980:	mov	x2, x0
     984:	add	x4, x21, #0x7a
     988:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     98c:	add	x3, x3, #0x0
     990:	mov	x0, x19
     994:	stp	x22, x4, [x2]
     998:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     99c:	add	x1, x1, #0x0
     9a0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     9a4:	mov	x0, x20
     9a8:	mov	x1, #0x10                  	// #16
     9ac:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     9b0:	mov	x2, x0
     9b4:	add	x4, x21, #0x80
     9b8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     9bc:	add	x3, x3, #0x0
     9c0:	mov	x0, x19
     9c4:	stp	x24, x4, [x2]
     9c8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     9cc:	add	x1, x1, #0x0
     9d0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     9d4:	mov	x0, x20
     9d8:	mov	x1, #0x10                  	// #16
     9dc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     9e0:	mov	x2, x0
     9e4:	add	x4, x21, #0x88
     9e8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     9ec:	add	x3, x3, #0x0
     9f0:	mov	x0, x19
     9f4:	stp	x24, x4, [x2]
     9f8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     9fc:	add	x1, x1, #0x0
     a00:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     a04:	mov	x0, x20
     a08:	mov	x1, #0x10                  	// #16
     a0c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     a10:	mov	x2, x0
     a14:	add	x4, x21, #0x90
     a18:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     a1c:	add	x3, x3, #0x0
     a20:	mov	x0, x19
     a24:	stp	x24, x4, [x2]
     a28:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     a2c:	add	x1, x1, #0x0
     a30:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     a34:	mov	x0, x20
     a38:	mov	x1, #0x10                  	// #16
     a3c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     a40:	mov	x2, x0
     a44:	add	x4, x21, #0x98
     a48:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     a4c:	add	x3, x3, #0x0
     a50:	mov	x0, x19
     a54:	stp	x22, x4, [x2]
     a58:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     a5c:	add	x1, x1, #0x0
     a60:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     a64:	mov	x0, x20
     a68:	mov	x1, #0x10                  	// #16
     a6c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     a70:	mov	x2, x0
     a74:	add	x4, x21, #0x9c
     a78:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     a7c:	add	x3, x3, #0x0
     a80:	mov	x0, x19
     a84:	stp	x25, x4, [x2]
     a88:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     a8c:	add	x1, x1, #0x0
     a90:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     a94:	mov	x0, x20
     a98:	mov	x1, #0x10                  	// #16
     a9c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     aa0:	mov	x2, x0
     aa4:	add	x4, x21, #0xa0
     aa8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     aac:	add	x3, x3, #0x0
     ab0:	mov	x0, x19
     ab4:	stp	x22, x4, [x2]
     ab8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     abc:	add	x1, x1, #0x0
     ac0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     ac4:	mov	x0, x20
     ac8:	mov	x1, #0x10                  	// #16
     acc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     ad0:	mov	x2, x0
     ad4:	add	x4, x21, #0xa1
     ad8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     adc:	add	x3, x3, #0x0
     ae0:	mov	x0, x19
     ae4:	stp	x22, x4, [x2]
     ae8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     aec:	add	x1, x1, #0x0
     af0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     af4:	mov	x0, x20
     af8:	mov	x1, #0x10                  	// #16
     afc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     b00:	mov	x2, x0
     b04:	add	x4, x21, #0xa8
     b08:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     b0c:	add	x3, x3, #0x0
     b10:	mov	x0, x19
     b14:	stp	x23, x4, [x2]
     b18:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     b1c:	add	x1, x1, #0x0
     b20:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     b24:	mov	x0, x20
     b28:	mov	x1, #0x10                  	// #16
     b2c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     b30:	mov	x2, x0
     b34:	add	x4, x21, #0xb0
     b38:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     b3c:	add	x3, x3, #0x0
     b40:	mov	x0, x19
     b44:	stp	x22, x4, [x2]
     b48:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     b4c:	add	x1, x1, #0x0
     b50:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     b54:	mov	x0, x20
     b58:	mov	x1, #0x10                  	// #16
     b5c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     b60:	mov	x2, x0
     b64:	add	x4, x21, #0xb1
     b68:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     b6c:	add	x3, x3, #0x0
     b70:	mov	x0, x19
     b74:	stp	x22, x4, [x2]
     b78:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     b7c:	add	x1, x1, #0x0
     b80:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     b84:	mov	x0, x20
     b88:	mov	x1, #0x10                  	// #16
     b8c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     b90:	mov	x2, x0
     b94:	add	x4, x21, #0xb2
     b98:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     b9c:	add	x3, x3, #0x0
     ba0:	mov	x0, x19
     ba4:	stp	x22, x4, [x2]
     ba8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     bac:	add	x1, x1, #0x0
     bb0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     bb4:	mov	x0, x20
     bb8:	mov	x1, #0x10                  	// #16
     bbc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     bc0:	mov	x2, x0
     bc4:	add	x4, x21, #0xb3
     bc8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     bcc:	add	x3, x3, #0x0
     bd0:	mov	x0, x19
     bd4:	stp	x22, x4, [x2]
     bd8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     bdc:	add	x1, x1, #0x0
     be0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     be4:	mov	x0, x20
     be8:	mov	x1, #0x10                  	// #16
     bec:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     bf0:	mov	x2, x0
     bf4:	add	x4, x21, #0xb4
     bf8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     bfc:	add	x3, x3, #0x0
     c00:	mov	x0, x19
     c04:	stp	x22, x4, [x2]
     c08:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     c0c:	add	x1, x1, #0x0
     c10:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     c14:	mov	x0, x20
     c18:	mov	x1, #0x10                  	// #16
     c1c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     c20:	mov	x2, x0
     c24:	add	x4, x21, #0xb5
     c28:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     c2c:	add	x3, x3, #0x0
     c30:	mov	x0, x19
     c34:	stp	x22, x4, [x2]
     c38:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     c3c:	add	x1, x1, #0x0
     c40:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     c44:	mov	x0, x20
     c48:	mov	x1, #0x10                  	// #16
     c4c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     c50:	mov	x2, x0
     c54:	add	x4, x21, #0xb8
     c58:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     c5c:	add	x3, x3, #0x0
     c60:	mov	x0, x19
     c64:	stp	x25, x4, [x2]
     c68:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     c6c:	add	x1, x1, #0x0
     c70:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     c74:	mov	x0, x20
     c78:	mov	x1, #0x10                  	// #16
     c7c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     c80:	mov	x2, x0
     c84:	add	x4, x21, #0xc0
     c88:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     c8c:	add	x3, x3, #0x0
     c90:	mov	x0, x19
     c94:	stp	x23, x4, [x2]
     c98:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     c9c:	add	x1, x1, #0x0
     ca0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     ca4:	mov	x0, x20
     ca8:	mov	x1, #0x10                  	// #16
     cac:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     cb0:	mov	x2, x0
     cb4:	add	x4, x21, #0xc8
     cb8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     cbc:	add	x3, x3, #0x0
     cc0:	mov	x0, x19
     cc4:	stp	x22, x4, [x2]
     cc8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     ccc:	add	x1, x1, #0x0
     cd0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     cd4:	mov	x0, x20
     cd8:	mov	x1, #0x10                  	// #16
     cdc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     ce0:	mov	x2, x0
     ce4:	add	x4, x21, #0xc9
     ce8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     cec:	add	x3, x3, #0x0
     cf0:	mov	x0, x19
     cf4:	stp	x22, x4, [x2]
     cf8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     cfc:	add	x1, x1, #0x0
     d00:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     d04:	mov	x0, x20
     d08:	mov	x1, #0x10                  	// #16
     d0c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     d10:	mov	x2, x0
     d14:	add	x4, x21, #0xca
     d18:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     d1c:	add	x3, x3, #0x0
     d20:	mov	x0, x19
     d24:	stp	x22, x4, [x2]
     d28:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     d2c:	add	x1, x1, #0x0
     d30:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     d34:	mov	x0, x20
     d38:	mov	x1, #0x10                  	// #16
     d3c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     d40:	mov	x2, x0
     d44:	add	x4, x21, #0xcb
     d48:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     d4c:	add	x3, x3, #0x0
     d50:	mov	x0, x19
     d54:	stp	x22, x4, [x2]
     d58:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     d5c:	add	x1, x1, #0x0
     d60:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     d64:	mov	x0, x20
     d68:	mov	x1, #0x10                  	// #16
     d6c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     d70:	mov	x2, x0
     d74:	add	x4, x21, #0xcc
     d78:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     d7c:	add	x3, x3, #0x0
     d80:	mov	x0, x19
     d84:	stp	x22, x4, [x2]
     d88:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     d8c:	add	x1, x1, #0x0
     d90:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     d94:	mov	x0, x20
     d98:	mov	x1, #0x10                  	// #16
     d9c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     da0:	mov	x2, x0
     da4:	add	x4, x21, #0xcd
     da8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     dac:	add	x3, x3, #0x0
     db0:	mov	x0, x19
     db4:	stp	x22, x4, [x2]
     db8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     dbc:	add	x1, x1, #0x0
     dc0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     dc4:	mov	x0, x20
     dc8:	mov	x1, #0x10                  	// #16
     dcc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     dd0:	mov	x2, x0
     dd4:	add	x4, x21, #0xce
     dd8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     ddc:	add	x3, x3, #0x0
     de0:	mov	x0, x19
     de4:	stp	x22, x4, [x2]
     de8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     dec:	add	x1, x1, #0x0
     df0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     df4:	mov	x0, x20
     df8:	mov	x1, #0x10                  	// #16
     dfc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     e00:	mov	x2, x0
     e04:	add	x4, x21, #0xcf
     e08:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     e0c:	add	x3, x3, #0x0
     e10:	mov	x0, x19
     e14:	stp	x22, x4, [x2]
     e18:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     e1c:	add	x1, x1, #0x0
     e20:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     e24:	mov	x0, x20
     e28:	mov	x1, #0x10                  	// #16
     e2c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     e30:	mov	x2, x0
     e34:	add	x4, x21, #0xd0
     e38:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     e3c:	add	x3, x3, #0x0
     e40:	mov	x0, x19
     e44:	stp	x22, x4, [x2]
     e48:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     e4c:	add	x1, x1, #0x0
     e50:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     e54:	mov	x0, x20
     e58:	mov	x1, #0x10                  	// #16
     e5c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     e60:	mov	x2, x0
     e64:	add	x4, x21, #0xd1
     e68:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     e6c:	add	x3, x3, #0x0
     e70:	mov	x0, x19
     e74:	stp	x22, x4, [x2]
     e78:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     e7c:	add	x1, x1, #0x0
     e80:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     e84:	mov	x0, x20
     e88:	mov	x1, #0x10                  	// #16
     e8c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     e90:	mov	x2, x0
     e94:	add	x4, x21, #0xd2
     e98:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     e9c:	add	x3, x3, #0x0
     ea0:	mov	x0, x19
     ea4:	stp	x22, x4, [x2]
     ea8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     eac:	add	x1, x1, #0x0
     eb0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     eb4:	mov	x0, x20
     eb8:	mov	x1, #0x10                  	// #16
     ebc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     ec0:	mov	x2, x0
     ec4:	add	x4, x21, #0xd3
     ec8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     ecc:	add	x3, x3, #0x0
     ed0:	mov	x0, x19
     ed4:	stp	x22, x4, [x2]
     ed8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     edc:	add	x1, x1, #0x0
     ee0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     ee4:	mov	x0, x20
     ee8:	mov	x1, #0x10                  	// #16
     eec:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     ef0:	mov	x2, x0
     ef4:	add	x4, x21, #0xd4
     ef8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     efc:	add	x3, x3, #0x0
     f00:	mov	x0, x19
     f04:	stp	x22, x4, [x2]
     f08:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     f0c:	add	x1, x1, #0x0
     f10:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     f14:	mov	x0, x20
     f18:	mov	x1, #0x10                  	// #16
     f1c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     f20:	mov	x2, x0
     f24:	add	x4, x21, #0xd5
     f28:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     f2c:	add	x3, x3, #0x0
     f30:	mov	x0, x19
     f34:	stp	x22, x4, [x2]
     f38:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     f3c:	add	x1, x1, #0x0
     f40:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     f44:	mov	x0, x20
     f48:	mov	x1, #0x10                  	// #16
     f4c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     f50:	mov	x2, x0
     f54:	add	x4, x21, #0xd6
     f58:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     f5c:	add	x3, x3, #0x0
     f60:	mov	x0, x19
     f64:	stp	x22, x4, [x2]
     f68:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     f6c:	add	x1, x1, #0x0
     f70:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     f74:	mov	x0, x20
     f78:	mov	x1, #0x10                  	// #16
     f7c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     f80:	mov	x2, x0
     f84:	add	x4, x21, #0xd7
     f88:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     f8c:	add	x3, x3, #0x0
     f90:	mov	x0, x19
     f94:	stp	x22, x4, [x2]
     f98:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     f9c:	add	x1, x1, #0x0
     fa0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     fa4:	mov	x0, x20
     fa8:	mov	x1, #0x10                  	// #16
     fac:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     fb0:	mov	x2, x0
     fb4:	add	x1, x21, #0xd8
     fb8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     fbc:	add	x3, x3, #0x0
     fc0:	stp	x25, x1, [x0]
     fc4:	mov	x0, x19
     fc8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     fcc:	add	x1, x1, #0x0
     fd0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
     fd4:	mov	x0, x20
     fd8:	mov	x1, #0x10                  	// #16
     fdc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     fe0:	mov	x2, x0
     fe4:	add	x4, x21, #0xdc
     fe8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     fec:	add	x3, x3, #0x0
     ff0:	mov	x0, x19
     ff4:	stp	x22, x4, [x2]
     ff8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
     ffc:	add	x1, x1, #0x0
    1000:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
    1004:	mov	x0, x20
    1008:	mov	x1, #0x10                  	// #16
    100c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
    1010:	mov	x2, x0
    1014:	add	x4, x21, #0xdd
    1018:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    101c:	add	x3, x3, #0x0
    1020:	mov	x0, x19
    1024:	stp	x22, x4, [x2]
    1028:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    102c:	add	x1, x1, #0x0
    1030:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
    1034:	mov	x0, x20
    1038:	mov	x1, #0x10                  	// #16
    103c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
    1040:	mov	x2, x0
    1044:	add	x4, x21, #0xde
    1048:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    104c:	add	x3, x3, #0x0
    1050:	mov	x0, x19
    1054:	stp	x22, x4, [x2]
    1058:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    105c:	add	x1, x1, #0x0
    1060:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
    1064:	mov	x0, x20
    1068:	mov	x1, #0x10                  	// #16
    106c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
    1070:	mov	x2, x0
    1074:	add	x4, x21, #0xdf
    1078:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    107c:	add	x3, x3, #0x0
    1080:	mov	x0, x19
    1084:	stp	x22, x4, [x2]
    1088:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    108c:	add	x1, x1, #0x0
    1090:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
    1094:	mov	x0, x20
    1098:	mov	x1, #0x10                  	// #16
    109c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
    10a0:	mov	x2, x0
    10a4:	add	x1, x21, #0xe0
    10a8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    10ac:	add	x3, x3, #0x0
    10b0:	stp	x23, x1, [x0]
    10b4:	mov	x0, x19
    10b8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    10bc:	add	x1, x1, #0x0
    10c0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
    10c4:	mov	x0, x20
    10c8:	mov	x1, #0x10                  	// #16
    10cc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
    10d0:	mov	x2, x0
    10d4:	add	x4, x21, #0xe8
    10d8:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    10dc:	add	x3, x3, #0x0
    10e0:	mov	x0, x19
    10e4:	stp	x22, x4, [x2]
    10e8:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    10ec:	add	x1, x1, #0x0
    10f0:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
    10f4:	mov	x0, x20
    10f8:	mov	x1, #0x10                  	// #16
    10fc:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
    1100:	mov	x2, x0
    1104:	add	x4, x21, #0xe9
    1108:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    110c:	add	x3, x3, #0x0
    1110:	mov	x0, x19
    1114:	stp	x22, x4, [x2]
    1118:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    111c:	add	x1, x1, #0x0
    1120:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
    1124:	add	x21, x21, #0xea
    1128:	mov	x0, x20
    112c:	mov	x1, #0x10                  	// #16
    1130:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
    1134:	mov	x2, x0
    1138:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    113c:	add	x3, x3, #0x0
    1140:	mov	x0, x19
    1144:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    1148:	stp	x22, x21, [x2]
    114c:	add	x1, x1, #0x0
    1150:	adrp	x21, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    1154:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
    1158:	add	x21, x21, #0x0
    115c:	mov	x0, x20
    1160:	mov	x1, #0x18                  	// #24
    1164:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
    1168:	mov	x2, x0
    116c:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    1170:	add	x3, x3, #0x0
    1174:	mov	x0, x19
    1178:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    117c:	stp	x21, x19, [x2]
    1180:	add	x1, x1, #0x0
    1184:	strb	wzr, [x2, #16]
    1188:	bl	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>
    118c:	mov	x0, x20
    1190:	mov	x1, #0x18                  	// #24
    1194:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
    1198:	mov	x2, x0
    119c:	mov	w4, #0x1                   	// #1
    11a0:	mov	x0, x19
    11a4:	ldp	x23, x24, [sp, #32]
    11a8:	strb	w4, [x2, #16]
    11ac:	ldp	x25, x30, [sp, #48]
    11b0:	stp	x21, x19, [x2]
    11b4:	adrp	x3, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    11b8:	ldp	x21, x22, [sp, #16]
    11bc:	add	x3, x3, #0x0
    11c0:	ldp	x19, x20, [sp], #64
    11c4:	adrp	x1, 0 <_ZN11__sanitizer11CommonFlags11SetDefaultsEv>
    11c8:	add	x1, x1, #0x0
    11cc:	b	0 <_ZN11__sanitizer10FlagParser15RegisterHandlerEPKcPNS_15FlagHandlerBaseES2_>

00000000000011d0 <_ZN11__sanitizer21InitializeCommonFlagsEPNS_11CommonFlagsE>:
    11d0:	adrp	x1, 0 <_ZN11__sanitizer17current_verbosityE>
    11d4:	ldrb	w4, [x0, #223]
    11d8:	ldr	w3, [x0, #52]
    11dc:	ldr	x2, [x1]
    11e0:	ldrb	w1, [x0, #161]
    11e4:	orr	w1, w1, w4
    11e8:	str	w3, [x2]
    11ec:	strb	w1, [x0, #161]
    11f0:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIPKcE5ParseES2_>:
   0:	mov	x2, x0
   4:	mov	w0, #0x1                   	// #1
   8:	ldr	x2, [x2, #8]
   c:	str	x1, [x2]
  10:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerImE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerImE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x20, x0
   8:	mov	w2, #0xa                   	// #10
   c:	mov	x0, x1
  10:	mov	x19, x1
  14:	add	x1, sp, #0x28
  18:	str	x30, [sp, #16]
  1c:	bl	0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>
  20:	ldr	x2, [x20, #8]
  24:	ldr	x1, [sp, #40]
  28:	str	x0, [x2]
  2c:	ldrb	w0, [x1]
  30:	cmp	w0, #0x0
  34:	cset	w20, eq  // eq = none
  38:	cbnz	w0, 4c <_ZN11__sanitizer11FlagHandlerImE5ParseEPKc+0x4c>
  3c:	mov	w0, w20
  40:	ldr	x30, [sp, #16]
  44:	ldp	x19, x20, [sp], #48
  48:	ret
  4c:	mov	x1, x19
  50:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerImE5ParseEPKc>
  54:	add	x0, x0, #0x0
  58:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  5c:	mov	w0, w20
  60:	ldr	x30, [sp, #16]
  64:	ldp	x19, x20, [sp], #48
  68:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIiE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x20, x0
   8:	mov	w2, #0xa                   	// #10
   c:	mov	x0, x1
  10:	mov	x19, x1
  14:	add	x1, sp, #0x28
  18:	str	x30, [sp, #16]
  1c:	bl	0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>
  20:	ldr	x2, [x20, #8]
  24:	ldr	x1, [sp, #40]
  28:	str	w0, [x2]
  2c:	ldrb	w0, [x1]
  30:	cmp	w0, #0x0
  34:	cset	w20, eq  // eq = none
  38:	cbnz	w0, 4c <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc+0x4c>
  3c:	mov	w0, w20
  40:	ldr	x30, [sp, #16]
  44:	ldp	x19, x20, [sp], #48
  48:	ret
  4c:	mov	x1, x19
  50:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIiE5ParseEPKc>
  54:	add	x0, x0, #0x0
  58:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  5c:	mov	w0, w20
  60:	ldr	x30, [sp, #16]
  64:	ldp	x19, x20, [sp], #48
  68:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x1
   8:	mov	x20, x0
   c:	mov	x0, x1
  10:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  14:	add	x1, x1, #0x0
  18:	str	x30, [sp, #16]
  1c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  20:	cbnz	w0, 40 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x40>
  24:	mov	w1, #0x0                   	// #0
  28:	ldr	x2, [x20, #8]
  2c:	mov	w0, #0x1                   	// #1
  30:	ldr	x30, [sp, #16]
  34:	str	w1, [x2]
  38:	ldp	x19, x20, [sp], #32
  3c:	ret
  40:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  44:	mov	x0, x19
  48:	add	x1, x1, #0x0
  4c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  50:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x24>
  54:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  58:	mov	x0, x19
  5c:	add	x1, x1, #0x0
  60:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  64:	cbz	w0, 24 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x24>
  68:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  6c:	mov	x0, x19
  70:	add	x1, x1, #0x0
  74:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  78:	cbz	w0, 90 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x90>
  7c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  80:	mov	x0, x19
  84:	add	x1, x1, #0x0
  88:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  8c:	cbnz	w0, 98 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x98>
  90:	mov	w1, #0x1                   	// #1
  94:	b	28 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x28>
  98:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  9c:	mov	x0, x19
  a0:	add	x1, x1, #0x0
  a4:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  a8:	cbz	w0, 90 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0x90>
  ac:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  b0:	mov	x0, x19
  b4:	add	x1, x1, #0x0
  b8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  bc:	cbz	w0, f4 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0xf4>
  c0:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  c4:	mov	x0, x19
  c8:	add	x1, x1, #0x0
  cc:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  d0:	cbz	w0, f4 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc+0xf4>
  d4:	mov	x1, x19
  d8:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerINS_16HandleSignalModeEE5ParseEPKc>
  dc:	add	x0, x0, #0x0
  e0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  e4:	mov	w0, #0x0                   	// #0
  e8:	ldr	x30, [sp, #16]
  ec:	ldp	x19, x20, [sp], #32
  f0:	ret
  f4:	ldr	x1, [x20, #8]
  f8:	mov	w2, #0x2                   	// #2
  fc:	mov	w0, #0x1                   	// #1
 100:	ldr	x30, [sp, #16]
 104:	str	w2, [x1]
 108:	ldp	x19, x20, [sp], #32
 10c:	ret

Disassembly of section .text._ZN11__sanitizer11FlagHandlerIbE5ParseEPKc:

0000000000000000 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>:
   0:	mov	x2, x0
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x19, x1
   c:	mov	x0, x19
  10:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  14:	add	x1, x1, #0x0
  18:	ldr	x20, [x2, #8]
  1c:	str	x30, [sp, #16]
  20:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  24:	cbnz	w0, 3c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x3c>
  28:	mov	w0, #0x1                   	// #1
  2c:	strb	wzr, [x20]
  30:	ldr	x30, [sp, #16]
  34:	ldp	x19, x20, [sp], #32
  38:	ret
  3c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  40:	mov	x0, x19
  44:	add	x1, x1, #0x0
  48:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  4c:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  50:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  54:	mov	x0, x19
  58:	add	x1, x1, #0x0
  5c:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  60:	cbz	w0, 28 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x28>
  64:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  68:	mov	x0, x19
  6c:	add	x1, x1, #0x0
  70:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  74:	cbz	w0, 8c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x8c>
  78:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  7c:	mov	x0, x19
  80:	add	x1, x1, #0x0
  84:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  88:	cbnz	w0, 9c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x9c>
  8c:	mov	w1, #0x1                   	// #1
  90:	mov	w0, #0x1                   	// #1
  94:	strb	w1, [x20]
  98:	b	30 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x30>
  9c:	adrp	x1, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  a0:	mov	x0, x19
  a4:	add	x1, x1, #0x0
  a8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  ac:	cbz	w0, 8c <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc+0x8c>
  b0:	mov	x1, x19
  b4:	adrp	x0, 0 <_ZN11__sanitizer11FlagHandlerIbE5ParseEPKc>
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  c0:	mov	w0, #0x0                   	// #0
  c4:	ldr	x30, [sp, #16]
  c8:	ldp	x19, x20, [sp], #32
  cc:	ret

Disassembly of section .text._ZN11__sanitizer18FlagHandlerInclude5ParseEPKc:

0000000000000000 <_ZN11__sanitizer18FlagHandlerInclude5ParseEPKc>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x1
   8:	mov	x20, x0
   c:	mov	x0, x1
  10:	mov	w1, #0x25                  	// #37
  14:	str	x30, [sp, #24]
  18:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
  1c:	cbz	x0, 80 <_ZN11__sanitizer18FlagHandlerInclude5ParseEPKc+0x80>
  20:	mov	w2, #0x0                   	// #0
  24:	adrp	x1, 0 <_ZN11__sanitizer18FlagHandlerInclude5ParseEPKc>
  28:	mov	x0, #0x1000                	// #4096
  2c:	add	x1, x1, #0x0
  30:	str	x21, [sp, #16]
  34:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  38:	mov	x21, x0
  3c:	mov	x2, #0x1000                	// #4096
  40:	mov	x0, x19
  44:	mov	x1, x21
  48:	bl	108 <_ZN11__sanitizer22SubstituteForFlagValueEPKcPcm>
  4c:	ldrb	w2, [x20, #16]
  50:	mov	x1, x21
  54:	ldr	x0, [x20, #8]
  58:	bl	0 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb>
  5c:	mov	w19, w0
  60:	mov	x1, #0x1000                	// #4096
  64:	mov	x0, x21
  68:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  6c:	mov	w0, w19
  70:	ldr	x21, [sp, #16]
  74:	ldr	x30, [sp, #24]
  78:	ldp	x19, x20, [sp], #32
  7c:	ret
  80:	ldrb	w2, [x20, #16]
  84:	mov	x1, x19
  88:	ldr	x0, [x20, #8]
  8c:	ldr	x30, [sp, #24]
  90:	ldp	x19, x20, [sp], #32
  94:	b	0 <_ZN11__sanitizer10FlagParser9ParseFileEPKcb>

sanitizer_libc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer15internal_memchrEPKvim>:
       0:	cbz	x2, 28 <_ZN11__sanitizer15internal_memchrEPKvim+0x28>
       4:	add	x3, x0, x2
       8:	b	18 <_ZN11__sanitizer15internal_memchrEPKvim+0x18>
       c:	add	x0, x0, #0x1
      10:	cmp	x3, x0
      14:	b.eq	28 <_ZN11__sanitizer15internal_memchrEPKvim+0x28>  // b.none
      18:	ldrb	w2, [x0]
      1c:	cmp	w2, w1
      20:	b.ne	c <_ZN11__sanitizer15internal_memchrEPKvim+0xc>  // b.any
      24:	ret
      28:	mov	x0, #0x0                   	// #0
      2c:	ret

0000000000000030 <_ZN11__sanitizer16internal_memrchrEPKvim>:
      30:	mov	x3, x0
      34:	cbz	x2, 5c <_ZN11__sanitizer16internal_memrchrEPKvim+0x2c>
      38:	add	x4, x0, x2
      3c:	mov	x0, #0x0                   	// #0
      40:	ldrb	w2, [x3]
      44:	cmp	w1, w2
      48:	csel	x0, x0, x3, ne  // ne = any
      4c:	add	x3, x3, #0x1
      50:	cmp	x4, x3
      54:	b.ne	40 <_ZN11__sanitizer16internal_memrchrEPKvim+0x10>  // b.any
      58:	ret
      5c:	mov	x0, #0x0                   	// #0
      60:	ret
      64:	nop

0000000000000068 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>:
      68:	cbz	x2, 9c <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x34>
      6c:	mov	x3, #0x0                   	// #0
      70:	b	7c <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x14>
      74:	cmp	x2, x3
      78:	b.eq	9c <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0x34>  // b.none
      7c:	ldrb	w5, [x0, x3]
      80:	ldrb	w4, [x1, x3]
      84:	add	x3, x3, #0x1
      88:	cmp	w5, w4
      8c:	b.eq	74 <_ZN11__sanitizer15internal_memcmpEPKvS1_m+0xc>  // b.none
      90:	mov	w0, #0x1                   	// #1
      94:	cneg	w0, w0, cc  // cc = lo, ul, last
      98:	ret
      9c:	mov	w0, #0x0                   	// #0
      a0:	ret
      a4:	nop

00000000000000a8 <_ZN11__sanitizer15internal_memcpyEPvPKvm>:
      a8:	cbz	x2, 210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>
      ac:	add	x3, x0, #0xf
      b0:	sub	x4, x2, #0x1
      b4:	sub	x3, x3, x1
      b8:	cmp	x3, #0x1e
      bc:	ccmp	x4, #0xe, #0x0, hi  // hi = pmore
      c0:	b.ls	214 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x16c>  // b.plast
      c4:	and	x4, x2, #0xfffffffffffffff0
      c8:	mov	x3, #0x0                   	// #0
      cc:	nop
      d0:	ldr	q0, [x1, x3]
      d4:	str	q0, [x0, x3]
      d8:	add	x3, x3, #0x10
      dc:	cmp	x3, x4
      e0:	b.ne	d0 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x28>  // b.any
      e4:	tst	x2, #0xf
      e8:	and	x3, x2, #0xfffffffffffffff0
      ec:	b.eq	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.none
      f0:	ldrb	w5, [x1, x3]
      f4:	add	x4, x3, #0x1
      f8:	strb	w5, [x0, x3]
      fc:	cmp	x2, x4
     100:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     104:	ldrb	w6, [x1, x4]
     108:	add	x5, x3, #0x2
     10c:	strb	w6, [x0, x4]
     110:	cmp	x2, x5
     114:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     118:	ldrb	w6, [x1, x5]
     11c:	add	x4, x3, #0x3
     120:	strb	w6, [x0, x5]
     124:	cmp	x2, x4
     128:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     12c:	ldrb	w6, [x1, x4]
     130:	add	x5, x3, #0x4
     134:	strb	w6, [x0, x4]
     138:	cmp	x2, x5
     13c:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     140:	ldrb	w6, [x1, x5]
     144:	add	x4, x3, #0x5
     148:	strb	w6, [x0, x5]
     14c:	cmp	x2, x4
     150:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     154:	ldrb	w6, [x1, x4]
     158:	add	x5, x3, #0x6
     15c:	strb	w6, [x0, x4]
     160:	cmp	x2, x5
     164:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     168:	ldrb	w6, [x1, x5]
     16c:	add	x4, x3, #0x7
     170:	strb	w6, [x0, x5]
     174:	cmp	x2, x4
     178:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     17c:	ldrb	w6, [x1, x4]
     180:	add	x5, x3, #0x8
     184:	strb	w6, [x0, x4]
     188:	cmp	x2, x5
     18c:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     190:	ldrb	w6, [x1, x5]
     194:	add	x4, x3, #0x9
     198:	strb	w6, [x0, x5]
     19c:	cmp	x2, x4
     1a0:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     1a4:	ldrb	w6, [x1, x4]
     1a8:	add	x5, x3, #0xa
     1ac:	strb	w6, [x0, x4]
     1b0:	cmp	x2, x5
     1b4:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     1b8:	ldrb	w6, [x1, x5]
     1bc:	add	x4, x3, #0xb
     1c0:	strb	w6, [x0, x5]
     1c4:	cmp	x2, x4
     1c8:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     1cc:	ldrb	w6, [x1, x4]
     1d0:	add	x5, x3, #0xc
     1d4:	strb	w6, [x0, x4]
     1d8:	cmp	x2, x5
     1dc:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     1e0:	ldrb	w6, [x1, x5]
     1e4:	add	x4, x3, #0xd
     1e8:	strb	w6, [x0, x5]
     1ec:	cmp	x2, x4
     1f0:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     1f4:	ldrb	w5, [x1, x4]
     1f8:	add	x3, x3, #0xe
     1fc:	strb	w5, [x0, x4]
     200:	cmp	x2, x3
     204:	b.ls	210 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x168>  // b.plast
     208:	ldrb	w1, [x1, x3]
     20c:	strb	w1, [x0, x3]
     210:	ret
     214:	mov	x3, #0x0                   	// #0
     218:	ldrb	w4, [x1, x3]
     21c:	strb	w4, [x0, x3]
     220:	add	x3, x3, #0x1
     224:	cmp	x2, x3
     228:	b.ne	218 <_ZN11__sanitizer15internal_memcpyEPvPKvm+0x170>  // b.any
     22c:	ret

0000000000000230 <_ZN11__sanitizer16internal_memmoveEPvPKvm>:
     230:	cmp	x0, x1
     234:	b.cs	3a4 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x174>  // b.hs, b.nlast
     238:	cmp	x2, #0x0
     23c:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     240:	add	x3, x0, #0xf
     244:	sub	x4, x2, #0x1
     248:	sub	x3, x3, x1
     24c:	cmp	x3, #0x1e
     250:	ccmp	x4, #0xe, #0x0, hi  // hi = pmore
     254:	b.ls	550 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x320>  // b.plast
     258:	and	x4, x2, #0xfffffffffffffff0
     25c:	mov	x3, #0x0                   	// #0
     260:	ldr	q0, [x1, x3]
     264:	str	q0, [x0, x3]
     268:	add	x3, x3, #0x10
     26c:	cmp	x3, x4
     270:	b.ne	260 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x30>  // b.any
     274:	tst	x2, #0xf
     278:	and	x3, x2, #0xfffffffffffffff0
     27c:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     280:	ldrb	w5, [x1, x3]
     284:	add	x4, x3, #0x1
     288:	strb	w5, [x0, x3]
     28c:	cmp	x4, x2
     290:	b.ge	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.tcont
     294:	ldrb	w6, [x1, x4]
     298:	add	x5, x3, #0x2
     29c:	strb	w6, [x0, x4]
     2a0:	cmp	x2, x5
     2a4:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     2a8:	ldrb	w6, [x1, x5]
     2ac:	add	x4, x3, #0x3
     2b0:	strb	w6, [x0, x5]
     2b4:	cmp	x2, x4
     2b8:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     2bc:	ldrb	w6, [x1, x4]
     2c0:	add	x5, x3, #0x4
     2c4:	strb	w6, [x0, x4]
     2c8:	cmp	x2, x5
     2cc:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     2d0:	ldrb	w6, [x1, x5]
     2d4:	add	x4, x3, #0x5
     2d8:	strb	w6, [x0, x5]
     2dc:	cmp	x2, x4
     2e0:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     2e4:	ldrb	w6, [x1, x4]
     2e8:	add	x5, x3, #0x6
     2ec:	strb	w6, [x0, x4]
     2f0:	cmp	x2, x5
     2f4:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     2f8:	ldrb	w6, [x1, x5]
     2fc:	add	x4, x3, #0x7
     300:	strb	w6, [x0, x5]
     304:	cmp	x2, x4
     308:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     30c:	ldrb	w6, [x1, x4]
     310:	add	x5, x3, #0x8
     314:	strb	w6, [x0, x4]
     318:	cmp	x2, x5
     31c:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     320:	ldrb	w6, [x1, x5]
     324:	add	x4, x3, #0x9
     328:	strb	w6, [x0, x5]
     32c:	cmp	x2, x4
     330:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     334:	ldrb	w6, [x1, x4]
     338:	add	x5, x3, #0xa
     33c:	strb	w6, [x0, x4]
     340:	cmp	x2, x5
     344:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     348:	ldrb	w6, [x1, x5]
     34c:	add	x4, x3, #0xb
     350:	strb	w6, [x0, x5]
     354:	cmp	x2, x4
     358:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     35c:	ldrb	w6, [x1, x4]
     360:	add	x5, x3, #0xc
     364:	strb	w6, [x0, x4]
     368:	cmp	x2, x5
     36c:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     370:	ldrb	w6, [x1, x5]
     374:	add	x4, x3, #0xd
     378:	strb	w6, [x0, x5]
     37c:	cmp	x2, x4
     380:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     384:	ldrb	w5, [x1, x4]
     388:	add	x3, x3, #0xe
     38c:	strb	w5, [x0, x4]
     390:	cmp	x2, x3
     394:	b.le	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     398:	ldrb	w1, [x1, x3]
     39c:	strb	w1, [x0, x3]
     3a0:	ret
     3a4:	cmp	x2, #0x0
     3a8:	ccmp	x0, x1, #0x0, gt
     3ac:	b.ls	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.plast
     3b0:	sub	x4, x2, #0x10
     3b4:	add	x3, x0, x2
     3b8:	add	x7, x1, x4
     3bc:	add	x4, x0, x4
     3c0:	cmp	x3, x7
     3c4:	add	x3, x1, x2
     3c8:	ccmp	x3, x4, #0x0, hi  // hi = pmore
     3cc:	sub	x5, x2, #0x1
     3d0:	ccmp	x5, #0xe, #0x0, ls  // ls = plast
     3d4:	b.ls	524 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x2f4>  // b.plast
     3d8:	neg	x6, x2, lsr #4
     3dc:	mov	x3, #0x0                   	// #0
     3e0:	lsl	x6, x6, #4
     3e4:	nop
     3e8:	ldr	q0, [x7, x3]
     3ec:	str	q0, [x4, x3]
     3f0:	sub	x3, x3, #0x10
     3f4:	cmp	x3, x6
     3f8:	b.ne	3e8 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x1b8>  // b.any
     3fc:	and	x4, x2, #0xfffffffffffffff0
     400:	sub	x3, x5, x4
     404:	cmp	x2, x4
     408:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     40c:	ldrb	w4, [x1, x3]
     410:	sub	x2, x3, #0x1
     414:	strb	w4, [x0, x3]
     418:	cbz	x3, 3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     41c:	ldrb	w4, [x1, x2]
     420:	cmp	x3, #0x1
     424:	strb	w4, [x0, x2]
     428:	sub	x2, x3, #0x2
     42c:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     430:	ldrb	w4, [x1, x2]
     434:	cmp	x3, #0x2
     438:	strb	w4, [x0, x2]
     43c:	sub	x2, x3, #0x3
     440:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     444:	ldrb	w4, [x1, x2]
     448:	cmp	x3, #0x3
     44c:	strb	w4, [x0, x2]
     450:	sub	x2, x3, #0x4
     454:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     458:	ldrb	w4, [x1, x2]
     45c:	cmp	x3, #0x4
     460:	strb	w4, [x0, x2]
     464:	sub	x2, x3, #0x5
     468:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     46c:	ldrb	w4, [x1, x2]
     470:	cmp	x3, #0x5
     474:	strb	w4, [x0, x2]
     478:	sub	x2, x3, #0x6
     47c:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     480:	ldrb	w4, [x1, x2]
     484:	cmp	x3, #0x6
     488:	strb	w4, [x0, x2]
     48c:	sub	x2, x3, #0x7
     490:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     494:	ldrb	w4, [x1, x2]
     498:	cmp	x3, #0x7
     49c:	strb	w4, [x0, x2]
     4a0:	sub	x2, x3, #0x8
     4a4:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     4a8:	ldrb	w4, [x1, x2]
     4ac:	cmp	x3, #0x8
     4b0:	strb	w4, [x0, x2]
     4b4:	sub	x2, x3, #0x9
     4b8:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     4bc:	ldrb	w4, [x1, x2]
     4c0:	cmp	x3, #0x9
     4c4:	strb	w4, [x0, x2]
     4c8:	sub	x2, x3, #0xa
     4cc:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     4d0:	ldrb	w4, [x1, x2]
     4d4:	cmp	x3, #0xa
     4d8:	strb	w4, [x0, x2]
     4dc:	sub	x2, x3, #0xb
     4e0:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     4e4:	ldrb	w4, [x1, x2]
     4e8:	cmp	x3, #0xb
     4ec:	strb	w4, [x0, x2]
     4f0:	sub	x2, x3, #0xc
     4f4:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     4f8:	ldrb	w4, [x1, x2]
     4fc:	cmp	x3, #0xc
     500:	strb	w4, [x0, x2]
     504:	sub	x2, x3, #0xd
     508:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     50c:	ldrb	w4, [x1, x2]
     510:	cmp	x3, #0xd
     514:	strb	w4, [x0, x2]
     518:	sub	x3, x3, #0xe
     51c:	b.ne	398 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x168>  // b.any
     520:	ret
     524:	ldrb	w2, [x1, x5]
     528:	strb	w2, [x0, x5]
     52c:	sub	x5, x5, #0x1
     530:	cmn	x5, #0x1
     534:	b.eq	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>  // b.none
     538:	ldrb	w2, [x1, x5]
     53c:	strb	w2, [x0, x5]
     540:	sub	x5, x5, #0x1
     544:	cmn	x5, #0x1
     548:	b.ne	524 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x2f4>  // b.any
     54c:	b	3a0 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x170>
     550:	mov	x3, #0x0                   	// #0
     554:	nop
     558:	ldrb	w4, [x1, x3]
     55c:	strb	w4, [x0, x3]
     560:	add	x3, x3, #0x1
     564:	cmp	x2, x3
     568:	b.ne	558 <_ZN11__sanitizer16internal_memmoveEPvPKvm+0x328>  // b.any
     56c:	ret

0000000000000570 <_ZN11__sanitizer15internal_memsetEPvim>:
     570:	orr	x3, x0, x2
     574:	ands	x3, x3, #0xf
     578:	b.eq	5a0 <_ZN11__sanitizer15internal_memsetEPvim+0x30>  // b.none
     57c:	cbz	x2, 59c <_ZN11__sanitizer15internal_memsetEPvim+0x2c>
     580:	and	w3, w1, #0xff
     584:	add	x2, x0, x2
     588:	mov	x1, x0
     58c:	nop
     590:	strb	w3, [x1], #1
     594:	cmp	x1, x2
     598:	b.ne	590 <_ZN11__sanitizer15internal_memsetEPvim+0x20>  // b.any
     59c:	ret
     5a0:	sxtw	x4, w1
     5a4:	sbfiz	x1, x1, #8, #32
     5a8:	orr	x1, x4, x1
     5ac:	and	x2, x2, #0xfffffffffffffff8
     5b0:	add	x4, x0, x2
     5b4:	orr	x1, x1, x1, lsl #16
     5b8:	cmp	x0, x4
     5bc:	orr	x4, x1, x1, lsl #32
     5c0:	b.cs	59c <_ZN11__sanitizer15internal_memsetEPvim+0x2c>  // b.hs, b.nlast
     5c4:	sub	x1, x2, #0x1
     5c8:	dup	v0.2d, x4
     5cc:	lsr	x1, x1, #4
     5d0:	add	x1, x1, #0x1
     5d4:	nop
     5d8:	lsl	x2, x3, #4
     5dc:	add	x3, x3, #0x1
     5e0:	cmp	x1, x3
     5e4:	str	q0, [x0, x2]
     5e8:	b.hi	5d8 <_ZN11__sanitizer15internal_memsetEPvim+0x68>  // b.pmore
     5ec:	ret

00000000000005f0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>:
     5f0:	ldrb	w4, [x0]
     5f4:	mov	x6, x0
     5f8:	cbz	w4, 63c <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x4c>
     5fc:	ldrb	w5, [x1]
     600:	mov	x0, #0x0                   	// #0
     604:	nop
     608:	cmp	w4, w5
     60c:	b.eq	628 <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x38>  // b.none
     610:	mov	w2, w5
     614:	mov	x3, x1
     618:	cbz	w2, 62c <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x3c>
     61c:	ldrb	w2, [x3, #1]!
     620:	cmp	w4, w2
     624:	b.ne	618 <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x28>  // b.any
     628:	ret
     62c:	add	x0, x0, #0x1
     630:	ldrb	w4, [x6, x0]
     634:	cbnz	w4, 608 <_ZN11__sanitizer16internal_strcspnEPKcS1_+0x18>
     638:	ret
     63c:	mov	x0, #0x0                   	// #0
     640:	ret
     644:	nop

0000000000000648 <_ZN11__sanitizer15internal_strdupEPKc>:
     648:	stp	x19, x20, [sp, #-32]!
     64c:	mov	x20, x0
     650:	str	x30, [sp, #24]
     654:	ldrb	w0, [x0]
     658:	cbz	w0, 820 <_ZN11__sanitizer15internal_strdupEPKc+0x1d8>
     65c:	mov	x19, #0x0                   	// #0
     660:	str	x21, [sp, #16]
     664:	nop
     668:	mov	x21, x19
     66c:	add	x19, x19, #0x1
     670:	ldrb	w0, [x20, x19]
     674:	cbnz	w0, 668 <_ZN11__sanitizer15internal_strdupEPKc+0x20>
     678:	mov	x1, #0x0                   	// #0
     67c:	add	x0, x21, #0x2
     680:	mov	x2, #0x0                   	// #0
     684:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     688:	add	x1, x20, #0xf
     68c:	sub	x1, x1, x0
     690:	cmp	x1, #0x1e
     694:	ccmp	x21, #0xe, #0x0, hi  // hi = pmore
     698:	b.ls	800 <_ZN11__sanitizer15internal_strdupEPKc+0x1b8>  // b.plast
     69c:	and	x2, x19, #0xfffffffffffffff0
     6a0:	mov	x1, #0x0                   	// #0
     6a4:	nop
     6a8:	ldr	q0, [x20, x1]
     6ac:	str	q0, [x0, x1]
     6b0:	add	x1, x1, #0x10
     6b4:	cmp	x1, x2
     6b8:	b.ne	6a8 <_ZN11__sanitizer15internal_strdupEPKc+0x60>  // b.any
     6bc:	tst	x19, #0xf
     6c0:	and	x1, x19, #0xfffffffffffffff0
     6c4:	b.eq	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.none
     6c8:	ldrb	w3, [x20, x1]
     6cc:	add	x2, x1, #0x1
     6d0:	strb	w3, [x0, x1]
     6d4:	cmp	x19, x2
     6d8:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     6dc:	ldrb	w4, [x20, x2]
     6e0:	add	x3, x1, #0x2
     6e4:	strb	w4, [x0, x2]
     6e8:	cmp	x19, x3
     6ec:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     6f0:	ldrb	w4, [x20, x3]
     6f4:	add	x2, x1, #0x3
     6f8:	strb	w4, [x0, x3]
     6fc:	cmp	x19, x2
     700:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     704:	ldrb	w4, [x20, x2]
     708:	add	x3, x1, #0x4
     70c:	strb	w4, [x0, x2]
     710:	cmp	x19, x3
     714:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     718:	ldrb	w4, [x20, x3]
     71c:	add	x2, x1, #0x5
     720:	strb	w4, [x0, x3]
     724:	cmp	x19, x2
     728:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     72c:	ldrb	w4, [x20, x2]
     730:	add	x3, x1, #0x6
     734:	strb	w4, [x0, x2]
     738:	cmp	x19, x3
     73c:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     740:	ldrb	w4, [x20, x3]
     744:	add	x2, x1, #0x7
     748:	strb	w4, [x0, x3]
     74c:	cmp	x19, x2
     750:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     754:	ldrb	w4, [x20, x2]
     758:	add	x3, x1, #0x8
     75c:	strb	w4, [x0, x2]
     760:	cmp	x19, x3
     764:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     768:	ldrb	w4, [x20, x3]
     76c:	add	x2, x1, #0x9
     770:	strb	w4, [x0, x3]
     774:	cmp	x19, x2
     778:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     77c:	ldrb	w4, [x20, x2]
     780:	add	x3, x1, #0xa
     784:	strb	w4, [x0, x2]
     788:	cmp	x19, x3
     78c:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     790:	ldrb	w4, [x20, x3]
     794:	add	x2, x1, #0xb
     798:	strb	w4, [x0, x3]
     79c:	cmp	x19, x2
     7a0:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     7a4:	ldrb	w4, [x20, x2]
     7a8:	add	x3, x1, #0xc
     7ac:	strb	w4, [x0, x2]
     7b0:	cmp	x19, x3
     7b4:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     7b8:	ldrb	w4, [x20, x3]
     7bc:	add	x2, x1, #0xd
     7c0:	strb	w4, [x0, x3]
     7c4:	cmp	x19, x2
     7c8:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     7cc:	ldrb	w3, [x20, x2]
     7d0:	add	x1, x1, #0xe
     7d4:	strb	w3, [x0, x2]
     7d8:	cmp	x19, x1
     7dc:	b.ls	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>  // b.plast
     7e0:	ldrb	w2, [x20, x1]
     7e4:	strb	w2, [x0, x1]
     7e8:	add	x19, x0, x19
     7ec:	ldr	x21, [sp, #16]
     7f0:	strb	wzr, [x19]
     7f4:	ldr	x30, [sp, #24]
     7f8:	ldp	x19, x20, [sp], #32
     7fc:	ret
     800:	mov	x1, #0x0                   	// #0
     804:	nop
     808:	ldrb	w3, [x20, x1]
     80c:	cmp	x21, x1
     810:	strb	w3, [x0, x1]
     814:	add	x1, x1, #0x1
     818:	b.ne	808 <_ZN11__sanitizer15internal_strdupEPKc+0x1c0>  // b.any
     81c:	b	7e8 <_ZN11__sanitizer15internal_strdupEPKc+0x1a0>
     820:	mov	x2, #0x0                   	// #0
     824:	mov	x1, #0x0                   	// #0
     828:	mov	x0, #0x1                   	// #1
     82c:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     830:	mov	x19, x0
     834:	strb	wzr, [x19]
     838:	ldr	x30, [sp, #24]
     83c:	ldp	x19, x20, [sp], #32
     840:	ret
     844:	nop

0000000000000848 <_ZN11__sanitizer15internal_strcmpEPKcS1_>:
     848:	ldrb	w3, [x0]
     84c:	mov	x2, #0x1                   	// #1
     850:	ldrb	w4, [x1]
     854:	cmp	w4, w3
     858:	b.ne	878 <_ZN11__sanitizer15internal_strcmpEPKcS1_+0x30>  // b.any
     85c:	nop
     860:	cbz	w3, 888 <_ZN11__sanitizer15internal_strcmpEPKcS1_+0x40>
     864:	ldrb	w3, [x0, x2]
     868:	ldrb	w4, [x1, x2]
     86c:	add	x2, x2, #0x1
     870:	cmp	w3, w4
     874:	b.eq	860 <_ZN11__sanitizer15internal_strcmpEPKcS1_+0x18>  // b.none
     878:	cmp	w3, w4
     87c:	mov	w0, #0x1                   	// #1
     880:	cneg	w0, w0, cc  // cc = lo, ul, last
     884:	ret
     888:	mov	w0, #0x0                   	// #0
     88c:	ret

0000000000000890 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>:
     890:	cbz	x2, 8c8 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x38>
     894:	mov	x3, #0x0                   	// #0
     898:	b	8a8 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x18>
     89c:	cbz	w4, 8c8 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x38>
     8a0:	cmp	x2, x3
     8a4:	b.eq	8c8 <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0x38>  // b.none
     8a8:	ldrb	w4, [x0, x3]
     8ac:	ldrb	w5, [x1, x3]
     8b0:	add	x3, x3, #0x1
     8b4:	cmp	w4, w5
     8b8:	b.eq	89c <_ZN11__sanitizer16internal_strncmpEPKcS1_m+0xc>  // b.none
     8bc:	mov	w0, #0x1                   	// #1
     8c0:	cneg	w0, w0, cc  // cc = lo, ul, last
     8c4:	ret
     8c8:	mov	w0, #0x0                   	// #0
     8cc:	ret

00000000000008d0 <_ZN11__sanitizer15internal_strchrEPKci>:
     8d0:	ldrb	w2, [x0]
     8d4:	and	w3, w1, #0xff
     8d8:	cmp	w2, w1, uxtb
     8dc:	b.eq	8f0 <_ZN11__sanitizer15internal_strchrEPKci+0x20>  // b.none
     8e0:	cbz	w2, 8f4 <_ZN11__sanitizer15internal_strchrEPKci+0x24>
     8e4:	ldrb	w2, [x0, #1]!
     8e8:	cmp	w2, w3
     8ec:	b.ne	8e0 <_ZN11__sanitizer15internal_strchrEPKci+0x10>  // b.any
     8f0:	ret
     8f4:	mov	x0, #0x0                   	// #0
     8f8:	ret
     8fc:	nop

0000000000000900 <_ZN11__sanitizer18internal_strchrnulEPKci>:
     900:	ldrb	w4, [x0]
     904:	mov	x2, x0
     908:	and	w3, w1, #0xff
     90c:	cmp	w4, w1, uxtb
     910:	b.eq	928 <_ZN11__sanitizer18internal_strchrnulEPKci+0x28>  // b.none
     914:	mov	w1, w4
     918:	cbz	w1, 92c <_ZN11__sanitizer18internal_strchrnulEPKci+0x2c>
     91c:	ldrb	w1, [x0, #1]!
     920:	cmp	w1, w3
     924:	b.ne	918 <_ZN11__sanitizer18internal_strchrnulEPKci+0x18>  // b.any
     928:	ret
     92c:	cbz	w4, 948 <_ZN11__sanitizer18internal_strchrnulEPKci+0x48>
     930:	add	x1, x2, #0x1
     934:	nop
     938:	mov	x0, x1
     93c:	ldrb	w2, [x1], #1
     940:	cbnz	w2, 938 <_ZN11__sanitizer18internal_strchrnulEPKci+0x38>
     944:	ret
     948:	mov	x0, x2
     94c:	ret

0000000000000950 <_ZN11__sanitizer16internal_strrchrEPKci>:
     950:	ldrb	w3, [x0]
     954:	mov	x2, x0
     958:	mov	x0, #0x0                   	// #0
     95c:	cbz	w3, 970 <_ZN11__sanitizer16internal_strrchrEPKci+0x20>
     960:	cmp	w1, w3
     964:	csel	x0, x0, x2, ne  // ne = any
     968:	ldrb	w3, [x2, #1]!
     96c:	cbnz	w3, 960 <_ZN11__sanitizer16internal_strrchrEPKci+0x10>
     970:	ret
     974:	nop

0000000000000978 <_ZN11__sanitizer15internal_strlenEPKc>:
     978:	mov	x2, x0
     97c:	ldrb	w0, [x0]
     980:	cbz	w0, 998 <_ZN11__sanitizer15internal_strlenEPKc+0x20>
     984:	mov	x0, #0x0                   	// #0
     988:	add	x0, x0, #0x1
     98c:	ldrb	w1, [x2, x0]
     990:	cbnz	w1, 988 <_ZN11__sanitizer15internal_strlenEPKc+0x10>
     994:	ret
     998:	mov	x0, #0x0                   	// #0
     99c:	ret

00000000000009a0 <_ZN11__sanitizer16internal_strlcatEPcPKcm>:
     9a0:	ldrb	w3, [x1]
     9a4:	mov	x4, #0x0                   	// #0
     9a8:	cbz	w3, 9bc <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1c>
     9ac:	nop
     9b0:	add	x4, x4, #0x1
     9b4:	ldrb	w3, [x1, x4]
     9b8:	cbnz	w3, 9b0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x10>
     9bc:	cbz	x2, ce0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x340>
     9c0:	mov	x3, #0x0                   	// #0
     9c4:	b	9d4 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x34>
     9c8:	add	x3, x3, #0x1
     9cc:	cmp	x2, x3
     9d0:	b.eq	ce0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x340>  // b.none
     9d4:	ldrb	w5, [x0, x3]
     9d8:	add	x7, x0, x3
     9dc:	cbnz	w5, 9c8 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x28>
     9e0:	sub	x5, x2, x3
     9e4:	cmp	x5, x4
     9e8:	b.ls	b60 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1c0>  // b.plast
     9ec:	cmp	x1, x7
     9f0:	add	x5, x4, #0x1
     9f4:	b.ls	ce8 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x348>  // b.plast
     9f8:	cmp	x5, #0x0
     9fc:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     a00:	add	x0, x1, #0xf
     a04:	sub	x0, x0, x7
     a08:	cmp	x0, #0x1e
     a0c:	ccmp	x4, #0xe, #0x0, hi  // hi = pmore
     a10:	b.ls	1068 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x6c8>  // b.plast
     a14:	and	x2, x5, #0xfffffffffffffff0
     a18:	mov	x0, #0x0                   	// #0
     a1c:	nop
     a20:	ldr	q0, [x1, x0]
     a24:	str	q0, [x7, x0]
     a28:	add	x0, x0, #0x10
     a2c:	cmp	x0, x2
     a30:	b.ne	a20 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x80>  // b.any
     a34:	tst	x5, #0xf
     a38:	and	x0, x5, #0xfffffffffffffff0
     a3c:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     a40:	ldrb	w6, [x1, x0]
     a44:	add	x2, x0, #0x1
     a48:	strb	w6, [x7, x0]
     a4c:	cmp	x5, x2
     a50:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     a54:	ldrb	w8, [x1, x2]
     a58:	add	x6, x0, #0x2
     a5c:	strb	w8, [x7, x2]
     a60:	cmp	x5, x6
     a64:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     a68:	ldrb	w8, [x1, x6]
     a6c:	add	x2, x0, #0x3
     a70:	strb	w8, [x7, x6]
     a74:	cmp	x5, x2
     a78:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     a7c:	ldrb	w8, [x1, x2]
     a80:	add	x6, x0, #0x4
     a84:	strb	w8, [x7, x2]
     a88:	cmp	x5, x6
     a8c:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     a90:	ldrb	w8, [x1, x6]
     a94:	add	x2, x0, #0x5
     a98:	strb	w8, [x7, x6]
     a9c:	cmp	x5, x2
     aa0:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     aa4:	ldrb	w8, [x1, x2]
     aa8:	add	x6, x0, #0x6
     aac:	strb	w8, [x7, x2]
     ab0:	cmp	x5, x6
     ab4:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     ab8:	ldrb	w8, [x1, x6]
     abc:	add	x2, x0, #0x7
     ac0:	strb	w8, [x7, x6]
     ac4:	cmp	x5, x2
     ac8:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     acc:	ldrb	w8, [x1, x2]
     ad0:	add	x6, x0, #0x8
     ad4:	strb	w8, [x7, x2]
     ad8:	cmp	x5, x6
     adc:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     ae0:	ldrb	w8, [x1, x6]
     ae4:	add	x2, x0, #0x9
     ae8:	strb	w8, [x7, x6]
     aec:	cmp	x5, x2
     af0:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     af4:	ldrb	w8, [x1, x2]
     af8:	add	x6, x0, #0xa
     afc:	strb	w8, [x7, x2]
     b00:	cmp	x5, x6
     b04:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     b08:	ldrb	w8, [x1, x6]
     b0c:	add	x2, x0, #0xb
     b10:	strb	w8, [x7, x6]
     b14:	cmp	x5, x2
     b18:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     b1c:	ldrb	w8, [x1, x2]
     b20:	add	x6, x0, #0xc
     b24:	strb	w8, [x7, x2]
     b28:	cmp	x5, x6
     b2c:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     b30:	ldrb	w8, [x1, x6]
     b34:	add	x2, x0, #0xd
     b38:	strb	w8, [x7, x6]
     b3c:	cmp	x5, x2
     b40:	b.le	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     b44:	ldrb	w6, [x1, x2]
     b48:	add	x0, x0, #0xe
     b4c:	strb	w6, [x7, x2]
     b50:	cmp	x5, x0
     b54:	b.gt	e60 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x4c0>
     b58:	add	x0, x4, x3
     b5c:	ret
     b60:	cmp	x1, x7
     b64:	sub	x8, x5, #0x1
     b68:	b.ls	e70 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x4d0>  // b.plast
     b6c:	cmp	x8, #0x0
     b70:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     b74:	add	x6, x1, #0xf
     b78:	sub	x5, x5, #0x2
     b7c:	sub	x6, x6, x7
     b80:	cmp	x6, #0x1e
     b84:	ccmp	x5, #0xe, #0x0, hi  // hi = pmore
     b88:	b.ls	104c <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x6ac>  // b.plast
     b8c:	and	x6, x8, #0xfffffffffffffff0
     b90:	mov	x5, #0x0                   	// #0
     b94:	nop
     b98:	ldr	q0, [x1, x5]
     b9c:	str	q0, [x7, x5]
     ba0:	add	x5, x5, #0x10
     ba4:	cmp	x5, x6
     ba8:	b.ne	b98 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1f8>  // b.any
     bac:	tst	x8, #0xf
     bb0:	and	x5, x8, #0xfffffffffffffff0
     bb4:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     bb8:	ldrb	w9, [x1, x5]
     bbc:	add	x6, x5, #0x1
     bc0:	strb	w9, [x7, x5]
     bc4:	cmp	x8, x6
     bc8:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     bcc:	ldrb	w10, [x1, x6]
     bd0:	add	x9, x5, #0x2
     bd4:	strb	w10, [x7, x6]
     bd8:	cmp	x8, x9
     bdc:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     be0:	ldrb	w10, [x1, x9]
     be4:	add	x6, x5, #0x3
     be8:	strb	w10, [x7, x9]
     bec:	cmp	x8, x6
     bf0:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     bf4:	ldrb	w10, [x1, x6]
     bf8:	add	x9, x5, #0x4
     bfc:	strb	w10, [x7, x6]
     c00:	cmp	x8, x9
     c04:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     c08:	ldrb	w10, [x1, x9]
     c0c:	add	x6, x5, #0x5
     c10:	strb	w10, [x7, x9]
     c14:	cmp	x8, x6
     c18:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     c1c:	ldrb	w10, [x1, x6]
     c20:	add	x9, x5, #0x6
     c24:	strb	w10, [x7, x6]
     c28:	cmp	x8, x9
     c2c:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     c30:	ldrb	w10, [x1, x9]
     c34:	add	x6, x5, #0x7
     c38:	strb	w10, [x7, x9]
     c3c:	cmp	x8, x6
     c40:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     c44:	ldrb	w10, [x1, x6]
     c48:	add	x9, x5, #0x8
     c4c:	strb	w10, [x7, x6]
     c50:	cmp	x8, x9
     c54:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     c58:	ldrb	w10, [x1, x9]
     c5c:	add	x6, x5, #0x9
     c60:	strb	w10, [x7, x9]
     c64:	cmp	x8, x6
     c68:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     c6c:	ldrb	w10, [x1, x6]
     c70:	add	x9, x5, #0xa
     c74:	strb	w10, [x7, x6]
     c78:	cmp	x8, x9
     c7c:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     c80:	ldrb	w10, [x1, x9]
     c84:	add	x6, x5, #0xb
     c88:	strb	w10, [x7, x9]
     c8c:	cmp	x8, x6
     c90:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     c94:	ldrb	w10, [x1, x6]
     c98:	add	x9, x5, #0xc
     c9c:	strb	w10, [x7, x6]
     ca0:	cmp	x8, x9
     ca4:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     ca8:	ldrb	w10, [x1, x9]
     cac:	add	x6, x5, #0xd
     cb0:	strb	w10, [x7, x9]
     cb4:	cmp	x8, x6
     cb8:	b.le	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     cbc:	ldrb	w9, [x1, x6]
     cc0:	add	x5, x5, #0xe
     cc4:	strb	w9, [x7, x6]
     cc8:	cmp	x8, x5
     ccc:	b.gt	fe8 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x648>
     cd0:	add	x0, x0, x2
     cd4:	sturb	wzr, [x0, #-1]
     cd8:	add	x0, x4, x3
     cdc:	b	b5c <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1bc>
     ce0:	add	x0, x2, x4
     ce4:	ret
     ce8:	cmp	x5, #0x0
     cec:	ccmp	x1, x7, #0x2, gt
     cf0:	b.cs	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.hs, b.nlast
     cf4:	sub	x2, x4, #0xf
     cf8:	add	x0, x1, x5
     cfc:	add	x8, x7, x2
     d00:	add	x2, x1, x2
     d04:	cmp	x8, x0
     d08:	add	x0, x7, x5
     d0c:	ccmp	x0, x2, #0x0, cc  // cc = lo, ul, last
     d10:	mov	x0, x4
     d14:	ccmp	x4, #0xe, #0x0, ls  // ls = plast
     d18:	b.ls	ff4 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x654>  // b.plast
     d1c:	neg	x6, x5, lsr #4
     d20:	mov	x0, #0x0                   	// #0
     d24:	lsl	x6, x6, #4
     d28:	ldr	q0, [x2, x0]
     d2c:	str	q0, [x8, x0]
     d30:	sub	x0, x0, #0x10
     d34:	cmp	x0, x6
     d38:	b.ne	d28 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x388>  // b.any
     d3c:	and	x0, x5, #0xfffffffffffffff0
     d40:	cmp	x5, x0
     d44:	sub	x0, x4, x0
     d48:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     d4c:	ldrb	w5, [x1, x0]
     d50:	sub	x2, x0, #0x1
     d54:	strb	w5, [x7, x0]
     d58:	cbz	x0, b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
     d5c:	ldrb	w5, [x1, x2]
     d60:	cmp	x0, #0x1
     d64:	strb	w5, [x7, x2]
     d68:	sub	x2, x0, #0x2
     d6c:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     d70:	ldrb	w5, [x1, x2]
     d74:	cmp	x0, #0x2
     d78:	strb	w5, [x7, x2]
     d7c:	sub	x2, x0, #0x3
     d80:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     d84:	ldrb	w5, [x1, x2]
     d88:	cmp	x0, #0x3
     d8c:	strb	w5, [x7, x2]
     d90:	sub	x2, x0, #0x4
     d94:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     d98:	ldrb	w5, [x1, x2]
     d9c:	cmp	x0, #0x4
     da0:	strb	w5, [x7, x2]
     da4:	sub	x2, x0, #0x5
     da8:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     dac:	ldrb	w5, [x1, x2]
     db0:	cmp	x0, #0x5
     db4:	strb	w5, [x7, x2]
     db8:	sub	x2, x0, #0x6
     dbc:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     dc0:	ldrb	w5, [x1, x2]
     dc4:	cmp	x0, #0x6
     dc8:	strb	w5, [x7, x2]
     dcc:	sub	x2, x0, #0x7
     dd0:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     dd4:	ldrb	w5, [x1, x2]
     dd8:	cmp	x0, #0x7
     ddc:	strb	w5, [x7, x2]
     de0:	sub	x2, x0, #0x8
     de4:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     de8:	ldrb	w5, [x1, x2]
     dec:	cmp	x0, #0x8
     df0:	strb	w5, [x7, x2]
     df4:	sub	x2, x0, #0x9
     df8:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     dfc:	ldrb	w5, [x1, x2]
     e00:	cmp	x0, #0x9
     e04:	strb	w5, [x7, x2]
     e08:	sub	x2, x0, #0xa
     e0c:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     e10:	ldrb	w5, [x1, x2]
     e14:	cmp	x0, #0xa
     e18:	strb	w5, [x7, x2]
     e1c:	sub	x2, x0, #0xb
     e20:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     e24:	ldrb	w5, [x1, x2]
     e28:	cmp	x0, #0xb
     e2c:	strb	w5, [x7, x2]
     e30:	sub	x2, x0, #0xc
     e34:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     e38:	ldrb	w5, [x1, x2]
     e3c:	cmp	x0, #0xc
     e40:	strb	w5, [x7, x2]
     e44:	sub	x2, x0, #0xd
     e48:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     e4c:	ldrb	w5, [x1, x2]
     e50:	cmp	x0, #0xd
     e54:	strb	w5, [x7, x2]
     e58:	sub	x0, x0, #0xe
     e5c:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
     e60:	ldrb	w1, [x1, x0]
     e64:	strb	w1, [x7, x0]
     e68:	add	x0, x4, x3
     e6c:	b	b5c <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1bc>
     e70:	cmp	x8, #0x0
     e74:	ccmp	x1, x7, #0x2, gt
     e78:	b.cs	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.hs, b.nlast
     e7c:	sub	x9, x5, #0x11
     e80:	add	x6, x1, x8
     e84:	add	x11, x7, x9
     e88:	add	x9, x1, x9
     e8c:	cmp	x6, x11
     e90:	add	x6, x7, x8
     e94:	sub	x5, x5, #0x2
     e98:	ccmp	x6, x9, #0x0, hi  // hi = pmore
     e9c:	ccmp	x5, #0xe, #0x0, ls  // ls = plast
     ea0:	b.ls	1020 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x680>  // b.plast
     ea4:	neg	x10, x8, lsr #4
     ea8:	mov	x6, #0x0                   	// #0
     eac:	lsl	x10, x10, #4
     eb0:	ldr	q0, [x9, x6]
     eb4:	str	q0, [x11, x6]
     eb8:	sub	x6, x6, #0x10
     ebc:	cmp	x6, x10
     ec0:	b.ne	eb0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x510>  // b.any
     ec4:	and	x6, x8, #0xfffffffffffffff0
     ec8:	sub	x5, x5, x6
     ecc:	cmp	x8, x6
     ed0:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     ed4:	ldrb	w8, [x1, x5]
     ed8:	sub	x6, x5, #0x1
     edc:	strb	w8, [x7, x5]
     ee0:	cbz	x5, cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     ee4:	ldrb	w8, [x1, x6]
     ee8:	cmp	x5, #0x1
     eec:	strb	w8, [x7, x6]
     ef0:	sub	x6, x5, #0x2
     ef4:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     ef8:	ldrb	w8, [x1, x6]
     efc:	cmp	x5, #0x2
     f00:	strb	w8, [x7, x6]
     f04:	sub	x6, x5, #0x3
     f08:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     f0c:	ldrb	w8, [x1, x6]
     f10:	cmp	x5, #0x3
     f14:	strb	w8, [x7, x6]
     f18:	sub	x6, x5, #0x4
     f1c:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     f20:	ldrb	w8, [x1, x6]
     f24:	cmp	x5, #0x4
     f28:	strb	w8, [x7, x6]
     f2c:	sub	x6, x5, #0x5
     f30:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     f34:	ldrb	w8, [x1, x6]
     f38:	cmp	x5, #0x5
     f3c:	strb	w8, [x7, x6]
     f40:	sub	x6, x5, #0x6
     f44:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     f48:	ldrb	w8, [x1, x6]
     f4c:	cmp	x5, #0x6
     f50:	strb	w8, [x7, x6]
     f54:	sub	x6, x5, #0x7
     f58:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     f5c:	ldrb	w8, [x1, x6]
     f60:	cmp	x5, #0x7
     f64:	strb	w8, [x7, x6]
     f68:	sub	x6, x5, #0x8
     f6c:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     f70:	ldrb	w8, [x1, x6]
     f74:	cmp	x5, #0x8
     f78:	strb	w8, [x7, x6]
     f7c:	sub	x6, x5, #0x9
     f80:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     f84:	ldrb	w8, [x1, x6]
     f88:	cmp	x5, #0x9
     f8c:	strb	w8, [x7, x6]
     f90:	sub	x6, x5, #0xa
     f94:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     f98:	ldrb	w8, [x1, x6]
     f9c:	cmp	x5, #0xa
     fa0:	strb	w8, [x7, x6]
     fa4:	sub	x6, x5, #0xb
     fa8:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     fac:	ldrb	w8, [x1, x6]
     fb0:	cmp	x5, #0xb
     fb4:	strb	w8, [x7, x6]
     fb8:	sub	x6, x5, #0xc
     fbc:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     fc0:	ldrb	w8, [x1, x6]
     fc4:	cmp	x5, #0xc
     fc8:	strb	w8, [x7, x6]
     fcc:	sub	x6, x5, #0xd
     fd0:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     fd4:	ldrb	w8, [x1, x6]
     fd8:	cmp	x5, #0xd
     fdc:	strb	w8, [x7, x6]
     fe0:	sub	x5, x5, #0xe
     fe4:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
     fe8:	ldrb	w1, [x1, x5]
     fec:	strb	w1, [x7, x5]
     ff0:	b	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
     ff4:	ldrb	w2, [x1, x0]
     ff8:	strb	w2, [x7, x0]
     ffc:	sub	x0, x0, #0x1
    1000:	cmn	x0, #0x1
    1004:	b.eq	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>  // b.none
    1008:	ldrb	w2, [x1, x0]
    100c:	strb	w2, [x7, x0]
    1010:	sub	x0, x0, #0x1
    1014:	cmn	x0, #0x1
    1018:	b.ne	ff4 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x654>  // b.any
    101c:	b	b58 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1b8>
    1020:	ldrb	w6, [x1, x5]
    1024:	strb	w6, [x7, x5]
    1028:	sub	x5, x5, #0x1
    102c:	cmn	x5, #0x1
    1030:	b.eq	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>  // b.none
    1034:	ldrb	w6, [x1, x5]
    1038:	strb	w6, [x7, x5]
    103c:	sub	x5, x5, #0x1
    1040:	cmn	x5, #0x1
    1044:	b.ne	1020 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x680>  // b.any
    1048:	b	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
    104c:	mov	x5, #0x0                   	// #0
    1050:	ldrb	w6, [x1, x5]
    1054:	strb	w6, [x7, x5]
    1058:	add	x5, x5, #0x1
    105c:	cmp	x8, x5
    1060:	b.ne	1050 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x6b0>  // b.any
    1064:	b	cd0 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x330>
    1068:	mov	x0, #0x0                   	// #0
    106c:	nop
    1070:	ldrb	w2, [x1, x0]
    1074:	strb	w2, [x7, x0]
    1078:	add	x0, x0, #0x1
    107c:	cmp	x5, x0
    1080:	b.ne	1070 <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x6d0>  // b.any
    1084:	add	x0, x4, x3
    1088:	b	b5c <_ZN11__sanitizer16internal_strlcatEPcPKcm+0x1bc>
    108c:	nop

0000000000001090 <_ZN11__sanitizer16internal_strncatEPcPKcm>:
    1090:	ldrb	w3, [x0]
    1094:	mov	x4, #0x0                   	// #0
    1098:	cbz	w3, 10f8 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x68>
    109c:	nop
    10a0:	add	x4, x4, #0x1
    10a4:	add	x5, x0, x4
    10a8:	ldrb	w3, [x0, x4]
    10ac:	cbnz	w3, 10a0 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x10>
    10b0:	add	x6, x0, x4
    10b4:	mov	x3, #0x0                   	// #0
    10b8:	cbnz	x2, 10cc <_ZN11__sanitizer16internal_strncatEPcPKcm+0x3c>
    10bc:	b	10e0 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x50>
    10c0:	strb	w7, [x6]
    10c4:	add	x6, x6, #0x1
    10c8:	b.eq	10e8 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x58>  // b.none
    10cc:	ldrb	w7, [x1, x3]
    10d0:	add	x3, x3, #0x1
    10d4:	mov	x5, x6
    10d8:	cmp	x2, x3
    10dc:	cbnz	w7, 10c0 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x30>
    10e0:	strb	wzr, [x5]
    10e4:	ret
    10e8:	add	x4, x2, x4
    10ec:	add	x5, x0, x4
    10f0:	strb	wzr, [x5]
    10f4:	ret
    10f8:	mov	x5, x0
    10fc:	b	10b0 <_ZN11__sanitizer16internal_strncatEPcPKcm+0x20>

0000000000001100 <_ZN11__sanitizer16internal_strlcpyEPcPKcm>:
    1100:	mov	x4, x0
    1104:	ldrb	w0, [x1]
    1108:	cbz	w0, 1760 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x660>
    110c:	mov	x0, #0x0                   	// #0
    1110:	add	x0, x0, #0x1
    1114:	ldrb	w3, [x1, x0]
    1118:	cbnz	w3, 1110 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x10>
    111c:	cmp	x2, x0
    1120:	b.hi	12a8 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a8>  // b.pmore
    1124:	cbnz	x2, 112c <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x2c>
    1128:	ret
    112c:	cmp	x1, x4
    1130:	sub	x5, x2, #0x1
    1134:	b.ls	15c8 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x4c8>  // b.plast
    1138:	cmp	x5, #0x0
    113c:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    1140:	add	x3, x1, #0xf
    1144:	sub	x2, x2, #0x2
    1148:	sub	x3, x3, x4
    114c:	cmp	x3, #0x1e
    1150:	ccmp	x2, #0xe, #0x0, hi  // hi = pmore
    1154:	b.ls	1788 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x688>  // b.plast
    1158:	and	x3, x5, #0xfffffffffffffff0
    115c:	mov	x2, #0x0                   	// #0
    1160:	ldr	q0, [x1, x2]
    1164:	str	q0, [x4, x2]
    1168:	add	x2, x2, #0x10
    116c:	cmp	x2, x3
    1170:	b.ne	1160 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x60>  // b.any
    1174:	tst	x5, #0xf
    1178:	and	x2, x5, #0xfffffffffffffff0
    117c:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    1180:	ldrb	w6, [x1, x2]
    1184:	add	x3, x2, #0x1
    1188:	strb	w6, [x4, x2]
    118c:	cmp	x5, x3
    1190:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    1194:	ldrb	w7, [x1, x3]
    1198:	add	x6, x2, #0x2
    119c:	strb	w7, [x4, x3]
    11a0:	cmp	x5, x6
    11a4:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    11a8:	ldrb	w7, [x1, x6]
    11ac:	add	x3, x2, #0x3
    11b0:	strb	w7, [x4, x6]
    11b4:	cmp	x5, x3
    11b8:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    11bc:	ldrb	w7, [x1, x3]
    11c0:	add	x6, x2, #0x4
    11c4:	strb	w7, [x4, x3]
    11c8:	cmp	x5, x6
    11cc:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    11d0:	ldrb	w7, [x1, x6]
    11d4:	add	x3, x2, #0x5
    11d8:	strb	w7, [x4, x6]
    11dc:	cmp	x5, x3
    11e0:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    11e4:	ldrb	w7, [x1, x3]
    11e8:	add	x6, x2, #0x6
    11ec:	strb	w7, [x4, x3]
    11f0:	cmp	x5, x6
    11f4:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    11f8:	ldrb	w7, [x1, x6]
    11fc:	add	x3, x2, #0x7
    1200:	strb	w7, [x4, x6]
    1204:	cmp	x5, x3
    1208:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    120c:	ldrb	w7, [x1, x3]
    1210:	add	x6, x2, #0x8
    1214:	strb	w7, [x4, x3]
    1218:	cmp	x5, x6
    121c:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    1220:	ldrb	w7, [x1, x6]
    1224:	add	x3, x2, #0x9
    1228:	strb	w7, [x4, x6]
    122c:	cmp	x5, x3
    1230:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    1234:	ldrb	w6, [x1, x3]
    1238:	add	x7, x2, #0xa
    123c:	strb	w6, [x4, x3]
    1240:	cmp	x5, x7
    1244:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    1248:	ldrb	w3, [x1, x7]
    124c:	add	x6, x2, #0xb
    1250:	strb	w3, [x4, x7]
    1254:	cmp	x5, x6
    1258:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    125c:	ldrb	w7, [x1, x6]
    1260:	add	x3, x2, #0xc
    1264:	strb	w7, [x4, x6]
    1268:	cmp	x5, x3
    126c:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    1270:	ldrb	w7, [x1, x3]
    1274:	add	x6, x2, #0xd
    1278:	strb	w7, [x4, x3]
    127c:	cmp	x5, x6
    1280:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    1284:	ldrb	w3, [x1, x6]
    1288:	add	x2, x2, #0xe
    128c:	strb	w3, [x4, x6]
    1290:	cmp	x5, x2
    1294:	b.le	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    1298:	ldrb	w1, [x1, x2]
    129c:	strb	w1, [x4, x2]
    12a0:	strb	wzr, [x4, x5]
    12a4:	ret
    12a8:	cmp	x1, x4
    12ac:	add	x6, x0, #0x1
    12b0:	b.ls	141c <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x31c>  // b.plast
    12b4:	cmp	x6, #0x0
    12b8:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    12bc:	add	x2, x1, #0xf
    12c0:	sub	x2, x2, x4
    12c4:	cmp	x2, #0x1e
    12c8:	ccmp	x0, #0xe, #0x0, hi  // hi = pmore
    12cc:	b.ls	1768 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x668>  // b.plast
    12d0:	and	x3, x6, #0xfffffffffffffff0
    12d4:	mov	x2, #0x0                   	// #0
    12d8:	ldr	q0, [x1, x2]
    12dc:	str	q0, [x4, x2]
    12e0:	add	x2, x2, #0x10
    12e4:	cmp	x2, x3
    12e8:	b.ne	12d8 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1d8>  // b.any
    12ec:	tst	x6, #0xf
    12f0:	and	x2, x6, #0xfffffffffffffff0
    12f4:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    12f8:	ldrb	w5, [x1, x2]
    12fc:	add	x3, x2, #0x1
    1300:	strb	w5, [x4, x2]
    1304:	cmp	x6, x3
    1308:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    130c:	ldrb	w7, [x1, x3]
    1310:	add	x5, x2, #0x2
    1314:	strb	w7, [x4, x3]
    1318:	cmp	x6, x5
    131c:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    1320:	ldrb	w7, [x1, x5]
    1324:	add	x3, x2, #0x3
    1328:	strb	w7, [x4, x5]
    132c:	cmp	x6, x3
    1330:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    1334:	ldrb	w7, [x1, x3]
    1338:	add	x5, x2, #0x4
    133c:	strb	w7, [x4, x3]
    1340:	cmp	x6, x5
    1344:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    1348:	ldrb	w7, [x1, x5]
    134c:	add	x3, x2, #0x5
    1350:	strb	w7, [x4, x5]
    1354:	cmp	x6, x3
    1358:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    135c:	ldrb	w7, [x1, x3]
    1360:	add	x5, x2, #0x6
    1364:	strb	w7, [x4, x3]
    1368:	cmp	x6, x5
    136c:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    1370:	ldrb	w7, [x1, x5]
    1374:	add	x3, x2, #0x7
    1378:	strb	w7, [x4, x5]
    137c:	cmp	x6, x3
    1380:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    1384:	ldrb	w7, [x1, x3]
    1388:	add	x5, x2, #0x8
    138c:	strb	w7, [x4, x3]
    1390:	cmp	x6, x5
    1394:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    1398:	ldrb	w7, [x1, x5]
    139c:	add	x3, x2, #0x9
    13a0:	strb	w7, [x4, x5]
    13a4:	cmp	x6, x3
    13a8:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    13ac:	ldrb	w7, [x1, x3]
    13b0:	add	x5, x2, #0xa
    13b4:	strb	w7, [x4, x3]
    13b8:	cmp	x6, x5
    13bc:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    13c0:	ldrb	w3, [x1, x5]
    13c4:	add	x7, x2, #0xb
    13c8:	strb	w3, [x4, x5]
    13cc:	cmp	x6, x7
    13d0:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    13d4:	ldrb	w5, [x1, x7]
    13d8:	add	x3, x2, #0xc
    13dc:	strb	w5, [x4, x7]
    13e0:	cmp	x6, x3
    13e4:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    13e8:	ldrb	w7, [x1, x3]
    13ec:	add	x5, x2, #0xd
    13f0:	strb	w7, [x4, x3]
    13f4:	cmp	x6, x5
    13f8:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    13fc:	ldrb	w3, [x1, x5]
    1400:	add	x2, x2, #0xe
    1404:	strb	w3, [x4, x5]
    1408:	cmp	x6, x2
    140c:	b.le	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    1410:	ldrb	w1, [x1, x2]
    1414:	strb	w1, [x4, x2]
    1418:	ret
    141c:	cmp	x6, #0x0
    1420:	ccmp	x1, x4, #0x2, gt
    1424:	b.cs	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.hs, b.nlast
    1428:	sub	x3, x0, #0xf
    142c:	add	x2, x1, x6
    1430:	add	x7, x4, x3
    1434:	add	x3, x1, x3
    1438:	cmp	x2, x7
    143c:	add	x2, x4, x6
    1440:	ccmp	x2, x3, #0x0, hi  // hi = pmore
    1444:	mov	x2, x0
    1448:	ccmp	x0, #0xe, #0x0, ls  // ls = plast
    144c:	b.ls	159c <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x49c>  // b.plast
    1450:	neg	x5, x6, lsr #4
    1454:	mov	x2, #0x0                   	// #0
    1458:	lsl	x5, x5, #4
    145c:	nop
    1460:	ldr	q0, [x3, x2]
    1464:	str	q0, [x7, x2]
    1468:	sub	x2, x2, #0x10
    146c:	cmp	x2, x5
    1470:	b.ne	1460 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x360>  // b.any
    1474:	and	x2, x6, #0xfffffffffffffff0
    1478:	cmp	x6, x2
    147c:	sub	x2, x0, x2
    1480:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    1484:	ldrb	w5, [x1, x2]
    1488:	sub	x3, x2, #0x1
    148c:	strb	w5, [x4, x2]
    1490:	cbz	x2, 1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    1494:	ldrb	w5, [x1, x3]
    1498:	cmp	x2, #0x1
    149c:	strb	w5, [x4, x3]
    14a0:	sub	x3, x2, #0x2
    14a4:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    14a8:	ldrb	w5, [x1, x3]
    14ac:	cmp	x2, #0x2
    14b0:	strb	w5, [x4, x3]
    14b4:	sub	x3, x2, #0x3
    14b8:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    14bc:	ldrb	w5, [x1, x3]
    14c0:	cmp	x2, #0x3
    14c4:	strb	w5, [x4, x3]
    14c8:	sub	x3, x2, #0x4
    14cc:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    14d0:	ldrb	w5, [x1, x3]
    14d4:	cmp	x2, #0x4
    14d8:	strb	w5, [x4, x3]
    14dc:	sub	x3, x2, #0x5
    14e0:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    14e4:	ldrb	w5, [x1, x3]
    14e8:	cmp	x2, #0x5
    14ec:	strb	w5, [x4, x3]
    14f0:	sub	x3, x2, #0x6
    14f4:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    14f8:	ldrb	w5, [x1, x3]
    14fc:	cmp	x2, #0x6
    1500:	strb	w5, [x4, x3]
    1504:	sub	x3, x2, #0x7
    1508:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    150c:	ldrb	w5, [x1, x3]
    1510:	cmp	x2, #0x7
    1514:	strb	w5, [x4, x3]
    1518:	sub	x3, x2, #0x8
    151c:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    1520:	ldrb	w5, [x1, x3]
    1524:	cmp	x2, #0x8
    1528:	strb	w5, [x4, x3]
    152c:	sub	x3, x2, #0x9
    1530:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    1534:	ldrb	w5, [x1, x3]
    1538:	cmp	x2, #0x9
    153c:	strb	w5, [x4, x3]
    1540:	sub	x3, x2, #0xa
    1544:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    1548:	ldrb	w5, [x1, x3]
    154c:	cmp	x2, #0xa
    1550:	strb	w5, [x4, x3]
    1554:	sub	x3, x2, #0xb
    1558:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    155c:	ldrb	w5, [x1, x3]
    1560:	cmp	x2, #0xb
    1564:	strb	w5, [x4, x3]
    1568:	sub	x3, x2, #0xc
    156c:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    1570:	ldrb	w5, [x1, x3]
    1574:	cmp	x2, #0xc
    1578:	strb	w5, [x4, x3]
    157c:	sub	x3, x2, #0xd
    1580:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    1584:	ldrb	w5, [x1, x3]
    1588:	cmp	x2, #0xd
    158c:	strb	w5, [x4, x3]
    1590:	sub	x2, x2, #0xe
    1594:	b.ne	1410 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x310>  // b.any
    1598:	ret
    159c:	ldrb	w3, [x1, x2]
    15a0:	strb	w3, [x4, x2]
    15a4:	sub	x2, x2, #0x1
    15a8:	cmn	x2, #0x1
    15ac:	b.eq	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>  // b.none
    15b0:	ldrb	w3, [x1, x2]
    15b4:	strb	w3, [x4, x2]
    15b8:	sub	x2, x2, #0x1
    15bc:	cmn	x2, #0x1
    15c0:	b.ne	159c <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x49c>  // b.any
    15c4:	b	1128 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x28>
    15c8:	cmp	x5, #0x0
    15cc:	ccmp	x1, x4, #0x2, gt
    15d0:	b.cs	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.hs, b.nlast
    15d4:	sub	x6, x2, #0x11
    15d8:	add	x3, x1, x5
    15dc:	add	x8, x4, x6
    15e0:	add	x6, x1, x6
    15e4:	cmp	x3, x8
    15e8:	add	x3, x4, x5
    15ec:	sub	x2, x2, #0x2
    15f0:	ccmp	x3, x6, #0x0, hi  // hi = pmore
    15f4:	ccmp	x2, #0xe, #0x0, ls  // ls = plast
    15f8:	b.ls	1748 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x648>  // b.plast
    15fc:	neg	x7, x5, lsr #4
    1600:	mov	x3, #0x0                   	// #0
    1604:	lsl	x7, x7, #4
    1608:	ldr	q0, [x6, x3]
    160c:	str	q0, [x8, x3]
    1610:	sub	x3, x3, #0x10
    1614:	cmp	x3, x7
    1618:	b.ne	1608 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x508>  // b.any
    161c:	and	x3, x5, #0xfffffffffffffff0
    1620:	sub	x2, x2, x3
    1624:	cmp	x5, x3
    1628:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    162c:	ldrb	w6, [x1, x2]
    1630:	sub	x3, x2, #0x1
    1634:	strb	w6, [x4, x2]
    1638:	cbz	x2, 12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    163c:	ldrb	w6, [x1, x3]
    1640:	cmp	x2, #0x1
    1644:	strb	w6, [x4, x3]
    1648:	sub	x3, x2, #0x2
    164c:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    1650:	ldrb	w6, [x1, x3]
    1654:	cmp	x2, #0x2
    1658:	strb	w6, [x4, x3]
    165c:	sub	x3, x2, #0x3
    1660:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    1664:	ldrb	w6, [x1, x3]
    1668:	cmp	x2, #0x3
    166c:	strb	w6, [x4, x3]
    1670:	sub	x3, x2, #0x4
    1674:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    1678:	ldrb	w6, [x1, x3]
    167c:	cmp	x2, #0x4
    1680:	strb	w6, [x4, x3]
    1684:	sub	x3, x2, #0x5
    1688:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    168c:	ldrb	w6, [x1, x3]
    1690:	cmp	x2, #0x5
    1694:	strb	w6, [x4, x3]
    1698:	sub	x3, x2, #0x6
    169c:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    16a0:	ldrb	w6, [x1, x3]
    16a4:	cmp	x2, #0x6
    16a8:	strb	w6, [x4, x3]
    16ac:	sub	x3, x2, #0x7
    16b0:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    16b4:	ldrb	w6, [x1, x3]
    16b8:	cmp	x2, #0x7
    16bc:	strb	w6, [x4, x3]
    16c0:	sub	x3, x2, #0x8
    16c4:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    16c8:	ldrb	w6, [x1, x3]
    16cc:	cmp	x2, #0x8
    16d0:	strb	w6, [x4, x3]
    16d4:	sub	x3, x2, #0x9
    16d8:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    16dc:	ldrb	w6, [x1, x3]
    16e0:	cmp	x2, #0x9
    16e4:	strb	w6, [x4, x3]
    16e8:	sub	x3, x2, #0xa
    16ec:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    16f0:	ldrb	w6, [x1, x3]
    16f4:	cmp	x2, #0xa
    16f8:	strb	w6, [x4, x3]
    16fc:	sub	x3, x2, #0xb
    1700:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    1704:	ldrb	w6, [x1, x3]
    1708:	cmp	x2, #0xb
    170c:	strb	w6, [x4, x3]
    1710:	sub	x3, x2, #0xc
    1714:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    1718:	ldrb	w6, [x1, x3]
    171c:	cmp	x2, #0xc
    1720:	strb	w6, [x4, x3]
    1724:	sub	x3, x2, #0xd
    1728:	b.eq	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>  // b.none
    172c:	ldrb	w6, [x1, x3]
    1730:	cmp	x2, #0xd
    1734:	strb	w6, [x4, x3]
    1738:	sub	x2, x2, #0xe
    173c:	b.ne	1298 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x198>  // b.any
    1740:	strb	wzr, [x4, x5]
    1744:	b	12a4 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a4>
    1748:	ldrb	w3, [x1, x2]
    174c:	strb	w3, [x4, x2]
    1750:	sub	x2, x2, #0x1
    1754:	cmn	x2, #0x1
    1758:	b.ne	1748 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x648>  // b.any
    175c:	b	12a0 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a0>
    1760:	mov	x0, #0x0                   	// #0
    1764:	b	111c <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1c>
    1768:	mov	x2, #0x0                   	// #0
    176c:	nop
    1770:	ldrb	w3, [x1, x2]
    1774:	strb	w3, [x4, x2]
    1778:	add	x2, x2, #0x1
    177c:	cmp	x6, x2
    1780:	b.ne	1770 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x670>  // b.any
    1784:	ret
    1788:	mov	x2, #0x0                   	// #0
    178c:	nop
    1790:	ldrb	w3, [x1, x2]
    1794:	strb	w3, [x4, x2]
    1798:	add	x2, x2, #0x1
    179c:	cmp	x5, x2
    17a0:	b.ne	1790 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x690>  // b.any
    17a4:	strb	wzr, [x4, x5]
    17a8:	b	12a4 <_ZN11__sanitizer16internal_strlcpyEPcPKcm+0x1a4>
    17ac:	nop

00000000000017b0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>:
    17b0:	cbz	x2, 17fc <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x4c>
    17b4:	mov	x3, #0x0                   	// #0
    17b8:	b	17cc <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x1c>
    17bc:	strb	w5, [x0, x3]
    17c0:	add	x3, x3, #0x1
    17c4:	cmp	x2, x3
    17c8:	b.eq	17fc <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x4c>  // b.none
    17cc:	ldrb	w5, [x1, x3]
    17d0:	add	x4, x0, x3
    17d4:	cbnz	w5, 17bc <_ZN11__sanitizer16internal_strncpyEPcPKcm+0xc>
    17d8:	sub	x2, x2, x3
    17dc:	orr	x3, x2, x4
    17e0:	ands	x3, x3, #0xf
    17e4:	b.eq	1800 <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x50>  // b.none
    17e8:	cbz	x2, 17fc <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x4c>
    17ec:	add	x2, x4, x2
    17f0:	strb	wzr, [x4], #1
    17f4:	cmp	x4, x2
    17f8:	b.ne	17f0 <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x40>  // b.any
    17fc:	ret
    1800:	and	x2, x2, #0xfffffffffffffff8
    1804:	add	x1, x4, x2
    1808:	cmp	x1, x4
    180c:	b.ls	17fc <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x4c>  // b.plast
    1810:	movi	v0.4s, #0x0
    1814:	mvn	x2, x4
    1818:	add	x1, x1, x2
    181c:	lsr	x1, x1, #4
    1820:	add	x1, x1, #0x1
    1824:	nop
    1828:	lsl	x2, x3, #4
    182c:	add	x3, x3, #0x1
    1830:	cmp	x3, x1
    1834:	str	q0, [x4, x2]
    1838:	b.cc	1828 <_ZN11__sanitizer16internal_strncpyEPcPKcm+0x78>  // b.lo, b.ul, b.last
    183c:	ret

0000000000001840 <_ZN11__sanitizer16internal_strnlenEPKcm>:
    1840:	mov	x3, x0
    1844:	mov	x0, #0x0                   	// #0
    1848:	cbnz	x1, 185c <_ZN11__sanitizer16internal_strnlenEPKcm+0x1c>
    184c:	b	1864 <_ZN11__sanitizer16internal_strnlenEPKcm+0x24>
    1850:	add	x0, x0, #0x1
    1854:	cmp	x1, x0
    1858:	b.eq	1864 <_ZN11__sanitizer16internal_strnlenEPKcm+0x24>  // b.none
    185c:	ldrb	w2, [x3, x0]
    1860:	cbnz	w2, 1850 <_ZN11__sanitizer16internal_strnlenEPKcm+0x10>
    1864:	ret

0000000000001868 <_ZN11__sanitizer15internal_strstrEPKcS1_>:
    1868:	mov	x8, x0
    186c:	ldrb	w0, [x0]
    1870:	mov	x2, #0x0                   	// #0
    1874:	cbz	w0, 1884 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x1c>
    1878:	add	x2, x2, #0x1
    187c:	ldrb	w3, [x8, x2]
    1880:	cbnz	w3, 1878 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x10>
    1884:	ldrb	w0, [x1]
    1888:	cbz	w0, 18f0 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x88>
    188c:	mov	x3, #0x0                   	// #0
    1890:	mov	x4, x3
    1894:	add	x3, x3, #0x1
    1898:	ldrb	w5, [x1, x3]
    189c:	cbnz	w5, 1890 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x28>
    18a0:	cmp	x3, x2
    18a4:	b.hi	18e8 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x80>  // b.pmore
    18a8:	sub	x3, x2, x3
    18ac:	mov	x9, #0x0                   	// #0
    18b0:	add	x0, x8, x9
    18b4:	mov	x2, #0x0                   	// #0
    18b8:	b	18c8 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x60>
    18bc:	cmp	x4, x2
    18c0:	b.eq	18ec <_ZN11__sanitizer15internal_strstrEPKcS1_+0x84>  // b.none
    18c4:	mov	x2, x7
    18c8:	ldrb	w6, [x0, x2]
    18cc:	add	x7, x2, #0x1
    18d0:	ldrb	w5, [x1, x2]
    18d4:	cmp	w6, w5
    18d8:	b.eq	18bc <_ZN11__sanitizer15internal_strstrEPKcS1_+0x54>  // b.none
    18dc:	add	x9, x9, #0x1
    18e0:	cmp	x3, x9
    18e4:	b.cs	18b0 <_ZN11__sanitizer15internal_strstrEPKcS1_+0x48>  // b.hs, b.nlast
    18e8:	mov	x0, #0x0                   	// #0
    18ec:	ret
    18f0:	mov	x0, x8
    18f4:	ret

00000000000018f8 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>:
    18f8:	cmp	w2, #0xa
    18fc:	b.ne	19f0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xf8>  // b.any
    1900:	ldrb	w2, [x0]
    1904:	cmp	w2, #0x20
    1908:	b.eq	19b0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xb8>  // b.none
    190c:	sub	w3, w2, #0x9
    1910:	and	w3, w3, #0xff
    1914:	cmp	w3, #0x4
    1918:	b.ls	19b0 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xb8>  // b.plast
    191c:	cmp	w2, #0x2b
    1920:	b.eq	19dc <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xe4>  // b.none
    1924:	cmp	w2, #0x2d
    1928:	b.eq	19b8 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xc0>  // b.none
    192c:	mov	w4, w2
    1930:	mov	x5, x0
    1934:	mov	w8, #0x1                   	// #1
    1938:	sub	w2, w2, #0x30
    193c:	cmp	w2, #0x9
    1940:	b.hi	1a14 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x11c>  // b.pmore
    1944:	mov	x7, #0x9999999999999999    	// #-7378697629483820647
    1948:	mov	x3, #0x0                   	// #0
    194c:	movk	x7, #0x1999, lsl #48
    1950:	mov	x6, #0xffffffffffffffff    	// #-1
    1954:	nop
    1958:	sub	w0, w4, #0x30
    195c:	add	x2, x3, x3, lsl #2
    1960:	cmp	x3, x7
    1964:	ldrb	w4, [x5, #1]!
    1968:	sxtw	x0, w0
    196c:	lsl	x2, x2, #1
    1970:	csel	x2, x2, x6, ls  // ls = plast
    1974:	mvn	x3, x0
    1978:	cmp	x3, x2
    197c:	add	x0, x0, x2
    1980:	sub	w2, w4, #0x30
    1984:	csel	x3, x0, x6, cs  // cs = hs, nlast
    1988:	cmp	w2, #0x9
    198c:	b.ls	1958 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x60>  // b.plast
    1990:	cbz	x1, 1998 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xa0>
    1994:	str	x5, [x1]
    1998:	cmp	w8, #0x1
    199c:	b.ne	19cc <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0xd4>  // b.any
    19a0:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    19a4:	cmp	x3, x0
    19a8:	csel	x0, x3, x0, ls  // ls = plast
    19ac:	ret
    19b0:	add	x0, x0, #0x1
    19b4:	b	1900 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x8>
    19b8:	ldrb	w2, [x0, #1]
    19bc:	add	x5, x0, #0x1
    19c0:	mov	w8, #0xffffffff            	// #-1
    19c4:	mov	w4, w2
    19c8:	b	1938 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x40>
    19cc:	cmp	x3, #0x0
    19d0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    19d4:	csneg	x0, x0, x3, lt  // lt = tstop
    19d8:	ret
    19dc:	ldrb	w2, [x0, #1]
    19e0:	add	x5, x0, #0x1
    19e4:	mov	w8, #0x1                   	// #1
    19e8:	mov	w4, w2
    19ec:	b	1938 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x40>
    19f0:	str	x30, [sp, #-16]!
    19f4:	sxtw	x3, w2
    19f8:	adrp	x0, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
    19fc:	adrp	x2, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
    1a00:	add	x0, x0, #0x0
    1a04:	add	x2, x2, #0x0
    1a08:	mov	x4, #0xa                   	// #10
    1a0c:	mov	w1, #0xe5                  	// #229
    1a10:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1a14:	mov	x5, x0
    1a18:	mov	x3, #0x0                   	// #0
    1a1c:	cbnz	x1, 1994 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i+0x9c>
    1a20:	mov	x0, #0x0                   	// #0
    1a24:	ret

0000000000001a28 <_ZN11__sanitizer14internal_atollEPKc>:
    1a28:	mov	w2, #0xa                   	// #10
    1a2c:	mov	x1, #0x0                   	// #0
    1a30:	b	18f8 <_ZN11__sanitizer23internal_simple_strtollEPKcPS1_i>
    1a34:	nop

0000000000001a38 <_ZN11__sanitizer11mem_is_zeroEPKcm>:
    1a38:	mov	x4, #0x10000000000         	// #1099511627776
    1a3c:	cmp	x1, x4
    1a40:	b.hi	1d50 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x318>  // b.pmore
    1a44:	add	x4, x0, x1
    1a48:	add	x2, x0, #0x7
    1a4c:	and	x2, x2, #0xfffffffffffffff8
    1a50:	cmp	x0, x4
    1a54:	and	x6, x4, #0xfffffffffffffff8
    1a58:	ccmp	x0, x2, #0x2, cc  // cc = lo, ul, last
    1a5c:	mov	x8, x2
    1a60:	mov	x7, x6
    1a64:	mov	x1, x0
    1a68:	mov	x3, #0x0                   	// #0
    1a6c:	b.cs	1a84 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x4c>  // b.hs, b.nlast
    1a70:	ldrb	w5, [x1], #1
    1a74:	cmp	x2, x1
    1a78:	orr	x3, x3, x5
    1a7c:	ccmp	x4, x1, #0x0, hi  // hi = pmore
    1a80:	b.hi	1a70 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x38>  // b.pmore
    1a84:	cmp	x2, x6
    1a88:	b.cs	1b4c <_ZN11__sanitizer11mem_is_zeroEPKcm+0x114>  // b.hs, b.nlast
    1a8c:	sub	x1, x6, x2
    1a90:	add	x9, x2, #0x1
    1a94:	sub	x1, x1, #0x1
    1a98:	cmp	x6, x9
    1a9c:	mov	x10, #0x1                   	// #1
    1aa0:	lsr	x5, x1, #3
    1aa4:	csinc	x5, x10, x5, cc  // cc = lo, ul, last
    1aa8:	cmp	x1, #0x27
    1aac:	ccmp	x6, x9, #0x0, hi  // hi = pmore
    1ab0:	b.cc	1af4 <_ZN11__sanitizer11mem_is_zeroEPKcm+0xbc>  // b.lo, b.ul, b.last
    1ab4:	movi	v0.4s, #0x0
    1ab8:	lsr	x1, x5, #1
    1abc:	add	x1, x2, x1, lsl #4
    1ac0:	ldr	q1, [x2], #16
    1ac4:	orr	v0.16b, v0.16b, v1.16b
    1ac8:	cmp	x2, x1
    1acc:	b.ne	1ac0 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x88>  // b.any
    1ad0:	movi	v1.4s, #0x0
    1ad4:	and	x1, x5, #0xfffffffffffffffe
    1ad8:	cmp	x5, x1
    1adc:	add	x8, x8, x1, lsl #3
    1ae0:	ext	v1.16b, v0.16b, v1.16b, #8
    1ae4:	orr	v0.16b, v0.16b, v1.16b
    1ae8:	mov	x1, v0.d[0]
    1aec:	orr	x3, x3, x1
    1af0:	b.eq	1b4c <_ZN11__sanitizer11mem_is_zeroEPKcm+0x114>  // b.none
    1af4:	mov	x1, x8
    1af8:	ldr	x2, [x1], #8
    1afc:	orr	x3, x3, x2
    1b00:	cmp	x6, x1
    1b04:	b.ls	1b4c <_ZN11__sanitizer11mem_is_zeroEPKcm+0x114>  // b.plast
    1b08:	ldr	x1, [x8, #8]
    1b0c:	add	x2, x8, #0x10
    1b10:	cmp	x6, x2
    1b14:	orr	x3, x3, x1
    1b18:	b.ls	1b4c <_ZN11__sanitizer11mem_is_zeroEPKcm+0x114>  // b.plast
    1b1c:	ldr	x1, [x8, #16]
    1b20:	add	x2, x8, #0x18
    1b24:	cmp	x6, x2
    1b28:	orr	x3, x3, x1
    1b2c:	b.ls	1b4c <_ZN11__sanitizer11mem_is_zeroEPKcm+0x114>  // b.plast
    1b30:	ldr	x1, [x8, #24]
    1b34:	add	x2, x8, #0x20
    1b38:	cmp	x6, x2
    1b3c:	orr	x3, x3, x1
    1b40:	b.ls	1b4c <_ZN11__sanitizer11mem_is_zeroEPKcm+0x114>  // b.plast
    1b44:	ldr	x1, [x8, #32]
    1b48:	orr	x3, x3, x1
    1b4c:	cmp	x0, x6
    1b50:	b.hi	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.pmore
    1b54:	cmp	x4, x6
    1b58:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1b5c:	add	x1, x6, #0x1
    1b60:	sub	x0, x4, #0x1
    1b64:	cmp	x4, x1
    1b68:	sub	x2, x4, x6
    1b6c:	sub	x0, x0, x6
    1b70:	csinc	x2, x2, xzr, cs  // cs = hs, nlast
    1b74:	cmp	x0, #0xe
    1b78:	ccmp	x4, x1, #0x0, hi  // hi = pmore
    1b7c:	b.cc	1c24 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x1ec>  // b.lo, b.ul, b.last
    1b80:	sub	x1, x2, #0x10
    1b84:	mov	x0, #0x0                   	// #0
    1b88:	movi	v5.4s, #0x0
    1b8c:	lsr	x1, x1, #4
    1b90:	add	x1, x1, #0x1
    1b94:	nop
    1b98:	ldr	q2, [x6], #16
    1b9c:	add	x0, x0, #0x1
    1ba0:	cmp	x1, x0
    1ba4:	uxtl	v3.8h, v2.8b
    1ba8:	uxtl2	v2.8h, v2.16b
    1bac:	uxtl	v0.4s, v3.4h
    1bb0:	uxtl2	v3.4s, v3.8h
    1bb4:	uxtl	v4.4s, v2.4h
    1bb8:	uxtl2	v2.4s, v2.8h
    1bbc:	uxtl	v1.2d, v0.2s
    1bc0:	uxtl2	v0.2d, v0.4s
    1bc4:	uxtl	v16.2d, v3.2s
    1bc8:	uxtl2	v3.2d, v3.4s
    1bcc:	uxtl	v7.2d, v4.2s
    1bd0:	orr	v1.16b, v1.16b, v0.16b
    1bd4:	uxtl2	v4.2d, v4.4s
    1bd8:	uxtl	v6.2d, v2.2s
    1bdc:	uxtl2	v2.2d, v2.4s
    1be0:	orr	v0.16b, v1.16b, v16.16b
    1be4:	orr	v0.16b, v0.16b, v3.16b
    1be8:	orr	v0.16b, v0.16b, v7.16b
    1bec:	orr	v0.16b, v0.16b, v4.16b
    1bf0:	orr	v0.16b, v0.16b, v6.16b
    1bf4:	orr	v0.16b, v0.16b, v2.16b
    1bf8:	orr	v5.16b, v5.16b, v0.16b
    1bfc:	b.hi	1b98 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x160>  // b.pmore
    1c00:	movi	v0.4s, #0x0
    1c04:	lsl	x1, x1, #4
    1c08:	add	x7, x7, x1
    1c0c:	cmp	x2, x1
    1c10:	ext	v0.16b, v5.16b, v0.16b, #8
    1c14:	orr	v5.16b, v5.16b, v0.16b
    1c18:	mov	x0, v5.d[0]
    1c1c:	orr	x3, x3, x0
    1c20:	b.eq	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.none
    1c24:	mov	x0, x7
    1c28:	ldrb	w1, [x0], #1
    1c2c:	orr	x3, x3, x1
    1c30:	cmp	x4, x0
    1c34:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1c38:	ldrb	w0, [x7, #1]
    1c3c:	add	x1, x7, #0x2
    1c40:	cmp	x4, x1
    1c44:	orr	x3, x3, x0
    1c48:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1c4c:	ldrb	w0, [x7, #2]
    1c50:	add	x1, x7, #0x3
    1c54:	cmp	x4, x1
    1c58:	orr	x3, x3, x0
    1c5c:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1c60:	ldrb	w0, [x7, #3]
    1c64:	add	x1, x7, #0x4
    1c68:	cmp	x4, x1
    1c6c:	orr	x3, x3, x0
    1c70:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1c74:	ldrb	w0, [x7, #4]
    1c78:	add	x1, x7, #0x5
    1c7c:	cmp	x4, x1
    1c80:	orr	x3, x3, x0
    1c84:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1c88:	ldrb	w0, [x7, #5]
    1c8c:	add	x1, x7, #0x6
    1c90:	cmp	x4, x1
    1c94:	orr	x3, x3, x0
    1c98:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1c9c:	ldrb	w0, [x7, #6]
    1ca0:	add	x1, x7, #0x7
    1ca4:	cmp	x4, x1
    1ca8:	orr	x3, x3, x0
    1cac:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1cb0:	ldrb	w0, [x7, #7]
    1cb4:	add	x1, x7, #0x8
    1cb8:	cmp	x4, x1
    1cbc:	orr	x3, x3, x0
    1cc0:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1cc4:	ldrb	w0, [x7, #8]
    1cc8:	add	x1, x7, #0x9
    1ccc:	cmp	x4, x1
    1cd0:	orr	x3, x3, x0
    1cd4:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1cd8:	ldrb	w0, [x7, #9]
    1cdc:	add	x1, x7, #0xa
    1ce0:	cmp	x4, x1
    1ce4:	orr	x3, x3, x0
    1ce8:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1cec:	ldrb	w0, [x7, #10]
    1cf0:	add	x1, x7, #0xb
    1cf4:	cmp	x4, x1
    1cf8:	orr	x3, x3, x0
    1cfc:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1d00:	ldrb	w0, [x7, #11]
    1d04:	add	x1, x7, #0xc
    1d08:	cmp	x4, x1
    1d0c:	orr	x3, x3, x0
    1d10:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1d14:	ldrb	w0, [x7, #12]
    1d18:	add	x1, x7, #0xd
    1d1c:	cmp	x4, x1
    1d20:	orr	x3, x3, x0
    1d24:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1d28:	ldrb	w0, [x7, #13]
    1d2c:	add	x1, x7, #0xe
    1d30:	cmp	x4, x1
    1d34:	orr	x3, x3, x0
    1d38:	b.ls	1d44 <_ZN11__sanitizer11mem_is_zeroEPKcm+0x30c>  // b.plast
    1d3c:	ldrb	w0, [x7, #14]
    1d40:	orr	x3, x3, x0
    1d44:	cmp	x3, #0x0
    1d48:	cset	w0, eq  // eq = none
    1d4c:	ret
    1d50:	str	x30, [sp, #-16]!
    1d54:	mov	x3, x1
    1d58:	adrp	x2, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
    1d5c:	adrp	x0, 0 <_ZN11__sanitizer15internal_memchrEPKvim>
    1d60:	add	x2, x2, #0x0
    1d64:	add	x0, x0, #0x0
    1d68:	mov	w1, #0x104                 	// #260
    1d6c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_libignore.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>:
   0:	mov	x1, #0x4810                	// #18448
   4:	add	x0, x0, x1
   8:	b	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
   c:	nop

0000000000000010 <_ZN11__sanitizer9LibIgnore17AddIgnoredLibraryEPKc>:
  10:	stp	x19, x20, [sp, #-48]!
  14:	mov	x20, x0
  18:	stp	x21, x22, [sp, #16]
  1c:	mov	x21, x1
  20:	mov	x1, #0x4810                	// #18448
  24:	add	x22, x0, x1
  28:	str	x30, [sp, #32]
  2c:	mov	x0, x22
  30:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
  34:	ldr	x19, [x20, #18536]
  38:	cmp	x19, #0x3ff
  3c:	b.hi	80 <_ZN11__sanitizer9LibIgnore17AddIgnoredLibraryEPKc+0x70>  // b.pmore
  40:	add	x0, x19, #0x1
  44:	str	x0, [x20, #18536]
  48:	mov	x0, x21
  4c:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
  50:	mov	x3, x0
  54:	add	x1, x20, x19, lsl #5
  58:	mov	x0, x22
  5c:	add	x2, x1, #0x4, lsl #12
  60:	ldp	x21, x22, [sp, #16]
  64:	ldr	x30, [sp, #32]
  68:	str	x3, [x1, #18544]
  6c:	str	xzr, [x1, #18552]
  70:	str	xzr, [x1, #18560]
  74:	strb	wzr, [x2, #2184]
  78:	ldp	x19, x20, [sp], #48
  7c:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
  80:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
  84:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
  88:	add	x0, x0, #0x0
  8c:	mov	x2, #0x400                 	// #1024
  90:	ldr	x1, [x1]
  94:	ldr	x1, [x1]
  98:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  9c:	bl	0 <_ZN11__sanitizer3DieEv>

00000000000000a0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc>:
  a0:	stp	x19, x20, [sp, #-160]!
  a4:	mov	x3, #0x4810                	// #18448
  a8:	mov	x20, x0
  ac:	stp	x21, x22, [sp, #16]
  b0:	adrp	x21, 0 <_ZN11__sanitizer14PageSizeCachedE>
  b4:	add	x0, x0, x3
  b8:	mov	x19, x1
  bc:	stp	x23, x24, [sp, #32]
  c0:	stp	x25, x26, [sp, #48]
  c4:	str	x30, [sp, #80]
  c8:	str	x0, [sp, #112]
  cc:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
  d0:	ldr	x22, [x21]
  d4:	ldr	x0, [x22]
  d8:	cbz	x0, 384 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2e4>
  dc:	sub	x1, x0, #0x1
  e0:	tst	x1, x0
  e4:	b.ne	424 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x384>  // b.any
  e8:	add	x25, x0, #0xfff
  ec:	neg	x0, x0
  f0:	and	x23, x25, x0
  f4:	mov	w2, #0x0                   	// #0
  f8:	mov	x0, x23
  fc:	adrp	x22, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 100:	add	x1, x22, #0x0
 104:	str	x23, [sp, #120]
 108:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 10c:	mov	x24, x0
 110:	mov	x2, #0x0                   	// #0
 114:	mov	x1, #0x0                   	// #0
 118:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 11c:	mov	x1, #0x0                   	// #0
 120:	mov	x0, #0x0                   	// #0
 124:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 128:	cmp	x23, #0xfff
 12c:	b.ls	390 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2f0>  // b.plast
 130:	mov	x0, x24
 134:	mov	x2, #0x1000                	// #4096
 138:	mov	w1, #0x0                   	// #0
 13c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 140:	strb	wzr, [x24]
 144:	cbz	x19, 168 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0xc8>
 148:	mov	x1, x24
 14c:	mov	x0, x19
 150:	mov	x2, #0xfff                 	// #4095
 154:	bl	0 <_ZN11__sanitizer17internal_readlinkEPKcPcm>
 158:	cbz	x0, 168 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0xc8>
 15c:	ldrb	w0, [x24]
 160:	cbnz	w0, 3ec <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x34c>
 164:	nop
 168:	add	x0, sp, #0x80
 16c:	strb	wzr, [sp, #152]
 170:	bl	0 <_ZN11__sanitizer13ListOfModules4initEv>
 174:	ldr	x0, [x20, #18536]
 178:	cbz	x0, 28c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1ec>
 17c:	adrp	x22, 0 <_ZN11__sanitizer17current_verbosityE>
 180:	mov	x0, #0x4870                	// #18544
 184:	adrp	x26, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 188:	add	x19, x20, x0
 18c:	ldr	x22, [x22]
 190:	add	x0, x26, #0x0
 194:	stp	x27, x28, [sp, #64]
 198:	stp	x0, xzr, [sp, #96]
 19c:	ldr	x21, [sp, #144]
 1a0:	ldr	x5, [sp, #128]
 1a4:	add	x21, x21, x21, lsl #3
 1a8:	add	x21, x5, x21, lsl #3
 1ac:	cmp	x5, x21
 1b0:	b.eq	474 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3d4>  // b.none
 1b4:	mov	x28, x5
 1b8:	mov	w27, #0x0                   	// #0
 1bc:	mov	w23, #0x1                   	// #1
 1c0:	ldr	x26, [x28, #56]
 1c4:	cbz	x26, 24c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1ac>
 1c8:	ldrb	w25, [x26, #24]
 1cc:	cbz	w25, 330 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x290>
 1d0:	ldr	x0, [x19]
 1d4:	ldr	x1, [x28]
 1d8:	bl	0 <_ZN11__sanitizer13TemplateMatchEPKcS1_>
 1dc:	tst	w0, #0xff
 1e0:	b.ne	1f8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x158>  // b.any
 1e4:	ldr	x0, [x19, #16]
 1e8:	cbz	x0, 330 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x290>
 1ec:	ldr	x1, [x28]
 1f0:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 1f4:	cbnz	w0, 330 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x290>
 1f8:	cbnz	w27, 588 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4e8>
 1fc:	ldrb	w27, [x19, #24]
 200:	cbnz	w27, 330 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x290>
 204:	ldr	w0, [x22]
 208:	cbnz	w0, 33c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x29c>
 20c:	strb	w23, [x19, #24]
 210:	ldr	x0, [x28]
 214:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 218:	ldr	x3, [x20]
 21c:	str	x0, [x19, #8]
 220:	cmp	x3, #0x7f
 224:	b.hi	368 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2c8>  // b.pmore
 228:	add	x0, x20, x3, lsl #4
 22c:	add	x3, x3, #0x1
 230:	ldr	x1, [x26, #8]
 234:	str	x1, [x0, #8]
 238:	ldr	x1, [x26, #16]
 23c:	str	x1, [x0, #16]
 240:	dmb	ish
 244:	str	x3, [x20]
 248:	mov	w27, w25
 24c:	add	x28, x28, #0x48
 250:	cmp	x21, x28
 254:	b.ne	1c0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x120>  // b.any
 258:	ldrb	w0, [x19, #24]
 25c:	eor	w0, w0, #0x1
 260:	orr	w2, w27, w0
 264:	tst	w2, #0xff
 268:	b.eq	5b8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x518>  // b.none
 26c:	ldr	x1, [sp, #104]
 270:	add	x19, x19, #0x20
 274:	ldr	x0, [x20, #18536]
 278:	add	x1, x1, #0x1
 27c:	str	x1, [sp, #104]
 280:	cmp	x0, x1
 284:	b.hi	19c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0xfc>  // b.pmore
 288:	ldp	x27, x28, [sp, #64]
 28c:	add	x1, x20, #0xc, lsl #12
 290:	ldr	x0, [sp, #144]
 294:	ldrb	w1, [x1, #2160]
 298:	ldr	x19, [sp, #128]
 29c:	add	x0, x0, x0, lsl #3
 2a0:	add	x22, x19, x0, lsl #3
 2a4:	cbz	w1, 2e8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x248>
 2a8:	mov	x21, x19
 2ac:	cmp	x19, x22
 2b0:	b.eq	304 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x264>  // b.none
 2b4:	adrp	x23, 0 <_ZN11__sanitizer17current_verbosityE>
 2b8:	adrp	x26, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 2bc:	add	x26, x26, #0x0
 2c0:	ldr	x23, [x23]
 2c4:	ldrb	w0, [x21, #44]
 2c8:	cbnz	w0, 47c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3dc>
 2cc:	add	x21, x21, #0x48
 2d0:	cmp	x22, x21
 2d4:	b.ne	2c4 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x224>  // b.any
 2d8:	ldr	x0, [sp, #144]
 2dc:	ldr	x19, [sp, #128]
 2e0:	add	x0, x0, x0, lsl #3
 2e4:	add	x22, x19, x0, lsl #3
 2e8:	cmp	x19, x22
 2ec:	b.eq	304 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x264>  // b.none
 2f0:	mov	x0, x19
 2f4:	add	x19, x19, #0x48
 2f8:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 2fc:	cmp	x22, x19
 300:	b.ne	2f0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x250>  // b.any
 304:	ldr	x1, [sp, #120]
 308:	mov	x0, x24
 30c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 310:	ldr	x0, [sp, #112]
 314:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
 318:	ldp	x21, x22, [sp, #16]
 31c:	ldp	x23, x24, [sp, #32]
 320:	ldp	x25, x26, [sp, #48]
 324:	ldr	x30, [sp, #80]
 328:	ldp	x19, x20, [sp], #160
 32c:	ret
 330:	ldr	x26, [x26]
 334:	cbnz	x26, 1c8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x128>
 338:	b	24c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1ac>
 33c:	ldr	x1, [x19]
 340:	ldr	x2, [x28]
 344:	ldr	x0, [sp, #96]
 348:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 34c:	strb	w23, [x19, #24]
 350:	ldr	x0, [x28]
 354:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 358:	ldr	x3, [x20]
 35c:	str	x0, [x19, #8]
 360:	cmp	x3, #0x7f
 364:	b.ls	228 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x188>  // b.plast
 368:	adrp	x2, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 36c:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 370:	add	x2, x2, #0x0
 374:	add	x0, x0, #0x0
 378:	mov	x4, #0x80                  	// #128
 37c:	mov	w1, #0x52                  	// #82
 380:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 384:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 388:	str	x0, [x22]
 38c:	b	dc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3c>
 390:	ldr	x21, [x21]
 394:	ldr	x0, [x21]
 398:	cbz	x0, 468 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3c8>
 39c:	sub	x1, x0, #0x1
 3a0:	tst	x1, x0
 3a4:	b.ne	424 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x384>  // b.any
 3a8:	add	x21, x0, #0xfff
 3ac:	neg	x0, x0
 3b0:	and	x21, x21, x0
 3b4:	add	x1, x22, #0x0
 3b8:	mov	x0, x21
 3bc:	mov	w2, #0x0                   	// #0
 3c0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3c4:	mov	x22, x0
 3c8:	mov	x1, x24
 3cc:	mov	x2, #0x0                   	// #0
 3d0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3d4:	ldr	x1, [sp, #120]
 3d8:	mov	x0, x24
 3dc:	mov	x24, x22
 3e0:	str	x21, [sp, #120]
 3e4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3e8:	b	130 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x90>
 3ec:	ldr	x1, [x20, #18536]
 3f0:	cbz	x1, 168 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0xc8>
 3f4:	mov	x2, #0x4870                	// #18544
 3f8:	add	x21, x20, x2
 3fc:	mov	x22, #0x0                   	// #0
 400:	ldrb	w0, [x21, #24]
 404:	cbnz	w0, 410 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x370>
 408:	ldr	x0, [x21, #16]
 40c:	cbz	x0, 438 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x398>
 410:	add	x22, x22, #0x1
 414:	add	x21, x21, #0x20
 418:	cmp	x22, x1
 41c:	b.cc	400 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x360>  // b.lo, b.ul, b.last
 420:	b	168 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0xc8>
 424:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 428:	add	x0, x0, #0x0
 42c:	stp	x27, x28, [sp, #64]
 430:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 434:	bl	0 <_ZN11__sanitizer3DieEv>
 438:	ldr	x0, [x21]
 43c:	mov	x1, x19
 440:	bl	0 <_ZN11__sanitizer13TemplateMatchEPKcS1_>
 444:	tst	w0, #0xff
 448:	b.ne	454 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3b4>  // b.any
 44c:	ldr	x1, [x20, #18536]
 450:	b	410 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x370>
 454:	mov	x0, x24
 458:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 45c:	str	x0, [x21, #16]
 460:	ldr	x1, [x20, #18536]
 464:	b	410 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x370>
 468:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 46c:	str	x0, [x21]
 470:	b	39c <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x2fc>
 474:	mov	w27, #0x0                   	// #0
 478:	b	258 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x1b8>
 47c:	ldr	x19, [x21, #56]
 480:	cbz	x19, 2cc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x22c>
 484:	ldrb	w1, [x19, #24]
 488:	cbz	w1, 534 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x494>
 48c:	ldr	x4, [x19, #8]
 490:	ldr	x6, [x20, #2056]
 494:	dmb	ish
 498:	add	x5, x20, #0x810
 49c:	mov	x2, #0x0                   	// #0
 4a0:	mov	x1, x5
 4a4:	cbz	x6, 500 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x460>
 4a8:	ldr	x3, [x1]
 4ac:	cmp	x4, x3
 4b0:	b.cc	540 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4a0>  // b.lo, b.ul, b.last
 4b4:	ldr	x3, [x1, #8]
 4b8:	cmp	x4, x3
 4bc:	b.cs	540 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4a0>  // b.hs, b.nlast
 4c0:	ldr	x2, [x19, #16]
 4c4:	sub	x2, x2, #0x1
 4c8:	ldr	x0, [x20, #2056]
 4cc:	dmb	ish
 4d0:	cbz	x0, 500 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x460>
 4d4:	mov	x1, #0x0                   	// #0
 4d8:	ldr	x3, [x5]
 4dc:	cmp	x2, x3
 4e0:	b.cc	4f0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x450>  // b.lo, b.ul, b.last
 4e4:	ldr	x3, [x5, #8]
 4e8:	cmp	x2, x3
 4ec:	b.cc	534 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x494>  // b.lo, b.ul, b.last
 4f0:	add	x1, x1, #0x1
 4f4:	add	x5, x5, #0x10
 4f8:	cmp	x1, x0
 4fc:	b.ne	4d8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x438>  // b.any
 500:	ldr	w0, [x23]
 504:	cbnz	w0, 554 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4b4>
 508:	ldr	x3, [x20, #2056]
 50c:	cmp	x3, #0x3ff
 510:	b.hi	568 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x4c8>  // b.pmore
 514:	add	x1, x20, x3, lsl #4
 518:	add	x3, x3, #0x1
 51c:	ldr	x0, [x19, #8]
 520:	str	x0, [x1, #2064]
 524:	ldr	x0, [x19, #16]
 528:	str	x0, [x1, #2072]
 52c:	dmb	ish
 530:	str	x3, [x20, #2056]
 534:	ldr	x19, [x19]
 538:	cbnz	x19, 484 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x3e4>
 53c:	b	2cc <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x22c>
 540:	add	x2, x2, #0x1
 544:	add	x1, x1, #0x10
 548:	cmp	x2, x6
 54c:	b.ne	4a8 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x408>  // b.any
 550:	b	500 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x460>
 554:	ldp	x1, x2, [x19, #8]
 558:	mov	x0, x26
 55c:	ldr	x3, [x21]
 560:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 564:	b	508 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc+0x468>
 568:	adrp	x2, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 56c:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 570:	add	x2, x2, #0x0
 574:	add	x0, x0, #0x0
 578:	mov	x4, #0x400                 	// #1024
 57c:	mov	w1, #0x6f                  	// #111
 580:	stp	x27, x28, [sp, #64]
 584:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 588:	ldr	x0, [sp, #104]
 58c:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 590:	ldr	x4, [x28]
 594:	ldr	x1, [x1]
 598:	add	x20, x20, x0, lsl #5
 59c:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 5a0:	add	x0, x0, #0x0
 5a4:	ldr	x1, [x1]
 5a8:	ldr	x2, [x20, #18544]
 5ac:	ldr	x3, [x20, #18552]
 5b0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5b4:	bl	0 <_ZN11__sanitizer3DieEv>
 5b8:	ldr	x0, [sp, #104]
 5bc:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 5c0:	ldr	x1, [x1]
 5c4:	add	x20, x20, x0, lsl #5
 5c8:	adrp	x0, 0 <_ZN11__sanitizer9LibIgnoreC1ENS_17LinkerInitializedE>
 5cc:	add	x0, x0, #0x0
 5d0:	ldr	x1, [x1]
 5d4:	ldr	x3, [x20, #18544]
 5d8:	ldr	x2, [x20, #18552]
 5dc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5e0:	bl	0 <_ZN11__sanitizer3DieEv>
 5e4:	nop

00000000000005e8 <_ZN11__sanitizer9LibIgnore17OnLibraryUnloadedEv>:
 5e8:	mov	x1, #0x0                   	// #0
 5ec:	b	a0 <_ZN11__sanitizer9LibIgnore15OnLibraryLoadedEPKc>

sanitizer_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>:
       0:	stp	x19, x20, [sp, #-64]!
       4:	mov	x19, x1
       8:	mov	x20, x0
       c:	mov	w2, #0x0                   	// #0
      10:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
      14:	mov	x0, #0x3e80                	// #16000
      18:	add	x1, x1, #0x0
      1c:	str	x30, [sp, #16]
      20:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
      24:	str	x0, [x19]
      28:	add	x3, sp, #0x38
      2c:	add	x2, sp, #0x30
      30:	add	x1, sp, #0x28
      34:	mov	x0, x20
      38:	mov	x5, #0x0                   	// #0
      3c:	mov	x4, #0x100000              	// #1048576
      40:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
      44:	tst	w0, #0xff
      48:	b.eq	e8 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0xe8>  // b.none
      4c:	ldr	x4, [x19]
      50:	mov	x0, #0x1                   	// #1
      54:	ldr	x1, [sp, #40]
      58:	mov	w2, w0
      5c:	str	x1, [x4]
      60:	ldr	x1, [sp, #40]
      64:	nop
      68:	ldrb	w3, [x1, x0]
      6c:	add	x0, x0, #0x1
      70:	cbnz	w3, 68 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0x68>
      74:	add	x5, x1, x0
      78:	ldrb	w1, [x1, x0]
      7c:	sxtw	x3, w2
      80:	add	x6, x4, w2, sxtw #3
      84:	cbz	w1, bc <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0xbc>
      88:	str	x5, [x4, x3, lsl #3]
      8c:	cmp	w2, #0x7cf
      90:	b.gt	cc <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0xcc>
      94:	ldr	x1, [sp, #40]
      98:	add	w2, w2, #0x1
      9c:	ldrb	w3, [x1, x0]
      a0:	add	x0, x0, #0x1
      a4:	cbnz	w3, 68 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0x68>
      a8:	add	x5, x1, x0
      ac:	ldrb	w1, [x1, x0]
      b0:	sxtw	x3, w2
      b4:	add	x6, x4, w2, sxtw #3
      b8:	cbnz	w1, 88 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0+0x88>
      bc:	str	xzr, [x6]
      c0:	ldr	x30, [sp, #16]
      c4:	ldp	x19, x20, [sp], #64
      c8:	ret
      cc:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
      d0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
      d4:	add	x2, x2, #0x0
      d8:	add	x0, x0, #0x0
      dc:	mov	x4, #0x7cf                 	// #1999
      e0:	mov	w1, #0x23f                 	// #575
      e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
      e8:	ldr	x0, [x19]
      ec:	ldr	x30, [sp, #16]
      f0:	str	xzr, [x0]
      f4:	ldp	x19, x20, [sp], #64
      f8:	ret
      fc:	nop

0000000000000100 <_ZN11__sanitizer16internal_iserrorEmPi>:
     100:	mov	x2, x0
     104:	mov	w0, #0x0                   	// #0
     108:	cmn	x2, #0x1, lsl #12
     10c:	b.hi	114 <_ZN11__sanitizer16internal_iserrorEmPi+0x14>  // b.pmore
     110:	ret
     114:	mov	w0, #0x1                   	// #1
     118:	cbz	x1, 110 <_ZN11__sanitizer16internal_iserrorEmPi+0x10>
     11c:	neg	w2, w2
     120:	str	w2, [x1]
     124:	ret

0000000000000128 <_ZN11__sanitizer13internal_mmapEPvmiiim>:
     128:	mov	x8, #0xde                  	// #222
     12c:	sxtw	x2, w2
     130:	sxtw	x3, w3
     134:	sxtw	x4, w4
     138:	svc	#0x0
     13c:	ret

0000000000000140 <_ZN11__sanitizer15internal_munmapEPvm>:
     140:	mov	x8, #0xd7                  	// #215
     144:	svc	#0x0
     148:	ret
     14c:	nop

0000000000000150 <_ZN11__sanitizer17internal_mprotectEPvmi>:
     150:	mov	x8, #0xe2                  	// #226
     154:	sxtw	x2, w2
     158:	svc	#0x0
     15c:	ret

0000000000000160 <_ZN11__sanitizer14internal_closeEi>:
     160:	mov	x8, #0x39                  	// #57
     164:	sxtw	x0, w0
     168:	svc	#0x0
     16c:	ret

0000000000000170 <_ZN11__sanitizer13internal_openEPKci>:
     170:	sxtw	x2, w1
     174:	mov	x8, #0x38                  	// #56
     178:	mov	x1, x0
     17c:	mov	x0, #0xffffffffffffff9c    	// #-100
     180:	svc	#0x0
     184:	ret

0000000000000188 <_ZN11__sanitizer13internal_openEPKcij>:
     188:	mov	w4, w1
     18c:	mov	w3, w2
     190:	mov	x1, x0
     194:	mov	x8, #0x38                  	// #56
     198:	sxtw	x2, w4
     19c:	mov	x0, #0xffffffffffffff9c    	// #-100
     1a0:	svc	#0x0
     1a4:	ret

00000000000001a8 <_ZN11__sanitizer13internal_readEiPvm>:
     1a8:	sxtw	x3, w0
     1ac:	mov	x0, x3
     1b0:	mov	x8, #0x3f                  	// #63
     1b4:	svc	#0x0
     1b8:	cmn	x0, #0x1, lsl #12
     1bc:	b.hi	1c4 <_ZN11__sanitizer13internal_readEiPvm+0x1c>  // b.pmore
     1c0:	ret
     1c4:	cmn	w0, #0x4
     1c8:	b.eq	1ac <_ZN11__sanitizer13internal_readEiPvm+0x4>  // b.none
     1cc:	ret

00000000000001d0 <_ZN11__sanitizer14internal_writeEiPKvm>:
     1d0:	sxtw	x3, w0
     1d4:	mov	x0, x3
     1d8:	mov	x8, #0x40                  	// #64
     1dc:	svc	#0x0
     1e0:	cmn	x0, #0x1, lsl #12
     1e4:	b.hi	1ec <_ZN11__sanitizer14internal_writeEiPKvm+0x1c>  // b.pmore
     1e8:	ret
     1ec:	cmn	w0, #0x4
     1f0:	b.eq	1d4 <_ZN11__sanitizer14internal_writeEiPKvm+0x4>  // b.none
     1f4:	ret

00000000000001f8 <_ZN11__sanitizer18internal_ftruncateEim>:
     1f8:	sxtw	x2, w0
     1fc:	mov	x0, x2
     200:	mov	x8, #0x2e                  	// #46
     204:	svc	#0x0
     208:	cmn	x0, #0x1, lsl #12
     20c:	b.hi	214 <_ZN11__sanitizer18internal_ftruncateEim+0x1c>  // b.pmore
     210:	ret
     214:	cmn	w0, #0x4
     218:	b.eq	1fc <_ZN11__sanitizer18internal_ftruncateEim+0x4>  // b.none
     21c:	ret

0000000000000220 <_ZN11__sanitizer13internal_statEPKcPv>:
     220:	mov	x2, x1
     224:	mov	x8, #0x4f                  	// #79
     228:	mov	x1, x0
     22c:	mov	x3, #0x0                   	// #0
     230:	mov	x0, #0xffffffffffffff9c    	// #-100
     234:	svc	#0x0
     238:	ret
     23c:	nop

0000000000000240 <_ZN11__sanitizer14internal_lstatEPKcPv>:
     240:	mov	x2, x1
     244:	mov	x8, #0x4f                  	// #79
     248:	mov	x1, x0
     24c:	mov	x3, #0x100                 	// #256
     250:	mov	x0, #0xffffffffffffff9c    	// #-100
     254:	svc	#0x0
     258:	ret
     25c:	nop

0000000000000260 <_ZN11__sanitizer14internal_fstatEiPv>:
     260:	mov	x8, #0x50                  	// #80
     264:	sxtw	x0, w0
     268:	svc	#0x0
     26c:	ret

0000000000000270 <_ZN11__sanitizer17internal_filesizeEi>:
     270:	sub	sp, sp, #0x80
     274:	mov	x8, #0x50                  	// #80
     278:	mov	x1, sp
     27c:	sxtw	x0, w0
     280:	svc	#0x0
     284:	ldr	x1, [sp, #48]
     288:	cmp	x0, #0x0
     28c:	add	sp, sp, #0x80
     290:	csinv	x0, x1, xzr, eq  // eq = none
     294:	ret

0000000000000298 <_ZN11__sanitizer13internal_dup2Eii>:
     298:	mov	x8, #0x18                  	// #24
     29c:	mov	x2, #0x0                   	// #0
     2a0:	sxtw	x0, w0
     2a4:	sxtw	x1, w1
     2a8:	svc	#0x0
     2ac:	ret

00000000000002b0 <_ZN11__sanitizer17internal_readlinkEPKcPcm>:
     2b0:	mov	x4, x1
     2b4:	mov	x3, x2
     2b8:	mov	x1, x0
     2bc:	mov	x2, x4
     2c0:	mov	x8, #0x4e                  	// #78
     2c4:	mov	x0, #0xffffffffffffff9c    	// #-100
     2c8:	svc	#0x0
     2cc:	ret

00000000000002d0 <_ZN11__sanitizer15internal_unlinkEPKc>:
     2d0:	mov	x1, x0
     2d4:	mov	x8, #0x23                  	// #35
     2d8:	mov	x0, #0xffffffffffffff9c    	// #-100
     2dc:	mov	x2, #0x0                   	// #0
     2e0:	svc	#0x0
     2e4:	ret

00000000000002e8 <_ZN11__sanitizer15internal_renameEPKcS1_>:
     2e8:	mov	x3, x1
     2ec:	mov	x8, #0x26                  	// #38
     2f0:	mov	x1, x0
     2f4:	mov	x0, #0xffffffffffffff9c    	// #-100
     2f8:	mov	x2, x0
     2fc:	svc	#0x0
     300:	ret
     304:	nop

0000000000000308 <_ZN11__sanitizer20internal_sched_yieldEv>:
     308:	mov	x8, #0x7c                  	// #124
     30c:	svc	#0x0
     310:	ret
     314:	nop

0000000000000318 <_ZN11__sanitizer14internal__exitEi>:
     318:	sxtw	x0, w0
     31c:	mov	x8, #0x5e                  	// #94
     320:	str	x30, [sp, #-16]!
     324:	svc	#0x0
     328:	bl	0 <_ZN11__sanitizer3DieEv>
     32c:	nop

0000000000000330 <_ZN11__sanitizer14internal_sleepEj>:
     330:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     334:	sub	sp, sp, #0x10
     338:	mov	x8, #0x65                  	// #101
     33c:	ldr	q0, [x0]
     340:	mov	x0, sp
     344:	mov	x1, x0
     348:	str	q0, [sp]
     34c:	svc	#0x0
     350:	ldr	w1, [sp]
     354:	cmp	w0, #0x0
     358:	mov	w0, #0x0                   	// #0
     35c:	add	sp, sp, #0x10
     360:	csel	w0, w1, w0, ne  // ne = any
     364:	ret

0000000000000368 <_ZN11__sanitizer15internal_execveEPKcPKPcS4_>:
     368:	mov	x8, #0xdd                  	// #221
     36c:	svc	#0x0
     370:	ret
     374:	nop

0000000000000378 <_ZN11__sanitizer10FileExistsEPKc>:
     378:	sub	sp, sp, #0x80
     37c:	mov	x1, x0
     380:	mov	x2, sp
     384:	mov	x8, #0x4f                  	// #79
     388:	mov	x0, #0xffffffffffffff9c    	// #-100
     38c:	mov	x3, #0x0                   	// #0
     390:	svc	#0x0
     394:	cbnz	x0, 3b0 <_ZN11__sanitizer10FileExistsEPKc+0x38>
     398:	ldr	w0, [sp, #16]
     39c:	add	sp, sp, #0x80
     3a0:	and	w0, w0, #0xf000
     3a4:	cmp	w0, #0x8, lsl #12
     3a8:	cset	w0, eq  // eq = none
     3ac:	ret
     3b0:	mov	w0, #0x0                   	// #0
     3b4:	add	sp, sp, #0x80
     3b8:	ret
     3bc:	nop

00000000000003c0 <_ZN11__sanitizer6GetTidEv>:
     3c0:	mov	x8, #0xb2                  	// #178
     3c4:	svc	#0x0
     3c8:	ret
     3cc:	nop

00000000000003d0 <_ZN11__sanitizer6TgKillEiyi>:
     3d0:	mov	x8, #0x83                  	// #131
     3d4:	sxtw	x0, w0
     3d8:	sxtw	x2, w2
     3dc:	svc	#0x0
     3e0:	ret
     3e4:	nop

00000000000003e8 <_ZN11__sanitizer8NanoTimeEv>:
     3e8:	stp	x19, x30, [sp, #-32]!
     3ec:	mov	x2, #0x10                  	// #16
     3f0:	mov	w1, #0x0                   	// #0
     3f4:	add	x19, sp, #0x10
     3f8:	mov	x0, x19
     3fc:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     400:	mov	x0, x19
     404:	mov	x8, #0xa9                  	// #169
     408:	mov	x1, #0x0                   	// #0
     40c:	svc	#0x0
     410:	ldp	x3, x2, [sp, #16]
     414:	mov	x0, #0xca00                	// #51712
     418:	movk	x0, #0x3b9a, lsl #16
     41c:	ldp	x19, x30, [sp], #32
     420:	lsl	x1, x2, #5
     424:	sub	x1, x1, x2
     428:	add	x1, x2, x1, lsl #2
     42c:	lsl	x1, x1, #3
     430:	madd	x0, x3, x0, x1
     434:	ret

0000000000000438 <_ZN11__sanitizer22internal_clock_gettimeEiPv>:
     438:	mov	x8, #0x71                  	// #113
     43c:	sxtw	x0, w0
     440:	svc	#0x0
     444:	ret

0000000000000448 <_ZN11__sanitizer6GetEnvEPKc>:
     448:	stp	x19, x20, [sp, #-64]!
     44c:	stp	x21, x22, [sp, #16]
     450:	adrp	x21, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     454:	add	x19, x21, #0x0
     458:	stp	x23, x30, [sp, #32]
     45c:	mov	x23, x0
     460:	ldrb	w0, [x21]
     464:	cbz	w0, 500 <_ZN11__sanitizer6GetEnvEPKc+0xb8>
     468:	ldr	x0, [x19, #8]
     46c:	cbz	x0, 4ec <_ZN11__sanitizer6GetEnvEPKc+0xa4>
     470:	add	x21, x21, #0x0
     474:	ldr	x0, [x21, #16]
     478:	cbz	x0, 4ec <_ZN11__sanitizer6GetEnvEPKc+0xa4>
     47c:	mov	x0, x23
     480:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     484:	ldr	x20, [x21, #8]
     488:	mov	x22, x0
     48c:	ldrb	w0, [x20]
     490:	cbz	w0, 4ec <_ZN11__sanitizer6GetEnvEPKc+0xa4>
     494:	mov	x2, x20
     498:	b	4c8 <_ZN11__sanitizer6GetEnvEPKc+0x80>
     49c:	mov	x1, x23
     4a0:	mov	x0, x20
     4a4:	bl	0 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>
     4a8:	cbnz	w0, 4b8 <_ZN11__sanitizer6GetEnvEPKc+0x70>
     4ac:	ldrb	w0, [x20, x22]
     4b0:	cmp	w0, #0x3d
     4b4:	b.eq	538 <_ZN11__sanitizer6GetEnvEPKc+0xf0>  // b.none
     4b8:	ldrb	w0, [x19, #1]
     4bc:	add	x20, x19, #0x1
     4c0:	cbz	w0, 4ec <_ZN11__sanitizer6GetEnvEPKc+0xa4>
     4c4:	ldr	x2, [x21, #8]
     4c8:	sub	x2, x20, x2
     4cc:	ldr	x3, [x21, #16]
     4d0:	mov	x0, x20
     4d4:	mov	w1, #0x0                   	// #0
     4d8:	sub	x2, x3, x2
     4dc:	bl	0 <_ZN11__sanitizer15internal_memchrEPKvim>
     4e0:	mov	x19, x0
     4e4:	mov	x2, x22
     4e8:	cbnz	x0, 49c <_ZN11__sanitizer6GetEnvEPKc+0x54>
     4ec:	mov	x0, #0x0                   	// #0
     4f0:	ldp	x21, x22, [sp, #16]
     4f4:	ldp	x23, x30, [sp, #32]
     4f8:	ldp	x19, x20, [sp], #64
     4fc:	ret
     500:	mov	w1, #0x1                   	// #1
     504:	add	x3, x19, #0x10
     508:	strb	w1, [x21]
     50c:	add	x2, sp, #0x38
     510:	add	x1, x19, #0x8
     514:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     518:	mov	x5, #0x0                   	// #0
     51c:	add	x0, x0, #0x0
     520:	mov	x4, #0x4000000             	// #67108864
     524:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
     528:	tst	w0, #0xff
     52c:	b.ne	468 <_ZN11__sanitizer6GetEnvEPKc+0x20>  // b.any
     530:	str	xzr, [x19, #8]
     534:	b	4ec <_ZN11__sanitizer6GetEnvEPKc+0xa4>
     538:	add	x0, x22, #0x1
     53c:	add	x0, x20, x0
     540:	ldp	x21, x22, [sp, #16]
     544:	ldp	x23, x30, [sp, #32]
     548:	ldp	x19, x20, [sp], #64
     54c:	ret

0000000000000550 <_ZN11__sanitizer7GetArgvEv>:
     550:	adrp	x0, 0 <__libc_stack_end>
     554:	ldr	x0, [x0]
     558:	cbz	x0, 568 <_ZN11__sanitizer7GetArgvEv+0x18>
     55c:	ldr	x0, [x0]
     560:	add	x0, x0, #0x8
     564:	ret
     568:	str	x30, [sp, #-32]!
     56c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     570:	add	x0, x0, #0x0
     574:	add	x1, sp, #0x10
     578:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     57c:	add	x1, sp, #0x18
     580:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     584:	add	x0, x0, #0x0
     588:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     58c:	ldr	x0, [sp, #16]
     590:	ldr	x30, [sp], #32
     594:	ret

0000000000000598 <_ZN11__sanitizer6ReExecEv>:
     598:	adrp	x0, 0 <__libc_stack_end>
     59c:	str	x30, [sp, #-32]!
     5a0:	ldr	x0, [x0]
     5a4:	cbz	x0, 60c <_ZN11__sanitizer6ReExecEv+0x74>
     5a8:	ldr	x0, [x0]
     5ac:	mov	x1, x0
     5b0:	ldr	x2, [x1], #8
     5b4:	add	x2, x0, w2, sxtw #3
     5b8:	add	x2, x2, #0x10
     5bc:	stp	x1, x2, [sp, #16]
     5c0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     5c4:	mov	x8, #0xdd                  	// #221
     5c8:	add	x0, x0, #0x0
     5cc:	svc	#0x0
     5d0:	cmn	x0, #0x1, lsl #12
     5d4:	b.hi	5f8 <_ZN11__sanitizer6ReExecEv+0x60>  // b.pmore
     5d8:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     5dc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     5e0:	add	x2, x2, #0x0
     5e4:	add	x0, x0, #0x0
     5e8:	mov	x4, #0x1                   	// #1
     5ec:	mov	x3, #0x0                   	// #0
     5f0:	mov	w1, #0x286                 	// #646
     5f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     5f8:	neg	w1, w0
     5fc:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     600:	add	x0, x0, #0x0
     604:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     608:	bl	0 <_ZN11__sanitizer3DieEv>
     60c:	add	x1, sp, #0x10
     610:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     614:	add	x0, x0, #0x0
     618:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     61c:	add	x1, sp, #0x18
     620:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     624:	add	x0, x0, #0x0
     628:	bl	0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     62c:	ldp	x1, x2, [sp, #16]
     630:	b	5c0 <_ZN11__sanitizer6ReExecEv+0x28>
     634:	nop

0000000000000638 <_ZN11__sanitizer13BlockingMutexC1Ev>:
     638:	mov	x2, #0x58                  	// #88
     63c:	mov	w1, #0x0                   	// #0
     640:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
     644:	nop

0000000000000648 <_ZN11__sanitizer13BlockingMutex4LockEv>:
     648:	ldr	x3, [x0, #80]
     64c:	mov	x6, x0
     650:	mov	w1, #0x1                   	// #1
     654:	cbnz	x3, 6bc <_ZN11__sanitizer13BlockingMutex4LockEv+0x74>
     658:	ldxr	w0, [x6]
     65c:	stxr	w2, w1, [x6]
     660:	cbnz	w2, 658 <_ZN11__sanitizer13BlockingMutex4LockEv+0x10>
     664:	dmb	ish
     668:	cbz	w0, 6b8 <_ZN11__sanitizer13BlockingMutex4LockEv+0x70>
     66c:	mov	w7, #0x2                   	// #2
     670:	ldxr	w0, [x6]
     674:	stxr	w1, w7, [x6]
     678:	cbnz	w1, 670 <_ZN11__sanitizer13BlockingMutex4LockEv+0x28>
     67c:	dmb	ish
     680:	cbz	w0, 6b8 <_ZN11__sanitizer13BlockingMutex4LockEv+0x70>
     684:	mov	x0, x6
     688:	mov	x8, #0x62                  	// #98
     68c:	mov	x1, #0x80                  	// #128
     690:	mov	x2, #0x2                   	// #2
     694:	mov	x3, #0x0                   	// #0
     698:	mov	x4, #0x0                   	// #0
     69c:	mov	x5, #0x0                   	// #0
     6a0:	svc	#0x0
     6a4:	ldxr	w0, [x6]
     6a8:	stxr	w1, w7, [x6]
     6ac:	cbnz	w1, 670 <_ZN11__sanitizer13BlockingMutex4LockEv+0x28>
     6b0:	dmb	ish
     6b4:	cbnz	w0, 684 <_ZN11__sanitizer13BlockingMutex4LockEv+0x3c>
     6b8:	ret
     6bc:	str	x30, [sp, #-16]!
     6c0:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     6c4:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     6c8:	add	x2, x2, #0x0
     6cc:	add	x0, x0, #0x0
     6d0:	mov	x4, #0x0                   	// #0
     6d4:	mov	w1, #0x298                 	// #664
     6d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     6dc:	nop

00000000000006e0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>:
     6e0:	dmb	ish
     6e4:	mov	x1, x0
     6e8:	ldxr	w2, [x1]
     6ec:	stxr	w3, wzr, [x1]
     6f0:	cbnz	w3, 6e8 <_ZN11__sanitizer13BlockingMutex6UnlockEv+0x8>
     6f4:	dmb	ish
     6f8:	cbz	w2, 728 <_ZN11__sanitizer13BlockingMutex6UnlockEv+0x48>
     6fc:	cmp	w2, #0x2
     700:	b.eq	708 <_ZN11__sanitizer13BlockingMutex6UnlockEv+0x28>  // b.none
     704:	ret
     708:	mov	x8, #0x62                  	// #98
     70c:	mov	x1, #0x81                  	// #129
     710:	mov	x2, #0x1                   	// #1
     714:	mov	x3, #0x0                   	// #0
     718:	mov	x4, #0x0                   	// #0
     71c:	mov	x5, #0x0                   	// #0
     720:	svc	#0x0
     724:	ret
     728:	str	x30, [sp, #-16]!
     72c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     730:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     734:	add	x2, x2, #0x0
     738:	add	x0, x0, #0x0
     73c:	mov	x4, #0x0                   	// #0
     740:	mov	x3, #0x0                   	// #0
     744:	mov	w1, #0x2ab                 	// #683
     748:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     74c:	nop

0000000000000750 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>:
     750:	ldr	w0, [x0]
     754:	cbz	w0, 75c <_ZN11__sanitizer13BlockingMutex11CheckLockedEv+0xc>
     758:	ret
     75c:	str	x30, [sp, #-16]!
     760:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     764:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     768:	add	x2, x2, #0x0
     76c:	add	x0, x0, #0x0
     770:	mov	x4, #0x0                   	// #0
     774:	mov	x3, #0x0                   	// #0
     778:	mov	w1, #0x2b9                 	// #697
     77c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000780 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>:
     780:	mov	x8, #0x75                  	// #117
     784:	sxtw	x0, w0
     788:	sxtw	x1, w1
     78c:	svc	#0x0
     790:	ret
     794:	nop

0000000000000798 <_ZN11__sanitizer16internal_waitpidEiPii>:
     798:	mov	x8, #0x104                 	// #260
     79c:	mov	x3, #0x0                   	// #0
     7a0:	sxtw	x0, w0
     7a4:	sxtw	x2, w2
     7a8:	svc	#0x0
     7ac:	ret

00000000000007b0 <_ZN11__sanitizer15internal_getpidEv>:
     7b0:	mov	x8, #0xac                  	// #172
     7b4:	svc	#0x0
     7b8:	ret
     7bc:	nop

00000000000007c0 <_ZN11__sanitizer16internal_getppidEv>:
     7c0:	mov	x8, #0xad                  	// #173
     7c4:	svc	#0x0
     7c8:	ret
     7cc:	nop

00000000000007d0 <_ZN11__sanitizer17internal_getdentsEiPNS_12linux_direntEj>:
     7d0:	mov	w2, w2
     7d4:	mov	x8, #0x3d                  	// #61
     7d8:	sxtw	x0, w0
     7dc:	svc	#0x0
     7e0:	ret
     7e4:	nop

00000000000007e8 <_ZN11__sanitizer14internal_lseekEimi>:
     7e8:	mov	x8, #0x3e                  	// #62
     7ec:	sxtw	x0, w0
     7f0:	sxtw	x2, w2
     7f4:	svc	#0x0
     7f8:	ret
     7fc:	nop

0000000000000800 <_ZN11__sanitizer14internal_prctlEimmmm>:
     800:	mov	x8, #0xa7                  	// #167
     804:	sxtw	x0, w0
     808:	svc	#0x0
     80c:	ret

0000000000000810 <_ZN11__sanitizer20internal_sigaltstackEPKvPv>:
     810:	mov	x8, #0x84                  	// #132
     814:	svc	#0x0
     818:	ret
     81c:	nop

0000000000000820 <_ZN11__sanitizer13internal_forkEv>:
     820:	mov	x8, #0xdc                  	// #220
     824:	mov	x0, #0x11                  	// #17
     828:	mov	x1, #0x0                   	// #0
     82c:	svc	#0x0
     830:	ret
     834:	nop

0000000000000838 <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv>:
     838:	stp	x19, x20, [sp, #-112]!
     83c:	sxtw	x20, w0
     840:	mov	x19, x1
     844:	stp	x23, x30, [sp, #32]
     848:	add	x23, sp, #0x30
     84c:	mov	w1, #0x0                   	// #0
     850:	mov	x0, x23
     854:	stp	x21, x22, [sp, #16]
     858:	mov	x21, x2
     85c:	add	x22, sp, #0x50
     860:	mov	x2, #0x20                  	// #32
     864:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     868:	mov	w1, #0x0                   	// #0
     86c:	mov	x0, x22
     870:	mov	x2, #0x20                  	// #32
     874:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     878:	mov	x1, #0x0                   	// #0
     87c:	cbz	x19, 8b0 <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv+0x78>
     880:	mov	x1, x19
     884:	mov	x2, #0x8                   	// #8
     888:	add	x0, x23, #0x18
     88c:	ldr	x3, [x1], #8
     890:	str	x3, [sp, #48]
     894:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     898:	ldr	w0, [x19, #136]
     89c:	mov	x1, x23
     8a0:	ldr	x2, [x19, #144]
     8a4:	orr	w0, w0, #0x4000000
     8a8:	sxtw	x0, w0
     8ac:	stp	x0, x2, [sp, #56]
     8b0:	cmp	x21, #0x0
     8b4:	mov	x0, x20
     8b8:	csel	x2, x22, xzr, ne  // ne = any
     8bc:	mov	x8, #0x86                  	// #134
     8c0:	mov	x3, #0x8                   	// #8
     8c4:	svc	#0x0
     8c8:	cmp	x0, #0x0
     8cc:	mov	x19, x0
     8d0:	ccmp	x21, #0x0, #0x4, eq  // eq = none
     8d4:	b.ne	8ec <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv+0xb4>  // b.any
     8d8:	mov	w0, w19
     8dc:	ldp	x21, x22, [sp, #16]
     8e0:	ldp	x23, x30, [sp, #32]
     8e4:	ldp	x19, x20, [sp], #112
     8e8:	ret
     8ec:	mov	x0, x21
     8f0:	mov	x2, x3
     8f4:	ldr	x3, [sp, #80]
     8f8:	add	x1, x22, #0x18
     8fc:	str	x3, [x0], #8
     900:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     904:	ldr	x0, [sp, #88]
     908:	str	w0, [x21, #136]
     90c:	ldr	x0, [sp, #96]
     910:	str	x0, [x21, #144]
     914:	mov	w0, w19
     918:	ldp	x21, x22, [sp, #16]
     91c:	ldp	x23, x30, [sp, #32]
     920:	ldp	x19, x20, [sp], #112
     924:	ret

0000000000000928 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>:
     928:	mov	x8, #0x87                  	// #135
     92c:	mov	x3, #0x8                   	// #8
     930:	sxtw	x0, w0
     934:	svc	#0x0
     938:	ret
     93c:	nop

0000000000000940 <_ZN11__sanitizer19internal_sigfillsetEPNS_20__sanitizer_sigset_tE>:
     940:	mov	x2, #0x80                  	// #128
     944:	mov	w1, #0xff                  	// #255
     948:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
     94c:	nop

0000000000000950 <_ZN11__sanitizer20internal_sigemptysetEPNS_20__sanitizer_sigset_tE>:
     950:	mov	x2, #0x80                  	// #128
     954:	mov	w1, #0x0                   	// #0
     958:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
     95c:	nop

0000000000000960 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi>:
     960:	sub	w1, w1, #0x1
     964:	sxtw	x3, w1
     968:	cmp	x3, #0x3ff
     96c:	b.hi	990 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi+0x30>  // b.pmore
     970:	lsr	x3, x3, #3
     974:	and	w1, w1, #0x7
     978:	mov	w2, #0x1                   	// #1
     97c:	lsl	w1, w2, w1
     980:	ldrb	w2, [x0, x3]
     984:	bic	w1, w2, w1
     988:	strb	w1, [x0, x3]
     98c:	ret
     990:	str	x30, [sp, #-16]!
     994:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     998:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     99c:	add	x2, x2, #0x0
     9a0:	add	x0, x0, #0x0
     9a4:	mov	x4, #0x400                 	// #1024
     9a8:	mov	w1, #0x381                 	// #897
     9ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000009b0 <_ZN11__sanitizer20internal_sigismemberEPNS_20__sanitizer_sigset_tEi>:
     9b0:	sub	w1, w1, #0x1
     9b4:	sxtw	x3, w1
     9b8:	cmp	x3, #0x3ff
     9bc:	b.hi	9d8 <_ZN11__sanitizer20internal_sigismemberEPNS_20__sanitizer_sigset_tEi+0x28>  // b.pmore
     9c0:	lsr	x3, x3, #3
     9c4:	and	w1, w1, #0x7
     9c8:	ldrb	w0, [x0, x3]
     9cc:	asr	w0, w0, w1
     9d0:	and	w0, w0, #0x1
     9d4:	ret
     9d8:	str	x30, [sp, #-16]!
     9dc:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     9e0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     9e4:	add	x2, x2, #0x0
     9e8:	add	x0, x0, #0x0
     9ec:	mov	x4, #0x400                 	// #1024
     9f0:	mov	w1, #0x38b                 	// #907
     9f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000009f8 <_ZN11__sanitizer12ThreadListerC1Ei>:
     9f8:	stp	x19, x20, [sp, #-144]!
     9fc:	mov	x19, x0
     a00:	mov	w20, w1
     a04:	stp	x23, x24, [sp, #32]
     a08:	adrp	x24, 0 <_ZN11__sanitizer14PageSizeCachedE>
     a0c:	mov	w1, #0xffffffff            	// #-1
     a10:	stp	x21, x22, [sp, #16]
     a14:	ldr	x21, [x24]
     a18:	stp	x25, x30, [sp, #48]
     a1c:	stp	xzr, xzr, [x0, #16]
     a20:	ldr	x0, [x21]
     a24:	stp	w20, w1, [x19]
     a28:	str	xzr, [x19, #8]
     a2c:	cbz	x0, b2c <_ZN11__sanitizer12ThreadListerC1Ei+0x134>
     a30:	sub	x1, x0, #0x1
     a34:	tst	x1, x0
     a38:	b.ne	b9c <_ZN11__sanitizer12ThreadListerC1Ei+0x1a4>  // b.any
     a3c:	add	x21, x19, #0x8
     a40:	add	x22, x0, #0xfff
     a44:	neg	x0, x0
     a48:	mov	w2, #0x0                   	// #0
     a4c:	and	x22, x22, x0
     a50:	adrp	x25, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     a54:	mov	x0, x22
     a58:	add	x1, x25, #0x0
     a5c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     a60:	mov	x23, x0
     a64:	ldr	x1, [x19, #8]
     a68:	ldr	x2, [x21, #16]
     a6c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     a70:	ldr	x0, [x19, #8]
     a74:	ldr	x1, [x21, #8]
     a78:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     a7c:	ldr	x2, [x21, #16]
     a80:	str	x23, [x19, #8]
     a84:	str	x22, [x21, #8]
     a88:	cmp	x2, #0xfff
     a8c:	b.hi	aac <_ZN11__sanitizer12ThreadListerC1Ei+0xb4>  // b.pmore
     a90:	cmp	x22, #0xfff
     a94:	b.ls	b3c <_ZN11__sanitizer12ThreadListerC1Ei+0x144>  // b.plast
     a98:	mov	x3, #0x1000                	// #4096
     a9c:	add	x0, x23, x2
     aa0:	mov	w1, #0x0                   	// #0
     aa4:	sub	x2, x3, x2
     aa8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     aac:	mov	x0, #0x1000                	// #4096
     ab0:	str	x0, [x21, #16]
     ab4:	add	x21, sp, #0x40
     ab8:	mov	w3, w20
     abc:	mov	x0, x21
     ac0:	mov	x1, #0x50                  	// #80
     ac4:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     ac8:	add	x2, x2, #0x0
     acc:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     ad0:	mov	x1, x21
     ad4:	mov	x8, #0x38                  	// #56
     ad8:	mov	x0, #0xffffffffffffff9c    	// #-100
     adc:	mov	x2, #0x4000                	// #16384
     ae0:	svc	#0x0
     ae4:	str	w0, [x19, #4]
     ae8:	sxtw	x0, w0
     aec:	cmn	x0, #0x1, lsl #12
     af0:	b.hi	b08 <_ZN11__sanitizer12ThreadListerC1Ei+0x110>  // b.pmore
     af4:	ldp	x21, x22, [sp, #16]
     af8:	ldp	x23, x24, [sp, #32]
     afc:	ldp	x25, x30, [sp, #48]
     b00:	ldp	x19, x20, [sp], #144
     b04:	ret
     b08:	mov	w1, w20
     b0c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     b10:	add	x0, x0, #0x0
     b14:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     b18:	ldp	x21, x22, [sp, #16]
     b1c:	ldp	x23, x24, [sp, #32]
     b20:	ldp	x25, x30, [sp, #48]
     b24:	ldp	x19, x20, [sp], #144
     b28:	ret
     b2c:	mov	x0, #0x6                   	// #6
     b30:	bl	0 <getauxval>
     b34:	str	x0, [x21]
     b38:	b	a30 <_ZN11__sanitizer12ThreadListerC1Ei+0x38>
     b3c:	ldr	x24, [x24]
     b40:	ldr	x0, [x24]
     b44:	cbz	x0, bac <_ZN11__sanitizer12ThreadListerC1Ei+0x1b4>
     b48:	sub	x1, x0, #0x1
     b4c:	tst	x1, x0
     b50:	b.ne	b9c <_ZN11__sanitizer12ThreadListerC1Ei+0x1a4>  // b.any
     b54:	add	x22, x0, #0xfff
     b58:	neg	x0, x0
     b5c:	and	x22, x22, x0
     b60:	add	x1, x25, #0x0
     b64:	mov	w2, #0x0                   	// #0
     b68:	mov	x0, x22
     b6c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     b70:	mov	x23, x0
     b74:	ldr	x1, [x19, #8]
     b78:	ldr	x2, [x21, #16]
     b7c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     b80:	ldr	x0, [x19, #8]
     b84:	ldr	x1, [x21, #8]
     b88:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     b8c:	ldr	x2, [x21, #16]
     b90:	str	x23, [x19, #8]
     b94:	str	x22, [x21, #8]
     b98:	b	a98 <_ZN11__sanitizer12ThreadListerC1Ei+0xa0>
     b9c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     ba0:	add	x0, x0, #0x0
     ba4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     ba8:	bl	0 <_ZN11__sanitizer3DieEv>
     bac:	mov	x0, #0x6                   	// #6
     bb0:	bl	0 <getauxval>
     bb4:	str	x0, [x24]
     bb8:	b	b48 <_ZN11__sanitizer12ThreadListerC1Ei+0x150>
     bbc:	nop

0000000000000bc0 <_ZN11__sanitizer12ThreadLister7IsAliveEi>:
     bc0:	stp	x19, x20, [sp, #-144]!
     bc4:	mov	x20, x0
     bc8:	mov	w4, w1
     bcc:	stp	x21, x22, [sp, #16]
     bd0:	add	x21, sp, #0x40
     bd4:	ldr	w3, [x20], #8
     bd8:	mov	x1, #0x50                  	// #80
     bdc:	mov	x19, x0
     be0:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     be4:	mov	x0, x21
     be8:	add	x2, x2, #0x0
     bec:	str	x30, [sp, #32]
     bf0:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     bf4:	mov	x0, x21
     bf8:	mov	x1, x20
     bfc:	mov	x3, #0x0                   	// #0
     c00:	mov	x2, #0x4000000             	// #67108864
     c04:	bl	0 <_ZN11__sanitizer16ReadFileToVectorEPKcPNS_24InternalMmapVectorNoCtorIcEEmPi>
     c08:	tst	w0, #0xff
     c0c:	b.eq	c18 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x58>  // b.none
     c10:	ldr	x3, [x19, #24]
     c14:	cbnz	x3, c2c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x6c>
     c18:	mov	w0, #0x0                   	// #0
     c1c:	ldp	x21, x22, [sp, #16]
     c20:	ldr	x30, [sp, #32]
     c24:	ldp	x19, x20, [sp], #144
     c28:	ret
     c2c:	ldr	x4, [x19, #16]
     c30:	strb	wzr, [sp, #63]
     c34:	cmp	x3, x4
     c38:	b.hi	d54 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x194>  // b.pmore
     c3c:	add	x1, x3, #0x1
     c40:	b.eq	ca0 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0xe0>  // b.none
     c44:	ldr	x21, [x19, #8]
     c48:	str	x1, [x20, #16]
     c4c:	add	x0, x21, x3
     c50:	add	x1, sp, #0x3f
     c54:	mov	x2, #0x1                   	// #1
     c58:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     c5c:	ldr	x0, [x19, #8]
     c60:	adrp	x20, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     c64:	add	x20, x20, #0x0
     c68:	mov	x1, x20
     c6c:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
     c70:	mov	x19, x0
     c74:	cbz	x0, c18 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x58>
     c78:	mov	x0, x20
     c7c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     c80:	add	x0, x19, x0
     c84:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     c88:	cmp	w0, #0x0
     c8c:	cset	w0, ne  // ne = any
     c90:	ldp	x21, x22, [sp, #16]
     c94:	ldr	x30, [sp, #32]
     c98:	ldp	x19, x20, [sp], #144
     c9c:	ret
     ca0:	cbz	x1, d7c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x1bc>
     ca4:	tst	x3, x1
     ca8:	b.eq	d4c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x18c>  // b.none
     cac:	clz	x2, x1
     cb0:	mov	w0, #0x3f                  	// #63
     cb4:	sub	w0, w0, w2
     cb8:	mov	x2, #0x1                   	// #1
     cbc:	add	w21, w0, #0x1
     cc0:	lsl	x21, x2, x21
     cc4:	cmp	x1, x21
     cc8:	b.cs	dc8 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x208>  // b.hs, b.nlast
     ccc:	lsl	x4, x2, x0
     cd0:	cmp	x1, x4
     cd4:	b.ls	de8 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x228>  // b.plast
     cd8:	cmp	x3, x21
     cdc:	b.hi	d9c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x1dc>  // b.pmore
     ce0:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
     ce4:	ldr	x22, [x22]
     ce8:	ldr	x0, [x22]
     cec:	cbz	x0, d6c <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x1ac>
     cf0:	sub	x22, x0, #0x1
     cf4:	tst	x22, x0
     cf8:	b.ne	db8 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x1f8>  // b.any
     cfc:	add	x21, x21, x22
     d00:	neg	x0, x0
     d04:	and	x22, x21, x0
     d08:	mov	w2, #0x0                   	// #0
     d0c:	mov	x0, x22
     d10:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     d14:	add	x1, x1, #0x0
     d18:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     d1c:	ldr	x1, [x19, #8]
     d20:	mov	x21, x0
     d24:	ldr	x2, [x20, #16]
     d28:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     d2c:	ldr	x1, [x20, #8]
     d30:	ldr	x0, [x19, #8]
     d34:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     d38:	ldr	x3, [x20, #16]
     d3c:	str	x21, [x19, #8]
     d40:	str	x22, [x20, #8]
     d44:	add	x1, x3, #0x1
     d48:	b	c48 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x88>
     d4c:	mov	x21, x1
     d50:	b	ce0 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x120>
     d54:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     d58:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     d5c:	add	x2, x2, #0x0
     d60:	add	x0, x0, #0x0
     d64:	mov	w1, #0x1be                 	// #446
     d68:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d6c:	mov	x0, #0x6                   	// #6
     d70:	bl	0 <getauxval>
     d74:	str	x0, [x22]
     d78:	b	cf0 <_ZN11__sanitizer12ThreadLister7IsAliveEi+0x130>
     d7c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     d80:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     d84:	add	x2, x2, #0x0
     d88:	add	x0, x0, #0x0
     d8c:	mov	x4, #0x0                   	// #0
     d90:	mov	x3, #0x0                   	// #0
     d94:	mov	w1, #0x177                 	// #375
     d98:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d9c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     da0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     da4:	mov	x4, x21
     da8:	add	x2, x2, #0x0
     dac:	add	x0, x0, #0x0
     db0:	mov	w1, #0x1fd                 	// #509
     db4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     db8:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     dbc:	add	x0, x0, #0x0
     dc0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     dc4:	bl	0 <_ZN11__sanitizer3DieEv>
     dc8:	mov	x3, x1
     dcc:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     dd0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     dd4:	mov	x4, x21
     dd8:	add	x2, x2, #0x0
     ddc:	add	x0, x0, #0x0
     de0:	mov	w1, #0x17b                 	// #379
     de4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     de8:	mov	x3, x1
     dec:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     df0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     df4:	add	x2, x2, #0x0
     df8:	add	x0, x0, #0x0
     dfc:	mov	w1, #0x17c                 	// #380
     e00:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     e04:	nop

0000000000000e08 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE>:
     e08:	stp	x19, x20, [sp, #-144]!
     e0c:	stp	x23, x24, [sp, #32]
     e10:	stp	x25, x26, [sp, #48]
     e14:	mov	x25, x0
     e18:	ldrsw	x0, [x0, #4]
     e1c:	str	x30, [sp, #80]
     e20:	cmn	x0, #0x1, lsl #12
     e24:	b.hi	fe4 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x1dc>  // b.pmore
     e28:	mov	x8, #0x3e                  	// #62
     e2c:	mov	x2, #0x0                   	// #0
     e30:	stp	x21, x22, [sp, #16]
     e34:	stp	x27, x28, [sp, #64]
     e38:	mov	x28, x1
     e3c:	mov	x1, #0x0                   	// #0
     e40:	svc	#0x0
     e44:	add	x23, x25, #0x8
     e48:	str	xzr, [x28, #16]
     e4c:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
     e50:	add	x0, sp, #0x88
     e54:	ldr	x19, [x25, #16]
     e58:	str	x0, [sp, #96]
     e5c:	ldr	x3, [x23, #16]
     e60:	mov	w20, #0x1                   	// #1
     e64:	ldr	x0, [x22]
     e68:	mov	w24, #0x2                   	// #2
     e6c:	str	x0, [sp, #104]
     e70:	cmp	x19, x3
     e74:	b.ls	e8c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x84>  // b.plast
     e78:	ldr	x0, [x23]
     e7c:	sub	x2, x19, x3
     e80:	mov	w1, #0x0                   	// #0
     e84:	add	x0, x0, x3
     e88:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     e8c:	str	x19, [x23, #16]
     e90:	cmp	x19, #0xfff
     e94:	b.ls	100c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x204>  // b.plast
     e98:	ldrsw	x0, [x25, #4]
     e9c:	and	x2, x19, #0xffffffff
     ea0:	mov	x8, #0x3d                  	// #61
     ea4:	ldr	x1, [x25, #8]
     ea8:	svc	#0x0
     eac:	mov	x26, x0
     eb0:	cbz	x0, 11c4 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3bc>
     eb4:	cmn	x0, #0x1, lsl #12
     eb8:	b.hi	fb0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x1a8>  // b.pmore
     ebc:	ldr	x19, [x25, #8]
     ec0:	add	x27, x19, x0
     ec4:	cmp	x19, x27
     ec8:	b.cs	f58 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x150>  // b.hs, b.nlast
     ecc:	adrp	x21, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     ed0:	add	x21, x21, #0x0
     ed4:	b	ee4 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xdc>
     ed8:	cbnz	x2, f00 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xf8>
     edc:	cmp	x27, x19
     ee0:	b.ls	f58 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x150>  // b.plast
     ee4:	mov	x0, x19
     ee8:	ldrh	w2, [x19, #16]
     eec:	add	x19, x19, x2
     ef0:	ldr	x2, [x0]
     ef4:	cmp	x2, #0x1
     ef8:	b.ne	ed8 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xd0>  // b.any
     efc:	mov	w24, w2
     f00:	ldrb	w2, [x0, #19]
     f04:	sub	w2, w2, #0x30
     f08:	and	w2, w2, #0xff
     f0c:	cmp	w2, #0x9
     f10:	b.hi	edc <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xd4>  // b.pmore
     f14:	add	x0, x0, #0x13
     f18:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     f1c:	ldp	x4, x3, [x28, #8]
     f20:	str	x0, [sp, #136]
     f24:	lsr	x4, x4, #3
     f28:	cmp	x3, x4
     f2c:	b.hi	11ac <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3a4>  // b.pmore
     f30:	add	x0, x3, #0x1
     f34:	b.eq	1070 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x268>  // b.none
     f38:	ldr	x7, [x28]
     f3c:	str	x0, [x28, #16]
     f40:	ldr	x1, [sp, #96]
     f44:	add	x0, x7, x3, lsl #3
     f48:	mov	x2, #0x8                   	// #8
     f4c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     f50:	cmp	x27, x19
     f54:	b.hi	ee4 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0xdc>  // b.pmore
     f58:	ldr	x3, [x25, #24]
     f5c:	cbz	w20, fa0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x198>
     f60:	sub	x0, x3, #0x400
     f64:	cmp	x0, x26
     f68:	b.cc	102c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x224>  // b.lo, b.ul, b.last
     f6c:	ldr	x1, [x28, #16]
     f70:	cbz	x1, 1000 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x1f8>
     f74:	ldr	x2, [x28]
     f78:	mov	x0, x25
     f7c:	add	x1, x2, x1, lsl #3
     f80:	ldur	w1, [x1, #-8]
     f84:	bl	bc0 <_ZN11__sanitizer12ThreadLister7IsAliveEi>
     f88:	tst	w0, #0xff
     f8c:	b.eq	111c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x314>  // b.none
     f90:	mov	w20, #0x0                   	// #0
     f94:	ldr	x3, [x23, #16]
     f98:	ldr	x19, [x25, #16]
     f9c:	b	e70 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x68>
     fa0:	mov	w24, #0x1                   	// #1
     fa4:	mov	w20, #0x0                   	// #0
     fa8:	ldr	x19, [x25, #16]
     fac:	b	e70 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x68>
     fb0:	ldr	w1, [x25]
     fb4:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
     fb8:	add	x0, x0, #0x0
     fbc:	mov	w24, #0x0                   	// #0
     fc0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     fc4:	ldp	x21, x22, [sp, #16]
     fc8:	ldp	x27, x28, [sp, #64]
     fcc:	mov	w0, w24
     fd0:	ldp	x23, x24, [sp, #32]
     fd4:	ldp	x25, x26, [sp, #48]
     fd8:	ldr	x30, [sp, #80]
     fdc:	ldp	x19, x20, [sp], #144
     fe0:	ret
     fe4:	mov	w24, #0x0                   	// #0
     fe8:	mov	w0, w24
     fec:	ldp	x23, x24, [sp, #32]
     ff0:	ldp	x25, x26, [sp, #48]
     ff4:	ldr	x30, [sp, #80]
     ff8:	ldp	x19, x20, [sp], #144
     ffc:	ret
    1000:	mov	w20, #0x0                   	// #0
    1004:	ldr	x19, [x25, #16]
    1008:	b	e70 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x68>
    100c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1010:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1014:	mov	x3, x19
    1018:	add	x2, x2, #0x0
    101c:	add	x0, x0, #0x0
    1020:	mov	x4, #0x1000                	// #4096
    1024:	mov	w1, #0x3b5                 	// #949
    1028:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    102c:	cmp	x3, x3, lsl #1
    1030:	lsl	x20, x3, #1
    1034:	ldr	x19, [x25, #16]
    1038:	b.cs	105c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x254>  // b.hs, b.nlast
    103c:	cmp	x20, x19
    1040:	b.hi	1130 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x328>  // b.pmore
    1044:	ldr	x19, [x23]
    1048:	add	x0, x19, x3
    104c:	sub	x2, x20, x3
    1050:	mov	w1, #0x0                   	// #0
    1054:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
    1058:	ldr	x19, [x25, #16]
    105c:	mov	x3, x20
    1060:	mov	w24, #0x1                   	// #1
    1064:	str	x20, [x23, #16]
    1068:	mov	w20, #0x0                   	// #0
    106c:	b	e70 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x68>
    1070:	tst	x3, x0
    1074:	b.eq	10b0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x2a8>  // b.none
    1078:	clz	x2, x0
    107c:	mov	w1, #0x3f                  	// #63
    1080:	sub	w2, w1, w2
    1084:	mov	x1, #0x1                   	// #1
    1088:	add	w4, w2, #0x1
    108c:	lsl	x4, x1, x4
    1090:	cmp	x4, x0
    1094:	b.ls	1190 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x388>  // b.plast
    1098:	lsl	x1, x1, x2
    109c:	cmp	x1, x0
    10a0:	b.cs	1224 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x41c>  // b.hs, b.nlast
    10a4:	cmp	x3, x4
    10a8:	b.hi	11fc <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3f4>  // b.pmore
    10ac:	mov	x0, x4
    10b0:	ldr	x1, [sp, #104]
    10b4:	ldr	x2, [x1]
    10b8:	lsl	x1, x0, #3
    10bc:	cbz	x2, 11d0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3c8>
    10c0:	sub	x0, x2, #0x1
    10c4:	tst	x2, x0
    10c8:	b.ne	11ec <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3e4>  // b.any
    10cc:	add	x0, x1, x0
    10d0:	neg	x2, x2
    10d4:	and	x4, x0, x2
    10d8:	mov	x1, x21
    10dc:	mov	x0, x4
    10e0:	mov	w2, #0x0                   	// #0
    10e4:	str	x4, [sp, #120]
    10e8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    10ec:	str	x0, [sp, #112]
    10f0:	ldr	x1, [x28]
    10f4:	ldr	x2, [x28, #16]
    10f8:	lsl	x2, x2, #3
    10fc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1100:	ldp	x0, x1, [x28]
    1104:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1108:	ldr	x3, [x28, #16]
    110c:	ldp	x7, x4, [sp, #112]
    1110:	add	x0, x3, #0x1
    1114:	stp	x7, x4, [x28]
    1118:	b	f3c <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x134>
    111c:	mov	w24, #0x1                   	// #1
    1120:	mov	w20, #0x0                   	// #0
    1124:	ldr	x3, [x23, #16]
    1128:	ldr	x19, [x25, #16]
    112c:	b	e70 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x68>
    1130:	cbz	x20, 1244 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x43c>
    1134:	ldr	x19, [x22]
    1138:	ldr	x0, [x19]
    113c:	cbz	x0, 1214 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x40c>
    1140:	sub	x1, x0, #0x1
    1144:	tst	x0, x1
    1148:	b.ne	11ec <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x3e4>  // b.any
    114c:	add	x1, x20, x1
    1150:	neg	x0, x0
    1154:	and	x21, x1, x0
    1158:	mov	w2, #0x0                   	// #0
    115c:	mov	x0, x21
    1160:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1164:	add	x1, x1, #0x0
    1168:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    116c:	ldr	x1, [x23]
    1170:	mov	x19, x0
    1174:	ldr	x2, [x23, #16]
    1178:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    117c:	ldp	x0, x1, [x23]
    1180:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1184:	stp	x19, x21, [x23]
    1188:	ldr	x3, [x23, #16]
    118c:	b	1048 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x240>
    1190:	mov	x3, x0
    1194:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1198:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    119c:	add	x2, x2, #0x0
    11a0:	add	x0, x0, #0x0
    11a4:	mov	w1, #0x17b                 	// #379
    11a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11ac:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    11b0:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    11b4:	add	x2, x2, #0x0
    11b8:	add	x0, x0, #0x0
    11bc:	mov	w1, #0x1be                 	// #446
    11c0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11c4:	ldp	x21, x22, [sp, #16]
    11c8:	ldp	x27, x28, [sp, #64]
    11cc:	b	fcc <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x1c4>
    11d0:	mov	x0, #0x6                   	// #6
    11d4:	str	x1, [sp, #112]
    11d8:	bl	0 <getauxval>
    11dc:	mov	x2, x0
    11e0:	ldp	x0, x1, [sp, #104]
    11e4:	str	x2, [x0]
    11e8:	b	10c0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x2b8>
    11ec:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    11f0:	add	x0, x0, #0x0
    11f4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    11f8:	bl	0 <_ZN11__sanitizer3DieEv>
    11fc:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1200:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1204:	add	x2, x2, #0x0
    1208:	add	x0, x0, #0x0
    120c:	mov	w1, #0x1fd                 	// #509
    1210:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1214:	mov	x0, #0x6                   	// #6
    1218:	bl	0 <getauxval>
    121c:	str	x0, [x19]
    1220:	b	1140 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE+0x338>
    1224:	mov	x4, x1
    1228:	mov	x3, x0
    122c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1230:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1234:	add	x2, x2, #0x0
    1238:	add	x0, x0, #0x0
    123c:	mov	w1, #0x17c                 	// #380
    1240:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1244:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1248:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    124c:	add	x2, x2, #0x0
    1250:	add	x0, x0, #0x0
    1254:	mov	x4, #0x0                   	// #0
    1258:	mov	x3, #0x0                   	// #0
    125c:	mov	w1, #0x1fc                 	// #508
    1260:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1264:	nop

0000000000001268 <_ZN11__sanitizer12ThreadListerD1Ev>:
    1268:	mov	x1, x0
    126c:	ldrsw	x0, [x0, #4]
    1270:	cmn	x0, #0x1, lsl #12
    1274:	b.hi	1280 <_ZN11__sanitizer12ThreadListerD1Ev+0x18>  // b.pmore
    1278:	mov	x8, #0x39                  	// #57
    127c:	svc	#0x0
    1280:	ldp	x0, x1, [x1, #8]
    1284:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>

0000000000001288 <_ZN11__sanitizer20GetMaxVirtualAddressEv>:
    1288:	stp	x29, x30, [sp, #-16]!
    128c:	mov	x0, #0x1                   	// #1
    1290:	mov	x29, sp
    1294:	clz	x1, x29
    1298:	neg	w1, w1
    129c:	ldp	x29, x30, [sp], #16
    12a0:	lsl	x0, x0, x1
    12a4:	sub	x0, x0, #0x1
    12a8:	ret
    12ac:	nop

00000000000012b0 <_ZN11__sanitizer24GetMaxUserVirtualAddressEv>:
    12b0:	stp	x29, x30, [sp, #-16]!
    12b4:	mov	x0, #0x1                   	// #1
    12b8:	mov	x29, sp
    12bc:	clz	x1, x29
    12c0:	neg	w1, w1
    12c4:	ldp	x29, x30, [sp], #16
    12c8:	lsl	x0, x0, x1
    12cc:	sub	x0, x0, #0x1
    12d0:	ret
    12d4:	nop

00000000000012d8 <_ZN11__sanitizer11GetPageSizeEv>:
    12d8:	mov	x0, #0x6                   	// #6
    12dc:	b	0 <getauxval>

00000000000012e0 <_ZN11__sanitizer14ReadBinaryNameEPcm>:
    12e0:	stp	x19, x20, [sp, #-32]!
    12e4:	mov	x2, x0
    12e8:	mov	x20, x0
    12ec:	mov	x19, x1
    12f0:	mov	x3, x1
    12f4:	mov	x8, #0x4e                  	// #78
    12f8:	mov	x0, #0xffffffffffffff9c    	// #-100
    12fc:	stp	x21, x30, [sp, #16]
    1300:	adrp	x21, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1304:	add	x1, x21, #0x0
    1308:	svc	#0x0
    130c:	cmn	x0, #0x1, lsl #12
    1310:	b.hi	1320 <_ZN11__sanitizer14ReadBinaryNameEPcm+0x40>  // b.pmore
    1314:	ldp	x21, x30, [sp, #16]
    1318:	ldp	x19, x20, [sp], #32
    131c:	ret
    1320:	neg	w1, w0
    1324:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1328:	add	x0, x0, #0x0
    132c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1330:	add	x3, x21, #0x0
    1334:	mov	x0, x20
    1338:	mov	x1, x19
    133c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1340:	add	x2, x2, #0x0
    1344:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
    1348:	cmp	x19, w0, sxtw
    134c:	sxtw	x0, w0
    1350:	b.hi	1314 <_ZN11__sanitizer14ReadBinaryNameEPcm+0x34>  // b.pmore
    1354:	mov	x3, x0
    1358:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    135c:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1360:	mov	x4, x19
    1364:	add	x2, x2, #0x0
    1368:	add	x0, x0, #0x0
    136c:	mov	w1, #0x470                 	// #1136
    1370:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1374:	nop

0000000000001378 <_ZN11__sanitizer19ReadLongProcessNameEPcm>:
    1378:	stp	x19, x20, [sp, #-64]!
    137c:	mov	x5, #0x0                   	// #0
    1380:	mov	x19, x0
    1384:	mov	x20, x1
    1388:	add	x3, sp, #0x38
    138c:	add	x2, sp, #0x30
    1390:	add	x1, sp, #0x28
    1394:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1398:	mov	x4, #0x100000              	// #1048576
    139c:	add	x0, x0, #0x0
    13a0:	str	x30, [sp, #24]
    13a4:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
    13a8:	tst	w0, #0xff
    13ac:	b.eq	13dc <_ZN11__sanitizer19ReadLongProcessNameEPcm+0x64>  // b.none
    13b0:	ldr	x1, [sp, #40]
    13b4:	mov	x2, x20
    13b8:	mov	x0, x19
    13bc:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
    13c0:	ldp	x0, x1, [sp, #40]
    13c4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    13c8:	mov	x0, x19
    13cc:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
    13d0:	ldr	x30, [sp, #24]
    13d4:	ldp	x19, x20, [sp], #64
    13d8:	ret
    13dc:	mov	x2, x19
    13e0:	mov	x3, x20
    13e4:	mov	x8, #0x4e                  	// #78
    13e8:	mov	x0, #0xffffffffffffff9c    	// #-100
    13ec:	str	x21, [sp, #16]
    13f0:	adrp	x21, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    13f4:	add	x1, x21, #0x0
    13f8:	svc	#0x0
    13fc:	cmn	x0, #0x1, lsl #12
    1400:	b.hi	1414 <_ZN11__sanitizer19ReadLongProcessNameEPcm+0x9c>  // b.pmore
    1404:	ldr	x21, [sp, #16]
    1408:	ldr	x30, [sp, #24]
    140c:	ldp	x19, x20, [sp], #64
    1410:	ret
    1414:	neg	w1, w0
    1418:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    141c:	add	x0, x0, #0x0
    1420:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1424:	add	x3, x21, #0x0
    1428:	mov	x0, x19
    142c:	mov	x1, x20
    1430:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1434:	add	x2, x2, #0x0
    1438:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
    143c:	cmp	x20, w0, sxtw
    1440:	sxtw	x0, w0
    1444:	b.hi	1404 <_ZN11__sanitizer19ReadLongProcessNameEPcm+0x8c>  // b.pmore
    1448:	mov	x3, x0
    144c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1450:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1454:	mov	x4, x20
    1458:	add	x2, x2, #0x0
    145c:	add	x0, x0, #0x0
    1460:	mov	w1, #0x470                 	// #1136
    1464:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000001468 <_ZN11__sanitizer13LibraryNameIsEPKcS1_>:
    1468:	stp	x19, x20, [sp, #-32]!
    146c:	mov	x20, x1
    1470:	mov	x19, x0
    1474:	str	x30, [sp, #16]
    1478:	ldrb	w1, [x0]
    147c:	cbz	w1, 14b0 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x48>
    1480:	ldrb	w2, [x19, #1]!
    1484:	cbnz	w2, 1480 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x18>
    1488:	cmp	x0, x19
    148c:	b.cc	14a0 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x38>  // b.lo, b.ul, b.last
    1490:	b	14b0 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x48>
    1494:	ldrb	w2, [x19, #-1]!
    1498:	cmp	x0, x19
    149c:	b.eq	14f8 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x90>  // b.none
    14a0:	ldrb	w2, [x19]
    14a4:	cmp	w2, #0x2f
    14a8:	b.ne	1494 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x2c>  // b.any
    14ac:	add	x19, x19, #0x1
    14b0:	mov	x0, x20
    14b4:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
    14b8:	mov	x1, x20
    14bc:	mov	x20, x0
    14c0:	mov	x2, x20
    14c4:	mov	x0, x19
    14c8:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
    14cc:	mov	w1, #0x0                   	// #0
    14d0:	cbnz	w0, 14e8 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x80>
    14d4:	ldrb	w0, [x19, x20]
    14d8:	sub	w0, w0, #0x2d
    14dc:	and	w0, w0, #0xff
    14e0:	cmp	w0, #0x1
    14e4:	cset	w1, ls  // ls = plast
    14e8:	mov	w0, w1
    14ec:	ldr	x30, [sp, #16]
    14f0:	ldp	x19, x20, [sp], #32
    14f4:	ret
    14f8:	cmp	w2, #0x2f
    14fc:	b.ne	14b0 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x48>  // b.any
    1500:	add	x19, x19, #0x1
    1504:	b	14b0 <_ZN11__sanitizer13LibraryNameIsEPKcS1_+0x48>

0000000000001508 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE>:
    1508:	stp	x19, x20, [sp, #-80]!
    150c:	stp	x21, x22, [sp, #16]
    1510:	str	x30, [sp, #72]
    1514:	cbz	x0, 1654 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x14c>
    1518:	str	x27, [sp, #64]
    151c:	mov	x21, x1
    1520:	ldr	x27, [x0]
    1524:	mov	x22, #0xffffffffffffffff    	// #-1
    1528:	ldrh	w0, [x27, #54]
    152c:	ldrh	w20, [x27, #56]
    1530:	ldr	x19, [x27, #32]
    1534:	and	x2, x0, #0xffff
    1538:	mul	w20, w20, w0
    153c:	add	x19, x27, x19
    1540:	mov	x0, x19
    1544:	add	x20, x19, w20, sxtw
    1548:	cmp	x19, x20
    154c:	b.eq	1600 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xf8>  // b.none
    1550:	stp	x23, x24, [sp, #32]
    1554:	stp	x25, x26, [sp, #48]
    1558:	ldr	w3, [x0]
    155c:	cmp	w3, #0x1
    1560:	b.ne	1570 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x68>  // b.any
    1564:	ldr	x1, [x0, #16]
    1568:	cmp	x22, x1
    156c:	csel	x22, x22, x1, ls  // ls = plast
    1570:	add	x0, x0, x2
    1574:	cmp	x20, x0
    1578:	b.ne	1558 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x50>  // b.any
    157c:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1580:	sub	x22, x27, x22
    1584:	ldr	x23, [x23]
    1588:	b	1598 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x90>
    158c:	add	x19, x19, x2
    1590:	cmp	x20, x19
    1594:	b.eq	15f8 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xf0>  // b.none
    1598:	ldr	w0, [x19]
    159c:	cmp	w0, #0x1
    15a0:	b.ne	158c <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x84>  // b.any
    15a4:	ldr	x0, [x23]
    15a8:	ldr	x25, [x19, #16]
    15ac:	neg	x24, x0
    15b0:	ldr	x1, [x19, #40]
    15b4:	add	x25, x22, x25
    15b8:	and	x24, x24, x25
    15bc:	add	x26, x25, x1
    15c0:	cbz	x0, 1614 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x10c>
    15c4:	sub	x2, x0, #0x1
    15c8:	tst	x2, x0
    15cc:	b.ne	1644 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x13c>  // b.any
    15d0:	add	x2, x2, x26
    15d4:	neg	x0, x0
    15d8:	and	x1, x2, x0
    15dc:	mov	x0, x24
    15e0:	sub	x1, x1, x24
    15e4:	blr	x21
    15e8:	ldrh	w2, [x27, #54]
    15ec:	add	x19, x19, x2
    15f0:	cmp	x20, x19
    15f4:	b.ne	1598 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0x90>  // b.any
    15f8:	ldp	x23, x24, [sp, #32]
    15fc:	ldp	x25, x26, [sp, #48]
    1600:	ldp	x21, x22, [sp, #16]
    1604:	ldr	x27, [sp, #64]
    1608:	ldr	x30, [sp, #72]
    160c:	ldp	x19, x20, [sp], #80
    1610:	ret
    1614:	mov	x0, #0x6                   	// #6
    1618:	bl	0 <getauxval>
    161c:	str	x0, [x23]
    1620:	neg	x24, x0
    1624:	and	x24, x24, x25
    1628:	cbnz	x0, 15c4 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xbc>
    162c:	mov	x0, #0x6                   	// #6
    1630:	bl	0 <getauxval>
    1634:	str	x0, [x23]
    1638:	sub	x2, x0, #0x1
    163c:	tst	x2, x0
    1640:	b.eq	15d0 <_ZN11__sanitizer19ForEachMappedRegionEP8link_mapPFvPKvmE+0xc8>  // b.none
    1644:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1648:	add	x0, x0, #0x0
    164c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    1650:	bl	0 <_ZN11__sanitizer3DieEv>
    1654:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1658:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    165c:	add	x2, x2, #0x0
    1660:	add	x0, x0, #0x0
    1664:	mov	x4, #0x0                   	// #0
    1668:	mov	x3, #0x0                   	// #0
    166c:	mov	w1, #0x495                 	// #1173
    1670:	stp	x23, x24, [sp, #32]
    1674:	stp	x25, x26, [sp, #48]
    1678:	str	x27, [sp, #64]
    167c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000001680 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_>:
    1680:	cmp	x0, #0x0
    1684:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    1688:	b.eq	16dc <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_+0x5c>  // b.none
    168c:	str	x30, [sp, #-16]!
    1690:	mov	x7, x1
    1694:	ands	x1, x1, #0xf
    1698:	b.ne	16e4 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_+0x64>  // b.any
    169c:	sub	x1, x7, #0x10
    16a0:	stp	x0, x3, [x7, #-16]
    16a4:	mov	x0, x2
    16a8:	mov	x2, x4
    16ac:	mov	x3, x5
    16b0:	mov	x4, x6
    16b4:	mov	x8, #0xdc                  	// #220
    16b8:	svc	#0x0
    16bc:	cmp	x0, #0x0
    16c0:	b.ne	16d4 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_+0x54>  // b.any
    16c4:	ldp	x1, x0, [sp], #16
    16c8:	blr	x1
    16cc:	mov	x8, #0x5d                  	// #93
    16d0:	svc	#0x0
    16d4:	ldr	x30, [sp], #16
    16d8:	ret
    16dc:	mov	x0, #0xffffffffffffffea    	// #-22
    16e0:	ret
    16e4:	mov	x4, x1
    16e8:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    16ec:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    16f0:	add	x2, x2, #0x0
    16f4:	add	x0, x0, #0x0
    16f8:	mov	x3, #0x0                   	// #0
    16fc:	mov	w1, #0x54b                 	// #1355
    1700:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1704:	nop

0000000000001708 <_ZN11__sanitizer19GetHandleSignalModeEi>:
    1708:	cmp	w0, #0x7
    170c:	b.eq	17b8 <_ZN11__sanitizer19GetHandleSignalModeEi+0xb0>  // b.none
    1710:	b.gt	175c <_ZN11__sanitizer19GetHandleSignalModeEi+0x54>
    1714:	cmp	w0, #0x5
    1718:	b.eq	17d0 <_ZN11__sanitizer19GetHandleSignalModeEi+0xc8>  // b.none
    171c:	cmp	w0, #0x6
    1720:	b.ne	173c <_ZN11__sanitizer19GetHandleSignalModeEi+0x34>  // b.any
    1724:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1728:	ldr	x0, [x1]
    172c:	ldr	w0, [x0, #80]
    1730:	cmp	w0, #0x1
    1734:	b.eq	1780 <_ZN11__sanitizer19GetHandleSignalModeEi+0x78>  // b.none
    1738:	ret
    173c:	cmp	w0, #0x4
    1740:	b.ne	1798 <_ZN11__sanitizer19GetHandleSignalModeEi+0x90>  // b.any
    1744:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1748:	ldr	x0, [x1]
    174c:	ldr	w0, [x0, #84]
    1750:	cmp	w0, #0x1
    1754:	b.ne	1738 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>  // b.any
    1758:	b	1780 <_ZN11__sanitizer19GetHandleSignalModeEi+0x78>
    175c:	cmp	w0, #0x8
    1760:	b.eq	17a0 <_ZN11__sanitizer19GetHandleSignalModeEi+0x98>  // b.none
    1764:	cmp	w0, #0xb
    1768:	b.ne	1798 <_ZN11__sanitizer19GetHandleSignalModeEi+0x90>  // b.any
    176c:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1770:	ldr	x0, [x1]
    1774:	ldr	w0, [x0, #72]
    1778:	cmp	w0, #0x1
    177c:	b.ne	1738 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>  // b.any
    1780:	ldr	x1, [x1]
    1784:	mov	w2, #0x2                   	// #2
    1788:	ldrb	w1, [x1, #96]
    178c:	cmp	w1, #0x0
    1790:	csel	w0, w0, w2, ne  // ne = any
    1794:	ret
    1798:	mov	w0, #0x0                   	// #0
    179c:	ret
    17a0:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    17a4:	ldr	x0, [x1]
    17a8:	ldr	w0, [x0, #92]
    17ac:	cmp	w0, #0x1
    17b0:	b.ne	1738 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>  // b.any
    17b4:	b	1780 <_ZN11__sanitizer19GetHandleSignalModeEi+0x78>
    17b8:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    17bc:	ldr	x0, [x1]
    17c0:	ldr	w0, [x0, #76]
    17c4:	cmp	w0, #0x1
    17c8:	b.ne	1738 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>  // b.any
    17cc:	b	1780 <_ZN11__sanitizer19GetHandleSignalModeEi+0x78>
    17d0:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    17d4:	ldr	x0, [x1]
    17d8:	ldr	w0, [x0, #88]
    17dc:	cmp	w0, #0x1
    17e0:	b.ne	1738 <_ZN11__sanitizer19GetHandleSignalModeEi+0x30>  // b.any
    17e4:	b	1780 <_ZN11__sanitizer19GetHandleSignalModeEi+0x78>

00000000000017e8 <_ZN11__sanitizer21internal_start_threadEPFvPvES0_>:
    17e8:	stp	x19, x20, [sp, #-320]!
    17ec:	mov	x2, #0x80                  	// #128
    17f0:	add	x20, sp, #0x40
    17f4:	stp	x21, x22, [sp, #16]
    17f8:	mov	x21, x0
    17fc:	mov	x22, x1
    1800:	mov	x0, x20
    1804:	mov	w1, #0xff                  	// #255
    1808:	str	x30, [sp, #32]
    180c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
    1810:	add	x19, sp, #0xc0
    1814:	ldrb	w4, [sp, #68]
    1818:	mov	x1, x20
    181c:	mov	x2, x19
    1820:	mov	x8, #0x87                  	// #135
    1824:	and	w4, w4, #0xfffffffe
    1828:	mov	x0, #0x2                   	// #2
    182c:	mov	x3, #0x8                   	// #8
    1830:	strb	w4, [sp, #68]
    1834:	svc	#0x0
    1838:	mov	x1, #0x0                   	// #0
    183c:	mov	x3, x22
    1840:	mov	x2, x21
    1844:	add	x0, sp, #0x38
    1848:	bl	0 <_ZN11__sanitizer19real_pthread_createEPvS0_PFS0_S0_ES0_>
    184c:	mov	x1, x19
    1850:	mov	x8, #0x87                  	// #135
    1854:	mov	x0, #0x2                   	// #2
    1858:	mov	x2, #0x0                   	// #0
    185c:	mov	x3, #0x8                   	// #8
    1860:	svc	#0x0
    1864:	ldp	x21, x22, [sp, #16]
    1868:	ldr	x30, [sp, #32]
    186c:	ldr	x0, [sp, #56]
    1870:	ldp	x19, x20, [sp], #320
    1874:	ret

0000000000001878 <_ZN11__sanitizer20internal_join_threadEPv>:
    1878:	mov	x1, #0x0                   	// #0
    187c:	b	0 <_ZN11__sanitizer17real_pthread_joinEPvPS0_>

0000000000001880 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv>:
    1880:	ldr	x0, [x0, #8]
    1884:	add	x1, x0, #0x1d0
    1888:	ldr	w0, [x0, #468]
    188c:	cbz	w0, 18c0 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x40>
    1890:	mov	w3, #0x5201                	// #20993
    1894:	movk	w3, #0x4553, lsl #16
    1898:	b	18a8 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x28>
    189c:	add	x1, x1, w0, uxtw
    18a0:	ldr	w0, [x1, #4]
    18a4:	cbz	w0, 18c0 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x40>
    18a8:	ldr	w2, [x1]
    18ac:	cmp	w2, w3
    18b0:	b.ne	189c <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv+0x1c>  // b.any
    18b4:	ldr	x0, [x1, #8]
    18b8:	ubfx	w0, w0, #6, #1
    18bc:	add	w0, w0, #0x1
    18c0:	ret
    18c4:	nop

00000000000018c8 <_ZN11__sanitizer13SignalContext16DumpAllRegistersEPv>:
    18c8:	ret
    18cc:	nop

00000000000018d0 <_ZN11__sanitizer13SignalContext10InitPcSpBpEv>:
    18d0:	ldr	x1, [x0, #8]
    18d4:	ldr	x2, [x1, #416]
    18d8:	ldp	x3, x1, [x1, #432]
    18dc:	stp	x1, x3, [x0, #24]
    18e0:	str	x2, [x0, #40]
    18e4:	ret

00000000000018e8 <_ZN11__sanitizer11MaybeReexecEv>:
    18e8:	ret
    18ec:	nop

00000000000018f0 <_ZN11__sanitizer9CheckASLREv>:
    18f0:	ret
    18f4:	nop

00000000000018f8 <_ZN11__sanitizer14PrintModuleMapEv>:
    18f8:	ret
    18fc:	nop

0000000000001900 <_ZN11__sanitizer15CheckNoDeepBindEPKci>:
    1900:	tbnz	w1, #3, 1908 <_ZN11__sanitizer15CheckNoDeepBindEPKci+0x8>
    1904:	ret
    1908:	mov	x2, x0
    190c:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1910:	add	x0, x1, #0x0
    1914:	mov	x1, x2
    1918:	str	x30, [sp, #-16]!
    191c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1920:	bl	0 <_ZN11__sanitizer3DieEv>
    1924:	nop

0000000000001928 <_ZN11__sanitizer24FindAvailableMemoryRangeEmmmPmS0_>:
    1928:	str	x30, [sp, #-16]!
    192c:	adrp	x2, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1930:	adrp	x0, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1934:	add	x2, x2, #0x0
    1938:	add	x0, x0, #0x0
    193c:	mov	x4, #0x0                   	// #0
    1940:	mov	x3, #0x0                   	// #0
    1944:	mov	w1, #0x80a                 	// #2058
    1948:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    194c:	nop

0000000000001950 <_ZN11__sanitizer9GetRandomEPvmb>:
    1950:	sub	x5, x1, #0x1
    1954:	mov	x3, x1
    1958:	cmp	x5, #0xff
    195c:	mov	x4, x0
    1960:	and	w2, w2, #0xff
    1964:	ccmp	x0, #0x0, #0x4, ls  // ls = plast
    1968:	b.ne	1974 <_ZN11__sanitizer9GetRandomEPvmb+0x24>  // b.any
    196c:	mov	w0, #0x0                   	// #0
    1970:	ret
    1974:	adrp	x5, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    1978:	add	x5, x5, #0x0
    197c:	ldrb	w6, [x5, #24]
    1980:	tst	w6, #0xff
    1984:	b.ne	19ac <_ZN11__sanitizer9GetRandomEPvmb+0x5c>  // b.any
    1988:	eor	w2, w2, #0x1
    198c:	mov	x8, #0x116                 	// #278
    1990:	and	x2, x2, #0xff
    1994:	svc	#0x0
    1998:	cmn	x0, #0x1, lsl #12
    199c:	b.hi	1a00 <_ZN11__sanitizer9GetRandomEPvmb+0xb0>  // b.pmore
    19a0:	cmp	x1, x0
    19a4:	mov	w0, #0x1                   	// #1
    19a8:	b.eq	1970 <_ZN11__sanitizer9GetRandomEPvmb+0x20>  // b.none
    19ac:	adrp	x1, 0 <_ZN11__sanitizerL22ReadNullSepFileToArrayEPKcPPPci.constprop.0>
    19b0:	mov	x8, #0x38                  	// #56
    19b4:	add	x1, x1, #0x0
    19b8:	mov	x0, #0xffffffffffffff9c    	// #-100
    19bc:	mov	x2, #0x0                   	// #0
    19c0:	svc	#0x0
    19c4:	cmn	x0, #0x1, lsl #12
    19c8:	b.hi	196c <_ZN11__sanitizer9GetRandomEPvmb+0x1c>  // b.pmore
    19cc:	sxtw	x5, w0
    19d0:	mov	x0, x5
    19d4:	mov	x1, x4
    19d8:	mov	x2, x3
    19dc:	mov	x8, #0x3f                  	// #63
    19e0:	svc	#0x0
    19e4:	cmn	x0, #0x1, lsl #12
    19e8:	b.hi	1a14 <_ZN11__sanitizer9GetRandomEPvmb+0xc4>  // b.pmore
    19ec:	mov	x0, x5
    19f0:	mov	x8, #0x39                  	// #57
    19f4:	svc	#0x0
    19f8:	mov	w0, #0x1                   	// #1
    19fc:	ret
    1a00:	cmn	w0, #0x26
    1a04:	b.ne	19ac <_ZN11__sanitizer9GetRandomEPvmb+0x5c>  // b.any
    1a08:	mov	w0, #0x1                   	// #1
    1a0c:	strb	w0, [x5, #24]
    1a10:	b	19ac <_ZN11__sanitizer9GetRandomEPvmb+0x5c>
    1a14:	cmn	w0, #0x4
    1a18:	b.eq	19d0 <_ZN11__sanitizer9GetRandomEPvmb+0x80>  // b.none
    1a1c:	mov	w0, #0x0                   	// #0
    1a20:	b	1970 <_ZN11__sanitizer9GetRandomEPvmb+0x20>

sanitizer_linux_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>:
   0:	stp	x19, x20, [sp, #-176]!
   4:	stp	x23, x24, [sp, #32]
   8:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
   c:	ldr	x19, [x23]
  10:	stp	x21, x22, [sp, #16]
  14:	mov	x21, x0
  18:	stp	x25, x30, [sp, #48]
  1c:	mov	x22, x2
  20:	ldr	x1, [x19]
  24:	str	xzr, [sp, #64]
  28:	stp	xzr, xzr, [sp, #72]
  2c:	cbz	x1, 22c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x22c>
  30:	sub	x19, x1, #0x1
  34:	ands	x19, x19, x1
  38:	b.ne	340 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x340>  // b.any
  3c:	add	x25, x1, #0xfff
  40:	neg	x1, x1
  44:	and	x25, x25, x1
  48:	mov	w2, #0x0                   	// #0
  4c:	mov	x0, x25
  50:	adrp	x24, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
  54:	add	x1, x24, #0x0
  58:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  5c:	ldr	x1, [sp, #64]
  60:	mov	x20, x0
  64:	ldr	x2, [sp, #80]
  68:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  6c:	ldp	x0, x1, [sp, #64]
  70:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  74:	stp	x20, x25, [sp, #64]
  78:	ldr	x2, [sp, #80]
  7c:	cmp	x2, #0xfff
  80:	b.hi	a4 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0xa4>  // b.pmore
  84:	cmp	x25, #0xfff
  88:	b.ls	2e8 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x2e8>  // b.plast
  8c:	mov	x3, #0x1000                	// #4096
  90:	add	x0, x20, x2
  94:	mov	w1, #0x0                   	// #0
  98:	sub	x2, x3, x2
  9c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  a0:	ldr	x20, [sp, #64]
  a4:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
  a8:	ldr	q0, [x0]
  ac:	str	q0, [sp, #80]
  b0:	strb	wzr, [x20]
  b4:	ldrb	w0, [x22, #8]
  b8:	cbnz	w0, 1d0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x1d0>
  bc:	ldr	x2, [x21, #8]
  c0:	cbz	x2, d4 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0xd4>
  c4:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
  c8:	add	x0, sp, #0x40
  cc:	add	x1, x1, #0x0
  d0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  d4:	ldr	x1, [sp, #80]
  d8:	ldr	x0, [sp, #64]
  dc:	cbz	x1, 350 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x350>
  e0:	ldrb	w1, [x0]
  e4:	cbz	w1, 1b0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x1b0>
  e8:	movi	v0.4s, #0x0
  ec:	add	x25, sp, #0x60
  f0:	mov	x2, #0x10                  	// #16
  f4:	mov	w1, #0x0                   	// #0
  f8:	add	x0, x25, #0x1c
  fc:	str	xzr, [sp, #96]
 100:	str	wzr, [sp, #120]
 104:	stur	q0, [sp, #104]
 108:	strb	wzr, [sp, #140]
 10c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 110:	movi	v0.4s, #0x0
 114:	mov	x0, x25
 118:	ldr	x2, [x21]
 11c:	str	xzr, [sp, #144]
 120:	ldr	x1, [sp, #64]
 124:	stur	q0, [sp, #152]
 128:	bl	0 <_ZN11__sanitizer12LoadedModule3setEPKcm>
 12c:	ldrh	w3, [x21, #24]
 130:	cbz	w3, 160 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x160>
 134:	ldr	x0, [x21, #16]
 138:	mov	w20, #0x0                   	// #0
 13c:	nop
 140:	ldr	w1, [x0, x19]
 144:	add	x2, x0, x19
 148:	cmp	w1, #0x1
 14c:	b.eq	1e4 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x1e4>  // b.none
 150:	add	w20, w20, #0x1
 154:	add	x19, x19, #0x38
 158:	cmp	w3, w20
 15c:	b.gt	140 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x140>
 160:	ldr	x19, [x22]
 164:	mov	x0, #0xe38f                	// #58255
 168:	movk	x0, #0x8e38, lsl #16
 16c:	movk	x0, #0x38e3, lsl #32
 170:	ldp	x4, x3, [x19, #8]
 174:	movk	x0, #0xe38e, lsl #48
 178:	umulh	x4, x4, x0
 17c:	lsr	x4, x4, #6
 180:	cmp	x3, x4
 184:	b.hi	37c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x37c>  // b.pmore
 188:	add	x0, x3, #0x1
 18c:	b.eq	23c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x23c>  // b.none
 190:	ldr	x21, [x19]
 194:	add	x3, x3, x3, lsl #3
 198:	str	x0, [x19, #16]
 19c:	mov	x1, x25
 1a0:	add	x0, x21, x3, lsl #3
 1a4:	mov	x2, #0x48                  	// #72
 1a8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 1ac:	ldr	x0, [sp, #64]
 1b0:	ldr	x1, [sp, #72]
 1b4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 1b8:	mov	w0, #0x0                   	// #0
 1bc:	ldp	x21, x22, [sp, #16]
 1c0:	ldp	x23, x24, [sp, #32]
 1c4:	ldp	x25, x30, [sp, #48]
 1c8:	ldp	x19, x20, [sp], #176
 1cc:	ret
 1d0:	ldr	x0, [sp, #64]
 1d4:	strb	wzr, [x22, #8]
 1d8:	ldr	x1, [sp, #80]
 1dc:	bl	0 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm>
 1e0:	b	d4 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0xd4>
 1e4:	ldr	x1, [x21]
 1e8:	mov	x0, x25
 1ec:	ldr	x4, [x2, #16]
 1f0:	mov	x5, #0x0                   	// #0
 1f4:	ldr	w3, [x2, #4]
 1f8:	add	w20, w20, #0x1
 1fc:	ldr	x2, [x2, #40]
 200:	add	x1, x1, x4
 204:	ubfx	x4, x3, #1, #1
 208:	and	w3, w3, #0x1
 20c:	add	x2, x1, x2
 210:	bl	0 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc>
 214:	ldrh	w3, [x21, #24]
 218:	add	x19, x19, #0x38
 21c:	cmp	w20, w3
 220:	b.ge	160 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x160>  // b.tcont
 224:	ldr	x0, [x21, #16]
 228:	b	140 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x140>
 22c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 230:	mov	x1, x0
 234:	str	x0, [x19]
 238:	b	30 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x30>
 23c:	tst	x0, x3
 240:	b.eq	27c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x27c>  // b.none
 244:	clz	x2, x0
 248:	mov	w1, #0x3f                  	// #63
 24c:	sub	w1, w1, w2
 250:	mov	x2, #0x1                   	// #1
 254:	add	w4, w1, #0x1
 258:	lsl	x4, x2, x4
 25c:	cmp	x0, x4
 260:	b.cs	3d8 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x3d8>  // b.hs, b.nlast
 264:	lsl	x1, x2, x1
 268:	cmp	x0, x1
 26c:	b.ls	3b8 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x3b8>  // b.plast
 270:	cmp	x3, x4
 274:	b.hi	3a0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x3a0>  // b.pmore
 278:	mov	x0, x4
 27c:	ldr	x23, [x23]
 280:	add	x0, x0, x0, lsl #3
 284:	lsl	x20, x0, #3
 288:	ldr	x0, [x23]
 28c:	cbz	x0, 394 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x394>
 290:	sub	x1, x0, #0x1
 294:	tst	x1, x0
 298:	b.ne	340 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x340>  // b.any
 29c:	add	x20, x20, x1
 2a0:	neg	x0, x0
 2a4:	and	x20, x20, x0
 2a8:	add	x1, x24, #0x0
 2ac:	mov	w2, #0x0                   	// #0
 2b0:	mov	x0, x20
 2b4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 2b8:	mov	x21, x0
 2bc:	ldr	x2, [x19, #16]
 2c0:	ldr	x1, [x19]
 2c4:	add	x2, x2, x2, lsl #3
 2c8:	lsl	x2, x2, #3
 2cc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2d0:	ldp	x0, x1, [x19]
 2d4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 2d8:	stp	x21, x20, [x19]
 2dc:	ldr	x3, [x19, #16]
 2e0:	add	x0, x3, #0x1
 2e4:	b	194 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x194>
 2e8:	ldr	x20, [x23]
 2ec:	ldr	x0, [x20]
 2f0:	cbz	x0, 370 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x370>
 2f4:	sub	x1, x0, #0x1
 2f8:	tst	x1, x0
 2fc:	b.ne	340 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x340>  // b.any
 300:	add	x25, x0, #0xfff
 304:	neg	x0, x0
 308:	and	x25, x25, x0
 30c:	add	x1, x24, #0x0
 310:	mov	w2, #0x0                   	// #0
 314:	mov	x0, x25
 318:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 31c:	mov	x20, x0
 320:	ldr	x1, [sp, #64]
 324:	ldr	x2, [sp, #80]
 328:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 32c:	ldp	x0, x1, [sp, #64]
 330:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 334:	stp	x20, x25, [sp, #64]
 338:	ldr	x2, [sp, #80]
 33c:	b	8c <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x8c>
 340:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 344:	add	x0, x0, #0x0
 348:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 34c:	bl	0 <_ZN11__sanitizer3DieEv>
 350:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 354:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 358:	add	x2, x2, #0x0
 35c:	add	x0, x0, #0x0
 360:	mov	x4, #0x0                   	// #0
 364:	mov	x3, #0x0                   	// #0
 368:	mov	w1, #0x1b6                 	// #438
 36c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 370:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 374:	str	x0, [x20]
 378:	b	2f4 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x2f4>
 37c:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 380:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 384:	add	x2, x2, #0x0
 388:	add	x0, x0, #0x0
 38c:	mov	w1, #0x1be                 	// #446
 390:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 394:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 398:	str	x0, [x23]
 39c:	b	290 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv+0x290>
 3a0:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 3a4:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 3a8:	add	x2, x2, #0x0
 3ac:	add	x0, x0, #0x0
 3b0:	mov	w1, #0x1fd                 	// #509
 3b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3b8:	mov	x4, x1
 3bc:	mov	x3, x0
 3c0:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 3c4:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 3c8:	add	x2, x2, #0x0
 3cc:	add	x0, x0, #0x0
 3d0:	mov	w1, #0x17c                 	// #380
 3d4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3d8:	mov	x3, x0
 3dc:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 3e0:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 3e4:	add	x2, x2, #0x0
 3e8:	add	x0, x0, #0x0
 3ec:	mov	w1, #0x17b                 	// #379
 3f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3f4:	nop

00000000000003f8 <_ZN11__sanitizer18internal_sigactionEiPKvPv>:
 3f8:	adrp	x3, 0 <_ZN11__sanitizer14real_sigactionEiPKvPv>
 3fc:	ldr	x3, [x3]
 400:	cbz	x3, 408 <_ZN11__sanitizer18internal_sigactionEiPKvPv+0x10>
 404:	b	0 <_ZN11__sanitizer14real_sigactionEiPKvPv>
 408:	b	0 <sigaction>
 40c:	nop

0000000000000410 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>:
 410:	stp	x19, x20, [sp, #-192]!
 414:	str	x30, [sp, #48]
 418:	cbz	x1, 584 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x174>
 41c:	stp	x23, x24, [sp, #32]
 420:	mov	x24, x2
 424:	cbz	x2, 5ac <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x19c>
 428:	mov	x20, x1
 42c:	and	w0, w0, #0xff
 430:	cbz	w0, 4cc <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0xbc>
 434:	stp	x21, x22, [sp, #16]
 438:	add	x21, sp, #0x40
 43c:	mov	x1, x21
 440:	mov	w0, #0x3                   	// #3
 444:	bl	0 <getrlimit>
 448:	sxtw	x19, w0
 44c:	cbnz	w0, 5d0 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x1c0>
 450:	add	x22, sp, #0x50
 454:	mov	w1, #0x1                   	// #1
 458:	mov	x0, x22
 45c:	add	x23, sp, #0x70
 460:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 464:	stp	xzr, xzr, [sp, #136]
 468:	str	xzr, [sp, #184]
 46c:	b	480 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x70>
 470:	ldr	x0, [sp, #120]
 474:	cmp	x0, x21
 478:	b.hi	530 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x120>  // b.pmore
 47c:	mov	x19, x0
 480:	mov	x1, x23
 484:	mov	x0, x22
 488:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 48c:	tst	w0, #0xff
 490:	b.ne	470 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x60>  // b.any
 494:	ldr	x0, [sp, #112]
 498:	cmp	x0, x21
 49c:	b.hi	4ac <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x9c>  // b.pmore
 4a0:	ldr	x3, [sp, #120]
 4a4:	cmp	x3, x21
 4a8:	b.hi	540 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x130>  // b.pmore
 4ac:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 4b0:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 4b4:	add	x2, x2, #0x0
 4b8:	add	x0, x0, #0x0
 4bc:	mov	x4, #0x0                   	// #0
 4c0:	mov	x3, #0x0                   	// #0
 4c4:	mov	w1, #0x6a                  	// #106
 4c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4cc:	add	x19, sp, #0x70
 4d0:	str	xzr, [sp, #64]
 4d4:	mov	x0, x19
 4d8:	str	xzr, [sp, #80]
 4dc:	bl	0 <pthread_attr_init>
 4e0:	bl	0 <pthread_self>
 4e4:	mov	x1, x19
 4e8:	bl	0 <pthread_getattr_np>
 4ec:	sxtw	x3, w0
 4f0:	cbnz	w0, 5f0 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x1e0>
 4f4:	add	x2, sp, #0x40
 4f8:	add	x1, sp, #0x50
 4fc:	mov	x0, x19
 500:	bl	0 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm>
 504:	mov	x0, x19
 508:	bl	0 <pthread_attr_destroy>
 50c:	ldr	x0, [sp, #64]
 510:	ldr	x1, [sp, #80]
 514:	ldr	x30, [sp, #48]
 518:	add	x0, x0, x1
 51c:	str	x0, [x20]
 520:	str	x1, [x24]
 524:	ldp	x23, x24, [sp, #32]
 528:	ldp	x19, x20, [sp], #192
 52c:	ret
 530:	ldr	x1, [sp, #112]
 534:	cmp	x1, x21
 538:	b.hi	4ac <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_+0x9c>  // b.pmore
 53c:	mov	x3, x0
 540:	ldr	x1, [sp, #64]
 544:	mov	x2, #0x40000000            	// #1073741824
 548:	sub	x19, x3, x19
 54c:	str	x3, [x20]
 550:	cmp	x1, x2
 554:	mov	x0, x22
 558:	csel	x1, x1, x2, ls  // ls = plast
 55c:	cmp	x19, x1
 560:	csel	x19, x19, x1, ls  // ls = plast
 564:	sub	x3, x3, x19
 568:	str	x3, [x24]
 56c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 570:	ldp	x21, x22, [sp, #16]
 574:	ldp	x23, x24, [sp, #32]
 578:	ldr	x30, [sp, #48]
 57c:	ldp	x19, x20, [sp], #192
 580:	ret
 584:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 588:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 58c:	add	x2, x2, #0x0
 590:	add	x0, x0, #0x0
 594:	mov	x4, #0x0                   	// #0
 598:	mov	x3, #0x0                   	// #0
 59c:	mov	w1, #0x5b                  	// #91
 5a0:	stp	x21, x22, [sp, #16]
 5a4:	stp	x23, x24, [sp, #32]
 5a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5ac:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 5b0:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 5b4:	add	x2, x2, #0x0
 5b8:	add	x0, x0, #0x0
 5bc:	mov	x4, #0x0                   	// #0
 5c0:	mov	x3, #0x0                   	// #0
 5c4:	mov	w1, #0x5c                  	// #92
 5c8:	stp	x21, x22, [sp, #16]
 5cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5d0:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 5d4:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 5d8:	mov	x3, x19
 5dc:	add	x2, x2, #0x0
 5e0:	add	x0, x0, #0x0
 5e4:	mov	x4, #0x0                   	// #0
 5e8:	mov	w1, #0x60                  	// #96
 5ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5f0:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 5f4:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 5f8:	add	x2, x2, #0x0
 5fc:	add	x0, x0, #0x0
 600:	mov	x4, #0x0                   	// #0
 604:	mov	w1, #0x88                  	// #136
 608:	stp	x21, x22, [sp, #16]
 60c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000610 <_ZN11__sanitizer6SetEnvEPKcS1_>:
 610:	stp	x19, x20, [sp, #-48]!
 614:	mov	x19, x0
 618:	mov	x20, x1
 61c:	mov	x0, #0xffffffffffffffff    	// #-1
 620:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 624:	add	x1, x1, #0x0
 628:	str	x30, [sp, #16]
 62c:	bl	0 <dlsym>
 630:	str	x0, [sp, #32]
 634:	cbz	x0, 670 <_ZN11__sanitizer6SetEnvEPKcS1_+0x60>
 638:	add	x1, sp, #0x20
 63c:	add	x0, sp, #0x28
 640:	mov	x2, #0x8                   	// #8
 644:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 648:	ldr	x3, [sp, #40]
 64c:	mov	x1, x20
 650:	mov	x0, x19
 654:	mov	w2, #0x1                   	// #1
 658:	blr	x3
 65c:	cmp	w0, #0x0
 660:	cset	w0, eq  // eq = none
 664:	ldr	x30, [sp, #16]
 668:	ldp	x19, x20, [sp], #48
 66c:	ret
 670:	mov	w0, #0x0                   	// #0
 674:	ldr	x30, [sp, #16]
 678:	ldp	x19, x20, [sp], #48
 67c:	ret

0000000000000680 <_ZN11__sanitizer11InitTlsSizeEv>:
 680:	str	x30, [sp, #-48]!
 684:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 688:	mov	x0, #0xffffffffffffffff    	// #-1
 68c:	add	x1, x1, #0x0
 690:	bl	0 <dlsym>
 694:	mov	x3, x0
 698:	mov	x2, #0x8                   	// #8
 69c:	add	x1, sp, #0x20
 6a0:	add	x0, sp, #0x28
 6a4:	stp	xzr, xzr, [sp, #16]
 6a8:	str	x3, [sp, #32]
 6ac:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 6b0:	ldr	x2, [sp, #40]
 6b4:	cbz	x2, 728 <_ZN11__sanitizer11InitTlsSizeEv+0xa8>
 6b8:	add	x1, sp, #0x18
 6bc:	add	x0, sp, #0x10
 6c0:	blr	x2
 6c4:	ldr	x1, [sp, #24]
 6c8:	cmp	x1, #0xf
 6cc:	b.ls	700 <_ZN11__sanitizer11InitTlsSizeEv+0x80>  // b.plast
 6d0:	sub	x0, x1, #0x1
 6d4:	tst	x0, x1
 6d8:	b.ne	748 <_ZN11__sanitizer11InitTlsSizeEv+0xc8>  // b.any
 6dc:	ldr	x0, [sp, #16]
 6e0:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 6e4:	add	x0, x0, x1
 6e8:	neg	x1, x1
 6ec:	sub	x0, x0, #0x1
 6f0:	and	x0, x0, x1
 6f4:	str	x0, [x2]
 6f8:	ldr	x30, [sp], #48
 6fc:	ret
 700:	ldr	x0, [sp, #16]
 704:	mov	x1, #0x10                  	// #16
 708:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 70c:	add	x0, x0, x1
 710:	neg	x1, x1
 714:	sub	x0, x0, #0x1
 718:	and	x0, x0, x1
 71c:	str	x0, [x2]
 720:	ldr	x30, [sp], #48
 724:	ret
 728:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 72c:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 730:	add	x2, x2, #0x0
 734:	add	x0, x0, #0x0
 738:	mov	x4, #0x0                   	// #0
 73c:	mov	x3, #0x0                   	// #0
 740:	mov	w1, #0xd4                  	// #212
 744:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 748:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 74c:	add	x0, x0, #0x0
 750:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 754:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000758 <_ZN11__sanitizer20ThreadDescriptorSizeEv>:
 758:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 75c:	add	x1, x1, #0x0
 760:	ldr	x0, [x1, #8]
 764:	cbnz	x0, 774 <_ZN11__sanitizer20ThreadDescriptorSizeEv+0x1c>
 768:	mov	x2, #0x6f0                 	// #1776
 76c:	mov	x0, x2
 770:	str	x2, [x1, #8]
 774:	ret

0000000000000778 <_ZN11__sanitizer16ThreadSelfOffsetEv>:
 778:	mov	x0, #0x10                  	// #16
 77c:	ret

0000000000000780 <_ZN11__sanitizer10ThreadSelfEv>:
 780:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 784:	add	x1, x1, #0x0
 788:	mrs	x2, tpidr_el0
 78c:	ldr	x0, [x1, #8]
 790:	cbnz	x0, 7a0 <_ZN11__sanitizer10ThreadSelfEv+0x20>
 794:	mov	x3, #0x6f0                 	// #1776
 798:	mov	x0, x3
 79c:	str	x3, [x1, #8]
 7a0:	sub	x0, x2, x0
 7a4:	ret

00000000000007a8 <_ZN11__sanitizer10GetTlsSizeEv>:
 7a8:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 7ac:	ldr	x0, [x0]
 7b0:	ret
 7b4:	nop

00000000000007b8 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_>:
 7b8:	adrp	x6, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 7bc:	add	x7, x6, #0x0
 7c0:	stp	x19, x20, [sp, #-64]!
 7c4:	mov	x20, x1
 7c8:	mov	x19, x3
 7cc:	ldr	x5, [x7, #8]
 7d0:	stp	x21, x22, [sp, #16]
 7d4:	mov	x22, x2
 7d8:	stp	x23, x30, [sp, #32]
 7dc:	mov	x21, x4
 7e0:	and	w23, w0, #0xff
 7e4:	mrs	x0, tpidr_el0
 7e8:	cbnz	x5, 7f8 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0x40>
 7ec:	mov	x1, #0x6f0                 	// #1776
 7f0:	mov	x5, x1
 7f4:	str	x1, [x7, #8]
 7f8:	sub	x0, x0, x5
 7fc:	str	x0, [x19]
 800:	ldr	x0, [x6]
 804:	str	x0, [x21]
 808:	add	x1, sp, #0x30
 80c:	mov	w0, w23
 810:	add	x2, sp, #0x38
 814:	bl	410 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>
 818:	ldp	x0, x1, [sp, #48]
 81c:	str	x1, [x20]
 820:	sub	x0, x0, x1
 824:	str	x0, [x22]
 828:	cbnz	w23, 874 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xbc>
 82c:	ldr	x3, [x19]
 830:	ldr	x4, [x20]
 834:	cmp	x3, x4
 838:	b.ls	874 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xbc>  // b.plast
 83c:	add	x1, x0, x4
 840:	cmp	x3, x1
 844:	b.cs	874 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xbc>  // b.hs, b.nlast
 848:	ldr	x2, [x21]
 84c:	add	x3, x3, x2
 850:	cmp	x4, x3
 854:	b.cs	884 <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xcc>  // b.hs, b.nlast
 858:	cmp	x1, x3
 85c:	b.cc	89c <_ZN11__sanitizer20GetThreadStackAndTlsEbPmS0_S0_S0_+0xe4>  // b.lo, b.ul, b.last
 860:	sub	x0, x0, x2
 864:	str	x0, [x22]
 868:	ldr	x1, [x20]
 86c:	add	x0, x1, x0
 870:	str	x0, [x19]
 874:	ldp	x21, x22, [sp, #16]
 878:	ldp	x23, x30, [sp, #32]
 87c:	ldp	x19, x20, [sp], #64
 880:	ret
 884:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 888:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 88c:	add	x2, x2, #0x0
 890:	add	x0, x0, #0x0
 894:	mov	w1, #0x203                 	// #515
 898:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 89c:	mov	x4, x1
 8a0:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 8a4:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 8a8:	add	x2, x2, #0x0
 8ac:	add	x0, x0, #0x0
 8b0:	mov	w1, #0x204                 	// #516
 8b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000008b8 <_ZN11__sanitizer13ListOfModules4initEv>:
 8b8:	stp	x19, x20, [sp, #-48]!
 8bc:	mov	x19, x0
 8c0:	ldrb	w0, [x0, #24]
 8c4:	stp	x21, x30, [sp, #16]
 8c8:	cbz	w0, 938 <_ZN11__sanitizer13ListOfModules4initEv+0x80>
 8cc:	ldr	x20, [x19, #16]
 8d0:	ldr	x0, [x19]
 8d4:	add	x20, x20, x20, lsl #3
 8d8:	mov	x21, x0
 8dc:	add	x20, x0, x20, lsl #3
 8e0:	cmp	x0, x20
 8e4:	b.eq	8fc <_ZN11__sanitizer13ListOfModules4initEv+0x44>  // b.none
 8e8:	mov	x0, x21
 8ec:	add	x21, x21, #0x48
 8f0:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 8f4:	cmp	x20, x21
 8f8:	b.ne	8e8 <_ZN11__sanitizer13ListOfModules4initEv+0x30>  // b.any
 8fc:	str	xzr, [x19, #16]
 900:	mov	w2, #0x1                   	// #1
 904:	strb	w2, [x19, #24]
 908:	add	x1, sp, #0x20
 90c:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 910:	add	x0, x0, #0x0
 914:	str	x19, [sp, #32]
 918:	strb	w2, [sp, #40]
 91c:	stur	wzr, [sp, #41]
 920:	sturh	wzr, [sp, #45]
 924:	strb	wzr, [sp, #47]
 928:	bl	0 <dl_iterate_phdr>
 92c:	ldp	x21, x30, [sp, #16]
 930:	ldp	x19, x20, [sp], #48
 934:	ret
 938:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 93c:	stp	xzr, xzr, [x19, #8]
 940:	ldr	x20, [x20]
 944:	ldr	x0, [x20]
 948:	str	xzr, [x19]
 94c:	cbz	x0, 9a8 <_ZN11__sanitizer13ListOfModules4initEv+0xf0>
 950:	sub	x1, x0, #0x1
 954:	tst	x1, x0
 958:	b.ne	9b4 <_ZN11__sanitizer13ListOfModules4initEv+0xfc>  // b.any
 95c:	add	x20, x0, #0x11f, lsl #12
 960:	neg	x0, x0
 964:	add	x20, x20, #0xfff
 968:	mov	w2, #0x0                   	// #0
 96c:	and	x20, x20, x0
 970:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 974:	mov	x0, x20
 978:	add	x1, x1, #0x0
 97c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 980:	mov	x21, x0
 984:	ldr	x2, [x19, #16]
 988:	ldr	x1, [x19]
 98c:	add	x2, x2, x2, lsl #3
 990:	lsl	x2, x2, #3
 994:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 998:	ldp	x0, x1, [x19]
 99c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 9a0:	stp	x21, x20, [x19]
 9a4:	b	900 <_ZN11__sanitizer13ListOfModules4initEv+0x48>
 9a8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 9ac:	str	x0, [x20]
 9b0:	b	950 <_ZN11__sanitizer13ListOfModules4initEv+0x98>
 9b4:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 9b8:	add	x0, x0, #0x0
 9bc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 9c0:	bl	0 <_ZN11__sanitizer3DieEv>
 9c4:	nop

00000000000009c8 <_ZN11__sanitizer13ListOfModules12fallbackInitEv>:
 9c8:	stp	x19, x20, [sp, #-64]!
 9cc:	mov	x19, x0
 9d0:	ldrb	w0, [x0, #24]
 9d4:	stp	x21, x30, [sp, #16]
 9d8:	cbz	w0, a44 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x7c>
 9dc:	ldr	x20, [x19, #16]
 9e0:	ldr	x0, [x19]
 9e4:	add	x20, x20, x20, lsl #3
 9e8:	mov	x21, x0
 9ec:	add	x20, x0, x20, lsl #3
 9f0:	cmp	x0, x20
 9f4:	b.eq	a0c <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x44>  // b.none
 9f8:	mov	x0, x21
 9fc:	add	x21, x21, #0x48
 a00:	bl	0 <_ZN11__sanitizer12LoadedModule5clearEv>
 a04:	cmp	x20, x21
 a08:	b.ne	9f8 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x30>  // b.any
 a0c:	str	xzr, [x19, #16]
 a10:	mov	w1, #0x1                   	// #1
 a14:	strb	w1, [x19, #24]
 a18:	add	x20, sp, #0x20
 a1c:	mov	x0, x20
 a20:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
 a24:	mov	x1, x19
 a28:	mov	x0, x20
 a2c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>
 a30:	mov	x0, x20
 a34:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
 a38:	ldp	x21, x30, [sp, #16]
 a3c:	ldp	x19, x20, [sp], #64
 a40:	ret
 a44:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 a48:	stp	xzr, xzr, [x19, #8]
 a4c:	ldr	x20, [x20]
 a50:	ldr	x0, [x20]
 a54:	str	xzr, [x19]
 a58:	cbz	x0, ab4 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0xec>
 a5c:	sub	x1, x0, #0x1
 a60:	tst	x1, x0
 a64:	b.ne	ac0 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0xf8>  // b.any
 a68:	add	x20, x0, #0x11f, lsl #12
 a6c:	neg	x0, x0
 a70:	add	x20, x20, #0xfff
 a74:	mov	w2, #0x0                   	// #0
 a78:	and	x20, x20, x0
 a7c:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 a80:	mov	x0, x20
 a84:	add	x1, x1, #0x0
 a88:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 a8c:	mov	x21, x0
 a90:	ldr	x2, [x19, #16]
 a94:	ldr	x1, [x19]
 a98:	add	x2, x2, x2, lsl #3
 a9c:	lsl	x2, x2, #3
 aa0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 aa4:	ldp	x0, x1, [x19]
 aa8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 aac:	stp	x21, x20, [x19]
 ab0:	b	a10 <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x48>
 ab4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 ab8:	str	x0, [x20]
 abc:	b	a5c <_ZN11__sanitizer13ListOfModules12fallbackInitEv+0x94>
 ac0:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 ac4:	add	x0, x0, #0x0
 ac8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 acc:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000ad0 <_ZN11__sanitizer6GetRSSEv>:
 ad0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 ad4:	stp	x19, x20, [sp, #-176]!
 ad8:	ldr	x0, [x0]
 adc:	ldrb	w0, [x0, #160]
 ae0:	str	x30, [sp, #16]
 ae4:	cbnz	w0, b10 <_ZN11__sanitizer6GetRSSEv+0x40>
 ae8:	add	x1, sp, #0x20
 aec:	bl	0 <getrusage>
 af0:	mov	w1, w0
 af4:	mov	x0, #0x0                   	// #0
 af8:	cbnz	w1, b04 <_ZN11__sanitizer6GetRSSEv+0x34>
 afc:	ldr	x0, [sp, #64]
 b00:	lsl	x0, x0, #10
 b04:	ldr	x30, [sp, #16]
 b08:	ldp	x19, x20, [sp], #176
 b0c:	ret
 b10:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 b14:	mov	x2, #0x0                   	// #0
 b18:	add	x0, x0, #0x0
 b1c:	mov	w1, #0x0                   	// #0
 b20:	bl	0 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>
 b24:	mov	w20, w0
 b28:	cmn	w0, #0x1
 b2c:	b.eq	bfc <_ZN11__sanitizer6GetRSSEv+0x12c>  // b.none
 b30:	add	x19, sp, #0x20
 b34:	mov	x2, #0x3f                  	// #63
 b38:	mov	x1, x19
 b3c:	bl	0 <_ZN11__sanitizer13internal_readEiPvm>
 b40:	mov	x1, x0
 b44:	mov	w0, w20
 b48:	mov	x20, x1
 b4c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 b50:	cmp	x20, #0x0
 b54:	mov	x0, #0x0                   	// #0
 b58:	b.le	b04 <_ZN11__sanitizer6GetRSSEv+0x34>
 b5c:	strb	wzr, [x19, x20]
 b60:	mov	x1, x19
 b64:	ldrb	w2, [sp, #32]
 b68:	sub	w0, w2, #0x30
 b6c:	and	w0, w0, #0xff
 b70:	cmp	w0, #0x9
 b74:	b.hi	b8c <_ZN11__sanitizer6GetRSSEv+0xbc>  // b.pmore
 b78:	ldrb	w2, [x1, #1]!
 b7c:	sub	w0, w2, #0x30
 b80:	and	w0, w0, #0xff
 b84:	cmp	w0, #0x9
 b88:	b.ls	b78 <_ZN11__sanitizer6GetRSSEv+0xa8>  // b.plast
 b8c:	cbz	w2, c30 <_ZN11__sanitizer6GetRSSEv+0x160>
 b90:	ldrb	w2, [x1, #1]!
 b94:	sub	w0, w2, #0x30
 b98:	cmp	w2, #0x0
 b9c:	and	w0, w0, #0xff
 ba0:	ccmp	w0, #0x9, #0x0, ne  // ne = any
 ba4:	b.hi	b90 <_ZN11__sanitizer6GetRSSEv+0xc0>  // b.pmore
 ba8:	cmp	w0, #0x9
 bac:	mov	x19, #0x0                   	// #0
 bb0:	b.hi	bdc <_ZN11__sanitizer6GetRSSEv+0x10c>  // b.pmore
 bb4:	nop
 bb8:	and	x3, x2, #0xff
 bbc:	ldrb	w2, [x1, #1]!
 bc0:	add	x19, x19, x19, lsl #2
 bc4:	sub	w0, w2, #0x30
 bc8:	add	x19, x3, x19, lsl #1
 bcc:	and	w0, w0, #0xff
 bd0:	sub	x19, x19, #0x30
 bd4:	cmp	w0, #0x9
 bd8:	b.ls	bb8 <_ZN11__sanitizer6GetRSSEv+0xe8>  // b.plast
 bdc:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 be0:	ldr	x20, [x20]
 be4:	ldr	x0, [x20]
 be8:	cbz	x0, c20 <_ZN11__sanitizer6GetRSSEv+0x150>
 bec:	mul	x0, x19, x0
 bf0:	ldr	x30, [sp, #16]
 bf4:	ldp	x19, x20, [sp], #176
 bf8:	ret
 bfc:	add	x1, sp, #0x20
 c00:	mov	w0, #0x0                   	// #0
 c04:	bl	0 <getrusage>
 c08:	mov	w1, w0
 c0c:	mov	x0, #0x0                   	// #0
 c10:	cbnz	w1, b04 <_ZN11__sanitizer6GetRSSEv+0x34>
 c14:	ldr	x0, [sp, #64]
 c18:	lsl	x0, x0, #10
 c1c:	b	b04 <_ZN11__sanitizer6GetRSSEv+0x34>
 c20:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 c24:	str	x0, [x20]
 c28:	mul	x0, x19, x0
 c2c:	b	bf0 <_ZN11__sanitizer6GetRSSEv+0x120>
 c30:	mov	x19, #0x0                   	// #0
 c34:	b	bdc <_ZN11__sanitizer6GetRSSEv+0x10c>

0000000000000c38 <_ZN11__sanitizer15GetNumberOfCPUsEv>:
 c38:	stp	x19, x30, [sp, #-144]!
 c3c:	mov	x1, #0x80                  	// #128
 c40:	mov	w0, #0x0                   	// #0
 c44:	add	x19, sp, #0x10
 c48:	mov	x2, x19
 c4c:	bl	0 <sched_getaffinity>
 c50:	cbnz	w0, c68 <_ZN11__sanitizer15GetNumberOfCPUsEv+0x30>
 c54:	mov	x1, x19
 c58:	mov	x0, #0x80                  	// #128
 c5c:	bl	0 <__sched_cpucount>
 c60:	ldp	x19, x30, [sp], #144
 c64:	ret
 c68:	sxtw	x3, w0
 c6c:	adrp	x2, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 c70:	adrp	x0, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 c74:	add	x2, x2, #0x0
 c78:	add	x0, x0, #0x0
 c7c:	mov	x4, #0x0                   	// #0
 c80:	mov	w1, #0x2bb                 	// #699
 c84:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000c88 <_ZN11__sanitizer14AndroidLogInitEv>:
 c88:	ret
 c8c:	nop

0000000000000c90 <_ZN11__sanitizer20WriteOneLineToSyslogEPKc>:
 c90:	mov	x2, x0
 c94:	adrp	x1, 0 <_ZN11__sanitizerL18dl_iterate_phdr_cbEP12dl_phdr_infomPv>
 c98:	mov	w0, #0x6                   	// #6
 c9c:	add	x1, x1, #0x0
 ca0:	b	0 <syslog>
 ca4:	nop

0000000000000ca8 <_ZN11__sanitizer15SetAbortMessageEPKc>:
 ca8:	ret
 cac:	nop

0000000000000cb0 <_ZN11__sanitizer18LogMessageOnPrintfEPKc>:
 cb0:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 cb4:	ldr	x1, [x1]
 cb8:	ldrb	w1, [x1, #49]
 cbc:	cbnz	w1, cc4 <_ZN11__sanitizer18LogMessageOnPrintfEPKc+0x14>
 cc0:	ret
 cc4:	b	0 <_ZN11__sanitizer13WriteToSyslogEPKc>

0000000000000cc8 <_ZN11__sanitizer17MonotonicNanoTimeEv>:
 cc8:	adrp	x0, 0 <__progname>
 ccc:	str	x30, [sp, #-32]!
 cd0:	ldr	x0, [x0]
 cd4:	cbz	x0, ce8 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x20>
 cd8:	ldr	x0, [x0]
 cdc:	cbz	x0, ce8 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x20>
 ce0:	ldrb	w0, [x0]
 ce4:	cbnz	w0, d0c <_ZN11__sanitizer17MonotonicNanoTimeEv+0x44>
 ce8:	add	x1, sp, #0x10
 cec:	mov	w0, #0x1                   	// #1
 cf0:	bl	0 <_ZN11__sanitizer22internal_clock_gettimeEiPv>
 cf4:	ldp	x2, x1, [sp, #16]
 cf8:	mov	x0, #0xca00                	// #51712
 cfc:	movk	x0, #0x3b9a, lsl #16
 d00:	ldr	x30, [sp], #32
 d04:	madd	x0, x2, x0, x1
 d08:	ret
 d0c:	adrp	x0, 0 <real_clock_gettime>
 d10:	add	x1, sp, #0x10
 d14:	ldr	x0, [x0]
 d18:	cbz	x0, d3c <_ZN11__sanitizer17MonotonicNanoTimeEv+0x74>
 d1c:	mov	w0, #0x1                   	// #1
 d20:	bl	0 <real_clock_gettime>
 d24:	ldp	x2, x1, [sp, #16]
 d28:	mov	x0, #0xca00                	// #51712
 d2c:	movk	x0, #0x3b9a, lsl #16
 d30:	ldr	x30, [sp], #32
 d34:	madd	x0, x2, x0, x1
 d38:	ret
 d3c:	mov	w0, #0x1                   	// #1
 d40:	bl	0 <clock_gettime>
 d44:	b	cf4 <_ZN11__sanitizer17MonotonicNanoTimeEv+0x2c>

sanitizer_linux_s390.o:     file format elf64-littleaarch64


sanitizer_mac.o:     file format elf64-littleaarch64


sanitizer_mac_libcdep.o:     file format elf64-littleaarch64


sanitizer_netbsd.o:     file format elf64-littleaarch64


sanitizer_openbsd.o:     file format elf64-littleaarch64


sanitizer_persistent_allocator.o:     file format elf64-littleaarch64


sanitizer_platform_limits_linux.o:     file format elf64-littleaarch64


sanitizer_platform_limits_openbsd.o:     file format elf64-littleaarch64


sanitizer_platform_limits_posix.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer22__sanitizer_in_addr_szEi>:
   0:	cmp	w0, #0x2
   4:	b.eq	18 <_ZN11__sanitizer22__sanitizer_in_addr_szEi+0x18>  // b.none
   8:	cmp	w0, #0xa
   c:	cset	x0, eq  // eq = none
  10:	lsl	x0, x0, #4
  14:	ret
  18:	mov	x0, #0x4                   	// #4
  1c:	ret

sanitizer_platform_limits_solaris.o:     file format elf64-littleaarch64


sanitizer_posix.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer18GetMmapGranularityEv>:
       0:	b	0 <_ZN11__sanitizer11GetPageSizeEv>
       4:	nop

0000000000000008 <_ZN11__sanitizer9MmapOrDieEmPKcb>:
       8:	stp	x19, x20, [sp, #-64]!
       c:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
      10:	mov	x19, x0
      14:	ldr	x20, [x20]
      18:	stp	x21, x22, [sp, #16]
      1c:	mov	x21, x1
      20:	and	w22, w2, #0xff
      24:	ldr	x0, [x20]
      28:	str	x30, [sp, #32]
      2c:	cbz	x0, 94 <_ZN11__sanitizer9MmapOrDieEmPKcb+0x8c>
      30:	sub	x1, x0, #0x1
      34:	tst	x0, x1
      38:	b.ne	a8 <_ZN11__sanitizer9MmapOrDieEmPKcb+0xa0>  // b.any
      3c:	add	x19, x19, x1
      40:	neg	x0, x0
      44:	and	x19, x19, x0
      48:	mov	x5, #0x0                   	// #0
      4c:	mov	w4, #0xffffffff            	// #-1
      50:	mov	w3, #0x22                  	// #34
      54:	mov	w2, #0x3                   	// #3
      58:	mov	x1, x19
      5c:	mov	x0, #0x0                   	// #0
      60:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
      64:	add	x1, sp, #0x3c
      68:	mov	x20, x0
      6c:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
      70:	tst	w0, #0xff
      74:	b.ne	b8 <_ZN11__sanitizer9MmapOrDieEmPKcb+0xb0>  // b.any
      78:	mov	x0, x19
      7c:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
      80:	mov	x0, x20
      84:	ldp	x21, x22, [sp, #16]
      88:	ldr	x30, [sp, #32]
      8c:	ldp	x19, x20, [sp], #64
      90:	ret
      94:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
      98:	str	x0, [x20]
      9c:	sub	x1, x0, #0x1
      a0:	tst	x0, x1
      a4:	b.eq	3c <_ZN11__sanitizer9MmapOrDieEmPKcb+0x34>  // b.none
      a8:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
      ac:	add	x0, x0, #0x0
      b0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
      b4:	bl	0 <_ZN11__sanitizer3DieEv>
      b8:	ldr	w3, [sp, #60]
      bc:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
      c0:	mov	w4, w22
      c4:	mov	x1, x21
      c8:	mov	x0, x19
      cc:	add	x2, x2, #0x0
      d0:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
      d4:	nop

00000000000000d8 <_ZN11__sanitizer10UnmapOrDieEPvm>:
      d8:	cmp	x0, #0x0
      dc:	ccmp	x1, #0x0, #0x4, ne  // ne = any
      e0:	b.ne	e8 <_ZN11__sanitizer10UnmapOrDieEPvm+0x10>  // b.any
      e4:	ret
      e8:	stp	x19, x20, [sp, #-32]!
      ec:	mov	x19, x1
      f0:	mov	x20, x0
      f4:	str	x30, [sp, #16]
      f8:	bl	0 <_ZN11__sanitizer15internal_munmapEPvm>
      fc:	mov	x1, #0x0                   	// #0
     100:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     104:	tst	w0, #0xff
     108:	b.ne	11c <_ZN11__sanitizer10UnmapOrDieEPvm+0x44>  // b.any
     10c:	mov	x0, x19
     110:	ldr	x30, [sp, #16]
     114:	ldp	x19, x20, [sp], #32
     118:	b	0 <_ZN11__sanitizer17DecreaseTotalMmapEm>
     11c:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     120:	mov	x4, x20
     124:	mov	x3, x19
     128:	mov	x2, x19
     12c:	ldr	x1, [x1]
     130:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     134:	add	x0, x0, #0x0
     138:	ldr	x1, [x1]
     13c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     140:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     144:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     148:	add	x2, x2, #0x0
     14c:	add	x0, x0, #0x0
     150:	mov	x4, #0x0                   	// #0
     154:	mov	x3, #0x0                   	// #0
     158:	mov	w1, #0x3c                  	// #60
     15c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000160 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>:
     160:	stp	x19, x20, [sp, #-48]!
     164:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
     168:	mov	x19, x0
     16c:	ldr	x20, [x20]
     170:	stp	x21, x30, [sp, #16]
     174:	mov	x21, x1
     178:	ldr	x0, [x20]
     17c:	cbz	x0, 1e0 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0x80>
     180:	sub	x1, x0, #0x1
     184:	tst	x0, x1
     188:	b.ne	1f4 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0x94>  // b.any
     18c:	add	x19, x19, x1
     190:	neg	x0, x0
     194:	and	x19, x19, x0
     198:	mov	x5, #0x0                   	// #0
     19c:	mov	w4, #0xffffffff            	// #-1
     1a0:	mov	w3, #0x22                  	// #34
     1a4:	mov	w2, #0x3                   	// #3
     1a8:	mov	x1, x19
     1ac:	mov	x0, #0x0                   	// #0
     1b0:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
     1b4:	add	x1, sp, #0x2c
     1b8:	mov	x20, x0
     1bc:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     1c0:	tst	w0, #0xff
     1c4:	b.ne	204 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0xa4>  // b.any
     1c8:	mov	x0, x19
     1cc:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
     1d0:	mov	x0, x20
     1d4:	ldp	x21, x30, [sp, #16]
     1d8:	ldp	x19, x20, [sp], #48
     1dc:	ret
     1e0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     1e4:	str	x0, [x20]
     1e8:	sub	x1, x0, #0x1
     1ec:	tst	x0, x1
     1f0:	b.eq	18c <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0x2c>  // b.none
     1f4:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     1f8:	add	x0, x0, #0x0
     1fc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     200:	bl	0 <_ZN11__sanitizer3DieEv>
     204:	ldr	w3, [sp, #44]
     208:	mov	x0, #0x0                   	// #0
     20c:	cmp	w3, #0xc
     210:	b.eq	1d4 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc+0x74>  // b.none
     214:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     218:	mov	x1, x21
     21c:	mov	x0, x19
     220:	add	x2, x2, #0x0
     224:	mov	w4, #0x0                   	// #0
     228:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
     22c:	nop

0000000000000230 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc>:
     230:	stp	x19, x20, [sp, #-48]!
     234:	mov	x19, x0
     238:	sub	x0, x0, #0x1
     23c:	stp	x21, x22, [sp, #16]
     240:	tst	x0, x19
     244:	stp	x23, x30, [sp, #32]
     248:	b.ne	33c <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x10c>  // b.any
     24c:	sub	x23, x1, #0x1
     250:	mov	x21, x1
     254:	tst	x1, x23
     258:	b.ne	35c <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x12c>  // b.any
     25c:	add	x22, x19, x21
     260:	mov	x1, x2
     264:	mov	x0, x22
     268:	bl	160 <_ZN11__sanitizer21MmapOrDieOnFatalErrorEmPKc>
     26c:	mov	x20, x0
     270:	cbz	x0, 28c <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x5c>
     274:	add	x22, x22, x0
     278:	tst	x0, x23
     27c:	b.ne	2e0 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0xb0>  // b.any
     280:	add	x19, x20, x19
     284:	cmp	x22, x19
     288:	b.ne	2a0 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x70>  // b.any
     28c:	mov	x0, x20
     290:	ldp	x21, x22, [sp, #16]
     294:	ldp	x23, x30, [sp, #32]
     298:	ldp	x19, x20, [sp], #48
     29c:	ret
     2a0:	cbz	x19, 28c <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x5c>
     2a4:	sub	x22, x22, x19
     2a8:	mov	x0, x19
     2ac:	mov	x1, x22
     2b0:	bl	0 <_ZN11__sanitizer15internal_munmapEPvm>
     2b4:	mov	x1, #0x0                   	// #0
     2b8:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     2bc:	tst	w0, #0xff
     2c0:	b.ne	37c <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x14c>  // b.any
     2c4:	mov	x0, x22
     2c8:	bl	0 <_ZN11__sanitizer17DecreaseTotalMmapEm>
     2cc:	mov	x0, x20
     2d0:	ldp	x21, x22, [sp, #16]
     2d4:	ldp	x23, x30, [sp, #32]
     2d8:	ldp	x19, x20, [sp], #48
     2dc:	ret
     2e0:	add	x23, x0, x23
     2e4:	neg	x21, x21
     2e8:	and	x21, x23, x21
     2ec:	subs	x23, x21, x0
     2f0:	b.ne	308 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0xd8>  // b.any
     2f4:	mov	x20, x21
     2f8:	add	x19, x20, x19
     2fc:	cmp	x22, x19
     300:	b.eq	28c <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x5c>  // b.none
     304:	b	2a0 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x70>
     308:	mov	x1, x23
     30c:	bl	0 <_ZN11__sanitizer15internal_munmapEPvm>
     310:	mov	x1, #0x0                   	// #0
     314:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     318:	tst	w0, #0xff
     31c:	b.ne	3c0 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x190>  // b.any
     320:	mov	x20, x21
     324:	mov	x0, x23
     328:	add	x19, x20, x19
     32c:	bl	0 <_ZN11__sanitizer17DecreaseTotalMmapEm>
     330:	cmp	x22, x19
     334:	b.eq	28c <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x5c>  // b.none
     338:	b	2a0 <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x70>
     33c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     340:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     344:	add	x2, x2, #0x0
     348:	add	x0, x0, #0x0
     34c:	mov	x4, #0x0                   	// #0
     350:	mov	x3, #0x0                   	// #0
     354:	mov	w1, #0x55                  	// #85
     358:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     35c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     360:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     364:	add	x2, x2, #0x0
     368:	add	x0, x0, #0x0
     36c:	mov	x4, #0x0                   	// #0
     370:	mov	x3, #0x0                   	// #0
     374:	mov	w1, #0x56                  	// #86
     378:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     37c:	mov	x4, x19
     380:	mov	x3, x22
     384:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     388:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     38c:	ldr	x1, [x1]
     390:	mov	x2, x3
     394:	add	x0, x0, #0x0
     398:	ldr	x1, [x1]
     39c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     3a0:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     3a4:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     3a8:	add	x2, x2, #0x0
     3ac:	add	x0, x0, #0x0
     3b0:	mov	x4, #0x0                   	// #0
     3b4:	mov	x3, #0x0                   	// #0
     3b8:	mov	w1, #0x3c                  	// #60
     3bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     3c0:	mov	x4, x20
     3c4:	mov	x3, x23
     3c8:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     3cc:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     3d0:	b	38c <_ZN11__sanitizer28MmapAlignedOrDieOnFatalErrorEmmPKc+0x15c>
     3d4:	nop

00000000000003d8 <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc>:
     3d8:	stp	x19, x20, [sp, #-48]!
     3dc:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
     3e0:	mov	x19, x0
     3e4:	ldr	x20, [x20]
     3e8:	stp	x21, x30, [sp, #16]
     3ec:	mov	x21, x1
     3f0:	ldr	x2, [x20]
     3f4:	cbz	x2, 454 <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc+0x7c>
     3f8:	sub	x0, x2, #0x1
     3fc:	tst	x2, x0
     400:	b.ne	46c <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc+0x94>  // b.any
     404:	add	x0, x19, x0
     408:	neg	x1, x2
     40c:	mov	x5, #0x0                   	// #0
     410:	mov	w4, #0xffffffff            	// #-1
     414:	mov	w3, #0x4022                	// #16418
     418:	mov	w2, #0x3                   	// #3
     41c:	and	x1, x0, x1
     420:	mov	x0, #0x0                   	// #0
     424:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
     428:	mov	x20, x0
     42c:	add	x1, sp, #0x2c
     430:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     434:	tst	w0, #0xff
     438:	b.ne	47c <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc+0xa4>  // b.any
     43c:	mov	x0, x19
     440:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
     444:	mov	x0, x20
     448:	ldp	x21, x30, [sp, #16]
     44c:	ldp	x19, x20, [sp], #48
     450:	ret
     454:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     458:	mov	x2, x0
     45c:	str	x0, [x20]
     460:	sub	x0, x2, #0x1
     464:	tst	x2, x0
     468:	b.eq	404 <_ZN11__sanitizer18MmapNoReserveOrDieEmPKc+0x2c>  // b.none
     46c:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     470:	add	x0, x0, #0x0
     474:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     478:	bl	0 <_ZN11__sanitizer3DieEv>
     47c:	ldr	w3, [sp, #44]
     480:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     484:	mov	x1, x21
     488:	mov	x0, x19
     48c:	add	x2, x2, #0x0
     490:	mov	w4, #0x0                   	// #0
     494:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>

0000000000000498 <_ZN11__sanitizer13MmapFixedImplEmmb>:
     498:	stp	x19, x20, [sp, #-96]!
     49c:	adrp	x19, 0 <_ZN11__sanitizer14PageSizeCachedE>
     4a0:	mov	x20, x1
     4a4:	ldr	x19, [x19]
     4a8:	stp	x21, x22, [sp, #16]
     4ac:	and	w22, w2, #0xff
     4b0:	mov	x21, x0
     4b4:	ldr	x2, [x19]
     4b8:	str	x30, [sp, #32]
     4bc:	cbz	x2, 520 <_ZN11__sanitizer13MmapFixedImplEmmb+0x88>
     4c0:	neg	x6, x2
     4c4:	sub	x3, x2, #0x1
     4c8:	and	x0, x6, x21
     4cc:	tst	x3, x2
     4d0:	b.ne	540 <_ZN11__sanitizer13MmapFixedImplEmmb+0xa8>  // b.any
     4d4:	add	x1, x20, x3
     4d8:	mov	x5, #0x0                   	// #0
     4dc:	mov	w4, #0xffffffff            	// #-1
     4e0:	mov	w3, #0x32                  	// #50
     4e4:	mov	w2, #0x3                   	// #3
     4e8:	and	x1, x1, x6
     4ec:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
     4f0:	mov	x19, x0
     4f4:	add	x1, sp, #0x34
     4f8:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     4fc:	tst	w0, #0xff
     500:	b.ne	550 <_ZN11__sanitizer13MmapFixedImplEmmb+0xb8>  // b.any
     504:	mov	x0, x20
     508:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
     50c:	mov	x0, x19
     510:	ldp	x21, x22, [sp, #16]
     514:	ldr	x30, [sp, #32]
     518:	ldp	x19, x20, [sp], #96
     51c:	ret
     520:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     524:	mov	x2, x0
     528:	str	x0, [x19]
     52c:	neg	x6, x2
     530:	sub	x3, x2, #0x1
     534:	and	x0, x6, x21
     538:	tst	x3, x2
     53c:	b.eq	4d4 <_ZN11__sanitizer13MmapFixedImplEmmb+0x3c>  // b.none
     540:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     544:	add	x0, x0, #0x0
     548:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     54c:	bl	0 <_ZN11__sanitizer3DieEv>
     550:	cbz	w22, 568 <_ZN11__sanitizer13MmapFixedImplEmmb+0xd0>
     554:	ldr	w0, [sp, #52]
     558:	cmp	w0, #0xc
     55c:	b.ne	568 <_ZN11__sanitizer13MmapFixedImplEmmb+0xd0>  // b.any
     560:	mov	x0, #0x0                   	// #0
     564:	b	510 <_ZN11__sanitizer13MmapFixedImplEmmb+0x78>
     568:	add	x19, sp, #0x38
     56c:	mov	x3, x21
     570:	mov	x1, #0x28                  	// #40
     574:	mov	x0, x19
     578:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     57c:	add	x2, x2, #0x0
     580:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     584:	ldr	w3, [sp, #52]
     588:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     58c:	mov	x1, x19
     590:	mov	x0, x20
     594:	add	x2, x2, #0x0
     598:	mov	w4, #0x0                   	// #0
     59c:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>

00000000000005a0 <_ZN11__sanitizer14MmapFixedOrDieEmm>:
     5a0:	stp	x19, x20, [sp, #-80]!
     5a4:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
     5a8:	mov	x19, x1
     5ac:	ldr	x20, [x20]
     5b0:	stp	x21, x30, [sp, #16]
     5b4:	mov	x21, x0
     5b8:	ldr	x2, [x20]
     5bc:	cbz	x2, 61c <_ZN11__sanitizer14MmapFixedOrDieEmm+0x7c>
     5c0:	neg	x6, x2
     5c4:	sub	x3, x2, #0x1
     5c8:	and	x0, x21, x6
     5cc:	tst	x3, x2
     5d0:	b.ne	63c <_ZN11__sanitizer14MmapFixedOrDieEmm+0x9c>  // b.any
     5d4:	add	x1, x19, x3
     5d8:	mov	x5, #0x0                   	// #0
     5dc:	mov	w4, #0xffffffff            	// #-1
     5e0:	mov	w3, #0x32                  	// #50
     5e4:	mov	w2, #0x3                   	// #3
     5e8:	and	x1, x1, x6
     5ec:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
     5f0:	mov	x20, x0
     5f4:	add	x1, sp, #0x24
     5f8:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     5fc:	tst	w0, #0xff
     600:	b.ne	64c <_ZN11__sanitizer14MmapFixedOrDieEmm+0xac>  // b.any
     604:	mov	x0, x19
     608:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
     60c:	mov	x0, x20
     610:	ldp	x21, x30, [sp, #16]
     614:	ldp	x19, x20, [sp], #80
     618:	ret
     61c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     620:	mov	x2, x0
     624:	str	x0, [x20]
     628:	neg	x6, x2
     62c:	sub	x3, x2, #0x1
     630:	and	x0, x21, x6
     634:	tst	x3, x2
     638:	b.eq	5d4 <_ZN11__sanitizer14MmapFixedOrDieEmm+0x34>  // b.none
     63c:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     640:	add	x0, x0, #0x0
     644:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     648:	bl	0 <_ZN11__sanitizer3DieEv>
     64c:	add	x20, sp, #0x28
     650:	mov	x3, x21
     654:	mov	x1, #0x28                  	// #40
     658:	mov	x0, x20
     65c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     660:	add	x2, x2, #0x0
     664:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     668:	ldr	w3, [sp, #36]
     66c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     670:	mov	x1, x20
     674:	mov	x0, x19
     678:	add	x2, x2, #0x0
     67c:	mov	w4, #0x0                   	// #0
     680:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>
     684:	nop

0000000000000688 <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm>:
     688:	stp	x19, x20, [sp, #-80]!
     68c:	adrp	x19, 0 <_ZN11__sanitizer14PageSizeCachedE>
     690:	mov	x20, x1
     694:	ldr	x19, [x19]
     698:	stp	x21, x30, [sp, #16]
     69c:	mov	x21, x0
     6a0:	ldr	x2, [x19]
     6a4:	cbz	x2, 704 <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm+0x7c>
     6a8:	neg	x6, x2
     6ac:	sub	x3, x2, #0x1
     6b0:	and	x0, x21, x6
     6b4:	tst	x3, x2
     6b8:	b.ne	724 <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm+0x9c>  // b.any
     6bc:	add	x1, x20, x3
     6c0:	mov	x5, #0x0                   	// #0
     6c4:	mov	w4, #0xffffffff            	// #-1
     6c8:	mov	w3, #0x32                  	// #50
     6cc:	mov	w2, #0x3                   	// #3
     6d0:	and	x1, x1, x6
     6d4:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
     6d8:	mov	x19, x0
     6dc:	add	x1, sp, #0x24
     6e0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     6e4:	tst	w0, #0xff
     6e8:	b.ne	734 <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm+0xac>  // b.any
     6ec:	mov	x0, x20
     6f0:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
     6f4:	mov	x0, x19
     6f8:	ldp	x21, x30, [sp, #16]
     6fc:	ldp	x19, x20, [sp], #80
     700:	ret
     704:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     708:	mov	x2, x0
     70c:	str	x0, [x19]
     710:	neg	x6, x2
     714:	sub	x3, x2, #0x1
     718:	and	x0, x21, x6
     71c:	tst	x3, x2
     720:	b.eq	6bc <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm+0x34>  // b.none
     724:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     728:	add	x0, x0, #0x0
     72c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     730:	bl	0 <_ZN11__sanitizer3DieEv>
     734:	ldr	w0, [sp, #36]
     738:	cmp	w0, #0xc
     73c:	b.ne	748 <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm+0xc0>  // b.any
     740:	mov	x0, #0x0                   	// #0
     744:	b	6f8 <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm+0x70>
     748:	add	x19, sp, #0x28
     74c:	mov	x3, x21
     750:	mov	x1, #0x28                  	// #40
     754:	mov	x0, x19
     758:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     75c:	add	x2, x2, #0x0
     760:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     764:	ldr	w3, [sp, #36]
     768:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     76c:	mov	x1, x19
     770:	mov	x0, x20
     774:	add	x2, x2, #0x0
     778:	mov	w4, #0x0                   	// #0
     77c:	bl	0 <_ZN11__sanitizer23ReportMmapFailureAndDieEmPKcS1_ib>

0000000000000780 <_ZN11__sanitizer16MprotectNoAccessEmm>:
     780:	str	x30, [sp, #-16]!
     784:	mov	w2, #0x0                   	// #0
     788:	bl	0 <_ZN11__sanitizer17internal_mprotectEPvmi>
     78c:	cmp	w0, #0x0
     790:	cset	w0, eq  // eq = none
     794:	ldr	x30, [sp], #16
     798:	ret
     79c:	nop

00000000000007a0 <_ZN11__sanitizer16MprotectReadOnlyEmm>:
     7a0:	str	x30, [sp, #-16]!
     7a4:	mov	w2, #0x1                   	// #1
     7a8:	bl	0 <_ZN11__sanitizer17internal_mprotectEPvmi>
     7ac:	cmp	w0, #0x0
     7b0:	cset	w0, eq  // eq = none
     7b4:	ldr	x30, [sp], #16
     7b8:	ret
     7bc:	nop

00000000000007c0 <_ZN11__sanitizer19MprotectMallocZonesEPvi>:
     7c0:	ret
     7c4:	nop

00000000000007c8 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi>:
     7c8:	stp	x19, x30, [sp, #-16]!
     7cc:	cmp	w1, #0x2
     7d0:	mov	x19, x2
     7d4:	b.hi	7e4 <_ZN11__sanitizer8OpenFileEPKcNS_14FileAccessModeEPi+0x1c>  // b.pmore
     7d8:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     7dc:	add	x2, x2, #0x0
     7e0:	ldr	w3, [x2, w1, uxtw #2]
     7e4:	mov	w2, #0x1b0                 	// #432
     7e8:	mov	w1, w3
     7ec:	bl	0 <_ZN11__sanitizer13internal_openEPKcij>
     7f0:	mov	x1, x19
     7f4:	mov	x19, x0
     7f8:	sxtw	x0, w0
     7fc:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     800:	tst	w0, #0xff
     804:	csinv	w0, w19, wzr, eq  // eq = none
     808:	ldp	x19, x30, [sp], #16
     80c:	ret

0000000000000810 <_ZN11__sanitizer9CloseFileEi>:
     810:	b	0 <_ZN11__sanitizer14internal_closeEi>
     814:	nop

0000000000000818 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>:
     818:	stp	x19, x20, [sp, #-32]!
     81c:	mov	x20, x4
     820:	mov	x19, x3
     824:	str	x30, [sp, #16]
     828:	bl	0 <_ZN11__sanitizer13internal_readEiPvm>
     82c:	mov	x1, x20
     830:	mov	x20, x0
     834:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     838:	tst	w0, #0xff
     83c:	b.ne	858 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi+0x40>  // b.any
     840:	mov	w0, #0x1                   	// #1
     844:	cbz	x19, 84c <_ZN11__sanitizer12ReadFromFileEiPvmPmPi+0x34>
     848:	str	x20, [x19]
     84c:	ldr	x30, [sp, #16]
     850:	ldp	x19, x20, [sp], #32
     854:	ret
     858:	mov	w0, #0x0                   	// #0
     85c:	ldr	x30, [sp, #16]
     860:	ldp	x19, x20, [sp], #32
     864:	ret

0000000000000868 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>:
     868:	stp	x19, x20, [sp, #-32]!
     86c:	mov	x20, x4
     870:	mov	x19, x3
     874:	str	x30, [sp, #16]
     878:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
     87c:	mov	x1, x20
     880:	mov	x20, x0
     884:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     888:	tst	w0, #0xff
     88c:	b.ne	8a8 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi+0x40>  // b.any
     890:	mov	w0, #0x1                   	// #1
     894:	cbz	x19, 89c <_ZN11__sanitizer11WriteToFileEiPKvmPmPi+0x34>
     898:	str	x20, [x19]
     89c:	ldr	x30, [sp, #16]
     8a0:	ldp	x19, x20, [sp], #32
     8a4:	ret
     8a8:	mov	w0, #0x0                   	// #0
     8ac:	ldr	x30, [sp, #16]
     8b0:	ldp	x19, x20, [sp], #32
     8b4:	ret

00000000000008b8 <_ZN11__sanitizer10RenameFileEPKcS1_Pi>:
     8b8:	stp	x19, x30, [sp, #-16]!
     8bc:	mov	x19, x2
     8c0:	bl	0 <_ZN11__sanitizer15internal_renameEPKcS1_>
     8c4:	mov	x1, x19
     8c8:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     8cc:	and	w0, w0, #0xff
     8d0:	eor	w0, w0, #0x1
     8d4:	ldp	x19, x30, [sp], #16
     8d8:	ret
     8dc:	nop

00000000000008e0 <_ZN11__sanitizer15MapFileToMemoryEPKcPm>:
     8e0:	stp	x19, x20, [sp, #-48]!
     8e4:	mov	w2, #0x1b0                 	// #432
     8e8:	stp	x21, x22, [sp, #16]
     8ec:	mov	x21, x1
     8f0:	mov	w1, #0x0                   	// #0
     8f4:	str	x30, [sp, #32]
     8f8:	bl	0 <_ZN11__sanitizer13internal_openEPKcij>
     8fc:	mov	x1, #0x0                   	// #0
     900:	mov	x20, x0
     904:	sxtw	x0, w0
     908:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     90c:	tst	w0, #0xff
     910:	b.ne	9a8 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0xc8>  // b.any
     914:	cmn	w20, #0x1
     918:	b.eq	9a8 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0xc8>  // b.none
     91c:	mov	w0, w20
     920:	bl	0 <_ZN11__sanitizer17internal_filesizeEi>
     924:	mov	x19, x0
     928:	cmn	x0, #0x1
     92c:	b.eq	9c8 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0xe8>  // b.none
     930:	cbz	x0, 9e8 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0x108>
     934:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
     938:	ldr	x22, [x22]
     93c:	ldr	x0, [x22]
     940:	cbz	x0, 99c <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0xbc>
     944:	sub	x1, x0, #0x1
     948:	tst	x0, x1
     94c:	b.ne	a08 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0x128>  // b.any
     950:	add	x19, x19, x1
     954:	neg	x0, x0
     958:	and	x1, x19, x0
     95c:	mov	w4, w20
     960:	str	x1, [x21]
     964:	mov	x5, #0x0                   	// #0
     968:	mov	w3, #0x2                   	// #2
     96c:	mov	w2, #0x1                   	// #1
     970:	mov	x0, #0x0                   	// #0
     974:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
     978:	mov	x1, #0x0                   	// #0
     97c:	mov	x19, x0
     980:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     984:	tst	w0, #0xff
     988:	csel	x0, x19, xzr, eq  // eq = none
     98c:	ldp	x21, x22, [sp, #16]
     990:	ldr	x30, [sp, #32]
     994:	ldp	x19, x20, [sp], #48
     998:	ret
     99c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     9a0:	str	x0, [x22]
     9a4:	b	944 <_ZN11__sanitizer15MapFileToMemoryEPKcPm+0x64>
     9a8:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     9ac:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     9b0:	add	x2, x2, #0x0
     9b4:	add	x0, x0, #0x0
     9b8:	mov	x4, #0x0                   	// #0
     9bc:	mov	x3, #0x0                   	// #0
     9c0:	mov	w1, #0xc9                  	// #201
     9c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     9c8:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     9cc:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     9d0:	add	x2, x2, #0x0
     9d4:	add	x0, x0, #0x0
     9d8:	mov	x4, x19
     9dc:	mov	x3, x19
     9e0:	mov	w1, #0xcb                  	// #203
     9e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     9e8:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     9ec:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     9f0:	add	x2, x2, #0x0
     9f4:	add	x0, x0, #0x0
     9f8:	mov	x4, #0x0                   	// #0
     9fc:	mov	x3, #0x0                   	// #0
     a00:	mov	w1, #0xcc                  	// #204
     a04:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     a08:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     a0c:	add	x0, x0, #0x0
     a10:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     a14:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000a18 <_ZN11__sanitizer23MapWritableFileToMemoryEPvmim>:
     a18:	stp	x19, x20, [sp, #-64]!
     a1c:	cmp	x0, #0x0
     a20:	mov	x5, x3
     a24:	mov	w4, w2
     a28:	stp	x21, x22, [sp, #16]
     a2c:	mov	x21, x3
     a30:	mov	w3, #0x11                  	// #17
     a34:	csinc	w3, w3, wzr, ne  // ne = any
     a38:	mov	w20, w2
     a3c:	mov	w2, #0x3                   	// #3
     a40:	mov	x22, x1
     a44:	str	x30, [sp, #32]
     a48:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
     a4c:	mov	x19, x0
     a50:	add	x1, sp, #0x3c
     a54:	str	wzr, [sp, #60]
     a58:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     a5c:	tst	w0, #0xff
     a60:	b.ne	a78 <_ZN11__sanitizer23MapWritableFileToMemoryEPvmim+0x60>  // b.any
     a64:	mov	x0, x19
     a68:	ldp	x21, x22, [sp, #16]
     a6c:	ldr	x30, [sp, #32]
     a70:	ldp	x19, x20, [sp], #64
     a74:	ret
     a78:	ldr	w5, [sp, #60]
     a7c:	mov	x4, x19
     a80:	mov	x3, x22
     a84:	mov	x2, x21
     a88:	mov	w1, w20
     a8c:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     a90:	add	x0, x0, #0x0
     a94:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     a98:	mov	x0, #0x0                   	// #0
     a9c:	b	a68 <_ZN11__sanitizer23MapWritableFileToMemoryEPvmim+0x50>

0000000000000aa0 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm>:
     aa0:	stp	x19, x20, [sp, #-160]!
     aa4:	add	x20, sp, #0x30
     aa8:	stp	x21, x22, [sp, #16]
     aac:	mov	x21, x0
     ab0:	mov	x22, x1
     ab4:	mov	x0, x20
     ab8:	mov	w1, #0x1                   	// #1
     abc:	stp	x23, x30, [sp, #32]
     ac0:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
     ac4:	stp	xzr, xzr, [sp, #104]
     ac8:	add	x23, sp, #0x50
     acc:	cmp	x21, x22
     ad0:	str	xzr, [sp, #152]
     ad4:	b.hi	b3c <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x9c>  // b.pmore
     ad8:	mov	x1, x23
     adc:	mov	x0, x20
     ae0:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
     ae4:	tst	w0, #0xff
     ae8:	b.eq	bd0 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x130>  // b.none
     aec:	ldp	x3, x2, [sp, #80]
     af0:	cmp	x3, x2
     af4:	b.eq	ad8 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x38>  // b.none
     af8:	cbz	x2, b8c <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0xec>
     afc:	sub	x2, x2, #0x1
     b00:	cmp	x3, x2
     b04:	b.hi	bac <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x10c>  // b.pmore
     b08:	cmp	x22, x3
     b0c:	cset	w19, cc  // cc = lo, ul, last
     b10:	cmp	x21, x2
     b14:	cset	w0, hi  // hi = pmore
     b18:	orr	w19, w19, w0
     b1c:	cbnz	w19, ad8 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x38>
     b20:	mov	x0, x20
     b24:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
     b28:	mov	w0, w19
     b2c:	ldp	x21, x22, [sp, #16]
     b30:	ldp	x23, x30, [sp, #32]
     b34:	ldp	x19, x20, [sp], #160
     b38:	ret
     b3c:	mov	x1, x23
     b40:	mov	x0, x20
     b44:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
     b48:	tst	w0, #0xff
     b4c:	b.eq	bd0 <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x130>  // b.none
     b50:	ldp	x3, x2, [sp, #80]
     b54:	cmp	x3, x2
     b58:	b.eq	b3c <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x9c>  // b.none
     b5c:	cbz	x2, b8c <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0xec>
     b60:	sub	x2, x2, #0x1
     b64:	cmp	x3, x2
     b68:	b.hi	bac <_ZN11__sanitizer22MemoryRangeIsAvailableEmm+0x10c>  // b.pmore
     b6c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     b70:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     b74:	add	x2, x2, #0x0
     b78:	add	x0, x0, #0x0
     b7c:	mov	x4, #0x0                   	// #0
     b80:	mov	x3, #0x0                   	// #0
     b84:	mov	w1, #0xe2                  	// #226
     b88:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     b8c:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     b90:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     b94:	add	x2, x2, #0x0
     b98:	add	x0, x0, #0x0
     b9c:	mov	x4, #0x0                   	// #0
     ba0:	mov	x3, #0x0                   	// #0
     ba4:	mov	w1, #0xef                  	// #239
     ba8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     bac:	cmp	x2, x3
     bb0:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     bb4:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     bb8:	cset	x3, cs  // cs = hs, nlast
     bbc:	add	x2, x2, #0x0
     bc0:	add	x0, x0, #0x0
     bc4:	mov	x4, #0x0                   	// #0
     bc8:	mov	w1, #0xe1                  	// #225
     bcc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     bd0:	mov	x0, x20
     bd4:	mov	w19, #0x1                   	// #1
     bd8:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
     bdc:	mov	w0, w19
     be0:	ldp	x21, x22, [sp, #16]
     be4:	ldp	x23, x30, [sp, #32]
     be8:	ldp	x19, x20, [sp], #160
     bec:	ret

0000000000000bf0 <_ZN11__sanitizer14DumpProcessMapEv>:
     bf0:	stp	x19, x20, [sp, #-160]!
     bf4:	mov	w1, #0x1                   	// #1
     bf8:	adrp	x20, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     bfc:	add	x19, sp, #0x30
     c00:	stp	x21, x22, [sp, #16]
     c04:	mov	x0, x19
     c08:	str	x30, [sp, #32]
     c0c:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
     c10:	mov	w2, #0x0                   	// #0
     c14:	adrp	x1, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     c18:	mov	x0, #0xfff                 	// #4095
     c1c:	add	x1, x1, #0x0
     c20:	bl	8 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     c24:	add	x21, sp, #0x50
     c28:	mov	x1, #0xfff                 	// #4095
     c2c:	mov	x22, x0
     c30:	add	x20, x20, #0x0
     c34:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     c38:	add	x0, x0, #0x0
     c3c:	stp	x22, x1, [sp, #104]
     c40:	str	xzr, [sp, #152]
     c44:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     c48:	b	c5c <_ZN11__sanitizer14DumpProcessMapEv+0x6c>
     c4c:	ldp	x1, x2, [sp, #80]
     c50:	mov	x0, x20
     c54:	ldr	x3, [sp, #104]
     c58:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     c5c:	mov	x1, x21
     c60:	mov	x0, x19
     c64:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
     c68:	tst	w0, #0xff
     c6c:	b.ne	c4c <_ZN11__sanitizer14DumpProcessMapEv+0x5c>  // b.any
     c70:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     c74:	add	x0, x0, #0x0
     c78:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     c7c:	cbnz	x22, c98 <_ZN11__sanitizer14DumpProcessMapEv+0xa8>
     c80:	mov	x0, x19
     c84:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
     c88:	ldp	x21, x22, [sp, #16]
     c8c:	ldr	x30, [sp, #32]
     c90:	ldp	x19, x20, [sp], #160
     c94:	ret
     c98:	mov	x1, #0xfff                 	// #4095
     c9c:	mov	x0, x22
     ca0:	bl	0 <_ZN11__sanitizer15internal_munmapEPvm>
     ca4:	mov	x1, #0x0                   	// #0
     ca8:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     cac:	tst	w0, #0xff
     cb0:	b.ne	cd4 <_ZN11__sanitizer14DumpProcessMapEv+0xe4>  // b.any
     cb4:	mov	x0, #0xfff                 	// #4095
     cb8:	bl	0 <_ZN11__sanitizer17DecreaseTotalMmapEm>
     cbc:	mov	x0, x19
     cc0:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
     cc4:	ldp	x21, x22, [sp, #16]
     cc8:	ldr	x30, [sp, #32]
     ccc:	ldp	x19, x20, [sp], #160
     cd0:	ret
     cd4:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     cd8:	mov	x3, #0xfff                 	// #4095
     cdc:	mov	x4, x22
     ce0:	mov	x2, x3
     ce4:	ldr	x1, [x1]
     ce8:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     cec:	add	x0, x0, #0x0
     cf0:	ldr	x1, [x1]
     cf4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     cf8:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     cfc:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     d00:	add	x2, x2, #0x0
     d04:	add	x0, x0, #0x0
     d08:	mov	x4, #0x0                   	// #0
     d0c:	mov	x3, #0x0                   	// #0
     d10:	mov	w1, #0x3c                  	// #60
     d14:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000d18 <_ZN11__sanitizer6GetPwdEv>:
     d18:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     d1c:	add	x0, x0, #0x0
     d20:	b	0 <_ZN11__sanitizer6GetEnvEPKc>
     d24:	nop

0000000000000d28 <_ZN11__sanitizer15IsPathSeparatorEc>:
     d28:	and	w0, w0, #0xff
     d2c:	cmp	w0, #0x2f
     d30:	cset	w0, eq  // eq = none
     d34:	ret

0000000000000d38 <_ZN11__sanitizer14IsAbsolutePathEPKc>:
     d38:	cbz	x0, d4c <_ZN11__sanitizer14IsAbsolutePathEPKc+0x14>
     d3c:	ldrb	w0, [x0]
     d40:	cmp	w0, #0x2f
     d44:	cset	w0, eq  // eq = none
     d48:	ret
     d4c:	mov	w0, #0x0                   	// #0
     d50:	ret
     d54:	nop

0000000000000d58 <_ZN11__sanitizer10ReportFile5WriteEPKcm>:
     d58:	stp	x19, x20, [sp, #-48]!
     d5c:	mov	x19, x0
     d60:	mov	x20, x2
     d64:	stp	x21, x22, [sp, #16]
     d68:	mov	x22, x1
     d6c:	mov	w1, #0x1                   	// #1
     d70:	ldr	x21, [x0]
     d74:	str	x30, [sp, #32]
     d78:	ldxrb	w0, [x21]
     d7c:	stxrb	w2, w1, [x21]
     d80:	cbnz	w2, d78 <_ZN11__sanitizer10ReportFile5WriteEPKcm+0x20>
     d84:	dmb	ish
     d88:	tst	w0, #0xff
     d8c:	b.eq	d98 <_ZN11__sanitizer10ReportFile5WriteEPKcm+0x40>  // b.none
     d90:	mov	x0, x21
     d94:	bl	0 <_ZN11__sanitizer18GetMmapGranularityEv>
     d98:	mov	x0, x19
     d9c:	bl	0 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>
     da0:	ldr	w0, [x19, #8]
     da4:	mov	x2, x20
     da8:	mov	x1, x22
     dac:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
     db0:	cmp	x0, x20
     db4:	b.ne	dd0 <_ZN11__sanitizer10ReportFile5WriteEPKcm+0x78>  // b.any
     db8:	dmb	ish
     dbc:	strb	wzr, [x21]
     dc0:	ldp	x21, x22, [sp, #16]
     dc4:	ldr	x30, [sp, #32]
     dc8:	ldp	x19, x20, [sp], #48
     dcc:	ret
     dd0:	ldr	w20, [x19, #8]
     dd4:	adrp	x19, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     dd8:	add	x19, x19, #0x0
     ddc:	mov	x0, x19
     de0:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     de4:	mov	x1, x19
     de8:	mov	x2, x0
     dec:	mov	w0, w20
     df0:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
     df4:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000df8 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_>:
     df8:	stp	x19, x20, [sp, #-192]!
     dfc:	adrp	x19, 0 <_ZN11__sanitizer14PageSizeCachedE>
     e00:	add	x20, sp, #0x50
     e04:	stp	x21, x22, [sp, #16]
     e08:	mov	x22, x0
     e0c:	mov	x0, x20
     e10:	stp	x23, x24, [sp, #32]
     e14:	mov	x24, x1
     e18:	mov	x23, x2
     e1c:	mov	w1, #0x0                   	// #0
     e20:	stp	x25, x26, [sp, #48]
     e24:	str	x30, [sp, #64]
     e28:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
     e2c:	ldr	x21, [x19]
     e30:	ldr	x3, [x21]
     e34:	cbz	x3, f38 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x140>
     e38:	sub	x0, x3, #0x1
     e3c:	tst	x0, x3
     e40:	b.ne	fa4 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x1ac>  // b.any
     e44:	add	x25, x3, #0xfff
     e48:	neg	x3, x3
     e4c:	and	x25, x25, x3
     e50:	mov	w2, #0x0                   	// #0
     e54:	mov	x0, x25
     e58:	adrp	x21, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     e5c:	add	x1, x21, #0x0
     e60:	bl	8 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     e64:	mov	x2, #0x0                   	// #0
     e68:	mov	x26, x0
     e6c:	mov	x1, #0x0                   	// #0
     e70:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     e74:	cmp	x25, #0xfff
     e78:	b.ls	f48 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x150>  // b.plast
     e7c:	mov	x0, x26
     e80:	mov	x2, #0x1000                	// #4096
     e84:	mov	w1, #0x0                   	// #0
     e88:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     e8c:	strb	wzr, [x26]
     e90:	mov	x0, #0x1000                	// #4096
     e94:	add	x21, sp, #0x70
     e98:	stp	x26, x0, [sp, #136]
     e9c:	str	xzr, [sp, #184]
     ea0:	b	eac <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0xb4>
     ea4:	ldr	x3, [sp, #152]
     ea8:	tbnz	w3, #2, ee8 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0xf0>
     eac:	mov	x1, x21
     eb0:	mov	x0, x20
     eb4:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
     eb8:	ands	w19, w0, #0xff
     ebc:	b.ne	ea4 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0xac>  // b.any
     ec0:	cbnz	x25, f10 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x118>
     ec4:	mov	x0, x20
     ec8:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
     ecc:	mov	w0, w19
     ed0:	ldp	x21, x22, [sp, #16]
     ed4:	ldp	x23, x24, [sp, #32]
     ed8:	ldp	x25, x26, [sp, #48]
     edc:	ldr	x30, [sp, #64]
     ee0:	ldp	x19, x20, [sp], #192
     ee4:	ret
     ee8:	ldr	x1, [sp, #136]
     eec:	mov	x0, x22
     ef0:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     ef4:	cbnz	w0, eac <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0xb4>
     ef8:	ldr	x0, [sp, #112]
     efc:	str	x0, [x24]
     f00:	ldr	x0, [sp, #120]
     f04:	str	x0, [x23]
     f08:	cbz	x25, ec4 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0xcc>
     f0c:	nop
     f10:	mov	x1, x25
     f14:	mov	x0, x26
     f18:	bl	0 <_ZN11__sanitizer15internal_munmapEPvm>
     f1c:	mov	x1, #0x0                   	// #0
     f20:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     f24:	tst	w0, #0xff
     f28:	b.ne	fdc <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x1e4>  // b.any
     f2c:	mov	x0, x25
     f30:	bl	0 <_ZN11__sanitizer17DecreaseTotalMmapEm>
     f34:	b	ec4 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0xcc>
     f38:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     f3c:	mov	x3, x0
     f40:	str	x0, [x21]
     f44:	b	e38 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x40>
     f48:	ldr	x19, [x19]
     f4c:	ldr	x0, [x19]
     f50:	cbz	x0, 1020 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x228>
     f54:	sub	x1, x0, #0x1
     f58:	tst	x1, x0
     f5c:	b.ne	fa4 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x1ac>  // b.any
     f60:	add	x19, x0, #0xfff
     f64:	neg	x0, x0
     f68:	and	x19, x19, x0
     f6c:	add	x1, x21, #0x0
     f70:	mov	w2, #0x0                   	// #0
     f74:	mov	x0, x19
     f78:	bl	8 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     f7c:	mov	x21, x0
     f80:	mov	x1, x26
     f84:	mov	x2, #0x0                   	// #0
     f88:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     f8c:	cmp	x26, #0x0
     f90:	ccmp	x25, #0x0, #0x4, ne  // ne = any
     f94:	b.ne	fb4 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x1bc>  // b.any
     f98:	mov	x25, x19
     f9c:	mov	x26, x21
     fa0:	b	e7c <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x84>
     fa4:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     fa8:	add	x0, x0, #0x0
     fac:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     fb0:	bl	0 <_ZN11__sanitizer3DieEv>
     fb4:	mov	x1, x25
     fb8:	mov	x0, x26
     fbc:	bl	0 <_ZN11__sanitizer15internal_munmapEPvm>
     fc0:	mov	x1, #0x0                   	// #0
     fc4:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     fc8:	tst	w0, #0xff
     fcc:	b.ne	fdc <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x1e4>  // b.any
     fd0:	mov	x0, x25
     fd4:	bl	0 <_ZN11__sanitizer17DecreaseTotalMmapEm>
     fd8:	b	f98 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x1a0>
     fdc:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     fe0:	mov	x4, x26
     fe4:	mov	x3, x25
     fe8:	mov	x2, x25
     fec:	ldr	x1, [x1]
     ff0:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
     ff4:	add	x0, x0, #0x0
     ff8:	ldr	x1, [x1]
     ffc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1000:	adrp	x2, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
    1004:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
    1008:	add	x2, x2, #0x0
    100c:	add	x0, x0, #0x0
    1010:	mov	x4, #0x0                   	// #0
    1014:	mov	x3, #0x0                   	// #0
    1018:	mov	w1, #0x3c                  	// #60
    101c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1020:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    1024:	str	x0, [x19]
    1028:	b	f54 <_ZN11__sanitizer19GetCodeRangeForFileEPKcPmS2_+0x15c>
    102c:	nop

0000000000001030 <_ZNK11__sanitizer13SignalContext10GetAddressEv>:
    1030:	ldr	x0, [x0]
    1034:	ldr	x0, [x0, #16]
    1038:	ret
    103c:	nop

0000000000001040 <_ZNK11__sanitizer13SignalContext14IsMemoryAccessEv>:
    1040:	ldr	x0, [x0]
    1044:	ldr	w0, [x0]
    1048:	cmp	w0, #0xb
    104c:	cset	w0, eq  // eq = none
    1050:	ret
    1054:	nop

0000000000001058 <_ZNK11__sanitizer13SignalContext7GetTypeEv>:
    1058:	ldr	x0, [x0]
    105c:	ldr	w0, [x0]
    1060:	ret
    1064:	nop

0000000000001068 <_ZNK11__sanitizer13SignalContext8DescribeEv>:
    1068:	ldr	x0, [x0]
    106c:	ldr	w0, [x0]
    1070:	cmp	w0, #0x7
    1074:	b.eq	10cc <_ZNK11__sanitizer13SignalContext8DescribeEv+0x64>  // b.none
    1078:	b.le	1098 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x30>
    107c:	cmp	w0, #0x8
    1080:	b.eq	10b4 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x4c>  // b.none
    1084:	cmp	w0, #0xb
    1088:	b.ne	10d8 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x70>  // b.any
    108c:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
    1090:	add	x0, x0, #0x0
    1094:	ret
    1098:	cmp	w0, #0x4
    109c:	b.eq	10c0 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x58>  // b.none
    10a0:	cmp	w0, #0x6
    10a4:	b.ne	10d8 <_ZNK11__sanitizer13SignalContext8DescribeEv+0x70>  // b.any
    10a8:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
    10ac:	add	x0, x0, #0x0
    10b0:	ret
    10b4:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
    10b8:	add	x0, x0, #0x0
    10bc:	ret
    10c0:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
    10c4:	add	x0, x0, #0x0
    10c8:	ret
    10cc:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
    10d0:	add	x0, x0, #0x0
    10d4:	ret
    10d8:	adrp	x0, 0 <_ZN11__sanitizer18GetMmapGranularityEv>
    10dc:	add	x0, x0, #0x0
    10e0:	ret

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

sanitizer_posix_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL6setlimEim.part.0>:
   0:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
   4:	stp	x19, x30, [sp, #-16]!
   8:	ldr	x0, [x0]
   c:	ldr	x19, [x0]
  10:	bl	0 <__errno_location>
  14:	mov	x2, x0
  18:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
  1c:	mov	x1, x19
  20:	add	x0, x0, #0x0
  24:	ldr	w2, [x2]
  28:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  2c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000030 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>:
  30:	stp	x19, x20, [sp, #-192]!
  34:	mov	x19, x1
  38:	stp	x21, x30, [sp, #16]
  3c:	mov	w21, w0
  40:	bl	0 <_ZN11__sanitizer19GetHandleSignalModeEi>
  44:	cbnz	w0, 54 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E+0x24>
  48:	ldp	x21, x30, [sp, #16]
  4c:	ldp	x19, x20, [sp], #192
  50:	ret
  54:	add	x20, sp, #0x28
  58:	mov	x2, #0x98                  	// #152
  5c:	mov	w1, #0x0                   	// #0
  60:	mov	x0, x20
  64:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  68:	str	x19, [sp, #40]
  6c:	adrp	x4, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  70:	mov	w5, #0x4                   	// #4
  74:	mov	w3, #0x4                   	// #4
  78:	movk	w5, #0x4000, lsl #16
  7c:	ldr	x4, [x4]
  80:	movk	w3, #0x4800, lsl #16
  84:	mov	x1, x20
  88:	mov	w0, w21
  8c:	mov	x2, #0x0                   	// #0
  90:	ldrb	w4, [x4, #97]
  94:	cmp	w4, #0x0
  98:	csel	w3, w3, w5, ne  // ne = any
  9c:	str	w3, [sp, #176]
  a0:	bl	0 <_ZN11__sanitizer18internal_sigactionEiPKvPv>
  a4:	sxtw	x4, w0
  a8:	cbnz	w0, d8 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E+0xa8>
  ac:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
  b0:	ldr	x0, [x0]
  b4:	ldr	w0, [x0]
  b8:	cbz	w0, 48 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E+0x18>
  bc:	mov	w1, w21
  c0:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
  c4:	add	x0, x0, #0x0
  c8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  cc:	ldp	x21, x30, [sp, #16]
  d0:	ldp	x19, x20, [sp], #192
  d4:	ret
  d8:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
  dc:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
  e0:	add	x2, x2, #0x0
  e4:	add	x0, x0, #0x0
  e8:	mov	x3, #0x0                   	// #0
  ec:	mov	w1, #0xd2                  	// #210
  f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  f4:	nop

00000000000000f8 <_ZN11__sanitizer6GetUidEv>:
  f8:	b	0 <getuid>
  fc:	nop

0000000000000100 <_ZN11__sanitizer13GetThreadSelfEv>:
 100:	b	0 <pthread_self>
 104:	nop

0000000000000108 <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm>:
 108:	stp	x19, x20, [sp, #-32]!
 10c:	mov	x19, x0
 110:	mov	x20, x1
 114:	stp	x21, x30, [sp, #16]
 118:	adrp	x21, 0 <_ZN11__sanitizer14PageSizeCachedE>
 11c:	ldr	x21, [x21]
 120:	ldr	x2, [x21]
 124:	cbz	x2, 158 <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x50>
 128:	sub	x0, x2, #0x1
 12c:	tst	x2, x0
 130:	b.ne	170 <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x68>  // b.any
 134:	neg	x2, x2
 138:	add	x0, x19, x0
 13c:	and	x20, x20, x2
 140:	and	x0, x0, x2
 144:	cmp	x20, x0
 148:	b.hi	180 <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x78>  // b.pmore
 14c:	ldp	x21, x30, [sp, #16]
 150:	ldp	x19, x20, [sp], #32
 154:	ret
 158:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 15c:	mov	x2, x0
 160:	str	x0, [x21]
 164:	sub	x0, x2, #0x1
 168:	tst	x2, x0
 16c:	b.eq	134 <_ZN11__sanitizer22ReleaseMemoryPagesToOSEmm+0x2c>  // b.none
 170:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 174:	add	x0, x0, #0x0
 178:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 17c:	bl	0 <_ZN11__sanitizer3DieEv>
 180:	sub	x1, x20, x0
 184:	mov	w2, #0x4                   	// #4
 188:	ldp	x21, x30, [sp, #16]
 18c:	ldp	x19, x20, [sp], #32
 190:	b	0 <madvise>
 194:	nop

0000000000000198 <_ZN11__sanitizer19NoHugePagesInRegionEmm>:
 198:	str	x30, [sp, #-16]!
 19c:	mov	w2, #0xf                   	// #15
 1a0:	bl	0 <madvise>
 1a4:	cmp	w0, #0x0
 1a8:	cset	w0, eq  // eq = none
 1ac:	ldr	x30, [sp], #16
 1b0:	ret
 1b4:	nop

00000000000001b8 <_ZN11__sanitizer20DontDumpShadowMemoryEmm>:
 1b8:	str	x30, [sp, #-16]!
 1bc:	mov	w2, #0x10                  	// #16
 1c0:	bl	0 <madvise>
 1c4:	cmp	w0, #0x0
 1c8:	cset	w0, eq  // eq = none
 1cc:	ldr	x30, [sp], #16
 1d0:	ret
 1d4:	nop

00000000000001d8 <_ZN11__sanitizer28DisableCoreDumperIfNecessaryEv>:
 1d8:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 1dc:	ldr	x0, [x0]
 1e0:	ldrb	w0, [x0, #178]
 1e4:	cbnz	w0, 1ec <_ZN11__sanitizer28DisableCoreDumperIfNecessaryEv+0x14>
 1e8:	ret
 1ec:	str	x30, [sp, #-32]!
 1f0:	mov	w0, #0x4                   	// #4
 1f4:	str	xzr, [sp, #16]
 1f8:	add	x1, sp, #0x10
 1fc:	str	xzr, [sp, #24]
 200:	bl	0 <setrlimit>
 204:	cbnz	w0, 210 <_ZN11__sanitizer28DisableCoreDumperIfNecessaryEv+0x38>
 208:	ldr	x30, [sp], #32
 20c:	ret
 210:	bl	0 <_ZN11__sanitizerL6setlimEim.part.0>
 214:	nop

0000000000000218 <_ZN11__sanitizer20StackSizeIsUnlimitedEv>:
 218:	str	x30, [sp, #-32]!
 21c:	mov	w0, #0x3                   	// #3
 220:	add	x1, sp, #0x10
 224:	bl	0 <getrlimit>
 228:	cbnz	w0, 240 <_ZN11__sanitizer20StackSizeIsUnlimitedEv+0x28>
 22c:	ldr	x0, [sp, #16]
 230:	ldr	x30, [sp], #32
 234:	cmn	x0, #0x1
 238:	cset	w0, eq  // eq = none
 23c:	ret
 240:	sxtw	x4, w0
 244:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 248:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 24c:	add	x2, x2, #0x0
 250:	add	x0, x0, #0x0
 254:	mov	x3, #0x0                   	// #0
 258:	mov	w1, #0x5a                  	// #90
 25c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000260 <_ZN11__sanitizer24GetStackSizeLimitInBytesEv>:
 260:	str	x30, [sp, #-32]!
 264:	mov	w0, #0x3                   	// #3
 268:	add	x1, sp, #0x10
 26c:	bl	0 <getrlimit>
 270:	cbnz	w0, 280 <_ZN11__sanitizer24GetStackSizeLimitInBytesEv+0x20>
 274:	ldr	x0, [sp, #16]
 278:	ldr	x30, [sp], #32
 27c:	ret
 280:	sxtw	x4, w0
 284:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 288:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 28c:	add	x2, x2, #0x0
 290:	add	x0, x0, #0x0
 294:	mov	x3, #0x0                   	// #0
 298:	mov	w1, #0x5a                  	// #90
 29c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000002a0 <_ZN11__sanitizer24SetStackSizeLimitInBytesEm>:
 2a0:	str	x30, [sp, #-48]!
 2a4:	str	x0, [sp, #32]
 2a8:	add	x1, sp, #0x20
 2ac:	str	x0, [sp, #40]
 2b0:	mov	w0, #0x3                   	// #3
 2b4:	bl	0 <setrlimit>
 2b8:	cbnz	w0, 320 <_ZN11__sanitizer24SetStackSizeLimitInBytesEm+0x80>
 2bc:	add	x1, sp, #0x10
 2c0:	mov	w0, #0x3                   	// #3
 2c4:	bl	0 <getrlimit>
 2c8:	sxtw	x4, w0
 2cc:	cbnz	w0, 2e4 <_ZN11__sanitizer24SetStackSizeLimitInBytesEm+0x44>
 2d0:	ldr	x0, [sp, #16]
 2d4:	cmn	x0, #0x1
 2d8:	b.eq	300 <_ZN11__sanitizer24SetStackSizeLimitInBytesEm+0x60>  // b.none
 2dc:	ldr	x30, [sp], #48
 2e0:	ret
 2e4:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 2e8:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 2ec:	add	x2, x2, #0x0
 2f0:	add	x0, x0, #0x0
 2f4:	mov	x3, #0x0                   	// #0
 2f8:	mov	w1, #0x5a                  	// #90
 2fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 300:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 304:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 308:	add	x2, x2, #0x0
 30c:	add	x0, x0, #0x0
 310:	mov	x4, #0x0                   	// #0
 314:	mov	x3, #0x0                   	// #0
 318:	mov	w1, #0x7a                  	// #122
 31c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 320:	bl	0 <_ZN11__sanitizerL6setlimEim.part.0>
 324:	nop

0000000000000328 <_ZN11__sanitizer23AddressSpaceIsUnlimitedEv>:
 328:	str	x30, [sp, #-32]!
 32c:	mov	w0, #0x9                   	// #9
 330:	add	x1, sp, #0x10
 334:	bl	0 <getrlimit>
 338:	cbnz	w0, 350 <_ZN11__sanitizer23AddressSpaceIsUnlimitedEv+0x28>
 33c:	ldr	x0, [sp, #16]
 340:	ldr	x30, [sp], #32
 344:	cmn	x0, #0x1
 348:	cset	w0, eq  // eq = none
 34c:	ret
 350:	sxtw	x4, w0
 354:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 358:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 35c:	add	x2, x2, #0x0
 360:	add	x0, x0, #0x0
 364:	mov	x3, #0x0                   	// #0
 368:	mov	w1, #0x5a                  	// #90
 36c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000370 <_ZN11__sanitizer24SetAddressSpaceUnlimitedEv>:
 370:	str	x30, [sp, #-48]!
 374:	mov	x2, #0xffffffffffffffff    	// #-1
 378:	mov	w0, #0x9                   	// #9
 37c:	str	x2, [sp, #32]
 380:	add	x1, sp, #0x20
 384:	str	x2, [sp, #40]
 388:	bl	0 <setrlimit>
 38c:	cbnz	w0, 3f4 <_ZN11__sanitizer24SetAddressSpaceUnlimitedEv+0x84>
 390:	add	x1, sp, #0x10
 394:	mov	w0, #0x9                   	// #9
 398:	bl	0 <getrlimit>
 39c:	sxtw	x4, w0
 3a0:	cbnz	w0, 3b8 <_ZN11__sanitizer24SetAddressSpaceUnlimitedEv+0x48>
 3a4:	ldr	x0, [sp, #16]
 3a8:	cmn	x0, #0x1
 3ac:	b.ne	3d4 <_ZN11__sanitizer24SetAddressSpaceUnlimitedEv+0x64>  // b.any
 3b0:	ldr	x30, [sp], #48
 3b4:	ret
 3b8:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 3bc:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 3c0:	add	x2, x2, #0x0
 3c4:	add	x0, x0, #0x0
 3c8:	mov	x3, #0x0                   	// #0
 3cc:	mov	w1, #0x5a                  	// #90
 3d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3d4:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 3d8:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 3dc:	add	x2, x2, #0x0
 3e0:	add	x0, x0, #0x0
 3e4:	mov	x4, #0x0                   	// #0
 3e8:	mov	x3, #0x0                   	// #0
 3ec:	mov	w1, #0x84                  	// #132
 3f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3f4:	bl	0 <_ZN11__sanitizerL6setlimEim.part.0>

00000000000003f8 <_ZN11__sanitizer15SleepForSecondsEi>:
 3f8:	b	0 <sleep>
 3fc:	nop

0000000000000400 <_ZN11__sanitizer14SleepForMillisEi>:
 400:	mov	w1, #0x3e8                 	// #1000
 404:	mul	w0, w0, w1
 408:	b	0 <usleep>
 40c:	nop

0000000000000410 <_ZN11__sanitizer5AbortEv>:
 410:	stp	x19, x30, [sp, #-176]!
 414:	mov	w0, #0x6                   	// #6
 418:	bl	0 <_ZN11__sanitizer19GetHandleSignalModeEi>
 41c:	cbnz	w0, 424 <_ZN11__sanitizer5AbortEv+0x14>
 420:	bl	0 <abort>
 424:	add	x19, sp, #0x18
 428:	mov	x2, #0x98                  	// #152
 42c:	mov	w1, #0x0                   	// #0
 430:	mov	x0, x19
 434:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 438:	str	xzr, [sp, #24]
 43c:	mov	x1, x19
 440:	mov	x2, #0x0                   	// #0
 444:	mov	w0, #0x6                   	// #6
 448:	bl	0 <_ZN11__sanitizer18internal_sigactionEiPKvPv>
 44c:	bl	0 <abort>

0000000000000450 <_ZN11__sanitizer6AtexitEPFvvE>:
 450:	b	0 <atexit>
 454:	nop

0000000000000458 <_ZN11__sanitizer21SupportsColoredOutputEi>:
 458:	str	x30, [sp, #-16]!
 45c:	bl	0 <isatty>
 460:	cmp	w0, #0x0
 464:	cset	w0, ne  // ne = any
 468:	ldr	x30, [sp], #16
 46c:	ret

0000000000000470 <_ZN11__sanitizer23SetAlternateSignalStackEv>:
 470:	str	x30, [sp, #-64]!
 474:	mov	x0, #0x0                   	// #0
 478:	add	x1, sp, #0x10
 47c:	bl	0 <sigaltstack>
 480:	cbnz	w0, 4ec <_ZN11__sanitizer23SetAlternateSignalStackEv+0x7c>
 484:	ldr	w0, [sp, #24]
 488:	tbnz	w0, #1, 494 <_ZN11__sanitizer23SetAlternateSignalStackEv+0x24>
 48c:	ldr	x30, [sp], #64
 490:	ret
 494:	mov	w2, #0x0                   	// #0
 498:	adrp	x1, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 49c:	mov	x0, #0x10000               	// #65536
 4a0:	add	x1, x1, #0x0
 4a4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 4a8:	mov	x3, x0
 4ac:	mov	x2, #0x10000               	// #65536
 4b0:	add	x0, sp, #0x28
 4b4:	mov	x1, #0x0                   	// #0
 4b8:	str	x3, [sp, #40]
 4bc:	str	wzr, [sp, #48]
 4c0:	str	x2, [sp, #56]
 4c4:	bl	0 <sigaltstack>
 4c8:	sxtw	x4, w0
 4cc:	cbz	w0, 48c <_ZN11__sanitizer23SetAlternateSignalStackEv+0x1c>
 4d0:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 4d4:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 4d8:	add	x2, x2, #0x0
 4dc:	add	x0, x0, #0x0
 4e0:	mov	x3, #0x0                   	// #0
 4e4:	mov	w1, #0xbb                  	// #187
 4e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4ec:	sxtw	x4, w0
 4f0:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 4f4:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 4f8:	add	x2, x2, #0x0
 4fc:	add	x0, x0, #0x0
 500:	mov	x3, #0x0                   	// #0
 504:	mov	w1, #0xb0                  	// #176
 508:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 50c:	nop

0000000000000510 <_ZN11__sanitizer25UnsetAlternateSignalStackEv>:
 510:	mov	w3, #0x2                   	// #2
 514:	mov	x2, #0x10000               	// #65536
 518:	str	x30, [sp, #-64]!
 51c:	add	x1, sp, #0x28
 520:	add	x0, sp, #0x10
 524:	str	xzr, [sp, #16]
 528:	str	w3, [sp, #24]
 52c:	str	x2, [sp, #32]
 530:	bl	0 <sigaltstack>
 534:	cbnz	w0, 54c <_ZN11__sanitizer25UnsetAlternateSignalStackEv+0x3c>
 538:	ldr	x0, [sp, #40]
 53c:	ldr	x1, [sp, #56]
 540:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 544:	ldr	x30, [sp], #64
 548:	ret
 54c:	sxtw	x4, w0
 550:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 554:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 558:	add	x2, x2, #0x0
 55c:	add	x0, x0, #0x0
 560:	mov	x3, #0x0                   	// #0
 564:	mov	w1, #0xc3                  	// #195
 568:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 56c:	nop

0000000000000570 <_ZN11__sanitizer27InstallDeadlySignalHandlersEPFviPvS0_E>:
 570:	adrp	x1, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 574:	stp	x19, x30, [sp, #-16]!
 578:	mov	x19, x0
 57c:	ldr	x1, [x1]
 580:	ldrb	w0, [x1, #97]
 584:	cbnz	w0, 5d4 <_ZN11__sanitizer27InstallDeadlySignalHandlersEPFviPvS0_E+0x64>
 588:	mov	x1, x19
 58c:	mov	w0, #0xb                   	// #11
 590:	bl	30 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 594:	mov	x1, x19
 598:	mov	w0, #0x7                   	// #7
 59c:	bl	30 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 5a0:	mov	x1, x19
 5a4:	mov	w0, #0x6                   	// #6
 5a8:	bl	30 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 5ac:	mov	x1, x19
 5b0:	mov	w0, #0x8                   	// #8
 5b4:	bl	30 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 5b8:	mov	x1, x19
 5bc:	mov	w0, #0x4                   	// #4
 5c0:	bl	30 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 5c4:	mov	x1, x19
 5c8:	mov	w0, #0x5                   	// #5
 5cc:	ldp	x19, x30, [sp], #16
 5d0:	b	30 <_ZN11__sanitizerL21MaybeInstallSigactionEiPFviPvS0_E>
 5d4:	bl	470 <_ZN11__sanitizer23SetAlternateSignalStackEv>
 5d8:	b	588 <_ZN11__sanitizer27InstallDeadlySignalHandlersEPFviPvS0_E+0x18>
 5dc:	nop

00000000000005e0 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv>:
 5e0:	stp	x19, x20, [sp, #-32]!
 5e4:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 5e8:	mov	x19, x0
 5ec:	ldr	x20, [x20]
 5f0:	stp	x21, x30, [sp, #16]
 5f4:	ldr	x21, [x0, #16]
 5f8:	ldr	x0, [x20]
 5fc:	cbz	x0, 668 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x88>
 600:	ldr	x1, [x19, #32]
 604:	add	x21, x21, x0
 608:	mov	w0, #0x0                   	// #0
 60c:	cmp	x21, x1
 610:	b.ls	65c <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x7c>  // b.plast
 614:	mov	x2, #0xffff                	// #65535
 618:	add	x1, x1, x2
 61c:	ldr	x2, [x19, #16]
 620:	cmp	x2, x1
 624:	b.cs	65c <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x7c>  // b.hs, b.nlast
 628:	adrp	x1, 0 <_ZN11__sanitizer14si_SEGV_MAPERRE>
 62c:	mov	w0, #0x1                   	// #1
 630:	ldr	x2, [x19]
 634:	ldr	x1, [x1]
 638:	ldr	w2, [x2, #8]
 63c:	ldr	w1, [x1]
 640:	cmp	w2, w1
 644:	b.eq	65c <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x7c>  // b.none
 648:	adrp	x0, 0 <_ZN11__sanitizer14si_SEGV_ACCERRE>
 64c:	ldr	x0, [x0]
 650:	ldr	w0, [x0]
 654:	cmp	w0, w2
 658:	cset	w0, eq  // eq = none
 65c:	ldp	x21, x30, [sp, #16]
 660:	ldp	x19, x20, [sp], #32
 664:	ret
 668:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 66c:	str	x0, [x20]
 670:	b	600 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv+0x20>
 674:	nop

0000000000000678 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>:
 678:	stp	x19, x20, [sp, #-64]!
 67c:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 680:	mov	x19, x1
 684:	ldr	x20, [x20]
 688:	stp	x21, x22, [sp, #16]
 68c:	mov	x21, x0
 690:	ldr	x4, [x20]
 694:	str	x30, [sp, #32]
 698:	cbz	x4, 72c <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0xb4>
 69c:	add	x4, x4, x4, lsl #2
 6a0:	cmp	x19, x4, lsl #1
 6a4:	lsl	x4, x4, #1
 6a8:	b.cs	748 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0xd0>  // b.hs, b.nlast
 6ac:	add	x0, sp, #0x38
 6b0:	mov	w22, #0x0                   	// #0
 6b4:	bl	0 <pipe>
 6b8:	mov	w20, w0
 6bc:	cbz	w0, 6d4 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x5c>
 6c0:	mov	w0, w22
 6c4:	ldp	x21, x22, [sp, #16]
 6c8:	ldr	x30, [sp, #32]
 6cc:	ldp	x19, x20, [sp], #64
 6d0:	ret
 6d4:	ldr	w0, [sp, #60]
 6d8:	mov	x2, x19
 6dc:	mov	x1, x21
 6e0:	bl	0 <_ZN11__sanitizer14internal_writeEiPKvm>
 6e4:	mov	x21, x0
 6e8:	add	x1, sp, #0x34
 6ec:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 6f0:	tst	w0, #0xff
 6f4:	b.eq	764 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0xec>  // b.none
 6f8:	ldrsw	x4, [sp, #52]
 6fc:	mov	w22, w20
 700:	cmp	x4, #0xe
 704:	b.ne	780 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x108>  // b.any
 708:	ldr	w0, [sp, #56]
 70c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 710:	ldr	w0, [sp, #60]
 714:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 718:	mov	w0, w22
 71c:	ldp	x21, x22, [sp, #16]
 720:	ldr	x30, [sp, #32]
 724:	ldp	x19, x20, [sp], #64
 728:	ret
 72c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 730:	mov	x4, x0
 734:	str	x0, [x20]
 738:	add	x4, x4, x4, lsl #2
 73c:	cmp	x19, x4, lsl #1
 740:	lsl	x4, x4, #1
 744:	b.cc	6ac <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0x34>  // b.lo, b.ul, b.last
 748:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 74c:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 750:	mov	x3, x19
 754:	add	x2, x2, #0x0
 758:	add	x0, x0, #0x0
 75c:	mov	w1, #0x118                 	// #280
 760:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 764:	ldr	w0, [sp, #56]
 768:	cmp	x19, x21
 76c:	cset	w22, eq  // eq = none
 770:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 774:	ldr	w0, [sp, #60]
 778:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 77c:	b	718 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm+0xa0>
 780:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 784:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 788:	add	x2, x2, #0x0
 78c:	add	x0, x0, #0x0
 790:	mov	x3, #0xe                   	// #14
 794:	mov	w1, #0x121                 	// #289
 798:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 79c:	nop

00000000000007a0 <_ZN11__sanitizer28PlatformPrepareForSandboxingEP29__sanitizer_sandbox_arguments>:
 7a0:	b	0 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv>
 7a4:	nop

00000000000007a8 <_ZN11__sanitizer17GetNamedMappingFdEPKcm>:
 7a8:	adrp	x2, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 7ac:	stp	x19, x20, [sp, #-240]!
 7b0:	ldr	x2, [x2]
 7b4:	ldrb	w2, [x2, #215]
 7b8:	str	x30, [sp, #16]
 7bc:	cbz	w2, 894 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0xec>
 7c0:	mov	x20, x1
 7c4:	mov	x19, x0
 7c8:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 7cc:	cmp	x0, #0xbd
 7d0:	b.hi	83c <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0x94>  // b.pmore
 7d4:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 7d8:	mov	x3, x0
 7dc:	mov	x4, x19
 7e0:	add	x19, sp, #0x28
 7e4:	mov	x1, #0xc8                  	// #200
 7e8:	mov	x0, x19
 7ec:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 7f0:	add	x2, x2, #0x0
 7f4:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 7f8:	mov	w2, #0x1c0                 	// #448
 7fc:	mov	w1, #0x242                 	// #578
 800:	mov	x0, x19
 804:	bl	0 <shm_open>
 808:	mov	x1, x20
 80c:	mov	w20, w0
 810:	bl	0 <_ZN11__sanitizer18internal_ftruncateEim>
 814:	sxtw	x4, w0
 818:	cbnz	w0, 85c <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0xb4>
 81c:	mov	x0, x19
 820:	bl	0 <shm_unlink>
 824:	sxtw	x4, w0
 828:	cbnz	w0, 878 <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0xd0>
 82c:	mov	w0, w20
 830:	ldr	x30, [sp, #16]
 834:	ldp	x19, x20, [sp], #240
 838:	ret
 83c:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 840:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 844:	add	x2, x2, #0x0
 848:	add	x0, x0, #0x0
 84c:	mov	x4, #0x0                   	// #0
 850:	mov	x3, #0x0                   	// #0
 854:	mov	w1, #0x13c                 	// #316
 858:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 85c:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 860:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 864:	add	x2, x2, #0x0
 868:	add	x0, x0, #0x0
 86c:	mov	x3, #0x0                   	// #0
 870:	mov	w1, #0x142                 	// #322
 874:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 878:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 87c:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 880:	add	x2, x2, #0x0
 884:	add	x0, x0, #0x0
 888:	mov	x3, #0x0                   	// #0
 88c:	mov	w1, #0x144                 	// #324
 890:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 894:	mov	w20, #0xffffffff            	// #-1
 898:	b	82c <_ZN11__sanitizer17GetNamedMappingFdEPKcm+0x84>
 89c:	nop

00000000000008a0 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc>:
 8a0:	stp	x19, x20, [sp, #-64]!
 8a4:	mov	x19, x1
 8a8:	stp	x21, x22, [sp, #16]
 8ac:	mov	x21, x0
 8b0:	stp	x23, x30, [sp, #32]
 8b4:	cbz	x2, 940 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xa0>
 8b8:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 8bc:	mov	x0, x2
 8c0:	bl	7a8 <_ZN11__sanitizer17GetNamedMappingFdEPKcm>
 8c4:	cmn	w0, #0x1
 8c8:	ldr	x20, [x20]
 8cc:	mov	w23, #0x4012                	// #16402
 8d0:	mov	w3, #0x4032                	// #16434
 8d4:	mov	w22, w0
 8d8:	csel	w23, w23, w3, ne  // ne = any
 8dc:	ldr	x2, [x20]
 8e0:	cbz	x2, 958 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xb8>
 8e4:	neg	x6, x2
 8e8:	sub	x5, x2, #0x1
 8ec:	and	x0, x6, x21
 8f0:	tst	x5, x2
 8f4:	b.ne	978 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xd8>  // b.any
 8f8:	mov	w4, w22
 8fc:	mov	w3, w23
 900:	add	x1, x19, x5
 904:	mov	w2, #0x3                   	// #3
 908:	mov	x5, #0x0                   	// #0
 90c:	and	x1, x1, x6
 910:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 914:	add	x1, sp, #0x3c
 918:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 91c:	tst	w0, #0xff
 920:	b.ne	988 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0xe8>  // b.any
 924:	mov	x0, x19
 928:	bl	0 <_ZN11__sanitizer17IncreaseTotalMmapEm>
 92c:	mov	w0, #0x1                   	// #1
 930:	ldp	x21, x22, [sp, #16]
 934:	ldp	x23, x30, [sp, #32]
 938:	ldp	x19, x20, [sp], #64
 93c:	ret
 940:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 944:	mov	w23, #0x4032                	// #16434
 948:	mov	w22, #0xffffffff            	// #-1
 94c:	ldr	x20, [x20]
 950:	ldr	x2, [x20]
 954:	cbnz	x2, 8e4 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0x44>
 958:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 95c:	mov	x2, x0
 960:	str	x0, [x20]
 964:	neg	x6, x2
 968:	sub	x5, x2, #0x1
 96c:	and	x0, x6, x21
 970:	tst	x5, x2
 974:	b.eq	8f8 <_ZN11__sanitizer18MmapFixedNoReserveEmmPKc+0x58>  // b.none
 978:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 97c:	add	x0, x0, #0x0
 980:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 984:	bl	0 <_ZN11__sanitizer3DieEv>
 988:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 98c:	ldr	w5, [sp, #60]
 990:	mov	x4, x21
 994:	mov	x3, x19
 998:	ldr	x1, [x1]
 99c:	mov	x2, x19
 9a0:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 9a4:	add	x0, x0, #0x0
 9a8:	ldr	x1, [x1]
 9ac:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 9b0:	mov	w0, #0x0                   	// #0
 9b4:	ldp	x21, x22, [sp, #16]
 9b8:	ldp	x23, x30, [sp, #32]
 9bc:	ldp	x19, x20, [sp], #64
 9c0:	ret
 9c4:	nop

00000000000009c8 <_ZN11__sanitizer20ReservedAddressRange4InitEmPKcm>:
 9c8:	stp	x19, x20, [sp, #-32]!
 9cc:	mov	x19, x0
 9d0:	mov	x20, x2
 9d4:	stp	x21, x30, [sp, #16]
 9d8:	mov	x21, x1
 9dc:	cbz	x3, a0c <_ZN11__sanitizer20ReservedAddressRange4InitEmPKcm+0x44>
 9e0:	mov	x0, x3
 9e4:	mov	x5, #0x0                   	// #0
 9e8:	mov	w4, #0xffffffff            	// #-1
 9ec:	mov	w3, #0x4032                	// #16434
 9f0:	mov	w2, #0x0                   	// #0
 9f4:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 9f8:	stp	x0, x21, [x19]
 9fc:	str	x20, [x19, #16]
 a00:	ldp	x21, x30, [sp, #16]
 a04:	ldp	x19, x20, [sp], #32
 a08:	ret
 a0c:	mov	x5, #0x0                   	// #0
 a10:	mov	w4, #0xffffffff            	// #-1
 a14:	mov	w3, #0x4022                	// #16418
 a18:	mov	w2, #0x0                   	// #0
 a1c:	mov	x0, #0x0                   	// #0
 a20:	bl	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 a24:	stp	x0, x21, [x19]
 a28:	str	x20, [x19, #16]
 a2c:	ldp	x21, x30, [sp, #16]
 a30:	ldp	x19, x20, [sp], #32
 a34:	ret

0000000000000a38 <_ZN11__sanitizer20ReservedAddressRange3MapEmm>:
 a38:	mov	x0, x1
 a3c:	mov	x1, x2
 a40:	b	0 <_ZN11__sanitizer26MmapFixedOrDieOnFatalErrorEmm>
 a44:	nop

0000000000000a48 <_ZN11__sanitizer20ReservedAddressRange8MapOrDieEmm>:
 a48:	mov	x0, x1
 a4c:	mov	x1, x2
 a50:	b	0 <_ZN11__sanitizer14MmapFixedOrDieEmm>
 a54:	nop

0000000000000a58 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm>:
 a58:	ldr	x4, [x0, #8]
 a5c:	str	x30, [sp, #-16]!
 a60:	mov	x5, x0
 a64:	cmp	x2, x4
 a68:	b.hi	ac4 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x6c>  // b.pmore
 a6c:	mov	x0, x1
 a70:	ldr	x1, [x5]
 a74:	cmp	x1, x0
 a78:	b.eq	aa0 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x48>  // b.none
 a7c:	add	x1, x1, x4
 a80:	add	x3, x2, x0
 a84:	cmp	x3, x1
 a88:	b.ne	ae0 <_ZN11__sanitizer20ReservedAddressRange5UnmapEmm+0x88>  // b.any
 a8c:	ldr	x30, [sp], #16
 a90:	sub	x4, x4, x2
 a94:	str	x4, [x5, #8]
 a98:	mov	x1, x2
 a9c:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 aa0:	ldr	x30, [sp], #16
 aa4:	cmp	x2, x4
 aa8:	add	x1, x2, x0
 aac:	sub	x4, x4, x2
 ab0:	csel	x1, x1, xzr, ne  // ne = any
 ab4:	str	x1, [x5]
 ab8:	str	x4, [x5, #8]
 abc:	mov	x1, x2
 ac0:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 ac4:	mov	x3, x2
 ac8:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 acc:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 ad0:	add	x0, x0, #0x0
 ad4:	add	x2, x2, #0x0
 ad8:	mov	w1, #0x175                 	// #373
 adc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 ae0:	mov	x4, x1
 ae4:	adrp	x2, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 ae8:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 aec:	add	x2, x2, #0x0
 af0:	add	x0, x0, #0x0
 af4:	mov	w1, #0x17a                 	// #378
 af8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 afc:	nop

0000000000000b00 <_ZN11__sanitizer17MmapFixedNoAccessEmmPKc>:
 b00:	stp	x19, x20, [sp, #-32]!
 b04:	mov	x19, x0
 b08:	mov	x20, x1
 b0c:	str	x30, [sp, #16]
 b10:	cbz	x2, b4c <_ZN11__sanitizer17MmapFixedNoAccessEmmPKc+0x4c>
 b14:	mov	x0, x2
 b18:	bl	7a8 <_ZN11__sanitizer17GetNamedMappingFdEPKcm>
 b1c:	mov	w4, w0
 b20:	mov	w0, #0x4032                	// #16434
 b24:	cmn	w4, #0x1
 b28:	mov	x1, x20
 b2c:	mov	w3, #0x4012                	// #16402
 b30:	csel	w3, w3, w0, ne  // ne = any
 b34:	mov	x0, x19
 b38:	mov	x5, #0x0                   	// #0
 b3c:	ldr	x30, [sp, #16]
 b40:	mov	w2, #0x0                   	// #0
 b44:	ldp	x19, x20, [sp], #32
 b48:	b	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 b4c:	mov	x1, x20
 b50:	mov	x0, x19
 b54:	ldr	x30, [sp, #16]
 b58:	mov	w3, #0x4032                	// #16434
 b5c:	ldp	x19, x20, [sp], #32
 b60:	mov	w4, #0xffffffff            	// #-1
 b64:	mov	x5, #0x0                   	// #0
 b68:	mov	w2, #0x0                   	// #0
 b6c:	b	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>

0000000000000b70 <_ZN11__sanitizer12MmapNoAccessEm>:
 b70:	mov	x1, x0
 b74:	mov	x5, #0x0                   	// #0
 b78:	mov	w4, #0xffffffff            	// #-1
 b7c:	mov	w3, #0x4022                	// #16418
 b80:	mov	w2, #0x0                   	// #0
 b84:	mov	x0, #0x0                   	// #0
 b88:	b	0 <_ZN11__sanitizer13internal_mmapEPvmiiim>
 b8c:	nop

0000000000000b90 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm>:
 b90:	adrp	x3, 0 <real_pthread_attr_getstack>
 b94:	ldr	x3, [x3]
 b98:	cbz	x3, ba0 <_ZN11__sanitizer24my_pthread_attr_getstackEPvPS0_Pm+0x10>
 b9c:	b	0 <real_pthread_attr_getstack>
 ba0:	b	0 <pthread_attr_getstack>
 ba4:	nop

0000000000000ba8 <_ZN11__sanitizer15AdjustStackSizeEPv>:
 ba8:	adrp	x1, 0 <real_pthread_attr_getstack>
 bac:	stp	x19, x20, [sp, #-48]!
 bb0:	mov	x20, x0
 bb4:	ldr	x1, [x1]
 bb8:	str	x30, [sp, #16]
 bbc:	stp	xzr, xzr, [sp, #32]
 bc0:	add	x2, sp, #0x28
 bc4:	cbz	x1, c40 <_ZN11__sanitizer15AdjustStackSizeEPv+0x98>
 bc8:	add	x1, sp, #0x20
 bcc:	bl	0 <real_pthread_attr_getstack>
 bd0:	ldr	x1, [sp, #32]
 bd4:	cbz	x1, be4 <_ZN11__sanitizer15AdjustStackSizeEPv+0x3c>
 bd8:	ldr	x0, [sp, #40]
 bdc:	cmn	x1, x0
 be0:	b.ne	c08 <_ZN11__sanitizer15AdjustStackSizeEPv+0x60>  // b.any
 be4:	bl	0 <_ZN11__sanitizer10GetTlsSizeEv>
 be8:	add	x19, x0, #0x20, lsl #12
 bec:	ldr	x1, [sp, #40]
 bf0:	cmp	x1, #0x0
 bf4:	ccmp	x19, x1, #0x0, ne  // ne = any
 bf8:	b.hi	c4c <_ZN11__sanitizer15AdjustStackSizeEPv+0xa4>  // b.pmore
 bfc:	ldr	x30, [sp, #16]
 c00:	ldp	x19, x20, [sp], #48
 c04:	ret
 c08:	bl	0 <_ZN11__sanitizer10GetTlsSizeEv>
 c0c:	add	x2, x0, #0x20, lsl #12
 c10:	ldr	x1, [sp, #40]
 c14:	cmp	x2, x1
 c18:	b.ls	bfc <_ZN11__sanitizer15AdjustStackSizeEPv+0x54>  // b.plast
 c1c:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 c20:	add	x0, x0, #0x0
 c24:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 c28:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 c2c:	add	x0, x0, #0x0
 c30:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 c34:	ldr	x30, [sp, #16]
 c38:	ldp	x19, x20, [sp], #48
 c3c:	ret
 c40:	add	x1, sp, #0x20
 c44:	bl	0 <pthread_attr_getstack>
 c48:	b	bd0 <_ZN11__sanitizer15AdjustStackSizeEPv+0x28>
 c4c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 c50:	ldr	x0, [x0]
 c54:	ldr	w0, [x0]
 c58:	cbnz	w0, c74 <_ZN11__sanitizer15AdjustStackSizeEPv+0xcc>
 c5c:	mov	x1, x19
 c60:	mov	x0, x20
 c64:	bl	0 <pthread_attr_setstacksize>
 c68:	ldr	x30, [sp, #16]
 c6c:	ldp	x19, x20, [sp], #48
 c70:	ret
 c74:	mov	x2, x19
 c78:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 c7c:	add	x0, x0, #0x0
 c80:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 c84:	b	c5c <_ZN11__sanitizer15AdjustStackSizeEPv+0xb4>

0000000000000c88 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii>:
 c88:	stp	x19, x20, [sp, #-80]!
 c8c:	mov	w20, w4
 c90:	stp	x21, x22, [sp, #16]
 c94:	mov	w22, w2
 c98:	mov	w21, w3
 c9c:	stp	x23, x24, [sp, #32]
 ca0:	mov	x23, x0
 ca4:	mov	x24, x1
 ca8:	str	x30, [sp, #48]
 cac:	bl	0 <_ZN11__sanitizer13internal_forkEv>
 cb0:	mov	w19, w0
 cb4:	cmp	w0, #0x0
 cb8:	b.lt	d08 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x80>  // b.tstop
 cbc:	b.eq	d30 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0xa8>  // b.none
 cc0:	cmn	w22, #0x1
 cc4:	b.eq	cd0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x48>  // b.none
 cc8:	mov	w0, w22
 ccc:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 cd0:	cmn	w21, #0x1
 cd4:	b.eq	ce0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x58>  // b.none
 cd8:	mov	w0, w21
 cdc:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 ce0:	cmn	w20, #0x1
 ce4:	b.eq	cf0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x68>  // b.none
 ce8:	mov	w0, w20
 cec:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 cf0:	mov	w0, w19
 cf4:	ldp	x21, x22, [sp, #16]
 cf8:	ldp	x23, x24, [sp, #32]
 cfc:	ldr	x30, [sp, #48]
 d00:	ldp	x19, x20, [sp], #80
 d04:	ret
 d08:	add	x1, sp, #0x4c
 d0c:	sxtw	x0, w0
 d10:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 d14:	tst	w0, #0xff
 d18:	b.eq	cc0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x38>  // b.none
 d1c:	ldr	w1, [sp, #76]
 d20:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 d24:	add	x0, x0, #0x0
 d28:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 d2c:	b	cc0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x38>
 d30:	cmn	w22, #0x1
 d34:	b.eq	d50 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0xc8>  // b.none
 d38:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 d3c:	mov	w1, #0x0                   	// #0
 d40:	mov	w0, w22
 d44:	bl	0 <_ZN11__sanitizer13internal_dup2Eii>
 d48:	mov	w0, w22
 d4c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 d50:	cmn	w21, #0x1
 d54:	b.eq	d74 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0xec>  // b.none
 d58:	mov	w0, #0x1                   	// #1
 d5c:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 d60:	mov	w1, #0x1                   	// #1
 d64:	mov	w0, w21
 d68:	bl	0 <_ZN11__sanitizer13internal_dup2Eii>
 d6c:	mov	w0, w21
 d70:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 d74:	cmn	w20, #0x1
 d78:	b.eq	d98 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x110>  // b.none
 d7c:	mov	w0, #0x2                   	// #2
 d80:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 d84:	mov	w1, #0x2                   	// #2
 d88:	mov	w0, w20
 d8c:	bl	0 <_ZN11__sanitizer13internal_dup2Eii>
 d90:	mov	w0, w20
 d94:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 d98:	mov	w0, #0x4                   	// #4
 d9c:	bl	0 <sysconf>
 da0:	mov	x19, x0
 da4:	cmp	w0, #0x2
 da8:	b.le	dc0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x138>
 dac:	mov	w0, w19
 db0:	sub	w19, w19, #0x1
 db4:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 db8:	cmp	w19, #0x2
 dbc:	b.ne	dac <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii+0x124>  // b.any
 dc0:	mov	x1, x24
 dc4:	mov	x0, x23
 dc8:	bl	0 <execv>
 dcc:	mov	w0, #0x1                   	// #1
 dd0:	bl	0 <_ZN11__sanitizer14internal__exitEi>
 dd4:	nop

0000000000000dd8 <_ZN11__sanitizer16IsProcessRunningEi>:
 dd8:	stp	x19, x30, [sp, #-32]!
 ddc:	mov	w2, #0x1                   	// #1
 de0:	add	x1, sp, #0x18
 de4:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
 de8:	add	x1, sp, #0x1c
 dec:	mov	x19, x0
 df0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 df4:	cmp	x19, #0x0
 df8:	cset	w19, eq  // eq = none
 dfc:	tst	w0, #0xff
 e00:	b.ne	e10 <_ZN11__sanitizer16IsProcessRunningEi+0x38>  // b.any
 e04:	mov	w0, w19
 e08:	ldp	x19, x30, [sp], #32
 e0c:	ret
 e10:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 e14:	mov	w19, #0x0                   	// #0
 e18:	ldr	x0, [x0]
 e1c:	ldr	w0, [x0]
 e20:	cbz	w0, e04 <_ZN11__sanitizer16IsProcessRunningEi+0x2c>
 e24:	ldr	w1, [sp, #28]
 e28:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 e2c:	add	x0, x0, #0x0
 e30:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 e34:	mov	w0, w19
 e38:	ldp	x19, x30, [sp], #32
 e3c:	ret

0000000000000e40 <_ZN11__sanitizer14WaitForProcessEi>:
 e40:	stp	x19, x30, [sp, #-32]!
 e44:	mov	w2, #0x0                   	// #0
 e48:	add	x1, sp, #0x18
 e4c:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
 e50:	add	x1, sp, #0x1c
 e54:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
 e58:	tst	w0, #0xff
 e5c:	b.ne	e70 <_ZN11__sanitizer14WaitForProcessEi+0x30>  // b.any
 e60:	ldr	w19, [sp, #24]
 e64:	mov	w0, w19
 e68:	ldp	x19, x30, [sp], #32
 e6c:	ret
 e70:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 e74:	mov	w19, #0xffffffff            	// #-1
 e78:	ldr	x0, [x0]
 e7c:	ldr	w0, [x0]
 e80:	cbz	w0, e64 <_ZN11__sanitizer14WaitForProcessEi+0x24>
 e84:	ldr	w1, [sp, #28]
 e88:	adrp	x0, 0 <_ZN11__sanitizerL6setlimEim.part.0>
 e8c:	add	x0, x0, #0x0
 e90:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 e94:	b	e64 <_ZN11__sanitizer14WaitForProcessEi+0x24>

0000000000000e98 <_ZN11__sanitizer15IsStateDetachedEi>:
 e98:	cmp	w0, #0x1
 e9c:	cset	w0, eq  // eq = none
 ea0:	ret

sanitizer_printf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>:
   0:	stp	x19, x20, [sp, #-320]!
   4:	and	w3, w3, #0xff
   8:	cmp	w3, #0xa
   c:	cset	w8, ne  // ne = any
  10:	stp	x21, x22, [sp, #16]
  14:	cmp	w8, #0x0
  18:	stp	x23, x24, [sp, #32]
  1c:	ccmp	w3, #0x10, #0x4, ne  // ne = any
  20:	stp	x25, x26, [sp, #48]
  24:	str	x30, [sp, #64]
  28:	b.ne	21c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x21c>  // b.any
  2c:	and	w24, w6, #0xff
  30:	cmp	w8, #0x0
  34:	ccmp	w24, #0x0, #0x4, ne  // ne = any
  38:	b.ne	23c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x23c>  // b.any
  3c:	cmp	x2, #0x0
  40:	ccmp	w24, #0x0, #0x4, eq  // eq = none
  44:	b.ne	24c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x24c>  // b.any
  48:	and	w23, w4, #0xff
  4c:	cmp	w23, #0x1d
  50:	b.hi	25c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x25c>  // b.pmore
  54:	cmp	w23, #0x0
  58:	mov	x19, x0
  5c:	sub	w0, w23, #0x1
  60:	ccmp	w24, #0x0, #0x4, ne  // ne = any
  64:	and	w0, w0, #0xff
  68:	and	w25, w5, #0xff
  6c:	csel	w23, w0, w23, ne  // ne = any
  70:	cmp	w24, #0x0
  74:	mov	x20, x1
  78:	and	w26, w7, #0xff
  7c:	ccmp	w25, #0x0, #0x4, ne  // ne = any
  80:	mov	w21, #0x0                   	// #0
  84:	b.ne	d4 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0xd4>  // b.any
  88:	add	x22, sp, #0x50
  8c:	and	x3, x3, #0xff
  90:	mov	x10, x22
  94:	mov	w0, #0x0                   	// #0
  98:	udiv	x11, x2, x3
  9c:	mov	w8, w0
  a0:	cmp	x3, x2
  a4:	add	w0, w0, #0x1
  a8:	msub	x12, x11, x3, x2
  ac:	mov	x2, x11
  b0:	str	x12, [x10]
  b4:	b.hi	fc <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0xfc>  // b.pmore
  b8:	add	x10, x10, #0x8
  bc:	cmp	w0, #0x1e
  c0:	b.ne	98 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x98>  // b.any
  c4:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
  c8:	add	x0, x0, #0x0
  cc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  d0:	bl	0 <_ZN11__sanitizer3DieEv>
  d4:	ldr	x9, [x19]
  d8:	mov	w21, #0x1                   	// #1
  dc:	cmp	x1, x9
  e0:	b.ls	88 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x88>  // b.plast
  e4:	mov	w0, #0x2d                  	// #45
  e8:	strb	w0, [x9]
  ec:	ldr	x9, [x19]
  f0:	add	x9, x9, #0x1
  f4:	str	x9, [x19]
  f8:	b	88 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x88>
  fc:	cmp	w0, w23
 100:	b.lt	200 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x200>  // b.tstop
 104:	ldr	x9, [x19]
 108:	add	x0, x22, w8, sxtw #3
 10c:	mov	w3, #0x20                  	// #32
 110:	mov	w2, #0x30                  	// #48
 114:	nop
 118:	ldr	x1, [x0]
 11c:	cbnz	x1, 22c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x22c>
 120:	cmp	w8, #0x0
 124:	ccmp	w25, #0x0, #0x0, ne  // ne = any
 128:	csel	w1, w3, w2, eq  // eq = none
 12c:	cmp	x20, x9
 130:	b.ls	144 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x144>  // b.plast
 134:	strb	w1, [x9]
 138:	ldr	x9, [x19]
 13c:	add	x9, x9, #0x1
 140:	str	x9, [x19]
 144:	sub	w8, w8, #0x1
 148:	add	w21, w21, #0x1
 14c:	cmn	w8, #0x1
 150:	sub	x0, x0, #0x8
 154:	b.ne	118 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x118>  // b.any
 158:	eor	w25, w25, #0x1
 15c:	tst	w24, w25
 160:	b.eq	1e4 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1e4>  // b.none
 164:	cmp	x20, x9
 168:	b.hi	26c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x26c>  // b.pmore
 16c:	add	w21, w21, #0x1
 170:	cmn	w8, #0x1
 174:	b.eq	1e4 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1e4>  // b.none
 178:	cmp	w26, #0x0
 17c:	sub	w3, w8, #0x1
 180:	mov	w4, #0x41                  	// #65
 184:	mov	w0, #0x61                  	// #97
 188:	csel	w4, w4, w0, ne  // ne = any
 18c:	sxtw	x3, w3
 190:	sub	w4, w4, #0xa
 194:	mov	x5, #0xfffffffffffffffe    	// #-2
 198:	add	x0, x22, x3, lsl #3
 19c:	ldrb	w1, [x0, #8]
 1a0:	add	w0, w1, #0x30
 1a4:	add	w2, w1, w4
 1a8:	cmp	w1, #0x9
 1ac:	and	w0, w0, #0xff
 1b0:	and	w2, w2, #0xff
 1b4:	csel	w2, w2, w0, hi  // hi = pmore
 1b8:	cmp	x20, x9
 1bc:	b.ls	1d0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x1d0>  // b.plast
 1c0:	strb	w2, [x9]
 1c4:	ldr	x9, [x19]
 1c8:	add	x9, x9, #0x1
 1cc:	str	x9, [x19]
 1d0:	sub	x3, x3, #0x1
 1d4:	cmp	x3, x5
 1d8:	b.ne	198 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x198>  // b.any
 1dc:	add	w21, w21, #0x1
 1e0:	add	w21, w21, w8
 1e4:	mov	w0, w21
 1e8:	ldp	x21, x22, [sp, #16]
 1ec:	ldp	x23, x24, [sp, #32]
 1f0:	ldp	x25, x26, [sp, #48]
 1f4:	ldr	x30, [sp, #64]
 1f8:	ldp	x19, x20, [sp], #320
 1fc:	ret
 200:	sub	w2, w23, w0
 204:	mov	w1, #0x0                   	// #0
 208:	add	x0, x22, w0, sxtw #3
 20c:	sbfiz	x2, x2, #3, #32
 210:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 214:	sub	w8, w23, #0x1
 218:	b	104 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x104>
 21c:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 220:	add	x0, x0, #0x0
 224:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 228:	bl	0 <_ZN11__sanitizer3DieEv>
 22c:	eor	w25, w25, #0x1
 230:	tst	w24, w25
 234:	b.eq	178 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x178>  // b.none
 238:	b	164 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x164>
 23c:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 240:	add	x0, x0, #0x0
 244:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 248:	bl	0 <_ZN11__sanitizer3DieEv>
 24c:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 250:	add	x0, x0, #0x0
 254:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 258:	bl	0 <_ZN11__sanitizer3DieEv>
 25c:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 260:	add	x0, x0, #0x0
 264:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 268:	bl	0 <_ZN11__sanitizer3DieEv>
 26c:	mov	w0, #0x2d                  	// #45
 270:	strb	w0, [x9]
 274:	ldr	x9, [x19]
 278:	add	x9, x9, #0x1
 27c:	str	x9, [x19]
 280:	b	16c <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb+0x16c>
 284:	nop

0000000000000288 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>:
 288:	stp	x19, x20, [sp, #-112]!
 28c:	stp	x23, x24, [sp, #32]
 290:	stp	x27, x28, [sp, #64]
 294:	str	x30, [sp, #80]
 298:	str	x0, [sp, #104]
 29c:	cbz	x2, 8c8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x640>
 2a0:	cmp	w1, #0x0
 2a4:	b.le	8e0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x658>
 2a8:	ldrb	w4, [x2]
 2ac:	sxtw	x19, w1
 2b0:	sub	x28, x19, #0x1
 2b4:	mov	x20, x0
 2b8:	add	x28, x0, x28
 2bc:	cbz	w4, 9a4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x71c>
 2c0:	stp	x21, x22, [sp, #16]
 2c4:	adrp	x21, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 2c8:	add	x0, x21, #0x0
 2cc:	mov	w27, #0x1                   	// #1
 2d0:	mov	w24, #0x0                   	// #0
 2d4:	sub	w27, w27, w0
 2d8:	stp	x25, x26, [sp, #48]
 2dc:	ldr	w26, [x3, #24]
 2e0:	ldp	x25, x22, [x3]
 2e4:	b	31c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x94>
 2e8:	ldr	x0, [sp, #104]
 2ec:	cmp	x28, x0
 2f0:	b.ls	304 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x7c>  // b.plast
 2f4:	strb	w4, [x0]
 2f8:	ldr	x0, [sp, #104]
 2fc:	add	x0, x0, #0x1
 300:	str	x0, [sp, #104]
 304:	mov	x0, x23
 308:	add	w24, w24, #0x1
 30c:	mov	x23, x2
 310:	mov	x2, x0
 314:	ldrb	w4, [x23, #1]
 318:	cbz	w4, 4b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x230>
 31c:	cmp	w4, #0x25
 320:	add	x23, x2, #0x1
 324:	b.ne	2e8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x60>  // b.any
 328:	ldrb	w1, [x2, #1]
 32c:	cmp	w1, #0x2d
 330:	mov	w3, w1
 334:	b.ne	340 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xb8>  // b.any
 338:	ldrb	w3, [x2, #2]
 33c:	add	x23, x2, #0x2
 340:	sub	w0, w3, #0x30
 344:	mov	w4, #0x0                   	// #0
 348:	and	w0, w0, #0xff
 34c:	cmp	w0, #0x9
 350:	cset	w6, ls  // ls = plast
 354:	cmp	w3, #0x30
 358:	cset	w5, eq  // eq = none
 35c:	cmp	w0, #0x9
 360:	b.ls	3cc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x144>  // b.plast
 364:	cmp	w3, #0x2e
 368:	mov	w8, #0x1                   	// #1
 36c:	mov	w2, #0xffffffff            	// #-1
 370:	b.eq	410 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x188>  // b.none
 374:	cmp	w3, #0x7a
 378:	cinc	x23, x23, eq  // eq = none
 37c:	cset	w7, eq  // eq = none
 380:	ldrb	w3, [x23]
 384:	b.eq	390 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x108>  // b.none
 388:	cmp	w3, #0x6c
 38c:	b.eq	42c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1a4>  // b.none
 390:	cmp	w1, #0x2d
 394:	orr	w6, w6, w7
 398:	ccmp	w8, #0x0, #0x4, ne  // ne = any
 39c:	mov	w9, #0x0                   	// #0
 3a0:	b.ne	458 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x1d0>  // b.any
 3a4:	cmp	w3, #0x73
 3a8:	b.eq	660 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3d8>  // b.none
 3ac:	adrp	x2, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 3b0:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 3b4:	add	x2, x2, #0x0
 3b8:	add	x0, x0, #0x0
 3bc:	mov	x4, #0x0                   	// #0
 3c0:	mov	x3, #0x0                   	// #0
 3c4:	mov	w1, #0xa9                  	// #169
 3c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3cc:	add	w4, w4, w4, lsl #2
 3d0:	add	w4, w3, w4, lsl #1
 3d4:	ldrb	w3, [x23, #1]!
 3d8:	sub	w4, w4, #0x30
 3dc:	sub	w2, w3, #0x30
 3e0:	and	w2, w2, #0xff
 3e4:	cmp	w2, #0x9
 3e8:	b.hi	364 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xdc>  // b.pmore
 3ec:	add	w4, w4, w4, lsl #2
 3f0:	add	w4, w3, w4, lsl #1
 3f4:	ldrb	w3, [x23, #1]!
 3f8:	sub	w4, w4, #0x30
 3fc:	sub	w2, w3, #0x30
 400:	and	w2, w2, #0xff
 404:	cmp	w2, #0x9
 408:	b.ls	3cc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x144>  // b.plast
 40c:	b	364 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xdc>
 410:	ldrb	w3, [x23, #1]
 414:	cmp	w3, #0x2a
 418:	b.eq	7cc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x544>  // b.none
 41c:	ldrb	w3, [x23]
 420:	mov	w7, #0x0                   	// #0
 424:	cmp	w3, #0x6c
 428:	b.ne	390 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x108>  // b.any
 42c:	ldrb	w9, [x23, #1]
 430:	cmp	w9, #0x6c
 434:	b.ne	390 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x108>  // b.any
 438:	cmp	w1, #0x2d
 43c:	mov	w7, #0x1                   	// #1
 440:	ldrb	w3, [x23, #2]
 444:	mov	w6, w7
 448:	add	x23, x23, #0x2
 44c:	mov	w9, w7
 450:	ccmp	w8, #0x0, #0x4, ne  // ne = any
 454:	b.eq	3a4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x11c>  // b.none
 458:	cmp	w3, #0x64
 45c:	b.eq	630 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3a8>  // b.none
 460:	b.hi	4f4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x26c>  // b.pmore
 464:	cmp	w3, #0x58
 468:	b.eq	5e4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x35c>  // b.none
 46c:	cmp	w3, #0x63
 470:	b.ne	57c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2f4>  // b.any
 474:	cbnz	w6, 5b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x330>
 478:	tbnz	w26, #31, 77c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4f4>
 47c:	add	x0, x25, #0xb
 480:	mov	x1, x25
 484:	and	x25, x0, #0xfffffffffffffff8
 488:	ldr	x0, [sp, #104]
 48c:	cmp	x28, x0
 490:	b.ls	4a8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x220>  // b.plast
 494:	ldr	w1, [x1]
 498:	strb	w1, [x0]
 49c:	ldr	x0, [sp, #104]
 4a0:	add	x0, x0, #0x1
 4a4:	str	x0, [sp, #104]
 4a8:	add	w24, w24, #0x1
 4ac:	add	x2, x23, #0x1
 4b0:	ldrb	w4, [x23, #1]
 4b4:	cbnz	w4, 31c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x94>
 4b8:	ldp	x21, x22, [sp, #16]
 4bc:	ldp	x25, x26, [sp, #48]
 4c0:	ldr	x0, [sp, #104]
 4c4:	cmp	x28, x0
 4c8:	b.cc	9ac <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x724>  // b.lo, b.ul, b.last
 4cc:	add	x19, x20, x19
 4d0:	cmp	x0, x19
 4d4:	b.cs	4dc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x254>  // b.hs, b.nlast
 4d8:	strb	wzr, [x0]
 4dc:	mov	w0, w24
 4e0:	ldp	x23, x24, [sp, #32]
 4e4:	ldp	x27, x28, [sp, #64]
 4e8:	ldr	x30, [sp, #80]
 4ec:	ldp	x19, x20, [sp], #112
 4f0:	ret
 4f4:	cmp	w3, #0x70
 4f8:	b.ne	5b0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x328>  // b.any
 4fc:	cbnz	w6, 5b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x330>
 500:	tbnz	w26, #31, 79c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x514>
 504:	add	x0, x25, #0xf
 508:	mov	x2, x25
 50c:	and	x25, x0, #0xfffffffffffffff8
 510:	ldr	x2, [x2]
 514:	add	x1, x21, #0x0
 518:	ldr	x0, [sp, #104]
 51c:	mov	w3, #0x30                  	// #48
 520:	cmp	x28, x0
 524:	b.ls	7bc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x534>  // b.plast
 528:	strb	w3, [x0]
 52c:	add	w8, w27, w1
 530:	ldrb	w3, [x1, #1]!
 534:	ldr	x0, [sp, #104]
 538:	add	x0, x0, #0x1
 53c:	str	x0, [sp, #104]
 540:	cbnz	w3, 520 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x298>
 544:	mov	x1, x28
 548:	add	x0, sp, #0x68
 54c:	mov	w7, #0x0                   	// #0
 550:	mov	w6, #0x0                   	// #0
 554:	mov	w5, #0x1                   	// #1
 558:	mov	w4, #0xc                   	// #12
 55c:	mov	w3, #0x10                  	// #16
 560:	str	w8, [sp, #100]
 564:	bl	0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 568:	ldr	w8, [sp, #100]
 56c:	add	x2, x23, #0x1
 570:	add	w8, w0, w8
 574:	add	w24, w24, w8
 578:	b	314 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x8c>
 57c:	cmp	w3, #0x25
 580:	b.ne	5b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x330>  // b.any
 584:	cbnz	w6, 5b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x330>
 588:	ldr	x0, [sp, #104]
 58c:	cmp	x28, x0
 590:	b.ls	4a8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x220>  // b.plast
 594:	strb	w3, [x0]
 598:	add	w24, w24, #0x1
 59c:	add	x2, x23, #0x1
 5a0:	ldr	x0, [sp, #104]
 5a4:	add	x0, x0, #0x1
 5a8:	str	x0, [sp, #104]
 5ac:	b	4b0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x228>
 5b0:	cmp	w3, #0x6f
 5b4:	b.hi	5c8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x340>  // b.pmore
 5b8:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 5bc:	add	x0, x0, #0x0
 5c0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 5c4:	bl	0 <_ZN11__sanitizer3DieEv>
 5c8:	cmp	w3, #0x78
 5cc:	b.eq	5e4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x35c>  // b.none
 5d0:	b.hi	5b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x330>  // b.pmore
 5d4:	cmp	w3, #0x73
 5d8:	b.eq	660 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3d8>  // b.none
 5dc:	cmp	w3, #0x75
 5e0:	b.ne	5b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x330>  // b.any
 5e4:	cbz	w9, 744 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4bc>
 5e8:	tbnz	w26, #31, 888 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x600>
 5ec:	add	x1, x25, #0xf
 5f0:	mov	x0, x25
 5f4:	and	x25, x1, #0xfffffffffffffff8
 5f8:	ldr	x2, [x0]
 5fc:	cmp	w3, #0x58
 600:	cset	w7, eq  // eq = none
 604:	cmp	w3, #0x75
 608:	mov	w0, #0x10                  	// #16
 60c:	mov	w3, #0xa                   	// #10
 610:	csel	w3, w3, w0, eq  // eq = none
 614:	mov	w6, #0x0                   	// #0
 618:	mov	x1, x28
 61c:	add	x0, sp, #0x68
 620:	bl	0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 624:	add	w24, w24, w0
 628:	add	x2, x23, #0x1
 62c:	b	314 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x8c>
 630:	cbz	w9, 760 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4d8>
 634:	tbnz	w26, #31, 8a8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x620>
 638:	add	x1, x25, #0xf
 63c:	mov	x0, x25
 640:	and	x25, x1, #0xfffffffffffffff8
 644:	ldr	x6, [x0]
 648:	cmp	x6, #0x0
 64c:	cneg	x2, x6, lt  // lt = tstop
 650:	mov	w7, #0x0                   	// #0
 654:	lsr	x6, x6, #63
 658:	mov	w3, #0xa                   	// #10
 65c:	b	618 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x390>
 660:	cbnz	w7, 5b8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x330>
 664:	cmp	w1, #0x2d
 668:	ccmp	w0, #0x9, #0x2, ne  // ne = any
 66c:	b.ls	80c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x584>  // b.plast
 670:	cmp	w1, #0x2d
 674:	cneg	w4, w4, eq  // eq = none
 678:	tbnz	w26, #31, 834 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x5ac>
 67c:	add	x1, x25, #0xf
 680:	mov	x0, x25
 684:	and	x25, x1, #0xfffffffffffffff8
 688:	ldr	x5, [x0]
 68c:	cbz	x5, 858 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x5d0>
 690:	ldrb	w3, [x5]
 694:	cbz	w3, 990 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x708>
 698:	cbz	w2, 99c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x714>
 69c:	mov	w6, #0x0                   	// #0
 6a0:	ldr	x0, [sp, #104]
 6a4:	b	6b4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x42c>
 6a8:	cmp	w1, w2
 6ac:	b.eq	82c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x5a4>  // b.none
 6b0:	mov	w6, w1
 6b4:	cmp	x28, x0
 6b8:	b.ls	6cc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x444>  // b.plast
 6bc:	strb	w3, [x0]
 6c0:	ldr	x0, [sp, #104]
 6c4:	add	x0, x0, #0x1
 6c8:	str	x0, [sp, #104]
 6cc:	ldrb	w3, [x5, #1]!
 6d0:	add	w1, w6, #0x1
 6d4:	cbnz	w3, 6a8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x420>
 6d8:	mvn	w6, w6
 6dc:	mov	w2, w1
 6e0:	cmp	w4, w6
 6e4:	b.ge	738 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x4b0>  // b.tcont
 6e8:	ldr	x0, [sp, #104]
 6ec:	mov	w1, w2
 6f0:	mov	w5, #0x20                  	// #32
 6f4:	nop
 6f8:	cmp	x28, x0
 6fc:	b.ls	710 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x488>  // b.plast
 700:	strb	w5, [x0]
 704:	ldr	x0, [sp, #104]
 708:	add	x0, x0, #0x1
 70c:	str	x0, [sp, #104]
 710:	add	w1, w1, #0x1
 714:	neg	w3, w1
 718:	cmp	w4, w3
 71c:	b.lt	6f8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x470>  // b.tstop
 720:	mvn	w0, w2
 724:	add	w2, w2, #0x1
 728:	cmp	w4, w0
 72c:	sub	w4, w0, w4
 730:	csel	w4, w4, wzr, le
 734:	add	w2, w4, w2
 738:	add	w24, w24, w2
 73c:	add	x2, x23, #0x1
 740:	b	314 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x8c>
 744:	cbnz	w7, 5e8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x360>
 748:	tbnz	w26, #31, 928 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x6a0>
 74c:	mov	x0, x25
 750:	add	x1, x25, #0xb
 754:	and	x25, x1, #0xfffffffffffffff8
 758:	ldr	w2, [x0]
 75c:	b	5fc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x374>
 760:	cbnz	w7, 634 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3ac>
 764:	tbnz	w26, #31, 904 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x67c>
 768:	mov	x0, x25
 76c:	add	x1, x25, #0xb
 770:	and	x25, x1, #0xfffffffffffffff8
 774:	ldrsw	x6, [x0]
 778:	b	648 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3c0>
 77c:	add	w0, w26, #0x8
 780:	cmp	w0, #0x0
 784:	b.le	7f4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x56c>
 788:	add	x2, x25, #0xb
 78c:	mov	x1, x25
 790:	mov	w26, w0
 794:	and	x25, x2, #0xfffffffffffffff8
 798:	b	488 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x200>
 79c:	add	w0, w26, #0x8
 7a0:	cmp	w0, #0x0
 7a4:	b.le	800 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x578>
 7a8:	add	x1, x25, #0xf
 7ac:	mov	x2, x25
 7b0:	mov	w26, w0
 7b4:	and	x25, x1, #0xfffffffffffffff8
 7b8:	b	510 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x288>
 7bc:	add	w8, w27, w1
 7c0:	ldrb	w3, [x1, #1]!
 7c4:	cbnz	w3, 520 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x298>
 7c8:	b	544 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x2bc>
 7cc:	add	x7, x23, #0x2
 7d0:	tbnz	w26, #31, 868 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x5e0>
 7d4:	add	x3, x25, #0xb
 7d8:	mov	x2, x25
 7dc:	and	x25, x3, #0xfffffffffffffff8
 7e0:	ldr	w2, [x2]
 7e4:	ldrb	w3, [x23, #2]
 7e8:	mov	x23, x7
 7ec:	lsr	w8, w2, #31
 7f0:	b	374 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0xec>
 7f4:	add	x1, x22, w26, sxtw
 7f8:	mov	w26, w0
 7fc:	b	488 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x200>
 800:	add	x2, x22, w26, sxtw
 804:	mov	w26, w0
 808:	b	510 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x288>
 80c:	adrp	x2, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 810:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 814:	add	x2, x2, #0x0
 818:	add	x0, x0, #0x0
 81c:	mov	x4, #0x0                   	// #0
 820:	mov	x3, #0x0                   	// #0
 824:	mov	w1, #0xc6                  	// #198
 828:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 82c:	neg	w6, w2
 830:	b	6e0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x458>
 834:	add	w1, w26, #0x8
 838:	cmp	w1, #0x0
 83c:	b.le	8f8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x670>
 840:	mov	x0, x25
 844:	add	x3, x25, #0xf
 848:	mov	w26, w1
 84c:	and	x25, x3, #0xfffffffffffffff8
 850:	ldr	x5, [x0]
 854:	cbnz	x5, 690 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x408>
 858:	adrp	x5, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 85c:	mov	w3, #0x3c                  	// #60
 860:	add	x5, x5, #0x0
 864:	b	698 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x410>
 868:	add	w3, w26, #0x8
 86c:	cmp	w3, #0x0
 870:	b.le	94c <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x6c4>
 874:	add	x8, x25, #0xb
 878:	mov	x2, x25
 87c:	mov	w26, w3
 880:	and	x25, x8, #0xfffffffffffffff8
 884:	b	7e0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x558>
 888:	add	w1, w26, #0x8
 88c:	cmp	w1, #0x0
 890:	b.le	958 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x6d0>
 894:	add	x2, x25, #0xf
 898:	mov	x0, x25
 89c:	mov	w26, w1
 8a0:	and	x25, x2, #0xfffffffffffffff8
 8a4:	b	5f8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x370>
 8a8:	add	w1, w26, #0x8
 8ac:	cmp	w1, #0x0
 8b0:	b.le	964 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x6dc>
 8b4:	add	x2, x25, #0xf
 8b8:	mov	x0, x25
 8bc:	mov	w26, w1
 8c0:	and	x25, x2, #0xfffffffffffffff8
 8c4:	b	644 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3bc>
 8c8:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 8cc:	add	x0, x0, #0x0
 8d0:	stp	x21, x22, [sp, #16]
 8d4:	stp	x25, x26, [sp, #48]
 8d8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 8dc:	bl	0 <_ZN11__sanitizer3DieEv>
 8e0:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 8e4:	add	x0, x0, #0x0
 8e8:	stp	x21, x22, [sp, #16]
 8ec:	stp	x25, x26, [sp, #48]
 8f0:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 8f4:	bl	0 <_ZN11__sanitizer3DieEv>
 8f8:	add	x0, x22, w26, sxtw
 8fc:	mov	w26, w1
 900:	b	688 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x400>
 904:	add	w1, w26, #0x8
 908:	cmp	w1, #0x0
 90c:	b.le	970 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x6e8>
 910:	mov	x0, x25
 914:	add	x2, x25, #0xb
 918:	mov	w26, w1
 91c:	and	x25, x2, #0xfffffffffffffff8
 920:	ldrsw	x6, [x0]
 924:	b	648 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3c0>
 928:	add	w1, w26, #0x8
 92c:	cmp	w1, #0x0
 930:	b.le	980 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x6f8>
 934:	mov	x0, x25
 938:	add	x2, x25, #0xb
 93c:	and	x25, x2, #0xfffffffffffffff8
 940:	mov	w26, w1
 944:	ldr	w2, [x0]
 948:	b	5fc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x374>
 94c:	add	x2, x22, w26, sxtw
 950:	mov	w26, w3
 954:	b	7e0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x558>
 958:	add	x0, x22, w26, sxtw
 95c:	mov	w26, w1
 960:	b	5f8 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x370>
 964:	add	x0, x22, w26, sxtw
 968:	mov	w26, w1
 96c:	b	644 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3bc>
 970:	add	x0, x22, w26, sxtw
 974:	mov	w26, w1
 978:	ldrsw	x6, [x0]
 97c:	b	648 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x3c0>
 980:	add	x0, x22, w26, sxtw
 984:	mov	w26, w1
 988:	ldr	w2, [x0]
 98c:	b	5fc <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x374>
 990:	mov	w6, #0x0                   	// #0
 994:	mov	w2, #0x0                   	// #0
 998:	b	6e0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x458>
 99c:	mov	w6, #0x0                   	// #0
 9a0:	b	6e0 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x458>
 9a4:	mov	w24, #0x0                   	// #0
 9a8:	b	4c4 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list+0x23c>
 9ac:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 9b0:	add	x0, x0, #0x0
 9b4:	stp	x21, x22, [sp, #16]
 9b8:	stp	x25, x26, [sp, #48]
 9bc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 9c0:	bl	0 <_ZN11__sanitizer3DieEv>
 9c4:	nop

00000000000009c8 <_ZN11__sanitizer26SetPrintfAndReportCallbackEPFvPKcE>:
 9c8:	adrp	x1, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 9cc:	str	x0, [x1]
 9d0:	ret
 9d4:	nop

00000000000009d8 <OnPrint>:
 9d8:	ret
 9dc:	nop

00000000000009e0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>:
 9e0:	sub	sp, sp, #0x100
 9e4:	mov	w9, #0xffffffd8            	// #-40
 9e8:	add	x10, sp, #0xd0
 9ec:	add	x11, sp, #0x100
 9f0:	mov	w8, #0xffffff80            	// #-128
 9f4:	stp	x11, x11, [sp, #48]
 9f8:	str	x10, [sp, #64]
 9fc:	stp	w9, w8, [sp, #72]
 a00:	ldp	x10, x11, [sp, #48]
 a04:	str	x30, [sp]
 a08:	ldp	x8, x9, [sp, #64]
 a0c:	stp	x10, x11, [sp, #16]
 a10:	stp	x8, x9, [sp, #32]
 a14:	str	q0, [sp, #80]
 a18:	str	q1, [sp, #96]
 a1c:	str	q2, [sp, #112]
 a20:	str	q3, [sp, #128]
 a24:	str	q4, [sp, #144]
 a28:	str	q5, [sp, #160]
 a2c:	str	q6, [sp, #176]
 a30:	str	q7, [sp, #192]
 a34:	stp	x3, x4, [sp, #216]
 a38:	add	x3, sp, #0x10
 a3c:	stp	x5, x6, [sp, #232]
 a40:	str	x7, [sp, #248]
 a44:	bl	288 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 a48:	ldr	x30, [sp]
 a4c:	add	sp, sp, #0x100
 a50:	ret
 a54:	nop

0000000000000a58 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0>:
 a58:	stp	x19, x20, [sp, #-176]!
 a5c:	and	w0, w0, #0xff
 a60:	mov	x19, x1
 a64:	stp	x23, x24, [sp, #32]
 a68:	adrp	x23, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 a6c:	adrp	x24, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 a70:	stp	x27, x28, [sp, #64]
 a74:	mov	x27, x3
 a78:	add	x24, x24, #0x0
 a7c:	ldr	x23, [x23]
 a80:	stp	x21, x22, [sp, #16]
 a84:	mov	x21, x1
 a88:	mov	x22, x2
 a8c:	stp	x25, x26, [sp, #48]
 a90:	add	x25, sp, #0x70
 a94:	str	w0, [sp, #104]
 a98:	mov	w26, #0x0                   	// #0
 a9c:	ldp	x2, x3, [x3]
 aa0:	mov	w20, #0x190                 	// #400
 aa4:	ldp	x0, x1, [x27, #16]
 aa8:	str	x30, [sp, #80]
 aac:	stp	x2, x3, [sp, #144]
 ab0:	stp	x0, x1, [sp, #160]
 ab4:	ldr	w0, [sp, #104]
 ab8:	cbz	w0, b18 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xc0>
 abc:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
 ac0:	mov	x28, x0
 ac4:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
 ac8:	cmp	x0, #0x0
 acc:	ldrb	w2, [x23, #48]
 ad0:	cset	w6, ne  // ne = any
 ad4:	mov	x3, x0
 ad8:	sxtw	x1, w20
 adc:	mov	x0, x19
 ae0:	tst	w6, w2
 ae4:	mov	w5, #0x0                   	// #0
 ae8:	b.ne	c34 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x1dc>  // b.any
 aec:	mov	w3, w28
 af0:	mov	x2, x24
 af4:	str	w5, [sp, #108]
 af8:	bl	9e0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 afc:	ldr	w5, [sp, #108]
 b00:	add	w28, w5, w0
 b04:	cmp	w20, w28
 b08:	b.le	b84 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x12c>
 b0c:	add	x0, x19, w28, sxtw
 b10:	sub	w1, w20, w28
 b14:	b	b24 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xcc>
 b18:	mov	w1, w20
 b1c:	mov	x0, x19
 b20:	mov	w28, #0x0                   	// #0
 b24:	ldp	x6, x7, [x27]
 b28:	mov	x3, x25
 b2c:	ldp	x8, x9, [x27, #16]
 b30:	mov	x2, x22
 b34:	stp	x6, x7, [x25]
 b38:	stp	x8, x9, [x25, #16]
 b3c:	bl	288 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 b40:	add	w0, w28, w0
 b44:	cmp	w20, w0
 b48:	b.gt	bd0 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x178>
 b4c:	cbnz	w26, bc4 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x16c>
 b50:	ldp	x2, x3, [sp, #160]
 b54:	stp	x2, x3, [x27, #16]
 b58:	mov	w26, #0x1                   	// #1
 b5c:	ldp	x0, x1, [sp, #144]
 b60:	stp	x0, x1, [x27]
 b64:	mov	w2, #0x0                   	// #0
 b68:	mov	w20, #0x4000                	// #16384
 b6c:	adrp	x1, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 b70:	mov	x0, #0x4000                	// #16384
 b74:	add	x1, x1, #0x0
 b78:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 b7c:	mov	x19, x0
 b80:	b	ab4 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x5c>
 b84:	cbz	w26, b50 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xf8>
 b88:	mov	w0, #0x3fff                	// #16383
 b8c:	cmp	w28, w0
 b90:	b.gt	c5c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x204>
 b94:	ldp	x6, x7, [x27]
 b98:	mov	x2, x22
 b9c:	ldp	x4, x5, [x27, #16]
 ba0:	add	x3, sp, #0x70
 ba4:	sub	w1, w20, w28
 ba8:	add	x0, x19, w28, sxtw
 bac:	stp	x6, x7, [sp, #112]
 bb0:	stp	x4, x5, [sp, #128]
 bb4:	bl	288 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 bb8:	add	w0, w28, w0
 bbc:	cmp	w20, w0
 bc0:	b.gt	bd0 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x178>
 bc4:	mov	w1, #0x3fff                	// #16383
 bc8:	cmp	w0, w1
 bcc:	b.gt	c5c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x204>
 bd0:	mov	x0, x19
 bd4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 bd8:	mov	x0, x19
 bdc:	bl	0 <_ZN11__sanitizer35RemoveANSIEscapeSequencesFromStringEPc>
 be0:	mov	x0, x19
 be4:	bl	9d8 <OnPrint>
 be8:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 bec:	ldr	x1, [x0]
 bf0:	cbz	x1, bfc <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x1a4>
 bf4:	mov	x0, x19
 bf8:	blr	x1
 bfc:	mov	x0, x19
 c00:	bl	0 <_ZN11__sanitizer18LogMessageOnPrintfEPKc>
 c04:	cmp	x19, x21
 c08:	b.eq	c18 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x1c0>  // b.none
 c0c:	sxtw	x1, w20
 c10:	mov	x0, x19
 c14:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 c18:	ldp	x21, x22, [sp, #16]
 c1c:	ldp	x23, x24, [sp, #32]
 c20:	ldp	x25, x26, [sp, #48]
 c24:	ldp	x27, x28, [sp, #64]
 c28:	ldr	x30, [sp, #80]
 c2c:	ldp	x19, x20, [sp], #176
 c30:	ret
 c34:	adrp	x2, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 c38:	add	x2, x2, #0x0
 c3c:	bl	9e0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 c40:	mov	w5, w0
 c44:	cmp	w20, w0
 c48:	b.le	c6c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x214>
 c4c:	sub	w1, w20, w0
 c50:	add	x0, x19, w0, sxtw
 c54:	sxtw	x1, w1
 c58:	b	aec <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x94>
 c5c:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 c60:	add	x0, x0, #0x0
 c64:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 c68:	bl	0 <_ZN11__sanitizer3DieEv>
 c6c:	cbz	w26, b50 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0xf8>
 c70:	mov	w0, #0x3fff                	// #16383
 c74:	cmp	w5, w0
 c78:	b.gt	c5c <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x204>
 c7c:	sub	w1, w20, w5
 c80:	mov	w3, w28
 c84:	add	x0, x19, w5, sxtw
 c88:	adrp	x2, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 c8c:	sxtw	x1, w1
 c90:	add	x2, x2, #0x0
 c94:	str	w5, [sp, #104]
 c98:	bl	9e0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
 c9c:	ldr	w5, [sp, #104]
 ca0:	add	w28, w5, w0
 ca4:	cmp	w20, w28
 ca8:	b.le	b88 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x130>
 cac:	b	b94 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0+0x13c>

0000000000000cb0 <_ZN11__sanitizerL16SharedPrintfCodeEbPKcSt9__va_list>:
 cb0:	mov	x4, x2
 cb4:	sub	sp, sp, #0x1c0
 cb8:	mov	x2, x1
 cbc:	add	x3, sp, #0x10
 cc0:	add	x1, sp, #0x30
 cc4:	ldp	x6, x7, [x4]
 cc8:	stp	x6, x7, [sp, #16]
 ccc:	ldp	x4, x5, [x4, #16]
 cd0:	str	x30, [sp]
 cd4:	stp	x4, x5, [sp, #32]
 cd8:	bl	a58 <_ZN11__sanitizerL24SharedPrintfCodeNoBufferEbPciPKcSt9__va_list.constprop.0>
 cdc:	ldr	x30, [sp]
 ce0:	add	sp, sp, #0x1c0
 ce4:	ret

0000000000000ce8 <_ZN11__sanitizer6PrintfEPKcz>:
 ce8:	sub	sp, sp, #0x110
 cec:	mov	w9, #0xffffffc8            	// #-56
 cf0:	add	x11, sp, #0xd0
 cf4:	add	x10, sp, #0x110
 cf8:	mov	w8, #0xffffff80            	// #-128
 cfc:	stp	x10, x10, [sp, #48]
 d00:	mov	x10, x0
 d04:	mov	w0, #0x0                   	// #0
 d08:	str	x11, [sp, #64]
 d0c:	stp	w9, w8, [sp, #72]
 d10:	ldp	x12, x13, [sp, #48]
 d14:	str	x30, [sp]
 d18:	ldp	x8, x9, [sp, #64]
 d1c:	stp	x12, x13, [sp, #16]
 d20:	stp	x8, x9, [sp, #32]
 d24:	str	q0, [sp, #80]
 d28:	str	q1, [sp, #96]
 d2c:	str	q2, [sp, #112]
 d30:	str	q3, [sp, #128]
 d34:	str	q4, [sp, #144]
 d38:	str	q5, [sp, #160]
 d3c:	str	q6, [sp, #176]
 d40:	str	q7, [sp, #192]
 d44:	stp	x1, x2, [sp, #216]
 d48:	add	x2, sp, #0x10
 d4c:	mov	x1, x10
 d50:	stp	x3, x4, [sp, #232]
 d54:	stp	x5, x6, [sp, #248]
 d58:	str	x7, [sp, #264]
 d5c:	bl	cb0 <_ZN11__sanitizerL16SharedPrintfCodeEbPKcSt9__va_list>
 d60:	ldr	x30, [sp]
 d64:	add	sp, sp, #0x110
 d68:	ret
 d6c:	nop

0000000000000d70 <_ZN11__sanitizer6ReportEPKcz>:
 d70:	sub	sp, sp, #0x110
 d74:	mov	w9, #0xffffffc8            	// #-56
 d78:	add	x11, sp, #0xd0
 d7c:	add	x10, sp, #0x110
 d80:	mov	w8, #0xffffff80            	// #-128
 d84:	stp	x10, x10, [sp, #48]
 d88:	mov	x10, x0
 d8c:	mov	w0, #0x1                   	// #1
 d90:	str	x11, [sp, #64]
 d94:	stp	w9, w8, [sp, #72]
 d98:	ldp	x12, x13, [sp, #48]
 d9c:	str	x30, [sp]
 da0:	ldp	x8, x9, [sp, #64]
 da4:	stp	x12, x13, [sp, #16]
 da8:	stp	x8, x9, [sp, #32]
 dac:	str	q0, [sp, #80]
 db0:	str	q1, [sp, #96]
 db4:	str	q2, [sp, #112]
 db8:	str	q3, [sp, #128]
 dbc:	str	q4, [sp, #144]
 dc0:	str	q5, [sp, #160]
 dc4:	str	q6, [sp, #176]
 dc8:	str	q7, [sp, #192]
 dcc:	stp	x1, x2, [sp, #216]
 dd0:	add	x2, sp, #0x10
 dd4:	mov	x1, x10
 dd8:	stp	x3, x4, [sp, #232]
 ddc:	stp	x5, x6, [sp, #248]
 de0:	str	x7, [sp, #264]
 de4:	bl	cb0 <_ZN11__sanitizerL16SharedPrintfCodeEbPKcSt9__va_list>
 de8:	ldr	x30, [sp]
 dec:	add	sp, sp, #0x110
 df0:	ret
 df4:	nop

0000000000000df8 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>:
 df8:	stp	x19, x30, [sp, #-256]!
 dfc:	mov	x19, x0
 e00:	str	q0, [sp, #80]
 e04:	str	q1, [sp, #96]
 e08:	ldr	x8, [x0, #16]
 e0c:	str	q2, [sp, #112]
 e10:	ldr	x0, [x0, #24]
 e14:	str	q3, [sp, #128]
 e18:	str	q4, [sp, #144]
 e1c:	cmp	x0, x8
 e20:	str	q5, [sp, #160]
 e24:	str	q6, [sp, #176]
 e28:	str	q7, [sp, #192]
 e2c:	stp	x2, x3, [sp, #208]
 e30:	stp	x4, x5, [sp, #224]
 e34:	stp	x6, x7, [sp, #240]
 e38:	b.cs	eac <_ZN11__sanitizer20InternalScopedString6appendEPKcz+0xb4>  // b.hs, b.nlast
 e3c:	mov	w4, #0xffffff80            	// #-128
 e40:	mov	w3, #0xffffffd0            	// #-48
 e44:	stp	w3, w4, [sp, #72]
 e48:	add	x5, sp, #0xd0
 e4c:	ldr	x4, [x19]
 e50:	add	x2, sp, #0x100
 e54:	stp	x2, x2, [sp, #48]
 e58:	mov	x2, x1
 e5c:	sub	w1, w8, w0
 e60:	str	x5, [sp, #64]
 e64:	add	x0, x4, x0
 e68:	ldp	x6, x7, [sp, #48]
 e6c:	add	x3, sp, #0x10
 e70:	ldp	x4, x5, [sp, #64]
 e74:	stp	x6, x7, [sp, #16]
 e78:	stp	x4, x5, [sp, #32]
 e7c:	bl	288 <_ZN11__sanitizer9VSNPrintfEPciPKcSt9__va_list>
 e80:	ldr	x1, [x19]
 e84:	ldr	x0, [x19, #24]
 e88:	add	x0, x1, x0
 e8c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 e90:	ldp	x4, x3, [x19, #16]
 e94:	add	x3, x0, x3
 e98:	str	x3, [x19, #24]
 e9c:	cmp	x3, x4
 ea0:	b.cs	ecc <_ZN11__sanitizer20InternalScopedString6appendEPKcz+0xd4>  // b.hs, b.nlast
 ea4:	ldp	x19, x30, [sp], #256
 ea8:	ret
 eac:	mov	x3, x0
 eb0:	adrp	x2, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 eb4:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 eb8:	mov	x4, x8
 ebc:	add	x2, x2, #0x0
 ec0:	add	x0, x0, #0x0
 ec4:	mov	w1, #0x15c                 	// #348
 ec8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 ecc:	adrp	x2, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 ed0:	adrp	x0, 0 <_ZN11__sanitizerL12AppendNumberEPPcPKcyhhbbb>
 ed4:	add	x2, x2, #0x0
 ed8:	add	x0, x0, #0x0
 edc:	mov	w1, #0x162                 	// #354
 ee0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_procmaps_bsd.o:     file format elf64-littleaarch64


sanitizer_procmaps_common.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer9IsDecimalEc>:
   0:	and	w0, w0, #0xff
   4:	sub	w0, w0, #0x30
   8:	and	w0, w0, #0xff
   c:	cmp	w0, #0xa
  10:	cset	w0, cc  // cc = lo, ul, last
  14:	ret

0000000000000018 <_ZN11__sanitizer12ParseDecimalEPPKc>:
  18:	ldr	x2, [x0]
  1c:	mov	x3, x0
  20:	ldrb	w1, [x2]
  24:	sub	w1, w1, #0x30
  28:	and	w0, w1, #0xff
  2c:	cmp	w0, #0x9
  30:	mov	x0, #0x0                   	// #0
  34:	b.ls	3c <_ZN11__sanitizer12ParseDecimalEPPKc+0x24>  // b.plast
  38:	ret
  3c:	add	x2, x2, #0x1
  40:	str	x2, [x3]
  44:	sxtw	x4, w1
  48:	add	x0, x0, x0, lsl #2
  4c:	ldrb	w1, [x2]
  50:	add	x0, x4, x0, lsl #1
  54:	sub	w1, w1, #0x30
  58:	and	w4, w1, #0xff
  5c:	cmp	w4, #0x9
  60:	b.ls	3c <_ZN11__sanitizer12ParseDecimalEPPKc+0x24>  // b.plast
  64:	ret

0000000000000068 <_ZN11__sanitizer5IsHexEc>:
  68:	and	w1, w0, #0xff
  6c:	sub	w0, w1, #0x30
  70:	and	w0, w0, #0xff
  74:	cmp	w0, #0x9
  78:	b.ls	a4 <_ZN11__sanitizer5IsHexEc+0x3c>  // b.plast
  7c:	sub	w2, w1, #0x61
  80:	mov	w0, #0x1                   	// #1
  84:	and	w2, w2, #0xff
  88:	cmp	w2, #0x5
  8c:	b.ls	a0 <_ZN11__sanitizer5IsHexEc+0x38>  // b.plast
  90:	sub	w1, w1, #0x41
  94:	and	w1, w1, #0xff
  98:	cmp	w1, #0x5
  9c:	cset	w0, ls  // ls = plast
  a0:	ret
  a4:	mov	w0, #0x1                   	// #1
  a8:	ret
  ac:	nop

00000000000000b0 <_ZN11__sanitizer8ParseHexEPPKc>:
  b0:	mov	x4, x0
  b4:	mov	x0, #0x0                   	// #0
  b8:	ldr	x3, [x4]
  bc:	b	e0 <_ZN11__sanitizer8ParseHexEPPKc+0x30>
  c0:	cmp	w6, #0x5
  c4:	b.ls	110 <_ZN11__sanitizer8ParseHexEPPKc+0x60>  // b.plast
  c8:	cmp	w5, #0x5
  cc:	b.hi	118 <_ZN11__sanitizer8ParseHexEPPKc+0x68>  // b.pmore
  d0:	sxtw	x1, w1
  d4:	add	x3, x3, #0x1
  d8:	add	x0, x1, x0, lsl #4
  dc:	str	x3, [x4]
  e0:	ldrb	w2, [x3]
  e4:	sub	w7, w2, #0x30
  e8:	sub	w6, w2, #0x61
  ec:	sub	w5, w2, #0x41
  f0:	and	w8, w7, #0xff
  f4:	sub	w1, w2, #0x37
  f8:	and	w6, w6, #0xff
  fc:	and	w5, w5, #0xff
 100:	cmp	w8, #0x9
 104:	b.hi	c0 <_ZN11__sanitizer8ParseHexEPPKc+0x10>  // b.pmore
 108:	mov	w1, w7
 10c:	b	d0 <_ZN11__sanitizer8ParseHexEPPKc+0x20>
 110:	sub	w1, w2, #0x57
 114:	b	d0 <_ZN11__sanitizer8ParseHexEPPKc+0x20>
 118:	ret
 11c:	nop

0000000000000120 <_ZN11__sanitizer19MemoryMappedSegment16AddAddressRangesEPNS_12LoadedModuleE>:
 120:	mov	x2, x0
 124:	mov	x0, x1
 128:	ldr	x1, [x2, #72]
 12c:	cbnz	x1, 14c <_ZN11__sanitizer19MemoryMappedSegment16AddAddressRangesEPNS_12LoadedModuleE+0x2c>
 130:	ldr	x1, [x2]
 134:	mov	x5, #0x0                   	// #0
 138:	ldr	x3, [x2, #40]
 13c:	ldr	x2, [x2, #8]
 140:	ubfx	w4, w3, #1, #1
 144:	ubfx	w3, w3, #2, #1
 148:	b	0 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc>
 14c:	str	x30, [sp, #-16]!
 150:	adrp	x2, 0 <_ZN11__sanitizer9IsDecimalEc>
 154:	adrp	x0, 0 <_ZN11__sanitizer9IsDecimalEc>
 158:	add	x2, x2, #0x0
 15c:	add	x0, x0, #0x0
 160:	mov	x4, #0x0                   	// #0
 164:	mov	x3, #0x0                   	// #0
 168:	mov	w1, #0x43                  	// #67
 16c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000170 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>:
 170:	stp	x19, x20, [sp, #-64]!
 174:	tst	w1, #0xff
 178:	mov	x19, x0
 17c:	str	x30, [sp, #16]
 180:	b.ne	1ac <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x3c>  // b.any
 184:	bl	0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 188:	ldr	x0, [x19, #8]
 18c:	cbz	x0, 224 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0xb4>
 190:	ldr	x0, [x19, #16]
 194:	cbz	x0, 2a8 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x138>
 198:	ldr	x0, [x19]
 19c:	ldr	x30, [sp, #16]
 1a0:	str	x0, [x19, #24]
 1a4:	ldp	x19, x20, [sp], #64
 1a8:	ret
 1ac:	add	x0, sp, #0x28
 1b0:	bl	0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 1b4:	ldr	x0, [sp, #48]
 1b8:	cbnz	x0, 244 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0xd4>
 1bc:	mov	x0, x19
 1c0:	bl	0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 1c4:	ldr	x0, [x19, #8]
 1c8:	cbnz	x0, 190 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x20>
 1cc:	adrp	x20, 0 <_ZN11__sanitizer9IsDecimalEc>
 1d0:	add	x0, x20, #0x0
 1d4:	mov	w2, #0x1                   	// #1
 1d8:	ldxrb	w1, [x0]
 1dc:	stxrb	w3, w2, [x0]
 1e0:	cbnz	w3, 1d8 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x68>
 1e4:	dmb	ish
 1e8:	tst	w1, #0xff
 1ec:	b.eq	1f4 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x84>  // b.none
 1f0:	bl	0 <_ZN11__sanitizer9IsDecimalEc>
 1f4:	add	x0, x20, #0x0
 1f8:	add	x2, x0, #0x8
 1fc:	ldr	x1, [x0, #8]
 200:	cbz	x1, 214 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0xa4>
 204:	ldp	x0, x1, [x0, #8]
 208:	stp	x0, x1, [x19]
 20c:	ldr	x0, [x2, #16]
 210:	str	x0, [x19, #16]
 214:	dmb	ish
 218:	strb	wzr, [x20]
 21c:	ldr	x0, [x19, #8]
 220:	cbnz	x0, 190 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x20>
 224:	adrp	x2, 0 <_ZN11__sanitizer9IsDecimalEc>
 228:	adrp	x0, 0 <_ZN11__sanitizer9IsDecimalEc>
 22c:	add	x2, x2, #0x0
 230:	add	x0, x0, #0x0
 234:	mov	x4, #0x0                   	// #0
 238:	mov	x3, #0x0                   	// #0
 23c:	mov	w1, #0x51                  	// #81
 240:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 244:	adrp	x20, 0 <_ZN11__sanitizer9IsDecimalEc>
 248:	add	x0, x20, #0x0
 24c:	mov	w2, #0x1                   	// #1
 250:	ldxrb	w1, [x0]
 254:	stxrb	w3, w2, [x0]
 258:	cbnz	w3, 250 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0xe0>
 25c:	dmb	ish
 260:	tst	w1, #0xff
 264:	b.eq	26c <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0xfc>  // b.none
 268:	bl	0 <_ZN11__sanitizer9IsDecimalEc>
 26c:	add	x0, x20, #0x0
 270:	ldr	x1, [x0, #16]
 274:	cbnz	x1, 2c8 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x158>
 278:	add	x0, x20, #0x0
 27c:	ldp	x2, x3, [sp, #40]
 280:	ldr	x1, [sp, #56]
 284:	stp	x2, x3, [x0, #8]
 288:	str	x1, [x0, #24]
 28c:	dmb	ish
 290:	strb	wzr, [x20]
 294:	mov	x0, x19
 298:	bl	0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 29c:	ldr	x0, [x19, #8]
 2a0:	cbnz	x0, 190 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x20>
 2a4:	b	1cc <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x5c>
 2a8:	adrp	x2, 0 <_ZN11__sanitizer9IsDecimalEc>
 2ac:	adrp	x0, 0 <_ZN11__sanitizer9IsDecimalEc>
 2b0:	add	x2, x2, #0x0
 2b4:	add	x0, x0, #0x0
 2b8:	mov	x4, #0x0                   	// #0
 2bc:	mov	x3, #0x0                   	// #0
 2c0:	mov	w1, #0x52                  	// #82
 2c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2c8:	ldr	x0, [x0, #8]
 2cc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 2d0:	b	278 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb+0x108>
 2d4:	nop

00000000000002d8 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>:
 2d8:	adrp	x2, 0 <_ZN11__sanitizer9IsDecimalEc>
 2dc:	mov	x1, x0
 2e0:	ldr	x0, [x0]
 2e4:	ldr	x2, [x2]
 2e8:	cmp	x0, x2
 2ec:	b.eq	2f8 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev+0x20>  // b.none
 2f0:	ldr	x1, [x1, #8]
 2f4:	b	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 2f8:	ret
 2fc:	nop

0000000000000300 <_ZN11__sanitizer19MemoryMappingLayout5ResetEv>:
 300:	ldr	x1, [x0]
 304:	str	x1, [x0, #24]
 308:	ret
 30c:	nop

0000000000000310 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv>:
 310:	stp	x19, x30, [sp, #-48]!
 314:	add	x0, sp, #0x18
 318:	bl	0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 31c:	ldr	x0, [sp, #32]
 320:	cbnz	x0, 32c <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x1c>
 324:	ldp	x19, x30, [sp], #48
 328:	ret
 32c:	adrp	x19, 0 <_ZN11__sanitizer9IsDecimalEc>
 330:	add	x0, x19, #0x0
 334:	mov	w2, #0x1                   	// #1
 338:	ldxrb	w1, [x0]
 33c:	stxrb	w3, w2, [x0]
 340:	cbnz	w3, 338 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x28>
 344:	dmb	ish
 348:	tst	w1, #0xff
 34c:	b.eq	354 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x44>  // b.none
 350:	bl	0 <_ZN11__sanitizer9IsDecimalEc>
 354:	add	x0, x19, #0x0
 358:	ldr	x1, [x0, #16]
 35c:	cbnz	x1, 384 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x74>
 360:	add	x0, x19, #0x0
 364:	ldp	x2, x3, [sp, #24]
 368:	ldr	x1, [sp, #40]
 36c:	stp	x2, x3, [x0, #8]
 370:	str	x1, [x0, #24]
 374:	dmb	ish
 378:	strb	wzr, [x19]
 37c:	ldp	x19, x30, [sp], #48
 380:	ret
 384:	ldr	x0, [x0, #8]
 388:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 38c:	b	360 <_ZN11__sanitizer19MemoryMappingLayout19CacheMemoryMappingsEv+0x50>

0000000000000390 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv>:
 390:	stp	x19, x20, [sp, #-32]!
 394:	mov	x19, x0
 398:	adrp	x20, 0 <_ZN11__sanitizer9IsDecimalEc>
 39c:	add	x0, x20, #0x0
 3a0:	mov	w2, #0x1                   	// #1
 3a4:	str	x30, [sp, #16]
 3a8:	ldxrb	w1, [x0]
 3ac:	stxrb	w3, w2, [x0]
 3b0:	cbnz	w3, 3a8 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv+0x18>
 3b4:	dmb	ish
 3b8:	tst	w1, #0xff
 3bc:	b.eq	3c4 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv+0x34>  // b.none
 3c0:	bl	0 <_ZN11__sanitizer9IsDecimalEc>
 3c4:	add	x0, x20, #0x0
 3c8:	add	x2, x0, #0x8
 3cc:	ldr	x1, [x0, #8]
 3d0:	cbz	x1, 3e4 <_ZN11__sanitizer19MemoryMappingLayout13LoadFromCacheEv+0x54>
 3d4:	ldp	x0, x1, [x0, #8]
 3d8:	stp	x0, x1, [x19]
 3dc:	ldr	x0, [x2, #16]
 3e0:	str	x0, [x19, #16]
 3e4:	dmb	ish
 3e8:	strb	wzr, [x20]
 3ec:	ldr	x30, [sp, #16]
 3f0:	ldp	x19, x20, [sp], #32
 3f4:	ret

00000000000003f8 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE>:
 3f8:	stp	x19, x20, [sp, #-272]!
 3fc:	mov	x19, x1
 400:	stp	x21, x22, [sp, #16]
 404:	mov	x21, x0
 408:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 40c:	stp	x23, x24, [sp, #32]
 410:	ldr	x20, [x0]
 414:	stp	x25, x26, [sp, #48]
 418:	stp	x27, x28, [sp, #64]
 41c:	ldr	x0, [x21]
 420:	str	x30, [sp, #80]
 424:	str	x0, [x21, #24]
 428:	ldr	x0, [x20]
 42c:	cbz	x0, 5c4 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x1cc>
 430:	sub	x20, x0, #0x1
 434:	ands	x20, x20, x0
 438:	b.ne	728 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x330>  // b.any
 43c:	add	x24, x0, #0xfff
 440:	neg	x0, x0
 444:	and	x24, x24, x0
 448:	mov	w2, #0x0                   	// #0
 44c:	mov	x0, x24
 450:	adrp	x1, 0 <_ZN11__sanitizer9IsDecimalEc>
 454:	add	x1, x1, #0x0
 458:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 45c:	mov	x2, #0x0                   	// #0
 460:	mov	x1, #0x0                   	// #0
 464:	mov	x23, x0
 468:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 46c:	mov	x1, #0x0                   	// #0
 470:	mov	x0, #0x0                   	// #0
 474:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 478:	cmp	x24, #0xfff
 47c:	b.ls	68c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x294>  // b.plast
 480:	mov	x2, #0x1000                	// #4096
 484:	mov	w1, #0x0                   	// #0
 488:	mov	x0, x23
 48c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 490:	strb	wzr, [x23]
 494:	mov	x0, #0x1000                	// #4096
 498:	add	x22, sp, #0x70
 49c:	add	x25, sp, #0xc0
 4a0:	mov	x1, x25
 4a4:	add	x27, x22, #0x1c
 4a8:	stp	x23, x0, [sp, #216]
 4ac:	mov	x0, x21
 4b0:	str	xzr, [sp, #264]
 4b4:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 4b8:	tst	w0, #0xff
 4bc:	b.eq	59c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x1a4>  // b.none
 4c0:	ldr	x28, [sp, #216]
 4c4:	ldrb	w0, [x28]
 4c8:	cbz	w0, 584 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x18c>
 4cc:	ldr	x3, [sp, #192]
 4d0:	cmp	x20, #0x0
 4d4:	ldr	x0, [sp, #208]
 4d8:	csel	x3, x3, xzr, ne  // ne = any
 4dc:	mov	x2, #0x10                  	// #16
 4e0:	mov	w1, #0x0                   	// #0
 4e4:	sub	x26, x3, x0
 4e8:	mov	x0, x27
 4ec:	str	xzr, [sp, #112]
 4f0:	stp	xzr, xzr, [sp, #120]
 4f4:	str	wzr, [sp, #136]
 4f8:	strb	wzr, [sp, #156]
 4fc:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 500:	mov	x0, x22
 504:	mov	x2, x26
 508:	mov	x1, x28
 50c:	str	xzr, [sp, #160]
 510:	stp	xzr, xzr, [sp, #168]
 514:	bl	0 <_ZN11__sanitizer12LoadedModule3setEPKcm>
 518:	ldr	x0, [sp, #264]
 51c:	cbnz	x0, 6f0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x2f8>
 520:	ldp	x1, x2, [sp, #192]
 524:	mov	x0, x22
 528:	ldr	x3, [sp, #232]
 52c:	mov	x5, #0x0                   	// #0
 530:	ubfx	w4, w3, #1, #1
 534:	ubfx	w3, w3, #2, #1
 538:	bl	0 <_ZN11__sanitizer12LoadedModule15addAddressRangeEmmbbPKc>
 53c:	ldp	x4, x3, [x19, #8]
 540:	mov	x0, #0xe38f                	// #58255
 544:	movk	x0, #0x8e38, lsl #16
 548:	movk	x0, #0x38e3, lsl #32
 54c:	movk	x0, #0xe38e, lsl #48
 550:	umulh	x4, x4, x0
 554:	lsr	x4, x4, #6
 558:	cmp	x3, x4
 55c:	b.hi	710 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x318>  // b.pmore
 560:	add	x1, x3, #0x1
 564:	b.eq	5d0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x1d8>  // b.none
 568:	ldr	x5, [x19]
 56c:	add	x3, x3, x3, lsl #3
 570:	str	x1, [x19, #16]
 574:	mov	x2, #0x48                  	// #72
 578:	add	x0, x5, x3, lsl #3
 57c:	mov	x1, x22
 580:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 584:	mov	x1, x25
 588:	mov	x0, x21
 58c:	add	x20, x20, #0x1
 590:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
 594:	tst	w0, #0xff
 598:	b.ne	4c0 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0xc8>  // b.any
 59c:	mov	x1, x24
 5a0:	mov	x0, x23
 5a4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 5a8:	ldp	x21, x22, [sp, #16]
 5ac:	ldp	x23, x24, [sp, #32]
 5b0:	ldp	x25, x26, [sp, #48]
 5b4:	ldp	x27, x28, [sp, #64]
 5b8:	ldr	x30, [sp, #80]
 5bc:	ldp	x19, x20, [sp], #272
 5c0:	ret
 5c4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 5c8:	str	x0, [x20]
 5cc:	b	430 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x38>
 5d0:	tst	x3, x1
 5d4:	b.eq	610 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x218>  // b.none
 5d8:	clz	x2, x1
 5dc:	mov	w0, #0x3f                  	// #63
 5e0:	sub	w0, w0, w2
 5e4:	mov	x2, #0x1                   	// #1
 5e8:	add	w4, w0, #0x1
 5ec:	lsl	x4, x2, x4
 5f0:	cmp	x4, x1
 5f4:	b.ls	770 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x378>  // b.plast
 5f8:	lsl	x0, x2, x0
 5fc:	cmp	x0, x1
 600:	b.cs	78c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x394>  // b.hs, b.nlast
 604:	cmp	x3, x4
 608:	b.hi	758 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x360>  // b.pmore
 60c:	mov	x1, x4
 610:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 614:	add	x1, x1, x1, lsl #3
 618:	ldr	x2, [x0]
 61c:	lsl	x1, x1, #3
 620:	ldr	x0, [x2]
 624:	cbz	x0, 738 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x340>
 628:	sub	x4, x0, #0x1
 62c:	tst	x0, x4
 630:	b.ne	728 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x330>  // b.any
 634:	add	x1, x1, x4
 638:	neg	x0, x0
 63c:	and	x4, x1, x0
 640:	mov	w2, #0x0                   	// #0
 644:	mov	x0, x4
 648:	adrp	x1, 0 <_ZN11__sanitizer9IsDecimalEc>
 64c:	add	x1, x1, #0x0
 650:	str	x4, [sp, #104]
 654:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 658:	str	x0, [sp, #96]
 65c:	ldr	x2, [x19, #16]
 660:	ldr	x1, [x19]
 664:	add	x2, x2, x2, lsl #3
 668:	lsl	x2, x2, #3
 66c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 670:	ldp	x0, x1, [x19]
 674:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 678:	ldr	x3, [x19, #16]
 67c:	ldp	x5, x4, [sp, #96]
 680:	add	x1, x3, #0x1
 684:	stp	x5, x4, [x19]
 688:	b	56c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x174>
 68c:	adrp	x0, 0 <_ZN11__sanitizer14PageSizeCachedE>
 690:	ldr	x22, [x0]
 694:	ldr	x0, [x22]
 698:	cbz	x0, 74c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x354>
 69c:	sub	x1, x0, #0x1
 6a0:	tst	x1, x0
 6a4:	b.ne	728 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x330>  // b.any
 6a8:	add	x22, x0, #0xfff
 6ac:	neg	x0, x0
 6b0:	and	x22, x22, x0
 6b4:	mov	w2, #0x0                   	// #0
 6b8:	mov	x0, x22
 6bc:	adrp	x1, 0 <_ZN11__sanitizer9IsDecimalEc>
 6c0:	add	x1, x1, #0x0
 6c4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 6c8:	mov	x2, #0x0                   	// #0
 6cc:	mov	x25, x0
 6d0:	mov	x1, x23
 6d4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 6d8:	mov	x1, x24
 6dc:	mov	x0, x23
 6e0:	mov	x24, x22
 6e4:	mov	x23, x25
 6e8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 6ec:	b	480 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x88>
 6f0:	adrp	x2, 0 <_ZN11__sanitizer9IsDecimalEc>
 6f4:	adrp	x0, 0 <_ZN11__sanitizer9IsDecimalEc>
 6f8:	add	x2, x2, #0x0
 6fc:	add	x0, x0, #0x0
 700:	mov	x4, #0x0                   	// #0
 704:	mov	x3, #0x0                   	// #0
 708:	mov	w1, #0x43                  	// #67
 70c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 710:	adrp	x2, 0 <_ZN11__sanitizer9IsDecimalEc>
 714:	adrp	x0, 0 <_ZN11__sanitizer9IsDecimalEc>
 718:	add	x2, x2, #0x0
 71c:	add	x0, x0, #0x0
 720:	mov	w1, #0x1be                 	// #446
 724:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 728:	adrp	x0, 0 <_ZN11__sanitizer9IsDecimalEc>
 72c:	add	x0, x0, #0x0
 730:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 734:	bl	0 <_ZN11__sanitizer3DieEv>
 738:	stp	x1, x2, [sp, #96]
 73c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 740:	ldp	x1, x2, [sp, #96]
 744:	str	x0, [x2]
 748:	b	628 <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x230>
 74c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 750:	str	x0, [x22]
 754:	b	69c <_ZN11__sanitizer19MemoryMappingLayout17DumpListOfModulesEPNS_24InternalMmapVectorNoCtorINS_12LoadedModuleEEE+0x2a4>
 758:	adrp	x2, 0 <_ZN11__sanitizer9IsDecimalEc>
 75c:	adrp	x0, 0 <_ZN11__sanitizer9IsDecimalEc>
 760:	add	x2, x2, #0x0
 764:	add	x0, x0, #0x0
 768:	mov	w1, #0x1fd                 	// #509
 76c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 770:	mov	x3, x1
 774:	adrp	x2, 0 <_ZN11__sanitizer9IsDecimalEc>
 778:	adrp	x0, 0 <_ZN11__sanitizer9IsDecimalEc>
 77c:	add	x2, x2, #0x0
 780:	add	x0, x0, #0x0
 784:	mov	w1, #0x17b                 	// #379
 788:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 78c:	mov	x4, x0
 790:	mov	x3, x1
 794:	adrp	x2, 0 <_ZN11__sanitizer9IsDecimalEc>
 798:	adrp	x0, 0 <_ZN11__sanitizer9IsDecimalEc>
 79c:	add	x2, x2, #0x0
 7a0:	add	x0, x0, #0x0
 7a4:	mov	w1, #0x17c                 	// #380
 7a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 7ac:	nop

00000000000007b0 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m>:
 7b0:	stp	x19, x20, [sp, #-112]!
 7b4:	mov	x5, #0x0                   	// #0
 7b8:	mov	x4, #0x4000000             	// #67108864
 7bc:	add	x3, sp, #0x68
 7c0:	stp	x21, x22, [sp, #16]
 7c4:	mov	x21, x0
 7c8:	mov	x22, x1
 7cc:	adrp	x0, 0 <_ZN11__sanitizer9IsDecimalEc>
 7d0:	add	x1, sp, #0x58
 7d4:	add	x0, x0, #0x0
 7d8:	stp	x23, x24, [sp, #32]
 7dc:	mov	x23, x2
 7e0:	add	x2, sp, #0x60
 7e4:	str	x30, [sp, #64]
 7e8:	stp	xzr, xzr, [sp, #88]
 7ec:	str	xzr, [sp, #104]
 7f0:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
 7f4:	tst	w0, #0xff
 7f8:	b.eq	8fc <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x14c>  // b.none
 7fc:	ldr	x20, [sp, #88]
 800:	ldr	x6, [sp, #104]
 804:	add	x0, x20, x6
 808:	cmp	x20, x0
 80c:	b.cs	9d0 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x220>  // b.hs, b.nlast
 810:	adrp	x24, 0 <_ZN11__sanitizer9IsDecimalEc>
 814:	mov	x0, x20
 818:	add	x24, x24, #0x0
 81c:	stp	x25, x26, [sp, #48]
 820:	mov	w26, #0x0                   	// #0
 824:	mov	x25, #0x0                   	// #0
 828:	ldrb	w1, [x20]
 82c:	sub	w3, w1, #0x30
 830:	and	w2, w3, #0xff
 834:	cmp	w2, #0x9
 838:	b.ls	850 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xa0>  // b.plast
 83c:	and	w2, w1, #0xffffffdf
 840:	sub	w2, w2, #0x41
 844:	and	w2, w2, #0xff
 848:	cmp	w2, #0x5
 84c:	b.hi	910 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x160>  // b.pmore
 850:	mov	x25, #0x0                   	// #0
 854:	b	86c <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xbc>
 858:	sub	w3, w1, #0x37
 85c:	ldrb	w1, [x20, #1]!
 860:	sxtw	x3, w3
 864:	add	x25, x3, x25, lsl #4
 868:	sub	w3, w1, #0x30
 86c:	sub	w2, w1, #0x61
 870:	sub	w4, w1, #0x41
 874:	and	w5, w3, #0xff
 878:	and	w2, w2, #0xff
 87c:	and	w4, w4, #0xff
 880:	cmp	w5, #0x9
 884:	b.ls	85c <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xac>  // b.plast
 888:	sub	w3, w1, #0x57
 88c:	cmp	w2, #0x5
 890:	b.ls	85c <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xac>  // b.plast
 894:	cmp	w4, #0x5
 898:	b.ls	858 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0xa8>  // b.plast
 89c:	cmp	w1, #0x2f
 8a0:	cset	w26, eq  // eq = none
 8a4:	cmp	w26, #0x0
 8a8:	ccmp	w1, #0xa, #0x0, eq  // eq = none
 8ac:	b.ls	8c8 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x118>  // b.plast
 8b0:	ldrb	w1, [x20, #1]!
 8b4:	cmp	w1, #0x2f
 8b8:	cset	w26, eq  // eq = none
 8bc:	cmp	w26, #0x0
 8c0:	ccmp	w1, #0xa, #0x0, eq  // eq = none
 8c4:	b.hi	8b0 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x100>  // b.pmore
 8c8:	add	x19, x20, #0x1
 8cc:	nop
 8d0:	ldurb	w3, [x19, #-1]
 8d4:	mov	x20, x19
 8d8:	add	x19, x19, #0x1
 8dc:	cmp	w3, #0xa
 8e0:	b.ne	8d0 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x120>  // b.any
 8e4:	add	x1, x0, x6
 8e8:	cmp	x20, x1
 8ec:	b.cc	828 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x78>  // b.lo, b.ul, b.last
 8f0:	ldp	x25, x26, [sp, #48]
 8f4:	ldr	x1, [sp, #96]
 8f8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 8fc:	ldp	x21, x22, [sp, #16]
 900:	ldp	x23, x24, [sp, #32]
 904:	ldr	x30, [sp, #64]
 908:	ldp	x19, x20, [sp], #112
 90c:	ret
 910:	mov	x1, x24
 914:	mov	x0, x20
 918:	mov	x2, #0x4                   	// #4
 91c:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
 920:	cbz	w0, 938 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x188>
 924:	add	x19, x20, #0x1
 928:	ldr	x0, [sp, #88]
 92c:	ldr	x6, [sp, #104]
 930:	b	8d0 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x120>
 934:	add	x20, x20, #0x1
 938:	ldrb	w0, [x20]
 93c:	sub	w0, w0, #0x30
 940:	and	w0, w0, #0xff
 944:	cmp	w0, #0x9
 948:	b.hi	934 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x184>  // b.pmore
 94c:	mov	x19, x20
 950:	ldrb	w2, [x19], #1
 954:	sub	w0, w2, #0x30
 958:	and	w1, w0, #0xff
 95c:	cmp	w1, #0x9
 960:	mov	x1, #0x0                   	// #0
 964:	b.ls	98c <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x1dc>  // b.plast
 968:	mov	x0, x25
 96c:	lsl	x1, x1, #10
 970:	mov	x4, x23
 974:	mov	x3, x22
 978:	mov	w2, w26
 97c:	blr	x21
 980:	ldr	x0, [sp, #88]
 984:	ldr	x6, [sp, #104]
 988:	b	8d0 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x120>
 98c:	ldrb	w2, [x19], #1
 990:	sxtw	x3, w0
 994:	add	x1, x1, x1, lsl #2
 998:	sub	w0, w2, #0x30
 99c:	and	w2, w0, #0xff
 9a0:	add	x1, x3, x1, lsl #1
 9a4:	cmp	w2, #0x9
 9a8:	b.hi	968 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x1b8>  // b.pmore
 9ac:	ldrb	w2, [x19], #1
 9b0:	sxtw	x3, w0
 9b4:	add	x1, x1, x1, lsl #2
 9b8:	sub	w0, w2, #0x30
 9bc:	and	w2, w0, #0xff
 9c0:	add	x1, x3, x1, lsl #1
 9c4:	cmp	w2, #0x9
 9c8:	b.hi	968 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x1b8>  // b.pmore
 9cc:	b	98c <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x1dc>
 9d0:	mov	x0, x20
 9d4:	b	8f4 <_ZN11__sanitizer16GetMemoryProfileEPFvmmbPmmES0_m+0x144>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

sanitizer_procmaps_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	adrp	x1, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
   8:	mov	x19, x0
   c:	add	x3, x19, #0x10
  10:	add	x0, x1, #0x0
  14:	add	x2, x19, #0x8
  18:	mov	x1, x19
  1c:	mov	x5, #0x0                   	// #0
  20:	mov	x4, #0x4000000             	// #67108864
  24:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
  28:	tst	w0, #0xff
  2c:	b.ne	38 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE+0x38>  // b.any
  30:	str	xzr, [x19]
  34:	stp	xzr, xzr, [x19, #8]
  38:	ldp	x19, x30, [sp], #16
  3c:	ret

0000000000000040 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>:
  40:	stp	x19, x20, [sp, #-64]!
  44:	mov	x19, x0
  48:	mov	x20, x1
  4c:	stp	x21, x22, [sp, #16]
  50:	ldr	x22, [x0]
  54:	ldp	x1, x0, [x0, #16]
  58:	str	x30, [sp, #56]
  5c:	add	x22, x22, x1
  60:	cmp	x0, x22
  64:	b.cc	80 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x40>  // b.lo, b.ul, b.last
  68:	mov	w22, #0x0                   	// #0
  6c:	mov	w0, w22
  70:	ldp	x21, x22, [sp, #16]
  74:	ldr	x30, [sp, #56]
  78:	ldp	x19, x20, [sp], #64
  7c:	ret
  80:	sub	x2, x22, x0
  84:	mov	w1, #0xa                   	// #10
  88:	stp	x23, x24, [sp, #32]
  8c:	add	x23, x19, #0x18
  90:	str	x25, [sp, #48]
  94:	bl	0 <_ZN11__sanitizer15internal_memchrEPKvim>
  98:	mov	x21, x0
  9c:	mov	x0, x23
  a0:	cmp	x21, #0x0
  a4:	csel	x21, x21, x22, ne  // ne = any
  a8:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
  ac:	ldr	x1, [x19, #24]
  b0:	str	x0, [x20]
  b4:	add	x0, x1, #0x1
  b8:	str	x0, [x19, #24]
  bc:	ldrb	w22, [x1]
  c0:	cmp	x22, #0x2d
  c4:	b.ne	32c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2ec>  // b.any
  c8:	mov	x0, x23
  cc:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
  d0:	ldr	x2, [x19, #24]
  d4:	str	x0, [x20, #8]
  d8:	add	x0, x2, #0x1
  dc:	str	x0, [x19, #24]
  e0:	ldrb	w3, [x2]
  e4:	cmp	x3, #0x20
  e8:	b.ne	34c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x30c>  // b.any
  ec:	ldrb	w0, [x2, #1]
  f0:	cmp	w0, #0x72
  f4:	ccmp	w0, w22, #0x4, ne  // ne = any
  f8:	b.ne	368 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x328>  // b.any
  fc:	str	xzr, [x20, #40]
 100:	add	x0, x2, #0x2
 104:	str	x0, [x19, #24]
 108:	ldrb	w0, [x2, #1]
 10c:	cmp	w0, #0x72
 110:	b.eq	2e4 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2a4>  // b.none
 114:	mov	x9, #0xe                   	// #14
 118:	mov	x8, #0xa                   	// #10
 11c:	mov	x7, #0x6                   	// #6
 120:	mov	x5, #0xc                   	// #12
 124:	mov	x3, #0x8                   	// #8
 128:	mov	x4, #0x4                   	// #4
 12c:	mov	x6, #0x2                   	// #2
 130:	ldrb	w0, [x2, #2]
 134:	mov	w1, #0x2d                  	// #45
 138:	cmp	w0, #0x77
 13c:	ccmp	w0, w1, #0x4, ne  // ne = any
 140:	b.ne	388 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x348>  // b.any
 144:	add	x0, x2, #0x3
 148:	str	x0, [x19, #24]
 14c:	ldrb	w0, [x2, #2]
 150:	cmp	w0, #0x77
 154:	b.ne	168 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x128>  // b.any
 158:	mov	x5, x9
 15c:	mov	x3, x8
 160:	mov	x4, x7
 164:	str	x6, [x20, #40]
 168:	ldrb	w0, [x2, #3]
 16c:	mov	w1, #0x78                  	// #120
 170:	cmp	w0, #0x2d
 174:	ccmp	w0, w1, #0x4, ne  // ne = any
 178:	b.ne	3a8 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x368>  // b.any
 17c:	add	x0, x2, #0x4
 180:	str	x0, [x19, #24]
 184:	ldrb	w0, [x2, #3]
 188:	cmp	w0, #0x78
 18c:	b.eq	2d0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x290>  // b.none
 190:	ldrb	w0, [x2, #4]
 194:	cmp	w0, #0x73
 198:	cset	w22, eq  // eq = none
 19c:	cmp	w0, #0x70
 1a0:	csinc	w22, w22, wzr, ne  // ne = any
 1a4:	cbz	w22, 3c8 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x388>
 1a8:	add	x0, x2, #0x5
 1ac:	str	x0, [x19, #24]
 1b0:	ldrb	w0, [x2, #4]
 1b4:	cmp	w0, #0x73
 1b8:	b.eq	2dc <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x29c>  // b.none
 1bc:	add	x0, x2, #0x6
 1c0:	str	x0, [x19, #24]
 1c4:	ldrb	w24, [x2, #5]
 1c8:	cmp	x24, #0x20
 1cc:	b.ne	3e8 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x3a8>  // b.any
 1d0:	mov	x0, x23
 1d4:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
 1d8:	str	x0, [x20, #16]
 1dc:	ldr	x0, [x19, #24]
 1e0:	add	x1, x0, #0x1
 1e4:	str	x1, [x19, #24]
 1e8:	ldrb	w25, [x0]
 1ec:	cmp	x25, #0x20
 1f0:	b.ne	408 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x3c8>  // b.any
 1f4:	mov	x0, x23
 1f8:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
 1fc:	ldr	x0, [x19, #24]
 200:	add	x1, x0, #0x1
 204:	str	x1, [x19, #24]
 208:	ldrb	w24, [x0]
 20c:	cmp	x24, #0x3a
 210:	b.ne	30c <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x2cc>  // b.any
 214:	mov	x0, x23
 218:	bl	0 <_ZN11__sanitizer8ParseHexEPPKc>
 21c:	ldr	x0, [x19, #24]
 220:	add	x2, x0, #0x1
 224:	str	x2, [x19, #24]
 228:	ldrb	w3, [x0]
 22c:	cmp	x3, #0x20
 230:	b.eq	244 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x204>  // b.none
 234:	b	428 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x3e8>
 238:	ldr	x2, [x19, #24]
 23c:	add	x2, x2, #0x1
 240:	str	x2, [x19, #24]
 244:	ldrb	w0, [x2]
 248:	bl	0 <_ZN11__sanitizer9IsDecimalEc>
 24c:	tst	w0, #0xff
 250:	b.ne	238 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x1f8>  // b.any
 254:	ldr	x1, [x19, #24]
 258:	cmp	x1, x21
 25c:	b.cc	274 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x234>  // b.lo, b.ul, b.last
 260:	b	280 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x240>
 264:	add	x1, x1, #0x1
 268:	str	x1, [x19, #24]
 26c:	cmp	x1, x21
 270:	b.eq	280 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x240>  // b.none
 274:	ldrb	w0, [x1]
 278:	cmp	w0, #0x20
 27c:	b.eq	264 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x224>  // b.none
 280:	ldr	x0, [x20, #24]
 284:	cbz	x0, 2ac <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x26c>
 288:	ldr	x23, [x20, #32]
 28c:	sub	x3, x21, x1
 290:	sub	x23, x23, #0x1
 294:	cmp	x23, x3
 298:	csel	x23, x23, x3, ls  // ls = plast
 29c:	mov	x2, x23
 2a0:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 2a4:	ldr	x0, [x20, #24]
 2a8:	strb	wzr, [x0, x23]
 2ac:	add	x21, x21, #0x1
 2b0:	mov	w0, w22
 2b4:	ldp	x23, x24, [sp, #32]
 2b8:	ldr	x25, [sp, #48]
 2bc:	str	x21, [x19, #24]
 2c0:	ldp	x21, x22, [sp, #16]
 2c4:	ldr	x30, [sp, #56]
 2c8:	ldp	x19, x20, [sp], #64
 2cc:	ret
 2d0:	mov	x3, x5
 2d4:	str	x4, [x20, #40]
 2d8:	b	190 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x150>
 2dc:	str	x3, [x20, #40]
 2e0:	b	1bc <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0x17c>
 2e4:	mov	x0, #0x1                   	// #1
 2e8:	mov	x9, #0xf                   	// #15
 2ec:	mov	x8, #0xb                   	// #11
 2f0:	mov	x7, #0x7                   	// #7
 2f4:	mov	x5, #0xd                   	// #13
 2f8:	mov	x3, #0x9                   	// #9
 2fc:	mov	x4, #0x5                   	// #5
 300:	mov	x6, #0x3                   	// #3
 304:	str	x0, [x20, #40]
 308:	b	130 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE+0xf0>
 30c:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 310:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 314:	mov	x3, x24
 318:	add	x2, x2, #0x0
 31c:	add	x0, x0, #0x0
 320:	mov	x4, #0x3a                  	// #58
 324:	mov	w1, #0x38                  	// #56
 328:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 32c:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 330:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 334:	mov	x3, x22
 338:	add	x2, x2, #0x0
 33c:	add	x0, x0, #0x0
 340:	mov	x4, #0x2d                  	// #45
 344:	mov	w1, #0x28                  	// #40
 348:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 34c:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 350:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 354:	add	x2, x2, #0x0
 358:	add	x0, x0, #0x0
 35c:	mov	x4, #0x20                  	// #32
 360:	mov	w1, #0x2a                  	// #42
 364:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 368:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 36c:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 370:	add	x2, x2, #0x0
 374:	add	x0, x0, #0x0
 378:	mov	x4, #0x0                   	// #0
 37c:	mov	x3, #0x0                   	// #0
 380:	mov	w1, #0x2b                  	// #43
 384:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 388:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 38c:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 390:	add	x2, x2, #0x0
 394:	add	x0, x0, #0x0
 398:	mov	x4, #0x0                   	// #0
 39c:	mov	x3, #0x0                   	// #0
 3a0:	mov	w1, #0x2e                  	// #46
 3a4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3a8:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 3ac:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 3b0:	add	x2, x2, #0x0
 3b4:	add	x0, x0, #0x0
 3b8:	mov	x4, #0x0                   	// #0
 3bc:	mov	x3, #0x0                   	// #0
 3c0:	mov	w1, #0x30                  	// #48
 3c4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3c8:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 3cc:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 3d0:	add	x2, x2, #0x0
 3d4:	add	x0, x0, #0x0
 3d8:	mov	x4, #0x0                   	// #0
 3dc:	mov	x3, #0x0                   	// #0
 3e0:	mov	w1, #0x32                  	// #50
 3e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3e8:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 3ec:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 3f0:	mov	x3, x24
 3f4:	add	x2, x2, #0x0
 3f8:	add	x0, x0, #0x0
 3fc:	mov	x4, #0x20                  	// #32
 400:	mov	w1, #0x34                  	// #52
 404:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 408:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 40c:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 410:	mov	x4, x24
 414:	mov	x3, x25
 418:	add	x2, x2, #0x0
 41c:	add	x0, x0, #0x0
 420:	mov	w1, #0x36                  	// #54
 424:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 428:	adrp	x2, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 42c:	adrp	x0, 0 <_ZN11__sanitizer12ReadProcMapsEPNS_16ProcSelfMapsBuffE>
 430:	mov	x4, x25
 434:	mov	w1, w24
 438:	add	x2, x2, #0x0
 43c:	add	x0, x0, #0x0
 440:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_procmaps_mac.o:     file format elf64-littleaarch64


sanitizer_procmaps_solaris.o:     file format elf64-littleaarch64


sanitizer_rtems.o:     file format elf64-littleaarch64


sanitizer_solaris.o:     file format elf64-littleaarch64


sanitizer_stackdepot.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer16StackDepotHandle2idEv>:
   0:	ldr	x0, [x0]
   4:	ldr	w0, [x0, #8]
   8:	ret
   c:	nop

0000000000000010 <_ZN11__sanitizer16StackDepotHandle9use_countEv>:
  10:	ldr	x0, [x0]
  14:	ldr	w0, [x0, #12]
  18:	and	w0, w0, #0xfffff
  1c:	ret

0000000000000020 <_ZN11__sanitizer16StackDepotHandle20inc_use_count_unsafeEv>:
  20:	ldr	x0, [x0]
  24:	add	x0, x0, #0xc
  28:	ldxr	w1, [x0]
  2c:	add	w2, w1, #0x1
  30:	stlxr	w3, w2, [x0]
  34:	cbnz	w3, 28 <_ZN11__sanitizer16StackDepotHandle20inc_use_count_unsafeEv+0x8>
  38:	mvn	x0, x1
  3c:	dmb	ish
  40:	tst	x0, #0xfffff
  44:	b.eq	4c <_ZN11__sanitizer16StackDepotHandle20inc_use_count_unsafeEv+0x2c>  // b.none
  48:	ret
  4c:	str	x30, [sp, #-16]!
  50:	adrp	x2, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
  54:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
  58:	mov	x4, #0x100000              	// #1048576
  5c:	add	x2, x2, #0x0
  60:	add	x0, x0, #0x0
  64:	mov	x3, x4
  68:	mov	w1, #0x61                  	// #97
  6c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000070 <_ZN11__sanitizer18StackDepotGetStatsEv>:
  70:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
  74:	add	x0, x0, #0x0
  78:	ret
  7c:	nop

0000000000000080 <_ZN11__sanitizer13StackDepotGetEj>:
  80:	mov	w2, w0
  84:	cbz	w0, fc <_ZN11__sanitizer13StackDepotGetEj+0x7c>
  88:	str	x30, [sp, #-16]!
  8c:	and	x3, x2, #0x7fffffff
  90:	mov	w4, w0
  94:	cmp	x3, w0, uxtw
  98:	b.ne	130 <_ZN11__sanitizer13StackDepotGetEj+0xb0>  // b.any
  9c:	lsr	w3, w0, #23
  a0:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
  a4:	add	x0, x0, #0x0
  a8:	mov	x5, #0xfffff               	// #1048575
  ac:	lsl	x3, x3, #12
  b0:	add	x6, x3, #0x1, lsl #12
  b4:	cmp	x3, x5
  b8:	b.hi	148 <_ZN11__sanitizer13StackDepotGetEj+0xc8>  // b.pmore
  bc:	ldr	x1, [x0, x3, lsl #3]
  c0:	ands	x1, x1, #0xfffffffffffffffe
  c4:	b.ne	d4 <_ZN11__sanitizer13StackDepotGetEj+0x54>  // b.any
  c8:	b	114 <_ZN11__sanitizer13StackDepotGetEj+0x94>
  cc:	ldr	x1, [x1]
  d0:	cbz	x1, 114 <_ZN11__sanitizer13StackDepotGetEj+0x94>
  d4:	ldr	w4, [x1, #8]
  d8:	cmp	w2, w4
  dc:	b.ne	cc <_ZN11__sanitizer13StackDepotGetEj+0x4c>  // b.any
  e0:	ldp	w2, w3, [x1, #16]
  e4:	add	x0, x1, #0x18
  e8:	mov	x1, #0x0                   	// #0
  ec:	bfxil	x1, x2, #0, #32
  f0:	ldr	x30, [sp], #16
  f4:	bfi	x1, x3, #32, #32
  f8:	ret
  fc:	mov	x1, #0x0                   	// #0
 100:	mov	w3, #0x0                   	// #0
 104:	bfxil	x1, x2, #0, #32
 108:	mov	x0, #0x0                   	// #0
 10c:	bfi	x1, x3, #32, #32
 110:	ret
 114:	add	x3, x3, #0x1
 118:	cmp	x6, x3
 11c:	b.ne	b4 <_ZN11__sanitizer13StackDepotGetEj+0x34>  // b.any
 120:	mov	w3, #0x0                   	// #0
 124:	mov	w2, #0x0                   	// #0
 128:	mov	x0, #0x0                   	// #0
 12c:	b	e8 <_ZN11__sanitizer13StackDepotGetEj+0x68>
 130:	adrp	x2, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 134:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 138:	add	x2, x2, #0x0
 13c:	add	x0, x0, #0x0
 140:	mov	w1, #0x8c                  	// #140
 144:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 148:	adrp	x2, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 14c:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 150:	add	x2, x2, #0x0
 154:	add	x0, x0, #0x0
 158:	mov	x4, #0x100000              	// #1048576
 15c:	mov	w1, #0x91                  	// #145
 160:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 164:	nop

0000000000000168 <_ZN11__sanitizer17StackDepotLockAllEv>:
 168:	stp	x19, x20, [sp, #-48]!
 16c:	adrp	x19, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 170:	add	x19, x19, #0x0
 174:	stp	x23, x30, [sp, #32]
 178:	mov	x23, x19
 17c:	stp	x21, x22, [sp, #16]
 180:	mov	w21, #0x0                   	// #0
 184:	nop
 188:	sxtw	x22, w21
 18c:	mov	w20, #0x0                   	// #0
 190:	ldr	x0, [x23, x22, lsl #3]
 194:	orr	x2, x0, #0x1
 198:	tbnz	w0, #0, 1bc <_ZN11__sanitizer17StackDepotLockAllEv+0x54>
 19c:	ldxr	x1, [x19]
 1a0:	cmp	x1, x0
 1a4:	b.ne	1b0 <_ZN11__sanitizer17StackDepotLockAllEv+0x48>  // b.any
 1a8:	stlxr	w3, x2, [x19]
 1ac:	cbnz	w3, 19c <_ZN11__sanitizer17StackDepotLockAllEv+0x34>
 1b0:	dmb	ish
 1b4:	cmp	x0, x1
 1b8:	b.eq	1d8 <_ZN11__sanitizer17StackDepotLockAllEv+0x70>  // b.none
 1bc:	cmp	w20, #0x9
 1c0:	b.gt	1cc <_ZN11__sanitizer17StackDepotLockAllEv+0x64>
 1c4:	add	w20, w20, #0x1
 1c8:	b	190 <_ZN11__sanitizer17StackDepotLockAllEv+0x28>
 1cc:	add	w20, w20, #0x1
 1d0:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
 1d4:	b	190 <_ZN11__sanitizer17StackDepotLockAllEv+0x28>
 1d8:	add	w21, w21, #0x1
 1dc:	add	x19, x19, #0x8
 1e0:	cmp	w21, #0x100, lsl #12
 1e4:	b.ne	188 <_ZN11__sanitizer17StackDepotLockAllEv+0x20>  // b.any
 1e8:	ldp	x21, x22, [sp, #16]
 1ec:	ldp	x23, x30, [sp, #32]
 1f0:	ldp	x19, x20, [sp], #48
 1f4:	ret

00000000000001f8 <_ZN11__sanitizer19StackDepotUnlockAllEv>:
 1f8:	adrp	x3, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 1fc:	add	x3, x3, #0x0
 200:	mov	w0, #0x0                   	// #0
 204:	nop
 208:	sxtw	x2, w0
 20c:	ldr	x1, [x3, x2, lsl #3]
 210:	dmb	ish
 214:	and	x1, x1, #0xfffffffffffffffe
 218:	str	x1, [x3, x2, lsl #3]
 21c:	add	w0, w0, #0x1
 220:	cmp	w0, #0x100, lsl #12
 224:	b.ne	208 <_ZN11__sanitizer19StackDepotUnlockAllEv+0x10>  // b.any
 228:	ret
 22c:	nop

0000000000000230 <_ZN11__sanitizer20StackDepotReverseMap10IdDescPair12IdComparatorERKS1_S3_>:
 230:	ldr	w2, [x0]
 234:	ldr	w0, [x1]
 238:	cmp	w2, w0
 23c:	cset	w0, cc  // cc = lo, ul, last
 240:	ret
 244:	nop

0000000000000248 <_ZN11__sanitizer20StackDepotReverseMapC1Ev>:
 248:	stp	x19, x20, [sp, #-128]!
 24c:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
 250:	mov	x19, x0
 254:	stp	x21, x22, [sp, #16]
 258:	ldr	x21, [x20]
 25c:	stp	x23, x24, [sp, #32]
 260:	stp	x25, x26, [sp, #48]
 264:	stp	x27, x28, [sp, #64]
 268:	str	x30, [sp, #80]
 26c:	str	xzr, [x0]
 270:	stp	xzr, xzr, [x0, #8]
 274:	ldr	x0, [x21]
 278:	cbz	x0, 5fc <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x3b4>
 27c:	sub	x1, x0, #0x1
 280:	tst	x1, x0
 284:	b.ne	62c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x3e4>  // b.any
 288:	add	x21, x0, #0xf
 28c:	neg	x0, x0
 290:	and	x21, x21, x0
 294:	mov	w2, #0x0                   	// #0
 298:	mov	x0, x21
 29c:	adrp	x24, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 2a0:	add	x1, x24, #0x0
 2a4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 2a8:	ldr	x1, [x19]
 2ac:	mov	x23, x0
 2b0:	ldr	x2, [x19, #16]
 2b4:	adrp	x22, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 2b8:	lsl	x2, x2, #4
 2bc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2c0:	ldp	x0, x1, [x19]
 2c4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 2c8:	stp	x23, x21, [x19]
 2cc:	add	x0, x22, #0x0
 2d0:	add	x0, x0, #0x800, lsl #12
 2d4:	ldr	x4, [x0, #1024]
 2d8:	add	x4, x4, #0x64
 2dc:	cmp	x4, x21, lsr #4
 2e0:	b.hi	57c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x334>  // b.pmore
 2e4:	ldr	x20, [x20]
 2e8:	add	x22, x22, #0x0
 2ec:	add	x23, sp, #0x70
 2f0:	mov	w21, #0x0                   	// #0
 2f4:	sxtw	x0, w21
 2f8:	ldr	x5, [x22, x0, lsl #3]
 2fc:	mov	x25, #0x1                   	// #1
 300:	ands	x27, x5, #0xfffffffffffffffe
 304:	add	x26, x24, #0x0
 308:	b.eq	350 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x108>  // b.none
 30c:	ldp	x4, x3, [x19, #8]
 310:	ldr	w0, [x27, #8]
 314:	str	w0, [sp, #112]
 318:	str	x27, [sp, #120]
 31c:	lsr	x4, x4, #4
 320:	cmp	x3, x4
 324:	b.hi	5e4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x39c>  // b.pmore
 328:	add	x28, x3, #0x1
 32c:	b.eq	4dc <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x294>  // b.none
 330:	ldr	x4, [x19]
 334:	str	x28, [x19, #16]
 338:	add	x0, x4, x3, lsl #4
 33c:	mov	x1, x23
 340:	mov	x2, #0x10                  	// #16
 344:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 348:	ldr	x27, [x27]
 34c:	cbnz	x27, 30c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0xc4>
 350:	add	w21, w21, #0x1
 354:	cmp	w21, #0x100, lsl #12
 358:	b.ne	2f4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0xac>  // b.any
 35c:	ldr	x2, [x19, #16]
 360:	cmp	x2, #0x1
 364:	b.ls	4c0 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x278>  // b.plast
 368:	ldr	x0, [x19]
 36c:	mov	x1, #0x1                   	// #1
 370:	lsl	x4, x1, #4
 374:	mov	x3, x1
 378:	ldr	w8, [x0, x4]
 37c:	sub	x5, x3, #0x1
 380:	mov	x4, x3
 384:	lsr	x3, x5, #1
 388:	add	x4, x0, x4, lsl #4
 38c:	lsl	x5, x3, #4
 390:	add	x9, x0, x5
 394:	ldr	w6, [x0, x5]
 398:	cmp	w6, w8
 39c:	b.cs	3b8 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x170>  // b.hs, b.nlast
 3a0:	ldp	x6, x7, [x9]
 3a4:	ldr	x10, [x4, #8]
 3a8:	stp	x6, x7, [x4]
 3ac:	str	w8, [x0, x5]
 3b0:	str	x10, [x9, #8]
 3b4:	cbnz	x3, 37c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x134>
 3b8:	add	x1, x1, #0x1
 3bc:	cmp	x2, x1
 3c0:	b.ne	370 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x128>  // b.any
 3c4:	sub	x8, x2, #0x1
 3c8:	add	x2, x0, x2, lsl #4
 3cc:	ldp	x6, x7, [x2, #-16]
 3d0:	mov	x3, #0x0                   	// #0
 3d4:	ldr	w4, [x0]
 3d8:	add	x5, x3, #0x1
 3dc:	ldr	x1, [x0, #8]
 3e0:	stp	x6, x7, [x0]
 3e4:	stur	w4, [x2, #-16]
 3e8:	stur	x1, [x2, #-8]
 3ec:	lsl	x1, x3, #1
 3f0:	add	x7, x1, #0x1
 3f4:	add	x1, x1, #0x2
 3f8:	cmp	x7, x8
 3fc:	b.cs	464 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x21c>  // b.hs, b.nlast
 400:	lsl	x6, x7, #4
 404:	lsl	x4, x3, #4
 408:	add	x9, x0, x6
 40c:	add	x11, x0, x4
 410:	ldr	w10, [x0, x6]
 414:	ldr	w12, [x0, x4]
 418:	cmp	w12, w10
 41c:	b.cs	464 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x21c>  // b.hs, b.nlast
 420:	cmp	x1, x8
 424:	b.cc	648 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x400>  // b.lo, b.ul, b.last
 428:	cmp	x7, x3
 42c:	b.eq	4b4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x26c>  // b.none
 430:	ldp	x4, x5, [x9]
 434:	mov	x1, x7
 438:	ldr	x3, [x11, #8]
 43c:	stp	x4, x5, [x11]
 440:	str	w12, [x0, x6]
 444:	str	x3, [x9, #8]
 448:	mov	x3, x1
 44c:	add	x5, x3, #0x1
 450:	lsl	x1, x3, #1
 454:	add	x7, x1, #0x1
 458:	add	x1, x1, #0x2
 45c:	cmp	x7, x8
 460:	b.cc	400 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x1b8>  // b.lo, b.ul, b.last
 464:	cmp	x1, x8
 468:	b.cs	4b4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x26c>  // b.hs, b.nlast
 46c:	lsl	x5, x5, #5
 470:	lsl	x4, x3, #4
 474:	add	x6, x0, x5
 478:	ldr	w7, [x0, x5]
 47c:	ldr	w5, [x0, x4]
 480:	cmp	w7, w5
 484:	b.ls	4b4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x26c>  // b.plast
 488:	cmp	x1, x3
 48c:	b.eq	4b4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x26c>  // b.none
 490:	add	x3, x0, x4
 494:	ldr	w9, [x0, x4]
 498:	ldp	x4, x5, [x6]
 49c:	cmp	x1, x8
 4a0:	ldr	x7, [x3, #8]
 4a4:	stp	x4, x5, [x3]
 4a8:	str	w9, [x6]
 4ac:	str	x7, [x6, #8]
 4b0:	b.cc	448 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x200>  // b.lo, b.ul, b.last
 4b4:	sub	x2, x2, #0x10
 4b8:	subs	x8, x8, #0x1
 4bc:	b.ne	3cc <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x184>  // b.any
 4c0:	ldp	x21, x22, [sp, #16]
 4c4:	ldp	x23, x24, [sp, #32]
 4c8:	ldp	x25, x26, [sp, #48]
 4cc:	ldp	x27, x28, [sp, #64]
 4d0:	ldr	x30, [sp, #80]
 4d4:	ldp	x19, x20, [sp], #128
 4d8:	ret
 4dc:	tst	x3, x28
 4e0:	b.eq	518 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x2d0>  // b.none
 4e4:	clz	x0, x28
 4e8:	mov	w1, #0x3f                  	// #63
 4ec:	sub	w0, w1, w0
 4f0:	add	w4, w0, #0x1
 4f4:	lsl	x4, x25, x4
 4f8:	cmp	x4, x28
 4fc:	b.ls	664 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x41c>  // b.plast
 500:	lsl	x0, x25, x0
 504:	cmp	x0, x28
 508:	b.cs	680 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x438>  // b.hs, b.nlast
 50c:	cmp	x3, x4
 510:	b.hi	608 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x3c0>  // b.pmore
 514:	mov	x28, x4
 518:	ldr	x0, [x20]
 51c:	lsl	x28, x28, #4
 520:	cbz	x0, 620 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x3d8>
 524:	sub	x1, x0, #0x1
 528:	tst	x1, x0
 52c:	b.ne	62c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x3e4>  // b.any
 530:	add	x28, x28, x1
 534:	neg	x0, x0
 538:	and	x28, x28, x0
 53c:	mov	x1, x26
 540:	mov	x0, x28
 544:	mov	w2, #0x0                   	// #0
 548:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 54c:	str	x0, [sp, #104]
 550:	ldr	x1, [x19]
 554:	ldr	x2, [x19, #16]
 558:	lsl	x2, x2, #4
 55c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 560:	ldp	x0, x1, [x19]
 564:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 568:	ldr	x3, [x19, #16]
 56c:	ldr	x4, [sp, #104]
 570:	stp	x4, x28, [x19]
 574:	add	x28, x3, #0x1
 578:	b	334 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0xec>
 57c:	ldr	x3, [x19, #16]
 580:	cmp	x4, x3
 584:	b.cc	608 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x3c0>  // b.lo, b.ul, b.last
 588:	ldr	x23, [x20]
 58c:	lsl	x21, x4, #4
 590:	ldr	x0, [x23]
 594:	cbz	x0, 63c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x3f4>
 598:	sub	x1, x0, #0x1
 59c:	tst	x1, x0
 5a0:	b.ne	62c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x3e4>  // b.any
 5a4:	add	x21, x21, x1
 5a8:	neg	x0, x0
 5ac:	and	x21, x21, x0
 5b0:	add	x1, x24, #0x0
 5b4:	mov	w2, #0x0                   	// #0
 5b8:	mov	x0, x21
 5bc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 5c0:	mov	x23, x0
 5c4:	ldr	x1, [x19]
 5c8:	ldr	x2, [x19, #16]
 5cc:	lsl	x2, x2, #4
 5d0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 5d4:	ldp	x0, x1, [x19]
 5d8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 5dc:	stp	x23, x21, [x19]
 5e0:	b	2e4 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x9c>
 5e4:	adrp	x2, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 5e8:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 5ec:	add	x2, x2, #0x0
 5f0:	add	x0, x0, #0x0
 5f4:	mov	w1, #0x1be                 	// #446
 5f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5fc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 600:	str	x0, [x21]
 604:	b	27c <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x34>
 608:	adrp	x2, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 60c:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 610:	add	x2, x2, #0x0
 614:	add	x0, x0, #0x0
 618:	mov	w1, #0x1fd                 	// #509
 61c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 620:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 624:	str	x0, [x20]
 628:	b	524 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x2dc>
 62c:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 630:	add	x0, x0, #0x0
 634:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 638:	bl	0 <_ZN11__sanitizer3DieEv>
 63c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 640:	str	x0, [x23]
 644:	b	598 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x350>
 648:	lsl	x11, x5, #5
 64c:	add	x6, x0, x5, lsl #5
 650:	ldr	w5, [x0, x11]
 654:	cmp	w10, w5
 658:	csel	x6, x6, x9, cc  // cc = lo, ul, last
 65c:	csel	x1, x1, x7, cc  // cc = lo, ul, last
 660:	b	488 <_ZN11__sanitizer20StackDepotReverseMapC1Ev+0x240>
 664:	adrp	x2, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 668:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 66c:	mov	x3, x28
 670:	add	x2, x2, #0x0
 674:	add	x0, x0, #0x0
 678:	mov	w1, #0x17b                 	// #379
 67c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 680:	mov	x4, x0
 684:	adrp	x2, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 688:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 68c:	mov	x3, x28
 690:	add	x2, x2, #0x0
 694:	add	x0, x0, #0x0
 698:	mov	w1, #0x17c                 	// #380
 69c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000006a0 <_ZN11__sanitizer20StackDepotReverseMap3GetEj>:
 6a0:	ldr	x4, [x0, #16]
 6a4:	cbnz	x4, 6b4 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x14>
 6a8:	mov	x0, #0x0                   	// #0
 6ac:	mov	x1, #0x0                   	// #0
 6b0:	ret
 6b4:	mov	x5, x4
 6b8:	mov	x2, #0x0                   	// #0
 6bc:	str	x30, [sp, #-16]!
 6c0:	cmp	x5, x2
 6c4:	b.ls	6f8 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x58>  // b.plast
 6c8:	add	x3, x5, x2
 6cc:	ldr	x7, [x0]
 6d0:	cmp	x4, x3, lsr #1
 6d4:	lsr	x3, x3, #1
 6d8:	b.ls	734 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x94>  // b.plast
 6dc:	lsl	x6, x3, #4
 6e0:	ldr	w6, [x7, x6]
 6e4:	cmp	w1, w6
 6e8:	b.ls	72c <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x8c>  // b.plast
 6ec:	add	x2, x3, #0x1
 6f0:	cmp	x5, x2
 6f4:	b.hi	6c8 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x28>  // b.pmore
 6f8:	cmp	x4, x2
 6fc:	b.cc	71c <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x7c>  // b.lo, b.ul, b.last
 700:	ldr	x0, [x0]
 704:	b.eq	75c <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0xbc>  // b.none
 708:	lsl	x2, x2, #4
 70c:	add	x3, x0, x2
 710:	ldr	w0, [x0, x2]
 714:	cmp	w0, w1
 718:	b.eq	74c <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0xac>  // b.none
 71c:	mov	x0, #0x0                   	// #0
 720:	mov	x1, #0x0                   	// #0
 724:	ldr	x30, [sp], #16
 728:	ret
 72c:	mov	x5, x3
 730:	b	6c0 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x20>
 734:	adrp	x2, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 738:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 73c:	add	x2, x2, #0x0
 740:	add	x0, x0, #0x0
 744:	mov	w1, #0x1ba                 	// #442
 748:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 74c:	ldr	x1, [x3, #8]
 750:	add	x0, x1, #0x18
 754:	ldr	x1, [x1, #16]
 758:	b	724 <_ZN11__sanitizer20StackDepotReverseMap3GetEj+0x84>
 75c:	adrp	x2, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 760:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 764:	add	x2, x2, #0x0
 768:	add	x0, x0, #0x0
 76c:	mov	x3, x4
 770:	mov	w1, #0x1b6                 	// #438
 774:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000778 <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE>:
 778:	str	x30, [sp, #-16]!
 77c:	mov	x2, x1
 780:	mov	x3, #0x0                   	// #0
 784:	mov	x1, x0
 788:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 78c:	add	x0, x0, #0x0
 790:	bl	0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 794:	cbz	x0, 7a4 <_ZN11__sanitizer13StackDepotPutENS_10StackTraceE+0x2c>
 798:	ldr	w0, [x0, #8]
 79c:	ldr	x30, [sp], #16
 7a0:	ret
 7a4:	mov	w0, #0x0                   	// #0
 7a8:	ldr	x30, [sp], #16
 7ac:	ret

00000000000007b0 <_ZN11__sanitizer24StackDepotPut_WithHandleENS_10StackTraceE>:
 7b0:	mov	x2, x1
 7b4:	mov	x3, #0x0                   	// #0
 7b8:	mov	x1, x0
 7bc:	adrp	x0, 0 <_ZN11__sanitizer16StackDepotHandle2idEv>
 7c0:	add	x0, x0, #0x0
 7c4:	b	0 <_ZN11__sanitizer16StackDepotHandle2idEv>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

Disassembly of section .text._ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb:

0000000000000000 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>:
   0:	stp	x19, x20, [sp, #-160]!
   4:	stp	x21, x22, [sp, #16]
   8:	mov	x22, x2
   c:	mov	x21, x1
  10:	stp	x23, x24, [sp, #32]
  14:	mov	x24, x0
  18:	mov	x23, x3
  1c:	stp	x25, x26, [sp, #48]
  20:	lsr	x25, x2, #32
  24:	stp	x27, x28, [sp, #64]
  28:	mov	w28, w25
  2c:	mov	w27, w2
  30:	str	x30, [sp, #80]
  34:	cbz	x3, 3c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x3c>
  38:	strb	wzr, [x3]
  3c:	cmp	x21, #0x0
  40:	mov	x0, #0x0                   	// #0
  44:	ccmp	w22, #0x0, #0x4, ne  // ne = any
  48:	b.ne	68 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x68>  // b.any
  4c:	ldp	x21, x22, [sp, #16]
  50:	ldp	x23, x24, [sp, #32]
  54:	ldp	x25, x26, [sp, #48]
  58:	ldp	x27, x28, [sp, #64]
  5c:	ldr	x30, [sp, #80]
  60:	ldp	x19, x20, [sp], #160
  64:	ret
  68:	mov	w4, #0xb28c                	// #45708
  6c:	mov	w20, #0xe995                	// #59797
  70:	movk	w4, #0x9747, lsl #16
  74:	mov	w26, w22
  78:	eor	w5, w4, w22, lsl #3
  7c:	mov	x1, #0x0                   	// #0
  80:	movk	w20, #0x5bd1, lsl #16
  84:	nop
  88:	ldr	x4, [x21, x1, lsl #3]
  8c:	mul	w5, w5, w20
  90:	add	x1, x1, #0x1
  94:	cmp	x26, x1
  98:	mul	w4, w20, w4
  9c:	eor	w4, w4, w4, lsr #24
  a0:	mul	w4, w4, w20
  a4:	eor	w5, w4, w5
  a8:	b.hi	88 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x88>  // b.pmore
  ac:	eor	w4, w5, w5, lsr #13
  b0:	mul	w20, w4, w20
  b4:	eor	w20, w20, w20, lsr #15
  b8:	and	x5, x20, #0xfffff
  bc:	ubfiz	x2, x20, #3, #20
  c0:	add	x2, x24, x2
  c4:	ldr	x9, [x24, x5, lsl #3]
  c8:	ands	x9, x9, #0xfffffffffffffffe
  cc:	b.eq	138 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x138>  // b.none
  d0:	and	w10, w20, #0xfff00000
  d4:	mov	x4, x9
  d8:	ldr	w1, [x4, #12]
  dc:	and	w1, w1, #0xfff00000
  e0:	cmp	w1, w10
  e4:	b.ne	130 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x130>  // b.any
  e8:	bfxil	x6, x27, #0, #32
  ec:	ldr	x0, [x4, #16]
  f0:	bfi	x6, x28, #32, #32
  f4:	cmp	x0, x6
  f8:	b.ne	130 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x130>  // b.any
  fc:	ldr	w0, [x4, #16]
 100:	cbz	x0, 19c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x19c>
 104:	add	x3, x4, #0x18
 108:	mov	x1, #0x0                   	// #0
 10c:	b	11c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x11c>
 110:	add	x1, x1, #0x1
 114:	cmp	x0, x1
 118:	b.eq	19c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x19c>  // b.none
 11c:	ldr	x8, [x3, x1, lsl #3]
 120:	ldr	x7, [x21, x1, lsl #3]
 124:	cmp	x8, x7
 128:	b.eq	110 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x110>  // b.none
 12c:	nop
 130:	ldr	x4, [x4]
 134:	cbnz	x4, d8 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0xd8>
 138:	mov	w1, #0x0                   	// #0
 13c:	ldr	x0, [x2]
 140:	tbnz	w0, #0, 168 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x168>
 144:	orr	x3, x0, #0x1
 148:	ldxr	x6, [x2]
 14c:	cmp	x6, x0
 150:	b.ne	15c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x15c>  // b.any
 154:	stlxr	w4, x3, [x2]
 158:	cbnz	w4, 148 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x148>
 15c:	dmb	ish
 160:	cmp	x0, x6
 164:	b.eq	1a4 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x1a4>  // b.none
 168:	cmp	w1, #0x9
 16c:	b.gt	178 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x178>
 170:	add	w1, w1, #0x1
 174:	b	13c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x13c>
 178:	stp	x5, x2, [sp, #104]
 17c:	str	x9, [sp, #120]
 180:	str	w1, [sp, #128]
 184:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
 188:	ldr	w1, [sp, #128]
 18c:	ldp	x5, x2, [sp, #104]
 190:	add	w1, w1, #0x1
 194:	ldr	x9, [sp, #120]
 198:	b	13c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x13c>
 19c:	mov	x0, x4
 1a0:	b	4c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x4c>
 1a4:	cmp	x9, x6
 1a8:	b.eq	218 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x218>  // b.none
 1ac:	cbz	x6, 218 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x218>
 1b0:	and	w8, w20, #0xfff00000
 1b4:	mov	x4, x6
 1b8:	ldr	w0, [x4, #12]
 1bc:	and	w0, w0, #0xfff00000
 1c0:	cmp	w0, w8
 1c4:	b.ne	210 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x210>  // b.any
 1c8:	bfxil	x19, x27, #0, #32
 1cc:	ldr	x0, [x4, #16]
 1d0:	bfi	x19, x28, #32, #32
 1d4:	cmp	x0, x19
 1d8:	b.ne	210 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x210>  // b.any
 1dc:	ldr	w3, [x4, #16]
 1e0:	cbz	x3, 310 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x310>
 1e4:	add	x7, x4, #0x18
 1e8:	mov	x1, #0x0                   	// #0
 1ec:	b	1fc <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x1fc>
 1f0:	add	x1, x1, #0x1
 1f4:	cmp	x3, x1
 1f8:	b.eq	310 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x310>  // b.none
 1fc:	ldr	x2, [x7, x1, lsl #3]
 200:	ldr	x0, [x21, x1, lsl #3]
 204:	cmp	x2, x0
 208:	b.eq	1f0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x1f0>  // b.none
 20c:	nop
 210:	ldr	x4, [x4]
 214:	cbnz	x4, 1b8 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x1b8>
 218:	lsr	x7, x5, #12
 21c:	add	x0, x7, #0x200, lsl #12
 220:	add	x0, x24, x0, lsl #2
 224:	ldxr	w3, [x0]
 228:	add	w1, w3, #0x1
 22c:	stlxr	w2, w1, [x0]
 230:	cbnz	w2, 224 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x224>
 234:	add	x28, x24, #0x800, lsl #12
 238:	mov	w0, #0x7fffff              	// #8388607
 23c:	add	w3, w3, #0x1
 240:	dmb	ish
 244:	cmp	w3, w0
 248:	ldr	x0, [x28, #1024]
 24c:	add	x0, x0, #0x1
 250:	str	x0, [x28, #1024]
 254:	b.hi	428 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x428>  // b.pmore
 258:	orr	w7, w3, w7, lsl #23
 25c:	cbz	w7, 444 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x444>
 260:	adrp	x9, 0 <_ZN11__sanitizer22thePersistentAllocatorE>
 264:	sub	w27, w22, #0x1
 268:	add	x27, x27, #0x4
 26c:	ldr	x1, [x9]
 270:	lsl	x27, x27, #3
 274:	add	x2, x1, #0x8
 278:	ldr	x19, [x1, #8]
 27c:	dmb	ish
 280:	ldr	x3, [x1, #16]
 284:	dmb	ish
 288:	cbz	x19, 320 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x320>
 28c:	add	x0, x27, x19
 290:	cmp	x0, x3
 294:	b.hi	320 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x320>  // b.pmore
 298:	ldxr	x3, [x2]
 29c:	cmp	x3, x19
 2a0:	b.ne	2ac <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x2ac>  // b.any
 2a4:	stlxr	w4, x0, [x2]
 2a8:	cbnz	w4, 298 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x298>
 2ac:	dmb	ish
 2b0:	cmp	x3, x19
 2b4:	b.ne	278 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x278>  // b.any
 2b8:	ldr	x0, [x28, #1032]
 2bc:	and	w20, w20, #0xfff00000
 2c0:	lsl	x2, x26, #3
 2c4:	mov	x1, x21
 2c8:	add	x27, x0, x27
 2cc:	str	x27, [x28, #1032]
 2d0:	str	w7, [x19, #8]
 2d4:	add	x0, x19, #0x18
 2d8:	str	w20, [x19, #12]
 2dc:	stp	w22, w25, [x19, #16]
 2e0:	stp	x5, x6, [sp, #104]
 2e4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 2e8:	ldr	x6, [sp, #112]
 2ec:	str	x6, [x19]
 2f0:	dmb	ish
 2f4:	ldr	x5, [sp, #104]
 2f8:	str	x19, [x24, x5, lsl #3]
 2fc:	cbz	x23, 308 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x308>
 300:	mov	w0, #0x1                   	// #1
 304:	strb	w0, [x23]
 308:	mov	x0, x19
 30c:	b	4c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x4c>
 310:	dmb	ish
 314:	str	x6, [x24, x5, lsl #3]
 318:	mov	x0, x4
 31c:	b	4c <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x4c>
 320:	ldr	x0, [x9]
 324:	mov	w2, #0x1                   	// #1
 328:	ldxrb	w1, [x0]
 32c:	stxrb	w3, w2, [x0]
 330:	cbnz	w3, 328 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x328>
 334:	dmb	ish
 338:	tst	w1, #0xff
 33c:	b.eq	360 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x360>  // b.none
 340:	str	x5, [sp, #104]
 344:	str	w7, [sp, #112]
 348:	str	x6, [sp, #120]
 34c:	bl	0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 350:	ldr	w7, [sp, #112]
 354:	adrp	x9, 0 <_ZN11__sanitizer22thePersistentAllocatorE>
 358:	ldr	x5, [sp, #104]
 35c:	ldr	x6, [sp, #120]
 360:	adrp	x0, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 364:	ldr	x3, [x9]
 368:	add	x0, x0, #0x0
 36c:	str	x0, [sp, #152]
 370:	add	x4, x3, #0x8
 374:	nop
 378:	ldr	x19, [x3, #8]
 37c:	dmb	ish
 380:	ldr	x1, [x3, #16]
 384:	dmb	ish
 388:	cbz	x19, 3c4 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x3c4>
 38c:	add	x0, x27, x19
 390:	cmp	x0, x1
 394:	b.hi	3c4 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x3c4>  // b.pmore
 398:	ldxr	x1, [x4]
 39c:	cmp	x1, x19
 3a0:	b.ne	3ac <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x3ac>  // b.any
 3a4:	stlxr	w2, x0, [x4]
 3a8:	cbnz	w2, 398 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x398>
 3ac:	dmb	ish
 3b0:	cmp	x1, x19
 3b4:	b.ne	378 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x378>  // b.any
 3b8:	dmb	ish
 3bc:	strb	wzr, [x3]
 3c0:	b	2b8 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x2b8>
 3c4:	ldr	x10, [x9]
 3c8:	cmp	x27, #0x10, lsl #12
 3cc:	ldr	x1, [sp, #152]
 3d0:	mov	x19, #0x10000               	// #65536
 3d4:	str	xzr, [x10, #8]
 3d8:	csel	x19, x27, x19, cs  // cs = hs, nlast
 3dc:	mov	x0, x19
 3e0:	mov	w2, #0x0                   	// #0
 3e4:	stp	x10, x5, [sp, #104]
 3e8:	str	w7, [sp, #120]
 3ec:	stp	x6, x3, [sp, #128]
 3f0:	str	x4, [sp, #144]
 3f4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3f8:	dmb	ish
 3fc:	add	x19, x19, x0
 400:	ldr	x10, [sp, #104]
 404:	str	x19, [x10, #16]
 408:	dmb	ish
 40c:	str	x0, [x10, #8]
 410:	adrp	x9, 0 <_ZN11__sanitizer22thePersistentAllocatorE>
 414:	ldr	w7, [sp, #120]
 418:	ldr	x5, [sp, #112]
 41c:	ldp	x6, x3, [sp, #128]
 420:	ldr	x4, [sp, #144]
 424:	b	378 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb+0x378>
 428:	adrp	x2, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 42c:	adrp	x0, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 430:	add	x2, x2, #0x0
 434:	add	x0, x0, #0x0
 438:	mov	x4, #0x800000              	// #8388608
 43c:	mov	w1, #0x77                  	// #119
 440:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 444:	adrp	x2, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 448:	adrp	x0, 0 <_ZN11__sanitizer14StackDepotBaseINS_14StackDepotNodeELi1ELi20EE3PutENS_10StackTraceEPb>
 44c:	add	x2, x2, #0x0
 450:	add	x0, x0, #0x0
 454:	mov	x4, #0x0                   	// #0
 458:	mov	x3, #0x0                   	// #0
 45c:	mov	w1, #0x79                  	// #121
 460:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_stacktrace.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>:
   0:	add	x0, x0, #0x4
   4:	ret

0000000000000008 <_ZN11__sanitizer10StackTrace12GetCurrentPcEv>:
   8:	str	x30, [sp, #-16]!
   c:	mov	x0, x30
  10:	ldr	x30, [sp], #16
  14:	ret

0000000000000018 <_ZN11__sanitizer18BufferedStackTrace4InitEPKmmm>:
  18:	stp	x19, x20, [sp, #-32]!
  1c:	cmp	x3, #0x0
  20:	stp	x21, x30, [sp, #16]
  24:	mov	x21, x3
  28:	cinc	w3, w2, ne  // ne = any
  2c:	str	w3, [x0, #8]
  30:	cmp	w3, #0x100
  34:	b.hi	68 <_ZN11__sanitizer18BufferedStackTrace4InitEPKmmm+0x50>  // b.pmore
  38:	mov	x19, x0
  3c:	mov	x20, x2
  40:	add	x0, x0, #0x10
  44:	lsl	x2, x2, #3
  48:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  4c:	cbz	x21, 58 <_ZN11__sanitizer18BufferedStackTrace4InitEPKmmm+0x40>
  50:	add	x20, x20, #0x2
  54:	str	x21, [x19, x20, lsl #3]
  58:	ldp	x21, x30, [sp, #16]
  5c:	str	xzr, [x19, #2064]
  60:	ldp	x19, x20, [sp], #32
  64:	ret
  68:	adrp	x2, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
  6c:	adrp	x0, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
  70:	mov	w3, w3
  74:	add	x2, x2, #0x0
  78:	add	x0, x0, #0x0
  7c:	mov	x4, #0x100                 	// #256
  80:	mov	w1, #0x22                  	// #34
  84:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000088 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj>:
  88:	stp	x19, x20, [sp, #-64]!
  8c:	mov	x19, x0
  90:	mov	w20, w5
  94:	stp	x23, x24, [sp, #32]
  98:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
  9c:	mov	x24, x1
  a0:	ldr	x23, [x23]
  a4:	stp	x21, x22, [sp, #16]
  a8:	mov	x22, x2
  ac:	stp	x25, x30, [sp, #48]
  b0:	mov	x21, x3
  b4:	mov	x25, x4
  b8:	ldr	x0, [x23]
  bc:	cbz	x0, 168 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xe0>
  c0:	cmp	w20, #0x1
  c4:	mov	w3, w20
  c8:	b.ls	17c <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xf4>  // b.plast
  cc:	mov	w1, #0x1                   	// #1
  d0:	str	w1, [x19, #8]
  d4:	str	x24, [x19, #16]
  d8:	cmp	x21, #0xfff
  dc:	b.ls	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.plast
  e0:	cmp	x22, x25
  e4:	b.ls	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.plast
  e8:	sub	x21, x21, #0x10
  ec:	cmp	x22, x21
  f0:	b.cs	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.hs, b.nlast
  f4:	tst	x22, #0x7
  f8:	b.ne	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.any
  fc:	mov	x2, x22
 100:	ldr	x3, [x2, #8]
 104:	cmp	x0, x3
 108:	b.hi	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.pmore
 10c:	cmp	x24, x3
 110:	b.eq	124 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0x9c>  // b.none
 114:	add	x4, x19, w1, uxtw #3
 118:	add	w1, w1, #0x1
 11c:	str	w1, [x19, #8]
 120:	str	x3, [x4, #16]
 124:	ldr	x2, [x2]
 128:	cmp	x2, x22
 12c:	b.ls	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.plast
 130:	cmp	x2, x21
 134:	b.cs	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.hs, b.nlast
 138:	tst	x2, #0x7
 13c:	b.ne	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.any
 140:	ldr	w1, [x19, #8]
 144:	cmp	w1, w20
 148:	b.cs	154 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0xcc>  // b.hs, b.nlast
 14c:	mov	x22, x2
 150:	b	100 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0x78>
 154:	ldp	x21, x22, [sp, #16]
 158:	ldp	x23, x24, [sp, #32]
 15c:	ldp	x25, x30, [sp, #48]
 160:	ldp	x19, x20, [sp], #64
 164:	ret
 168:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 16c:	str	x0, [x23]
 170:	cmp	w20, #0x1
 174:	mov	w3, w20
 178:	b.hi	cc <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj+0x44>  // b.pmore
 17c:	adrp	x2, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 180:	adrp	x0, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 184:	add	x2, x2, #0x0
 188:	add	x0, x0, #0x0
 18c:	mov	x4, #0x2                   	// #2
 190:	mov	w1, #0x47                  	// #71
 194:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000198 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm>:
 198:	ldr	w2, [x0, #8]
 19c:	cmp	x1, w2, uxtw
 1a0:	b.cs	22c <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x94>  // b.hs, b.nlast
 1a4:	sub	w6, w2, w1
 1a8:	str	w6, [x0, #8]
 1ac:	cbz	w6, 228 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x90>
 1b0:	sub	x3, x6, #0x1
 1b4:	cmp	x3, #0x9
 1b8:	ccmp	x1, #0x1, #0x0, hi  // hi = pmore
 1bc:	b.ls	20c <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x74>  // b.plast
 1c0:	add	x4, x1, #0x2
 1c4:	lsr	x3, x6, #1
 1c8:	add	x5, x0, #0x10
 1cc:	mov	x2, #0x0                   	// #0
 1d0:	add	x4, x0, x4, lsl #3
 1d4:	lsl	x3, x3, #4
 1d8:	ldr	q0, [x4, x2]
 1dc:	str	q0, [x5, x2]
 1e0:	add	x2, x2, #0x10
 1e4:	cmp	x2, x3
 1e8:	b.ne	1d8 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x40>  // b.any
 1ec:	and	x2, x6, #0xfffffffffffffffe
 1f0:	tbz	w6, #0, 228 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x90>
 1f4:	add	x1, x2, x1
 1f8:	add	x2, x2, #0x2
 1fc:	add	x1, x1, #0x2
 200:	ldr	x1, [x0, x1, lsl #3]
 204:	str	x1, [x0, x2, lsl #3]
 208:	ret
 20c:	add	x0, x0, #0x10
 210:	add	x2, x0, w6, uxtw #3
 214:	nop
 218:	ldr	x3, [x0, x1, lsl #3]
 21c:	str	x3, [x0], #8
 220:	cmp	x0, x2
 224:	b.ne	218 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm+0x80>  // b.any
 228:	ret
 22c:	str	x30, [sp, #-16]!
 230:	mov	w4, w2
 234:	mov	x3, x1
 238:	adrp	x2, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 23c:	adrp	x0, 0 <_ZN11__sanitizer10StackTrace20GetNextInstructionPcEm>
 240:	add	x2, x2, #0x0
 244:	add	x0, x0, #0x0
 248:	mov	w1, #0x78                  	// #120
 24c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000250 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm>:
 250:	ldr	w9, [x0, #8]
 254:	cmp	x9, #0x1
 258:	b.ls	2b0 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm+0x60>  // b.plast
 25c:	ldr	x10, [x0]
 260:	mov	x3, #0x1                   	// #1
 264:	mov	x0, #0x0                   	// #0
 268:	ldr	x2, [x10]
 26c:	nop
 270:	sub	x7, x1, x2
 274:	ldr	x6, [x10, x3, lsl #3]
 278:	sub	x5, x2, x1
 27c:	cmp	x6, x1
 280:	sub	x8, x1, x6
 284:	sub	x4, x6, x1
 288:	csel	x4, x4, x8, cs  // cs = hs, nlast
 28c:	cmp	x2, x1
 290:	csel	x5, x5, x7, cs  // cs = hs, nlast
 294:	cmp	x5, x4
 298:	csel	x0, x3, x0, hi  // hi = pmore
 29c:	add	x3, x3, #0x1
 2a0:	csel	x2, x6, x2, hi  // hi = pmore
 2a4:	cmp	x9, x3
 2a8:	b.ne	270 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm+0x20>  // b.any
 2ac:	ret
 2b0:	mov	x0, #0x0                   	// #0
 2b4:	ret

sanitizer_stacktrace_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK11__sanitizer10StackTrace5PrintEv>:
   0:	stp	x19, x20, [sp, #-176]!
   4:	stp	x21, x22, [sp, #16]
   8:	mov	x21, x0
   c:	ldr	x0, [x0]
  10:	str	x30, [sp, #80]
  14:	cbz	x0, 74 <_ZNK11__sanitizer10StackTrace5PrintEv+0x74>
  18:	ldr	w0, [x21, #8]
  1c:	cbz	w0, 74 <_ZNK11__sanitizer10StackTrace5PrintEv+0x74>
  20:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
  24:	stp	x23, x24, [sp, #32]
  28:	ldr	x22, [x20]
  2c:	stp	x25, x26, [sp, #48]
  30:	stp	x27, x28, [sp, #64]
  34:	ldr	x0, [x22]
  38:	cbz	x0, 90 <_ZNK11__sanitizer10StackTrace5PrintEv+0x90>
  3c:	str	xzr, [sp, #112]
  40:	cmp	xzr, x0, lsl #1
  44:	stp	xzr, xzr, [sp, #120]
  48:	lsl	x19, x0, #1
  4c:	b.ne	bc <_ZNK11__sanitizer10StackTrace5PrintEv+0xbc>  // b.any
  50:	stp	xzr, xzr, [sp, #128]
  54:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  58:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  5c:	add	x2, x2, #0x0
  60:	add	x0, x0, #0x0
  64:	mov	x4, #0x0                   	// #0
  68:	mov	x3, #0x0                   	// #0
  6c:	mov	w1, #0x1b6                 	// #438
  70:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  74:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  78:	add	x0, x0, #0x0
  7c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
  80:	ldp	x21, x22, [sp, #16]
  84:	ldr	x30, [sp, #80]
  88:	ldp	x19, x20, [sp], #176
  8c:	ret
  90:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  94:	str	x0, [x22]
  98:	str	xzr, [sp, #112]
  9c:	mov	x19, x0
  a0:	stp	xzr, xzr, [sp, #120]
  a4:	cmp	xzr, x0, lsl #1
  a8:	lsl	x1, x0, #1
  ac:	b.eq	50 <_ZNK11__sanitizer10StackTrace5PrintEv+0x50>  // b.none
  b0:	cbnz	x0, 454 <_ZNK11__sanitizer10StackTrace5PrintEv+0x454>
  b4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  b8:	str	x0, [x22]
  bc:	sub	x1, x0, #0x1
  c0:	tst	x1, x0
  c4:	b.ne	428 <_ZNK11__sanitizer10StackTrace5PrintEv+0x428>  // b.any
  c8:	add	x1, x19, x1
  cc:	neg	x0, x0
  d0:	and	x23, x1, x0
  d4:	mov	w2, #0x0                   	// #0
  d8:	mov	x0, x23
  dc:	adrp	x24, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
  e0:	add	x1, x24, #0x0
  e4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  e8:	ldr	x1, [sp, #112]
  ec:	mov	x22, x0
  f0:	ldr	x2, [sp, #128]
  f4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  f8:	ldp	x0, x1, [sp, #112]
  fc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 100:	stp	x22, x23, [sp, #112]
 104:	ldr	x2, [sp, #128]
 108:	cmp	x19, x2
 10c:	b.ls	44c <_ZNK11__sanitizer10StackTrace5PrintEv+0x44c>  // b.plast
 110:	cmp	x19, x23
 114:	b.hi	30c <_ZNK11__sanitizer10StackTrace5PrintEv+0x30c>  // b.pmore
 118:	add	x0, x22, x2
 11c:	mov	w1, #0x0                   	// #0
 120:	sub	x2, x19, x2
 124:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 128:	stp	x19, xzr, [sp, #128]
 12c:	ldr	x22, [sp, #112]
 130:	cbz	x19, 54 <_ZNK11__sanitizer10StackTrace5PrintEv+0x54>
 134:	ldr	x23, [x20]
 138:	strb	wzr, [x22]
 13c:	ldr	x19, [x23]
 140:	cbz	x19, 2c0 <_ZNK11__sanitizer10StackTrace5PrintEv+0x2c0>
 144:	str	xzr, [sp, #144]
 148:	stp	xzr, xzr, [sp, #152]
 14c:	sub	x23, x19, #0x1
 150:	ands	x23, x23, x19
 154:	b.ne	428 <_ZNK11__sanitizer10StackTrace5PrintEv+0x428>  // b.any
 158:	lsl	x0, x19, #1
 15c:	neg	x25, x19
 160:	sub	x0, x0, #0x1
 164:	add	x1, x24, #0x0
 168:	and	x25, x0, x25
 16c:	mov	w2, #0x0                   	// #0
 170:	mov	x0, x25
 174:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 178:	ldr	x1, [sp, #144]
 17c:	mov	x22, x0
 180:	ldr	x2, [sp, #160]
 184:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 188:	ldp	x0, x1, [sp, #144]
 18c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 190:	stp	x22, x25, [sp, #144]
 194:	ldr	x2, [sp, #160]
 198:	cmp	x19, x2
 19c:	b.ls	45c <_ZNK11__sanitizer10StackTrace5PrintEv+0x45c>  // b.plast
 1a0:	cmp	x19, x25
 1a4:	b.hi	384 <_ZNK11__sanitizer10StackTrace5PrintEv+0x384>  // b.pmore
 1a8:	add	x0, x22, x2
 1ac:	mov	w1, #0x0                   	// #0
 1b0:	sub	x2, x19, x2
 1b4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 1b8:	ldr	x22, [sp, #144]
 1bc:	stp	x19, xzr, [sp, #160]
 1c0:	adrp	x26, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 1c4:	strb	wzr, [x22]
 1c8:	ldr	x1, [x26]
 1cc:	str	xzr, [sp, #96]
 1d0:	ldr	w0, [x21, #8]
 1d4:	ldr	w27, [x1, #184]
 1d8:	cbz	w0, 3f4 <_ZNK11__sanitizer10StackTrace5PrintEv+0x3f4>
 1dc:	adrp	x24, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 1e0:	add	x28, sp, #0x70
 1e4:	add	x24, x24, #0x0
 1e8:	ldr	x0, [x21]
 1ec:	ldr	x1, [sp, #96]
 1f0:	ldr	x19, [x0, x1, lsl #3]
 1f4:	cbz	x19, 3f4 <_ZNK11__sanitizer10StackTrace5PrintEv+0x3f4>
 1f8:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 1fc:	sub	x1, x19, #0x4
 200:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
 204:	str	x0, [sp, #104]
 208:	cbz	x0, 364 <_ZNK11__sanitizer10StackTrace5PrintEv+0x364>
 20c:	mov	x25, x0
 210:	adrp	x22, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 214:	ldr	x0, [sp, #128]
 218:	add	x22, x22, #0x0
 21c:	mov	x19, x23
 220:	ldr	x2, [sp, #112]
 224:	cbz	x0, 54 <_ZNK11__sanitizer10StackTrace5PrintEv+0x54>
 228:	ldr	x1, [x26]
 22c:	strb	wzr, [x2]
 230:	mov	x6, x24
 234:	mov	w2, w19
 238:	add	x3, x25, #0x8
 23c:	mov	x0, x28
 240:	ldrb	w4, [x1, #181]
 244:	add	x20, x19, #0x1
 248:	ldr	x5, [x1, #24]
 24c:	str	xzr, [sp, #136]
 250:	ldr	x1, [x1, #192]
 254:	bl	0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>
 258:	ldr	x1, [sp, #112]
 25c:	mov	x0, x22
 260:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 264:	add	w1, w27, w23
 268:	sub	w0, w1, w19
 26c:	sub	w19, w1, w20
 270:	cmp	w0, #0x0
 274:	b.le	290 <_ZNK11__sanitizer10StackTrace5PrintEv+0x290>
 278:	ldr	x0, [sp, #168]
 27c:	cbnz	x0, 2ac <_ZNK11__sanitizer10StackTrace5PrintEv+0x2ac>
 280:	ldr	x1, [x25, #40]
 284:	cbz	x1, 290 <_ZNK11__sanitizer10StackTrace5PrintEv+0x290>
 288:	add	x0, sp, #0x90
 28c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 290:	ldr	x25, [x25]
 294:	cbz	x25, 2e0 <_ZNK11__sanitizer10StackTrace5PrintEv+0x2e0>
 298:	ldr	x0, [sp, #128]
 29c:	mov	x19, x20
 2a0:	ldr	x2, [sp, #112]
 2a4:	cbnz	x0, 228 <_ZNK11__sanitizer10StackTrace5PrintEv+0x228>
 2a8:	b	54 <_ZNK11__sanitizer10StackTrace5PrintEv+0x54>
 2ac:	add	x0, sp, #0x90
 2b0:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 2b4:	add	x1, x1, #0x0
 2b8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 2bc:	b	280 <_ZNK11__sanitizer10StackTrace5PrintEv+0x280>
 2c0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 2c4:	str	x0, [x23]
 2c8:	str	xzr, [sp, #144]
 2cc:	mov	x19, x0
 2d0:	stp	xzr, xzr, [sp, #152]
 2d4:	cbnz	x0, 14c <_ZNK11__sanitizer10StackTrace5PrintEv+0x14c>
 2d8:	stp	xzr, xzr, [sp, #160]
 2dc:	b	54 <_ZNK11__sanitizer10StackTrace5PrintEv+0x54>
 2e0:	ldr	x0, [sp, #104]
 2e4:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
 2e8:	ldr	x1, [sp, #96]
 2ec:	ldr	w0, [x21, #8]
 2f0:	add	x1, x1, #0x1
 2f4:	str	x1, [sp, #96]
 2f8:	cmp	x0, x1
 2fc:	b.ls	3f4 <_ZNK11__sanitizer10StackTrace5PrintEv+0x3f4>  // b.plast
 300:	mov	x23, x20
 304:	mov	w27, w19
 308:	b	1e8 <_ZNK11__sanitizer10StackTrace5PrintEv+0x1e8>
 30c:	ldr	x22, [x20]
 310:	ldr	x0, [x22]
 314:	cbz	x0, 3dc <_ZNK11__sanitizer10StackTrace5PrintEv+0x3dc>
 318:	sub	x1, x0, #0x1
 31c:	tst	x1, x0
 320:	b.ne	428 <_ZNK11__sanitizer10StackTrace5PrintEv+0x428>  // b.any
 324:	add	x1, x19, x1
 328:	neg	x0, x0
 32c:	and	x23, x1, x0
 330:	mov	w2, #0x0                   	// #0
 334:	add	x1, x24, #0x0
 338:	mov	x0, x23
 33c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 340:	mov	x22, x0
 344:	ldr	x1, [sp, #112]
 348:	ldr	x2, [sp, #128]
 34c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 350:	ldp	x0, x1, [sp, #112]
 354:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 358:	stp	x22, x23, [sp, #112]
 35c:	ldr	x2, [sp, #128]
 360:	b	118 <_ZNK11__sanitizer10StackTrace5PrintEv+0x118>
 364:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 368:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 36c:	add	x2, x2, #0x0
 370:	add	x0, x0, #0x0
 374:	mov	x4, #0x0                   	// #0
 378:	mov	x3, #0x0                   	// #0
 37c:	mov	w1, #0x22                  	// #34
 380:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 384:	ldr	x20, [x20]
 388:	ldr	x0, [x20]
 38c:	cbz	x0, 3e8 <_ZNK11__sanitizer10StackTrace5PrintEv+0x3e8>
 390:	sub	x1, x0, #0x1
 394:	tst	x1, x0
 398:	b.ne	428 <_ZNK11__sanitizer10StackTrace5PrintEv+0x428>  // b.any
 39c:	add	x1, x19, x1
 3a0:	neg	x0, x0
 3a4:	and	x20, x1, x0
 3a8:	mov	w2, #0x0                   	// #0
 3ac:	add	x1, x24, #0x0
 3b0:	mov	x0, x20
 3b4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3b8:	mov	x22, x0
 3bc:	ldr	x1, [sp, #144]
 3c0:	ldr	x2, [sp, #160]
 3c4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3c8:	ldp	x0, x1, [sp, #144]
 3cc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3d0:	stp	x22, x20, [sp, #144]
 3d4:	ldr	x2, [sp, #160]
 3d8:	b	1a8 <_ZNK11__sanitizer10StackTrace5PrintEv+0x1a8>
 3dc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 3e0:	str	x0, [x22]
 3e4:	b	318 <_ZNK11__sanitizer10StackTrace5PrintEv+0x318>
 3e8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 3ec:	str	x0, [x20]
 3f0:	b	390 <_ZNK11__sanitizer10StackTrace5PrintEv+0x390>
 3f4:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 3f8:	add	x0, x0, #0x0
 3fc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 400:	ldr	x0, [sp, #168]
 404:	cbnz	x0, 438 <_ZNK11__sanitizer10StackTrace5PrintEv+0x438>
 408:	ldp	x0, x1, [sp, #144]
 40c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 410:	ldp	x0, x1, [sp, #112]
 414:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 418:	ldp	x23, x24, [sp, #32]
 41c:	ldp	x25, x26, [sp, #48]
 420:	ldp	x27, x28, [sp, #64]
 424:	b	80 <_ZNK11__sanitizer10StackTrace5PrintEv+0x80>
 428:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 42c:	add	x0, x0, #0x0
 430:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 434:	bl	0 <_ZN11__sanitizer3DieEv>
 438:	ldr	x1, [sp, #144]
 43c:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 440:	add	x0, x0, #0x0
 444:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 448:	b	408 <_ZNK11__sanitizer10StackTrace5PrintEv+0x408>
 44c:	stp	x19, xzr, [sp, #128]
 450:	b	134 <_ZNK11__sanitizer10StackTrace5PrintEv+0x134>
 454:	mov	x19, x1
 458:	b	bc <_ZNK11__sanitizer10StackTrace5PrintEv+0xbc>
 45c:	stp	x19, xzr, [sp, #160]
 460:	b	1c0 <_ZNK11__sanitizer10StackTrace5PrintEv+0x1c0>
 464:	nop

0000000000000468 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>:
 468:	mov	w8, w1
 46c:	and	w7, w7, #0xff
 470:	mov	x1, x2
 474:	mov	x9, x0
 478:	mov	x2, x3
 47c:	mov	x3, x5
 480:	cbnz	w8, 490 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x28>
 484:	str	wzr, [x0, #8]
 488:	str	xzr, [x0, #2064]
 48c:	ret
 490:	str	x2, [x0, #2064]
 494:	cmp	w8, #0x1
 498:	b.eq	4bc <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x54>  // b.none
 49c:	cbnz	w7, 4b0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x48>
 4a0:	cbz	x4, 4c8 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb+0x60>
 4a4:	mov	w3, w8
 4a8:	mov	x2, x4
 4ac:	b	0 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj>
 4b0:	mov	w5, w8
 4b4:	mov	x4, x6
 4b8:	b	0 <_ZN11__sanitizer18BufferedStackTrace15FastUnwindStackEmmmmj>
 4bc:	str	w8, [x9, #8]
 4c0:	str	x1, [x9, #16]
 4c4:	ret
 4c8:	mov	w2, w8
 4cc:	b	0 <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj>

00000000000004d0 <__sanitizer_symbolize_pc>:
 4d0:	cbnz	x3, 4d8 <__sanitizer_symbolize_pc+0x8>
 4d4:	ret
 4d8:	stp	x19, x20, [sp, #-112]!
 4dc:	mov	x19, x2
 4e0:	mov	x20, x3
 4e4:	stp	x21, x22, [sp, #16]
 4e8:	mov	x21, x0
 4ec:	stp	x23, x24, [sp, #32]
 4f0:	mov	x23, x1
 4f4:	str	x30, [sp, #72]
 4f8:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 4fc:	sub	x1, x21, #0x4
 500:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
 504:	mov	x21, x0
 508:	cbz	x0, 744 <__sanitizer_symbolize_pc+0x274>
 50c:	stp	x25, x26, [sp, #48]
 510:	adrp	x26, 0 <_ZN11__sanitizer14PageSizeCachedE>
 514:	ldr	x24, [x26]
 518:	ldr	x22, [x24]
 51c:	str	x27, [sp, #64]
 520:	cbz	x22, 67c <__sanitizer_symbolize_pc+0x1ac>
 524:	str	xzr, [sp, #80]
 528:	stp	xzr, xzr, [sp, #88]
 52c:	sub	x0, x22, #0x1
 530:	tst	x0, x22
 534:	b.ne	734 <__sanitizer_symbolize_pc+0x264>  // b.any
 538:	lsl	x0, x22, #1
 53c:	neg	x25, x22
 540:	sub	x0, x0, #0x1
 544:	mov	w2, #0x0                   	// #0
 548:	and	x25, x0, x25
 54c:	adrp	x27, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 550:	mov	x0, x25
 554:	add	x1, x27, #0x0
 558:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 55c:	mov	x24, x0
 560:	ldr	x1, [sp, #80]
 564:	ldr	x2, [sp, #96]
 568:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 56c:	ldp	x0, x1, [sp, #80]
 570:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 574:	stp	x24, x25, [sp, #80]
 578:	ldr	x2, [sp, #96]
 57c:	cmp	x22, x2
 580:	b.ls	784 <__sanitizer_symbolize_pc+0x2b4>  // b.plast
 584:	cmp	x22, x25
 588:	b.hi	6d0 <__sanitizer_symbolize_pc+0x200>  // b.pmore
 58c:	add	x0, x24, x2
 590:	mov	w1, #0x0                   	// #0
 594:	sub	x2, x22, x2
 598:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 59c:	ldr	x24, [sp, #80]
 5a0:	stp	x22, xzr, [sp, #96]
 5a4:	sub	x20, x20, #0x1
 5a8:	strb	wzr, [x24]
 5ac:	add	x20, x19, x20
 5b0:	cmp	x19, x20
 5b4:	b.cs	64c <__sanitizer_symbolize_pc+0x17c>  // b.hs, b.nlast
 5b8:	adrp	x25, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 5bc:	adrp	x26, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 5c0:	add	x27, sp, #0x50
 5c4:	add	x26, x26, #0x0
 5c8:	ldr	x25, [x25]
 5cc:	mov	w22, #0x0                   	// #0
 5d0:	ldr	x0, [sp, #96]
 5d4:	ldr	x1, [sp, #80]
 5d8:	cbz	x0, 698 <__sanitizer_symbolize_pc+0x1c8>
 5dc:	strb	wzr, [x1]
 5e0:	mov	x0, x27
 5e4:	mov	x6, x26
 5e8:	add	x3, x21, #0x8
 5ec:	ldrb	w4, [x25, #181]
 5f0:	mov	w2, w22
 5f4:	ldr	x5, [x25, #24]
 5f8:	mov	x1, x23
 5fc:	str	xzr, [sp, #104]
 600:	bl	0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>
 604:	ldr	x0, [sp, #104]
 608:	cbz	x0, 6b8 <__sanitizer_symbolize_pc+0x1e8>
 60c:	ldr	x1, [sp, #80]
 610:	sub	x24, x20, x19
 614:	sub	x24, x24, #0x1
 618:	mov	x0, x19
 61c:	mov	x2, x24
 620:	add	w22, w22, #0x1
 624:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 628:	ldr	x2, [sp, #104]
 62c:	cmp	x2, x24
 630:	csel	x2, x2, x24, ls  // ls = plast
 634:	add	x19, x19, x2
 638:	strb	wzr, [x19], #1
 63c:	ldr	x21, [x21]
 640:	cmp	x21, #0x0
 644:	ccmp	x20, x19, #0x0, ne  // ne = any
 648:	b.hi	5d0 <__sanitizer_symbolize_pc+0x100>  // b.pmore
 64c:	cmp	x19, x20
 650:	b.hi	764 <__sanitizer_symbolize_pc+0x294>  // b.pmore
 654:	ldp	x0, x1, [sp, #80]
 658:	strb	wzr, [x19]
 65c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 660:	ldp	x25, x26, [sp, #48]
 664:	ldr	x27, [sp, #64]
 668:	ldp	x21, x22, [sp, #16]
 66c:	ldp	x23, x24, [sp, #32]
 670:	ldr	x30, [sp, #72]
 674:	ldp	x19, x20, [sp], #112
 678:	ret
 67c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 680:	str	x0, [x24]
 684:	str	xzr, [sp, #80]
 688:	mov	x22, x0
 68c:	stp	xzr, xzr, [sp, #88]
 690:	cbnz	x0, 52c <__sanitizer_symbolize_pc+0x5c>
 694:	stp	xzr, xzr, [sp, #96]
 698:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 69c:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 6a0:	add	x2, x2, #0x0
 6a4:	add	x0, x0, #0x0
 6a8:	mov	x4, #0x0                   	// #0
 6ac:	mov	x3, #0x0                   	// #0
 6b0:	mov	w1, #0x1b6                 	// #438
 6b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 6b8:	ldr	x21, [x21]
 6bc:	add	w22, w22, #0x1
 6c0:	cmp	x21, #0x0
 6c4:	ccmp	x20, x19, #0x0, ne  // ne = any
 6c8:	b.hi	5d0 <__sanitizer_symbolize_pc+0x100>  // b.pmore
 6cc:	b	64c <__sanitizer_symbolize_pc+0x17c>
 6d0:	ldr	x26, [x26]
 6d4:	ldr	x0, [x26]
 6d8:	cbz	x0, 728 <__sanitizer_symbolize_pc+0x258>
 6dc:	sub	x1, x0, #0x1
 6e0:	tst	x0, x1
 6e4:	b.ne	734 <__sanitizer_symbolize_pc+0x264>  // b.any
 6e8:	add	x1, x22, x1
 6ec:	neg	x0, x0
 6f0:	and	x25, x1, x0
 6f4:	mov	w2, #0x0                   	// #0
 6f8:	add	x1, x27, #0x0
 6fc:	mov	x0, x25
 700:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 704:	mov	x24, x0
 708:	ldr	x1, [sp, #80]
 70c:	ldr	x2, [sp, #96]
 710:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 714:	ldp	x0, x1, [sp, #80]
 718:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 71c:	stp	x24, x25, [sp, #80]
 720:	ldr	x2, [sp, #96]
 724:	b	58c <__sanitizer_symbolize_pc+0xbc>
 728:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 72c:	str	x0, [x26]
 730:	b	6dc <__sanitizer_symbolize_pc+0x20c>
 734:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 738:	add	x0, x0, #0x0
 73c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 740:	bl	0 <_ZN11__sanitizer3DieEv>
 744:	mov	x0, x19
 748:	add	x19, x19, x20
 74c:	mov	x2, x20
 750:	adrp	x1, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 754:	add	x1, x1, #0x0
 758:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 75c:	sturb	wzr, [x19, #-1]
 760:	b	668 <__sanitizer_symbolize_pc+0x198>
 764:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 768:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 76c:	add	x2, x2, #0x0
 770:	add	x0, x0, #0x0
 774:	mov	x4, #0x0                   	// #0
 778:	mov	x3, #0x0                   	// #0
 77c:	mov	w1, #0x84                  	// #132
 780:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 784:	stp	x22, xzr, [sp, #96]
 788:	b	5a4 <__sanitizer_symbolize_pc+0xd4>
 78c:	nop

0000000000000790 <__sanitizer_symbolize_global>:
 790:	cbnz	x3, 798 <__sanitizer_symbolize_global+0x8>
 794:	ret
 798:	stp	x19, x20, [sp, #-176]!
 79c:	mov	x20, x0
 7a0:	mov	x19, x3
 7a4:	stp	x21, x22, [sp, #16]
 7a8:	mov	x22, x1
 7ac:	mov	x21, x2
 7b0:	stp	x23, x24, [sp, #32]
 7b4:	add	x23, sp, #0x70
 7b8:	mov	x0, x23
 7bc:	str	x30, [sp, #72]
 7c0:	strb	wzr, [x2]
 7c4:	bl	0 <_ZN11__sanitizer8DataInfoC1Ev>
 7c8:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 7cc:	mov	x2, x23
 7d0:	mov	x1, x20
 7d4:	bl	0 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE>
 7d8:	tst	w0, #0xff
 7dc:	b.eq	8c0 <__sanitizer_symbolize_global+0x130>  // b.none
 7e0:	stp	x25, x26, [sp, #48]
 7e4:	adrp	x26, 0 <_ZN11__sanitizer14PageSizeCachedE>
 7e8:	ldr	x24, [x26]
 7ec:	ldr	x20, [x24]
 7f0:	str	x27, [sp, #64]
 7f4:	cbz	x20, 8d4 <__sanitizer_symbolize_global+0x144>
 7f8:	str	xzr, [sp, #80]
 7fc:	stp	xzr, xzr, [sp, #88]
 800:	sub	x0, x20, #0x1
 804:	tst	x0, x20
 808:	b.ne	974 <__sanitizer_symbolize_global+0x1e4>  // b.any
 80c:	lsl	x0, x20, #1
 810:	neg	x25, x20
 814:	sub	x0, x0, #0x1
 818:	mov	w2, #0x0                   	// #0
 81c:	and	x25, x0, x25
 820:	adrp	x27, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 824:	mov	x0, x25
 828:	add	x1, x27, #0x0
 82c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 830:	mov	x24, x0
 834:	ldr	x1, [sp, #80]
 838:	ldr	x2, [sp, #96]
 83c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 840:	ldp	x0, x1, [sp, #80]
 844:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 848:	stp	x24, x25, [sp, #80]
 84c:	ldr	x2, [sp, #96]
 850:	cmp	x20, x2
 854:	b.ls	984 <__sanitizer_symbolize_global+0x1f4>  // b.plast
 858:	cmp	x20, x25
 85c:	b.hi	910 <__sanitizer_symbolize_global+0x180>  // b.pmore
 860:	add	x0, x24, x2
 864:	mov	w1, #0x0                   	// #0
 868:	sub	x2, x20, x2
 86c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 870:	ldr	x24, [sp, #80]
 874:	stp	x20, xzr, [sp, #96]
 878:	adrp	x3, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 87c:	strb	wzr, [x24]
 880:	mov	x2, x23
 884:	ldr	x3, [x3]
 888:	mov	x1, x22
 88c:	add	x0, sp, #0x50
 890:	ldr	x3, [x3, #24]
 894:	bl	0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 898:	ldr	x1, [sp, #80]
 89c:	mov	x2, x19
 8a0:	mov	x0, x21
 8a4:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 8a8:	ldp	x0, x1, [sp, #80]
 8ac:	add	x2, x21, x19
 8b0:	sturb	wzr, [x2, #-1]
 8b4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 8b8:	ldp	x25, x26, [sp, #48]
 8bc:	ldr	x27, [sp, #64]
 8c0:	ldp	x21, x22, [sp, #16]
 8c4:	ldp	x23, x24, [sp, #32]
 8c8:	ldr	x30, [sp, #72]
 8cc:	ldp	x19, x20, [sp], #176
 8d0:	ret
 8d4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 8d8:	str	x0, [x24]
 8dc:	str	xzr, [sp, #80]
 8e0:	mov	x20, x0
 8e4:	stp	xzr, xzr, [sp, #88]
 8e8:	cbnz	x0, 800 <__sanitizer_symbolize_global+0x70>
 8ec:	adrp	x2, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 8f0:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 8f4:	add	x2, x2, #0x0
 8f8:	add	x0, x0, #0x0
 8fc:	mov	x4, #0x0                   	// #0
 900:	mov	x3, #0x0                   	// #0
 904:	mov	w1, #0x1b6                 	// #438
 908:	stp	xzr, xzr, [sp, #96]
 90c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 910:	ldr	x26, [x26]
 914:	ldr	x0, [x26]
 918:	cbz	x0, 968 <__sanitizer_symbolize_global+0x1d8>
 91c:	sub	x1, x0, #0x1
 920:	tst	x0, x1
 924:	b.ne	974 <__sanitizer_symbolize_global+0x1e4>  // b.any
 928:	add	x1, x20, x1
 92c:	neg	x0, x0
 930:	and	x25, x1, x0
 934:	mov	w2, #0x0                   	// #0
 938:	add	x1, x27, #0x0
 93c:	mov	x0, x25
 940:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 944:	mov	x24, x0
 948:	ldr	x1, [sp, #80]
 94c:	ldr	x2, [sp, #96]
 950:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 954:	ldp	x0, x1, [sp, #80]
 958:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 95c:	stp	x24, x25, [sp, #80]
 960:	ldr	x2, [sp, #96]
 964:	b	860 <__sanitizer_symbolize_global+0xd0>
 968:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 96c:	str	x0, [x26]
 970:	b	91c <__sanitizer_symbolize_global+0x18c>
 974:	adrp	x0, 0 <_ZNK11__sanitizer10StackTrace5PrintEv>
 978:	add	x0, x0, #0x0
 97c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 980:	bl	0 <_ZN11__sanitizer3DieEv>
 984:	stp	x20, xzr, [sp, #96]
 988:	b	878 <__sanitizer_symbolize_global+0xe8>
 98c:	nop

0000000000000990 <__sanitizer_get_module_and_offset_for_pc>:
 990:	stp	x19, x20, [sp, #-64]!
 994:	mov	x19, x1
 998:	mov	x20, x2
 99c:	stp	x21, x22, [sp, #16]
 9a0:	mov	x21, x0
 9a4:	mov	x22, x3
 9a8:	str	x30, [sp, #32]
 9ac:	str	xzr, [sp, #56]
 9b0:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 9b4:	mov	x1, x21
 9b8:	mov	x3, x22
 9bc:	add	x2, sp, #0x38
 9c0:	mov	w21, #0x0                   	// #0
 9c4:	bl	0 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>
 9c8:	tst	w0, #0xff
 9cc:	b.eq	9e0 <__sanitizer_get_module_and_offset_for_pc+0x50>  // b.none
 9d0:	cmp	x19, #0x0
 9d4:	mov	w21, #0x1                   	// #1
 9d8:	ccmp	x20, #0x0, #0x4, ne  // ne = any
 9dc:	b.ne	9f4 <__sanitizer_get_module_and_offset_for_pc+0x64>  // b.any
 9e0:	mov	w0, w21
 9e4:	ldp	x21, x22, [sp, #16]
 9e8:	ldr	x30, [sp, #32]
 9ec:	ldp	x19, x20, [sp], #64
 9f0:	ret
 9f4:	ldr	x1, [sp, #56]
 9f8:	mov	x0, x19
 9fc:	add	x19, x19, x20
 a00:	mov	x2, x20
 a04:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
 a08:	sturb	wzr, [x19, #-1]
 a0c:	mov	w0, w21
 a10:	ldp	x21, x22, [sp, #16]
 a14:	ldr	x30, [sp, #32]
 a18:	ldp	x19, x20, [sp], #64
 a1c:	ret

sanitizer_stacktrace_printer.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>:
   0:	stp	x19, x20, [sp, #-80]!
   4:	stp	x21, x22, [sp, #16]
   8:	mov	x22, x2
   c:	str	x30, [sp, #64]
  10:	ldrb	w2, [x1]
  14:	cbz	w2, b0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xb0>
  18:	mov	x19, x1
  1c:	mov	x21, x0
  20:	stp	x23, x24, [sp, #32]
  24:	adrp	x23, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
  28:	mov	x24, x3
  2c:	add	x23, x23, #0x0
  30:	stp	x25, x26, [sp, #48]
  34:	adrp	x25, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
  38:	adrp	x26, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
  3c:	add	x25, x25, #0x0
  40:	b	5c <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x5c>
  44:	add	x19, x19, #0x2
  48:	add	x1, x26, #0x0
  4c:	mov	x0, x21
  50:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  54:	ldrb	w2, [x20, #1]
  58:	cbz	w2, a8 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xa8>
  5c:	cmp	w2, #0x25
  60:	add	x20, x19, #0x1
  64:	b.ne	ec <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xec>  // b.any
  68:	ldrb	w2, [x19, #1]
  6c:	cmp	w2, #0x6c
  70:	b.eq	10c <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x10c>  // b.none
  74:	b.hi	c0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0xc0>  // b.pmore
  78:	cmp	w2, #0x25
  7c:	b.eq	44 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x44>  // b.none
  80:	cmp	w2, #0x67
  84:	b.ne	124 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x124>  // b.any
  88:	ldr	x2, [x22, #40]
  8c:	mov	x1, x23
  90:	mov	x0, x21
  94:	add	x19, x19, #0x2
  98:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  9c:	ldrb	w2, [x20, #1]
  a0:	cbnz	w2, 5c <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x5c>
  a4:	nop
  a8:	ldp	x23, x24, [sp, #32]
  ac:	ldp	x25, x26, [sp, #48]
  b0:	ldp	x21, x22, [sp, #16]
  b4:	ldr	x30, [sp, #64]
  b8:	ldp	x19, x20, [sp], #80
  bc:	ret
  c0:	cmp	w2, #0x73
  c4:	b.ne	124 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x124>  // b.any
  c8:	ldr	x0, [x22, #24]
  cc:	mov	x1, x24
  d0:	add	x19, x19, #0x2
  d4:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
  d8:	mov	x2, x0
  dc:	mov	x1, x23
  e0:	mov	x0, x21
  e4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  e8:	b	54 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x54>
  ec:	mov	x0, x21
  f0:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
  f4:	add	x1, x1, #0x0
  f8:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
  fc:	mov	x0, x20
 100:	mov	x20, x19
 104:	mov	x19, x0
 108:	b	54 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x54>
 10c:	ldr	x2, [x22, #32]
 110:	add	x19, x19, #0x2
 114:	mov	x1, x25
 118:	mov	x0, x21
 11c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 120:	b	54 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_+0x54>
 124:	mov	w1, w2
 128:	adrp	x0, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 12c:	add	x0, x0, #0x0
 130:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 134:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000138 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_>:
 138:	stp	x19, x20, [sp, #-48]!
 13c:	cmp	w2, #0x0
 140:	and	w4, w4, #0xff
 144:	stp	x21, x22, [sp, #16]
 148:	mov	x20, x0
 14c:	mov	w19, w2
 150:	str	x30, [sp, #32]
 154:	mov	x0, x1
 158:	mov	w21, w3
 15c:	ccmp	w4, #0x0, #0x4, gt
 160:	mov	x1, x5
 164:	b.ne	1d4 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x9c>  // b.any
 168:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 16c:	mov	x2, x0
 170:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 174:	mov	x0, x20
 178:	add	x1, x1, #0x0
 17c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 180:	cmp	w19, #0x0
 184:	b.gt	198 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x60>
 188:	ldp	x21, x22, [sp, #16]
 18c:	ldr	x30, [sp, #32]
 190:	ldp	x19, x20, [sp], #48
 194:	ret
 198:	adrp	x22, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 19c:	add	x22, x22, #0x0
 1a0:	mov	w2, w19
 1a4:	mov	x1, x22
 1a8:	mov	x0, x20
 1ac:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 1b0:	cmp	w21, #0x0
 1b4:	b.le	188 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0x50>
 1b8:	mov	w2, w21
 1bc:	mov	x1, x22
 1c0:	mov	x0, x20
 1c4:	ldp	x21, x22, [sp, #16]
 1c8:	ldr	x30, [sp, #32]
 1cc:	ldp	x19, x20, [sp], #48
 1d0:	b	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 1d4:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 1d8:	mov	x2, x0
 1dc:	mov	w3, w19
 1e0:	mov	x0, x20
 1e4:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 1e8:	add	x1, x1, #0x0
 1ec:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 1f0:	cmp	w21, #0x0
 1f4:	b.gt	214 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_+0xdc>
 1f8:	mov	x0, x20
 1fc:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 200:	ldp	x21, x22, [sp, #16]
 204:	add	x1, x1, #0x0
 208:	ldr	x30, [sp, #32]
 20c:	ldp	x19, x20, [sp], #48
 210:	b	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 214:	mov	w2, w21
 218:	mov	x0, x20
 21c:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 220:	add	x1, x1, #0x0
 224:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 228:	mov	x0, x20
 22c:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 230:	ldp	x21, x22, [sp, #16]
 234:	add	x1, x1, #0x0
 238:	ldr	x30, [sp, #32]
 23c:	ldp	x19, x20, [sp], #48
 240:	b	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 244:	nop

0000000000000248 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_>:
 248:	stp	x19, x20, [sp, #-32]!
 24c:	mov	x20, x0
 250:	mov	w19, w3
 254:	mov	x0, x1
 258:	mov	x1, x4
 25c:	stp	x21, x30, [sp, #16]
 260:	mov	x21, x2
 264:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 268:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 26c:	mov	x2, x0
 270:	add	x1, x1, #0x0
 274:	mov	x0, x20
 278:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 27c:	cbnz	w19, 29c <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x54>
 280:	mov	x2, x21
 284:	mov	x0, x20
 288:	ldp	x21, x30, [sp, #16]
 28c:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 290:	ldp	x19, x20, [sp], #32
 294:	add	x1, x1, #0x0
 298:	b	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 29c:	cmp	w19, #0x5
 2a0:	b.eq	36c <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x124>  // b.none
 2a4:	b.hi	2ec <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0xa4>  // b.pmore
 2a8:	cmp	w19, #0x3
 2ac:	b.eq	360 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x118>  // b.none
 2b0:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 2b4:	cmp	w19, #0x4
 2b8:	add	x2, x1, #0x0
 2bc:	b.ne	318 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0xd0>  // b.any
 2c0:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 2c4:	mov	x0, x20
 2c8:	add	x1, x1, #0x0
 2cc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 2d0:	mov	x2, x21
 2d4:	mov	x0, x20
 2d8:	ldp	x21, x30, [sp, #16]
 2dc:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 2e0:	ldp	x19, x20, [sp], #32
 2e4:	add	x1, x1, #0x0
 2e8:	b	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 2ec:	cmp	w19, #0x7
 2f0:	b.eq	354 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x10c>  // b.none
 2f4:	cmp	w19, #0x8
 2f8:	b.ne	334 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0xec>  // b.any
 2fc:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 300:	mov	x0, x20
 304:	add	x2, x1, #0x0
 308:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 30c:	add	x1, x1, #0x0
 310:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 314:	b	2d0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x88>
 318:	cmp	w19, #0x1
 31c:	b.eq	348 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x100>  // b.none
 320:	cmp	w19, #0x2
 324:	b.ne	378 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x130>  // b.any
 328:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 32c:	add	x2, x1, #0x0
 330:	b	2c0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x78>
 334:	cmp	w19, #0x6
 338:	b.ne	378 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x130>  // b.any
 33c:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 340:	add	x2, x1, #0x0
 344:	b	2c0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x78>
 348:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 34c:	add	x2, x1, #0x0
 350:	b	2c0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x78>
 354:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 358:	add	x2, x1, #0x0
 35c:	b	2c0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x78>
 360:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 364:	add	x2, x1, #0x0
 368:	b	2c0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x78>
 36c:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 370:	add	x2, x1, #0x0
 374:	b	2c0 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_+0x78>
 378:	adrp	x2, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 37c:	adrp	x0, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 380:	add	x2, x2, #0x0
 384:	add	x0, x0, #0x0
 388:	mov	x4, #0x0                   	// #0
 38c:	mov	x3, #0x0                   	// #0
 390:	mov	w1, #0x2a9                 	// #681
 394:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000398 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>:
 398:	stp	x19, x20, [sp, #-112]!
 39c:	mov	x19, x1
 3a0:	mov	x20, x0
 3a4:	mov	x0, x1
 3a8:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 3ac:	add	x1, x1, #0x0
 3b0:	stp	x21, x22, [sp, #16]
 3b4:	mov	x21, x3
 3b8:	mov	x22, x6
 3bc:	stp	x23, x24, [sp, #32]
 3c0:	mov	x23, x5
 3c4:	stp	x25, x26, [sp, #48]
 3c8:	mov	w26, w2
 3cc:	stp	x27, x28, [sp, #64]
 3d0:	and	w27, w4, #0xff
 3d4:	str	x30, [sp, #80]
 3d8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 3dc:	cbz	w0, 708 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x370>
 3e0:	ldrb	w2, [x19]
 3e4:	cbz	w2, 4b8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x120>
 3e8:	adrp	x25, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 3ec:	adrp	x24, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 3f0:	add	x25, x25, #0x0
 3f4:	add	x24, x24, #0x0
 3f8:	b	488 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xf0>
 3fc:	ldrb	w2, [x19, #1]
 400:	cmp	w2, #0x6c
 404:	b.eq	6f0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x358>  // b.none
 408:	b.hi	530 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x198>  // b.pmore
 40c:	cmp	w2, #0x4d
 410:	b.eq	6b8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x320>  // b.none
 414:	b.ls	4fc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x164>  // b.plast
 418:	cmp	w2, #0x63
 41c:	b.eq	6a0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x308>  // b.none
 420:	cmp	w2, #0x66
 424:	b.ne	4d4 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x13c>  // b.any
 428:	ldr	x3, [x21, #32]
 42c:	cbz	x3, 468 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xd0>
 430:	cbz	x22, 468 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xd0>
 434:	mov	x0, x22
 438:	str	x3, [sp, #96]
 43c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 440:	mov	x2, x0
 444:	ldr	x3, [sp, #96]
 448:	mov	x1, x22
 44c:	stp	x2, x3, [sp, #96]
 450:	mov	x0, x3
 454:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
 458:	cmp	w0, #0x0
 45c:	ldp	x2, x3, [sp, #96]
 460:	add	x2, x3, x2
 464:	csel	x3, x2, x3, eq  // eq = none
 468:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 46c:	mov	x2, x3
 470:	add	x19, x19, #0x2
 474:	mov	x0, x20
 478:	add	x1, x1, #0x0
 47c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 480:	ldrb	w2, [x28, #1]
 484:	cbz	w2, 4b8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x120>
 488:	cmp	w2, #0x25
 48c:	add	x28, x19, #0x1
 490:	b.eq	3fc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x64>  // b.none
 494:	mov	x0, x20
 498:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 49c:	add	x1, x1, #0x0
 4a0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 4a4:	mov	x0, x28
 4a8:	mov	x28, x19
 4ac:	mov	x19, x0
 4b0:	ldrb	w2, [x28, #1]
 4b4:	cbnz	w2, 488 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xf0>
 4b8:	ldp	x21, x22, [sp, #16]
 4bc:	ldp	x23, x24, [sp, #32]
 4c0:	ldp	x25, x26, [sp, #48]
 4c4:	ldp	x27, x28, [sp, #64]
 4c8:	ldr	x30, [sp, #80]
 4cc:	ldp	x19, x20, [sp], #112
 4d0:	ret
 4d4:	cmp	w2, #0x53
 4d8:	b.ne	760 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x3c8>  // b.any
 4dc:	ldp	w2, w3, [x21, #56]
 4e0:	add	x19, x19, #0x2
 4e4:	ldr	x1, [x21, #48]
 4e8:	mov	x5, x23
 4ec:	mov	w4, w27
 4f0:	mov	x0, x20
 4f4:	bl	138 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_>
 4f8:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 4fc:	cmp	w2, #0x46
 500:	b.eq	608 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x270>  // b.none
 504:	cmp	w2, #0x4c
 508:	b.ne	564 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x1cc>  // b.any
 50c:	ldr	x1, [x21, #48]
 510:	add	x19, x19, #0x2
 514:	cbz	x1, 718 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x380>
 518:	ldp	w2, w3, [x21, #56]
 51c:	mov	x5, x23
 520:	mov	w4, w27
 524:	mov	x0, x20
 528:	bl	138 <_ZN11__sanitizer20RenderSourceLocationEPNS_20InternalScopedStringEPKciibS3_>
 52c:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 530:	cmp	w2, #0x70
 534:	b.eq	688 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x2f0>  // b.none
 538:	b.ls	5b4 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x21c>  // b.plast
 53c:	cmp	w2, #0x71
 540:	b.ne	584 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x1ec>  // b.any
 544:	ldr	x2, [x21, #40]
 548:	add	x19, x19, #0x2
 54c:	mov	x1, x24
 550:	mov	x0, x20
 554:	cmn	x2, #0x1
 558:	csel	x2, x2, xzr, ne  // ne = any
 55c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 560:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 564:	cmp	w2, #0x25
 568:	b.ne	760 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x3c8>  // b.any
 56c:	add	x19, x19, #0x2
 570:	mov	x0, x20
 574:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 578:	add	x1, x1, #0x0
 57c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 580:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 584:	cmp	w2, #0x73
 588:	b.ne	760 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x3c8>  // b.any
 58c:	ldr	x0, [x21, #48]
 590:	mov	x1, x23
 594:	bl	0 <_ZN11__sanitizer15StripPathPrefixEPKcS1_>
 598:	add	x19, x19, #0x2
 59c:	mov	x2, x0
 5a0:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 5a4:	mov	x0, x20
 5a8:	add	x1, x1, #0x0
 5ac:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 5b0:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 5b4:	cmp	w2, #0x6e
 5b8:	b.eq	5ec <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x254>  // b.none
 5bc:	cmp	w2, #0x6f
 5c0:	b.ne	5dc <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x244>  // b.any
 5c4:	ldr	x2, [x21, #16]
 5c8:	add	x19, x19, #0x2
 5cc:	mov	x1, x24
 5d0:	mov	x0, x20
 5d4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 5d8:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 5dc:	cmp	w2, #0x6d
 5e0:	b.ne	760 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x3c8>  // b.any
 5e4:	ldr	x0, [x21, #8]
 5e8:	b	590 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x1f8>
 5ec:	add	x19, x19, #0x2
 5f0:	mov	w2, w26
 5f4:	mov	x0, x20
 5f8:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 5fc:	add	x1, x1, #0x0
 600:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 604:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 608:	ldr	x3, [x21, #32]
 60c:	add	x19, x19, #0x2
 610:	cbz	x3, 480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 614:	cbz	x22, 64c <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x2b4>
 618:	mov	x0, x22
 61c:	str	x3, [sp, #96]
 620:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 624:	mov	x2, x0
 628:	ldr	x3, [sp, #96]
 62c:	mov	x1, x22
 630:	stp	x2, x3, [sp, #96]
 634:	mov	x0, x3
 638:	bl	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
 63c:	cmp	w0, #0x0
 640:	ldp	x2, x3, [sp, #96]
 644:	add	x2, x3, x2
 648:	csel	x3, x2, x3, eq  // eq = none
 64c:	mov	x0, x20
 650:	mov	x2, x3
 654:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 658:	add	x1, x1, #0x0
 65c:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 660:	ldr	x0, [x21, #48]
 664:	cbnz	x0, 480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 668:	ldr	x2, [x21, #40]
 66c:	cmn	x2, #0x1
 670:	b.eq	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>  // b.none
 674:	mov	x0, x20
 678:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 67c:	add	x1, x1, #0x0
 680:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 684:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 688:	ldr	x2, [x21]
 68c:	add	x19, x19, #0x2
 690:	mov	x1, x24
 694:	mov	x0, x20
 698:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 69c:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 6a0:	ldr	w2, [x21, #60]
 6a4:	add	x19, x19, #0x2
 6a8:	mov	x1, x25
 6ac:	mov	x0, x20
 6b0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 6b4:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 6b8:	ldr	x2, [x21]
 6bc:	add	x19, x19, #0x2
 6c0:	tbnz	x2, #60, 480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 6c4:	ldr	x0, [x21, #8]
 6c8:	cbz	x0, 738 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x3a0>
 6cc:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 6d0:	mov	x1, x0
 6d4:	ldr	w3, [x21, #24]
 6d8:	mov	x0, x20
 6dc:	ldr	x2, [x21, #16]
 6e0:	adrp	x4, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 6e4:	add	x4, x4, #0x0
 6e8:	bl	248 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_>
 6ec:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 6f0:	ldr	w2, [x21, #56]
 6f4:	add	x19, x19, #0x2
 6f8:	mov	x1, x25
 6fc:	mov	x0, x20
 700:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 704:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 708:	adrp	x19, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 70c:	mov	w2, #0x20                  	// #32
 710:	add	x19, x19, #0x0
 714:	b	3e8 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x50>
 718:	ldr	x1, [x21, #8]
 71c:	cbz	x1, 74c <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0x3b4>
 720:	ldr	w3, [x21, #24]
 724:	mov	x4, x23
 728:	ldr	x2, [x21, #16]
 72c:	mov	x0, x20
 730:	bl	248 <_ZN11__sanitizer20RenderModuleLocationEPNS_20InternalScopedStringEPKcmNS_10ModuleArchES3_>
 734:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 738:	mov	x0, x20
 73c:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 740:	add	x1, x1, #0x0
 744:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 748:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 74c:	mov	x0, x20
 750:	adrp	x1, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 754:	add	x1, x1, #0x0
 758:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
 75c:	b	480 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_+0xe8>
 760:	mov	w1, w2
 764:	adrp	x0, 0 <_ZN11__sanitizer10RenderDataEPNS_20InternalScopedStringEPKcPKNS_8DataInfoES3_>
 768:	add	x0, x0, #0x0
 76c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 770:	bl	0 <_ZN11__sanitizer3DieEv>

sanitizer_stacktrace_sparc.o:     file format elf64-littleaarch64


sanitizer_stoptheworld_linux_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>:
       0:	ldr	x0, [x0, #24]
       4:	ret

0000000000000008 <_ZNK11__sanitizer25SuspendedThreadsListLinux13RegisterCountEv>:
       8:	mov	x0, #0x22                  	// #34
       c:	ret

0000000000000010 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm>:
      10:	ldr	x4, [x0, #24]
      14:	cmp	x1, x4
      18:	b.cs	28 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm+0x18>  // b.hs, b.nlast
      1c:	ldr	x0, [x0, #8]
      20:	ldr	x0, [x0, x1, lsl #3]
      24:	ret
      28:	str	x30, [sp, #-16]!
      2c:	mov	x3, x1
      30:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
      34:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
      38:	add	x2, x2, #0x0
      3c:	add	x0, x0, #0x0
      40:	mov	w1, #0x202                 	// #514
      44:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000048 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_>:
      48:	stp	x19, x20, [sp, #-352]!
      4c:	mov	x19, x2
      50:	adrp	x4, 10 <_ZNK11__sanitizer25SuspendedThreadsListLinux11GetThreadIDEm>
      54:	ldr	x2, [x0]
      58:	stp	x21, x22, [sp, #16]
      5c:	add	x4, x4, #0x0
      60:	stp	x23, x30, [sp, #32]
      64:	mov	x20, x3
      68:	ldr	x2, [x2, #24]
      6c:	cmp	x2, x4
      70:	b.ne	114 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0xcc>  // b.any
      74:	ldr	x4, [x0, #24]
      78:	mov	x3, x1
      7c:	cmp	x1, x4
      80:	b.cs	138 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0xf0>  // b.hs, b.nlast
      84:	ldr	x0, [x0, #8]
      88:	ldr	x21, [x0, x1, lsl #3]
      8c:	add	x3, sp, #0x40
      90:	mov	x2, #0x1                   	// #1
      94:	mov	w1, w21
      98:	add	x22, sp, #0x50
      9c:	mov	x23, #0x110                 	// #272
      a0:	mov	w0, #0x4204                	// #16900
      a4:	stp	x22, x23, [sp, #64]
      a8:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
      ac:	add	x1, sp, #0x3c
      b0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
      b4:	tst	w0, #0xff
      b8:	b.eq	e8 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0xa0>  // b.none
      bc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
      c0:	ldr	w2, [sp, #60]
      c4:	ldr	x0, [x0]
      c8:	ldr	w0, [x0]
      cc:	cbnz	w0, 120 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0xd8>
      d0:	cmp	w2, #0x3
      d4:	csetm	w0, eq  // eq = none
      d8:	ldp	x21, x22, [sp, #16]
      dc:	ldp	x23, x30, [sp, #32]
      e0:	ldp	x19, x20, [sp], #352
      e4:	ret
      e8:	ldr	x0, [sp, #328]
      ec:	str	x0, [x20]
      f0:	mov	x2, x23
      f4:	mov	x1, x22
      f8:	mov	x0, x19
      fc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     100:	mov	w0, #0x1                   	// #1
     104:	ldp	x21, x22, [sp, #16]
     108:	ldp	x23, x30, [sp, #32]
     10c:	ldp	x19, x20, [sp], #352
     110:	ret
     114:	blr	x2
     118:	mov	x21, x0
     11c:	b	8c <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0x44>
     120:	mov	w1, w21
     124:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     128:	add	x0, x0, #0x0
     12c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     130:	ldr	w2, [sp, #60]
     134:	b	d0 <_ZNK11__sanitizer25SuspendedThreadsListLinux17GetRegistersAndSPEmPmS1_+0x88>
     138:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     13c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     140:	add	x2, x2, #0x0
     144:	add	x0, x0, #0x0
     148:	mov	w1, #0x202                 	// #514
     14c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000150 <_ZN11__sanitizerL23TracerThreadDieCallbackEv>:
     150:	stp	x19, x20, [sp, #-32]!
     154:	adrp	x20, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     158:	ldr	x19, [x20]
     15c:	str	x30, [sp, #24]
     160:	cbz	x19, 17c <_ZN11__sanitizerL23TracerThreadDieCallbackEv+0x2c>
     164:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
     168:	adrp	x1, 0 <_ZN11__sanitizer23stoptheworld_tracer_pidE>
     16c:	ldr	x1, [x1]
     170:	ldr	x1, [x1]
     174:	cmp	x0, x1
     178:	b.eq	188 <_ZN11__sanitizerL23TracerThreadDieCallbackEv+0x38>  // b.none
     17c:	ldr	x30, [sp, #24]
     180:	ldp	x19, x20, [sp], #32
     184:	ret
     188:	ldr	x0, [x19, #32]
     18c:	cbz	x0, 1c4 <_ZN11__sanitizerL23TracerThreadDieCallbackEv+0x74>
     190:	str	x21, [sp, #16]
     194:	mov	x21, #0x0                   	// #0
     198:	ldr	x1, [x19, #16]
     19c:	mov	x3, #0x0                   	// #0
     1a0:	mov	x2, #0x0                   	// #0
     1a4:	mov	w0, #0x8                   	// #8
     1a8:	ldr	x1, [x1, x21, lsl #3]
     1ac:	add	x21, x21, #0x1
     1b0:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     1b4:	ldr	x0, [x19, #32]
     1b8:	cmp	x0, x21
     1bc:	b.hi	198 <_ZN11__sanitizerL23TracerThreadDieCallbackEv+0x48>  // b.pmore
     1c0:	ldr	x21, [sp, #16]
     1c4:	str	xzr, [x20]
     1c8:	b	17c <_ZN11__sanitizerL23TracerThreadDieCallbackEv+0x2c>
     1cc:	nop

00000000000001d0 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy>:
     1d0:	stp	x19, x20, [sp, #-96]!
     1d4:	mov	x19, x1
     1d8:	mov	x20, x0
     1dc:	ldr	x1, [x0, #32]
     1e0:	stp	x21, x22, [sp, #16]
     1e4:	str	x30, [sp, #64]
     1e8:	cbz	x1, 228 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x58>
     1ec:	mov	x2, #0x0                   	// #0
     1f0:	ldr	x4, [x0, #16]
     1f4:	b	204 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x34>
     1f8:	add	x2, x2, #0x1
     1fc:	cmp	x2, x1
     200:	b.eq	228 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x58>  // b.none
     204:	ldr	x3, [x4, x2, lsl #3]
     208:	cmp	x19, x3
     20c:	b.ne	1f8 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x28>  // b.any
     210:	mov	w21, #0x0                   	// #0
     214:	mov	w0, w21
     218:	ldp	x21, x22, [sp, #16]
     21c:	ldr	x30, [sp, #64]
     220:	ldp	x19, x20, [sp], #96
     224:	ret
     228:	mov	x3, #0x0                   	// #0
     22c:	mov	x2, #0x0                   	// #0
     230:	mov	w1, w19
     234:	mov	w0, #0x10                  	// #16
     238:	stp	x23, x24, [sp, #32]
     23c:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     240:	add	x1, sp, #0x50
     244:	mov	w23, w19
     248:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     24c:	ands	w21, w0, #0xff
     250:	b.ne	34c <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x17c>  // b.any
     254:	stp	x25, x26, [sp, #48]
     258:	adrp	x25, 0 <_ZN11__sanitizer17current_verbosityE>
     25c:	ldr	x0, [x25]
     260:	ldr	w0, [x0]
     264:	sxtw	x0, w0
     268:	cmp	x0, #0x1
     26c:	b.hi	378 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x1a8>  // b.pmore
     270:	add	x24, sp, #0x54
     274:	add	x22, sp, #0x58
     278:	mov	w2, #0x40000000            	// #1073741824
     27c:	mov	x1, x24
     280:	mov	w0, w23
     284:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
     288:	mov	x1, x22
     28c:	mov	x26, x0
     290:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     294:	tst	w0, #0xff
     298:	b.eq	2a8 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xd8>  // b.none
     29c:	ldr	w0, [sp, #88]
     2a0:	cmp	w0, #0x4
     2a4:	b.eq	278 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xa8>  // b.none
     2a8:	mov	x0, x26
     2ac:	mov	x1, x22
     2b0:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     2b4:	tst	w0, #0xff
     2b8:	b.ne	474 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x2a4>  // b.any
     2bc:	ldr	w3, [sp, #84]
     2c0:	and	w0, w3, #0xff
     2c4:	cmp	w0, #0x7f
     2c8:	b.ne	2f0 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x120>  // b.any
     2cc:	ubfx	x3, x3, #8, #8
     2d0:	cmp	w3, #0x13
     2d4:	b.eq	2f0 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x120>  // b.none
     2d8:	and	x3, x3, #0xff
     2dc:	mov	w1, w23
     2e0:	mov	x2, #0x0                   	// #0
     2e4:	mov	w0, #0x7                   	// #7
     2e8:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     2ec:	b	278 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xa8>
     2f0:	ldr	x4, [x20, #24]
     2f4:	str	x19, [sp, #88]
     2f8:	ldr	x3, [x20, #32]
     2fc:	add	x21, x20, #0x10
     300:	lsr	x4, x4, #3
     304:	cmp	x3, x4
     308:	b.hi	45c <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x28c>  // b.pmore
     30c:	add	x19, x3, #0x1
     310:	b.eq	38c <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x1bc>  // b.none
     314:	ldr	x23, [x20, #16]
     318:	str	x19, [x21, #16]
     31c:	mov	x1, x22
     320:	add	x0, x23, x3, lsl #3
     324:	mov	x2, #0x8                   	// #8
     328:	mov	w21, #0x1                   	// #1
     32c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     330:	mov	w0, w21
     334:	ldp	x21, x22, [sp, #16]
     338:	ldp	x23, x24, [sp, #32]
     33c:	ldp	x25, x26, [sp, #48]
     340:	ldr	x30, [sp, #64]
     344:	ldp	x19, x20, [sp], #96
     348:	ret
     34c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     350:	mov	w21, #0x0                   	// #0
     354:	ldr	x0, [x0]
     358:	ldr	w0, [x0]
     35c:	cbnz	w0, 440 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x270>
     360:	mov	w0, w21
     364:	ldp	x21, x22, [sp, #16]
     368:	ldp	x23, x24, [sp, #32]
     36c:	ldr	x30, [sp, #64]
     370:	ldp	x19, x20, [sp], #96
     374:	ret
     378:	mov	x1, x19
     37c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     380:	add	x0, x0, #0x0
     384:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     388:	b	270 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0xa0>
     38c:	tst	x3, x19
     390:	b.eq	3cc <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x1fc>  // b.none
     394:	clz	x2, x19
     398:	mov	w1, #0x3f                  	// #63
     39c:	sub	w2, w1, w2
     3a0:	mov	x1, #0x1                   	// #1
     3a4:	add	w4, w2, #0x1
     3a8:	lsl	x4, x1, x4
     3ac:	cmp	x4, x19
     3b0:	b.ls	50c <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x33c>  // b.plast
     3b4:	lsl	x1, x1, x2
     3b8:	cmp	x1, x19
     3bc:	b.cs	4ec <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x31c>  // b.hs, b.nlast
     3c0:	cmp	x3, x4
     3c4:	b.hi	4c4 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x2f4>  // b.pmore
     3c8:	mov	x19, x4
     3cc:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
     3d0:	lsl	x19, x19, #3
     3d4:	ldr	x23, [x23]
     3d8:	ldr	x0, [x23]
     3dc:	cbz	x0, 4a0 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x2d0>
     3e0:	sub	x1, x0, #0x1
     3e4:	tst	x0, x1
     3e8:	b.ne	4dc <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x30c>  // b.any
     3ec:	add	x19, x19, x1
     3f0:	neg	x0, x0
     3f4:	and	x19, x19, x0
     3f8:	mov	w2, #0x0                   	// #0
     3fc:	mov	x0, x19
     400:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     404:	add	x1, x1, #0x0
     408:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     40c:	ldr	x1, [x20, #16]
     410:	mov	x23, x0
     414:	ldr	x2, [x21, #16]
     418:	lsl	x2, x2, #3
     41c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     420:	ldr	x1, [x21, #8]
     424:	ldr	x0, [x20, #16]
     428:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     42c:	ldr	x3, [x21, #16]
     430:	str	x23, [x20, #16]
     434:	str	x19, [x21, #8]
     438:	add	x19, x3, #0x1
     43c:	b	318 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x148>
     440:	ldr	w2, [sp, #80]
     444:	mov	x1, x19
     448:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     44c:	add	x0, x0, #0x0
     450:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     454:	ldp	x23, x24, [sp, #32]
     458:	b	214 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x44>
     45c:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     460:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     464:	add	x2, x2, #0x0
     468:	add	x0, x0, #0x0
     46c:	mov	w1, #0x1be                 	// #446
     470:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     474:	ldr	x25, [x25]
     478:	ldr	w0, [x25]
     47c:	cbnz	w0, 4ac <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x2dc>
     480:	mov	w1, w19
     484:	mov	x3, #0x0                   	// #0
     488:	mov	x2, #0x0                   	// #0
     48c:	mov	w0, #0x11                  	// #17
     490:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     494:	ldp	x23, x24, [sp, #32]
     498:	ldp	x25, x26, [sp, #48]
     49c:	b	214 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x44>
     4a0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     4a4:	str	x0, [x23]
     4a8:	b	3e0 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x210>
     4ac:	ldr	w2, [sp, #88]
     4b0:	mov	x1, x19
     4b4:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     4b8:	add	x0, x0, #0x0
     4bc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     4c0:	b	480 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy+0x2b0>
     4c4:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     4c8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     4cc:	add	x2, x2, #0x0
     4d0:	add	x0, x0, #0x0
     4d4:	mov	w1, #0x1fd                 	// #509
     4d8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     4dc:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     4e0:	add	x0, x0, #0x0
     4e4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     4e8:	bl	0 <_ZN11__sanitizer3DieEv>
     4ec:	mov	x4, x1
     4f0:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     4f4:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     4f8:	mov	x3, x19
     4fc:	add	x2, x2, #0x0
     500:	add	x0, x0, #0x0
     504:	mov	w1, #0x17c                 	// #380
     508:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     50c:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     510:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     514:	mov	x3, x19
     518:	add	x2, x2, #0x0
     51c:	add	x0, x0, #0x0
     520:	mov	w1, #0x17b                 	// #379
     524:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000528 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>:
     528:	stp	x19, x20, [sp, #-80]!
     52c:	mov	x20, x0
     530:	ldr	x0, [x0, #32]
     534:	str	x30, [sp, #56]
     538:	cbz	x0, 5fc <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0xd4>
     53c:	mov	x19, #0x0                   	// #0
     540:	stp	x21, x22, [sp, #16]
     544:	adrp	x22, 0 <_ZN11__sanitizer17current_verbosityE>
     548:	stp	x23, x24, [sp, #32]
     54c:	adrp	x24, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     550:	add	x23, sp, #0x4c
     554:	add	x24, x24, #0x0
     558:	str	x25, [sp, #48]
     55c:	adrp	x25, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     560:	add	x25, x25, #0x0
     564:	b	598 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x70>
     568:	ldr	x2, [x22]
     56c:	mov	w1, w21
     570:	mov	x0, x24
     574:	ldr	w2, [x2]
     578:	sxtw	x2, w2
     57c:	cmp	x2, #0x1
     580:	b.ls	588 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x60>  // b.plast
     584:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     588:	ldr	x0, [x20, #32]
     58c:	add	x19, x19, #0x1
     590:	cmp	x0, x19
     594:	b.ls	5f0 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0xc8>  // b.plast
     598:	ldr	x1, [x20, #16]
     59c:	mov	x3, #0x0                   	// #0
     5a0:	mov	x2, #0x0                   	// #0
     5a4:	mov	w0, #0x11                  	// #17
     5a8:	ldr	x21, [x1, x19, lsl #3]
     5ac:	mov	w1, w21
     5b0:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     5b4:	mov	x1, x23
     5b8:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     5bc:	tst	w0, #0xff
     5c0:	b.eq	568 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x40>  // b.none
     5c4:	ldr	x0, [x22]
     5c8:	ldr	w0, [x0]
     5cc:	cbz	w0, 588 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x60>
     5d0:	ldr	w2, [sp, #76]
     5d4:	mov	x0, x25
     5d8:	mov	w1, w21
     5dc:	add	x19, x19, #0x1
     5e0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     5e4:	ldr	x0, [x20, #32]
     5e8:	cmp	x0, x19
     5ec:	b.hi	598 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv+0x70>  // b.pmore
     5f0:	ldp	x21, x22, [sp, #16]
     5f4:	ldp	x23, x24, [sp, #32]
     5f8:	ldr	x25, [sp, #48]
     5fc:	ldr	x30, [sp, #56]
     600:	ldp	x19, x20, [sp], #80
     604:	ret

0000000000000608 <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv>:
     608:	stp	x19, x20, [sp, #-32]!
     60c:	mov	x20, x0
     610:	ldr	x0, [x0, #32]
     614:	str	x30, [sp, #16]
     618:	cbz	x0, 648 <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv+0x40>
     61c:	mov	x19, #0x0                   	// #0
     620:	ldr	x1, [x20, #16]
     624:	mov	x3, #0x0                   	// #0
     628:	mov	x2, #0x0                   	// #0
     62c:	mov	w0, #0x8                   	// #8
     630:	ldr	x1, [x1, x19, lsl #3]
     634:	add	x19, x19, #0x1
     638:	bl	0 <_ZN11__sanitizer15internal_ptraceEiiPvS0_>
     63c:	ldr	x0, [x20, #32]
     640:	cmp	x0, x19
     644:	b.hi	620 <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv+0x18>  // b.pmore
     648:	ldr	x30, [sp, #16]
     64c:	ldp	x19, x20, [sp], #32
     650:	ret
     654:	nop

0000000000000658 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv>:
     658:	stp	x19, x20, [sp, #-96]!
     65c:	mov	w20, w0
     660:	add	x19, sp, #0x28
     664:	stp	x21, x30, [sp, #16]
     668:	mov	x0, x19
     66c:	stp	x1, x2, [sp, #40]
     670:	bl	0 <_ZNK11__sanitizer13SignalContext10GetAddressEv>
     674:	mov	x1, x0
     678:	mov	x0, x19
     67c:	str	x1, [sp, #56]
     680:	adrp	x21, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     684:	bl	0 <_ZNK11__sanitizer13SignalContext14IsMemoryAccessEv>
     688:	mov	w1, w0
     68c:	mov	x0, x19
     690:	strb	w1, [sp, #88]
     694:	bl	0 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv>
     698:	mov	w1, w0
     69c:	mov	x0, x19
     6a0:	str	w1, [sp, #92]
     6a4:	bl	0 <_ZN11__sanitizer13SignalContext10InitPcSpBpEv>
     6a8:	ldp	x2, x3, [sp, #56]
     6ac:	mov	w1, w20
     6b0:	ldr	x4, [sp, #72]
     6b4:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     6b8:	add	x0, x0, #0x0
     6bc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     6c0:	ldr	x19, [x21]
     6c4:	cbz	x19, 6fc <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0xa4>
     6c8:	mov	x0, x19
     6cc:	cmp	w20, #0x6
     6d0:	b.eq	70c <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0xb4>  // b.none
     6d4:	bl	528 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>
     6d8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     6dc:	add	x0, x0, #0x0
     6e0:	bl	0 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE>
     6e4:	tst	w0, #0xff
     6e8:	b.eq	714 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0xbc>  // b.none
     6ec:	ldr	x0, [x19]
     6f0:	mov	x1, #0x1                   	// #1
     6f4:	str	xzr, [x21]
     6f8:	str	x1, [x0, #104]
     6fc:	cmp	w20, #0x6
     700:	cset	w0, ne  // ne = any
     704:	add	w0, w0, #0x1
     708:	bl	0 <_ZN11__sanitizer14internal__exitEi>
     70c:	bl	608 <_ZN11__sanitizer15ThreadSuspender14KillAllThreadsEv>
     710:	b	6d8 <_ZN11__sanitizerL25TracerThreadSignalHandlerEiPNS_19__sanitizer_siginfoEPv+0x80>
     714:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     718:	add	x0, x0, #0x0
     71c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     720:	bl	0 <_ZN11__sanitizer3DieEv>
     724:	nop

0000000000000728 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv>:
     728:	stp	x19, x20, [sp, #-128]!
     72c:	stp	x21, x22, [sp, #16]
     730:	mov	x21, x0
     734:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
     738:	stp	x23, x24, [sp, #32]
     73c:	add	x23, sp, #0x60
     740:	ldr	w1, [x21, #40]
     744:	mov	x0, x23
     748:	stp	x25, x30, [sp, #48]
     74c:	bl	0 <_ZN11__sanitizer12ThreadListerC1Ei>
     750:	str	xzr, [sp, #64]
     754:	ldr	x19, [x22]
     758:	stp	xzr, xzr, [sp, #72]
     75c:	ldr	x0, [x19]
     760:	cbz	x0, 8f8 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1d0>
     764:	sub	x1, x0, #0x1
     768:	tst	x1, x0
     76c:	b.ne	904 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1dc>  // b.any
     770:	add	x19, x0, #0x7
     774:	neg	x0, x0
     778:	and	x19, x19, x0
     77c:	mov	w2, #0x0                   	// #0
     780:	mov	x0, x19
     784:	adrp	x24, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     788:	add	x1, x24, #0x0
     78c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     790:	ldr	x1, [sp, #64]
     794:	mov	x20, x0
     798:	ldr	x2, [sp, #80]
     79c:	lsl	x2, x2, #3
     7a0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     7a4:	ldp	x0, x1, [sp, #64]
     7a8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     7ac:	stp	x20, x19, [sp, #64]
     7b0:	cmp	x19, #0x3ff
     7b4:	b.ls	894 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x16c>  // b.plast
     7b8:	add	x25, sp, #0x40
     7bc:	mov	w24, #0x0                   	// #0
     7c0:	mov	x1, x25
     7c4:	mov	x0, x23
     7c8:	bl	0 <_ZN11__sanitizer12ThreadLister11ListThreadsEPNS_18InternalMmapVectorIyEE>
     7cc:	cbz	w0, 858 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x130>
     7d0:	cmp	w0, #0x1
     7d4:	b.ne	7f4 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0xcc>  // b.any
     7d8:	ldr	x19, [sp, #64]
     7dc:	ldr	x22, [sp, #80]
     7e0:	add	x22, x19, x22, lsl #3
     7e4:	cmp	x22, x19
     7e8:	b.eq	93c <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x214>  // b.none
     7ec:	mov	w20, w0
     7f0:	b	810 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0xe8>
     7f4:	ldr	x19, [sp, #64]
     7f8:	ldr	x22, [sp, #80]
     7fc:	add	x22, x19, x22, lsl #3
     800:	cmp	x22, x19
     804:	b.eq	848 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x120>  // b.none
     808:	mov	w20, #0x0                   	// #0
     80c:	nop
     810:	ldr	x1, [x19], #8
     814:	mov	x0, x21
     818:	bl	1d0 <_ZN11__sanitizer15ThreadSuspender13SuspendThreadEy>
     81c:	ands	w0, w0, #0xff
     820:	csel	w20, w20, w0, eq  // eq = none
     824:	cmp	x22, x19
     828:	b.ne	810 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0xe8>  // b.any
     82c:	eor	w20, w20, #0x1
     830:	and	w20, w20, #0xff
     834:	add	w24, w24, #0x1
     838:	cmp	w20, #0x0
     83c:	ccmp	w24, #0x1d, #0x0, eq  // eq = none
     840:	b.le	7c0 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x98>
     844:	ldr	x19, [sp, #64]
     848:	ldr	x0, [x21, #32]
     84c:	cmp	x0, #0x0
     850:	cset	w20, ne  // ne = any
     854:	b	868 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x140>
     858:	mov	x0, x21
     85c:	bl	528 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>
     860:	ldr	x19, [sp, #64]
     864:	mov	w20, #0x0                   	// #0
     868:	ldr	x1, [sp, #72]
     86c:	mov	x0, x19
     870:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     874:	mov	x0, x23
     878:	bl	0 <_ZN11__sanitizer12ThreadListerD1Ev>
     87c:	mov	w0, w20
     880:	ldp	x21, x22, [sp, #16]
     884:	ldp	x23, x24, [sp, #32]
     888:	ldp	x25, x30, [sp, #48]
     88c:	ldp	x19, x20, [sp], #128
     890:	ret
     894:	ldr	x3, [sp, #80]
     898:	cmp	x3, #0x80
     89c:	b.hi	920 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1f8>  // b.pmore
     8a0:	ldr	x22, [x22]
     8a4:	ldr	x0, [x22]
     8a8:	cbz	x0, 914 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1ec>
     8ac:	sub	x1, x0, #0x1
     8b0:	tst	x1, x0
     8b4:	b.ne	904 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x1dc>  // b.any
     8b8:	add	x19, x0, #0x3ff
     8bc:	neg	x0, x0
     8c0:	and	x19, x19, x0
     8c4:	add	x1, x24, #0x0
     8c8:	mov	w2, #0x0                   	// #0
     8cc:	mov	x0, x19
     8d0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     8d4:	mov	x20, x0
     8d8:	ldr	x1, [sp, #64]
     8dc:	ldr	x2, [sp, #80]
     8e0:	lsl	x2, x2, #3
     8e4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     8e8:	ldp	x0, x1, [sp, #64]
     8ec:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     8f0:	stp	x20, x19, [sp, #64]
     8f4:	b	7b8 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x90>
     8f8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     8fc:	str	x0, [x19]
     900:	b	764 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x3c>
     904:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     908:	add	x0, x0, #0x0
     90c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     910:	bl	0 <_ZN11__sanitizer3DieEv>
     914:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     918:	str	x0, [x22]
     91c:	b	8ac <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x184>
     920:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     924:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     928:	add	x2, x2, #0x0
     92c:	add	x0, x0, #0x0
     930:	mov	x4, #0x80                  	// #128
     934:	mov	w1, #0x1fd                 	// #509
     938:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     93c:	mov	w20, #0x0                   	// #0
     940:	b	834 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv+0x10c>
     944:	nop

0000000000000948 <_ZN11__sanitizerL12TracerThreadEPv>:
     948:	stp	x19, x20, [sp, #-336]!
     94c:	mov	x1, #0x9                   	// #9
     950:	mov	x4, #0x0                   	// #0
     954:	mov	x3, #0x0                   	// #0
     958:	mov	x2, #0x0                   	// #0
     95c:	stp	x21, x22, [sp, #16]
     960:	mov	x21, x0
     964:	mov	w0, #0x1                   	// #1
     968:	stp	x23, x24, [sp, #32]
     96c:	stp	x25, x26, [sp, #48]
     970:	stp	x27, x28, [sp, #64]
     974:	str	x30, [sp, #80]
     978:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     97c:	bl	0 <_ZN11__sanitizer16internal_getppidEv>
     980:	ldr	x1, [x21, #112]
     984:	cmp	x0, x1
     988:	b.ne	d44 <_ZN11__sanitizerL12TracerThreadEPv+0x3fc>  // b.any
     98c:	add	x19, x21, #0x10
     990:	adrp	x27, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     994:	mov	x0, x19
     998:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     99c:	mov	x0, x19
     9a0:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     9a4:	add	x0, x27, #0x0
     9a8:	bl	0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
     9ac:	tst	w0, #0xff
     9b0:	b.eq	c90 <_ZN11__sanitizerL12TracerThreadEPv+0x348>  // b.none
     9b4:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
     9b8:	bl	0 <_ZN11__sanitizer16internal_getppidEv>
     9bc:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     9c0:	add	x1, x1, #0x0
     9c4:	ldr	x20, [x22]
     9c8:	stp	x21, x1, [sp, #128]
     9cc:	mov	x19, x0
     9d0:	str	xzr, [sp, #144]
     9d4:	ldr	x1, [x20]
     9d8:	stp	xzr, xzr, [sp, #152]
     9dc:	cbz	x1, bb8 <_ZN11__sanitizerL12TracerThreadEPv+0x270>
     9e0:	sub	x0, x1, #0x1
     9e4:	tst	x0, x1
     9e8:	b.ne	c80 <_ZN11__sanitizerL12TracerThreadEPv+0x338>  // b.any
     9ec:	add	x20, x1, #0x7
     9f0:	neg	x1, x1
     9f4:	and	x20, x20, x1
     9f8:	mov	w2, #0x0                   	// #0
     9fc:	mov	x0, x20
     a00:	adrp	x23, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     a04:	add	x1, x23, #0x0
     a08:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     a0c:	ldr	x1, [sp, #144]
     a10:	mov	x24, x0
     a14:	ldr	x2, [sp, #160]
     a18:	lsl	x2, x2, #3
     a1c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     a20:	ldp	x0, x1, [sp, #144]
     a24:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     a28:	stp	x24, x20, [sp, #144]
     a2c:	lsr	x1, x20, #3
     a30:	cmp	x1, #0x3ff
     a34:	b.ls	be4 <_ZN11__sanitizerL12TracerThreadEPv+0x29c>  // b.plast
     a38:	ldr	x20, [x22]
     a3c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     a40:	add	x28, sp, #0x80
     a44:	str	w19, [sp, #168]
     a48:	str	x28, [x0]
     a4c:	ldr	x0, [x20]
     a50:	cbz	x0, c64 <_ZN11__sanitizerL12TracerThreadEPv+0x31c>
     a54:	sub	x19, x0, #0x1
     a58:	ands	x19, x19, x0
     a5c:	b.ne	c80 <_ZN11__sanitizerL12TracerThreadEPv+0x338>  // b.any
     a60:	neg	x20, x0
     a64:	mov	x24, #0x1fff                	// #8191
     a68:	add	x0, x0, x24
     a6c:	add	x1, x23, #0x0
     a70:	and	x20, x0, x20
     a74:	mov	w2, #0x0                   	// #0
     a78:	mov	x0, x20
     a7c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     a80:	mov	x2, #0x0                   	// #0
     a84:	mov	x1, #0x0                   	// #0
     a88:	mov	x26, x0
     a8c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     a90:	mov	x1, #0x0                   	// #0
     a94:	mov	x0, #0x0                   	// #0
     a98:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     a9c:	cmp	x20, x24
     aa0:	b.ls	ca0 <_ZN11__sanitizerL12TracerThreadEPv+0x358>  // b.plast
     aa4:	add	x23, sp, #0x68
     aa8:	mov	x2, #0x2000                	// #8192
     aac:	mov	w1, #0x0                   	// #0
     ab0:	mov	x0, x26
     ab4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     ab8:	mov	w25, #0x4                   	// #4
     abc:	mov	x0, x23
     ac0:	mov	x2, #0x18                  	// #24
     ac4:	mov	w1, #0x0                   	// #0
     ac8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     acc:	mov	x2, #0x2000                	// #8192
     ad0:	mov	x0, x23
     ad4:	adrp	x24, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     ad8:	adrp	x23, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     adc:	add	x22, sp, #0xb8
     ae0:	add	x24, x24, #0x0
     ae4:	add	x23, x23, #0x0
     ae8:	mov	x1, #0x0                   	// #0
     aec:	movk	w25, #0x800, lsl #16
     af0:	str	x26, [sp, #104]
     af4:	str	x2, [sp, #120]
     af8:	bl	0 <_ZN11__sanitizer20internal_sigaltstackEPKvPv>
     afc:	nop
     b00:	mov	x2, #0x98                  	// #152
     b04:	mov	w1, #0x0                   	// #0
     b08:	mov	x0, x22
     b0c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     b10:	ldr	w0, [x23, x19, lsl #2]
     b14:	mov	x1, x22
     b18:	add	x19, x19, #0x1
     b1c:	mov	x2, #0x0                   	// #0
     b20:	str	x24, [sp, #184]
     b24:	str	w25, [sp, #320]
     b28:	bl	0 <_ZN11__sanitizer29internal_sigaction_norestorerEiPKvPv>
     b2c:	cmp	x19, #0x7
     b30:	b.ne	b00 <_ZN11__sanitizerL12TracerThreadEPv+0x1b8>  // b.any
     b34:	mov	x0, x28
     b38:	bl	728 <_ZN11__sanitizer15ThreadSuspender17SuspendAllThreadsEv>
     b3c:	tst	w0, #0xff
     b40:	b.ne	bc8 <_ZN11__sanitizerL12TracerThreadEPv+0x280>  // b.any
     b44:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     b48:	mov	w19, #0x3                   	// #3
     b4c:	ldr	x0, [x0]
     b50:	ldr	w0, [x0]
     b54:	cbnz	w0, c70 <_ZN11__sanitizerL12TracerThreadEPv+0x328>
     b58:	add	x0, x27, #0x0
     b5c:	bl	0 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE>
     b60:	tst	w0, #0xff
     b64:	b.eq	d18 <_ZN11__sanitizerL12TracerThreadEPv+0x3d0>  // b.none
     b68:	mov	x0, #0x1                   	// #1
     b6c:	str	x0, [x21, #104]
     b70:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     b74:	mov	x1, x20
     b78:	str	xzr, [x0]
     b7c:	mov	x0, x26
     b80:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     b84:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     b88:	add	x2, x1, #0x0
     b8c:	ldp	x0, x1, [sp, #144]
     b90:	str	x2, [sp, #136]
     b94:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     b98:	mov	w0, w19
     b9c:	ldp	x21, x22, [sp, #16]
     ba0:	ldp	x23, x24, [sp, #32]
     ba4:	ldp	x25, x26, [sp, #48]
     ba8:	ldp	x27, x28, [sp, #64]
     bac:	ldr	x30, [sp, #80]
     bb0:	ldp	x19, x20, [sp], #336
     bb4:	ret
     bb8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     bbc:	mov	x1, x0
     bc0:	str	x0, [x20]
     bc4:	b	9e0 <_ZN11__sanitizerL12TracerThreadEPv+0x98>
     bc8:	ldp	x2, x1, [x21]
     bcc:	add	x0, x28, #0x8
     bd0:	mov	w19, #0x0                   	// #0
     bd4:	blr	x2
     bd8:	mov	x0, x28
     bdc:	bl	528 <_ZN11__sanitizer15ThreadSuspender16ResumeAllThreadsEv>
     be0:	b	b58 <_ZN11__sanitizerL12TracerThreadEPv+0x210>
     be4:	ldr	x3, [sp, #160]
     be8:	cmp	x3, #0x400
     bec:	b.hi	d28 <_ZN11__sanitizerL12TracerThreadEPv+0x3e0>  // b.pmore
     bf0:	ldr	x20, [x22]
     bf4:	ldr	x0, [x20]
     bf8:	cbz	x0, d00 <_ZN11__sanitizerL12TracerThreadEPv+0x3b8>
     bfc:	sub	x1, x0, #0x1
     c00:	tst	x1, x0
     c04:	b.ne	c80 <_ZN11__sanitizerL12TracerThreadEPv+0x338>  // b.any
     c08:	mov	x2, #0x1fff                	// #8191
     c0c:	add	x20, x0, x2
     c10:	neg	x0, x0
     c14:	add	x1, x23, #0x0
     c18:	and	x20, x20, x0
     c1c:	mov	w2, #0x0                   	// #0
     c20:	mov	x0, x20
     c24:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     c28:	ldr	x1, [sp, #144]
     c2c:	mov	x24, x0
     c30:	ldr	x2, [sp, #160]
     c34:	add	x28, sp, #0x80
     c38:	lsl	x2, x2, #3
     c3c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     c40:	ldp	x0, x1, [sp, #144]
     c44:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     c48:	stp	x24, x20, [sp, #144]
     c4c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     c50:	ldr	x20, [x22]
     c54:	str	x28, [x0]
     c58:	str	w19, [sp, #168]
     c5c:	ldr	x0, [x20]
     c60:	cbnz	x0, a54 <_ZN11__sanitizerL12TracerThreadEPv+0x10c>
     c64:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     c68:	str	x0, [x20]
     c6c:	b	a54 <_ZN11__sanitizerL12TracerThreadEPv+0x10c>
     c70:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     c74:	add	x0, x0, #0x0
     c78:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     c7c:	b	b58 <_ZN11__sanitizerL12TracerThreadEPv+0x210>
     c80:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     c84:	add	x0, x0, #0x0
     c88:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     c8c:	bl	0 <_ZN11__sanitizer3DieEv>
     c90:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     c94:	add	x0, x0, #0x0
     c98:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     c9c:	bl	0 <_ZN11__sanitizer3DieEv>
     ca0:	ldr	x22, [x22]
     ca4:	ldr	x0, [x22]
     ca8:	cbz	x0, d0c <_ZN11__sanitizerL12TracerThreadEPv+0x3c4>
     cac:	sub	x1, x0, #0x1
     cb0:	tst	x1, x0
     cb4:	b.ne	c80 <_ZN11__sanitizerL12TracerThreadEPv+0x338>  // b.any
     cb8:	mov	x1, #0x1fff                	// #8191
     cbc:	add	x22, x0, x1
     cc0:	neg	x0, x0
     cc4:	add	x1, x23, #0x0
     cc8:	and	x22, x22, x0
     ccc:	mov	w2, #0x0                   	// #0
     cd0:	mov	x0, x22
     cd4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     cd8:	mov	x2, #0x0                   	// #0
     cdc:	mov	x23, x0
     ce0:	mov	x1, x26
     ce4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     ce8:	mov	x1, x20
     cec:	mov	x0, x26
     cf0:	mov	x20, x22
     cf4:	mov	x26, x23
     cf8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     cfc:	b	aa4 <_ZN11__sanitizerL12TracerThreadEPv+0x15c>
     d00:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     d04:	str	x0, [x20]
     d08:	b	bfc <_ZN11__sanitizerL12TracerThreadEPv+0x2b4>
     d0c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     d10:	str	x0, [x22]
     d14:	b	cac <_ZN11__sanitizerL12TracerThreadEPv+0x364>
     d18:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     d1c:	add	x0, x0, #0x0
     d20:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     d24:	bl	0 <_ZN11__sanitizer3DieEv>
     d28:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     d2c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     d30:	add	x2, x2, #0x0
     d34:	add	x0, x0, #0x0
     d38:	mov	x4, #0x400                 	// #1024
     d3c:	mov	w1, #0x1fd                 	// #509
     d40:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d44:	mov	w0, #0x4                   	// #4
     d48:	bl	0 <_ZN11__sanitizer14internal__exitEi>
     d4c:	nop

0000000000000d50 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_>:
     d50:	stp	x19, x20, [sp, #-208]!
     d54:	mov	x4, #0x0                   	// #0
     d58:	mov	x20, x0
     d5c:	mov	x19, x1
     d60:	mov	x3, #0x0                   	// #0
     d64:	mov	x2, #0x0                   	// #0
     d68:	mov	x1, #0x0                   	// #0
     d6c:	mov	w0, #0x3                   	// #3
     d70:	stp	x21, x22, [sp, #16]
     d74:	stp	x23, x24, [sp, #32]
     d78:	stp	x25, x26, [sp, #48]
     d7c:	str	x30, [sp, #64]
     d80:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     d84:	mov	x22, x0
     d88:	cbz	w0, eec <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x19c>
     d8c:	add	x24, sp, #0x58
     d90:	add	x0, x24, #0x10
     d94:	bl	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
     d98:	stp	x20, x19, [sp, #88]
     d9c:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
     da0:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
     da4:	str	xzr, [sp, #192]
     da8:	ldr	x20, [x20]
     dac:	str	x0, [sp, #200]
     db0:	ldr	x19, [x20]
     db4:	cbz	x19, edc <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x18c>
     db8:	mov	w2, #0x0                   	// #0
     dbc:	add	x25, x19, #0x200, lsl #12
     dc0:	mov	x0, x25
     dc4:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     dc8:	add	x1, x1, #0x0
     dcc:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     dd0:	mov	x1, x19
     dd4:	mov	x23, x0
     dd8:	bl	0 <_ZN11__sanitizer16MprotectNoAccessEmm>
     ddc:	tst	w0, #0xff
     de0:	b.eq	1008 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x2b8>  // b.none
     de4:	add	x0, x24, #0x10
     de8:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     dec:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     df0:	adrp	x20, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     df4:	add	x1, x1, #0x0
     df8:	add	x20, x20, #0x0
     dfc:	mov	x19, #0x0                   	// #0
     e00:	add	x0, x1, #0x10
     e04:	mov	x21, x1
     e08:	mov	x26, x0
     e0c:	bl	0 <_ZN11__sanitizer19internal_sigfillsetEPNS_20__sanitizer_sigset_tE>
     e10:	ldr	w1, [x20, x19, lsl #2]
     e14:	mov	x0, x26
     e18:	add	x19, x19, #0x1
     e1c:	bl	0 <_ZN11__sanitizer18internal_sigdelsetEPNS_20__sanitizer_sigset_tEi>
     e20:	cmp	x19, #0x7
     e24:	b.ne	e10 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0xc0>  // b.any
     e28:	add	x21, x21, #0x90
     e2c:	mov	x1, x26
     e30:	mov	x2, x21
     e34:	mov	w0, #0x0                   	// #0
     e38:	bl	0 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>
     e3c:	sxtw	x3, w0
     e40:	cbnz	w0, 1028 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x2d8>
     e44:	mov	x3, x24
     e48:	mov	w2, #0x700                 	// #1792
     e4c:	mov	x6, #0x0                   	// #0
     e50:	mov	x5, #0x0                   	// #0
     e54:	mov	x4, #0x0                   	// #0
     e58:	add	x1, x23, x25
     e5c:	movk	w2, #0x80, lsl #16
     e60:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     e64:	add	x0, x0, #0x0
     e68:	bl	0 <_ZN11__sanitizer14internal_cloneEPFiPvES0_iS0_PiS0_S3_>
     e6c:	mov	x2, #0x0                   	// #0
     e70:	mov	x20, x0
     e74:	mov	x1, x21
     e78:	add	x19, sp, #0x54
     e7c:	mov	w0, #0x2                   	// #2
     e80:	bl	0 <_ZN11__sanitizer20internal_sigprocmaskEiPNS_20__sanitizer_sigset_tES1_>
     e84:	mov	x0, x20
     e88:	mov	x1, x19
     e8c:	str	wzr, [sp, #84]
     e90:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     e94:	tst	w0, #0xff
     e98:	b.eq	f38 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x1e8>  // b.none
     e9c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     ea0:	ldr	x0, [x0]
     ea4:	ldr	w0, [x0]
     ea8:	cbnz	w0, fe4 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x294>
     eac:	add	x0, x24, #0x10
     eb0:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     eb4:	mov	x1, x25
     eb8:	mov	x0, x23
     ebc:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     ec0:	cbz	w22, f08 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x1b8>
     ec4:	ldp	x21, x22, [sp, #16]
     ec8:	ldp	x23, x24, [sp, #32]
     ecc:	ldp	x25, x26, [sp, #48]
     ed0:	ldr	x30, [sp, #64]
     ed4:	ldp	x19, x20, [sp], #208
     ed8:	ret
     edc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     ee0:	mov	x19, x0
     ee4:	str	x0, [x20]
     ee8:	b	db8 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x68>
     eec:	mov	x4, #0x0                   	// #0
     ef0:	mov	x3, #0x0                   	// #0
     ef4:	mov	x2, #0x0                   	// #0
     ef8:	mov	x1, #0x1                   	// #1
     efc:	mov	w0, #0x4                   	// #4
     f00:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     f04:	b	d8c <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x3c>
     f08:	mov	x4, #0x0                   	// #0
     f0c:	mov	x3, #0x0                   	// #0
     f10:	mov	x2, #0x0                   	// #0
     f14:	mov	x1, #0x0                   	// #0
     f18:	mov	w0, #0x4                   	// #4
     f1c:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     f20:	ldp	x21, x22, [sp, #16]
     f24:	ldp	x23, x24, [sp, #32]
     f28:	ldp	x25, x26, [sp, #48]
     f2c:	ldr	x30, [sp, #64]
     f30:	ldp	x19, x20, [sp], #208
     f34:	ret
     f38:	adrp	x26, 0 <_ZN11__sanitizer23stoptheworld_tracer_pidE>
     f3c:	adrp	x21, 0 <_ZN11__sanitizer24stoptheworld_tracer_ppidE>
     f40:	ldr	x0, [x26]
     f44:	str	x20, [x0]
     f48:	bl	0 <_ZN11__sanitizer15internal_getpidEv>
     f4c:	ldr	x5, [x21]
     f50:	mov	x6, x0
     f54:	mov	x1, x20
     f58:	mov	x4, #0x0                   	// #0
     f5c:	mov	x3, #0x0                   	// #0
     f60:	mov	x2, #0x0                   	// #0
     f64:	mov	w0, #0x6d61                	// #28001
     f68:	str	x6, [x5]
     f6c:	movk	w0, #0x5961, lsl #16
     f70:	bl	0 <_ZN11__sanitizer14internal_prctlEimmmm>
     f74:	add	x0, x24, #0x10
     f78:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     f7c:	ldr	x0, [sp, #192]
     f80:	cbnz	x0, f94 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x244>
     f84:	nop
     f88:	bl	0 <sched_yield>
     f8c:	ldr	x0, [sp, #192]
     f90:	cbz	x0, f88 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x238>
     f94:	mov	w2, #0x40000000            	// #1073741824
     f98:	mov	x1, #0x0                   	// #0
     f9c:	mov	w0, w20
     fa0:	bl	0 <_ZN11__sanitizer16internal_waitpidEiPii>
     fa4:	mov	x1, x19
     fa8:	bl	0 <_ZN11__sanitizer16internal_iserrorEmPi>
     fac:	tst	w0, #0xff
     fb0:	b.eq	fd0 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x280>  // b.none
     fb4:	ldr	w1, [sp, #84]
     fb8:	cmp	w1, #0x4
     fbc:	b.eq	f94 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x244>  // b.none
     fc0:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
     fc4:	ldr	x0, [x0]
     fc8:	ldr	w0, [x0]
     fcc:	cbnz	w0, ff8 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x2a8>
     fd0:	ldr	x26, [x26]
     fd4:	ldr	x21, [x21]
     fd8:	str	xzr, [x26]
     fdc:	str	xzr, [x21]
     fe0:	b	eb4 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x164>
     fe4:	ldr	w1, [sp, #84]
     fe8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     fec:	add	x0, x0, #0x0
     ff0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     ff4:	b	eac <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x15c>
     ff8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
     ffc:	add	x0, x0, #0x0
    1000:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1004:	b	fd0 <_ZN11__sanitizer12StopTheWorldEPFvRKNS_20SuspendedThreadsListEPvES3_+0x280>
    1008:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    100c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    1010:	add	x2, x2, #0x0
    1014:	add	x0, x0, #0x0
    1018:	mov	x4, #0x0                   	// #0
    101c:	mov	x3, #0x0                   	// #0
    1020:	mov	w1, #0x152                 	// #338
    1024:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1028:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    102c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    1030:	add	x2, x2, #0x0
    1034:	add	x0, x0, #0x0
    1038:	mov	x4, #0x0                   	// #0
    103c:	mov	w1, #0x1ac                 	// #428
    1040:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1044:	nop

0000000000001048 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy>:
    1048:	ldr	x3, [x0, #24]
    104c:	cbz	x3, 107c <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x34>
    1050:	ldr	x4, [x0, #8]
    1054:	mov	x0, #0x0                   	// #0
    1058:	b	1064 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x1c>
    105c:	cmp	x0, x3
    1060:	b.eq	107c <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x34>  // b.none
    1064:	ldr	x2, [x4, x0, lsl #3]
    1068:	add	x0, x0, #0x1
    106c:	cmp	x2, x1
    1070:	b.ne	105c <_ZNK11__sanitizer25SuspendedThreadsListLinux11ContainsTidEy+0x14>  // b.any
    1074:	mov	w0, #0x1                   	// #1
    1078:	ret
    107c:	mov	w0, #0x0                   	// #0
    1080:	ret
    1084:	nop

0000000000001088 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy>:
    1088:	stp	x19, x20, [sp, #-64]!
    108c:	stp	x21, x22, [sp, #16]
    1090:	add	x21, x0, #0x8
    1094:	ldr	x4, [x0, #16]
    1098:	str	x1, [sp, #56]
    109c:	ldr	x3, [x21, #16]
    10a0:	str	x30, [sp, #32]
    10a4:	lsr	x4, x4, #3
    10a8:	cmp	x3, x4
    10ac:	b.hi	1198 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x110>  // b.pmore
    10b0:	mov	x19, x0
    10b4:	add	x20, x3, #0x1
    10b8:	b.eq	10e4 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x5c>  // b.none
    10bc:	ldr	x22, [x0, #8]
    10c0:	str	x20, [x21, #16]
    10c4:	add	x0, x22, x3, lsl #3
    10c8:	add	x1, sp, #0x38
    10cc:	mov	x2, #0x8                   	// #8
    10d0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    10d4:	ldp	x21, x22, [sp, #16]
    10d8:	ldr	x30, [sp, #32]
    10dc:	ldp	x19, x20, [sp], #64
    10e0:	ret
    10e4:	tst	x3, x20
    10e8:	b.eq	1124 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x9c>  // b.none
    10ec:	clz	x4, x20
    10f0:	mov	w0, #0x3f                  	// #63
    10f4:	sub	w0, w0, w4
    10f8:	mov	x2, #0x1                   	// #1
    10fc:	add	w4, w0, #0x1
    1100:	lsl	x4, x2, x4
    1104:	cmp	x4, x20
    1108:	b.ls	11e4 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x15c>  // b.plast
    110c:	lsl	x0, x2, x0
    1110:	cmp	x20, x0
    1114:	b.ls	1200 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x178>  // b.plast
    1118:	cmp	x3, x4
    111c:	b.hi	11bc <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x134>  // b.pmore
    1120:	mov	x20, x4
    1124:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
    1128:	lsl	x20, x20, #3
    112c:	ldr	x22, [x22]
    1130:	ldr	x0, [x22]
    1134:	cbz	x0, 11b0 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x128>
    1138:	sub	x1, x0, #0x1
    113c:	tst	x0, x1
    1140:	b.ne	11d4 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x14c>  // b.any
    1144:	add	x20, x20, x1
    1148:	neg	x0, x0
    114c:	and	x20, x20, x0
    1150:	mov	w2, #0x0                   	// #0
    1154:	mov	x0, x20
    1158:	adrp	x1, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    115c:	add	x1, x1, #0x0
    1160:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    1164:	ldr	x1, [x19, #8]
    1168:	mov	x22, x0
    116c:	ldr	x2, [x21, #16]
    1170:	lsl	x2, x2, #3
    1174:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1178:	ldr	x0, [x19, #8]
    117c:	ldr	x1, [x21, #8]
    1180:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1184:	ldr	x3, [x21, #16]
    1188:	str	x22, [x19, #8]
    118c:	str	x20, [x21, #8]
    1190:	add	x20, x3, #0x1
    1194:	b	10c0 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0x38>
    1198:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    119c:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    11a0:	add	x2, x2, #0x0
    11a4:	add	x0, x0, #0x0
    11a8:	mov	w1, #0x1be                 	// #446
    11ac:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11b0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    11b4:	str	x0, [x22]
    11b8:	b	1138 <_ZN11__sanitizer25SuspendedThreadsListLinux6AppendEy+0xb0>
    11bc:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    11c0:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    11c4:	add	x2, x2, #0x0
    11c8:	add	x0, x0, #0x0
    11cc:	mov	w1, #0x1fd                 	// #509
    11d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    11d4:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    11d8:	add	x0, x0, #0x0
    11dc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
    11e0:	bl	0 <_ZN11__sanitizer3DieEv>
    11e4:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    11e8:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    11ec:	mov	x3, x20
    11f0:	add	x2, x2, #0x0
    11f4:	add	x0, x0, #0x0
    11f8:	mov	w1, #0x17b                 	// #379
    11fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1200:	mov	x4, x0
    1204:	adrp	x2, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    1208:	adrp	x0, 0 <_ZNK11__sanitizer25SuspendedThreadsListLinux11ThreadCountEv>
    120c:	mov	x3, x20
    1210:	add	x2, x2, #0x0
    1214:	add	x0, x0, #0x0
    1218:	mov	w1, #0x17c                 	// #380
    121c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_stoptheworld_mac.o:     file format elf64-littleaarch64


sanitizer_suppressions.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer18SuppressionContextC1EPPKci>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	adrp	x20, 0 <_ZN11__sanitizer14PageSizeCachedE>
   8:	mov	x19, x0
   c:	ldr	x20, [x20]
  10:	stp	x21, x22, [sp, #16]
  14:	str	x30, [sp, #32]
  18:	str	x1, [x0]
  1c:	stp	xzr, xzr, [x0, #24]
  20:	ldr	x0, [x20]
  24:	str	w2, [x19, #8]
  28:	str	xzr, [x19, #16]
  2c:	cbz	x0, a8 <_ZN11__sanitizer18SuppressionContextC1EPPKci+0xa8>
  30:	sub	x1, x0, #0x1
  34:	tst	x1, x0
  38:	b.ne	b4 <_ZN11__sanitizer18SuppressionContextC1EPPKci+0xb4>  // b.any
  3c:	add	x20, x0, #0x1f
  40:	neg	x0, x0
  44:	and	x20, x20, x0
  48:	mov	w2, #0x0                   	// #0
  4c:	mov	x0, x20
  50:	adrp	x1, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
  54:	add	x1, x1, #0x0
  58:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
  5c:	ldr	x1, [x19, #16]
  60:	mov	x22, x0
  64:	ldr	x2, [x19, #32]
  68:	lsl	x2, x2, #5
  6c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
  70:	ldp	x0, x1, [x19, #16]
  74:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  78:	stp	x22, x20, [x19, #16]
  7c:	ldrsw	x2, [x19, #8]
  80:	mov	w0, #0x1                   	// #1
  84:	strb	w0, [x19, #72]
  88:	cmp	x2, #0x20
  8c:	b.hi	c4 <_ZN11__sanitizer18SuppressionContextC1EPPKci+0xc4>  // b.pmore
  90:	add	x0, x19, #0x28
  94:	mov	w1, #0x0                   	// #0
  98:	ldp	x21, x22, [sp, #16]
  9c:	ldr	x30, [sp, #32]
  a0:	ldp	x19, x20, [sp], #48
  a4:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
  a8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  ac:	str	x0, [x20]
  b0:	b	30 <_ZN11__sanitizer18SuppressionContextC1EPPKci+0x30>
  b4:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
  c0:	bl	0 <_ZN11__sanitizer3DieEv>
  c4:	mov	x3, x2
  c8:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
  cc:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
  d0:	add	x0, x0, #0x0
  d4:	add	x2, x2, #0x0
  d8:	mov	x4, #0x20                  	// #32
  dc:	mov	w1, #0x1c                  	// #28
  e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  e4:	nop

00000000000000e8 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE>:
  e8:	stp	x19, x20, [sp, #-64]!
  ec:	mov	x20, x0
  f0:	str	x30, [sp, #48]
  f4:	strb	wzr, [x0, #72]
  f8:	ldr	w0, [x0, #8]
  fc:	cmp	w0, #0x0
 100:	b.le	1c4 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0xdc>
 104:	mov	x19, #0x0                   	// #0
 108:	stp	x21, x22, [sp, #16]
 10c:	mov	x22, x1
 110:	mov	x21, x2
 114:	stp	x23, x24, [sp, #32]
 118:	mov	x23, x3
 11c:	b	12c <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x44>
 120:	ldr	w0, [x20, #8]
 124:	cmp	w0, w19
 128:	b.le	1bc <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0xd4>
 12c:	ldr	x1, [x20]
 130:	mov	w24, w19
 134:	mov	x0, x21
 138:	ldr	x1, [x1, x19, lsl #3]
 13c:	add	x19, x19, #0x1
 140:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 144:	cbnz	w0, 120 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x38>
 148:	add	x24, x20, w24, sxtw
 14c:	ldrb	w0, [x24, #40]
 150:	cbz	w0, 1bc <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0xd4>
 154:	ldr	x0, [x20, #32]
 158:	cbz	x0, 1bc <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0xd4>
 15c:	mov	x19, #0x0                   	// #0
 160:	b	170 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x88>
 164:	ldr	x0, [x20, #32]
 168:	cmp	x19, x0
 16c:	b.cs	1bc <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0xd4>  // b.hs, b.nlast
 170:	ldr	x0, [x20, #16]
 174:	lsl	x4, x19, #5
 178:	mov	x1, x21
 17c:	add	x19, x19, #0x1
 180:	add	x24, x0, x4
 184:	ldr	x0, [x0, x4]
 188:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 18c:	cbnz	w0, 164 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x7c>
 190:	ldr	x0, [x24, #8]
 194:	mov	x1, x22
 198:	bl	0 <_ZN11__sanitizer13TemplateMatchEPKcS1_>
 19c:	ands	w0, w0, #0xff
 1a0:	b.eq	164 <_ZN11__sanitizer18SuppressionContext5MatchEPKcS2_PPNS_11SuppressionE+0x7c>  // b.none
 1a4:	ldp	x21, x22, [sp, #16]
 1a8:	str	x24, [x23]
 1ac:	ldp	x23, x24, [sp, #32]
 1b0:	ldr	x30, [sp, #48]
 1b4:	ldp	x19, x20, [sp], #64
 1b8:	ret
 1bc:	ldp	x21, x22, [sp, #16]
 1c0:	ldp	x23, x24, [sp, #32]
 1c4:	mov	w0, #0x0                   	// #0
 1c8:	ldr	x30, [sp, #48]
 1cc:	ldp	x19, x20, [sp], #64
 1d0:	ret
 1d4:	nop

00000000000001d8 <_ZN11__sanitizer18SuppressionContext5ParseEPKc>:
 1d8:	stp	x19, x20, [sp, #-112]!
 1dc:	mov	x20, x0
 1e0:	ldrb	w0, [x0, #72]
 1e4:	str	x30, [sp, #72]
 1e8:	cbz	w0, 4b4 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x2dc>
 1ec:	mov	x19, x1
 1f0:	cbz	x1, 3a4 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1cc>
 1f4:	stp	x21, x22, [sp, #16]
 1f8:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1fc:	add	x21, sp, #0x50
 200:	ldr	x22, [x22]
 204:	stp	x23, x24, [sp, #32]
 208:	adrp	x23, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 20c:	add	x23, x23, #0x0
 210:	stp	x25, x26, [sp, #48]
 214:	str	x27, [sp, #64]
 218:	ldrb	w0, [x19]
 21c:	cmp	w0, #0x20
 220:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 224:	b.ne	238 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x60>  // b.any
 228:	ldrb	w0, [x19, #1]!
 22c:	cmp	w0, #0x20
 230:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 234:	b.eq	228 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x50>  // b.none
 238:	mov	x0, x19
 23c:	mov	w1, #0xa                   	// #10
 240:	bl	0 <_ZN11__sanitizer15internal_strchrEPKci>
 244:	mov	x26, x0
 248:	cbz	x0, 3cc <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1f4>
 24c:	cmp	x19, x26
 250:	b.eq	260 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x88>  // b.none
 254:	ldrb	w6, [x19]
 258:	cmp	w6, #0x23
 25c:	b.ne	270 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x98>  // b.any
 260:	ldrb	w0, [x26]
 264:	cbz	w0, 394 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1bc>
 268:	add	x19, x26, #0x1
 26c:	b	218 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x40>
 270:	mov	x24, x26
 274:	nop
 278:	ldurb	w1, [x24, #-1]
 27c:	cmp	w1, #0x20
 280:	and	w1, w1, #0xfffffffb
 284:	ccmp	w1, #0x9, #0x4, ne  // ne = any
 288:	b.ne	298 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xc0>  // b.any
 28c:	sub	x24, x24, #0x1
 290:	cmp	x19, x24
 294:	b.ne	278 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xa0>  // b.any
 298:	ldr	w7, [x20, #8]
 29c:	cmp	w7, #0x0
 2a0:	b.le	4ac <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x2d4>
 2a4:	ldr	x8, [x20]
 2a8:	mov	x5, #0x0                   	// #0
 2ac:	nop
 2b0:	ldr	x2, [x8, x5, lsl #3]
 2b4:	mov	w0, w5
 2b8:	mov	w25, w5
 2bc:	ldrb	w1, [x2]
 2c0:	cmp	w1, w6
 2c4:	b.ne	3c0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1e8>  // b.any
 2c8:	mov	x3, x19
 2cc:	nop
 2d0:	ldrb	w4, [x3, #1]!
 2d4:	ldrb	w1, [x2, #1]!
 2d8:	cmp	w4, w1
 2dc:	b.eq	2d0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xf8>  // b.none
 2e0:	cbz	w1, 3b0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x1d8>
 2e4:	add	x5, x5, #0x1
 2e8:	add	w25, w0, #0x1
 2ec:	cmp	w7, w5
 2f0:	b.gt	2b0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0xd8>
 2f4:	cmp	w7, w25
 2f8:	b.eq	544 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x36c>  // b.none
 2fc:	mov	x27, x20
 300:	mov	x2, #0x20                  	// #32
 304:	mov	w1, #0x0                   	// #0
 308:	mov	x0, x21
 30c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 310:	sxtw	x25, w25
 314:	ldr	x3, [x27], #16
 318:	sub	x24, x24, x19
 31c:	mov	x2, #0x0                   	// #0
 320:	mov	x1, #0x0                   	// #0
 324:	add	x0, x24, #0x1
 328:	ldr	x3, [x3, x25, lsl #3]
 32c:	str	x3, [sp, #80]
 330:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 334:	str	x0, [sp, #88]
 338:	mov	x1, x19
 33c:	mov	x2, x24
 340:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 344:	ldr	x0, [sp, #88]
 348:	strb	wzr, [x0, x24]
 34c:	ldr	x4, [x20, #24]
 350:	ldr	x0, [x27, #16]
 354:	lsr	x4, x4, #5
 358:	cmp	x0, x4
 35c:	b.hi	484 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x2ac>  // b.pmore
 360:	add	x3, x0, #0x1
 364:	b.eq	3dc <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x204>  // b.none
 368:	ldr	x24, [x20, #16]
 36c:	add	x25, x20, x25
 370:	str	x3, [x27, #16]
 374:	add	x0, x24, x0, lsl #5
 378:	mov	x1, x21
 37c:	mov	x2, #0x20                  	// #32
 380:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 384:	mov	w0, #0x1                   	// #1
 388:	strb	w0, [x25, #40]
 38c:	ldrb	w0, [x26]
 390:	cbnz	w0, 268 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x90>
 394:	ldp	x21, x22, [sp, #16]
 398:	ldp	x23, x24, [sp, #32]
 39c:	ldp	x25, x26, [sp, #48]
 3a0:	ldr	x27, [sp, #64]
 3a4:	ldr	x30, [sp, #72]
 3a8:	ldp	x19, x20, [sp], #112
 3ac:	ret
 3b0:	cmp	w4, #0x3a
 3b4:	b.ne	2e4 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x10c>  // b.any
 3b8:	add	x19, x3, #0x1
 3bc:	b	2f4 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x11c>
 3c0:	mov	w4, w6
 3c4:	mov	x3, x19
 3c8:	b	2e0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x108>
 3cc:	mov	x0, x19
 3d0:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 3d4:	add	x26, x19, x0
 3d8:	b	24c <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x74>
 3dc:	tst	x0, x3
 3e0:	b.eq	41c <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x244>  // b.none
 3e4:	clz	x2, x3
 3e8:	mov	w1, #0x3f                  	// #63
 3ec:	sub	w2, w1, w2
 3f0:	mov	x1, #0x1                   	// #1
 3f4:	add	w4, w2, #0x1
 3f8:	lsl	x4, x1, x4
 3fc:	cmp	x3, x4
 400:	b.cs	510 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x338>  // b.hs, b.nlast
 404:	lsl	x1, x1, x2
 408:	cmp	x3, x1
 40c:	b.ls	528 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x350>  // b.plast
 410:	cmp	x0, x4
 414:	b.hi	4e4 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x30c>  // b.pmore
 418:	mov	x3, x4
 41c:	ldr	x0, [x22]
 420:	lsl	x19, x3, #5
 424:	cbz	x0, 4a0 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x2c8>
 428:	sub	x1, x0, #0x1
 42c:	tst	x1, x0
 430:	b.ne	500 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x328>  // b.any
 434:	add	x19, x19, x1
 438:	neg	x0, x0
 43c:	and	x19, x19, x0
 440:	mov	x1, x23
 444:	mov	w2, #0x0                   	// #0
 448:	mov	x0, x19
 44c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 450:	mov	x24, x0
 454:	ldr	x1, [x20, #16]
 458:	ldr	x2, [x27, #16]
 45c:	lsl	x2, x2, #5
 460:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 464:	ldr	x1, [x27, #8]
 468:	ldr	x0, [x20, #16]
 46c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 470:	ldr	x0, [x27, #16]
 474:	str	x24, [x20, #16]
 478:	str	x19, [x27, #8]
 47c:	add	x3, x0, #0x1
 480:	b	36c <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x194>
 484:	mov	x3, x0
 488:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 48c:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 490:	add	x2, x2, #0x0
 494:	add	x0, x0, #0x0
 498:	mov	w1, #0x1be                 	// #446
 49c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4a0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 4a4:	str	x0, [x22]
 4a8:	b	428 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x250>
 4ac:	mov	w25, #0x0                   	// #0
 4b0:	b	2f4 <_ZN11__sanitizer18SuppressionContext5ParseEPKc+0x11c>
 4b4:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 4b8:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 4bc:	add	x2, x2, #0x0
 4c0:	add	x0, x0, #0x0
 4c4:	mov	x4, #0x0                   	// #0
 4c8:	mov	x3, #0x0                   	// #0
 4cc:	mov	w1, #0x6a                  	// #106
 4d0:	stp	x21, x22, [sp, #16]
 4d4:	stp	x23, x24, [sp, #32]
 4d8:	stp	x25, x26, [sp, #48]
 4dc:	str	x27, [sp, #64]
 4e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4e4:	mov	x3, x0
 4e8:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 4ec:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 4f0:	add	x2, x2, #0x0
 4f4:	add	x0, x0, #0x0
 4f8:	mov	w1, #0x1fd                 	// #509
 4fc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 500:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 504:	add	x0, x0, #0x0
 508:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 50c:	bl	0 <_ZN11__sanitizer3DieEv>
 510:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 514:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 518:	add	x2, x2, #0x0
 51c:	add	x0, x0, #0x0
 520:	mov	w1, #0x17b                 	// #379
 524:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 528:	mov	x4, x1
 52c:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 530:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 534:	add	x2, x2, #0x0
 538:	add	x0, x0, #0x0
 53c:	mov	w1, #0x17c                 	// #380
 540:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 544:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 548:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 54c:	add	x0, x0, #0x0
 550:	ldr	x1, [x1]
 554:	ldr	x1, [x1]
 558:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 55c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000560 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc>:
 560:	stp	x19, x20, [sp, #-112]!
 564:	mov	x19, x1
 568:	str	x30, [sp, #64]
 56c:	ldrb	w1, [x1]
 570:	cbnz	w1, 580 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x20>
 574:	ldr	x30, [sp, #64]
 578:	ldp	x19, x20, [sp], #112
 57c:	ret
 580:	stp	x21, x22, [sp, #16]
 584:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
 588:	mov	x21, x0
 58c:	ldr	x20, [x22]
 590:	stp	x23, x24, [sp, #32]
 594:	ldr	x2, [x20]
 598:	cbz	x2, 690 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x130>
 59c:	sub	x0, x2, #0x1
 5a0:	tst	x0, x2
 5a4:	b.ne	7a8 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x248>  // b.any
 5a8:	add	x24, x2, #0xfff
 5ac:	neg	x2, x2
 5b0:	and	x24, x24, x2
 5b4:	adrp	x23, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 5b8:	mov	w2, #0x0                   	// #0
 5bc:	add	x1, x23, #0x0
 5c0:	mov	x0, x24
 5c4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 5c8:	mov	x2, #0x0                   	// #0
 5cc:	mov	x1, #0x0                   	// #0
 5d0:	mov	x20, x0
 5d4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 5d8:	mov	x1, #0x0                   	// #0
 5dc:	mov	x0, #0x0                   	// #0
 5e0:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 5e4:	cmp	x24, #0xfff
 5e8:	b.ls	744 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x1e4>  // b.plast
 5ec:	mov	x2, #0x1000                	// #4096
 5f0:	mov	w1, #0x0                   	// #0
 5f4:	mov	x0, x20
 5f8:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 5fc:	strb	wzr, [x20]
 600:	mov	x0, x19
 604:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 608:	tst	w0, #0xff
 60c:	b.eq	6a0 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x140>  // b.none
 610:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 614:	ldr	x0, [x0]
 618:	ldr	w0, [x0]
 61c:	cbnz	w0, 670 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x110>
 620:	add	x3, sp, #0x68
 624:	add	x2, sp, #0x60
 628:	add	x1, sp, #0x58
 62c:	mov	x0, x19
 630:	mov	x5, #0x0                   	// #0
 634:	mov	x4, #0x4000000             	// #67108864
 638:	bl	0 <_ZN11__sanitizer16ReadFileToBufferEPKcPPcPmS4_mPi>
 63c:	tst	w0, #0xff
 640:	b.eq	880 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x320>  // b.none
 644:	ldr	x1, [sp, #88]
 648:	mov	x0, x21
 64c:	bl	1d8 <_ZN11__sanitizer18SuppressionContext5ParseEPKc>
 650:	mov	x1, x24
 654:	mov	x0, x20
 658:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 65c:	ldp	x21, x22, [sp, #16]
 660:	ldp	x23, x24, [sp, #32]
 664:	ldr	x30, [sp, #64]
 668:	ldp	x19, x20, [sp], #112
 66c:	ret
 670:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 674:	mov	x2, x19
 678:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 67c:	add	x0, x0, #0x0
 680:	ldr	x1, [x1]
 684:	ldr	x1, [x1]
 688:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 68c:	b	620 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xc0>
 690:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 694:	mov	x2, x0
 698:	str	x0, [x20]
 69c:	b	59c <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x3c>
 6a0:	mov	x0, x19
 6a4:	bl	0 <_ZN11__sanitizer14IsAbsolutePathEPKc>
 6a8:	tst	w0, #0xff
 6ac:	b.ne	610 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xb0>  // b.any
 6b0:	stp	x25, x26, [sp, #48]
 6b4:	ldr	x25, [x22]
 6b8:	ldr	x0, [x25]
 6bc:	cbz	x0, 7c8 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x268>
 6c0:	sub	x1, x0, #0x1
 6c4:	tst	x1, x0
 6c8:	b.ne	7ac <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x24c>  // b.any
 6cc:	add	x26, x0, #0xfff
 6d0:	neg	x0, x0
 6d4:	and	x26, x26, x0
 6d8:	add	x1, x23, #0x0
 6dc:	mov	w2, #0x0                   	// #0
 6e0:	mov	x0, x26
 6e4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 6e8:	mov	x25, x0
 6ec:	mov	x2, #0x0                   	// #0
 6f0:	mov	x1, #0x0                   	// #0
 6f4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 6f8:	mov	x1, #0x0                   	// #0
 6fc:	mov	x0, #0x0                   	// #0
 700:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 704:	cmp	x26, #0xfff
 708:	b.ls	818 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x2b8>  // b.plast
 70c:	mov	w1, #0x0                   	// #0
 710:	mov	x0, x25
 714:	mov	x2, #0x1000                	// #4096
 718:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 71c:	strb	wzr, [x25]
 720:	mov	x0, x25
 724:	mov	x1, #0x1000                	// #4096
 728:	bl	0 <_ZN11__sanitizer20ReadBinaryNameCachedEPcm>
 72c:	cbnz	x0, 7d4 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x274>
 730:	mov	x1, x26
 734:	mov	x0, x25
 738:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 73c:	ldp	x25, x26, [sp, #48]
 740:	b	610 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0xb0>
 744:	stp	x25, x26, [sp, #48]
 748:	ldr	x25, [x22]
 74c:	ldr	x0, [x25]
 750:	cbz	x0, 7bc <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x25c>
 754:	sub	x1, x0, #0x1
 758:	tst	x1, x0
 75c:	b.ne	7ac <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x24c>  // b.any
 760:	add	x25, x0, #0xfff
 764:	neg	x0, x0
 768:	and	x25, x25, x0
 76c:	add	x1, x23, #0x0
 770:	mov	x0, x25
 774:	mov	w2, #0x0                   	// #0
 778:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 77c:	mov	x26, x0
 780:	mov	x2, #0x0                   	// #0
 784:	mov	x1, x20
 788:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 78c:	mov	x1, x24
 790:	mov	x0, x20
 794:	mov	x24, x25
 798:	mov	x20, x26
 79c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 7a0:	ldp	x25, x26, [sp, #48]
 7a4:	b	5ec <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x8c>
 7a8:	stp	x25, x26, [sp, #48]
 7ac:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 7b0:	add	x0, x0, #0x0
 7b4:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 7b8:	bl	0 <_ZN11__sanitizer3DieEv>
 7bc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 7c0:	str	x0, [x25]
 7c4:	b	754 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x1f4>
 7c8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 7cc:	str	x0, [x25]
 7d0:	b	6c0 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x160>
 7d4:	mov	x0, x25
 7d8:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 7dc:	sub	x2, x0, x25
 7e0:	mov	x22, #0xfff                 	// #4095
 7e4:	cmp	x2, x22
 7e8:	mov	x1, x25
 7ec:	csel	x2, x2, x22, ls  // ls = plast
 7f0:	mov	x0, x20
 7f4:	bl	0 <_ZN11__sanitizer16internal_strncatEPcPKcm>
 7f8:	mov	x0, x20
 7fc:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 800:	mov	x1, x19
 804:	sub	x2, x22, x0
 808:	mov	x19, x20
 80c:	mov	x0, x20
 810:	bl	0 <_ZN11__sanitizer16internal_strncatEPcPKcm>
 814:	b	730 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x1d0>
 818:	ldr	x22, [x22]
 81c:	ldr	x0, [x22]
 820:	cbz	x0, 874 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x314>
 824:	sub	x1, x0, #0x1
 828:	tst	x1, x0
 82c:	b.ne	7ac <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x24c>  // b.any
 830:	add	x22, x0, #0xfff
 834:	neg	x0, x0
 838:	and	x22, x22, x0
 83c:	add	x1, x23, #0x0
 840:	mov	x0, x22
 844:	mov	w2, #0x0                   	// #0
 848:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 84c:	mov	x23, x0
 850:	mov	x2, #0x0                   	// #0
 854:	mov	x1, x25
 858:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 85c:	mov	x1, x26
 860:	mov	x0, x25
 864:	mov	x26, x22
 868:	mov	x25, x23
 86c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 870:	b	70c <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x1ac>
 874:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 878:	str	x0, [x22]
 87c:	b	824 <_ZN11__sanitizer18SuppressionContext13ParseFromFileEPKc+0x2c4>
 880:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
 884:	mov	x2, x19
 888:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 88c:	add	x0, x0, #0x0
 890:	ldr	x1, [x1]
 894:	stp	x25, x26, [sp, #48]
 898:	ldr	x1, [x1]
 89c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
 8a0:	bl	0 <_ZN11__sanitizer3DieEv>
 8a4:	nop

00000000000008a8 <_ZNK11__sanitizer18SuppressionContext16SuppressionCountEv>:
 8a8:	ldr	x0, [x0, #32]
 8ac:	ret

00000000000008b0 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc>:
 8b0:	stp	x19, x20, [sp, #-48]!
 8b4:	mov	x20, x0
 8b8:	ldr	w0, [x0, #8]
 8bc:	str	x30, [sp, #32]
 8c0:	cmp	w0, #0x0
 8c4:	b.le	91c <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x6c>
 8c8:	mov	x19, #0x0                   	// #0
 8cc:	stp	x21, x22, [sp, #16]
 8d0:	mov	x21, x1
 8d4:	b	8e4 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x34>
 8d8:	ldr	w0, [x20, #8]
 8dc:	cmp	w0, w19
 8e0:	b.le	918 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x68>
 8e4:	ldr	x2, [x20]
 8e8:	mov	w22, w19
 8ec:	mov	x0, x21
 8f0:	ldr	x1, [x2, x19, lsl #3]
 8f4:	add	x19, x19, #0x1
 8f8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 8fc:	cbnz	w0, 8d8 <_ZNK11__sanitizer18SuppressionContext18HasSuppressionTypeEPKc+0x28>
 900:	add	x20, x20, w22, sxtw
 904:	ldp	x21, x22, [sp, #16]
 908:	ldrb	w0, [x20, #40]
 90c:	ldr	x30, [sp, #32]
 910:	ldp	x19, x20, [sp], #48
 914:	ret
 918:	ldp	x21, x22, [sp, #16]
 91c:	mov	w0, #0x0                   	// #0
 920:	ldr	x30, [sp, #32]
 924:	ldp	x19, x20, [sp], #48
 928:	ret
 92c:	nop

0000000000000930 <_ZNK11__sanitizer18SuppressionContext13SuppressionAtEm>:
 930:	ldr	x4, [x0, #32]
 934:	cmp	x1, x4
 938:	b.cs	948 <_ZNK11__sanitizer18SuppressionContext13SuppressionAtEm+0x18>  // b.hs, b.nlast
 93c:	ldr	x0, [x0, #16]
 940:	add	x0, x0, x1, lsl #5
 944:	ret
 948:	str	x30, [sp, #-16]!
 94c:	mov	x3, x1
 950:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 954:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 958:	add	x2, x2, #0x0
 95c:	add	x0, x0, #0x0
 960:	mov	w1, #0x9e                  	// #158
 964:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000968 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE>:
 968:	stp	x19, x20, [sp, #-96]!
 96c:	stp	x21, x22, [sp, #16]
 970:	mov	x21, x1
 974:	ldr	x1, [x0, #32]
 978:	str	x30, [sp, #64]
 97c:	cbz	x1, a10 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0xa8>
 980:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
 984:	mov	x20, x0
 988:	mov	x19, #0x0                   	// #0
 98c:	stp	x23, x24, [sp, #32]
 990:	adrp	x23, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 994:	ldr	x22, [x22]
 998:	add	x23, x23, #0x0
 99c:	stp	x25, x26, [sp, #48]
 9a0:	add	x26, sp, #0x58
 9a4:	b	9b4 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x4c>
 9a8:	add	x19, x19, #0x1
 9ac:	cmp	x19, x1
 9b0:	b.cs	a08 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0xa0>  // b.hs, b.nlast
 9b4:	ldr	x2, [x20, #16]
 9b8:	add	x2, x2, x19, lsl #5
 9bc:	ldr	w0, [x2, #16]
 9c0:	cbz	w0, 9a8 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x40>
 9c4:	ldp	x4, x3, [x21, #8]
 9c8:	str	x2, [sp, #88]
 9cc:	lsr	x4, x4, #3
 9d0:	cmp	x3, x4
 9d4:	b.hi	acc <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x164>  // b.pmore
 9d8:	add	x24, x3, #0x1
 9dc:	b.eq	a20 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0xb8>  // b.none
 9e0:	ldr	x25, [x21]
 9e4:	str	x24, [x21, #16]
 9e8:	mov	x1, x26
 9ec:	add	x0, x25, x3, lsl #3
 9f0:	mov	x2, #0x8                   	// #8
 9f4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 9f8:	ldr	x1, [x20, #32]
 9fc:	add	x19, x19, #0x1
 a00:	cmp	x19, x1
 a04:	b.cc	9b4 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x4c>  // b.lo, b.ul, b.last
 a08:	ldp	x23, x24, [sp, #32]
 a0c:	ldp	x25, x26, [sp, #48]
 a10:	ldp	x21, x22, [sp, #16]
 a14:	ldr	x30, [sp, #64]
 a18:	ldp	x19, x20, [sp], #96
 a1c:	ret
 a20:	tst	x3, x24
 a24:	b.eq	a60 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0xf8>  // b.none
 a28:	clz	x2, x24
 a2c:	mov	w0, #0x3f                  	// #63
 a30:	sub	w0, w0, w2
 a34:	mov	x2, #0x1                   	// #1
 a38:	add	w4, w0, #0x1
 a3c:	lsl	x4, x2, x4
 a40:	cmp	x4, x24
 a44:	b.ls	af4 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x18c>  // b.plast
 a48:	lsl	x0, x2, x0
 a4c:	cmp	x0, x24
 a50:	b.cs	b28 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x1c0>  // b.hs, b.nlast
 a54:	cmp	x3, x4
 a58:	b.hi	b10 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x1a8>  // b.pmore
 a5c:	mov	x24, x4
 a60:	ldr	x0, [x22]
 a64:	lsl	x24, x24, #3
 a68:	cbz	x0, ac0 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x158>
 a6c:	sub	x1, x0, #0x1
 a70:	tst	x1, x0
 a74:	b.ne	ae4 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x17c>  // b.any
 a78:	add	x24, x24, x1
 a7c:	neg	x0, x0
 a80:	and	x24, x24, x0
 a84:	mov	x1, x23
 a88:	mov	x0, x24
 a8c:	mov	w2, #0x0                   	// #0
 a90:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 a94:	mov	x25, x0
 a98:	ldr	x1, [x21]
 a9c:	ldr	x2, [x21, #16]
 aa0:	lsl	x2, x2, #3
 aa4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 aa8:	ldp	x0, x1, [x21]
 aac:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 ab0:	stp	x25, x24, [x21]
 ab4:	ldr	x3, [x21, #16]
 ab8:	add	x24, x3, #0x1
 abc:	b	9e4 <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x7c>
 ac0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 ac4:	str	x0, [x22]
 ac8:	b	a6c <_ZN11__sanitizer18SuppressionContext10GetMatchedEPNS_18InternalMmapVectorIPNS_11SuppressionEEE+0x104>
 acc:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 ad0:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 ad4:	add	x2, x2, #0x0
 ad8:	add	x0, x0, #0x0
 adc:	mov	w1, #0x1be                 	// #446
 ae0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 ae4:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 ae8:	add	x0, x0, #0x0
 aec:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 af0:	bl	0 <_ZN11__sanitizer3DieEv>
 af4:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 af8:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 afc:	mov	x3, x24
 b00:	add	x2, x2, #0x0
 b04:	add	x0, x0, #0x0
 b08:	mov	w1, #0x17b                 	// #379
 b0c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 b10:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 b14:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 b18:	add	x2, x2, #0x0
 b1c:	add	x0, x0, #0x0
 b20:	mov	w1, #0x1fd                 	// #509
 b24:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 b28:	mov	x4, x0
 b2c:	adrp	x2, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 b30:	adrp	x0, 0 <_ZN11__sanitizer18SuppressionContextC1EPPKci>
 b34:	mov	x3, x24
 b38:	add	x2, x2, #0x0
 b3c:	add	x0, x0, #0x0
 b40:	mov	w1, #0x17c                 	// #380
 b44:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_symbolizer.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer11AddressInfoC1Ev>:
   0:	stp	x19, x30, [sp, #-16]!
   4:	mov	x19, x0
   8:	mov	x2, #0x40                  	// #64
   c:	mov	w1, #0x0                   	// #0
  10:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  14:	mov	x0, #0xffffffffffffffff    	// #-1
  18:	str	x0, [x19, #40]
  1c:	ldp	x19, x30, [sp], #16
  20:	ret
  24:	nop

0000000000000028 <_ZN11__sanitizer11AddressInfo5ClearEv>:
  28:	stp	x19, x30, [sp, #-16]!
  2c:	mov	x19, x0
  30:	mov	x1, #0x0                   	// #0
  34:	ldr	x0, [x0, #8]
  38:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  3c:	ldr	x0, [x19, #32]
  40:	mov	x1, #0x0                   	// #0
  44:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  48:	ldr	x0, [x19, #48]
  4c:	mov	x1, #0x0                   	// #0
  50:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  54:	mov	x0, x19
  58:	mov	x2, #0x40                  	// #64
  5c:	mov	w1, #0x0                   	// #0
  60:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  64:	mov	x0, #0xffffffffffffffff    	// #-1
  68:	str	x0, [x19, #40]
  6c:	ldp	x19, x30, [sp], #16
  70:	ret
  74:	nop

0000000000000078 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>:
  78:	stp	x19, x20, [sp, #-32]!
  7c:	mov	x19, x0
  80:	mov	w20, w3
  84:	mov	x0, x1
  88:	stp	x21, x30, [sp, #16]
  8c:	mov	x21, x2
  90:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
  94:	stp	x0, x21, [x19, #8]
  98:	str	w20, [x19, #24]
  9c:	ldp	x21, x30, [sp, #16]
  a0:	ldp	x19, x20, [sp], #32
  a4:	ret

00000000000000a8 <_ZN11__sanitizer15SymbolizedStackC1Ev>:
  a8:	stp	x19, x30, [sp, #-16]!
  ac:	mov	x19, x0
  b0:	mov	x2, #0x40                  	// #64
  b4:	mov	w1, #0x0                   	// #0
  b8:	str	xzr, [x19], #8
  bc:	mov	x0, x19
  c0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
  c4:	mov	x0, #0xffffffffffffffff    	// #-1
  c8:	str	x0, [x19, #40]
  cc:	ldp	x19, x30, [sp], #16
  d0:	ret
  d4:	nop

00000000000000d8 <_ZN11__sanitizer15SymbolizedStack3NewEm>:
  d8:	stp	x19, x20, [sp, #-32]!
  dc:	mov	x2, #0x0                   	// #0
  e0:	mov	x1, #0x0                   	// #0
  e4:	stp	x21, x30, [sp, #16]
  e8:	mov	x21, x0
  ec:	mov	x0, #0x48                  	// #72
  f0:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
  f4:	mov	x20, x0
  f8:	mov	x19, x0
  fc:	mov	x2, #0x40                  	// #64
 100:	mov	w1, #0x0                   	// #0
 104:	str	xzr, [x20], #8
 108:	mov	x0, x20
 10c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 110:	mov	x0, #0xffffffffffffffff    	// #-1
 114:	str	x0, [x20, #40]
 118:	str	x21, [x19, #8]
 11c:	mov	x0, x19
 120:	ldp	x21, x30, [sp, #16]
 124:	ldp	x19, x20, [sp], #32
 128:	ret
 12c:	nop

0000000000000130 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>:
 130:	stp	x19, x20, [sp, #-32]!
 134:	mov	x19, x0
 138:	add	x20, x0, #0x8
 13c:	ldr	x0, [x0, #16]
 140:	mov	x1, #0x0                   	// #0
 144:	str	x30, [sp, #16]
 148:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 14c:	ldr	x0, [x19, #40]
 150:	mov	x1, #0x0                   	// #0
 154:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 158:	ldr	x0, [x19, #56]
 15c:	mov	x1, #0x0                   	// #0
 160:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 164:	mov	w1, #0x0                   	// #0
 168:	mov	x0, x20
 16c:	mov	x2, #0x40                  	// #64
 170:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 174:	ldr	x0, [x19]
 178:	mov	x1, #0xffffffffffffffff    	// #-1
 17c:	str	x1, [x19, #48]
 180:	cbz	x0, 188 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv+0x58>
 184:	bl	130 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
 188:	mov	x0, x19
 18c:	mov	x1, #0x0                   	// #0
 190:	ldr	x30, [sp, #16]
 194:	ldp	x19, x20, [sp], #32
 198:	b	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 19c:	nop

00000000000001a0 <_ZN11__sanitizer8DataInfoC1Ev>:
 1a0:	mov	x2, #0x40                  	// #64
 1a4:	mov	w1, #0x0                   	// #0
 1a8:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
 1ac:	nop

00000000000001b0 <_ZN11__sanitizer8DataInfo5ClearEv>:
 1b0:	stp	x19, x30, [sp, #-16]!
 1b4:	mov	x19, x0
 1b8:	mov	x1, #0x0                   	// #0
 1bc:	ldr	x0, [x0]
 1c0:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 1c4:	ldr	x0, [x19, #24]
 1c8:	mov	x1, #0x0                   	// #0
 1cc:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 1d0:	ldr	x0, [x19, #40]
 1d4:	mov	x1, #0x0                   	// #0
 1d8:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 1dc:	mov	x0, x19
 1e0:	mov	x2, #0x40                  	// #64
 1e4:	ldp	x19, x30, [sp], #16
 1e8:	mov	w1, #0x0                   	// #0
 1ec:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>

00000000000001f0 <_ZN11__sanitizer10Symbolizer20InvalidateModuleListEv>:
 1f0:	strb	wzr, [x0, #104]
 1f4:	ret

00000000000001f8 <_ZN11__sanitizer10Symbolizer8AddHooksEPFvvES2_>:
 1f8:	ldr	x3, [x0, #224]
 1fc:	cbz	x3, 224 <_ZN11__sanitizer10Symbolizer8AddHooksEPFvvES2_+0x2c>
 200:	str	x30, [sp, #-16]!
 204:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 208:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 20c:	add	x2, x2, #0x0
 210:	add	x0, x0, #0x0
 214:	mov	x4, #0x0                   	// #0
 218:	mov	x3, #0x0                   	// #0
 21c:	mov	w1, #0x4e                  	// #78
 220:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 224:	ldr	x3, [x0, #232]
 228:	cbnz	x3, 200 <_ZN11__sanitizer10Symbolizer8AddHooksEPFvvES2_+0x8>
 22c:	stp	x1, x2, [x0, #224]
 230:	ret
 234:	nop

0000000000000238 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc>:
 238:	stp	x19, x20, [sp, #-48]!
 23c:	mov	x20, x0
 240:	ldr	x0, [x0, #32]
 244:	stp	x21, x22, [sp, #16]
 248:	mov	x21, x1
 24c:	str	x30, [sp, #32]
 250:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
 254:	ldr	x0, [x20, #24]
 258:	cbz	x0, 268 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x30>
 25c:	mov	x1, x21
 260:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 264:	cbz	w0, 308 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0xd0>
 268:	ldr	x0, [x20, #16]
 26c:	mov	x19, #0x0                   	// #0
 270:	cbnz	x0, 288 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x50>
 274:	b	2c8 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x90>
 278:	ldr	x0, [x20, #16]
 27c:	add	x19, x19, #0x1
 280:	cmp	x19, x0
 284:	b.cs	2c8 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x90>  // b.hs, b.nlast
 288:	ldr	x0, [x20]
 28c:	mov	x1, x21
 290:	lsl	x22, x19, #3
 294:	ldr	x0, [x0, x19, lsl #3]
 298:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 29c:	cbnz	w0, 278 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x40>
 2a0:	ldr	x4, [x20, #16]
 2a4:	ldr	x0, [x20]
 2a8:	cmp	x4, x19
 2ac:	b.ls	3fc <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x1c4>  // b.plast
 2b0:	ldr	x0, [x0, x22]
 2b4:	str	x0, [x20, #24]
 2b8:	ldp	x21, x22, [sp, #16]
 2bc:	ldr	x30, [sp, #32]
 2c0:	ldp	x19, x20, [sp], #48
 2c4:	ret
 2c8:	mov	x0, x21
 2cc:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 2d0:	ldp	x4, x3, [x20, #8]
 2d4:	mov	x19, x20
 2d8:	str	x0, [x19, #24]!
 2dc:	lsr	x4, x4, #3
 2e0:	cmp	x3, x4
 2e4:	b.hi	3e4 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x1ac>  // b.pmore
 2e8:	add	x21, x3, #0x1
 2ec:	b.eq	31c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0xe4>  // b.none
 2f0:	ldr	x22, [x20]
 2f4:	str	x21, [x20, #16]
 2f8:	mov	x1, x19
 2fc:	add	x0, x22, x3, lsl #3
 300:	mov	x2, #0x8                   	// #8
 304:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 308:	ldp	x21, x22, [sp, #16]
 30c:	ldr	x0, [x20, #24]
 310:	ldr	x30, [sp, #32]
 314:	ldp	x19, x20, [sp], #48
 318:	ret
 31c:	tst	x3, x21
 320:	b.eq	35c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x124>  // b.none
 324:	clz	x2, x21
 328:	mov	w1, #0x3f                  	// #63
 32c:	sub	w1, w1, w2
 330:	mov	x2, #0x1                   	// #1
 334:	add	w4, w1, #0x1
 338:	lsl	x4, x2, x4
 33c:	cmp	x4, x21
 340:	b.ls	3c8 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x190>  // b.plast
 344:	lsl	x1, x2, x1
 348:	cmp	x1, x21
 34c:	b.cs	44c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x214>  // b.hs, b.nlast
 350:	cmp	x3, x4
 354:	b.hi	424 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x1ec>  // b.pmore
 358:	mov	x21, x4
 35c:	adrp	x22, 0 <_ZN11__sanitizer14PageSizeCachedE>
 360:	lsl	x21, x21, #3
 364:	ldr	x22, [x22]
 368:	ldr	x0, [x22]
 36c:	cbz	x0, 418 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x1e0>
 370:	sub	x1, x0, #0x1
 374:	tst	x0, x1
 378:	b.ne	43c <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x204>  // b.any
 37c:	add	x21, x21, x1
 380:	neg	x0, x0
 384:	and	x21, x21, x0
 388:	mov	w2, #0x0                   	// #0
 38c:	mov	x0, x21
 390:	adrp	x1, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 394:	add	x1, x1, #0x0
 398:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 39c:	ldr	x1, [x20]
 3a0:	mov	x22, x0
 3a4:	ldr	x2, [x20, #16]
 3a8:	lsl	x2, x2, #3
 3ac:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3b0:	ldp	x0, x1, [x20]
 3b4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3b8:	stp	x22, x21, [x20]
 3bc:	ldr	x3, [x20, #16]
 3c0:	add	x21, x3, #0x1
 3c4:	b	2f4 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0xbc>
 3c8:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3cc:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3d0:	mov	x3, x21
 3d4:	add	x2, x2, #0x0
 3d8:	add	x0, x0, #0x0
 3dc:	mov	w1, #0x17b                 	// #379
 3e0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3e4:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3e8:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 3ec:	add	x2, x2, #0x0
 3f0:	add	x0, x0, #0x0
 3f4:	mov	w1, #0x1be                 	// #446
 3f8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3fc:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 400:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 404:	mov	x3, x19
 408:	add	x2, x2, #0x0
 40c:	add	x0, x0, #0x0
 410:	mov	w1, #0x1b6                 	// #438
 414:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 418:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 41c:	str	x0, [x22]
 420:	b	370 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc+0x138>
 424:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 428:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 42c:	add	x2, x2, #0x0
 430:	add	x0, x0, #0x0
 434:	mov	w1, #0x1fd                 	// #509
 438:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 43c:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 440:	add	x0, x0, #0x0
 444:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 448:	bl	0 <_ZN11__sanitizer3DieEv>
 44c:	mov	x4, x1
 450:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 454:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 458:	mov	x3, x21
 45c:	add	x2, x2, #0x0
 460:	add	x0, x0, #0x0
 464:	mov	w1, #0x17c                 	// #380
 468:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 46c:	nop

0000000000000470 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE>:
 470:	stp	x19, x20, [sp, #-64]!
 474:	mov	x19, x0
 478:	stp	x23, x24, [sp, #32]
 47c:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
 480:	ldr	x20, [x23]
 484:	stp	x21, x22, [sp, #16]
 488:	mov	x21, x1
 48c:	stp	x25, x30, [sp, #48]
 490:	str	xzr, [x0]
 494:	stp	xzr, xzr, [x0, #8]
 498:	ldr	x0, [x20]
 49c:	cbz	x0, 5a4 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x134>
 4a0:	sub	x1, x0, #0x1
 4a4:	tst	x1, x0
 4a8:	b.ne	5b0 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x140>  // b.any
 4ac:	add	x20, x0, #0x7
 4b0:	neg	x0, x0
 4b4:	and	x20, x20, x0
 4b8:	mov	w2, #0x0                   	// #0
 4bc:	mov	x0, x20
 4c0:	adrp	x25, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 4c4:	add	x1, x25, #0x0
 4c8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 4cc:	ldr	x1, [x19]
 4d0:	mov	x22, x0
 4d4:	ldr	x2, [x19, #16]
 4d8:	add	x24, x19, #0x70
 4dc:	lsl	x2, x2, #3
 4e0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 4e4:	ldp	x0, x1, [x19]
 4e8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 4ec:	stp	x22, x20, [x19]
 4f0:	lsr	x0, x20, #3
 4f4:	stp	xzr, x24, [x19, #24]
 4f8:	cmp	x0, #0x3e7
 4fc:	b.ls	53c <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0xcc>  // b.plast
 500:	strb	wzr, [x19, #64]
 504:	mov	x0, x24
 508:	strb	wzr, [x19, #96]
 50c:	strb	wzr, [x19, #104]
 510:	bl	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
 514:	stp	xzr, xzr, [x19, #224]
 518:	ldp	x0, x1, [x21]
 51c:	stp	x0, x1, [x19, #200]
 520:	ldr	x0, [x21, #16]
 524:	ldp	x21, x22, [sp, #16]
 528:	ldp	x23, x24, [sp, #32]
 52c:	ldp	x25, x30, [sp, #48]
 530:	str	x0, [x19, #216]
 534:	ldp	x19, x20, [sp], #64
 538:	ret
 53c:	ldr	x3, [x19, #16]
 540:	cmp	x3, #0x3e8
 544:	b.hi	5cc <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x15c>  // b.pmore
 548:	ldr	x23, [x23]
 54c:	ldr	x0, [x23]
 550:	cbz	x0, 5c0 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x150>
 554:	sub	x1, x0, #0x1
 558:	tst	x1, x0
 55c:	b.ne	5b0 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x140>  // b.any
 560:	mov	x1, #0x1f3f                	// #7999
 564:	add	x20, x0, x1
 568:	neg	x0, x0
 56c:	add	x1, x25, #0x0
 570:	and	x20, x20, x0
 574:	mov	w2, #0x0                   	// #0
 578:	mov	x0, x20
 57c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 580:	ldr	x1, [x19]
 584:	mov	x22, x0
 588:	ldr	x2, [x19, #16]
 58c:	lsl	x2, x2, #3
 590:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 594:	ldp	x0, x1, [x19]
 598:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 59c:	stp	x22, x20, [x19]
 5a0:	b	500 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x90>
 5a4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 5a8:	str	x0, [x20]
 5ac:	b	4a0 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0x30>
 5b0:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 5b4:	add	x0, x0, #0x0
 5b8:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 5bc:	bl	0 <_ZN11__sanitizer3DieEv>
 5c0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 5c4:	str	x0, [x23]
 5c8:	b	554 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE+0xe4>
 5cc:	adrp	x2, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 5d0:	adrp	x0, 0 <_ZN11__sanitizer11AddressInfoC1Ev>
 5d4:	add	x2, x2, #0x0
 5d8:	add	x0, x0, #0x0
 5dc:	mov	x4, #0x3e8                 	// #1000
 5e0:	mov	w1, #0x1fd                 	// #509
 5e4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000005e8 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>:
 5e8:	str	x1, [x0]
 5ec:	ldr	x0, [x1, #224]
 5f0:	cbz	x0, 5fc <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_+0x14>
 5f4:	mov	x16, x0
 5f8:	br	x16
 5fc:	ret

0000000000000600 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>:
 600:	ldr	x0, [x0]
 604:	ldr	x0, [x0, #232]
 608:	cbz	x0, 614 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev+0x14>
 60c:	mov	x16, x0
 610:	br	x16
 614:	ret

sanitizer_symbolizer_libbacktrace.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ErrorCallback>:
   0:	ret
   4:	nop

0000000000000008 <_ZN11__sanitizer22LibbacktraceSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE>:
   8:	stp	x19, x20, [sp, #-80]!
   c:	dup	v0.2d, x2
  10:	mov	x20, x0
  14:	ldr	x0, [x0, #16]
  18:	adrp	x19, 0 <ErrorCallback>
  1c:	add	x19, x19, #0x0
  20:	stp	x21, x22, [sp, #16]
  24:	add	x22, sp, #0x30
  28:	mov	x3, x19
  2c:	mov	x21, x1
  30:	mov	x4, x22
  34:	adrp	x2, 0 <ErrorCallback>
  38:	add	x2, x2, #0x0
  3c:	str	x30, [sp, #32]
  40:	str	q0, [sp, #48]
  44:	str	xzr, [sp, #64]
  48:	bl	0 <__asan_backtrace_pcinfo>
  4c:	ldr	x0, [sp, #64]
  50:	cbz	x0, 68 <_ZN11__sanitizer22LibbacktraceSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x60>
  54:	mov	w0, #0x1                   	// #1
  58:	ldp	x21, x22, [sp, #16]
  5c:	ldr	x30, [sp, #32]
  60:	ldp	x19, x20, [sp], #80
  64:	ret
  68:	ldr	x0, [x20, #16]
  6c:	mov	x4, x22
  70:	mov	x3, x19
  74:	mov	x1, x21
  78:	adrp	x2, 0 <ErrorCallback>
  7c:	add	x2, x2, #0x0
  80:	bl	0 <__asan_backtrace_syminfo>
  84:	ldr	x0, [sp, #64]
  88:	ldp	x21, x22, [sp, #16]
  8c:	cmp	x0, #0x0
  90:	cset	w0, ne  // ne = any
  94:	ldr	x30, [sp, #32]
  98:	ldp	x19, x20, [sp], #80
  9c:	ret

00000000000000a0 <_ZN11__sanitizer22LibbacktraceSymbolizer13SymbolizeDataEmPNS_8DataInfoE>:
  a0:	ldr	x0, [x0, #16]
  a4:	str	x30, [sp, #-16]!
  a8:	mov	x4, x2
  ac:	adrp	x3, 0 <ErrorCallback>
  b0:	adrp	x2, 0 <ErrorCallback>
  b4:	add	x3, x3, #0x0
  b8:	add	x2, x2, #0x0
  bc:	bl	0 <__asan_backtrace_syminfo>
  c0:	mov	w0, #0x1                   	// #1
  c4:	ldr	x30, [sp], #16
  c8:	ret
  cc:	nop

00000000000000d0 <CplusV3DemangleCallback>:
  d0:	stp	x19, x20, [sp, #-48]!
  d4:	mov	x19, x2
  d8:	mov	x20, x1
  dc:	add	x2, x1, #0x1
  e0:	stp	x21, x22, [sp, #16]
  e4:	mov	x21, x0
  e8:	ldp	x3, x1, [x19, #8]
  ec:	str	x30, [sp, #32]
  f0:	add	x0, x2, x3
  f4:	cmp	x1, x0
  f8:	b.cc	138 <CplusV3DemangleCallback+0x68>  // b.lo, b.ul, b.last
  fc:	ldr	x22, [x19]
 100:	mov	x1, x21
 104:	add	x0, x22, x3
 108:	mov	x2, x20
 10c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 110:	ldp	x0, x1, [x19]
 114:	add	x0, x0, x20
 118:	strb	wzr, [x0, x1]
 11c:	ldr	x1, [x19, #8]
 120:	ldp	x21, x22, [sp, #16]
 124:	add	x20, x1, x20
 128:	ldr	x30, [sp, #32]
 12c:	str	x20, [x19, #8]
 130:	ldp	x19, x20, [sp], #48
 134:	ret
 138:	cmp	x0, x1, lsl #1
 13c:	lsl	x1, x1, #1
 140:	b.hi	184 <CplusV3DemangleCallback+0xb4>  // b.pmore
 144:	mov	x0, x1
 148:	str	x1, [x19, #16]
 14c:	mov	x1, #0x0                   	// #0
 150:	mov	x2, #0x0                   	// #0
 154:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
 158:	mov	x22, x0
 15c:	ldr	x1, [x19]
 160:	cbz	x1, 178 <CplusV3DemangleCallback+0xa8>
 164:	ldr	x2, [x19, #8]
 168:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 16c:	ldr	x0, [x19]
 170:	mov	x1, #0x0                   	// #0
 174:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 178:	str	x22, [x19]
 17c:	ldr	x3, [x19, #8]
 180:	b	100 <CplusV3DemangleCallback+0x30>
 184:	str	x0, [x19, #16]
 188:	b	14c <CplusV3DemangleCallback+0x7c>
 18c:	nop

0000000000000190 <SymbolizeDataCallback>:
 190:	cmp	x2, #0x0
 194:	ccmp	x3, #0x0, #0x4, ne  // ne = any
 198:	b.ne	1a0 <SymbolizeDataCallback+0x10>  // b.any
 19c:	ret
 1a0:	stp	x19, x20, [sp, #-80]!
 1a4:	mov	x19, x2
 1a8:	mov	x20, x3
 1ac:	adrp	x2, 0 <ErrorCallback>
 1b0:	add	x3, sp, #0x30
 1b4:	add	x2, x2, #0x0
 1b8:	mov	w1, #0x3                   	// #3
 1bc:	stp	x21, x22, [sp, #16]
 1c0:	mov	x21, x0
 1c4:	mov	x22, x4
 1c8:	mov	x0, x19
 1cc:	stp	x23, x30, [sp, #32]
 1d0:	str	xzr, [sp, #48]
 1d4:	stp	xzr, xzr, [sp, #56]
 1d8:	bl	0 <__asan_cplus_demangle_v3_callback>
 1dc:	cbnz	w0, 214 <SymbolizeDataCallback+0x84>
 1e0:	ldr	x0, [sp, #48]
 1e4:	cbz	x0, 1f0 <SymbolizeDataCallback+0x60>
 1e8:	mov	x1, #0x0                   	// #0
 1ec:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 1f0:	mov	x0, x19
 1f4:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 1f8:	mov	x23, x0
 1fc:	stp	x23, x20, [x21, #40]
 200:	str	x22, [x21, #56]
 204:	ldp	x21, x22, [sp, #16]
 208:	ldp	x23, x30, [sp, #32]
 20c:	ldp	x19, x20, [sp], #80
 210:	ret
 214:	ldp	x23, x0, [sp, #48]
 218:	ldr	x1, [sp, #64]
 21c:	add	x0, x0, #0x40
 220:	cmp	x0, x1
 224:	b.ls	244 <SymbolizeDataCallback+0xb4>  // b.plast
 228:	cbz	x23, 1f0 <SymbolizeDataCallback+0x60>
 22c:	stp	x23, x20, [x21, #40]
 230:	str	x22, [x21, #56]
 234:	ldp	x21, x22, [sp, #16]
 238:	ldp	x23, x30, [sp, #32]
 23c:	ldp	x19, x20, [sp], #80
 240:	ret
 244:	mov	x0, x23
 248:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 24c:	mov	x23, x0
 250:	mov	x1, #0x0                   	// #0
 254:	ldr	x0, [sp, #48]
 258:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 25c:	cbnz	x23, 22c <SymbolizeDataCallback+0x9c>
 260:	b	1f0 <SymbolizeDataCallback+0x60>
 264:	nop

0000000000000268 <_ZN11__sanitizer22LibbacktraceSymbolizer8DemangleEPKc>:
 268:	stp	x19, x30, [sp, #-48]!
 26c:	mov	x0, x1
 270:	adrp	x2, 0 <ErrorCallback>
 274:	add	x3, sp, #0x10
 278:	add	x2, x2, #0x0
 27c:	mov	w1, #0x3                   	// #3
 280:	str	xzr, [sp, #16]
 284:	stp	xzr, xzr, [sp, #24]
 288:	bl	0 <__asan_cplus_demangle_v3_callback>
 28c:	cbz	w0, 2b0 <_ZN11__sanitizer22LibbacktraceSymbolizer8DemangleEPKc+0x48>
 290:	ldp	x19, x0, [sp, #16]
 294:	ldr	x1, [sp, #32]
 298:	add	x0, x0, #0x40
 29c:	cmp	x0, x1
 2a0:	b.ls	2d4 <_ZN11__sanitizer22LibbacktraceSymbolizer8DemangleEPKc+0x6c>  // b.plast
 2a4:	mov	x0, x19
 2a8:	ldp	x19, x30, [sp], #48
 2ac:	ret
 2b0:	ldr	x19, [sp, #16]
 2b4:	cbz	x19, 2a4 <_ZN11__sanitizer22LibbacktraceSymbolizer8DemangleEPKc+0x3c>
 2b8:	mov	x0, x19
 2bc:	mov	x1, #0x0                   	// #0
 2c0:	mov	x19, #0x0                   	// #0
 2c4:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 2c8:	mov	x0, x19
 2cc:	ldp	x19, x30, [sp], #48
 2d0:	ret
 2d4:	mov	x0, x19
 2d8:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 2dc:	mov	x19, x0
 2e0:	mov	x1, #0x0                   	// #0
 2e4:	ldr	x0, [sp, #16]
 2e8:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 2ec:	mov	x0, x19
 2f0:	ldp	x19, x30, [sp], #48
 2f4:	ret

00000000000002f8 <SymbolizeCodeCallback>:
 2f8:	cbz	x2, 3a0 <SymbolizeCodeCallback+0xa8>
 2fc:	stp	x19, x20, [sp, #-80]!
 300:	mov	x19, x0
 304:	stp	x21, x22, [sp, #16]
 308:	ldr	x22, [x0, #8]
 30c:	str	x30, [sp, #32]
 310:	cbz	x22, 3fc <SymbolizeCodeCallback+0x104>
 314:	ldr	x0, [x0, #16]
 318:	mov	x21, x1
 31c:	mov	x20, x2
 320:	cbnz	x0, 41c <SymbolizeCodeCallback+0x124>
 324:	ldr	x0, [x19]
 328:	ldr	x4, [x0, #8]
 32c:	cmp	x21, x4
 330:	b.ne	44c <SymbolizeCodeCallback+0x154>  // b.any
 334:	ldr	x4, [x22, #8]
 338:	cmp	x21, x4
 33c:	b.ne	468 <SymbolizeCodeCallback+0x170>  // b.any
 340:	adrp	x2, 0 <ErrorCallback>
 344:	add	x3, sp, #0x30
 348:	add	x2, x2, #0x0
 34c:	mov	x0, x20
 350:	mov	w1, #0x3                   	// #3
 354:	str	xzr, [sp, #48]
 358:	stp	xzr, xzr, [sp, #56]
 35c:	bl	0 <__asan_cplus_demangle_v3_callback>
 360:	cbnz	w0, 3a4 <SymbolizeCodeCallback+0xac>
 364:	ldr	x0, [sp, #48]
 368:	cbz	x0, 374 <SymbolizeCodeCallback+0x7c>
 36c:	mov	x1, #0x0                   	// #0
 370:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 374:	mov	x0, x20
 378:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 37c:	mov	x21, x0
 380:	ldr	x0, [x19, #16]
 384:	ldr	x30, [sp, #32]
 388:	str	x21, [x22, #40]
 38c:	add	x0, x0, #0x1
 390:	ldp	x21, x22, [sp, #16]
 394:	str	x0, [x19, #16]
 398:	ldp	x19, x20, [sp], #80
 39c:	ret
 3a0:	ret
 3a4:	ldp	x21, x0, [sp, #48]
 3a8:	ldr	x1, [sp, #64]
 3ac:	add	x0, x0, #0x40
 3b0:	cmp	x0, x1
 3b4:	b.ls	3dc <SymbolizeCodeCallback+0xe4>  // b.plast
 3b8:	cbz	x21, 374 <SymbolizeCodeCallback+0x7c>
 3bc:	ldr	x0, [x19, #16]
 3c0:	ldr	x30, [sp, #32]
 3c4:	str	x21, [x22, #40]
 3c8:	add	x0, x0, #0x1
 3cc:	ldp	x21, x22, [sp, #16]
 3d0:	str	x0, [x19, #16]
 3d4:	ldp	x19, x20, [sp], #80
 3d8:	ret
 3dc:	mov	x0, x21
 3e0:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 3e4:	mov	x21, x0
 3e8:	mov	x1, #0x0                   	// #0
 3ec:	ldr	x0, [sp, #48]
 3f0:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 3f4:	cbnz	x21, 3bc <SymbolizeCodeCallback+0xc4>
 3f8:	b	374 <SymbolizeCodeCallback+0x7c>
 3fc:	adrp	x2, 0 <ErrorCallback>
 400:	adrp	x0, 0 <ErrorCallback>
 404:	add	x2, x2, #0x0
 408:	add	x0, x0, #0x0
 40c:	mov	x4, #0x0                   	// #0
 410:	mov	x3, #0x0                   	// #0
 414:	mov	w1, #0x5c                  	// #92
 418:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 41c:	mov	x0, x1
 420:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
 424:	ldr	x3, [x19]
 428:	mov	x22, x0
 42c:	add	x0, x0, #0x8
 430:	ldp	x1, x2, [x3, #16]
 434:	ldr	w3, [x3, #32]
 438:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
 43c:	ldr	x0, [x19, #8]
 440:	str	x22, [x0]
 444:	str	x22, [x19, #8]
 448:	b	324 <SymbolizeCodeCallback+0x2c>
 44c:	adrp	x2, 0 <ErrorCallback>
 450:	adrp	x0, 0 <ErrorCallback>
 454:	mov	x3, x21
 458:	add	x2, x2, #0x0
 45c:	add	x0, x0, #0x0
 460:	mov	w1, #0x65                  	// #101
 464:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 468:	adrp	x2, 0 <ErrorCallback>
 46c:	adrp	x0, 0 <ErrorCallback>
 470:	mov	x3, x21
 474:	add	x2, x2, #0x0
 478:	add	x0, x0, #0x0
 47c:	mov	w1, #0x66                  	// #102
 480:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 484:	nop

0000000000000488 <SymbolizeCodePCInfoCallback>:
 488:	cbz	x4, 55c <SymbolizeCodePCInfoCallback+0xd4>
 48c:	stp	x19, x20, [sp, #-96]!
 490:	mov	x19, x0
 494:	stp	x21, x22, [sp, #16]
 498:	ldr	x21, [x0, #8]
 49c:	stp	x23, x24, [sp, #32]
 4a0:	str	x30, [sp, #48]
 4a4:	cbz	x21, 5a0 <SymbolizeCodePCInfoCallback+0x118>
 4a8:	ldr	x0, [x0, #16]
 4ac:	mov	x22, x1
 4b0:	mov	x23, x2
 4b4:	mov	w24, w3
 4b8:	mov	x20, x4
 4bc:	cbnz	x0, 5c0 <SymbolizeCodePCInfoCallback+0x138>
 4c0:	ldr	x0, [x19]
 4c4:	ldr	x4, [x0, #8]
 4c8:	cmp	x22, x4
 4cc:	b.ne	5f0 <SymbolizeCodePCInfoCallback+0x168>  // b.any
 4d0:	ldr	x4, [x21, #8]
 4d4:	cmp	x22, x4
 4d8:	b.ne	60c <SymbolizeCodePCInfoCallback+0x184>  // b.any
 4dc:	adrp	x2, 0 <ErrorCallback>
 4e0:	add	x3, sp, #0x40
 4e4:	add	x2, x2, #0x0
 4e8:	mov	x0, x20
 4ec:	mov	w1, #0x3                   	// #3
 4f0:	str	xzr, [sp, #64]
 4f4:	stp	xzr, xzr, [sp, #72]
 4f8:	bl	0 <__asan_cplus_demangle_v3_callback>
 4fc:	cbnz	w0, 564 <SymbolizeCodePCInfoCallback+0xdc>
 500:	ldr	x0, [sp, #64]
 504:	cbz	x0, 510 <SymbolizeCodePCInfoCallback+0x88>
 508:	mov	x1, #0x0                   	// #0
 50c:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 510:	mov	x0, x20
 514:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 518:	mov	x22, x0
 51c:	str	x22, [x21, #40]
 520:	add	x21, x21, #0x8
 524:	cbz	x23, 534 <SymbolizeCodePCInfoCallback+0xac>
 528:	mov	x0, x23
 52c:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 530:	str	x0, [x21, #48]
 534:	ldr	x0, [x19, #16]
 538:	ldr	x30, [sp, #48]
 53c:	str	w24, [x21, #56]
 540:	add	x0, x0, #0x1
 544:	ldp	x21, x22, [sp, #16]
 548:	ldp	x23, x24, [sp, #32]
 54c:	str	x0, [x19, #16]
 550:	mov	w0, #0x0                   	// #0
 554:	ldp	x19, x20, [sp], #96
 558:	ret
 55c:	mov	w0, #0x0                   	// #0
 560:	ret
 564:	ldp	x22, x0, [sp, #64]
 568:	ldr	x1, [sp, #80]
 56c:	add	x0, x0, #0x40
 570:	cmp	x0, x1
 574:	b.ls	580 <SymbolizeCodePCInfoCallback+0xf8>  // b.plast
 578:	cbnz	x22, 51c <SymbolizeCodePCInfoCallback+0x94>
 57c:	b	510 <SymbolizeCodePCInfoCallback+0x88>
 580:	mov	x0, x22
 584:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 588:	mov	x22, x0
 58c:	mov	x1, #0x0                   	// #0
 590:	ldr	x0, [sp, #64]
 594:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
 598:	cbnz	x22, 51c <SymbolizeCodePCInfoCallback+0x94>
 59c:	b	510 <SymbolizeCodePCInfoCallback+0x88>
 5a0:	adrp	x2, 0 <ErrorCallback>
 5a4:	adrp	x0, 0 <ErrorCallback>
 5a8:	add	x2, x2, #0x0
 5ac:	add	x0, x0, #0x0
 5b0:	mov	x4, #0x0                   	// #0
 5b4:	mov	x3, #0x0                   	// #0
 5b8:	mov	w1, #0x5c                  	// #92
 5bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 5c0:	mov	x0, x1
 5c4:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
 5c8:	ldr	x3, [x19]
 5cc:	mov	x21, x0
 5d0:	add	x0, x0, #0x8
 5d4:	ldp	x1, x2, [x3, #16]
 5d8:	ldr	w3, [x3, #32]
 5dc:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
 5e0:	ldr	x0, [x19, #8]
 5e4:	str	x21, [x0]
 5e8:	str	x21, [x19, #8]
 5ec:	b	4c0 <SymbolizeCodePCInfoCallback+0x38>
 5f0:	adrp	x2, 0 <ErrorCallback>
 5f4:	adrp	x0, 0 <ErrorCallback>
 5f8:	mov	x3, x22
 5fc:	add	x2, x2, #0x0
 600:	add	x0, x0, #0x0
 604:	mov	w1, #0x65                  	// #101
 608:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 60c:	adrp	x2, 0 <ErrorCallback>
 610:	adrp	x0, 0 <ErrorCallback>
 614:	mov	x3, x22
 618:	add	x2, x2, #0x0
 61c:	add	x0, x0, #0x0
 620:	mov	w1, #0x66                  	// #102
 624:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000628 <_ZN11__sanitizer22LibbacktraceSymbolizer3getEPNS_17LowLevelAllocatorE>:
 628:	stp	x19, x20, [sp, #-32]!
 62c:	adrp	x2, 0 <ErrorCallback>
 630:	mov	x20, x0
 634:	add	x2, x2, #0x0
 638:	adrp	x0, 0 <ErrorCallback>
 63c:	mov	x3, #0x0                   	// #0
 640:	add	x0, x0, #0x0
 644:	mov	w1, #0x0                   	// #0
 648:	str	x30, [sp, #16]
 64c:	bl	0 <__asan_backtrace_create_state>
 650:	cbz	x0, 680 <_ZN11__sanitizer22LibbacktraceSymbolizer3getEPNS_17LowLevelAllocatorE+0x58>
 654:	mov	x19, x0
 658:	mov	x1, #0x18                  	// #24
 65c:	mov	x0, x20
 660:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 664:	adrp	x1, 0 <ErrorCallback>
 668:	add	x1, x1, #0x0
 66c:	stp	x1, xzr, [x0]
 670:	str	x19, [x0, #16]
 674:	ldr	x30, [sp, #16]
 678:	ldp	x19, x20, [sp], #32
 67c:	ret
 680:	mov	x0, #0x0                   	// #0
 684:	ldr	x30, [sp, #16]
 688:	ldp	x19, x20, [sp], #32
 68c:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool5FlushEv:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool5FlushEv>:
   0:	ret

sanitizer_symbolizer_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>:
       0:	stp	x19, x20, [sp, #-96]!
       4:	mov	x19, #0x0                   	// #0
       8:	stp	x21, x22, [sp, #16]
       c:	mov	x22, x0
      10:	mov	x21, x1
      14:	stp	x23, x24, [sp, #32]
      18:	adrp	x24, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
      1c:	mov	x23, x2
      20:	add	x24, x24, #0x0
      24:	stp	x25, x26, [sp, #48]
      28:	sub	x26, x2, #0x1
      2c:	add	x25, sp, #0x58
      30:	str	x30, [sp, #64]
      34:	b	58 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0x58>
      38:	cmp	x19, #0x1
      3c:	b.ls	4c <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0x4c>  // b.plast
      40:	ldurb	w0, [x1, #-1]
      44:	cmp	w0, #0xa
      48:	b.eq	d8 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0xd8>  // b.none
      4c:	add	x0, x19, #0x1
      50:	cmp	x23, x0
      54:	b.eq	120 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0x120>  // b.none
      58:	ldr	w0, [x22, #16]
      5c:	mov	x3, x25
      60:	sub	x2, x26, x19
      64:	add	x1, x21, x19
      68:	mov	x4, #0x0                   	// #0
      6c:	str	xzr, [sp, #88]
      70:	bl	0 <_ZN11__sanitizer12ReadFromFileEiPvmPmPi>
      74:	ands	w20, w0, #0xff
      78:	b.eq	f0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0xf0>  // b.none
      7c:	ldr	x3, [sp, #88]
      80:	add	x19, x19, x3
      84:	add	x1, x21, x19
      88:	cbz	x3, f0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0xf0>
      8c:	ldr	x0, [x22]
      90:	ldr	x3, [x0]
      94:	cmp	x3, x24
      98:	b.eq	38 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0x38>  // b.none
      9c:	mov	x2, x19
      a0:	mov	x1, x21
      a4:	mov	x0, x22
      a8:	blr	x3
      ac:	tst	w0, #0xff
      b0:	b.eq	4c <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0x4c>  // b.none
      b4:	add	x21, x21, x19
      b8:	strb	wzr, [x21]
      bc:	mov	w0, w20
      c0:	ldp	x21, x22, [sp, #16]
      c4:	ldp	x23, x24, [sp, #32]
      c8:	ldp	x25, x26, [sp, #48]
      cc:	ldr	x30, [sp, #64]
      d0:	ldp	x19, x20, [sp], #96
      d4:	ret
      d8:	ldurb	w0, [x1, #-2]
      dc:	cmp	w0, #0xa
      e0:	b.ne	4c <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0x4c>  // b.any
      e4:	mov	x21, x1
      e8:	strb	wzr, [x21]
      ec:	b	bc <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0xbc>
      f0:	ldr	w1, [x22, #16]
      f4:	mov	w20, #0x0                   	// #0
      f8:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
      fc:	add	x0, x0, #0x0
     100:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     104:	mov	w0, w20
     108:	ldp	x21, x22, [sp, #16]
     10c:	ldp	x23, x24, [sp, #32]
     110:	ldp	x25, x26, [sp, #48]
     114:	ldr	x30, [sp, #64]
     118:	ldp	x19, x20, [sp], #96
     11c:	ret
     120:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     124:	add	x0, x0, #0x0
     128:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     12c:	strb	wzr, [x21]
     130:	b	bc <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0+0xbc>
     134:	nop

0000000000000138 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>:
     138:	cbz	x2, 140 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm+0x8>
     13c:	b	0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     140:	mov	w0, #0x1                   	// #1
     144:	ret

0000000000000148 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>:
     148:	stp	x19, x20, [sp, #-32]!
     14c:	adrp	x19, 0 <_ZN11__sanitizer10Symbolizer8init_mu_E>
     150:	mov	w2, #0x1                   	// #1
     154:	ldr	x0, [x19]
     158:	str	x30, [sp, #16]
     15c:	ldxrb	w1, [x0]
     160:	stxrb	w3, w2, [x0]
     164:	cbnz	w3, 15c <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x14>
     168:	dmb	ish
     16c:	tst	w1, #0xff
     170:	b.eq	178 <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x30>  // b.none
     174:	bl	0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     178:	adrp	x20, 0 <_ZN11__sanitizer10Symbolizer11symbolizer_E>
     17c:	ldr	x20, [x20]
     180:	ldr	x0, [x20]
     184:	cbz	x0, 1a0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x58>
     188:	dmb	ish
     18c:	ldr	x19, [x19]
     190:	strb	wzr, [x19]
     194:	ldr	x30, [sp, #16]
     198:	ldp	x19, x20, [sp], #32
     19c:	ret
     1a0:	bl	0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv>
     1a4:	str	x0, [x20]
     1a8:	cbnz	x0, 188 <_ZN11__sanitizer10Symbolizer9GetOrInitEv+0x40>
     1ac:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     1b0:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     1b4:	add	x2, x2, #0x0
     1b8:	add	x0, x0, #0x0
     1bc:	mov	x4, #0x0                   	// #0
     1c0:	mov	x3, #0x0                   	// #0
     1c4:	mov	w1, #0x17                  	// #23
     1c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     1cc:	nop

00000000000001d0 <_ZN11__sanitizer12ExtractTokenEPKcS1_PPc>:
     1d0:	stp	x19, x20, [sp, #-32]!
     1d4:	mov	x20, x0
     1d8:	stp	x21, x30, [sp, #16]
     1dc:	mov	x21, x2
     1e0:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
     1e4:	mov	x2, #0x0                   	// #0
     1e8:	mov	x19, x0
     1ec:	mov	x1, #0x0                   	// #0
     1f0:	add	x0, x0, #0x1
     1f4:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     1f8:	str	x0, [x21]
     1fc:	mov	x2, x19
     200:	mov	x1, x20
     204:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     208:	ldr	x1, [x21]
     20c:	add	x0, x20, x19
     210:	strb	wzr, [x1, x19]
     214:	ldrb	w1, [x20, x19]
     218:	ldp	x21, x30, [sp, #16]
     21c:	cmp	w1, #0x0
     220:	cinc	x0, x0, ne  // ne = any
     224:	ldp	x19, x20, [sp], #32
     228:	ret
     22c:	nop

0000000000000230 <_ZN11__sanitizer10ExtractIntEPKcS1_Pi>:
     230:	stp	x19, x20, [sp, #-48]!
     234:	stp	x21, x22, [sp, #16]
     238:	mov	x21, x0
     23c:	stp	x23, x30, [sp, #32]
     240:	mov	x23, x2
     244:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
     248:	mov	x2, #0x0                   	// #0
     24c:	mov	x19, x0
     250:	mov	x1, #0x0                   	// #0
     254:	add	x0, x0, #0x1
     258:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     25c:	mov	x20, x0
     260:	mov	x2, x19
     264:	mov	x1, x21
     268:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     26c:	add	x22, x21, x19
     270:	strb	wzr, [x20, x19]
     274:	ldrb	w0, [x21, x19]
     278:	cmp	w0, #0x0
     27c:	cinc	x22, x22, ne  // ne = any
     280:	cbz	x20, 290 <_ZN11__sanitizer10ExtractIntEPKcS1_Pi+0x60>
     284:	mov	x0, x20
     288:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     28c:	str	w0, [x23]
     290:	mov	x0, x20
     294:	mov	x1, #0x0                   	// #0
     298:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     29c:	mov	x0, x22
     2a0:	ldp	x21, x22, [sp, #16]
     2a4:	ldp	x23, x30, [sp, #32]
     2a8:	ldp	x19, x20, [sp], #48
     2ac:	ret

00000000000002b0 <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm>:
     2b0:	stp	x19, x20, [sp, #-48]!
     2b4:	stp	x21, x22, [sp, #16]
     2b8:	mov	x21, x0
     2bc:	stp	x23, x30, [sp, #32]
     2c0:	mov	x23, x2
     2c4:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
     2c8:	mov	x2, #0x0                   	// #0
     2cc:	mov	x19, x0
     2d0:	mov	x1, #0x0                   	// #0
     2d4:	add	x0, x0, #0x1
     2d8:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     2dc:	mov	x20, x0
     2e0:	mov	x2, x19
     2e4:	mov	x1, x21
     2e8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     2ec:	add	x22, x21, x19
     2f0:	strb	wzr, [x20, x19]
     2f4:	ldrb	w0, [x21, x19]
     2f8:	cmp	w0, #0x0
     2fc:	cinc	x22, x22, ne  // ne = any
     300:	cbz	x20, 310 <_ZN11__sanitizer11ExtractUptrEPKcS1_Pm+0x60>
     304:	mov	x0, x20
     308:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     30c:	str	x0, [x23]
     310:	mov	x0, x20
     314:	mov	x1, #0x0                   	// #0
     318:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     31c:	mov	x0, x22
     320:	ldp	x21, x22, [sp, #16]
     324:	ldp	x23, x30, [sp, #32]
     328:	ldp	x19, x20, [sp], #48
     32c:	ret

0000000000000330 <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc>:
     330:	stp	x19, x20, [sp, #-48]!
     334:	mov	x20, x0
     338:	stp	x21, x22, [sp, #16]
     33c:	mov	x21, x2
     340:	stp	x23, x30, [sp, #32]
     344:	mov	x23, x1
     348:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
     34c:	cbz	x0, 3bc <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc+0x8c>
     350:	mov	x19, x0
     354:	sub	x22, x0, x20
     358:	mov	x2, #0x0                   	// #0
     35c:	mov	x1, #0x0                   	// #0
     360:	add	x0, x22, #0x1
     364:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     368:	str	x0, [x21]
     36c:	mov	x1, x20
     370:	mov	x2, x22
     374:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     378:	ldr	x0, [x21]
     37c:	strb	wzr, [x0, x22]
     380:	ldrb	w0, [x19]
     384:	cbnz	w0, 39c <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc+0x6c>
     388:	mov	x0, x19
     38c:	ldp	x21, x22, [sp, #16]
     390:	ldp	x23, x30, [sp, #32]
     394:	ldp	x19, x20, [sp], #48
     398:	ret
     39c:	mov	x0, x23
     3a0:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     3a4:	add	x19, x19, x0
     3a8:	mov	x0, x19
     3ac:	ldp	x21, x22, [sp, #16]
     3b0:	ldp	x23, x30, [sp, #32]
     3b4:	ldp	x19, x20, [sp], #48
     3b8:	ret
     3bc:	mov	x0, x20
     3c0:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     3c4:	mov	x22, x0
     3c8:	add	x19, x20, x0
     3cc:	b	358 <_ZN11__sanitizer25ExtractTokenUpToDelimiterEPKcS1_PPc+0x28>

00000000000003d0 <_ZN11__sanitizer10Symbolizer5FlushEv>:
     3d0:	stp	x19, x20, [sp, #-64]!
     3d4:	stp	x21, x22, [sp, #16]
     3d8:	mov	x21, x0
     3dc:	stp	x23, x30, [sp, #32]
     3e0:	add	x23, x0, #0x70
     3e4:	mov	x0, x23
     3e8:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     3ec:	ldr	x19, [x21, #208]
     3f0:	cbz	x19, 42c <_ZN11__sanitizer10Symbolizer5FlushEv+0x5c>
     3f4:	adrp	x22, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     3f8:	add	x20, sp, #0x38
     3fc:	add	x22, x22, #0x0
     400:	mov	x1, x21
     404:	mov	x0, x20
     408:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
     40c:	ldr	x1, [x19]
     410:	mov	x0, x20
     414:	ldr	x1, [x1, #16]
     418:	cmp	x1, x22
     41c:	b.ne	444 <_ZN11__sanitizer10Symbolizer5FlushEv+0x74>  // b.any
     420:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
     424:	ldr	x19, [x19, #8]
     428:	cbnz	x19, 400 <_ZN11__sanitizer10Symbolizer5FlushEv+0x30>
     42c:	mov	x0, x23
     430:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     434:	ldp	x21, x22, [sp, #16]
     438:	ldp	x23, x30, [sp, #32]
     43c:	ldp	x19, x20, [sp], #64
     440:	ret
     444:	mov	x0, x19
     448:	blr	x1
     44c:	mov	x0, x20
     450:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
     454:	ldr	x19, [x19, #8]
     458:	cbnz	x19, 400 <_ZN11__sanitizer10Symbolizer5FlushEv+0x30>
     45c:	mov	x0, x23
     460:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     464:	ldp	x21, x22, [sp, #16]
     468:	ldp	x23, x30, [sp, #32]
     46c:	ldp	x19, x20, [sp], #64
     470:	ret
     474:	nop

0000000000000478 <_ZN11__sanitizer10Symbolizer8DemangleEPKc>:
     478:	stp	x19, x20, [sp, #-80]!
     47c:	stp	x21, x22, [sp, #16]
     480:	mov	x21, x0
     484:	stp	x25, x30, [sp, #48]
     488:	add	x25, x0, #0x70
     48c:	mov	x0, x25
     490:	stp	x23, x24, [sp, #32]
     494:	mov	x24, x1
     498:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     49c:	ldr	x19, [x21, #208]
     4a0:	cbz	x19, 51c <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0xa4>
     4a4:	adrp	x22, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     4a8:	add	x20, sp, #0x48
     4ac:	add	x22, x22, #0x0
     4b0:	b	4c4 <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x4c>
     4b4:	mov	x0, x20
     4b8:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
     4bc:	ldr	x19, [x19, #8]
     4c0:	cbz	x19, 51c <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0xa4>
     4c4:	mov	x1, x21
     4c8:	mov	x0, x20
     4cc:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
     4d0:	ldr	x2, [x19]
     4d4:	ldr	x2, [x2, #24]
     4d8:	cmp	x2, x22
     4dc:	b.eq	4b4 <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x3c>  // b.none
     4e0:	mov	x1, x24
     4e4:	mov	x0, x19
     4e8:	blr	x2
     4ec:	mov	x23, x0
     4f0:	cbz	x0, 4b4 <_ZN11__sanitizer10Symbolizer8DemangleEPKc+0x3c>
     4f4:	mov	x0, x20
     4f8:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
     4fc:	mov	x0, x25
     500:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     504:	mov	x0, x23
     508:	ldp	x21, x22, [sp, #16]
     50c:	ldp	x23, x24, [sp, #32]
     510:	ldp	x25, x30, [sp, #48]
     514:	ldp	x19, x20, [sp], #80
     518:	ret
     51c:	mov	x1, x24
     520:	mov	x0, x21
     524:	bl	0 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc>
     528:	mov	x23, x0
     52c:	mov	x0, x25
     530:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     534:	mov	x0, x23
     538:	ldp	x21, x22, [sp, #16]
     53c:	ldp	x23, x24, [sp, #32]
     540:	ldp	x25, x30, [sp, #48]
     544:	ldp	x19, x20, [sp], #80
     548:	ret
     54c:	nop

0000000000000550 <_ZN11__sanitizer10Symbolizer14RefreshModulesEv>:
     550:	stp	x19, x30, [sp, #-16]!
     554:	mov	x19, x0
     558:	add	x0, x0, #0x28
     55c:	bl	0 <_ZN11__sanitizer13ListOfModules4initEv>
     560:	add	x0, x19, #0x48
     564:	bl	0 <_ZN11__sanitizer13ListOfModules12fallbackInitEv>
     568:	ldr	x0, [x19, #56]
     56c:	cbz	x0, 580 <_ZN11__sanitizer10Symbolizer14RefreshModulesEv+0x30>
     570:	mov	w0, #0x1                   	// #1
     574:	strb	w0, [x19, #104]
     578:	ldp	x19, x30, [sp], #16
     57c:	ret
     580:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     584:	add	x0, x0, #0x0
     588:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     58c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000590 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>:
     590:	stp	x19, x20, [sp, #-48]!
     594:	mov	x19, x0
     598:	mov	x20, x1
     59c:	ldrb	w0, [x0, #104]
     5a0:	stp	x21, x22, [sp, #16]
     5a4:	stp	x23, x30, [sp, #32]
     5a8:	cbz	w0, 638 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0xa8>
     5ac:	ldr	x0, [x19, #56]
     5b0:	mov	w23, #0x0                   	// #0
     5b4:	cbz	x0, 6cc <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x13c>
     5b8:	mov	x21, #0x0                   	// #0
     5bc:	mov	x22, #0x0                   	// #0
     5c0:	b	5d8 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x48>
     5c4:	ldr	x0, [x19, #56]
     5c8:	add	x22, x22, #0x1
     5cc:	add	x21, x21, #0x48
     5d0:	cmp	x0, x22
     5d4:	b.ls	618 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x88>  // b.plast
     5d8:	ldr	x0, [x19, #40]
     5dc:	mov	x1, x20
     5e0:	add	x0, x0, x21
     5e4:	bl	0 <_ZNK11__sanitizer12LoadedModule15containsAddressEm>
     5e8:	tst	w0, #0xff
     5ec:	b.eq	5c4 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x34>  // b.none
     5f0:	ldr	x4, [x19, #56]
     5f4:	cmp	x4, x22
     5f8:	b.ls	6b0 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x120>  // b.plast
     5fc:	ldr	x0, [x19, #40]
     600:	adds	x0, x0, x21
     604:	b.eq	618 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x88>  // b.none
     608:	ldp	x21, x22, [sp, #16]
     60c:	ldp	x23, x30, [sp, #32]
     610:	ldp	x19, x20, [sp], #48
     614:	ret
     618:	cbz	w23, 6cc <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x13c>
     61c:	ldr	x0, [x19, #88]
     620:	cbnz	x0, 660 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0xd0>
     624:	mov	x0, #0x0                   	// #0
     628:	ldp	x21, x22, [sp, #16]
     62c:	ldp	x23, x30, [sp, #32]
     630:	ldp	x19, x20, [sp], #48
     634:	ret
     638:	add	x0, x19, #0x28
     63c:	bl	0 <_ZN11__sanitizer13ListOfModules4initEv>
     640:	add	x0, x19, #0x48
     644:	bl	0 <_ZN11__sanitizer13ListOfModules12fallbackInitEv>
     648:	ldr	x0, [x19, #56]
     64c:	cbz	x0, 740 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x1b0>
     650:	mov	w0, #0x1                   	// #1
     654:	mov	w23, #0x1                   	// #1
     658:	strb	w0, [x19, #104]
     65c:	b	5b8 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x28>
     660:	mov	x21, #0x0                   	// #0
     664:	mov	x22, #0x0                   	// #0
     668:	b	680 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0xf0>
     66c:	ldr	x0, [x19, #88]
     670:	add	x22, x22, #0x1
     674:	add	x21, x21, #0x48
     678:	cmp	x0, x22
     67c:	b.ls	624 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x94>  // b.plast
     680:	ldr	x0, [x19, #72]
     684:	mov	x1, x20
     688:	add	x0, x0, x21
     68c:	bl	0 <_ZNK11__sanitizer12LoadedModule15containsAddressEm>
     690:	tst	w0, #0xff
     694:	b.eq	66c <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0xdc>  // b.none
     698:	ldr	x4, [x19, #88]
     69c:	cmp	x22, x4
     6a0:	b.cs	6b0 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x120>  // b.hs, b.nlast
     6a4:	ldr	x0, [x19, #72]
     6a8:	add	x0, x0, x21
     6ac:	b	608 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x78>
     6b0:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     6b4:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     6b8:	mov	x3, x22
     6bc:	add	x2, x2, #0x0
     6c0:	add	x0, x0, #0x0
     6c4:	mov	w1, #0x2f9                 	// #761
     6c8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     6cc:	add	x0, x19, #0x28
     6d0:	bl	0 <_ZN11__sanitizer13ListOfModules4initEv>
     6d4:	add	x0, x19, #0x48
     6d8:	bl	0 <_ZN11__sanitizer13ListOfModules12fallbackInitEv>
     6dc:	ldr	x0, [x19, #56]
     6e0:	cbz	x0, 740 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x1b0>
     6e4:	mov	w0, #0x1                   	// #1
     6e8:	mov	x21, #0x0                   	// #0
     6ec:	mov	x22, #0x0                   	// #0
     6f0:	strb	w0, [x19, #104]
     6f4:	b	70c <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x17c>
     6f8:	ldr	x0, [x19, #56]
     6fc:	add	x22, x22, #0x1
     700:	add	x21, x21, #0x48
     704:	cmp	x0, x22
     708:	b.ls	61c <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x8c>  // b.plast
     70c:	ldr	x0, [x19, #40]
     710:	mov	x1, x20
     714:	add	x0, x0, x21
     718:	bl	0 <_ZNK11__sanitizer12LoadedModule15containsAddressEm>
     71c:	tst	w0, #0xff
     720:	b.eq	6f8 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x168>  // b.none
     724:	ldr	x4, [x19, #56]
     728:	cmp	x22, x4
     72c:	b.cs	6b0 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x120>  // b.hs, b.nlast
     730:	ldr	x0, [x19, #40]
     734:	adds	x0, x0, x21
     738:	b.ne	608 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x78>  // b.any
     73c:	b	61c <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm+0x8c>
     740:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     744:	add	x0, x0, #0x0
     748:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     74c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000750 <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE>:
     750:	stp	x19, x20, [sp, #-48]!
     754:	mov	x20, x4
     758:	mov	x19, x1
     75c:	stp	x21, x22, [sp, #16]
     760:	mov	x22, x2
     764:	mov	x21, x3
     768:	str	x30, [sp, #32]
     76c:	bl	590 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>
     770:	cbz	x0, 7a4 <_ZN11__sanitizer10Symbolizer33FindModuleNameAndOffsetForAddressEmPPKcPmPNS_10ModuleArchE+0x54>
     774:	mov	x5, x0
     778:	mov	w0, #0x1                   	// #1
     77c:	ldr	x30, [sp, #32]
     780:	ldp	x2, x1, [x5]
     784:	str	x2, [x22]
     788:	sub	x1, x19, x1
     78c:	str	x1, [x21]
     790:	ldr	w1, [x5, #24]
     794:	str	w1, [x20]
     798:	ldp	x21, x22, [sp, #16]
     79c:	ldp	x19, x20, [sp], #48
     7a0:	ret
     7a4:	mov	w0, #0x0                   	// #0
     7a8:	ldp	x21, x22, [sp, #16]
     7ac:	ldr	x30, [sp, #32]
     7b0:	ldp	x19, x20, [sp], #48
     7b4:	ret

00000000000007b8 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm>:
     7b8:	stp	x19, x20, [sp, #-64]!
     7bc:	mov	x20, x0
     7c0:	mov	x19, x1
     7c4:	stp	x21, x22, [sp, #16]
     7c8:	add	x22, x0, #0x70
     7cc:	mov	x0, x22
     7d0:	mov	x21, x2
     7d4:	stp	x23, x24, [sp, #32]
     7d8:	mov	x23, x3
     7dc:	str	x30, [sp, #48]
     7e0:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     7e4:	mov	x1, x19
     7e8:	mov	x0, x20
     7ec:	bl	590 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>
     7f0:	cbz	x0, 834 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm+0x7c>
     7f4:	ldp	x1, x2, [x0]
     7f8:	mov	w24, #0x1                   	// #1
     7fc:	sub	x19, x19, x2
     800:	str	x19, [x23]
     804:	cbz	x21, 814 <_ZN11__sanitizer10Symbolizer27GetModuleNameAndOffsetForPCEmPPKcPm+0x5c>
     808:	mov	x0, x20
     80c:	bl	0 <_ZN11__sanitizer10Symbolizer15ModuleNameOwner12GetOwnedCopyEPKc>
     810:	str	x0, [x21]
     814:	mov	x0, x22
     818:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     81c:	mov	w0, w24
     820:	ldp	x21, x22, [sp, #16]
     824:	ldp	x23, x24, [sp, #32]
     828:	ldr	x30, [sp, #48]
     82c:	ldp	x19, x20, [sp], #64
     830:	ret
     834:	mov	x0, x22
     838:	mov	w24, #0x0                   	// #0
     83c:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     840:	mov	w0, w24
     844:	ldp	x21, x22, [sp, #16]
     848:	ldp	x23, x24, [sp, #32]
     84c:	ldr	x30, [sp, #48]
     850:	ldp	x19, x20, [sp], #64
     854:	ret

0000000000000858 <_ZN11__sanitizer14LLVMSymbolizerC1EPKcPNS_17LowLevelAllocatorE>:
     858:	stp	x19, x20, [sp, #-32]!
     85c:	mov	x20, x0
     860:	adrp	x3, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     864:	add	x3, x3, #0x0
     868:	str	x30, [sp, #16]
     86c:	stp	x3, xzr, [x20]
     870:	mov	x0, x2
     874:	mov	x19, x1
     878:	mov	x1, #0x4028                	// #16424
     87c:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
     880:	add	x2, x0, #0x4, lsl #12
     884:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     888:	mov	x3, #0xffffffffffffffff    	// #-1
     88c:	add	x1, x1, #0x0
     890:	stp	x1, x19, [x0]
     894:	str	x3, [x0, #16]
     898:	str	xzr, [x0, #16408]
     89c:	strh	wzr, [x2, #32]
     8a0:	strb	wzr, [x2, #34]
     8a4:	cbz	x19, 8cc <_ZN11__sanitizer14LLVMSymbolizerC1EPKcPNS_17LowLevelAllocatorE+0x74>
     8a8:	ldrb	w1, [x19]
     8ac:	cbz	w1, 8ec <_ZN11__sanitizer14LLVMSymbolizerC1EPKcPNS_17LowLevelAllocatorE+0x94>
     8b0:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     8b4:	add	x1, x1, #0x0
     8b8:	ldr	x30, [sp, #16]
     8bc:	str	x1, [x0]
     8c0:	str	x0, [x20, #16]
     8c4:	ldp	x19, x20, [sp], #32
     8c8:	ret
     8cc:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     8d0:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     8d4:	add	x2, x2, #0x0
     8d8:	add	x0, x0, #0x0
     8dc:	mov	x4, #0x0                   	// #0
     8e0:	mov	x3, #0x0                   	// #0
     8e4:	mov	w1, #0x18f                 	// #399
     8e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     8ec:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     8f0:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     8f4:	add	x2, x2, #0x0
     8f8:	add	x0, x0, #0x0
     8fc:	mov	x4, #0x0                   	// #0
     900:	mov	x3, #0x0                   	// #0
     904:	mov	w1, #0x190                 	// #400
     908:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     90c:	nop

0000000000000910 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>:
     910:	stp	x19, x20, [sp, #-112]!
     914:	mov	x20, x0
     918:	stp	x21, x22, [sp, #16]
     91c:	mov	x22, x1
     920:	stp	x23, x24, [sp, #32]
     924:	adrp	x24, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     928:	add	x24, x24, #0x0
     92c:	stp	x25, x26, [sp, #48]
     930:	adrp	x25, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     934:	add	x25, x25, #0x0
     938:	stp	x27, x28, [sp, #64]
     93c:	mov	w27, #0x1                   	// #1
     940:	str	x30, [sp, #80]
     944:	str	x1, [sp, #104]
     948:	mov	x1, x24
     94c:	mov	x0, x20
     950:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
     954:	mov	x19, x0
     958:	mov	x2, #0x0                   	// #0
     95c:	mov	x1, #0x0                   	// #0
     960:	add	x0, x0, #0x1
     964:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     968:	mov	x28, x0
     96c:	mov	x2, x19
     970:	mov	x1, x20
     974:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     978:	add	x26, x20, x19
     97c:	strb	wzr, [x28, x19]
     980:	ldrb	w0, [x20, x19]
     984:	cmp	w0, #0x0
     988:	cinc	x26, x26, ne  // ne = any
     98c:	cbz	x28, b40 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x230>
     990:	ldrb	w0, [x28]
     994:	cbz	w0, b80 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x270>
     998:	mov	x23, x22
     99c:	add	x21, x22, #0x8
     9a0:	cbz	w27, afc <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x1ec>
     9a4:	str	x28, [x21, #32]
     9a8:	mov	x1, x24
     9ac:	mov	x0, x26
     9b0:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
     9b4:	mov	x19, x0
     9b8:	mov	x2, #0x0                   	// #0
     9bc:	mov	x1, #0x0                   	// #0
     9c0:	add	x0, x0, #0x1
     9c4:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     9c8:	mov	x27, x0
     9cc:	mov	x2, x19
     9d0:	mov	x1, x26
     9d4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     9d8:	add	x20, x26, x19
     9dc:	strb	wzr, [x27, x19]
     9e0:	ldrb	w0, [x26, x19]
     9e4:	cmp	w0, #0x0
     9e8:	cinc	x20, x20, ne  // ne = any
     9ec:	cbz	x27, b60 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x250>
     9f0:	mov	x0, x27
     9f4:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     9f8:	cbz	x0, aa4 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x194>
     9fc:	sub	x19, x0, #0x1
     a00:	mov	w28, #0x2                   	// #2
     a04:	add	x19, x27, x19
     a08:	ldrb	w0, [x19]
     a0c:	cmp	x19, x27
     a10:	b.hi	a24 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x114>  // b.pmore
     a14:	b	a34 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x124>
     a18:	ldrb	w0, [x19, #-1]!
     a1c:	cmp	x19, x27
     a20:	b.eq	a34 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x124>  // b.none
     a24:	ldrb	w0, [x19]
     a28:	sub	w1, w0, #0x30
     a2c:	cmp	w1, #0x9
     a30:	b.ls	a18 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x108>  // b.plast
     a34:	cmp	w0, #0x3a
     a38:	b.ne	a6c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x15c>  // b.any
     a3c:	ldrb	w0, [x19, #1]
     a40:	sub	w0, w0, #0x30
     a44:	cmp	w0, #0x9
     a48:	b.hi	a6c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x15c>  // b.pmore
     a4c:	ldr	w1, [x21, #56]
     a50:	add	x0, x19, #0x1
     a54:	str	w1, [x21, #60]
     a58:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     a5c:	str	w0, [x21, #56]
     a60:	strb	wzr, [x19], #-1
     a64:	cmp	w28, #0x1
     a68:	b.ne	af4 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x1e4>  // b.any
     a6c:	mov	x1, x25
     a70:	mov	x0, x27
     a74:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
     a78:	mov	x19, x0
     a7c:	mov	x2, #0x0                   	// #0
     a80:	mov	x1, #0x0                   	// #0
     a84:	add	x0, x0, #0x1
     a88:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     a8c:	str	x0, [x23, #56]
     a90:	mov	x2, x19
     a94:	mov	x1, x27
     a98:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     a9c:	ldr	x0, [x23, #56]
     aa0:	strb	wzr, [x0, x19]
     aa4:	mov	x0, x27
     aa8:	mov	x1, #0x0                   	// #0
     aac:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     ab0:	adrp	x19, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     ab4:	ldr	x0, [x21, #32]
     ab8:	add	x1, x19, #0x0
     abc:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     ac0:	cbz	w0, b2c <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x21c>
     ac4:	ldr	x0, [x21, #48]
     ac8:	add	x1, x19, #0x0
     acc:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     ad0:	cbz	w0, adc <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x1cc>
     ad4:	mov	w27, #0x0                   	// #0
     ad8:	b	948 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x38>
     adc:	ldr	x0, [x21, #48]
     ae0:	mov	x1, #0x0                   	// #0
     ae4:	mov	w27, #0x0                   	// #0
     ae8:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     aec:	str	xzr, [x21, #48]
     af0:	b	948 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x38>
     af4:	mov	w28, #0x1                   	// #1
     af8:	b	a08 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0xf8>
     afc:	ldr	x0, [x22, #8]
     b00:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
     b04:	add	x21, x0, #0x8
     b08:	ldp	x1, x2, [x22, #16]
     b0c:	mov	x23, x0
     b10:	ldr	w3, [x22, #32]
     b14:	mov	x0, x21
     b18:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
     b1c:	ldr	x0, [sp, #104]
     b20:	str	x23, [sp, #104]
     b24:	str	x23, [x0]
     b28:	b	9a4 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x94>
     b2c:	ldr	x0, [x21, #32]
     b30:	mov	x1, #0x0                   	// #0
     b34:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     b38:	str	xzr, [x21, #32]
     b3c:	b	ac4 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE+0x1b4>
     b40:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     b44:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     b48:	add	x2, x2, #0x0
     b4c:	add	x0, x0, #0x0
     b50:	mov	x4, #0x0                   	// #0
     b54:	mov	x3, #0x0                   	// #0
     b58:	mov	w1, #0x12c                 	// #300
     b5c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     b60:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     b64:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     b68:	add	x2, x2, #0x0
     b6c:	add	x0, x0, #0x0
     b70:	mov	x4, #0x0                   	// #0
     b74:	mov	x3, #0x0                   	// #0
     b78:	mov	w1, #0x10d                 	// #269
     b7c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     b80:	mov	x0, x28
     b84:	mov	x1, #0x0                   	// #0
     b88:	ldp	x21, x22, [sp, #16]
     b8c:	ldp	x23, x24, [sp, #32]
     b90:	ldp	x25, x26, [sp, #48]
     b94:	ldp	x27, x28, [sp, #64]
     b98:	ldr	x30, [sp, #80]
     b9c:	ldp	x19, x20, [sp], #112
     ba0:	b	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     ba4:	nop

0000000000000ba8 <_ZN11__sanitizer24ParseSymbolizeDataOutputEPKcPNS_8DataInfoE>:
     ba8:	stp	x19, x20, [sp, #-64]!
     bac:	stp	x21, x22, [sp, #16]
     bb0:	mov	x22, x1
     bb4:	mov	x21, x0
     bb8:	stp	x23, x24, [sp, #32]
     bbc:	adrp	x23, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     bc0:	add	x1, x23, #0x0
     bc4:	str	x30, [sp, #48]
     bc8:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
     bcc:	mov	x2, #0x0                   	// #0
     bd0:	mov	x19, x0
     bd4:	mov	x1, #0x0                   	// #0
     bd8:	add	x0, x0, #0x1
     bdc:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     be0:	str	x0, [x22, #40]
     be4:	mov	x2, x19
     be8:	mov	x1, x21
     bec:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     bf0:	add	x20, x21, x19
     bf4:	ldr	x0, [x22, #40]
     bf8:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     bfc:	add	x1, x1, #0x0
     c00:	strb	wzr, [x0, x19]
     c04:	ldrb	w0, [x21, x19]
     c08:	cmp	w0, #0x0
     c0c:	cinc	x20, x20, ne  // ne = any
     c10:	mov	x0, x20
     c14:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
     c18:	mov	x19, x0
     c1c:	mov	x2, #0x0                   	// #0
     c20:	mov	x1, #0x0                   	// #0
     c24:	add	x0, x0, #0x1
     c28:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     c2c:	mov	x21, x0
     c30:	mov	x1, x20
     c34:	mov	x2, x19
     c38:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     c3c:	add	x24, x20, x19
     c40:	strb	wzr, [x21, x19]
     c44:	ldrb	w0, [x20, x19]
     c48:	cmp	w0, #0x0
     c4c:	cinc	x24, x24, ne  // ne = any
     c50:	cbz	x21, c60 <_ZN11__sanitizer24ParseSymbolizeDataOutputEPKcPNS_8DataInfoE+0xb8>
     c54:	mov	x0, x21
     c58:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     c5c:	str	x0, [x22, #48]
     c60:	mov	x0, x21
     c64:	mov	x1, #0x0                   	// #0
     c68:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     c6c:	add	x1, x23, #0x0
     c70:	mov	x0, x24
     c74:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
     c78:	mov	x20, x0
     c7c:	mov	x2, #0x0                   	// #0
     c80:	mov	x1, #0x0                   	// #0
     c84:	add	x0, x0, #0x1
     c88:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
     c8c:	mov	x19, x0
     c90:	mov	x1, x24
     c94:	mov	x2, x20
     c98:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     c9c:	strb	wzr, [x19, x20]
     ca0:	cbz	x19, cb0 <_ZN11__sanitizer24ParseSymbolizeDataOutputEPKcPNS_8DataInfoE+0x108>
     ca4:	mov	x0, x19
     ca8:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
     cac:	str	x0, [x22, #56]
     cb0:	mov	x0, x19
     cb4:	mov	x1, #0x0                   	// #0
     cb8:	ldp	x21, x22, [sp, #16]
     cbc:	ldp	x23, x24, [sp, #32]
     cc0:	ldr	x30, [sp, #48]
     cc4:	ldp	x19, x20, [sp], #64
     cc8:	b	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
     ccc:	nop

0000000000000cd0 <_ZN11__sanitizer17SymbolizerProcessC1EPKcb>:
     cd0:	add	x4, x0, #0x4, lsl #12
     cd4:	str	x30, [sp, #-16]!
     cd8:	adrp	x3, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     cdc:	mov	x5, #0xffffffffffffffff    	// #-1
     ce0:	add	x3, x3, #0x0
     ce4:	stp	x3, x1, [x0]
     ce8:	str	x5, [x0, #16]
     cec:	str	xzr, [x0, #16408]
     cf0:	strh	wzr, [x4, #32]
     cf4:	strb	w2, [x4, #34]
     cf8:	cbz	x1, d0c <_ZN11__sanitizer17SymbolizerProcessC1EPKcb+0x3c>
     cfc:	ldrb	w0, [x1]
     d00:	cbz	w0, d2c <_ZN11__sanitizer17SymbolizerProcessC1EPKcb+0x5c>
     d04:	ldr	x30, [sp], #16
     d08:	ret
     d0c:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     d10:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     d14:	add	x2, x2, #0x0
     d18:	add	x0, x0, #0x0
     d1c:	mov	x4, #0x0                   	// #0
     d20:	mov	x3, #0x0                   	// #0
     d24:	mov	w1, #0x18f                 	// #399
     d28:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d2c:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     d30:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     d34:	add	x2, x2, #0x0
     d38:	add	x0, x0, #0x0
     d3c:	mov	x4, #0x0                   	// #0
     d40:	mov	x3, #0x0                   	// #0
     d44:	mov	w1, #0x190                 	// #400
     d48:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d4c:	nop

0000000000000d50 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>:
     d50:	stp	x19, x20, [sp, #-80]!
     d54:	mov	x19, x0
     d58:	stp	x25, x30, [sp, #48]
     d5c:	add	x25, x0, #0x4, lsl #12
     d60:	ldrb	w0, [x25, #32]
     d64:	cbnz	w0, e88 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x138>
     d68:	stp	x21, x22, [sp, #16]
     d6c:	mov	x21, x1
     d70:	ldr	x22, [x19, #8]
     d74:	bl	0 <_ZN11__sanitizer14GetProcessNameEv>
     d78:	mov	x20, x0
     d7c:	cbz	x0, dbc <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x6c>
     d80:	mov	x0, x22
     d84:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
     d88:	mov	x1, x0
     d8c:	cbz	x0, dbc <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x6c>
     d90:	mov	x0, x20
     d94:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     d98:	cbnz	w0, dbc <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x6c>
     d9c:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     da0:	add	x0, x0, #0x0
     da4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     da8:	mov	x20, #0x0                   	// #0
     dac:	mov	w0, #0x1                   	// #1
     db0:	strb	w0, [x25, #32]
     db4:	ldp	x21, x22, [sp, #16]
     db8:	b	e8c <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x13c>
     dbc:	ldr	x0, [x19, #16408]
     dc0:	cmp	x0, #0x4
     dc4:	b.hi	e7c <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x12c>  // b.pmore
     dc8:	adrp	x22, 138 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
     dcc:	add	x22, x22, #0x0
     dd0:	stp	x23, x24, [sp, #32]
     dd4:	adrp	x23, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     dd8:	add	x24, sp, #0x48
     ddc:	add	x23, x23, #0x0
     de0:	ldp	w2, w0, [x19, #16]
     de4:	cmn	w2, #0x1
     de8:	b.eq	e50 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x100>  // b.none
     dec:	cmn	w0, #0x1
     df0:	b.eq	e9c <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x14c>  // b.none
     df4:	mov	x0, x21
     df8:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     dfc:	mov	x20, x0
     e00:	cbz	x0, ea8 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x158>
     e04:	mov	x2, x0
     e08:	ldr	w0, [x19, #20]
     e0c:	mov	x3, x24
     e10:	mov	x1, x21
     e14:	mov	x4, #0x0                   	// #0
     e18:	str	xzr, [sp, #72]
     e1c:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
     e20:	tst	w0, #0xff
     e24:	b.eq	e34 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xe4>  // b.none
     e28:	ldr	x0, [sp, #72]
     e2c:	cmp	x20, x0
     e30:	b.eq	ea8 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x158>  // b.none
     e34:	ldr	w1, [x19, #20]
     e38:	mov	x0, x23
     e3c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     e40:	ldr	w2, [x19, #16]
     e44:	cmn	w2, #0x1
     e48:	b.ne	e9c <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x14c>  // b.any
     e4c:	ldr	w0, [x19, #20]
     e50:	cmn	w0, #0x1
     e54:	b.eq	e5c <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x10c>  // b.none
     e58:	bl	0 <_ZN11__sanitizer9CloseFileEi>
     e5c:	mov	x0, x19
     e60:	bl	0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv>
     e64:	ldr	x0, [x19, #16408]
     e68:	add	x0, x0, #0x1
     e6c:	str	x0, [x19, #16408]
     e70:	cmp	x0, #0x4
     e74:	b.ls	de0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x90>  // b.plast
     e78:	ldp	x23, x24, [sp, #32]
     e7c:	ldrb	w0, [x25, #32]
     e80:	cbz	w0, efc <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x1ac>
     e84:	ldp	x21, x22, [sp, #16]
     e88:	mov	x20, #0x0                   	// #0
     e8c:	mov	x0, x20
     e90:	ldp	x25, x30, [sp, #48]
     e94:	ldp	x19, x20, [sp], #80
     e98:	ret
     e9c:	mov	w0, w2
     ea0:	bl	0 <_ZN11__sanitizer9CloseFileEi>
     ea4:	b	e4c <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xfc>
     ea8:	mov	x20, x19
     eac:	mov	x2, #0x4000                	// #16384
     eb0:	ldr	x0, [x20], #24
     eb4:	mov	x1, x20
     eb8:	ldr	x3, [x0, #16]
     ebc:	mov	x0, x19
     ec0:	cmp	x3, x22
     ec4:	b.ne	eec <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x19c>  // b.any
     ec8:	bl	0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     ecc:	and	w0, w0, #0xff
     ed0:	cbz	w0, e40 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xf0>
     ed4:	mov	x0, x20
     ed8:	ldp	x21, x22, [sp, #16]
     edc:	ldp	x23, x24, [sp, #32]
     ee0:	ldp	x25, x30, [sp, #48]
     ee4:	ldp	x19, x20, [sp], #80
     ee8:	ret
     eec:	blr	x3
     ef0:	and	w0, w0, #0xff
     ef4:	cbz	w0, e40 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0xf0>
     ef8:	b	ed4 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc+0x184>
     efc:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     f00:	add	x0, x0, #0x0
     f04:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     f08:	mov	x20, #0x0                   	// #0
     f0c:	mov	w0, #0x1                   	// #1
     f10:	strb	w0, [x25, #32]
     f14:	mov	x0, x20
     f18:	ldp	x21, x22, [sp, #16]
     f1c:	ldp	x25, x30, [sp, #48]
     f20:	ldp	x19, x20, [sp], #80
     f24:	ret

0000000000000f28 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE>:
     f28:	stp	x19, x20, [sp, #-32]!
     f2c:	mov	w7, w4
     f30:	mov	x4, x2
     f34:	str	x30, [sp, #16]
     f38:	cbz	x2, 1078 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x150>
     f3c:	and	w1, w1, #0xff
     f40:	mov	x5, x3
     f44:	cmp	w1, #0x0
     f48:	adrp	x3, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     f4c:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     f50:	add	x3, x3, #0x0
     f54:	add	x1, x1, #0x0
     f58:	mov	x19, x0
     f5c:	add	x20, x0, #0x18
     f60:	csel	x3, x1, x3, ne  // ne = any
     f64:	cbz	w7, fcc <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xa4>
     f68:	cmp	w7, #0x5
     f6c:	b.eq	1094 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x16c>  // b.none
     f70:	b.hi	101c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xf4>  // b.pmore
     f74:	cmp	w7, #0x3
     f78:	b.eq	106c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x144>  // b.none
     f7c:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     f80:	cmp	w7, #0x4
     f84:	add	x1, x1, #0x0
     f88:	b.ne	1008 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xe0>  // b.any
     f8c:	nop
     f90:	mov	x6, x5
     f94:	mov	x0, x20
     f98:	mov	x5, x1
     f9c:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     fa0:	mov	x1, #0x4000                	// #16384
     fa4:	add	x2, x2, #0x0
     fa8:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     fac:	mov	w1, #0x3fff                	// #16383
     fb0:	cmp	w0, w1
     fb4:	b.gt	fec <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0xc4>
     fb8:	mov	x1, x20
     fbc:	ldr	x0, [x19, #16]
     fc0:	ldr	x30, [sp, #16]
     fc4:	ldp	x19, x20, [sp], #32
     fc8:	b	d50 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>
     fcc:	mov	x1, #0x4000                	// #16384
     fd0:	mov	x0, x20
     fd4:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     fd8:	add	x2, x2, #0x0
     fdc:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
     fe0:	mov	w1, #0x3fff                	// #16383
     fe4:	cmp	w0, w1
     fe8:	b.le	fb8 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x90>
     fec:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
     ff0:	add	x0, x0, #0x0
     ff4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     ff8:	mov	x0, #0x0                   	// #0
     ffc:	ldr	x30, [sp, #16]
    1000:	ldp	x19, x20, [sp], #32
    1004:	ret
    1008:	cmp	w7, #0x1
    100c:	b.ne	1038 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x110>  // b.any
    1010:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1014:	add	x1, x1, #0x0
    1018:	b	f90 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
    101c:	cmp	w7, #0x7
    1020:	b.eq	1060 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x138>  // b.none
    1024:	cmp	w7, #0x8
    1028:	b.ne	104c <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x124>  // b.any
    102c:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1030:	add	x1, x1, #0x0
    1034:	b	f90 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
    1038:	cmp	w7, #0x2
    103c:	b.ne	10a0 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x178>  // b.any
    1040:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1044:	add	x1, x1, #0x0
    1048:	b	f90 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
    104c:	cmp	w7, #0x6
    1050:	b.ne	10a0 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x178>  // b.any
    1054:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1058:	add	x1, x1, #0x0
    105c:	b	f90 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
    1060:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1064:	add	x1, x1, #0x0
    1068:	b	f90 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
    106c:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1070:	add	x1, x1, #0x0
    1074:	b	f90 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
    1078:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    107c:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1080:	add	x2, x2, #0x0
    1084:	add	x0, x0, #0x0
    1088:	mov	x3, #0x0                   	// #0
    108c:	mov	w1, #0x173                 	// #371
    1090:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1094:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1098:	add	x1, x1, #0x0
    109c:	b	f90 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE+0x68>
    10a0:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    10a4:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    10a8:	add	x2, x2, #0x0
    10ac:	add	x0, x0, #0x0
    10b0:	mov	x4, #0x0                   	// #0
    10b4:	mov	x3, #0x0                   	// #0
    10b8:	mov	w1, #0x2a9                 	// #681
    10bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000010c0 <_ZN11__sanitizer14LLVMSymbolizer13SymbolizeDataEmPNS_8DataInfoE>:
    10c0:	stp	x19, x20, [sp, #-64]!
    10c4:	mov	x19, x2
    10c8:	ldr	w4, [x2, #16]
    10cc:	ldr	x2, [x2]
    10d0:	stp	x21, x22, [sp, #16]
    10d4:	mov	x21, x1
    10d8:	ldr	x3, [x19, #8]
    10dc:	mov	w1, #0x1                   	// #1
    10e0:	str	x30, [sp, #56]
    10e4:	bl	f28 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE>
    10e8:	cbnz	x0, 1100 <_ZN11__sanitizer14LLVMSymbolizer13SymbolizeDataEmPNS_8DataInfoE+0x40>
    10ec:	mov	w0, #0x0                   	// #0
    10f0:	ldp	x21, x22, [sp, #16]
    10f4:	ldr	x30, [sp, #56]
    10f8:	ldp	x19, x20, [sp], #64
    10fc:	ret
    1100:	mov	x20, x0
    1104:	stp	x23, x24, [sp, #32]
    1108:	adrp	x24, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    110c:	add	x1, x24, #0x0
    1110:	str	x25, [sp, #48]
    1114:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
    1118:	mov	x22, x0
    111c:	mov	x2, #0x0                   	// #0
    1120:	mov	x1, #0x0                   	// #0
    1124:	add	x0, x0, #0x1
    1128:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
    112c:	str	x0, [x19, #40]
    1130:	mov	x2, x22
    1134:	mov	x1, x20
    1138:	add	x23, x20, x22
    113c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1140:	ldr	x0, [x19, #40]
    1144:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1148:	add	x1, x1, #0x0
    114c:	strb	wzr, [x0, x22]
    1150:	ldrb	w0, [x20, x22]
    1154:	cmp	w0, #0x0
    1158:	cinc	x23, x23, ne  // ne = any
    115c:	mov	x0, x23
    1160:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
    1164:	mov	x20, x0
    1168:	mov	x2, #0x0                   	// #0
    116c:	mov	x1, #0x0                   	// #0
    1170:	add	x0, x0, #0x1
    1174:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
    1178:	mov	x22, x0
    117c:	mov	x1, x23
    1180:	mov	x2, x20
    1184:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1188:	add	x25, x23, x20
    118c:	strb	wzr, [x22, x20]
    1190:	ldrb	w0, [x23, x20]
    1194:	cmp	w0, #0x0
    1198:	cinc	x25, x25, ne  // ne = any
    119c:	cbz	x22, 11ac <_ZN11__sanitizer14LLVMSymbolizer13SymbolizeDataEmPNS_8DataInfoE+0xec>
    11a0:	mov	x0, x22
    11a4:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
    11a8:	str	x0, [x19, #48]
    11ac:	mov	x0, x22
    11b0:	mov	x1, #0x0                   	// #0
    11b4:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
    11b8:	add	x1, x24, #0x0
    11bc:	mov	x0, x25
    11c0:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
    11c4:	mov	x22, x0
    11c8:	mov	x2, #0x0                   	// #0
    11cc:	mov	x1, #0x0                   	// #0
    11d0:	add	x0, x0, #0x1
    11d4:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
    11d8:	mov	x20, x0
    11dc:	mov	x1, x25
    11e0:	mov	x2, x22
    11e4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    11e8:	strb	wzr, [x20, x22]
    11ec:	cbz	x20, 11fc <_ZN11__sanitizer14LLVMSymbolizer13SymbolizeDataEmPNS_8DataInfoE+0x13c>
    11f0:	mov	x0, x20
    11f4:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
    11f8:	str	x0, [x19, #56]
    11fc:	mov	x0, x20
    1200:	mov	x1, #0x0                   	// #0
    1204:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
    1208:	ldr	x2, [x19, #48]
    120c:	mov	w0, #0x1                   	// #1
    1210:	ldr	x1, [x19, #8]
    1214:	add	x21, x21, x2
    1218:	ldp	x23, x24, [sp, #32]
    121c:	sub	x21, x21, x1
    1220:	ldr	x25, [sp, #48]
    1224:	str	x21, [x19, #48]
    1228:	ldp	x21, x22, [sp, #16]
    122c:	ldr	x30, [sp, #56]
    1230:	ldp	x19, x20, [sp], #64
    1234:	ret

0000000000001238 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE>:
    1238:	stp	x19, x20, [sp, #-96]!
    123c:	mov	x19, x2
    1240:	stp	x23, x24, [sp, #32]
    1244:	add	x24, x0, #0x70
    1248:	stp	x21, x22, [sp, #16]
    124c:	mov	x22, x1
    1250:	stp	x25, x26, [sp, #48]
    1254:	mov	x25, x0
    1258:	mov	x0, x24
    125c:	str	x30, [sp, #72]
    1260:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
    1264:	mov	x1, x22
    1268:	mov	x0, x25
    126c:	bl	590 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>
    1270:	cbz	x0, 1474 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x23c>
    1274:	mov	x1, x0
    1278:	mov	x0, x19
    127c:	add	x23, sp, #0x58
    1280:	ldp	x20, x21, [x1]
    1284:	ldr	w26, [x1, #24]
    1288:	bl	0 <_ZN11__sanitizer8DataInfo5ClearEv>
    128c:	mov	x0, x20
    1290:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
    1294:	ldr	x20, [x25, #208]
    1298:	sub	x21, x22, x21
    129c:	stp	x0, x21, [x19]
    12a0:	str	w26, [x19, #16]
    12a4:	adrp	x26, 10c0 <_ZN11__sanitizer14LLVMSymbolizer13SymbolizeDataEmPNS_8DataInfoE>
    12a8:	add	x26, x26, #0x0
    12ac:	cbz	x20, 146c <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x234>
    12b0:	str	x27, [sp, #64]
    12b4:	b	12c8 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x90>
    12b8:	mov	x0, x23
    12bc:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
    12c0:	ldr	x20, [x20, #8]
    12c4:	cbz	x20, 1468 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x230>
    12c8:	mov	x1, x25
    12cc:	mov	x0, x23
    12d0:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
    12d4:	ldr	x2, [x20]
    12d8:	mov	x0, x20
    12dc:	mov	w1, #0x1                   	// #1
    12e0:	ldr	x3, [x2, #8]
    12e4:	cmp	x3, x26
    12e8:	b.ne	1444 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x20c>  // b.any
    12ec:	ldp	x2, x3, [x19]
    12f0:	ldr	w4, [x19, #16]
    12f4:	bl	f28 <_ZN11__sanitizer14LLVMSymbolizer20FormatAndSendCommandEbPKcmNS_10ModuleArchE>
    12f8:	mov	x21, x0
    12fc:	cbz	x0, 12b8 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x80>
    1300:	adrp	x25, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1304:	add	x1, x25, #0x0
    1308:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
    130c:	mov	x20, x0
    1310:	mov	x2, #0x0                   	// #0
    1314:	mov	x1, #0x0                   	// #0
    1318:	add	x0, x0, #0x1
    131c:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
    1320:	str	x0, [x19, #40]
    1324:	mov	x2, x20
    1328:	mov	x1, x21
    132c:	add	x26, x21, x20
    1330:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1334:	ldr	x0, [x19, #40]
    1338:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    133c:	add	x1, x1, #0x0
    1340:	strb	wzr, [x0, x20]
    1344:	ldrb	w0, [x21, x20]
    1348:	cmp	w0, #0x0
    134c:	cinc	x26, x26, ne  // ne = any
    1350:	mov	x0, x26
    1354:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
    1358:	mov	x20, x0
    135c:	mov	x2, #0x0                   	// #0
    1360:	mov	x1, #0x0                   	// #0
    1364:	add	x0, x0, #0x1
    1368:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
    136c:	mov	x21, x0
    1370:	mov	x1, x26
    1374:	mov	x2, x20
    1378:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    137c:	add	x27, x26, x20
    1380:	strb	wzr, [x21, x20]
    1384:	ldrb	w0, [x26, x20]
    1388:	cmp	w0, #0x0
    138c:	cinc	x27, x27, ne  // ne = any
    1390:	cbz	x21, 13a0 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x168>
    1394:	mov	x0, x21
    1398:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
    139c:	str	x0, [x19, #48]
    13a0:	mov	x0, x21
    13a4:	mov	x1, #0x0                   	// #0
    13a8:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
    13ac:	add	x1, x25, #0x0
    13b0:	mov	x0, x27
    13b4:	bl	0 <_ZN11__sanitizer16internal_strcspnEPKcS1_>
    13b8:	mov	x21, x0
    13bc:	mov	x2, #0x0                   	// #0
    13c0:	mov	x1, #0x0                   	// #0
    13c4:	add	x0, x0, #0x1
    13c8:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
    13cc:	mov	x20, x0
    13d0:	mov	x1, x27
    13d4:	mov	x2, x21
    13d8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    13dc:	strb	wzr, [x20, x21]
    13e0:	cbz	x20, 13f0 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x1b8>
    13e4:	mov	x0, x20
    13e8:	bl	0 <_ZN11__sanitizer14internal_atollEPKc>
    13ec:	str	x0, [x19, #56]
    13f0:	mov	x0, x20
    13f4:	mov	x1, #0x0                   	// #0
    13f8:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
    13fc:	ldr	x1, [x19, #48]
    1400:	ldr	x0, [x19, #8]
    1404:	add	x22, x22, x1
    1408:	sub	x22, x22, x0
    140c:	str	x22, [x19, #48]
    1410:	mov	x0, x23
    1414:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
    1418:	ldr	x27, [sp, #64]
    141c:	mov	w19, #0x1                   	// #1
    1420:	mov	x0, x24
    1424:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
    1428:	mov	w0, w19
    142c:	ldp	x21, x22, [sp, #16]
    1430:	ldp	x23, x24, [sp, #32]
    1434:	ldp	x25, x26, [sp, #48]
    1438:	ldr	x30, [sp, #72]
    143c:	ldp	x19, x20, [sp], #96
    1440:	ret
    1444:	mov	x2, x19
    1448:	mov	x1, x22
    144c:	blr	x3
    1450:	tst	w0, #0xff
    1454:	b.ne	1410 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x1d8>  // b.any
    1458:	mov	x0, x23
    145c:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
    1460:	ldr	x20, [x20, #8]
    1464:	cbnz	x20, 12c8 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x90>
    1468:	ldr	x27, [sp, #64]
    146c:	mov	w19, #0x1                   	// #1
    1470:	b	1420 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x1e8>
    1474:	mov	w19, #0x0                   	// #0
    1478:	b	1420 <_ZN11__sanitizer10Symbolizer13SymbolizeDataEmPNS_8DataInfoE+0x1e8>
    147c:	nop

0000000000001480 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>:
    1480:	stp	x19, x20, [sp, #-128]!
    1484:	mov	x20, x0
    1488:	stp	x27, x28, [sp, #64]
    148c:	add	x28, x0, #0x70
    1490:	mov	x0, x28
    1494:	stp	x21, x22, [sp, #16]
    1498:	mov	x22, x1
    149c:	stp	x23, x24, [sp, #32]
    14a0:	str	x30, [sp, #80]
    14a4:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
    14a8:	mov	x0, x22
    14ac:	bl	0 <_ZN11__sanitizer15SymbolizedStack3NewEm>
    14b0:	mov	x1, x22
    14b4:	mov	x23, x0
    14b8:	mov	x0, x20
    14bc:	bl	590 <_ZN11__sanitizer10Symbolizer20FindModuleForAddressEm>
    14c0:	cbz	x0, 15f4 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x174>
    14c4:	mov	x2, x0
    14c8:	add	x21, x23, #0x8
    14cc:	mov	x0, x21
    14d0:	ldr	w3, [x2, #24]
    14d4:	ldp	x1, x2, [x2]
    14d8:	sub	x2, x22, x2
    14dc:	bl	0 <_ZN11__sanitizer11AddressInfo14FillModuleInfoEPKcmNS_10ModuleArchE>
    14e0:	ldr	x19, [x20, #208]
    14e4:	cbz	x19, 15f4 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x174>
    14e8:	adrp	x27, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    14ec:	add	x24, sp, #0x78
    14f0:	add	x0, x27, #0x0
    14f4:	stp	x25, x26, [sp, #48]
    14f8:	adrp	x25, 1708 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE>
    14fc:	adrp	x26, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1500:	add	x25, x25, #0x0
    1504:	add	x26, x26, #0x0
    1508:	str	x0, [sp, #104]
    150c:	b	1554 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0xd4>
    1510:	mov	x1, #0x4000                	// #16384
    1514:	mov	x3, x26
    1518:	mov	x0, x27
    151c:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1520:	add	x2, x2, #0x0
    1524:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
    1528:	mov	w1, #0x3fff                	// #16383
    152c:	cmp	w0, w1
    1530:	b.gt	15d0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x150>
    1534:	ldr	x0, [x19, #16]
    1538:	mov	x1, x27
    153c:	bl	d50 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>
    1540:	cbnz	x0, 1664 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x1e4>
    1544:	mov	x0, x24
    1548:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
    154c:	ldr	x19, [x19, #8]
    1550:	cbz	x19, 15f0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x170>
    1554:	mov	x0, x24
    1558:	mov	x1, x20
    155c:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeC1EPKS0_>
    1560:	ldr	x0, [x19]
    1564:	ldr	x3, [x0]
    1568:	cmp	x3, x25
    156c:	b.ne	167c <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x1fc>  // b.any
    1570:	ldp	x4, x5, [x21, #8]
    1574:	ldr	w1, [x21, #24]
    1578:	cbz	x4, 16bc <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x23c>
    157c:	add	x27, x19, #0x18
    1580:	cbz	w1, 1510 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x90>
    1584:	cmp	w1, #0x5
    1588:	b.eq	16d8 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x258>  // b.none
    158c:	b.hi	1618 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x198>  // b.pmore
    1590:	cmp	w1, #0x3
    1594:	b.eq	16b0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x230>  // b.none
    1598:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    159c:	cmp	w1, #0x4
    15a0:	add	x0, x0, #0x0
    15a4:	b.ne	1634 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x1b4>  // b.any
    15a8:	ldr	x2, [sp, #104]
    15ac:	mov	x6, x5
    15b0:	mov	x1, #0x4000                	// #16384
    15b4:	mov	x5, x0
    15b8:	mov	x3, x26
    15bc:	mov	x0, x27
    15c0:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
    15c4:	mov	w1, #0x3fff                	// #16383
    15c8:	cmp	w0, w1
    15cc:	b.le	1534 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0xb4>
    15d0:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    15d4:	add	x0, x0, #0x0
    15d8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    15dc:	mov	x0, x24
    15e0:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
    15e4:	ldr	x19, [x19, #8]
    15e8:	cbnz	x19, 1554 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0xd4>
    15ec:	nop
    15f0:	ldp	x25, x26, [sp, #48]
    15f4:	mov	x0, x28
    15f8:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
    15fc:	mov	x0, x23
    1600:	ldp	x21, x22, [sp, #16]
    1604:	ldp	x23, x24, [sp, #32]
    1608:	ldp	x27, x28, [sp, #64]
    160c:	ldr	x30, [sp, #80]
    1610:	ldp	x19, x20, [sp], #128
    1614:	ret
    1618:	cmp	w1, #0x7
    161c:	b.eq	16a4 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x224>  // b.none
    1620:	cmp	w1, #0x8
    1624:	b.ne	1650 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x1d0>  // b.any
    1628:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    162c:	add	x0, x0, #0x0
    1630:	b	15a8 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x128>
    1634:	cmp	w1, #0x1
    1638:	b.eq	1698 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x218>  // b.none
    163c:	cmp	w1, #0x2
    1640:	b.ne	16e4 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x264>  // b.any
    1644:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1648:	add	x0, x0, #0x0
    164c:	b	15a8 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x128>
    1650:	cmp	w1, #0x6
    1654:	b.ne	16e4 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x264>  // b.any
    1658:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    165c:	add	x0, x0, #0x0
    1660:	b	15a8 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x128>
    1664:	mov	x1, x23
    1668:	bl	910 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>
    166c:	mov	x0, x24
    1670:	bl	0 <_ZN11__sanitizer10Symbolizer15SymbolizerScopeD1Ev>
    1674:	ldp	x25, x26, [sp, #48]
    1678:	b	15f4 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x174>
    167c:	mov	x2, x23
    1680:	mov	x1, x22
    1684:	mov	x0, x19
    1688:	blr	x3
    168c:	tst	w0, #0xff
    1690:	b.eq	1544 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0xc4>  // b.none
    1694:	b	166c <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x1ec>
    1698:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    169c:	add	x0, x0, #0x0
    16a0:	b	15a8 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x128>
    16a4:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    16a8:	add	x0, x0, #0x0
    16ac:	b	15a8 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x128>
    16b0:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    16b4:	add	x0, x0, #0x0
    16b8:	b	15a8 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x128>
    16bc:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    16c0:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    16c4:	add	x2, x2, #0x0
    16c8:	add	x0, x0, #0x0
    16cc:	mov	x3, #0x0                   	// #0
    16d0:	mov	w1, #0x173                 	// #371
    16d4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    16d8:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    16dc:	add	x0, x0, #0x0
    16e0:	b	15a8 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm+0x128>
    16e4:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    16e8:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    16ec:	add	x2, x2, #0x0
    16f0:	add	x0, x0, #0x0
    16f4:	mov	x4, #0x0                   	// #0
    16f8:	mov	x3, #0x0                   	// #0
    16fc:	mov	w1, #0x2a9                 	// #681
    1700:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1704:	nop

0000000000001708 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE>:
    1708:	stp	x19, x20, [sp, #-32]!
    170c:	mov	x19, x2
    1710:	mov	x20, x0
    1714:	ldp	x4, x5, [x2, #16]
    1718:	stp	x21, x30, [sp, #16]
    171c:	ldr	w2, [x2, #32]
    1720:	cbz	x4, 185c <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x154>
    1724:	add	x21, x0, #0x18
    1728:	cbz	w2, 17b0 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0xa8>
    172c:	cmp	w2, #0x5
    1730:	b.eq	1878 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x170>  // b.none
    1734:	b.hi	1800 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0xf8>  // b.pmore
    1738:	cmp	w2, #0x3
    173c:	b.eq	1850 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x148>  // b.none
    1740:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1744:	cmp	w2, #0x4
    1748:	add	x1, x1, #0x0
    174c:	b.ne	17ec <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0xe4>  // b.any
    1750:	mov	x6, x5
    1754:	mov	x0, x21
    1758:	mov	x5, x1
    175c:	adrp	x3, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1760:	mov	x1, #0x4000                	// #16384
    1764:	add	x3, x3, #0x0
    1768:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    176c:	add	x2, x2, #0x0
    1770:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
    1774:	mov	w1, #0x3fff                	// #16383
    1778:	cmp	w0, w1
    177c:	b.gt	17d8 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0xd0>
    1780:	ldr	x0, [x20, #16]
    1784:	mov	x1, x21
    1788:	bl	d50 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>
    178c:	mov	w1, #0x0                   	// #0
    1790:	cbz	x0, 17a0 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x98>
    1794:	mov	x1, x19
    1798:	bl	910 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>
    179c:	mov	w1, #0x1                   	// #1
    17a0:	mov	w0, w1
    17a4:	ldp	x21, x30, [sp, #16]
    17a8:	ldp	x19, x20, [sp], #32
    17ac:	ret
    17b0:	mov	x1, #0x4000                	// #16384
    17b4:	mov	x0, x21
    17b8:	adrp	x3, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    17bc:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    17c0:	add	x3, x3, #0x0
    17c4:	add	x2, x2, #0x0
    17c8:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
    17cc:	mov	w1, #0x3fff                	// #16383
    17d0:	cmp	w0, w1
    17d4:	b.le	1780 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x78>
    17d8:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    17dc:	add	x0, x0, #0x0
    17e0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    17e4:	mov	w1, #0x0                   	// #0
    17e8:	b	17a0 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x98>
    17ec:	cmp	w2, #0x1
    17f0:	b.ne	181c <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x114>  // b.any
    17f4:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    17f8:	add	x1, x1, #0x0
    17fc:	b	1750 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x48>
    1800:	cmp	w2, #0x7
    1804:	b.eq	1844 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x13c>  // b.none
    1808:	cmp	w2, #0x8
    180c:	b.ne	1830 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x128>  // b.any
    1810:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1814:	add	x1, x1, #0x0
    1818:	b	1750 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x48>
    181c:	cmp	w2, #0x2
    1820:	b.ne	1884 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x17c>  // b.any
    1824:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1828:	add	x1, x1, #0x0
    182c:	b	1750 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x48>
    1830:	cmp	w2, #0x6
    1834:	b.ne	1884 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x17c>  // b.any
    1838:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    183c:	add	x1, x1, #0x0
    1840:	b	1750 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x48>
    1844:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1848:	add	x1, x1, #0x0
    184c:	b	1750 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x48>
    1850:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1854:	add	x1, x1, #0x0
    1858:	b	1750 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x48>
    185c:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1860:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1864:	add	x2, x2, #0x0
    1868:	add	x0, x0, #0x0
    186c:	mov	x3, #0x0                   	// #0
    1870:	mov	w1, #0x173                 	// #371
    1874:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    1878:	adrp	x1, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    187c:	add	x1, x1, #0x0
    1880:	b	1750 <_ZN11__sanitizer14LLVMSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x48>
    1884:	adrp	x2, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1888:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    188c:	add	x2, x2, #0x0
    1890:	add	x0, x0, #0x0
    1894:	mov	x4, #0x0                   	// #0
    1898:	mov	x3, #0x0                   	// #0
    189c:	mov	w1, #0x2a9                 	// #681
    18a0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    18a4:	nop

00000000000018a8 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc>:
    18a8:	stp	x19, x20, [sp, #-48]!
    18ac:	mov	x19, x0
    18b0:	ldr	w0, [x0, #16]
    18b4:	str	x30, [sp, #24]
    18b8:	cmn	w0, #0x1
    18bc:	b.eq	1984 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0xdc>  // b.none
    18c0:	ldr	w0, [x19, #20]
    18c4:	cmn	w0, #0x1
    18c8:	b.eq	1984 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0xdc>  // b.none
    18cc:	mov	x20, x1
    18d0:	mov	x0, x1
    18d4:	str	x21, [sp, #16]
    18d8:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
    18dc:	mov	x21, x0
    18e0:	cbnz	x0, 192c <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x84>
    18e4:	mov	x20, x19
    18e8:	adrp	x0, 138 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
    18ec:	add	x0, x0, #0x0
    18f0:	ldr	x1, [x20], #24
    18f4:	ldr	x3, [x1, #16]
    18f8:	cmp	x3, x0
    18fc:	b.ne	1998 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0xf0>  // b.any
    1900:	mov	x0, x19
    1904:	mov	x1, x20
    1908:	mov	x2, #0x4000                	// #16384
    190c:	bl	0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1910:	and	w0, w0, #0xff
    1914:	ldr	x21, [sp, #16]
    1918:	cbz	w0, 1984 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0xdc>
    191c:	mov	x0, x20
    1920:	ldr	x30, [sp, #24]
    1924:	ldp	x19, x20, [sp], #48
    1928:	ret
    192c:	mov	x2, x0
    1930:	ldr	w0, [x19, #20]
    1934:	mov	x1, x20
    1938:	add	x3, sp, #0x28
    193c:	mov	x4, #0x0                   	// #0
    1940:	str	xzr, [sp, #40]
    1944:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
    1948:	tst	w0, #0xff
    194c:	b.eq	195c <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0xb4>  // b.none
    1950:	ldr	x0, [sp, #40]
    1954:	cmp	x21, x0
    1958:	b.eq	18e4 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x3c>  // b.none
    195c:	ldr	w1, [x19, #20]
    1960:	mov	x20, #0x0                   	// #0
    1964:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1968:	add	x0, x0, #0x0
    196c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1970:	mov	x0, x20
    1974:	ldr	x21, [sp, #16]
    1978:	ldr	x30, [sp, #24]
    197c:	ldp	x19, x20, [sp], #48
    1980:	ret
    1984:	mov	x20, #0x0                   	// #0
    1988:	mov	x0, x20
    198c:	ldr	x30, [sp, #24]
    1990:	ldp	x19, x20, [sp], #48
    1994:	ret
    1998:	mov	x0, x19
    199c:	mov	x1, x20
    19a0:	mov	x2, #0x4000                	// #16384
    19a4:	blr	x3
    19a8:	and	w0, w0, #0xff
    19ac:	b	1914 <_ZN11__sanitizer17SymbolizerProcess15SendCommandImplEPKc+0x6c>

00000000000019b0 <_ZN11__sanitizer17SymbolizerProcess7RestartEv>:
    19b0:	stp	x19, x30, [sp, #-16]!
    19b4:	mov	x19, x0
    19b8:	ldr	w0, [x0, #16]
    19bc:	cmn	w0, #0x1
    19c0:	b.eq	19c8 <_ZN11__sanitizer17SymbolizerProcess7RestartEv+0x18>  // b.none
    19c4:	bl	0 <_ZN11__sanitizer9CloseFileEi>
    19c8:	ldr	w0, [x19, #20]
    19cc:	cmn	w0, #0x1
    19d0:	b.eq	19d8 <_ZN11__sanitizer17SymbolizerProcess7RestartEv+0x28>  // b.none
    19d4:	bl	0 <_ZN11__sanitizer9CloseFileEi>
    19d8:	mov	x0, x19
    19dc:	ldp	x19, x30, [sp], #16
    19e0:	b	0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv>
    19e4:	nop

00000000000019e8 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm>:
    19e8:	cbnz	x2, 19f4 <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm+0xc>
    19ec:	mov	w0, #0x1                   	// #1
    19f0:	ret
    19f4:	stp	x19, x20, [sp, #-48]!
    19f8:	mov	x20, x0
    19fc:	mov	x19, x2
    1a00:	ldr	w0, [x0, #20]
    1a04:	add	x3, sp, #0x28
    1a08:	mov	x4, #0x0                   	// #0
    1a0c:	str	x30, [sp, #16]
    1a10:	str	xzr, [sp, #40]
    1a14:	bl	0 <_ZN11__sanitizer11WriteToFileEiPKvmPmPi>
    1a18:	tst	w0, #0xff
    1a1c:	b.eq	1a3c <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm+0x54>  // b.none
    1a20:	ldr	x0, [sp, #40]
    1a24:	cmp	x0, x19
    1a28:	b.ne	1a3c <_ZN11__sanitizer17SymbolizerProcess17WriteToSymbolizerEPKcm+0x54>  // b.any
    1a2c:	mov	w0, #0x1                   	// #1
    1a30:	ldr	x30, [sp, #16]
    1a34:	ldp	x19, x20, [sp], #48
    1a38:	ret
    1a3c:	ldr	w1, [x20, #20]
    1a40:	adrp	x0, 0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm.part.0>
    1a44:	add	x0, x0, #0x0
    1a48:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1a4c:	mov	w0, #0x0                   	// #0
    1a50:	ldr	x30, [sp, #16]
    1a54:	ldp	x19, x20, [sp], #48
    1a58:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool5FlushEv:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool5FlushEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool8DemangleEPKc:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool8DemangleEPKc>:
   0:	mov	x0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm:

0000000000000000 <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm>:
   0:	cmp	x2, #0x1
   4:	mov	w0, #0x0                   	// #0
   8:	b.ls	1c <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm+0x1c>  // b.plast
   c:	add	x1, x1, x2
  10:	ldurb	w2, [x1, #-1]
  14:	cmp	w2, #0xa
  18:	b.eq	20 <_ZNK11__sanitizer21LLVMSymbolizerProcess18ReachedEndOfOutputEPKcm+0x20>  // b.none
  1c:	ret
  20:	ldurb	w0, [x1, #-2]
  24:	cmp	w0, #0xa
  28:	cset	w0, eq  // eq = none
  2c:	ret

Disassembly of section .text._ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_:

0000000000000000 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>:
   0:	adrp	x3, 0 <_ZN11__sanitizer21common_flags_dont_useE>
   4:	adrp	x0, 0 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>
   8:	adrp	x4, 0 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>
   c:	add	x4, x4, #0x0
  10:	ldr	x5, [x3]
  14:	add	x3, x0, #0x0
  18:	adrp	x0, 0 <_ZNK11__sanitizer21LLVMSymbolizerProcess7GetArgVEPKcRA6_S2_>
  1c:	add	x0, x0, #0x0
  20:	ldrb	w5, [x5, #180]
  24:	stp	x4, xzr, [x2, #16]
  28:	cmp	w5, #0x0
  2c:	csel	x0, x0, x3, ne  // ne = any
  30:	stp	x1, x0, [x2]
  34:	ret

Disassembly of section .text._ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm:

0000000000000000 <_ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm>:
   0:	str	x30, [sp, #-16]!
   4:	adrp	x2, 0 <_ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm>
   8:	adrp	x0, 0 <_ZNK11__sanitizer17SymbolizerProcess18ReachedEndOfOutputEPKcm>
   c:	add	x2, x2, #0x0
  10:	add	x0, x0, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x4e                  	// #78
  20:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_:

0000000000000000 <_ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_>:
   0:	str	x30, [sp, #-16]!
   4:	adrp	x2, 0 <_ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_>
   8:	adrp	x0, 0 <_ZNK11__sanitizer17SymbolizerProcess7GetArgVEPKcRA6_S2_>
   c:	add	x2, x2, #0x0
  10:	add	x0, x0, #0x0
  14:	mov	x4, #0x0                   	// #0
  18:	mov	x3, #0x0                   	// #0
  1c:	mov	w1, #0x57                  	// #87
  20:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

sanitizer_symbolizer_mac.o:     file format elf64-littleaarch64


sanitizer_symbolizer_posix_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>:
   0:	cmp	x2, #0x8
   4:	b.hi	10 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm+0x10>  // b.pmore
   8:	mov	w0, #0x0                   	// #0
   c:	ret
  10:	adrp	x3, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
  14:	str	x30, [sp, #-16]!
  18:	sub	x2, x2, #0x8
  1c:	add	x0, x1, x2
  20:	add	x1, x3, #0x0
  24:	mov	x2, #0x8                   	// #8
  28:	bl	0 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>
  2c:	cmp	w0, #0x0
  30:	cset	w0, eq  // eq = none
  34:	ldr	x30, [sp], #16
  38:	ret
  3c:	nop

0000000000000040 <_ZN11__sanitizer14DemangleCXXABIEPKc>:
  40:	adrp	x1, 0 <__cxa_demangle>
  44:	stp	x19, x30, [sp, #-16]!
  48:	mov	x19, x0
  4c:	ldr	x1, [x1]
  50:	cbz	x1, 70 <_ZN11__sanitizer14DemangleCXXABIEPKc+0x30>
  54:	mov	x3, #0x0                   	// #0
  58:	mov	x2, #0x0                   	// #0
  5c:	mov	x1, #0x0                   	// #0
  60:	bl	0 <__cxa_demangle>
  64:	cbz	x0, 70 <_ZN11__sanitizer14DemangleCXXABIEPKc+0x30>
  68:	ldp	x19, x30, [sp], #16
  6c:	ret
  70:	mov	x0, x19
  74:	ldp	x19, x30, [sp], #16
  78:	ret
  7c:	nop

0000000000000080 <_ZN11__sanitizer13DemangleSwiftEPKc>:
  80:	cbz	x0, ec <_ZN11__sanitizer13DemangleSwiftEPKc+0x6c>
  84:	stp	x19, x20, [sp, #-32]!
  88:	mov	x19, x0
  8c:	str	x30, [sp, #16]
  90:	ldrb	w1, [x0]
  94:	cmp	w1, #0x5f
  98:	b.ne	dc <_ZN11__sanitizer13DemangleSwiftEPKc+0x5c>  // b.any
  9c:	ldrb	w1, [x0, #1]
  a0:	cmp	w1, #0x54
  a4:	b.ne	dc <_ZN11__sanitizer13DemangleSwiftEPKc+0x5c>  // b.any
  a8:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
  ac:	ldr	x20, [x1]
  b0:	cbz	x20, dc <_ZN11__sanitizer13DemangleSwiftEPKc+0x5c>
  b4:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
  b8:	mov	x1, x0
  bc:	mov	x16, x20
  c0:	mov	x0, x19
  c4:	ldr	x30, [sp, #16]
  c8:	mov	w4, #0x0                   	// #0
  cc:	ldp	x19, x20, [sp], #32
  d0:	mov	x3, #0x0                   	// #0
  d4:	mov	x2, #0x0                   	// #0
  d8:	br	x16
  dc:	mov	x0, #0x0                   	// #0
  e0:	ldr	x30, [sp, #16]
  e4:	ldp	x19, x20, [sp], #32
  e8:	ret
  ec:	mov	x0, #0x0                   	// #0
  f0:	ret
  f4:	nop

00000000000000f8 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc>:
  f8:	cbz	x0, 18c <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x94>
  fc:	stp	x19, x20, [sp, #-32]!
 100:	mov	x19, x0
 104:	str	x30, [sp, #16]
 108:	ldrb	w1, [x0]
 10c:	cmp	w1, #0x5f
 110:	b.ne	158 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x60>  // b.any
 114:	ldrb	w1, [x0, #1]
 118:	cmp	w1, #0x54
 11c:	b.ne	158 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x60>  // b.any
 120:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 124:	ldr	x20, [x1]
 128:	cbz	x20, 158 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x60>
 12c:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 130:	mov	x1, x0
 134:	mov	w4, #0x0                   	// #0
 138:	mov	x0, x19
 13c:	mov	x3, #0x0                   	// #0
 140:	mov	x2, #0x0                   	// #0
 144:	blr	x20
 148:	cbz	x0, 158 <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x60>
 14c:	ldr	x30, [sp, #16]
 150:	ldp	x19, x20, [sp], #32
 154:	ret
 158:	adrp	x0, 0 <__cxa_demangle>
 15c:	ldr	x0, [x0]
 160:	cbz	x0, 17c <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x84>
 164:	mov	x0, x19
 168:	mov	x3, #0x0                   	// #0
 16c:	mov	x2, #0x0                   	// #0
 170:	mov	x1, #0x0                   	// #0
 174:	bl	0 <__cxa_demangle>
 178:	cbnz	x0, 14c <_ZN11__sanitizer19DemangleSwiftAndCXXEPKc+0x54>
 17c:	mov	x0, x19
 180:	ldr	x30, [sp, #16]
 184:	ldp	x19, x20, [sp], #32
 188:	ret
 18c:	mov	x0, #0x0                   	// #0
 190:	ret
 194:	nop

0000000000000198 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv>:
 198:	stp	x19, x20, [sp, #-128]!
 19c:	mov	x19, x0
 1a0:	ldr	x0, [x0, #8]
 1a4:	str	x30, [sp, #56]
 1a8:	bl	0 <_ZN11__sanitizer10FileExistsEPKc>
 1ac:	ands	w20, w0, #0xff
 1b0:	b.ne	1d0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x38>  // b.any
 1b4:	add	x19, x19, #0x4, lsl #12
 1b8:	ldrb	w0, [x19, #33]
 1bc:	cbz	w0, 274 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0xdc>
 1c0:	mov	w0, w20
 1c4:	ldr	x30, [sp, #56]
 1c8:	ldp	x19, x20, [sp], #128
 1cc:	ret
 1d0:	mov	x2, #0x8                   	// #8
 1d4:	mov	w1, #0x0                   	// #0
 1d8:	add	x0, sp, #0x40
 1dc:	stp	x21, x22, [sp, #16]
 1e0:	mov	x22, #0x0                   	// #0
 1e4:	stp	x23, x24, [sp, #32]
 1e8:	add	x23, sp, #0x50
 1ec:	mov	x24, x23
 1f0:	str	x25, [sp, #48]
 1f4:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 1f8:	mov	x20, x23
 1fc:	add	x0, sp, #0x48
 200:	mov	w21, #0x0                   	// #0
 204:	mov	x2, #0x8                   	// #8
 208:	mov	w1, #0x0                   	// #0
 20c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 210:	mov	x0, x20
 214:	bl	0 <pipe>
 218:	cmn	w0, #0x1
 21c:	b.eq	298 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x100>  // b.none
 220:	ldr	w0, [x20]
 224:	cmp	w0, #0x2
 228:	b.le	240 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0xa8>
 22c:	ldr	w0, [x20, #4]
 230:	cmp	w0, #0x2
 234:	b.le	240 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0xa8>
 238:	cbnz	x22, 30c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x174>
 23c:	mov	x22, x20
 240:	add	w21, w21, #0x1
 244:	add	x20, x20, #0x8
 248:	cmp	w21, #0x5
 24c:	b.ne	210 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x78>  // b.any
 250:	cbnz	x22, 2ec <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x154>
 254:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 258:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 25c:	add	x2, x2, #0x0
 260:	add	x0, x0, #0x0
 264:	mov	x4, #0x0                   	// #0
 268:	mov	x3, #0x0                   	// #0
 26c:	mov	w1, #0x87                  	// #135
 270:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 274:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 278:	add	x0, x0, #0x0
 27c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 280:	mov	w0, #0x1                   	// #1
 284:	strb	w0, [x19, #33]
 288:	mov	w0, w20
 28c:	ldr	x30, [sp, #56]
 290:	ldp	x19, x20, [sp], #128
 294:	ret
 298:	cbz	w21, 2c0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x128>
 29c:	mov	w19, #0x0                   	// #0
 2a0:	ldr	w0, [x24]
 2a4:	add	w19, w19, #0x1
 2a8:	add	x24, x24, #0x8
 2ac:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 2b0:	ldur	w0, [x24, #-4]
 2b4:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 2b8:	cmp	w19, w21
 2bc:	b.ne	2a0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x108>  // b.any
 2c0:	bl	0 <__errno_location>
 2c4:	mov	x1, x0
 2c8:	mov	w20, #0x0                   	// #0
 2cc:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 2d0:	add	x0, x0, #0x0
 2d4:	ldr	w1, [x1]
 2d8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 2dc:	ldp	x21, x22, [sp, #16]
 2e0:	ldp	x23, x24, [sp, #32]
 2e4:	ldr	x25, [sp, #48]
 2e8:	b	1c0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x28>
 2ec:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 2f0:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 2f4:	add	x2, x2, #0x0
 2f8:	add	x0, x0, #0x0
 2fc:	mov	x4, #0x0                   	// #0
 300:	mov	x3, #0x0                   	// #0
 304:	mov	w1, #0x88                  	// #136
 308:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 30c:	cbz	w21, 33c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x1a4>
 310:	mov	w25, #0x0                   	// #0
 314:	cmp	x24, x22
 318:	b.eq	32c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x194>  // b.none
 31c:	ldr	w0, [x24]
 320:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 324:	ldr	w0, [x24, #4]
 328:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 32c:	add	w25, w25, #0x1
 330:	add	x24, x24, #0x8
 334:	cmp	w25, w21
 338:	b.ne	314 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x17c>  // b.any
 33c:	add	x0, x19, #0x4, lsl #12
 340:	ldr	w2, [x20]
 344:	ldr	d0, [x20]
 348:	ldr	d1, [x22]
 34c:	ldrb	w20, [x0, #34]
 350:	ldr	w3, [x22, #4]
 354:	stp	d1, d0, [sp, #64]
 358:	cbnz	w20, 45c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x2c4>
 35c:	ldp	x4, x0, [x19]
 360:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 364:	add	x1, x1, #0x0
 368:	ldr	x4, [x4, #8]
 36c:	cmp	x4, x1
 370:	b.ne	3e4 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x24c>  // b.any
 374:	ldr	x4, [x19, #16424]
 378:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 37c:	add	x1, x1, #0x0
 380:	stp	x0, x1, [sp, #80]
 384:	stp	x4, xzr, [sp, #96]
 388:	mov	x1, x23
 38c:	mov	w4, #0xffffffff            	// #-1
 390:	bl	0 <_ZN11__sanitizer15StartSubprocessEPKcPKS1_iii>
 394:	mov	w21, w0
 398:	cmp	w0, #0x0
 39c:	b.lt	41c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x284>  // b.tstop
 3a0:	ldr	w1, [sp, #64]
 3a4:	ldr	w0, [sp, #76]
 3a8:	stp	w1, w0, [x19, #16]
 3ac:	b.eq	43c <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x2a4>  // b.none
 3b0:	mov	w0, #0xa                   	// #10
 3b4:	bl	0 <_ZN11__sanitizer14SleepForMillisEi>
 3b8:	mov	w0, w21
 3bc:	bl	0 <_ZN11__sanitizer16IsProcessRunningEi>
 3c0:	ands	w20, w0, #0xff
 3c4:	b.eq	400 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x268>  // b.none
 3c8:	mov	w0, w20
 3cc:	ldp	x21, x22, [sp, #16]
 3d0:	ldp	x23, x24, [sp, #32]
 3d4:	ldr	x25, [sp, #48]
 3d8:	ldr	x30, [sp, #56]
 3dc:	ldp	x19, x20, [sp], #128
 3e0:	ret
 3e4:	mov	x1, x0
 3e8:	mov	x2, x23
 3ec:	mov	x0, x19
 3f0:	blr	x4
 3f4:	ldp	w3, w2, [sp, #68]
 3f8:	ldr	x0, [x19, #8]
 3fc:	b	388 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x1f0>
 400:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 404:	add	x0, x0, #0x0
 408:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 40c:	ldp	x21, x22, [sp, #16]
 410:	ldp	x23, x24, [sp, #32]
 414:	ldr	x25, [sp, #48]
 418:	b	1c0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x28>
 41c:	ldr	w0, [sp, #64]
 420:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 424:	ldr	w0, [sp, #76]
 428:	bl	0 <_ZN11__sanitizer14internal_closeEi>
 42c:	ldp	x21, x22, [sp, #16]
 430:	ldp	x23, x24, [sp, #32]
 434:	ldr	x25, [sp, #48]
 438:	b	1c0 <_ZN11__sanitizer17SymbolizerProcess25StartSymbolizerSubprocessEv+0x28>
 43c:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 440:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 444:	add	x2, x2, #0x0
 448:	add	x0, x0, #0x0
 44c:	mov	x4, #0x0                   	// #0
 450:	mov	x3, #0x0                   	// #0
 454:	mov	w1, #0xef                  	// #239
 458:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 45c:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 460:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 464:	add	x2, x2, #0x0
 468:	add	x0, x0, #0x0
 46c:	mov	x4, #0x0                   	// #0
 470:	mov	x3, #0x0                   	// #0
 474:	mov	w1, #0xde                  	// #222
 478:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 47c:	nop

0000000000000480 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc>:
 480:	cbz	x1, 518 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc+0x98>
 484:	stp	x19, x20, [sp, #-32]!
 488:	mov	x19, x1
 48c:	str	x30, [sp, #16]
 490:	ldrb	w0, [x1]
 494:	cmp	w0, #0x5f
 498:	b.ne	4e4 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc+0x64>  // b.any
 49c:	ldrb	w0, [x1, #1]
 4a0:	cmp	w0, #0x54
 4a4:	b.ne	4e4 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc+0x64>  // b.any
 4a8:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 4ac:	ldr	x20, [x0]
 4b0:	cbz	x20, 4e4 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc+0x64>
 4b4:	mov	x0, x1
 4b8:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
 4bc:	mov	w4, #0x0                   	// #0
 4c0:	mov	x1, x0
 4c4:	mov	x3, #0x0                   	// #0
 4c8:	mov	x0, x19
 4cc:	mov	x2, #0x0                   	// #0
 4d0:	blr	x20
 4d4:	cbz	x0, 4e4 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc+0x64>
 4d8:	ldr	x30, [sp, #16]
 4dc:	ldp	x19, x20, [sp], #32
 4e0:	ret
 4e4:	adrp	x0, 0 <__cxa_demangle>
 4e8:	ldr	x0, [x0]
 4ec:	cbz	x0, 508 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc+0x88>
 4f0:	mov	x0, x19
 4f4:	mov	x3, #0x0                   	// #0
 4f8:	mov	x2, #0x0                   	// #0
 4fc:	mov	x1, #0x0                   	// #0
 500:	bl	0 <__cxa_demangle>
 504:	cbnz	x0, 4d8 <_ZN11__sanitizer10Symbolizer16PlatformDemangleEPKc+0x58>
 508:	mov	x0, x19
 50c:	ldr	x30, [sp, #16]
 510:	ldp	x19, x20, [sp], #32
 514:	ret
 518:	mov	x0, #0x0                   	// #0
 51c:	ret

0000000000000520 <_ZN11__sanitizer10Symbolizer12PlatformInitEv>:
 520:	stp	x19, x20, [sp, #-128]!
 524:	adrp	x20, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 528:	ldr	x0, [x20]
 52c:	stp	x21, x22, [sp, #16]
 530:	ldrb	w0, [x0]
 534:	str	x30, [sp, #56]
 538:	cbnz	w0, 5c4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xa4>
 53c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 540:	adrp	x22, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 544:	ldr	x0, [x0]
 548:	ldr	w0, [x0]
 54c:	sxtw	x0, w0
 550:	cmp	x0, #0x1
 554:	b.hi	5a8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x88>  // b.pmore
 558:	mov	x19, #0x0                   	// #0
 55c:	mov	x2, #0x0                   	// #0
 560:	dup	v0.2d, x19
 564:	mov	x1, #0xf0                  	// #240
 568:	ldr	x0, [x22]
 56c:	str	x2, [sp, #96]
 570:	stur	q0, [sp, #104]
 574:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 578:	ldp	x4, x5, [sp, #96]
 57c:	mov	x19, x0
 580:	ldr	x2, [sp, #112]
 584:	add	x1, sp, #0x40
 588:	stp	x4, x5, [sp, #64]
 58c:	str	x2, [sp, #80]
 590:	bl	0 <_ZN11__sanitizer10SymbolizerC1ENS_13IntrusiveListINS_14SymbolizerToolEEE>
 594:	mov	x0, x19
 598:	ldp	x21, x22, [sp, #16]
 59c:	ldr	x30, [sp, #56]
 5a0:	ldp	x19, x20, [sp], #128
 5a4:	ret
 5a8:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 5ac:	add	x0, x0, #0x0
 5b0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 5b4:	mov	x19, #0x0                   	// #0
 5b8:	adrp	x22, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 5bc:	mov	x2, #0x0                   	// #0
 5c0:	b	560 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x40>
 5c4:	bl	0 <_ZN11__sanitizer22IsAllocatorOutOfMemoryEv>
 5c8:	tst	w0, #0xff
 5cc:	b.eq	620 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x100>  // b.none
 5d0:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 5d4:	ldr	x0, [x0]
 5d8:	ldr	w0, [x0]
 5dc:	sxtw	x0, w0
 5e0:	cmp	x0, #0x1
 5e4:	b.hi	684 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x164>  // b.pmore
 5e8:	adrp	x22, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 5ec:	ldr	x0, [x22]
 5f0:	bl	0 <_ZN11__sanitizer22LibbacktraceSymbolizer3getEPNS_17LowLevelAllocatorE>
 5f4:	mov	x19, x0
 5f8:	cbz	x0, 6a4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x184>
 5fc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 600:	ldr	x0, [x0]
 604:	ldr	w0, [x0]
 608:	sxtw	x0, w0
 60c:	cmp	x0, #0x1
 610:	b.hi	694 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x174>  // b.pmore
 614:	mov	x2, #0x1                   	// #1
 618:	str	xzr, [x19, #8]
 61c:	b	560 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x40>
 620:	adrp	x1, 0 <__sanitizer_symbolize_data>
 624:	adrp	x0, 0 <__sanitizer_symbolize_code>
 628:	ldr	x1, [x1]
 62c:	ldr	x0, [x0]
 630:	cmp	x1, #0x0
 634:	ccmp	x0, #0x0, #0x4, ne  // ne = any
 638:	b.eq	5e8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xc8>  // b.none
 63c:	adrp	x22, 0 <_ZN11__sanitizer10Symbolizer21symbolizer_allocator_E>
 640:	mov	x1, #0x4010                	// #16400
 644:	ldr	x0, [x22]
 648:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 64c:	mov	x19, x0
 650:	adrp	x1, 0 <_ZN11__sanitizer17current_verbosityE>
 654:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 658:	add	x0, x0, #0x0
 65c:	ldr	x1, [x1]
 660:	stp	x0, xzr, [x19]
 664:	ldr	w0, [x1]
 668:	sxtw	x0, w0
 66c:	cmp	x0, #0x1
 670:	b.ls	614 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xf4>  // b.plast
 674:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 678:	add	x0, x0, #0x0
 67c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 680:	b	614 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xf4>
 684:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 688:	add	x0, x0, #0x0
 68c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 690:	b	5e8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xc8>
 694:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 698:	add	x0, x0, #0x0
 69c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 6a0:	b	614 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0xf4>
 6a4:	ldr	x0, [x20]
 6a8:	stp	x23, x24, [sp, #32]
 6ac:	ldr	x23, [x0, #8]
 6b0:	cbz	x23, 740 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x220>
 6b4:	mov	x0, x23
 6b8:	bl	0 <_ZN11__sanitizer15StripModuleNameEPKc>
 6bc:	ldrb	w1, [x23]
 6c0:	mov	x21, x0
 6c4:	cbz	w1, 8c0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x3a0>
 6c8:	adrp	x19, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 6cc:	add	x19, x19, #0x0
 6d0:	mov	x1, x19
 6d4:	mov	x0, x21
 6d8:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 6dc:	cbnz	w0, 74c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x22c>
 6e0:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 6e4:	ldr	x0, [x0]
 6e8:	ldr	w0, [x0]
 6ec:	sxtw	x0, w0
 6f0:	cmp	x0, #0x1
 6f4:	b.hi	72c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x20c>  // b.pmore
 6f8:	ldr	x20, [x22]
 6fc:	mov	x1, #0x4018                	// #16408
 700:	mov	x0, x20
 704:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 708:	mov	x2, x20
 70c:	mov	x1, x23
 710:	mov	x19, x0
 714:	bl	0 <_ZN11__sanitizer14LLVMSymbolizerC1EPKcPNS_17LowLevelAllocatorE>
 718:	cbz	x19, 8b8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x398>
 71c:	mov	x2, #0x1                   	// #1
 720:	ldp	x23, x24, [sp, #32]
 724:	str	xzr, [x19, #8]
 728:	b	560 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x40>
 72c:	mov	x1, x23
 730:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 734:	add	x0, x0, #0x0
 738:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 73c:	b	6f8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1d8>
 740:	adrp	x21, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 744:	add	x21, x21, #0x0
 748:	b	6c8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1a8>
 74c:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 750:	mov	x0, x21
 754:	add	x1, x1, #0x0
 758:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 75c:	cbz	w0, acc <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x5ac>
 760:	adrp	x24, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 764:	add	x24, x24, #0x0
 768:	mov	x0, x21
 76c:	mov	x1, x24
 770:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
 774:	cbnz	w0, 8f0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x3d0>
 778:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 77c:	ldr	x0, [x0]
 780:	ldr	w0, [x0]
 784:	str	x25, [sp, #48]
 788:	sxtw	x0, w0
 78c:	cmp	x0, #0x1
 790:	b.ls	7a4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x284>  // b.plast
 794:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 798:	mov	x1, x23
 79c:	add	x0, x0, #0x0
 7a0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 7a4:	ldr	x20, [x22]
 7a8:	adrp	x21, 0 <_ZN11__sanitizer14PageSizeCachedE>
 7ac:	mov	x1, #0x38                  	// #56
 7b0:	mov	x0, x20
 7b4:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 7b8:	ldr	x24, [x21]
 7bc:	mov	x19, x0
 7c0:	stp	xzr, xzr, [x0, #40]
 7c4:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 7c8:	add	x1, x1, #0x0
 7cc:	ldr	x0, [x24]
 7d0:	stp	x1, xzr, [x19]
 7d4:	stp	x23, x20, [x19, #16]
 7d8:	str	xzr, [x19, #32]
 7dc:	cbz	x0, a58 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x538>
 7e0:	sub	x1, x0, #0x1
 7e4:	tst	x1, x0
 7e8:	b.ne	a64 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x544>  // b.any
 7ec:	add	x23, x19, #0x20
 7f0:	add	x20, x0, #0x7
 7f4:	neg	x0, x0
 7f8:	mov	w2, #0x0                   	// #0
 7fc:	and	x20, x20, x0
 800:	adrp	x25, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 804:	mov	x0, x20
 808:	add	x1, x25, #0x0
 80c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 810:	mov	x24, x0
 814:	ldr	x2, [x23, #16]
 818:	ldr	x1, [x19, #32]
 81c:	lsl	x2, x2, #3
 820:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 824:	ldr	x1, [x23, #8]
 828:	ldr	x0, [x19, #32]
 82c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 830:	str	x24, [x19, #32]
 834:	str	x20, [x23, #8]
 838:	cmp	x20, #0x7f
 83c:	b.ls	848 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x328>  // b.plast
 840:	ldr	x25, [sp, #48]
 844:	b	71c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1fc>
 848:	ldr	x3, [x23, #16]
 84c:	cmp	x3, #0x10
 850:	b.hi	a8c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x56c>  // b.pmore
 854:	ldr	x21, [x21]
 858:	ldr	x0, [x21]
 85c:	cbz	x0, a74 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x554>
 860:	sub	x1, x0, #0x1
 864:	tst	x1, x0
 868:	b.ne	a64 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x544>  // b.any
 86c:	add	x20, x0, #0x7f
 870:	neg	x0, x0
 874:	and	x20, x20, x0
 878:	add	x1, x25, #0x0
 87c:	mov	w2, #0x0                   	// #0
 880:	mov	x0, x20
 884:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 888:	mov	x21, x0
 88c:	ldr	x2, [x23, #16]
 890:	ldr	x1, [x19, #32]
 894:	lsl	x2, x2, #3
 898:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 89c:	ldr	x1, [x23, #8]
 8a0:	ldr	x0, [x19, #32]
 8a4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 8a8:	ldr	x25, [sp, #48]
 8ac:	str	x21, [x19, #32]
 8b0:	str	x20, [x23, #8]
 8b4:	b	71c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1fc>
 8b8:	ldp	x23, x24, [sp, #32]
 8bc:	b	558 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x38>
 8c0:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 8c4:	ldr	x0, [x0]
 8c8:	ldr	w0, [x0]
 8cc:	sxtw	x0, w0
 8d0:	cmp	x0, #0x1
 8d4:	b.ls	8b8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x398>  // b.plast
 8d8:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 8dc:	add	x0, x0, #0x0
 8e0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 8e4:	mov	x2, #0x0                   	// #0
 8e8:	ldp	x23, x24, [sp, #32]
 8ec:	b	560 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x40>
 8f0:	cbnz	x23, ab4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x594>
 8f4:	mov	x0, x19
 8f8:	bl	0 <_ZN11__sanitizer16FindPathToBinaryEPKc>
 8fc:	mov	x21, x0
 900:	cbz	x0, 950 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x430>
 904:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 908:	ldr	x0, [x0]
 90c:	ldr	w0, [x0]
 910:	sxtw	x0, w0
 914:	cmp	x0, #0x1
 918:	b.ls	92c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x40c>  // b.plast
 91c:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 920:	mov	x1, x21
 924:	add	x0, x0, #0x0
 928:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 92c:	ldr	x20, [x22]
 930:	mov	x1, #0x4018                	// #16408
 934:	mov	x0, x20
 938:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 93c:	mov	x2, x20
 940:	mov	x1, x21
 944:	mov	x19, x0
 948:	bl	0 <_ZN11__sanitizer14LLVMSymbolizerC1EPKcPNS_17LowLevelAllocatorE>
 94c:	b	718 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x1f8>
 950:	ldr	x20, [x20]
 954:	ldrb	w0, [x20, #16]
 958:	cbz	w0, 8b8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x398>
 95c:	mov	x0, x24
 960:	bl	0 <_ZN11__sanitizer16FindPathToBinaryEPKc>
 964:	mov	x20, x0
 968:	cbz	x0, 8b8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x398>
 96c:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 970:	ldr	x0, [x0]
 974:	ldr	w0, [x0]
 978:	str	x25, [sp, #48]
 97c:	sxtw	x0, w0
 980:	cmp	x0, #0x1
 984:	b.ls	998 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x478>  // b.plast
 988:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 98c:	mov	x1, x20
 990:	add	x0, x0, #0x0
 994:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 998:	ldr	x23, [x22]
 99c:	adrp	x21, 0 <_ZN11__sanitizer14PageSizeCachedE>
 9a0:	mov	x1, #0x38                  	// #56
 9a4:	mov	x0, x23
 9a8:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
 9ac:	ldr	x24, [x21]
 9b0:	mov	x19, x0
 9b4:	stp	xzr, xzr, [x0, #40]
 9b8:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 9bc:	add	x1, x1, #0x0
 9c0:	ldr	x0, [x24]
 9c4:	stp	x1, xzr, [x19]
 9c8:	stp	x20, x23, [x19, #16]
 9cc:	str	xzr, [x19, #32]
 9d0:	cbz	x0, a80 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x560>
 9d4:	sub	x1, x0, #0x1
 9d8:	tst	x1, x0
 9dc:	b.ne	a64 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x544>  // b.any
 9e0:	add	x23, x19, #0x20
 9e4:	add	x20, x0, #0x7
 9e8:	neg	x0, x0
 9ec:	mov	w2, #0x0                   	// #0
 9f0:	and	x20, x20, x0
 9f4:	adrp	x25, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 9f8:	mov	x0, x20
 9fc:	add	x1, x25, #0x0
 a00:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 a04:	mov	x24, x0
 a08:	ldr	x2, [x23, #16]
 a0c:	ldr	x1, [x19, #32]
 a10:	lsl	x2, x2, #3
 a14:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 a18:	ldr	x1, [x23, #8]
 a1c:	ldr	x0, [x19, #32]
 a20:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 a24:	str	x24, [x19, #32]
 a28:	str	x20, [x23, #8]
 a2c:	cmp	x20, #0x7f
 a30:	b.hi	840 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x320>  // b.pmore
 a34:	ldr	x3, [x23, #16]
 a38:	cmp	x3, #0x10
 a3c:	b.hi	a8c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x56c>  // b.pmore
 a40:	ldr	x20, [x21]
 a44:	ldr	x0, [x20]
 a48:	cbz	x0, aa8 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x588>
 a4c:	ldr	x21, [x21]
 a50:	ldr	x0, [x21]
 a54:	b	860 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x340>
 a58:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 a5c:	str	x0, [x24]
 a60:	b	7e0 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x2c0>
 a64:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 a68:	add	x0, x0, #0x0
 a6c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 a70:	bl	0 <_ZN11__sanitizer3DieEv>
 a74:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 a78:	str	x0, [x21]
 a7c:	b	860 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x340>
 a80:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 a84:	str	x0, [x24]
 a88:	b	9d4 <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x4b4>
 a8c:	adrp	x2, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 a90:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 a94:	add	x2, x2, #0x0
 a98:	add	x0, x0, #0x0
 a9c:	mov	x4, #0x10                  	// #16
 aa0:	mov	w1, #0x1fd                 	// #509
 aa4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 aa8:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 aac:	str	x0, [x20]
 ab0:	b	a4c <_ZN11__sanitizer10Symbolizer12PlatformInitEv+0x52c>
 ab4:	mov	x1, x23
 ab8:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 abc:	add	x0, x0, #0x0
 ac0:	str	x25, [sp, #48]
 ac4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 ac8:	bl	0 <_ZN11__sanitizer3DieEv>
 acc:	adrp	x0, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 ad0:	add	x0, x0, #0x0
 ad4:	str	x25, [sp, #48]
 ad8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 adc:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000ae0 <_ZN11__sanitizer10Symbolizer14LateInitializeEv>:
 ae0:	str	x30, [sp, #-16]!
 ae4:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
 ae8:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 aec:	mov	x0, #0x0                   	// #0
 af0:	add	x1, x1, #0x0
 af4:	bl	0 <dlsym>
 af8:	ldr	x30, [sp], #16
 afc:	adrp	x1, 0 <_ZNK11__sanitizer16Addr2LineProcess18ReachedEndOfOutputEPKcm>
 b00:	str	x0, [x1]
 b04:	b	0 <dlerror>

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool5FlushEv:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool5FlushEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer14SymbolizerTool8DemangleEPKc:

0000000000000000 <_ZN11__sanitizer14SymbolizerTool8DemangleEPKc>:
   0:	mov	x0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZNK11__sanitizer16Addr2LineProcess7GetArgVEPKcRA6_S2_:

0000000000000000 <_ZNK11__sanitizer16Addr2LineProcess7GetArgVEPKcRA6_S2_>:
   0:	adrp	x3, 0 <_ZNK11__sanitizer16Addr2LineProcess7GetArgVEPKcRA6_S2_>
   4:	add	x3, x3, #0x0
   8:	stp	x1, x3, [x2]
   c:	ldr	x0, [x0, #16424]
  10:	stp	x0, xzr, [x2, #16]
  14:	ret

Disassembly of section .text._ZN11__sanitizer13Addr2LinePool13SymbolizeDataEmPNS_8DataInfoE:

0000000000000000 <_ZN11__sanitizer13Addr2LinePool13SymbolizeDataEmPNS_8DataInfoE>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer5FlushEv:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer5FlushEv>:
   0:	adrp	x0, 0 <__sanitizer_symbolize_flush>
   4:	ldr	x0, [x0]
   8:	cbz	x0, 10 <_ZN11__sanitizer18InternalSymbolizer5FlushEv+0x10>
   c:	b	0 <__sanitizer_symbolize_flush>
  10:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer13SymbolizeDataEmPNS_8DataInfoE:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer13SymbolizeDataEmPNS_8DataInfoE>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x19, x2
   8:	mov	w3, #0x4000                	// #16384
   c:	stp	x21, x22, [sp, #16]
  10:	add	x22, x0, #0x10
  14:	mov	x21, x1
  18:	ldp	x0, x1, [x19]
  1c:	mov	x2, x22
  20:	str	x30, [sp, #32]
  24:	bl	0 <__sanitizer_symbolize_data>
  28:	mov	w20, w0
  2c:	tst	w0, #0xff
  30:	b.ne	48 <_ZN11__sanitizer18InternalSymbolizer13SymbolizeDataEmPNS_8DataInfoE+0x48>  // b.any
  34:	mov	w0, w20
  38:	ldp	x21, x22, [sp, #16]
  3c:	ldr	x30, [sp, #32]
  40:	ldp	x19, x20, [sp], #48
  44:	ret
  48:	mov	x0, x22
  4c:	mov	x1, x19
  50:	bl	0 <_ZN11__sanitizer24ParseSymbolizeDataOutputEPKcPNS_8DataInfoE>
  54:	ldr	x1, [x19, #48]
  58:	ldr	x0, [x19, #8]
  5c:	add	x1, x21, x1
  60:	ldp	x21, x22, [sp, #16]
  64:	sub	x1, x1, x0
  68:	str	x1, [x19, #48]
  6c:	mov	w0, w20
  70:	ldr	x30, [sp, #32]
  74:	ldp	x19, x20, [sp], #48
  78:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x2
   8:	mov	w3, #0x4000                	// #16384
   c:	stp	x21, x30, [sp, #16]
  10:	add	x21, x0, #0x10
  14:	mov	x2, x21
  18:	ldp	x0, x1, [x19, #16]
  1c:	bl	0 <__sanitizer_symbolize_code>
  20:	mov	w20, w0
  24:	tst	w0, #0xff
  28:	b.ne	3c <_ZN11__sanitizer18InternalSymbolizer11SymbolizePCEmPNS_15SymbolizedStackE+0x3c>  // b.any
  2c:	mov	w0, w20
  30:	ldp	x21, x30, [sp, #16]
  34:	ldp	x19, x20, [sp], #32
  38:	ret
  3c:	mov	x1, x19
  40:	mov	x0, x21
  44:	bl	0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>
  48:	mov	w0, w20
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret

Disassembly of section .text._ZN11__sanitizer18InternalSymbolizer8DemangleEPKc:

0000000000000000 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc>:
   0:	adrp	x0, 0 <__sanitizer_symbolize_demangle>
   4:	stp	x19, x20, [sp, #-32]!
   8:	mov	x20, x1
   c:	ldr	x0, [x0]
  10:	str	x30, [sp, #24]
  14:	cbz	x0, 80 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc+0x80>
  18:	str	x21, [sp, #16]
  1c:	mov	x21, #0x400                 	// #1024
  20:	mov	x2, #0x0                   	// #0
  24:	mov	x1, #0x0                   	// #0
  28:	mov	x0, x21
  2c:	bl	0 <_ZN11__sanitizer13InternalAllocEmPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEEm>
  30:	mov	x19, x0
  34:	mov	w2, w21
  38:	mov	x0, x20
  3c:	mov	x1, x19
  40:	bl	0 <__sanitizer_symbolize_demangle>
  44:	cmp	x21, w0, sxtw
  48:	sxtw	x0, w0
  4c:	b.cc	64 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc+0x64>  // b.lo, b.ul, b.last
  50:	mov	x0, x19
  54:	ldr	x21, [sp, #16]
  58:	ldr	x30, [sp, #24]
  5c:	ldp	x19, x20, [sp], #32
  60:	ret
  64:	add	x21, x0, #0x1
  68:	mov	x1, #0x0                   	// #0
  6c:	mov	x0, x19
  70:	bl	0 <_ZN11__sanitizer12InternalFreeEPvPNS_28SizeClassAllocatorLocalCacheINS_20SizeClassAllocator32INS_4AP32EEEEE>
  74:	cmp	x21, #0x20, lsl #12
  78:	b.ls	20 <_ZN11__sanitizer18InternalSymbolizer8DemangleEPKc+0x20>  // b.plast
  7c:	ldr	x21, [sp, #16]
  80:	mov	x19, x20
  84:	mov	x0, x19
  88:	ldr	x30, [sp, #24]
  8c:	ldp	x19, x20, [sp], #32
  90:	ret

Disassembly of section .text._ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE:

0000000000000000 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>:
   0:	stp	x19, x20, [sp, #-144]!
   4:	mov	x19, x0
   8:	mov	x20, #0x0                   	// #0
   c:	ldr	x0, [x0, #48]
  10:	stp	x21, x22, [sp, #16]
  14:	mov	x22, x2
  18:	stp	x23, x24, [sp, #32]
  1c:	stp	x25, x30, [sp, #48]
  20:	str	xzr, [sp, #72]
  24:	ldp	x21, x23, [x2, #16]
  28:	cbnz	x0, 40 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x40>
  2c:	b	ec <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0xec>
  30:	ldr	x0, [x19, #48]
  34:	add	x20, x20, #0x1
  38:	cmp	x0, x20
  3c:	b.ls	e4 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0xe4>  // b.plast
  40:	ldr	x1, [x19, #32]
  44:	mov	x0, x21
  48:	lsl	x24, x20, #3
  4c:	ldr	x1, [x1, x20, lsl #3]
  50:	ldr	x1, [x1, #16424]
  54:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  58:	cbnz	w0, 30 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x30>
  5c:	ldr	x4, [x19, #48]
  60:	ldr	x0, [x19, #32]
  64:	cmp	x4, x20
  68:	b.ls	180 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x180>  // b.plast
  6c:	ldr	x1, [x0, x24]
  70:	str	x1, [sp, #72]
  74:	cbz	x1, ec <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0xec>
  78:	ldr	x1, [x1, #16424]
  7c:	mov	x0, x21
  80:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  84:	sxtw	x4, w0
  88:	cbnz	w0, 164 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x164>
  8c:	add	x19, sp, #0x50
  90:	mov	x3, x23
  94:	mov	x4, #0xffffffffffffffff    	// #-1
  98:	mov	x1, #0x40                  	// #64
  9c:	mov	x0, x19
  a0:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
  a4:	add	x2, x2, #0x0
  a8:	bl	0 <_ZN11__sanitizer17internal_snprintfEPcmPKcz>
  ac:	ldr	x0, [sp, #72]
  b0:	mov	x1, x19
  b4:	bl	0 <_ZN11__sanitizer17SymbolizerProcess11SendCommandEPKc>
  b8:	mov	w1, #0x0                   	// #0
  bc:	cbz	x0, cc <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0xcc>
  c0:	mov	x1, x22
  c4:	bl	0 <_ZN11__sanitizer22ParseSymbolizePCOutputEPKcPNS_15SymbolizedStackE>
  c8:	mov	w1, #0x1                   	// #1
  cc:	mov	w0, w1
  d0:	ldp	x21, x22, [sp, #16]
  d4:	ldp	x23, x24, [sp, #32]
  d8:	ldp	x25, x30, [sp, #48]
  dc:	ldp	x19, x20, [sp], #144
  e0:	ret
  e4:	ldr	x1, [sp, #72]
  e8:	cbnz	x1, 78 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x78>
  ec:	ldr	x0, [x19, #24]
  f0:	mov	x1, #0x4030                	// #16432
  f4:	add	x24, x19, #0x20
  f8:	bl	0 <_ZN11__sanitizer17LowLevelAllocator8AllocateEm>
  fc:	mov	x20, x0
 100:	ldr	x1, [x19, #16]
 104:	mov	w2, #0x0                   	// #0
 108:	bl	0 <_ZN11__sanitizer17SymbolizerProcessC2EPKcb>
 10c:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 110:	add	x0, x0, #0x0
 114:	str	x0, [x20]
 118:	mov	x0, x21
 11c:	bl	0 <_ZN11__sanitizer15internal_strdupEPKc>
 120:	str	x20, [sp, #72]
 124:	ldr	x4, [x19, #40]
 128:	ldr	x3, [x24, #16]
 12c:	str	x0, [x20, #16424]
 130:	lsr	x4, x4, #3
 134:	cmp	x3, x4
 138:	b.hi	250 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x250>  // b.pmore
 13c:	add	x20, x3, #0x1
 140:	b.eq	19c <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x19c>  // b.none
 144:	ldr	x25, [x19, #32]
 148:	str	x20, [x24, #16]
 14c:	add	x1, sp, #0x48
 150:	add	x0, x25, x3, lsl #3
 154:	mov	x2, #0x8                   	// #8
 158:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 15c:	ldr	x1, [sp, #72]
 160:	b	78 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x78>
 164:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 168:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 16c:	add	x2, x2, #0x0
 170:	add	x0, x0, #0x0
 174:	mov	x3, #0x0                   	// #0
 178:	mov	w1, #0x15c                 	// #348
 17c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 180:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 184:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 188:	mov	x3, x20
 18c:	add	x2, x2, #0x0
 190:	add	x0, x0, #0x0
 194:	mov	w1, #0x1b6                 	// #438
 198:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 19c:	tst	x3, x20
 1a0:	b.eq	1dc <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x1dc>  // b.none
 1a4:	clz	x2, x20
 1a8:	mov	w0, #0x3f                  	// #63
 1ac:	sub	w0, w0, w2
 1b0:	mov	x2, #0x1                   	// #1
 1b4:	add	w4, w0, #0x1
 1b8:	lsl	x4, x2, x4
 1bc:	cmp	x4, x20
 1c0:	b.ls	29c <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x29c>  // b.plast
 1c4:	lsl	x0, x2, x0
 1c8:	cmp	x0, x20
 1cc:	b.cs	2b8 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x2b8>  // b.hs, b.nlast
 1d0:	cmp	x3, x4
 1d4:	b.hi	274 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x274>  // b.pmore
 1d8:	mov	x20, x4
 1dc:	adrp	x25, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1e0:	lsl	x20, x20, #3
 1e4:	ldr	x25, [x25]
 1e8:	ldr	x0, [x25]
 1ec:	cbz	x0, 268 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x268>
 1f0:	sub	x1, x0, #0x1
 1f4:	tst	x0, x1
 1f8:	b.ne	28c <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x28c>  // b.any
 1fc:	add	x20, x20, x1
 200:	neg	x0, x0
 204:	and	x20, x20, x0
 208:	mov	w2, #0x0                   	// #0
 20c:	mov	x0, x20
 210:	adrp	x1, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 214:	add	x1, x1, #0x0
 218:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 21c:	ldr	x2, [x24, #16]
 220:	mov	x25, x0
 224:	ldr	x1, [x19, #32]
 228:	lsl	x2, x2, #3
 22c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 230:	ldr	x1, [x24, #8]
 234:	ldr	x0, [x19, #32]
 238:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 23c:	ldr	x3, [x24, #16]
 240:	str	x25, [x19, #32]
 244:	str	x20, [x24, #8]
 248:	add	x20, x3, #0x1
 24c:	b	148 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x148>
 250:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 254:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 258:	add	x2, x2, #0x0
 25c:	add	x0, x0, #0x0
 260:	mov	w1, #0x1be                 	// #446
 264:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 268:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 26c:	str	x0, [x25]
 270:	b	1f0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE+0x1f0>
 274:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 278:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 27c:	add	x2, x2, #0x0
 280:	add	x0, x0, #0x0
 284:	mov	w1, #0x1fd                 	// #509
 288:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 28c:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 290:	add	x0, x0, #0x0
 294:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 298:	bl	0 <_ZN11__sanitizer3DieEv>
 29c:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 2a0:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 2a4:	mov	x3, x20
 2a8:	add	x2, x2, #0x0
 2ac:	add	x0, x0, #0x0
 2b0:	mov	w1, #0x17b                 	// #379
 2b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 2b8:	mov	x4, x0
 2bc:	adrp	x2, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 2c0:	adrp	x0, 0 <_ZN11__sanitizer13Addr2LinePool11SymbolizePCEmPNS_15SymbolizedStackE>
 2c4:	mov	x3, x20
 2c8:	add	x2, x2, #0x0
 2cc:	add	x0, x0, #0x0
 2d0:	mov	w1, #0x17c                 	// #380
 2d4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm:

0000000000000000 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x1
   8:	str	x30, [sp, #16]
   c:	bl	0 <_ZN11__sanitizer17SymbolizerProcess18ReadFromSymbolizerEPcm>
  10:	mov	w19, w0
  14:	tst	w0, #0xff
  18:	b.eq	24 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm+0x24>  // b.none
  1c:	ldrb	w0, [x20]
  20:	cbnz	w0, 34 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm+0x34>
  24:	mov	w0, w19
  28:	ldr	x30, [sp, #16]
  2c:	ldp	x19, x20, [sp], #32
  30:	ret
  34:	adrp	x1, 0 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>
  38:	add	x0, x20, #0x1
  3c:	add	x1, x1, #0x0
  40:	bl	0 <_ZN11__sanitizer15internal_strstrEPKcS1_>
  44:	cbz	x0, 5c <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm+0x5c>
  48:	strb	wzr, [x0]
  4c:	mov	w0, w19
  50:	ldr	x30, [sp, #16]
  54:	ldp	x19, x20, [sp], #32
  58:	ret
  5c:	adrp	x2, 0 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>
  60:	adrp	x0, 0 <_ZN11__sanitizer16Addr2LineProcess18ReadFromSymbolizerEPcm>
  64:	add	x2, x2, #0x0
  68:	add	x0, x0, #0x0
  6c:	mov	x4, #0x0                   	// #0
  70:	mov	x3, #0x0                   	// #0
  74:	mov	w1, #0x11e                 	// #286
  78:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_symbolizer_report.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>:
       0:	stp	x19, x20, [sp, #-96]!
       4:	stp	x23, x24, [sp, #32]
       8:	adrp	x24, 0 <_ZN11__sanitizer14PageSizeCachedE>
       c:	mov	x23, x0
      10:	ldr	x19, [x24]
      14:	stp	x21, x22, [sp, #16]
      18:	mov	x22, x1
      1c:	stp	x25, x30, [sp, #48]
      20:	mov	x21, x2
      24:	ldr	x3, [x19]
      28:	str	xzr, [sp, #64]
      2c:	stp	xzr, xzr, [sp, #72]
      30:	cbz	x3, 128 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x128>
      34:	sub	x0, x3, #0x1
      38:	tst	x0, x3
      3c:	b.ne	190 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x190>  // b.any
      40:	add	x20, x3, #0x3ff
      44:	neg	x3, x3
      48:	and	x20, x20, x3
      4c:	mov	w2, #0x0                   	// #0
      50:	mov	x0, x20
      54:	adrp	x25, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
      58:	add	x1, x25, #0x0
      5c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
      60:	ldr	x1, [sp, #64]
      64:	mov	x19, x0
      68:	ldr	x2, [sp, #80]
      6c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
      70:	ldp	x0, x1, [sp, #64]
      74:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
      78:	stp	x19, x20, [sp, #64]
      7c:	ldr	x2, [sp, #80]
      80:	cmp	x2, #0x3ff
      84:	b.hi	a8 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0xa8>  // b.pmore
      88:	cmp	x20, #0x3ff
      8c:	b.ls	138 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x138>  // b.plast
      90:	mov	x3, #0x400                 	// #1024
      94:	add	x0, x19, x2
      98:	mov	w1, #0x0                   	// #0
      9c:	sub	x2, x3, x2
      a0:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
      a4:	ldr	x19, [sp, #64]
      a8:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
      ac:	add	x20, sp, #0x40
      b0:	mov	x2, x23
      b4:	ldr	q0, [x0]
      b8:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
      bc:	mov	x0, x20
      c0:	add	x1, x1, #0x0
      c4:	str	q0, [sp, #80]
      c8:	strb	wzr, [x19]
      cc:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
      d0:	adrp	x4, 0 <_ZN11__sanitizer21common_flags_dont_useE>
      d4:	mov	x3, x22
      d8:	mov	w2, #0x0                   	// #0
      dc:	mov	x0, x20
      e0:	ldr	x4, [x4]
      e4:	adrp	x6, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
      e8:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
      ec:	add	x6, x6, #0x0
      f0:	add	x1, x1, #0x0
      f4:	ldr	x5, [x4, #24]
      f8:	ldrb	w4, [x4, #181]
      fc:	bl	0 <_ZN11__sanitizer11RenderFrameEPNS_20InternalScopedStringEPKciRKNS_11AddressInfoEbS3_S3_>
     100:	ldr	x0, [sp, #64]
     104:	mov	x1, x21
     108:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
     10c:	ldp	x0, x1, [sp, #64]
     110:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     114:	ldp	x21, x22, [sp, #16]
     118:	ldp	x23, x24, [sp, #32]
     11c:	ldp	x25, x30, [sp, #48]
     120:	ldp	x19, x20, [sp], #96
     124:	ret
     128:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     12c:	mov	x3, x0
     130:	str	x0, [x19]
     134:	b	34 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x34>
     138:	ldr	x24, [x24]
     13c:	ldr	x0, [x24]
     140:	cbz	x0, 1a0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x1a0>
     144:	sub	x1, x0, #0x1
     148:	tst	x1, x0
     14c:	b.ne	190 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x190>  // b.any
     150:	add	x20, x0, #0x3ff
     154:	neg	x0, x0
     158:	and	x20, x20, x0
     15c:	add	x1, x25, #0x0
     160:	mov	w2, #0x0                   	// #0
     164:	mov	x0, x20
     168:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     16c:	mov	x19, x0
     170:	ldr	x1, [sp, #64]
     174:	ldr	x2, [sp, #80]
     178:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     17c:	ldp	x0, x1, [sp, #64]
     180:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     184:	stp	x19, x20, [sp, #64]
     188:	ldr	x2, [sp, #80]
     18c:	b	90 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x90>
     190:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     194:	add	x0, x0, #0x0
     198:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     19c:	bl	0 <_ZN11__sanitizer3DieEv>
     1a0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     1a4:	str	x0, [x24]
     1a8:	b	144 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0+0x144>
     1ac:	nop

00000000000001b0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_>:
     1b0:	adrp	x3, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     1b4:	ldr	x3, [x3]
     1b8:	ldrb	w3, [x3, #60]
     1bc:	cbnz	w3, 1c4 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_+0x14>
     1c0:	ret
     1c4:	b	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>

00000000000001c8 <_ZN11__sanitizer10ReportFile14SupportsColorsEv>:
     1c8:	stp	x19, x20, [sp, #-32]!
     1cc:	mov	x19, x0
     1d0:	mov	w1, #0x1                   	// #1
     1d4:	ldr	x20, [x0]
     1d8:	str	x30, [sp, #16]
     1dc:	ldxrb	w0, [x20]
     1e0:	stxrb	w2, w1, [x20]
     1e4:	cbnz	w2, 1dc <_ZN11__sanitizer10ReportFile14SupportsColorsEv+0x14>
     1e8:	dmb	ish
     1ec:	tst	w0, #0xff
     1f0:	b.eq	1fc <_ZN11__sanitizer10ReportFile14SupportsColorsEv+0x34>  // b.none
     1f4:	mov	x0, x20
     1f8:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     1fc:	mov	x0, x19
     200:	bl	0 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>
     204:	ldr	w0, [x19, #8]
     208:	bl	0 <_ZN11__sanitizer21SupportsColoredOutputEi>
     20c:	dmb	ish
     210:	strb	wzr, [x20]
     214:	ldr	x30, [sp, #16]
     218:	ldp	x19, x20, [sp], #32
     21c:	ret

0000000000000220 <_ZN11__sanitizer15ColorizeReportsEv>:
     220:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     224:	stp	x19, x20, [sp, #-32]!
     228:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     22c:	ldr	x0, [x0]
     230:	add	x1, x1, #0x0
     234:	ldr	x19, [x0, #112]
     238:	str	x30, [sp, #16]
     23c:	mov	x0, x19
     240:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     244:	mov	w1, #0x1                   	// #1
     248:	cbnz	w0, 25c <_ZN11__sanitizer15ColorizeReportsEv+0x3c>
     24c:	mov	w0, w1
     250:	ldr	x30, [sp, #16]
     254:	ldp	x19, x20, [sp], #32
     258:	ret
     25c:	mov	x0, x19
     260:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     264:	add	x1, x1, #0x0
     268:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     26c:	mov	w1, #0x0                   	// #0
     270:	cbnz	w0, 24c <_ZN11__sanitizer15ColorizeReportsEv+0x2c>
     274:	adrp	x19, 0 <_ZN11__sanitizer11report_fileE>
     278:	mov	w1, #0x1                   	// #1
     27c:	ldr	x0, [x19]
     280:	ldr	x20, [x0]
     284:	ldxrb	w0, [x20]
     288:	stxrb	w2, w1, [x20]
     28c:	cbnz	w2, 284 <_ZN11__sanitizer15ColorizeReportsEv+0x64>
     290:	dmb	ish
     294:	tst	w0, #0xff
     298:	b.eq	2a4 <_ZN11__sanitizer15ColorizeReportsEv+0x84>  // b.none
     29c:	mov	x0, x20
     2a0:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     2a4:	ldr	x19, [x19]
     2a8:	mov	x0, x19
     2ac:	bl	0 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>
     2b0:	ldr	w0, [x19, #8]
     2b4:	bl	0 <_ZN11__sanitizer21SupportsColoredOutputEi>
     2b8:	dmb	ish
     2bc:	and	w1, w0, #0xff
     2c0:	strb	wzr, [x20]
     2c4:	mov	w0, w1
     2c8:	ldr	x30, [sp, #16]
     2cc:	ldp	x19, x20, [sp], #32
     2d0:	ret
     2d4:	nop

00000000000002d8 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_>:
     2d8:	stp	x19, x20, [sp, #-48]!
     2dc:	adrp	x19, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     2e0:	ldr	x19, [x19]
     2e4:	stp	x21, x22, [sp, #16]
     2e8:	mov	x21, x2
     2ec:	ldrb	w2, [x19, #60]
     2f0:	str	x30, [sp, #32]
     2f4:	cbz	w2, 360 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_+0x88>
     2f8:	ldr	w2, [x1, #8]
     2fc:	cbz	w2, 34c <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_+0x74>
     300:	mov	x20, x0
     304:	ldr	x0, [x1]
     308:	ldr	x22, [x0]
     30c:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
     310:	sub	x22, x22, #0x4
     314:	mov	x1, x22
     318:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
     31c:	ldrb	w1, [x19, #60]
     320:	mov	x19, x0
     324:	cbz	w1, 338 <_ZN11__sanitizer18ReportErrorSummaryEPKcPKNS_10StackTraceES1_+0x60>
     328:	mov	x2, x21
     32c:	mov	x0, x20
     330:	add	x1, x19, #0x8
     334:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     338:	mov	x0, x19
     33c:	ldp	x21, x22, [sp, #16]
     340:	ldr	x30, [sp, #32]
     344:	ldp	x19, x20, [sp], #48
     348:	b	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
     34c:	ldp	x21, x22, [sp, #16]
     350:	mov	x1, #0x0                   	// #0
     354:	ldr	x30, [sp, #32]
     358:	ldp	x19, x20, [sp], #48
     35c:	b	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
     360:	ldp	x21, x22, [sp, #16]
     364:	ldr	x30, [sp, #32]
     368:	ldp	x19, x20, [sp], #48
     36c:	ret

0000000000000370 <_ZN11__sanitizer19ReportMmapWriteExecEi>:
     370:	and	w0, w0, #0x6
     374:	cmp	w0, #0x6
     378:	b.eq	380 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x10>  // b.none
     37c:	ret
     380:	stp	x29, x30, [sp, #-96]!
     384:	mov	x29, sp
     388:	stp	x19, x20, [sp, #16]
     38c:	mov	x20, x30
     390:	stp	x21, x22, [sp, #32]
     394:	adrp	x22, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     398:	add	x19, x22, #0x0
     39c:	stp	x23, x24, [sp, #48]
     3a0:	stp	x25, x26, [sp, #64]
     3a4:	bl	0 <_ZN11__sanitizer13GetThreadSelfEv>
     3a8:	mov	x21, x0
     3ac:	ldxr	x1, [x19]
     3b0:	cbnz	x1, 3bc <_ZN11__sanitizer19ReportMmapWriteExecEi+0x4c>
     3b4:	stlxr	w0, x21, [x19]
     3b8:	cbnz	w0, 3ac <_ZN11__sanitizer19ReportMmapWriteExecEi+0x3c>
     3bc:	dmb	ish
     3c0:	cbz	x1, 3dc <_ZN11__sanitizer19ReportMmapWriteExecEi+0x6c>
     3c4:	cmp	x21, x1
     3c8:	b.eq	674 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x304>  // b.none
     3cc:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
     3d0:	ldxr	x1, [x19]
     3d4:	cbz	x1, 3b4 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x44>
     3d8:	b	3bc <_ZN11__sanitizer19ReportMmapWriteExecEi+0x4c>
     3dc:	add	x0, x19, #0x8
     3e0:	mov	w2, #0x1                   	// #1
     3e4:	ldxrb	w1, [x0]
     3e8:	stxrb	w3, w2, [x0]
     3ec:	cbnz	w3, 3e4 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x74>
     3f0:	dmb	ish
     3f4:	tst	w1, #0xff
     3f8:	b.eq	400 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x90>  // b.none
     3fc:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     400:	adrp	x23, 0 <_ZN11__sanitizer14PageSizeCachedE>
     404:	bl	220 <_ZN11__sanitizer15ColorizeReportsEv>
     408:	and	w24, w0, #0xff
     40c:	ldr	x19, [x23]
     410:	ldr	x0, [x19]
     414:	cbz	x0, 5dc <_ZN11__sanitizer19ReportMmapWriteExecEi+0x26c>
     418:	sub	x1, x0, #0x1
     41c:	tst	x1, x0
     420:	b.ne	658 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x2e8>  // b.any
     424:	add	x21, x0, #0x817
     428:	neg	x0, x0
     42c:	and	x21, x21, x0
     430:	mov	w2, #0x0                   	// #0
     434:	mov	x0, x21
     438:	adrp	x25, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     43c:	add	x1, x25, #0x0
     440:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     444:	mov	x2, #0x0                   	// #0
     448:	mov	x1, #0x0                   	// #0
     44c:	mov	x19, x0
     450:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     454:	mov	x1, #0x0                   	// #0
     458:	mov	x0, #0x0                   	// #0
     45c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     460:	cmp	x21, #0x817
     464:	b.ls	5fc <_ZN11__sanitizer19ReportMmapWriteExecEi+0x28c>  // b.plast
     468:	adrp	x23, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     46c:	mov	w1, #0x0                   	// #0
     470:	mov	x0, x19
     474:	mov	x2, #0x818                 	// #2072
     478:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     47c:	str	xzr, [x19, #2064]
     480:	ldr	x1, [x23]
     484:	add	x0, x19, #0x10
     488:	mov	x26, x29
     48c:	ldrb	w25, [x1, #33]
     490:	str	x0, [x19]
     494:	str	xzr, [x19, #8]
     498:	stp	xzr, xzr, [x29, #80]
     49c:	cbnz	w25, 5c8 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x258>
     4a0:	ldp	x5, x6, [x29, #80]
     4a4:	mov	w7, w25
     4a8:	mov	x3, x26
     4ac:	mov	x2, x20
     4b0:	mov	x0, x19
     4b4:	mov	x4, #0x0                   	// #0
     4b8:	mov	w1, #0x100                 	// #256
     4bc:	bl	0 <_ZN11__sanitizer18BufferedStackTrace6UnwindEjmmPvmmb>
     4c0:	cbnz	w24, 590 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x220>
     4c4:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     4c8:	add	x20, x1, #0x0
     4cc:	mov	x1, x20
     4d0:	adrp	x24, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     4d4:	add	x0, x24, #0x0
     4d8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     4dc:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     4e0:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     4e4:	add	x0, x0, #0x0
     4e8:	ldr	x1, [x1]
     4ec:	ldr	x1, [x1]
     4f0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     4f4:	mov	x1, x20
     4f8:	add	x0, x24, #0x0
     4fc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     500:	mov	x0, x19
     504:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
     508:	ldr	x23, [x23]
     50c:	ldrb	w0, [x23, #60]
     510:	cbz	w0, 55c <_ZN11__sanitizer19ReportMmapWriteExecEi+0x1ec>
     514:	ldr	w0, [x19, #8]
     518:	cbz	w0, 5e8 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x278>
     51c:	ldr	x0, [x19]
     520:	ldr	x20, [x0]
     524:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
     528:	sub	x20, x20, #0x4
     52c:	mov	x1, x20
     530:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
     534:	ldrb	w1, [x23, #60]
     538:	mov	x20, x0
     53c:	cbz	w1, 554 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x1e4>
     540:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     544:	add	x1, x20, #0x8
     548:	add	x0, x0, #0x0
     54c:	mov	x2, #0x0                   	// #0
     550:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     554:	mov	x0, x20
     558:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
     55c:	mov	x1, x21
     560:	mov	x0, x19
     564:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     568:	dmb	ish
     56c:	add	x0, x22, #0x0
     570:	strb	wzr, [x0, #8]
     574:	str	xzr, [x22]
     578:	ldp	x19, x20, [sp, #16]
     57c:	ldp	x21, x22, [sp, #32]
     580:	ldp	x23, x24, [sp, #48]
     584:	ldp	x25, x26, [sp, #64]
     588:	ldp	x29, x30, [sp], #96
     58c:	ret
     590:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     594:	adrp	x24, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     598:	add	x1, x1, #0x0
     59c:	add	x0, x24, #0x0
     5a0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     5a4:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     5a8:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     5ac:	add	x0, x0, #0x0
     5b0:	ldr	x1, [x1]
     5b4:	ldr	x1, [x1]
     5b8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     5bc:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     5c0:	add	x1, x1, #0x0
     5c4:	b	4f8 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x188>
     5c8:	add	x2, x29, #0x58
     5cc:	add	x1, x29, #0x50
     5d0:	mov	w0, #0x0                   	// #0
     5d4:	bl	0 <_ZN11__sanitizer26GetThreadStackTopAndBottomEbPmS0_>
     5d8:	b	4a0 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x130>
     5dc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     5e0:	str	x0, [x19]
     5e4:	b	418 <_ZN11__sanitizer19ReportMmapWriteExecEi+0xa8>
     5e8:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     5ec:	mov	x1, #0x0                   	// #0
     5f0:	add	x0, x0, #0x0
     5f4:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
     5f8:	b	55c <_ZN11__sanitizer19ReportMmapWriteExecEi+0x1ec>
     5fc:	ldr	x23, [x23]
     600:	ldr	x0, [x23]
     604:	cbz	x0, 668 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x2f8>
     608:	sub	x1, x0, #0x1
     60c:	tst	x1, x0
     610:	b.ne	658 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x2e8>  // b.any
     614:	add	x23, x0, #0x817
     618:	neg	x0, x0
     61c:	and	x23, x23, x0
     620:	add	x1, x25, #0x0
     624:	mov	x0, x23
     628:	mov	w2, #0x0                   	// #0
     62c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     630:	mov	x25, x0
     634:	mov	x2, #0x0                   	// #0
     638:	mov	x1, x19
     63c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     640:	mov	x1, x21
     644:	mov	x0, x19
     648:	mov	x21, x23
     64c:	mov	x19, x25
     650:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     654:	b	468 <_ZN11__sanitizer19ReportMmapWriteExecEi+0xf8>
     658:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     65c:	add	x0, x0, #0x0
     660:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     664:	bl	0 <_ZN11__sanitizer3DieEv>
     668:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     66c:	str	x0, [x23]
     670:	b	608 <_ZN11__sanitizer19ReportMmapWriteExecEi+0x298>
     674:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     678:	ldr	x0, [x0]
     67c:	ldr	x19, [x0]
     680:	mov	x0, x19
     684:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     688:	mov	x1, x0
     68c:	mov	x0, x19
     690:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
     694:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     698:	mov	x1, #0x2b                  	// #43
     69c:	add	x0, x0, #0x0
     6a0:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
     6a4:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     6a8:	ldr	x0, [x0]
     6ac:	ldr	w0, [x0, #216]
     6b0:	bl	0 <_ZN11__sanitizer14internal__exitEi>
     6b4:	nop

00000000000006b8 <_ZN11__sanitizer23StartReportDeadlySignalEv>:
     6b8:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     6bc:	stp	x19, x30, [sp, #-16]!
     6c0:	ldr	x0, [x0]
     6c4:	ldr	x19, [x0]
     6c8:	mov	x0, x19
     6cc:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
     6d0:	mov	x1, x0
     6d4:	mov	x0, x19
     6d8:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
     6dc:	ldp	x19, x30, [sp], #16
     6e0:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     6e4:	add	x0, x0, #0x0
     6e8:	mov	x1, #0xe                   	// #14
     6ec:	add	x0, x0, #0x30
     6f0:	b	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
     6f4:	nop

00000000000006f8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_>:
     6f8:	stp	x19, x20, [sp, #-272]!
     6fc:	mov	x19, x0
     700:	stp	x21, x22, [sp, #16]
     704:	mov	w21, w1
     708:	mov	x22, x2
     70c:	stp	x23, x24, [sp, #32]
     710:	mov	x23, x3
     714:	stp	x25, x26, [sp, #48]
     718:	stp	x27, x28, [sp, #64]
     71c:	str	x30, [sp, #80]
     720:	bl	0 <_ZNK11__sanitizer13SignalContext15IsStackOverflowEv>
     724:	tst	w0, #0xff
     728:	b.eq	8b4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x1bc>  // b.none
     72c:	adrp	x20, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     730:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     734:	add	x1, x1, #0x0
     738:	ldr	x0, [x20]
     73c:	ldr	x24, [x0, #112]
     740:	mov	x0, x24
     744:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     748:	cbnz	w0, d64 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x66c>
     74c:	adrp	x24, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     750:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     754:	add	x0, x24, #0x0
     758:	add	x1, x1, #0x0
     75c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     760:	adrp	x26, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     764:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     768:	add	x2, x26, #0x0
     76c:	ldp	x3, x4, [x19, #16]
     770:	mov	w7, w21
     774:	ldr	x0, [x0]
     778:	add	x2, x2, #0x40
     77c:	ldp	x6, x5, [x19, #32]
     780:	adrp	x25, 0 <_ZN11__sanitizer14PageSizeCachedE>
     784:	ldr	x1, [x0]
     788:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     78c:	add	x0, x0, #0x0
     790:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     794:	add	x0, x24, #0x0
     798:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     79c:	add	x1, x1, #0x0
     7a0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     7a4:	ldr	x21, [x25]
     7a8:	ldr	x0, [x21]
     7ac:	cbz	x0, ddc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x6e4>
     7b0:	sub	x1, x0, #0x1
     7b4:	tst	x1, x0
     7b8:	b.ne	e58 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x760>  // b.any
     7bc:	add	x24, x0, #0x817
     7c0:	neg	x0, x0
     7c4:	and	x24, x24, x0
     7c8:	mov	w2, #0x0                   	// #0
     7cc:	mov	x0, x24
     7d0:	adrp	x28, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     7d4:	add	x1, x28, #0x0
     7d8:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     7dc:	mov	x2, #0x0                   	// #0
     7e0:	mov	x1, #0x0                   	// #0
     7e4:	mov	x21, x0
     7e8:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     7ec:	mov	x1, #0x0                   	// #0
     7f0:	mov	x0, #0x0                   	// #0
     7f4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     7f8:	cmp	x24, #0x817
     7fc:	b.ls	fc0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x8c8>  // b.plast
     800:	mov	x2, #0x818                 	// #2072
     804:	mov	w1, #0x0                   	// #0
     808:	mov	x0, x21
     80c:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     810:	mov	x1, x23
     814:	mov	x2, x21
     818:	add	x0, x21, #0x10
     81c:	str	x0, [x21]
     820:	str	xzr, [x21, #8]
     824:	mov	x0, x19
     828:	str	xzr, [x21, #2064]
     82c:	blr	x22
     830:	mov	x0, x21
     834:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
     838:	ldr	x20, [x20]
     83c:	ldrb	w0, [x20, #60]
     840:	cbz	w0, 88c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x194>
     844:	ldr	w0, [x21, #8]
     848:	cbz	w0, e00 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x708>
     84c:	ldr	x0, [x21]
     850:	ldr	x19, [x0]
     854:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
     858:	sub	x19, x19, #0x4
     85c:	mov	x1, x19
     860:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
     864:	ldrb	w1, [x20, #60]
     868:	mov	x19, x0
     86c:	cbz	w1, 884 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x18c>
     870:	add	x0, x26, #0x0
     874:	add	x1, x19, #0x8
     878:	add	x0, x0, #0x40
     87c:	mov	x2, #0x0                   	// #0
     880:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     884:	mov	x0, x19
     888:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
     88c:	mov	x1, x24
     890:	mov	x0, x21
     894:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     898:	ldp	x21, x22, [sp, #16]
     89c:	ldp	x23, x24, [sp, #32]
     8a0:	ldp	x25, x26, [sp, #48]
     8a4:	ldp	x27, x28, [sp, #64]
     8a8:	ldr	x30, [sp, #80]
     8ac:	ldp	x19, x20, [sp], #272
     8b0:	ret
     8b4:	bl	220 <_ZN11__sanitizer15ColorizeReportsEv>
     8b8:	tst	w0, #0xff
     8bc:	b.ne	c10 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x518>  // b.any
     8c0:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     8c4:	add	x20, x0, #0x0
     8c8:	mov	x1, x20
     8cc:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     8d0:	mov	x25, x0
     8d4:	adrp	x24, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     8d8:	add	x0, x24, #0x0
     8dc:	str	x25, [sp, #120]
     8e0:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     8e4:	mov	x0, x19
     8e8:	bl	0 <_ZNK11__sanitizer13SignalContext8DescribeEv>
     8ec:	ldr	x1, [x25]
     8f0:	mov	w7, w21
     8f4:	ldp	x3, x4, [x19, #16]
     8f8:	mov	x2, x0
     8fc:	ldp	x6, x5, [x19, #32]
     900:	adrp	x25, 0 <_ZN11__sanitizer14PageSizeCachedE>
     904:	ldr	x1, [x1]
     908:	str	x0, [sp, #128]
     90c:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     910:	add	x0, x0, #0x0
     914:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     918:	mov	x1, x20
     91c:	add	x0, x24, #0x0
     920:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     924:	ldr	x20, [x25]
     928:	ldr	x21, [x19, #24]
     92c:	ldr	x0, [x20]
     930:	cbz	x0, c84 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x58c>
     934:	cmp	x0, x21
     938:	b.hi	c94 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x59c>  // b.pmore
     93c:	ldrb	w0, [x19, #48]
     940:	cbz	w0, 998 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x2a0>
     944:	ldr	w0, [x19, #52]
     948:	cmp	w0, #0x2
     94c:	b.eq	df4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x6fc>  // b.none
     950:	cmp	w0, #0x1
     954:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     958:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     95c:	add	x1, x1, #0x0
     960:	add	x0, x0, #0x0
     964:	csel	x1, x1, x0, eq  // eq = none
     968:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     96c:	add	x0, x0, #0x0
     970:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     974:	ldr	x20, [x25]
     978:	ldr	x21, [x19, #16]
     97c:	ldr	x0, [x20]
     980:	cbz	x0, e68 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x770>
     984:	cmp	x21, x0
     988:	b.cs	998 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x2a0>  // b.hs, b.nlast
     98c:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     990:	add	x0, x0, #0x0
     994:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     998:	add	x27, sp, #0xa0
     99c:	adrp	x21, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     9a0:	add	x26, sp, #0xc0
     9a4:	add	x21, x21, #0x0
     9a8:	mov	x0, x27
     9ac:	mov	w1, #0x1                   	// #1
     9b0:	ldr	x20, [x19, #24]
     9b4:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutC1Eb>
     9b8:	stp	xzr, xzr, [sp, #216]
     9bc:	str	xzr, [sp, #264]
     9c0:	mov	x1, x26
     9c4:	mov	x0, x27
     9c8:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
     9cc:	tst	w0, #0xff
     9d0:	b.eq	a10 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x318>  // b.none
     9d4:	ldr	x0, [sp, #192]
     9d8:	cmp	x20, x0
     9dc:	b.cc	9c0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x2c8>  // b.lo, b.ul, b.last
     9e0:	ldr	x0, [sp, #200]
     9e4:	cmp	x20, x0
     9e8:	b.cs	9c0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x2c8>  // b.hs, b.nlast
     9ec:	ldr	x0, [sp, #232]
     9f0:	tbnz	w0, #2, 9c0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x2c8>
     9f4:	mov	x0, x21
     9f8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     9fc:	mov	x1, x26
     a00:	mov	x0, x27
     a04:	bl	0 <_ZN11__sanitizer19MemoryMappingLayout4NextEPNS_19MemoryMappedSegmentE>
     a08:	tst	w0, #0xff
     a0c:	b.ne	9d4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x2dc>  // b.any
     a10:	mov	x0, x27
     a14:	bl	0 <_ZN11__sanitizer19MemoryMappingLayoutD1Ev>
     a18:	ldr	x20, [x25]
     a1c:	ldr	x0, [x20]
     a20:	cbz	x0, e4c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x754>
     a24:	sub	x1, x0, #0x1
     a28:	tst	x1, x0
     a2c:	b.ne	e58 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x760>  // b.any
     a30:	add	x27, x0, #0x817
     a34:	neg	x0, x0
     a38:	and	x27, x27, x0
     a3c:	mov	w2, #0x0                   	// #0
     a40:	mov	x0, x27
     a44:	adrp	x28, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     a48:	add	x1, x28, #0x0
     a4c:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     a50:	mov	x2, #0x0                   	// #0
     a54:	mov	x1, #0x0                   	// #0
     a58:	mov	x21, x0
     a5c:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     a60:	mov	x1, #0x0                   	// #0
     a64:	mov	x0, #0x0                   	// #0
     a68:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     a6c:	cmp	x27, #0x817
     a70:	b.ls	f60 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x868>  // b.plast
     a74:	mov	x2, #0x818                 	// #2072
     a78:	mov	w1, #0x0                   	// #0
     a7c:	mov	x0, x21
     a80:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     a84:	mov	x1, x23
     a88:	mov	x2, x21
     a8c:	add	x0, x21, #0x10
     a90:	str	x0, [x21]
     a94:	str	xzr, [x21, #8]
     a98:	mov	x0, x19
     a9c:	str	xzr, [x21, #2064]
     aa0:	adrp	x20, 0 <_ZN11__sanitizer21common_flags_dont_useE>
     aa4:	blr	x22
     aa8:	mov	x0, x21
     aac:	bl	0 <_ZNK11__sanitizer10StackTrace5PrintEv>
     ab0:	ldr	x0, [x20]
     ab4:	ldrb	w0, [x0, #232]
     ab8:	cbz	w0, cc8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x5d0>
     abc:	ldr	x23, [x25]
     ac0:	ldr	x22, [x19, #24]
     ac4:	ldr	x0, [x23]
     ac8:	cbz	x0, e14 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x71c>
     acc:	cmp	x22, x0
     ad0:	b.cc	cc8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x5d0>  // b.lo, b.ul, b.last
     ad4:	str	xzr, [sp, #192]
     ad8:	stp	xzr, xzr, [sp, #200]
     adc:	sub	x1, x0, #0x1
     ae0:	tst	x1, x0
     ae4:	b.ne	e58 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x760>  // b.any
     ae8:	add	x3, x0, #0x3ff
     aec:	neg	x0, x0
     af0:	and	x3, x3, x0
     af4:	add	x1, x28, #0x0
     af8:	mov	x0, x3
     afc:	mov	w2, #0x0                   	// #0
     b00:	str	x3, [sp, #104]
     b04:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     b08:	mov	x23, x0
     b0c:	ldr	x1, [sp, #192]
     b10:	ldr	x2, [sp, #208]
     b14:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     b18:	ldp	x0, x1, [sp, #192]
     b1c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     b20:	ldr	x3, [sp, #104]
     b24:	stp	x23, x3, [sp, #192]
     b28:	ldr	x2, [sp, #208]
     b2c:	cmp	x2, #0x3ff
     b30:	b.ls	f3c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x844>  // b.plast
     b34:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     b38:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     b3c:	add	x1, x1, #0x0
     b40:	ldr	q0, [x0]
     b44:	mov	x0, x26
     b48:	str	q0, [sp, #208]
     b4c:	strb	wzr, [x23]
     b50:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     b54:	mov	x0, x22
     b58:	mov	x1, #0x10                  	// #16
     b5c:	bl	0 <_ZN11__sanitizer23IsAccessibleMemoryRangeEmm>
     b60:	tst	w0, #0xff
     b64:	b.eq	101c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x924>  // b.none
     b68:	ldr	x0, [x20]
     b6c:	str	x0, [sp, #112]
     b70:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     b74:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     b78:	add	x23, x0, #0x0
     b7c:	add	x0, x1, #0x0
     b80:	str	x0, [sp, #136]
     b84:	add	x0, x22, #0x10
     b88:	str	x0, [sp, #104]
     b8c:	b	bc8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x4d0>
     b90:	ldr	x3, [sp, #136]
     b94:	adrp	x6, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     b98:	asr	w4, w25, #4
     b9c:	add	x6, x6, #0x0
     ba0:	and	w5, w25, #0xf
     ba4:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     ba8:	mov	x2, x23
     bac:	add	x1, x0, #0x0
     bb0:	mov	x0, x26
     bb4:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     bb8:	add	x22, x22, #0x1
     bbc:	ldr	x0, [sp, #104]
     bc0:	cmp	x22, x0
     bc4:	b.eq	ca4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x5ac>  // b.none
     bc8:	ldr	x0, [sp, #112]
     bcc:	ldrb	w25, [x22]
     bd0:	ldr	x28, [x0, #112]
     bd4:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     bd8:	add	x1, x0, #0x0
     bdc:	mov	x0, x28
     be0:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     be4:	cbz	w0, b90 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x498>
     be8:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     bec:	mov	x0, x28
     bf0:	add	x1, x1, #0x0
     bf4:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     bf8:	cbz	w0, e74 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x77c>
     bfc:	asr	w4, w25, #4
     c00:	and	w5, w25, #0xf
     c04:	mov	x3, x23
     c08:	mov	x6, x23
     c0c:	b	ba4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x4ac>
     c10:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     c14:	add	x1, x1, #0x0
     c18:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     c1c:	mov	x20, x0
     c20:	adrp	x24, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     c24:	add	x0, x24, #0x0
     c28:	str	x20, [sp, #120]
     c2c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     c30:	mov	x0, x19
     c34:	bl	0 <_ZNK11__sanitizer13SignalContext8DescribeEv>
     c38:	ldr	x1, [x20]
     c3c:	mov	w7, w21
     c40:	ldp	x3, x4, [x19, #16]
     c44:	mov	x2, x0
     c48:	ldp	x6, x5, [x19, #32]
     c4c:	adrp	x25, 0 <_ZN11__sanitizer14PageSizeCachedE>
     c50:	ldr	x1, [x1]
     c54:	str	x0, [sp, #128]
     c58:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     c5c:	add	x0, x0, #0x0
     c60:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     c64:	add	x0, x24, #0x0
     c68:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     c6c:	add	x1, x1, #0x0
     c70:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     c74:	ldr	x20, [x25]
     c78:	ldr	x21, [x19, #24]
     c7c:	ldr	x0, [x20]
     c80:	cbnz	x0, 934 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x23c>
     c84:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     c88:	str	x0, [x20]
     c8c:	cmp	x0, x21
     c90:	b.ls	93c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x244>  // b.plast
     c94:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     c98:	add	x0, x0, #0x0
     c9c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     ca0:	b	93c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x244>
     ca4:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     ca8:	mov	x0, x26
     cac:	add	x1, x1, #0x0
     cb0:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
     cb4:	ldr	x1, [sp, #192]
     cb8:	add	x0, x24, #0x0
     cbc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     cc0:	ldp	x0, x1, [sp, #192]
     cc4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     cc8:	ldr	x0, [x20]
     ccc:	ldrb	w0, [x0, #233]
     cd0:	cbnz	w0, de8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x6f0>
     cd4:	ldr	x0, [sp, #120]
     cd8:	ldr	x1, [x0]
     cdc:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     ce0:	add	x0, x0, #0x0
     ce4:	ldr	x1, [x1]
     ce8:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     cec:	ldr	x20, [x20]
     cf0:	ldrb	w0, [x20, #60]
     cf4:	cbz	w0, d3c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x644>
     cf8:	ldr	w0, [x21, #8]
     cfc:	cbz	w0, e3c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x744>
     d00:	ldr	x0, [x21]
     d04:	ldr	x19, [x0]
     d08:	bl	0 <_ZN11__sanitizer10Symbolizer9GetOrInitEv>
     d0c:	sub	x19, x19, #0x4
     d10:	mov	x1, x19
     d14:	bl	0 <_ZN11__sanitizer10Symbolizer11SymbolizePCEm>
     d18:	ldrb	w1, [x20, #60]
     d1c:	mov	x19, x0
     d20:	cbz	w1, d34 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x63c>
     d24:	add	x1, x0, #0x8
     d28:	mov	x2, #0x0                   	// #0
     d2c:	ldr	x0, [sp, #128]
     d30:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     d34:	mov	x0, x19
     d38:	bl	0 <_ZN11__sanitizer15SymbolizedStack8ClearAllEv>
     d3c:	mov	x1, x27
     d40:	mov	x0, x21
     d44:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     d48:	ldp	x21, x22, [sp, #16]
     d4c:	ldp	x23, x24, [sp, #32]
     d50:	ldp	x25, x26, [sp, #48]
     d54:	ldp	x27, x28, [sp, #64]
     d58:	ldr	x30, [sp, #80]
     d5c:	ldp	x19, x20, [sp], #272
     d60:	ret
     d64:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     d68:	mov	x0, x24
     d6c:	add	x1, x1, #0x0
     d70:	bl	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
     d74:	cbz	w0, edc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x7e4>
     d78:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     d7c:	add	x25, x1, #0x0
     d80:	mov	x1, x25
     d84:	adrp	x24, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     d88:	add	x0, x24, #0x0
     d8c:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     d90:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     d94:	adrp	x26, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     d98:	ldp	x3, x4, [x19, #16]
     d9c:	add	x2, x26, #0x0
     da0:	ldr	x0, [x0]
     da4:	mov	w7, w21
     da8:	ldp	x6, x5, [x19, #32]
     dac:	add	x2, x2, #0x40
     db0:	ldr	x1, [x0]
     db4:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     db8:	add	x0, x0, #0x0
     dbc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     dc0:	mov	x1, x25
     dc4:	adrp	x25, 0 <_ZN11__sanitizer14PageSizeCachedE>
     dc8:	add	x0, x24, #0x0
     dcc:	bl	0 <_ZN11__sanitizer6PrintfEPKcz>
     dd0:	ldr	x21, [x25]
     dd4:	ldr	x0, [x21]
     dd8:	cbnz	x0, 7b0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0xb8>
     ddc:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     de0:	str	x0, [x21]
     de4:	b	7b0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0xb8>
     de8:	ldr	x0, [x19, #8]
     dec:	bl	0 <_ZN11__sanitizer13SignalContext16DumpAllRegistersEPv>
     df0:	b	cd4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x5dc>
     df4:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     df8:	add	x1, x1, #0x0
     dfc:	b	968 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x270>
     e00:	add	x0, x26, #0x0
     e04:	mov	x1, #0x0                   	// #0
     e08:	add	x0, x0, #0x40
     e0c:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
     e10:	b	88c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x194>
     e14:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     e18:	str	x0, [x23]
     e1c:	cmp	x22, x0
     e20:	b.cc	cc8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x5d0>  // b.lo, b.ul, b.last
     e24:	str	xzr, [sp, #192]
     e28:	stp	xzr, xzr, [sp, #200]
     e2c:	cbnz	x0, adc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x3e4>
     e30:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     e34:	str	x0, [x23]
     e38:	b	adc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x3e4>
     e3c:	ldr	x0, [sp, #128]
     e40:	mov	x1, #0x0                   	// #0
     e44:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcS1_>
     e48:	b	d3c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x644>
     e4c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     e50:	str	x0, [x20]
     e54:	b	a24 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x32c>
     e58:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     e5c:	add	x0, x0, #0x0
     e60:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
     e64:	bl	0 <_ZN11__sanitizer3DieEv>
     e68:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
     e6c:	str	x0, [x20]
     e70:	b	984 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x28c>
     e74:	adrp	x1, 0 <_ZN11__sanitizer11report_fileE>
     e78:	mov	w3, #0x1                   	// #1
     e7c:	ldr	x0, [x1]
     e80:	ldr	x2, [x0]
     e84:	ldxrb	w0, [x2]
     e88:	stxrb	w4, w3, [x2]
     e8c:	cbnz	w4, e84 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x78c>
     e90:	dmb	ish
     e94:	tst	w0, #0xff
     e98:	b.eq	eac <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x7b4>  // b.none
     e9c:	mov	x0, x2
     ea0:	stp	x2, x1, [sp, #144]
     ea4:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     ea8:	ldp	x2, x1, [sp, #144]
     eac:	ldr	x0, [x1]
     eb0:	stp	x0, x2, [sp, #144]
     eb4:	bl	0 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>
     eb8:	ldr	x0, [sp, #144]
     ebc:	ldr	w0, [x0, #8]
     ec0:	bl	0 <_ZN11__sanitizer21SupportsColoredOutputEi>
     ec4:	dmb	ish
     ec8:	and	w0, w0, #0xff
     ecc:	ldr	x2, [sp, #152]
     ed0:	strb	wzr, [x2]
     ed4:	cbnz	w0, b90 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x498>
     ed8:	b	bfc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x504>
     edc:	adrp	x1, 0 <_ZN11__sanitizer11report_fileE>
     ee0:	mov	w2, #0x1                   	// #1
     ee4:	ldr	x0, [x1]
     ee8:	ldr	x25, [x0]
     eec:	ldxrb	w0, [x25]
     ef0:	stxrb	w3, w2, [x25]
     ef4:	cbnz	w3, eec <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x7f4>
     ef8:	dmb	ish
     efc:	tst	w0, #0xff
     f00:	b.eq	f14 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x81c>  // b.none
     f04:	mov	x0, x25
     f08:	str	x1, [sp, #104]
     f0c:	bl	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
     f10:	ldr	x1, [sp, #104]
     f14:	ldr	x24, [x1]
     f18:	mov	x0, x24
     f1c:	bl	0 <_ZN11__sanitizer10ReportFile17ReopenIfNecessaryEv>
     f20:	ldr	w0, [x24, #8]
     f24:	bl	0 <_ZN11__sanitizer21SupportsColoredOutputEi>
     f28:	dmb	ish
     f2c:	and	w0, w0, #0xff
     f30:	strb	wzr, [x25]
     f34:	cbnz	w0, 74c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x54>
     f38:	b	d78 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x680>
     f3c:	cmp	x3, #0x3ff
     f40:	b.ls	1048 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x950>  // b.plast
     f44:	mov	x3, #0x400                 	// #1024
     f48:	add	x0, x23, x2
     f4c:	mov	w1, #0x0                   	// #0
     f50:	sub	x2, x3, x2
     f54:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
     f58:	ldr	x23, [sp, #192]
     f5c:	b	b34 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x43c>
     f60:	ldr	x20, [x25]
     f64:	ldr	x0, [x20]
     f68:	cbz	x0, 1030 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x938>
     f6c:	sub	x1, x0, #0x1
     f70:	tst	x1, x0
     f74:	b.ne	e58 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x760>  // b.any
     f78:	add	x20, x0, #0x817
     f7c:	neg	x0, x0
     f80:	and	x20, x20, x0
     f84:	add	x1, x28, #0x0
     f88:	mov	x0, x20
     f8c:	mov	w2, #0x0                   	// #0
     f90:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     f94:	str	x0, [sp, #104]
     f98:	mov	x1, x21
     f9c:	mov	x2, #0x0                   	// #0
     fa0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
     fa4:	ldr	x3, [sp, #104]
     fa8:	mov	x1, x27
     fac:	mov	x0, x21
     fb0:	mov	x27, x20
     fb4:	mov	x21, x3
     fb8:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
     fbc:	b	a74 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x37c>
     fc0:	ldr	x25, [x25]
     fc4:	ldr	x0, [x25]
     fc8:	cbz	x0, 103c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x944>
     fcc:	sub	x1, x0, #0x1
     fd0:	tst	x1, x0
     fd4:	b.ne	e58 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x760>  // b.any
     fd8:	add	x25, x0, #0x817
     fdc:	neg	x0, x0
     fe0:	and	x25, x25, x0
     fe4:	add	x1, x28, #0x0
     fe8:	mov	x0, x25
     fec:	mov	w2, #0x0                   	// #0
     ff0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     ff4:	mov	x27, x0
     ff8:	mov	x2, #0x0                   	// #0
     ffc:	mov	x1, x21
    1000:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    1004:	mov	x1, x24
    1008:	mov	x0, x21
    100c:	mov	x24, x25
    1010:	mov	x21, x27
    1014:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1018:	b	800 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x108>
    101c:	mov	x0, x26
    1020:	adrp	x1, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
    1024:	add	x1, x1, #0x0
    1028:	bl	0 <_ZN11__sanitizer20InternalScopedString6appendEPKcz>
    102c:	b	cb4 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x5bc>
    1030:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    1034:	str	x0, [x20]
    1038:	b	f6c <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x874>
    103c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    1040:	str	x0, [x25]
    1044:	b	fcc <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x8d4>
    1048:	ldr	x25, [x25]
    104c:	ldr	x0, [x25]
    1050:	cbz	x0, 10a0 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x9a8>
    1054:	sub	x1, x0, #0x1
    1058:	tst	x1, x0
    105c:	b.ne	e58 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x760>  // b.any
    1060:	add	x25, x0, #0x3ff
    1064:	neg	x0, x0
    1068:	and	x25, x25, x0
    106c:	add	x1, x28, #0x0
    1070:	mov	w2, #0x0                   	// #0
    1074:	mov	x0, x25
    1078:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
    107c:	mov	x23, x0
    1080:	ldr	x1, [sp, #192]
    1084:	ldr	x2, [sp, #208]
    1088:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
    108c:	ldp	x0, x1, [sp, #192]
    1090:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
    1094:	stp	x23, x25, [sp, #192]
    1098:	ldr	x2, [sp, #208]
    109c:	b	f44 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x84c>
    10a0:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
    10a4:	str	x0, [x25]
    10a8:	b	1054 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_+0x95c>
    10ac:	nop

00000000000010b0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>:
    10b0:	stp	x19, x20, [sp, #-32]!
    10b4:	adrp	x19, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
    10b8:	add	x19, x19, #0x0
    10bc:	str	x30, [sp, #16]
    10c0:	bl	0 <_ZN11__sanitizer13GetThreadSelfEv>
    10c4:	mov	x20, x0
    10c8:	ldxr	x1, [x19]
    10cc:	cbnz	x1, 10d8 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x28>
    10d0:	stlxr	w0, x20, [x19]
    10d4:	cbnz	w0, 10c8 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x18>
    10d8:	dmb	ish
    10dc:	cbz	x1, 10f8 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x48>
    10e0:	cmp	x20, x1
    10e4:	b.eq	1130 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x80>  // b.none
    10e8:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
    10ec:	ldxr	x1, [x19]
    10f0:	cbz	x1, 10d0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x20>
    10f4:	b	10d8 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x28>
    10f8:	add	x0, x19, #0x8
    10fc:	mov	w2, #0x1                   	// #1
    1100:	ldxrb	w1, [x0]
    1104:	stxrb	w3, w2, [x0]
    1108:	cbnz	w3, 1100 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x50>
    110c:	dmb	ish
    1110:	tst	w1, #0xff
    1114:	b.eq	1124 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev+0x74>  // b.none
    1118:	ldr	x30, [sp, #16]
    111c:	ldp	x19, x20, [sp], #32
    1120:	b	0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
    1124:	ldr	x30, [sp, #16]
    1128:	ldp	x19, x20, [sp], #32
    112c:	ret
    1130:	adrp	x0, 0 <_ZN11__sanitizer17SanitizerToolNameE>
    1134:	ldr	x0, [x0]
    1138:	ldr	x19, [x0]
    113c:	mov	x0, x19
    1140:	bl	0 <_ZN11__sanitizer15internal_strlenEPKc>
    1144:	mov	x1, x0
    1148:	mov	x0, x19
    114c:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
    1150:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
    1154:	mov	x1, #0x2b                  	// #43
    1158:	add	x0, x0, #0x0
    115c:	bl	0 <_ZN11__sanitizer22CatastrophicErrorWriteEPKcm>
    1160:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
    1164:	ldr	x0, [x0]
    1168:	ldr	w0, [x0, #216]
    116c:	bl	0 <_ZN11__sanitizer14internal__exitEi>

0000000000001170 <_ZN11__sanitizer18HandleDeadlySignalEPvS0_jPFvRKNS_13SignalContextEPKvPNS_18BufferedStackTraceEES5_>:
    1170:	stp	x19, x20, [sp, #-128]!
    1174:	mov	w20, w2
    1178:	stp	x21, x22, [sp, #16]
    117c:	mov	x22, x4
    1180:	mov	x21, x3
    1184:	stp	x23, x24, [sp, #32]
    1188:	mov	x23, x1
    118c:	mov	x24, x0
    1190:	str	x30, [sp, #48]
    1194:	bl	6b8 <_ZN11__sanitizer23StartReportDeadlySignalEv>
    1198:	add	x19, sp, #0x48
    119c:	add	x0, sp, #0x40
    11a0:	bl	10b0 <_ZN11__sanitizer21ScopedErrorReportLockC1Ev>
    11a4:	stp	x24, x23, [sp, #72]
    11a8:	mov	x0, x19
    11ac:	bl	0 <_ZNK11__sanitizer13SignalContext10GetAddressEv>
    11b0:	mov	x1, x0
    11b4:	mov	x0, x19
    11b8:	str	x1, [sp, #88]
    11bc:	bl	0 <_ZNK11__sanitizer13SignalContext14IsMemoryAccessEv>
    11c0:	mov	w1, w0
    11c4:	mov	x0, x19
    11c8:	strb	w1, [sp, #120]
    11cc:	bl	0 <_ZNK11__sanitizer13SignalContext12GetWriteFlagEv>
    11d0:	mov	w1, w0
    11d4:	mov	x0, x19
    11d8:	str	w1, [sp, #124]
    11dc:	bl	0 <_ZN11__sanitizer13SignalContext10InitPcSpBpEv>
    11e0:	mov	x3, x22
    11e4:	mov	x2, x21
    11e8:	mov	w1, w20
    11ec:	mov	x0, x19
    11f0:	bl	6f8 <_ZN11__sanitizer18ReportDeadlySignalERKNS_13SignalContextEjPFvS2_PKvPNS_18BufferedStackTraceEES4_>
    11f4:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
    11f8:	add	x0, x0, #0x0
    11fc:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
    1200:	bl	0 <_ZN11__sanitizer3DieEv>
    1204:	nop

0000000000001208 <_ZN11__sanitizer21ScopedErrorReportLockD1Ev>:
    1208:	dmb	ish
    120c:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
    1210:	add	x1, x0, #0x0
    1214:	strb	wzr, [x1, #8]
    1218:	str	xzr, [x0]
    121c:	ret

0000000000001220 <_ZN11__sanitizer21ScopedErrorReportLock11CheckLockedEv>:
    1220:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
    1224:	add	x0, x0, #0x0
    1228:	ldrb	w3, [x0, #8]
    122c:	and	x3, x3, #0xff
    1230:	cmp	x3, #0x1
    1234:	b.ne	123c <_ZN11__sanitizer21ScopedErrorReportLock11CheckLockedEv+0x1c>  // b.any
    1238:	ret
    123c:	str	x30, [sp, #-16]!
    1240:	adrp	x2, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
    1244:	adrp	x0, 0 <_ZN11__sanitizer18ReportErrorSummaryEPKcRKNS_11AddressInfoES1_.part.0>
    1248:	add	x2, x2, #0x0
    124c:	add	x0, x0, #0x0
    1250:	mov	x4, #0x1                   	// #1
    1254:	mov	w1, #0x2a                  	// #42
    1258:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

Disassembly of section .text._ZN11__sanitizer15StaticSpinMutex8LockSlowEv:

0000000000000000 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x20, x0
   8:	mov	w19, #0x0                   	// #0
   c:	stp	x21, x30, [sp, #16]
  10:	mov	w21, #0x1                   	// #1
  14:	nop
  18:	cmp	w19, #0x9
  1c:	b.gt	58 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x58>
  20:	ldrb	w0, [x20]
  24:	tst	w0, #0xff
  28:	b.ne	44 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x44>  // b.any
  2c:	ldxrb	w0, [x20]
  30:	stxrb	w1, w21, [x20]
  34:	cbnz	w1, 2c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x2c>
  38:	dmb	ish
  3c:	tst	w0, #0xff
  40:	b.eq	4c <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x4c>  // b.none
  44:	add	w19, w19, #0x1
  48:	b	18 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x18>
  4c:	ldp	x21, x30, [sp, #16]
  50:	ldp	x19, x20, [sp], #32
  54:	ret
  58:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
  5c:	b	20 <_ZN11__sanitizer15StaticSpinMutex8LockSlowEv+0x20>

sanitizer_symbolizer_win.o:     file format elf64-littleaarch64


sanitizer_termination.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer14AddDieCallbackEPFvvE>:
   0:	adrp	x2, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
   4:	add	x1, x2, #0x0
   8:	ldr	x3, [x2]
   c:	cbz	x3, 3c <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x3c>
  10:	ldr	x3, [x1, #8]
  14:	cbz	x3, 54 <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x54>
  18:	ldr	x3, [x1, #16]
  1c:	cbz	x3, 5c <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x5c>
  20:	ldr	x3, [x1, #24]
  24:	cbz	x3, 64 <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x64>
  28:	ldr	x3, [x1, #32]
  2c:	mov	w1, #0x0                   	// #0
  30:	cbz	x3, 6c <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x6c>
  34:	mov	w0, w1
  38:	ret
  3c:	mov	w3, #0x0                   	// #0
  40:	add	x2, x2, #0x0
  44:	mov	w1, #0x1                   	// #1
  48:	str	x0, [x2, w3, sxtw #3]
  4c:	mov	w0, w1
  50:	ret
  54:	mov	w3, #0x1                   	// #1
  58:	b	40 <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x40>
  5c:	mov	w3, #0x2                   	// #2
  60:	b	40 <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x40>
  64:	mov	w3, #0x3                   	// #3
  68:	b	40 <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x40>
  6c:	mov	w3, #0x4                   	// #4
  70:	b	40 <_ZN11__sanitizer14AddDieCallbackEPFvvE+0x40>
  74:	nop

0000000000000078 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE>:
  78:	adrp	x2, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
  7c:	mov	x1, x0
  80:	ldr	x3, [x2]
  84:	cmp	x0, x3
  88:	b.eq	c8 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0x50>  // b.none
  8c:	add	x0, x2, #0x0
  90:	ldr	x3, [x0, #8]
  94:	cmp	x1, x3
  98:	b.eq	100 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0x88>  // b.none
  9c:	ldr	x3, [x0, #16]
  a0:	cmp	x1, x3
  a4:	b.eq	10c <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0x94>  // b.none
  a8:	ldr	x3, [x0, #24]
  ac:	cmp	x1, x3
  b0:	b.eq	118 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0xa0>  // b.none
  b4:	ldr	x3, [x0, #32]
  b8:	mov	w0, #0x0                   	// #0
  bc:	cmp	x3, x1
  c0:	b.eq	124 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0xac>  // b.none
  c4:	ret
  c8:	mov	w1, #0x1                   	// #1
  cc:	mov	w0, #0x0                   	// #0
  d0:	stp	x19, x30, [sp, #-16]!
  d4:	add	x19, x2, #0x0
  d8:	mov	w2, #0x4                   	// #4
  dc:	sub	w2, w2, w0
  e0:	add	x1, x19, w1, sxtw #3
  e4:	add	x0, x19, w0, sxtw #3
  e8:	sbfiz	x2, x2, #3, #32
  ec:	bl	0 <_ZN11__sanitizer16internal_memmoveEPvPKvm>
  f0:	mov	w0, #0x1                   	// #1
  f4:	str	xzr, [x19, #32]
  f8:	ldp	x19, x30, [sp], #16
  fc:	ret
 100:	mov	w1, #0x2                   	// #2
 104:	mov	w0, #0x1                   	// #1
 108:	b	d0 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0x58>
 10c:	mov	w1, #0x3                   	// #3
 110:	mov	w0, #0x2                   	// #2
 114:	b	d0 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0x58>
 118:	mov	w1, #0x4                   	// #4
 11c:	mov	w0, #0x3                   	// #3
 120:	b	d0 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0x58>
 124:	mov	w1, #0x5                   	// #5
 128:	mov	w0, #0x4                   	// #4
 12c:	b	d0 <_ZN11__sanitizer17RemoveDieCallbackEPFvvE+0x58>

0000000000000130 <_ZN11__sanitizer18SetUserDieCallbackEPFvvE>:
 130:	adrp	x1, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 134:	str	x0, [x1]
 138:	ret
 13c:	nop

0000000000000140 <_ZN11__sanitizer3DieEv>:
 140:	stp	x19, x20, [sp, #-32]!
 144:	adrp	x20, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 148:	add	x0, x20, #0x0
 14c:	ldr	x0, [x0, #40]
 150:	str	x30, [sp, #16]
 154:	cbz	x0, 15c <_ZN11__sanitizer3DieEv+0x1c>
 158:	blr	x0
 15c:	add	x20, x20, #0x0
 160:	mov	x19, #0x4                   	// #4
 164:	ldr	x0, [x20, x19, lsl #3]
 168:	cbz	x0, 170 <_ZN11__sanitizer3DieEv+0x30>
 16c:	blr	x0
 170:	sub	x19, x19, #0x1
 174:	cmn	x19, #0x1
 178:	b.ne	164 <_ZN11__sanitizer3DieEv+0x24>  // b.any
 17c:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 180:	ldr	x0, [x0]
 184:	ldrb	w1, [x0, #220]
 188:	cbz	w1, 190 <_ZN11__sanitizer3DieEv+0x50>
 18c:	bl	0 <_ZN11__sanitizer5AbortEv>
 190:	ldr	w0, [x0, #216]
 194:	bl	0 <_ZN11__sanitizer14internal__exitEi>

0000000000000198 <_ZN11__sanitizer22SetCheckFailedCallbackEPFvPKciS1_yyE>:
 198:	adrp	x1, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 19c:	str	x0, [x1]
 1a0:	ret
 1a4:	nop

00000000000001a8 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>:
 1a8:	stp	x19, x20, [sp, #-48]!
 1ac:	adrp	x6, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 1b0:	add	x6, x6, #0x0
 1b4:	add	x5, x6, #0x38
 1b8:	mov	x19, x0
 1bc:	mov	w20, w1
 1c0:	stp	x21, x22, [sp, #16]
 1c4:	mov	x21, x2
 1c8:	mov	x22, x3
 1cc:	stp	x23, x30, [sp, #32]
 1d0:	mov	x23, x4
 1d4:	ldxr	w7, [x5]
 1d8:	add	w8, w7, #0x1
 1dc:	stlxr	w9, w8, [x5]
 1e0:	cbnz	w9, 1d4 <_ZN11__sanitizer11CheckFailedEPKciS1_yy+0x2c>
 1e4:	dmb	ish
 1e8:	cmp	w7, #0xa
 1ec:	b.hi	220 <_ZN11__sanitizer11CheckFailedEPKciS1_yy+0x78>  // b.pmore
 1f0:	ldr	x5, [x6, #48]
 1f4:	cbz	x5, 1fc <_ZN11__sanitizer11CheckFailedEPKciS1_yy+0x54>
 1f8:	blr	x5
 1fc:	mov	x5, x23
 200:	mov	x4, x22
 204:	mov	x3, x21
 208:	mov	w2, w20
 20c:	mov	x1, x19
 210:	adrp	x0, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 214:	add	x0, x0, #0x0
 218:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 21c:	bl	140 <_ZN11__sanitizer3DieEv>
 220:	mov	w0, #0x2                   	// #2
 224:	bl	0 <_ZN11__sanitizer15SleepForSecondsEi>
 228:	brk	#0x3e8
 22c:	nop

0000000000000230 <__sanitizer_set_death_callback>:
 230:	adrp	x1, 0 <_ZN11__sanitizer14AddDieCallbackEPFvvE>
 234:	str	x0, [x1]
 238:	ret

sanitizer_thread_registry.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>:
       0:	stp	x19, x20, [sp, #-32]!
       4:	mov	x19, x0
       8:	ldr	x0, [x0, #160]
       c:	str	x30, [sp, #16]
      10:	cbnz	x0, 44 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0x44>
      14:	dup	v0.2d, x1
      18:	str	xzr, [x1, #128]
      1c:	mov	x1, #0x1                   	// #1
      20:	mov	x2, x1
      24:	str	x1, [x19, #160]
      28:	ldr	w1, [x19, #12]
      2c:	stur	q0, [x19, #168]
      30:	cmp	x2, x1
      34:	b.hi	68 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0x68>  // b.pmore
      38:	ldr	x30, [sp, #16]
      3c:	ldp	x19, x20, [sp], #32
      40:	ret
      44:	str	xzr, [x1, #128]
      48:	add	x2, x0, #0x1
      4c:	ldr	x4, [x19, #176]
      50:	str	x1, [x4, #128]
      54:	str	x2, [x19, #160]
      58:	str	x1, [x19, #176]
      5c:	ldr	w1, [x19, #12]
      60:	cmp	x2, x1
      64:	b.ls	38 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0x38>  // b.plast
      68:	ldr	x20, [x19, #168]
      6c:	add	x2, x19, #0xa0
      70:	ldr	x1, [x20, #128]
      74:	str	x1, [x2, #8]
      78:	cbz	x1, 11c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0x11c>
      7c:	ldr	w3, [x20, #112]
      80:	str	x0, [x19, #160]
      84:	cmp	x3, #0x4
      88:	b.ne	130 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0x130>  // b.any
      8c:	strb	wzr, [x20, #48]
      90:	str	wzr, [x20, #112]
      94:	dmb	ish
      98:	str	wzr, [x20, #136]
      9c:	ldr	x1, [x20]
      a0:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
      a4:	add	x0, x0, #0x0
      a8:	ldr	x1, [x1, #40]
      ac:	cmp	x1, x0
      b0:	b.ne	124 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0x124>  // b.any
      b4:	ldr	w0, [x20, #24]
      b8:	add	w0, w0, #0x1
      bc:	str	w0, [x20, #24]
      c0:	ldr	w1, [x19, #16]
      c4:	cmp	w1, #0x0
      c8:	ccmp	w0, w1, #0x0, ne  // ne = any
      cc:	b.cs	38 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0x38>  // b.hs, b.nlast
      d0:	ldr	x0, [x19, #184]
      d4:	cbnz	x0, f8 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0xf8>
      d8:	dup	v0.2d, x20
      dc:	str	xzr, [x20, #128]
      e0:	mov	x0, #0x1                   	// #1
      e4:	str	x0, [x19, #184]
      e8:	ldr	x30, [sp, #16]
      ec:	str	q0, [x19, #192]
      f0:	ldp	x19, x20, [sp], #32
      f4:	ret
      f8:	str	xzr, [x20, #128]
      fc:	add	x0, x0, #0x1
     100:	ldr	x30, [sp, #16]
     104:	ldr	x2, [x19, #200]
     108:	str	x20, [x2, #128]
     10c:	str	x0, [x19, #184]
     110:	str	x20, [x19, #200]
     114:	ldp	x19, x20, [sp], #32
     118:	ret
     11c:	str	xzr, [x2, #16]
     120:	b	7c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0x7c>
     124:	mov	x0, x20
     128:	blr	x1
     12c:	b	b4 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0+0xb4>
     130:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     134:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     138:	add	x2, x2, #0x0
     13c:	add	x0, x0, #0x0
     140:	mov	x4, #0x4                   	// #4
     144:	mov	w1, #0x143                 	// #323
     148:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     14c:	nop

0000000000000150 <_ZN11__sanitizer17ThreadContextBaseC1Ej>:
     150:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     154:	add	x2, x2, #0x0
     158:	str	x2, [x0]
     15c:	str	w1, [x0, #8]
     160:	str	xzr, [x0, #16]
     164:	str	wzr, [x0, #24]
     168:	stp	xzr, xzr, [x0, #32]
     16c:	strb	wzr, [x0, #48]
     170:	str	wzr, [x0, #112]
     174:	strh	wzr, [x0, #116]
     178:	str	wzr, [x0, #120]
     17c:	str	xzr, [x0, #128]
     180:	dmb	ish
     184:	str	wzr, [x0, #136]
     188:	ret
     18c:	nop

0000000000000190 <_ZN11__sanitizer17ThreadContextBaseD1Ev>:
     190:	str	x30, [sp, #-16]!
     194:	adrp	x1, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     198:	add	x1, x1, #0x0
     19c:	str	x1, [x0]
     1a0:	adrp	x3, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     1a4:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     1a8:	add	x0, x3, #0x0
     1ac:	add	x2, x2, #0x0
     1b0:	mov	x4, #0x0                   	// #0
     1b4:	mov	x3, #0x0                   	// #0
     1b8:	mov	w1, #0x1b                  	// #27
     1bc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000001c0 <_ZN11__sanitizer17ThreadContextBase7SetNameEPKc>:
     1c0:	strb	wzr, [x0, #48]
     1c4:	cbz	x1, 1e8 <_ZN11__sanitizer17ThreadContextBase7SetNameEPKc+0x28>
     1c8:	stp	x19, x30, [sp, #-16]!
     1cc:	mov	x19, x0
     1d0:	mov	x2, #0x40                  	// #64
     1d4:	add	x0, x0, #0x30
     1d8:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
     1dc:	strb	wzr, [x19, #111]
     1e0:	ldp	x19, x30, [sp], #16
     1e4:	ret
     1e8:	ret
     1ec:	nop

00000000000001f0 <_ZN11__sanitizer17ThreadContextBase7SetDeadEv>:
     1f0:	ldr	w2, [x0, #112]
     1f4:	sub	w2, w2, #0x2
     1f8:	cmp	w2, #0x1
     1fc:	b.hi	230 <_ZN11__sanitizer17ThreadContextBase7SetDeadEv+0x40>  // b.pmore
     200:	ldr	x3, [x0]
     204:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     208:	add	x1, x2, #0x0
     20c:	mov	w4, #0x4                   	// #4
     210:	str	xzr, [x0, #40]
     214:	ldr	x2, [x3]
     218:	str	w4, [x0, #112]
     21c:	cmp	x2, x1
     220:	b.ne	228 <_ZN11__sanitizer17ThreadContextBase7SetDeadEv+0x38>  // b.any
     224:	ret
     228:	mov	x16, x2
     22c:	br	x16
     230:	str	x30, [sp, #-16]!
     234:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     238:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     23c:	add	x2, x2, #0x0
     240:	add	x0, x0, #0x0
     244:	mov	x4, #0x0                   	// #0
     248:	mov	x3, #0x0                   	// #0
     24c:	mov	w1, #0x27                  	// #39
     250:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     254:	nop

0000000000000258 <_ZN11__sanitizer17ThreadContextBase12SetDestroyedEv>:
     258:	dmb	ish
     25c:	mov	w1, #0x1                   	// #1
     260:	str	w1, [x0, #136]
     264:	ret

0000000000000268 <_ZN11__sanitizer17ThreadContextBase12GetDestroyedEv>:
     268:	ldr	w0, [x0, #136]
     26c:	dmb	ish
     270:	cmp	w0, #0x0
     274:	cset	w0, ne  // ne = any
     278:	ret
     27c:	nop

0000000000000280 <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv>:
     280:	ldrb	w3, [x0, #116]
     284:	str	x30, [sp, #-16]!
     288:	cbnz	w3, 2d0 <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv+0x50>
     28c:	ldr	w4, [x0, #112]
     290:	cmp	x4, #0x3
     294:	b.ne	2f0 <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv+0x70>  // b.any
     298:	ldr	x4, [x0]
     29c:	adrp	x3, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     2a0:	add	x2, x3, #0x0
     2a4:	mov	w5, #0x4                   	// #4
     2a8:	str	xzr, [x0, #40]
     2ac:	ldr	x3, [x4, #8]
     2b0:	str	w5, [x0, #112]
     2b4:	cmp	x3, x2
     2b8:	b.ne	2c4 <_ZN11__sanitizer17ThreadContextBase9SetJoinedEPv+0x44>  // b.any
     2bc:	ldr	x30, [sp], #16
     2c0:	ret
     2c4:	ldr	x30, [sp], #16
     2c8:	mov	x16, x3
     2cc:	br	x16
     2d0:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     2d4:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     2d8:	add	x2, x2, #0x0
     2dc:	add	x0, x0, #0x0
     2e0:	mov	x4, #0x1                   	// #1
     2e4:	mov	x3, #0x0                   	// #0
     2e8:	mov	w1, #0x38                  	// #56
     2ec:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     2f0:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     2f4:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     2f8:	add	x2, x2, #0x0
     2fc:	add	x0, x0, #0x0
     300:	mov	x3, #0x3                   	// #3
     304:	mov	w1, #0x39                  	// #57
     308:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     30c:	nop

0000000000000310 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv>:
     310:	ldrb	w1, [x0, #116]
     314:	cbz	w1, 340 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv+0x30>
     318:	ldr	w1, [x0, #112]
     31c:	cmp	w1, #0x1
     320:	b.eq	340 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv+0x30>  // b.none
     324:	ldr	x2, [x0]
     328:	adrp	x1, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     32c:	add	x1, x1, #0x0
     330:	ldr	x2, [x2, #16]
     334:	cmp	x2, x1
     338:	b.ne	360 <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv+0x50>  // b.any
     33c:	ret
     340:	ldr	x2, [x0]
     344:	mov	w1, #0x3                   	// #3
     348:	str	w1, [x0, #112]
     34c:	adrp	x1, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     350:	add	x1, x1, #0x0
     354:	ldr	x2, [x2, #16]
     358:	cmp	x2, x1
     35c:	b.eq	33c <_ZN11__sanitizer17ThreadContextBase11SetFinishedEv+0x2c>  // b.none
     360:	mov	x16, x2
     364:	br	x16

0000000000000368 <_ZN11__sanitizer17ThreadContextBase10SetStartedEybPv>:
     368:	ldr	x6, [x0]
     36c:	strb	w2, [x0, #117]
     370:	mov	w7, #0x2                   	// #2
     374:	adrp	x5, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     378:	add	x5, x5, #0x0
     37c:	ldr	x2, [x6, #24]
     380:	str	x1, [x0, #32]
     384:	str	w7, [x0, #112]
     388:	cmp	x2, x5
     38c:	b.ne	394 <_ZN11__sanitizer17ThreadContextBase10SetStartedEybPv+0x2c>  // b.any
     390:	ret
     394:	mov	x1, x3
     398:	mov	x16, x2
     39c:	br	x16

00000000000003a0 <_ZN11__sanitizer17ThreadContextBase10SetCreatedEmybjPv>:
     3a0:	ldr	w6, [x0, #8]
     3a4:	mov	w7, #0x1                   	// #1
     3a8:	str	x2, [x0, #16]
     3ac:	str	x1, [x0, #40]
     3b0:	str	w7, [x0, #112]
     3b4:	strb	w3, [x0, #116]
     3b8:	cbz	w6, 3c0 <_ZN11__sanitizer17ThreadContextBase10SetCreatedEmybjPv+0x20>
     3bc:	str	w4, [x0, #120]
     3c0:	ldr	x1, [x0]
     3c4:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     3c8:	add	x2, x2, #0x0
     3cc:	ldr	x3, [x1, #32]
     3d0:	cmp	x3, x2
     3d4:	b.ne	3dc <_ZN11__sanitizer17ThreadContextBase10SetCreatedEmybjPv+0x3c>  // b.any
     3d8:	ret
     3dc:	mov	x1, x5
     3e0:	mov	x16, x3
     3e4:	br	x16

00000000000003e8 <_ZN11__sanitizer17ThreadContextBase5ResetEv>:
     3e8:	strb	wzr, [x0, #48]
     3ec:	str	wzr, [x0, #112]
     3f0:	dmb	ish
     3f4:	str	wzr, [x0, #136]
     3f8:	ldr	x2, [x0]
     3fc:	adrp	x1, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     400:	add	x1, x1, #0x0
     404:	ldr	x2, [x2, #40]
     408:	cmp	x2, x1
     40c:	b.ne	414 <_ZN11__sanitizer17ThreadContextBase5ResetEv+0x2c>  // b.any
     410:	ret
     414:	mov	x16, x2
     418:	br	x16
     41c:	nop

0000000000000420 <_ZN11__sanitizer14ThreadRegistryC1EPFPNS_17ThreadContextBaseEjEjjj>:
     420:	stp	x19, x30, [sp, #-16]!
     424:	mov	x19, x0
     428:	add	x0, x0, #0x18
     42c:	str	x1, [x19]
     430:	stp	w2, w3, [x19, #8]
     434:	str	w4, [x19, #16]
     438:	bl	0 <_ZN11__sanitizer13BlockingMutexC1Ev>
     43c:	str	wzr, [x19, #112]
     440:	movi	v0.4s, #0x0
     444:	ldr	w0, [x19, #8]
     448:	mov	w2, #0x0                   	// #0
     44c:	adrp	x1, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     450:	add	x1, x1, #0x0
     454:	lsl	x0, x0, #3
     458:	stur	q0, [x19, #120]
     45c:	stur	q0, [x19, #136]
     460:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
     464:	movi	v0.4s, #0x0
     468:	stp	x0, xzr, [x19, #152]
     46c:	str	xzr, [x19, #184]
     470:	stur	q0, [x19, #168]
     474:	str	q0, [x19, #192]
     478:	ldp	x19, x30, [sp], #16
     47c:	ret

0000000000000480 <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_>:
     480:	stp	x19, x20, [sp, #-48]!
     484:	mov	x19, x0
     488:	mov	x20, x3
     48c:	stp	x23, x30, [sp, #32]
     490:	add	x23, x0, #0x18
     494:	mov	x0, x23
     498:	stp	x21, x22, [sp, #16]
     49c:	mov	x22, x1
     4a0:	mov	x21, x2
     4a4:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     4a8:	cbz	x22, 4b4 <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_+0x34>
     4ac:	ldr	w0, [x19, #112]
     4b0:	str	x0, [x22]
     4b4:	cbz	x21, 4c0 <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_+0x40>
     4b8:	ldr	x0, [x19, #144]
     4bc:	str	x0, [x21]
     4c0:	cbz	x20, 4cc <_ZN11__sanitizer14ThreadRegistry18GetNumberOfThreadsEPmS1_S1_+0x4c>
     4c4:	ldr	x0, [x19, #128]
     4c8:	str	x0, [x20]
     4cc:	mov	x0, x23
     4d0:	ldp	x21, x22, [sp, #16]
     4d4:	ldp	x23, x30, [sp, #32]
     4d8:	ldp	x19, x20, [sp], #48
     4dc:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>

00000000000004e0 <_ZN11__sanitizer14ThreadRegistry18GetMaxAliveThreadsEv>:
     4e0:	stp	x19, x20, [sp, #-32]!
     4e4:	mov	x19, x0
     4e8:	add	x20, x0, #0x18
     4ec:	mov	x0, x20
     4f0:	str	x30, [sp, #16]
     4f4:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     4f8:	ldr	x19, [x19, #136]
     4fc:	mov	x0, x20
     500:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     504:	mov	x0, x19
     508:	ldr	x30, [sp, #16]
     50c:	ldp	x19, x20, [sp], #32
     510:	ret
     514:	nop

0000000000000518 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv>:
     518:	stp	x19, x20, [sp, #-64]!
     51c:	mov	x19, x0
     520:	stp	x25, x30, [sp, #48]
     524:	add	x25, x0, #0x18
     528:	mov	x0, x25
     52c:	stp	x21, x22, [sp, #16]
     530:	mov	x21, x1
     534:	mov	w22, w3
     538:	stp	x23, x24, [sp, #32]
     53c:	mov	x23, x4
     540:	and	w24, w2, #0xff
     544:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     548:	ldr	x1, [x19, #184]
     54c:	cbz	x1, 618 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x100>
     550:	ldr	x0, [x19, #192]
     554:	ldr	x2, [x0, #128]
     558:	str	x2, [x19, #192]
     55c:	cbz	x2, 66c <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x154>
     560:	ldr	w20, [x0, #8]
     564:	sub	x1, x1, #0x1
     568:	str	x1, [x19, #184]
     56c:	mov	w3, w20
     570:	mov	x1, #0xffffffff            	// #4294967295
     574:	cmp	x3, x1
     578:	b.eq	69c <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x184>  // b.none
     57c:	ldr	w4, [x19, #8]
     580:	cmp	x3, x4
     584:	b.cs	6b8 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x1a0>  // b.hs, b.nlast
     588:	ldr	w3, [x0, #112]
     58c:	cbnz	x3, 6d0 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x1b8>
     590:	ldp	x2, x1, [x19, #128]
     594:	add	x3, x2, #0x1
     598:	str	x3, [x19, #128]
     59c:	cmp	x3, x1
     5a0:	b.ls	5b4 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x9c>  // b.plast
     5a4:	add	x4, x1, #0x1
     5a8:	str	x4, [x19, #136]
     5ac:	cmp	x2, x1
     5b0:	b.ne	6ec <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x1d4>  // b.any
     5b4:	ldr	x1, [x19, #120]
     5b8:	mov	w3, #0x1                   	// #1
     5bc:	ldr	w2, [x0, #8]
     5c0:	add	x4, x1, #0x1
     5c4:	str	x4, [x19, #120]
     5c8:	str	x1, [x0, #16]
     5cc:	str	x21, [x0, #40]
     5d0:	str	w3, [x0, #112]
     5d4:	strb	w24, [x0, #116]
     5d8:	cbz	w2, 5e0 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0xc8>
     5dc:	str	w22, [x0, #120]
     5e0:	ldr	x2, [x0]
     5e4:	adrp	x1, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     5e8:	add	x1, x1, #0x0
     5ec:	ldr	x2, [x2, #32]
     5f0:	cmp	x2, x1
     5f4:	b.ne	674 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x15c>  // b.any
     5f8:	mov	x0, x25
     5fc:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     600:	mov	w0, w20
     604:	ldp	x21, x22, [sp, #16]
     608:	ldp	x23, x24, [sp, #32]
     60c:	ldp	x25, x30, [sp, #48]
     610:	ldp	x19, x20, [sp], #64
     614:	ret
     618:	ldr	w2, [x19, #8]
     61c:	ldr	w20, [x19, #112]
     620:	cmp	w20, w2
     624:	b.cs	704 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x1ec>  // b.hs, b.nlast
     628:	ldr	x1, [x19]
     62c:	add	w0, w20, #0x1
     630:	str	w0, [x19, #112]
     634:	mov	w0, w20
     638:	blr	x1
     63c:	ldr	x1, [x19, #152]
     640:	mov	w3, w20
     644:	str	x0, [x1, x3, lsl #3]
     648:	cbnz	x0, 570 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x58>
     64c:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     650:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     654:	add	x2, x2, #0x0
     658:	add	x0, x0, #0x0
     65c:	mov	x4, #0x0                   	// #0
     660:	mov	x3, #0x0                   	// #0
     664:	mov	w1, #0x9c                  	// #156
     668:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     66c:	str	xzr, [x19, #200]
     670:	b	560 <_ZN11__sanitizer14ThreadRegistry12CreateThreadEmbjPv+0x48>
     674:	mov	x1, x23
     678:	blr	x2
     67c:	mov	x0, x25
     680:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     684:	mov	w0, w20
     688:	ldp	x21, x22, [sp, #16]
     68c:	ldp	x23, x24, [sp, #32]
     690:	ldp	x25, x30, [sp, #48]
     694:	ldp	x19, x20, [sp], #64
     698:	ret
     69c:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     6a0:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     6a4:	add	x2, x2, #0x0
     6a8:	add	x0, x0, #0x0
     6ac:	mov	x4, x3
     6b0:	mov	w1, #0x9d                  	// #157
     6b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     6b8:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     6bc:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     6c0:	add	x2, x2, #0x0
     6c4:	add	x0, x0, #0x0
     6c8:	mov	w1, #0x9e                  	// #158
     6cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     6d0:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     6d4:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     6d8:	add	x2, x2, #0x0
     6dc:	add	x0, x0, #0x0
     6e0:	mov	x4, #0x0                   	// #0
     6e4:	mov	w1, #0x9f                  	// #159
     6e8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     6ec:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     6f0:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     6f4:	add	x2, x2, #0x0
     6f8:	add	x0, x0, #0x0
     6fc:	mov	w1, #0xa3                  	// #163
     700:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     704:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     708:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     70c:	add	x0, x0, #0x0
     710:	ldr	x1, [x1]
     714:	ldr	x1, [x1]
     718:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     71c:	bl	0 <_ZN11__sanitizer3DieEv>

0000000000000720 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_>:
     720:	stp	x19, x20, [sp, #-48]!
     724:	mov	x20, x0
     728:	add	x0, x0, #0x18
     72c:	stp	x21, x22, [sp, #16]
     730:	mov	x22, x1
     734:	mov	x21, x2
     738:	str	x30, [sp, #32]
     73c:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
     740:	ldr	w3, [x20, #112]
     744:	cbz	w3, 78c <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x6c>
     748:	ldr	x4, [x20, #152]
     74c:	mov	w19, #0x0                   	// #0
     750:	ldr	x0, [x4, w19, uxtw #3]
     754:	mov	x1, x21
     758:	cbz	x0, 780 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x60>
     75c:	blr	x22
     760:	add	w19, w19, #0x1
     764:	ldr	w3, [x20, #112]
     768:	cmp	w3, w19
     76c:	b.ls	78c <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x6c>  // b.plast
     770:	ldr	x4, [x20, #152]
     774:	mov	x1, x21
     778:	ldr	x0, [x4, w19, uxtw #3]
     77c:	cbnz	x0, 75c <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x3c>
     780:	add	w19, w19, #0x1
     784:	cmp	w19, w3
     788:	b.cc	750 <_ZN11__sanitizer14ThreadRegistry30RunCallbackForEachThreadLockedEPFvPNS_17ThreadContextBaseEPvES3_+0x30>  // b.lo, b.ul, b.last
     78c:	ldp	x21, x22, [sp, #16]
     790:	ldr	x30, [sp, #32]
     794:	ldp	x19, x20, [sp], #48
     798:	ret
     79c:	nop

00000000000007a0 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_>:
     7a0:	stp	x19, x20, [sp, #-64]!
     7a4:	mov	w19, #0x0                   	// #0
     7a8:	stp	x21, x22, [sp, #16]
     7ac:	mov	x21, x0
     7b0:	mov	x22, x2
     7b4:	stp	x23, x24, [sp, #32]
     7b8:	add	x24, x0, #0x18
     7bc:	mov	x23, x1
     7c0:	mov	x0, x24
     7c4:	str	x30, [sp, #48]
     7c8:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     7cc:	ldr	w3, [x21, #112]
     7d0:	cbz	w3, 808 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x68>
     7d4:	nop
     7d8:	ldr	x0, [x21, #152]
     7dc:	mov	x1, x22
     7e0:	ldr	x20, [x0, w19, uxtw #3]
     7e4:	mov	x0, x20
     7e8:	cbz	x20, 7fc <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x5c>
     7ec:	blr	x23
     7f0:	tst	w0, #0xff
     7f4:	b.ne	82c <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x8c>  // b.any
     7f8:	ldr	w3, [x21, #112]
     7fc:	add	w19, w19, #0x1
     800:	cmp	w19, w3
     804:	b.cc	7d8 <_ZN11__sanitizer14ThreadRegistry10FindThreadEPFbPNS_17ThreadContextBaseEPvES3_+0x38>  // b.lo, b.ul, b.last
     808:	mov	x0, x24
     80c:	mov	w19, #0xffffffff            	// #-1
     810:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     814:	mov	w0, w19
     818:	ldp	x21, x22, [sp, #16]
     81c:	ldp	x23, x24, [sp, #32]
     820:	ldr	x30, [sp, #48]
     824:	ldp	x19, x20, [sp], #64
     828:	ret
     82c:	ldr	w19, [x20, #8]
     830:	mov	x0, x24
     834:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     838:	mov	w0, w19
     83c:	ldp	x21, x22, [sp, #16]
     840:	ldp	x23, x24, [sp, #32]
     844:	ldr	x30, [sp, #48]
     848:	ldp	x19, x20, [sp], #64
     84c:	ret

0000000000000850 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_>:
     850:	stp	x19, x20, [sp, #-48]!
     854:	mov	w19, #0x0                   	// #0
     858:	stp	x21, x22, [sp, #16]
     85c:	mov	x21, x0
     860:	mov	x22, x2
     864:	add	x0, x0, #0x18
     868:	stp	x23, x30, [sp, #32]
     86c:	mov	x23, x1
     870:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
     874:	ldr	w3, [x21, #112]
     878:	cbz	w3, 8b0 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x60>
     87c:	nop
     880:	ldr	x0, [x21, #152]
     884:	mov	x1, x22
     888:	ldr	x20, [x0, w19, uxtw #3]
     88c:	add	w19, w19, #0x1
     890:	mov	x0, x20
     894:	cbz	x20, 8a8 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x58>
     898:	blr	x23
     89c:	tst	w0, #0xff
     8a0:	b.ne	8b4 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x64>  // b.any
     8a4:	ldr	w3, [x21, #112]
     8a8:	cmp	w19, w3
     8ac:	b.cc	880 <_ZN11__sanitizer14ThreadRegistry23FindThreadContextLockedEPFbPNS_17ThreadContextBaseEPvES3_+0x30>  // b.lo, b.ul, b.last
     8b0:	mov	x20, #0x0                   	// #0
     8b4:	mov	x0, x20
     8b8:	ldp	x21, x22, [sp, #16]
     8bc:	ldp	x23, x30, [sp, #32]
     8c0:	ldp	x19, x20, [sp], #48
     8c4:	ret

00000000000008c8 <_ZN11__sanitizer14ThreadRegistry29FindThreadContextByOsIDLockedEy>:
     8c8:	stp	x19, x20, [sp, #-32]!
     8cc:	mov	x19, x0
     8d0:	mov	x20, x1
     8d4:	add	x0, x0, #0x18
     8d8:	str	x30, [sp, #16]
     8dc:	bl	0 <_ZN11__sanitizer13BlockingMutex11CheckLockedEv>
     8e0:	ldr	w1, [x19, #112]
     8e4:	cbz	w1, 92c <_ZN11__sanitizer14ThreadRegistry29FindThreadContextByOsIDLockedEy+0x64>
     8e8:	mov	x2, #0x0                   	// #0
     8ec:	ldr	x4, [x19, #152]
     8f0:	b	8fc <_ZN11__sanitizer14ThreadRegistry29FindThreadContextByOsIDLockedEy+0x34>
     8f4:	cmp	w1, w2
     8f8:	b.ls	92c <_ZN11__sanitizer14ThreadRegistry29FindThreadContextByOsIDLockedEy+0x64>  // b.plast
     8fc:	ldr	x0, [x4, x2, lsl #3]
     900:	add	x2, x2, #0x1
     904:	cbz	x0, 8f4 <_ZN11__sanitizer14ThreadRegistry29FindThreadContextByOsIDLockedEy+0x2c>
     908:	ldr	x3, [x0, #32]
     90c:	cmp	x20, x3
     910:	b.ne	8f4 <_ZN11__sanitizer14ThreadRegistry29FindThreadContextByOsIDLockedEy+0x2c>  // b.any
     914:	ldr	w3, [x0, #112]
     918:	tst	w3, #0xfffffffb
     91c:	b.eq	8f4 <_ZN11__sanitizer14ThreadRegistry29FindThreadContextByOsIDLockedEy+0x2c>  // b.none
     920:	ldr	x30, [sp, #16]
     924:	ldp	x19, x20, [sp], #32
     928:	ret
     92c:	mov	x0, #0x0                   	// #0
     930:	ldr	x30, [sp, #16]
     934:	ldp	x19, x20, [sp], #32
     938:	ret
     93c:	nop

0000000000000940 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc>:
     940:	stp	x19, x20, [sp, #-48]!
     944:	mov	x19, x0
     948:	mov	w20, w1
     94c:	stp	x21, x22, [sp, #16]
     950:	add	x22, x0, #0x18
     954:	mov	x21, x2
     958:	mov	x0, x22
     95c:	str	x30, [sp, #32]
     960:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     964:	ldr	w4, [x19, #112]
     968:	mov	w3, w20
     96c:	cmp	x4, w20, uxtw
     970:	b.ls	9bc <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0x7c>  // b.plast
     974:	ldr	x0, [x19, #152]
     978:	ldr	x19, [x0, x3, lsl #3]
     97c:	cbz	x19, 9d4 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0x94>
     980:	ldr	w4, [x19, #112]
     984:	cmp	x4, #0x2
     988:	b.ne	9f4 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0xb4>  // b.any
     98c:	strb	wzr, [x19, #48]
     990:	cbz	x21, 9a8 <_ZN11__sanitizer14ThreadRegistry13SetThreadNameEjPKc+0x68>
     994:	mov	x1, x21
     998:	add	x0, x19, #0x30
     99c:	mov	x2, #0x40                  	// #64
     9a0:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
     9a4:	strb	wzr, [x19, #111]
     9a8:	mov	x0, x22
     9ac:	ldp	x21, x22, [sp, #16]
     9b0:	ldr	x30, [sp, #32]
     9b4:	ldp	x19, x20, [sp], #48
     9b8:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     9bc:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     9c0:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     9c4:	add	x2, x2, #0x0
     9c8:	add	x0, x0, #0x0
     9cc:	mov	w1, #0xd7                  	// #215
     9d0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     9d4:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     9d8:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     9dc:	add	x2, x2, #0x0
     9e0:	add	x0, x0, #0x0
     9e4:	mov	x4, #0x0                   	// #0
     9e8:	mov	x3, #0x0                   	// #0
     9ec:	mov	w1, #0xd9                  	// #217
     9f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     9f4:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     9f8:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     9fc:	add	x2, x2, #0x0
     a00:	add	x0, x0, #0x0
     a04:	mov	x3, #0x2                   	// #2
     a08:	mov	w1, #0xda                  	// #218
     a0c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

0000000000000a10 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc>:
     a10:	stp	x19, x20, [sp, #-48]!
     a14:	mov	x19, x0
     a18:	mov	x20, x1
     a1c:	stp	x21, x22, [sp, #16]
     a20:	add	x22, x0, #0x18
     a24:	mov	x21, x2
     a28:	mov	x0, x22
     a2c:	str	x30, [sp, #32]
     a30:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     a34:	ldr	w4, [x19, #112]
     a38:	cbz	w4, a8c <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x7c>
     a3c:	mov	x0, #0x0                   	// #0
     a40:	ldr	x5, [x19, #152]
     a44:	b	a50 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x40>
     a48:	cmp	w4, w0
     a4c:	b.ls	a8c <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x7c>  // b.plast
     a50:	ldr	x19, [x5, x0, lsl #3]
     a54:	add	x0, x0, #0x1
     a58:	cbz	x19, a48 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x38>
     a5c:	ldr	x3, [x19, #40]
     a60:	cmp	x3, x20
     a64:	b.ne	a48 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x38>  // b.any
     a68:	ldr	w1, [x19, #112]
     a6c:	cbz	w1, a48 <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x38>
     a70:	strb	wzr, [x19, #48]
     a74:	cbz	x21, a8c <_ZN11__sanitizer14ThreadRegistry21SetThreadNameByUserIdEmPKc+0x7c>
     a78:	mov	x1, x21
     a7c:	add	x0, x19, #0x30
     a80:	mov	x2, #0x40                  	// #64
     a84:	bl	0 <_ZN11__sanitizer16internal_strncpyEPcPKcm>
     a88:	strb	wzr, [x19, #111]
     a8c:	mov	x0, x22
     a90:	ldp	x21, x22, [sp, #16]
     a94:	ldr	x30, [sp, #32]
     a98:	ldp	x19, x20, [sp], #48
     a9c:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>

0000000000000aa0 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv>:
     aa0:	stp	x19, x20, [sp, #-48]!
     aa4:	mov	x19, x0
     aa8:	mov	w20, w1
     aac:	stp	x21, x22, [sp, #16]
     ab0:	add	x21, x0, #0x18
     ab4:	mov	x22, x2
     ab8:	mov	x0, x21
     abc:	str	x30, [sp, #32]
     ac0:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     ac4:	ldr	w4, [x19, #112]
     ac8:	mov	w3, w20
     acc:	cmp	x4, w20, uxtw
     ad0:	b.ls	ba4 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x104>  // b.plast
     ad4:	ldr	x0, [x19, #152]
     ad8:	ldr	x20, [x0, x3, lsl #3]
     adc:	cbz	x20, bbc <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x11c>
     ae0:	ldr	w1, [x20, #112]
     ae4:	cbz	w1, b24 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x84>
     ae8:	ldr	x2, [x20]
     aec:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     af0:	add	x0, x0, #0x0
     af4:	ldr	x2, [x2, #48]
     af8:	cmp	x2, x0
     afc:	b.ne	b50 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0xb0>  // b.any
     b00:	cmp	w1, #0x3
     b04:	b.eq	b68 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0xc8>  // b.none
     b08:	mov	w0, #0x1                   	// #1
     b0c:	strb	w0, [x20, #116]
     b10:	mov	x0, x21
     b14:	ldp	x21, x22, [sp, #16]
     b18:	ldr	x30, [sp, #32]
     b1c:	ldp	x19, x20, [sp], #48
     b20:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     b24:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     b28:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     b2c:	add	x0, x0, #0x0
     b30:	ldr	x1, [x1]
     b34:	ldr	x1, [x1]
     b38:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     b3c:	mov	x0, x21
     b40:	ldp	x21, x22, [sp, #16]
     b44:	ldr	x30, [sp, #32]
     b48:	ldp	x19, x20, [sp], #48
     b4c:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     b50:	mov	x1, x22
     b54:	mov	x0, x20
     b58:	blr	x2
     b5c:	ldr	w1, [x20, #112]
     b60:	cmp	w1, #0x3
     b64:	b.ne	b08 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x68>  // b.any
     b68:	ldr	x1, [x20]
     b6c:	mov	w2, #0x4                   	// #4
     b70:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     b74:	add	x0, x0, #0x0
     b78:	ldr	x1, [x1]
     b7c:	str	xzr, [x20, #40]
     b80:	str	w2, [x20, #112]
     b84:	cmp	x1, x0
     b88:	b.ne	bdc <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x13c>  // b.any
     b8c:	ldr	w0, [x20, #8]
     b90:	cbz	w0, b10 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x70>
     b94:	mov	x1, x20
     b98:	mov	x0, x19
     b9c:	bl	0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     ba0:	b	b10 <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0x70>
     ba4:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     ba8:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     bac:	add	x2, x2, #0x0
     bb0:	add	x0, x0, #0x0
     bb4:	mov	w1, #0xed                  	// #237
     bb8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     bbc:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     bc0:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     bc4:	add	x2, x2, #0x0
     bc8:	add	x0, x0, #0x0
     bcc:	mov	x4, #0x0                   	// #0
     bd0:	mov	x3, #0x0                   	// #0
     bd4:	mov	w1, #0xef                  	// #239
     bd8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     bdc:	mov	x0, x20
     be0:	blr	x1
     be4:	b	b8c <_ZN11__sanitizer14ThreadRegistry12DetachThreadEjPv+0xec>

0000000000000be8 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv>:
     be8:	stp	x19, x20, [sp, #-64]!
     bec:	mov	x20, x0
     bf0:	stp	x21, x22, [sp, #16]
     bf4:	add	x22, x0, #0x18
     bf8:	ubfiz	x21, x1, #3, #32
     bfc:	mov	x0, x22
     c00:	stp	x23, x24, [sp, #32]
     c04:	mov	w23, w1
     c08:	mov	x24, x2
     c0c:	str	x30, [sp, #48]
     c10:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     c14:	ldr	w4, [x20, #112]
     c18:	cmp	x23, x4
     c1c:	b.cs	c60 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x78>  // b.hs, b.nlast
     c20:	ldr	x0, [x20, #152]
     c24:	ldr	x19, [x0, x21]
     c28:	cbz	x19, ce0 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xf8>
     c2c:	ldr	w0, [x19, #112]
     c30:	cbz	w0, d4c <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x164>
     c34:	ldr	w0, [x19, #136]
     c38:	dmb	ish
     c3c:	cbnz	w0, c7c <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x94>
     c40:	mov	x0, x22
     c44:	bl	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     c48:	bl	0 <_ZN11__sanitizer20internal_sched_yieldEv>
     c4c:	mov	x0, x22
     c50:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     c54:	ldr	w4, [x20, #112]
     c58:	cmp	x23, x4
     c5c:	b.cc	c20 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x38>  // b.lo, b.ul, b.last
     c60:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     c64:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     c68:	mov	x3, x23
     c6c:	add	x2, x2, #0x0
     c70:	add	x0, x0, #0x0
     c74:	mov	w1, #0x102                 	// #258
     c78:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     c7c:	ldrb	w0, [x19, #116]
     c80:	cbnz	w0, d10 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x128>
     c84:	ldr	w4, [x19, #112]
     c88:	cmp	x4, #0x3
     c8c:	b.ne	d30 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x148>  // b.any
     c90:	ldr	x1, [x19]
     c94:	mov	w2, #0x4                   	// #4
     c98:	str	w2, [x19, #112]
     c9c:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     ca0:	str	xzr, [x19, #40]
     ca4:	add	x0, x0, #0x0
     ca8:	ldr	x2, [x1, #8]
     cac:	cmp	x2, x0
     cb0:	b.ne	d00 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0x118>  // b.any
     cb4:	ldr	w0, [x19, #8]
     cb8:	cbz	w0, cc8 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xe0>
     cbc:	mov	x1, x19
     cc0:	mov	x0, x20
     cc4:	bl	0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     cc8:	mov	x0, x22
     ccc:	ldp	x21, x22, [sp, #16]
     cd0:	ldp	x23, x24, [sp, #32]
     cd4:	ldr	x30, [sp, #48]
     cd8:	ldp	x19, x20, [sp], #64
     cdc:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     ce0:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     ce4:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     ce8:	add	x2, x2, #0x0
     cec:	add	x0, x0, #0x0
     cf0:	mov	x4, #0x0                   	// #0
     cf4:	mov	x3, #0x0                   	// #0
     cf8:	mov	w1, #0x104                 	// #260
     cfc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d00:	mov	x1, x24
     d04:	mov	x0, x19
     d08:	blr	x2
     d0c:	b	cb4 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xcc>
     d10:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     d14:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     d18:	add	x2, x2, #0x0
     d1c:	add	x0, x0, #0x0
     d20:	mov	x4, #0x1                   	// #1
     d24:	mov	x3, #0x0                   	// #0
     d28:	mov	w1, #0x38                  	// #56
     d2c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d30:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     d34:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     d38:	add	x2, x2, #0x0
     d3c:	add	x0, x0, #0x0
     d40:	mov	x3, #0x3                   	// #3
     d44:	mov	w1, #0x39                  	// #57
     d48:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     d4c:	adrp	x1, 0 <_ZN11__sanitizer17SanitizerToolNameE>
     d50:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     d54:	add	x0, x0, #0x0
     d58:	ldr	x1, [x1]
     d5c:	ldr	x1, [x1]
     d60:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
     d64:	b	cc8 <_ZN11__sanitizer14ThreadRegistry10JoinThreadEjPv+0xe0>

0000000000000d68 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj>:
     d68:	stp	x19, x20, [sp, #-48]!
     d6c:	mov	x19, x0
     d70:	mov	w20, w1
     d74:	stp	x21, x22, [sp, #16]
     d78:	add	x22, x0, #0x18
     d7c:	mov	x0, x22
     d80:	str	x30, [sp, #32]
     d84:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     d88:	ldr	x0, [x19, #128]
     d8c:	cbz	x0, eac <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x144>
     d90:	ldr	w4, [x19, #112]
     d94:	sub	x0, x0, #0x1
     d98:	str	x0, [x19, #128]
     d9c:	mov	w3, w20
     da0:	cmp	x4, w20, uxtw
     da4:	b.ls	ecc <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x164>  // b.plast
     da8:	ldr	x0, [x19, #152]
     dac:	ldr	x20, [x0, x3, lsl #3]
     db0:	cbz	x20, ee4 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x17c>
     db4:	ldr	w0, [x20, #112]
     db8:	cmp	w0, #0x2
     dbc:	b.eq	e18 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0xb0>  // b.none
     dc0:	cmp	w0, #0x1
     dc4:	mov	w21, w0
     dc8:	b.ne	f24 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x1bc>  // b.any
     dcc:	ldr	x1, [x20]
     dd0:	mov	w0, #0x3                   	// #3
     dd4:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     dd8:	add	x2, x2, #0x0
     ddc:	ldr	x1, [x1, #16]
     de0:	str	w0, [x20, #112]
     de4:	cmp	x1, x2
     de8:	b.eq	e48 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0xe0>  // b.none
     dec:	mov	x0, x20
     df0:	blr	x1
     df4:	cbnz	w21, f94 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x22c>
     df8:	dmb	ish
     dfc:	mov	w0, #0x1                   	// #1
     e00:	str	w0, [x20, #136]
     e04:	mov	x0, x22
     e08:	ldp	x21, x22, [sp, #16]
     e0c:	ldr	x30, [sp, #32]
     e10:	ldp	x19, x20, [sp], #48
     e14:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     e18:	ldr	x1, [x19, #144]
     e1c:	cbz	x1, f50 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x1e8>
     e20:	ldrb	w21, [x20, #116]
     e24:	sub	x1, x1, #0x1
     e28:	str	x1, [x19, #144]
     e2c:	cbz	w21, f70 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x208>
     e30:	ldr	x1, [x20]
     e34:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     e38:	add	x2, x2, #0x0
     e3c:	ldr	x1, [x1, #16]
     e40:	cmp	x1, x2
     e44:	b.ne	dec <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x84>  // b.any
     e48:	sub	w0, w0, #0x2
     e4c:	cmp	w0, #0x1
     e50:	b.hi	f04 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x19c>  // b.pmore
     e54:	ldr	x1, [x20]
     e58:	mov	w2, #0x4                   	// #4
     e5c:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     e60:	add	x0, x0, #0x0
     e64:	ldr	x1, [x1]
     e68:	str	xzr, [x20, #40]
     e6c:	str	w2, [x20, #112]
     e70:	cmp	x1, x0
     e74:	b.ne	f44 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x1dc>  // b.any
     e78:	ldr	w0, [x20, #8]
     e7c:	cbz	w0, df8 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x90>
     e80:	mov	x0, x19
     e84:	mov	x1, x20
     e88:	bl	0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     e8c:	dmb	ish
     e90:	mov	w0, #0x1                   	// #1
     e94:	str	w0, [x20, #136]
     e98:	mov	x0, x22
     e9c:	ldp	x21, x22, [sp, #16]
     ea0:	ldr	x30, [sp, #32]
     ea4:	ldp	x19, x20, [sp], #48
     ea8:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
     eac:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     eb0:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     eb4:	add	x2, x2, #0x0
     eb8:	add	x0, x0, #0x0
     ebc:	mov	x4, #0x0                   	// #0
     ec0:	mov	x3, #0x0                   	// #0
     ec4:	mov	w1, #0x11a                 	// #282
     ec8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ecc:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     ed0:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     ed4:	add	x2, x2, #0x0
     ed8:	add	x0, x0, #0x0
     edc:	mov	w1, #0x11c                 	// #284
     ee0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     ee4:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     ee8:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     eec:	add	x2, x2, #0x0
     ef0:	add	x0, x0, #0x0
     ef4:	mov	x4, #0x0                   	// #0
     ef8:	mov	x3, #0x0                   	// #0
     efc:	mov	w1, #0x11e                 	// #286
     f00:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     f04:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     f08:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     f0c:	add	x2, x2, #0x0
     f10:	add	x0, x0, #0x0
     f14:	mov	x4, #0x0                   	// #0
     f18:	mov	x3, #0x0                   	// #0
     f1c:	mov	w1, #0x27                  	// #39
     f20:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     f24:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     f28:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     f2c:	mov	x3, x21
     f30:	add	x2, x2, #0x0
     f34:	add	x0, x0, #0x0
     f38:	mov	x4, #0x1                   	// #1
     f3c:	mov	w1, #0x125                 	// #293
     f40:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     f44:	mov	x0, x20
     f48:	blr	x1
     f4c:	b	e78 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x110>
     f50:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     f54:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     f58:	add	x2, x2, #0x0
     f5c:	add	x0, x0, #0x0
     f60:	mov	x4, #0x0                   	// #0
     f64:	mov	x3, #0x0                   	// #0
     f68:	mov	w1, #0x121                 	// #289
     f6c:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
     f70:	ldr	x1, [x20]
     f74:	mov	w0, #0x3                   	// #3
     f78:	ldr	x1, [x1, #16]
     f7c:	str	w0, [x20, #112]
     f80:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
     f84:	add	x0, x0, #0x0
     f88:	cmp	x1, x0
     f8c:	b.eq	df8 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x90>  // b.none
     f90:	b	dec <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0x84>
     f94:	ldr	w0, [x20, #112]
     f98:	b	e48 <_ZN11__sanitizer14ThreadRegistry12FinishThreadEj+0xe0>
     f9c:	nop

0000000000000fa0 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv>:
     fa0:	stp	x19, x20, [sp, #-64]!
     fa4:	mov	x19, x0
     fa8:	mov	w20, w1
     fac:	stp	x23, x24, [sp, #32]
     fb0:	add	x24, x0, #0x18
     fb4:	and	w23, w3, #0xff
     fb8:	mov	x0, x24
     fbc:	stp	x21, x22, [sp, #16]
     fc0:	mov	x22, x4
     fc4:	mov	x21, x2
     fc8:	str	x30, [sp, #48]
     fcc:	bl	0 <_ZN11__sanitizer13BlockingMutex4LockEv>
     fd0:	ldr	x0, [x19, #144]
     fd4:	mov	w3, w20
     fd8:	ldr	w4, [x19, #112]
     fdc:	add	x0, x0, #0x1
     fe0:	str	x0, [x19, #144]
     fe4:	cmp	x4, w20, uxtw
     fe8:	b.ls	1064 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0xc4>  // b.plast
     fec:	ldr	x0, [x19, #152]
     ff0:	ldr	x0, [x0, x3, lsl #3]
     ff4:	cbz	x0, 107c <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0xdc>
     ff8:	ldr	w4, [x0, #112]
     ffc:	cmp	x4, #0x1
    1000:	b.ne	109c <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0xfc>  // b.any
    1004:	ldr	x2, [x0]
    1008:	mov	w3, #0x2                   	// #2
    100c:	adrp	x1, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
    1010:	add	x1, x1, #0x0
    1014:	ldr	x2, [x2, #24]
    1018:	str	x21, [x0, #32]
    101c:	str	w3, [x0, #112]
    1020:	strb	w23, [x0, #117]
    1024:	cmp	x2, x1
    1028:	b.ne	1044 <_ZN11__sanitizer14ThreadRegistry11StartThreadEjybPv+0xa4>  // b.any
    102c:	mov	x0, x24
    1030:	ldp	x21, x22, [sp, #16]
    1034:	ldp	x23, x24, [sp, #32]
    1038:	ldr	x30, [sp, #48]
    103c:	ldp	x19, x20, [sp], #64
    1040:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
    1044:	mov	x1, x22
    1048:	blr	x2
    104c:	mov	x0, x24
    1050:	ldp	x21, x22, [sp, #16]
    1054:	ldp	x23, x24, [sp, #32]
    1058:	ldr	x30, [sp, #48]
    105c:	ldp	x19, x20, [sp], #64
    1060:	b	0 <_ZN11__sanitizer13BlockingMutex6UnlockEv>
    1064:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
    1068:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
    106c:	add	x2, x2, #0x0
    1070:	add	x0, x0, #0x0
    1074:	mov	w1, #0x134                 	// #308
    1078:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    107c:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
    1080:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
    1084:	add	x2, x2, #0x0
    1088:	add	x0, x0, #0x0
    108c:	mov	x4, #0x0                   	// #0
    1090:	mov	x3, #0x0                   	// #0
    1094:	mov	w1, #0x136                 	// #310
    1098:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
    109c:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
    10a0:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
    10a4:	add	x2, x2, #0x0
    10a8:	add	x0, x0, #0x0
    10ac:	mov	x3, #0x1                   	// #1
    10b0:	mov	w1, #0x137                 	// #311
    10b4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000010b8 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE>:
    10b8:	stp	x19, x20, [sp, #-32]!
    10bc:	mov	x19, x0
    10c0:	ldr	w0, [x1, #8]
    10c4:	str	x30, [sp, #16]
    10c8:	cbz	w0, 117c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xc4>
    10cc:	ldr	x0, [x19, #160]
    10d0:	cbz	x0, 1188 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xd0>
    10d4:	str	xzr, [x1, #128]
    10d8:	add	x2, x0, #0x1
    10dc:	ldr	x4, [x19, #176]
    10e0:	str	x1, [x4, #128]
    10e4:	str	x2, [x19, #160]
    10e8:	str	x1, [x19, #176]
    10ec:	ldr	w1, [x19, #12]
    10f0:	cmp	x2, x1
    10f4:	b.ls	117c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xc4>  // b.plast
    10f8:	ldr	x20, [x19, #168]
    10fc:	add	x2, x19, #0xa0
    1100:	ldr	x1, [x20, #128]
    1104:	str	x1, [x2, #8]
    1108:	cbz	x1, 11c8 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x110>
    110c:	ldr	w3, [x20, #112]
    1110:	str	x0, [x19, #160]
    1114:	cmp	x3, #0x4
    1118:	b.ne	11dc <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x124>  // b.any
    111c:	strb	wzr, [x20, #48]
    1120:	str	wzr, [x20, #112]
    1124:	dmb	ish
    1128:	str	wzr, [x20, #136]
    112c:	ldr	x1, [x20]
    1130:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
    1134:	add	x0, x0, #0x0
    1138:	ldr	x1, [x1, #40]
    113c:	cmp	x1, x0
    1140:	b.ne	11d0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x118>  // b.any
    1144:	ldr	w0, [x20, #24]
    1148:	add	w0, w0, #0x1
    114c:	str	w0, [x20, #24]
    1150:	ldr	w1, [x19, #16]
    1154:	cmp	w1, #0x0
    1158:	ccmp	w0, w1, #0x0, ne  // ne = any
    115c:	b.cs	117c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xc4>  // b.hs, b.nlast
    1160:	ldr	x0, [x19, #184]
    1164:	cbnz	x0, 11a4 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0xec>
    1168:	dup	v0.2d, x20
    116c:	str	xzr, [x20, #128]
    1170:	mov	x0, #0x1                   	// #1
    1174:	str	x0, [x19, #184]
    1178:	str	q0, [x19, #192]
    117c:	ldr	x30, [sp, #16]
    1180:	ldp	x19, x20, [sp], #32
    1184:	ret
    1188:	dup	v0.2d, x1
    118c:	str	xzr, [x1, #128]
    1190:	mov	x1, #0x1                   	// #1
    1194:	mov	x2, x1
    1198:	str	x1, [x19, #160]
    119c:	stur	q0, [x19, #168]
    11a0:	b	10ec <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x34>
    11a4:	str	xzr, [x20, #128]
    11a8:	add	x0, x0, #0x1
    11ac:	ldr	x30, [sp, #16]
    11b0:	ldr	x2, [x19, #200]
    11b4:	str	x20, [x2, #128]
    11b8:	str	x0, [x19, #184]
    11bc:	str	x20, [x19, #200]
    11c0:	ldp	x19, x20, [sp], #32
    11c4:	ret
    11c8:	str	xzr, [x2, #16]
    11cc:	b	110c <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x54>
    11d0:	mov	x0, x20
    11d4:	blr	x1
    11d8:	b	1144 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE+0x8c>
    11dc:	adrp	x2, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
    11e0:	adrp	x0, 0 <_ZN11__sanitizer14ThreadRegistry14QuarantinePushEPNS_17ThreadContextBaseE.part.0>
    11e4:	add	x2, x2, #0x0
    11e8:	add	x0, x0, #0x0
    11ec:	mov	x4, #0x4                   	// #4
    11f0:	mov	w1, #0x143                 	// #323
    11f4:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

00000000000011f8 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv>:
    11f8:	ldr	x2, [x0, #184]
    11fc:	mov	x1, x0
    1200:	mov	x0, #0x0                   	// #0
    1204:	cbz	x2, 1220 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv+0x28>
    1208:	ldr	x0, [x1, #192]
    120c:	ldr	x3, [x0, #128]
    1210:	str	x3, [x1, #192]
    1214:	cbz	x3, 1224 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv+0x2c>
    1218:	sub	x2, x2, #0x1
    121c:	str	x2, [x1, #184]
    1220:	ret
    1224:	sub	x2, x2, #0x1
    1228:	str	x2, [x1, #184]
    122c:	str	xzr, [x1, #200]
    1230:	b	1220 <_ZN11__sanitizer14ThreadRegistry13QuarantinePopEv+0x28>

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase6OnDeadEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase6OnDeadEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase8OnJoinedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase8OnJoinedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase10OnFinishedEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase10OnFinishedEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase9OnStartedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase9OnStartedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase9OnCreatedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase9OnCreatedEPv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase7OnResetEv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase7OnResetEv>:
   0:	ret

Disassembly of section .text._ZN11__sanitizer17ThreadContextBase10OnDetachedEPv:

0000000000000000 <_ZN11__sanitizer17ThreadContextBase10OnDetachedEPv>:
   0:	ret

sanitizer_tls_get_addr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer12DTLS_DestroyEv>:
   0:	adrp	x0, 0 <_ZN11__sanitizer21common_flags_dont_useE>
   4:	ldr	x0, [x0]
   8:	ldrb	w0, [x0, #121]
   c:	cbz	w0, e4 <_ZN11__sanitizer12DTLS_DestroyEv+0xe4>
  10:	stp	x19, x20, [sp, #-48]!
  14:	mrs	x19, tpidr_el0
  18:	adrp	x20, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
  1c:	ldr	x20, [x20]
  20:	stp	x21, x22, [sp, #16]
  24:	adrp	x21, 0 <_ZN11__sanitizer17current_verbosityE>
  28:	add	x1, x19, x20
  2c:	ldr	x0, [x21]
  30:	ldr	x22, [x19, x20]
  34:	ldr	w0, [x0]
  38:	str	x30, [sp, #32]
  3c:	sxtw	x0, w0
  40:	cmp	x0, #0x1
  44:	b.hi	bc <_ZN11__sanitizer12DTLS_DestroyEv+0xbc>  // b.pmore
  48:	mov	x0, #0xffffffffffffffff    	// #-1
  4c:	str	x0, [x19, x20]
  50:	add	x19, x19, x20
  54:	cbz	x22, ac <_ZN11__sanitizer12DTLS_DestroyEv+0xac>
  58:	ldr	x21, [x21]
  5c:	ldr	x19, [x19, #8]
  60:	ldr	w0, [x21]
  64:	sxtw	x0, w0
  68:	cmp	x0, #0x1
  6c:	b.ls	84 <_ZN11__sanitizer12DTLS_DestroyEv+0x84>  // b.plast
  70:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
  74:	mov	x2, x22
  78:	add	x0, x0, #0x0
  7c:	mov	x1, x19
  80:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  84:	mov	x0, x19
  88:	lsl	x1, x22, #4
  8c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
  90:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
  94:	add	x0, x0, #0x0
  98:	ldxr	x1, [x0]
  9c:	sub	x1, x1, #0x1
  a0:	stlxr	w2, x1, [x0]
  a4:	cbnz	w2, 98 <_ZN11__sanitizer12DTLS_DestroyEv+0x98>
  a8:	dmb	ish
  ac:	ldp	x21, x22, [sp, #16]
  b0:	ldr	x30, [sp, #32]
  b4:	ldp	x19, x20, [sp], #48
  b8:	ret
  bc:	mov	x2, x22
  c0:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
  c4:	add	x0, x0, #0x0
  c8:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
  cc:	ldr	x22, [x19, x20]
  d0:	mov	x0, #0xffffffffffffffff    	// #-1
  d4:	str	x0, [x19, x20]
  d8:	add	x19, x19, x20
  dc:	cbnz	x22, 58 <_ZN11__sanitizer12DTLS_DestroyEv+0x58>
  e0:	b	ac <_ZN11__sanitizer12DTLS_DestroyEv+0xac>
  e4:	ret

00000000000000e8 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm>:
  e8:	adrp	x5, 0 <_ZN11__sanitizer21common_flags_dont_useE>
  ec:	stp	x19, x20, [sp, #-144]!
  f0:	mov	x20, x0
  f4:	ldr	x5, [x5]
  f8:	ldrb	w0, [x5, #121]
  fc:	str	x30, [sp, #80]
 100:	cbz	w0, 2ec <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x204>
 104:	adrp	x19, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 108:	ldr	x19, [x19]
 10c:	stp	x23, x24, [sp, #32]
 110:	mrs	x24, tpidr_el0
 114:	stp	x27, x28, [sp, #64]
 118:	mov	x28, x1
 11c:	add	x1, x24, x19
 120:	ldr	x5, [x24, x19]
 124:	cmn	x5, #0x1
 128:	b.eq	36c <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x284>  // b.none
 12c:	stp	x21, x22, [sp, #16]
 130:	mov	x23, x3
 134:	mov	x22, x2
 138:	ldr	x21, [x20]
 13c:	stp	x25, x26, [sp, #48]
 140:	add	x3, x21, #0x1
 144:	cmp	x5, x3
 148:	b.cc	224 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x13c>  // b.lo, b.ul, b.last
 14c:	ldr	x26, [x1, #8]
 150:	lsl	x21, x21, #4
 154:	ldr	x26, [x26, x21]
 158:	cbnz	x26, 2dc <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x1f4>
 15c:	adrp	x25, 0 <_ZN11__sanitizer17current_verbosityE>
 160:	ldr	x3, [x20, #8]
 164:	ldr	x0, [x25]
 168:	sub	x5, x28, x3
 16c:	str	x5, [sp, #136]
 170:	ldr	w0, [x0]
 174:	sxtw	x0, w0
 178:	cmp	x0, #0x1
 17c:	b.ls	1a8 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0xc0>  // b.plast
 180:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 184:	mov	x4, x28
 188:	ldr	x2, [x20]
 18c:	mov	x1, x20
 190:	ldr	x7, [x0]
 194:	add	x6, sp, #0x88
 198:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 19c:	add	x0, x0, #0x0
 1a0:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1a4:	ldr	x5, [sp, #136]
 1a8:	add	x1, x24, x19
 1ac:	ldr	x0, [x1, #24]
 1b0:	cmp	x0, x5
 1b4:	b.eq	338 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x250>  // b.none
 1b8:	cmp	x23, x5
 1bc:	ccmp	x22, x5, #0x2, hi  // hi = pmore
 1c0:	b.ls	394 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x2ac>  // b.plast
 1c4:	and	x0, x5, #0xfff
 1c8:	cmp	x0, #0x10
 1cc:	ldr	x0, [x25]
 1d0:	b.eq	304 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x21c>  // b.none
 1d4:	ldr	w0, [x0]
 1d8:	sxtw	x0, w0
 1dc:	cmp	x0, #0x1
 1e0:	b.ls	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>  // b.plast
 1e4:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 1e8:	add	x0, x0, #0x0
 1ec:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 1f0:	ldr	x5, [sp, #136]
 1f4:	add	x19, x24, x19
 1f8:	ldp	x23, x24, [sp, #32]
 1fc:	ldr	x1, [x19, #8]
 200:	ldp	x27, x28, [sp, #64]
 204:	add	x0, x1, x21
 208:	str	x5, [x1, x21]
 20c:	ldp	x21, x22, [sp, #16]
 210:	str	x26, [x0, #8]
 214:	ldp	x25, x26, [sp, #48]
 218:	ldr	x30, [sp, #80]
 21c:	ldp	x19, x20, [sp], #144
 220:	ret
 224:	tst	x3, x21
 228:	b.eq	2fc <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x214>  // b.none
 22c:	clz	x1, x3
 230:	mov	w4, #0x3f                  	// #63
 234:	sub	w4, w4, w1
 238:	mov	x1, #0x1                   	// #1
 23c:	add	w27, w4, #0x1
 240:	lsl	x27, x1, x27
 244:	cmp	x3, x27
 248:	b.cs	478 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x390>  // b.hs, b.nlast
 24c:	lsl	x4, x1, x4
 250:	cmp	x3, x4
 254:	b.ls	494 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x3ac>  // b.plast
 258:	cmp	x27, #0x100
 25c:	mov	x4, #0x100                 	// #256
 260:	csel	x27, x27, x4, cs  // cs = hs, nlast
 264:	adrp	x1, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 268:	mov	w2, #0x0                   	// #0
 26c:	add	x1, x1, #0x0
 270:	lsl	x0, x27, #4
 274:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 278:	adrp	x4, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 27c:	mov	x26, x0
 280:	add	x0, x4, #0x0
 284:	ldxr	x2, [x0]
 288:	add	x1, x2, #0x1
 28c:	stlxr	w3, x1, [x0]
 290:	cbnz	w3, 284 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x19c>
 294:	adrp	x25, 0 <_ZN11__sanitizer17current_verbosityE>
 298:	dmb	ish
 29c:	ldr	x0, [x25]
 2a0:	ldr	w0, [x0]
 2a4:	sxtw	x0, w0
 2a8:	cmp	x0, #0x1
 2ac:	b.hi	378 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x290>  // b.pmore
 2b0:	mov	x0, #0xfffff               	// #1048575
 2b4:	cmp	x2, x0
 2b8:	b.hi	458 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x370>  // b.pmore
 2bc:	ldr	x3, [x24, x19]
 2c0:	add	x5, x24, x19
 2c4:	cbnz	x3, 3c0 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x2d8>
 2c8:	lsl	x21, x21, #4
 2cc:	str	x26, [x5, #8]
 2d0:	str	x27, [x24, x19]
 2d4:	ldr	x26, [x26, x21]
 2d8:	cbz	x26, 15c <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x74>
 2dc:	ldp	x21, x22, [sp, #16]
 2e0:	ldp	x23, x24, [sp, #32]
 2e4:	ldp	x25, x26, [sp, #48]
 2e8:	ldp	x27, x28, [sp, #64]
 2ec:	mov	x0, #0x0                   	// #0
 2f0:	ldr	x30, [sp, #80]
 2f4:	ldp	x19, x20, [sp], #144
 2f8:	ret
 2fc:	mov	x27, x3
 300:	b	258 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x170>
 304:	ldr	w0, [x0]
 308:	ldp	x26, x5, [x5, #-16]
 30c:	str	x5, [sp, #136]
 310:	sxtw	x0, w0
 314:	cmp	x0, #0x1
 318:	b.ls	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>  // b.plast
 31c:	mov	x1, x5
 320:	mov	x2, x26
 324:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 328:	add	x0, x0, #0x0
 32c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 330:	ldr	x5, [sp, #136]
 334:	b	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>
 338:	ldr	x0, [x25]
 33c:	ldr	x26, [x1, #16]
 340:	ldr	w0, [x0]
 344:	sxtw	x0, w0
 348:	cmp	x0, #0x1
 34c:	b.ls	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>  // b.plast
 350:	mov	x1, x5
 354:	mov	x2, x26
 358:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 35c:	add	x0, x0, #0x0
 360:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 364:	ldr	x5, [sp, #136]
 368:	b	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>
 36c:	ldp	x23, x24, [sp, #32]
 370:	ldp	x27, x28, [sp, #64]
 374:	b	2ec <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x204>
 378:	add	x1, x24, x19
 37c:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 380:	add	x0, x0, #0x0
 384:	str	x2, [sp, #96]
 388:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 38c:	ldr	x2, [sp, #96]
 390:	b	2b0 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x1c8>
 394:	ldr	x0, [x25]
 398:	ldr	w0, [x0]
 39c:	sxtw	x0, w0
 3a0:	cmp	x0, #0x1
 3a4:	b.ls	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>  // b.plast
 3a8:	mov	x1, x5
 3ac:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 3b0:	add	x0, x0, #0x0
 3b4:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 3b8:	ldr	x5, [sp, #136]
 3bc:	b	1f4 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x10c>
 3c0:	ldr	x6, [x5, #8]
 3c4:	lsl	x7, x3, #4
 3c8:	mov	x2, x7
 3cc:	mov	x0, x26
 3d0:	mov	x1, x6
 3d4:	stp	x6, x7, [sp, #96]
 3d8:	stp	x5, x3, [sp, #112]
 3dc:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3e0:	ldr	x0, [x25]
 3e4:	str	x27, [x24, x19]
 3e8:	ldr	x5, [sp, #112]
 3ec:	ldr	w0, [x0]
 3f0:	ldp	x6, x7, [sp, #96]
 3f4:	str	x26, [x5, #8]
 3f8:	sxtw	x0, w0
 3fc:	cmp	x0, #0x1
 400:	b.hi	438 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x350>  // b.pmore
 404:	mov	x1, x7
 408:	mov	x0, x6
 40c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 410:	adrp	x4, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 414:	add	x4, x4, #0x0
 418:	ldxr	x0, [x4]
 41c:	sub	x0, x0, #0x1
 420:	stlxr	w1, x0, [x4]
 424:	cbnz	w1, 418 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x330>
 428:	add	x0, x24, x19
 42c:	dmb	ish
 430:	ldr	x26, [x0, #8]
 434:	b	150 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x68>
 438:	ldr	x3, [sp, #120]
 43c:	mov	x1, x6
 440:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 444:	add	x0, x0, #0x0
 448:	mov	x2, x3
 44c:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 450:	ldp	x6, x7, [sp, #96]
 454:	b	404 <_ZN11__sanitizer20DTLS_on_tls_get_addrEPvS0_mm+0x31c>
 458:	mov	x3, x2
 45c:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 460:	adrp	x2, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 464:	add	x0, x0, #0x0
 468:	add	x2, x2, #0x0
 46c:	mov	x4, #0x100000              	// #1048576
 470:	mov	w1, #0x3c                  	// #60
 474:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 478:	adrp	x2, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 47c:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 480:	mov	x4, x27
 484:	add	x2, x2, #0x0
 488:	add	x0, x0, #0x0
 48c:	mov	w1, #0x17b                 	// #379
 490:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 494:	adrp	x2, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 498:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 49c:	add	x2, x2, #0x0
 4a0:	add	x0, x0, #0x0
 4a4:	mov	w1, #0x17c                 	// #380
 4a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 4ac:	nop

00000000000004b0 <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm>:
 4b0:	adrp	x3, 0 <_ZN11__sanitizer21common_flags_dont_useE>
 4b4:	stp	x19, x20, [sp, #-32]!
 4b8:	mov	x19, x0
 4bc:	ldr	x3, [x3]
 4c0:	ldrb	w0, [x3, #121]
 4c4:	str	x30, [sp, #16]
 4c8:	cbz	w0, 4fc <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm+0x4c>
 4cc:	adrp	x0, 0 <_ZN11__sanitizer17current_verbosityE>
 4d0:	mov	x20, x1
 4d4:	ldr	x0, [x0]
 4d8:	ldr	w0, [x0]
 4dc:	sxtw	x0, w0
 4e0:	cmp	x0, #0x1
 4e4:	b.hi	508 <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm+0x58>  // b.pmore
 4e8:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 4ec:	ldr	x0, [x0]
 4f0:	mrs	x1, tpidr_el0
 4f4:	add	x0, x1, x0
 4f8:	stp	x20, x19, [x0, #16]
 4fc:	ldr	x30, [sp, #16]
 500:	ldp	x19, x20, [sp], #32
 504:	ret
 508:	mov	x2, x1
 50c:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 510:	mov	x1, x19
 514:	add	x0, x0, #0x0
 518:	bl	0 <_ZN11__sanitizer6ReportEPKcz>
 51c:	b	4e8 <_ZN11__sanitizer21DTLS_on_libc_memalignEPvm+0x38>

0000000000000520 <_ZN11__sanitizer8DTLS_GetEv>:
 520:	adrp	x0, 0 <_ZN11__sanitizer12DTLS_DestroyEv>
 524:	ldr	x0, [x0]
 528:	mrs	x1, tpidr_el0
 52c:	add	x0, x1, x0
 530:	ret
 534:	nop

0000000000000538 <_ZN11__sanitizer17DTLSInDestructionEPNS_4DTLSE>:
 538:	ldr	x0, [x0]
 53c:	cmn	x0, #0x1
 540:	cset	w0, eq  // eq = none
 544:	ret

sanitizer_unwind_linux_libcdep.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>:
   0:	stp	x19, x20, [sp, #-32]!
   4:	mov	x19, x1
   8:	ldr	w4, [x1, #8]
   c:	ldr	x1, [x1]
  10:	stp	x21, x30, [sp, #16]
  14:	ldr	w3, [x1, #8]
  18:	cmp	x3, x4
  1c:	b.cs	94 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x94>  // b.hs, b.nlast
  20:	adrp	x21, 0 <_ZN11__sanitizer14PageSizeCachedE>
  24:	bl	0 <_Unwind_GetIP>
  28:	mov	x20, x0
  2c:	ldr	x21, [x21]
  30:	ldr	x0, [x21]
  34:	cbz	x0, 74 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x74>
  38:	cmp	x20, x0
  3c:	b.cc	84 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x84>  // b.lo, b.ul, b.last
  40:	ldr	x1, [x19]
  44:	ldr	w3, [x19, #8]
  48:	ldr	w0, [x1, #8]
  4c:	add	w2, w0, #0x1
  50:	str	w2, [x1, #8]
  54:	add	x0, x1, w0, uxtw #3
  58:	cmp	w2, w3
  5c:	str	x20, [x0, #16]
  60:	b.eq	84 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x84>  // b.none
  64:	mov	w0, #0x0                   	// #0
  68:	ldp	x21, x30, [sp, #16]
  6c:	ldp	x19, x20, [sp], #32
  70:	ret
  74:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
  78:	str	x0, [x21]
  7c:	cmp	x20, x0
  80:	b.cs	40 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv+0x40>  // b.hs, b.nlast
  84:	mov	w0, #0x4                   	// #4
  88:	ldp	x21, x30, [sp, #16]
  8c:	ldp	x19, x20, [sp], #32
  90:	ret
  94:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  98:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  9c:	add	x2, x2, #0x0
  a0:	add	x0, x0, #0x0
  a4:	mov	w1, #0x6d                  	// #109
  a8:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
  ac:	nop

00000000000000b0 <_ZN11__sanitizer12Unwind_GetIPEP15_Unwind_Context>:
  b0:	b	0 <_Unwind_GetIP>
  b4:	nop

00000000000000b8 <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj>:
  b8:	stp	x19, x20, [sp, #-48]!
  bc:	cmp	w2, #0x1
  c0:	str	x30, [sp, #16]
  c4:	b.ls	134 <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj+0x7c>  // b.plast
  c8:	mov	x19, x0
  cc:	add	w2, w2, #0x1
  d0:	cmp	w2, #0x100
  d4:	mov	x20, x1
  d8:	mov	w1, #0x100                 	// #256
  dc:	csel	w2, w2, w1, ls  // ls = plast
  e0:	str	wzr, [x19, #8]
  e4:	add	x1, sp, #0x20
  e8:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
  ec:	add	x0, x0, #0x0
  f0:	str	x19, [sp, #32]
  f4:	str	w2, [sp, #40]
  f8:	bl	0 <_Unwind_Backtrace>
  fc:	mov	x1, x20
 100:	mov	x0, x19
 104:	bl	0 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm>
 108:	mov	x1, x0
 10c:	cbnz	x0, 11c <_ZN11__sanitizer18BufferedStackTrace15SlowUnwindStackEmj+0x64>
 110:	ldr	w0, [x19, #8]
 114:	cmp	w0, #0x1
 118:	cset	x1, hi  // hi = pmore
 11c:	mov	x0, x19
 120:	bl	0 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm>
 124:	ldr	x30, [sp, #16]
 128:	str	x20, [x19, #16]
 12c:	ldp	x19, x20, [sp], #48
 130:	ret
 134:	mov	w3, w2
 138:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 13c:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 140:	add	x0, x0, #0x0
 144:	add	x2, x2, #0x0
 148:	mov	x4, #0x2                   	// #2
 14c:	mov	w1, #0x7a                  	// #122
 150:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 154:	nop

0000000000000158 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj>:
 158:	stp	x19, x20, [sp, #-112]!
 15c:	cmp	w3, #0x1
 160:	stp	x21, x22, [sp, #16]
 164:	stp	x23, x24, [sp, #32]
 168:	mov	w24, w3
 16c:	str	x30, [sp, #80]
 170:	b.ls	3cc <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x274>  // b.plast
 174:	adrp	x19, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 178:	mov	x21, x0
 17c:	mov	x20, x1
 180:	add	x1, x19, #0x0
 184:	ldr	x0, [x19]
 188:	cbz	x0, 414 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x2bc>
 18c:	ldr	x0, [x1, #8]
 190:	stp	x25, x26, [sp, #48]
 194:	mov	x23, x2
 198:	stp	x27, x28, [sp, #64]
 19c:	blr	x0
 1a0:	mov	x22, x0
 1a4:	cbz	x0, 3f4 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x29c>
 1a8:	adrp	x25, 0 <_ZN11__sanitizer14PageSizeCachedE>
 1ac:	ldr	x20, [x25]
 1b0:	ldr	x3, [x20]
 1b4:	cbz	x3, 35c <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x204>
 1b8:	sub	x0, x3, #0x1
 1bc:	tst	x0, x3
 1c0:	b.ne	494 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x33c>  // b.any
 1c4:	neg	x20, x3
 1c8:	mov	x27, #0x17ff                	// #6143
 1cc:	add	x3, x3, x27
 1d0:	mov	w2, #0x0                   	// #0
 1d4:	and	x20, x3, x20
 1d8:	adrp	x28, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 1dc:	mov	x0, x20
 1e0:	add	x1, x28, #0x0
 1e4:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 1e8:	mov	x26, x0
 1ec:	mov	x2, #0x0                   	// #0
 1f0:	mov	x1, #0x0                   	// #0
 1f4:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 1f8:	mov	x1, #0x0                   	// #0
 1fc:	mov	x0, #0x0                   	// #0
 200:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 204:	cmp	x20, x27
 208:	b.ls	36c <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x214>  // b.plast
 20c:	mov	x2, #0x1800                	// #6144
 210:	mov	w1, #0x0                   	// #0
 214:	mov	x0, x26
 218:	bl	0 <_ZN11__sanitizer15internal_memsetEPvim>
 21c:	ldr	x6, [x19]
 220:	add	x19, x19, #0x0
 224:	mov	x1, x23
 228:	mov	x5, x24
 22c:	mov	x3, x26
 230:	mov	x2, x22
 234:	mov	x4, #0x0                   	// #0
 238:	mov	x0, #0x0                   	// #0
 23c:	blr	x6
 240:	ldr	x1, [x19, #16]
 244:	mov	x19, x0
 248:	mov	x0, x22
 24c:	blr	x1
 250:	tbnz	x19, #63, 334 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x1dc>
 254:	cmp	x19, #0x100
 258:	b.gt	4b0 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x358>
 25c:	str	wzr, [x21, #8]
 260:	cmp	x19, #0x0
 264:	cbz	x19, 334 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x1dc>
 268:	add	x0, x19, x19, lsl #1
 26c:	add	x1, x19, #0x2
 270:	mov	x2, #0x8                   	// #8
 274:	mov	x3, #0x18                  	// #24
 278:	lsl	x0, x0, #3
 27c:	lsl	x1, x1, #3
 280:	sub	x0, x0, #0x10
 284:	csel	x1, x1, x3, gt
 288:	csel	x0, x0, x2, gt
 28c:	add	x2, x21, #0x10
 290:	add	x0, x26, x0
 294:	add	x1, x21, x1
 298:	cmp	x2, x0
 29c:	ccmp	x26, x1, #0x2, cc  // cc = lo, ul, last
 2a0:	ccmp	x19, #0x7, #0x4, cs  // cs = hs, nlast
 2a4:	b.le	470 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x318>
 2a8:	cmp	x19, #0x0
 2ac:	adrp	x3, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 2b0:	csinc	x0, x19, xzr, gt
 2b4:	mov	x2, x26
 2b8:	sub	x0, x0, #0x1
 2bc:	mov	x1, x21
 2c0:	ldr	q0, [x3]
 2c4:	lsr	x3, x0, #1
 2c8:	add	x3, x21, x3, lsl #4
 2cc:	nop
 2d0:	ld3	{v1.2d-v3.2d}, [x2], #48
 2d4:	add	v1.2d, v0.2d, v1.2d
 2d8:	str	q1, [x1, #16]!
 2dc:	cmp	x1, x3
 2e0:	b.ne	2d0 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x178>  // b.any
 2e4:	and	x0, x0, #0xfffffffffffffffe
 2e8:	add	x3, x0, #0x1
 2ec:	mov	w2, w0
 2f0:	add	x1, x0, x0, lsl #1
 2f4:	add	x2, x2, #0x2
 2f8:	cmp	x19, x3
 2fc:	add	w0, w0, #0x1
 300:	lsl	x1, x1, #3
 304:	ldr	x3, [x26, x1]
 308:	add	x3, x3, #0x2
 30c:	str	x3, [x21, x2, lsl #3]
 310:	b.le	328 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x1d0>
 314:	add	x1, x26, x1
 318:	add	x0, x21, w0, uxtw #3
 31c:	ldr	x1, [x1, #24]
 320:	add	x1, x1, #0x2
 324:	str	x1, [x0, #16]
 328:	cmp	x19, #0x0
 32c:	csinc	w19, w19, wzr, gt
 330:	str	w19, [x21, #8]
 334:	mov	x0, x26
 338:	mov	x1, x20
 33c:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 340:	ldp	x25, x26, [sp, #48]
 344:	ldp	x27, x28, [sp, #64]
 348:	ldp	x21, x22, [sp, #16]
 34c:	ldp	x23, x24, [sp, #32]
 350:	ldr	x30, [sp, #80]
 354:	ldp	x19, x20, [sp], #112
 358:	ret
 35c:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 360:	mov	x3, x0
 364:	str	x0, [x20]
 368:	b	1b8 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x60>
 36c:	ldr	x25, [x25]
 370:	ldr	x0, [x25]
 374:	cbz	x0, 4a4 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x34c>
 378:	sub	x1, x0, #0x1
 37c:	tst	x1, x0
 380:	b.ne	494 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x33c>  // b.any
 384:	mov	x1, #0x17ff                	// #6143
 388:	add	x25, x0, x1
 38c:	neg	x0, x0
 390:	add	x1, x28, #0x0
 394:	and	x25, x25, x0
 398:	mov	w2, #0x0                   	// #0
 39c:	mov	x0, x25
 3a0:	bl	0 <_ZN11__sanitizer9MmapOrDieEmPKcb>
 3a4:	mov	x2, #0x0                   	// #0
 3a8:	mov	x27, x0
 3ac:	mov	x1, x26
 3b0:	bl	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
 3b4:	mov	x1, x20
 3b8:	mov	x0, x26
 3bc:	mov	x20, x25
 3c0:	mov	x26, x27
 3c4:	bl	0 <_ZN11__sanitizer10UnmapOrDieEPvm>
 3c8:	b	20c <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0xb4>
 3cc:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 3d0:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 3d4:	mov	x3, x24
 3d8:	add	x2, x2, #0x0
 3dc:	add	x0, x0, #0x0
 3e0:	mov	x4, #0x2                   	// #2
 3e4:	mov	w1, #0x94                  	// #148
 3e8:	stp	x25, x26, [sp, #48]
 3ec:	stp	x27, x28, [sp, #64]
 3f0:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 3f4:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 3f8:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 3fc:	add	x2, x2, #0x0
 400:	add	x0, x0, #0x0
 404:	mov	x4, #0x0                   	// #0
 408:	mov	x3, #0x0                   	// #0
 40c:	mov	w1, #0x9b                  	// #155
 410:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>
 414:	add	w3, w3, #0x1
 418:	mov	w1, #0x100                 	// #256
 41c:	cmp	w3, #0x100
 420:	str	wzr, [x21, #8]
 424:	csel	w3, w3, w1, ls  // ls = plast
 428:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 42c:	add	x1, sp, #0x60
 430:	add	x0, x0, #0x0
 434:	str	x21, [sp, #96]
 438:	str	w3, [sp, #104]
 43c:	bl	0 <_Unwind_Backtrace>
 440:	mov	x1, x20
 444:	mov	x0, x21
 448:	bl	0 <_ZN11__sanitizer18BufferedStackTrace15LocatePcInTraceEm>
 44c:	mov	x1, x0
 450:	cbnz	x0, 460 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x308>
 454:	ldr	w0, [x21, #8]
 458:	cmp	w0, #0x1
 45c:	cset	x1, hi  // hi = pmore
 460:	mov	x0, x21
 464:	bl	0 <_ZN11__sanitizer18BufferedStackTrace14PopStackFramesEm>
 468:	str	x20, [x21, #16]
 46c:	b	348 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x1f0>
 470:	mov	x3, x26
 474:	mov	x0, #0x0                   	// #0
 478:	ldr	x1, [x3], #24
 47c:	add	x1, x1, #0x2
 480:	str	x1, [x2, x0, lsl #3]
 484:	add	x0, x0, #0x1
 488:	cmp	x19, x0
 48c:	b.gt	478 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x320>
 490:	b	328 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x1d0>
 494:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 498:	add	x0, x0, #0x0
 49c:	bl	0 <_ZN11__sanitizer8RawWriteEPKc>
 4a0:	bl	0 <_ZN11__sanitizer3DieEv>
 4a4:	bl	0 <_ZN11__sanitizer11GetPageSizeEv>
 4a8:	str	x0, [x25]
 4ac:	b	378 <_ZN11__sanitizer18BufferedStackTrace26SlowUnwindStackWithContextEmPvj+0x220>
 4b0:	adrp	x2, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 4b4:	adrp	x0, 0 <_ZN11__sanitizer12Unwind_TraceEP15_Unwind_ContextPv>
 4b8:	mov	x3, x19
 4bc:	add	x2, x2, #0x0
 4c0:	add	x0, x0, #0x0
 4c4:	mov	x4, #0x100                 	// #256
 4c8:	mov	w1, #0xa3                  	// #163
 4cc:	bl	0 <_ZN11__sanitizer11CheckFailedEPKciS1_yy>

sanitizer_unwind_win.o:     file format elf64-littleaarch64


sanitizer_win.o:     file format elf64-littleaarch64


interception_linux.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm>:
   0:	stp	x19, x20, [sp, #-48]!
   4:	mov	x19, x1
   8:	mov	x20, x0
   c:	mov	x1, x0
  10:	mov	x0, #0xffffffffffffffff    	// #-1
  14:	stp	x21, x22, [sp, #16]
  18:	mov	x22, x2
  1c:	mov	x21, x3
  20:	str	x30, [sp, #32]
  24:	bl	0 <dlsym>
  28:	str	x0, [x19]
  2c:	cbz	x0, 48 <_ZN14__interception22GetRealFunctionAddressEPKcPmmm+0x48>
  30:	cmp	x22, x21
  34:	cset	w0, eq  // eq = none
  38:	ldp	x21, x22, [sp, #16]
  3c:	ldr	x30, [sp, #32]
  40:	ldp	x19, x20, [sp], #48
  44:	ret
  48:	mov	x1, x20
  4c:	bl	0 <dlsym>
  50:	str	x0, [x19]
  54:	cmp	x22, x21
  58:	cset	w0, eq  // eq = none
  5c:	ldp	x21, x22, [sp, #16]
  60:	ldr	x30, [sp, #32]
  64:	ldp	x19, x20, [sp], #48
  68:	ret
  6c:	nop

0000000000000070 <_ZN14__interception14GetFuncAddrVerEPKcS1_>:
  70:	mov	x2, x1
  74:	mov	x1, x0
  78:	mov	x0, #0xffffffffffffffff    	// #-1
  7c:	b	0 <dlvsym>

interception_mac.o:     file format elf64-littleaarch64


interception_type_test.o:     file format elf64-littleaarch64


interception_win.o:     file format elf64-littleaarch64


atomic.o:     file format elf64-littleaarch64


bridge.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_internal_memcpy>:
   0:	b	0 <_ZN11__sanitizer15internal_memcpyEPvPKvm>
   4:	nop

0000000000000008 <__asan_internal_memset>:
   8:	b	0 <_ZN11__sanitizer15internal_memsetEPvim>
   c:	nop

0000000000000010 <__asan_internal_memcmp>:
  10:	b	0 <_ZN11__sanitizer15internal_memcmpEPKvS1_m>
  14:	nop

0000000000000018 <__asan_internal_strcmp>:
  18:	b	0 <_ZN11__sanitizer15internal_strcmpEPKcS1_>
  1c:	nop

0000000000000020 <__asan_internal_strncmp>:
  20:	b	0 <_ZN11__sanitizer16internal_strncmpEPKcS1_m>
  24:	nop

0000000000000028 <__asan_internal_strlen>:
  28:	b	0 <_ZN11__sanitizer15internal_strlenEPKc>
  2c:	nop

0000000000000030 <__asan_internal_strnlen>:
  30:	b	0 <_ZN11__sanitizer16internal_strnlenEPKcm>

cp-demangle.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <d_make_comp>:
       0:	sub	w5, w1, #0x1
       4:	mov	x4, x0
       8:	cmp	w5, #0x4f
       c:	b.ls	18 <d_make_comp+0x18>  // b.plast
      10:	mov	x0, #0x0                   	// #0
      14:	ret
      18:	adrp	x0, 0 <d_make_comp>
      1c:	add	x0, x0, #0x0
      20:	ldrb	w0, [x0, w5, uxtw]
      24:	adr	x5, 30 <d_make_comp+0x30>
      28:	add	x0, x5, w0, sxtb #2
      2c:	br	x0
      30:	cbz	x3, 10 <d_make_comp+0x10>
      34:	ldp	w0, w5, [x4, #40]
      38:	cmp	w0, w5
      3c:	b.ge	10 <d_make_comp+0x10>  // b.tcont
      40:	mov	w5, #0x18                  	// #24
      44:	add	w7, w0, #0x1
      48:	ldr	x6, [x4, #32]
      4c:	smull	x5, w0, w5
      50:	add	x0, x6, x5
      54:	str	wzr, [x0, #4]
      58:	str	w7, [x4, #40]
      5c:	str	w1, [x6, x5]
      60:	stp	x2, x3, [x0, #8]
      64:	ret
      68:	cbnz	x2, 34 <d_make_comp+0x34>
      6c:	mov	x0, #0x0                   	// #0
      70:	b	14 <d_make_comp+0x14>
      74:	cmp	x2, #0x0
      78:	ccmp	x3, #0x0, #0x4, ne  // ne = any
      7c:	b.ne	34 <d_make_comp+0x34>  // b.any
      80:	mov	x0, #0x0                   	// #0
      84:	b	14 <d_make_comp+0x14>

0000000000000088 <d_count_templates_scopes>:
      88:	cbz	x1, 168 <d_count_templates_scopes+0xe0>
      8c:	stp	x29, x30, [sp, #-32]!
      90:	mov	x29, sp
      94:	stp	x19, x20, [sp, #16]
      98:	mov	x20, x0
      9c:	mov	x19, x1
      a0:	adrp	x0, 0 <d_make_comp>
      a4:	add	x0, x0, #0x0
      a8:	ldr	w1, [x19]
      ac:	sub	w1, w1, #0x1
      b0:	cmp	w1, #0x4f
      b4:	b.ls	c4 <d_count_templates_scopes+0x3c>  // b.plast
      b8:	ldp	x19, x20, [sp, #16]
      bc:	ldp	x29, x30, [sp], #32
      c0:	ret
      c4:	ldrb	w1, [x0, w1, uxtw]
      c8:	adr	x2, d4 <d_count_templates_scopes+0x4c>
      cc:	add	x1, x2, w1, sxtb #2
      d0:	br	x1
      d4:	ldr	x0, [x19, #8]
      d8:	ldr	w0, [x0]
      dc:	cmp	w0, #0x5
      e0:	b.ne	f0 <d_count_templates_scopes+0x68>  // b.any
      e4:	ldr	w0, [x20, #348]
      e8:	add	w0, w0, #0x1
      ec:	str	w0, [x20, #348]
      f0:	ldr	w0, [x20, #308]
      f4:	cmp	w0, #0x800
      f8:	b.gt	b8 <d_count_templates_scopes+0x30>
      fc:	ldr	x1, [x19, #8]
     100:	add	w0, w0, #0x1
     104:	str	w0, [x20, #308]
     108:	mov	x0, x20
     10c:	bl	88 <d_count_templates_scopes>
     110:	ldr	x1, [x19, #16]
     114:	mov	x0, x20
     118:	bl	88 <d_count_templates_scopes>
     11c:	ldr	w0, [x20, #308]
     120:	sub	w0, w0, #0x1
     124:	str	w0, [x20, #308]
     128:	ldp	x19, x20, [sp, #16]
     12c:	ldp	x29, x30, [sp], #32
     130:	ret
     134:	ldr	x19, [x19, #8]
     138:	cbnz	x19, a8 <d_count_templates_scopes+0x20>
     13c:	b	b8 <d_count_templates_scopes+0x30>
     140:	ldr	x19, [x19, #16]
     144:	cbnz	x19, a8 <d_count_templates_scopes+0x20>
     148:	b	b8 <d_count_templates_scopes+0x30>
     14c:	ldr	w0, [x20, #364]
     150:	add	w0, w0, #0x1
     154:	str	w0, [x20, #364]
     158:	ldr	w0, [x20, #308]
     15c:	cmp	w0, #0x800
     160:	b.gt	b8 <d_count_templates_scopes+0x30>
     164:	b	fc <d_count_templates_scopes+0x74>
     168:	ret
     16c:	nop

0000000000000170 <d_append_buffer>:
     170:	cbz	x2, 238 <d_append_buffer+0xc8>
     174:	stp	x29, x30, [sp, #-64]!
     178:	mov	x29, sp
     17c:	stp	x19, x20, [sp, #16]
     180:	mov	x20, x1
     184:	mov	x19, x0
     188:	stp	x21, x22, [sp, #32]
     18c:	add	x22, x1, x2
     190:	ldr	x1, [x0, #256]
     194:	str	x23, [sp, #48]
     198:	mov	x23, #0x1                   	// #1
     19c:	b	1f4 <d_append_buffer+0x84>
     1a0:	ldp	x3, x2, [x19, #272]
     1a4:	strb	wzr, [x19, #255]
     1a8:	add	x20, x20, #0x1
     1ac:	blr	x3
     1b0:	strb	w21, [x19]
     1b4:	ldr	x0, [x19, #320]
     1b8:	str	x23, [x19, #256]
     1bc:	strb	w21, [x19, #264]
     1c0:	cmp	x22, x20
     1c4:	add	x0, x0, #0x1
     1c8:	str	x0, [x19, #320]
     1cc:	mov	x0, #0x1                   	// #1
     1d0:	b.eq	224 <d_append_buffer+0xb4>  // b.none
     1d4:	ldrb	w21, [x20]
     1d8:	add	x1, x0, #0x1
     1dc:	str	x1, [x19, #256]
     1e0:	add	x20, x20, #0x1
     1e4:	strb	w21, [x19, x0]
     1e8:	cmp	x20, x22
     1ec:	strb	w21, [x19, #264]
     1f0:	b.eq	224 <d_append_buffer+0xb4>  // b.none
     1f4:	ldrb	w21, [x20]
     1f8:	mov	x0, x19
     1fc:	cmp	x1, #0xff
     200:	b.eq	1a0 <d_append_buffer+0x30>  // b.none
     204:	mov	x0, x1
     208:	add	x20, x20, #0x1
     20c:	add	x1, x0, #0x1
     210:	str	x1, [x19, #256]
     214:	cmp	x20, x22
     218:	strb	w21, [x19, x0]
     21c:	strb	w21, [x19, #264]
     220:	b.ne	1f4 <d_append_buffer+0x84>  // b.any
     224:	ldp	x19, x20, [sp, #16]
     228:	ldp	x21, x22, [sp, #32]
     22c:	ldr	x23, [sp, #48]
     230:	ldp	x29, x30, [sp], #64
     234:	ret
     238:	ret
     23c:	nop

0000000000000240 <d_index_template_argument.part.0>:
     240:	cbnz	x0, 25c <d_index_template_argument.part.0+0x1c>
     244:	b	268 <d_index_template_argument.part.0+0x28>
     248:	cmp	w1, #0x0
     24c:	b.le	270 <d_index_template_argument.part.0+0x30>
     250:	ldr	x0, [x0, #16]
     254:	sub	w1, w1, #0x1
     258:	cbz	x0, 26c <d_index_template_argument.part.0+0x2c>
     25c:	ldr	w2, [x0]
     260:	cmp	w2, #0x2f
     264:	b.eq	248 <d_index_template_argument.part.0+0x8>  // b.none
     268:	mov	x0, #0x0                   	// #0
     26c:	ret
     270:	b.ne	268 <d_index_template_argument.part.0+0x28>  // b.any
     274:	ldr	x0, [x0, #8]
     278:	ret
     27c:	nop

0000000000000280 <d_growable_string_callback_adapter>:
     280:	stp	x29, x30, [sp, #-48]!
     284:	mov	x29, sp
     288:	stp	x19, x20, [sp, #16]
     28c:	mov	x19, x2
     290:	add	x2, x1, #0x1
     294:	stp	x21, x22, [sp, #32]
     298:	mov	x21, x1
     29c:	mov	x22, x0
     2a0:	ldp	x1, x20, [x19, #8]
     2a4:	add	x1, x2, x1
     2a8:	ldr	w2, [x19, #24]
     2ac:	cmp	x1, x20
     2b0:	b.hi	2f4 <d_growable_string_callback_adapter+0x74>  // b.pmore
     2b4:	cbnz	w2, 2e4 <d_growable_string_callback_adapter+0x64>
     2b8:	ldp	x3, x0, [x19]
     2bc:	mov	x1, x22
     2c0:	mov	x2, x21
     2c4:	add	x0, x3, x0
     2c8:	bl	0 <__asan_internal_memcpy>
     2cc:	ldp	x0, x1, [x19]
     2d0:	add	x0, x0, x21
     2d4:	strb	wzr, [x0, x1]
     2d8:	ldr	x1, [x19, #8]
     2dc:	add	x1, x1, x21
     2e0:	str	x1, [x19, #8]
     2e4:	ldp	x19, x20, [sp, #16]
     2e8:	ldp	x21, x22, [sp, #32]
     2ec:	ldp	x29, x30, [sp], #48
     2f0:	ret
     2f4:	cbnz	w2, 2e4 <d_growable_string_callback_adapter+0x64>
     2f8:	cbz	x20, 330 <d_growable_string_callback_adapter+0xb0>
     2fc:	nop
     300:	lsl	x20, x20, #1
     304:	cmp	x1, x20
     308:	b.hi	300 <d_growable_string_callback_adapter+0x80>  // b.pmore
     30c:	ldr	x0, [x19]
     310:	mov	x1, x20
     314:	bl	0 <realloc>
     318:	cbz	x0, 340 <d_growable_string_callback_adapter+0xc0>
     31c:	ldr	w2, [x19, #24]
     320:	str	x0, [x19]
     324:	str	x20, [x19, #16]
     328:	cbz	w2, 2b8 <d_growable_string_callback_adapter+0x38>
     32c:	b	2e4 <d_growable_string_callback_adapter+0x64>
     330:	cmp	x1, #0x2
     334:	mov	x20, #0x2                   	// #2
     338:	b.hi	300 <d_growable_string_callback_adapter+0x80>  // b.pmore
     33c:	b	30c <d_growable_string_callback_adapter+0x8c>
     340:	ldr	x0, [x19]
     344:	bl	0 <free>
     348:	str	xzr, [x19]
     34c:	mov	w0, #0x1                   	// #1
     350:	stp	xzr, xzr, [x19, #8]
     354:	str	w0, [x19, #24]
     358:	b	2e4 <d_growable_string_callback_adapter+0x64>
     35c:	nop

0000000000000360 <d_find_pack>:
     360:	cbz	x1, 47c <d_find_pack+0x11c>
     364:	stp	x29, x30, [sp, #-48]!
     368:	mov	x29, sp
     36c:	stp	x21, x22, [sp, #32]
     370:	mov	x21, #0x8001                	// #32769
     374:	movk	x21, #0x410, lsl #16
     378:	movk	x21, #0xc600, lsl #32
     37c:	stp	x19, x20, [sp, #16]
     380:	mov	x20, x0
     384:	mov	x19, x1
     388:	mov	x22, #0x1                   	// #1
     38c:	movk	x21, #0x19, lsl #48
     390:	ldr	w2, [x19]
     394:	cmp	w2, #0x8
     398:	b.eq	3b0 <d_find_pack+0x50>  // b.none
     39c:	b.hi	41c <d_find_pack+0xbc>  // b.pmore
     3a0:	cmp	w2, #0x6
     3a4:	b.eq	3b8 <d_find_pack+0x58>  // b.none
     3a8:	cmp	w2, #0x7
     3ac:	b.ne	3cc <d_find_pack+0x6c>  // b.any
     3b0:	ldr	x19, [x19, #16]
     3b4:	cbnz	x19, 390 <d_find_pack+0x30>
     3b8:	mov	x0, #0x0                   	// #0
     3bc:	ldp	x19, x20, [sp, #16]
     3c0:	ldp	x21, x22, [sp, #32]
     3c4:	ldp	x29, x30, [sp], #48
     3c8:	ret
     3cc:	cbz	w2, 3b8 <d_find_pack+0x58>
     3d0:	cmp	w2, #0x5
     3d4:	b.ne	438 <d_find_pack+0xd8>  // b.any
     3d8:	ldr	x0, [x20, #288]
     3dc:	cbz	x0, 470 <d_find_pack+0x110>
     3e0:	ldr	x0, [x0, #8]
     3e4:	ldr	x2, [x19, #8]
     3e8:	ldr	x0, [x0, #16]
     3ec:	mov	w1, w2
     3f0:	tbnz	w2, #31, 450 <d_find_pack+0xf0>
     3f4:	cbnz	x0, 40c <d_find_pack+0xac>
     3f8:	b	3b8 <d_find_pack+0x58>
     3fc:	cbz	w1, 44c <d_find_pack+0xec>
     400:	ldr	x0, [x0, #16]
     404:	sub	w1, w1, #0x1
     408:	cbz	x0, 3b8 <d_find_pack+0x58>
     40c:	ldr	w2, [x0]
     410:	cmp	w2, #0x2f
     414:	b.eq	3fc <d_find_pack+0x9c>  // b.none
     418:	b	3b8 <d_find_pack+0x58>
     41c:	sub	w2, w2, #0x18
     420:	cmp	w2, #0x34
     424:	b.hi	438 <d_find_pack+0xd8>  // b.pmore
     428:	lsl	x2, x22, x2
     42c:	tst	x2, x21
     430:	b.ne	3b8 <d_find_pack+0x58>  // b.any
     434:	tbnz	w2, #27, 3b0 <d_find_pack+0x50>
     438:	ldr	x1, [x19, #8]
     43c:	mov	x0, x20
     440:	bl	360 <d_find_pack>
     444:	cbz	x0, 3b0 <d_find_pack+0x50>
     448:	b	3bc <d_find_pack+0x5c>
     44c:	ldr	x0, [x0, #8]
     450:	cbz	x0, 3b8 <d_find_pack+0x58>
     454:	ldr	w1, [x0]
     458:	cmp	w1, #0x2f
     45c:	b.ne	3b8 <d_find_pack+0x58>  // b.any
     460:	ldp	x19, x20, [sp, #16]
     464:	ldp	x21, x22, [sp, #32]
     468:	ldp	x29, x30, [sp], #48
     46c:	ret
     470:	mov	w1, #0x1                   	// #1
     474:	str	w1, [x20, #304]
     478:	b	3bc <d_find_pack+0x5c>
     47c:	mov	x0, #0x0                   	// #0
     480:	ret
     484:	nop

0000000000000488 <d_append_num>:
     488:	stp	x29, x30, [sp, #-96]!
     48c:	mov	w2, w1
     490:	adrp	x3, 0 <d_make_comp>
     494:	mov	x29, sp
     498:	add	x1, x3, #0x0
     49c:	stp	x19, x20, [sp, #16]
     4a0:	add	x20, sp, #0x40
     4a4:	mov	x19, x0
     4a8:	mov	x0, x20
     4ac:	bl	0 <sprintf>
     4b0:	mov	x0, x20
     4b4:	bl	0 <__asan_internal_strlen>
     4b8:	cbz	x0, 560 <d_append_num+0xd8>
     4bc:	stp	x21, x22, [sp, #32]
     4c0:	add	x21, x20, x0
     4c4:	ldr	x1, [x19, #256]
     4c8:	str	x23, [sp, #48]
     4cc:	mov	x23, #0x1                   	// #1
     4d0:	b	528 <d_append_num+0xa0>
     4d4:	ldp	x3, x2, [x19, #272]
     4d8:	strb	wzr, [x19, #255]
     4dc:	add	x20, x20, #0x1
     4e0:	blr	x3
     4e4:	strb	w22, [x19]
     4e8:	ldr	x0, [x19, #320]
     4ec:	str	x23, [x19, #256]
     4f0:	strb	w22, [x19, #264]
     4f4:	cmp	x21, x20
     4f8:	add	x0, x0, #0x1
     4fc:	str	x0, [x19, #320]
     500:	mov	x0, #0x1                   	// #1
     504:	b.eq	558 <d_append_num+0xd0>  // b.none
     508:	ldrb	w22, [x20]
     50c:	add	x1, x0, #0x1
     510:	str	x1, [x19, #256]
     514:	add	x20, x20, #0x1
     518:	strb	w22, [x19, x0]
     51c:	cmp	x21, x20
     520:	strb	w22, [x19, #264]
     524:	b.eq	558 <d_append_num+0xd0>  // b.none
     528:	ldrb	w22, [x20]
     52c:	mov	x0, x19
     530:	cmp	x1, #0xff
     534:	b.eq	4d4 <d_append_num+0x4c>  // b.none
     538:	mov	x0, x1
     53c:	add	x20, x20, #0x1
     540:	add	x1, x0, #0x1
     544:	str	x1, [x19, #256]
     548:	cmp	x21, x20
     54c:	strb	w22, [x19, x0]
     550:	strb	w22, [x19, #264]
     554:	b.ne	528 <d_append_num+0xa0>  // b.any
     558:	ldp	x21, x22, [sp, #32]
     55c:	ldr	x23, [sp, #48]
     560:	ldp	x19, x20, [sp, #16]
     564:	ldp	x29, x30, [sp], #96
     568:	ret
     56c:	nop

0000000000000570 <d_compact_number>:
     570:	ldr	x1, [x0, #24]
     574:	mov	x5, x0
     578:	ldrb	w2, [x1]
     57c:	cmp	w2, #0x5f
     580:	b.eq	60c <d_compact_number+0x9c>  // b.none
     584:	cmp	w2, #0x6e
     588:	b.eq	614 <d_compact_number+0xa4>  // b.none
     58c:	sub	w0, w2, #0x30
     590:	and	w0, w0, #0xff
     594:	cmp	w0, #0x9
     598:	b.hi	614 <d_compact_number+0xa4>  // b.pmore
     59c:	mov	w8, #0xcccd                	// #52429
     5a0:	mov	w3, w2
     5a4:	mov	w9, #0x7fffffff            	// #2147483647
     5a8:	mov	w2, #0x0                   	// #0
     5ac:	movk	w8, #0xcccc, lsl #16
     5b0:	b	5c4 <d_compact_number+0x54>
     5b4:	umull	x4, w4, w8
     5b8:	lsr	x4, x4, #35
     5bc:	cmp	w4, w2
     5c0:	b.lt	614 <d_compact_number+0xa4>  // b.tstop
     5c4:	add	x1, x1, #0x1
     5c8:	str	x1, [x5, #24]
     5cc:	add	w2, w2, w2, lsl #2
     5d0:	ldrb	w7, [x1]
     5d4:	add	w0, w3, w2, lsl #1
     5d8:	sub	w2, w0, #0x30
     5dc:	sub	w6, w7, #0x30
     5e0:	mov	w3, w7
     5e4:	sub	w4, w9, w6
     5e8:	and	w6, w6, #0xff
     5ec:	cmp	w6, #0x9
     5f0:	b.ls	5b4 <d_compact_number+0x44>  // b.plast
     5f4:	sub	w0, w0, #0x2f
     5f8:	cmp	w7, #0x5f
     5fc:	b.ne	614 <d_compact_number+0xa4>  // b.any
     600:	add	x1, x1, #0x1
     604:	str	x1, [x5, #24]
     608:	ret
     60c:	mov	w0, #0x0                   	// #0
     610:	b	600 <d_compact_number+0x90>
     614:	mov	w0, #0xffffffff            	// #-1
     618:	ret
     61c:	nop

0000000000000620 <d_discriminator>:
     620:	mov	x4, x0
     624:	ldr	x0, [x0, #24]
     628:	ldrb	w1, [x0]
     62c:	cmp	w1, #0x5f
     630:	b.ne	6d0 <d_discriminator+0xb0>  // b.any
     634:	add	x1, x0, #0x1
     638:	str	x1, [x4, #24]
     63c:	mov	w12, #0x0                   	// #0
     640:	ldrb	w2, [x0, #1]
     644:	cmp	w2, #0x5f
     648:	b.eq	708 <d_discriminator+0xe8>  // b.none
     64c:	cmp	w2, #0x6e
     650:	b.eq	6e0 <d_discriminator+0xc0>  // b.none
     654:	sub	w0, w2, #0x30
     658:	and	w0, w0, #0xff
     65c:	cmp	w0, #0x9
     660:	b.hi	6d0 <d_discriminator+0xb0>  // b.pmore
     664:	mov	w0, #0x0                   	// #0
     668:	mov	w9, #0xcccd                	// #52429
     66c:	mov	w5, w2
     670:	mov	w10, #0x7fffffff            	// #2147483647
     674:	mov	w2, #0x0                   	// #0
     678:	movk	w9, #0xcccc, lsl #16
     67c:	b	690 <d_discriminator+0x70>
     680:	umull	x3, w3, w9
     684:	lsr	x3, x3, #35
     688:	cmp	w3, w2
     68c:	b.lt	6d8 <d_discriminator+0xb8>  // b.tstop
     690:	mov	x11, x1
     694:	add	x1, x1, #0x1
     698:	str	x1, [x4, #24]
     69c:	add	w2, w2, w2, lsl #2
     6a0:	ldrb	w7, [x1]
     6a4:	add	w8, w5, w2, lsl #1
     6a8:	sub	w2, w8, #0x30
     6ac:	sub	w6, w7, #0x30
     6b0:	mov	w5, w7
     6b4:	sub	w3, w10, w6
     6b8:	and	w6, w6, #0xff
     6bc:	cmp	w6, #0x9
     6c0:	b.ls	680 <d_discriminator+0x60>  // b.plast
     6c4:	cbz	w0, 724 <d_discriminator+0x104>
     6c8:	cmp	w8, #0x30
     6cc:	b.ne	6d8 <d_discriminator+0xb8>  // b.any
     6d0:	mov	w0, #0x1                   	// #1
     6d4:	ret
     6d8:	mov	w0, #0x0                   	// #0
     6dc:	ret
     6e0:	add	x3, x1, #0x1
     6e4:	str	x3, [x4, #24]
     6e8:	ldrb	w2, [x1, #1]
     6ec:	sub	w0, w2, #0x30
     6f0:	and	w0, w0, #0xff
     6f4:	cmp	w0, #0x9
     6f8:	b.hi	6d0 <d_discriminator+0xb0>  // b.pmore
     6fc:	mov	x1, x3
     700:	mov	w0, #0x1                   	// #1
     704:	b	668 <d_discriminator+0x48>
     708:	add	x1, x0, #0x2
     70c:	str	x1, [x4, #24]
     710:	mov	w12, #0x1                   	// #1
     714:	ldrb	w2, [x0, #2]
     718:	cmp	w2, #0x6e
     71c:	b.ne	654 <d_discriminator+0x34>  // b.any
     720:	b	6e0 <d_discriminator+0xc0>
     724:	cmp	w12, #0x0
     728:	ccmp	w2, #0x9, #0x4, ne  // ne = any
     72c:	b.le	6d0 <d_discriminator+0xb0>
     730:	cmp	w7, #0x5f
     734:	b.ne	6d4 <d_discriminator+0xb4>  // b.any
     738:	add	x11, x11, #0x2
     73c:	mov	w0, #0x1                   	// #1
     740:	str	x11, [x4, #24]
     744:	ret

0000000000000748 <d_template_param>:
     748:	mov	x1, x0
     74c:	ldr	x0, [x0, #24]
     750:	ldrb	w2, [x0]
     754:	cmp	w2, #0x54
     758:	b.ne	828 <d_template_param+0xe0>  // b.any
     75c:	add	x2, x0, #0x1
     760:	str	x2, [x1, #24]
     764:	ldrb	w5, [x0, #1]
     768:	cmp	w5, #0x5f
     76c:	b.eq	830 <d_template_param+0xe8>  // b.none
     770:	sub	w0, w5, #0x30
     774:	and	w0, w0, #0xff
     778:	cmp	w0, #0x9
     77c:	b.hi	828 <d_template_param+0xe0>  // b.pmore
     780:	mov	w9, #0xcccd                	// #52429
     784:	mov	w0, #0x0                   	// #0
     788:	mov	w10, #0x7fffffff            	// #2147483647
     78c:	movk	w9, #0xcccc, lsl #16
     790:	b	7a4 <d_template_param+0x5c>
     794:	umull	x3, w3, w9
     798:	lsr	x3, x3, #35
     79c:	cmp	w3, w0
     7a0:	b.lt	828 <d_template_param+0xe0>  // b.tstop
     7a4:	mov	x8, x2
     7a8:	add	x2, x2, #0x1
     7ac:	str	x2, [x1, #24]
     7b0:	add	w0, w0, w0, lsl #2
     7b4:	ldrb	w7, [x2]
     7b8:	add	w6, w5, w0, lsl #1
     7bc:	sub	w0, w6, #0x30
     7c0:	sub	w4, w7, #0x30
     7c4:	mov	w5, w7
     7c8:	sub	w3, w10, w4
     7cc:	and	w4, w4, #0xff
     7d0:	cmp	w4, #0x9
     7d4:	b.ls	794 <d_template_param+0x4c>  // b.plast
     7d8:	sub	w0, w6, #0x2f
     7dc:	cmp	w7, #0x5f
     7e0:	b.ne	828 <d_template_param+0xe0>  // b.any
     7e4:	add	x8, x8, #0x2
     7e8:	str	x8, [x1, #24]
     7ec:	ldp	w2, w3, [x1, #40]
     7f0:	cmp	w2, w3
     7f4:	b.ge	828 <d_template_param+0xe0>  // b.tcont
     7f8:	mov	w4, #0x18                  	// #24
     7fc:	add	w5, w2, #0x1
     800:	ldr	x3, [x1, #32]
     804:	smull	x2, w2, w4
     808:	sxtw	x6, w0
     80c:	mov	w4, #0x5                   	// #5
     810:	add	x0, x3, x2
     814:	str	wzr, [x0, #4]
     818:	str	w5, [x1, #40]
     81c:	str	w4, [x3, x2]
     820:	str	x6, [x0, #8]
     824:	ret
     828:	mov	x0, #0x0                   	// #0
     82c:	ret
     830:	add	x2, x0, #0x2
     834:	mov	w0, #0x0                   	// #0
     838:	str	x2, [x1, #24]
     83c:	b	7ec <d_template_param+0xa4>

0000000000000840 <d_call_offset>:
     840:	mov	x2, x0
     844:	cbnz	w1, 860 <d_call_offset+0x20>
     848:	ldr	x0, [x0, #24]
     84c:	ldrb	w1, [x0]
     850:	cbz	w1, 988 <d_call_offset+0x148>
     854:	add	x1, x0, #0x1
     858:	str	x1, [x2, #24]
     85c:	ldrb	w1, [x0]
     860:	cmp	w1, #0x68
     864:	b.eq	9a4 <d_call_offset+0x164>  // b.none
     868:	cmp	w1, #0x76
     86c:	b.ne	988 <d_call_offset+0x148>  // b.any
     870:	ldr	x6, [x2, #24]
     874:	ldrb	w5, [x6]
     878:	cmp	w5, #0x6e
     87c:	b.eq	990 <d_call_offset+0x150>  // b.none
     880:	sub	w0, w5, #0x30
     884:	and	w0, w0, #0xff
     888:	cmp	w0, #0x9
     88c:	b.hi	8e8 <d_call_offset+0xa8>  // b.pmore
     890:	mov	w7, #0xcccd                	// #52429
     894:	add	x3, x6, #0x1
     898:	mov	w1, #0x0                   	// #0
     89c:	mov	w8, #0x7fffffff            	// #2147483647
     8a0:	movk	w7, #0xcccc, lsl #16
     8a4:	b	8b8 <d_call_offset+0x78>
     8a8:	umull	x0, w0, w7
     8ac:	lsr	x0, x0, #35
     8b0:	cmp	w0, w1
     8b4:	b.lt	988 <d_call_offset+0x148>  // b.tstop
     8b8:	add	w1, w1, w1, lsl #2
     8bc:	str	x3, [x2, #24]
     8c0:	mov	x6, x3
     8c4:	add	x3, x3, #0x1
     8c8:	add	w1, w5, w1, lsl #1
     8cc:	ldurb	w5, [x3, #-1]
     8d0:	sub	w1, w1, #0x30
     8d4:	sub	w4, w5, #0x30
     8d8:	sub	w0, w8, w4
     8dc:	and	w4, w4, #0xff
     8e0:	cmp	w4, #0x9
     8e4:	b.ls	8a8 <d_call_offset+0x68>  // b.plast
     8e8:	cmp	w5, #0x5f
     8ec:	b.ne	988 <d_call_offset+0x148>  // b.any
     8f0:	add	x4, x6, #0x1
     8f4:	str	x4, [x2, #24]
     8f8:	ldrb	w0, [x6, #1]
     8fc:	cmp	w0, #0x6e
     900:	b.ne	910 <d_call_offset+0xd0>  // b.any
     904:	add	x4, x6, #0x2
     908:	str	x4, [x2, #24]
     90c:	ldrb	w0, [x6, #2]
     910:	sub	w1, w0, #0x30
     914:	and	w1, w1, #0xff
     918:	cmp	w1, #0x9
     91c:	b.hi	970 <d_call_offset+0x130>  // b.pmore
     920:	mov	w7, #0xcccd                	// #52429
     924:	mov	w1, #0x0                   	// #0
     928:	mov	w6, #0x7fffffff            	// #2147483647
     92c:	movk	w7, #0xcccc, lsl #16
     930:	b	944 <d_call_offset+0x104>
     934:	umull	x3, w3, w7
     938:	lsr	x3, x3, #35
     93c:	cmp	w3, w1
     940:	b.lt	988 <d_call_offset+0x148>  // b.tstop
     944:	add	x4, x4, #0x1
     948:	add	w1, w1, w1, lsl #2
     94c:	str	x4, [x2, #24]
     950:	add	w1, w0, w1, lsl #1
     954:	ldrb	w0, [x4]
     958:	sub	w1, w1, #0x30
     95c:	sub	w5, w0, #0x30
     960:	sub	w3, w6, w5
     964:	and	w5, w5, #0xff
     968:	cmp	w5, #0x9
     96c:	b.ls	934 <d_call_offset+0xf4>  // b.plast
     970:	cmp	w0, #0x5f
     974:	b.ne	988 <d_call_offset+0x148>  // b.any
     978:	add	x4, x4, #0x1
     97c:	mov	w0, #0x1                   	// #1
     980:	str	x4, [x2, #24]
     984:	ret
     988:	mov	w0, #0x0                   	// #0
     98c:	ret
     990:	add	x0, x6, #0x1
     994:	str	x0, [x2, #24]
     998:	ldrb	w5, [x6, #1]
     99c:	mov	x6, x0
     9a0:	b	880 <d_call_offset+0x40>
     9a4:	ldr	x4, [x2, #24]
     9a8:	ldrb	w0, [x4]
     9ac:	cmp	w0, #0x6e
     9b0:	b.ne	9c4 <d_call_offset+0x184>  // b.any
     9b4:	add	x1, x4, #0x1
     9b8:	str	x1, [x2, #24]
     9bc:	ldrb	w0, [x4, #1]
     9c0:	mov	x4, x1
     9c4:	sub	w1, w0, #0x30
     9c8:	and	w1, w1, #0xff
     9cc:	cmp	w1, #0x9
     9d0:	b.hi	970 <d_call_offset+0x130>  // b.pmore
     9d4:	mov	w7, #0xcccd                	// #52429
     9d8:	add	x5, x4, #0x1
     9dc:	mov	w1, #0x0                   	// #0
     9e0:	mov	w8, #0x7fffffff            	// #2147483647
     9e4:	movk	w7, #0xcccc, lsl #16
     9e8:	b	9fc <d_call_offset+0x1bc>
     9ec:	umull	x3, w3, w7
     9f0:	lsr	x3, x3, #35
     9f4:	cmp	w3, w1
     9f8:	b.lt	988 <d_call_offset+0x148>  // b.tstop
     9fc:	add	w1, w1, w1, lsl #2
     a00:	str	x5, [x2, #24]
     a04:	mov	x4, x5
     a08:	add	x5, x5, #0x1
     a0c:	add	w1, w0, w1, lsl #1
     a10:	ldurb	w0, [x5, #-1]
     a14:	sub	w1, w1, #0x30
     a18:	sub	w6, w0, #0x30
     a1c:	sub	w3, w8, w6
     a20:	and	w6, w6, #0xff
     a24:	cmp	w6, #0x9
     a28:	b.ls	9ec <d_call_offset+0x1ac>  // b.plast
     a2c:	b	970 <d_call_offset+0x130>

0000000000000a30 <d_print_comp_inner>:
     a30:	stp	x29, x30, [sp, #-272]!
     a34:	mov	x29, sp
     a38:	stp	x19, x20, [sp, #16]
     a3c:	mov	x19, x0
     a40:	cbz	x2, ad4 <d_print_comp_inner+0xa4>
     a44:	stp	x21, x22, [sp, #32]
     a48:	ldr	w21, [x0, #304]
     a4c:	cbnz	w21, a98 <d_print_comp_inner+0x68>
     a50:	ldr	w20, [x2]
     a54:	stp	x23, x24, [sp, #48]
     a58:	mov	x24, x2
     a5c:	cmp	w20, #0x50
     a60:	b.ls	a78 <d_print_comp_inner+0x48>  // b.plast
     a64:	mov	w0, #0x1                   	// #1
     a68:	ldp	x21, x22, [sp, #32]
     a6c:	ldp	x23, x24, [sp, #48]
     a70:	str	w0, [x19, #304]
     a74:	b	a9c <d_print_comp_inner+0x6c>
     a78:	adrp	x0, 0 <d_make_comp>
     a7c:	mov	w22, w1
     a80:	add	x0, x0, #0x0
     a84:	stp	x25, x26, [sp, #64]
     a88:	ldrh	w0, [x0, w20, uxtw #1]
     a8c:	adr	x1, a98 <d_print_comp_inner+0x68>
     a90:	add	x0, x1, w0, sxth #2
     a94:	br	x0
     a98:	ldp	x21, x22, [sp, #32]
     a9c:	ldp	x19, x20, [sp, #16]
     aa0:	ldp	x29, x30, [sp], #272
     aa4:	ret
     aa8:	ldr	x0, [x2, #16]
     aac:	ldr	w1, [x0]
     ab0:	cmp	w1, #0x3b
     ab4:	b.ne	ac8 <d_print_comp_inner+0x98>  // b.any
     ab8:	ldr	x0, [x0, #16]
     abc:	ldr	w0, [x0]
     ac0:	cmp	w0, #0x3c
     ac4:	b.eq	6644 <d_print_comp_inner+0x5c14>  // b.none
     ac8:	ldp	x21, x22, [sp, #32]
     acc:	ldp	x23, x24, [sp, #48]
     ad0:	ldp	x25, x26, [sp, #64]
     ad4:	mov	w0, #0x1                   	// #1
     ad8:	str	w0, [x19, #304]
     adc:	ldp	x19, x20, [sp, #16]
     ae0:	ldp	x29, x30, [sp], #272
     ae4:	ret
     ae8:	ldp	x1, x2, [x19, #288]
     aec:	add	x0, sp, #0x90
     af0:	stp	x2, x24, [sp, #144]
     af4:	str	wzr, [sp, #160]
     af8:	str	x1, [sp, #168]
     afc:	ldr	x3, [x24, #8]
     b00:	str	x0, [x19, #296]
     b04:	mov	x25, x3
     b08:	cbnz	x25, 3554 <d_print_comp_inner+0x2b24>
     b0c:	mov	w0, #0x1                   	// #1
     b10:	str	w0, [x19, #304]
     b14:	mov	x2, x24
     b18:	mov	w1, w22
     b1c:	mov	x0, x19
     b20:	bl	78e8 <d_print_mod>
     b24:	ldr	x0, [sp, #144]
     b28:	str	x0, [x19, #296]
     b2c:	cbz	w21, 35c8 <d_print_comp_inner+0x2b98>
     b30:	ldp	x21, x22, [sp, #32]
     b34:	ldp	x25, x26, [sp, #64]
     b38:	str	x23, [x19, #288]
     b3c:	ldp	x23, x24, [sp, #48]
     b40:	b	a9c <d_print_comp_inner+0x6c>
     b44:	ldr	x2, [x19, #296]
     b48:	ldr	x25, [x24, #8]
     b4c:	mov	x0, x2
     b50:	cbz	x2, b84 <d_print_comp_inner+0x154>
     b54:	nop
     b58:	ldr	w1, [x0, #16]
     b5c:	cbnz	w1, b7c <d_print_comp_inner+0x14c>
     b60:	ldr	x1, [x0, #8]
     b64:	ldr	w1, [x1]
     b68:	sub	w3, w1, #0x19
     b6c:	cmp	w3, #0x2
     b70:	b.hi	5c6c <d_print_comp_inner+0x523c>  // b.pmore
     b74:	cmp	w20, w1
     b78:	b.eq	5c78 <d_print_comp_inner+0x5248>  // b.none
     b7c:	ldr	x0, [x0]
     b80:	cbnz	x0, b58 <d_print_comp_inner+0x128>
     b84:	ldr	x4, [x19, #288]
     b88:	b	bd8 <d_print_comp_inner+0x1a8>
     b8c:	ldp	x25, x26, [sp, #64]
     b90:	b	a64 <d_print_comp_inner+0x34>
     b94:	ldr	w0, [x19, #312]
     b98:	ldr	x3, [x2, #8]
     b9c:	mov	x25, x3
     ba0:	ldr	w1, [x3]
     ba4:	cbnz	w0, 4f80 <d_print_comp_inner+0x4550>
     ba8:	cmp	w1, #0x5
     bac:	b.eq	6404 <d_print_comp_inner+0x59d4>  // b.none
     bb0:	ldr	x4, [x19, #288]
     bb4:	mov	x0, x3
     bb8:	mov	w21, #0x0                   	// #0
     bbc:	cmp	w1, #0x23
     bc0:	ldr	x2, [x19, #296]
     bc4:	b.eq	4e58 <d_print_comp_inner+0x4428>  // b.none
     bc8:	cmp	w20, w1
     bcc:	b.eq	4e58 <d_print_comp_inner+0x4428>  // b.none
     bd0:	cmp	w1, #0x24
     bd4:	b.eq	3538 <d_print_comp_inner+0x2b08>  // b.none
     bd8:	add	x0, sp, #0x90
     bdc:	stp	x2, x24, [sp, #144]
     be0:	str	wzr, [sp, #160]
     be4:	str	x4, [sp, #168]
     be8:	str	x0, [x19, #296]
     bec:	b	b08 <d_print_comp_inner+0xd8>
     bf0:	ldr	x20, [x2, #8]
     bf4:	cbz	x20, 485c <d_print_comp_inner+0x3e2c>
     bf8:	ldr	w0, [x20, #4]
     bfc:	cmp	w0, #0x1
     c00:	b.gt	485c <d_print_comp_inner+0x3e2c>
     c04:	ldr	w1, [x19, #308]
     c08:	cmp	w1, #0x400
     c0c:	b.gt	485c <d_print_comp_inner+0x3e2c>
     c10:	ldr	x3, [x19, #328]
     c14:	add	w0, w0, #0x1
     c18:	str	w0, [x20, #4]
     c1c:	add	w1, w1, #0x1
     c20:	add	x0, sp, #0x90
     c24:	str	w1, [x19, #308]
     c28:	str	x0, [x19, #328]
     c2c:	mov	w1, w22
     c30:	mov	x0, x19
     c34:	mov	x2, x20
     c38:	stp	x20, x3, [sp, #144]
     c3c:	bl	a30 <d_print_comp_inner>
     c40:	ldr	w1, [x20, #4]
     c44:	ldr	x0, [sp, #152]
     c48:	str	x0, [x19, #328]
     c4c:	ldr	w0, [x19, #308]
     c50:	sub	w1, w1, #0x1
     c54:	str	w1, [x20, #4]
     c58:	sub	w0, w0, #0x1
     c5c:	str	w0, [x19, #308]
     c60:	tbz	w22, #2, 5a20 <d_print_comp_inner+0x4ff0>
     c64:	ldr	x1, [x19, #256]
     c68:	add	x0, x1, #0x1
     c6c:	cmp	x1, #0xff
     c70:	b.ne	c98 <d_print_comp_inner+0x268>  // b.any
     c74:	ldp	x3, x2, [x19, #272]
     c78:	strb	wzr, [x19, #255]
     c7c:	mov	x0, x19
     c80:	blr	x3
     c84:	ldr	x2, [x19, #320]
     c88:	mov	x0, #0x1                   	// #1
     c8c:	mov	x1, #0x0                   	// #0
     c90:	add	x2, x2, x0
     c94:	str	x2, [x19, #320]
     c98:	str	x0, [x19, #256]
     c9c:	mov	w0, #0x2e                  	// #46
     ca0:	strb	w0, [x19, x1]
     ca4:	strb	w0, [x19, #264]
     ca8:	ldr	x23, [x24, #16]
     cac:	ldr	w0, [x23]
     cb0:	cmp	w0, #0x47
     cb4:	b.eq	5f48 <d_print_comp_inner+0x5518>  // b.none
     cb8:	ldr	w0, [x23, #4]
     cbc:	cmp	w0, #0x1
     cc0:	b.gt	48e8 <d_print_comp_inner+0x3eb8>
     cc4:	ldr	w1, [x19, #308]
     cc8:	cmp	w1, #0x400
     ccc:	b.gt	48e8 <d_print_comp_inner+0x3eb8>
     cd0:	ldr	x3, [x19, #328]
     cd4:	add	w0, w0, #0x1
     cd8:	str	w0, [x23, #4]
     cdc:	add	w1, w1, #0x1
     ce0:	add	x0, sp, #0x90
     ce4:	str	w1, [x19, #308]
     ce8:	str	x0, [x19, #328]
     cec:	mov	w1, w22
     cf0:	mov	x2, x23
     cf4:	mov	x0, x19
     cf8:	stp	x23, x3, [sp, #144]
     cfc:	bl	a30 <d_print_comp_inner>
     d00:	ldr	w1, [x23, #4]
     d04:	ldr	x0, [sp, #152]
     d08:	sub	w1, w1, #0x1
     d0c:	ldp	x21, x22, [sp, #32]
     d10:	ldp	x25, x26, [sp, #64]
     d14:	str	x0, [x19, #328]
     d18:	ldr	w0, [x19, #308]
     d1c:	str	w1, [x23, #4]
     d20:	sub	w0, w0, #0x1
     d24:	ldp	x23, x24, [sp, #48]
     d28:	str	w0, [x19, #308]
     d2c:	b	a9c <d_print_comp_inner+0x6c>
     d30:	ldr	x20, [x24, #16]
     d34:	add	x0, sp, #0x90
     d38:	ldp	x1, x2, [x19, #288]
     d3c:	stp	x2, x24, [sp, #144]
     d40:	str	wzr, [sp, #160]
     d44:	str	x1, [sp, #168]
     d48:	str	x0, [x19, #296]
     d4c:	cbz	x20, 4948 <d_print_comp_inner+0x3f18>
     d50:	ldr	w0, [x20, #4]
     d54:	cmp	w0, #0x1
     d58:	b.gt	4948 <d_print_comp_inner+0x3f18>
     d5c:	ldr	w1, [x19, #308]
     d60:	cmp	w1, #0x400
     d64:	b.gt	4948 <d_print_comp_inner+0x3f18>
     d68:	ldr	x3, [x19, #328]
     d6c:	add	w0, w0, #0x1
     d70:	str	w0, [x20, #4]
     d74:	add	w1, w1, #0x1
     d78:	add	x0, sp, #0x80
     d7c:	str	w1, [x19, #308]
     d80:	str	x0, [x19, #328]
     d84:	mov	x2, x20
     d88:	mov	w1, w22
     d8c:	mov	x0, x19
     d90:	stp	x20, x3, [sp, #128]
     d94:	bl	a30 <d_print_comp_inner>
     d98:	ldr	w1, [x20, #4]
     d9c:	ldr	x0, [sp, #136]
     da0:	str	x0, [x19, #328]
     da4:	ldr	w2, [sp, #160]
     da8:	sub	w1, w1, #0x1
     dac:	ldr	w0, [x19, #308]
     db0:	str	w1, [x20, #4]
     db4:	sub	w0, w0, #0x1
     db8:	str	w0, [x19, #308]
     dbc:	cbz	w2, 4950 <d_print_comp_inner+0x3f20>
     dc0:	ldr	x0, [sp, #144]
     dc4:	ldp	x21, x22, [sp, #32]
     dc8:	ldp	x23, x24, [sp, #48]
     dcc:	ldp	x25, x26, [sp, #64]
     dd0:	str	x0, [x19, #296]
     dd4:	b	a9c <d_print_comp_inner+0x6c>
     dd8:	ldr	x20, [x2, #8]
     ddc:	cbz	x20, e48 <d_print_comp_inner+0x418>
     de0:	ldr	w0, [x20, #4]
     de4:	cmp	w0, #0x1
     de8:	b.gt	54c4 <d_print_comp_inner+0x4a94>
     dec:	ldr	w1, [x19, #308]
     df0:	cmp	w1, #0x400
     df4:	b.gt	54c4 <d_print_comp_inner+0x4a94>
     df8:	ldr	x3, [x19, #328]
     dfc:	add	w0, w0, #0x1
     e00:	str	w0, [x20, #4]
     e04:	add	w1, w1, #0x1
     e08:	add	x0, sp, #0x90
     e0c:	str	w1, [x19, #308]
     e10:	str	x0, [x19, #328]
     e14:	mov	w1, w22
     e18:	mov	x0, x19
     e1c:	mov	x2, x20
     e20:	stp	x20, x3, [sp, #144]
     e24:	bl	a30 <d_print_comp_inner>
     e28:	ldr	w1, [x20, #4]
     e2c:	ldr	x0, [sp, #152]
     e30:	str	x0, [x19, #328]
     e34:	ldr	w0, [x19, #308]
     e38:	sub	w1, w1, #0x1
     e3c:	str	w1, [x20, #4]
     e40:	sub	w0, w0, #0x1
     e44:	str	w0, [x19, #308]
     e48:	ldr	x0, [x24, #16]
     e4c:	cbz	x0, 5ba8 <d_print_comp_inner+0x5178>
     e50:	ldr	x1, [x19, #256]
     e54:	cmp	x1, #0xfd
     e58:	b.ls	e7c <d_print_comp_inner+0x44c>  // b.plast
     e5c:	strb	wzr, [x19, x1]
     e60:	mov	x0, x19
     e64:	ldp	x3, x2, [x19, #272]
     e68:	blr	x3
     e6c:	str	xzr, [x19, #256]
     e70:	ldr	x0, [x19, #320]
     e74:	add	x0, x0, #0x1
     e78:	str	x0, [x19, #320]
     e7c:	adrp	x20, 0 <d_make_comp>
     e80:	add	x20, x20, #0x0
     e84:	mov	x0, x20
     e88:	bl	0 <__asan_internal_strlen>
     e8c:	cbz	x0, 4c98 <d_print_comp_inner+0x4268>
     e90:	add	x25, x20, x0
     e94:	mov	x26, #0x1                   	// #1
     e98:	ldr	x23, [x19, #256]
     e9c:	b	efc <d_print_comp_inner+0x4cc>
     ea0:	ldp	x3, x2, [x19, #272]
     ea4:	strb	wzr, [x19, #255]
     ea8:	mov	x0, x19
     eac:	mov	x1, x23
     eb0:	add	x20, x20, #0x1
     eb4:	blr	x3
     eb8:	strb	w21, [x19]
     ebc:	ldr	x0, [x19, #320]
     ec0:	str	x26, [x19, #256]
     ec4:	strb	w21, [x19, #264]
     ec8:	cmp	x20, x25
     ecc:	add	x0, x0, #0x1
     ed0:	str	x0, [x19, #320]
     ed4:	b.eq	5e2c <d_print_comp_inner+0x53fc>  // b.none
     ed8:	ldrb	w21, [x20]
     edc:	mov	x0, #0x1                   	// #1
     ee0:	add	x23, x0, #0x1
     ee4:	str	x23, [x19, #256]
     ee8:	strb	w21, [x19, x0]
     eec:	add	x20, x20, #0x1
     ef0:	strb	w21, [x19, #264]
     ef4:	cmp	x25, x20
     ef8:	b.eq	4c9c <d_print_comp_inner+0x426c>  // b.none
     efc:	ldrb	w21, [x20]
     f00:	cmp	x23, #0xff
     f04:	b.eq	ea0 <d_print_comp_inner+0x470>  // b.none
     f08:	mov	x0, x23
     f0c:	b	ee0 <d_print_comp_inner+0x4b0>
     f10:	ldr	x23, [x2, #8]
     f14:	mov	w21, #0x0                   	// #0
     f18:	ldr	w0, [x23]
     f1c:	cmp	w0, #0x27
     f20:	b.eq	57a4 <d_print_comp_inner+0x4d74>  // b.none
     f24:	ldr	x0, [x19, #256]
     f28:	cmp	x0, #0xff
     f2c:	b.eq	58b8 <d_print_comp_inner+0x4e88>  // b.none
     f30:	add	x1, x0, #0x1
     f34:	str	x1, [x19, #256]
     f38:	mov	w2, #0x28                  	// #40
     f3c:	strb	w2, [x19, x0]
     f40:	strb	w2, [x19, #264]
     f44:	ldr	w0, [x23, #4]
     f48:	cmp	w0, #0x1
     f4c:	b.gt	51d4 <d_print_comp_inner+0x47a4>
     f50:	ldr	w2, [x19, #308]
     f54:	cmp	w2, #0x400
     f58:	b.gt	51d4 <d_print_comp_inner+0x47a4>
     f5c:	ldr	x3, [x19, #328]
     f60:	add	w0, w0, #0x1
     f64:	str	w0, [x23, #4]
     f68:	add	w2, w2, #0x1
     f6c:	add	x0, sp, #0x90
     f70:	str	w2, [x19, #308]
     f74:	str	x0, [x19, #328]
     f78:	mov	w1, w22
     f7c:	mov	x2, x23
     f80:	mov	x0, x19
     f84:	stp	x23, x3, [sp, #144]
     f88:	bl	a30 <d_print_comp_inner>
     f8c:	ldr	w2, [x23, #4]
     f90:	ldr	x0, [sp, #152]
     f94:	str	x0, [x19, #328]
     f98:	ldr	w0, [x19, #308]
     f9c:	sub	w2, w2, #0x1
     fa0:	ldr	x1, [x19, #256]
     fa4:	str	w2, [x23, #4]
     fa8:	sub	w0, w0, #0x1
     fac:	str	w0, [x19, #308]
     fb0:	cmp	x1, #0xff
     fb4:	b.ne	54dc <d_print_comp_inner+0x4aac>  // b.any
     fb8:	ldp	x3, x2, [x19, #272]
     fbc:	strb	wzr, [x19, #255]
     fc0:	mov	x0, x19
     fc4:	blr	x3
     fc8:	ldr	x1, [x19, #320]
     fcc:	mov	w0, #0x29                  	// #41
     fd0:	strb	w0, [x19]
     fd4:	strb	w0, [x19, #264]
     fd8:	mov	x0, #0x1                   	// #1
     fdc:	add	x1, x1, x0
     fe0:	str	x0, [x19, #256]
     fe4:	str	x1, [x19, #320]
     fe8:	ldr	w1, [x24]
     fec:	cmp	w1, #0x3e
     ff0:	b.eq	5918 <d_print_comp_inner+0x4ee8>  // b.none
     ff4:	cmp	w21, #0x8
     ff8:	b.eq	5530 <d_print_comp_inner+0x4b00>  // b.none
     ffc:	ldr	x20, [x24, #16]
    1000:	cbz	x20, 4b94 <d_print_comp_inner+0x4164>
    1004:	ldr	w0, [x20, #4]
    1008:	cmp	w0, #0x1
    100c:	b.gt	4b94 <d_print_comp_inner+0x4164>
    1010:	ldr	w1, [x19, #308]
    1014:	cmp	w1, #0x400
    1018:	b.gt	4b94 <d_print_comp_inner+0x4164>
    101c:	ldr	x3, [x19, #328]
    1020:	add	w0, w0, #0x1
    1024:	str	w0, [x20, #4]
    1028:	add	w1, w1, #0x1
    102c:	add	x0, sp, #0x90
    1030:	str	w1, [x19, #308]
    1034:	str	x0, [x19, #328]
    1038:	mov	w1, w22
    103c:	mov	x0, x19
    1040:	mov	x2, x20
    1044:	stp	x20, x3, [sp, #144]
    1048:	bl	a30 <d_print_comp_inner>
    104c:	ldr	w1, [x20, #4]
    1050:	ldr	x0, [sp, #152]
    1054:	str	x0, [x19, #328]
    1058:	ldr	w0, [x19, #308]
    105c:	sub	w1, w1, #0x1
    1060:	str	w1, [x20, #4]
    1064:	sub	w0, w0, #0x1
    1068:	str	w0, [x19, #308]
    106c:	cmp	w21, #0x8
    1070:	b.eq	59d0 <d_print_comp_inner+0x4fa0>  // b.none
    1074:	ldp	x21, x22, [sp, #32]
    1078:	ldp	x23, x24, [sp, #48]
    107c:	ldp	x25, x26, [sp, #64]
    1080:	b	a9c <d_print_comp_inner+0x6c>
    1084:	ldr	x20, [x2, #16]
    1088:	cbz	x20, 4964 <d_print_comp_inner+0x3f34>
    108c:	ldr	w0, [x20, #4]
    1090:	cmp	w0, #0x1
    1094:	b.gt	4964 <d_print_comp_inner+0x3f34>
    1098:	ldr	w1, [x19, #308]
    109c:	cmp	w1, #0x400
    10a0:	b.gt	4964 <d_print_comp_inner+0x3f34>
    10a4:	ldr	x3, [x19, #328]
    10a8:	add	w0, w0, #0x1
    10ac:	str	w0, [x20, #4]
    10b0:	add	w1, w1, #0x1
    10b4:	add	x0, sp, #0x90
    10b8:	str	w1, [x19, #308]
    10bc:	str	x0, [x19, #328]
    10c0:	mov	w1, w22
    10c4:	mov	x0, x19
    10c8:	mov	x2, x20
    10cc:	stp	x20, x3, [sp, #144]
    10d0:	bl	a30 <d_print_comp_inner>
    10d4:	ldr	w1, [x20, #4]
    10d8:	ldr	x0, [sp, #152]
    10dc:	sub	w1, w1, #0x1
    10e0:	ldp	x21, x22, [sp, #32]
    10e4:	ldp	x23, x24, [sp, #48]
    10e8:	ldp	x25, x26, [sp, #64]
    10ec:	str	x0, [x19, #328]
    10f0:	ldr	w0, [x19, #308]
    10f4:	str	w1, [x20, #4]
    10f8:	sub	w0, w0, #0x1
    10fc:	str	w0, [x19, #308]
    1100:	b	a9c <d_print_comp_inner+0x6c>
    1104:	ldr	x1, [x19, #256]
    1108:	add	x0, x1, #0x1
    110c:	cmp	x1, #0xff
    1110:	b.ne	1138 <d_print_comp_inner+0x708>  // b.any
    1114:	ldp	x3, x2, [x19, #272]
    1118:	strb	wzr, [x19, #255]
    111c:	mov	x0, x19
    1120:	blr	x3
    1124:	ldr	x2, [x19, #320]
    1128:	mov	x0, #0x1                   	// #1
    112c:	mov	x1, #0x0                   	// #0
    1130:	add	x2, x2, x0
    1134:	str	x2, [x19, #320]
    1138:	str	x0, [x19, #256]
    113c:	mov	w0, #0x7e                  	// #126
    1140:	strb	w0, [x19, x1]
    1144:	strb	w0, [x19, #264]
    1148:	ldr	x20, [x24, #16]
    114c:	cbz	x20, 497c <d_print_comp_inner+0x3f4c>
    1150:	ldr	w0, [x20, #4]
    1154:	cmp	w0, #0x1
    1158:	b.gt	497c <d_print_comp_inner+0x3f4c>
    115c:	ldr	w1, [x19, #308]
    1160:	cmp	w1, #0x400
    1164:	b.gt	497c <d_print_comp_inner+0x3f4c>
    1168:	ldr	x3, [x19, #328]
    116c:	add	w0, w0, #0x1
    1170:	str	w0, [x20, #4]
    1174:	add	w1, w1, #0x1
    1178:	add	x0, sp, #0x90
    117c:	str	w1, [x19, #308]
    1180:	str	x0, [x19, #328]
    1184:	mov	w1, w22
    1188:	mov	x0, x19
    118c:	mov	x2, x20
    1190:	stp	x20, x3, [sp, #144]
    1194:	bl	a30 <d_print_comp_inner>
    1198:	ldr	w1, [x20, #4]
    119c:	ldr	x0, [sp, #152]
    11a0:	sub	w1, w1, #0x1
    11a4:	ldp	x21, x22, [sp, #32]
    11a8:	ldp	x23, x24, [sp, #48]
    11ac:	ldp	x25, x26, [sp, #64]
    11b0:	str	x0, [x19, #328]
    11b4:	ldr	w0, [x19, #308]
    11b8:	str	w1, [x20, #4]
    11bc:	sub	w0, w0, #0x1
    11c0:	str	w0, [x19, #308]
    11c4:	b	a9c <d_print_comp_inner+0x6c>
    11c8:	adrp	x20, 0 <d_make_comp>
    11cc:	add	x20, x20, #0x0
    11d0:	mov	x0, x20
    11d4:	bl	0 <__asan_internal_strlen>
    11d8:	cbz	x0, 4600 <d_print_comp_inner+0x3bd0>
    11dc:	add	x23, x20, x0
    11e0:	mov	x25, #0x1                   	// #1
    11e4:	ldr	x1, [x19, #256]
    11e8:	b	1244 <d_print_comp_inner+0x814>
    11ec:	ldp	x3, x2, [x19, #272]
    11f0:	strb	wzr, [x19, #255]
    11f4:	mov	x0, x19
    11f8:	add	x20, x20, #0x1
    11fc:	blr	x3
    1200:	strb	w21, [x19]
    1204:	ldr	x0, [x19, #320]
    1208:	str	x25, [x19, #256]
    120c:	strb	w21, [x19, #264]
    1210:	cmp	x20, x23
    1214:	add	x0, x0, #0x1
    1218:	str	x0, [x19, #320]
    121c:	b.eq	4600 <d_print_comp_inner+0x3bd0>  // b.none
    1220:	ldrb	w21, [x20]
    1224:	mov	x0, #0x1                   	// #1
    1228:	add	x1, x0, #0x1
    122c:	str	x1, [x19, #256]
    1230:	strb	w21, [x19, x0]
    1234:	add	x20, x20, #0x1
    1238:	strb	w21, [x19, #264]
    123c:	cmp	x23, x20
    1240:	b.eq	4600 <d_print_comp_inner+0x3bd0>  // b.none
    1244:	ldrb	w21, [x20]
    1248:	cmp	x1, #0xff
    124c:	b.eq	11ec <d_print_comp_inner+0x7bc>  // b.none
    1250:	mov	x0, x1
    1254:	b	1228 <d_print_comp_inner+0x7f8>
    1258:	ldr	x23, [x2, #8]
    125c:	cbnz	x23, 50a4 <d_print_comp_inner+0x4674>
    1260:	adrp	x20, 0 <d_make_comp>
    1264:	add	x20, x20, #0x0
    1268:	mov	x0, x20
    126c:	bl	0 <__asan_internal_strlen>
    1270:	cbz	x0, 6cfc <d_print_comp_inner+0x62cc>
    1274:	add	x22, x20, x0
    1278:	mov	x23, #0x1                   	// #1
    127c:	ldr	x1, [x19, #256]
    1280:	b	12dc <d_print_comp_inner+0x8ac>
    1284:	ldp	x3, x2, [x19, #272]
    1288:	strb	wzr, [x19, #255]
    128c:	mov	x0, x19
    1290:	add	x20, x20, #0x1
    1294:	blr	x3
    1298:	strb	w21, [x19]
    129c:	ldr	x0, [x19, #320]
    12a0:	str	x23, [x19, #256]
    12a4:	strb	w21, [x19, #264]
    12a8:	cmp	x22, x20
    12ac:	add	x0, x0, #0x1
    12b0:	str	x0, [x19, #320]
    12b4:	b.eq	6774 <d_print_comp_inner+0x5d44>  // b.none
    12b8:	ldrb	w21, [x20]
    12bc:	mov	x0, #0x1                   	// #1
    12c0:	add	x1, x0, #0x1
    12c4:	str	x1, [x19, #256]
    12c8:	strb	w21, [x19, x0]
    12cc:	add	x20, x20, #0x1
    12d0:	strb	w21, [x19, #264]
    12d4:	cmp	x22, x20
    12d8:	b.eq	5bd8 <d_print_comp_inner+0x51a8>  // b.none
    12dc:	ldrb	w21, [x20]
    12e0:	cmp	x1, #0xff
    12e4:	b.eq	1284 <d_print_comp_inner+0x854>  // b.none
    12e8:	mov	x0, x1
    12ec:	b	12c0 <d_print_comp_inner+0x890>
    12f0:	adrp	x20, 0 <d_make_comp>
    12f4:	add	x20, x20, #0x0
    12f8:	mov	x0, x20
    12fc:	bl	0 <__asan_internal_strlen>
    1300:	cbz	x0, 3b9c <d_print_comp_inner+0x316c>
    1304:	add	x23, x20, x0
    1308:	mov	x25, #0x1                   	// #1
    130c:	ldr	x1, [x19, #256]
    1310:	b	136c <d_print_comp_inner+0x93c>
    1314:	ldp	x3, x2, [x19, #272]
    1318:	strb	wzr, [x19, #255]
    131c:	mov	x0, x19
    1320:	add	x20, x20, #0x1
    1324:	blr	x3
    1328:	strb	w21, [x19]
    132c:	ldr	x0, [x19, #320]
    1330:	str	x25, [x19, #256]
    1334:	strb	w21, [x19, #264]
    1338:	cmp	x20, x23
    133c:	add	x0, x0, #0x1
    1340:	str	x0, [x19, #320]
    1344:	b.eq	3b9c <d_print_comp_inner+0x316c>  // b.none
    1348:	ldrb	w21, [x20]
    134c:	mov	x0, #0x1                   	// #1
    1350:	add	x1, x0, #0x1
    1354:	str	x1, [x19, #256]
    1358:	strb	w21, [x19, x0]
    135c:	add	x20, x20, #0x1
    1360:	strb	w21, [x19, #264]
    1364:	cmp	x23, x20
    1368:	b.eq	3b9c <d_print_comp_inner+0x316c>  // b.none
    136c:	ldrb	w21, [x20]
    1370:	cmp	x1, #0xff
    1374:	b.eq	1314 <d_print_comp_inner+0x8e4>  // b.none
    1378:	mov	x0, x1
    137c:	b	1350 <d_print_comp_inner+0x920>
    1380:	ldrsw	x22, [x2, #16]
    1384:	ldr	x20, [x2, #8]
    1388:	cbz	x22, 69c8 <d_print_comp_inner+0x5f98>
    138c:	add	x22, x20, x22
    1390:	mov	x23, #0x1                   	// #1
    1394:	ldr	x1, [x19, #256]
    1398:	b	13f4 <d_print_comp_inner+0x9c4>
    139c:	ldp	x3, x2, [x19, #272]
    13a0:	strb	wzr, [x19, #255]
    13a4:	mov	x0, x19
    13a8:	add	x20, x20, #0x1
    13ac:	blr	x3
    13b0:	strb	w21, [x19]
    13b4:	ldr	x0, [x19, #320]
    13b8:	str	x23, [x19, #256]
    13bc:	strb	w21, [x19, #264]
    13c0:	cmp	x22, x20
    13c4:	add	x0, x0, #0x1
    13c8:	str	x0, [x19, #320]
    13cc:	b.eq	5bb8 <d_print_comp_inner+0x5188>  // b.none
    13d0:	ldrb	w21, [x20]
    13d4:	mov	x0, #0x1                   	// #1
    13d8:	add	x1, x0, #0x1
    13dc:	str	x1, [x19, #256]
    13e0:	strb	w21, [x19, x0]
    13e4:	add	x20, x20, #0x1
    13e8:	strb	w21, [x19, #264]
    13ec:	cmp	x22, x20
    13f0:	b.eq	4e48 <d_print_comp_inner+0x4418>  // b.none
    13f4:	ldrb	w21, [x20]
    13f8:	cmp	x1, #0xff
    13fc:	b.eq	139c <d_print_comp_inner+0x96c>  // b.none
    1400:	mov	x0, x1
    1404:	b	13d8 <d_print_comp_inner+0x9a8>
    1408:	ldp	x1, x23, [x19, #288]
    140c:	add	x21, sp, #0x90
    1410:	stp	x23, x2, [sp, #144]
    1414:	mov	w20, #0x1                   	// #1
    1418:	mov	x5, x21
    141c:	str	wzr, [sp, #160]
    1420:	mov	w6, w20
    1424:	str	x1, [sp, #168]
    1428:	str	x21, [x19, #296]
    142c:	mov	x0, x23
    1430:	cbnz	x23, 147c <d_print_comp_inner+0xa4c>
    1434:	b	1490 <d_print_comp_inner+0xa60>
    1438:	ldr	w1, [x0, #16]
    143c:	cbnz	w1, 1474 <d_print_comp_inner+0xa44>
    1440:	cmp	w20, #0x3
    1444:	b.hi	6294 <d_print_comp_inner+0x5864>  // b.pmore
    1448:	ubfiz	x1, x20, #5, #32
    144c:	add	w20, w20, #0x1
    1450:	add	x4, x21, x1
    1454:	ldp	x2, x3, [x0]
    1458:	stp	x2, x3, [x4]
    145c:	ldp	x2, x3, [x0, #16]
    1460:	stp	x2, x3, [x4, #16]
    1464:	str	x5, [x21, x1]
    1468:	mov	x5, x4
    146c:	str	x4, [x19, #296]
    1470:	str	w6, [x0, #16]
    1474:	ldr	x0, [x0]
    1478:	cbz	x0, 1490 <d_print_comp_inner+0xa60>
    147c:	ldr	x1, [x0, #8]
    1480:	ldr	w1, [x1]
    1484:	sub	w1, w1, #0x19
    1488:	cmp	w1, #0x2
    148c:	b.ls	1438 <d_print_comp_inner+0xa08>  // b.plast
    1490:	ldr	x25, [x24, #16]
    1494:	cbz	x25, 4e00 <d_print_comp_inner+0x43d0>
    1498:	ldr	w0, [x25, #4]
    149c:	cmp	w0, #0x1
    14a0:	b.gt	4e00 <d_print_comp_inner+0x43d0>
    14a4:	ldr	w1, [x19, #308]
    14a8:	cmp	w1, #0x400
    14ac:	b.gt	4e00 <d_print_comp_inner+0x43d0>
    14b0:	ldr	x3, [x19, #328]
    14b4:	add	w0, w0, #0x1
    14b8:	str	w0, [x25, #4]
    14bc:	add	w1, w1, #0x1
    14c0:	add	x0, sp, #0x80
    14c4:	str	w1, [x19, #308]
    14c8:	str	x0, [x19, #328]
    14cc:	mov	w1, w22
    14d0:	mov	x0, x19
    14d4:	mov	x2, x25
    14d8:	stp	x25, x3, [sp, #128]
    14dc:	bl	a30 <d_print_comp_inner>
    14e0:	ldr	w1, [x25, #4]
    14e4:	ldr	x0, [sp, #136]
    14e8:	str	x0, [x19, #328]
    14ec:	ldr	w0, [x19, #308]
    14f0:	sub	w1, w1, #0x1
    14f4:	str	w1, [x25, #4]
    14f8:	sub	w0, w0, #0x1
    14fc:	str	w0, [x19, #308]
    1500:	ldr	w0, [sp, #160]
    1504:	str	x23, [x19, #296]
    1508:	cbnz	w0, 5c44 <d_print_comp_inner+0x5214>
    150c:	ubfiz	x0, x20, #5, #32
    1510:	cmp	w20, #0x1
    1514:	add	x21, x21, x0
    1518:	b.eq	153c <d_print_comp_inner+0xb0c>  // b.none
    151c:	ldur	x2, [x21, #-24]
    1520:	sub	w20, w20, #0x1
    1524:	mov	w1, w22
    1528:	mov	x0, x19
    152c:	sub	x21, x21, #0x20
    1530:	bl	78e8 <d_print_mod>
    1534:	cmp	w20, #0x1
    1538:	b.ne	151c <d_print_comp_inner+0xaec>  // b.any
    153c:	ldr	x3, [x19, #296]
    1540:	add	x2, x24, #0x8
    1544:	mov	w1, w22
    1548:	mov	x0, x19
    154c:	bl	8ad8 <d_print_array_type.isra.0>
    1550:	ldp	x21, x22, [sp, #32]
    1554:	ldp	x23, x24, [sp, #48]
    1558:	ldp	x25, x26, [sp, #64]
    155c:	b	a9c <d_print_comp_inner+0x6c>
    1560:	ldrsh	w0, [x2, #18]
    1564:	cbnz	w0, 5934 <d_print_comp_inner+0x4f04>
    1568:	ldr	x20, [x24, #8]
    156c:	adrp	x0, 188 <d_append_buffer+0x18>
    1570:	ldr	x0, [x0]
    1574:	ldr	x1, [x20, #8]
    1578:	add	x0, x0, #0x100
    157c:	cmp	x1, x0
    1580:	b.ne	5308 <d_print_comp_inner+0x48d8>  // b.any
    1584:	ldrsh	w0, [x24, #16]
    1588:	cbz	w0, 4f8c <d_print_comp_inner+0x455c>
    158c:	adrp	x20, 0 <d_make_comp>
    1590:	add	x20, x20, #0x0
    1594:	mov	x0, x20
    1598:	bl	0 <__asan_internal_strlen>
    159c:	cbz	x0, 6d2c <d_print_comp_inner+0x62fc>
    15a0:	add	x22, x20, x0
    15a4:	mov	x23, #0x1                   	// #1
    15a8:	ldr	x1, [x19, #256]
    15ac:	b	1608 <d_print_comp_inner+0xbd8>
    15b0:	ldp	x3, x2, [x19, #272]
    15b4:	strb	wzr, [x19, #255]
    15b8:	mov	x0, x19
    15bc:	add	x20, x20, #0x1
    15c0:	blr	x3
    15c4:	strb	w21, [x19]
    15c8:	ldr	x0, [x19, #320]
    15cc:	str	x23, [x19, #256]
    15d0:	strb	w21, [x19, #264]
    15d4:	cmp	x20, x22
    15d8:	add	x0, x0, #0x1
    15dc:	str	x0, [x19, #320]
    15e0:	b.eq	6804 <d_print_comp_inner+0x5dd4>  // b.none
    15e4:	ldrb	w21, [x20]
    15e8:	mov	x0, #0x1                   	// #1
    15ec:	add	x1, x0, #0x1
    15f0:	str	x1, [x19, #256]
    15f4:	strb	w21, [x19, x0]
    15f8:	add	x20, x20, #0x1
    15fc:	strb	w21, [x19, #264]
    1600:	cmp	x22, x20
    1604:	b.eq	5be8 <d_print_comp_inner+0x51b8>  // b.none
    1608:	ldrb	w21, [x20]
    160c:	cmp	x1, #0xff
    1610:	b.eq	15b0 <d_print_comp_inner+0xb80>  // b.none
    1614:	mov	x0, x1
    1618:	b	15ec <d_print_comp_inner+0xbbc>
    161c:	adrp	x20, 0 <d_make_comp>
    1620:	add	x20, x20, #0x0
    1624:	mov	x0, x20
    1628:	bl	0 <__asan_internal_strlen>
    162c:	cbz	x0, 4680 <d_print_comp_inner+0x3c50>
    1630:	add	x23, x20, x0
    1634:	mov	x25, #0x1                   	// #1
    1638:	ldr	x1, [x19, #256]
    163c:	b	1698 <d_print_comp_inner+0xc68>
    1640:	ldp	x3, x2, [x19, #272]
    1644:	strb	wzr, [x19, #255]
    1648:	mov	x0, x19
    164c:	add	x20, x20, #0x1
    1650:	blr	x3
    1654:	strb	w21, [x19]
    1658:	ldr	x0, [x19, #320]
    165c:	str	x25, [x19, #256]
    1660:	strb	w21, [x19, #264]
    1664:	cmp	x23, x20
    1668:	add	x0, x0, #0x1
    166c:	str	x0, [x19, #320]
    1670:	b.eq	4680 <d_print_comp_inner+0x3c50>  // b.none
    1674:	ldrb	w21, [x20]
    1678:	mov	x0, #0x1                   	// #1
    167c:	add	x1, x0, #0x1
    1680:	str	x1, [x19, #256]
    1684:	strb	w21, [x19, x0]
    1688:	add	x20, x20, #0x1
    168c:	strb	w21, [x19, #264]
    1690:	cmp	x23, x20
    1694:	b.eq	4680 <d_print_comp_inner+0x3c50>  // b.none
    1698:	ldrb	w21, [x20]
    169c:	cmp	x1, #0xff
    16a0:	b.eq	1640 <d_print_comp_inner+0xc10>  // b.none
    16a4:	mov	x0, x1
    16a8:	b	167c <d_print_comp_inner+0xc4c>
    16ac:	adrp	x20, 0 <d_make_comp>
    16b0:	add	x20, x20, #0x0
    16b4:	mov	x0, x20
    16b8:	bl	0 <__asan_internal_strlen>
    16bc:	cbz	x0, 47b0 <d_print_comp_inner+0x3d80>
    16c0:	add	x23, x20, x0
    16c4:	mov	x25, #0x1                   	// #1
    16c8:	ldr	x1, [x19, #256]
    16cc:	b	1728 <d_print_comp_inner+0xcf8>
    16d0:	ldp	x3, x2, [x19, #272]
    16d4:	strb	wzr, [x19, #255]
    16d8:	mov	x0, x19
    16dc:	add	x20, x20, #0x1
    16e0:	blr	x3
    16e4:	strb	w21, [x19]
    16e8:	ldr	x0, [x19, #320]
    16ec:	str	x25, [x19, #256]
    16f0:	strb	w21, [x19, #264]
    16f4:	cmp	x23, x20
    16f8:	add	x0, x0, #0x1
    16fc:	str	x0, [x19, #320]
    1700:	b.eq	47b0 <d_print_comp_inner+0x3d80>  // b.none
    1704:	ldrb	w21, [x20]
    1708:	mov	x0, #0x1                   	// #1
    170c:	add	x1, x0, #0x1
    1710:	str	x1, [x19, #256]
    1714:	strb	w21, [x19, x0]
    1718:	add	x20, x20, #0x1
    171c:	strb	w21, [x19, #264]
    1720:	cmp	x23, x20
    1724:	b.eq	47b0 <d_print_comp_inner+0x3d80>  // b.none
    1728:	ldrb	w21, [x20]
    172c:	cmp	x1, #0xff
    1730:	b.eq	16d0 <d_print_comp_inner+0xca0>  // b.none
    1734:	mov	x0, x1
    1738:	b	170c <d_print_comp_inner+0xcdc>
    173c:	adrp	x20, 0 <d_make_comp>
    1740:	add	x20, x20, #0x0
    1744:	mov	x0, x20
    1748:	bl	0 <__asan_internal_strlen>
    174c:	cbz	x0, 4284 <d_print_comp_inner+0x3854>
    1750:	add	x23, x20, x0
    1754:	mov	x25, #0x1                   	// #1
    1758:	ldr	x1, [x19, #256]
    175c:	b	17b8 <d_print_comp_inner+0xd88>
    1760:	ldp	x3, x2, [x19, #272]
    1764:	strb	wzr, [x19, #255]
    1768:	mov	x0, x19
    176c:	add	x20, x20, #0x1
    1770:	blr	x3
    1774:	strb	w21, [x19]
    1778:	ldr	x0, [x19, #320]
    177c:	str	x25, [x19, #256]
    1780:	strb	w21, [x19, #264]
    1784:	cmp	x23, x20
    1788:	add	x0, x0, #0x1
    178c:	str	x0, [x19, #320]
    1790:	b.eq	4284 <d_print_comp_inner+0x3854>  // b.none
    1794:	ldrb	w21, [x20]
    1798:	mov	x0, #0x1                   	// #1
    179c:	add	x1, x0, #0x1
    17a0:	str	x1, [x19, #256]
    17a4:	strb	w21, [x19, x0]
    17a8:	add	x20, x20, #0x1
    17ac:	strb	w21, [x19, #264]
    17b0:	cmp	x23, x20
    17b4:	b.eq	4284 <d_print_comp_inner+0x3854>  // b.none
    17b8:	ldrb	w21, [x20]
    17bc:	cmp	x1, #0xff
    17c0:	b.eq	1760 <d_print_comp_inner+0xd30>  // b.none
    17c4:	mov	x0, x1
    17c8:	b	179c <d_print_comp_inner+0xd6c>
    17cc:	adrp	x20, 0 <d_make_comp>
    17d0:	add	x20, x20, #0x0
    17d4:	mov	x0, x20
    17d8:	bl	0 <__asan_internal_strlen>
    17dc:	cbz	x0, 4040 <d_print_comp_inner+0x3610>
    17e0:	add	x23, x20, x0
    17e4:	mov	x25, #0x1                   	// #1
    17e8:	ldr	x1, [x19, #256]
    17ec:	b	1848 <d_print_comp_inner+0xe18>
    17f0:	ldp	x3, x2, [x19, #272]
    17f4:	strb	wzr, [x19, #255]
    17f8:	mov	x0, x19
    17fc:	add	x20, x20, #0x1
    1800:	blr	x3
    1804:	strb	w21, [x19]
    1808:	ldr	x0, [x19, #320]
    180c:	str	x25, [x19, #256]
    1810:	strb	w21, [x19, #264]
    1814:	cmp	x20, x23
    1818:	add	x0, x0, #0x1
    181c:	str	x0, [x19, #320]
    1820:	b.eq	4040 <d_print_comp_inner+0x3610>  // b.none
    1824:	ldrb	w21, [x20]
    1828:	mov	x0, #0x1                   	// #1
    182c:	add	x1, x0, #0x1
    1830:	str	x1, [x19, #256]
    1834:	strb	w21, [x19, x0]
    1838:	add	x20, x20, #0x1
    183c:	strb	w21, [x19, #264]
    1840:	cmp	x23, x20
    1844:	b.eq	4040 <d_print_comp_inner+0x3610>  // b.none
    1848:	ldrb	w21, [x20]
    184c:	cmp	x1, #0xff
    1850:	b.eq	17f0 <d_print_comp_inner+0xdc0>  // b.none
    1854:	mov	x0, x1
    1858:	b	182c <d_print_comp_inner+0xdfc>
    185c:	adrp	x20, 0 <d_make_comp>
    1860:	add	x20, x20, #0x0
    1864:	mov	x0, x20
    1868:	bl	0 <__asan_internal_strlen>
    186c:	cbz	x0, 3e9c <d_print_comp_inner+0x346c>
    1870:	add	x23, x20, x0
    1874:	mov	x25, #0x1                   	// #1
    1878:	ldr	x1, [x19, #256]
    187c:	b	18d8 <d_print_comp_inner+0xea8>
    1880:	ldp	x3, x2, [x19, #272]
    1884:	strb	wzr, [x19, #255]
    1888:	mov	x0, x19
    188c:	add	x20, x20, #0x1
    1890:	blr	x3
    1894:	strb	w21, [x19]
    1898:	ldr	x0, [x19, #320]
    189c:	str	x25, [x19, #256]
    18a0:	strb	w21, [x19, #264]
    18a4:	cmp	x23, x20
    18a8:	add	x0, x0, #0x1
    18ac:	str	x0, [x19, #320]
    18b0:	b.eq	3e9c <d_print_comp_inner+0x346c>  // b.none
    18b4:	ldrb	w21, [x20]
    18b8:	mov	x0, #0x1                   	// #1
    18bc:	add	x1, x0, #0x1
    18c0:	str	x1, [x19, #256]
    18c4:	strb	w21, [x19, x0]
    18c8:	add	x20, x20, #0x1
    18cc:	strb	w21, [x19, #264]
    18d0:	cmp	x23, x20
    18d4:	b.eq	3e9c <d_print_comp_inner+0x346c>  // b.none
    18d8:	ldrb	w21, [x20]
    18dc:	cmp	x1, #0xff
    18e0:	b.eq	1880 <d_print_comp_inner+0xe50>  // b.none
    18e4:	mov	x0, x1
    18e8:	b	18bc <d_print_comp_inner+0xe8c>
    18ec:	adrp	x20, 0 <d_make_comp>
    18f0:	add	x20, x20, #0x0
    18f4:	mov	x0, x20
    18f8:	bl	0 <__asan_internal_strlen>
    18fc:	cbz	x0, 3fc0 <d_print_comp_inner+0x3590>
    1900:	add	x23, x20, x0
    1904:	mov	x25, #0x1                   	// #1
    1908:	ldr	x1, [x19, #256]
    190c:	b	1968 <d_print_comp_inner+0xf38>
    1910:	ldp	x3, x2, [x19, #272]
    1914:	strb	wzr, [x19, #255]
    1918:	mov	x0, x19
    191c:	add	x20, x20, #0x1
    1920:	blr	x3
    1924:	strb	w21, [x19]
    1928:	ldr	x0, [x19, #320]
    192c:	str	x25, [x19, #256]
    1930:	strb	w21, [x19, #264]
    1934:	cmp	x23, x20
    1938:	add	x0, x0, #0x1
    193c:	str	x0, [x19, #320]
    1940:	b.eq	3fc0 <d_print_comp_inner+0x3590>  // b.none
    1944:	ldrb	w21, [x20]
    1948:	mov	x0, #0x1                   	// #1
    194c:	add	x1, x0, #0x1
    1950:	str	x1, [x19, #256]
    1954:	strb	w21, [x19, x0]
    1958:	add	x20, x20, #0x1
    195c:	strb	w21, [x19, #264]
    1960:	cmp	x23, x20
    1964:	b.eq	3fc0 <d_print_comp_inner+0x3590>  // b.none
    1968:	ldrb	w21, [x20]
    196c:	cmp	x1, #0xff
    1970:	b.eq	1910 <d_print_comp_inner+0xee0>  // b.none
    1974:	mov	x0, x1
    1978:	b	194c <d_print_comp_inner+0xf1c>
    197c:	adrp	x20, 0 <d_make_comp>
    1980:	add	x20, x20, #0x0
    1984:	mov	x0, x20
    1988:	bl	0 <__asan_internal_strlen>
    198c:	cbz	x0, 3c9c <d_print_comp_inner+0x326c>
    1990:	add	x23, x20, x0
    1994:	mov	x25, #0x1                   	// #1
    1998:	ldr	x1, [x19, #256]
    199c:	b	19f8 <d_print_comp_inner+0xfc8>
    19a0:	ldp	x3, x2, [x19, #272]
    19a4:	strb	wzr, [x19, #255]
    19a8:	mov	x0, x19
    19ac:	add	x20, x20, #0x1
    19b0:	blr	x3
    19b4:	strb	w21, [x19]
    19b8:	ldr	x0, [x19, #320]
    19bc:	str	x25, [x19, #256]
    19c0:	strb	w21, [x19, #264]
    19c4:	cmp	x23, x20
    19c8:	add	x0, x0, #0x1
    19cc:	str	x0, [x19, #320]
    19d0:	b.eq	3c9c <d_print_comp_inner+0x326c>  // b.none
    19d4:	ldrb	w21, [x20]
    19d8:	mov	x0, #0x1                   	// #1
    19dc:	add	x1, x0, #0x1
    19e0:	str	x1, [x19, #256]
    19e4:	strb	w21, [x19, x0]
    19e8:	add	x20, x20, #0x1
    19ec:	strb	w21, [x19, #264]
    19f0:	cmp	x23, x20
    19f4:	b.eq	3c9c <d_print_comp_inner+0x326c>  // b.none
    19f8:	ldrb	w21, [x20]
    19fc:	cmp	x1, #0xff
    1a00:	b.eq	19a0 <d_print_comp_inner+0xf70>  // b.none
    1a04:	mov	x0, x1
    1a08:	b	19dc <d_print_comp_inner+0xfac>
    1a0c:	adrp	x20, 0 <d_make_comp>
    1a10:	add	x20, x20, #0x0
    1a14:	mov	x0, x20
    1a18:	bl	0 <__asan_internal_strlen>
    1a1c:	cbz	x0, 3d1c <d_print_comp_inner+0x32ec>
    1a20:	add	x23, x20, x0
    1a24:	mov	x25, #0x1                   	// #1
    1a28:	ldr	x1, [x19, #256]
    1a2c:	b	1a88 <d_print_comp_inner+0x1058>
    1a30:	ldp	x3, x2, [x19, #272]
    1a34:	strb	wzr, [x19, #255]
    1a38:	mov	x0, x19
    1a3c:	add	x20, x20, #0x1
    1a40:	blr	x3
    1a44:	strb	w21, [x19]
    1a48:	ldr	x0, [x19, #320]
    1a4c:	str	x25, [x19, #256]
    1a50:	strb	w21, [x19, #264]
    1a54:	cmp	x23, x20
    1a58:	add	x0, x0, #0x1
    1a5c:	str	x0, [x19, #320]
    1a60:	b.eq	3d1c <d_print_comp_inner+0x32ec>  // b.none
    1a64:	ldrb	w21, [x20]
    1a68:	mov	x0, #0x1                   	// #1
    1a6c:	add	x1, x0, #0x1
    1a70:	str	x1, [x19, #256]
    1a74:	strb	w21, [x19, x0]
    1a78:	add	x20, x20, #0x1
    1a7c:	strb	w21, [x19, #264]
    1a80:	cmp	x23, x20
    1a84:	b.eq	3d1c <d_print_comp_inner+0x32ec>  // b.none
    1a88:	ldrb	w21, [x20]
    1a8c:	cmp	x1, #0xff
    1a90:	b.eq	1a30 <d_print_comp_inner+0x1000>  // b.none
    1a94:	mov	x0, x1
    1a98:	b	1a6c <d_print_comp_inner+0x103c>
    1a9c:	adrp	x20, 0 <d_make_comp>
    1aa0:	add	x20, x20, #0x0
    1aa4:	mov	x0, x20
    1aa8:	bl	0 <__asan_internal_strlen>
    1aac:	cbz	x0, 3c1c <d_print_comp_inner+0x31ec>
    1ab0:	add	x23, x20, x0
    1ab4:	mov	x25, #0x1                   	// #1
    1ab8:	ldr	x1, [x19, #256]
    1abc:	b	1b18 <d_print_comp_inner+0x10e8>
    1ac0:	ldp	x3, x2, [x19, #272]
    1ac4:	strb	wzr, [x19, #255]
    1ac8:	mov	x0, x19
    1acc:	add	x20, x20, #0x1
    1ad0:	blr	x3
    1ad4:	strb	w21, [x19]
    1ad8:	ldr	x0, [x19, #320]
    1adc:	str	x25, [x19, #256]
    1ae0:	strb	w21, [x19, #264]
    1ae4:	cmp	x20, x23
    1ae8:	add	x0, x0, #0x1
    1aec:	str	x0, [x19, #320]
    1af0:	b.eq	3c1c <d_print_comp_inner+0x31ec>  // b.none
    1af4:	ldrb	w21, [x20]
    1af8:	mov	x0, #0x1                   	// #1
    1afc:	add	x1, x0, #0x1
    1b00:	str	x1, [x19, #256]
    1b04:	strb	w21, [x19, x0]
    1b08:	add	x20, x20, #0x1
    1b0c:	strb	w21, [x19, #264]
    1b10:	cmp	x23, x20
    1b14:	b.eq	3c1c <d_print_comp_inner+0x31ec>  // b.none
    1b18:	ldrb	w21, [x20]
    1b1c:	cmp	x1, #0xff
    1b20:	b.eq	1ac0 <d_print_comp_inner+0x1090>  // b.none
    1b24:	mov	x0, x1
    1b28:	b	1afc <d_print_comp_inner+0x10cc>
    1b2c:	ldr	x1, [x2, #8]
    1b30:	mov	x0, x19
    1b34:	mov	w23, #0x0                   	// #0
    1b38:	bl	360 <d_find_pack>
    1b3c:	cbz	x0, 6b4c <d_print_comp_inner+0x611c>
    1b40:	stp	x27, x28, [sp, #80]
    1b44:	nop
    1b48:	ldr	w1, [x0]
    1b4c:	cmp	w1, #0x2f
    1b50:	b.ne	4e2c <d_print_comp_inner+0x43fc>  // b.any
    1b54:	ldr	x1, [x0, #8]
    1b58:	cbz	x1, 4e2c <d_print_comp_inner+0x43fc>
    1b5c:	ldr	x0, [x0, #16]
    1b60:	add	w23, w23, #0x1
    1b64:	cbnz	x0, 1b48 <d_print_comp_inner+0x1118>
    1b68:	ldr	x28, [x24, #8]
    1b6c:	sub	w0, w23, #0x1
    1b70:	str	w0, [sp, #100]
    1b74:	cmp	w0, #0x0
    1b78:	b.le	34a0 <d_print_comp_inner+0x2a70>
    1b7c:	adrp	x24, 0 <d_make_comp>
    1b80:	add	x24, x24, #0x0
    1b84:	add	x0, sp, #0x90
    1b88:	mov	x25, #0x1                   	// #1
    1b8c:	str	x0, [sp, #104]
    1b90:	str	w21, [x19, #316]
    1b94:	cbz	x28, 352c <d_print_comp_inner+0x2afc>
    1b98:	ldr	w0, [x28, #4]
    1b9c:	cmp	w0, #0x1
    1ba0:	b.gt	352c <d_print_comp_inner+0x2afc>
    1ba4:	ldr	w1, [x19, #308]
    1ba8:	cmp	w1, #0x400
    1bac:	b.gt	352c <d_print_comp_inner+0x2afc>
    1bb0:	add	w0, w0, #0x1
    1bb4:	add	w1, w1, #0x1
    1bb8:	ldr	x3, [x19, #328]
    1bbc:	str	w0, [x28, #4]
    1bc0:	ldr	x0, [sp, #104]
    1bc4:	str	w1, [x19, #308]
    1bc8:	str	x0, [x19, #328]
    1bcc:	mov	w1, w22
    1bd0:	mov	x0, x19
    1bd4:	mov	x2, x28
    1bd8:	stp	x28, x3, [sp, #144]
    1bdc:	bl	a30 <d_print_comp_inner>
    1be0:	ldr	w1, [x28, #4]
    1be4:	ldr	x0, [sp, #152]
    1be8:	str	x0, [x19, #328]
    1bec:	ldr	w0, [x19, #308]
    1bf0:	sub	w1, w1, #0x1
    1bf4:	str	w1, [x28, #4]
    1bf8:	sub	w0, w0, #0x1
    1bfc:	str	w0, [x19, #308]
    1c00:	mov	x0, x24
    1c04:	bl	0 <__asan_internal_strlen>
    1c08:	cbz	x0, 3488 <d_print_comp_inner+0x2a58>
    1c0c:	add	x27, x24, x0
    1c10:	mov	x20, x24
    1c14:	ldr	x1, [x19, #256]
    1c18:	b	1c74 <d_print_comp_inner+0x1244>
    1c1c:	ldp	x6, x2, [x19, #272]
    1c20:	strb	wzr, [x19, #255]
    1c24:	mov	x0, x19
    1c28:	add	x20, x20, #0x1
    1c2c:	blr	x6
    1c30:	strb	w26, [x19]
    1c34:	ldr	x0, [x19, #320]
    1c38:	str	x25, [x19, #256]
    1c3c:	strb	w26, [x19, #264]
    1c40:	cmp	x20, x27
    1c44:	add	x0, x0, #0x1
    1c48:	str	x0, [x19, #320]
    1c4c:	b.eq	3488 <d_print_comp_inner+0x2a58>  // b.none
    1c50:	ldrb	w26, [x20]
    1c54:	mov	x0, #0x1                   	// #1
    1c58:	add	x1, x0, #0x1
    1c5c:	str	x1, [x19, #256]
    1c60:	strb	w26, [x19, x0]
    1c64:	add	x20, x20, #0x1
    1c68:	strb	w26, [x19, #264]
    1c6c:	cmp	x27, x20
    1c70:	b.eq	3488 <d_print_comp_inner+0x2a58>  // b.none
    1c74:	ldrb	w26, [x20]
    1c78:	cmp	x1, #0xff
    1c7c:	b.eq	1c1c <d_print_comp_inner+0x11ec>  // b.none
    1c80:	mov	x0, x1
    1c84:	b	1c58 <d_print_comp_inner+0x1228>
    1c88:	ldr	x20, [x2, #8]
    1c8c:	cbz	x20, 4a3c <d_print_comp_inner+0x400c>
    1c90:	ldr	w0, [x20, #4]
    1c94:	cmp	w0, #0x1
    1c98:	b.gt	4a3c <d_print_comp_inner+0x400c>
    1c9c:	ldr	w1, [x19, #308]
    1ca0:	cmp	w1, #0x400
    1ca4:	b.gt	4a3c <d_print_comp_inner+0x400c>
    1ca8:	ldr	x3, [x19, #328]
    1cac:	add	w0, w0, #0x1
    1cb0:	str	w0, [x20, #4]
    1cb4:	add	w1, w1, #0x1
    1cb8:	add	x0, sp, #0x90
    1cbc:	str	w1, [x19, #308]
    1cc0:	str	x0, [x19, #328]
    1cc4:	mov	w1, w22
    1cc8:	mov	x0, x19
    1ccc:	mov	x2, x20
    1cd0:	stp	x20, x3, [sp, #144]
    1cd4:	bl	a30 <d_print_comp_inner>
    1cd8:	ldr	w1, [x20, #4]
    1cdc:	ldr	x0, [sp, #152]
    1ce0:	str	x0, [x19, #328]
    1ce4:	ldr	w0, [x19, #308]
    1ce8:	sub	w1, w1, #0x1
    1cec:	str	w1, [x20, #4]
    1cf0:	sub	w0, w0, #0x1
    1cf4:	str	w0, [x19, #308]
    1cf8:	adrp	x20, 0 <d_make_comp>
    1cfc:	add	x20, x20, #0x0
    1d00:	mov	x0, x20
    1d04:	bl	0 <__asan_internal_strlen>
    1d08:	cbz	x0, 3ad8 <d_print_comp_inner+0x30a8>
    1d0c:	add	x23, x20, x0
    1d10:	mov	x25, #0x1                   	// #1
    1d14:	ldr	x1, [x19, #256]
    1d18:	b	1d74 <d_print_comp_inner+0x1344>
    1d1c:	ldp	x3, x2, [x19, #272]
    1d20:	strb	wzr, [x19, #255]
    1d24:	mov	x0, x19
    1d28:	add	x20, x20, #0x1
    1d2c:	blr	x3
    1d30:	strb	w21, [x19]
    1d34:	ldr	x0, [x19, #320]
    1d38:	str	x25, [x19, #256]
    1d3c:	strb	w21, [x19, #264]
    1d40:	cmp	x23, x20
    1d44:	add	x0, x0, #0x1
    1d48:	str	x0, [x19, #320]
    1d4c:	b.eq	3ad8 <d_print_comp_inner+0x30a8>  // b.none
    1d50:	ldrb	w21, [x20]
    1d54:	mov	x0, #0x1                   	// #1
    1d58:	add	x1, x0, #0x1
    1d5c:	str	x1, [x19, #256]
    1d60:	strb	w21, [x19, x0]
    1d64:	add	x20, x20, #0x1
    1d68:	strb	w21, [x19, #264]
    1d6c:	cmp	x23, x20
    1d70:	b.eq	3ad8 <d_print_comp_inner+0x30a8>  // b.none
    1d74:	ldrb	w21, [x20]
    1d78:	cmp	x1, #0xff
    1d7c:	b.eq	1d1c <d_print_comp_inner+0x12ec>  // b.none
    1d80:	mov	x0, x1
    1d84:	b	1d58 <d_print_comp_inner+0x1328>
    1d88:	ldr	x20, [x2, #8]
    1d8c:	cbz	x20, 4a48 <d_print_comp_inner+0x4018>
    1d90:	ldr	w0, [x20, #4]
    1d94:	cmp	w0, #0x1
    1d98:	b.gt	4a48 <d_print_comp_inner+0x4018>
    1d9c:	ldr	w1, [x19, #308]
    1da0:	cmp	w1, #0x400
    1da4:	b.gt	4a48 <d_print_comp_inner+0x4018>
    1da8:	ldr	x3, [x19, #328]
    1dac:	add	w0, w0, #0x1
    1db0:	str	w0, [x20, #4]
    1db4:	add	w1, w1, #0x1
    1db8:	add	x0, sp, #0x90
    1dbc:	str	w1, [x19, #308]
    1dc0:	str	x0, [x19, #328]
    1dc4:	mov	w1, w22
    1dc8:	mov	x0, x19
    1dcc:	mov	x2, x20
    1dd0:	stp	x20, x3, [sp, #144]
    1dd4:	bl	a30 <d_print_comp_inner>
    1dd8:	ldr	w1, [x20, #4]
    1ddc:	ldr	x0, [sp, #152]
    1de0:	str	x0, [x19, #328]
    1de4:	ldr	w0, [x19, #308]
    1de8:	sub	w1, w1, #0x1
    1dec:	str	w1, [x20, #4]
    1df0:	sub	w0, w0, #0x1
    1df4:	str	w0, [x19, #308]
    1df8:	adrp	x20, 0 <d_make_comp>
    1dfc:	add	x20, x20, #0x0
    1e00:	mov	x0, x20
    1e04:	bl	0 <__asan_internal_strlen>
    1e08:	cbz	x0, 40c0 <d_print_comp_inner+0x3690>
    1e0c:	add	x23, x20, x0
    1e10:	mov	x25, #0x1                   	// #1
    1e14:	ldr	x1, [x19, #256]
    1e18:	b	1e74 <d_print_comp_inner+0x1444>
    1e1c:	ldp	x3, x2, [x19, #272]
    1e20:	strb	wzr, [x19, #255]
    1e24:	mov	x0, x19
    1e28:	add	x20, x20, #0x1
    1e2c:	blr	x3
    1e30:	strb	w21, [x19]
    1e34:	ldr	x0, [x19, #320]
    1e38:	str	x25, [x19, #256]
    1e3c:	strb	w21, [x19, #264]
    1e40:	cmp	x20, x23
    1e44:	add	x0, x0, #0x1
    1e48:	str	x0, [x19, #320]
    1e4c:	b.eq	40c0 <d_print_comp_inner+0x3690>  // b.none
    1e50:	ldrb	w21, [x20]
    1e54:	mov	x0, #0x1                   	// #1
    1e58:	add	x1, x0, #0x1
    1e5c:	str	x1, [x19, #256]
    1e60:	strb	w21, [x19, x0]
    1e64:	add	x20, x20, #0x1
    1e68:	strb	w21, [x19, #264]
    1e6c:	cmp	x23, x20
    1e70:	b.eq	40c0 <d_print_comp_inner+0x3690>  // b.none
    1e74:	ldrb	w21, [x20]
    1e78:	cmp	x1, #0xff
    1e7c:	b.eq	1e1c <d_print_comp_inner+0x13ec>  // b.none
    1e80:	mov	x0, x1
    1e84:	b	1e58 <d_print_comp_inner+0x1428>
    1e88:	ldr	x20, [x2, #8]
    1e8c:	cbz	x20, 4994 <d_print_comp_inner+0x3f64>
    1e90:	ldr	w0, [x20, #4]
    1e94:	cmp	w0, #0x1
    1e98:	b.gt	4994 <d_print_comp_inner+0x3f64>
    1e9c:	ldr	w1, [x19, #308]
    1ea0:	cmp	w1, #0x400
    1ea4:	b.gt	4994 <d_print_comp_inner+0x3f64>
    1ea8:	ldr	x3, [x19, #328]
    1eac:	add	w0, w0, #0x1
    1eb0:	str	w0, [x20, #4]
    1eb4:	add	w1, w1, #0x1
    1eb8:	add	x0, sp, #0x90
    1ebc:	str	w1, [x19, #308]
    1ec0:	str	x0, [x19, #328]
    1ec4:	mov	w1, w22
    1ec8:	mov	x0, x19
    1ecc:	mov	x2, x20
    1ed0:	stp	x20, x3, [sp, #144]
    1ed4:	bl	a30 <d_print_comp_inner>
    1ed8:	ldr	w1, [x20, #4]
    1edc:	ldr	x0, [sp, #152]
    1ee0:	sub	w1, w1, #0x1
    1ee4:	ldp	x21, x22, [sp, #32]
    1ee8:	ldp	x23, x24, [sp, #48]
    1eec:	ldp	x25, x26, [sp, #64]
    1ef0:	str	x0, [x19, #328]
    1ef4:	ldr	w0, [x19, #308]
    1ef8:	str	w1, [x20, #4]
    1efc:	sub	w0, w0, #0x1
    1f00:	str	w0, [x19, #308]
    1f04:	b	a9c <d_print_comp_inner+0x6c>
    1f08:	and	w21, w22, #0xffffff9f
    1f0c:	ldr	x3, [x19, #296]
    1f10:	tbnz	w22, #5, 5af8 <d_print_comp_inner+0x50c8>
    1f14:	ldr	x20, [x2, #8]
    1f18:	cbz	x20, 1f20 <d_print_comp_inner+0x14f0>
    1f1c:	tbz	w22, #6, 62b8 <d_print_comp_inner+0x5888>
    1f20:	add	x2, x24, #0x10
    1f24:	mov	w1, w21
    1f28:	mov	x0, x19
    1f2c:	bl	8e28 <d_print_function_type.isra.0>
    1f30:	ldp	x21, x22, [sp, #32]
    1f34:	ldp	x23, x24, [sp, #48]
    1f38:	ldp	x25, x26, [sp, #64]
    1f3c:	b	a9c <d_print_comp_inner+0x6c>
    1f40:	ldr	x0, [x2, #8]
    1f44:	tbnz	w22, #2, 501c <d_print_comp_inner+0x45ec>
    1f48:	ldrsw	x22, [x0, #8]
    1f4c:	ldr	x20, [x0]
    1f50:	cbz	x22, 6cec <d_print_comp_inner+0x62bc>
    1f54:	add	x22, x20, x22
    1f58:	mov	x23, #0x1                   	// #1
    1f5c:	ldr	x1, [x19, #256]
    1f60:	b	1fbc <d_print_comp_inner+0x158c>
    1f64:	ldp	x3, x2, [x19, #272]
    1f68:	strb	wzr, [x19, #255]
    1f6c:	mov	x0, x19
    1f70:	add	x20, x20, #0x1
    1f74:	blr	x3
    1f78:	strb	w21, [x19]
    1f7c:	ldr	x0, [x19, #320]
    1f80:	str	x23, [x19, #256]
    1f84:	strb	w21, [x19, #264]
    1f88:	cmp	x22, x20
    1f8c:	add	x0, x0, #0x1
    1f90:	str	x0, [x19, #320]
    1f94:	b.eq	6814 <d_print_comp_inner+0x5de4>  // b.none
    1f98:	ldrb	w21, [x20]
    1f9c:	mov	x0, #0x1                   	// #1
    1fa0:	add	x1, x0, #0x1
    1fa4:	str	x1, [x19, #256]
    1fa8:	strb	w21, [x19, x0]
    1fac:	add	x20, x20, #0x1
    1fb0:	strb	w21, [x19, #264]
    1fb4:	cmp	x22, x20
    1fb8:	b.eq	5bf8 <d_print_comp_inner+0x51c8>  // b.none
    1fbc:	ldrb	w21, [x20]
    1fc0:	cmp	x1, #0xff
    1fc4:	b.eq	1f64 <d_print_comp_inner+0x1534>  // b.none
    1fc8:	mov	x0, x1
    1fcc:	b	1fa0 <d_print_comp_inner+0x1570>
    1fd0:	ldrsw	x21, [x2, #16]
    1fd4:	ldr	x20, [x2, #8]
    1fd8:	tbnz	w22, #2, 4e90 <d_print_comp_inner+0x4460>
    1fdc:	cbz	x21, 6d4c <d_print_comp_inner+0x631c>
    1fe0:	add	x22, x20, x21
    1fe4:	mov	x23, #0x1                   	// #1
    1fe8:	ldr	x1, [x19, #256]
    1fec:	b	2048 <d_print_comp_inner+0x1618>
    1ff0:	ldp	x3, x2, [x19, #272]
    1ff4:	strb	wzr, [x19, #255]
    1ff8:	mov	x0, x19
    1ffc:	add	x20, x20, #0x1
    2000:	blr	x3
    2004:	strb	w21, [x19]
    2008:	ldr	x0, [x19, #320]
    200c:	str	x23, [x19, #256]
    2010:	strb	w21, [x19, #264]
    2014:	cmp	x22, x20
    2018:	add	x0, x0, #0x1
    201c:	str	x0, [x19, #320]
    2020:	b.eq	6720 <d_print_comp_inner+0x5cf0>  // b.none
    2024:	ldrb	w21, [x20]
    2028:	mov	x0, #0x1                   	// #1
    202c:	add	x1, x0, #0x1
    2030:	str	x1, [x19, #256]
    2034:	strb	w21, [x19, x0]
    2038:	add	x20, x20, #0x1
    203c:	strb	w21, [x19, #264]
    2040:	cmp	x22, x20
    2044:	b.eq	5c28 <d_print_comp_inner+0x51f8>  // b.none
    2048:	ldrb	w21, [x20]
    204c:	cmp	x1, #0xff
    2050:	b.eq	1ff0 <d_print_comp_inner+0x15c0>  // b.none
    2054:	mov	x0, x1
    2058:	b	202c <d_print_comp_inner+0x15fc>
    205c:	adrp	x20, 0 <d_make_comp>
    2060:	add	x20, x20, #0x0
    2064:	mov	x0, x20
    2068:	bl	0 <__asan_internal_strlen>
    206c:	cbz	x0, 4700 <d_print_comp_inner+0x3cd0>
    2070:	add	x23, x20, x0
    2074:	mov	x25, #0x1                   	// #1
    2078:	ldr	x1, [x19, #256]
    207c:	b	20d8 <d_print_comp_inner+0x16a8>
    2080:	ldp	x3, x2, [x19, #272]
    2084:	strb	wzr, [x19, #255]
    2088:	mov	x0, x19
    208c:	add	x20, x20, #0x1
    2090:	blr	x3
    2094:	strb	w21, [x19]
    2098:	ldr	x0, [x19, #320]
    209c:	str	x25, [x19, #256]
    20a0:	strb	w21, [x19, #264]
    20a4:	cmp	x23, x20
    20a8:	add	x0, x0, #0x1
    20ac:	str	x0, [x19, #320]
    20b0:	b.eq	4700 <d_print_comp_inner+0x3cd0>  // b.none
    20b4:	ldrb	w21, [x20]
    20b8:	mov	x0, #0x1                   	// #1
    20bc:	add	x1, x0, #0x1
    20c0:	str	x1, [x19, #256]
    20c4:	strb	w21, [x19, x0]
    20c8:	add	x20, x20, #0x1
    20cc:	strb	w21, [x19, #264]
    20d0:	cmp	x23, x20
    20d4:	b.eq	4700 <d_print_comp_inner+0x3cd0>  // b.none
    20d8:	ldrb	w21, [x20]
    20dc:	cmp	x1, #0xff
    20e0:	b.eq	2080 <d_print_comp_inner+0x1650>  // b.none
    20e4:	mov	x0, x1
    20e8:	b	20bc <d_print_comp_inner+0x168c>
    20ec:	ldr	x0, [x2, #16]
    20f0:	ldr	w0, [x0]
    20f4:	cmp	w0, #0x39
    20f8:	b.ne	ac8 <d_print_comp_inner+0x98>  // b.any
    20fc:	ldr	x2, [x2, #8]
    2100:	ldr	x0, [x2, #8]
    2104:	ldr	x0, [x0]
    2108:	ldrb	w1, [x0, #1]
    210c:	cmp	w1, #0x63
    2110:	b.eq	64cc <d_print_comp_inner+0x5a9c>  // b.none
    2114:	add	x3, x24, #0x10
    2118:	mov	w1, w22
    211c:	mov	x0, x19
    2120:	bl	7508 <d_maybe_print_fold_expression.isra.0>
    2124:	cbnz	w0, 69b8 <d_print_comp_inner+0x5f88>
    2128:	ldr	x0, [x24, #8]
    212c:	ldr	w1, [x0]
    2130:	cmp	w1, #0x32
    2134:	b.eq	6b8c <d_print_comp_inner+0x615c>  // b.none
    2138:	ldr	x0, [x0, #8]
    213c:	adrp	x20, 0 <d_make_comp>
    2140:	add	x1, x20, #0x0
    2144:	ldr	x0, [x0]
    2148:	bl	0 <__asan_internal_strcmp>
    214c:	cbnz	w0, 6c60 <d_print_comp_inner+0x6230>
    2150:	ldr	x0, [x24, #16]
    2154:	ldr	x1, [x0, #8]
    2158:	ldr	w2, [x1]
    215c:	cmp	w2, #0x3
    2160:	b.eq	6d5c <d_print_comp_inner+0x632c>  // b.none
    2164:	ldr	x2, [x0, #8]
    2168:	mov	w1, w22
    216c:	mov	x0, x19
    2170:	bl	73b8 <d_print_subexpr>
    2174:	ldr	x0, [x24, #8]
    2178:	adrp	x1, 0 <d_make_comp>
    217c:	add	x1, x1, #0x0
    2180:	ldr	x0, [x0, #8]
    2184:	ldr	x0, [x0]
    2188:	bl	0 <__asan_internal_strcmp>
    218c:	cbnz	w0, 6c30 <d_print_comp_inner+0x6200>
    2190:	ldr	x1, [x19, #256]
    2194:	cmp	x1, #0xff
    2198:	b.ne	21c0 <d_print_comp_inner+0x1790>  // b.any
    219c:	ldp	x3, x2, [x19, #272]
    21a0:	strb	wzr, [x19, #255]
    21a4:	mov	x0, x19
    21a8:	blr	x3
    21ac:	str	xzr, [x19, #256]
    21b0:	ldr	x0, [x19, #320]
    21b4:	mov	x1, #0x0                   	// #0
    21b8:	add	x0, x0, #0x1
    21bc:	str	x0, [x19, #320]
    21c0:	add	x0, x1, #0x1
    21c4:	str	x0, [x19, #256]
    21c8:	mov	w2, #0x5b                  	// #91
    21cc:	strb	w2, [x19, x1]
    21d0:	strb	w2, [x19, #264]
    21d4:	ldr	x1, [x24, #16]
    21d8:	ldr	x20, [x1, #16]
    21dc:	cbz	x20, 6990 <d_print_comp_inner+0x5f60>
    21e0:	ldr	w2, [x20, #4]
    21e4:	cmp	w2, #0x1
    21e8:	b.gt	6990 <d_print_comp_inner+0x5f60>
    21ec:	ldr	w1, [x19, #308]
    21f0:	cmp	w1, #0x400
    21f4:	b.gt	6990 <d_print_comp_inner+0x5f60>
    21f8:	ldr	x3, [x19, #328]
    21fc:	add	w2, w2, #0x1
    2200:	str	w2, [x20, #4]
    2204:	add	w1, w1, #0x1
    2208:	add	x0, sp, #0x90
    220c:	str	w1, [x19, #308]
    2210:	str	x0, [x19, #328]
    2214:	mov	x2, x20
    2218:	mov	w1, w22
    221c:	mov	x0, x19
    2220:	stp	x20, x3, [sp, #144]
    2224:	bl	a30 <d_print_comp_inner>
    2228:	ldr	w2, [x20, #4]
    222c:	ldr	x0, [sp, #152]
    2230:	str	x0, [x19, #328]
    2234:	ldr	w1, [x19, #308]
    2238:	sub	w2, w2, #0x1
    223c:	ldr	x0, [x19, #256]
    2240:	str	w2, [x20, #4]
    2244:	sub	w1, w1, #0x1
    2248:	str	w1, [x19, #308]
    224c:	cmp	x0, #0xff
    2250:	b.ne	2278 <d_print_comp_inner+0x1848>  // b.any
    2254:	ldp	x3, x2, [x19, #272]
    2258:	strb	wzr, [x19, #255]
    225c:	mov	x1, x0
    2260:	mov	x0, x19
    2264:	blr	x3
    2268:	str	xzr, [x19, #256]
    226c:	ldr	x0, [x19, #320]
    2270:	add	x0, x0, #0x1
    2274:	str	x0, [x19, #320]
    2278:	ldr	x1, [x19, #256]
    227c:	mov	w0, #0x5d                  	// #93
    2280:	add	x2, x1, #0x1
    2284:	str	x2, [x19, #256]
    2288:	strb	w0, [x19, x1]
    228c:	strb	w0, [x19, #264]
    2290:	ldr	x0, [x24, #8]
    2294:	ldr	w1, [x0]
    2298:	cmp	w1, #0x32
    229c:	b.eq	6bf8 <d_print_comp_inner+0x61c8>  // b.none
    22a0:	ldp	x21, x22, [sp, #32]
    22a4:	ldp	x23, x24, [sp, #48]
    22a8:	ldp	x25, x26, [sp, #64]
    22ac:	b	a9c <d_print_comp_inner+0x6c>
    22b0:	adrp	x20, 0 <d_make_comp>
    22b4:	add	x20, x20, #0x0
    22b8:	mov	x0, x20
    22bc:	bl	0 <__asan_internal_strlen>
    22c0:	cbz	x0, 4184 <d_print_comp_inner+0x3754>
    22c4:	add	x23, x20, x0
    22c8:	mov	x25, #0x1                   	// #1
    22cc:	ldr	x1, [x19, #256]
    22d0:	b	232c <d_print_comp_inner+0x18fc>
    22d4:	ldp	x3, x2, [x19, #272]
    22d8:	strb	wzr, [x19, #255]
    22dc:	mov	x0, x19
    22e0:	add	x20, x20, #0x1
    22e4:	blr	x3
    22e8:	strb	w21, [x19]
    22ec:	ldr	x0, [x19, #320]
    22f0:	str	x25, [x19, #256]
    22f4:	strb	w21, [x19, #264]
    22f8:	cmp	x20, x23
    22fc:	add	x0, x0, #0x1
    2300:	str	x0, [x19, #320]
    2304:	b.eq	4184 <d_print_comp_inner+0x3754>  // b.none
    2308:	ldrb	w21, [x20]
    230c:	mov	x0, #0x1                   	// #1
    2310:	add	x1, x0, #0x1
    2314:	str	x1, [x19, #256]
    2318:	strb	w21, [x19, x0]
    231c:	add	x20, x20, #0x1
    2320:	strb	w21, [x19, #264]
    2324:	cmp	x23, x20
    2328:	b.eq	4184 <d_print_comp_inner+0x3754>  // b.none
    232c:	ldrb	w21, [x20]
    2330:	cmp	x1, #0xff
    2334:	b.eq	22d4 <d_print_comp_inner+0x18a4>  // b.none
    2338:	mov	x0, x1
    233c:	b	2310 <d_print_comp_inner+0x18e0>
    2340:	ldr	x2, [x2, #8]
    2344:	mov	w1, w22
    2348:	mov	x0, x19
    234c:	bl	7250 <d_print_expr_op>
    2350:	ldp	x21, x22, [sp, #32]
    2354:	ldp	x23, x24, [sp, #48]
    2358:	ldp	x25, x26, [sp, #64]
    235c:	b	a9c <d_print_comp_inner+0x6c>
    2360:	ldp	x23, x20, [x2, #8]
    2364:	mov	x21, #0x0                   	// #0
    2368:	ldr	w0, [x23]
    236c:	cmp	w0, #0x32
    2370:	b.eq	5e44 <d_print_comp_inner+0x5414>  // b.none
    2374:	cmp	w0, #0x34
    2378:	b.eq	53b8 <d_print_comp_inner+0x4988>  // b.none
    237c:	mov	x2, x23
    2380:	mov	w1, w22
    2384:	mov	x0, x19
    2388:	bl	7250 <d_print_expr_op>
    238c:	cbz	x21, 4de0 <d_print_comp_inner+0x43b0>
    2390:	adrp	x1, 0 <d_make_comp>
    2394:	mov	x0, x21
    2398:	add	x1, x1, #0x0
    239c:	bl	0 <__asan_internal_strcmp>
    23a0:	cbz	w0, 6784 <d_print_comp_inner+0x5d54>
    23a4:	adrp	x1, 0 <d_make_comp>
    23a8:	mov	x0, x21
    23ac:	add	x1, x1, #0x0
    23b0:	bl	0 <__asan_internal_strcmp>
    23b4:	cbnz	w0, 4de0 <d_print_comp_inner+0x43b0>
    23b8:	ldr	x1, [x19, #256]
    23bc:	cmp	x1, #0xff
    23c0:	b.ne	23e4 <d_print_comp_inner+0x19b4>  // b.any
    23c4:	ldp	x3, x2, [x19, #272]
    23c8:	strb	wzr, [x19, #255]
    23cc:	mov	x0, x19
    23d0:	blr	x3
    23d4:	ldr	x0, [x19, #320]
    23d8:	mov	x1, #0x0                   	// #0
    23dc:	add	x0, x0, #0x1
    23e0:	str	x0, [x19, #320]
    23e4:	add	x0, x1, #0x1
    23e8:	str	x0, [x19, #256]
    23ec:	mov	w2, #0x28                  	// #40
    23f0:	strb	w2, [x19, x1]
    23f4:	strb	w2, [x19, #264]
    23f8:	cbz	x20, 62ac <d_print_comp_inner+0x587c>
    23fc:	ldr	w2, [x20, #4]
    2400:	cmp	w2, #0x1
    2404:	b.gt	62ac <d_print_comp_inner+0x587c>
    2408:	ldr	w1, [x19, #308]
    240c:	cmp	w1, #0x400
    2410:	b.gt	62ac <d_print_comp_inner+0x587c>
    2414:	ldr	x3, [x19, #328]
    2418:	add	w2, w2, #0x1
    241c:	str	w2, [x20, #4]
    2420:	add	w1, w1, #0x1
    2424:	add	x0, sp, #0x90
    2428:	str	w1, [x19, #308]
    242c:	str	x0, [x19, #328]
    2430:	mov	x2, x20
    2434:	mov	w1, w22
    2438:	mov	x0, x19
    243c:	stp	x20, x3, [sp, #144]
    2440:	bl	a30 <d_print_comp_inner>
    2444:	ldr	w2, [x20, #4]
    2448:	ldr	x0, [sp, #152]
    244c:	str	x0, [x19, #328]
    2450:	ldr	w1, [x19, #308]
    2454:	sub	w2, w2, #0x1
    2458:	ldr	x0, [x19, #256]
    245c:	str	w2, [x20, #4]
    2460:	sub	w1, w1, #0x1
    2464:	str	w1, [x19, #308]
    2468:	cmp	x0, #0xff
    246c:	b.ne	2494 <d_print_comp_inner+0x1a64>  // b.any
    2470:	ldp	x3, x2, [x19, #272]
    2474:	strb	wzr, [x19, #255]
    2478:	mov	x1, x0
    247c:	mov	x0, x19
    2480:	blr	x3
    2484:	ldr	x1, [x19, #320]
    2488:	mov	x0, #0x0                   	// #0
    248c:	add	x1, x1, #0x1
    2490:	str	x1, [x19, #320]
    2494:	add	x1, x0, #0x1
    2498:	str	x1, [x19, #256]
    249c:	mov	w1, #0x29                  	// #41
    24a0:	strb	w1, [x19, x0]
    24a4:	strb	w1, [x19, #264]
    24a8:	ldp	x21, x22, [sp, #32]
    24ac:	ldp	x23, x24, [sp, #48]
    24b0:	ldp	x25, x26, [sp, #64]
    24b4:	b	a9c <d_print_comp_inner+0x6c>
    24b8:	ldr	x1, [x19, #256]
    24bc:	ldrb	w20, [x2, #8]
    24c0:	add	x0, x1, #0x1
    24c4:	cmp	x1, #0xff
    24c8:	b.ne	24f0 <d_print_comp_inner+0x1ac0>  // b.any
    24cc:	ldp	x3, x2, [x19, #272]
    24d0:	strb	wzr, [x19, #255]
    24d4:	mov	x0, x19
    24d8:	blr	x3
    24dc:	ldr	x2, [x19, #320]
    24e0:	mov	x0, #0x1                   	// #1
    24e4:	mov	x1, #0x0                   	// #0
    24e8:	add	x2, x2, x0
    24ec:	str	x2, [x19, #320]
    24f0:	str	x0, [x19, #256]
    24f4:	strb	w20, [x19, x1]
    24f8:	strb	w20, [x19, #264]
    24fc:	ldp	x21, x22, [sp, #32]
    2500:	ldp	x23, x24, [sp, #48]
    2504:	ldp	x25, x26, [sp, #64]
    2508:	b	a9c <d_print_comp_inner+0x6c>
    250c:	ldr	w2, [x2, #8]
    2510:	adrp	x1, 0 <d_make_comp>
    2514:	add	x1, x1, #0x0
    2518:	add	x20, sp, #0x90
    251c:	mov	x0, x20
    2520:	bl	0 <sprintf>
    2524:	mov	x0, x20
    2528:	bl	0 <__asan_internal_strlen>
    252c:	cbz	x0, 6a9c <d_print_comp_inner+0x606c>
    2530:	add	x22, x20, x0
    2534:	mov	x23, #0x1                   	// #1
    2538:	ldr	x1, [x19, #256]
    253c:	b	2598 <d_print_comp_inner+0x1b68>
    2540:	ldp	x3, x2, [x19, #272]
    2544:	strb	wzr, [x19, #255]
    2548:	mov	x0, x19
    254c:	add	x20, x20, #0x1
    2550:	blr	x3
    2554:	strb	w21, [x19]
    2558:	ldr	x0, [x19, #320]
    255c:	str	x23, [x19, #256]
    2560:	strb	w21, [x19, #264]
    2564:	cmp	x20, x22
    2568:	add	x0, x0, #0x1
    256c:	str	x0, [x19, #320]
    2570:	b.eq	5b98 <d_print_comp_inner+0x5168>  // b.none
    2574:	ldrb	w21, [x20]
    2578:	mov	x0, #0x1                   	// #1
    257c:	add	x1, x0, #0x1
    2580:	str	x1, [x19, #256]
    2584:	strb	w21, [x19, x0]
    2588:	add	x20, x20, #0x1
    258c:	strb	w21, [x19, #264]
    2590:	cmp	x22, x20
    2594:	b.eq	4e1c <d_print_comp_inner+0x43ec>  // b.none
    2598:	ldrb	w21, [x20]
    259c:	cmp	x1, #0xff
    25a0:	b.eq	2540 <d_print_comp_inner+0x1b10>  // b.none
    25a4:	mov	x0, x1
    25a8:	b	257c <d_print_comp_inner+0x1b4c>
    25ac:	adrp	x20, 0 <d_make_comp>
    25b0:	add	x20, x20, #0x0
    25b4:	mov	x0, x20
    25b8:	bl	0 <__asan_internal_strlen>
    25bc:	cbz	x0, 4384 <d_print_comp_inner+0x3954>
    25c0:	add	x23, x20, x0
    25c4:	mov	x25, #0x1                   	// #1
    25c8:	ldr	x1, [x19, #256]
    25cc:	b	2628 <d_print_comp_inner+0x1bf8>
    25d0:	ldp	x3, x2, [x19, #272]
    25d4:	strb	wzr, [x19, #255]
    25d8:	mov	x0, x19
    25dc:	add	x20, x20, #0x1
    25e0:	blr	x3
    25e4:	strb	w21, [x19]
    25e8:	ldr	x0, [x19, #320]
    25ec:	str	x25, [x19, #256]
    25f0:	strb	w21, [x19, #264]
    25f4:	cmp	x20, x23
    25f8:	add	x0, x0, #0x1
    25fc:	str	x0, [x19, #320]
    2600:	b.eq	4384 <d_print_comp_inner+0x3954>  // b.none
    2604:	ldrb	w21, [x20]
    2608:	mov	x0, #0x1                   	// #1
    260c:	add	x1, x0, #0x1
    2610:	str	x1, [x19, #256]
    2614:	strb	w21, [x19, x0]
    2618:	add	x20, x20, #0x1
    261c:	strb	w21, [x19, #264]
    2620:	cmp	x23, x20
    2624:	b.eq	4384 <d_print_comp_inner+0x3954>  // b.none
    2628:	ldrb	w21, [x20]
    262c:	cmp	x1, #0xff
    2630:	b.eq	25d0 <d_print_comp_inner+0x1ba0>  // b.none
    2634:	mov	x0, x1
    2638:	b	260c <d_print_comp_inner+0x1bdc>
    263c:	adrp	x20, 0 <d_make_comp>
    2640:	add	x20, x20, #0x0
    2644:	mov	x0, x20
    2648:	bl	0 <__asan_internal_strlen>
    264c:	cbz	x0, 3958 <d_print_comp_inner+0x2f28>
    2650:	add	x23, x20, x0
    2654:	mov	x25, #0x1                   	// #1
    2658:	ldr	x1, [x19, #256]
    265c:	b	26b8 <d_print_comp_inner+0x1c88>
    2660:	ldp	x3, x2, [x19, #272]
    2664:	strb	wzr, [x19, #255]
    2668:	mov	x0, x19
    266c:	add	x20, x20, #0x1
    2670:	blr	x3
    2674:	strb	w21, [x19]
    2678:	ldr	x0, [x19, #320]
    267c:	str	x25, [x19, #256]
    2680:	strb	w21, [x19, #264]
    2684:	cmp	x20, x23
    2688:	add	x0, x0, #0x1
    268c:	str	x0, [x19, #320]
    2690:	b.eq	3958 <d_print_comp_inner+0x2f28>  // b.none
    2694:	ldrb	w21, [x20]
    2698:	mov	x0, #0x1                   	// #1
    269c:	add	x1, x0, #0x1
    26a0:	str	x1, [x19, #256]
    26a4:	strb	w21, [x19, x0]
    26a8:	add	x20, x20, #0x1
    26ac:	strb	w21, [x19, #264]
    26b0:	cmp	x23, x20
    26b4:	b.eq	3958 <d_print_comp_inner+0x2f28>  // b.none
    26b8:	ldrb	w21, [x20]
    26bc:	cmp	x1, #0xff
    26c0:	b.eq	2660 <d_print_comp_inner+0x1c30>  // b.none
    26c4:	mov	x0, x1
    26c8:	b	269c <d_print_comp_inner+0x1c6c>
    26cc:	ldr	x20, [x2, #8]
    26d0:	cbz	x20, 4a9c <d_print_comp_inner+0x406c>
    26d4:	ldr	w0, [x20, #4]
    26d8:	cmp	w0, #0x1
    26dc:	b.gt	4a9c <d_print_comp_inner+0x406c>
    26e0:	ldr	w1, [x19, #308]
    26e4:	cmp	w1, #0x400
    26e8:	b.gt	4a9c <d_print_comp_inner+0x406c>
    26ec:	ldr	x3, [x19, #328]
    26f0:	add	w0, w0, #0x1
    26f4:	str	w0, [x20, #4]
    26f8:	add	w1, w1, #0x1
    26fc:	add	x0, sp, #0x90
    2700:	str	w1, [x19, #308]
    2704:	str	x0, [x19, #328]
    2708:	mov	w1, w22
    270c:	mov	x0, x19
    2710:	mov	x2, x20
    2714:	stp	x20, x3, [sp, #144]
    2718:	bl	a30 <d_print_comp_inner>
    271c:	ldr	w1, [x20, #4]
    2720:	ldr	x0, [sp, #152]
    2724:	str	x0, [x19, #328]
    2728:	ldr	w0, [x19, #308]
    272c:	sub	w1, w1, #0x1
    2730:	str	w1, [x20, #4]
    2734:	sub	w0, w0, #0x1
    2738:	str	w0, [x19, #308]
    273c:	ldr	x20, [x24, #16]
    2740:	cbz	x20, 4a84 <d_print_comp_inner+0x4054>
    2744:	ldr	w0, [x20, #4]
    2748:	cmp	w0, #0x1
    274c:	b.gt	4a84 <d_print_comp_inner+0x4054>
    2750:	ldr	w1, [x19, #308]
    2754:	cmp	w1, #0x400
    2758:	b.gt	4a84 <d_print_comp_inner+0x4054>
    275c:	ldr	x3, [x19, #328]
    2760:	add	w0, w0, #0x1
    2764:	str	w0, [x20, #4]
    2768:	add	w1, w1, #0x1
    276c:	add	x0, sp, #0x90
    2770:	str	w1, [x19, #308]
    2774:	str	x0, [x19, #328]
    2778:	mov	w1, w22
    277c:	mov	x0, x19
    2780:	mov	x2, x20
    2784:	stp	x20, x3, [sp, #144]
    2788:	bl	a30 <d_print_comp_inner>
    278c:	ldr	w1, [x20, #4]
    2790:	ldr	x0, [sp, #152]
    2794:	sub	w1, w1, #0x1
    2798:	ldp	x21, x22, [sp, #32]
    279c:	ldp	x23, x24, [sp, #48]
    27a0:	ldp	x25, x26, [sp, #64]
    27a4:	str	x0, [x19, #328]
    27a8:	ldr	w0, [x19, #308]
    27ac:	str	w1, [x20, #4]
    27b0:	sub	w0, w0, #0x1
    27b4:	str	w0, [x19, #308]
    27b8:	b	a9c <d_print_comp_inner+0x6c>
    27bc:	adrp	x20, 0 <d_make_comp>
    27c0:	add	x20, x20, #0x0
    27c4:	mov	x0, x20
    27c8:	bl	0 <__asan_internal_strlen>
    27cc:	cbz	x0, 3758 <d_print_comp_inner+0x2d28>
    27d0:	add	x23, x20, x0
    27d4:	mov	x25, #0x1                   	// #1
    27d8:	ldr	x1, [x19, #256]
    27dc:	b	2838 <d_print_comp_inner+0x1e08>
    27e0:	ldp	x3, x2, [x19, #272]
    27e4:	strb	wzr, [x19, #255]
    27e8:	mov	x0, x19
    27ec:	add	x20, x20, #0x1
    27f0:	blr	x3
    27f4:	strb	w21, [x19]
    27f8:	ldr	x0, [x19, #320]
    27fc:	str	x25, [x19, #256]
    2800:	strb	w21, [x19, #264]
    2804:	cmp	x20, x23
    2808:	add	x0, x0, #0x1
    280c:	str	x0, [x19, #320]
    2810:	b.eq	3758 <d_print_comp_inner+0x2d28>  // b.none
    2814:	ldrb	w21, [x20]
    2818:	mov	x0, #0x1                   	// #1
    281c:	add	x1, x0, #0x1
    2820:	str	x1, [x19, #256]
    2824:	strb	w21, [x19, x0]
    2828:	add	x20, x20, #0x1
    282c:	strb	w21, [x19, #264]
    2830:	cmp	x23, x20
    2834:	b.eq	3758 <d_print_comp_inner+0x2d28>  // b.none
    2838:	ldrb	w21, [x20]
    283c:	cmp	x1, #0xff
    2840:	b.eq	27e0 <d_print_comp_inner+0x1db0>  // b.none
    2844:	mov	x0, x1
    2848:	b	281c <d_print_comp_inner+0x1dec>
    284c:	adrp	x20, 0 <d_make_comp>
    2850:	add	x20, x20, #0x0
    2854:	mov	x0, x20
    2858:	bl	0 <__asan_internal_strlen>
    285c:	cbz	x0, 37d8 <d_print_comp_inner+0x2da8>
    2860:	add	x23, x20, x0
    2864:	mov	x25, #0x1                   	// #1
    2868:	ldr	x1, [x19, #256]
    286c:	b	28c8 <d_print_comp_inner+0x1e98>
    2870:	ldp	x3, x2, [x19, #272]
    2874:	strb	wzr, [x19, #255]
    2878:	mov	x0, x19
    287c:	add	x20, x20, #0x1
    2880:	blr	x3
    2884:	strb	w21, [x19]
    2888:	ldr	x0, [x19, #320]
    288c:	str	x25, [x19, #256]
    2890:	strb	w21, [x19, #264]
    2894:	cmp	x20, x23
    2898:	add	x0, x0, #0x1
    289c:	str	x0, [x19, #320]
    28a0:	b.eq	37d8 <d_print_comp_inner+0x2da8>  // b.none
    28a4:	ldrb	w21, [x20]
    28a8:	mov	x0, #0x1                   	// #1
    28ac:	add	x1, x0, #0x1
    28b0:	str	x1, [x19, #256]
    28b4:	strb	w21, [x19, x0]
    28b8:	add	x20, x20, #0x1
    28bc:	strb	w21, [x19, #264]
    28c0:	cmp	x23, x20
    28c4:	b.eq	37d8 <d_print_comp_inner+0x2da8>  // b.none
    28c8:	ldrb	w21, [x20]
    28cc:	cmp	x1, #0xff
    28d0:	b.eq	2870 <d_print_comp_inner+0x1e40>  // b.none
    28d4:	mov	x0, x1
    28d8:	b	28ac <d_print_comp_inner+0x1e7c>
    28dc:	adrp	x20, 0 <d_make_comp>
    28e0:	add	x20, x20, #0x0
    28e4:	mov	x0, x20
    28e8:	bl	0 <__asan_internal_strlen>
    28ec:	cbz	x0, 36d8 <d_print_comp_inner+0x2ca8>
    28f0:	add	x23, x20, x0
    28f4:	mov	x25, #0x1                   	// #1
    28f8:	ldr	x1, [x19, #256]
    28fc:	b	2958 <d_print_comp_inner+0x1f28>
    2900:	ldp	x3, x2, [x19, #272]
    2904:	strb	wzr, [x19, #255]
    2908:	mov	x0, x19
    290c:	add	x20, x20, #0x1
    2910:	blr	x3
    2914:	strb	w21, [x19]
    2918:	ldr	x0, [x19, #320]
    291c:	str	x25, [x19, #256]
    2920:	strb	w21, [x19, #264]
    2924:	cmp	x23, x20
    2928:	add	x0, x0, #0x1
    292c:	str	x0, [x19, #320]
    2930:	b.eq	36d8 <d_print_comp_inner+0x2ca8>  // b.none
    2934:	ldrb	w21, [x20]
    2938:	mov	x0, #0x1                   	// #1
    293c:	add	x1, x0, #0x1
    2940:	str	x1, [x19, #256]
    2944:	strb	w21, [x19, x0]
    2948:	add	x20, x20, #0x1
    294c:	strb	w21, [x19, #264]
    2950:	cmp	x23, x20
    2954:	b.eq	36d8 <d_print_comp_inner+0x2ca8>  // b.none
    2958:	ldrb	w21, [x20]
    295c:	cmp	x1, #0xff
    2960:	b.eq	2900 <d_print_comp_inner+0x1ed0>  // b.none
    2964:	mov	x0, x1
    2968:	b	293c <d_print_comp_inner+0x1f0c>
    296c:	adrp	x20, 0 <d_make_comp>
    2970:	add	x20, x20, #0x0
    2974:	mov	x0, x20
    2978:	bl	0 <__asan_internal_strlen>
    297c:	cbz	x0, 3658 <d_print_comp_inner+0x2c28>
    2980:	add	x23, x20, x0
    2984:	mov	x25, #0x1                   	// #1
    2988:	ldr	x1, [x19, #256]
    298c:	b	29e8 <d_print_comp_inner+0x1fb8>
    2990:	ldp	x3, x2, [x19, #272]
    2994:	strb	wzr, [x19, #255]
    2998:	mov	x0, x19
    299c:	add	x20, x20, #0x1
    29a0:	blr	x3
    29a4:	strb	w21, [x19]
    29a8:	ldr	x0, [x19, #320]
    29ac:	str	x25, [x19, #256]
    29b0:	strb	w21, [x19, #264]
    29b4:	cmp	x23, x20
    29b8:	add	x0, x0, #0x1
    29bc:	str	x0, [x19, #320]
    29c0:	b.eq	3658 <d_print_comp_inner+0x2c28>  // b.none
    29c4:	ldrb	w21, [x20]
    29c8:	mov	x0, #0x1                   	// #1
    29cc:	add	x1, x0, #0x1
    29d0:	str	x1, [x19, #256]
    29d4:	strb	w21, [x19, x0]
    29d8:	add	x20, x20, #0x1
    29dc:	strb	w21, [x19, #264]
    29e0:	cmp	x23, x20
    29e4:	b.eq	3658 <d_print_comp_inner+0x2c28>  // b.none
    29e8:	ldrb	w21, [x20]
    29ec:	cmp	x1, #0xff
    29f0:	b.eq	2990 <d_print_comp_inner+0x1f60>  // b.none
    29f4:	mov	x0, x1
    29f8:	b	29cc <d_print_comp_inner+0x1f9c>
    29fc:	adrp	x20, 0 <d_make_comp>
    2a00:	add	x20, x20, #0x0
    2a04:	mov	x0, x20
    2a08:	bl	0 <__asan_internal_strlen>
    2a0c:	cbz	x0, 35d8 <d_print_comp_inner+0x2ba8>
    2a10:	add	x23, x20, x0
    2a14:	mov	x25, #0x1                   	// #1
    2a18:	ldr	x1, [x19, #256]
    2a1c:	b	2a78 <d_print_comp_inner+0x2048>
    2a20:	ldp	x3, x2, [x19, #272]
    2a24:	strb	wzr, [x19, #255]
    2a28:	mov	x0, x19
    2a2c:	add	x20, x20, #0x1
    2a30:	blr	x3
    2a34:	strb	w21, [x19]
    2a38:	ldr	x0, [x19, #320]
    2a3c:	str	x25, [x19, #256]
    2a40:	strb	w21, [x19, #264]
    2a44:	cmp	x23, x20
    2a48:	add	x0, x0, #0x1
    2a4c:	str	x0, [x19, #320]
    2a50:	b.eq	35d8 <d_print_comp_inner+0x2ba8>  // b.none
    2a54:	ldrb	w21, [x20]
    2a58:	mov	x0, #0x1                   	// #1
    2a5c:	add	x1, x0, #0x1
    2a60:	str	x1, [x19, #256]
    2a64:	strb	w21, [x19, x0]
    2a68:	add	x20, x20, #0x1
    2a6c:	strb	w21, [x19, #264]
    2a70:	cmp	x23, x20
    2a74:	b.eq	35d8 <d_print_comp_inner+0x2ba8>  // b.none
    2a78:	ldrb	w21, [x20]
    2a7c:	cmp	x1, #0xff
    2a80:	b.eq	2a20 <d_print_comp_inner+0x1ff0>  // b.none
    2a84:	mov	x0, x1
    2a88:	b	2a5c <d_print_comp_inner+0x202c>
    2a8c:	ldr	x25, [x2, #8]
    2a90:	ldr	x23, [x19, #296]
    2a94:	str	xzr, [x19, #296]
    2a98:	cbz	x25, 627c <d_print_comp_inner+0x584c>
    2a9c:	ldr	w4, [x25]
    2aa0:	ldr	x3, [x19, #288]
    2aa4:	stp	xzr, x25, [sp, #144]
    2aa8:	sub	w1, w4, #0x1c
    2aac:	str	wzr, [sp, #160]
    2ab0:	cmp	w1, #0x34
    2ab4:	str	x3, [sp, #168]
    2ab8:	b.hi	2ad4 <d_print_comp_inner+0x20a4>  // b.pmore
    2abc:	mov	x0, #0x1                   	// #1
    2ac0:	mov	x2, #0x1f                  	// #31
    2ac4:	movk	x2, #0x1a, lsl #48
    2ac8:	lsl	x1, x0, x1
    2acc:	tst	x1, x2
    2ad0:	b.ne	52b8 <d_print_comp_inner+0x4888>  // b.any
    2ad4:	add	x21, sp, #0x90
    2ad8:	mov	w20, #0x1                   	// #1
    2adc:	mov	x1, x21
    2ae0:	str	x1, [x19, #296]
    2ae4:	cmp	w4, #0x2
    2ae8:	b.eq	610c <d_print_comp_inner+0x56dc>  // b.none
    2aec:	cmp	w4, #0x4
    2af0:	b.ne	2b00 <d_print_comp_inner+0x20d0>  // b.any
    2af4:	add	x0, sp, #0x70
    2af8:	stp	x3, x25, [sp, #112]
    2afc:	str	x0, [x19, #288]
    2b00:	ldr	x24, [x24, #16]
    2b04:	cbz	x24, 5548 <d_print_comp_inner+0x4b18>
    2b08:	ldr	w0, [x24, #4]
    2b0c:	cmp	w0, #0x1
    2b10:	b.gt	5548 <d_print_comp_inner+0x4b18>
    2b14:	ldr	w1, [x19, #308]
    2b18:	cmp	w1, #0x400
    2b1c:	b.gt	5548 <d_print_comp_inner+0x4b18>
    2b20:	ldr	x3, [x19, #328]
    2b24:	add	w0, w0, #0x1
    2b28:	str	w0, [x24, #4]
    2b2c:	add	w1, w1, #0x1
    2b30:	add	x0, sp, #0x80
    2b34:	str	w1, [x19, #308]
    2b38:	str	x0, [x19, #328]
    2b3c:	mov	w1, w22
    2b40:	mov	x0, x19
    2b44:	mov	x2, x24
    2b48:	stp	x24, x3, [sp, #128]
    2b4c:	bl	a30 <d_print_comp_inner>
    2b50:	ldr	w1, [x24, #4]
    2b54:	ldr	x0, [sp, #136]
    2b58:	str	x0, [x19, #328]
    2b5c:	ldr	w0, [x19, #308]
    2b60:	sub	w1, w1, #0x1
    2b64:	str	w1, [x24, #4]
    2b68:	sub	w0, w0, #0x1
    2b6c:	str	w0, [x19, #308]
    2b70:	ldr	w0, [x25]
    2b74:	cmp	w0, #0x4
    2b78:	b.ne	2b84 <d_print_comp_inner+0x2154>  // b.any
    2b7c:	ldr	x0, [sp, #112]
    2b80:	str	x0, [x19, #288]
    2b84:	sub	w20, w20, #0x1
    2b88:	mov	w24, #0x20                  	// #32
    2b8c:	ubfiz	x0, x20, #5, #32
    2b90:	add	x21, x21, x0
    2b94:	b	2b9c <d_print_comp_inner+0x216c>
    2b98:	sub	w20, w20, #0x1
    2b9c:	ldr	w0, [x21, #16]
    2ba0:	cbnz	w0, 2bf8 <d_print_comp_inner+0x21c8>
    2ba4:	ldr	x0, [x19, #256]
    2ba8:	add	x1, x0, #0x1
    2bac:	cmp	x0, #0xff
    2bb0:	b.ne	2bdc <d_print_comp_inner+0x21ac>  // b.any
    2bb4:	ldp	x3, x2, [x19, #272]
    2bb8:	strb	wzr, [x19, #255]
    2bbc:	mov	x1, x0
    2bc0:	mov	x0, x19
    2bc4:	blr	x3
    2bc8:	ldr	x2, [x19, #320]
    2bcc:	mov	x1, #0x1                   	// #1
    2bd0:	mov	x0, #0x0                   	// #0
    2bd4:	add	x2, x2, x1
    2bd8:	str	x2, [x19, #320]
    2bdc:	str	x1, [x19, #256]
    2be0:	mov	w1, w22
    2be4:	ldr	x2, [x21, #8]
    2be8:	strb	w24, [x19, x0]
    2bec:	strb	w24, [x19, #264]
    2bf0:	mov	x0, x19
    2bf4:	bl	78e8 <d_print_mod>
    2bf8:	sub	x21, x21, #0x20
    2bfc:	cbnz	w20, 2b98 <d_print_comp_inner+0x2168>
    2c00:	ldp	x21, x22, [sp, #32]
    2c04:	ldp	x25, x26, [sp, #64]
    2c08:	str	x23, [x19, #296]
    2c0c:	ldp	x23, x24, [sp, #48]
    2c10:	b	a9c <d_print_comp_inner+0x6c>
    2c14:	ldr	x20, [x2, #8]
    2c18:	ldr	x23, [x19, #296]
    2c1c:	str	xzr, [x19, #296]
    2c20:	ldr	x21, [x19, #368]
    2c24:	str	x2, [x19, #368]
    2c28:	tbz	w22, #2, 4b78 <d_print_comp_inner+0x4148>
    2c2c:	ldr	w0, [x20]
    2c30:	cbnz	w0, 2c40 <d_print_comp_inner+0x2210>
    2c34:	ldr	w0, [x20, #16]
    2c38:	cmp	w0, #0x6
    2c3c:	b.eq	6c68 <d_print_comp_inner+0x6238>  // b.none
    2c40:	ldr	w0, [x20, #4]
    2c44:	cmp	w0, #0x1
    2c48:	b.gt	4b7c <d_print_comp_inner+0x414c>
    2c4c:	ldr	w1, [x19, #308]
    2c50:	cmp	w1, #0x400
    2c54:	b.gt	4b7c <d_print_comp_inner+0x414c>
    2c58:	ldr	x3, [x19, #328]
    2c5c:	add	w0, w0, #0x1
    2c60:	str	w0, [x20, #4]
    2c64:	add	w1, w1, #0x1
    2c68:	add	x0, sp, #0x90
    2c6c:	str	w1, [x19, #308]
    2c70:	str	x0, [x19, #328]
    2c74:	mov	w1, w22
    2c78:	mov	x0, x19
    2c7c:	mov	x2, x20
    2c80:	stp	x20, x3, [sp, #144]
    2c84:	bl	a30 <d_print_comp_inner>
    2c88:	ldr	w1, [x20, #4]
    2c8c:	ldr	x0, [sp, #152]
    2c90:	str	x0, [x19, #328]
    2c94:	ldr	w0, [x19, #308]
    2c98:	sub	w1, w1, #0x1
    2c9c:	str	w1, [x20, #4]
    2ca0:	sub	w0, w0, #0x1
    2ca4:	str	w0, [x19, #308]
    2ca8:	ldrb	w0, [x19, #264]
    2cac:	ldr	x1, [x19, #256]
    2cb0:	cmp	w0, #0x3c
    2cb4:	b.eq	5ad4 <d_print_comp_inner+0x50a4>  // b.none
    2cb8:	cmp	x1, #0xff
    2cbc:	b.eq	3460 <d_print_comp_inner+0x2a30>  // b.none
    2cc0:	add	x0, x1, #0x1
    2cc4:	str	x0, [x19, #256]
    2cc8:	mov	w2, #0x3c                  	// #60
    2ccc:	strb	w2, [x19, x1]
    2cd0:	strb	w2, [x19, #264]
    2cd4:	ldr	x20, [x24, #16]
    2cd8:	cbz	x20, 4b88 <d_print_comp_inner+0x4158>
    2cdc:	ldr	w1, [x20, #4]
    2ce0:	cmp	w1, #0x1
    2ce4:	b.gt	4b88 <d_print_comp_inner+0x4158>
    2ce8:	ldr	w2, [x19, #308]
    2cec:	cmp	w2, #0x400
    2cf0:	b.gt	4b88 <d_print_comp_inner+0x4158>
    2cf4:	ldr	x3, [x19, #328]
    2cf8:	add	w1, w1, #0x1
    2cfc:	str	w1, [x20, #4]
    2d00:	add	w2, w2, #0x1
    2d04:	add	x0, sp, #0x90
    2d08:	str	w2, [x19, #308]
    2d0c:	str	x0, [x19, #328]
    2d10:	mov	w1, w22
    2d14:	mov	x0, x19
    2d18:	mov	x2, x20
    2d1c:	stp	x20, x3, [sp, #144]
    2d20:	bl	a30 <d_print_comp_inner>
    2d24:	ldr	w1, [x20, #4]
    2d28:	ldr	x0, [sp, #152]
    2d2c:	str	x0, [x19, #328]
    2d30:	ldr	w0, [x19, #308]
    2d34:	sub	w1, w1, #0x1
    2d38:	str	w1, [x20, #4]
    2d3c:	sub	w0, w0, #0x1
    2d40:	str	w0, [x19, #308]
    2d44:	ldrb	w0, [x19, #264]
    2d48:	ldr	x1, [x19, #256]
    2d4c:	cmp	w0, #0x3e
    2d50:	b.ne	6c28 <d_print_comp_inner+0x61f8>  // b.any
    2d54:	cmp	x1, #0xff
    2d58:	b.eq	6a2c <d_print_comp_inner+0x5ffc>  // b.none
    2d5c:	add	x0, x1, #0x1
    2d60:	str	x0, [x19, #256]
    2d64:	mov	w2, #0x20                  	// #32
    2d68:	strb	w2, [x19, x1]
    2d6c:	strb	w2, [x19, #264]
    2d70:	cmp	x0, #0xff
    2d74:	b.eq	3434 <d_print_comp_inner+0x2a04>  // b.none
    2d78:	add	x1, x0, #0x1
    2d7c:	str	x1, [x19, #256]
    2d80:	mov	w1, #0x3e                  	// #62
    2d84:	strb	w1, [x19, x0]
    2d88:	strb	w1, [x19, #264]
    2d8c:	ldp	x25, x26, [sp, #64]
    2d90:	str	x23, [x19, #296]
    2d94:	str	x21, [x19, #368]
    2d98:	ldp	x21, x22, [sp, #32]
    2d9c:	ldp	x23, x24, [sp, #48]
    2da0:	b	a9c <d_print_comp_inner+0x6c>
    2da4:	ldr	w0, [x19, #312]
    2da8:	cbz	w0, 51e0 <d_print_comp_inner+0x47b0>
    2dac:	ldr	x0, [x19, #256]
    2db0:	cmp	x0, #0xff
    2db4:	b.eq	638c <d_print_comp_inner+0x595c>  // b.none
    2db8:	add	x3, x0, #0x1
    2dbc:	str	x3, [x19, #256]
    2dc0:	mov	w1, #0x61                  	// #97
    2dc4:	strb	w1, [x19, x0]
    2dc8:	strb	w1, [x19, #264]
    2dcc:	cmp	x3, #0xff
    2dd0:	b.ne	5cf8 <d_print_comp_inner+0x52c8>  // b.any
    2dd4:	ldp	x4, x2, [x19, #272]
    2dd8:	strb	wzr, [x19, #255]
    2ddc:	mov	x1, x3
    2de0:	mov	x0, x19
    2de4:	blr	x4
    2de8:	ldr	x1, [x19, #320]
    2dec:	mov	w2, #0x7475                	// #29813
    2df0:	mov	x0, #0x2                   	// #2
    2df4:	strh	w2, [x19]
    2df8:	add	x1, x1, #0x1
    2dfc:	str	x1, [x19, #320]
    2e00:	add	x1, x0, #0x1
    2e04:	mov	w2, #0x6f                  	// #111
    2e08:	strb	w2, [x19, x0]
    2e0c:	add	x0, x1, #0x1
    2e10:	str	x0, [x19, #256]
    2e14:	mov	w0, #0x3a                  	// #58
    2e18:	strb	w0, [x19, x1]
    2e1c:	adrp	x1, 0 <d_make_comp>
    2e20:	strb	w0, [x19, #264]
    2e24:	add	x1, x1, #0x0
    2e28:	add	x20, sp, #0x90
    2e2c:	ldr	x2, [x24, #8]
    2e30:	mov	x0, x20
    2e34:	add	w2, w2, #0x1
    2e38:	bl	0 <sprintf>
    2e3c:	mov	x0, x20
    2e40:	bl	0 <__asan_internal_strlen>
    2e44:	cbz	x0, 6d3c <d_print_comp_inner+0x630c>
    2e48:	add	x22, x20, x0
    2e4c:	mov	x23, #0x1                   	// #1
    2e50:	ldr	x1, [x19, #256]
    2e54:	b	2eb0 <d_print_comp_inner+0x2480>
    2e58:	ldp	x3, x2, [x19, #272]
    2e5c:	strb	wzr, [x19, #255]
    2e60:	mov	x0, x19
    2e64:	add	x20, x20, #0x1
    2e68:	blr	x3
    2e6c:	strb	w21, [x19]
    2e70:	ldr	x0, [x19, #320]
    2e74:	str	x23, [x19, #256]
    2e78:	strb	w21, [x19, #264]
    2e7c:	cmp	x20, x22
    2e80:	add	x0, x0, #0x1
    2e84:	str	x0, [x19, #320]
    2e88:	b.eq	6740 <d_print_comp_inner+0x5d10>  // b.none
    2e8c:	ldrb	w21, [x20]
    2e90:	mov	x0, #0x1                   	// #1
    2e94:	add	x1, x0, #0x1
    2e98:	str	x1, [x19, #256]
    2e9c:	strb	w21, [x19, x0]
    2ea0:	add	x20, x20, #0x1
    2ea4:	strb	w21, [x19, #264]
    2ea8:	cmp	x22, x20
    2eac:	b.eq	5c18 <d_print_comp_inner+0x51e8>  // b.none
    2eb0:	ldrb	w21, [x20]
    2eb4:	cmp	x1, #0xff
    2eb8:	b.eq	2e58 <d_print_comp_inner+0x2428>  // b.none
    2ebc:	mov	x0, x1
    2ec0:	b	2e94 <d_print_comp_inner+0x2464>
    2ec4:	adrp	x20, 0 <d_make_comp>
    2ec8:	add	x20, x20, #0x0
    2ecc:	mov	x0, x20
    2ed0:	bl	0 <__asan_internal_strlen>
    2ed4:	cbz	x0, 4304 <d_print_comp_inner+0x38d4>
    2ed8:	add	x23, x20, x0
    2edc:	mov	x25, #0x1                   	// #1
    2ee0:	ldr	x1, [x19, #256]
    2ee4:	b	2f40 <d_print_comp_inner+0x2510>
    2ee8:	ldp	x3, x2, [x19, #272]
    2eec:	strb	wzr, [x19, #255]
    2ef0:	mov	x0, x19
    2ef4:	add	x20, x20, #0x1
    2ef8:	blr	x3
    2efc:	strb	w21, [x19]
    2f00:	ldr	x0, [x19, #320]
    2f04:	str	x25, [x19, #256]
    2f08:	strb	w21, [x19, #264]
    2f0c:	cmp	x20, x23
    2f10:	add	x0, x0, #0x1
    2f14:	str	x0, [x19, #320]
    2f18:	b.eq	4304 <d_print_comp_inner+0x38d4>  // b.none
    2f1c:	ldrb	w21, [x20]
    2f20:	mov	x0, #0x1                   	// #1
    2f24:	add	x1, x0, #0x1
    2f28:	str	x1, [x19, #256]
    2f2c:	strb	w21, [x19, x0]
    2f30:	add	x20, x20, #0x1
    2f34:	strb	w21, [x19, #264]
    2f38:	cmp	x23, x20
    2f3c:	b.eq	4304 <d_print_comp_inner+0x38d4>  // b.none
    2f40:	ldrb	w21, [x20]
    2f44:	cmp	x1, #0xff
    2f48:	b.eq	2ee8 <d_print_comp_inner+0x24b8>  // b.none
    2f4c:	mov	x0, x1
    2f50:	b	2f24 <d_print_comp_inner+0x24f4>
    2f54:	adrp	x20, 0 <d_make_comp>
    2f58:	add	x20, x20, #0x0
    2f5c:	mov	x0, x20
    2f60:	bl	0 <__asan_internal_strlen>
    2f64:	cbz	x0, 4448 <d_print_comp_inner+0x3a18>
    2f68:	add	x23, x20, x0
    2f6c:	mov	x25, #0x1                   	// #1
    2f70:	ldr	x1, [x19, #256]
    2f74:	b	2fd0 <d_print_comp_inner+0x25a0>
    2f78:	ldp	x3, x2, [x19, #272]
    2f7c:	strb	wzr, [x19, #255]
    2f80:	mov	x0, x19
    2f84:	add	x20, x20, #0x1
    2f88:	blr	x3
    2f8c:	strb	w21, [x19]
    2f90:	ldr	x0, [x19, #320]
    2f94:	str	x25, [x19, #256]
    2f98:	strb	w21, [x19, #264]
    2f9c:	cmp	x23, x20
    2fa0:	add	x0, x0, #0x1
    2fa4:	str	x0, [x19, #320]
    2fa8:	b.eq	4448 <d_print_comp_inner+0x3a18>  // b.none
    2fac:	ldrb	w21, [x20]
    2fb0:	mov	x0, #0x1                   	// #1
    2fb4:	add	x1, x0, #0x1
    2fb8:	str	x1, [x19, #256]
    2fbc:	strb	w21, [x19, x0]
    2fc0:	add	x20, x20, #0x1
    2fc4:	strb	w21, [x19, #264]
    2fc8:	cmp	x23, x20
    2fcc:	b.eq	4448 <d_print_comp_inner+0x3a18>  // b.none
    2fd0:	ldrb	w21, [x20]
    2fd4:	cmp	x1, #0xff
    2fd8:	b.eq	2f78 <d_print_comp_inner+0x2548>  // b.none
    2fdc:	mov	x0, x1
    2fe0:	b	2fb4 <d_print_comp_inner+0x2584>
    2fe4:	adrp	x20, 0 <d_make_comp>
    2fe8:	add	x20, x20, #0x0
    2fec:	mov	x0, x20
    2ff0:	bl	0 <__asan_internal_strlen>
    2ff4:	cbz	x0, 3f1c <d_print_comp_inner+0x34ec>
    2ff8:	add	x22, x20, x0
    2ffc:	mov	x23, #0x1                   	// #1
    3000:	ldr	x1, [x19, #256]
    3004:	b	3060 <d_print_comp_inner+0x2630>
    3008:	ldp	x3, x2, [x19, #272]
    300c:	strb	wzr, [x19, #255]
    3010:	mov	x0, x19
    3014:	add	x20, x20, #0x1
    3018:	blr	x3
    301c:	strb	w21, [x19]
    3020:	ldr	x0, [x19, #320]
    3024:	str	x23, [x19, #256]
    3028:	strb	w21, [x19, #264]
    302c:	cmp	x20, x22
    3030:	add	x0, x0, #0x1
    3034:	str	x0, [x19, #320]
    3038:	b.eq	3f1c <d_print_comp_inner+0x34ec>  // b.none
    303c:	ldrb	w21, [x20]
    3040:	mov	x0, #0x1                   	// #1
    3044:	add	x1, x0, #0x1
    3048:	str	x1, [x19, #256]
    304c:	strb	w21, [x19, x0]
    3050:	add	x20, x20, #0x1
    3054:	strb	w21, [x19, #264]
    3058:	cmp	x22, x20
    305c:	b.eq	3f1c <d_print_comp_inner+0x34ec>  // b.none
    3060:	ldrb	w21, [x20]
    3064:	cmp	x1, #0xff
    3068:	b.eq	3008 <d_print_comp_inner+0x25d8>  // b.none
    306c:	mov	x0, x1
    3070:	b	3044 <d_print_comp_inner+0x2614>
    3074:	adrp	x20, 0 <d_make_comp>
    3078:	add	x20, x20, #0x0
    307c:	mov	x0, x20
    3080:	bl	0 <__asan_internal_strlen>
    3084:	cbz	x0, 3a58 <d_print_comp_inner+0x3028>
    3088:	add	x23, x20, x0
    308c:	mov	x25, #0x1                   	// #1
    3090:	ldr	x1, [x19, #256]
    3094:	b	30f0 <d_print_comp_inner+0x26c0>
    3098:	ldp	x3, x2, [x19, #272]
    309c:	strb	wzr, [x19, #255]
    30a0:	mov	x0, x19
    30a4:	add	x20, x20, #0x1
    30a8:	blr	x3
    30ac:	strb	w21, [x19]
    30b0:	ldr	x0, [x19, #320]
    30b4:	str	x25, [x19, #256]
    30b8:	strb	w21, [x19, #264]
    30bc:	cmp	x20, x23
    30c0:	add	x0, x0, #0x1
    30c4:	str	x0, [x19, #320]
    30c8:	b.eq	3a58 <d_print_comp_inner+0x3028>  // b.none
    30cc:	ldrb	w21, [x20]
    30d0:	mov	x0, #0x1                   	// #1
    30d4:	add	x1, x0, #0x1
    30d8:	str	x1, [x19, #256]
    30dc:	strb	w21, [x19, x0]
    30e0:	add	x20, x20, #0x1
    30e4:	strb	w21, [x19, #264]
    30e8:	cmp	x20, x23
    30ec:	b.eq	3a58 <d_print_comp_inner+0x3028>  // b.none
    30f0:	ldrb	w21, [x20]
    30f4:	cmp	x1, #0xff
    30f8:	b.eq	3098 <d_print_comp_inner+0x2668>  // b.none
    30fc:	mov	x0, x1
    3100:	b	30d4 <d_print_comp_inner+0x26a4>
    3104:	adrp	x20, 0 <d_make_comp>
    3108:	add	x20, x20, #0x0
    310c:	mov	x0, x20
    3110:	bl	0 <__asan_internal_strlen>
    3114:	cbz	x0, 39d8 <d_print_comp_inner+0x2fa8>
    3118:	add	x23, x20, x0
    311c:	mov	x25, #0x1                   	// #1
    3120:	ldr	x1, [x19, #256]
    3124:	b	3180 <d_print_comp_inner+0x2750>
    3128:	ldp	x3, x2, [x19, #272]
    312c:	strb	wzr, [x19, #255]
    3130:	mov	x0, x19
    3134:	add	x20, x20, #0x1
    3138:	blr	x3
    313c:	strb	w21, [x19]
    3140:	ldr	x0, [x19, #320]
    3144:	str	x25, [x19, #256]
    3148:	strb	w21, [x19, #264]
    314c:	cmp	x20, x23
    3150:	add	x0, x0, #0x1
    3154:	str	x0, [x19, #320]
    3158:	b.eq	39d8 <d_print_comp_inner+0x2fa8>  // b.none
    315c:	ldrb	w21, [x20]
    3160:	mov	x0, #0x1                   	// #1
    3164:	add	x1, x0, #0x1
    3168:	str	x1, [x19, #256]
    316c:	strb	w21, [x19, x0]
    3170:	add	x20, x20, #0x1
    3174:	strb	w21, [x19, #264]
    3178:	cmp	x23, x20
    317c:	b.eq	39d8 <d_print_comp_inner+0x2fa8>  // b.none
    3180:	ldrb	w21, [x20]
    3184:	cmp	x1, #0xff
    3188:	b.eq	3128 <d_print_comp_inner+0x26f8>  // b.none
    318c:	mov	x0, x1
    3190:	b	3164 <d_print_comp_inner+0x2734>
    3194:	ldp	x21, x20, [x2, #8]
    3198:	cbz	x21, 3204 <d_print_comp_inner+0x27d4>
    319c:	ldr	w0, [x21, #4]
    31a0:	cmp	w0, #0x1
    31a4:	b.gt	54d0 <d_print_comp_inner+0x4aa0>
    31a8:	ldr	w1, [x19, #308]
    31ac:	cmp	w1, #0x400
    31b0:	b.gt	54d0 <d_print_comp_inner+0x4aa0>
    31b4:	ldr	x3, [x19, #328]
    31b8:	add	w0, w0, #0x1
    31bc:	str	w0, [x21, #4]
    31c0:	add	w1, w1, #0x1
    31c4:	add	x0, sp, #0x90
    31c8:	str	w1, [x19, #308]
    31cc:	str	x0, [x19, #328]
    31d0:	mov	w1, w22
    31d4:	mov	x0, x19
    31d8:	mov	x2, x21
    31dc:	stp	x21, x3, [sp, #144]
    31e0:	bl	a30 <d_print_comp_inner>
    31e4:	ldr	w1, [x21, #4]
    31e8:	ldr	x0, [sp, #152]
    31ec:	str	x0, [x19, #328]
    31f0:	ldr	w0, [x19, #308]
    31f4:	sub	w1, w1, #0x1
    31f8:	str	w1, [x21, #4]
    31fc:	sub	w0, w0, #0x1
    3200:	str	w0, [x19, #308]
    3204:	ldr	x1, [x19, #256]
    3208:	add	x0, x1, #0x1
    320c:	cmp	x1, #0xff
    3210:	b.ne	3238 <d_print_comp_inner+0x2808>  // b.any
    3214:	ldp	x3, x2, [x19, #272]
    3218:	strb	wzr, [x19, #255]
    321c:	mov	x0, x19
    3220:	blr	x3
    3224:	ldr	x2, [x19, #320]
    3228:	mov	x0, #0x1                   	// #1
    322c:	mov	x1, #0x0                   	// #0
    3230:	add	x2, x2, x0
    3234:	str	x2, [x19, #320]
    3238:	str	x0, [x19, #256]
    323c:	mov	w2, #0x7b                  	// #123
    3240:	strb	w2, [x19, x1]
    3244:	strb	w2, [x19, #264]
    3248:	cbz	x20, 4900 <d_print_comp_inner+0x3ed0>
    324c:	ldr	w1, [x20, #4]
    3250:	cmp	w1, #0x1
    3254:	b.gt	4900 <d_print_comp_inner+0x3ed0>
    3258:	ldr	w2, [x19, #308]
    325c:	cmp	w2, #0x400
    3260:	b.gt	4900 <d_print_comp_inner+0x3ed0>
    3264:	ldr	x3, [x19, #328]
    3268:	add	w1, w1, #0x1
    326c:	str	w1, [x20, #4]
    3270:	add	w2, w2, #0x1
    3274:	add	x0, sp, #0x90
    3278:	str	w2, [x19, #308]
    327c:	str	x0, [x19, #328]
    3280:	mov	w1, w22
    3284:	mov	x2, x20
    3288:	mov	x0, x19
    328c:	stp	x20, x3, [sp, #144]
    3290:	bl	a30 <d_print_comp_inner>
    3294:	ldr	w2, [x20, #4]
    3298:	ldr	x0, [sp, #152]
    329c:	str	x0, [x19, #328]
    32a0:	ldr	w1, [x19, #308]
    32a4:	sub	w2, w2, #0x1
    32a8:	ldr	x0, [x19, #256]
    32ac:	str	w2, [x20, #4]
    32b0:	sub	w1, w1, #0x1
    32b4:	str	w1, [x19, #308]
    32b8:	add	x1, x0, #0x1
    32bc:	cmp	x0, #0xff
    32c0:	b.ne	32ec <d_print_comp_inner+0x28bc>  // b.any
    32c4:	ldp	x3, x2, [x19, #272]
    32c8:	strb	wzr, [x19, #255]
    32cc:	mov	x1, x0
    32d0:	mov	x0, x19
    32d4:	blr	x3
    32d8:	ldr	x2, [x19, #320]
    32dc:	mov	x1, #0x1                   	// #1
    32e0:	mov	x0, #0x0                   	// #0
    32e4:	add	x2, x2, x1
    32e8:	str	x2, [x19, #320]
    32ec:	str	x1, [x19, #256]
    32f0:	mov	w1, #0x7d                  	// #125
    32f4:	strb	w1, [x19, x0]
    32f8:	strb	w1, [x19, #264]
    32fc:	ldp	x21, x22, [sp, #32]
    3300:	ldp	x23, x24, [sp, #48]
    3304:	ldp	x25, x26, [sp, #64]
    3308:	b	a9c <d_print_comp_inner+0x6c>
    330c:	ldr	x22, [x2, #8]
    3310:	adrp	x20, 0 <d_make_comp>
    3314:	add	x20, x20, #0x0
    3318:	mov	x0, x20
    331c:	ldr	w23, [x22, #16]
    3320:	bl	0 <__asan_internal_strlen>
    3324:	cbz	x0, 4ba0 <d_print_comp_inner+0x4170>
    3328:	add	x24, x20, x0
    332c:	mov	x25, #0x1                   	// #1
    3330:	ldr	x1, [x19, #256]
    3334:	b	3390 <d_print_comp_inner+0x2960>
    3338:	ldp	x3, x2, [x19, #272]
    333c:	strb	wzr, [x19, #255]
    3340:	mov	x0, x19
    3344:	add	x20, x20, #0x1
    3348:	blr	x3
    334c:	strb	w21, [x19]
    3350:	ldr	x0, [x19, #320]
    3354:	str	x25, [x19, #256]
    3358:	strb	w21, [x19, #264]
    335c:	cmp	x20, x24
    3360:	add	x0, x0, #0x1
    3364:	str	x0, [x19, #320]
    3368:	b.eq	5ab0 <d_print_comp_inner+0x5080>  // b.none
    336c:	ldrb	w21, [x20]
    3370:	mov	x0, #0x1                   	// #1
    3374:	add	x1, x0, #0x1
    3378:	str	x1, [x19, #256]
    337c:	strb	w21, [x19, x0]
    3380:	add	x20, x20, #0x1
    3384:	strb	w21, [x19, #264]
    3388:	cmp	x24, x20
    338c:	b.eq	4ba0 <d_print_comp_inner+0x4170>  // b.none
    3390:	ldrb	w21, [x20]
    3394:	cmp	x1, #0xff
    3398:	b.eq	3338 <d_print_comp_inner+0x2908>  // b.none
    339c:	mov	x0, x1
    33a0:	b	3374 <d_print_comp_inner+0x2944>
    33a4:	adrp	x20, 0 <d_make_comp>
    33a8:	add	x20, x20, #0x0
    33ac:	mov	x0, x20
    33b0:	bl	0 <__asan_internal_strlen>
    33b4:	cbz	x0, 4204 <d_print_comp_inner+0x37d4>
    33b8:	add	x23, x20, x0
    33bc:	mov	x25, #0x1                   	// #1
    33c0:	ldr	x1, [x19, #256]
    33c4:	b	3420 <d_print_comp_inner+0x29f0>
    33c8:	ldp	x3, x2, [x19, #272]
    33cc:	strb	wzr, [x19, #255]
    33d0:	mov	x0, x19
    33d4:	add	x20, x20, #0x1
    33d8:	blr	x3
    33dc:	strb	w21, [x19]
    33e0:	ldr	x0, [x19, #320]
    33e4:	str	x25, [x19, #256]
    33e8:	strb	w21, [x19, #264]
    33ec:	cmp	x20, x23
    33f0:	add	x0, x0, #0x1
    33f4:	str	x0, [x19, #320]
    33f8:	b.eq	4204 <d_print_comp_inner+0x37d4>  // b.none
    33fc:	ldrb	w21, [x20]
    3400:	mov	x0, #0x1                   	// #1
    3404:	add	x1, x0, #0x1
    3408:	str	x1, [x19, #256]
    340c:	strb	w21, [x19, x0]
    3410:	add	x20, x20, #0x1
    3414:	strb	w21, [x19, #264]
    3418:	cmp	x23, x20
    341c:	b.eq	4204 <d_print_comp_inner+0x37d4>  // b.none
    3420:	ldrb	w21, [x20]
    3424:	cmp	x1, #0xff
    3428:	b.eq	33c8 <d_print_comp_inner+0x2998>  // b.none
    342c:	mov	x0, x1
    3430:	b	3404 <d_print_comp_inner+0x29d4>
    3434:	ldp	x3, x2, [x19, #272]
    3438:	strb	wzr, [x19, #255]
    343c:	mov	x1, x0
    3440:	mov	x0, x19
    3444:	blr	x3
    3448:	ldr	x2, [x19, #320]
    344c:	mov	x1, #0x1                   	// #1
    3450:	mov	x0, #0x0                   	// #0
    3454:	add	x2, x2, x1
    3458:	str	x2, [x19, #320]
    345c:	b	2d7c <d_print_comp_inner+0x234c>
    3460:	ldp	x3, x2, [x19, #272]
    3464:	strb	wzr, [x19, #255]
    3468:	mov	x0, x19
    346c:	blr	x3
    3470:	ldr	x2, [x19, #320]
    3474:	mov	x0, #0x1                   	// #1
    3478:	mov	x1, #0x0                   	// #0
    347c:	add	x2, x2, x0
    3480:	str	x2, [x19, #320]
    3484:	b	2cc4 <d_print_comp_inner+0x2294>
    3488:	ldr	w0, [sp, #100]
    348c:	add	w21, w21, #0x1
    3490:	cmp	w21, w0
    3494:	b.lt	1b90 <d_print_comp_inner+0x1160>  // b.tstop
    3498:	cmp	w23, w21
    349c:	b.le	670c <d_print_comp_inner+0x5cdc>
    34a0:	add	x20, sp, #0x90
    34a4:	mov	w24, #0x1                   	// #1
    34a8:	b	3510 <d_print_comp_inner+0x2ae0>
    34ac:	ldr	w1, [x19, #308]
    34b0:	cmp	w1, #0x400
    34b4:	b.gt	3524 <d_print_comp_inner+0x2af4>
    34b8:	ldr	x3, [x19, #328]
    34bc:	add	w0, w0, #0x1
    34c0:	str	w0, [x28, #4]
    34c4:	add	w1, w1, #0x1
    34c8:	str	w1, [x19, #308]
    34cc:	mov	x0, x19
    34d0:	str	x20, [x19, #328]
    34d4:	mov	w1, w22
    34d8:	mov	x2, x28
    34dc:	stp	x28, x3, [sp, #144]
    34e0:	bl	a30 <d_print_comp_inner>
    34e4:	ldr	w1, [x28, #4]
    34e8:	ldr	x0, [sp, #152]
    34ec:	str	x0, [x19, #328]
    34f0:	ldr	w0, [x19, #308]
    34f4:	sub	w1, w1, #0x1
    34f8:	str	w1, [x28, #4]
    34fc:	sub	w0, w0, #0x1
    3500:	str	w0, [x19, #308]
    3504:	add	w21, w21, #0x1
    3508:	cmp	w23, w21
    350c:	b.le	4830 <d_print_comp_inner+0x3e00>
    3510:	str	w21, [x19, #316]
    3514:	cbz	x28, 3524 <d_print_comp_inner+0x2af4>
    3518:	ldr	w0, [x28, #4]
    351c:	cmp	w0, #0x1
    3520:	b.le	34ac <d_print_comp_inner+0x2a7c>
    3524:	str	w24, [x19, #304]
    3528:	b	3504 <d_print_comp_inner+0x2ad4>
    352c:	mov	w0, #0x1                   	// #1
    3530:	str	w0, [x19, #304]
    3534:	b	1c00 <d_print_comp_inner+0x11d0>
    3538:	ldr	x25, [x0, #8]
    353c:	add	x0, sp, #0x90
    3540:	stp	x2, x24, [sp, #144]
    3544:	str	wzr, [sp, #160]
    3548:	str	x4, [sp, #168]
    354c:	str	x0, [x19, #296]
    3550:	cbz	x25, b04 <d_print_comp_inner+0xd4>
    3554:	ldr	w0, [x25, #4]
    3558:	cmp	w0, #0x1
    355c:	b.gt	b0c <d_print_comp_inner+0xdc>
    3560:	ldr	w1, [x19, #308]
    3564:	cmp	w1, #0x400
    3568:	b.gt	b0c <d_print_comp_inner+0xdc>
    356c:	ldr	x3, [x19, #328]
    3570:	add	w0, w0, #0x1
    3574:	str	w0, [x25, #4]
    3578:	add	w1, w1, #0x1
    357c:	add	x0, sp, #0x80
    3580:	str	w1, [x19, #308]
    3584:	str	x0, [x19, #328]
    3588:	mov	x2, x25
    358c:	mov	w1, w22
    3590:	mov	x0, x19
    3594:	stp	x25, x3, [sp, #128]
    3598:	bl	a30 <d_print_comp_inner>
    359c:	ldr	w1, [x25, #4]
    35a0:	ldr	x0, [sp, #136]
    35a4:	str	x0, [x19, #328]
    35a8:	ldr	w2, [sp, #160]
    35ac:	sub	w1, w1, #0x1
    35b0:	ldr	w0, [x19, #308]
    35b4:	str	w1, [x25, #4]
    35b8:	sub	w0, w0, #0x1
    35bc:	str	w0, [x19, #308]
    35c0:	cbnz	w2, b24 <d_print_comp_inner+0xf4>
    35c4:	b	b14 <d_print_comp_inner+0xe4>
    35c8:	ldp	x21, x22, [sp, #32]
    35cc:	ldp	x23, x24, [sp, #48]
    35d0:	ldp	x25, x26, [sp, #64]
    35d4:	b	a9c <d_print_comp_inner+0x6c>
    35d8:	ldr	x20, [x24, #8]
    35dc:	cbz	x20, 4868 <d_print_comp_inner+0x3e38>
    35e0:	ldr	w0, [x20, #4]
    35e4:	cmp	w0, #0x1
    35e8:	b.gt	4868 <d_print_comp_inner+0x3e38>
    35ec:	ldr	w1, [x19, #308]
    35f0:	cmp	w1, #0x400
    35f4:	b.gt	4868 <d_print_comp_inner+0x3e38>
    35f8:	ldr	x3, [x19, #328]
    35fc:	add	w0, w0, #0x1
    3600:	str	w0, [x20, #4]
    3604:	add	w1, w1, #0x1
    3608:	add	x0, sp, #0x90
    360c:	str	w1, [x19, #308]
    3610:	str	x0, [x19, #328]
    3614:	mov	w1, w22
    3618:	mov	x0, x19
    361c:	mov	x2, x20
    3620:	stp	x20, x3, [sp, #144]
    3624:	bl	a30 <d_print_comp_inner>
    3628:	ldr	w1, [x20, #4]
    362c:	ldr	x0, [sp, #152]
    3630:	sub	w1, w1, #0x1
    3634:	ldp	x21, x22, [sp, #32]
    3638:	ldp	x23, x24, [sp, #48]
    363c:	ldp	x25, x26, [sp, #64]
    3640:	str	x0, [x19, #328]
    3644:	ldr	w0, [x19, #308]
    3648:	str	w1, [x20, #4]
    364c:	sub	w0, w0, #0x1
    3650:	str	w0, [x19, #308]
    3654:	b	a9c <d_print_comp_inner+0x6c>
    3658:	ldr	x20, [x24, #8]
    365c:	cbz	x20, 4880 <d_print_comp_inner+0x3e50>
    3660:	ldr	w0, [x20, #4]
    3664:	cmp	w0, #0x1
    3668:	b.gt	4880 <d_print_comp_inner+0x3e50>
    366c:	ldr	w1, [x19, #308]
    3670:	cmp	w1, #0x400
    3674:	b.gt	4880 <d_print_comp_inner+0x3e50>
    3678:	ldr	x3, [x19, #328]
    367c:	add	w0, w0, #0x1
    3680:	str	w0, [x20, #4]
    3684:	add	w1, w1, #0x1
    3688:	add	x0, sp, #0x90
    368c:	str	w1, [x19, #308]
    3690:	str	x0, [x19, #328]
    3694:	mov	w1, w22
    3698:	mov	x0, x19
    369c:	mov	x2, x20
    36a0:	stp	x20, x3, [sp, #144]
    36a4:	bl	a30 <d_print_comp_inner>
    36a8:	ldr	w1, [x20, #4]
    36ac:	ldr	x0, [sp, #152]
    36b0:	sub	w1, w1, #0x1
    36b4:	ldp	x21, x22, [sp, #32]
    36b8:	ldp	x23, x24, [sp, #48]
    36bc:	ldp	x25, x26, [sp, #64]
    36c0:	str	x0, [x19, #328]
    36c4:	ldr	w0, [x19, #308]
    36c8:	str	w1, [x20, #4]
    36cc:	sub	w0, w0, #0x1
    36d0:	str	w0, [x19, #308]
    36d4:	b	a9c <d_print_comp_inner+0x6c>
    36d8:	ldr	x20, [x24, #8]
    36dc:	cbz	x20, 48b0 <d_print_comp_inner+0x3e80>
    36e0:	ldr	w0, [x20, #4]
    36e4:	cmp	w0, #0x1
    36e8:	b.gt	48b0 <d_print_comp_inner+0x3e80>
    36ec:	ldr	w1, [x19, #308]
    36f0:	cmp	w1, #0x400
    36f4:	b.gt	48b0 <d_print_comp_inner+0x3e80>
    36f8:	ldr	x3, [x19, #328]
    36fc:	add	w0, w0, #0x1
    3700:	str	w0, [x20, #4]
    3704:	add	w1, w1, #0x1
    3708:	add	x0, sp, #0x90
    370c:	str	w1, [x19, #308]
    3710:	str	x0, [x19, #328]
    3714:	mov	w1, w22
    3718:	mov	x0, x19
    371c:	mov	x2, x20
    3720:	stp	x20, x3, [sp, #144]
    3724:	bl	a30 <d_print_comp_inner>
    3728:	ldr	w1, [x20, #4]
    372c:	ldr	x0, [sp, #152]
    3730:	sub	w1, w1, #0x1
    3734:	ldp	x21, x22, [sp, #32]
    3738:	ldp	x23, x24, [sp, #48]
    373c:	ldp	x25, x26, [sp, #64]
    3740:	str	x0, [x19, #328]
    3744:	ldr	w0, [x19, #308]
    3748:	str	w1, [x20, #4]
    374c:	sub	w0, w0, #0x1
    3750:	str	w0, [x19, #308]
    3754:	b	a9c <d_print_comp_inner+0x6c>
    3758:	ldr	x20, [x24, #8]
    375c:	cbz	x20, 4898 <d_print_comp_inner+0x3e68>
    3760:	ldr	w0, [x20, #4]
    3764:	cmp	w0, #0x1
    3768:	b.gt	4898 <d_print_comp_inner+0x3e68>
    376c:	ldr	w1, [x19, #308]
    3770:	cmp	w1, #0x400
    3774:	b.gt	4898 <d_print_comp_inner+0x3e68>
    3778:	ldr	x3, [x19, #328]
    377c:	add	w0, w0, #0x1
    3780:	str	w0, [x20, #4]
    3784:	add	w1, w1, #0x1
    3788:	add	x0, sp, #0x90
    378c:	str	w1, [x19, #308]
    3790:	str	x0, [x19, #328]
    3794:	mov	w1, w22
    3798:	mov	x0, x19
    379c:	mov	x2, x20
    37a0:	stp	x20, x3, [sp, #144]
    37a4:	bl	a30 <d_print_comp_inner>
    37a8:	ldr	w1, [x20, #4]
    37ac:	ldr	x0, [sp, #152]
    37b0:	sub	w1, w1, #0x1
    37b4:	ldp	x21, x22, [sp, #32]
    37b8:	ldp	x23, x24, [sp, #48]
    37bc:	ldp	x25, x26, [sp, #64]
    37c0:	str	x0, [x19, #328]
    37c4:	ldr	w0, [x19, #308]
    37c8:	str	w1, [x20, #4]
    37cc:	sub	w0, w0, #0x1
    37d0:	str	w0, [x19, #308]
    37d4:	b	a9c <d_print_comp_inner+0x6c>
    37d8:	ldr	x20, [x24, #8]
    37dc:	cbz	x20, 4850 <d_print_comp_inner+0x3e20>
    37e0:	ldr	w0, [x20, #4]
    37e4:	cmp	w0, #0x1
    37e8:	b.gt	4850 <d_print_comp_inner+0x3e20>
    37ec:	ldr	w1, [x19, #308]
    37f0:	cmp	w1, #0x400
    37f4:	b.gt	4850 <d_print_comp_inner+0x3e20>
    37f8:	ldr	x3, [x19, #328]
    37fc:	add	w0, w0, #0x1
    3800:	str	w0, [x20, #4]
    3804:	add	w1, w1, #0x1
    3808:	add	x0, sp, #0x90
    380c:	str	w1, [x19, #308]
    3810:	str	x0, [x19, #328]
    3814:	mov	w1, w22
    3818:	mov	x0, x19
    381c:	mov	x2, x20
    3820:	stp	x20, x3, [sp, #144]
    3824:	bl	a30 <d_print_comp_inner>
    3828:	ldr	w1, [x20, #4]
    382c:	ldr	x0, [sp, #152]
    3830:	str	x0, [x19, #328]
    3834:	ldr	w0, [x19, #308]
    3838:	sub	w1, w1, #0x1
    383c:	str	w1, [x20, #4]
    3840:	sub	w0, w0, #0x1
    3844:	str	w0, [x19, #308]
    3848:	adrp	x20, 0 <d_make_comp>
    384c:	add	x20, x20, #0x0
    3850:	mov	x0, x20
    3854:	bl	0 <__asan_internal_strlen>
    3858:	cbz	x0, 38d8 <d_print_comp_inner+0x2ea8>
    385c:	add	x23, x20, x0
    3860:	mov	x25, #0x1                   	// #1
    3864:	ldr	x1, [x19, #256]
    3868:	b	38c4 <d_print_comp_inner+0x2e94>
    386c:	ldp	x3, x2, [x19, #272]
    3870:	strb	wzr, [x19, #255]
    3874:	mov	x0, x19
    3878:	add	x20, x20, #0x1
    387c:	blr	x3
    3880:	strb	w21, [x19]
    3884:	ldr	x0, [x19, #320]
    3888:	str	x25, [x19, #256]
    388c:	strb	w21, [x19, #264]
    3890:	cmp	x20, x23
    3894:	add	x0, x0, #0x1
    3898:	str	x0, [x19, #320]
    389c:	b.eq	38d8 <d_print_comp_inner+0x2ea8>  // b.none
    38a0:	ldrb	w21, [x20]
    38a4:	mov	x0, #0x1                   	// #1
    38a8:	add	x1, x0, #0x1
    38ac:	str	x1, [x19, #256]
    38b0:	strb	w21, [x19, x0]
    38b4:	add	x20, x20, #0x1
    38b8:	strb	w21, [x19, #264]
    38bc:	cmp	x23, x20
    38c0:	b.eq	38d8 <d_print_comp_inner+0x2ea8>  // b.none
    38c4:	ldrb	w21, [x20]
    38c8:	cmp	x1, #0xff
    38cc:	b.eq	386c <d_print_comp_inner+0x2e3c>  // b.none
    38d0:	mov	x0, x1
    38d4:	b	38a8 <d_print_comp_inner+0x2e78>
    38d8:	ldr	x20, [x24, #16]
    38dc:	cbz	x20, 48c8 <d_print_comp_inner+0x3e98>
    38e0:	ldr	w0, [x20, #4]
    38e4:	cmp	w0, #0x1
    38e8:	b.gt	48c8 <d_print_comp_inner+0x3e98>
    38ec:	ldr	w1, [x19, #308]
    38f0:	cmp	w1, #0x400
    38f4:	b.gt	48c8 <d_print_comp_inner+0x3e98>
    38f8:	ldr	x3, [x19, #328]
    38fc:	add	w0, w0, #0x1
    3900:	str	w0, [x20, #4]
    3904:	add	w1, w1, #0x1
    3908:	add	x0, sp, #0x90
    390c:	str	w1, [x19, #308]
    3910:	str	x0, [x19, #328]
    3914:	mov	w1, w22
    3918:	mov	x0, x19
    391c:	mov	x2, x20
    3920:	stp	x20, x3, [sp, #144]
    3924:	bl	a30 <d_print_comp_inner>
    3928:	ldr	w1, [x20, #4]
    392c:	ldr	x0, [sp, #152]
    3930:	sub	w1, w1, #0x1
    3934:	ldp	x21, x22, [sp, #32]
    3938:	ldp	x23, x24, [sp, #48]
    393c:	ldp	x25, x26, [sp, #64]
    3940:	str	x0, [x19, #328]
    3944:	ldr	w0, [x19, #308]
    3948:	str	w1, [x20, #4]
    394c:	sub	w0, w0, #0x1
    3950:	str	w0, [x19, #308]
    3954:	b	a9c <d_print_comp_inner+0x6c>
    3958:	ldr	x20, [x24, #8]
    395c:	cbz	x20, 490c <d_print_comp_inner+0x3edc>
    3960:	ldr	w0, [x20, #4]
    3964:	cmp	w0, #0x1
    3968:	b.gt	490c <d_print_comp_inner+0x3edc>
    396c:	ldr	w1, [x19, #308]
    3970:	cmp	w1, #0x400
    3974:	b.gt	490c <d_print_comp_inner+0x3edc>
    3978:	ldr	x3, [x19, #328]
    397c:	add	w0, w0, #0x1
    3980:	str	w0, [x20, #4]
    3984:	add	w1, w1, #0x1
    3988:	add	x0, sp, #0x90
    398c:	str	w1, [x19, #308]
    3990:	str	x0, [x19, #328]
    3994:	mov	w1, w22
    3998:	mov	x0, x19
    399c:	mov	x2, x20
    39a0:	stp	x20, x3, [sp, #144]
    39a4:	bl	a30 <d_print_comp_inner>
    39a8:	ldr	w1, [x20, #4]
    39ac:	ldr	x0, [sp, #152]
    39b0:	sub	w1, w1, #0x1
    39b4:	ldp	x21, x22, [sp, #32]
    39b8:	ldp	x23, x24, [sp, #48]
    39bc:	ldp	x25, x26, [sp, #64]
    39c0:	str	x0, [x19, #328]
    39c4:	ldr	w0, [x19, #308]
    39c8:	str	w1, [x20, #4]
    39cc:	sub	w0, w0, #0x1
    39d0:	str	w0, [x19, #308]
    39d4:	b	a9c <d_print_comp_inner+0x6c>
    39d8:	ldr	x20, [x24, #8]
    39dc:	cbz	x20, 4924 <d_print_comp_inner+0x3ef4>
    39e0:	ldr	w0, [x20, #4]
    39e4:	cmp	w0, #0x1
    39e8:	b.gt	4924 <d_print_comp_inner+0x3ef4>
    39ec:	ldr	w1, [x19, #308]
    39f0:	cmp	w1, #0x400
    39f4:	b.gt	4924 <d_print_comp_inner+0x3ef4>
    39f8:	ldr	x3, [x19, #328]
    39fc:	add	w0, w0, #0x1
    3a00:	str	w0, [x20, #4]
    3a04:	add	w1, w1, #0x1
    3a08:	add	x0, sp, #0x90
    3a0c:	str	w1, [x19, #308]
    3a10:	str	x0, [x19, #328]
    3a14:	mov	w1, w22
    3a18:	mov	x0, x19
    3a1c:	mov	x2, x20
    3a20:	stp	x20, x3, [sp, #144]
    3a24:	bl	a30 <d_print_comp_inner>
    3a28:	ldr	w1, [x20, #4]
    3a2c:	ldr	x0, [sp, #152]
    3a30:	sub	w1, w1, #0x1
    3a34:	ldp	x21, x22, [sp, #32]
    3a38:	ldp	x23, x24, [sp, #48]
    3a3c:	ldp	x25, x26, [sp, #64]
    3a40:	str	x0, [x19, #328]
    3a44:	ldr	w0, [x19, #308]
    3a48:	str	w1, [x20, #4]
    3a4c:	sub	w0, w0, #0x1
    3a50:	str	w0, [x19, #308]
    3a54:	b	a9c <d_print_comp_inner+0x6c>
    3a58:	ldr	x20, [x24, #8]
    3a5c:	cbz	x20, 49ac <d_print_comp_inner+0x3f7c>
    3a60:	ldr	w0, [x20, #4]
    3a64:	cmp	w0, #0x1
    3a68:	b.gt	49ac <d_print_comp_inner+0x3f7c>
    3a6c:	ldr	w1, [x19, #308]
    3a70:	cmp	w1, #0x400
    3a74:	b.gt	49ac <d_print_comp_inner+0x3f7c>
    3a78:	ldr	x3, [x19, #328]
    3a7c:	add	w0, w0, #0x1
    3a80:	str	w0, [x20, #4]
    3a84:	add	w1, w1, #0x1
    3a88:	add	x0, sp, #0x90
    3a8c:	str	w1, [x19, #308]
    3a90:	str	x0, [x19, #328]
    3a94:	mov	w1, w22
    3a98:	mov	x0, x19
    3a9c:	mov	x2, x20
    3aa0:	stp	x20, x3, [sp, #144]
    3aa4:	bl	a30 <d_print_comp_inner>
    3aa8:	ldr	w1, [x20, #4]
    3aac:	ldr	x0, [sp, #152]
    3ab0:	sub	w1, w1, #0x1
    3ab4:	ldp	x21, x22, [sp, #32]
    3ab8:	ldp	x23, x24, [sp, #48]
    3abc:	ldp	x25, x26, [sp, #64]
    3ac0:	str	x0, [x19, #328]
    3ac4:	ldr	w0, [x19, #308]
    3ac8:	str	w1, [x20, #4]
    3acc:	sub	w0, w0, #0x1
    3ad0:	str	w0, [x19, #308]
    3ad4:	b	a9c <d_print_comp_inner+0x6c>
    3ad8:	ldr	x20, [x24, #16]
    3adc:	cbz	x20, 4844 <d_print_comp_inner+0x3e14>
    3ae0:	ldr	w0, [x20, #4]
    3ae4:	cmp	w0, #0x1
    3ae8:	b.gt	4844 <d_print_comp_inner+0x3e14>
    3aec:	ldr	w1, [x19, #308]
    3af0:	cmp	w1, #0x400
    3af4:	b.gt	4844 <d_print_comp_inner+0x3e14>
    3af8:	ldr	x3, [x19, #328]
    3afc:	add	w0, w0, #0x1
    3b00:	str	w0, [x20, #4]
    3b04:	add	w1, w1, #0x1
    3b08:	add	x0, sp, #0x90
    3b0c:	str	w1, [x19, #308]
    3b10:	str	x0, [x19, #328]
    3b14:	mov	w1, w22
    3b18:	mov	x0, x19
    3b1c:	mov	x2, x20
    3b20:	stp	x20, x3, [sp, #144]
    3b24:	bl	a30 <d_print_comp_inner>
    3b28:	ldr	w1, [x20, #4]
    3b2c:	ldr	x0, [sp, #152]
    3b30:	str	x0, [x19, #328]
    3b34:	ldr	w0, [x19, #308]
    3b38:	sub	w1, w1, #0x1
    3b3c:	str	w1, [x20, #4]
    3b40:	sub	w0, w0, #0x1
    3b44:	str	w0, [x19, #308]
    3b48:	ldr	x1, [x19, #256]
    3b4c:	add	x0, x1, #0x1
    3b50:	cmp	x1, #0xff
    3b54:	b.ne	3b7c <d_print_comp_inner+0x314c>  // b.any
    3b58:	ldp	x3, x2, [x19, #272]
    3b5c:	strb	wzr, [x19, #255]
    3b60:	mov	x0, x19
    3b64:	blr	x3
    3b68:	ldr	x2, [x19, #320]
    3b6c:	mov	x0, #0x1                   	// #1
    3b70:	mov	x1, #0x0                   	// #0
    3b74:	add	x2, x2, x0
    3b78:	str	x2, [x19, #320]
    3b7c:	str	x0, [x19, #256]
    3b80:	mov	w0, #0x5d                  	// #93
    3b84:	strb	w0, [x19, x1]
    3b88:	strb	w0, [x19, #264]
    3b8c:	ldp	x21, x22, [sp, #32]
    3b90:	ldp	x23, x24, [sp, #48]
    3b94:	ldp	x25, x26, [sp, #64]
    3b98:	b	a9c <d_print_comp_inner+0x6c>
    3b9c:	ldr	x20, [x24, #8]
    3ba0:	cbz	x20, 49c4 <d_print_comp_inner+0x3f94>
    3ba4:	ldr	w0, [x20, #4]
    3ba8:	cmp	w0, #0x1
    3bac:	b.gt	49c4 <d_print_comp_inner+0x3f94>
    3bb0:	ldr	w1, [x19, #308]
    3bb4:	cmp	w1, #0x400
    3bb8:	b.gt	49c4 <d_print_comp_inner+0x3f94>
    3bbc:	ldr	x3, [x19, #328]
    3bc0:	add	w0, w0, #0x1
    3bc4:	str	w0, [x20, #4]
    3bc8:	add	w1, w1, #0x1
    3bcc:	add	x0, sp, #0x90
    3bd0:	str	w1, [x19, #308]
    3bd4:	str	x0, [x19, #328]
    3bd8:	mov	w1, w22
    3bdc:	mov	x0, x19
    3be0:	mov	x2, x20
    3be4:	stp	x20, x3, [sp, #144]
    3be8:	bl	a30 <d_print_comp_inner>
    3bec:	ldr	w1, [x20, #4]
    3bf0:	ldr	x0, [sp, #152]
    3bf4:	sub	w1, w1, #0x1
    3bf8:	ldp	x21, x22, [sp, #32]
    3bfc:	ldp	x23, x24, [sp, #48]
    3c00:	ldp	x25, x26, [sp, #64]
    3c04:	str	x0, [x19, #328]
    3c08:	ldr	w0, [x19, #308]
    3c0c:	str	w1, [x20, #4]
    3c10:	sub	w0, w0, #0x1
    3c14:	str	w0, [x19, #308]
    3c18:	b	a9c <d_print_comp_inner+0x6c>
    3c1c:	ldr	x20, [x24, #8]
    3c20:	cbz	x20, 49f4 <d_print_comp_inner+0x3fc4>
    3c24:	ldr	w0, [x20, #4]
    3c28:	cmp	w0, #0x1
    3c2c:	b.gt	49f4 <d_print_comp_inner+0x3fc4>
    3c30:	ldr	w1, [x19, #308]
    3c34:	cmp	w1, #0x400
    3c38:	b.gt	49f4 <d_print_comp_inner+0x3fc4>
    3c3c:	ldr	x3, [x19, #328]
    3c40:	add	w0, w0, #0x1
    3c44:	str	w0, [x20, #4]
    3c48:	add	w1, w1, #0x1
    3c4c:	add	x0, sp, #0x90
    3c50:	str	w1, [x19, #308]
    3c54:	str	x0, [x19, #328]
    3c58:	mov	w1, w22
    3c5c:	mov	x0, x19
    3c60:	mov	x2, x20
    3c64:	stp	x20, x3, [sp, #144]
    3c68:	bl	a30 <d_print_comp_inner>
    3c6c:	ldr	w1, [x20, #4]
    3c70:	ldr	x0, [sp, #152]
    3c74:	sub	w1, w1, #0x1
    3c78:	ldp	x21, x22, [sp, #32]
    3c7c:	ldp	x23, x24, [sp, #48]
    3c80:	ldp	x25, x26, [sp, #64]
    3c84:	str	x0, [x19, #328]
    3c88:	ldr	w0, [x19, #308]
    3c8c:	str	w1, [x20, #4]
    3c90:	sub	w0, w0, #0x1
    3c94:	str	w0, [x19, #308]
    3c98:	b	a9c <d_print_comp_inner+0x6c>
    3c9c:	ldr	x20, [x24, #8]
    3ca0:	cbz	x20, 49dc <d_print_comp_inner+0x3fac>
    3ca4:	ldr	w0, [x20, #4]
    3ca8:	cmp	w0, #0x1
    3cac:	b.gt	49dc <d_print_comp_inner+0x3fac>
    3cb0:	ldr	w1, [x19, #308]
    3cb4:	cmp	w1, #0x400
    3cb8:	b.gt	49dc <d_print_comp_inner+0x3fac>
    3cbc:	ldr	x3, [x19, #328]
    3cc0:	add	w0, w0, #0x1
    3cc4:	str	w0, [x20, #4]
    3cc8:	add	w1, w1, #0x1
    3ccc:	add	x0, sp, #0x90
    3cd0:	str	w1, [x19, #308]
    3cd4:	str	x0, [x19, #328]
    3cd8:	mov	w1, w22
    3cdc:	mov	x0, x19
    3ce0:	mov	x2, x20
    3ce4:	stp	x20, x3, [sp, #144]
    3ce8:	bl	a30 <d_print_comp_inner>
    3cec:	ldr	w1, [x20, #4]
    3cf0:	ldr	x0, [sp, #152]
    3cf4:	sub	w1, w1, #0x1
    3cf8:	ldp	x21, x22, [sp, #32]
    3cfc:	ldp	x23, x24, [sp, #48]
    3d00:	ldp	x25, x26, [sp, #64]
    3d04:	str	x0, [x19, #328]
    3d08:	ldr	w0, [x19, #308]
    3d0c:	str	w1, [x20, #4]
    3d10:	sub	w0, w0, #0x1
    3d14:	str	w0, [x19, #308]
    3d18:	b	a9c <d_print_comp_inner+0x6c>
    3d1c:	ldr	x20, [x24, #16]
    3d20:	cbz	x20, 493c <d_print_comp_inner+0x3f0c>
    3d24:	ldr	w0, [x20, #4]
    3d28:	cmp	w0, #0x1
    3d2c:	b.gt	493c <d_print_comp_inner+0x3f0c>
    3d30:	ldr	w1, [x19, #308]
    3d34:	cmp	w1, #0x400
    3d38:	b.gt	493c <d_print_comp_inner+0x3f0c>
    3d3c:	ldr	x3, [x19, #328]
    3d40:	add	w0, w0, #0x1
    3d44:	str	w0, [x20, #4]
    3d48:	add	w1, w1, #0x1
    3d4c:	add	x0, sp, #0x90
    3d50:	str	w1, [x19, #308]
    3d54:	str	x0, [x19, #328]
    3d58:	mov	w1, w22
    3d5c:	mov	x0, x19
    3d60:	mov	x2, x20
    3d64:	stp	x20, x3, [sp, #144]
    3d68:	bl	a30 <d_print_comp_inner>
    3d6c:	ldr	w1, [x20, #4]
    3d70:	ldr	x0, [sp, #152]
    3d74:	str	x0, [x19, #328]
    3d78:	ldr	w0, [x19, #308]
    3d7c:	sub	w1, w1, #0x1
    3d80:	str	w1, [x20, #4]
    3d84:	sub	w0, w0, #0x1
    3d88:	str	w0, [x19, #308]
    3d8c:	adrp	x20, 0 <d_make_comp>
    3d90:	add	x20, x20, #0x0
    3d94:	mov	x0, x20
    3d98:	bl	0 <__asan_internal_strlen>
    3d9c:	cbz	x0, 3e1c <d_print_comp_inner+0x33ec>
    3da0:	add	x23, x20, x0
    3da4:	mov	x25, #0x1                   	// #1
    3da8:	ldr	x1, [x19, #256]
    3dac:	b	3e08 <d_print_comp_inner+0x33d8>
    3db0:	ldp	x3, x2, [x19, #272]
    3db4:	strb	wzr, [x19, #255]
    3db8:	mov	x0, x19
    3dbc:	add	x20, x20, #0x1
    3dc0:	blr	x3
    3dc4:	strb	w21, [x19]
    3dc8:	ldr	x0, [x19, #320]
    3dcc:	str	x25, [x19, #256]
    3dd0:	strb	w21, [x19, #264]
    3dd4:	cmp	x23, x20
    3dd8:	add	x0, x0, #0x1
    3ddc:	str	x0, [x19, #320]
    3de0:	b.eq	3e1c <d_print_comp_inner+0x33ec>  // b.none
    3de4:	ldrb	w21, [x20]
    3de8:	mov	x0, #0x1                   	// #1
    3dec:	add	x1, x0, #0x1
    3df0:	str	x1, [x19, #256]
    3df4:	strb	w21, [x19, x0]
    3df8:	add	x20, x20, #0x1
    3dfc:	strb	w21, [x19, #264]
    3e00:	cmp	x23, x20
    3e04:	b.eq	3e1c <d_print_comp_inner+0x33ec>  // b.none
    3e08:	ldrb	w21, [x20]
    3e0c:	cmp	x1, #0xff
    3e10:	b.eq	3db0 <d_print_comp_inner+0x3380>  // b.none
    3e14:	mov	x0, x1
    3e18:	b	3dec <d_print_comp_inner+0x33bc>
    3e1c:	ldr	x20, [x24, #8]
    3e20:	cbz	x20, 4a0c <d_print_comp_inner+0x3fdc>
    3e24:	ldr	w0, [x20, #4]
    3e28:	cmp	w0, #0x1
    3e2c:	b.gt	4a0c <d_print_comp_inner+0x3fdc>
    3e30:	ldr	w1, [x19, #308]
    3e34:	cmp	w1, #0x400
    3e38:	b.gt	4a0c <d_print_comp_inner+0x3fdc>
    3e3c:	ldr	x3, [x19, #328]
    3e40:	add	w0, w0, #0x1
    3e44:	str	w0, [x20, #4]
    3e48:	add	w1, w1, #0x1
    3e4c:	add	x0, sp, #0x90
    3e50:	str	w1, [x19, #308]
    3e54:	str	x0, [x19, #328]
    3e58:	mov	w1, w22
    3e5c:	mov	x0, x19
    3e60:	mov	x2, x20
    3e64:	stp	x20, x3, [sp, #144]
    3e68:	bl	a30 <d_print_comp_inner>
    3e6c:	ldr	w1, [x20, #4]
    3e70:	ldr	x0, [sp, #152]
    3e74:	sub	w1, w1, #0x1
    3e78:	ldp	x21, x22, [sp, #32]
    3e7c:	ldp	x23, x24, [sp, #48]
    3e80:	ldp	x25, x26, [sp, #64]
    3e84:	str	x0, [x19, #328]
    3e88:	ldr	w0, [x19, #308]
    3e8c:	str	w1, [x20, #4]
    3e90:	sub	w0, w0, #0x1
    3e94:	str	w0, [x19, #308]
    3e98:	b	a9c <d_print_comp_inner+0x6c>
    3e9c:	ldr	x20, [x24, #8]
    3ea0:	cbz	x20, 4b30 <d_print_comp_inner+0x4100>
    3ea4:	ldr	w0, [x20, #4]
    3ea8:	cmp	w0, #0x1
    3eac:	b.gt	4b30 <d_print_comp_inner+0x4100>
    3eb0:	ldr	w1, [x19, #308]
    3eb4:	cmp	w1, #0x400
    3eb8:	b.gt	4b30 <d_print_comp_inner+0x4100>
    3ebc:	ldr	x3, [x19, #328]
    3ec0:	add	w0, w0, #0x1
    3ec4:	str	w0, [x20, #4]
    3ec8:	add	w1, w1, #0x1
    3ecc:	add	x0, sp, #0x90
    3ed0:	str	w1, [x19, #308]
    3ed4:	str	x0, [x19, #328]
    3ed8:	mov	w1, w22
    3edc:	mov	x0, x19
    3ee0:	mov	x2, x20
    3ee4:	stp	x20, x3, [sp, #144]
    3ee8:	bl	a30 <d_print_comp_inner>
    3eec:	ldr	w1, [x20, #4]
    3ef0:	ldr	x0, [sp, #152]
    3ef4:	sub	w1, w1, #0x1
    3ef8:	ldp	x21, x22, [sp, #32]
    3efc:	ldp	x23, x24, [sp, #48]
    3f00:	ldp	x25, x26, [sp, #64]
    3f04:	str	x0, [x19, #328]
    3f08:	ldr	w0, [x19, #308]
    3f0c:	str	w1, [x20, #4]
    3f10:	sub	w0, w0, #0x1
    3f14:	str	w0, [x19, #308]
    3f18:	b	a9c <d_print_comp_inner+0x6c>
    3f1c:	ldr	x2, [x24, #8]
    3f20:	adrp	x1, 0 <d_make_comp>
    3f24:	add	x1, x1, #0x0
    3f28:	add	x20, sp, #0x90
    3f2c:	add	w2, w2, #0x1
    3f30:	mov	x0, x20
    3f34:	bl	0 <sprintf>
    3f38:	mov	x0, x20
    3f3c:	bl	0 <__asan_internal_strlen>
    3f40:	cbz	x0, 4d28 <d_print_comp_inner+0x42f8>
    3f44:	add	x22, x20, x0
    3f48:	mov	x23, #0x1                   	// #1
    3f4c:	ldr	x1, [x19, #256]
    3f50:	b	3fac <d_print_comp_inner+0x357c>
    3f54:	ldp	x3, x2, [x19, #272]
    3f58:	strb	wzr, [x19, #255]
    3f5c:	mov	x0, x19
    3f60:	add	x20, x20, #0x1
    3f64:	blr	x3
    3f68:	strb	w21, [x19]
    3f6c:	ldr	x0, [x19, #320]
    3f70:	str	x23, [x19, #256]
    3f74:	strb	w21, [x19, #264]
    3f78:	cmp	x20, x22
    3f7c:	add	x0, x0, #0x1
    3f80:	str	x0, [x19, #320]
    3f84:	b.eq	4dc8 <d_print_comp_inner+0x4398>  // b.none
    3f88:	ldrb	w21, [x20]
    3f8c:	mov	x0, #0x1                   	// #1
    3f90:	add	x1, x0, #0x1
    3f94:	str	x1, [x19, #256]
    3f98:	strb	w21, [x19, x0]
    3f9c:	add	x20, x20, #0x1
    3fa0:	strb	w21, [x19, #264]
    3fa4:	cmp	x22, x20
    3fa8:	b.eq	4d2c <d_print_comp_inner+0x42fc>  // b.none
    3fac:	ldrb	w21, [x20]
    3fb0:	cmp	x1, #0xff
    3fb4:	b.eq	3f54 <d_print_comp_inner+0x3524>  // b.none
    3fb8:	mov	x0, x1
    3fbc:	b	3f90 <d_print_comp_inner+0x3560>
    3fc0:	ldr	x20, [x24, #8]
    3fc4:	cbz	x20, 4a24 <d_print_comp_inner+0x3ff4>
    3fc8:	ldr	w0, [x20, #4]
    3fcc:	cmp	w0, #0x1
    3fd0:	b.gt	4a24 <d_print_comp_inner+0x3ff4>
    3fd4:	ldr	w1, [x19, #308]
    3fd8:	cmp	w1, #0x400
    3fdc:	b.gt	4a24 <d_print_comp_inner+0x3ff4>
    3fe0:	ldr	x3, [x19, #328]
    3fe4:	add	w0, w0, #0x1
    3fe8:	str	w0, [x20, #4]
    3fec:	add	w1, w1, #0x1
    3ff0:	add	x0, sp, #0x90
    3ff4:	str	w1, [x19, #308]
    3ff8:	str	x0, [x19, #328]
    3ffc:	mov	w1, w22
    4000:	mov	x0, x19
    4004:	mov	x2, x20
    4008:	stp	x20, x3, [sp, #144]
    400c:	bl	a30 <d_print_comp_inner>
    4010:	ldr	w1, [x20, #4]
    4014:	ldr	x0, [sp, #152]
    4018:	sub	w1, w1, #0x1
    401c:	ldp	x21, x22, [sp, #32]
    4020:	ldp	x23, x24, [sp, #48]
    4024:	ldp	x25, x26, [sp, #64]
    4028:	str	x0, [x19, #328]
    402c:	ldr	w0, [x19, #308]
    4030:	str	w1, [x20, #4]
    4034:	sub	w0, w0, #0x1
    4038:	str	w0, [x19, #308]
    403c:	b	a9c <d_print_comp_inner+0x6c>
    4040:	ldr	x20, [x24, #8]
    4044:	cbz	x20, 4a54 <d_print_comp_inner+0x4024>
    4048:	ldr	w0, [x20, #4]
    404c:	cmp	w0, #0x1
    4050:	b.gt	4a54 <d_print_comp_inner+0x4024>
    4054:	ldr	w1, [x19, #308]
    4058:	cmp	w1, #0x400
    405c:	b.gt	4a54 <d_print_comp_inner+0x4024>
    4060:	ldr	x3, [x19, #328]
    4064:	add	w0, w0, #0x1
    4068:	str	w0, [x20, #4]
    406c:	add	w1, w1, #0x1
    4070:	add	x0, sp, #0x90
    4074:	str	w1, [x19, #308]
    4078:	str	x0, [x19, #328]
    407c:	mov	w1, w22
    4080:	mov	x0, x19
    4084:	mov	x2, x20
    4088:	stp	x20, x3, [sp, #144]
    408c:	bl	a30 <d_print_comp_inner>
    4090:	ldr	w1, [x20, #4]
    4094:	ldr	x0, [sp, #152]
    4098:	sub	w1, w1, #0x1
    409c:	ldp	x21, x22, [sp, #32]
    40a0:	ldp	x23, x24, [sp, #48]
    40a4:	ldp	x25, x26, [sp, #64]
    40a8:	str	x0, [x19, #328]
    40ac:	ldr	w0, [x19, #308]
    40b0:	str	w1, [x20, #4]
    40b4:	sub	w0, w0, #0x1
    40b8:	str	w0, [x19, #308]
    40bc:	b	a9c <d_print_comp_inner+0x6c>
    40c0:	ldr	x20, [x24, #16]
    40c4:	cbz	x20, 4b00 <d_print_comp_inner+0x40d0>
    40c8:	ldr	w0, [x20, #4]
    40cc:	cmp	w0, #0x1
    40d0:	b.gt	4b00 <d_print_comp_inner+0x40d0>
    40d4:	ldr	w1, [x19, #308]
    40d8:	cmp	w1, #0x400
    40dc:	b.gt	4b00 <d_print_comp_inner+0x40d0>
    40e0:	ldr	x3, [x19, #328]
    40e4:	add	w0, w0, #0x1
    40e8:	str	w0, [x20, #4]
    40ec:	add	w1, w1, #0x1
    40f0:	add	x0, sp, #0x90
    40f4:	str	w1, [x19, #308]
    40f8:	str	x0, [x19, #328]
    40fc:	mov	w1, w22
    4100:	mov	x0, x19
    4104:	mov	x2, x20
    4108:	stp	x20, x3, [sp, #144]
    410c:	bl	a30 <d_print_comp_inner>
    4110:	ldr	w1, [x20, #4]
    4114:	ldr	x0, [sp, #152]
    4118:	str	x0, [x19, #328]
    411c:	ldr	w0, [x19, #308]
    4120:	sub	w1, w1, #0x1
    4124:	str	w1, [x20, #4]
    4128:	sub	w0, w0, #0x1
    412c:	str	w0, [x19, #308]
    4130:	ldr	x1, [x19, #256]
    4134:	add	x0, x1, #0x1
    4138:	cmp	x1, #0xff
    413c:	b.ne	4164 <d_print_comp_inner+0x3734>  // b.any
    4140:	ldp	x3, x2, [x19, #272]
    4144:	strb	wzr, [x19, #255]
    4148:	mov	x0, x19
    414c:	blr	x3
    4150:	ldr	x2, [x19, #320]
    4154:	mov	x0, #0x1                   	// #1
    4158:	mov	x1, #0x0                   	// #0
    415c:	add	x2, x2, x0
    4160:	str	x2, [x19, #320]
    4164:	str	x0, [x19, #256]
    4168:	mov	w0, #0x5d                  	// #93
    416c:	strb	w0, [x19, x1]
    4170:	strb	w0, [x19, #264]
    4174:	ldp	x21, x22, [sp, #32]
    4178:	ldp	x23, x24, [sp, #48]
    417c:	ldp	x25, x26, [sp, #64]
    4180:	b	a9c <d_print_comp_inner+0x6c>
    4184:	ldr	x20, [x24, #8]
    4188:	cbz	x20, 4b0c <d_print_comp_inner+0x40dc>
    418c:	ldr	w0, [x20, #4]
    4190:	cmp	w0, #0x1
    4194:	b.gt	4b0c <d_print_comp_inner+0x40dc>
    4198:	ldr	w1, [x19, #308]
    419c:	cmp	w1, #0x400
    41a0:	b.gt	4b0c <d_print_comp_inner+0x40dc>
    41a4:	ldr	x3, [x19, #328]
    41a8:	add	w0, w0, #0x1
    41ac:	str	w0, [x20, #4]
    41b0:	add	w1, w1, #0x1
    41b4:	add	x0, sp, #0x90
    41b8:	str	w1, [x19, #308]
    41bc:	str	x0, [x19, #328]
    41c0:	mov	w1, w22
    41c4:	mov	x0, x19
    41c8:	mov	x2, x20
    41cc:	stp	x20, x3, [sp, #144]
    41d0:	bl	a30 <d_print_comp_inner>
    41d4:	ldr	w1, [x20, #4]
    41d8:	ldr	x0, [sp, #152]
    41dc:	sub	w1, w1, #0x1
    41e0:	ldp	x21, x22, [sp, #32]
    41e4:	ldp	x23, x24, [sp, #48]
    41e8:	ldp	x25, x26, [sp, #64]
    41ec:	str	x0, [x19, #328]
    41f0:	ldr	w0, [x19, #308]
    41f4:	str	w1, [x20, #4]
    41f8:	sub	w0, w0, #0x1
    41fc:	str	w0, [x19, #308]
    4200:	b	a9c <d_print_comp_inner+0x6c>
    4204:	ldr	x20, [x24, #16]
    4208:	cbz	x20, 4ae8 <d_print_comp_inner+0x40b8>
    420c:	ldr	w0, [x20, #4]
    4210:	cmp	w0, #0x1
    4214:	b.gt	4ae8 <d_print_comp_inner+0x40b8>
    4218:	ldr	w1, [x19, #308]
    421c:	cmp	w1, #0x400
    4220:	b.gt	4ae8 <d_print_comp_inner+0x40b8>
    4224:	ldr	x3, [x19, #328]
    4228:	add	w0, w0, #0x1
    422c:	str	w0, [x20, #4]
    4230:	add	w1, w1, #0x1
    4234:	add	x0, sp, #0x90
    4238:	str	w1, [x19, #308]
    423c:	str	x0, [x19, #328]
    4240:	mov	w1, w22
    4244:	mov	x0, x19
    4248:	mov	x2, x20
    424c:	stp	x20, x3, [sp, #144]
    4250:	bl	a30 <d_print_comp_inner>
    4254:	ldr	w1, [x20, #4]
    4258:	ldr	x0, [sp, #152]
    425c:	sub	w1, w1, #0x1
    4260:	ldp	x21, x22, [sp, #32]
    4264:	ldp	x23, x24, [sp, #48]
    4268:	ldp	x25, x26, [sp, #64]
    426c:	str	x0, [x19, #328]
    4270:	ldr	w0, [x19, #308]
    4274:	str	w1, [x20, #4]
    4278:	sub	w0, w0, #0x1
    427c:	str	w0, [x19, #308]
    4280:	b	a9c <d_print_comp_inner+0x6c>
    4284:	ldr	x20, [x24, #8]
    4288:	cbz	x20, 4b48 <d_print_comp_inner+0x4118>
    428c:	ldr	w0, [x20, #4]
    4290:	cmp	w0, #0x1
    4294:	b.gt	4b48 <d_print_comp_inner+0x4118>
    4298:	ldr	w1, [x19, #308]
    429c:	cmp	w1, #0x400
    42a0:	b.gt	4b48 <d_print_comp_inner+0x4118>
    42a4:	ldr	x3, [x19, #328]
    42a8:	add	w0, w0, #0x1
    42ac:	str	w0, [x20, #4]
    42b0:	add	w1, w1, #0x1
    42b4:	add	x0, sp, #0x90
    42b8:	str	w1, [x19, #308]
    42bc:	str	x0, [x19, #328]
    42c0:	mov	w1, w22
    42c4:	mov	x0, x19
    42c8:	mov	x2, x20
    42cc:	stp	x20, x3, [sp, #144]
    42d0:	bl	a30 <d_print_comp_inner>
    42d4:	ldr	w1, [x20, #4]
    42d8:	ldr	x0, [sp, #152]
    42dc:	sub	w1, w1, #0x1
    42e0:	ldp	x21, x22, [sp, #32]
    42e4:	ldp	x23, x24, [sp, #48]
    42e8:	ldp	x25, x26, [sp, #64]
    42ec:	str	x0, [x19, #328]
    42f0:	ldr	w0, [x19, #308]
    42f4:	str	w1, [x20, #4]
    42f8:	sub	w0, w0, #0x1
    42fc:	str	w0, [x19, #308]
    4300:	b	a9c <d_print_comp_inner+0x6c>
    4304:	ldr	x20, [x24, #8]
    4308:	cbz	x20, 4a6c <d_print_comp_inner+0x403c>
    430c:	ldr	w0, [x20, #4]
    4310:	cmp	w0, #0x1
    4314:	b.gt	4a6c <d_print_comp_inner+0x403c>
    4318:	ldr	w1, [x19, #308]
    431c:	cmp	w1, #0x400
    4320:	b.gt	4a6c <d_print_comp_inner+0x403c>
    4324:	ldr	x3, [x19, #328]
    4328:	add	w0, w0, #0x1
    432c:	str	w0, [x20, #4]
    4330:	add	w1, w1, #0x1
    4334:	add	x0, sp, #0x90
    4338:	str	w1, [x19, #308]
    433c:	str	x0, [x19, #328]
    4340:	mov	w1, w22
    4344:	mov	x0, x19
    4348:	mov	x2, x20
    434c:	stp	x20, x3, [sp, #144]
    4350:	bl	a30 <d_print_comp_inner>
    4354:	ldr	w1, [x20, #4]
    4358:	ldr	x0, [sp, #152]
    435c:	sub	w1, w1, #0x1
    4360:	ldp	x21, x22, [sp, #32]
    4364:	ldp	x23, x24, [sp, #48]
    4368:	ldp	x25, x26, [sp, #64]
    436c:	str	x0, [x19, #328]
    4370:	ldr	w0, [x19, #308]
    4374:	str	w1, [x20, #4]
    4378:	sub	w0, w0, #0x1
    437c:	str	w0, [x19, #308]
    4380:	b	a9c <d_print_comp_inner+0x6c>
    4384:	ldr	x20, [x24, #8]
    4388:	cbz	x20, 4b24 <d_print_comp_inner+0x40f4>
    438c:	ldr	w0, [x20, #4]
    4390:	cmp	w0, #0x1
    4394:	b.gt	4b24 <d_print_comp_inner+0x40f4>
    4398:	ldr	w1, [x19, #308]
    439c:	cmp	w1, #0x400
    43a0:	b.gt	4b24 <d_print_comp_inner+0x40f4>
    43a4:	ldr	x3, [x19, #328]
    43a8:	add	w0, w0, #0x1
    43ac:	str	w0, [x20, #4]
    43b0:	add	w1, w1, #0x1
    43b4:	add	x0, sp, #0x90
    43b8:	str	w1, [x19, #308]
    43bc:	str	x0, [x19, #328]
    43c0:	mov	w1, w22
    43c4:	mov	x0, x19
    43c8:	mov	x2, x20
    43cc:	stp	x20, x3, [sp, #144]
    43d0:	bl	a30 <d_print_comp_inner>
    43d4:	ldr	w1, [x20, #4]
    43d8:	ldr	x0, [sp, #152]
    43dc:	str	x0, [x19, #328]
    43e0:	ldr	w0, [x19, #308]
    43e4:	sub	w1, w1, #0x1
    43e8:	str	w1, [x20, #4]
    43ec:	sub	w0, w0, #0x1
    43f0:	str	w0, [x19, #308]
    43f4:	ldr	x1, [x19, #256]
    43f8:	add	x0, x1, #0x1
    43fc:	cmp	x1, #0xff
    4400:	b.ne	4428 <d_print_comp_inner+0x39f8>  // b.any
    4404:	ldp	x3, x2, [x19, #272]
    4408:	strb	wzr, [x19, #255]
    440c:	mov	x0, x19
    4410:	blr	x3
    4414:	ldr	x2, [x19, #320]
    4418:	mov	x0, #0x1                   	// #1
    441c:	mov	x1, #0x0                   	// #0
    4420:	add	x2, x2, x0
    4424:	str	x2, [x19, #320]
    4428:	str	x0, [x19, #256]
    442c:	mov	w0, #0x29                  	// #41
    4430:	strb	w0, [x19, x1]
    4434:	strb	w0, [x19, #264]
    4438:	ldp	x21, x22, [sp, #32]
    443c:	ldp	x23, x24, [sp, #48]
    4440:	ldp	x25, x26, [sp, #64]
    4444:	b	a9c <d_print_comp_inner+0x6c>
    4448:	ldr	w0, [x19, #312]
    444c:	ldr	x20, [x24, #8]
    4450:	add	w1, w0, #0x1
    4454:	str	w1, [x19, #312]
    4458:	cbz	x20, 4ac0 <d_print_comp_inner+0x4090>
    445c:	ldr	w1, [x20, #4]
    4460:	cmp	w1, #0x1
    4464:	b.gt	4ac0 <d_print_comp_inner+0x4090>
    4468:	ldr	w2, [x19, #308]
    446c:	cmp	w2, #0x400
    4470:	b.gt	4ac0 <d_print_comp_inner+0x4090>
    4474:	ldr	x3, [x19, #328]
    4478:	add	w1, w1, #0x1
    447c:	str	w1, [x20, #4]
    4480:	add	w2, w2, #0x1
    4484:	add	x21, sp, #0x90
    4488:	str	w2, [x19, #308]
    448c:	str	x21, [x19, #328]
    4490:	mov	x0, x19
    4494:	mov	w1, w22
    4498:	mov	x2, x20
    449c:	stp	x20, x3, [sp, #144]
    44a0:	bl	a30 <d_print_comp_inner>
    44a4:	ldr	w2, [x20, #4]
    44a8:	ldr	x0, [sp, #152]
    44ac:	str	x0, [x19, #328]
    44b0:	ldr	w0, [x19, #312]
    44b4:	sub	w2, w2, #0x1
    44b8:	ldr	w1, [x19, #308]
    44bc:	sub	w0, w0, #0x1
    44c0:	str	w2, [x20, #4]
    44c4:	sub	w1, w1, #0x1
    44c8:	str	w1, [x19, #308]
    44cc:	str	w0, [x19, #312]
    44d0:	adrp	x20, 0 <d_make_comp>
    44d4:	add	x20, x20, #0x0
    44d8:	mov	x0, x20
    44dc:	bl	0 <__asan_internal_strlen>
    44e0:	cbz	x0, 4560 <d_print_comp_inner+0x3b30>
    44e4:	add	x23, x20, x0
    44e8:	mov	x25, #0x1                   	// #1
    44ec:	ldr	x1, [x19, #256]
    44f0:	b	454c <d_print_comp_inner+0x3b1c>
    44f4:	ldp	x3, x2, [x19, #272]
    44f8:	strb	wzr, [x19, #255]
    44fc:	mov	x0, x19
    4500:	add	x20, x20, #0x1
    4504:	blr	x3
    4508:	strb	w22, [x19]
    450c:	ldr	x0, [x19, #320]
    4510:	str	x25, [x19, #256]
    4514:	strb	w22, [x19, #264]
    4518:	cmp	x20, x23
    451c:	add	x0, x0, #0x1
    4520:	str	x0, [x19, #320]
    4524:	b.eq	4560 <d_print_comp_inner+0x3b30>  // b.none
    4528:	ldrb	w22, [x20]
    452c:	mov	x0, #0x1                   	// #1
    4530:	add	x1, x0, #0x1
    4534:	str	x1, [x19, #256]
    4538:	strb	w22, [x19, x0]
    453c:	add	x20, x20, #0x1
    4540:	strb	w22, [x19, #264]
    4544:	cmp	x23, x20
    4548:	b.eq	4560 <d_print_comp_inner+0x3b30>  // b.none
    454c:	ldrb	w22, [x20]
    4550:	cmp	x1, #0xff
    4554:	b.eq	44f4 <d_print_comp_inner+0x3ac4>  // b.none
    4558:	mov	x0, x1
    455c:	b	4530 <d_print_comp_inner+0x3b00>
    4560:	ldr	w2, [x24, #16]
    4564:	adrp	x1, 0 <d_make_comp>
    4568:	add	x1, x1, #0x0
    456c:	mov	x0, x21
    4570:	add	w2, w2, #0x1
    4574:	bl	0 <sprintf>
    4578:	mov	x0, x21
    457c:	bl	0 <__asan_internal_strlen>
    4580:	cbz	x0, 4d78 <d_print_comp_inner+0x4348>
    4584:	add	x22, x21, x0
    4588:	mov	x23, #0x1                   	// #1
    458c:	ldr	x1, [x19, #256]
    4590:	b	45ec <d_print_comp_inner+0x3bbc>
    4594:	ldp	x3, x2, [x19, #272]
    4598:	strb	wzr, [x19, #255]
    459c:	mov	x0, x19
    45a0:	add	x21, x21, #0x1
    45a4:	blr	x3
    45a8:	strb	w20, [x19]
    45ac:	ldr	x0, [x19, #320]
    45b0:	str	x23, [x19, #256]
    45b4:	strb	w20, [x19, #264]
    45b8:	cmp	x21, x22
    45bc:	add	x0, x0, #0x1
    45c0:	str	x0, [x19, #320]
    45c4:	b.eq	4dd4 <d_print_comp_inner+0x43a4>  // b.none
    45c8:	ldrb	w20, [x21]
    45cc:	mov	x0, #0x1                   	// #1
    45d0:	add	x1, x0, #0x1
    45d4:	str	x1, [x19, #256]
    45d8:	strb	w20, [x19, x0]
    45dc:	add	x21, x21, #0x1
    45e0:	strb	w20, [x19, #264]
    45e4:	cmp	x21, x22
    45e8:	b.eq	4d7c <d_print_comp_inner+0x434c>  // b.none
    45ec:	ldrb	w20, [x21]
    45f0:	cmp	x1, #0xff
    45f4:	b.eq	4594 <d_print_comp_inner+0x3b64>  // b.none
    45f8:	mov	x0, x1
    45fc:	b	45d0 <d_print_comp_inner+0x3ba0>
    4600:	ldr	x20, [x24, #8]
    4604:	cbz	x20, 4ad0 <d_print_comp_inner+0x40a0>
    4608:	ldr	w0, [x20, #4]
    460c:	cmp	w0, #0x1
    4610:	b.gt	4ad0 <d_print_comp_inner+0x40a0>
    4614:	ldr	w1, [x19, #308]
    4618:	cmp	w1, #0x400
    461c:	b.gt	4ad0 <d_print_comp_inner+0x40a0>
    4620:	ldr	x3, [x19, #328]
    4624:	add	w0, w0, #0x1
    4628:	str	w0, [x20, #4]
    462c:	add	w1, w1, #0x1
    4630:	add	x0, sp, #0x90
    4634:	str	w1, [x19, #308]
    4638:	str	x0, [x19, #328]
    463c:	mov	w1, w22
    4640:	mov	x0, x19
    4644:	mov	x2, x20
    4648:	stp	x20, x3, [sp, #144]
    464c:	bl	a30 <d_print_comp_inner>
    4650:	ldr	w1, [x20, #4]
    4654:	ldr	x0, [sp, #152]
    4658:	sub	w1, w1, #0x1
    465c:	ldp	x21, x22, [sp, #32]
    4660:	ldp	x23, x24, [sp, #48]
    4664:	ldp	x25, x26, [sp, #64]
    4668:	str	x0, [x19, #328]
    466c:	ldr	w0, [x19, #308]
    4670:	str	w1, [x20, #4]
    4674:	sub	w0, w0, #0x1
    4678:	str	w0, [x19, #308]
    467c:	b	a9c <d_print_comp_inner+0x6c>
    4680:	ldr	x20, [x24, #8]
    4684:	cbz	x20, 4aa8 <d_print_comp_inner+0x4078>
    4688:	ldr	w0, [x20, #4]
    468c:	cmp	w0, #0x1
    4690:	b.gt	4aa8 <d_print_comp_inner+0x4078>
    4694:	ldr	w1, [x19, #308]
    4698:	cmp	w1, #0x400
    469c:	b.gt	4aa8 <d_print_comp_inner+0x4078>
    46a0:	ldr	x3, [x19, #328]
    46a4:	add	w0, w0, #0x1
    46a8:	str	w0, [x20, #4]
    46ac:	add	w1, w1, #0x1
    46b0:	add	x0, sp, #0x90
    46b4:	str	w1, [x19, #308]
    46b8:	str	x0, [x19, #328]
    46bc:	mov	w1, w22
    46c0:	mov	x0, x19
    46c4:	mov	x2, x20
    46c8:	stp	x20, x3, [sp, #144]
    46cc:	bl	a30 <d_print_comp_inner>
    46d0:	ldr	w1, [x20, #4]
    46d4:	ldr	x0, [sp, #152]
    46d8:	sub	w1, w1, #0x1
    46dc:	ldp	x21, x22, [sp, #32]
    46e0:	ldp	x23, x24, [sp, #48]
    46e4:	ldp	x25, x26, [sp, #64]
    46e8:	str	x0, [x19, #328]
    46ec:	ldr	w0, [x19, #308]
    46f0:	str	w1, [x20, #4]
    46f4:	sub	w0, w0, #0x1
    46f8:	str	w0, [x19, #308]
    46fc:	b	a9c <d_print_comp_inner+0x6c>
    4700:	ldr	x0, [x19, #368]
    4704:	cbz	x0, 4718 <d_print_comp_inner+0x3ce8>
    4708:	ldr	x2, [x19, #288]
    470c:	add	x1, sp, #0x80
    4710:	stp	x2, x0, [sp, #128]
    4714:	str	x1, [x19, #288]
    4718:	ldr	x20, [x24, #8]
    471c:	ldr	w1, [x20]
    4720:	cmp	w1, #0x4
    4724:	b.eq	55b0 <d_print_comp_inner+0x4b80>  // b.none
    4728:	ldr	w1, [x20, #4]
    472c:	cmp	w1, #0x1
    4730:	b.gt	4e84 <d_print_comp_inner+0x4454>
    4734:	ldr	w2, [x19, #308]
    4738:	cmp	w2, #0x400
    473c:	b.gt	4e84 <d_print_comp_inner+0x4454>
    4740:	ldr	x3, [x19, #328]
    4744:	add	w1, w1, #0x1
    4748:	str	w1, [x20, #4]
    474c:	add	w2, w2, #0x1
    4750:	add	x0, sp, #0x90
    4754:	str	w2, [x19, #308]
    4758:	str	x0, [x19, #328]
    475c:	mov	w1, w22
    4760:	mov	x2, x20
    4764:	mov	x0, x19
    4768:	stp	x20, x3, [sp, #144]
    476c:	bl	a30 <d_print_comp_inner>
    4770:	ldr	w2, [x20, #4]
    4774:	ldr	x0, [sp, #152]
    4778:	str	x0, [x19, #328]
    477c:	ldr	w1, [x19, #308]
    4780:	sub	w2, w2, #0x1
    4784:	ldr	x0, [x19, #368]
    4788:	str	w2, [x20, #4]
    478c:	sub	w1, w1, #0x1
    4790:	str	w1, [x19, #308]
    4794:	cbz	x0, 5e34 <d_print_comp_inner+0x5404>
    4798:	ldr	x0, [sp, #128]
    479c:	ldp	x21, x22, [sp, #32]
    47a0:	ldp	x23, x24, [sp, #48]
    47a4:	ldp	x25, x26, [sp, #64]
    47a8:	str	x0, [x19, #288]
    47ac:	b	a9c <d_print_comp_inner+0x6c>
    47b0:	ldr	x20, [x24, #8]
    47b4:	cbz	x20, 4b60 <d_print_comp_inner+0x4130>
    47b8:	ldr	w0, [x20, #4]
    47bc:	cmp	w0, #0x1
    47c0:	b.gt	4b60 <d_print_comp_inner+0x4130>
    47c4:	ldr	w1, [x19, #308]
    47c8:	cmp	w1, #0x400
    47cc:	b.gt	4b60 <d_print_comp_inner+0x4130>
    47d0:	ldr	x3, [x19, #328]
    47d4:	add	w0, w0, #0x1
    47d8:	str	w0, [x20, #4]
    47dc:	add	w1, w1, #0x1
    47e0:	add	x0, sp, #0x90
    47e4:	str	w1, [x19, #308]
    47e8:	str	x0, [x19, #328]
    47ec:	mov	w1, w22
    47f0:	mov	x0, x19
    47f4:	mov	x2, x20
    47f8:	stp	x20, x3, [sp, #144]
    47fc:	bl	a30 <d_print_comp_inner>
    4800:	ldr	w1, [x20, #4]
    4804:	ldr	x0, [sp, #152]
    4808:	sub	w1, w1, #0x1
    480c:	ldp	x21, x22, [sp, #32]
    4810:	ldp	x23, x24, [sp, #48]
    4814:	ldp	x25, x26, [sp, #64]
    4818:	str	x0, [x19, #328]
    481c:	ldr	w0, [x19, #308]
    4820:	str	w1, [x20, #4]
    4824:	sub	w0, w0, #0x1
    4828:	str	w0, [x19, #308]
    482c:	b	a9c <d_print_comp_inner+0x6c>
    4830:	ldp	x21, x22, [sp, #32]
    4834:	ldp	x23, x24, [sp, #48]
    4838:	ldp	x25, x26, [sp, #64]
    483c:	ldp	x27, x28, [sp, #80]
    4840:	b	a9c <d_print_comp_inner+0x6c>
    4844:	mov	w0, #0x1                   	// #1
    4848:	str	w0, [x19, #304]
    484c:	b	3b48 <d_print_comp_inner+0x3118>
    4850:	mov	w0, #0x1                   	// #1
    4854:	str	w0, [x19, #304]
    4858:	b	3848 <d_print_comp_inner+0x2e18>
    485c:	mov	w0, #0x1                   	// #1
    4860:	str	w0, [x19, #304]
    4864:	b	c60 <d_print_comp_inner+0x230>
    4868:	mov	w0, #0x1                   	// #1
    486c:	ldp	x21, x22, [sp, #32]
    4870:	ldp	x23, x24, [sp, #48]
    4874:	ldp	x25, x26, [sp, #64]
    4878:	str	w0, [x19, #304]
    487c:	b	a9c <d_print_comp_inner+0x6c>
    4880:	mov	w0, #0x1                   	// #1
    4884:	ldp	x21, x22, [sp, #32]
    4888:	ldp	x23, x24, [sp, #48]
    488c:	ldp	x25, x26, [sp, #64]
    4890:	str	w0, [x19, #304]
    4894:	b	a9c <d_print_comp_inner+0x6c>
    4898:	mov	w0, #0x1                   	// #1
    489c:	ldp	x21, x22, [sp, #32]
    48a0:	ldp	x23, x24, [sp, #48]
    48a4:	ldp	x25, x26, [sp, #64]
    48a8:	str	w0, [x19, #304]
    48ac:	b	a9c <d_print_comp_inner+0x6c>
    48b0:	mov	w0, #0x1                   	// #1
    48b4:	ldp	x21, x22, [sp, #32]
    48b8:	ldp	x23, x24, [sp, #48]
    48bc:	ldp	x25, x26, [sp, #64]
    48c0:	str	w0, [x19, #304]
    48c4:	b	a9c <d_print_comp_inner+0x6c>
    48c8:	mov	w0, #0x1                   	// #1
    48cc:	ldp	x21, x22, [sp, #32]
    48d0:	ldp	x23, x24, [sp, #48]
    48d4:	ldp	x25, x26, [sp, #64]
    48d8:	str	w0, [x19, #304]
    48dc:	b	a9c <d_print_comp_inner+0x6c>
    48e0:	ldr	x23, [x23, #8]
    48e4:	cbnz	x23, cb8 <d_print_comp_inner+0x288>
    48e8:	mov	w0, #0x1                   	// #1
    48ec:	ldp	x21, x22, [sp, #32]
    48f0:	ldp	x23, x24, [sp, #48]
    48f4:	ldp	x25, x26, [sp, #64]
    48f8:	str	w0, [x19, #304]
    48fc:	b	a9c <d_print_comp_inner+0x6c>
    4900:	mov	w1, #0x1                   	// #1
    4904:	str	w1, [x19, #304]
    4908:	b	32b8 <d_print_comp_inner+0x2888>
    490c:	mov	w0, #0x1                   	// #1
    4910:	ldp	x21, x22, [sp, #32]
    4914:	ldp	x23, x24, [sp, #48]
    4918:	ldp	x25, x26, [sp, #64]
    491c:	str	w0, [x19, #304]
    4920:	b	a9c <d_print_comp_inner+0x6c>
    4924:	mov	w0, #0x1                   	// #1
    4928:	ldp	x21, x22, [sp, #32]
    492c:	ldp	x23, x24, [sp, #48]
    4930:	ldp	x25, x26, [sp, #64]
    4934:	str	w0, [x19, #304]
    4938:	b	a9c <d_print_comp_inner+0x6c>
    493c:	mov	w0, #0x1                   	// #1
    4940:	str	w0, [x19, #304]
    4944:	b	3d8c <d_print_comp_inner+0x335c>
    4948:	mov	w0, #0x1                   	// #1
    494c:	str	w0, [x19, #304]
    4950:	mov	x2, x24
    4954:	mov	w1, w22
    4958:	mov	x0, x19
    495c:	bl	78e8 <d_print_mod>
    4960:	b	dc0 <d_print_comp_inner+0x390>
    4964:	mov	w0, #0x1                   	// #1
    4968:	ldp	x21, x22, [sp, #32]
    496c:	ldp	x23, x24, [sp, #48]
    4970:	ldp	x25, x26, [sp, #64]
    4974:	str	w0, [x19, #304]
    4978:	b	a9c <d_print_comp_inner+0x6c>
    497c:	mov	w0, #0x1                   	// #1
    4980:	ldp	x21, x22, [sp, #32]
    4984:	ldp	x23, x24, [sp, #48]
    4988:	ldp	x25, x26, [sp, #64]
    498c:	str	w0, [x19, #304]
    4990:	b	a9c <d_print_comp_inner+0x6c>
    4994:	mov	w0, #0x1                   	// #1
    4998:	ldp	x21, x22, [sp, #32]
    499c:	ldp	x23, x24, [sp, #48]
    49a0:	ldp	x25, x26, [sp, #64]
    49a4:	str	w0, [x19, #304]
    49a8:	b	a9c <d_print_comp_inner+0x6c>
    49ac:	mov	w0, #0x1                   	// #1
    49b0:	ldp	x21, x22, [sp, #32]
    49b4:	ldp	x23, x24, [sp, #48]
    49b8:	ldp	x25, x26, [sp, #64]
    49bc:	str	w0, [x19, #304]
    49c0:	b	a9c <d_print_comp_inner+0x6c>
    49c4:	mov	w0, #0x1                   	// #1
    49c8:	ldp	x21, x22, [sp, #32]
    49cc:	ldp	x23, x24, [sp, #48]
    49d0:	ldp	x25, x26, [sp, #64]
    49d4:	str	w0, [x19, #304]
    49d8:	b	a9c <d_print_comp_inner+0x6c>
    49dc:	mov	w0, #0x1                   	// #1
    49e0:	ldp	x21, x22, [sp, #32]
    49e4:	ldp	x23, x24, [sp, #48]
    49e8:	ldp	x25, x26, [sp, #64]
    49ec:	str	w0, [x19, #304]
    49f0:	b	a9c <d_print_comp_inner+0x6c>
    49f4:	mov	w0, #0x1                   	// #1
    49f8:	ldp	x21, x22, [sp, #32]
    49fc:	ldp	x23, x24, [sp, #48]
    4a00:	ldp	x25, x26, [sp, #64]
    4a04:	str	w0, [x19, #304]
    4a08:	b	a9c <d_print_comp_inner+0x6c>
    4a0c:	mov	w0, #0x1                   	// #1
    4a10:	ldp	x21, x22, [sp, #32]
    4a14:	ldp	x23, x24, [sp, #48]
    4a18:	ldp	x25, x26, [sp, #64]
    4a1c:	str	w0, [x19, #304]
    4a20:	b	a9c <d_print_comp_inner+0x6c>
    4a24:	mov	w0, #0x1                   	// #1
    4a28:	ldp	x21, x22, [sp, #32]
    4a2c:	ldp	x23, x24, [sp, #48]
    4a30:	ldp	x25, x26, [sp, #64]
    4a34:	str	w0, [x19, #304]
    4a38:	b	a9c <d_print_comp_inner+0x6c>
    4a3c:	mov	w0, #0x1                   	// #1
    4a40:	str	w0, [x19, #304]
    4a44:	b	1cf8 <d_print_comp_inner+0x12c8>
    4a48:	mov	w0, #0x1                   	// #1
    4a4c:	str	w0, [x19, #304]
    4a50:	b	1df8 <d_print_comp_inner+0x13c8>
    4a54:	mov	w0, #0x1                   	// #1
    4a58:	ldp	x21, x22, [sp, #32]
    4a5c:	ldp	x23, x24, [sp, #48]
    4a60:	ldp	x25, x26, [sp, #64]
    4a64:	str	w0, [x19, #304]
    4a68:	b	a9c <d_print_comp_inner+0x6c>
    4a6c:	mov	w0, #0x1                   	// #1
    4a70:	ldp	x21, x22, [sp, #32]
    4a74:	ldp	x23, x24, [sp, #48]
    4a78:	ldp	x25, x26, [sp, #64]
    4a7c:	str	w0, [x19, #304]
    4a80:	b	a9c <d_print_comp_inner+0x6c>
    4a84:	mov	w0, #0x1                   	// #1
    4a88:	ldp	x21, x22, [sp, #32]
    4a8c:	ldp	x23, x24, [sp, #48]
    4a90:	ldp	x25, x26, [sp, #64]
    4a94:	str	w0, [x19, #304]
    4a98:	b	a9c <d_print_comp_inner+0x6c>
    4a9c:	mov	w0, #0x1                   	// #1
    4aa0:	str	w0, [x19, #304]
    4aa4:	b	273c <d_print_comp_inner+0x1d0c>
    4aa8:	mov	w0, #0x1                   	// #1
    4aac:	ldp	x21, x22, [sp, #32]
    4ab0:	ldp	x23, x24, [sp, #48]
    4ab4:	ldp	x25, x26, [sp, #64]
    4ab8:	str	w0, [x19, #304]
    4abc:	b	a9c <d_print_comp_inner+0x6c>
    4ac0:	mov	w1, #0x1                   	// #1
    4ac4:	add	x21, sp, #0x90
    4ac8:	str	w1, [x19, #304]
    4acc:	b	44cc <d_print_comp_inner+0x3a9c>
    4ad0:	mov	w0, #0x1                   	// #1
    4ad4:	ldp	x21, x22, [sp, #32]
    4ad8:	ldp	x23, x24, [sp, #48]
    4adc:	ldp	x25, x26, [sp, #64]
    4ae0:	str	w0, [x19, #304]
    4ae4:	b	a9c <d_print_comp_inner+0x6c>
    4ae8:	mov	w0, #0x1                   	// #1
    4aec:	ldp	x21, x22, [sp, #32]
    4af0:	ldp	x23, x24, [sp, #48]
    4af4:	ldp	x25, x26, [sp, #64]
    4af8:	str	w0, [x19, #304]
    4afc:	b	a9c <d_print_comp_inner+0x6c>
    4b00:	mov	w0, #0x1                   	// #1
    4b04:	str	w0, [x19, #304]
    4b08:	b	4130 <d_print_comp_inner+0x3700>
    4b0c:	mov	w0, #0x1                   	// #1
    4b10:	ldp	x21, x22, [sp, #32]
    4b14:	ldp	x23, x24, [sp, #48]
    4b18:	ldp	x25, x26, [sp, #64]
    4b1c:	str	w0, [x19, #304]
    4b20:	b	a9c <d_print_comp_inner+0x6c>
    4b24:	mov	w0, #0x1                   	// #1
    4b28:	str	w0, [x19, #304]
    4b2c:	b	43f4 <d_print_comp_inner+0x39c4>
    4b30:	mov	w0, #0x1                   	// #1
    4b34:	ldp	x21, x22, [sp, #32]
    4b38:	ldp	x23, x24, [sp, #48]
    4b3c:	ldp	x25, x26, [sp, #64]
    4b40:	str	w0, [x19, #304]
    4b44:	b	a9c <d_print_comp_inner+0x6c>
    4b48:	mov	w0, #0x1                   	// #1
    4b4c:	ldp	x21, x22, [sp, #32]
    4b50:	ldp	x23, x24, [sp, #48]
    4b54:	ldp	x25, x26, [sp, #64]
    4b58:	str	w0, [x19, #304]
    4b5c:	b	a9c <d_print_comp_inner+0x6c>
    4b60:	mov	w0, #0x1                   	// #1
    4b64:	ldp	x21, x22, [sp, #32]
    4b68:	ldp	x23, x24, [sp, #48]
    4b6c:	ldp	x25, x26, [sp, #64]
    4b70:	str	w0, [x19, #304]
    4b74:	b	a9c <d_print_comp_inner+0x6c>
    4b78:	cbnz	x20, 2c40 <d_print_comp_inner+0x2210>
    4b7c:	mov	w0, #0x1                   	// #1
    4b80:	str	w0, [x19, #304]
    4b84:	b	2ca8 <d_print_comp_inner+0x2278>
    4b88:	mov	w1, #0x1                   	// #1
    4b8c:	str	w1, [x19, #304]
    4b90:	b	2d70 <d_print_comp_inner+0x2340>
    4b94:	mov	w0, #0x1                   	// #1
    4b98:	str	w0, [x19, #304]
    4b9c:	b	106c <d_print_comp_inner+0x63c>
    4ba0:	ldr	x20, [x22, #8]
    4ba4:	ldrb	w0, [x20]
    4ba8:	sub	w0, w0, #0x61
    4bac:	and	w0, w0, #0xff
    4bb0:	cmp	w0, #0x19
    4bb4:	b.hi	4bfc <d_print_comp_inner+0x41cc>  // b.pmore
    4bb8:	ldr	x1, [x19, #256]
    4bbc:	cmp	x1, #0xff
    4bc0:	b.ne	5acc <d_print_comp_inner+0x509c>  // b.any
    4bc4:	ldp	x3, x2, [x19, #272]
    4bc8:	strb	wzr, [x19, #255]
    4bcc:	mov	x0, x19
    4bd0:	blr	x3
    4bd4:	ldr	x2, [x19, #320]
    4bd8:	mov	x0, #0x1                   	// #1
    4bdc:	mov	x1, #0x0                   	// #0
    4be0:	add	x2, x2, x0
    4be4:	ldr	x20, [x22, #8]
    4be8:	str	x2, [x19, #320]
    4bec:	str	x0, [x19, #256]
    4bf0:	mov	w0, #0x20                  	// #32
    4bf4:	strb	w0, [x19, x1]
    4bf8:	strb	w0, [x19, #264]
    4bfc:	sxtw	x22, w23
    4c00:	sub	w0, w23, #0x1
    4c04:	add	x1, x20, x22
    4c08:	sxtw	x0, w0
    4c0c:	ldurb	w1, [x1, #-1]
    4c10:	cmp	w1, #0x20
    4c14:	csel	x22, x22, x0, ne  // ne = any
    4c18:	cbz	x22, 69d8 <d_print_comp_inner+0x5fa8>
    4c1c:	add	x22, x20, x22
    4c20:	mov	x23, #0x1                   	// #1
    4c24:	ldr	x1, [x19, #256]
    4c28:	b	4c84 <d_print_comp_inner+0x4254>
    4c2c:	ldp	x3, x2, [x19, #272]
    4c30:	strb	wzr, [x19, #255]
    4c34:	mov	x0, x19
    4c38:	add	x20, x20, #0x1
    4c3c:	blr	x3
    4c40:	strb	w21, [x19]
    4c44:	ldr	x0, [x19, #320]
    4c48:	str	x23, [x19, #256]
    4c4c:	strb	w21, [x19, #264]
    4c50:	cmp	x20, x22
    4c54:	add	x0, x0, #0x1
    4c58:	str	x0, [x19, #320]
    4c5c:	b.eq	5b88 <d_print_comp_inner+0x5158>  // b.none
    4c60:	ldrb	w21, [x20]
    4c64:	mov	x0, #0x1                   	// #1
    4c68:	add	x1, x0, #0x1
    4c6c:	str	x1, [x19, #256]
    4c70:	strb	w21, [x19, x0]
    4c74:	add	x20, x20, #0x1
    4c78:	strb	w21, [x19, #264]
    4c7c:	cmp	x22, x20
    4c80:	b.eq	4e0c <d_print_comp_inner+0x43dc>  // b.none
    4c84:	ldrb	w21, [x20]
    4c88:	cmp	x1, #0xff
    4c8c:	b.eq	4c2c <d_print_comp_inner+0x41fc>  // b.none
    4c90:	mov	x0, x1
    4c94:	b	4c68 <d_print_comp_inner+0x4238>
    4c98:	ldr	x23, [x19, #256]
    4c9c:	ldr	x20, [x24, #16]
    4ca0:	cbz	x20, 4e64 <d_print_comp_inner+0x4434>
    4ca4:	ldr	w0, [x20, #4]
    4ca8:	cmp	w0, #0x1
    4cac:	b.gt	4e64 <d_print_comp_inner+0x4434>
    4cb0:	ldr	w1, [x19, #308]
    4cb4:	cmp	w1, #0x400
    4cb8:	b.gt	4e64 <d_print_comp_inner+0x4434>
    4cbc:	ldp	x21, x3, [x19, #320]
    4cc0:	add	w0, w0, #0x1
    4cc4:	str	w0, [x20, #4]
    4cc8:	add	w1, w1, #0x1
    4ccc:	add	x0, sp, #0x90
    4cd0:	str	w1, [x19, #308]
    4cd4:	str	x0, [x19, #328]
    4cd8:	mov	w1, w22
    4cdc:	mov	x0, x19
    4ce0:	mov	x2, x20
    4ce4:	stp	x20, x3, [sp, #144]
    4ce8:	bl	a30 <d_print_comp_inner>
    4cec:	ldr	w1, [x20, #4]
    4cf0:	ldr	x0, [sp, #152]
    4cf4:	sub	w1, w1, #0x1
    4cf8:	str	x0, [x19, #328]
    4cfc:	ldr	w0, [x19, #308]
    4d00:	str	w1, [x20, #4]
    4d04:	ldr	x1, [x19, #320]
    4d08:	sub	w0, w0, #0x1
    4d0c:	str	w0, [x19, #308]
    4d10:	cmp	x1, x21
    4d14:	b.eq	66f0 <d_print_comp_inner+0x5cc0>  // b.none
    4d18:	ldp	x21, x22, [sp, #32]
    4d1c:	ldp	x23, x24, [sp, #48]
    4d20:	ldp	x25, x26, [sp, #64]
    4d24:	b	a9c <d_print_comp_inner+0x6c>
    4d28:	ldr	x1, [x19, #256]
    4d2c:	cmp	x1, #0xff
    4d30:	b.ne	4dcc <d_print_comp_inner+0x439c>  // b.any
    4d34:	ldp	x3, x2, [x19, #272]
    4d38:	strb	wzr, [x19, #255]
    4d3c:	mov	x0, x19
    4d40:	blr	x3
    4d44:	ldr	x2, [x19, #320]
    4d48:	mov	x0, #0x1                   	// #1
    4d4c:	mov	x1, #0x0                   	// #0
    4d50:	add	x2, x2, x0
    4d54:	str	x2, [x19, #320]
    4d58:	str	x0, [x19, #256]
    4d5c:	mov	w0, #0x7d                  	// #125
    4d60:	strb	w0, [x19, x1]
    4d64:	strb	w0, [x19, #264]
    4d68:	ldp	x21, x22, [sp, #32]
    4d6c:	ldp	x23, x24, [sp, #48]
    4d70:	ldp	x25, x26, [sp, #64]
    4d74:	b	a9c <d_print_comp_inner+0x6c>
    4d78:	ldr	x1, [x19, #256]
    4d7c:	cmp	x1, #0xff
    4d80:	b.ne	4dd8 <d_print_comp_inner+0x43a8>  // b.any
    4d84:	ldp	x3, x2, [x19, #272]
    4d88:	strb	wzr, [x19, #255]
    4d8c:	mov	x0, x19
    4d90:	blr	x3
    4d94:	ldr	x2, [x19, #320]
    4d98:	mov	x0, #0x1                   	// #1
    4d9c:	mov	x1, #0x0                   	// #0
    4da0:	add	x2, x2, x0
    4da4:	str	x2, [x19, #320]
    4da8:	str	x0, [x19, #256]
    4dac:	mov	w0, #0x7d                  	// #125
    4db0:	strb	w0, [x19, x1]
    4db4:	strb	w0, [x19, #264]
    4db8:	ldp	x21, x22, [sp, #32]
    4dbc:	ldp	x23, x24, [sp, #48]
    4dc0:	ldp	x25, x26, [sp, #64]
    4dc4:	b	a9c <d_print_comp_inner+0x6c>
    4dc8:	mov	x1, #0x1                   	// #1
    4dcc:	add	x0, x1, #0x1
    4dd0:	b	4d58 <d_print_comp_inner+0x4328>
    4dd4:	mov	x1, #0x1                   	// #1
    4dd8:	add	x0, x1, #0x1
    4ddc:	b	4da8 <d_print_comp_inner+0x4378>
    4de0:	mov	w1, w22
    4de4:	mov	x2, x20
    4de8:	mov	x0, x19
    4dec:	bl	73b8 <d_print_subexpr>
    4df0:	ldp	x21, x22, [sp, #32]
    4df4:	ldp	x23, x24, [sp, #48]
    4df8:	ldp	x25, x26, [sp, #64]
    4dfc:	b	a9c <d_print_comp_inner+0x6c>
    4e00:	mov	w0, #0x1                   	// #1
    4e04:	str	w0, [x19, #304]
    4e08:	b	1500 <d_print_comp_inner+0xad0>
    4e0c:	ldp	x21, x22, [sp, #32]
    4e10:	ldp	x23, x24, [sp, #48]
    4e14:	ldp	x25, x26, [sp, #64]
    4e18:	b	a9c <d_print_comp_inner+0x6c>
    4e1c:	ldp	x21, x22, [sp, #32]
    4e20:	ldp	x23, x24, [sp, #48]
    4e24:	ldp	x25, x26, [sp, #64]
    4e28:	b	a9c <d_print_comp_inner+0x6c>
    4e2c:	ldr	x28, [x24, #8]
    4e30:	cbnz	w23, 1b6c <d_print_comp_inner+0x113c>
    4e34:	ldp	x21, x22, [sp, #32]
    4e38:	ldp	x23, x24, [sp, #48]
    4e3c:	ldp	x25, x26, [sp, #64]
    4e40:	ldp	x27, x28, [sp, #80]
    4e44:	b	a9c <d_print_comp_inner+0x6c>
    4e48:	ldp	x21, x22, [sp, #32]
    4e4c:	ldp	x23, x24, [sp, #48]
    4e50:	ldp	x25, x26, [sp, #64]
    4e54:	b	a9c <d_print_comp_inner+0x6c>
    4e58:	mov	x24, x0
    4e5c:	ldr	x25, [x0, #8]
    4e60:	b	bd8 <d_print_comp_inner+0x1a8>
    4e64:	mov	w0, #0x1                   	// #1
    4e68:	str	w0, [x19, #304]
    4e6c:	sub	x23, x23, #0x2
    4e70:	ldp	x21, x22, [sp, #32]
    4e74:	ldp	x25, x26, [sp, #64]
    4e78:	str	x23, [x19, #256]
    4e7c:	ldp	x23, x24, [sp, #48]
    4e80:	b	a9c <d_print_comp_inner+0x6c>
    4e84:	mov	w1, #0x1                   	// #1
    4e88:	str	w1, [x19, #304]
    4e8c:	b	4794 <d_print_comp_inner+0x3d64>
    4e90:	add	x21, x20, x21
    4e94:	cmp	x21, x20
    4e98:	b.ls	6d0c <d_print_comp_inner+0x62dc>  // b.plast
    4e9c:	mov	w23, #0x5f                  	// #95
    4ea0:	ldr	x1, [x19, #256]
    4ea4:	b	4ec8 <d_print_comp_inner+0x4498>
    4ea8:	mov	x0, x1
    4eac:	add	x1, x1, #0x1
    4eb0:	str	x1, [x19, #256]
    4eb4:	strb	w22, [x19, x0]
    4eb8:	strb	w22, [x19, #264]
    4ebc:	add	x20, x20, #0x1
    4ec0:	cmp	x21, x20
    4ec4:	b.ls	52f8 <d_print_comp_inner+0x48c8>  // b.plast
    4ec8:	sub	x0, x21, x20
    4ecc:	ldrb	w22, [x20]
    4ed0:	cmp	x0, #0x3
    4ed4:	b.le	4ee0 <d_print_comp_inner+0x44b0>
    4ed8:	cmp	w22, #0x5f
    4edc:	b.eq	4f10 <d_print_comp_inner+0x44e0>  // b.none
    4ee0:	cmp	x1, #0xff
    4ee4:	b.ne	4ea8 <d_print_comp_inner+0x4478>  // b.any
    4ee8:	ldp	x3, x2, [x19, #272]
    4eec:	strb	wzr, [x19, #255]
    4ef0:	mov	x0, x19
    4ef4:	blr	x3
    4ef8:	ldr	x2, [x19, #320]
    4efc:	mov	x1, #0x1                   	// #1
    4f00:	mov	x0, #0x0                   	// #0
    4f04:	add	x2, x2, x1
    4f08:	str	x2, [x19, #320]
    4f0c:	b	4eb0 <d_print_comp_inner+0x4480>
    4f10:	ldrb	w0, [x20, #1]
    4f14:	cmp	w0, #0x5f
    4f18:	b.ne	4ee0 <d_print_comp_inner+0x44b0>  // b.any
    4f1c:	ldrb	w0, [x20, #2]
    4f20:	cmp	w0, #0x55
    4f24:	b.ne	4ee0 <d_print_comp_inner+0x44b0>  // b.any
    4f28:	add	x24, x20, #0x3
    4f2c:	cmp	x21, x24
    4f30:	b.ls	4ee0 <d_print_comp_inner+0x44b0>  // b.plast
    4f34:	mov	x2, #0x0                   	// #0
    4f38:	b	4f54 <d_print_comp_inner+0x4524>
    4f3c:	mov	w0, w3
    4f40:	sxtw	x0, w0
    4f44:	add	x24, x24, #0x1
    4f48:	add	x2, x0, x2, lsl #4
    4f4c:	cmp	x21, x24
    4f50:	b.eq	4ee0 <d_print_comp_inner+0x44b0>  // b.none
    4f54:	ldrb	w0, [x24]
    4f58:	sub	w3, w0, #0x30
    4f5c:	and	w4, w3, #0xff
    4f60:	cmp	w4, #0x9
    4f64:	b.ls	4f3c <d_print_comp_inner+0x450c>  // b.plast
    4f68:	sub	w3, w0, #0x41
    4f6c:	and	w3, w3, #0xff
    4f70:	cmp	w3, #0x5
    4f74:	b.hi	687c <d_print_comp_inner+0x5e4c>  // b.pmore
    4f78:	sub	w0, w0, #0x37
    4f7c:	b	4f40 <d_print_comp_inner+0x4510>
    4f80:	mov	x0, x3
    4f84:	ldr	x4, [x19, #288]
    4f88:	b	bbc <d_print_comp_inner+0x18c>
    4f8c:	adrp	x20, 0 <d_make_comp>
    4f90:	add	x20, x20, #0x0
    4f94:	mov	x0, x20
    4f98:	bl	0 <__asan_internal_strlen>
    4f9c:	cbz	x0, 6d1c <d_print_comp_inner+0x62ec>
    4fa0:	add	x22, x20, x0
    4fa4:	mov	x23, #0x1                   	// #1
    4fa8:	ldr	x1, [x19, #256]
    4fac:	b	5008 <d_print_comp_inner+0x45d8>
    4fb0:	ldp	x3, x2, [x19, #272]
    4fb4:	strb	wzr, [x19, #255]
    4fb8:	mov	x0, x19
    4fbc:	add	x20, x20, #0x1
    4fc0:	blr	x3
    4fc4:	strb	w21, [x19]
    4fc8:	ldr	x0, [x19, #320]
    4fcc:	str	x23, [x19, #256]
    4fd0:	strb	w21, [x19, #264]
    4fd4:	cmp	x20, x22
    4fd8:	add	x0, x0, #0x1
    4fdc:	str	x0, [x19, #320]
    4fe0:	b.eq	6764 <d_print_comp_inner+0x5d34>  // b.none
    4fe4:	ldrb	w21, [x20]
    4fe8:	mov	x0, #0x1                   	// #1
    4fec:	add	x1, x0, #0x1
    4ff0:	str	x1, [x19, #256]
    4ff4:	strb	w21, [x19, x0]
    4ff8:	add	x20, x20, #0x1
    4ffc:	strb	w21, [x19, #264]
    5000:	cmp	x22, x20
    5004:	b.eq	5bc8 <d_print_comp_inner+0x5198>  // b.none
    5008:	ldrb	w21, [x20]
    500c:	cmp	x1, #0xff
    5010:	b.eq	4fb0 <d_print_comp_inner+0x4580>  // b.none
    5014:	mov	x0, x1
    5018:	b	4fec <d_print_comp_inner+0x45bc>
    501c:	ldrsw	x22, [x0, #24]
    5020:	ldr	x20, [x0, #16]
    5024:	cbz	x22, 6cdc <d_print_comp_inner+0x62ac>
    5028:	add	x22, x20, x22
    502c:	mov	x23, #0x1                   	// #1
    5030:	ldr	x1, [x19, #256]
    5034:	b	5090 <d_print_comp_inner+0x4660>
    5038:	ldp	x3, x2, [x19, #272]
    503c:	strb	wzr, [x19, #255]
    5040:	mov	x0, x19
    5044:	add	x20, x20, #0x1
    5048:	blr	x3
    504c:	strb	w21, [x19]
    5050:	ldr	x0, [x19, #320]
    5054:	str	x23, [x19, #256]
    5058:	strb	w21, [x19, #264]
    505c:	cmp	x20, x22
    5060:	add	x0, x0, #0x1
    5064:	str	x0, [x19, #320]
    5068:	b.eq	6730 <d_print_comp_inner+0x5d00>  // b.none
    506c:	ldrb	w21, [x20]
    5070:	mov	x0, #0x1                   	// #1
    5074:	add	x1, x0, #0x1
    5078:	str	x1, [x19, #256]
    507c:	strb	w21, [x19, x0]
    5080:	add	x20, x20, #0x1
    5084:	strb	w21, [x19, #264]
    5088:	cmp	x20, x22
    508c:	b.eq	5c08 <d_print_comp_inner+0x51d8>  // b.none
    5090:	ldrb	w21, [x20]
    5094:	cmp	x1, #0xff
    5098:	b.eq	5038 <d_print_comp_inner+0x4608>  // b.none
    509c:	mov	x0, x1
    50a0:	b	5074 <d_print_comp_inner+0x4644>
    50a4:	adrp	x20, 0 <d_make_comp>
    50a8:	add	x20, x20, #0x0
    50ac:	mov	x0, x20
    50b0:	bl	0 <__asan_internal_strlen>
    50b4:	cbz	x0, 5134 <d_print_comp_inner+0x4704>
    50b8:	add	x22, x20, x0
    50bc:	mov	x24, #0x1                   	// #1
    50c0:	ldr	x1, [x19, #256]
    50c4:	b	5120 <d_print_comp_inner+0x46f0>
    50c8:	ldp	x3, x2, [x19, #272]
    50cc:	strb	wzr, [x19, #255]
    50d0:	mov	x0, x19
    50d4:	add	x20, x20, #0x1
    50d8:	blr	x3
    50dc:	strb	w21, [x19]
    50e0:	ldr	x0, [x19, #320]
    50e4:	str	x24, [x19, #256]
    50e8:	strb	w21, [x19, #264]
    50ec:	cmp	x22, x20
    50f0:	add	x0, x0, #0x1
    50f4:	str	x0, [x19, #320]
    50f8:	b.eq	5134 <d_print_comp_inner+0x4704>  // b.none
    50fc:	ldrb	w21, [x20]
    5100:	mov	x0, #0x1                   	// #1
    5104:	add	x1, x0, #0x1
    5108:	str	x1, [x19, #256]
    510c:	strb	w21, [x19, x0]
    5110:	add	x20, x20, #0x1
    5114:	strb	w21, [x19, #264]
    5118:	cmp	x20, x22
    511c:	b.eq	5134 <d_print_comp_inner+0x4704>  // b.none
    5120:	ldrb	w21, [x20]
    5124:	cmp	x1, #0xff
    5128:	b.eq	50c8 <d_print_comp_inner+0x4698>  // b.none
    512c:	mov	x0, x1
    5130:	b	5104 <d_print_comp_inner+0x46d4>
    5134:	mov	w2, w23
    5138:	adrp	x1, 0 <d_make_comp>
    513c:	add	x1, x1, #0x0
    5140:	add	x20, sp, #0x90
    5144:	mov	x0, x20
    5148:	bl	0 <sprintf>
    514c:	mov	x0, x20
    5150:	bl	0 <__asan_internal_strlen>
    5154:	cbz	x0, 5554 <d_print_comp_inner+0x4b24>
    5158:	add	x22, x20, x0
    515c:	mov	x23, #0x1                   	// #1
    5160:	ldr	x1, [x19, #256]
    5164:	b	51c0 <d_print_comp_inner+0x4790>
    5168:	ldp	x3, x2, [x19, #272]
    516c:	strb	wzr, [x19, #255]
    5170:	mov	x0, x19
    5174:	add	x20, x20, #0x1
    5178:	blr	x3
    517c:	strb	w21, [x19]
    5180:	ldr	x0, [x19, #320]
    5184:	str	x23, [x19, #256]
    5188:	strb	w21, [x19, #264]
    518c:	cmp	x20, x22
    5190:	add	x0, x0, #0x1
    5194:	str	x0, [x19, #320]
    5198:	b.eq	59c4 <d_print_comp_inner+0x4f94>  // b.none
    519c:	ldrb	w21, [x20]
    51a0:	mov	x0, #0x1                   	// #1
    51a4:	add	x1, x0, #0x1
    51a8:	str	x1, [x19, #256]
    51ac:	strb	w21, [x19, x0]
    51b0:	add	x20, x20, #0x1
    51b4:	strb	w21, [x19, #264]
    51b8:	cmp	x20, x22
    51bc:	b.eq	5558 <d_print_comp_inner+0x4b28>  // b.none
    51c0:	ldrb	w21, [x20]
    51c4:	cmp	x1, #0xff
    51c8:	b.eq	5168 <d_print_comp_inner+0x4738>  // b.none
    51cc:	mov	x0, x1
    51d0:	b	51a4 <d_print_comp_inner+0x4774>
    51d4:	mov	w0, #0x1                   	// #1
    51d8:	str	w0, [x19, #304]
    51dc:	b	fb0 <d_print_comp_inner+0x580>
    51e0:	ldr	x21, [x19, #288]
    51e4:	cbz	x21, ac8 <d_print_comp_inner+0x98>
    51e8:	ldr	x2, [x21, #8]
    51ec:	ldr	x1, [x24, #8]
    51f0:	ldr	x20, [x2, #16]
    51f4:	mov	w0, w1
    51f8:	tbnz	w1, #31, 5224 <d_print_comp_inner+0x47f4>
    51fc:	cbnz	x20, 5210 <d_print_comp_inner+0x47e0>
    5200:	b	ac8 <d_print_comp_inner+0x98>
    5204:	ldr	x20, [x20, #16]
    5208:	sub	w0, w0, #0x1
    520c:	cbz	x20, ac8 <d_print_comp_inner+0x98>
    5210:	ldr	w1, [x20]
    5214:	cmp	w1, #0x2f
    5218:	b.ne	ac8 <d_print_comp_inner+0x98>  // b.any
    521c:	cbnz	w0, 5204 <d_print_comp_inner+0x47d4>
    5220:	ldr	x20, [x20, #8]
    5224:	cbz	x20, ac8 <d_print_comp_inner+0x98>
    5228:	ldr	w0, [x20]
    522c:	cmp	w0, #0x2f
    5230:	b.eq	699c <d_print_comp_inner+0x5f6c>  // b.none
    5234:	ldr	x0, [x21]
    5238:	str	x0, [x19, #288]
    523c:	ldr	w0, [x20, #4]
    5240:	cmp	w0, #0x1
    5244:	b.gt	5c38 <d_print_comp_inner+0x5208>
    5248:	ldr	w1, [x19, #308]
    524c:	cmp	w1, #0x400
    5250:	b.gt	5c38 <d_print_comp_inner+0x5208>
    5254:	ldr	x3, [x19, #328]
    5258:	add	w0, w0, #0x1
    525c:	str	w0, [x20, #4]
    5260:	add	w1, w1, #0x1
    5264:	add	x0, sp, #0x90
    5268:	str	w1, [x19, #308]
    526c:	str	x0, [x19, #328]
    5270:	mov	w1, w22
    5274:	mov	x0, x19
    5278:	mov	x2, x20
    527c:	stp	x20, x3, [sp, #144]
    5280:	bl	a30 <d_print_comp_inner>
    5284:	ldr	w1, [x20, #4]
    5288:	ldr	x0, [sp, #152]
    528c:	str	x0, [x19, #328]
    5290:	ldr	w0, [x19, #308]
    5294:	sub	w1, w1, #0x1
    5298:	str	w1, [x20, #4]
    529c:	sub	w0, w0, #0x1
    52a0:	str	w0, [x19, #308]
    52a4:	ldp	x23, x24, [sp, #48]
    52a8:	ldp	x25, x26, [sp, #64]
    52ac:	str	x21, [x19, #288]
    52b0:	ldp	x21, x22, [sp, #32]
    52b4:	b	a9c <d_print_comp_inner+0x6c>
    52b8:	ldr	x25, [x25, #8]
    52bc:	cbz	x25, 6ffc <d_print_comp_inner+0x65cc>
    52c0:	ldr	w4, [x25]
    52c4:	add	x21, sp, #0x90
    52c8:	stp	x21, x25, [sp, #176]
    52cc:	sub	w1, w4, #0x1c
    52d0:	str	wzr, [sp, #192]
    52d4:	cmp	w1, #0x34
    52d8:	str	x3, [sp, #200]
    52dc:	b.hi	52ec <d_print_comp_inner+0x48bc>  // b.pmore
    52e0:	lsl	x1, x0, x1
    52e4:	tst	x1, x2
    52e8:	b.ne	5d40 <d_print_comp_inner+0x5310>  // b.any
    52ec:	add	x1, x21, #0x20
    52f0:	mov	w20, #0x2                   	// #2
    52f4:	b	2ae0 <d_print_comp_inner+0x20b0>
    52f8:	ldp	x21, x22, [sp, #32]
    52fc:	ldp	x23, x24, [sp, #48]
    5300:	ldp	x25, x26, [sp, #64]
    5304:	b	a9c <d_print_comp_inner+0x6c>
    5308:	ldr	w0, [x20, #4]
    530c:	cmp	w0, #0x1
    5310:	b.gt	54b8 <d_print_comp_inner+0x4a88>
    5314:	ldr	w1, [x19, #308]
    5318:	cmp	w1, #0x400
    531c:	b.gt	54b8 <d_print_comp_inner+0x4a88>
    5320:	ldr	x3, [x19, #328]
    5324:	add	w0, w0, #0x1
    5328:	str	w0, [x20, #4]
    532c:	add	w1, w1, #0x1
    5330:	add	x0, sp, #0x90
    5334:	str	w1, [x19, #308]
    5338:	str	x0, [x19, #328]
    533c:	mov	w1, w22
    5340:	mov	x0, x19
    5344:	mov	x2, x20
    5348:	stp	x20, x3, [sp, #144]
    534c:	bl	a30 <d_print_comp_inner>
    5350:	ldr	w1, [x20, #4]
    5354:	ldr	x0, [sp, #152]
    5358:	str	x0, [x19, #328]
    535c:	ldr	w0, [x19, #308]
    5360:	sub	w1, w1, #0x1
    5364:	str	w1, [x20, #4]
    5368:	sub	w0, w0, #0x1
    536c:	str	w0, [x19, #308]
    5370:	ldr	x1, [x19, #256]
    5374:	add	x0, x1, #0x1
    5378:	cmp	x1, #0xff
    537c:	b.ne	53a4 <d_print_comp_inner+0x4974>  // b.any
    5380:	ldp	x3, x2, [x19, #272]
    5384:	strb	wzr, [x19, #255]
    5388:	mov	x0, x19
    538c:	blr	x3
    5390:	ldr	x2, [x19, #320]
    5394:	mov	x0, #0x1                   	// #1
    5398:	mov	x1, #0x0                   	// #0
    539c:	add	x2, x2, x0
    53a0:	str	x2, [x19, #320]
    53a4:	str	x0, [x19, #256]
    53a8:	mov	w0, #0x20                  	// #32
    53ac:	strb	w0, [x19, x1]
    53b0:	strb	w0, [x19, #264]
    53b4:	b	1584 <d_print_comp_inner+0xb54>
    53b8:	ldr	x1, [x19, #256]
    53bc:	add	x0, x1, #0x1
    53c0:	cmp	x1, #0xff
    53c4:	b.ne	53ec <d_print_comp_inner+0x49bc>  // b.any
    53c8:	ldp	x3, x2, [x19, #272]
    53cc:	strb	wzr, [x19, #255]
    53d0:	mov	x0, x19
    53d4:	blr	x3
    53d8:	ldr	x2, [x19, #320]
    53dc:	mov	x0, #0x1                   	// #1
    53e0:	mov	x1, #0x0                   	// #0
    53e4:	add	x2, x2, x0
    53e8:	str	x2, [x19, #320]
    53ec:	str	x0, [x19, #256]
    53f0:	mov	w2, #0x28                  	// #40
    53f4:	strb	w2, [x19, x1]
    53f8:	strb	w2, [x19, #264]
    53fc:	ldr	x23, [x23, #8]
    5400:	cbz	x23, 55a4 <d_print_comp_inner+0x4b74>
    5404:	ldr	w1, [x23, #4]
    5408:	cmp	w1, #0x1
    540c:	b.gt	55a4 <d_print_comp_inner+0x4b74>
    5410:	ldr	w2, [x19, #308]
    5414:	cmp	w2, #0x400
    5418:	b.gt	55a4 <d_print_comp_inner+0x4b74>
    541c:	ldr	x3, [x19, #328]
    5420:	add	w1, w1, #0x1
    5424:	str	w1, [x23, #4]
    5428:	add	w2, w2, #0x1
    542c:	add	x0, sp, #0x90
    5430:	str	w2, [x19, #308]
    5434:	str	x0, [x19, #328]
    5438:	mov	w1, w22
    543c:	mov	x2, x23
    5440:	mov	x0, x19
    5444:	stp	x23, x3, [sp, #144]
    5448:	bl	a30 <d_print_comp_inner>
    544c:	ldr	w2, [x23, #4]
    5450:	ldr	x0, [sp, #152]
    5454:	str	x0, [x19, #328]
    5458:	ldr	w1, [x19, #308]
    545c:	sub	w2, w2, #0x1
    5460:	ldr	x0, [x19, #256]
    5464:	str	w2, [x23, #4]
    5468:	sub	w1, w1, #0x1
    546c:	str	w1, [x19, #308]
    5470:	add	x1, x0, #0x1
    5474:	cmp	x0, #0xff
    5478:	b.ne	54a4 <d_print_comp_inner+0x4a74>  // b.any
    547c:	ldp	x3, x2, [x19, #272]
    5480:	strb	wzr, [x19, #255]
    5484:	mov	x1, x0
    5488:	mov	x0, x19
    548c:	blr	x3
    5490:	ldr	x2, [x19, #320]
    5494:	mov	x1, #0x1                   	// #1
    5498:	mov	x0, #0x0                   	// #0
    549c:	add	x2, x2, x1
    54a0:	str	x2, [x19, #320]
    54a4:	str	x1, [x19, #256]
    54a8:	mov	w1, #0x29                  	// #41
    54ac:	strb	w1, [x19, x0]
    54b0:	strb	w1, [x19, #264]
    54b4:	b	238c <d_print_comp_inner+0x195c>
    54b8:	mov	w0, #0x1                   	// #1
    54bc:	str	w0, [x19, #304]
    54c0:	b	5370 <d_print_comp_inner+0x4940>
    54c4:	mov	w0, #0x1                   	// #1
    54c8:	str	w0, [x19, #304]
    54cc:	b	e48 <d_print_comp_inner+0x418>
    54d0:	mov	w0, #0x1                   	// #1
    54d4:	str	w0, [x19, #304]
    54d8:	b	3204 <d_print_comp_inner+0x27d4>
    54dc:	add	x0, x1, #0x1
    54e0:	str	x0, [x19, #256]
    54e4:	mov	w2, #0x29                  	// #41
    54e8:	strb	w2, [x19, x1]
    54ec:	strb	w2, [x19, #264]
    54f0:	ldr	w1, [x24]
    54f4:	cmp	w1, #0x3e
    54f8:	b.eq	6960 <d_print_comp_inner+0x5f30>  // b.none
    54fc:	cmp	w21, #0x8
    5500:	b.ne	ffc <d_print_comp_inner+0x5cc>  // b.any
    5504:	cmp	x0, #0xff
    5508:	b.ne	5530 <d_print_comp_inner+0x4b00>  // b.any
    550c:	ldp	x3, x2, [x19, #272]
    5510:	strb	wzr, [x19, #255]
    5514:	mov	x1, x0
    5518:	mov	x0, x19
    551c:	blr	x3
    5520:	ldr	x1, [x19, #320]
    5524:	mov	x0, #0x0                   	// #0
    5528:	add	x1, x1, #0x1
    552c:	str	x1, [x19, #320]
    5530:	add	x1, x0, #0x1
    5534:	str	x1, [x19, #256]
    5538:	mov	w1, #0x5b                  	// #91
    553c:	strb	w1, [x19, x0]
    5540:	strb	w1, [x19, #264]
    5544:	b	ffc <d_print_comp_inner+0x5cc>
    5548:	mov	w0, #0x1                   	// #1
    554c:	str	w0, [x19, #304]
    5550:	b	2b70 <d_print_comp_inner+0x2140>
    5554:	ldr	x1, [x19, #256]
    5558:	cmp	x1, #0xff
    555c:	b.ne	59c8 <d_print_comp_inner+0x4f98>  // b.any
    5560:	ldp	x3, x2, [x19, #272]
    5564:	strb	wzr, [x19, #255]
    5568:	mov	x0, x19
    556c:	blr	x3
    5570:	ldr	x2, [x19, #320]
    5574:	mov	x0, #0x1                   	// #1
    5578:	mov	x1, #0x0                   	// #0
    557c:	add	x2, x2, x0
    5580:	str	x2, [x19, #320]
    5584:	str	x0, [x19, #256]
    5588:	mov	w0, #0x7d                  	// #125
    558c:	strb	w0, [x19, x1]
    5590:	strb	w0, [x19, #264]
    5594:	ldp	x21, x22, [sp, #32]
    5598:	ldp	x23, x24, [sp, #48]
    559c:	ldp	x25, x26, [sp, #64]
    55a0:	b	a9c <d_print_comp_inner+0x6c>
    55a4:	mov	w1, #0x1                   	// #1
    55a8:	str	w1, [x19, #304]
    55ac:	b	5470 <d_print_comp_inner+0x4a40>
    55b0:	ldr	x20, [x20, #8]
    55b4:	cbz	x20, 5c60 <d_print_comp_inner+0x5230>
    55b8:	ldr	w1, [x20, #4]
    55bc:	cmp	w1, #0x1
    55c0:	b.gt	5c60 <d_print_comp_inner+0x5230>
    55c4:	ldr	w2, [x19, #308]
    55c8:	cmp	w2, #0x400
    55cc:	b.gt	5c60 <d_print_comp_inner+0x5230>
    55d0:	ldr	x3, [x19, #328]
    55d4:	add	w1, w1, #0x1
    55d8:	str	w1, [x20, #4]
    55dc:	add	w2, w2, #0x1
    55e0:	add	x0, sp, #0x90
    55e4:	str	w2, [x19, #308]
    55e8:	str	x0, [x19, #328]
    55ec:	mov	w1, w22
    55f0:	mov	x2, x20
    55f4:	mov	x0, x19
    55f8:	stp	x20, x3, [sp, #144]
    55fc:	bl	a30 <d_print_comp_inner>
    5600:	ldr	w2, [x20, #4]
    5604:	ldr	x0, [sp, #152]
    5608:	str	x0, [x19, #328]
    560c:	ldr	w1, [x19, #308]
    5610:	sub	w2, w2, #0x1
    5614:	ldr	x0, [x19, #368]
    5618:	str	w2, [x20, #4]
    561c:	sub	w1, w1, #0x1
    5620:	str	w1, [x19, #308]
    5624:	cbz	x0, 5630 <d_print_comp_inner+0x4c00>
    5628:	ldr	x0, [sp, #128]
    562c:	str	x0, [x19, #288]
    5630:	ldr	x1, [x19, #256]
    5634:	ldrb	w0, [x19, #264]
    5638:	mov	x3, x1
    563c:	cmp	w0, #0x3c
    5640:	b.eq	6a58 <d_print_comp_inner+0x6028>  // b.none
    5644:	add	x0, x3, #0x1
    5648:	cmp	x3, #0xff
    564c:	b.ne	5678 <d_print_comp_inner+0x4c48>  // b.any
    5650:	ldp	x4, x2, [x19, #272]
    5654:	strb	wzr, [x19, #255]
    5658:	mov	x1, x3
    565c:	mov	x0, x19
    5660:	blr	x4
    5664:	ldr	x1, [x19, #320]
    5668:	mov	x0, #0x1                   	// #1
    566c:	mov	x3, #0x0                   	// #0
    5670:	add	x1, x1, x0
    5674:	str	x1, [x19, #320]
    5678:	str	x0, [x19, #256]
    567c:	mov	w1, #0x3c                  	// #60
    5680:	strb	w1, [x19, x3]
    5684:	strb	w1, [x19, #264]
    5688:	ldr	x1, [x24, #8]
    568c:	ldr	x20, [x1, #16]
    5690:	cbz	x20, 5c54 <d_print_comp_inner+0x5224>
    5694:	ldr	w1, [x20, #4]
    5698:	cmp	w1, #0x1
    569c:	b.gt	5c54 <d_print_comp_inner+0x5224>
    56a0:	ldr	w2, [x19, #308]
    56a4:	cmp	w2, #0x400
    56a8:	b.gt	5c54 <d_print_comp_inner+0x5224>
    56ac:	ldr	x3, [x19, #328]
    56b0:	add	w1, w1, #0x1
    56b4:	str	w1, [x20, #4]
    56b8:	add	w2, w2, #0x1
    56bc:	add	x0, sp, #0x90
    56c0:	str	w2, [x19, #308]
    56c4:	str	x0, [x19, #328]
    56c8:	mov	w1, w22
    56cc:	mov	x2, x20
    56d0:	mov	x0, x19
    56d4:	stp	x20, x3, [sp, #144]
    56d8:	bl	a30 <d_print_comp_inner>
    56dc:	ldr	w1, [x19, #308]
    56e0:	ldr	x0, [sp, #152]
    56e4:	str	x0, [x19, #328]
    56e8:	ldr	w0, [x20, #4]
    56ec:	sub	w1, w1, #0x1
    56f0:	sub	w0, w0, #0x1
    56f4:	str	w0, [x20, #4]
    56f8:	ldr	x0, [x19, #256]
    56fc:	str	w1, [x19, #308]
    5700:	ldrb	w2, [x19, #264]
    5704:	mov	x1, x0
    5708:	cmp	w2, #0x3e
    570c:	b.ne	5750 <d_print_comp_inner+0x4d20>  // b.any
    5710:	cmp	x0, #0xff
    5714:	b.ne	573c <d_print_comp_inner+0x4d0c>  // b.any
    5718:	ldp	x3, x2, [x19, #272]
    571c:	strb	wzr, [x19, #255]
    5720:	mov	x0, x19
    5724:	blr	x3
    5728:	str	xzr, [x19, #256]
    572c:	ldr	x0, [x19, #320]
    5730:	mov	x1, #0x0                   	// #0
    5734:	add	x0, x0, #0x1
    5738:	str	x0, [x19, #320]
    573c:	add	x0, x1, #0x1
    5740:	str	x0, [x19, #256]
    5744:	mov	w2, #0x20                  	// #32
    5748:	strb	w2, [x19, x1]
    574c:	strb	w2, [x19, #264]
    5750:	add	x1, x0, #0x1
    5754:	cmp	x0, #0xff
    5758:	b.ne	5784 <d_print_comp_inner+0x4d54>  // b.any
    575c:	ldp	x3, x2, [x19, #272]
    5760:	strb	wzr, [x19, #255]
    5764:	mov	x1, x0
    5768:	mov	x0, x19
    576c:	blr	x3
    5770:	ldr	x2, [x19, #320]
    5774:	mov	x1, #0x1                   	// #1
    5778:	mov	x0, #0x0                   	// #0
    577c:	add	x2, x2, x1
    5780:	str	x2, [x19, #320]
    5784:	str	x1, [x19, #256]
    5788:	mov	w1, #0x3e                  	// #62
    578c:	strb	w1, [x19, x0]
    5790:	strb	w1, [x19, #264]
    5794:	ldp	x21, x22, [sp, #32]
    5798:	ldp	x23, x24, [sp, #48]
    579c:	ldp	x25, x26, [sp, #64]
    57a0:	b	a9c <d_print_comp_inner+0x6c>
    57a4:	ldr	x0, [x23, #8]
    57a8:	ldr	w21, [x0, #28]
    57ac:	cmp	w21, #0x6
    57b0:	b.hi	584c <d_print_comp_inner+0x4e1c>  // b.pmore
    57b4:	cbz	w21, f24 <d_print_comp_inner+0x4f4>
    57b8:	ldr	x0, [x2, #16]
    57bc:	ldr	w0, [x0]
    57c0:	cbnz	w0, f24 <d_print_comp_inner+0x4f4>
    57c4:	cmp	w20, #0x3e
    57c8:	b.eq	70d0 <d_print_comp_inner+0x66a0>  // b.none
    57cc:	ldr	x2, [x24, #16]
    57d0:	mov	w1, w22
    57d4:	mov	x0, x19
    57d8:	bl	71b8 <d_print_comp>
    57dc:	cmp	w21, #0x4
    57e0:	b.eq	70a0 <d_print_comp_inner+0x6670>  // b.none
    57e4:	b.hi	6e40 <d_print_comp_inner+0x6410>  // b.pmore
    57e8:	cmp	w21, #0x2
    57ec:	b.eq	7044 <d_print_comp_inner+0x6614>  // b.none
    57f0:	cmp	w21, #0x3
    57f4:	b.ne	7174 <d_print_comp_inner+0x6744>  // b.any
    57f8:	ldr	x1, [x19, #256]
    57fc:	cmp	x1, #0xff
    5800:	b.ne	5828 <d_print_comp_inner+0x4df8>  // b.any
    5804:	ldp	x3, x2, [x19, #272]
    5808:	strb	wzr, [x19, #255]
    580c:	mov	x0, x19
    5810:	blr	x3
    5814:	str	xzr, [x19, #256]
    5818:	ldr	x0, [x19, #320]
    581c:	mov	x1, #0x0                   	// #0
    5820:	add	x0, x0, #0x1
    5824:	str	x0, [x19, #320]
    5828:	add	x0, x1, #0x1
    582c:	str	x0, [x19, #256]
    5830:	mov	w0, #0x6c                  	// #108
    5834:	strb	w0, [x19, x1]
    5838:	strb	w0, [x19, #264]
    583c:	ldp	x21, x22, [sp, #32]
    5840:	ldp	x23, x24, [sp, #48]
    5844:	ldp	x25, x26, [sp, #64]
    5848:	b	a9c <d_print_comp_inner+0x6c>
    584c:	cmp	w21, #0x7
    5850:	b.ne	f24 <d_print_comp_inner+0x4f4>  // b.any
    5854:	ldr	x0, [x2, #16]
    5858:	ldr	w1, [x0]
    585c:	cbnz	w1, f24 <d_print_comp_inner+0x4f4>
    5860:	ldr	w1, [x0, #16]
    5864:	cmp	w20, #0x3d
    5868:	ccmp	w1, #0x1, #0x0, eq  // eq = none
    586c:	b.ne	f24 <d_print_comp_inner+0x4f4>  // b.any
    5870:	ldr	x0, [x0, #8]
    5874:	ldrb	w0, [x0]
    5878:	cmp	w0, #0x30
    587c:	b.eq	7184 <d_print_comp_inner+0x6754>  // b.none
    5880:	cmp	w0, #0x31
    5884:	b.ne	f24 <d_print_comp_inner+0x4f4>  // b.any
    5888:	adrp	x20, 0 <d_make_comp>
    588c:	add	x20, x20, #0x0
    5890:	mov	x0, x20
    5894:	bl	0 <__asan_internal_strlen>
    5898:	mov	x1, x20
    589c:	mov	x2, x0
    58a0:	mov	x0, x19
    58a4:	bl	170 <d_append_buffer>
    58a8:	ldp	x21, x22, [sp, #32]
    58ac:	ldp	x23, x24, [sp, #48]
    58b0:	ldp	x25, x26, [sp, #64]
    58b4:	b	a9c <d_print_comp_inner+0x6c>
    58b8:	ldp	x3, x2, [x19, #272]
    58bc:	strb	wzr, [x19, #255]
    58c0:	mov	x1, x0
    58c4:	mov	x0, x19
    58c8:	blr	x3
    58cc:	ldr	x0, [x19, #320]
    58d0:	mov	x2, #0x1                   	// #1
    58d4:	ldr	x23, [x24, #8]
    58d8:	mov	w1, #0x28                  	// #40
    58dc:	add	x0, x0, x2
    58e0:	strb	w1, [x19]
    58e4:	str	x2, [x19, #256]
    58e8:	strb	w1, [x19, #264]
    58ec:	str	x0, [x19, #320]
    58f0:	cbnz	x23, 6750 <d_print_comp_inner+0x5d20>
    58f4:	mov	w0, #0x29                  	// #41
    58f8:	strb	w0, [x19, #1]
    58fc:	strb	w0, [x19, #264]
    5900:	mov	x0, #0x2                   	// #2
    5904:	str	w2, [x19, #304]
    5908:	ldr	w1, [x24]
    590c:	str	x0, [x19, #256]
    5910:	cmp	w1, #0x3e
    5914:	b.ne	54fc <d_print_comp_inner+0x4acc>  // b.any
    5918:	ldr	x2, [x19, #256]
    591c:	mov	w1, #0x2d                  	// #45
    5920:	add	x0, x2, #0x1
    5924:	str	x0, [x19, #256]
    5928:	strb	w1, [x19, x2]
    592c:	strb	w1, [x19, #264]
    5930:	b	54fc <d_print_comp_inner+0x4acc>
    5934:	adrp	x20, 0 <d_make_comp>
    5938:	add	x20, x20, #0x0
    593c:	mov	x0, x20
    5940:	bl	0 <__asan_internal_strlen>
    5944:	cbz	x0, 1568 <d_print_comp_inner+0xb38>
    5948:	add	x23, x20, x0
    594c:	mov	x25, #0x1                   	// #1
    5950:	ldr	x1, [x19, #256]
    5954:	b	59b0 <d_print_comp_inner+0x4f80>
    5958:	ldp	x3, x2, [x19, #272]
    595c:	strb	wzr, [x19, #255]
    5960:	mov	x0, x19
    5964:	add	x20, x20, #0x1
    5968:	blr	x3
    596c:	strb	w21, [x19]
    5970:	ldr	x0, [x19, #320]
    5974:	str	x25, [x19, #256]
    5978:	strb	w21, [x19, #264]
    597c:	cmp	x20, x23
    5980:	add	x0, x0, #0x1
    5984:	str	x0, [x19, #320]
    5988:	b.eq	1568 <d_print_comp_inner+0xb38>  // b.none
    598c:	ldrb	w21, [x20]
    5990:	mov	x0, #0x1                   	// #1
    5994:	add	x1, x0, #0x1
    5998:	str	x1, [x19, #256]
    599c:	strb	w21, [x19, x0]
    59a0:	add	x20, x20, #0x1
    59a4:	strb	w21, [x19, #264]
    59a8:	cmp	x23, x20
    59ac:	b.eq	1568 <d_print_comp_inner+0xb38>  // b.none
    59b0:	ldrb	w21, [x20]
    59b4:	cmp	x1, #0xff
    59b8:	b.eq	5958 <d_print_comp_inner+0x4f28>  // b.none
    59bc:	mov	x0, x1
    59c0:	b	5994 <d_print_comp_inner+0x4f64>
    59c4:	mov	x1, #0x1                   	// #1
    59c8:	add	x0, x1, #0x1
    59cc:	b	5584 <d_print_comp_inner+0x4b54>
    59d0:	ldr	x1, [x19, #256]
    59d4:	cmp	x1, #0xff
    59d8:	b.ne	59fc <d_print_comp_inner+0x4fcc>  // b.any
    59dc:	ldp	x3, x2, [x19, #272]
    59e0:	strb	wzr, [x19, #255]
    59e4:	mov	x0, x19
    59e8:	blr	x3
    59ec:	ldr	x0, [x19, #320]
    59f0:	mov	x1, #0x0                   	// #0
    59f4:	add	x0, x0, #0x1
    59f8:	str	x0, [x19, #320]
    59fc:	add	x0, x1, #0x1
    5a00:	str	x0, [x19, #256]
    5a04:	mov	w0, #0x5d                  	// #93
    5a08:	strb	w0, [x19, x1]
    5a0c:	strb	w0, [x19, #264]
    5a10:	ldp	x21, x22, [sp, #32]
    5a14:	ldp	x23, x24, [sp, #48]
    5a18:	ldp	x25, x26, [sp, #64]
    5a1c:	b	a9c <d_print_comp_inner+0x6c>
    5a20:	adrp	x20, 0 <d_make_comp>
    5a24:	add	x20, x20, #0x0
    5a28:	mov	x0, x20
    5a2c:	bl	0 <__asan_internal_strlen>
    5a30:	cbz	x0, ca8 <d_print_comp_inner+0x278>
    5a34:	add	x23, x20, x0
    5a38:	mov	x25, #0x1                   	// #1
    5a3c:	ldr	x1, [x19, #256]
    5a40:	b	5a9c <d_print_comp_inner+0x506c>
    5a44:	ldp	x3, x2, [x19, #272]
    5a48:	strb	wzr, [x19, #255]
    5a4c:	mov	x0, x19
    5a50:	add	x20, x20, #0x1
    5a54:	blr	x3
    5a58:	strb	w21, [x19]
    5a5c:	ldr	x0, [x19, #320]
    5a60:	str	x25, [x19, #256]
    5a64:	strb	w21, [x19, #264]
    5a68:	cmp	x20, x23
    5a6c:	add	x0, x0, #0x1
    5a70:	str	x0, [x19, #320]
    5a74:	b.eq	ca8 <d_print_comp_inner+0x278>  // b.none
    5a78:	ldrb	w21, [x20]
    5a7c:	mov	x0, #0x1                   	// #1
    5a80:	add	x1, x0, #0x1
    5a84:	str	x1, [x19, #256]
    5a88:	strb	w21, [x19, x0]
    5a8c:	add	x20, x20, #0x1
    5a90:	strb	w21, [x19, #264]
    5a94:	cmp	x20, x23
    5a98:	b.eq	ca8 <d_print_comp_inner+0x278>  // b.none
    5a9c:	ldrb	w21, [x20]
    5aa0:	cmp	x1, #0xff
    5aa4:	b.eq	5a44 <d_print_comp_inner+0x5014>  // b.none
    5aa8:	mov	x0, x1
    5aac:	b	5a80 <d_print_comp_inner+0x5050>
    5ab0:	ldr	x20, [x22, #8]
    5ab4:	ldrb	w0, [x20]
    5ab8:	sub	w0, w0, #0x61
    5abc:	and	w0, w0, #0xff
    5ac0:	cmp	w0, #0x19
    5ac4:	b.hi	4bfc <d_print_comp_inner+0x41cc>  // b.pmore
    5ac8:	mov	x1, #0x1                   	// #1
    5acc:	add	x0, x1, #0x1
    5ad0:	b	4bec <d_print_comp_inner+0x41bc>
    5ad4:	cmp	x1, #0xff
    5ad8:	b.eq	69e8 <d_print_comp_inner+0x5fb8>  // b.none
    5adc:	add	x2, x1, #0x1
    5ae0:	str	x2, [x19, #256]
    5ae4:	mov	w0, #0x20                  	// #32
    5ae8:	strb	w0, [x19, x1]
    5aec:	mov	x1, x2
    5af0:	strb	w0, [x19, #264]
    5af4:	b	2cb8 <d_print_comp_inner+0x2288>
    5af8:	add	x2, x2, #0x10
    5afc:	mov	w1, w21
    5b00:	mov	x0, x19
    5b04:	bl	8e28 <d_print_function_type.isra.0>
    5b08:	ldr	x20, [x24, #8]
    5b0c:	cbz	x20, 6b3c <d_print_comp_inner+0x610c>
    5b10:	ldr	w0, [x20, #4]
    5b14:	cmp	w0, #0x1
    5b18:	b.gt	6374 <d_print_comp_inner+0x5944>
    5b1c:	ldr	w1, [x19, #308]
    5b20:	cmp	w1, #0x400
    5b24:	b.gt	6374 <d_print_comp_inner+0x5944>
    5b28:	ldr	x3, [x19, #328]
    5b2c:	add	w0, w0, #0x1
    5b30:	str	w0, [x20, #4]
    5b34:	add	w1, w1, #0x1
    5b38:	add	x0, sp, #0x90
    5b3c:	str	w1, [x19, #308]
    5b40:	str	x0, [x19, #328]
    5b44:	mov	w1, w21
    5b48:	mov	x0, x19
    5b4c:	mov	x2, x20
    5b50:	stp	x20, x3, [sp, #144]
    5b54:	bl	a30 <d_print_comp_inner>
    5b58:	ldr	w1, [x20, #4]
    5b5c:	ldr	x0, [sp, #152]
    5b60:	sub	w1, w1, #0x1
    5b64:	ldp	x21, x22, [sp, #32]
    5b68:	ldp	x23, x24, [sp, #48]
    5b6c:	ldp	x25, x26, [sp, #64]
    5b70:	str	x0, [x19, #328]
    5b74:	ldr	w0, [x19, #308]
    5b78:	str	w1, [x20, #4]
    5b7c:	sub	w0, w0, #0x1
    5b80:	str	w0, [x19, #308]
    5b84:	b	a9c <d_print_comp_inner+0x6c>
    5b88:	ldp	x21, x22, [sp, #32]
    5b8c:	ldp	x23, x24, [sp, #48]
    5b90:	ldp	x25, x26, [sp, #64]
    5b94:	b	a9c <d_print_comp_inner+0x6c>
    5b98:	ldp	x21, x22, [sp, #32]
    5b9c:	ldp	x23, x24, [sp, #48]
    5ba0:	ldp	x25, x26, [sp, #64]
    5ba4:	b	a9c <d_print_comp_inner+0x6c>
    5ba8:	ldp	x21, x22, [sp, #32]
    5bac:	ldp	x23, x24, [sp, #48]
    5bb0:	ldp	x25, x26, [sp, #64]
    5bb4:	b	a9c <d_print_comp_inner+0x6c>
    5bb8:	ldp	x21, x22, [sp, #32]
    5bbc:	ldp	x23, x24, [sp, #48]
    5bc0:	ldp	x25, x26, [sp, #64]
    5bc4:	b	a9c <d_print_comp_inner+0x6c>
    5bc8:	ldp	x21, x22, [sp, #32]
    5bcc:	ldp	x23, x24, [sp, #48]
    5bd0:	ldp	x25, x26, [sp, #64]
    5bd4:	b	a9c <d_print_comp_inner+0x6c>
    5bd8:	ldp	x21, x22, [sp, #32]
    5bdc:	ldp	x23, x24, [sp, #48]
    5be0:	ldp	x25, x26, [sp, #64]
    5be4:	b	a9c <d_print_comp_inner+0x6c>
    5be8:	ldp	x21, x22, [sp, #32]
    5bec:	ldp	x23, x24, [sp, #48]
    5bf0:	ldp	x25, x26, [sp, #64]
    5bf4:	b	a9c <d_print_comp_inner+0x6c>
    5bf8:	ldp	x21, x22, [sp, #32]
    5bfc:	ldp	x23, x24, [sp, #48]
    5c00:	ldp	x25, x26, [sp, #64]
    5c04:	b	a9c <d_print_comp_inner+0x6c>
    5c08:	ldp	x21, x22, [sp, #32]
    5c0c:	ldp	x23, x24, [sp, #48]
    5c10:	ldp	x25, x26, [sp, #64]
    5c14:	b	a9c <d_print_comp_inner+0x6c>
    5c18:	ldp	x21, x22, [sp, #32]
    5c1c:	ldp	x23, x24, [sp, #48]
    5c20:	ldp	x25, x26, [sp, #64]
    5c24:	b	a9c <d_print_comp_inner+0x6c>
    5c28:	ldp	x21, x22, [sp, #32]
    5c2c:	ldp	x23, x24, [sp, #48]
    5c30:	ldp	x25, x26, [sp, #64]
    5c34:	b	a9c <d_print_comp_inner+0x6c>
    5c38:	mov	w0, #0x1                   	// #1
    5c3c:	str	w0, [x19, #304]
    5c40:	b	52a4 <d_print_comp_inner+0x4874>
    5c44:	ldp	x21, x22, [sp, #32]
    5c48:	ldp	x23, x24, [sp, #48]
    5c4c:	ldp	x25, x26, [sp, #64]
    5c50:	b	a9c <d_print_comp_inner+0x6c>
    5c54:	mov	w1, #0x1                   	// #1
    5c58:	str	w1, [x19, #304]
    5c5c:	b	5750 <d_print_comp_inner+0x4d20>
    5c60:	mov	w1, #0x1                   	// #1
    5c64:	str	w1, [x19, #304]
    5c68:	b	5624 <d_print_comp_inner+0x4bf4>
    5c6c:	mov	w21, #0x0                   	// #0
    5c70:	ldr	x4, [x19, #288]
    5c74:	b	bd8 <d_print_comp_inner+0x1a8>
    5c78:	cbz	x25, 635c <d_print_comp_inner+0x592c>
    5c7c:	ldr	w1, [x25, #4]
    5c80:	cmp	w1, #0x1
    5c84:	b.gt	635c <d_print_comp_inner+0x592c>
    5c88:	ldr	w0, [x19, #308]
    5c8c:	cmp	w0, #0x400
    5c90:	b.gt	635c <d_print_comp_inner+0x592c>
    5c94:	ldr	x3, [x19, #328]
    5c98:	add	w1, w1, #0x1
    5c9c:	add	w0, w0, #0x1
    5ca0:	add	x2, sp, #0x90
    5ca4:	str	w1, [x25, #4]
    5ca8:	mov	w1, w22
    5cac:	str	w0, [x19, #308]
    5cb0:	mov	x0, x2
    5cb4:	str	x0, [x19, #328]
    5cb8:	mov	x2, x25
    5cbc:	mov	x0, x19
    5cc0:	stp	x25, x3, [sp, #144]
    5cc4:	bl	a30 <d_print_comp_inner>
    5cc8:	ldr	w1, [x25, #4]
    5ccc:	ldr	x0, [sp, #152]
    5cd0:	sub	w1, w1, #0x1
    5cd4:	ldp	x21, x22, [sp, #32]
    5cd8:	ldp	x23, x24, [sp, #48]
    5cdc:	str	x0, [x19, #328]
    5ce0:	ldr	w0, [x19, #308]
    5ce4:	str	w1, [x25, #4]
    5ce8:	sub	w0, w0, #0x1
    5cec:	ldp	x25, x26, [sp, #64]
    5cf0:	str	w0, [x19, #308]
    5cf4:	b	a9c <d_print_comp_inner+0x6c>
    5cf8:	add	x1, x0, #0x2
    5cfc:	str	x1, [x19, #256]
    5d00:	mov	w2, #0x75                  	// #117
    5d04:	strb	w2, [x19, x3]
    5d08:	strb	w2, [x19, #264]
    5d0c:	cmp	x1, #0xff
    5d10:	b.ne	5de0 <d_print_comp_inner+0x53b0>  // b.any
    5d14:	ldp	x3, x2, [x19, #272]
    5d18:	strb	wzr, [x19, #255]
    5d1c:	mov	x0, x19
    5d20:	blr	x3
    5d24:	ldr	x1, [x19, #320]
    5d28:	mov	w2, #0x74                  	// #116
    5d2c:	mov	x0, #0x1                   	// #1
    5d30:	strb	w2, [x19]
    5d34:	add	x1, x1, x0
    5d38:	str	x1, [x19, #320]
    5d3c:	b	2e00 <d_print_comp_inner+0x23d0>
    5d40:	ldr	x25, [x25, #8]
    5d44:	cbz	x25, 7038 <d_print_comp_inner+0x6608>
    5d48:	ldr	w4, [x25]
    5d4c:	add	x1, x21, #0x20
    5d50:	stp	x1, x25, [sp, #208]
    5d54:	sub	w1, w4, #0x1c
    5d58:	str	wzr, [sp, #224]
    5d5c:	cmp	w1, #0x34
    5d60:	str	x3, [sp, #232]
    5d64:	b.hi	6e38 <d_print_comp_inner+0x6408>  // b.pmore
    5d68:	lsl	x0, x0, x1
    5d6c:	add	x1, x21, #0x40
    5d70:	tst	x0, x2
    5d74:	b.eq	2ae0 <d_print_comp_inner+0x20b0>  // b.none
    5d78:	ldr	x25, [x25, #8]
    5d7c:	cbz	x25, 6274 <d_print_comp_inner+0x5844>
    5d80:	ldr	w4, [x25]
    5d84:	stp	x1, x25, [sp, #240]
    5d88:	sub	w0, w4, #0x1c
    5d8c:	str	wzr, [sp, #256]
    5d90:	cmp	w0, #0x34
    5d94:	str	x3, [sp, #264]
    5d98:	b.hi	6f90 <d_print_comp_inner+0x6560>  // b.pmore
    5d9c:	mov	x1, #0x1f                  	// #31
    5da0:	mov	x2, #0x1                   	// #1
    5da4:	movk	x1, #0x1a, lsl #48
    5da8:	lsl	x0, x2, x0
    5dac:	mov	w20, #0x4                   	// #4
    5db0:	tst	x0, x1
    5db4:	add	x1, x21, #0x60
    5db8:	b.eq	2ae0 <d_print_comp_inner+0x20b0>  // b.none
    5dbc:	ldr	x0, [x25, #8]
    5dc0:	mov	x21, x1
    5dc4:	cbz	x0, 6278 <d_print_comp_inner+0x5848>
    5dc8:	ldp	x21, x22, [sp, #32]
    5dcc:	ldp	x23, x24, [sp, #48]
    5dd0:	ldp	x25, x26, [sp, #64]
    5dd4:	str	x1, [x19, #296]
    5dd8:	str	w2, [x19, #304]
    5ddc:	b	a9c <d_print_comp_inner+0x6c>
    5de0:	add	x0, x0, #0x3
    5de4:	str	x0, [x19, #256]
    5de8:	mov	w2, #0x74                  	// #116
    5dec:	strb	w2, [x19, x1]
    5df0:	strb	w2, [x19, #264]
    5df4:	cmp	x0, #0xff
    5df8:	b.ne	63c0 <d_print_comp_inner+0x5990>  // b.any
    5dfc:	ldp	x3, x2, [x19, #272]
    5e00:	strb	wzr, [x19, #255]
    5e04:	mov	x1, x0
    5e08:	mov	x0, x19
    5e0c:	blr	x3
    5e10:	ldr	x0, [x19, #320]
    5e14:	mov	w2, #0x6f                  	// #111
    5e18:	mov	x1, #0x1                   	// #1
    5e1c:	strb	w2, [x19]
    5e20:	add	x0, x0, x1
    5e24:	str	x0, [x19, #320]
    5e28:	b	2e0c <d_print_comp_inner+0x23dc>
    5e2c:	mov	x23, #0x1                   	// #1
    5e30:	b	4c9c <d_print_comp_inner+0x426c>
    5e34:	ldp	x21, x22, [sp, #32]
    5e38:	ldp	x23, x24, [sp, #48]
    5e3c:	ldp	x25, x26, [sp, #64]
    5e40:	b	a9c <d_print_comp_inner+0x6c>
    5e44:	ldr	x0, [x23, #8]
    5e48:	adrp	x1, 0 <d_make_comp>
    5e4c:	add	x1, x1, #0x0
    5e50:	ldr	x21, [x0]
    5e54:	mov	x0, x21
    5e58:	bl	0 <__asan_internal_strcmp>
    5e5c:	cbz	w0, 6b00 <d_print_comp_inner+0x60d0>
    5e60:	ldr	w0, [x20]
    5e64:	cmp	w0, #0x39
    5e68:	b.eq	5f18 <d_print_comp_inner+0x54e8>  // b.none
    5e6c:	cbz	x21, 5e9c <d_print_comp_inner+0x546c>
    5e70:	mov	x0, x21
    5e74:	adrp	x1, 0 <d_make_comp>
    5e78:	add	x1, x1, #0x0
    5e7c:	bl	0 <__asan_internal_strcmp>
    5e80:	mov	w3, w0
    5e84:	cbz	w0, 6fac <d_print_comp_inner+0x657c>
    5e88:	adrp	x1, 0 <d_make_comp>
    5e8c:	mov	x0, x21
    5e90:	add	x1, x1, #0x0
    5e94:	bl	0 <__asan_internal_strcmp>
    5e98:	cbz	w0, 5ea4 <d_print_comp_inner+0x5474>
    5e9c:	ldr	w0, [x23]
    5ea0:	b	2374 <d_print_comp_inner+0x1944>
    5ea4:	mov	w3, #0x0                   	// #0
    5ea8:	b	5eb8 <d_print_comp_inner+0x5488>
    5eac:	add	w3, w3, #0x1
    5eb0:	ldr	x20, [x20, #16]
    5eb4:	cbz	x20, 6ae4 <d_print_comp_inner+0x60b4>
    5eb8:	ldr	w0, [x20]
    5ebc:	cmp	w0, #0x2f
    5ec0:	b.ne	6ae4 <d_print_comp_inner+0x60b4>  // b.any
    5ec4:	ldr	x0, [x20, #8]
    5ec8:	cbz	x0, 6ae4 <d_print_comp_inner+0x60b4>
    5ecc:	ldr	w1, [x0]
    5ed0:	cmp	w1, #0x4b
    5ed4:	b.ne	5eac <d_print_comp_inner+0x547c>  // b.any
    5ed8:	ldr	x1, [x0, #8]
    5edc:	mov	x0, x19
    5ee0:	bl	360 <d_find_pack>
    5ee4:	mov	w1, #0x0                   	// #0
    5ee8:	cbnz	x0, 5f04 <d_print_comp_inner+0x54d4>
    5eec:	b	5f10 <d_print_comp_inner+0x54e0>
    5ef0:	ldr	x2, [x0, #8]
    5ef4:	cbz	x2, 5f10 <d_print_comp_inner+0x54e0>
    5ef8:	ldr	x0, [x0, #16]
    5efc:	add	w1, w1, #0x1
    5f00:	cbz	x0, 5f10 <d_print_comp_inner+0x54e0>
    5f04:	ldr	w2, [x0]
    5f08:	cmp	w2, #0x2f
    5f0c:	b.eq	5ef0 <d_print_comp_inner+0x54c0>  // b.none
    5f10:	add	w3, w3, w1
    5f14:	b	5eb0 <d_print_comp_inner+0x5480>
    5f18:	ldr	x2, [x20, #8]
    5f1c:	mov	w1, w22
    5f20:	mov	x0, x19
    5f24:	bl	73b8 <d_print_subexpr>
    5f28:	mov	x2, x23
    5f2c:	mov	w1, w22
    5f30:	mov	x0, x19
    5f34:	bl	7250 <d_print_expr_op>
    5f38:	ldp	x21, x22, [sp, #32]
    5f3c:	ldp	x23, x24, [sp, #48]
    5f40:	ldp	x25, x26, [sp, #64]
    5f44:	b	a9c <d_print_comp_inner+0x6c>
    5f48:	adrp	x20, 0 <d_make_comp>
    5f4c:	add	x20, x20, #0x0
    5f50:	mov	x0, x20
    5f54:	bl	0 <__asan_internal_strlen>
    5f58:	cbz	x0, 5fd8 <d_print_comp_inner+0x55a8>
    5f5c:	add	x24, x20, x0
    5f60:	mov	x25, #0x1                   	// #1
    5f64:	ldr	x1, [x19, #256]
    5f68:	b	5fc4 <d_print_comp_inner+0x5594>
    5f6c:	ldp	x3, x2, [x19, #272]
    5f70:	strb	wzr, [x19, #255]
    5f74:	mov	x0, x19
    5f78:	add	x20, x20, #0x1
    5f7c:	blr	x3
    5f80:	strb	w21, [x19]
    5f84:	ldr	x0, [x19, #320]
    5f88:	str	x25, [x19, #256]
    5f8c:	strb	w21, [x19, #264]
    5f90:	cmp	x20, x24
    5f94:	add	x0, x0, #0x1
    5f98:	str	x0, [x19, #320]
    5f9c:	b.eq	5fd8 <d_print_comp_inner+0x55a8>  // b.none
    5fa0:	ldrb	w21, [x20]
    5fa4:	mov	x0, #0x1                   	// #1
    5fa8:	add	x1, x0, #0x1
    5fac:	str	x1, [x19, #256]
    5fb0:	strb	w21, [x19, x0]
    5fb4:	add	x20, x20, #0x1
    5fb8:	strb	w21, [x19, #264]
    5fbc:	cmp	x24, x20
    5fc0:	b.eq	5fd8 <d_print_comp_inner+0x55a8>  // b.none
    5fc4:	ldrb	w21, [x20]
    5fc8:	cmp	x1, #0xff
    5fcc:	b.eq	5f6c <d_print_comp_inner+0x553c>  // b.none
    5fd0:	mov	x0, x1
    5fd4:	b	5fa8 <d_print_comp_inner+0x5578>
    5fd8:	ldr	w2, [x23, #16]
    5fdc:	adrp	x1, 0 <d_make_comp>
    5fe0:	add	x1, x1, #0x0
    5fe4:	add	x20, sp, #0x90
    5fe8:	add	w2, w2, #0x1
    5fec:	mov	x0, x20
    5ff0:	bl	0 <sprintf>
    5ff4:	mov	x0, x20
    5ff8:	bl	0 <__asan_internal_strlen>
    5ffc:	cbz	x0, 607c <d_print_comp_inner+0x564c>
    6000:	add	x24, x20, x0
    6004:	mov	x25, #0x1                   	// #1
    6008:	ldr	x1, [x19, #256]
    600c:	b	6068 <d_print_comp_inner+0x5638>
    6010:	ldp	x3, x2, [x19, #272]
    6014:	strb	wzr, [x19, #255]
    6018:	mov	x0, x19
    601c:	add	x20, x20, #0x1
    6020:	blr	x3
    6024:	strb	w21, [x19]
    6028:	ldr	x0, [x19, #320]
    602c:	str	x25, [x19, #256]
    6030:	strb	w21, [x19, #264]
    6034:	cmp	x20, x24
    6038:	add	x0, x0, #0x1
    603c:	str	x0, [x19, #320]
    6040:	b.eq	607c <d_print_comp_inner+0x564c>  // b.none
    6044:	ldrb	w21, [x20]
    6048:	mov	x0, #0x1                   	// #1
    604c:	add	x1, x0, #0x1
    6050:	str	x1, [x19, #256]
    6054:	strb	w21, [x19, x0]
    6058:	add	x20, x20, #0x1
    605c:	strb	w21, [x19, #264]
    6060:	cmp	x20, x24
    6064:	b.eq	607c <d_print_comp_inner+0x564c>  // b.none
    6068:	ldrb	w21, [x20]
    606c:	cmp	x1, #0xff
    6070:	b.eq	6010 <d_print_comp_inner+0x55e0>  // b.none
    6074:	mov	x0, x1
    6078:	b	604c <d_print_comp_inner+0x561c>
    607c:	adrp	x20, 0 <d_make_comp>
    6080:	add	x20, x20, #0x0
    6084:	mov	x0, x20
    6088:	bl	0 <__asan_internal_strlen>
    608c:	cbz	x0, 48e0 <d_print_comp_inner+0x3eb0>
    6090:	add	x24, x20, x0
    6094:	mov	x25, #0x1                   	// #1
    6098:	ldr	x1, [x19, #256]
    609c:	b	60f8 <d_print_comp_inner+0x56c8>
    60a0:	ldp	x3, x2, [x19, #272]
    60a4:	strb	wzr, [x19, #255]
    60a8:	mov	x0, x19
    60ac:	add	x20, x20, #0x1
    60b0:	blr	x3
    60b4:	strb	w21, [x19]
    60b8:	ldr	x0, [x19, #320]
    60bc:	str	x25, [x19, #256]
    60c0:	strb	w21, [x19, #264]
    60c4:	cmp	x20, x24
    60c8:	add	x0, x0, #0x1
    60cc:	str	x0, [x19, #320]
    60d0:	b.eq	48e0 <d_print_comp_inner+0x3eb0>  // b.none
    60d4:	ldrb	w21, [x20]
    60d8:	mov	x0, #0x1                   	// #1
    60dc:	add	x1, x0, #0x1
    60e0:	str	x1, [x19, #256]
    60e4:	strb	w21, [x19, x0]
    60e8:	add	x20, x20, #0x1
    60ec:	strb	w21, [x19, #264]
    60f0:	cmp	x24, x20
    60f4:	b.eq	48e0 <d_print_comp_inner+0x3eb0>  // b.none
    60f8:	ldrb	w21, [x20]
    60fc:	cmp	x1, #0xff
    6100:	b.eq	60a0 <d_print_comp_inner+0x5670>  // b.none
    6104:	mov	x0, x1
    6108:	b	60dc <d_print_comp_inner+0x56ac>
    610c:	ldr	x25, [x25, #16]
    6110:	ldr	w4, [x25]
    6114:	cmp	w4, #0x47
    6118:	b.eq	6cb4 <d_print_comp_inner+0x6284>  // b.none
    611c:	sub	w2, w4, #0x1c
    6120:	cmp	w2, #0x34
    6124:	b.hi	2aec <d_print_comp_inner+0x20bc>  // b.pmore
    6128:	mov	x0, #0x1                   	// #1
    612c:	mov	x1, #0x1f                  	// #31
    6130:	movk	x1, #0x1a, lsl #48
    6134:	lsl	x2, x0, x2
    6138:	tst	x2, x1
    613c:	b.eq	2aec <d_print_comp_inner+0x20bc>  // b.none
    6140:	cmp	w20, #0x4
    6144:	b.eq	627c <d_print_comp_inner+0x584c>  // b.none
    6148:	sub	w2, w20, #0x1
    614c:	ubfiz	x8, x20, #5, #32
    6150:	add	x7, x21, x8
    6154:	add	x9, sp, #0x98
    6158:	add	x12, x21, x2, lsl #5
    615c:	lsl	x2, x2, #5
    6160:	add	x11, sp, #0xa0
    6164:	add	x10, sp, #0xa8
    6168:	add	w6, w20, #0x1
    616c:	ldp	x4, x5, [x12]
    6170:	stp	x4, x5, [x7]
    6174:	ldp	x4, x5, [x12, #16]
    6178:	stp	x4, x5, [x7, #16]
    617c:	str	x12, [x21, x8]
    6180:	str	x25, [x9, x2]
    6184:	ldr	x25, [x25, #8]
    6188:	str	wzr, [x11, x2]
    618c:	str	x3, [x10, x2]
    6190:	ldr	w4, [x25]
    6194:	str	x7, [x19, #296]
    6198:	sub	w2, w4, #0x1c
    619c:	cmp	w2, #0x34
    61a0:	b.hi	61b0 <d_print_comp_inner+0x5780>  // b.pmore
    61a4:	lsl	x2, x0, x2
    61a8:	tst	x2, x1
    61ac:	b.ne	61b8 <d_print_comp_inner+0x5788>  // b.any
    61b0:	mov	w20, w6
    61b4:	b	2aec <d_print_comp_inner+0x20bc>
    61b8:	cmp	w6, #0x4
    61bc:	b.eq	627c <d_print_comp_inner+0x584c>  // b.none
    61c0:	ubfiz	x6, x6, #5, #32
    61c4:	add	w20, w20, #0x2
    61c8:	add	x2, x21, x6
    61cc:	ldp	x4, x5, [x7]
    61d0:	stp	x4, x5, [x2]
    61d4:	ldp	x4, x5, [x7, #16]
    61d8:	stp	x4, x5, [x2, #16]
    61dc:	str	x7, [x21, x6]
    61e0:	str	x25, [x9, x8]
    61e4:	ldr	x25, [x25, #8]
    61e8:	str	wzr, [x11, x8]
    61ec:	str	x3, [x10, x8]
    61f0:	ldr	w4, [x25]
    61f4:	str	x2, [x19, #296]
    61f8:	sub	w2, w4, #0x1c
    61fc:	cmp	w2, #0x34
    6200:	b.hi	2aec <d_print_comp_inner+0x20bc>  // b.pmore
    6204:	lsl	x0, x0, x2
    6208:	tst	x0, x1
    620c:	b.eq	2aec <d_print_comp_inner+0x20bc>  // b.none
    6210:	cmp	w20, #0x4
    6214:	b.eq	627c <d_print_comp_inner+0x584c>  // b.none
    6218:	ldp	x0, x1, [sp, #208]
    621c:	str	x25, [sp, #216]
    6220:	ldr	x25, [x25, #8]
    6224:	stp	x0, x1, [sp, #240]
    6228:	add	x1, x21, #0x40
    622c:	ldp	x6, x7, [sp, #224]
    6230:	add	x0, x21, #0x60
    6234:	ldr	w4, [x25]
    6238:	str	wzr, [sp, #224]
    623c:	stp	x3, x1, [sp, #232]
    6240:	sub	w2, w4, #0x1c
    6244:	cmp	w2, #0x34
    6248:	stp	x6, x7, [sp, #256]
    624c:	str	x0, [x19, #296]
    6250:	b.hi	626c <d_print_comp_inner+0x583c>  // b.pmore
    6254:	mov	x0, #0x1                   	// #1
    6258:	mov	x1, #0x1f                  	// #31
    625c:	movk	x1, #0x1a, lsl #48
    6260:	lsl	x0, x0, x2
    6264:	tst	x0, x1
    6268:	b.ne	627c <d_print_comp_inner+0x584c>  // b.any
    626c:	mov	w20, #0x4                   	// #4
    6270:	b	2aec <d_print_comp_inner+0x20bc>
    6274:	add	x21, x21, #0x40
    6278:	str	x21, [x19, #296]
    627c:	mov	w0, #0x1                   	// #1
    6280:	ldp	x21, x22, [sp, #32]
    6284:	ldp	x23, x24, [sp, #48]
    6288:	ldp	x25, x26, [sp, #64]
    628c:	str	w0, [x19, #304]
    6290:	b	a9c <d_print_comp_inner+0x6c>
    6294:	mov	w0, #0x1                   	// #1
    6298:	ldp	x21, x22, [sp, #32]
    629c:	ldp	x23, x24, [sp, #48]
    62a0:	ldp	x25, x26, [sp, #64]
    62a4:	str	w0, [x19, #304]
    62a8:	b	a9c <d_print_comp_inner+0x6c>
    62ac:	mov	w1, #0x1                   	// #1
    62b0:	str	w1, [x19, #304]
    62b4:	b	2468 <d_print_comp_inner+0x1a38>
    62b8:	ldr	x1, [x19, #288]
    62bc:	add	x0, sp, #0x90
    62c0:	stp	x3, x24, [sp, #144]
    62c4:	str	wzr, [sp, #160]
    62c8:	str	x1, [sp, #168]
    62cc:	ldr	w1, [x20, #4]
    62d0:	str	x0, [x19, #296]
    62d4:	cmp	w1, #0x1
    62d8:	b.gt	6824 <d_print_comp_inner+0x5df4>
    62dc:	ldr	w0, [x19, #308]
    62e0:	cmp	w0, #0x400
    62e4:	b.gt	6824 <d_print_comp_inner+0x5df4>
    62e8:	add	w1, w1, #0x1
    62ec:	add	w0, w0, #0x1
    62f0:	ldr	x3, [x19, #328]
    62f4:	str	w1, [x20, #4]
    62f8:	add	x1, sp, #0x80
    62fc:	str	w0, [x19, #308]
    6300:	mov	x0, x1
    6304:	str	x0, [x19, #328]
    6308:	mov	x2, x20
    630c:	mov	w1, w21
    6310:	mov	x0, x19
    6314:	stp	x20, x3, [sp, #128]
    6318:	bl	a30 <d_print_comp_inner>
    631c:	ldr	w1, [x20, #4]
    6320:	ldr	x0, [sp, #136]
    6324:	sub	w1, w1, #0x1
    6328:	ldr	w2, [sp, #160]
    632c:	str	x0, [x19, #328]
    6330:	ldr	w0, [x19, #308]
    6334:	str	w1, [x20, #4]
    6338:	ldr	x1, [sp, #144]
    633c:	sub	w0, w0, #0x1
    6340:	str	x1, [x19, #296]
    6344:	str	w0, [x19, #308]
    6348:	cbz	w2, 6830 <d_print_comp_inner+0x5e00>
    634c:	ldp	x21, x22, [sp, #32]
    6350:	ldp	x23, x24, [sp, #48]
    6354:	ldp	x25, x26, [sp, #64]
    6358:	b	a9c <d_print_comp_inner+0x6c>
    635c:	mov	w0, #0x1                   	// #1
    6360:	ldp	x21, x22, [sp, #32]
    6364:	ldp	x23, x24, [sp, #48]
    6368:	ldp	x25, x26, [sp, #64]
    636c:	str	w0, [x19, #304]
    6370:	b	a9c <d_print_comp_inner+0x6c>
    6374:	mov	w0, #0x1                   	// #1
    6378:	ldp	x21, x22, [sp, #32]
    637c:	ldp	x23, x24, [sp, #48]
    6380:	ldp	x25, x26, [sp, #64]
    6384:	str	w0, [x19, #304]
    6388:	b	a9c <d_print_comp_inner+0x6c>
    638c:	ldp	x3, x2, [x19, #272]
    6390:	strb	wzr, [x19, #255]
    6394:	mov	x1, x0
    6398:	mov	x0, x19
    639c:	blr	x3
    63a0:	ldr	x1, [x19, #320]
    63a4:	mov	w3, #0x7561                	// #30049
    63a8:	mov	w2, #0x74                  	// #116
    63ac:	mov	x0, #0x3                   	// #3
    63b0:	add	x1, x1, #0x1
    63b4:	strh	w3, [x19]
    63b8:	strb	w2, [x19, #2]
    63bc:	str	x1, [x19, #320]
    63c0:	add	x1, x0, #0x1
    63c4:	str	x1, [x19, #256]
    63c8:	mov	w2, #0x6f                  	// #111
    63cc:	strb	w2, [x19, x0]
    63d0:	strb	w2, [x19, #264]
    63d4:	cmp	x1, #0xff
    63d8:	b.ne	2e0c <d_print_comp_inner+0x23dc>  // b.any
    63dc:	ldp	x3, x2, [x19, #272]
    63e0:	strb	wzr, [x19, #255]
    63e4:	mov	x0, x19
    63e8:	blr	x3
    63ec:	ldr	x2, [x19, #320]
    63f0:	mov	x0, #0x1                   	// #1
    63f4:	mov	x1, #0x0                   	// #0
    63f8:	add	x2, x2, x0
    63fc:	str	x2, [x19, #320]
    6400:	b	2e10 <d_print_comp_inner+0x23e0>
    6404:	ldr	w4, [x19, #344]
    6408:	ldr	x5, [x19, #336]
    640c:	cmp	w4, #0x0
    6410:	b.le	6e78 <d_print_comp_inner+0x6448>
    6414:	sub	w2, w4, #0x1
    6418:	add	x0, x5, #0x10
    641c:	mov	x1, x5
    6420:	add	x2, x0, w2, uxtw #4
    6424:	b	6434 <d_print_comp_inner+0x5a04>
    6428:	add	x1, x1, #0x10
    642c:	cmp	x2, x1
    6430:	b.eq	6e78 <d_print_comp_inner+0x6448>  // b.none
    6434:	ldr	x0, [x1]
    6438:	cmp	x3, x0
    643c:	b.ne	6428 <d_print_comp_inner+0x59f8>  // b.any
    6440:	ldr	x4, [x19, #328]
    6444:	mov	x0, x4
    6448:	cbnz	x4, 6464 <d_print_comp_inner+0x5a34>
    644c:	b	6cc4 <d_print_comp_inner+0x6294>
    6450:	cmp	x2, x24
    6454:	ccmp	x4, x0, #0x4, eq  // eq = none
    6458:	b.ne	6470 <d_print_comp_inner+0x5a40>  // b.any
    645c:	ldr	x0, [x0, #8]
    6460:	cbz	x0, 6cc4 <d_print_comp_inner+0x6294>
    6464:	ldr	x2, [x0]
    6468:	cmp	x2, x3
    646c:	b.ne	6450 <d_print_comp_inner+0x5a20>  // b.any
    6470:	ldr	x4, [x19, #288]
    6474:	cbz	x4, ac8 <d_print_comp_inner+0x98>
    6478:	mov	w21, #0x0                   	// #0
    647c:	ldr	x2, [x3, #8]
    6480:	ldr	x0, [x4, #8]
    6484:	mov	w1, w2
    6488:	ldr	x0, [x0, #16]
    648c:	tbnz	w2, #31, 6ab0 <d_print_comp_inner+0x6080>
    6490:	cbnz	x0, 64a8 <d_print_comp_inner+0x5a78>
    6494:	b	64b4 <d_print_comp_inner+0x5a84>
    6498:	cbz	w1, 6aac <d_print_comp_inner+0x607c>
    649c:	ldr	x0, [x0, #16]
    64a0:	sub	w1, w1, #0x1
    64a4:	cbz	x0, 64b4 <d_print_comp_inner+0x5a84>
    64a8:	ldr	w2, [x0]
    64ac:	cmp	w2, #0x2f
    64b0:	b.eq	6498 <d_print_comp_inner+0x5a68>  // b.none
    64b4:	cbz	w21, ac8 <d_print_comp_inner+0x98>
    64b8:	ldp	x21, x22, [sp, #32]
    64bc:	ldp	x25, x26, [sp, #64]
    64c0:	str	x23, [x19, #288]
    64c4:	ldp	x23, x24, [sp, #48]
    64c8:	b	ad4 <d_print_comp_inner+0xa4>
    64cc:	ldrb	w0, [x0]
    64d0:	sub	w1, w0, #0x72
    64d4:	sub	w0, w0, #0x63
    64d8:	and	w1, w1, #0xff
    64dc:	and	w0, w0, #0xff
    64e0:	cmp	w1, #0x1
    64e4:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
    64e8:	b.hi	2114 <d_print_comp_inner+0x16e4>  // b.pmore
    64ec:	mov	w1, w22
    64f0:	mov	x0, x19
    64f4:	bl	7250 <d_print_expr_op>
    64f8:	ldr	x1, [x19, #256]
    64fc:	cmp	x1, #0xff
    6500:	b.ne	6528 <d_print_comp_inner+0x5af8>  // b.any
    6504:	ldp	x3, x2, [x19, #272]
    6508:	strb	wzr, [x19, #255]
    650c:	mov	x0, x19
    6510:	blr	x3
    6514:	str	xzr, [x19, #256]
    6518:	ldr	x0, [x19, #320]
    651c:	mov	x1, #0x0                   	// #0
    6520:	add	x0, x0, #0x1
    6524:	str	x0, [x19, #320]
    6528:	add	x0, x1, #0x1
    652c:	str	x0, [x19, #256]
    6530:	mov	w0, #0x3c                  	// #60
    6534:	strb	w0, [x19, x1]
    6538:	strb	w0, [x19, #264]
    653c:	ldr	x0, [x24, #16]
    6540:	ldr	x20, [x0, #8]
    6544:	cbz	x20, 6b30 <d_print_comp_inner+0x6100>
    6548:	ldr	w1, [x20, #4]
    654c:	cmp	w1, #0x1
    6550:	b.gt	6b30 <d_print_comp_inner+0x6100>
    6554:	ldr	w0, [x19, #308]
    6558:	cmp	w0, #0x400
    655c:	b.gt	6b30 <d_print_comp_inner+0x6100>
    6560:	add	w1, w1, #0x1
    6564:	add	w0, w0, #0x1
    6568:	ldr	x3, [x19, #328]
    656c:	str	w1, [x20, #4]
    6570:	add	x1, sp, #0x90
    6574:	str	w0, [x19, #308]
    6578:	mov	x0, x1
    657c:	str	x0, [x19, #328]
    6580:	mov	w1, w22
    6584:	mov	x0, x19
    6588:	mov	x2, x20
    658c:	stp	x20, x3, [sp, #144]
    6590:	bl	a30 <d_print_comp_inner>
    6594:	ldr	w1, [x20, #4]
    6598:	ldr	x0, [sp, #152]
    659c:	str	x0, [x19, #328]
    65a0:	ldr	w0, [x19, #308]
    65a4:	sub	w1, w1, #0x1
    65a8:	str	w1, [x20, #4]
    65ac:	sub	w0, w0, #0x1
    65b0:	str	w0, [x19, #308]
    65b4:	adrp	x20, 0 <d_make_comp>
    65b8:	add	x20, x20, #0x0
    65bc:	mov	x0, x20
    65c0:	bl	0 <__asan_internal_strlen>
    65c4:	cbz	x0, 6894 <d_print_comp_inner+0x5e64>
    65c8:	add	x23, x20, x0
    65cc:	mov	x25, #0x1                   	// #1
    65d0:	ldr	x1, [x19, #256]
    65d4:	b	6630 <d_print_comp_inner+0x5c00>
    65d8:	ldp	x3, x2, [x19, #272]
    65dc:	strb	wzr, [x19, #255]
    65e0:	mov	x0, x19
    65e4:	add	x20, x20, #0x1
    65e8:	blr	x3
    65ec:	strb	w21, [x19]
    65f0:	ldr	x0, [x19, #320]
    65f4:	str	x25, [x19, #256]
    65f8:	strb	w21, [x19, #264]
    65fc:	cmp	x20, x23
    6600:	add	x0, x0, #0x1
    6604:	str	x0, [x19, #320]
    6608:	b.eq	6894 <d_print_comp_inner+0x5e64>  // b.none
    660c:	ldrb	w21, [x20]
    6610:	mov	x0, #0x1                   	// #1
    6614:	add	x1, x0, #0x1
    6618:	str	x1, [x19, #256]
    661c:	strb	w21, [x19, x0]
    6620:	add	x20, x20, #0x1
    6624:	strb	w21, [x19, #264]
    6628:	cmp	x20, x23
    662c:	b.eq	6894 <d_print_comp_inner+0x5e64>  // b.none
    6630:	ldrb	w21, [x20]
    6634:	cmp	x1, #0xff
    6638:	b.eq	65d8 <d_print_comp_inner+0x5ba8>  // b.none
    663c:	mov	x0, x1
    6640:	b	6614 <d_print_comp_inner+0x5be4>
    6644:	add	x3, x2, #0x10
    6648:	mov	w1, w22
    664c:	ldr	x2, [x2, #8]
    6650:	mov	x0, x19
    6654:	bl	7508 <d_maybe_print_fold_expression.isra.0>
    6658:	cbnz	w0, 6c18 <d_print_comp_inner+0x61e8>
    665c:	ldp	x20, x3, [x24, #8]
    6660:	adrp	x1, 0 <d_make_comp>
    6664:	add	x1, x1, #0x0
    6668:	ldr	x0, [x20, #8]
    666c:	ldp	x23, x2, [x3, #8]
    6670:	ldr	x0, [x0]
    6674:	ldp	x24, x21, [x2, #8]
    6678:	bl	0 <__asan_internal_strcmp>
    667c:	cbnz	w0, 6d88 <d_print_comp_inner+0x6358>
    6680:	mov	x2, x23
    6684:	mov	w1, w22
    6688:	mov	x0, x19
    668c:	bl	73b8 <d_print_subexpr>
    6690:	mov	x2, x20
    6694:	mov	w1, w22
    6698:	mov	x0, x19
    669c:	bl	7250 <d_print_expr_op>
    66a0:	mov	x2, x24
    66a4:	mov	w1, w22
    66a8:	mov	x0, x19
    66ac:	adrp	x20, 0 <d_make_comp>
    66b0:	bl	73b8 <d_print_subexpr>
    66b4:	add	x20, x20, #0x0
    66b8:	mov	x0, x20
    66bc:	bl	0 <__asan_internal_strlen>
    66c0:	mov	x1, x20
    66c4:	mov	x2, x0
    66c8:	mov	x0, x19
    66cc:	bl	170 <d_append_buffer>
    66d0:	mov	x2, x21
    66d4:	mov	w1, w22
    66d8:	mov	x0, x19
    66dc:	bl	73b8 <d_print_subexpr>
    66e0:	ldp	x21, x22, [sp, #32]
    66e4:	ldp	x23, x24, [sp, #48]
    66e8:	ldp	x25, x26, [sp, #64]
    66ec:	b	a9c <d_print_comp_inner+0x6c>
    66f0:	ldr	x0, [x19, #256]
    66f4:	cmp	x0, x23
    66f8:	b.eq	4e6c <d_print_comp_inner+0x443c>  // b.none
    66fc:	ldp	x21, x22, [sp, #32]
    6700:	ldp	x23, x24, [sp, #48]
    6704:	ldp	x25, x26, [sp, #64]
    6708:	b	a9c <d_print_comp_inner+0x6c>
    670c:	ldp	x21, x22, [sp, #32]
    6710:	ldp	x23, x24, [sp, #48]
    6714:	ldp	x25, x26, [sp, #64]
    6718:	ldp	x27, x28, [sp, #80]
    671c:	b	a9c <d_print_comp_inner+0x6c>
    6720:	ldp	x21, x22, [sp, #32]
    6724:	ldp	x23, x24, [sp, #48]
    6728:	ldp	x25, x26, [sp, #64]
    672c:	b	a9c <d_print_comp_inner+0x6c>
    6730:	ldp	x21, x22, [sp, #32]
    6734:	ldp	x23, x24, [sp, #48]
    6738:	ldp	x25, x26, [sp, #64]
    673c:	b	a9c <d_print_comp_inner+0x6c>
    6740:	ldp	x21, x22, [sp, #32]
    6744:	ldp	x23, x24, [sp, #48]
    6748:	ldp	x25, x26, [sp, #64]
    674c:	b	a9c <d_print_comp_inner+0x6c>
    6750:	ldr	w0, [x23, #4]
    6754:	mov	x1, x2
    6758:	cmp	w0, #0x1
    675c:	b.le	f50 <d_print_comp_inner+0x520>
    6760:	b	58f4 <d_print_comp_inner+0x4ec4>
    6764:	ldp	x21, x22, [sp, #32]
    6768:	ldp	x23, x24, [sp, #48]
    676c:	ldp	x25, x26, [sp, #64]
    6770:	b	a9c <d_print_comp_inner+0x6c>
    6774:	ldp	x21, x22, [sp, #32]
    6778:	ldp	x23, x24, [sp, #48]
    677c:	ldp	x25, x26, [sp, #64]
    6780:	b	a9c <d_print_comp_inner+0x6c>
    6784:	cbz	x20, 6a14 <d_print_comp_inner+0x5fe4>
    6788:	ldr	w1, [x20, #4]
    678c:	cmp	w1, #0x1
    6790:	b.gt	6a14 <d_print_comp_inner+0x5fe4>
    6794:	ldr	w0, [x19, #308]
    6798:	cmp	w0, #0x400
    679c:	b.gt	6a14 <d_print_comp_inner+0x5fe4>
    67a0:	ldr	x3, [x19, #328]
    67a4:	add	w1, w1, #0x1
    67a8:	add	w0, w0, #0x1
    67ac:	add	x2, sp, #0x90
    67b0:	str	w1, [x20, #4]
    67b4:	mov	w1, w22
    67b8:	str	w0, [x19, #308]
    67bc:	mov	x0, x2
    67c0:	str	x0, [x19, #328]
    67c4:	mov	x2, x20
    67c8:	mov	x0, x19
    67cc:	stp	x20, x3, [sp, #144]
    67d0:	bl	a30 <d_print_comp_inner>
    67d4:	ldr	w1, [x20, #4]
    67d8:	ldr	x0, [sp, #152]
    67dc:	sub	w1, w1, #0x1
    67e0:	ldp	x21, x22, [sp, #32]
    67e4:	ldp	x23, x24, [sp, #48]
    67e8:	ldp	x25, x26, [sp, #64]
    67ec:	str	x0, [x19, #328]
    67f0:	ldr	w0, [x19, #308]
    67f4:	str	w1, [x20, #4]
    67f8:	sub	w0, w0, #0x1
    67fc:	str	w0, [x19, #308]
    6800:	b	a9c <d_print_comp_inner+0x6c>
    6804:	ldp	x21, x22, [sp, #32]
    6808:	ldp	x23, x24, [sp, #48]
    680c:	ldp	x25, x26, [sp, #64]
    6810:	b	a9c <d_print_comp_inner+0x6c>
    6814:	ldp	x21, x22, [sp, #32]
    6818:	ldp	x23, x24, [sp, #48]
    681c:	ldp	x25, x26, [sp, #64]
    6820:	b	a9c <d_print_comp_inner+0x6c>
    6824:	mov	w0, #0x1                   	// #1
    6828:	str	x3, [x19, #296]
    682c:	str	w0, [x19, #304]
    6830:	ldr	x1, [x19, #256]
    6834:	cmp	x1, #0xff
    6838:	b.ne	6860 <d_print_comp_inner+0x5e30>  // b.any
    683c:	ldp	x3, x2, [x19, #272]
    6840:	strb	wzr, [x19, #255]
    6844:	mov	x0, x19
    6848:	blr	x3
    684c:	str	xzr, [x19, #256]
    6850:	ldr	x0, [x19, #320]
    6854:	mov	x1, #0x0                   	// #0
    6858:	add	x0, x0, #0x1
    685c:	str	x0, [x19, #320]
    6860:	add	x0, x1, #0x1
    6864:	str	x0, [x19, #256]
    6868:	mov	w0, #0x20                  	// #32
    686c:	strb	w0, [x19, x1]
    6870:	strb	w0, [x19, #264]
    6874:	ldr	x3, [x19, #296]
    6878:	b	1f20 <d_print_comp_inner+0x14f0>
    687c:	sub	w3, w0, #0x61
    6880:	and	w3, w3, #0xff
    6884:	cmp	w3, #0x5
    6888:	b.hi	6f34 <d_print_comp_inner+0x6504>  // b.pmore
    688c:	sub	w0, w0, #0x57
    6890:	b	4f40 <d_print_comp_inner+0x4510>
    6894:	ldr	x0, [x24, #16]
    6898:	ldr	x20, [x0, #16]
    689c:	cbz	x20, 6ad8 <d_print_comp_inner+0x60a8>
    68a0:	ldr	w1, [x20, #4]
    68a4:	cmp	w1, #0x1
    68a8:	b.gt	6ad8 <d_print_comp_inner+0x60a8>
    68ac:	ldr	w0, [x19, #308]
    68b0:	cmp	w0, #0x400
    68b4:	b.gt	6ad8 <d_print_comp_inner+0x60a8>
    68b8:	ldr	x3, [x19, #328]
    68bc:	add	w1, w1, #0x1
    68c0:	add	w0, w0, #0x1
    68c4:	add	x2, sp, #0x90
    68c8:	str	w1, [x20, #4]
    68cc:	mov	w1, w22
    68d0:	str	w0, [x19, #308]
    68d4:	mov	x0, x2
    68d8:	str	x0, [x19, #328]
    68dc:	mov	x2, x20
    68e0:	mov	x0, x19
    68e4:	stp	x20, x3, [sp, #144]
    68e8:	bl	a30 <d_print_comp_inner>
    68ec:	ldr	w1, [x20, #4]
    68f0:	ldr	x0, [sp, #152]
    68f4:	str	x0, [x19, #328]
    68f8:	ldr	w0, [x19, #308]
    68fc:	sub	w1, w1, #0x1
    6900:	str	w1, [x20, #4]
    6904:	sub	w0, w0, #0x1
    6908:	str	w0, [x19, #308]
    690c:	ldr	x1, [x19, #256]
    6910:	cmp	x1, #0xff
    6914:	b.ne	693c <d_print_comp_inner+0x5f0c>  // b.any
    6918:	ldp	x3, x2, [x19, #272]
    691c:	strb	wzr, [x19, #255]
    6920:	mov	x0, x19
    6924:	blr	x3
    6928:	str	xzr, [x19, #256]
    692c:	ldr	x0, [x19, #320]
    6930:	mov	x1, #0x0                   	// #0
    6934:	add	x0, x0, #0x1
    6938:	str	x0, [x19, #320]
    693c:	add	x0, x1, #0x1
    6940:	str	x0, [x19, #256]
    6944:	mov	w0, #0x29                  	// #41
    6948:	strb	w0, [x19, x1]
    694c:	strb	w0, [x19, #264]
    6950:	ldp	x21, x22, [sp, #32]
    6954:	ldp	x23, x24, [sp, #48]
    6958:	ldp	x25, x26, [sp, #64]
    695c:	b	a9c <d_print_comp_inner+0x6c>
    6960:	cmp	x0, #0xff
    6964:	b.ne	5918 <d_print_comp_inner+0x4ee8>  // b.any
    6968:	ldp	x3, x2, [x19, #272]
    696c:	strb	wzr, [x19, #255]
    6970:	mov	x1, x0
    6974:	mov	x0, x19
    6978:	blr	x3
    697c:	str	xzr, [x19, #256]
    6980:	ldr	x0, [x19, #320]
    6984:	add	x0, x0, #0x1
    6988:	str	x0, [x19, #320]
    698c:	b	5918 <d_print_comp_inner+0x4ee8>
    6990:	mov	w1, #0x1                   	// #1
    6994:	str	w1, [x19, #304]
    6998:	b	224c <d_print_comp_inner+0x181c>
    699c:	ldr	w1, [x19, #316]
    69a0:	tbnz	w1, #31, 5234 <d_print_comp_inner+0x4804>
    69a4:	mov	x0, x20
    69a8:	bl	240 <d_index_template_argument.part.0>
    69ac:	mov	x20, x0
    69b0:	cbnz	x0, 5234 <d_print_comp_inner+0x4804>
    69b4:	b	ac8 <d_print_comp_inner+0x98>
    69b8:	ldp	x21, x22, [sp, #32]
    69bc:	ldp	x23, x24, [sp, #48]
    69c0:	ldp	x25, x26, [sp, #64]
    69c4:	b	a9c <d_print_comp_inner+0x6c>
    69c8:	ldp	x21, x22, [sp, #32]
    69cc:	ldp	x23, x24, [sp, #48]
    69d0:	ldp	x25, x26, [sp, #64]
    69d4:	b	a9c <d_print_comp_inner+0x6c>
    69d8:	ldp	x21, x22, [sp, #32]
    69dc:	ldp	x23, x24, [sp, #48]
    69e0:	ldp	x25, x26, [sp, #64]
    69e4:	b	a9c <d_print_comp_inner+0x6c>
    69e8:	ldp	x3, x2, [x19, #272]
    69ec:	strb	wzr, [x19, #255]
    69f0:	mov	x0, x19
    69f4:	blr	x3
    69f8:	ldr	x0, [x19, #320]
    69fc:	mov	w2, #0x20                  	// #32
    6a00:	mov	x1, #0x1                   	// #1
    6a04:	strb	w2, [x19]
    6a08:	add	x0, x0, x1
    6a0c:	str	x0, [x19, #320]
    6a10:	b	2cc0 <d_print_comp_inner+0x2290>
    6a14:	mov	w0, #0x1                   	// #1
    6a18:	ldp	x21, x22, [sp, #32]
    6a1c:	ldp	x23, x24, [sp, #48]
    6a20:	ldp	x25, x26, [sp, #64]
    6a24:	str	w0, [x19, #304]
    6a28:	b	a9c <d_print_comp_inner+0x6c>
    6a2c:	ldp	x3, x2, [x19, #272]
    6a30:	strb	wzr, [x19, #255]
    6a34:	mov	x0, x19
    6a38:	blr	x3
    6a3c:	ldr	x1, [x19, #320]
    6a40:	mov	w2, #0x20                  	// #32
    6a44:	mov	x0, #0x1                   	// #1
    6a48:	strb	w2, [x19]
    6a4c:	add	x1, x1, x0
    6a50:	str	x1, [x19, #320]
    6a54:	b	2d78 <d_print_comp_inner+0x2348>
    6a58:	cmp	x1, #0xff
    6a5c:	b.ne	6a84 <d_print_comp_inner+0x6054>  // b.any
    6a60:	ldp	x3, x2, [x19, #272]
    6a64:	strb	wzr, [x19, #255]
    6a68:	mov	x0, x19
    6a6c:	blr	x3
    6a70:	str	xzr, [x19, #256]
    6a74:	ldr	x0, [x19, #320]
    6a78:	mov	x1, #0x0                   	// #0
    6a7c:	add	x0, x0, #0x1
    6a80:	str	x0, [x19, #320]
    6a84:	add	x3, x1, #0x1
    6a88:	str	x3, [x19, #256]
    6a8c:	mov	w0, #0x20                  	// #32
    6a90:	strb	w0, [x19, x1]
    6a94:	strb	w0, [x19, #264]
    6a98:	b	5644 <d_print_comp_inner+0x4c14>
    6a9c:	ldp	x21, x22, [sp, #32]
    6aa0:	ldp	x23, x24, [sp, #48]
    6aa4:	ldp	x25, x26, [sp, #64]
    6aa8:	b	a9c <d_print_comp_inner+0x6c>
    6aac:	ldr	x0, [x0, #8]
    6ab0:	cbz	x0, 64b4 <d_print_comp_inner+0x5a84>
    6ab4:	ldr	w1, [x0]
    6ab8:	cmp	w1, #0x2f
    6abc:	b.ne	bbc <d_print_comp_inner+0x18c>  // b.any
    6ac0:	ldr	w1, [x19, #316]
    6ac4:	tbnz	w1, #31, 7118 <d_print_comp_inner+0x66e8>
    6ac8:	bl	240 <d_index_template_argument.part.0>
    6acc:	cbz	x0, 64b4 <d_print_comp_inner+0x5a84>
    6ad0:	ldr	w1, [x0]
    6ad4:	b	bbc <d_print_comp_inner+0x18c>
    6ad8:	mov	w0, #0x1                   	// #1
    6adc:	str	w0, [x19, #304]
    6ae0:	b	690c <d_print_comp_inner+0x5edc>
    6ae4:	mov	w1, w3
    6ae8:	mov	x0, x19
    6aec:	bl	488 <d_append_num>
    6af0:	ldp	x21, x22, [sp, #32]
    6af4:	ldp	x23, x24, [sp, #48]
    6af8:	ldp	x25, x26, [sp, #64]
    6afc:	b	a9c <d_print_comp_inner+0x6c>
    6b00:	ldr	w0, [x20]
    6b04:	cmp	w0, #0x3
    6b08:	b.ne	5e64 <d_print_comp_inner+0x5434>  // b.any
    6b0c:	ldr	x0, [x20, #8]
    6b10:	ldr	w1, [x0]
    6b14:	cmp	w1, #0x1
    6b18:	b.ne	5e6c <d_print_comp_inner+0x543c>  // b.any
    6b1c:	ldr	x1, [x20, #16]
    6b20:	ldr	w1, [x1]
    6b24:	cmp	w1, #0x29
    6b28:	csel	x20, x20, x0, ne  // ne = any
    6b2c:	b	5e6c <d_print_comp_inner+0x543c>
    6b30:	mov	w0, #0x1                   	// #1
    6b34:	str	w0, [x19, #304]
    6b38:	b	65b4 <d_print_comp_inner+0x5b84>
    6b3c:	ldp	x21, x22, [sp, #32]
    6b40:	ldp	x23, x24, [sp, #48]
    6b44:	ldp	x25, x26, [sp, #64]
    6b48:	b	a9c <d_print_comp_inner+0x6c>
    6b4c:	ldr	x2, [x24, #8]
    6b50:	mov	w1, w22
    6b54:	mov	x0, x19
    6b58:	adrp	x20, 0 <d_make_comp>
    6b5c:	add	x20, x20, #0x0
    6b60:	bl	73b8 <d_print_subexpr>
    6b64:	mov	x0, x20
    6b68:	bl	0 <__asan_internal_strlen>
    6b6c:	mov	x1, x20
    6b70:	mov	x2, x0
    6b74:	mov	x0, x19
    6b78:	bl	170 <d_append_buffer>
    6b7c:	ldp	x21, x22, [sp, #32]
    6b80:	ldp	x23, x24, [sp, #48]
    6b84:	ldp	x25, x26, [sp, #64]
    6b88:	b	a9c <d_print_comp_inner+0x6c>
    6b8c:	ldr	x1, [x0, #8]
    6b90:	ldr	w2, [x1, #16]
    6b94:	cmp	w2, #0x1
    6b98:	b.ne	2138 <d_print_comp_inner+0x1708>  // b.any
    6b9c:	ldr	x1, [x1, #8]
    6ba0:	ldrb	w1, [x1]
    6ba4:	cmp	w1, #0x3e
    6ba8:	b.ne	2138 <d_print_comp_inner+0x1708>  // b.any
    6bac:	ldr	x1, [x19, #256]
    6bb0:	cmp	x1, #0xff
    6bb4:	b.ne	6bdc <d_print_comp_inner+0x61ac>  // b.any
    6bb8:	ldp	x3, x2, [x19, #272]
    6bbc:	strb	wzr, [x19, #255]
    6bc0:	mov	x0, x19
    6bc4:	blr	x3
    6bc8:	str	xzr, [x19, #256]
    6bcc:	ldr	x0, [x19, #320]
    6bd0:	mov	x1, #0x0                   	// #0
    6bd4:	add	x0, x0, #0x1
    6bd8:	str	x0, [x19, #320]
    6bdc:	add	x0, x1, #0x1
    6be0:	str	x0, [x19, #256]
    6be4:	mov	w0, #0x28                  	// #40
    6be8:	strb	w0, [x19, x1]
    6bec:	strb	w0, [x19, #264]
    6bf0:	ldr	x0, [x24, #8]
    6bf4:	b	2138 <d_print_comp_inner+0x1708>
    6bf8:	ldr	x0, [x0, #8]
    6bfc:	ldr	w1, [x0, #16]
    6c00:	cmp	w1, #0x1
    6c04:	b.eq	6f14 <d_print_comp_inner+0x64e4>  // b.none
    6c08:	ldp	x21, x22, [sp, #32]
    6c0c:	ldp	x23, x24, [sp, #48]
    6c10:	ldp	x25, x26, [sp, #64]
    6c14:	b	a9c <d_print_comp_inner+0x6c>
    6c18:	ldp	x21, x22, [sp, #32]
    6c1c:	ldp	x23, x24, [sp, #48]
    6c20:	ldp	x25, x26, [sp, #64]
    6c24:	b	a9c <d_print_comp_inner+0x6c>
    6c28:	mov	x0, x1
    6c2c:	b	2d70 <d_print_comp_inner+0x2340>
    6c30:	ldr	x0, [x24, #8]
    6c34:	add	x1, x20, #0x0
    6c38:	ldr	x0, [x0, #8]
    6c3c:	ldr	x0, [x0]
    6c40:	bl	0 <__asan_internal_strcmp>
    6c44:	cbnz	w0, 6f00 <d_print_comp_inner+0x64d0>
    6c48:	ldr	x2, [x24, #16]
    6c4c:	mov	w1, w22
    6c50:	mov	x0, x19
    6c54:	ldr	x2, [x2, #16]
    6c58:	bl	73b8 <d_print_subexpr>
    6c5c:	b	2290 <d_print_comp_inner+0x1860>
    6c60:	ldr	x0, [x24, #16]
    6c64:	b	2164 <d_print_comp_inner+0x1734>
    6c68:	ldr	x0, [x20, #8]
    6c6c:	adrp	x1, 0 <d_make_comp>
    6c70:	mov	x2, #0x6                   	// #6
    6c74:	add	x1, x1, #0x0
    6c78:	bl	0 <__asan_internal_strncmp>
    6c7c:	cbnz	w0, 2c40 <d_print_comp_inner+0x2210>
    6c80:	ldr	x2, [x24, #16]
    6c84:	mov	w1, w22
    6c88:	mov	x0, x19
    6c8c:	adrp	x20, 0 <d_make_comp>
    6c90:	add	x20, x20, #0x0
    6c94:	bl	71b8 <d_print_comp>
    6c98:	mov	x0, x20
    6c9c:	bl	0 <__asan_internal_strlen>
    6ca0:	mov	x1, x20
    6ca4:	mov	x2, x0
    6ca8:	mov	x0, x19
    6cac:	bl	170 <d_append_buffer>
    6cb0:	b	2d8c <d_print_comp_inner+0x235c>
    6cb4:	ldr	x25, [x25, #8]
    6cb8:	cbz	x25, 627c <d_print_comp_inner+0x584c>
    6cbc:	ldr	w4, [x25]
    6cc0:	b	611c <d_print_comp_inner+0x56ec>
    6cc4:	ldr	x4, [x1, #8]
    6cc8:	ldr	x23, [x19, #288]
    6ccc:	str	x4, [x19, #288]
    6cd0:	cbz	x4, 64b8 <d_print_comp_inner+0x5a88>
    6cd4:	mov	w21, #0x1                   	// #1
    6cd8:	b	647c <d_print_comp_inner+0x5a4c>
    6cdc:	ldp	x21, x22, [sp, #32]
    6ce0:	ldp	x23, x24, [sp, #48]
    6ce4:	ldp	x25, x26, [sp, #64]
    6ce8:	b	a9c <d_print_comp_inner+0x6c>
    6cec:	ldp	x21, x22, [sp, #32]
    6cf0:	ldp	x23, x24, [sp, #48]
    6cf4:	ldp	x25, x26, [sp, #64]
    6cf8:	b	a9c <d_print_comp_inner+0x6c>
    6cfc:	ldp	x21, x22, [sp, #32]
    6d00:	ldp	x23, x24, [sp, #48]
    6d04:	ldp	x25, x26, [sp, #64]
    6d08:	b	a9c <d_print_comp_inner+0x6c>
    6d0c:	ldp	x21, x22, [sp, #32]
    6d10:	ldp	x23, x24, [sp, #48]
    6d14:	ldp	x25, x26, [sp, #64]
    6d18:	b	a9c <d_print_comp_inner+0x6c>
    6d1c:	ldp	x21, x22, [sp, #32]
    6d20:	ldp	x23, x24, [sp, #48]
    6d24:	ldp	x25, x26, [sp, #64]
    6d28:	b	a9c <d_print_comp_inner+0x6c>
    6d2c:	ldp	x21, x22, [sp, #32]
    6d30:	ldp	x23, x24, [sp, #48]
    6d34:	ldp	x25, x26, [sp, #64]
    6d38:	b	a9c <d_print_comp_inner+0x6c>
    6d3c:	ldp	x21, x22, [sp, #32]
    6d40:	ldp	x23, x24, [sp, #48]
    6d44:	ldp	x25, x26, [sp, #64]
    6d48:	b	a9c <d_print_comp_inner+0x6c>
    6d4c:	ldp	x21, x22, [sp, #32]
    6d50:	ldp	x23, x24, [sp, #48]
    6d54:	ldp	x25, x26, [sp, #64]
    6d58:	b	a9c <d_print_comp_inner+0x6c>
    6d5c:	ldr	x0, [x1, #16]
    6d60:	ldr	w0, [x0]
    6d64:	cmp	w0, #0x29
    6d68:	b.eq	6d74 <d_print_comp_inner+0x6344>  // b.none
    6d6c:	mov	w0, #0x1                   	// #1
    6d70:	str	w0, [x19, #304]
    6d74:	ldr	x2, [x1, #8]
    6d78:	mov	x0, x19
    6d7c:	mov	w1, w22
    6d80:	bl	73b8 <d_print_subexpr>
    6d84:	b	2174 <d_print_comp_inner+0x1744>
    6d88:	adrp	x20, 0 <d_make_comp>
    6d8c:	add	x20, x20, #0x0
    6d90:	mov	x0, x20
    6d94:	bl	0 <__asan_internal_strlen>
    6d98:	mov	x1, x20
    6d9c:	mov	x2, x0
    6da0:	mov	x0, x19
    6da4:	bl	170 <d_append_buffer>
    6da8:	ldr	x0, [x23, #8]
    6dac:	cbz	x0, 6e04 <d_print_comp_inner+0x63d4>
    6db0:	mov	w1, w22
    6db4:	mov	x2, x23
    6db8:	mov	x0, x19
    6dbc:	bl	73b8 <d_print_subexpr>
    6dc0:	ldr	x1, [x19, #256]
    6dc4:	cmp	x1, #0xff
    6dc8:	b.ne	6df0 <d_print_comp_inner+0x63c0>  // b.any
    6dcc:	ldp	x3, x2, [x19, #272]
    6dd0:	strb	wzr, [x19, #255]
    6dd4:	mov	x0, x19
    6dd8:	blr	x3
    6ddc:	str	xzr, [x19, #256]
    6de0:	ldr	x0, [x19, #320]
    6de4:	mov	x1, #0x0                   	// #0
    6de8:	add	x0, x0, #0x1
    6dec:	str	x0, [x19, #320]
    6df0:	add	x0, x1, #0x1
    6df4:	str	x0, [x19, #256]
    6df8:	mov	w0, #0x20                  	// #32
    6dfc:	strb	w0, [x19, x1]
    6e00:	strb	w0, [x19, #264]
    6e04:	mov	x2, x24
    6e08:	mov	w1, w22
    6e0c:	mov	x0, x19
    6e10:	bl	71b8 <d_print_comp>
    6e14:	cbz	x21, 6f9c <d_print_comp_inner+0x656c>
    6e18:	mov	x2, x21
    6e1c:	mov	w1, w22
    6e20:	mov	x0, x19
    6e24:	bl	73b8 <d_print_subexpr>
    6e28:	ldp	x21, x22, [sp, #32]
    6e2c:	ldp	x23, x24, [sp, #48]
    6e30:	ldp	x25, x26, [sp, #64]
    6e34:	b	a9c <d_print_comp_inner+0x6c>
    6e38:	add	x1, x21, #0x40
    6e3c:	b	2ae0 <d_print_comp_inner+0x20b0>
    6e40:	cmp	w21, #0x5
    6e44:	b.eq	7008 <d_print_comp_inner+0x65d8>  // b.none
    6e48:	adrp	x20, 0 <d_make_comp>
    6e4c:	add	x20, x20, #0x0
    6e50:	mov	x0, x20
    6e54:	bl	0 <__asan_internal_strlen>
    6e58:	mov	x1, x20
    6e5c:	mov	x2, x0
    6e60:	mov	x0, x19
    6e64:	bl	170 <d_append_buffer>
    6e68:	ldp	x21, x22, [sp, #32]
    6e6c:	ldp	x23, x24, [sp, #48]
    6e70:	ldp	x25, x26, [sp, #64]
    6e74:	b	a9c <d_print_comp_inner+0x6c>
    6e78:	ldr	w0, [x19, #348]
    6e7c:	cmp	w4, w0
    6e80:	b.ge	6ee8 <d_print_comp_inner+0x64b8>  // b.tcont
    6e84:	sbfiz	x0, x4, #4, #32
    6e88:	add	w1, w4, #0x1
    6e8c:	ldr	x2, [x19, #288]
    6e90:	str	w1, [x19, #344]
    6e94:	str	x3, [x5, x0]
    6e98:	add	x0, x5, w4, sxtw #4
    6e9c:	add	x0, x0, #0x8
    6ea0:	cbz	x2, 7098 <d_print_comp_inner+0x6668>
    6ea4:	ldr	w1, [x19, #360]
    6ea8:	ldr	w6, [x19, #364]
    6eac:	sbfiz	x5, x1, #4, #32
    6eb0:	b	6ee0 <d_print_comp_inner+0x64b0>
    6eb4:	ldr	x4, [x19, #352]
    6eb8:	add	w1, w1, #0x1
    6ebc:	ldr	x7, [x2, #8]
    6ec0:	add	x4, x4, x5
    6ec4:	str	w1, [x19, #360]
    6ec8:	add	x5, x5, #0x10
    6ecc:	str	x7, [x4, #8]
    6ed0:	str	x4, [x0]
    6ed4:	mov	x0, x4
    6ed8:	ldr	x2, [x2]
    6edc:	cbz	x2, 7098 <d_print_comp_inner+0x6668>
    6ee0:	cmp	w6, w1
    6ee4:	b.gt	6eb4 <d_print_comp_inner+0x6484>
    6ee8:	mov	w0, #0x1                   	// #1
    6eec:	ldp	x21, x22, [sp, #32]
    6ef0:	ldp	x23, x24, [sp, #48]
    6ef4:	ldp	x25, x26, [sp, #64]
    6ef8:	str	w0, [x19, #304]
    6efc:	b	a9c <d_print_comp_inner+0x6c>
    6f00:	ldr	x2, [x24, #8]
    6f04:	mov	w1, w22
    6f08:	mov	x0, x19
    6f0c:	bl	7250 <d_print_expr_op>
    6f10:	b	6c48 <d_print_comp_inner+0x6218>
    6f14:	ldr	x0, [x0, #8]
    6f18:	ldrb	w0, [x0]
    6f1c:	cmp	w0, #0x3e
    6f20:	b.eq	7120 <d_print_comp_inner+0x66f0>  // b.none
    6f24:	ldp	x21, x22, [sp, #32]
    6f28:	ldp	x23, x24, [sp, #48]
    6f2c:	ldp	x25, x26, [sp, #64]
    6f30:	b	a9c <d_print_comp_inner+0x6c>
    6f34:	cmp	x21, x24
    6f38:	b.ls	4ee0 <d_print_comp_inner+0x44b0>  // b.plast
    6f3c:	cmp	x2, #0xff
    6f40:	ccmp	w0, w23, #0x0, ls  // ls = plast
    6f44:	b.ne	4ee0 <d_print_comp_inner+0x44b0>  // b.any
    6f48:	and	w22, w2, #0xff
    6f4c:	cmp	x1, #0xff
    6f50:	b.ne	6f74 <d_print_comp_inner+0x6544>  // b.any
    6f54:	ldp	x3, x2, [x19, #272]
    6f58:	strb	wzr, [x19, #255]
    6f5c:	mov	x0, x19
    6f60:	blr	x3
    6f64:	str	xzr, [x19, #256]
    6f68:	ldr	x0, [x19, #320]
    6f6c:	add	x0, x0, #0x1
    6f70:	str	x0, [x19, #320]
    6f74:	ldr	x0, [x19, #256]
    6f78:	mov	x20, x24
    6f7c:	add	x1, x0, #0x1
    6f80:	str	x1, [x19, #256]
    6f84:	strb	w22, [x19, x0]
    6f88:	strb	w22, [x19, #264]
    6f8c:	b	4ebc <d_print_comp_inner+0x448c>
    6f90:	add	x1, x21, #0x60
    6f94:	mov	w20, #0x4                   	// #4
    6f98:	b	2ae0 <d_print_comp_inner+0x20b0>
    6f9c:	ldp	x21, x22, [sp, #32]
    6fa0:	ldp	x23, x24, [sp, #48]
    6fa4:	ldp	x25, x26, [sp, #64]
    6fa8:	b	a9c <d_print_comp_inner+0x6c>
    6fac:	mov	x1, x20
    6fb0:	mov	x0, x19
    6fb4:	bl	360 <d_find_pack>
    6fb8:	cbnz	x0, 6fd4 <d_print_comp_inner+0x65a4>
    6fbc:	b	6fe0 <d_print_comp_inner+0x65b0>
    6fc0:	ldr	x1, [x0, #8]
    6fc4:	cbz	x1, 6fe0 <d_print_comp_inner+0x65b0>
    6fc8:	ldr	x0, [x0, #16]
    6fcc:	add	w3, w3, #0x1
    6fd0:	cbz	x0, 6fe0 <d_print_comp_inner+0x65b0>
    6fd4:	ldr	w1, [x0]
    6fd8:	cmp	w1, #0x2f
    6fdc:	b.eq	6fc0 <d_print_comp_inner+0x6590>  // b.none
    6fe0:	mov	w1, w3
    6fe4:	mov	x0, x19
    6fe8:	bl	488 <d_append_num>
    6fec:	ldp	x21, x22, [sp, #32]
    6ff0:	ldp	x23, x24, [sp, #48]
    6ff4:	ldp	x25, x26, [sp, #64]
    6ff8:	b	a9c <d_print_comp_inner+0x6c>
    6ffc:	add	x21, sp, #0x90
    7000:	str	x21, [x19, #296]
    7004:	b	627c <d_print_comp_inner+0x584c>
    7008:	adrp	x20, 0 <d_make_comp>
    700c:	add	x20, x20, #0x0
    7010:	mov	x0, x20
    7014:	bl	0 <__asan_internal_strlen>
    7018:	mov	x1, x20
    701c:	mov	x2, x0
    7020:	mov	x0, x19
    7024:	bl	170 <d_append_buffer>
    7028:	ldp	x21, x22, [sp, #32]
    702c:	ldp	x23, x24, [sp, #48]
    7030:	ldp	x25, x26, [sp, #64]
    7034:	b	a9c <d_print_comp_inner+0x6c>
    7038:	add	x21, x21, #0x20
    703c:	str	x21, [x19, #296]
    7040:	b	627c <d_print_comp_inner+0x584c>
    7044:	ldr	x1, [x19, #256]
    7048:	cmp	x1, #0xff
    704c:	b.ne	7074 <d_print_comp_inner+0x6644>  // b.any
    7050:	ldp	x3, x2, [x19, #272]
    7054:	strb	wzr, [x19, #255]
    7058:	mov	x0, x19
    705c:	blr	x3
    7060:	str	xzr, [x19, #256]
    7064:	ldr	x0, [x19, #320]
    7068:	mov	x1, #0x0                   	// #0
    706c:	add	x0, x0, #0x1
    7070:	str	x0, [x19, #320]
    7074:	add	x0, x1, #0x1
    7078:	str	x0, [x19, #256]
    707c:	mov	w0, #0x75                  	// #117
    7080:	strb	w0, [x19, x1]
    7084:	strb	w0, [x19, #264]
    7088:	ldp	x21, x22, [sp, #32]
    708c:	ldp	x23, x24, [sp, #48]
    7090:	ldp	x25, x26, [sp, #64]
    7094:	b	a9c <d_print_comp_inner+0x6c>
    7098:	str	xzr, [x0]
    709c:	b	6470 <d_print_comp_inner+0x5a40>
    70a0:	adrp	x20, 0 <d_make_comp>
    70a4:	add	x20, x20, #0x0
    70a8:	mov	x0, x20
    70ac:	bl	0 <__asan_internal_strlen>
    70b0:	mov	x1, x20
    70b4:	mov	x2, x0
    70b8:	mov	x0, x19
    70bc:	bl	170 <d_append_buffer>
    70c0:	ldp	x21, x22, [sp, #32]
    70c4:	ldp	x23, x24, [sp, #48]
    70c8:	ldp	x25, x26, [sp, #64]
    70cc:	b	a9c <d_print_comp_inner+0x6c>
    70d0:	ldr	x1, [x19, #256]
    70d4:	cmp	x1, #0xff
    70d8:	b.ne	7100 <d_print_comp_inner+0x66d0>  // b.any
    70dc:	ldp	x3, x2, [x19, #272]
    70e0:	strb	wzr, [x19, #255]
    70e4:	mov	x0, x19
    70e8:	blr	x3
    70ec:	str	xzr, [x19, #256]
    70f0:	ldr	x0, [x19, #320]
    70f4:	mov	x1, #0x0                   	// #0
    70f8:	add	x0, x0, #0x1
    70fc:	str	x0, [x19, #320]
    7100:	add	x0, x1, #0x1
    7104:	str	x0, [x19, #256]
    7108:	mov	w0, #0x2d                  	// #45
    710c:	strb	w0, [x19, x1]
    7110:	strb	w0, [x19, #264]
    7114:	b	57cc <d_print_comp_inner+0x4d9c>
    7118:	ldr	x2, [x19, #296]
    711c:	b	bd8 <d_print_comp_inner+0x1a8>
    7120:	ldr	x1, [x19, #256]
    7124:	cmp	x1, #0xff
    7128:	b.ne	7150 <d_print_comp_inner+0x6720>  // b.any
    712c:	ldp	x3, x2, [x19, #272]
    7130:	strb	wzr, [x19, #255]
    7134:	mov	x0, x19
    7138:	blr	x3
    713c:	str	xzr, [x19, #256]
    7140:	ldr	x0, [x19, #320]
    7144:	mov	x1, #0x0                   	// #0
    7148:	add	x0, x0, #0x1
    714c:	str	x0, [x19, #320]
    7150:	add	x0, x1, #0x1
    7154:	str	x0, [x19, #256]
    7158:	mov	w0, #0x29                  	// #41
    715c:	strb	w0, [x19, x1]
    7160:	strb	w0, [x19, #264]
    7164:	ldp	x21, x22, [sp, #32]
    7168:	ldp	x23, x24, [sp, #48]
    716c:	ldp	x25, x26, [sp, #64]
    7170:	b	a9c <d_print_comp_inner+0x6c>
    7174:	ldp	x21, x22, [sp, #32]
    7178:	ldp	x23, x24, [sp, #48]
    717c:	ldp	x25, x26, [sp, #64]
    7180:	b	a9c <d_print_comp_inner+0x6c>
    7184:	adrp	x20, 0 <d_make_comp>
    7188:	add	x20, x20, #0x0
    718c:	mov	x0, x20
    7190:	bl	0 <__asan_internal_strlen>
    7194:	mov	x1, x20
    7198:	mov	x2, x0
    719c:	mov	x0, x19
    71a0:	bl	170 <d_append_buffer>
    71a4:	ldp	x21, x22, [sp, #32]
    71a8:	ldp	x23, x24, [sp, #48]
    71ac:	ldp	x25, x26, [sp, #64]
    71b0:	b	a9c <d_print_comp_inner+0x6c>
    71b4:	nop

00000000000071b8 <d_print_comp>:
    71b8:	stp	x29, x30, [sp, #-48]!
    71bc:	mov	x29, sp
    71c0:	stp	x19, x20, [sp, #16]
    71c4:	mov	x20, x0
    71c8:	cbz	x2, 7238 <d_print_comp+0x80>
    71cc:	ldr	w3, [x2, #4]
    71d0:	mov	x19, x2
    71d4:	cmp	w3, #0x1
    71d8:	b.gt	7238 <d_print_comp+0x80>
    71dc:	ldr	w4, [x0, #308]
    71e0:	cmp	w4, #0x400
    71e4:	b.gt	7238 <d_print_comp+0x80>
    71e8:	add	w3, w3, #0x1
    71ec:	add	w4, w4, #0x1
    71f0:	str	w3, [x2, #4]
    71f4:	add	x3, sp, #0x20
    71f8:	str	w4, [x0, #308]
    71fc:	ldr	x4, [x0, #328]
    7200:	str	x3, [x0, #328]
    7204:	stp	x2, x4, [sp, #32]
    7208:	bl	a30 <d_print_comp_inner>
    720c:	ldr	w1, [x19, #4]
    7210:	ldr	x0, [sp, #40]
    7214:	str	x0, [x20, #328]
    7218:	ldr	w0, [x20, #308]
    721c:	sub	w1, w1, #0x1
    7220:	str	w1, [x19, #4]
    7224:	sub	w0, w0, #0x1
    7228:	str	w0, [x20, #308]
    722c:	ldp	x19, x20, [sp, #16]
    7230:	ldp	x29, x30, [sp], #48
    7234:	ret
    7238:	mov	w0, #0x1                   	// #1
    723c:	str	w0, [x20, #304]
    7240:	ldp	x19, x20, [sp, #16]
    7244:	ldp	x29, x30, [sp], #48
    7248:	ret
    724c:	nop

0000000000007250 <d_print_expr_op>:
    7250:	stp	x29, x30, [sp, #-80]!
    7254:	mov	x29, sp
    7258:	ldr	w3, [x2]
    725c:	stp	x19, x20, [sp, #16]
    7260:	mov	x20, x2
    7264:	mov	x19, x0
    7268:	cmp	w3, #0x32
    726c:	b.eq	729c <d_print_expr_op+0x4c>  // b.none
    7270:	ldr	w3, [x2, #4]
    7274:	cmp	w3, #0x1
    7278:	b.gt	7288 <d_print_expr_op+0x38>
    727c:	ldr	w4, [x0, #308]
    7280:	cmp	w4, #0x400
    7284:	b.le	735c <d_print_expr_op+0x10c>
    7288:	mov	w0, #0x1                   	// #1
    728c:	str	w0, [x19, #304]
    7290:	ldp	x19, x20, [sp, #16]
    7294:	ldp	x29, x30, [sp], #80
    7298:	ret
    729c:	ldr	x0, [x2, #8]
    72a0:	stp	x21, x22, [sp, #32]
    72a4:	ldrsw	x22, [x0, #16]
    72a8:	ldr	x20, [x0, #8]
    72ac:	cbz	x22, 73ac <d_print_expr_op+0x15c>
    72b0:	add	x22, x20, x22
    72b4:	ldr	x1, [x19, #256]
    72b8:	str	x23, [sp, #48]
    72bc:	mov	x23, #0x1                   	// #1
    72c0:	b	7318 <d_print_expr_op+0xc8>
    72c4:	ldp	x3, x2, [x19, #272]
    72c8:	strb	wzr, [x19, #255]
    72cc:	add	x20, x20, #0x1
    72d0:	blr	x3
    72d4:	strb	w21, [x19]
    72d8:	ldr	x0, [x19, #320]
    72dc:	str	x23, [x19, #256]
    72e0:	strb	w21, [x19, #264]
    72e4:	cmp	x22, x20
    72e8:	add	x0, x0, #0x1
    72ec:	str	x0, [x19, #320]
    72f0:	mov	x0, #0x1                   	// #1
    72f4:	b.eq	7348 <d_print_expr_op+0xf8>  // b.none
    72f8:	ldrb	w21, [x20]
    72fc:	add	x1, x0, #0x1
    7300:	str	x1, [x19, #256]
    7304:	add	x20, x20, #0x1
    7308:	strb	w21, [x19, x0]
    730c:	cmp	x20, x22
    7310:	strb	w21, [x19, #264]
    7314:	b.eq	7348 <d_print_expr_op+0xf8>  // b.none
    7318:	ldrb	w21, [x20]
    731c:	mov	x0, x19
    7320:	cmp	x1, #0xff
    7324:	b.eq	72c4 <d_print_expr_op+0x74>  // b.none
    7328:	mov	x0, x1
    732c:	add	x20, x20, #0x1
    7330:	add	x1, x0, #0x1
    7334:	str	x1, [x19, #256]
    7338:	cmp	x20, x22
    733c:	strb	w21, [x19, x0]
    7340:	strb	w21, [x19, #264]
    7344:	b.ne	7318 <d_print_expr_op+0xc8>  // b.any
    7348:	ldp	x19, x20, [sp, #16]
    734c:	ldp	x21, x22, [sp, #32]
    7350:	ldr	x23, [sp, #48]
    7354:	ldp	x29, x30, [sp], #80
    7358:	ret
    735c:	add	w3, w3, #0x1
    7360:	add	w4, w4, #0x1
    7364:	str	w3, [x2, #4]
    7368:	add	x3, sp, #0x40
    736c:	str	w4, [x0, #308]
    7370:	ldr	x4, [x0, #328]
    7374:	str	x3, [x0, #328]
    7378:	stp	x2, x4, [sp, #64]
    737c:	bl	a30 <d_print_comp_inner>
    7380:	ldr	w1, [x20, #4]
    7384:	ldr	x0, [sp, #72]
    7388:	str	x0, [x19, #328]
    738c:	ldr	w0, [x19, #308]
    7390:	sub	w1, w1, #0x1
    7394:	str	w1, [x20, #4]
    7398:	sub	w0, w0, #0x1
    739c:	str	w0, [x19, #308]
    73a0:	ldp	x19, x20, [sp, #16]
    73a4:	ldp	x29, x30, [sp], #80
    73a8:	ret
    73ac:	ldp	x21, x22, [sp, #32]
    73b0:	b	7290 <d_print_expr_op+0x40>
    73b4:	nop

00000000000073b8 <d_print_subexpr>:
    73b8:	stp	x29, x30, [sp, #-64]!
    73bc:	mov	x29, sp
    73c0:	stp	x19, x20, [sp, #16]
    73c4:	mov	x20, x2
    73c8:	ldr	w2, [x2]
    73cc:	stp	x21, x22, [sp, #32]
    73d0:	mov	w22, #0x1                   	// #1
    73d4:	cmp	w2, #0x31
    73d8:	ccmp	w2, w22, #0x0, ne  // ne = any
    73dc:	mov	w21, w1
    73e0:	mov	x19, x0
    73e4:	ccmp	w2, #0x6, #0x4, hi  // hi = pmore
    73e8:	b.ne	7494 <d_print_subexpr+0xdc>  // b.any
    73ec:	ldr	w0, [x20, #4]
    73f0:	cmp	w0, #0x1
    73f4:	b.gt	7488 <d_print_subexpr+0xd0>
    73f8:	ldr	w1, [x19, #308]
    73fc:	cmp	w1, #0x400
    7400:	b.gt	7488 <d_print_subexpr+0xd0>
    7404:	ldr	x3, [x19, #328]
    7408:	add	w0, w0, #0x1
    740c:	str	w0, [x20, #4]
    7410:	add	w1, w1, #0x1
    7414:	add	x0, sp, #0x30
    7418:	str	w1, [x19, #308]
    741c:	str	x0, [x19, #328]
    7420:	mov	w1, w21
    7424:	mov	x0, x19
    7428:	mov	x2, x20
    742c:	stp	x20, x3, [sp, #48]
    7430:	bl	a30 <d_print_comp_inner>
    7434:	ldr	w1, [x20, #4]
    7438:	ldr	x0, [sp, #56]
    743c:	str	x0, [x19, #328]
    7440:	ldr	w0, [x19, #308]
    7444:	sub	w1, w1, #0x1
    7448:	str	w1, [x20, #4]
    744c:	sub	w0, w0, #0x1
    7450:	str	w0, [x19, #308]
    7454:	cbnz	w22, 7478 <d_print_subexpr+0xc0>
    7458:	ldr	x1, [x19, #256]
    745c:	add	x0, x1, #0x1
    7460:	cmp	x1, #0xff
    7464:	b.eq	74bc <d_print_subexpr+0x104>  // b.none
    7468:	str	x0, [x19, #256]
    746c:	mov	w0, #0x29                  	// #41
    7470:	strb	w0, [x19, x1]
    7474:	strb	w0, [x19, #264]
    7478:	ldp	x19, x20, [sp, #16]
    747c:	ldp	x21, x22, [sp, #32]
    7480:	ldp	x29, x30, [sp], #64
    7484:	ret
    7488:	mov	w0, #0x1                   	// #1
    748c:	str	w0, [x19, #304]
    7490:	b	7454 <d_print_subexpr+0x9c>
    7494:	ldr	x1, [x0, #256]
    7498:	cmp	x1, #0xff
    749c:	b.eq	74e4 <d_print_subexpr+0x12c>  // b.none
    74a0:	add	x0, x1, #0x1
    74a4:	str	x0, [x19, #256]
    74a8:	mov	w0, #0x28                  	// #40
    74ac:	strb	w0, [x19, x1]
    74b0:	mov	w22, #0x0                   	// #0
    74b4:	strb	w0, [x19, #264]
    74b8:	b	73ec <d_print_subexpr+0x34>
    74bc:	ldp	x3, x2, [x19, #272]
    74c0:	strb	wzr, [x19, #255]
    74c4:	mov	x0, x19
    74c8:	blr	x3
    74cc:	ldr	x2, [x19, #320]
    74d0:	mov	x0, #0x1                   	// #1
    74d4:	mov	x1, #0x0                   	// #0
    74d8:	add	x2, x2, x0
    74dc:	str	x2, [x19, #320]
    74e0:	b	7468 <d_print_subexpr+0xb0>
    74e4:	ldp	x3, x2, [x0, #272]
    74e8:	strb	wzr, [x0, #255]
    74ec:	blr	x3
    74f0:	ldr	x2, [x19, #320]
    74f4:	mov	x0, #0x1                   	// #1
    74f8:	mov	x1, #0x0                   	// #0
    74fc:	add	x2, x2, x0
    7500:	str	x2, [x19, #320]
    7504:	b	74a4 <d_print_subexpr+0xec>

0000000000007508 <d_maybe_print_fold_expression.isra.0>:
    7508:	stp	x29, x30, [sp, #-96]!
    750c:	mov	x29, sp
    7510:	stp	x19, x20, [sp, #16]
    7514:	mov	x19, x0
    7518:	ldr	x0, [x2, #8]
    751c:	stp	x21, x22, [sp, #32]
    7520:	mov	w22, w1
    7524:	ldr	x0, [x0]
    7528:	ldrb	w1, [x0]
    752c:	cmp	w1, #0x66
    7530:	b.ne	7654 <d_maybe_print_fold_expression.isra.0+0x14c>  // b.any
    7534:	ldr	x1, [x3]
    7538:	stp	x23, x24, [sp, #48]
    753c:	stp	x25, x26, [sp, #64]
    7540:	mov	x25, #0x0                   	// #0
    7544:	ldp	x23, x26, [x1, #8]
    7548:	ldr	w1, [x26]
    754c:	cmp	w1, #0x3c
    7550:	b.eq	77c8 <d_maybe_print_fold_expression.isra.0+0x2c0>  // b.none
    7554:	ldr	w21, [x19, #316]
    7558:	mov	w1, #0xffffffff            	// #-1
    755c:	str	w1, [x19, #316]
    7560:	ldrb	w0, [x0, #1]
    7564:	cmp	w0, #0x6c
    7568:	b.eq	77e8 <d_maybe_print_fold_expression.isra.0+0x2e0>  // b.none
    756c:	b.hi	76f0 <d_maybe_print_fold_expression.isra.0+0x1e8>  // b.pmore
    7570:	cmp	w0, #0x4c
    7574:	b.eq	7580 <d_maybe_print_fold_expression.isra.0+0x78>  // b.none
    7578:	cmp	w0, #0x52
    757c:	b.ne	76d0 <d_maybe_print_fold_expression.isra.0+0x1c8>  // b.any
    7580:	ldr	x1, [x19, #256]
    7584:	add	x0, x1, #0x1
    7588:	cmp	x1, #0xff
    758c:	b.eq	78c0 <d_maybe_print_fold_expression.isra.0+0x3b8>  // b.none
    7590:	str	x0, [x19, #256]
    7594:	mov	w0, #0x28                  	// #40
    7598:	strb	w0, [x19, x1]
    759c:	mov	x2, x26
    75a0:	strb	w0, [x19, #264]
    75a4:	mov	w1, w22
    75a8:	mov	x0, x19
    75ac:	adrp	x20, 0 <d_make_comp>
    75b0:	bl	73b8 <d_print_subexpr>
    75b4:	add	x20, x20, #0x0
    75b8:	mov	x2, x23
    75bc:	mov	w1, w22
    75c0:	mov	x0, x19
    75c4:	bl	7250 <d_print_expr_op>
    75c8:	mov	x0, x20
    75cc:	bl	0 <__asan_internal_strlen>
    75d0:	cbz	x0, 7880 <d_maybe_print_fold_expression.isra.0+0x378>
    75d4:	mov	x26, #0x1                   	// #1
    75d8:	ldr	x1, [x19, #256]
    75dc:	str	x27, [sp, #80]
    75e0:	add	x27, x20, x0
    75e4:	b	763c <d_maybe_print_fold_expression.isra.0+0x134>
    75e8:	ldp	x3, x2, [x19, #272]
    75ec:	strb	wzr, [x19, #255]
    75f0:	add	x20, x20, #0x1
    75f4:	blr	x3
    75f8:	strb	w24, [x19]
    75fc:	ldr	x0, [x19, #320]
    7600:	str	x26, [x19, #256]
    7604:	strb	w24, [x19, #264]
    7608:	cmp	x20, x27
    760c:	add	x0, x0, #0x1
    7610:	str	x0, [x19, #320]
    7614:	mov	x0, #0x1                   	// #1
    7618:	b.eq	787c <d_maybe_print_fold_expression.isra.0+0x374>  // b.none
    761c:	ldrb	w24, [x20]
    7620:	add	x1, x0, #0x1
    7624:	str	x1, [x19, #256]
    7628:	strb	w24, [x19, x0]
    762c:	add	x20, x20, #0x1
    7630:	strb	w24, [x19, #264]
    7634:	cmp	x20, x27
    7638:	b.eq	787c <d_maybe_print_fold_expression.isra.0+0x374>  // b.none
    763c:	ldrb	w24, [x20]
    7640:	mov	x0, x19
    7644:	cmp	x1, #0xff
    7648:	b.eq	75e8 <d_maybe_print_fold_expression.isra.0+0xe0>  // b.none
    764c:	mov	x0, x1
    7650:	b	7620 <d_maybe_print_fold_expression.isra.0+0x118>
    7654:	mov	w0, #0x0                   	// #0
    7658:	ldp	x19, x20, [sp, #16]
    765c:	ldp	x21, x22, [sp, #32]
    7660:	ldp	x29, x30, [sp], #96
    7664:	ret
    7668:	ldr	x27, [sp, #80]
    766c:	mov	x2, x23
    7670:	mov	w1, w22
    7674:	mov	x0, x19
    7678:	bl	7250 <d_print_expr_op>
    767c:	mov	x2, x26
    7680:	mov	w1, w22
    7684:	mov	x0, x19
    7688:	bl	73b8 <d_print_subexpr>
    768c:	ldr	x1, [x19, #256]
    7690:	add	x0, x1, #0x1
    7694:	cmp	x1, #0xff
    7698:	b.ne	76c0 <d_maybe_print_fold_expression.isra.0+0x1b8>  // b.any
    769c:	ldp	x3, x2, [x19, #272]
    76a0:	strb	wzr, [x19, #255]
    76a4:	mov	x0, x19
    76a8:	blr	x3
    76ac:	ldr	x2, [x19, #320]
    76b0:	mov	x0, #0x1                   	// #1
    76b4:	mov	x1, #0x0                   	// #0
    76b8:	add	x2, x2, x0
    76bc:	str	x2, [x19, #320]
    76c0:	str	x0, [x19, #256]
    76c4:	mov	w0, #0x29                  	// #41
    76c8:	strb	w0, [x19, x1]
    76cc:	strb	w0, [x19, #264]
    76d0:	ldp	x23, x24, [sp, #48]
    76d4:	mov	w0, #0x1                   	// #1
    76d8:	ldp	x25, x26, [sp, #64]
    76dc:	str	w21, [x19, #316]
    76e0:	ldp	x19, x20, [sp, #16]
    76e4:	ldp	x21, x22, [sp, #32]
    76e8:	ldp	x29, x30, [sp], #96
    76ec:	ret
    76f0:	cmp	w0, #0x72
    76f4:	b.ne	76d0 <d_maybe_print_fold_expression.isra.0+0x1c8>  // b.any
    76f8:	ldr	x1, [x19, #256]
    76fc:	add	x0, x1, #0x1
    7700:	cmp	x1, #0xff
    7704:	b.eq	7898 <d_maybe_print_fold_expression.isra.0+0x390>  // b.none
    7708:	str	x0, [x19, #256]
    770c:	mov	w0, #0x28                  	// #40
    7710:	strb	w0, [x19, x1]
    7714:	mov	x2, x26
    7718:	strb	w0, [x19, #264]
    771c:	mov	w1, w22
    7720:	mov	x0, x19
    7724:	adrp	x20, 0 <d_make_comp>
    7728:	bl	73b8 <d_print_subexpr>
    772c:	add	x20, x20, #0x0
    7730:	mov	x2, x23
    7734:	mov	w1, w22
    7738:	mov	x0, x19
    773c:	bl	7250 <d_print_expr_op>
    7740:	mov	x0, x20
    7744:	bl	0 <__asan_internal_strlen>
    7748:	cbz	x0, 76d0 <d_maybe_print_fold_expression.isra.0+0x1c8>
    774c:	add	x23, x20, x0
    7750:	mov	x24, #0x1                   	// #1
    7754:	ldr	x1, [x19, #256]
    7758:	b	77b0 <d_maybe_print_fold_expression.isra.0+0x2a8>
    775c:	ldp	x3, x2, [x19, #272]
    7760:	strb	wzr, [x19, #255]
    7764:	add	x20, x20, #0x1
    7768:	blr	x3
    776c:	strb	w22, [x19]
    7770:	ldr	x0, [x19, #320]
    7774:	str	x24, [x19, #256]
    7778:	strb	w22, [x19, #264]
    777c:	cmp	x23, x20
    7780:	add	x0, x0, #0x1
    7784:	str	x0, [x19, #320]
    7788:	mov	x0, #0x1                   	// #1
    778c:	b.eq	76d0 <d_maybe_print_fold_expression.isra.0+0x1c8>  // b.none
    7790:	ldrb	w22, [x20]
    7794:	add	x1, x0, #0x1
    7798:	str	x1, [x19, #256]
    779c:	strb	w22, [x19, x0]
    77a0:	add	x20, x20, #0x1
    77a4:	strb	w22, [x19, #264]
    77a8:	cmp	x23, x20
    77ac:	b.eq	76d0 <d_maybe_print_fold_expression.isra.0+0x1c8>  // b.none
    77b0:	ldrb	w22, [x20]
    77b4:	mov	x0, x19
    77b8:	cmp	x1, #0xff
    77bc:	b.eq	775c <d_maybe_print_fold_expression.isra.0+0x254>  // b.none
    77c0:	mov	x0, x1
    77c4:	b	7794 <d_maybe_print_fold_expression.isra.0+0x28c>
    77c8:	ldr	w21, [x19, #316]
    77cc:	mov	w1, #0xffffffff            	// #-1
    77d0:	ldr	x25, [x26, #16]
    77d4:	ldr	x26, [x26, #8]
    77d8:	str	w1, [x19, #316]
    77dc:	ldrb	w0, [x0, #1]
    77e0:	cmp	w0, #0x6c
    77e4:	b.ne	756c <d_maybe_print_fold_expression.isra.0+0x64>  // b.any
    77e8:	adrp	x20, 0 <d_make_comp>
    77ec:	add	x20, x20, #0x0
    77f0:	mov	x0, x20
    77f4:	bl	0 <__asan_internal_strlen>
    77f8:	cbz	x0, 766c <d_maybe_print_fold_expression.isra.0+0x164>
    77fc:	mov	x25, #0x1                   	// #1
    7800:	ldr	x1, [x19, #256]
    7804:	str	x27, [sp, #80]
    7808:	add	x27, x20, x0
    780c:	b	7864 <d_maybe_print_fold_expression.isra.0+0x35c>
    7810:	ldp	x3, x2, [x19, #272]
    7814:	strb	wzr, [x19, #255]
    7818:	add	x20, x20, #0x1
    781c:	blr	x3
    7820:	strb	w24, [x19]
    7824:	ldr	x0, [x19, #320]
    7828:	str	x25, [x19, #256]
    782c:	strb	w24, [x19, #264]
    7830:	cmp	x20, x27
    7834:	add	x0, x0, #0x1
    7838:	str	x0, [x19, #320]
    783c:	mov	x0, #0x1                   	// #1
    7840:	b.eq	7668 <d_maybe_print_fold_expression.isra.0+0x160>  // b.none
    7844:	ldrb	w24, [x20]
    7848:	add	x1, x0, #0x1
    784c:	str	x1, [x19, #256]
    7850:	strb	w24, [x19, x0]
    7854:	add	x20, x20, #0x1
    7858:	strb	w24, [x19, #264]
    785c:	cmp	x27, x20
    7860:	b.eq	7668 <d_maybe_print_fold_expression.isra.0+0x160>  // b.none
    7864:	ldrb	w24, [x20]
    7868:	mov	x0, x19
    786c:	cmp	x1, #0xff
    7870:	b.eq	7810 <d_maybe_print_fold_expression.isra.0+0x308>  // b.none
    7874:	mov	x0, x1
    7878:	b	7848 <d_maybe_print_fold_expression.isra.0+0x340>
    787c:	ldr	x27, [sp, #80]
    7880:	mov	x2, x23
    7884:	mov	w1, w22
    7888:	mov	x0, x19
    788c:	bl	7250 <d_print_expr_op>
    7890:	mov	x2, x25
    7894:	b	7680 <d_maybe_print_fold_expression.isra.0+0x178>
    7898:	ldp	x3, x2, [x19, #272]
    789c:	strb	wzr, [x19, #255]
    78a0:	mov	x0, x19
    78a4:	blr	x3
    78a8:	ldr	x2, [x19, #320]
    78ac:	mov	x0, #0x1                   	// #1
    78b0:	mov	x1, #0x0                   	// #0
    78b4:	add	x2, x2, x0
    78b8:	str	x2, [x19, #320]
    78bc:	b	7708 <d_maybe_print_fold_expression.isra.0+0x200>
    78c0:	ldp	x3, x2, [x19, #272]
    78c4:	strb	wzr, [x19, #255]
    78c8:	mov	x0, x19
    78cc:	blr	x3
    78d0:	ldr	x2, [x19, #320]
    78d4:	mov	x0, #0x1                   	// #1
    78d8:	mov	x1, #0x0                   	// #0
    78dc:	add	x2, x2, x0
    78e0:	str	x2, [x19, #320]
    78e4:	b	7590 <d_maybe_print_fold_expression.isra.0+0x88>

00000000000078e8 <d_print_mod>:
    78e8:	stp	x29, x30, [sp, #-96]!
    78ec:	mov	x29, sp
    78f0:	stp	x19, x20, [sp, #16]
    78f4:	mov	x19, x0
    78f8:	ldr	w0, [x2]
    78fc:	stp	x21, x22, [sp, #32]
    7900:	mov	x20, x2
    7904:	sub	w0, w0, #0x3
    7908:	mov	w21, w1
    790c:	cmp	w0, #0x4d
    7910:	b.ls	7980 <d_print_mod+0x98>  // b.plast
    7914:	ldr	w0, [x20, #4]
    7918:	cmp	w0, #0x1
    791c:	b.gt	8470 <d_print_mod+0xb88>
    7920:	ldr	w1, [x19, #308]
    7924:	cmp	w1, #0x400
    7928:	b.gt	8470 <d_print_mod+0xb88>
    792c:	ldr	x3, [x19, #328]
    7930:	add	w0, w0, #0x1
    7934:	str	w0, [x20, #4]
    7938:	add	w1, w1, #0x1
    793c:	add	x0, sp, #0x50
    7940:	str	w1, [x19, #308]
    7944:	str	x0, [x19, #328]
    7948:	mov	w1, w21
    794c:	mov	x0, x19
    7950:	mov	x2, x20
    7954:	stp	x20, x3, [sp, #80]
    7958:	bl	a30 <d_print_comp_inner>
    795c:	ldr	w1, [x20, #4]
    7960:	ldr	x0, [sp, #88]
    7964:	str	x0, [x19, #328]
    7968:	ldr	w0, [x19, #308]
    796c:	sub	w1, w1, #0x1
    7970:	str	w1, [x20, #4]
    7974:	sub	w0, w0, #0x1
    7978:	str	w0, [x19, #308]
    797c:	b	7b5c <d_print_mod+0x274>
    7980:	adrp	x1, 0 <d_make_comp>
    7984:	add	x1, x1, #0x0
    7988:	stp	x23, x24, [sp, #48]
    798c:	ldrh	w0, [x1, w0, uxtw #1]
    7990:	adr	x1, 799c <d_print_mod+0xb4>
    7994:	add	x0, x1, w0, sxth #2
    7998:	br	x0
    799c:	ldp	x23, x24, [sp, #48]
    79a0:	b	7914 <d_print_mod+0x2c>
    79a4:	adrp	x20, 0 <d_make_comp>
    79a8:	add	x20, x20, #0x0
    79ac:	mov	x0, x20
    79b0:	bl	0 <__asan_internal_strlen>
    79b4:	cbz	x0, 7b58 <d_print_mod+0x270>
    79b8:	add	x22, x20, x0
    79bc:	mov	x23, #0x1                   	// #1
    79c0:	ldr	x1, [x19, #256]
    79c4:	b	7a20 <d_print_mod+0x138>
    79c8:	ldp	x3, x2, [x19, #272]
    79cc:	strb	wzr, [x19, #255]
    79d0:	mov	x0, x19
    79d4:	add	x20, x20, #0x1
    79d8:	blr	x3
    79dc:	strb	w21, [x19]
    79e0:	ldr	x0, [x19, #320]
    79e4:	str	x23, [x19, #256]
    79e8:	strb	w21, [x19, #264]
    79ec:	cmp	x20, x22
    79f0:	add	x0, x0, #0x1
    79f4:	str	x0, [x19, #320]
    79f8:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    79fc:	ldrb	w21, [x20]
    7a00:	mov	x0, #0x1                   	// #1
    7a04:	add	x1, x0, #0x1
    7a08:	str	x1, [x19, #256]
    7a0c:	strb	w21, [x19, x0]
    7a10:	add	x20, x20, #0x1
    7a14:	strb	w21, [x19, #264]
    7a18:	cmp	x20, x22
    7a1c:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    7a20:	ldrb	w21, [x20]
    7a24:	cmp	x1, #0xff
    7a28:	b.eq	79c8 <d_print_mod+0xe0>  // b.none
    7a2c:	mov	x0, x1
    7a30:	b	7a04 <d_print_mod+0x11c>
    7a34:	adrp	x20, 0 <d_make_comp>
    7a38:	add	x20, x20, #0x0
    7a3c:	mov	x0, x20
    7a40:	bl	0 <__asan_internal_strlen>
    7a44:	cbz	x0, 7b58 <d_print_mod+0x270>
    7a48:	add	x22, x20, x0
    7a4c:	mov	x23, #0x1                   	// #1
    7a50:	ldr	x1, [x19, #256]
    7a54:	b	7ab0 <d_print_mod+0x1c8>
    7a58:	ldp	x3, x2, [x19, #272]
    7a5c:	strb	wzr, [x19, #255]
    7a60:	mov	x0, x19
    7a64:	add	x20, x20, #0x1
    7a68:	blr	x3
    7a6c:	strb	w21, [x19]
    7a70:	ldr	x0, [x19, #320]
    7a74:	str	x23, [x19, #256]
    7a78:	strb	w21, [x19, #264]
    7a7c:	cmp	x20, x22
    7a80:	add	x0, x0, #0x1
    7a84:	str	x0, [x19, #320]
    7a88:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    7a8c:	ldrb	w21, [x20]
    7a90:	mov	x0, #0x1                   	// #1
    7a94:	add	x1, x0, #0x1
    7a98:	str	x1, [x19, #256]
    7a9c:	strb	w21, [x19, x0]
    7aa0:	add	x20, x20, #0x1
    7aa4:	strb	w21, [x19, #264]
    7aa8:	cmp	x22, x20
    7aac:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    7ab0:	ldrb	w21, [x20]
    7ab4:	cmp	x1, #0xff
    7ab8:	b.eq	7a58 <d_print_mod+0x170>  // b.none
    7abc:	mov	x0, x1
    7ac0:	b	7a94 <d_print_mod+0x1ac>
    7ac4:	adrp	x20, 0 <d_make_comp>
    7ac8:	add	x20, x20, #0x0
    7acc:	mov	x0, x20
    7ad0:	bl	0 <__asan_internal_strlen>
    7ad4:	cbz	x0, 7b58 <d_print_mod+0x270>
    7ad8:	add	x22, x20, x0
    7adc:	mov	x23, #0x1                   	// #1
    7ae0:	ldr	x1, [x19, #256]
    7ae4:	b	7b40 <d_print_mod+0x258>
    7ae8:	ldp	x3, x2, [x19, #272]
    7aec:	strb	wzr, [x19, #255]
    7af0:	mov	x0, x19
    7af4:	add	x20, x20, #0x1
    7af8:	blr	x3
    7afc:	strb	w21, [x19]
    7b00:	ldr	x0, [x19, #320]
    7b04:	str	x23, [x19, #256]
    7b08:	strb	w21, [x19, #264]
    7b0c:	cmp	x20, x22
    7b10:	add	x0, x0, #0x1
    7b14:	str	x0, [x19, #320]
    7b18:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    7b1c:	ldrb	w21, [x20]
    7b20:	mov	x0, #0x1                   	// #1
    7b24:	add	x1, x0, #0x1
    7b28:	str	x1, [x19, #256]
    7b2c:	strb	w21, [x19, x0]
    7b30:	add	x20, x20, #0x1
    7b34:	strb	w21, [x19, #264]
    7b38:	cmp	x22, x20
    7b3c:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    7b40:	ldrb	w21, [x20]
    7b44:	cmp	x1, #0xff
    7b48:	b.eq	7ae8 <d_print_mod+0x200>  // b.none
    7b4c:	mov	x0, x1
    7b50:	b	7b24 <d_print_mod+0x23c>
    7b54:	tbz	w21, #2, 8378 <d_print_mod+0xa90>
    7b58:	ldp	x23, x24, [sp, #48]
    7b5c:	ldp	x19, x20, [sp, #16]
    7b60:	ldp	x21, x22, [sp, #32]
    7b64:	ldp	x29, x30, [sp], #96
    7b68:	ret
    7b6c:	ldr	x1, [x19, #256]
    7b70:	add	x0, x1, #0x1
    7b74:	cmp	x1, #0xff
    7b78:	b.ne	7ba0 <d_print_mod+0x2b8>  // b.any
    7b7c:	ldp	x3, x2, [x19, #272]
    7b80:	strb	wzr, [x19, #255]
    7b84:	mov	x0, x19
    7b88:	blr	x3
    7b8c:	ldr	x2, [x19, #320]
    7b90:	mov	x0, #0x1                   	// #1
    7b94:	mov	x1, #0x0                   	// #0
    7b98:	add	x2, x2, x0
    7b9c:	str	x2, [x19, #320]
    7ba0:	str	x0, [x19, #256]
    7ba4:	mov	w0, #0x20                  	// #32
    7ba8:	strb	w0, [x19, x1]
    7bac:	strb	w0, [x19, #264]
    7bb0:	adrp	x20, 0 <d_make_comp>
    7bb4:	add	x20, x20, #0x0
    7bb8:	mov	x0, x20
    7bbc:	bl	0 <__asan_internal_strlen>
    7bc0:	cbz	x0, 7b58 <d_print_mod+0x270>
    7bc4:	add	x22, x20, x0
    7bc8:	mov	x23, #0x1                   	// #1
    7bcc:	ldr	x1, [x19, #256]
    7bd0:	b	7c2c <d_print_mod+0x344>
    7bd4:	ldp	x3, x2, [x19, #272]
    7bd8:	strb	wzr, [x19, #255]
    7bdc:	mov	x0, x19
    7be0:	add	x20, x20, #0x1
    7be4:	blr	x3
    7be8:	strb	w21, [x19]
    7bec:	ldr	x0, [x19, #320]
    7bf0:	str	x23, [x19, #256]
    7bf4:	strb	w21, [x19, #264]
    7bf8:	cmp	x20, x22
    7bfc:	add	x0, x0, #0x1
    7c00:	str	x0, [x19, #320]
    7c04:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    7c08:	ldrb	w21, [x20]
    7c0c:	mov	x0, #0x1                   	// #1
    7c10:	add	x1, x0, #0x1
    7c14:	str	x1, [x19, #256]
    7c18:	strb	w21, [x19, x0]
    7c1c:	add	x20, x20, #0x1
    7c20:	strb	w21, [x19, #264]
    7c24:	cmp	x22, x20
    7c28:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    7c2c:	ldrb	w21, [x20]
    7c30:	cmp	x1, #0xff
    7c34:	b.eq	7bd4 <d_print_mod+0x2ec>  // b.none
    7c38:	mov	x0, x1
    7c3c:	b	7c10 <d_print_mod+0x328>
    7c40:	ldrb	w0, [x19, #264]
    7c44:	cmp	w0, #0x28
    7c48:	b.eq	7c90 <d_print_mod+0x3a8>  // b.none
    7c4c:	ldr	x1, [x19, #256]
    7c50:	add	x0, x1, #0x1
    7c54:	cmp	x1, #0xff
    7c58:	b.ne	7c80 <d_print_mod+0x398>  // b.any
    7c5c:	ldp	x3, x2, [x19, #272]
    7c60:	strb	wzr, [x19, #255]
    7c64:	mov	x0, x19
    7c68:	blr	x3
    7c6c:	ldr	x2, [x19, #320]
    7c70:	mov	x0, #0x1                   	// #1
    7c74:	mov	x1, #0x0                   	// #0
    7c78:	add	x2, x2, x0
    7c7c:	str	x2, [x19, #320]
    7c80:	str	x0, [x19, #256]
    7c84:	mov	w0, #0x20                  	// #32
    7c88:	strb	w0, [x19, x1]
    7c8c:	strb	w0, [x19, #264]
    7c90:	ldr	x20, [x20, #8]
    7c94:	cbz	x20, 84e0 <d_print_mod+0xbf8>
    7c98:	ldr	w0, [x20, #4]
    7c9c:	cmp	w0, #0x1
    7ca0:	b.gt	84e0 <d_print_mod+0xbf8>
    7ca4:	ldr	w1, [x19, #308]
    7ca8:	cmp	w1, #0x400
    7cac:	b.gt	84e0 <d_print_mod+0xbf8>
    7cb0:	ldr	x3, [x19, #328]
    7cb4:	add	w0, w0, #0x1
    7cb8:	str	w0, [x20, #4]
    7cbc:	add	w1, w1, #0x1
    7cc0:	add	x0, sp, #0x50
    7cc4:	str	w1, [x19, #308]
    7cc8:	str	x0, [x19, #328]
    7ccc:	mov	w1, w21
    7cd0:	mov	x0, x19
    7cd4:	mov	x2, x20
    7cd8:	stp	x20, x3, [sp, #80]
    7cdc:	bl	a30 <d_print_comp_inner>
    7ce0:	ldr	w1, [x20, #4]
    7ce4:	ldr	x0, [sp, #88]
    7ce8:	str	x0, [x19, #328]
    7cec:	ldr	w0, [x19, #308]
    7cf0:	sub	w1, w1, #0x1
    7cf4:	str	w1, [x20, #4]
    7cf8:	sub	w0, w0, #0x1
    7cfc:	str	w0, [x19, #308]
    7d00:	adrp	x20, 0 <d_make_comp>
    7d04:	add	x20, x20, #0x0
    7d08:	mov	x0, x20
    7d0c:	bl	0 <__asan_internal_strlen>
    7d10:	cbz	x0, 7b58 <d_print_mod+0x270>
    7d14:	add	x22, x20, x0
    7d18:	mov	x23, #0x1                   	// #1
    7d1c:	ldr	x1, [x19, #256]
    7d20:	b	7d7c <d_print_mod+0x494>
    7d24:	ldp	x3, x2, [x19, #272]
    7d28:	strb	wzr, [x19, #255]
    7d2c:	mov	x0, x19
    7d30:	add	x20, x20, #0x1
    7d34:	blr	x3
    7d38:	strb	w21, [x19]
    7d3c:	ldr	x0, [x19, #320]
    7d40:	str	x23, [x19, #256]
    7d44:	strb	w21, [x19, #264]
    7d48:	cmp	x20, x22
    7d4c:	add	x0, x0, #0x1
    7d50:	str	x0, [x19, #320]
    7d54:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    7d58:	ldrb	w21, [x20]
    7d5c:	mov	x0, #0x1                   	// #1
    7d60:	add	x1, x0, #0x1
    7d64:	str	x1, [x19, #256]
    7d68:	strb	w21, [x19, x0]
    7d6c:	add	x20, x20, #0x1
    7d70:	strb	w21, [x19, #264]
    7d74:	cmp	x22, x20
    7d78:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    7d7c:	ldrb	w21, [x20]
    7d80:	cmp	x1, #0xff
    7d84:	b.eq	7d24 <d_print_mod+0x43c>  // b.none
    7d88:	mov	x0, x1
    7d8c:	b	7d60 <d_print_mod+0x478>
    7d90:	ldr	x1, [x19, #256]
    7d94:	add	x0, x1, #0x1
    7d98:	cmp	x1, #0xff
    7d9c:	b.eq	84ac <d_print_mod+0xbc4>  // b.none
    7da0:	str	x0, [x19, #256]
    7da4:	mov	w0, #0x20                  	// #32
    7da8:	strb	w0, [x19, x1]
    7dac:	strb	w0, [x19, #264]
    7db0:	ldr	x20, [x20, #16]
    7db4:	cbz	x20, 7dd0 <d_print_mod+0x4e8>
    7db8:	ldr	w0, [x20, #4]
    7dbc:	cmp	w0, #0x1
    7dc0:	b.gt	7dd0 <d_print_mod+0x4e8>
    7dc4:	ldr	w1, [x19, #308]
    7dc8:	cmp	w1, #0x400
    7dcc:	b.le	840c <d_print_mod+0xb24>
    7dd0:	mov	w0, #0x1                   	// #1
    7dd4:	ldp	x23, x24, [sp, #48]
    7dd8:	str	w0, [x19, #304]
    7ddc:	b	7b5c <d_print_mod+0x274>
    7de0:	adrp	x22, 0 <d_make_comp>
    7de4:	add	x22, x22, #0x0
    7de8:	mov	x0, x22
    7dec:	bl	0 <__asan_internal_strlen>
    7df0:	cbz	x0, 8294 <d_print_mod+0x9ac>
    7df4:	add	x24, x22, x0
    7df8:	ldr	x1, [x19, #256]
    7dfc:	str	x25, [sp, #64]
    7e00:	mov	x25, #0x1                   	// #1
    7e04:	b	7e60 <d_print_mod+0x578>
    7e08:	ldp	x3, x2, [x19, #272]
    7e0c:	strb	wzr, [x19, #255]
    7e10:	mov	x0, x19
    7e14:	add	x22, x22, #0x1
    7e18:	blr	x3
    7e1c:	strb	w23, [x19]
    7e20:	ldr	x0, [x19, #320]
    7e24:	str	x25, [x19, #256]
    7e28:	strb	w23, [x19, #264]
    7e2c:	cmp	x22, x24
    7e30:	add	x0, x0, #0x1
    7e34:	str	x0, [x19, #320]
    7e38:	b.eq	8290 <d_print_mod+0x9a8>  // b.none
    7e3c:	ldrb	w23, [x22]
    7e40:	mov	x0, #0x1                   	// #1
    7e44:	add	x1, x0, #0x1
    7e48:	str	x1, [x19, #256]
    7e4c:	strb	w23, [x19, x0]
    7e50:	add	x22, x22, #0x1
    7e54:	strb	w23, [x19, #264]
    7e58:	cmp	x24, x22
    7e5c:	b.eq	8290 <d_print_mod+0x9a8>  // b.none
    7e60:	ldrb	w23, [x22]
    7e64:	cmp	x1, #0xff
    7e68:	b.eq	7e08 <d_print_mod+0x520>  // b.none
    7e6c:	mov	x0, x1
    7e70:	b	7e44 <d_print_mod+0x55c>
    7e74:	adrp	x20, 0 <d_make_comp>
    7e78:	add	x20, x20, #0x0
    7e7c:	mov	x0, x20
    7e80:	bl	0 <__asan_internal_strlen>
    7e84:	cbz	x0, 7b58 <d_print_mod+0x270>
    7e88:	add	x22, x20, x0
    7e8c:	mov	x23, #0x1                   	// #1
    7e90:	ldr	x1, [x19, #256]
    7e94:	b	7ef0 <d_print_mod+0x608>
    7e98:	ldp	x3, x2, [x19, #272]
    7e9c:	strb	wzr, [x19, #255]
    7ea0:	mov	x0, x19
    7ea4:	add	x20, x20, #0x1
    7ea8:	blr	x3
    7eac:	strb	w21, [x19]
    7eb0:	ldr	x0, [x19, #320]
    7eb4:	str	x23, [x19, #256]
    7eb8:	strb	w21, [x19, #264]
    7ebc:	cmp	x20, x22
    7ec0:	add	x0, x0, #0x1
    7ec4:	str	x0, [x19, #320]
    7ec8:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    7ecc:	ldrb	w21, [x20]
    7ed0:	mov	x0, #0x1                   	// #1
    7ed4:	add	x1, x0, #0x1
    7ed8:	str	x1, [x19, #256]
    7edc:	strb	w21, [x19, x0]
    7ee0:	add	x20, x20, #0x1
    7ee4:	strb	w21, [x19, #264]
    7ee8:	cmp	x22, x20
    7eec:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    7ef0:	ldrb	w21, [x20]
    7ef4:	cmp	x1, #0xff
    7ef8:	b.eq	7e98 <d_print_mod+0x5b0>  // b.none
    7efc:	mov	x0, x1
    7f00:	b	7ed4 <d_print_mod+0x5ec>
    7f04:	adrp	x20, 0 <d_make_comp>
    7f08:	add	x20, x20, #0x0
    7f0c:	mov	x0, x20
    7f10:	bl	0 <__asan_internal_strlen>
    7f14:	cbz	x0, 7b58 <d_print_mod+0x270>
    7f18:	add	x22, x20, x0
    7f1c:	mov	x23, #0x1                   	// #1
    7f20:	ldr	x1, [x19, #256]
    7f24:	b	7f80 <d_print_mod+0x698>
    7f28:	ldp	x3, x2, [x19, #272]
    7f2c:	strb	wzr, [x19, #255]
    7f30:	mov	x0, x19
    7f34:	add	x20, x20, #0x1
    7f38:	blr	x3
    7f3c:	strb	w21, [x19]
    7f40:	ldr	x0, [x19, #320]
    7f44:	str	x23, [x19, #256]
    7f48:	strb	w21, [x19, #264]
    7f4c:	cmp	x20, x22
    7f50:	add	x0, x0, #0x1
    7f54:	str	x0, [x19, #320]
    7f58:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    7f5c:	ldrb	w21, [x20]
    7f60:	mov	x0, #0x1                   	// #1
    7f64:	add	x1, x0, #0x1
    7f68:	str	x1, [x19, #256]
    7f6c:	strb	w21, [x19, x0]
    7f70:	add	x20, x20, #0x1
    7f74:	strb	w21, [x19, #264]
    7f78:	cmp	x22, x20
    7f7c:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    7f80:	ldrb	w21, [x20]
    7f84:	cmp	x1, #0xff
    7f88:	b.eq	7f28 <d_print_mod+0x640>  // b.none
    7f8c:	mov	x0, x1
    7f90:	b	7f64 <d_print_mod+0x67c>
    7f94:	adrp	x22, 0 <d_make_comp>
    7f98:	add	x22, x22, #0x0
    7f9c:	mov	x0, x22
    7fa0:	bl	0 <__asan_internal_strlen>
    7fa4:	cbz	x0, 81b4 <d_print_mod+0x8cc>
    7fa8:	add	x24, x22, x0
    7fac:	ldr	x1, [x19, #256]
    7fb0:	str	x25, [sp, #64]
    7fb4:	mov	x25, #0x1                   	// #1
    7fb8:	b	8014 <d_print_mod+0x72c>
    7fbc:	ldp	x3, x2, [x19, #272]
    7fc0:	strb	wzr, [x19, #255]
    7fc4:	mov	x0, x19
    7fc8:	add	x22, x22, #0x1
    7fcc:	blr	x3
    7fd0:	strb	w23, [x19]
    7fd4:	ldr	x0, [x19, #320]
    7fd8:	str	x25, [x19, #256]
    7fdc:	strb	w23, [x19, #264]
    7fe0:	cmp	x22, x24
    7fe4:	add	x0, x0, #0x1
    7fe8:	str	x0, [x19, #320]
    7fec:	b.eq	84ec <d_print_mod+0xc04>  // b.none
    7ff0:	ldrb	w23, [x22]
    7ff4:	mov	x0, #0x1                   	// #1
    7ff8:	add	x1, x0, #0x1
    7ffc:	str	x1, [x19, #256]
    8000:	strb	w23, [x19, x0]
    8004:	add	x22, x22, #0x1
    8008:	strb	w23, [x19, #264]
    800c:	cmp	x24, x22
    8010:	b.eq	81b0 <d_print_mod+0x8c8>  // b.none
    8014:	ldrb	w23, [x22]
    8018:	cmp	x1, #0xff
    801c:	b.eq	7fbc <d_print_mod+0x6d4>  // b.none
    8020:	mov	x0, x1
    8024:	b	7ff8 <d_print_mod+0x710>
    8028:	ldr	x20, [x2, #8]
    802c:	cbnz	x20, 7db8 <d_print_mod+0x4d0>
    8030:	b	7dd0 <d_print_mod+0x4e8>
    8034:	ldr	x0, [x19, #256]
    8038:	cmp	x0, #0xff
    803c:	b.eq	847c <d_print_mod+0xb94>  // b.none
    8040:	add	x1, x0, #0x1
    8044:	str	x1, [x19, #256]
    8048:	mov	w2, #0x20                  	// #32
    804c:	strb	w2, [x19, x0]
    8050:	strb	w2, [x19, #264]
    8054:	b	8180 <d_print_mod+0x898>
    8058:	adrp	x22, 0 <d_make_comp>
    805c:	add	x22, x22, #0x0
    8060:	mov	x0, x22
    8064:	bl	0 <__asan_internal_strlen>
    8068:	cbz	x0, 81b4 <d_print_mod+0x8cc>
    806c:	add	x24, x22, x0
    8070:	ldr	x1, [x19, #256]
    8074:	str	x25, [sp, #64]
    8078:	mov	x25, #0x1                   	// #1
    807c:	b	80d8 <d_print_mod+0x7f0>
    8080:	ldp	x3, x2, [x19, #272]
    8084:	strb	wzr, [x19, #255]
    8088:	mov	x0, x19
    808c:	add	x22, x22, #0x1
    8090:	blr	x3
    8094:	strb	w23, [x19]
    8098:	ldr	x0, [x19, #320]
    809c:	str	x25, [x19, #256]
    80a0:	strb	w23, [x19, #264]
    80a4:	cmp	x24, x22
    80a8:	add	x0, x0, #0x1
    80ac:	str	x0, [x19, #320]
    80b0:	b.eq	84ec <d_print_mod+0xc04>  // b.none
    80b4:	ldrb	w23, [x22]
    80b8:	mov	x0, #0x1                   	// #1
    80bc:	add	x1, x0, #0x1
    80c0:	str	x1, [x19, #256]
    80c4:	strb	w23, [x19, x0]
    80c8:	add	x22, x22, #0x1
    80cc:	strb	w23, [x19, #264]
    80d0:	cmp	x24, x22
    80d4:	b.eq	81b0 <d_print_mod+0x8c8>  // b.none
    80d8:	ldrb	w23, [x22]
    80dc:	cmp	x1, #0xff
    80e0:	b.eq	8080 <d_print_mod+0x798>  // b.none
    80e4:	mov	x0, x1
    80e8:	b	80bc <d_print_mod+0x7d4>
    80ec:	adrp	x20, 0 <d_make_comp>
    80f0:	add	x20, x20, #0x0
    80f4:	mov	x0, x20
    80f8:	bl	0 <__asan_internal_strlen>
    80fc:	cbz	x0, 7b58 <d_print_mod+0x270>
    8100:	add	x22, x20, x0
    8104:	mov	x23, #0x1                   	// #1
    8108:	ldr	x1, [x19, #256]
    810c:	b	8168 <d_print_mod+0x880>
    8110:	ldp	x3, x2, [x19, #272]
    8114:	strb	wzr, [x19, #255]
    8118:	mov	x0, x19
    811c:	add	x20, x20, #0x1
    8120:	blr	x3
    8124:	strb	w21, [x19]
    8128:	ldr	x0, [x19, #320]
    812c:	str	x23, [x19, #256]
    8130:	strb	w21, [x19, #264]
    8134:	cmp	x22, x20
    8138:	add	x0, x0, #0x1
    813c:	str	x0, [x19, #320]
    8140:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    8144:	ldrb	w21, [x20]
    8148:	mov	x0, #0x1                   	// #1
    814c:	add	x1, x0, #0x1
    8150:	str	x1, [x19, #256]
    8154:	strb	w21, [x19, x0]
    8158:	add	x20, x20, #0x1
    815c:	strb	w21, [x19, #264]
    8160:	cmp	x22, x20
    8164:	b.eq	7b58 <d_print_mod+0x270>  // b.none
    8168:	ldrb	w21, [x20]
    816c:	cmp	x1, #0xff
    8170:	b.eq	8110 <d_print_mod+0x828>  // b.none
    8174:	mov	x0, x1
    8178:	b	814c <d_print_mod+0x864>
    817c:	ldr	x1, [x19, #256]
    8180:	cmp	x1, #0xff
    8184:	b.eq	8350 <d_print_mod+0xa68>  // b.none
    8188:	add	x0, x1, #0x1
    818c:	str	x0, [x19, #256]
    8190:	mov	w0, #0x26                  	// #38
    8194:	strb	w0, [x19, x1]
    8198:	strb	w0, [x19, #264]
    819c:	ldp	x19, x20, [sp, #16]
    81a0:	ldp	x21, x22, [sp, #32]
    81a4:	ldp	x23, x24, [sp, #48]
    81a8:	ldp	x29, x30, [sp], #96
    81ac:	ret
    81b0:	ldr	x25, [sp, #64]
    81b4:	ldr	x22, [x20, #16]
    81b8:	cbz	x22, 7b58 <d_print_mod+0x270>
    81bc:	ldr	x1, [x19, #256]
    81c0:	cmp	x1, #0xff
    81c4:	b.eq	83c4 <d_print_mod+0xadc>  // b.none
    81c8:	add	x0, x1, #0x1
    81cc:	str	x0, [x19, #256]
    81d0:	mov	w2, #0x28                  	// #40
    81d4:	strb	w2, [x19, x1]
    81d8:	strb	w2, [x19, #264]
    81dc:	ldr	w1, [x22, #4]
    81e0:	cmp	w1, #0x1
    81e4:	b.gt	8464 <d_print_mod+0xb7c>
    81e8:	ldr	w2, [x19, #308]
    81ec:	cmp	w2, #0x400
    81f0:	b.gt	8464 <d_print_mod+0xb7c>
    81f4:	ldr	x3, [x19, #328]
    81f8:	add	w1, w1, #0x1
    81fc:	str	w1, [x22, #4]
    8200:	add	w2, w2, #0x1
    8204:	add	x0, sp, #0x50
    8208:	str	w2, [x19, #308]
    820c:	str	x0, [x19, #328]
    8210:	mov	w1, w21
    8214:	mov	x2, x22
    8218:	mov	x0, x19
    821c:	stp	x22, x3, [sp, #80]
    8220:	bl	a30 <d_print_comp_inner>
    8224:	ldr	w2, [x22, #4]
    8228:	ldr	x0, [sp, #88]
    822c:	str	x0, [x19, #328]
    8230:	ldr	w1, [x19, #308]
    8234:	sub	w2, w2, #0x1
    8238:	ldr	x0, [x19, #256]
    823c:	str	w2, [x22, #4]
    8240:	sub	w1, w1, #0x1
    8244:	str	w1, [x19, #308]
    8248:	cmp	x0, #0xff
    824c:	b.ne	8404 <d_print_mod+0xb1c>  // b.any
    8250:	ldp	x3, x2, [x19, #272]
    8254:	strb	wzr, [x19, #255]
    8258:	mov	x1, x0
    825c:	mov	x0, x19
    8260:	blr	x3
    8264:	ldr	x2, [x19, #320]
    8268:	mov	x1, #0x1                   	// #1
    826c:	mov	x0, #0x0                   	// #0
    8270:	add	x2, x2, x1
    8274:	str	x2, [x19, #320]
    8278:	str	x1, [x19, #256]
    827c:	mov	w1, #0x29                  	// #41
    8280:	strb	w1, [x19, x0]
    8284:	strb	w1, [x19, #264]
    8288:	ldp	x23, x24, [sp, #48]
    828c:	b	7b5c <d_print_mod+0x274>
    8290:	ldr	x25, [sp, #64]
    8294:	ldr	x20, [x20, #8]
    8298:	cbz	x20, 84d4 <d_print_mod+0xbec>
    829c:	ldr	w0, [x20, #4]
    82a0:	cmp	w0, #0x1
    82a4:	b.gt	84d4 <d_print_mod+0xbec>
    82a8:	ldr	w1, [x19, #308]
    82ac:	cmp	w1, #0x400
    82b0:	b.gt	84d4 <d_print_mod+0xbec>
    82b4:	ldr	x3, [x19, #328]
    82b8:	add	w0, w0, #0x1
    82bc:	str	w0, [x20, #4]
    82c0:	add	w1, w1, #0x1
    82c4:	add	x0, sp, #0x50
    82c8:	str	w1, [x19, #308]
    82cc:	str	x0, [x19, #328]
    82d0:	mov	w1, w21
    82d4:	mov	x0, x19
    82d8:	mov	x2, x20
    82dc:	stp	x20, x3, [sp, #80]
    82e0:	bl	a30 <d_print_comp_inner>
    82e4:	ldr	w1, [x20, #4]
    82e8:	ldr	x0, [sp, #88]
    82ec:	str	x0, [x19, #328]
    82f0:	ldr	w0, [x19, #308]
    82f4:	sub	w1, w1, #0x1
    82f8:	str	w1, [x20, #4]
    82fc:	sub	w0, w0, #0x1
    8300:	str	w0, [x19, #308]
    8304:	ldr	x1, [x19, #256]
    8308:	add	x0, x1, #0x1
    830c:	cmp	x1, #0xff
    8310:	b.ne	8338 <d_print_mod+0xa50>  // b.any
    8314:	ldp	x3, x2, [x19, #272]
    8318:	strb	wzr, [x19, #255]
    831c:	mov	x0, x19
    8320:	blr	x3
    8324:	ldr	x2, [x19, #320]
    8328:	mov	x0, #0x1                   	// #1
    832c:	mov	x1, #0x0                   	// #0
    8330:	add	x2, x2, x0
    8334:	str	x2, [x19, #320]
    8338:	str	x0, [x19, #256]
    833c:	mov	w0, #0x29                  	// #41
    8340:	strb	w0, [x19, x1]
    8344:	strb	w0, [x19, #264]
    8348:	ldp	x23, x24, [sp, #48]
    834c:	b	7b5c <d_print_mod+0x274>
    8350:	ldp	x3, x2, [x19, #272]
    8354:	strb	wzr, [x19, #255]
    8358:	mov	x0, x19
    835c:	blr	x3
    8360:	ldr	x2, [x19, #320]
    8364:	mov	x0, #0x1                   	// #1
    8368:	mov	x1, #0x0                   	// #0
    836c:	add	x2, x2, x0
    8370:	str	x2, [x19, #320]
    8374:	b	818c <d_print_mod+0x8a4>
    8378:	ldr	x1, [x19, #256]
    837c:	add	x0, x1, #0x1
    8380:	cmp	x1, #0xff
    8384:	b.ne	83ac <d_print_mod+0xac4>  // b.any
    8388:	ldp	x3, x2, [x19, #272]
    838c:	strb	wzr, [x19, #255]
    8390:	mov	x0, x19
    8394:	blr	x3
    8398:	ldr	x2, [x19, #320]
    839c:	mov	x0, #0x1                   	// #1
    83a0:	mov	x1, #0x0                   	// #0
    83a4:	add	x2, x2, x0
    83a8:	str	x2, [x19, #320]
    83ac:	str	x0, [x19, #256]
    83b0:	mov	w0, #0x2a                  	// #42
    83b4:	strb	w0, [x19, x1]
    83b8:	strb	w0, [x19, #264]
    83bc:	ldp	x23, x24, [sp, #48]
    83c0:	b	7b5c <d_print_mod+0x274>
    83c4:	ldp	x3, x2, [x19, #272]
    83c8:	strb	wzr, [x19, #255]
    83cc:	mov	x0, x19
    83d0:	blr	x3
    83d4:	ldr	x0, [x19, #320]
    83d8:	mov	x2, #0x1                   	// #1
    83dc:	ldr	x22, [x20, #16]
    83e0:	mov	w1, #0x28                  	// #40
    83e4:	add	x0, x0, x2
    83e8:	strb	w1, [x19]
    83ec:	str	x2, [x19, #256]
    83f0:	strb	w1, [x19, #264]
    83f4:	str	x0, [x19, #320]
    83f8:	cbnz	x22, 8500 <d_print_mod+0xc18>
    83fc:	mov	x0, x2
    8400:	str	w2, [x19, #304]
    8404:	add	x1, x0, #0x1
    8408:	b	8278 <d_print_mod+0x990>
    840c:	ldr	x3, [x19, #328]
    8410:	add	w0, w0, #0x1
    8414:	str	w0, [x20, #4]
    8418:	add	w1, w1, #0x1
    841c:	add	x0, sp, #0x50
    8420:	str	w1, [x19, #308]
    8424:	str	x0, [x19, #328]
    8428:	mov	w1, w21
    842c:	mov	x0, x19
    8430:	mov	x2, x20
    8434:	stp	x20, x3, [sp, #80]
    8438:	bl	a30 <d_print_comp_inner>
    843c:	ldr	w1, [x20, #4]
    8440:	ldr	x0, [sp, #88]
    8444:	sub	w1, w1, #0x1
    8448:	ldp	x23, x24, [sp, #48]
    844c:	str	x0, [x19, #328]
    8450:	ldr	w0, [x19, #308]
    8454:	str	w1, [x20, #4]
    8458:	sub	w0, w0, #0x1
    845c:	str	w0, [x19, #308]
    8460:	b	7b5c <d_print_mod+0x274>
    8464:	mov	w1, #0x1                   	// #1
    8468:	str	w1, [x19, #304]
    846c:	b	8248 <d_print_mod+0x960>
    8470:	mov	w0, #0x1                   	// #1
    8474:	str	w0, [x19, #304]
    8478:	b	7b5c <d_print_mod+0x274>
    847c:	ldp	x3, x2, [x19, #272]
    8480:	strb	wzr, [x19, #255]
    8484:	mov	x1, x0
    8488:	mov	x0, x19
    848c:	blr	x3
    8490:	ldr	x0, [x19, #320]
    8494:	mov	w2, #0x20                  	// #32
    8498:	mov	x1, #0x1                   	// #1
    849c:	strb	w2, [x19]
    84a0:	add	x0, x0, x1
    84a4:	str	x0, [x19, #320]
    84a8:	b	8188 <d_print_mod+0x8a0>
    84ac:	ldp	x3, x2, [x19, #272]
    84b0:	strb	wzr, [x19, #255]
    84b4:	mov	x0, x19
    84b8:	blr	x3
    84bc:	ldr	x2, [x19, #320]
    84c0:	mov	x0, #0x1                   	// #1
    84c4:	mov	x1, #0x0                   	// #0
    84c8:	add	x2, x2, x0
    84cc:	str	x2, [x19, #320]
    84d0:	b	7da0 <d_print_mod+0x4b8>
    84d4:	mov	w0, #0x1                   	// #1
    84d8:	str	w0, [x19, #304]
    84dc:	b	8304 <d_print_mod+0xa1c>
    84e0:	mov	w0, #0x1                   	// #1
    84e4:	str	w0, [x19, #304]
    84e8:	b	7d00 <d_print_mod+0x418>
    84ec:	ldr	x22, [x20, #16]
    84f0:	mov	x1, #0x1                   	// #1
    84f4:	cbz	x22, 851c <d_print_mod+0xc34>
    84f8:	ldr	x25, [sp, #64]
    84fc:	b	81c8 <d_print_mod+0x8e0>
    8500:	ldr	w1, [x22, #4]
    8504:	mov	x0, x2
    8508:	cmp	w1, #0x1
    850c:	b.le	81e8 <d_print_mod+0x900>
    8510:	add	x1, x0, #0x1
    8514:	str	w2, [x19, #304]
    8518:	b	8278 <d_print_mod+0x990>
    851c:	ldp	x23, x24, [sp, #48]
    8520:	ldr	x25, [sp, #64]
    8524:	b	7b5c <d_print_mod+0x274>

0000000000008528 <d_print_mod_list>:
    8528:	cbz	x2, 8ad0 <d_print_mod_list+0x5a8>
    852c:	stp	x29, x30, [sp, #-112]!
    8530:	mov	x29, sp
    8534:	stp	x19, x20, [sp, #16]
    8538:	mov	x20, x0
    853c:	mov	x19, x2
    8540:	stp	x21, x22, [sp, #32]
    8544:	mov	w21, w1
    8548:	mov	w22, #0x1                   	// #1
    854c:	stp	x25, x26, [sp, #64]
    8550:	cbnz	w3, 8644 <d_print_mod_list+0x11c>
    8554:	mov	x22, #0x1f                  	// #31
    8558:	stp	x23, x24, [sp, #48]
    855c:	movk	x22, #0x1a, lsl #48
    8560:	mov	w24, #0x1                   	// #1
    8564:	mov	x23, #0x1                   	// #1
    8568:	b	85d0 <d_print_mod_list+0xa8>
    856c:	ldr	w2, [x19, #16]
    8570:	cbnz	w2, 85c8 <d_print_mod_list+0xa0>
    8574:	ldr	x4, [x19, #8]
    8578:	mov	x2, x4
    857c:	ldr	w5, [x4]
    8580:	sub	w3, w5, #0x1c
    8584:	cmp	w3, #0x34
    8588:	b.hi	8598 <d_print_mod_list+0x70>  // b.pmore
    858c:	lsl	x3, x23, x3
    8590:	tst	x3, x22
    8594:	b.ne	85c8 <d_print_mod_list+0xa0>  // b.any
    8598:	ldr	x3, [x19, #24]
    859c:	cmp	w5, #0x29
    85a0:	ldr	x25, [x20, #288]
    85a4:	str	w24, [x19, #16]
    85a8:	str	x3, [x20, #288]
    85ac:	b.eq	8668 <d_print_mod_list+0x140>  // b.none
    85b0:	cmp	w5, #0x2a
    85b4:	b.eq	8698 <d_print_mod_list+0x170>  // b.none
    85b8:	cmp	w5, #0x2
    85bc:	b.eq	86cc <d_print_mod_list+0x1a4>  // b.none
    85c0:	bl	78e8 <d_print_mod>
    85c4:	str	x25, [x20, #288]
    85c8:	ldr	x19, [x19]
    85cc:	cbz	x19, 85e0 <d_print_mod_list+0xb8>
    85d0:	ldr	w2, [x20, #304]
    85d4:	mov	w1, w21
    85d8:	mov	x0, x20
    85dc:	cbz	w2, 856c <d_print_mod_list+0x44>
    85e0:	ldp	x23, x24, [sp, #48]
    85e4:	ldp	x19, x20, [sp, #16]
    85e8:	ldp	x21, x22, [sp, #32]
    85ec:	ldp	x25, x26, [sp, #64]
    85f0:	ldp	x29, x30, [sp], #112
    85f4:	ret
    85f8:	ldr	w2, [x19, #16]
    85fc:	cbnz	w2, 863c <d_print_mod_list+0x114>
    8600:	ldr	x4, [x19, #8]
    8604:	ldr	x5, [x19, #24]
    8608:	mov	x2, x4
    860c:	ldr	w3, [x4]
    8610:	ldr	x25, [x20, #288]
    8614:	str	w22, [x19, #16]
    8618:	str	x5, [x20, #288]
    861c:	cmp	w3, #0x29
    8620:	b.eq	866c <d_print_mod_list+0x144>  // b.none
    8624:	cmp	w3, #0x2a
    8628:	b.eq	869c <d_print_mod_list+0x174>  // b.none
    862c:	cmp	w3, #0x2
    8630:	b.eq	86c8 <d_print_mod_list+0x1a0>  // b.none
    8634:	bl	78e8 <d_print_mod>
    8638:	str	x25, [x20, #288]
    863c:	ldr	x19, [x19]
    8640:	cbz	x19, 85e4 <d_print_mod_list+0xbc>
    8644:	ldr	w2, [x20, #304]
    8648:	mov	w1, w21
    864c:	mov	x0, x20
    8650:	cbz	w2, 85f8 <d_print_mod_list+0xd0>
    8654:	ldp	x19, x20, [sp, #16]
    8658:	ldp	x21, x22, [sp, #32]
    865c:	ldp	x25, x26, [sp, #64]
    8660:	ldp	x29, x30, [sp], #112
    8664:	ret
    8668:	ldp	x23, x24, [sp, #48]
    866c:	mov	w1, w21
    8670:	ldr	x3, [x19]
    8674:	mov	x0, x20
    8678:	add	x2, x4, #0x10
    867c:	bl	8e28 <d_print_function_type.isra.0>
    8680:	str	x25, [x20, #288]
    8684:	ldp	x19, x20, [sp, #16]
    8688:	ldp	x21, x22, [sp, #32]
    868c:	ldp	x25, x26, [sp, #64]
    8690:	ldp	x29, x30, [sp], #112
    8694:	ret
    8698:	ldp	x23, x24, [sp, #48]
    869c:	mov	w1, w21
    86a0:	ldr	x3, [x19]
    86a4:	mov	x0, x20
    86a8:	add	x2, x4, #0x8
    86ac:	bl	8ad8 <d_print_array_type.isra.0>
    86b0:	str	x25, [x20, #288]
    86b4:	ldp	x19, x20, [sp, #16]
    86b8:	ldp	x21, x22, [sp, #32]
    86bc:	ldp	x25, x26, [sp, #64]
    86c0:	ldp	x29, x30, [sp], #112
    86c4:	ret
    86c8:	stp	x23, x24, [sp, #48]
    86cc:	ldr	x22, [x4, #8]
    86d0:	ldr	x23, [x20, #296]
    86d4:	str	xzr, [x20, #296]
    86d8:	cbz	x22, 86f4 <d_print_mod_list+0x1cc>
    86dc:	ldr	w0, [x22, #4]
    86e0:	cmp	w0, #0x1
    86e4:	b.gt	86f4 <d_print_mod_list+0x1cc>
    86e8:	ldr	w1, [x20, #308]
    86ec:	cmp	w1, #0x400
    86f0:	b.le	881c <d_print_mod_list+0x2f4>
    86f4:	mov	w0, #0x1                   	// #1
    86f8:	str	w0, [x20, #304]
    86fc:	str	x23, [x20, #296]
    8700:	tbz	w21, #2, 8870 <d_print_mod_list+0x348>
    8704:	ldr	x1, [x20, #256]
    8708:	add	x0, x1, #0x1
    870c:	cmp	x1, #0xff
    8710:	b.ne	8738 <d_print_mod_list+0x210>  // b.any
    8714:	ldp	x3, x2, [x20, #272]
    8718:	strb	wzr, [x20, #255]
    871c:	mov	x0, x20
    8720:	blr	x3
    8724:	ldr	x2, [x20, #320]
    8728:	mov	x0, #0x1                   	// #1
    872c:	mov	x1, #0x0                   	// #0
    8730:	add	x2, x2, x0
    8734:	str	x2, [x20, #320]
    8738:	str	x0, [x20, #256]
    873c:	mov	w0, #0x2e                  	// #46
    8740:	strb	w0, [x20, x1]
    8744:	strb	w0, [x20, #264]
    8748:	ldr	x0, [x19, #8]
    874c:	ldr	x22, [x0, #16]
    8750:	ldr	w0, [x22]
    8754:	cmp	w0, #0x47
    8758:	b.eq	8900 <d_print_mod_list+0x3d8>  // b.none
    875c:	mov	x1, #0x1f                  	// #31
    8760:	mov	x2, #0x1                   	// #1
    8764:	movk	x1, #0x1a, lsl #48
    8768:	sub	w0, w0, #0x1c
    876c:	cmp	w0, #0x34
    8770:	b.hi	8780 <d_print_mod_list+0x258>  // b.pmore
    8774:	lsl	x0, x2, x0
    8778:	tst	x0, x1
    877c:	b.ne	87bc <d_print_mod_list+0x294>  // b.any
    8780:	ldr	w0, [x22, #4]
    8784:	cmp	w0, #0x1
    8788:	b.gt	8798 <d_print_mod_list+0x270>
    878c:	ldr	w1, [x20, #308]
    8790:	cmp	w1, #0x400
    8794:	b.le	87c8 <d_print_mod_list+0x2a0>
    8798:	mov	w0, #0x1                   	// #1
    879c:	str	w0, [x20, #304]
    87a0:	ldp	x23, x24, [sp, #48]
    87a4:	str	x25, [x20, #288]
    87a8:	ldp	x19, x20, [sp, #16]
    87ac:	ldp	x21, x22, [sp, #32]
    87b0:	ldp	x25, x26, [sp, #64]
    87b4:	ldp	x29, x30, [sp], #112
    87b8:	ret
    87bc:	ldr	x22, [x22, #8]
    87c0:	ldr	w0, [x22]
    87c4:	b	8768 <d_print_mod_list+0x240>
    87c8:	ldr	x3, [x20, #328]
    87cc:	add	w0, w0, #0x1
    87d0:	str	w0, [x22, #4]
    87d4:	add	w1, w1, #0x1
    87d8:	add	x0, sp, #0x50
    87dc:	str	w1, [x20, #308]
    87e0:	str	x0, [x20, #328]
    87e4:	mov	w1, w21
    87e8:	mov	x0, x20
    87ec:	mov	x2, x22
    87f0:	stp	x22, x3, [sp, #80]
    87f4:	bl	a30 <d_print_comp_inner>
    87f8:	ldr	w1, [x22, #4]
    87fc:	ldr	x0, [sp, #88]
    8800:	str	x0, [x20, #328]
    8804:	ldr	w0, [x20, #308]
    8808:	sub	w1, w1, #0x1
    880c:	str	w1, [x22, #4]
    8810:	sub	w0, w0, #0x1
    8814:	str	w0, [x20, #308]
    8818:	b	87a0 <d_print_mod_list+0x278>
    881c:	ldr	x3, [x20, #328]
    8820:	add	w0, w0, #0x1
    8824:	str	w0, [x22, #4]
    8828:	add	w1, w1, #0x1
    882c:	add	x0, sp, #0x50
    8830:	str	w1, [x20, #308]
    8834:	str	x0, [x20, #328]
    8838:	mov	w1, w21
    883c:	mov	x0, x20
    8840:	mov	x2, x22
    8844:	stp	x22, x3, [sp, #80]
    8848:	bl	a30 <d_print_comp_inner>
    884c:	ldr	w1, [x22, #4]
    8850:	ldr	x0, [sp, #88]
    8854:	str	x0, [x20, #328]
    8858:	ldr	w0, [x20, #308]
    885c:	sub	w1, w1, #0x1
    8860:	str	w1, [x22, #4]
    8864:	sub	w0, w0, #0x1
    8868:	str	w0, [x20, #308]
    886c:	b	86fc <d_print_mod_list+0x1d4>
    8870:	adrp	x22, 0 <d_make_comp>
    8874:	add	x22, x22, #0x0
    8878:	mov	x0, x22
    887c:	bl	0 <__asan_internal_strlen>
    8880:	cbz	x0, 8748 <d_print_mod_list+0x220>
    8884:	add	x24, x22, x0
    8888:	mov	x26, #0x1                   	// #1
    888c:	ldr	x1, [x20, #256]
    8890:	b	88e8 <d_print_mod_list+0x3c0>
    8894:	ldp	x3, x2, [x20, #272]
    8898:	strb	wzr, [x20, #255]
    889c:	add	x22, x22, #0x1
    88a0:	blr	x3
    88a4:	strb	w23, [x20]
    88a8:	ldr	x0, [x20, #320]
    88ac:	str	x26, [x20, #256]
    88b0:	strb	w23, [x20, #264]
    88b4:	cmp	x24, x22
    88b8:	add	x0, x0, #0x1
    88bc:	str	x0, [x20, #320]
    88c0:	mov	x0, #0x1                   	// #1
    88c4:	b.eq	8748 <d_print_mod_list+0x220>  // b.none
    88c8:	ldrb	w23, [x22]
    88cc:	add	x1, x0, #0x1
    88d0:	str	x1, [x20, #256]
    88d4:	strb	w23, [x20, x0]
    88d8:	add	x22, x22, #0x1
    88dc:	strb	w23, [x20, #264]
    88e0:	cmp	x24, x22
    88e4:	b.eq	8748 <d_print_mod_list+0x220>  // b.none
    88e8:	ldrb	w23, [x22]
    88ec:	mov	x0, x20
    88f0:	cmp	x1, #0xff
    88f4:	b.eq	8894 <d_print_mod_list+0x36c>  // b.none
    88f8:	mov	x0, x1
    88fc:	b	88cc <d_print_mod_list+0x3a4>
    8900:	adrp	x19, 0 <d_make_comp>
    8904:	add	x19, x19, #0x0
    8908:	mov	x0, x19
    890c:	bl	0 <__asan_internal_strlen>
    8910:	cbz	x0, 8990 <d_print_mod_list+0x468>
    8914:	add	x24, x19, x0
    8918:	mov	x26, #0x1                   	// #1
    891c:	ldr	x1, [x20, #256]
    8920:	b	8978 <d_print_mod_list+0x450>
    8924:	ldp	x3, x2, [x20, #272]
    8928:	strb	wzr, [x20, #255]
    892c:	add	x19, x19, #0x1
    8930:	blr	x3
    8934:	strb	w23, [x20]
    8938:	ldr	x0, [x20, #320]
    893c:	str	x26, [x20, #256]
    8940:	strb	w23, [x20, #264]
    8944:	cmp	x19, x24
    8948:	add	x0, x0, #0x1
    894c:	str	x0, [x20, #320]
    8950:	mov	x0, #0x1                   	// #1
    8954:	b.eq	8990 <d_print_mod_list+0x468>  // b.none
    8958:	ldrb	w23, [x19]
    895c:	add	x1, x0, #0x1
    8960:	str	x1, [x20, #256]
    8964:	strb	w23, [x20, x0]
    8968:	add	x19, x19, #0x1
    896c:	strb	w23, [x20, #264]
    8970:	cmp	x24, x19
    8974:	b.eq	8990 <d_print_mod_list+0x468>  // b.none
    8978:	ldrb	w23, [x19]
    897c:	mov	x0, x20
    8980:	cmp	x1, #0xff
    8984:	b.eq	8924 <d_print_mod_list+0x3fc>  // b.none
    8988:	mov	x0, x1
    898c:	b	895c <d_print_mod_list+0x434>
    8990:	ldr	w2, [x22, #16]
    8994:	adrp	x1, 0 <d_make_comp>
    8998:	add	x1, x1, #0x0
    899c:	add	x19, sp, #0x50
    89a0:	add	w2, w2, #0x1
    89a4:	mov	x0, x19
    89a8:	bl	0 <sprintf>
    89ac:	mov	x0, x19
    89b0:	bl	0 <__asan_internal_strlen>
    89b4:	cbz	x0, 8a34 <d_print_mod_list+0x50c>
    89b8:	add	x24, x19, x0
    89bc:	mov	x26, #0x1                   	// #1
    89c0:	ldr	x1, [x20, #256]
    89c4:	b	8a1c <d_print_mod_list+0x4f4>
    89c8:	ldp	x3, x2, [x20, #272]
    89cc:	strb	wzr, [x20, #255]
    89d0:	add	x19, x19, #0x1
    89d4:	blr	x3
    89d8:	strb	w23, [x20]
    89dc:	ldr	x0, [x20, #320]
    89e0:	str	x26, [x20, #256]
    89e4:	strb	w23, [x20, #264]
    89e8:	cmp	x24, x19
    89ec:	add	x0, x0, #0x1
    89f0:	str	x0, [x20, #320]
    89f4:	mov	x0, #0x1                   	// #1
    89f8:	b.eq	8a34 <d_print_mod_list+0x50c>  // b.none
    89fc:	ldrb	w23, [x19]
    8a00:	add	x1, x0, #0x1
    8a04:	str	x1, [x20, #256]
    8a08:	strb	w23, [x20, x0]
    8a0c:	add	x19, x19, #0x1
    8a10:	strb	w23, [x20, #264]
    8a14:	cmp	x24, x19
    8a18:	b.eq	8a34 <d_print_mod_list+0x50c>  // b.none
    8a1c:	ldrb	w23, [x19]
    8a20:	mov	x0, x20
    8a24:	cmp	x1, #0xff
    8a28:	b.eq	89c8 <d_print_mod_list+0x4a0>  // b.none
    8a2c:	mov	x0, x1
    8a30:	b	8a00 <d_print_mod_list+0x4d8>
    8a34:	adrp	x19, 0 <d_make_comp>
    8a38:	add	x19, x19, #0x0
    8a3c:	mov	x0, x19
    8a40:	bl	0 <__asan_internal_strlen>
    8a44:	cbz	x0, 8ac4 <d_print_mod_list+0x59c>
    8a48:	add	x24, x19, x0
    8a4c:	mov	x26, #0x1                   	// #1
    8a50:	ldr	x1, [x20, #256]
    8a54:	b	8aac <d_print_mod_list+0x584>
    8a58:	ldp	x3, x2, [x20, #272]
    8a5c:	strb	wzr, [x20, #255]
    8a60:	add	x19, x19, #0x1
    8a64:	blr	x3
    8a68:	strb	w23, [x20]
    8a6c:	ldr	x0, [x20, #320]
    8a70:	str	x26, [x20, #256]
    8a74:	strb	w23, [x20, #264]
    8a78:	cmp	x19, x24
    8a7c:	add	x0, x0, #0x1
    8a80:	str	x0, [x20, #320]
    8a84:	mov	x0, #0x1                   	// #1
    8a88:	b.eq	8ac4 <d_print_mod_list+0x59c>  // b.none
    8a8c:	ldrb	w23, [x19]
    8a90:	add	x1, x0, #0x1
    8a94:	str	x1, [x20, #256]
    8a98:	strb	w23, [x20, x0]
    8a9c:	add	x19, x19, #0x1
    8aa0:	strb	w23, [x20, #264]
    8aa4:	cmp	x24, x19
    8aa8:	b.eq	8ac4 <d_print_mod_list+0x59c>  // b.none
    8aac:	ldrb	w23, [x19]
    8ab0:	mov	x0, x20
    8ab4:	cmp	x1, #0xff
    8ab8:	b.eq	8a58 <d_print_mod_list+0x530>  // b.none
    8abc:	mov	x0, x1
    8ac0:	b	8a90 <d_print_mod_list+0x568>
    8ac4:	ldr	x22, [x22, #8]
    8ac8:	ldr	w0, [x22]
    8acc:	b	875c <d_print_mod_list+0x234>
    8ad0:	ret
    8ad4:	nop

0000000000008ad8 <d_print_array_type.isra.0>:
    8ad8:	stp	x29, x30, [sp, #-96]!
    8adc:	mov	x29, sp
    8ae0:	stp	x19, x20, [sp, #16]
    8ae4:	mov	x19, x0
    8ae8:	stp	x21, x22, [sp, #32]
    8aec:	mov	w22, w1
    8af0:	mov	x21, x2
    8af4:	cbz	x3, 8c70 <d_print_array_type.isra.0+0x198>
    8af8:	mov	x0, x3
    8afc:	stp	x23, x24, [sp, #48]
    8b00:	mov	x23, x3
    8b04:	nop
    8b08:	ldr	w4, [x0, #16]
    8b0c:	cbz	w4, 8ba0 <d_print_array_type.isra.0+0xc8>
    8b10:	ldr	x0, [x0]
    8b14:	cbnz	x0, 8b08 <d_print_array_type.isra.0+0x30>
    8b18:	mov	x2, x23
    8b1c:	mov	x0, x19
    8b20:	mov	w1, w22
    8b24:	mov	w3, #0x0                   	// #0
    8b28:	bl	8528 <d_print_mod_list>
    8b2c:	ldr	x0, [x19, #256]
    8b30:	ldp	x23, x24, [sp, #48]
    8b34:	cmp	x0, #0xff
    8b38:	b.ne	8c7c <d_print_array_type.isra.0+0x1a4>  // b.any
    8b3c:	ldp	x3, x2, [x19, #272]
    8b40:	strb	wzr, [x19, #255]
    8b44:	mov	x1, x0
    8b48:	mov	x0, x19
    8b4c:	blr	x3
    8b50:	mov	w1, #0x5b20                	// #23328
    8b54:	mov	w0, #0x5b                  	// #91
    8b58:	strh	w1, [x19]
    8b5c:	strb	w0, [x19, #264]
    8b60:	mov	x0, #0x2                   	// #2
    8b64:	ldr	x1, [x19, #320]
    8b68:	ldr	x20, [x21]
    8b6c:	add	x1, x1, #0x1
    8b70:	str	x0, [x19, #256]
    8b74:	str	x1, [x19, #320]
    8b78:	cbnz	x20, 8cb4 <d_print_array_type.isra.0+0x1dc>
    8b7c:	add	x1, x0, #0x1
    8b80:	str	x1, [x19, #256]
    8b84:	mov	w1, #0x5d                  	// #93
    8b88:	strb	w1, [x19, x0]
    8b8c:	strb	w1, [x19, #264]
    8b90:	ldp	x19, x20, [sp, #16]
    8b94:	ldp	x21, x22, [sp, #32]
    8b98:	ldp	x29, x30, [sp], #96
    8b9c:	ret
    8ba0:	ldr	x0, [x0, #8]
    8ba4:	ldr	w0, [x0]
    8ba8:	cmp	w0, #0x2a
    8bac:	b.ne	8d24 <d_print_array_type.isra.0+0x24c>  // b.any
    8bb0:	mov	x2, x23
    8bb4:	mov	w1, w22
    8bb8:	mov	x0, x19
    8bbc:	mov	w3, #0x0                   	// #0
    8bc0:	bl	8528 <d_print_mod_list>
    8bc4:	ldr	x1, [x19, #256]
    8bc8:	ldp	x23, x24, [sp, #48]
    8bcc:	cmp	x1, #0xff
    8bd0:	b.ne	8c98 <d_print_array_type.isra.0+0x1c0>  // b.any
    8bd4:	ldp	x3, x2, [x19, #272]
    8bd8:	strb	wzr, [x19, #255]
    8bdc:	mov	x0, x19
    8be0:	blr	x3
    8be4:	mov	w1, #0x5b                  	// #91
    8be8:	strb	w1, [x19]
    8bec:	strb	w1, [x19, #264]
    8bf0:	mov	x0, #0x1                   	// #1
    8bf4:	ldr	x1, [x19, #320]
    8bf8:	ldr	x20, [x21]
    8bfc:	add	x1, x1, x0
    8c00:	str	x0, [x19, #256]
    8c04:	str	x1, [x19, #320]
    8c08:	cbz	x20, 8b7c <d_print_array_type.isra.0+0xa4>
    8c0c:	ldr	w1, [x20, #4]
    8c10:	cmp	w1, #0x1
    8c14:	b.le	8cc0 <d_print_array_type.isra.0+0x1e8>
    8c18:	mov	w1, #0x1                   	// #1
    8c1c:	str	w1, [x19, #304]
    8c20:	cmp	x0, #0xff
    8c24:	b.ne	8b7c <d_print_array_type.isra.0+0xa4>  // b.any
    8c28:	ldp	x3, x2, [x19, #272]
    8c2c:	strb	wzr, [x19, #255]
    8c30:	mov	x1, x0
    8c34:	mov	x0, x19
    8c38:	blr	x3
    8c3c:	ldr	x2, [x19, #320]
    8c40:	mov	x0, #0x0                   	// #0
    8c44:	mov	x1, #0x1                   	// #1
    8c48:	str	x1, [x19, #256]
    8c4c:	add	x2, x2, x1
    8c50:	str	x2, [x19, #320]
    8c54:	mov	w1, #0x5d                  	// #93
    8c58:	strb	w1, [x19, x0]
    8c5c:	strb	w1, [x19, #264]
    8c60:	ldp	x19, x20, [sp, #16]
    8c64:	ldp	x21, x22, [sp, #32]
    8c68:	ldp	x29, x30, [sp], #96
    8c6c:	ret
    8c70:	ldr	x0, [x0, #256]
    8c74:	cmp	x0, #0xff
    8c78:	b.eq	8b3c <d_print_array_type.isra.0+0x64>  // b.none
    8c7c:	add	x1, x0, #0x1
    8c80:	str	x1, [x19, #256]
    8c84:	mov	w2, #0x20                  	// #32
    8c88:	strb	w2, [x19, x0]
    8c8c:	strb	w2, [x19, #264]
    8c90:	cmp	x1, #0xff
    8c94:	b.eq	8bd4 <d_print_array_type.isra.0+0xfc>  // b.none
    8c98:	add	x0, x1, #0x1
    8c9c:	str	x0, [x19, #256]
    8ca0:	mov	w2, #0x5b                  	// #91
    8ca4:	strb	w2, [x19, x1]
    8ca8:	strb	w2, [x19, #264]
    8cac:	ldr	x20, [x21]
    8cb0:	cbz	x20, 8c20 <d_print_array_type.isra.0+0x148>
    8cb4:	ldr	w1, [x20, #4]
    8cb8:	cmp	w1, #0x1
    8cbc:	b.gt	8c18 <d_print_array_type.isra.0+0x140>
    8cc0:	ldr	w2, [x19, #308]
    8cc4:	cmp	w2, #0x400
    8cc8:	b.gt	8c18 <d_print_array_type.isra.0+0x140>
    8ccc:	ldr	x3, [x19, #328]
    8cd0:	add	w1, w1, #0x1
    8cd4:	str	w1, [x20, #4]
    8cd8:	add	w2, w2, #0x1
    8cdc:	add	x0, sp, #0x50
    8ce0:	str	w2, [x19, #308]
    8ce4:	str	x0, [x19, #328]
    8ce8:	mov	w1, w22
    8cec:	mov	x2, x20
    8cf0:	mov	x0, x19
    8cf4:	stp	x20, x3, [sp, #80]
    8cf8:	bl	a30 <d_print_comp_inner>
    8cfc:	ldr	w2, [x20, #4]
    8d00:	ldr	x0, [sp, #88]
    8d04:	str	x0, [x19, #328]
    8d08:	ldr	w1, [x19, #308]
    8d0c:	sub	w2, w2, #0x1
    8d10:	ldr	x0, [x19, #256]
    8d14:	str	w2, [x20, #4]
    8d18:	sub	w1, w1, #0x1
    8d1c:	str	w1, [x19, #308]
    8d20:	b	8c20 <d_print_array_type.isra.0+0x148>
    8d24:	adrp	x20, 0 <d_make_comp>
    8d28:	add	x20, x20, #0x0
    8d2c:	mov	x0, x20
    8d30:	bl	0 <__asan_internal_strlen>
    8d34:	cbz	x0, 8dbc <d_print_array_type.isra.0+0x2e4>
    8d38:	stp	x25, x26, [sp, #64]
    8d3c:	add	x25, x20, x0
    8d40:	mov	x26, #0x1                   	// #1
    8d44:	ldr	x1, [x19, #256]
    8d48:	b	8da0 <d_print_array_type.isra.0+0x2c8>
    8d4c:	ldp	x3, x2, [x19, #272]
    8d50:	strb	wzr, [x19, #255]
    8d54:	add	x20, x20, #0x1
    8d58:	blr	x3
    8d5c:	strb	w24, [x19]
    8d60:	ldr	x0, [x19, #320]
    8d64:	str	x26, [x19, #256]
    8d68:	strb	w24, [x19, #264]
    8d6c:	cmp	x20, x25
    8d70:	add	x0, x0, #0x1
    8d74:	str	x0, [x19, #320]
    8d78:	mov	x0, #0x1                   	// #1
    8d7c:	b.eq	8db8 <d_print_array_type.isra.0+0x2e0>  // b.none
    8d80:	ldrb	w24, [x20]
    8d84:	add	x1, x0, #0x1
    8d88:	str	x1, [x19, #256]
    8d8c:	strb	w24, [x19, x0]
    8d90:	add	x20, x20, #0x1
    8d94:	strb	w24, [x19, #264]
    8d98:	cmp	x20, x25
    8d9c:	b.eq	8db8 <d_print_array_type.isra.0+0x2e0>  // b.none
    8da0:	ldrb	w24, [x20]
    8da4:	mov	x0, x19
    8da8:	cmp	x1, #0xff
    8dac:	b.eq	8d4c <d_print_array_type.isra.0+0x274>  // b.none
    8db0:	mov	x0, x1
    8db4:	b	8d84 <d_print_array_type.isra.0+0x2ac>
    8db8:	ldp	x25, x26, [sp, #64]
    8dbc:	mov	w1, w22
    8dc0:	mov	x2, x23
    8dc4:	mov	x0, x19
    8dc8:	mov	w3, #0x0                   	// #0
    8dcc:	bl	8528 <d_print_mod_list>
    8dd0:	ldr	x1, [x19, #256]
    8dd4:	cmp	x1, #0xff
    8dd8:	b.eq	8df8 <d_print_array_type.isra.0+0x320>  // b.none
    8ddc:	add	x0, x1, #0x1
    8de0:	str	x0, [x19, #256]
    8de4:	mov	w2, #0x29                  	// #41
    8de8:	strb	w2, [x19, x1]
    8dec:	strb	w2, [x19, #264]
    8df0:	ldp	x23, x24, [sp, #48]
    8df4:	b	8c74 <d_print_array_type.isra.0+0x19c>
    8df8:	ldp	x3, x2, [x19, #272]
    8dfc:	strb	wzr, [x19, #255]
    8e00:	mov	x0, x19
    8e04:	blr	x3
    8e08:	ldr	x1, [x19, #320]
    8e0c:	mov	w2, #0x29                  	// #41
    8e10:	strb	w2, [x19]
    8e14:	mov	x0, #0x1                   	// #1
    8e18:	add	x1, x1, x0
    8e1c:	ldp	x23, x24, [sp, #48]
    8e20:	str	x1, [x19, #320]
    8e24:	b	8c7c <d_print_array_type.isra.0+0x1a4>

0000000000008e28 <d_print_function_type.isra.0>:
    8e28:	stp	x29, x30, [sp, #-80]!
    8e2c:	mov	x29, sp
    8e30:	stp	x19, x20, [sp, #16]
    8e34:	mov	x19, x0
    8e38:	mov	x20, x3
    8e3c:	stp	x21, x22, [sp, #32]
    8e40:	mov	w22, w1
    8e44:	mov	x21, x2
    8e48:	stp	x23, x24, [sp, #48]
    8e4c:	cbz	x3, 8e90 <d_print_function_type.isra.0+0x68>
    8e50:	mov	x2, #0xe000000             	// #234881024
    8e54:	mov	x4, #0x1                   	// #1
    8e58:	movk	x2, #0x862, lsl #32
    8e5c:	ldr	w0, [x3, #16]
    8e60:	cbnz	w0, 8e90 <d_print_function_type.isra.0+0x68>
    8e64:	ldr	x0, [x3, #8]
    8e68:	ldr	w0, [x0]
    8e6c:	cmp	w0, #0x2b
    8e70:	b.hi	8e88 <d_print_function_type.isra.0+0x60>  // b.pmore
    8e74:	lsl	x0, x4, x0
    8e78:	tst	x0, x2
    8e7c:	b.ne	8f68 <d_print_function_type.isra.0+0x140>  // b.any
    8e80:	tst	x0, #0x1c00000000
    8e84:	b.ne	9034 <d_print_function_type.isra.0+0x20c>  // b.any
    8e88:	ldr	x3, [x3]
    8e8c:	cbnz	x3, 8e5c <d_print_function_type.isra.0+0x34>
    8e90:	ldr	x23, [x19, #296]
    8e94:	str	xzr, [x19, #296]
    8e98:	mov	w1, w22
    8e9c:	mov	x2, x20
    8ea0:	mov	x0, x19
    8ea4:	mov	w3, #0x0                   	// #0
    8ea8:	bl	8528 <d_print_mod_list>
    8eac:	ldr	x1, [x19, #256]
    8eb0:	cmp	x1, #0xff
    8eb4:	b.eq	8ff8 <d_print_function_type.isra.0+0x1d0>  // b.none
    8eb8:	add	x0, x1, #0x1
    8ebc:	str	x0, [x19, #256]
    8ec0:	mov	w2, #0x28                  	// #40
    8ec4:	strb	w2, [x19, x1]
    8ec8:	strb	w2, [x19, #264]
    8ecc:	ldr	x21, [x21]
    8ed0:	cbz	x21, 8ef4 <d_print_function_type.isra.0+0xcc>
    8ed4:	ldr	w1, [x21, #4]
    8ed8:	cmp	w1, #0x1
    8edc:	b.gt	8eec <d_print_function_type.isra.0+0xc4>
    8ee0:	ldr	w2, [x19, #308]
    8ee4:	cmp	w2, #0x400
    8ee8:	b.le	9078 <d_print_function_type.isra.0+0x250>
    8eec:	mov	w1, #0x1                   	// #1
    8ef0:	str	w1, [x19, #304]
    8ef4:	cmp	x0, #0xff
    8ef8:	b.eq	8f3c <d_print_function_type.isra.0+0x114>  // b.none
    8efc:	add	x1, x0, #0x1
    8f00:	str	x1, [x19, #256]
    8f04:	mov	w3, #0x29                  	// #41
    8f08:	strb	w3, [x19, x0]
    8f0c:	mov	x2, x20
    8f10:	strb	w3, [x19, #264]
    8f14:	mov	w1, w22
    8f18:	mov	x0, x19
    8f1c:	mov	w3, #0x1                   	// #1
    8f20:	bl	8528 <d_print_mod_list>
    8f24:	ldp	x21, x22, [sp, #32]
    8f28:	str	x23, [x19, #296]
    8f2c:	ldp	x19, x20, [sp, #16]
    8f30:	ldp	x23, x24, [sp, #48]
    8f34:	ldp	x29, x30, [sp], #80
    8f38:	ret
    8f3c:	ldp	x3, x2, [x19, #272]
    8f40:	strb	wzr, [x19, #255]
    8f44:	mov	x1, x0
    8f48:	mov	x0, x19
    8f4c:	blr	x3
    8f50:	ldr	x2, [x19, #320]
    8f54:	mov	x1, #0x1                   	// #1
    8f58:	mov	x0, #0x0                   	// #0
    8f5c:	add	x2, x2, x1
    8f60:	str	x2, [x19, #320]
    8f64:	b	8f00 <d_print_function_type.isra.0+0xd8>
    8f68:	ldrb	w0, [x19, #264]
    8f6c:	ldr	x1, [x19, #256]
    8f70:	cmp	w0, #0x20
    8f74:	b.eq	8f98 <d_print_function_type.isra.0+0x170>  // b.none
    8f78:	cmp	x1, #0xff
    8f7c:	b.eq	90d0 <d_print_function_type.isra.0+0x2a8>  // b.none
    8f80:	add	x2, x1, #0x1
    8f84:	str	x2, [x19, #256]
    8f88:	mov	w0, #0x20                  	// #32
    8f8c:	strb	w0, [x19, x1]
    8f90:	mov	x1, x2
    8f94:	strb	w0, [x19, #264]
    8f98:	cmp	x1, #0xff
    8f9c:	b.eq	9050 <d_print_function_type.isra.0+0x228>  // b.none
    8fa0:	add	x0, x1, #0x1
    8fa4:	str	x0, [x19, #256]
    8fa8:	mov	w24, #0x28                  	// #40
    8fac:	strb	w24, [x19, x1]
    8fb0:	mov	x0, x19
    8fb4:	strb	w24, [x19, #264]
    8fb8:	mov	x2, x20
    8fbc:	ldr	x23, [x19, #296]
    8fc0:	str	xzr, [x19, #296]
    8fc4:	mov	w1, w22
    8fc8:	mov	w3, #0x0                   	// #0
    8fcc:	bl	8528 <d_print_mod_list>
    8fd0:	ldr	x0, [x19, #256]
    8fd4:	cmp	x0, #0xff
    8fd8:	b.eq	90fc <d_print_function_type.isra.0+0x2d4>  // b.none
    8fdc:	add	x1, x0, #0x1
    8fe0:	str	x1, [x19, #256]
    8fe4:	mov	w2, #0x29                  	// #41
    8fe8:	strb	w2, [x19, x0]
    8fec:	strb	w2, [x19, #264]
    8ff0:	cmp	x1, #0xff
    8ff4:	b.ne	8eb8 <d_print_function_type.isra.0+0x90>  // b.any
    8ff8:	ldp	x3, x2, [x19, #272]
    8ffc:	strb	wzr, [x19, #255]
    9000:	mov	x0, x19
    9004:	blr	x3
    9008:	mov	w1, #0x28                  	// #40
    900c:	strb	w1, [x19]
    9010:	strb	w1, [x19, #264]
    9014:	mov	x0, #0x1                   	// #1
    9018:	ldr	x1, [x19, #320]
    901c:	ldr	x21, [x21]
    9020:	add	x1, x1, x0
    9024:	str	x0, [x19, #256]
    9028:	str	x1, [x19, #320]
    902c:	cbnz	x21, 8ed4 <d_print_function_type.isra.0+0xac>
    9030:	b	8efc <d_print_function_type.isra.0+0xd4>
    9034:	ldrb	w0, [x19, #264]
    9038:	ldr	x1, [x19, #256]
    903c:	and	w2, w0, #0xfffffffd
    9040:	cmp	w2, #0x28
    9044:	b.ne	8f70 <d_print_function_type.isra.0+0x148>  // b.any
    9048:	cmp	x1, #0xff
    904c:	b.ne	8fa0 <d_print_function_type.isra.0+0x178>  // b.any
    9050:	ldp	x3, x2, [x19, #272]
    9054:	strb	wzr, [x19, #255]
    9058:	mov	x0, x19
    905c:	blr	x3
    9060:	ldr	x2, [x19, #320]
    9064:	mov	x0, #0x1                   	// #1
    9068:	mov	x1, #0x0                   	// #0
    906c:	add	x2, x2, x0
    9070:	str	x2, [x19, #320]
    9074:	b	8fa4 <d_print_function_type.isra.0+0x17c>
    9078:	ldr	x3, [x19, #328]
    907c:	add	w1, w1, #0x1
    9080:	str	w1, [x21, #4]
    9084:	add	w2, w2, #0x1
    9088:	add	x0, sp, #0x40
    908c:	str	w2, [x19, #308]
    9090:	str	x0, [x19, #328]
    9094:	mov	w1, w22
    9098:	mov	x2, x21
    909c:	mov	x0, x19
    90a0:	stp	x21, x3, [sp, #64]
    90a4:	bl	a30 <d_print_comp_inner>
    90a8:	ldr	w2, [x21, #4]
    90ac:	ldr	x0, [sp, #72]
    90b0:	str	x0, [x19, #328]
    90b4:	ldr	w1, [x19, #308]
    90b8:	sub	w2, w2, #0x1
    90bc:	ldr	x0, [x19, #256]
    90c0:	str	w2, [x21, #4]
    90c4:	sub	w1, w1, #0x1
    90c8:	str	w1, [x19, #308]
    90cc:	b	8ef4 <d_print_function_type.isra.0+0xcc>
    90d0:	ldp	x3, x2, [x19, #272]
    90d4:	strb	wzr, [x19, #255]
    90d8:	mov	x0, x19
    90dc:	blr	x3
    90e0:	ldr	x0, [x19, #320]
    90e4:	mov	w2, #0x20                  	// #32
    90e8:	mov	x1, #0x1                   	// #1
    90ec:	strb	w2, [x19]
    90f0:	add	x0, x0, x1
    90f4:	str	x0, [x19, #320]
    90f8:	b	8fa0 <d_print_function_type.isra.0+0x178>
    90fc:	ldp	x3, x2, [x19, #272]
    9100:	strb	wzr, [x19, #255]
    9104:	mov	x1, x0
    9108:	mov	x0, x19
    910c:	blr	x3
    9110:	strb	w24, [x19, #264]
    9114:	mov	w0, #0x2829                	// #10281
    9118:	strh	w0, [x19]
    911c:	ldr	x1, [x19, #320]
    9120:	mov	x2, #0x2                   	// #2
    9124:	ldr	x21, [x21]
    9128:	add	x1, x1, #0x1
    912c:	str	x2, [x19, #256]
    9130:	mov	x0, x2
    9134:	str	x1, [x19, #320]
    9138:	cbnz	x21, 8ed4 <d_print_function_type.isra.0+0xac>
    913c:	b	8efc <d_print_function_type.isra.0+0xd4>

0000000000009140 <__asan_cplus_demangle_fill_name>:
    9140:	cmp	x1, #0x0
    9144:	mov	x3, x0
    9148:	ccmp	w2, #0x0, #0x4, ne  // ne = any
    914c:	ccmp	x0, #0x0, #0x4, gt
    9150:	mov	w0, #0x0                   	// #0
    9154:	b.ne	915c <__asan_cplus_demangle_fill_name+0x1c>  // b.any
    9158:	ret
    915c:	mov	w0, #0x1                   	// #1
    9160:	stp	xzr, x1, [x3]
    9164:	str	w2, [x3, #16]
    9168:	ret
    916c:	nop

0000000000009170 <d_source_name>:
    9170:	stp	x29, x30, [sp, #-48]!
    9174:	mov	w6, #0x0                   	// #0
    9178:	mov	x29, sp
    917c:	ldr	x1, [x0, #24]
    9180:	stp	x19, x20, [sp, #16]
    9184:	stp	x21, x22, [sp, #32]
    9188:	mov	x22, x0
    918c:	ldrb	w19, [x1]
    9190:	cmp	w19, #0x6e
    9194:	b.ne	91ac <d_source_name+0x3c>  // b.any
    9198:	add	x0, x1, #0x1
    919c:	str	x0, [x22, #24]
    91a0:	mov	w6, #0x1                   	// #1
    91a4:	ldrb	w19, [x1, #1]
    91a8:	mov	x1, x0
    91ac:	sub	w2, w19, #0x30
    91b0:	mov	w4, #0xcccd                	// #52429
    91b4:	and	w2, w2, #0xff
    91b8:	add	x21, x1, #0x1
    91bc:	cmp	w2, #0x9
    91c0:	mov	w1, w19
    91c4:	mov	w5, #0x7fffffff            	// #2147483647
    91c8:	mov	w19, #0x0                   	// #0
    91cc:	movk	w4, #0xcccc, lsl #16
    91d0:	b.ls	91ec <d_source_name+0x7c>  // b.plast
    91d4:	b	92d0 <d_source_name+0x160>
    91d8:	umull	x2, w2, w4
    91dc:	add	x21, x21, #0x1
    91e0:	lsr	x2, x2, #35
    91e4:	cmp	w2, w19
    91e8:	b.lt	92d0 <d_source_name+0x160>  // b.tstop
    91ec:	str	x21, [x22, #24]
    91f0:	add	w19, w19, w19, lsl #2
    91f4:	ldrb	w0, [x21]
    91f8:	add	w19, w1, w19, lsl #1
    91fc:	sub	w19, w19, #0x30
    9200:	sub	w3, w0, #0x30
    9204:	mov	w1, w0
    9208:	sub	w2, w5, w3
    920c:	and	w3, w3, #0xff
    9210:	cmp	w3, #0x9
    9214:	b.ls	91d8 <d_source_name+0x68>  // b.plast
    9218:	cmp	w19, #0x0
    921c:	ccmp	w6, #0x0, #0x0, gt
    9220:	b.ne	92d0 <d_source_name+0x160>  // b.any
    9224:	ldr	x0, [x22, #8]
    9228:	sxtw	x1, w19
    922c:	sub	x0, x0, x21
    9230:	cmp	x0, w19, sxtw
    9234:	b.lt	9360 <d_source_name+0x1f0>  // b.tstop
    9238:	ldr	w2, [x22, #16]
    923c:	add	x0, x21, x1
    9240:	str	x0, [x22, #24]
    9244:	tbz	w2, #2, 9260 <d_source_name+0xf0>
    9248:	ldrb	w1, [x21, x1]
    924c:	cmp	w1, #0x24
    9250:	b.ne	9260 <d_source_name+0xf0>  // b.any
    9254:	add	x0, x0, #0x1
    9258:	str	x0, [x22, #24]
    925c:	nop
    9260:	cmp	w19, #0x9
    9264:	b.le	9280 <d_source_name+0x110>
    9268:	adrp	x1, 0 <d_make_comp>
    926c:	mov	x0, x21
    9270:	add	x1, x1, #0x0
    9274:	mov	x2, #0x8                   	// #8
    9278:	bl	0 <__asan_internal_memcmp>
    927c:	cbz	w0, 92e8 <d_source_name+0x178>
    9280:	ldp	w20, w0, [x22, #40]
    9284:	cmp	w20, w0
    9288:	b.ge	936c <d_source_name+0x1fc>  // b.tcont
    928c:	ldr	x1, [x22, #32]
    9290:	mov	w2, #0x18                  	// #24
    9294:	add	w0, w20, #0x1
    9298:	smaddl	x20, w20, w2, x1
    929c:	str	wzr, [x20, #4]
    92a0:	str	w0, [x22, #40]
    92a4:	mov	w2, w19
    92a8:	mov	x1, x21
    92ac:	mov	x0, x20
    92b0:	bl	9140 <__asan_cplus_demangle_fill_name>
    92b4:	cbz	w0, 9360 <d_source_name+0x1f0>
    92b8:	str	x20, [x22, #64]
    92bc:	mov	x0, x20
    92c0:	ldp	x19, x20, [sp, #16]
    92c4:	ldp	x21, x22, [sp, #32]
    92c8:	ldp	x29, x30, [sp], #48
    92cc:	ret
    92d0:	mov	x20, #0x0                   	// #0
    92d4:	mov	x0, x20
    92d8:	ldp	x19, x20, [sp, #16]
    92dc:	ldp	x21, x22, [sp, #32]
    92e0:	ldp	x29, x30, [sp], #48
    92e4:	ret
    92e8:	ldrb	w1, [x21, #8]
    92ec:	mov	w3, #0x5f                  	// #95
    92f0:	mov	w2, #0x24                  	// #36
    92f4:	cmp	w1, #0x2e
    92f8:	ccmp	w1, w3, #0x4, ne  // ne = any
    92fc:	ldp	w20, w0, [x22, #40]
    9300:	ccmp	w1, w2, #0x4, ne  // ne = any
    9304:	b.ne	9284 <d_source_name+0x114>  // b.any
    9308:	ldrb	w1, [x21, #9]
    930c:	cmp	w1, #0x4e
    9310:	b.ne	9284 <d_source_name+0x114>  // b.any
    9314:	ldr	w1, [x22, #72]
    9318:	cmp	w20, w0
    931c:	add	w0, w1, #0x16
    9320:	sub	w19, w0, w19
    9324:	str	w19, [x22, #72]
    9328:	b.ge	9374 <d_source_name+0x204>  // b.tcont
    932c:	ldr	x1, [x22, #32]
    9330:	mov	w2, #0x18                  	// #24
    9334:	add	w0, w20, #0x1
    9338:	smaddl	x20, w20, w2, x1
    933c:	str	wzr, [x20, #4]
    9340:	str	w0, [x22, #40]
    9344:	adrp	x1, 0 <d_make_comp>
    9348:	mov	x0, x20
    934c:	add	x1, x1, #0x0
    9350:	mov	w2, #0x15                  	// #21
    9354:	bl	9140 <__asan_cplus_demangle_fill_name>
    9358:	cbnz	w0, 92b8 <d_source_name+0x148>
    935c:	nop
    9360:	mov	x20, #0x0                   	// #0
    9364:	str	x20, [x22, #64]
    9368:	b	92bc <d_source_name+0x14c>
    936c:	mov	x20, #0x0                   	// #0
    9370:	b	92a4 <d_source_name+0x134>
    9374:	mov	x20, #0x0                   	// #0
    9378:	b	9344 <d_source_name+0x1d4>
    937c:	nop

0000000000009380 <d_substitution>:
    9380:	stp	x29, x30, [sp, #-48]!
    9384:	mov	x29, sp
    9388:	stp	x19, x20, [sp, #16]
    938c:	mov	x19, x0
    9390:	ldr	x0, [x0, #24]
    9394:	ldrb	w2, [x0]
    9398:	cmp	w2, #0x53
    939c:	b.ne	9420 <d_substitution+0xa0>  // b.any
    93a0:	add	x3, x0, #0x1
    93a4:	str	x3, [x19, #24]
    93a8:	ldrb	w2, [x0, #1]
    93ac:	cbnz	w2, 9434 <d_substitution+0xb4>
    93b0:	ldr	w0, [x19, #16]
    93b4:	and	w1, w1, #0x1
    93b8:	ands	w4, w0, #0x8
    93bc:	ubfx	x4, x0, #3, #1
    93c0:	csel	w1, w1, wzr, eq  // eq = none
    93c4:	cbz	w1, 93dc <d_substitution+0x5c>
    93c8:	ldrb	w0, [x3]
    93cc:	sub	w0, w0, #0x43
    93d0:	and	w0, w0, #0xff
    93d4:	cmp	w0, #0x1
    93d8:	csinc	w4, w4, wzr, hi  // hi = pmore
    93dc:	cmp	w2, #0x74
    93e0:	b.eq	9630 <d_substitution+0x2b0>  // b.none
    93e4:	cmp	w2, #0x61
    93e8:	b.eq	9640 <d_substitution+0x2c0>  // b.none
    93ec:	cmp	w2, #0x62
    93f0:	b.eq	9650 <d_substitution+0x2d0>  // b.none
    93f4:	cmp	w2, #0x73
    93f8:	b.eq	9668 <d_substitution+0x2e8>  // b.none
    93fc:	cmp	w2, #0x69
    9400:	b.eq	9678 <d_substitution+0x2f8>  // b.none
    9404:	cmp	w2, #0x6f
    9408:	b.eq	9514 <d_substitution+0x194>  // b.none
    940c:	adrp	x1, 0 <d_make_comp>
    9410:	add	x1, x1, #0x0
    9414:	add	x1, x1, #0x150
    9418:	cmp	w2, #0x64
    941c:	b.eq	9520 <d_substitution+0x1a0>  // b.none
    9420:	mov	x20, #0x0                   	// #0
    9424:	mov	x0, x20
    9428:	ldp	x19, x20, [sp, #16]
    942c:	ldp	x29, x30, [sp], #48
    9430:	ret
    9434:	add	x3, x0, #0x2
    9438:	str	x3, [x19, #24]
    943c:	ldrb	w2, [x0, #1]
    9440:	sub	w5, w2, #0x30
    9444:	cmp	w2, #0x5f
    9448:	and	w0, w5, #0xff
    944c:	ccmp	w0, #0x9, #0x0, ne  // ne = any
    9450:	b.hi	9484 <d_substitution+0x104>  // b.pmore
    9454:	cmp	w2, #0x5f
    9458:	mov	w1, #0x0                   	// #0
    945c:	b.ne	9498 <d_substitution+0x118>  // b.any
    9460:	ldr	w0, [x19, #56]
    9464:	cmp	w0, w1
    9468:	b.ls	9420 <d_substitution+0xa0>  // b.plast
    946c:	ldr	x0, [x19, #48]
    9470:	ldr	x20, [x0, w1, uxtw #3]
    9474:	mov	x0, x20
    9478:	ldp	x19, x20, [sp, #16]
    947c:	ldp	x29, x30, [sp], #48
    9480:	ret
    9484:	sub	w0, w2, #0x41
    9488:	and	w0, w0, #0xff
    948c:	cmp	w0, #0x19
    9490:	b.hi	93b0 <d_substitution+0x30>  // b.pmore
    9494:	nop
    9498:	mov	w3, #0x0                   	// #0
    949c:	nop
    94a0:	add	w1, w3, w3, lsl #3
    94a4:	sub	w6, w2, #0x41
    94a8:	mov	w4, w1
    94ac:	and	w5, w5, #0xff
    94b0:	add	w1, w2, w1, lsl #2
    94b4:	and	w6, w6, #0xff
    94b8:	sub	w1, w1, #0x37
    94bc:	add	w2, w2, w4, lsl #2
    94c0:	cmp	w5, #0x9
    94c4:	b.hi	9508 <d_substitution+0x188>  // b.pmore
    94c8:	sub	w1, w2, #0x30
    94cc:	cmp	w3, w1
    94d0:	b.hi	9420 <d_substitution+0xa0>  // b.pmore
    94d4:	ldr	x4, [x19, #24]
    94d8:	mov	w3, w1
    94dc:	add	x0, x4, #0x1
    94e0:	ldrb	w2, [x4]
    94e4:	cbz	w2, 94f8 <d_substitution+0x178>
    94e8:	str	x0, [x19, #24]
    94ec:	ldrb	w2, [x4]
    94f0:	cmp	w2, #0x5f
    94f4:	b.eq	9500 <d_substitution+0x180>  // b.none
    94f8:	sub	w5, w2, #0x30
    94fc:	b	94a0 <d_substitution+0x120>
    9500:	add	w1, w1, #0x1
    9504:	b	9460 <d_substitution+0xe0>
    9508:	cmp	w6, #0x19
    950c:	b.ls	94cc <d_substitution+0x14c>  // b.plast
    9510:	b	9420 <d_substitution+0xa0>
    9514:	adrp	x1, 0 <d_make_comp>
    9518:	add	x1, x1, #0x0
    951c:	add	x1, x1, #0x118
    9520:	ldr	x6, [x1, #40]
    9524:	ldp	w0, w5, [x19, #40]
    9528:	cbz	x6, 9564 <d_substitution+0x1e4>
    952c:	ldr	w10, [x1, #48]
    9530:	cmp	w5, w0
    9534:	b.le	9690 <d_substitution+0x310>
    9538:	mov	w9, #0x18                  	// #24
    953c:	ldr	x8, [x19, #32]
    9540:	smull	x7, w0, w9
    9544:	add	w0, w0, #0x1
    9548:	add	x2, x8, x7
    954c:	str	wzr, [x2, #4]
    9550:	str	w0, [x19, #40]
    9554:	str	w9, [x8, x7]
    9558:	str	x6, [x2, #8]
    955c:	str	w10, [x2, #16]
    9560:	str	x2, [x19, #64]
    9564:	cbz	w4, 9624 <d_substitution+0x2a4>
    9568:	ldr	w2, [x1, #32]
    956c:	ldr	x6, [x1, #24]
    9570:	cmp	w5, w0
    9574:	ldr	w1, [x19, #72]
    9578:	add	w1, w1, w2
    957c:	str	w1, [x19, #72]
    9580:	b.le	9660 <d_substitution+0x2e0>
    9584:	mov	w4, #0x18                  	// #24
    9588:	add	w5, w0, #0x1
    958c:	ldr	x1, [x19, #32]
    9590:	smull	x0, w0, w4
    9594:	add	x20, x1, x0
    9598:	str	wzr, [x20, #4]
    959c:	str	w5, [x19, #40]
    95a0:	str	w4, [x1, x0]
    95a4:	str	x6, [x20, #8]
    95a8:	str	w2, [x20, #16]
    95ac:	ldrb	w0, [x3]
    95b0:	cmp	w0, #0x42
    95b4:	b.ne	9424 <d_substitution+0xa4>  // b.any
    95b8:	str	x21, [sp, #32]
    95bc:	ldr	x21, [x19, #64]
    95c0:	add	x3, x3, #0x1
    95c4:	str	x3, [x19, #24]
    95c8:	mov	x0, x19
    95cc:	bl	9170 <d_source_name>
    95d0:	mov	x3, x0
    95d4:	mov	x2, x20
    95d8:	mov	x0, x19
    95dc:	mov	w1, #0x4c                  	// #76
    95e0:	bl	0 <d_make_comp>
    95e4:	ldr	x3, [x19, #24]
    95e8:	mov	x20, x0
    95ec:	ldrb	w0, [x3]
    95f0:	cmp	w0, #0x42
    95f4:	b.eq	95c0 <d_substitution+0x240>  // b.none
    95f8:	str	x21, [x19, #64]
    95fc:	cbz	x20, 9688 <d_substitution+0x308>
    9600:	ldp	w0, w1, [x19, #56]
    9604:	cmp	w0, w1
    9608:	b.ge	9688 <d_substitution+0x308>  // b.tcont
    960c:	ldr	x2, [x19, #48]
    9610:	add	w1, w0, #0x1
    9614:	ldr	x21, [sp, #32]
    9618:	str	x20, [x2, w0, sxtw #3]
    961c:	str	w1, [x19, #56]
    9620:	b	9424 <d_substitution+0xa4>
    9624:	ldr	w2, [x1, #16]
    9628:	ldr	x6, [x1, #8]
    962c:	b	9570 <d_substitution+0x1f0>
    9630:	adrp	x1, 0 <d_make_comp>
    9634:	add	x1, x1, #0x0
    9638:	ldp	w0, w5, [x19, #40]
    963c:	b	9564 <d_substitution+0x1e4>
    9640:	adrp	x1, 0 <d_make_comp>
    9644:	add	x1, x1, #0x0
    9648:	add	x1, x1, #0x38
    964c:	b	9520 <d_substitution+0x1a0>
    9650:	adrp	x1, 0 <d_make_comp>
    9654:	add	x1, x1, #0x0
    9658:	add	x1, x1, #0x70
    965c:	b	9520 <d_substitution+0x1a0>
    9660:	mov	x20, #0x0                   	// #0
    9664:	b	95ac <d_substitution+0x22c>
    9668:	adrp	x1, 0 <d_make_comp>
    966c:	add	x1, x1, #0x0
    9670:	add	x1, x1, #0xa8
    9674:	b	9520 <d_substitution+0x1a0>
    9678:	adrp	x1, 0 <d_make_comp>
    967c:	add	x1, x1, #0x0
    9680:	add	x1, x1, #0xe0
    9684:	b	9520 <d_substitution+0x1a0>
    9688:	ldr	x21, [sp, #32]
    968c:	b	9420 <d_substitution+0xa0>
    9690:	mov	x2, #0x0                   	// #0
    9694:	str	x2, [x19, #64]
    9698:	b	9564 <d_substitution+0x1e4>
    969c:	nop

00000000000096a0 <__asan_cplus_demangle_fill_extended_operator>:
    96a0:	cmp	w1, #0x0
    96a4:	mov	x3, x0
    96a8:	ccmp	x2, #0x0, #0x4, ge  // ge = tcont
    96ac:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    96b0:	mov	w0, #0x0                   	// #0
    96b4:	b.eq	96cc <__asan_cplus_demangle_fill_extended_operator+0x2c>  // b.none
    96b8:	mov	x4, #0x33                  	// #51
    96bc:	mov	w0, #0x1                   	// #1
    96c0:	str	x4, [x3]
    96c4:	str	w1, [x3, #8]
    96c8:	str	x2, [x3, #16]
    96cc:	ret

00000000000096d0 <__asan_cplus_demangle_fill_ctor>:
    96d0:	cmp	x0, #0x0
    96d4:	mov	x3, x0
    96d8:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    96dc:	mov	w0, #0x0                   	// #0
    96e0:	b.eq	9708 <__asan_cplus_demangle_fill_ctor+0x38>  // b.none
    96e4:	sub	w4, w1, #0x1
    96e8:	mov	w0, #0x0                   	// #0
    96ec:	cmp	w4, #0x4
    96f0:	b.hi	9708 <__asan_cplus_demangle_fill_ctor+0x38>  // b.pmore
    96f4:	mov	x4, #0x7                   	// #7
    96f8:	mov	w0, #0x1                   	// #1
    96fc:	str	x4, [x3]
    9700:	str	w1, [x3, #8]
    9704:	str	x2, [x3, #16]
    9708:	ret
    970c:	nop

0000000000009710 <__asan_cplus_demangle_fill_dtor>:
    9710:	cmp	x0, #0x0
    9714:	mov	x3, x0
    9718:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    971c:	mov	w0, #0x0                   	// #0
    9720:	b.eq	9748 <__asan_cplus_demangle_fill_dtor+0x38>  // b.none
    9724:	sub	w4, w1, #0x1
    9728:	mov	w0, #0x0                   	// #0
    972c:	cmp	w4, #0x4
    9730:	b.hi	9748 <__asan_cplus_demangle_fill_dtor+0x38>  // b.pmore
    9734:	mov	x4, #0x8                   	// #8
    9738:	mov	w0, #0x1                   	// #1
    973c:	str	x4, [x3]
    9740:	str	w1, [x3, #8]
    9744:	str	x2, [x3, #16]
    9748:	ret
    974c:	nop

0000000000009750 <__asan_cplus_demangle_type>:
    9750:	stp	x29, x30, [sp, #-80]!
    9754:	mov	w2, #0x56                  	// #86
    9758:	mov	w1, #0x4b                  	// #75
    975c:	mov	x29, sp
    9760:	ldr	x3, [x0, #24]
    9764:	stp	x19, x20, [sp, #16]
    9768:	mov	x19, x0
    976c:	ldrb	w0, [x3]
    9770:	cmp	w0, #0x72
    9774:	ccmp	w0, w2, #0x4, ne  // ne = any
    9778:	ccmp	w0, w1, #0x4, ne  // ne = any
    977c:	b.eq	97c8 <__asan_cplus_demangle_type+0x78>  // b.none
    9780:	cmp	w0, #0x44
    9784:	b.eq	984c <__asan_cplus_demangle_type+0xfc>  // b.none
    9788:	sub	w2, w0, #0x30
    978c:	cmp	w2, #0x4a
    9790:	b.hi	97b4 <__asan_cplus_demangle_type+0x64>  // b.pmore
    9794:	adrp	x1, 0 <d_make_comp>
    9798:	add	x1, x1, #0x0
    979c:	ldrh	w1, [x1, w2, uxtw #1]
    97a0:	adr	x2, 97ac <__asan_cplus_demangle_type+0x5c>
    97a4:	add	x1, x2, w1, sxth #2
    97a8:	br	x1
    97ac:	mov	x0, #0x0                   	// #0
    97b0:	bl	9140 <__asan_cplus_demangle_fill_name>
    97b4:	mov	x20, #0x0                   	// #0
    97b8:	mov	x0, x20
    97bc:	ldp	x19, x20, [sp, #16]
    97c0:	ldp	x29, x30, [sp], #80
    97c4:	ret
    97c8:	add	x1, sp, #0x48
    97cc:	mov	x0, x19
    97d0:	mov	w2, #0x0                   	// #0
    97d4:	stp	x21, x22, [sp, #32]
    97d8:	bl	be68 <d_cv_qualifiers>
    97dc:	mov	x21, x0
    97e0:	cbz	x0, 9924 <__asan_cplus_demangle_type+0x1d4>
    97e4:	ldr	x0, [x19, #24]
    97e8:	ldrb	w0, [x0]
    97ec:	cmp	w0, #0x46
    97f0:	mov	x0, x19
    97f4:	b.eq	9918 <__asan_cplus_demangle_type+0x1c8>  // b.none
    97f8:	bl	9750 <__asan_cplus_demangle_type>
    97fc:	str	x0, [x21]
    9800:	cbz	x0, 9924 <__asan_cplus_demangle_type+0x1d4>
    9804:	ldr	w1, [x0]
    9808:	ldr	x20, [sp, #72]
    980c:	sub	w1, w1, #0x1f
    9810:	cmp	w1, #0x1
    9814:	b.ls	98fc <__asan_cplus_demangle_type+0x1ac>  // b.plast
    9818:	cbz	x20, 9924 <__asan_cplus_demangle_type+0x1d4>
    981c:	ldp	w0, w1, [x19, #56]
    9820:	cmp	w0, w1
    9824:	b.ge	9924 <__asan_cplus_demangle_type+0x1d4>  // b.tcont
    9828:	ldr	x2, [x19, #48]
    982c:	add	w1, w0, #0x1
    9830:	ldp	x21, x22, [sp, #32]
    9834:	str	x20, [x2, w0, sxtw #3]
    9838:	mov	x0, x20
    983c:	str	w1, [x19, #56]
    9840:	ldp	x19, x20, [sp, #16]
    9844:	ldp	x29, x30, [sp], #80
    9848:	ret
    984c:	ldrb	w0, [x3, #1]
    9850:	and	w1, w0, #0xffffffdf
    9854:	sub	w0, w0, #0x77
    9858:	cmp	w1, #0x4f
    985c:	and	w0, w0, #0xff
    9860:	ccmp	w0, #0x1, #0x0, ne  // ne = any
    9864:	b.ls	97c8 <__asan_cplus_demangle_type+0x78>  // b.plast
    9868:	add	x0, x3, #0x1
    986c:	str	x0, [x19, #24]
    9870:	ldrb	w0, [x3, #1]
    9874:	cbz	w0, 97b4 <__asan_cplus_demangle_type+0x64>
    9878:	add	x0, x3, #0x2
    987c:	str	x0, [x19, #24]
    9880:	ldrb	w0, [x3, #1]
    9884:	cmp	w0, #0x68
    9888:	b.eq	a380 <__asan_cplus_demangle_type+0xc30>  // b.none
    988c:	b.hi	9d9c <__asan_cplus_demangle_type+0x64c>  // b.pmore
    9890:	cmp	w0, #0x63
    9894:	b.eq	a2ec <__asan_cplus_demangle_type+0xb9c>  // b.none
    9898:	b.ls	9d48 <__asan_cplus_demangle_type+0x5f8>  // b.plast
    989c:	cmp	w0, #0x65
    98a0:	b.eq	a214 <__asan_cplus_demangle_type+0xac4>  // b.none
    98a4:	cmp	w0, #0x66
    98a8:	b.ne	9d08 <__asan_cplus_demangle_type+0x5b8>  // b.any
    98ac:	ldp	w0, w1, [x19, #40]
    98b0:	cmp	w0, w1
    98b4:	b.ge	a52c <__asan_cplus_demangle_type+0xddc>  // b.tcont
    98b8:	adrp	x1, 188 <d_append_buffer+0x18>
    98bc:	mov	w2, #0x18                  	// #24
    98c0:	ldr	x4, [x19, #32]
    98c4:	smull	x2, w0, w2
    98c8:	ldr	x1, [x1]
    98cc:	add	w0, w0, #0x1
    98d0:	ldr	w3, [x19, #72]
    98d4:	add	x20, x4, x2
    98d8:	add	x1, x1, #0x340
    98dc:	mov	w5, #0x27                  	// #39
    98e0:	str	wzr, [x20, #4]
    98e4:	str	w0, [x19, #40]
    98e8:	add	w0, w3, #0x9
    98ec:	str	w5, [x4, x2]
    98f0:	str	x1, [x20, #8]
    98f4:	str	w0, [x19, #72]
    98f8:	b	97b8 <__asan_cplus_demangle_type+0x68>
    98fc:	ldr	x1, [x0, #8]
    9900:	str	x20, [x0, #8]
    9904:	ldr	x0, [x21]
    9908:	str	x0, [sp, #72]
    990c:	str	x1, [x21]
    9910:	ldr	x20, [sp, #72]
    9914:	b	9818 <__asan_cplus_demangle_type+0xc8>
    9918:	bl	ad90 <d_function_type>
    991c:	str	x0, [x21]
    9920:	b	9800 <__asan_cplus_demangle_type+0xb0>
    9924:	ldp	x21, x22, [sp, #32]
    9928:	b	97b4 <__asan_cplus_demangle_type+0x64>
    992c:	adrp	x2, 188 <d_append_buffer+0x18>
    9930:	sub	w1, w0, #0x61
    9934:	ldp	w0, w4, [x19, #40]
    9938:	sbfiz	x1, x1, #5, #32
    993c:	ldr	x2, [x2]
    9940:	cmp	w0, w4
    9944:	add	x1, x1, x2
    9948:	b.ge	a52c <__asan_cplus_demangle_type+0xddc>  // b.tcont
    994c:	mov	w2, #0x18                  	// #24
    9950:	add	w6, w0, #0x1
    9954:	ldr	x4, [x19, #32]
    9958:	smull	x0, w0, w2
    995c:	ldr	w7, [x1, #8]
    9960:	mov	w5, #0x27                  	// #39
    9964:	add	x20, x4, x0
    9968:	ldr	w2, [x19, #72]
    996c:	add	x3, x3, #0x1
    9970:	add	w2, w2, w7
    9974:	str	wzr, [x20, #4]
    9978:	str	w6, [x19, #40]
    997c:	str	w5, [x4, x0]
    9980:	str	x1, [x20, #8]
    9984:	str	x3, [x19, #24]
    9988:	str	w2, [x19, #72]
    998c:	b	97b8 <__asan_cplus_demangle_type+0x68>
    9990:	add	x3, x3, #0x1
    9994:	str	x3, [x19, #24]
    9998:	mov	x0, x19
    999c:	bl	9170 <d_source_name>
    99a0:	str	x0, [sp, #72]
    99a4:	ldr	x1, [x19, #24]
    99a8:	mov	x20, x0
    99ac:	ldrb	w0, [x1]
    99b0:	cmp	w0, #0x49
    99b4:	b.eq	a174 <__asan_cplus_demangle_type+0xa24>  // b.none
    99b8:	mov	x0, x19
    99bc:	bl	9750 <__asan_cplus_demangle_type>
    99c0:	ldr	x3, [sp, #72]
    99c4:	mov	x2, x0
    99c8:	mov	w1, #0x21                  	// #33
    99cc:	mov	x0, x19
    99d0:	bl	0 <d_make_comp>
    99d4:	mov	x20, x0
    99d8:	str	x0, [sp, #72]
    99dc:	nop
    99e0:	cbz	x20, 97b4 <__asan_cplus_demangle_type+0x64>
    99e4:	ldp	w0, w1, [x19, #56]
    99e8:	cmp	w0, w1
    99ec:	b.ge	97b4 <__asan_cplus_demangle_type+0x64>  // b.tcont
    99f0:	ldr	x2, [x19, #48]
    99f4:	add	w1, w0, #0x1
    99f8:	str	x20, [x2, w0, sxtw #3]
    99fc:	str	w1, [x19, #56]
    9a00:	ldr	x20, [sp, #72]
    9a04:	mov	x0, x20
    9a08:	ldp	x19, x20, [sp, #16]
    9a0c:	ldp	x29, x30, [sp], #80
    9a10:	ret
    9a14:	mov	x0, x19
    9a18:	stp	x21, x22, [sp, #32]
    9a1c:	bl	748 <d_template_param>
    9a20:	ldr	x21, [x19, #24]
    9a24:	str	x0, [sp, #72]
    9a28:	mov	x20, x0
    9a2c:	ldrb	w0, [x21]
    9a30:	cmp	w0, #0x49
    9a34:	b.eq	a0d4 <__asan_cplus_demangle_type+0x984>  // b.none
    9a38:	ldp	x21, x22, [sp, #32]
    9a3c:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9a40:	ldrb	w0, [x3, #1]
    9a44:	sub	w1, w0, #0x30
    9a48:	cmp	w0, #0x5f
    9a4c:	and	w1, w1, #0xff
    9a50:	ccmp	w1, #0x9, #0x0, ne  // ne = any
    9a54:	b.ls	9a68 <__asan_cplus_demangle_type+0x318>  // b.plast
    9a58:	sub	w0, w0, #0x41
    9a5c:	and	w0, w0, #0xff
    9a60:	cmp	w0, #0x19
    9a64:	b.hi	a150 <__asan_cplus_demangle_type+0xa00>  // b.pmore
    9a68:	mov	w1, #0x0                   	// #0
    9a6c:	mov	x0, x19
    9a70:	bl	9380 <d_substitution>
    9a74:	str	x0, [sp, #72]
    9a78:	ldr	x1, [x19, #24]
    9a7c:	mov	x20, x0
    9a80:	ldrb	w0, [x1]
    9a84:	cmp	w0, #0x49
    9a88:	b.ne	97b8 <__asan_cplus_demangle_type+0x68>  // b.any
    9a8c:	add	x1, x1, #0x1
    9a90:	str	x1, [x19, #24]
    9a94:	mov	x0, x19
    9a98:	bl	c160 <d_template_args_1>
    9a9c:	mov	x3, x0
    9aa0:	mov	x2, x20
    9aa4:	mov	x0, x19
    9aa8:	mov	w1, #0x4                   	// #4
    9aac:	bl	0 <d_make_comp>
    9ab0:	mov	x20, x0
    9ab4:	str	x0, [sp, #72]
    9ab8:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9abc:	add	x3, x3, #0x1
    9ac0:	str	x3, [x19, #24]
    9ac4:	mov	x0, x19
    9ac8:	bl	9750 <__asan_cplus_demangle_type>
    9acc:	mov	x2, x0
    9ad0:	mov	x3, #0x0                   	// #0
    9ad4:	mov	x0, x19
    9ad8:	mov	w1, #0x23                  	// #35
    9adc:	bl	0 <d_make_comp>
    9ae0:	mov	x20, x0
    9ae4:	str	x0, [sp, #72]
    9ae8:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9aec:	add	x3, x3, #0x1
    9af0:	str	x3, [x19, #24]
    9af4:	mov	x0, x19
    9af8:	bl	9750 <__asan_cplus_demangle_type>
    9afc:	mov	x2, x0
    9b00:	mov	x3, #0x0                   	// #0
    9b04:	mov	x0, x19
    9b08:	mov	w1, #0x22                  	// #34
    9b0c:	bl	0 <d_make_comp>
    9b10:	mov	x20, x0
    9b14:	str	x0, [sp, #72]
    9b18:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9b1c:	add	x3, x3, #0x1
    9b20:	str	x3, [x19, #24]
    9b24:	mov	x0, x19
    9b28:	bl	9750 <__asan_cplus_demangle_type>
    9b2c:	mov	x2, x0
    9b30:	mov	x3, #0x0                   	// #0
    9b34:	mov	x0, x19
    9b38:	mov	w1, #0x24                  	// #36
    9b3c:	bl	0 <d_make_comp>
    9b40:	mov	x20, x0
    9b44:	str	x0, [sp, #72]
    9b48:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9b4c:	add	x3, x3, #0x1
    9b50:	str	x3, [x19, #24]
    9b54:	mov	x0, x19
    9b58:	bl	9750 <__asan_cplus_demangle_type>
    9b5c:	mov	x2, x0
    9b60:	mov	x3, #0x0                   	// #0
    9b64:	mov	x0, x19
    9b68:	mov	w1, #0x26                  	// #38
    9b6c:	bl	0 <d_make_comp>
    9b70:	mov	x20, x0
    9b74:	str	x0, [sp, #72]
    9b78:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9b7c:	mov	x0, x19
    9b80:	bl	ad90 <d_function_type>
    9b84:	mov	x20, x0
    9b88:	str	x0, [sp, #72]
    9b8c:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9b90:	add	x3, x3, #0x1
    9b94:	str	x3, [x19, #24]
    9b98:	mov	x0, x19
    9b9c:	bl	9170 <d_source_name>
    9ba0:	mov	x2, x0
    9ba4:	mov	x3, #0x0                   	// #0
    9ba8:	mov	x0, x19
    9bac:	mov	w1, #0x28                  	// #40
    9bb0:	bl	0 <d_make_comp>
    9bb4:	mov	x20, x0
    9bb8:	str	x0, [sp, #72]
    9bbc:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9bc0:	add	x3, x3, #0x1
    9bc4:	str	x3, [x19, #24]
    9bc8:	mov	x0, x19
    9bcc:	bl	9750 <__asan_cplus_demangle_type>
    9bd0:	mov	x2, x0
    9bd4:	mov	x3, #0x0                   	// #0
    9bd8:	mov	x0, x19
    9bdc:	mov	w1, #0x25                  	// #37
    9be0:	bl	0 <d_make_comp>
    9be4:	mov	x20, x0
    9be8:	str	x0, [sp, #72]
    9bec:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9bf0:	mov	x0, x19
    9bf4:	bl	cde0 <d_name>
    9bf8:	mov	x20, x0
    9bfc:	str	x0, [sp, #72]
    9c00:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9c04:	add	x1, x3, #0x1
    9c08:	str	x1, [x19, #24]
    9c0c:	ldrb	w0, [x3, #1]
    9c10:	cmp	w0, #0x5f
    9c14:	b.eq	a148 <__asan_cplus_demangle_type+0x9f8>  // b.none
    9c18:	sub	w0, w0, #0x30
    9c1c:	and	w0, w0, #0xff
    9c20:	cmp	w0, #0x9
    9c24:	b.hi	a1a0 <__asan_cplus_demangle_type+0xa50>  // b.pmore
    9c28:	add	x3, x3, #0x2
    9c2c:	nop
    9c30:	mov	x2, x3
    9c34:	str	x3, [x19, #24]
    9c38:	add	x3, x3, #0x1
    9c3c:	ldrb	w0, [x2]
    9c40:	sub	w0, w0, #0x30
    9c44:	and	w0, w0, #0xff
    9c48:	cmp	w0, #0x9
    9c4c:	b.ls	9c30 <__asan_cplus_demangle_type+0x4e0>  // b.plast
    9c50:	ldp	w20, w0, [x19, #40]
    9c54:	sub	x2, x2, x1
    9c58:	cmp	w20, w0
    9c5c:	b.ge	97ac <__asan_cplus_demangle_type+0x5c>  // b.tcont
    9c60:	ldr	x0, [x19, #32]
    9c64:	mov	w4, #0x18                  	// #24
    9c68:	add	w3, w20, #0x1
    9c6c:	smaddl	x20, w20, w4, x0
    9c70:	mov	x0, x20
    9c74:	str	wzr, [x20, #4]
    9c78:	str	w3, [x19, #40]
    9c7c:	bl	9140 <__asan_cplus_demangle_fill_name>
    9c80:	cbz	w0, 97b4 <__asan_cplus_demangle_type+0x64>
    9c84:	ldr	x1, [x19, #24]
    9c88:	ldrb	w0, [x1]
    9c8c:	cmp	w0, #0x5f
    9c90:	b.ne	97b4 <__asan_cplus_demangle_type+0x64>  // b.any
    9c94:	add	x1, x1, #0x1
    9c98:	str	x1, [x19, #24]
    9c9c:	mov	x0, x19
    9ca0:	bl	9750 <__asan_cplus_demangle_type>
    9ca4:	mov	x3, x0
    9ca8:	mov	x2, x20
    9cac:	mov	x0, x19
    9cb0:	mov	w1, #0x2a                  	// #42
    9cb4:	bl	0 <d_make_comp>
    9cb8:	mov	x20, x0
    9cbc:	str	x0, [sp, #72]
    9cc0:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9cc4:	add	x3, x3, #0x1
    9cc8:	str	x3, [x19, #24]
    9ccc:	mov	x0, x19
    9cd0:	bl	9750 <__asan_cplus_demangle_type>
    9cd4:	mov	x20, x0
    9cd8:	cbz	x0, 97b4 <__asan_cplus_demangle_type+0x64>
    9cdc:	mov	x0, x19
    9ce0:	bl	9750 <__asan_cplus_demangle_type>
    9ce4:	mov	x3, x0
    9ce8:	cbz	x0, 97b4 <__asan_cplus_demangle_type+0x64>
    9cec:	mov	x2, x20
    9cf0:	mov	x0, x19
    9cf4:	mov	w1, #0x2b                  	// #43
    9cf8:	bl	0 <d_make_comp>
    9cfc:	mov	x20, x0
    9d00:	str	x0, [sp, #72]
    9d04:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9d08:	cmp	w0, #0x64
    9d0c:	b.ne	97b4 <__asan_cplus_demangle_type+0x64>  // b.any
    9d10:	ldp	w0, w1, [x19, #40]
    9d14:	cmp	w0, w1
    9d18:	b.ge	a52c <__asan_cplus_demangle_type+0xddc>  // b.tcont
    9d1c:	adrp	x1, 188 <d_append_buffer+0x18>
    9d20:	mov	w2, #0x18                  	// #24
    9d24:	ldr	x4, [x19, #32]
    9d28:	smull	x2, w0, w2
    9d2c:	ldr	x1, [x1]
    9d30:	add	w0, w0, #0x1
    9d34:	ldr	w3, [x19, #72]
    9d38:	add	x20, x4, x2
    9d3c:	add	x1, x1, #0x360
    9d40:	mov	w5, #0x27                  	// #39
    9d44:	b	98e0 <__asan_cplus_demangle_type+0x190>
    9d48:	cmp	w0, #0x54
    9d4c:	b.eq	9ec8 <__asan_cplus_demangle_type+0x778>  // b.none
    9d50:	cmp	w0, #0x61
    9d54:	b.ne	9f5c <__asan_cplus_demangle_type+0x80c>  // b.any
    9d58:	ldp	w20, w0, [x19, #40]
    9d5c:	cmp	w20, w0
    9d60:	b.ge	a50c <__asan_cplus_demangle_type+0xdbc>  // b.tcont
    9d64:	ldr	x1, [x19, #32]
    9d68:	mov	w2, #0x18                  	// #24
    9d6c:	add	w0, w20, #0x1
    9d70:	smaddl	x20, w20, w2, x1
    9d74:	str	wzr, [x20, #4]
    9d78:	str	w0, [x19, #40]
    9d7c:	mov	x0, x20
    9d80:	adrp	x1, 0 <d_make_comp>
    9d84:	mov	w2, #0x4                   	// #4
    9d88:	add	x1, x1, #0x0
    9d8c:	bl	9140 <__asan_cplus_demangle_fill_name>
    9d90:	cmp	w0, #0x0
    9d94:	csel	x20, x20, xzr, ne  // ne = any
    9d98:	b	97b8 <__asan_cplus_demangle_type+0x68>
    9d9c:	cmp	w0, #0x73
    9da0:	b.eq	a2b4 <__asan_cplus_demangle_type+0xb64>  // b.none
    9da4:	b.ls	9f24 <__asan_cplus_demangle_type+0x7d4>  // b.plast
    9da8:	cmp	w0, #0x75
    9dac:	b.eq	a264 <__asan_cplus_demangle_type+0xb14>  // b.none
    9db0:	cmp	w0, #0x76
    9db4:	b.ne	9ec0 <__asan_cplus_demangle_type+0x770>  // b.any
    9db8:	ldrb	w0, [x3, #2]
    9dbc:	cmp	w0, #0x5f
    9dc0:	b.eq	a418 <__asan_cplus_demangle_type+0xcc8>  // b.none
    9dc4:	ldp	w0, w1, [x19, #40]
    9dc8:	cmp	w0, w1
    9dcc:	b.ge	97b4 <__asan_cplus_demangle_type+0x64>  // b.tcont
    9dd0:	mov	w2, #0x18                  	// #24
    9dd4:	add	w4, w0, #0x1
    9dd8:	ldr	x1, [x19, #32]
    9ddc:	smull	x0, w0, w2
    9de0:	mov	w2, #0x42                  	// #66
    9de4:	add	x20, x1, x0
    9de8:	str	wzr, [x20, #4]
    9dec:	str	w4, [x19, #40]
    9df0:	str	w2, [x1, x0]
    9df4:	ldrb	w0, [x3, #2]
    9df8:	cmp	w0, #0x6e
    9dfc:	b.eq	a4e8 <__asan_cplus_demangle_type+0xd98>  // b.none
    9e00:	sub	w1, w0, #0x30
    9e04:	and	w1, w1, #0xff
    9e08:	cmp	w1, #0x9
    9e0c:	b.hi	a524 <__asan_cplus_demangle_type+0xdd4>  // b.pmore
    9e10:	mov	w2, #0x0                   	// #0
    9e14:	mov	w6, #0xcccd                	// #52429
    9e18:	mov	w5, w0
    9e1c:	mov	w7, #0x7fffffff            	// #2147483647
    9e20:	mov	w0, #0x0                   	// #0
    9e24:	movk	w6, #0xcccc, lsl #16
    9e28:	ldr	x3, [x19, #24]
    9e2c:	b	9e48 <__asan_cplus_demangle_type+0x6f8>
    9e30:	sub	w1, w7, w1
    9e34:	mov	w5, w4
    9e38:	umull	x1, w1, w6
    9e3c:	lsr	x1, x1, #35
    9e40:	cmp	w1, w0
    9e44:	b.lt	a4e0 <__asan_cplus_demangle_type+0xd90>  // b.tstop
    9e48:	add	x3, x3, #0x1
    9e4c:	str	x3, [x19, #24]
    9e50:	add	w0, w0, w0, lsl #2
    9e54:	ldrb	w4, [x3]
    9e58:	add	w0, w5, w0, lsl #1
    9e5c:	sub	w0, w0, #0x30
    9e60:	sub	w1, w4, #0x30
    9e64:	and	w5, w1, #0xff
    9e68:	cmp	w5, #0x9
    9e6c:	b.ls	9e30 <__asan_cplus_demangle_type+0x6e0>  // b.plast
    9e70:	cbz	w2, 9e78 <__asan_cplus_demangle_type+0x728>
    9e74:	neg	w0, w0
    9e78:	sxtw	x0, w0
    9e7c:	str	x0, [x20, #8]
    9e80:	ldr	x0, [x19, #24]
    9e84:	ldrb	w1, [x0]
    9e88:	cmp	w1, #0x5f
    9e8c:	b.ne	97b4 <__asan_cplus_demangle_type+0x64>  // b.any
    9e90:	add	x0, x0, #0x1
    9e94:	str	x0, [x19, #24]
    9e98:	mov	x0, x19
    9e9c:	bl	9750 <__asan_cplus_demangle_type>
    9ea0:	mov	x3, x0
    9ea4:	mov	x2, x20
    9ea8:	mov	x0, x19
    9eac:	mov	w1, #0x2d                  	// #45
    9eb0:	bl	0 <d_make_comp>
    9eb4:	mov	x20, x0
    9eb8:	str	x0, [sp, #72]
    9ebc:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9ec0:	cmp	w0, #0x74
    9ec4:	b.ne	97b4 <__asan_cplus_demangle_type+0x64>  // b.any
    9ec8:	ldr	w20, [x19, #76]
    9ecc:	mov	w0, #0x1                   	// #1
    9ed0:	str	w0, [x19, #76]
    9ed4:	mov	x0, x19
    9ed8:	bl	b730 <d_expression_1>
    9edc:	str	w20, [x19, #76]
    9ee0:	mov	x2, x0
    9ee4:	mov	x3, #0x0                   	// #0
    9ee8:	mov	x0, x19
    9eec:	mov	w1, #0x43                  	// #67
    9ef0:	bl	0 <d_make_comp>
    9ef4:	str	x0, [sp, #72]
    9ef8:	mov	x20, x0
    9efc:	cbz	x0, 97b4 <__asan_cplus_demangle_type+0x64>
    9f00:	ldr	x0, [x19, #24]
    9f04:	ldrb	w1, [x0]
    9f08:	cbz	w1, 97b4 <__asan_cplus_demangle_type+0x64>
    9f0c:	add	x1, x0, #0x1
    9f10:	str	x1, [x19, #24]
    9f14:	ldrb	w0, [x0]
    9f18:	cmp	w0, #0x45
    9f1c:	b.ne	97b4 <__asan_cplus_demangle_type+0x64>  // b.any
    9f20:	b	99e4 <__asan_cplus_demangle_type+0x294>
    9f24:	cmp	w0, #0x6e
    9f28:	b.eq	a330 <__asan_cplus_demangle_type+0xbe0>  // b.none
    9f2c:	cmp	w0, #0x70
    9f30:	b.ne	a07c <__asan_cplus_demangle_type+0x92c>  // b.any
    9f34:	mov	x0, x19
    9f38:	bl	9750 <__asan_cplus_demangle_type>
    9f3c:	mov	x3, #0x0                   	// #0
    9f40:	mov	x2, x0
    9f44:	mov	w1, #0x4b                  	// #75
    9f48:	mov	x0, x19
    9f4c:	bl	0 <d_make_comp>
    9f50:	mov	x20, x0
    9f54:	str	x0, [sp, #72]
    9f58:	b	99e0 <__asan_cplus_demangle_type+0x290>
    9f5c:	cmp	w0, #0x46
    9f60:	b.ne	97b4 <__asan_cplus_demangle_type+0x64>  // b.any
    9f64:	ldp	w0, w1, [x19, #40]
    9f68:	cmp	w0, w1
    9f6c:	b.ge	a544 <__asan_cplus_demangle_type+0xdf4>  // b.tcont
    9f70:	mov	w2, #0x18                  	// #24
    9f74:	add	w4, w0, #0x1
    9f78:	ldr	x1, [x19, #32]
    9f7c:	smull	x0, w0, w2
    9f80:	mov	w2, #0x2c                  	// #44
    9f84:	add	x20, x1, x0
    9f88:	str	wzr, [x20, #4]
    9f8c:	str	w4, [x19, #40]
    9f90:	str	x20, [sp, #72]
    9f94:	str	w2, [x1, x0]
    9f98:	ldrb	w0, [x3, #2]
    9f9c:	sub	w0, w0, #0x30
    9fa0:	and	w0, w0, #0xff
    9fa4:	cmp	w0, #0x9
    9fa8:	cset	w1, ls  // ls = plast
    9fac:	strh	w1, [x20, #16]
    9fb0:	b.ls	a444 <__asan_cplus_demangle_type+0xcf4>  // b.plast
    9fb4:	mov	x0, x19
    9fb8:	bl	9750 <__asan_cplus_demangle_type>
    9fbc:	str	x0, [x20, #8]
    9fc0:	ldr	x20, [sp, #72]
    9fc4:	ldr	x0, [x20, #8]
    9fc8:	cbz	x0, 97b4 <__asan_cplus_demangle_type+0x64>
    9fcc:	ldr	x2, [x19, #24]
    9fd0:	ldrb	w1, [x2]
    9fd4:	cmp	w1, #0x6e
    9fd8:	b.ne	9fec <__asan_cplus_demangle_type+0x89c>  // b.any
    9fdc:	add	x0, x2, #0x1
    9fe0:	str	x0, [x19, #24]
    9fe4:	ldrb	w1, [x2, #1]
    9fe8:	mov	x2, x0
    9fec:	sub	w0, w1, #0x30
    9ff0:	mov	w5, #0xcccd                	// #52429
    9ff4:	and	w0, w0, #0xff
    9ff8:	mov	w4, w1
    9ffc:	cmp	w0, #0x9
    a000:	mov	w1, #0x0                   	// #0
    a004:	mov	w6, #0x7fffffff            	// #2147483647
    a008:	movk	w5, #0xcccc, lsl #16
    a00c:	b.ls	a02c <__asan_cplus_demangle_type+0x8dc>  // b.plast
    a010:	b	a054 <__asan_cplus_demangle_type+0x904>
    a014:	sub	w0, w6, w0
    a018:	mov	w4, w3
    a01c:	umull	x0, w0, w5
    a020:	lsr	x0, x0, #35
    a024:	cmp	w0, w1
    a028:	b.lt	a054 <__asan_cplus_demangle_type+0x904>  // b.tstop
    a02c:	add	x2, x2, #0x1
    a030:	str	x2, [x19, #24]
    a034:	add	w1, w1, w1, lsl #2
    a038:	ldrb	w3, [x2]
    a03c:	add	w1, w4, w1, lsl #1
    a040:	sub	w1, w1, #0x30
    a044:	sub	w0, w3, #0x30
    a048:	and	w4, w0, #0xff
    a04c:	cmp	w4, #0x9
    a050:	b.ls	a014 <__asan_cplus_demangle_type+0x8c4>  // b.plast
    a054:	ldr	x1, [x19, #24]
    a058:	ldrb	w0, [x1]
    a05c:	cbz	w0, a06c <__asan_cplus_demangle_type+0x91c>
    a060:	add	x0, x1, #0x1
    a064:	str	x0, [x19, #24]
    a068:	ldrb	w0, [x1]
    a06c:	cmp	w0, #0x73
    a070:	cset	w0, eq  // eq = none
    a074:	strh	w0, [x20, #18]
    a078:	b	97b8 <__asan_cplus_demangle_type+0x68>
    a07c:	cmp	w0, #0x69
    a080:	b.ne	97b4 <__asan_cplus_demangle_type+0x64>  // b.any
    a084:	ldp	w0, w1, [x19, #40]
    a088:	cmp	w0, w1
    a08c:	b.ge	a52c <__asan_cplus_demangle_type+0xddc>  // b.tcont
    a090:	adrp	x1, 188 <d_append_buffer+0x18>
    a094:	mov	w2, #0x18                  	// #24
    a098:	ldr	x4, [x19, #32]
    a09c:	smull	x2, w0, w2
    a0a0:	ldr	x1, [x1]
    a0a4:	add	w0, w0, #0x1
    a0a8:	ldr	w3, [x19, #72]
    a0ac:	add	x20, x4, x2
    a0b0:	add	x1, x1, #0x400
    a0b4:	mov	w5, #0x27                  	// #39
    a0b8:	str	wzr, [x20, #4]
    a0bc:	str	w0, [x19, #40]
    a0c0:	add	w0, w3, #0x8
    a0c4:	str	w5, [x4, x2]
    a0c8:	str	x1, [x20, #8]
    a0cc:	str	w0, [x19, #72]
    a0d0:	b	97b8 <__asan_cplus_demangle_type+0x68>
    a0d4:	ldr	w0, [x19, #80]
    a0d8:	cbnz	w0, a1c4 <__asan_cplus_demangle_type+0xa74>
    a0dc:	cbz	x20, 9924 <__asan_cplus_demangle_type+0x1d4>
    a0e0:	ldp	w0, w1, [x19, #56]
    a0e4:	cmp	w0, w1
    a0e8:	b.ge	9924 <__asan_cplus_demangle_type+0x1d4>  // b.tcont
    a0ec:	ldr	x2, [x19, #48]
    a0f0:	add	w1, w0, #0x1
    a0f4:	mov	x3, #0x0                   	// #0
    a0f8:	str	x20, [x2, w0, sxtw #3]
    a0fc:	str	w1, [x19, #56]
    a100:	ldrb	w0, [x21]
    a104:	sub	w0, w0, #0x49
    a108:	and	w0, w0, #0xff
    a10c:	cmp	w0, #0x1
    a110:	b.hi	a128 <__asan_cplus_demangle_type+0x9d8>  // b.pmore
    a114:	add	x21, x21, #0x1
    a118:	str	x21, [x19, #24]
    a11c:	mov	x0, x19
    a120:	bl	c160 <d_template_args_1>
    a124:	mov	x3, x0
    a128:	mov	x2, x20
    a12c:	mov	x0, x19
    a130:	mov	w1, #0x4                   	// #4
    a134:	bl	0 <d_make_comp>
    a138:	mov	x20, x0
    a13c:	str	x0, [sp, #72]
    a140:	ldp	x21, x22, [sp, #32]
    a144:	b	99e0 <__asan_cplus_demangle_type+0x290>
    a148:	mov	x20, #0x0                   	// #0
    a14c:	b	9c94 <__asan_cplus_demangle_type+0x544>
    a150:	mov	x0, x19
    a154:	bl	cde0 <d_name>
    a158:	str	x0, [sp, #72]
    a15c:	mov	x20, x0
    a160:	cbz	x0, 97b4 <__asan_cplus_demangle_type+0x64>
    a164:	ldr	w0, [x0]
    a168:	cmp	w0, #0x18
    a16c:	b.ne	99e4 <__asan_cplus_demangle_type+0x294>  // b.any
    a170:	b	97b8 <__asan_cplus_demangle_type+0x68>
    a174:	add	x1, x1, #0x1
    a178:	str	x1, [x19, #24]
    a17c:	mov	x0, x19
    a180:	bl	c160 <d_template_args_1>
    a184:	mov	x3, x0
    a188:	mov	x2, x20
    a18c:	mov	x0, x19
    a190:	mov	w1, #0x4                   	// #4
    a194:	bl	0 <d_make_comp>
    a198:	str	x0, [sp, #72]
    a19c:	b	99b8 <__asan_cplus_demangle_type+0x268>
    a1a0:	ldr	w20, [x19, #76]
    a1a4:	mov	w0, #0x1                   	// #1
    a1a8:	str	w0, [x19, #76]
    a1ac:	mov	x0, x19
    a1b0:	bl	b730 <d_expression_1>
    a1b4:	str	w20, [x19, #76]
    a1b8:	mov	x20, x0
    a1bc:	cbnz	x0, 9c84 <__asan_cplus_demangle_type+0x534>
    a1c0:	b	97b4 <__asan_cplus_demangle_type+0x64>
    a1c4:	ldr	w22, [x19, #56]
    a1c8:	add	x0, x21, #0x1
    a1cc:	ldr	w20, [x19, #72]
    a1d0:	str	x23, [sp, #48]
    a1d4:	str	x0, [x19, #24]
    a1d8:	mov	x0, x19
    a1dc:	ldr	w23, [x19, #40]
    a1e0:	bl	c160 <d_template_args_1>
    a1e4:	ldr	x1, [x19, #24]
    a1e8:	ldrb	w1, [x1]
    a1ec:	cmp	w1, #0x49
    a1f0:	b.eq	a3d0 <__asan_cplus_demangle_type+0xc80>  // b.none
    a1f4:	str	x21, [x19, #24]
    a1f8:	str	w23, [x19, #40]
    a1fc:	str	w22, [x19, #56]
    a200:	str	w20, [x19, #72]
    a204:	ldp	x21, x22, [sp, #32]
    a208:	ldr	x23, [sp, #48]
    a20c:	ldr	x20, [sp, #72]
    a210:	b	99e0 <__asan_cplus_demangle_type+0x290>
    a214:	ldp	w0, w1, [x19, #40]
    a218:	cmp	w0, w1
    a21c:	b.ge	a52c <__asan_cplus_demangle_type+0xddc>  // b.tcont
    a220:	mov	w2, #0x18                  	// #24
    a224:	adrp	x1, 188 <d_append_buffer+0x18>
    a228:	ldr	x4, [x19, #32]
    a22c:	smull	x2, w0, w2
    a230:	ldr	w3, [x19, #72]
    a234:	add	w0, w0, #0x1
    a238:	add	x20, x4, x2
    a23c:	mov	w5, #0x27                  	// #39
    a240:	ldr	x1, [x1]
    a244:	str	wzr, [x20, #4]
    a248:	str	w0, [x19, #40]
    a24c:	add	x1, x1, #0x380
    a250:	str	w5, [x4, x2]
    a254:	add	w0, w3, #0xa
    a258:	str	x1, [x20, #8]
    a25c:	str	w0, [x19, #72]
    a260:	b	97b8 <__asan_cplus_demangle_type+0x68>
    a264:	ldp	w0, w1, [x19, #40]
    a268:	cmp	w0, w1
    a26c:	b.ge	a52c <__asan_cplus_demangle_type+0xddc>  // b.tcont
    a270:	mov	w2, #0x18                  	// #24
    a274:	adrp	x1, 188 <d_append_buffer+0x18>
    a278:	ldr	x4, [x19, #32]
    a27c:	smull	x2, w0, w2
    a280:	ldr	w3, [x19, #72]
    a284:	add	w0, w0, #0x1
    a288:	add	x20, x4, x2
    a28c:	mov	w5, #0x27                  	// #39
    a290:	ldr	x1, [x1]
    a294:	str	wzr, [x20, #4]
    a298:	str	w0, [x19, #40]
    a29c:	add	x1, x1, #0x3c0
    a2a0:	str	w5, [x4, x2]
    a2a4:	add	w0, w3, #0x7
    a2a8:	str	x1, [x20, #8]
    a2ac:	str	w0, [x19, #72]
    a2b0:	b	97b8 <__asan_cplus_demangle_type+0x68>
    a2b4:	ldp	w0, w1, [x19, #40]
    a2b8:	cmp	w0, w1
    a2bc:	b.ge	a52c <__asan_cplus_demangle_type+0xddc>  // b.tcont
    a2c0:	adrp	x1, 188 <d_append_buffer+0x18>
    a2c4:	mov	w2, #0x18                  	// #24
    a2c8:	ldr	x4, [x19, #32]
    a2cc:	smull	x2, w0, w2
    a2d0:	ldr	x1, [x1]
    a2d4:	add	w0, w0, #0x1
    a2d8:	ldr	w3, [x19, #72]
    a2dc:	add	x20, x4, x2
    a2e0:	add	x1, x1, #0x3e0
    a2e4:	mov	w5, #0x27                  	// #39
    a2e8:	b	a0b8 <__asan_cplus_demangle_type+0x968>
    a2ec:	ldp	w20, w0, [x19, #40]
    a2f0:	cmp	w20, w0
    a2f4:	b.ge	a514 <__asan_cplus_demangle_type+0xdc4>  // b.tcont
    a2f8:	ldr	x1, [x19, #32]
    a2fc:	mov	w2, #0x18                  	// #24
    a300:	add	w0, w20, #0x1
    a304:	smaddl	x20, w20, w2, x1
    a308:	str	wzr, [x20, #4]
    a30c:	str	w0, [x19, #40]
    a310:	mov	x0, x20
    a314:	adrp	x1, 0 <d_make_comp>
    a318:	mov	w2, #0xe                   	// #14
    a31c:	add	x1, x1, #0x0
    a320:	bl	9140 <__asan_cplus_demangle_fill_name>
    a324:	cmp	w0, #0x0
    a328:	csel	x20, x20, xzr, ne  // ne = any
    a32c:	b	97b8 <__asan_cplus_demangle_type+0x68>
    a330:	ldp	w0, w1, [x19, #40]
    a334:	cmp	w0, w1
    a338:	b.ge	a52c <__asan_cplus_demangle_type+0xddc>  // b.tcont
    a33c:	mov	w2, #0x18                  	// #24
    a340:	adrp	x1, 188 <d_append_buffer+0x18>
    a344:	ldr	x4, [x19, #32]
    a348:	smull	x2, w0, w2
    a34c:	ldr	w3, [x19, #72]
    a350:	add	w0, w0, #0x1
    a354:	add	x20, x4, x2
    a358:	mov	w5, #0x27                  	// #39
    a35c:	ldr	x1, [x1]
    a360:	str	wzr, [x20, #4]
    a364:	str	w0, [x19, #40]
    a368:	add	x1, x1, #0x420
    a36c:	str	w5, [x4, x2]
    a370:	add	w0, w3, #0x11
    a374:	str	x1, [x20, #8]
    a378:	str	w0, [x19, #72]
    a37c:	b	97b8 <__asan_cplus_demangle_type+0x68>
    a380:	ldp	w0, w1, [x19, #40]
    a384:	cmp	w0, w1
    a388:	b.ge	a52c <__asan_cplus_demangle_type+0xddc>  // b.tcont
    a38c:	mov	w2, #0x18                  	// #24
    a390:	adrp	x1, 188 <d_append_buffer+0x18>
    a394:	ldr	x4, [x19, #32]
    a398:	smull	x2, w0, w2
    a39c:	ldr	w3, [x19, #72]
    a3a0:	add	w0, w0, #0x1
    a3a4:	add	x20, x4, x2
    a3a8:	mov	w5, #0x27                  	// #39
    a3ac:	ldr	x1, [x1]
    a3b0:	str	wzr, [x20, #4]
    a3b4:	str	w0, [x19, #40]
    a3b8:	add	x1, x1, #0x3a0
    a3bc:	str	w5, [x4, x2]
    a3c0:	add	w0, w3, #0x4
    a3c4:	str	x1, [x20, #8]
    a3c8:	str	w0, [x19, #72]
    a3cc:	b	97b8 <__asan_cplus_demangle_type+0x68>
    a3d0:	ldr	x2, [sp, #72]
    a3d4:	cbz	x2, a4d4 <__asan_cplus_demangle_type+0xd84>
    a3d8:	ldp	w4, w1, [x19, #56]
    a3dc:	cmp	w4, w1
    a3e0:	b.ge	a4d4 <__asan_cplus_demangle_type+0xd84>  // b.tcont
    a3e4:	ldr	x6, [x19, #48]
    a3e8:	add	w5, w4, #0x1
    a3ec:	mov	x3, x0
    a3f0:	mov	w1, #0x4                   	// #4
    a3f4:	mov	x0, x19
    a3f8:	str	x2, [x6, w4, sxtw #3]
    a3fc:	str	w5, [x19, #56]
    a400:	bl	0 <d_make_comp>
    a404:	mov	x20, x0
    a408:	str	x0, [sp, #72]
    a40c:	ldp	x21, x22, [sp, #32]
    a410:	ldr	x23, [sp, #48]
    a414:	b	99e0 <__asan_cplus_demangle_type+0x290>
    a418:	add	x3, x3, #0x3
    a41c:	ldr	w20, [x19, #76]
    a420:	mov	w1, #0x1                   	// #1
    a424:	str	x3, [x19, #24]
    a428:	str	w1, [x19, #76]
    a42c:	mov	x0, x19
    a430:	bl	b730 <d_expression_1>
    a434:	str	w20, [x19, #76]
    a438:	mov	x20, x0
    a43c:	cbnz	x0, 9e80 <__asan_cplus_demangle_type+0x730>
    a440:	b	97b4 <__asan_cplus_demangle_type+0x64>
    a444:	ldr	x0, [x19, #24]
    a448:	ldrb	w1, [x0]
    a44c:	cmp	w1, #0x6e
    a450:	b.ne	a460 <__asan_cplus_demangle_type+0xd10>  // b.any
    a454:	add	x1, x0, #0x1
    a458:	str	x1, [x19, #24]
    a45c:	ldrb	w1, [x0, #1]
    a460:	sub	w0, w1, #0x30
    a464:	and	w0, w0, #0xff
    a468:	cmp	w0, #0x9
    a46c:	b.hi	9fb4 <__asan_cplus_demangle_type+0x864>  // b.pmore
    a470:	ldr	x2, [x19, #24]
    a474:	mov	w5, #0xcccd                	// #52429
    a478:	mov	w3, w1
    a47c:	mov	w6, #0x7fffffff            	// #2147483647
    a480:	add	x2, x2, #0x1
    a484:	mov	w1, #0x0                   	// #0
    a488:	movk	w5, #0xcccc, lsl #16
    a48c:	b	a4ac <__asan_cplus_demangle_type+0xd5c>
    a490:	sub	w0, w6, w0
    a494:	mov	w3, w4
    a498:	add	x2, x2, #0x1
    a49c:	umull	x0, w0, w5
    a4a0:	lsr	x0, x0, #35
    a4a4:	cmp	w0, w1
    a4a8:	b.lt	9fb4 <__asan_cplus_demangle_type+0x864>  // b.tstop
    a4ac:	str	x2, [x19, #24]
    a4b0:	add	w1, w1, w1, lsl #2
    a4b4:	ldrb	w4, [x2]
    a4b8:	add	w1, w3, w1, lsl #1
    a4bc:	sub	w1, w1, #0x30
    a4c0:	sub	w0, w4, #0x30
    a4c4:	and	w3, w0, #0xff
    a4c8:	cmp	w3, #0x9
    a4cc:	b.ls	a490 <__asan_cplus_demangle_type+0xd40>  // b.plast
    a4d0:	b	9fb4 <__asan_cplus_demangle_type+0x864>
    a4d4:	ldp	x21, x22, [sp, #32]
    a4d8:	ldr	x23, [sp, #48]
    a4dc:	b	97b4 <__asan_cplus_demangle_type+0x64>
    a4e0:	mov	w0, #0xffffffff            	// #-1
    a4e4:	b	9e78 <__asan_cplus_demangle_type+0x728>
    a4e8:	add	x0, x3, #0x3
    a4ec:	str	x0, [x19, #24]
    a4f0:	ldrb	w0, [x3, #3]
    a4f4:	sub	w1, w0, #0x30
    a4f8:	and	w1, w1, #0xff
    a4fc:	cmp	w1, #0x9
    a500:	b.hi	a51c <__asan_cplus_demangle_type+0xdcc>  // b.pmore
    a504:	mov	w2, #0x1                   	// #1
    a508:	b	9e14 <__asan_cplus_demangle_type+0x6c4>
    a50c:	mov	x20, #0x0                   	// #0
    a510:	b	9d7c <__asan_cplus_demangle_type+0x62c>
    a514:	mov	x20, #0x0                   	// #0
    a518:	b	a310 <__asan_cplus_demangle_type+0xbc0>
    a51c:	mov	w0, #0x0                   	// #0
    a520:	b	9e74 <__asan_cplus_demangle_type+0x724>
    a524:	mov	w0, #0x0                   	// #0
    a528:	b	9e78 <__asan_cplus_demangle_type+0x728>
    a52c:	mov	x0, #0x0                   	// #0
    a530:	str	xzr, [sp, #72]
    a534:	stp	x21, x22, [sp, #32]
    a538:	str	x23, [sp, #48]
    a53c:	ldr	x0, [x0, #8]
    a540:	brk	#0x3e8
    a544:	mov	x0, #0x0                   	// #0
    a548:	stp	x21, x22, [sp, #32]
    a54c:	str	x23, [sp, #48]
    a550:	str	wzr, [x0]
    a554:	brk	#0x3e8

000000000000a558 <d_parmlist>:
    a558:	stp	x29, x30, [sp, #-80]!
    a55c:	mov	x29, sp
    a560:	stp	x19, x20, [sp, #16]
    a564:	mov	x19, x0
    a568:	mov	w0, #0x2e                  	// #46
    a56c:	str	xzr, [sp, #72]
    a570:	ldr	x4, [x19, #24]
    a574:	ldrb	w1, [x4]
    a578:	cmp	w1, #0x45
    a57c:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    a580:	ccmp	w1, w0, #0x4, ne  // ne = any
    a584:	b.eq	a658 <d_parmlist+0x100>  // b.none
    a588:	mov	w20, #0x4f                  	// #79
    a58c:	stp	x21, x22, [sp, #32]
    a590:	add	x22, sp, #0x48
    a594:	mov	w21, #0x18                  	// #24
    a598:	str	x23, [sp, #48]
    a59c:	mov	w23, w0
    a5a0:	b	a5dc <d_parmlist+0x84>
    a5a4:	ldp	x4, x3, [x19, #24]
    a5a8:	smull	x1, w1, w21
    a5ac:	add	x2, x3, x1
    a5b0:	str	wzr, [x2, #4]
    a5b4:	str	w5, [x19, #40]
    a5b8:	str	w23, [x3, x1]
    a5bc:	stp	x0, xzr, [x2, #8]
    a5c0:	str	x2, [x22]
    a5c4:	add	x22, x2, #0x10
    a5c8:	ldrb	w1, [x4]
    a5cc:	cmp	w1, #0x45
    a5d0:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    a5d4:	ccmp	w1, w23, #0x4, ne  // ne = any
    a5d8:	b.eq	a62c <d_parmlist+0xd4>  // b.none
    a5dc:	cmp	w1, #0x52
    a5e0:	mov	x0, x19
    a5e4:	ccmp	w1, w20, #0x4, ne  // ne = any
    a5e8:	b.ne	a5f8 <d_parmlist+0xa0>  // b.any
    a5ec:	ldrb	w1, [x4, #1]
    a5f0:	cmp	w1, #0x45
    a5f4:	b.eq	a62c <d_parmlist+0xd4>  // b.none
    a5f8:	bl	9750 <__asan_cplus_demangle_type>
    a5fc:	cbz	x0, a650 <d_parmlist+0xf8>
    a600:	ldp	w1, w2, [x19, #40]
    a604:	add	w5, w1, #0x1
    a608:	cmp	w1, w2
    a60c:	b.lt	a5a4 <d_parmlist+0x4c>  // b.tstop
    a610:	ldr	x23, [sp, #48]
    a614:	str	xzr, [x22]
    a618:	ldp	x21, x22, [sp, #32]
    a61c:	mov	x0, #0x0                   	// #0
    a620:	ldp	x19, x20, [sp, #16]
    a624:	ldp	x29, x30, [sp], #80
    a628:	ret
    a62c:	ldr	x0, [sp, #72]
    a630:	cbz	x0, a650 <d_parmlist+0xf8>
    a634:	ldr	x1, [x0, #16]
    a638:	cbz	x1, a668 <d_parmlist+0x110>
    a63c:	ldp	x19, x20, [sp, #16]
    a640:	ldp	x21, x22, [sp, #32]
    a644:	ldr	x23, [sp, #48]
    a648:	ldp	x29, x30, [sp], #80
    a64c:	ret
    a650:	ldp	x21, x22, [sp, #32]
    a654:	ldr	x23, [sp, #48]
    a658:	mov	x0, #0x0                   	// #0
    a65c:	ldp	x19, x20, [sp, #16]
    a660:	ldp	x29, x30, [sp], #80
    a664:	ret
    a668:	ldr	x1, [x0, #8]
    a66c:	ldr	w2, [x1]
    a670:	cmp	w2, #0x27
    a674:	b.ne	a63c <d_parmlist+0xe4>  // b.any
    a678:	ldr	x1, [x1, #8]
    a67c:	ldr	w2, [x1, #28]
    a680:	cmp	w2, #0x9
    a684:	b.ne	a63c <d_parmlist+0xe4>  // b.any
    a688:	ldr	w2, [x1, #8]
    a68c:	ldr	w1, [x19, #72]
    a690:	ldp	x21, x22, [sp, #32]
    a694:	sub	w1, w1, w2
    a698:	ldr	x23, [sp, #48]
    a69c:	str	w1, [x19, #72]
    a6a0:	str	xzr, [x0, #8]
    a6a4:	b	a620 <d_parmlist+0xc8>

000000000000a6a8 <d_operator_name>:
    a6a8:	stp	x29, x30, [sp, #-48]!
    a6ac:	mov	x29, sp
    a6b0:	ldr	x1, [x0, #24]
    a6b4:	stp	x19, x20, [sp, #16]
    a6b8:	mov	x19, x0
    a6bc:	ldrb	w10, [x1]
    a6c0:	cbz	w10, a78c <d_operator_name+0xe4>
    a6c4:	add	x2, x1, #0x1
    a6c8:	str	x2, [x0, #24]
    a6cc:	ldrb	w10, [x1, #1]
    a6d0:	ldrb	w8, [x1]
    a6d4:	cbnz	w10, a794 <d_operator_name+0xec>
    a6d8:	adrp	x5, 5c8 <d_compact_number+0x58>
    a6dc:	mov	w4, #0x43                  	// #67
    a6e0:	mov	w2, #0x0                   	// #0
    a6e4:	mov	w7, #0x18                  	// #24
    a6e8:	ldr	x5, [x5]
    a6ec:	nop
    a6f0:	sub	w1, w4, w2
    a6f4:	add	w1, w1, w1, lsr #31
    a6f8:	add	w1, w2, w1, asr #1
    a6fc:	smull	x3, w1, w7
    a700:	add	x9, x3, x5
    a704:	ldr	x3, [x3, x5]
    a708:	ldrb	w6, [x3]
    a70c:	cmp	w6, w8
    a710:	b.eq	a738 <d_operator_name+0x90>  // b.none
    a714:	b.ls	a784 <d_operator_name+0xdc>  // b.plast
    a718:	mov	w4, w1
    a71c:	cmp	w2, w4
    a720:	b.ne	a6f0 <d_operator_name+0x48>  // b.any
    a724:	mov	x20, #0x0                   	// #0
    a728:	mov	x0, x20
    a72c:	ldp	x19, x20, [sp, #16]
    a730:	ldp	x29, x30, [sp], #48
    a734:	ret
    a738:	ldrb	w3, [x3, #1]
    a73c:	cmp	w3, w10
    a740:	b.ne	a714 <d_operator_name+0x6c>  // b.any
    a744:	ldp	w0, w1, [x19, #40]
    a748:	cmp	w0, w1
    a74c:	b.ge	a724 <d_operator_name+0x7c>  // b.tcont
    a750:	ldr	x1, [x19, #32]
    a754:	smull	x7, w0, w7
    a758:	add	w0, w0, #0x1
    a75c:	mov	w2, #0x32                  	// #50
    a760:	add	x20, x1, x7
    a764:	str	wzr, [x20, #4]
    a768:	str	w0, [x19, #40]
    a76c:	mov	x0, x20
    a770:	str	w2, [x1, x7]
    a774:	str	x9, [x20, #8]
    a778:	ldp	x19, x20, [sp, #16]
    a77c:	ldp	x29, x30, [sp], #48
    a780:	ret
    a784:	add	w2, w1, #0x1
    a788:	b	a71c <d_operator_name+0x74>
    a78c:	mov	w8, #0x0                   	// #0
    a790:	b	a6d8 <d_operator_name+0x30>
    a794:	str	x21, [sp, #32]
    a798:	add	x2, x1, #0x2
    a79c:	str	x2, [x0, #24]
    a7a0:	cmp	w8, #0x76
    a7a4:	ldrb	w10, [x1, #1]
    a7a8:	b.ne	a7c4 <d_operator_name+0x11c>  // b.any
    a7ac:	sub	w21, w10, #0x30
    a7b0:	and	w1, w21, #0xff
    a7b4:	cmp	w1, #0x9
    a7b8:	b.ls	a820 <d_operator_name+0x178>  // b.plast
    a7bc:	ldr	x21, [sp, #32]
    a7c0:	b	a6d8 <d_operator_name+0x30>
    a7c4:	cmp	w10, #0x76
    a7c8:	mov	w1, #0x63                  	// #99
    a7cc:	ccmp	w8, w1, #0x0, eq  // eq = none
    a7d0:	b.ne	a7bc <d_operator_name+0x114>  // b.any
    a7d4:	ldp	w1, w21, [x0, #76]
    a7d8:	cmp	w1, #0x0
    a7dc:	cset	w1, eq  // eq = none
    a7e0:	str	w1, [x0, #80]
    a7e4:	bl	9750 <__asan_cplus_demangle_type>
    a7e8:	mov	x2, x0
    a7ec:	ldr	w1, [x19, #80]
    a7f0:	mov	x3, #0x0                   	// #0
    a7f4:	cbz	w1, a864 <d_operator_name+0x1bc>
    a7f8:	mov	x0, x19
    a7fc:	mov	w1, #0x35                  	// #53
    a800:	bl	0 <d_make_comp>
    a804:	mov	x20, x0
    a808:	str	w21, [x19, #80]
    a80c:	mov	x0, x20
    a810:	ldp	x19, x20, [sp, #16]
    a814:	ldr	x21, [sp, #32]
    a818:	ldp	x29, x30, [sp], #48
    a81c:	ret
    a820:	bl	9170 <d_source_name>
    a824:	mov	x2, x0
    a828:	ldp	w20, w0, [x19, #40]
    a82c:	cmp	w20, w0
    a830:	b.ge	a878 <d_operator_name+0x1d0>  // b.tcont
    a834:	ldr	x1, [x19, #32]
    a838:	mov	w3, #0x18                  	// #24
    a83c:	add	w0, w20, #0x1
    a840:	smaddl	x20, w20, w3, x1
    a844:	str	wzr, [x20, #4]
    a848:	str	w0, [x19, #40]
    a84c:	mov	w1, w21
    a850:	mov	x0, x20
    a854:	bl	96a0 <__asan_cplus_demangle_fill_extended_operator>
    a858:	ldr	x21, [sp, #32]
    a85c:	cbnz	w0, a728 <d_operator_name+0x80>
    a860:	b	a724 <d_operator_name+0x7c>
    a864:	mov	x0, x19
    a868:	mov	w1, #0x34                  	// #52
    a86c:	bl	0 <d_make_comp>
    a870:	mov	x20, x0
    a874:	b	a808 <d_operator_name+0x160>
    a878:	mov	x20, #0x0                   	// #0
    a87c:	b	a84c <d_operator_name+0x1a4>

000000000000a880 <d_unqualified_name>:
    a880:	stp	x29, x30, [sp, #-64]!
    a884:	mov	x29, sp
    a888:	ldr	x3, [x0, #24]
    a88c:	stp	x19, x20, [sp, #16]
    a890:	mov	x19, x0
    a894:	str	x23, [sp, #48]
    a898:	ldrb	w4, [x3]
    a89c:	sub	w1, w4, #0x30
    a8a0:	and	w1, w1, #0xff
    a8a4:	cmp	w1, #0x9
    a8a8:	b.ls	a9b8 <d_unqualified_name+0x138>  // b.plast
    a8ac:	sub	w1, w4, #0x61
    a8b0:	and	w1, w1, #0xff
    a8b4:	cmp	w1, #0x19
    a8b8:	b.hi	a904 <d_unqualified_name+0x84>  // b.pmore
    a8bc:	cmp	w4, #0x6f
    a8c0:	b.eq	aaa8 <d_unqualified_name+0x228>  // b.none
    a8c4:	mov	x0, x19
    a8c8:	bl	a6a8 <d_operator_name>
    a8cc:	mov	x23, x0
    a8d0:	cbz	x0, a8e0 <d_unqualified_name+0x60>
    a8d4:	ldr	w0, [x0]
    a8d8:	cmp	w0, #0x32
    a8dc:	b.eq	ab5c <d_unqualified_name+0x2dc>  // b.none
    a8e0:	ldr	x3, [x19, #24]
    a8e4:	ldrb	w1, [x3]
    a8e8:	cmp	w1, #0x42
    a8ec:	b.eq	a9d0 <d_unqualified_name+0x150>  // b.none
    a8f0:	mov	x0, x23
    a8f4:	ldp	x19, x20, [sp, #16]
    a8f8:	ldr	x23, [sp, #48]
    a8fc:	ldp	x29, x30, [sp], #64
    a900:	ret
    a904:	sub	w1, w4, #0x43
    a908:	and	w1, w1, #0xff
    a90c:	cmp	w1, #0x1
    a910:	b.ls	aac0 <d_unqualified_name+0x240>  // b.plast
    a914:	cmp	w4, #0x4c
    a918:	b.eq	aa70 <d_unqualified_name+0x1f0>  // b.none
    a91c:	cmp	w4, #0x55
    a920:	b.ne	aa90 <d_unqualified_name+0x210>  // b.any
    a924:	ldrb	w1, [x3, #1]
    a928:	cmp	w1, #0x6c
    a92c:	b.eq	ac3c <d_unqualified_name+0x3bc>  // b.none
    a930:	cmp	w1, #0x74
    a934:	b.ne	aa90 <d_unqualified_name+0x210>  // b.any
    a938:	add	x2, x3, #0x1
    a93c:	str	x2, [x0, #24]
    a940:	ldrb	w1, [x3, #1]
    a944:	cmp	w1, #0x74
    a948:	b.ne	ac30 <d_unqualified_name+0x3b0>  // b.any
    a94c:	add	x3, x3, #0x2
    a950:	str	x3, [x0, #24]
    a954:	bl	570 <d_compact_number>
    a958:	tbnz	w0, #31, ad58 <d_unqualified_name+0x4d8>
    a95c:	ldp	w1, w2, [x19, #40]
    a960:	cmp	w1, w2
    a964:	b.ge	ad58 <d_unqualified_name+0x4d8>  // b.tcont
    a968:	ldp	x3, x4, [x19, #24]
    a96c:	mov	w2, #0x18                  	// #24
    a970:	add	w7, w1, #0x1
    a974:	mov	w5, #0x48                  	// #72
    a978:	smull	x1, w1, w2
    a97c:	sxtw	x0, w0
    a980:	ldp	w2, w6, [x19, #56]
    a984:	add	x23, x4, x1
    a988:	cmp	w2, w6
    a98c:	str	wzr, [x23, #4]
    a990:	str	w7, [x19, #40]
    a994:	str	w5, [x4, x1]
    a998:	str	x0, [x23, #8]
    a99c:	b.ge	ad4c <d_unqualified_name+0x4cc>  // b.tcont
    a9a0:	ldr	x1, [x19, #48]
    a9a4:	add	w0, w2, #0x1
    a9a8:	str	x23, [x1, w2, sxtw #3]
    a9ac:	str	w0, [x19, #56]
    a9b0:	ldrb	w1, [x3]
    a9b4:	b	a8e8 <d_unqualified_name+0x68>
    a9b8:	bl	9170 <d_source_name>
    a9bc:	mov	x23, x0
    a9c0:	ldr	x3, [x19, #24]
    a9c4:	ldrb	w1, [x3]
    a9c8:	cmp	w1, #0x42
    a9cc:	b.ne	a8f0 <d_unqualified_name+0x70>  // b.any
    a9d0:	mov	w20, #0x4c                  	// #76
    a9d4:	stp	x21, x22, [sp, #32]
    a9d8:	mov	w21, #0x18                  	// #24
    a9dc:	ldr	x22, [x19, #64]
    a9e0:	b	aa24 <d_unqualified_name+0x1a4>
    a9e4:	ldp	w1, w2, [x19, #40]
    a9e8:	add	w4, w1, #0x1
    a9ec:	cmp	w1, w2
    a9f0:	b.ge	aa40 <d_unqualified_name+0x1c0>  // b.tcont
    a9f4:	ldr	x3, [x19, #32]
    a9f8:	smull	x1, w1, w21
    a9fc:	add	x2, x3, x1
    aa00:	str	wzr, [x2, #4]
    aa04:	str	w4, [x19, #40]
    aa08:	str	w20, [x3, x1]
    aa0c:	ldr	x3, [x19, #24]
    aa10:	stp	x23, x0, [x2, #8]
    aa14:	mov	x23, x2
    aa18:	ldrb	w1, [x3]
    aa1c:	cmp	w1, #0x42
    aa20:	b.ne	aa54 <d_unqualified_name+0x1d4>  // b.any
    aa24:	add	x3, x3, #0x1
    aa28:	str	x3, [x19, #24]
    aa2c:	mov	x0, x19
    aa30:	bl	9170 <d_source_name>
    aa34:	cmp	x23, #0x0
    aa38:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    aa3c:	b.ne	a9e4 <d_unqualified_name+0x164>  // b.any
    aa40:	ldr	x3, [x19, #24]
    aa44:	mov	x23, #0x0                   	// #0
    aa48:	ldrb	w1, [x3]
    aa4c:	cmp	w1, #0x42
    aa50:	b.eq	aa24 <d_unqualified_name+0x1a4>  // b.none
    aa54:	str	x22, [x19, #64]
    aa58:	mov	x0, x23
    aa5c:	ldp	x19, x20, [sp, #16]
    aa60:	ldp	x21, x22, [sp, #32]
    aa64:	ldr	x23, [sp, #48]
    aa68:	ldp	x29, x30, [sp], #64
    aa6c:	ret
    aa70:	add	x3, x3, #0x1
    aa74:	str	x3, [x0, #24]
    aa78:	bl	9170 <d_source_name>
    aa7c:	mov	x23, x0
    aa80:	cbz	x0, aa90 <d_unqualified_name+0x210>
    aa84:	mov	x0, x19
    aa88:	bl	620 <d_discriminator>
    aa8c:	cbnz	w0, a8e0 <d_unqualified_name+0x60>
    aa90:	mov	x23, #0x0                   	// #0
    aa94:	mov	x0, x23
    aa98:	ldp	x19, x20, [sp, #16]
    aa9c:	ldr	x23, [sp, #48]
    aaa0:	ldp	x29, x30, [sp], #64
    aaa4:	ret
    aaa8:	ldrb	w0, [x3, #1]
    aaac:	cmp	w0, #0x6e
    aab0:	b.ne	a8c4 <d_unqualified_name+0x44>  // b.any
    aab4:	add	x3, x3, #0x2
    aab8:	str	x3, [x19, #24]
    aabc:	b	a8c4 <d_unqualified_name+0x44>
    aac0:	ldr	x2, [x0, #64]
    aac4:	cbz	x2, abbc <d_unqualified_name+0x33c>
    aac8:	ldr	w0, [x2]
    aacc:	cbnz	w0, abb4 <d_unqualified_name+0x334>
    aad0:	ldr	w1, [x2, #16]
    aad4:	ldr	w0, [x19, #72]
    aad8:	add	w0, w0, w1
    aadc:	str	w0, [x19, #72]
    aae0:	ldrb	w1, [x3]
    aae4:	cmp	w1, #0x43
    aae8:	b.eq	abc4 <d_unqualified_name+0x344>  // b.none
    aaec:	cmp	w1, #0x44
    aaf0:	b.ne	ac34 <d_unqualified_name+0x3b4>  // b.any
    aaf4:	ldrb	w0, [x3, #1]
    aaf8:	cmp	w0, #0x32
    aafc:	b.eq	ad64 <d_unqualified_name+0x4e4>  // b.none
    ab00:	b.hi	acec <d_unqualified_name+0x46c>  // b.pmore
    ab04:	cmp	w0, #0x30
    ab08:	b.eq	ad04 <d_unqualified_name+0x484>  // b.none
    ab0c:	cmp	w0, #0x31
    ab10:	mov	w1, #0x2                   	// #2
    ab14:	b.ne	aa90 <d_unqualified_name+0x210>  // b.any
    ab18:	ldp	w23, w0, [x19, #40]
    ab1c:	add	x3, x3, #0x2
    ab20:	str	x3, [x19, #24]
    ab24:	cmp	w23, w0
    ab28:	b.ge	ad6c <d_unqualified_name+0x4ec>  // b.tcont
    ab2c:	ldr	x3, [x19, #32]
    ab30:	mov	w4, #0x18                  	// #24
    ab34:	add	w0, w23, #0x1
    ab38:	smaddl	x23, w23, w4, x3
    ab3c:	str	wzr, [x23, #4]
    ab40:	str	w0, [x19, #40]
    ab44:	mov	x0, x23
    ab48:	bl	9710 <__asan_cplus_demangle_fill_dtor>
    ab4c:	ldr	x3, [x19, #24]
    ab50:	cbz	w0, ac24 <d_unqualified_name+0x3a4>
    ab54:	ldrb	w1, [x3]
    ab58:	b	a8e8 <d_unqualified_name+0x68>
    ab5c:	ldr	x3, [x23, #8]
    ab60:	adrp	x1, 0 <d_make_comp>
    ab64:	ldr	w2, [x19, #72]
    ab68:	add	x1, x1, #0x0
    ab6c:	ldr	x0, [x3]
    ab70:	add	w2, w2, #0x7
    ab74:	ldr	w3, [x3, #16]
    ab78:	add	w2, w2, w3
    ab7c:	str	w2, [x19, #72]
    ab80:	bl	0 <__asan_internal_strcmp>
    ab84:	cbnz	w0, a8e0 <d_unqualified_name+0x60>
    ab88:	mov	x0, x19
    ab8c:	bl	9170 <d_source_name>
    ab90:	mov	x2, x23
    ab94:	mov	x3, x0
    ab98:	mov	w1, #0x37                  	// #55
    ab9c:	mov	x0, x19
    aba0:	bl	0 <d_make_comp>
    aba4:	mov	x23, x0
    aba8:	ldr	x3, [x19, #24]
    abac:	ldrb	w1, [x3]
    abb0:	b	a8e8 <d_unqualified_name+0x68>
    abb4:	cmp	w0, #0x18
    abb8:	b.eq	aad0 <d_unqualified_name+0x250>  // b.none
    abbc:	cmp	w4, #0x43
    abc0:	b.ne	aaf4 <d_unqualified_name+0x274>  // b.any
    abc4:	ldrb	w0, [x3, #1]
    abc8:	cmp	w0, #0x49
    abcc:	b.eq	ad14 <d_unqualified_name+0x494>  // b.none
    abd0:	sub	w1, w0, #0x31
    abd4:	and	w1, w1, #0xff
    abd8:	cmp	w1, #0x4
    abdc:	b.hi	aa90 <d_unqualified_name+0x210>  // b.pmore
    abe0:	sub	w20, w0, #0x30
    abe4:	add	x3, x3, #0x2
    abe8:	str	x3, [x19, #24]
    abec:	ldp	w23, w0, [x19, #40]
    abf0:	cmp	w23, w0
    abf4:	b.ge	ad74 <d_unqualified_name+0x4f4>  // b.tcont
    abf8:	ldr	x1, [x19, #32]
    abfc:	mov	w3, #0x18                  	// #24
    ac00:	add	w0, w23, #0x1
    ac04:	smaddl	x23, w23, w3, x1
    ac08:	str	wzr, [x23, #4]
    ac0c:	str	w0, [x19, #40]
    ac10:	mov	w1, w20
    ac14:	mov	x0, x23
    ac18:	bl	96d0 <__asan_cplus_demangle_fill_ctor>
    ac1c:	ldr	x3, [x19, #24]
    ac20:	cbnz	w0, ab54 <d_unqualified_name+0x2d4>
    ac24:	mov	x23, #0x0                   	// #0
    ac28:	ldrb	w1, [x3]
    ac2c:	b	a8e8 <d_unqualified_name+0x68>
    ac30:	mov	x3, x2
    ac34:	mov	x23, #0x0                   	// #0
    ac38:	b	a8e8 <d_unqualified_name+0x68>
    ac3c:	add	x2, x3, #0x1
    ac40:	str	x2, [x0, #24]
    ac44:	ldrb	w1, [x3, #1]
    ac48:	cmp	w1, #0x6c
    ac4c:	b.ne	ac30 <d_unqualified_name+0x3b0>  // b.any
    ac50:	add	x3, x3, #0x2
    ac54:	str	x3, [x0, #24]
    ac58:	mov	x23, #0x0                   	// #0
    ac5c:	bl	a558 <d_parmlist>
    ac60:	mov	x10, x0
    ac64:	ldr	x3, [x19, #24]
    ac68:	ldrb	w1, [x3]
    ac6c:	cbz	x0, a8e8 <d_unqualified_name+0x68>
    ac70:	cmp	w1, #0x45
    ac74:	b.ne	a8e8 <d_unqualified_name+0x68>  // b.any
    ac78:	add	x3, x3, #0x1
    ac7c:	str	x3, [x19, #24]
    ac80:	mov	x0, x19
    ac84:	bl	570 <d_compact_number>
    ac88:	tbnz	w0, #31, a8e0 <d_unqualified_name+0x60>
    ac8c:	ldp	w1, w2, [x19, #40]
    ac90:	ldr	x3, [x19, #24]
    ac94:	cmp	w1, w2
    ac98:	b.ge	ad4c <d_unqualified_name+0x4cc>  // b.tcont
    ac9c:	mov	w2, #0x18                  	// #24
    aca0:	add	w6, w1, #0x1
    aca4:	ldr	x4, [x19, #32]
    aca8:	smull	x1, w1, w2
    acac:	ldp	w2, w7, [x19, #56]
    acb0:	add	x23, x4, x1
    acb4:	mov	w5, #0x46                  	// #70
    acb8:	cmp	w2, w7
    acbc:	str	wzr, [x23, #4]
    acc0:	str	w6, [x19, #40]
    acc4:	str	w5, [x4, x1]
    acc8:	str	x10, [x23, #8]
    accc:	str	w0, [x23, #16]
    acd0:	b.ge	ad4c <d_unqualified_name+0x4cc>  // b.tcont
    acd4:	ldr	x1, [x19, #48]
    acd8:	add	w0, w2, #0x1
    acdc:	str	x23, [x1, w2, sxtw #3]
    ace0:	str	w0, [x19, #56]
    ace4:	ldrb	w1, [x3]
    ace8:	b	a8e8 <d_unqualified_name+0x68>
    acec:	cmp	w0, #0x34
    acf0:	b.eq	ad0c <d_unqualified_name+0x48c>  // b.none
    acf4:	cmp	w0, #0x35
    acf8:	b.ne	aa90 <d_unqualified_name+0x210>  // b.any
    acfc:	mov	w1, #0x5                   	// #5
    ad00:	b	ab18 <d_unqualified_name+0x298>
    ad04:	mov	w1, #0x1                   	// #1
    ad08:	b	ab18 <d_unqualified_name+0x298>
    ad0c:	mov	w1, #0x4                   	// #4
    ad10:	b	ab18 <d_unqualified_name+0x298>
    ad14:	add	x2, x3, #0x1
    ad18:	str	x2, [x19, #24]
    ad1c:	ldrb	w0, [x3, #2]
    ad20:	sub	w1, w0, #0x31
    ad24:	and	w1, w1, #0xff
    ad28:	cmp	w1, #0x4
    ad2c:	b.hi	ad7c <d_unqualified_name+0x4fc>  // b.pmore
    ad30:	add	x3, x3, #0x3
    ad34:	str	x3, [x19, #24]
    ad38:	sub	w20, w0, #0x30
    ad3c:	mov	x0, x19
    ad40:	bl	9750 <__asan_cplus_demangle_type>
    ad44:	ldr	x2, [x19, #64]
    ad48:	b	abec <d_unqualified_name+0x36c>
    ad4c:	ldrb	w1, [x3]
    ad50:	mov	x23, #0x0                   	// #0
    ad54:	b	a8e8 <d_unqualified_name+0x68>
    ad58:	mov	x23, #0x0                   	// #0
    ad5c:	ldr	x3, [x19, #24]
    ad60:	b	ac28 <d_unqualified_name+0x3a8>
    ad64:	mov	w1, #0x3                   	// #3
    ad68:	b	ab18 <d_unqualified_name+0x298>
    ad6c:	mov	x23, #0x0                   	// #0
    ad70:	b	ab44 <d_unqualified_name+0x2c4>
    ad74:	mov	x23, #0x0                   	// #0
    ad78:	b	ac10 <d_unqualified_name+0x390>
    ad7c:	ldrb	w1, [x3, #1]
    ad80:	mov	x23, #0x0                   	// #0
    ad84:	mov	x3, x2
    ad88:	b	a8e8 <d_unqualified_name+0x68>
    ad8c:	nop

000000000000ad90 <d_function_type>:
    ad90:	stp	x29, x30, [sp, #-32]!
    ad94:	mov	x29, sp
    ad98:	stp	x19, x20, [sp, #16]
    ad9c:	mov	x19, x0
    ada0:	ldr	w0, [x0, #16]
    ada4:	tbnz	w0, #18, ade0 <d_function_type+0x50>
    ada8:	ldr	w2, [x19, #84]
    adac:	cmp	w2, #0x800
    adb0:	b.hi	adf0 <d_function_type+0x60>  // b.pmore
    adb4:	ldr	x1, [x19, #24]
    adb8:	add	w0, w2, #0x1
    adbc:	str	w0, [x19, #84]
    adc0:	mov	x0, #0x0                   	// #0
    adc4:	ldrb	w3, [x1]
    adc8:	cmp	w3, #0x46
    adcc:	b.eq	ae00 <d_function_type+0x70>  // b.none
    add0:	str	w2, [x19, #84]
    add4:	ldp	x19, x20, [sp, #16]
    add8:	ldp	x29, x30, [sp], #32
    addc:	ret
    ade0:	ldr	x1, [x19, #24]
    ade4:	ldrb	w0, [x1]
    ade8:	cmp	w0, #0x46
    adec:	b.eq	ae00 <d_function_type+0x70>  // b.none
    adf0:	mov	x0, #0x0                   	// #0
    adf4:	ldp	x19, x20, [sp, #16]
    adf8:	ldp	x29, x30, [sp], #32
    adfc:	ret
    ae00:	add	x0, x1, #0x1
    ae04:	str	x0, [x19, #24]
    ae08:	ldrb	w2, [x1, #1]
    ae0c:	cmp	w2, #0x59
    ae10:	b.ne	ae20 <d_function_type+0x90>  // b.any
    ae14:	add	x0, x1, #0x2
    ae18:	str	x0, [x19, #24]
    ae1c:	ldrb	w2, [x1, #2]
    ae20:	cmp	w2, #0x4a
    ae24:	b.ne	ae30 <d_function_type+0xa0>  // b.any
    ae28:	add	x0, x0, #0x1
    ae2c:	str	x0, [x19, #24]
    ae30:	mov	x0, x19
    ae34:	bl	9750 <__asan_cplus_demangle_type>
    ae38:	mov	x20, x0
    ae3c:	cbz	x0, aee8 <d_function_type+0x158>
    ae40:	mov	x0, x19
    ae44:	bl	a558 <d_parmlist>
    ae48:	mov	x3, x0
    ae4c:	cbz	x0, aee8 <d_function_type+0x158>
    ae50:	mov	x2, x20
    ae54:	mov	x0, x19
    ae58:	mov	w1, #0x29                  	// #41
    ae5c:	bl	0 <d_make_comp>
    ae60:	ldr	x2, [x19, #24]
    ae64:	mov	w3, #0x4f                  	// #79
    ae68:	ldrb	w1, [x2]
    ae6c:	cmp	w1, #0x52
    ae70:	ccmp	w1, w3, #0x4, ne  // ne = any
    ae74:	b.ne	aeb8 <d_function_type+0x128>  // b.any
    ae78:	ldr	w4, [x19, #72]
    ae7c:	cmp	w1, #0x52
    ae80:	mov	w1, #0x20                  	// #32
    ae84:	add	w3, w4, #0x3
    ae88:	b.ne	ae94 <d_function_type+0x104>  // b.any
    ae8c:	add	w3, w4, #0x2
    ae90:	mov	w1, #0x1f                  	// #31
    ae94:	add	x2, x2, #0x1
    ae98:	str	x2, [x19, #24]
    ae9c:	str	w3, [x19, #72]
    aea0:	mov	x2, x0
    aea4:	mov	x3, #0x0                   	// #0
    aea8:	mov	x0, x19
    aeac:	bl	0 <d_make_comp>
    aeb0:	ldr	x2, [x19, #24]
    aeb4:	ldrb	w1, [x2]
    aeb8:	cmp	w1, #0x45
    aebc:	b.eq	aedc <d_function_type+0x14c>  // b.none
    aec0:	mov	x0, #0x0                   	// #0
    aec4:	ldr	w1, [x19, #16]
    aec8:	tbnz	w1, #18, adf4 <d_function_type+0x64>
    aecc:	ldr	w2, [x19, #84]
    aed0:	sub	w2, w2, #0x1
    aed4:	str	w2, [x19, #84]
    aed8:	b	add4 <d_function_type+0x44>
    aedc:	add	x2, x2, #0x1
    aee0:	str	x2, [x19, #24]
    aee4:	b	aec4 <d_function_type+0x134>
    aee8:	mov	x0, #0x0                   	// #0
    aeec:	b	ae60 <d_function_type+0xd0>

000000000000aef0 <d_exprlist>:
    aef0:	stp	x29, x30, [sp, #-112]!
    aef4:	mov	x29, sp
    aef8:	ldr	x2, [x0, #24]
    aefc:	stp	x19, x20, [sp, #16]
    af00:	mov	x19, x0
    af04:	str	xzr, [sp, #104]
    af08:	ldrb	w3, [x2]
    af0c:	cmp	w3, w1, uxtb
    af10:	b.eq	b5ac <d_exprlist+0x6bc>  // b.none
    af14:	stp	x21, x22, [sp, #32]
    af18:	add	x21, sp, #0x68
    af1c:	mov	w22, #0x1                   	// #1
    af20:	stp	x23, x24, [sp, #48]
    af24:	adrp	x24, 0 <d_make_comp>
    af28:	and	w23, w1, #0xff
    af2c:	add	x24, x24, #0x0
    af30:	stp	x25, x26, [sp, #64]
    af34:	adrp	x25, 0 <d_make_comp>
    af38:	add	x25, x25, #0x0
    af3c:	stp	x27, x28, [sp, #80]
    af40:	ldr	w26, [x19, #76]
    af44:	str	w22, [x19, #76]
    af48:	ldrb	w0, [x2]
    af4c:	cmp	w0, #0x4c
    af50:	b.eq	b0dc <d_exprlist+0x1ec>  // b.none
    af54:	cmp	w0, #0x54
    af58:	b.eq	b178 <d_exprlist+0x288>  // b.none
    af5c:	cmp	w0, #0x73
    af60:	b.eq	b074 <d_exprlist+0x184>  // b.none
    af64:	cmp	w0, #0x66
    af68:	b.ne	afcc <d_exprlist+0xdc>  // b.any
    af6c:	ldrb	w0, [x2, #1]
    af70:	cmp	w0, #0x70
    af74:	b.eq	b188 <d_exprlist+0x298>  // b.none
    af78:	mov	x0, x19
    af7c:	bl	a6a8 <d_operator_name>
    af80:	mov	x20, x0
    af84:	cbz	x0, afa8 <d_exprlist+0xb8>
    af88:	ldr	w0, [x0]
    af8c:	cmp	w0, #0x32
    af90:	b.eq	b2a0 <d_exprlist+0x3b0>  // b.none
    af94:	cmp	w0, #0x33
    af98:	b.eq	b334 <d_exprlist+0x444>  // b.none
    af9c:	cmp	w0, #0x34
    afa0:	b.eq	b4a4 <d_exprlist+0x5b4>  // b.none
    afa4:	mov	x20, #0x0                   	// #0
    afa8:	str	w26, [x19, #76]
    afac:	mov	x0, x20
    afb0:	ldp	x19, x20, [sp, #16]
    afb4:	ldp	x21, x22, [sp, #32]
    afb8:	ldp	x23, x24, [sp, #48]
    afbc:	ldp	x25, x26, [sp, #64]
    afc0:	ldp	x27, x28, [sp, #80]
    afc4:	ldp	x29, x30, [sp], #112
    afc8:	ret
    afcc:	sub	w1, w0, #0x30
    afd0:	and	w1, w1, #0xff
    afd4:	cmp	w1, #0x9
    afd8:	b.hi	b0f8 <d_exprlist+0x208>  // b.pmore
    afdc:	mov	x0, x19
    afe0:	bl	a880 <d_unqualified_name>
    afe4:	mov	x20, x0
    afe8:	cbz	x0, afa8 <d_exprlist+0xb8>
    afec:	ldr	x0, [x19, #24]
    aff0:	ldrb	w1, [x0]
    aff4:	cmp	w1, #0x49
    aff8:	b.eq	b1f0 <d_exprlist+0x300>  // b.none
    affc:	ldp	w1, w0, [x19, #40]
    b000:	str	w26, [x19, #76]
    b004:	cmp	w1, w0
    b008:	b.ge	b0b4 <d_exprlist+0x1c4>  // b.tcont
    b00c:	ldp	x2, x3, [x19, #24]
    b010:	mov	w0, #0x18                  	// #24
    b014:	add	w5, w1, #0x1
    b018:	mov	w4, #0x2e                  	// #46
    b01c:	smull	x1, w1, w0
    b020:	add	x0, x3, x1
    b024:	str	wzr, [x0, #4]
    b028:	str	w5, [x19, #40]
    b02c:	str	w4, [x3, x1]
    b030:	stp	x20, xzr, [x0, #8]
    b034:	str	x0, [x21]
    b038:	add	x21, x0, #0x10
    b03c:	ldrb	w0, [x2]
    b040:	cmp	w0, w23
    b044:	b.ne	af40 <d_exprlist+0x50>  // b.any
    b048:	ldr	x20, [sp, #104]
    b04c:	add	x2, x2, #0x1
    b050:	str	x2, [x19, #24]
    b054:	mov	x0, x20
    b058:	ldp	x19, x20, [sp, #16]
    b05c:	ldp	x21, x22, [sp, #32]
    b060:	ldp	x23, x24, [sp, #48]
    b064:	ldp	x25, x26, [sp, #64]
    b068:	ldp	x27, x28, [sp, #80]
    b06c:	ldp	x29, x30, [sp], #112
    b070:	ret
    b074:	ldrb	w0, [x2, #1]
    b078:	cmp	w0, #0x72
    b07c:	b.eq	b22c <d_exprlist+0x33c>  // b.none
    b080:	cmp	w0, #0x70
    b084:	b.ne	af78 <d_exprlist+0x88>  // b.any
    b088:	add	x2, x2, #0x2
    b08c:	str	x2, [x19, #24]
    b090:	mov	x0, x19
    b094:	bl	b730 <d_expression_1>
    b098:	mov	x2, x0
    b09c:	mov	x3, #0x0                   	// #0
    b0a0:	mov	x0, x19
    b0a4:	mov	w1, #0x4b                  	// #75
    b0a8:	bl	0 <d_make_comp>
    b0ac:	mov	x20, x0
    b0b0:	b	b0e8 <d_exprlist+0x1f8>
    b0b4:	str	xzr, [x21]
    b0b8:	mov	x20, #0x0                   	// #0
    b0bc:	mov	x0, x20
    b0c0:	ldp	x19, x20, [sp, #16]
    b0c4:	ldp	x21, x22, [sp, #32]
    b0c8:	ldp	x23, x24, [sp, #48]
    b0cc:	ldp	x25, x26, [sp, #64]
    b0d0:	ldp	x27, x28, [sp, #80]
    b0d4:	ldp	x29, x30, [sp], #112
    b0d8:	ret
    b0dc:	mov	x0, x19
    b0e0:	bl	d808 <d_expr_primary>
    b0e4:	mov	x20, x0
    b0e8:	str	w26, [x19, #76]
    b0ec:	cbz	x20, afac <d_exprlist+0xbc>
    b0f0:	ldp	w1, w0, [x19, #40]
    b0f4:	b	b004 <d_exprlist+0x114>
    b0f8:	cmp	w0, #0x6f
    b0fc:	b.ne	b118 <d_exprlist+0x228>  // b.any
    b100:	ldrb	w0, [x2, #1]
    b104:	cmp	w0, #0x6e
    b108:	b.ne	af78 <d_exprlist+0x88>  // b.any
    b10c:	add	x2, x2, #0x2
    b110:	str	x2, [x19, #24]
    b114:	b	afdc <d_exprlist+0xec>
    b118:	cmp	w0, #0x69
    b11c:	mov	w1, #0x74                  	// #116
    b120:	ccmp	w0, w1, #0x4, ne  // ne = any
    b124:	b.ne	af78 <d_exprlist+0x88>  // b.any
    b128:	ldrb	w1, [x2, #1]
    b12c:	cmp	w1, #0x6c
    b130:	b.ne	af78 <d_exprlist+0x88>  // b.any
    b134:	add	x1, x2, #0x2
    b138:	str	x1, [x19, #24]
    b13c:	cmp	w0, #0x74
    b140:	mov	x20, #0x0                   	// #0
    b144:	b.eq	b4d0 <d_exprlist+0x5e0>  // b.none
    b148:	ldrb	w0, [x1, #1]
    b14c:	cbz	w0, afa4 <d_exprlist+0xb4>
    b150:	mov	w1, #0x45                  	// #69
    b154:	mov	x0, x19
    b158:	bl	aef0 <d_exprlist>
    b15c:	mov	x3, x0
    b160:	mov	x2, x20
    b164:	mov	x0, x19
    b168:	mov	w1, #0x31                  	// #49
    b16c:	bl	0 <d_make_comp>
    b170:	mov	x20, x0
    b174:	b	b0e8 <d_exprlist+0x1f8>
    b178:	mov	x0, x19
    b17c:	bl	748 <d_template_param>
    b180:	mov	x20, x0
    b184:	b	b0e8 <d_exprlist+0x1f8>
    b188:	add	x0, x2, #0x2
    b18c:	str	x0, [x19, #24]
    b190:	ldrb	w0, [x2, #2]
    b194:	cmp	w0, #0x54
    b198:	b.eq	b21c <d_exprlist+0x32c>  // b.none
    b19c:	mov	x0, x19
    b1a0:	bl	570 <d_compact_number>
    b1a4:	mvn	x1, x0
    b1a8:	tst	x1, #0x7fffffff
    b1ac:	b.eq	afa4 <d_exprlist+0xb4>  // b.none
    b1b0:	add	w3, w0, #0x1
    b1b4:	ldp	w2, w0, [x19, #40]
    b1b8:	cmp	w2, w0
    b1bc:	b.ge	afa4 <d_exprlist+0xb4>  // b.tcont
    b1c0:	mov	w5, #0x18                  	// #24
    b1c4:	add	w1, w2, #0x1
    b1c8:	ldr	x4, [x19, #32]
    b1cc:	smull	x2, w2, w5
    b1d0:	mov	w5, #0x6                   	// #6
    b1d4:	sxtw	x3, w3
    b1d8:	add	x20, x4, x2
    b1dc:	str	wzr, [x20, #4]
    b1e0:	str	w1, [x19, #40]
    b1e4:	str	w5, [x4, x2]
    b1e8:	str	x3, [x20, #8]
    b1ec:	b	b000 <d_exprlist+0x110>
    b1f0:	add	x0, x0, #0x1
    b1f4:	str	x0, [x19, #24]
    b1f8:	mov	x0, x19
    b1fc:	bl	c160 <d_template_args_1>
    b200:	mov	x3, x0
    b204:	mov	x2, x20
    b208:	mov	x0, x19
    b20c:	mov	w1, #0x4                   	// #4
    b210:	bl	0 <d_make_comp>
    b214:	mov	x20, x0
    b218:	b	b0e8 <d_exprlist+0x1f8>
    b21c:	add	x2, x2, #0x3
    b220:	mov	w3, #0x0                   	// #0
    b224:	str	x2, [x19, #24]
    b228:	b	b1b4 <d_exprlist+0x2c4>
    b22c:	add	x2, x2, #0x2
    b230:	str	x2, [x19, #24]
    b234:	mov	x0, x19
    b238:	bl	9750 <__asan_cplus_demangle_type>
    b23c:	mov	x20, x0
    b240:	mov	x0, x19
    b244:	bl	a880 <d_unqualified_name>
    b248:	ldr	x1, [x19, #24]
    b24c:	mov	x27, x0
    b250:	mov	x3, x27
    b254:	ldrb	w0, [x1]
    b258:	cmp	w0, #0x49
    b25c:	b.ne	b288 <d_exprlist+0x398>  // b.any
    b260:	add	x1, x1, #0x1
    b264:	str	x1, [x19, #24]
    b268:	mov	x0, x19
    b26c:	bl	c160 <d_template_args_1>
    b270:	mov	x3, x0
    b274:	mov	x2, x27
    b278:	mov	x0, x19
    b27c:	mov	w1, #0x4                   	// #4
    b280:	bl	0 <d_make_comp>
    b284:	mov	x3, x0
    b288:	mov	x2, x20
    b28c:	mov	x0, x19
    b290:	mov	w1, #0x1                   	// #1
    b294:	bl	0 <d_make_comp>
    b298:	mov	x20, x0
    b29c:	b	b0e8 <d_exprlist+0x1f8>
    b2a0:	ldr	x3, [x20, #8]
    b2a4:	adrp	x1, 0 <d_make_comp>
    b2a8:	ldr	w0, [x19, #72]
    b2ac:	add	x1, x1, #0x0
    b2b0:	ldr	w2, [x3, #16]
    b2b4:	ldr	x28, [x3]
    b2b8:	sub	w2, w2, #0x2
    b2bc:	add	w0, w0, w2
    b2c0:	str	w0, [x19, #72]
    b2c4:	mov	x0, x28
    b2c8:	bl	0 <__asan_internal_strcmp>
    b2cc:	cbz	w0, b5cc <d_exprlist+0x6dc>
    b2d0:	ldr	w1, [x20]
    b2d4:	cmp	w1, #0x33
    b2d8:	b.eq	b338 <d_exprlist+0x448>  // b.none
    b2dc:	cmp	w1, #0x34
    b2e0:	b.eq	b4ec <d_exprlist+0x5fc>  // b.none
    b2e4:	cmp	w1, #0x32
    b2e8:	b.ne	afa4 <d_exprlist+0xb4>  // b.any
    b2ec:	ldr	x0, [x20, #8]
    b2f0:	ldr	w0, [x0, #20]
    b2f4:	cmp	w0, #0x2
    b2f8:	b.eq	b348 <d_exprlist+0x458>  // b.none
    b2fc:	b.gt	b3c8 <d_exprlist+0x4d8>
    b300:	cbz	w0, b580 <d_exprlist+0x690>
    b304:	cmp	w0, #0x1
    b308:	b.ne	afa4 <d_exprlist+0xb4>  // b.any
    b30c:	cbnz	x28, b550 <d_exprlist+0x660>
    b310:	mov	x0, x19
    b314:	bl	b730 <d_expression_1>
    b318:	mov	x3, x0
    b31c:	mov	x2, x20
    b320:	mov	x0, x19
    b324:	mov	w1, #0x37                  	// #55
    b328:	bl	0 <d_make_comp>
    b32c:	mov	x20, x0
    b330:	b	b0e8 <d_exprlist+0x1f8>
    b334:	mov	x28, #0x0                   	// #0
    b338:	ldr	w0, [x20, #8]
    b33c:	mov	w1, #0x33                  	// #51
    b340:	cmp	w0, #0x2
    b344:	b.ne	b2fc <d_exprlist+0x40c>  // b.any
    b348:	cbz	x28, afa4 <d_exprlist+0xb4>
    b34c:	ldr	x0, [x20, #8]
    b350:	ldr	x0, [x0]
    b354:	ldrb	w1, [x0, #1]
    b358:	cmp	w1, #0x63
    b35c:	b.eq	b67c <d_exprlist+0x78c>  // b.none
    b360:	ldrb	w0, [x28]
    b364:	cmp	w0, #0x66
    b368:	b.eq	b6dc <d_exprlist+0x7ec>  // b.none
    b36c:	mov	x0, x19
    b370:	bl	b730 <d_expression_1>
    b374:	mov	x27, x0
    b378:	mov	x1, x25
    b37c:	mov	x0, x28
    b380:	bl	0 <__asan_internal_strcmp>
    b384:	cbnz	w0, b5dc <d_exprlist+0x6ec>
    b388:	mov	x0, x19
    b38c:	mov	w1, #0x45                  	// #69
    b390:	bl	aef0 <d_exprlist>
    b394:	mov	x28, x0
    b398:	mov	x3, x28
    b39c:	mov	x2, x27
    b3a0:	mov	w1, #0x39                  	// #57
    b3a4:	mov	x0, x19
    b3a8:	bl	0 <d_make_comp>
    b3ac:	mov	x3, x0
    b3b0:	mov	x2, x20
    b3b4:	mov	x0, x19
    b3b8:	mov	w1, #0x38                  	// #56
    b3bc:	bl	0 <d_make_comp>
    b3c0:	mov	x20, x0
    b3c4:	b	b0e8 <d_exprlist+0x1f8>
    b3c8:	cmp	w0, #0x3
    b3cc:	b.ne	afa4 <d_exprlist+0xb4>  // b.any
    b3d0:	cbz	x28, afa4 <d_exprlist+0xb4>
    b3d4:	adrp	x1, 0 <d_make_comp>
    b3d8:	mov	x0, x28
    b3dc:	add	x1, x1, #0x0
    b3e0:	bl	0 <__asan_internal_strcmp>
    b3e4:	cbz	w0, b6ac <d_exprlist+0x7bc>
    b3e8:	ldrb	w0, [x28]
    b3ec:	cmp	w0, #0x66
    b3f0:	b.eq	b6ec <d_exprlist+0x7fc>  // b.none
    b3f4:	cmp	w0, #0x6e
    b3f8:	b.ne	afa4 <d_exprlist+0xb4>  // b.any
    b3fc:	ldrb	w0, [x28, #1]
    b400:	mov	w1, #0x61                  	// #97
    b404:	cmp	w0, #0x77
    b408:	ccmp	w0, w1, #0x4, ne  // ne = any
    b40c:	b.ne	afa4 <d_exprlist+0xb4>  // b.any
    b410:	mov	w1, #0x5f                  	// #95
    b414:	mov	x0, x19
    b418:	bl	aef0 <d_exprlist>
    b41c:	mov	x27, x0
    b420:	mov	x0, x19
    b424:	bl	9750 <__asan_cplus_demangle_type>
    b428:	ldr	x1, [x19, #24]
    b42c:	mov	x28, x0
    b430:	ldrb	w0, [x1]
    b434:	cmp	w0, #0x45
    b438:	b.eq	b720 <d_exprlist+0x830>  // b.none
    b43c:	cmp	w0, #0x70
    b440:	b.eq	b6f8 <d_exprlist+0x808>  // b.none
    b444:	cmp	w0, #0x69
    b448:	b.ne	afa4 <d_exprlist+0xb4>  // b.any
    b44c:	ldrb	w0, [x1, #1]
    b450:	cmp	w0, #0x6c
    b454:	b.ne	afa4 <d_exprlist+0xb4>  // b.any
    b458:	mov	x0, x19
    b45c:	bl	b730 <d_expression_1>
    b460:	mov	x3, x0
    b464:	mov	x2, x28
    b468:	mov	w1, #0x3c                  	// #60
    b46c:	mov	x0, x19
    b470:	bl	0 <d_make_comp>
    b474:	mov	x2, x27
    b478:	mov	x3, x0
    b47c:	mov	w1, #0x3b                  	// #59
    b480:	mov	x0, x19
    b484:	bl	0 <d_make_comp>
    b488:	mov	x3, x0
    b48c:	mov	x2, x20
    b490:	mov	x0, x19
    b494:	mov	w1, #0x3a                  	// #58
    b498:	bl	0 <d_make_comp>
    b49c:	mov	x20, x0
    b4a0:	b	b0e8 <d_exprlist+0x1f8>
    b4a4:	ldr	x0, [x19, #24]
    b4a8:	ldrb	w1, [x0]
    b4ac:	cmp	w1, #0x5f
    b4b0:	b.ne	b310 <d_exprlist+0x420>  // b.any
    b4b4:	add	x0, x0, #0x1
    b4b8:	str	x0, [x19, #24]
    b4bc:	mov	w1, #0x45                  	// #69
    b4c0:	mov	x0, x19
    b4c4:	bl	aef0 <d_exprlist>
    b4c8:	mov	x3, x0
    b4cc:	b	b31c <d_exprlist+0x42c>
    b4d0:	mov	x0, x19
    b4d4:	bl	9750 <__asan_cplus_demangle_type>
    b4d8:	ldr	x1, [x19, #24]
    b4dc:	mov	x20, x0
    b4e0:	ldrb	w0, [x1, #1]
    b4e4:	cbnz	w0, b150 <d_exprlist+0x260>
    b4e8:	b	afa4 <d_exprlist+0xb4>
    b4ec:	cbz	x28, b4a4 <d_exprlist+0x5b4>
    b4f0:	ldrb	w0, [x28]
    b4f4:	mov	w2, #0x6d                  	// #109
    b4f8:	cmp	w0, #0x70
    b4fc:	ccmp	w0, w2, #0x4, ne  // ne = any
    b500:	b.eq	b568 <d_exprlist+0x678>  // b.none
    b504:	ldr	x0, [x19, #24]
    b508:	ldrb	w1, [x0]
    b50c:	cmp	w1, #0x5f
    b510:	b.eq	b4b4 <d_exprlist+0x5c4>  // b.none
    b514:	mov	w27, #0x0                   	// #0
    b518:	mov	x0, x28
    b51c:	mov	x1, x24
    b520:	bl	0 <__asan_internal_strcmp>
    b524:	cbz	w0, b59c <d_exprlist+0x6ac>
    b528:	mov	x0, x19
    b52c:	bl	b730 <d_expression_1>
    b530:	mov	x3, x0
    b534:	cbz	w27, b31c <d_exprlist+0x42c>
    b538:	mov	x2, x3
    b53c:	mov	x0, x19
    b540:	mov	w1, #0x39                  	// #57
    b544:	bl	0 <d_make_comp>
    b548:	mov	x3, x0
    b54c:	b	b31c <d_exprlist+0x42c>
    b550:	ldrb	w0, [x28]
    b554:	mov	w2, #0x6d                  	// #109
    b558:	cmp	w0, #0x70
    b55c:	ccmp	w0, w2, #0x4, ne  // ne = any
    b560:	b.ne	b514 <d_exprlist+0x624>  // b.any
    b564:	nop
    b568:	ldrb	w2, [x28, #1]
    b56c:	cmp	w2, w0
    b570:	b.eq	b65c <d_exprlist+0x76c>  // b.none
    b574:	cmp	w1, #0x34
    b578:	b.ne	b514 <d_exprlist+0x624>  // b.any
    b57c:	b	b504 <d_exprlist+0x614>
    b580:	mov	x2, x20
    b584:	mov	x0, x19
    b588:	mov	x3, #0x0                   	// #0
    b58c:	mov	w1, #0x36                  	// #54
    b590:	bl	0 <d_make_comp>
    b594:	mov	x20, x0
    b598:	b	b0e8 <d_exprlist+0x1f8>
    b59c:	mov	x0, x19
    b5a0:	bl	c160 <d_template_args_1>
    b5a4:	mov	x3, x0
    b5a8:	b	b534 <d_exprlist+0x644>
    b5ac:	add	x2, x2, #0x1
    b5b0:	str	x2, [x0, #24]
    b5b4:	ldp	x19, x20, [sp, #16]
    b5b8:	mov	x3, #0x0                   	// #0
    b5bc:	ldp	x29, x30, [sp], #112
    b5c0:	mov	w1, #0x2e                  	// #46
    b5c4:	mov	x2, #0x0                   	// #0
    b5c8:	b	0 <d_make_comp>
    b5cc:	mov	x0, x19
    b5d0:	bl	9750 <__asan_cplus_demangle_type>
    b5d4:	mov	x3, x0
    b5d8:	b	b31c <d_exprlist+0x42c>
    b5dc:	adrp	x1, 0 <d_make_comp>
    b5e0:	mov	x0, x28
    b5e4:	add	x1, x1, #0x0
    b5e8:	bl	0 <__asan_internal_strcmp>
    b5ec:	cbz	w0, b614 <d_exprlist+0x724>
    b5f0:	adrp	x1, 0 <d_make_comp>
    b5f4:	mov	x0, x28
    b5f8:	add	x1, x1, #0x0
    b5fc:	bl	0 <__asan_internal_strcmp>
    b600:	cbz	w0, b614 <d_exprlist+0x724>
    b604:	mov	x0, x19
    b608:	bl	b730 <d_expression_1>
    b60c:	mov	x28, x0
    b610:	b	b398 <d_exprlist+0x4a8>
    b614:	mov	x0, x19
    b618:	bl	a880 <d_unqualified_name>
    b61c:	ldr	x1, [x19, #24]
    b620:	mov	x28, x0
    b624:	ldrb	w0, [x1]
    b628:	cmp	w0, #0x49
    b62c:	b.ne	b398 <d_exprlist+0x4a8>  // b.any
    b630:	add	x1, x1, #0x1
    b634:	str	x1, [x19, #24]
    b638:	mov	x0, x19
    b63c:	bl	c160 <d_template_args_1>
    b640:	mov	x3, x0
    b644:	mov	x2, x28
    b648:	mov	x0, x19
    b64c:	mov	w1, #0x4                   	// #4
    b650:	bl	0 <d_make_comp>
    b654:	mov	x28, x0
    b658:	b	b398 <d_exprlist+0x4a8>
    b65c:	ldr	x0, [x19, #24]
    b660:	mov	w27, #0x1                   	// #1
    b664:	ldrb	w2, [x0]
    b668:	cmp	w2, #0x5f
    b66c:	b.ne	b518 <d_exprlist+0x628>  // b.any
    b670:	add	x0, x0, #0x1
    b674:	str	x0, [x19, #24]
    b678:	b	b574 <d_exprlist+0x684>
    b67c:	ldrb	w0, [x0]
    b680:	sub	w1, w0, #0x63
    b684:	sub	w0, w0, #0x72
    b688:	and	w1, w1, #0xff
    b68c:	and	w0, w0, #0xff
    b690:	cmp	w1, #0x1
    b694:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
    b698:	b.hi	b360 <d_exprlist+0x470>  // b.pmore
    b69c:	mov	x0, x19
    b6a0:	bl	9750 <__asan_cplus_demangle_type>
    b6a4:	mov	x27, x0
    b6a8:	b	b378 <d_exprlist+0x488>
    b6ac:	mov	x0, x19
    b6b0:	bl	b730 <d_expression_1>
    b6b4:	mov	x27, x0
    b6b8:	mov	x0, x19
    b6bc:	bl	b730 <d_expression_1>
    b6c0:	mov	x28, x0
    b6c4:	mov	x0, x19
    b6c8:	bl	b730 <d_expression_1>
    b6cc:	mov	x3, x0
    b6d0:	cbnz	x0, b464 <d_exprlist+0x574>
    b6d4:	mov	x20, #0x0                   	// #0
    b6d8:	b	afa8 <d_exprlist+0xb8>
    b6dc:	mov	x0, x19
    b6e0:	bl	a6a8 <d_operator_name>
    b6e4:	mov	x27, x0
    b6e8:	b	b378 <d_exprlist+0x488>
    b6ec:	mov	x0, x19
    b6f0:	bl	a6a8 <d_operator_name>
    b6f4:	b	b6b4 <d_exprlist+0x7c4>
    b6f8:	ldrb	w0, [x1, #1]
    b6fc:	cmp	w0, #0x69
    b700:	b.ne	afa4 <d_exprlist+0xb4>  // b.any
    b704:	add	x1, x1, #0x2
    b708:	str	x1, [x19, #24]
    b70c:	mov	x0, x19
    b710:	mov	w1, #0x45                  	// #69
    b714:	bl	aef0 <d_exprlist>
    b718:	mov	x3, x0
    b71c:	b	b464 <d_exprlist+0x574>
    b720:	add	x1, x1, #0x1
    b724:	mov	x3, #0x0                   	// #0
    b728:	str	x1, [x19, #24]
    b72c:	b	b464 <d_exprlist+0x574>

000000000000b730 <d_expression_1>:
    b730:	ldr	x2, [x0, #24]
    b734:	ldrb	w1, [x2]
    b738:	cmp	w1, #0x4c
    b73c:	b.eq	b948 <d_expression_1+0x218>  // b.none
    b740:	cmp	w1, #0x54
    b744:	b.eq	b9cc <d_expression_1+0x29c>  // b.none
    b748:	stp	x29, x30, [sp, #-48]!
    b74c:	cmp	w1, #0x73
    b750:	mov	x29, sp
    b754:	stp	x19, x20, [sp, #16]
    b758:	mov	x19, x0
    b75c:	b.eq	b7fc <d_expression_1+0xcc>  // b.none
    b760:	cmp	w1, #0x66
    b764:	b.eq	b7a8 <d_expression_1+0x78>  // b.none
    b768:	sub	w3, w1, #0x30
    b76c:	and	w3, w3, #0xff
    b770:	cmp	w3, #0x9
    b774:	b.hi	b94c <d_expression_1+0x21c>  // b.pmore
    b778:	mov	x0, x19
    b77c:	bl	a880 <d_unqualified_name>
    b780:	mov	x20, x0
    b784:	cbz	x0, b934 <d_expression_1+0x204>
    b788:	ldr	x0, [x19, #24]
    b78c:	ldrb	w1, [x0]
    b790:	cmp	w1, #0x49
    b794:	b.eq	b9d0 <d_expression_1+0x2a0>  // b.none
    b798:	mov	x0, x20
    b79c:	ldp	x19, x20, [sp, #16]
    b7a0:	ldp	x29, x30, [sp], #48
    b7a4:	ret
    b7a8:	ldrb	w1, [x2, #1]
    b7ac:	cmp	w1, #0x70
    b7b0:	b.eq	b838 <d_expression_1+0x108>  // b.none
    b7b4:	mov	x0, x19
    b7b8:	bl	a6a8 <d_operator_name>
    b7bc:	mov	x20, x0
    b7c0:	cbz	x0, b934 <d_expression_1+0x204>
    b7c4:	ldr	w0, [x0]
    b7c8:	stp	x21, x22, [sp, #32]
    b7cc:	cmp	w0, #0x32
    b7d0:	b.eq	ba88 <d_expression_1+0x358>  // b.none
    b7d4:	cmp	w0, #0x33
    b7d8:	b.eq	bb70 <d_expression_1+0x440>  // b.none
    b7dc:	cmp	w0, #0x34
    b7e0:	b.eq	bbf8 <d_expression_1+0x4c8>  // b.none
    b7e4:	mov	x20, #0x0                   	// #0
    b7e8:	mov	x0, x20
    b7ec:	ldp	x19, x20, [sp, #16]
    b7f0:	ldp	x21, x22, [sp, #32]
    b7f4:	ldp	x29, x30, [sp], #48
    b7f8:	ret
    b7fc:	ldrb	w1, [x2, #1]
    b800:	cmp	w1, #0x72
    b804:	b.eq	b9fc <d_expression_1+0x2cc>  // b.none
    b808:	cmp	w1, #0x70
    b80c:	b.ne	b7b4 <d_expression_1+0x84>  // b.any
    b810:	add	x2, x2, #0x2
    b814:	str	x2, [x0, #24]
    b818:	bl	b730 <d_expression_1>
    b81c:	mov	x2, x0
    b820:	mov	x0, x19
    b824:	mov	x3, #0x0                   	// #0
    b828:	ldp	x19, x20, [sp, #16]
    b82c:	mov	w1, #0x4b                  	// #75
    b830:	ldp	x29, x30, [sp], #48
    b834:	b	0 <d_make_comp>
    b838:	add	x1, x2, #0x2
    b83c:	str	x1, [x0, #24]
    b840:	ldrb	w1, [x2, #2]
    b844:	cmp	w1, #0x54
    b848:	b.eq	bb80 <d_expression_1+0x450>  // b.none
    b84c:	bl	570 <d_compact_number>
    b850:	mvn	x1, x0
    b854:	add	w0, w0, #0x1
    b858:	tst	x1, #0x7fffffff
    b85c:	b.eq	b934 <d_expression_1+0x204>  // b.none
    b860:	ldp	w1, w2, [x19, #40]
    b864:	cmp	w1, w2
    b868:	b.ge	b934 <d_expression_1+0x204>  // b.tcont
    b86c:	mov	w3, #0x18                  	// #24
    b870:	add	w4, w1, #0x1
    b874:	ldr	x2, [x19, #32]
    b878:	smull	x1, w1, w3
    b87c:	mov	w3, #0x6                   	// #6
    b880:	sxtw	x0, w0
    b884:	add	x20, x2, x1
    b888:	str	wzr, [x20, #4]
    b88c:	str	w4, [x19, #40]
    b890:	str	w3, [x2, x1]
    b894:	str	x0, [x20, #8]
    b898:	b	b798 <d_expression_1+0x68>
    b89c:	cmp	w0, #0x3
    b8a0:	b.ne	b7e4 <d_expression_1+0xb4>  // b.any
    b8a4:	cbz	x21, b930 <d_expression_1+0x200>
    b8a8:	adrp	x1, 0 <d_make_comp>
    b8ac:	mov	x0, x21
    b8b0:	add	x1, x1, #0x0
    b8b4:	bl	0 <__asan_internal_strcmp>
    b8b8:	cbz	w0, bdd8 <d_expression_1+0x6a8>
    b8bc:	ldrb	w0, [x21]
    b8c0:	cmp	w0, #0x66
    b8c4:	b.eq	be14 <d_expression_1+0x6e4>  // b.none
    b8c8:	cmp	w0, #0x6e
    b8cc:	b.ne	b930 <d_expression_1+0x200>  // b.any
    b8d0:	ldrb	w0, [x21, #1]
    b8d4:	mov	w1, #0x61                  	// #97
    b8d8:	cmp	w0, #0x77
    b8dc:	ccmp	w0, w1, #0x4, ne  // ne = any
    b8e0:	b.ne	b930 <d_expression_1+0x200>  // b.any
    b8e4:	mov	w1, #0x5f                  	// #95
    b8e8:	mov	x0, x19
    b8ec:	bl	aef0 <d_exprlist>
    b8f0:	mov	x21, x0
    b8f4:	mov	x0, x19
    b8f8:	bl	9750 <__asan_cplus_demangle_type>
    b8fc:	ldr	x1, [x19, #24]
    b900:	mov	x22, x0
    b904:	ldrb	w0, [x1]
    b908:	cmp	w0, #0x45
    b90c:	b.eq	be58 <d_expression_1+0x728>  // b.none
    b910:	cmp	w0, #0x70
    b914:	b.eq	be30 <d_expression_1+0x700>  // b.none
    b918:	cmp	w0, #0x69
    b91c:	b.ne	b930 <d_expression_1+0x200>  // b.any
    b920:	ldrb	w0, [x1, #1]
    b924:	cmp	w0, #0x6c
    b928:	b.eq	bb20 <d_expression_1+0x3f0>  // b.none
    b92c:	nop
    b930:	ldp	x21, x22, [sp, #32]
    b934:	mov	x20, #0x0                   	// #0
    b938:	mov	x0, x20
    b93c:	ldp	x19, x20, [sp, #16]
    b940:	ldp	x29, x30, [sp], #48
    b944:	ret
    b948:	b	d808 <d_expr_primary>
    b94c:	cmp	w1, #0x6f
    b950:	b.ne	b96c <d_expression_1+0x23c>  // b.any
    b954:	ldrb	w0, [x2, #1]
    b958:	cmp	w0, #0x6e
    b95c:	b.ne	b7b4 <d_expression_1+0x84>  // b.any
    b960:	add	x2, x2, #0x2
    b964:	str	x2, [x19, #24]
    b968:	b	b778 <d_expression_1+0x48>
    b96c:	cmp	w1, #0x69
    b970:	mov	w3, #0x74                  	// #116
    b974:	ccmp	w1, w3, #0x4, ne  // ne = any
    b978:	b.ne	b7b4 <d_expression_1+0x84>  // b.any
    b97c:	ldrb	w3, [x2, #1]
    b980:	cmp	w3, #0x6c
    b984:	b.ne	b7b4 <d_expression_1+0x84>  // b.any
    b988:	add	x3, x2, #0x2
    b98c:	str	x3, [x0, #24]
    b990:	cmp	w1, #0x74
    b994:	mov	x20, #0x0                   	// #0
    b998:	b.eq	ba78 <d_expression_1+0x348>  // b.none
    b99c:	ldrb	w0, [x3, #1]
    b9a0:	cbz	w0, b934 <d_expression_1+0x204>
    b9a4:	mov	x0, x19
    b9a8:	mov	w1, #0x45                  	// #69
    b9ac:	bl	aef0 <d_exprlist>
    b9b0:	mov	x3, x0
    b9b4:	mov	x2, x20
    b9b8:	mov	x0, x19
    b9bc:	ldp	x19, x20, [sp, #16]
    b9c0:	mov	w1, #0x31                  	// #49
    b9c4:	ldp	x29, x30, [sp], #48
    b9c8:	b	0 <d_make_comp>
    b9cc:	b	748 <d_template_param>
    b9d0:	add	x0, x0, #0x1
    b9d4:	str	x0, [x19, #24]
    b9d8:	mov	x0, x19
    b9dc:	bl	c160 <d_template_args_1>
    b9e0:	mov	x3, x0
    b9e4:	mov	x2, x20
    b9e8:	mov	x0, x19
    b9ec:	ldp	x19, x20, [sp, #16]
    b9f0:	mov	w1, #0x4                   	// #4
    b9f4:	ldp	x29, x30, [sp], #48
    b9f8:	b	0 <d_make_comp>
    b9fc:	add	x2, x2, #0x2
    ba00:	stp	x21, x22, [sp, #32]
    ba04:	str	x2, [x0, #24]
    ba08:	bl	9750 <__asan_cplus_demangle_type>
    ba0c:	mov	x20, x0
    ba10:	mov	x0, x19
    ba14:	bl	a880 <d_unqualified_name>
    ba18:	ldr	x1, [x19, #24]
    ba1c:	mov	x21, x0
    ba20:	mov	x3, x21
    ba24:	ldrb	w0, [x1]
    ba28:	cmp	w0, #0x49
    ba2c:	b.eq	ba4c <d_expression_1+0x31c>  // b.none
    ba30:	mov	x2, x20
    ba34:	mov	x0, x19
    ba38:	ldp	x19, x20, [sp, #16]
    ba3c:	mov	w1, #0x1                   	// #1
    ba40:	ldp	x21, x22, [sp, #32]
    ba44:	ldp	x29, x30, [sp], #48
    ba48:	b	0 <d_make_comp>
    ba4c:	add	x1, x1, #0x1
    ba50:	str	x1, [x19, #24]
    ba54:	mov	x0, x19
    ba58:	bl	c160 <d_template_args_1>
    ba5c:	mov	x3, x0
    ba60:	mov	x2, x21
    ba64:	mov	x0, x19
    ba68:	mov	w1, #0x4                   	// #4
    ba6c:	bl	0 <d_make_comp>
    ba70:	mov	x3, x0
    ba74:	b	ba30 <d_expression_1+0x300>
    ba78:	bl	9750 <__asan_cplus_demangle_type>
    ba7c:	mov	x20, x0
    ba80:	ldr	x3, [x19, #24]
    ba84:	b	b99c <d_expression_1+0x26c>
    ba88:	ldr	x3, [x20, #8]
    ba8c:	adrp	x1, 0 <d_make_comp>
    ba90:	ldr	w0, [x19, #72]
    ba94:	add	x1, x1, #0x0
    ba98:	ldr	w2, [x3, #16]
    ba9c:	ldr	x21, [x3]
    baa0:	sub	w2, w2, #0x2
    baa4:	add	w0, w0, w2
    baa8:	str	w0, [x19, #72]
    baac:	mov	x0, x21
    bab0:	bl	0 <__asan_internal_strcmp>
    bab4:	cbz	w0, bd08 <d_expression_1+0x5d8>
    bab8:	ldr	w1, [x20]
    babc:	cmp	w1, #0x33
    bac0:	b.eq	bb74 <d_expression_1+0x444>  // b.none
    bac4:	cmp	w1, #0x34
    bac8:	b.eq	bb90 <d_expression_1+0x460>  // b.none
    bacc:	cmp	w1, #0x32
    bad0:	b.ne	b7e4 <d_expression_1+0xb4>  // b.any
    bad4:	ldr	x0, [x20, #8]
    bad8:	ldr	w0, [x0, #20]
    badc:	cmp	w0, #0x2
    bae0:	b.eq	bc50 <d_expression_1+0x520>  // b.none
    bae4:	b.gt	b89c <d_expression_1+0x16c>
    bae8:	cbz	w0, bcd8 <d_expression_1+0x5a8>
    baec:	cmp	w0, #0x1
    baf0:	b.ne	b7e4 <d_expression_1+0xb4>  // b.any
    baf4:	cbnz	x21, bc24 <d_expression_1+0x4f4>
    baf8:	mov	x0, x19
    bafc:	bl	b730 <d_expression_1>
    bb00:	mov	x3, x0
    bb04:	mov	x2, x20
    bb08:	mov	x0, x19
    bb0c:	ldp	x19, x20, [sp, #16]
    bb10:	mov	w1, #0x37                  	// #55
    bb14:	ldp	x21, x22, [sp, #32]
    bb18:	ldp	x29, x30, [sp], #48
    bb1c:	b	0 <d_make_comp>
    bb20:	mov	x0, x19
    bb24:	bl	b730 <d_expression_1>
    bb28:	mov	x3, x0
    bb2c:	mov	x2, x22
    bb30:	mov	x0, x19
    bb34:	mov	w1, #0x3c                  	// #60
    bb38:	bl	0 <d_make_comp>
    bb3c:	mov	x2, x21
    bb40:	mov	x3, x0
    bb44:	mov	w1, #0x3b                  	// #59
    bb48:	mov	x0, x19
    bb4c:	bl	0 <d_make_comp>
    bb50:	mov	x3, x0
    bb54:	mov	x2, x20
    bb58:	mov	x0, x19
    bb5c:	ldp	x19, x20, [sp, #16]
    bb60:	mov	w1, #0x3a                  	// #58
    bb64:	ldp	x21, x22, [sp, #32]
    bb68:	ldp	x29, x30, [sp], #48
    bb6c:	b	0 <d_make_comp>
    bb70:	mov	x21, #0x0                   	// #0
    bb74:	ldr	w0, [x20, #8]
    bb78:	mov	w1, #0x33                  	// #51
    bb7c:	b	badc <d_expression_1+0x3ac>
    bb80:	add	x2, x2, #0x3
    bb84:	mov	w0, #0x0                   	// #0
    bb88:	str	x2, [x19, #24]
    bb8c:	b	b860 <d_expression_1+0x130>
    bb90:	cbz	x21, bbf8 <d_expression_1+0x4c8>
    bb94:	ldrb	w0, [x21]
    bb98:	mov	w2, #0x6d                  	// #109
    bb9c:	cmp	w0, #0x70
    bba0:	ccmp	w0, w2, #0x4, ne  // ne = any
    bba4:	b.eq	bc38 <d_expression_1+0x508>  // b.none
    bba8:	ldr	x0, [x19, #24]
    bbac:	ldrb	w1, [x0]
    bbb0:	cmp	w1, #0x5f
    bbb4:	b.eq	bc08 <d_expression_1+0x4d8>  // b.none
    bbb8:	mov	w22, #0x0                   	// #0
    bbbc:	adrp	x1, 0 <d_make_comp>
    bbc0:	mov	x0, x21
    bbc4:	add	x1, x1, #0x0
    bbc8:	bl	0 <__asan_internal_strcmp>
    bbcc:	cbz	w0, bcf8 <d_expression_1+0x5c8>
    bbd0:	mov	x0, x19
    bbd4:	bl	b730 <d_expression_1>
    bbd8:	mov	x3, x0
    bbdc:	cbz	w22, bb04 <d_expression_1+0x3d4>
    bbe0:	mov	x2, x3
    bbe4:	mov	x0, x19
    bbe8:	mov	w1, #0x39                  	// #57
    bbec:	bl	0 <d_make_comp>
    bbf0:	mov	x3, x0
    bbf4:	b	bb04 <d_expression_1+0x3d4>
    bbf8:	ldr	x0, [x19, #24]
    bbfc:	ldrb	w1, [x0]
    bc00:	cmp	w1, #0x5f
    bc04:	b.ne	baf8 <d_expression_1+0x3c8>  // b.any
    bc08:	add	x0, x0, #0x1
    bc0c:	str	x0, [x19, #24]
    bc10:	mov	w1, #0x45                  	// #69
    bc14:	mov	x0, x19
    bc18:	bl	aef0 <d_exprlist>
    bc1c:	mov	x3, x0
    bc20:	b	bb04 <d_expression_1+0x3d4>
    bc24:	ldrb	w0, [x21]
    bc28:	mov	w2, #0x6d                  	// #109
    bc2c:	cmp	w0, #0x70
    bc30:	ccmp	w0, w2, #0x4, ne  // ne = any
    bc34:	b.ne	bbb8 <d_expression_1+0x488>  // b.any
    bc38:	ldrb	w2, [x21, #1]
    bc3c:	cmp	w2, w0
    bc40:	b.eq	bd88 <d_expression_1+0x658>  // b.none
    bc44:	cmp	w1, #0x34
    bc48:	b.ne	bbb8 <d_expression_1+0x488>  // b.any
    bc4c:	b	bba8 <d_expression_1+0x478>
    bc50:	cbz	x21, b930 <d_expression_1+0x200>
    bc54:	ldr	x0, [x20, #8]
    bc58:	ldr	x0, [x0]
    bc5c:	ldrb	w1, [x0, #1]
    bc60:	cmp	w1, #0x63
    bc64:	b.eq	bda8 <d_expression_1+0x678>  // b.none
    bc68:	ldrb	w0, [x21]
    bc6c:	cmp	w0, #0x66
    bc70:	b.eq	be04 <d_expression_1+0x6d4>  // b.none
    bc74:	mov	x0, x19
    bc78:	bl	b730 <d_expression_1>
    bc7c:	mov	x22, x0
    bc80:	adrp	x1, 0 <d_make_comp>
    bc84:	mov	x0, x21
    bc88:	add	x1, x1, #0x0
    bc8c:	bl	0 <__asan_internal_strcmp>
    bc90:	cbnz	w0, bd18 <d_expression_1+0x5e8>
    bc94:	mov	x0, x19
    bc98:	mov	w1, #0x45                  	// #69
    bc9c:	bl	aef0 <d_exprlist>
    bca0:	mov	x21, x0
    bca4:	mov	x3, x21
    bca8:	mov	x2, x22
    bcac:	mov	x0, x19
    bcb0:	mov	w1, #0x39                  	// #57
    bcb4:	bl	0 <d_make_comp>
    bcb8:	mov	x3, x0
    bcbc:	mov	x2, x20
    bcc0:	mov	x0, x19
    bcc4:	ldp	x19, x20, [sp, #16]
    bcc8:	mov	w1, #0x38                  	// #56
    bccc:	ldp	x21, x22, [sp, #32]
    bcd0:	ldp	x29, x30, [sp], #48
    bcd4:	b	0 <d_make_comp>
    bcd8:	mov	x2, x20
    bcdc:	mov	x0, x19
    bce0:	ldp	x19, x20, [sp, #16]
    bce4:	mov	x3, #0x0                   	// #0
    bce8:	ldp	x21, x22, [sp, #32]
    bcec:	mov	w1, #0x36                  	// #54
    bcf0:	ldp	x29, x30, [sp], #48
    bcf4:	b	0 <d_make_comp>
    bcf8:	mov	x0, x19
    bcfc:	bl	c160 <d_template_args_1>
    bd00:	mov	x3, x0
    bd04:	b	bbdc <d_expression_1+0x4ac>
    bd08:	mov	x0, x19
    bd0c:	bl	9750 <__asan_cplus_demangle_type>
    bd10:	mov	x3, x0
    bd14:	b	bb04 <d_expression_1+0x3d4>
    bd18:	adrp	x1, 0 <d_make_comp>
    bd1c:	mov	x0, x21
    bd20:	add	x1, x1, #0x0
    bd24:	bl	0 <__asan_internal_strcmp>
    bd28:	cbz	w0, bd40 <d_expression_1+0x610>
    bd2c:	adrp	x1, 0 <d_make_comp>
    bd30:	mov	x0, x21
    bd34:	add	x1, x1, #0x0
    bd38:	bl	0 <__asan_internal_strcmp>
    bd3c:	cbnz	w0, be20 <d_expression_1+0x6f0>
    bd40:	mov	x0, x19
    bd44:	bl	a880 <d_unqualified_name>
    bd48:	ldr	x1, [x19, #24]
    bd4c:	mov	x21, x0
    bd50:	ldrb	w0, [x1]
    bd54:	cmp	w0, #0x49
    bd58:	b.ne	bca4 <d_expression_1+0x574>  // b.any
    bd5c:	add	x1, x1, #0x1
    bd60:	str	x1, [x19, #24]
    bd64:	mov	x0, x19
    bd68:	bl	c160 <d_template_args_1>
    bd6c:	mov	x3, x0
    bd70:	mov	x2, x21
    bd74:	mov	x0, x19
    bd78:	mov	w1, #0x4                   	// #4
    bd7c:	bl	0 <d_make_comp>
    bd80:	mov	x21, x0
    bd84:	b	bca4 <d_expression_1+0x574>
    bd88:	ldr	x0, [x19, #24]
    bd8c:	mov	w22, #0x1                   	// #1
    bd90:	ldrb	w2, [x0]
    bd94:	cmp	w2, #0x5f
    bd98:	b.ne	bbbc <d_expression_1+0x48c>  // b.any
    bd9c:	add	x0, x0, #0x1
    bda0:	str	x0, [x19, #24]
    bda4:	b	bc44 <d_expression_1+0x514>
    bda8:	ldrb	w0, [x0]
    bdac:	sub	w1, w0, #0x63
    bdb0:	sub	w0, w0, #0x72
    bdb4:	and	w1, w1, #0xff
    bdb8:	and	w0, w0, #0xff
    bdbc:	cmp	w1, #0x1
    bdc0:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
    bdc4:	b.hi	bc68 <d_expression_1+0x538>  // b.pmore
    bdc8:	mov	x0, x19
    bdcc:	bl	9750 <__asan_cplus_demangle_type>
    bdd0:	mov	x22, x0
    bdd4:	b	bc80 <d_expression_1+0x550>
    bdd8:	mov	x0, x19
    bddc:	bl	b730 <d_expression_1>
    bde0:	mov	x21, x0
    bde4:	mov	x0, x19
    bde8:	bl	b730 <d_expression_1>
    bdec:	mov	x22, x0
    bdf0:	mov	x0, x19
    bdf4:	bl	b730 <d_expression_1>
    bdf8:	mov	x3, x0
    bdfc:	cbnz	x0, bb2c <d_expression_1+0x3fc>
    be00:	b	b930 <d_expression_1+0x200>
    be04:	mov	x0, x19
    be08:	bl	a6a8 <d_operator_name>
    be0c:	mov	x22, x0
    be10:	b	bc80 <d_expression_1+0x550>
    be14:	mov	x0, x19
    be18:	bl	a6a8 <d_operator_name>
    be1c:	b	bde0 <d_expression_1+0x6b0>
    be20:	mov	x0, x19
    be24:	bl	b730 <d_expression_1>
    be28:	mov	x21, x0
    be2c:	b	bca4 <d_expression_1+0x574>
    be30:	ldrb	w0, [x1, #1]
    be34:	cmp	w0, #0x69
    be38:	b.ne	b930 <d_expression_1+0x200>  // b.any
    be3c:	add	x1, x1, #0x2
    be40:	str	x1, [x19, #24]
    be44:	mov	x0, x19
    be48:	mov	w1, #0x45                  	// #69
    be4c:	bl	aef0 <d_exprlist>
    be50:	mov	x3, x0
    be54:	b	bb2c <d_expression_1+0x3fc>
    be58:	add	x1, x1, #0x1
    be5c:	mov	x3, #0x0                   	// #0
    be60:	str	x1, [x19, #24]
    be64:	b	bb2c <d_expression_1+0x3fc>

000000000000be68 <d_cv_qualifiers>:
    be68:	stp	x29, x30, [sp, #-80]!
    be6c:	mov	x29, sp
    be70:	ldr	x3, [x0, #24]
    be74:	stp	x19, x20, [sp, #16]
    be78:	mov	x19, x0
    be7c:	stp	x21, x22, [sp, #32]
    be80:	mov	x20, x1
    be84:	mov	w22, #0x56                  	// #86
    be88:	stp	x23, x24, [sp, #48]
    be8c:	mov	x23, x1
    be90:	mov	w24, w2
    be94:	stp	x25, x26, [sp, #64]
    be98:	mov	w21, #0x4b                  	// #75
    be9c:	ldrb	w4, [x3]
    bea0:	mov	w0, w4
    bea4:	nop
    bea8:	cmp	w0, #0x72
    beac:	ccmp	w0, w22, #0x4, ne  // ne = any
    beb0:	ccmp	w0, w21, #0x4, ne  // ne = any
    beb4:	b.eq	bf60 <d_cv_qualifiers+0xf8>  // b.none
    beb8:	cmp	w0, #0x44
    bebc:	b.eq	bf44 <d_cv_qualifiers+0xdc>  // b.none
    bec0:	cmp	w4, #0x46
    bec4:	eor	w24, w24, #0x1
    bec8:	cset	w0, eq  // eq = none
    becc:	tst	w24, w0
    bed0:	b.eq	bf28 <d_cv_qualifiers+0xc0>  // b.none
    bed4:	cmp	x20, x23
    bed8:	b.eq	bf28 <d_cv_qualifiers+0xc0>  // b.none
    bedc:	mov	w3, #0x1d                  	// #29
    bee0:	mov	w2, #0x1e                  	// #30
    bee4:	mov	w1, #0x1c                  	// #28
    bee8:	b	bf00 <d_cv_qualifiers+0x98>
    beec:	cmp	w0, #0x19
    bef0:	b.eq	c154 <d_cv_qualifiers+0x2ec>  // b.none
    bef4:	add	x23, x23, #0x8
    bef8:	cmp	x20, x23
    befc:	b.eq	bf28 <d_cv_qualifiers+0xc0>  // b.none
    bf00:	ldr	x23, [x23]
    bf04:	ldr	w0, [x23]
    bf08:	cmp	w0, #0x1a
    bf0c:	b.eq	c14c <d_cv_qualifiers+0x2e4>  // b.none
    bf10:	cmp	w0, #0x1b
    bf14:	b.ne	beec <d_cv_qualifiers+0x84>  // b.any
    bf18:	str	w2, [x23]
    bf1c:	add	x23, x23, #0x8
    bf20:	cmp	x20, x23
    bf24:	b.ne	bf00 <d_cv_qualifiers+0x98>  // b.any
    bf28:	mov	x0, x20
    bf2c:	ldp	x19, x20, [sp, #16]
    bf30:	ldp	x21, x22, [sp, #32]
    bf34:	ldp	x23, x24, [sp, #48]
    bf38:	ldp	x25, x26, [sp, #64]
    bf3c:	ldp	x29, x30, [sp], #80
    bf40:	ret
    bf44:	ldrb	w0, [x3, #1]
    bf48:	and	w1, w0, #0xffffffdf
    bf4c:	sub	w0, w0, #0x77
    bf50:	cmp	w1, #0x4f
    bf54:	and	w0, w0, #0xff
    bf58:	ccmp	w0, #0x1, #0x0, ne  // ne = any
    bf5c:	b.hi	bec0 <d_cv_qualifiers+0x58>  // b.pmore
    bf60:	add	x5, x3, #0x1
    bf64:	str	x5, [x19, #24]
    bf68:	cmp	w4, #0x72
    bf6c:	b.eq	c02c <d_cv_qualifiers+0x1c4>  // b.none
    bf70:	cmp	w4, #0x56
    bf74:	b.eq	c090 <d_cv_qualifiers+0x228>  // b.none
    bf78:	cmp	w4, #0x4b
    bf7c:	b.eq	c0b8 <d_cv_qualifiers+0x250>  // b.none
    bf80:	ldrb	w0, [x3, #1]
    bf84:	cbz	w0, c00c <d_cv_qualifiers+0x1a4>
    bf88:	add	x5, x3, #0x2
    bf8c:	str	x5, [x19, #24]
    bf90:	ldrb	w25, [x3, #1]
    bf94:	cmp	w25, #0x78
    bf98:	b.eq	c0ec <d_cv_qualifiers+0x284>  // b.none
    bf9c:	and	w0, w25, #0xffffffdf
    bfa0:	cmp	w0, #0x4f
    bfa4:	and	w7, w0, #0xff
    bfa8:	b.ne	c104 <d_cv_qualifiers+0x29c>  // b.any
    bfac:	ldr	w0, [x19, #72]
    bfb0:	cmp	w25, #0x4f
    bfb4:	add	w0, w0, #0x9
    bfb8:	str	w0, [x19, #72]
    bfbc:	b.ne	c144 <d_cv_qualifiers+0x2dc>  // b.any
    bfc0:	ldr	w26, [x19, #76]
    bfc4:	mov	w0, #0x1                   	// #1
    bfc8:	str	w0, [x19, #76]
    bfcc:	mov	x0, x19
    bfd0:	bl	b730 <d_expression_1>
    bfd4:	str	w26, [x19, #76]
    bfd8:	cbz	x0, c00c <d_cv_qualifiers+0x1a4>
    bfdc:	ldr	x5, [x19, #24]
    bfe0:	ldrb	w1, [x5]
    bfe4:	cmp	w1, #0x45
    bfe8:	b.ne	c00c <d_cv_qualifiers+0x1a4>  // b.any
    bfec:	ldp	w3, w1, [x19, #40]
    bff0:	add	x5, x5, #0x1
    bff4:	str	x5, [x19, #24]
    bff8:	mov	w7, w25
    bffc:	cmp	w3, w1
    c000:	b.lt	c054 <d_cv_qualifiers+0x1ec>  // b.tstop
    c004:	nop
    c008:	str	xzr, [x20]
    c00c:	mov	x20, #0x0                   	// #0
    c010:	mov	x0, x20
    c014:	ldp	x19, x20, [sp, #16]
    c018:	ldp	x21, x22, [sp, #32]
    c01c:	ldp	x23, x24, [sp, #48]
    c020:	ldp	x25, x26, [sp, #64]
    c024:	ldp	x29, x30, [sp], #80
    c028:	ret
    c02c:	ldr	w0, [x19, #72]
    c030:	add	w3, w0, #0x9
    c034:	mov	x0, #0x0                   	// #0
    c038:	cbnz	w24, c0ac <d_cv_qualifiers+0x244>
    c03c:	mov	w7, #0x19                  	// #25
    c040:	str	w3, [x19, #72]
    c044:	nop
    c048:	ldp	w3, w1, [x19, #40]
    c04c:	cmp	w3, w1
    c050:	b.ge	c008 <d_cv_qualifiers+0x1a0>  // b.tcont
    c054:	mov	w4, #0x18                  	// #24
    c058:	add	w8, w3, #0x1
    c05c:	ldr	x6, [x19, #32]
    c060:	smull	x3, w3, w4
    c064:	add	x4, x6, x3
    c068:	str	wzr, [x4, #4]
    c06c:	str	w8, [x19, #40]
    c070:	str	w7, [x6, x3]
    c074:	stp	xzr, x0, [x4, #8]
    c078:	ldr	x3, [x19, #24]
    c07c:	str	x4, [x20]
    c080:	add	x20, x4, #0x8
    c084:	ldrb	w4, [x5]
    c088:	ldrb	w0, [x3]
    c08c:	b	bea8 <d_cv_qualifiers+0x40>
    c090:	ldr	w1, [x19, #72]
    c094:	mov	x0, #0x0                   	// #0
    c098:	add	w1, w1, #0x9
    c09c:	cbnz	w24, c0d4 <d_cv_qualifiers+0x26c>
    c0a0:	mov	w7, #0x1a                  	// #26
    c0a4:	str	w1, [x19, #72]
    c0a8:	b	c048 <d_cv_qualifiers+0x1e0>
    c0ac:	mov	w7, #0x1c                  	// #28
    c0b0:	str	w3, [x19, #72]
    c0b4:	b	c048 <d_cv_qualifiers+0x1e0>
    c0b8:	ldr	w0, [x19, #72]
    c0bc:	add	w1, w0, #0x6
    c0c0:	mov	x0, #0x0                   	// #0
    c0c4:	cbnz	w24, c0e0 <d_cv_qualifiers+0x278>
    c0c8:	mov	w7, #0x1b                  	// #27
    c0cc:	str	w1, [x19, #72]
    c0d0:	b	c048 <d_cv_qualifiers+0x1e0>
    c0d4:	mov	w7, #0x1d                  	// #29
    c0d8:	str	w1, [x19, #72]
    c0dc:	b	c048 <d_cv_qualifiers+0x1e0>
    c0e0:	mov	w7, #0x1e                  	// #30
    c0e4:	str	w1, [x19, #72]
    c0e8:	b	c048 <d_cv_qualifiers+0x1e0>
    c0ec:	ldr	w1, [x19, #72]
    c0f0:	mov	x0, #0x0                   	// #0
    c0f4:	mov	w7, #0x4d                  	// #77
    c0f8:	add	w1, w1, #0x11
    c0fc:	str	w1, [x19, #72]
    c100:	b	c048 <d_cv_qualifiers+0x1e0>
    c104:	cmp	w25, #0x77
    c108:	b.ne	c00c <d_cv_qualifiers+0x1a4>  // b.any
    c10c:	ldr	w1, [x19, #72]
    c110:	mov	x0, x19
    c114:	add	w1, w1, #0x6
    c118:	str	w1, [x19, #72]
    c11c:	bl	a558 <d_parmlist>
    c120:	cbz	x0, c00c <d_cv_qualifiers+0x1a4>
    c124:	ldr	x5, [x19, #24]
    c128:	ldrb	w1, [x5]
    c12c:	cmp	w1, #0x45
    c130:	b.ne	c00c <d_cv_qualifiers+0x1a4>  // b.any
    c134:	add	x5, x5, #0x1
    c138:	mov	w7, #0x50                  	// #80
    c13c:	str	x5, [x19, #24]
    c140:	b	c048 <d_cv_qualifiers+0x1e0>
    c144:	mov	x0, #0x0                   	// #0
    c148:	b	c048 <d_cv_qualifiers+0x1e0>
    c14c:	str	w3, [x23]
    c150:	b	bef4 <d_cv_qualifiers+0x8c>
    c154:	str	w1, [x23]
    c158:	b	bef4 <d_cv_qualifiers+0x8c>
    c15c:	nop

000000000000c160 <d_template_args_1>:
    c160:	stp	x29, x30, [sp, #-96]!
    c164:	mov	x29, sp
    c168:	ldr	x3, [x0, #24]
    c16c:	stp	x19, x20, [sp, #16]
    c170:	mov	x19, x0
    c174:	stp	x23, x24, [sp, #48]
    c178:	ldrb	w1, [x3]
    c17c:	ldr	x23, [x0, #64]
    c180:	cmp	w1, #0x45
    c184:	b.eq	c2d4 <d_template_args_1+0x174>  // b.none
    c188:	add	x24, sp, #0x58
    c18c:	mov	w20, #0x2f                  	// #47
    c190:	stp	x21, x22, [sp, #32]
    c194:	mov	w22, #0x1                   	// #1
    c198:	mov	w21, #0x18                  	// #24
    c19c:	str	x25, [sp, #64]
    c1a0:	str	xzr, [sp, #88]
    c1a4:	nop
    c1a8:	cmp	w1, #0x4c
    c1ac:	b.eq	c28c <d_template_args_1+0x12c>  // b.none
    c1b0:	b.hi	c240 <d_template_args_1+0xe0>  // b.pmore
    c1b4:	sub	w1, w1, #0x49
    c1b8:	and	w1, w1, #0xff
    c1bc:	cmp	w1, #0x1
    c1c0:	b.hi	c280 <d_template_args_1+0x120>  // b.pmore
    c1c4:	add	x3, x3, #0x1
    c1c8:	str	x3, [x19, #24]
    c1cc:	mov	x0, x19
    c1d0:	bl	c160 <d_template_args_1>
    c1d4:	cbz	x0, c2b8 <d_template_args_1+0x158>
    c1d8:	ldp	w1, w2, [x19, #40]
    c1dc:	cmp	w1, w2
    c1e0:	b.ge	c298 <d_template_args_1+0x138>  // b.tcont
    c1e4:	ldp	x3, x5, [x19, #24]
    c1e8:	smull	x4, w1, w21
    c1ec:	add	w1, w1, #0x1
    c1f0:	add	x2, x5, x4
    c1f4:	str	wzr, [x2, #4]
    c1f8:	str	w1, [x19, #40]
    c1fc:	str	w20, [x5, x4]
    c200:	stp	x0, xzr, [x2, #8]
    c204:	str	x2, [x24]
    c208:	add	x24, x2, #0x10
    c20c:	ldrb	w1, [x3]
    c210:	cmp	w1, #0x45
    c214:	b.ne	c1a8 <d_template_args_1+0x48>  // b.any
    c218:	add	x3, x3, #0x1
    c21c:	str	x3, [x19, #24]
    c220:	str	x23, [x19, #64]
    c224:	ldp	x19, x20, [sp, #16]
    c228:	ldp	x21, x22, [sp, #32]
    c22c:	ldp	x23, x24, [sp, #48]
    c230:	ldr	x25, [sp, #64]
    c234:	ldr	x0, [sp, #88]
    c238:	ldp	x29, x30, [sp], #96
    c23c:	ret
    c240:	cmp	w1, #0x58
    c244:	b.ne	c280 <d_template_args_1+0x120>  // b.any
    c248:	add	x3, x3, #0x1
    c24c:	ldr	w25, [x19, #76]
    c250:	str	x3, [x19, #24]
    c254:	mov	x0, x19
    c258:	str	w22, [x19, #76]
    c25c:	bl	b730 <d_expression_1>
    c260:	str	w25, [x19, #76]
    c264:	ldr	x1, [x19, #24]
    c268:	ldrb	w2, [x1]
    c26c:	cmp	w2, #0x45
    c270:	b.ne	c2b8 <d_template_args_1+0x158>  // b.any
    c274:	add	x1, x1, #0x1
    c278:	str	x1, [x19, #24]
    c27c:	b	c1d4 <d_template_args_1+0x74>
    c280:	mov	x0, x19
    c284:	bl	9750 <__asan_cplus_demangle_type>
    c288:	b	c1d4 <d_template_args_1+0x74>
    c28c:	mov	x0, x19
    c290:	bl	d808 <d_expr_primary>
    c294:	b	c1d4 <d_template_args_1+0x74>
    c298:	str	xzr, [x24]
    c29c:	mov	x0, #0x0                   	// #0
    c2a0:	ldp	x19, x20, [sp, #16]
    c2a4:	ldp	x21, x22, [sp, #32]
    c2a8:	ldp	x23, x24, [sp, #48]
    c2ac:	ldr	x25, [sp, #64]
    c2b0:	ldp	x29, x30, [sp], #96
    c2b4:	ret
    c2b8:	mov	x0, #0x0                   	// #0
    c2bc:	ldp	x19, x20, [sp, #16]
    c2c0:	ldp	x21, x22, [sp, #32]
    c2c4:	ldp	x23, x24, [sp, #48]
    c2c8:	ldr	x25, [sp, #64]
    c2cc:	ldp	x29, x30, [sp], #96
    c2d0:	ret
    c2d4:	add	x3, x3, #0x1
    c2d8:	mov	x2, #0x0                   	// #0
    c2dc:	ldp	x23, x24, [sp, #48]
    c2e0:	str	x3, [x0, #24]
    c2e4:	ldp	x19, x20, [sp, #16]
    c2e8:	mov	w1, #0x2f                  	// #47
    c2ec:	ldp	x29, x30, [sp], #96
    c2f0:	mov	x3, #0x0                   	// #0
    c2f4:	b	0 <d_make_comp>

000000000000c2f8 <d_special_name>:
    c2f8:	stp	x29, x30, [sp, #-80]!
    c2fc:	mov	x29, sp
    c300:	ldr	w3, [x0, #72]
    c304:	ldr	x2, [x0, #24]
    c308:	stp	x19, x20, [sp, #16]
    c30c:	add	w1, w3, #0x14
    c310:	str	w1, [x0, #72]
    c314:	mov	x19, x0
    c318:	ldrb	w1, [x2]
    c31c:	cmp	w1, #0x54
    c320:	b.eq	c54c <d_special_name+0x254>  // b.none
    c324:	cmp	w1, #0x47
    c328:	b.ne	c454 <d_special_name+0x15c>  // b.any
    c32c:	add	x1, x2, #0x1
    c330:	str	x1, [x0, #24]
    c334:	ldrb	w1, [x2, #1]
    c338:	cbz	w1, c454 <d_special_name+0x15c>
    c33c:	add	x1, x2, #0x2
    c340:	str	x1, [x0, #24]
    c344:	ldrb	w3, [x2, #1]
    c348:	cmp	w3, #0x54
    c34c:	b.eq	c700 <d_special_name+0x408>  // b.none
    c350:	b.ls	c464 <d_special_name+0x16c>  // b.plast
    c354:	cmp	w3, #0x56
    c358:	b.eq	c6e0 <d_special_name+0x3e8>  // b.none
    c35c:	cmp	w3, #0x72
    c360:	b.ne	c454 <d_special_name+0x15c>  // b.any
    c364:	ldrb	w5, [x2, #2]
    c368:	mov	w9, #0x0                   	// #0
    c36c:	cmp	w5, #0x6e
    c370:	b.eq	c8b0 <d_special_name+0x5b8>  // b.none
    c374:	sub	w0, w5, #0x30
    c378:	and	w0, w0, #0xff
    c37c:	cmp	w0, #0x9
    c380:	b.hi	c454 <d_special_name+0x15c>  // b.pmore
    c384:	mov	w8, #0xcccd                	// #52429
    c388:	add	x1, x1, #0x1
    c38c:	mov	w0, #0x0                   	// #0
    c390:	mov	w7, #0x7fffffff            	// #2147483647
    c394:	movk	w8, #0xcccc, lsl #16
    c398:	b	c3b0 <d_special_name+0xb8>
    c39c:	umull	x2, w2, w8
    c3a0:	add	x1, x1, #0x1
    c3a4:	lsr	x2, x2, #35
    c3a8:	cmp	w2, w0
    c3ac:	b.lt	c454 <d_special_name+0x15c>  // b.tstop
    c3b0:	str	x1, [x19, #24]
    c3b4:	add	w0, w0, w0, lsl #2
    c3b8:	ldrb	w4, [x1]
    c3bc:	add	w6, w5, w0, lsl #1
    c3c0:	sub	w0, w6, #0x30
    c3c4:	sub	w3, w4, #0x30
    c3c8:	mov	w5, w4
    c3cc:	sub	w2, w7, w3
    c3d0:	and	w3, w3, #0xff
    c3d4:	cmp	w3, #0x9
    c3d8:	b.ls	c39c <d_special_name+0xa4>  // b.plast
    c3dc:	stp	x21, x22, [sp, #32]
    c3e0:	cmp	w9, #0x0
    c3e4:	ccmp	w0, #0x1, #0x4, eq  // eq = none
    c3e8:	stp	x23, x24, [sp, #48]
    c3ec:	stp	x25, x26, [sp, #64]
    c3f0:	b.le	c448 <d_special_name+0x150>
    c3f4:	cbz	w4, c448 <d_special_name+0x150>
    c3f8:	add	x8, x1, #0x1
    c3fc:	str	x8, [x19, #24]
    c400:	ldrb	w0, [x1]
    c404:	cmp	w0, #0x5f
    c408:	b.ne	c448 <d_special_name+0x150>  // b.any
    c40c:	sub	w21, w6, #0x31
    c410:	mov	x26, #0x0                   	// #0
    c414:	mov	w23, #0x18                  	// #24
    c418:	mov	w24, #0x41                  	// #65
    c41c:	ldrb	w1, [x8]
    c420:	cbz	w1, c448 <d_special_name+0x150>
    c424:	cmp	w1, #0x24
    c428:	b.ne	c9b8 <d_special_name+0x6c0>  // b.any
    c42c:	ldrb	w1, [x8, #1]
    c430:	cmp	w1, #0x53
    c434:	b.eq	ca3c <d_special_name+0x744>  // b.none
    c438:	cmp	w1, #0x5f
    c43c:	b.eq	c928 <d_special_name+0x630>  // b.none
    c440:	cmp	w1, #0x24
    c444:	b.eq	c92c <d_special_name+0x634>  // b.none
    c448:	ldp	x21, x22, [sp, #32]
    c44c:	ldp	x23, x24, [sp, #48]
    c450:	ldp	x25, x26, [sp, #64]
    c454:	mov	x0, #0x0                   	// #0
    c458:	ldp	x19, x20, [sp, #16]
    c45c:	ldp	x29, x30, [sp], #80
    c460:	ret
    c464:	cmp	w3, #0x41
    c468:	b.eq	c744 <d_special_name+0x44c>  // b.none
    c46c:	cmp	w3, #0x52
    c470:	b.ne	c454 <d_special_name+0x15c>  // b.any
    c474:	bl	cde0 <d_name>
    c478:	mov	x2, x0
    c47c:	ldp	w1, w0, [x19, #40]
    c480:	cmp	w1, w0
    c484:	b.ge	c8ec <d_special_name+0x5f4>  // b.tcont
    c488:	ldp	x6, x0, [x19, #24]
    c48c:	mov	w3, #0x18                  	// #24
    c490:	add	w5, w1, #0x1
    c494:	mov	w4, #0x42                  	// #66
    c498:	smull	x1, w1, w3
    c49c:	add	x3, x0, x1
    c4a0:	str	wzr, [x3, #4]
    c4a4:	str	w5, [x19, #40]
    c4a8:	str	w4, [x0, x1]
    c4ac:	ldrb	w1, [x6]
    c4b0:	cmp	w1, #0x6e
    c4b4:	b.eq	c8c4 <d_special_name+0x5cc>  // b.none
    c4b8:	sub	w0, w1, #0x30
    c4bc:	and	w0, w0, #0xff
    c4c0:	cmp	w0, #0x9
    c4c4:	b.hi	cb88 <d_special_name+0x890>  // b.pmore
    c4c8:	mov	w0, #0x0                   	// #0
    c4cc:	mov	w9, #0xcccd                	// #52429
    c4d0:	mov	w7, w1
    c4d4:	add	x6, x6, #0x1
    c4d8:	mov	w1, #0x0                   	// #0
    c4dc:	mov	w8, #0x7fffffff            	// #2147483647
    c4e0:	movk	w9, #0xcccc, lsl #16
    c4e4:	b	c4f8 <d_special_name+0x200>
    c4e8:	umull	x4, w4, w9
    c4ec:	lsr	x4, x4, #35
    c4f0:	cmp	w4, w1
    c4f4:	b.lt	ca34 <d_special_name+0x73c>  // b.tstop
    c4f8:	str	x6, [x19, #24]
    c4fc:	add	w1, w1, w1, lsl #2
    c500:	add	x6, x6, #0x1
    c504:	ldurb	w4, [x6, #-1]
    c508:	add	w1, w7, w1, lsl #1
    c50c:	sub	w1, w1, #0x30
    c510:	sub	w5, w4, #0x30
    c514:	mov	w7, w4
    c518:	sub	w4, w8, w5
    c51c:	and	w5, w5, #0xff
    c520:	cmp	w5, #0x9
    c524:	b.ls	c4e8 <d_special_name+0x1f0>  // b.plast
    c528:	cbz	w0, c530 <d_special_name+0x238>
    c52c:	neg	w1, w1
    c530:	sxtw	x1, w1
    c534:	str	x1, [x3, #8]
    c538:	mov	x0, x19
    c53c:	mov	w1, #0x16                  	// #22
    c540:	ldp	x19, x20, [sp, #16]
    c544:	ldp	x29, x30, [sp], #80
    c548:	b	0 <d_make_comp>
    c54c:	add	x1, x2, #0x1
    c550:	str	x1, [x0, #24]
    c554:	ldrb	w1, [x2, #1]
    c558:	cbz	w1, c454 <d_special_name+0x15c>
    c55c:	add	x1, x2, #0x2
    c560:	str	x1, [x0, #24]
    c564:	ldrb	w1, [x2, #1]
    c568:	cmp	w1, #0x53
    c56c:	b.eq	cad0 <d_special_name+0x7d8>  // b.none
    c570:	b.ls	c5c0 <d_special_name+0x2c8>  // b.plast
    c574:	cmp	w1, #0x63
    c578:	b.eq	ca8c <d_special_name+0x794>  // b.none
    c57c:	b.ls	c62c <d_special_name+0x334>  // b.plast
    c580:	cmp	w1, #0x68
    c584:	b.eq	c788 <d_special_name+0x490>  // b.none
    c588:	cmp	w1, #0x76
    c58c:	b.ne	c454 <d_special_name+0x15c>  // b.any
    c590:	bl	840 <d_call_offset>
    c594:	cbz	w0, c454 <d_special_name+0x15c>
    c598:	mov	x0, x19
    c59c:	mov	w1, #0x0                   	// #0
    c5a0:	bl	cba8 <d_encoding>
    c5a4:	mov	x2, x0
    c5a8:	mov	x0, x19
    c5ac:	mov	x3, #0x0                   	// #0
    c5b0:	ldp	x19, x20, [sp, #16]
    c5b4:	mov	w1, #0x10                  	// #16
    c5b8:	ldp	x29, x30, [sp], #80
    c5bc:	b	0 <d_make_comp>
    c5c0:	cmp	w1, #0x48
    c5c4:	b.eq	caf0 <d_special_name+0x7f8>  // b.none
    c5c8:	b.ls	c5fc <d_special_name+0x304>  // b.plast
    c5cc:	cmp	w1, #0x49
    c5d0:	b.eq	c768 <d_special_name+0x470>  // b.none
    c5d4:	cmp	w1, #0x4a
    c5d8:	b.ne	c454 <d_special_name+0x15c>  // b.any
    c5dc:	bl	9750 <__asan_cplus_demangle_type>
    c5e0:	mov	x2, x0
    c5e4:	mov	x0, x19
    c5e8:	mov	x3, #0x0                   	// #0
    c5ec:	ldp	x19, x20, [sp, #16]
    c5f0:	mov	w1, #0x12                  	// #18
    c5f4:	ldp	x29, x30, [sp], #80
    c5f8:	b	0 <d_make_comp>
    c5fc:	cmp	w1, #0x43
    c600:	b.eq	c7e0 <d_special_name+0x4e8>  // b.none
    c604:	cmp	w1, #0x46
    c608:	b.ne	c65c <d_special_name+0x364>  // b.any
    c60c:	bl	9750 <__asan_cplus_demangle_type>
    c610:	mov	x2, x0
    c614:	mov	x0, x19
    c618:	mov	x3, #0x0                   	// #0
    c61c:	ldp	x19, x20, [sp, #16]
    c620:	mov	w1, #0xe                   	// #14
    c624:	ldp	x29, x30, [sp], #80
    c628:	b	0 <d_make_comp>
    c62c:	cmp	w1, #0x56
    c630:	b.eq	c7b8 <d_special_name+0x4c0>  // b.none
    c634:	cmp	w1, #0x57
    c638:	b.ne	c6b0 <d_special_name+0x3b8>  // b.any
    c63c:	bl	cde0 <d_name>
    c640:	mov	x2, x0
    c644:	mov	x0, x19
    c648:	mov	x3, #0x0                   	// #0
    c64c:	ldp	x19, x20, [sp, #16]
    c650:	mov	w1, #0x15                  	// #21
    c654:	ldp	x29, x30, [sp], #80
    c658:	b	0 <d_make_comp>
    c65c:	cmp	w1, #0x41
    c660:	b.ne	c454 <d_special_name+0x15c>  // b.any
    c664:	ldrb	w0, [x2, #2]
    c668:	cmp	w0, #0x4c
    c66c:	b.eq	c918 <d_special_name+0x620>  // b.none
    c670:	b.hi	ca44 <d_special_name+0x74c>  // b.pmore
    c674:	sub	w0, w0, #0x49
    c678:	and	w0, w0, #0xff
    c67c:	cmp	w0, #0x1
    c680:	b.hi	cb78 <d_special_name+0x880>  // b.pmore
    c684:	add	x2, x2, #0x3
    c688:	str	x2, [x19, #24]
    c68c:	mov	x0, x19
    c690:	bl	c160 <d_template_args_1>
    c694:	mov	x2, x0
    c698:	mov	x0, x19
    c69c:	mov	x3, #0x0                   	// #0
    c6a0:	ldp	x19, x20, [sp, #16]
    c6a4:	mov	w1, #0x30                  	// #48
    c6a8:	ldp	x29, x30, [sp], #80
    c6ac:	b	0 <d_make_comp>
    c6b0:	cmp	w1, #0x54
    c6b4:	b.ne	c454 <d_special_name+0x15c>  // b.any
    c6b8:	add	w3, w3, #0xa
    c6bc:	str	w3, [x0, #72]
    c6c0:	bl	9750 <__asan_cplus_demangle_type>
    c6c4:	mov	x2, x0
    c6c8:	mov	x0, x19
    c6cc:	mov	x3, #0x0                   	// #0
    c6d0:	ldp	x19, x20, [sp, #16]
    c6d4:	mov	w1, #0xa                   	// #10
    c6d8:	ldp	x29, x30, [sp], #80
    c6dc:	b	0 <d_make_comp>
    c6e0:	bl	cde0 <d_name>
    c6e4:	mov	x2, x0
    c6e8:	mov	x0, x19
    c6ec:	mov	x3, #0x0                   	// #0
    c6f0:	ldp	x19, x20, [sp, #16]
    c6f4:	mov	w1, #0x13                  	// #19
    c6f8:	ldp	x29, x30, [sp], #80
    c6fc:	b	0 <d_make_comp>
    c700:	ldrb	w1, [x2, #2]
    c704:	cbz	w1, c71c <d_special_name+0x424>
    c708:	add	x1, x2, #0x3
    c70c:	str	x1, [x0, #24]
    c710:	ldrb	w1, [x2, #2]
    c714:	cmp	w1, #0x6e
    c718:	b.eq	c8f4 <d_special_name+0x5fc>  // b.none
    c71c:	mov	x0, x19
    c720:	mov	w1, #0x0                   	// #0
    c724:	bl	cba8 <d_encoding>
    c728:	mov	x2, x0
    c72c:	mov	x0, x19
    c730:	mov	x3, #0x0                   	// #0
    c734:	ldp	x19, x20, [sp, #16]
    c738:	mov	w1, #0x49                  	// #73
    c73c:	ldp	x29, x30, [sp], #80
    c740:	b	0 <d_make_comp>
    c744:	mov	w1, #0x0                   	// #0
    c748:	bl	cba8 <d_encoding>
    c74c:	mov	x2, x0
    c750:	mov	x0, x19
    c754:	ldp	x19, x20, [sp, #16]
    c758:	mov	x3, #0x0                   	// #0
    c75c:	ldp	x29, x30, [sp], #80
    c760:	mov	w1, #0x17                  	// #23
    c764:	b	0 <d_make_comp>
    c768:	bl	9750 <__asan_cplus_demangle_type>
    c76c:	mov	x2, x0
    c770:	mov	x0, x19
    c774:	mov	x3, #0x0                   	// #0
    c778:	ldp	x19, x20, [sp, #16]
    c77c:	mov	w1, #0xc                   	// #12
    c780:	ldp	x29, x30, [sp], #80
    c784:	b	0 <d_make_comp>
    c788:	bl	840 <d_call_offset>
    c78c:	cbz	w0, c454 <d_special_name+0x15c>
    c790:	mov	x0, x19
    c794:	mov	w1, #0x0                   	// #0
    c798:	bl	cba8 <d_encoding>
    c79c:	mov	x2, x0
    c7a0:	mov	x0, x19
    c7a4:	mov	x3, #0x0                   	// #0
    c7a8:	ldp	x19, x20, [sp, #16]
    c7ac:	mov	w1, #0xf                   	// #15
    c7b0:	ldp	x29, x30, [sp], #80
    c7b4:	b	0 <d_make_comp>
    c7b8:	add	w3, w3, #0xf
    c7bc:	str	w3, [x0, #72]
    c7c0:	bl	9750 <__asan_cplus_demangle_type>
    c7c4:	mov	x2, x0
    c7c8:	mov	x0, x19
    c7cc:	mov	x3, #0x0                   	// #0
    c7d0:	ldp	x19, x20, [sp, #16]
    c7d4:	mov	w1, #0x9                   	// #9
    c7d8:	ldp	x29, x30, [sp], #80
    c7dc:	b	0 <d_make_comp>
    c7e0:	bl	9750 <__asan_cplus_demangle_type>
    c7e4:	mov	x20, x0
    c7e8:	ldr	x8, [x19, #24]
    c7ec:	ldrb	w6, [x8]
    c7f0:	cmp	w6, #0x6e
    c7f4:	b.eq	cb50 <d_special_name+0x858>  // b.none
    c7f8:	sub	w0, w6, #0x30
    c7fc:	and	w0, w0, #0xff
    c800:	cmp	w0, #0x9
    c804:	b.hi	c870 <d_special_name+0x578>  // b.pmore
    c808:	mov	w0, #0x0                   	// #0
    c80c:	mov	w10, #0xcccd                	// #52429
    c810:	add	x4, x8, #0x1
    c814:	mov	w1, #0x0                   	// #0
    c818:	mov	w9, #0x7fffffff            	// #2147483647
    c81c:	movk	w10, #0xcccc, lsl #16
    c820:	b	c834 <d_special_name+0x53c>
    c824:	umull	x2, w2, w10
    c828:	lsr	x2, x2, #35
    c82c:	cmp	w2, w1
    c830:	b.lt	c454 <d_special_name+0x15c>  // b.tstop
    c834:	add	w1, w1, w1, lsl #2
    c838:	str	x4, [x19, #24]
    c83c:	mov	x8, x4
    c840:	add	x4, x4, #0x1
    c844:	add	w7, w6, w1, lsl #1
    c848:	ldurb	w6, [x4, #-1]
    c84c:	sub	w1, w7, #0x30
    c850:	sub	w5, w6, #0x30
    c854:	sub	w2, w9, w5
    c858:	and	w5, w5, #0xff
    c85c:	cmp	w5, #0x9
    c860:	b.ls	c824 <d_special_name+0x52c>  // b.plast
    c864:	cbz	w0, c870 <d_special_name+0x578>
    c868:	cmp	w7, #0x30
    c86c:	b.ne	c454 <d_special_name+0x15c>  // b.any
    c870:	cmp	w6, #0x5f
    c874:	b.ne	c454 <d_special_name+0x15c>  // b.any
    c878:	add	x8, x8, #0x1
    c87c:	str	x8, [x19, #24]
    c880:	mov	x0, x19
    c884:	bl	9750 <__asan_cplus_demangle_type>
    c888:	mov	x2, x0
    c88c:	ldr	w1, [x19, #72]
    c890:	mov	x3, x20
    c894:	mov	x0, x19
    c898:	add	w1, w1, #0x5
    c89c:	str	w1, [x19, #72]
    c8a0:	ldp	x19, x20, [sp, #16]
    c8a4:	mov	w1, #0xb                   	// #11
    c8a8:	ldp	x29, x30, [sp], #80
    c8ac:	b	0 <d_make_comp>
    c8b0:	add	x1, x2, #0x3
    c8b4:	str	x1, [x0, #24]
    c8b8:	mov	w9, #0x1                   	// #1
    c8bc:	ldrb	w5, [x2, #3]
    c8c0:	b	c374 <d_special_name+0x7c>
    c8c4:	add	x4, x6, #0x1
    c8c8:	str	x4, [x19, #24]
    c8cc:	ldrb	w1, [x6, #1]
    c8d0:	sub	w0, w1, #0x30
    c8d4:	and	w0, w0, #0xff
    c8d8:	cmp	w0, #0x9
    c8dc:	b.hi	cb98 <d_special_name+0x8a0>  // b.pmore
    c8e0:	mov	x6, x4
    c8e4:	mov	w0, #0x1                   	// #1
    c8e8:	b	c4cc <d_special_name+0x1d4>
    c8ec:	mov	x3, #0x0                   	// #0
    c8f0:	b	c538 <d_special_name+0x240>
    c8f4:	mov	w1, #0x0                   	// #0
    c8f8:	bl	cba8 <d_encoding>
    c8fc:	mov	x2, x0
    c900:	mov	x0, x19
    c904:	ldp	x19, x20, [sp, #16]
    c908:	mov	x3, #0x0                   	// #0
    c90c:	ldp	x29, x30, [sp], #80
    c910:	mov	w1, #0x4a                  	// #74
    c914:	b	0 <d_make_comp>
    c918:	mov	x0, x19
    c91c:	bl	d808 <d_expr_primary>
    c920:	mov	x2, x0
    c924:	b	c698 <d_special_name+0x3a0>
    c928:	mov	w1, #0x2e                  	// #46
    c92c:	ldp	w2, w0, [x19, #40]
    c930:	ldr	x8, [x19, #24]
    c934:	cmp	w2, w0
    c938:	add	x8, x8, #0x2
    c93c:	b.ge	cb10 <d_special_name+0x818>  // b.tcont
    c940:	ldr	x4, [x19, #32]
    c944:	smull	x3, w2, w23
    c948:	add	w2, w2, #0x1
    c94c:	sub	w21, w21, #0x2
    c950:	add	x22, x4, x3
    c954:	str	wzr, [x22, #4]
    c958:	str	w2, [x19, #40]
    c95c:	str	w24, [x4, x3]
    c960:	str	w1, [x22, #8]
    c964:	str	x8, [x19, #24]
    c968:	cbz	x26, ca2c <d_special_name+0x734>
    c96c:	mov	x2, x26
    c970:	mov	x3, x22
    c974:	mov	x0, x19
    c978:	mov	w1, #0x40                  	// #64
    c97c:	bl	0 <d_make_comp>
    c980:	mov	x26, x0
    c984:	cbz	x0, c448 <d_special_name+0x150>
    c988:	cmp	w21, #0x0
    c98c:	b.gt	c41c <d_special_name+0x124>
    c990:	mov	x2, x26
    c994:	mov	x0, x19
    c998:	ldp	x19, x20, [sp, #16]
    c99c:	mov	x3, #0x0                   	// #0
    c9a0:	ldp	x21, x22, [sp, #32]
    c9a4:	mov	w1, #0x3f                  	// #63
    c9a8:	ldp	x23, x24, [sp, #48]
    c9ac:	ldp	x25, x26, [sp, #64]
    c9b0:	ldp	x29, x30, [sp], #80
    c9b4:	b	0 <d_make_comp>
    c9b8:	mov	x20, #0x1                   	// #1
    c9bc:	b	c9c4 <d_special_name+0x6cc>
    c9c0:	mov	x20, x3
    c9c4:	cmp	w21, w20
    c9c8:	mov	w25, w20
    c9cc:	b.le	c9e4 <d_special_name+0x6ec>
    c9d0:	ldrb	w1, [x8, x20]
    c9d4:	add	x3, x20, #0x1
    c9d8:	cmp	w1, #0x24
    c9dc:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    c9e0:	b.ne	c9c0 <d_special_name+0x6c8>  // b.any
    c9e4:	ldp	w22, w0, [x19, #40]
    c9e8:	cmp	w22, w0
    c9ec:	b.ge	cb24 <d_special_name+0x82c>  // b.tcont
    c9f0:	ldr	x0, [x19, #32]
    c9f4:	add	w3, w22, #0x1
    c9f8:	mov	x1, x8
    c9fc:	mov	w2, w25
    ca00:	smaddl	x22, w22, w23, x0
    ca04:	mov	x0, x22
    ca08:	str	wzr, [x22, #4]
    ca0c:	str	w3, [x19, #40]
    ca10:	bl	9140 <__asan_cplus_demangle_fill_name>
    ca14:	cbz	w0, cb34 <d_special_name+0x83c>
    ca18:	ldr	x8, [x19, #24]
    ca1c:	sub	w21, w21, w25
    ca20:	add	x8, x8, x20
    ca24:	str	x8, [x19, #24]
    ca28:	b	c968 <d_special_name+0x670>
    ca2c:	mov	x26, x22
    ca30:	b	c988 <d_special_name+0x690>
    ca34:	mov	x1, #0xffffffffffffffff    	// #-1
    ca38:	b	c534 <d_special_name+0x23c>
    ca3c:	mov	w1, #0x2f                  	// #47
    ca40:	b	c92c <d_special_name+0x634>
    ca44:	cmp	w0, #0x58
    ca48:	b.ne	cb78 <d_special_name+0x880>  // b.any
    ca4c:	add	x2, x2, #0x3
    ca50:	ldr	w20, [x19, #76]
    ca54:	mov	w1, #0x1                   	// #1
    ca58:	str	x2, [x19, #24]
    ca5c:	str	w1, [x19, #76]
    ca60:	mov	x0, x19
    ca64:	bl	b730 <d_expression_1>
    ca68:	str	w20, [x19, #76]
    ca6c:	ldr	x1, [x19, #24]
    ca70:	mov	x2, x0
    ca74:	ldrb	w0, [x1]
    ca78:	cmp	w0, #0x45
    ca7c:	b.ne	cb90 <d_special_name+0x898>  // b.any
    ca80:	add	x1, x1, #0x1
    ca84:	str	x1, [x19, #24]
    ca88:	b	c698 <d_special_name+0x3a0>
    ca8c:	mov	w1, #0x0                   	// #0
    ca90:	bl	840 <d_call_offset>
    ca94:	cbz	w0, c454 <d_special_name+0x15c>
    ca98:	mov	x0, x19
    ca9c:	mov	w1, #0x0                   	// #0
    caa0:	bl	840 <d_call_offset>
    caa4:	cbz	w0, c454 <d_special_name+0x15c>
    caa8:	mov	x0, x19
    caac:	mov	w1, #0x0                   	// #0
    cab0:	bl	cba8 <d_encoding>
    cab4:	mov	x2, x0
    cab8:	mov	x0, x19
    cabc:	mov	x3, #0x0                   	// #0
    cac0:	ldp	x19, x20, [sp, #16]
    cac4:	mov	w1, #0x11                  	// #17
    cac8:	ldp	x29, x30, [sp], #80
    cacc:	b	0 <d_make_comp>
    cad0:	bl	9750 <__asan_cplus_demangle_type>
    cad4:	mov	x2, x0
    cad8:	mov	x0, x19
    cadc:	mov	x3, #0x0                   	// #0
    cae0:	ldp	x19, x20, [sp, #16]
    cae4:	mov	w1, #0xd                   	// #13
    cae8:	ldp	x29, x30, [sp], #80
    caec:	b	0 <d_make_comp>
    caf0:	bl	cde0 <d_name>
    caf4:	mov	x2, x0
    caf8:	mov	x0, x19
    cafc:	mov	x3, #0x0                   	// #0
    cb00:	ldp	x19, x20, [sp, #16]
    cb04:	mov	w1, #0x14                  	// #20
    cb08:	ldp	x29, x30, [sp], #80
    cb0c:	b	0 <d_make_comp>
    cb10:	ldp	x21, x22, [sp, #32]
    cb14:	ldp	x23, x24, [sp, #48]
    cb18:	ldp	x25, x26, [sp, #64]
    cb1c:	str	x8, [x19, #24]
    cb20:	b	c454 <d_special_name+0x15c>
    cb24:	mov	w2, w25
    cb28:	mov	x1, x8
    cb2c:	mov	x0, #0x0                   	// #0
    cb30:	bl	9140 <__asan_cplus_demangle_fill_name>
    cb34:	ldr	x0, [x19, #24]
    cb38:	ldp	x21, x22, [sp, #32]
    cb3c:	add	x20, x0, x20
    cb40:	ldp	x23, x24, [sp, #48]
    cb44:	ldp	x25, x26, [sp, #64]
    cb48:	str	x20, [x19, #24]
    cb4c:	b	c454 <d_special_name+0x15c>
    cb50:	add	x1, x8, #0x1
    cb54:	str	x1, [x19, #24]
    cb58:	ldrb	w6, [x8, #1]
    cb5c:	mov	x8, x1
    cb60:	sub	w0, w6, #0x30
    cb64:	and	w0, w0, #0xff
    cb68:	cmp	w0, #0x9
    cb6c:	b.hi	c870 <d_special_name+0x578>  // b.pmore
    cb70:	mov	w0, #0x1                   	// #1
    cb74:	b	c80c <d_special_name+0x514>
    cb78:	mov	x0, x19
    cb7c:	bl	9750 <__asan_cplus_demangle_type>
    cb80:	mov	x2, x0
    cb84:	b	c698 <d_special_name+0x3a0>
    cb88:	mov	x1, #0x0                   	// #0
    cb8c:	b	c534 <d_special_name+0x23c>
    cb90:	mov	x2, #0x0                   	// #0
    cb94:	b	c698 <d_special_name+0x3a0>
    cb98:	mov	w1, #0x0                   	// #0
    cb9c:	neg	w1, w1
    cba0:	b	c530 <d_special_name+0x238>
    cba4:	nop

000000000000cba8 <d_encoding>:
    cba8:	ldr	x2, [x0, #24]
    cbac:	mov	w3, #0x54                  	// #84
    cbb0:	ldrb	w2, [x2]
    cbb4:	cmp	w2, #0x47
    cbb8:	ccmp	w2, w3, #0x4, ne  // ne = any
    cbbc:	b.ne	cbc4 <d_encoding+0x1c>  // b.any
    cbc0:	b	c2f8 <d_special_name>
    cbc4:	stp	x29, x30, [sp, #-48]!
    cbc8:	mov	x29, sp
    cbcc:	stp	x19, x20, [sp, #16]
    cbd0:	mov	x19, x0
    cbd4:	mov	w20, w1
    cbd8:	stp	x21, x22, [sp, #32]
    cbdc:	bl	cde0 <d_name>
    cbe0:	mov	x21, x0
    cbe4:	cbz	x0, cca0 <d_encoding+0xf8>
    cbe8:	cbz	w20, cc38 <d_encoding+0x90>
    cbec:	ldr	w0, [x19, #16]
    cbf0:	tbnz	w0, #0, cc38 <d_encoding+0x90>
    cbf4:	mov	x0, #0x1f                  	// #31
    cbf8:	mov	x2, #0x1                   	// #1
    cbfc:	movk	x0, #0x1a, lsl #48
    cc00:	ldr	w3, [x21]
    cc04:	sub	w1, w3, #0x1c
    cc08:	cmp	w1, #0x34
    cc0c:	b.hi	cc1c <d_encoding+0x74>  // b.pmore
    cc10:	lsl	x1, x2, x1
    cc14:	tst	x1, x0
    cc18:	b.ne	cd50 <d_encoding+0x1a8>  // b.any
    cc1c:	cmp	w3, #0x2
    cc20:	b.eq	cd58 <d_encoding+0x1b0>  // b.none
    cc24:	mov	x0, x21
    cc28:	ldp	x19, x20, [sp, #16]
    cc2c:	ldp	x21, x22, [sp, #32]
    cc30:	ldp	x29, x30, [sp], #48
    cc34:	ret
    cc38:	ldr	x5, [x19, #24]
    cc3c:	ldrb	w1, [x5]
    cc40:	cmp	w1, #0x45
    cc44:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    cc48:	b.eq	cc24 <d_encoding+0x7c>  // b.none
    cc4c:	mov	x0, #0x1f                  	// #31
    cc50:	mov	x22, x21
    cc54:	mov	x2, #0x1                   	// #1
    cc58:	movk	x0, #0x1a, lsl #48
    cc5c:	ldr	w4, [x22]
    cc60:	cmp	w4, #0x4
    cc64:	b.eq	cda0 <d_encoding+0x1f8>  // b.none
    cc68:	sub	w3, w4, #0x1c
    cc6c:	b.hi	cd30 <d_encoding+0x188>  // b.pmore
    cc70:	cmp	w4, #0x2
    cc74:	b.ne	ccc0 <d_encoding+0x118>  // b.any
    cc78:	ldr	x22, [x22, #16]
    cc7c:	cbnz	x22, cc5c <d_encoding+0xb4>
    cc80:	cmp	w1, #0x4a
    cc84:	b.ne	cccc <d_encoding+0x124>  // b.any
    cc88:	add	x5, x5, #0x1
    cc8c:	str	x5, [x19, #24]
    cc90:	mov	x0, x19
    cc94:	bl	9750 <__asan_cplus_demangle_type>
    cc98:	mov	x22, x0
    cc9c:	cbnz	x0, cccc <d_encoding+0x124>
    cca0:	mov	x21, #0x0                   	// #0
    cca4:	mov	x0, x21
    cca8:	ldp	x19, x20, [sp, #16]
    ccac:	ldp	x21, x22, [sp, #32]
    ccb0:	ldp	x29, x30, [sp], #48
    ccb4:	ret
    ccb8:	cmp	w0, #0x35
    ccbc:	b.ne	cdd0 <d_encoding+0x228>  // b.any
    ccc0:	cmp	w1, #0x4a
    ccc4:	mov	x22, #0x0                   	// #0
    ccc8:	b.eq	cc88 <d_encoding+0xe0>  // b.none
    cccc:	mov	x0, x19
    ccd0:	bl	a558 <d_parmlist>
    ccd4:	mov	x3, x0
    ccd8:	cbz	x0, cca0 <d_encoding+0xf8>
    ccdc:	mov	x2, x22
    cce0:	mov	x0, x19
    cce4:	mov	w1, #0x29                  	// #41
    cce8:	bl	0 <d_make_comp>
    ccec:	mov	x3, x0
    ccf0:	cbz	x0, cca0 <d_encoding+0xf8>
    ccf4:	cbnz	w20, cd14 <d_encoding+0x16c>
    ccf8:	ldr	w0, [x21]
    ccfc:	cmp	w0, #0x2
    cd00:	b.ne	cd14 <d_encoding+0x16c>  // b.any
    cd04:	ldr	w0, [x3]
    cd08:	cmp	w0, #0x29
    cd0c:	b.ne	cd14 <d_encoding+0x16c>  // b.any
    cd10:	str	xzr, [x3, #8]
    cd14:	mov	x2, x21
    cd18:	mov	x0, x19
    cd1c:	ldp	x19, x20, [sp, #16]
    cd20:	mov	w1, #0x3                   	// #3
    cd24:	ldp	x21, x22, [sp, #32]
    cd28:	ldp	x29, x30, [sp], #48
    cd2c:	b	0 <d_make_comp>
    cd30:	cmp	w3, #0x34
    cd34:	b.hi	ccc0 <d_encoding+0x118>  // b.pmore
    cd38:	lsl	x3, x2, x3
    cd3c:	tst	x3, x0
    cd40:	b.eq	ccc0 <d_encoding+0x118>  // b.none
    cd44:	ldr	x22, [x22, #8]
    cd48:	cbnz	x22, cc5c <d_encoding+0xb4>
    cd4c:	b	cc80 <d_encoding+0xd8>
    cd50:	ldr	x21, [x21, #8]
    cd54:	b	cc00 <d_encoding+0x58>
    cd58:	ldr	x3, [x21, #16]
    cd5c:	mov	x0, #0x1f                  	// #31
    cd60:	mov	x2, #0x1                   	// #1
    cd64:	movk	x0, #0x1a, lsl #48
    cd68:	ldr	w1, [x3]
    cd6c:	sub	w1, w1, #0x1c
    cd70:	cmp	w1, #0x34
    cd74:	b.hi	cc24 <d_encoding+0x7c>  // b.pmore
    cd78:	lsl	x1, x2, x1
    cd7c:	tst	x1, x0
    cd80:	b.eq	cc24 <d_encoding+0x7c>  // b.none
    cd84:	ldr	x3, [x3, #8]
    cd88:	str	x3, [x21, #16]
    cd8c:	ldr	w1, [x3]
    cd90:	sub	w1, w1, #0x1c
    cd94:	cmp	w1, #0x34
    cd98:	b.ls	cd78 <d_encoding+0x1d0>  // b.plast
    cd9c:	b	cc24 <d_encoding+0x7c>
    cda0:	ldr	x2, [x22, #8]
    cda4:	cbz	x2, cdd0 <d_encoding+0x228>
    cda8:	ldr	w0, [x2]
    cdac:	sub	w3, w0, #0x1
    cdb0:	cmp	w0, #0x8
    cdb4:	b.hi	ccb8 <d_encoding+0x110>  // b.pmore
    cdb8:	cmp	w0, #0x6
    cdbc:	b.hi	ccc0 <d_encoding+0x118>  // b.pmore
    cdc0:	cmp	w3, #0x1
    cdc4:	b.hi	cdd0 <d_encoding+0x228>  // b.pmore
    cdc8:	ldr	x2, [x2, #16]
    cdcc:	cbnz	x2, cda8 <d_encoding+0x200>
    cdd0:	cmp	w1, #0x4a
    cdd4:	b.ne	cc90 <d_encoding+0xe8>  // b.any
    cdd8:	b	cc88 <d_encoding+0xe0>
    cddc:	nop

000000000000cde0 <d_name>:
    cde0:	stp	x29, x30, [sp, #-96]!
    cde4:	mov	x29, sp
    cde8:	ldr	x2, [x0, #24]
    cdec:	stp	x19, x20, [sp, #16]
    cdf0:	ldrb	w1, [x2]
    cdf4:	cmp	w1, #0x55
    cdf8:	b.eq	cff0 <d_name+0x210>  // b.none
    cdfc:	mov	x19, x0
    ce00:	b.hi	ce4c <d_name+0x6c>  // b.pmore
    ce04:	cmp	w1, #0x4e
    ce08:	b.eq	d060 <d_name+0x280>  // b.none
    ce0c:	cmp	w1, #0x53
    ce10:	b.ne	d008 <d_name+0x228>  // b.any
    ce14:	ldrb	w1, [x2, #1]
    ce18:	cmp	w1, #0x74
    ce1c:	b.eq	cee8 <d_name+0x108>  // b.none
    ce20:	mov	w1, #0x0                   	// #0
    ce24:	bl	9380 <d_substitution>
    ce28:	ldr	x1, [x19, #24]
    ce2c:	mov	x20, x0
    ce30:	ldrb	w0, [x1]
    ce34:	cmp	w0, #0x49
    ce38:	b.eq	cfa8 <d_name+0x1c8>  // b.none
    ce3c:	mov	x0, x20
    ce40:	ldp	x19, x20, [sp, #16]
    ce44:	ldp	x29, x30, [sp], #96
    ce48:	ret
    ce4c:	cmp	w1, #0x5a
    ce50:	b.ne	d008 <d_name+0x228>  // b.any
    ce54:	add	x2, x2, #0x1
    ce58:	str	x2, [x0, #24]
    ce5c:	mov	w1, #0x0                   	// #0
    ce60:	bl	cba8 <d_encoding>
    ce64:	mov	x20, x0
    ce68:	cbz	x0, cfe8 <d_name+0x208>
    ce6c:	ldr	x0, [x19, #24]
    ce70:	ldrb	w1, [x0]
    ce74:	cmp	w1, #0x45
    ce78:	b.ne	cfe8 <d_name+0x208>  // b.any
    ce7c:	stp	x21, x22, [sp, #32]
    ce80:	add	x1, x0, #0x1
    ce84:	str	x1, [x19, #24]
    ce88:	ldrb	w1, [x0, #1]
    ce8c:	cmp	w1, #0x73
    ce90:	b.eq	d35c <d_name+0x57c>  // b.none
    ce94:	cmp	w1, #0x64
    ce98:	b.eq	d23c <d_name+0x45c>  // b.none
    ce9c:	mov	x0, x19
    cea0:	bl	cde0 <d_name>
    cea4:	mov	x21, x0
    cea8:	cbz	x0, cebc <d_name+0xdc>
    ceac:	ldr	w0, [x0]
    ceb0:	sub	w0, w0, #0x46
    ceb4:	tst	w0, #0xfffffffd
    ceb8:	b.ne	cfd4 <d_name+0x1f4>  // b.any
    cebc:	ldr	w0, [x20]
    cec0:	cmp	w0, #0x3
    cec4:	b.eq	d324 <d_name+0x544>  // b.none
    cec8:	mov	x3, x21
    cecc:	mov	x2, x20
    ced0:	mov	x0, x19
    ced4:	mov	w1, #0x2                   	// #2
    ced8:	bl	0 <d_make_comp>
    cedc:	mov	x20, x0
    cee0:	ldp	x21, x22, [sp, #32]
    cee4:	b	ce3c <d_name+0x5c>
    cee8:	ldp	w20, w0, [x0, #40]
    ceec:	add	x2, x2, #0x2
    cef0:	str	x2, [x19, #24]
    cef4:	cmp	w20, w0
    cef8:	b.ge	d3b4 <d_name+0x5d4>  // b.tcont
    cefc:	ldr	x1, [x19, #32]
    cf00:	mov	w2, #0x18                  	// #24
    cf04:	add	w0, w20, #0x1
    cf08:	smaddl	x20, w20, w2, x1
    cf0c:	str	wzr, [x20, #4]
    cf10:	str	w0, [x19, #40]
    cf14:	mov	w2, #0x3                   	// #3
    cf18:	mov	x0, x20
    cf1c:	adrp	x1, 0 <d_make_comp>
    cf20:	add	x1, x1, #0x0
    cf24:	bl	9140 <__asan_cplus_demangle_fill_name>
    cf28:	cmp	w0, #0x0
    cf2c:	csel	x20, x20, xzr, ne  // ne = any
    cf30:	mov	x0, x19
    cf34:	bl	a880 <d_unqualified_name>
    cf38:	mov	x3, x0
    cf3c:	mov	x2, x20
    cf40:	mov	w1, #0x1                   	// #1
    cf44:	mov	x0, x19
    cf48:	bl	0 <d_make_comp>
    cf4c:	mov	x20, x0
    cf50:	ldr	w0, [x19, #72]
    cf54:	ldr	x1, [x19, #24]
    cf58:	add	w0, w0, #0x3
    cf5c:	str	w0, [x19, #72]
    cf60:	ldrb	w0, [x1]
    cf64:	cmp	w0, #0x49
    cf68:	b.ne	ce3c <d_name+0x5c>  // b.any
    cf6c:	cbz	x20, cfe8 <d_name+0x208>
    cf70:	ldp	w0, w2, [x19, #56]
    cf74:	cmp	w0, w2
    cf78:	b.ge	cfe8 <d_name+0x208>  // b.tcont
    cf7c:	ldr	x4, [x19, #48]
    cf80:	add	w2, w0, #0x1
    cf84:	mov	x3, #0x0                   	// #0
    cf88:	str	x20, [x4, w0, sxtw #3]
    cf8c:	str	w2, [x19, #56]
    cf90:	ldrb	w0, [x1]
    cf94:	sub	w0, w0, #0x49
    cf98:	and	w0, w0, #0xff
    cf9c:	cmp	w0, #0x1
    cfa0:	b.hi	cfbc <d_name+0x1dc>  // b.pmore
    cfa4:	nop
    cfa8:	add	x1, x1, #0x1
    cfac:	str	x1, [x19, #24]
    cfb0:	mov	x0, x19
    cfb4:	bl	c160 <d_template_args_1>
    cfb8:	mov	x3, x0
    cfbc:	mov	x2, x20
    cfc0:	mov	x0, x19
    cfc4:	mov	w1, #0x4                   	// #4
    cfc8:	bl	0 <d_make_comp>
    cfcc:	mov	x20, x0
    cfd0:	b	ce3c <d_name+0x5c>
    cfd4:	mov	x0, x19
    cfd8:	bl	620 <d_discriminator>
    cfdc:	cbnz	w0, cebc <d_name+0xdc>
    cfe0:	ldp	x21, x22, [sp, #32]
    cfe4:	nop
    cfe8:	mov	x20, #0x0                   	// #0
    cfec:	b	ce3c <d_name+0x5c>
    cff0:	bl	a880 <d_unqualified_name>
    cff4:	mov	x20, x0
    cff8:	mov	x0, x20
    cffc:	ldp	x19, x20, [sp, #16]
    d000:	ldp	x29, x30, [sp], #96
    d004:	ret
    d008:	mov	x0, x19
    d00c:	bl	a880 <d_unqualified_name>
    d010:	ldr	x1, [x19, #24]
    d014:	mov	x20, x0
    d018:	ldrb	w0, [x1]
    d01c:	cmp	w0, #0x49
    d020:	b.ne	ce3c <d_name+0x5c>  // b.any
    d024:	cbz	x20, cfe8 <d_name+0x208>
    d028:	ldp	w2, w0, [x19, #56]
    d02c:	cmp	w2, w0
    d030:	b.ge	cfe8 <d_name+0x208>  // b.tcont
    d034:	ldr	x4, [x19, #48]
    d038:	add	w0, w2, #0x1
    d03c:	mov	x3, #0x0                   	// #0
    d040:	str	x20, [x4, w2, sxtw #3]
    d044:	str	w0, [x19, #56]
    d048:	ldrb	w2, [x1]
    d04c:	sub	w2, w2, #0x49
    d050:	and	w2, w2, #0xff
    d054:	cmp	w2, #0x1
    d058:	b.ls	cfa8 <d_name+0x1c8>  // b.plast
    d05c:	b	cfbc <d_name+0x1dc>
    d060:	stp	x21, x22, [sp, #32]
    d064:	add	x2, x2, #0x1
    d068:	add	x1, sp, #0x58
    d06c:	str	x2, [x0, #24]
    d070:	mov	w2, #0x1                   	// #1
    d074:	bl	be68 <d_cv_qualifiers>
    d078:	mov	x22, x0
    d07c:	cbz	x0, d318 <d_name+0x538>
    d080:	ldr	x3, [x19, #24]
    d084:	stp	x23, x24, [sp, #48]
    d088:	mov	w0, #0x4f                  	// #79
    d08c:	mov	x23, #0x0                   	// #0
    d090:	ldrb	w20, [x3]
    d094:	cmp	w20, #0x52
    d098:	ccmp	w20, w0, #0x4, ne  // ne = any
    d09c:	b.eq	d1f4 <d_name+0x414>  // b.none
    d0a0:	cbz	w20, d15c <d_name+0x37c>
    d0a4:	mov	x21, #0x0                   	// #0
    d0a8:	mov	w24, #0x4c                  	// #76
    d0ac:	stp	x25, x26, [sp, #64]
    d0b0:	mov	w25, #0x55                  	// #85
    d0b4:	cmp	w20, #0x44
    d0b8:	b.eq	d170 <d_name+0x390>  // b.none
    d0bc:	sub	w1, w20, #0x30
    d0c0:	sub	w0, w20, #0x61
    d0c4:	and	w1, w1, #0xff
    d0c8:	and	w0, w0, #0xff
    d0cc:	cmp	w1, #0x9
    d0d0:	mov	x26, x21
    d0d4:	ccmp	w0, #0x19, #0x0, hi  // hi = pmore
    d0d8:	b.ls	d0ec <d_name+0x30c>  // b.plast
    d0dc:	cmp	w20, #0x43
    d0e0:	ccmp	w20, w25, #0x4, ne  // ne = any
    d0e4:	ccmp	w20, w24, #0x4, ne  // ne = any
    d0e8:	b.ne	d1bc <d_name+0x3dc>  // b.any
    d0ec:	mov	x0, x19
    d0f0:	bl	a880 <d_unqualified_name>
    d0f4:	mov	x21, x0
    d0f8:	cbz	x26, d114 <d_name+0x334>
    d0fc:	mov	w1, #0x1                   	// #1
    d100:	mov	x3, x21
    d104:	mov	x2, x26
    d108:	mov	x0, x19
    d10c:	bl	0 <d_make_comp>
    d110:	mov	x21, x0
    d114:	cmp	w20, #0x53
    d118:	ldr	x3, [x19, #24]
    d11c:	b.eq	d14c <d_name+0x36c>  // b.none
    d120:	ldrb	w20, [x3]
    d124:	cmp	w20, #0x45
    d128:	b.eq	d1a4 <d_name+0x3c4>  // b.none
    d12c:	cbz	x21, d158 <d_name+0x378>
    d130:	ldp	w0, w1, [x19, #56]
    d134:	cmp	w0, w1
    d138:	b.ge	d158 <d_name+0x378>  // b.tcont
    d13c:	ldr	x2, [x19, #48]
    d140:	add	w1, w0, #0x1
    d144:	str	x21, [x2, w0, sxtw #3]
    d148:	str	w1, [x19, #56]
    d14c:	ldrb	w20, [x3]
    d150:	cbnz	w20, d0b4 <d_name+0x2d4>
    d154:	nop
    d158:	ldp	x25, x26, [sp, #64]
    d15c:	mov	x20, #0x0                   	// #0
    d160:	ldp	x23, x24, [sp, #48]
    d164:	str	xzr, [x22]
    d168:	ldp	x21, x22, [sp, #32]
    d16c:	b	ce3c <d_name+0x5c>
    d170:	ldrb	w0, [x3, #1]
    d174:	and	w0, w0, #0xffffffdf
    d178:	and	w0, w0, #0xff
    d17c:	cmp	w0, #0x54
    d180:	mov	x0, x19
    d184:	b.ne	d1ac <d_name+0x3cc>  // b.any
    d188:	mov	x26, x21
    d18c:	bl	9750 <__asan_cplus_demangle_type>
    d190:	mov	x21, x0
    d194:	mov	w1, #0x1                   	// #1
    d198:	cbnz	x26, d100 <d_name+0x320>
    d19c:	ldr	x3, [x19, #24]
    d1a0:	b	d120 <d_name+0x340>
    d1a4:	mov	x26, x21
    d1a8:	b	d0dc <d_name+0x2fc>
    d1ac:	mov	x26, x21
    d1b0:	bl	a880 <d_unqualified_name>
    d1b4:	mov	x21, x0
    d1b8:	b	d194 <d_name+0x3b4>
    d1bc:	cmp	w20, #0x53
    d1c0:	b.eq	d2b0 <d_name+0x4d0>  // b.none
    d1c4:	cmp	w20, #0x49
    d1c8:	b.eq	d33c <d_name+0x55c>  // b.none
    d1cc:	cmp	w20, #0x54
    d1d0:	b.eq	d3bc <d_name+0x5dc>  // b.none
    d1d4:	cmp	w20, #0x45
    d1d8:	b.eq	d2cc <d_name+0x4ec>  // b.none
    d1dc:	cmp	w20, #0x4d
    d1e0:	ccmp	x21, #0x0, #0x4, eq  // eq = none
    d1e4:	b.eq	d158 <d_name+0x378>  // b.none
    d1e8:	add	x3, x3, #0x1
    d1ec:	str	x3, [x19, #24]
    d1f0:	b	d14c <d_name+0x36c>
    d1f4:	ldr	w2, [x19, #72]
    d1f8:	cmp	w20, #0x52
    d1fc:	mov	w1, #0x20                  	// #32
    d200:	add	w0, w2, #0x3
    d204:	b.ne	d210 <d_name+0x430>  // b.any
    d208:	add	w0, w2, #0x2
    d20c:	mov	w1, #0x1f                  	// #31
    d210:	add	x3, x3, #0x1
    d214:	str	x3, [x19, #24]
    d218:	str	w0, [x19, #72]
    d21c:	mov	x3, #0x0                   	// #0
    d220:	mov	x0, x19
    d224:	mov	x2, #0x0                   	// #0
    d228:	bl	0 <d_make_comp>
    d22c:	mov	x23, x0
    d230:	ldr	x3, [x19, #24]
    d234:	ldrb	w20, [x3]
    d238:	b	d0a0 <d_name+0x2c0>
    d23c:	add	x0, x0, #0x2
    d240:	str	x0, [x19, #24]
    d244:	mov	x0, x19
    d248:	bl	570 <d_compact_number>
    d24c:	mov	w22, w0
    d250:	tbnz	w0, #31, cfe0 <d_name+0x200>
    d254:	mov	x0, x19
    d258:	bl	cde0 <d_name>
    d25c:	mov	x13, x0
    d260:	cbz	x0, d274 <d_name+0x494>
    d264:	ldr	w0, [x0]
    d268:	sub	w0, w0, #0x46
    d26c:	tst	w0, #0xfffffffd
    d270:	b.ne	d3cc <d_name+0x5ec>  // b.any
    d274:	ldp	w1, w0, [x19, #40]
    d278:	cmp	w1, w0
    d27c:	b.ge	d3ac <d_name+0x5cc>  // b.tcont
    d280:	mov	w2, #0x18                  	// #24
    d284:	add	w3, w1, #0x1
    d288:	ldr	x0, [x19, #32]
    d28c:	smull	x1, w1, w2
    d290:	mov	w2, #0x47                  	// #71
    d294:	add	x21, x0, x1
    d298:	str	wzr, [x21, #4]
    d29c:	str	w3, [x19, #40]
    d2a0:	str	w2, [x0, x1]
    d2a4:	str	x13, [x21, #8]
    d2a8:	str	w22, [x21, #16]
    d2ac:	b	cebc <d_name+0xdc>
    d2b0:	mov	x0, x19
    d2b4:	mov	w1, #0x1                   	// #1
    d2b8:	bl	9380 <d_substitution>
    d2bc:	mov	x21, x0
    d2c0:	cbnz	x26, d0fc <d_name+0x31c>
    d2c4:	ldr	x3, [x19, #24]
    d2c8:	b	d14c <d_name+0x36c>
    d2cc:	str	x21, [x22]
    d2d0:	cbz	x21, d310 <d_name+0x530>
    d2d4:	cbz	x23, d2e4 <d_name+0x504>
    d2d8:	ldr	x0, [sp, #88]
    d2dc:	str	x0, [x23, #8]
    d2e0:	str	x23, [sp, #88]
    d2e4:	ldr	x0, [x19, #24]
    d2e8:	ldrb	w1, [x0]
    d2ec:	cmp	w1, #0x45
    d2f0:	b.ne	d310 <d_name+0x530>  // b.any
    d2f4:	add	x0, x0, #0x1
    d2f8:	ldp	x21, x22, [sp, #32]
    d2fc:	ldp	x23, x24, [sp, #48]
    d300:	ldp	x25, x26, [sp, #64]
    d304:	str	x0, [x19, #24]
    d308:	ldr	x20, [sp, #88]
    d30c:	b	ce3c <d_name+0x5c>
    d310:	ldp	x23, x24, [sp, #48]
    d314:	ldp	x25, x26, [sp, #64]
    d318:	mov	x20, #0x0                   	// #0
    d31c:	ldp	x21, x22, [sp, #32]
    d320:	b	ce3c <d_name+0x5c>
    d324:	ldr	x0, [x20, #16]
    d328:	ldr	w1, [x0]
    d32c:	cmp	w1, #0x29
    d330:	b.ne	cec8 <d_name+0xe8>  // b.any
    d334:	str	xzr, [x0, #8]
    d338:	b	cec8 <d_name+0xe8>
    d33c:	cbz	x21, d158 <d_name+0x378>
    d340:	add	x3, x3, #0x1
    d344:	str	x3, [x19, #24]
    d348:	mov	x0, x19
    d34c:	bl	c160 <d_template_args_1>
    d350:	mov	x21, x0
    d354:	mov	w1, #0x4                   	// #4
    d358:	b	d100 <d_name+0x320>
    d35c:	add	x0, x0, #0x2
    d360:	str	x0, [x19, #24]
    d364:	mov	x0, x19
    d368:	bl	620 <d_discriminator>
    d36c:	cbz	w0, cfe0 <d_name+0x200>
    d370:	ldp	w21, w0, [x19, #40]
    d374:	cmp	w21, w0
    d378:	b.ge	d3e0 <d_name+0x600>  // b.tcont
    d37c:	ldr	x1, [x19, #32]
    d380:	mov	w2, #0x18                  	// #24
    d384:	add	w0, w21, #0x1
    d388:	smaddl	x21, w21, w2, x1
    d38c:	str	wzr, [x21, #4]
    d390:	str	w0, [x19, #40]
    d394:	adrp	x1, 0 <d_make_comp>
    d398:	mov	x0, x21
    d39c:	add	x1, x1, #0x0
    d3a0:	mov	w2, #0xe                   	// #14
    d3a4:	bl	9140 <__asan_cplus_demangle_fill_name>
    d3a8:	cbnz	w0, cebc <d_name+0xdc>
    d3ac:	mov	x21, #0x0                   	// #0
    d3b0:	b	cebc <d_name+0xdc>
    d3b4:	mov	x20, #0x0                   	// #0
    d3b8:	b	cf14 <d_name+0x134>
    d3bc:	mov	x0, x19
    d3c0:	bl	748 <d_template_param>
    d3c4:	mov	x21, x0
    d3c8:	b	d194 <d_name+0x3b4>
    d3cc:	mov	x0, x19
    d3d0:	bl	620 <d_discriminator>
    d3d4:	cbnz	w0, d274 <d_name+0x494>
    d3d8:	ldp	x21, x22, [sp, #32]
    d3dc:	b	cfe8 <d_name+0x208>
    d3e0:	mov	x21, #0x0                   	// #0
    d3e4:	b	d394 <d_name+0x5b4>

000000000000d3e8 <d_encoding.part.0>:
    d3e8:	stp	x29, x30, [sp, #-48]!
    d3ec:	mov	x29, sp
    d3f0:	stp	x19, x20, [sp, #16]
    d3f4:	mov	x20, x0
    d3f8:	stp	x21, x22, [sp, #32]
    d3fc:	mov	w22, w1
    d400:	bl	cde0 <d_name>
    d404:	cbz	x0, d51c <d_encoding.part.0+0x134>
    d408:	mov	x19, x0
    d40c:	cbz	w22, d4a0 <d_encoding.part.0+0xb8>
    d410:	ldr	w0, [x20, #16]
    d414:	tbnz	w0, #0, d4a0 <d_encoding.part.0+0xb8>
    d418:	mov	x1, #0x1f                  	// #31
    d41c:	mov	x2, #0x1                   	// #1
    d420:	movk	x1, #0x1a, lsl #48
    d424:	ldr	w3, [x19]
    d428:	sub	w0, w3, #0x1c
    d42c:	cmp	w0, #0x34
    d430:	b.hi	d440 <d_encoding.part.0+0x58>  // b.pmore
    d434:	lsl	x0, x2, x0
    d438:	tst	x0, x1
    d43c:	b.ne	d5b4 <d_encoding.part.0+0x1cc>  // b.any
    d440:	cmp	w3, #0x2
    d444:	b.ne	d48c <d_encoding.part.0+0xa4>  // b.any
    d448:	ldr	x3, [x19, #16]
    d44c:	mov	x1, #0x1f                  	// #31
    d450:	mov	x2, #0x1                   	// #1
    d454:	movk	x1, #0x1a, lsl #48
    d458:	ldr	w0, [x3]
    d45c:	sub	w0, w0, #0x1c
    d460:	cmp	w0, #0x34
    d464:	b.hi	d48c <d_encoding.part.0+0xa4>  // b.pmore
    d468:	lsl	x0, x2, x0
    d46c:	tst	x0, x1
    d470:	b.eq	d48c <d_encoding.part.0+0xa4>  // b.none
    d474:	ldr	x3, [x3, #8]
    d478:	str	x3, [x19, #16]
    d47c:	ldr	w0, [x3]
    d480:	sub	w0, w0, #0x1c
    d484:	cmp	w0, #0x34
    d488:	b.ls	d468 <d_encoding.part.0+0x80>  // b.plast
    d48c:	mov	x0, x19
    d490:	ldp	x19, x20, [sp, #16]
    d494:	ldp	x21, x22, [sp, #32]
    d498:	ldp	x29, x30, [sp], #48
    d49c:	ret
    d4a0:	ldr	x1, [x20, #24]
    d4a4:	ldrb	w4, [x1]
    d4a8:	cmp	w4, #0x45
    d4ac:	ccmp	w4, #0x0, #0x4, ne  // ne = any
    d4b0:	b.eq	d48c <d_encoding.part.0+0xa4>  // b.none
    d4b4:	mov	x2, #0x1f                  	// #31
    d4b8:	mov	x21, x19
    d4bc:	mov	x5, #0x1                   	// #1
    d4c0:	movk	x2, #0x1a, lsl #48
    d4c4:	ldr	w0, [x21]
    d4c8:	cmp	w0, #0x4
    d4cc:	b.eq	d5bc <d_encoding.part.0+0x1d4>  // b.none
    d4d0:	sub	w3, w0, #0x1c
    d4d4:	b.hi	d594 <d_encoding.part.0+0x1ac>  // b.pmore
    d4d8:	cmp	w0, #0x2
    d4dc:	b.ne	d534 <d_encoding.part.0+0x14c>  // b.any
    d4e0:	ldr	x21, [x21, #16]
    d4e4:	cbnz	x21, d4c4 <d_encoding.part.0+0xdc>
    d4e8:	cmp	w4, #0x4a
    d4ec:	b.ne	d540 <d_encoding.part.0+0x158>  // b.any
    d4f0:	add	x1, x1, #0x1
    d4f4:	str	x1, [x20, #24]
    d4f8:	b	d50c <d_encoding.part.0+0x124>
    d4fc:	cmp	w0, #0x35
    d500:	b.eq	d534 <d_encoding.part.0+0x14c>  // b.none
    d504:	cmp	w4, #0x4a
    d508:	b.eq	d4f0 <d_encoding.part.0+0x108>  // b.none
    d50c:	mov	x0, x20
    d510:	bl	9750 <__asan_cplus_demangle_type>
    d514:	mov	x21, x0
    d518:	cbnz	x0, d540 <d_encoding.part.0+0x158>
    d51c:	mov	x19, #0x0                   	// #0
    d520:	mov	x0, x19
    d524:	ldp	x19, x20, [sp, #16]
    d528:	ldp	x21, x22, [sp, #32]
    d52c:	ldp	x29, x30, [sp], #48
    d530:	ret
    d534:	cmp	w4, #0x4a
    d538:	mov	x21, #0x0                   	// #0
    d53c:	b.eq	d4f0 <d_encoding.part.0+0x108>  // b.none
    d540:	mov	x0, x20
    d544:	bl	a558 <d_parmlist>
    d548:	mov	x3, x0
    d54c:	cbz	x0, d51c <d_encoding.part.0+0x134>
    d550:	mov	x2, x21
    d554:	mov	x0, x20
    d558:	mov	w1, #0x29                  	// #41
    d55c:	bl	0 <d_make_comp>
    d560:	mov	x3, x0
    d564:	cbz	x0, d51c <d_encoding.part.0+0x134>
    d568:	cbnz	w22, d578 <d_encoding.part.0+0x190>
    d56c:	ldr	w0, [x19]
    d570:	cmp	w0, #0x2
    d574:	b.eq	d5f0 <d_encoding.part.0+0x208>  // b.none
    d578:	mov	x2, x19
    d57c:	mov	x0, x20
    d580:	ldp	x19, x20, [sp, #16]
    d584:	mov	w1, #0x3                   	// #3
    d588:	ldp	x21, x22, [sp, #32]
    d58c:	ldp	x29, x30, [sp], #48
    d590:	b	0 <d_make_comp>
    d594:	cmp	w3, #0x34
    d598:	b.hi	d534 <d_encoding.part.0+0x14c>  // b.pmore
    d59c:	lsl	x3, x5, x3
    d5a0:	tst	x3, x2
    d5a4:	b.eq	d534 <d_encoding.part.0+0x14c>  // b.none
    d5a8:	ldr	x21, [x21, #8]
    d5ac:	cbnz	x21, d4c4 <d_encoding.part.0+0xdc>
    d5b0:	b	d4e8 <d_encoding.part.0+0x100>
    d5b4:	ldr	x19, [x19, #8]
    d5b8:	b	d424 <d_encoding.part.0+0x3c>
    d5bc:	ldr	x2, [x21, #8]
    d5c0:	cbz	x2, d504 <d_encoding.part.0+0x11c>
    d5c4:	ldr	w0, [x2]
    d5c8:	sub	w3, w0, #0x1
    d5cc:	cmp	w0, #0x8
    d5d0:	b.hi	d4fc <d_encoding.part.0+0x114>  // b.pmore
    d5d4:	cmp	w0, #0x6
    d5d8:	b.hi	d534 <d_encoding.part.0+0x14c>  // b.pmore
    d5dc:	cmp	w3, #0x1
    d5e0:	b.hi	d504 <d_encoding.part.0+0x11c>  // b.pmore
    d5e4:	ldr	x2, [x2, #16]
    d5e8:	cbnz	x2, d5c4 <d_encoding.part.0+0x1dc>
    d5ec:	b	d504 <d_encoding.part.0+0x11c>
    d5f0:	ldr	w0, [x3]
    d5f4:	cmp	w0, #0x29
    d5f8:	b.ne	d578 <d_encoding.part.0+0x190>  // b.any
    d5fc:	str	xzr, [x3, #8]
    d600:	b	d578 <d_encoding.part.0+0x190>
    d604:	nop

000000000000d608 <__asan_cplus_demangle_mangled_name>:
    d608:	stp	x29, x30, [sp, #-48]!
    d60c:	mov	x29, sp
    d610:	stp	x19, x20, [sp, #16]
    d614:	mov	x19, x0
    d618:	mov	w20, w1
    d61c:	ldr	x0, [x0, #24]
    d620:	stp	x21, x22, [sp, #32]
    d624:	ldrb	w1, [x0]
    d628:	cmp	w1, #0x5f
    d62c:	b.eq	d7c0 <__asan_cplus_demangle_mangled_name+0x1b8>  // b.none
    d630:	cbnz	w20, d7a8 <__asan_cplus_demangle_mangled_name+0x1a0>
    d634:	cmp	w1, #0x5a
    d638:	b.ne	d7a8 <__asan_cplus_demangle_mangled_name+0x1a0>  // b.any
    d63c:	add	x1, x0, #0x1
    d640:	str	x1, [x19, #24]
    d644:	mov	w1, #0x54                  	// #84
    d648:	ldrb	w0, [x0, #1]
    d64c:	cmp	w0, #0x47
    d650:	ccmp	w0, w1, #0x4, ne  // ne = any
    d654:	b.ne	d7d4 <__asan_cplus_demangle_mangled_name+0x1cc>  // b.any
    d658:	mov	x0, x19
    d65c:	bl	c2f8 <d_special_name>
    d660:	mov	x22, x0
    d664:	cbz	w20, d7ac <__asan_cplus_demangle_mangled_name+0x1a4>
    d668:	ldr	w0, [x19, #16]
    d66c:	tbz	w0, #0, d7ac <__asan_cplus_demangle_mangled_name+0x1a4>
    d670:	ldr	x1, [x19, #24]
    d674:	mov	w21, #0x18                  	// #24
    d678:	ldrb	w0, [x1]
    d67c:	cmp	w0, #0x2e
    d680:	b.ne	d7ac <__asan_cplus_demangle_mangled_name+0x1a4>  // b.any
    d684:	ldrb	w2, [x1, #1]
    d688:	sub	w0, w2, #0x61
    d68c:	cmp	w2, #0x5f
    d690:	and	w0, w0, #0xff
    d694:	ccmp	w0, #0x19, #0x0, ne  // ne = any
    d698:	b.ls	d778 <__asan_cplus_demangle_mangled_name+0x170>  // b.plast
    d69c:	nop
    d6a0:	sub	w2, w2, #0x30
    d6a4:	and	w2, w2, #0xff
    d6a8:	cmp	w2, #0x9
    d6ac:	b.hi	d7ac <__asan_cplus_demangle_mangled_name+0x1a4>  // b.pmore
    d6b0:	mov	x2, x1
    d6b4:	nop
    d6b8:	ldrb	w3, [x2, #1]
    d6bc:	sub	w3, w3, #0x30
    d6c0:	and	w3, w3, #0xff
    d6c4:	cmp	w3, #0x9
    d6c8:	b.hi	d704 <__asan_cplus_demangle_mangled_name+0xfc>  // b.pmore
    d6cc:	ldrb	w0, [x2, #2]
    d6d0:	add	x2, x2, #0x2
    d6d4:	sub	w3, w0, #0x30
    d6d8:	and	w3, w3, #0xff
    d6dc:	cmp	w3, #0x9
    d6e0:	b.hi	d6fc <__asan_cplus_demangle_mangled_name+0xf4>  // b.pmore
    d6e4:	nop
    d6e8:	ldrb	w0, [x2, #1]!
    d6ec:	sub	w3, w0, #0x30
    d6f0:	and	w3, w3, #0xff
    d6f4:	cmp	w3, #0x9
    d6f8:	b.ls	d6e8 <__asan_cplus_demangle_mangled_name+0xe0>  // b.plast
    d6fc:	cmp	w0, #0x2e
    d700:	b.eq	d6b8 <__asan_cplus_demangle_mangled_name+0xb0>  // b.none
    d704:	ldp	w20, w0, [x19, #40]
    d708:	str	x2, [x19, #24]
    d70c:	sub	x2, x2, x1
    d710:	cmp	w20, w0
    d714:	b.ge	d7e8 <__asan_cplus_demangle_mangled_name+0x1e0>  // b.tcont
    d718:	ldr	x3, [x19, #32]
    d71c:	add	w0, w20, #0x1
    d720:	smaddl	x20, w20, w21, x3
    d724:	str	wzr, [x20, #4]
    d728:	str	w0, [x19, #40]
    d72c:	mov	x0, x20
    d730:	bl	9140 <__asan_cplus_demangle_fill_name>
    d734:	cbz	w0, d7f8 <__asan_cplus_demangle_mangled_name+0x1f0>
    d738:	mov	x3, x20
    d73c:	mov	x2, x22
    d740:	mov	w1, #0x4e                  	// #78
    d744:	mov	x0, x19
    d748:	bl	0 <d_make_comp>
    d74c:	mov	x22, x0
    d750:	ldr	x1, [x19, #24]
    d754:	ldrb	w0, [x1]
    d758:	cmp	w0, #0x2e
    d75c:	b.ne	d7ac <__asan_cplus_demangle_mangled_name+0x1a4>  // b.any
    d760:	ldrb	w2, [x1, #1]
    d764:	sub	w0, w2, #0x61
    d768:	cmp	w2, #0x5f
    d76c:	and	w0, w0, #0xff
    d770:	ccmp	w0, #0x19, #0x0, ne  // ne = any
    d774:	b.hi	d6a0 <__asan_cplus_demangle_mangled_name+0x98>  // b.pmore
    d778:	ldrb	w3, [x1, #2]
    d77c:	add	x2, x1, #0x2
    d780:	b	d788 <__asan_cplus_demangle_mangled_name+0x180>
    d784:	ldrb	w3, [x2, #1]!
    d788:	sub	w0, w3, #0x61
    d78c:	cmp	w3, #0x5f
    d790:	and	w0, w0, #0xff
    d794:	ccmp	w0, #0x19, #0x0, ne  // ne = any
    d798:	b.ls	d784 <__asan_cplus_demangle_mangled_name+0x17c>  // b.plast
    d79c:	cmp	w3, #0x2e
    d7a0:	b.eq	d6b8 <__asan_cplus_demangle_mangled_name+0xb0>  // b.none
    d7a4:	b	d704 <__asan_cplus_demangle_mangled_name+0xfc>
    d7a8:	mov	x22, #0x0                   	// #0
    d7ac:	mov	x0, x22
    d7b0:	ldp	x19, x20, [sp, #16]
    d7b4:	ldp	x21, x22, [sp, #32]
    d7b8:	ldp	x29, x30, [sp], #48
    d7bc:	ret
    d7c0:	add	x2, x0, #0x1
    d7c4:	str	x2, [x19, #24]
    d7c8:	ldrb	w1, [x0, #1]
    d7cc:	mov	x0, x2
    d7d0:	b	d634 <__asan_cplus_demangle_mangled_name+0x2c>
    d7d4:	mov	w1, w20
    d7d8:	mov	x0, x19
    d7dc:	bl	d3e8 <d_encoding.part.0>
    d7e0:	mov	x22, x0
    d7e4:	b	d664 <__asan_cplus_demangle_mangled_name+0x5c>
    d7e8:	mov	x20, #0x0                   	// #0
    d7ec:	mov	x0, x20
    d7f0:	bl	9140 <__asan_cplus_demangle_fill_name>
    d7f4:	cbnz	w0, d738 <__asan_cplus_demangle_mangled_name+0x130>
    d7f8:	mov	x2, x22
    d7fc:	mov	x3, #0x0                   	// #0
    d800:	b	d740 <__asan_cplus_demangle_mangled_name+0x138>
    d804:	nop

000000000000d808 <d_expr_primary>:
    d808:	ldr	x1, [x0, #24]
    d80c:	ldrb	w2, [x1]
    d810:	cmp	w2, #0x4c
    d814:	b.ne	d8f0 <d_expr_primary+0xe8>  // b.any
    d818:	stp	x29, x30, [sp, #-48]!
    d81c:	add	x2, x1, #0x1
    d820:	mov	x29, sp
    d824:	stp	x19, x20, [sp, #16]
    d828:	mov	x19, x0
    d82c:	str	x2, [x0, #24]
    d830:	mov	w2, #0x5a                  	// #90
    d834:	ldrb	w1, [x1, #1]
    d838:	cmp	w1, #0x5f
    d83c:	ccmp	w1, w2, #0x4, ne  // ne = any
    d840:	b.ne	d870 <d_expr_primary+0x68>  // b.any
    d844:	mov	w1, #0x0                   	// #0
    d848:	bl	d608 <__asan_cplus_demangle_mangled_name>
    d84c:	ldr	x1, [x19, #24]
    d850:	ldrb	w2, [x1]
    d854:	cmp	w2, #0x45
    d858:	b.ne	d8e0 <d_expr_primary+0xd8>  // b.any
    d85c:	add	x1, x1, #0x1
    d860:	str	x1, [x19, #24]
    d864:	ldp	x19, x20, [sp, #16]
    d868:	ldp	x29, x30, [sp], #48
    d86c:	ret
    d870:	bl	9750 <__asan_cplus_demangle_type>
    d874:	mov	x20, x0
    d878:	cbz	x0, d8e0 <d_expr_primary+0xd8>
    d87c:	ldr	w0, [x0]
    d880:	stp	x21, x22, [sp, #32]
    d884:	cmp	w0, #0x27
    d888:	b.eq	d948 <d_expr_primary+0x140>  // b.none
    d88c:	ldr	x1, [x19, #24]
    d890:	mov	w22, #0x3d                  	// #61
    d894:	ldrb	w4, [x1]
    d898:	cmp	w4, #0x6e
    d89c:	b.ne	d8b4 <d_expr_primary+0xac>  // b.any
    d8a0:	add	x0, x1, #0x1
    d8a4:	str	x0, [x19, #24]
    d8a8:	mov	w22, #0x3e                  	// #62
    d8ac:	ldrb	w4, [x1, #1]
    d8b0:	mov	x1, x0
    d8b4:	cmp	w4, #0x45
    d8b8:	b.eq	d970 <d_expr_primary+0x168>  // b.none
    d8bc:	add	x3, x1, #0x1
    d8c0:	b	d8d4 <d_expr_primary+0xcc>
    d8c4:	str	x3, [x19, #24]
    d8c8:	ldrb	w4, [x3], #1
    d8cc:	cmp	w4, #0x45
    d8d0:	b.eq	d8f8 <d_expr_primary+0xf0>  // b.none
    d8d4:	mov	x2, x3
    d8d8:	cbnz	w4, d8c4 <d_expr_primary+0xbc>
    d8dc:	ldp	x21, x22, [sp, #32]
    d8e0:	mov	x0, #0x0                   	// #0
    d8e4:	ldp	x19, x20, [sp, #16]
    d8e8:	ldp	x29, x30, [sp], #48
    d8ec:	ret
    d8f0:	mov	x0, #0x0                   	// #0
    d8f4:	ret
    d8f8:	sub	w2, w2, w1
    d8fc:	ldp	w21, w0, [x19, #40]
    d900:	cmp	w21, w0
    d904:	b.ge	d968 <d_expr_primary+0x160>  // b.tcont
    d908:	ldr	x3, [x19, #32]
    d90c:	mov	w4, #0x18                  	// #24
    d910:	add	w0, w21, #0x1
    d914:	smaddl	x21, w21, w4, x3
    d918:	str	wzr, [x21, #4]
    d91c:	str	w0, [x19, #40]
    d920:	mov	x0, x21
    d924:	bl	9140 <__asan_cplus_demangle_fill_name>
    d928:	cmp	w0, #0x0
    d92c:	mov	w1, w22
    d930:	csel	x3, x21, xzr, ne  // ne = any
    d934:	mov	x2, x20
    d938:	mov	x0, x19
    d93c:	bl	0 <d_make_comp>
    d940:	ldp	x21, x22, [sp, #32]
    d944:	b	d84c <d_expr_primary+0x44>
    d948:	ldr	x0, [x20, #8]
    d94c:	ldr	w1, [x0, #28]
    d950:	cbz	w1, d88c <d_expr_primary+0x84>
    d954:	ldr	w1, [x0, #8]
    d958:	ldr	w0, [x19, #72]
    d95c:	sub	w0, w0, w1
    d960:	str	w0, [x19, #72]
    d964:	b	d88c <d_expr_primary+0x84>
    d968:	mov	x21, #0x0                   	// #0
    d96c:	b	d920 <d_expr_primary+0x118>
    d970:	mov	w2, #0x0                   	// #0
    d974:	b	d8fc <d_expr_primary+0xf4>

000000000000d978 <__asan_cplus_demangle_print_callback>:
    d978:	stp	x29, x30, [sp, #-448]!
    d97c:	mov	w4, w0
    d980:	mov	x29, sp
    d984:	stp	x19, x20, [sp, #16]
    d988:	add	x20, x29, #0x40
    d98c:	mov	x19, x1
    d990:	str	x21, [sp, #32]
    d994:	mov	x0, x20
    d998:	stp	x2, x3, [x29, #336]
    d99c:	add	x2, x29, #0x200
    d9a0:	str	xzr, [x29, #320]
    d9a4:	stp	xzr, xzr, [x2, #-120]
    d9a8:	strb	wzr, [x29, #328]
    d9ac:	stp	xzr, xzr, [x29, #352]
    d9b0:	stp	xzr, xzr, [x29, #368]
    d9b4:	str	xzr, [x29, #384]
    d9b8:	stp	xzr, xzr, [x29, #408]
    d9bc:	str	xzr, [x29, #424]
    d9c0:	bl	88 <d_count_templates_scopes>
    d9c4:	ldr	w1, [x29, #372]
    d9c8:	cmp	w1, #0x7ff
    d9cc:	b.gt	d9d8 <__asan_cplus_demangle_print_callback+0x60>
    d9d0:	mov	w1, #0x0                   	// #0
    d9d4:	str	wzr, [x29, #372]
    d9d8:	ldr	w3, [x29, #412]
    d9dc:	mov	w0, #0x1                   	// #1
    d9e0:	ldr	w5, [x29, #428]
    d9e4:	mov	x21, sp
    d9e8:	cmp	w3, #0x0
    d9ec:	str	xzr, [x29, #432]
    d9f0:	csel	w2, w3, w0, gt
    d9f4:	mul	w3, w3, w5
    d9f8:	sub	sp, sp, w2, sxtw #4
    d9fc:	str	w3, [x29, #428]
    da00:	mov	x2, sp
    da04:	cmp	w3, #0x0
    da08:	str	x2, [x29, #400]
    da0c:	csel	w3, w3, w0, gt
    da10:	sub	sp, sp, w3, sxtw #4
    da14:	mov	x0, sp
    da18:	str	x0, [x29, #416]
    da1c:	cbz	x19, da88 <__asan_cplus_demangle_print_callback+0x110>
    da20:	ldr	w0, [x19, #4]
    da24:	cmp	w0, #0x1
    da28:	b.gt	da88 <__asan_cplus_demangle_print_callback+0x110>
    da2c:	cmp	w1, #0x400
    da30:	b.gt	da88 <__asan_cplus_demangle_print_callback+0x110>
    da34:	ldr	x5, [x29, #392]
    da38:	add	w3, w1, #0x1
    da3c:	mov	w1, w4
    da40:	add	x4, x29, #0x30
    da44:	add	w0, w0, #0x1
    da48:	str	w0, [x19, #4]
    da4c:	mov	x2, x19
    da50:	mov	x0, x20
    da54:	stp	x19, x5, [x29, #48]
    da58:	str	w3, [x29, #372]
    da5c:	str	x4, [x29, #392]
    da60:	bl	a30 <d_print_comp_inner>
    da64:	ldr	w0, [x19, #4]
    da68:	ldr	w1, [x29, #372]
    da6c:	ldr	x2, [x29, #56]
    da70:	sub	w0, w0, #0x1
    da74:	sub	w1, w1, #0x1
    da78:	str	w0, [x19, #4]
    da7c:	str	w1, [x29, #372]
    da80:	str	x2, [x29, #392]
    da84:	b	da90 <__asan_cplus_demangle_print_callback+0x118>
    da88:	mov	w0, #0x1                   	// #1
    da8c:	str	w0, [x29, #368]
    da90:	ldr	x1, [x29, #320]
    da94:	mov	sp, x21
    da98:	ldp	x3, x2, [x29, #336]
    da9c:	mov	x0, x20
    daa0:	strb	wzr, [x20, x1]
    daa4:	blr	x3
    daa8:	ldr	w0, [x29, #368]
    daac:	mov	sp, x29
    dab0:	cmp	w0, #0x0
    dab4:	cset	w0, eq  // eq = none
    dab8:	ldp	x19, x20, [sp, #16]
    dabc:	ldr	x21, [sp, #32]
    dac0:	ldp	x29, x30, [sp], #448
    dac4:	ret

000000000000dac8 <__asan_cplus_demangle_print>:
    dac8:	stp	x29, x30, [sp, #-96]!
    dacc:	mov	x29, sp
    dad0:	stp	x19, x20, [sp, #16]
    dad4:	mov	w19, w0
    dad8:	str	x21, [sp, #32]
    dadc:	mov	x21, x3
    dae0:	str	xzr, [sp, #64]
    dae4:	stp	xzr, xzr, [sp, #72]
    dae8:	str	wzr, [sp, #88]
    daec:	cbnz	w2, db30 <__asan_cplus_demangle_print+0x68>
    daf0:	adrp	x2, 0 <d_make_comp>
    daf4:	mov	w0, w19
    daf8:	add	x3, sp, #0x40
    dafc:	add	x2, x2, #0x0
    db00:	bl	d978 <__asan_cplus_demangle_print_callback>
    db04:	cbz	w0, db6c <__asan_cplus_demangle_print+0xa4>
    db08:	ldr	w2, [sp, #88]
    db0c:	ldr	x1, [sp, #80]
    db10:	cmp	w2, #0x0
    db14:	ldr	x0, [sp, #64]
    db18:	csinc	x1, x1, xzr, eq  // eq = none
    db1c:	str	x1, [x21]
    db20:	ldp	x19, x20, [sp, #16]
    db24:	ldr	x21, [sp, #32]
    db28:	ldp	x29, x30, [sp], #96
    db2c:	ret
    db30:	sxtw	x0, w2
    db34:	mov	x20, #0x2                   	// #2
    db38:	cmp	x0, #0x2
    db3c:	b.ls	db4c <__asan_cplus_demangle_print+0x84>  // b.plast
    db40:	lsl	x20, x20, #1
    db44:	cmp	x0, x20
    db48:	b.hi	db40 <__asan_cplus_demangle_print+0x78>  // b.pmore
    db4c:	mov	x0, x20
    db50:	str	x1, [sp, #56]
    db54:	bl	0 <malloc>
    db58:	ldr	x1, [sp, #56]
    db5c:	cbz	x0, db80 <__asan_cplus_demangle_print+0xb8>
    db60:	str	x0, [sp, #64]
    db64:	str	x20, [sp, #80]
    db68:	b	daf0 <__asan_cplus_demangle_print+0x28>
    db6c:	ldr	x0, [sp, #64]
    db70:	bl	0 <free>
    db74:	str	xzr, [x21]
    db78:	mov	x0, #0x0                   	// #0
    db7c:	b	db20 <__asan_cplus_demangle_print+0x58>
    db80:	mov	w0, #0x1                   	// #1
    db84:	str	w0, [sp, #88]
    db88:	b	daf0 <__asan_cplus_demangle_print+0x28>
    db8c:	nop

000000000000db90 <__asan_cplus_demangle_init_info>:
    db90:	lsl	w4, w2, #1
    db94:	add	x5, x0, x2
    db98:	stp	x0, x5, [x3]
    db9c:	str	w1, [x3, #16]
    dba0:	str	x0, [x3, #24]
    dba4:	stp	wzr, w4, [x3, #40]
    dba8:	stp	wzr, w2, [x3, #56]
    dbac:	stp	xzr, xzr, [x3, #64]
    dbb0:	str	xzr, [x3, #80]
    dbb4:	ret

000000000000dbb8 <__asan_cplus_demangle_v3>:
    dbb8:	stp	x29, x30, [sp, #-192]!
    dbbc:	mov	x29, sp
    dbc0:	stp	x19, x20, [sp, #16]
    dbc4:	mov	x19, x0
    dbc8:	mov	w20, w1
    dbcc:	stp	x21, x22, [sp, #32]
    dbd0:	stp	x23, x24, [sp, #48]
    dbd4:	ldrb	w0, [x0]
    dbd8:	str	xzr, [x29, #64]
    dbdc:	stp	xzr, xzr, [x29, #72]
    dbe0:	cmp	w0, #0x5f
    dbe4:	str	wzr, [x29, #88]
    dbe8:	b.ne	dbf8 <__asan_cplus_demangle_v3+0x40>  // b.any
    dbec:	ldrb	w0, [x19, #1]
    dbf0:	cmp	w0, #0x5a
    dbf4:	b.eq	ddf0 <__asan_cplus_demangle_v3+0x238>  // b.none
    dbf8:	adrp	x1, 0 <d_make_comp>
    dbfc:	mov	x0, x19
    dc00:	add	x1, x1, #0x0
    dc04:	mov	x2, #0x8                   	// #8
    dc08:	bl	0 <__asan_internal_strncmp>
    dc0c:	cbnz	w0, dc40 <__asan_cplus_demangle_v3+0x88>
    dc10:	ldrb	w0, [x19, #8]
    dc14:	mov	w2, #0x5f                  	// #95
    dc18:	mov	w1, #0x24                  	// #36
    dc1c:	cmp	w0, #0x2e
    dc20:	ccmp	w0, w2, #0x4, ne  // ne = any
    dc24:	ccmp	w0, w1, #0x4, ne  // ne = any
    dc28:	b.ne	dc40 <__asan_cplus_demangle_v3+0x88>  // b.any
    dc2c:	ldrb	w0, [x19, #9]
    dc30:	mov	w1, #0x49                  	// #73
    dc34:	cmp	w0, #0x44
    dc38:	ccmp	w0, w1, #0x4, ne  // ne = any
    dc3c:	b.eq	ddf8 <__asan_cplus_demangle_v3+0x240>  // b.none
    dc40:	mov	w22, #0x0                   	// #0
    dc44:	tbz	w20, #4, ddd0 <__asan_cplus_demangle_v3+0x218>
    dc48:	mov	x0, x19
    dc4c:	add	x21, x29, #0x68
    dc50:	bl	0 <__asan_internal_strlen>
    dc54:	mov	x2, x0
    dc58:	mov	x3, x21
    dc5c:	mov	x0, x19
    dc60:	mov	w1, w20
    dc64:	bl	db90 <__asan_cplus_demangle_init_info>
    dc68:	ldr	w0, [x29, #148]
    dc6c:	tbnz	w20, #18, dc78 <__asan_cplus_demangle_v3+0xc0>
    dc70:	cmp	w0, #0x800
    dc74:	b.hi	ddd0 <__asan_cplus_demangle_v3+0x218>  // b.pmore
    dc78:	mov	w2, #0x18                  	// #24
    dc7c:	ldrsw	x1, [x29, #164]
    dc80:	mov	x19, sp
    dc84:	cmp	w22, #0x1
    dc88:	smull	x0, w0, w2
    dc8c:	lsl	x1, x1, #3
    dc90:	add	x0, x0, #0xf
    dc94:	add	x1, x1, #0xf
    dc98:	and	x0, x0, #0xfffffffffffffff0
    dc9c:	and	x1, x1, #0xfffffffffffffff0
    dca0:	sub	sp, sp, x0
    dca4:	mov	x0, sp
    dca8:	sub	sp, sp, x1
    dcac:	mov	x1, sp
    dcb0:	str	x0, [x29, #136]
    dcb4:	str	x1, [x29, #152]
    dcb8:	b.eq	ddb8 <__asan_cplus_demangle_v3+0x200>  // b.none
    dcbc:	sub	w0, w22, #0x2
    dcc0:	cmp	w0, #0x1
    dcc4:	b.hi	dde0 <__asan_cplus_demangle_v3+0x228>  // b.pmore
    dcc8:	ldr	x0, [x29, #128]
    dccc:	cmp	w22, #0x2
    dcd0:	cset	w2, ne  // ne = any
    dcd4:	add	x24, x0, #0xb
    dcd8:	str	x24, [x29, #128]
    dcdc:	add	w22, w2, #0x44
    dce0:	ldrb	w1, [x0, #11]
    dce4:	cmp	w1, #0x5f
    dce8:	b.ne	dcf8 <__asan_cplus_demangle_v3+0x140>  // b.any
    dcec:	ldrb	w1, [x0, #12]
    dcf0:	cmp	w1, #0x5a
    dcf4:	b.eq	de14 <__asan_cplus_demangle_v3+0x25c>  // b.none
    dcf8:	mov	x0, x24
    dcfc:	bl	0 <__asan_internal_strlen>
    dd00:	ldp	w23, w1, [x29, #144]
    dd04:	mov	x2, x0
    dd08:	cmp	w23, w1
    dd0c:	b.ge	de30 <__asan_cplus_demangle_v3+0x278>  // b.tcont
    dd10:	ldr	x0, [x29, #136]
    dd14:	mov	w3, #0x18                  	// #24
    dd18:	add	w1, w23, #0x1
    dd1c:	smaddl	x23, w23, w3, x0
    dd20:	str	wzr, [x23, #4]
    dd24:	str	w1, [x29, #144]
    dd28:	mov	x0, x23
    dd2c:	mov	x1, x24
    dd30:	bl	9140 <__asan_cplus_demangle_fill_name>
    dd34:	cmp	w0, #0x0
    dd38:	csel	x23, x23, xzr, ne  // ne = any
    dd3c:	mov	w1, w22
    dd40:	mov	x2, x23
    dd44:	mov	x0, x21
    dd48:	mov	x3, #0x0                   	// #0
    dd4c:	bl	0 <d_make_comp>
    dd50:	mov	x21, x0
    dd54:	ldr	x0, [x29, #128]
    dd58:	bl	0 <__asan_internal_strlen>
    dd5c:	ldr	x1, [x29, #128]
    dd60:	add	x1, x1, x0
    dd64:	str	x1, [x29, #128]
    dd68:	tbz	w20, #0, dd78 <__asan_cplus_demangle_v3+0x1c0>
    dd6c:	ldr	x0, [x29, #128]
    dd70:	ldrb	w0, [x0]
    dd74:	cbnz	w0, ddcc <__asan_cplus_demangle_v3+0x214>
    dd78:	cbz	x21, ddcc <__asan_cplus_demangle_v3+0x214>
    dd7c:	mov	x1, x21
    dd80:	mov	w0, w20
    dd84:	add	x3, x29, #0x40
    dd88:	adrp	x2, 0 <d_make_comp>
    dd8c:	add	x2, x2, #0x0
    dd90:	bl	d978 <__asan_cplus_demangle_print_callback>
    dd94:	mov	sp, x19
    dd98:	cbz	w0, ddd0 <__asan_cplus_demangle_v3+0x218>
    dd9c:	ldr	x0, [x29, #64]
    dda0:	mov	sp, x29
    dda4:	ldp	x19, x20, [sp, #16]
    dda8:	ldp	x21, x22, [sp, #32]
    ddac:	ldp	x23, x24, [sp, #48]
    ddb0:	ldp	x29, x30, [sp], #192
    ddb4:	ret
    ddb8:	mov	x0, x21
    ddbc:	mov	w1, w22
    ddc0:	bl	d608 <__asan_cplus_demangle_mangled_name>
    ddc4:	mov	x21, x0
    ddc8:	b	dd68 <__asan_cplus_demangle_v3+0x1b0>
    ddcc:	mov	sp, x19
    ddd0:	ldr	x0, [x29, #64]
    ddd4:	bl	0 <free>
    ddd8:	mov	x0, #0x0                   	// #0
    dddc:	b	dda0 <__asan_cplus_demangle_v3+0x1e8>
    dde0:	mov	x0, x21
    dde4:	bl	9750 <__asan_cplus_demangle_type>
    dde8:	mov	x21, x0
    ddec:	b	dd68 <__asan_cplus_demangle_v3+0x1b0>
    ddf0:	mov	w22, #0x1                   	// #1
    ddf4:	b	dc48 <__asan_cplus_demangle_v3+0x90>
    ddf8:	ldrb	w1, [x19, #10]
    ddfc:	cmp	w1, w2
    de00:	b.ne	dc40 <__asan_cplus_demangle_v3+0x88>  // b.any
    de04:	cmp	w0, #0x49
    de08:	cset	w22, ne  // ne = any
    de0c:	add	w22, w22, #0x2
    de10:	b	dc48 <__asan_cplus_demangle_v3+0x90>
    de14:	add	x2, x0, #0xd
    de18:	mov	w1, #0x0                   	// #0
    de1c:	mov	x0, x21
    de20:	str	x2, [x29, #128]
    de24:	bl	cba8 <d_encoding>
    de28:	mov	x23, x0
    de2c:	b	dd3c <__asan_cplus_demangle_v3+0x184>
    de30:	mov	x23, #0x0                   	// #0
    de34:	b	dd28 <__asan_cplus_demangle_v3+0x170>

000000000000de38 <__asan_cplus_demangle_v3_callback>:
    de38:	stp	x29, x30, [sp, #-176]!
    de3c:	mov	x29, sp
    de40:	stp	x19, x20, [sp, #16]
    de44:	mov	x19, x0
    de48:	mov	w20, w1
    de4c:	stp	x21, x22, [sp, #32]
    de50:	mov	x21, x2
    de54:	mov	x22, x3
    de58:	stp	x23, x24, [sp, #48]
    de5c:	stp	x25, x26, [sp, #64]
    de60:	ldrb	w0, [x0]
    de64:	cmp	w0, #0x5f
    de68:	b.ne	de78 <__asan_cplus_demangle_v3_callback+0x40>  // b.any
    de6c:	ldrb	w0, [x19, #1]
    de70:	cmp	w0, #0x5a
    de74:	b.eq	e080 <__asan_cplus_demangle_v3_callback+0x248>  // b.none
    de78:	adrp	x1, 0 <d_make_comp>
    de7c:	mov	x0, x19
    de80:	add	x1, x1, #0x0
    de84:	mov	x2, #0x8                   	// #8
    de88:	bl	0 <__asan_internal_strncmp>
    de8c:	cbnz	w0, dec0 <__asan_cplus_demangle_v3_callback+0x88>
    de90:	ldrb	w0, [x19, #8]
    de94:	mov	w2, #0x5f                  	// #95
    de98:	mov	w1, #0x24                  	// #36
    de9c:	cmp	w0, #0x2e
    dea0:	ccmp	w0, w2, #0x4, ne  // ne = any
    dea4:	ccmp	w0, w1, #0x4, ne  // ne = any
    dea8:	b.ne	dec0 <__asan_cplus_demangle_v3_callback+0x88>  // b.any
    deac:	ldrb	w0, [x19, #9]
    deb0:	mov	w1, #0x49                  	// #73
    deb4:	cmp	w0, #0x44
    deb8:	ccmp	w0, w1, #0x4, ne  // ne = any
    debc:	b.eq	e088 <__asan_cplus_demangle_v3_callback+0x250>  // b.none
    dec0:	mov	w24, #0x0                   	// #0
    dec4:	tbz	w20, #4, e060 <__asan_cplus_demangle_v3_callback+0x228>
    dec8:	mov	x0, x19
    decc:	add	x23, x29, #0x58
    ded0:	bl	0 <__asan_internal_strlen>
    ded4:	mov	x2, x0
    ded8:	mov	x3, x23
    dedc:	mov	x0, x19
    dee0:	mov	w1, w20
    dee4:	bl	db90 <__asan_cplus_demangle_init_info>
    dee8:	ldr	w0, [x29, #132]
    deec:	tbnz	w20, #18, def8 <__asan_cplus_demangle_v3_callback+0xc0>
    def0:	cmp	w0, #0x800
    def4:	b.hi	e060 <__asan_cplus_demangle_v3_callback+0x228>  // b.pmore
    def8:	mov	w2, #0x18                  	// #24
    defc:	ldrsw	x1, [x29, #148]
    df00:	mov	x19, sp
    df04:	cmp	w24, #0x1
    df08:	smull	x0, w0, w2
    df0c:	lsl	x1, x1, #3
    df10:	add	x0, x0, #0xf
    df14:	add	x1, x1, #0xf
    df18:	and	x0, x0, #0xfffffffffffffff0
    df1c:	and	x1, x1, #0xfffffffffffffff0
    df20:	sub	sp, sp, x0
    df24:	mov	x0, sp
    df28:	sub	sp, sp, x1
    df2c:	mov	x1, sp
    df30:	str	x0, [x29, #120]
    df34:	str	x1, [x29, #136]
    df38:	b.eq	e01c <__asan_cplus_demangle_v3_callback+0x1e4>  // b.none
    df3c:	sub	w0, w24, #0x2
    df40:	cmp	w0, #0x1
    df44:	b.hi	e050 <__asan_cplus_demangle_v3_callback+0x218>  // b.pmore
    df48:	ldr	x0, [x29, #112]
    df4c:	cmp	w24, #0x2
    df50:	cset	w2, ne  // ne = any
    df54:	add	x26, x0, #0xb
    df58:	str	x26, [x29, #112]
    df5c:	add	w24, w2, #0x44
    df60:	ldrb	w1, [x0, #11]
    df64:	cmp	w1, #0x5f
    df68:	b.ne	df78 <__asan_cplus_demangle_v3_callback+0x140>  // b.any
    df6c:	ldrb	w1, [x0, #12]
    df70:	cmp	w1, #0x5a
    df74:	b.eq	e0a4 <__asan_cplus_demangle_v3_callback+0x26c>  // b.none
    df78:	mov	x0, x26
    df7c:	bl	0 <__asan_internal_strlen>
    df80:	ldp	w25, w1, [x29, #128]
    df84:	mov	x2, x0
    df88:	cmp	w25, w1
    df8c:	b.ge	e0c0 <__asan_cplus_demangle_v3_callback+0x288>  // b.tcont
    df90:	ldr	x0, [x29, #120]
    df94:	mov	w3, #0x18                  	// #24
    df98:	add	w1, w25, #0x1
    df9c:	smaddl	x25, w25, w3, x0
    dfa0:	str	wzr, [x25, #4]
    dfa4:	str	w1, [x29, #128]
    dfa8:	mov	x0, x25
    dfac:	mov	x1, x26
    dfb0:	bl	9140 <__asan_cplus_demangle_fill_name>
    dfb4:	cmp	w0, #0x0
    dfb8:	csel	x25, x25, xzr, ne  // ne = any
    dfbc:	mov	w1, w24
    dfc0:	mov	x2, x25
    dfc4:	mov	x0, x23
    dfc8:	mov	x3, #0x0                   	// #0
    dfcc:	bl	0 <d_make_comp>
    dfd0:	mov	x23, x0
    dfd4:	ldr	x0, [x29, #112]
    dfd8:	bl	0 <__asan_internal_strlen>
    dfdc:	ldr	x1, [x29, #112]
    dfe0:	add	x1, x1, x0
    dfe4:	str	x1, [x29, #112]
    dfe8:	tbz	w20, #0, e030 <__asan_cplus_demangle_v3_callback+0x1f8>
    dfec:	ldr	x1, [x29, #112]
    dff0:	mov	w0, #0x0                   	// #0
    dff4:	ldrb	w1, [x1]
    dff8:	cbz	w1, e030 <__asan_cplus_demangle_v3_callback+0x1f8>
    dffc:	mov	sp, x19
    e000:	mov	sp, x29
    e004:	ldp	x19, x20, [sp, #16]
    e008:	ldp	x21, x22, [sp, #32]
    e00c:	ldp	x23, x24, [sp, #48]
    e010:	ldp	x25, x26, [sp, #64]
    e014:	ldp	x29, x30, [sp], #176
    e018:	ret
    e01c:	mov	x0, x23
    e020:	mov	w1, w24
    e024:	bl	d608 <__asan_cplus_demangle_mangled_name>
    e028:	mov	x23, x0
    e02c:	tbnz	w20, #0, dfec <__asan_cplus_demangle_v3_callback+0x1b4>
    e030:	mov	w0, #0x0                   	// #0
    e034:	cbz	x23, dffc <__asan_cplus_demangle_v3_callback+0x1c4>
    e038:	mov	x3, x22
    e03c:	mov	x2, x21
    e040:	mov	x1, x23
    e044:	mov	w0, w20
    e048:	bl	d978 <__asan_cplus_demangle_print_callback>
    e04c:	b	dffc <__asan_cplus_demangle_v3_callback+0x1c4>
    e050:	mov	x0, x23
    e054:	bl	9750 <__asan_cplus_demangle_type>
    e058:	mov	x23, x0
    e05c:	b	dfe8 <__asan_cplus_demangle_v3_callback+0x1b0>
    e060:	mov	sp, x29
    e064:	mov	w0, #0x0                   	// #0
    e068:	ldp	x19, x20, [sp, #16]
    e06c:	ldp	x21, x22, [sp, #32]
    e070:	ldp	x23, x24, [sp, #48]
    e074:	ldp	x25, x26, [sp, #64]
    e078:	ldp	x29, x30, [sp], #176
    e07c:	ret
    e080:	mov	w24, #0x1                   	// #1
    e084:	b	dec8 <__asan_cplus_demangle_v3_callback+0x90>
    e088:	ldrb	w1, [x19, #10]
    e08c:	cmp	w1, w2
    e090:	b.ne	dec0 <__asan_cplus_demangle_v3_callback+0x88>  // b.any
    e094:	cmp	w0, #0x49
    e098:	cset	w24, ne  // ne = any
    e09c:	add	w24, w24, #0x2
    e0a0:	b	dec8 <__asan_cplus_demangle_v3_callback+0x90>
    e0a4:	add	x2, x0, #0xd
    e0a8:	mov	w1, #0x0                   	// #0
    e0ac:	mov	x0, x23
    e0b0:	str	x2, [x29, #112]
    e0b4:	bl	cba8 <d_encoding>
    e0b8:	mov	x25, x0
    e0bc:	b	dfbc <__asan_cplus_demangle_v3_callback+0x184>
    e0c0:	mov	x25, #0x0                   	// #0
    e0c4:	b	dfa8 <__asan_cplus_demangle_v3_callback+0x170>

000000000000e0c8 <__asan_java_demangle_v3>:
    e0c8:	stp	x29, x30, [sp, #-192]!
    e0cc:	mov	x29, sp
    e0d0:	stp	x19, x20, [sp, #16]
    e0d4:	mov	x19, x0
    e0d8:	stp	x21, x22, [sp, #32]
    e0dc:	str	x23, [sp, #48]
    e0e0:	str	xzr, [x29, #64]
    e0e4:	ldrb	w0, [x0]
    e0e8:	stp	xzr, xzr, [x29, #72]
    e0ec:	cmp	w0, #0x5f
    e0f0:	str	wzr, [x29, #88]
    e0f4:	b.ne	e104 <__asan_java_demangle_v3+0x3c>  // b.any
    e0f8:	ldrb	w0, [x19, #1]
    e0fc:	cmp	w0, #0x5a
    e100:	b.eq	e170 <__asan_java_demangle_v3+0xa8>  // b.none
    e104:	adrp	x1, 0 <d_make_comp>
    e108:	mov	x0, x19
    e10c:	add	x1, x1, #0x0
    e110:	mov	x2, #0x8                   	// #8
    e114:	bl	0 <__asan_internal_strncmp>
    e118:	cbnz	w0, e14c <__asan_java_demangle_v3+0x84>
    e11c:	ldrb	w0, [x19, #8]
    e120:	mov	w2, #0x5f                  	// #95
    e124:	mov	w1, #0x24                  	// #36
    e128:	cmp	w0, #0x2e
    e12c:	ccmp	w0, w2, #0x4, ne  // ne = any
    e130:	ccmp	w0, w1, #0x4, ne  // ne = any
    e134:	b.ne	e14c <__asan_java_demangle_v3+0x84>  // b.any
    e138:	ldrb	w0, [x19, #9]
    e13c:	mov	w1, #0x49                  	// #73
    e140:	cmp	w0, #0x44
    e144:	ccmp	w0, w1, #0x4, ne  // ne = any
    e148:	b.eq	e244 <__asan_java_demangle_v3+0x17c>  // b.none
    e14c:	ldr	x0, [x29, #64]
    e150:	bl	0 <free>
    e154:	mov	sp, x29
    e158:	mov	x0, #0x0                   	// #0
    e15c:	ldp	x19, x20, [sp, #16]
    e160:	ldp	x21, x22, [sp, #32]
    e164:	ldr	x23, [sp, #48]
    e168:	ldp	x29, x30, [sp], #192
    e16c:	ret
    e170:	mov	w23, #0xffffffff            	// #-1
    e174:	mov	w21, #0x1                   	// #1
    e178:	mov	x0, x19
    e17c:	add	x20, x29, #0x68
    e180:	bl	0 <__asan_internal_strlen>
    e184:	mov	x2, x0
    e188:	mov	x3, x20
    e18c:	mov	x0, x19
    e190:	mov	w1, #0x25                  	// #37
    e194:	bl	db90 <__asan_cplus_demangle_init_info>
    e198:	ldr	w0, [x29, #148]
    e19c:	cmp	w0, #0x800
    e1a0:	b.hi	e14c <__asan_java_demangle_v3+0x84>  // b.pmore
    e1a4:	mov	w2, #0x18                  	// #24
    e1a8:	ldrsw	x1, [x29, #164]
    e1ac:	mov	x22, sp
    e1b0:	cmp	w23, #0x1
    e1b4:	smull	x0, w0, w2
    e1b8:	lsl	x1, x1, #3
    e1bc:	add	x0, x0, #0xf
    e1c0:	add	x1, x1, #0xf
    e1c4:	and	x0, x0, #0xfffffffffffffff0
    e1c8:	and	x1, x1, #0xfffffffffffffff0
    e1cc:	sub	sp, sp, x0
    e1d0:	mov	x0, sp
    e1d4:	sub	sp, sp, x1
    e1d8:	mov	x1, sp
    e1dc:	str	x0, [x29, #136]
    e1e0:	str	x1, [x29, #152]
    e1e4:	b.ls	e270 <__asan_java_demangle_v3+0x1a8>  // b.plast
    e1e8:	mov	x0, x20
    e1ec:	mov	w1, #0x1                   	// #1
    e1f0:	bl	d608 <__asan_cplus_demangle_mangled_name>
    e1f4:	mov	x19, x0
    e1f8:	ldr	x0, [x29, #128]
    e1fc:	ldrb	w0, [x0]
    e200:	cbnz	w0, e268 <__asan_java_demangle_v3+0x1a0>
    e204:	cbz	x19, e268 <__asan_java_demangle_v3+0x1a0>
    e208:	mov	x1, x19
    e20c:	add	x3, x29, #0x40
    e210:	adrp	x2, 0 <d_make_comp>
    e214:	mov	w0, #0x25                  	// #37
    e218:	add	x2, x2, #0x0
    e21c:	bl	d978 <__asan_cplus_demangle_print_callback>
    e220:	mov	sp, x22
    e224:	cbz	w0, e14c <__asan_java_demangle_v3+0x84>
    e228:	ldr	x0, [x29, #64]
    e22c:	mov	sp, x29
    e230:	ldp	x19, x20, [sp, #16]
    e234:	ldp	x21, x22, [sp, #32]
    e238:	ldr	x23, [sp, #48]
    e23c:	ldp	x29, x30, [sp], #192
    e240:	ret
    e244:	ldrb	w1, [x19, #10]
    e248:	cmp	w1, w2
    e24c:	b.ne	e14c <__asan_java_demangle_v3+0x84>  // b.any
    e250:	cmp	w0, #0x49
    e254:	mov	w21, #0x2                   	// #2
    e258:	mov	w0, #0x3                   	// #3
    e25c:	cset	w23, ne  // ne = any
    e260:	csel	w21, w21, w0, eq  // eq = none
    e264:	b	e178 <__asan_java_demangle_v3+0xb0>
    e268:	mov	sp, x22
    e26c:	b	e14c <__asan_java_demangle_v3+0x84>
    e270:	ldr	x0, [x29, #128]
    e274:	cmp	w21, #0x2
    e278:	cset	w21, ne  // ne = any
    e27c:	add	x23, x0, #0xb
    e280:	str	x23, [x29, #128]
    e284:	add	w21, w21, #0x44
    e288:	ldrb	w1, [x0, #11]
    e28c:	cmp	w1, #0x5f
    e290:	b.ne	e2a0 <__asan_java_demangle_v3+0x1d8>  // b.any
    e294:	ldrb	w1, [x0, #12]
    e298:	cmp	w1, #0x5a
    e29c:	b.eq	e314 <__asan_java_demangle_v3+0x24c>  // b.none
    e2a0:	mov	x0, x23
    e2a4:	bl	0 <__asan_internal_strlen>
    e2a8:	ldp	w19, w1, [x29, #144]
    e2ac:	mov	x2, x0
    e2b0:	cmp	w19, w1
    e2b4:	b.ge	e340 <__asan_java_demangle_v3+0x278>  // b.tcont
    e2b8:	ldr	x0, [x29, #136]
    e2bc:	mov	w3, #0x18                  	// #24
    e2c0:	add	w1, w19, #0x1
    e2c4:	smaddl	x19, w19, w3, x0
    e2c8:	str	wzr, [x19, #4]
    e2cc:	str	w1, [x29, #144]
    e2d0:	mov	x0, x19
    e2d4:	mov	x1, x23
    e2d8:	bl	9140 <__asan_cplus_demangle_fill_name>
    e2dc:	cmp	w0, #0x0
    e2e0:	csel	x19, x19, xzr, ne  // ne = any
    e2e4:	mov	x2, x19
    e2e8:	mov	w1, w21
    e2ec:	mov	x3, #0x0                   	// #0
    e2f0:	mov	x0, x20
    e2f4:	bl	0 <d_make_comp>
    e2f8:	mov	x19, x0
    e2fc:	ldr	x0, [x29, #128]
    e300:	bl	0 <__asan_internal_strlen>
    e304:	ldr	x1, [x29, #128]
    e308:	add	x0, x1, x0
    e30c:	str	x0, [x29, #128]
    e310:	b	e1fc <__asan_java_demangle_v3+0x134>
    e314:	add	x1, x0, #0xd
    e318:	str	x1, [x29, #128]
    e31c:	mov	w1, #0x54                  	// #84
    e320:	ldrb	w0, [x0, #13]
    e324:	cmp	w0, #0x47
    e328:	ccmp	w0, w1, #0x4, ne  // ne = any
    e32c:	b.ne	e348 <__asan_java_demangle_v3+0x280>  // b.any
    e330:	mov	x0, x20
    e334:	bl	c2f8 <d_special_name>
    e338:	mov	x19, x0
    e33c:	b	e2e4 <__asan_java_demangle_v3+0x21c>
    e340:	mov	x19, #0x0                   	// #0
    e344:	b	e2d0 <__asan_java_demangle_v3+0x208>
    e348:	mov	x0, x20
    e34c:	mov	w1, #0x0                   	// #0
    e350:	bl	d3e8 <d_encoding.part.0>
    e354:	mov	x19, x0
    e358:	b	e2e4 <__asan_java_demangle_v3+0x21c>
    e35c:	nop

000000000000e360 <__asan_java_demangle_v3_callback>:
    e360:	stp	x29, x30, [sp, #-176]!
    e364:	mov	x29, sp
    e368:	stp	x19, x20, [sp, #16]
    e36c:	mov	x19, x0
    e370:	mov	x20, x1
    e374:	stp	x21, x22, [sp, #32]
    e378:	mov	x21, x2
    e37c:	stp	x23, x24, [sp, #48]
    e380:	str	x25, [sp, #64]
    e384:	ldrb	w0, [x0]
    e388:	cmp	w0, #0x5f
    e38c:	b.ne	e39c <__asan_java_demangle_v3_callback+0x3c>  // b.any
    e390:	ldrb	w0, [x19, #1]
    e394:	cmp	w0, #0x5a
    e398:	b.eq	e404 <__asan_java_demangle_v3_callback+0xa4>  // b.none
    e39c:	adrp	x1, 0 <d_make_comp>
    e3a0:	mov	x0, x19
    e3a4:	add	x1, x1, #0x0
    e3a8:	mov	x2, #0x8                   	// #8
    e3ac:	bl	0 <__asan_internal_strncmp>
    e3b0:	cbnz	w0, e3e4 <__asan_java_demangle_v3_callback+0x84>
    e3b4:	ldrb	w0, [x19, #8]
    e3b8:	mov	w2, #0x5f                  	// #95
    e3bc:	mov	w1, #0x24                  	// #36
    e3c0:	cmp	w0, #0x2e
    e3c4:	ccmp	w0, w2, #0x4, ne  // ne = any
    e3c8:	ccmp	w0, w1, #0x4, ne  // ne = any
    e3cc:	b.ne	e3e4 <__asan_java_demangle_v3_callback+0x84>  // b.any
    e3d0:	ldrb	w0, [x19, #9]
    e3d4:	mov	w1, #0x49                  	// #73
    e3d8:	cmp	w0, #0x44
    e3dc:	ccmp	w0, w1, #0x4, ne  // ne = any
    e3e0:	b.eq	e4e0 <__asan_java_demangle_v3_callback+0x180>  // b.none
    e3e4:	mov	sp, x29
    e3e8:	mov	w0, #0x0                   	// #0
    e3ec:	ldp	x19, x20, [sp, #16]
    e3f0:	ldp	x21, x22, [sp, #32]
    e3f4:	ldp	x23, x24, [sp, #48]
    e3f8:	ldr	x25, [sp, #64]
    e3fc:	ldp	x29, x30, [sp], #176
    e400:	ret
    e404:	mov	w25, #0xffffffff            	// #-1
    e408:	mov	w23, #0x1                   	// #1
    e40c:	mov	x0, x19
    e410:	add	x22, x29, #0x58
    e414:	bl	0 <__asan_internal_strlen>
    e418:	mov	x2, x0
    e41c:	mov	x3, x22
    e420:	mov	x0, x19
    e424:	mov	w1, #0x25                  	// #37
    e428:	bl	db90 <__asan_cplus_demangle_init_info>
    e42c:	ldr	w0, [x29, #132]
    e430:	cmp	w0, #0x800
    e434:	b.hi	e3e4 <__asan_java_demangle_v3_callback+0x84>  // b.pmore
    e438:	mov	w1, #0x18                  	// #24
    e43c:	ldrsw	x3, [x29, #148]
    e440:	mov	x24, sp
    e444:	cmp	w25, #0x1
    e448:	smull	x0, w0, w1
    e44c:	lsl	x3, x3, #3
    e450:	add	x0, x0, #0xf
    e454:	add	x3, x3, #0xf
    e458:	and	x0, x0, #0xfffffffffffffff0
    e45c:	and	x3, x3, #0xfffffffffffffff0
    e460:	sub	sp, sp, x0
    e464:	mov	x0, sp
    e468:	sub	sp, sp, x3
    e46c:	mov	x1, sp
    e470:	str	x0, [x29, #120]
    e474:	str	x1, [x29, #136]
    e478:	b.ls	e504 <__asan_java_demangle_v3_callback+0x1a4>  // b.plast
    e47c:	mov	x0, x22
    e480:	mov	w1, #0x1                   	// #1
    e484:	bl	d608 <__asan_cplus_demangle_mangled_name>
    e488:	mov	x19, x0
    e48c:	ldr	x0, [x29, #112]
    e490:	ldrb	w1, [x0]
    e494:	mov	w0, #0x0                   	// #0
    e498:	cmp	w1, #0x0
    e49c:	ccmp	x19, #0x0, #0x4, eq  // eq = none
    e4a0:	b.ne	e4c4 <__asan_java_demangle_v3_callback+0x164>  // b.any
    e4a4:	mov	sp, x24
    e4a8:	mov	sp, x29
    e4ac:	ldp	x19, x20, [sp, #16]
    e4b0:	ldp	x21, x22, [sp, #32]
    e4b4:	ldp	x23, x24, [sp, #48]
    e4b8:	ldr	x25, [sp, #64]
    e4bc:	ldp	x29, x30, [sp], #176
    e4c0:	ret
    e4c4:	mov	x3, x21
    e4c8:	mov	x2, x20
    e4cc:	mov	x1, x19
    e4d0:	mov	w0, #0x25                  	// #37
    e4d4:	bl	d978 <__asan_cplus_demangle_print_callback>
    e4d8:	mov	sp, x24
    e4dc:	b	e4a8 <__asan_java_demangle_v3_callback+0x148>
    e4e0:	ldrb	w1, [x19, #10]
    e4e4:	cmp	w1, w2
    e4e8:	b.ne	e3e4 <__asan_java_demangle_v3_callback+0x84>  // b.any
    e4ec:	cmp	w0, #0x49
    e4f0:	mov	w23, #0x2                   	// #2
    e4f4:	mov	w0, #0x3                   	// #3
    e4f8:	cset	w25, ne  // ne = any
    e4fc:	csel	w23, w23, w0, eq  // eq = none
    e500:	b	e40c <__asan_java_demangle_v3_callback+0xac>
    e504:	ldr	x0, [x29, #112]
    e508:	cmp	w23, #0x2
    e50c:	cset	w23, ne  // ne = any
    e510:	add	x25, x0, #0xb
    e514:	str	x25, [x29, #112]
    e518:	add	w23, w23, #0x44
    e51c:	ldrb	w1, [x0, #11]
    e520:	cmp	w1, #0x5f
    e524:	b.ne	e534 <__asan_java_demangle_v3_callback+0x1d4>  // b.any
    e528:	ldrb	w1, [x0, #12]
    e52c:	cmp	w1, #0x5a
    e530:	b.eq	e5a8 <__asan_java_demangle_v3_callback+0x248>  // b.none
    e534:	mov	x0, x25
    e538:	bl	0 <__asan_internal_strlen>
    e53c:	ldp	w19, w1, [x29, #128]
    e540:	mov	x2, x0
    e544:	cmp	w19, w1
    e548:	b.ge	e5c4 <__asan_java_demangle_v3_callback+0x264>  // b.tcont
    e54c:	ldr	x0, [x29, #120]
    e550:	mov	w3, #0x18                  	// #24
    e554:	add	w1, w19, #0x1
    e558:	smaddl	x19, w19, w3, x0
    e55c:	str	wzr, [x19, #4]
    e560:	str	w1, [x29, #128]
    e564:	mov	x0, x19
    e568:	mov	x1, x25
    e56c:	bl	9140 <__asan_cplus_demangle_fill_name>
    e570:	cmp	w0, #0x0
    e574:	csel	x19, x19, xzr, ne  // ne = any
    e578:	mov	x2, x19
    e57c:	mov	w1, w23
    e580:	mov	x3, #0x0                   	// #0
    e584:	mov	x0, x22
    e588:	bl	0 <d_make_comp>
    e58c:	mov	x19, x0
    e590:	ldr	x0, [x29, #112]
    e594:	bl	0 <__asan_internal_strlen>
    e598:	ldr	x1, [x29, #112]
    e59c:	add	x0, x1, x0
    e5a0:	str	x0, [x29, #112]
    e5a4:	b	e490 <__asan_java_demangle_v3_callback+0x130>
    e5a8:	add	x2, x0, #0xd
    e5ac:	mov	w1, #0x0                   	// #0
    e5b0:	mov	x0, x22
    e5b4:	str	x2, [x29, #112]
    e5b8:	bl	cba8 <d_encoding>
    e5bc:	mov	x19, x0
    e5c0:	b	e578 <__asan_java_demangle_v3_callback+0x218>
    e5c4:	mov	x19, #0x0                   	// #0
    e5c8:	b	e564 <__asan_java_demangle_v3_callback+0x204>
    e5cc:	nop

000000000000e5d0 <__asan_is_gnu_v3_mangled_ctor>:
    e5d0:	stp	x29, x30, [sp, #-128]!
    e5d4:	mov	x29, sp
    e5d8:	stp	x19, x20, [sp, #16]
    e5dc:	mov	x20, x0
    e5e0:	add	x19, x29, #0x28
    e5e4:	bl	0 <__asan_internal_strlen>
    e5e8:	mov	x2, x0
    e5ec:	mov	x3, x19
    e5f0:	mov	x0, x20
    e5f4:	mov	w1, #0x4000                	// #16384
    e5f8:	bl	db90 <__asan_cplus_demangle_init_info>
    e5fc:	ldr	w4, [x29, #84]
    e600:	mov	w3, #0x18                  	// #24
    e604:	ldrsw	x2, [x29, #100]
    e608:	mov	x20, sp
    e60c:	mov	x0, x19
    e610:	mov	w1, #0x1                   	// #1
    e614:	smull	x4, w4, w3
    e618:	lsl	x2, x2, #3
    e61c:	add	x2, x2, #0xf
    e620:	add	x4, x4, #0xf
    e624:	and	x2, x2, #0xfffffffffffffff0
    e628:	and	x4, x4, #0xfffffffffffffff0
    e62c:	sub	sp, sp, x4
    e630:	mov	x3, sp
    e634:	sub	sp, sp, x2
    e638:	mov	x2, sp
    e63c:	str	x3, [x29, #72]
    e640:	str	x2, [x29, #88]
    e644:	bl	d608 <__asan_cplus_demangle_mangled_name>
    e648:	cbz	x0, e6b4 <__asan_is_gnu_v3_mangled_ctor+0xe4>
    e64c:	ldr	w1, [x0]
    e650:	cmp	w1, #0x7
    e654:	b.eq	e694 <__asan_is_gnu_v3_mangled_ctor+0xc4>  // b.none
    e658:	b.hi	e66c <__asan_is_gnu_v3_mangled_ctor+0x9c>  // b.pmore
    e65c:	sub	w2, w1, #0x3
    e660:	cmp	w1, #0x2
    e664:	b.hi	e684 <__asan_is_gnu_v3_mangled_ctor+0xb4>  // b.pmore
    e668:	cbnz	w1, e6ac <__asan_is_gnu_v3_mangled_ctor+0xdc>
    e66c:	mov	sp, x20
    e670:	mov	w0, #0x0                   	// #0
    e674:	mov	sp, x29
    e678:	ldp	x19, x20, [sp, #16]
    e67c:	ldp	x29, x30, [sp], #128
    e680:	ret
    e684:	cmp	w2, #0x1
    e688:	b.hi	e66c <__asan_is_gnu_v3_mangled_ctor+0x9c>  // b.pmore
    e68c:	ldr	x0, [x0, #8]
    e690:	b	e648 <__asan_is_gnu_v3_mangled_ctor+0x78>
    e694:	ldr	w0, [x0, #8]
    e698:	mov	sp, x20
    e69c:	mov	sp, x29
    e6a0:	ldp	x19, x20, [sp, #16]
    e6a4:	ldp	x29, x30, [sp], #128
    e6a8:	ret
    e6ac:	ldr	x0, [x0, #16]
    e6b0:	b	e648 <__asan_is_gnu_v3_mangled_ctor+0x78>
    e6b4:	mov	w0, #0x0                   	// #0
    e6b8:	mov	sp, x20
    e6bc:	b	e674 <__asan_is_gnu_v3_mangled_ctor+0xa4>

000000000000e6c0 <__asan_is_gnu_v3_mangled_dtor>:
    e6c0:	stp	x29, x30, [sp, #-128]!
    e6c4:	mov	x29, sp
    e6c8:	stp	x19, x20, [sp, #16]
    e6cc:	mov	x20, x0
    e6d0:	add	x19, x29, #0x28
    e6d4:	bl	0 <__asan_internal_strlen>
    e6d8:	mov	x2, x0
    e6dc:	mov	x3, x19
    e6e0:	mov	x0, x20
    e6e4:	mov	w1, #0x4000                	// #16384
    e6e8:	bl	db90 <__asan_cplus_demangle_init_info>
    e6ec:	ldr	w4, [x29, #84]
    e6f0:	mov	w3, #0x18                  	// #24
    e6f4:	ldrsw	x2, [x29, #100]
    e6f8:	mov	x20, sp
    e6fc:	mov	x0, x19
    e700:	mov	w1, #0x1                   	// #1
    e704:	smull	x4, w4, w3
    e708:	lsl	x2, x2, #3
    e70c:	add	x2, x2, #0xf
    e710:	add	x4, x4, #0xf
    e714:	and	x2, x2, #0xfffffffffffffff0
    e718:	and	x4, x4, #0xfffffffffffffff0
    e71c:	sub	sp, sp, x4
    e720:	mov	x3, sp
    e724:	sub	sp, sp, x2
    e728:	mov	x2, sp
    e72c:	str	x3, [x29, #72]
    e730:	str	x2, [x29, #88]
    e734:	bl	d608 <__asan_cplus_demangle_mangled_name>
    e738:	cbz	x0, e7ac <__asan_is_gnu_v3_mangled_dtor+0xec>
    e73c:	ldr	w1, [x0]
    e740:	cmp	w1, #0x7
    e744:	b.eq	e75c <__asan_is_gnu_v3_mangled_dtor+0x9c>  // b.none
    e748:	b.hi	e784 <__asan_is_gnu_v3_mangled_dtor+0xc4>  // b.pmore
    e74c:	sub	w2, w1, #0x3
    e750:	cmp	w1, #0x2
    e754:	b.hi	e774 <__asan_is_gnu_v3_mangled_dtor+0xb4>  // b.pmore
    e758:	cbnz	w1, e7a4 <__asan_is_gnu_v3_mangled_dtor+0xe4>
    e75c:	mov	sp, x20
    e760:	mov	w0, #0x0                   	// #0
    e764:	mov	sp, x29
    e768:	ldp	x19, x20, [sp, #16]
    e76c:	ldp	x29, x30, [sp], #128
    e770:	ret
    e774:	cmp	w2, #0x1
    e778:	b.hi	e75c <__asan_is_gnu_v3_mangled_dtor+0x9c>  // b.pmore
    e77c:	ldr	x0, [x0, #8]
    e780:	b	e738 <__asan_is_gnu_v3_mangled_dtor+0x78>
    e784:	cmp	w1, #0x8
    e788:	b.ne	e75c <__asan_is_gnu_v3_mangled_dtor+0x9c>  // b.any
    e78c:	ldr	w0, [x0, #8]
    e790:	mov	sp, x20
    e794:	mov	sp, x29
    e798:	ldp	x19, x20, [sp, #16]
    e79c:	ldp	x29, x30, [sp], #128
    e7a0:	ret
    e7a4:	ldr	x0, [x0, #16]
    e7a8:	b	e738 <__asan_is_gnu_v3_mangled_dtor+0x78>
    e7ac:	mov	w0, #0x0                   	// #0
    e7b0:	mov	sp, x20
    e7b4:	b	e764 <__asan_is_gnu_v3_mangled_dtor+0xa4>

dwarf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <abbrev_compare>:
       0:	ldr	x2, [x0]
       4:	mov	w3, #0xffffffff            	// #-1
       8:	ldr	x1, [x1]
       c:	cmp	x2, x1
      10:	cset	w0, hi  // hi = pmore
      14:	csel	w0, w0, w3, cs  // cs = hs, nlast
      18:	ret
      1c:	nop

0000000000000020 <unit_addrs_compare>:
      20:	mov	x2, x0
      24:	ldr	x0, [x1]
      28:	ldr	x3, [x2]
      2c:	cmp	x3, x0
      30:	b.cc	74 <unit_addrs_compare+0x54>  // b.lo, b.ul, b.last
      34:	mov	w0, #0x1                   	// #1
      38:	b.hi	70 <unit_addrs_compare+0x50>  // b.pmore
      3c:	ldr	x3, [x1, #8]
      40:	ldr	x4, [x2, #8]
      44:	cmp	x4, x3
      48:	b.cc	70 <unit_addrs_compare+0x50>  // b.lo, b.ul, b.last
      4c:	mov	w0, #0xffffffff            	// #-1
      50:	b.hi	70 <unit_addrs_compare+0x50>  // b.pmore
      54:	ldr	x1, [x1, #16]
      58:	ldr	x2, [x2, #16]
      5c:	ldr	x1, [x1, #56]
      60:	ldr	x2, [x2, #56]
      64:	cmp	x2, x1
      68:	cset	w3, gt
      6c:	csel	w0, w3, w0, ge  // ge = tcont
      70:	ret
      74:	mov	w0, #0xffffffff            	// #-1
      78:	ret
      7c:	nop

0000000000000080 <line_compare>:
      80:	mov	x2, x0
      84:	ldr	x0, [x1]
      88:	ldr	x3, [x2]
      8c:	cmp	x3, x0
      90:	b.cc	b8 <line_compare+0x38>  // b.lo, b.ul, b.last
      94:	mov	w0, #0x1                   	// #1
      98:	b.hi	b4 <line_compare+0x34>  // b.pmore
      9c:	ldr	w1, [x1, #20]
      a0:	mov	w3, #0xffffffff            	// #-1
      a4:	ldr	w2, [x2, #20]
      a8:	cmp	w2, w1
      ac:	cset	w0, gt
      b0:	csel	w0, w0, w3, ge  // ge = tcont
      b4:	ret
      b8:	mov	w0, #0xffffffff            	// #-1
      bc:	ret

00000000000000c0 <report_inlined_functions.isra.0>:
      c0:	cbz	x2, 218 <report_inlined_functions.isra.0+0x158>
      c4:	stp	x29, x30, [sp, #-64]!
      c8:	mov	x10, x2
      cc:	mov	x29, sp
      d0:	stp	x19, x20, [sp, #16]
      d4:	mov	x20, x6
      d8:	mov	x19, x0
      dc:	stp	x21, x22, [sp, #32]
      e0:	mov	x21, x3
      e4:	mov	x22, x4
      e8:	stp	x23, x24, [sp, #48]
      ec:	mov	x23, x5
      f0:	mov	x0, #0x0                   	// #0
      f4:	add	x7, x10, x0
      f8:	cmp	x10, x0
      fc:	and	x8, x7, #0xfffffffffffffffe
     100:	b.ls	200 <report_inlined_functions.isra.0+0x140>  // b.plast
     104:	lsr	x7, x7, #1
     108:	add	x8, x8, x7
     10c:	lsl	x9, x8, #3
     110:	ldr	x3, [x1, x8, lsl #3]
     114:	add	x8, x1, x9
     118:	cmp	x3, x19
     11c:	b.hi	1ec <report_inlined_functions.isra.0+0x12c>  // b.pmore
     120:	ldr	x3, [x8, #8]
     124:	add	x0, x7, #0x1
     128:	cmp	x19, x3
     12c:	b.cs	f4 <report_inlined_functions.isra.0+0x34>  // b.hs, b.nlast
     130:	asr	x9, x9, #3
     134:	mov	x0, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
     138:	movk	x0, #0xaaab
     13c:	mov	x3, x0
     140:	mul	x9, x9, x0
     144:	add	x9, x9, #0x1
     148:	cmp	x2, x9
     14c:	b.hi	17c <report_inlined_functions.isra.0+0xbc>  // b.pmore
     150:	b	188 <report_inlined_functions.isra.0+0xc8>
     154:	ldr	x0, [x8, #32]
     158:	cmp	x19, x0
     15c:	b.cs	188 <report_inlined_functions.isra.0+0xc8>  // b.hs, b.nlast
     160:	add	x8, x8, #0x18
     164:	sub	x7, x8, x1
     168:	asr	x7, x7, #3
     16c:	mul	x7, x7, x3
     170:	add	x7, x7, #0x1
     174:	cmp	x7, x2
     178:	b.cs	188 <report_inlined_functions.isra.0+0xc8>  // b.hs, b.nlast
     17c:	ldr	x0, [x8, #24]
     180:	cmp	x19, x0
     184:	b.cs	154 <report_inlined_functions.isra.0+0x94>  // b.hs, b.nlast
     188:	ldr	x24, [x8, #16]
     18c:	mov	x6, x20
     190:	mov	x5, x23
     194:	mov	x4, x22
     198:	mov	x3, x21
     19c:	mov	x0, x19
     1a0:	ldp	x1, x2, [x24, #24]
     1a4:	bl	c0 <report_inlined_functions.isra.0>
     1a8:	cbnz	w0, 1d8 <report_inlined_functions.isra.0+0x118>
     1ac:	ldr	w3, [x20]
     1b0:	mov	x1, x19
     1b4:	ldr	x2, [x23]
     1b8:	mov	x0, x22
     1bc:	ldr	x4, [x24]
     1c0:	blr	x21
     1c4:	cbnz	w0, 1d8 <report_inlined_functions.isra.0+0x118>
     1c8:	ldr	x1, [x24, #8]
     1cc:	str	x1, [x23]
     1d0:	ldr	w1, [x24, #16]
     1d4:	str	w1, [x20]
     1d8:	ldp	x19, x20, [sp, #16]
     1dc:	ldp	x21, x22, [sp, #32]
     1e0:	ldp	x23, x24, [sp, #48]
     1e4:	ldp	x29, x30, [sp], #64
     1e8:	ret
     1ec:	mov	x10, x7
     1f0:	add	x7, x10, x0
     1f4:	cmp	x10, x0
     1f8:	and	x8, x7, #0xfffffffffffffffe
     1fc:	b.hi	104 <report_inlined_functions.isra.0+0x44>  // b.pmore
     200:	mov	w0, #0x0                   	// #0
     204:	ldp	x19, x20, [sp, #16]
     208:	ldp	x21, x22, [sp, #32]
     20c:	ldp	x23, x24, [sp, #48]
     210:	ldp	x29, x30, [sp], #64
     214:	ret
     218:	mov	w0, #0x0                   	// #0
     21c:	ret

0000000000000220 <lookup_abbrev.isra.0>:
     220:	stp	x29, x30, [sp, #-96]!
     224:	mov	x29, sp
     228:	stp	x21, x22, [sp, #32]
     22c:	mov	x21, x0
     230:	mov	x22, x1
     234:	ldr	x0, [x0]
     238:	stp	x19, x20, [sp, #16]
     23c:	mov	x19, x2
     240:	str	x23, [sp, #48]
     244:	sub	x2, x2, #0x1
     248:	mov	x20, x3
     24c:	cmp	x2, x0
     250:	mov	x23, x4
     254:	b.cs	274 <lookup_abbrev.isra.0+0x54>  // b.hs, b.nlast
     258:	lsl	x2, x19, #5
     25c:	ldr	x1, [x1]
     260:	sub	x2, x2, #0x20
     264:	add	x0, x1, x2
     268:	ldr	x1, [x1, x2]
     26c:	cmp	x19, x1
     270:	b.eq	2bc <lookup_abbrev.isra.0+0x9c>  // b.none
     274:	add	x0, sp, #0x40
     278:	mov	x2, #0x20                  	// #32
     27c:	mov	w1, #0x0                   	// #0
     280:	bl	0 <__asan_internal_memset>
     284:	ldr	x7, [x21]
     288:	mov	x6, #0x0                   	// #0
     28c:	ldr	x8, [x22]
     290:	str	x19, [sp, #64]
     294:	add	x1, x7, x6
     298:	cmp	x7, x6
     29c:	b.ls	2e0 <lookup_abbrev.isra.0+0xc0>  // b.plast
     2a0:	lsr	x1, x1, #1
     2a4:	lsl	x5, x1, #5
     2a8:	add	x0, x8, x5
     2ac:	ldr	x5, [x8, x5]
     2b0:	cmp	x19, x5
     2b4:	b.cc	30c <lookup_abbrev.isra.0+0xec>  // b.lo, b.ul, b.last
     2b8:	b.hi	2d0 <lookup_abbrev.isra.0+0xb0>  // b.pmore
     2bc:	ldp	x19, x20, [sp, #16]
     2c0:	ldp	x21, x22, [sp, #32]
     2c4:	ldr	x23, [sp, #48]
     2c8:	ldp	x29, x30, [sp], #96
     2cc:	ret
     2d0:	add	x6, x1, #0x1
     2d4:	add	x1, x7, x6
     2d8:	cmp	x7, x6
     2dc:	b.hi	2a0 <lookup_abbrev.isra.0+0x80>  // b.pmore
     2e0:	mov	x0, x23
     2e4:	mov	w2, #0x0                   	// #0
     2e8:	adrp	x1, 0 <abbrev_compare>
     2ec:	add	x1, x1, #0x0
     2f0:	blr	x20
     2f4:	mov	x0, #0x0                   	// #0
     2f8:	ldp	x19, x20, [sp, #16]
     2fc:	ldp	x21, x22, [sp, #32]
     300:	ldr	x23, [sp, #48]
     304:	ldp	x29, x30, [sp], #96
     308:	ret
     30c:	mov	x7, x1
     310:	b	294 <lookup_abbrev.isra.0+0x74>
     314:	nop

0000000000000318 <function_addrs_compare>:
     318:	ldr	x3, [x0]
     31c:	ldr	x2, [x1]
     320:	cmp	x3, x2
     324:	b.cc	35c <function_addrs_compare+0x44>  // b.lo, b.ul, b.last
     328:	b.hi	354 <function_addrs_compare+0x3c>  // b.pmore
     32c:	ldr	x3, [x0, #8]
     330:	ldr	x2, [x1, #8]
     334:	cmp	x3, x2
     338:	b.cc	354 <function_addrs_compare+0x3c>  // b.lo, b.ul, b.last
     33c:	b.hi	35c <function_addrs_compare+0x44>  // b.pmore
     340:	ldr	x0, [x0, #16]
     344:	ldr	x1, [x1, #16]
     348:	ldr	x0, [x0]
     34c:	ldr	x1, [x1]
     350:	b	0 <__asan_internal_strcmp>
     354:	mov	w0, #0x1                   	// #1
     358:	ret
     35c:	mov	w0, #0xffffffff            	// #-1
     360:	ret
     364:	nop

0000000000000368 <read_uleb128>:
     368:	stp	x29, x30, [sp, #-288]!
     36c:	mov	w1, #0x0                   	// #0
     370:	mov	x29, sp
     374:	stp	x19, x20, [sp, #16]
     378:	mov	x19, x0
     37c:	stp	x23, x24, [sp, #48]
     380:	adrp	x24, 0 <abbrev_compare>
     384:	adrp	x23, 0 <abbrev_compare>
     388:	add	x24, x24, #0x0
     38c:	add	x23, x23, #0x0
     390:	str	x25, [sp, #64]
     394:	add	x25, sp, #0x58
     398:	stp	x21, x22, [sp, #32]
     39c:	mov	w21, #0x0                   	// #0
     3a0:	mov	x22, #0x0                   	// #0
     3a4:	nop
     3a8:	ldp	x6, x20, [x19, #16]
     3ac:	cbnz	x20, 3d4 <read_uleb128+0x6c>
     3b0:	ldr	w0, [x19, #56]
     3b4:	cbz	w0, 458 <read_uleb128+0xf0>
     3b8:	mov	x0, x20
     3bc:	ldp	x19, x20, [sp, #16]
     3c0:	ldp	x21, x22, [sp, #32]
     3c4:	ldp	x23, x24, [sp, #48]
     3c8:	ldr	x25, [sp, #64]
     3cc:	ldp	x29, x30, [sp], #288
     3d0:	ret
     3d4:	sub	x20, x20, #0x1
     3d8:	add	x5, x6, #0x1
     3dc:	stp	x5, x20, [x19, #16]
     3e0:	cmp	w21, #0x3f
     3e4:	ldrb	w20, [x6]
     3e8:	b.hi	420 <read_uleb128+0xb8>  // b.pmore
     3ec:	and	x0, x20, #0x7f
     3f0:	lsl	x0, x0, x21
     3f4:	orr	x22, x22, x0
     3f8:	add	w21, w21, #0x7
     3fc:	tbnz	w20, #7, 3a8 <read_uleb128+0x40>
     400:	mov	x20, x22
     404:	mov	x0, x20
     408:	ldp	x19, x20, [sp, #16]
     40c:	ldp	x21, x22, [sp, #32]
     410:	ldp	x23, x24, [sp, #48]
     414:	ldr	x25, [sp, #64]
     418:	ldp	x29, x30, [sp], #288
     41c:	ret
     420:	cbnz	w1, 3f8 <read_uleb128+0x90>
     424:	ldp	x4, x6, [x19]
     428:	mov	x3, x24
     42c:	mov	x2, x23
     430:	mov	x1, #0xc8                  	// #200
     434:	mov	x0, x25
     438:	sub	w5, w5, w6
     43c:	bl	0 <snprintf>
     440:	ldp	x3, x0, [x19, #40]
     444:	mov	x1, x25
     448:	mov	w2, #0x0                   	// #0
     44c:	blr	x3
     450:	mov	w1, #0x1                   	// #1
     454:	b	3f8 <read_uleb128+0x90>
     458:	ldp	x4, x5, [x19]
     45c:	add	x21, sp, #0x58
     460:	mov	x0, x21
     464:	mov	x1, #0xc8                  	// #200
     468:	adrp	x3, 0 <abbrev_compare>
     46c:	adrp	x2, 0 <abbrev_compare>
     470:	add	x3, x3, #0x0
     474:	add	x2, x2, #0x0
     478:	sub	w5, w6, w5
     47c:	bl	0 <snprintf>
     480:	ldp	x3, x0, [x19, #40]
     484:	mov	x1, x21
     488:	mov	w2, #0x0                   	// #0
     48c:	blr	x3
     490:	mov	w0, #0x1                   	// #1
     494:	str	w0, [x19, #56]
     498:	mov	x0, x20
     49c:	ldp	x19, x20, [sp, #16]
     4a0:	ldp	x21, x22, [sp, #32]
     4a4:	ldp	x23, x24, [sp, #48]
     4a8:	ldr	x25, [sp, #64]
     4ac:	ldp	x29, x30, [sp], #288
     4b0:	ret
     4b4:	nop

00000000000004b8 <read_sleb128>:
     4b8:	stp	x29, x30, [sp, #-288]!
     4bc:	mov	w1, #0x0                   	// #0
     4c0:	mov	x29, sp
     4c4:	stp	x19, x20, [sp, #16]
     4c8:	mov	x19, x0
     4cc:	mov	w20, #0x0                   	// #0
     4d0:	stp	x23, x24, [sp, #48]
     4d4:	adrp	x24, 0 <abbrev_compare>
     4d8:	adrp	x23, 0 <abbrev_compare>
     4dc:	add	x24, x24, #0x0
     4e0:	add	x23, x23, #0x0
     4e4:	str	x25, [sp, #64]
     4e8:	add	x25, sp, #0x58
     4ec:	stp	x21, x22, [sp, #32]
     4f0:	mov	x22, #0x0                   	// #0
     4f4:	nop
     4f8:	ldp	x6, x0, [x19, #16]
     4fc:	cbnz	x0, 528 <read_sleb128+0x70>
     500:	ldr	w0, [x19, #56]
     504:	mov	x22, #0x0                   	// #0
     508:	cbz	w0, 5c4 <read_sleb128+0x10c>
     50c:	mov	x0, x22
     510:	ldp	x19, x20, [sp, #16]
     514:	ldp	x21, x22, [sp, #32]
     518:	ldp	x23, x24, [sp, #48]
     51c:	ldr	x25, [sp, #64]
     520:	ldp	x29, x30, [sp], #288
     524:	ret
     528:	sub	x0, x0, #0x1
     52c:	add	x5, x6, #0x1
     530:	stp	x5, x0, [x19, #16]
     534:	cmp	w20, #0x3f
     538:	ldrb	w21, [x6]
     53c:	b.hi	58c <read_sleb128+0xd4>  // b.pmore
     540:	and	x0, x21, #0x7f
     544:	lsl	x0, x0, x20
     548:	orr	x22, x22, x0
     54c:	add	w20, w20, #0x7
     550:	tbnz	w21, #7, 4f8 <read_sleb128+0x40>
     554:	and	w21, w21, #0x40
     558:	cmp	w20, #0x3f
     55c:	mov	x0, #0xffffffffffffffff    	// #-1
     560:	ccmp	w21, #0x0, #0x4, ls  // ls = plast
     564:	lsl	x20, x0, x20
     568:	orr	x20, x22, x20
     56c:	csel	x22, x20, x22, ne  // ne = any
     570:	mov	x0, x22
     574:	ldp	x19, x20, [sp, #16]
     578:	ldp	x21, x22, [sp, #32]
     57c:	ldp	x23, x24, [sp, #48]
     580:	ldr	x25, [sp, #64]
     584:	ldp	x29, x30, [sp], #288
     588:	ret
     58c:	cbnz	w1, 54c <read_sleb128+0x94>
     590:	ldp	x4, x6, [x19]
     594:	mov	x3, x24
     598:	mov	x2, x23
     59c:	mov	x1, #0xc8                  	// #200
     5a0:	mov	x0, x25
     5a4:	sub	w5, w5, w6
     5a8:	bl	0 <snprintf>
     5ac:	ldp	x3, x0, [x19, #40]
     5b0:	mov	x1, x25
     5b4:	mov	w2, #0x0                   	// #0
     5b8:	blr	x3
     5bc:	mov	w1, #0x1                   	// #1
     5c0:	b	54c <read_sleb128+0x94>
     5c4:	ldp	x4, x5, [x19]
     5c8:	add	x20, sp, #0x58
     5cc:	mov	x0, x20
     5d0:	mov	x1, #0xc8                  	// #200
     5d4:	adrp	x3, 0 <abbrev_compare>
     5d8:	adrp	x2, 0 <abbrev_compare>
     5dc:	add	x3, x3, #0x0
     5e0:	add	x2, x2, #0x0
     5e4:	sub	w5, w6, w5
     5e8:	bl	0 <snprintf>
     5ec:	ldp	x3, x0, [x19, #40]
     5f0:	mov	x1, x20
     5f4:	mov	w2, #0x0                   	// #0
     5f8:	blr	x3
     5fc:	mov	w0, #0x1                   	// #1
     600:	str	w0, [x19, #56]
     604:	mov	x0, x22
     608:	ldp	x19, x20, [sp, #16]
     60c:	ldp	x21, x22, [sp, #32]
     610:	ldp	x23, x24, [sp, #48]
     614:	ldr	x25, [sp, #64]
     618:	ldp	x29, x30, [sp], #288
     61c:	ret

0000000000000620 <read_uint16>:
     620:	stp	x29, x30, [sp, #-256]!
     624:	mov	x29, sp
     628:	stp	x19, x20, [sp, #16]
     62c:	mov	x19, x0
     630:	ldr	x0, [x0, #24]
     634:	ldr	x5, [x19, #16]
     638:	cmp	x0, #0x1
     63c:	b.hi	65c <read_uint16+0x3c>  // b.pmore
     640:	ldr	w0, [x19, #56]
     644:	mov	w20, #0x0                   	// #0
     648:	cbz	w0, 6a8 <read_uint16+0x88>
     64c:	mov	w0, w20
     650:	ldp	x19, x20, [sp, #16]
     654:	ldp	x29, x30, [sp], #256
     658:	ret
     65c:	ldr	w1, [x19, #32]
     660:	sub	x0, x0, #0x2
     664:	add	x2, x5, #0x2
     668:	stp	x2, x0, [x19, #16]
     66c:	cbz	w1, 68c <read_uint16+0x6c>
     670:	ldrb	w0, [x5]
     674:	ldrb	w20, [x5, #1]
     678:	bfi	w20, w0, #8, #24
     67c:	mov	w0, w20
     680:	ldp	x19, x20, [sp, #16]
     684:	ldp	x29, x30, [sp], #256
     688:	ret
     68c:	ldrb	w0, [x5, #1]
     690:	ldrb	w20, [x5]
     694:	bfi	w20, w0, #8, #24
     698:	mov	w0, w20
     69c:	ldp	x19, x20, [sp, #16]
     6a0:	ldp	x29, x30, [sp], #256
     6a4:	ret
     6a8:	ldp	x4, x1, [x19]
     6ac:	str	x21, [sp, #32]
     6b0:	add	x21, sp, #0x38
     6b4:	adrp	x3, 0 <abbrev_compare>
     6b8:	mov	x0, x21
     6bc:	add	x3, x3, #0x0
     6c0:	adrp	x2, 0 <abbrev_compare>
     6c4:	add	x2, x2, #0x0
     6c8:	sub	w5, w5, w1
     6cc:	mov	x1, #0xc8                  	// #200
     6d0:	bl	0 <snprintf>
     6d4:	ldp	x3, x0, [x19, #40]
     6d8:	mov	x1, x21
     6dc:	mov	w2, #0x0                   	// #0
     6e0:	blr	x3
     6e4:	mov	w0, #0x1                   	// #1
     6e8:	ldr	x21, [sp, #32]
     6ec:	str	w0, [x19, #56]
     6f0:	mov	w0, w20
     6f4:	ldp	x19, x20, [sp, #16]
     6f8:	ldp	x29, x30, [sp], #256
     6fc:	ret

0000000000000700 <read_uint32>:
     700:	stp	x29, x30, [sp, #-256]!
     704:	mov	x29, sp
     708:	stp	x19, x20, [sp, #16]
     70c:	mov	x19, x0
     710:	ldr	x0, [x0, #24]
     714:	ldr	x5, [x19, #16]
     718:	cmp	x0, #0x3
     71c:	b.hi	73c <read_uint32+0x3c>  // b.pmore
     720:	ldr	w0, [x19, #56]
     724:	mov	w20, #0x0                   	// #0
     728:	cbz	w0, 77c <read_uint32+0x7c>
     72c:	mov	w0, w20
     730:	ldp	x19, x20, [sp, #16]
     734:	ldp	x29, x30, [sp], #256
     738:	ret
     73c:	ldr	w1, [x19, #32]
     740:	sub	x0, x0, #0x4
     744:	add	x2, x5, #0x4
     748:	stp	x2, x0, [x19, #16]
     74c:	cbz	w1, 768 <read_uint32+0x68>
     750:	ldr	w20, [x5]
     754:	rev	w20, w20
     758:	mov	w0, w20
     75c:	ldp	x19, x20, [sp, #16]
     760:	ldp	x29, x30, [sp], #256
     764:	ret
     768:	ldr	w20, [x5]
     76c:	mov	w0, w20
     770:	ldp	x19, x20, [sp, #16]
     774:	ldp	x29, x30, [sp], #256
     778:	ret
     77c:	ldp	x4, x1, [x19]
     780:	str	x21, [sp, #32]
     784:	add	x21, sp, #0x38
     788:	adrp	x3, 0 <abbrev_compare>
     78c:	mov	x0, x21
     790:	add	x3, x3, #0x0
     794:	adrp	x2, 0 <abbrev_compare>
     798:	add	x2, x2, #0x0
     79c:	sub	w5, w5, w1
     7a0:	mov	x1, #0xc8                  	// #200
     7a4:	bl	0 <snprintf>
     7a8:	ldp	x3, x0, [x19, #40]
     7ac:	mov	x1, x21
     7b0:	mov	w2, #0x0                   	// #0
     7b4:	blr	x3
     7b8:	mov	w0, #0x1                   	// #1
     7bc:	ldr	x21, [sp, #32]
     7c0:	str	w0, [x19, #56]
     7c4:	mov	w0, w20
     7c8:	ldp	x19, x20, [sp, #16]
     7cc:	ldp	x29, x30, [sp], #256
     7d0:	ret
     7d4:	nop

00000000000007d8 <read_uint64>:
     7d8:	stp	x29, x30, [sp, #-256]!
     7dc:	mov	x29, sp
     7e0:	stp	x19, x20, [sp, #16]
     7e4:	mov	x19, x0
     7e8:	ldr	x0, [x0, #24]
     7ec:	ldr	x5, [x19, #16]
     7f0:	cmp	x0, #0x7
     7f4:	b.hi	814 <read_uint64+0x3c>  // b.pmore
     7f8:	ldr	w0, [x19, #56]
     7fc:	mov	x20, #0x0                   	// #0
     800:	cbz	w0, 854 <read_uint64+0x7c>
     804:	mov	x0, x20
     808:	ldp	x19, x20, [sp, #16]
     80c:	ldp	x29, x30, [sp], #256
     810:	ret
     814:	ldr	w1, [x19, #32]
     818:	sub	x0, x0, #0x8
     81c:	add	x2, x5, #0x8
     820:	stp	x2, x0, [x19, #16]
     824:	cbz	w1, 840 <read_uint64+0x68>
     828:	ldr	x20, [x5]
     82c:	rev	x20, x20
     830:	mov	x0, x20
     834:	ldp	x19, x20, [sp, #16]
     838:	ldp	x29, x30, [sp], #256
     83c:	ret
     840:	ldr	x20, [x5]
     844:	mov	x0, x20
     848:	ldp	x19, x20, [sp, #16]
     84c:	ldp	x29, x30, [sp], #256
     850:	ret
     854:	ldp	x4, x1, [x19]
     858:	str	x21, [sp, #32]
     85c:	add	x21, sp, #0x38
     860:	adrp	x3, 0 <abbrev_compare>
     864:	mov	x0, x21
     868:	add	x3, x3, #0x0
     86c:	adrp	x2, 0 <abbrev_compare>
     870:	add	x2, x2, #0x0
     874:	sub	w5, w5, w1
     878:	mov	x1, #0xc8                  	// #200
     87c:	bl	0 <snprintf>
     880:	ldp	x3, x0, [x19, #40]
     884:	mov	x1, x21
     888:	mov	w2, #0x0                   	// #0
     88c:	blr	x3
     890:	mov	w0, #0x1                   	// #1
     894:	ldr	x21, [sp, #32]
     898:	str	w0, [x19, #56]
     89c:	mov	x0, x20
     8a0:	ldp	x19, x20, [sp, #16]
     8a4:	ldp	x29, x30, [sp], #256
     8a8:	ret
     8ac:	nop

00000000000008b0 <read_address>:
     8b0:	stp	x29, x30, [sp, #-256]!
     8b4:	cmp	w1, #0x4
     8b8:	mov	x29, sp
     8bc:	stp	x21, x22, [sp, #32]
     8c0:	b.eq	9b4 <read_address+0x104>  // b.none
     8c4:	stp	x19, x20, [sp, #16]
     8c8:	mov	w19, w1
     8cc:	mov	x20, x0
     8d0:	b.gt	910 <read_address+0x60>
     8d4:	cmp	w1, #0x1
     8d8:	b.eq	9cc <read_address+0x11c>  // b.none
     8dc:	cmp	w1, #0x2
     8e0:	b.ne	960 <read_address+0xb0>  // b.any
     8e4:	ldp	x5, x0, [x0, #16]
     8e8:	cmp	x0, #0x1
     8ec:	b.hi	934 <read_address+0x84>  // b.pmore
     8f0:	ldr	w0, [x20, #56]
     8f4:	mov	x21, #0x0                   	// #0
     8f8:	cbz	w0, a5c <read_address+0x1ac>
     8fc:	ldp	x19, x20, [sp, #16]
     900:	mov	x0, x21
     904:	ldp	x21, x22, [sp, #32]
     908:	ldp	x29, x30, [sp], #256
     90c:	ret
     910:	cmp	w1, #0x8
     914:	b.ne	960 <read_address+0xb0>  // b.any
     918:	bl	7d8 <read_uint64>
     91c:	mov	x21, x0
     920:	mov	x0, x21
     924:	ldp	x19, x20, [sp, #16]
     928:	ldp	x21, x22, [sp, #32]
     92c:	ldp	x29, x30, [sp], #256
     930:	ret
     934:	ldr	w1, [x20, #32]
     938:	sub	x0, x0, #0x2
     93c:	add	x2, x5, #0x2
     940:	stp	x2, x0, [x20, #16]
     944:	cbz	w1, a44 <read_address+0x194>
     948:	ldrb	w21, [x5]
     94c:	ldrb	w0, [x5, #1]
     950:	ldp	x19, x20, [sp, #16]
     954:	orr	w21, w0, w21, lsl #8
     958:	and	x21, x21, #0xffff
     95c:	b	900 <read_address+0x50>
     960:	ldp	x4, x1, [x20]
     964:	add	x19, sp, #0x38
     968:	ldr	x5, [x20, #16]
     96c:	mov	x0, x19
     970:	adrp	x3, 0 <abbrev_compare>
     974:	adrp	x2, 0 <abbrev_compare>
     978:	add	x3, x3, #0x0
     97c:	add	x2, x2, #0x0
     980:	sub	w5, w5, w1
     984:	mov	x1, #0xc8                  	// #200
     988:	bl	0 <snprintf>
     98c:	mov	x21, #0x0                   	// #0
     990:	ldp	x3, x0, [x20, #40]
     994:	mov	x1, x19
     998:	mov	w2, #0x0                   	// #0
     99c:	blr	x3
     9a0:	mov	x0, x21
     9a4:	ldp	x19, x20, [sp, #16]
     9a8:	ldp	x21, x22, [sp, #32]
     9ac:	ldp	x29, x30, [sp], #256
     9b0:	ret
     9b4:	bl	700 <read_uint32>
     9b8:	mov	w21, w0
     9bc:	mov	x0, x21
     9c0:	ldp	x21, x22, [sp, #32]
     9c4:	ldp	x29, x30, [sp], #256
     9c8:	ret
     9cc:	ldp	x5, x21, [x0, #16]
     9d0:	cbnz	x21, a20 <read_address+0x170>
     9d4:	ldr	w0, [x0, #56]
     9d8:	cbnz	w0, 8fc <read_address+0x4c>
     9dc:	ldp	x4, x1, [x20]
     9e0:	add	x22, sp, #0x38
     9e4:	mov	x0, x22
     9e8:	adrp	x3, 0 <abbrev_compare>
     9ec:	adrp	x2, 0 <abbrev_compare>
     9f0:	add	x3, x3, #0x0
     9f4:	add	x2, x2, #0x0
     9f8:	sub	w5, w5, w1
     9fc:	mov	x1, #0xc8                  	// #200
     a00:	bl	0 <snprintf>
     a04:	ldp	x3, x0, [x20, #40]
     a08:	mov	x1, x22
     a0c:	mov	w2, #0x0                   	// #0
     a10:	blr	x3
     a14:	str	w19, [x20, #56]
     a18:	ldp	x19, x20, [sp, #16]
     a1c:	b	900 <read_address+0x50>
     a20:	add	x0, x5, #0x1
     a24:	sub	x21, x21, #0x1
     a28:	stp	x0, x21, [x20, #16]
     a2c:	ldrb	w21, [x5]
     a30:	ldp	x19, x20, [sp, #16]
     a34:	mov	x0, x21
     a38:	ldp	x21, x22, [sp, #32]
     a3c:	ldp	x29, x30, [sp], #256
     a40:	ret
     a44:	ldrb	w21, [x5, #1]
     a48:	ldrb	w0, [x5]
     a4c:	ldp	x19, x20, [sp, #16]
     a50:	orr	w21, w0, w21, lsl #8
     a54:	and	x21, x21, #0xffff
     a58:	b	900 <read_address+0x50>
     a5c:	ldp	x4, x1, [x20]
     a60:	add	x19, sp, #0x38
     a64:	mov	x0, x19
     a68:	adrp	x3, 0 <abbrev_compare>
     a6c:	adrp	x2, 0 <abbrev_compare>
     a70:	add	x3, x3, #0x0
     a74:	add	x2, x2, #0x0
     a78:	sub	w5, w5, w1
     a7c:	mov	x1, #0xc8                  	// #200
     a80:	bl	0 <snprintf>
     a84:	ldp	x3, x0, [x20, #40]
     a88:	mov	x1, x19
     a8c:	mov	w2, #0x0                   	// #0
     a90:	blr	x3
     a94:	mov	w0, #0x1                   	// #1
     a98:	str	w0, [x20, #56]
     a9c:	ldp	x19, x20, [sp, #16]
     aa0:	b	900 <read_address+0x50>
     aa4:	nop

0000000000000aa8 <read_attribute>:
     aa8:	stp	x29, x30, [sp, #-304]!
     aac:	mov	x29, sp
     ab0:	stp	x21, x22, [sp, #32]
     ab4:	mov	w22, w2
     ab8:	ldr	x21, [sp, #304]
     abc:	stp	x19, x20, [sp, #16]
     ac0:	adrp	x20, 0 <abbrev_compare>
     ac4:	mov	w19, w0
     ac8:	add	x20, x20, #0x0
     acc:	stp	x23, x24, [sp, #48]
     ad0:	mov	x24, x5
     ad4:	mov	x23, x7
     ad8:	stp	x25, x26, [sp, #64]
     adc:	mov	w26, w3
     ae0:	mov	w25, w4
     ae4:	stp	x27, x28, [sp, #80]
     ae8:	mov	x28, x1
     aec:	mov	x27, x6
     af0:	mov	x0, x21
     af4:	mov	x2, #0x10                  	// #16
     af8:	mov	w1, #0x0                   	// #0
     afc:	bl	0 <__asan_internal_memset>
     b00:	cmp	w19, #0x20
     b04:	b.hi	b28 <read_attribute+0x80>  // b.pmore
     b08:	cbz	w19, dec <read_attribute+0x344>
     b0c:	sub	w19, w19, #0x1
     b10:	cmp	w19, #0x1f
     b14:	b.hi	dec <read_attribute+0x344>  // b.pmore
     b18:	ldrh	w0, [x20, w19, uxtw #1]
     b1c:	adr	x1, b28 <read_attribute+0x80>
     b20:	add	x0, x1, w0, sxth #2
     b24:	br	x0
     b28:	mov	w0, #0x1f20                	// #7968
     b2c:	cmp	w19, w0
     b30:	b.eq	f98 <read_attribute+0x4f0>  // b.none
     b34:	b.ls	b98 <read_attribute+0xf0>  // b.plast
     b38:	mov	w0, #0x1f21                	// #7969
     b3c:	cmp	w19, w0
     b40:	b.ne	dec <read_attribute+0x344>  // b.any
     b44:	mov	x0, x28
     b48:	cbz	w22, f8c <read_attribute+0x4e4>
     b4c:	bl	7d8 <read_uint64>
     b50:	cbz	x23, 1038 <read_attribute+0x590>
     b54:	ldr	x1, [x23, #112]
     b58:	cmp	x1, x0
     b5c:	b.ls	1144 <read_attribute+0x69c>  // b.plast
     b60:	ldr	x1, [x23, #104]
     b64:	mov	w2, #0x4                   	// #4
     b68:	mov	w19, #0x1                   	// #1
     b6c:	str	w2, [x21]
     b70:	add	x0, x1, x0
     b74:	str	x0, [x21, #8]
     b78:	mov	w0, w19
     b7c:	ldp	x19, x20, [sp, #16]
     b80:	ldp	x21, x22, [sp, #32]
     b84:	ldp	x23, x24, [sp, #48]
     b88:	ldp	x25, x26, [sp, #64]
     b8c:	ldp	x27, x28, [sp, #80]
     b90:	ldp	x29, x30, [sp], #304
     b94:	ret
     b98:	mov	w0, #0xffffe0ff            	// #-7937
     b9c:	add	w19, w19, w0
     ba0:	cmp	w19, #0x1
     ba4:	mov	w0, #0x8                   	// #8
     ba8:	b.hi	dec <read_attribute+0x344>  // b.pmore
     bac:	str	w0, [x21]
     bb0:	mov	x0, x28
     bb4:	mov	w19, #0x1                   	// #1
     bb8:	bl	368 <read_uleb128>
     bbc:	str	x0, [x21, #8]
     bc0:	mov	w0, w19
     bc4:	ldp	x19, x20, [sp, #16]
     bc8:	ldp	x21, x22, [sp, #32]
     bcc:	ldp	x23, x24, [sp, #48]
     bd0:	ldp	x25, x26, [sp, #64]
     bd4:	ldp	x27, x28, [sp, #80]
     bd8:	ldp	x29, x30, [sp], #304
     bdc:	ret
     be0:	ldp	x5, x20, [x28, #16]
     be4:	mov	w0, #0x2                   	// #2
     be8:	str	w0, [x21]
     bec:	cbnz	x20, c34 <read_attribute+0x18c>
     bf0:	ldr	w0, [x28, #56]
     bf4:	cbz	w0, f44 <read_attribute+0x49c>
     bf8:	mov	w19, #0x1                   	// #1
     bfc:	nop
     c00:	str	x20, [x21, #8]
     c04:	mov	w0, w19
     c08:	ldp	x19, x20, [sp, #16]
     c0c:	ldp	x21, x22, [sp, #32]
     c10:	ldp	x23, x24, [sp, #48]
     c14:	ldp	x25, x26, [sp, #64]
     c18:	ldp	x27, x28, [sp, #80]
     c1c:	ldp	x29, x30, [sp], #304
     c20:	ret
     c24:	ldp	x5, x20, [x28, #16]
     c28:	mov	w0, #0x5                   	// #5
     c2c:	str	w0, [x21]
     c30:	cbz	x20, bf0 <read_attribute+0x148>
     c34:	sub	x20, x20, #0x1
     c38:	add	x0, x5, #0x1
     c3c:	stp	x0, x20, [x28, #16]
     c40:	mov	w19, #0x1                   	// #1
     c44:	ldrb	w20, [x5]
     c48:	b	c00 <read_attribute+0x158>
     c4c:	mov	w0, #0x3                   	// #3
     c50:	str	w0, [x21]
     c54:	mov	w19, #0x1                   	// #1
     c58:	mov	x0, x28
     c5c:	bl	4b8 <read_sleb128>
     c60:	str	x0, [x21, #8]
     c64:	b	b78 <read_attribute+0xd0>
     c68:	mov	w0, #0x9                   	// #9
     c6c:	str	w0, [x21]
     c70:	mov	x0, x28
     c74:	mov	w19, #0x1                   	// #1
     c78:	bl	7d8 <read_uint64>
     c7c:	str	x0, [x21, #8]
     c80:	mov	w0, w19
     c84:	ldp	x19, x20, [sp, #16]
     c88:	ldp	x21, x22, [sp, #32]
     c8c:	ldp	x23, x24, [sp, #48]
     c90:	ldp	x25, x26, [sp, #64]
     c94:	ldp	x27, x28, [sp, #80]
     c98:	ldp	x29, x30, [sp], #304
     c9c:	ret
     ca0:	ldp	x6, x0, [x28, #16]
     ca4:	mov	w1, #0xa                   	// #10
     ca8:	str	w1, [x21]
     cac:	cbnz	x0, fc8 <read_attribute+0x520>
     cb0:	ldr	w1, [x28, #56]
     cb4:	cbz	w1, 10b4 <read_attribute+0x60c>
     cb8:	mov	w19, #0x1                   	// #1
     cbc:	stp	x6, x0, [x28, #16]
     cc0:	b	b78 <read_attribute+0xd0>
     cc4:	mov	w0, #0xa                   	// #10
     cc8:	str	w0, [x21]
     ccc:	mov	x0, x28
     cd0:	bl	368 <read_uleb128>
     cd4:	ldr	x1, [x28, #24]
     cd8:	cmp	x0, x1
     cdc:	b.ls	1008 <read_attribute+0x560>  // b.plast
     ce0:	ldr	w19, [x28, #56]
     ce4:	cbz	w19, efc <read_attribute+0x454>
     ce8:	mov	w19, #0x0                   	// #0
     cec:	b	b78 <read_attribute+0xd0>
     cf0:	ldp	x20, x1, [x28, #16]
     cf4:	mov	w0, #0x4                   	// #4
     cf8:	str	w0, [x21]
     cfc:	mov	x0, x20
     d00:	bl	0 <__asan_internal_strnlen>
     d04:	ldr	x1, [x28, #24]
     d08:	add	x0, x0, #0x1
     d0c:	cmp	x0, x1
     d10:	b.ls	1044 <read_attribute+0x59c>  // b.plast
     d14:	ldr	w19, [x28, #56]
     d18:	cbz	w19, 1064 <read_attribute+0x5bc>
     d1c:	mov	x20, #0x0                   	// #0
     d20:	mov	w19, #0x0                   	// #0
     d24:	str	x20, [x21, #8]
     d28:	b	c04 <read_attribute+0x15c>
     d2c:	mov	w0, #0x2                   	// #2
     d30:	str	w0, [x21]
     d34:	mov	w19, #0x1                   	// #1
     d38:	mov	x0, x28
     d3c:	bl	700 <read_uint32>
     d40:	mov	w0, w0
     d44:	str	x0, [x21, #8]
     d48:	b	b78 <read_attribute+0xd0>
     d4c:	mov	w0, #0x2                   	// #2
     d50:	str	w0, [x21]
     d54:	mov	w19, #0x1                   	// #1
     d58:	mov	x0, x28
     d5c:	bl	620 <read_uint16>
     d60:	and	x0, x0, #0xffff
     d64:	str	x0, [x21, #8]
     d68:	b	b78 <read_attribute+0xd0>
     d6c:	mov	w0, #0x2                   	// #2
     d70:	b	c6c <read_attribute+0x1c4>
     d74:	mov	w0, #0xa                   	// #10
     d78:	str	w0, [x21]
     d7c:	mov	x0, x28
     d80:	bl	700 <read_uint32>
     d84:	mov	w2, w0
     d88:	ldr	x1, [x28, #24]
     d8c:	cmp	x1, w0, uxtw
     d90:	b.cc	ce0 <read_attribute+0x238>  // b.lo, b.ul, b.last
     d94:	ldr	x0, [x28, #16]
     d98:	sub	x1, x1, x2
     d9c:	mov	w19, #0x1                   	// #1
     da0:	add	x2, x0, x2
     da4:	stp	x2, x1, [x28, #16]
     da8:	b	b78 <read_attribute+0xd0>
     dac:	mov	w0, #0xa                   	// #10
     db0:	str	w0, [x21]
     db4:	mov	x0, x28
     db8:	bl	620 <read_uint16>
     dbc:	and	x2, x0, #0xffff
     dc0:	ldr	x1, [x28, #24]
     dc4:	cmp	x1, w0, uxth
     dc8:	b.cc	ce0 <read_attribute+0x238>  // b.lo, b.ul, b.last
     dcc:	b	d94 <read_attribute+0x2ec>
     dd0:	mov	w19, #0x1                   	// #1
     dd4:	str	w19, [x21]
     dd8:	mov	w1, w25
     ddc:	mov	x0, x28
     de0:	bl	8b0 <read_address>
     de4:	str	x0, [x21, #8]
     de8:	b	b78 <read_attribute+0xd0>
     dec:	ldp	x4, x1, [x28]
     df0:	add	x20, sp, #0x68
     df4:	ldr	x5, [x28, #16]
     df8:	mov	x0, x20
     dfc:	adrp	x3, 0 <abbrev_compare>
     e00:	adrp	x2, 0 <abbrev_compare>
     e04:	add	x3, x3, #0x0
     e08:	add	x2, x2, #0x0
     e0c:	sub	w5, w5, w1
     e10:	mov	x1, #0xc8                  	// #200
     e14:	bl	0 <snprintf>
     e18:	mov	w19, #0x0                   	// #0
     e1c:	ldp	x3, x0, [x28, #40]
     e20:	mov	x1, x20
     e24:	mov	w2, #0x0                   	// #0
     e28:	blr	x3
     e2c:	b	b78 <read_attribute+0xd0>
     e30:	mov	x0, #0x1                   	// #1
     e34:	mov	w1, #0x2                   	// #2
     e38:	mov	w19, w0
     e3c:	str	w1, [x21]
     e40:	str	x0, [x21, #8]
     e44:	b	b78 <read_attribute+0xd0>
     e48:	mov	w0, #0xb                   	// #11
     e4c:	b	cc8 <read_attribute+0x220>
     e50:	mov	w0, #0x8                   	// #8
     e54:	str	w0, [x21]
     e58:	mov	x0, x28
     e5c:	cbz	w22, fbc <read_attribute+0x514>
     e60:	bl	7d8 <read_uint64>
     e64:	mov	w19, #0x1                   	// #1
     e68:	str	x0, [x21, #8]
     e6c:	b	b78 <read_attribute+0xd0>
     e70:	mov	x0, x28
     e74:	bl	368 <read_uleb128>
     e78:	mov	w19, w0
     e7c:	b	af0 <read_attribute+0x48>
     e80:	mov	w0, #0x5                   	// #5
     e84:	b	bac <read_attribute+0x104>
     e88:	mov	w0, #0x6                   	// #6
     e8c:	str	w0, [x21]
     e90:	cmp	w26, #0x2
     e94:	b.ne	e58 <read_attribute+0x3b0>  // b.any
     e98:	mov	w1, w25
     e9c:	mov	x0, x28
     ea0:	mov	w19, #0x1                   	// #1
     ea4:	bl	8b0 <read_address>
     ea8:	str	x0, [x21, #8]
     eac:	b	b78 <read_attribute+0xd0>
     eb0:	mov	w0, #0x2                   	// #2
     eb4:	b	bac <read_attribute+0x104>
     eb8:	mov	w0, #0x5                   	// #5
     ebc:	b	c6c <read_attribute+0x1c4>
     ec0:	mov	w0, #0x5                   	// #5
     ec4:	b	d30 <read_attribute+0x288>
     ec8:	mov	w0, #0x5                   	// #5
     ecc:	b	d50 <read_attribute+0x2a8>
     ed0:	mov	x0, x28
     ed4:	cbz	w22, 1020 <read_attribute+0x578>
     ed8:	bl	7d8 <read_uint64>
     edc:	cmp	x0, x27
     ee0:	b.cs	1100 <read_attribute+0x658>  // b.hs, b.nlast
     ee4:	add	x24, x24, x0
     ee8:	mov	w19, #0x1                   	// #1
     eec:	mov	w0, #0x4                   	// #4
     ef0:	str	w0, [x21]
     ef4:	str	x24, [x21, #8]
     ef8:	b	b78 <read_attribute+0xd0>
     efc:	ldp	x4, x1, [x28]
     f00:	add	x20, sp, #0x68
     f04:	ldr	x5, [x28, #16]
     f08:	adrp	x3, 0 <abbrev_compare>
     f0c:	mov	x0, x20
     f10:	add	x3, x3, #0x0
     f14:	adrp	x2, 0 <abbrev_compare>
     f18:	sub	w5, w5, w1
     f1c:	add	x2, x2, #0x0
     f20:	mov	x1, #0xc8                  	// #200
     f24:	bl	0 <snprintf>
     f28:	ldp	x3, x0, [x28, #40]
     f2c:	mov	x1, x20
     f30:	mov	w2, #0x0                   	// #0
     f34:	blr	x3
     f38:	mov	w0, #0x1                   	// #1
     f3c:	str	w0, [x28, #56]
     f40:	b	b78 <read_attribute+0xd0>
     f44:	ldp	x4, x1, [x28]
     f48:	add	x19, sp, #0x68
     f4c:	mov	x0, x19
     f50:	adrp	x3, 0 <abbrev_compare>
     f54:	adrp	x2, 0 <abbrev_compare>
     f58:	add	x3, x3, #0x0
     f5c:	add	x2, x2, #0x0
     f60:	sub	w5, w5, w1
     f64:	mov	x1, #0xc8                  	// #200
     f68:	bl	0 <snprintf>
     f6c:	ldp	x3, x0, [x28, #40]
     f70:	mov	x1, x19
     f74:	mov	w2, #0x0                   	// #0
     f78:	mov	w19, #0x1                   	// #1
     f7c:	blr	x3
     f80:	mov	w0, #0x1                   	// #1
     f84:	str	w0, [x28, #56]
     f88:	b	c00 <read_attribute+0x158>
     f8c:	bl	700 <read_uint32>
     f90:	mov	w0, w0
     f94:	b	b50 <read_attribute+0xa8>
     f98:	mov	x0, x28
     f9c:	cbz	w22, 102c <read_attribute+0x584>
     fa0:	bl	7d8 <read_uint64>
     fa4:	str	x0, [x21, #8]
     fa8:	cbz	x23, 1038 <read_attribute+0x590>
     fac:	mov	w0, #0x7                   	// #7
     fb0:	mov	w19, #0x1                   	// #1
     fb4:	str	w0, [x21]
     fb8:	b	b78 <read_attribute+0xd0>
     fbc:	bl	700 <read_uint32>
     fc0:	mov	w0, w0
     fc4:	b	e64 <read_attribute+0x3bc>
     fc8:	sub	x0, x0, #0x1
     fcc:	add	x5, x6, #0x1
     fd0:	stp	x5, x0, [x28, #16]
     fd4:	ldrb	w6, [x6]
     fd8:	cmp	x6, x0
     fdc:	b.ls	1164 <read_attribute+0x6bc>  // b.plast
     fe0:	ldr	w19, [x28, #56]
     fe4:	cbnz	w19, ce8 <read_attribute+0x240>
     fe8:	ldp	x4, x1, [x28]
     fec:	add	x20, sp, #0x68
     ff0:	adrp	x3, 0 <abbrev_compare>
     ff4:	mov	x0, x20
     ff8:	add	x3, x3, #0x0
     ffc:	adrp	x2, 0 <abbrev_compare>
    1000:	sub	w5, w5, w1
    1004:	b	f1c <read_attribute+0x474>
    1008:	ldr	x2, [x28, #16]
    100c:	sub	x1, x1, x0
    1010:	mov	w19, #0x1                   	// #1
    1014:	add	x0, x2, x0
    1018:	stp	x0, x1, [x28, #16]
    101c:	b	b78 <read_attribute+0xd0>
    1020:	bl	700 <read_uint32>
    1024:	mov	w0, w0
    1028:	b	edc <read_attribute+0x434>
    102c:	bl	700 <read_uint32>
    1030:	mov	w0, w0
    1034:	b	fa4 <read_attribute+0x4fc>
    1038:	mov	w19, #0x1                   	// #1
    103c:	str	wzr, [x21]
    1040:	b	b78 <read_attribute+0xd0>
    1044:	ldr	x2, [x28, #16]
    1048:	sub	x1, x1, x0
    104c:	cmp	x20, #0x0
    1050:	add	x0, x2, x0
    1054:	stp	x0, x1, [x28, #16]
    1058:	cset	w19, ne  // ne = any
    105c:	str	x20, [x21, #8]
    1060:	b	c04 <read_attribute+0x15c>
    1064:	ldp	x4, x1, [x28]
    1068:	add	x20, sp, #0x68
    106c:	ldr	x5, [x28, #16]
    1070:	mov	x0, x20
    1074:	adrp	x3, 0 <abbrev_compare>
    1078:	adrp	x2, 0 <abbrev_compare>
    107c:	add	x3, x3, #0x0
    1080:	add	x2, x2, #0x0
    1084:	sub	w5, w5, w1
    1088:	mov	x1, #0xc8                  	// #200
    108c:	bl	0 <snprintf>
    1090:	ldp	x3, x0, [x28, #40]
    1094:	mov	x1, x20
    1098:	mov	w2, #0x0                   	// #0
    109c:	mov	x20, #0x0                   	// #0
    10a0:	blr	x3
    10a4:	mov	w0, #0x1                   	// #1
    10a8:	str	w0, [x28, #56]
    10ac:	str	x20, [x21, #8]
    10b0:	b	c04 <read_attribute+0x15c>
    10b4:	ldp	x4, x5, [x28]
    10b8:	add	x19, sp, #0x68
    10bc:	mov	x1, #0xc8                  	// #200
    10c0:	mov	x0, x19
    10c4:	adrp	x3, 0 <abbrev_compare>
    10c8:	adrp	x2, 0 <abbrev_compare>
    10cc:	add	x3, x3, #0x0
    10d0:	add	x2, x2, #0x0
    10d4:	sub	w5, w6, w5
    10d8:	bl	0 <snprintf>
    10dc:	ldp	x3, x0, [x28, #40]
    10e0:	mov	x1, x19
    10e4:	mov	w2, #0x0                   	// #0
    10e8:	blr	x3
    10ec:	mov	w0, #0x1                   	// #1
    10f0:	str	w0, [x28, #56]
    10f4:	ldr	x6, [x28, #16]
    10f8:	ldr	x0, [x28, #24]
    10fc:	b	cb8 <read_attribute+0x210>
    1100:	ldp	x4, x1, [x28]
    1104:	add	x19, sp, #0x68
    1108:	ldr	x5, [x28, #16]
    110c:	adrp	x3, 0 <abbrev_compare>
    1110:	mov	x0, x19
    1114:	add	x3, x3, #0x0
    1118:	adrp	x2, 0 <abbrev_compare>
    111c:	sub	w5, w5, w1
    1120:	add	x2, x2, #0x0
    1124:	mov	x1, #0xc8                  	// #200
    1128:	bl	0 <snprintf>
    112c:	ldp	x3, x0, [x28, #40]
    1130:	mov	x1, x19
    1134:	mov	w2, #0x0                   	// #0
    1138:	mov	w19, #0x0                   	// #0
    113c:	blr	x3
    1140:	b	b78 <read_attribute+0xd0>
    1144:	add	x19, sp, #0x68
    1148:	adrp	x3, 0 <abbrev_compare>
    114c:	mov	x0, x19
    1150:	add	x3, x3, #0x0
    1154:	adrp	x2, 0 <abbrev_compare>
    1158:	ldp	x4, x1, [x28]
    115c:	ldr	x5, [x28, #16]
    1160:	b	111c <read_attribute+0x674>
    1164:	sub	x0, x0, x6
    1168:	add	x6, x5, x6
    116c:	b	cb8 <read_attribute+0x210>

0000000000001170 <read_referenced_name>:
    1170:	sub	sp, sp, #0x190
    1174:	stp	x29, x30, [sp, #16]
    1178:	add	x29, sp, #0x10
    117c:	stp	x27, x28, [sp, #96]
    1180:	mov	x27, x0
    1184:	ldr	x0, [x1, #16]
    1188:	stp	x21, x22, [sp, #48]
    118c:	stp	x25, x26, [sp, #80]
    1190:	cmp	x0, x2
    1194:	mov	x25, x4
    1198:	str	x3, [sp, #112]
    119c:	b.hi	1340 <read_referenced_name+0x1d0>  // b.pmore
    11a0:	stp	x19, x20, [sp, #32]
    11a4:	mov	x19, x1
    11a8:	sub	x4, x2, x0
    11ac:	ldr	x1, [x1, #8]
    11b0:	cmp	x4, x1
    11b4:	b.cs	133c <read_referenced_name+0x1cc>  // b.hs, b.nlast
    11b8:	ldr	x3, [x19]
    11bc:	add	x0, x0, x1
    11c0:	sub	x1, x0, x2
    11c4:	ldr	w5, [x27, #120]
    11c8:	add	x2, x3, x4
    11cc:	stp	x2, x1, [sp, #152]
    11d0:	adrp	x3, 0 <abbrev_compare>
    11d4:	ldr	x6, [x27, #56]
    11d8:	add	x3, x3, #0x0
    11dc:	ldr	x1, [sp, #112]
    11e0:	add	x21, sp, #0x88
    11e4:	mov	x0, x21
    11e8:	stp	x3, x6, [sp, #136]
    11ec:	str	w5, [sp, #168]
    11f0:	str	x1, [sp, #176]
    11f4:	str	x25, [sp, #184]
    11f8:	str	wzr, [sp, #192]
    11fc:	bl	368 <read_uleb128>
    1200:	mov	x2, x0
    1204:	cbz	x0, 138c <read_referenced_name+0x21c>
    1208:	ldr	x3, [sp, #112]
    120c:	mov	x4, x25
    1210:	add	x1, x19, #0x60
    1214:	add	x0, x19, #0x58
    1218:	bl	220 <lookup_abbrev.isra.0>
    121c:	mov	x26, x0
    1220:	cbz	x0, 13fc <read_referenced_name+0x28c>
    1224:	ldr	x0, [x0, #16]
    1228:	cbz	x0, 13fc <read_referenced_name+0x28c>
    122c:	add	x20, sp, #0xc8
    1230:	mov	x28, #0x0                   	// #0
    1234:	add	x0, x20, #0x8
    1238:	mov	x22, #0x0                   	// #0
    123c:	stp	x23, x24, [sp, #64]
    1240:	mov	w23, #0x2007                	// #8199
    1244:	str	x0, [sp, #120]
    1248:	b	1268 <read_referenced_name+0xf8>
    124c:	cmp	w2, #0x3
    1250:	b.ne	1258 <read_referenced_name+0xe8>  // b.any
    1254:	cbz	x22, 1378 <read_referenced_name+0x208>
    1258:	ldr	x0, [x26, #16]
    125c:	add	x28, x28, #0x1
    1260:	cmp	x0, x28
    1264:	b.ls	1318 <read_referenced_name+0x1a8>  // b.plast
    1268:	ldr	x8, [x26, #24]
    126c:	lsl	x24, x28, #3
    1270:	ldp	x5, x6, [x27, #104]
    1274:	add	x8, x8, x24
    1278:	ldp	w3, w2, [x19, #40]
    127c:	mov	x1, x21
    1280:	ldr	w4, [x19, #48]
    1284:	ldr	w0, [x8, #4]
    1288:	ldr	x7, [x27, #8]
    128c:	str	x20, [sp]
    1290:	bl	aa8 <read_attribute>
    1294:	cbz	w0, 13ec <read_referenced_name+0x27c>
    1298:	ldr	x0, [x26, #24]
    129c:	add	x1, x0, x24
    12a0:	ldr	w2, [x0, x24]
    12a4:	cmp	w2, #0x47
    12a8:	b.eq	12dc <read_referenced_name+0x16c>  // b.none
    12ac:	b.ls	124c <read_referenced_name+0xdc>  // b.plast
    12b0:	cmp	w2, #0x6e
    12b4:	b.eq	12c0 <read_referenced_name+0x150>  // b.none
    12b8:	cmp	w2, w23
    12bc:	b.ne	1258 <read_referenced_name+0xe8>  // b.any
    12c0:	ldr	w0, [sp, #200]
    12c4:	cmp	w0, #0x4
    12c8:	b.ne	1258 <read_referenced_name+0xe8>  // b.any
    12cc:	ldp	x19, x20, [sp, #32]
    12d0:	ldp	x23, x24, [sp, #64]
    12d4:	ldr	x22, [sp, #208]
    12d8:	b	135c <read_referenced_name+0x1ec>
    12dc:	ldr	w0, [x1, #4]
    12e0:	cmp	w0, #0x20
    12e4:	b.eq	1258 <read_referenced_name+0xe8>  // b.none
    12e8:	ldp	x4, x3, [sp, #112]
    12ec:	mov	x5, x25
    12f0:	mov	x2, x20
    12f4:	mov	x1, x19
    12f8:	mov	x0, x27
    12fc:	add	x28, x28, #0x1
    1300:	bl	1408 <read_referenced_name_from_attr.isra.0.part.0>
    1304:	cmp	x0, #0x0
    1308:	csel	x22, x22, x0, eq  // eq = none
    130c:	ldr	x0, [x26, #16]
    1310:	cmp	x0, x28
    1314:	b.hi	1268 <read_referenced_name+0xf8>  // b.pmore
    1318:	ldp	x19, x20, [sp, #32]
    131c:	ldp	x23, x24, [sp, #64]
    1320:	mov	x0, x22
    1324:	ldp	x29, x30, [sp, #16]
    1328:	ldp	x21, x22, [sp, #48]
    132c:	ldp	x25, x26, [sp, #80]
    1330:	ldp	x27, x28, [sp, #96]
    1334:	add	sp, sp, #0x190
    1338:	ret
    133c:	ldp	x19, x20, [sp, #32]
    1340:	adrp	x1, 0 <abbrev_compare>
    1344:	ldr	x3, [sp, #112]
    1348:	mov	x0, x25
    134c:	add	x1, x1, #0x0
    1350:	mov	w2, #0x0                   	// #0
    1354:	mov	x22, #0x0                   	// #0
    1358:	blr	x3
    135c:	mov	x0, x22
    1360:	ldp	x29, x30, [sp, #16]
    1364:	ldp	x21, x22, [sp, #48]
    1368:	ldp	x25, x26, [sp, #80]
    136c:	ldp	x27, x28, [sp, #96]
    1370:	add	sp, sp, #0x190
    1374:	ret
    1378:	ldr	w0, [sp, #200]
    137c:	ldr	x22, [sp, #208]
    1380:	cmp	w0, #0x4
    1384:	csel	x22, x22, xzr, eq  // eq = none
    1388:	b	1258 <read_referenced_name+0xe8>
    138c:	ldp	x4, x1, [sp, #136]
    1390:	add	x19, sp, #0xc8
    1394:	ldr	x5, [sp, #152]
    1398:	mov	x0, x19
    139c:	adrp	x3, 0 <abbrev_compare>
    13a0:	adrp	x2, 0 <abbrev_compare>
    13a4:	add	x3, x3, #0x0
    13a8:	add	x2, x2, #0x0
    13ac:	sub	w5, w5, w1
    13b0:	mov	x1, #0xc8                  	// #200
    13b4:	bl	0 <snprintf>
    13b8:	mov	x22, #0x0                   	// #0
    13bc:	ldp	x3, x0, [sp, #176]
    13c0:	mov	x1, x19
    13c4:	mov	w2, #0x0                   	// #0
    13c8:	blr	x3
    13cc:	mov	x0, x22
    13d0:	ldp	x29, x30, [sp, #16]
    13d4:	ldp	x19, x20, [sp, #32]
    13d8:	ldp	x21, x22, [sp, #48]
    13dc:	ldp	x25, x26, [sp, #80]
    13e0:	ldp	x27, x28, [sp, #96]
    13e4:	add	sp, sp, #0x190
    13e8:	ret
    13ec:	mov	x22, #0x0                   	// #0
    13f0:	ldp	x19, x20, [sp, #32]
    13f4:	ldp	x23, x24, [sp, #64]
    13f8:	b	1320 <read_referenced_name+0x1b0>
    13fc:	mov	x22, #0x0                   	// #0
    1400:	ldp	x19, x20, [sp, #32]
    1404:	b	135c <read_referenced_name+0x1ec>

0000000000001408 <read_referenced_name_from_attr.isra.0.part.0>:
    1408:	ldr	w2, [x2]
    140c:	mov	x6, x3
    1410:	mov	x7, x0
    1414:	mov	x3, x4
    1418:	cmp	w2, #0x6
    141c:	mov	x4, x5
    1420:	b.eq	1488 <read_referenced_name_from_attr.isra.0.part.0+0x80>  // b.none
    1424:	cmp	w2, #0x2
    1428:	ccmp	w2, #0x5, #0x4, ne  // ne = any
    142c:	b.eq	14e0 <read_referenced_name_from_attr.isra.0.part.0+0xd8>  // b.none
    1430:	cmp	w2, #0x7
    1434:	b.ne	1480 <read_referenced_name_from_attr.isra.0.part.0+0x78>  // b.any
    1438:	ldr	x0, [x0, #8]
    143c:	mov	x5, #0x0                   	// #0
    1440:	ldr	x2, [x6]
    1444:	ldp	x9, x7, [x0, #40]
    1448:	add	x6, x7, x5
    144c:	cmp	x7, x5
    1450:	b.ls	1480 <read_referenced_name_from_attr.isra.0.part.0+0x78>  // b.plast
    1454:	lsr	x6, x6, #1
    1458:	ldr	x1, [x9, x6, lsl #3]
    145c:	ldr	x8, [x1, #24]
    1460:	cmp	x2, x8
    1464:	b.cc	14d8 <read_referenced_name_from_attr.isra.0.part.0+0xd0>  // b.lo, b.ul, b.last
    1468:	ldr	x10, [x1, #32]
    146c:	add	x5, x6, #0x1
    1470:	cmp	x2, x10
    1474:	b.cs	1448 <read_referenced_name_from_attr.isra.0.part.0+0x40>  // b.hs, b.nlast
    1478:	sub	x2, x2, x8
    147c:	b	1170 <read_referenced_name>
    1480:	mov	x0, #0x0                   	// #0
    1484:	ret
    1488:	ldp	x9, x5, [x7, #40]
    148c:	mov	x0, #0x0                   	// #0
    1490:	ldr	x2, [x6]
    1494:	add	x6, x5, x0
    1498:	cmp	x5, x0
    149c:	b.ls	1480 <read_referenced_name_from_attr.isra.0.part.0+0x78>  // b.plast
    14a0:	lsr	x6, x6, #1
    14a4:	ldr	x1, [x9, x6, lsl #3]
    14a8:	ldr	x8, [x1, #24]
    14ac:	cmp	x2, x8
    14b0:	b.cc	14d0 <read_referenced_name_from_attr.isra.0.part.0+0xc8>  // b.lo, b.ul, b.last
    14b4:	ldr	x10, [x1, #32]
    14b8:	add	x0, x6, #0x1
    14bc:	cmp	x2, x10
    14c0:	b.cs	1494 <read_referenced_name_from_attr.isra.0.part.0+0x8c>  // b.hs, b.nlast
    14c4:	sub	x2, x2, x8
    14c8:	mov	x0, x7
    14cc:	b	1170 <read_referenced_name>
    14d0:	mov	x5, x6
    14d4:	b	1494 <read_referenced_name_from_attr.isra.0.part.0+0x8c>
    14d8:	mov	x7, x6
    14dc:	b	1448 <read_referenced_name_from_attr.isra.0.part.0+0x40>
    14e0:	ldr	x2, [x6]
    14e4:	b	1170 <read_referenced_name>

00000000000014e8 <find_address_ranges>:
    14e8:	sub	sp, sp, #0x130
    14ec:	stp	x29, x30, [sp, #48]
    14f0:	add	x29, sp, #0x30
    14f4:	stp	x23, x24, [sp, #96]
    14f8:	ldr	x24, [sp, #328]
    14fc:	stp	x27, x28, [sp, #128]
    1500:	add	x27, sp, #0xf0
    1504:	ldr	x28, [sp, #304]
    1508:	stp	x19, x20, [sp, #64]
    150c:	mov	x19, x2
    1510:	mov	x20, x3
    1514:	stp	x21, x22, [sp, #80]
    1518:	mov	x22, x4
    151c:	stp	x25, x26, [sp, #112]
    1520:	mov	x26, x24
    1524:	stp	x1, x6, [sp, #200]
    1528:	stp	x0, x5, [sp, #216]
    152c:	str	w7, [sp, #236]
    1530:	mov	x25, x26
    1534:	add	x0, x26, #0x60
    1538:	str	x0, [sp, #184]
    153c:	ldr	x0, [x19, #24]
    1540:	cbz	x0, 1884 <find_address_ranges+0x39c>
    1544:	mov	x0, x19
    1548:	bl	368 <read_uleb128>
    154c:	mov	x2, x0
    1550:	cbz	x0, 1884 <find_address_ranges+0x39c>
    1554:	ldp	x3, x4, [sp, #312]
    1558:	add	x0, x25, #0x58
    155c:	ldr	x1, [sp, #184]
    1560:	bl	220 <lookup_abbrev.isra.0>
    1564:	mov	x23, x0
    1568:	cbz	x0, 1780 <find_address_ranges+0x298>
    156c:	ldr	x0, [sp, #344]
    1570:	cbz	x0, 1580 <find_address_ranges+0x98>
    1574:	mov	x1, x0
    1578:	ldr	w0, [x23, #8]
    157c:	str	w0, [x1]
    1580:	ldr	x0, [x23, #16]
    1584:	cbz	x0, 1730 <find_address_ranges+0x248>
    1588:	mov	x26, #0x0                   	// #0
    158c:	mov	x21, #0x0                   	// #0
    1590:	str	wzr, [sp, #152]
    1594:	str	wzr, [sp, #160]
    1598:	stp	xzr, xzr, [sp, #168]
    159c:	str	wzr, [sp, #192]
    15a0:	str	wzr, [sp, #232]
    15a4:	ldr	x2, [x23, #24]
    15a8:	b	15e0 <find_address_ranges+0xf8>
    15ac:	cmp	w0, #0x10
    15b0:	b.eq	17d0 <find_address_ranges+0x2e8>  // b.none
    15b4:	cmp	w0, #0x11
    15b8:	b.ne	17a4 <find_address_ranges+0x2bc>  // b.any
    15bc:	ldr	w0, [sp, #240]
    15c0:	cmp	w0, #0x1
    15c4:	b.ne	15d0 <find_address_ranges+0xe8>  // b.any
    15c8:	ldr	x21, [sp, #248]
    15cc:	str	w0, [sp, #192]
    15d0:	ldr	x0, [x23, #16]
    15d4:	add	x26, x26, #0x1
    15d8:	cmp	x0, x26
    15dc:	b.ls	1668 <find_address_ranges+0x180>  // b.plast
    15e0:	lsl	x24, x26, #3
    15e4:	ldr	w4, [x25, #48]
    15e8:	add	x0, x2, x24
    15ec:	mov	x7, x28
    15f0:	ldp	w3, w2, [x25, #40]
    15f4:	mov	x6, x22
    15f8:	ldr	w0, [x0, #4]
    15fc:	mov	x5, x20
    1600:	str	x27, [sp]
    1604:	mov	x1, x19
    1608:	bl	aa8 <read_attribute>
    160c:	cbz	w0, 1784 <find_address_ranges+0x29c>
    1610:	ldr	x2, [x23, #24]
    1614:	ldr	w0, [x2, x24]
    1618:	cmp	w0, #0x12
    161c:	b.eq	181c <find_address_ranges+0x334>  // b.none
    1620:	b.ls	15ac <find_address_ranges+0xc4>  // b.plast
    1624:	cmp	w0, #0x1b
    1628:	b.eq	17f8 <find_address_ranges+0x310>  // b.none
    162c:	cmp	w0, #0x55
    1630:	b.ne	15d0 <find_address_ranges+0xe8>  // b.any
    1634:	ldr	w0, [sp, #240]
    1638:	cmp	w0, #0x2
    163c:	ccmp	w0, #0x8, #0x4, ne  // ne = any
    1640:	b.ne	15d0 <find_address_ranges+0xe8>  // b.any
    1644:	mov	w0, #0x1                   	// #1
    1648:	str	w0, [sp, #152]
    164c:	ldr	x0, [sp, #248]
    1650:	str	x0, [sp, #176]
    1654:	ldr	x0, [x23, #16]
    1658:	add	x26, x26, #0x1
    165c:	cmp	x0, x26
    1660:	b.hi	15e0 <find_address_ranges+0xf8>  // b.pmore
    1664:	nop
    1668:	ldr	w1, [x23, #8]
    166c:	cmp	w1, #0x2e
    1670:	ccmp	w1, #0x11, #0x4, ne  // ne = any
    1674:	b.ne	1730 <find_address_ranges+0x248>  // b.any
    1678:	ldr	w0, [sp, #152]
    167c:	cbnz	w0, 188c <find_address_ranges+0x3a4>
    1680:	ldr	w2, [sp, #160]
    1684:	ldr	w0, [sp, #192]
    1688:	tst	w0, w2
    168c:	b.eq	1730 <find_address_ranges+0x248>  // b.none
    1690:	ldr	x0, [sp, #336]
    1694:	ldr	x3, [sp, #168]
    1698:	ldr	w2, [sp, #232]
    169c:	ldr	x0, [x0, #24]
    16a0:	cmp	w2, #0x0
    16a4:	ldr	x4, [sp, #200]
    16a8:	add	x2, x3, x21
    16ac:	csel	x2, x2, x3, ne  // ne = any
    16b0:	add	x21, x21, x4
    16b4:	add	x24, x2, x4
    16b8:	cbz	x0, 16ec <find_address_ranges+0x204>
    16bc:	ldr	x2, [sp, #336]
    16c0:	add	x0, x0, x0, lsl #1
    16c4:	lsl	x0, x0, #3
    16c8:	ldr	x2, [x2]
    16cc:	sub	x0, x0, #0x18
    16d0:	add	x0, x2, x0
    16d4:	ldr	x2, [x0, #8]
    16d8:	cmp	x21, x2
    16dc:	b.eq	1848 <find_address_ranges+0x360>  // b.none
    16e0:	add	x3, x2, #0x1
    16e4:	cmp	x21, x3
    16e8:	b.eq	1848 <find_address_ranges+0x360>  // b.none
    16ec:	ldp	x2, x3, [sp, #312]
    16f0:	mov	x1, #0x18                  	// #24
    16f4:	ldr	x0, [sp, #216]
    16f8:	ldr	x4, [sp, #336]
    16fc:	bl	0 <__asan_backtrace_vector_grow>
    1700:	cbz	x0, 1780 <find_address_ranges+0x298>
    1704:	ldr	x1, [sp, #336]
    1708:	ldr	x2, [x1, #24]
    170c:	ldr	w1, [x23, #8]
    1710:	stp	x21, x24, [x0]
    1714:	add	x2, x2, #0x1
    1718:	str	x25, [x0, #16]
    171c:	ldr	x0, [sp, #336]
    1720:	str	x2, [x0, #24]
    1724:	cmp	w1, #0x11
    1728:	b.eq	1884 <find_address_ranges+0x39c>  // b.none
    172c:	nop
    1730:	ldr	w0, [x23, #12]
    1734:	cbz	w0, 153c <find_address_ranges+0x54>
    1738:	ldr	x0, [sp, #312]
    173c:	stp	x28, x0, [sp]
    1740:	ldr	w7, [sp, #236]
    1744:	ldp	x1, x6, [sp, #200]
    1748:	str	x25, [sp, #24]
    174c:	ldr	x0, [sp, #320]
    1750:	str	x0, [sp, #16]
    1754:	ldr	x0, [sp, #336]
    1758:	str	x0, [sp, #32]
    175c:	ldr	x0, [sp, #216]
    1760:	str	xzr, [sp, #40]
    1764:	ldr	x5, [sp, #224]
    1768:	mov	x26, x25
    176c:	mov	x4, x22
    1770:	mov	x3, x20
    1774:	mov	x2, x19
    1778:	bl	14e8 <find_address_ranges>
    177c:	cbnz	w0, 1530 <find_address_ranges+0x48>
    1780:	mov	w0, #0x0                   	// #0
    1784:	ldp	x29, x30, [sp, #48]
    1788:	ldp	x19, x20, [sp, #64]
    178c:	ldp	x21, x22, [sp, #80]
    1790:	ldp	x23, x24, [sp, #96]
    1794:	ldp	x25, x26, [sp, #112]
    1798:	ldp	x27, x28, [sp, #128]
    179c:	add	sp, sp, #0x130
    17a0:	ret
    17a4:	cmp	w0, #0x3
    17a8:	b.ne	15d0 <find_address_ranges+0xe8>  // b.any
    17ac:	ldr	w0, [x23, #8]
    17b0:	cmp	w0, #0x11
    17b4:	b.ne	15d0 <find_address_ranges+0xe8>  // b.any
    17b8:	ldr	w0, [sp, #240]
    17bc:	cmp	w0, #0x4
    17c0:	b.ne	15d0 <find_address_ranges+0xe8>  // b.any
    17c4:	ldr	x0, [sp, #248]
    17c8:	str	x0, [x25, #64]
    17cc:	b	15d0 <find_address_ranges+0xe8>
    17d0:	ldr	w0, [x23, #8]
    17d4:	cmp	w0, #0x11
    17d8:	b.ne	15d0 <find_address_ranges+0xe8>  // b.any
    17dc:	ldr	w0, [sp, #240]
    17e0:	cmp	w0, #0x2
    17e4:	ccmp	w0, #0x8, #0x4, ne  // ne = any
    17e8:	b.ne	15d0 <find_address_ranges+0xe8>  // b.any
    17ec:	ldr	x0, [sp, #248]
    17f0:	str	x0, [x25, #56]
    17f4:	b	15d0 <find_address_ranges+0xe8>
    17f8:	ldr	w0, [x23, #8]
    17fc:	cmp	w0, #0x11
    1800:	b.ne	15d0 <find_address_ranges+0xe8>  // b.any
    1804:	ldr	w0, [sp, #240]
    1808:	cmp	w0, #0x4
    180c:	b.ne	15d0 <find_address_ranges+0xe8>  // b.any
    1810:	ldr	x0, [sp, #248]
    1814:	str	x0, [x25, #72]
    1818:	b	15d0 <find_address_ranges+0xe8>
    181c:	ldr	w0, [sp, #240]
    1820:	cmp	w0, #0x1
    1824:	b.eq	1838 <find_address_ranges+0x350>  // b.none
    1828:	cmp	w0, #0x2
    182c:	b.ne	15d0 <find_address_ranges+0xe8>  // b.any
    1830:	mov	w0, #0x1                   	// #1
    1834:	str	w0, [sp, #232]
    1838:	str	w0, [sp, #160]
    183c:	ldr	x0, [sp, #248]
    1840:	str	x0, [sp, #168]
    1844:	b	15d0 <find_address_ranges+0xe8>
    1848:	ldr	x3, [x0, #16]
    184c:	cmp	x25, x3
    1850:	b.ne	16ec <find_address_ranges+0x204>  // b.any
    1854:	cmp	x24, x2
    1858:	b.ls	1724 <find_address_ranges+0x23c>  // b.plast
    185c:	str	x24, [x0, #8]
    1860:	b	1724 <find_address_ranges+0x23c>
    1864:	ldr	w0, [sp, #296]
    1868:	ldp	x23, x19, [sp, #152]
    186c:	ldp	x20, x22, [sp, #168]
    1870:	ldr	x28, [sp, #192]
    1874:	cbnz	w0, 1780 <find_address_ranges+0x298>
    1878:	ldr	w0, [x23, #8]
    187c:	cmp	w0, #0x11
    1880:	b.ne	1730 <find_address_ranges+0x248>  // b.any
    1884:	mov	w0, #0x1                   	// #1
    1888:	b	1784 <find_address_ranges+0x29c>
    188c:	ldr	x0, [sp, #176]
    1890:	ldr	x1, [sp, #208]
    1894:	cmp	x0, x1
    1898:	b.cs	1a30 <find_address_ranges+0x548>  // b.hs, b.nlast
    189c:	mov	x2, x0
    18a0:	adrp	x0, 0 <abbrev_compare>
    18a4:	sub	x24, x1, x2
    18a8:	add	x0, x0, #0x0
    18ac:	ldr	x1, [sp, #224]
    18b0:	stp	x0, x1, [sp, #240]
    18b4:	add	x0, x1, x2
    18b8:	str	x0, [sp, #256]
    18bc:	ldr	w0, [sp, #236]
    18c0:	str	w0, [sp, #272]
    18c4:	ldr	x0, [sp, #312]
    18c8:	str	x0, [sp, #280]
    18cc:	ldr	x0, [sp, #320]
    18d0:	stp	x23, x19, [sp, #152]
    18d4:	stp	x20, x22, [sp, #168]
    18d8:	mov	x26, x0
    18dc:	str	x24, [sp, #264]
    18e0:	ldr	x19, [sp, #200]
    18e4:	str	x28, [sp, #192]
    18e8:	ldr	x23, [sp, #216]
    18ec:	str	x0, [sp, #288]
    18f0:	ldr	x24, [sp, #312]
    18f4:	str	wzr, [sp, #296]
    18f8:	ldr	x20, [sp, #336]
    18fc:	nop
    1900:	mov	x0, x27
    1904:	ldr	w1, [x25, #48]
    1908:	bl	8b0 <read_address>
    190c:	mov	x22, x0
    1910:	ldr	w1, [x25, #48]
    1914:	mov	x0, x27
    1918:	bl	8b0 <read_address>
    191c:	orr	x1, x22, x0
    1920:	cbz	x1, 1864 <find_address_ranges+0x37c>
    1924:	ldr	w1, [x25, #48]
    1928:	cmp	w1, #0x4
    192c:	b.eq	1a20 <find_address_ranges+0x538>  // b.none
    1930:	b.gt	1968 <find_address_ranges+0x480>
    1934:	cmp	w1, #0x1
    1938:	b.eq	1a14 <find_address_ranges+0x52c>  // b.none
    193c:	cmp	w1, #0x2
    1940:	b.ne	1980 <find_address_ranges+0x498>  // b.any
    1944:	mov	x1, #0xffff                	// #65535
    1948:	cmp	x22, x1
    194c:	cset	w1, eq  // eq = none
    1950:	cbz	w1, 1980 <find_address_ranges+0x498>
    1954:	mov	x21, x0
    1958:	ldr	w0, [sp, #296]
    195c:	cbz	w0, 1900 <find_address_ranges+0x418>
    1960:	mov	w0, #0x0                   	// #0
    1964:	b	1784 <find_address_ranges+0x29c>
    1968:	cmp	w1, #0x8
    196c:	b.ne	1980 <find_address_ranges+0x498>  // b.any
    1970:	cmn	x22, #0x1
    1974:	cset	w1, eq  // eq = none
    1978:	cbnz	w1, 1954 <find_address_ranges+0x46c>
    197c:	nop
    1980:	ldr	x1, [x20, #24]
    1984:	add	x2, x22, x21
    1988:	add	x0, x0, x21
    198c:	add	x28, x2, x19
    1990:	add	x22, x0, x19
    1994:	cbz	x1, 19c4 <find_address_ranges+0x4dc>
    1998:	add	x0, x1, x1, lsl #1
    199c:	ldr	x1, [x20]
    19a0:	lsl	x0, x0, #3
    19a4:	sub	x0, x0, #0x18
    19a8:	add	x0, x1, x0
    19ac:	ldr	x1, [x0, #8]
    19b0:	cmp	x28, x1
    19b4:	b.eq	19f8 <find_address_ranges+0x510>  // b.none
    19b8:	add	x2, x1, #0x1
    19bc:	cmp	x28, x2
    19c0:	b.eq	19f8 <find_address_ranges+0x510>  // b.none
    19c4:	mov	x4, x20
    19c8:	mov	x3, x26
    19cc:	mov	x2, x24
    19d0:	mov	x0, x23
    19d4:	mov	x1, #0x18                  	// #24
    19d8:	bl	0 <__asan_backtrace_vector_grow>
    19dc:	cbz	x0, 1780 <find_address_ranges+0x298>
    19e0:	ldr	x1, [x20, #24]
    19e4:	stp	x28, x22, [x0]
    19e8:	str	x25, [x0, #16]
    19ec:	add	x0, x1, #0x1
    19f0:	str	x0, [x20, #24]
    19f4:	b	1958 <find_address_ranges+0x470>
    19f8:	ldr	x2, [x0, #16]
    19fc:	cmp	x25, x2
    1a00:	b.ne	19c4 <find_address_ranges+0x4dc>  // b.any
    1a04:	cmp	x22, x1
    1a08:	b.ls	1958 <find_address_ranges+0x470>  // b.plast
    1a0c:	str	x22, [x0, #8]
    1a10:	b	1958 <find_address_ranges+0x470>
    1a14:	cmp	x22, #0xff
    1a18:	cset	w1, eq  // eq = none
    1a1c:	b	1950 <find_address_ranges+0x468>
    1a20:	mov	x1, #0xffffffff            	// #4294967295
    1a24:	cmp	x22, x1
    1a28:	cset	w1, eq  // eq = none
    1a2c:	b	1950 <find_address_ranges+0x468>
    1a30:	ldp	x3, x0, [sp, #312]
    1a34:	adrp	x1, 0 <abbrev_compare>
    1a38:	mov	w2, #0x0                   	// #0
    1a3c:	add	x1, x1, #0x0
    1a40:	blr	x3
    1a44:	mov	w0, #0x0                   	// #0
    1a48:	b	1784 <find_address_ranges+0x29c>
    1a4c:	nop

0000000000001a50 <read_function_entry>:
    1a50:	sub	sp, sp, #0x1d0
    1a54:	stp	x29, x30, [sp, #16]
    1a58:	add	x29, sp, #0x10
    1a5c:	stp	x23, x24, [sp, #64]
    1a60:	mov	x24, x4
    1a64:	ldr	x4, [x4, #24]
    1a68:	str	x6, [sp, #128]
    1a6c:	str	x0, [sp, #152]
    1a70:	str	x3, [sp, #184]
    1a74:	str	x5, [sp, #216]
    1a78:	cbz	x4, 1d38 <read_function_entry+0x2e8>
    1a7c:	mov	x23, x1
    1a80:	stp	x21, x22, [sp, #48]
    1a84:	mov	x22, x2
    1a88:	stp	x25, x26, [sp, #80]
    1a8c:	add	x26, sp, #0xf8
    1a90:	add	x1, x26, #0x8
    1a94:	stp	x27, x28, [sp, #96]
    1a98:	mov	x28, x7
    1a9c:	mov	x27, x23
    1aa0:	adrp	x0, 0 <abbrev_compare>
    1aa4:	add	x0, x0, #0x0
    1aa8:	stp	x19, x20, [sp, #32]
    1aac:	stp	x1, x0, [sp, #224]
    1ab0:	mov	x0, x24
    1ab4:	bl	368 <read_uleb128>
    1ab8:	mov	x2, x0
    1abc:	cbz	x0, 1d28 <read_function_entry+0x2d8>
    1ac0:	ldr	x3, [sp, #128]
    1ac4:	mov	x4, x28
    1ac8:	add	x1, x22, #0x60
    1acc:	add	x0, x22, #0x58
    1ad0:	bl	220 <lookup_abbrev.isra.0>
    1ad4:	mov	x25, x0
    1ad8:	cbz	x0, 1dd0 <read_function_entry+0x380>
    1adc:	ldr	w0, [x0, #8]
    1ae0:	cmp	w0, #0x2e
    1ae4:	ccmp	w0, #0x3, #0x4, ne  // ne = any
    1ae8:	b.eq	1f04 <read_function_entry+0x4b4>  // b.none
    1aec:	cmp	w0, #0x1d
    1af0:	b.eq	1f80 <read_function_entry+0x530>  // b.none
    1af4:	ldr	x0, [sp, #464]
    1af8:	mov	w19, #0x0                   	// #0
    1afc:	str	xzr, [sp, #120]
    1b00:	str	x0, [sp, #208]
    1b04:	ldr	x0, [x25, #16]
    1b08:	str	x0, [sp, #136]
    1b0c:	cbz	x0, 2174 <read_function_entry+0x724>
    1b10:	mov	x21, x22
    1b14:	mov	x23, #0x0                   	// #0
    1b18:	mov	w20, #0x2007                	// #8199
    1b1c:	str	xzr, [sp, #136]
    1b20:	str	wzr, [sp, #144]
    1b24:	str	wzr, [sp, #160]
    1b28:	str	wzr, [sp, #172]
    1b2c:	str	xzr, [sp, #176]
    1b30:	str	xzr, [sp, #192]
    1b34:	stp	wzr, wzr, [sp, #200]
    1b38:	ldr	x0, [x25, #24]
    1b3c:	lsl	x22, x23, #3
    1b40:	ldp	x5, x6, [x27, #104]
    1b44:	add	x0, x0, x22
    1b48:	ldp	w3, w2, [x21, #40]
    1b4c:	mov	x1, x24
    1b50:	ldr	w4, [x21, #48]
    1b54:	ldr	w0, [x0, #4]
    1b58:	ldr	x7, [x27, #8]
    1b5c:	str	x26, [sp]
    1b60:	bl	aa8 <read_attribute>
    1b64:	cbz	w0, 1dd0 <read_function_entry+0x380>
    1b68:	ldr	w0, [x25, #8]
    1b6c:	cmp	w0, #0x11
    1b70:	b.eq	1d40 <read_function_entry+0x2f0>  // b.none
    1b74:	cbz	w19, 1bb8 <read_function_entry+0x168>
    1b78:	ldr	x0, [x25, #24]
    1b7c:	add	x1, x0, x22
    1b80:	ldr	w0, [x0, x22]
    1b84:	cmp	w0, #0x55
    1b88:	b.eq	1ea0 <read_function_entry+0x450>  // b.none
    1b8c:	b.hi	1e1c <read_function_entry+0x3cc>  // b.pmore
    1b90:	cmp	w0, #0x12
    1b94:	b.eq	1edc <read_function_entry+0x48c>  // b.none
    1b98:	b.ls	1df4 <read_function_entry+0x3a4>  // b.plast
    1b9c:	cmp	w0, #0x31
    1ba0:	b.eq	1bac <read_function_entry+0x15c>  // b.none
    1ba4:	cmp	w0, #0x47
    1ba8:	b.ne	1bb8 <read_function_entry+0x168>  // b.any
    1bac:	ldr	w0, [sp, #144]
    1bb0:	cbz	w0, 1f44 <read_function_entry+0x4f4>
    1bb4:	nop
    1bb8:	ldr	x0, [x25, #16]
    1bbc:	add	x23, x23, #0x1
    1bc0:	cmp	x0, x23
    1bc4:	b.hi	1b38 <read_function_entry+0xe8>  // b.pmore
    1bc8:	mov	x22, x21
    1bcc:	cbz	w19, 1d8c <read_function_entry+0x33c>
    1bd0:	ldr	x0, [sp, #120]
    1bd4:	ldr	x0, [x0]
    1bd8:	cbz	x0, 1d78 <read_function_entry+0x328>
    1bdc:	ldr	w0, [sp, #160]
    1be0:	cbnz	w0, 1fbc <read_function_entry+0x56c>
    1be4:	ldr	w1, [sp, #172]
    1be8:	ldr	w0, [sp, #200]
    1bec:	tst	w0, w1
    1bf0:	b.eq	1d78 <read_function_entry+0x328>  // b.none
    1bf4:	ldr	x4, [sp, #208]
    1bf8:	ldr	x2, [sp, #136]
    1bfc:	ldr	x3, [sp, #192]
    1c00:	ldr	w1, [sp, #204]
    1c04:	ldr	x0, [x4, #24]
    1c08:	cmp	w1, #0x0
    1c0c:	ldr	x19, [x27, #16]
    1c10:	add	x1, x2, x3
    1c14:	csel	x1, x1, x2, ne  // ne = any
    1c18:	add	x20, x1, x19
    1c1c:	add	x19, x19, x3
    1c20:	cbz	x0, 1c50 <read_function_entry+0x200>
    1c24:	add	x0, x0, x0, lsl #1
    1c28:	ldr	x1, [x4]
    1c2c:	lsl	x0, x0, #3
    1c30:	sub	x0, x0, #0x18
    1c34:	add	x0, x1, x0
    1c38:	ldr	x1, [x0, #8]
    1c3c:	cmp	x19, x1
    1c40:	b.eq	2154 <read_function_entry+0x704>  // b.none
    1c44:	add	x2, x1, #0x1
    1c48:	cmp	x19, x2
    1c4c:	b.eq	2154 <read_function_entry+0x704>  // b.none
    1c50:	ldr	x2, [sp, #128]
    1c54:	mov	x3, x28
    1c58:	ldr	x0, [sp, #152]
    1c5c:	mov	x1, #0x18                  	// #24
    1c60:	ldr	x21, [sp, #208]
    1c64:	mov	x4, x21
    1c68:	bl	0 <__asan_backtrace_vector_grow>
    1c6c:	cbz	x0, 1dd0 <read_function_entry+0x380>
    1c70:	ldr	x1, [x21, #24]
    1c74:	stp	x19, x20, [x0]
    1c78:	ldr	x3, [sp, #120]
    1c7c:	str	x3, [x0, #16]
    1c80:	add	x0, x1, #0x1
    1c84:	str	x0, [x21, #24]
    1c88:	ldr	w0, [x25, #12]
    1c8c:	cbz	w0, 1d20 <read_function_entry+0x2d0>
    1c90:	add	x19, sp, #0x108
    1c94:	mov	x2, #0x20                  	// #32
    1c98:	mov	w1, #0x0                   	// #0
    1c9c:	mov	x0, x19
    1ca0:	bl	0 <__asan_internal_memset>
    1ca4:	ldr	x0, [sp, #464]
    1ca8:	stp	x0, x19, [sp]
    1cac:	mov	x7, x28
    1cb0:	ldr	x6, [sp, #128]
    1cb4:	mov	x4, x24
    1cb8:	ldr	x0, [sp, #152]
    1cbc:	mov	x2, x22
    1cc0:	ldr	x3, [sp, #184]
    1cc4:	mov	x1, x27
    1cc8:	ldr	x5, [sp, #216]
    1ccc:	bl	1a50 <read_function_entry>
    1cd0:	cbz	w0, 1dd0 <read_function_entry+0x380>
    1cd4:	ldr	x0, [sp, #288]
    1cd8:	cbz	x0, 1d20 <read_function_entry+0x2d0>
    1cdc:	ldr	x2, [sp, #128]
    1ce0:	mov	x1, x19
    1ce4:	ldr	x0, [sp, #152]
    1ce8:	mov	x3, x28
    1cec:	bl	0 <__asan_backtrace_vector_release>
    1cf0:	cbz	w0, 1dd0 <read_function_entry+0x380>
    1cf4:	ldr	x1, [sp, #288]
    1cf8:	adrp	x3, 0 <abbrev_compare>
    1cfc:	ldr	x19, [sp, #264]
    1d00:	add	x3, x3, #0x0
    1d04:	mov	x2, #0x18                  	// #24
    1d08:	mov	x0, x19
    1d0c:	bl	0 <__asan_backtrace_qsort>
    1d10:	ldr	x1, [sp, #120]
    1d14:	ldr	x0, [sp, #288]
    1d18:	stp	x19, x0, [x1, #24]
    1d1c:	nop
    1d20:	ldr	x0, [x24, #24]
    1d24:	cbnz	x0, 1ab0 <read_function_entry+0x60>
    1d28:	ldp	x19, x20, [sp, #32]
    1d2c:	ldp	x21, x22, [sp, #48]
    1d30:	ldp	x25, x26, [sp, #80]
    1d34:	ldp	x27, x28, [sp, #96]
    1d38:	mov	w0, #0x1                   	// #1
    1d3c:	b	1de4 <read_function_entry+0x394>
    1d40:	ldr	x0, [x25, #24]
    1d44:	ldr	w0, [x0, x22]
    1d48:	cmp	w0, #0x11
    1d4c:	b.ne	1b74 <read_function_entry+0x124>  // b.any
    1d50:	ldr	w0, [sp, #248]
    1d54:	cmp	w0, #0x1
    1d58:	b.ne	1bb8 <read_function_entry+0x168>  // b.any
    1d5c:	ldr	x0, [sp, #256]
    1d60:	str	x0, [sp, #184]
    1d64:	cbz	w19, 1bb8 <read_function_entry+0x168>
    1d68:	str	x0, [sp, #192]
    1d6c:	mov	w0, #0x1                   	// #1
    1d70:	str	w0, [sp, #200]
    1d74:	b	1bb8 <read_function_entry+0x168>
    1d78:	ldp	x1, x3, [sp, #120]
    1d7c:	mov	x4, x28
    1d80:	ldr	x0, [sp, #152]
    1d84:	mov	x2, #0x28                  	// #40
    1d88:	bl	0 <__asan_backtrace_free>
    1d8c:	ldr	w0, [x25, #12]
    1d90:	cbz	w0, 1d20 <read_function_entry+0x2d0>
    1d94:	ldr	x0, [sp, #464]
    1d98:	str	x0, [sp]
    1d9c:	ldr	x0, [sp, #472]
    1da0:	str	x0, [sp, #8]
    1da4:	ldr	x6, [sp, #128]
    1da8:	mov	x7, x28
    1dac:	ldr	x0, [sp, #152]
    1db0:	mov	x4, x24
    1db4:	ldr	x3, [sp, #184]
    1db8:	mov	x2, x22
    1dbc:	ldr	x5, [sp, #216]
    1dc0:	mov	x1, x27
    1dc4:	bl	1a50 <read_function_entry>
    1dc8:	cbnz	w0, 1d20 <read_function_entry+0x2d0>
    1dcc:	nop
    1dd0:	ldp	x19, x20, [sp, #32]
    1dd4:	mov	w0, #0x0                   	// #0
    1dd8:	ldp	x21, x22, [sp, #48]
    1ddc:	ldp	x25, x26, [sp, #80]
    1de0:	ldp	x27, x28, [sp, #96]
    1de4:	ldp	x29, x30, [sp, #16]
    1de8:	ldp	x23, x24, [sp, #64]
    1dec:	add	sp, sp, #0x1d0
    1df0:	ret
    1df4:	cmp	w0, #0x3
    1df8:	b.ne	1e84 <read_function_entry+0x434>  // b.any
    1dfc:	ldr	x0, [sp, #120]
    1e00:	ldr	x0, [x0]
    1e04:	cbnz	x0, 1bb8 <read_function_entry+0x168>
    1e08:	ldr	w0, [sp, #248]
    1e0c:	cmp	w0, #0x4
    1e10:	b.ne	1bb8 <read_function_entry+0x168>  // b.any
    1e14:	ldr	x0, [sp, #256]
    1e18:	b	1f74 <read_function_entry+0x524>
    1e1c:	cmp	w0, #0x59
    1e20:	b.eq	1ec0 <read_function_entry+0x470>  // b.none
    1e24:	b.ls	1e58 <read_function_entry+0x408>  // b.plast
    1e28:	cmp	w0, #0x6e
    1e2c:	b.eq	1e38 <read_function_entry+0x3e8>  // b.none
    1e30:	cmp	w0, w20
    1e34:	b.ne	1bb8 <read_function_entry+0x168>  // b.any
    1e38:	ldr	w0, [sp, #248]
    1e3c:	cmp	w0, #0x4
    1e40:	b.ne	1bb8 <read_function_entry+0x168>  // b.any
    1e44:	ldr	x1, [sp, #120]
    1e48:	str	w19, [sp, #144]
    1e4c:	ldr	x0, [sp, #256]
    1e50:	str	x0, [x1]
    1e54:	b	1bb8 <read_function_entry+0x168>
    1e58:	cmp	w0, #0x58
    1e5c:	b.ne	1bb8 <read_function_entry+0x168>  // b.any
    1e60:	ldr	w0, [sp, #248]
    1e64:	cmp	w0, #0x2
    1e68:	b.ne	1bb8 <read_function_entry+0x168>  // b.any
    1e6c:	ldr	x0, [sp, #256]
    1e70:	cbnz	x0, 1f8c <read_function_entry+0x53c>
    1e74:	ldr	x0, [sp, #120]
    1e78:	ldr	x1, [sp, #232]
    1e7c:	str	x1, [x0, #8]
    1e80:	b	1bb8 <read_function_entry+0x168>
    1e84:	cmp	w0, #0x11
    1e88:	b.ne	1bb8 <read_function_entry+0x168>  // b.any
    1e8c:	ldr	w0, [sp, #248]
    1e90:	cmp	w0, #0x1
    1e94:	b.ne	1bb8 <read_function_entry+0x168>  // b.any
    1e98:	ldr	x0, [sp, #256]
    1e9c:	b	1d68 <read_function_entry+0x318>
    1ea0:	ldr	w0, [sp, #248]
    1ea4:	cmp	w0, #0x2
    1ea8:	ccmp	w0, #0x8, #0x4, ne  // ne = any
    1eac:	b.ne	1bb8 <read_function_entry+0x168>  // b.any
    1eb0:	ldr	x0, [sp, #256]
    1eb4:	str	w19, [sp, #160]
    1eb8:	str	x0, [sp, #176]
    1ebc:	b	1bb8 <read_function_entry+0x168>
    1ec0:	ldr	w0, [sp, #248]
    1ec4:	cmp	w0, #0x2
    1ec8:	b.ne	1bb8 <read_function_entry+0x168>  // b.any
    1ecc:	ldr	x1, [sp, #120]
    1ed0:	ldr	x0, [sp, #256]
    1ed4:	str	w0, [x1, #16]
    1ed8:	b	1bb8 <read_function_entry+0x168>
    1edc:	ldr	w0, [sp, #248]
    1ee0:	cmp	w0, #0x1
    1ee4:	b.eq	1ef4 <read_function_entry+0x4a4>  // b.none
    1ee8:	cmp	w0, #0x2
    1eec:	b.ne	1bb8 <read_function_entry+0x168>  // b.any
    1ef0:	str	w19, [sp, #204]
    1ef4:	ldr	x0, [sp, #256]
    1ef8:	str	x0, [sp, #136]
    1efc:	str	w19, [sp, #172]
    1f00:	b	1bb8 <read_function_entry+0x168>
    1f04:	cmp	w0, #0x1d
    1f08:	ldp	x0, x1, [sp, #464]
    1f0c:	csel	x0, x0, x1, ne  // ne = any
    1f10:	str	x0, [sp, #208]
    1f14:	ldr	x2, [sp, #128]
    1f18:	mov	x3, x28
    1f1c:	ldr	x0, [sp, #152]
    1f20:	mov	x1, #0x28                  	// #40
    1f24:	bl	0 <__asan_backtrace_alloc>
    1f28:	str	x0, [sp, #120]
    1f2c:	cbz	x0, 1dd0 <read_function_entry+0x380>
    1f30:	mov	x2, #0x28                  	// #40
    1f34:	mov	w1, #0x0                   	// #0
    1f38:	mov	w19, #0x1                   	// #1
    1f3c:	bl	0 <__asan_internal_memset>
    1f40:	b	1b04 <read_function_entry+0xb4>
    1f44:	ldr	w0, [x1, #4]
    1f48:	cmp	w0, #0x20
    1f4c:	b.eq	21ac <read_function_entry+0x75c>  // b.none
    1f50:	ldr	x4, [sp, #128]
    1f54:	mov	x5, x28
    1f58:	ldr	x3, [sp, #224]
    1f5c:	mov	x2, x26
    1f60:	mov	x1, x21
    1f64:	mov	x0, x27
    1f68:	bl	1408 <read_referenced_name_from_attr.isra.0.part.0>
    1f6c:	str	wzr, [sp, #144]
    1f70:	cbz	x0, 1bb8 <read_function_entry+0x168>
    1f74:	ldr	x1, [sp, #120]
    1f78:	str	x0, [x1]
    1f7c:	b	1bb8 <read_function_entry+0x168>
    1f80:	ldr	x0, [sp, #472]
    1f84:	str	x0, [sp, #208]
    1f88:	b	1f14 <read_function_entry+0x4c4>
    1f8c:	ldr	x1, [sp, #216]
    1f90:	sub	x2, x0, #0x1
    1f94:	ldr	x1, [x1, #48]
    1f98:	cmp	x2, x1
    1f9c:	b.cs	21d0 <read_function_entry+0x780>  // b.hs, b.nlast
    1fa0:	ldr	x1, [sp, #216]
    1fa4:	ldr	x1, [x1, #56]
    1fa8:	add	x0, x1, x0, lsl #3
    1fac:	ldr	x1, [sp, #120]
    1fb0:	ldur	x0, [x0, #-8]
    1fb4:	str	x0, [x1, #8]
    1fb8:	b	1bb8 <read_function_entry+0x168>
    1fbc:	ldr	x0, [x27, #96]
    1fc0:	ldr	x1, [sp, #176]
    1fc4:	cmp	x0, x1
    1fc8:	b.ls	2190 <read_function_entry+0x740>  // b.plast
    1fcc:	ldr	x3, [x27, #88]
    1fd0:	mov	x5, x1
    1fd4:	sub	x1, x0, x1
    1fd8:	str	x26, [sp, #160]
    1fdc:	add	x0, x3, x5
    1fe0:	stp	x0, x1, [sp, #280]
    1fe4:	ldr	w4, [x27, #120]
    1fe8:	ldr	x0, [sp, #128]
    1fec:	add	x19, sp, #0x108
    1ff0:	ldr	x20, [sp, #184]
    1ff4:	stp	x25, x24, [sp, #136]
    1ff8:	mov	x25, x0
    1ffc:	ldr	x26, [sp, #208]
    2000:	adrp	x2, 0 <abbrev_compare>
    2004:	mov	x21, #0xffff                	// #65535
    2008:	add	x2, x2, #0x0
    200c:	stp	x2, x3, [sp, #264]
    2010:	str	w4, [sp, #296]
    2014:	str	x0, [sp, #304]
    2018:	str	x28, [sp, #312]
    201c:	str	wzr, [sp, #320]
    2020:	ldr	w1, [x22, #48]
    2024:	mov	x0, x19
    2028:	bl	8b0 <read_address>
    202c:	mov	x23, x0
    2030:	ldr	w1, [x22, #48]
    2034:	mov	x0, x19
    2038:	bl	8b0 <read_address>
    203c:	orr	x1, x23, x0
    2040:	cbz	x1, 21b4 <read_function_entry+0x764>
    2044:	ldr	w1, [x22, #48]
    2048:	cmp	w1, #0x4
    204c:	b.eq	2144 <read_function_entry+0x6f4>  // b.none
    2050:	b.gt	2080 <read_function_entry+0x630>
    2054:	cmp	w1, #0x1
    2058:	b.eq	2138 <read_function_entry+0x6e8>  // b.none
    205c:	cmp	w1, #0x2
    2060:	b.ne	2098 <read_function_entry+0x648>  // b.any
    2064:	cmp	x23, x21
    2068:	cset	w1, eq  // eq = none
    206c:	cbz	w1, 2098 <read_function_entry+0x648>
    2070:	mov	x20, x0
    2074:	ldr	w0, [sp, #320]
    2078:	cbz	w0, 2020 <read_function_entry+0x5d0>
    207c:	b	1dd0 <read_function_entry+0x380>
    2080:	cmp	w1, #0x8
    2084:	b.ne	2098 <read_function_entry+0x648>  // b.any
    2088:	cmn	x23, #0x1
    208c:	cset	w1, eq  // eq = none
    2090:	cbnz	w1, 2070 <read_function_entry+0x620>
    2094:	nop
    2098:	ldr	x1, [x26, #24]
    209c:	add	x2, x23, x20
    20a0:	ldr	x6, [x27, #16]
    20a4:	add	x0, x0, x20
    20a8:	add	x24, x2, x6
    20ac:	add	x23, x0, x6
    20b0:	cbz	x1, 20e0 <read_function_entry+0x690>
    20b4:	add	x0, x1, x1, lsl #1
    20b8:	ldr	x1, [x26]
    20bc:	lsl	x0, x0, #3
    20c0:	sub	x0, x0, #0x18
    20c4:	add	x0, x1, x0
    20c8:	ldr	x1, [x0, #8]
    20cc:	cmp	x24, x1
    20d0:	b.eq	2118 <read_function_entry+0x6c8>  // b.none
    20d4:	add	x2, x1, #0x1
    20d8:	cmp	x24, x2
    20dc:	b.eq	2118 <read_function_entry+0x6c8>  // b.none
    20e0:	ldr	x0, [sp, #152]
    20e4:	mov	x4, x26
    20e8:	mov	x3, x28
    20ec:	mov	x2, x25
    20f0:	mov	x1, #0x18                  	// #24
    20f4:	bl	0 <__asan_backtrace_vector_grow>
    20f8:	cbz	x0, 1dd0 <read_function_entry+0x380>
    20fc:	ldr	x1, [x26, #24]
    2100:	stp	x24, x23, [x0]
    2104:	ldr	x2, [sp, #120]
    2108:	str	x2, [x0, #16]
    210c:	add	x0, x1, #0x1
    2110:	str	x0, [x26, #24]
    2114:	b	2074 <read_function_entry+0x624>
    2118:	ldr	x2, [x0, #16]
    211c:	ldr	x3, [sp, #120]
    2120:	cmp	x3, x2
    2124:	b.ne	20e0 <read_function_entry+0x690>  // b.any
    2128:	cmp	x23, x1
    212c:	b.ls	2074 <read_function_entry+0x624>  // b.plast
    2130:	str	x23, [x0, #8]
    2134:	b	2074 <read_function_entry+0x624>
    2138:	cmp	x23, #0xff
    213c:	cset	w1, eq  // eq = none
    2140:	b	206c <read_function_entry+0x61c>
    2144:	mov	x1, #0xffffffff            	// #4294967295
    2148:	cmp	x23, x1
    214c:	cset	w1, eq  // eq = none
    2150:	b	206c <read_function_entry+0x61c>
    2154:	ldr	x2, [x0, #16]
    2158:	ldr	x3, [sp, #120]
    215c:	cmp	x3, x2
    2160:	b.ne	1c50 <read_function_entry+0x200>  // b.any
    2164:	cmp	x20, x1
    2168:	b.ls	1c88 <read_function_entry+0x238>  // b.plast
    216c:	str	x20, [x0, #8]
    2170:	b	1c88 <read_function_entry+0x238>
    2174:	str	wzr, [sp, #160]
    2178:	str	wzr, [sp, #172]
    217c:	str	xzr, [sp, #176]
    2180:	str	xzr, [sp, #192]
    2184:	stp	wzr, wzr, [sp, #200]
    2188:	cbz	w19, 1d8c <read_function_entry+0x33c>
    218c:	b	1bd0 <read_function_entry+0x180>
    2190:	ldr	x3, [sp, #128]
    2194:	mov	x0, x28
    2198:	adrp	x1, 0 <abbrev_compare>
    219c:	mov	w2, #0x0                   	// #0
    21a0:	add	x1, x1, #0x0
    21a4:	blr	x3
    21a8:	b	1dd0 <read_function_entry+0x380>
    21ac:	str	wzr, [sp, #144]
    21b0:	b	1bb8 <read_function_entry+0x168>
    21b4:	ldr	w0, [sp, #320]
    21b8:	ldp	x25, x24, [sp, #136]
    21bc:	ldr	x26, [sp, #160]
    21c0:	cbnz	w0, 1dd0 <read_function_entry+0x380>
    21c4:	ldr	w0, [x25, #12]
    21c8:	cbnz	w0, 1c94 <read_function_entry+0x244>
    21cc:	b	1d20 <read_function_entry+0x2d0>
    21d0:	ldp	x4, x1, [x24]
    21d4:	add	x19, sp, #0x108
    21d8:	ldr	x5, [x24, #16]
    21dc:	mov	x0, x19
    21e0:	adrp	x3, 0 <abbrev_compare>
    21e4:	adrp	x2, 0 <abbrev_compare>
    21e8:	add	x3, x3, #0x0
    21ec:	add	x2, x2, #0x0
    21f0:	sub	w5, w5, w1
    21f4:	mov	x1, #0xc8                  	// #200
    21f8:	bl	0 <snprintf>
    21fc:	ldp	x3, x0, [x24, #40]
    2200:	mov	x1, x19
    2204:	mov	w2, #0x0                   	// #0
    2208:	blr	x3
    220c:	b	1dd0 <read_function_entry+0x380>

0000000000002210 <dwarf_lookup_pc>:
    2210:	sub	sp, sp, #0x2a0
    2214:	stp	x29, x30, [sp, #16]
    2218:	add	x29, sp, #0x10
    221c:	stp	x27, x28, [sp, #96]
    2220:	mov	x28, x1
    2224:	mov	w1, #0x1                   	// #1
    2228:	stp	x21, x22, [sp, #48]
    222c:	mov	x21, x6
    2230:	ldr	x6, [x28, #32]
    2234:	str	w1, [x21]
    2238:	str	x3, [sp, #112]
    223c:	cbz	x6, 24e4 <dwarf_lookup_pc+0x2d4>
    2240:	mov	x22, x4
    2244:	stp	x19, x20, [sp, #32]
    2248:	mov	x20, x5
    224c:	ldr	x4, [x28, #24]
    2250:	mov	x19, x0
    2254:	mov	x5, x6
    2258:	stp	x25, x26, [sp, #80]
    225c:	mov	x26, x2
    2260:	mov	x3, #0x0                   	// #0
    2264:	stp	x23, x24, [sp, #64]
    2268:	add	x0, x5, x3
    226c:	cmp	x5, x3
    2270:	and	x1, x0, #0xfffffffffffffffe
    2274:	b.ls	24d8 <dwarf_lookup_pc+0x2c8>  // b.plast
    2278:	lsr	x0, x0, #1
    227c:	add	x1, x1, x0
    2280:	lsl	x2, x1, #3
    2284:	ldr	x1, [x4, x1, lsl #3]
    2288:	add	x27, x4, x2
    228c:	cmp	x1, x26
    2290:	b.hi	24c4 <dwarf_lookup_pc+0x2b4>  // b.pmore
    2294:	ldr	x1, [x27, #8]
    2298:	add	x3, x0, #0x1
    229c:	cmp	x1, x26
    22a0:	b.ls	2268 <dwarf_lookup_pc+0x58>  // b.plast
    22a4:	asr	x2, x2, #3
    22a8:	mov	x0, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
    22ac:	movk	x0, #0xaaab
    22b0:	mov	x1, x0
    22b4:	mul	x2, x2, x0
    22b8:	add	x2, x2, #0x1
    22bc:	cmp	x6, x2
    22c0:	b.hi	22f0 <dwarf_lookup_pc+0xe0>  // b.pmore
    22c4:	b	22fc <dwarf_lookup_pc+0xec>
    22c8:	ldr	x0, [x27, #32]
    22cc:	cmp	x0, x26
    22d0:	b.ls	22fc <dwarf_lookup_pc+0xec>  // b.plast
    22d4:	add	x27, x27, #0x18
    22d8:	sub	x0, x27, x4
    22dc:	asr	x0, x0, #3
    22e0:	mul	x0, x0, x1
    22e4:	add	x0, x0, #0x1
    22e8:	cmp	x6, x0
    22ec:	b.ls	22fc <dwarf_lookup_pc+0xec>  // b.plast
    22f0:	ldr	x0, [x27, #24]
    22f4:	cmp	x0, x26
    22f8:	b.ls	22c8 <dwarf_lookup_pc+0xb8>  // b.plast
    22fc:	ldr	x23, [x27, #16]
    2300:	cmp	x4, x27
    2304:	ldr	w1, [x19, #8]
    2308:	ldr	x24, [x23, #104]
    230c:	b.cc	2334 <dwarf_lookup_pc+0x124>  // b.lo, b.ul, b.last
    2310:	b	2368 <dwarf_lookup_pc+0x158>
    2314:	cmn	x24, #0x1
    2318:	b.ne	2368 <dwarf_lookup_pc+0x158>  // b.any
    231c:	ldur	x23, [x27, #-8]
    2320:	sub	x27, x27, #0x18
    2324:	ldr	x0, [x28, #24]
    2328:	ldr	x24, [x23, #104]
    232c:	cmp	x0, x27
    2330:	b.cs	2368 <dwarf_lookup_pc+0x158>  // b.hs, b.nlast
    2334:	ldur	x0, [x27, #-24]
    2338:	cmp	x0, x26
    233c:	b.hi	2368 <dwarf_lookup_pc+0x158>  // b.pmore
    2340:	ldur	x0, [x27, #-16]
    2344:	cmp	x0, x26
    2348:	b.ls	2368 <dwarf_lookup_pc+0x158>  // b.plast
    234c:	cbz	w1, 2314 <dwarf_lookup_pc+0x104>
    2350:	add	x0, x23, #0x68
    2354:	ldar	x24, [x0]
    2358:	ldr	w1, [x19, #8]
    235c:	cmn	x24, #0x1
    2360:	b.eq	231c <dwarf_lookup_pc+0x10c>  // b.none
    2364:	nop
    2368:	cbnz	w1, 2560 <dwarf_lookup_pc+0x350>
    236c:	cbz	x24, 256c <dwarf_lookup_pc+0x35c>
    2370:	cmn	x24, #0x1
    2374:	b.eq	266c <dwarf_lookup_pc+0x45c>  // b.none
    2378:	ldr	x7, [x27, #16]
    237c:	mov	x2, #0x0                   	// #0
    2380:	ldr	x3, [x7, #112]
    2384:	add	x0, x2, x3
    2388:	cmp	x2, x3
    238c:	and	x1, x0, #0xfffffffffffffffe
    2390:	b.cs	2514 <dwarf_lookup_pc+0x304>  // b.hs, b.nlast
    2394:	lsr	x0, x0, #1
    2398:	add	x1, x1, x0
    239c:	add	x4, x24, x1, lsl #3
    23a0:	ldr	x1, [x24, x1, lsl #3]
    23a4:	cmp	x1, x26
    23a8:	b.hi	2500 <dwarf_lookup_pc+0x2f0>  // b.pmore
    23ac:	ldr	x1, [x4, #24]
    23b0:	add	x2, x0, #0x1
    23b4:	cmp	x1, x26
    23b8:	b.ls	2384 <dwarf_lookup_pc+0x174>  // b.plast
    23bc:	ldr	x6, [x7, #128]
    23c0:	ldr	w10, [x4, #16]
    23c4:	ldr	x8, [x4, #8]
    23c8:	cbz	x6, 2548 <dwarf_lookup_pc+0x338>
    23cc:	ldr	x4, [x7, #120]
    23d0:	mov	x5, x6
    23d4:	mov	x3, #0x0                   	// #0
    23d8:	add	x0, x5, x3
    23dc:	cmp	x5, x3
    23e0:	and	x1, x0, #0xfffffffffffffffe
    23e4:	b.ls	2548 <dwarf_lookup_pc+0x338>  // b.plast
    23e8:	lsr	x0, x0, #1
    23ec:	add	x1, x1, x0
    23f0:	lsl	x2, x1, #3
    23f4:	ldr	x7, [x4, x1, lsl #3]
    23f8:	add	x1, x4, x2
    23fc:	cmp	x7, x26
    2400:	b.hi	2534 <dwarf_lookup_pc+0x324>  // b.pmore
    2404:	ldr	x7, [x1, #8]
    2408:	add	x3, x0, #0x1
    240c:	cmp	x7, x26
    2410:	b.ls	23d8 <dwarf_lookup_pc+0x1c8>  // b.plast
    2414:	asr	x0, x2, #3
    2418:	mov	x2, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
    241c:	movk	x2, #0xaaab
    2420:	mov	x3, x2
    2424:	mul	x0, x0, x2
    2428:	add	x0, x0, #0x1
    242c:	cmp	x6, x0
    2430:	b.hi	2460 <dwarf_lookup_pc+0x250>  // b.pmore
    2434:	b	246c <dwarf_lookup_pc+0x25c>
    2438:	ldr	x0, [x1, #32]
    243c:	cmp	x0, x26
    2440:	b.ls	246c <dwarf_lookup_pc+0x25c>  // b.plast
    2444:	add	x1, x1, #0x18
    2448:	sub	x0, x1, x4
    244c:	asr	x0, x0, #3
    2450:	mul	x0, x0, x3
    2454:	add	x0, x0, #0x1
    2458:	cmp	x6, x0
    245c:	b.ls	246c <dwarf_lookup_pc+0x25c>  // b.plast
    2460:	ldr	x0, [x1, #24]
    2464:	cmp	x0, x26
    2468:	b.ls	2438 <dwarf_lookup_pc+0x228>  // b.plast
    246c:	ldr	x19, [x1, #16]
    2470:	add	x6, sp, #0x198
    2474:	ldr	x21, [sp, #112]
    2478:	add	x5, sp, #0x1d8
    247c:	ldp	x1, x2, [x19, #24]
    2480:	mov	x4, x20
    2484:	mov	x0, x26
    2488:	mov	x3, x21
    248c:	str	w10, [sp, #408]
    2490:	str	x8, [sp, #472]
    2494:	bl	c0 <report_inlined_functions.isra.0>
    2498:	cbnz	w0, 27e8 <dwarf_lookup_pc+0x5d8>
    249c:	ldr	w3, [sp, #408]
    24a0:	mov	x1, x26
    24a4:	ldr	x4, [x19]
    24a8:	mov	x0, x20
    24ac:	ldr	x2, [sp, #472]
    24b0:	blr	x21
    24b4:	ldp	x19, x20, [sp, #32]
    24b8:	ldp	x23, x24, [sp, #64]
    24bc:	ldp	x25, x26, [sp, #80]
    24c0:	b	24ec <dwarf_lookup_pc+0x2dc>
    24c4:	mov	x5, x0
    24c8:	add	x0, x5, x3
    24cc:	cmp	x5, x3
    24d0:	and	x1, x0, #0xfffffffffffffffe
    24d4:	b.hi	2278 <dwarf_lookup_pc+0x68>  // b.pmore
    24d8:	ldp	x19, x20, [sp, #32]
    24dc:	ldp	x23, x24, [sp, #64]
    24e0:	ldp	x25, x26, [sp, #80]
    24e4:	mov	w0, #0x0                   	// #0
    24e8:	str	wzr, [x21]
    24ec:	ldp	x29, x30, [sp, #16]
    24f0:	ldp	x21, x22, [sp, #48]
    24f4:	ldp	x27, x28, [sp, #96]
    24f8:	add	sp, sp, #0x2a0
    24fc:	ret
    2500:	mov	x3, x0
    2504:	add	x0, x2, x3
    2508:	cmp	x2, x3
    250c:	and	x1, x0, #0xfffffffffffffffe
    2510:	b.cc	2394 <dwarf_lookup_pc+0x184>  // b.lo, b.ul, b.last
    2514:	ldr	x24, [x7, #80]
    2518:	cbz	x24, 26a8 <dwarf_lookup_pc+0x498>
    251c:	mov	x2, x24
    2520:	mov	x1, x26
    2524:	mov	x0, x20
    2528:	mov	x4, #0x0                   	// #0
    252c:	mov	w3, #0x0                   	// #0
    2530:	b	2680 <dwarf_lookup_pc+0x470>
    2534:	mov	x5, x0
    2538:	add	x0, x5, x3
    253c:	cmp	x5, x3
    2540:	and	x1, x0, #0xfffffffffffffffe
    2544:	b.hi	23e8 <dwarf_lookup_pc+0x1d8>  // b.pmore
    2548:	mov	w3, w10
    254c:	mov	x2, x8
    2550:	mov	x1, x26
    2554:	mov	x0, x20
    2558:	mov	x4, #0x0                   	// #0
    255c:	b	2680 <dwarf_lookup_pc+0x470>
    2560:	add	x0, x23, #0x68
    2564:	ldar	x24, [x0]
    2568:	cbnz	x24, 2370 <dwarf_lookup_pc+0x160>
    256c:	add	x3, sp, #0x118
    2570:	add	x0, sp, #0xf8
    2574:	ldr	x24, [x27, #16]
    2578:	mov	x25, x3
    257c:	mov	x2, #0x18                  	// #24
    2580:	mov	w1, #0x0                   	// #0
    2584:	stp	x0, x24, [sp, #120]
    2588:	str	x3, [sp, #144]
    258c:	bl	0 <__asan_internal_memset>
    2590:	mov	w1, #0x0                   	// #0
    2594:	mov	x0, x25
    2598:	mov	x2, #0x40                  	// #64
    259c:	str	xzr, [sp, #272]
    25a0:	bl	0 <__asan_internal_memset>
    25a4:	ldr	x0, [x24, #56]
    25a8:	ldr	x1, [x28, #80]
    25ac:	cmp	x0, x1
    25b0:	b.cc	273c <dwarf_lookup_pc+0x52c>  // b.lo, b.ul, b.last
    25b4:	adrp	x1, 0 <abbrev_compare>
    25b8:	mov	x0, x20
    25bc:	add	x1, x1, #0x0
    25c0:	mov	w2, #0x0                   	// #0
    25c4:	blr	x22
    25c8:	ldp	x5, x4, [sp, #256]
    25cc:	mov	x2, x22
    25d0:	ldr	x1, [sp, #120]
    25d4:	mov	x3, x20
    25d8:	mov	x0, x19
    25dc:	add	x4, x4, x5
    25e0:	stp	xzr, x4, [sp, #256]
    25e4:	bl	0 <__asan_backtrace_vector_release>
    25e8:	ldr	x2, [sp, #312]
    25ec:	cbnz	x2, 2820 <dwarf_lookup_pc+0x610>
    25f0:	ldp	x2, x1, [sp, #328]
    25f4:	mov	x4, x20
    25f8:	mov	x3, x22
    25fc:	mov	x0, x19
    2600:	str	xzr, [sp, #120]
    2604:	mov	x25, #0x0                   	// #0
    2608:	mov	x24, #0xffffffffffffffff    	// #-1
    260c:	lsl	x2, x2, #3
    2610:	bl	0 <__asan_backtrace_free>
    2614:	mov	x5, #0x0                   	// #0
    2618:	mov	w1, #0x0                   	// #0
    261c:	ldr	w0, [x19, #8]
    2620:	cbnz	w0, 27f8 <dwarf_lookup_pc+0x5e8>
    2624:	ldr	x0, [sp, #120]
    2628:	stp	x24, x0, [x23, #104]
    262c:	stp	x25, x5, [x23, #120]
    2630:	cmn	x24, #0x1
    2634:	b.ne	2378 <dwarf_lookup_pc+0x168>  // b.any
    2638:	cbz	w1, 266c <dwarf_lookup_pc+0x45c>
    263c:	ldr	x3, [sp, #112]
    2640:	mov	x5, x20
    2644:	mov	x2, x26
    2648:	mov	x0, x19
    264c:	mov	x6, x21
    2650:	mov	x4, x22
    2654:	mov	x1, x28
    2658:	bl	2210 <dwarf_lookup_pc>
    265c:	ldp	x19, x20, [sp, #32]
    2660:	ldp	x23, x24, [sp, #64]
    2664:	ldp	x25, x26, [sp, #80]
    2668:	b	24ec <dwarf_lookup_pc+0x2dc>
    266c:	mov	x1, x26
    2670:	mov	x0, x20
    2674:	mov	x4, #0x0                   	// #0
    2678:	mov	w3, #0x0                   	// #0
    267c:	mov	x2, #0x0                   	// #0
    2680:	ldr	x5, [sp, #112]
    2684:	blr	x5
    2688:	ldp	x29, x30, [sp, #16]
    268c:	ldp	x19, x20, [sp, #32]
    2690:	ldp	x21, x22, [sp, #48]
    2694:	ldp	x23, x24, [sp, #64]
    2698:	ldp	x25, x26, [sp, #80]
    269c:	ldp	x27, x28, [sp, #96]
    26a0:	add	sp, sp, #0x2a0
    26a4:	ret
    26a8:	ldr	x24, [x7, #64]
    26ac:	cbz	x24, 2734 <dwarf_lookup_pc+0x524>
    26b0:	ldrb	w0, [x24]
    26b4:	cmp	w0, #0x2f
    26b8:	b.eq	2734 <dwarf_lookup_pc+0x524>  // b.none
    26bc:	ldr	x0, [x7, #72]
    26c0:	cbz	x0, 2734 <dwarf_lookup_pc+0x524>
    26c4:	mov	x0, x24
    26c8:	bl	0 <__asan_internal_strlen>
    26cc:	ldr	x1, [x27, #16]
    26d0:	mov	x25, x0
    26d4:	ldr	x23, [x1, #72]
    26d8:	mov	x0, x23
    26dc:	bl	0 <__asan_internal_strlen>
    26e0:	mov	x2, x22
    26e4:	mov	x22, x0
    26e8:	add	x1, x25, x22
    26ec:	mov	x0, x19
    26f0:	mov	x3, x20
    26f4:	add	x1, x1, #0x2
    26f8:	bl	0 <__asan_backtrace_alloc>
    26fc:	mov	x19, x0
    2700:	cbz	x0, 24d8 <dwarf_lookup_pc+0x2c8>
    2704:	mov	x1, x23
    2708:	mov	x2, x22
    270c:	bl	0 <__asan_internal_memcpy>
    2710:	mov	w3, #0x2f                  	// #47
    2714:	strb	w3, [x19, x22]
    2718:	add	x0, x22, #0x1
    271c:	mov	x1, x24
    2720:	add	x2, x25, #0x1
    2724:	add	x0, x19, x0
    2728:	bl	0 <__asan_internal_memcpy>
    272c:	mov	x24, x19
    2730:	ldr	x7, [x27, #16]
    2734:	str	x24, [x7, #80]
    2738:	b	251c <dwarf_lookup_pc+0x30c>
    273c:	ldr	x4, [x28, #72]
    2740:	sub	x2, x1, x0
    2744:	ldr	w5, [x28, #120]
    2748:	add	x6, sp, #0x158
    274c:	add	x1, x4, x0
    2750:	adrp	x3, 0 <abbrev_compare>
    2754:	add	x3, x3, #0x0
    2758:	mov	x0, x6
    275c:	str	x6, [sp, #136]
    2760:	stp	x3, x4, [sp, #344]
    2764:	stp	x1, x2, [sp, #360]
    2768:	str	w5, [sp, #376]
    276c:	stp	x22, x20, [sp, #384]
    2770:	str	wzr, [sp, #400]
    2774:	bl	700 <read_uint32>
    2778:	mov	x1, #0xffffffff            	// #4294967295
    277c:	mov	w2, w0
    2780:	cmp	x1, w0, uxtw
    2784:	b.eq	2c08 <dwarf_lookup_pc+0x9f8>  // b.none
    2788:	ldr	x0, [sp, #136]
    278c:	str	x2, [sp, #368]
    2790:	bl	620 <read_uint16>
    2794:	and	w0, w0, #0xffff
    2798:	str	w0, [sp, #280]
    279c:	sub	w0, w0, #0x2
    27a0:	cmp	w0, #0x2
    27a4:	b.ls	283c <dwarf_lookup_pc+0x62c>  // b.plast
    27a8:	ldp	x4, x1, [sp, #344]
    27ac:	add	x24, sp, #0x1d8
    27b0:	ldr	x5, [sp, #360]
    27b4:	adrp	x3, 0 <abbrev_compare>
    27b8:	mov	x0, x24
    27bc:	add	x3, x3, #0x0
    27c0:	adrp	x2, 0 <abbrev_compare>
    27c4:	sub	w5, w5, w1
    27c8:	add	x2, x2, #0x0
    27cc:	mov	x1, #0xc8                  	// #200
    27d0:	bl	0 <snprintf>
    27d4:	ldp	x3, x0, [sp, #384]
    27d8:	mov	x1, x24
    27dc:	mov	w2, #0x0                   	// #0
    27e0:	blr	x3
    27e4:	b	25c8 <dwarf_lookup_pc+0x3b8>
    27e8:	ldp	x19, x20, [sp, #32]
    27ec:	ldp	x23, x24, [sp, #64]
    27f0:	ldp	x25, x26, [sp, #80]
    27f4:	b	24ec <dwarf_lookup_pc+0x2dc>
    27f8:	add	x0, x23, #0x70
    27fc:	ldr	x2, [sp, #120]
    2800:	stlr	x2, [x0]
    2804:	add	x0, x23, #0x78
    2808:	stlr	x25, [x0]
    280c:	add	x0, x23, #0x80
    2810:	stlr	x5, [x0]
    2814:	add	x11, x23, #0x68
    2818:	stlr	x24, [x11]
    281c:	b	2630 <dwarf_lookup_pc+0x420>
    2820:	ldr	x1, [sp, #320]
    2824:	lsl	x2, x2, #3
    2828:	mov	x4, x20
    282c:	mov	x3, x22
    2830:	mov	x0, x19
    2834:	bl	0 <__asan_backtrace_free>
    2838:	b	25f0 <dwarf_lookup_pc+0x3e0>
    283c:	ldr	x0, [sp, #136]
    2840:	bl	700 <read_uint32>
    2844:	mov	w0, w0
    2848:	add	x1, sp, #0x200
    284c:	add	x4, sp, #0x280
    2850:	ldp	x2, x3, [x1, #-152]
    2854:	add	x1, sp, #0x280
    2858:	stp	x2, x3, [x1, #-216]
    285c:	add	x1, sp, #0x200
    2860:	str	x0, [sp, #432]
    2864:	ldp	x2, x3, [x1, #-168]
    2868:	add	x1, sp, #0x280
    286c:	stp	x2, x3, [x1, #-232]
    2870:	add	x2, sp, #0x200
    2874:	ldr	x1, [sp, #368]
    2878:	ldp	x2, x3, [x2, #-136]
    287c:	stp	x2, x3, [x4, #-200]
    2880:	cmp	x0, x1
    2884:	ldp	x2, x3, [x4, #-248]
    2888:	stp	x2, x3, [x4, #-184]
    288c:	b.ls	28e0 <dwarf_lookup_pc+0x6d0>  // b.plast
    2890:	ldr	w0, [sp, #400]
    2894:	cbnz	w0, 25c8 <dwarf_lookup_pc+0x3b8>
    2898:	ldp	x4, x1, [sp, #344]
    289c:	add	x24, sp, #0x1d8
    28a0:	ldr	x5, [sp, #360]
    28a4:	mov	x0, x24
    28a8:	adrp	x3, 0 <abbrev_compare>
    28ac:	adrp	x2, 0 <abbrev_compare>
    28b0:	add	x3, x3, #0x0
    28b4:	add	x2, x2, #0x0
    28b8:	sub	w5, w5, w1
    28bc:	mov	x1, #0xc8                  	// #200
    28c0:	bl	0 <snprintf>
    28c4:	ldp	x3, x0, [sp, #384]
    28c8:	mov	x1, x24
    28cc:	mov	w2, #0x0                   	// #0
    28d0:	blr	x3
    28d4:	mov	w0, #0x1                   	// #1
    28d8:	str	w0, [sp, #400]
    28dc:	b	25c8 <dwarf_lookup_pc+0x3b8>
    28e0:	ldr	x5, [sp, #360]
    28e4:	sub	x1, x1, x0
    28e8:	str	x1, [sp, #368]
    28ec:	add	x1, x5, x0
    28f0:	str	x1, [sp, #360]
    28f4:	cbnz	x0, 2b68 <dwarf_lookup_pc+0x958>
    28f8:	ldr	w0, [sp, #464]
    28fc:	cbz	w0, 2d54 <dwarf_lookup_pc+0xb44>
    2900:	ldr	w2, [sp, #280]
    2904:	str	wzr, [sp, #284]
    2908:	cmp	w2, #0x3
    290c:	ldr	x1, [sp, #424]
    2910:	b.gt	2d44 <dwarf_lookup_pc+0xb34>
    2914:	mov	w2, #0x1                   	// #1
    2918:	str	w2, [sp, #288]
    291c:	cbz	w0, 2978 <dwarf_lookup_pc+0x768>
    2920:	str	wzr, [sp, #292]
    2924:	cbz	w0, 2cf4 <dwarf_lookup_pc+0xae4>
    2928:	str	wzr, [sp, #296]
    292c:	cbz	w0, 2ca4 <dwarf_lookup_pc+0xa94>
    2930:	str	wzr, [sp, #300]
    2934:	str	x1, [sp, #304]
    2938:	cbnz	w0, 25c8 <dwarf_lookup_pc+0x3b8>
    293c:	ldp	x4, x5, [sp, #408]
    2940:	add	x24, sp, #0x1d8
    2944:	adrp	x3, 0 <abbrev_compare>
    2948:	mov	x0, x24
    294c:	add	x3, x3, #0x0
    2950:	adrp	x2, 0 <abbrev_compare>
    2954:	sub	w5, w1, w5
    2958:	add	x2, x2, #0x0
    295c:	mov	x1, #0xc8                  	// #200
    2960:	bl	0 <snprintf>
    2964:	ldp	x3, x0, [sp, #448]
    2968:	mov	x1, x24
    296c:	mov	w2, #0x0                   	// #0
    2970:	blr	x3
    2974:	b	25c8 <dwarf_lookup_pc+0x3b8>
    2978:	ldp	x4, x5, [sp, #408]
    297c:	add	x24, sp, #0x1d8
    2980:	mov	x0, x24
    2984:	adrp	x3, 0 <abbrev_compare>
    2988:	adrp	x2, 0 <abbrev_compare>
    298c:	add	x3, x3, #0x0
    2990:	add	x2, x2, #0x0
    2994:	sub	w5, w1, w5
    2998:	mov	x1, #0xc8                  	// #200
    299c:	bl	0 <snprintf>
    29a0:	ldp	x3, x0, [sp, #448]
    29a4:	mov	w2, #0x0                   	// #0
    29a8:	mov	x1, x24
    29ac:	blr	x3
    29b0:	ldp	x5, x0, [sp, #424]
    29b4:	mov	w2, #0x1                   	// #1
    29b8:	str	w2, [sp, #464]
    29bc:	cbz	x0, 3828 <dwarf_lookup_pc+0x1618>
    29c0:	sub	x0, x0, #0x1
    29c4:	add	x1, x5, #0x1
    29c8:	stp	x1, x0, [sp, #424]
    29cc:	ldrb	w24, [x5]
    29d0:	eor	w24, w24, #0xffffff80
    29d4:	sub	w24, w24, #0x80
    29d8:	sxtb	w24, w24
    29dc:	str	w24, [sp, #292]
    29e0:	cbz	x0, 2c9c <dwarf_lookup_pc+0xa8c>
    29e4:	add	x2, x1, #0x1
    29e8:	sub	x0, x0, #0x1
    29ec:	stp	x2, x0, [sp, #424]
    29f0:	ldrb	w1, [x1]
    29f4:	str	w1, [sp, #296]
    29f8:	cbz	x0, 2da8 <dwarf_lookup_pc+0xb98>
    29fc:	sub	x25, x0, #0x1
    2a00:	add	x1, x2, #0x1
    2a04:	stp	x1, x25, [sp, #424]
    2a08:	ldrb	w2, [x2]
    2a0c:	sub	w0, w2, #0x1
    2a10:	str	w2, [sp, #300]
    2a14:	cmp	x0, x25
    2a18:	str	x1, [sp, #304]
    2a1c:	b.hi	2da0 <dwarf_lookup_pc+0xb90>  // b.pmore
    2a20:	add	x24, x1, x0
    2a24:	sub	x0, x25, x0
    2a28:	str	xzr, [sp, #312]
    2a2c:	add	x25, x1, x25
    2a30:	stp	x24, x0, [sp, #424]
    2a34:	cmp	x24, x25
    2a38:	mov	x3, #0x0                   	// #0
    2a3c:	b.cc	2a64 <dwarf_lookup_pc+0x854>  // b.lo, b.ul, b.last
    2a40:	b	3848 <dwarf_lookup_pc+0x1638>
    2a44:	bl	0 <__asan_internal_strnlen>
    2a48:	add	x0, x0, #0x1
    2a4c:	ldr	x3, [sp, #312]
    2a50:	add	x24, x24, x0
    2a54:	cmp	x25, x24
    2a58:	add	x3, x3, #0x1
    2a5c:	str	x3, [sp, #312]
    2a60:	b.ls	2a74 <dwarf_lookup_pc+0x864>  // b.plast
    2a64:	ldrb	w2, [x24]
    2a68:	sub	x1, x25, x24
    2a6c:	mov	x0, x24
    2a70:	cbnz	w2, 2a44 <dwarf_lookup_pc+0x834>
    2a74:	str	xzr, [sp, #320]
    2a78:	cbnz	x3, 2c80 <dwarf_lookup_pc+0xa70>
    2a7c:	mov	x0, #0x0                   	// #0
    2a80:	ldr	x6, [sp, #424]
    2a84:	mov	x25, #0x0                   	// #0
    2a88:	ldrb	w1, [x6]
    2a8c:	cbz	w1, 2c50 <dwarf_lookup_pc+0xa40>
    2a90:	add	x3, sp, #0x1d8
    2a94:	adrp	x2, 0 <abbrev_compare>
    2a98:	adrp	x1, 0 <abbrev_compare>
    2a9c:	add	x2, x2, #0x0
    2aa0:	add	x1, x1, #0x0
    2aa4:	stp	x19, x22, [sp, #152]
    2aa8:	mov	x19, x6
    2aac:	mov	x22, x1
    2ab0:	stp	x20, x21, [sp, #168]
    2ab4:	mov	x20, x25
    2ab8:	mov	x21, x2
    2abc:	mov	x25, x3
    2ac0:	b	2af0 <dwarf_lookup_pc+0x8e0>
    2ac4:	ldr	w0, [sp, #464]
    2ac8:	mov	x19, #0x0                   	// #0
    2acc:	cbz	w0, 2b2c <dwarf_lookup_pc+0x91c>
    2ad0:	ldr	x0, [sp, #320]
    2ad4:	str	x19, [x24]
    2ad8:	ldr	x1, [x0, x20]
    2adc:	add	x20, x20, #0x8
    2ae0:	cbz	x1, 2bfc <dwarf_lookup_pc+0x9ec>
    2ae4:	ldr	x19, [sp, #424]
    2ae8:	ldrb	w1, [x19]
    2aec:	cbz	w1, 2c44 <dwarf_lookup_pc+0xa34>
    2af0:	ldr	w1, [sp, #464]
    2af4:	add	x24, x0, x20
    2af8:	mov	x0, x19
    2afc:	cbnz	w1, 2bfc <dwarf_lookup_pc+0x9ec>
    2b00:	ldr	x1, [sp, #432]
    2b04:	bl	0 <__asan_internal_strnlen>
    2b08:	add	x0, x0, #0x1
    2b0c:	ldr	x1, [sp, #432]
    2b10:	cmp	x0, x1
    2b14:	b.hi	2ac4 <dwarf_lookup_pc+0x8b4>  // b.pmore
    2b18:	ldr	x2, [sp, #424]
    2b1c:	sub	x1, x1, x0
    2b20:	add	x0, x2, x0
    2b24:	stp	x0, x1, [sp, #424]
    2b28:	b	2ad0 <dwarf_lookup_pc+0x8c0>
    2b2c:	ldp	x4, x5, [sp, #408]
    2b30:	mov	x3, x21
    2b34:	ldr	x8, [sp, #424]
    2b38:	mov	x2, x22
    2b3c:	mov	x1, #0xc8                  	// #200
    2b40:	mov	x0, x25
    2b44:	sub	w5, w8, w5
    2b48:	bl	0 <snprintf>
    2b4c:	ldp	x3, x0, [sp, #448]
    2b50:	mov	x1, x25
    2b54:	mov	w2, #0x0                   	// #0
    2b58:	blr	x3
    2b5c:	mov	w0, #0x1                   	// #1
    2b60:	str	w0, [sp, #464]
    2b64:	b	2ad0 <dwarf_lookup_pc+0x8c0>
    2b68:	sub	x0, x0, #0x1
    2b6c:	add	x1, x5, #0x1
    2b70:	stp	x1, x0, [sp, #424]
    2b74:	ldrb	w2, [x5]
    2b78:	str	w2, [sp, #284]
    2b7c:	ldr	w2, [sp, #280]
    2b80:	cmp	w2, #0x3
    2b84:	b.gt	3778 <dwarf_lookup_pc+0x1568>
    2b88:	mov	w2, #0x1                   	// #1
    2b8c:	str	w2, [sp, #288]
    2b90:	cbz	x0, 37d0 <dwarf_lookup_pc+0x15c0>
    2b94:	add	x5, x1, #0x1
    2b98:	sub	x0, x0, #0x1
    2b9c:	stp	x5, x0, [sp, #424]
    2ba0:	cbnz	x0, 29c0 <dwarf_lookup_pc+0x7b0>
    2ba4:	ldr	w24, [sp, #464]
    2ba8:	mov	w0, w24
    2bac:	cbnz	w24, 38ac <dwarf_lookup_pc+0x169c>
    2bb0:	ldp	x4, x1, [sp, #408]
    2bb4:	add	x25, sp, #0x1d8
    2bb8:	mov	x0, x25
    2bbc:	adrp	x3, 0 <abbrev_compare>
    2bc0:	adrp	x2, 0 <abbrev_compare>
    2bc4:	add	x3, x3, #0x0
    2bc8:	add	x2, x2, #0x0
    2bcc:	sub	w5, w5, w1
    2bd0:	mov	x1, #0xc8                  	// #200
    2bd4:	bl	0 <snprintf>
    2bd8:	ldp	x3, x0, [sp, #448]
    2bdc:	mov	x1, x25
    2be0:	mov	w2, #0x0                   	// #0
    2be4:	blr	x3
    2be8:	mov	w0, #0x1                   	// #1
    2bec:	str	w0, [sp, #464]
    2bf0:	ldr	x1, [sp, #424]
    2bf4:	ldr	x0, [sp, #432]
    2bf8:	b	29dc <dwarf_lookup_pc+0x7cc>
    2bfc:	ldp	x19, x22, [sp, #152]
    2c00:	ldp	x20, x21, [sp, #168]
    2c04:	b	25c8 <dwarf_lookup_pc+0x3b8>
    2c08:	ldr	x24, [sp, #136]
    2c0c:	mov	x0, x24
    2c10:	bl	7d8 <read_uint64>
    2c14:	mov	x1, x0
    2c18:	mov	x0, x24
    2c1c:	str	x1, [sp, #368]
    2c20:	bl	620 <read_uint16>
    2c24:	and	w0, w0, #0xffff
    2c28:	str	w0, [sp, #280]
    2c2c:	sub	w0, w0, #0x2
    2c30:	cmp	w0, #0x2
    2c34:	b.hi	27a8 <dwarf_lookup_pc+0x598>  // b.pmore
    2c38:	ldr	x0, [sp, #136]
    2c3c:	bl	7d8 <read_uint64>
    2c40:	b	2848 <dwarf_lookup_pc+0x638>
    2c44:	mov	x6, x19
    2c48:	ldp	x19, x22, [sp, #152]
    2c4c:	ldp	x20, x21, [sp, #168]
    2c50:	ldr	x24, [sp, #432]
    2c54:	cbnz	x24, 2db4 <dwarf_lookup_pc+0xba4>
    2c58:	ldr	w0, [sp, #464]
    2c5c:	cbnz	w0, 25c8 <dwarf_lookup_pc+0x3b8>
    2c60:	ldp	x4, x5, [sp, #408]
    2c64:	add	x24, sp, #0x1d8
    2c68:	adrp	x3, 0 <abbrev_compare>
    2c6c:	mov	x0, x24
    2c70:	add	x3, x3, #0x0
    2c74:	adrp	x2, 0 <abbrev_compare>
    2c78:	sub	w5, w6, w5
    2c7c:	b	2958 <dwarf_lookup_pc+0x748>
    2c80:	lsl	x1, x3, #3
    2c84:	mov	x0, x19
    2c88:	ldp	x2, x3, [sp, #384]
    2c8c:	bl	0 <__asan_backtrace_alloc>
    2c90:	str	x0, [sp, #320]
    2c94:	cbnz	x0, 2a80 <dwarf_lookup_pc+0x870>
    2c98:	b	25c8 <dwarf_lookup_pc+0x3b8>
    2c9c:	ldr	w0, [sp, #464]
    2ca0:	b	2924 <dwarf_lookup_pc+0x714>
    2ca4:	ldp	x4, x5, [sp, #408]
    2ca8:	add	x24, sp, #0x1d8
    2cac:	mov	x0, x24
    2cb0:	adrp	x3, 0 <abbrev_compare>
    2cb4:	adrp	x2, 0 <abbrev_compare>
    2cb8:	add	x3, x3, #0x0
    2cbc:	add	x2, x2, #0x0
    2cc0:	sub	w5, w1, w5
    2cc4:	mov	x1, #0xc8                  	// #200
    2cc8:	bl	0 <snprintf>
    2ccc:	ldp	x3, x0, [sp, #448]
    2cd0:	mov	x1, x24
    2cd4:	mov	w2, #0x0                   	// #0
    2cd8:	blr	x3
    2cdc:	mov	w3, #0x1                   	// #1
    2ce0:	mov	x0, #0xffffffff            	// #4294967295
    2ce4:	mov	w2, #0x0                   	// #0
    2ce8:	str	w3, [sp, #464]
    2cec:	ldp	x1, x25, [sp, #424]
    2cf0:	b	2a10 <dwarf_lookup_pc+0x800>
    2cf4:	ldp	x4, x5, [sp, #408]
    2cf8:	add	x24, sp, #0x1d8
    2cfc:	mov	x0, x24
    2d00:	adrp	x3, 0 <abbrev_compare>
    2d04:	adrp	x2, 0 <abbrev_compare>
    2d08:	add	x3, x3, #0x0
    2d0c:	add	x2, x2, #0x0
    2d10:	sub	w5, w1, w5
    2d14:	mov	x1, #0xc8                  	// #200
    2d18:	bl	0 <snprintf>
    2d1c:	ldp	x3, x0, [sp, #448]
    2d20:	mov	x1, x24
    2d24:	mov	w2, #0x0                   	// #0
    2d28:	blr	x3
    2d2c:	mov	w3, #0x1                   	// #1
    2d30:	mov	w1, #0x0                   	// #0
    2d34:	str	w3, [sp, #464]
    2d38:	ldp	x2, x0, [sp, #424]
    2d3c:	b	29f4 <dwarf_lookup_pc+0x7e4>
    2d40:	ldr	w0, [sp, #464]
    2d44:	cbz	w0, 37dc <dwarf_lookup_pc+0x15cc>
    2d48:	str	wzr, [sp, #288]
    2d4c:	cbnz	w0, 2920 <dwarf_lookup_pc+0x710>
    2d50:	b	2978 <dwarf_lookup_pc+0x768>
    2d54:	ldp	x4, x1, [sp, #408]
    2d58:	add	x24, sp, #0x1d8
    2d5c:	mov	x0, x24
    2d60:	adrp	x3, 0 <abbrev_compare>
    2d64:	adrp	x2, 0 <abbrev_compare>
    2d68:	add	x3, x3, #0x0
    2d6c:	add	x2, x2, #0x0
    2d70:	sub	w5, w5, w1
    2d74:	mov	x1, #0xc8                  	// #200
    2d78:	bl	0 <snprintf>
    2d7c:	ldp	x3, x0, [sp, #448]
    2d80:	mov	x1, x24
    2d84:	mov	w2, #0x0                   	// #0
    2d88:	blr	x3
    2d8c:	mov	w3, #0x1                   	// #1
    2d90:	mov	w2, #0x0                   	// #0
    2d94:	str	w3, [sp, #464]
    2d98:	ldp	x1, x0, [sp, #424]
    2d9c:	b	2b78 <dwarf_lookup_pc+0x968>
    2da0:	ldr	w0, [sp, #464]
    2da4:	b	2938 <dwarf_lookup_pc+0x728>
    2da8:	ldr	w0, [sp, #464]
    2dac:	mov	x1, x2
    2db0:	b	292c <dwarf_lookup_pc+0x71c>
    2db4:	add	x25, x6, #0x1
    2db8:	sub	x0, x24, #0x1
    2dbc:	str	xzr, [sp, #328]
    2dc0:	add	x24, x6, x24
    2dc4:	stp	x25, x0, [sp, #424]
    2dc8:	cmp	x25, x24
    2dcc:	mov	x1, #0x0                   	// #0
    2dd0:	b.cs	2e64 <dwarf_lookup_pc+0xc54>  // b.hs, b.nlast
    2dd4:	ldrb	w0, [x25]
    2dd8:	cbz	w0, 2e64 <dwarf_lookup_pc+0xc54>
    2ddc:	sub	x1, x24, x25
    2de0:	mov	x0, x25
    2de4:	bl	0 <__asan_internal_strnlen>
    2de8:	add	x1, x0, #0x1
    2dec:	add	x2, x25, x1
    2df0:	ldrsb	w1, [x25, x1]
    2df4:	tbz	w1, #31, 37a0 <dwarf_lookup_pc+0x1590>
    2df8:	add	x25, x25, x0
    2dfc:	mov	x0, #0x1                   	// #1
    2e00:	add	x0, x0, #0x1
    2e04:	ldrsb	w1, [x25, x0]
    2e08:	tbnz	w1, #31, 2e00 <dwarf_lookup_pc+0xbf0>
    2e0c:	ldrsb	w1, [x2, x0]
    2e10:	add	x0, x2, x0
    2e14:	tbz	w1, #31, 3770 <dwarf_lookup_pc+0x1560>
    2e18:	sub	x2, x0, #0x1
    2e1c:	mov	x25, #0x1                   	// #1
    2e20:	add	x25, x25, #0x1
    2e24:	ldrsb	w1, [x2, x25]
    2e28:	tbnz	w1, #31, 2e20 <dwarf_lookup_pc+0xc10>
    2e2c:	ldrsb	w1, [x0, x25]
    2e30:	add	x0, x0, x25
    2e34:	tbz	w1, #31, 3768 <dwarf_lookup_pc+0x1558>
    2e38:	sub	x2, x0, #0x1
    2e3c:	mov	x25, #0x1                   	// #1
    2e40:	add	x25, x25, #0x1
    2e44:	ldrsb	w1, [x2, x25]
    2e48:	tbnz	w1, #31, 2e40 <dwarf_lookup_pc+0xc30>
    2e4c:	ldr	x1, [sp, #328]
    2e50:	add	x25, x0, x25
    2e54:	cmp	x24, x25
    2e58:	add	x1, x1, #0x1
    2e5c:	str	x1, [sp, #328]
    2e60:	b.hi	2dd4 <dwarf_lookup_pc+0xbc4>  // b.pmore
    2e64:	ldp	x2, x3, [sp, #384]
    2e68:	lsl	x1, x1, #3
    2e6c:	mov	x0, x19
    2e70:	bl	0 <__asan_backtrace_alloc>
    2e74:	str	x0, [sp, #336]
    2e78:	cbz	x0, 25c8 <dwarf_lookup_pc+0x3b8>
    2e7c:	ldr	x25, [sp, #424]
    2e80:	add	x24, sp, #0x198
    2e84:	mov	x1, #0x0                   	// #0
    2e88:	ldrb	w0, [x25]
    2e8c:	cbz	w0, 2fd8 <dwarf_lookup_pc+0xdc8>
    2e90:	stp	x22, x20, [sp, #168]
    2e94:	mov	x20, x25
    2e98:	mov	x25, x1
    2e9c:	stp	x27, x23, [sp, #152]
    2ea0:	str	x21, [sp, #184]
    2ea4:	nop
    2ea8:	ldr	w0, [sp, #464]
    2eac:	cbnz	w0, 3838 <dwarf_lookup_pc+0x1628>
    2eb0:	ldr	x1, [sp, #432]
    2eb4:	mov	x0, x20
    2eb8:	bl	0 <__asan_internal_strnlen>
    2ebc:	add	x1, x0, #0x1
    2ec0:	ldr	x2, [sp, #432]
    2ec4:	cmp	x1, x2
    2ec8:	b.ls	2f04 <dwarf_lookup_pc+0xcf4>  // b.plast
    2ecc:	ldr	w0, [sp, #464]
    2ed0:	ldp	x27, x23, [sp, #152]
    2ed4:	ldp	x22, x20, [sp, #168]
    2ed8:	ldr	x21, [sp, #184]
    2edc:	cbnz	w0, 25c8 <dwarf_lookup_pc+0x3b8>
    2ee0:	ldp	x4, x1, [sp, #408]
    2ee4:	add	x24, sp, #0x1d8
    2ee8:	ldr	x5, [sp, #424]
    2eec:	adrp	x3, 0 <abbrev_compare>
    2ef0:	mov	x0, x24
    2ef4:	add	x3, x3, #0x0
    2ef8:	adrp	x2, 0 <abbrev_compare>
    2efc:	sub	w5, w5, w1
    2f00:	b	2958 <dwarf_lookup_pc+0x748>
    2f04:	ldr	x3, [sp, #424]
    2f08:	sub	x2, x2, x1
    2f0c:	mov	x0, x24
    2f10:	add	x1, x3, x1
    2f14:	stp	x1, x2, [sp, #424]
    2f18:	bl	368 <read_uleb128>
    2f1c:	ldrb	w1, [x20]
    2f20:	cmp	w1, #0x2f
    2f24:	b.eq	35f4 <dwarf_lookup_pc+0x13e4>  // b.none
    2f28:	cbz	x0, 35e8 <dwarf_lookup_pc+0x13d8>
    2f2c:	ldr	x1, [sp, #312]
    2f30:	sub	x2, x0, #0x1
    2f34:	cmp	x2, x1
    2f38:	b.cs	3854 <dwarf_lookup_pc+0x1644>  // b.hs, b.nlast
    2f3c:	ldr	x1, [sp, #320]
    2f40:	add	x0, x1, x0, lsl #3
    2f44:	ldur	x23, [x0, #-8]
    2f48:	mov	x0, x23
    2f4c:	bl	0 <__asan_internal_strlen>
    2f50:	mov	x27, x0
    2f54:	mov	x0, x20
    2f58:	bl	0 <__asan_internal_strlen>
    2f5c:	ldp	x2, x3, [sp, #384]
    2f60:	mov	x22, x0
    2f64:	add	x1, x27, x22
    2f68:	mov	x0, x19
    2f6c:	add	x1, x1, #0x2
    2f70:	bl	0 <__asan_backtrace_alloc>
    2f74:	mov	x21, x0
    2f78:	cbz	x0, 3838 <dwarf_lookup_pc+0x1628>
    2f7c:	mov	x1, x23
    2f80:	mov	x2, x27
    2f84:	bl	0 <__asan_internal_memcpy>
    2f88:	mov	w3, #0x2f                  	// #47
    2f8c:	strb	w3, [x21, x27]
    2f90:	add	x0, x27, #0x1
    2f94:	add	x2, x22, #0x1
    2f98:	add	x0, x21, x0
    2f9c:	mov	x1, x20
    2fa0:	bl	0 <__asan_internal_memcpy>
    2fa4:	ldr	x0, [sp, #336]
    2fa8:	str	x21, [x0, x25]
    2fac:	mov	x0, x24
    2fb0:	bl	368 <read_uleb128>
    2fb4:	mov	x0, x24
    2fb8:	bl	368 <read_uleb128>
    2fbc:	ldr	x20, [sp, #424]
    2fc0:	add	x25, x25, #0x8
    2fc4:	ldrb	w0, [x20]
    2fc8:	cbnz	w0, 2ea8 <dwarf_lookup_pc+0xc98>
    2fcc:	ldp	x27, x23, [sp, #152]
    2fd0:	ldp	x22, x20, [sp, #168]
    2fd4:	ldr	x21, [sp, #184]
    2fd8:	ldr	w0, [sp, #464]
    2fdc:	cbnz	w0, 25c8 <dwarf_lookup_pc+0x3b8>
    2fe0:	ldr	x0, [sp, #328]
    2fe4:	cbz	x0, 3758 <dwarf_lookup_pc+0x1548>
    2fe8:	ldr	x0, [sp, #336]
    2fec:	ldr	x0, [x0]
    2ff0:	str	x0, [sp, #152]
    2ff4:	ldr	x1, [sp, #368]
    2ff8:	cbz	x1, 30b0 <dwarf_lookup_pc+0xea0>
    2ffc:	adrp	x0, 0 <abbrev_compare>
    3000:	add	x0, x0, #0x0
    3004:	adrp	x2, 0 <abbrev_compare>
    3008:	add	x2, x2, #0x0
    300c:	stp	x2, x0, [sp, #208]
    3010:	add	x2, sp, #0x1d8
    3014:	mov	x25, #0x0                   	// #0
    3018:	ldr	x0, [sp, #152]
    301c:	stp	x27, x23, [sp, #160]
    3020:	mov	w24, #0x0                   	// #0
    3024:	ldr	x27, [sp, #120]
    3028:	stp	x26, x22, [sp, #176]
    302c:	mov	x26, x0
    3030:	ldr	x23, [sp, #136]
    3034:	str	x2, [sp, #224]
    3038:	mov	w2, #0x1                   	// #1
    303c:	mov	w22, w2
    3040:	stp	x20, x21, [sp, #192]
    3044:	nop
    3048:	sub	x4, x1, #0x1
    304c:	ldr	x2, [sp, #360]
    3050:	ldr	w3, [sp, #300]
    3054:	add	x5, x2, #0x1
    3058:	stp	x5, x4, [sp, #360]
    305c:	ldrb	w0, [x2]
    3060:	cmp	w0, w3
    3064:	b.cs	3280 <dwarf_lookup_pc+0x1070>  // b.hs, b.nlast
    3068:	cbz	w0, 331c <dwarf_lookup_pc+0x110c>
    306c:	cmp	w0, #0x5
    3070:	b.eq	3228 <dwarf_lookup_pc+0x1018>  // b.none
    3074:	b.hi	3208 <dwarf_lookup_pc+0xff8>  // b.pmore
    3078:	cmp	w0, #0x3
    307c:	b.eq	33bc <dwarf_lookup_pc+0x11ac>  // b.none
    3080:	cmp	w0, #0x4
    3084:	b.ne	31c8 <dwarf_lookup_pc+0xfb8>  // b.any
    3088:	mov	x0, x23
    308c:	bl	368 <read_uleb128>
    3090:	cbnz	x0, 36bc <dwarf_lookup_pc+0x14ac>
    3094:	ldr	x1, [sp, #368]
    3098:	adrp	x26, 0 <abbrev_compare>
    309c:	add	x26, x26, #0x0
    30a0:	cbnz	x1, 3048 <dwarf_lookup_pc+0xe38>
    30a4:	ldp	x27, x23, [sp, #160]
    30a8:	ldp	x26, x22, [sp, #176]
    30ac:	ldp	x20, x21, [sp, #192]
    30b0:	ldr	w0, [sp, #400]
    30b4:	cbnz	w0, 25c8 <dwarf_lookup_pc+0x3b8>
    30b8:	ldr	x0, [sp, #272]
    30bc:	cbz	x0, 25c8 <dwarf_lookup_pc+0x3b8>
    30c0:	ldr	x24, [sp, #120]
    30c4:	mov	x3, x20
    30c8:	mov	x2, x22
    30cc:	mov	x0, x19
    30d0:	mov	x4, x24
    30d4:	mov	x1, #0x18                  	// #24
    30d8:	bl	0 <__asan_backtrace_vector_grow>
    30dc:	cbz	x0, 25c8 <dwarf_lookup_pc+0x3b8>
    30e0:	mov	x1, #0xffffffffffffffff    	// #-1
    30e4:	stp	x1, xzr, [x0]
    30e8:	mov	x3, x20
    30ec:	str	xzr, [x0, #16]
    30f0:	mov	x2, x22
    30f4:	mov	x1, x24
    30f8:	mov	x0, x19
    30fc:	bl	0 <__asan_backtrace_vector_release>
    3100:	cbz	w0, 25c8 <dwarf_lookup_pc+0x3b8>
    3104:	ldr	x0, [sp, #248]
    3108:	adrp	x3, 0 <abbrev_compare>
    310c:	ldr	x1, [sp, #272]
    3110:	add	x3, x3, #0x0
    3114:	mov	x2, #0x18                  	// #24
    3118:	str	x0, [sp, #128]
    311c:	bl	0 <__asan_backtrace_qsort>
    3120:	ldr	w0, [x19, #8]
    3124:	ldr	x1, [sp, #272]
    3128:	str	x1, [sp, #120]
    312c:	cbz	w0, 36ac <dwarf_lookup_pc+0x149c>
    3130:	add	x0, sp, #0x198
    3134:	mov	x2, #0x20                  	// #32
    3138:	mov	x24, x0
    313c:	mov	w1, #0x0                   	// #0
    3140:	str	xzr, [sp, #160]
    3144:	ldr	x25, [x27, #16]
    3148:	bl	0 <__asan_internal_memset>
    314c:	add	x4, sp, #0x1d8
    3150:	str	x21, [sp, #152]
    3154:	mov	x21, x24
    3158:	ldr	w2, [x28, #120]
    315c:	ldr	x24, [sp, #144]
    3160:	str	x23, [sp, #136]
    3164:	mov	x23, x4
    3168:	adrp	x1, 0 <abbrev_compare>
    316c:	ldp	x3, x0, [x25]
    3170:	add	x1, x1, #0x0
    3174:	ldr	x5, [x28, #56]
    3178:	stp	x1, x5, [sp, #472]
    317c:	stp	x3, x0, [sp, #488]
    3180:	str	w2, [sp, #504]
    3184:	str	x22, [sp, #512]
    3188:	str	x20, [sp, #520]
    318c:	str	wzr, [sp, #528]
    3190:	cbz	x0, 3600 <dwarf_lookup_pc+0x13f0>
    3194:	stp	x21, x21, [sp]
    3198:	mov	x7, x20
    319c:	mov	x6, x22
    31a0:	mov	x5, x24
    31a4:	mov	x4, x23
    31a8:	mov	x2, x25
    31ac:	mov	x1, x28
    31b0:	mov	x0, x19
    31b4:	mov	x3, #0x0                   	// #0
    31b8:	bl	1a50 <read_function_entry>
    31bc:	cbz	w0, 3698 <dwarf_lookup_pc+0x1488>
    31c0:	ldr	x0, [sp, #496]
    31c4:	b	3190 <dwarf_lookup_pc+0xf80>
    31c8:	cmp	w0, #0x1
    31cc:	b.eq	33d0 <dwarf_lookup_pc+0x11c0>  // b.none
    31d0:	cmp	w0, #0x2
    31d4:	b.ne	3534 <dwarf_lookup_pc+0x1324>  // b.any
    31d8:	mov	x0, x23
    31dc:	bl	368 <read_uleb128>
    31e0:	ldr	w2, [sp, #284]
    31e4:	add	x24, x0, w24, uxtw
    31e8:	ldr	w3, [sp, #288]
    31ec:	ldr	x1, [sp, #368]
    31f0:	mul	x0, x2, x24
    31f4:	udiv	x2, x24, x3
    31f8:	udiv	x0, x0, x3
    31fc:	msub	w24, w2, w3, w24
    3200:	add	x25, x25, x0
    3204:	b	30a0 <dwarf_lookup_pc+0xe90>
    3208:	cmp	w0, #0x9
    320c:	b.eq	3560 <dwarf_lookup_pc+0x1350>  // b.none
    3210:	b.ls	3238 <dwarf_lookup_pc+0x1028>  // b.plast
    3214:	cmp	w0, #0xb
    3218:	mov	x1, x4
    321c:	b.ls	30a0 <dwarf_lookup_pc+0xe90>  // b.plast
    3220:	cmp	w0, #0xc
    3224:	b.ne	3534 <dwarf_lookup_pc+0x1324>  // b.any
    3228:	mov	x0, x23
    322c:	bl	368 <read_uleb128>
    3230:	ldr	x1, [sp, #368]
    3234:	b	30a0 <dwarf_lookup_pc+0xe90>
    3238:	cmp	w0, #0x7
    323c:	mov	x1, x4
    3240:	b.ls	30a0 <dwarf_lookup_pc+0xe90>  // b.plast
    3244:	cmp	w0, #0x8
    3248:	b.ne	3534 <dwarf_lookup_pc+0x1324>  // b.any
    324c:	ldr	w4, [sp, #296]
    3250:	mov	w0, #0xff                  	// #255
    3254:	sub	w0, w0, w3
    3258:	ldr	w2, [sp, #284]
    325c:	ldr	w3, [sp, #288]
    3260:	udiv	w0, w0, w4
    3264:	add	w24, w0, w24
    3268:	mul	w0, w24, w2
    326c:	udiv	w2, w24, w3
    3270:	udiv	w0, w0, w3
    3274:	msub	w24, w2, w3, w24
    3278:	add	x25, x25, x0
    327c:	b	30a0 <dwarf_lookup_pc+0xe90>
    3280:	add	x1, sp, #0x124
    3284:	sub	w0, w0, w3
    3288:	ldp	w6, w5, [x1]
    328c:	ldp	w2, w3, [x1, #-8]
    3290:	udiv	w1, w0, w5
    3294:	add	w24, w1, w24
    3298:	msub	w0, w1, w5, w0
    329c:	add	w0, w0, w6
    32a0:	mul	w1, w24, w2
    32a4:	add	w22, w22, w0
    32a8:	udiv	w2, w24, w3
    32ac:	ldr	x0, [sp, #272]
    32b0:	udiv	w1, w1, w3
    32b4:	msub	w24, w2, w3, w24
    32b8:	ldp	x2, x3, [sp, #384]
    32bc:	add	x25, x25, x1
    32c0:	cbz	x0, 32e4 <dwarf_lookup_pc+0x10d4>
    32c4:	add	x0, x0, x0, lsl #1
    32c8:	ldr	x1, [sp, #248]
    32cc:	lsl	x0, x0, #3
    32d0:	sub	x0, x0, #0x18
    32d4:	add	x5, x1, x0
    32d8:	ldr	x0, [x1, x0]
    32dc:	cmp	x25, x0
    32e0:	b.eq	3400 <dwarf_lookup_pc+0x11f0>  // b.none
    32e4:	mov	x4, x27
    32e8:	mov	x0, x19
    32ec:	mov	x1, #0x18                  	// #24
    32f0:	bl	0 <__asan_backtrace_vector_grow>
    32f4:	cbz	x0, 33c8 <dwarf_lookup_pc+0x11b8>
    32f8:	ldr	x1, [x28, #16]
    32fc:	ldr	x2, [sp, #272]
    3300:	add	x1, x1, x25
    3304:	stp	x1, x26, [x0]
    3308:	add	x1, x2, #0x1
    330c:	stp	w22, w2, [x0, #16]
    3310:	str	x1, [sp, #272]
    3314:	ldr	x1, [sp, #368]
    3318:	b	30a0 <dwarf_lookup_pc+0xe90>
    331c:	mov	x0, x23
    3320:	bl	368 <read_uleb128>
    3324:	ldp	x5, x1, [sp, #360]
    3328:	mov	x21, x0
    332c:	cbnz	x1, 3354 <dwarf_lookup_pc+0x1144>
    3330:	ldr	w0, [sp, #400]
    3334:	cbz	w0, 3420 <dwarf_lookup_pc+0x1210>
    3338:	sub	x0, x21, #0x1
    333c:	cmp	x0, x1
    3340:	b.ls	3728 <dwarf_lookup_pc+0x1518>  // b.plast
    3344:	ldp	x27, x23, [sp, #160]
    3348:	ldp	x26, x22, [sp, #176]
    334c:	ldp	x20, x21, [sp, #192]
    3350:	b	2890 <dwarf_lookup_pc+0x680>
    3354:	sub	x1, x1, #0x1
    3358:	add	x20, x5, #0x1
    335c:	stp	x20, x1, [sp, #360]
    3360:	ldrb	w2, [x5]
    3364:	cmp	w2, #0x3
    3368:	b.eq	345c <dwarf_lookup_pc+0x124c>  // b.none
    336c:	b.hi	338c <dwarf_lookup_pc+0x117c>  // b.pmore
    3370:	cmp	w2, #0x1
    3374:	b.ne	3398 <dwarf_lookup_pc+0x1188>  // b.any
    3378:	mov	w22, w2
    337c:	mov	w24, #0x0                   	// #0
    3380:	mov	x25, #0x0                   	// #0
    3384:	ldr	x26, [sp, #152]
    3388:	b	30a0 <dwarf_lookup_pc+0xe90>
    338c:	cmp	w2, #0x4
    3390:	b.eq	3228 <dwarf_lookup_pc+0x1018>  // b.none
    3394:	b	3338 <dwarf_lookup_pc+0x1128>
    3398:	cmp	w2, #0x2
    339c:	b.ne	3338 <dwarf_lookup_pc+0x1128>  // b.any
    33a0:	ldr	x0, [sp, #128]
    33a4:	ldr	w1, [x0, #48]
    33a8:	mov	x0, x23
    33ac:	bl	8b0 <read_address>
    33b0:	mov	x25, x0
    33b4:	ldr	x1, [sp, #368]
    33b8:	b	30a0 <dwarf_lookup_pc+0xe90>
    33bc:	mov	x0, x23
    33c0:	bl	4b8 <read_sleb128>
    33c4:	add	w22, w22, w0
    33c8:	ldr	x1, [sp, #368]
    33cc:	b	30a0 <dwarf_lookup_pc+0xe90>
    33d0:	ldr	x0, [sp, #272]
    33d4:	ldp	x2, x3, [sp, #384]
    33d8:	cbz	x0, 32e4 <dwarf_lookup_pc+0x10d4>
    33dc:	add	x0, x0, x0, lsl #1
    33e0:	ldr	x1, [sp, #248]
    33e4:	lsl	x0, x0, #3
    33e8:	sub	x0, x0, #0x18
    33ec:	add	x5, x1, x0
    33f0:	ldr	x0, [x1, x0]
    33f4:	cmp	x0, x25
    33f8:	b.ne	32e4 <dwarf_lookup_pc+0x10d4>  // b.any
    33fc:	nop
    3400:	ldr	x0, [x5, #8]
    3404:	cmp	x0, x26
    3408:	b.ne	32e4 <dwarf_lookup_pc+0x10d4>  // b.any
    340c:	ldr	w0, [x5, #16]
    3410:	mov	x1, x4
    3414:	cmp	w22, w0
    3418:	b.ne	32e4 <dwarf_lookup_pc+0x10d4>  // b.any
    341c:	b	30a0 <dwarf_lookup_pc+0xe90>
    3420:	ldp	x3, x2, [sp, #208]
    3424:	mov	x1, #0xc8                  	// #200
    3428:	ldp	x4, x7, [sp, #344]
    342c:	ldr	x20, [sp, #224]
    3430:	mov	x0, x20
    3434:	sub	w5, w5, w7
    3438:	bl	0 <snprintf>
    343c:	ldp	x3, x0, [sp, #384]
    3440:	mov	x1, x20
    3444:	mov	w2, #0x0                   	// #0
    3448:	blr	x3
    344c:	mov	w0, #0x1                   	// #1
    3450:	str	w0, [sp, #400]
    3454:	ldr	x1, [sp, #368]
    3458:	b	3338 <dwarf_lookup_pc+0x1128>
    345c:	mov	x0, x20
    3460:	str	x5, [sp, #136]
    3464:	bl	0 <__asan_internal_strnlen>
    3468:	add	x1, x0, #0x1
    346c:	ldr	x2, [sp, #368]
    3470:	cmp	x1, x2
    3474:	b.hi	3344 <dwarf_lookup_pc+0x1134>  // b.pmore
    3478:	ldr	x3, [sp, #360]
    347c:	sub	x2, x2, x1
    3480:	mov	x0, x23
    3484:	add	x1, x3, x1
    3488:	stp	x1, x2, [sp, #360]
    348c:	bl	368 <read_uleb128>
    3490:	mov	x26, x0
    3494:	mov	x0, x23
    3498:	bl	368 <read_uleb128>
    349c:	mov	x0, x23
    34a0:	bl	368 <read_uleb128>
    34a4:	ldr	x5, [sp, #136]
    34a8:	ldrb	w0, [x5, #1]
    34ac:	cmp	w0, #0x2f
    34b0:	b.eq	371c <dwarf_lookup_pc+0x150c>  // b.none
    34b4:	cbnz	w26, 373c <dwarf_lookup_pc+0x152c>
    34b8:	ldr	x0, [sp, #128]
    34bc:	ldr	x5, [x0, #72]
    34c0:	mov	x0, x5
    34c4:	str	x5, [sp, #232]
    34c8:	bl	0 <__asan_internal_strlen>
    34cc:	mov	x21, x0
    34d0:	mov	x0, x20
    34d4:	bl	0 <__asan_internal_strlen>
    34d8:	mov	x1, x0
    34dc:	ldp	x2, x3, [sp, #384]
    34e0:	str	x1, [sp, #136]
    34e4:	add	x1, x21, x1
    34e8:	mov	x0, x19
    34ec:	add	x1, x1, #0x2
    34f0:	bl	0 <__asan_backtrace_alloc>
    34f4:	mov	x26, x0
    34f8:	cbz	x0, 38b8 <dwarf_lookup_pc+0x16a8>
    34fc:	ldr	x5, [sp, #232]
    3500:	mov	x2, x21
    3504:	mov	x1, x5
    3508:	bl	0 <__asan_internal_memcpy>
    350c:	ldr	x1, [sp, #136]
    3510:	mov	w0, #0x2f                  	// #47
    3514:	strb	w0, [x26, x21]
    3518:	add	x0, x21, #0x1
    351c:	add	x2, x1, #0x1
    3520:	add	x0, x26, x0
    3524:	mov	x1, x20
    3528:	bl	0 <__asan_internal_memcpy>
    352c:	ldr	x1, [sp, #368]
    3530:	b	30a0 <dwarf_lookup_pc+0xe90>
    3534:	ldr	x1, [sp, #304]
    3538:	sub	w0, w0, #0x1
    353c:	ldrb	w21, [x1, w0, uxtw]
    3540:	cbz	w21, 3798 <dwarf_lookup_pc+0x1588>
    3544:	nop
    3548:	mov	x0, x23
    354c:	bl	368 <read_uleb128>
    3550:	subs	w21, w21, #0x1
    3554:	b.ne	3548 <dwarf_lookup_pc+0x1338>  // b.any
    3558:	ldr	x1, [sp, #368]
    355c:	b	30a0 <dwarf_lookup_pc+0xe90>
    3560:	cmp	x4, #0x1
    3564:	b.hi	35bc <dwarf_lookup_pc+0x13ac>  // b.pmore
    3568:	ldr	w0, [sp, #400]
    356c:	mov	x1, x4
    3570:	cbz	w0, 357c <dwarf_lookup_pc+0x136c>
    3574:	mov	w24, #0x0                   	// #0
    3578:	b	30a0 <dwarf_lookup_pc+0xe90>
    357c:	ldp	x3, x2, [sp, #208]
    3580:	mov	x1, #0xc8                  	// #200
    3584:	ldp	x4, x6, [sp, #344]
    3588:	mov	w24, #0x0                   	// #0
    358c:	ldr	x20, [sp, #224]
    3590:	mov	x0, x20
    3594:	sub	w5, w5, w6
    3598:	bl	0 <snprintf>
    359c:	ldp	x3, x0, [sp, #384]
    35a0:	mov	x1, x20
    35a4:	mov	w2, #0x0                   	// #0
    35a8:	blr	x3
    35ac:	mov	w0, #0x1                   	// #1
    35b0:	str	w0, [sp, #400]
    35b4:	ldr	x1, [sp, #368]
    35b8:	b	30a0 <dwarf_lookup_pc+0xe90>
    35bc:	ldr	w0, [sp, #376]
    35c0:	sub	x1, x1, #0x3
    35c4:	add	x3, x2, #0x3
    35c8:	stp	x3, x1, [sp, #360]
    35cc:	cbz	w0, 36e0 <dwarf_lookup_pc+0x14d0>
    35d0:	ldrb	w0, [x2, #1]
    35d4:	mov	w24, #0x0                   	// #0
    35d8:	ldrb	w2, [x2, #2]
    35dc:	orr	w0, w2, w0, lsl #8
    35e0:	add	x25, x25, w0, uxth
    35e4:	b	30a0 <dwarf_lookup_pc+0xe90>
    35e8:	ldr	x0, [sp, #128]
    35ec:	ldr	x23, [x0, #72]
    35f0:	cbnz	x23, 2f48 <dwarf_lookup_pc+0xd38>
    35f4:	ldr	x0, [sp, #336]
    35f8:	str	x20, [x0, x25]
    35fc:	b	2fac <dwarf_lookup_pc+0xd9c>
    3600:	ldr	x5, [x21, #24]
    3604:	mov	x24, x21
    3608:	ldr	x23, [sp, #136]
    360c:	ldr	x21, [sp, #152]
    3610:	cbz	x5, 36a0 <dwarf_lookup_pc+0x1490>
    3614:	ldr	x0, [sp, #160]
    3618:	cbz	x0, 37a8 <dwarf_lookup_pc+0x1598>
    361c:	mov	x1, x0
    3620:	mov	x24, x0
    3624:	mov	x3, x20
    3628:	mov	x2, x22
    362c:	mov	x0, x19
    3630:	str	x5, [sp, #136]
    3634:	bl	0 <__asan_backtrace_vector_finish>
    3638:	mov	x25, x0
    363c:	cbz	x0, 36a0 <dwarf_lookup_pc+0x1490>
    3640:	ldr	x5, [sp, #136]
    3644:	str	xzr, [x24, #24]
    3648:	mov	x1, x5
    364c:	mov	x0, x25
    3650:	adrp	x3, 0 <abbrev_compare>
    3654:	mov	x2, #0x18                  	// #24
    3658:	add	x3, x3, #0x0
    365c:	str	x5, [sp, #136]
    3660:	bl	0 <__asan_backtrace_qsort>
    3664:	ldr	x5, [sp, #136]
    3668:	ldr	x2, [sp, #312]
    366c:	cbnz	x2, 36f8 <dwarf_lookup_pc+0x14e8>
    3670:	ldp	x2, x1, [sp, #328]
    3674:	mov	x4, x20
    3678:	mov	x3, x22
    367c:	mov	x0, x19
    3680:	str	x5, [sp, #136]
    3684:	lsl	x2, x2, #3
    3688:	bl	0 <__asan_backtrace_free>
    368c:	mov	w1, #0x1                   	// #1
    3690:	ldp	x24, x5, [sp, #128]
    3694:	b	261c <dwarf_lookup_pc+0x40c>
    3698:	ldr	x23, [sp, #136]
    369c:	ldr	x21, [sp, #152]
    36a0:	mov	x25, #0x0                   	// #0
    36a4:	mov	x5, #0x0                   	// #0
    36a8:	b	3668 <dwarf_lookup_pc+0x1458>
    36ac:	add	x24, x28, #0x80
    36b0:	str	x24, [sp, #160]
    36b4:	ldr	x25, [x27, #16]
    36b8:	b	314c <dwarf_lookup_pc+0xf3c>
    36bc:	ldr	x1, [sp, #328]
    36c0:	sub	x2, x0, #0x1
    36c4:	cmp	x2, x1
    36c8:	b.cs	3880 <dwarf_lookup_pc+0x1670>  // b.hs, b.nlast
    36cc:	ldr	x2, [sp, #336]
    36d0:	ldr	x1, [sp, #368]
    36d4:	add	x0, x2, x0, lsl #3
    36d8:	ldur	x26, [x0, #-8]
    36dc:	b	30a0 <dwarf_lookup_pc+0xe90>
    36e0:	ldrb	w0, [x2, #2]
    36e4:	mov	w24, #0x0                   	// #0
    36e8:	ldrb	w2, [x2, #1]
    36ec:	orr	w0, w2, w0, lsl #8
    36f0:	add	x25, x25, w0, uxth
    36f4:	b	30a0 <dwarf_lookup_pc+0xe90>
    36f8:	ldr	x1, [sp, #320]
    36fc:	lsl	x2, x2, #3
    3700:	mov	x4, x20
    3704:	mov	x3, x22
    3708:	mov	x0, x19
    370c:	str	x5, [sp, #136]
    3710:	bl	0 <__asan_backtrace_free>
    3714:	ldr	x5, [sp, #136]
    3718:	b	3670 <dwarf_lookup_pc+0x1460>
    371c:	mov	x26, x20
    3720:	ldr	x1, [sp, #368]
    3724:	b	30a0 <dwarf_lookup_pc+0xe90>
    3728:	ldr	x2, [sp, #360]
    372c:	sub	x1, x1, x0
    3730:	add	x0, x2, x0
    3734:	stp	x0, x1, [sp, #360]
    3738:	b	30a0 <dwarf_lookup_pc+0xe90>
    373c:	ldr	x0, [sp, #312]
    3740:	sub	w26, w26, #0x1
    3744:	cmp	x26, x0
    3748:	b.cs	38c8 <dwarf_lookup_pc+0x16b8>  // b.hs, b.nlast
    374c:	ldr	x0, [sp, #320]
    3750:	ldr	x5, [x0, x26, lsl #3]
    3754:	b	34c0 <dwarf_lookup_pc+0x12b0>
    3758:	adrp	x0, 0 <abbrev_compare>
    375c:	add	x0, x0, #0x0
    3760:	str	x0, [sp, #152]
    3764:	b	2ff4 <dwarf_lookup_pc+0xde4>
    3768:	mov	x25, #0x1                   	// #1
    376c:	b	2e4c <dwarf_lookup_pc+0xc3c>
    3770:	mov	x25, #0x1                   	// #1
    3774:	b	2e2c <dwarf_lookup_pc+0xc1c>
    3778:	cbz	x0, 2d40 <dwarf_lookup_pc+0xb30>
    377c:	sub	x0, x0, #0x1
    3780:	add	x2, x1, #0x1
    3784:	stp	x2, x0, [sp, #424]
    3788:	ldrb	w3, [x1]
    378c:	mov	x1, x2
    3790:	str	w3, [sp, #288]
    3794:	b	2b90 <dwarf_lookup_pc+0x980>
    3798:	mov	x1, x4
    379c:	b	30a0 <dwarf_lookup_pc+0xe90>
    37a0:	mov	x0, #0x1                   	// #1
    37a4:	b	2e0c <dwarf_lookup_pc+0xbfc>
    37a8:	mov	x3, x20
    37ac:	mov	x2, x22
    37b0:	add	x1, sp, #0x198
    37b4:	mov	x0, x19
    37b8:	str	x5, [sp, #136]
    37bc:	bl	0 <__asan_backtrace_vector_release>
    37c0:	cbz	w0, 36a0 <dwarf_lookup_pc+0x1490>
    37c4:	ldr	x25, [x24]
    37c8:	ldr	x5, [sp, #136]
    37cc:	b	3648 <dwarf_lookup_pc+0x1438>
    37d0:	ldr	w0, [sp, #464]
    37d4:	cbnz	w0, 2920 <dwarf_lookup_pc+0x710>
    37d8:	b	2978 <dwarf_lookup_pc+0x768>
    37dc:	ldp	x4, x5, [sp, #408]
    37e0:	add	x24, sp, #0x1d8
    37e4:	mov	x0, x24
    37e8:	adrp	x3, 0 <abbrev_compare>
    37ec:	adrp	x2, 0 <abbrev_compare>
    37f0:	add	x3, x3, #0x0
    37f4:	add	x2, x2, #0x0
    37f8:	sub	w5, w1, w5
    37fc:	mov	x1, #0xc8                  	// #200
    3800:	bl	0 <snprintf>
    3804:	ldp	x3, x0, [sp, #448]
    3808:	mov	x1, x24
    380c:	mov	w2, #0x0                   	// #0
    3810:	blr	x3
    3814:	mov	w1, #0x1                   	// #1
    3818:	mov	w3, #0x0                   	// #0
    381c:	str	w1, [sp, #464]
    3820:	ldp	x2, x0, [sp, #424]
    3824:	b	378c <dwarf_lookup_pc+0x157c>
    3828:	mov	x1, x5
    382c:	mov	w0, w2
    3830:	str	wzr, [sp, #292]
    3834:	b	2924 <dwarf_lookup_pc+0x714>
    3838:	ldp	x27, x23, [sp, #152]
    383c:	ldp	x22, x20, [sp, #168]
    3840:	ldr	x21, [sp, #184]
    3844:	b	25c8 <dwarf_lookup_pc+0x3b8>
    3848:	mov	x0, #0x0                   	// #0
    384c:	str	xzr, [sp, #320]
    3850:	b	2a80 <dwarf_lookup_pc+0x870>
    3854:	add	x24, sp, #0x1d8
    3858:	adrp	x3, 0 <abbrev_compare>
    385c:	mov	x0, x24
    3860:	add	x3, x3, #0x0
    3864:	adrp	x2, 0 <abbrev_compare>
    3868:	ldp	x27, x23, [sp, #152]
    386c:	ldp	x22, x20, [sp, #168]
    3870:	ldr	x21, [sp, #184]
    3874:	ldp	x4, x1, [sp, #344]
    3878:	ldr	x5, [sp, #360]
    387c:	b	27c4 <dwarf_lookup_pc+0x5b4>
    3880:	add	x24, sp, #0x1d8
    3884:	adrp	x3, 0 <abbrev_compare>
    3888:	mov	x0, x24
    388c:	add	x3, x3, #0x0
    3890:	adrp	x2, 0 <abbrev_compare>
    3894:	ldp	x27, x23, [sp, #160]
    3898:	ldp	x26, x22, [sp, #176]
    389c:	ldp	x20, x21, [sp, #192]
    38a0:	ldp	x4, x1, [sp, #344]
    38a4:	ldr	x5, [sp, #360]
    38a8:	b	27c4 <dwarf_lookup_pc+0x5b4>
    38ac:	mov	x1, x5
    38b0:	str	wzr, [sp, #292]
    38b4:	b	2924 <dwarf_lookup_pc+0x714>
    38b8:	ldp	x27, x23, [sp, #160]
    38bc:	ldp	x26, x22, [sp, #176]
    38c0:	ldp	x20, x21, [sp, #192]
    38c4:	b	25c8 <dwarf_lookup_pc+0x3b8>
    38c8:	add	x24, sp, #0x1d8
    38cc:	adrp	x3, 0 <abbrev_compare>
    38d0:	mov	x0, x24
    38d4:	add	x3, x3, #0x0
    38d8:	adrp	x2, 0 <abbrev_compare>
    38dc:	ldp	x27, x23, [sp, #160]
    38e0:	ldp	x26, x22, [sp, #176]
    38e4:	ldp	x20, x21, [sp, #192]
    38e8:	ldp	x4, x1, [sp, #344]
    38ec:	ldr	x5, [sp, #360]
    38f0:	b	27c4 <dwarf_lookup_pc+0x5b4>
    38f4:	nop

00000000000038f8 <dwarf_fileline>:
    38f8:	stp	x29, x30, [sp, #-96]!
    38fc:	mov	x29, sp
    3900:	stp	x23, x24, [sp, #48]
    3904:	mov	x24, x0
    3908:	ldr	w0, [x0, #8]
    390c:	stp	x19, x20, [sp, #16]
    3910:	mov	x23, x3
    3914:	mov	x20, x2
    3918:	stp	x21, x22, [sp, #32]
    391c:	mov	x22, x1
    3920:	mov	x21, x4
    3924:	cbnz	w0, 3988 <dwarf_fileline+0x90>
    3928:	ldr	x19, [x24, #32]
    392c:	cbz	x19, 39d0 <dwarf_fileline+0xd8>
    3930:	str	x25, [sp, #64]
    3934:	add	x25, sp, #0x5c
    3938:	b	394c <dwarf_fileline+0x54>
    393c:	ldr	w0, [sp, #92]
    3940:	cbnz	w0, 39fc <dwarf_fileline+0x104>
    3944:	ldr	x19, [x19]
    3948:	cbz	x19, 39cc <dwarf_fileline+0xd4>
    394c:	mov	x6, x25
    3950:	mov	x5, x21
    3954:	mov	x4, x23
    3958:	mov	x3, x20
    395c:	mov	x2, x22
    3960:	mov	x1, x19
    3964:	mov	x0, x24
    3968:	bl	2210 <dwarf_lookup_pc>
    396c:	cbz	w0, 393c <dwarf_fileline+0x44>
    3970:	ldp	x19, x20, [sp, #16]
    3974:	ldp	x21, x22, [sp, #32]
    3978:	ldp	x23, x24, [sp, #48]
    397c:	ldr	x25, [sp, #64]
    3980:	ldp	x29, x30, [sp], #96
    3984:	ret
    3988:	add	x19, x24, #0x20
    398c:	str	x25, [sp, #64]
    3990:	add	x25, sp, #0x5c
    3994:	b	39a8 <dwarf_fileline+0xb0>
    3998:	bl	2210 <dwarf_lookup_pc>
    399c:	cbnz	w0, 3970 <dwarf_fileline+0x78>
    39a0:	ldr	w0, [sp, #92]
    39a4:	cbnz	w0, 39fc <dwarf_fileline+0x104>
    39a8:	ldar	x19, [x19]
    39ac:	mov	x6, x25
    39b0:	mov	x5, x21
    39b4:	mov	x4, x23
    39b8:	mov	x3, x20
    39bc:	mov	x2, x22
    39c0:	mov	x1, x19
    39c4:	mov	x0, x24
    39c8:	cbnz	x19, 3998 <dwarf_fileline+0xa0>
    39cc:	ldr	x25, [sp, #64]
    39d0:	mov	x1, x22
    39d4:	mov	x0, x21
    39d8:	mov	x4, #0x0                   	// #0
    39dc:	mov	w3, #0x0                   	// #0
    39e0:	mov	x2, #0x0                   	// #0
    39e4:	blr	x20
    39e8:	ldp	x19, x20, [sp, #16]
    39ec:	ldp	x21, x22, [sp, #32]
    39f0:	ldp	x23, x24, [sp, #48]
    39f4:	ldp	x29, x30, [sp], #96
    39f8:	ret
    39fc:	mov	w0, #0x0                   	// #0
    3a00:	ldp	x19, x20, [sp, #16]
    3a04:	ldp	x21, x22, [sp, #32]
    3a08:	ldp	x23, x24, [sp, #48]
    3a0c:	ldr	x25, [sp, #64]
    3a10:	ldp	x29, x30, [sp], #96
    3a14:	ret

0000000000003a18 <__asan_backtrace_dwarf_add>:
    3a18:	sub	sp, sp, #0x380
    3a1c:	add	x8, sp, #0x178
    3a20:	stp	x29, x30, [sp, #48]
    3a24:	add	x29, sp, #0x30
    3a28:	stp	x4, x5, [sp, #312]
    3a2c:	add	x4, sp, #0x160
    3a30:	stp	x19, x20, [sp, #64]
    3a34:	mov	x19, x2
    3a38:	add	x20, sp, #0x198
    3a3c:	stp	x21, x22, [sp, #80]
    3a40:	mov	x22, x3
    3a44:	mov	x21, x4
    3a48:	stp	x23, x24, [sp, #96]
    3a4c:	stp	x25, x26, [sp, #112]
    3a50:	mov	x25, x0
    3a54:	mov	x0, x8
    3a58:	stp	x27, x28, [sp, #128]
    3a5c:	str	x7, [sp, #184]
    3a60:	stp	x8, x1, [sp, #232]
    3a64:	mov	w1, #0x0                   	// #0
    3a68:	str	x4, [sp, #256]
    3a6c:	str	x6, [sp, #272]
    3a70:	stp	x2, x3, [sp, #296]
    3a74:	mov	x2, #0x18                  	// #24
    3a78:	str	x20, [sp, #336]
    3a7c:	ldr	x28, [sp, #944]
    3a80:	ldr	x23, [sp, #952]
    3a84:	bl	0 <__asan_internal_memset>
    3a88:	mov	x2, #0x18                  	// #24
    3a8c:	mov	w1, #0x0                   	// #0
    3a90:	mov	x0, x20
    3a94:	bl	0 <__asan_internal_memset>
    3a98:	adrp	x3, 0 <abbrev_compare>
    3a9c:	add	x3, x3, #0x0
    3aa0:	stp	xzr, x3, [sp, #432]
    3aa4:	mov	x0, x21
    3aa8:	ldr	w3, [sp, #928]
    3aac:	mov	x2, #0x18                  	// #24
    3ab0:	mov	w1, #0x0                   	// #0
    3ab4:	str	xzr, [sp, #400]
    3ab8:	stp	x19, x19, [sp, #448]
    3abc:	str	x22, [sp, #464]
    3ac0:	str	w3, [sp, #472]
    3ac4:	stp	x28, x23, [sp, #480]
    3ac8:	str	wzr, [sp, #496]
    3acc:	bl	0 <__asan_internal_memset>
    3ad0:	ldr	x0, [sp, #464]
    3ad4:	str	x0, [sp, #176]
    3ad8:	cbz	x0, 4938 <__asan_backtrace_dwarf_add+0xf20>
    3adc:	adrp	x0, 0 <abbrev_compare>
    3ae0:	add	x0, x0, #0x0
    3ae4:	str	xzr, [sp, #176]
    3ae8:	str	xzr, [sp, #192]
    3aec:	str	x0, [sp, #248]
    3af0:	ldr	w0, [sp, #496]
    3af4:	cbnz	w0, 3b70 <__asan_backtrace_dwarf_add+0x158>
    3af8:	ldr	x1, [sp, #456]
    3afc:	add	x19, sp, #0x1b8
    3b00:	mov	x0, x19
    3b04:	str	x1, [sp, #216]
    3b08:	str	wzr, [sp, #344]
    3b0c:	bl	700 <read_uint32>
    3b10:	mov	w2, w0
    3b14:	str	x2, [sp, #152]
    3b18:	mov	x1, #0xffffffff            	// #4294967295
    3b1c:	cmp	x1, w0, uxtw
    3b20:	b.eq	4040 <__asan_backtrace_dwarf_add+0x628>  // b.none
    3b24:	add	x2, sp, #0x2d0
    3b28:	add	x3, sp, #0x2d0
    3b2c:	ldp	x0, x1, [x19, #16]
    3b30:	stp	x0, x1, [x2, #-200]
    3b34:	add	x0, sp, #0x1f8
    3b38:	str	x0, [sp, #160]
    3b3c:	ldp	x0, x1, [x19]
    3b40:	stp	x0, x1, [x2, #-216]
    3b44:	ldp	x0, x1, [x19, #32]
    3b48:	stp	x0, x1, [x3, #-184]
    3b4c:	ldp	x0, x1, [x19, #48]
    3b50:	stp	x0, x1, [x3, #-168]
    3b54:	ldr	x2, [sp, #152]
    3b58:	str	x2, [sp, #528]
    3b5c:	ldr	x1, [sp, #464]
    3b60:	cmp	x1, x2
    3b64:	b.cs	3c48 <__asan_backtrace_dwarf_add+0x230>  // b.hs, b.nlast
    3b68:	ldr	w0, [sp, #496]
    3b6c:	cbz	w0, 3fb0 <__asan_backtrace_dwarf_add+0x598>
    3b70:	ldr	x0, [sp, #176]
    3b74:	cbz	x0, 3c1c <__asan_backtrace_dwarf_add+0x204>
    3b78:	ldr	x20, [sp, #352]
    3b7c:	add	x21, x20, x0, lsl #3
    3b80:	ldr	x19, [x20]
    3b84:	ldr	x2, [x19, #88]
    3b88:	cbz	x2, 3bc4 <__asan_backtrace_dwarf_add+0x1ac>
    3b8c:	mov	x22, #0x0                   	// #0
    3b90:	ldr	x1, [x19, #96]
    3b94:	mov	x4, x23
    3b98:	mov	x3, x28
    3b9c:	mov	x0, x25
    3ba0:	add	x1, x1, x22, lsl #5
    3ba4:	add	x22, x22, #0x1
    3ba8:	ldp	x2, x1, [x1, #16]
    3bac:	lsl	x2, x2, #3
    3bb0:	bl	0 <__asan_backtrace_free>
    3bb4:	ldr	x2, [x19, #88]
    3bb8:	cmp	x22, x2
    3bbc:	b.cc	3b90 <__asan_backtrace_dwarf_add+0x178>  // b.lo, b.ul, b.last
    3bc0:	lsl	x2, x2, #5
    3bc4:	ldr	x1, [x19, #96]
    3bc8:	mov	x4, x23
    3bcc:	mov	x3, x28
    3bd0:	mov	x0, x25
    3bd4:	bl	0 <__asan_backtrace_free>
    3bd8:	ldr	x1, [x20], #8
    3bdc:	stp	xzr, xzr, [x19, #88]
    3be0:	mov	x4, x23
    3be4:	mov	x3, x28
    3be8:	mov	x0, x25
    3bec:	mov	x2, #0x88                  	// #136
    3bf0:	bl	0 <__asan_backtrace_free>
    3bf4:	cmp	x20, x21
    3bf8:	b.ne	3b80 <__asan_backtrace_dwarf_add+0x168>  // b.any
    3bfc:	ldp	x5, x4, [sp, #360]
    3c00:	mov	x3, x23
    3c04:	ldr	x1, [sp, #256]
    3c08:	mov	x2, x28
    3c0c:	mov	x0, x25
    3c10:	add	x4, x4, x5
    3c14:	stp	xzr, x4, [sp, #360]
    3c18:	bl	0 <__asan_backtrace_vector_release>
    3c1c:	ldr	x0, [sp, #400]
    3c20:	cbnz	x0, 4058 <__asan_backtrace_dwarf_add+0x640>
    3c24:	mov	w0, #0x0                   	// #0
    3c28:	ldp	x29, x30, [sp, #48]
    3c2c:	ldp	x19, x20, [sp, #64]
    3c30:	ldp	x21, x22, [sp, #80]
    3c34:	ldp	x23, x24, [sp, #96]
    3c38:	ldp	x25, x26, [sp, #112]
    3c3c:	ldp	x27, x28, [sp, #128]
    3c40:	add	sp, sp, #0x380
    3c44:	ret
    3c48:	ldr	x0, [sp, #456]
    3c4c:	sub	x1, x1, x2
    3c50:	str	x1, [sp, #464]
    3c54:	cmp	x2, #0x1
    3c58:	add	x1, x0, x2
    3c5c:	str	x1, [sp, #456]
    3c60:	b.hi	3cb0 <__asan_backtrace_dwarf_add+0x298>  // b.pmore
    3c64:	ldr	w1, [sp, #560]
    3c68:	ldp	x4, x5, [sp, #504]
    3c6c:	cbz	w1, 3ff8 <__asan_backtrace_dwarf_add+0x5e0>
    3c70:	add	x19, sp, #0x2b8
    3c74:	adrp	x20, 0 <abbrev_compare>
    3c78:	ldr	x0, [sp, #520]
    3c7c:	add	x2, x20, #0x0
    3c80:	mov	x1, #0xc8                  	// #200
    3c84:	adrp	x3, 0 <abbrev_compare>
    3c88:	sub	w5, w0, w5
    3c8c:	add	x3, x3, #0x0
    3c90:	mov	x0, x19
    3c94:	bl	0 <snprintf>
    3c98:	ldr	x3, [sp, #544]
    3c9c:	mov	x1, x19
    3ca0:	ldr	x0, [sp, #552]
    3ca4:	mov	w2, #0x0                   	// #0
    3ca8:	blr	x3
    3cac:	b	3b70 <__asan_backtrace_dwarf_add+0x158>
    3cb0:	add	x2, x0, #0x2
    3cb4:	str	x2, [sp, #520]
    3cb8:	ldr	x2, [sp, #152]
    3cbc:	ldr	w1, [sp, #536]
    3cc0:	sub	x2, x2, #0x2
    3cc4:	str	x2, [sp, #528]
    3cc8:	cbz	w1, 3f9c <__asan_backtrace_dwarf_add+0x584>
    3ccc:	ldrb	w1, [x0]
    3cd0:	ldrb	w0, [x0, #1]
    3cd4:	bfi	w0, w1, #8, #24
    3cd8:	str	w0, [sp, #172]
    3cdc:	ldr	w0, [sp, #172]
    3ce0:	sub	w0, w0, #0x2
    3ce4:	cmp	w0, #0x2
    3ce8:	b.hi	495c <__asan_backtrace_dwarf_add+0xf44>  // b.pmore
    3cec:	ldr	x4, [sp, #256]
    3cf0:	mov	x3, x23
    3cf4:	mov	x2, x28
    3cf8:	mov	x0, x25
    3cfc:	mov	x1, #0x8                   	// #8
    3d00:	bl	0 <__asan_backtrace_vector_grow>
    3d04:	mov	x19, x0
    3d08:	cbz	x0, 3b70 <__asan_backtrace_dwarf_add+0x158>
    3d0c:	mov	x3, x23
    3d10:	mov	x2, x28
    3d14:	mov	x0, x25
    3d18:	mov	x1, #0x88                  	// #136
    3d1c:	bl	0 <__asan_backtrace_alloc>
    3d20:	mov	x22, x0
    3d24:	cbz	x0, 3b70 <__asan_backtrace_dwarf_add+0x158>
    3d28:	ldr	x0, [sp, #176]
    3d2c:	str	x22, [x19]
    3d30:	mov	x2, #0x10                  	// #16
    3d34:	mov	w1, #0x0                   	// #0
    3d38:	add	x0, x0, #0x1
    3d3c:	str	x0, [sp, #176]
    3d40:	add	x0, x22, #0x58
    3d44:	bl	0 <__asan_internal_memset>
    3d48:	ldr	w0, [sp, #344]
    3d4c:	cbz	w0, 3f68 <__asan_backtrace_dwarf_add+0x550>
    3d50:	ldr	x0, [sp, #160]
    3d54:	bl	7d8 <read_uint64>
    3d58:	stp	xzr, xzr, [x22, #88]
    3d5c:	ldr	x1, [sp, #184]
    3d60:	cmp	x1, x0
    3d64:	b.ls	3f84 <__asan_backtrace_dwarf_add+0x56c>  // b.plast
    3d68:	ldr	x3, [sp, #272]
    3d6c:	mov	x4, x1
    3d70:	adrp	x1, 0 <abbrev_compare>
    3d74:	add	x1, x1, #0x0
    3d78:	add	x2, x3, x0
    3d7c:	sub	x0, x4, x0
    3d80:	add	x4, sp, #0x238
    3d84:	str	x28, [sp, #608]
    3d88:	str	x23, [sp, #616]
    3d8c:	add	x20, sp, #0x2b8
    3d90:	str	wzr, [sp, #624]
    3d94:	add	x26, sp, #0x278
    3d98:	stp	x2, x0, [x4, #16]
    3d9c:	add	x2, sp, #0x2d0
    3da0:	ldr	w0, [sp, #928]
    3da4:	str	w0, [sp, #600]
    3da8:	add	x0, sp, #0x2d0
    3dac:	stp	x1, x3, [x4]
    3db0:	add	x19, sp, #0x238
    3db4:	mov	x21, #0x0                   	// #0
    3db8:	ldp	x0, x1, [x0, #-152]
    3dbc:	stp	x0, x1, [x2, #-88]
    3dc0:	ldp	x0, x1, [x2, #-136]
    3dc4:	stp	x0, x1, [x2, #-72]
    3dc8:	ldp	x0, x1, [x2, #-120]
    3dcc:	stp	x0, x1, [x2, #-56]
    3dd0:	ldr	x24, [sp, #248]
    3dd4:	str	x22, [sp, #208]
    3dd8:	ldp	x0, x1, [x2, #-104]
    3ddc:	stp	x0, x1, [x2, #-40]
    3de0:	str	x19, [sp, #224]
    3de4:	str	x26, [sp, #280]
    3de8:	adrp	x6, 0 <abbrev_compare>
    3dec:	add	x22, x6, #0x0
    3df0:	str	x26, [sp, #200]
    3df4:	mov	x26, x21
    3df8:	mov	x21, x22
    3dfc:	mov	w2, #0x0                   	// #0
    3e00:	mov	w27, #0x0                   	// #0
    3e04:	mov	x19, #0x0                   	// #0
    3e08:	ldr	x0, [sp, #656]
    3e0c:	ldr	x1, [sp, #648]
    3e10:	cbnz	x0, 3e60 <__asan_backtrace_dwarf_add+0x448>
    3e14:	ldr	w0, [sp, #688]
    3e18:	cbnz	w0, 3b70 <__asan_backtrace_dwarf_add+0x158>
    3e1c:	ldr	x4, [sp, #632]
    3e20:	add	x19, sp, #0x2b8
    3e24:	ldr	x5, [sp, #640]
    3e28:	mov	x0, x19
    3e2c:	adrp	x3, 0 <abbrev_compare>
    3e30:	adrp	x2, 0 <abbrev_compare>
    3e34:	sub	w5, w1, w5
    3e38:	add	x3, x3, #0x0
    3e3c:	add	x2, x2, #0x0
    3e40:	mov	x1, #0xc8                  	// #200
    3e44:	bl	0 <snprintf>
    3e48:	ldr	x3, [sp, #672]
    3e4c:	mov	x1, x19
    3e50:	ldr	x0, [sp, #680]
    3e54:	mov	w2, #0x0                   	// #0
    3e58:	blr	x3
    3e5c:	b	3b70 <__asan_backtrace_dwarf_add+0x158>
    3e60:	sub	x0, x0, #0x1
    3e64:	add	x5, x1, #0x1
    3e68:	str	x5, [sp, #648]
    3e6c:	cmp	w27, #0x3f
    3e70:	str	x0, [sp, #656]
    3e74:	ldrb	w22, [x1]
    3e78:	b.hi	3f28 <__asan_backtrace_dwarf_add+0x510>  // b.pmore
    3e7c:	and	x0, x22, #0x7f
    3e80:	lsl	x0, x0, x27
    3e84:	orr	x19, x19, x0
    3e88:	add	w27, w27, #0x7
    3e8c:	tbnz	w22, #7, 3e08 <__asan_backtrace_dwarf_add+0x3f0>
    3e90:	mov	x21, x26
    3e94:	ldr	w27, [sp, #688]
    3e98:	ldr	x26, [sp, #200]
    3e9c:	cbz	x19, 4254 <__asan_backtrace_dwarf_add+0x83c>
    3ea0:	cbnz	w27, 3b70 <__asan_backtrace_dwarf_add+0x158>
    3ea4:	mov	x0, x26
    3ea8:	bl	368 <read_uleb128>
    3eac:	ldr	x0, [sp, #656]
    3eb0:	add	x21, x21, #0x1
    3eb4:	ldr	x6, [sp, #648]
    3eb8:	cbnz	x0, 415c <__asan_backtrace_dwarf_add+0x744>
    3ebc:	ldr	w1, [sp, #688]
    3ec0:	cbz	w1, 407c <__asan_backtrace_dwarf_add+0x664>
    3ec4:	mov	x27, x26
    3ec8:	mov	x26, x23
    3ecc:	mov	x23, x21
    3ed0:	adrp	x22, 0 <abbrev_compare>
    3ed4:	add	x22, x22, #0x0
    3ed8:	mov	x2, x22
    3edc:	mov	x7, #0x0                   	// #0
    3ee0:	mov	x22, x7
    3ee4:	mov	x7, x27
    3ee8:	mov	x27, x26
    3eec:	mov	x26, x25
    3ef0:	mov	x25, x23
    3ef4:	mov	x23, x2
    3ef8:	mov	w1, #0x0                   	// #0
    3efc:	mov	w19, #0x0                   	// #0
    3f00:	cbnz	x0, 4120 <__asan_backtrace_dwarf_add+0x708>
    3f04:	ldr	w0, [sp, #688]
    3f08:	mov	x21, x25
    3f0c:	mov	x23, x27
    3f10:	mov	x25, x26
    3f14:	mov	x26, x7
    3f18:	cbz	w0, 40d8 <__asan_backtrace_dwarf_add+0x6c0>
    3f1c:	mov	x0, x26
    3f20:	bl	368 <read_uleb128>
    3f24:	b	3de8 <__asan_backtrace_dwarf_add+0x3d0>
    3f28:	cbnz	w2, 3e88 <__asan_backtrace_dwarf_add+0x470>
    3f2c:	ldr	x4, [sp, #632]
    3f30:	mov	x3, x24
    3f34:	ldr	x6, [sp, #640]
    3f38:	mov	x2, x21
    3f3c:	mov	x1, #0xc8                  	// #200
    3f40:	mov	x0, x20
    3f44:	sub	w5, w5, w6
    3f48:	bl	0 <snprintf>
    3f4c:	ldr	x4, [sp, #672]
    3f50:	mov	w2, #0x0                   	// #0
    3f54:	ldr	x0, [sp, #680]
    3f58:	mov	x1, x20
    3f5c:	blr	x4
    3f60:	mov	w2, #0x1                   	// #1
    3f64:	b	3e88 <__asan_backtrace_dwarf_add+0x470>
    3f68:	ldr	x0, [sp, #160]
    3f6c:	bl	700 <read_uint32>
    3f70:	stp	xzr, xzr, [x22, #88]
    3f74:	mov	w0, w0
    3f78:	ldr	x1, [sp, #184]
    3f7c:	cmp	x1, x0
    3f80:	b.hi	3d68 <__asan_backtrace_dwarf_add+0x350>  // b.pmore
    3f84:	mov	x0, x23
    3f88:	adrp	x1, 0 <abbrev_compare>
    3f8c:	mov	w2, #0x0                   	// #0
    3f90:	add	x1, x1, #0x0
    3f94:	blr	x28
    3f98:	b	3b70 <__asan_backtrace_dwarf_add+0x158>
    3f9c:	ldrb	w1, [x0, #1]
    3fa0:	ldrb	w0, [x0]
    3fa4:	bfi	w0, w1, #8, #24
    3fa8:	str	w0, [sp, #172]
    3fac:	b	3cdc <__asan_backtrace_dwarf_add+0x2c4>
    3fb0:	ldp	x4, x1, [sp, #440]
    3fb4:	add	x19, sp, #0x2b8
    3fb8:	ldr	x5, [sp, #456]
    3fbc:	mov	x0, x19
    3fc0:	adrp	x3, 0 <abbrev_compare>
    3fc4:	adrp	x2, 0 <abbrev_compare>
    3fc8:	add	x3, x3, #0x0
    3fcc:	add	x2, x2, #0x0
    3fd0:	sub	w5, w5, w1
    3fd4:	mov	x1, #0xc8                  	// #200
    3fd8:	bl	0 <snprintf>
    3fdc:	ldp	x3, x0, [sp, #480]
    3fe0:	mov	x1, x19
    3fe4:	mov	w2, #0x0                   	// #0
    3fe8:	blr	x3
    3fec:	mov	w0, #0x1                   	// #1
    3ff0:	str	w0, [sp, #496]
    3ff4:	b	3b70 <__asan_backtrace_dwarf_add+0x158>
    3ff8:	add	x19, sp, #0x2b8
    3ffc:	sub	w5, w0, w5
    4000:	mov	x1, #0xc8                  	// #200
    4004:	mov	x0, x19
    4008:	adrp	x3, 0 <abbrev_compare>
    400c:	adrp	x20, 0 <abbrev_compare>
    4010:	add	x3, x3, #0x0
    4014:	add	x2, x20, #0x0
    4018:	bl	0 <snprintf>
    401c:	ldr	x3, [sp, #544]
    4020:	mov	x1, x19
    4024:	ldr	x0, [sp, #552]
    4028:	mov	w2, #0x0                   	// #0
    402c:	blr	x3
    4030:	mov	w0, #0x1                   	// #1
    4034:	str	w0, [sp, #560]
    4038:	ldp	x4, x5, [sp, #504]
    403c:	b	3c78 <__asan_backtrace_dwarf_add+0x260>
    4040:	mov	x0, x19
    4044:	bl	7d8 <read_uint64>
    4048:	mov	w1, #0x1                   	// #1
    404c:	str	x0, [sp, #152]
    4050:	str	w1, [sp, #344]
    4054:	b	3b24 <__asan_backtrace_dwarf_add+0x10c>
    4058:	ldp	x5, x4, [sp, #384]
    405c:	mov	x3, x23
    4060:	ldr	x1, [sp, #232]
    4064:	mov	x2, x28
    4068:	mov	x0, x25
    406c:	add	x4, x4, x5
    4070:	stp	xzr, x4, [sp, #384]
    4074:	bl	0 <__asan_backtrace_vector_release>
    4078:	b	3c24 <__asan_backtrace_dwarf_add+0x20c>
    407c:	ldr	x4, [sp, #632]
    4080:	mov	x1, #0xc8                  	// #200
    4084:	ldr	x5, [sp, #640]
    4088:	mov	x0, x20
    408c:	adrp	x3, 0 <abbrev_compare>
    4090:	adrp	x2, 0 <abbrev_compare>
    4094:	sub	w5, w6, w5
    4098:	add	x3, x3, #0x0
    409c:	add	x2, x2, #0x0
    40a0:	bl	0 <snprintf>
    40a4:	ldr	x3, [sp, #672]
    40a8:	mov	x1, x20
    40ac:	ldr	x0, [sp, #680]
    40b0:	mov	w2, #0x0                   	// #0
    40b4:	mov	x27, x26
    40b8:	mov	x26, x23
    40bc:	mov	x23, x21
    40c0:	blr	x3
    40c4:	mov	w0, #0x1                   	// #1
    40c8:	str	w0, [sp, #688]
    40cc:	ldr	x6, [sp, #648]
    40d0:	ldr	x0, [sp, #656]
    40d4:	b	3ed0 <__asan_backtrace_dwarf_add+0x4b8>
    40d8:	ldr	x4, [sp, #632]
    40dc:	mov	x1, #0xc8                  	// #200
    40e0:	ldr	x5, [sp, #640]
    40e4:	mov	x0, x20
    40e8:	adrp	x3, 0 <abbrev_compare>
    40ec:	adrp	x2, 0 <abbrev_compare>
    40f0:	add	x3, x3, #0x0
    40f4:	add	x2, x2, #0x0
    40f8:	sub	w5, w6, w5
    40fc:	bl	0 <snprintf>
    4100:	ldr	x3, [sp, #672]
    4104:	mov	x1, x20
    4108:	ldr	x0, [sp, #680]
    410c:	mov	w2, #0x0                   	// #0
    4110:	blr	x3
    4114:	mov	w0, #0x1                   	// #1
    4118:	str	w0, [sp, #688]
    411c:	b	3f1c <__asan_backtrace_dwarf_add+0x504>
    4120:	sub	x0, x0, #0x1
    4124:	add	x5, x6, #0x1
    4128:	str	x5, [sp, #648]
    412c:	cmp	w19, #0x3f
    4130:	str	x0, [sp, #656]
    4134:	ldrb	w21, [x6]
    4138:	b.hi	417c <__asan_backtrace_dwarf_add+0x764>  // b.pmore
    413c:	and	x0, x21, #0x7f
    4140:	lsl	x0, x0, x19
    4144:	orr	x22, x22, x0
    4148:	add	w19, w19, #0x7
    414c:	tbz	w21, #7, 41c8 <__asan_backtrace_dwarf_add+0x7b0>
    4150:	ldr	x6, [sp, #648]
    4154:	ldr	x0, [sp, #656]
    4158:	b	3f00 <__asan_backtrace_dwarf_add+0x4e8>
    415c:	add	x6, x6, #0x1
    4160:	sub	x0, x0, #0x1
    4164:	mov	x27, x26
    4168:	mov	x26, x23
    416c:	mov	x23, x21
    4170:	str	x6, [sp, #648]
    4174:	str	x0, [sp, #656]
    4178:	b	3ed0 <__asan_backtrace_dwarf_add+0x4b8>
    417c:	cbnz	w1, 4148 <__asan_backtrace_dwarf_add+0x730>
    4180:	ldr	x4, [sp, #632]
    4184:	mov	x3, x24
    4188:	ldr	x6, [sp, #640]
    418c:	mov	x2, x23
    4190:	mov	x1, #0xc8                  	// #200
    4194:	mov	x0, x20
    4198:	sub	w5, w5, w6
    419c:	str	x7, [sp, #200]
    41a0:	bl	0 <snprintf>
    41a4:	add	w19, w19, #0x7
    41a8:	ldr	x4, [sp, #672]
    41ac:	mov	x1, x20
    41b0:	ldr	x0, [sp, #680]
    41b4:	mov	w2, #0x0                   	// #0
    41b8:	blr	x4
    41bc:	mov	w1, #0x1                   	// #1
    41c0:	ldr	x7, [sp, #200]
    41c4:	tbnz	w21, #7, 4150 <__asan_backtrace_dwarf_add+0x738>
    41c8:	mov	x23, x25
    41cc:	mov	x25, x26
    41d0:	mov	x26, x27
    41d4:	mov	x27, x7
    41d8:	cbz	x22, 49e0 <__asan_backtrace_dwarf_add+0xfc8>
    41dc:	ldr	x6, [sp, #648]
    41e0:	adrp	x22, 0 <abbrev_compare>
    41e4:	ldr	x0, [sp, #656]
    41e8:	add	x22, x22, #0x0
    41ec:	mov	w1, #0x0                   	// #0
    41f0:	mov	w19, #0x0                   	// #0
    41f4:	nop
    41f8:	cbnz	x0, 496c <__asan_backtrace_dwarf_add+0xf54>
    41fc:	ldr	w1, [sp, #688]
    4200:	cbnz	w1, 3ed0 <__asan_backtrace_dwarf_add+0x4b8>
    4204:	ldr	x4, [sp, #632]
    4208:	mov	x1, #0xc8                  	// #200
    420c:	ldr	x5, [sp, #640]
    4210:	mov	x0, x20
    4214:	adrp	x3, 0 <abbrev_compare>
    4218:	adrp	x2, 0 <abbrev_compare>
    421c:	sub	w5, w6, w5
    4220:	add	x3, x3, #0x0
    4224:	add	x2, x2, #0x0
    4228:	bl	0 <snprintf>
    422c:	ldr	x3, [sp, #672]
    4230:	mov	x1, x20
    4234:	ldr	x0, [sp, #680]
    4238:	mov	w2, #0x0                   	// #0
    423c:	blr	x3
    4240:	mov	w0, #0x1                   	// #1
    4244:	str	w0, [sp, #688]
    4248:	ldr	x6, [sp, #648]
    424c:	ldr	x0, [sp, #656]
    4250:	b	3ed0 <__asan_backtrace_dwarf_add+0x4b8>
    4254:	str	x19, [sp, #328]
    4258:	ldr	x22, [sp, #208]
    425c:	ldr	x19, [sp, #224]
    4260:	cbnz	w27, 3b70 <__asan_backtrace_dwarf_add+0x158>
    4264:	cbz	x21, 4544 <__asan_backtrace_dwarf_add+0xb2c>
    4268:	lsl	x20, x21, #5
    426c:	mov	x3, x23
    4270:	mov	x1, x20
    4274:	mov	x2, x28
    4278:	mov	x0, x25
    427c:	bl	0 <__asan_backtrace_alloc>
    4280:	str	x0, [x22, #96]
    4284:	cbz	x0, 3b70 <__asan_backtrace_dwarf_add+0x158>
    4288:	str	x21, [x22, #88]
    428c:	mov	x2, x20
    4290:	mov	w1, #0x0                   	// #0
    4294:	bl	0 <__asan_internal_memset>
    4298:	ldr	w0, [sp, #624]
    429c:	cbnz	w0, 4930 <__asan_backtrace_dwarf_add+0xf18>
    42a0:	str	x22, [sp, #264]
    42a4:	add	x21, sp, #0x2b8
    42a8:	str	x28, [sp, #944]
    42ac:	mov	x26, #0x0                   	// #0
    42b0:	ldr	x28, [sp, #248]
    42b4:	str	x25, [sp, #288]
    42b8:	ldr	x22, [sp, #280]
    42bc:	str	w27, [sp, #348]
    42c0:	str	x23, [sp, #952]
    42c4:	nop
    42c8:	mov	x0, x19
    42cc:	bl	368 <read_uleb128>
    42d0:	mov	x25, x0
    42d4:	cbz	x0, 451c <__asan_backtrace_dwarf_add+0xb04>
    42d8:	mov	x0, x19
    42dc:	bl	368 <read_uleb128>
    42e0:	ldr	x1, [sp, #592]
    42e4:	mov	x27, x0
    42e8:	ldr	x0, [sp, #584]
    42ec:	cbnz	x1, 4504 <__asan_backtrace_dwarf_add+0xaec>
    42f0:	ldr	w24, [sp, #624]
    42f4:	cbz	w24, 4864 <__asan_backtrace_dwarf_add+0xe4c>
    42f8:	mov	w24, #0x0                   	// #0
    42fc:	ldp	x0, x1, [x19, #16]
    4300:	stp	x0, x1, [x22, #16]
    4304:	mov	x20, #0x0                   	// #0
    4308:	ldp	x2, x3, [x19]
    430c:	stp	x2, x3, [x22]
    4310:	ldp	x2, x3, [x19, #32]
    4314:	stp	x2, x3, [x22, #32]
    4318:	ldp	x2, x3, [x19, #48]
    431c:	stp	x2, x3, [x22, #48]
    4320:	ldr	x1, [sp, #656]
    4324:	stp	x19, x22, [sp, #200]
    4328:	mov	x19, x20
    432c:	mov	x22, x28
    4330:	adrp	x20, 0 <abbrev_compare>
    4334:	add	x20, x20, #0x0
    4338:	mov	w7, w24
    433c:	mov	x24, x19
    4340:	mov	x19, x20
    4344:	mov	w2, #0x0                   	// #0
    4348:	mov	x28, #0x0                   	// #0
    434c:	mov	w23, #0x0                   	// #0
    4350:	cbnz	x1, 44c8 <__asan_backtrace_dwarf_add+0xab0>
    4354:	ldr	w1, [sp, #688]
    4358:	mov	x20, x24
    435c:	mov	x28, x22
    4360:	mov	w24, w7
    4364:	ldp	x19, x22, [sp, #200]
    4368:	cbz	w1, 4418 <__asan_backtrace_dwarf_add+0xa00>
    436c:	cbnz	x20, 4460 <__asan_backtrace_dwarf_add+0xa48>
    4370:	mov	x23, #0x0                   	// #0
    4374:	mov	x0, x19
    4378:	bl	368 <read_uleb128>
    437c:	mov	x0, x19
    4380:	bl	368 <read_uleb128>
    4384:	ldr	x0, [sp, #264]
    4388:	ldr	w3, [sp, #624]
    438c:	ldr	x1, [x0, #96]
    4390:	add	x0, x1, x26
    4394:	str	x25, [x1, x26]
    4398:	add	x26, x26, #0x20
    439c:	stp	w27, w24, [x0, #8]
    43a0:	stp	x20, x23, [x0, #16]
    43a4:	cbz	w3, 42c8 <__asan_backtrace_dwarf_add+0x8b0>
    43a8:	ldr	x22, [sp, #264]
    43ac:	ldr	x25, [sp, #288]
    43b0:	ldr	x28, [sp, #944]
    43b4:	ldr	x23, [sp, #952]
    43b8:	ldr	x2, [x22, #88]
    43bc:	cbz	x2, 4400 <__asan_backtrace_dwarf_add+0x9e8>
    43c0:	ldr	x19, [sp, #328]
    43c4:	b	43cc <__asan_backtrace_dwarf_add+0x9b4>
    43c8:	ldr	x1, [x22, #96]
    43cc:	add	x1, x1, x19, lsl #5
    43d0:	mov	x4, x23
    43d4:	mov	x3, x28
    43d8:	mov	x0, x25
    43dc:	add	x19, x19, #0x1
    43e0:	ldp	x2, x1, [x1, #16]
    43e4:	lsl	x2, x2, #3
    43e8:	bl	0 <__asan_backtrace_free>
    43ec:	ldr	x2, [x22, #88]
    43f0:	cmp	x19, x2
    43f4:	b.cc	43c8 <__asan_backtrace_dwarf_add+0x9b0>  // b.lo, b.ul, b.last
    43f8:	ldr	x1, [x22, #96]
    43fc:	lsl	x2, x2, #5
    4400:	mov	x4, x23
    4404:	mov	x3, x28
    4408:	mov	x0, x25
    440c:	bl	0 <__asan_backtrace_free>
    4410:	stp	xzr, xzr, [x22, #88]
    4414:	b	3b70 <__asan_backtrace_dwarf_add+0x158>
    4418:	ldr	x4, [sp, #632]
    441c:	mov	x1, #0xc8                  	// #200
    4420:	ldr	x5, [sp, #640]
    4424:	adrp	x3, 0 <abbrev_compare>
    4428:	adrp	x2, 0 <abbrev_compare>
    442c:	add	x3, x3, #0x0
    4430:	sub	w5, w0, w5
    4434:	add	x2, x2, #0x0
    4438:	mov	x0, x21
    443c:	bl	0 <snprintf>
    4440:	ldr	x3, [sp, #672]
    4444:	mov	x1, x21
    4448:	ldr	x0, [sp, #680]
    444c:	mov	w2, #0x0                   	// #0
    4450:	blr	x3
    4454:	mov	w0, #0x1                   	// #1
    4458:	str	w0, [sp, #688]
    445c:	cbz	x20, 4370 <__asan_backtrace_dwarf_add+0x958>
    4460:	ldr	x0, [sp, #288]
    4464:	lsl	x1, x20, #3
    4468:	ldr	x2, [sp, #944]
    446c:	ldr	x3, [sp, #952]
    4470:	bl	0 <__asan_backtrace_alloc>
    4474:	cbz	x0, 4944 <__asan_backtrace_dwarf_add+0xf2c>
    4478:	mov	x23, x19
    447c:	mov	x20, #0x0                   	// #0
    4480:	str	x21, [sp, #200]
    4484:	mov	x21, x0
    4488:	b	44a0 <__asan_backtrace_dwarf_add+0xa88>
    448c:	fmov	d0, x19
    4490:	mov	v0.d[1], x0
    4494:	xtn	v0.2s, v0.2d
    4498:	str	d0, [x21, x20, lsl #3]
    449c:	add	x20, x20, #0x1
    44a0:	mov	x0, x23
    44a4:	bl	368 <read_uleb128>
    44a8:	mov	x19, x0
    44ac:	mov	x0, x23
    44b0:	bl	368 <read_uleb128>
    44b4:	cbnz	x19, 448c <__asan_backtrace_dwarf_add+0xa74>
    44b8:	mov	x19, x23
    44bc:	mov	x23, x21
    44c0:	ldr	x21, [sp, #200]
    44c4:	b	4384 <__asan_backtrace_dwarf_add+0x96c>
    44c8:	sub	x1, x1, #0x1
    44cc:	add	x5, x0, #0x1
    44d0:	str	x5, [sp, #648]
    44d4:	cmp	w23, #0x3f
    44d8:	str	x1, [sp, #656]
    44dc:	ldrb	w20, [x0]
    44e0:	b.hi	4790 <__asan_backtrace_dwarf_add+0xd78>  // b.pmore
    44e4:	and	x0, x20, #0x7f
    44e8:	lsl	x0, x0, x23
    44ec:	orr	x28, x28, x0
    44f0:	add	w23, w23, #0x7
    44f4:	tbz	w20, #7, 47dc <__asan_backtrace_dwarf_add+0xdc4>
    44f8:	ldr	x0, [sp, #648]
    44fc:	ldr	x1, [sp, #656]
    4500:	b	4350 <__asan_backtrace_dwarf_add+0x938>
    4504:	sub	x1, x1, #0x1
    4508:	str	x1, [sp, #592]
    450c:	add	x1, x0, #0x1
    4510:	str	x1, [sp, #584]
    4514:	ldrb	w24, [x0]
    4518:	b	42fc <__asan_backtrace_dwarf_add+0x8e4>
    451c:	ldr	x22, [sp, #264]
    4520:	adrp	x3, 0 <abbrev_compare>
    4524:	ldr	w27, [sp, #348]
    4528:	add	x3, x3, #0x0
    452c:	mov	x2, #0x20                  	// #32
    4530:	ldp	x1, x0, [x22, #88]
    4534:	ldr	x25, [sp, #288]
    4538:	ldr	x28, [sp, #944]
    453c:	ldr	x23, [sp, #952]
    4540:	bl	0 <__asan_backtrace_qsort>
    4544:	ldr	x1, [sp, #528]
    4548:	ldr	x5, [sp, #520]
    454c:	cbnz	x1, 4770 <__asan_backtrace_dwarf_add+0xd58>
    4550:	ldr	w0, [sp, #560]
    4554:	add	x19, sp, #0x2b8
    4558:	cbz	w0, 48ac <__asan_backtrace_dwarf_add+0xe94>
    455c:	ldr	w8, [sp, #344]
    4560:	ldr	x4, [sp, #232]
    4564:	cmp	w8, #0x0
    4568:	ldr	x0, [sp, #936]
    456c:	stp	x4, x19, [sp, #32]
    4570:	mov	x4, #0x4                   	// #4
    4574:	stp	x0, x28, [sp]
    4578:	mov	x0, #0xc                   	// #12
    457c:	csel	x0, x0, x4, ne  // ne = any
    4580:	stp	x23, x22, [sp, #16]
    4584:	ldr	w7, [sp, #928]
    4588:	ldr	x4, [sp, #152]
    458c:	stp	x5, x1, [x22]
    4590:	ldr	x1, [sp, #192]
    4594:	add	x0, x0, x4
    4598:	ldr	x2, [sp, #216]
    459c:	add	x0, x1, x0
    45a0:	stp	x1, x0, [x22, #24]
    45a4:	sub	x3, x5, x2
    45a8:	str	x3, [x22, #16]
    45ac:	str	x0, [sp, #192]
    45b0:	ldr	w0, [sp, #172]
    45b4:	ldr	x2, [sp, #160]
    45b8:	str	w0, [x22, #40]
    45bc:	ldr	x1, [sp, #240]
    45c0:	stp	w8, w27, [x22, #44]
    45c4:	ldr	x5, [sp, #896]
    45c8:	str	xzr, [x22, #56]
    45cc:	ldr	x6, [sp, #904]
    45d0:	stp	xzr, xzr, [x22, #64]
    45d4:	mov	x0, x25
    45d8:	ldr	x3, [sp, #912]
    45dc:	str	xzr, [x22, #80]
    45e0:	ldr	x4, [sp, #920]
    45e4:	stp	xzr, xzr, [x22, #104]
    45e8:	stp	xzr, xzr, [x22, #120]
    45ec:	bl	14e8 <find_address_ranges>
    45f0:	cbz	w0, 3b70 <__asan_backtrace_dwarf_add+0x158>
    45f4:	ldr	w0, [sp, #560]
    45f8:	cbnz	w0, 3b70 <__asan_backtrace_dwarf_add+0x158>
    45fc:	ldr	x0, [sp, #464]
    4600:	cbnz	x0, 3af0 <__asan_backtrace_dwarf_add+0xd8>
    4604:	ldr	w0, [sp, #496]
    4608:	cbnz	w0, 3b70 <__asan_backtrace_dwarf_add+0x158>
    460c:	ldr	x1, [sp, #232]
    4610:	add	x4, sp, #0x200
    4614:	ldp	x2, x3, [sp, #352]
    4618:	ldr	x0, [sp, #368]
    461c:	str	x0, [sp, #424]
    4620:	ldr	x0, [sp, #176]
    4624:	stp	x2, x3, [x4, #-104]
    4628:	mov	x3, x23
    462c:	mov	x2, x28
    4630:	str	x0, [sp, #432]
    4634:	mov	x0, x25
    4638:	bl	0 <__asan_backtrace_vector_release>
    463c:	cbz	w0, 3c24 <__asan_backtrace_dwarf_add+0x20c>
    4640:	ldr	x1, [sp, #336]
    4644:	mov	x3, x23
    4648:	mov	x2, x28
    464c:	mov	x0, x25
    4650:	bl	0 <__asan_backtrace_vector_release>
    4654:	cbz	w0, 3c24 <__asan_backtrace_dwarf_add+0x20c>
    4658:	ldp	x20, x24, [sp, #400]
    465c:	mov	x2, #0x18                  	// #24
    4660:	ldr	x21, [sp, #376]
    4664:	adrp	x3, 0 <abbrev_compare>
    4668:	add	x3, x3, #0x0
    466c:	mov	x0, x21
    4670:	mov	x1, x20
    4674:	ldr	x22, [sp, #432]
    4678:	bl	0 <__asan_backtrace_qsort>
    467c:	mov	x3, x23
    4680:	mov	x2, x28
    4684:	mov	x0, x25
    4688:	mov	x1, #0xa0                  	// #160
    468c:	bl	0 <__asan_backtrace_alloc>
    4690:	mov	x19, x0
    4694:	cbz	x0, 3c24 <__asan_backtrace_dwarf_add+0x20c>
    4698:	ldr	x3, [sp, #936]
    469c:	stp	xzr, x3, [x19]
    46a0:	add	x0, x0, #0x80
    46a4:	ldr	x3, [sp, #240]
    46a8:	str	x3, [x19, #16]
    46ac:	ldr	x3, [sp, #296]
    46b0:	str	x3, [x19, #56]
    46b4:	ldr	x3, [sp, #304]
    46b8:	str	x3, [x19, #64]
    46bc:	ldr	x3, [sp, #312]
    46c0:	str	x3, [x19, #72]
    46c4:	ldr	x3, [sp, #320]
    46c8:	str	x3, [x19, #80]
    46cc:	ldr	x3, [sp, #896]
    46d0:	str	x3, [x19, #88]
    46d4:	ldr	x3, [sp, #904]
    46d8:	str	x3, [x19, #96]
    46dc:	ldr	x3, [sp, #912]
    46e0:	str	x3, [x19, #104]
    46e4:	ldr	x3, [sp, #920]
    46e8:	str	x3, [x19, #112]
    46ec:	ldr	w3, [sp, #928]
    46f0:	mov	x2, #0x20                  	// #32
    46f4:	stp	x21, x20, [x19, #24]
    46f8:	mov	w1, #0x0                   	// #0
    46fc:	stp	x24, x22, [x19, #40]
    4700:	str	w3, [x19, #120]
    4704:	bl	0 <__asan_internal_memset>
    4708:	ldr	x0, [sp, #968]
    470c:	cbz	x0, 4714 <__asan_backtrace_dwarf_add+0xcfc>
    4710:	str	x19, [x0]
    4714:	ldr	w0, [x25, #8]
    4718:	add	x2, x25, #0x20
    471c:	cbnz	w0, 4918 <__asan_backtrace_dwarf_add+0xf00>
    4720:	ldr	x0, [x25, #32]
    4724:	cbz	x0, 4738 <__asan_backtrace_dwarf_add+0xd20>
    4728:	mov	x1, x0
    472c:	ldr	x0, [x0]
    4730:	cbnz	x0, 4728 <__asan_backtrace_dwarf_add+0xd10>
    4734:	mov	x2, x1
    4738:	str	x19, [x2]
    473c:	ldr	x2, [sp, #960]
    4740:	adrp	x1, 0 <abbrev_compare>
    4744:	add	x1, x1, #0x0
    4748:	mov	w0, #0x1                   	// #1
    474c:	ldp	x29, x30, [sp, #48]
    4750:	str	x1, [x2]
    4754:	ldp	x19, x20, [sp, #64]
    4758:	ldp	x21, x22, [sp, #80]
    475c:	ldp	x23, x24, [sp, #96]
    4760:	ldp	x25, x26, [sp, #112]
    4764:	ldp	x27, x28, [sp, #128]
    4768:	add	sp, sp, #0x380
    476c:	ret
    4770:	add	x0, x5, #0x1
    4774:	sub	x1, x1, #0x1
    4778:	str	x0, [sp, #520]
    477c:	add	x19, sp, #0x2b8
    4780:	str	x1, [sp, #528]
    4784:	ldrb	w27, [x5]
    4788:	mov	x5, x0
    478c:	b	455c <__asan_backtrace_dwarf_add+0xb44>
    4790:	cbnz	w2, 44f0 <__asan_backtrace_dwarf_add+0xad8>
    4794:	ldr	x4, [sp, #632]
    4798:	mov	x3, x22
    479c:	ldr	x6, [sp, #640]
    47a0:	mov	x2, x19
    47a4:	mov	x1, #0xc8                  	// #200
    47a8:	mov	x0, x21
    47ac:	sub	w5, w5, w6
    47b0:	str	w7, [sp, #224]
    47b4:	bl	0 <snprintf>
    47b8:	add	w23, w23, #0x7
    47bc:	ldr	x4, [sp, #672]
    47c0:	mov	w2, #0x0                   	// #0
    47c4:	ldr	x0, [sp, #680]
    47c8:	mov	x1, x21
    47cc:	blr	x4
    47d0:	ldr	w7, [sp, #224]
    47d4:	mov	w2, #0x1                   	// #1
    47d8:	tbnz	w20, #7, 44f8 <__asan_backtrace_dwarf_add+0xae0>
    47dc:	mov	x19, x24
    47e0:	mov	w24, w7
    47e4:	cbz	x28, 4a64 <__asan_backtrace_dwarf_add+0x104c>
    47e8:	ldr	x0, [sp, #648]
    47ec:	adrp	x2, 0 <abbrev_compare>
    47f0:	ldr	x1, [sp, #656]
    47f4:	add	x19, x19, #0x1
    47f8:	add	x20, x2, #0x0
    47fc:	mov	w23, #0x0                   	// #0
    4800:	mov	w2, #0x0                   	// #0
    4804:	nop
    4808:	cbnz	x1, 49f0 <__asan_backtrace_dwarf_add+0xfd8>
    480c:	ldr	w2, [sp, #688]
    4810:	cbnz	w2, 4330 <__asan_backtrace_dwarf_add+0x918>
    4814:	ldr	x4, [sp, #632]
    4818:	mov	x1, #0xc8                  	// #200
    481c:	ldr	x5, [sp, #640]
    4820:	adrp	x3, 0 <abbrev_compare>
    4824:	adrp	x2, 0 <abbrev_compare>
    4828:	add	x3, x3, #0x0
    482c:	sub	w5, w0, w5
    4830:	add	x2, x2, #0x0
    4834:	mov	x0, x21
    4838:	bl	0 <snprintf>
    483c:	ldr	x3, [sp, #672]
    4840:	mov	x1, x21
    4844:	ldr	x0, [sp, #680]
    4848:	mov	w2, #0x0                   	// #0
    484c:	blr	x3
    4850:	mov	w0, #0x1                   	// #1
    4854:	str	w0, [sp, #688]
    4858:	ldr	x0, [sp, #648]
    485c:	ldr	x1, [sp, #656]
    4860:	b	4330 <__asan_backtrace_dwarf_add+0x918>
    4864:	ldr	x4, [sp, #568]
    4868:	mov	x1, #0xc8                  	// #200
    486c:	ldr	x5, [sp, #576]
    4870:	adrp	x3, 0 <abbrev_compare>
    4874:	adrp	x2, 0 <abbrev_compare>
    4878:	add	x3, x3, #0x0
    487c:	sub	w5, w0, w5
    4880:	add	x2, x2, #0x0
    4884:	mov	x0, x21
    4888:	bl	0 <snprintf>
    488c:	ldr	x3, [sp, #608]
    4890:	mov	x1, x21
    4894:	ldr	x0, [sp, #616]
    4898:	mov	w2, #0x0                   	// #0
    489c:	blr	x3
    48a0:	mov	w0, #0x1                   	// #1
    48a4:	str	w0, [sp, #624]
    48a8:	b	42fc <__asan_backtrace_dwarf_add+0x8e4>
    48ac:	ldp	x4, x0, [sp, #504]
    48b0:	mov	x1, #0xc8                  	// #200
    48b4:	adrp	x3, 0 <abbrev_compare>
    48b8:	adrp	x2, 0 <abbrev_compare>
    48bc:	add	x3, x3, #0x0
    48c0:	add	x2, x2, #0x0
    48c4:	mov	w27, #0x0                   	// #0
    48c8:	sub	w5, w5, w0
    48cc:	mov	x0, x19
    48d0:	bl	0 <snprintf>
    48d4:	ldr	x3, [sp, #544]
    48d8:	mov	x1, x19
    48dc:	ldr	x0, [sp, #552]
    48e0:	mov	w2, #0x0                   	// #0
    48e4:	blr	x3
    48e8:	mov	w0, #0x1                   	// #1
    48ec:	str	w0, [sp, #560]
    48f0:	ldr	x5, [sp, #520]
    48f4:	ldr	x1, [sp, #528]
    48f8:	b	455c <__asan_backtrace_dwarf_add+0xb44>
    48fc:	ldxr	x0, [x1]
    4900:	cbnz	x0, 490c <__asan_backtrace_dwarf_add+0xef4>
    4904:	stlxr	w3, x19, [x1]
    4908:	cbnz	w3, 48fc <__asan_backtrace_dwarf_add+0xee4>
    490c:	dmb	ish
    4910:	cmp	x0, #0x0
    4914:	b.eq	473c <__asan_backtrace_dwarf_add+0xd24>  // b.none
    4918:	mov	x1, x2
    491c:	b	4924 <__asan_backtrace_dwarf_add+0xf0c>
    4920:	mov	x1, x0
    4924:	ldar	x0, [x1]
    4928:	cbnz	x0, 4920 <__asan_backtrace_dwarf_add+0xf08>
    492c:	b	48fc <__asan_backtrace_dwarf_add+0xee4>
    4930:	ldr	x1, [x22, #96]
    4934:	b	43b8 <__asan_backtrace_dwarf_add+0x9a0>
    4938:	ldr	w0, [sp, #496]
    493c:	cbz	w0, 460c <__asan_backtrace_dwarf_add+0xbf4>
    4940:	b	3c1c <__asan_backtrace_dwarf_add+0x204>
    4944:	ldr	x22, [sp, #264]
    4948:	ldr	x25, [sp, #288]
    494c:	ldr	x1, [x22, #96]
    4950:	ldr	x28, [sp, #944]
    4954:	ldr	x23, [sp, #952]
    4958:	b	43b8 <__asan_backtrace_dwarf_add+0x9a0>
    495c:	add	x19, sp, #0x2b8
    4960:	adrp	x20, 0 <abbrev_compare>
    4964:	ldp	x4, x5, [sp, #504]
    4968:	b	3c78 <__asan_backtrace_dwarf_add+0x260>
    496c:	sub	x0, x0, #0x1
    4970:	add	x5, x6, #0x1
    4974:	str	x5, [sp, #648]
    4978:	cmp	w19, #0x3f
    497c:	str	x0, [sp, #656]
    4980:	ccmp	w1, #0x0, #0x0, hi  // hi = pmore
    4984:	ldrb	w21, [x6]
    4988:	b.eq	499c <__asan_backtrace_dwarf_add+0xf84>  // b.none
    498c:	mov	x6, x5
    4990:	add	w19, w19, #0x7
    4994:	tbnz	w21, #7, 41f8 <__asan_backtrace_dwarf_add+0x7e0>
    4998:	b	3ed0 <__asan_backtrace_dwarf_add+0x4b8>
    499c:	ldr	x4, [sp, #632]
    49a0:	mov	x3, x24
    49a4:	ldr	x6, [sp, #640]
    49a8:	mov	x2, x22
    49ac:	mov	x1, #0xc8                  	// #200
    49b0:	mov	x0, x20
    49b4:	sub	w5, w5, w6
    49b8:	bl	0 <snprintf>
    49bc:	ldr	x4, [sp, #672]
    49c0:	mov	x1, x20
    49c4:	ldr	x0, [sp, #680]
    49c8:	mov	w2, #0x0                   	// #0
    49cc:	blr	x4
    49d0:	mov	w1, #0x1                   	// #1
    49d4:	ldr	x6, [sp, #648]
    49d8:	ldr	x0, [sp, #656]
    49dc:	b	4990 <__asan_backtrace_dwarf_add+0xf78>
    49e0:	mov	x21, x23
    49e4:	mov	x23, x26
    49e8:	mov	x26, x27
    49ec:	b	3f1c <__asan_backtrace_dwarf_add+0x504>
    49f0:	sub	x1, x1, #0x1
    49f4:	add	x5, x0, #0x1
    49f8:	str	x5, [sp, #648]
    49fc:	cmp	w23, #0x3f
    4a00:	str	x1, [sp, #656]
    4a04:	ccmp	w2, #0x0, #0x0, hi  // hi = pmore
    4a08:	ldrb	w28, [x0]
    4a0c:	b.eq	4a20 <__asan_backtrace_dwarf_add+0x1008>  // b.none
    4a10:	mov	x0, x5
    4a14:	add	w23, w23, #0x7
    4a18:	tbnz	w28, #7, 4808 <__asan_backtrace_dwarf_add+0xdf0>
    4a1c:	b	4330 <__asan_backtrace_dwarf_add+0x918>
    4a20:	ldr	x4, [sp, #632]
    4a24:	mov	x3, x22
    4a28:	ldr	x6, [sp, #640]
    4a2c:	mov	x2, x20
    4a30:	mov	x1, #0xc8                  	// #200
    4a34:	mov	x0, x21
    4a38:	sub	w5, w5, w6
    4a3c:	bl	0 <snprintf>
    4a40:	ldr	x4, [sp, #672]
    4a44:	mov	x1, x21
    4a48:	ldr	x0, [sp, #680]
    4a4c:	mov	w2, #0x0                   	// #0
    4a50:	blr	x4
    4a54:	mov	w2, #0x1                   	// #1
    4a58:	ldr	x0, [sp, #648]
    4a5c:	ldr	x1, [sp, #656]
    4a60:	b	4a14 <__asan_backtrace_dwarf_add+0xffc>
    4a64:	mov	x20, x19
    4a68:	mov	x28, x22
    4a6c:	ldp	x19, x22, [sp, #200]
    4a70:	b	436c <__asan_backtrace_dwarf_add+0x954>

elf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <elf_nodebug>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	x0, x4
       8:	mov	w2, #0xffffffff            	// #-1
       c:	mov	x29, sp
      10:	adrp	x1, 0 <elf_nodebug>
      14:	add	x1, x1, #0x0
      18:	blr	x3
      1c:	mov	w0, #0x0                   	// #0
      20:	ldp	x29, x30, [sp], #16
      24:	ret

0000000000000028 <elf_nosyms>:
      28:	mov	x0, x4
      2c:	mov	x16, x3
      30:	adrp	x1, 0 <elf_nodebug>
      34:	mov	w2, #0xffffffff            	// #-1
      38:	add	x1, x1, #0x0
      3c:	br	x16

0000000000000040 <elf_symbol_compare>:
      40:	ldr	x2, [x0, #8]
      44:	mov	w3, #0xffffffff            	// #-1
      48:	ldr	x1, [x1, #8]
      4c:	cmp	x2, x1
      50:	cset	w0, hi  // hi = pmore
      54:	csel	w0, w0, w3, cs  // cs = hs, nlast
      58:	ret
      5c:	nop

0000000000000060 <elf_zlib_verify_checksum>:
      60:	stp	x29, x30, [sp, #-48]!
      64:	mov	x12, x2
      68:	mov	x17, #0x15af                	// #5551
      6c:	mov	x29, sp
      70:	cmp	x2, x17
      74:	ldrb	w18, [x0]
      78:	ldrb	w2, [x0, #1]
      7c:	mov	x11, x1
      80:	ldrb	w1, [x0, #2]
      84:	ldrb	w0, [x0, #3]
      88:	orr	w18, w2, w18, lsl #8
      8c:	orr	w18, w1, w18, lsl #8
      90:	orr	w18, w0, w18, lsl #8
      94:	b.ls	310 <elf_zlib_verify_checksum+0x2b0>  // b.plast
      98:	mov	x16, #0x15b0                	// #5552
      9c:	mov	w14, #0x8071                	// #32881
      a0:	add	x10, x11, x16
      a4:	mov	w9, #0x0                   	// #0
      a8:	mov	w5, #0x1                   	// #1
      ac:	mov	x15, #0xffffffffffffea50    	// #-5552
      b0:	movk	w14, #0x8007, lsl #16
      b4:	mov	w13, #0xfff1                	// #65521
      b8:	stp	x19, x20, [sp, #16]
      bc:	stp	x21, x22, [sp, #32]
      c0:	add	x2, x10, x15
      c4:	nop
      c8:	ldrb	w3, [x2]
      cc:	add	x2, x2, #0x10
      d0:	ldurb	w4, [x2, #-15]
      d4:	mov	x11, x10
      d8:	ldurb	w0, [x2, #-14]
      dc:	add	w3, w3, w5
      e0:	ldurb	w1, [x2, #-13]
      e4:	add	w4, w4, w3
      e8:	add	w0, w0, w4
      ec:	ldurb	w8, [x2, #-12]
      f0:	ldurb	w22, [x2, #-11]
      f4:	add	w1, w1, w0
      f8:	ldurb	w7, [x2, #-10]
      fc:	add	w8, w8, w1
     100:	ldurb	w21, [x2, #-9]
     104:	add	w22, w22, w8
     108:	ldurb	w6, [x2, #-8]
     10c:	add	w7, w7, w22
     110:	ldurb	w19, [x2, #-7]
     114:	add	w21, w21, w7
     118:	ldurb	w5, [x2, #-6]
     11c:	add	w6, w6, w21
     120:	ldurb	w30, [x2, #-5]
     124:	add	w19, w19, w6
     128:	ldurb	w20, [x2, #-3]
     12c:	add	w3, w3, w4
     130:	add	w1, w0, w1
     134:	ldurb	w4, [x2, #-4]
     138:	add	w5, w5, w19
     13c:	add	w1, w1, w3
     140:	ldurb	w3, [x2, #-2]
     144:	add	w30, w30, w5
     148:	add	w8, w8, w22
     14c:	add	w0, w7, w21
     150:	add	w4, w4, w30
     154:	add	w1, w1, w8
     158:	add	w1, w1, w0
     15c:	add	w7, w20, w4
     160:	add	w0, w6, w19
     164:	ldurb	w6, [x2, #-1]
     168:	add	w5, w5, w30
     16c:	add	w3, w3, w7
     170:	add	w0, w1, w0
     174:	add	w4, w4, w7
     178:	add	w0, w0, w5
     17c:	add	w5, w6, w3
     180:	add	w0, w0, w4
     184:	add	w3, w3, w5
     188:	add	w0, w0, w3
     18c:	cmp	x10, x2
     190:	add	w9, w9, w0
     194:	b.ne	c8 <elf_zlib_verify_checksum+0x68>  // b.any
     198:	umull	x1, w5, w14
     19c:	add	x12, x12, x15
     1a0:	umull	x0, w9, w14
     1a4:	cmp	x12, x17
     1a8:	add	x10, x10, x16
     1ac:	lsr	x1, x1, #47
     1b0:	lsr	x0, x0, #47
     1b4:	msub	w5, w1, w13, w5
     1b8:	msub	w9, w0, w13, w9
     1bc:	b.hi	c0 <elf_zlib_verify_checksum+0x60>  // b.pmore
     1c0:	ldp	x19, x20, [sp, #16]
     1c4:	ldp	x21, x22, [sp, #32]
     1c8:	cmp	x12, #0xf
     1cc:	b.ls	2b0 <elf_zlib_verify_checksum+0x250>  // b.plast
     1d0:	sub	x7, x12, #0x10
     1d4:	and	x7, x7, #0xfffffffffffffff0
     1d8:	add	x7, x7, #0x10
     1dc:	add	x7, x11, x7
     1e0:	ldrb	w1, [x11]
     1e4:	add	x11, x11, #0x10
     1e8:	ldurb	w8, [x11, #-15]
     1ec:	ldurb	w0, [x11, #-14]
     1f0:	add	w1, w1, w5
     1f4:	ldurb	w2, [x11, #-13]
     1f8:	add	w8, w8, w1
     1fc:	ldurb	w6, [x11, #-12]
     200:	add	w0, w0, w8
     204:	ldurb	w15, [x11, #-11]
     208:	add	w2, w2, w0
     20c:	ldurb	w5, [x11, #-10]
     210:	add	w6, w6, w2
     214:	ldurb	w14, [x11, #-9]
     218:	add	w15, w15, w6
     21c:	ldurb	w3, [x11, #-8]
     220:	add	w5, w5, w15
     224:	ldurb	w13, [x11, #-7]
     228:	add	w14, w14, w5
     22c:	ldurb	w4, [x11, #-6]
     230:	add	w3, w3, w14
     234:	ldurb	w10, [x11, #-5]
     238:	add	w1, w1, w8
     23c:	add	w13, w13, w3
     240:	ldurb	w8, [x11, #-3]
     244:	add	w0, w0, w2
     248:	ldurb	w2, [x11, #-4]
     24c:	add	w4, w4, w13
     250:	add	w0, w0, w1
     254:	ldurb	w1, [x11, #-2]
     258:	add	w6, w6, w15
     25c:	add	w10, w10, w4
     260:	add	w0, w0, w6
     264:	add	w5, w5, w14
     268:	add	w2, w2, w10
     26c:	add	w0, w0, w5
     270:	add	w6, w8, w2
     274:	ldurb	w5, [x11, #-1]
     278:	add	w3, w3, w13
     27c:	add	w1, w1, w6
     280:	add	w0, w0, w3
     284:	add	w4, w4, w10
     288:	add	w2, w2, w6
     28c:	add	w0, w0, w4
     290:	add	w5, w5, w1
     294:	add	w0, w0, w2
     298:	add	w1, w1, w5
     29c:	add	w0, w0, w1
     2a0:	cmp	x11, x7
     2a4:	add	w9, w9, w0
     2a8:	b.ne	1e0 <elf_zlib_verify_checksum+0x180>  // b.any
     2ac:	and	x12, x12, #0xf
     2b0:	cbz	x12, 2d8 <elf_zlib_verify_checksum+0x278>
     2b4:	mov	w2, #0x1                   	// #1
     2b8:	sub	w2, w2, w11
     2bc:	ldrb	w0, [x11]
     2c0:	add	w1, w2, w11
     2c4:	cmp	x1, x12
     2c8:	add	x11, x11, #0x1
     2cc:	add	w5, w5, w0
     2d0:	add	w9, w9, w5
     2d4:	b.cc	2bc <elf_zlib_verify_checksum+0x25c>  // b.lo, b.ul, b.last
     2d8:	mov	w0, #0x8071                	// #32881
     2dc:	mov	w2, #0xfff1                	// #65521
     2e0:	movk	w0, #0x8007, lsl #16
     2e4:	ldp	x29, x30, [sp], #48
     2e8:	umull	x1, w9, w0
     2ec:	umull	x3, w5, w0
     2f0:	lsr	x0, x1, #47
     2f4:	lsr	x3, x3, #47
     2f8:	msub	w9, w0, w2, w9
     2fc:	msub	w3, w3, w2, w5
     300:	add	w3, w3, w9, lsl #16
     304:	cmp	w3, w18
     308:	cset	w0, eq  // eq = none
     30c:	ret
     310:	mov	w9, #0x0                   	// #0
     314:	mov	w5, #0x1                   	// #1
     318:	b	1c8 <elf_zlib_verify_checksum+0x168>
     31c:	nop

0000000000000320 <elf_zlib_inflate_table>:
     320:	stp	x29, x30, [sp, #-176]!
     324:	mov	x29, sp
     328:	stp	x19, x20, [sp, #16]
     32c:	add	x19, sp, #0x50
     330:	mov	x20, x0
     334:	mov	x0, x19
     338:	stp	x21, x22, [sp, #32]
     33c:	mov	x21, x1
     340:	mov	x22, x3
     344:	mov	w1, #0x0                   	// #0
     348:	stp	x23, x24, [sp, #48]
     34c:	add	x23, x2, #0x1, lsl #12
     350:	mov	x2, #0x20                  	// #32
     354:	bl	0 <__asan_internal_memset>
     358:	add	x7, sp, #0x90
     35c:	add	x2, sp, #0x70
     360:	mov	x5, #0x0                   	// #0
     364:	mov	w1, #0x1                   	// #1
     368:	ldrb	w4, [x20, x5]
     36c:	and	w6, w5, #0xffff
     370:	cmp	w4, #0xf
     374:	b.hi	490 <elf_zlib_inflate_table+0x170>  // b.pmore
     378:	sbfiz	x4, x4, #1, #32
     37c:	ldrh	w0, [x19, x4]
     380:	cbnz	w0, 4a8 <elf_zlib_inflate_table+0x188>
     384:	strh	w6, [x2, x4]
     388:	add	x5, x5, #0x1
     38c:	strh	w6, [x7, x4]
     390:	cmp	x5, x21
     394:	strh	w1, [x19, x4]
     398:	b.ne	368 <elf_zlib_inflate_table+0x48>  // b.any
     39c:	mov	w1, #0x0                   	// #0
     3a0:	mov	x0, x22
     3a4:	mov	x2, #0x800                 	// #2048
     3a8:	bl	0 <__asan_internal_memset>
     3ac:	add	x11, sp, #0x70
     3b0:	mov	x4, #0x0                   	// #0
     3b4:	mov	w1, #0x0                   	// #0
     3b8:	mov	w9, #0x1                   	// #1
     3bc:	lsl	x2, x4, #1
     3c0:	add	x0, x19, x2
     3c4:	ldrh	w0, [x0, #2]
     3c8:	cbnz	w0, 4d8 <elf_zlib_inflate_table+0x1b8>
     3cc:	add	x4, x4, #0x1
     3d0:	cmp	x4, #0x8
     3d4:	b.ne	3bc <elf_zlib_inflate_table+0x9c>  // b.any
     3d8:	mov	x7, x19
     3dc:	add	x10, sp, #0x40
     3e0:	mov	x2, #0x9                   	// #9
     3e4:	mov	w8, #0x1                   	// #1
     3e8:	b	3fc <elf_zlib_inflate_table+0xdc>
     3ec:	add	x2, x2, #0x1
     3f0:	add	x7, x7, #0x2
     3f4:	cmp	x2, #0x10
     3f8:	b.eq	598 <elf_zlib_inflate_table+0x278>  // b.none
     3fc:	ldrh	w6, [x7, #18]
     400:	cbz	w6, 3ec <elf_zlib_inflate_table+0xcc>
     404:	add	x0, x10, x2, lsl #1
     408:	sub	w9, w2, #0x1
     40c:	mov	w5, #0x0                   	// #0
     410:	mov	x3, #0x0                   	// #0
     414:	sturh	w1, [x0, #-18]
     418:	b	42c <elf_zlib_inflate_table+0x10c>
     41c:	add	w3, w5, #0x1
     420:	mov	x5, x3
     424:	cmp	x2, w3, uxtw
     428:	b.ls	488 <elf_zlib_inflate_table+0x168>  // b.plast
     42c:	lsr	w0, w6, w5
     430:	tbz	w0, #0, 41c <elf_zlib_inflate_table+0xfc>
     434:	sub	w0, w9, w5
     438:	subs	x3, x2, x3
     43c:	lsl	w0, w8, w0
     440:	b.eq	470 <elf_zlib_inflate_table+0x150>  // b.none
     444:	tst	w1, w0
     448:	b.eq	53c <elf_zlib_inflate_table+0x21c>  // b.none
     44c:	mov	w4, #0x0                   	// #0
     450:	b	45c <elf_zlib_inflate_table+0x13c>
     454:	tst	w1, w0
     458:	b.eq	53c <elf_zlib_inflate_table+0x21c>  // b.none
     45c:	add	w4, w4, #0x1
     460:	bic	w1, w1, w0
     464:	lsr	w0, w0, #1
     468:	cmp	x3, w4, uxtw
     46c:	b.hi	454 <elf_zlib_inflate_table+0x134>  // b.pmore
     470:	lsl	w0, w8, w5
     474:	bic	w6, w6, w0
     478:	add	w3, w5, #0x1
     47c:	mov	x5, x3
     480:	cmp	x2, w3, uxtw
     484:	b.hi	42c <elf_zlib_inflate_table+0x10c>  // b.pmore
     488:	cbz	w6, 3ec <elf_zlib_inflate_table+0xcc>
     48c:	nop
     490:	mov	w0, #0x0                   	// #0
     494:	ldp	x19, x20, [sp, #16]
     498:	ldp	x21, x22, [sp, #32]
     49c:	ldp	x23, x24, [sp, #48]
     4a0:	ldp	x29, x30, [sp], #176
     4a4:	ret
     4a8:	ldrh	w0, [x7, x4]
     4ac:	strh	w6, [x23, x0, lsl #1]
     4b0:	ldrb	w4, [x20, x5]
     4b4:	add	x5, x5, #0x1
     4b8:	cmp	x21, x5
     4bc:	lsl	x4, x4, #1
     4c0:	ldrh	w0, [x19, x4]
     4c4:	strh	w6, [x7, x4]
     4c8:	add	w0, w0, #0x1
     4cc:	strh	w0, [x19, x4]
     4d0:	b.ne	368 <elf_zlib_inflate_table+0x48>  // b.any
     4d4:	b	39c <elf_zlib_inflate_table+0x7c>
     4d8:	add	w3, w4, #0x1
     4dc:	lsl	w3, w9, w3
     4e0:	cmp	w3, w0
     4e4:	b.cc	490 <elf_zlib_inflate_table+0x170>  // b.lo, b.ul, b.last
     4e8:	add	x2, x2, x11
     4ec:	and	x5, x0, #0xffff
     4f0:	ldrh	w7, [x2, #2]
     4f4:	tst	w7, #0xfe00
     4f8:	b.ne	490 <elf_zlib_inflate_table+0x170>  // b.any
     4fc:	sxtw	x3, w3
     500:	ubfiz	w12, w4, #9, #7
     504:	lsl	w8, w9, w4
     508:	mov	x10, #0x0                   	// #0
     50c:	cmp	w1, #0xff
     510:	orr	w6, w12, w7
     514:	mov	w0, w1
     518:	b.ls	530 <elf_zlib_inflate_table+0x210>  // b.plast
     51c:	b	54c <elf_zlib_inflate_table+0x22c>
     520:	strh	w6, [x22, x0, lsl #1]
     524:	add	x0, x0, x3
     528:	cmp	x0, #0xff
     52c:	b.hi	54c <elf_zlib_inflate_table+0x22c>  // b.pmore
     530:	ldrh	w2, [x22, x0, lsl #1]
     534:	cbz	w2, 520 <elf_zlib_inflate_table+0x200>
     538:	b	490 <elf_zlib_inflate_table+0x170>
     53c:	add	w1, w1, w0
     540:	lsl	w0, w8, w5
     544:	bic	w6, w6, w0
     548:	b	478 <elf_zlib_inflate_table+0x158>
     54c:	add	x10, x10, #0x1
     550:	cmp	x10, x5
     554:	b.cs	560 <elf_zlib_inflate_table+0x240>  // b.hs, b.nlast
     558:	ubfiz	x7, x7, #1, #16
     55c:	ldrh	w7, [x23, x7]
     560:	mov	w0, w8
     564:	tst	w8, w1
     568:	b.eq	5cc <elf_zlib_inflate_table+0x2ac>  // b.none
     56c:	nop
     570:	lsr	w0, w0, #1
     574:	tst	w0, w1
     578:	b.ne	570 <elf_zlib_inflate_table+0x250>  // b.any
     57c:	cbnz	w0, 5cc <elf_zlib_inflate_table+0x2ac>
     580:	mov	w1, #0x0                   	// #0
     584:	cmp	x10, x5
     588:	b.eq	3cc <elf_zlib_inflate_table+0xac>  // b.none
     58c:	tst	w7, #0xfe00
     590:	b.eq	50c <elf_zlib_inflate_table+0x1ec>  // b.none
     594:	b	490 <elf_zlib_inflate_table+0x170>
     598:	add	x18, sp, #0x70
     59c:	add	x17, sp, #0x40
     5a0:	mov	x5, #0x7                   	// #7
     5a4:	mov	x10, #0x0                   	// #0
     5a8:	mov	w8, #0x1                   	// #1
     5ac:	lsl	x0, x5, #1
     5b0:	add	x1, x19, x0
     5b4:	ldrh	w7, [x1, #16]
     5b8:	cbnz	w7, 5dc <elf_zlib_inflate_table+0x2bc>
     5bc:	subs	x5, x5, #0x1
     5c0:	b.ne	5ac <elf_zlib_inflate_table+0x28c>  // b.any
     5c4:	mov	w0, #0x1                   	// #1
     5c8:	b	494 <elf_zlib_inflate_table+0x174>
     5cc:	sub	w2, w0, #0x1
     5d0:	and	w1, w2, w1
     5d4:	add	w1, w0, w1
     5d8:	b	584 <elf_zlib_inflate_table+0x264>
     5dc:	add	x1, x0, x18
     5e0:	add	x0, x0, x17
     5e4:	ubfiz	w12, w5, #9, #7
     5e8:	lsl	w4, w8, w5
     5ec:	add	w11, w12, #0x1, lsl #12
     5f0:	add	w9, w5, #0x7
     5f4:	ldrh	w14, [x1, #16]
     5f8:	sxtw	x21, w4
     5fc:	ldurh	w6, [x0, #-2]
     600:	and	x7, x7, #0xffff
     604:	and	w11, w11, #0xffff
     608:	mov	w4, w4
     60c:	mov	w20, w5
     610:	lsl	w9, w8, w9
     614:	mov	x16, #0x0                   	// #0
     618:	mov	x13, #0x0                   	// #0
     61c:	mov	x24, #0x100                 	// #256
     620:	mov	x15, #0x0                   	// #0
     624:	mov	w2, w16
     628:	cmp	x24, w6, uxtb
     62c:	and	x1, x6, #0xff
     630:	b.eq	664 <elf_zlib_inflate_table+0x344>  // b.none
     634:	lsl	x2, x1, #1
     638:	ldrh	w0, [x22, x2]
     63c:	cbnz	w0, 6e0 <elf_zlib_inflate_table+0x3c0>
     640:	tst	x10, #0xfffffffffffffe00
     644:	b.ne	490 <elf_zlib_inflate_table+0x170>  // b.any
     648:	add	w0, w11, w10
     64c:	mov	x13, x10
     650:	mov	x24, x1
     654:	add	x10, x10, x21
     658:	mov	x16, x5
     65c:	strh	w0, [x22, x2]
     660:	mov	w2, w20
     664:	lsr	w0, w6, #8
     668:	add	x1, x22, x13, lsl #1
     66c:	lsl	w2, w8, w2
     670:	add	x1, x1, #0x200
     674:	cmp	x2, x0
     678:	orr	w30, w12, w14
     67c:	b.hi	694 <elf_zlib_inflate_table+0x374>  // b.pmore
     680:	b	6a0 <elf_zlib_inflate_table+0x380>
     684:	strh	w30, [x1, x0, lsl #1]
     688:	add	x0, x0, x4
     68c:	cmp	x2, x0
     690:	b.ls	6a0 <elf_zlib_inflate_table+0x380>  // b.plast
     694:	ldrh	w3, [x1, x0, lsl #1]
     698:	cbz	w3, 684 <elf_zlib_inflate_table+0x364>
     69c:	b	490 <elf_zlib_inflate_table+0x170>
     6a0:	add	x15, x15, #0x1
     6a4:	cmp	x7, x15
     6a8:	b.ls	6b4 <elf_zlib_inflate_table+0x394>  // b.plast
     6ac:	ubfiz	x14, x14, #1, #16
     6b0:	ldrh	w14, [x23, x14]
     6b4:	mov	w0, w9
     6b8:	tst	w9, w6
     6bc:	b.eq	700 <elf_zlib_inflate_table+0x3e0>  // b.none
     6c0:	lsr	w0, w0, #1
     6c4:	tst	w0, w6
     6c8:	b.ne	6c0 <elf_zlib_inflate_table+0x3a0>  // b.any
     6cc:	cbnz	w0, 700 <elf_zlib_inflate_table+0x3e0>
     6d0:	mov	w6, #0x0                   	// #0
     6d4:	cmp	x7, x15
     6d8:	b.ne	624 <elf_zlib_inflate_table+0x304>  // b.any
     6dc:	b	5bc <elf_zlib_inflate_table+0x29c>
     6e0:	tbz	w0, #12, 490 <elf_zlib_inflate_table+0x170>
     6e4:	ubfx	x16, x0, #9, #3
     6e8:	and	x13, x0, #0x1ff
     6ec:	cmp	x16, x5
     6f0:	mov	x2, x16
     6f4:	b.cc	490 <elf_zlib_inflate_table+0x170>  // b.lo, b.ul, b.last
     6f8:	mov	x24, x1
     6fc:	b	664 <elf_zlib_inflate_table+0x344>
     700:	sub	w1, w0, #0x1
     704:	and	w6, w1, w6
     708:	add	w6, w0, w6
     70c:	b	6d4 <elf_zlib_inflate_table+0x3b4>

0000000000000710 <elf_syminfo>:
     710:	mov	x10, x0
     714:	mov	x11, x2
     718:	mov	x0, x4
     71c:	ldr	w2, [x10, #8]
     720:	cbnz	w2, 7a8 <elf_syminfo+0x98>
     724:	ldr	x2, [x10, #48]
     728:	cbz	x2, 78c <elf_syminfo+0x7c>
     72c:	nop
     730:	ldp	x9, x8, [x2, #8]
     734:	mov	x7, #0x0                   	// #0
     738:	add	x3, x8, x7
     73c:	cmp	x8, x7
     740:	and	x5, x3, #0xfffffffffffffffe
     744:	b.ls	784 <elf_syminfo+0x74>  // b.plast
     748:	lsr	x3, x3, #1
     74c:	add	x5, x5, x3
     750:	add	x5, x9, x5, lsl #3
     754:	ldr	x6, [x5, #8]
     758:	cmp	x6, x1
     75c:	b.hi	7a0 <elf_syminfo+0x90>  // b.pmore
     760:	ldr	x4, [x5, #16]
     764:	add	x7, x3, #0x1
     768:	add	x3, x6, x4
     76c:	cmp	x3, x1
     770:	b.ls	738 <elf_syminfo+0x28>  // b.plast
     774:	ldr	x2, [x5]
     778:	mov	x3, x6
     77c:	mov	x16, x11
     780:	br	x16
     784:	ldr	x2, [x2]
     788:	cbnz	x2, 730 <elf_syminfo+0x20>
     78c:	mov	x16, x11
     790:	mov	x4, #0x0                   	// #0
     794:	mov	x3, #0x0                   	// #0
     798:	mov	x2, #0x0                   	// #0
     79c:	br	x16
     7a0:	mov	x8, x3
     7a4:	b	738 <elf_syminfo+0x28>
     7a8:	add	x10, x10, #0x30
     7ac:	nop
     7b0:	ldar	x10, [x10]
     7b4:	cbz	x10, 78c <elf_syminfo+0x7c>
     7b8:	ldp	x9, x8, [x10, #8]
     7bc:	mov	x7, #0x0                   	// #0
     7c0:	add	x3, x8, x7
     7c4:	cmp	x8, x7
     7c8:	and	x5, x3, #0xfffffffffffffffe
     7cc:	b.ls	7b0 <elf_syminfo+0xa0>  // b.plast
     7d0:	lsr	x3, x3, #1
     7d4:	add	x5, x5, x3
     7d8:	add	x5, x9, x5, lsl #3
     7dc:	ldr	x6, [x5, #8]
     7e0:	cmp	x6, x1
     7e4:	b.hi	80c <elf_syminfo+0xfc>  // b.pmore
     7e8:	ldr	x4, [x5, #16]
     7ec:	add	x7, x3, #0x1
     7f0:	add	x3, x6, x4
     7f4:	cmp	x3, x1
     7f8:	b.ls	7c0 <elf_syminfo+0xb0>  // b.plast
     7fc:	ldr	x2, [x5]
     800:	mov	x3, x6
     804:	mov	x16, x11
     808:	br	x16
     80c:	mov	x8, x3
     810:	b	7c0 <elf_syminfo+0xb0>
     814:	nop

0000000000000818 <elf_try_debugfile>:
     818:	stp	x29, x30, [sp, #-144]!
     81c:	mov	x29, sp
     820:	stp	x27, x28, [sp, #80]
     824:	add	x28, x2, x4
     828:	mov	x27, x5
     82c:	stp	x19, x20, [sp, #16]
     830:	mov	x20, x6
     834:	stp	x21, x22, [sp, #32]
     838:	mov	x22, x2
     83c:	mov	x21, x7
     840:	stp	x23, x24, [sp, #48]
     844:	mov	x23, x0
     848:	mov	x0, x5
     84c:	stp	x25, x26, [sp, #64]
     850:	mov	x25, x4
     854:	stp	x3, x1, [sp, #112]
     858:	bl	0 <__asan_internal_strlen>
     85c:	mov	x24, x0
     860:	add	x0, x28, x0
     864:	mov	x3, x21
     868:	add	x26, x0, #0x1
     86c:	mov	x2, x20
     870:	mov	x1, x26
     874:	str	x0, [sp, #104]
     878:	mov	x0, x23
     87c:	bl	0 <__asan_backtrace_alloc>
     880:	cbz	x0, 910 <elf_try_debugfile+0xf8>
     884:	ldr	x8, [sp, #120]
     888:	mov	x19, x0
     88c:	mov	x2, x22
     890:	mov	x1, x8
     894:	bl	0 <__asan_internal_memcpy>
     898:	ldr	x1, [sp, #112]
     89c:	mov	x2, x25
     8a0:	add	x0, x19, x22
     8a4:	bl	0 <__asan_internal_memcpy>
     8a8:	mov	x2, x24
     8ac:	mov	x1, x27
     8b0:	add	x0, x19, x28
     8b4:	bl	0 <__asan_internal_memcpy>
     8b8:	ldr	x0, [sp, #104]
     8bc:	add	x3, sp, #0x8c
     8c0:	mov	x2, x21
     8c4:	mov	x1, x20
     8c8:	strb	wzr, [x19, x0]
     8cc:	mov	x0, x19
     8d0:	bl	0 <__asan_backtrace_open>
     8d4:	mov	w22, w0
     8d8:	mov	x4, x21
     8dc:	mov	x3, x20
     8e0:	mov	x2, x26
     8e4:	mov	x1, x19
     8e8:	mov	x0, x23
     8ec:	bl	0 <__asan_backtrace_free>
     8f0:	mov	w0, w22
     8f4:	ldp	x19, x20, [sp, #16]
     8f8:	ldp	x21, x22, [sp, #32]
     8fc:	ldp	x23, x24, [sp, #48]
     900:	ldp	x25, x26, [sp, #64]
     904:	ldp	x27, x28, [sp, #80]
     908:	ldp	x29, x30, [sp], #144
     90c:	ret
     910:	mov	w22, #0xffffffff            	// #-1
     914:	b	8f0 <elf_try_debugfile+0xd8>

0000000000000918 <elf_find_debugfile_by_debuglink>:
     918:	stp	x29, x30, [sp, #-256]!
     91c:	mov	x29, sp
     920:	stp	x19, x20, [sp, #16]
     924:	mov	x20, x0
     928:	mov	x19, x1
     92c:	stp	x21, x22, [sp, #32]
     930:	mov	x21, x3
     934:	mov	x22, x4
     938:	stp	x27, x28, [sp, #80]
     93c:	add	x27, sp, #0x80
     940:	stp	x23, x24, [sp, #48]
     944:	mov	x24, #0x0                   	// #0
     948:	stp	x25, x26, [sp, #64]
     94c:	mov	x25, #0x0                   	// #0
     950:	str	x2, [sp, #104]
     954:	mov	x2, x27
     958:	mov	x1, x19
     95c:	mov	w0, #0x0                   	// #0
     960:	bl	0 <__lxstat>
     964:	tbnz	w0, #31, 9f0 <elf_find_debugfile_by_debuglink+0xd8>
     968:	ldr	w0, [sp, #144]
     96c:	and	w0, w0, #0xf000
     970:	cmp	w0, #0xa, lsl #12
     974:	b.ne	9f0 <elf_find_debugfile_by_debuglink+0xd8>  // b.any
     978:	mov	x28, #0x80                  	// #128
     97c:	b	9a4 <elf_find_debugfile_by_debuglink+0x8c>
     980:	cmp	x1, x0
     984:	b.hi	a64 <elf_find_debugfile_by_debuglink+0x14c>  // b.pmore
     988:	mov	x2, x28
     98c:	mov	x1, x26
     990:	mov	x4, x22
     994:	mov	x3, x21
     998:	mov	x0, x20
     99c:	lsl	x28, x28, #1
     9a0:	bl	0 <__asan_backtrace_free>
     9a4:	mov	x2, x21
     9a8:	mov	x3, x22
     9ac:	mov	x1, x28
     9b0:	mov	x0, x20
     9b4:	bl	0 <__asan_backtrace_alloc>
     9b8:	mov	x26, x0
     9bc:	mov	x2, x28
     9c0:	mov	x0, x19
     9c4:	cbz	x26, 9f0 <elf_find_debugfile_by_debuglink+0xd8>
     9c8:	mov	x1, x26
     9cc:	bl	0 <readlink>
     9d0:	sub	x1, x28, #0x1
     9d4:	tbz	x0, #63, 980 <elf_find_debugfile_by_debuglink+0x68>
     9d8:	mov	x2, x28
     9dc:	mov	x1, x26
     9e0:	mov	x4, x22
     9e4:	mov	x3, x21
     9e8:	mov	x0, x20
     9ec:	bl	0 <__asan_backtrace_free>
     9f0:	mov	x0, x19
     9f4:	mov	w1, #0x2f                  	// #47
     9f8:	bl	0 <strrchr>
     9fc:	cbz	x0, c00 <elf_find_debugfile_by_debuglink+0x2e8>
     a00:	add	x0, x0, #0x1
     a04:	adrp	x3, 0 <elf_nodebug>
     a08:	sub	x27, x0, x19
     a0c:	ldr	x5, [sp, #104]
     a10:	add	x3, x3, #0x0
     a14:	mov	x7, x22
     a18:	mov	x6, x21
     a1c:	mov	x2, x27
     a20:	mov	x1, x19
     a24:	mov	x0, x20
     a28:	mov	x4, #0x0                   	// #0
     a2c:	bl	818 <elf_try_debugfile>
     a30:	mov	w23, w0
     a34:	tbnz	w0, #31, b44 <elf_find_debugfile_by_debuglink+0x22c>
     a38:	cmp	x24, #0x0
     a3c:	ccmp	x25, #0x0, #0x4, ne  // ne = any
     a40:	b.ne	bc8 <elf_find_debugfile_by_debuglink+0x2b0>  // b.any
     a44:	mov	w0, w23
     a48:	ldp	x19, x20, [sp, #16]
     a4c:	ldp	x21, x22, [sp, #32]
     a50:	ldp	x23, x24, [sp, #48]
     a54:	ldp	x25, x26, [sp, #64]
     a58:	ldp	x27, x28, [sp, #80]
     a5c:	ldp	x29, x30, [sp], #256
     a60:	ret
     a64:	strb	wzr, [x26, x0]
     a68:	ldrb	w0, [x26]
     a6c:	cmp	w0, #0x2f
     a70:	b.eq	b18 <elf_find_debugfile_by_debuglink+0x200>  // b.none
     a74:	mov	x0, x19
     a78:	mov	w1, #0x2f                  	// #47
     a7c:	bl	0 <strrchr>
     a80:	cbz	x0, b18 <elf_find_debugfile_by_debuglink+0x200>
     a84:	add	x23, x0, #0x1
     a88:	mov	x0, x26
     a8c:	sub	x23, x23, x19
     a90:	bl	0 <__asan_internal_strlen>
     a94:	add	x1, x23, #0x1
     a98:	mov	x3, x22
     a9c:	add	x0, x1, x0
     aa0:	mov	x2, x21
     aa4:	mov	x1, x0
     aa8:	str	x0, [sp, #112]
     aac:	mov	x0, x20
     ab0:	bl	0 <__asan_backtrace_alloc>
     ab4:	str	x0, [sp, #120]
     ab8:	cbz	x0, c10 <elf_find_debugfile_by_debuglink+0x2f8>
     abc:	mov	x2, x23
     ac0:	mov	x1, x19
     ac4:	bl	0 <__asan_internal_memcpy>
     ac8:	ldr	x3, [sp, #120]
     acc:	mov	x0, x26
     ad0:	add	x23, x3, x23
     ad4:	bl	0 <__asan_internal_strlen>
     ad8:	mov	x2, x0
     adc:	mov	x1, x26
     ae0:	mov	x0, x23
     ae4:	bl	0 <__asan_internal_memcpy>
     ae8:	mov	x0, x26
     aec:	bl	0 <__asan_internal_strlen>
     af0:	mov	x7, x0
     af4:	mov	x2, x28
     af8:	mov	x1, x26
     afc:	ldp	x28, x3, [sp, #112]
     b00:	strb	wzr, [x23, x7]
     b04:	mov	x4, x22
     b08:	mov	x0, x20
     b0c:	mov	x26, x3
     b10:	mov	x3, x21
     b14:	bl	0 <__asan_backtrace_free>
     b18:	cbz	x24, b34 <elf_find_debugfile_by_debuglink+0x21c>
     b1c:	mov	x2, x25
     b20:	mov	x1, x24
     b24:	mov	x4, x22
     b28:	mov	x3, x21
     b2c:	mov	x0, x20
     b30:	bl	0 <__asan_backtrace_free>
     b34:	mov	x24, x26
     b38:	mov	x25, x28
     b3c:	mov	x19, x26
     b40:	b	954 <elf_find_debugfile_by_debuglink+0x3c>
     b44:	adrp	x23, 0 <elf_nodebug>
     b48:	add	x23, x23, #0x0
     b4c:	mov	x0, x23
     b50:	bl	0 <__asan_internal_strlen>
     b54:	ldr	x5, [sp, #104]
     b58:	mov	x4, x0
     b5c:	mov	x3, x23
     b60:	mov	x7, x22
     b64:	mov	x6, x21
     b68:	mov	x2, x27
     b6c:	mov	x1, x19
     b70:	mov	x0, x20
     b74:	bl	818 <elf_try_debugfile>
     b78:	mov	w23, w0
     b7c:	tbz	w0, #31, a38 <elf_find_debugfile_by_debuglink+0x120>
     b80:	adrp	x23, 0 <elf_nodebug>
     b84:	add	x23, x23, #0x0
     b88:	mov	x0, x23
     b8c:	bl	0 <__asan_internal_strlen>
     b90:	ldr	x5, [sp, #104]
     b94:	mov	x2, x0
     b98:	mov	x1, x23
     b9c:	mov	x7, x22
     ba0:	mov	x6, x21
     ba4:	mov	x4, x27
     ba8:	mov	x3, x19
     bac:	mov	x0, x20
     bb0:	bl	818 <elf_try_debugfile>
     bb4:	cmp	w0, #0x0
     bb8:	csinv	w23, w0, wzr, ge  // ge = tcont
     bbc:	cmp	x24, #0x0
     bc0:	ccmp	x25, #0x0, #0x4, ne  // ne = any
     bc4:	b.eq	a44 <elf_find_debugfile_by_debuglink+0x12c>  // b.none
     bc8:	mov	x4, x22
     bcc:	mov	x3, x21
     bd0:	mov	x2, x25
     bd4:	mov	x1, x24
     bd8:	mov	x0, x20
     bdc:	bl	0 <__asan_backtrace_free>
     be0:	mov	w0, w23
     be4:	ldp	x19, x20, [sp, #16]
     be8:	ldp	x21, x22, [sp, #32]
     bec:	ldp	x23, x24, [sp, #48]
     bf0:	ldp	x25, x26, [sp, #64]
     bf4:	ldp	x27, x28, [sp, #80]
     bf8:	ldp	x29, x30, [sp], #256
     bfc:	ret
     c00:	adrp	x3, 0 <elf_nodebug>
     c04:	mov	x27, #0x0                   	// #0
     c08:	add	x19, x3, #0x0
     c0c:	b	a0c <elf_find_debugfile_by_debuglink+0xf4>
     c10:	mov	w23, #0xffffffff            	// #-1
     c14:	b	a38 <elf_find_debugfile_by_debuglink+0x120>

0000000000000c18 <elf_zlib_inflate>:
     c18:	stp	x29, x30, [sp, #-320]!
     c1c:	cmp	x1, #0x4
     c20:	mov	x29, sp
     c24:	stp	x19, x20, [sp, #16]
     c28:	mov	x19, x0
     c2c:	stp	x25, x26, [sp, #64]
     c30:	add	x26, x0, x1
     c34:	add	x0, x3, x4
     c38:	stp	x0, x3, [sp, #104]
     c3c:	b.le	199c <elf_zlib_inflate+0xd84>
     c40:	adrp	x0, 0 <elf_nodebug>
     c44:	mov	x4, x26
     c48:	add	x0, x0, #0x0
     c4c:	stp	x23, x24, [sp, #48]
     c50:	mov	x23, x2
     c54:	mov	x24, x3
     c58:	str	x0, [sp, #120]
     c5c:	add	x0, x0, #0x200
     c60:	str	x0, [sp, #128]
     c64:	ldrb	w0, [x19]
     c68:	and	w1, w0, #0xf
     c6c:	cmp	w1, #0x8
     c70:	b.ne	1118 <elf_zlib_inflate+0x500>  // b.any
     c74:	cmp	w0, #0x7f
     c78:	b.hi	1118 <elf_zlib_inflate+0x500>  // b.pmore
     c7c:	ldrb	w1, [x19, #1]
     c80:	ldrh	w0, [x19]
     c84:	rev16	w0, w0
     c88:	tbnz	w1, #5, 1118 <elf_zlib_inflate+0x500>
     c8c:	mov	x1, #0x4211                	// #16913
     c90:	and	x0, x0, #0xffff
     c94:	movk	x1, #0x2108, lsl #16
     c98:	movk	x1, #0x1084, lsl #32
     c9c:	movk	x1, #0x842, lsl #48
     ca0:	umulh	x2, x0, x1
     ca4:	sub	x1, x0, x2
     ca8:	add	x1, x2, x1, lsr #1
     cac:	lsr	x1, x1, #4
     cb0:	lsl	x2, x1, #5
     cb4:	sub	x1, x2, x1
     cb8:	cmp	x0, x1
     cbc:	b.ne	1118 <elf_zlib_inflate+0x500>  // b.any
     cc0:	stp	x21, x22, [sp, #32]
     cc4:	add	x19, x19, #0x2
     cc8:	ands	x22, x19, #0x3
     ccc:	stp	x27, x28, [sp, #80]
     cd0:	b.eq	1654 <elf_zlib_inflate+0xa3c>  // b.none
     cd4:	mov	x22, #0x0                   	// #0
     cd8:	mov	w0, #0x0                   	// #0
     cdc:	nop
     ce0:	ldrb	w1, [x19], #1
     ce4:	lsl	x1, x1, x0
     ce8:	tst	x19, #0x3
     cec:	orr	x22, x22, x1
     cf0:	add	w0, w0, #0x8
     cf4:	b.ne	ce0 <elf_zlib_inflate+0xc8>  // b.any
     cf8:	mov	x27, x4
     cfc:	add	x1, sp, #0x100
     d00:	str	x1, [sp, #96]
     d04:	cmp	w0, #0xe
     d08:	b.hi	d2c <elf_zlib_inflate+0x114>  // b.pmore
     d0c:	sub	x1, x27, x19
     d10:	cmp	x1, #0x3
     d14:	b.le	1110 <elf_zlib_inflate+0x4f8>
     d18:	ldr	w1, [x19], #4
     d1c:	lsl	x1, x1, x0
     d20:	add	w0, w0, #0x20
     d24:	prfm	pldl1strm, [x19]
     d28:	orr	x22, x22, x1
     d2c:	ubfx	w1, w22, #1, #2
     d30:	sub	w20, w0, #0x3
     d34:	cmp	w1, #0x3
     d38:	b.eq	1110 <elf_zlib_inflate+0x4f8>  // b.none
     d3c:	cbz	w1, 1234 <elf_zlib_inflate+0x61c>
     d40:	cmp	w1, #0x1
     d44:	lsr	x21, x22, #3
     d48:	b.eq	134c <elf_zlib_inflate+0x734>  // b.none
     d4c:	cmp	w20, #0xe
     d50:	b.hi	d74 <elf_zlib_inflate+0x15c>  // b.pmore
     d54:	sub	x1, x27, x19
     d58:	cmp	x1, #0x3
     d5c:	b.le	11f4 <elf_zlib_inflate+0x5dc>
     d60:	ldr	w1, [x19], #4
     d64:	lsl	x1, x1, x20
     d68:	add	w20, w0, #0x1d
     d6c:	prfm	pldl1strm, [x19]
     d70:	orr	x21, x21, x1
     d74:	and	w26, w21, #0x1f
     d78:	ubfx	w0, w21, #5, #5
     d7c:	add	w1, w26, #0x101
     d80:	add	w0, w0, #0x1
     d84:	sub	w3, w20, #0xe
     d88:	str	w3, [sp, #136]
     d8c:	str	w1, [sp, #144]
     d90:	cmp	w1, #0x11e
     d94:	str	w0, [sp, #152]
     d98:	ubfx	w25, w21, #10, #4
     d9c:	ccmp	w0, #0x1e, #0x2, ls  // ls = plast
     da0:	add	w25, w25, #0x4
     da4:	lsr	x28, x21, #14
     da8:	b.hi	11f4 <elf_zlib_inflate+0x5dc>  // b.pmore
     dac:	add	x26, sp, #0xc8
     db0:	mov	x2, #0x13                  	// #19
     db4:	mov	x0, x26
     db8:	mov	w1, #0x0                   	// #0
     dbc:	bl	0 <__asan_internal_memset>
     dc0:	ldr	w3, [sp, #136]
     dc4:	cmp	w3, #0xe
     dc8:	b.hi	dec <elf_zlib_inflate+0x1d4>  // b.pmore
     dcc:	sub	x0, x27, x19
     dd0:	cmp	x0, #0x3
     dd4:	b.le	11f4 <elf_zlib_inflate+0x5dc>
     dd8:	ldr	w0, [x19], #4
     ddc:	lsl	x0, x0, x3
     de0:	add	w3, w20, #0x12
     de4:	prfm	pldl1strm, [x19]
     de8:	orr	x28, x28, x0
     dec:	and	w2, w28, #0x7
     df0:	ubfx	w1, w28, #3, #3
     df4:	ubfx	w0, w28, #6, #3
     df8:	strb	w2, [sp, #216]
     dfc:	ubfx	w2, w28, #9, #3
     e00:	strb	w2, [sp, #200]
     e04:	strb	w1, [sp, #217]
     e08:	sub	w20, w3, #0xc
     e0c:	strb	w0, [sp, #218]
     e10:	cmp	w25, #0x4
     e14:	lsr	x21, x28, #12
     e18:	b.eq	fc8 <elf_zlib_inflate+0x3b0>  // b.none
     e1c:	and	w21, w21, #0x7
     e20:	strb	w21, [sp, #208]
     e24:	cmp	w25, #0x5
     e28:	lsr	x21, x28, #15
     e2c:	sub	w20, w3, #0xf
     e30:	b.eq	fc8 <elf_zlib_inflate+0x3b0>  // b.none
     e34:	cmp	w20, #0xe
     e38:	b.hi	e5c <elf_zlib_inflate+0x244>  // b.pmore
     e3c:	sub	x0, x27, x19
     e40:	cmp	x0, #0x3
     e44:	b.le	11f4 <elf_zlib_inflate+0x5dc>
     e48:	ldr	w0, [x19], #4
     e4c:	lsl	x0, x0, x20
     e50:	add	w20, w3, #0x11
     e54:	prfm	pldl1strm, [x19]
     e58:	orr	x21, x21, x0
     e5c:	and	w0, w21, #0x7
     e60:	strb	w0, [sp, #207]
     e64:	cmp	w25, #0x6
     e68:	lsr	x0, x21, #3
     e6c:	b.eq	1684 <elf_zlib_inflate+0xa6c>  // b.none
     e70:	and	w0, w0, #0x7
     e74:	strb	w0, [sp, #209]
     e78:	cmp	w25, #0x7
     e7c:	lsr	x0, x21, #6
     e80:	b.eq	16e0 <elf_zlib_inflate+0xac8>  // b.none
     e84:	and	w0, w0, #0x7
     e88:	strb	w0, [sp, #206]
     e8c:	cmp	w25, #0x8
     e90:	lsr	x0, x21, #9
     e94:	b.eq	1668 <elf_zlib_inflate+0xa50>  // b.none
     e98:	and	w0, w0, #0x7
     e9c:	strb	w0, [sp, #210]
     ea0:	cmp	w25, #0x9
     ea4:	lsr	x0, x21, #12
     ea8:	b.eq	165c <elf_zlib_inflate+0xa44>  // b.none
     eac:	and	w0, w0, #0x7
     eb0:	strb	w0, [sp, #205]
     eb4:	lsr	x21, x21, #15
     eb8:	cmp	w25, #0xa
     ebc:	sub	w0, w20, #0xf
     ec0:	b.eq	19ac <elf_zlib_inflate+0xd94>  // b.none
     ec4:	cmp	w0, #0xe
     ec8:	b.hi	eec <elf_zlib_inflate+0x2d4>  // b.pmore
     ecc:	sub	x1, x27, x19
     ed0:	cmp	x1, #0x3
     ed4:	b.le	11f4 <elf_zlib_inflate+0x5dc>
     ed8:	ldr	w1, [x19], #4
     edc:	lsl	x1, x1, x0
     ee0:	add	w0, w20, #0x11
     ee4:	prfm	pldl1strm, [x19]
     ee8:	orr	x21, x21, x1
     eec:	and	w1, w21, #0x7
     ef0:	strb	w1, [sp, #211]
     ef4:	cmp	w25, #0xb
     ef8:	lsr	x1, x21, #3
     efc:	b.eq	19b4 <elf_zlib_inflate+0xd9c>  // b.none
     f00:	and	w1, w1, #0x7
     f04:	strb	w1, [sp, #204]
     f08:	cmp	w25, #0xc
     f0c:	lsr	x1, x21, #6
     f10:	b.eq	19dc <elf_zlib_inflate+0xdc4>  // b.none
     f14:	and	w1, w1, #0x7
     f18:	strb	w1, [sp, #212]
     f1c:	cmp	w25, #0xd
     f20:	lsr	x1, x21, #9
     f24:	b.eq	19e8 <elf_zlib_inflate+0xdd0>  // b.none
     f28:	and	w1, w1, #0x7
     f2c:	strb	w1, [sp, #203]
     f30:	cmp	w25, #0xe
     f34:	lsr	x1, x21, #12
     f38:	b.eq	19f4 <elf_zlib_inflate+0xddc>  // b.none
     f3c:	and	w1, w1, #0x7
     f40:	strb	w1, [sp, #213]
     f44:	lsr	x21, x21, #15
     f48:	cmp	w25, #0xf
     f4c:	sub	w20, w0, #0xf
     f50:	b.eq	fc8 <elf_zlib_inflate+0x3b0>  // b.none
     f54:	cmp	w20, #0xe
     f58:	b.hi	f7c <elf_zlib_inflate+0x364>  // b.pmore
     f5c:	sub	x1, x27, x19
     f60:	cmp	x1, #0x3
     f64:	b.le	11f4 <elf_zlib_inflate+0x5dc>
     f68:	ldr	w1, [x19], #4
     f6c:	lsl	x1, x1, x20
     f70:	add	w20, w0, #0x11
     f74:	prfm	pldl1strm, [x19]
     f78:	orr	x21, x21, x1
     f7c:	and	w0, w21, #0x7
     f80:	strb	w0, [sp, #202]
     f84:	cmp	w25, #0x10
     f88:	lsr	x0, x21, #3
     f8c:	b.eq	1684 <elf_zlib_inflate+0xa6c>  // b.none
     f90:	and	w0, w0, #0x7
     f94:	strb	w0, [sp, #214]
     f98:	cmp	w25, #0x11
     f9c:	lsr	x0, x21, #6
     fa0:	b.eq	16e0 <elf_zlib_inflate+0xac8>  // b.none
     fa4:	and	w0, w0, #0x7
     fa8:	strb	w0, [sp, #201]
     fac:	cmp	w25, #0x12
     fb0:	lsr	x0, x21, #9
     fb4:	b.eq	1668 <elf_zlib_inflate+0xa50>  // b.none
     fb8:	lsr	x21, x21, #12
     fbc:	sub	w20, w20, #0xc
     fc0:	and	w0, w0, #0x7
     fc4:	strb	w0, [sp, #215]
     fc8:	add	x25, sp, #0xe0
     fcc:	mov	w1, #0x0                   	// #0
     fd0:	mov	x0, x25
     fd4:	mov	x2, #0x20                  	// #32
     fd8:	bl	0 <__asan_internal_memset>
     fdc:	add	x28, x23, #0x1, lsl #12
     fe0:	mov	x1, #0x1                   	// #1
     fe4:	add	x5, sp, #0x120
     fe8:	mov	w8, w1
     fec:	nop
     ff0:	add	x0, x26, x1
     ff4:	sub	w2, w1, #0x1
     ff8:	and	w2, w2, #0xffff
     ffc:	ldurb	w0, [x0, #-1]
    1000:	cmp	w0, #0xf
    1004:	b.hi	11f4 <elf_zlib_inflate+0x5dc>  // b.pmore
    1008:	sbfiz	x0, x0, #1, #32
    100c:	ldrh	w3, [x25, x0]
    1010:	add	w4, w3, #0x1
    1014:	cbnz	w3, 1214 <elf_zlib_inflate+0x5fc>
    1018:	ldr	x3, [sp, #96]
    101c:	strh	w2, [x5, x0]
    1020:	strh	w8, [x25, x0]
    1024:	add	x1, x1, #0x1
    1028:	cmp	x1, #0x14
    102c:	strh	w2, [x3, x0]
    1030:	b.ne	ff0 <elf_zlib_inflate+0x3d8>  // b.any
    1034:	mov	w1, #0x0                   	// #0
    1038:	mov	x0, x23
    103c:	mov	x2, #0x800                 	// #2048
    1040:	bl	0 <__asan_internal_memset>
    1044:	mov	x5, #0x0                   	// #0
    1048:	mov	w1, #0x0                   	// #0
    104c:	mov	w9, #0x1                   	// #1
    1050:	lsl	x2, x5, #1
    1054:	add	x0, x25, x2
    1058:	ldrh	w0, [x0, #2]
    105c:	cbnz	w0, 12e4 <elf_zlib_inflate+0x6cc>
    1060:	add	x5, x5, #0x1
    1064:	cmp	x5, #0x8
    1068:	b.ne	1050 <elf_zlib_inflate+0x438>  // b.any
    106c:	mov	x8, x25
    1070:	add	x11, sp, #0xb8
    1074:	mov	x6, #0x9                   	// #9
    1078:	mov	w9, #0x1                   	// #1
    107c:	b	1090 <elf_zlib_inflate+0x478>
    1080:	add	x6, x6, #0x1
    1084:	add	x8, x8, #0x2
    1088:	cmp	x6, #0x10
    108c:	b.eq	16ec <elf_zlib_inflate+0xad4>  // b.none
    1090:	ldrh	w5, [x8, #18]
    1094:	cbz	w5, 1080 <elf_zlib_inflate+0x468>
    1098:	add	x0, x11, x6, lsl #1
    109c:	sub	w7, w6, #0x1
    10a0:	mov	x4, #0x0                   	// #0
    10a4:	mov	w3, #0x0                   	// #0
    10a8:	sturh	w1, [x0, #-18]
    10ac:	b	10c0 <elf_zlib_inflate+0x4a8>
    10b0:	add	w4, w3, #0x1
    10b4:	mov	x3, x4
    10b8:	cmp	x6, w4, uxtw
    10bc:	b.ls	167c <elf_zlib_inflate+0xa64>  // b.plast
    10c0:	lsr	w0, w5, w3
    10c4:	tbz	w0, #0, 10b0 <elf_zlib_inflate+0x498>
    10c8:	sub	w0, w7, w3
    10cc:	subs	x4, x6, x4
    10d0:	lsl	w0, w9, w0
    10d4:	b.eq	1104 <elf_zlib_inflate+0x4ec>  // b.none
    10d8:	tst	w0, w1
    10dc:	b.eq	1674 <elf_zlib_inflate+0xa5c>  // b.none
    10e0:	mov	w2, #0x0                   	// #0
    10e4:	b	10f0 <elf_zlib_inflate+0x4d8>
    10e8:	tst	w1, w0
    10ec:	b.eq	1674 <elf_zlib_inflate+0xa5c>  // b.none
    10f0:	add	w2, w2, #0x1
    10f4:	bic	w1, w1, w0
    10f8:	lsr	w0, w0, #1
    10fc:	cmp	x4, w2, uxtw
    1100:	b.hi	10e8 <elf_zlib_inflate+0x4d0>  // b.pmore
    1104:	lsl	w0, w9, w3
    1108:	bic	w5, w5, w0
    110c:	b	10b0 <elf_zlib_inflate+0x498>
    1110:	ldp	x21, x22, [sp, #32]
    1114:	ldp	x27, x28, [sp, #80]
    1118:	mov	w0, #0x0                   	// #0
    111c:	ldp	x23, x24, [sp, #48]
    1120:	ldp	x19, x20, [sp, #16]
    1124:	ldp	x25, x26, [sp, #64]
    1128:	ldp	x29, x30, [sp], #320
    112c:	ret
    1130:	ldr	x1, [sp, #96]
    1134:	ubfiz	w14, w6, #9, #7
    1138:	lsl	w5, w4, w6
    113c:	add	w11, w14, #0x1, lsl #12
    1140:	add	x1, x0, x1
    1144:	add	x0, x0, x30
    1148:	add	w10, w6, #0x7
    114c:	sxtw	x26, w5
    1150:	and	x9, x9, #0xffff
    1154:	and	w11, w11, #0xffff
    1158:	ldrh	w12, [x1, #16]
    115c:	mov	w5, w5
    1160:	ldurh	w7, [x0, #-2]
    1164:	lsl	w10, w4, w10
    1168:	mov	x17, #0x0                   	// #0
    116c:	mov	x15, #0x0                   	// #0
    1170:	mov	x16, #0x0                   	// #0
    1174:	mov	x13, #0x100                 	// #256
    1178:	str	w6, [sp, #136]
    117c:	mov	w2, w17
    1180:	cmp	x13, w7, uxtb
    1184:	and	x1, x7, #0xff
    1188:	b.eq	11bc <elf_zlib_inflate+0x5a4>  // b.none
    118c:	lsl	x2, x1, #1
    1190:	ldrh	w0, [x23, x2]
    1194:	cbnz	w0, 1a40 <elf_zlib_inflate+0xe28>
    1198:	tst	x18, #0xfffffffffffffe00
    119c:	b.ne	11f4 <elf_zlib_inflate+0x5dc>  // b.any
    11a0:	add	w0, w11, w18
    11a4:	strh	w0, [x23, x2]
    11a8:	ldr	w2, [sp, #136]
    11ac:	mov	x15, x18
    11b0:	mov	x13, x1
    11b4:	add	x18, x18, x26
    11b8:	mov	x17, x6
    11bc:	lsr	w0, w7, #8
    11c0:	add	x1, x23, x15, lsl #1
    11c4:	lsl	w2, w4, w2
    11c8:	add	x1, x1, #0x200
    11cc:	cmp	x2, x0
    11d0:	orr	w8, w14, w12
    11d4:	b.hi	11ec <elf_zlib_inflate+0x5d4>  // b.pmore
    11d8:	b	1a00 <elf_zlib_inflate+0xde8>
    11dc:	strh	w8, [x1, x0, lsl #1]
    11e0:	add	x0, x0, x5
    11e4:	cmp	x2, x0
    11e8:	b.ls	1a00 <elf_zlib_inflate+0xde8>  // b.plast
    11ec:	ldrh	w3, [x1, x0, lsl #1]
    11f0:	cbz	w3, 11dc <elf_zlib_inflate+0x5c4>
    11f4:	mov	w0, #0x0                   	// #0
    11f8:	ldp	x19, x20, [sp, #16]
    11fc:	ldp	x21, x22, [sp, #32]
    1200:	ldp	x23, x24, [sp, #48]
    1204:	ldp	x25, x26, [sp, #64]
    1208:	ldp	x27, x28, [sp, #80]
    120c:	ldp	x29, x30, [sp], #320
    1210:	ret
    1214:	ldrh	w3, [x5, x0]
    1218:	add	x1, x1, #0x1
    121c:	strh	w4, [x25, x0]
    1220:	cmp	x1, #0x14
    1224:	strh	w2, [x5, x0]
    1228:	strh	w2, [x28, x3, lsl #1]
    122c:	b.ne	ff0 <elf_zlib_inflate+0x3d8>  // b.any
    1230:	b	1034 <elf_zlib_inflate+0x41c>
    1234:	sub	w0, w0, #0xc
    1238:	lsr	w0, w0, #3
    123c:	mvn	x5, x0
    1240:	add	x3, x19, x5
    1244:	sub	x1, x27, x3
    1248:	cmp	x1, #0x3
    124c:	b.le	1110 <elf_zlib_inflate+0x4f8>
    1250:	ldrb	w6, [x3, #3]
    1254:	sub	x0, x19, x0
    1258:	ldrb	w2, [x3, #2]
    125c:	add	x1, x0, #0x3
    1260:	ldrb	w3, [x3, #1]
    1264:	ldrb	w0, [x19, x5]
    1268:	bfi	w2, w6, #8, #24
    126c:	mvn	w2, w2
    1270:	bfi	w0, w3, #8, #24
    1274:	cmp	w0, w2, uxth
    1278:	b.ne	1110 <elf_zlib_inflate+0x4f8>  // b.any
    127c:	sub	x2, x27, x1
    1280:	cmp	w0, w2
    1284:	b.hi	1110 <elf_zlib_inflate+0x4f8>  // b.pmore
    1288:	ldr	x2, [sp, #104]
    128c:	sub	x2, x2, x24
    1290:	cmp	w0, w2
    1294:	b.hi	1110 <elf_zlib_inflate+0x4f8>  // b.pmore
    1298:	and	x20, x0, #0xffff
    129c:	mov	x0, x24
    12a0:	add	x19, x1, x20
    12a4:	mov	x2, x20
    12a8:	bl	0 <__asan_internal_memcpy>
    12ac:	add	x24, x24, x20
    12b0:	ands	x21, x19, #0x3
    12b4:	mov	w0, #0x0                   	// #0
    12b8:	b.eq	12d8 <elf_zlib_inflate+0x6c0>  // b.none
    12bc:	mov	x21, #0x0                   	// #0
    12c0:	ldrb	w1, [x19], #1
    12c4:	lsl	x1, x1, x0
    12c8:	tst	x19, #0x3
    12cc:	orr	x21, x21, x1
    12d0:	add	w0, w0, #0x8
    12d4:	b.ne	12c0 <elf_zlib_inflate+0x6a8>  // b.any
    12d8:	tbnz	w22, #0, 19c0 <elf_zlib_inflate+0xda8>
    12dc:	mov	x22, x21
    12e0:	b	d04 <elf_zlib_inflate+0xec>
    12e4:	add	w3, w5, #0x1
    12e8:	lsl	w3, w9, w3
    12ec:	cmp	w0, w3
    12f0:	b.hi	11f4 <elf_zlib_inflate+0x5dc>  // b.pmore
    12f4:	ldr	x4, [sp, #96]
    12f8:	add	x2, x2, x4
    12fc:	and	x4, x0, #0xffff
    1300:	ldrh	w7, [x2, #2]
    1304:	tst	w7, #0xfe00
    1308:	b.ne	11f4 <elf_zlib_inflate+0x5dc>  // b.any
    130c:	sxtw	x3, w3
    1310:	ubfiz	w11, w5, #9, #7
    1314:	lsl	w8, w9, w5
    1318:	mov	x10, #0x0                   	// #0
    131c:	cmp	w1, #0xff
    1320:	orr	w6, w11, w7
    1324:	mov	w0, w1
    1328:	b.ls	1340 <elf_zlib_inflate+0x728>  // b.plast
    132c:	b	1690 <elf_zlib_inflate+0xa78>
    1330:	strh	w6, [x23, x0, lsl #1]
    1334:	add	x0, x0, x3
    1338:	cmp	x0, #0xff
    133c:	b.hi	1690 <elf_zlib_inflate+0xa78>  // b.pmore
    1340:	ldrh	w2, [x23, x0, lsl #1]
    1344:	cbz	w2, 1330 <elf_zlib_inflate+0x718>
    1348:	b	11f4 <elf_zlib_inflate+0x5dc>
    134c:	ldp	x0, x28, [sp, #120]
    1350:	str	x0, [sp, #144]
    1354:	stp	x22, x23, [sp, #160]
    1358:	mov	x22, x27
    135c:	mov	x23, x28
    1360:	mov	x27, x19
    1364:	mov	w26, #0x1                   	// #1
    1368:	cmp	w20, #0xe
    136c:	b.hi	1390 <elf_zlib_inflate+0x778>  // b.pmore
    1370:	sub	x0, x22, x27
    1374:	cmp	x0, #0x3
    1378:	b.le	1110 <elf_zlib_inflate+0x4f8>
    137c:	ldr	w0, [x27], #4
    1380:	lsl	x0, x0, x20
    1384:	add	w20, w20, #0x20
    1388:	prfm	pldl1strm, [x27]
    138c:	orr	x21, x21, x0
    1390:	and	x0, x21, #0xff
    1394:	ldrh	w1, [x23, x0, lsl #1]
    1398:	and	w25, w1, #0x1ff
    139c:	ubfx	x0, x1, #9, #3
    13a0:	tbnz	w1, #12, 13dc <elf_zlib_inflate+0x7c4>
    13a4:	add	w1, w0, #0x1
    13a8:	sub	w20, w20, #0x1
    13ac:	sub	w20, w20, w0
    13b0:	cmp	w25, #0xff
    13b4:	lsr	x21, x21, x1
    13b8:	b.hi	1414 <elf_zlib_inflate+0x7fc>  // b.pmore
    13bc:	ldr	x0, [sp, #104]
    13c0:	cmp	x24, x0
    13c4:	b.eq	1110 <elf_zlib_inflate+0x4f8>  // b.none
    13c8:	strb	w25, [x24], #1
    13cc:	cmp	w20, #0xe
    13d0:	prfm	pstl1keep, [x24]
    13d4:	b.ls	1370 <elf_zlib_inflate+0x758>  // b.plast
    13d8:	b	1390 <elf_zlib_inflate+0x778>
    13dc:	add	w25, w25, #0x100
    13e0:	lsl	w0, w26, w0
    13e4:	sub	w0, w0, #0x1
    13e8:	sub	w20, w20, #0x8
    13ec:	and	x0, x0, x21, lsr #8
    13f0:	add	x25, x0, w25, sxtw
    13f4:	ldrh	w0, [x23, x25, lsl #1]
    13f8:	and	w25, w0, #0x1ff
    13fc:	ubfx	x0, x0, #9, #3
    1400:	cmp	w25, #0xff
    1404:	add	w1, w0, #0x8
    1408:	sub	w20, w20, w0
    140c:	lsr	x21, x21, x1
    1410:	b.ls	13bc <elf_zlib_inflate+0x7a4>  // b.plast
    1414:	cmp	w25, #0x100
    1418:	b.eq	1a60 <elf_zlib_inflate+0xe48>  // b.none
    141c:	cmp	w25, #0x108
    1420:	b.hi	14b0 <elf_zlib_inflate+0x898>  // b.pmore
    1424:	sub	w25, w25, #0xfe
    1428:	cmp	w20, #0xe
    142c:	b.hi	1450 <elf_zlib_inflate+0x838>  // b.pmore
    1430:	sub	x0, x22, x27
    1434:	cmp	x0, #0x3
    1438:	b.le	1110 <elf_zlib_inflate+0x4f8>
    143c:	ldr	w0, [x27], #4
    1440:	lsl	x0, x0, x20
    1444:	add	w20, w20, #0x20
    1448:	prfm	pldl1strm, [x27]
    144c:	orr	x21, x21, x0
    1450:	ldr	x1, [sp, #144]
    1454:	and	x0, x21, #0xff
    1458:	ldrh	w2, [x1, x0, lsl #1]
    145c:	and	w0, w2, #0x1ff
    1460:	ubfx	x1, x2, #9, #3
    1464:	tbnz	w2, #12, 1524 <elf_zlib_inflate+0x90c>
    1468:	add	w2, w1, #0x1
    146c:	sub	w20, w20, #0x1
    1470:	sub	w20, w20, w1
    1474:	lsr	x21, x21, x2
    1478:	cbnz	w0, 155c <elf_zlib_inflate+0x944>
    147c:	ldr	x0, [sp, #112]
    1480:	cmp	x24, x0
    1484:	b.eq	1110 <elf_zlib_inflate+0x4f8>  // b.none
    1488:	ldr	x0, [sp, #104]
    148c:	sub	x0, x0, x24
    1490:	cmp	w25, w0
    1494:	b.hi	1110 <elf_zlib_inflate+0x4f8>  // b.pmore
    1498:	ldurb	w1, [x24, #-1]
    149c:	mov	w2, w25
    14a0:	mov	x0, x24
    14a4:	add	x24, x24, x2
    14a8:	bl	0 <__asan_internal_memset>
    14ac:	b	1368 <elf_zlib_inflate+0x750>
    14b0:	cmp	w25, #0x11d
    14b4:	b.eq	16d8 <elf_zlib_inflate+0xac0>  // b.none
    14b8:	b.hi	1110 <elf_zlib_inflate+0x4f8>  // b.pmore
    14bc:	cmp	w20, #0xe
    14c0:	b.hi	14e4 <elf_zlib_inflate+0x8cc>  // b.pmore
    14c4:	sub	x0, x22, x27
    14c8:	cmp	x0, #0x3
    14cc:	b.le	1110 <elf_zlib_inflate+0x4f8>
    14d0:	ldr	w0, [x27], #4
    14d4:	lsl	x0, x0, x20
    14d8:	add	w20, w20, #0x20
    14dc:	prfm	pldl1strm, [x27]
    14e0:	orr	x21, x21, x0
    14e4:	sub	w25, w25, #0x109
    14e8:	and	w1, w25, #0x3
    14ec:	lsr	w0, w25, #2
    14f0:	add	w2, w0, #0x1
    14f4:	lsl	w25, w26, w0
    14f8:	mov	w0, #0xffffffff            	// #-1
    14fc:	sub	w25, w25, #0x1
    1500:	lsl	w5, w0, w2
    1504:	bic	w5, w21, w5
    1508:	lsl	w0, w1, w2
    150c:	add	w25, w5, w25, lsl #3
    1510:	add	w0, w0, #0xb
    1514:	sub	w20, w20, w2
    1518:	add	w25, w25, w0
    151c:	lsr	x21, x21, x2
    1520:	b	1428 <elf_zlib_inflate+0x810>
    1524:	add	w0, w0, #0x100
    1528:	lsl	w1, w26, w1
    152c:	sub	w1, w1, #0x1
    1530:	sub	w20, w20, #0x8
    1534:	and	x1, x1, x21, lsr #8
    1538:	add	x0, x1, w0, sxtw
    153c:	ldr	x1, [sp, #144]
    1540:	ldrh	w1, [x1, x0, lsl #1]
    1544:	and	w0, w1, #0x1ff
    1548:	ubfx	x1, x1, #9, #3
    154c:	add	w2, w1, #0x8
    1550:	sub	w20, w20, w1
    1554:	lsr	x21, x21, x2
    1558:	cbz	w0, 147c <elf_zlib_inflate+0x864>
    155c:	cmp	w0, #0x1d
    1560:	b.hi	1110 <elf_zlib_inflate+0x4f8>  // b.pmore
    1564:	add	w19, w0, #0x1
    1568:	cmp	w0, #0x3
    156c:	b.ls	15d4 <elf_zlib_inflate+0x9bc>  // b.plast
    1570:	cmp	w20, #0xe
    1574:	b.hi	1598 <elf_zlib_inflate+0x980>  // b.pmore
    1578:	sub	x1, x22, x27
    157c:	cmp	x1, #0x3
    1580:	b.le	1110 <elf_zlib_inflate+0x4f8>
    1584:	ldr	w1, [x27], #4
    1588:	lsl	x1, x1, x20
    158c:	add	w20, w20, #0x20
    1590:	prfm	pldl1strm, [x27]
    1594:	orr	x21, x21, x1
    1598:	sub	w0, w0, #0x4
    159c:	and	w1, w0, #0x1
    15a0:	lsr	w0, w0, #1
    15a4:	add	w2, w0, #0x1
    15a8:	lsl	w19, w26, w0
    15ac:	mov	w0, #0xffffffff            	// #-1
    15b0:	sub	w19, w19, #0x1
    15b4:	lsl	w5, w0, w2
    15b8:	bic	w5, w21, w5
    15bc:	lsl	w0, w1, w2
    15c0:	add	w19, w5, w19, lsl #2
    15c4:	add	w0, w0, #0x5
    15c8:	sub	w20, w20, w2
    15cc:	add	w19, w19, w0
    15d0:	lsr	x21, x21, x2
    15d4:	ldr	x0, [sp, #112]
    15d8:	sub	x0, x24, x0
    15dc:	cmp	w19, w0
    15e0:	b.hi	1110 <elf_zlib_inflate+0x4f8>  // b.pmore
    15e4:	ldr	x0, [sp, #104]
    15e8:	sub	x0, x0, x24
    15ec:	cmp	w25, w0
    15f0:	b.hi	1110 <elf_zlib_inflate+0x4f8>  // b.pmore
    15f4:	mov	w28, w19
    15f8:	cmp	w19, w25
    15fc:	neg	x0, x28
    1600:	str	x0, [sp, #152]
    1604:	b.cc	1620 <elf_zlib_inflate+0xa08>  // b.lo, b.ul, b.last
    1608:	mov	w2, w25
    160c:	add	x1, x24, x0
    1610:	mov	x0, x24
    1614:	add	x24, x24, x2
    1618:	bl	0 <__asan_internal_memcpy>
    161c:	b	1368 <elf_zlib_inflate+0x750>
    1620:	cmp	w19, w25
    1624:	ldr	x0, [sp, #152]
    1628:	csel	w2, w19, w25, ls  // ls = plast
    162c:	csel	w28, w19, w25, ls  // ls = plast
    1630:	str	x2, [sp, #136]
    1634:	add	x1, x24, x0
    1638:	mov	x0, x24
    163c:	bl	0 <__asan_internal_memcpy>
    1640:	ldr	x2, [sp, #136]
    1644:	subs	w25, w25, w28
    1648:	add	x24, x24, x2
    164c:	b.ne	1620 <elf_zlib_inflate+0xa08>  // b.any
    1650:	b	1368 <elf_zlib_inflate+0x750>
    1654:	mov	w0, #0x0                   	// #0
    1658:	b	cf8 <elf_zlib_inflate+0xe0>
    165c:	sub	w20, w20, #0xc
    1660:	mov	x21, x0
    1664:	b	fc8 <elf_zlib_inflate+0x3b0>
    1668:	sub	w20, w20, #0x9
    166c:	mov	x21, x0
    1670:	b	fc8 <elf_zlib_inflate+0x3b0>
    1674:	add	w1, w1, w0
    1678:	b	1104 <elf_zlib_inflate+0x4ec>
    167c:	cbz	w5, 1080 <elf_zlib_inflate+0x468>
    1680:	b	11f4 <elf_zlib_inflate+0x5dc>
    1684:	sub	w20, w20, #0x3
    1688:	mov	x21, x0
    168c:	b	fc8 <elf_zlib_inflate+0x3b0>
    1690:	add	x10, x10, #0x1
    1694:	cmp	x10, x4
    1698:	b.cs	16a4 <elf_zlib_inflate+0xa8c>  // b.hs, b.nlast
    169c:	ubfiz	x7, x7, #1, #16
    16a0:	ldrh	w7, [x28, x7]
    16a4:	mov	w0, w8
    16a8:	tst	w1, w8
    16ac:	b.eq	197c <elf_zlib_inflate+0xd64>  // b.none
    16b0:	lsr	w0, w0, #1
    16b4:	tst	w1, w0
    16b8:	b.ne	16b0 <elf_zlib_inflate+0xa98>  // b.any
    16bc:	cbnz	w0, 197c <elf_zlib_inflate+0xd64>
    16c0:	mov	w1, #0x0                   	// #0
    16c4:	cmp	x10, x4
    16c8:	b.eq	1060 <elf_zlib_inflate+0x448>  // b.none
    16cc:	tst	w7, #0xfe00
    16d0:	b.eq	131c <elf_zlib_inflate+0x704>  // b.none
    16d4:	b	11f4 <elf_zlib_inflate+0x5dc>
    16d8:	mov	w25, #0x102                 	// #258
    16dc:	b	1428 <elf_zlib_inflate+0x810>
    16e0:	sub	w20, w20, #0x6
    16e4:	mov	x21, x0
    16e8:	b	fc8 <elf_zlib_inflate+0x3b0>
    16ec:	add	x30, sp, #0xb8
    16f0:	mov	x18, #0x0                   	// #0
    16f4:	mov	x6, #0x7                   	// #7
    16f8:	mov	w4, #0x1                   	// #1
    16fc:	lsl	x0, x6, #1
    1700:	add	x1, x25, x0
    1704:	ldrh	w9, [x1, #16]
    1708:	cbnz	w9, 1130 <elf_zlib_inflate+0x518>
    170c:	subs	x6, x6, #0x1
    1710:	b.ne	16fc <elf_zlib_inflate+0xae4>  // b.any
    1714:	ldr	w5, [sp, #144]
    1718:	mov	x0, #0x1278                	// #4728
    171c:	ldr	w4, [sp, #152]
    1720:	add	x26, x23, x0
    1724:	mov	x25, x26
    1728:	add	x3, x5, x4
    172c:	add	x3, x26, x3
    1730:	cmp	x26, x3
    1734:	b.cs	1928 <elf_zlib_inflate+0xd10>  // b.hs, b.nlast
    1738:	stp	x22, x5, [sp, #136]
    173c:	mov	x22, x23
    1740:	mov	x23, x21
    1744:	mov	x21, x26
    1748:	mov	x26, x19
    174c:	mov	x19, x27
    1750:	mov	x27, x3
    1754:	str	x4, [sp, #152]
    1758:	b	176c <elf_zlib_inflate+0xb54>
    175c:	sub	w20, w20, #0x1
    1760:	strb	w0, [x25], #1
    1764:	cmp	x27, x25
    1768:	b.ls	190c <elf_zlib_inflate+0xcf4>  // b.plast
    176c:	cmp	w20, #0xe
    1770:	b.hi	1794 <elf_zlib_inflate+0xb7c>  // b.pmore
    1774:	sub	x0, x19, x26
    1778:	cmp	x0, #0x3
    177c:	b.le	11f4 <elf_zlib_inflate+0x5dc>
    1780:	ldr	w0, [x26], #4
    1784:	lsl	x0, x0, x20
    1788:	add	w20, w20, #0x20
    178c:	prfm	pldl1strm, [x26]
    1790:	orr	x23, x23, x0
    1794:	and	x0, x23, #0xff
    1798:	ldrh	w0, [x22, x0, lsl #1]
    179c:	tbnz	w0, #12, 11f4 <elf_zlib_inflate+0x5dc>
    17a0:	ubfx	x1, x0, #9, #3
    17a4:	tst	w0, #0x1f0
    17a8:	add	w2, w1, #0x1
    17ac:	sub	w20, w20, w1
    17b0:	and	w0, w0, #0x1ff
    17b4:	lsr	x23, x23, x2
    17b8:	b.eq	175c <elf_zlib_inflate+0xb44>  // b.none
    17bc:	cmp	w0, #0x10
    17c0:	b.eq	1804 <elf_zlib_inflate+0xbec>  // b.none
    17c4:	cmp	w0, #0x11
    17c8:	b.eq	1858 <elf_zlib_inflate+0xc40>  // b.none
    17cc:	cmp	w0, #0x12
    17d0:	b.ne	11f4 <elf_zlib_inflate+0x5dc>  // b.any
    17d4:	and	w2, w23, #0x7f
    17d8:	sub	x0, x27, x25
    17dc:	add	w2, w2, #0xb
    17e0:	sub	w20, w20, #0x8
    17e4:	lsr	x23, x23, #7
    17e8:	cmp	w2, w0
    17ec:	b.hi	11f4 <elf_zlib_inflate+0x5dc>  // b.pmore
    17f0:	mov	x0, x25
    17f4:	mov	w1, #0x0                   	// #0
    17f8:	add	x25, x25, x2
    17fc:	bl	0 <__asan_internal_memset>
    1800:	b	1764 <elf_zlib_inflate+0xb4c>
    1804:	cmp	x25, x21
    1808:	b.eq	11f4 <elf_zlib_inflate+0x5dc>  // b.none
    180c:	and	w0, w23, #0x3
    1810:	sub	x1, x27, x25
    1814:	add	w0, w0, #0x3
    1818:	sub	w20, w20, #0x3
    181c:	lsr	x23, x23, #2
    1820:	cmp	w0, w1
    1824:	b.hi	11f4 <elf_zlib_inflate+0x5dc>  // b.pmore
    1828:	ldurb	w1, [x25, #-1]
    182c:	cmp	w0, #0x5
    1830:	b.eq	18c8 <elf_zlib_inflate+0xcb0>  // b.none
    1834:	cmp	w0, #0x6
    1838:	b.eq	18c4 <elf_zlib_inflate+0xcac>  // b.none
    183c:	cmp	w0, #0x4
    1840:	b.eq	18cc <elf_zlib_inflate+0xcb4>  // b.none
    1844:	add	x25, x25, #0x3
    1848:	sturb	w1, [x25, #-3]
    184c:	sturb	w1, [x25, #-2]
    1850:	sturb	w1, [x25, #-1]
    1854:	b	1764 <elf_zlib_inflate+0xb4c>
    1858:	and	w0, w23, #0x7
    185c:	sub	x1, x27, x25
    1860:	add	w0, w0, #0x3
    1864:	sub	w20, w20, #0x4
    1868:	lsr	x23, x23, #3
    186c:	cmp	w0, w1
    1870:	b.hi	11f4 <elf_zlib_inflate+0x5dc>  // b.pmore
    1874:	cmp	w0, #0x7
    1878:	b.eq	18f0 <elf_zlib_inflate+0xcd8>  // b.none
    187c:	b.hi	18d4 <elf_zlib_inflate+0xcbc>  // b.pmore
    1880:	cmp	w0, #0x5
    1884:	b.eq	1898 <elf_zlib_inflate+0xc80>  // b.none
    1888:	cmp	w0, #0x6
    188c:	b.ne	18b4 <elf_zlib_inflate+0xc9c>  // b.any
    1890:	strb	wzr, [x25], #1
    1894:	nop
    1898:	strb	wzr, [x25], #1
    189c:	mov	x0, x25
    18a0:	strb	wzr, [x0], #1
    18a4:	mov	x25, x0
    18a8:	strh	wzr, [x25], #3
    18ac:	strb	wzr, [x0, #2]
    18b0:	b	1764 <elf_zlib_inflate+0xb4c>
    18b4:	cmp	w0, #0x4
    18b8:	b.eq	189c <elf_zlib_inflate+0xc84>  // b.none
    18bc:	mov	x0, x25
    18c0:	b	18a4 <elf_zlib_inflate+0xc8c>
    18c4:	strb	w1, [x25], #1
    18c8:	strb	w1, [x25], #1
    18cc:	strb	w1, [x25], #1
    18d0:	b	1844 <elf_zlib_inflate+0xc2c>
    18d4:	cmp	w0, #0x9
    18d8:	b.eq	18e8 <elf_zlib_inflate+0xcd0>  // b.none
    18dc:	cmp	w0, #0xa
    18e0:	b.ne	18fc <elf_zlib_inflate+0xce4>  // b.any
    18e4:	strb	wzr, [x25], #1
    18e8:	strb	wzr, [x25], #1
    18ec:	strb	wzr, [x25], #1
    18f0:	strb	wzr, [x25], #1
    18f4:	strb	wzr, [x25], #1
    18f8:	b	1898 <elf_zlib_inflate+0xc80>
    18fc:	cmp	w0, #0x8
    1900:	b.ne	18bc <elf_zlib_inflate+0xca4>  // b.any
    1904:	strb	wzr, [x25], #1
    1908:	b	18f0 <elf_zlib_inflate+0xcd8>
    190c:	mov	x27, x19
    1910:	mov	x19, x26
    1914:	mov	x26, x21
    1918:	mov	x21, x23
    191c:	mov	x23, x22
    1920:	ldp	x22, x5, [sp, #136]
    1924:	ldr	x4, [sp, #152]
    1928:	str	x4, [sp, #152]
    192c:	ldrb	w0, [x28, #888]
    1930:	cbz	w0, 11f4 <elf_zlib_inflate+0x5dc>
    1934:	mov	x3, x23
    1938:	mov	x2, x23
    193c:	mov	x1, x5
    1940:	mov	x0, x26
    1944:	str	x5, [sp, #136]
    1948:	bl	320 <elf_zlib_inflate_table>
    194c:	cbz	w0, 11f4 <elf_zlib_inflate+0x5dc>
    1950:	ldr	x5, [sp, #136]
    1954:	add	x3, x23, #0x800
    1958:	ldr	x4, [sp, #152]
    195c:	mov	x2, x23
    1960:	add	x0, x26, x5
    1964:	str	x3, [sp, #144]
    1968:	mov	x1, x4
    196c:	bl	320 <elf_zlib_inflate_table>
    1970:	cbz	w0, 11f4 <elf_zlib_inflate+0x5dc>
    1974:	mov	x28, x23
    1978:	b	1354 <elf_zlib_inflate+0x73c>
    197c:	sub	w2, w0, #0x1
    1980:	and	w1, w2, w1
    1984:	add	w1, w0, w1
    1988:	b	16c4 <elf_zlib_inflate+0xaac>
    198c:	str	x24, [sp, #112]
    1990:	ldp	x21, x22, [sp, #32]
    1994:	ldp	x23, x24, [sp, #48]
    1998:	ldp	x27, x28, [sp, #80]
    199c:	ldp	x1, x0, [sp, #104]
    19a0:	cmp	x0, x1
    19a4:	cset	w0, eq  // eq = none
    19a8:	b	1120 <elf_zlib_inflate+0x508>
    19ac:	mov	w20, w0
    19b0:	b	fc8 <elf_zlib_inflate+0x3b0>
    19b4:	sub	w20, w0, #0x3
    19b8:	mov	x21, x1
    19bc:	b	fc8 <elf_zlib_inflate+0x3b0>
    19c0:	sub	x0, x27, x19
    19c4:	mov	x4, x27
    19c8:	cmp	x0, #0x4
    19cc:	b.le	198c <elf_zlib_inflate+0xd74>
    19d0:	ldp	x21, x22, [sp, #32]
    19d4:	ldp	x27, x28, [sp, #80]
    19d8:	b	c64 <elf_zlib_inflate+0x4c>
    19dc:	sub	w20, w0, #0x6
    19e0:	mov	x21, x1
    19e4:	b	fc8 <elf_zlib_inflate+0x3b0>
    19e8:	sub	w20, w0, #0x9
    19ec:	mov	x21, x1
    19f0:	b	fc8 <elf_zlib_inflate+0x3b0>
    19f4:	sub	w20, w0, #0xc
    19f8:	mov	x21, x1
    19fc:	b	fc8 <elf_zlib_inflate+0x3b0>
    1a00:	add	x16, x16, #0x1
    1a04:	cmp	x9, x16
    1a08:	b.ls	1a14 <elf_zlib_inflate+0xdfc>  // b.plast
    1a0c:	ubfiz	x12, x12, #1, #16
    1a10:	ldrh	w12, [x28, x12]
    1a14:	mov	w0, w10
    1a18:	tst	w10, w7
    1a1c:	b.eq	1a74 <elf_zlib_inflate+0xe5c>  // b.none
    1a20:	lsr	w0, w0, #1
    1a24:	tst	w0, w7
    1a28:	b.ne	1a20 <elf_zlib_inflate+0xe08>  // b.any
    1a2c:	cbnz	w0, 1a74 <elf_zlib_inflate+0xe5c>
    1a30:	mov	w7, #0x0                   	// #0
    1a34:	cmp	x9, x16
    1a38:	b.ne	117c <elf_zlib_inflate+0x564>  // b.any
    1a3c:	b	170c <elf_zlib_inflate+0xaf4>
    1a40:	tbz	w0, #12, 11f4 <elf_zlib_inflate+0x5dc>
    1a44:	ubfx	x17, x0, #9, #3
    1a48:	and	x15, x0, #0x1ff
    1a4c:	cmp	x17, x6
    1a50:	mov	x2, x17
    1a54:	b.cc	11f4 <elf_zlib_inflate+0x5dc>  // b.lo, b.ul, b.last
    1a58:	mov	x13, x1
    1a5c:	b	11bc <elf_zlib_inflate+0x5a4>
    1a60:	mov	x19, x27
    1a64:	mov	w0, w20
    1a68:	mov	x27, x22
    1a6c:	ldp	x22, x23, [sp, #160]
    1a70:	b	12d8 <elf_zlib_inflate+0x6c0>
    1a74:	sub	w1, w0, #0x1
    1a78:	and	w7, w1, w7
    1a7c:	add	w7, w0, w7
    1a80:	b	1a34 <elf_zlib_inflate+0xe1c>
    1a84:	nop

0000000000001a88 <elf_uncompress_zdebug.part.0>:
    1a88:	stp	x29, x30, [sp, #-80]!
    1a8c:	mov	x29, sp
    1a90:	stp	x19, x20, [sp, #16]
    1a94:	mov	x20, x2
    1a98:	mov	x2, x4
    1a9c:	stp	x21, x22, [sp, #32]
    1aa0:	mov	x21, x6
    1aa4:	mov	x22, x1
    1aa8:	stp	x23, x24, [sp, #48]
    1aac:	mov	x24, x7
    1ab0:	ldr	x23, [x6]
    1ab4:	str	x25, [sp, #64]
    1ab8:	mov	x25, x3
    1abc:	mov	x3, x5
    1ac0:	ldrb	w6, [x1, #5]
    1ac4:	ldrb	w8, [x1, #4]
    1ac8:	ldrb	w10, [x1, #6]
    1acc:	ldrb	w1, [x1, #7]
    1ad0:	orr	x8, x6, x8, lsl #8
    1ad4:	ldrb	w9, [x22, #8]
    1ad8:	ldrb	w6, [x22, #9]
    1adc:	orr	x8, x10, x8, lsl #8
    1ae0:	ldrb	w19, [x22, #10]
    1ae4:	orr	x8, x1, x8, lsl #8
    1ae8:	ldrb	w1, [x22, #11]
    1aec:	orr	x8, x9, x8, lsl #8
    1af0:	orr	x8, x6, x8, lsl #8
    1af4:	orr	x19, x19, x8, lsl #8
    1af8:	orr	x19, x1, x19, lsl #8
    1afc:	cbz	x23, 1b4c <elf_uncompress_zdebug.part.0+0xc4>
    1b00:	ldr	x1, [x7]
    1b04:	cmp	x19, x1
    1b08:	b.hi	1b4c <elf_uncompress_zdebug.part.0+0xc4>  // b.pmore
    1b0c:	add	x22, x22, #0xc
    1b10:	mov	x2, x25
    1b14:	mov	x0, x22
    1b18:	mov	x4, x19
    1b1c:	mov	x3, x23
    1b20:	sub	x1, x20, #0xc
    1b24:	mov	w25, #0x1                   	// #1
    1b28:	bl	c18 <elf_zlib_inflate>
    1b2c:	cbnz	w0, 1b64 <elf_uncompress_zdebug.part.0+0xdc>
    1b30:	mov	w0, w25
    1b34:	ldp	x19, x20, [sp, #16]
    1b38:	ldp	x21, x22, [sp, #32]
    1b3c:	ldp	x23, x24, [sp, #48]
    1b40:	ldr	x25, [sp, #64]
    1b44:	ldp	x29, x30, [sp], #80
    1b48:	ret
    1b4c:	mov	x1, x19
    1b50:	bl	0 <__asan_backtrace_alloc>
    1b54:	mov	x23, x0
    1b58:	cbnz	x0, 1b0c <elf_uncompress_zdebug.part.0+0x84>
    1b5c:	mov	w25, #0x0                   	// #0
    1b60:	b	1b30 <elf_uncompress_zdebug.part.0+0xa8>
    1b64:	sub	x0, x20, #0x10
    1b68:	mov	x2, x19
    1b6c:	add	x0, x22, x0
    1b70:	mov	x1, x23
    1b74:	bl	60 <elf_zlib_verify_checksum>
    1b78:	cbz	w0, 1b30 <elf_uncompress_zdebug.part.0+0xa8>
    1b7c:	str	x23, [x21]
    1b80:	mov	w0, w25
    1b84:	str	x19, [x24]
    1b88:	ldp	x19, x20, [sp, #16]
    1b8c:	ldp	x21, x22, [sp, #32]
    1b90:	ldp	x23, x24, [sp, #48]
    1b94:	ldr	x25, [sp, #64]
    1b98:	ldp	x29, x30, [sp], #80
    1b9c:	ret

0000000000001ba0 <elf_add>:
    1ba0:	sub	sp, sp, #0x4c0
    1ba4:	stp	x29, x30, [sp, #80]
    1ba8:	add	x29, sp, #0x50
    1bac:	stp	x21, x22, [sp, #112]
    1bb0:	mov	x21, x0
    1bb4:	ldr	w0, [sp, #1240]
    1bb8:	stp	x19, x20, [sp, #96]
    1bbc:	mov	w22, w2
    1bc0:	mov	x19, x4
    1bc4:	stp	x23, x24, [sp, #128]
    1bc8:	mov	x20, x5
    1bcc:	stp	x25, x26, [sp, #144]
    1bd0:	mov	x26, x7
    1bd4:	stp	x3, x6, [sp, #192]
    1bd8:	str	x1, [sp, #208]
    1bdc:	cbnz	w0, 1bec <elf_add+0x4c>
    1be0:	ldr	x0, [sp, #1216]
    1be4:	str	wzr, [x7]
    1be8:	str	wzr, [x0]
    1bec:	add	x23, sp, #0x1b8
    1bf0:	mov	x5, x20
    1bf4:	mov	x6, x23
    1bf8:	mov	x4, x19
    1bfc:	mov	w1, w22
    1c00:	mov	x0, x21
    1c04:	mov	x3, #0x40                  	// #64
    1c08:	mov	x2, #0x0                   	// #0
    1c0c:	bl	0 <__asan_backtrace_get_view>
    1c10:	cbnz	w0, 1c78 <elf_add+0xd8>
    1c14:	mov	w23, #0x0                   	// #0
    1c18:	mov	x24, #0x0                   	// #0
    1c1c:	nop
    1c20:	cbnz	w23, 1cd0 <elf_add+0x130>
    1c24:	cbz	x24, 1c3c <elf_add+0x9c>
    1c28:	add	x1, x24, #0x18
    1c2c:	mov	x0, x21
    1c30:	mov	x3, x20
    1c34:	mov	x2, x19
    1c38:	bl	0 <__asan_backtrace_release_view>
    1c3c:	cmn	w22, #0x1
    1c40:	mov	w24, #0x0                   	// #0
    1c44:	b.eq	1c58 <elf_add+0xb8>  // b.none
    1c48:	mov	x2, x20
    1c4c:	mov	x1, x19
    1c50:	mov	w0, w22
    1c54:	bl	0 <__asan_backtrace_close>
    1c58:	mov	w0, w24
    1c5c:	ldp	x29, x30, [sp, #80]
    1c60:	ldp	x19, x20, [sp, #96]
    1c64:	ldp	x21, x22, [sp, #112]
    1c68:	ldp	x23, x24, [sp, #128]
    1c6c:	ldp	x25, x26, [sp, #144]
    1c70:	add	sp, sp, #0x4c0
    1c74:	ret
    1c78:	ldr	x1, [sp, #440]
    1c7c:	mov	x2, #0x40                  	// #64
    1c80:	add	x0, sp, #0x2c0
    1c84:	bl	0 <__asan_internal_memcpy>
    1c88:	mov	x1, x23
    1c8c:	mov	x0, x21
    1c90:	mov	x3, x20
    1c94:	mov	x2, x19
    1c98:	bl	0 <__asan_backtrace_release_view>
    1c9c:	ldr	w1, [sp, #704]
    1ca0:	mov	w0, #0x457f                	// #17791
    1ca4:	movk	w0, #0x464c, lsl #16
    1ca8:	cmp	w1, w0
    1cac:	b.eq	1ce8 <elf_add+0x148>  // b.none
    1cb0:	mov	x0, x20
    1cb4:	adrp	x1, 0 <elf_nodebug>
    1cb8:	mov	w2, #0x0                   	// #0
    1cbc:	add	x1, x1, #0x0
    1cc0:	mov	w23, #0x0                   	// #0
    1cc4:	mov	x24, #0x0                   	// #0
    1cc8:	blr	x19
    1ccc:	b	1c20 <elf_add+0x80>
    1cd0:	mov	x3, x20
    1cd4:	mov	x2, x19
    1cd8:	add	x1, sp, #0x300
    1cdc:	mov	x0, x21
    1ce0:	bl	0 <__asan_backtrace_release_view>
    1ce4:	b	1c24 <elf_add+0x84>
    1ce8:	ldrb	w0, [sp, #710]
    1cec:	cmp	w0, #0x1
    1cf0:	b.ne	1d20 <elf_add+0x180>  // b.any
    1cf4:	ldrb	w0, [sp, #708]
    1cf8:	cmp	w0, #0x2
    1cfc:	b.eq	1d40 <elf_add+0x1a0>  // b.none
    1d00:	mov	x0, x20
    1d04:	adrp	x1, 0 <elf_nodebug>
    1d08:	mov	w2, #0x0                   	// #0
    1d0c:	add	x1, x1, #0x0
    1d10:	mov	w23, #0x0                   	// #0
    1d14:	mov	x24, #0x0                   	// #0
    1d18:	blr	x19
    1d1c:	b	1c20 <elf_add+0x80>
    1d20:	mov	x0, x20
    1d24:	adrp	x1, 0 <elf_nodebug>
    1d28:	mov	w2, #0x0                   	// #0
    1d2c:	add	x1, x1, #0x0
    1d30:	mov	w23, #0x0                   	// #0
    1d34:	mov	x24, #0x0                   	// #0
    1d38:	blr	x19
    1d3c:	b	1c20 <elf_add+0x80>
    1d40:	ldrb	w0, [sp, #709]
    1d44:	sub	w0, w0, #0x1
    1d48:	and	w0, w0, #0xff
    1d4c:	cmp	w0, #0x1
    1d50:	b.hi	1e48 <elf_add+0x2a8>  // b.pmore
    1d54:	ldr	w0, [sp, #1232]
    1d58:	cbz	w0, 1d68 <elf_add+0x1c8>
    1d5c:	ldrh	w0, [sp, #720]
    1d60:	cmp	w0, #0x3
    1d64:	b.eq	342c <elf_add+0x188c>  // b.none
    1d68:	ldrh	w0, [sp, #764]
    1d6c:	ldrh	w24, [sp, #766]
    1d70:	ldr	x25, [sp, #744]
    1d74:	cmp	w0, #0x0
    1d78:	stp	x27, x28, [sp, #160]
    1d7c:	mov	w27, #0xffff                	// #65535
    1d80:	ccmp	w24, w27, #0x4, ne  // ne = any
    1d84:	str	w0, [sp, #256]
    1d88:	ccmp	x25, #0x0, #0x4, eq  // eq = none
    1d8c:	b.ne	1e80 <elf_add+0x2e0>  // b.any
    1d90:	ldr	w23, [sp, #256]
    1d94:	add	x0, sp, #0x1d0
    1d98:	mov	x6, x0
    1d9c:	add	x2, x25, #0x40
    1da0:	sub	w3, w23, #0x1
    1da4:	mov	x5, x20
    1da8:	mov	x4, x19
    1dac:	mov	w1, w22
    1db0:	lsl	x3, x3, #6
    1db4:	str	x0, [sp, #240]
    1db8:	mov	x0, x21
    1dbc:	bl	0 <__asan_backtrace_get_view>
    1dc0:	cbz	w0, 1e74 <elf_add+0x2d4>
    1dc4:	ldr	x27, [sp, #464]
    1dc8:	sub	w3, w24, #0x1
    1dcc:	add	x0, sp, #0x1e8
    1dd0:	mov	x5, x20
    1dd4:	mov	x6, x0
    1dd8:	mov	x4, x19
    1ddc:	add	x3, x27, x3, lsl #6
    1de0:	mov	w1, w22
    1de4:	str	x0, [sp, #248]
    1de8:	mov	x0, x21
    1dec:	str	x27, [sp, #344]
    1df0:	ldp	x2, x3, [x3, #24]
    1df4:	str	x3, [sp, #328]
    1df8:	bl	0 <__asan_backtrace_get_view>
    1dfc:	cbnz	w0, 1ef0 <elf_add+0x350>
    1e00:	ldr	x1, [sp, #240]
    1e04:	mov	x3, x20
    1e08:	mov	x2, x19
    1e0c:	mov	x0, x21
    1e10:	mov	w23, #0x0                   	// #0
    1e14:	mov	x24, #0x0                   	// #0
    1e18:	bl	0 <__asan_backtrace_release_view>
    1e1c:	str	wzr, [sp, #224]
    1e20:	ldr	w0, [sp, #224]
    1e24:	cbz	w0, 1e68 <elf_add+0x2c8>
    1e28:	mov	x3, x20
    1e2c:	mov	x2, x19
    1e30:	add	x1, sp, #0x230
    1e34:	mov	x0, x21
    1e38:	bl	0 <__asan_backtrace_release_view>
    1e3c:	ldp	x27, x28, [sp, #160]
    1e40:	cbz	w23, 1c24 <elf_add+0x84>
    1e44:	b	1cd0 <elf_add+0x130>
    1e48:	mov	x0, x20
    1e4c:	adrp	x1, 0 <elf_nodebug>
    1e50:	mov	w2, #0x0                   	// #0
    1e54:	add	x1, x1, #0x0
    1e58:	mov	w23, #0x0                   	// #0
    1e5c:	mov	x24, #0x0                   	// #0
    1e60:	blr	x19
    1e64:	b	1c20 <elf_add+0x80>
    1e68:	ldp	x27, x28, [sp, #160]
    1e6c:	cbz	w23, 1c24 <elf_add+0x84>
    1e70:	b	1cd0 <elf_add+0x130>
    1e74:	mov	w23, #0x0                   	// #0
    1e78:	ldp	x27, x28, [sp, #160]
    1e7c:	b	1c18 <elf_add+0x78>
    1e80:	add	x0, sp, #0x380
    1e84:	mov	x5, x20
    1e88:	mov	x6, x0
    1e8c:	mov	x4, x19
    1e90:	mov	x2, x25
    1e94:	mov	w1, w22
    1e98:	mov	x3, #0x8                   	// #8
    1e9c:	str	x0, [sp, #264]
    1ea0:	mov	x0, x21
    1ea4:	bl	0 <__asan_backtrace_get_view>
    1ea8:	mov	w23, w0
    1eac:	cbz	w0, 23f4 <elf_add+0x854>
    1eb0:	ldr	w1, [sp, #256]
    1eb4:	ldr	x0, [sp, #896]
    1eb8:	cbz	w1, 2378 <elf_add+0x7d8>
    1ebc:	ldr	w24, [x0, #40]
    1ec0:	mov	w1, #0xffff                	// #65535
    1ec4:	ldr	w0, [sp, #256]
    1ec8:	cmp	w24, w0
    1ecc:	sub	w0, w24, #0x100
    1ed0:	ccmp	w24, w1, #0x0, cs  // cs = hs, nlast
    1ed4:	csel	w24, w0, w24, hi  // hi = pmore
    1ed8:	ldr	x1, [sp, #264]
    1edc:	mov	x3, x20
    1ee0:	mov	x2, x19
    1ee4:	mov	x0, x21
    1ee8:	bl	0 <__asan_backtrace_release_view>
    1eec:	b	1d90 <elf_add+0x1f0>
    1ef0:	add	x0, sp, #0x380
    1ef4:	mov	x2, #0x140                 	// #320
    1ef8:	mov	w1, #0x0                   	// #0
    1efc:	str	x0, [sp, #264]
    1f00:	ldr	x28, [sp, #488]
    1f04:	bl	0 <__asan_internal_memset>
    1f08:	ldr	w0, [sp, #1240]
    1f0c:	cmp	w23, #0x1
    1f10:	eor	w0, w0, #0x1
    1f14:	and	w0, w0, #0x1
    1f18:	str	w0, [sp, #388]
    1f1c:	b.ls	33e8 <elf_add+0x1848>  // b.plast
    1f20:	ldr	x1, [sp, #1248]
    1f24:	mov	x24, #0x0                   	// #0
    1f28:	mov	w2, #0x0                   	// #0
    1f2c:	str	x21, [sp, #288]
    1f30:	cmp	x1, #0x0
    1f34:	add	x1, sp, #0x290
    1f38:	csinc	w0, w0, wzr, eq  // eq = none
    1f3c:	str	w0, [sp, #232]
    1f40:	add	x0, sp, #0x2a8
    1f44:	stp	x26, x1, [sp, #392]
    1f48:	add	x1, sp, #0x388
    1f4c:	str	x0, [sp, #408]
    1f50:	adrp	x0, 0 <elf_nodebug>
    1f54:	add	x0, x0, #0x0
    1f58:	str	x1, [sp, #280]
    1f5c:	ldr	x26, [sp, #328]
    1f60:	mov	w1, #0x1                   	// #1
    1f64:	mov	x21, x0
    1f68:	str	w22, [sp, #300]
    1f6c:	mov	w22, w1
    1f70:	str	x24, [sp, #336]
    1f74:	mov	w24, w2
    1f78:	mov	w25, #0x0                   	// #0
    1f7c:	str	wzr, [sp, #216]
    1f80:	str	wzr, [sp, #224]
    1f84:	str	wzr, [sp, #272]
    1f88:	stp	x19, x20, [sp, #304]
    1f8c:	str	xzr, [sp, #320]
    1f90:	str	xzr, [sp, #352]
    1f94:	str	wzr, [sp, #360]
    1f98:	str	wzr, [sp, #364]
    1f9c:	stp	xzr, xzr, [sp, #368]
    1fa0:	str	wzr, [sp, #384]
    1fa4:	nop
    1fa8:	ldr	w0, [x27, #4]
    1fac:	cmp	w0, #0x2
    1fb0:	b.eq	21e4 <elf_add+0x644>  // b.none
    1fb4:	cmp	w0, #0xb
    1fb8:	csel	w24, w24, w22, ne  // ne = any
    1fbc:	ldr	w19, [x27]
    1fc0:	cmp	x19, x26
    1fc4:	b.cs	2344 <elf_add+0x7a4>  // b.hs, b.nlast
    1fc8:	add	x19, x28, x19
    1fcc:	mov	x23, #0x0                   	// #0
    1fd0:	ldr	x1, [x21, x23, lsl #3]
    1fd4:	mov	w20, w23
    1fd8:	mov	x0, x19
    1fdc:	add	x23, x23, #0x1
    1fe0:	bl	0 <__asan_internal_strcmp>
    1fe4:	cbz	w0, 21b4 <elf_add+0x614>
    1fe8:	cmp	x23, #0xa
    1fec:	b.ne	1fd0 <elf_add+0x430>  // b.any
    1ff0:	ldr	w0, [sp, #232]
    1ff4:	cbz	w0, 2028 <elf_add+0x488>
    1ff8:	ldr	w0, [sp, #224]
    1ffc:	cbz	w0, 22c8 <elf_add+0x728>
    2000:	ldr	w1, [sp, #216]
    2004:	ldr	w0, [sp, #1240]
    2008:	orr	w0, w0, w1
    200c:	cbnz	w0, 2028 <elf_add+0x488>
    2010:	mov	x0, x19
    2014:	adrp	x1, 0 <elf_nodebug>
    2018:	add	x1, x1, #0x0
    201c:	bl	0 <__asan_internal_strcmp>
    2020:	str	wzr, [sp, #216]
    2024:	cbz	w0, 2138 <elf_add+0x598>
    2028:	cbz	w25, 2258 <elf_add+0x6b8>
    202c:	ldrh	w0, [sp, #722]
    2030:	cmp	w0, #0x15
    2034:	b.eq	21ec <elf_add+0x64c>  // b.none
    2038:	ldr	w0, [sp, #256]
    203c:	add	w22, w22, #0x1
    2040:	add	x27, x27, #0x40
    2044:	cmp	w0, w22
    2048:	b.ne	1fa8 <elf_add+0x408>  // b.any
    204c:	ldr	w0, [sp, #272]
    2050:	ldr	w1, [sp, #388]
    2054:	cmp	w0, #0x0
    2058:	str	w25, [sp, #232]
    205c:	csel	w0, w0, w24, ne  // ne = any
    2060:	ldr	w22, [sp, #300]
    2064:	cmp	w0, #0x0
    2068:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    206c:	ldr	x21, [sp, #288]
    2070:	ldp	x19, x20, [sp, #304]
    2074:	ldr	x24, [sp, #336]
    2078:	ldr	x26, [sp, #392]
    207c:	b.eq	2988 <elf_add+0xde8>  // b.none
    2080:	ldr	x1, [sp, #344]
    2084:	sub	w0, w0, #0x1
    2088:	add	x25, x1, x0, lsl #6
    208c:	ldr	w0, [sp, #256]
    2090:	ldr	w27, [x25, #40]
    2094:	cmp	w0, w27
    2098:	b.hi	2400 <elf_add+0x860>  // b.pmore
    209c:	mov	w23, #0x0                   	// #0
    20a0:	mov	w28, #0x0                   	// #0
    20a4:	mov	x0, x20
    20a8:	adrp	x1, 0 <elf_nodebug>
    20ac:	mov	w2, #0x0                   	// #0
    20b0:	add	x1, x1, #0x0
    20b4:	blr	x19
    20b8:	ldr	x1, [sp, #240]
    20bc:	mov	x3, x20
    20c0:	mov	x2, x19
    20c4:	mov	x0, x21
    20c8:	bl	0 <__asan_backtrace_release_view>
    20cc:	ldr	x1, [sp, #248]
    20d0:	mov	x3, x20
    20d4:	mov	x2, x19
    20d8:	mov	x0, x21
    20dc:	bl	0 <__asan_backtrace_release_view>
    20e0:	cbz	w28, 20f8 <elf_add+0x558>
    20e4:	mov	x3, x20
    20e8:	mov	x2, x19
    20ec:	add	x1, sp, #0x200
    20f0:	mov	x0, x21
    20f4:	bl	0 <__asan_backtrace_release_view>
    20f8:	cbnz	w23, 2198 <elf_add+0x5f8>
    20fc:	ldr	w0, [sp, #216]
    2100:	cbz	w0, 2118 <elf_add+0x578>
    2104:	mov	x3, x20
    2108:	mov	x2, x19
    210c:	add	x1, sp, #0x248
    2110:	mov	x0, x21
    2114:	bl	0 <__asan_backtrace_release_view>
    2118:	ldr	w0, [sp, #232]
    211c:	cbz	w0, 1e20 <elf_add+0x280>
    2120:	mov	x3, x20
    2124:	mov	x2, x19
    2128:	add	x1, sp, #0x260
    212c:	mov	x0, x21
    2130:	bl	0 <__asan_backtrace_release_view>
    2134:	b	1e20 <elf_add+0x280>
    2138:	ldp	x2, x3, [x27, #24]
    213c:	add	x6, sp, #0x248
    2140:	ldp	x4, x5, [sp, #304]
    2144:	ldr	w1, [sp, #300]
    2148:	ldr	x0, [sp, #288]
    214c:	bl	0 <__asan_backtrace_get_view>
    2150:	mov	w20, w0
    2154:	cbz	w0, 2ec4 <elf_add+0x1324>
    2158:	ldr	x1, [x27, #32]
    215c:	mov	w0, #0x1                   	// #1
    2160:	ldr	x20, [sp, #584]
    2164:	str	w0, [sp, #216]
    2168:	mov	x0, x20
    216c:	bl	0 <__asan_internal_strnlen>
    2170:	add	x0, x0, #0x3
    2174:	ldr	x1, [x27, #32]
    2178:	and	x0, x0, #0xfffffffffffffffc
    217c:	add	x2, x0, #0x4
    2180:	cmp	x2, x1
    2184:	b.hi	2028 <elf_add+0x488>  // b.pmore
    2188:	ldr	w0, [x20, x0]
    218c:	str	w0, [sp, #360]
    2190:	str	x20, [sp, #376]
    2194:	b	2028 <elf_add+0x488>
    2198:	mov	w23, #0x0                   	// #0
    219c:	mov	x3, x20
    21a0:	mov	x2, x19
    21a4:	add	x1, sp, #0x218
    21a8:	mov	x0, x21
    21ac:	bl	0 <__asan_backtrace_release_view>
    21b0:	b	20fc <elf_add+0x55c>
    21b4:	ldr	x2, [sp, #264]
    21b8:	sbfiz	x20, x20, #5, #32
    21bc:	ldr	x0, [x27, #24]
    21c0:	add	x1, sp, #0x398
    21c4:	str	x0, [x2, x20]
    21c8:	ldr	x2, [sp, #280]
    21cc:	ldr	x0, [x27, #32]
    21d0:	str	x0, [x2, x20]
    21d4:	ldr	x0, [x27, #8]
    21d8:	ubfx	w0, w0, #11, #1
    21dc:	str	w0, [x1, x20]
    21e0:	b	1ff0 <elf_add+0x450>
    21e4:	str	w22, [sp, #272]
    21e8:	b	1fbc <elf_add+0x41c>
    21ec:	ldr	w0, [sp, #752]
    21f0:	tbnz	w0, #1, 2038 <elf_add+0x498>
    21f4:	ldr	w0, [x27, #4]
    21f8:	cmp	w0, #0x1
    21fc:	b.ne	2038 <elf_add+0x498>  // b.any
    2200:	adrp	x1, 0 <elf_nodebug>
    2204:	mov	x0, x19
    2208:	add	x1, x1, #0x0
    220c:	bl	0 <__asan_internal_strcmp>
    2210:	cbnz	w0, 2038 <elf_add+0x498>
    2214:	ldp	x2, x3, [x27, #24]
    2218:	ldp	x4, x5, [sp, #304]
    221c:	ldr	w1, [sp, #300]
    2220:	ldr	x0, [sp, #288]
    2224:	ldr	x6, [sp, #408]
    2228:	bl	0 <__asan_backtrace_get_view>
    222c:	mov	w20, w0
    2230:	cbz	w0, 2ec4 <elf_add+0x1324>
    2234:	ldr	x0, [x27, #16]
    2238:	str	x0, [sp, #656]
    223c:	ldr	x0, [sp, #400]
    2240:	str	x0, [sp, #336]
    2244:	ldr	x0, [x27, #32]
    2248:	str	x0, [sp, #672]
    224c:	ldr	x0, [sp, #680]
    2250:	str	x0, [sp, #664]
    2254:	b	2038 <elf_add+0x498>
    2258:	adrp	x1, 0 <elf_nodebug>
    225c:	mov	x0, x19
    2260:	add	x1, x1, #0x0
    2264:	bl	0 <__asan_internal_strcmp>
    2268:	cbnz	w0, 202c <elf_add+0x48c>
    226c:	ldp	x2, x3, [x27, #24]
    2270:	add	x6, sp, #0x260
    2274:	ldp	x4, x5, [sp, #304]
    2278:	ldr	w1, [sp, #300]
    227c:	ldr	x0, [sp, #288]
    2280:	bl	0 <__asan_backtrace_get_view>
    2284:	mov	w20, w0
    2288:	cbz	w0, 2ec4 <elf_add+0x1324>
    228c:	ldr	x1, [x27, #32]
    2290:	mov	w25, #0x1                   	// #1
    2294:	ldr	x20, [sp, #608]
    2298:	str	x20, [sp, #320]
    229c:	mov	x0, x20
    22a0:	bl	0 <__asan_internal_strnlen>
    22a4:	ldr	x1, [x27, #32]
    22a8:	cmp	x1, x0
    22ac:	b.ls	202c <elf_add+0x48c>  // b.plast
    22b0:	add	x0, x0, #0x1
    22b4:	sub	w1, w1, w0
    22b8:	add	x0, x20, x0
    22bc:	str	x0, [sp, #352]
    22c0:	str	w1, [sp, #364]
    22c4:	b	202c <elf_add+0x48c>
    22c8:	mov	x0, x19
    22cc:	adrp	x1, 0 <elf_nodebug>
    22d0:	add	x1, x1, #0x0
    22d4:	bl	0 <__asan_internal_strcmp>
    22d8:	mov	w20, w0
    22dc:	cbnz	w0, 2000 <elf_add+0x460>
    22e0:	ldp	x2, x3, [x27, #24]
    22e4:	add	x6, sp, #0x230
    22e8:	ldp	x4, x5, [sp, #304]
    22ec:	ldr	w1, [sp, #300]
    22f0:	ldr	x0, [sp, #288]
    22f4:	bl	0 <__asan_backtrace_get_view>
    22f8:	cbz	w0, 323c <elf_add+0x169c>
    22fc:	ldr	x3, [sp, #560]
    2300:	ldr	w0, [x3, #8]
    2304:	cmp	w0, #0x3
    2308:	b.eq	238c <elf_add+0x7ec>  // b.none
    230c:	ldr	w0, [sp, #1256]
    2310:	cbz	w0, 2338 <elf_add+0x798>
    2314:	ldr	w0, [sp, #384]
    2318:	ldr	w1, [sp, #1256]
    231c:	cmp	w0, w1
    2320:	b.ne	32ac <elf_add+0x170c>  // b.any
    2324:	mov	w2, w0
    2328:	ldr	x0, [sp, #368]
    232c:	ldr	x1, [sp, #1248]
    2330:	bl	0 <__asan_internal_memcmp>
    2334:	cbnz	w0, 32ac <elf_add+0x170c>
    2338:	mov	w0, #0x1                   	// #1
    233c:	str	w0, [sp, #224]
    2340:	b	2000 <elf_add+0x460>
    2344:	ldp	x19, x20, [sp, #304]
    2348:	str	w25, [sp, #232]
    234c:	ldr	w22, [sp, #300]
    2350:	adrp	x1, 0 <elf_nodebug>
    2354:	mov	w2, #0x0                   	// #0
    2358:	add	x1, x1, #0x0
    235c:	mov	w23, #0x0                   	// #0
    2360:	mov	w28, #0x0                   	// #0
    2364:	ldr	x21, [sp, #288]
    2368:	mov	x0, x20
    236c:	ldr	x24, [sp, #336]
    2370:	blr	x19
    2374:	b	20b8 <elf_add+0x518>
    2378:	ldr	w1, [x0, #32]
    237c:	cmp	w24, w27
    2380:	str	w1, [sp, #256]
    2384:	b.ne	1ed8 <elf_add+0x338>  // b.any
    2388:	b	1ebc <elf_add+0x31c>
    238c:	ldr	w0, [x3]
    2390:	cmp	w0, #0x4
    2394:	b.ne	230c <elf_add+0x76c>  // b.any
    2398:	add	x4, x3, #0xc
    239c:	adrp	x1, 0 <elf_nodebug>
    23a0:	mov	x0, x4
    23a4:	add	x1, x1, #0x0
    23a8:	mov	x2, #0x4                   	// #4
    23ac:	str	x4, [sp, #224]
    23b0:	str	x3, [sp, #328]
    23b4:	bl	0 <__asan_internal_strncmp>
    23b8:	cbnz	w0, 230c <elf_add+0x76c>
    23bc:	ldr	x3, [sp, #328]
    23c0:	ldp	w0, w2, [x3]
    23c4:	ldr	x3, [x27, #32]
    23c8:	add	w0, w0, #0x3
    23cc:	and	w0, w0, #0xfffffffc
    23d0:	add	w1, w2, #0xc
    23d4:	add	w1, w1, w0
    23d8:	cmp	x3, x1
    23dc:	b.hi	230c <elf_add+0x76c>  // b.pmore
    23e0:	ldr	x4, [sp, #224]
    23e4:	str	w2, [sp, #384]
    23e8:	add	x0, x4, w0, uxtw
    23ec:	str	x0, [sp, #368]
    23f0:	b	230c <elf_add+0x76c>
    23f4:	mov	x24, #0x0                   	// #0
    23f8:	ldp	x27, x28, [sp, #160]
    23fc:	b	1c20 <elf_add+0x80>
    2400:	ldp	x2, x3, [x25, #24]
    2404:	add	x0, sp, #0x200
    2408:	mov	x6, x0
    240c:	mov	x5, x20
    2410:	mov	x4, x19
    2414:	mov	w1, w22
    2418:	mov	w23, #0x0                   	// #0
    241c:	str	x0, [sp, #256]
    2420:	mov	x0, x21
    2424:	bl	0 <__asan_backtrace_get_view>
    2428:	mov	w28, w0
    242c:	cbz	w0, 20b8 <elf_add+0x518>
    2430:	ldr	x0, [sp, #344]
    2434:	sub	w7, w27, #0x1
    2438:	add	x6, sp, #0x218
    243c:	mov	x5, x20
    2440:	mov	x4, x19
    2444:	mov	w1, w22
    2448:	add	x7, x0, x7, lsl #6
    244c:	mov	x0, x21
    2450:	str	x7, [sp, #272]
    2454:	ldp	x2, x3, [x7, #24]
    2458:	bl	0 <__asan_backtrace_get_view>
    245c:	mov	w23, w0
    2460:	cbz	w0, 3234 <elf_add+0x1694>
    2464:	mov	x3, x20
    2468:	mov	x2, x19
    246c:	mov	x0, x21
    2470:	mov	x1, #0x18                  	// #24
    2474:	bl	0 <__asan_backtrace_alloc>
    2478:	mov	x23, x0
    247c:	cbz	x0, 3604 <elf_add+0x1a64>
    2480:	ldr	x0, [x25, #32]
    2484:	mov	x27, #0x18                  	// #24
    2488:	ldr	x7, [sp, #272]
    248c:	cmp	x0, #0x17
    2490:	udiv	x27, x0, x27
    2494:	ldr	x28, [sp, #512]
    2498:	ldr	x6, [x7, #32]
    249c:	ldr	x4, [sp, #536]
    24a0:	b.ls	3684 <elf_add+0x1ae4>  // b.plast
    24a4:	cmp	x0, #0x17f
    24a8:	b.ls	3674 <elf_add+0x1ad4>  // b.plast
    24ac:	lsr	x1, x27, #4
    24b0:	mov	x2, #0x180                 	// #384
    24b4:	movi	v4.4s, #0x0
    24b8:	mov	x0, x28
    24bc:	movi	v17.16b, #0xf
    24c0:	str	d8, [sp, #176]
    24c4:	mvni	v6.4s, #0x0
    24c8:	madd	x1, x1, x2, x28
    24cc:	movi	v5.4s, #0x1
    24d0:	adrp	x2, 0 <elf_nodebug>
    24d4:	ldr	q16, [x2]
    24d8:	ldr	b3, [x0, #28]
    24dc:	ldr	b0, [x0, #4]
    24e0:	ldr	b2, [x0, #52]
    24e4:	ldr	b1, [x0, #76]
    24e8:	mov	v0.b[1], v3.b[0]
    24ec:	ldr	b7, [x0, #100]
    24f0:	ldr	b23, [x0, #124]
    24f4:	ldr	b24, [x0, #148]
    24f8:	ldr	b21, [x0, #172]
    24fc:	mov	v0.b[2], v2.b[0]
    2500:	ldr	b31, [x0, #196]
    2504:	ldr	b28, [x0, #220]
    2508:	ldr	b25, [x0, #244]
    250c:	ldr	b22, [x0, #268]
    2510:	mov	v0.b[3], v1.b[0]
    2514:	ldr	b20, [x0, #292]
    2518:	ldr	h3, [x0, #30]
    251c:	ldr	h2, [x0, #6]
    2520:	ldr	b18, [x0, #316]
    2524:	mov	v0.b[4], v7.b[0]
    2528:	ldr	h1, [x0, #54]
    252c:	mov	v2.h[1], v3.h[0]
    2530:	ldr	b7, [x0, #340]
    2534:	ldr	h8, [x0, #78]
    2538:	ldr	b3, [x0, #364]
    253c:	mov	v0.b[5], v23.b[0]
    2540:	ldr	h23, [x0, #222]
    2544:	mov	v2.h[2], v1.h[0]
    2548:	ldr	h1, [x0, #198]
    254c:	ldr	h19, [x0, #102]
    2550:	ldr	h29, [x0, #270]
    2554:	mov	v0.b[6], v24.b[0]
    2558:	ldr	h30, [x0, #126]
    255c:	mov	v1.h[1], v23.h[0]
    2560:	ldr	h26, [x0, #294]
    2564:	mov	v2.h[3], v8.h[0]
    2568:	ldr	h8, [x0, #246]
    256c:	ldr	h27, [x0, #150]
    2570:	add	x0, x0, #0x180
    2574:	mov	v0.b[7], v21.b[0]
    2578:	ldur	h23, [x0, #-66]
    257c:	mov	v1.h[2], v8.h[0]
    2580:	ldur	h24, [x0, #-210]
    2584:	mov	v2.h[4], v19.h[0]
    2588:	ldur	h21, [x0, #-42]
    258c:	ldur	h19, [x0, #-18]
    2590:	cmp	x1, x0
    2594:	mov	v0.b[8], v31.b[0]
    2598:	mov	v1.h[3], v29.h[0]
    259c:	mov	v2.h[5], v30.h[0]
    25a0:	mov	v0.b[9], v28.b[0]
    25a4:	mov	v1.h[4], v26.h[0]
    25a8:	mov	v2.h[6], v27.h[0]
    25ac:	mov	v0.b[10], v25.b[0]
    25b0:	mov	v1.h[5], v23.h[0]
    25b4:	mov	v2.h[7], v24.h[0]
    25b8:	mov	v0.b[11], v22.b[0]
    25bc:	mov	v1.h[6], v21.h[0]
    25c0:	cmeq	v2.8h, v2.8h, #0
    25c4:	mov	v0.b[12], v20.b[0]
    25c8:	mov	v1.h[7], v19.h[0]
    25cc:	mov	v0.b[13], v18.b[0]
    25d0:	cmeq	v1.8h, v1.8h, #0
    25d4:	mov	v0.b[14], v7.b[0]
    25d8:	mov	v0.b[15], v3.b[0]
    25dc:	and	v0.16b, v0.16b, v17.16b
    25e0:	uxtl	v3.8h, v0.8b
    25e4:	uxtl2	v0.8h, v0.16b
    25e8:	uaddw	v18.4s, v6.4s, v3.4h
    25ec:	uaddw2	v3.4s, v6.4s, v3.8h
    25f0:	uaddw	v7.4s, v6.4s, v0.4h
    25f4:	uaddw2	v0.4s, v6.4s, v0.8h
    25f8:	cmhs	v18.4s, v5.4s, v18.4s
    25fc:	cmhs	v3.4s, v5.4s, v3.4s
    2600:	cmhs	v7.4s, v5.4s, v7.4s
    2604:	cmhs	v0.4s, v5.4s, v0.4s
    2608:	xtn	v19.4h, v18.4s
    260c:	xtn2	v19.8h, v3.4s
    2610:	xtn	v3.4h, v7.4s
    2614:	xtn2	v3.8h, v0.4s
    2618:	bic	v2.16b, v19.16b, v2.16b
    261c:	bic	v0.16b, v3.16b, v1.16b
    2620:	sxtl	v7.4s, v2.4h
    2624:	sxtl2	v1.4s, v2.8h
    2628:	sxtl	v3.4s, v0.4h
    262c:	sxtl2	v0.4s, v0.8h
    2630:	sxtl	v2.2d, v7.2s
    2634:	and	v2.16b, v16.16b, v2.16b
    2638:	ssubw2	v2.2d, v2.2d, v7.4s
    263c:	ssubw	v2.2d, v2.2d, v1.2s
    2640:	ssubw2	v1.2d, v2.2d, v1.4s
    2644:	ssubw	v1.2d, v1.2d, v3.2s
    2648:	ssubw2	v1.2d, v1.2d, v3.4s
    264c:	ssubw	v1.2d, v1.2d, v0.2s
    2650:	ssubw2	v0.2d, v1.2d, v0.4s
    2654:	add	v4.2d, v4.2d, v0.2d
    2658:	b.ne	24d8 <elf_add+0x938>  // b.any
    265c:	addp	d4, v4.2d
    2660:	and	x1, x27, #0xfffffffffffffff0
    2664:	mov	x0, #0x18                  	// #24
    2668:	cmp	x1, x27
    266c:	ldr	d8, [sp, #176]
    2670:	madd	x0, x1, x0, x28
    2674:	mov	x25, v4.d[0]
    2678:	b.eq	2854 <elf_add+0xcb4>  // b.none
    267c:	ldrb	w2, [x0, #4]
    2680:	and	w2, w2, #0xf
    2684:	sub	w2, w2, #0x1
    2688:	cmp	w2, #0x1
    268c:	b.ls	34ec <elf_add+0x194c>  // b.plast
    2690:	add	x2, x1, #0x1
    2694:	cmp	x27, x2
    2698:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    269c:	ldrb	w2, [x0, #28]
    26a0:	and	w2, w2, #0xf
    26a4:	sub	w2, w2, #0x1
    26a8:	cmp	w2, #0x1
    26ac:	b.ls	34dc <elf_add+0x193c>  // b.plast
    26b0:	add	x2, x1, #0x2
    26b4:	cmp	x27, x2
    26b8:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    26bc:	ldrb	w2, [x0, #52]
    26c0:	and	w2, w2, #0xf
    26c4:	sub	w2, w2, #0x1
    26c8:	cmp	w2, #0x1
    26cc:	b.ls	34cc <elf_add+0x192c>  // b.plast
    26d0:	add	x2, x1, #0x3
    26d4:	cmp	x27, x2
    26d8:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    26dc:	ldrb	w2, [x0, #76]
    26e0:	and	w2, w2, #0xf
    26e4:	sub	w2, w2, #0x1
    26e8:	cmp	w2, #0x1
    26ec:	b.ls	34bc <elf_add+0x191c>  // b.plast
    26f0:	add	x2, x1, #0x4
    26f4:	cmp	x27, x2
    26f8:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    26fc:	ldrb	w2, [x0, #100]
    2700:	and	w2, w2, #0xf
    2704:	sub	w2, w2, #0x1
    2708:	cmp	w2, #0x1
    270c:	b.ls	3664 <elf_add+0x1ac4>  // b.plast
    2710:	add	x2, x1, #0x5
    2714:	cmp	x27, x2
    2718:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    271c:	ldrb	w2, [x0, #124]
    2720:	and	w2, w2, #0xf
    2724:	sub	w2, w2, #0x1
    2728:	cmp	w2, #0x1
    272c:	b.ls	3654 <elf_add+0x1ab4>  // b.plast
    2730:	add	x2, x1, #0x6
    2734:	cmp	x27, x2
    2738:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    273c:	ldrb	w2, [x0, #148]
    2740:	and	w2, w2, #0xf
    2744:	sub	w2, w2, #0x1
    2748:	cmp	w2, #0x1
    274c:	b.ls	3644 <elf_add+0x1aa4>  // b.plast
    2750:	add	x2, x1, #0x7
    2754:	cmp	x27, x2
    2758:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    275c:	ldrb	w2, [x0, #172]
    2760:	and	w2, w2, #0xf
    2764:	sub	w2, w2, #0x1
    2768:	cmp	w2, #0x1
    276c:	b.ls	3634 <elf_add+0x1a94>  // b.plast
    2770:	add	x2, x1, #0x8
    2774:	cmp	x27, x2
    2778:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    277c:	ldrb	w2, [x0, #196]
    2780:	and	w2, w2, #0xf
    2784:	sub	w2, w2, #0x1
    2788:	cmp	w2, #0x1
    278c:	b.ls	36f8 <elf_add+0x1b58>  // b.plast
    2790:	add	x2, x1, #0x9
    2794:	cmp	x27, x2
    2798:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    279c:	ldrb	w2, [x0, #220]
    27a0:	and	w2, w2, #0xf
    27a4:	sub	w2, w2, #0x1
    27a8:	cmp	w2, #0x1
    27ac:	b.ls	36e8 <elf_add+0x1b48>  // b.plast
    27b0:	add	x2, x1, #0xa
    27b4:	cmp	x27, x2
    27b8:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    27bc:	ldrb	w2, [x0, #244]
    27c0:	and	w2, w2, #0xf
    27c4:	sub	w2, w2, #0x1
    27c8:	cmp	w2, #0x1
    27cc:	b.ls	36d8 <elf_add+0x1b38>  // b.plast
    27d0:	add	x2, x1, #0xb
    27d4:	cmp	x27, x2
    27d8:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    27dc:	ldrb	w2, [x0, #268]
    27e0:	and	w2, w2, #0xf
    27e4:	sub	w2, w2, #0x1
    27e8:	cmp	w2, #0x1
    27ec:	b.ls	36c8 <elf_add+0x1b28>  // b.plast
    27f0:	add	x2, x1, #0xc
    27f4:	cmp	x27, x2
    27f8:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    27fc:	ldrb	w2, [x0, #292]
    2800:	and	w2, w2, #0xf
    2804:	sub	w2, w2, #0x1
    2808:	cmp	w2, #0x1
    280c:	b.ls	36b8 <elf_add+0x1b18>  // b.plast
    2810:	add	x2, x1, #0xd
    2814:	cmp	x27, x2
    2818:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    281c:	ldrb	w2, [x0, #316]
    2820:	and	w2, w2, #0xf
    2824:	sub	w2, w2, #0x1
    2828:	cmp	w2, #0x1
    282c:	b.ls	36a8 <elf_add+0x1b08>  // b.plast
    2830:	add	x1, x1, #0xe
    2834:	cmp	x27, x1
    2838:	b.ls	2854 <elf_add+0xcb4>  // b.plast
    283c:	ldrb	w1, [x0, #340]
    2840:	add	x0, x0, #0x150
    2844:	and	w1, w1, #0xf
    2848:	sub	w1, w1, #0x1
    284c:	cmp	w1, #0x1
    2850:	b.ls	35f4 <elf_add+0x1a54>  // b.plast
    2854:	mov	x7, #0x18                  	// #24
    2858:	mov	x3, x20
    285c:	mov	x2, x19
    2860:	mov	x0, x21
    2864:	mul	x8, x25, x7
    2868:	str	x6, [sp, #288]
    286c:	stp	x8, x4, [sp, #272]
    2870:	mov	x1, x8
    2874:	bl	0 <__asan_backtrace_alloc>
    2878:	mov	x5, x0
    287c:	mov	x7, #0x18                  	// #24
    2880:	ldp	x8, x4, [sp, #272]
    2884:	ldr	x6, [sp, #288]
    2888:	cbz	x0, 3344 <elf_add+0x17a4>
    288c:	cbz	x24, 3368 <elf_add+0x17c8>
    2890:	mov	x1, #0x0                   	// #0
    2894:	mov	w3, #0x0                   	// #0
    2898:	ldrb	w0, [x28, #4]
    289c:	add	x1, x1, #0x1
    28a0:	and	w0, w0, #0xf
    28a4:	sub	w0, w0, #0x1
    28a8:	cmp	w0, #0x1
    28ac:	b.hi	2918 <elf_add+0xd78>  // b.pmore
    28b0:	ldrh	w2, [x28, #6]
    28b4:	umull	x0, w3, w7
    28b8:	add	x9, x5, x0
    28bc:	cbz	w2, 2918 <elf_add+0xd78>
    28c0:	ldr	w2, [x28]
    28c4:	add	w3, w3, #0x1
    28c8:	add	x10, x4, x2
    28cc:	cmp	x6, x2
    28d0:	b.ls	3310 <elf_add+0x1770>  // b.plast
    28d4:	str	x10, [x5, x0]
    28d8:	ldr	x2, [x24]
    28dc:	ldr	x0, [x28, #8]
    28e0:	cmp	x2, x0
    28e4:	b.hi	2904 <elf_add+0xd64>  // b.pmore
    28e8:	ldr	x11, [x24, #16]
    28ec:	sub	x10, x0, x2
    28f0:	add	x2, x2, x11
    28f4:	cmp	x2, x0
    28f8:	b.ls	2904 <elf_add+0xd64>  // b.plast
    28fc:	ldr	x0, [x24, #8]
    2900:	ldr	x0, [x0, x10]
    2904:	ldr	x2, [sp, #192]
    2908:	add	x0, x2, x0
    290c:	str	x0, [x9, #8]
    2910:	ldr	x0, [x28, #16]
    2914:	str	x0, [x9, #16]
    2918:	add	x28, x28, #0x18
    291c:	cmp	x27, x1
    2920:	b.hi	2898 <elf_add+0xcf8>  // b.pmore
    2924:	mov	x0, x5
    2928:	mov	x1, x25
    292c:	mov	x2, #0x18                  	// #24
    2930:	adrp	x3, 0 <elf_nodebug>
    2934:	add	x3, x3, #0x0
    2938:	str	x5, [sp, #272]
    293c:	bl	0 <__asan_backtrace_qsort>
    2940:	str	x25, [x23, #16]
    2944:	ldr	x1, [sp, #256]
    2948:	mov	x0, x21
    294c:	ldr	x5, [sp, #272]
    2950:	stp	xzr, x5, [x23]
    2954:	mov	x3, x20
    2958:	mov	x2, x19
    295c:	bl	0 <__asan_backtrace_release_view>
    2960:	mov	w0, #0x1                   	// #1
    2964:	str	w0, [x26]
    2968:	add	x1, x21, #0x30
    296c:	ldr	w0, [x21, #8]
    2970:	cbnz	w0, 32d4 <elf_add+0x1734>
    2974:	ldr	x0, [x21, #48]
    2978:	cbz	x0, 33d8 <elf_add+0x1838>
    297c:	mov	x1, x0
    2980:	ldr	x0, [x0]
    2984:	b	2978 <elf_add+0xdd8>
    2988:	str	wzr, [sp, #256]
    298c:	ldr	x1, [sp, #240]
    2990:	mov	x3, x20
    2994:	mov	x2, x19
    2998:	mov	x0, x21
    299c:	bl	0 <__asan_backtrace_release_view>
    29a0:	ldr	x1, [sp, #248]
    29a4:	mov	x0, x21
    29a8:	mov	x3, x20
    29ac:	mov	x2, x19
    29b0:	bl	0 <__asan_backtrace_release_view>
    29b4:	ldr	x0, [sp, #368]
    29b8:	cbz	x0, 2acc <elf_add+0xf2c>
    29bc:	adrp	x4, 0 <elf_nodebug>
    29c0:	add	x4, x4, #0x0
    29c4:	mov	x0, x4
    29c8:	str	x4, [sp, #248]
    29cc:	bl	0 <__asan_internal_strlen>
    29d0:	ldr	w27, [sp, #384]
    29d4:	mov	x23, x0
    29d8:	adrp	x0, 0 <elf_nodebug>
    29dc:	add	x0, x0, #0x0
    29e0:	bl	0 <__asan_internal_strlen>
    29e4:	add	x1, x27, #0x1
    29e8:	add	x25, x23, x0
    29ec:	mov	x3, x20
    29f0:	mov	x2, x19
    29f4:	add	x25, x25, x1, lsl #1
    29f8:	str	x0, [sp, #240]
    29fc:	mov	x1, x25
    2a00:	mov	x0, x21
    2a04:	bl	0 <__asan_backtrace_alloc>
    2a08:	mov	x28, x0
    2a0c:	cbz	x0, 2acc <elf_add+0xf2c>
    2a10:	ldr	x4, [sp, #248]
    2a14:	mov	x2, x23
    2a18:	add	x23, x0, x23
    2a1c:	mov	x1, x4
    2a20:	bl	0 <__asan_internal_memcpy>
    2a24:	cbz	x27, 2a7c <elf_add+0xedc>
    2a28:	mov	x2, #0x0                   	// #0
    2a2c:	mov	w6, #0x2f                  	// #47
    2a30:	ldr	x0, [sp, #368]
    2a34:	ldrb	w0, [x0, x2]
    2a38:	and	w1, w0, #0xf
    2a3c:	lsr	w0, w0, #4
    2a40:	add	w3, w1, #0x30
    2a44:	cmp	w0, #0x9
    2a48:	add	w4, w0, #0x30
    2a4c:	add	w0, w0, #0x57
    2a50:	csel	w0, w0, w4, hi  // hi = pmore
    2a54:	cmp	w1, #0x9
    2a58:	add	w1, w1, #0x57
    2a5c:	strb	w0, [x23]
    2a60:	csel	w0, w1, w3, hi  // hi = pmore
    2a64:	strb	w0, [x23, #1]
    2a68:	cbz	x2, 2bb0 <elf_add+0x1010>
    2a6c:	add	x2, x2, #0x1
    2a70:	add	x23, x23, #0x2
    2a74:	cmp	x27, x2
    2a78:	b.ne	2a30 <elf_add+0xe90>  // b.any
    2a7c:	ldr	x27, [sp, #240]
    2a80:	adrp	x0, 0 <elf_nodebug>
    2a84:	add	x1, x0, #0x0
    2a88:	mov	x0, x23
    2a8c:	mov	x2, x27
    2a90:	bl	0 <__asan_internal_memcpy>
    2a94:	strb	wzr, [x23, x27]
    2a98:	add	x3, sp, #0x300
    2a9c:	mov	x2, x20
    2aa0:	mov	x1, x19
    2aa4:	mov	x0, x28
    2aa8:	bl	0 <__asan_backtrace_open>
    2aac:	mov	x2, x25
    2ab0:	mov	w23, w0
    2ab4:	mov	x1, x28
    2ab8:	mov	x4, x20
    2abc:	mov	x3, x19
    2ac0:	mov	x0, x21
    2ac4:	bl	0 <__asan_backtrace_free>
    2ac8:	tbz	w23, #31, 325c <elf_add+0x16bc>
    2acc:	ldr	w0, [sp, #224]
    2ad0:	cbnz	w0, 2b98 <elf_add+0xff8>
    2ad4:	cbz	x24, 2aec <elf_add+0xf4c>
    2ad8:	add	x1, x24, #0x18
    2adc:	mov	x3, x20
    2ae0:	mov	x2, x19
    2ae4:	mov	x0, x21
    2ae8:	bl	0 <__asan_backtrace_release_view>
    2aec:	ldr	x0, [sp, #376]
    2af0:	cbz	x0, 2c78 <elf_add+0x10d8>
    2af4:	ldr	x1, [sp, #208]
    2af8:	mov	x2, x0
    2afc:	mov	x4, x20
    2b00:	mov	x3, x19
    2b04:	mov	x0, x21
    2b08:	bl	918 <elf_find_debugfile_by_debuglink>
    2b0c:	mov	w23, w0
    2b10:	tbnz	w0, #31, 2c78 <elf_add+0x10d8>
    2b14:	ldr	w0, [sp, #360]
    2b18:	cbnz	w0, 2bcc <elf_add+0x102c>
    2b1c:	mov	x3, x20
    2b20:	mov	x2, x19
    2b24:	add	x1, sp, #0x248
    2b28:	mov	x0, x21
    2b2c:	bl	0 <__asan_backtrace_release_view>
    2b30:	ldr	w0, [sp, #232]
    2b34:	cbnz	w0, 3294 <elf_add+0x16f4>
    2b38:	ldp	x3, x6, [sp, #192]
    2b3c:	mov	w0, #0x1                   	// #1
    2b40:	ldr	x1, [sp, #1216]
    2b44:	stp	x1, xzr, [sp]
    2b48:	mov	w2, w23
    2b4c:	str	wzr, [sp, #16]
    2b50:	mov	x7, x26
    2b54:	str	w0, [sp, #24]
    2b58:	mov	x5, x20
    2b5c:	str	xzr, [sp, #32]
    2b60:	mov	x4, x19
    2b64:	str	wzr, [sp, #40]
    2b68:	mov	x0, x21
    2b6c:	adrp	x1, 0 <elf_nodebug>
    2b70:	add	x1, x1, #0x0
    2b74:	bl	1ba0 <elf_add>
    2b78:	mov	w24, w0
    2b7c:	mov	x2, x20
    2b80:	mov	x1, x19
    2b84:	tbnz	w0, #31, 3284 <elf_add+0x16e4>
    2b88:	mov	w0, w22
    2b8c:	bl	0 <__asan_backtrace_close>
    2b90:	ldp	x27, x28, [sp, #160]
    2b94:	b	1c58 <elf_add+0xb8>
    2b98:	mov	x3, x20
    2b9c:	mov	x2, x19
    2ba0:	add	x1, sp, #0x230
    2ba4:	mov	x0, x21
    2ba8:	bl	0 <__asan_backtrace_release_view>
    2bac:	b	2ad4 <elf_add+0xf34>
    2bb0:	strb	w6, [x23, #2]
    2bb4:	add	x0, x23, #0x3
    2bb8:	cmp	x27, #0x1
    2bbc:	mov	x23, x0
    2bc0:	b.eq	2a7c <elf_add+0xedc>  // b.none
    2bc4:	mov	x2, #0x1                   	// #1
    2bc8:	b	2a30 <elf_add+0xe90>
    2bcc:	add	x2, sp, #0x300
    2bd0:	mov	w1, w23
    2bd4:	mov	w0, #0x0                   	// #0
    2bd8:	bl	0 <__fxstat>
    2bdc:	tbnz	w0, #31, 3434 <elf_add+0x1894>
    2be0:	ldr	x3, [sp, #816]
    2be4:	add	x25, sp, #0x278
    2be8:	mov	x6, x25
    2bec:	mov	x5, x20
    2bf0:	mov	x4, x19
    2bf4:	mov	w1, w23
    2bf8:	mov	x0, x21
    2bfc:	mov	x2, #0x0                   	// #0
    2c00:	bl	0 <__asan_backtrace_get_view>
    2c04:	cbz	w0, 2c68 <elf_add+0x10c8>
    2c08:	ldr	x2, [sp, #632]
    2c0c:	adrp	x0, 0 <elf_nodebug>
    2c10:	ldr	x3, [sp, #816]
    2c14:	add	x0, x0, #0x0
    2c18:	add	x0, x0, #0x4e0
    2c1c:	mov	w24, #0xffffffff            	// #-1
    2c20:	add	x3, x2, x3
    2c24:	b	2c3c <elf_add+0x109c>
    2c28:	ldrb	w1, [x2], #1
    2c2c:	eor	w1, w1, w24
    2c30:	and	x1, x1, #0xff
    2c34:	ldr	w1, [x0, x1, lsl #2]
    2c38:	eor	w24, w1, w24, lsr #8
    2c3c:	cmp	x3, x2
    2c40:	b.hi	2c28 <elf_add+0x1088>  // b.pmore
    2c44:	mov	x0, x21
    2c48:	mov	x1, x25
    2c4c:	mov	x3, x20
    2c50:	mov	x2, x19
    2c54:	bl	0 <__asan_backtrace_release_view>
    2c58:	mvn	w24, w24
    2c5c:	ldr	w0, [sp, #360]
    2c60:	cmp	w24, w0
    2c64:	b.eq	2b1c <elf_add+0xf7c>  // b.none
    2c68:	mov	w0, w23
    2c6c:	mov	x2, x20
    2c70:	mov	x1, x19
    2c74:	bl	0 <__asan_backtrace_close>
    2c78:	ldr	w0, [sp, #216]
    2c7c:	cbnz	w0, 31f8 <elf_add+0x1658>
    2c80:	ldr	x0, [sp, #320]
    2c84:	str	xzr, [sp, #424]
    2c88:	cbz	x0, 31a0 <elf_add+0x1600>
    2c8c:	ldr	x24, [sp, #208]
    2c90:	mov	x2, x0
    2c94:	mov	x4, x20
    2c98:	mov	x3, x19
    2c9c:	mov	x0, x21
    2ca0:	mov	x1, x24
    2ca4:	bl	918 <elf_find_debugfile_by_debuglink>
    2ca8:	mov	w23, w0
    2cac:	tbnz	w0, #31, 31a0 <elf_add+0x1600>
    2cb0:	mov	w8, #0x1                   	// #1
    2cb4:	str	w8, [sp, #24]
    2cb8:	ldp	x3, x6, [sp, #192]
    2cbc:	add	x0, sp, #0x1a8
    2cc0:	ldr	x8, [sp, #352]
    2cc4:	str	x8, [sp, #32]
    2cc8:	ldr	w8, [sp, #364]
    2ccc:	mov	x7, x26
    2cd0:	ldr	x1, [sp, #1216]
    2cd4:	mov	x5, x20
    2cd8:	mov	x4, x19
    2cdc:	stp	x1, x0, [sp]
    2ce0:	mov	w2, w23
    2ce4:	str	wzr, [sp, #16]
    2ce8:	mov	x1, x24
    2cec:	str	w8, [sp, #40]
    2cf0:	mov	x0, x21
    2cf4:	bl	1ba0 <elf_add>
    2cf8:	mov	w24, w0
    2cfc:	mov	x3, x20
    2d00:	mov	x2, x19
    2d04:	add	x1, sp, #0x260
    2d08:	mov	x0, x21
    2d0c:	bl	0 <__asan_backtrace_release_view>
    2d10:	tbnz	w24, #31, 327c <elf_add+0x16dc>
    2d14:	ldr	x3, [sp, #904]
    2d18:	cbz	x3, 2eac <elf_add+0x130c>
    2d1c:	ldr	x24, [sp, #896]
    2d20:	ldr	x1, [sp, #936]
    2d24:	adds	x3, x24, x3
    2d28:	csel	x3, x3, xzr, pl  // pl = nfrst
    2d2c:	cbz	x1, 2d4c <elf_add+0x11ac>
    2d30:	ldr	x0, [sp, #928]
    2d34:	cbz	x24, 2ebc <elf_add+0x131c>
    2d38:	cmp	x24, x0
    2d3c:	b.gt	2ebc <elf_add+0x131c>
    2d40:	add	x0, x0, x1
    2d44:	cmp	x3, x0
    2d48:	csel	x3, x3, x0, ge  // ge = tcont
    2d4c:	ldr	x1, [sp, #968]
    2d50:	cbz	x1, 2d70 <elf_add+0x11d0>
    2d54:	ldr	x0, [sp, #960]
    2d58:	cbz	x24, 2ea4 <elf_add+0x1304>
    2d5c:	cmp	x24, x0
    2d60:	b.gt	2ea4 <elf_add+0x1304>
    2d64:	add	x0, x0, x1
    2d68:	cmp	x3, x0
    2d6c:	csel	x3, x3, x0, ge  // ge = tcont
    2d70:	ldr	x1, [sp, #1000]
    2d74:	cbz	x1, 2d90 <elf_add+0x11f0>
    2d78:	ldr	x0, [sp, #992]
    2d7c:	cbnz	x24, 31c0 <elf_add+0x1620>
    2d80:	mov	x24, x0
    2d84:	add	x0, x0, x1
    2d88:	cmp	x3, x0
    2d8c:	csel	x3, x3, x0, ge  // ge = tcont
    2d90:	ldr	x1, [sp, #1032]
    2d94:	cbz	x1, 2db0 <elf_add+0x1210>
    2d98:	ldr	x0, [sp, #1024]
    2d9c:	cbnz	x24, 31cc <elf_add+0x162c>
    2da0:	mov	x24, x0
    2da4:	add	x0, x0, x1
    2da8:	cmp	x3, x0
    2dac:	csel	x3, x3, x0, ge  // ge = tcont
    2db0:	ldr	x1, [sp, #1064]
    2db4:	cbz	x1, 2dd0 <elf_add+0x1230>
    2db8:	ldr	x0, [sp, #1056]
    2dbc:	cbnz	x24, 31d8 <elf_add+0x1638>
    2dc0:	mov	x24, x0
    2dc4:	add	x0, x0, x1
    2dc8:	cmp	x3, x0
    2dcc:	csel	x3, x3, x0, ge  // ge = tcont
    2dd0:	ldr	x1, [sp, #1096]
    2dd4:	cbz	x1, 2df0 <elf_add+0x1250>
    2dd8:	ldr	x0, [sp, #1088]
    2ddc:	cbnz	x24, 31e4 <elf_add+0x1644>
    2de0:	mov	x24, x0
    2de4:	add	x0, x0, x1
    2de8:	cmp	x3, x0
    2dec:	csel	x3, x3, x0, ge  // ge = tcont
    2df0:	ldr	x1, [sp, #1128]
    2df4:	cbz	x1, 2e10 <elf_add+0x1270>
    2df8:	ldr	x0, [sp, #1120]
    2dfc:	cbnz	x24, 3210 <elf_add+0x1670>
    2e00:	mov	x24, x0
    2e04:	add	x0, x0, x1
    2e08:	cmp	x3, x0
    2e0c:	csel	x3, x3, x0, ge  // ge = tcont
    2e10:	ldr	x1, [sp, #1160]
    2e14:	cbz	x1, 2e30 <elf_add+0x1290>
    2e18:	ldr	x0, [sp, #1152]
    2e1c:	cbnz	x24, 321c <elf_add+0x167c>
    2e20:	mov	x24, x0
    2e24:	add	x0, x0, x1
    2e28:	cmp	x3, x0
    2e2c:	csel	x3, x3, x0, ge  // ge = tcont
    2e30:	ldr	x1, [sp, #1192]
    2e34:	cbz	x1, 2e54 <elf_add+0x12b4>
    2e38:	ldr	x0, [sp, #1184]
    2e3c:	cbz	x24, 31f0 <elf_add+0x1650>
    2e40:	cmp	x0, x24
    2e44:	csel	x24, x24, x0, ge  // ge = tcont
    2e48:	add	x0, x0, x1
    2e4c:	cmp	x3, x0
    2e50:	csel	x3, x3, x0, ge  // ge = tcont
    2e54:	cmp	x24, #0x0
    2e58:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    2e5c:	b.ne	2ee4 <elf_add+0x1344>  // b.any
    2e60:	mov	x2, x20
    2e64:	mov	x1, x19
    2e68:	mov	w0, w22
    2e6c:	bl	0 <__asan_backtrace_close>
    2e70:	mov	w23, w0
    2e74:	cbnz	w0, 3228 <elf_add+0x1688>
    2e78:	ldr	w0, [sp, #256]
    2e7c:	cbz	w0, 23f4 <elf_add+0x854>
    2e80:	mov	x24, #0x0                   	// #0
    2e84:	str	wzr, [sp, #216]
    2e88:	str	wzr, [sp, #224]
    2e8c:	str	wzr, [sp, #232]
    2e90:	b	219c <elf_add+0x5fc>
    2e94:	ldr	x1, [sp, #968]
    2e98:	cbz	x1, 356c <elf_add+0x19cc>
    2e9c:	ldr	x0, [sp, #960]
    2ea0:	mov	x3, #0x0                   	// #0
    2ea4:	mov	x24, x0
    2ea8:	b	2d64 <elf_add+0x11c4>
    2eac:	ldr	x1, [sp, #936]
    2eb0:	cbz	x1, 2e94 <elf_add+0x12f4>
    2eb4:	ldr	x0, [sp, #928]
    2eb8:	mov	x3, #0x0                   	// #0
    2ebc:	mov	x24, x0
    2ec0:	b	2d40 <elf_add+0x11a0>
    2ec4:	mov	w28, w20
    2ec8:	ldr	w22, [sp, #300]
    2ecc:	mov	w23, #0x0                   	// #0
    2ed0:	str	w25, [sp, #232]
    2ed4:	ldr	x21, [sp, #288]
    2ed8:	ldp	x19, x20, [sp, #304]
    2edc:	ldr	x24, [sp, #336]
    2ee0:	b	20b8 <elf_add+0x518>
    2ee4:	add	x0, sp, #0x300
    2ee8:	sub	x3, x3, x24
    2eec:	mov	x6, x0
    2ef0:	mov	x5, x20
    2ef4:	mov	x4, x19
    2ef8:	mov	x2, x24
    2efc:	mov	w1, w22
    2f00:	str	x0, [sp, #208]
    2f04:	mov	x0, x21
    2f08:	bl	0 <__asan_backtrace_get_view>
    2f0c:	mov	w23, w0
    2f10:	cbz	w0, 2e78 <elf_add+0x12d8>
    2f14:	mov	x2, x20
    2f18:	mov	x1, x19
    2f1c:	mov	w0, w22
    2f20:	bl	0 <__asan_backtrace_close>
    2f24:	cbz	w0, 3510 <elf_add+0x1970>
    2f28:	ldr	x1, [sp, #904]
    2f2c:	ldr	x0, [sp, #768]
    2f30:	cbz	x1, 3504 <elf_add+0x1964>
    2f34:	ldr	x1, [sp, #896]
    2f38:	mov	w22, #0x1                   	// #1
    2f3c:	sub	x1, x1, x24
    2f40:	add	x1, x0, x1
    2f44:	str	x1, [sp, #912]
    2f48:	ldr	x1, [sp, #936]
    2f4c:	cbz	x1, 34fc <elf_add+0x195c>
    2f50:	ldr	x1, [sp, #928]
    2f54:	add	w22, w22, #0x1
    2f58:	sub	x1, x1, x24
    2f5c:	add	x1, x0, x1
    2f60:	str	x1, [sp, #944]
    2f64:	ldr	x1, [sp, #968]
    2f68:	cbz	x1, 35ec <elf_add+0x1a4c>
    2f6c:	ldr	x1, [sp, #960]
    2f70:	add	w22, w22, #0x1
    2f74:	sub	x1, x1, x24
    2f78:	add	x1, x0, x1
    2f7c:	str	x1, [sp, #976]
    2f80:	ldr	x1, [sp, #1000]
    2f84:	cbz	x1, 35e4 <elf_add+0x1a44>
    2f88:	ldr	x1, [sp, #992]
    2f8c:	add	w22, w22, #0x1
    2f90:	sub	x1, x1, x24
    2f94:	add	x1, x0, x1
    2f98:	str	x1, [sp, #1008]
    2f9c:	ldr	x1, [sp, #1032]
    2fa0:	cbz	x1, 35dc <elf_add+0x1a3c>
    2fa4:	ldr	x1, [sp, #1024]
    2fa8:	add	w22, w22, #0x1
    2fac:	sub	x1, x1, x24
    2fb0:	add	x1, x0, x1
    2fb4:	str	x1, [sp, #1040]
    2fb8:	ldr	x1, [sp, #1064]
    2fbc:	cbnz	x1, 35c8 <elf_add+0x1a28>
    2fc0:	str	xzr, [sp, #1072]
    2fc4:	ldr	x1, [sp, #1096]
    2fc8:	cbnz	x1, 35b4 <elf_add+0x1a14>
    2fcc:	str	xzr, [sp, #1104]
    2fd0:	ldr	x1, [sp, #1128]
    2fd4:	cbnz	x1, 35a0 <elf_add+0x1a00>
    2fd8:	str	xzr, [sp, #1136]
    2fdc:	ldr	x1, [sp, #1160]
    2fe0:	cbnz	x1, 358c <elf_add+0x19ec>
    2fe4:	str	xzr, [sp, #1168]
    2fe8:	ldr	x1, [sp, #1192]
    2fec:	cbnz	x1, 3578 <elf_add+0x19d8>
    2ff0:	str	xzr, [sp, #1200]
    2ff4:	ldr	x24, [sp, #264]
    2ff8:	adrp	x25, 0 <elf_nodebug>
    2ffc:	add	x28, sp, #0x278
    3000:	add	x25, x25, #0x0
    3004:	mov	x27, x24
    3008:	add	x0, sp, #0x1b0
    300c:	mov	w23, #0x5                   	// #5
    3010:	mov	x26, #0x0                   	// #0
    3014:	str	x0, [sp, #216]
    3018:	ldr	x0, [x27, #8]
    301c:	cbnz	x0, 3098 <elf_add+0x14f8>
    3020:	ldr	x3, [x27, #168]
    3024:	cbz	x3, 3098 <elf_add+0x14f8>
    3028:	cbz	x26, 3548 <elf_add+0x19a8>
    302c:	str	xzr, [sp, #432]
    3030:	mov	x1, x25
    3034:	str	xzr, [sp, #632]
    3038:	cmp	x3, #0xb
    303c:	mov	x2, #0x4                   	// #4
    3040:	b.ls	3084 <elf_add+0x14e4>  // b.plast
    3044:	ldr	x4, [x27, #176]
    3048:	stp	x4, x3, [sp, #224]
    304c:	mov	x0, x4
    3050:	bl	0 <__asan_internal_memcmp>
    3054:	cbnz	w0, 3084 <elf_add+0x14e4>
    3058:	ldp	x6, x4, [sp, #216]
    305c:	mov	x7, x28
    3060:	ldr	x3, [sp, #232]
    3064:	mov	x5, x20
    3068:	mov	x0, x21
    306c:	mov	x2, x3
    3070:	mov	x3, x26
    3074:	mov	x1, x4
    3078:	mov	x4, x19
    307c:	bl	1a88 <elf_uncompress_zdebug.part.0>
    3080:	cbz	w0, 353c <elf_add+0x199c>
    3084:	ldr	x0, [sp, #432]
    3088:	str	x0, [x27, #16]
    308c:	ldr	x0, [sp, #632]
    3090:	str	x0, [x27, #8]
    3094:	str	wzr, [x27, #24]
    3098:	add	x27, x27, #0x20
    309c:	subs	w23, w23, #0x1
    30a0:	b.ne	3018 <elf_add+0x1478>  // b.any
    30a4:	mov	w25, #0x5                   	// #5
    30a8:	ldr	x27, [x24, #8]
    30ac:	cbz	x27, 30e8 <elf_add+0x1548>
    30b0:	ldr	w0, [x24, #24]
    30b4:	cbz	w0, 30e8 <elf_add+0x1548>
    30b8:	cbz	x26, 3518 <elf_add+0x1978>
    30bc:	cmp	x27, #0x17
    30c0:	b.ls	30d4 <elf_add+0x1534>  // b.plast
    30c4:	ldr	x28, [x24, #16]
    30c8:	ldr	w4, [x28]
    30cc:	cmp	w4, #0x1
    30d0:	b.eq	3454 <elf_add+0x18b4>  // b.none
    30d4:	mov	x0, #0x0                   	// #0
    30d8:	mov	x23, #0x0                   	// #0
    30dc:	sub	w22, w22, #0x1
    30e0:	stp	x0, x23, [x24, #8]
    30e4:	str	wzr, [x24, #24]
    30e8:	add	x24, x24, #0x20
    30ec:	subs	w25, w25, #0x1
    30f0:	b.ne	30a8 <elf_add+0x1508>  // b.any
    30f4:	cbz	x26, 3110 <elf_add+0x1570>
    30f8:	mov	x1, x26
    30fc:	mov	x4, x20
    3100:	mov	x3, x19
    3104:	mov	x0, x21
    3108:	mov	x2, #0x13b4                	// #5044
    310c:	bl	0 <__asan_backtrace_free>
    3110:	cbz	w22, 3618 <elf_add+0x1a78>
    3114:	mov	w23, #0x1                   	// #1
    3118:	ldrb	w0, [sp, #709]
    311c:	add	x6, sp, #0x388
    3120:	ldr	x1, [sp, #192]
    3124:	cmp	w0, #0x2
    3128:	cset	w0, eq  // eq = none
    312c:	ldp	x3, x2, [x6]
    3130:	ldp	x5, x4, [x6, #32]
    3134:	str	w0, [sp, #32]
    3138:	ldr	x0, [sp, #200]
    313c:	str	x0, [sp, #64]
    3140:	ldr	x0, [sp, #424]
    3144:	str	x0, [sp, #40]
    3148:	ldr	x0, [sp, #1000]
    314c:	str	x0, [sp, #8]
    3150:	ldr	x0, [sp, #1008]
    3154:	str	x0, [sp]
    3158:	ldr	x7, [sp, #968]
    315c:	stp	x19, x20, [sp, #48]
    3160:	ldr	x6, [sp, #976]
    3164:	ldr	x0, [sp, #1032]
    3168:	str	x0, [sp, #24]
    316c:	ldr	x0, [sp, #1040]
    3170:	str	x0, [sp, #16]
    3174:	ldr	x0, [sp, #1224]
    3178:	str	x0, [sp, #72]
    317c:	mov	x0, x21
    3180:	bl	0 <__asan_backtrace_dwarf_add>
    3184:	cbz	w0, 3610 <elf_add+0x1a70>
    3188:	ldr	x1, [sp, #1216]
    318c:	mov	w0, #0x1                   	// #1
    3190:	mov	w24, w0
    3194:	ldp	x27, x28, [sp, #160]
    3198:	str	w0, [x1]
    319c:	b	1c58 <elf_add+0xb8>
    31a0:	ldr	w0, [sp, #232]
    31a4:	cbz	w0, 2d14 <elf_add+0x1174>
    31a8:	mov	x3, x20
    31ac:	mov	x2, x19
    31b0:	add	x1, sp, #0x260
    31b4:	mov	x0, x21
    31b8:	bl	0 <__asan_backtrace_release_view>
    31bc:	b	2d14 <elf_add+0x1174>
    31c0:	cmp	x24, x0
    31c4:	csel	x24, x24, x0, le
    31c8:	b	2d84 <elf_add+0x11e4>
    31cc:	cmp	x24, x0
    31d0:	csel	x24, x24, x0, le
    31d4:	b	2da4 <elf_add+0x1204>
    31d8:	cmp	x24, x0
    31dc:	csel	x24, x24, x0, le
    31e0:	b	2dc4 <elf_add+0x1224>
    31e4:	cmp	x24, x0
    31e8:	csel	x24, x24, x0, le
    31ec:	b	2de4 <elf_add+0x1244>
    31f0:	mov	x24, x0
    31f4:	b	2e48 <elf_add+0x12a8>
    31f8:	mov	x3, x20
    31fc:	mov	x2, x19
    3200:	add	x1, sp, #0x248
    3204:	mov	x0, x21
    3208:	bl	0 <__asan_backtrace_release_view>
    320c:	b	2c80 <elf_add+0x10e0>
    3210:	cmp	x24, x0
    3214:	csel	x24, x24, x0, le
    3218:	b	2e04 <elf_add+0x1264>
    321c:	cmp	x24, x0
    3220:	csel	x24, x24, x0, le
    3224:	b	2e24 <elf_add+0x1284>
    3228:	mov	w24, #0x1                   	// #1
    322c:	ldp	x27, x28, [sp, #160]
    3230:	b	1c58 <elf_add+0xb8>
    3234:	mov	w28, #0x1                   	// #1
    3238:	b	20b8 <elf_add+0x518>
    323c:	ldr	w28, [sp, #224]
    3240:	mov	w23, w0
    3244:	ldr	w22, [sp, #300]
    3248:	str	w25, [sp, #232]
    324c:	ldr	x21, [sp, #288]
    3250:	ldp	x19, x20, [sp, #304]
    3254:	ldr	x24, [sp, #336]
    3258:	b	20b8 <elf_add+0x518>
    325c:	mov	x0, x21
    3260:	mov	x3, x20
    3264:	mov	x2, x19
    3268:	add	x1, sp, #0x230
    326c:	bl	0 <__asan_backtrace_release_view>
    3270:	ldr	w0, [sp, #216]
    3274:	cbz	w0, 2b30 <elf_add+0xf90>
    3278:	b	2b1c <elf_add+0xf7c>
    327c:	mov	x2, x20
    3280:	mov	x1, x19
    3284:	mov	w0, w23
    3288:	bl	0 <__asan_backtrace_close>
    328c:	ldp	x27, x28, [sp, #160]
    3290:	b	1c58 <elf_add+0xb8>
    3294:	mov	x3, x20
    3298:	mov	x2, x19
    329c:	add	x1, sp, #0x260
    32a0:	mov	x0, x21
    32a4:	bl	0 <__asan_backtrace_release_view>
    32a8:	b	2b38 <elf_add+0xf98>
    32ac:	mov	w28, w20
    32b0:	mov	w0, #0x1                   	// #1
    32b4:	ldr	w22, [sp, #300]
    32b8:	mov	w23, #0x0                   	// #0
    32bc:	str	w0, [sp, #224]
    32c0:	str	w25, [sp, #232]
    32c4:	ldr	x21, [sp, #288]
    32c8:	ldp	x19, x20, [sp, #304]
    32cc:	ldr	x24, [sp, #336]
    32d0:	b	20b8 <elf_add+0x518>
    32d4:	mov	x0, x1
    32d8:	b	32e0 <elf_add+0x1740>
    32dc:	mov	x0, x2
    32e0:	ldar	x2, [x0]
    32e4:	cbnz	x2, 32dc <elf_add+0x173c>
    32e8:	ldxr	x2, [x0]
    32ec:	cbnz	x2, 32f8 <elf_add+0x1758>
    32f0:	stlxr	w3, x23, [x0]
    32f4:	cbnz	w3, 32e8 <elf_add+0x1748>
    32f8:	dmb	ish
    32fc:	cmp	x2, #0x0
    3300:	b.ne	32d4 <elf_add+0x1734>  // b.any
    3304:	mov	w0, #0x1                   	// #1
    3308:	str	w0, [sp, #256]
    330c:	b	298c <elf_add+0xdec>
    3310:	stp	x8, x5, [sp, #192]
    3314:	mov	x0, x20
    3318:	mov	w2, #0x0                   	// #0
    331c:	adrp	x1, 0 <elf_nodebug>
    3320:	add	x1, x1, #0x0
    3324:	blr	x19
    3328:	ldp	x8, x5, [sp, #192]
    332c:	mov	x4, x20
    3330:	mov	x3, x19
    3334:	mov	x0, x21
    3338:	mov	x2, x8
    333c:	mov	x1, x5
    3340:	bl	0 <__asan_backtrace_free>
    3344:	mov	x1, x23
    3348:	mov	x4, x20
    334c:	mov	x3, x19
    3350:	mov	x0, x21
    3354:	mov	x2, #0x18                  	// #24
    3358:	mov	w23, #0x1                   	// #1
    335c:	bl	0 <__asan_backtrace_free>
    3360:	mov	w28, w23
    3364:	b	20b8 <elf_add+0x518>
    3368:	mov	x2, #0x0                   	// #0
    336c:	mov	w1, #0x0                   	// #0
    3370:	ldrb	w0, [x28, #4]
    3374:	add	x2, x2, #0x1
    3378:	and	w0, w0, #0xf
    337c:	sub	w0, w0, #0x1
    3380:	cmp	w0, #0x1
    3384:	b.hi	33c8 <elf_add+0x1828>  // b.pmore
    3388:	ldrh	w0, [x28, #6]
    338c:	umull	x9, w1, w7
    3390:	add	x3, x5, x9
    3394:	cbz	w0, 33c8 <elf_add+0x1828>
    3398:	ldr	w0, [x28]
    339c:	add	w1, w1, #0x1
    33a0:	add	x10, x4, x0
    33a4:	cmp	x6, x0
    33a8:	b.ls	3310 <elf_add+0x1770>  // b.plast
    33ac:	ldr	x0, [x28, #8]
    33b0:	str	x10, [x5, x9]
    33b4:	ldr	x9, [sp, #192]
    33b8:	add	x0, x0, x9
    33bc:	str	x0, [x3, #8]
    33c0:	ldr	x0, [x28, #16]
    33c4:	str	x0, [x3, #16]
    33c8:	add	x28, x28, #0x18
    33cc:	cmp	x27, x2
    33d0:	b.hi	3370 <elf_add+0x17d0>  // b.pmore
    33d4:	b	2924 <elf_add+0xd84>
    33d8:	mov	w0, #0x1                   	// #1
    33dc:	str	x23, [x1]
    33e0:	str	w0, [sp, #256]
    33e4:	b	298c <elf_add+0xdec>
    33e8:	ldr	x1, [sp, #240]
    33ec:	mov	x3, x20
    33f0:	mov	x2, x19
    33f4:	mov	x0, x21
    33f8:	str	xzr, [sp, #352]
    33fc:	bl	0 <__asan_backtrace_release_view>
    3400:	str	wzr, [sp, #216]
    3404:	ldr	x1, [sp, #248]
    3408:	mov	x3, x20
    340c:	mov	x2, x19
    3410:	mov	x0, x21
    3414:	bl	0 <__asan_backtrace_release_view>
    3418:	str	wzr, [sp, #232]
    341c:	str	wzr, [sp, #256]
    3420:	str	xzr, [sp, #320]
    3424:	str	wzr, [sp, #364]
    3428:	b	2c78 <elf_add+0x10d8>
    342c:	mov	w24, #0xffffffff            	// #-1
    3430:	b	1c58 <elf_add+0xb8>
    3434:	bl	0 <__errno_location>
    3438:	mov	x2, x0
    343c:	adrp	x1, 0 <elf_nodebug>
    3440:	mov	x0, x20
    3444:	add	x1, x1, #0x0
    3448:	ldr	w2, [x2]
    344c:	blr	x19
    3450:	b	2c68 <elf_add+0x10c8>
    3454:	ldr	x1, [x28, #8]
    3458:	mov	x3, x20
    345c:	mov	x2, x19
    3460:	mov	x0, x21
    3464:	str	w4, [sp, #216]
    3468:	bl	0 <__asan_backtrace_alloc>
    346c:	mov	x23, x0
    3470:	cbz	x0, 353c <elf_add+0x199c>
    3474:	ldr	x4, [x28, #8]
    3478:	add	x5, x28, #0x18
    347c:	mov	x0, x5
    3480:	mov	x3, x23
    3484:	mov	x2, x26
    3488:	sub	x1, x27, #0x18
    348c:	stp	x4, x5, [sp, #216]
    3490:	bl	c18 <elf_zlib_inflate>
    3494:	cbz	w0, 30d4 <elf_add+0x1534>
    3498:	ldp	x4, x5, [sp, #216]
    349c:	sub	x0, x27, #0x1c
    34a0:	mov	x1, x23
    34a4:	mov	x2, x4
    34a8:	add	x0, x5, x0
    34ac:	bl	60 <elf_zlib_verify_checksum>
    34b0:	cbz	w0, 30d4 <elf_add+0x1534>
    34b4:	ldr	x0, [x28, #8]
    34b8:	b	30dc <elf_add+0x153c>
    34bc:	ldrh	w2, [x0, #78]
    34c0:	cbz	w2, 26f0 <elf_add+0xb50>
    34c4:	add	x25, x25, #0x1
    34c8:	b	26f0 <elf_add+0xb50>
    34cc:	ldrh	w2, [x0, #54]
    34d0:	cbz	w2, 26d0 <elf_add+0xb30>
    34d4:	add	x25, x25, #0x1
    34d8:	b	26d0 <elf_add+0xb30>
    34dc:	ldrh	w2, [x0, #30]
    34e0:	cbz	w2, 26b0 <elf_add+0xb10>
    34e4:	add	x25, x25, #0x1
    34e8:	b	26b0 <elf_add+0xb10>
    34ec:	ldrh	w2, [x0, #6]
    34f0:	cbz	w2, 2690 <elf_add+0xaf0>
    34f4:	add	x25, x25, #0x1
    34f8:	b	2690 <elf_add+0xaf0>
    34fc:	str	xzr, [sp, #944]
    3500:	b	2f64 <elf_add+0x13c4>
    3504:	mov	w22, #0x0                   	// #0
    3508:	str	xzr, [sp, #912]
    350c:	b	2f48 <elf_add+0x13a8>
    3510:	mov	w23, #0x1                   	// #1
    3514:	b	2e78 <elf_add+0x12d8>
    3518:	mov	x3, x20
    351c:	mov	x2, x19
    3520:	mov	x0, x21
    3524:	mov	x1, #0x13b4                	// #5044
    3528:	bl	0 <__asan_backtrace_alloc>
    352c:	mov	x26, x0
    3530:	cbz	x0, 353c <elf_add+0x199c>
    3534:	ldr	x27, [x24, #8]
    3538:	b	30bc <elf_add+0x151c>
    353c:	mov	w23, #0x1                   	// #1
    3540:	mov	w22, #0xffffffff            	// #-1
    3544:	b	2e78 <elf_add+0x12d8>
    3548:	mov	x3, x20
    354c:	mov	x2, x19
    3550:	mov	x0, x21
    3554:	mov	x1, #0x13b4                	// #5044
    3558:	bl	0 <__asan_backtrace_alloc>
    355c:	mov	x26, x0
    3560:	cbz	x0, 353c <elf_add+0x199c>
    3564:	ldr	x3, [x27, #168]
    3568:	b	302c <elf_add+0x148c>
    356c:	mov	x3, #0x0                   	// #0
    3570:	mov	x24, #0x0                   	// #0
    3574:	b	2d70 <elf_add+0x11d0>
    3578:	ldr	x1, [sp, #1184]
    357c:	sub	x24, x1, x24
    3580:	add	x0, x0, x24
    3584:	str	x0, [sp, #1200]
    3588:	b	2ff4 <elf_add+0x1454>
    358c:	ldr	x1, [sp, #1152]
    3590:	sub	x1, x1, x24
    3594:	add	x1, x0, x1
    3598:	str	x1, [sp, #1168]
    359c:	b	2fe8 <elf_add+0x1448>
    35a0:	ldr	x1, [sp, #1120]
    35a4:	sub	x1, x1, x24
    35a8:	add	x1, x0, x1
    35ac:	str	x1, [sp, #1136]
    35b0:	b	2fdc <elf_add+0x143c>
    35b4:	ldr	x1, [sp, #1088]
    35b8:	sub	x1, x1, x24
    35bc:	add	x1, x0, x1
    35c0:	str	x1, [sp, #1104]
    35c4:	b	2fd0 <elf_add+0x1430>
    35c8:	ldr	x1, [sp, #1056]
    35cc:	sub	x1, x1, x24
    35d0:	add	x1, x0, x1
    35d4:	str	x1, [sp, #1072]
    35d8:	b	2fc4 <elf_add+0x1424>
    35dc:	str	xzr, [sp, #1040]
    35e0:	b	2fb8 <elf_add+0x1418>
    35e4:	str	xzr, [sp, #1008]
    35e8:	b	2f9c <elf_add+0x13fc>
    35ec:	str	xzr, [sp, #976]
    35f0:	b	2f80 <elf_add+0x13e0>
    35f4:	ldrh	w0, [x0, #6]
    35f8:	cbz	w0, 2854 <elf_add+0xcb4>
    35fc:	add	x25, x25, #0x1
    3600:	b	2854 <elf_add+0xcb4>
    3604:	mov	w23, #0x1                   	// #1
    3608:	mov	w28, w23
    360c:	b	20b8 <elf_add+0x518>
    3610:	mov	w22, #0xffffffff            	// #-1
    3614:	b	2e78 <elf_add+0x12d8>
    3618:	ldr	x1, [sp, #208]
    361c:	mov	x3, x20
    3620:	mov	x2, x19
    3624:	mov	x0, x21
    3628:	mov	w23, #0x0                   	// #0
    362c:	bl	0 <__asan_backtrace_release_view>
    3630:	b	3118 <elf_add+0x1578>
    3634:	ldrh	w2, [x0, #174]
    3638:	cbz	w2, 2770 <elf_add+0xbd0>
    363c:	add	x25, x25, #0x1
    3640:	b	2770 <elf_add+0xbd0>
    3644:	ldrh	w2, [x0, #150]
    3648:	cbz	w2, 2750 <elf_add+0xbb0>
    364c:	add	x25, x25, #0x1
    3650:	b	2750 <elf_add+0xbb0>
    3654:	ldrh	w2, [x0, #126]
    3658:	cbz	w2, 2730 <elf_add+0xb90>
    365c:	add	x25, x25, #0x1
    3660:	b	2730 <elf_add+0xb90>
    3664:	ldrh	w2, [x0, #102]
    3668:	cbz	w2, 2710 <elf_add+0xb70>
    366c:	add	x25, x25, #0x1
    3670:	b	2710 <elf_add+0xb70>
    3674:	mov	x0, x28
    3678:	mov	x1, #0x0                   	// #0
    367c:	mov	x25, #0x0                   	// #0
    3680:	b	267c <elf_add+0xadc>
    3684:	mov	x3, x20
    3688:	mov	x2, x19
    368c:	mov	x0, x21
    3690:	mov	x1, #0x0                   	// #0
    3694:	bl	0 <__asan_backtrace_alloc>
    3698:	mov	x5, x0
    369c:	cbz	x0, 3344 <elf_add+0x17a4>
    36a0:	mov	x25, #0x0                   	// #0
    36a4:	b	2924 <elf_add+0xd84>
    36a8:	ldrh	w2, [x0, #318]
    36ac:	cbz	w2, 2830 <elf_add+0xc90>
    36b0:	add	x25, x25, #0x1
    36b4:	b	2830 <elf_add+0xc90>
    36b8:	ldrh	w2, [x0, #294]
    36bc:	cbz	w2, 2810 <elf_add+0xc70>
    36c0:	add	x25, x25, #0x1
    36c4:	b	2810 <elf_add+0xc70>
    36c8:	ldrh	w2, [x0, #270]
    36cc:	cbz	w2, 27f0 <elf_add+0xc50>
    36d0:	add	x25, x25, #0x1
    36d4:	b	27f0 <elf_add+0xc50>
    36d8:	ldrh	w2, [x0, #246]
    36dc:	cbz	w2, 27d0 <elf_add+0xc30>
    36e0:	add	x25, x25, #0x1
    36e4:	b	27d0 <elf_add+0xc30>
    36e8:	ldrh	w2, [x0, #222]
    36ec:	cbz	w2, 27b0 <elf_add+0xc10>
    36f0:	add	x25, x25, #0x1
    36f4:	b	27b0 <elf_add+0xc10>
    36f8:	ldrh	w2, [x0, #198]
    36fc:	cbz	w2, 2790 <elf_add+0xbf0>
    3700:	add	x25, x25, #0x1
    3704:	b	2790 <elf_add+0xbf0>

0000000000003708 <phdr_callback>:
    3708:	sub	sp, sp, #0x70
    370c:	stp	x29, x30, [sp, #48]
    3710:	add	x29, sp, #0x30
    3714:	ldr	w6, [x2, #56]
    3718:	str	x21, [sp, #80]
    371c:	ldr	x21, [x0, #8]
    3720:	stp	x19, x20, [sp, #64]
    3724:	cmn	w6, #0x1
    3728:	mov	x20, x0
    372c:	mov	x19, x2
    3730:	cbz	x21, 373c <phdr_callback+0x34>
    3734:	ldrb	w0, [x21]
    3738:	cbnz	w0, 37c8 <phdr_callback+0xc0>
    373c:	b.eq	37b0 <phdr_callback+0xa8>  // b.none
    3740:	ldr	x21, [x19, #48]
    3744:	mov	w0, #0xffffffff            	// #-1
    3748:	str	w0, [x19, #56]
    374c:	add	x1, sp, #0x64
    3750:	mov	w2, w6
    3754:	ldr	x0, [x19]
    3758:	add	x6, sp, #0x68
    375c:	ldr	x3, [x20]
    3760:	str	x1, [sp]
    3764:	mov	x1, x21
    3768:	ldr	x4, [x19, #8]
    376c:	str	xzr, [sp, #8]
    3770:	ldr	x5, [x19, #16]
    3774:	str	wzr, [sp, #16]
    3778:	ldr	x7, [x19, #32]
    377c:	str	wzr, [sp, #24]
    3780:	str	xzr, [sp, #32]
    3784:	str	wzr, [sp, #40]
    3788:	bl	1ba0 <elf_add>
    378c:	cbz	w0, 37b0 <phdr_callback+0xa8>
    3790:	ldr	w0, [sp, #100]
    3794:	cbz	w0, 37b0 <phdr_callback+0xa8>
    3798:	ldr	x1, [x19, #40]
    379c:	mov	w2, #0x1                   	// #1
    37a0:	ldr	x0, [x19, #24]
    37a4:	str	w2, [x1]
    37a8:	ldr	x1, [sp, #104]
    37ac:	str	x1, [x0]
    37b0:	mov	w0, #0x0                   	// #0
    37b4:	ldp	x29, x30, [sp, #48]
    37b8:	ldp	x19, x20, [sp, #64]
    37bc:	ldr	x21, [sp, #80]
    37c0:	add	sp, sp, #0x70
    37c4:	ret
    37c8:	ldp	x1, x2, [x2, #8]
    37cc:	b.ne	37e8 <phdr_callback+0xe0>  // b.any
    37d0:	add	x3, sp, #0x60
    37d4:	mov	x0, x21
    37d8:	bl	0 <__asan_backtrace_open>
    37dc:	mov	w6, w0
    37e0:	tbz	w0, #31, 374c <phdr_callback+0x44>
    37e4:	b	37b0 <phdr_callback+0xa8>
    37e8:	mov	w0, w6
    37ec:	bl	0 <__asan_backtrace_close>
    37f0:	ldp	x1, x2, [x19, #8]
    37f4:	mov	w0, #0xffffffff            	// #-1
    37f8:	ldr	x21, [x20, #8]
    37fc:	str	w0, [x19, #56]
    3800:	add	x3, sp, #0x60
    3804:	mov	x0, x21
    3808:	bl	0 <__asan_backtrace_open>
    380c:	mov	w6, w0
    3810:	tbz	w0, #31, 374c <phdr_callback+0x44>
    3814:	b	37b0 <phdr_callback+0xa8>

0000000000003818 <__asan_backtrace_uncompress_zdebug>:
    3818:	stp	x29, x30, [sp, #-80]!
    381c:	mov	x29, sp
    3820:	stp	x19, x20, [sp, #16]
    3824:	mov	x20, x3
    3828:	mov	x3, x4
    382c:	stp	x21, x22, [sp, #32]
    3830:	mov	x21, x4
    3834:	mov	x22, x0
    3838:	stp	x23, x24, [sp, #48]
    383c:	mov	x23, x2
    3840:	mov	x24, x5
    3844:	mov	x2, x20
    3848:	stp	x25, x26, [sp, #64]
    384c:	mov	x26, x1
    3850:	mov	x25, x6
    3854:	mov	x1, #0x13b4                	// #5044
    3858:	bl	0 <__asan_backtrace_alloc>
    385c:	cbz	x0, 38f0 <__asan_backtrace_uncompress_zdebug+0xd8>
    3860:	str	xzr, [x24]
    3864:	mov	x19, x0
    3868:	str	xzr, [x25]
    386c:	cmp	x23, #0xb
    3870:	b.hi	38ac <__asan_backtrace_uncompress_zdebug+0x94>  // b.pmore
    3874:	mov	w23, #0x1                   	// #1
    3878:	mov	x4, x21
    387c:	mov	x3, x20
    3880:	mov	x1, x19
    3884:	mov	x0, x22
    3888:	mov	x2, #0x13b4                	// #5044
    388c:	bl	0 <__asan_backtrace_free>
    3890:	mov	w0, w23
    3894:	ldp	x19, x20, [sp, #16]
    3898:	ldp	x21, x22, [sp, #32]
    389c:	ldp	x23, x24, [sp, #48]
    38a0:	ldp	x25, x26, [sp, #64]
    38a4:	ldp	x29, x30, [sp], #80
    38a8:	ret
    38ac:	adrp	x1, 0 <elf_nodebug>
    38b0:	mov	x0, x26
    38b4:	add	x1, x1, #0x0
    38b8:	mov	x2, #0x4                   	// #4
    38bc:	bl	0 <__asan_internal_memcmp>
    38c0:	cbnz	w0, 3874 <__asan_backtrace_uncompress_zdebug+0x5c>
    38c4:	mov	x2, x23
    38c8:	mov	x7, x25
    38cc:	mov	x6, x24
    38d0:	mov	x1, x26
    38d4:	mov	x5, x21
    38d8:	mov	x4, x20
    38dc:	mov	x3, x19
    38e0:	mov	x0, x22
    38e4:	bl	1a88 <elf_uncompress_zdebug.part.0>
    38e8:	mov	w23, w0
    38ec:	b	3878 <__asan_backtrace_uncompress_zdebug+0x60>
    38f0:	mov	w23, #0x0                   	// #0
    38f4:	b	3890 <__asan_backtrace_uncompress_zdebug+0x78>

00000000000038f8 <__asan_backtrace_initialize>:
    38f8:	sub	sp, sp, #0xe0
    38fc:	mov	w6, #0x1                   	// #1
    3900:	stp	x29, x30, [sp, #48]
    3904:	add	x29, sp, #0x30
    3908:	stp	x23, x24, [sp, #96]
    390c:	adrp	x24, 0 <elf_nodebug>
    3910:	add	x8, x24, #0x0
    3914:	str	w6, [sp, #16]
    3918:	mov	x23, x5
    391c:	str	wzr, [sp, #24]
    3920:	mov	x5, x4
    3924:	str	xzr, [sp, #32]
    3928:	str	wzr, [sp, #40]
    392c:	stp	x27, x28, [sp, #128]
    3930:	add	x28, sp, #0x94
    3934:	add	x27, sp, #0x98
    3938:	stp	x28, xzr, [sp]
    393c:	mov	x6, x27
    3940:	stp	x25, x26, [sp, #112]
    3944:	add	x26, sp, #0x90
    3948:	mov	x25, x1
    394c:	mov	x7, x26
    3950:	stp	x19, x20, [sp, #64]
    3954:	mov	x19, x0
    3958:	mov	w20, w2
    395c:	stp	x21, x22, [sp, #80]
    3960:	mov	x22, x3
    3964:	mov	x21, x4
    3968:	mov	x4, x3
    396c:	mov	x3, #0x0                   	// #0
    3970:	str	x8, [sp, #152]
    3974:	bl	1ba0 <elf_add>
    3978:	cbz	w0, 39e4 <__asan_backtrace_initialize+0xec>
    397c:	cmp	w0, #0x0
    3980:	add	x1, sp, #0xa0
    3984:	csinv	w20, w20, wzr, lt  // lt = tstop
    3988:	adrp	x0, 0 <elf_nodebug>
    398c:	add	x0, x0, #0x0
    3990:	stp	x19, x22, [sp, #160]
    3994:	stp	x21, x27, [sp, #176]
    3998:	stp	x26, x28, [sp, #192]
    399c:	str	x25, [sp, #208]
    39a0:	str	w20, [sp, #216]
    39a4:	bl	0 <dl_iterate_phdr>
    39a8:	ldr	w0, [x19, #8]
    39ac:	cbnz	w0, 3a04 <__asan_backtrace_initialize+0x10c>
    39b0:	ldr	w0, [sp, #144]
    39b4:	cbnz	w0, 3a34 <__asan_backtrace_initialize+0x13c>
    39b8:	ldr	x0, [x19, #40]
    39bc:	cbz	x0, 3a64 <__asan_backtrace_initialize+0x16c>
    39c0:	ldr	x0, [x19, #24]
    39c4:	str	x0, [x23]
    39c8:	cmp	x0, #0x0
    39cc:	add	x24, x24, #0x0
    39d0:	ccmp	x0, x24, #0x4, ne  // ne = any
    39d4:	mov	w0, #0x1                   	// #1
    39d8:	b.ne	39e4 <__asan_backtrace_initialize+0xec>  // b.any
    39dc:	ldr	x1, [sp, #152]
    39e0:	str	x1, [x23]
    39e4:	ldp	x29, x30, [sp, #48]
    39e8:	ldp	x19, x20, [sp, #64]
    39ec:	ldp	x21, x22, [sp, #80]
    39f0:	ldp	x23, x24, [sp, #96]
    39f4:	ldp	x25, x26, [sp, #112]
    39f8:	ldp	x27, x28, [sp, #128]
    39fc:	add	sp, sp, #0xe0
    3a00:	ret
    3a04:	ldr	w1, [sp, #144]
    3a08:	add	x0, x19, #0x28
    3a0c:	cbz	w1, 3a44 <__asan_backtrace_initialize+0x14c>
    3a10:	adrp	x1, 0 <elf_nodebug>
    3a14:	add	x1, x1, #0x0
    3a18:	stlr	x1, [x0]
    3a1c:	ldr	w0, [x19, #8]
    3a20:	cbz	w0, 39c0 <__asan_backtrace_initialize+0xc8>
    3a24:	add	x19, x19, #0x18
    3a28:	ldar	x0, [x19]
    3a2c:	str	x0, [x23]
    3a30:	b	39c8 <__asan_backtrace_initialize+0xd0>
    3a34:	adrp	x0, 0 <elf_nodebug>
    3a38:	add	x0, x0, #0x0
    3a3c:	str	x0, [x19, #40]
    3a40:	b	39c0 <__asan_backtrace_initialize+0xc8>
    3a44:	adrp	x1, 0 <elf_nodebug>
    3a48:	add	x1, x1, #0x0
    3a4c:	ldxr	x2, [x0]
    3a50:	cbnz	x2, 3a5c <__asan_backtrace_initialize+0x164>
    3a54:	stlxr	w3, x1, [x0]
    3a58:	cbnz	w3, 3a4c <__asan_backtrace_initialize+0x154>
    3a5c:	dmb	ish
    3a60:	b	3a1c <__asan_backtrace_initialize+0x124>
    3a64:	adrp	x0, 0 <elf_nodebug>
    3a68:	add	x0, x0, #0x0
    3a6c:	str	x0, [x19, #40]
    3a70:	b	39c0 <__asan_backtrace_initialize+0xc8>

fileline.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_pcinfo>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	w0, [x0, #8]
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x3
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	x23, x1
  24:	mov	x24, x2
  28:	stp	x27, x28, [sp, #80]
  2c:	mov	x28, x4
  30:	cbnz	w0, b8 <__asan_backtrace_pcinfo+0xb8>
  34:	ldr	w0, [x19, #56]
  38:	cbnz	w0, 88 <__asan_backtrace_pcinfo+0x88>
  3c:	ldr	x0, [x19, #24]
  40:	str	x0, [sp, #104]
  44:	cbz	x0, dc <__asan_backtrace_pcinfo+0xdc>
  48:	ldr	w1, [x19, #56]
  4c:	mov	w0, #0x0                   	// #0
  50:	cbnz	w1, 70 <__asan_backtrace_pcinfo+0x70>
  54:	ldr	x5, [x19, #24]
  58:	mov	x4, x28
  5c:	mov	x3, x22
  60:	mov	x2, x24
  64:	mov	x1, x23
  68:	mov	x0, x19
  6c:	blr	x5
  70:	ldp	x19, x20, [sp, #16]
  74:	ldp	x21, x22, [sp, #32]
  78:	ldp	x23, x24, [sp, #48]
  7c:	ldp	x27, x28, [sp, #80]
  80:	ldp	x29, x30, [sp], #176
  84:	ret
  88:	mov	x0, x28
  8c:	mov	w2, #0xffffffff            	// #-1
  90:	adrp	x1, 0 <__asan_backtrace_pcinfo>
  94:	add	x1, x1, #0x0
  98:	blr	x22
  9c:	mov	w0, #0x0                   	// #0
  a0:	ldp	x19, x20, [sp, #16]
  a4:	ldp	x21, x22, [sp, #32]
  a8:	ldp	x23, x24, [sp, #48]
  ac:	ldp	x27, x28, [sp, #80]
  b0:	ldp	x29, x30, [sp], #176
  b4:	ret
  b8:	add	x0, x19, #0x38
  bc:	ldar	w0, [x0]
  c0:	cbnz	w0, 88 <__asan_backtrace_pcinfo+0x88>
  c4:	ldr	w0, [x19, #8]
  c8:	cbz	w0, 3c <__asan_backtrace_pcinfo+0x3c>
  cc:	add	x0, x19, #0x18
  d0:	ldar	x0, [x0]
  d4:	str	x0, [sp, #104]
  d8:	cbnz	x0, 48 <__asan_backtrace_pcinfo+0x48>
  dc:	add	x27, sp, #0x64
  e0:	stp	x25, x26, [sp, #64]
  e4:	adrp	x26, 0 <__asan_backtrace_pcinfo>
  e8:	adrp	x25, 0 <__asan_backtrace_pcinfo>
  ec:	add	x26, x26, #0x0
  f0:	add	x25, x25, #0x0
  f4:	mov	w20, #0x0                   	// #0
  f8:	cmp	w20, #0x3
  fc:	b.eq	1e0 <__asan_backtrace_pcinfo+0x1e0>  // b.none
 100:	cmp	w20, #0x4
 104:	b.eq	1bc <__asan_backtrace_pcinfo+0x1bc>  // b.none
 108:	cmp	w20, #0x1
 10c:	b.eq	178 <__asan_backtrace_pcinfo+0x178>  // b.none
 110:	cmp	w20, #0x2
 114:	b.ne	170 <__asan_backtrace_pcinfo+0x170>  // b.any
 118:	adrp	x21, 0 <__asan_backtrace_pcinfo>
 11c:	add	x21, x21, #0x0
 120:	mov	x3, x27
 124:	mov	x2, x28
 128:	mov	x1, x22
 12c:	mov	x0, x21
 130:	bl	0 <__asan_backtrace_open>
 134:	tbnz	w0, #31, 1b0 <__asan_backtrace_pcinfo+0x1b0>
 138:	mov	w2, w0
 13c:	mov	x1, x21
 140:	add	x5, sp, #0x68
 144:	mov	x4, x28
 148:	mov	x3, x22
 14c:	mov	x0, x19
 150:	bl	0 <__asan_backtrace_initialize>
 154:	cbz	w0, 198 <__asan_backtrace_pcinfo+0x198>
 158:	ldr	w1, [x19, #8]
 15c:	ldr	x0, [sp, #104]
 160:	cbnz	w1, 1e8 <__asan_backtrace_pcinfo+0x1e8>
 164:	ldp	x25, x26, [sp, #64]
 168:	str	x0, [x19, #24]
 16c:	b	48 <__asan_backtrace_pcinfo+0x48>
 170:	ldr	x21, [x19]
 174:	cbnz	x21, 120 <__asan_backtrace_pcinfo+0x120>
 178:	add	w20, w20, #0x1
 17c:	cmp	w20, #0x5
 180:	b.ne	f8 <__asan_backtrace_pcinfo+0xf8>  // b.any
 184:	ldr	x1, [x19]
 188:	mov	x0, x28
 18c:	cbz	x1, 1f8 <__asan_backtrace_pcinfo+0x1f8>
 190:	mov	w2, #0x2                   	// #2
 194:	blr	x22
 198:	ldr	w0, [x19, #8]
 19c:	cbnz	w0, 20c <__asan_backtrace_pcinfo+0x20c>
 1a0:	mov	w1, #0x1                   	// #1
 1a4:	ldp	x25, x26, [sp, #64]
 1a8:	str	w1, [x19, #56]
 1ac:	b	70 <__asan_backtrace_pcinfo+0x70>
 1b0:	ldr	w0, [sp, #100]
 1b4:	cbnz	w0, 178 <__asan_backtrace_pcinfo+0x178>
 1b8:	b	198 <__asan_backtrace_pcinfo+0x198>
 1bc:	bl	0 <getpid>
 1c0:	sxtw	x3, w0
 1c4:	add	x1, sp, #0x70
 1c8:	mov	x2, x25
 1cc:	mov	x21, x1
 1d0:	mov	x0, x1
 1d4:	mov	x1, #0x40                  	// #64
 1d8:	bl	0 <snprintf>
 1dc:	b	120 <__asan_backtrace_pcinfo+0x120>
 1e0:	mov	x21, x26
 1e4:	b	120 <__asan_backtrace_pcinfo+0x120>
 1e8:	add	x1, x19, #0x18
 1ec:	stlr	x0, [x1]
 1f0:	ldp	x25, x26, [sp, #64]
 1f4:	b	48 <__asan_backtrace_pcinfo+0x48>
 1f8:	adrp	x1, 0 <__asan_backtrace_pcinfo>
 1fc:	mov	w2, #0x0                   	// #0
 200:	add	x1, x1, #0x0
 204:	blr	x22
 208:	b	198 <__asan_backtrace_pcinfo+0x198>
 20c:	mov	w0, #0x1                   	// #1
 210:	add	x19, x19, #0x38
 214:	stlr	w0, [x19]
 218:	ldp	x25, x26, [sp, #64]
 21c:	mov	w0, #0x0                   	// #0
 220:	b	70 <__asan_backtrace_pcinfo+0x70>
 224:	nop

0000000000000228 <__asan_backtrace_syminfo>:
 228:	stp	x29, x30, [sp, #-176]!
 22c:	mov	x29, sp
 230:	stp	x19, x20, [sp, #16]
 234:	mov	x19, x0
 238:	ldr	w0, [x0, #8]
 23c:	stp	x21, x22, [sp, #32]
 240:	mov	x22, x3
 244:	stp	x23, x24, [sp, #48]
 248:	mov	x23, x1
 24c:	mov	x24, x2
 250:	stp	x27, x28, [sp, #80]
 254:	mov	x28, x4
 258:	cbnz	w0, 2e4 <__asan_backtrace_syminfo+0xbc>
 25c:	ldr	w0, [x19, #56]
 260:	cbnz	w0, 2b4 <__asan_backtrace_syminfo+0x8c>
 264:	ldr	x0, [x19, #24]
 268:	str	x0, [sp, #104]
 26c:	cbz	x0, 308 <__asan_backtrace_syminfo+0xe0>
 270:	ldr	w1, [x19, #56]
 274:	mov	w0, #0x0                   	// #0
 278:	cbnz	w1, 29c <__asan_backtrace_syminfo+0x74>
 27c:	ldr	x5, [x19, #40]
 280:	mov	x0, x19
 284:	mov	x4, x28
 288:	mov	x3, x22
 28c:	mov	x2, x24
 290:	mov	x1, x23
 294:	blr	x5
 298:	mov	w0, #0x1                   	// #1
 29c:	ldp	x19, x20, [sp, #16]
 2a0:	ldp	x21, x22, [sp, #32]
 2a4:	ldp	x23, x24, [sp, #48]
 2a8:	ldp	x27, x28, [sp, #80]
 2ac:	ldp	x29, x30, [sp], #176
 2b0:	ret
 2b4:	mov	x0, x28
 2b8:	mov	w2, #0xffffffff            	// #-1
 2bc:	adrp	x1, 0 <__asan_backtrace_pcinfo>
 2c0:	add	x1, x1, #0x0
 2c4:	blr	x22
 2c8:	mov	w0, #0x0                   	// #0
 2cc:	ldp	x19, x20, [sp, #16]
 2d0:	ldp	x21, x22, [sp, #32]
 2d4:	ldp	x23, x24, [sp, #48]
 2d8:	ldp	x27, x28, [sp, #80]
 2dc:	ldp	x29, x30, [sp], #176
 2e0:	ret
 2e4:	add	x0, x19, #0x38
 2e8:	ldar	w0, [x0]
 2ec:	cbnz	w0, 2b4 <__asan_backtrace_syminfo+0x8c>
 2f0:	ldr	w0, [x19, #8]
 2f4:	cbz	w0, 264 <__asan_backtrace_syminfo+0x3c>
 2f8:	add	x0, x19, #0x18
 2fc:	ldar	x0, [x0]
 300:	str	x0, [sp, #104]
 304:	cbnz	x0, 270 <__asan_backtrace_syminfo+0x48>
 308:	add	x27, sp, #0x64
 30c:	stp	x25, x26, [sp, #64]
 310:	adrp	x26, 0 <__asan_backtrace_pcinfo>
 314:	adrp	x25, 0 <__asan_backtrace_pcinfo>
 318:	add	x26, x26, #0x0
 31c:	add	x25, x25, #0x0
 320:	mov	w20, #0x0                   	// #0
 324:	cmp	w20, #0x3
 328:	b.eq	40c <__asan_backtrace_syminfo+0x1e4>  // b.none
 32c:	cmp	w20, #0x4
 330:	b.eq	3e8 <__asan_backtrace_syminfo+0x1c0>  // b.none
 334:	cmp	w20, #0x1
 338:	b.eq	3a4 <__asan_backtrace_syminfo+0x17c>  // b.none
 33c:	cmp	w20, #0x2
 340:	b.ne	39c <__asan_backtrace_syminfo+0x174>  // b.any
 344:	adrp	x21, 0 <__asan_backtrace_pcinfo>
 348:	add	x21, x21, #0x0
 34c:	mov	x3, x27
 350:	mov	x2, x28
 354:	mov	x1, x22
 358:	mov	x0, x21
 35c:	bl	0 <__asan_backtrace_open>
 360:	tbnz	w0, #31, 3dc <__asan_backtrace_syminfo+0x1b4>
 364:	mov	w2, w0
 368:	mov	x1, x21
 36c:	add	x5, sp, #0x68
 370:	mov	x4, x28
 374:	mov	x3, x22
 378:	mov	x0, x19
 37c:	bl	0 <__asan_backtrace_initialize>
 380:	cbz	w0, 3c4 <__asan_backtrace_syminfo+0x19c>
 384:	ldr	w1, [x19, #8]
 388:	ldr	x0, [sp, #104]
 38c:	cbnz	w1, 414 <__asan_backtrace_syminfo+0x1ec>
 390:	ldp	x25, x26, [sp, #64]
 394:	str	x0, [x19, #24]
 398:	b	270 <__asan_backtrace_syminfo+0x48>
 39c:	ldr	x21, [x19]
 3a0:	cbnz	x21, 34c <__asan_backtrace_syminfo+0x124>
 3a4:	add	w20, w20, #0x1
 3a8:	cmp	w20, #0x5
 3ac:	b.ne	324 <__asan_backtrace_syminfo+0xfc>  // b.any
 3b0:	ldr	x1, [x19]
 3b4:	mov	x0, x28
 3b8:	cbz	x1, 424 <__asan_backtrace_syminfo+0x1fc>
 3bc:	mov	w2, #0x2                   	// #2
 3c0:	blr	x22
 3c4:	ldr	w0, [x19, #8]
 3c8:	cbnz	w0, 438 <__asan_backtrace_syminfo+0x210>
 3cc:	mov	w1, #0x1                   	// #1
 3d0:	ldp	x25, x26, [sp, #64]
 3d4:	str	w1, [x19, #56]
 3d8:	b	29c <__asan_backtrace_syminfo+0x74>
 3dc:	ldr	w0, [sp, #100]
 3e0:	cbnz	w0, 3a4 <__asan_backtrace_syminfo+0x17c>
 3e4:	b	3c4 <__asan_backtrace_syminfo+0x19c>
 3e8:	bl	0 <getpid>
 3ec:	sxtw	x3, w0
 3f0:	add	x1, sp, #0x70
 3f4:	mov	x2, x25
 3f8:	mov	x21, x1
 3fc:	mov	x0, x1
 400:	mov	x1, #0x40                  	// #64
 404:	bl	0 <snprintf>
 408:	b	34c <__asan_backtrace_syminfo+0x124>
 40c:	mov	x21, x26
 410:	b	34c <__asan_backtrace_syminfo+0x124>
 414:	add	x1, x19, #0x18
 418:	stlr	x0, [x1]
 41c:	ldp	x25, x26, [sp, #64]
 420:	b	270 <__asan_backtrace_syminfo+0x48>
 424:	adrp	x1, 0 <__asan_backtrace_pcinfo>
 428:	mov	w2, #0x0                   	// #0
 42c:	add	x1, x1, #0x0
 430:	blr	x22
 434:	b	3c4 <__asan_backtrace_syminfo+0x19c>
 438:	mov	w0, #0x1                   	// #1
 43c:	add	x19, x19, #0x38
 440:	stlr	w0, [x19]
 444:	ldp	x25, x26, [sp, #64]
 448:	mov	w0, #0x0                   	// #0
 44c:	b	29c <__asan_backtrace_syminfo+0x74>

mmap.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_free>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x1
  14:	str	x21, [sp, #32]
  18:	mov	x0, #0xffff                	// #65535
  1c:	mov	x21, x2
  20:	cmp	x2, x0
  24:	b.ls	40 <__asan_backtrace_free+0x40>  // b.plast
  28:	bl	0 <getpagesize>
  2c:	sxtw	x0, w0
  30:	orr	x1, x20, x21
  34:	sub	x0, x0, #0x1
  38:	tst	x0, x1
  3c:	b.eq	114 <__asan_backtrace_free+0x114>  // b.none
  40:	ldr	w7, [x19, #8]
  44:	cbnz	w7, d8 <__asan_backtrace_free+0xd8>
  48:	cmp	x21, #0xf
  4c:	b.ls	c8 <__asan_backtrace_free+0xc8>  // b.plast
  50:	ldr	x3, [x19, #64]
  54:	add	x0, x19, #0x40
  58:	mov	x9, x3
  5c:	cbz	x3, 128 <__asan_backtrace_free+0x128>
  60:	mov	x4, x3
  64:	mov	x6, #0x0                   	// #0
  68:	b	84 <__asan_backtrace_free+0x84>
  6c:	ldr	x4, [x0]
  70:	ldr	x5, [x3, #8]
  74:	ldr	x1, [x4, #8]
  78:	cmp	x5, x1
  7c:	csel	x4, x4, x3, cs  // cs = hs, nlast
  80:	csel	x0, x0, x8, cs  // cs = hs, nlast
  84:	mov	x8, x3
  88:	add	x6, x6, #0x1
  8c:	ldr	x3, [x3]
  90:	cbnz	x3, 6c <__asan_backtrace_free+0x6c>
  94:	cmp	x6, #0xf
  98:	b.ls	b4 <__asan_backtrace_free+0xb4>  // b.plast
  9c:	ldr	x1, [x4, #8]
  a0:	cmp	x21, x1
  a4:	b.ls	bc <__asan_backtrace_free+0xbc>  // b.plast
  a8:	ldr	x1, [x4]
  ac:	str	x1, [x0]
  b0:	ldr	x9, [x19, #64]
  b4:	stp	x9, x21, [x20]
  b8:	str	x20, [x19, #64]
  bc:	cbz	w7, c8 <__asan_backtrace_free+0xc8>
  c0:	add	x19, x19, #0x3c
  c4:	stlr	wzr, [x19]
  c8:	ldp	x19, x20, [sp, #16]
  cc:	ldr	x21, [sp, #32]
  d0:	ldp	x29, x30, [sp], #48
  d4:	ret
  d8:	add	x0, x19, #0x3c
  dc:	mov	w3, #0x1                   	// #1
  e0:	ldxr	w1, [x0]
  e4:	stxr	w2, w3, [x0]
  e8:	cbnz	w2, e0 <__asan_backtrace_free+0xe0>
  ec:	dmb	ish
  f0:	cbnz	w1, c8 <__asan_backtrace_free+0xc8>
  f4:	ldr	w7, [x19, #8]
  f8:	cmp	x21, #0xf
  fc:	b.ls	bc <__asan_backtrace_free+0xbc>  // b.plast
 100:	ldr	x9, [x19, #64]
 104:	add	x0, x19, #0x40
 108:	mov	x3, x9
 10c:	cbnz	x9, 60 <__asan_backtrace_free+0x60>
 110:	b	b4 <__asan_backtrace_free+0xb4>
 114:	mov	x1, x21
 118:	mov	x0, x20
 11c:	bl	0 <munmap>
 120:	cbnz	w0, 40 <__asan_backtrace_free+0x40>
 124:	b	c8 <__asan_backtrace_free+0xc8>
 128:	stp	xzr, x21, [x20]
 12c:	str	x20, [x19, #64]
 130:	b	c8 <__asan_backtrace_free+0xc8>
 134:	nop

0000000000000138 <__asan_backtrace_alloc>:
 138:	stp	x29, x30, [sp, #-64]!
 13c:	mov	x29, sp
 140:	ldr	w8, [x0, #8]
 144:	stp	x19, x20, [sp, #16]
 148:	mov	x20, x1
 14c:	stp	x21, x22, [sp, #32]
 150:	mov	x21, x0
 154:	stp	x23, x24, [sp, #48]
 158:	mov	x24, x2
 15c:	mov	x23, x3
 160:	cbnz	w8, 240 <__asan_backtrace_alloc+0x108>
 164:	ldr	x4, [x0, #64]
 168:	add	x7, x0, #0x40
 16c:	cbz	x4, 280 <__asan_backtrace_alloc+0x148>
 170:	mov	x6, x7
 174:	b	180 <__asan_backtrace_alloc+0x48>
 178:	mov	x6, x19
 17c:	cbz	x4, 270 <__asan_backtrace_alloc+0x138>
 180:	ldr	x5, [x4, #8]
 184:	mov	x19, x4
 188:	ldr	x4, [x4]
 18c:	cmp	x5, x20
 190:	b.cc	178 <__asan_backtrace_alloc+0x40>  // b.lo, b.ul, b.last
 194:	add	x20, x20, #0x7
 198:	str	x4, [x6]
 19c:	and	x20, x20, #0xfffffffffffffff8
 1a0:	cmp	x5, x20
 1a4:	b.ls	224 <__asan_backtrace_alloc+0xec>  // b.plast
 1a8:	sub	x5, x5, x20
 1ac:	cmp	x5, #0xf
 1b0:	b.ls	224 <__asan_backtrace_alloc+0xec>  // b.plast
 1b4:	ldr	x9, [x21, #64]
 1b8:	mov	x4, #0x0                   	// #0
 1bc:	mov	x0, x9
 1c0:	mov	x1, x9
 1c4:	cbnz	x9, 1e4 <__asan_backtrace_alloc+0xac>
 1c8:	b	214 <__asan_backtrace_alloc+0xdc>
 1cc:	ldr	x1, [x7]
 1d0:	ldr	x3, [x0, #8]
 1d4:	ldr	x2, [x1, #8]
 1d8:	cmp	x3, x2
 1dc:	csel	x1, x1, x0, cs  // cs = hs, nlast
 1e0:	csel	x7, x7, x6, cs  // cs = hs, nlast
 1e4:	mov	x6, x0
 1e8:	add	x4, x4, #0x1
 1ec:	ldr	x0, [x0]
 1f0:	cbnz	x0, 1cc <__asan_backtrace_alloc+0x94>
 1f4:	cmp	x4, #0xf
 1f8:	b.ls	214 <__asan_backtrace_alloc+0xdc>  // b.plast
 1fc:	ldr	x0, [x1, #8]
 200:	cmp	x5, x0
 204:	b.ls	224 <__asan_backtrace_alloc+0xec>  // b.plast
 208:	ldr	x0, [x1]
 20c:	str	x0, [x7]
 210:	ldr	x9, [x21, #64]
 214:	add	x0, x19, x20
 218:	str	x9, [x19, x20]
 21c:	str	x5, [x0, #8]
 220:	str	x0, [x21, #64]
 224:	cbnz	w8, 314 <__asan_backtrace_alloc+0x1dc>
 228:	mov	x0, x19
 22c:	ldp	x19, x20, [sp, #16]
 230:	ldp	x21, x22, [sp, #32]
 234:	ldp	x23, x24, [sp, #48]
 238:	ldp	x29, x30, [sp], #64
 23c:	ret
 240:	add	x0, x0, #0x3c
 244:	mov	w2, #0x1                   	// #1
 248:	ldxr	w1, [x0]
 24c:	stxr	w3, w2, [x0]
 250:	cbnz	w3, 248 <__asan_backtrace_alloc+0x110>
 254:	dmb	ish
 258:	cbnz	w1, 280 <__asan_backtrace_alloc+0x148>
 25c:	ldr	x4, [x21, #64]
 260:	add	x7, x21, #0x40
 264:	ldr	w8, [x21, #8]
 268:	cbnz	x4, 170 <__asan_backtrace_alloc+0x38>
 26c:	nop
 270:	cbz	w8, 280 <__asan_backtrace_alloc+0x148>
 274:	add	x0, x21, #0x3c
 278:	stlr	wzr, [x0]
 27c:	nop
 280:	bl	0 <getpagesize>
 284:	sub	x22, x20, #0x1
 288:	sxtw	x0, w0
 28c:	mov	x5, #0x0                   	// #0
 290:	add	x22, x22, x0
 294:	neg	x0, x0
 298:	and	x22, x22, x0
 29c:	mov	w4, #0xffffffff            	// #-1
 2a0:	mov	x1, x22
 2a4:	mov	w3, #0x22                  	// #34
 2a8:	mov	w2, #0x3                   	// #3
 2ac:	mov	x0, #0x0                   	// #0
 2b0:	bl	0 <mmap>
 2b4:	mov	x19, x0
 2b8:	cmn	x0, #0x1
 2bc:	b.eq	2ec <__asan_backtrace_alloc+0x1b4>  // b.none
 2c0:	add	x1, x20, #0x7
 2c4:	and	x1, x1, #0xfffffffffffffff8
 2c8:	cmp	x22, x1
 2cc:	b.ls	228 <__asan_backtrace_alloc+0xf0>  // b.plast
 2d0:	sub	x2, x22, x1
 2d4:	mov	x4, x23
 2d8:	add	x1, x0, x1
 2dc:	mov	x3, x24
 2e0:	mov	x0, x21
 2e4:	bl	0 <__asan_backtrace_free>
 2e8:	b	228 <__asan_backtrace_alloc+0xf0>
 2ec:	mov	x19, #0x0                   	// #0
 2f0:	cbz	x24, 228 <__asan_backtrace_alloc+0xf0>
 2f4:	bl	0 <__errno_location>
 2f8:	mov	x2, x0
 2fc:	adrp	x1, 0 <__asan_backtrace_free>
 300:	mov	x0, x23
 304:	add	x1, x1, #0x0
 308:	ldr	w2, [x2]
 30c:	blr	x24
 310:	b	228 <__asan_backtrace_alloc+0xf0>
 314:	add	x21, x21, #0x3c
 318:	stlr	wzr, [x21]
 31c:	b	228 <__asan_backtrace_alloc+0xf0>

0000000000000320 <__asan_backtrace_vector_grow>:
 320:	stp	x29, x30, [sp, #-80]!
 324:	mov	x29, sp
 328:	ldp	x6, x5, [x4, #8]
 32c:	stp	x19, x20, [sp, #16]
 330:	mov	x19, x4
 334:	stp	x21, x22, [sp, #32]
 338:	mov	x21, x1
 33c:	add	x20, x1, x6
 340:	cmp	x5, x1
 344:	b.cc	36c <__asan_backtrace_vector_grow+0x4c>  // b.lo, b.ul, b.last
 348:	ldr	x22, [x4]
 34c:	add	x22, x22, x6
 350:	sub	x5, x5, x21
 354:	stp	x20, x5, [x19, #8]
 358:	mov	x0, x22
 35c:	ldp	x19, x20, [sp, #16]
 360:	ldp	x21, x22, [sp, #32]
 364:	ldp	x29, x30, [sp], #80
 368:	ret
 36c:	stp	x23, x24, [sp, #48]
 370:	mov	x23, x0
 374:	mov	x24, x2
 378:	str	x25, [sp, #64]
 37c:	mov	x25, x3
 380:	cbnz	x6, 3ec <__asan_backtrace_vector_grow+0xcc>
 384:	lsl	x20, x20, #4
 388:	mov	x3, x25
 38c:	mov	x2, x24
 390:	mov	x1, x20
 394:	mov	x0, x23
 398:	bl	138 <__asan_backtrace_alloc>
 39c:	mov	x22, x0
 3a0:	cbz	x0, 420 <__asan_backtrace_vector_grow+0x100>
 3a4:	ldp	x1, x6, [x19]
 3a8:	cbz	x1, 3d4 <__asan_backtrace_vector_grow+0xb4>
 3ac:	mov	x2, x6
 3b0:	bl	0 <__asan_internal_memcpy>
 3b4:	ldp	x1, x5, [x19]
 3b8:	mov	x4, x25
 3bc:	ldr	x2, [x19, #16]
 3c0:	mov	x3, x24
 3c4:	mov	x0, x23
 3c8:	add	x2, x5, x2
 3cc:	bl	0 <__asan_backtrace_free>
 3d0:	ldr	x6, [x19, #8]
 3d4:	sub	x5, x20, x6
 3d8:	add	x20, x21, x6
 3dc:	ldp	x23, x24, [sp, #48]
 3e0:	ldr	x25, [sp, #64]
 3e4:	str	x22, [x19]
 3e8:	b	34c <__asan_backtrace_vector_grow+0x2c>
 3ec:	bl	0 <getpagesize>
 3f0:	cmp	x20, w0, sxtw
 3f4:	lsl	x6, x20, #1
 3f8:	sxtw	x5, w0
 3fc:	b.cs	40c <__asan_backtrace_vector_grow+0xec>  // b.hs, b.nlast
 400:	cmp	x5, x6
 404:	csel	x20, x5, x6, ls  // ls = plast
 408:	b	388 <__asan_backtrace_vector_grow+0x68>
 40c:	sub	x20, x6, #0x1
 410:	neg	x0, x5
 414:	add	x20, x20, x5
 418:	and	x20, x20, x0
 41c:	b	388 <__asan_backtrace_vector_grow+0x68>
 420:	ldp	x23, x24, [sp, #48]
 424:	ldr	x25, [sp, #64]
 428:	b	358 <__asan_backtrace_vector_grow+0x38>
 42c:	nop

0000000000000430 <__asan_backtrace_vector_finish>:
 430:	ldp	x0, x2, [x1]
 434:	add	x2, x0, x2
 438:	stp	x2, xzr, [x1]
 43c:	ret

0000000000000440 <__asan_backtrace_vector_release>:
 440:	stp	x29, x30, [sp, #-32]!
 444:	mov	x4, x3
 448:	mov	x3, x2
 44c:	mov	x29, sp
 450:	ldp	x2, x6, [x1, #8]
 454:	str	x19, [sp, #16]
 458:	mov	x19, x1
 45c:	ldr	x5, [x19]
 460:	add	x1, x2, #0x7
 464:	and	x1, x1, #0xfffffffffffffff8
 468:	add	x2, x2, x6
 46c:	sub	x2, x2, x1
 470:	add	x1, x5, x1
 474:	bl	0 <__asan_backtrace_free>
 478:	str	xzr, [x19, #16]
 47c:	ldr	x0, [x19, #8]
 480:	cbnz	x0, 488 <__asan_backtrace_vector_release+0x48>
 484:	str	xzr, [x19]
 488:	mov	w0, #0x1                   	// #1
 48c:	ldr	x19, [sp, #16]
 490:	ldp	x29, x30, [sp], #32
 494:	ret

mmapio.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_get_view>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x3
  10:	mov	x20, x4
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x2
  1c:	mov	x21, x5
  20:	stp	x23, x24, [sp, #48]
  24:	mov	w24, w1
  28:	mov	x23, x6
  2c:	bl	0 <getpagesize>
  30:	sxtw	x7, w0
  34:	sub	x8, x19, #0x1
  38:	neg	x1, x7
  3c:	mov	w4, w24
  40:	mov	w3, #0x2                   	// #2
  44:	udiv	x19, x22, x7
  48:	mov	w2, #0x1                   	// #1
  4c:	mov	x0, #0x0                   	// #0
  50:	msub	w19, w19, w7, w22
  54:	add	x7, x7, x19
  58:	sub	x5, x22, x19
  5c:	add	x7, x8, x7
  60:	and	x22, x1, x7
  64:	mov	x1, x22
  68:	bl	0 <mmap>
  6c:	cmn	x0, #0x1
  70:	b.eq	9c <__asan_backtrace_get_view+0x9c>  // b.none
  74:	mov	x2, x0
  78:	add	x19, x0, x19
  7c:	stp	x19, x2, [x23]
  80:	mov	w0, #0x1                   	// #1
  84:	str	x22, [x23, #16]
  88:	ldp	x19, x20, [sp, #16]
  8c:	ldp	x21, x22, [sp, #32]
  90:	ldp	x23, x24, [sp, #48]
  94:	ldp	x29, x30, [sp], #64
  98:	ret
  9c:	bl	0 <__errno_location>
  a0:	mov	x2, x0
  a4:	adrp	x1, 0 <__asan_backtrace_get_view>
  a8:	mov	x0, x21
  ac:	add	x1, x1, #0x0
  b0:	ldr	w2, [x2]
  b4:	blr	x20
  b8:	mov	w0, #0x0                   	// #0
  bc:	ldp	x19, x20, [sp, #16]
  c0:	ldp	x21, x22, [sp, #32]
  c4:	ldp	x23, x24, [sp, #48]
  c8:	ldp	x29, x30, [sp], #64
  cc:	ret

00000000000000d0 <__asan_backtrace_release_view>:
  d0:	stp	x29, x30, [sp, #-32]!
  d4:	mov	x29, sp
  d8:	ldp	x0, x1, [x1, #8]
  dc:	stp	x19, x20, [sp, #16]
  e0:	mov	x19, x2
  e4:	mov	x20, x3
  e8:	bl	0 <munmap>
  ec:	tbnz	w0, #31, fc <__asan_backtrace_release_view+0x2c>
  f0:	ldp	x19, x20, [sp, #16]
  f4:	ldp	x29, x30, [sp], #32
  f8:	ret
  fc:	bl	0 <__errno_location>
 100:	mov	x2, x0
 104:	mov	x16, x19
 108:	mov	x0, x20
 10c:	ldp	x19, x20, [sp, #16]
 110:	adrp	x1, 0 <__asan_backtrace_get_view>
 114:	ldp	x29, x30, [sp], #32
 118:	add	x1, x1, #0x0
 11c:	ldr	w2, [x2]
 120:	br	x16

posix.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_open>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	mov	x22, x2
  14:	mov	x21, x0
  18:	str	x23, [sp, #48]
  1c:	mov	x23, x1
  20:	cbz	x3, 64 <__asan_backtrace_open+0x64>
  24:	str	wzr, [x3]
  28:	mov	x20, x3
  2c:	mov	w1, #0x80000               	// #524288
  30:	bl	0 <open>
  34:	mov	w19, w0
  38:	tbnz	w0, #31, 90 <__asan_backtrace_open+0x90>
  3c:	mov	w0, w19
  40:	mov	w2, #0x1                   	// #1
  44:	mov	w1, #0x2                   	// #2
  48:	bl	0 <fcntl>
  4c:	mov	w0, w19
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x21, x22, [sp, #32]
  58:	ldr	x23, [sp, #48]
  5c:	ldp	x29, x30, [sp], #64
  60:	ret
  64:	mov	w1, #0x80000               	// #524288
  68:	bl	0 <open>
  6c:	mov	w19, w0
  70:	tbz	w0, #31, 3c <__asan_backtrace_open+0x3c>
  74:	bl	0 <__errno_location>
  78:	ldr	w2, [x0]
  7c:	mov	x1, x21
  80:	mov	x0, x22
  84:	mov	w19, #0xffffffff            	// #-1
  88:	blr	x23
  8c:	b	4c <__asan_backtrace_open+0x4c>
  90:	bl	0 <__errno_location>
  94:	ldr	w1, [x0]
  98:	cmp	w1, #0x2
  9c:	b.ne	78 <__asan_backtrace_open+0x78>  // b.any
  a0:	mov	w0, #0x1                   	// #1
  a4:	mov	w19, #0xffffffff            	// #-1
  a8:	str	w0, [x20]
  ac:	b	4c <__asan_backtrace_open+0x4c>

00000000000000b0 <__asan_backtrace_close>:
  b0:	stp	x29, x30, [sp, #-32]!
  b4:	mov	x29, sp
  b8:	stp	x19, x20, [sp, #16]
  bc:	mov	x19, x1
  c0:	mov	x20, x2
  c4:	bl	0 <close>
  c8:	tbnz	w0, #31, dc <__asan_backtrace_close+0x2c>
  cc:	mov	w0, #0x1                   	// #1
  d0:	ldp	x19, x20, [sp, #16]
  d4:	ldp	x29, x30, [sp], #32
  d8:	ret
  dc:	bl	0 <__errno_location>
  e0:	mov	x2, x0
  e4:	adrp	x1, 0 <__asan_backtrace_open>
  e8:	mov	x0, x20
  ec:	add	x1, x1, #0x0
  f0:	ldr	w2, [x2]
  f4:	blr	x19
  f8:	mov	w0, #0x0                   	// #0
  fc:	ldp	x19, x20, [sp, #16]
 100:	ldp	x29, x30, [sp], #32
 104:	ret

sort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_qsort>:
   0:	cmp	x1, #0x1
   4:	b.ls	834 <__asan_backtrace_qsort+0x834>  // b.plast
   8:	stp	x29, x30, [sp, #-224]!
   c:	mov	x29, sp
  10:	stp	x27, x28, [sp, #80]
  14:	and	x27, x2, #0xfffffffffffffff0
  18:	stp	x25, x26, [sp, #64]
  1c:	mov	x26, x0
  20:	add	x0, x27, #0x1
  24:	str	x0, [sp, #112]
  28:	add	x0, x27, #0x2
  2c:	str	x0, [sp, #120]
  30:	add	x0, x27, #0x3
  34:	str	x0, [sp, #128]
  38:	add	x0, x27, #0x4
  3c:	str	x0, [sp, #136]
  40:	add	x0, x27, #0x5
  44:	str	x0, [sp, #144]
  48:	add	x0, x27, #0x6
  4c:	str	x0, [sp, #152]
  50:	add	x0, x27, #0x7
  54:	str	x0, [sp, #160]
  58:	add	x0, x27, #0x8
  5c:	str	x0, [sp, #168]
  60:	add	x0, x27, #0x9
  64:	str	x0, [sp, #176]
  68:	add	x0, x27, #0xa
  6c:	str	x0, [sp, #184]
  70:	add	x0, x27, #0xb
  74:	str	x0, [sp, #192]
  78:	add	x0, x27, #0xc
  7c:	str	x0, [sp, #200]
  80:	add	x0, x27, #0xd
  84:	mov	x28, x26
  88:	mov	x26, x2
  8c:	stp	x19, x20, [sp, #16]
  90:	mov	x19, x1
  94:	mov	x20, x27
  98:	stp	x21, x22, [sp, #32]
  9c:	mov	x21, x3
  a0:	str	x0, [sp, #208]
  a4:	add	x0, x27, #0xe
  a8:	stp	x23, x24, [sp, #48]
  ac:	str	x0, [sp, #216]
  b0:	sub	x0, x2, #0x1
  b4:	str	x0, [sp, #104]
  b8:	lsr	x0, x19, #1
  bc:	mul	x0, x0, x26
  c0:	add	x1, x28, x0
  c4:	cbz	x26, 2b0 <__asan_backtrace_qsort+0x2b0>
  c8:	add	x0, x0, #0x10
  cc:	add	x3, x28, #0x10
  d0:	cmp	x0, #0x0
  d4:	ldr	x0, [sp, #104]
  d8:	ccmp	x1, x3, #0x2, gt
  dc:	ccmp	x0, #0xe, #0x0, cs  // cs = hs, nlast
  e0:	mov	x0, #0x0                   	// #0
  e4:	b.ls	53c <__asan_backtrace_qsort+0x53c>  // b.plast
  e8:	ldr	q1, [x1, x0]
  ec:	ldr	q0, [x28, x0]
  f0:	str	q1, [x28, x0]
  f4:	str	q0, [x1, x0]
  f8:	add	x0, x0, #0x10
  fc:	cmp	x0, x20
 100:	b.ne	e8 <__asan_backtrace_qsort+0xe8>  // b.any
 104:	cmp	x26, x27
 108:	add	x3, x28, x27
 10c:	add	x0, x1, x27
 110:	b.eq	2b0 <__asan_backtrace_qsort+0x2b0>  // b.none
 114:	ldrb	w6, [x1, x27]
 118:	ldrb	w5, [x28, x27]
 11c:	strb	w6, [x28, x27]
 120:	ldr	x2, [sp, #112]
 124:	strb	w5, [x1, x27]
 128:	cmp	x26, x2
 12c:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 130:	ldr	x1, [sp, #120]
 134:	ldrb	w5, [x0, #1]
 138:	cmp	x26, x1
 13c:	ldrb	w1, [x3, #1]
 140:	strb	w5, [x3, #1]
 144:	strb	w1, [x0, #1]
 148:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 14c:	ldr	x1, [sp, #128]
 150:	ldrb	w5, [x0, #2]
 154:	cmp	x26, x1
 158:	ldrb	w1, [x3, #2]
 15c:	strb	w5, [x3, #2]
 160:	strb	w1, [x0, #2]
 164:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 168:	ldr	x1, [sp, #136]
 16c:	ldrb	w5, [x0, #3]
 170:	cmp	x26, x1
 174:	ldrb	w1, [x3, #3]
 178:	strb	w5, [x3, #3]
 17c:	strb	w1, [x0, #3]
 180:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 184:	ldr	x1, [sp, #144]
 188:	ldrb	w5, [x0, #4]
 18c:	cmp	x26, x1
 190:	ldrb	w1, [x3, #4]
 194:	strb	w5, [x3, #4]
 198:	strb	w1, [x0, #4]
 19c:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 1a0:	ldr	x1, [sp, #152]
 1a4:	ldrb	w5, [x0, #5]
 1a8:	cmp	x26, x1
 1ac:	ldrb	w1, [x3, #5]
 1b0:	strb	w5, [x3, #5]
 1b4:	strb	w1, [x0, #5]
 1b8:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 1bc:	ldr	x1, [sp, #160]
 1c0:	ldrb	w5, [x0, #6]
 1c4:	cmp	x26, x1
 1c8:	ldrb	w1, [x3, #6]
 1cc:	strb	w5, [x3, #6]
 1d0:	strb	w1, [x0, #6]
 1d4:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 1d8:	ldr	x1, [sp, #168]
 1dc:	ldrb	w5, [x0, #7]
 1e0:	cmp	x26, x1
 1e4:	ldrb	w1, [x3, #7]
 1e8:	strb	w5, [x3, #7]
 1ec:	strb	w1, [x0, #7]
 1f0:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 1f4:	ldr	x1, [sp, #176]
 1f8:	ldrb	w5, [x0, #8]
 1fc:	cmp	x26, x1
 200:	ldrb	w1, [x3, #8]
 204:	strb	w5, [x3, #8]
 208:	strb	w1, [x0, #8]
 20c:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 210:	ldr	x1, [sp, #184]
 214:	ldrb	w5, [x0, #9]
 218:	cmp	x26, x1
 21c:	ldrb	w1, [x3, #9]
 220:	strb	w5, [x3, #9]
 224:	strb	w1, [x0, #9]
 228:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 22c:	ldr	x1, [sp, #192]
 230:	ldrb	w5, [x0, #10]
 234:	cmp	x26, x1
 238:	ldrb	w1, [x3, #10]
 23c:	strb	w5, [x3, #10]
 240:	strb	w1, [x0, #10]
 244:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 248:	ldr	x1, [sp, #200]
 24c:	ldrb	w5, [x0, #11]
 250:	cmp	x26, x1
 254:	ldrb	w1, [x3, #11]
 258:	strb	w5, [x3, #11]
 25c:	strb	w1, [x0, #11]
 260:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 264:	ldr	x1, [sp, #208]
 268:	ldrb	w5, [x0, #12]
 26c:	cmp	x26, x1
 270:	ldrb	w1, [x3, #12]
 274:	strb	w5, [x3, #12]
 278:	strb	w1, [x0, #12]
 27c:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 280:	ldr	x1, [sp, #216]
 284:	ldrb	w5, [x0, #13]
 288:	cmp	x26, x1
 28c:	ldrb	w1, [x3, #13]
 290:	strb	w5, [x3, #13]
 294:	strb	w1, [x0, #13]
 298:	b.ls	2b0 <__asan_backtrace_qsort+0x2b0>  // b.plast
 29c:	ldrb	w5, [x0, #14]
 2a0:	ldrb	w1, [x3, #14]
 2a4:	strb	w5, [x3, #14]
 2a8:	strb	w1, [x0, #14]
 2ac:	nop
 2b0:	mov	x23, x26
 2b4:	mov	x24, #0x0                   	// #0
 2b8:	mov	x25, #0x1                   	// #1
 2bc:	b	2d0 <__asan_backtrace_qsort+0x2d0>
 2c0:	add	x25, x25, #0x1
 2c4:	add	x23, x23, x26
 2c8:	cmp	x25, x19
 2cc:	b.cs	50c <__asan_backtrace_qsort+0x50c>  // b.hs, b.nlast
 2d0:	add	x22, x28, x23
 2d4:	mov	x0, x28
 2d8:	mov	x1, x22
 2dc:	blr	x21
 2e0:	add	x7, x24, #0x1
 2e4:	cmp	w0, #0x0
 2e8:	mov	x3, x7
 2ec:	b.le	2c0 <__asan_backtrace_qsort+0x2c0>
 2f0:	add	x7, x24, #0x2
 2f4:	cmp	x3, x25
 2f8:	mov	x24, x25
 2fc:	b.eq	2c0 <__asan_backtrace_qsort+0x2c0>  // b.none
 300:	mul	x0, x26, x3
 304:	add	x1, x28, x0
 308:	cbz	x26, 4f8 <__asan_backtrace_qsort+0x4f8>
 30c:	add	x2, x23, #0x10
 310:	add	x4, x0, #0x10
 314:	cmp	x0, x2
 318:	ldr	x0, [sp, #104]
 31c:	ccmp	x4, x23, #0x4, lt  // lt = tstop
 320:	ccmp	x0, #0xe, #0x0, le
 324:	mov	x0, #0x0                   	// #0
 328:	b.ls	578 <__asan_backtrace_qsort+0x578>  // b.plast
 32c:	nop
 330:	ldr	q1, [x22, x0]
 334:	ldr	q0, [x1, x0]
 338:	str	q1, [x1, x0]
 33c:	str	q0, [x22, x0]
 340:	add	x0, x0, #0x10
 344:	cmp	x0, x20
 348:	b.ne	330 <__asan_backtrace_qsort+0x330>  // b.any
 34c:	cmp	x26, x27
 350:	add	x2, x1, x27
 354:	add	x0, x22, x27
 358:	b.eq	4f8 <__asan_backtrace_qsort+0x4f8>  // b.none
 35c:	ldr	x4, [sp, #112]
 360:	ldrb	w5, [x22, x27]
 364:	cmp	x26, x4
 368:	ldrb	w4, [x1, x27]
 36c:	strb	w5, [x1, x27]
 370:	strb	w4, [x22, x27]
 374:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 378:	ldr	x1, [sp, #120]
 37c:	ldrb	w4, [x0, #1]
 380:	cmp	x26, x1
 384:	ldrb	w1, [x2, #1]
 388:	strb	w4, [x2, #1]
 38c:	strb	w1, [x0, #1]
 390:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 394:	ldr	x1, [sp, #128]
 398:	ldrb	w4, [x0, #2]
 39c:	cmp	x26, x1
 3a0:	ldrb	w1, [x2, #2]
 3a4:	strb	w4, [x2, #2]
 3a8:	strb	w1, [x0, #2]
 3ac:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 3b0:	ldr	x1, [sp, #136]
 3b4:	ldrb	w4, [x0, #3]
 3b8:	cmp	x26, x1
 3bc:	ldrb	w1, [x2, #3]
 3c0:	strb	w4, [x2, #3]
 3c4:	strb	w1, [x0, #3]
 3c8:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 3cc:	ldr	x1, [sp, #144]
 3d0:	ldrb	w4, [x0, #4]
 3d4:	cmp	x26, x1
 3d8:	ldrb	w1, [x2, #4]
 3dc:	strb	w4, [x2, #4]
 3e0:	strb	w1, [x0, #4]
 3e4:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 3e8:	ldr	x1, [sp, #152]
 3ec:	ldrb	w4, [x0, #5]
 3f0:	cmp	x26, x1
 3f4:	ldrb	w1, [x2, #5]
 3f8:	strb	w4, [x2, #5]
 3fc:	strb	w1, [x0, #5]
 400:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 404:	ldr	x1, [sp, #160]
 408:	ldrb	w4, [x0, #6]
 40c:	cmp	x26, x1
 410:	ldrb	w1, [x2, #6]
 414:	strb	w4, [x2, #6]
 418:	strb	w1, [x0, #6]
 41c:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 420:	ldr	x1, [sp, #168]
 424:	ldrb	w4, [x0, #7]
 428:	cmp	x26, x1
 42c:	ldrb	w1, [x2, #7]
 430:	strb	w4, [x2, #7]
 434:	strb	w1, [x0, #7]
 438:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 43c:	ldr	x1, [sp, #176]
 440:	ldrb	w4, [x0, #8]
 444:	cmp	x26, x1
 448:	ldrb	w1, [x2, #8]
 44c:	strb	w4, [x2, #8]
 450:	strb	w1, [x0, #8]
 454:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 458:	ldr	x1, [sp, #184]
 45c:	ldrb	w4, [x0, #9]
 460:	cmp	x26, x1
 464:	ldrb	w1, [x2, #9]
 468:	strb	w4, [x2, #9]
 46c:	strb	w1, [x0, #9]
 470:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 474:	ldr	x1, [sp, #192]
 478:	ldrb	w4, [x0, #10]
 47c:	cmp	x26, x1
 480:	ldrb	w1, [x2, #10]
 484:	strb	w4, [x2, #10]
 488:	strb	w1, [x0, #10]
 48c:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 490:	ldr	x1, [sp, #200]
 494:	ldrb	w4, [x0, #11]
 498:	cmp	x26, x1
 49c:	ldrb	w1, [x2, #11]
 4a0:	strb	w4, [x2, #11]
 4a4:	strb	w1, [x0, #11]
 4a8:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 4ac:	ldr	x1, [sp, #208]
 4b0:	ldrb	w4, [x0, #12]
 4b4:	cmp	x26, x1
 4b8:	ldrb	w1, [x2, #12]
 4bc:	strb	w4, [x2, #12]
 4c0:	strb	w1, [x0, #12]
 4c4:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 4c8:	ldr	x1, [sp, #216]
 4cc:	ldrb	w4, [x0, #13]
 4d0:	cmp	x26, x1
 4d4:	ldrb	w1, [x2, #13]
 4d8:	strb	w4, [x2, #13]
 4dc:	strb	w1, [x0, #13]
 4e0:	b.ls	4f8 <__asan_backtrace_qsort+0x4f8>  // b.plast
 4e4:	ldrb	w4, [x0, #14]
 4e8:	ldrb	w1, [x2, #14]
 4ec:	strb	w4, [x2, #14]
 4f0:	strb	w1, [x0, #14]
 4f4:	nop
 4f8:	add	x25, x25, #0x1
 4fc:	mov	x24, x3
 500:	add	x23, x23, x26
 504:	cmp	x25, x19
 508:	b.cc	2d0 <__asan_backtrace_qsort+0x2d0>  // b.lo, b.ul, b.last
 50c:	cbnz	x24, 5b4 <__asan_backtrace_qsort+0x5b4>
 510:	madd	x25, x7, x26, x28
 514:	sub	x19, x19, #0x1
 518:	mov	x1, x24
 51c:	mov	x0, x28
 520:	mov	x3, x21
 524:	mov	x2, x26
 528:	bl	0 <__asan_backtrace_qsort>
 52c:	cmp	x19, #0x1
 530:	b.ls	818 <__asan_backtrace_qsort+0x818>  // b.plast
 534:	mov	x28, x25
 538:	b	b8 <__asan_backtrace_qsort+0xb8>
 53c:	ldrb	w3, [x1, x0]
 540:	ldrb	w2, [x28, x0]
 544:	strb	w3, [x28, x0]
 548:	strb	w2, [x1, x0]
 54c:	add	x0, x0, #0x1
 550:	cmp	x26, x0
 554:	b.eq	2b0 <__asan_backtrace_qsort+0x2b0>  // b.none
 558:	ldrb	w3, [x1, x0]
 55c:	ldrb	w2, [x28, x0]
 560:	strb	w3, [x28, x0]
 564:	strb	w2, [x1, x0]
 568:	add	x0, x0, #0x1
 56c:	cmp	x26, x0
 570:	b.ne	53c <__asan_backtrace_qsort+0x53c>  // b.any
 574:	b	2b0 <__asan_backtrace_qsort+0x2b0>
 578:	ldrb	w4, [x22, x0]
 57c:	ldrb	w2, [x1, x0]
 580:	strb	w4, [x1, x0]
 584:	strb	w2, [x22, x0]
 588:	add	x0, x0, #0x1
 58c:	cmp	x26, x0
 590:	b.eq	4f8 <__asan_backtrace_qsort+0x4f8>  // b.none
 594:	ldrb	w4, [x22, x0]
 598:	ldrb	w2, [x1, x0]
 59c:	strb	w4, [x1, x0]
 5a0:	strb	w2, [x22, x0]
 5a4:	add	x0, x0, #0x1
 5a8:	cmp	x26, x0
 5ac:	b.ne	578 <__asan_backtrace_qsort+0x578>  // b.any
 5b0:	b	4f8 <__asan_backtrace_qsort+0x4f8>
 5b4:	mul	x0, x24, x26
 5b8:	add	x1, x28, x0
 5bc:	cbz	x26, 7a8 <__asan_backtrace_qsort+0x7a8>
 5c0:	add	x0, x0, #0x10
 5c4:	add	x3, x28, #0x10
 5c8:	cmp	x0, #0x0
 5cc:	ldr	x0, [sp, #104]
 5d0:	ccmp	x1, x3, #0x2, gt
 5d4:	ccmp	x0, #0xe, #0x0, cs  // cs = hs, nlast
 5d8:	mov	x0, #0x0                   	// #0
 5dc:	b.ls	7dc <__asan_backtrace_qsort+0x7dc>  // b.plast
 5e0:	ldr	q1, [x1, x0]
 5e4:	ldr	q0, [x28, x0]
 5e8:	str	q1, [x28, x0]
 5ec:	str	q0, [x1, x0]
 5f0:	add	x0, x0, #0x10
 5f4:	cmp	x0, x20
 5f8:	b.ne	5e0 <__asan_backtrace_qsort+0x5e0>  // b.any
 5fc:	cmp	x26, x27
 600:	add	x3, x28, x27
 604:	add	x0, x1, x27
 608:	b.eq	7a8 <__asan_backtrace_qsort+0x7a8>  // b.none
 60c:	ldrb	w8, [x1, x27]
 610:	ldrb	w6, [x28, x27]
 614:	strb	w8, [x28, x27]
 618:	ldr	x2, [sp, #112]
 61c:	strb	w6, [x1, x27]
 620:	cmp	x26, x2
 624:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 628:	ldr	x1, [sp, #120]
 62c:	ldrb	w6, [x0, #1]
 630:	cmp	x26, x1
 634:	ldrb	w1, [x3, #1]
 638:	strb	w6, [x3, #1]
 63c:	strb	w1, [x0, #1]
 640:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 644:	ldr	x1, [sp, #128]
 648:	ldrb	w6, [x0, #2]
 64c:	cmp	x26, x1
 650:	ldrb	w1, [x3, #2]
 654:	strb	w6, [x3, #2]
 658:	strb	w1, [x0, #2]
 65c:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 660:	ldr	x1, [sp, #136]
 664:	ldrb	w6, [x0, #3]
 668:	cmp	x26, x1
 66c:	ldrb	w1, [x3, #3]
 670:	strb	w6, [x3, #3]
 674:	strb	w1, [x0, #3]
 678:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 67c:	ldr	x1, [sp, #144]
 680:	ldrb	w6, [x0, #4]
 684:	cmp	x26, x1
 688:	ldrb	w1, [x3, #4]
 68c:	strb	w6, [x3, #4]
 690:	strb	w1, [x0, #4]
 694:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 698:	ldr	x1, [sp, #152]
 69c:	ldrb	w6, [x0, #5]
 6a0:	cmp	x26, x1
 6a4:	ldrb	w1, [x3, #5]
 6a8:	strb	w6, [x3, #5]
 6ac:	strb	w1, [x0, #5]
 6b0:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 6b4:	ldr	x1, [sp, #160]
 6b8:	ldrb	w6, [x0, #6]
 6bc:	cmp	x26, x1
 6c0:	ldrb	w1, [x3, #6]
 6c4:	strb	w6, [x3, #6]
 6c8:	strb	w1, [x0, #6]
 6cc:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 6d0:	ldr	x1, [sp, #168]
 6d4:	ldrb	w6, [x0, #7]
 6d8:	cmp	x26, x1
 6dc:	ldrb	w1, [x3, #7]
 6e0:	strb	w6, [x3, #7]
 6e4:	strb	w1, [x0, #7]
 6e8:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 6ec:	ldr	x1, [sp, #176]
 6f0:	ldrb	w6, [x0, #8]
 6f4:	cmp	x26, x1
 6f8:	ldrb	w1, [x3, #8]
 6fc:	strb	w6, [x3, #8]
 700:	strb	w1, [x0, #8]
 704:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 708:	ldr	x1, [sp, #184]
 70c:	ldrb	w6, [x0, #9]
 710:	cmp	x26, x1
 714:	ldrb	w1, [x3, #9]
 718:	strb	w6, [x3, #9]
 71c:	strb	w1, [x0, #9]
 720:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 724:	ldr	x1, [sp, #192]
 728:	ldrb	w6, [x0, #10]
 72c:	cmp	x26, x1
 730:	ldrb	w1, [x3, #10]
 734:	strb	w6, [x3, #10]
 738:	strb	w1, [x0, #10]
 73c:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 740:	ldr	x1, [sp, #200]
 744:	ldrb	w6, [x0, #11]
 748:	cmp	x26, x1
 74c:	ldrb	w1, [x3, #11]
 750:	strb	w6, [x3, #11]
 754:	strb	w1, [x0, #11]
 758:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 75c:	ldr	x1, [sp, #208]
 760:	ldrb	w6, [x0, #12]
 764:	cmp	x26, x1
 768:	ldrb	w1, [x3, #12]
 76c:	strb	w6, [x3, #12]
 770:	strb	w1, [x0, #12]
 774:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 778:	ldr	x1, [sp, #216]
 77c:	ldrb	w6, [x0, #13]
 780:	cmp	x26, x1
 784:	ldrb	w1, [x3, #13]
 788:	strb	w6, [x3, #13]
 78c:	strb	w1, [x0, #13]
 790:	b.ls	7a8 <__asan_backtrace_qsort+0x7a8>  // b.plast
 794:	ldrb	w6, [x0, #14]
 798:	ldrb	w1, [x3, #14]
 79c:	strb	w6, [x3, #14]
 7a0:	strb	w1, [x0, #14]
 7a4:	nop
 7a8:	sub	x1, x19, #0x1
 7ac:	madd	x25, x7, x26, x28
 7b0:	cmp	x19, x24, lsl #1
 7b4:	sub	x1, x1, x24
 7b8:	b.hi	838 <__asan_backtrace_qsort+0x838>  // b.pmore
 7bc:	mov	x0, x25
 7c0:	mov	x3, x21
 7c4:	mov	x2, x26
 7c8:	bl	0 <__asan_backtrace_qsort>
 7cc:	cmp	x24, #0x1
 7d0:	b.ls	818 <__asan_backtrace_qsort+0x818>  // b.plast
 7d4:	mov	x19, x24
 7d8:	b	b8 <__asan_backtrace_qsort+0xb8>
 7dc:	ldrb	w3, [x1, x0]
 7e0:	ldrb	w2, [x28, x0]
 7e4:	strb	w3, [x28, x0]
 7e8:	strb	w2, [x1, x0]
 7ec:	add	x0, x0, #0x1
 7f0:	cmp	x0, x26
 7f4:	b.eq	7a8 <__asan_backtrace_qsort+0x7a8>  // b.none
 7f8:	ldrb	w3, [x1, x0]
 7fc:	ldrb	w2, [x28, x0]
 800:	strb	w3, [x28, x0]
 804:	strb	w2, [x1, x0]
 808:	add	x0, x0, #0x1
 80c:	cmp	x0, x26
 810:	b.ne	7dc <__asan_backtrace_qsort+0x7dc>  // b.any
 814:	b	7a8 <__asan_backtrace_qsort+0x7a8>
 818:	ldp	x19, x20, [sp, #16]
 81c:	ldp	x21, x22, [sp, #32]
 820:	ldp	x23, x24, [sp, #48]
 824:	ldp	x25, x26, [sp, #64]
 828:	ldp	x27, x28, [sp, #80]
 82c:	ldp	x29, x30, [sp], #224
 830:	ret
 834:	ret
 838:	mov	x19, x1
 83c:	b	518 <__asan_backtrace_qsort+0x518>

state.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__asan_backtrace_create_state>:
   0:	stp	x29, x30, [sp, #-144]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	add	x19, sp, #0x48
  10:	mov	w20, w1
  14:	mov	w1, #0x0                   	// #0
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x2
  20:	mov	x22, x3
  24:	mov	x2, #0x48                  	// #72
  28:	str	x23, [sp, #48]
  2c:	mov	x23, x0
  30:	mov	x0, x19
  34:	bl	0 <__asan_internal_memset>
  38:	mov	x3, x22
  3c:	mov	x2, x21
  40:	mov	x0, x19
  44:	mov	x1, #0x48                  	// #72
  48:	str	x23, [sp, #72]
  4c:	str	w20, [sp, #80]
  50:	bl	0 <__asan_backtrace_alloc>
  54:	cbz	x0, 80 <__asan_backtrace_create_state+0x80>
  58:	ldp	x2, x3, [sp, #72]
  5c:	stp	x2, x3, [x0]
  60:	ldp	x2, x3, [sp, #88]
  64:	stp	x2, x3, [x0, #16]
  68:	ldp	x2, x3, [sp, #104]
  6c:	stp	x2, x3, [x0, #32]
  70:	ldp	x2, x3, [sp, #120]
  74:	stp	x2, x3, [x0, #48]
  78:	ldr	x1, [sp, #136]
  7c:	str	x1, [x0, #64]
  80:	ldp	x19, x20, [sp, #16]
  84:	ldp	x21, x22, [sp, #32]
  88:	ldr	x23, [sp, #48]
  8c:	ldp	x29, x30, [sp], #144
  90:	ret
