In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcheck.a_gcc_-O2:

check.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <suite_create>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x0, #0x10                  	// #16
  14:	bl	0 <emalloc>
  18:	mov	x20, x0
  1c:	cmp	x19, #0x0
  20:	adrp	x0, 0 <suite_create>
  24:	add	x0, x0, #0x0
  28:	csel	x19, x0, x19, eq  // eq = none
  2c:	str	x19, [x20]
  30:	bl	0 <check_list_create>
  34:	mov	x1, x0
  38:	str	x1, [x20, #8]
  3c:	mov	x0, x20
  40:	ldp	x19, x20, [sp, #16]
  44:	ldp	x29, x30, [sp], #32
  48:	ret
  4c:	nop

0000000000000050 <suite_tcase>:
  50:	cbz	x0, c8 <suite_tcase+0x78>
  54:	stp	x29, x30, [sp, #-32]!
  58:	mov	x29, sp
  5c:	stp	x19, x20, [sp, #16]
  60:	mov	x20, x1
  64:	ldr	x19, [x0, #8]
  68:	mov	x0, x19
  6c:	bl	0 <check_list_front>
  70:	b	94 <suite_tcase+0x44>
  74:	bl	0 <check_list_val>
  78:	mov	x2, x0
  7c:	mov	x0, x20
  80:	ldr	x1, [x2]
  84:	bl	0 <strcmp>
  88:	cbz	w0, b8 <suite_tcase+0x68>
  8c:	mov	x0, x19
  90:	bl	0 <check_list_advance>
  94:	mov	x0, x19
  98:	bl	0 <check_list_at_end>
  9c:	mov	w2, w0
  a0:	mov	x0, x19
  a4:	cbz	w2, 74 <suite_tcase+0x24>
  a8:	mov	w0, #0x0                   	// #0
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret
  b8:	mov	w0, #0x1                   	// #1
  bc:	ldp	x19, x20, [sp, #16]
  c0:	ldp	x29, x30, [sp], #32
  c4:	ret
  c8:	mov	w0, #0x0                   	// #0
  cc:	ret

00000000000000d0 <tcase_create>:
  d0:	stp	x29, x30, [sp, #-64]!
  d4:	mov	x29, sp
  d8:	stp	x19, x20, [sp, #16]
  dc:	mov	x20, x0
  e0:	mov	x0, #0x48                  	// #72
  e4:	str	d8, [sp, #32]
  e8:	bl	0 <emalloc>
  ec:	mov	x19, x0
  f0:	cmp	x20, #0x0
  f4:	adrp	x1, 0 <suite_create>
  f8:	add	x1, x1, #0x0
  fc:	csel	x20, x1, x20, eq  // eq = none
 100:	fmov	d8, #4.000000000000000000e+00
 104:	str	x20, [x19]
 108:	adrp	x0, 0 <suite_create>
 10c:	add	x0, x0, #0x0
 110:	bl	0 <getenv>
 114:	cbz	x0, 150 <tcase_create+0x80>
 118:	mov	x20, x0
 11c:	add	x1, sp, #0x38
 120:	str	xzr, [sp, #56]
 124:	bl	0 <strtod>
 128:	fcmpe	d0, #0.0
 12c:	fmov	d8, d0
 130:	b.lt	200 <tcase_create+0x130>  // b.tstop
 134:	ldr	x0, [sp, #56]
 138:	cmp	x0, x20
 13c:	b.eq	200 <tcase_create+0x130>  // b.none
 140:	ldrb	w0, [x0]
 144:	fmov	d0, #4.000000000000000000e+00
 148:	cmp	w0, #0x0
 14c:	fcsel	d8, d8, d0, eq  // eq = none
 150:	adrp	x0, 0 <suite_create>
 154:	add	x0, x0, #0x0
 158:	bl	0 <getenv>
 15c:	mov	x20, x0
 160:	cbz	x0, 190 <tcase_create+0xc0>
 164:	add	x1, sp, #0x38
 168:	str	xzr, [sp, #56]
 16c:	bl	0 <strtod>
 170:	fcmpe	d0, #0.0
 174:	b.lt	190 <tcase_create+0xc0>  // b.tstop
 178:	ldr	x0, [sp, #56]
 17c:	cmp	x0, x20
 180:	b.eq	190 <tcase_create+0xc0>  // b.none
 184:	ldrb	w0, [x0]
 188:	cbnz	w0, 190 <tcase_create+0xc0>
 18c:	fmul	d8, d8, d0
 190:	frintm	d1, d8
 194:	mov	x0, #0xcd6500000000        	// #225833675390976
 198:	movk	x0, #0x41cd, lsl #48
 19c:	fmov	d0, x0
 1a0:	fcvtms	x0, d8
 1a4:	fsub	d8, d8, d1
 1a8:	str	x0, [x19, #8]
 1ac:	fmul	d8, d8, d0
 1b0:	fcvtzs	d8, d8
 1b4:	str	d8, [x19, #16]
 1b8:	bl	0 <check_list_create>
 1bc:	str	x0, [x19, #24]
 1c0:	bl	0 <check_list_create>
 1c4:	str	x0, [x19, #32]
 1c8:	bl	0 <check_list_create>
 1cc:	str	x0, [x19, #48]
 1d0:	bl	0 <check_list_create>
 1d4:	str	x0, [x19, #40]
 1d8:	bl	0 <check_list_create>
 1dc:	str	x0, [x19, #56]
 1e0:	bl	0 <check_list_create>
 1e4:	mov	x1, x0
 1e8:	ldr	d8, [sp, #32]
 1ec:	mov	x0, x19
 1f0:	str	x1, [x19, #64]
 1f4:	ldp	x19, x20, [sp, #16]
 1f8:	ldp	x29, x30, [sp], #64
 1fc:	ret
 200:	fmov	d8, #4.000000000000000000e+00
 204:	b	150 <tcase_create+0x80>

0000000000000208 <tag_string_to_list>:
 208:	stp	x29, x30, [sp, #-48]!
 20c:	mov	x29, sp
 210:	stp	x19, x20, [sp, #16]
 214:	mov	x20, x0
 218:	bl	0 <check_list_create>
 21c:	mov	x19, x0
 220:	cbz	x20, 274 <tag_string_to_list+0x6c>
 224:	mov	x0, x20
 228:	adrp	x20, 0 <suite_create>
 22c:	add	x20, x20, #0x0
 230:	str	x21, [sp, #32]
 234:	bl	0 <strdup>
 238:	mov	x21, x0
 23c:	mov	x1, x20
 240:	bl	0 <strtok>
 244:	cbz	x0, 268 <tag_string_to_list+0x60>
 248:	bl	0 <strdup>
 24c:	mov	x1, x0
 250:	mov	x0, x19
 254:	bl	0 <check_list_add_end>
 258:	mov	x1, x20
 25c:	mov	x0, #0x0                   	// #0
 260:	bl	0 <strtok>
 264:	cbnz	x0, 248 <tag_string_to_list+0x40>
 268:	mov	x0, x21
 26c:	bl	0 <free>
 270:	ldr	x21, [sp, #32]
 274:	mov	x0, x19
 278:	ldp	x19, x20, [sp, #16]
 27c:	ldp	x29, x30, [sp], #48
 280:	ret
 284:	nop

0000000000000288 <tcase_set_tags>:
 288:	stp	x29, x30, [sp, #-32]!
 28c:	mov	x29, sp
 290:	stp	x19, x20, [sp, #16]
 294:	mov	x19, x0
 298:	mov	x20, x1
 29c:	ldr	x0, [x0, #64]
 2a0:	cbz	x0, 2b8 <tcase_set_tags+0x30>
 2a4:	adrp	x1, 0 <free>
 2a8:	add	x1, x1, #0x0
 2ac:	bl	0 <check_list_apply>
 2b0:	ldr	x0, [x19, #64]
 2b4:	bl	0 <check_list_free>
 2b8:	mov	x0, x20
 2bc:	bl	208 <tag_string_to_list>
 2c0:	str	x0, [x19, #64]
 2c4:	ldp	x19, x20, [sp, #16]
 2c8:	ldp	x29, x30, [sp], #32
 2cc:	ret

00000000000002d0 <tcase_matching_tag>:
 2d0:	cbz	x1, 378 <tcase_matching_tag+0xa8>
 2d4:	stp	x29, x30, [sp, #-48]!
 2d8:	mov	x29, sp
 2dc:	stp	x19, x20, [sp, #16]
 2e0:	mov	x20, x0
 2e4:	mov	x0, x1
 2e8:	str	x21, [sp, #32]
 2ec:	mov	x21, x1
 2f0:	bl	0 <check_list_front>
 2f4:	mov	x0, x21
 2f8:	bl	0 <check_list_at_end>
 2fc:	cbnz	w0, 364 <tcase_matching_tag+0x94>
 300:	ldr	x0, [x20, #64]
 304:	bl	0 <check_list_front>
 308:	b	338 <tcase_matching_tag+0x68>
 30c:	ldr	x0, [x20, #64]
 310:	bl	0 <check_list_val>
 314:	mov	x19, x0
 318:	mov	x0, x21
 31c:	bl	0 <check_list_val>
 320:	mov	x1, x0
 324:	mov	x0, x19
 328:	bl	0 <strcmp>
 32c:	cbz	w0, 350 <tcase_matching_tag+0x80>
 330:	ldr	x0, [x20, #64]
 334:	bl	0 <check_list_advance>
 338:	ldr	x0, [x20, #64]
 33c:	bl	0 <check_list_at_end>
 340:	cbz	w0, 30c <tcase_matching_tag+0x3c>
 344:	mov	x0, x21
 348:	bl	0 <check_list_advance>
 34c:	b	2f4 <tcase_matching_tag+0x24>
 350:	mov	w0, #0x1                   	// #1
 354:	ldp	x19, x20, [sp, #16]
 358:	ldr	x21, [sp, #32]
 35c:	ldp	x29, x30, [sp], #48
 360:	ret
 364:	mov	w0, #0x0                   	// #0
 368:	ldp	x19, x20, [sp, #16]
 36c:	ldr	x21, [sp, #32]
 370:	ldp	x29, x30, [sp], #48
 374:	ret
 378:	mov	w0, #0x0                   	// #0
 37c:	ret

0000000000000380 <suite_add_tcase>:
 380:	cmp	x0, #0x0
 384:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 388:	b.ne	390 <suite_add_tcase+0x10>  // b.any
 38c:	ret
 390:	stp	x29, x30, [sp, #-32]!
 394:	mov	x29, sp
 398:	stp	x19, x20, [sp, #16]
 39c:	mov	x19, x0
 3a0:	mov	x20, x1
 3a4:	ldr	x0, [x0, #8]
 3a8:	bl	0 <check_list_contains>
 3ac:	cbnz	w0, 3c4 <suite_add_tcase+0x44>
 3b0:	mov	x1, x20
 3b4:	ldr	x0, [x19, #8]
 3b8:	ldp	x19, x20, [sp, #16]
 3bc:	ldp	x29, x30, [sp], #32
 3c0:	b	0 <check_list_add_end>
 3c4:	ldp	x19, x20, [sp, #16]
 3c8:	ldp	x29, x30, [sp], #32
 3cc:	ret

00000000000003d0 <_tcase_add_test>:
 3d0:	cmp	x0, #0x0
 3d4:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 3d8:	b.ne	3e0 <_tcase_add_test+0x10>  // b.any
 3dc:	ret
 3e0:	stp	x29, x30, [sp, #-64]!
 3e4:	mov	x29, sp
 3e8:	stp	x19, x20, [sp, #16]
 3ec:	mov	x20, x1
 3f0:	mov	x19, x0
 3f4:	mov	x0, #0x18                  	// #24
 3f8:	stp	x21, x22, [sp, #32]
 3fc:	mov	w21, w2
 400:	mov	w22, w5
 404:	stp	x23, x24, [sp, #48]
 408:	mov	w24, w3
 40c:	mov	w23, w4
 410:	bl	0 <emalloc>
 414:	mov	x1, x0
 418:	strb	w24, [x0, #20]
 41c:	ldr	x0, [x19, #24]
 420:	str	x20, [x1]
 424:	stp	w23, w22, [x1, #8]
 428:	str	w21, [x1, #16]
 42c:	ldp	x19, x20, [sp, #16]
 430:	ldp	x21, x22, [sp, #32]
 434:	ldp	x23, x24, [sp, #48]
 438:	ldp	x29, x30, [sp], #64
 43c:	b	0 <check_list_add_end>

0000000000000440 <tcase_add_unchecked_fixture>:
 440:	stp	x29, x30, [sp, #-48]!
 444:	mov	x29, sp
 448:	stp	x19, x20, [sp, #16]
 44c:	mov	x19, x2
 450:	stp	x21, x22, [sp, #32]
 454:	mov	x21, x0
 458:	cbz	x1, 480 <tcase_add_unchecked_fixture+0x40>
 45c:	mov	x20, x1
 460:	mov	x0, #0x10                  	// #16
 464:	ldr	x22, [x21, #32]
 468:	bl	0 <emalloc>
 46c:	mov	x1, x0
 470:	mov	x0, x22
 474:	str	wzr, [x1]
 478:	str	x20, [x1, #8]
 47c:	bl	0 <check_list_add_end>
 480:	cbz	x19, 4b0 <tcase_add_unchecked_fixture+0x70>
 484:	mov	x0, #0x10                  	// #16
 488:	ldr	x20, [x21, #40]
 48c:	bl	0 <emalloc>
 490:	mov	x1, x0
 494:	ldp	x21, x22, [sp, #32]
 498:	mov	x0, x20
 49c:	str	wzr, [x1]
 4a0:	str	x19, [x1, #8]
 4a4:	ldp	x19, x20, [sp, #16]
 4a8:	ldp	x29, x30, [sp], #48
 4ac:	b	0 <check_list_add_front>
 4b0:	ldp	x19, x20, [sp, #16]
 4b4:	ldp	x21, x22, [sp, #32]
 4b8:	ldp	x29, x30, [sp], #48
 4bc:	ret

00000000000004c0 <tcase_add_checked_fixture>:
 4c0:	stp	x29, x30, [sp, #-48]!
 4c4:	mov	x29, sp
 4c8:	stp	x19, x20, [sp, #16]
 4cc:	mov	x19, x2
 4d0:	stp	x21, x22, [sp, #32]
 4d4:	mov	x21, x0
 4d8:	cbz	x1, 504 <tcase_add_checked_fixture+0x44>
 4dc:	mov	x20, x1
 4e0:	mov	x0, #0x10                  	// #16
 4e4:	ldr	x22, [x21, #48]
 4e8:	bl	0 <emalloc>
 4ec:	mov	x1, x0
 4f0:	mov	w2, #0x1                   	// #1
 4f4:	mov	x0, x22
 4f8:	str	w2, [x1]
 4fc:	str	x20, [x1, #8]
 500:	bl	0 <check_list_add_end>
 504:	cbz	x19, 538 <tcase_add_checked_fixture+0x78>
 508:	mov	x0, #0x10                  	// #16
 50c:	ldr	x20, [x21, #56]
 510:	bl	0 <emalloc>
 514:	mov	x1, x0
 518:	mov	w2, #0x1                   	// #1
 51c:	ldp	x21, x22, [sp, #32]
 520:	mov	x0, x20
 524:	str	w2, [x1]
 528:	str	x19, [x1, #8]
 52c:	ldp	x19, x20, [sp, #16]
 530:	ldp	x29, x30, [sp], #48
 534:	b	0 <check_list_add_front>
 538:	ldp	x19, x20, [sp, #16]
 53c:	ldp	x21, x22, [sp, #32]
 540:	ldp	x29, x30, [sp], #48
 544:	ret

0000000000000548 <tcase_set_timeout>:
 548:	fcmpe	d0, #0.0
 54c:	b.ge	554 <tcase_set_timeout+0xc>  // b.tcont
 550:	ret
 554:	stp	x29, x30, [sp, #-64]!
 558:	mov	x29, sp
 55c:	str	d8, [sp, #32]
 560:	fmov	d8, d0
 564:	stp	x19, x20, [sp, #16]
 568:	mov	x19, x0
 56c:	adrp	x0, 0 <suite_create>
 570:	add	x0, x0, #0x0
 574:	bl	0 <getenv>
 578:	mov	x20, x0
 57c:	cbz	x0, 5ac <tcase_set_timeout+0x64>
 580:	add	x1, sp, #0x38
 584:	str	xzr, [sp, #56]
 588:	bl	0 <strtod>
 58c:	fcmpe	d0, #0.0
 590:	b.lt	5ac <tcase_set_timeout+0x64>  // b.tstop
 594:	ldr	x0, [sp, #56]
 598:	cmp	x0, x20
 59c:	b.eq	5ac <tcase_set_timeout+0x64>  // b.none
 5a0:	ldrb	w0, [x0]
 5a4:	cbnz	w0, 5ac <tcase_set_timeout+0x64>
 5a8:	fmul	d8, d8, d0
 5ac:	frintm	d1, d8
 5b0:	mov	x0, #0xcd6500000000        	// #225833675390976
 5b4:	movk	x0, #0x41cd, lsl #48
 5b8:	fmov	d0, x0
 5bc:	fcvtms	x0, d8
 5c0:	fsub	d8, d8, d1
 5c4:	str	x0, [x19, #8]
 5c8:	fmul	d8, d8, d0
 5cc:	fcvtzs	d8, d8
 5d0:	str	d8, [x19, #16]
 5d4:	ldp	x19, x20, [sp, #16]
 5d8:	ldr	d8, [sp, #32]
 5dc:	ldp	x29, x30, [sp], #64
 5e0:	ret
 5e4:	nop

00000000000005e8 <tcase_fn_start>:
 5e8:	stp	x29, x30, [sp, #-48]!
 5ec:	mov	x29, sp
 5f0:	stp	x19, x20, [sp, #16]
 5f4:	mov	x20, x1
 5f8:	mov	x19, x0
 5fc:	mov	w0, #0x2                   	// #2
 600:	str	x21, [sp, #32]
 604:	mov	w21, w2
 608:	bl	0 <send_ctx_info>
 60c:	mov	w1, w21
 610:	mov	x0, x20
 614:	bl	0 <send_loc_info>
 618:	adrp	x0, 0 <suite_create>
 61c:	ldr	x21, [sp, #32]
 620:	str	x19, [x0]
 624:	ldp	x19, x20, [sp, #16]
 628:	ldp	x29, x30, [sp], #48
 62c:	ret

0000000000000630 <tcase_name>:
 630:	adrp	x0, 0 <suite_create>
 634:	ldr	x0, [x0]
 638:	ret
 63c:	nop

0000000000000640 <_mark_point>:
 640:	b	0 <send_loc_info>
 644:	nop

0000000000000648 <_ck_assert_failed>:
 648:	mov	x12, #0x2110                	// #8464
 64c:	sub	sp, sp, x12
 650:	add	x8, sp, #0x2, lsl #12
 654:	stp	x29, x30, [sp]
 658:	mov	x29, sp
 65c:	str	x19, [sp, #16]
 660:	mov	x19, x2
 664:	str	q0, [x8, #96]
 668:	str	q1, [x8, #112]
 66c:	str	q2, [x8, #128]
 670:	str	q3, [x8, #144]
 674:	str	q4, [x8, #160]
 678:	str	q5, [x8, #176]
 67c:	str	q6, [x8, #192]
 680:	str	q7, [x8, #208]
 684:	str	x3, [sp, #8424]
 688:	str	x4, [sp, #8432]
 68c:	str	x5, [sp, #8440]
 690:	str	x6, [sp, #8448]
 694:	str	x7, [sp, #8456]
 698:	bl	0 <send_loc_info>
 69c:	ldr	x2, [sp, #8424]
 6a0:	mov	x4, #0x20e0                	// #8416
 6a4:	mov	w0, #0xffffff80            	// #-128
 6a8:	add	x3, sp, x4
 6ac:	mov	w1, #0xffffffe0            	// #-32
 6b0:	mov	x5, #0x2110                	// #8464
 6b4:	add	x4, sp, x5
 6b8:	stp	x4, x4, [sp, #64]
 6bc:	str	x3, [sp, #80]
 6c0:	stp	w1, w0, [sp, #88]
 6c4:	cbz	x2, 6ec <_ck_assert_failed+0xa4>
 6c8:	ldp	x6, x7, [sp, #64]
 6cc:	add	x19, sp, #0x60
 6d0:	ldp	x4, x5, [sp, #80]
 6d4:	mov	x0, x19
 6d8:	add	x3, sp, #0x20
 6dc:	mov	x1, #0x2000                	// #8192
 6e0:	stp	x6, x7, [sp, #32]
 6e4:	stp	x4, x5, [sp, #48]
 6e8:	bl	0 <vsnprintf>
 6ec:	mov	x0, x19
 6f0:	bl	0 <send_failure_info>
 6f4:	adrp	x0, 0 <suite_create>
 6f8:	ldr	w0, [x0]
 6fc:	cmp	w0, #0x1
 700:	b.eq	714 <_ck_assert_failed+0xcc>  // b.none
 704:	adrp	x0, 0 <error_jmp_buffer>
 708:	mov	w1, #0x1                   	// #1
 70c:	add	x0, x0, #0x0
 710:	bl	0 <longjmp>
 714:	bl	0 <_exit>

0000000000000718 <srunner_create>:
 718:	stp	x29, x30, [sp, #-32]!
 71c:	mov	x29, sp
 720:	stp	x19, x20, [sp, #16]
 724:	mov	x20, x0
 728:	mov	x0, #0x40                  	// #64
 72c:	bl	0 <emalloc>
 730:	mov	x19, x0
 734:	bl	0 <check_list_create>
 738:	str	x0, [x19]
 73c:	cbz	x20, 748 <srunner_create+0x30>
 740:	mov	x1, x20
 744:	bl	0 <check_list_add_end>
 748:	mov	x0, #0xc                   	// #12
 74c:	bl	0 <emalloc>
 750:	str	x0, [x19, #8]
 754:	str	xzr, [x0]
 758:	str	wzr, [x0, #8]
 75c:	bl	0 <check_list_create>
 760:	mov	x1, x0
 764:	stp	x1, xzr, [x19, #16]
 768:	mov	x0, x19
 76c:	stp	xzr, xzr, [x19, #32]
 770:	str	xzr, [x19, #48]
 774:	str	wzr, [x19, #56]
 778:	ldp	x19, x20, [sp, #16]
 77c:	ldp	x29, x30, [sp], #32
 780:	ret
 784:	nop

0000000000000788 <srunner_add_suite>:
 788:	cbz	x1, 794 <srunner_add_suite+0xc>
 78c:	ldr	x0, [x0]
 790:	b	0 <check_list_add_end>
 794:	ret

0000000000000798 <srunner_ntests_failed>:
 798:	ldr	x1, [x0, #8]
 79c:	ldp	w2, w0, [x1, #4]
 7a0:	add	w0, w2, w0
 7a4:	ret

00000000000007a8 <srunner_ntests_run>:
 7a8:	ldr	x0, [x0, #8]
 7ac:	ldr	w0, [x0]
 7b0:	ret
 7b4:	nop

00000000000007b8 <srunner_failures>:
 7b8:	stp	x29, x30, [sp, #-48]!
 7bc:	mov	x29, sp
 7c0:	ldr	x1, [x0, #8]
 7c4:	stp	x19, x20, [sp, #16]
 7c8:	mov	x19, x0
 7cc:	mov	w20, #0x0                   	// #0
 7d0:	ldp	w0, w1, [x1, #4]
 7d4:	str	x21, [sp, #32]
 7d8:	add	w0, w0, w1
 7dc:	sbfiz	x0, x0, #3, #32
 7e0:	bl	0 <emalloc>
 7e4:	ldr	x19, [x19, #16]
 7e8:	mov	x21, x0
 7ec:	mov	x0, x19
 7f0:	bl	0 <check_list_front>
 7f4:	mov	x0, x19
 7f8:	bl	0 <check_list_at_end>
 7fc:	mov	w1, w0
 800:	mov	x0, x19
 804:	cbnz	w1, 840 <srunner_failures+0x88>
 808:	bl	0 <check_list_val>
 80c:	mov	x1, x0
 810:	mov	x0, x19
 814:	ldr	w2, [x1]
 818:	cmp	w2, #0x1
 81c:	b.eq	828 <srunner_failures+0x70>  // b.none
 820:	str	x1, [x21, w20, sxtw #3]
 824:	add	w20, w20, #0x1
 828:	bl	0 <check_list_advance>
 82c:	mov	x0, x19
 830:	bl	0 <check_list_at_end>
 834:	mov	w1, w0
 838:	mov	x0, x19
 83c:	cbz	w1, 808 <srunner_failures+0x50>
 840:	mov	x0, x21
 844:	ldp	x19, x20, [sp, #16]
 848:	ldr	x21, [sp, #32]
 84c:	ldp	x29, x30, [sp], #48
 850:	ret
 854:	nop

0000000000000858 <srunner_results>:
 858:	stp	x29, x30, [sp, #-48]!
 85c:	mov	x29, sp
 860:	stp	x19, x20, [sp, #16]
 864:	mov	x19, x0
 868:	ldr	x0, [x0, #8]
 86c:	ldrsw	x0, [x0]
 870:	str	x21, [sp, #32]
 874:	lsl	x0, x0, #3
 878:	bl	0 <emalloc>
 87c:	ldr	x19, [x19, #16]
 880:	mov	x21, x0
 884:	mov	x20, x0
 888:	mov	x0, x19
 88c:	bl	0 <check_list_front>
 890:	b	8a4 <srunner_results+0x4c>
 894:	bl	0 <check_list_val>
 898:	str	x0, [x20], #8
 89c:	mov	x0, x19
 8a0:	bl	0 <check_list_advance>
 8a4:	mov	x0, x19
 8a8:	bl	0 <check_list_at_end>
 8ac:	mov	w1, w0
 8b0:	mov	x0, x19
 8b4:	cbz	w1, 894 <srunner_results+0x3c>
 8b8:	mov	x0, x21
 8bc:	ldp	x19, x20, [sp, #16]
 8c0:	ldr	x21, [sp, #32]
 8c4:	ldp	x29, x30, [sp], #48
 8c8:	ret
 8cc:	nop

00000000000008d0 <tr_create>:
 8d0:	stp	x29, x30, [sp, #-16]!
 8d4:	mov	x0, #0x38                  	// #56
 8d8:	mov	x29, sp
 8dc:	bl	0 <emalloc>
 8e0:	stp	xzr, xzr, [x0]
 8e4:	mov	w2, #0xffffffff            	// #-1
 8e8:	str	w2, [x0, #16]
 8ec:	str	w2, [x0, #24]
 8f0:	stp	xzr, xzr, [x0, #32]
 8f4:	str	xzr, [x0, #48]
 8f8:	ldp	x29, x30, [sp], #16
 8fc:	ret

0000000000000900 <tr_free>:
 900:	stp	x29, x30, [sp, #-32]!
 904:	mov	x29, sp
 908:	str	x19, [sp, #16]
 90c:	mov	x19, x0
 910:	ldr	x0, [x0, #8]
 914:	bl	0 <free>
 918:	ldr	x0, [x19, #48]
 91c:	bl	0 <free>
 920:	mov	x0, x19
 924:	ldr	x19, [sp, #16]
 928:	ldp	x29, x30, [sp], #32
 92c:	b	0 <free>

0000000000000930 <srunner_free>:
 930:	cbz	x0, ab8 <srunner_free+0x188>
 934:	stp	x29, x30, [sp, #-64]!
 938:	mov	x29, sp
 93c:	stp	x23, x24, [sp, #48]
 940:	mov	x24, x0
 944:	ldr	x0, [x0, #8]
 948:	stp	x19, x20, [sp, #16]
 94c:	adrp	x20, 0 <free>
 950:	stp	x21, x22, [sp, #32]
 954:	add	x20, x20, #0x0
 958:	bl	0 <free>
 95c:	ldr	x23, [x24]
 960:	mov	x0, x23
 964:	bl	0 <check_list_front>
 968:	mov	x0, x23
 96c:	bl	0 <check_list_at_end>
 970:	cbnz	w0, a60 <srunner_free+0x130>
 974:	nop
 978:	mov	x0, x23
 97c:	bl	0 <check_list_val>
 980:	mov	x21, x0
 984:	cbz	x0, a4c <srunner_free+0x11c>
 988:	ldr	x22, [x0, #8]
 98c:	mov	x0, x22
 990:	bl	0 <check_list_front>
 994:	b	a28 <srunner_free+0xf8>
 998:	bl	0 <check_list_val>
 99c:	mov	x19, x0
 9a0:	ldr	x0, [x0, #24]
 9a4:	mov	x1, x20
 9a8:	bl	0 <check_list_apply>
 9ac:	ldr	x0, [x19, #32]
 9b0:	mov	x1, x20
 9b4:	bl	0 <check_list_apply>
 9b8:	ldr	x0, [x19, #48]
 9bc:	mov	x1, x20
 9c0:	bl	0 <check_list_apply>
 9c4:	ldr	x0, [x19, #40]
 9c8:	mov	x1, x20
 9cc:	bl	0 <check_list_apply>
 9d0:	ldr	x0, [x19, #56]
 9d4:	mov	x1, x20
 9d8:	bl	0 <check_list_apply>
 9dc:	ldr	x0, [x19, #64]
 9e0:	mov	x1, x20
 9e4:	bl	0 <check_list_apply>
 9e8:	ldr	x0, [x19, #24]
 9ec:	bl	0 <check_list_free>
 9f0:	ldr	x0, [x19, #32]
 9f4:	bl	0 <check_list_free>
 9f8:	ldr	x0, [x19, #48]
 9fc:	bl	0 <check_list_free>
 a00:	ldr	x0, [x19, #40]
 a04:	bl	0 <check_list_free>
 a08:	ldr	x0, [x19, #56]
 a0c:	bl	0 <check_list_free>
 a10:	ldr	x0, [x19, #64]
 a14:	bl	0 <check_list_free>
 a18:	mov	x0, x19
 a1c:	bl	0 <free>
 a20:	mov	x0, x22
 a24:	bl	0 <check_list_advance>
 a28:	mov	x0, x22
 a2c:	bl	0 <check_list_at_end>
 a30:	mov	w1, w0
 a34:	mov	x0, x22
 a38:	cbz	w1, 998 <srunner_free+0x68>
 a3c:	ldr	x0, [x21, #8]
 a40:	bl	0 <check_list_free>
 a44:	mov	x0, x21
 a48:	bl	0 <free>
 a4c:	mov	x0, x23
 a50:	bl	0 <check_list_advance>
 a54:	mov	x0, x23
 a58:	bl	0 <check_list_at_end>
 a5c:	cbz	w0, 978 <srunner_free+0x48>
 a60:	ldr	x0, [x24]
 a64:	bl	0 <check_list_free>
 a68:	ldr	x19, [x24, #16]
 a6c:	mov	x0, x19
 a70:	bl	0 <check_list_front>
 a74:	b	a8c <srunner_free+0x15c>
 a78:	mov	x0, x19
 a7c:	bl	0 <check_list_val>
 a80:	bl	900 <tr_free>
 a84:	mov	x0, x19
 a88:	bl	0 <check_list_advance>
 a8c:	mov	x0, x19
 a90:	bl	0 <check_list_at_end>
 a94:	cbz	w0, a78 <srunner_free+0x148>
 a98:	ldr	x0, [x24, #16]
 a9c:	bl	0 <check_list_free>
 aa0:	mov	x0, x24
 aa4:	ldp	x19, x20, [sp, #16]
 aa8:	ldp	x21, x22, [sp, #32]
 aac:	ldp	x23, x24, [sp, #48]
 ab0:	ldp	x29, x30, [sp], #64
 ab4:	b	0 <free>
 ab8:	ret
 abc:	nop

0000000000000ac0 <tr_msg>:
 ac0:	ldr	x0, [x0, #48]
 ac4:	ret

0000000000000ac8 <tr_lno>:
 ac8:	ldr	w0, [x0, #16]
 acc:	ret

0000000000000ad0 <tr_lfile>:
 ad0:	ldr	x0, [x0, #8]
 ad4:	ret

0000000000000ad8 <tr_rtype>:
 ad8:	ldr	w0, [x0]
 adc:	ret

0000000000000ae0 <tr_ctx>:
 ae0:	ldr	w0, [x0, #4]
 ae4:	ret

0000000000000ae8 <tr_tcname>:
 ae8:	ldr	x0, [x0, #32]
 aec:	ret

0000000000000af0 <set_fork_status>:
 af0:	cmp	w0, #0x2
 af4:	b.hi	b04 <set_fork_status+0x14>  // b.pmore
 af8:	adrp	x1, 0 <suite_create>
 afc:	str	w0, [x1]
 b00:	ret
 b04:	stp	x29, x30, [sp, #-16]!
 b08:	adrp	x1, 0 <suite_create>
 b0c:	adrp	x0, 0 <suite_create>
 b10:	mov	x29, sp
 b14:	add	x1, x1, #0x0
 b18:	add	x0, x0, #0x0
 b1c:	mov	w2, #0x24a                 	// #586
 b20:	bl	0 <eprintf>
 b24:	nop

0000000000000b28 <cur_fork_status>:
 b28:	adrp	x0, 0 <suite_create>
 b2c:	ldr	w0, [x0]
 b30:	ret
 b34:	nop

0000000000000b38 <check_get_clockid>:
 b38:	stp	x29, x30, [sp, #-32]!
 b3c:	mov	x1, #0x0                   	// #0
 b40:	mov	w0, #0x1                   	// #1
 b44:	mov	x29, sp
 b48:	add	x2, sp, #0x18
 b4c:	bl	0 <timer_create>
 b50:	cbz	w0, b68 <check_get_clockid+0x30>
 b54:	adrp	x1, 0 <suite_create>
 b58:	mov	w0, #0x0                   	// #0
 b5c:	str	wzr, [x1]
 b60:	ldp	x29, x30, [sp], #32
 b64:	ret
 b68:	ldr	x0, [sp, #24]
 b6c:	bl	0 <timer_delete>
 b70:	adrp	x1, 0 <suite_create>
 b74:	mov	w2, #0x1                   	// #1
 b78:	mov	w0, w2
 b7c:	str	w2, [x1]
 b80:	ldp	x29, x30, [sp], #32
 b84:	ret

check_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <eprintf>:
   0:	stp	x29, x30, [sp, #-288]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x20, 0 <stderr>
  10:	mov	x19, x0
  14:	ldr	x0, [x20]
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x1
  20:	mov	w22, w2
  24:	str	q0, [sp, #112]
  28:	str	q1, [sp, #128]
  2c:	str	q2, [sp, #144]
  30:	str	q3, [sp, #160]
  34:	str	q4, [sp, #176]
  38:	str	q5, [sp, #192]
  3c:	str	q6, [sp, #208]
  40:	str	q7, [sp, #224]
  44:	stp	x3, x4, [sp, #248]
  48:	stp	x5, x6, [sp, #264]
  4c:	str	x7, [sp, #280]
  50:	bl	0 <fflush>
  54:	ldr	x0, [x20]
  58:	mov	w3, w22
  5c:	mov	x2, x21
  60:	adrp	x1, 0 <eprintf>
  64:	add	x1, x1, #0x0
  68:	bl	0 <fprintf>
  6c:	add	x1, sp, #0x120
  70:	stp	x1, x1, [sp, #80]
  74:	add	x2, sp, #0xf0
  78:	mov	w4, #0xffffffd8            	// #-40
  7c:	mov	w3, #0xffffff80            	// #-128
  80:	str	x2, [sp, #96]
  84:	mov	x1, x19
  88:	stp	w4, w3, [sp, #104]
  8c:	add	x2, sp, #0x30
  90:	ldp	x4, x5, [sp, #80]
  94:	stp	x4, x5, [sp, #48]
  98:	ldp	x4, x5, [sp, #96]
  9c:	stp	x4, x5, [sp, #64]
  a0:	ldr	x0, [x20]
  a4:	bl	0 <vfprintf>
  a8:	ldrb	w0, [x19]
  ac:	cbz	w0, c8 <eprintf+0xc8>
  b0:	mov	x0, x19
  b4:	bl	0 <strlen>
  b8:	add	x19, x19, x0
  bc:	ldurb	w0, [x19, #-1]
  c0:	cmp	w0, #0x3a
  c4:	b.eq	dc <eprintf+0xdc>  // b.none
  c8:	ldr	x1, [x20]
  cc:	mov	w0, #0xa                   	// #10
  d0:	bl	0 <fputc>
  d4:	mov	w0, #0x2                   	// #2
  d8:	bl	0 <exit>
  dc:	bl	0 <__errno_location>
  e0:	ldr	w0, [x0]
  e4:	ldr	x19, [x20]
  e8:	bl	0 <strerror>
  ec:	mov	x2, x0
  f0:	adrp	x1, 0 <eprintf>
  f4:	mov	x0, x19
  f8:	add	x1, x1, #0x0
  fc:	bl	0 <fprintf>
 100:	b	c8 <eprintf+0xc8>
 104:	nop

0000000000000108 <emalloc>:
 108:	stp	x29, x30, [sp, #-32]!
 10c:	mov	x29, sp
 110:	str	x19, [sp, #16]
 114:	mov	x19, x0
 118:	bl	0 <malloc>
 11c:	cbz	x0, 12c <emalloc+0x24>
 120:	ldr	x19, [sp, #16]
 124:	ldp	x29, x30, [sp], #32
 128:	ret
 12c:	adrp	x1, 0 <eprintf>
 130:	adrp	x0, 0 <eprintf>
 134:	mov	x3, x19
 138:	add	x1, x1, #0x0
 13c:	add	x0, x0, #0x0
 140:	mov	w2, #0x3e                  	// #62
 144:	bl	0 <eprintf>

0000000000000148 <erealloc>:
 148:	stp	x29, x30, [sp, #-32]!
 14c:	mov	x29, sp
 150:	str	x19, [sp, #16]
 154:	mov	x19, x1
 158:	bl	0 <realloc>
 15c:	cbz	x0, 16c <erealloc+0x24>
 160:	ldr	x19, [sp, #16]
 164:	ldp	x29, x30, [sp], #32
 168:	ret
 16c:	adrp	x1, 0 <eprintf>
 170:	adrp	x0, 0 <eprintf>
 174:	mov	x3, x19
 178:	add	x1, x1, #0x0
 17c:	add	x0, x0, #0x0
 180:	mov	w2, #0x48                  	// #72
 184:	bl	0 <eprintf>

check_list.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <maybe_grow>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	w0, [x0]
  14:	ldr	w1, [x19, #4]
  18:	cmp	w0, w1
  1c:	b.cs	2c <maybe_grow+0x2c>  // b.hs, b.nlast
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret
  2c:	ldr	x0, [x19, #16]
  30:	lsl	w2, w1, #1
  34:	str	w2, [x19, #4]
  38:	lsl	x1, x2, #3
  3c:	bl	0 <erealloc>
  40:	str	x0, [x19, #16]
  44:	ldr	x19, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	ret

0000000000000050 <check_list_create>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	x0, #0x18                  	// #24
  58:	mov	x29, sp
  5c:	str	x19, [sp, #16]
  60:	bl	0 <emalloc>
  64:	mov	x19, x0
  68:	mov	x1, #0x100000000           	// #4294967296
  6c:	mov	x0, #0x8                   	// #8
  70:	str	x1, [x19]
  74:	bl	0 <emalloc>
  78:	mov	x1, x0
  7c:	mov	x2, #0xffffffffffffffff    	// #-1
  80:	stp	x2, x1, [x19, #8]
  84:	mov	x0, x19
  88:	ldr	x19, [sp, #16]
  8c:	ldp	x29, x30, [sp], #32
  90:	ret
  94:	nop

0000000000000098 <check_list_add_front>:
  98:	cbz	x0, f4 <check_list_add_front+0x5c>
  9c:	stp	x29, x30, [sp, #-32]!
  a0:	mov	x29, sp
  a4:	stp	x19, x20, [sp, #16]
  a8:	mov	x19, x0
  ac:	mov	x20, x1
  b0:	bl	0 <maybe_grow>
  b4:	ldr	x1, [x19, #16]
  b8:	ldr	w2, [x19]
  bc:	add	x0, x1, #0x8
  c0:	lsl	x2, x2, #3
  c4:	bl	0 <memmove>
  c8:	ldr	x2, [x19, #16]
  cc:	ldr	w1, [x19]
  d0:	ldr	w0, [x19, #12]
  d4:	add	w1, w1, #0x1
  d8:	str	w1, [x19]
  dc:	add	w0, w0, #0x1
  e0:	stp	wzr, w0, [x19, #8]
  e4:	str	x20, [x2]
  e8:	ldp	x19, x20, [sp, #16]
  ec:	ldp	x29, x30, [sp], #32
  f0:	ret
  f4:	ret

00000000000000f8 <check_list_add_end>:
  f8:	cbz	x0, 140 <check_list_add_end+0x48>
  fc:	stp	x29, x30, [sp, #-32]!
 100:	mov	x29, sp
 104:	stp	x19, x20, [sp, #16]
 108:	mov	x19, x0
 10c:	mov	x20, x1
 110:	bl	0 <maybe_grow>
 114:	ldr	w0, [x19, #12]
 118:	ldr	x2, [x19, #16]
 11c:	add	w0, w0, #0x1
 120:	ldr	w1, [x19]
 124:	stp	w0, w0, [x19, #8]
 128:	add	w1, w1, #0x1
 12c:	str	w1, [x19]
 130:	str	x20, [x2, w0, sxtw #3]
 134:	ldp	x19, x20, [sp, #16]
 138:	ldp	x29, x30, [sp], #32
 13c:	ret
 140:	ret
 144:	nop

0000000000000148 <check_list_at_end>:
 148:	ldr	w1, [x0, #8]
 14c:	cmn	w1, #0x1
 150:	b.eq	164 <check_list_at_end+0x1c>  // b.none
 154:	ldr	w0, [x0, #12]
 158:	cmp	w1, w0
 15c:	cset	w0, gt
 160:	ret
 164:	mov	w0, #0x1                   	// #1
 168:	ret
 16c:	nop

0000000000000170 <check_list_front>:
 170:	ldr	w1, [x0, #8]
 174:	cmn	w1, #0x1
 178:	b.eq	180 <check_list_front+0x10>  // b.none
 17c:	str	wzr, [x0, #8]
 180:	ret
 184:	nop

0000000000000188 <check_list_free>:
 188:	cbz	x0, 1b4 <check_list_free+0x2c>
 18c:	stp	x29, x30, [sp, #-32]!
 190:	mov	x29, sp
 194:	str	x19, [sp, #16]
 198:	mov	x19, x0
 19c:	ldr	x0, [x0, #16]
 1a0:	bl	0 <free>
 1a4:	mov	x0, x19
 1a8:	ldr	x19, [sp, #16]
 1ac:	ldp	x29, x30, [sp], #32
 1b0:	b	0 <free>
 1b4:	ret

00000000000001b8 <check_list_val>:
 1b8:	cbz	x0, 1e0 <check_list_val+0x28>
 1bc:	ldr	w1, [x0, #8]
 1c0:	cmn	w1, #0x1
 1c4:	b.eq	1e0 <check_list_val+0x28>  // b.none
 1c8:	ldr	w2, [x0, #12]
 1cc:	cmp	w1, w2
 1d0:	b.gt	1e0 <check_list_val+0x28>
 1d4:	ldr	x0, [x0, #16]
 1d8:	ldr	x0, [x0, w1, sxtw #3]
 1dc:	ret
 1e0:	mov	x0, #0x0                   	// #0
 1e4:	ret

00000000000001e8 <check_list_advance>:
 1e8:	cbz	x0, 20c <check_list_advance+0x24>
 1ec:	ldr	w1, [x0, #8]
 1f0:	cmn	w1, #0x1
 1f4:	b.eq	20c <check_list_advance+0x24>  // b.none
 1f8:	ldr	w2, [x0, #12]
 1fc:	cmp	w1, w2
 200:	b.gt	20c <check_list_advance+0x24>
 204:	add	w1, w1, #0x1
 208:	str	w1, [x0, #8]
 20c:	ret

0000000000000210 <check_list_apply>:
 210:	cmp	x0, #0x0
 214:	ccmp	x1, #0x0, #0x4, ne  // ne = any
 218:	b.eq	290 <check_list_apply+0x80>  // b.none
 21c:	stp	x29, x30, [sp, #-32]!
 220:	mov	x29, sp
 224:	stp	x19, x20, [sp, #16]
 228:	mov	x19, x0
 22c:	ldr	w0, [x0, #8]
 230:	cmn	w0, #0x1
 234:	b.eq	284 <check_list_apply+0x74>  // b.none
 238:	ldr	w0, [x19, #12]
 23c:	mov	x20, x1
 240:	mov	w2, #0x0                   	// #0
 244:	str	wzr, [x19, #8]
 248:	cmp	w2, w0
 24c:	b.gt	284 <check_list_apply+0x74>
 250:	ldr	x0, [x19, #16]
 254:	ldr	x0, [x0, w2, sxtw #3]
 258:	blr	x20
 25c:	ldr	w2, [x19, #8]
 260:	cmn	w2, #0x1
 264:	b.eq	284 <check_list_apply+0x74>  // b.none
 268:	ldr	w0, [x19, #12]
 26c:	cmp	w2, w0
 270:	b.gt	284 <check_list_apply+0x74>
 274:	add	w2, w2, #0x1
 278:	str	w2, [x19, #8]
 27c:	cmn	w2, #0x1
 280:	b.ne	248 <check_list_apply+0x38>  // b.any
 284:	ldp	x19, x20, [sp, #16]
 288:	ldp	x29, x30, [sp], #32
 28c:	ret
 290:	ret
 294:	nop

0000000000000298 <check_list_contains>:
 298:	ldr	w2, [x0, #8]
 29c:	cmn	w2, #0x1
 2a0:	b.eq	2d8 <check_list_contains+0x40>  // b.none
 2a4:	ldr	w4, [x0, #12]
 2a8:	mov	x2, #0x0                   	// #0
 2ac:	str	wzr, [x0, #8]
 2b0:	cmp	w4, w2
 2b4:	b.lt	2d8 <check_list_contains+0x40>  // b.tstop
 2b8:	ldr	x3, [x0, #16]
 2bc:	ldr	x3, [x3, x2, lsl #3]
 2c0:	add	x2, x2, #0x1
 2c4:	cmp	x1, x3
 2c8:	b.eq	2e0 <check_list_contains+0x48>  // b.none
 2cc:	str	w2, [x0, #8]
 2d0:	cmp	w4, w2
 2d4:	b.ge	2b8 <check_list_contains+0x20>  // b.tcont
 2d8:	mov	w0, #0x0                   	// #0
 2dc:	ret
 2e0:	mov	w0, #0x1                   	// #1
 2e4:	ret

check_log.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_send_evt>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	ldr	x20, [x0, #48]
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x21, x0
  18:	mov	w22, w2
  1c:	mov	x0, x20
  20:	str	x23, [sp, #48]
  24:	mov	x23, x1
  28:	bl	0 <check_list_front>
  2c:	b	68 <srunner_send_evt+0x68>
  30:	bl	0 <check_list_val>
  34:	mov	x19, x0
  38:	ldr	x0, [x0]
  3c:	bl	0 <fflush>
  40:	ldp	x1, x5, [x19]
  44:	mov	w4, w22
  48:	ldr	w2, [x19, #20]
  4c:	mov	x3, x23
  50:	mov	x0, x21
  54:	blr	x5
  58:	ldr	x0, [x19]
  5c:	bl	0 <fflush>
  60:	mov	x0, x20
  64:	bl	0 <check_list_advance>
  68:	mov	x0, x20
  6c:	bl	0 <check_list_at_end>
  70:	mov	w3, w0
  74:	mov	x0, x20
  78:	cbz	w3, 30 <srunner_send_evt+0x30>
  7c:	ldp	x19, x20, [sp, #16]
  80:	ldp	x21, x22, [sp, #32]
  84:	ldr	x23, [sp, #48]
  88:	ldp	x29, x30, [sp], #64
  8c:	ret

0000000000000090 <xml_lfun>:
  90:	stp	x29, x30, [sp, #-128]!
  94:	adrp	x2, 0 <srunner_send_evt>
  98:	mov	x29, sp
  9c:	ldrb	w0, [x2]
  a0:	stp	x19, x20, [sp, #16]
  a4:	mov	w19, w4
  a8:	add	x20, x2, #0x0
  ac:	stp	x21, x22, [sp, #32]
  b0:	mov	x21, x1
  b4:	mov	x22, x3
  b8:	cbz	w0, 16c <xml_lfun+0xdc>
  bc:	cmp	w19, #0x3
  c0:	b.eq	1b4 <xml_lfun+0x124>  // b.none
  c4:	b.ls	fc <xml_lfun+0x6c>  // b.plast
  c8:	cmp	w19, #0x6
  cc:	b.eq	ec <xml_lfun+0x5c>  // b.none
  d0:	b.ls	134 <xml_lfun+0xa4>  // b.plast
  d4:	cmp	w19, #0x7
  d8:	b.ne	290 <xml_lfun+0x200>  // b.any
  dc:	mov	x1, x22
  e0:	mov	x0, x21
  e4:	mov	w2, #0x3                   	// #3
  e8:	bl	0 <tr_xmlprint>
  ec:	ldp	x19, x20, [sp, #16]
  f0:	ldp	x21, x22, [sp, #32]
  f4:	ldp	x29, x30, [sp], #128
  f8:	ret
  fc:	cmp	w19, #0x1
 100:	b.eq	200 <xml_lfun+0x170>  // b.none
 104:	cmp	w19, #0x2
 108:	b.eq	ec <xml_lfun+0x5c>  // b.none
 10c:	cbnz	w19, 290 <xml_lfun+0x200>
 110:	mov	x2, x20
 114:	mov	x0, x21
 118:	adrp	x1, 0 <srunner_send_evt>
 11c:	add	x1, x1, #0x0
 120:	bl	0 <fprintf>
 124:	ldp	x19, x20, [sp, #16]
 128:	ldp	x21, x22, [sp, #32]
 12c:	ldp	x29, x30, [sp], #128
 130:	ret
 134:	cmp	w19, #0x4
 138:	b.eq	ec <xml_lfun+0x5c>  // b.none
 13c:	cmp	w19, #0x5
 140:	b.ne	290 <xml_lfun+0x200>  // b.any
 144:	mov	x3, x21
 148:	mov	x2, #0xb                   	// #11
 14c:	mov	x1, #0x1                   	// #1
 150:	adrp	x0, 0 <srunner_send_evt>
 154:	add	x0, x0, #0x0
 158:	bl	0 <fwrite>
 15c:	ldp	x19, x20, [sp, #16]
 160:	ldp	x21, x22, [sp, #32]
 164:	ldp	x29, x30, [sp], #128
 168:	ret
 16c:	mov	x1, #0x0                   	// #0
 170:	add	x0, sp, #0x38
 174:	bl	0 <gettimeofday>
 178:	bl	0 <check_get_clockid>
 17c:	add	x1, x20, #0x18
 180:	bl	0 <clock_gettime>
 184:	add	x0, sp, #0x38
 188:	add	x1, sp, #0x48
 18c:	bl	0 <localtime_r>
 190:	cbz	x0, bc <xml_lfun+0x2c>
 194:	add	x3, sp, #0x48
 198:	mov	x0, x20
 19c:	adrp	x2, 0 <srunner_send_evt>
 1a0:	mov	x1, #0x14                  	// #20
 1a4:	add	x2, x2, #0x0
 1a8:	bl	0 <strftime>
 1ac:	cmp	w19, #0x3
 1b0:	b.ne	c4 <xml_lfun+0x34>  // b.any
 1b4:	mov	x3, x21
 1b8:	mov	x2, #0x15                  	// #21
 1bc:	mov	x1, #0x1                   	// #1
 1c0:	adrp	x0, 0 <srunner_send_evt>
 1c4:	add	x0, x0, #0x0
 1c8:	bl	0 <fwrite>
 1cc:	ldr	x1, [x22]
 1d0:	mov	x0, x21
 1d4:	bl	0 <fprint_xml_esc>
 1d8:	mov	x3, x21
 1dc:	mov	x2, #0x9                   	// #9
 1e0:	mov	x1, #0x1                   	// #1
 1e4:	adrp	x0, 0 <srunner_send_evt>
 1e8:	add	x0, x0, #0x0
 1ec:	bl	0 <fwrite>
 1f0:	ldp	x19, x20, [sp, #16]
 1f4:	ldp	x21, x22, [sp, #32]
 1f8:	ldp	x29, x30, [sp], #128
 1fc:	ret
 200:	stp	xzr, xzr, [sp, #72]
 204:	bl	0 <check_get_clockid>
 208:	add	x1, sp, #0x48
 20c:	bl	0 <clock_gettime>
 210:	ldp	x1, x2, [sp, #72]
 214:	mov	x6, #0xf7cf                	// #63439
 218:	movk	x6, #0xe353, lsl #16
 21c:	mov	x3, #0x4240                	// #16960
 220:	movk	x6, #0x9ba5, lsl #32
 224:	movk	x3, #0xf, lsl #16
 228:	movk	x6, #0x20c4, lsl #48
 22c:	mov	x5, #0x34db                	// #13531
 230:	ldp	x4, x7, [x20, #24]
 234:	smulh	x8, x2, x6
 238:	movk	x5, #0xd7b6, lsl #16
 23c:	mov	x0, x21
 240:	movk	x5, #0xde82, lsl #32
 244:	asr	x8, x8, #7
 248:	movk	x5, #0x431b, lsl #48
 24c:	sub	x8, x8, x2, asr #63
 250:	sub	x2, x1, x4
 254:	smulh	x4, x7, x6
 258:	asr	x7, x7, #63
 25c:	adrp	x1, 0 <srunner_send_evt>
 260:	add	x1, x1, #0x0
 264:	madd	x2, x2, x3, x8
 268:	sub	x4, x7, x4, asr #7
 26c:	add	x4, x2, x4
 270:	umulh	x2, x4, x5
 274:	lsr	x2, x2, #18
 278:	msub	x3, x2, x3, x4
 27c:	bl	0 <fprintf>
 280:	ldp	x19, x20, [sp, #16]
 284:	ldp	x21, x22, [sp, #32]
 288:	ldp	x29, x30, [sp], #128
 28c:	ret
 290:	adrp	x1, 0 <srunner_send_evt>
 294:	adrp	x0, 0 <srunner_send_evt>
 298:	add	x1, x1, #0x0
 29c:	add	x0, x0, #0x0
 2a0:	mov	w2, #0x14f                 	// #335
 2a4:	bl	0 <eprintf>

00000000000002a8 <stdout_lfun>:
 2a8:	mov	x6, x0
 2ac:	cmp	w4, #0x3
 2b0:	mov	x0, x1
 2b4:	b.eq	314 <stdout_lfun+0x6c>  // b.none
 2b8:	b.hi	2cc <stdout_lfun+0x24>  // b.pmore
 2bc:	cmp	w4, #0x2
 2c0:	b.ne	310 <stdout_lfun+0x68>  // b.any
 2c4:	cbnz	w2, 328 <stdout_lfun+0x80>
 2c8:	ret
 2cc:	cmp	w4, #0x4
 2d0:	b.ne	2e0 <stdout_lfun+0x38>  // b.any
 2d4:	cbz	w2, 2c8 <stdout_lfun+0x20>
 2d8:	mov	x1, x6
 2dc:	b	0 <srunner_fprint>
 2e0:	sub	w4, w4, #0x5
 2e4:	cmp	w4, #0x2
 2e8:	b.ls	30c <stdout_lfun+0x64>  // b.plast
 2ec:	stp	x29, x30, [sp, #-16]!
 2f0:	adrp	x1, 0 <srunner_send_evt>
 2f4:	adrp	x0, 0 <srunner_send_evt>
 2f8:	mov	x29, sp
 2fc:	add	x1, x1, #0x0
 300:	add	x0, x0, #0x0
 304:	mov	w2, #0xdc                  	// #220
 308:	bl	0 <eprintf>
 30c:	ret
 310:	ret
 314:	cbz	w2, 2c8 <stdout_lfun+0x20>
 318:	ldr	x2, [x3]
 31c:	adrp	x1, 0 <srunner_send_evt>
 320:	add	x1, x1, #0x0
 324:	b	0 <fprintf>
 328:	mov	x3, x1
 32c:	adrp	x0, 0 <srunner_send_evt>
 330:	mov	x2, #0x11                  	// #17
 334:	add	x0, x0, #0x0
 338:	mov	x1, #0x1                   	// #1
 33c:	b	0 <fwrite>

0000000000000340 <tap_lfun>:
 340:	stp	x29, x30, [sp, #-32]!
 344:	cmp	w4, #0x6
 348:	mov	x29, sp
 34c:	str	x19, [sp, #16]
 350:	mov	x19, x1
 354:	b.hi	38c <tap_lfun+0x4c>  // b.pmore
 358:	cmp	w4, #0x1
 35c:	b.hi	3fc <tap_lfun+0xbc>  // b.pmore
 360:	cbz	w4, 3f4 <tap_lfun+0xb4>
 364:	adrp	x2, 0 <srunner_send_evt>
 368:	mov	x0, x19
 36c:	adrp	x1, 0 <srunner_send_evt>
 370:	add	x1, x1, #0x0
 374:	ldr	w2, [x2]
 378:	bl	0 <fprintf>
 37c:	mov	x0, x19
 380:	ldr	x19, [sp, #16]
 384:	ldp	x29, x30, [sp], #32
 388:	b	0 <fflush>
 38c:	cmp	w4, #0x7
 390:	b.ne	408 <tap_lfun+0xc8>  // b.any
 394:	adrp	x8, 0 <srunner_send_evt>
 398:	add	x8, x8, #0x0
 39c:	ldp	x5, x6, [x3, #32]
 3a0:	adrp	x0, 0 <srunner_send_evt>
 3a4:	ldr	w1, [x3]
 3a8:	add	x0, x0, #0x0
 3ac:	ldr	w9, [x8, #40]
 3b0:	adrp	x2, 0 <srunner_send_evt>
 3b4:	ldr	x4, [x3, #8]
 3b8:	cmp	w1, #0x1
 3bc:	ldr	x7, [x3, #48]
 3c0:	add	w9, w9, #0x1
 3c4:	add	x2, x2, #0x0
 3c8:	mov	w3, w9
 3cc:	csel	x2, x2, x0, eq  // eq = none
 3d0:	adrp	x1, 0 <srunner_send_evt>
 3d4:	mov	x0, x19
 3d8:	add	x1, x1, #0x0
 3dc:	str	w9, [x8, #40]
 3e0:	bl	0 <fprintf>
 3e4:	mov	x0, x19
 3e8:	ldr	x19, [sp, #16]
 3ec:	ldp	x29, x30, [sp], #32
 3f0:	b	0 <fflush>
 3f4:	adrp	x0, 0 <srunner_send_evt>
 3f8:	str	wzr, [x0]
 3fc:	ldr	x19, [sp, #16]
 400:	ldp	x29, x30, [sp], #32
 404:	ret
 408:	adrp	x1, 0 <srunner_send_evt>
 40c:	adrp	x0, 0 <srunner_send_evt>
 410:	add	x1, x1, #0x0
 414:	add	x0, x0, #0x0
 418:	mov	w2, #0x17c                 	// #380
 41c:	bl	0 <eprintf>

0000000000000420 <lfile_lfun>:
 420:	stp	x29, x30, [sp, #-32]!
 424:	cmp	w4, #0x4
 428:	mov	x29, sp
 42c:	stp	x19, x20, [sp, #16]
 430:	mov	x19, x1
 434:	b.eq	488 <lfile_lfun+0x68>  // b.none
 438:	b.hi	460 <lfile_lfun+0x40>  // b.pmore
 43c:	cmp	w4, #0x3
 440:	b.ne	4bc <lfile_lfun+0x9c>  // b.any
 444:	ldp	x19, x20, [sp, #16]
 448:	mov	x0, x1
 44c:	ldp	x29, x30, [sp], #32
 450:	adrp	x1, 0 <srunner_send_evt>
 454:	ldr	x2, [x3]
 458:	add	x1, x1, #0x0
 45c:	b	0 <fprintf>
 460:	cmp	w4, #0x6
 464:	b.ls	4bc <lfile_lfun+0x9c>  // b.plast
 468:	cmp	w4, #0x7
 46c:	b.ne	4c8 <lfile_lfun+0xa8>  // b.any
 470:	mov	x0, x19
 474:	mov	x1, x3
 478:	ldp	x19, x20, [sp, #16]
 47c:	mov	w2, #0x3                   	// #3
 480:	ldp	x29, x30, [sp], #32
 484:	b	0 <tr_fprint>
 488:	mov	x20, x0
 48c:	mov	x3, x1
 490:	mov	x2, #0x1c                  	// #28
 494:	mov	x1, #0x1                   	// #1
 498:	adrp	x0, 0 <srunner_send_evt>
 49c:	add	x0, x0, #0x0
 4a0:	bl	0 <fwrite>
 4a4:	mov	x1, x20
 4a8:	mov	x0, x19
 4ac:	ldp	x19, x20, [sp, #16]
 4b0:	mov	w2, #0x1                   	// #1
 4b4:	ldp	x29, x30, [sp], #32
 4b8:	b	0 <srunner_fprint>
 4bc:	ldp	x19, x20, [sp, #16]
 4c0:	ldp	x29, x30, [sp], #32
 4c4:	ret
 4c8:	adrp	x1, 0 <srunner_send_evt>
 4cc:	adrp	x0, 0 <srunner_send_evt>
 4d0:	add	x1, x1, #0x0
 4d4:	add	x0, x0, #0x0
 4d8:	mov	w2, #0x103                 	// #259
 4dc:	bl	0 <eprintf>

00000000000004e0 <srunner_open_file>:
 4e0:	stp	x29, x30, [sp, #-32]!
 4e4:	mov	x29, sp
 4e8:	str	x19, [sp, #16]
 4ec:	mov	x19, x0
 4f0:	ldrb	w0, [x0]
 4f4:	cmp	w0, #0x2d
 4f8:	b.eq	51c <srunner_open_file+0x3c>  // b.none
 4fc:	adrp	x1, 0 <srunner_send_evt>
 500:	mov	x0, x19
 504:	add	x1, x1, #0x0
 508:	bl	0 <fopen>
 50c:	cbz	x0, 538 <srunner_open_file+0x58>
 510:	ldr	x19, [sp, #16]
 514:	ldp	x29, x30, [sp], #32
 518:	ret
 51c:	ldrb	w0, [x19, #1]
 520:	cbnz	w0, 4fc <srunner_open_file+0x1c>
 524:	adrp	x0, 0 <stdout>
 528:	ldr	x19, [sp, #16]
 52c:	ldr	x0, [x0]
 530:	ldp	x29, x30, [sp], #32
 534:	ret
 538:	adrp	x1, 0 <srunner_send_evt>
 53c:	adrp	x0, 0 <srunner_send_evt>
 540:	mov	x3, x19
 544:	add	x1, x1, #0x0
 548:	add	x0, x0, #0x0
 54c:	mov	w2, #0x1cd                 	// #461
 550:	bl	0 <eprintf>
 554:	nop

0000000000000558 <srunner_set_log>:
 558:	ldr	x2, [x0, #24]
 55c:	cbz	x2, 564 <srunner_set_log+0xc>
 560:	ret
 564:	str	x1, [x0, #24]
 568:	ret
 56c:	nop

0000000000000570 <srunner_has_log>:
 570:	ldr	x0, [x0, #24]
 574:	cbz	x0, 584 <srunner_has_log+0x14>
 578:	cmp	x0, #0x0
 57c:	cset	w0, ne  // ne = any
 580:	ret
 584:	stp	x29, x30, [sp, #-16]!
 588:	adrp	x0, 0 <srunner_send_evt>
 58c:	add	x0, x0, #0x0
 590:	mov	x29, sp
 594:	bl	0 <getenv>
 598:	cmp	x0, #0x0
 59c:	cset	w0, ne  // ne = any
 5a0:	ldp	x29, x30, [sp], #16
 5a4:	ret

00000000000005a8 <srunner_log_fname>:
 5a8:	ldr	x0, [x0, #24]
 5ac:	cbz	x0, 5b4 <srunner_log_fname+0xc>
 5b0:	ret
 5b4:	adrp	x0, 0 <srunner_send_evt>
 5b8:	add	x0, x0, #0x0
 5bc:	b	0 <getenv>

00000000000005c0 <srunner_set_xml>:
 5c0:	ldr	x2, [x0, #32]
 5c4:	cbz	x2, 5cc <srunner_set_xml+0xc>
 5c8:	ret
 5cc:	str	x1, [x0, #32]
 5d0:	ret
 5d4:	nop

00000000000005d8 <srunner_has_xml>:
 5d8:	ldr	x0, [x0, #32]
 5dc:	cbz	x0, 5ec <srunner_has_xml+0x14>
 5e0:	cmp	x0, #0x0
 5e4:	cset	w0, ne  // ne = any
 5e8:	ret
 5ec:	stp	x29, x30, [sp, #-16]!
 5f0:	adrp	x0, 0 <srunner_send_evt>
 5f4:	add	x0, x0, #0x0
 5f8:	mov	x29, sp
 5fc:	bl	0 <getenv>
 600:	cmp	x0, #0x0
 604:	cset	w0, ne  // ne = any
 608:	ldp	x29, x30, [sp], #16
 60c:	ret

0000000000000610 <srunner_xml_fname>:
 610:	ldr	x0, [x0, #32]
 614:	cbz	x0, 61c <srunner_xml_fname+0xc>
 618:	ret
 61c:	adrp	x0, 0 <srunner_send_evt>
 620:	add	x0, x0, #0x0
 624:	b	0 <getenv>

0000000000000628 <srunner_set_tap>:
 628:	ldr	x2, [x0, #40]
 62c:	cbz	x2, 634 <srunner_set_tap+0xc>
 630:	ret
 634:	str	x1, [x0, #40]
 638:	ret
 63c:	nop

0000000000000640 <srunner_has_tap>:
 640:	ldr	x0, [x0, #40]
 644:	cbz	x0, 654 <srunner_has_tap+0x14>
 648:	cmp	x0, #0x0
 64c:	cset	w0, ne  // ne = any
 650:	ret
 654:	stp	x29, x30, [sp, #-16]!
 658:	adrp	x0, 0 <srunner_send_evt>
 65c:	add	x0, x0, #0x0
 660:	mov	x29, sp
 664:	bl	0 <getenv>
 668:	cmp	x0, #0x0
 66c:	cset	w0, ne  // ne = any
 670:	ldp	x29, x30, [sp], #16
 674:	ret

0000000000000678 <srunner_tap_fname>:
 678:	ldr	x0, [x0, #40]
 67c:	cbz	x0, 684 <srunner_tap_fname+0xc>
 680:	ret
 684:	adrp	x0, 0 <srunner_send_evt>
 688:	add	x0, x0, #0x0
 68c:	b	0 <getenv>

0000000000000690 <srunner_register_lfun>:
 690:	stp	x29, x30, [sp, #-64]!
 694:	mov	x29, sp
 698:	stp	x19, x20, [sp, #16]
 69c:	mov	w20, w4
 6a0:	stp	x21, x22, [sp, #32]
 6a4:	mov	w21, w2
 6a8:	mov	x22, x3
 6ac:	stp	x23, x24, [sp, #48]
 6b0:	mov	x24, x0
 6b4:	mov	x23, x1
 6b8:	mov	x0, #0x18                  	// #24
 6bc:	bl	0 <emalloc>
 6c0:	cmp	w20, #0x4
 6c4:	mov	x19, x0
 6c8:	b.eq	6f0 <srunner_register_lfun+0x60>  // b.none
 6cc:	ldr	x0, [x24, #48]
 6d0:	stp	x23, x22, [x19]
 6d4:	mov	x1, x19
 6d8:	stp	w21, w20, [x19, #16]
 6dc:	ldp	x19, x20, [sp, #16]
 6e0:	ldp	x21, x22, [sp, #32]
 6e4:	ldp	x23, x24, [sp, #48]
 6e8:	ldp	x29, x30, [sp], #64
 6ec:	b	0 <check_list_add_end>
 6f0:	bl	0 <get_env_printmode>
 6f4:	mov	w20, w0
 6f8:	b	6cc <srunner_register_lfun+0x3c>
 6fc:	nop

0000000000000700 <log_srunner_start>:
 700:	mov	w2, #0x2                   	// #2
 704:	mov	x1, #0x0                   	// #0
 708:	b	0 <srunner_send_evt>
 70c:	nop

0000000000000710 <log_srunner_end>:
 710:	mov	w2, #0x4                   	// #4
 714:	mov	x1, #0x0                   	// #0
 718:	b	0 <srunner_send_evt>
 71c:	nop

0000000000000720 <log_suite_start>:
 720:	mov	w2, #0x3                   	// #3
 724:	b	0 <srunner_send_evt>

0000000000000728 <log_suite_end>:
 728:	mov	w2, #0x5                   	// #5
 72c:	b	0 <srunner_send_evt>

0000000000000730 <log_test_start>:
 730:	stp	x29, x30, [sp, #-144]!
 734:	mov	x29, sp
 738:	ldr	x4, [x2]
 73c:	adrp	x2, 0 <srunner_send_evt>
 740:	ldr	x3, [x1]
 744:	add	x2, x2, #0x0
 748:	ldr	x4, [x4]
 74c:	mov	x1, #0x63                  	// #99
 750:	str	x19, [sp, #16]
 754:	mov	x19, x0
 758:	add	x0, sp, #0x28
 75c:	bl	0 <snprintf>
 760:	mov	x0, x19
 764:	add	x1, sp, #0x28
 768:	mov	w2, #0x6                   	// #6
 76c:	bl	0 <srunner_send_evt>
 770:	ldr	x19, [sp, #16]
 774:	ldp	x29, x30, [sp], #144
 778:	ret
 77c:	nop

0000000000000780 <log_test_end>:
 780:	mov	w2, #0x7                   	// #7
 784:	b	0 <srunner_send_evt>

0000000000000788 <srunner_open_lfile>:
 788:	stp	x29, x30, [sp, #-32]!
 78c:	mov	x29, sp
 790:	stp	x19, x20, [sp, #16]
 794:	mov	x19, x0
 798:	ldr	x0, [x0, #24]
 79c:	cbz	x0, 7ac <srunner_open_lfile+0x24>
 7a0:	ldp	x19, x20, [sp, #16]
 7a4:	ldp	x29, x30, [sp], #32
 7a8:	b	4e0 <srunner_open_file>
 7ac:	adrp	x20, 0 <srunner_send_evt>
 7b0:	add	x20, x20, #0x0
 7b4:	mov	x0, x20
 7b8:	bl	0 <getenv>
 7bc:	cbnz	x0, 7cc <srunner_open_lfile+0x44>
 7c0:	ldp	x19, x20, [sp, #16]
 7c4:	ldp	x29, x30, [sp], #32
 7c8:	ret
 7cc:	ldr	x0, [x19, #24]
 7d0:	cbnz	x0, 7a0 <srunner_open_lfile+0x18>
 7d4:	mov	x0, x20
 7d8:	bl	0 <getenv>
 7dc:	ldp	x19, x20, [sp, #16]
 7e0:	ldp	x29, x30, [sp], #32
 7e4:	b	4e0 <srunner_open_file>

00000000000007e8 <srunner_open_xmlfile>:
 7e8:	stp	x29, x30, [sp, #-32]!
 7ec:	mov	x29, sp
 7f0:	stp	x19, x20, [sp, #16]
 7f4:	mov	x19, x0
 7f8:	ldr	x0, [x0, #32]
 7fc:	cbz	x0, 80c <srunner_open_xmlfile+0x24>
 800:	ldp	x19, x20, [sp, #16]
 804:	ldp	x29, x30, [sp], #32
 808:	b	4e0 <srunner_open_file>
 80c:	adrp	x20, 0 <srunner_send_evt>
 810:	add	x20, x20, #0x0
 814:	mov	x0, x20
 818:	bl	0 <getenv>
 81c:	cbnz	x0, 82c <srunner_open_xmlfile+0x44>
 820:	ldp	x19, x20, [sp, #16]
 824:	ldp	x29, x30, [sp], #32
 828:	ret
 82c:	ldr	x0, [x19, #32]
 830:	cbnz	x0, 800 <srunner_open_xmlfile+0x18>
 834:	mov	x0, x20
 838:	bl	0 <getenv>
 83c:	ldp	x19, x20, [sp, #16]
 840:	ldp	x29, x30, [sp], #32
 844:	b	4e0 <srunner_open_file>

0000000000000848 <srunner_open_tapfile>:
 848:	stp	x29, x30, [sp, #-32]!
 84c:	mov	x29, sp
 850:	stp	x19, x20, [sp, #16]
 854:	mov	x19, x0
 858:	ldr	x0, [x0, #40]
 85c:	cbz	x0, 86c <srunner_open_tapfile+0x24>
 860:	ldp	x19, x20, [sp, #16]
 864:	ldp	x29, x30, [sp], #32
 868:	b	4e0 <srunner_open_file>
 86c:	adrp	x20, 0 <srunner_send_evt>
 870:	add	x20, x20, #0x0
 874:	mov	x0, x20
 878:	bl	0 <getenv>
 87c:	cbnz	x0, 88c <srunner_open_tapfile+0x44>
 880:	ldp	x19, x20, [sp, #16]
 884:	ldp	x29, x30, [sp], #32
 888:	ret
 88c:	ldr	x0, [x19, #40]
 890:	cbnz	x0, 860 <srunner_open_tapfile+0x18>
 894:	mov	x0, x20
 898:	bl	0 <getenv>
 89c:	ldp	x19, x20, [sp, #16]
 8a0:	ldp	x29, x30, [sp], #32
 8a4:	b	4e0 <srunner_open_file>

00000000000008a8 <srunner_init_logging>:
 8a8:	stp	x29, x30, [sp, #-48]!
 8ac:	mov	x29, sp
 8b0:	str	x21, [sp, #32]
 8b4:	adrp	x21, 0 <stdout>
 8b8:	stp	x19, x20, [sp, #16]
 8bc:	mov	x19, x0
 8c0:	mov	w20, w1
 8c4:	bl	0 <check_list_create>
 8c8:	ldr	x1, [x21]
 8cc:	mov	w4, w20
 8d0:	adrp	x3, 2a8 <stdout_lfun>
 8d4:	add	x3, x3, #0x0
 8d8:	str	x0, [x19, #48]
 8dc:	mov	w2, #0x0                   	// #0
 8e0:	mov	x0, x19
 8e4:	bl	690 <srunner_register_lfun>
 8e8:	mov	x0, x19
 8ec:	bl	788 <srunner_open_lfile>
 8f0:	cbz	x0, 918 <srunner_init_logging+0x70>
 8f4:	ldr	x2, [x21]
 8f8:	mov	x1, x0
 8fc:	adrp	x3, 420 <lfile_lfun>
 900:	mov	w4, w20
 904:	cmp	x2, x0
 908:	add	x3, x3, #0x0
 90c:	cset	w2, ne  // ne = any
 910:	mov	x0, x19
 914:	bl	690 <srunner_register_lfun>
 918:	mov	x0, x19
 91c:	bl	7e8 <srunner_open_xmlfile>
 920:	cbz	x0, 948 <srunner_init_logging+0xa0>
 924:	ldr	x2, [x21]
 928:	mov	x1, x0
 92c:	adrp	x3, 90 <xml_lfun>
 930:	mov	w4, w20
 934:	cmp	x2, x0
 938:	add	x3, x3, #0x0
 93c:	cset	w2, ne  // ne = any
 940:	mov	x0, x19
 944:	bl	690 <srunner_register_lfun>
 948:	mov	x0, x19
 94c:	bl	848 <srunner_open_tapfile>
 950:	mov	x1, x0
 954:	cbz	x0, 978 <srunner_init_logging+0xd0>
 958:	ldr	x0, [x21]
 95c:	adrp	x3, 340 <tap_lfun>
 960:	mov	w4, w20
 964:	add	x3, x3, #0x0
 968:	cmp	x0, x1
 96c:	mov	x0, x19
 970:	cset	w2, ne  // ne = any
 974:	bl	690 <srunner_register_lfun>
 978:	mov	x0, x19
 97c:	mov	w2, #0x0                   	// #0
 980:	ldp	x19, x20, [sp, #16]
 984:	mov	x1, #0x0                   	// #0
 988:	ldr	x21, [sp, #32]
 98c:	ldp	x29, x30, [sp], #48
 990:	b	0 <srunner_send_evt>
 994:	nop

0000000000000998 <srunner_end_logging>:
 998:	stp	x29, x30, [sp, #-48]!
 99c:	mov	w2, #0x1                   	// #1
 9a0:	mov	x1, #0x0                   	// #0
 9a4:	mov	x29, sp
 9a8:	str	x21, [sp, #32]
 9ac:	mov	x21, x0
 9b0:	stp	x19, x20, [sp, #16]
 9b4:	bl	0 <srunner_send_evt>
 9b8:	ldr	x20, [x21, #48]
 9bc:	mov	x0, x20
 9c0:	bl	0 <check_list_front>
 9c4:	b	9f8 <srunner_end_logging+0x60>
 9c8:	mov	x0, x20
 9cc:	bl	0 <check_list_val>
 9d0:	ldr	w1, [x0, #16]
 9d4:	mov	x19, x0
 9d8:	cbz	w1, 9e8 <srunner_end_logging+0x50>
 9dc:	ldr	x0, [x0]
 9e0:	bl	0 <fclose>
 9e4:	cbnz	w0, a20 <srunner_end_logging+0x88>
 9e8:	mov	x0, x19
 9ec:	bl	0 <free>
 9f0:	mov	x0, x20
 9f4:	bl	0 <check_list_advance>
 9f8:	mov	x0, x20
 9fc:	bl	0 <check_list_at_end>
 a00:	cbz	w0, 9c8 <srunner_end_logging+0x30>
 a04:	mov	x0, x20
 a08:	bl	0 <check_list_free>
 a0c:	ldp	x19, x20, [sp, #16]
 a10:	str	xzr, [x21, #48]
 a14:	ldr	x21, [sp, #32]
 a18:	ldp	x29, x30, [sp], #48
 a1c:	ret
 a20:	adrp	x1, 0 <srunner_send_evt>
 a24:	adrp	x0, 0 <srunner_send_evt>
 a28:	add	x1, x1, #0x0
 a2c:	add	x0, x0, #0x0
 a30:	mov	w2, #0x224                 	// #548
 a34:	bl	0 <eprintf>

check_msg.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_pipe.part.0>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 0 <get_pipe.part.0>
   8:	adrp	x0, 0 <get_pipe.part.0>
   c:	mov	x29, sp
  10:	add	x1, x1, #0x0
  14:	add	x0, x0, #0x0
  18:	mov	w2, #0x50                  	// #80
  1c:	bl	0 <eprintf>

0000000000000020 <teardown_pipe>:
  20:	stp	x29, x30, [sp, #-32]!
  24:	mov	x29, sp
  28:	stp	x19, x20, [sp, #16]
  2c:	adrp	x20, 0 <get_pipe.part.0>
  30:	add	x19, x20, #0x0
  34:	ldr	x0, [x20]
  38:	cbz	x0, 68 <teardown_pipe+0x48>
  3c:	bl	0 <fclose>
  40:	str	xzr, [x20]
  44:	ldr	x0, [x19, #8]
  48:	cbz	x0, 5c <teardown_pipe+0x3c>
  4c:	bl	0 <unlink>
  50:	ldr	x0, [x19, #8]
  54:	bl	0 <free>
  58:	str	xzr, [x19, #8]
  5c:	ldp	x19, x20, [sp, #16]
  60:	ldp	x29, x30, [sp], #32
  64:	ret
  68:	ldr	x0, [x19, #16]
  6c:	cbz	x0, 9c <teardown_pipe+0x7c>
  70:	bl	0 <fclose>
  74:	str	xzr, [x19, #16]
  78:	ldr	x0, [x19, #24]
  7c:	cbz	x0, 5c <teardown_pipe+0x3c>
  80:	bl	0 <unlink>
  84:	ldr	x0, [x19, #24]
  88:	bl	0 <free>
  8c:	str	xzr, [x19, #24]
  90:	ldp	x19, x20, [sp, #16]
  94:	ldp	x29, x30, [sp], #32
  98:	ret
  9c:	adrp	x1, 0 <get_pipe.part.0>
  a0:	adrp	x0, 0 <get_pipe.part.0>
  a4:	add	x1, x1, #0x0
  a8:	add	x0, x0, #0x0
  ac:	mov	w2, #0x16a                 	// #362
  b0:	bl	0 <eprintf>
  b4:	nop

00000000000000b8 <send_failure_info>:
  b8:	stp	x29, x30, [sp, #-32]!
  bc:	mov	x29, sp
  c0:	bl	0 <strdup>
  c4:	str	x0, [sp, #24]
  c8:	adrp	x1, 0 <get_pipe.part.0>
  cc:	ldr	x0, [x1]
  d0:	cbz	x0, f0 <send_failure_info+0x38>
  d4:	add	x2, sp, #0x18
  d8:	mov	w1, #0x1                   	// #1
  dc:	bl	0 <ppack>
  e0:	ldr	x0, [sp, #24]
  e4:	bl	0 <free>
  e8:	ldp	x29, x30, [sp], #32
  ec:	ret
  f0:	add	x2, x1, #0x0
  f4:	ldr	x0, [x2, #16]
  f8:	cbnz	x0, d4 <send_failure_info+0x1c>
  fc:	bl	0 <get_pipe.part.0>

0000000000000100 <send_duration_info>:
 100:	stp	x29, x30, [sp, #-32]!
 104:	adrp	x1, 0 <get_pipe.part.0>
 108:	mov	x29, sp
 10c:	str	w0, [sp, #24]
 110:	ldr	x0, [x1]
 114:	cbz	x0, 12c <send_duration_info+0x2c>
 118:	add	x2, sp, #0x18
 11c:	mov	w1, #0x3                   	// #3
 120:	bl	0 <ppack>
 124:	ldp	x29, x30, [sp], #32
 128:	ret
 12c:	add	x2, x1, #0x0
 130:	ldr	x0, [x2, #16]
 134:	cbnz	x0, 118 <send_duration_info+0x18>
 138:	bl	0 <get_pipe.part.0>
 13c:	nop

0000000000000140 <send_loc_info>:
 140:	stp	x29, x30, [sp, #-48]!
 144:	mov	x29, sp
 148:	str	x19, [sp, #16]
 14c:	mov	w19, w1
 150:	bl	0 <strdup>
 154:	str	w19, [sp, #32]
 158:	adrp	x1, 0 <get_pipe.part.0>
 15c:	add	x2, x1, #0x0
 160:	str	x0, [sp, #40]
 164:	ldr	x1, [x1]
 168:	cbz	x1, 190 <send_loc_info+0x50>
 16c:	add	x2, sp, #0x20
 170:	mov	x0, x1
 174:	mov	w1, #0x2                   	// #2
 178:	bl	0 <ppack>
 17c:	ldr	x0, [sp, #40]
 180:	bl	0 <free>
 184:	ldr	x19, [sp, #16]
 188:	ldp	x29, x30, [sp], #48
 18c:	ret
 190:	ldr	x1, [x2, #16]
 194:	cbnz	x1, 16c <send_loc_info+0x2c>
 198:	bl	0 <get_pipe.part.0>
 19c:	nop

00000000000001a0 <send_ctx_info>:
 1a0:	stp	x29, x30, [sp, #-32]!
 1a4:	adrp	x1, 0 <get_pipe.part.0>
 1a8:	mov	x29, sp
 1ac:	str	w0, [sp, #24]
 1b0:	ldr	x0, [x1]
 1b4:	cbz	x0, 1cc <send_ctx_info+0x2c>
 1b8:	add	x2, sp, #0x18
 1bc:	mov	w1, #0x0                   	// #0
 1c0:	bl	0 <ppack>
 1c4:	ldp	x29, x30, [sp], #32
 1c8:	ret
 1cc:	add	x2, x1, #0x0
 1d0:	ldr	x0, [x2, #16]
 1d4:	cbnz	x0, 1b8 <send_ctx_info+0x18>
 1d8:	bl	0 <get_pipe.part.0>
 1dc:	nop

00000000000001e0 <teardown_messaging>:
 1e0:	b	20 <teardown_pipe>
 1e4:	nop

00000000000001e8 <open_tmp_file>:
 1e8:	stp	x29, x30, [sp, #-32]!
 1ec:	adrp	x1, 0 <get_pipe.part.0>
 1f0:	mov	x29, sp
 1f4:	stp	x19, x20, [sp, #16]
 1f8:	mov	x19, x0
 1fc:	add	x0, x1, #0x0
 200:	mov	x20, #0x0                   	// #0
 204:	str	xzr, [x19]
 208:	bl	0 <getenv>
 20c:	cmp	x0, #0x0
 210:	adrp	x1, 0 <get_pipe.part.0>
 214:	add	x1, x1, #0x0
 218:	csel	x1, x1, x0, eq  // eq = none
 21c:	adrp	x0, 0 <get_pipe.part.0>
 220:	add	x0, x0, #0x0
 224:	bl	0 <ck_strdup_printf>
 228:	str	x0, [x19]
 22c:	bl	0 <mkstemp>
 230:	tbnz	w0, #31, 264 <open_tmp_file+0x7c>
 234:	adrp	x1, 0 <get_pipe.part.0>
 238:	add	x1, x1, #0x0
 23c:	bl	0 <fdopen>
 240:	mov	x20, x0
 244:	ldr	x0, [x19]
 248:	bl	0 <unlink>
 24c:	cmp	x20, #0x0
 250:	ccmp	w0, #0x0, #0x4, ne  // ne = any
 254:	b.ne	264 <open_tmp_file+0x7c>  // b.any
 258:	ldr	x0, [x19]
 25c:	bl	0 <free>
 260:	str	xzr, [x19]
 264:	mov	x0, x20
 268:	ldp	x19, x20, [sp, #16]
 26c:	ldp	x29, x30, [sp], #32
 270:	ret
 274:	nop

0000000000000278 <setup_pipe>:
 278:	stp	x29, x30, [sp, #-32]!
 27c:	mov	x29, sp
 280:	stp	x19, x20, [sp, #16]
 284:	adrp	x19, 0 <get_pipe.part.0>
 288:	add	x20, x19, #0x0
 28c:	ldr	x0, [x20, #16]
 290:	cbz	x0, 2b8 <setup_pipe+0x40>
 294:	ldr	x0, [x19]
 298:	cbnz	x0, 2f8 <setup_pipe+0x80>
 29c:	add	x0, x20, #0x8
 2a0:	bl	1e8 <open_tmp_file>
 2a4:	str	x0, [x19]
 2a8:	cbz	x0, 2e0 <setup_pipe+0x68>
 2ac:	ldp	x19, x20, [sp, #16]
 2b0:	ldp	x29, x30, [sp], #32
 2b4:	ret
 2b8:	add	x0, x20, #0x18
 2bc:	bl	1e8 <open_tmp_file>
 2c0:	str	x0, [x20, #16]
 2c4:	cbnz	x0, 2ac <setup_pipe+0x34>
 2c8:	adrp	x1, 0 <get_pipe.part.0>
 2cc:	adrp	x0, 0 <get_pipe.part.0>
 2d0:	add	x1, x1, #0x0
 2d4:	add	x0, x0, #0x0
 2d8:	mov	w2, #0x13d                 	// #317
 2dc:	bl	0 <eprintf>
 2e0:	adrp	x1, 0 <get_pipe.part.0>
 2e4:	adrp	x0, 0 <get_pipe.part.0>
 2e8:	add	x1, x1, #0x0
 2ec:	add	x0, x0, #0x0
 2f0:	mov	w2, #0x146                 	// #326
 2f4:	bl	0 <eprintf>
 2f8:	adrp	x1, 0 <get_pipe.part.0>
 2fc:	adrp	x0, 0 <get_pipe.part.0>
 300:	add	x1, x1, #0x0
 304:	add	x0, x0, #0x0
 308:	mov	w2, #0x14d                 	// #333
 30c:	bl	0 <eprintf>

0000000000000310 <receive_test_result>:
 310:	stp	x29, x30, [sp, #-32]!
 314:	adrp	x1, 0 <get_pipe.part.0>
 318:	mov	x29, sp
 31c:	stp	x19, x20, [sp, #16]
 320:	mov	w20, w0
 324:	ldr	x19, [x1]
 328:	cbz	x19, 400 <receive_test_result+0xf0>
 32c:	mov	x0, x19
 330:	bl	0 <rewind>
 334:	mov	x0, x19
 338:	bl	0 <punpack>
 33c:	mov	x19, x0
 340:	cbz	x0, 478 <receive_test_result+0x168>
 344:	bl	20 <teardown_pipe>
 348:	bl	278 <setup_pipe>
 34c:	bl	0 <tr_create>
 350:	ldr	x1, [x19, #40]
 354:	cmp	w20, #0x0
 358:	mov	x20, x0
 35c:	ccmp	x1, #0x0, #0x0, eq  // eq = none
 360:	b.eq	410 <receive_test_result+0x100>  // b.none
 364:	ldr	w0, [x19, #4]
 368:	cbz	w0, 3b4 <receive_test_result+0xa4>
 36c:	str	w0, [x20, #4]
 370:	cmp	w0, #0x2
 374:	str	x1, [x20, #48]
 378:	str	xzr, [x19, #40]
 37c:	b.eq	3cc <receive_test_result+0xbc>  // b.none
 380:	ldr	w1, [x19, #16]
 384:	ldr	x0, [x19, #8]
 388:	str	x0, [x20, #8]
 38c:	str	w1, [x20, #16]
 390:	mov	w0, #0xffffffff            	// #-1
 394:	str	xzr, [x19, #8]
 398:	str	w0, [x19, #16]
 39c:	mov	x0, x19
 3a0:	bl	0 <rcvmsg_free>
 3a4:	mov	x0, x20
 3a8:	ldp	x19, x20, [sp, #16]
 3ac:	ldp	x29, x30, [sp], #32
 3b0:	ret
 3b4:	ldr	w0, [x19]
 3b8:	str	w0, [x20, #4]
 3bc:	str	x1, [x20, #48]
 3c0:	cmp	w0, #0x2
 3c4:	str	xzr, [x19, #40]
 3c8:	b.ne	380 <receive_test_result+0x70>  // b.any
 3cc:	ldr	w1, [x19, #32]
 3d0:	ldr	x0, [x19, #24]
 3d4:	str	x0, [x20, #8]
 3d8:	str	w1, [x20, #16]
 3dc:	mov	w0, #0xffffffff            	// #-1
 3e0:	str	xzr, [x19, #24]
 3e4:	str	w0, [x19, #32]
 3e8:	mov	x0, x19
 3ec:	bl	0 <rcvmsg_free>
 3f0:	mov	x0, x20
 3f4:	ldp	x19, x20, [sp, #16]
 3f8:	ldp	x29, x30, [sp], #32
 3fc:	ret
 400:	add	x0, x1, #0x0
 404:	ldr	x19, [x0, #16]
 408:	cbnz	x19, 32c <receive_test_result+0x1c>
 40c:	bl	0 <get_pipe.part.0>
 410:	ldr	w0, [x19]
 414:	cmp	w0, #0x1
 418:	b.ne	444 <receive_test_result+0x134>  // b.any
 41c:	ldr	w1, [x19, #16]
 420:	ldr	x2, [x19, #8]
 424:	str	w0, [x20, #4]
 428:	str	x2, [x20, #8]
 42c:	mov	w0, #0xffffffff            	// #-1
 430:	str	w1, [x20, #16]
 434:	str	xzr, [x20, #48]
 438:	str	xzr, [x19, #8]
 43c:	str	w0, [x19, #16]
 440:	b	39c <receive_test_result+0x8c>
 444:	ldr	w2, [x19, #32]
 448:	mov	w4, #0x2                   	// #2
 44c:	ldr	w1, [x19, #48]
 450:	mov	w0, #0xffffffff            	// #-1
 454:	ldr	x3, [x19, #24]
 458:	str	w4, [x20, #4]
 45c:	str	x3, [x20, #8]
 460:	str	w2, [x20, #16]
 464:	str	w1, [x20, #24]
 468:	str	xzr, [x20, #48]
 46c:	str	xzr, [x19, #24]
 470:	str	w0, [x19, #32]
 474:	b	39c <receive_test_result+0x8c>
 478:	adrp	x1, 0 <get_pipe.part.0>
 47c:	adrp	x0, 0 <get_pipe.part.0>
 480:	add	x1, x1, #0x0
 484:	add	x0, x0, #0x0
 488:	mov	w2, #0x85                  	// #133
 48c:	bl	0 <eprintf>

0000000000000490 <setup_messaging>:
 490:	b	278 <setup_pipe>

check_pack.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <upack_ctx>:
   0:	ldr	x3, [x0]
   4:	ldr	w2, [x3], #4
   8:	str	x3, [x0]
   c:	rev	w0, w2
  10:	str	w0, [x1]
  14:	ret

0000000000000018 <upack_duration>:
  18:	ldr	x3, [x0]
  1c:	ldr	w2, [x3], #4
  20:	str	x3, [x0]
  24:	rev	w0, w2
  28:	str	w0, [x1]
  2c:	ret

0000000000000030 <pack_duration>:
  30:	stp	x29, x30, [sp, #-32]!
  34:	mov	x29, sp
  38:	stp	x19, x20, [sp, #16]
  3c:	mov	x20, x0
  40:	mov	x19, x1
  44:	mov	x0, #0x8                   	// #8
  48:	bl	0 <emalloc>
  4c:	mov	x2, x0
  50:	str	x2, [x20]
  54:	mov	w1, #0x3000000             	// #50331648
  58:	mov	w0, #0x8                   	// #8
  5c:	str	w1, [x2]
  60:	ldr	w1, [x19]
  64:	rev	w1, w1
  68:	str	w1, [x2, #4]
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldp	x29, x30, [sp], #32
  74:	ret

0000000000000078 <pack_ctx>:
  78:	stp	x29, x30, [sp, #-32]!
  7c:	mov	x29, sp
  80:	stp	x19, x20, [sp, #16]
  84:	mov	x20, x0
  88:	mov	x19, x1
  8c:	mov	x0, #0x8                   	// #8
  90:	bl	0 <emalloc>
  94:	mov	x2, x0
  98:	str	x2, [x20]
  9c:	mov	w0, #0x8                   	// #8
  a0:	str	wzr, [x2]
  a4:	ldr	w1, [x19]
  a8:	rev	w1, w1
  ac:	str	w1, [x2, #4]
  b0:	ldp	x19, x20, [sp, #16]
  b4:	ldp	x29, x30, [sp], #32
  b8:	ret
  bc:	nop

00000000000000c0 <pack_str>:
  c0:	stp	x29, x30, [sp, #-48]!
  c4:	mov	x29, sp
  c8:	stp	x19, x20, [sp, #16]
  cc:	mov	x19, x0
  d0:	cbz	x1, 144 <pack_str+0x84>
  d4:	mov	x0, x1
  d8:	str	x21, [sp, #32]
  dc:	mov	x21, x1
  e0:	bl	0 <strlen>
  e4:	ldr	x1, [x19]
  e8:	mov	x2, x0
  ec:	rev	w0, w0
  f0:	cmp	w2, #0x0
  f4:	str	w0, [x1]
  f8:	ldr	x0, [x19]
  fc:	add	x0, x0, #0x4
 100:	str	x0, [x19]
 104:	b.le	134 <pack_str+0x74>
 108:	sxtw	x20, w2
 10c:	mov	x1, x21
 110:	mov	x2, x20
 114:	bl	0 <memcpy>
 118:	ldr	x2, [x19]
 11c:	ldr	x21, [sp, #32]
 120:	add	x2, x2, x20
 124:	str	x2, [x19]
 128:	ldp	x19, x20, [sp, #16]
 12c:	ldp	x29, x30, [sp], #48
 130:	ret
 134:	ldp	x19, x20, [sp, #16]
 138:	ldr	x21, [sp, #32]
 13c:	ldp	x29, x30, [sp], #48
 140:	ret
 144:	ldr	x0, [x0]
 148:	str	wzr, [x0]
 14c:	ldr	x0, [x19]
 150:	add	x0, x0, #0x4
 154:	str	x0, [x19]
 158:	ldp	x19, x20, [sp, #16]
 15c:	ldp	x29, x30, [sp], #48
 160:	ret
 164:	nop

0000000000000168 <pack_loc>:
 168:	stp	x29, x30, [sp, #-64]!
 16c:	mov	x29, sp
 170:	str	x21, [sp, #32]
 174:	mov	x21, x0
 178:	ldr	x0, [x1, #8]
 17c:	stp	x19, x20, [sp, #16]
 180:	mov	x19, x1
 184:	cbz	x0, 1e8 <pack_loc+0x80>
 188:	bl	0 <strlen>
 18c:	add	w20, w0, #0xc
 190:	sxtw	x0, w20
 194:	bl	0 <emalloc>
 198:	mov	x1, x0
 19c:	str	x1, [x21]
 1a0:	mov	w2, #0x2000000             	// #33554432
 1a4:	str	x1, [sp, #56]
 1a8:	add	x0, sp, #0x38
 1ac:	str	w2, [x1]
 1b0:	ldr	x2, [sp, #56]
 1b4:	ldr	x1, [x19, #8]
 1b8:	add	x2, x2, #0x4
 1bc:	str	x2, [sp, #56]
 1c0:	bl	c0 <pack_str>
 1c4:	ldr	x2, [sp, #56]
 1c8:	mov	w0, w20
 1cc:	ldr	w1, [x19]
 1d0:	rev	w1, w1
 1d4:	str	w1, [x2]
 1d8:	ldp	x19, x20, [sp, #16]
 1dc:	ldr	x21, [sp, #32]
 1e0:	ldp	x29, x30, [sp], #64
 1e4:	ret
 1e8:	mov	x0, #0xc                   	// #12
 1ec:	mov	w20, w0
 1f0:	b	194 <pack_loc+0x2c>
 1f4:	nop

00000000000001f8 <pack_fail>:
 1f8:	stp	x29, x30, [sp, #-64]!
 1fc:	mov	x29, sp
 200:	str	x21, [sp, #32]
 204:	mov	x21, x0
 208:	ldr	x0, [x1]
 20c:	stp	x19, x20, [sp, #16]
 210:	mov	x19, x1
 214:	cbz	x0, 268 <pack_fail+0x70>
 218:	bl	0 <strlen>
 21c:	add	w20, w0, #0x8
 220:	sxtw	x0, w20
 224:	bl	0 <emalloc>
 228:	mov	x2, x0
 22c:	str	x2, [x21]
 230:	mov	w1, #0x1000000             	// #16777216
 234:	str	x2, [sp, #56]
 238:	add	x0, sp, #0x38
 23c:	str	w1, [x2]
 240:	ldr	x2, [sp, #56]
 244:	ldr	x1, [x19]
 248:	add	x2, x2, #0x4
 24c:	str	x2, [sp, #56]
 250:	bl	c0 <pack_str>
 254:	mov	w0, w20
 258:	ldp	x19, x20, [sp, #16]
 25c:	ldr	x21, [sp, #32]
 260:	ldp	x29, x30, [sp], #64
 264:	ret
 268:	mov	x0, #0x8                   	// #8
 26c:	mov	w20, w0
 270:	b	224 <pack_fail+0x2c>
 274:	nop

0000000000000278 <ppack_cleanup>:
 278:	b	0 <pthread_mutex_unlock>
 27c:	nop

0000000000000280 <get_max_msg_size>:
 280:	stp	x29, x30, [sp, #-16]!
 284:	adrp	x0, 0 <upack_ctx>
 288:	add	x0, x0, #0x0
 28c:	mov	x29, sp
 290:	bl	0 <getenv>
 294:	cbz	x0, 2a8 <get_max_msg_size+0x28>
 298:	mov	w2, #0xa                   	// #10
 29c:	mov	x1, #0x0                   	// #0
 2a0:	bl	0 <strtoul>
 2a4:	cbnz	x0, 2bc <get_max_msg_size+0x3c>
 2a8:	adrp	x0, 0 <upack_ctx>
 2ac:	mov	x1, #0x1000                	// #4096
 2b0:	ldr	x0, [x0]
 2b4:	cmp	x0, #0x0
 2b8:	csel	x0, x0, x1, ne  // ne = any
 2bc:	ldp	x29, x30, [sp], #16
 2c0:	ret
 2c4:	nop

00000000000002c8 <upack_str>:
 2c8:	stp	x29, x30, [sp, #-48]!
 2cc:	mov	x29, sp
 2d0:	stp	x19, x20, [sp, #16]
 2d4:	mov	x19, x0
 2d8:	ldr	x0, [x0]
 2dc:	stp	x21, x22, [sp, #32]
 2e0:	ldr	w20, [x0], #4
 2e4:	str	x0, [x19]
 2e8:	rev	w20, w20
 2ec:	cmp	w20, #0x0
 2f0:	b.le	338 <upack_str+0x70>
 2f4:	add	w0, w20, #0x1
 2f8:	sxtw	x22, w20
 2fc:	sxtw	x0, w0
 300:	bl	0 <emalloc>
 304:	ldr	x1, [x19]
 308:	mov	x21, x0
 30c:	mov	x2, x22
 310:	bl	0 <memcpy>
 314:	strb	wzr, [x21, w20, sxtw]
 318:	ldr	x0, [x19]
 31c:	add	x0, x0, x22
 320:	str	x0, [x19]
 324:	mov	x0, x21
 328:	ldp	x19, x20, [sp, #16]
 32c:	ldp	x21, x22, [sp, #32]
 330:	ldp	x29, x30, [sp], #48
 334:	ret
 338:	mov	x0, #0x1                   	// #1
 33c:	bl	0 <emalloc>
 340:	strb	wzr, [x0]
 344:	mov	x21, x0
 348:	mov	x0, x21
 34c:	ldp	x19, x20, [sp, #16]
 350:	ldp	x21, x22, [sp, #32]
 354:	ldp	x29, x30, [sp], #48
 358:	ret
 35c:	nop

0000000000000360 <upack_loc>:
 360:	stp	x29, x30, [sp, #-32]!
 364:	mov	x29, sp
 368:	stp	x19, x20, [sp, #16]
 36c:	mov	x19, x1
 370:	mov	x20, x0
 374:	bl	2c8 <upack_str>
 378:	str	x0, [x19, #8]
 37c:	ldr	x1, [x20]
 380:	ldr	w0, [x1], #4
 384:	str	x1, [x20]
 388:	rev	w0, w0
 38c:	str	w0, [x19]
 390:	ldp	x19, x20, [sp, #16]
 394:	ldp	x29, x30, [sp], #32
 398:	ret
 39c:	nop

00000000000003a0 <upack_fail>:
 3a0:	stp	x29, x30, [sp, #-32]!
 3a4:	mov	x29, sp
 3a8:	str	x19, [sp, #16]
 3ac:	mov	x19, x1
 3b0:	bl	2c8 <upack_str>
 3b4:	str	x0, [x19]
 3b8:	ldr	x19, [sp, #16]
 3bc:	ldp	x29, x30, [sp], #32
 3c0:	ret
 3c4:	nop

00000000000003c8 <check_set_max_msg_size>:
 3c8:	adrp	x1, 0 <upack_ctx>
 3cc:	str	x0, [x1]
 3d0:	ret
 3d4:	nop

00000000000003d8 <pack>:
 3d8:	mov	w3, w0
 3dc:	mov	x0, x1
 3e0:	cbz	x1, 410 <pack+0x38>
 3e4:	mov	x1, x2
 3e8:	cbz	x2, 408 <pack+0x30>
 3ec:	cmp	w3, #0x3
 3f0:	b.hi	418 <pack+0x40>  // b.pmore
 3f4:	adrp	x2, 0 <upack_ctx>
 3f8:	add	x2, x2, #0x0
 3fc:	ldr	x2, [x2, w3, uxtw #3]
 400:	mov	x16, x2
 404:	br	x16
 408:	mov	w0, #0x0                   	// #0
 40c:	ret
 410:	mov	w0, #0xffffffff            	// #-1
 414:	ret
 418:	stp	x29, x30, [sp, #-16]!
 41c:	adrp	x1, 0 <upack_ctx>
 420:	adrp	x0, 0 <upack_ctx>
 424:	mov	x29, sp
 428:	add	x1, x1, #0x0
 42c:	add	x0, x0, #0x0
 430:	mov	w2, #0x7e                  	// #126
 434:	bl	0 <eprintf>

0000000000000438 <upack>:
 438:	stp	x29, x30, [sp, #-48]!
 43c:	mov	x29, sp
 440:	str	x0, [sp, #40]
 444:	cbz	x0, 494 <upack+0x5c>
 448:	str	x19, [sp, #16]
 44c:	mov	x19, x0
 450:	ldr	w3, [x0], #4
 454:	str	x0, [sp, #40]
 458:	rev	w3, w3
 45c:	str	w3, [x2]
 460:	cmp	w3, #0x3
 464:	b.hi	49c <upack+0x64>  // b.pmore
 468:	adrp	x2, 0 <upack_ctx>
 46c:	add	x2, x2, #0x0
 470:	add	x2, x2, #0x20
 474:	add	x0, sp, #0x28
 478:	ldr	x2, [x2, w3, uxtw #3]
 47c:	blr	x2
 480:	ldr	x0, [sp, #40]
 484:	sub	w0, w0, w19
 488:	ldr	x19, [sp, #16]
 48c:	ldp	x29, x30, [sp], #48
 490:	ret
 494:	mov	w0, #0xffffffff            	// #-1
 498:	b	48c <upack+0x54>
 49c:	adrp	x1, 0 <upack_ctx>
 4a0:	adrp	x0, 0 <upack_ctx>
 4a4:	add	x1, x1, #0x0
 4a8:	add	x0, x0, #0x0
 4ac:	mov	w2, #0x8e                  	// #142
 4b0:	bl	0 <eprintf>
 4b4:	nop

00000000000004b8 <ppack>:
 4b8:	stp	x29, x30, [sp, #-320]!
 4bc:	mov	x3, x0
 4c0:	mov	w0, w1
 4c4:	mov	x29, sp
 4c8:	add	x1, sp, #0x58
 4cc:	stp	x19, x20, [sp, #16]
 4d0:	stp	x21, x22, [sp, #32]
 4d4:	str	x3, [sp, #64]
 4d8:	str	xzr, [sp, #88]
 4dc:	bl	3d8 <pack>
 4e0:	sxtw	x0, w0
 4e4:	str	x0, [sp, #56]
 4e8:	mov	x19, x0
 4ec:	bl	280 <get_max_msg_size>
 4f0:	cmp	x19, x0
 4f4:	b.hi	5b8 <ppack+0x100>  // b.pmore
 4f8:	adrp	x0, 0 <upack_ctx>
 4fc:	add	x0, x0, #0x0
 500:	mov	w1, #0x0                   	// #0
 504:	str	x0, [sp, #72]
 508:	add	x0, sp, #0x60
 50c:	bl	0 <__sigsetjmp>
 510:	cbnz	w0, 584 <ppack+0xcc>
 514:	adrp	x19, 0 <upack_ctx>
 518:	add	x19, x19, #0x0
 51c:	add	x0, sp, #0x60
 520:	add	x19, x19, #0x8
 524:	bl	0 <__pthread_register_cancel>
 528:	mov	x0, x19
 52c:	bl	0 <pthread_mutex_lock>
 530:	ldp	x21, x22, [sp, #56]
 534:	mov	x1, #0x1                   	// #1
 538:	ldr	x0, [sp, #88]
 53c:	mov	x3, x22
 540:	mov	x2, x21
 544:	bl	0 <fwrite>
 548:	mov	x20, x0
 54c:	mov	x0, x22
 550:	bl	0 <fflush>
 554:	mov	x0, x19
 558:	bl	0 <pthread_mutex_unlock>
 55c:	add	x0, sp, #0x60
 560:	bl	0 <__pthread_unregister_cancel>
 564:	cmp	x21, x20
 568:	b.ne	5a0 <ppack+0xe8>  // b.any
 56c:	ldr	x0, [sp, #88]
 570:	bl	0 <free>
 574:	ldp	x19, x20, [sp, #16]
 578:	ldp	x21, x22, [sp, #32]
 57c:	ldp	x29, x30, [sp], #320
 580:	ret
 584:	ldr	x1, [sp, #72]
 588:	adrp	x0, 0 <upack_ctx>
 58c:	add	x0, x0, #0x0
 590:	add	x0, x0, #0x8
 594:	blr	x1
 598:	add	x0, sp, #0x60
 59c:	bl	0 <__pthread_unwind_next>
 5a0:	adrp	x1, 0 <upack_ctx>
 5a4:	adrp	x0, 0 <upack_ctx>
 5a8:	add	x1, x1, #0x0
 5ac:	add	x0, x0, #0x0
 5b0:	mov	w2, #0x14f                 	// #335
 5b4:	bl	0 <eprintf>
 5b8:	adrp	x1, 0 <upack_ctx>
 5bc:	adrp	x0, 0 <upack_ctx>
 5c0:	add	x1, x1, #0x0
 5c4:	add	x0, x0, #0x0
 5c8:	mov	w2, #0x146                 	// #326
 5cc:	bl	0 <eprintf>

00000000000005d0 <rcvmsg_free>:
 5d0:	stp	x29, x30, [sp, #-32]!
 5d4:	mov	x29, sp
 5d8:	str	x19, [sp, #16]
 5dc:	mov	x19, x0
 5e0:	ldr	x0, [x0, #8]
 5e4:	bl	0 <free>
 5e8:	ldr	x0, [x19, #24]
 5ec:	bl	0 <free>
 5f0:	ldr	x0, [x19, #40]
 5f4:	bl	0 <free>
 5f8:	mov	x0, x19
 5fc:	ldr	x19, [sp, #16]
 600:	ldp	x29, x30, [sp], #32
 604:	b	0 <free>

0000000000000608 <punpack>:
 608:	stp	x29, x30, [sp, #-128]!
 60c:	mov	x29, sp
 610:	stp	x19, x20, [sp, #16]
 614:	stp	x21, x22, [sp, #32]
 618:	stp	x23, x24, [sp, #48]
 61c:	mov	w24, #0xffffffff            	// #-1
 620:	stp	x25, x26, [sp, #64]
 624:	mov	x25, x0
 628:	mov	x0, #0x38                  	// #56
 62c:	str	x27, [sp, #80]
 630:	bl	0 <emalloc>
 634:	stp	xzr, xzr, [x0]
 638:	mov	x22, x0
 63c:	str	w24, [x0, #16]
 640:	str	xzr, [x0, #24]
 644:	str	w24, [x0, #32]
 648:	str	xzr, [x0, #40]
 64c:	str	w24, [x0, #48]
 650:	bl	280 <get_max_msg_size>
 654:	lsl	x0, x0, #1
 658:	bl	0 <emalloc>
 65c:	mov	x21, x0
 660:	bl	280 <get_max_msg_size>
 664:	mov	x2, x0
 668:	mov	x3, x25
 66c:	mov	x1, #0x1                   	// #1
 670:	sbfiz	x2, x2, #1, #31
 674:	mov	x0, x21
 678:	bl	0 <fread>
 67c:	mov	x23, x0
 680:	mov	w20, w23
 684:	mov	x0, x25
 688:	bl	0 <ferror>
 68c:	cbnz	w0, 894 <punpack+0x28c>
 690:	cmp	w20, #0x0
 694:	b.le	728 <punpack+0x120>
 698:	add	x2, sp, #0x6c
 69c:	add	x1, sp, #0x70
 6a0:	mov	x0, x21
 6a4:	bl	438 <upack>
 6a8:	sxtw	x19, w0
 6ac:	cmn	w19, #0x1
 6b0:	b.eq	864 <punpack+0x25c>  // b.none
 6b4:	ldr	w3, [sp, #108]
 6b8:	cbnz	w3, 76c <punpack+0x164>
 6bc:	ldr	w0, [x22]
 6c0:	ldr	w26, [sp, #112]
 6c4:	cbnz	w0, 758 <punpack+0x150>
 6c8:	str	w26, [x22]
 6cc:	subs	w20, w20, w19
 6d0:	b.mi	87c <punpack+0x274>  // b.first
 6d4:	sxtw	x26, w20
 6d8:	add	x1, x21, x19
 6dc:	mov	x2, x26
 6e0:	mov	x0, x21
 6e4:	bl	0 <memmove>
 6e8:	cmp	w23, #0x0
 6ec:	b.le	690 <punpack+0x88>
 6f0:	mov	x2, x19
 6f4:	mov	x3, x25
 6f8:	mov	x1, #0x1                   	// #1
 6fc:	add	x0, x21, x26
 700:	bl	0 <fread>
 704:	mov	x19, x0
 708:	mov	w23, w19
 70c:	mov	x0, x25
 710:	bl	0 <ferror>
 714:	cbnz	w0, 894 <punpack+0x28c>
 718:	add	w20, w20, w19
 71c:	cmp	w20, #0x0
 720:	b.gt	698 <punpack+0x90>
 724:	nop
 728:	mov	x0, x21
 72c:	bl	0 <free>
 730:	ldr	w0, [x22]
 734:	cbz	w0, 838 <punpack+0x230>
 738:	mov	x0, x22
 73c:	ldp	x19, x20, [sp, #16]
 740:	ldp	x21, x22, [sp, #32]
 744:	ldp	x23, x24, [sp, #48]
 748:	ldp	x25, x26, [sp, #64]
 74c:	ldr	x27, [sp, #80]
 750:	ldp	x29, x30, [sp], #128
 754:	ret
 758:	ldr	x0, [x22, #8]
 75c:	bl	0 <free>
 760:	str	xzr, [x22, #8]
 764:	str	w24, [x22, #16]
 768:	b	6c8 <punpack+0xc0>
 76c:	cmp	w3, #0x2
 770:	b.eq	7a0 <punpack+0x198>  // b.none
 774:	cmp	w3, #0x1
 778:	b.eq	7b8 <punpack+0x1b0>  // b.none
 77c:	cmp	w3, #0x3
 780:	b.eq	7dc <punpack+0x1d4>  // b.none
 784:	b.ls	6cc <punpack+0xc4>  // b.plast
 788:	adrp	x1, 0 <upack_ctx>
 78c:	adrp	x0, 0 <upack_ctx>
 790:	add	x1, x1, #0x0
 794:	add	x0, x0, #0x0
 798:	mov	w2, #0x194                 	// #404
 79c:	bl	0 <eprintf>
 7a0:	ldr	w0, [x22, #4]
 7a4:	ldr	x26, [sp, #120]
 7a8:	cbz	w0, 7e8 <punpack+0x1e0>
 7ac:	mov	x0, x26
 7b0:	bl	0 <free>
 7b4:	b	6cc <punpack+0xc4>
 7b8:	ldr	x0, [x22, #40]
 7bc:	ldr	x26, [sp, #112]
 7c0:	cbnz	x0, 7ac <punpack+0x1a4>
 7c4:	mov	x0, x26
 7c8:	bl	0 <strdup>
 7cc:	ldr	w1, [x22]
 7d0:	str	w1, [x22, #4]
 7d4:	str	x0, [x22, #40]
 7d8:	b	7ac <punpack+0x1a4>
 7dc:	ldr	w0, [sp, #112]
 7e0:	str	w0, [x22, #48]
 7e4:	b	6cc <punpack+0xc4>
 7e8:	ldr	w0, [x22]
 7ec:	ldr	w27, [sp, #112]
 7f0:	cmp	w0, #0x2
 7f4:	b.eq	818 <punpack+0x210>  // b.none
 7f8:	ldr	x0, [x22, #8]
 7fc:	bl	0 <free>
 800:	str	w27, [x22, #16]
 804:	mov	x0, x26
 808:	bl	0 <strdup>
 80c:	ldr	x26, [sp, #120]
 810:	str	x0, [x22, #8]
 814:	b	7ac <punpack+0x1a4>
 818:	ldr	x0, [x22, #24]
 81c:	bl	0 <free>
 820:	str	w27, [x22, #32]
 824:	mov	x0, x26
 828:	bl	0 <strdup>
 82c:	str	x0, [x22, #24]
 830:	ldr	x26, [sp, #120]
 834:	b	7ac <punpack+0x1a4>
 838:	mov	x0, x22
 83c:	mov	x22, #0x0                   	// #0
 840:	bl	0 <free>
 844:	mov	x0, x22
 848:	ldp	x19, x20, [sp, #16]
 84c:	ldp	x21, x22, [sp, #32]
 850:	ldp	x23, x24, [sp, #48]
 854:	ldp	x25, x26, [sp, #64]
 858:	ldr	x27, [sp, #80]
 85c:	ldp	x29, x30, [sp], #128
 860:	ret
 864:	adrp	x1, 0 <upack_ctx>
 868:	adrp	x0, 0 <upack_ctx>
 86c:	add	x1, x1, #0x0
 870:	add	x0, x0, #0x0
 874:	mov	w2, #0x16a                 	// #362
 878:	bl	0 <eprintf>
 87c:	adrp	x1, 0 <upack_ctx>
 880:	adrp	x0, 0 <upack_ctx>
 884:	add	x1, x1, #0x0
 888:	add	x0, x0, #0x0
 88c:	mov	w2, #0x1e6                 	// #486
 890:	bl	0 <eprintf>
 894:	adrp	x1, 0 <upack_ctx>
 898:	adrp	x0, 0 <upack_ctx>
 89c:	add	x1, x1, #0x0
 8a0:	add	x0, x0, #0x0
 8a4:	mov	w2, #0x15a                 	// #346
 8a8:	bl	0 <eprintf>

check_print.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fprint_xml_esc>:
   0:	ldrb	w2, [x1]
   4:	cbz	w2, 160 <fprint_xml_esc+0x160>
   8:	stp	x29, x30, [sp, #-48]!
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	mov	x19, x1
  18:	mov	x20, x0
  1c:	stp	x21, x22, [sp, #32]
  20:	adrp	x21, 0 <fprint_xml_esc>
  24:	adrp	x22, 0 <fprint_xml_esc>
  28:	add	x21, x21, #0x0
  2c:	add	x22, x22, #0x0
  30:	b	50 <fprint_xml_esc+0x50>
  34:	mov	x3, x20
  38:	mov	x0, x21
  3c:	mov	x2, #0x6                   	// #6
  40:	mov	x1, #0x1                   	// #1
  44:	bl	0 <fwrite>
  48:	ldrb	w2, [x19, #1]!
  4c:	cbz	w2, ac <fprint_xml_esc+0xac>
  50:	cmp	w2, #0x22
  54:	b.eq	34 <fprint_xml_esc+0x34>  // b.none
  58:	and	w1, w2, #0xfffffffd
  5c:	sub	w4, w2, #0x26
  60:	cmp	w1, #0x3c
  64:	and	w4, w4, #0xff
  68:	ccmp	w4, #0x1, #0x0, ne  // ne = any
  6c:	b.hi	e0 <fprint_xml_esc+0xe0>  // b.pmore
  70:	cmp	w2, #0x27
  74:	b.eq	118 <fprint_xml_esc+0x118>  // b.none
  78:	b.ls	bc <fprint_xml_esc+0xbc>  // b.plast
  7c:	cmp	w2, #0x3c
  80:	b.eq	134 <fprint_xml_esc+0x134>  // b.none
  84:	cmp	w2, #0x3e
  88:	b.ne	48 <fprint_xml_esc+0x48>  // b.any
  8c:	mov	x2, #0x4                   	// #4
  90:	mov	x3, x20
  94:	adrp	x0, 0 <fprint_xml_esc>
  98:	mov	x1, #0x1                   	// #1
  9c:	add	x0, x0, #0x0
  a0:	bl	0 <fwrite>
  a4:	ldrb	w2, [x19, #1]!
  a8:	cbnz	w2, 50 <fprint_xml_esc+0x50>
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x21, x22, [sp, #32]
  b4:	ldp	x29, x30, [sp], #48
  b8:	ret
  bc:	cmp	w2, #0x26
  c0:	b.ne	48 <fprint_xml_esc+0x48>  // b.any
  c4:	mov	x3, x20
  c8:	adrp	x0, 0 <fprint_xml_esc>
  cc:	mov	x2, #0x5                   	// #5
  d0:	mov	x1, #0x1                   	// #1
  d4:	add	x0, x0, #0x0
  d8:	bl	0 <fwrite>
  dc:	b	48 <fprint_xml_esc+0x48>
  e0:	sub	w0, w2, #0x20
  e4:	and	w0, w0, #0xff
  e8:	cmp	w0, #0x5e
  ec:	b.ls	150 <fprint_xml_esc+0x150>  // b.plast
  f0:	cmp	w2, #0xd
  f4:	sub	w0, w2, #0x9
  f8:	ccmp	w2, #0x1f, #0x2, ne  // ne = any
  fc:	and	w0, w0, #0xff
 100:	ccmp	w0, #0x1, #0x0, ls  // ls = plast
 104:	b.hi	48 <fprint_xml_esc+0x48>  // b.pmore
 108:	mov	x1, x22
 10c:	mov	x0, x20
 110:	bl	0 <fprintf>
 114:	b	48 <fprint_xml_esc+0x48>
 118:	mov	x3, x20
 11c:	adrp	x0, 0 <fprint_xml_esc>
 120:	mov	x2, #0x6                   	// #6
 124:	mov	x1, #0x1                   	// #1
 128:	add	x0, x0, #0x0
 12c:	bl	0 <fwrite>
 130:	b	48 <fprint_xml_esc+0x48>
 134:	mov	x3, x20
 138:	adrp	x0, 0 <fprint_xml_esc>
 13c:	mov	x2, #0x4                   	// #4
 140:	mov	x1, #0x1                   	// #1
 144:	add	x0, x0, #0x0
 148:	bl	0 <fwrite>
 14c:	b	48 <fprint_xml_esc+0x48>
 150:	mov	w0, w2
 154:	mov	x1, x20
 158:	bl	0 <fputc>
 15c:	b	48 <fprint_xml_esc+0x48>
 160:	ret
 164:	nop

0000000000000168 <tr_xmlprint>:
 168:	stp	x29, x30, [sp, #-80]!
 16c:	mov	x29, sp
 170:	stp	x19, x20, [sp, #16]
 174:	mov	x19, x0
 178:	ldr	w0, [x1]
 17c:	stp	x21, x22, [sp, #32]
 180:	mov	x20, x1
 184:	cmp	w0, #0x2
 188:	b.eq	3c8 <tr_xmlprint+0x260>  // b.none
 18c:	cmp	w0, #0x3
 190:	b.ne	338 <tr_xmlprint+0x1d0>  // b.any
 194:	adrp	x0, 0 <fprint_xml_esc>
 198:	add	x0, x0, #0x0
 19c:	ldr	w1, [x0]
 1a0:	ldrh	w0, [x0, #4]
 1a4:	str	w1, [sp, #64]
 1a8:	strh	w0, [sp, #68]
 1ac:	ldr	x21, [x20, #8]
 1b0:	cbz	x21, 35c <tr_xmlprint+0x1f4>
 1b4:	mov	x0, x21
 1b8:	mov	w1, #0x2f                  	// #47
 1bc:	str	x23, [sp, #48]
 1c0:	bl	0 <strrchr>
 1c4:	mov	x23, x0
 1c8:	cbz	x0, 394 <tr_xmlprint+0x22c>
 1cc:	mov	x0, x21
 1d0:	bl	0 <strdup>
 1d4:	sub	x1, x23, x21
 1d8:	mov	x22, x0
 1dc:	add	x21, x23, #0x1
 1e0:	strb	wzr, [x0, x1]
 1e4:	add	x2, sp, #0x40
 1e8:	mov	x0, x19
 1ec:	adrp	x1, 0 <fprint_xml_esc>
 1f0:	add	x1, x1, #0x0
 1f4:	bl	0 <fprintf>
 1f8:	cmp	x22, #0x0
 1fc:	adrp	x2, 0 <fprint_xml_esc>
 200:	add	x2, x2, #0x0
 204:	mov	x0, x19
 208:	csel	x2, x2, x22, eq  // eq = none
 20c:	adrp	x1, 0 <fprint_xml_esc>
 210:	add	x1, x1, #0x0
 214:	bl	0 <fprintf>
 218:	ldr	x23, [sp, #48]
 21c:	mov	x2, x21
 220:	ldr	w3, [x20, #16]
 224:	mov	x0, x19
 228:	adrp	x1, 0 <fprint_xml_esc>
 22c:	add	x1, x1, #0x0
 230:	bl	0 <fprintf>
 234:	ldr	x2, [x20, #40]
 238:	mov	x0, x19
 23c:	adrp	x1, 0 <fprint_xml_esc>
 240:	add	x1, x1, #0x0
 244:	bl	0 <fprintf>
 248:	ldr	w2, [x20, #20]
 24c:	mov	x0, x19
 250:	adrp	x1, 0 <fprint_xml_esc>
 254:	add	x1, x1, #0x0
 258:	bl	0 <fprintf>
 25c:	ldr	w3, [x20, #24]
 260:	tbnz	w3, #31, 3bc <tr_xmlprint+0x254>
 264:	mov	w2, #0xde83                	// #56963
 268:	mov	w0, #0x4240                	// #16960
 26c:	movk	w2, #0x431b, lsl #16
 270:	movk	w0, #0xf, lsl #16
 274:	smull	x2, w3, w2
 278:	asr	x2, x2, #50
 27c:	sub	w2, w2, w3, asr #31
 280:	msub	w3, w2, w0, w3
 284:	mov	x0, x19
 288:	adrp	x1, 0 <fprint_xml_esc>
 28c:	add	x1, x1, #0x0
 290:	bl	0 <fprintf>
 294:	mov	x3, x19
 298:	mov	x2, #0x13                  	// #19
 29c:	mov	x1, #0x1                   	// #1
 2a0:	adrp	x0, 0 <fprint_xml_esc>
 2a4:	add	x0, x0, #0x0
 2a8:	bl	0 <fwrite>
 2ac:	ldr	x1, [x20, #32]
 2b0:	mov	x0, x19
 2b4:	bl	0 <fprint_xml_esc>
 2b8:	mov	x3, x19
 2bc:	mov	x2, #0xf                   	// #15
 2c0:	mov	x1, #0x1                   	// #1
 2c4:	adrp	x0, 0 <fprint_xml_esc>
 2c8:	add	x0, x0, #0x0
 2cc:	bl	0 <fwrite>
 2d0:	mov	x3, x19
 2d4:	mov	x2, #0xf                   	// #15
 2d8:	mov	x1, #0x1                   	// #1
 2dc:	adrp	x0, 0 <fprint_xml_esc>
 2e0:	add	x0, x0, #0x0
 2e4:	bl	0 <fwrite>
 2e8:	ldr	x1, [x20, #48]
 2ec:	mov	x0, x19
 2f0:	bl	0 <fprint_xml_esc>
 2f4:	mov	x3, x19
 2f8:	mov	x2, #0xb                   	// #11
 2fc:	mov	x1, #0x1                   	// #1
 300:	adrp	x0, 0 <fprint_xml_esc>
 304:	add	x0, x0, #0x0
 308:	bl	0 <fwrite>
 30c:	mov	x3, x19
 310:	mov	x2, #0xc                   	// #12
 314:	mov	x1, #0x1                   	// #1
 318:	adrp	x0, 0 <fprint_xml_esc>
 31c:	add	x0, x0, #0x0
 320:	bl	0 <fwrite>
 324:	mov	x0, x22
 328:	ldp	x19, x20, [sp, #16]
 32c:	ldp	x21, x22, [sp, #32]
 330:	ldp	x29, x30, [sp], #80
 334:	b	0 <free>
 338:	cmp	w0, #0x1
 33c:	b.ne	3e0 <tr_xmlprint+0x278>  // b.any
 340:	mov	x0, #0x7573                	// #30067
 344:	movk	x0, #0x6363, lsl #16
 348:	ldr	x21, [x20, #8]
 34c:	movk	x0, #0x7365, lsl #32
 350:	movk	x0, #0x73, lsl #48
 354:	str	x0, [sp, #64]
 358:	cbnz	x21, 1b4 <tr_xmlprint+0x4c>
 35c:	add	x2, sp, #0x40
 360:	mov	x0, x19
 364:	adrp	x1, 0 <fprint_xml_esc>
 368:	add	x1, x1, #0x0
 36c:	bl	0 <fprintf>
 370:	mov	x22, #0x0                   	// #0
 374:	adrp	x2, 0 <fprint_xml_esc>
 378:	add	x2, x2, #0x0
 37c:	mov	x21, x2
 380:	mov	x0, x19
 384:	adrp	x1, 0 <fprint_xml_esc>
 388:	add	x1, x1, #0x0
 38c:	bl	0 <fprintf>
 390:	b	21c <tr_xmlprint+0xb4>
 394:	mov	x0, x21
 398:	mov	w1, #0x5c                  	// #92
 39c:	bl	0 <strrchr>
 3a0:	mov	x23, x0
 3a4:	cbnz	x0, 1cc <tr_xmlprint+0x64>
 3a8:	adrp	x0, 0 <fprint_xml_esc>
 3ac:	add	x0, x0, #0x0
 3b0:	bl	0 <strdup>
 3b4:	mov	x22, x0
 3b8:	b	1e4 <tr_xmlprint+0x7c>
 3bc:	mov	w2, #0xffffffff            	// #-1
 3c0:	mov	w3, #0x0                   	// #0
 3c4:	b	284 <tr_xmlprint+0x11c>
 3c8:	mov	x0, #0x6166                	// #24934
 3cc:	movk	x0, #0x6c69, lsl #16
 3d0:	movk	x0, #0x7275, lsl #32
 3d4:	movk	x0, #0x65, lsl #48
 3d8:	str	x0, [sp, #64]
 3dc:	b	1ac <tr_xmlprint+0x44>
 3e0:	str	x23, [sp, #48]
 3e4:	bl	0 <abort>

00000000000003e8 <get_env_printmode>:
 3e8:	stp	x29, x30, [sp, #-32]!
 3ec:	adrp	x0, 0 <fprint_xml_esc>
 3f0:	add	x0, x0, #0x0
 3f4:	mov	x29, sp
 3f8:	bl	0 <getenv>
 3fc:	cbz	x0, 470 <get_env_printmode+0x88>
 400:	adrp	x1, 0 <fprint_xml_esc>
 404:	add	x1, x1, #0x0
 408:	str	x19, [sp, #16]
 40c:	mov	x19, x0
 410:	bl	0 <strcmp>
 414:	mov	w1, #0x0                   	// #0
 418:	cbz	w0, 460 <get_env_printmode+0x78>
 41c:	mov	x0, x19
 420:	adrp	x1, 0 <fprint_xml_esc>
 424:	add	x1, x1, #0x0
 428:	bl	0 <strcmp>
 42c:	mov	w1, #0x1                   	// #1
 430:	cbz	w0, 460 <get_env_printmode+0x78>
 434:	mov	x0, x19
 438:	adrp	x1, 0 <fprint_xml_esc>
 43c:	add	x1, x1, #0x0
 440:	bl	0 <strcmp>
 444:	cmp	w0, #0x0
 448:	cset	w1, eq  // eq = none
 44c:	add	w1, w1, #0x2
 450:	mov	w0, w1
 454:	ldr	x19, [sp, #16]
 458:	ldp	x29, x30, [sp], #32
 45c:	ret
 460:	mov	w0, w1
 464:	ldr	x19, [sp, #16]
 468:	ldp	x29, x30, [sp], #32
 46c:	ret
 470:	mov	w1, #0x2                   	// #2
 474:	mov	w0, w1
 478:	ldp	x29, x30, [sp], #32
 47c:	ret

0000000000000480 <tr_fprint>:
 480:	stp	x29, x30, [sp, #-32]!
 484:	cmp	w2, #0x4
 488:	mov	x29, sp
 48c:	stp	x19, x20, [sp, #16]
 490:	mov	x20, x0
 494:	mov	x19, x1
 498:	b.eq	4f0 <tr_fprint+0x70>  // b.none
 49c:	cmp	w2, #0x2
 4a0:	b.hi	4c0 <tr_fprint+0x40>  // b.pmore
 4a4:	ldr	w0, [x19]
 4a8:	cmp	w0, #0x1
 4ac:	ccmp	w2, #0x2, #0x0, ne  // ne = any
 4b0:	b.eq	4c0 <tr_fprint+0x40>  // b.none
 4b4:	ldp	x19, x20, [sp, #16]
 4b8:	ldp	x29, x30, [sp], #32
 4bc:	ret
 4c0:	mov	x0, x19
 4c4:	bl	0 <tr_str>
 4c8:	mov	x19, x0
 4cc:	adrp	x1, 0 <fprint_xml_esc>
 4d0:	mov	x2, x19
 4d4:	mov	x0, x20
 4d8:	add	x1, x1, #0x0
 4dc:	bl	0 <fprintf>
 4e0:	mov	x0, x19
 4e4:	ldp	x19, x20, [sp, #16]
 4e8:	ldp	x29, x30, [sp], #32
 4ec:	b	0 <free>
 4f0:	bl	3e8 <get_env_printmode>
 4f4:	mov	w2, w0
 4f8:	b	49c <tr_fprint+0x1c>
 4fc:	nop

0000000000000500 <srunner_fprint>:
 500:	stp	x29, x30, [sp, #-48]!
 504:	cmp	w2, #0x4
 508:	mov	x29, sp
 50c:	stp	x19, x20, [sp, #16]
 510:	mov	w19, w2
 514:	mov	x20, x1
 518:	stp	x21, x22, [sp, #32]
 51c:	mov	x21, x0
 520:	b.eq	578 <srunner_fprint+0x78>  // b.none
 524:	cbnz	w19, 584 <srunner_fprint+0x84>
 528:	ldr	x20, [x20, #16]
 52c:	mov	x0, x20
 530:	bl	0 <check_list_front>
 534:	b	554 <srunner_fprint+0x54>
 538:	bl	0 <check_list_val>
 53c:	mov	x1, x0
 540:	mov	w2, w19
 544:	mov	x0, x21
 548:	bl	480 <tr_fprint>
 54c:	mov	x0, x20
 550:	bl	0 <check_list_advance>
 554:	mov	x0, x20
 558:	bl	0 <check_list_at_end>
 55c:	mov	w1, w0
 560:	mov	x0, x20
 564:	cbz	w1, 538 <srunner_fprint+0x38>
 568:	ldp	x19, x20, [sp, #16]
 56c:	ldp	x21, x22, [sp, #32]
 570:	ldp	x29, x30, [sp], #48
 574:	ret
 578:	bl	3e8 <get_env_printmode>
 57c:	mov	w19, w0
 580:	cbz	w19, 528 <srunner_fprint+0x28>
 584:	mov	x0, x20
 588:	bl	0 <sr_stat_str>
 58c:	adrp	x1, 0 <fprint_xml_esc>
 590:	mov	x2, x0
 594:	add	x1, x1, #0x0
 598:	mov	x22, x0
 59c:	mov	x0, x21
 5a0:	bl	0 <fprintf>
 5a4:	mov	x0, x22
 5a8:	bl	0 <free>
 5ac:	b	528 <srunner_fprint+0x28>

00000000000005b0 <srunner_print>:
 5b0:	adrp	x3, 0 <stdout>
 5b4:	mov	w2, w1
 5b8:	mov	x1, x0
 5bc:	ldr	x0, [x3]
 5c0:	b	500 <srunner_fprint>

check_run.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <srunner_run_teardown>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #16]
       c:	str	w1, [sp, #28]
      10:	bl	0 <check_list_front>
      14:	adrp	x0, 0 <error_jmp_buffer>
      18:	add	x0, x0, #0x0
      1c:	str	x0, [sp, #32]
      20:	ldr	x0, [sp, #16]
      24:	bl	0 <check_list_at_end>
      28:	cbz	w0, 34 <srunner_run_teardown+0x34>
      2c:	ldp	x29, x30, [sp], #48
      30:	ret
      34:	ldr	x0, [sp, #16]
      38:	bl	0 <check_list_val>
      3c:	mov	x1, x0
      40:	mov	w0, #0x3                   	// #3
      44:	str	x1, [sp, #40]
      48:	bl	0 <send_ctx_info>
      4c:	ldr	w0, [sp, #28]
      50:	cmp	w0, #0x2
      54:	b.eq	70 <srunner_run_teardown+0x70>  // b.none
      58:	ldr	x0, [sp, #40]
      5c:	ldr	x0, [x0, #8]
      60:	blr	x0
      64:	ldr	x0, [sp, #16]
      68:	bl	0 <check_list_advance>
      6c:	b	20 <srunner_run_teardown+0x20>
      70:	ldr	x0, [sp, #32]
      74:	bl	0 <_setjmp>
      78:	cbnz	w0, 2c <srunner_run_teardown+0x2c>
      7c:	b	58 <srunner_run_teardown+0x58>

0000000000000080 <signal_error_msg>:
      80:	stp	x29, x30, [sp, #-64]!
      84:	mov	x29, sp
      88:	stp	x19, x20, [sp, #16]
      8c:	stp	x21, x22, [sp, #32]
      90:	mov	w21, w1
      94:	str	x23, [sp, #48]
      98:	mov	w23, w0
      9c:	mov	x0, #0x64                  	// #100
      a0:	bl	0 <emalloc>
      a4:	mov	x19, x0
      a8:	mov	w0, w23
      ac:	bl	0 <strsignal>
      b0:	bl	0 <strdup>
      b4:	mov	x22, x0
      b8:	mov	w0, w21
      bc:	bl	0 <strsignal>
      c0:	bl	0 <strdup>
      c4:	mov	x20, x0
      c8:	adrp	x1, 0 <srunner_run_teardown>
      cc:	ldr	w0, [x1]
      d0:	cbz	w0, 118 <signal_error_msg+0x98>
      d4:	adrp	x2, 0 <srunner_run_teardown>
      d8:	mov	w3, w21
      dc:	mov	x4, x20
      e0:	add	x2, x2, #0x0
      e4:	mov	x0, x19
      e8:	mov	x1, #0x64                  	// #100
      ec:	bl	0 <snprintf>
      f0:	mov	x0, x22
      f4:	bl	0 <free>
      f8:	mov	x0, x20
      fc:	bl	0 <free>
     100:	mov	x0, x19
     104:	ldp	x19, x20, [sp, #16]
     108:	ldp	x21, x22, [sp, #32]
     10c:	ldr	x23, [sp, #48]
     110:	ldp	x29, x30, [sp], #64
     114:	ret
     118:	mov	w5, w21
     11c:	mov	w3, w23
     120:	mov	x6, x20
     124:	mov	x4, x22
     128:	mov	x0, x19
     12c:	adrp	x2, 0 <srunner_run_teardown>
     130:	mov	x1, #0x64                  	// #100
     134:	add	x2, x2, #0x0
     138:	bl	0 <snprintf>
     13c:	b	f0 <signal_error_msg+0x70>

0000000000000140 <sig_handler>:
     140:	cmp	w0, #0xe
     144:	b.eq	184 <sig_handler+0x44>  // b.none
     148:	stp	x29, x30, [sp, #-32]!
     14c:	cmp	w0, #0xf
     150:	mov	x29, sp
     154:	stp	x19, x20, [sp, #16]
     158:	mov	w19, w0
     15c:	b.eq	1a0 <sig_handler+0x60>  // b.none
     160:	cmp	w0, #0x2
     164:	b.eq	1d4 <sig_handler+0x94>  // b.none
     168:	mov	w3, w0
     16c:	adrp	x1, 0 <srunner_run_teardown>
     170:	adrp	x0, 0 <srunner_run_teardown>
     174:	add	x1, x1, #0x0
     178:	add	x0, x0, #0x0
     17c:	mov	w2, #0x8e                  	// #142
     180:	bl	0 <eprintf>
     184:	adrp	x0, 0 <srunner_run_teardown>
     188:	add	x2, x0, #0x0
     18c:	mov	w3, #0x1                   	// #1
     190:	mov	w1, #0x9                   	// #9
     194:	str	w3, [x0]
     198:	ldr	w0, [x2, #4]
     19c:	b	0 <killpg>
     1a0:	adrp	x20, 0 <srunner_run_teardown>
     1a4:	add	x20, x20, #0x0
     1a8:	mov	x2, #0x0                   	// #0
     1ac:	add	x1, x20, #0xa0
     1b0:	bl	0 <sigaction>
     1b4:	ldr	w0, [x20, #4]
     1b8:	mov	w1, w19
     1bc:	bl	0 <killpg>
     1c0:	bl	0 <getpgrp>
     1c4:	mov	w1, w19
     1c8:	ldp	x19, x20, [sp, #16]
     1cc:	ldp	x29, x30, [sp], #32
     1d0:	b	0 <killpg>
     1d4:	adrp	x20, 0 <srunner_run_teardown>
     1d8:	add	x20, x20, #0x0
     1dc:	mov	x2, #0x0                   	// #0
     1e0:	add	x1, x20, #0x8
     1e4:	bl	0 <sigaction>
     1e8:	ldr	w0, [x20, #4]
     1ec:	mov	w1, #0x9                   	// #9
     1f0:	bl	0 <killpg>
     1f4:	bl	0 <getpgrp>
     1f8:	mov	w1, w19
     1fc:	ldp	x19, x20, [sp, #16]
     200:	ldp	x29, x30, [sp], #32
     204:	b	0 <killpg>

0000000000000208 <receive_result_info_nofork>:
     208:	stp	x29, x30, [sp, #-64]!
     20c:	mov	x29, sp
     210:	stp	x19, x20, [sp, #16]
     214:	mov	x20, x1
     218:	stp	x21, x22, [sp, #32]
     21c:	mov	x21, x0
     220:	mov	w22, w3
     224:	mov	w0, #0x0                   	// #0
     228:	str	x23, [sp, #48]
     22c:	mov	w23, w2
     230:	bl	0 <receive_test_result>
     234:	cbz	x0, 29c <receive_result_info_nofork+0x94>
     238:	mov	x19, x0
     23c:	ldr	x0, [x0, #48]
     240:	stp	w23, w22, [x19, #20]
     244:	stp	x21, x20, [x19, #32]
     248:	cbz	x0, 26c <receive_result_info_nofork+0x64>
     24c:	mov	w0, #0x2                   	// #2
     250:	str	w0, [x19]
     254:	mov	x0, x19
     258:	ldp	x19, x20, [sp, #16]
     25c:	ldp	x21, x22, [sp, #32]
     260:	ldr	x23, [sp, #48]
     264:	ldp	x29, x30, [sp], #64
     268:	ret
     26c:	mov	w0, #0x1                   	// #1
     270:	str	w0, [x19]
     274:	adrp	x0, 0 <srunner_run_teardown>
     278:	add	x0, x0, #0x0
     27c:	bl	0 <strdup>
     280:	str	x0, [x19, #48]
     284:	mov	x0, x19
     288:	ldp	x19, x20, [sp, #16]
     28c:	ldp	x21, x22, [sp, #32]
     290:	ldr	x23, [sp, #48]
     294:	ldp	x29, x30, [sp], #64
     298:	ret
     29c:	adrp	x1, 0 <srunner_run_teardown>
     2a0:	adrp	x0, 0 <srunner_run_teardown>
     2a4:	add	x1, x1, #0x0
     2a8:	add	x0, x0, #0x0
     2ac:	mov	w2, #0x1b8                 	// #440
     2b0:	bl	0 <eprintf>
     2b4:	nop

00000000000002b8 <srunner_run_setup>:
     2b8:	stp	x29, x30, [sp, #-80]!
     2bc:	cmp	w1, #0x1
     2c0:	mov	x29, sp
     2c4:	str	x19, [sp, #16]
     2c8:	str	x0, [sp, #32]
     2cc:	str	w1, [sp, #44]
     2d0:	stp	x2, x3, [sp, #48]
     2d4:	b.ne	2e0 <srunner_run_setup+0x28>  // b.any
     2d8:	ldr	w0, [sp, #44]
     2dc:	bl	0 <send_ctx_info>
     2e0:	ldr	x0, [sp, #32]
     2e4:	bl	0 <check_list_front>
     2e8:	ldr	x19, [sp, #32]
     2ec:	adrp	x0, 0 <error_jmp_buffer>
     2f0:	add	x0, x0, #0x0
     2f4:	str	x0, [sp, #64]
     2f8:	mov	x0, x19
     2fc:	bl	0 <check_list_at_end>
     300:	mov	w1, w0
     304:	mov	x0, x19
     308:	cbnz	w1, 34c <srunner_run_setup+0x94>
     30c:	bl	0 <check_list_val>
     310:	str	x0, [sp, #72]
     314:	ldr	w0, [sp, #44]
     318:	cmp	w0, #0x2
     31c:	b.eq	360 <srunner_run_setup+0xa8>  // b.none
     320:	ldr	x0, [sp, #72]
     324:	ldr	x0, [x0, #8]
     328:	blr	x0
     32c:	ldr	x0, [sp, #32]
     330:	bl	0 <check_list_advance>
     334:	ldr	x19, [sp, #32]
     338:	mov	x0, x19
     33c:	bl	0 <check_list_at_end>
     340:	mov	w1, w0
     344:	mov	x0, x19
     348:	cbz	w1, 30c <srunner_run_setup+0x54>
     34c:	mov	x19, #0x0                   	// #0
     350:	mov	x0, x19
     354:	ldr	x19, [sp, #16]
     358:	ldp	x29, x30, [sp], #80
     35c:	ret
     360:	mov	w0, #0x1                   	// #1
     364:	bl	0 <send_ctx_info>
     368:	ldr	x0, [sp, #64]
     36c:	bl	0 <_setjmp>
     370:	cbnz	w0, 380 <srunner_run_setup+0xc8>
     374:	ldr	x0, [sp, #72]
     378:	ldr	x0, [x0, #8]
     37c:	blr	x0
     380:	ldp	x0, x1, [sp, #48]
     384:	mov	w3, #0xffffffff            	// #-1
     388:	mov	w2, #0x0                   	// #0
     38c:	bl	208 <receive_result_info_nofork>
     390:	mov	x19, x0
     394:	ldr	w0, [x0]
     398:	cmp	w0, #0x1
     39c:	b.ne	350 <srunner_run_setup+0x98>  // b.any
     3a0:	ldr	x0, [x19, #8]
     3a4:	bl	0 <free>
     3a8:	ldr	x0, [x19, #48]
     3ac:	bl	0 <free>
     3b0:	mov	x0, x19
     3b4:	bl	0 <free>
     3b8:	b	32c <srunner_run_setup+0x74>
     3bc:	nop

00000000000003c0 <srunner_add_failure.isra.0>:
     3c0:	stp	x29, x30, [sp, #-32]!
     3c4:	mov	x29, sp
     3c8:	stp	x19, x20, [sp, #16]
     3cc:	mov	x20, x0
     3d0:	mov	x19, x2
     3d4:	mov	x0, x1
     3d8:	mov	x1, x2
     3dc:	bl	0 <check_list_add_end>
     3e0:	ldr	x0, [x20]
     3e4:	ldr	w2, [x19]
     3e8:	ldr	w1, [x0]
     3ec:	cmp	w2, #0x2
     3f0:	add	w1, w1, #0x1
     3f4:	str	w1, [x0]
     3f8:	b.eq	428 <srunner_add_failure.isra.0+0x68>  // b.none
     3fc:	cmp	w2, #0x3
     400:	b.eq	410 <srunner_add_failure.isra.0+0x50>  // b.none
     404:	ldp	x19, x20, [sp, #16]
     408:	ldp	x29, x30, [sp], #32
     40c:	ret
     410:	ldr	w1, [x0, #8]
     414:	ldp	x19, x20, [sp, #16]
     418:	add	w1, w1, #0x1
     41c:	str	w1, [x0, #8]
     420:	ldp	x29, x30, [sp], #32
     424:	ret
     428:	ldr	w1, [x0, #4]
     42c:	ldp	x19, x20, [sp, #16]
     430:	add	w1, w1, #0x1
     434:	str	w1, [x0, #4]
     438:	ldp	x29, x30, [sp], #32
     43c:	ret

0000000000000440 <srunner_fork_status.part.0>:
     440:	stp	x29, x30, [sp, #-16]!
     444:	adrp	x0, 0 <srunner_run_teardown>
     448:	add	x0, x0, #0x0
     44c:	mov	x29, sp
     450:	bl	0 <getenv>
     454:	cbz	x0, 464 <srunner_fork_status.part.0+0x24>
     458:	ldrb	w1, [x0]
     45c:	cmp	w1, #0x6e
     460:	b.eq	470 <srunner_fork_status.part.0+0x30>  // b.none
     464:	mov	w0, #0x1                   	// #1
     468:	ldp	x29, x30, [sp], #16
     46c:	ret
     470:	ldrb	w1, [x0, #1]
     474:	cmp	w1, #0x6f
     478:	b.ne	464 <srunner_fork_status.part.0+0x24>  // b.any
     47c:	ldrb	w0, [x0, #2]
     480:	cbnz	w0, 464 <srunner_fork_status.part.0+0x24>
     484:	mov	w0, #0x2                   	// #2
     488:	ldp	x29, x30, [sp], #16
     48c:	ret

0000000000000490 <tcase_run_tfun_nofork.isra.0>:
     490:	stp	x29, x30, [sp, #-96]!
     494:	mov	x4, x1
     498:	mov	x29, sp
     49c:	stp	x1, x2, [sp, #40]
     4a0:	ldr	w1, [x0, #56]
     4a4:	str	x19, [sp, #16]
     4a8:	str	w3, [sp, #60]
     4ac:	stp	xzr, xzr, [sp, #64]
     4b0:	stp	xzr, xzr, [sp, #80]
     4b4:	ldr	x19, [x4, #48]
     4b8:	cbz	w1, 4e4 <tcase_run_tfun_nofork.isra.0+0x54>
     4bc:	ldr	x0, [sp, #40]
     4c0:	adrp	x3, 0 <srunner_run_teardown>
     4c4:	add	x3, x3, #0x0
     4c8:	ldr	x2, [x0]
     4cc:	mov	x0, x19
     4d0:	bl	2b8 <srunner_run_setup>
     4d4:	cbz	x0, 4f0 <tcase_run_tfun_nofork.isra.0+0x60>
     4d8:	ldr	x19, [sp, #16]
     4dc:	ldp	x29, x30, [sp], #96
     4e0:	ret
     4e4:	bl	440 <srunner_fork_status.part.0>
     4e8:	mov	w1, w0
     4ec:	b	4bc <tcase_run_tfun_nofork.isra.0+0x2c>
     4f0:	bl	0 <check_get_clockid>
     4f4:	add	x1, sp, #0x40
     4f8:	bl	0 <clock_gettime>
     4fc:	adrp	x0, 0 <error_jmp_buffer>
     500:	add	x0, x0, #0x0
     504:	bl	0 <_setjmp>
     508:	cbz	w0, 588 <tcase_run_tfun_nofork.isra.0+0xf8>
     50c:	bl	0 <check_get_clockid>
     510:	add	x1, sp, #0x50
     514:	bl	0 <clock_gettime>
     518:	ldr	x19, [sp, #40]
     51c:	mov	w1, #0x2                   	// #2
     520:	ldr	x0, [x19, #56]
     524:	bl	0 <srunner_run_teardown>
     528:	ldp	x8, x5, [sp, #64]
     52c:	mov	x4, #0xf7cf                	// #63439
     530:	ldp	x3, x0, [sp, #80]
     534:	movk	x4, #0xe353, lsl #16
     538:	movk	x4, #0x9ba5, lsl #32
     53c:	mov	w7, #0x4240                	// #16960
     540:	movk	x4, #0x20c4, lsl #48
     544:	movk	w7, #0xf, lsl #16
     548:	asr	x1, x5, #63
     54c:	ldr	w2, [sp, #60]
     550:	smulh	x6, x0, x4
     554:	sub	x3, x3, x8
     558:	smulh	x4, x5, x4
     55c:	asr	x6, x6, #7
     560:	sub	x1, x1, x4, asr #7
     564:	sub	x0, x6, x0, asr #63
     568:	ldr	x4, [sp, #48]
     56c:	add	w1, w0, w1
     570:	ldr	x0, [x19]
     574:	ldr	x4, [x4]
     578:	madd	w3, w7, w3, w1
     57c:	ldr	x1, [x4]
     580:	bl	208 <receive_result_info_nofork>
     584:	b	4d8 <tcase_run_tfun_nofork.isra.0+0x48>
     588:	ldr	x19, [sp, #48]
     58c:	ldr	x2, [x19]
     590:	ldr	x0, [x2]
     594:	ldr	x1, [x2, #16]
     598:	ldr	w2, [x2, #24]
     59c:	bl	0 <tcase_fn_start>
     5a0:	ldr	x1, [x19]
     5a4:	ldr	w0, [sp, #60]
     5a8:	ldr	x1, [x1, #8]
     5ac:	blr	x1
     5b0:	b	50c <tcase_run_tfun_nofork.isra.0+0x7c>
     5b4:	nop

00000000000005b8 <srunner_fork_status>:
     5b8:	ldr	w0, [x0, #56]
     5bc:	cbz	w0, 5c4 <srunner_fork_status+0xc>
     5c0:	ret
     5c4:	b	440 <srunner_fork_status.part.0>

00000000000005c8 <srunner_set_fork_status>:
     5c8:	str	w1, [x0, #56]
     5cc:	ret

00000000000005d0 <srunner_run_tagged>:
     5d0:	stp	x29, x30, [sp, #-288]!
     5d4:	mov	x29, sp
     5d8:	stp	x19, x20, [sp, #16]
     5dc:	mov	x19, x0
     5e0:	stp	x21, x22, [sp, #32]
     5e4:	mov	w21, w5
     5e8:	mov	x22, x2
     5ec:	stp	x3, x4, [sp, #104]
     5f0:	str	x1, [sp, #120]
     5f4:	cbz	x2, db4 <srunner_run_tagged+0x7e4>
     5f8:	ldr	x0, [sp, #120]
     5fc:	cbz	x0, dd0 <srunner_run_tagged+0x800>
     600:	ldr	x0, [sp, #104]
     604:	cbz	x0, da0 <srunner_run_tagged+0x7d0>
     608:	ldr	x0, [sp, #112]
     60c:	cbz	x0, ccc <srunner_run_tagged+0x6fc>
     610:	cbz	x19, 814 <srunner_run_tagged+0x244>
     614:	stp	x23, x24, [sp, #48]
     618:	cmp	w21, #0x4
     61c:	stp	x25, x26, [sp, #64]
     620:	stp	x27, x28, [sp, #80]
     624:	b.hi	ef8 <srunner_run_tagged+0x928>  // b.pmore
     628:	adrp	x20, 0 <srunner_run_teardown>
     62c:	add	x20, x20, #0x0
     630:	add	x2, x20, #0x1d0
     634:	add	x1, x20, #0x138
     638:	adrp	x23, 0 <srunner_run_teardown>
     63c:	mov	w0, #0xe                   	// #14
     640:	add	x23, x23, #0x0
     644:	str	x23, [x20, #312]
     648:	stp	xzr, xzr, [x20, #320]
     64c:	stp	xzr, xzr, [x20, #336]
     650:	stp	xzr, xzr, [x20, #352]
     654:	stp	xzr, xzr, [x20, #368]
     658:	stp	xzr, xzr, [x20, #384]
     65c:	stp	xzr, xzr, [x20, #400]
     660:	stp	xzr, xzr, [x20, #416]
     664:	stp	xzr, xzr, [x20, #432]
     668:	stp	xzr, xzr, [x20, #448]
     66c:	bl	0 <sigaction>
     670:	add	x3, x20, #0x270
     674:	add	x2, x20, #0x8
     678:	add	x1, x20, #0x268
     67c:	mov	w0, #0x2                   	// #2
     680:	str	x23, [x20, #616]
     684:	stp	xzr, xzr, [x3]
     688:	stp	xzr, xzr, [x3, #16]
     68c:	stp	xzr, xzr, [x3, #32]
     690:	stp	xzr, xzr, [x3, #48]
     694:	stp	xzr, xzr, [x3, #64]
     698:	stp	xzr, xzr, [x3, #80]
     69c:	stp	xzr, xzr, [x3, #96]
     6a0:	stp	xzr, xzr, [x3, #112]
     6a4:	stp	xzr, xzr, [x3, #128]
     6a8:	bl	0 <sigaction>
     6ac:	str	x23, [x20, #768]
     6b0:	add	x3, x20, #0x308
     6b4:	add	x2, x20, #0xa0
     6b8:	add	x1, x20, #0x300
     6bc:	mov	w0, #0xf                   	// #15
     6c0:	stp	xzr, xzr, [x3]
     6c4:	stp	xzr, xzr, [x3, #16]
     6c8:	stp	xzr, xzr, [x3, #32]
     6cc:	stp	xzr, xzr, [x3, #48]
     6d0:	stp	xzr, xzr, [x3, #64]
     6d4:	stp	xzr, xzr, [x3, #80]
     6d8:	stp	xzr, xzr, [x3, #96]
     6dc:	stp	xzr, xzr, [x3, #112]
     6e0:	stp	xzr, xzr, [x3, #128]
     6e4:	bl	0 <sigaction>
     6e8:	ldr	w0, [x19, #56]
     6ec:	cbz	w0, cc4 <srunner_run_tagged+0x6f4>
     6f0:	bl	0 <set_fork_status>
     6f4:	bl	0 <setup_messaging>
     6f8:	mov	w1, w21
     6fc:	mov	x0, x19
     700:	bl	0 <srunner_init_logging>
     704:	mov	x0, x19
     708:	bl	0 <log_srunner_start>
     70c:	ldr	x0, [sp, #104]
     710:	ldr	x28, [x19]
     714:	bl	0 <tag_string_to_list>
     718:	str	x0, [sp, #128]
     71c:	ldr	x0, [sp, #112]
     720:	bl	0 <tag_string_to_list>
     724:	str	x0, [sp, #136]
     728:	mov	x0, x28
     72c:	bl	0 <check_list_front>
     730:	mov	x0, x28
     734:	bl	0 <check_list_at_end>
     738:	cbnz	w0, 784 <srunner_run_tagged+0x1b4>
     73c:	mov	x0, x28
     740:	bl	0 <check_list_val>
     744:	mov	x24, x0
     748:	ldr	x0, [sp, #120]
     74c:	cbz	x0, 75c <srunner_run_tagged+0x18c>
     750:	ldr	x1, [x24]
     754:	bl	0 <strcmp>
     758:	cbnz	w0, 770 <srunner_run_tagged+0x1a0>
     75c:	cbz	x22, 824 <srunner_run_tagged+0x254>
     760:	mov	x1, x22
     764:	mov	x0, x24
     768:	bl	0 <suite_tcase>
     76c:	cbnz	w0, 824 <srunner_run_tagged+0x254>
     770:	mov	x0, x28
     774:	bl	0 <check_list_advance>
     778:	mov	x0, x28
     77c:	bl	0 <check_list_at_end>
     780:	cbz	w0, 73c <srunner_run_tagged+0x16c>
     784:	ldr	x22, [sp, #128]
     788:	adrp	x21, 0 <free>
     78c:	add	x21, x21, #0x0
     790:	mov	x1, x21
     794:	mov	x0, x22
     798:	bl	0 <check_list_apply>
     79c:	mov	x1, x21
     7a0:	ldr	x21, [sp, #136]
     7a4:	mov	x0, x21
     7a8:	bl	0 <check_list_apply>
     7ac:	mov	x0, x22
     7b0:	bl	0 <check_list_free>
     7b4:	mov	x0, x21
     7b8:	bl	0 <check_list_free>
     7bc:	mov	x0, x19
     7c0:	bl	0 <log_srunner_end>
     7c4:	mov	x0, x19
     7c8:	bl	0 <srunner_end_logging>
     7cc:	bl	0 <teardown_messaging>
     7d0:	mov	w0, #0x1                   	// #1
     7d4:	bl	0 <set_fork_status>
     7d8:	add	x1, x20, #0x1d0
     7dc:	mov	x2, #0x0                   	// #0
     7e0:	mov	w0, #0xe                   	// #14
     7e4:	bl	0 <sigaction>
     7e8:	add	x1, x20, #0x8
     7ec:	mov	x2, #0x0                   	// #0
     7f0:	mov	w0, #0x2                   	// #2
     7f4:	bl	0 <sigaction>
     7f8:	add	x1, x20, #0xa0
     7fc:	mov	x2, #0x0                   	// #0
     800:	mov	w0, #0xf                   	// #15
     804:	bl	0 <sigaction>
     808:	ldp	x23, x24, [sp, #48]
     80c:	ldp	x25, x26, [sp, #64]
     810:	ldp	x27, x28, [sp, #80]
     814:	ldp	x19, x20, [sp, #16]
     818:	ldp	x21, x22, [sp, #32]
     81c:	ldp	x29, x30, [sp], #288
     820:	ret
     824:	mov	x1, x24
     828:	mov	x0, x19
     82c:	bl	0 <log_suite_start>
     830:	ldr	x27, [x24, #8]
     834:	mov	x0, x27
     838:	bl	0 <check_list_front>
     83c:	mov	x0, x27
     840:	bl	0 <check_list_at_end>
     844:	cbnz	w0, 8fc <srunner_run_tagged+0x32c>
     848:	mov	x0, x27
     84c:	bl	0 <check_list_val>
     850:	mov	x21, x0
     854:	cbz	x22, 868 <srunner_run_tagged+0x298>
     858:	ldr	x1, [x21]
     85c:	mov	x0, x22
     860:	bl	0 <strcmp>
     864:	cbnz	w0, 8e8 <srunner_run_tagged+0x318>
     868:	ldr	x0, [sp, #104]
     86c:	cbz	x0, 880 <srunner_run_tagged+0x2b0>
     870:	ldr	x1, [sp, #128]
     874:	mov	x0, x21
     878:	bl	0 <tcase_matching_tag>
     87c:	cbz	w0, 8e8 <srunner_run_tagged+0x318>
     880:	ldr	x0, [sp, #112]
     884:	cbz	x0, 898 <srunner_run_tagged+0x2c8>
     888:	ldr	x1, [sp, #136]
     88c:	mov	x0, x21
     890:	bl	0 <tcase_matching_tag>
     894:	cbnz	w0, 8e8 <srunner_run_tagged+0x318>
     898:	mov	w0, #0x2                   	// #2
     89c:	bl	0 <set_fork_status>
     8a0:	ldr	x2, [x21]
     8a4:	adrp	x3, 0 <srunner_run_teardown>
     8a8:	ldr	x0, [x21, #32]
     8ac:	add	x3, x3, #0x0
     8b0:	mov	w1, #0x2                   	// #2
     8b4:	bl	2b8 <srunner_run_setup>
     8b8:	mov	x23, x0
     8bc:	ldr	w0, [x19, #56]
     8c0:	cbz	w0, c18 <srunner_run_tagged+0x648>
     8c4:	bl	0 <set_fork_status>
     8c8:	cbz	x23, 90c <srunner_run_tagged+0x33c>
     8cc:	ldr	w0, [x23]
     8d0:	cmp	w0, #0x1
     8d4:	b.eq	90c <srunner_run_tagged+0x33c>  // b.none
     8d8:	ldr	x1, [x19, #16]
     8dc:	mov	x2, x23
     8e0:	add	x0, x19, #0x8
     8e4:	bl	3c0 <srunner_add_failure.isra.0>
     8e8:	mov	x0, x27
     8ec:	bl	0 <check_list_advance>
     8f0:	mov	x0, x27
     8f4:	bl	0 <check_list_at_end>
     8f8:	cbz	w0, 848 <srunner_run_tagged+0x278>
     8fc:	mov	x1, x24
     900:	mov	x0, x19
     904:	bl	0 <log_suite_end>
     908:	b	770 <srunner_run_tagged+0x1a0>
     90c:	ldr	x0, [x21, #24]
     910:	str	x0, [sp, #144]
     914:	bl	0 <check_list_front>
     918:	ldr	x0, [sp, #144]
     91c:	bl	0 <check_list_at_end>
     920:	cbnz	w0, e64 <srunner_run_tagged+0x894>
     924:	ldr	x0, [sp, #144]
     928:	bl	0 <check_list_val>
     92c:	mov	x23, x0
     930:	adrp	x1, 0 <srunner_run_teardown>
     934:	add	x0, x1, #0x0
     938:	str	x0, [sp, #160]
     93c:	ldr	w26, [x23, #8]
     940:	ldr	w0, [x23, #12]
     944:	cmp	w26, w0
     948:	b.ge	a8c <srunner_run_tagged+0x4bc>  // b.tcont
     94c:	mov	x0, x19
     950:	mov	x2, x23
     954:	mov	x1, x21
     958:	bl	0 <log_test_start>
     95c:	ldr	w0, [x19, #56]
     960:	cbz	w0, c10 <srunner_run_tagged+0x640>
     964:	cmp	w0, #0x1
     968:	b.ne	a58 <srunner_run_tagged+0x488>  // b.any
     96c:	str	wzr, [sp, #212]
     970:	stp	xzr, xzr, [sp, #224]
     974:	stp	xzr, xzr, [sp, #240]
     978:	bl	0 <fork>
     97c:	mov	w25, w0
     980:	cmn	w0, #0x1
     984:	b.eq	ee0 <srunner_run_tagged+0x910>  // b.none
     988:	cbnz	w0, a98 <srunner_run_tagged+0x4c8>
     98c:	mov	w1, #0x0                   	// #0
     990:	bl	0 <setpgid>
     994:	bl	0 <getpgrp>
     998:	str	w0, [x20, #4]
     99c:	ldr	w1, [x19, #56]
     9a0:	ldr	x19, [x21, #48]
     9a4:	cbz	w1, ce0 <srunner_run_tagged+0x710>
     9a8:	ldr	x2, [x21]
     9ac:	adrp	x3, 0 <srunner_run_teardown>
     9b0:	add	x3, x3, #0x0
     9b4:	mov	x0, x19
     9b8:	bl	2b8 <srunner_run_setup>
     9bc:	bl	0 <free>
     9c0:	bl	0 <check_get_clockid>
     9c4:	add	x1, sp, #0xe0
     9c8:	bl	0 <clock_gettime>
     9cc:	ldr	x2, [x23]
     9d0:	ldr	x0, [x2]
     9d4:	ldr	x1, [x2, #16]
     9d8:	ldr	w2, [x2, #24]
     9dc:	bl	0 <tcase_fn_start>
     9e0:	ldr	x1, [x23]
     9e4:	mov	w0, w26
     9e8:	ldr	x1, [x1, #8]
     9ec:	blr	x1
     9f0:	bl	0 <check_get_clockid>
     9f4:	add	x1, sp, #0xf0
     9f8:	bl	0 <clock_gettime>
     9fc:	ldr	x0, [x21, #56]
     a00:	mov	w1, #0x2                   	// #2
     a04:	bl	0 <srunner_run_teardown>
     a08:	ldp	x4, x1, [sp, #240]
     a0c:	mov	x2, #0xf7cf                	// #63439
     a10:	ldp	x0, x3, [sp, #224]
     a14:	movk	x2, #0xe353, lsl #16
     a18:	movk	x2, #0x9ba5, lsl #32
     a1c:	mov	w6, #0x4240                	// #16960
     a20:	movk	x2, #0x20c4, lsl #48
     a24:	movk	w6, #0xf, lsl #16
     a28:	smulh	x5, x1, x2
     a2c:	smulh	x2, x3, x2
     a30:	asr	x3, x3, #63
     a34:	sub	x0, x4, x0
     a38:	asr	x5, x5, #7
     a3c:	sub	x1, x5, x1, asr #63
     a40:	sub	x2, x3, x2, asr #7
     a44:	add	w1, w1, w2
     a48:	madd	w0, w6, w0, w1
     a4c:	bl	0 <send_duration_info>
     a50:	mov	w0, #0x0                   	// #0
     a54:	bl	0 <exit>
     a58:	cmp	w0, #0x2
     a5c:	b.ne	ec8 <srunner_run_tagged+0x8f8>  // b.any
     a60:	mov	w3, w26
     a64:	mov	x2, x23
     a68:	mov	x1, x21
     a6c:	mov	x0, x19
     a70:	bl	490 <tcase_run_tfun_nofork.isra.0>
     a74:	mov	x5, x0
     a78:	cbnz	x0, be8 <srunner_run_tagged+0x618>
     a7c:	ldr	w0, [x23, #12]
     a80:	add	w26, w26, #0x1
     a84:	cmp	w26, w0
     a88:	b.lt	94c <srunner_run_tagged+0x37c>  // b.tstop
     a8c:	ldr	x0, [sp, #144]
     a90:	bl	0 <check_list_advance>
     a94:	b	918 <srunner_run_tagged+0x348>
     a98:	stp	wzr, w0, [x20]
     a9c:	bl	0 <check_get_clockid>
     aa0:	add	x2, sp, #0xd8
     aa4:	mov	x1, #0x0                   	// #0
     aa8:	bl	0 <timer_create>
     aac:	cbnz	w0, f14 <srunner_run_tagged+0x944>
     ab0:	ldp	x6, x7, [x21, #8]
     ab4:	add	x2, sp, #0x100
     ab8:	ldr	x0, [sp, #216]
     abc:	mov	x3, #0x0                   	// #0
     ac0:	mov	w1, #0x0                   	// #0
     ac4:	stp	xzr, xzr, [sp, #256]
     ac8:	stp	x6, x7, [sp, #272]
     acc:	bl	0 <timer_settime>
     ad0:	cbnz	w0, f2c <srunner_run_tagged+0x95c>
     ad4:	nop
     ad8:	add	x1, sp, #0xd4
     adc:	mov	w0, w25
     ae0:	mov	w2, #0x0                   	// #0
     ae4:	bl	0 <waitpid>
     ae8:	cmn	w0, #0x1
     aec:	b.eq	ad8 <srunner_run_tagged+0x508>  // b.none
     af0:	ldr	x0, [sp, #216]
     af4:	bl	0 <timer_delete>
     af8:	mov	w1, #0x9                   	// #9
     afc:	mov	w0, w25
     b00:	bl	0 <killpg>
     b04:	ldr	w0, [sp, #212]
     b08:	ldr	x5, [x23]
     b0c:	and	w8, w0, #0x7f
     b10:	add	w2, w8, #0x1
     b14:	ldr	w1, [x23, #16]
     b18:	ldr	x4, [x21]
     b1c:	sbfx	x2, x2, #1, #7
     b20:	str	w2, [sp, #152]
     b24:	cmp	w2, #0x0
     b28:	ccmp	w1, w8, #0x4, gt
     b2c:	ldr	x6, [x5]
     b30:	b.ne	c20 <srunner_run_tagged+0x650>  // b.any
     b34:	cmp	w8, #0x0
     b38:	str	w1, [sp, #200]
     b3c:	cset	w7, eq  // eq = none
     b40:	tst	x0, #0xff00
     b44:	asr	w1, w0, #8
     b48:	ccmp	w7, #0x0, #0x4, ne  // ne = any
     b4c:	ldrsb	w0, [x23, #20]
     b50:	mov	w25, w1
     b54:	str	w7, [sp, #168]
     b58:	str	w8, [sp, #176]
     b5c:	stp	x4, x6, [sp, #184]
     b60:	str	w0, [sp, #204]
     b64:	cset	w0, ne  // ne = any
     b68:	bl	0 <receive_test_result>
     b6c:	mov	x5, x0
     b70:	ldr	w2, [sp, #152]
     b74:	ldr	w7, [sp, #168]
     b78:	ldr	w8, [sp, #176]
     b7c:	ldr	w1, [sp, #200]
     b80:	ldp	x4, x6, [sp, #184]
     b84:	cbz	x0, de4 <srunner_run_tagged+0x814>
     b88:	str	w26, [x0, #20]
     b8c:	cmp	w2, #0x0
     b90:	stp	x4, x6, [x0, #32]
     b94:	b.gt	d4c <srunner_run_tagged+0x77c>
     b98:	sxtb	w3, w25
     b9c:	cbnz	w1, cec <srunner_run_tagged+0x71c>
     ba0:	ldr	w0, [sp, #204]
     ba4:	cmp	w7, #0x0
     ba8:	ccmp	w0, w3, #0x0, ne  // ne = any
     bac:	b.ne	dfc <srunner_run_tagged+0x82c>  // b.any
     bb0:	ldr	x0, [x5, #48]
     bb4:	mov	w1, #0x1                   	// #1
     bb8:	str	w1, [x5]
     bbc:	cbz	x0, bcc <srunner_run_tagged+0x5fc>
     bc0:	str	x5, [sp, #152]
     bc4:	bl	0 <free>
     bc8:	ldr	x5, [sp, #152]
     bcc:	adrp	x0, 0 <srunner_run_teardown>
     bd0:	add	x0, x0, #0x0
     bd4:	str	x5, [sp, #152]
     bd8:	bl	0 <strdup>
     bdc:	ldr	x5, [sp, #152]
     be0:	str	x0, [x5, #48]
     be4:	nop
     be8:	ldr	x1, [x19, #16]
     bec:	mov	x2, x5
     bf0:	add	x0, x19, #0x8
     bf4:	str	x5, [sp, #152]
     bf8:	bl	3c0 <srunner_add_failure.isra.0>
     bfc:	ldr	x5, [sp, #152]
     c00:	mov	x0, x19
     c04:	mov	x1, x5
     c08:	bl	0 <log_test_end>
     c0c:	b	a7c <srunner_run_tagged+0x4ac>
     c10:	bl	440 <srunner_fork_status.part.0>
     c14:	b	964 <srunner_run_tagged+0x394>
     c18:	bl	440 <srunner_fork_status.part.0>
     c1c:	b	8c4 <srunner_run_tagged+0x2f4>
     c20:	mov	w0, #0x1                   	// #1
     c24:	str	x4, [sp, #152]
     c28:	str	x6, [sp, #168]
     c2c:	str	w1, [sp, #176]
     c30:	str	w8, [sp, #184]
     c34:	bl	0 <receive_test_result>
     c38:	ldr	w1, [sp, #176]
     c3c:	mov	x5, x0
     c40:	ldr	w8, [sp, #184]
     c44:	ldr	x4, [sp, #152]
     c48:	ldr	x6, [sp, #168]
     c4c:	cbz	x0, de4 <srunner_run_tagged+0x814>
     c50:	str	w26, [x5, #20]
     c54:	stp	x4, x6, [x5, #32]
     c58:	ldr	x0, [x5, #48]
     c5c:	cbnz	w1, d60 <srunner_run_tagged+0x790>
     c60:	mov	w1, #0x3                   	// #3
     c64:	str	w1, [x5]
     c68:	cbz	x0, c80 <srunner_run_tagged+0x6b0>
     c6c:	str	x5, [sp, #152]
     c70:	str	w8, [sp, #168]
     c74:	bl	0 <free>
     c78:	ldr	w8, [sp, #168]
     c7c:	ldr	x5, [sp, #152]
     c80:	mov	x0, #0x64                  	// #100
     c84:	str	x5, [sp, #152]
     c88:	str	w8, [sp, #168]
     c8c:	bl	0 <emalloc>
     c90:	ldr	w1, [x20]
     c94:	mov	x6, x0
     c98:	ldr	w8, [sp, #168]
     c9c:	ldr	x5, [sp, #152]
     ca0:	cbz	w1, e20 <srunner_run_tagged+0x850>
     ca4:	adrp	x0, 0 <srunner_run_teardown>
     ca8:	add	x0, x0, #0x0
     cac:	ldp	x2, x3, [x0]
     cb0:	stp	x2, x3, [x6]
     cb4:	ldur	x0, [x0, #13]
     cb8:	stur	x0, [x6, #13]
     cbc:	str	x6, [x5, #48]
     cc0:	b	be8 <srunner_run_tagged+0x618>
     cc4:	bl	440 <srunner_fork_status.part.0>
     cc8:	b	6f0 <srunner_run_tagged+0x120>
     ccc:	adrp	x0, 0 <srunner_run_teardown>
     cd0:	add	x0, x0, #0x0
     cd4:	bl	0 <getenv>
     cd8:	str	x0, [sp, #112]
     cdc:	b	610 <srunner_run_tagged+0x40>
     ce0:	bl	440 <srunner_fork_status.part.0>
     ce4:	mov	w1, w0
     ce8:	b	9a8 <srunner_run_tagged+0x3d8>
     cec:	cbnz	w8, be8 <srunner_run_tagged+0x618>
     cf0:	ldr	x0, [x0, #48]
     cf4:	cbz	x0, d0c <srunner_run_tagged+0x73c>
     cf8:	str	x5, [sp, #152]
     cfc:	str	w3, [sp, #168]
     d00:	bl	0 <free>
     d04:	ldr	w3, [sp, #168]
     d08:	ldr	x5, [sp, #152]
     d0c:	mov	x0, #0x64                  	// #100
     d10:	str	w3, [sp, #152]
     d14:	str	x5, [sp, #168]
     d18:	bl	0 <emalloc>
     d1c:	ldr	w3, [sp, #152]
     d20:	adrp	x2, 0 <srunner_run_teardown>
     d24:	mov	x1, #0x64                  	// #100
     d28:	add	x2, x2, #0x0
     d2c:	str	x0, [sp, #152]
     d30:	bl	0 <snprintf>
     d34:	ldr	x5, [sp, #168]
     d38:	mov	w0, #0x2                   	// #2
     d3c:	ldr	x4, [sp, #152]
     d40:	str	w0, [x5]
     d44:	str	x4, [x5, #48]
     d48:	b	be8 <srunner_run_tagged+0x618>
     d4c:	cmp	w1, w8
     d50:	ldr	x0, [x0, #48]
     d54:	b.ne	c58 <srunner_run_tagged+0x688>  // b.any
     d58:	ldr	w2, [x20]
     d5c:	cbz	w2, bb4 <srunner_run_tagged+0x5e4>
     d60:	mov	w2, #0x3                   	// #3
     d64:	str	w2, [x5]
     d68:	cbz	x0, d88 <srunner_run_tagged+0x7b8>
     d6c:	str	x5, [sp, #152]
     d70:	str	w1, [sp, #168]
     d74:	str	w8, [sp, #176]
     d78:	bl	0 <free>
     d7c:	ldr	w1, [sp, #168]
     d80:	ldr	w8, [sp, #176]
     d84:	ldr	x5, [sp, #152]
     d88:	mov	w0, w8
     d8c:	str	x5, [sp, #152]
     d90:	bl	80 <signal_error_msg>
     d94:	ldr	x5, [sp, #152]
     d98:	str	x0, [x5, #48]
     d9c:	b	be8 <srunner_run_tagged+0x618>
     da0:	adrp	x0, 0 <srunner_run_teardown>
     da4:	add	x0, x0, #0x0
     da8:	bl	0 <getenv>
     dac:	str	x0, [sp, #104]
     db0:	b	608 <srunner_run_tagged+0x38>
     db4:	adrp	x0, 0 <srunner_run_teardown>
     db8:	add	x0, x0, #0x0
     dbc:	bl	0 <getenv>
     dc0:	mov	x22, x0
     dc4:	ldr	x0, [sp, #120]
     dc8:	cbnz	x0, 600 <srunner_run_tagged+0x30>
     dcc:	nop
     dd0:	adrp	x0, 0 <srunner_run_teardown>
     dd4:	add	x0, x0, #0x0
     dd8:	bl	0 <getenv>
     ddc:	str	x0, [sp, #120]
     de0:	b	600 <srunner_run_tagged+0x30>
     de4:	adrp	x1, 0 <srunner_run_teardown>
     de8:	adrp	x0, 0 <srunner_run_teardown>
     dec:	add	x1, x1, #0x0
     df0:	add	x0, x0, #0x0
     df4:	mov	w2, #0x22c                 	// #556
     df8:	bl	0 <eprintf>
     dfc:	ldr	w0, [sp, #204]
     e00:	cmp	w7, #0x0
     e04:	ccmp	w0, w3, #0x4, ne  // ne = any
     e08:	b.eq	be8 <srunner_run_tagged+0x618>  // b.none
     e0c:	ldr	x0, [x5, #48]
     e10:	cbz	x0, e88 <srunner_run_tagged+0x8b8>
     e14:	mov	w0, #0x2                   	// #2
     e18:	str	w0, [x5]
     e1c:	b	be8 <srunner_run_tagged+0x618>
     e20:	mov	w0, w8
     e24:	str	w8, [sp, #152]
     e28:	stp	x5, x6, [sp, #168]
     e2c:	bl	0 <strsignal>
     e30:	ldr	w8, [sp, #152]
     e34:	ldr	x2, [sp, #160]
     e38:	mov	x4, x0
     e3c:	ldr	x6, [sp, #176]
     e40:	mov	w3, w8
     e44:	mov	x1, #0x64                  	// #100
     e48:	str	x6, [sp, #152]
     e4c:	mov	x0, x6
     e50:	bl	0 <snprintf>
     e54:	ldr	x5, [sp, #168]
     e58:	ldr	x6, [sp, #152]
     e5c:	str	x6, [x5, #48]
     e60:	b	be8 <srunner_run_tagged+0x618>
     e64:	ldr	w1, [x19, #56]
     e68:	ldr	x21, [x21, #40]
     e6c:	cbz	w1, e7c <srunner_run_tagged+0x8ac>
     e70:	mov	x0, x21
     e74:	bl	0 <srunner_run_teardown>
     e78:	b	8e8 <srunner_run_tagged+0x318>
     e7c:	bl	440 <srunner_fork_status.part.0>
     e80:	mov	w1, w0
     e84:	b	e70 <srunner_run_tagged+0x8a0>
     e88:	mov	w0, #0x3                   	// #3
     e8c:	str	w0, [x5]
     e90:	mov	x0, #0x64                  	// #100
     e94:	str	w3, [sp, #152]
     e98:	str	x5, [sp, #168]
     e9c:	bl	0 <emalloc>
     ea0:	ldr	w3, [sp, #152]
     ea4:	adrp	x2, 0 <srunner_run_teardown>
     ea8:	mov	x1, #0x64                  	// #100
     eac:	add	x2, x2, #0x0
     eb0:	str	x0, [sp, #152]
     eb4:	bl	0 <snprintf>
     eb8:	ldr	x5, [sp, #168]
     ebc:	ldr	x4, [sp, #152]
     ec0:	str	x4, [x5, #48]
     ec4:	b	be8 <srunner_run_tagged+0x618>
     ec8:	adrp	x1, 0 <srunner_run_teardown>
     ecc:	adrp	x0, 0 <srunner_run_teardown>
     ed0:	add	x1, x1, #0x0
     ed4:	add	x0, x0, #0x0
     ed8:	mov	w2, #0x10b                 	// #267
     edc:	bl	0 <eprintf>
     ee0:	adrp	x1, 0 <srunner_run_teardown>
     ee4:	adrp	x0, 0 <srunner_run_teardown>
     ee8:	add	x1, x1, #0x0
     eec:	add	x0, x0, #0x0
     ef0:	mov	w2, #0x1e5                 	// #485
     ef4:	bl	0 <eprintf>
     ef8:	adrp	x1, 0 <srunner_run_teardown>
     efc:	adrp	x0, 0 <srunner_run_teardown>
     f00:	mov	w3, w21
     f04:	add	x1, x1, #0x0
     f08:	add	x0, x0, #0x0
     f0c:	mov	w2, #0x31e                 	// #798
     f10:	bl	0 <eprintf>
     f14:	adrp	x1, 0 <srunner_run_teardown>
     f18:	adrp	x0, 0 <srunner_run_teardown>
     f1c:	add	x1, x1, #0x0
     f20:	add	x0, x0, #0x0
     f24:	mov	w2, #0x218                 	// #536
     f28:	bl	0 <eprintf>
     f2c:	adrp	x1, 0 <srunner_run_teardown>
     f30:	adrp	x0, 0 <srunner_run_teardown>
     f34:	add	x1, x1, #0x0
     f38:	add	x0, x0, #0x0
     f3c:	mov	w2, #0x210                 	// #528
     f40:	bl	0 <eprintf>
     f44:	nop

0000000000000f48 <srunner_run_all>:
     f48:	mov	w5, w1
     f4c:	mov	x4, #0x0                   	// #0
     f50:	mov	x3, #0x0                   	// #0
     f54:	mov	x2, #0x0                   	// #0
     f58:	mov	x1, #0x0                   	// #0
     f5c:	b	5d0 <srunner_run_tagged>

0000000000000f60 <srunner_run>:
     f60:	mov	w5, w3
     f64:	mov	x4, #0x0                   	// #0
     f68:	mov	x3, #0x0                   	// #0
     f6c:	b	5d0 <srunner_run_tagged>

0000000000000f70 <check_fork>:
     f70:	stp	x29, x30, [sp, #-32]!
     f74:	mov	x29, sp
     f78:	str	x19, [sp, #16]
     f7c:	bl	0 <fork>
     f80:	mov	w19, w0
     f84:	tbnz	w0, #31, f94 <check_fork+0x24>
     f88:	adrp	x1, 0 <srunner_run_teardown>
     f8c:	ldr	w1, [x1]
     f90:	bl	0 <setpgid>
     f94:	mov	w0, w19
     f98:	ldr	x19, [sp, #16]
     f9c:	ldp	x29, x30, [sp], #32
     fa0:	ret
     fa4:	nop

0000000000000fa8 <check_waitpid_and_exit>:
     fa8:	stp	x29, x30, [sp, #-48]!
     fac:	cmp	w0, #0x0
     fb0:	mov	x29, sp
     fb4:	str	x19, [sp, #16]
     fb8:	b.le	1008 <check_waitpid_and_exit+0x60>
     fbc:	mov	w19, w0
     fc0:	add	x1, sp, #0x2c
     fc4:	mov	w0, w19
     fc8:	mov	w2, #0x0                   	// #0
     fcc:	bl	0 <waitpid>
     fd0:	cmn	w0, #0x1
     fd4:	b.eq	fc0 <check_waitpid_and_exit+0x18>  // b.none
     fd8:	ldr	w2, [sp, #44]
     fdc:	and	w1, w2, #0x7f
     fe0:	add	w0, w1, #0x1
     fe4:	sbfx	x0, x0, #1, #7
     fe8:	cmp	w0, #0x0
     fec:	ccmp	w1, #0x0, #0x4, gt
     ff0:	b.eq	ffc <check_waitpid_and_exit+0x54>  // b.none
     ff4:	mov	w0, #0x1                   	// #1
     ff8:	bl	0 <exit>
     ffc:	tst	x2, #0xff00
    1000:	ccmp	w1, #0x0, #0x0, ne  // ne = any
    1004:	b.eq	ff4 <check_waitpid_and_exit+0x4c>  // b.none
    1008:	mov	w0, #0x0                   	// #0
    100c:	bl	0 <exit>

check_str.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ck_strdup_printf>:
   0:	stp	x29, x30, [sp, #-320]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	mov	x0, #0x64                  	// #100
  14:	stp	x21, x22, [sp, #32]
  18:	mov	w22, #0xffffffc8            	// #-56
  1c:	mov	w21, #0xffffff80            	// #-128
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x24, x0
  28:	add	x23, sp, #0x100
  2c:	str	q0, [sp, #128]
  30:	str	q1, [sp, #144]
  34:	str	q2, [sp, #160]
  38:	str	q3, [sp, #176]
  3c:	str	q4, [sp, #192]
  40:	str	q5, [sp, #208]
  44:	str	q6, [sp, #224]
  48:	str	q7, [sp, #240]
  4c:	stp	x1, x2, [sp, #264]
  50:	stp	x3, x4, [sp, #280]
  54:	stp	x5, x6, [sp, #296]
  58:	str	x7, [sp, #312]
  5c:	bl	0 <emalloc>
  60:	mov	x19, x0
  64:	b	88 <ck_strdup_printf+0x88>
  68:	cmp	w0, w24
  6c:	b.lt	c8 <ck_strdup_printf+0xc8>  // b.tstop
  70:	sxtw	x1, w0
  74:	add	x24, x1, #0x1
  78:	mov	x0, x19
  7c:	mov	x1, x24
  80:	bl	0 <erealloc>
  84:	mov	x19, x0
  88:	add	x0, sp, #0x140
  8c:	stp	x0, x0, [sp, #96]
  90:	add	x3, sp, #0x40
  94:	str	x23, [sp, #112]
  98:	mov	x2, x20
  9c:	stp	w22, w21, [sp, #120]
  a0:	mov	x1, x24
  a4:	ldp	x4, x5, [sp, #96]
  a8:	stp	x4, x5, [sp, #64]
  ac:	mov	x0, x19
  b0:	ldp	x4, x5, [sp, #112]
  b4:	stp	x4, x5, [sp, #80]
  b8:	bl	0 <vsnprintf>
  bc:	tbz	w0, #31, 68 <ck_strdup_printf+0x68>
  c0:	lsl	x24, x24, #1
  c4:	b	78 <ck_strdup_printf+0x78>
  c8:	mov	x0, x19
  cc:	ldp	x19, x20, [sp, #16]
  d0:	ldp	x21, x22, [sp, #32]
  d4:	ldp	x23, x24, [sp, #48]
  d8:	ldp	x29, x30, [sp], #320
  dc:	ret

00000000000000e0 <tr_str>:
  e0:	sub	sp, sp, #0x20
  e4:	adrp	x7, 0 <ck_strdup_printf>
  e8:	add	x1, x7, #0x0
  ec:	adrp	x7, 0 <ck_strdup_printf>
  f0:	add	x7, x7, #0x0
  f4:	stp	x29, x30, [sp, #16]
  f8:	add	x29, sp, #0x10
  fc:	ldp	w3, w4, [x0]
 100:	ldr	w2, [x0, #16]
 104:	cmp	w3, #0x3
 108:	csel	x7, x7, x1, eq  // eq = none
 10c:	cmp	w4, #0x2
 110:	ldr	x1, [x0, #8]
 114:	b.eq	148 <tr_str+0x68>  // b.none
 118:	adrp	x3, 0 <ck_strdup_printf>
 11c:	add	x3, x3, #0x0
 120:	ldp	x4, x5, [x0, #32]
 124:	ldr	w6, [x0, #20]
 128:	ldr	x0, [x0, #48]
 12c:	str	x0, [sp]
 130:	adrp	x0, 0 <ck_strdup_printf>
 134:	add	x0, x0, #0x0
 138:	bl	0 <ck_strdup_printf>
 13c:	ldp	x29, x30, [sp, #16]
 140:	add	sp, sp, #0x20
 144:	ret
 148:	cmp	w3, #0x1
 14c:	b.eq	16c <tr_str+0x8c>  // b.none
 150:	cmp	w3, #0x2
 154:	b.eq	178 <tr_str+0x98>  // b.none
 158:	cmp	w3, #0x3
 15c:	adrp	x3, 0 <ck_strdup_printf>
 160:	add	x3, x3, #0x0
 164:	csel	x3, x3, xzr, eq  // eq = none
 168:	b	120 <tr_str+0x40>
 16c:	adrp	x3, 0 <ck_strdup_printf>
 170:	add	x3, x3, #0x0
 174:	b	120 <tr_str+0x40>
 178:	adrp	x3, 0 <ck_strdup_printf>
 17c:	add	x3, x3, #0x0
 180:	b	120 <tr_str+0x40>
 184:	nop

0000000000000188 <tr_short_str>:
 188:	mov	x4, x0
 18c:	adrp	x5, 0 <ck_strdup_printf>
 190:	adrp	x3, 0 <ck_strdup_printf>
 194:	add	x5, x5, #0x0
 198:	add	x3, x3, #0x0
 19c:	adrp	x0, 0 <ck_strdup_printf>
 1a0:	ldr	w2, [x4]
 1a4:	add	x0, x0, #0x0
 1a8:	ldr	x1, [x4, #8]
 1ac:	cmp	w2, #0x3
 1b0:	ldr	w2, [x4, #16]
 1b4:	csel	x3, x3, x5, eq  // eq = none
 1b8:	ldr	x4, [x4, #48]
 1bc:	b	0 <ck_strdup_printf>

00000000000001c0 <sr_stat_str>:
 1c0:	ldr	x0, [x0, #8]
 1c4:	mov	w1, #0x64                  	// #100
 1c8:	ldp	w2, w3, [x0]
 1cc:	ldr	w4, [x0, #8]
 1d0:	orr	w0, w3, w4
 1d4:	cbz	w0, 204 <sr_stat_str+0x44>
 1d8:	mov	w1, #0x0                   	// #0
 1dc:	cbz	w2, 204 <sr_stat_str+0x44>
 1e0:	add	w0, w3, w4
 1e4:	scvtf	s2, w2
 1e8:	sub	w0, w2, w0
 1ec:	mov	w1, #0x42c80000            	// #1120403456
 1f0:	fmov	s1, w1
 1f4:	scvtf	s0, w0
 1f8:	fdiv	s0, s0, s2
 1fc:	fmul	s0, s0, s1
 200:	fcvtzs	w1, s0
 204:	adrp	x0, 0 <ck_strdup_printf>
 208:	add	x0, x0, #0x0
 20c:	b	0 <ck_strdup_printf>

fpclassify.o:     file format elf64-littleaarch64


libcompat.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ck_do_nothing>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x3, 0 <ck_do_nothing>
   8:	adrp	x1, 0 <ck_do_nothing>
   c:	mov	x29, sp
  10:	adrp	x0, 0 <ck_do_nothing>
  14:	add	x3, x3, #0x0
  18:	add	x1, x1, #0x0
  1c:	add	x0, x0, #0x0
  20:	mov	w2, #0x1a                  	// #26
  24:	bl	0 <__assert_fail>
