
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//fdt.mod_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_fdt_load-0x1a0>:
       0:	stp	x29, x30, [sp, #-64]!
       4:	adrp	x0, 0 <grub_fdt_load-0x1a0>
       8:	mov	x29, sp
       c:	stp	x21, x22, [sp, #32]
      10:	mov	x21, x2
      14:	ldr	x22, [x0]
      18:	stp	x19, x20, [sp, #16]
      1c:	mov	w19, w1
      20:	ldr	x0, [x22]
      24:	cbz	x0, 2c <grub_fdt_load-0x174>
      28:	bl	0 <grub_free>
      2c:	str	xzr, [x22]
      30:	mov	w0, #0x0                   	// #0
      34:	cbnz	w19, 48 <grub_fdt_load-0x158>
      38:	ldp	x19, x20, [sp, #16]
      3c:	ldp	x21, x22, [sp, #32]
      40:	ldp	x29, x30, [sp], #64
      44:	ret
      48:	ldr	x0, [x21]
      4c:	mov	w1, #0x2a                  	// #42
      50:	bl	0 <grub_file_open>
      54:	mov	x19, x0
      58:	cbz	x0, 110 <grub_fdt_load-0x90>
      5c:	stp	x23, x24, [sp, #48]
      60:	ldr	x24, [x0, #64]
      64:	sxtw	x23, w24
      68:	mov	x0, x23
      6c:	bl	0 <grub_malloc>
      70:	mov	x20, x0
      74:	cbz	x0, 12c <grub_fdt_load-0x74>
      78:	mov	x1, x0
      7c:	mov	x2, x23
      80:	mov	x0, x19
      84:	bl	0 <grub_file_read>
      88:	cmp	x0, x23
      8c:	b.ge	c8 <grub_fdt_load-0xd8>  // b.tcont
      90:	adrp	x0, 0 <grub_fdt_load-0x1a0>
      94:	ldr	x23, [x0]
      98:	ldr	w0, [x23]
      9c:	cbz	w0, 154 <grub_fdt_load-0x4c>
      a0:	mov	x0, x19
      a4:	bl	0 <grub_file_close>
      a8:	ldr	w0, [x23]
      ac:	cbnz	w0, f0 <grub_fdt_load-0xb0>
      b0:	ldp	x23, x24, [sp, #48]
      b4:	str	x20, [x22]
      b8:	ldp	x19, x20, [sp, #16]
      bc:	ldp	x21, x22, [sp, #32]
      c0:	ldp	x29, x30, [sp], #64
      c4:	ret
      c8:	mov	w1, w24
      cc:	mov	x0, x20
      d0:	bl	b60 <grub_fdt_check_header>
      d4:	cbnz	w0, 16c <grub_fdt_load-0x34>
      d8:	adrp	x0, 0 <grub_fdt_load-0x1a0>
      dc:	ldr	x23, [x0]
      e0:	mov	x0, x19
      e4:	bl	0 <grub_file_close>
      e8:	ldr	w0, [x23]
      ec:	cbz	w0, b0 <grub_fdt_load-0xf0>
      f0:	mov	x0, x20
      f4:	bl	0 <grub_free>
      f8:	ldr	w0, [x23]
      fc:	ldp	x19, x20, [sp, #16]
     100:	ldp	x21, x22, [sp, #32]
     104:	ldp	x23, x24, [sp, #48]
     108:	ldp	x29, x30, [sp], #64
     10c:	ret
     110:	adrp	x0, 0 <grub_fdt_load-0x1a0>
     114:	ldp	x19, x20, [sp, #16]
     118:	ldr	x0, [x0]
     11c:	ldp	x21, x22, [sp, #32]
     120:	ldr	w0, [x0]
     124:	ldp	x29, x30, [sp], #64
     128:	ret
     12c:	mov	x0, x19
     130:	bl	0 <grub_file_close>
     134:	adrp	x0, 0 <grub_fdt_load-0x1a0>
     138:	ldp	x19, x20, [sp, #16]
     13c:	ldr	x0, [x0]
     140:	ldp	x21, x22, [sp, #32]
     144:	ldr	w0, [x0]
     148:	ldp	x23, x24, [sp, #48]
     14c:	ldp	x29, x30, [sp], #64
     150:	ret
     154:	adrp	x1, 0 <grub_fdt_load-0x1a0>
     158:	mov	w0, #0x15                  	// #21
     15c:	ldr	x2, [x21]
     160:	ldr	x1, [x1]
     164:	bl	0 <grub_error>
     168:	b	a0 <grub_fdt_load-0x100>
     16c:	adrp	x1, 0 <grub_fdt_load-0x1a0>
     170:	mov	w0, #0x15                  	// #21
     174:	ldr	x1, [x1]
     178:	bl	0 <grub_error>
     17c:	b	d8 <grub_fdt_load-0xc8>
	...

00000000000001a0 <grub_fdt_load>:
     1a0:	stp	x29, x30, [sp, #-64]!
     1a4:	adrp	x1, 0 <grub_fdt_load-0x1a0>
     1a8:	mov	x29, sp
     1ac:	stp	x21, x22, [sp, #32]
     1b0:	ldr	x22, [x1]
     1b4:	stp	x19, x20, [sp, #16]
     1b8:	mov	x20, x0
     1bc:	ldr	x0, [x22, #8]
     1c0:	cbz	x0, 1d8 <grub_fdt_load+0x38>
     1c4:	ldr	w1, [x0, #4]
     1c8:	rev	w1, w1
     1cc:	add	w1, w1, #0xfff
     1d0:	lsr	w1, w1, #12
     1d4:	bl	0 <grub_efi_free_pages>
     1d8:	ldr	x21, [x22]
     1dc:	cbz	x21, 250 <grub_fdt_load+0xb0>
     1e0:	adrp	x2, 0 <grub_fdt_load-0x1a0>
     1e4:	adrp	x1, 0 <grub_fdt_load-0x1a0>
     1e8:	adrp	x0, 0 <grub_fdt_load-0x1a0>
     1ec:	ldr	w19, [x21, #4]
     1f0:	ldr	x3, [x2]
     1f4:	rev	w19, w19
     1f8:	ldr	x2, [x1]
     1fc:	add	w19, w19, w20
     200:	ldr	x0, [x0]
     204:	mov	w4, w19
     208:	mov	w1, #0x3e                  	// #62
     20c:	bl	0 <grub_real_dprintf>
     210:	add	w0, w19, #0xfff
     214:	lsr	w0, w0, #12
     218:	bl	0 <grub_efi_allocate_any_pages>
     21c:	str	x0, [x22, #8]
     220:	cbz	x0, 2fc <grub_fdt_load+0x15c>
     224:	mov	w2, w19
     228:	mov	x1, x21
     22c:	sub	x2, x2, x20
     230:	bl	0 <grub_memmove>
     234:	ldr	x0, [x22, #8]
     238:	rev	w19, w19
     23c:	str	w19, [x0, #4]
     240:	ldp	x19, x20, [sp, #16]
     244:	ldp	x21, x22, [sp, #32]
     248:	ldp	x29, x30, [sp], #64
     24c:	ret
     250:	bl	0 <grub_efi_get_firmware_fdt>
     254:	mov	x21, x0
     258:	cbnz	x0, 1e0 <grub_fdt_load+0x40>
     25c:	adrp	x2, 0 <grub_fdt_load-0x1a0>
     260:	adrp	x1, 0 <grub_fdt_load-0x1a0>
     264:	adrp	x0, 0 <grub_fdt_load-0x1a0>
     268:	add	w19, w20, #0x83
     26c:	ldr	x3, [x2]
     270:	mov	w4, w19
     274:	ldr	x2, [x1]
     278:	mov	w1, #0x3e                  	// #62
     27c:	ldr	x0, [x0]
     280:	bl	0 <grub_real_dprintf>
     284:	mov	w0, #0x1082                	// #4226
     288:	add	w0, w20, w0
     28c:	lsr	w0, w0, #12
     290:	bl	0 <grub_efi_allocate_any_pages>
     294:	str	x0, [x22, #8]
     298:	cbz	x0, 2fc <grub_fdt_load+0x15c>
     29c:	mov	w1, w19
     2a0:	bl	1228 <grub_fdt_create_empty_tree>
     2a4:	adrp	x1, 0 <grub_fdt_load-0x1a0>
     2a8:	add	x3, sp, #0x3c
     2ac:	ldr	x0, [x22, #8]
     2b0:	mov	w19, #0x2000000             	// #33554432
     2b4:	ldr	x2, [x1]
     2b8:	mov	w4, #0x4                   	// #4
     2bc:	mov	w1, #0x0                   	// #0
     2c0:	str	w19, [sp, #60]
     2c4:	bl	fe8 <grub_fdt_set_prop>
     2c8:	str	w19, [sp, #60]
     2cc:	adrp	x1, 0 <grub_fdt_load-0x1a0>
     2d0:	add	x3, sp, #0x3c
     2d4:	ldr	x0, [x22, #8]
     2d8:	mov	w4, #0x4                   	// #4
     2dc:	ldr	x2, [x1]
     2e0:	mov	w1, #0x0                   	// #0
     2e4:	bl	fe8 <grub_fdt_set_prop>
     2e8:	ldr	x0, [x22, #8]
     2ec:	ldp	x19, x20, [sp, #16]
     2f0:	ldp	x21, x22, [sp, #32]
     2f4:	ldp	x29, x30, [sp], #64
     2f8:	ret
     2fc:	mov	x0, #0x0                   	// #0
     300:	b	240 <grub_fdt_load+0xa0>
     304:	nop
	...

0000000000000338 <grub_fdt_install>:
     338:	stp	x29, x30, [sp, #-48]!
     33c:	adrp	x0, 0 <grub_fdt_load-0x1a0>
     340:	adrp	x2, 0 <grub_fdt_load-0x1a0>
     344:	mov	x29, sp
     348:	ldr	x0, [x0]
     34c:	str	x19, [sp, #16]
     350:	ldr	x19, [x2]
     354:	mov	x1, #0xb83                 	// #2947
     358:	ldr	x2, [x0]
     35c:	mov	x3, #0x21d5                	// #8661
     360:	movk	x1, #0x15d9, lsl #16
     364:	movk	x3, #0xb1b6, lsl #16
     368:	movk	x1, #0x692c, lsl #32
     36c:	movk	x3, #0xf19c, lsl #32
     370:	ldr	x2, [x2, #96]
     374:	movk	x1, #0xe0aa, lsl #48
     378:	movk	x3, #0x41a5, lsl #48
     37c:	stp	x3, x1, [sp, #32]
     380:	add	x0, sp, #0x20
     384:	ldr	x1, [x19, #8]
     388:	ldr	x2, [x2, #192]
     38c:	blr	x2
     390:	cbnz	x0, 3c8 <grub_fdt_install+0x90>
     394:	adrp	x3, 0 <grub_fdt_load-0x1a0>
     398:	adrp	x2, 0 <grub_fdt_load-0x1a0>
     39c:	adrp	x0, 0 <grub_fdt_load-0x1a0>
     3a0:	mov	w1, #0x5d                  	// #93
     3a4:	ldr	x3, [x3]
     3a8:	ldr	x2, [x2]
     3ac:	ldr	x0, [x0]
     3b0:	ldr	x4, [x19, #8]
     3b4:	bl	0 <grub_real_dprintf>
     3b8:	mov	w0, #0x0                   	// #0
     3bc:	ldr	x19, [sp, #16]
     3c0:	ldp	x29, x30, [sp], #48
     3c4:	ret
     3c8:	adrp	x1, 0 <grub_fdt_load-0x1a0>
     3cc:	mov	w0, #0x1d                  	// #29
     3d0:	ldr	x1, [x1]
     3d4:	bl	0 <grub_error>
     3d8:	ldr	x19, [sp, #16]
     3dc:	ldp	x29, x30, [sp], #48
     3e0:	ret
     3e4:	nop
	...

0000000000000418 <grub_fdt_unload>:
     418:	stp	x29, x30, [sp, #-32]!
     41c:	adrp	x0, 0 <grub_fdt_load-0x1a0>
     420:	mov	x29, sp
     424:	str	x19, [sp, #16]
     428:	ldr	x19, [x0]
     42c:	ldr	x0, [x19, #8]
     430:	cbz	x0, 44c <grub_fdt_unload+0x34>
     434:	ldr	w1, [x0, #4]
     438:	rev	w1, w1
     43c:	add	w1, w1, #0xfff
     440:	lsr	w1, w1, #12
     444:	bl	0 <grub_efi_free_pages>
     448:	str	xzr, [x19, #8]
     44c:	ldr	x19, [sp, #16]
     450:	ldp	x29, x30, [sp], #32
     454:	ret
	...

0000000000000460 <grub_mod_init>:
     460:	stp	x29, x30, [sp, #-16]!
     464:	adrp	x2, 0 <grub_fdt_load-0x1a0>
     468:	adrp	x1, 0 <grub_fdt_load-0x1a0>
     46c:	adrp	x0, 0 <grub_fdt_load-0x1a0>
     470:	mov	x29, sp
     474:	ldr	x3, [x2]
     478:	mov	w4, #0x0                   	// #0
     47c:	ldr	x1, [x1]
     480:	mov	x2, #0x0                   	// #0
     484:	ldr	x0, [x0]
     488:	bl	0 <grub_register_command_prio>
     48c:	adrp	x1, 0 <grub_fdt_load-0x1a0>
     490:	ldr	x1, [x1]
     494:	str	x0, [x1, #16]
     498:	ldp	x29, x30, [sp], #16
     49c:	ret
	...

00000000000004c0 <grub_mod_fini>:
     4c0:	adrp	x0, 0 <grub_fdt_load-0x1a0>
     4c4:	ldr	x0, [x0]
     4c8:	ldr	x0, [x0, #16]
     4cc:	b	0 <grub_unregister_command>
	...
     4d8:	stp	x29, x30, [sp, #-32]!
     4dc:	mov	x29, sp
     4e0:	stp	x19, x20, [sp, #16]
     4e4:	mov	x20, x0
     4e8:	ldr	w19, [x0, #8]
     4ec:	ldr	w0, [x0, #36]
     4f0:	rev	w19, w19
     4f4:	rev	w0, w0
     4f8:	add	x19, x19, x0
     4fc:	add	x19, x20, x19
     500:	cmp	x19, x1
     504:	b.hi	510 <grub_mod_fini+0x50>  // b.pmore
     508:	b	588 <grub_mod_fini+0xc8>
     50c:	b.eq	588 <grub_mod_fini+0xc8>  // b.none
     510:	ldrb	w2, [x1], #1
     514:	cmp	x19, x1
     518:	cbnz	w2, 50c <grub_mod_fini+0x4c>
     51c:	add	x1, x1, #0x3
     520:	and	x2, x1, #0xfffffffffffffffc
     524:	cmp	x19, x2
     528:	b.ls	588 <grub_mod_fini+0xc8>  // b.plast
     52c:	ldr	w3, [x2]
     530:	rev	w3, w3
     534:	cmp	w3, #0x3
     538:	b.eq	59c <grub_mod_fini+0xdc>  // b.none
     53c:	b.hi	574 <grub_mod_fini+0xb4>  // b.pmore
     540:	add	x1, x2, #0x4
     544:	mov	x0, x20
     548:	cmp	w3, #0x1
     54c:	b.eq	5b8 <grub_mod_fini+0xf8>  // b.none
     550:	cmp	w3, #0x2
     554:	b.ne	588 <grub_mod_fini+0xc8>  // b.any
     558:	add	x2, x2, #0x4
     55c:	cmp	x19, x2
     560:	csel	x2, x2, xzr, hi  // hi = pmore
     564:	mov	x0, x2
     568:	ldp	x19, x20, [sp, #16]
     56c:	ldp	x29, x30, [sp], #32
     570:	ret
     574:	add	x2, x2, #0x4
     578:	cmp	w3, #0x4
     57c:	b.ne	588 <grub_mod_fini+0xc8>  // b.any
     580:	cmp	x2, x19
     584:	b.cc	52c <grub_mod_fini+0x6c>  // b.lo, b.ul, b.last
     588:	mov	x2, #0x0                   	// #0
     58c:	mov	x0, x2
     590:	ldp	x19, x20, [sp, #16]
     594:	ldp	x29, x30, [sp], #32
     598:	ret
     59c:	ldr	w0, [x2, #4]
     5a0:	rev	w0, w0
     5a4:	add	w0, w0, #0x3
     5a8:	and	x0, x0, #0xfffffffc
     5ac:	add	x0, x0, #0xc
     5b0:	add	x2, x2, x0
     5b4:	b	580 <grub_mod_fini+0xc0>
     5b8:	bl	4d8 <grub_mod_fini+0x18>
     5bc:	mov	x2, x0
     5c0:	cbnz	x0, 580 <grub_mod_fini+0xc0>
     5c4:	b	58c <grub_mod_fini+0xcc>
     5c8:	cmp	x1, x2
     5cc:	b.cs	5fc <grub_mod_fini+0x13c>  // b.hs, b.nlast
     5d0:	mov	x5, x2
     5d4:	mov	x6, x0
     5d8:	sub	x7, x2, #0x4
     5dc:	ldr	w4, [x1]
     5e0:	rev	w4, w4
     5e4:	cmp	w4, #0x3
     5e8:	b.eq	604 <grub_mod_fini+0x144>  // b.none
     5ec:	cmp	w4, #0x4
     5f0:	b.eq	66c <grub_mod_fini+0x1ac>  // b.none
     5f4:	cmp	w4, #0x1
     5f8:	b.eq	634 <grub_mod_fini+0x174>  // b.none
     5fc:	mov	x0, #0x0                   	// #0
     600:	ret
     604:	cmp	x1, x7
     608:	b.cs	5fc <grub_mod_fini+0x13c>  // b.hs, b.nlast
     60c:	ldr	w2, [x1, #4]
     610:	rev	w2, w2
     614:	add	w2, w2, #0x3
     618:	and	x2, x2, #0xfffffffc
     61c:	add	x2, x2, #0xc
     620:	add	x1, x1, x2
     624:	cmp	x1, x5
     628:	mov	w3, #0x0                   	// #0
     62c:	b.cc	5dc <grub_mod_fini+0x11c>  // b.lo, b.ul, b.last
     630:	b	5fc <grub_mod_fini+0x13c>
     634:	add	x4, x1, #0x4
     638:	cbnz	w3, 674 <grub_mod_fini+0x1b4>
     63c:	ldrb	w0, [x1, #4]
     640:	cmp	w0, #0x0
     644:	ccmp	x5, x4, #0x0, ne  // ne = any
     648:	b.ls	660 <grub_mod_fini+0x1a0>  // b.plast
     64c:	nop
     650:	ldrb	w0, [x4, #1]!
     654:	cmp	w0, #0x0
     658:	ccmp	x5, x4, #0x0, ne  // ne = any
     65c:	b.hi	650 <grub_mod_fini+0x190>  // b.pmore
     660:	cmp	x5, x4
     664:	csel	x0, x1, xzr, hi  // hi = pmore
     668:	ret
     66c:	add	x1, x1, #0x4
     670:	b	624 <grub_mod_fini+0x164>
     674:	stp	x29, x30, [sp, #-16]!
     678:	mov	x29, sp
     67c:	mov	x1, x4
     680:	mov	x0, x6
     684:	bl	4d8 <grub_mod_fini+0x18>
     688:	mov	x1, x0
     68c:	cmp	x1, x5
     690:	mov	w3, #0x0                   	// #0
     694:	b.cs	6b8 <grub_mod_fini+0x1f8>  // b.hs, b.nlast
     698:	ldr	w4, [x1]
     69c:	rev	w4, w4
     6a0:	cmp	w4, #0x3
     6a4:	b.eq	704 <grub_mod_fini+0x244>  // b.none
     6a8:	cmp	w4, #0x4
     6ac:	b.eq	6fc <grub_mod_fini+0x23c>  // b.none
     6b0:	cmp	w4, #0x1
     6b4:	b.eq	6c4 <grub_mod_fini+0x204>  // b.none
     6b8:	mov	x0, #0x0                   	// #0
     6bc:	ldp	x29, x30, [sp], #16
     6c0:	ret
     6c4:	add	x4, x1, #0x4
     6c8:	cbnz	w3, 67c <grub_mod_fini+0x1bc>
     6cc:	ldrb	w0, [x1, #4]
     6d0:	cmp	w0, #0x0
     6d4:	ccmp	x5, x4, #0x0, ne  // ne = any
     6d8:	b.ls	6f0 <grub_mod_fini+0x230>  // b.plast
     6dc:	nop
     6e0:	ldrb	w0, [x4, #1]!
     6e4:	cmp	w0, #0x0
     6e8:	ccmp	x5, x4, #0x0, ne  // ne = any
     6ec:	b.hi	6e0 <grub_mod_fini+0x220>  // b.pmore
     6f0:	cmp	x5, x4
     6f4:	csel	x0, x1, xzr, hi  // hi = pmore
     6f8:	b	6bc <grub_mod_fini+0x1fc>
     6fc:	add	x1, x1, #0x4
     700:	b	68c <grub_mod_fini+0x1cc>
     704:	cmp	x1, x7
     708:	b.cs	6b8 <grub_mod_fini+0x1f8>  // b.hs, b.nlast
     70c:	ldr	w2, [x1, #4]
     710:	rev	w2, w2
     714:	add	w2, w2, #0x3
     718:	and	x2, x2, #0xfffffffc
     71c:	add	x2, x2, #0xc
     720:	add	x1, x1, x2
     724:	b	68c <grub_mod_fini+0x1cc>
     728:	ldr	w2, [x0, #16]
     72c:	sub	x4, x0, #0x10
     730:	mov	w3, #0x10                  	// #16
     734:	rev	w2, w2
     738:	add	x2, x2, x0
     73c:	nop
     740:	ldr	x1, [x2]
     744:	cbnz	x1, 750 <grub_mod_fini+0x290>
     748:	ldr	x1, [x2, #8]
     74c:	cbz	x1, 774 <grub_mod_fini+0x2b4>
     750:	ldr	w1, [x0, #4]
     754:	add	x2, x2, #0x10
     758:	add	w3, w3, #0x10
     75c:	rev	w1, w1
     760:	add	x1, x4, x1
     764:	cmp	x2, x1
     768:	b.ls	740 <grub_mod_fini+0x280>  // b.plast
     76c:	mov	w0, #0x0                   	// #0
     770:	ret
     774:	tbnz	w3, #31, 76c <grub_mod_fini+0x2ac>
     778:	ldp	w4, w2, [x0, #32]
     77c:	mov	w1, #0xffffffd8            	// #-40
     780:	sub	w3, w1, w3
     784:	ldr	w1, [x0, #4]
     788:	rev	w4, w4
     78c:	rev	w0, w2
     790:	add	w0, w0, w4
     794:	rev	w1, w1
     798:	sub	w0, w3, w0
     79c:	add	w0, w0, w1
     7a0:	ret
     7a4:	nop
     7a8:	stp	x29, x30, [sp, #-64]!
     7ac:	mov	x29, sp
     7b0:	stp	x23, x24, [sp, #48]
     7b4:	mov	x23, x0
     7b8:	ldr	w0, [x0, #8]
     7bc:	stp	x21, x22, [sp, #32]
     7c0:	mov	x24, x2
     7c4:	ldr	w21, [x23, #36]
     7c8:	rev	w0, w0
     7cc:	stp	x19, x20, [sp, #16]
     7d0:	add	x0, x23, x0
     7d4:	add	x19, x0, w1, uxtw
     7d8:	rev	w21, w21
     7dc:	add	x19, x19, #0x4
     7e0:	add	x21, x21, x0
     7e4:	b	7f4 <grub_mod_fini+0x334>
     7e8:	ldrb	w3, [x1], #1
     7ec:	mov	x19, x1
     7f0:	cbz	w3, 800 <grub_mod_fini+0x340>
     7f4:	mov	x1, x19
     7f8:	cmp	x19, x21
     7fc:	b.cc	7e8 <grub_mod_fini+0x328>  // b.lo, b.ul, b.last
     800:	add	x19, x19, #0x3
     804:	sub	x20, x21, #0x8
     808:	and	x19, x19, #0xfffffffffffffffc
     80c:	nop
     810:	cmp	x19, x20
     814:	b.cs	834 <grub_mod_fini+0x374>  // b.hs, b.nlast
     818:	ldr	w1, [x19]
     81c:	rev	w1, w1
     820:	cmp	w1, #0x3
     824:	b.eq	850 <grub_mod_fini+0x390>  // b.none
     828:	add	x19, x19, #0x4
     82c:	cmp	w1, #0x4
     830:	b.eq	810 <grub_mod_fini+0x350>  // b.none
     834:	mov	x19, #0x0                   	// #0
     838:	mov	x0, x19
     83c:	ldp	x19, x20, [sp, #16]
     840:	ldp	x21, x22, [sp, #32]
     844:	ldp	x23, x24, [sp, #48]
     848:	ldp	x29, x30, [sp], #64
     84c:	ret
     850:	ldr	w22, [x19, #8]
     854:	mov	x0, x24
     858:	bl	0 <grub_strlen>
     85c:	ldr	w1, [x23, #32]
     860:	rev	w22, w22
     864:	add	x3, x22, x0
     868:	rev	w1, w1
     86c:	cmp	x3, x1
     870:	b.cc	890 <grub_mod_fini+0x3d0>  // b.lo, b.ul, b.last
     874:	ldr	w1, [x19, #4]
     878:	rev	w1, w1
     87c:	add	w1, w1, #0x3
     880:	and	x1, x1, #0xfffffffc
     884:	add	x1, x1, #0xc
     888:	add	x19, x19, x1
     88c:	b	810 <grub_mod_fini+0x350>
     890:	ldr	w1, [x23, #12]
     894:	mov	x0, x24
     898:	rev	w1, w1
     89c:	add	x1, x1, x22
     8a0:	add	x1, x23, x1
     8a4:	bl	0 <grub_strcmp>
     8a8:	cbnz	w0, 874 <grub_mod_fini+0x3b4>
     8ac:	ldr	w0, [x19, #4]
     8b0:	rev	w0, w0
     8b4:	add	w0, w0, #0x3
     8b8:	and	x0, x0, #0xfffffffc
     8bc:	add	x0, x0, #0xc
     8c0:	add	x0, x19, x0
     8c4:	cmp	x21, x0
     8c8:	b.hi	838 <grub_mod_fini+0x378>  // b.pmore
     8cc:	b	834 <grub_mod_fini+0x374>
     8d0:	stp	x29, x30, [sp, #-64]!
     8d4:	sub	x5, x0, #0x10
     8d8:	mov	w4, #0x10                  	// #16
     8dc:	mov	x29, sp
     8e0:	stp	x19, x20, [sp, #16]
     8e4:	mov	x19, x0
     8e8:	ldr	w0, [x0, #16]
     8ec:	stp	x21, x22, [sp, #32]
     8f0:	rev	w3, w0
     8f4:	add	x3, x3, x19
     8f8:	rev	w6, w0
     8fc:	sub	w4, w4, w3
     900:	stp	x23, x24, [sp, #48]
     904:	nop
     908:	add	w20, w4, w3
     90c:	ldr	x0, [x3]
     910:	cbnz	x0, 91c <grub_mod_fini+0x45c>
     914:	ldr	x0, [x3, #8]
     918:	cbz	x0, a5c <grub_mod_fini+0x59c>
     91c:	ldr	w2, [x19, #4]
     920:	add	x3, x3, #0x10
     924:	rev	w2, w2
     928:	add	x2, x5, x2
     92c:	cmp	x3, x2
     930:	b.ls	908 <grub_mod_fini+0x448>  // b.plast
     934:	mov	w20, #0x27                  	// #39
     938:	ldr	w21, [x19, #36]
     93c:	cmp	w6, #0x28
     940:	rev	w21, w21
     944:	add	w21, w21, w20
     948:	add	w21, w21, w1
     94c:	b.ne	960 <grub_mod_fini+0x4a0>  // b.any
     950:	ldr	w0, [x19, #8]
     954:	rev	w0, w0
     958:	cmp	w0, w20
     95c:	b.eq	a6c <grub_mod_fini+0x5ac>  // b.none
     960:	ldr	w0, [x19, #4]
     964:	rev	w0, w0
     968:	bl	0 <grub_malloc>
     96c:	mov	x22, x0
     970:	cbz	x0, aa0 <grub_mod_fini+0x5e0>
     974:	ldr	w1, [x19, #16]
     978:	mov	w4, #0x10                  	// #16
     97c:	add	x23, x0, #0x28
     980:	sub	x6, x19, #0x10
     984:	rev	w1, w1
     988:	add	x1, x19, x1
     98c:	mov	x3, x1
     990:	sub	w4, w4, w1
     994:	nop
     998:	ldr	x2, [x3]
     99c:	add	w5, w4, w3
     9a0:	cbnz	x2, 9ac <grub_mod_fini+0x4ec>
     9a4:	ldr	x2, [x3, #8]
     9a8:	cbz	x2, a64 <grub_mod_fini+0x5a4>
     9ac:	ldr	w2, [x19, #4]
     9b0:	add	x3, x3, #0x10
     9b4:	rev	w2, w2
     9b8:	add	x2, x6, x2
     9bc:	cmp	x3, x2
     9c0:	b.ls	998 <grub_mod_fini+0x4d8>  // b.plast
     9c4:	mov	x2, #0xffffffffffffffff    	// #-1
     9c8:	mov	x0, x23
     9cc:	bl	0 <grub_memmove>
     9d0:	ldr	w1, [x19, #8]
     9d4:	mov	w0, #0x28000000            	// #671088640
     9d8:	ldr	w2, [x19, #36]
     9dc:	mov	w24, #0x0                   	// #0
     9e0:	str	w0, [x19, #16]
     9e4:	rev	w1, w1
     9e8:	add	x1, x19, x1
     9ec:	rev	w2, w2
     9f0:	add	x0, x22, w20, uxtw
     9f4:	bl	0 <grub_memmove>
     9f8:	ldr	w1, [x19, #12]
     9fc:	rev	w20, w20
     a00:	ldr	w2, [x19, #32]
     a04:	add	x0, x22, w21, uxtw
     a08:	str	w20, [x19, #8]
     a0c:	rev	w1, w1
     a10:	add	x1, x19, x1
     a14:	rev	w2, w2
     a18:	bl	0 <grub_memmove>
     a1c:	rev	w21, w21
     a20:	ldr	w2, [x19, #4]
     a24:	mov	x1, x23
     a28:	str	w21, [x19, #12]
     a2c:	add	x0, x19, #0x28
     a30:	rev	w2, w2
     a34:	sub	w2, w2, #0x28
     a38:	bl	0 <grub_memmove>
     a3c:	mov	x0, x22
     a40:	bl	0 <grub_free>
     a44:	mov	w0, w24
     a48:	ldp	x19, x20, [sp, #16]
     a4c:	ldp	x21, x22, [sp, #32]
     a50:	ldp	x23, x24, [sp, #48]
     a54:	ldp	x29, x30, [sp], #64
     a58:	ret
     a5c:	add	w20, w20, #0x28
     a60:	b	938 <grub_mod_fini+0x478>
     a64:	sxtw	x2, w5
     a68:	b	9c8 <grub_mod_fini+0x508>
     a6c:	ldr	w1, [x19, #12]
     a70:	mov	w24, #0x0                   	// #0
     a74:	rev	w1, w1
     a78:	cmp	w21, w1
     a7c:	b.eq	a44 <grub_mod_fini+0x584>  // b.none
     a80:	ldr	w2, [x19, #32]
     a84:	add	x0, x19, w21, uxtw
     a88:	add	x1, x19, w1, uxtw
     a8c:	rev	w21, w21
     a90:	rev	w2, w2
     a94:	bl	0 <grub_memmove>
     a98:	str	w21, [x19, #12]
     a9c:	b	a44 <grub_mod_fini+0x584>
     aa0:	mov	w24, #0xffffffff            	// #-1
     aa4:	b	a44 <grub_mod_fini+0x584>

0000000000000aa8 <grub_fdt_check_header_nosize>:
     aa8:	tst	x0, #0x3
     aac:	b.ne	b54 <grub_fdt_check_header_nosize+0xac>  // b.any
     ab0:	ldr	w2, [x0]
     ab4:	mov	w1, #0xdd0                 	// #3536
     ab8:	movk	w1, #0xedfe, lsl #16
     abc:	cmp	w2, w1
     ac0:	b.ne	b54 <grub_fdt_check_header_nosize+0xac>  // b.any
     ac4:	ldr	w1, [x0, #20]
     ac8:	rev	w1, w1
     acc:	cmp	w1, #0x10
     ad0:	b.ls	b54 <grub_fdt_check_header_nosize+0xac>  // b.plast
     ad4:	ldr	w1, [x0, #24]
     ad8:	rev	w1, w1
     adc:	cmp	w1, #0x11
     ae0:	b.hi	b54 <grub_fdt_check_header_nosize+0xac>  // b.pmore
     ae4:	ldr	w2, [x0, #8]
     ae8:	rev	w3, w2
     aec:	tst	x3, #0x3
     af0:	b.ne	b54 <grub_fdt_check_header_nosize+0xac>  // b.any
     af4:	ldr	w2, [x0, #36]
     af8:	rev	w2, w2
     afc:	tst	x2, #0x3
     b00:	b.ne	b54 <grub_fdt_check_header_nosize+0xac>  // b.any
     b04:	ldr	w1, [x0, #4]
     b08:	add	w2, w2, w3
     b0c:	rev	w1, w1
     b10:	cmp	w2, w1
     b14:	b.hi	b54 <grub_fdt_check_header_nosize+0xac>  // b.pmore
     b18:	ldr	w2, [x0, #12]
     b1c:	ldr	w3, [x0, #32]
     b20:	rev	w2, w2
     b24:	rev	w3, w3
     b28:	add	w2, w2, w3
     b2c:	cmp	w2, w1
     b30:	b.hi	b54 <grub_fdt_check_header_nosize+0xac>  // b.pmore
     b34:	ldr	w0, [x0, #16]
     b38:	rev	w0, w0
     b3c:	tst	x0, #0x7
     b40:	b.ne	b54 <grub_fdt_check_header_nosize+0xac>  // b.any
     b44:	sub	x1, x1, #0x10
     b48:	cmp	x1, w0, uxtw
     b4c:	csetm	w0, cc  // cc = lo, ul, last
     b50:	ret
     b54:	mov	w0, #0xffffffff            	// #-1
     b58:	ret
     b5c:	nop

0000000000000b60 <grub_fdt_check_header>:
     b60:	cmp	w1, #0x27
     b64:	b.ls	b94 <grub_fdt_check_header+0x34>  // b.plast
     b68:	ldr	w2, [x0, #4]
     b6c:	rev	w2, w2
     b70:	cmp	w1, w2
     b74:	b.cc	b94 <grub_fdt_check_header+0x34>  // b.lo, b.ul, b.last
     b78:	stp	x29, x30, [sp, #-16]!
     b7c:	mov	x29, sp
     b80:	bl	aa8 <grub_fdt_check_header_nosize>
     b84:	cmn	w0, #0x1
     b88:	csetm	w0, eq  // eq = none
     b8c:	ldp	x29, x30, [sp], #16
     b90:	ret
     b94:	mov	w0, #0xffffffff            	// #-1
     b98:	ret
     b9c:	nop

0000000000000ba0 <grub_fdt_next_node>:
     ba0:	stp	x29, x30, [sp, #-16]!
     ba4:	mov	x8, x0
     ba8:	mov	w3, #0x1                   	// #1
     bac:	mov	x29, sp
     bb0:	ldr	w9, [x0, #8]
     bb4:	ldr	w2, [x0, #36]
     bb8:	rev	w9, w9
     bbc:	add	w1, w1, w9
     bc0:	rev	w2, w2
     bc4:	and	x1, x1, #0xfffffffc
     bc8:	add	x2, x2, w9, uxtw
     bcc:	add	x1, x0, x1
     bd0:	add	x2, x0, x2
     bd4:	bl	5c8 <grub_mod_fini+0x108>
     bd8:	cbz	x0, bec <grub_fdt_next_node+0x4c>
     bdc:	sub	x0, x0, x8
     be0:	sub	w0, w0, w9
     be4:	ldp	x29, x30, [sp], #16
     be8:	ret
     bec:	mov	w0, #0xffffffff            	// #-1
     bf0:	b	be4 <grub_fdt_next_node+0x44>
     bf4:	nop

0000000000000bf8 <grub_fdt_first_node>:
     bf8:	tst	x1, #0x3
     bfc:	b.ne	c8c <grub_fdt_first_node+0x94>  // b.any
     c00:	ldr	w3, [x0, #8]
     c04:	mov	x8, x0
     c08:	ldr	w2, [x0, #36]
     c0c:	rev	w0, w3
     c10:	rev	w9, w3
     c14:	add	x0, x0, x8
     c18:	rev	w2, w2
     c1c:	add	x3, x0, w1, uxtw
     c20:	add	x2, x2, x0
     c24:	cmp	x3, x2
     c28:	b.cs	c8c <grub_fdt_first_node+0x94>  // b.hs, b.nlast
     c2c:	ldr	w0, [x0, w1, uxtw]
     c30:	rev	w0, w0
     c34:	cmp	w0, #0x1
     c38:	b.ne	c8c <grub_fdt_first_node+0x94>  // b.any
     c3c:	stp	x29, x30, [sp, #-16]!
     c40:	add	x3, x3, #0x4
     c44:	mov	x29, sp
     c48:	b	c58 <grub_fdt_first_node+0x60>
     c4c:	ldrb	w4, [x1], #1
     c50:	mov	x3, x1
     c54:	cbz	w4, c64 <grub_fdt_first_node+0x6c>
     c58:	mov	x1, x3
     c5c:	cmp	x3, x2
     c60:	b.cc	c4c <grub_fdt_first_node+0x54>  // b.lo, b.ul, b.last
     c64:	add	x1, x3, #0x3
     c68:	mov	x0, x8
     c6c:	and	x1, x1, #0xfffffffffffffffc
     c70:	mov	w3, #0x0                   	// #0
     c74:	bl	5c8 <grub_mod_fini+0x108>
     c78:	cbz	x0, c94 <grub_fdt_first_node+0x9c>
     c7c:	sub	x0, x0, x8
     c80:	sub	w0, w0, w9
     c84:	ldp	x29, x30, [sp], #16
     c88:	ret
     c8c:	mov	w0, #0xffffffff            	// #-1
     c90:	ret
     c94:	mov	w0, #0xffffffff            	// #-1
     c98:	b	c84 <grub_fdt_first_node+0x8c>
     c9c:	nop

0000000000000ca0 <grub_fdt_find_subnode>:
     ca0:	tst	x1, #0x3
     ca4:	b.ne	d84 <grub_fdt_find_subnode+0xe4>  // b.any
     ca8:	stp	x29, x30, [sp, #-48]!
     cac:	mov	x29, sp
     cb0:	stp	x21, x22, [sp, #32]
     cb4:	mov	x21, x0
     cb8:	ldr	w0, [x0, #8]
     cbc:	stp	x19, x20, [sp, #16]
     cc0:	ldr	w20, [x21, #36]
     cc4:	rev	w0, w0
     cc8:	add	x0, x0, x21
     ccc:	rev	w20, w20
     cd0:	add	x19, x0, w1, uxtw
     cd4:	add	x20, x20, x0
     cd8:	cmp	x19, x20
     cdc:	b.cs	d50 <grub_fdt_find_subnode+0xb0>  // b.hs, b.nlast
     ce0:	ldr	w0, [x0, w1, uxtw]
     ce4:	rev	w0, w0
     ce8:	cmp	w0, #0x1
     cec:	b.ne	d50 <grub_fdt_find_subnode+0xb0>  // b.any
     cf0:	mov	x22, x2
     cf4:	add	x19, x19, #0x4
     cf8:	b	d08 <grub_fdt_find_subnode+0x68>
     cfc:	ldrb	w0, [x1], #1
     d00:	mov	x19, x1
     d04:	cbz	w0, d14 <grub_fdt_find_subnode+0x74>
     d08:	mov	x1, x19
     d0c:	cmp	x19, x20
     d10:	b.cc	cfc <grub_fdt_find_subnode+0x5c>  // b.lo, b.ul, b.last
     d14:	add	x19, x19, #0x3
     d18:	mov	w3, #0x0                   	// #0
     d1c:	and	x19, x19, #0xfffffffffffffffc
     d20:	b	d38 <grub_fdt_find_subnode+0x98>
     d24:	mov	x1, x22
     d28:	add	x0, x0, #0x4
     d2c:	bl	0 <grub_strcmp>
     d30:	mov	w3, #0x1                   	// #1
     d34:	cbz	w0, d64 <grub_fdt_find_subnode+0xc4>
     d38:	mov	x1, x19
     d3c:	mov	x2, x20
     d40:	mov	x0, x21
     d44:	bl	5c8 <grub_mod_fini+0x108>
     d48:	mov	x19, x0
     d4c:	cbnz	x0, d24 <grub_fdt_find_subnode+0x84>
     d50:	mov	w0, #0xffffffff            	// #-1
     d54:	ldp	x19, x20, [sp, #16]
     d58:	ldp	x21, x22, [sp, #32]
     d5c:	ldp	x29, x30, [sp], #48
     d60:	ret
     d64:	ldr	w0, [x21, #8]
     d68:	sub	x19, x19, x21
     d6c:	ldp	x21, x22, [sp, #32]
     d70:	rev	w0, w0
     d74:	sub	w0, w19, w0
     d78:	ldp	x19, x20, [sp, #16]
     d7c:	ldp	x29, x30, [sp], #48
     d80:	ret
     d84:	mov	w0, #0xffffffff            	// #-1
     d88:	ret
     d8c:	nop

0000000000000d90 <grub_fdt_get_nodename>:
     d90:	ldr	w2, [x0, #8]
     d94:	mov	w1, w1
     d98:	add	x1, x1, #0x4
     d9c:	rev	w2, w2
     da0:	add	x1, x1, x2
     da4:	add	x0, x0, x1
     da8:	ret
     dac:	nop

0000000000000db0 <grub_fdt_add_subnode>:
     db0:	stp	x29, x30, [sp, #-64]!
     db4:	mov	x29, sp
     db8:	stp	x19, x20, [sp, #16]
     dbc:	mov	w19, w1
     dc0:	mov	x20, x0
     dc4:	mov	x0, x2
     dc8:	stp	x21, x22, [sp, #32]
     dcc:	mov	x21, x2
     dd0:	bl	0 <grub_strlen>
     dd4:	tst	x19, #0x3
     dd8:	b.ne	f30 <grub_fdt_add_subnode+0x180>  // b.any
     ddc:	add	w5, w0, #0x4
     de0:	mov	x0, x20
     de4:	and	w5, w5, #0xfffffffc
     de8:	add	w5, w5, #0x8
     dec:	bl	728 <grub_mod_fini+0x268>
     df0:	cmp	w0, w5
     df4:	b.cc	f30 <grub_fdt_add_subnode+0x180>  // b.lo, b.ul, b.last
     df8:	mov	w1, w5
     dfc:	mov	x0, x20
     e00:	bl	8d0 <grub_mod_fini+0x410>
     e04:	tbnz	w0, #31, f30 <grub_fdt_add_subnode+0x180>
     e08:	ldr	w22, [x20, #8]
     e0c:	mov	x0, x21
     e10:	stp	x23, x24, [sp, #48]
     e14:	rev	w22, w22
     e18:	ldr	w23, [x20, #36]
     e1c:	add	x22, x22, x20
     e20:	add	x19, x22, w19, sxtw
     e24:	bl	0 <grub_strlen>
     e28:	rev	w23, w23
     e2c:	add	x19, x19, #0x4
     e30:	add	x23, x23, x22
     e34:	mov	x1, x0
     e38:	b	e48 <grub_fdt_add_subnode+0x98>
     e3c:	ldrb	w2, [x0], #1
     e40:	mov	x19, x0
     e44:	cbz	w2, e54 <grub_fdt_add_subnode+0xa4>
     e48:	mov	x0, x19
     e4c:	cmp	x23, x19
     e50:	b.hi	e3c <grub_fdt_add_subnode+0x8c>  // b.pmore
     e54:	add	x19, x19, #0x3
     e58:	and	x19, x19, #0xfffffffffffffffc
     e5c:	cmp	x23, x19
     e60:	b.ls	f2c <grub_fdt_add_subnode+0x17c>  // b.plast
     e64:	ldr	w0, [x19]
     e68:	rev	w0, w0
     e6c:	cmp	w0, #0x3
     e70:	b.eq	f38 <grub_fdt_add_subnode+0x188>  // b.none
     e74:	b.hi	f18 <grub_fdt_add_subnode+0x168>  // b.pmore
     e78:	sub	w3, w0, #0x1
     e7c:	mov	w0, #0xffffffff            	// #-1
     e80:	cmp	w3, #0x1
     e84:	b.hi	f04 <grub_fdt_add_subnode+0x154>  // b.pmore
     e88:	add	w22, w1, #0x4
     e8c:	sub	x2, x23, x19
     e90:	and	w22, w22, #0xfffffffc
     e94:	mov	x1, x19
     e98:	add	w22, w22, #0x8
     e9c:	ldr	w23, [x20, #36]
     ea0:	add	x24, x19, w22, uxtw
     ea4:	rev	w23, w23
     ea8:	mov	x0, x24
     eac:	bl	0 <grub_memmove>
     eb0:	mov	x0, x19
     eb4:	mov	w2, #0x1000000             	// #16777216
     eb8:	mov	x1, x21
     ebc:	sub	x19, x19, x20
     ec0:	add	w22, w22, w23
     ec4:	str	w2, [x0], #4
     ec8:	rev	w22, w22
     ecc:	stur	wzr, [x24, #-8]
     ed0:	bl	0 <grub_strcpy>
     ed4:	mov	w0, #0x2000000             	// #33554432
     ed8:	stur	w0, [x24, #-4]
     edc:	ldp	x23, x24, [sp, #48]
     ee0:	str	w22, [x20, #36]
     ee4:	ldr	w0, [x20, #8]
     ee8:	rev	w0, w0
     eec:	sub	w0, w19, w0
     ef0:	ldp	x19, x20, [sp, #16]
     ef4:	ldp	x21, x22, [sp, #32]
     ef8:	ldp	x29, x30, [sp], #64
     efc:	ret
     f00:	mov	w0, #0xffffffff            	// #-1
     f04:	ldp	x19, x20, [sp, #16]
     f08:	ldp	x21, x22, [sp, #32]
     f0c:	ldp	x23, x24, [sp, #48]
     f10:	ldp	x29, x30, [sp], #64
     f14:	ret
     f18:	cmp	w0, #0x4
     f1c:	b.ne	f00 <grub_fdt_add_subnode+0x150>  // b.any
     f20:	add	x19, x19, #0x4
     f24:	cmp	x23, x19
     f28:	b.hi	e64 <grub_fdt_add_subnode+0xb4>  // b.pmore
     f2c:	ldp	x23, x24, [sp, #48]
     f30:	mov	w0, #0xffffffff            	// #-1
     f34:	b	ef0 <grub_fdt_add_subnode+0x140>
     f38:	ldr	w0, [x19, #4]
     f3c:	rev	w0, w0
     f40:	add	w0, w0, #0x3
     f44:	and	x0, x0, #0xfffffffc
     f48:	add	x0, x0, #0xc
     f4c:	add	x19, x19, x0
     f50:	cmp	x23, x19
     f54:	b.hi	e64 <grub_fdt_add_subnode+0xb4>  // b.pmore
     f58:	b	f2c <grub_fdt_add_subnode+0x17c>
     f5c:	nop

0000000000000f60 <grub_fdt_get_prop>:
     f60:	ldr	w6, [x0, #36]
     f64:	rev	w6, w6
     f68:	cmp	w1, w6
     f6c:	b.cs	fe0 <grub_fdt_get_prop+0x80>  // b.hs, b.nlast
     f70:	mov	w4, w1
     f74:	tst	x4, #0x3
     f78:	b.ne	fe0 <grub_fdt_get_prop+0x80>  // b.any
     f7c:	stp	x29, x30, [sp, #-32]!
     f80:	add	x4, x0, w1, uxtw
     f84:	mov	x29, sp
     f88:	str	x19, [sp, #16]
     f8c:	mov	x19, x3
     f90:	ldr	w3, [x0, #8]
     f94:	rev	w3, w3
     f98:	ldr	w3, [x4, w3, uxtw]
     f9c:	rev	w3, w3
     fa0:	cmp	w3, #0x1
     fa4:	b.ne	fd0 <grub_fdt_get_prop+0x70>  // b.any
     fa8:	bl	7a8 <grub_mod_fini+0x2e8>
     fac:	cbz	x0, fd0 <grub_fdt_get_prop+0x70>
     fb0:	cbz	x19, fc0 <grub_fdt_get_prop+0x60>
     fb4:	ldr	w1, [x0, #4]
     fb8:	rev	w1, w1
     fbc:	str	w1, [x19]
     fc0:	add	x0, x0, #0xc
     fc4:	ldr	x19, [sp, #16]
     fc8:	ldp	x29, x30, [sp], #32
     fcc:	ret
     fd0:	mov	x0, #0x0                   	// #0
     fd4:	ldr	x19, [sp, #16]
     fd8:	ldp	x29, x30, [sp], #32
     fdc:	ret
     fe0:	mov	x0, #0x0                   	// #0
     fe4:	ret

0000000000000fe8 <grub_fdt_set_prop>:
     fe8:	stp	x29, x30, [sp, #-96]!
     fec:	mov	x29, sp
     ff0:	stp	x21, x22, [sp, #32]
     ff4:	mov	x22, x3
     ff8:	ldr	w3, [x0, #36]
     ffc:	stp	x19, x20, [sp, #16]
    1000:	mov	w19, w1
    1004:	rev	w3, w3
    1008:	cmp	w19, w3
    100c:	b.cs	120c <grub_fdt_set_prop+0x224>  // b.hs, b.nlast
    1010:	stp	x25, x26, [sp, #64]
    1014:	ands	w26, w19, #0x3
    1018:	b.ne	1208 <grub_fdt_set_prop+0x220>  // b.any
    101c:	ldr	w3, [x0, #8]
    1020:	mov	w21, w4
    1024:	add	x4, x0, x19
    1028:	mov	x25, x0
    102c:	rev	w3, w3
    1030:	add	x19, x19, #0x4
    1034:	ldr	w3, [x4, w3, uxtw]
    1038:	rev	w3, w3
    103c:	cmp	w3, #0x1
    1040:	b.ne	1208 <grub_fdt_set_prop+0x220>  // b.any
    1044:	add	w20, w21, #0x3
    1048:	stp	x23, x24, [sp, #48]
    104c:	and	w20, w20, #0xfffffffc
    1050:	mov	x23, x2
    1054:	stp	x27, x28, [sp, #80]
    1058:	bl	7a8 <grub_mod_fini+0x2e8>
    105c:	mov	x24, x0
    1060:	cbz	x0, 11ec <grub_fdt_set_prop+0x204>
    1064:	ldr	w1, [x0, #4]
    1068:	rev	w1, w1
    106c:	add	w1, w1, #0x3
    1070:	and	w3, w1, #0xfffffffc
    1074:	cmp	wzr, w1, lsr #2
    1078:	lsr	w1, w1, #2
    107c:	b.eq	10a4 <grub_fdt_set_prop+0xbc>  // b.none
    1080:	sub	w2, w1, #0x1
    1084:	add	x5, x0, #0x10
    1088:	add	x1, x0, #0xc
    108c:	mov	w0, #0x4000000             	// #67108864
    1090:	add	x5, x5, w2, uxtw #2
    1094:	nop
    1098:	str	w0, [x1], #4
    109c:	cmp	x5, x1
    10a0:	b.ne	1098 <grub_fdt_set_prop+0xb0>  // b.any
    10a4:	cmp	w3, w21
    10a8:	b.cs	11ac <grub_fdt_set_prop+0x1c4>  // b.hs, b.nlast
    10ac:	ldr	w26, [x24, #8]
    10b0:	add	w27, w20, #0xc
    10b4:	mov	w5, w27
    10b8:	mov	x1, #0x400000004000000     	// #288230376218820608
    10bc:	rev	w26, w26
    10c0:	mov	w0, #0x4000000             	// #67108864
    10c4:	mov	w28, #0x1                   	// #1
    10c8:	str	x1, [x24]
    10cc:	str	w0, [x24, #8]
    10d0:	mov	x0, x25
    10d4:	bl	728 <grub_mod_fini+0x268>
    10d8:	cmp	w0, w5
    10dc:	b.cc	1214 <grub_fdt_set_prop+0x22c>  // b.lo, b.ul, b.last
    10e0:	mov	w1, w27
    10e4:	mov	x0, x25
    10e8:	bl	8d0 <grub_mod_fini+0x410>
    10ec:	tbnz	w0, #31, 1214 <grub_fdt_set_prop+0x22c>
    10f0:	cbnz	w28, 1138 <grub_fdt_set_prop+0x150>
    10f4:	ldr	w26, [x25, #32]
    10f8:	mov	x1, x23
    10fc:	ldr	w0, [x25, #12]
    1100:	rev	w2, w26
    1104:	rev	w26, w26
    1108:	rev	w0, w0
    110c:	add	x0, x0, x2
    1110:	add	x0, x25, x0
    1114:	bl	0 <grub_strcpy>
    1118:	ldr	w1, [x25, #32]
    111c:	mov	x0, x23
    1120:	rev	w23, w1
    1124:	add	w23, w23, #0x1
    1128:	bl	0 <grub_strlen>
    112c:	add	w23, w23, w0
    1130:	rev	w23, w23
    1134:	str	w23, [x25, #32]
    1138:	ldr	w0, [x25, #8]
    113c:	rev	w26, w26
    1140:	rev	w0, w0
    1144:	add	x0, x25, x0
    1148:	add	x19, x0, x19
    114c:	mov	x0, x19
    1150:	bl	0 <grub_strlen>
    1154:	ldr	w1, [x25, #8]
    1158:	add	x23, x0, #0x4
    115c:	ldr	w0, [x25, #36]
    1160:	and	x23, x23, #0xfffffffffffffffc
    1164:	add	x24, x19, x23
    1168:	rev	w1, w1
    116c:	rev	w0, w0
    1170:	sub	x2, x25, x24
    1174:	add	x1, x1, x0
    1178:	add	x0, x20, #0xc
    117c:	add	x2, x1, x2
    1180:	add	x0, x24, x0
    1184:	mov	x1, x24
    1188:	bl	0 <grub_memmove>
    118c:	ldr	w0, [x25, #36]
    1190:	mov	w1, #0x3000000             	// #50331648
    1194:	rev	w0, w0
    1198:	add	w0, w0, w27
    119c:	rev	w0, w0
    11a0:	str	w0, [x25, #36]
    11a4:	str	w1, [x19, x23]
    11a8:	str	w26, [x24, #8]
    11ac:	add	x20, x24, x20
    11b0:	rev	w0, w21
    11b4:	str	w0, [x24, #4]
    11b8:	mov	x1, x22
    11bc:	add	x0, x24, #0xc
    11c0:	mov	w2, w21
    11c4:	str	wzr, [x20, #8]
    11c8:	bl	0 <grub_memmove>
    11cc:	ldp	x23, x24, [sp, #48]
    11d0:	mov	w0, #0x0                   	// #0
    11d4:	ldp	x25, x26, [sp, #64]
    11d8:	ldp	x27, x28, [sp, #80]
    11dc:	ldp	x19, x20, [sp, #16]
    11e0:	ldp	x21, x22, [sp, #32]
    11e4:	ldp	x29, x30, [sp], #96
    11e8:	ret
    11ec:	mov	x0, x23
    11f0:	add	w27, w20, #0xc
    11f4:	bl	0 <grub_strlen>
    11f8:	add	x5, x0, #0x1
    11fc:	add	w5, w27, w5
    1200:	mov	w28, #0x0                   	// #0
    1204:	b	10d0 <grub_fdt_set_prop+0xe8>
    1208:	ldp	x25, x26, [sp, #64]
    120c:	mov	w0, #0xffffffff            	// #-1
    1210:	b	11dc <grub_fdt_set_prop+0x1f4>
    1214:	mov	w0, #0xffffffff            	// #-1
    1218:	ldp	x23, x24, [sp, #48]
    121c:	ldp	x25, x26, [sp, #64]
    1220:	ldp	x27, x28, [sp, #80]
    1224:	b	11dc <grub_fdt_set_prop+0x1f4>

0000000000001228 <grub_fdt_create_empty_tree>:
    1228:	cmp	w1, #0x47
    122c:	b.ls	12a8 <grub_fdt_create_empty_tree+0x80>  // b.plast
    1230:	stp	x29, x30, [sp, #-32]!
    1234:	mov	w2, w1
    1238:	mov	x29, sp
    123c:	stp	x19, x20, [sp, #16]
    1240:	mov	x19, x0
    1244:	mov	w20, w1
    1248:	mov	w1, #0x0                   	// #0
    124c:	bl	0 <grub_memset>
    1250:	mov	x1, #0x2000000             	// #33554432
    1254:	mov	x6, #0x38000000            	// #939524096
    1258:	mov	x5, #0x28000000            	// #671088640
    125c:	mov	w7, #0xdd0                 	// #3536
    1260:	rev	w20, w20
    1264:	movk	x1, #0x900, lsl #48
    1268:	mov	w2, #0x1000000             	// #16777216
    126c:	movk	x6, #0x4800, lsl #48
    1270:	movk	x5, #0x1100, lsl #48
    1274:	mov	w4, #0x11000000            	// #285212672
    1278:	mov	w3, #0x10000000            	// #268435456
    127c:	movk	w7, #0xedfe, lsl #16
    1280:	stp	w7, w20, [x19]
    1284:	mov	w0, #0x0                   	// #0
    1288:	stp	x6, x5, [x19, #8]
    128c:	str	w4, [x19, #24]
    1290:	str	w3, [x19, #36]
    1294:	str	w2, [x19, #56]
    1298:	str	x1, [x19, #64]
    129c:	ldp	x19, x20, [sp, #16]
    12a0:	ldp	x29, x30, [sp], #32
    12a4:	ret
    12a8:	mov	w0, #0xffffffff            	// #-1
    12ac:	ret
