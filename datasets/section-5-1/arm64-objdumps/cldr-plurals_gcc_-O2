
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//cldr-plurals_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000401270 <_init>:
  401270:	stp	x29, x30, [sp, #-16]!
  401274:	mov	x29, sp
  401278:	bl	401f10 <call_weak_fn>
  40127c:	ldp	x29, x30, [sp], #16
  401280:	ret

Disassembly of section .plt:

0000000000401290 <.plt>:
  401290:	stp	x16, x30, [sp, #-16]!
  401294:	adrp	x16, 415000 <__FRAME_END__+0xfdb4>
  401298:	ldr	x17, [x16, #4088]
  40129c:	add	x16, x16, #0xff8
  4012a0:	br	x17
  4012a4:	nop
  4012a8:	nop
  4012ac:	nop

00000000004012b0 <memcpy@plt>:
  4012b0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012b4:	ldr	x17, [x16]
  4012b8:	add	x16, x16, #0x0
  4012bc:	br	x17

00000000004012c0 <strlen@plt>:
  4012c0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012c4:	ldr	x17, [x16, #8]
  4012c8:	add	x16, x16, #0x8
  4012cc:	br	x17

00000000004012d0 <exit@plt>:
  4012d0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012d4:	ldr	x17, [x16, #16]
  4012d8:	add	x16, x16, #0x10
  4012dc:	br	x17

00000000004012e0 <error@plt>:
  4012e0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012e4:	ldr	x17, [x16, #24]
  4012e8:	add	x16, x16, #0x18
  4012ec:	br	x17

00000000004012f0 <set_program_name@plt>:
  4012f0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012f4:	ldr	x17, [x16, #32]
  4012f8:	add	x16, x16, #0x20
  4012fc:	br	x17

0000000000401300 <xmlHasProp@plt>:
  401300:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401304:	ldr	x17, [x16, #40]
  401308:	add	x16, x16, #0x28
  40130c:	br	x17

0000000000401310 <sprintf@plt>:
  401310:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401314:	ldr	x17, [x16, #48]
  401318:	add	x16, x16, #0x30
  40131c:	br	x17

0000000000401320 <xmlFreeDoc@plt>:
  401320:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401324:	ldr	x17, [x16, #56]
  401328:	add	x16, x16, #0x38
  40132c:	br	x17

0000000000401330 <__cxa_atexit@plt>:
  401330:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401334:	ldr	x17, [x16, #64]
  401338:	add	x16, x16, #0x40
  40133c:	br	x17

0000000000401340 <fputc@plt>:
  401340:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401344:	ldr	x17, [x16, #72]
  401348:	add	x16, x16, #0x48
  40134c:	br	x17

0000000000401350 <fileno@plt>:
  401350:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401354:	ldr	x17, [x16, #80]
  401358:	add	x16, x16, #0x50
  40135c:	br	x17

0000000000401360 <fclose@plt>:
  401360:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401364:	ldr	x17, [x16, #88]
  401368:	add	x16, x16, #0x58
  40136c:	br	x17

0000000000401370 <fopen@plt>:
  401370:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401374:	ldr	x17, [x16, #96]
  401378:	add	x16, x16, #0x60
  40137c:	br	x17

0000000000401380 <malloc@plt>:
  401380:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401384:	ldr	x17, [x16, #104]
  401388:	add	x16, x16, #0x68
  40138c:	br	x17

0000000000401390 <xrealloc@plt>:
  401390:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401394:	ldr	x17, [x16, #112]
  401398:	add	x16, x16, #0x70
  40139c:	br	x17

00000000004013a0 <xmlGetProp@plt>:
  4013a0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013a4:	ldr	x17, [x16, #120]
  4013a8:	add	x16, x16, #0x78
  4013ac:	br	x17

00000000004013b0 <xmlCheckVersion@plt>:
  4013b0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013b4:	ldr	x17, [x16, #128]
  4013b8:	add	x16, x16, #0x80
  4013bc:	br	x17

00000000004013c0 <strncmp@plt>:
  4013c0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013c4:	ldr	x17, [x16, #136]
  4013c8:	add	x16, x16, #0x88
  4013cc:	br	x17

00000000004013d0 <bindtextdomain@plt>:
  4013d0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013d4:	ldr	x17, [x16, #144]
  4013d8:	add	x16, x16, #0x90
  4013dc:	br	x17

00000000004013e0 <__libc_start_main@plt>:
  4013e0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013e4:	ldr	x17, [x16, #152]
  4013e8:	add	x16, x16, #0x98
  4013ec:	br	x17

00000000004013f0 <memset@plt>:
  4013f0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013f4:	ldr	x17, [x16, #160]
  4013f8:	add	x16, x16, #0xa0
  4013fc:	br	x17

0000000000401400 <xmalloc@plt>:
  401400:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401404:	ldr	x17, [x16, #168]
  401408:	add	x16, x16, #0xa8
  40140c:	br	x17

0000000000401410 <xstrdup@plt>:
  401410:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401414:	ldr	x17, [x16, #176]
  401418:	add	x16, x16, #0xb0
  40141c:	br	x17

0000000000401420 <xmlStrlen@plt>:
  401420:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401424:	ldr	x17, [x16, #184]
  401428:	add	x16, x16, #0xb8
  40142c:	br	x17

0000000000401430 <close_stdout@plt>:
  401430:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401434:	ldr	x17, [x16, #192]
  401438:	add	x16, x16, #0xc0
  40143c:	br	x17

0000000000401440 <xmlNodeGetContent@plt>:
  401440:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401444:	ldr	x17, [x16, #200]
  401448:	add	x16, x16, #0xc8
  40144c:	br	x17

0000000000401450 <xmlReadFd@plt>:
  401450:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401454:	ldr	x17, [x16, #208]
  401458:	add	x16, x16, #0xd0
  40145c:	br	x17

0000000000401460 <strrchr@plt>:
  401460:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401464:	ldr	x17, [x16, #216]
  401468:	add	x16, x16, #0xd8
  40146c:	br	x17

0000000000401470 <__gmon_start__@plt>:
  401470:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401474:	ldr	x17, [x16, #224]
  401478:	add	x16, x16, #0xe0
  40147c:	br	x17

0000000000401480 <abort@plt>:
  401480:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401484:	ldr	x17, [x16, #232]
  401488:	add	x16, x16, #0xe8
  40148c:	br	x17

0000000000401490 <u8_mbtouc_aux@plt>:
  401490:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401494:	ldr	x17, [x16, #240]
  401498:	add	x16, x16, #0xf0
  40149c:	br	x17

00000000004014a0 <puts@plt>:
  4014a0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014a4:	ldr	x17, [x16, #248]
  4014a8:	add	x16, x16, #0xf8
  4014ac:	br	x17

00000000004014b0 <textdomain@plt>:
  4014b0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014b4:	ldr	x17, [x16, #256]
  4014b8:	add	x16, x16, #0x100
  4014bc:	br	x17

00000000004014c0 <getopt_long@plt>:
  4014c0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014c4:	ldr	x17, [x16, #264]
  4014c8:	add	x16, x16, #0x108
  4014cc:	br	x17

00000000004014d0 <strcmp@plt>:
  4014d0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014d4:	ldr	x17, [x16, #272]
  4014d8:	add	x16, x16, #0x110
  4014dc:	br	x17

00000000004014e0 <basename@plt>:
  4014e0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014e4:	ldr	x17, [x16, #280]
  4014e8:	add	x16, x16, #0x118
  4014ec:	br	x17

00000000004014f0 <proper_name@plt>:
  4014f0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014f4:	ldr	x17, [x16, #288]
  4014f8:	add	x16, x16, #0x120
  4014fc:	br	x17

0000000000401500 <free@plt>:
  401500:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401504:	ldr	x17, [x16, #296]
  401508:	add	x16, x16, #0x128
  40150c:	br	x17

0000000000401510 <fwrite@plt>:
  401510:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401514:	ldr	x17, [x16, #304]
  401518:	add	x16, x16, #0x130
  40151c:	br	x17

0000000000401520 <xmlGetLineNo@plt>:
  401520:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401524:	ldr	x17, [x16, #312]
  401528:	add	x16, x16, #0x138
  40152c:	br	x17

0000000000401530 <dcgettext@plt>:
  401530:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401534:	ldr	x17, [x16, #320]
  401538:	add	x16, x16, #0x140
  40153c:	br	x17

0000000000401540 <xmlStrncmp@plt>:
  401540:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401544:	ldr	x17, [x16, #328]
  401548:	add	x16, x16, #0x148
  40154c:	br	x17

0000000000401550 <printf@plt>:
  401550:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401554:	ldr	x17, [x16, #336]
  401558:	add	x16, x16, #0x150
  40155c:	br	x17

0000000000401560 <xmlStrEqual@plt>:
  401560:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401564:	ldr	x17, [x16, #344]
  401568:	add	x16, x16, #0x158
  40156c:	br	x17

0000000000401570 <xmlDocGetRootElement@plt>:
  401570:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401574:	ldr	x17, [x16, #352]
  401578:	add	x16, x16, #0x160
  40157c:	br	x17

0000000000401580 <putchar@plt>:
  401580:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401584:	ldr	x17, [x16, #360]
  401588:	add	x16, x16, #0x168
  40158c:	br	x17

0000000000401590 <__getdelim@plt>:
  401590:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401594:	ldr	x17, [x16, #368]
  401598:	add	x16, x16, #0x170
  40159c:	br	x17

00000000004015a0 <error_at_line@plt>:
  4015a0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4015a4:	ldr	x17, [x16, #376]
  4015a8:	add	x16, x16, #0x178
  4015ac:	br	x17

00000000004015b0 <fprintf@plt>:
  4015b0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4015b4:	ldr	x17, [x16, #384]
  4015b8:	add	x16, x16, #0x180
  4015bc:	br	x17

00000000004015c0 <setlocale@plt>:
  4015c0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4015c4:	ldr	x17, [x16, #392]
  4015c8:	add	x16, x16, #0x188
  4015cc:	br	x17

Disassembly of section .text:

00000000004015d0 <main>:
  4015d0:	stp	x29, x30, [sp, #-192]!
  4015d4:	mov	x29, sp
  4015d8:	stp	x21, x22, [sp, #32]
  4015dc:	mov	w21, w0
  4015e0:	adrp	x22, 404000 <cldr_plural_rule_list_print+0x338>
  4015e4:	ldr	x0, [x1]
  4015e8:	stp	x19, x20, [sp, #16]
  4015ec:	mov	x20, x1
  4015f0:	stp	x23, x24, [sp, #48]
  4015f4:	add	x22, x22, #0x590
  4015f8:	mov	w23, #0x0                   	// #0
  4015fc:	stp	x25, x26, [sp, #64]
  401600:	adrp	x25, 404000 <cldr_plural_rule_list_print+0x338>
  401604:	add	x25, x25, #0x5a8
  401608:	stp	x27, x28, [sp, #80]
  40160c:	bl	4012f0 <set_program_name@plt>
  401610:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401614:	mov	w0, #0x6                   	// #6
  401618:	add	x1, x1, #0x760
  40161c:	bl	4015c0 <setlocale@plt>
  401620:	adrp	x26, 404000 <cldr_plural_rule_list_print+0x338>
  401624:	mov	x1, x22
  401628:	mov	x0, x25
  40162c:	bl	4013d0 <bindtextdomain@plt>
  401630:	add	x26, x26, #0xbd0
  401634:	mov	x1, x22
  401638:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  40163c:	add	x0, x0, #0x180
  401640:	bl	4013d0 <bindtextdomain@plt>
  401644:	mov	x0, x25
  401648:	adrp	x22, 404000 <cldr_plural_rule_list_print+0x338>
  40164c:	bl	4014b0 <textdomain@plt>
  401650:	add	x22, x22, #0x5e0
  401654:	adrp	x0, 401000 <_init-0x270>
  401658:	mov	w24, #0x0                   	// #0
  40165c:	add	x0, x0, #0x430
  401660:	mov	w19, #0x0                   	// #0
  401664:	bl	404108 <atexit>
  401668:	b	40167c <main+0xac>
  40166c:	cbz	w0, 40167c <main+0xac>
  401670:	cmp	w0, #0x56
  401674:	b.ne	401d5c <main+0x78c>  // b.any
  401678:	mov	w23, #0x1                   	// #1
  40167c:	mov	x3, x26
  401680:	mov	x2, x22
  401684:	mov	x1, x20
  401688:	mov	w0, w21
  40168c:	mov	x4, #0x0                   	// #0
  401690:	bl	4014c0 <getopt_long@plt>
  401694:	cmn	w0, #0x1
  401698:	b.eq	4016d8 <main+0x108>  // b.none
  40169c:	nop
  4016a0:	cmp	w0, #0x63
  4016a4:	b.eq	401784 <main+0x1b4>  // b.none
  4016a8:	b.le	40166c <main+0x9c>
  4016ac:	cmp	w0, #0x68
  4016b0:	b.ne	401d5c <main+0x78c>  // b.any
  4016b4:	mov	x3, x26
  4016b8:	mov	x2, x22
  4016bc:	mov	x1, x20
  4016c0:	mov	w0, w21
  4016c4:	mov	x4, #0x0                   	// #0
  4016c8:	mov	w24, #0x1                   	// #1
  4016cc:	bl	4014c0 <getopt_long@plt>
  4016d0:	cmn	w0, #0x1
  4016d4:	b.ne	4016a0 <main+0xd0>  // b.any
  4016d8:	cbnz	w23, 4017bc <main+0x1ec>
  4016dc:	cbnz	w24, 401dd8 <main+0x808>
  4016e0:	adrp	x22, 416000 <memcpy@GLIBC_2.17>
  4016e4:	ldr	w0, [x22, #424]
  4016e8:	add	w1, w0, #0x2
  4016ec:	cmp	w1, w21
  4016f0:	b.eq	401858 <main+0x288>  // b.none
  4016f4:	cmp	w0, w21
  4016f8:	b.ne	40178c <main+0x1bc>  // b.any
  4016fc:	adrp	x20, 416000 <memcpy@GLIBC_2.17>
  401700:	adrp	x21, 416000 <memcpy@GLIBC_2.17>
  401704:	add	x20, x20, #0x1b8
  401708:	stp	xzr, xzr, [sp, #176]
  40170c:	b	40173c <main+0x16c>
  401710:	b.eq	401730 <main+0x160>  // b.none
  401714:	add	x2, x0, w1, sxtw
  401718:	ldurb	w2, [x2, #-1]
  40171c:	cmp	w2, #0xa
  401720:	b.ne	401730 <main+0x160>  // b.any
  401724:	sub	w1, w1, #0x1
  401728:	strb	wzr, [x0, w1, sxtw]
  40172c:	ldr	x0, [sp, #176]
  401730:	bl	403c68 <cldr_plural_parse>
  401734:	mov	x19, x0
  401738:	cbnz	x0, 401844 <main+0x274>
  40173c:	ldr	x3, [x20]
  401740:	add	x1, sp, #0xb8
  401744:	add	x0, sp, #0xb0
  401748:	mov	w2, #0xa                   	// #10
  40174c:	bl	401590 <__getdelim@plt>
  401750:	mov	x1, x0
  401754:	cmp	w0, #0x0
  401758:	ldr	x0, [sp, #176]
  40175c:	b.ge	401710 <main+0x140>  // b.tcont
  401760:	bl	401500 <free@plt>
  401764:	mov	w0, #0x0                   	// #0
  401768:	ldp	x19, x20, [sp, #16]
  40176c:	ldp	x21, x22, [sp, #32]
  401770:	ldp	x23, x24, [sp, #48]
  401774:	ldp	x25, x26, [sp, #64]
  401778:	ldp	x27, x28, [sp, #80]
  40177c:	ldp	x29, x30, [sp], #192
  401780:	ret
  401784:	mov	w19, #0x1                   	// #1
  401788:	b	40167c <main+0xac>
  40178c:	mov	w2, #0x5                   	// #5
  401790:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401794:	mov	x0, #0x0                   	// #0
  401798:	add	x1, x1, #0xb48
  40179c:	bl	401530 <dcgettext@plt>
  4017a0:	mov	x2, x0
  4017a4:	ldrsw	x3, [x22, #424]
  4017a8:	mov	w1, #0x0                   	// #0
  4017ac:	mov	w0, #0x1                   	// #1
  4017b0:	ldr	x3, [x20, x3, lsl #3]
  4017b4:	bl	4012e0 <error@plt>
  4017b8:	b	401764 <main+0x194>
  4017bc:	adrp	x0, 416000 <memcpy@GLIBC_2.17>
  4017c0:	ldr	x0, [x0, #448]
  4017c4:	bl	4014e0 <basename@plt>
  4017c8:	mov	x1, x0
  4017cc:	adrp	x3, 404000 <cldr_plural_rule_list_print+0x338>
  4017d0:	add	x3, x3, #0x5e8
  4017d4:	mov	x2, x25
  4017d8:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  4017dc:	add	x0, x0, #0x5f0
  4017e0:	bl	401550 <printf@plt>
  4017e4:	mov	w2, #0x5                   	// #5
  4017e8:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  4017ec:	mov	x0, #0x0                   	// #0
  4017f0:	add	x1, x1, #0x600
  4017f4:	bl	401530 <dcgettext@plt>
  4017f8:	adrp	x2, 404000 <cldr_plural_rule_list_print+0x338>
  4017fc:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401800:	add	x2, x2, #0x6e0
  401804:	add	x1, x1, #0x708
  401808:	bl	401550 <printf@plt>
  40180c:	mov	w2, #0x5                   	// #5
  401810:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401814:	mov	x0, #0x0                   	// #0
  401818:	add	x1, x1, #0x718
  40181c:	bl	401530 <dcgettext@plt>
  401820:	mov	x19, x0
  401824:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401828:	add	x0, x1, #0x728
  40182c:	bl	4014f0 <proper_name@plt>
  401830:	mov	x1, x0
  401834:	mov	x0, x19
  401838:	bl	401550 <printf@plt>
  40183c:	mov	w0, #0x0                   	// #0
  401840:	bl	4012d0 <exit@plt>
  401844:	ldr	x1, [x21, #432]
  401848:	bl	403cc8 <cldr_plural_rule_list_print>
  40184c:	mov	x0, x19
  401850:	bl	403c00 <cldr_plural_rule_list_free>
  401854:	b	40173c <main+0x16c>
  401858:	sbfiz	x1, x0, #3, #32
  40185c:	mov	w0, #0x51ad                	// #20909
  401860:	add	x2, x20, x1
  401864:	ldr	x24, [x20, x1]
  401868:	ldr	x26, [x2, #8]
  40186c:	bl	4013b0 <xmlCheckVersion@plt>
  401870:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401874:	add	x1, x1, #0xa40
  401878:	mov	x0, x26
  40187c:	bl	401370 <fopen@plt>
  401880:	mov	x20, x0
  401884:	cbz	x0, 401cfc <main+0x72c>
  401888:	mov	x0, x20
  40188c:	bl	401350 <fileno@plt>
  401890:	mov	x1, x26
  401894:	mov	w3, #0x940                 	// #2368
  401898:	mov	x2, #0x0                   	// #0
  40189c:	bl	401450 <xmlReadFd@plt>
  4018a0:	mov	x21, x0
  4018a4:	cbz	x0, 401cd4 <main+0x704>
  4018a8:	mov	x0, x21
  4018ac:	bl	401570 <xmlDocGetRootElement@plt>
  4018b0:	mov	x22, x0
  4018b4:	cbz	x0, 401c64 <main+0x694>
  4018b8:	ldr	x0, [x0, #16]
  4018bc:	adrp	x25, 404000 <cldr_plural_rule_list_print+0x338>
  4018c0:	add	x25, x25, #0xaa0
  4018c4:	mov	x1, x25
  4018c8:	bl	401560 <xmlStrEqual@plt>
  4018cc:	cbz	w0, 401c6c <main+0x69c>
  4018d0:	ldr	x23, [x22, #24]
  4018d4:	adrp	x22, 404000 <cldr_plural_rule_list_print+0x338>
  4018d8:	add	x22, x22, #0xab8
  4018dc:	cbnz	x23, 4018ec <main+0x31c>
  4018e0:	b	401b88 <main+0x5b8>
  4018e4:	ldr	x23, [x23, #48]
  4018e8:	cbz	x23, 401b88 <main+0x5b8>
  4018ec:	ldr	w0, [x23, #8]
  4018f0:	cmp	w0, #0x1
  4018f4:	b.ne	4018e4 <main+0x314>  // b.any
  4018f8:	ldr	x0, [x23, #16]
  4018fc:	mov	x1, x22
  401900:	bl	401560 <xmlStrEqual@plt>
  401904:	cbz	w0, 4018e4 <main+0x314>
  401908:	mov	x0, x24
  40190c:	bl	4012c0 <strlen@plt>
  401910:	ldr	x22, [x23, #24]
  401914:	str	x0, [sp, #104]
  401918:	cbz	x22, 401bb4 <main+0x5e4>
  40191c:	adrp	x25, 404000 <cldr_plural_rule_list_print+0x338>
  401920:	adrp	x27, 404000 <cldr_plural_rule_list_print+0x338>
  401924:	add	x25, x25, #0xac0
  401928:	add	x0, x27, #0xb08
  40192c:	mov	x23, #0x0                   	// #0
  401930:	stp	x0, xzr, [sp, #112]
  401934:	str	xzr, [sp, #144]
  401938:	b	401944 <main+0x374>
  40193c:	ldr	x22, [x22, #48]
  401940:	cbz	x22, 401b48 <main+0x578>
  401944:	ldr	w0, [x22, #8]
  401948:	cmp	w0, #0x1
  40194c:	b.ne	40193c <main+0x36c>  // b.any
  401950:	ldr	x0, [x22, #16]
  401954:	mov	x1, x25
  401958:	bl	401560 <xmlStrEqual@plt>
  40195c:	cbz	w0, 40193c <main+0x36c>
  401960:	adrp	x28, 404000 <cldr_plural_rule_list_print+0x338>
  401964:	add	x28, x28, #0xad0
  401968:	mov	x1, x28
  40196c:	mov	x0, x22
  401970:	bl	401300 <xmlHasProp@plt>
  401974:	cbz	x0, 401c1c <main+0x64c>
  401978:	mov	x1, x28
  40197c:	mov	x0, x22
  401980:	bl	4013a0 <xmlGetProp@plt>
  401984:	mov	x27, x0
  401988:	mov	x28, x0
  40198c:	ldrb	w0, [x28]
  401990:	cbz	w0, 401d24 <main+0x754>
  401994:	ldrb	w0, [x28]
  401998:	cmp	w0, #0xd
  40199c:	b.hi	4019f8 <main+0x428>  // b.pmore
  4019a0:	cmp	w0, #0x8
  4019a4:	b.hi	401a00 <main+0x430>  // b.pmore
  4019a8:	ldr	w2, [sp, #104]
  4019ac:	mov	x1, x24
  4019b0:	mov	x0, x28
  4019b4:	bl	401540 <xmlStrncmp@plt>
  4019b8:	cbnz	w0, 4019d8 <main+0x408>
  4019bc:	ldr	x0, [sp, #104]
  4019c0:	ldrb	w0, [x28, x0]
  4019c4:	cbz	w0, 401a20 <main+0x450>
  4019c8:	cmp	w0, #0xd
  4019cc:	b.hi	401a18 <main+0x448>  // b.pmore
  4019d0:	cmp	w0, #0x8
  4019d4:	b.hi	401a20 <main+0x450>  // b.pmore
  4019d8:	ldrb	w0, [x28]
  4019dc:	cbz	w0, 40198c <main+0x3bc>
  4019e0:	cmp	w0, #0xd
  4019e4:	b.hi	401a08 <main+0x438>  // b.pmore
  4019e8:	cmp	w0, #0x8
  4019ec:	b.hi	40198c <main+0x3bc>  // b.pmore
  4019f0:	add	x28, x28, #0x1
  4019f4:	b	4019d8 <main+0x408>
  4019f8:	cmp	w0, #0x20
  4019fc:	b.ne	4019a8 <main+0x3d8>  // b.any
  401a00:	add	x28, x28, #0x1
  401a04:	b	401994 <main+0x3c4>
  401a08:	cmp	w0, #0x20
  401a0c:	b.eq	40198c <main+0x3bc>  // b.none
  401a10:	add	x28, x28, #0x1
  401a14:	b	4019d8 <main+0x408>
  401a18:	cmp	w0, #0x20
  401a1c:	b.ne	4019d8 <main+0x408>  // b.any
  401a20:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401a24:	add	x2, x1, #0x1c8
  401a28:	str	x2, [sp, #128]
  401a2c:	mov	x0, x27
  401a30:	ldr	x1, [x1, #456]
  401a34:	blr	x1
  401a38:	ldr	x1, [sp, #120]
  401a3c:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  401a40:	ldr	x28, [x22, #24]
  401a44:	add	x0, x0, #0xb18
  401a48:	add	x1, x1, #0x4
  401a4c:	str	x0, [sp, #136]
  401a50:	str	x1, [sp, #152]
  401a54:	cbz	x28, 40193c <main+0x36c>
  401a58:	ldr	w0, [x28, #8]
  401a5c:	cmp	w0, #0x1
  401a60:	b.eq	401a6c <main+0x49c>  // b.none
  401a64:	ldr	x28, [x28, #48]
  401a68:	b	401a54 <main+0x484>
  401a6c:	ldr	x0, [x28, #16]
  401a70:	ldr	x1, [sp, #112]
  401a74:	bl	401560 <xmlStrEqual@plt>
  401a78:	cbz	w0, 401a64 <main+0x494>
  401a7c:	ldr	x1, [sp, #136]
  401a80:	mov	x0, x28
  401a84:	bl	401300 <xmlHasProp@plt>
  401a88:	cbz	x0, 401d94 <main+0x7c4>
  401a8c:	ldr	x1, [sp, #136]
  401a90:	mov	x0, x28
  401a94:	bl	4013a0 <xmlGetProp@plt>
  401a98:	mov	x2, x0
  401a9c:	mov	x0, x28
  401aa0:	str	x2, [sp, #160]
  401aa4:	bl	401440 <xmlNodeGetContent@plt>
  401aa8:	mov	x27, x0
  401aac:	ldr	x2, [sp, #160]
  401ab0:	str	x2, [sp, #168]
  401ab4:	mov	x0, x2
  401ab8:	bl	401420 <xmlStrlen@plt>
  401abc:	mov	w1, w0
  401ac0:	mov	x0, x27
  401ac4:	str	w1, [sp, #160]
  401ac8:	bl	401420 <xmlStrlen@plt>
  401acc:	sxtw	x5, w0
  401ad0:	ldr	w1, [sp, #160]
  401ad4:	ldr	x0, [sp, #152]
  401ad8:	add	x1, x5, w1, sxtw
  401adc:	add	x5, x1, x0
  401ae0:	ldr	x0, [sp, #144]
  401ae4:	add	x1, x5, #0x1
  401ae8:	ldr	x2, [sp, #168]
  401aec:	cmp	x1, x0
  401af0:	b.hi	401cac <main+0x6dc>  // b.pmore
  401af4:	ldr	x0, [sp, #120]
  401af8:	mov	x3, x27
  401afc:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401b00:	add	x1, x1, #0xb20
  401b04:	add	x0, x23, x0
  401b08:	stp	x2, x5, [sp, #152]
  401b0c:	bl	401310 <sprintf@plt>
  401b10:	ldp	x2, x5, [sp, #152]
  401b14:	str	x5, [sp, #120]
  401b18:	ldr	x0, [sp, #128]
  401b1c:	ldr	x1, [x0]
  401b20:	mov	x0, x2
  401b24:	add	x2, x5, #0x4
  401b28:	str	x2, [sp, #152]
  401b2c:	blr	x1
  401b30:	ldr	x0, [sp, #128]
  401b34:	ldr	x1, [x0]
  401b38:	mov	x0, x27
  401b3c:	blr	x1
  401b40:	ldr	x28, [x28, #48]
  401b44:	b	401a54 <main+0x484>
  401b48:	cbz	x23, 401bb4 <main+0x5e4>
  401b4c:	mov	x0, x23
  401b50:	mov	w1, #0x3b                  	// #59
  401b54:	bl	401460 <strrchr@plt>
  401b58:	cbz	x0, 401b60 <main+0x590>
  401b5c:	strb	wzr, [x0]
  401b60:	mov	x0, x21
  401b64:	bl	401320 <xmlFreeDoc@plt>
  401b68:	mov	x0, x20
  401b6c:	bl	401360 <fclose@plt>
  401b70:	mov	x0, x23
  401b74:	cbz	w19, 401bf4 <main+0x624>
  401b78:	bl	4014a0 <puts@plt>
  401b7c:	mov	x0, x23
  401b80:	bl	401500 <free@plt>
  401b84:	b	401764 <main+0x194>
  401b88:	mov	w2, #0x5                   	// #5
  401b8c:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401b90:	mov	x0, #0x0                   	// #0
  401b94:	add	x1, x1, #0xb80
  401b98:	bl	401530 <dcgettext@plt>
  401b9c:	mov	x2, x0
  401ba0:	mov	x4, x22
  401ba4:	mov	x3, x25
  401ba8:	mov	w1, #0x0                   	// #0
  401bac:	mov	w0, #0x0                   	// #0
  401bb0:	bl	4012e0 <error@plt>
  401bb4:	mov	x0, x21
  401bb8:	bl	401320 <xmlFreeDoc@plt>
  401bbc:	mov	x0, x20
  401bc0:	bl	401360 <fclose@plt>
  401bc4:	mov	w2, #0x5                   	// #5
  401bc8:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401bcc:	mov	x0, #0x0                   	// #0
  401bd0:	add	x1, x1, #0xb60
  401bd4:	bl	401530 <dcgettext@plt>
  401bd8:	mov	x23, #0x0                   	// #0
  401bdc:	mov	x2, x0
  401be0:	mov	x3, x24
  401be4:	mov	w1, #0x0                   	// #0
  401be8:	mov	w0, #0x1                   	// #1
  401bec:	bl	4012e0 <error@plt>
  401bf0:	b	401b70 <main+0x5a0>
  401bf4:	bl	403c68 <cldr_plural_parse>
  401bf8:	mov	x19, x0
  401bfc:	cbz	x0, 401d38 <main+0x768>
  401c00:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401c04:	mov	x0, x19
  401c08:	ldr	x1, [x1, #432]
  401c0c:	bl	403cc8 <cldr_plural_rule_list_print>
  401c10:	mov	x0, x19
  401c14:	bl	403c00 <cldr_plural_rule_list_free>
  401c18:	b	401b7c <main+0x5ac>
  401c1c:	mov	x0, x22
  401c20:	bl	401520 <xmlGetLineNo@plt>
  401c24:	mov	x3, x0
  401c28:	mov	w2, #0x5                   	// #5
  401c2c:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401c30:	mov	x0, #0x0                   	// #0
  401c34:	add	x1, x1, #0xad8
  401c38:	str	x3, [sp, #128]
  401c3c:	bl	401530 <dcgettext@plt>
  401c40:	mov	x4, x0
  401c44:	ldr	x3, [sp, #128]
  401c48:	mov	x6, x28
  401c4c:	mov	x5, x25
  401c50:	mov	x2, x26
  401c54:	mov	w1, #0x0                   	// #0
  401c58:	mov	w0, #0x0                   	// #0
  401c5c:	bl	4015a0 <error_at_line@plt>
  401c60:	b	40193c <main+0x36c>
  401c64:	adrp	x25, 404000 <cldr_plural_rule_list_print+0x338>
  401c68:	add	x25, x25, #0xaa0
  401c6c:	mov	x0, x22
  401c70:	bl	401520 <xmlGetLineNo@plt>
  401c74:	mov	w2, #0x5                   	// #5
  401c78:	mov	x22, x0
  401c7c:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401c80:	mov	x0, #0x0                   	// #0
  401c84:	add	x1, x1, #0xa80
  401c88:	bl	401530 <dcgettext@plt>
  401c8c:	mov	x5, x25
  401c90:	mov	x4, x0
  401c94:	mov	w3, w22
  401c98:	mov	x2, x26
  401c9c:	mov	w1, #0x0                   	// #0
  401ca0:	mov	w0, #0x0                   	// #0
  401ca4:	bl	4015a0 <error_at_line@plt>
  401ca8:	b	401bb4 <main+0x5e4>
  401cac:	lsl	x6, x0, #1
  401cb0:	mov	x0, x23
  401cb4:	cmp	x1, x6
  401cb8:	str	x5, [sp, #160]
  401cbc:	csel	x1, x1, x6, cs  // cs = hs, nlast
  401cc0:	stp	x1, x2, [sp, #144]
  401cc4:	bl	401390 <xrealloc@plt>
  401cc8:	mov	x23, x0
  401ccc:	ldp	x2, x5, [sp, #152]
  401cd0:	b	401af4 <main+0x524>
  401cd4:	mov	w2, #0x5                   	// #5
  401cd8:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401cdc:	add	x1, x1, #0xa60
  401ce0:	bl	401530 <dcgettext@plt>
  401ce4:	mov	x3, x26
  401ce8:	mov	x2, x0
  401cec:	mov	w1, #0x0                   	// #0
  401cf0:	mov	w0, #0x1                   	// #1
  401cf4:	bl	4012e0 <error@plt>
  401cf8:	b	4018a8 <main+0x2d8>
  401cfc:	mov	w2, #0x5                   	// #5
  401d00:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401d04:	add	x1, x1, #0xa48
  401d08:	bl	401530 <dcgettext@plt>
  401d0c:	mov	x3, x26
  401d10:	mov	x2, x0
  401d14:	mov	w1, #0x0                   	// #0
  401d18:	mov	w0, #0x1                   	// #1
  401d1c:	bl	4012e0 <error@plt>
  401d20:	b	401888 <main+0x2b8>
  401d24:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401d28:	mov	x0, x27
  401d2c:	ldr	x1, [x1, #456]
  401d30:	blr	x1
  401d34:	b	40193c <main+0x36c>
  401d38:	mov	w2, #0x5                   	// #5
  401d3c:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401d40:	add	x1, x1, #0xb30
  401d44:	bl	401530 <dcgettext@plt>
  401d48:	mov	w1, #0x0                   	// #0
  401d4c:	mov	x2, x0
  401d50:	mov	w0, #0x1                   	// #1
  401d54:	bl	4012e0 <error@plt>
  401d58:	b	401c00 <main+0x630>
  401d5c:	adrp	x0, 416000 <memcpy@GLIBC_2.17>
  401d60:	mov	w2, #0x5                   	// #5
  401d64:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401d68:	add	x1, x1, #0x5b8
  401d6c:	ldr	x19, [x0, #416]
  401d70:	mov	x0, #0x0                   	// #0
  401d74:	bl	401530 <dcgettext@plt>
  401d78:	mov	x1, x0
  401d7c:	adrp	x2, 416000 <memcpy@GLIBC_2.17>
  401d80:	mov	x0, x19
  401d84:	ldr	x2, [x2, #448]
  401d88:	bl	4015b0 <fprintf@plt>
  401d8c:	mov	w0, #0x1                   	// #1
  401d90:	bl	4012d0 <exit@plt>
  401d94:	mov	x0, x28
  401d98:	bl	401520 <xmlGetLineNo@plt>
  401d9c:	mov	w2, #0x5                   	// #5
  401da0:	mov	x28, x0
  401da4:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401da8:	mov	x0, #0x0                   	// #0
  401dac:	add	x1, x1, #0xad8
  401db0:	bl	401530 <dcgettext@plt>
  401db4:	ldr	x5, [sp, #112]
  401db8:	mov	x4, x0
  401dbc:	ldr	x6, [sp, #136]
  401dc0:	mov	w3, w28
  401dc4:	mov	x2, x26
  401dc8:	mov	w1, #0x0                   	// #0
  401dcc:	mov	w0, #0x0                   	// #0
  401dd0:	bl	4015a0 <error_at_line@plt>
  401dd4:	b	40193c <main+0x36c>
  401dd8:	mov	w2, #0x5                   	// #5
  401ddc:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401de0:	mov	x0, #0x0                   	// #0
  401de4:	add	x1, x1, #0x738
  401de8:	bl	401530 <dcgettext@plt>
  401dec:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401df0:	ldr	x1, [x1, #448]
  401df4:	bl	401550 <printf@plt>
  401df8:	mov	w0, #0xa                   	// #10
  401dfc:	bl	401580 <putchar@plt>
  401e00:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401e04:	add	x1, x1, #0x768
  401e08:	mov	w2, #0x5                   	// #5
  401e0c:	mov	x0, #0x0                   	// #0
  401e10:	bl	401530 <dcgettext@plt>
  401e14:	bl	401550 <printf@plt>
  401e18:	mov	w0, #0xa                   	// #10
  401e1c:	bl	401580 <putchar@plt>
  401e20:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401e24:	add	x1, x1, #0x878
  401e28:	mov	w2, #0x5                   	// #5
  401e2c:	mov	x0, #0x0                   	// #0
  401e30:	bl	401530 <dcgettext@plt>
  401e34:	bl	401550 <printf@plt>
  401e38:	mov	w0, #0xa                   	// #10
  401e3c:	bl	401580 <putchar@plt>
  401e40:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401e44:	add	x1, x1, #0x8e8
  401e48:	mov	w2, #0x5                   	// #5
  401e4c:	mov	x0, #0x0                   	// #0
  401e50:	bl	401530 <dcgettext@plt>
  401e54:	bl	401550 <printf@plt>
  401e58:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401e5c:	add	x1, x1, #0x930
  401e60:	mov	w2, #0x5                   	// #5
  401e64:	mov	x0, #0x0                   	// #0
  401e68:	bl	401530 <dcgettext@plt>
  401e6c:	bl	401550 <printf@plt>
  401e70:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401e74:	add	x1, x1, #0x970
  401e78:	mov	w2, #0x5                   	// #5
  401e7c:	mov	x0, #0x0                   	// #0
  401e80:	bl	401530 <dcgettext@plt>
  401e84:	bl	401550 <printf@plt>
  401e88:	mov	w0, #0xa                   	// #10
  401e8c:	bl	401580 <putchar@plt>
  401e90:	mov	w2, #0x5                   	// #5
  401e94:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401e98:	mov	x0, #0x0                   	// #0
  401e9c:	add	x1, x1, #0x9b8
  401ea0:	bl	401530 <dcgettext@plt>
  401ea4:	adrp	x2, 404000 <cldr_plural_rule_list_print+0x338>
  401ea8:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401eac:	add	x2, x2, #0x9f8
  401eb0:	add	x1, x1, #0xa10
  401eb4:	bl	401550 <printf@plt>
  401eb8:	mov	w0, #0x0                   	// #0
  401ebc:	bl	4012d0 <exit@plt>

0000000000401ec0 <_start>:
  401ec0:	mov	x29, #0x0                   	// #0
  401ec4:	mov	x30, #0x0                   	// #0
  401ec8:	mov	x5, x0
  401ecc:	ldr	x1, [sp]
  401ed0:	add	x2, sp, #0x8
  401ed4:	mov	x6, sp
  401ed8:	movz	x0, #0x0, lsl #48
  401edc:	movk	x0, #0x0, lsl #32
  401ee0:	movk	x0, #0x40, lsl #16
  401ee4:	movk	x0, #0x15d0
  401ee8:	movz	x3, #0x0, lsl #48
  401eec:	movk	x3, #0x0, lsl #32
  401ef0:	movk	x3, #0x40, lsl #16
  401ef4:	movk	x3, #0x4080
  401ef8:	movz	x4, #0x0, lsl #48
  401efc:	movk	x4, #0x0, lsl #32
  401f00:	movk	x4, #0x40, lsl #16
  401f04:	movk	x4, #0x4100
  401f08:	bl	4013e0 <__libc_start_main@plt>
  401f0c:	bl	401480 <abort@plt>

0000000000401f10 <call_weak_fn>:
  401f10:	adrp	x0, 415000 <__FRAME_END__+0xfdb4>
  401f14:	ldr	x0, [x0, #4064]
  401f18:	cbz	x0, 401f20 <call_weak_fn+0x10>
  401f1c:	b	401470 <__gmon_start__@plt>
  401f20:	ret
  401f24:	nop

0000000000401f28 <deregister_tm_clones>:
  401f28:	adrp	x0, 416000 <memcpy@GLIBC_2.17>
  401f2c:	add	x0, x0, #0x1a0
  401f30:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401f34:	add	x1, x1, #0x1a0
  401f38:	cmp	x1, x0
  401f3c:	b.eq	401f54 <deregister_tm_clones+0x2c>  // b.none
  401f40:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  401f44:	ldr	x1, [x1, #304]
  401f48:	cbz	x1, 401f54 <deregister_tm_clones+0x2c>
  401f4c:	mov	x16, x1
  401f50:	br	x16
  401f54:	ret

0000000000401f58 <register_tm_clones>:
  401f58:	adrp	x0, 416000 <memcpy@GLIBC_2.17>
  401f5c:	add	x0, x0, #0x1a0
  401f60:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401f64:	add	x1, x1, #0x1a0
  401f68:	sub	x1, x1, x0
  401f6c:	lsr	x2, x1, #63
  401f70:	add	x1, x2, x1, asr #3
  401f74:	cmp	xzr, x1, asr #1
  401f78:	asr	x1, x1, #1
  401f7c:	b.eq	401f94 <register_tm_clones+0x3c>  // b.none
  401f80:	adrp	x2, 404000 <cldr_plural_rule_list_print+0x338>
  401f84:	ldr	x2, [x2, #312]
  401f88:	cbz	x2, 401f94 <register_tm_clones+0x3c>
  401f8c:	mov	x16, x2
  401f90:	br	x16
  401f94:	ret

0000000000401f98 <__do_global_dtors_aux>:
  401f98:	stp	x29, x30, [sp, #-32]!
  401f9c:	mov	x29, sp
  401fa0:	str	x19, [sp, #16]
  401fa4:	adrp	x19, 416000 <memcpy@GLIBC_2.17>
  401fa8:	ldrb	w0, [x19, #464]
  401fac:	cbnz	w0, 401fbc <__do_global_dtors_aux+0x24>
  401fb0:	bl	401f28 <deregister_tm_clones>
  401fb4:	mov	w0, #0x1                   	// #1
  401fb8:	strb	w0, [x19, #464]
  401fbc:	ldr	x19, [sp, #16]
  401fc0:	ldp	x29, x30, [sp], #32
  401fc4:	ret

0000000000401fc8 <frame_dummy>:
  401fc8:	b	401f58 <register_tm_clones>
  401fcc:	nop

0000000000401fd0 <add_range>:
  401fd0:	stp	x29, x30, [sp, #-32]!
  401fd4:	mov	x29, sp
  401fd8:	stp	x19, x20, [sp, #16]
  401fdc:	mov	x19, x0
  401fe0:	mov	x20, x1
  401fe4:	ldp	x2, x0, [x0, #8]
  401fe8:	ldr	x1, [x19]
  401fec:	cmp	x2, x0
  401ff0:	b.eq	402010 <add_range+0x40>  // b.none
  401ff4:	add	x0, x2, #0x1
  401ff8:	str	x0, [x19, #8]
  401ffc:	str	x20, [x1, x2, lsl #3]
  402000:	mov	x0, x19
  402004:	ldp	x19, x20, [sp, #16]
  402008:	ldp	x29, x30, [sp], #32
  40200c:	ret
  402010:	lsl	x2, x2, #1
  402014:	mov	x0, x1
  402018:	add	x2, x2, #0x1
  40201c:	str	x2, [x19, #16]
  402020:	lsl	x1, x2, #3
  402024:	bl	401390 <xrealloc@plt>
  402028:	mov	x1, x0
  40202c:	ldr	x2, [x19, #8]
  402030:	str	x0, [x19]
  402034:	add	x0, x2, #0x1
  402038:	str	x0, [x19, #8]
  40203c:	str	x20, [x1, x2, lsl #3]
  402040:	mov	x0, x19
  402044:	ldp	x19, x20, [sp, #16]
  402048:	ldp	x29, x30, [sp], #32
  40204c:	ret

0000000000402050 <yydestruct.isra.0>:
  402050:	cmp	w0, #0x1b
  402054:	b.eq	402078 <yydestruct.isra.0+0x28>  // b.none
  402058:	b.gt	402080 <yydestruct.isra.0+0x30>
  40205c:	cmp	w0, #0x19
  402060:	b.gt	40209c <yydestruct.isra.0+0x4c>
  402064:	cmp	w0, #0x17
  402068:	b.gt	4020ac <yydestruct.isra.0+0x5c>
  40206c:	sub	w0, w0, #0xa
  402070:	cmp	w0, #0x2
  402074:	b.hi	4020bc <yydestruct.isra.0+0x6c>  // b.pmore
  402078:	ldr	x0, [x1]
  40207c:	b	401500 <free@plt>
  402080:	cmp	w0, #0x1c
  402084:	b.eq	4020b4 <yydestruct.isra.0+0x64>  // b.none
  402088:	sub	w0, w0, #0x1d
  40208c:	cmp	w0, #0x1
  402090:	b.hi	4020bc <yydestruct.isra.0+0x6c>  // b.pmore
  402094:	ldr	x0, [x1]
  402098:	b	403728 <cldr_plural_range_free>
  40209c:	cmp	w0, #0x1a
  4020a0:	b.ne	4020bc <yydestruct.isra.0+0x6c>  // b.any
  4020a4:	ldr	x0, [x1]
  4020a8:	b	4037c0 <cldr_plural_relation_free>
  4020ac:	ldr	x0, [x1]
  4020b0:	b	4037f0 <cldr_plural_condition_free>
  4020b4:	ldr	x0, [x1]
  4020b8:	b	403768 <cldr_plural_range_list_free>
  4020bc:	ret

00000000004020c0 <yyparse>:
  4020c0:	sub	sp, sp, #0x870
  4020c4:	mov	w4, #0x0                   	// #0
  4020c8:	stp	x29, x30, [sp]
  4020cc:	mov	x29, sp
  4020d0:	stp	x19, x20, [sp, #16]
  4020d4:	adrp	x19, 404000 <cldr_plural_rule_list_print+0x338>
  4020d8:	add	x19, x19, #0x1f0
  4020dc:	stp	x27, x28, [sp, #80]
  4020e0:	add	x28, sp, #0xa0
  4020e4:	mov	x20, x28
  4020e8:	stp	x21, x22, [sp, #32]
  4020ec:	add	x21, x19, #0x270
  4020f0:	mov	x22, #0xc8                  	// #200
  4020f4:	stp	x23, x24, [sp, #48]
  4020f8:	add	x24, sp, #0x230
  4020fc:	mov	w23, #0xfffffffe            	// #-2
  402100:	stp	x25, x26, [sp, #64]
  402104:	str	x24, [sp, #104]
  402108:	str	wzr, [sp, #116]
  40210c:	str	x0, [sp, #136]
  402110:	add	x0, x19, #0x38
  402114:	str	x0, [sp, #96]
  402118:	strh	wzr, [sp, #160]
  40211c:	ldrsb	w26, [x19, w4, sxtw]
  402120:	sxtw	x27, w4
  402124:	cmn	w26, #0x14
  402128:	mov	w6, w26
  40212c:	b.eq	4022e8 <yyparse+0x228>  // b.none
  402130:	cmn	w23, #0x2
  402134:	b.eq	402494 <yyparse+0x3d4>  // b.none
  402138:	cmp	w23, #0x0
  40213c:	b.le	4022dc <yyparse+0x21c>
  402140:	add	x0, x19, #0x160
  402144:	ldrb	w1, [x0, w23, sxtw]
  402148:	add	w6, w26, w1
  40214c:	cmp	w6, #0x37
  402150:	b.hi	40228c <yyparse+0x1cc>  // b.pmore
  402154:	ldr	x0, [sp, #96]
  402158:	ldrsb	w0, [x0, w6, sxtw]
  40215c:	cmp	w0, w1
  402160:	b.ne	40228c <yyparse+0x1cc>  // b.any
  402164:	add	x0, x19, #0x70
  402168:	ldrb	w4, [x0, w6, sxtw]
  40216c:	cbz	w4, 40238c <yyparse+0x2cc>
  402170:	ldr	w2, [sp, #116]
  402174:	mov	x5, x28
  402178:	ldr	x0, [sp, #152]
  40217c:	cmp	w2, #0x0
  402180:	cset	w1, ne  // ne = any
  402184:	add	x24, x24, #0x8
  402188:	sub	w1, w2, w1
  40218c:	str	w1, [sp, #116]
  402190:	mov	w23, #0xfffffffe            	// #-2
  402194:	str	x0, [x24]
  402198:	lsl	x1, x22, #1
  40219c:	strh	w4, [x5, #2]
  4021a0:	sub	x0, x1, #0x2
  4021a4:	add	x28, x5, #0x2
  4021a8:	add	x0, x20, x0
  4021ac:	cmp	x28, x0
  4021b0:	b.cc	40226c <yyparse+0x1ac>  // b.lo, b.ul, b.last
  4021b4:	sub	x26, x28, x20
  4021b8:	mov	x0, #0x270f                	// #9999
  4021bc:	str	w4, [sp, #120]
  4021c0:	cmp	x22, x0
  4021c4:	asr	x0, x26, #1
  4021c8:	add	x25, x0, #0x1
  4021cc:	b.hi	402aa8 <yyparse+0x9e8>  // b.pmore
  4021d0:	mov	x22, #0x2710                	// #10000
  4021d4:	cmp	x1, x22
  4021d8:	csel	x22, x1, x22, ls  // ls = plast
  4021dc:	add	x0, x22, x22, lsl #2
  4021e0:	lsl	x0, x0, #1
  4021e4:	add	x0, x0, #0x7
  4021e8:	bl	401380 <malloc@plt>
  4021ec:	cbz	x0, 402aa8 <yyparse+0x9e8>
  4021f0:	add	x2, x26, #0x2
  4021f4:	mov	x1, x20
  4021f8:	add	x27, x0, x22, lsl #1
  4021fc:	str	x0, [sp, #128]
  402200:	bl	4012b0 <memcpy@plt>
  402204:	lsl	x24, x25, #3
  402208:	ldr	x1, [sp, #104]
  40220c:	mov	x2, x24
  402210:	mov	x0, x27
  402214:	lsl	x25, x22, #1
  402218:	bl	4012b0 <memcpy@plt>
  40221c:	add	x0, sp, #0xa0
  402220:	ldr	w4, [sp, #120]
  402224:	cmp	x20, x0
  402228:	ldr	x6, [sp, #128]
  40222c:	b.eq	402248 <yyparse+0x188>  // b.none
  402230:	mov	x0, x20
  402234:	str	w4, [sp, #104]
  402238:	str	x6, [sp, #120]
  40223c:	bl	401500 <free@plt>
  402240:	ldr	w4, [sp, #104]
  402244:	ldr	x6, [sp, #120]
  402248:	sub	x25, x25, #0x2
  40224c:	add	x28, x6, x26
  402250:	add	x25, x6, x25
  402254:	sub	x3, x24, #0x8
  402258:	cmp	x28, x25
  40225c:	add	x24, x27, x3
  402260:	b.cs	402ae8 <yyparse+0xa28>  // b.hs, b.nlast
  402264:	mov	x20, x6
  402268:	str	x27, [sp, #104]
  40226c:	cmp	w4, #0x7
  402270:	b.ne	40211c <yyparse+0x5c>  // b.any
  402274:	mov	x21, x28
  402278:	mov	x28, x20
  40227c:	mov	w22, #0x0                   	// #0
  402280:	cmn	w23, #0x2
  402284:	b.eq	402434 <yyparse+0x374>  // b.none
  402288:	b	402418 <yyparse+0x358>
  40228c:	add	x0, x19, #0xa8
  402290:	ldrb	w0, [x0, x27]
  402294:	cbz	w0, 402558 <yyparse+0x498>
  402298:	add	x2, x19, #0xf8
  40229c:	sub	w4, w0, #0x4
  4022a0:	sxtw	x6, w0
  4022a4:	mov	w1, #0x1                   	// #1
  4022a8:	cmp	w4, #0x1c
  4022ac:	ldrb	w2, [x2, w0, sxtw]
  4022b0:	sub	w0, w1, w2
  4022b4:	ldr	x26, [x24, w0, sxtw #3]
  4022b8:	b.ls	402374 <yyparse+0x2b4>  // b.plast
  4022bc:	add	x1, x19, #0x120
  4022c0:	add	x0, x19, #0xe0
  4022c4:	sub	x25, x24, w2, uxtb #3
  4022c8:	sub	x5, x28, w2, uxtb #1
  4022cc:	ldrb	w4, [x1, x6]
  4022d0:	sub	w4, w4, #0x15
  4022d4:	ldrsb	w1, [x0, w4, sxtw]
  4022d8:	b	4023a0 <yyparse+0x2e0>
  4022dc:	mov	w1, #0x0                   	// #0
  4022e0:	mov	w23, #0x0                   	// #0
  4022e4:	b	40214c <yyparse+0x8c>
  4022e8:	add	x0, x19, #0xa8
  4022ec:	ldrb	w0, [x0, w4, sxtw]
  4022f0:	cbnz	w0, 402298 <yyparse+0x1d8>
  4022f4:	cmn	w23, #0x2
  4022f8:	b.ne	40251c <yyparse+0x45c>  // b.any
  4022fc:	ldr	w0, [sp, #116]
  402300:	cbz	w0, 4023d4 <yyparse+0x314>
  402304:	add	x25, x19, #0x70
  402308:	b	40232c <yyparse+0x26c>
  40230c:	cmp	x28, x20
  402310:	b.eq	402408 <yyparse+0x348>  // b.none
  402314:	ldrb	w0, [x21, x27]
  402318:	mov	x1, x24
  40231c:	sub	x24, x24, #0x8
  402320:	bl	402050 <yydestruct.isra.0>
  402324:	ldrsh	x27, [x28, #-2]!
  402328:	ldrsb	w26, [x19, w27, sxtw]
  40232c:	cmn	w26, #0x14
  402330:	b.eq	40230c <yyparse+0x24c>  // b.none
  402334:	add	w26, w26, #0x1
  402338:	cmp	w26, #0x37
  40233c:	b.hi	40230c <yyparse+0x24c>  // b.pmore
  402340:	ldr	x0, [sp, #96]
  402344:	ldrsb	w0, [x0, w26, sxtw]
  402348:	cmp	w0, #0x1
  40234c:	b.ne	40230c <yyparse+0x24c>  // b.any
  402350:	ldrb	w4, [x25, w26, sxtw]
  402354:	cbz	w4, 40230c <yyparse+0x24c>
  402358:	mov	w1, #0x3                   	// #3
  40235c:	str	w1, [sp, #116]
  402360:	ldr	x0, [sp, #152]
  402364:	mov	x5, x28
  402368:	add	x24, x24, #0x8
  40236c:	str	x0, [x24]
  402370:	b	402198 <yyparse+0xd8>
  402374:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  402378:	add	x0, x0, #0x1b0
  40237c:	ldrh	w0, [x0, w4, uxtw #1]
  402380:	adr	x1, 40238c <yyparse+0x2cc>
  402384:	add	x0, x1, w0, sxth #2
  402388:	br	x0
  40238c:	ldrsb	w1, [x19, #203]
  402390:	mov	x5, x28
  402394:	ldr	x26, [x24, #8]
  402398:	mov	x25, x24
  40239c:	mov	w4, #0xffffffeb            	// #-21
  4023a0:	ldrsh	w2, [x5]
  4023a4:	add	x24, x25, #0x8
  4023a8:	str	x26, [x25, #8]
  4023ac:	add	w0, w2, w1
  4023b0:	cmp	w0, #0x37
  4023b4:	b.hi	4023c8 <yyparse+0x308>  // b.pmore
  4023b8:	ldr	x1, [sp, #96]
  4023bc:	ldrsb	w1, [x1, w0, sxtw]
  4023c0:	cmp	w1, w2
  4023c4:	b.eq	402570 <yyparse+0x4b0>  // b.none
  4023c8:	add	x0, x19, #0x148
  4023cc:	ldrsb	w4, [x0, w4, sxtw]
  4023d0:	b	402198 <yyparse+0xd8>
  4023d4:	mov	w2, #0x5                   	// #5
  4023d8:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  4023dc:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  4023e0:	add	x1, x1, #0x170
  4023e4:	add	x0, x0, #0x180
  4023e8:	bl	401530 <dcgettext@plt>
  4023ec:	adrp	x4, 416000 <memcpy@GLIBC_2.17>
  4023f0:	mov	x2, x0
  4023f4:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  4023f8:	add	x1, x1, #0x190
  4023fc:	ldr	x0, [x4, #416]
  402400:	bl	4015b0 <fprintf@plt>
  402404:	b	402304 <yyparse+0x244>
  402408:	cmn	w23, #0x2
  40240c:	mov	x21, x28
  402410:	mov	w22, #0x1                   	// #1
  402414:	b.eq	40245c <yyparse+0x39c>  // b.none
  402418:	cmp	w23, #0x10c
  40241c:	b.hi	402514 <yyparse+0x454>  // b.pmore
  402420:	add	x0, x19, #0x160
  402424:	ldrb	w23, [x0, w23, sxtw]
  402428:	mov	w0, w23
  40242c:	add	x1, sp, #0x98
  402430:	bl	402050 <yydestruct.isra.0>
  402434:	cmp	x21, x28
  402438:	b.eq	40245c <yyparse+0x39c>  // b.none
  40243c:	add	x19, x19, #0x270
  402440:	ldrsh	w0, [x21], #-2
  402444:	mov	x1, x24
  402448:	sub	x24, x24, #0x8
  40244c:	ldrb	w0, [x19, w0, sxtw]
  402450:	bl	402050 <yydestruct.isra.0>
  402454:	cmp	x21, x28
  402458:	b.ne	402440 <yyparse+0x380>  // b.any
  40245c:	add	x0, sp, #0xa0
  402460:	cmp	x28, x0
  402464:	b.eq	402470 <yyparse+0x3b0>  // b.none
  402468:	mov	x0, x28
  40246c:	bl	401500 <free@plt>
  402470:	mov	w0, w22
  402474:	ldp	x29, x30, [sp]
  402478:	ldp	x19, x20, [sp, #16]
  40247c:	ldp	x21, x22, [sp, #32]
  402480:	ldp	x23, x24, [sp, #48]
  402484:	ldp	x25, x26, [sp, #64]
  402488:	ldp	x27, x28, [sp, #80]
  40248c:	add	sp, sp, #0x870
  402490:	ret
  402494:	ldr	x0, [sp, #136]
  402498:	ldr	x25, [x0]
  40249c:	ldrb	w0, [x25]
  4024a0:	cbnz	w0, 4024b0 <yyparse+0x3f0>
  4024a4:	b	40257c <yyparse+0x4bc>
  4024a8:	ldrb	w0, [x25, #1]!
  4024ac:	cbz	w0, 40257c <yyparse+0x4bc>
  4024b0:	cmp	w0, #0x20
  4024b4:	ccmp	w0, #0x9, #0x4, ne  // ne = any
  4024b8:	b.eq	4024a8 <yyparse+0x3e8>  // b.none
  4024bc:	tbnz	w0, #7, 402590 <yyparse+0x4d0>
  4024c0:	str	w0, [sp, #148]
  4024c4:	ldrb	w1, [x25]
  4024c8:	mov	w0, #0x2e                  	// #46
  4024cc:	cmp	w0, w1
  4024d0:	b.ne	4024e0 <yyparse+0x420>  // b.any
  4024d4:	ldrb	w1, [x25, #1]
  4024d8:	cmp	w0, w1
  4024dc:	b.eq	402a00 <yyparse+0x940>  // b.none
  4024e0:	ldrb	w1, [x25]
  4024e4:	mov	w0, #0x2e                  	// #46
  4024e8:	cmp	w0, w1
  4024ec:	b.ne	402618 <yyparse+0x558>  // b.any
  4024f0:	ldrb	w1, [x25, #1]
  4024f4:	cmp	w0, w1
  4024f8:	b.ne	402618 <yyparse+0x558>  // b.any
  4024fc:	ldr	x0, [sp, #136]
  402500:	add	x25, x25, #0x2
  402504:	mov	w1, #0x5                   	// #5
  402508:	mov	w23, #0x104                 	// #260
  40250c:	str	x25, [x0]
  402510:	b	402148 <yyparse+0x88>
  402514:	mov	w23, #0x2                   	// #2
  402518:	b	402428 <yyparse+0x368>
  40251c:	cmp	w23, #0x10c
  402520:	b.ls	402558 <yyparse+0x498>  // b.plast
  402524:	mov	w23, #0xffffffff            	// #-1
  402528:	mov	w0, #0x2                   	// #2
  40252c:	ldr	w1, [sp, #116]
  402530:	cbz	w1, 4023d4 <yyparse+0x314>
  402534:	ldr	w1, [sp, #116]
  402538:	cmp	w1, #0x3
  40253c:	b.ne	402304 <yyparse+0x244>  // b.any
  402540:	cmp	w23, #0x0
  402544:	b.le	402564 <yyparse+0x4a4>
  402548:	add	x1, sp, #0x98
  40254c:	mov	w23, #0xfffffffe            	// #-2
  402550:	bl	402050 <yydestruct.isra.0>
  402554:	b	402304 <yyparse+0x244>
  402558:	add	x0, x19, #0x160
  40255c:	ldrb	w0, [x0, w23, sxtw]
  402560:	b	40252c <yyparse+0x46c>
  402564:	b.eq	402b60 <yyparse+0xaa0>  // b.none
  402568:	mov	w23, #0xffffffff            	// #-1
  40256c:	b	402304 <yyparse+0x244>
  402570:	add	x1, x19, #0x70
  402574:	ldrb	w4, [x1, w0, sxtw]
  402578:	b	402198 <yyparse+0xd8>
  40257c:	ldr	x0, [sp, #136]
  402580:	mov	w1, #0x0                   	// #0
  402584:	mov	w23, #0x0                   	// #0
  402588:	str	x25, [x0]
  40258c:	b	40214c <yyparse+0x8c>
  402590:	ldr	x0, [sp, #136]
  402594:	mov	x1, x25
  402598:	str	w6, [sp, #120]
  40259c:	ldr	x2, [x0, #8]
  4025a0:	add	x0, sp, #0x94
  4025a4:	sub	x2, x2, x25
  4025a8:	bl	401490 <u8_mbtouc_aux@plt>
  4025ac:	ldr	w2, [sp, #148]
  4025b0:	mov	w1, #0x2026                	// #8230
  4025b4:	ldr	w6, [sp, #120]
  4025b8:	cmp	w2, w1
  4025bc:	b.ne	4024c4 <yyparse+0x404>  // b.any
  4025c0:	ldr	x2, [sp, #136]
  4025c4:	add	x0, x25, w0, sxtw
  4025c8:	mov	w1, #0x6                   	// #6
  4025cc:	mov	w23, #0x105                 	// #261
  4025d0:	str	x0, [x2]
  4025d4:	b	402148 <yyparse+0x88>
  4025d8:	mov	x25, x24
  4025dc:	ldr	x0, [x25], #-8
  4025e0:	bl	401500 <free@plt>
  4025e4:	sub	x5, x28, #0x2
  4025e8:	mov	w4, #0x10                  	// #16
  4025ec:	mov	w1, #0x16                  	// #22
  4025f0:	b	4023a0 <yyparse+0x2e0>
  4025f4:	ldur	x0, [x24, #-16]
  4025f8:	mov	x25, x24
  4025fc:	bl	401500 <free@plt>
  402600:	ldr	x0, [x25], #-24
  402604:	bl	401500 <free@plt>
  402608:	sub	x5, x28, #0x6
  40260c:	mov	w4, #0x10                  	// #16
  402610:	mov	w1, #0x16                  	// #22
  402614:	b	4023a0 <yyparse+0x2e0>
  402618:	mov	x1, x25
  40261c:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  402620:	mov	x2, #0x5                   	// #5
  402624:	add	x0, x0, #0x140
  402628:	str	w6, [sp, #120]
  40262c:	bl	4013c0 <strncmp@plt>
  402630:	ldr	w6, [sp, #120]
  402634:	cbz	w0, 402af8 <yyparse+0xa38>
  402638:	mov	x1, x25
  40263c:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  402640:	mov	x2, #0x8                   	// #8
  402644:	add	x0, x0, #0x148
  402648:	str	w6, [sp, #120]
  40264c:	bl	4013c0 <strncmp@plt>
  402650:	ldr	w6, [sp, #120]
  402654:	cbz	w0, 402b10 <yyparse+0xa50>
  402658:	mov	x1, x25
  40265c:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  402660:	mov	x2, #0x8                   	// #8
  402664:	add	x0, x0, #0x158
  402668:	str	w6, [sp, #120]
  40266c:	bl	4013c0 <strncmp@plt>
  402670:	ldr	w6, [sp, #120]
  402674:	cbz	w0, 402b28 <yyparse+0xa68>
  402678:	mov	x2, x25
  40267c:	ldrb	w23, [x2], #1
  402680:	cmp	w23, #0x39
  402684:	b.hi	402958 <yyparse+0x898>  // b.pmore
  402688:	cmp	w23, #0x2f
  40268c:	b.hi	402a30 <yyparse+0x970>  // b.pmore
  402690:	cmp	w23, #0x21
  402694:	b.ne	402a24 <yyparse+0x964>  // b.any
  402698:	ldrb	w0, [x25, #1]
  40269c:	cmp	w0, #0x3d
  4026a0:	b.eq	402c4c <yyparse+0xb8c>  // b.none
  4026a4:	ldr	x0, [sp, #136]
  4026a8:	mov	w1, #0x1                   	// #1
  4026ac:	mov	w23, #0x100                 	// #256
  4026b0:	str	x2, [x0]
  4026b4:	b	402148 <yyparse+0x88>
  4026b8:	mov	x25, x24
  4026bc:	mov	x0, #0x10                  	// #16
  4026c0:	ldur	x24, [x24, #-16]
  4026c4:	ldr	x27, [x25], #-24
  4026c8:	bl	401400 <xmalloc@plt>
  4026cc:	sub	x5, x28, #0x6
  4026d0:	mov	x26, x0
  4026d4:	mov	w4, #0x9                   	// #9
  4026d8:	mov	w1, #0xffffffec            	// #-20
  4026dc:	stp	x24, x27, [x0]
  4026e0:	b	4023a0 <yyparse+0x2e0>
  4026e4:	ldur	x4, [x24, #-24]
  4026e8:	mov	x0, #0x10                  	// #16
  4026ec:	ldur	x1, [x24, #-8]
  4026f0:	stp	x1, x4, [sp, #120]
  4026f4:	bl	401400 <xmalloc@plt>
  4026f8:	mov	x27, x0
  4026fc:	ldp	x4, x1, [sp, #128]
  402700:	ldr	x25, [x1, #16]
  402704:	ldr	x1, [sp, #120]
  402708:	ldp	x2, x0, [x25, #8]
  40270c:	cmp	x2, x0
  402710:	ldr	x0, [x25]
  402714:	stp	x4, x1, [x27]
  402718:	b.eq	402b40 <yyparse+0xa80>  // b.none
  40271c:	add	x1, x2, #0x1
  402720:	str	x1, [x25, #8]
  402724:	sub	x5, x28, #0x8
  402728:	sub	x25, x24, #0x20
  40272c:	mov	w4, #0x2                   	// #2
  402730:	mov	w1, #0x15                  	// #21
  402734:	str	x27, [x0, x2, lsl #3]
  402738:	b	4023a0 <yyparse+0x2e0>
  40273c:	mov	x25, x24
  402740:	mov	x0, #0x10                  	// #16
  402744:	ldr	x27, [x25], #-8
  402748:	bl	401400 <xmalloc@plt>
  40274c:	sub	x5, x28, #0x2
  402750:	mov	x26, x0
  402754:	mov	w4, #0x8                   	// #8
  402758:	mov	w1, #0xffffffed            	// #-19
  40275c:	stp	x27, x27, [x0]
  402760:	b	4023a0 <yyparse+0x2e0>
  402764:	mov	x25, x24
  402768:	sub	x5, x28, #0x2
  40276c:	mov	w4, #0x8                   	// #8
  402770:	mov	w1, #0xffffffed            	// #-19
  402774:	ldr	x26, [x25], #-8
  402778:	b	4023a0 <yyparse+0x2e0>
  40277c:	ldur	x0, [x24, #-16]
  402780:	sub	x25, x24, #0x18
  402784:	ldr	x1, [x24]
  402788:	bl	401fd0 <add_range>
  40278c:	mov	x26, x0
  402790:	sub	x5, x28, #0x6
  402794:	mov	w4, #0x7                   	// #7
  402798:	mov	w1, #0x12                  	// #18
  40279c:	b	4023a0 <yyparse+0x2e0>
  4027a0:	mov	x25, x24
  4027a4:	mov	x0, #0x18                  	// #24
  4027a8:	bl	401400 <xmalloc@plt>
  4027ac:	stp	xzr, xzr, [x0]
  4027b0:	str	xzr, [x0, #16]
  4027b4:	ldr	x1, [x25], #-8
  4027b8:	bl	401fd0 <add_range>
  4027bc:	mov	x26, x0
  4027c0:	sub	x5, x28, #0x2
  4027c4:	mov	w4, #0x7                   	// #7
  4027c8:	mov	w1, #0x12                  	// #18
  4027cc:	b	4023a0 <yyparse+0x2e0>
  4027d0:	mov	x25, x24
  4027d4:	mov	x0, #0x8                   	// #8
  4027d8:	ldur	w24, [x24, #-16]
  4027dc:	ldr	x1, [x25], #-24
  4027e0:	ldr	w27, [x1, #8]
  4027e4:	bl	401400 <xmalloc@plt>
  4027e8:	sub	x5, x28, #0x6
  4027ec:	mov	x26, x0
  4027f0:	mov	w4, #0x6                   	// #6
  4027f4:	mov	w1, #0xffffffec            	// #-20
  4027f8:	stp	w24, w27, [x0]
  4027fc:	b	4023a0 <yyparse+0x2e0>
  402800:	mov	x25, x24
  402804:	mov	x0, #0x8                   	// #8
  402808:	ldr	w27, [x25], #-8
  40280c:	bl	401400 <xmalloc@plt>
  402810:	sub	x5, x28, #0x2
  402814:	mov	x26, x0
  402818:	mov	w4, #0x6                   	// #6
  40281c:	mov	w1, #0xffffffec            	// #-20
  402820:	stp	w27, wzr, [x0]
  402824:	b	4023a0 <yyparse+0x2e0>
  402828:	mov	x25, x24
  40282c:	mov	x0, #0x18                  	// #24
  402830:	ldur	x24, [x24, #-16]
  402834:	ldr	x27, [x25], #-24
  402838:	bl	401400 <xmalloc@plt>
  40283c:	mov	x26, x0
  402840:	sub	x5, x28, #0x6
  402844:	mov	w0, #0x1                   	// #1
  402848:	mov	w4, #0x5                   	// #5
  40284c:	mov	w1, #0x11                  	// #17
  402850:	str	x24, [x26]
  402854:	str	w0, [x26, #8]
  402858:	str	x27, [x26, #16]
  40285c:	b	4023a0 <yyparse+0x2e0>
  402860:	mov	x25, x24
  402864:	mov	x0, #0x18                  	// #24
  402868:	ldur	x24, [x24, #-16]
  40286c:	ldr	x27, [x25], #-24
  402870:	bl	401400 <xmalloc@plt>
  402874:	sub	x5, x28, #0x6
  402878:	mov	x26, x0
  40287c:	mov	w4, #0x5                   	// #5
  402880:	mov	w1, #0x11                  	// #17
  402884:	str	x24, [x0]
  402888:	str	wzr, [x0, #8]
  40288c:	str	x27, [x0, #16]
  402890:	b	4023a0 <yyparse+0x2e0>
  402894:	mov	x25, x24
  402898:	mov	x0, #0x18                  	// #24
  40289c:	ldur	x24, [x24, #-16]
  4028a0:	ldr	x26, [x25], #-24
  4028a4:	bl	401400 <xmalloc@plt>
  4028a8:	mov	x27, x0
  4028ac:	mov	w1, #0x2                   	// #2
  4028b0:	mov	x0, #0x18                  	// #24
  4028b4:	str	w1, [x27]
  4028b8:	str	x26, [x27, #8]
  4028bc:	bl	401400 <xmalloc@plt>
  4028c0:	mov	x26, x0
  4028c4:	sub	x5, x28, #0x6
  4028c8:	mov	w4, #0x4                   	// #4
  4028cc:	mov	w1, #0xe                   	// #14
  4028d0:	str	wzr, [x0]
  4028d4:	stp	x24, x27, [x0, #8]
  4028d8:	b	4023a0 <yyparse+0x2e0>
  4028dc:	mov	x25, x24
  4028e0:	mov	x0, #0x18                  	// #24
  4028e4:	ldr	x27, [x25], #-8
  4028e8:	bl	401400 <xmalloc@plt>
  4028ec:	mov	x26, x0
  4028f0:	sub	x5, x28, #0x2
  4028f4:	mov	w0, #0x2                   	// #2
  4028f8:	mov	w4, #0x4                   	// #4
  4028fc:	mov	w1, #0xe                   	// #14
  402900:	str	w0, [x26]
  402904:	str	x27, [x26, #8]
  402908:	b	4023a0 <yyparse+0x2e0>
  40290c:	mov	x25, x24
  402910:	mov	x0, #0x18                  	// #24
  402914:	ldur	x24, [x24, #-16]
  402918:	ldr	x27, [x25], #-24
  40291c:	bl	401400 <xmalloc@plt>
  402920:	mov	x26, x0
  402924:	sub	x5, x28, #0x6
  402928:	mov	w0, #0x1                   	// #1
  40292c:	mov	w4, #0x3                   	// #3
  402930:	mov	w1, #0xffffffec            	// #-20
  402934:	str	w0, [x26]
  402938:	stp	x24, x27, [x26, #8]
  40293c:	b	4023a0 <yyparse+0x2e0>
  402940:	mov	x25, x24
  402944:	sub	x5, x28, #0x2
  402948:	mov	w4, #0x3                   	// #3
  40294c:	mov	w1, #0xffffffec            	// #-20
  402950:	ldr	x26, [x25], #-8
  402954:	b	4023a0 <yyparse+0x2e0>
  402958:	sub	w0, w23, #0x61
  40295c:	and	w0, w0, #0xff
  402960:	cmp	w0, #0x19
  402964:	b.hi	402a24 <yyparse+0x964>  // b.pmore
  402968:	adrp	x7, 416000 <memcpy@GLIBC_2.17>
  40296c:	add	x6, x7, #0x1d8
  402970:	mov	x25, #0x0                   	// #0
  402974:	ldr	x4, [x7, #472]
  402978:	ldr	x1, [x6, #8]
  40297c:	cmp	x25, x1
  402980:	b.cs	402ba0 <yyparse+0xae0>  // b.hs, b.nlast
  402984:	strb	w23, [x4, x25]
  402988:	add	x25, x25, #0x1
  40298c:	ldrb	w23, [x2]
  402990:	sub	w0, w23, #0x61
  402994:	cmp	w0, #0x19
  402998:	b.ls	402b98 <yyparse+0xad8>  // b.plast
  40299c:	cmp	x25, x1
  4029a0:	b.cs	402ca4 <yyparse+0xbe4>  // b.hs, b.nlast
  4029a4:	strb	wzr, [x4, x25]
  4029a8:	cmp	x25, #0x1
  4029ac:	b.eq	402c60 <yyparse+0xba0>  // b.none
  4029b0:	mov	x0, x4
  4029b4:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  4029b8:	add	x1, x1, #0x168
  4029bc:	stp	x4, x2, [sp, #120]
  4029c0:	bl	4014d0 <strcmp@plt>
  4029c4:	ldp	x4, x2, [sp, #120]
  4029c8:	cbz	w0, 402cd0 <yyparse+0xc10>
  4029cc:	ldrb	w0, [x4]
  4029d0:	cmp	w0, #0x6f
  4029d4:	b.ne	402b70 <yyparse+0xab0>  // b.any
  4029d8:	ldrb	w0, [x4, #1]
  4029dc:	cmp	w0, #0x72
  4029e0:	b.ne	402b70 <yyparse+0xab0>  // b.any
  4029e4:	ldrb	w0, [x4, #2]
  4029e8:	cbnz	w0, 402b70 <yyparse+0xab0>
  4029ec:	ldr	x0, [sp, #136]
  4029f0:	mov	w1, #0x4                   	// #4
  4029f4:	mov	w23, #0x103                 	// #259
  4029f8:	str	x2, [x0]
  4029fc:	b	402148 <yyparse+0x88>
  402a00:	ldrb	w1, [x25, #2]
  402a04:	cmp	w0, w1
  402a08:	b.ne	4024e0 <yyparse+0x420>  // b.any
  402a0c:	ldr	x0, [sp, #136]
  402a10:	add	x25, x25, #0x3
  402a14:	mov	w1, #0x6                   	// #6
  402a18:	mov	w23, #0x105                 	// #261
  402a1c:	str	x25, [x0]
  402a20:	b	402148 <yyparse+0x88>
  402a24:	ldr	x0, [sp, #136]
  402a28:	str	x2, [x0]
  402a2c:	b	402138 <yyparse+0x78>
  402a30:	ldrb	w1, [x25, #1]
  402a34:	sub	w23, w23, #0x30
  402a38:	sub	w0, w1, #0x30
  402a3c:	sxtw	x23, w23
  402a40:	and	w1, w0, #0xff
  402a44:	cmp	w1, #0x9
  402a48:	b.hi	402a6c <yyparse+0x9ac>  // b.pmore
  402a4c:	ldrb	w1, [x2, #1]!
  402a50:	sxtw	x4, w0
  402a54:	add	x23, x23, x23, lsl #2
  402a58:	sub	w0, w1, #0x30
  402a5c:	and	w1, w0, #0xff
  402a60:	add	x23, x4, x23, lsl #1
  402a64:	cmp	w1, #0x9
  402a68:	b.ls	402a4c <yyparse+0x98c>  // b.plast
  402a6c:	mov	x0, #0x18                  	// #24
  402a70:	str	x2, [sp, #120]
  402a74:	bl	401400 <xmalloc@plt>
  402a78:	str	x0, [sp, #152]
  402a7c:	ldr	x2, [sp, #120]
  402a80:	ldrb	w1, [x2]
  402a84:	cmp	w1, #0x2e
  402a88:	b.eq	402bd4 <yyparse+0xb14>  // b.none
  402a8c:	str	wzr, [x0]
  402a90:	mov	w1, #0xb                   	// #11
  402a94:	str	w23, [x0, #8]
  402a98:	mov	w23, #0x10a                 	// #266
  402a9c:	ldr	x0, [sp, #136]
  402aa0:	str	x2, [x0]
  402aa4:	b	402148 <yyparse+0x88>
  402aa8:	mov	w2, #0x5                   	// #5
  402aac:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  402ab0:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  402ab4:	add	x1, x1, #0x198
  402ab8:	add	x0, x0, #0x180
  402abc:	bl	401530 <dcgettext@plt>
  402ac0:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  402ac4:	mov	x2, x0
  402ac8:	mov	x21, x28
  402acc:	mov	w22, #0x2                   	// #2
  402ad0:	ldr	x0, [x1, #416]
  402ad4:	mov	x28, x20
  402ad8:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  402adc:	add	x1, x1, #0x190
  402ae0:	bl	4015b0 <fprintf@plt>
  402ae4:	b	402280 <yyparse+0x1c0>
  402ae8:	mov	x21, x28
  402aec:	mov	w22, #0x1                   	// #1
  402af0:	mov	x28, x6
  402af4:	b	402280 <yyparse+0x1c0>
  402af8:	ldr	x0, [sp, #136]
  402afc:	add	x25, x25, #0x5
  402b00:	mov	w1, #0x7                   	// #7
  402b04:	mov	w23, #0x106                 	// #262
  402b08:	str	x25, [x0]
  402b0c:	b	402148 <yyparse+0x88>
  402b10:	ldr	x0, [sp, #136]
  402b14:	add	x25, x25, #0x8
  402b18:	mov	w1, #0x8                   	// #8
  402b1c:	mov	w23, #0x107                 	// #263
  402b20:	str	x25, [x0]
  402b24:	b	402148 <yyparse+0x88>
  402b28:	ldr	x0, [sp, #136]
  402b2c:	add	x25, x25, #0x8
  402b30:	mov	w1, #0x9                   	// #9
  402b34:	mov	w23, #0x108                 	// #264
  402b38:	str	x25, [x0]
  402b3c:	b	402148 <yyparse+0x88>
  402b40:	lsl	x1, x2, #1
  402b44:	add	x1, x1, #0x1
  402b48:	str	x1, [x25, #16]
  402b4c:	lsl	x1, x1, #3
  402b50:	bl	401390 <xrealloc@plt>
  402b54:	str	x0, [x25]
  402b58:	ldr	x2, [x25, #8]
  402b5c:	b	40271c <yyparse+0x65c>
  402b60:	mov	x21, x28
  402b64:	mov	w22, #0x1                   	// #1
  402b68:	mov	x28, x20
  402b6c:	b	402428 <yyparse+0x368>
  402b70:	mov	x0, x4
  402b74:	str	x2, [sp, #120]
  402b78:	bl	401410 <xstrdup@plt>
  402b7c:	str	x0, [sp, #152]
  402b80:	ldr	x0, [sp, #136]
  402b84:	mov	w23, #0x109                 	// #265
  402b88:	ldr	x2, [sp, #120]
  402b8c:	mov	w1, #0xa                   	// #10
  402b90:	str	x2, [x0]
  402b94:	b	402148 <yyparse+0x88>
  402b98:	add	x2, x2, #0x1
  402b9c:	b	40297c <yyparse+0x8bc>
  402ba0:	add	x1, x1, #0x5
  402ba4:	mov	x0, x4
  402ba8:	str	x2, [sp, #120]
  402bac:	lsl	x1, x1, #1
  402bb0:	str	x1, [x6, #8]
  402bb4:	bl	401390 <xrealloc@plt>
  402bb8:	mov	x4, x0
  402bbc:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  402bc0:	add	x6, x1, #0x1d8
  402bc4:	ldr	x2, [sp, #120]
  402bc8:	str	x0, [x6]
  402bcc:	ldr	x1, [x6, #8]
  402bd0:	b	402984 <yyparse+0x8c4>
  402bd4:	ldrb	w1, [x2, #1]
  402bd8:	sub	w1, w1, #0x30
  402bdc:	and	w4, w1, #0xff
  402be0:	cmp	w4, #0x9
  402be4:	b.hi	402a8c <yyparse+0x9cc>  // b.pmore
  402be8:	add	x2, x2, #0x1
  402bec:	ucvtf	d0, x23
  402bf0:	mov	w6, #0x1                   	// #1
  402bf4:	sub	w8, w6, w2
  402bf8:	mov	w4, #0xa                   	// #10
  402bfc:	scvtf	d1, w1
  402c00:	scvtf	d2, w4
  402c04:	add	w7, w8, w2
  402c08:	ldrb	w1, [x2, #1]!
  402c0c:	add	w4, w4, w4, lsl #2
  402c10:	sub	w1, w1, #0x30
  402c14:	fdiv	d1, d1, d2
  402c18:	and	w9, w1, #0xff
  402c1c:	lsl	w4, w4, #1
  402c20:	cmp	w9, #0x9
  402c24:	fadd	d0, d0, d1
  402c28:	b.ls	402bfc <yyparse+0xb3c>  // b.plast
  402c2c:	str	w6, [x0]
  402c30:	mov	w1, #0xc                   	// #12
  402c34:	str	d0, [x0, #8]
  402c38:	mov	w23, #0x10b                 	// #267
  402c3c:	str	w7, [x0, #16]
  402c40:	ldr	x0, [sp, #136]
  402c44:	str	x2, [x0]
  402c48:	b	402148 <yyparse+0x88>
  402c4c:	ldr	x0, [sp, #136]
  402c50:	add	x25, x25, #0x2
  402c54:	mov	w1, #0x11                  	// #17
  402c58:	str	x25, [x0]
  402c5c:	b	402148 <yyparse+0x88>
  402c60:	ldrb	w0, [x4]
  402c64:	sub	w0, w0, #0x66
  402c68:	and	w0, w0, #0xff
  402c6c:	cmp	w0, #0x11
  402c70:	b.hi	4029b0 <yyparse+0x8f0>  // b.pmore
  402c74:	mov	x1, #0x4109                	// #16649
  402c78:	lsl	x0, x25, x0
  402c7c:	movk	x1, #0x3, lsl #16
  402c80:	tst	x0, x1
  402c84:	b.eq	4029b0 <yyparse+0x8f0>  // b.none
  402c88:	ldr	x0, [sp, #136]
  402c8c:	mov	w1, #0xd                   	// #13
  402c90:	mov	w23, #0x10c                 	// #268
  402c94:	str	x2, [x0]
  402c98:	ldrb	w0, [x4]
  402c9c:	str	w0, [sp, #152]
  402ca0:	b	402148 <yyparse+0x88>
  402ca4:	add	x1, x1, #0x5
  402ca8:	mov	x0, x4
  402cac:	str	x2, [sp, #120]
  402cb0:	lsl	x1, x1, #1
  402cb4:	str	x1, [x6, #8]
  402cb8:	bl	401390 <xrealloc@plt>
  402cbc:	mov	x4, x0
  402cc0:	adrp	x7, 416000 <memcpy@GLIBC_2.17>
  402cc4:	ldr	x2, [sp, #120]
  402cc8:	str	x0, [x7, #472]
  402ccc:	b	4029a4 <yyparse+0x8e4>
  402cd0:	ldr	x0, [sp, #136]
  402cd4:	mov	w1, #0x3                   	// #3
  402cd8:	mov	w23, #0x102                 	// #258
  402cdc:	str	x2, [x0]
  402ce0:	b	402148 <yyparse+0x88>
  402ce4:	nop

0000000000402ce8 <find_largest_modulus>:
  402ce8:	stp	x29, x30, [sp, #-32]!
  402cec:	mov	x29, sp
  402cf0:	str	x19, [sp, #16]
  402cf4:	mov	x19, x0
  402cf8:	ldr	w0, [x0]
  402cfc:	cmp	w0, #0x1
  402d00:	b.ls	402d28 <find_largest_modulus+0x40>  // b.plast
  402d04:	cmp	w0, #0x2
  402d08:	mov	w0, #0x0                   	// #0
  402d0c:	b.ne	402d1c <find_largest_modulus+0x34>  // b.any
  402d10:	ldr	x0, [x19, #8]
  402d14:	ldr	x0, [x0]
  402d18:	ldr	w0, [x0, #4]
  402d1c:	ldr	x19, [sp, #16]
  402d20:	ldp	x29, x30, [sp], #32
  402d24:	ret
  402d28:	ldr	x0, [x19, #8]
  402d2c:	bl	402ce8 <find_largest_modulus>
  402d30:	mov	w1, w0
  402d34:	ldr	x0, [x19, #16]
  402d38:	mov	w19, w1
  402d3c:	bl	402ce8 <find_largest_modulus>
  402d40:	cmp	w19, w0
  402d44:	csel	w0, w19, w0, ge  // ge = tcont
  402d48:	ldr	x19, [sp, #16]
  402d4c:	ldp	x29, x30, [sp], #32
  402d50:	ret
  402d54:	nop

0000000000402d58 <find_largest_number>:
  402d58:	stp	x29, x30, [sp, #-32]!
  402d5c:	mov	x29, sp
  402d60:	stp	x19, x20, [sp, #16]
  402d64:	mov	x20, x0
  402d68:	ldr	w0, [x0]
  402d6c:	cmp	w0, #0x1
  402d70:	b.ls	402df0 <find_largest_number+0x98>  // b.plast
  402d74:	cmp	w0, #0x2
  402d78:	mov	w0, #0x0                   	// #0
  402d7c:	b.eq	402d8c <find_largest_number+0x34>  // b.none
  402d80:	ldp	x19, x20, [sp, #16]
  402d84:	ldp	x29, x30, [sp], #32
  402d88:	ret
  402d8c:	ldr	x1, [x20, #8]
  402d90:	ldr	x1, [x1, #16]
  402d94:	ldr	x4, [x1, #8]
  402d98:	cbz	x4, 402d80 <find_largest_number+0x28>
  402d9c:	ldr	x1, [x1]
  402da0:	add	x4, x1, x4, lsl #3
  402da4:	b	402dc0 <find_largest_number+0x68>
  402da8:	ldr	w2, [x3, #8]
  402dac:	cmp	w0, w2
  402db0:	csel	w0, w0, w2, ge  // ge = tcont
  402db4:	add	x1, x1, #0x8
  402db8:	cmp	x1, x4
  402dbc:	b.eq	402d80 <find_largest_number+0x28>  // b.none
  402dc0:	ldr	x2, [x1]
  402dc4:	ldr	x3, [x2, #8]
  402dc8:	ldr	w2, [x3]
  402dcc:	cmp	w2, #0x1
  402dd0:	cbz	w2, 402da8 <find_largest_number+0x50>
  402dd4:	b.ne	402db4 <find_largest_number+0x5c>  // b.any
  402dd8:	scvtf	d0, w0
  402ddc:	ldr	d1, [x3, #8]
  402de0:	fcmpe	d1, d0
  402de4:	b.le	402db4 <find_largest_number+0x5c>
  402de8:	fcvtzs	w0, d1
  402dec:	b	402db4 <find_largest_number+0x5c>
  402df0:	ldr	x0, [x20, #8]
  402df4:	bl	402d58 <find_largest_number>
  402df8:	mov	w19, w0
  402dfc:	ldr	x0, [x20, #16]
  402e00:	bl	402d58 <find_largest_number>
  402e04:	cmp	w19, w0
  402e08:	csel	w0, w19, w0, ge  // ge = tcont
  402e0c:	ldp	x19, x20, [sp, #16]
  402e10:	ldp	x29, x30, [sp], #32
  402e14:	ret

0000000000402e18 <apply_condition>:
  402e18:	stp	x29, x30, [sp, #-32]!
  402e1c:	mov	x29, sp
  402e20:	stp	x19, x20, [sp, #16]
  402e24:	mov	x20, x0
  402e28:	mov	w19, w1
  402e2c:	ldr	w0, [x20]
  402e30:	cmp	w0, #0x1
  402e34:	cbz	w0, 402ed0 <apply_condition+0xb8>
  402e38:	b.eq	402eec <apply_condition+0xd4>  // b.none
  402e3c:	cmp	w0, #0x2
  402e40:	mov	w0, #0x0                   	// #0
  402e44:	b.eq	402e54 <apply_condition+0x3c>  // b.none
  402e48:	ldp	x19, x20, [sp, #16]
  402e4c:	ldp	x29, x30, [sp], #32
  402e50:	ret
  402e54:	ldr	x5, [x20, #8]
  402e58:	ldr	x0, [x5]
  402e5c:	ldr	w0, [x0, #4]
  402e60:	cmp	w0, #0x0
  402e64:	b.le	402e70 <apply_condition+0x58>
  402e68:	sdiv	w1, w19, w0
  402e6c:	msub	w19, w1, w0, w19
  402e70:	ldr	x0, [x5, #16]
  402e74:	ldr	x3, [x0, #8]
  402e78:	cbz	x3, 402eb8 <apply_condition+0xa0>
  402e7c:	ldr	x4, [x0]
  402e80:	mov	x0, #0x0                   	// #0
  402e84:	nop
  402e88:	ldr	x1, [x4, x0, lsl #3]
  402e8c:	add	x0, x0, #0x1
  402e90:	ldr	x2, [x1]
  402e94:	ldr	w2, [x2, #8]
  402e98:	cmp	w2, w19
  402e9c:	b.gt	402eb0 <apply_condition+0x98>
  402ea0:	ldr	x1, [x1, #8]
  402ea4:	ldr	w1, [x1, #8]
  402ea8:	cmp	w1, w19
  402eac:	b.ge	402f04 <apply_condition+0xec>  // b.tcont
  402eb0:	cmp	x0, x3
  402eb4:	b.ne	402e88 <apply_condition+0x70>  // b.any
  402eb8:	ldr	w0, [x5, #8]
  402ebc:	ldp	x19, x20, [sp, #16]
  402ec0:	cmp	w0, #0x0
  402ec4:	cset	w0, ne  // ne = any
  402ec8:	ldp	x29, x30, [sp], #32
  402ecc:	ret
  402ed0:	ldr	x0, [x20, #8]
  402ed4:	mov	w1, w19
  402ed8:	bl	402e18 <apply_condition>
  402edc:	ands	w0, w0, #0xff
  402ee0:	b.eq	402e48 <apply_condition+0x30>  // b.none
  402ee4:	ldr	x20, [x20, #16]
  402ee8:	b	402e2c <apply_condition+0x14>
  402eec:	ldr	x0, [x20, #8]
  402ef0:	mov	w1, w19
  402ef4:	bl	402e18 <apply_condition>
  402ef8:	ands	w0, w0, #0xff
  402efc:	b.ne	402e48 <apply_condition+0x30>  // b.any
  402f00:	b	402ee4 <apply_condition+0xcc>
  402f04:	ldr	w0, [x5, #8]
  402f08:	cmp	w0, #0x0
  402f0c:	cset	w0, eq  // eq = none
  402f10:	b	402e48 <apply_condition+0x30>
  402f14:	nop

0000000000402f18 <print_condition_greater>:
  402f18:	ldr	w2, [x0]
  402f1c:	cmp	w2, #0x2
  402f20:	b.eq	402f2c <print_condition_greater+0x14>  // b.none
  402f24:	mov	w0, #0x0                   	// #0
  402f28:	ret
  402f2c:	ldr	x2, [x0, #8]
  402f30:	mov	w0, #0x0                   	// #0
  402f34:	ldr	w3, [x2, #8]
  402f38:	cbnz	w3, 402fc4 <print_condition_greater+0xac>
  402f3c:	ldr	x0, [x2, #16]
  402f40:	ldp	x8, x7, [x0]
  402f44:	cbz	x7, 402fc8 <print_condition_greater+0xb0>
  402f48:	mov	w3, #0xffffffff            	// #-1
  402f4c:	mov	x2, #0x0                   	// #0
  402f50:	ldr	x4, [x8, x2, lsl #3]
  402f54:	add	w3, w3, #0x1
  402f58:	add	x2, x2, #0x1
  402f5c:	ldr	x5, [x4]
  402f60:	ldr	w6, [x5]
  402f64:	cbnz	w6, 402f24 <print_condition_greater+0xc>
  402f68:	ldr	x4, [x4, #8]
  402f6c:	ldr	w6, [x4]
  402f70:	cbnz	w6, 402f24 <print_condition_greater+0xc>
  402f74:	ldr	w0, [x5, #8]
  402f78:	cmp	w0, w3
  402f7c:	b.ne	402f24 <print_condition_greater+0xc>  // b.any
  402f80:	ldr	w3, [x4, #8]
  402f84:	cmp	x2, x7
  402f88:	b.ne	402f50 <print_condition_greater+0x38>  // b.any
  402f8c:	lsl	x2, x2, #3
  402f90:	sub	x2, x2, #0x8
  402f94:	stp	x29, x30, [sp, #-16]!
  402f98:	mov	x0, x1
  402f9c:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  402fa0:	mov	x29, sp
  402fa4:	ldr	x2, [x8, x2]
  402fa8:	add	x1, x1, #0x498
  402fac:	ldr	x2, [x2, #8]
  402fb0:	ldr	w2, [x2, #8]
  402fb4:	bl	4015b0 <fprintf@plt>
  402fb8:	mov	w0, #0x1                   	// #1
  402fbc:	ldp	x29, x30, [sp], #16
  402fc0:	ret
  402fc4:	ret
  402fc8:	mov	x2, #0xfffffffffffffff8    	// #-8
  402fcc:	b	402f94 <print_condition_greater+0x7c>

0000000000402fd0 <print_condition_negation>:
  402fd0:	ldr	w2, [x0]
  402fd4:	cmp	w2, #0x2
  402fd8:	b.eq	402fe4 <print_condition_negation+0x14>  // b.none
  402fdc:	mov	w0, #0x0                   	// #0
  402fe0:	ret
  402fe4:	ldr	x2, [x0, #8]
  402fe8:	mov	w0, #0x0                   	// #0
  402fec:	ldr	w3, [x2, #8]
  402ff0:	cbnz	w3, 40301c <print_condition_negation+0x4c>
  402ff4:	stp	x29, x30, [sp, #-32]!
  402ff8:	mov	x29, sp
  402ffc:	ldr	x2, [x2, #16]
  403000:	str	x19, [sp, #16]
  403004:	ldr	x19, [x2, #8]
  403008:	cmp	x19, #0x1
  40300c:	b.eq	403020 <print_condition_negation+0x50>  // b.none
  403010:	ldr	x19, [sp, #16]
  403014:	ldp	x29, x30, [sp], #32
  403018:	ret
  40301c:	ret
  403020:	ldr	x2, [x2]
  403024:	ldr	x2, [x2]
  403028:	ldp	x3, x2, [x2]
  40302c:	cmp	x3, x2
  403030:	b.ne	403010 <print_condition_negation+0x40>  // b.any
  403034:	ldr	w2, [x3, #8]
  403038:	mov	x0, x1
  40303c:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  403040:	add	x1, x1, #0x4b8
  403044:	bl	4015b0 <fprintf@plt>
  403048:	mov	w0, w19
  40304c:	b	403010 <print_condition_negation+0x40>

0000000000403050 <print_expression.isra.0>:
  403050:	mov	w3, w0
  403054:	and	w1, w1, #0xff
  403058:	mov	x0, x2
  40305c:	cbz	w3, 403080 <print_expression.isra.0+0x30>
  403060:	cmp	w1, #0x0
  403064:	adrp	x4, 404000 <cldr_plural_rule_list_print+0x338>
  403068:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  40306c:	add	x4, x4, #0x4e0
  403070:	add	x1, x1, #0x4d8
  403074:	mov	w2, w3
  403078:	csel	x1, x1, x4, ne  // ne = any
  40307c:	b	4015b0 <fprintf@plt>
  403080:	mov	x1, x2
  403084:	mov	w0, #0x6e                  	// #110
  403088:	b	401340 <fputc@plt>
  40308c:	nop

0000000000403090 <print_condition>:
  403090:	stp	x29, x30, [sp, #-80]!
  403094:	mov	x29, sp
  403098:	stp	x19, x20, [sp, #16]
  40309c:	mov	x19, x3
  4030a0:	ldr	w20, [x0]
  4030a4:	stp	x21, x22, [sp, #32]
  4030a8:	mov	x21, x0
  4030ac:	mov	w22, w1
  4030b0:	cbz	w20, 4030d8 <print_condition+0x48>
  4030b4:	cmp	w20, #0x1
  4030b8:	b.eq	40327c <print_condition+0x1ec>  // b.none
  4030bc:	cmp	w20, #0x2
  4030c0:	mov	w0, #0x0                   	// #0
  4030c4:	b.eq	403130 <print_condition+0xa0>  // b.none
  4030c8:	ldp	x19, x20, [sp, #16]
  4030cc:	ldp	x21, x22, [sp, #32]
  4030d0:	ldp	x29, x30, [sp], #80
  4030d4:	ret
  4030d8:	cmp	w1, #0x1
  4030dc:	b.eq	4032c4 <print_condition+0x234>  // b.none
  4030e0:	ldr	x0, [x0, #8]
  4030e4:	mov	w2, #0x0                   	// #0
  4030e8:	mov	w1, #0x0                   	// #0
  4030ec:	bl	403090 <print_condition>
  4030f0:	mov	x3, x19
  4030f4:	mov	x2, #0x4                   	// #4
  4030f8:	mov	x1, #0x1                   	// #1
  4030fc:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  403100:	add	x0, x0, #0x508
  403104:	bl	401510 <fwrite@plt>
  403108:	ldr	x0, [x21, #16]
  40310c:	mov	x3, x19
  403110:	mov	w2, #0x0                   	// #0
  403114:	mov	w1, #0x0                   	// #0
  403118:	bl	403090 <print_condition>
  40311c:	mov	w0, #0x1                   	// #1
  403120:	ldp	x19, x20, [sp, #16]
  403124:	ldp	x21, x22, [sp, #32]
  403128:	ldp	x29, x30, [sp], #80
  40312c:	ret
  403130:	ldr	x20, [x21, #8]
  403134:	stp	x23, x24, [sp, #48]
  403138:	and	w23, w2, #0xff
  40313c:	ldr	w2, [x20, #8]
  403140:	ldr	x0, [x20, #16]
  403144:	ldr	x1, [x0, #8]
  403148:	cbnz	w2, 403324 <print_condition+0x294>
  40314c:	cbnz	w22, 403158 <print_condition+0xc8>
  403150:	cmp	x1, #0x1
  403154:	b.hi	403468 <print_condition+0x3d8>  // b.pmore
  403158:	cbz	x1, 403500 <print_condition+0x470>
  40315c:	ldr	x0, [x0]
  403160:	stp	x25, x26, [sp, #64]
  403164:	adrp	x26, 404000 <cldr_plural_rule_list_print+0x338>
  403168:	adrp	x25, 404000 <cldr_plural_rule_list_print+0x338>
  40316c:	add	x26, x26, #0x528
  403170:	ldr	x24, [x0]
  403174:	add	x25, x25, #0x508
  403178:	mov	x21, #0x0                   	// #0
  40317c:	nop
  403180:	ldp	x0, x1, [x24]
  403184:	ldr	w0, [x0, #8]
  403188:	ldr	w1, [x1, #8]
  40318c:	cmp	w0, w1
  403190:	b.eq	40354c <print_condition+0x4bc>  // b.none
  403194:	cbz	w0, 403480 <print_condition+0x3f0>
  403198:	cmp	w22, #0x1
  40319c:	b.eq	40368c <print_condition+0x5fc>  // b.none
  4031a0:	ldr	x0, [x20, #16]
  4031a4:	ldr	x0, [x0, #8]
  4031a8:	cmp	x0, #0x1
  4031ac:	b.ls	4031bc <print_condition+0x12c>  // b.plast
  4031b0:	mov	x1, x19
  4031b4:	mov	w0, #0x28                  	// #40
  4031b8:	bl	401340 <fputc@plt>
  4031bc:	ldr	x0, [x20]
  4031c0:	mov	x2, x19
  4031c4:	mov	w1, #0x0                   	// #0
  4031c8:	ldr	w0, [x0, #4]
  4031cc:	bl	403050 <print_expression.isra.0>
  4031d0:	ldr	x2, [x24]
  4031d4:	mov	x1, x26
  4031d8:	mov	x0, x19
  4031dc:	ldr	w2, [x2, #8]
  4031e0:	bl	4015b0 <fprintf@plt>
  4031e4:	mov	x3, x19
  4031e8:	mov	x2, #0x4                   	// #4
  4031ec:	mov	x1, #0x1                   	// #1
  4031f0:	mov	x0, x25
  4031f4:	bl	401510 <fwrite@plt>
  4031f8:	ldr	x0, [x20]
  4031fc:	mov	x2, x19
  403200:	mov	w1, #0x0                   	// #0
  403204:	ldr	w0, [x0, #4]
  403208:	bl	403050 <print_expression.isra.0>
  40320c:	ldr	x2, [x24, #8]
  403210:	mov	x0, x19
  403214:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  403218:	add	x1, x1, #0x518
  40321c:	ldr	w2, [x2, #8]
  403220:	bl	4015b0 <fprintf@plt>
  403224:	ldr	x0, [x20, #16]
  403228:	ldr	x1, [x0, #8]
  40322c:	cmp	x1, #0x1
  403230:	b.ls	403248 <print_condition+0x1b8>  // b.plast
  403234:	mov	x1, x19
  403238:	mov	w0, #0x29                  	// #41
  40323c:	bl	401340 <fputc@plt>
  403240:	ldr	x0, [x20, #16]
  403244:	ldr	x1, [x0, #8]
  403248:	add	x21, x21, #0x1
  40324c:	cmp	x21, x1
  403250:	b.cs	403664 <print_condition+0x5d4>  // b.hs, b.nlast
  403254:	ldr	x0, [x0]
  403258:	ldr	x24, [x0, x21, lsl #3]
  40325c:	cbz	x21, 403180 <print_condition+0xf0>
  403260:	mov	x3, x19
  403264:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  403268:	mov	x2, #0x4                   	// #4
  40326c:	mov	x1, #0x1                   	// #1
  403270:	add	x0, x0, #0x510
  403274:	bl	401510 <fwrite@plt>
  403278:	b	403180 <print_condition+0xf0>
  40327c:	cbz	w1, 40358c <print_condition+0x4fc>
  403280:	ldr	x0, [x0, #8]
  403284:	mov	w1, w20
  403288:	mov	w2, #0x0                   	// #0
  40328c:	bl	403090 <print_condition>
  403290:	mov	x3, x19
  403294:	mov	x2, #0x4                   	// #4
  403298:	mov	x1, #0x1                   	// #1
  40329c:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  4032a0:	add	x0, x0, #0x510
  4032a4:	bl	401510 <fwrite@plt>
  4032a8:	ldr	x0, [x21, #16]
  4032ac:	mov	x3, x19
  4032b0:	mov	w1, w20
  4032b4:	mov	w2, #0x0                   	// #0
  4032b8:	bl	403090 <print_condition>
  4032bc:	mov	w0, w20
  4032c0:	b	4030c8 <print_condition+0x38>
  4032c4:	mov	x1, x3
  4032c8:	mov	w0, #0x28                  	// #40
  4032cc:	bl	401340 <fputc@plt>
  4032d0:	ldr	x0, [x21, #8]
  4032d4:	mov	x3, x19
  4032d8:	mov	w2, #0x0                   	// #0
  4032dc:	mov	w1, #0x0                   	// #0
  4032e0:	bl	403090 <print_condition>
  4032e4:	mov	x3, x19
  4032e8:	mov	x2, #0x4                   	// #4
  4032ec:	mov	x1, #0x1                   	// #1
  4032f0:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  4032f4:	add	x0, x0, #0x508
  4032f8:	bl	401510 <fwrite@plt>
  4032fc:	ldr	x0, [x21, #16]
  403300:	mov	x3, x19
  403304:	mov	w2, #0x0                   	// #0
  403308:	mov	w1, #0x0                   	// #0
  40330c:	bl	403090 <print_condition>
  403310:	mov	x1, x19
  403314:	mov	w0, #0x29                  	// #41
  403318:	bl	401340 <fputc@plt>
  40331c:	mov	w0, w22
  403320:	b	4030c8 <print_condition+0x38>
  403324:	cmp	w22, #0x1
  403328:	b.eq	403448 <print_condition+0x3b8>  // b.none
  40332c:	cbz	x1, 403500 <print_condition+0x470>
  403330:	ldr	x0, [x0]
  403334:	stp	x25, x26, [sp, #64]
  403338:	adrp	x26, 404000 <cldr_plural_rule_list_print+0x338>
  40333c:	adrp	x25, 404000 <cldr_plural_rule_list_print+0x338>
  403340:	add	x26, x26, #0x530
  403344:	ldr	x24, [x0]
  403348:	add	x25, x25, #0x510
  40334c:	mov	x21, #0x0                   	// #0
  403350:	ldp	x0, x1, [x24]
  403354:	ldr	w0, [x0, #8]
  403358:	ldr	w1, [x1, #8]
  40335c:	cmp	w0, w1
  403360:	b.eq	40350c <print_condition+0x47c>  // b.none
  403364:	cbz	w0, 4034b8 <print_condition+0x428>
  403368:	cbz	w22, 4035ec <print_condition+0x55c>
  40336c:	ldr	x0, [x20, #16]
  403370:	ldr	x0, [x0, #8]
  403374:	cmp	x0, #0x1
  403378:	b.ls	403388 <print_condition+0x2f8>  // b.plast
  40337c:	mov	x1, x19
  403380:	mov	w0, #0x28                  	// #40
  403384:	bl	401340 <fputc@plt>
  403388:	ldr	x0, [x20]
  40338c:	mov	x2, x19
  403390:	mov	w1, #0x0                   	// #0
  403394:	ldr	w0, [x0, #4]
  403398:	bl	403050 <print_expression.isra.0>
  40339c:	ldr	x2, [x24]
  4033a0:	mov	x1, x26
  4033a4:	mov	x0, x19
  4033a8:	ldr	w2, [x2, #8]
  4033ac:	bl	4015b0 <fprintf@plt>
  4033b0:	mov	x3, x19
  4033b4:	mov	x2, #0x4                   	// #4
  4033b8:	mov	x1, #0x1                   	// #1
  4033bc:	mov	x0, x25
  4033c0:	bl	401510 <fwrite@plt>
  4033c4:	ldr	x0, [x20]
  4033c8:	mov	x2, x19
  4033cc:	mov	w1, #0x0                   	// #0
  4033d0:	ldr	w0, [x0, #4]
  4033d4:	bl	403050 <print_expression.isra.0>
  4033d8:	ldr	x2, [x24, #8]
  4033dc:	mov	x0, x19
  4033e0:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  4033e4:	add	x1, x1, #0x520
  4033e8:	ldr	w2, [x2, #8]
  4033ec:	bl	4015b0 <fprintf@plt>
  4033f0:	ldr	x0, [x20, #16]
  4033f4:	ldr	x1, [x0, #8]
  4033f8:	cmp	x1, #0x1
  4033fc:	b.ls	403414 <print_condition+0x384>  // b.plast
  403400:	mov	x1, x19
  403404:	mov	w0, #0x29                  	// #41
  403408:	bl	401340 <fputc@plt>
  40340c:	ldr	x0, [x20, #16]
  403410:	ldr	x1, [x0, #8]
  403414:	add	x21, x21, #0x1
  403418:	cmp	x1, x21
  40341c:	b.ls	4034f0 <print_condition+0x460>  // b.plast
  403420:	ldr	x0, [x0]
  403424:	ldr	x24, [x0, x21, lsl #3]
  403428:	cbz	x21, 403350 <print_condition+0x2c0>
  40342c:	mov	x3, x19
  403430:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  403434:	mov	x2, #0x4                   	// #4
  403438:	mov	x1, #0x1                   	// #1
  40343c:	add	x0, x0, #0x508
  403440:	bl	401510 <fwrite@plt>
  403444:	b	403350 <print_condition+0x2c0>
  403448:	cmp	x1, #0x1
  40344c:	b.ls	40332c <print_condition+0x29c>  // b.plast
  403450:	mov	x1, x3
  403454:	mov	w0, #0x28                  	// #40
  403458:	bl	401340 <fputc@plt>
  40345c:	ldr	x0, [x20, #16]
  403460:	ldr	x1, [x0, #8]
  403464:	b	40332c <print_condition+0x29c>
  403468:	mov	x1, x3
  40346c:	mov	w0, #0x28                  	// #40
  403470:	bl	401340 <fputc@plt>
  403474:	ldr	x0, [x20, #16]
  403478:	ldr	x1, [x0, #8]
  40347c:	b	403158 <print_condition+0xc8>
  403480:	ldr	x0, [x20]
  403484:	mov	x2, x19
  403488:	mov	w1, #0x0                   	// #0
  40348c:	ldr	w0, [x0, #4]
  403490:	bl	403050 <print_expression.isra.0>
  403494:	ldr	x2, [x24, #8]
  403498:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  40349c:	add	x1, x1, #0x518
  4034a0:	ldr	w2, [x2, #8]
  4034a4:	mov	x0, x19
  4034a8:	bl	4015b0 <fprintf@plt>
  4034ac:	ldr	x0, [x20, #16]
  4034b0:	ldr	x1, [x0, #8]
  4034b4:	b	403248 <print_condition+0x1b8>
  4034b8:	ldr	x0, [x20]
  4034bc:	mov	x2, x19
  4034c0:	mov	w1, #0x0                   	// #0
  4034c4:	ldr	w0, [x0, #4]
  4034c8:	bl	403050 <print_expression.isra.0>
  4034cc:	ldr	x2, [x24, #8]
  4034d0:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  4034d4:	add	x1, x1, #0x520
  4034d8:	ldr	w2, [x2, #8]
  4034dc:	mov	x0, x19
  4034e0:	bl	4015b0 <fprintf@plt>
  4034e4:	ldr	x0, [x20, #16]
  4034e8:	ldr	x1, [x0, #8]
  4034ec:	b	403414 <print_condition+0x384>
  4034f0:	cmp	x1, #0x1
  4034f4:	ccmp	w22, #0x1, #0x0, hi  // hi = pmore
  4034f8:	b.eq	403670 <print_condition+0x5e0>  // b.none
  4034fc:	ldp	x25, x26, [sp, #64]
  403500:	mov	w0, #0x1                   	// #1
  403504:	ldp	x23, x24, [sp, #48]
  403508:	b	4030c8 <print_condition+0x38>
  40350c:	ldr	x0, [x20]
  403510:	mov	x2, x19
  403514:	mov	w1, w23
  403518:	ldr	w0, [x0, #4]
  40351c:	bl	403050 <print_expression.isra.0>
  403520:	cbz	w23, 403704 <print_condition+0x674>
  403524:	ldr	x2, [x20, #16]
  403528:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  40352c:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  403530:	add	x0, x0, #0x500
  403534:	add	x1, x1, #0x4f8
  403538:	ldr	x2, [x2, #8]
  40353c:	cmp	x2, #0x1
  403540:	csel	x1, x1, x0, ne  // ne = any
  403544:	ldr	x2, [x24]
  403548:	b	4034d8 <print_condition+0x448>
  40354c:	ldr	x0, [x20]
  403550:	mov	x2, x19
  403554:	mov	w1, w23
  403558:	ldr	w0, [x0, #4]
  40355c:	bl	403050 <print_expression.isra.0>
  403560:	cbz	w23, 403714 <print_condition+0x684>
  403564:	ldr	x2, [x20, #16]
  403568:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  40356c:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  403570:	add	x0, x0, #0x4f0
  403574:	add	x1, x1, #0x4e8
  403578:	ldr	x2, [x2, #8]
  40357c:	cmp	x2, #0x1
  403580:	csel	x1, x1, x0, ne  // ne = any
  403584:	ldr	x2, [x24]
  403588:	b	4034a0 <print_condition+0x410>
  40358c:	mov	x1, x3
  403590:	mov	w0, #0x28                  	// #40
  403594:	bl	401340 <fputc@plt>
  403598:	ldr	x0, [x21, #8]
  40359c:	mov	x3, x19
  4035a0:	mov	w1, w20
  4035a4:	mov	w2, #0x0                   	// #0
  4035a8:	bl	403090 <print_condition>
  4035ac:	mov	x3, x19
  4035b0:	mov	x2, #0x4                   	// #4
  4035b4:	mov	x1, #0x1                   	// #1
  4035b8:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  4035bc:	add	x0, x0, #0x510
  4035c0:	bl	401510 <fwrite@plt>
  4035c4:	ldr	x0, [x21, #16]
  4035c8:	mov	x3, x19
  4035cc:	mov	w2, #0x0                   	// #0
  4035d0:	mov	w1, w20
  4035d4:	bl	403090 <print_condition>
  4035d8:	mov	x1, x19
  4035dc:	mov	w0, #0x29                  	// #41
  4035e0:	bl	401340 <fputc@plt>
  4035e4:	mov	w0, w20
  4035e8:	b	4030c8 <print_condition+0x38>
  4035ec:	mov	x1, x19
  4035f0:	mov	w0, #0x28                  	// #40
  4035f4:	bl	401340 <fputc@plt>
  4035f8:	ldr	x0, [x20]
  4035fc:	mov	x2, x19
  403600:	mov	w1, #0x0                   	// #0
  403604:	ldr	w0, [x0, #4]
  403608:	bl	403050 <print_expression.isra.0>
  40360c:	ldr	x2, [x24]
  403610:	mov	x1, x26
  403614:	mov	x0, x19
  403618:	ldr	w2, [x2, #8]
  40361c:	bl	4015b0 <fprintf@plt>
  403620:	mov	x3, x19
  403624:	mov	x0, x25
  403628:	mov	x2, #0x4                   	// #4
  40362c:	mov	x1, #0x1                   	// #1
  403630:	bl	401510 <fwrite@plt>
  403634:	ldr	x0, [x20]
  403638:	mov	x2, x19
  40363c:	mov	w1, #0x0                   	// #0
  403640:	ldr	w0, [x0, #4]
  403644:	bl	403050 <print_expression.isra.0>
  403648:	ldr	x2, [x24, #8]
  40364c:	mov	x0, x19
  403650:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  403654:	add	x1, x1, #0x520
  403658:	ldr	w2, [x2, #8]
  40365c:	bl	4015b0 <fprintf@plt>
  403660:	b	403400 <print_condition+0x370>
  403664:	cmp	w22, #0x0
  403668:	ccmp	x1, #0x1, #0x0, eq  // eq = none
  40366c:	b.ls	4034fc <print_condition+0x46c>  // b.plast
  403670:	mov	x1, x19
  403674:	mov	w0, #0x29                  	// #41
  403678:	bl	401340 <fputc@plt>
  40367c:	mov	w0, #0x1                   	// #1
  403680:	ldp	x23, x24, [sp, #48]
  403684:	ldp	x25, x26, [sp, #64]
  403688:	b	4030c8 <print_condition+0x38>
  40368c:	mov	x1, x19
  403690:	mov	w0, #0x28                  	// #40
  403694:	bl	401340 <fputc@plt>
  403698:	ldr	x0, [x20]
  40369c:	mov	x2, x19
  4036a0:	mov	w1, #0x0                   	// #0
  4036a4:	ldr	w0, [x0, #4]
  4036a8:	bl	403050 <print_expression.isra.0>
  4036ac:	ldr	x2, [x24]
  4036b0:	mov	x1, x26
  4036b4:	mov	x0, x19
  4036b8:	ldr	w2, [x2, #8]
  4036bc:	bl	4015b0 <fprintf@plt>
  4036c0:	mov	x3, x19
  4036c4:	mov	x0, x25
  4036c8:	mov	x2, #0x4                   	// #4
  4036cc:	mov	x1, #0x1                   	// #1
  4036d0:	bl	401510 <fwrite@plt>
  4036d4:	ldr	x0, [x20]
  4036d8:	mov	x2, x19
  4036dc:	mov	w1, #0x0                   	// #0
  4036e0:	ldr	w0, [x0, #4]
  4036e4:	bl	403050 <print_expression.isra.0>
  4036e8:	ldr	x2, [x24, #8]
  4036ec:	mov	x0, x19
  4036f0:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  4036f4:	add	x1, x1, #0x518
  4036f8:	ldr	w2, [x2, #8]
  4036fc:	bl	4015b0 <fprintf@plt>
  403700:	b	403234 <print_condition+0x1a4>
  403704:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  403708:	add	x1, x1, #0x4f8
  40370c:	ldr	x2, [x24]
  403710:	b	4034d8 <print_condition+0x448>
  403714:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  403718:	add	x1, x1, #0x4e8
  40371c:	ldr	x2, [x24]
  403720:	b	4034a0 <print_condition+0x410>
  403724:	nop

0000000000403728 <cldr_plural_range_free>:
  403728:	stp	x29, x30, [sp, #-32]!
  40372c:	mov	x29, sp
  403730:	ldr	x1, [x0]
  403734:	str	x19, [sp, #16]
  403738:	mov	x19, x0
  40373c:	ldr	x0, [x0, #8]
  403740:	cmp	x1, x0
  403744:	b.eq	403754 <cldr_plural_range_free+0x2c>  // b.none
  403748:	mov	x0, x1
  40374c:	bl	401500 <free@plt>
  403750:	ldr	x0, [x19, #8]
  403754:	bl	401500 <free@plt>
  403758:	mov	x0, x19
  40375c:	ldr	x19, [sp, #16]
  403760:	ldp	x29, x30, [sp], #32
  403764:	b	401500 <free@plt>

0000000000403768 <cldr_plural_range_list_free>:
  403768:	stp	x29, x30, [sp, #-32]!
  40376c:	mov	x29, sp
  403770:	ldr	x1, [x0, #8]
  403774:	str	x19, [sp, #16]
  403778:	mov	x19, x0
  40377c:	sub	x0, x1, #0x1
  403780:	str	x0, [x19, #8]
  403784:	cbz	x1, 4037a4 <cldr_plural_range_list_free+0x3c>
  403788:	ldr	x1, [x19]
  40378c:	ldr	x0, [x1, x0, lsl #3]
  403790:	bl	403728 <cldr_plural_range_free>
  403794:	ldr	x1, [x19, #8]
  403798:	sub	x0, x1, #0x1
  40379c:	str	x0, [x19, #8]
  4037a0:	cbnz	x1, 403788 <cldr_plural_range_list_free+0x20>
  4037a4:	ldr	x0, [x19]
  4037a8:	bl	401500 <free@plt>
  4037ac:	mov	x0, x19
  4037b0:	ldr	x19, [sp, #16]
  4037b4:	ldp	x29, x30, [sp], #32
  4037b8:	b	401500 <free@plt>
  4037bc:	nop

00000000004037c0 <cldr_plural_relation_free>:
  4037c0:	stp	x29, x30, [sp, #-32]!
  4037c4:	mov	x29, sp
  4037c8:	str	x19, [sp, #16]
  4037cc:	mov	x19, x0
  4037d0:	ldr	x0, [x0]
  4037d4:	bl	401500 <free@plt>
  4037d8:	ldr	x0, [x19, #16]
  4037dc:	bl	403768 <cldr_plural_range_list_free>
  4037e0:	mov	x0, x19
  4037e4:	ldr	x19, [sp, #16]
  4037e8:	ldp	x29, x30, [sp], #32
  4037ec:	b	401500 <free@plt>

00000000004037f0 <cldr_plural_condition_free>:
  4037f0:	stp	x29, x30, [sp, #-32]!
  4037f4:	mov	x29, sp
  4037f8:	str	x19, [sp, #16]
  4037fc:	mov	x19, x0
  403800:	ldr	w0, [x0]
  403804:	cmp	w0, #0x1
  403808:	b.ls	403824 <cldr_plural_condition_free+0x34>  // b.plast
  40380c:	cmp	w0, #0x2
  403810:	b.eq	403844 <cldr_plural_condition_free+0x54>  // b.none
  403814:	mov	x0, x19
  403818:	ldr	x19, [sp, #16]
  40381c:	ldp	x29, x30, [sp], #32
  403820:	b	401500 <free@plt>
  403824:	ldr	x0, [x19, #8]
  403828:	bl	4037f0 <cldr_plural_condition_free>
  40382c:	ldr	x0, [x19, #16]
  403830:	bl	4037f0 <cldr_plural_condition_free>
  403834:	mov	x0, x19
  403838:	ldr	x19, [sp, #16]
  40383c:	ldp	x29, x30, [sp], #32
  403840:	b	401500 <free@plt>
  403844:	ldr	x0, [x19, #8]
  403848:	bl	4037c0 <cldr_plural_relation_free>
  40384c:	mov	x0, x19
  403850:	ldr	x19, [sp, #16]
  403854:	ldp	x29, x30, [sp], #32
  403858:	b	401500 <free@plt>
  40385c:	nop

0000000000403860 <eval_condition>:
  403860:	stp	x29, x30, [sp, #-48]!
  403864:	mov	x29, sp
  403868:	ldr	w1, [x0]
  40386c:	stp	x19, x20, [sp, #16]
  403870:	mov	x19, x0
  403874:	ldr	x0, [x0, #8]
  403878:	cbz	w1, 403924 <eval_condition+0xc4>
  40387c:	cmp	w1, #0x1
  403880:	b.eq	4038c8 <eval_condition+0x68>  // b.none
  403884:	ldr	x5, [x0]
  403888:	ldr	w1, [x5]
  40388c:	sub	w2, w1, #0x66
  403890:	cmp	w2, #0x11
  403894:	b.hi	4038bc <eval_condition+0x5c>  // b.pmore
  403898:	mov	x1, #0x1                   	// #1
  40389c:	mov	x3, #0x4001                	// #16385
  4038a0:	movk	x3, #0x3, lsl #16
  4038a4:	lsl	x1, x1, x2
  4038a8:	tst	x1, x3
  4038ac:	b.ne	4039d4 <eval_condition+0x174>  // b.any
  4038b0:	mov	x2, #0x108                 	// #264
  4038b4:	tst	x1, x2
  4038b8:	b.ne	403b08 <eval_condition+0x2a8>  // b.any
  4038bc:	ldp	x19, x20, [sp, #16]
  4038c0:	ldp	x29, x30, [sp], #48
  4038c4:	ret
  4038c8:	bl	403860 <eval_condition>
  4038cc:	ldr	x0, [x19, #16]
  4038d0:	bl	403860 <eval_condition>
  4038d4:	ldr	x20, [x19, #8]
  4038d8:	ldr	w0, [x20]
  4038dc:	cmp	w0, #0x3
  4038e0:	b.eq	4039b0 <eval_condition+0x150>  // b.none
  4038e4:	str	x21, [sp, #32]
  4038e8:	ldr	x21, [x19, #16]
  4038ec:	ldr	w1, [x21]
  4038f0:	cmp	w1, #0x3
  4038f4:	b.eq	4039ac <eval_condition+0x14c>  // b.none
  4038f8:	cmp	w1, #0x4
  4038fc:	ccmp	w0, #0x4, #0x0, eq  // eq = none
  403900:	b.eq	403be0 <eval_condition+0x380>  // b.none
  403904:	cmp	w0, #0x4
  403908:	b.eq	403b90 <eval_condition+0x330>  // b.none
  40390c:	cmp	w1, #0x4
  403910:	b.eq	403970 <eval_condition+0x110>  // b.none
  403914:	ldp	x19, x20, [sp, #16]
  403918:	ldr	x21, [sp, #32]
  40391c:	ldp	x29, x30, [sp], #48
  403920:	ret
  403924:	bl	403860 <eval_condition>
  403928:	ldr	x0, [x19, #16]
  40392c:	bl	403860 <eval_condition>
  403930:	ldr	x20, [x19, #8]
  403934:	ldr	w0, [x20]
  403938:	cmp	w0, #0x4
  40393c:	b.eq	403988 <eval_condition+0x128>  // b.none
  403940:	str	x21, [sp, #32]
  403944:	ldr	x21, [x19, #16]
  403948:	ldr	w1, [x21]
  40394c:	cmp	w1, #0x4
  403950:	b.eq	403984 <eval_condition+0x124>  // b.none
  403954:	cmp	w1, #0x3
  403958:	ccmp	w0, #0x3, #0x0, eq  // eq = none
  40395c:	b.eq	403bc0 <eval_condition+0x360>  // b.none
  403960:	cmp	w0, #0x3
  403964:	b.eq	403b90 <eval_condition+0x330>  // b.none
  403968:	cmp	w1, #0x3
  40396c:	b.ne	403914 <eval_condition+0xb4>  // b.any
  403970:	mov	x0, x21
  403974:	bl	4037f0 <cldr_plural_condition_free>
  403978:	mov	x0, x20
  40397c:	ldr	x1, [x19, #8]
  403980:	b	403ba0 <eval_condition+0x340>
  403984:	ldr	x21, [sp, #32]
  403988:	mov	x0, x20
  40398c:	bl	4037f0 <cldr_plural_condition_free>
  403990:	ldr	x0, [x19, #16]
  403994:	bl	4037f0 <cldr_plural_condition_free>
  403998:	mov	w0, #0x4                   	// #4
  40399c:	str	w0, [x19]
  4039a0:	ldp	x19, x20, [sp, #16]
  4039a4:	ldp	x29, x30, [sp], #48
  4039a8:	ret
  4039ac:	ldr	x21, [sp, #32]
  4039b0:	mov	x0, x20
  4039b4:	bl	4037f0 <cldr_plural_condition_free>
  4039b8:	ldr	x0, [x19, #16]
  4039bc:	bl	4037f0 <cldr_plural_condition_free>
  4039c0:	mov	w0, #0x3                   	// #3
  4039c4:	str	w0, [x19]
  4039c8:	ldp	x19, x20, [sp, #16]
  4039cc:	ldp	x29, x30, [sp], #48
  4039d0:	ret
  4039d4:	ldr	x1, [x0, #16]
  4039d8:	ldr	x6, [x1, #8]
  4039dc:	cbz	x6, 403a58 <eval_condition+0x1f8>
  4039e0:	ldr	w5, [x0, #8]
  4039e4:	mov	x2, #0x0                   	// #0
  4039e8:	ldr	x7, [x1]
  4039ec:	nop
  4039f0:	ldr	x1, [x7, x2, lsl #3]
  4039f4:	cbnz	w5, 403a60 <eval_condition+0x200>
  4039f8:	ldr	x3, [x1]
  4039fc:	ldr	w4, [x3]
  403a00:	cbnz	w4, 403a24 <eval_condition+0x1c4>
  403a04:	ldr	w3, [x3, #8]
  403a08:	cbz	w3, 403a38 <eval_condition+0x1d8>
  403a0c:	mov	w20, #0x4                   	// #4
  403a10:	bl	4037c0 <cldr_plural_relation_free>
  403a14:	str	w20, [x19]
  403a18:	ldp	x19, x20, [sp, #16]
  403a1c:	ldp	x29, x30, [sp], #48
  403a20:	ret
  403a24:	cmp	w4, #0x1
  403a28:	b.ne	403a0c <eval_condition+0x1ac>  // b.any
  403a2c:	ldr	d0, [x3, #8]
  403a30:	fcmp	d0, #0.0
  403a34:	b.ne	403a0c <eval_condition+0x1ac>  // b.any
  403a38:	ldr	x1, [x1, #8]
  403a3c:	ldr	w3, [x1]
  403a40:	cbnz	w3, 403aa0 <eval_condition+0x240>
  403a44:	ldr	w1, [x1, #8]
  403a48:	cbnz	w1, 403a0c <eval_condition+0x1ac>
  403a4c:	add	x2, x2, #0x1
  403a50:	cmp	x2, x6
  403a54:	b.ne	4039f0 <eval_condition+0x190>  // b.any
  403a58:	mov	w20, #0x3                   	// #3
  403a5c:	b	403a10 <eval_condition+0x1b0>
  403a60:	cmp	w5, #0x1
  403a64:	b.ne	403a4c <eval_condition+0x1ec>  // b.any
  403a68:	ldr	x3, [x1]
  403a6c:	ldr	w4, [x3]
  403a70:	cbnz	w4, 403ac4 <eval_condition+0x264>
  403a74:	ldr	w3, [x3, #8]
  403a78:	cbz	w3, 403a0c <eval_condition+0x1ac>
  403a7c:	ldr	x1, [x1, #8]
  403a80:	ldr	w3, [x1]
  403a84:	cbnz	w3, 403ae4 <eval_condition+0x284>
  403a88:	ldr	w1, [x1, #8]
  403a8c:	cbz	w1, 403a0c <eval_condition+0x1ac>
  403a90:	add	x2, x2, #0x1
  403a94:	cmp	x2, x6
  403a98:	b.ne	4039f0 <eval_condition+0x190>  // b.any
  403a9c:	b	403a58 <eval_condition+0x1f8>
  403aa0:	cmp	w3, #0x1
  403aa4:	b.ne	403a0c <eval_condition+0x1ac>  // b.any
  403aa8:	ldr	d0, [x1, #8]
  403aac:	fcmp	d0, #0.0
  403ab0:	b.ne	403a0c <eval_condition+0x1ac>  // b.any
  403ab4:	add	x2, x2, #0x1
  403ab8:	cmp	x2, x6
  403abc:	b.ne	4039f0 <eval_condition+0x190>  // b.any
  403ac0:	b	403a58 <eval_condition+0x1f8>
  403ac4:	cmp	w4, #0x1
  403ac8:	b.ne	403a7c <eval_condition+0x21c>  // b.any
  403acc:	ldr	d0, [x3, #8]
  403ad0:	fcmp	d0, #0.0
  403ad4:	b.eq	403a0c <eval_condition+0x1ac>  // b.none
  403ad8:	ldr	x1, [x1, #8]
  403adc:	ldr	w3, [x1]
  403ae0:	cbz	w3, 403a88 <eval_condition+0x228>
  403ae4:	cmp	w3, #0x1
  403ae8:	b.ne	403a4c <eval_condition+0x1ec>  // b.any
  403aec:	ldr	d0, [x1, #8]
  403af0:	fcmp	d0, #0.0
  403af4:	b.eq	403a0c <eval_condition+0x1ac>  // b.none
  403af8:	add	x2, x2, #0x1
  403afc:	cmp	x2, x6
  403b00:	b.ne	4039f0 <eval_condition+0x190>  // b.any
  403b04:	b	403a58 <eval_condition+0x1f8>
  403b08:	ldr	x0, [x0, #16]
  403b0c:	ldr	x4, [x0, #8]
  403b10:	cbz	x4, 403b7c <eval_condition+0x31c>
  403b14:	ldr	x0, [x0]
  403b18:	add	x4, x0, x4, lsl #3
  403b1c:	nop
  403b20:	ldr	x2, [x0]
  403b24:	add	x0, x0, #0x8
  403b28:	ldr	x1, [x2]
  403b2c:	ldr	w3, [x1]
  403b30:	cmp	w3, #0x1
  403b34:	b.ne	403b54 <eval_condition+0x2f4>  // b.any
  403b38:	ldr	d0, [x1, #8]
  403b3c:	str	wzr, [x1]
  403b40:	fcvtzs	w3, d0
  403b44:	scvtf	d1, w3
  403b48:	fcmp	d0, d1
  403b4c:	cinc	w3, w3, ne  // ne = any
  403b50:	str	w3, [x1, #8]
  403b54:	ldr	x1, [x2, #8]
  403b58:	ldr	w2, [x1]
  403b5c:	cmp	w2, #0x1
  403b60:	b.ne	403b74 <eval_condition+0x314>  // b.any
  403b64:	ldr	d0, [x1, #8]
  403b68:	str	wzr, [x1]
  403b6c:	fcvtzs	w2, d0
  403b70:	str	w2, [x1, #8]
  403b74:	cmp	x4, x0
  403b78:	b.ne	403b20 <eval_condition+0x2c0>  // b.any
  403b7c:	mov	w0, #0x69                  	// #105
  403b80:	str	w0, [x5]
  403b84:	ldp	x19, x20, [sp, #16]
  403b88:	ldp	x29, x30, [sp], #48
  403b8c:	ret
  403b90:	mov	x0, x20
  403b94:	bl	4037f0 <cldr_plural_condition_free>
  403b98:	ldr	x1, [x19, #16]
  403b9c:	mov	x0, x21
  403ba0:	ldp	x2, x3, [x1, #8]
  403ba4:	ldr	w1, [x1]
  403ba8:	stp	x2, x3, [x19, #8]
  403bac:	ldr	x21, [sp, #32]
  403bb0:	str	w1, [x19]
  403bb4:	ldp	x19, x20, [sp, #16]
  403bb8:	ldp	x29, x30, [sp], #48
  403bbc:	b	401500 <free@plt>
  403bc0:	mov	x0, x20
  403bc4:	bl	4037f0 <cldr_plural_condition_free>
  403bc8:	ldr	x0, [x19, #16]
  403bcc:	bl	4037f0 <cldr_plural_condition_free>
  403bd0:	mov	w0, #0x3                   	// #3
  403bd4:	ldr	x21, [sp, #32]
  403bd8:	str	w0, [x19]
  403bdc:	b	4038bc <eval_condition+0x5c>
  403be0:	mov	x0, x20
  403be4:	bl	4037f0 <cldr_plural_condition_free>
  403be8:	ldr	x0, [x19, #16]
  403bec:	bl	4037f0 <cldr_plural_condition_free>
  403bf0:	mov	w0, #0x4                   	// #4
  403bf4:	ldr	x21, [sp, #32]
  403bf8:	str	w0, [x19]
  403bfc:	b	4038bc <eval_condition+0x5c>

0000000000403c00 <cldr_plural_rule_list_free>:
  403c00:	stp	x29, x30, [sp, #-32]!
  403c04:	mov	x29, sp
  403c08:	stp	x19, x20, [sp, #16]
  403c0c:	mov	x20, x0
  403c10:	ldr	x1, [x0, #8]
  403c14:	sub	x0, x1, #0x1
  403c18:	str	x0, [x20, #8]
  403c1c:	cbz	x1, 403c50 <cldr_plural_rule_list_free+0x50>
  403c20:	ldr	x1, [x20]
  403c24:	ldr	x19, [x1, x0, lsl #3]
  403c28:	ldr	x0, [x19]
  403c2c:	bl	401500 <free@plt>
  403c30:	ldr	x0, [x19, #8]
  403c34:	bl	4037f0 <cldr_plural_condition_free>
  403c38:	mov	x0, x19
  403c3c:	bl	401500 <free@plt>
  403c40:	ldr	x1, [x20, #8]
  403c44:	sub	x0, x1, #0x1
  403c48:	str	x0, [x20, #8]
  403c4c:	cbnz	x1, 403c20 <cldr_plural_rule_list_free+0x20>
  403c50:	ldr	x0, [x20]
  403c54:	bl	401500 <free@plt>
  403c58:	mov	x0, x20
  403c5c:	ldp	x19, x20, [sp, #16]
  403c60:	ldp	x29, x30, [sp], #32
  403c64:	b	401500 <free@plt>

0000000000403c68 <cldr_plural_parse>:
  403c68:	stp	x29, x30, [sp, #-64]!
  403c6c:	mov	x29, sp
  403c70:	str	x19, [sp, #16]
  403c74:	mov	x19, x0
  403c78:	str	x0, [sp, #40]
  403c7c:	stp	xzr, xzr, [sp, #48]
  403c80:	bl	4012c0 <strlen@plt>
  403c84:	mov	x1, x0
  403c88:	add	x19, x19, x1
  403c8c:	mov	x0, #0x18                  	// #24
  403c90:	str	x19, [sp, #48]
  403c94:	bl	401400 <xmalloc@plt>
  403c98:	mov	x1, x0
  403c9c:	str	x1, [sp, #56]
  403ca0:	add	x0, sp, #0x28
  403ca4:	stp	xzr, xzr, [x1]
  403ca8:	str	xzr, [x1, #16]
  403cac:	bl	4020c0 <yyparse>
  403cb0:	cmp	w0, #0x0
  403cb4:	ldr	x1, [sp, #56]
  403cb8:	ldr	x19, [sp, #16]
  403cbc:	csel	x0, x1, xzr, eq  // eq = none
  403cc0:	ldp	x29, x30, [sp], #64
  403cc4:	ret

0000000000403cc8 <cldr_plural_rule_list_print>:
  403cc8:	stp	x29, x30, [sp, #-80]!
  403ccc:	mov	x29, sp
  403cd0:	stp	x19, x20, [sp, #16]
  403cd4:	mov	x20, x0
  403cd8:	ldr	x0, [x0, #8]
  403cdc:	stp	x21, x22, [sp, #32]
  403ce0:	mov	x21, x1
  403ce4:	cbz	x0, 404058 <cldr_plural_rule_list_print+0x390>
  403ce8:	mov	x19, #0x0                   	// #0
  403cec:	nop
  403cf0:	ldr	x0, [x20]
  403cf4:	ldr	x0, [x0, x19, lsl #3]
  403cf8:	add	x19, x19, #0x1
  403cfc:	ldr	x0, [x0, #8]
  403d00:	bl	403860 <eval_condition>
  403d04:	ldr	x6, [x20, #8]
  403d08:	cmp	x6, x19
  403d0c:	b.hi	403cf0 <cldr_plural_rule_list_print+0x28>  // b.pmore
  403d10:	cbz	x6, 404058 <cldr_plural_rule_list_print+0x390>
  403d14:	ldr	x7, [x20]
  403d18:	lsl	x8, x6, #3
  403d1c:	mov	w19, #0x0                   	// #0
  403d20:	stp	x23, x24, [sp, #48]
  403d24:	add	x9, x8, x7
  403d28:	ldr	x0, [x7], #8
  403d2c:	ldr	x2, [x0, #8]
  403d30:	mov	x0, x2
  403d34:	bl	402ce8 <find_largest_modulus>
  403d38:	mov	w5, w0
  403d3c:	mov	x0, x2
  403d40:	bl	402d58 <find_largest_number>
  403d44:	cmp	w5, w0
  403d48:	ccmp	w5, w19, #0x4, ge  // ge = tcont
  403d4c:	csel	w19, w19, w5, le
  403d50:	cmp	x9, x7
  403d54:	b.ne	403d28 <cldr_plural_rule_list_print+0x60>  // b.any
  403d58:	cmp	w19, #0x0
  403d5c:	b.gt	403f24 <cldr_plural_rule_list_print+0x25c>
  403d60:	ldr	x3, [x20]
  403d64:	mov	x19, #0x1                   	// #1
  403d68:	mov	x1, x3
  403d6c:	add	x2, x3, x8
  403d70:	ldr	x0, [x1], #8
  403d74:	ldr	x0, [x0, #8]
  403d78:	ldr	w0, [x0]
  403d7c:	sub	w0, w0, #0x3
  403d80:	cmp	w0, #0x1
  403d84:	cinc	x19, x19, hi  // hi = pmore
  403d88:	cmp	x2, x1
  403d8c:	b.ne	403d70 <cldr_plural_rule_list_print+0xa8>  // b.any
  403d90:	cmp	x19, #0x1
  403d94:	b.eq	404054 <cldr_plural_rule_list_print+0x38c>  // b.none
  403d98:	cmp	x19, #0x2
  403d9c:	mov	x0, #0x0                   	// #0
  403da0:	b.eq	403e2c <cldr_plural_rule_list_print+0x164>  // b.none
  403da4:	mov	x2, x19
  403da8:	mov	x0, x21
  403dac:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  403db0:	add	x1, x1, #0x550
  403db4:	bl	4015b0 <fprintf@plt>
  403db8:	ldr	x0, [x20, #8]
  403dbc:	cbz	x0, 403efc <cldr_plural_rule_list_print+0x234>
  403dc0:	cmp	x19, #0x2
  403dc4:	adrp	x22, 404000 <cldr_plural_rule_list_print+0x338>
  403dc8:	cset	w19, eq  // eq = none
  403dcc:	add	x22, x22, #0x568
  403dd0:	mov	x23, #0x0                   	// #0
  403dd4:	mov	x24, #0x0                   	// #0
  403dd8:	ldr	x4, [x20]
  403ddc:	str	x25, [sp, #64]
  403de0:	ldr	x0, [x4, x24, lsl #3]
  403de4:	mov	x3, x21
  403de8:	mov	w2, w19
  403dec:	mov	w1, #0x4                   	// #4
  403df0:	add	x25, x24, #0x1
  403df4:	ldr	x0, [x0, #8]
  403df8:	bl	403090 <print_condition>
  403dfc:	ands	w0, w0, #0xff
  403e00:	ldr	x3, [x20, #8]
  403e04:	b.eq	403e10 <cldr_plural_rule_list_print+0x148>  // b.none
  403e08:	cmp	x3, #0x1
  403e0c:	b.hi	403e84 <cldr_plural_rule_list_print+0x1bc>  // b.pmore
  403e10:	cmp	x3, x25
  403e14:	b.ls	403ef0 <cldr_plural_rule_list_print+0x228>  // b.plast
  403e18:	ldr	x4, [x20]
  403e1c:	mov	x24, x25
  403e20:	b	403de0 <cldr_plural_rule_list_print+0x118>
  403e24:	cmp	x0, x6
  403e28:	b.eq	404040 <cldr_plural_rule_list_print+0x378>  // b.none
  403e2c:	ldr	x1, [x3, x0, lsl #3]
  403e30:	add	x0, x0, #0x1
  403e34:	ldr	x22, [x1, #8]
  403e38:	ldr	w1, [x22]
  403e3c:	sub	w1, w1, #0x3
  403e40:	cmp	w1, #0x1
  403e44:	b.ls	403e24 <cldr_plural_rule_list_print+0x15c>  // b.plast
  403e48:	mov	x1, x21
  403e4c:	mov	x0, x22
  403e50:	bl	402fd0 <print_condition_negation>
  403e54:	tst	w0, #0xff
  403e58:	b.ne	403e70 <cldr_plural_rule_list_print+0x1a8>  // b.any
  403e5c:	mov	x0, x22
  403e60:	mov	x1, x21
  403e64:	bl	402f18 <print_condition_greater>
  403e68:	tst	w0, #0xff
  403e6c:	b.eq	403da4 <cldr_plural_rule_list_print+0xdc>  // b.none
  403e70:	ldp	x19, x20, [sp, #16]
  403e74:	ldp	x21, x22, [sp, #32]
  403e78:	ldp	x23, x24, [sp, #48]
  403e7c:	ldp	x29, x30, [sp], #80
  403e80:	ret
  403e84:	cmp	x3, x25
  403e88:	b.ls	404020 <cldr_plural_rule_list_print+0x358>  // b.plast
  403e8c:	ldr	x4, [x20]
  403e90:	mov	x1, x25
  403e94:	mov	w5, #0x0                   	// #0
  403e98:	ldr	x2, [x4, x1, lsl #3]
  403e9c:	add	x1, x1, #0x1
  403ea0:	ldr	x2, [x2, #8]
  403ea4:	ldr	w2, [x2]
  403ea8:	sub	w2, w2, #0x3
  403eac:	cmp	w2, #0x2
  403eb0:	csel	w5, w5, w0, cc  // cc = lo, ul, last
  403eb4:	cmp	x3, x1
  403eb8:	b.ne	403e98 <cldr_plural_rule_list_print+0x1d0>  // b.any
  403ebc:	sub	x3, x3, #0x1
  403ec0:	cmp	w5, #0x0
  403ec4:	ccmp	x3, x24, #0x0, ne  // ne = any
  403ec8:	b.ls	403e1c <cldr_plural_rule_list_print+0x154>  // b.plast
  403ecc:	mov	x2, x23
  403ed0:	mov	x1, x22
  403ed4:	mov	x0, x21
  403ed8:	bl	4015b0 <fprintf@plt>
  403edc:	ldr	x3, [x20, #8]
  403ee0:	add	x23, x23, #0x1
  403ee4:	cmp	x3, x25
  403ee8:	b.hi	403e18 <cldr_plural_rule_list_print+0x150>  // b.pmore
  403eec:	nop
  403ef0:	cmp	x3, #0x1
  403ef4:	b.hi	404020 <cldr_plural_rule_list_print+0x358>  // b.pmore
  403ef8:	ldr	x25, [sp, #64]
  403efc:	mov	x3, x21
  403f00:	ldp	x19, x20, [sp, #16]
  403f04:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  403f08:	ldp	x21, x22, [sp, #32]
  403f0c:	add	x0, x0, #0x588
  403f10:	ldp	x23, x24, [sp, #48]
  403f14:	mov	x2, #0x3                   	// #3
  403f18:	ldp	x29, x30, [sp], #80
  403f1c:	mov	x1, #0x1                   	// #1
  403f20:	b	401510 <fwrite@plt>
  403f24:	sxtw	x22, w19
  403f28:	mov	x0, x22
  403f2c:	bl	401400 <xmalloc@plt>
  403f30:	mov	x2, x22
  403f34:	mov	x23, x0
  403f38:	mov	w1, #0x0                   	// #0
  403f3c:	bl	4013f0 <memset@plt>
  403f40:	ldr	x22, [x20, #8]
  403f44:	cbz	x22, 403fc8 <cldr_plural_rule_list_print+0x300>
  403f48:	sub	w8, w19, #0x1
  403f4c:	sub	x10, x23, #0x1
  403f50:	ldr	x12, [x20]
  403f54:	add	x8, x8, #0x2
  403f58:	mov	x11, #0x0                   	// #0
  403f5c:	mov	w9, #0x1                   	// #1
  403f60:	ldr	x0, [x12, x11, lsl #3]
  403f64:	mov	x6, #0x1                   	// #1
  403f68:	ldr	x7, [x0, #8]
  403f6c:	nop
  403f70:	mov	w1, w6
  403f74:	mov	x0, x7
  403f78:	bl	402e18 <apply_condition>
  403f7c:	tst	w0, #0xff
  403f80:	b.eq	403f88 <cldr_plural_rule_list_print+0x2c0>  // b.none
  403f84:	strb	w9, [x10, x6]
  403f88:	add	x6, x6, #0x1
  403f8c:	cmp	x8, x6
  403f90:	b.ne	403f70 <cldr_plural_rule_list_print+0x2a8>  // b.any
  403f94:	mov	x2, #0x0                   	// #0
  403f98:	ldrb	w4, [x23, x2]
  403f9c:	mov	w3, w2
  403fa0:	cbz	w4, 403fb4 <cldr_plural_rule_list_print+0x2ec>
  403fa4:	add	w3, w2, #0x1
  403fa8:	add	x2, x2, #0x1
  403fac:	cmp	w19, w2
  403fb0:	b.gt	403f98 <cldr_plural_rule_list_print+0x2d0>
  403fb4:	cmp	w19, w3
  403fb8:	b.eq	40404c <cldr_plural_rule_list_print+0x384>  // b.none
  403fbc:	add	x11, x11, #0x1
  403fc0:	cmp	x22, x11
  403fc4:	b.ne	403f60 <cldr_plural_rule_list_print+0x298>  // b.any
  403fc8:	mov	x0, x23
  403fcc:	bl	401500 <free@plt>
  403fd0:	ldr	x6, [x20, #8]
  403fd4:	cmp	x6, x22
  403fd8:	b.ls	404014 <cldr_plural_rule_list_print+0x34c>  // b.plast
  403fdc:	nop
  403fe0:	ldr	x0, [x20]
  403fe4:	sub	x6, x6, #0x1
  403fe8:	ldr	x19, [x0, x6, lsl #3]
  403fec:	ldr	x0, [x19]
  403ff0:	str	x6, [x20, #8]
  403ff4:	bl	401500 <free@plt>
  403ff8:	ldr	x0, [x19, #8]
  403ffc:	bl	4037f0 <cldr_plural_condition_free>
  404000:	mov	x0, x19
  404004:	bl	401500 <free@plt>
  404008:	ldr	x6, [x20, #8]
  40400c:	cmp	x6, x22
  404010:	b.hi	403fe0 <cldr_plural_rule_list_print+0x318>  // b.pmore
  404014:	cbz	x6, 404054 <cldr_plural_rule_list_print+0x38c>
  404018:	lsl	x8, x6, #3
  40401c:	b	403d60 <cldr_plural_rule_list_print+0x98>
  404020:	add	x3, x23, #0x1
  404024:	mov	x2, x23
  404028:	mov	x0, x21
  40402c:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x338>
  404030:	add	x1, x1, #0x578
  404034:	bl	4015b0 <fprintf@plt>
  404038:	ldr	x25, [sp, #64]
  40403c:	b	403efc <cldr_plural_rule_list_print+0x234>
  404040:	ldr	x0, [x3, x8]
  404044:	ldr	x22, [x0, #8]
  404048:	b	403e48 <cldr_plural_rule_list_print+0x180>
  40404c:	mov	x22, x11
  404050:	b	403fc8 <cldr_plural_rule_list_print+0x300>
  404054:	ldp	x23, x24, [sp, #48]
  404058:	mov	x3, x21
  40405c:	ldp	x19, x20, [sp, #16]
  404060:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x338>
  404064:	ldp	x21, x22, [sp, #32]
  404068:	add	x0, x0, #0x538
  40406c:	ldp	x29, x30, [sp], #80
  404070:	mov	x2, #0x16                  	// #22
  404074:	mov	x1, #0x1                   	// #1
  404078:	b	401510 <fwrite@plt>
  40407c:	nop

0000000000404080 <__libc_csu_init>:
  404080:	stp	x29, x30, [sp, #-64]!
  404084:	mov	x29, sp
  404088:	stp	x19, x20, [sp, #16]
  40408c:	adrp	x20, 415000 <__FRAME_END__+0xfdb4>
  404090:	add	x20, x20, #0xd80
  404094:	stp	x21, x22, [sp, #32]
  404098:	adrp	x21, 415000 <__FRAME_END__+0xfdb4>
  40409c:	add	x21, x21, #0xd78
  4040a0:	sub	x20, x20, x21
  4040a4:	mov	w22, w0
  4040a8:	stp	x23, x24, [sp, #48]
  4040ac:	mov	x23, x1
  4040b0:	mov	x24, x2
  4040b4:	bl	401270 <_init>
  4040b8:	cmp	xzr, x20, asr #3
  4040bc:	b.eq	4040e8 <__libc_csu_init+0x68>  // b.none
  4040c0:	asr	x20, x20, #3
  4040c4:	mov	x19, #0x0                   	// #0
  4040c8:	ldr	x3, [x21, x19, lsl #3]
  4040cc:	mov	x2, x24
  4040d0:	add	x19, x19, #0x1
  4040d4:	mov	x1, x23
  4040d8:	mov	w0, w22
  4040dc:	blr	x3
  4040e0:	cmp	x20, x19
  4040e4:	b.ne	4040c8 <__libc_csu_init+0x48>  // b.any
  4040e8:	ldp	x19, x20, [sp, #16]
  4040ec:	ldp	x21, x22, [sp, #32]
  4040f0:	ldp	x23, x24, [sp, #48]
  4040f4:	ldp	x29, x30, [sp], #64
  4040f8:	ret
  4040fc:	nop

0000000000404100 <__libc_csu_fini>:
  404100:	ret
  404104:	nop

0000000000404108 <atexit>:
  404108:	adrp	x2, 416000 <memcpy@GLIBC_2.17>
  40410c:	mov	x1, #0x0                   	// #0
  404110:	ldr	x2, [x2, #408]
  404114:	b	401330 <__cxa_atexit@plt>

Disassembly of section .fini:

0000000000404118 <_fini>:
  404118:	stp	x29, x30, [sp, #-16]!
  40411c:	mov	x29, sp
  404120:	ldp	x29, x30, [sp], #16
  404124:	ret
