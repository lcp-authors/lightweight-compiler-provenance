In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libltdl.a_clang_-O3:

libltdl_libltdl_la-preopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <preopen_LTX_get_vtable>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	adrp	x20, 0 <preopen_LTX_get_vtable>
   c:	ldr	x8, [x20]
  10:	mov	x19, x0
  14:	mov	x29, sp
  18:	cbnz	x8, 30 <preopen_LTX_get_vtable+0x30>
  1c:	mov	w0, #0x48                  	// #72
  20:	bl	0 <lt__zalloc>
  24:	mov	x8, x0
  28:	str	x0, [x20]
  2c:	cbz	x0, 54 <preopen_LTX_get_vtable+0x54>
  30:	ldr	x9, [x8]
  34:	cbz	x9, 64 <preopen_LTX_get_vtable+0x64>
  38:	ldr	x9, [x8, #56]
  3c:	cmp	x9, x19
  40:	b.eq	54 <preopen_LTX_get_vtable+0x54>  // b.none
  44:	mov	w0, #0x3                   	// #3
  48:	bl	0 <lt__error_string>
  4c:	bl	0 <lt__set_last_error>
  50:	mov	x8, xzr
  54:	ldp	x20, x19, [sp, #16]
  58:	mov	x0, x8
  5c:	ldp	x29, x30, [sp], #32
  60:	ret
  64:	adrp	x9, 0 <preopen_LTX_get_vtable>
  68:	adrp	x10, 0 <preopen_LTX_get_vtable>
  6c:	adrp	x11, 0 <preopen_LTX_get_vtable>
  70:	adrp	x12, 0 <preopen_LTX_get_vtable>
  74:	adrp	x13, 0 <preopen_LTX_get_vtable>
  78:	adrp	x14, 0 <preopen_LTX_get_vtable>
  7c:	add	x9, x9, #0x0
  80:	add	x10, x10, #0x0
  84:	add	x11, x11, #0x0
  88:	add	x12, x12, #0x0
  8c:	add	x13, x13, #0x0
  90:	add	x14, x14, #0x0
  94:	stp	x9, xzr, [x8]
  98:	stp	x10, x11, [x8, #16]
  9c:	stp	x12, x13, [x8, #32]
  a0:	stp	x14, x19, [x8, #48]
  a4:	str	wzr, [x8, #64]
  a8:	ldp	x20, x19, [sp, #16]
  ac:	mov	x0, x8
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret

00000000000000b8 <vm_open>:
  b8:	stp	x29, x30, [sp, #-48]!
  bc:	adrp	x8, 0 <preopen_LTX_get_vtable>
  c0:	stp	x22, x21, [sp, #16]
  c4:	ldr	x21, [x8]
  c8:	stp	x20, x19, [sp, #32]
  cc:	mov	x29, sp
  d0:	cbz	x21, 134 <vm_open+0x7c>
  d4:	adrp	x8, 0 <preopen_LTX_get_vtable>
  d8:	add	x8, x8, #0x0
  dc:	cmp	x1, #0x0
  e0:	csel	x19, x8, x1, eq  // eq = none
  e4:	b	f0 <vm_open+0x38>
  e8:	ldr	x21, [x21]
  ec:	cbz	x21, 13c <vm_open+0x84>
  f0:	ldr	x20, [x21, #8]
  f4:	ldr	x0, [x20]
  f8:	cbz	x0, e8 <vm_open+0x30>
  fc:	add	x22, x20, #0x10
 100:	b	10c <vm_open+0x54>
 104:	ldr	x0, [x22], #16
 108:	cbz	x0, e8 <vm_open+0x30>
 10c:	ldur	x8, [x22, #-8]
 110:	cbnz	x8, 104 <vm_open+0x4c>
 114:	mov	x1, x19
 118:	bl	0 <strcmp>
 11c:	cbnz	w0, 104 <vm_open+0x4c>
 120:	ldr	x8, [x22, #8]
 124:	cbz	x8, 104 <vm_open+0x4c>
 128:	ldr	x8, [x22]
 12c:	cbz	x8, 104 <vm_open+0x4c>
 130:	b	14c <vm_open+0x94>
 134:	mov	w0, #0x7                   	// #7
 138:	b	140 <vm_open+0x88>
 13c:	mov	w0, #0x5                   	// #5
 140:	bl	0 <lt__error_string>
 144:	bl	0 <lt__set_last_error>
 148:	mov	x20, xzr
 14c:	mov	x0, x20
 150:	ldp	x20, x19, [sp, #32]
 154:	ldp	x22, x21, [sp, #16]
 158:	ldp	x29, x30, [sp], #48
 15c:	ret

0000000000000160 <vm_close>:
 160:	mov	w0, wzr
 164:	ret

0000000000000168 <vm_sym>:
 168:	stp	x29, x30, [sp, #-48]!
 16c:	str	x21, [sp, #16]
 170:	stp	x20, x19, [sp, #32]
 174:	mov	x21, x1
 178:	ldr	x0, [x21, #16]!
 17c:	mov	x20, x1
 180:	mov	x19, x2
 184:	mov	x29, sp
 188:	cbz	x0, 1a0 <vm_sym+0x38>
 18c:	adrp	x1, 0 <preopen_LTX_get_vtable>
 190:	add	x1, x1, #0x0
 194:	bl	0 <strcmp>
 198:	cmp	w0, #0x0
 19c:	csel	x20, x21, x20, eq  // eq = none
 1a0:	ldr	x0, [x20, #32]
 1a4:	cbz	x0, 1c0 <vm_sym+0x58>
 1a8:	add	x20, x20, #0x30
 1ac:	mov	x1, x19
 1b0:	bl	0 <strcmp>
 1b4:	cbz	w0, 1e0 <vm_sym+0x78>
 1b8:	ldr	x0, [x20], #16
 1bc:	cbnz	x0, 1ac <vm_sym+0x44>
 1c0:	mov	w0, #0xa                   	// #10
 1c4:	bl	0 <lt__error_string>
 1c8:	bl	0 <lt__set_last_error>
 1cc:	mov	x0, xzr
 1d0:	ldp	x20, x19, [sp, #32]
 1d4:	ldr	x21, [sp, #16]
 1d8:	ldp	x29, x30, [sp], #48
 1dc:	ret
 1e0:	ldur	x0, [x20, #-8]
 1e4:	ldp	x20, x19, [sp, #32]
 1e8:	ldr	x21, [sp, #16]
 1ec:	ldp	x29, x30, [sp], #48
 1f0:	ret

00000000000001f4 <vl_init>:
 1f4:	stp	x29, x30, [sp, #-32]!
 1f8:	adrp	x8, 0 <preopen_LTX_get_vtable>
 1fc:	add	x8, x8, #0x0
 200:	str	x19, [sp, #16]
 204:	ldr	x19, [x8]
 208:	mov	x29, sp
 20c:	str	xzr, [x8, #8]
 210:	cbz	x19, 254 <vl_init+0x60>
 214:	mov	w0, #0x10                  	// #16
 218:	bl	0 <lt__zalloc>
 21c:	cbz	x0, 264 <vl_init+0x70>
 220:	str	x19, [x0, #8]
 224:	adrp	x8, 0 <preopen_LTX_get_vtable>
 228:	ldr	x9, [x8]
 22c:	str	x9, [x0]
 230:	str	x0, [x8]
 234:	ldr	x0, [x19, #16]
 238:	cbz	x0, 258 <vl_init+0x64>
 23c:	adrp	x1, 0 <preopen_LTX_get_vtable>
 240:	add	x1, x1, #0x0
 244:	bl	0 <strcmp>
 248:	cbnz	w0, 254 <vl_init+0x60>
 24c:	ldr	x8, [x19, #24]
 250:	blr	x8
 254:	mov	w0, wzr
 258:	ldr	x19, [sp, #16]
 25c:	ldp	x29, x30, [sp], #32
 260:	ret
 264:	mov	w0, #0x1                   	// #1
 268:	ldr	x19, [sp, #16]
 26c:	ldp	x29, x30, [sp], #32
 270:	ret

0000000000000274 <vl_exit>:
 274:	stp	x29, x30, [sp, #-32]!
 278:	adrp	x8, 0 <preopen_LTX_get_vtable>
 27c:	add	x8, x8, #0x0
 280:	ldr	x0, [x8, #16]
 284:	str	x19, [sp, #16]
 288:	mov	x29, sp
 28c:	str	xzr, [x8]
 290:	cbz	x0, 2a4 <vl_exit+0x30>
 294:	ldr	x19, [x0]
 298:	bl	0 <free>
 29c:	mov	x0, x19
 2a0:	cbnz	x19, 294 <vl_exit+0x20>
 2a4:	ldr	x19, [sp, #16]
 2a8:	adrp	x8, 0 <preopen_LTX_get_vtable>
 2ac:	str	xzr, [x8]
 2b0:	mov	w0, wzr
 2b4:	ldp	x29, x30, [sp], #32
 2b8:	ret

00000000000002bc <lt_dlpreload_default>:
 2bc:	adrp	x8, 0 <preopen_LTX_get_vtable>
 2c0:	str	x0, [x8]
 2c4:	mov	w0, wzr
 2c8:	ret

00000000000002cc <lt_dlpreload>:
 2cc:	stp	x29, x30, [sp, #-32]!
 2d0:	stp	x20, x19, [sp, #16]
 2d4:	adrp	x20, 0 <preopen_LTX_get_vtable>
 2d8:	ldr	x8, [x20]
 2dc:	mov	x29, sp
 2e0:	cbz	x0, 31c <lt_dlpreload+0x50>
 2e4:	mov	x19, x0
 2e8:	cbz	x8, 300 <lt_dlpreload+0x34>
 2ec:	ldr	x9, [x8, #8]
 2f0:	cmp	x9, x19
 2f4:	b.eq	37c <lt_dlpreload+0xb0>  // b.none
 2f8:	ldr	x8, [x8]
 2fc:	cbnz	x8, 2ec <lt_dlpreload+0x20>
 300:	mov	w0, #0x10                  	// #16
 304:	bl	0 <lt__zalloc>
 308:	cbnz	x0, 354 <lt_dlpreload+0x88>
 30c:	mov	w0, #0x1                   	// #1
 310:	ldp	x20, x19, [sp, #16]
 314:	ldp	x29, x30, [sp], #32
 318:	ret
 31c:	cbz	x8, 334 <lt_dlpreload+0x68>
 320:	ldr	x19, [x8]
 324:	mov	x0, x8
 328:	bl	0 <free>
 32c:	mov	x8, x19
 330:	cbnz	x19, 320 <lt_dlpreload+0x54>
 334:	adrp	x8, 0 <preopen_LTX_get_vtable>
 338:	add	x8, x8, #0x0
 33c:	ldr	x19, [x8]
 340:	str	xzr, [x8, #8]
 344:	cbz	x19, 37c <lt_dlpreload+0xb0>
 348:	mov	w0, #0x10                  	// #16
 34c:	bl	0 <lt__zalloc>
 350:	cbz	x0, 38c <lt_dlpreload+0xc0>
 354:	str	x19, [x0, #8]
 358:	ldr	x8, [x20]
 35c:	str	x8, [x0]
 360:	str	x0, [x20]
 364:	ldr	x0, [x19, #16]
 368:	cbz	x0, 310 <lt_dlpreload+0x44>
 36c:	adrp	x1, 0 <preopen_LTX_get_vtable>
 370:	add	x1, x1, #0x0
 374:	bl	0 <strcmp>
 378:	cbz	w0, 39c <lt_dlpreload+0xd0>
 37c:	mov	w0, wzr
 380:	ldp	x20, x19, [sp, #16]
 384:	ldp	x29, x30, [sp], #32
 388:	ret
 38c:	mov	w0, #0x1                   	// #1
 390:	ldp	x20, x19, [sp, #16]
 394:	ldp	x29, x30, [sp], #32
 398:	ret
 39c:	ldr	x8, [x19, #24]
 3a0:	blr	x8
 3a4:	mov	w0, wzr
 3a8:	ldp	x20, x19, [sp, #16]
 3ac:	ldp	x29, x30, [sp], #32
 3b0:	ret

00000000000003b4 <lt_dlpreload_open>:
 3b4:	stp	x29, x30, [sp, #-96]!
 3b8:	adrp	x8, 0 <preopen_LTX_get_vtable>
 3bc:	stp	x24, x23, [sp, #48]
 3c0:	ldr	x24, [x8]
 3c4:	str	x27, [sp, #16]
 3c8:	stp	x26, x25, [sp, #32]
 3cc:	stp	x22, x21, [sp, #64]
 3d0:	stp	x20, x19, [sp, #80]
 3d4:	mov	x29, sp
 3d8:	cbz	x24, 480 <lt_dlpreload_open+0xcc>
 3dc:	mov	x20, x1
 3e0:	mov	w19, wzr
 3e4:	mov	w25, wzr
 3e8:	mov	x21, x0
 3ec:	cbz	x0, 488 <lt_dlpreload_open+0xd4>
 3f0:	adrp	x22, 0 <preopen_LTX_get_vtable>
 3f4:	add	x22, x22, #0x0
 3f8:	b	404 <lt_dlpreload_open+0x50>
 3fc:	ldr	x24, [x24]
 400:	cbz	x24, 518 <lt_dlpreload_open+0x164>
 404:	ldr	x27, [x24, #8]
 408:	mov	x1, x21
 40c:	ldr	x0, [x27]
 410:	bl	0 <strcmp>
 414:	cbnz	w0, 3fc <lt_dlpreload_open+0x48>
 418:	ldr	x23, [x27, #16]
 41c:	add	w25, w25, #0x1
 420:	cbz	x23, 3fc <lt_dlpreload_open+0x48>
 424:	mov	w26, #0x2                   	// #2
 428:	mov	w8, #0x1                   	// #1
 42c:	b	44c <lt_dlpreload_open+0x98>
 430:	add	w19, w19, #0x1
 434:	ldr	x27, [x24, #8]
 438:	mov	w8, w26
 43c:	lsl	x9, x8, #4
 440:	add	w26, w26, #0x1
 444:	ldr	x23, [x27, x9]
 448:	cbz	x23, 3fc <lt_dlpreload_open+0x48>
 44c:	add	x8, x27, x8, lsl #4
 450:	ldr	x8, [x8, #8]
 454:	cbnz	x8, 434 <lt_dlpreload_open+0x80>
 458:	mov	x0, x23
 45c:	mov	x1, x22
 460:	bl	0 <strcmp>
 464:	cbz	w0, 434 <lt_dlpreload_open+0x80>
 468:	mov	x0, x23
 46c:	bl	0 <lt_dlopen>
 470:	cbz	x0, 430 <lt_dlpreload_open+0x7c>
 474:	blr	x20
 478:	add	w19, w0, w19
 47c:	b	434 <lt_dlpreload_open+0x80>
 480:	mov	w19, wzr
 484:	b	51c <lt_dlpreload_open+0x168>
 488:	adrp	x21, 0 <preopen_LTX_get_vtable>
 48c:	add	x21, x21, #0x0
 490:	b	49c <lt_dlpreload_open+0xe8>
 494:	ldr	x24, [x24]
 498:	cbz	x24, 518 <lt_dlpreload_open+0x164>
 49c:	ldr	x26, [x24, #8]
 4a0:	mov	x1, x21
 4a4:	ldr	x0, [x26]
 4a8:	bl	0 <strcmp>
 4ac:	cbnz	w0, 494 <lt_dlpreload_open+0xe0>
 4b0:	ldr	x22, [x26, #16]
 4b4:	add	w25, w25, #0x1
 4b8:	cbz	x22, 494 <lt_dlpreload_open+0xe0>
 4bc:	mov	w23, #0x2                   	// #2
 4c0:	mov	w8, #0x1                   	// #1
 4c4:	b	4e8 <lt_dlpreload_open+0x134>
 4c8:	blr	x20
 4cc:	add	w19, w0, w19
 4d0:	ldr	x26, [x24, #8]
 4d4:	mov	w8, w23
 4d8:	lsl	x9, x8, #4
 4dc:	add	w23, w23, #0x1
 4e0:	ldr	x22, [x26, x9]
 4e4:	cbz	x22, 494 <lt_dlpreload_open+0xe0>
 4e8:	add	x8, x26, x8, lsl #4
 4ec:	ldr	x8, [x8, #8]
 4f0:	cbnz	x8, 4d0 <lt_dlpreload_open+0x11c>
 4f4:	mov	x0, x22
 4f8:	mov	x1, x21
 4fc:	bl	0 <strcmp>
 500:	cbz	w0, 4d0 <lt_dlpreload_open+0x11c>
 504:	mov	x0, x22
 508:	bl	0 <lt_dlopen>
 50c:	cbnz	x0, 4c8 <lt_dlpreload_open+0x114>
 510:	add	w19, w19, #0x1
 514:	b	4d0 <lt_dlpreload_open+0x11c>
 518:	cbnz	w25, 52c <lt_dlpreload_open+0x178>
 51c:	mov	w0, #0x8                   	// #8
 520:	bl	0 <lt__error_string>
 524:	bl	0 <lt__set_last_error>
 528:	add	w19, w19, #0x1
 52c:	mov	w0, w19
 530:	ldp	x20, x19, [sp, #80]
 534:	ldp	x22, x21, [sp, #64]
 538:	ldp	x24, x23, [sp, #48]
 53c:	ldp	x26, x25, [sp, #32]
 540:	ldr	x27, [sp, #16]
 544:	ldp	x29, x30, [sp], #96
 548:	ret

libltdl_libltdl_la-lt__alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <alloc_die_default>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x8, 0 <stderr>
   8:	ldr	x3, [x8]
   c:	adrp	x0, 0 <alloc_die_default>
  10:	add	x0, x0, #0x0
  14:	mov	w1, #0xf                   	// #15
  18:	mov	w2, #0x1                   	// #1
  1c:	mov	x29, sp
  20:	bl	0 <fwrite>
  24:	mov	w0, #0x1                   	// #1
  28:	bl	0 <exit>

000000000000002c <lt__malloc>:
  2c:	stp	x29, x30, [sp, #-32]!
  30:	str	x19, [sp, #16]
  34:	mov	x29, sp
  38:	bl	0 <malloc>
  3c:	mov	x19, x0
  40:	cbz	x0, 54 <lt__malloc+0x28>
  44:	mov	x0, x19
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret
  54:	adrp	x8, 0 <alloc_die_default>
  58:	ldr	x8, [x8]
  5c:	blr	x8
  60:	mov	x0, x19
  64:	ldr	x19, [sp, #16]
  68:	ldp	x29, x30, [sp], #32
  6c:	ret

0000000000000070 <lt__zalloc>:
  70:	stp	x29, x30, [sp, #-32]!
  74:	stp	x20, x19, [sp, #16]
  78:	mov	x29, sp
  7c:	mov	x20, x0
  80:	bl	0 <malloc>
  84:	mov	x19, x0
  88:	cbz	x0, ac <lt__zalloc+0x3c>
  8c:	mov	x0, x19
  90:	mov	w1, wzr
  94:	mov	x2, x20
  98:	bl	0 <memset>
  9c:	mov	x0, x19
  a0:	ldp	x20, x19, [sp, #16]
  a4:	ldp	x29, x30, [sp], #32
  a8:	ret
  ac:	adrp	x8, 0 <alloc_die_default>
  b0:	ldr	x8, [x8]
  b4:	blr	x8
  b8:	mov	x0, x19
  bc:	ldp	x20, x19, [sp, #16]
  c0:	ldp	x29, x30, [sp], #32
  c4:	ret

00000000000000c8 <lt__realloc>:
  c8:	stp	x29, x30, [sp, #-32]!
  cc:	str	x19, [sp, #16]
  d0:	mov	x29, sp
  d4:	bl	0 <realloc>
  d8:	mov	x19, x0
  dc:	cbz	x0, f0 <lt__realloc+0x28>
  e0:	mov	x0, x19
  e4:	ldr	x19, [sp, #16]
  e8:	ldp	x29, x30, [sp], #32
  ec:	ret
  f0:	adrp	x8, 0 <alloc_die_default>
  f4:	ldr	x8, [x8]
  f8:	blr	x8
  fc:	mov	x0, x19
 100:	ldr	x19, [sp, #16]
 104:	ldp	x29, x30, [sp], #32
 108:	ret

000000000000010c <lt__memdup>:
 10c:	stp	x29, x30, [sp, #-48]!
 110:	str	x21, [sp, #16]
 114:	mov	x21, x0
 118:	mov	x0, x1
 11c:	stp	x20, x19, [sp, #32]
 120:	mov	x29, sp
 124:	mov	x20, x1
 128:	bl	0 <malloc>
 12c:	mov	x19, x0
 130:	cbz	x0, 148 <lt__memdup+0x3c>
 134:	mov	x0, x19
 138:	mov	x1, x21
 13c:	mov	x2, x20
 140:	bl	0 <memcpy>
 144:	b	154 <lt__memdup+0x48>
 148:	adrp	x8, 0 <alloc_die_default>
 14c:	ldr	x8, [x8]
 150:	blr	x8
 154:	mov	x0, x19
 158:	ldp	x20, x19, [sp, #32]
 15c:	ldr	x21, [sp, #16]
 160:	ldp	x29, x30, [sp], #48
 164:	ret

0000000000000168 <lt__strdup>:
 168:	stp	x29, x30, [sp, #-48]!
 16c:	str	x21, [sp, #16]
 170:	stp	x20, x19, [sp, #32]
 174:	mov	x29, sp
 178:	mov	x20, x0
 17c:	bl	0 <strlen>
 180:	add	x21, x0, #0x1
 184:	mov	x0, x21
 188:	bl	0 <malloc>
 18c:	mov	x19, x0
 190:	cbz	x0, 1a8 <lt__strdup+0x40>
 194:	mov	x0, x19
 198:	mov	x1, x20
 19c:	mov	x2, x21
 1a0:	bl	0 <memcpy>
 1a4:	b	1b4 <lt__strdup+0x4c>
 1a8:	adrp	x8, 0 <alloc_die_default>
 1ac:	ldr	x8, [x8]
 1b0:	blr	x8
 1b4:	mov	x0, x19
 1b8:	ldp	x20, x19, [sp, #32]
 1bc:	ldr	x21, [sp, #16]
 1c0:	ldp	x29, x30, [sp], #48
 1c4:	ret

libltdl_libltdl_la-lt_dlloader.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dlloader_add>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	x0, 6c <lt_dlloader_add+0x6c>
  10:	ldr	x8, [x0, #16]
  14:	mov	x19, x0
  18:	cbz	x8, 6c <lt_dlloader_add+0x6c>
  1c:	ldr	x8, [x19, #24]
  20:	cbz	x8, 6c <lt_dlloader_add+0x6c>
  24:	ldr	x8, [x19, #32]
  28:	cbz	x8, 6c <lt_dlloader_add+0x6c>
  2c:	ldr	w8, [x19, #64]
  30:	cmp	w8, #0x2
  34:	b.cs	6c <lt_dlloader_add+0x6c>  // b.hs, b.nlast
  38:	mov	x0, x19
  3c:	bl	0 <lt__slist_box>
  40:	cbz	x0, 88 <lt_dlloader_add+0x88>
  44:	ldr	w9, [x19, #64]
  48:	mov	x8, x0
  4c:	adrp	x19, 0 <lt_dlloader_add>
  50:	cmp	w9, #0x1
  54:	b.eq	a4 <lt_dlloader_add+0xa4>  // b.none
  58:	cbnz	w9, c8 <lt_dlloader_add+0xc8>
  5c:	ldr	x1, [x19]
  60:	mov	x0, x8
  64:	bl	0 <lt__slist_cons>
  68:	b	b0 <lt_dlloader_add+0xb0>
  6c:	mov	w0, #0x2                   	// #2
  70:	bl	0 <lt__error_string>
  74:	bl	0 <lt__set_last_error>
  78:	mov	w0, #0x1                   	// #1
  7c:	ldr	x19, [sp, #16]
  80:	ldp	x29, x30, [sp], #32
  84:	ret
  88:	adrp	x8, 0 <lt__alloc_die>
  8c:	ldr	x8, [x8]
  90:	blr	x8
  94:	mov	w0, #0x1                   	// #1
  98:	ldr	x19, [sp, #16]
  9c:	ldp	x29, x30, [sp], #32
  a0:	ret
  a4:	ldr	x0, [x19]
  a8:	mov	x1, x8
  ac:	bl	0 <lt__slist_concat>
  b0:	mov	x8, x0
  b4:	mov	w0, wzr
  b8:	str	x8, [x19]
  bc:	ldr	x19, [sp, #16]
  c0:	ldp	x29, x30, [sp], #32
  c4:	ret
  c8:	adrp	x0, 0 <lt_dlloader_add>
  cc:	adrp	x1, 0 <lt_dlloader_add>
  d0:	adrp	x3, 0 <lt_dlloader_add>
  d4:	add	x0, x0, #0x0
  d8:	add	x1, x1, #0x0
  dc:	add	x3, x3, #0x0
  e0:	mov	w2, #0x5e                  	// #94
  e4:	bl	0 <__assert_fail>

00000000000000e8 <lt_dlloader_next>:
  e8:	adrp	x8, 0 <lt_dlloader_add>
  ec:	add	x8, x8, #0x0
  f0:	cmp	x0, #0x0
  f4:	csel	x8, x8, x0, eq  // eq = none
  f8:	ldr	x0, [x8]
  fc:	ret

0000000000000100 <lt_dlloader_get>:
 100:	cbz	x0, 108 <lt_dlloader_get+0x8>
 104:	ldr	x0, [x0, #8]
 108:	ret

000000000000010c <lt_dlloader_remove>:
 10c:	stp	x29, x30, [sp, #-64]!
 110:	stp	x24, x23, [sp, #16]
 114:	stp	x22, x21, [sp, #32]
 118:	stp	x20, x19, [sp, #48]
 11c:	adrp	x8, 0 <lt_dlloader_add>
 120:	ldr	x8, [x8]
 124:	mov	x19, x0
 128:	adrp	x1, 0 <lt_dlloader_add>
 12c:	add	x1, x1, #0x0
 130:	mov	x0, x8
 134:	mov	x2, x19
 138:	mov	x29, sp
 13c:	bl	0 <lt__slist_find>
 140:	cbz	x0, 1b4 <lt_dlloader_remove+0xa8>
 144:	ldr	x22, [x0, #8]
 148:	cbz	x22, 1b4 <lt_dlloader_remove+0xa8>
 14c:	adrp	x0, 0 <lt_dlloader_add>
 150:	add	x0, x0, #0x0
 154:	mov	x1, xzr
 158:	bl	0 <lt_dlinterface_register>
 15c:	mov	x1, xzr
 160:	mov	x20, x0
 164:	bl	0 <lt_dlhandle_iterate>
 168:	cbz	x0, 1f0 <lt_dlloader_remove+0xe4>
 16c:	mov	x21, x0
 170:	mov	w23, wzr
 174:	mov	w24, wzr
 178:	b	190 <lt_dlloader_remove+0x84>
 17c:	mov	x0, x20
 180:	mov	x1, x21
 184:	bl	0 <lt_dlhandle_iterate>
 188:	mov	x21, x0
 18c:	cbz	x0, 1d8 <lt_dlloader_remove+0xcc>
 190:	ldr	x8, [x21, #8]
 194:	cmp	x8, x22
 198:	b.ne	17c <lt_dlloader_remove+0x70>  // b.any
 19c:	mov	x0, x21
 1a0:	bl	0 <lt_dlisresident>
 1a4:	cmp	w0, #0x0
 1a8:	csinc	w23, w23, wzr, eq  // eq = none
 1ac:	mov	w24, #0x1                   	// #1
 1b0:	b	17c <lt_dlloader_remove+0x70>
 1b4:	mov	w0, #0x2                   	// #2
 1b8:	bl	0 <lt__error_string>
 1bc:	bl	0 <lt__set_last_error>
 1c0:	ldp	x20, x19, [sp, #48]
 1c4:	ldp	x22, x21, [sp, #32]
 1c8:	ldp	x24, x23, [sp, #16]
 1cc:	mov	x0, xzr
 1d0:	ldp	x29, x30, [sp], #64
 1d4:	ret
 1d8:	mov	x0, x20
 1dc:	bl	0 <lt_dlinterface_free>
 1e0:	cbz	w24, 1f8 <lt_dlloader_remove+0xec>
 1e4:	cbnz	w23, 1c0 <lt_dlloader_remove+0xb4>
 1e8:	mov	w0, #0x4                   	// #4
 1ec:	b	1b8 <lt_dlloader_remove+0xac>
 1f0:	mov	x0, x20
 1f4:	bl	0 <lt_dlinterface_free>
 1f8:	ldr	x8, [x22, #48]
 1fc:	cbz	x8, 20c <lt_dlloader_remove+0x100>
 200:	ldr	x0, [x22, #56]
 204:	blr	x8
 208:	cbnz	w0, 1c0 <lt_dlloader_remove+0xb4>
 20c:	adrp	x0, 0 <lt_dlloader_add>
 210:	adrp	x1, 0 <lt_dlloader_add>
 214:	add	x0, x0, #0x0
 218:	add	x1, x1, #0x0
 21c:	mov	x2, x19
 220:	bl	0 <lt__slist_remove>
 224:	ldp	x20, x19, [sp, #48]
 228:	ldp	x22, x21, [sp, #32]
 22c:	ldp	x24, x23, [sp, #16]
 230:	ldp	x29, x30, [sp], #64
 234:	b	0 <lt__slist_unbox>

0000000000000238 <lt_dlloader_find>:
 238:	stp	x29, x30, [sp, #-16]!
 23c:	adrp	x8, 0 <lt_dlloader_add>
 240:	ldr	x8, [x8]
 244:	adrp	x1, 0 <lt_dlloader_add>
 248:	mov	x2, x0
 24c:	add	x1, x1, #0x0
 250:	mov	x0, x8
 254:	mov	x29, sp
 258:	bl	0 <lt__slist_find>
 25c:	cbz	x0, 264 <lt_dlloader_find+0x2c>
 260:	ldr	x0, [x0, #8]
 264:	ldp	x29, x30, [sp], #16
 268:	ret

000000000000026c <loader_callback>:
 26c:	stp	x29, x30, [sp, #-32]!
 270:	ldr	x8, [x0, #8]
 274:	str	x19, [sp, #16]
 278:	mov	x29, sp
 27c:	cbz	x8, 2a0 <loader_callback+0x34>
 280:	mov	x19, x0
 284:	ldr	x0, [x8]
 288:	bl	0 <strcmp>
 28c:	cmp	w0, #0x0
 290:	csel	x0, x19, xzr, eq  // eq = none
 294:	ldr	x19, [sp, #16]
 298:	ldp	x29, x30, [sp], #32
 29c:	ret
 2a0:	adrp	x0, 0 <lt_dlloader_add>
 2a4:	adrp	x1, 0 <lt_dlloader_add>
 2a8:	adrp	x3, 0 <lt_dlloader_add>
 2ac:	add	x0, x0, #0x0
 2b0:	add	x1, x1, #0x0
 2b4:	add	x3, x3, #0x0
 2b8:	mov	w2, #0x36                  	// #54
 2bc:	bl	0 <__assert_fail>

libltdl_libltdl_la-lt_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dladderror>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x22, x21, [sp, #16]
   8:	stp	x20, x19, [sp, #32]
   c:	mov	x29, sp
  10:	cbz	x0, 74 <lt_dladderror+0x74>
  14:	adrp	x20, 0 <lt_dladderror>
  18:	ldr	w21, [x20]
  1c:	adrp	x22, 0 <lt_dladderror>
  20:	mov	x19, x0
  24:	ldr	x0, [x22]
  28:	sub	w8, w21, #0x13
  2c:	sbfiz	x1, x8, #3, #32
  30:	bl	0 <lt__realloc>
  34:	cbz	x0, 60 <lt_dladderror+0x60>
  38:	sub	w8, w21, #0x14
  3c:	str	x0, [x22]
  40:	str	x19, [x0, w8, sxtw #3]
  44:	ldr	w0, [x20]
  48:	add	w8, w0, #0x1
  4c:	str	w8, [x20]
  50:	ldp	x20, x19, [sp, #32]
  54:	ldp	x22, x21, [sp, #16]
  58:	ldp	x29, x30, [sp], #48
  5c:	ret
  60:	mov	w0, #0xffffffff            	// #-1
  64:	ldp	x20, x19, [sp, #32]
  68:	ldp	x22, x21, [sp, #16]
  6c:	ldp	x29, x30, [sp], #48
  70:	ret
  74:	adrp	x0, 0 <lt_dladderror>
  78:	adrp	x1, 0 <lt_dladderror>
  7c:	adrp	x3, 0 <lt_dladderror>
  80:	add	x0, x0, #0x0
  84:	add	x1, x1, #0x0
  88:	add	x3, x3, #0x0
  8c:	mov	w2, #0x35                  	// #53
  90:	bl	0 <__assert_fail>

0000000000000094 <lt_dlseterror>:
  94:	tbnz	w0, #31, d4 <lt_dlseterror+0x40>
  98:	adrp	x9, 0 <lt_dladderror>
  9c:	ldr	w9, [x9]
  a0:	mov	w8, w0
  a4:	cmp	w9, w0
  a8:	b.le	d4 <lt_dlseterror+0x40>
  ac:	cmp	w8, #0x13
  b0:	b.gt	ec <lt_dlseterror+0x58>
  b4:	adrp	x9, 0 <lt_dladderror>
  b8:	add	x9, x9, #0x0
  bc:	mov	w10, #0x2a                  	// #42
  c0:	mov	w0, wzr
  c4:	umaddl	x8, w8, w10, x9
  c8:	adrp	x9, 0 <lt_dladderror>
  cc:	str	x8, [x9]
  d0:	ret
  d4:	adrp	x9, 0 <lt_dladderror>
  d8:	adrp	x8, 0 <lt_dladderror>
  dc:	add	x9, x9, #0x0
  e0:	mov	w0, #0x1                   	// #1
  e4:	str	x9, [x8]
  e8:	ret
  ec:	adrp	x9, 0 <lt_dladderror>
  f0:	add	x9, x9, #0x0
  f4:	ldr	x10, [x9]
  f8:	sub	w8, w8, #0x14
  fc:	mov	w0, wzr
 100:	ldr	x8, [x10, w8, sxtw #3]
 104:	str	x8, [x9, #8]
 108:	ret

000000000000010c <lt__set_last_error>:
 10c:	adrp	x8, 0 <lt_dladderror>
 110:	str	x0, [x8]
 114:	ret

0000000000000118 <lt__error_string>:
 118:	stp	x29, x30, [sp, #-16]!
 11c:	mov	x29, sp
 120:	tbnz	w0, #31, 144 <lt__error_string+0x2c>
 124:	cmp	w0, #0x14
 128:	b.ge	164 <lt__error_string+0x4c>  // b.tcont
 12c:	adrp	x8, 0 <lt_dladderror>
 130:	add	x8, x8, #0x0
 134:	mov	w9, #0x2a                  	// #42
 138:	umaddl	x0, w0, w9, x8
 13c:	ldp	x29, x30, [sp], #16
 140:	ret
 144:	adrp	x0, 0 <lt_dladderror>
 148:	adrp	x1, 0 <lt_dladderror>
 14c:	adrp	x3, 0 <lt_dladderror>
 150:	add	x0, x0, #0x0
 154:	add	x1, x1, #0x0
 158:	add	x3, x3, #0x0
 15c:	mov	w2, #0x5f                  	// #95
 160:	bl	0 <__assert_fail>
 164:	adrp	x0, 0 <lt_dladderror>
 168:	adrp	x1, 0 <lt_dladderror>
 16c:	adrp	x3, 0 <lt_dladderror>
 170:	add	x0, x0, #0x0
 174:	add	x1, x1, #0x0
 178:	add	x3, x3, #0x0
 17c:	mov	w2, #0x60                  	// #96
 180:	bl	0 <__assert_fail>

0000000000000184 <lt__get_last_error>:
 184:	adrp	x8, 0 <lt_dladderror>
 188:	ldr	x0, [x8]
 18c:	ret

libltdl_libltdl_la-ltdl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__alloc_die_callback>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	w0, #0xb                   	// #11
       8:	mov	x29, sp
       c:	bl	0 <lt__error_string>
      10:	ldp	x29, x30, [sp], #16
      14:	b	0 <lt__set_last_error>

0000000000000018 <lt_dlinit>:
      18:	stp	x29, x30, [sp, #-32]!
      1c:	adrp	x8, 0 <lt__alloc_die_callback>
      20:	ldr	w9, [x8]
      24:	str	x19, [sp, #16]
      28:	mov	x29, sp
      2c:	add	w10, w9, #0x1
      30:	str	w10, [x8]
      34:	cbz	w9, 48 <lt_dlinit+0x30>
      38:	mov	w0, wzr
      3c:	ldr	x19, [sp, #16]
      40:	ldp	x29, x30, [sp], #32
      44:	ret
      48:	adrp	x9, 0 <lt__alloc_die_callback>
      4c:	adrp	x10, 0 <lt__alloc_die_callback>
      50:	adrp	x8, 0 <lt__alloc_die>
      54:	add	x9, x9, #0x0
      58:	add	x10, x10, #0x0
      5c:	mov	x0, xzr
      60:	str	x9, [x8]
      64:	stp	xzr, xzr, [x10]
      68:	bl	0 <preopen_LTX_get_vtable>
      6c:	mov	x19, x0
      70:	bl	0 <lt_dlloader_add>
      74:	cbnz	x19, 7c <lt_dlinit+0x64>
      78:	cbz	w0, dc <lt_dlinit+0xc4>
      7c:	cbnz	w0, 3c <lt_dlinit+0x24>
      80:	ldr	x8, [x19, #40]
      84:	cbz	x8, b0 <lt_dlinit+0x98>
      88:	ldr	x0, [x19, #56]
      8c:	blr	x8
      90:	cbz	w0, b0 <lt_dlinit+0x98>
      94:	mov	w0, #0x3                   	// #3
      98:	bl	0 <lt__error_string>
      9c:	bl	0 <lt__set_last_error>
      a0:	mov	w0, #0x1                   	// #1
      a4:	ldr	x19, [sp, #16]
      a8:	ldp	x29, x30, [sp], #32
      ac:	ret
      b0:	adrp	x0, 0 <lt_libltdl_LTX_preloaded_symbols>
      b4:	add	x0, x0, #0x0
      b8:	bl	0 <lt_dlpreload>
      bc:	cbnz	w0, 3c <lt_dlinit+0x24>
      c0:	ldr	x19, [sp, #16]
      c4:	adrp	x0, 0 <lt__alloc_die_callback>
      c8:	adrp	x1, 0 <lt__alloc_die_callback>
      cc:	add	x0, x0, #0x0
      d0:	add	x1, x1, #0x0
      d4:	ldp	x29, x30, [sp], #32
      d8:	b	0 <lt_dlpreload_open>
      dc:	adrp	x0, 0 <lt__alloc_die_callback>
      e0:	adrp	x1, 0 <lt__alloc_die_callback>
      e4:	adrp	x3, 0 <lt__alloc_die_callback>
      e8:	add	x0, x0, #0x0
      ec:	add	x1, x1, #0x0
      f0:	add	x3, x3, #0x0
      f4:	mov	w2, #0xc7                  	// #199
      f8:	bl	0 <__assert_fail>

00000000000000fc <loader_init_callback>:
      fc:	stp	x29, x30, [sp, #-32]!
     100:	adrp	x1, 0 <lt__alloc_die_callback>
     104:	add	x1, x1, #0x0
     108:	str	x19, [sp, #16]
     10c:	mov	x29, sp
     110:	bl	1de0 <lt_dlsym>
     114:	cbz	x0, 138 <loader_init_callback+0x3c>
     118:	mov	x8, x0
     11c:	mov	x0, xzr
     120:	blr	x8
     124:	mov	x19, x0
     128:	mov	x0, x19
     12c:	bl	0 <lt_dlloader_add>
     130:	cbz	x19, 148 <loader_init_callback+0x4c>
     134:	b	14c <loader_init_callback+0x50>
     138:	mov	x19, xzr
     13c:	mov	x0, x19
     140:	bl	0 <lt_dlloader_add>
     144:	cbnz	x19, 14c <loader_init_callback+0x50>
     148:	cbz	w0, 19c <loader_init_callback+0xa0>
     14c:	cbz	w0, 15c <loader_init_callback+0x60>
     150:	ldr	x19, [sp, #16]
     154:	ldp	x29, x30, [sp], #32
     158:	ret
     15c:	ldr	x8, [x19, #40]
     160:	cbz	x8, 18c <loader_init_callback+0x90>
     164:	ldr	x0, [x19, #56]
     168:	blr	x8
     16c:	cbz	w0, 150 <loader_init_callback+0x54>
     170:	mov	w0, #0x3                   	// #3
     174:	bl	0 <lt__error_string>
     178:	bl	0 <lt__set_last_error>
     17c:	mov	w0, #0x1                   	// #1
     180:	ldr	x19, [sp, #16]
     184:	ldp	x29, x30, [sp], #32
     188:	ret
     18c:	mov	w0, wzr
     190:	ldr	x19, [sp, #16]
     194:	ldp	x29, x30, [sp], #32
     198:	ret
     19c:	adrp	x0, 0 <lt__alloc_die_callback>
     1a0:	adrp	x1, 0 <lt__alloc_die_callback>
     1a4:	adrp	x3, 0 <lt__alloc_die_callback>
     1a8:	add	x0, x0, #0x0
     1ac:	add	x1, x1, #0x0
     1b0:	add	x3, x3, #0x0
     1b4:	mov	w2, #0xc7                  	// #199
     1b8:	bl	0 <__assert_fail>

00000000000001bc <lt_dlexit>:
     1bc:	stp	x29, x30, [sp, #-64]!
     1c0:	adrp	x8, 0 <lt__alloc_die_callback>
     1c4:	add	x8, x8, #0x0
     1c8:	ldr	w9, [x8]
     1cc:	str	x23, [sp, #16]
     1d0:	stp	x22, x21, [sp, #32]
     1d4:	stp	x20, x19, [sp, #48]
     1d8:	mov	x29, sp
     1dc:	cbz	w9, 1fc <lt_dlexit+0x40>
     1e0:	ldr	x8, [x8, #8]
     1e4:	subs	w9, w9, #0x1
     1e8:	adrp	x10, 0 <lt__alloc_die_callback>
     1ec:	str	w9, [x10]
     1f0:	b.eq	210 <lt_dlexit+0x54>  // b.none
     1f4:	mov	w19, wzr
     1f8:	b	32c <lt_dlexit+0x170>
     1fc:	mov	w0, #0xf                   	// #15
     200:	bl	0 <lt__error_string>
     204:	bl	0 <lt__set_last_error>
     208:	mov	w19, #0x1                   	// #1
     20c:	b	32c <lt_dlexit+0x170>
     210:	cbz	x8, 2c0 <lt_dlexit+0x104>
     214:	adrp	x20, 0 <lt__alloc_die_callback>
     218:	mov	x0, x8
     21c:	ldrb	w9, [x0, #36]
     220:	tbz	w9, #0, 230 <lt_dlexit+0x74>
     224:	ldr	x0, [x0]
     228:	str	x0, [x20]
     22c:	cbnz	x0, 21c <lt_dlexit+0x60>
     230:	cbz	x8, 2c0 <lt_dlexit+0x104>
     234:	mov	w19, wzr
     238:	cbz	x0, 2bc <lt_dlexit+0x100>
     23c:	adrp	x22, 0 <lt__alloc_die_callback>
     240:	mov	w21, #0x1                   	// #1
     244:	add	x22, x22, #0x0
     248:	b	25c <lt_dlexit+0xa0>
     24c:	cbz	w8, 2bc <lt_dlexit+0x100>
     250:	ldr	x0, [x20]
     254:	add	w21, w21, #0x1
     258:	cbz	x0, 2bc <lt_dlexit+0x100>
     25c:	mov	w8, wzr
     260:	b	27c <lt_dlexit+0xc0>
     264:	ldr	x9, [x20]
     268:	cmp	x8, #0x0
     26c:	csel	x23, x23, x9, ne  // ne = any
     270:	mov	w8, #0x1                   	// #1
     274:	mov	x0, x23
     278:	cbz	x23, 24c <lt_dlexit+0x90>
     27c:	ldrb	w9, [x0, #36]
     280:	ldr	x23, [x0]
     284:	tbnz	w9, #0, 274 <lt_dlexit+0xb8>
     288:	ldr	w8, [x0, #32]
     28c:	cmp	w8, w21
     290:	b.gt	270 <lt_dlexit+0xb4>
     294:	bl	344 <lt_dlclose>
     298:	cmp	w0, #0x0
     29c:	cinc	w19, w19, ne  // ne = any
     2a0:	cbz	x23, 250 <lt_dlexit+0x94>
     2a4:	mov	x8, x22
     2a8:	ldr	x8, [x8]
     2ac:	cmp	x8, x23
     2b0:	b.eq	264 <lt_dlexit+0xa8>  // b.none
     2b4:	cbnz	x8, 2a8 <lt_dlexit+0xec>
     2b8:	b	264 <lt_dlexit+0xa8>
     2bc:	cbnz	w19, 2cc <lt_dlexit+0x110>
     2c0:	mov	x0, xzr
     2c4:	bl	0 <lt__set_last_error>
     2c8:	mov	w19, wzr
     2cc:	mov	x0, xzr
     2d0:	bl	0 <lt_dlloader_next>
     2d4:	cbz	x0, 31c <lt_dlexit+0x160>
     2d8:	mov	x20, x0
     2dc:	b	2f0 <lt_dlexit+0x134>
     2e0:	bl	0 <lt__get_last_error>
     2e4:	cmp	x0, #0x0
     2e8:	cinc	w19, w19, ne  // ne = any
     2ec:	cbz	x20, 31c <lt_dlexit+0x160>
     2f0:	mov	x0, x20
     2f4:	mov	x21, x20
     2f8:	bl	0 <lt_dlloader_next>
     2fc:	mov	x20, x0
     300:	mov	x0, x21
     304:	bl	0 <lt_dlloader_get>
     308:	ldr	x0, [x0]
     30c:	bl	0 <lt_dlloader_remove>
     310:	cbz	x0, 2e0 <lt_dlexit+0x124>
     314:	bl	0 <free>
     318:	cbnz	x20, 2f0 <lt_dlexit+0x134>
     31c:	adrp	x20, 0 <lt__alloc_die_callback>
     320:	ldr	x0, [x20]
     324:	bl	0 <free>
     328:	str	xzr, [x20]
     32c:	mov	w0, w19
     330:	ldp	x20, x19, [sp, #48]
     334:	ldp	x22, x21, [sp, #32]
     338:	ldr	x23, [sp, #16]
     33c:	ldp	x29, x30, [sp], #64
     340:	ret

0000000000000344 <lt_dlclose>:
     344:	stp	x29, x30, [sp, #-48]!
     348:	adrp	x8, 0 <lt__alloc_die_callback>
     34c:	ldr	x8, [x8]
     350:	stp	x20, x19, [sp, #32]
     354:	mov	x19, x0
     358:	stp	x22, x21, [sp, #16]
     35c:	cmp	x8, #0x0
     360:	cset	w10, ne  // ne = any
     364:	mov	x29, sp
     368:	cbz	x8, 398 <lt_dlclose+0x54>
     36c:	cmp	x8, x19
     370:	b.eq	430 <lt_dlclose+0xec>  // b.none
     374:	mov	x11, x8
     378:	mov	x9, x11
     37c:	ldr	x11, [x11]
     380:	cmp	x11, #0x0
     384:	cset	w10, ne  // ne = any
     388:	cbz	x11, 39c <lt_dlclose+0x58>
     38c:	cmp	x11, x19
     390:	b.ne	378 <lt_dlclose+0x34>  // b.any
     394:	b	39c <lt_dlclose+0x58>
     398:	mov	x9, x8
     39c:	tbz	w10, #0, 438 <lt_dlclose+0xf4>
     3a0:	ldr	w11, [x19, #32]
     3a4:	ldrb	w10, [x19, #36]
     3a8:	subs	w11, w11, #0x1
     3ac:	str	w11, [x19, #32]
     3b0:	b.gt	440 <lt_dlclose+0xfc>
     3b4:	tbnz	w10, #0, 44c <lt_dlclose+0x108>
     3b8:	ldp	x11, x10, [x19]
     3bc:	adrp	x12, 0 <lt__alloc_die_callback>
     3c0:	add	x12, x12, #0x0
     3c4:	cmp	x8, x19
     3c8:	csel	x8, x12, x9, eq  // eq = none
     3cc:	ldr	x0, [x10, #56]
     3d0:	str	x11, [x8]
     3d4:	ldr	x8, [x10, #24]
     3d8:	ldr	x1, [x19, #56]
     3dc:	blr	x8
     3e0:	ldr	w9, [x19, #40]
     3e4:	mov	w20, w0
     3e8:	cbz	w9, 470 <lt_dlclose+0x12c>
     3ec:	ldr	x8, [x19, #48]
     3f0:	cmp	w9, #0x1
     3f4:	b.lt	478 <lt_dlclose+0x134>  // b.tstop
     3f8:	mov	x22, xzr
     3fc:	mov	w21, wzr
     400:	b	410 <lt_dlclose+0xcc>
     404:	add	x22, x22, #0x1
     408:	cmp	x22, w9, sxtw
     40c:	b.ge	47c <lt_dlclose+0x138>  // b.tcont
     410:	ldr	x0, [x8, x22, lsl #3]
     414:	ldrb	w10, [x0, #36]
     418:	tbnz	w10, #0, 404 <lt_dlclose+0xc0>
     41c:	bl	344 <lt_dlclose>
     420:	ldr	w9, [x19, #40]
     424:	ldr	x8, [x19, #48]
     428:	add	w21, w0, w21
     42c:	b	404 <lt_dlclose+0xc0>
     430:	mov	x9, x8
     434:	tbnz	w10, #0, 3a0 <lt_dlclose+0x5c>
     438:	mov	w0, #0xc                   	// #12
     43c:	b	450 <lt_dlclose+0x10c>
     440:	tbnz	w10, #0, 44c <lt_dlclose+0x108>
     444:	mov	w20, wzr
     448:	b	45c <lt_dlclose+0x118>
     44c:	mov	w0, #0x10                  	// #16
     450:	bl	0 <lt__error_string>
     454:	bl	0 <lt__set_last_error>
     458:	mov	w20, #0x1                   	// #1
     45c:	mov	w0, w20
     460:	ldp	x20, x19, [sp, #32]
     464:	ldp	x22, x21, [sp, #16]
     468:	ldp	x29, x30, [sp], #48
     46c:	ret
     470:	mov	w21, wzr
     474:	b	488 <lt_dlclose+0x144>
     478:	mov	w21, wzr
     47c:	mov	x0, x8
     480:	bl	0 <free>
     484:	str	xzr, [x19, #48]
     488:	ldr	x0, [x19, #72]
     48c:	add	w20, w21, w20
     490:	bl	0 <free>
     494:	ldr	x0, [x19, #16]
     498:	str	xzr, [x19, #72]
     49c:	bl	0 <free>
     4a0:	ldr	x0, [x19, #24]
     4a4:	str	xzr, [x19, #16]
     4a8:	bl	0 <free>
     4ac:	mov	x0, x19
     4b0:	bl	0 <free>
     4b4:	b	45c <lt_dlclose+0x118>

00000000000004b8 <lt_dladvise_init>:
     4b8:	stp	x29, x30, [sp, #-32]!
     4bc:	str	x19, [sp, #16]
     4c0:	mov	x19, x0
     4c4:	mov	w0, #0x4                   	// #4
     4c8:	mov	x29, sp
     4cc:	bl	0 <lt__zalloc>
     4d0:	str	x0, [x19]
     4d4:	ldr	x19, [sp, #16]
     4d8:	cmp	x0, #0x0
     4dc:	cset	w8, eq  // eq = none
     4e0:	mov	w0, w8
     4e4:	ldp	x29, x30, [sp], #32
     4e8:	ret

00000000000004ec <lt_dladvise_destroy>:
     4ec:	cbz	x0, 514 <lt_dladvise_destroy+0x28>
     4f0:	stp	x29, x30, [sp, #-32]!
     4f4:	str	x19, [sp, #16]
     4f8:	mov	x19, x0
     4fc:	ldr	x0, [x0]
     500:	mov	x29, sp
     504:	bl	0 <free>
     508:	str	xzr, [x19]
     50c:	ldr	x19, [sp, #16]
     510:	ldp	x29, x30, [sp], #32
     514:	mov	w0, wzr
     518:	ret

000000000000051c <lt_dladvise_ext>:
     51c:	stp	x29, x30, [sp, #-16]!
     520:	mov	x29, sp
     524:	cbz	x0, 548 <lt_dladvise_ext+0x2c>
     528:	ldr	x8, [x0]
     52c:	cbz	x8, 548 <lt_dladvise_ext+0x2c>
     530:	ldrb	w9, [x8]
     534:	mov	w0, wzr
     538:	orr	w9, w9, #0x1
     53c:	strb	w9, [x8]
     540:	ldp	x29, x30, [sp], #16
     544:	ret
     548:	adrp	x0, 0 <lt__alloc_die_callback>
     54c:	adrp	x1, 0 <lt__alloc_die_callback>
     550:	adrp	x3, 0 <lt__alloc_die_callback>
     554:	add	x0, x0, #0x0
     558:	add	x1, x1, #0x0
     55c:	add	x3, x3, #0x0
     560:	mov	w2, #0x631                 	// #1585
     564:	bl	0 <__assert_fail>

0000000000000568 <lt_dladvise_resident>:
     568:	stp	x29, x30, [sp, #-16]!
     56c:	mov	x29, sp
     570:	cbz	x0, 594 <lt_dladvise_resident+0x2c>
     574:	ldr	x8, [x0]
     578:	cbz	x8, 594 <lt_dladvise_resident+0x2c>
     57c:	ldrb	w9, [x8]
     580:	mov	w0, wzr
     584:	orr	w9, w9, #0x2
     588:	strb	w9, [x8]
     58c:	ldp	x29, x30, [sp], #16
     590:	ret
     594:	adrp	x0, 0 <lt__alloc_die_callback>
     598:	adrp	x1, 0 <lt__alloc_die_callback>
     59c:	adrp	x3, 0 <lt__alloc_die_callback>
     5a0:	add	x0, x0, #0x0
     5a4:	add	x1, x1, #0x0
     5a8:	add	x3, x3, #0x0
     5ac:	mov	w2, #0x639                 	// #1593
     5b0:	bl	0 <__assert_fail>

00000000000005b4 <lt_dladvise_local>:
     5b4:	stp	x29, x30, [sp, #-16]!
     5b8:	mov	x29, sp
     5bc:	cbz	x0, 5e0 <lt_dladvise_local+0x2c>
     5c0:	ldr	x8, [x0]
     5c4:	cbz	x8, 5e0 <lt_dladvise_local+0x2c>
     5c8:	ldrb	w9, [x8]
     5cc:	mov	w0, wzr
     5d0:	orr	w9, w9, #0x8
     5d4:	strb	w9, [x8]
     5d8:	ldp	x29, x30, [sp], #16
     5dc:	ret
     5e0:	adrp	x0, 0 <lt__alloc_die_callback>
     5e4:	adrp	x1, 0 <lt__alloc_die_callback>
     5e8:	adrp	x3, 0 <lt__alloc_die_callback>
     5ec:	add	x0, x0, #0x0
     5f0:	add	x1, x1, #0x0
     5f4:	add	x3, x3, #0x0
     5f8:	mov	w2, #0x641                 	// #1601
     5fc:	bl	0 <__assert_fail>

0000000000000600 <lt_dladvise_global>:
     600:	stp	x29, x30, [sp, #-16]!
     604:	mov	x29, sp
     608:	cbz	x0, 62c <lt_dladvise_global+0x2c>
     60c:	ldr	x8, [x0]
     610:	cbz	x8, 62c <lt_dladvise_global+0x2c>
     614:	ldrb	w9, [x8]
     618:	mov	w0, wzr
     61c:	orr	w9, w9, #0x4
     620:	strb	w9, [x8]
     624:	ldp	x29, x30, [sp], #16
     628:	ret
     62c:	adrp	x0, 0 <lt__alloc_die_callback>
     630:	adrp	x1, 0 <lt__alloc_die_callback>
     634:	adrp	x3, 0 <lt__alloc_die_callback>
     638:	add	x0, x0, #0x0
     63c:	add	x1, x1, #0x0
     640:	add	x3, x3, #0x0
     644:	mov	w2, #0x649                 	// #1609
     648:	bl	0 <__assert_fail>

000000000000064c <lt_dladvise_preload>:
     64c:	stp	x29, x30, [sp, #-16]!
     650:	mov	x29, sp
     654:	cbz	x0, 678 <lt_dladvise_preload+0x2c>
     658:	ldr	x8, [x0]
     65c:	cbz	x8, 678 <lt_dladvise_preload+0x2c>
     660:	ldrb	w9, [x8]
     664:	mov	w0, wzr
     668:	orr	w9, w9, #0x10
     66c:	strb	w9, [x8]
     670:	ldp	x29, x30, [sp], #16
     674:	ret
     678:	adrp	x0, 0 <lt__alloc_die_callback>
     67c:	adrp	x1, 0 <lt__alloc_die_callback>
     680:	adrp	x3, 0 <lt__alloc_die_callback>
     684:	add	x0, x0, #0x0
     688:	add	x1, x1, #0x0
     68c:	add	x3, x3, #0x0
     690:	mov	w2, #0x651                 	// #1617
     694:	bl	0 <__assert_fail>

0000000000000698 <lt_dlopen>:
     698:	stp	x29, x30, [sp, #-32]!
     69c:	mov	x29, sp
     6a0:	str	x19, [sp, #16]
     6a4:	mov	x19, x0
     6a8:	str	xzr, [x29, #24]
     6ac:	bl	0 <lt__get_last_error>
     6b0:	add	x0, x29, #0x18
     6b4:	mov	x1, x19
     6b8:	mov	x2, xzr
     6bc:	mov	x3, xzr
     6c0:	bl	8a0 <try_dlopen>
     6c4:	ldr	x8, [x29, #24]
     6c8:	ldr	x19, [sp, #16]
     6cc:	cmp	w0, #0x0
     6d0:	csel	x0, x8, xzr, eq  // eq = none
     6d4:	ldp	x29, x30, [sp], #32
     6d8:	ret

00000000000006dc <lt_dlopenadvise>:
     6dc:	sub	sp, sp, #0x40
     6e0:	stp	x29, x30, [sp, #16]
     6e4:	stp	x22, x21, [sp, #32]
     6e8:	stp	x20, x19, [sp, #48]
     6ec:	add	x29, sp, #0x10
     6f0:	mov	x19, x1
     6f4:	mov	x20, x0
     6f8:	str	xzr, [sp, #8]
     6fc:	bl	0 <lt__get_last_error>
     700:	cbz	x19, 7bc <lt_dlopenadvise+0xe0>
     704:	ldrb	w8, [x19]
     708:	mvn	w9, w8
     70c:	tst	w9, #0xc
     710:	b.ne	728 <lt_dlopenadvise+0x4c>  // b.any
     714:	mov	w0, #0x13                  	// #19
     718:	bl	0 <lt__error_string>
     71c:	bl	0 <lt__set_last_error>
     720:	mov	x8, xzr
     724:	b	7dc <lt_dlopenadvise+0x100>
     728:	cbz	x20, 7bc <lt_dlopenadvise+0xe0>
     72c:	tbz	w8, #0, 7bc <lt_dlopenadvise+0xe0>
     730:	mov	x21, x0
     734:	mov	w1, #0x2e                  	// #46
     738:	mov	x0, x20
     73c:	bl	0 <strrchr>
     740:	cbz	x0, 76c <lt_dlopenadvise+0x90>
     744:	adrp	x1, 0 <lt__alloc_die_callback>
     748:	add	x1, x1, #0x0
     74c:	mov	x22, x0
     750:	bl	0 <strcmp>
     754:	cbz	w0, 7bc <lt_dlopenadvise+0xe0>
     758:	adrp	x1, 0 <lt__alloc_die_callback>
     75c:	add	x1, x1, #0x0
     760:	mov	x0, x22
     764:	bl	0 <strcmp>
     768:	cbz	w0, 7bc <lt_dlopenadvise+0xe0>
     76c:	ldrb	w8, [x20]
     770:	cbz	w8, 83c <lt_dlopenadvise+0x160>
     774:	adrp	x2, 0 <lt__alloc_die_callback>
     778:	add	x2, x2, #0x0
     77c:	add	x0, sp, #0x8
     780:	mov	x1, x20
     784:	mov	x3, x19
     788:	bl	8a0 <try_dlopen>
     78c:	ldr	x8, [sp, #8]
     790:	cbnz	x8, 7dc <lt_dlopenadvise+0x100>
     794:	cmp	w0, #0x1
     798:	b.lt	7f4 <lt_dlopenadvise+0x118>  // b.tstop
     79c:	bl	0 <lt__get_last_error>
     7a0:	mov	x22, x0
     7a4:	mov	w0, #0x5                   	// #5
     7a8:	bl	0 <lt__error_string>
     7ac:	cmp	x22, x0
     7b0:	b.eq	7f4 <lt_dlopenadvise+0x118>  // b.none
     7b4:	ldr	x8, [sp, #8]
     7b8:	b	7dc <lt_dlopenadvise+0x100>
     7bc:	add	x0, sp, #0x8
     7c0:	mov	x1, x20
     7c4:	mov	x2, xzr
     7c8:	mov	x3, x19
     7cc:	bl	8a0 <try_dlopen>
     7d0:	ldr	x8, [sp, #8]
     7d4:	cmp	w0, #0x0
     7d8:	csel	x8, x8, xzr, eq  // eq = none
     7dc:	ldp	x20, x19, [sp, #48]
     7e0:	ldp	x22, x21, [sp, #32]
     7e4:	ldp	x29, x30, [sp, #16]
     7e8:	mov	x0, x8
     7ec:	add	sp, sp, #0x40
     7f0:	ret
     7f4:	mov	x0, x21
     7f8:	bl	0 <lt__set_last_error>
     7fc:	adrp	x2, 0 <lt__alloc_die_callback>
     800:	add	x2, x2, #0x0
     804:	add	x0, sp, #0x8
     808:	mov	x1, x20
     80c:	mov	x3, x19
     810:	bl	8a0 <try_dlopen>
     814:	ldr	x8, [sp, #8]
     818:	cbnz	x8, 7dc <lt_dlopenadvise+0x100>
     81c:	cmp	w0, #0x1
     820:	b.lt	83c <lt_dlopenadvise+0x160>  // b.tstop
     824:	bl	0 <lt__get_last_error>
     828:	mov	x19, x0
     82c:	mov	w0, #0x5                   	// #5
     830:	bl	0 <lt__error_string>
     834:	cmp	x19, x0
     838:	b.ne	7b4 <lt_dlopenadvise+0xd8>  // b.any
     83c:	mov	w0, #0x5                   	// #5
     840:	b	718 <lt_dlopenadvise+0x3c>

0000000000000844 <lt_dlopenext>:
     844:	stp	x29, x30, [sp, #-32]!
     848:	stp	x20, x19, [sp, #16]
     84c:	mov	x20, x0
     850:	mov	w0, #0x4                   	// #4
     854:	mov	x29, sp
     858:	bl	0 <lt__zalloc>
     85c:	mov	x19, x0
     860:	cbz	x0, 884 <lt_dlopenext+0x40>
     864:	ldrb	w8, [x19]
     868:	mov	x0, x20
     86c:	mov	x1, x19
     870:	orr	w8, w8, #0x1
     874:	strb	w8, [x19]
     878:	bl	6dc <lt_dlopenadvise>
     87c:	mov	x20, x0
     880:	b	888 <lt_dlopenext+0x44>
     884:	mov	x20, xzr
     888:	mov	x0, x19
     88c:	bl	0 <free>
     890:	mov	x0, x20
     894:	ldp	x20, x19, [sp, #16]
     898:	ldp	x29, x30, [sp], #32
     89c:	ret

00000000000008a0 <try_dlopen>:
     8a0:	sub	sp, sp, #0xd0
     8a4:	stp	x29, x30, [sp, #112]
     8a8:	add	x29, sp, #0x70
     8ac:	stp	x28, x27, [sp, #128]
     8b0:	stp	x26, x25, [sp, #144]
     8b4:	stp	x24, x23, [sp, #160]
     8b8:	stp	x22, x21, [sp, #176]
     8bc:	stp	x20, x19, [sp, #192]
     8c0:	stp	xzr, xzr, [x29, #-24]
     8c4:	cbz	x0, 1604 <try_dlopen+0xd64>
     8c8:	ldr	x8, [x0]
     8cc:	mov	x20, x0
     8d0:	cbnz	x8, 1624 <try_dlopen+0xd84>
     8d4:	mov	x25, x3
     8d8:	mov	x23, x2
     8dc:	mov	x21, x1
     8e0:	bl	0 <lt__get_last_error>
     8e4:	mov	x22, x0
     8e8:	cbz	x21, 928 <try_dlopen+0x88>
     8ec:	ldrb	w8, [x21]
     8f0:	cbz	w8, 1644 <try_dlopen+0xda4>
     8f4:	cbz	x23, 970 <try_dlopen+0xd0>
     8f8:	mov	x0, x21
     8fc:	bl	0 <strlen>
     900:	ldrb	w8, [x23]
     904:	mov	x19, x0
     908:	cbz	w8, 9a4 <try_dlopen+0x104>
     90c:	mov	x0, x23
     910:	bl	0 <strlen>
     914:	add	x8, x19, x0
     918:	add	x0, x8, #0x1
     91c:	bl	0 <lt__malloc>
     920:	cbnz	x0, 9b8 <try_dlopen+0x118>
     924:	b	a2c <try_dlopen+0x18c>
     928:	mov	w0, #0x58                  	// #88
     92c:	bl	0 <lt__zalloc>
     930:	str	x0, [x20]
     934:	cbz	x0, a2c <try_dlopen+0x18c>
     938:	stur	x0, [x29, #-32]
     93c:	ldrb	w8, [x0, #36]
     940:	mov	x1, xzr
     944:	mov	x2, x25
     948:	mov	x3, xzr
     94c:	orr	w8, w8, #0x1
     950:	strb	w8, [x0, #36]
     954:	sub	x0, x29, #0x20
     958:	bl	2910 <tryall_dlopen>
     95c:	cbz	w0, a34 <try_dlopen+0x194>
     960:	ldr	x0, [x20]
     964:	bl	0 <free>
     968:	str	xzr, [x20]
     96c:	b	a2c <try_dlopen+0x18c>
     970:	mov	x0, x21
     974:	bl	0 <lt__strdup>
     978:	mov	x19, x0
     97c:	cbz	x0, a2c <try_dlopen+0x18c>
     980:	sub	x1, x29, #0x10
     984:	mov	x0, x19
     988:	bl	2398 <canonicalize_path>
     98c:	cbz	w0, 9e0 <try_dlopen+0x140>
     990:	mov	x23, xzr
     994:	mov	x21, xzr
     998:	mov	x24, xzr
     99c:	mov	w27, #0x1                   	// #1
     9a0:	b	bc0 <try_dlopen+0x320>
     9a4:	mov	x0, xzr
     9a8:	add	x8, x19, x0
     9ac:	add	x0, x8, #0x1
     9b0:	bl	0 <lt__malloc>
     9b4:	cbz	x0, a2c <try_dlopen+0x18c>
     9b8:	adrp	x1, 0 <lt__alloc_die_callback>
     9bc:	add	x1, x1, #0x0
     9c0:	mov	x2, x21
     9c4:	mov	x3, x23
     9c8:	mov	x19, x0
     9cc:	bl	0 <sprintf>
     9d0:	sub	x1, x29, #0x10
     9d4:	mov	x0, x19
     9d8:	bl	2398 <canonicalize_path>
     9dc:	cbnz	w0, 990 <try_dlopen+0xf0>
     9e0:	ldur	x21, [x29, #-16]
     9e4:	mov	w1, #0x2f                  	// #47
     9e8:	mov	x0, x21
     9ec:	bl	0 <strrchr>
     9f0:	cbz	x0, abc <try_dlopen+0x21c>
     9f4:	add	x23, x0, #0x1
     9f8:	sub	x21, x23, x21
     9fc:	mov	x26, x0
     a00:	add	x0, x21, #0x1
     a04:	bl	0 <lt__malloc>
     a08:	stur	x0, [x29, #-24]
     a0c:	cbz	x0, bb0 <try_dlopen+0x310>
     a10:	ldur	x1, [x29, #-16]
     a14:	mov	x2, x21
     a18:	bl	0 <lt_strlcpy>
     a1c:	ldur	x8, [x29, #-24]
     a20:	strb	wzr, [x8, x21]
     a24:	mov	x21, x23
     a28:	b	ac4 <try_dlopen+0x224>
     a2c:	mov	w27, #0x1                   	// #1
     a30:	b	c00 <try_dlopen+0x360>
     a34:	mov	x19, xzr
     a38:	mov	x23, xzr
     a3c:	mov	x21, xzr
     a40:	mov	x24, xzr
     a44:	ldr	x0, [x20]
     a48:	ldur	x8, [x29, #-32]
     a4c:	cmp	x0, x8
     a50:	b.eq	a64 <try_dlopen+0x1c4>  // b.none
     a54:	bl	0 <free>
     a58:	ldur	x0, [x29, #-32]
     a5c:	str	x0, [x20]
     a60:	stur	xzr, [x29, #-32]
     a64:	ldr	w8, [x0, #32]
     a68:	cbnz	w8, aac <try_dlopen+0x20c>
     a6c:	ldr	x8, [x0, #24]
     a70:	mov	w9, #0x1                   	// #1
     a74:	str	w9, [x0, #32]
     a78:	cmp	x8, x23
     a7c:	b.eq	a98 <try_dlopen+0x1f8>  // b.none
     a80:	mov	x0, x8
     a84:	bl	0 <free>
     a88:	ldr	x8, [x20]
     a8c:	str	x23, [x8, #24]
     a90:	ldr	x0, [x20]
     a94:	mov	x23, xzr
     a98:	adrp	x8, 0 <lt__alloc_die_callback>
     a9c:	ldr	x9, [x8]
     aa0:	str	x9, [x0]
     aa4:	ldr	x9, [x20]
     aa8:	str	x9, [x8]
     aac:	mov	x0, x22
     ab0:	bl	0 <lt__set_last_error>
     ab4:	mov	w27, wzr
     ab8:	b	bc0 <try_dlopen+0x320>
     abc:	cbz	x21, 1664 <try_dlopen+0xdc4>
     ac0:	stur	xzr, [x29, #-16]
     ac4:	ldrb	w8, [x21]
     ac8:	cbz	w8, 1664 <try_dlopen+0xdc4>
     acc:	mov	w1, #0x2e                  	// #46
     ad0:	mov	x0, x21
     ad4:	bl	0 <strrchr>
     ad8:	mov	x26, x0
     adc:	cbnz	x0, aec <try_dlopen+0x24c>
     ae0:	mov	x0, x21
     ae4:	bl	0 <strlen>
     ae8:	add	x26, x21, x0
     aec:	sub	x24, x26, x21
     af0:	add	x0, x24, #0x1
     af4:	bl	0 <lt__malloc>
     af8:	mov	x23, x0
     afc:	cbz	x0, 998 <try_dlopen+0xf8>
     b00:	cmp	x24, #0x1
     b04:	b.lt	b3c <try_dlopen+0x29c>  // b.tstop
     b08:	bl	0 <__ctype_b_loc>
     b0c:	mov	w8, #0x5f                  	// #95
     b10:	mov	x9, x24
     b14:	mov	x10, x21
     b18:	mov	x11, x23
     b1c:	ldr	x12, [x0]
     b20:	ldrb	w13, [x10], #1
     b24:	ldrh	w12, [x12, x13, lsl #1]
     b28:	tst	w12, #0x8
     b2c:	csel	w12, w8, w13, eq  // eq = none
     b30:	subs	x9, x9, #0x1
     b34:	strb	w12, [x11], #1
     b38:	b.ne	b1c <try_dlopen+0x27c>  // b.any
     b3c:	strb	wzr, [x23, x24]
     b40:	ldur	x8, [x29, #-24]
     b44:	cbz	x8, c24 <try_dlopen+0x384>
     b48:	mov	x24, xzr
     b4c:	cbz	x25, b58 <try_dlopen+0x2b8>
     b50:	ldrb	w8, [x25]
     b54:	tbnz	w8, #4, ab4 <try_dlopen+0x214>
     b58:	cbz	x26, b70 <try_dlopen+0x2d0>
     b5c:	adrp	x1, 0 <lt__alloc_die_callback>
     b60:	add	x1, x1, #0x0
     b64:	mov	x0, x26
     b68:	bl	0 <strcmp>
     b6c:	cbz	w0, c4c <try_dlopen+0x3ac>
     b70:	mov	w0, #0x58                  	// #88
     b74:	bl	0 <lt__zalloc>
     b78:	str	x0, [x20]
     b7c:	cbz	x0, 99c <try_dlopen+0xfc>
     b80:	ldur	x8, [x29, #-24]
     b84:	stur	x0, [x29, #-32]
     b88:	cbz	x8, c7c <try_dlopen+0x3dc>
     b8c:	sub	x0, x29, #0x20
     b90:	mov	x1, x19
     b94:	mov	x2, x25
     b98:	mov	x3, xzr
     b9c:	bl	2910 <tryall_dlopen>
     ba0:	cbz	w0, d20 <try_dlopen+0x480>
     ba4:	stur	xzr, [x29, #-32]
     ba8:	ldr	x0, [x20]
     bac:	b	15ec <try_dlopen+0xd4c>
     bb0:	mov	x23, xzr
     bb4:	mov	x24, xzr
     bb8:	mov	w27, #0x1                   	// #1
     bbc:	mov	x21, x26
     bc0:	ldur	x0, [x29, #-24]
     bc4:	bl	0 <free>
     bc8:	mov	x0, x19
     bcc:	stur	xzr, [x29, #-24]
     bd0:	bl	0 <free>
     bd4:	mov	x0, x23
     bd8:	bl	0 <free>
     bdc:	ldur	x0, [x29, #-16]
     be0:	cbnz	x0, bf0 <try_dlopen+0x350>
     be4:	mov	x0, x21
     be8:	bl	0 <free>
     bec:	ldur	x0, [x29, #-16]
     bf0:	bl	0 <free>
     bf4:	mov	x0, x24
     bf8:	stur	xzr, [x29, #-16]
     bfc:	bl	0 <free>
     c00:	mov	w0, w27
     c04:	ldp	x20, x19, [sp, #192]
     c08:	ldp	x22, x21, [sp, #176]
     c0c:	ldp	x24, x23, [sp, #160]
     c10:	ldp	x26, x25, [sp, #144]
     c14:	ldp	x28, x27, [sp, #128]
     c18:	ldp	x29, x30, [sp, #112]
     c1c:	add	sp, sp, #0xd0
     c20:	ret
     c24:	adrp	x0, 0 <lt__alloc_die_callback>
     c28:	add	x0, x0, #0x0
     c2c:	bl	0 <lt_dlloader_find>
     c30:	cbz	x0, b48 <try_dlopen+0x2a8>
     c34:	ldrb	w8, [x23]
     c38:	mov	x28, x0
     c3c:	cbz	w8, d30 <try_dlopen+0x490>
     c40:	mov	x0, x23
     c44:	bl	0 <strlen>
     c48:	b	d34 <try_dlopen+0x494>
     c4c:	ldur	x8, [x29, #-24]
     c50:	cbz	x8, d94 <try_dlopen+0x4f4>
     c54:	adrp	x1, 0 <lt__alloc_die_callback>
     c58:	add	x1, x1, #0x0
     c5c:	mov	x0, x19
     c60:	bl	0 <fopen>
     c64:	mov	x26, x0
     c68:	cbnz	x26, e58 <try_dlopen+0x5b8>
     c6c:	mov	w0, #0x5                   	// #5
     c70:	bl	0 <lt__error_string>
     c74:	bl	0 <lt__set_last_error>
     c78:	b	99c <try_dlopen+0xfc>
     c7c:	adrp	x8, 0 <lt__alloc_die_callback>
     c80:	ldr	x0, [x8]
     c84:	cbz	x0, ca4 <try_dlopen+0x404>
     c88:	adrp	x2, 0 <lt__alloc_die_callback>
     c8c:	add	x2, x2, #0x0
     c90:	sub	x3, x29, #0x20
     c94:	mov	x1, x21
     c98:	mov	x4, x25
     c9c:	bl	1764 <foreach_dirinpath>
     ca0:	cbnz	w0, d20 <try_dlopen+0x480>
     ca4:	adrp	x0, 0 <lt__alloc_die_callback>
     ca8:	add	x0, x0, #0x0
     cac:	bl	0 <getenv>
     cb0:	cbz	x0, cd0 <try_dlopen+0x430>
     cb4:	adrp	x2, 0 <lt__alloc_die_callback>
     cb8:	add	x2, x2, #0x0
     cbc:	sub	x3, x29, #0x20
     cc0:	mov	x1, x21
     cc4:	mov	x4, x25
     cc8:	bl	1764 <foreach_dirinpath>
     ccc:	cbnz	w0, d20 <try_dlopen+0x480>
     cd0:	adrp	x0, 0 <lt__alloc_die_callback>
     cd4:	add	x0, x0, #0x0
     cd8:	bl	0 <getenv>
     cdc:	cbz	x0, cfc <try_dlopen+0x45c>
     ce0:	adrp	x2, 0 <lt__alloc_die_callback>
     ce4:	add	x2, x2, #0x0
     ce8:	sub	x3, x29, #0x20
     cec:	mov	x1, x21
     cf0:	mov	x4, x25
     cf4:	bl	1764 <foreach_dirinpath>
     cf8:	cbnz	w0, d20 <try_dlopen+0x480>
     cfc:	adrp	x0, 0 <lt__alloc_die_callback>
     d00:	adrp	x2, 0 <lt__alloc_die_callback>
     d04:	add	x0, x0, #0x0
     d08:	add	x2, x2, #0x0
     d0c:	sub	x3, x29, #0x20
     d10:	mov	x1, x21
     d14:	mov	x4, x25
     d18:	bl	1764 <foreach_dirinpath>
     d1c:	cbz	w0, b8c <try_dlopen+0x2ec>
     d20:	ldur	x8, [x29, #-32]
     d24:	cbnz	x8, a44 <try_dlopen+0x1a4>
     d28:	ldr	x0, [x20]
     d2c:	b	15ec <try_dlopen+0xd4c>
     d30:	mov	x0, xzr
     d34:	add	x0, x0, #0x6
     d38:	bl	0 <lt__malloc>
     d3c:	mov	x24, x0
     d40:	mov	w0, #0x58                  	// #88
     d44:	bl	0 <lt__zalloc>
     d48:	mov	w27, #0x1                   	// #1
     d4c:	str	x0, [x20]
     d50:	cbz	x24, bc0 <try_dlopen+0x320>
     d54:	cbz	x0, bc0 <try_dlopen+0x320>
     d58:	adrp	x1, 0 <lt__alloc_die_callback>
     d5c:	stur	x0, [x29, #-32]
     d60:	add	x1, x1, #0x0
     d64:	mov	w2, #0x3                   	// #3
     d68:	mov	x0, x23
     d6c:	bl	0 <strncmp>
     d70:	cbz	w0, ea4 <try_dlopen+0x604>
     d74:	adrp	x1, 0 <lt__alloc_die_callback>
     d78:	adrp	x3, 0 <lt__alloc_die_callback>
     d7c:	add	x1, x1, #0x0
     d80:	add	x3, x3, #0x0
     d84:	mov	x0, x24
     d88:	mov	x2, x23
     d8c:	bl	0 <sprintf>
     d90:	b	ec8 <try_dlopen+0x628>
     d94:	adrp	x8, 0 <lt__alloc_die_callback>
     d98:	ldr	x0, [x8]
     d9c:	cbz	x0, dc4 <try_dlopen+0x524>
     da0:	adrp	x2, 0 <lt__alloc_die_callback>
     da4:	add	x2, x2, #0x0
     da8:	sub	x3, x29, #0x18
     dac:	sub	x4, x29, #0x8
     db0:	mov	x1, x21
     db4:	stur	xzr, [x29, #-8]
     db8:	bl	1764 <foreach_dirinpath>
     dbc:	ldur	x26, [x29, #-8]
     dc0:	cbnz	x26, e58 <try_dlopen+0x5b8>
     dc4:	adrp	x0, 0 <lt__alloc_die_callback>
     dc8:	add	x0, x0, #0x0
     dcc:	bl	0 <getenv>
     dd0:	cbz	x0, df8 <try_dlopen+0x558>
     dd4:	adrp	x2, 0 <lt__alloc_die_callback>
     dd8:	add	x2, x2, #0x0
     ddc:	sub	x3, x29, #0x18
     de0:	sub	x4, x29, #0x8
     de4:	mov	x1, x21
     de8:	stur	xzr, [x29, #-8]
     dec:	bl	1764 <foreach_dirinpath>
     df0:	ldur	x26, [x29, #-8]
     df4:	cbnz	x26, e58 <try_dlopen+0x5b8>
     df8:	adrp	x0, 0 <lt__alloc_die_callback>
     dfc:	add	x0, x0, #0x0
     e00:	bl	0 <getenv>
     e04:	cbz	x0, e2c <try_dlopen+0x58c>
     e08:	adrp	x2, 0 <lt__alloc_die_callback>
     e0c:	add	x2, x2, #0x0
     e10:	sub	x3, x29, #0x18
     e14:	sub	x4, x29, #0x8
     e18:	mov	x1, x21
     e1c:	stur	xzr, [x29, #-8]
     e20:	bl	1764 <foreach_dirinpath>
     e24:	ldur	x26, [x29, #-8]
     e28:	cbnz	x26, e58 <try_dlopen+0x5b8>
     e2c:	adrp	x0, 0 <lt__alloc_die_callback>
     e30:	adrp	x2, 0 <lt__alloc_die_callback>
     e34:	add	x0, x0, #0x0
     e38:	add	x2, x2, #0x0
     e3c:	sub	x3, x29, #0x18
     e40:	sub	x4, x29, #0x8
     e44:	mov	x1, x21
     e48:	stur	xzr, [x29, #-8]
     e4c:	bl	1764 <foreach_dirinpath>
     e50:	ldur	x26, [x29, #-8]
     e54:	cbz	x26, c6c <try_dlopen+0x3cc>
     e58:	mov	w0, #0x800                 	// #2048
     e5c:	bl	0 <lt__malloc>
     e60:	mov	x28, x0
     e64:	stur	x26, [x29, #-40]
     e68:	cbz	x0, ef8 <try_dlopen+0x658>
     e6c:	mov	x0, x26
     e70:	bl	0 <feof>
     e74:	cbz	w0, f20 <try_dlopen+0x680>
     e78:	mov	w8, #0x1                   	// #1
     e7c:	str	xzr, [sp, #48]
     e80:	stur	xzr, [x29, #-48]
     e84:	str	xzr, [sp, #56]
     e88:	str	xzr, [sp, #32]
     e8c:	str	w8, [sp, #44]
     e90:	mov	x0, x28
     e94:	bl	0 <free>
     e98:	ldr	x28, [sp, #32]
     e9c:	mov	w26, wzr
     ea0:	b	13f8 <try_dlopen+0xb58>
     ea4:	adrp	x1, 0 <lt__alloc_die_callback>
     ea8:	adrp	x2, 0 <lt__alloc_die_callback>
     eac:	adrp	x4, 0 <lt__alloc_die_callback>
     eb0:	add	x3, x23, #0x3
     eb4:	add	x1, x1, #0x0
     eb8:	add	x2, x2, #0x0
     ebc:	add	x4, x4, #0x0
     ec0:	mov	x0, x24
     ec4:	bl	0 <sprintf>
     ec8:	sub	x0, x29, #0x20
     ecc:	mov	x1, x24
     ed0:	mov	x2, x25
     ed4:	mov	x3, x28
     ed8:	bl	2910 <tryall_dlopen>
     edc:	cbz	w0, a44 <try_dlopen+0x1a4>
     ee0:	ldr	x0, [x20]
     ee4:	bl	0 <free>
     ee8:	str	xzr, [x20]
     eec:	stur	xzr, [x29, #-32]
     ef0:	cbnz	x25, b50 <try_dlopen+0x2b0>
     ef4:	b	b58 <try_dlopen+0x2b8>
     ef8:	mov	w0, #0x5                   	// #5
     efc:	bl	0 <lt__error_string>
     f00:	bl	0 <lt__set_last_error>
     f04:	mov	w8, #0x1                   	// #1
     f08:	mov	w26, #0x1                   	// #1
     f0c:	str	xzr, [sp, #56]
     f10:	stur	xzr, [x29, #-48]
     f14:	str	xzr, [sp, #48]
     f18:	str	w8, [sp, #44]
     f1c:	b	13f8 <try_dlopen+0xb58>
     f20:	mov	w8, #0x1                   	// #1
     f24:	mov	w27, #0x800                 	// #2048
     f28:	str	xzr, [sp, #48]
     f2c:	stur	xzr, [x29, #-48]
     f30:	str	xzr, [sp, #56]
     f34:	str	xzr, [sp, #32]
     f38:	str	w8, [sp, #44]
     f3c:	b	f64 <try_dlopen+0x6c4>
     f40:	str	x2, [sp, #24]
     f44:	mov	x0, x26
     f48:	bl	0 <memcpy>
     f4c:	ldr	x8, [sp, #24]
     f50:	strb	wzr, [x26, x8]
     f54:	ldur	x26, [x29, #-40]
     f58:	mov	x0, x26
     f5c:	bl	0 <feof>
     f60:	cbnz	w0, e90 <try_dlopen+0x5f0>
     f64:	add	x8, x27, x28
     f68:	mov	x0, x28
     f6c:	mov	w1, w27
     f70:	mov	x2, x26
     f74:	sturb	wzr, [x8, #-2]
     f78:	bl	0 <fgets>
     f7c:	cbz	x0, e90 <try_dlopen+0x5f0>
     f80:	mov	x26, x27
     f84:	add	x8, x26, x28
     f88:	ldurb	w8, [x8, #-2]
     f8c:	mov	x27, x26
     f90:	cbz	w8, fe0 <try_dlopen+0x740>
     f94:	cmp	w8, #0xa
     f98:	b.eq	fe0 <try_dlopen+0x740>  // b.none
     f9c:	ldur	x0, [x29, #-40]
     fa0:	bl	0 <feof>
     fa4:	cbnz	w0, fe0 <try_dlopen+0x740>
     fa8:	lsl	x26, x27, #1
     fac:	mov	x0, x28
     fb0:	mov	x1, x26
     fb4:	bl	0 <lt__realloc>
     fb8:	mov	x28, x0
     fbc:	cbz	x0, 13e8 <try_dlopen+0xb48>
     fc0:	ldur	x2, [x29, #-40]
     fc4:	add	x9, x27, x28
     fc8:	add	x8, x26, x28
     fcc:	sub	x0, x9, #0x1
     fd0:	add	w1, w27, #0x1
     fd4:	sturb	wzr, [x8, #-2]
     fd8:	bl	0 <fgets>
     fdc:	cbnz	x0, f84 <try_dlopen+0x6e4>
     fe0:	ldrb	w8, [x28]
     fe4:	cmp	w8, #0x23
     fe8:	b.eq	f54 <try_dlopen+0x6b4>  // b.none
     fec:	ldur	x26, [x29, #-40]
     ff0:	cmp	w8, #0xa
     ff4:	b.eq	f58 <try_dlopen+0x6b8>  // b.none
     ff8:	adrp	x1, 0 <lt__alloc_die_callback>
     ffc:	mov	w2, #0x7                   	// #7
    1000:	mov	x0, x28
    1004:	add	x1, x1, #0x0
    1008:	bl	0 <strncmp>
    100c:	cbz	w0, 10cc <try_dlopen+0x82c>
    1010:	adrp	x1, 0 <lt__alloc_die_callback>
    1014:	mov	w2, #0xc                   	// #12
    1018:	mov	x0, x28
    101c:	add	x1, x1, #0x0
    1020:	bl	0 <strncmp>
    1024:	cbz	w0, 10f8 <try_dlopen+0x858>
    1028:	adrp	x1, 0 <lt__alloc_die_callback>
    102c:	mov	w2, #0x7                   	// #7
    1030:	mov	x0, x28
    1034:	add	x1, x1, #0x0
    1038:	bl	0 <strncmp>
    103c:	cbz	w0, 1124 <try_dlopen+0x884>
    1040:	adrp	x1, 0 <lt__alloc_die_callback>
    1044:	mov	w2, #0x10                  	// #16
    1048:	mov	x0, x28
    104c:	add	x1, x1, #0x0
    1050:	bl	0 <strncmp>
    1054:	cbz	w0, 11bc <try_dlopen+0x91c>
    1058:	adrp	x1, 0 <lt__alloc_die_callback>
    105c:	mov	x0, x28
    1060:	add	x1, x1, #0x0
    1064:	bl	0 <strcmp>
    1068:	cbz	w0, 1254 <try_dlopen+0x9b4>
    106c:	adrp	x1, 0 <lt__alloc_die_callback>
    1070:	mov	x0, x28
    1074:	add	x1, x1, #0x0
    1078:	bl	0 <strcmp>
    107c:	cbz	w0, 12c4 <try_dlopen+0xa24>
    1080:	ldr	x8, [sp, #48]
    1084:	cbnz	x8, f58 <try_dlopen+0x6b8>
    1088:	adrp	x1, 0 <lt__alloc_die_callback>
    108c:	mov	w2, #0xe                   	// #14
    1090:	mov	x0, x28
    1094:	add	x1, x1, #0x0
    1098:	bl	0 <strncmp>
    109c:	cbnz	w0, 11b0 <try_dlopen+0x910>
    10a0:	add	x26, x28, #0xe
    10a4:	mov	w1, #0x27                  	// #39
    10a8:	mov	x0, x26
    10ac:	bl	0 <strrchr>
    10b0:	ldrb	w8, [x28, #14]
    10b4:	str	x0, [sp, #48]
    10b8:	str	w8, [sp, #24]
    10bc:	cbz	w8, 1330 <try_dlopen+0xa90>
    10c0:	mov	x0, x26
    10c4:	bl	0 <strlen>
    10c8:	b	1334 <try_dlopen+0xa94>
    10cc:	add	x26, x28, #0x7
    10d0:	mov	w1, #0x27                  	// #39
    10d4:	mov	x0, x26
    10d8:	bl	0 <strrchr>
    10dc:	ldrb	w8, [x28, #7]
    10e0:	stp	x26, x0, [sp, #16]
    10e4:	cbz	w8, 1150 <try_dlopen+0x8b0>
    10e8:	mov	x0, x26
    10ec:	bl	0 <strlen>
    10f0:	str	x0, [sp, #8]
    10f4:	b	1154 <try_dlopen+0x8b4>
    10f8:	add	x26, x28, #0xc
    10fc:	mov	w1, #0x27                  	// #39
    1100:	mov	x0, x26
    1104:	bl	0 <strrchr>
    1108:	ldrb	w8, [x28, #12]
    110c:	stp	x26, x0, [sp, #16]
    1110:	cbz	w8, 11e8 <try_dlopen+0x948>
    1114:	mov	x0, x26
    1118:	bl	0 <strlen>
    111c:	str	x0, [sp, #8]
    1120:	b	11ec <try_dlopen+0x94c>
    1124:	add	x26, x28, #0x7
    1128:	mov	w1, #0x27                  	// #39
    112c:	mov	x0, x26
    1130:	bl	0 <strrchr>
    1134:	ldrb	w8, [x28, #7]
    1138:	stp	x26, x0, [sp, #16]
    113c:	cbz	w8, 1260 <try_dlopen+0x9c0>
    1140:	mov	x0, x26
    1144:	bl	0 <strlen>
    1148:	str	x0, [sp, #8]
    114c:	b	1264 <try_dlopen+0x9c4>
    1150:	str	xzr, [sp, #8]
    1154:	ldr	x0, [sp, #48]
    1158:	bl	0 <free>
    115c:	ldr	x9, [sp, #24]
    1160:	cbz	x9, 13cc <try_dlopen+0xb2c>
    1164:	ldr	x8, [sp, #16]
    1168:	subs	x26, x9, x8
    116c:	b.eq	13cc <try_dlopen+0xb2c>  // b.none
    1170:	ldr	x9, [sp, #8]
    1174:	cmp	x9, #0x4
    1178:	b.cc	11b0 <try_dlopen+0x910>  // b.lo, b.ul, b.last
    117c:	ldrb	w8, [x8]
    1180:	cmp	w8, #0x27
    1184:	b.ne	11b0 <try_dlopen+0x910>  // b.any
    1188:	mov	x0, x26
    118c:	bl	0 <lt__malloc>
    1190:	cbz	x0, 13cc <try_dlopen+0xb2c>
    1194:	add	x1, x28, #0x8
    1198:	sub	x2, x26, #0x1
    119c:	str	x2, [sp, #24]
    11a0:	mov	x26, x0
    11a4:	bl	0 <memcpy>
    11a8:	str	x26, [sp, #48]
    11ac:	b	f4c <try_dlopen+0x6ac>
    11b0:	ldur	x26, [x29, #-40]
    11b4:	str	xzr, [sp, #48]
    11b8:	b	f58 <try_dlopen+0x6b8>
    11bc:	add	x0, x28, #0x10
    11c0:	mov	w1, #0x27                  	// #39
    11c4:	str	x0, [sp, #24]
    11c8:	bl	0 <strrchr>
    11cc:	ldrb	w8, [x28, #16]
    11d0:	mov	x26, x0
    11d4:	cbz	w8, 12cc <try_dlopen+0xa2c>
    11d8:	ldr	x0, [sp, #24]
    11dc:	bl	0 <strlen>
    11e0:	str	x0, [sp, #16]
    11e4:	b	12d0 <try_dlopen+0xa30>
    11e8:	str	xzr, [sp, #8]
    11ec:	ldur	x0, [x29, #-48]
    11f0:	bl	0 <free>
    11f4:	ldr	x9, [sp, #24]
    11f8:	cbz	x9, 13d4 <try_dlopen+0xb34>
    11fc:	ldr	x8, [sp, #16]
    1200:	subs	x26, x9, x8
    1204:	b.eq	13d4 <try_dlopen+0xb34>  // b.none
    1208:	ldr	x9, [sp, #8]
    120c:	cmp	x9, #0x4
    1210:	b.cc	1248 <try_dlopen+0x9a8>  // b.lo, b.ul, b.last
    1214:	ldrb	w8, [x8]
    1218:	cmp	w8, #0x27
    121c:	b.ne	1248 <try_dlopen+0x9a8>  // b.any
    1220:	mov	x0, x26
    1224:	bl	0 <lt__malloc>
    1228:	cbz	x0, 13d4 <try_dlopen+0xb34>
    122c:	add	x1, x28, #0xd
    1230:	sub	x2, x26, #0x1
    1234:	str	x2, [sp, #24]
    1238:	mov	x26, x0
    123c:	bl	0 <memcpy>
    1240:	stur	x26, [x29, #-48]
    1244:	b	f4c <try_dlopen+0x6ac>
    1248:	ldur	x26, [x29, #-40]
    124c:	stur	xzr, [x29, #-48]
    1250:	b	f58 <try_dlopen+0x6b8>
    1254:	mov	w8, #0x1                   	// #1
    1258:	str	w8, [sp, #44]
    125c:	b	f58 <try_dlopen+0x6b8>
    1260:	str	xzr, [sp, #8]
    1264:	ldr	x0, [sp, #56]
    1268:	bl	0 <free>
    126c:	ldr	x9, [sp, #24]
    1270:	cbz	x9, 13dc <try_dlopen+0xb3c>
    1274:	ldr	x8, [sp, #16]
    1278:	subs	x26, x9, x8
    127c:	b.eq	13dc <try_dlopen+0xb3c>  // b.none
    1280:	ldr	x9, [sp, #8]
    1284:	cmp	x9, #0x4
    1288:	b.cc	12b8 <try_dlopen+0xa18>  // b.lo, b.ul, b.last
    128c:	ldrb	w8, [x8]
    1290:	cmp	w8, #0x27
    1294:	b.ne	12b8 <try_dlopen+0xa18>  // b.any
    1298:	mov	x0, x26
    129c:	bl	0 <lt__malloc>
    12a0:	str	x0, [sp, #56]
    12a4:	cbz	x0, 13dc <try_dlopen+0xb3c>
    12a8:	sub	x2, x26, #0x1
    12ac:	ldr	x26, [sp, #56]
    12b0:	add	x1, x28, #0x8
    12b4:	b	f40 <try_dlopen+0x6a0>
    12b8:	ldur	x26, [x29, #-40]
    12bc:	str	xzr, [sp, #56]
    12c0:	b	f58 <try_dlopen+0x6b8>
    12c4:	str	wzr, [sp, #44]
    12c8:	b	f58 <try_dlopen+0x6b8>
    12cc:	str	xzr, [sp, #16]
    12d0:	ldr	x0, [sp, #32]
    12d4:	bl	0 <free>
    12d8:	cbz	x26, 13e4 <try_dlopen+0xb44>
    12dc:	ldr	x8, [sp, #24]
    12e0:	subs	x26, x26, x8
    12e4:	b.eq	13e4 <try_dlopen+0xb44>  // b.none
    12e8:	ldr	x8, [sp, #16]
    12ec:	cmp	x8, #0x4
    12f0:	b.cc	1324 <try_dlopen+0xa84>  // b.lo, b.ul, b.last
    12f4:	ldr	x8, [sp, #24]
    12f8:	ldrb	w8, [x8]
    12fc:	cmp	w8, #0x27
    1300:	b.ne	1324 <try_dlopen+0xa84>  // b.any
    1304:	mov	x0, x26
    1308:	bl	0 <lt__malloc>
    130c:	str	x0, [sp, #32]
    1310:	cbz	x0, 13e4 <try_dlopen+0xb44>
    1314:	sub	x2, x26, #0x1
    1318:	ldr	x26, [sp, #32]
    131c:	add	x1, x28, #0x11
    1320:	b	f40 <try_dlopen+0x6a0>
    1324:	ldur	x26, [x29, #-40]
    1328:	str	xzr, [sp, #32]
    132c:	b	f58 <try_dlopen+0x6b8>
    1330:	mov	x0, xzr
    1334:	ldr	x8, [sp, #48]
    1338:	cbz	x8, 13cc <try_dlopen+0xb2c>
    133c:	ldr	x8, [sp, #48]
    1340:	subs	x26, x8, x26
    1344:	b.eq	13cc <try_dlopen+0xb2c>  // b.none
    1348:	ldr	w8, [sp, #24]
    134c:	str	xzr, [sp, #48]
    1350:	cmp	w8, #0x27
    1354:	b.ne	f54 <try_dlopen+0x6b4>  // b.any
    1358:	cmp	x0, #0x4
    135c:	b.cc	f54 <try_dlopen+0x6b4>  // b.lo, b.ul, b.last
    1360:	mov	x0, x26
    1364:	bl	0 <lt__malloc>
    1368:	str	x0, [sp, #48]
    136c:	cbz	x0, 13cc <try_dlopen+0xb2c>
    1370:	sub	x2, x26, #0x1
    1374:	ldr	x26, [sp, #48]
    1378:	add	x1, x28, #0xf
    137c:	str	x2, [sp, #24]
    1380:	mov	x0, x26
    1384:	bl	0 <memcpy>
    1388:	ldr	x8, [sp, #24]
    138c:	mov	w1, #0x20                  	// #32
    1390:	mov	x0, x26
    1394:	strb	wzr, [x26, x8]
    1398:	bl	0 <strrchr>
    139c:	cbz	x0, f54 <try_dlopen+0x6b4>
    13a0:	add	x0, x0, #0x1
    13a4:	bl	0 <lt__strdup>
    13a8:	cbz	x0, 13e8 <try_dlopen+0xb48>
    13ac:	ldr	x8, [sp, #48]
    13b0:	mov	x26, x0
    13b4:	cmp	x8, x0
    13b8:	b.eq	f54 <try_dlopen+0x6b4>  // b.none
    13bc:	ldr	x0, [sp, #48]
    13c0:	bl	0 <free>
    13c4:	str	x26, [sp, #48]
    13c8:	b	f54 <try_dlopen+0x6b4>
    13cc:	str	xzr, [sp, #48]
    13d0:	b	13e8 <try_dlopen+0xb48>
    13d4:	stur	xzr, [x29, #-48]
    13d8:	b	13e8 <try_dlopen+0xb48>
    13dc:	str	xzr, [sp, #56]
    13e0:	b	13e8 <try_dlopen+0xb48>
    13e4:	str	xzr, [sp, #32]
    13e8:	mov	x0, x28
    13ec:	bl	0 <free>
    13f0:	ldr	x28, [sp, #32]
    13f4:	mov	w26, #0x1                   	// #1
    13f8:	ldur	x0, [x29, #-40]
    13fc:	bl	0 <fclose>
    1400:	mov	w0, #0x58                  	// #88
    1404:	bl	0 <lt__zalloc>
    1408:	cmp	x0, #0x0
    140c:	cinc	w27, w26, eq  // eq = none
    1410:	str	x0, [x20]
    1414:	cbz	w27, 1448 <try_dlopen+0xba8>
    1418:	ldr	x0, [sp, #48]
    141c:	bl	0 <free>
    1420:	ldur	x0, [x29, #-48]
    1424:	bl	0 <free>
    1428:	ldr	x0, [sp, #56]
    142c:	bl	0 <free>
    1430:	mov	x0, x28
    1434:	bl	0 <free>
    1438:	ldr	x0, [x20]
    143c:	bl	0 <free>
    1440:	str	xzr, [x20]
    1444:	b	bc0 <try_dlopen+0x320>
    1448:	cbz	x0, 1684 <try_dlopen+0xde4>
    144c:	str	wzr, [x0, #40]
    1450:	ldur	x26, [x29, #-24]
    1454:	ldur	x27, [x29, #-48]
    1458:	stur	x0, [x29, #-32]
    145c:	cbz	x27, 1484 <try_dlopen+0xbe4>
    1460:	adrp	x0, 0 <lt__alloc_die_callback>
    1464:	add	x0, x0, #0x0
    1468:	bl	0 <lt_dlloader_find>
    146c:	mov	x3, x0
    1470:	sub	x0, x29, #0x20
    1474:	mov	x1, x27
    1478:	mov	x2, x25
    147c:	bl	2910 <tryall_dlopen>
    1480:	cbz	w0, 155c <try_dlopen+0xcbc>
    1484:	ldr	x27, [sp, #48]
    1488:	cbz	x27, 1500 <try_dlopen+0xc60>
    148c:	ldr	w8, [sp, #44]
    1490:	cbz	w8, 14b8 <try_dlopen+0xc18>
    1494:	ldr	x8, [sp, #56]
    1498:	cbz	x8, 14b8 <try_dlopen+0xc18>
    149c:	ldr	x2, [sp, #56]
    14a0:	sub	x0, x29, #0x20
    14a4:	mov	x1, xzr
    14a8:	mov	x3, x27
    14ac:	mov	x4, x25
    14b0:	bl	2bb4 <tryall_dlopen_module>
    14b4:	cbz	w0, 1560 <try_dlopen+0xcc0>
    14b8:	ldr	w8, [sp, #44]
    14bc:	cbnz	w8, 14e0 <try_dlopen+0xc40>
    14c0:	adrp	x2, 0 <lt__alloc_die_callback>
    14c4:	add	x2, x2, #0x0
    14c8:	sub	x0, x29, #0x20
    14cc:	mov	x1, x26
    14d0:	mov	x3, x27
    14d4:	mov	x4, x25
    14d8:	bl	2bb4 <tryall_dlopen_module>
    14dc:	cbz	w0, 1560 <try_dlopen+0xcc0>
    14e0:	cbz	x26, 1500 <try_dlopen+0xc60>
    14e4:	sub	x0, x29, #0x20
    14e8:	mov	x1, xzr
    14ec:	mov	x2, x26
    14f0:	mov	x3, x27
    14f4:	mov	x4, x25
    14f8:	bl	2bb4 <tryall_dlopen_module>
    14fc:	cbz	w0, 1560 <try_dlopen+0xcc0>
    1500:	ldr	x25, [x20]
    1504:	ldr	w9, [x25, #40]
    1508:	cbz	w9, 1568 <try_dlopen+0xcc8>
    150c:	ldr	x0, [x25, #48]
    1510:	cmp	w9, #0x1
    1514:	b.lt	154c <try_dlopen+0xcac>  // b.tstop
    1518:	mov	x26, xzr
    151c:	b	152c <try_dlopen+0xc8c>
    1520:	add	x26, x26, #0x1
    1524:	cmp	x26, w9, sxtw
    1528:	b.ge	154c <try_dlopen+0xcac>  // b.tcont
    152c:	ldr	x8, [x0, x26, lsl #3]
    1530:	ldrb	w10, [x8, #36]
    1534:	tbnz	w10, #0, 1520 <try_dlopen+0xc80>
    1538:	mov	x0, x8
    153c:	bl	344 <lt_dlclose>
    1540:	ldr	w9, [x25, #40]
    1544:	ldr	x0, [x25, #48]
    1548:	b	1520 <try_dlopen+0xc80>
    154c:	bl	0 <free>
    1550:	mov	w26, wzr
    1554:	str	xzr, [x25, #48]
    1558:	b	156c <try_dlopen+0xccc>
    155c:	ldr	x27, [sp, #48]
    1560:	mov	w26, #0x1                   	// #1
    1564:	b	156c <try_dlopen+0xccc>
    1568:	mov	w26, wzr
    156c:	mov	x0, x27
    1570:	bl	0 <free>
    1574:	ldur	x0, [x29, #-48]
    1578:	bl	0 <free>
    157c:	ldr	x0, [sp, #56]
    1580:	bl	0 <free>
    1584:	mov	x0, x28
    1588:	bl	0 <free>
    158c:	ldr	x25, [x20]
    1590:	tbz	w26, #0, 15e8 <try_dlopen+0xd48>
    1594:	ldur	x8, [x29, #-32]
    1598:	cmp	x25, x8
    159c:	b.eq	a44 <try_dlopen+0x1a4>  // b.none
    15a0:	ldr	w9, [x25, #40]
    15a4:	cbz	w9, a44 <try_dlopen+0x1a4>
    15a8:	ldr	x0, [x25, #48]
    15ac:	cmp	w9, #0x1
    15b0:	b.lt	15f8 <try_dlopen+0xd58>  // b.tstop
    15b4:	mov	x26, xzr
    15b8:	b	15c8 <try_dlopen+0xd28>
    15bc:	add	x26, x26, #0x1
    15c0:	cmp	x26, w9, sxtw
    15c4:	b.ge	15f8 <try_dlopen+0xd58>  // b.tcont
    15c8:	ldr	x8, [x0, x26, lsl #3]
    15cc:	ldrb	w10, [x8, #36]
    15d0:	tbnz	w10, #0, 15bc <try_dlopen+0xd1c>
    15d4:	mov	x0, x8
    15d8:	bl	344 <lt_dlclose>
    15dc:	ldr	w9, [x25, #40]
    15e0:	ldr	x0, [x25, #48]
    15e4:	b	15bc <try_dlopen+0xd1c>
    15e8:	mov	x0, x25
    15ec:	bl	0 <free>
    15f0:	str	xzr, [x20]
    15f4:	b	99c <try_dlopen+0xfc>
    15f8:	bl	0 <free>
    15fc:	str	xzr, [x25, #48]
    1600:	b	a44 <try_dlopen+0x1a4>
    1604:	adrp	x0, 0 <lt__alloc_die_callback>
    1608:	adrp	x1, 0 <lt__alloc_die_callback>
    160c:	adrp	x3, 0 <lt__alloc_die_callback>
    1610:	add	x0, x0, #0x0
    1614:	add	x1, x1, #0x0
    1618:	add	x3, x3, #0x0
    161c:	mov	w2, #0x494                 	// #1172
    1620:	bl	0 <__assert_fail>
    1624:	adrp	x0, 0 <lt__alloc_die_callback>
    1628:	adrp	x1, 0 <lt__alloc_die_callback>
    162c:	adrp	x3, 0 <lt__alloc_die_callback>
    1630:	add	x0, x0, #0x0
    1634:	add	x1, x1, #0x0
    1638:	add	x3, x3, #0x0
    163c:	mov	w2, #0x495                 	// #1173
    1640:	bl	0 <__assert_fail>
    1644:	adrp	x0, 0 <lt__alloc_die_callback>
    1648:	adrp	x1, 0 <lt__alloc_die_callback>
    164c:	adrp	x3, 0 <lt__alloc_die_callback>
    1650:	add	x0, x0, #0x0
    1654:	add	x1, x1, #0x0
    1658:	add	x3, x3, #0x0
    165c:	mov	w2, #0x4b4                 	// #1204
    1660:	bl	0 <__assert_fail>
    1664:	adrp	x0, 0 <lt__alloc_die_callback>
    1668:	adrp	x1, 0 <lt__alloc_die_callback>
    166c:	adrp	x3, 0 <lt__alloc_die_callback>
    1670:	add	x0, x0, #0x0
    1674:	add	x1, x1, #0x0
    1678:	add	x3, x3, #0x0
    167c:	mov	w2, #0x4e3                 	// #1251
    1680:	bl	0 <__assert_fail>
    1684:	adrp	x0, 0 <lt__alloc_die_callback>
    1688:	adrp	x1, 0 <lt__alloc_die_callback>
    168c:	adrp	x3, 0 <lt__alloc_die_callback>
    1690:	add	x0, x0, #0x0
    1694:	add	x1, x1, #0x0
    1698:	add	x3, x3, #0x0
    169c:	mov	w2, #0x589                 	// #1417
    16a0:	bl	0 <__assert_fail>

00000000000016a4 <lt_dlforeachfile>:
    16a4:	stp	x29, x30, [sp, #-32]!
    16a8:	str	x19, [sp, #16]
    16ac:	mov	x29, sp
    16b0:	mov	x19, x2
    16b4:	str	x1, [x29, #24]
    16b8:	cbz	x0, 16d8 <lt_dlforeachfile+0x34>
    16bc:	adrp	x2, 0 <lt__alloc_die_callback>
    16c0:	add	x2, x2, #0x0
    16c4:	add	x3, x29, #0x18
    16c8:	mov	x1, xzr
    16cc:	mov	x4, x19
    16d0:	bl	1764 <foreach_dirinpath>
    16d4:	b	174c <lt_dlforeachfile+0xa8>
    16d8:	adrp	x8, 0 <lt__alloc_die_callback>
    16dc:	ldr	x0, [x8]
    16e0:	adrp	x2, 0 <lt__alloc_die_callback>
    16e4:	add	x2, x2, #0x0
    16e8:	add	x3, x29, #0x18
    16ec:	mov	x1, xzr
    16f0:	mov	x4, x19
    16f4:	bl	1764 <foreach_dirinpath>
    16f8:	cbnz	w0, 174c <lt_dlforeachfile+0xa8>
    16fc:	adrp	x0, 0 <lt__alloc_die_callback>
    1700:	add	x0, x0, #0x0
    1704:	bl	0 <getenv>
    1708:	adrp	x2, 0 <lt__alloc_die_callback>
    170c:	add	x2, x2, #0x0
    1710:	add	x3, x29, #0x18
    1714:	mov	x1, xzr
    1718:	mov	x4, x19
    171c:	bl	1764 <foreach_dirinpath>
    1720:	cbnz	w0, 174c <lt_dlforeachfile+0xa8>
    1724:	adrp	x0, 0 <lt__alloc_die_callback>
    1728:	add	x0, x0, #0x0
    172c:	bl	0 <getenv>
    1730:	adrp	x2, 0 <lt__alloc_die_callback>
    1734:	add	x2, x2, #0x0
    1738:	add	x3, x29, #0x18
    173c:	mov	x1, xzr
    1740:	mov	x4, x19
    1744:	bl	1764 <foreach_dirinpath>
    1748:	cbz	w0, 1758 <lt_dlforeachfile+0xb4>
    174c:	ldr	x19, [sp, #16]
    1750:	ldp	x29, x30, [sp], #32
    1754:	ret
    1758:	adrp	x0, 0 <lt__alloc_die_callback>
    175c:	add	x0, x0, #0x0
    1760:	b	16bc <lt_dlforeachfile+0x18>

0000000000001764 <foreach_dirinpath>:
    1764:	sub	sp, sp, #0x80
    1768:	stp	x24, x23, [sp, #80]
    176c:	stp	x22, x21, [sp, #96]
    1770:	stp	x20, x19, [sp, #112]
    1774:	mov	x19, x4
    1778:	mov	x20, x3
    177c:	mov	x21, x2
    1780:	mov	x24, x1
    1784:	mov	x23, x0
    1788:	stp	x29, x30, [sp, #32]
    178c:	stp	x28, x27, [sp, #48]
    1790:	stp	x26, x25, [sp, #64]
    1794:	add	x29, sp, #0x20
    1798:	cbz	x1, 17c0 <foreach_dirinpath+0x5c>
    179c:	ldrb	w8, [x24]
    17a0:	cbz	w8, 17c0 <foreach_dirinpath+0x5c>
    17a4:	mov	x0, x24
    17a8:	bl	0 <strlen>
    17ac:	mov	x22, x0
    17b0:	stur	xzr, [x29, #-8]
    17b4:	stp	xzr, xzr, [sp, #8]
    17b8:	cbnz	x23, 17d0 <foreach_dirinpath+0x6c>
    17bc:	b	1828 <foreach_dirinpath+0xc4>
    17c0:	mov	x22, xzr
    17c4:	stur	xzr, [x29, #-8]
    17c8:	stp	xzr, xzr, [sp, #8]
    17cc:	cbz	x23, 1828 <foreach_dirinpath+0xc4>
    17d0:	ldrb	w8, [x23]
    17d4:	cbz	w8, 1828 <foreach_dirinpath+0xc4>
    17d8:	add	x1, sp, #0x8
    17dc:	mov	x0, x23
    17e0:	bl	2398 <canonicalize_path>
    17e4:	cbnz	w0, 1834 <foreach_dirinpath+0xd0>
    17e8:	ldr	x0, [sp, #8]
    17ec:	cbz	x0, 1a78 <foreach_dirinpath+0x314>
    17f0:	add	x2, sp, #0x10
    17f4:	sub	x3, x29, #0x8
    17f8:	mov	w1, #0x3a                  	// #58
    17fc:	bl	0 <argz_create_sep>
    1800:	cmp	w0, #0xc
    1804:	b.eq	1a48 <foreach_dirinpath+0x2e4>  // b.none
    1808:	cbnz	w0, 1a50 <foreach_dirinpath+0x2ec>
    180c:	add	x8, x22, #0x2
    1810:	mov	x26, xzr
    1814:	mov	x23, xzr
    1818:	str	x8, [sp]
    181c:	cbz	x24, 1880 <foreach_dirinpath+0x11c>
    1820:	mov	x25, xzr
    1824:	b	1970 <foreach_dirinpath+0x20c>
    1828:	mov	w0, #0x5                   	// #5
    182c:	bl	0 <lt__error_string>
    1830:	bl	0 <lt__set_last_error>
    1834:	mov	x23, xzr
    1838:	mov	w27, wzr
    183c:	ldr	x0, [sp, #16]
    1840:	bl	0 <free>
    1844:	ldr	x0, [sp, #8]
    1848:	str	xzr, [sp, #16]
    184c:	bl	0 <free>
    1850:	mov	x0, x23
    1854:	str	xzr, [sp, #8]
    1858:	bl	0 <free>
    185c:	mov	w0, w27
    1860:	ldp	x20, x19, [sp, #112]
    1864:	ldp	x22, x21, [sp, #96]
    1868:	ldp	x24, x23, [sp, #80]
    186c:	ldp	x26, x25, [sp, #64]
    1870:	ldp	x28, x27, [sp, #48]
    1874:	ldp	x29, x30, [sp, #32]
    1878:	add	sp, sp, #0x80
    187c:	ret
    1880:	ldr	x25, [sp, #16]
    1884:	ldur	x8, [x29, #-8]
    1888:	cbz	x26, 18b8 <foreach_dirinpath+0x154>
    188c:	add	x25, x25, x8
    1890:	cmp	x25, x26
    1894:	b.ls	18a8 <foreach_dirinpath+0x144>  // b.plast
    1898:	mov	x0, x26
    189c:	bl	0 <strlen>
    18a0:	add	x8, x26, x0
    18a4:	add	x26, x8, #0x1
    18a8:	cmp	x26, x25
    18ac:	mov	x25, x26
    18b0:	b.cc	18c0 <foreach_dirinpath+0x15c>  // b.lo, b.ul, b.last
    18b4:	b	1838 <foreach_dirinpath+0xd4>
    18b8:	cbz	x25, 1838 <foreach_dirinpath+0xd4>
    18bc:	cbz	x8, 1838 <foreach_dirinpath+0xd4>
    18c0:	ldrb	w8, [x25]
    18c4:	cbz	w8, 18e8 <foreach_dirinpath+0x184>
    18c8:	mov	x0, x25
    18cc:	bl	0 <strlen>
    18d0:	mov	x26, x0
    18d4:	add	x8, x26, x22
    18d8:	add	x8, x8, #0x1
    18dc:	cmp	x8, x24
    18e0:	b.cs	18fc <foreach_dirinpath+0x198>  // b.hs, b.nlast
    18e4:	b	191c <foreach_dirinpath+0x1b8>
    18e8:	mov	x26, xzr
    18ec:	add	x8, x26, x22
    18f0:	add	x8, x8, #0x1
    18f4:	cmp	x8, x24
    18f8:	b.cc	191c <foreach_dirinpath+0x1b8>  // b.lo, b.ul, b.last
    18fc:	mov	x0, x23
    1900:	bl	0 <free>
    1904:	ldr	x8, [sp]
    1908:	add	x24, x8, x26
    190c:	mov	x0, x24
    1910:	bl	0 <lt__malloc>
    1914:	mov	x23, x0
    1918:	cbz	x0, 1838 <foreach_dirinpath+0xd4>
    191c:	cmp	x24, x26
    1920:	b.ls	1a58 <foreach_dirinpath+0x2f4>  // b.plast
    1924:	mov	x0, x23
    1928:	mov	x1, x25
    192c:	bl	0 <strcpy>
    1930:	mov	x1, x20
    1934:	mov	x2, x19
    1938:	blr	x21
    193c:	mov	w27, w0
    1940:	mov	x26, x25
    1944:	cbz	w0, 1880 <foreach_dirinpath+0x11c>
    1948:	b	183c <foreach_dirinpath+0xd8>
    194c:	add	x0, x23, x27
    1950:	mov	x1, x24
    1954:	bl	0 <strcpy>
    1958:	mov	x0, x23
    195c:	mov	x1, x20
    1960:	mov	x2, x19
    1964:	blr	x21
    1968:	mov	w27, w0
    196c:	cbnz	w0, 183c <foreach_dirinpath+0xd8>
    1970:	ldr	x8, [sp, #16]
    1974:	ldur	x9, [x29, #-8]
    1978:	cbz	x26, 19a4 <foreach_dirinpath+0x240>
    197c:	add	x27, x8, x9
    1980:	cmp	x27, x26
    1984:	b.ls	1998 <foreach_dirinpath+0x234>  // b.plast
    1988:	mov	x0, x26
    198c:	bl	0 <strlen>
    1990:	add	x8, x26, x0
    1994:	add	x26, x8, #0x1
    1998:	cmp	x26, x27
    199c:	b.cc	19b0 <foreach_dirinpath+0x24c>  // b.lo, b.ul, b.last
    19a0:	b	1838 <foreach_dirinpath+0xd4>
    19a4:	cbz	x8, 1838 <foreach_dirinpath+0xd4>
    19a8:	mov	x26, x8
    19ac:	cbz	x9, 1838 <foreach_dirinpath+0xd4>
    19b0:	ldrb	w8, [x26]
    19b4:	cbz	w8, 19d8 <foreach_dirinpath+0x274>
    19b8:	mov	x0, x26
    19bc:	bl	0 <strlen>
    19c0:	mov	x27, x0
    19c4:	add	x28, x27, #0x1
    19c8:	add	x8, x28, x22
    19cc:	cmp	x8, x25
    19d0:	b.cs	19ec <foreach_dirinpath+0x288>  // b.hs, b.nlast
    19d4:	b	1a0c <foreach_dirinpath+0x2a8>
    19d8:	mov	x27, xzr
    19dc:	add	x28, x27, #0x1
    19e0:	add	x8, x28, x22
    19e4:	cmp	x8, x25
    19e8:	b.cc	1a0c <foreach_dirinpath+0x2a8>  // b.lo, b.ul, b.last
    19ec:	mov	x0, x23
    19f0:	bl	0 <free>
    19f4:	ldr	x8, [sp]
    19f8:	add	x25, x8, x27
    19fc:	mov	x0, x25
    1a00:	bl	0 <lt__malloc>
    1a04:	mov	x23, x0
    1a08:	cbz	x0, 1838 <foreach_dirinpath+0xd4>
    1a0c:	cmp	x25, x27
    1a10:	b.ls	1a58 <foreach_dirinpath+0x2f4>  // b.plast
    1a14:	mov	x0, x23
    1a18:	mov	x1, x26
    1a1c:	bl	0 <strcpy>
    1a20:	ldrb	w8, [x24]
    1a24:	cbz	w8, 1958 <foreach_dirinpath+0x1f4>
    1a28:	add	x8, x27, x23
    1a2c:	ldurb	w8, [x8, #-1]
    1a30:	cmp	w8, #0x2f
    1a34:	b.eq	194c <foreach_dirinpath+0x1e8>  // b.none
    1a38:	mov	w8, #0x2f                  	// #47
    1a3c:	strb	w8, [x23, x27]
    1a40:	mov	x27, x28
    1a44:	b	194c <foreach_dirinpath+0x1e8>
    1a48:	mov	w0, #0xb                   	// #11
    1a4c:	b	182c <foreach_dirinpath+0xc8>
    1a50:	mov	w0, wzr
    1a54:	b	182c <foreach_dirinpath+0xc8>
    1a58:	adrp	x0, 0 <lt__alloc_die_callback>
    1a5c:	adrp	x1, 0 <lt__alloc_die_callback>
    1a60:	adrp	x3, 0 <lt__alloc_die_callback>
    1a64:	add	x0, x0, #0x0
    1a68:	add	x1, x1, #0x0
    1a6c:	add	x3, x3, #0x0
    1a70:	mov	w2, #0x2cd                 	// #717
    1a74:	bl	0 <__assert_fail>
    1a78:	adrp	x0, 0 <lt__alloc_die_callback>
    1a7c:	adrp	x1, 0 <lt__alloc_die_callback>
    1a80:	adrp	x3, 0 <lt__alloc_die_callback>
    1a84:	add	x0, x0, #0x0
    1a88:	add	x1, x1, #0x0
    1a8c:	add	x3, x3, #0x0
    1a90:	mov	w2, #0x28c                 	// #652
    1a94:	bl	0 <__assert_fail>

0000000000001a98 <foreachfile_callback>:
    1a98:	sub	sp, sp, #0x80
    1a9c:	stp	x29, x30, [sp, #32]
    1aa0:	stp	x28, x27, [sp, #48]
    1aa4:	stp	x26, x25, [sp, #64]
    1aa8:	stp	x24, x23, [sp, #80]
    1aac:	stp	x22, x21, [sp, #96]
    1ab0:	stp	x20, x19, [sp, #112]
    1ab4:	ldr	x24, [x1]
    1ab8:	add	x29, sp, #0x20
    1abc:	stur	xzr, [x29, #-8]
    1ac0:	str	xzr, [sp, #16]
    1ac4:	cbz	x0, 1da0 <foreachfile_callback+0x308>
    1ac8:	ldrb	w8, [x0]
    1acc:	mov	x20, x0
    1ad0:	cbz	w8, 1da0 <foreachfile_callback+0x308>
    1ad4:	mov	x0, x20
    1ad8:	mov	x23, x2
    1adc:	bl	0 <strlen>
    1ae0:	add	x8, x0, x20
    1ae4:	ldurb	w8, [x8, #-1]
    1ae8:	cmp	w8, #0x2f
    1aec:	b.eq	1dc0 <foreachfile_callback+0x328>  // b.none
    1af0:	mov	x0, x20
    1af4:	bl	0 <opendir>
    1af8:	cbz	x0, 1cac <foreachfile_callback+0x214>
    1afc:	mov	x21, x0
    1b00:	bl	0 <readdir>
    1b04:	cbz	x0, 1cb8 <foreachfile_callback+0x220>
    1b08:	mov	x27, #0x1                   	// #1
    1b0c:	movk	x27, #0x4000, lsl #32
    1b10:	mov	x22, x0
    1b14:	mov	w26, #0x1                   	// #1
    1b18:	movk	x27, #0x3ff, lsl #48
    1b1c:	mov	w28, #0x3                   	// #3
    1b20:	stp	x24, x23, [sp]
    1b24:	b	1b5c <foreachfile_callback+0xc4>
    1b28:	mov	x23, xzr
    1b2c:	sub	x0, x29, #0x8
    1b30:	add	x1, sp, #0x10
    1b34:	mov	x2, x23
    1b38:	mov	x3, x22
    1b3c:	bl	2dac <lt_argz_insert>
    1b40:	cbnz	w0, 1cc8 <foreachfile_callback+0x230>
    1b44:	mov	x0, x22
    1b48:	bl	0 <free>
    1b4c:	mov	x0, x21
    1b50:	bl	0 <readdir>
    1b54:	mov	x22, x0
    1b58:	cbz	x0, 1cc0 <foreachfile_callback+0x228>
    1b5c:	mov	x23, x22
    1b60:	ldrb	w8, [x23, #19]!
    1b64:	cmp	w8, #0x2e
    1b68:	b.eq	1b4c <foreachfile_callback+0xb4>  // b.none
    1b6c:	ldrb	w8, [x20]
    1b70:	cbz	w8, 1b84 <foreachfile_callback+0xec>
    1b74:	mov	x0, x20
    1b78:	bl	0 <strlen>
    1b7c:	add	x25, x0, #0x1
    1b80:	b	1b88 <foreachfile_callback+0xf0>
    1b84:	mov	w25, #0x1                   	// #1
    1b88:	mov	x0, x23
    1b8c:	bl	0 <strlen>
    1b90:	add	x8, x22, x0
    1b94:	add	x8, x8, #0x13
    1b98:	mov	x10, x8
    1b9c:	mov	x9, x10
    1ba0:	sub	x10, x10, #0x1
    1ba4:	cmp	x10, x23
    1ba8:	b.ls	1bc4 <foreachfile_callback+0x12c>  // b.plast
    1bac:	ldrb	w11, [x10]
    1bb0:	cmp	x11, #0x3f
    1bb4:	b.hi	1bc4 <foreachfile_callback+0x12c>  // b.pmore
    1bb8:	lsl	x11, x26, x11
    1bbc:	and	x11, x11, x27
    1bc0:	cbnz	x11, 1b9c <foreachfile_callback+0x104>
    1bc4:	ldrb	w10, [x9]
    1bc8:	cmp	w10, #0x2e
    1bcc:	csel	x8, x9, x8, eq  // eq = none
    1bd0:	sub	x9, x8, #0x1
    1bd4:	cmp	x9, x23
    1bd8:	b.ls	1bec <foreachfile_callback+0x154>  // b.plast
    1bdc:	ldrb	w10, [x9], #-1
    1be0:	cmp	w10, #0x2e
    1be4:	b.ne	1bd4 <foreachfile_callback+0x13c>  // b.any
    1be8:	add	x8, x9, #0x1
    1bec:	sub	x24, x8, x23
    1bf0:	add	x19, x24, x25
    1bf4:	add	x0, x19, #0x1
    1bf8:	bl	0 <lt__malloc>
    1bfc:	cbz	x0, 1cd0 <foreachfile_callback+0x238>
    1c00:	mov	x1, x20
    1c04:	mov	x22, x0
    1c08:	bl	0 <strcpy>
    1c0c:	bl	0 <strlen>
    1c10:	mov	w8, #0x2f                  	// #47
    1c14:	strh	w8, [x22, x0]
    1c18:	mov	x0, x22
    1c1c:	mov	x1, x23
    1c20:	mov	x2, x24
    1c24:	bl	0 <strncat>
    1c28:	strb	wzr, [x22, x19]
    1c2c:	ldrb	w8, [x22]
    1c30:	cbz	w8, 1d80 <foreachfile_callback+0x2e8>
    1c34:	ldur	x25, [x29, #-8]
    1c38:	cbz	x25, 1b28 <foreachfile_callback+0x90>
    1c3c:	ldr	x8, [sp, #16]
    1c40:	cbz	x8, 1b28 <foreachfile_callback+0x90>
    1c44:	mov	x24, xzr
    1c48:	add	x19, x25, x8
    1c4c:	b	1c7c <foreachfile_callback+0x1e4>
    1c50:	cmp	x24, x19
    1c54:	mov	x23, x24
    1c58:	b.cs	1b28 <foreachfile_callback+0x90>  // b.hs, b.nlast
    1c5c:	mov	x0, x22
    1c60:	mov	x1, x23
    1c64:	bl	0 <strcmp>
    1c68:	cmp	w0, #0x0
    1c6c:	cset	w8, eq  // eq = none
    1c70:	csel	w8, w28, w8, lt  // lt = tstop
    1c74:	mov	x24, x23
    1c78:	cbnz	w8, 1ca0 <foreachfile_callback+0x208>
    1c7c:	mov	x23, x25
    1c80:	cbz	x24, 1c5c <foreachfile_callback+0x1c4>
    1c84:	cmp	x19, x24
    1c88:	b.ls	1c50 <foreachfile_callback+0x1b8>  // b.plast
    1c8c:	mov	x0, x24
    1c90:	bl	0 <strlen>
    1c94:	add	x8, x24, x0
    1c98:	add	x24, x8, #0x1
    1c9c:	b	1c50 <foreachfile_callback+0x1b8>
    1ca0:	cmp	w8, #0x3
    1ca4:	b.eq	1b2c <foreachfile_callback+0x94>  // b.none
    1ca8:	b	1b44 <foreachfile_callback+0xac>
    1cac:	mov	x20, xzr
    1cb0:	mov	w22, wzr
    1cb4:	b	1d54 <foreachfile_callback+0x2bc>
    1cb8:	mov	w19, #0x1                   	// #1
    1cbc:	b	1cd8 <foreachfile_callback+0x240>
    1cc0:	mov	w19, #0x1                   	// #1
    1cc4:	b	1cd4 <foreachfile_callback+0x23c>
    1cc8:	mov	x0, x22
    1ccc:	bl	0 <free>
    1cd0:	mov	w19, wzr
    1cd4:	ldp	x24, x23, [sp]
    1cd8:	mov	x0, x21
    1cdc:	bl	0 <closedir>
    1ce0:	ldur	x20, [x29, #-8]
    1ce4:	mov	w22, wzr
    1ce8:	cbz	w19, 1d54 <foreachfile_callback+0x2bc>
    1cec:	cbz	x20, 1d54 <foreachfile_callback+0x2bc>
    1cf0:	mov	x21, xzr
    1cf4:	b	1d14 <foreachfile_callback+0x27c>
    1cf8:	cmp	x21, x19
    1cfc:	b.cs	1cb0 <foreachfile_callback+0x218>  // b.hs, b.nlast
    1d00:	mov	x0, x21
    1d04:	mov	x1, x23
    1d08:	blr	x24
    1d0c:	ldur	x20, [x29, #-8]
    1d10:	cbnz	w0, 1d50 <foreachfile_callback+0x2b8>
    1d14:	ldr	x8, [sp, #16]
    1d18:	cbz	x21, 1d3c <foreachfile_callback+0x2a4>
    1d1c:	add	x19, x20, x8
    1d20:	cmp	x19, x21
    1d24:	b.ls	1cf8 <foreachfile_callback+0x260>  // b.plast
    1d28:	mov	x0, x21
    1d2c:	bl	0 <strlen>
    1d30:	add	x8, x21, x0
    1d34:	add	x21, x8, #0x1
    1d38:	b	1cf8 <foreachfile_callback+0x260>
    1d3c:	mov	w22, wzr
    1d40:	cbz	x20, 1d54 <foreachfile_callback+0x2bc>
    1d44:	mov	x21, x20
    1d48:	cbnz	x8, 1d00 <foreachfile_callback+0x268>
    1d4c:	b	1d54 <foreachfile_callback+0x2bc>
    1d50:	mov	w22, w0
    1d54:	mov	x0, x20
    1d58:	bl	0 <free>
    1d5c:	mov	w0, w22
    1d60:	ldp	x20, x19, [sp, #112]
    1d64:	ldp	x22, x21, [sp, #96]
    1d68:	ldp	x24, x23, [sp, #80]
    1d6c:	ldp	x26, x25, [sp, #64]
    1d70:	ldp	x28, x27, [sp, #48]
    1d74:	ldp	x29, x30, [sp, #32]
    1d78:	add	sp, sp, #0x80
    1d7c:	ret
    1d80:	adrp	x0, 0 <lt__alloc_die_callback>
    1d84:	adrp	x1, 0 <lt__alloc_die_callback>
    1d88:	adrp	x3, 0 <lt__alloc_die_callback>
    1d8c:	add	x0, x0, #0x0
    1d90:	add	x1, x1, #0x0
    1d94:	add	x3, x3, #0x0
    1d98:	mov	w2, #0x6dd                 	// #1757
    1d9c:	bl	0 <__assert_fail>
    1da0:	adrp	x0, 0 <lt__alloc_die_callback>
    1da4:	adrp	x1, 0 <lt__alloc_die_callback>
    1da8:	adrp	x3, 0 <lt__alloc_die_callback>
    1dac:	add	x0, x0, #0x0
    1db0:	add	x1, x1, #0x0
    1db4:	add	x3, x3, #0x0
    1db8:	mov	w2, #0x730                 	// #1840
    1dbc:	bl	0 <__assert_fail>
    1dc0:	adrp	x0, 0 <lt__alloc_die_callback>
    1dc4:	adrp	x1, 0 <lt__alloc_die_callback>
    1dc8:	adrp	x3, 0 <lt__alloc_die_callback>
    1dcc:	add	x0, x0, #0x0
    1dd0:	add	x1, x1, #0x0
    1dd4:	add	x3, x3, #0x0
    1dd8:	mov	w2, #0x733                 	// #1843
    1ddc:	bl	0 <__assert_fail>

0000000000001de0 <lt_dlsym>:
    1de0:	sub	sp, sp, #0xc0
    1de4:	stp	x29, x30, [sp, #128]
    1de8:	stp	x24, x23, [sp, #144]
    1dec:	stp	x22, x21, [sp, #160]
    1df0:	stp	x20, x19, [sp, #176]
    1df4:	add	x29, sp, #0x80
    1df8:	cbz	x0, 1e38 <lt_dlsym+0x58>
    1dfc:	mov	x20, x1
    1e00:	cbz	x1, 1e40 <lt_dlsym+0x60>
    1e04:	ldrb	w8, [x20]
    1e08:	mov	x19, x0
    1e0c:	cbz	w8, 1e48 <lt_dlsym+0x68>
    1e10:	mov	x0, x20
    1e14:	bl	0 <strlen>
    1e18:	mov	x21, x0
    1e1c:	ldr	x24, [x19, #8]
    1e20:	ldr	x0, [x24, #8]
    1e24:	cbnz	x0, 1e58 <lt_dlsym+0x78>
    1e28:	ldr	x23, [x19, #24]
    1e2c:	add	x21, x0, x21
    1e30:	cbnz	x23, 1e84 <lt_dlsym+0xa4>
    1e34:	b	1ee0 <lt_dlsym+0x100>
    1e38:	mov	w0, #0xc                   	// #12
    1e3c:	b	1f2c <lt_dlsym+0x14c>
    1e40:	mov	w0, #0xa                   	// #10
    1e44:	b	1f2c <lt_dlsym+0x14c>
    1e48:	mov	x21, xzr
    1e4c:	ldr	x24, [x19, #8]
    1e50:	ldr	x0, [x24, #8]
    1e54:	cbz	x0, 1e28 <lt_dlsym+0x48>
    1e58:	ldrb	w8, [x0]
    1e5c:	cbz	w8, 1e74 <lt_dlsym+0x94>
    1e60:	bl	0 <strlen>
    1e64:	ldr	x23, [x19, #24]
    1e68:	add	x21, x0, x21
    1e6c:	cbnz	x23, 1e84 <lt_dlsym+0xa4>
    1e70:	b	1ee0 <lt_dlsym+0x100>
    1e74:	mov	x0, xzr
    1e78:	ldr	x23, [x19, #24]
    1e7c:	add	x21, x0, x21
    1e80:	cbz	x23, 1ee0 <lt_dlsym+0x100>
    1e84:	ldrb	w8, [x23]
    1e88:	cbz	w8, 1ee0 <lt_dlsym+0x100>
    1e8c:	mov	x0, x23
    1e90:	bl	0 <strlen>
    1e94:	add	x8, x21, x0
    1e98:	add	x9, x8, #0x5
    1e9c:	cmp	x9, #0x80
    1ea0:	b.cc	1ef4 <lt_dlsym+0x114>  // b.lo, b.ul, b.last
    1ea4:	add	x0, x8, #0x6
    1ea8:	bl	0 <lt__malloc>
    1eac:	cbz	x0, 1f28 <lt_dlsym+0x148>
    1eb0:	ldr	x24, [x19, #8]
    1eb4:	ldr	x23, [x19, #24]
    1eb8:	mov	x21, x0
    1ebc:	ldr	x22, [x24, #56]
    1ec0:	cbnz	x23, 1f00 <lt_dlsym+0x120>
    1ec4:	ldr	x1, [x24, #8]
    1ec8:	cbz	x1, 1fb8 <lt_dlsym+0x1d8>
    1ecc:	mov	x0, x21
    1ed0:	bl	0 <strcpy>
    1ed4:	mov	x1, x20
    1ed8:	bl	0 <strcat>
    1edc:	b	1fc4 <lt_dlsym+0x1e4>
    1ee0:	mov	x0, xzr
    1ee4:	add	x8, x21, x0
    1ee8:	add	x9, x8, #0x5
    1eec:	cmp	x9, #0x80
    1ef0:	b.cs	1ea4 <lt_dlsym+0xc4>  // b.hs, b.nlast
    1ef4:	mov	x21, sp
    1ef8:	ldr	x22, [x24, #56]
    1efc:	cbz	x23, 1ec4 <lt_dlsym+0xe4>
    1f00:	bl	0 <lt__get_last_error>
    1f04:	ldr	x8, [x19, #8]
    1f08:	mov	x23, x0
    1f0c:	ldr	x1, [x8, #8]
    1f10:	cbz	x1, 1f3c <lt_dlsym+0x15c>
    1f14:	mov	x0, x21
    1f18:	bl	0 <strcpy>
    1f1c:	ldr	x1, [x19, #24]
    1f20:	bl	0 <strcat>
    1f24:	b	1f48 <lt_dlsym+0x168>
    1f28:	mov	w0, #0xd                   	// #13
    1f2c:	bl	0 <lt__error_string>
    1f30:	bl	0 <lt__set_last_error>
    1f34:	mov	x24, xzr
    1f38:	b	1ff4 <lt_dlsym+0x214>
    1f3c:	ldr	x1, [x19, #24]
    1f40:	mov	x0, x21
    1f44:	bl	0 <strcpy>
    1f48:	mov	x0, x21
    1f4c:	bl	0 <strlen>
    1f50:	mov	w9, #0x4c5f                	// #19551
    1f54:	add	x8, x21, x0
    1f58:	movk	w9, #0x5854, lsl #16
    1f5c:	mov	w10, #0x5f                  	// #95
    1f60:	mov	x0, x21
    1f64:	mov	x1, x20
    1f68:	str	w9, [x8]
    1f6c:	strh	w10, [x8, #4]
    1f70:	bl	0 <strcat>
    1f74:	ldr	x8, [x19, #8]
    1f78:	ldr	x1, [x19, #56]
    1f7c:	mov	x0, x22
    1f80:	mov	x2, x21
    1f84:	ldr	x8, [x8, #32]
    1f88:	blr	x8
    1f8c:	cbz	x0, 1fa4 <lt_dlsym+0x1c4>
    1f90:	mov	x8, sp
    1f94:	mov	x24, x0
    1f98:	cmp	x21, x8
    1f9c:	b.ne	1fec <lt_dlsym+0x20c>  // b.any
    1fa0:	b	1ff4 <lt_dlsym+0x214>
    1fa4:	mov	x0, x23
    1fa8:	bl	0 <lt__set_last_error>
    1fac:	ldr	x24, [x19, #8]
    1fb0:	ldr	x1, [x24, #8]
    1fb4:	cbnz	x1, 1ecc <lt_dlsym+0xec>
    1fb8:	mov	x0, x21
    1fbc:	mov	x1, x20
    1fc0:	bl	0 <strcpy>
    1fc4:	ldr	x8, [x19, #8]
    1fc8:	ldr	x1, [x19, #56]
    1fcc:	mov	x0, x22
    1fd0:	mov	x2, x21
    1fd4:	ldr	x8, [x8, #32]
    1fd8:	blr	x8
    1fdc:	mov	x8, sp
    1fe0:	cmp	x21, x8
    1fe4:	mov	x24, x0
    1fe8:	b.eq	1ff4 <lt_dlsym+0x214>  // b.none
    1fec:	mov	x0, x21
    1ff0:	bl	0 <free>
    1ff4:	mov	x0, x24
    1ff8:	ldp	x20, x19, [sp, #176]
    1ffc:	ldp	x22, x21, [sp, #160]
    2000:	ldp	x24, x23, [sp, #144]
    2004:	ldp	x29, x30, [sp, #128]
    2008:	add	sp, sp, #0xc0
    200c:	ret

0000000000002010 <lt_dlerror>:
    2010:	stp	x29, x30, [sp, #-32]!
    2014:	str	x19, [sp, #16]
    2018:	mov	x29, sp
    201c:	bl	0 <lt__get_last_error>
    2020:	mov	x19, x0
    2024:	mov	x0, xzr
    2028:	bl	0 <lt__set_last_error>
    202c:	mov	x0, x19
    2030:	ldr	x19, [sp, #16]
    2034:	ldp	x29, x30, [sp], #32
    2038:	ret

000000000000203c <lt_dladdsearchdir>:
    203c:	stp	x29, x30, [sp, #-16]!
    2040:	mov	x29, sp
    2044:	cbz	x0, 206c <lt_dladdsearchdir+0x30>
    2048:	ldrb	w8, [x0]
    204c:	mov	x1, x0
    2050:	cbz	w8, 206c <lt_dladdsearchdir+0x30>
    2054:	mov	x0, xzr
    2058:	bl	2078 <lt_dlpath_insertdir>
    205c:	cmp	w0, #0x0
    2060:	cset	w0, ne  // ne = any
    2064:	ldp	x29, x30, [sp], #16
    2068:	ret
    206c:	mov	w0, wzr
    2070:	ldp	x29, x30, [sp], #16
    2074:	ret

0000000000002078 <lt_dlpath_insertdir>:
    2078:	sub	sp, sp, #0x40
    207c:	stp	x29, x30, [sp, #16]
    2080:	add	x29, sp, #0x10
    2084:	str	x21, [sp, #32]
    2088:	stp	x20, x19, [sp, #48]
    208c:	str	xzr, [x29, #24]
    2090:	stp	xzr, xzr, [sp]
    2094:	cbz	x1, 21d4 <lt_dlpath_insertdir+0x15c>
    2098:	ldrb	w8, [x1]
    209c:	mov	x19, x1
    20a0:	cbz	w8, 21d4 <lt_dlpath_insertdir+0x15c>
    20a4:	mov	x20, x0
    20a8:	add	x1, x29, #0x18
    20ac:	mov	x0, x19
    20b0:	bl	2398 <canonicalize_path>
    20b4:	cbz	w0, 20e8 <lt_dlpath_insertdir+0x70>
    20b8:	mov	w19, #0x1                   	// #1
    20bc:	ldr	x0, [sp, #8]
    20c0:	bl	0 <free>
    20c4:	ldr	x0, [x29, #24]
    20c8:	str	xzr, [sp, #8]
    20cc:	bl	0 <free>
    20d0:	mov	w0, w19
    20d4:	ldp	x20, x19, [sp, #48]
    20d8:	ldr	x21, [sp, #32]
    20dc:	ldp	x29, x30, [sp, #16]
    20e0:	add	sp, sp, #0x40
    20e4:	ret
    20e8:	ldr	x8, [x29, #24]
    20ec:	cbz	x8, 21f4 <lt_dlpath_insertdir+0x17c>
    20f0:	ldrb	w8, [x8]
    20f4:	cbz	w8, 21f4 <lt_dlpath_insertdir+0x17c>
    20f8:	adrp	x21, 0 <lt__alloc_die_callback>
    20fc:	ldr	x0, [x21]
    2100:	cbz	x0, 2128 <lt_dlpath_insertdir+0xb0>
    2104:	add	x2, sp, #0x8
    2108:	mov	x3, sp
    210c:	mov	w1, #0x3a                  	// #58
    2110:	bl	0 <argz_create_sep>
    2114:	cbz	w0, 2144 <lt_dlpath_insertdir+0xcc>
    2118:	cmp	w0, #0xc
    211c:	b.ne	2170 <lt_dlpath_insertdir+0xf8>  // b.any
    2120:	mov	w0, #0xb                   	// #11
    2124:	b	2174 <lt_dlpath_insertdir+0xfc>
    2128:	cbnz	x20, 2214 <lt_dlpath_insertdir+0x19c>
    212c:	mov	x0, x19
    2130:	bl	0 <lt__strdup>
    2134:	cmp	x0, #0x0
    2138:	str	x0, [x21]
    213c:	cset	w19, eq  // eq = none
    2140:	b	20bc <lt_dlpath_insertdir+0x44>
    2144:	cbz	x20, 2180 <lt_dlpath_insertdir+0x108>
    2148:	ldr	x0, [x21]
    214c:	cmp	x0, x20
    2150:	b.hi	2234 <lt_dlpath_insertdir+0x1bc>  // b.pmore
    2154:	sub	x20, x20, x0
    2158:	bl	0 <strlen>
    215c:	cmp	w20, w0
    2160:	b.gt	2254 <lt_dlpath_insertdir+0x1dc>
    2164:	ldr	x8, [sp, #8]
    2168:	add	x2, x8, x20
    216c:	b	2184 <lt_dlpath_insertdir+0x10c>
    2170:	mov	w0, wzr
    2174:	bl	0 <lt__error_string>
    2178:	bl	0 <lt__set_last_error>
    217c:	b	20b8 <lt_dlpath_insertdir+0x40>
    2180:	mov	x2, xzr
    2184:	add	x0, sp, #0x8
    2188:	mov	x1, sp
    218c:	mov	x3, x19
    2190:	bl	2dac <lt_argz_insert>
    2194:	cbnz	w0, 20b8 <lt_dlpath_insertdir+0x40>
    2198:	ldp	x1, x0, [sp]
    219c:	mov	w2, #0x3a                  	// #58
    21a0:	bl	0 <argz_stringify>
    21a4:	ldr	x0, [x21]
    21a8:	ldr	x8, [sp, #8]
    21ac:	cmp	x0, x8
    21b0:	b.eq	21cc <lt_dlpath_insertdir+0x154>  // b.none
    21b4:	bl	0 <free>
    21b8:	ldr	x8, [sp, #8]
    21bc:	mov	w19, wzr
    21c0:	str	xzr, [sp, #8]
    21c4:	str	x8, [x21]
    21c8:	b	20bc <lt_dlpath_insertdir+0x44>
    21cc:	mov	w19, wzr
    21d0:	b	20bc <lt_dlpath_insertdir+0x44>
    21d4:	adrp	x0, 0 <lt__alloc_die_callback>
    21d8:	adrp	x1, 0 <lt__alloc_die_callback>
    21dc:	adrp	x3, 0 <lt__alloc_die_callback>
    21e0:	add	x0, x0, #0x0
    21e4:	add	x1, x1, #0x0
    21e8:	add	x3, x3, #0x0
    21ec:	mov	w2, #0x84f                 	// #2127
    21f0:	bl	0 <__assert_fail>
    21f4:	adrp	x0, 0 <lt__alloc_die_callback>
    21f8:	adrp	x1, 0 <lt__alloc_die_callback>
    21fc:	adrp	x3, 0 <lt__alloc_die_callback>
    2200:	add	x0, x0, #0x0
    2204:	add	x1, x1, #0x0
    2208:	add	x3, x3, #0x0
    220c:	mov	w2, #0x857                 	// #2135
    2210:	bl	0 <__assert_fail>
    2214:	adrp	x0, 0 <lt__alloc_die_callback>
    2218:	adrp	x1, 0 <lt__alloc_die_callback>
    221c:	adrp	x3, 0 <lt__alloc_die_callback>
    2220:	add	x0, x0, #0x0
    2224:	add	x1, x1, #0x0
    2228:	add	x3, x3, #0x0
    222c:	mov	w2, #0x85c                 	// #2140
    2230:	bl	0 <__assert_fail>
    2234:	adrp	x0, 0 <lt__alloc_die_callback>
    2238:	adrp	x1, 0 <lt__alloc_die_callback>
    223c:	adrp	x3, 0 <lt__alloc_die_callback>
    2240:	add	x0, x0, #0x0
    2244:	add	x1, x1, #0x0
    2248:	add	x3, x3, #0x0
    224c:	mov	w2, #0x875                 	// #2165
    2250:	bl	0 <__assert_fail>
    2254:	adrp	x0, 0 <lt__alloc_die_callback>
    2258:	adrp	x1, 0 <lt__alloc_die_callback>
    225c:	adrp	x3, 0 <lt__alloc_die_callback>
    2260:	add	x0, x0, #0x0
    2264:	add	x1, x1, #0x0
    2268:	add	x3, x3, #0x0
    226c:	mov	w2, #0x876                 	// #2166
    2270:	bl	0 <__assert_fail>

0000000000002274 <lt_dlinsertsearchdir>:
    2274:	stp	x29, x30, [sp, #-48]!
    2278:	stp	x20, x19, [sp, #32]
    227c:	mov	x19, x1
    2280:	mov	x20, x0
    2284:	str	x21, [sp, #16]
    2288:	mov	x29, sp
    228c:	cbz	x0, 22f0 <lt_dlinsertsearchdir+0x7c>
    2290:	adrp	x8, 0 <lt__alloc_die_callback>
    2294:	ldr	x21, [x8]
    2298:	cmp	x21, x20
    229c:	b.hi	22c0 <lt_dlinsertsearchdir+0x4c>  // b.pmore
    22a0:	cbz	x21, 22e0 <lt_dlinsertsearchdir+0x6c>
    22a4:	ldrb	w8, [x21]
    22a8:	cbz	w8, 22e0 <lt_dlinsertsearchdir+0x6c>
    22ac:	mov	x0, x21
    22b0:	bl	0 <strlen>
    22b4:	add	x8, x21, x0
    22b8:	cmp	x8, x20
    22bc:	b.hi	22f0 <lt_dlinsertsearchdir+0x7c>  // b.pmore
    22c0:	mov	w0, #0x12                  	// #18
    22c4:	bl	0 <lt__error_string>
    22c8:	bl	0 <lt__set_last_error>
    22cc:	mov	w0, #0x1                   	// #1
    22d0:	ldp	x20, x19, [sp, #32]
    22d4:	ldr	x21, [sp, #16]
    22d8:	ldp	x29, x30, [sp], #48
    22dc:	ret
    22e0:	mov	x0, xzr
    22e4:	add	x8, x21, x0
    22e8:	cmp	x8, x20
    22ec:	b.ls	22c0 <lt_dlinsertsearchdir+0x4c>  // b.plast
    22f0:	cbz	x19, 2320 <lt_dlinsertsearchdir+0xac>
    22f4:	ldrb	w8, [x19]
    22f8:	cbz	w8, 2320 <lt_dlinsertsearchdir+0xac>
    22fc:	mov	x0, x20
    2300:	mov	x1, x19
    2304:	bl	2078 <lt_dlpath_insertdir>
    2308:	cmp	w0, #0x0
    230c:	cset	w0, ne  // ne = any
    2310:	ldp	x20, x19, [sp, #32]
    2314:	ldr	x21, [sp, #16]
    2318:	ldp	x29, x30, [sp], #48
    231c:	ret
    2320:	mov	w0, wzr
    2324:	ldp	x20, x19, [sp, #32]
    2328:	ldr	x21, [sp, #16]
    232c:	ldp	x29, x30, [sp], #48
    2330:	ret

0000000000002334 <lt_dlsetsearchpath>:
    2334:	stp	x29, x30, [sp, #-32]!
    2338:	stp	x20, x19, [sp, #16]
    233c:	adrp	x20, 0 <lt__alloc_die_callback>
    2340:	ldr	x8, [x20]
    2344:	mov	x19, x0
    2348:	mov	x29, sp
    234c:	mov	x0, x8
    2350:	bl	0 <free>
    2354:	str	xzr, [x20]
    2358:	cbz	x19, 2388 <lt_dlsetsearchpath+0x54>
    235c:	ldrb	w8, [x19]
    2360:	cbz	w8, 2388 <lt_dlsetsearchpath+0x54>
    2364:	adrp	x1, 0 <lt__alloc_die_callback>
    2368:	add	x1, x1, #0x0
    236c:	mov	x0, x19
    2370:	bl	2398 <canonicalize_path>
    2374:	cmp	w0, #0x0
    2378:	cset	w0, ne  // ne = any
    237c:	ldp	x20, x19, [sp, #16]
    2380:	ldp	x29, x30, [sp], #32
    2384:	ret
    2388:	mov	w0, wzr
    238c:	ldp	x20, x19, [sp, #16]
    2390:	ldp	x29, x30, [sp], #32
    2394:	ret

0000000000002398 <canonicalize_path>:
    2398:	stp	x29, x30, [sp, #-32]!
    239c:	stp	x20, x19, [sp, #16]
    23a0:	mov	x29, sp
    23a4:	cbz	x0, 24a0 <canonicalize_path+0x108>
    23a8:	ldrb	w8, [x0]
    23ac:	mov	x20, x0
    23b0:	cbz	w8, 24a0 <canonicalize_path+0x108>
    23b4:	mov	x19, x1
    23b8:	cbz	x1, 24c0 <canonicalize_path+0x128>
    23bc:	mov	x0, x20
    23c0:	bl	0 <strlen>
    23c4:	add	x0, x0, #0x1
    23c8:	bl	0 <lt__malloc>
    23cc:	cbz	x0, 248c <canonicalize_path+0xf4>
    23d0:	mov	x12, #0xffff800000000001    	// #-140737488355327
    23d4:	mov	x9, xzr
    23d8:	add	x8, x20, #0x1
    23dc:	mov	w10, #0x2f                  	// #47
    23e0:	mov	w11, #0x1                   	// #1
    23e4:	movk	x12, #0x400, lsl #48
    23e8:	ldurb	w13, [x8, #-1]
    23ec:	cmp	w13, #0x2f
    23f0:	b.ne	2414 <canonicalize_path+0x7c>  // b.any
    23f4:	b	243c <canonicalize_path+0xa4>
    23f8:	add	x13, x9, #0x1
    23fc:	strb	w10, [x0, x9]
    2400:	mov	x9, x13
    2404:	add	x8, x8, #0x1
    2408:	ldurb	w13, [x8, #-1]
    240c:	cmp	w13, #0x2f
    2410:	b.eq	243c <canonicalize_path+0xa4>  // b.none
    2414:	cmp	w13, #0x3a
    2418:	b.eq	2458 <canonicalize_path+0xc0>  // b.none
    241c:	cbz	w13, 2470 <canonicalize_path+0xd8>
    2420:	add	x14, x9, #0x1
    2424:	strb	w13, [x0, x9]
    2428:	mov	x9, x14
    242c:	add	x8, x8, #0x1
    2430:	ldurb	w13, [x8, #-1]
    2434:	cmp	w13, #0x2f
    2438:	b.ne	2414 <canonicalize_path+0x7c>  // b.any
    243c:	ldrb	w13, [x8]
    2440:	cmp	w13, #0x3a
    2444:	b.hi	23f8 <canonicalize_path+0x60>  // b.pmore
    2448:	lsl	x13, x11, x13
    244c:	tst	x13, x12
    2450:	b.ne	2404 <canonicalize_path+0x6c>  // b.any
    2454:	b	23f8 <canonicalize_path+0x60>
    2458:	cbz	x9, 2404 <canonicalize_path+0x6c>
    245c:	ldrb	w14, [x8]
    2460:	cbz	w14, 2404 <canonicalize_path+0x6c>
    2464:	cmp	w14, #0x3a
    2468:	b.eq	2404 <canonicalize_path+0x6c>  // b.none
    246c:	b	2420 <canonicalize_path+0x88>
    2470:	mov	w8, wzr
    2474:	strb	wzr, [x0, x9]
    2478:	str	x0, [x19]
    247c:	ldp	x20, x19, [sp, #16]
    2480:	mov	w0, w8
    2484:	ldp	x29, x30, [sp], #32
    2488:	ret
    248c:	mov	w8, #0x1                   	// #1
    2490:	ldp	x20, x19, [sp, #16]
    2494:	mov	w0, w8
    2498:	ldp	x29, x30, [sp], #32
    249c:	ret
    24a0:	adrp	x0, 0 <lt__alloc_die_callback>
    24a4:	adrp	x1, 0 <lt__alloc_die_callback>
    24a8:	adrp	x3, 0 <lt__alloc_die_callback>
    24ac:	add	x0, x0, #0x0
    24b0:	add	x1, x1, #0x0
    24b4:	add	x3, x3, #0x0
    24b8:	mov	w2, #0x24f                 	// #591
    24bc:	bl	0 <__assert_fail>
    24c0:	adrp	x0, 0 <lt__alloc_die_callback>
    24c4:	adrp	x1, 0 <lt__alloc_die_callback>
    24c8:	adrp	x3, 0 <lt__alloc_die_callback>
    24cc:	add	x0, x0, #0x0
    24d0:	add	x1, x1, #0x0
    24d4:	add	x3, x3, #0x0
    24d8:	mov	w2, #0x250                 	// #592
    24dc:	bl	0 <__assert_fail>

00000000000024e0 <lt_dlgetsearchpath>:
    24e0:	adrp	x8, 0 <lt__alloc_die_callback>
    24e4:	ldr	x0, [x8]
    24e8:	ret

00000000000024ec <lt_dlmakeresident>:
    24ec:	stp	x29, x30, [sp, #-16]!
    24f0:	mov	x29, sp
    24f4:	cbz	x0, 2514 <lt_dlmakeresident+0x28>
    24f8:	mov	x8, x0
    24fc:	ldrb	w9, [x8, #36]
    2500:	mov	w0, wzr
    2504:	orr	w9, w9, #0x1
    2508:	strb	w9, [x8, #36]
    250c:	ldp	x29, x30, [sp], #16
    2510:	ret
    2514:	mov	w0, #0xc                   	// #12
    2518:	bl	0 <lt__error_string>
    251c:	bl	0 <lt__set_last_error>
    2520:	mov	w0, #0x1                   	// #1
    2524:	ldp	x29, x30, [sp], #16
    2528:	ret

000000000000252c <lt_dlisresident>:
    252c:	stp	x29, x30, [sp, #-16]!
    2530:	mov	x29, sp
    2534:	cbz	x0, 2548 <lt_dlisresident+0x1c>
    2538:	ldrb	w8, [x0, #36]
    253c:	and	w0, w8, #0x1
    2540:	ldp	x29, x30, [sp], #16
    2544:	ret
    2548:	mov	w0, #0xc                   	// #12
    254c:	bl	0 <lt__error_string>
    2550:	bl	0 <lt__set_last_error>
    2554:	mov	w0, #0xffffffff            	// #-1
    2558:	ldp	x29, x30, [sp], #16
    255c:	ret

0000000000002560 <lt_dlinterface_register>:
    2560:	stp	x29, x30, [sp, #-48]!
    2564:	str	x21, [sp, #16]
    2568:	mov	x21, x0
    256c:	mov	w0, #0x10                  	// #16
    2570:	stp	x20, x19, [sp, #32]
    2574:	mov	x29, sp
    2578:	mov	x20, x1
    257c:	bl	0 <lt__malloc>
    2580:	mov	x19, x0
    2584:	cbz	x0, 25ac <lt_dlinterface_register+0x4c>
    2588:	mov	x0, x21
    258c:	bl	0 <lt__strdup>
    2590:	str	x0, [x19]
    2594:	cbz	x0, 25a0 <lt_dlinterface_register+0x40>
    2598:	str	x20, [x19, #8]
    259c:	b	25ac <lt_dlinterface_register+0x4c>
    25a0:	mov	x0, x19
    25a4:	bl	0 <free>
    25a8:	mov	x19, xzr
    25ac:	mov	x0, x19
    25b0:	ldp	x20, x19, [sp, #32]
    25b4:	ldr	x21, [sp, #16]
    25b8:	ldp	x29, x30, [sp], #48
    25bc:	ret

00000000000025c0 <lt_dlinterface_free>:
    25c0:	stp	x29, x30, [sp, #-32]!
    25c4:	str	x19, [sp, #16]
    25c8:	mov	x19, x0
    25cc:	ldr	x0, [x0]
    25d0:	mov	x29, sp
    25d4:	bl	0 <free>
    25d8:	mov	x0, x19
    25dc:	ldr	x19, [sp, #16]
    25e0:	ldp	x29, x30, [sp], #32
    25e4:	b	0 <free>

00000000000025e8 <lt_dlcaller_set_data>:
    25e8:	stp	x29, x30, [sp, #-64]!
    25ec:	stp	x24, x23, [sp, #16]
    25f0:	stp	x22, x21, [sp, #32]
    25f4:	stp	x20, x19, [sp, #48]
    25f8:	ldr	x8, [x1, #72]
    25fc:	mov	x19, x2
    2600:	mov	x21, x1
    2604:	mov	x20, x0
    2608:	mov	x29, sp
    260c:	cbz	x8, 265c <lt_dlcaller_set_data+0x74>
    2610:	mov	w23, #0xffffffff            	// #-1
    2614:	mov	x9, x8
    2618:	ldr	x10, [x9], #16
    261c:	add	w23, w23, #0x1
    2620:	cbnz	x10, 2618 <lt_dlcaller_set_data+0x30>
    2624:	cbz	w23, 266c <lt_dlcaller_set_data+0x84>
    2628:	mov	x24, xzr
    262c:	add	x9, x8, #0x8
    2630:	mov	w10, w23
    2634:	ldur	x11, [x9, #-8]
    2638:	cmp	x11, x20
    263c:	b.eq	2680 <lt_dlcaller_set_data+0x98>  // b.none
    2640:	add	x24, x24, #0x1
    2644:	cmp	x10, x24
    2648:	add	x9, x9, #0x10
    264c:	b.ne	2634 <lt_dlcaller_set_data+0x4c>  // b.any
    2650:	mov	x22, xzr
    2654:	mov	w24, w23
    2658:	b	268c <lt_dlcaller_set_data+0xa4>
    265c:	mov	x22, xzr
    2660:	mov	w24, wzr
    2664:	mov	w23, wzr
    2668:	b	268c <lt_dlcaller_set_data+0xa4>
    266c:	mov	w24, wzr
    2670:	mov	x22, xzr
    2674:	cmp	w24, w23
    2678:	b.eq	268c <lt_dlcaller_set_data+0xa4>  // b.none
    267c:	b	26c0 <lt_dlcaller_set_data+0xd8>
    2680:	ldr	x22, [x9]
    2684:	cmp	w24, w23
    2688:	b.ne	26c0 <lt_dlcaller_set_data+0xd8>  // b.any
    268c:	add	w9, w23, #0x2
    2690:	lsl	x1, x9, #4
    2694:	mov	x0, x8
    2698:	bl	0 <lt__realloc>
    269c:	cbz	x0, 26cc <lt_dlcaller_set_data+0xe4>
    26a0:	mov	w9, w23
    26a4:	add	w10, w23, #0x1
    26a8:	mov	x8, x0
    26ac:	lsl	x9, x9, #4
    26b0:	lsl	x10, x10, #4
    26b4:	str	x0, [x21, #72]
    26b8:	str	x20, [x0, x9]
    26bc:	str	xzr, [x0, x10]
    26c0:	add	x8, x8, w24, uxtw #4
    26c4:	str	x19, [x8, #8]
    26c8:	b	26d0 <lt_dlcaller_set_data+0xe8>
    26cc:	mov	x22, xzr
    26d0:	mov	x0, x22
    26d4:	ldp	x20, x19, [sp, #48]
    26d8:	ldp	x22, x21, [sp, #32]
    26dc:	ldp	x24, x23, [sp, #16]
    26e0:	ldp	x29, x30, [sp], #64
    26e4:	ret

00000000000026e8 <lt_dlcaller_get_data>:
    26e8:	ldr	x8, [x1, #72]
    26ec:	cbz	x8, 270c <lt_dlcaller_get_data+0x24>
    26f0:	ldr	x9, [x8]
    26f4:	cbz	x9, 270c <lt_dlcaller_get_data+0x24>
    26f8:	add	x8, x8, #0x10
    26fc:	cmp	x9, x0
    2700:	b.eq	2714 <lt_dlcaller_get_data+0x2c>  // b.none
    2704:	ldr	x9, [x8], #16
    2708:	cbnz	x9, 26fc <lt_dlcaller_get_data+0x14>
    270c:	mov	x0, xzr
    2710:	ret
    2714:	ldur	x0, [x8, #-8]
    2718:	ret

000000000000271c <lt_dlgetinfo>:
    271c:	cbz	x0, 2728 <lt_dlgetinfo+0xc>
    2720:	add	x0, x0, #0x10
    2724:	ret
    2728:	stp	x29, x30, [sp, #-16]!
    272c:	mov	w0, #0xc                   	// #12
    2730:	mov	x29, sp
    2734:	bl	0 <lt__error_string>
    2738:	bl	0 <lt__set_last_error>
    273c:	mov	x0, xzr
    2740:	ldp	x29, x30, [sp], #16
    2744:	ret

0000000000002748 <lt_dlhandle_iterate>:
    2748:	stp	x29, x30, [sp, #-32]!
    274c:	stp	x20, x19, [sp, #16]
    2750:	mov	x29, sp
    2754:	cbz	x0, 27a4 <lt_dlhandle_iterate+0x5c>
    2758:	adrp	x8, 0 <lt__alloc_die_callback>
    275c:	add	x8, x8, #0x0
    2760:	cmp	x1, #0x0
    2764:	csel	x8, x8, x1, eq  // eq = none
    2768:	ldr	x19, [x8]
    276c:	cbz	x19, 2794 <lt_dlhandle_iterate+0x4c>
    2770:	mov	x20, x0
    2774:	ldr	x8, [x20, #8]
    2778:	cbz	x8, 2794 <lt_dlhandle_iterate+0x4c>
    277c:	ldr	x1, [x20]
    2780:	mov	x0, x19
    2784:	blr	x8
    2788:	cbz	w0, 2794 <lt_dlhandle_iterate+0x4c>
    278c:	ldr	x19, [x19]
    2790:	cbnz	x19, 2774 <lt_dlhandle_iterate+0x2c>
    2794:	mov	x0, x19
    2798:	ldp	x20, x19, [sp, #16]
    279c:	ldp	x29, x30, [sp], #32
    27a0:	ret
    27a4:	adrp	x0, 0 <lt__alloc_die_callback>
    27a8:	adrp	x1, 0 <lt__alloc_die_callback>
    27ac:	adrp	x3, 0 <lt__alloc_die_callback>
    27b0:	add	x0, x0, #0x0
    27b4:	add	x1, x1, #0x0
    27b8:	add	x3, x3, #0x0
    27bc:	mov	w2, #0x96a                 	// #2410
    27c0:	bl	0 <__assert_fail>

00000000000027c4 <lt_dlhandle_fetch>:
    27c4:	stp	x29, x30, [sp, #-48]!
    27c8:	str	x21, [sp, #16]
    27cc:	stp	x20, x19, [sp, #32]
    27d0:	mov	x29, sp
    27d4:	cbz	x0, 2858 <lt_dlhandle_fetch+0x94>
    27d8:	adrp	x8, 0 <lt__alloc_die_callback>
    27dc:	ldr	x19, [x8]
    27e0:	cbz	x19, 280c <lt_dlhandle_fetch+0x48>
    27e4:	mov	x20, x1
    27e8:	mov	x21, x0
    27ec:	ldr	x8, [x21, #8]
    27f0:	cbz	x8, 2840 <lt_dlhandle_fetch+0x7c>
    27f4:	ldr	x1, [x21]
    27f8:	mov	x0, x19
    27fc:	blr	x8
    2800:	cbz	w0, 2840 <lt_dlhandle_fetch+0x7c>
    2804:	ldr	x19, [x19]
    2808:	cbnz	x19, 27ec <lt_dlhandle_fetch+0x28>
    280c:	mov	x0, x19
    2810:	ldp	x20, x19, [sp, #32]
    2814:	ldr	x21, [sp, #16]
    2818:	ldp	x29, x30, [sp], #48
    281c:	ret
    2820:	ldr	x19, [x19]
    2824:	cbz	x19, 280c <lt_dlhandle_fetch+0x48>
    2828:	ldr	x8, [x21, #8]
    282c:	cbz	x8, 2840 <lt_dlhandle_fetch+0x7c>
    2830:	ldr	x1, [x21]
    2834:	mov	x0, x19
    2838:	blr	x8
    283c:	cbnz	w0, 2820 <lt_dlhandle_fetch+0x5c>
    2840:	ldr	x0, [x19, #24]
    2844:	cbz	x0, 2820 <lt_dlhandle_fetch+0x5c>
    2848:	mov	x1, x20
    284c:	bl	0 <strcmp>
    2850:	cbnz	w0, 2820 <lt_dlhandle_fetch+0x5c>
    2854:	b	280c <lt_dlhandle_fetch+0x48>
    2858:	adrp	x0, 0 <lt__alloc_die_callback>
    285c:	adrp	x1, 0 <lt__alloc_die_callback>
    2860:	adrp	x3, 0 <lt__alloc_die_callback>
    2864:	add	x0, x0, #0x0
    2868:	add	x1, x1, #0x0
    286c:	add	x3, x3, #0x0
    2870:	mov	w2, #0x981                 	// #2433
    2874:	bl	0 <__assert_fail>

0000000000002878 <lt_dlhandle_map>:
    2878:	stp	x29, x30, [sp, #-48]!
    287c:	stp	x22, x21, [sp, #16]
    2880:	stp	x20, x19, [sp, #32]
    2884:	mov	x29, sp
    2888:	cbz	x0, 28f0 <lt_dlhandle_map+0x78>
    288c:	adrp	x8, 0 <lt__alloc_die_callback>
    2890:	ldr	x22, [x8]
    2894:	mov	x19, x2
    2898:	mov	x20, x1
    289c:	mov	x21, x0
    28a0:	b	28b4 <lt_dlhandle_map+0x3c>
    28a4:	mov	x0, x22
    28a8:	mov	x1, x19
    28ac:	blr	x20
    28b0:	cbnz	w0, 28e0 <lt_dlhandle_map+0x68>
    28b4:	cbz	x22, 28dc <lt_dlhandle_map+0x64>
    28b8:	ldr	x8, [x21, #8]
    28bc:	cbz	x8, 28a4 <lt_dlhandle_map+0x2c>
    28c0:	ldr	x1, [x21]
    28c4:	mov	x0, x22
    28c8:	blr	x8
    28cc:	cbz	w0, 28a4 <lt_dlhandle_map+0x2c>
    28d0:	ldr	x22, [x22]
    28d4:	cbnz	x22, 28b8 <lt_dlhandle_map+0x40>
    28d8:	b	28a4 <lt_dlhandle_map+0x2c>
    28dc:	mov	w0, wzr
    28e0:	ldp	x20, x19, [sp, #32]
    28e4:	ldp	x22, x21, [sp, #16]
    28e8:	ldp	x29, x30, [sp], #48
    28ec:	ret
    28f0:	adrp	x0, 0 <lt__alloc_die_callback>
    28f4:	adrp	x1, 0 <lt__alloc_die_callback>
    28f8:	adrp	x3, 0 <lt__alloc_die_callback>
    28fc:	add	x0, x0, #0x0
    2900:	add	x1, x1, #0x0
    2904:	add	x3, x3, #0x0
    2908:	mov	w2, #0x995                 	// #2453
    290c:	bl	0 <__assert_fail>

0000000000002910 <tryall_dlopen>:
    2910:	stp	x29, x30, [sp, #-80]!
    2914:	adrp	x8, 0 <lt__alloc_die_callback>
    2918:	stp	x24, x23, [sp, #32]
    291c:	ldr	x24, [x8]
    2920:	str	x25, [sp, #16]
    2924:	stp	x22, x21, [sp, #48]
    2928:	stp	x20, x19, [sp, #64]
    292c:	mov	x29, sp
    2930:	mov	x20, x3
    2934:	mov	x21, x2
    2938:	mov	x22, x1
    293c:	mov	x23, x0
    2940:	bl	0 <lt__get_last_error>
    2944:	mov	x19, x0
    2948:	cbz	x24, 2960 <tryall_dlopen+0x50>
    294c:	cbnz	x22, 2994 <tryall_dlopen+0x84>
    2950:	ldr	x8, [x24, #16]
    2954:	cbz	x8, 29b0 <tryall_dlopen+0xa0>
    2958:	ldr	x24, [x24]
    295c:	cbnz	x24, 2950 <tryall_dlopen+0x40>
    2960:	ldr	x25, [x23]
    2964:	cbz	x22, 29c8 <tryall_dlopen+0xb8>
    2968:	mov	x0, x22
    296c:	bl	0 <lt__strdup>
    2970:	str	x0, [x25, #16]
    2974:	cbz	x0, 2a90 <tryall_dlopen+0x180>
    2978:	mov	x0, xzr
    297c:	bl	0 <lt_dlloader_next>
    2980:	mov	x23, x0
    2984:	cbnz	x20, 29dc <tryall_dlopen+0xcc>
    2988:	b	2a10 <tryall_dlopen+0x100>
    298c:	ldr	x24, [x24]
    2990:	cbz	x24, 2960 <tryall_dlopen+0x50>
    2994:	ldr	x0, [x24, #16]
    2998:	cmp	x0, x22
    299c:	b.eq	29b0 <tryall_dlopen+0xa0>  // b.none
    29a0:	cbz	x0, 298c <tryall_dlopen+0x7c>
    29a4:	mov	x1, x22
    29a8:	bl	0 <strcmp>
    29ac:	cbnz	w0, 298c <tryall_dlopen+0x7c>
    29b0:	ldr	w8, [x24, #32]
    29b4:	mov	w0, wzr
    29b8:	add	w8, w8, #0x1
    29bc:	str	w8, [x24, #32]
    29c0:	str	x24, [x23]
    29c4:	b	2aa8 <tryall_dlopen+0x198>
    29c8:	str	xzr, [x25, #16]
    29cc:	mov	x0, xzr
    29d0:	bl	0 <lt_dlloader_next>
    29d4:	mov	x23, x0
    29d8:	cbz	x20, 2a10 <tryall_dlopen+0x100>
    29dc:	ldr	x8, [x20, #16]
    29e0:	ldr	x0, [x20, #56]
    29e4:	mov	x1, x22
    29e8:	mov	x2, x21
    29ec:	blr	x8
    29f0:	mov	x24, x20
    29f4:	str	x0, [x25, #56]
    29f8:	cbnz	x0, 2a38 <tryall_dlopen+0x128>
    29fc:	b	2a84 <tryall_dlopen+0x174>
    2a00:	mov	x0, x23
    2a04:	bl	0 <lt_dlloader_next>
    2a08:	mov	x23, x0
    2a0c:	cbz	x0, 2a7c <tryall_dlopen+0x16c>
    2a10:	mov	x0, x23
    2a14:	bl	0 <lt_dlloader_get>
    2a18:	mov	x24, x0
    2a1c:	ldr	x8, [x0, #16]
    2a20:	ldr	x0, [x0, #56]
    2a24:	mov	x1, x22
    2a28:	mov	x2, x21
    2a2c:	blr	x8
    2a30:	str	x0, [x25, #56]
    2a34:	cbz	x0, 2a00 <tryall_dlopen+0xf0>
    2a38:	cbz	x21, 2a78 <tryall_dlopen+0x168>
    2a3c:	ldrb	w8, [x21]
    2a40:	ldrb	w9, [x25, #36]
    2a44:	bfxil	w9, w8, #1, #1
    2a48:	strb	w9, [x25, #36]
    2a4c:	ldrb	w8, [x21]
    2a50:	lsr	w8, w8, #1
    2a54:	lsr	w8, w8, #1
    2a58:	bfi	w9, w8, #1, #1
    2a5c:	strb	w9, [x25, #36]
    2a60:	ldrb	w8, [x21]
    2a64:	and	w9, w9, #0xfffffffb
    2a68:	lsr	w8, w8, #1
    2a6c:	and	w8, w8, #0x4
    2a70:	orr	w8, w9, w8
    2a74:	strb	w8, [x25, #36]
    2a78:	cbnz	x20, 2a98 <tryall_dlopen+0x188>
    2a7c:	cbnz	x20, 2a98 <tryall_dlopen+0x188>
    2a80:	cbnz	x23, 2a98 <tryall_dlopen+0x188>
    2a84:	ldr	x0, [x25, #16]
    2a88:	bl	0 <free>
    2a8c:	str	xzr, [x25, #16]
    2a90:	mov	w0, #0x1                   	// #1
    2a94:	b	2aa8 <tryall_dlopen+0x198>
    2a98:	mov	x0, x19
    2a9c:	str	x24, [x25, #8]
    2aa0:	bl	0 <lt__set_last_error>
    2aa4:	mov	w0, wzr
    2aa8:	ldp	x20, x19, [sp, #64]
    2aac:	ldp	x22, x21, [sp, #48]
    2ab0:	ldp	x24, x23, [sp, #32]
    2ab4:	ldr	x25, [sp, #16]
    2ab8:	ldp	x29, x30, [sp], #80
    2abc:	ret

0000000000002ac0 <find_file_callback>:
    2ac0:	stp	x29, x30, [sp, #-48]!
    2ac4:	str	x21, [sp, #16]
    2ac8:	stp	x20, x19, [sp, #32]
    2acc:	mov	x29, sp
    2ad0:	cbz	x0, 2b54 <find_file_callback+0x94>
    2ad4:	ldrb	w8, [x0]
    2ad8:	mov	x20, x0
    2adc:	cbz	w8, 2b54 <find_file_callback+0x94>
    2ae0:	mov	x19, x1
    2ae4:	cbz	x1, 2b74 <find_file_callback+0xb4>
    2ae8:	mov	x21, x2
    2aec:	cbz	x2, 2b94 <find_file_callback+0xd4>
    2af0:	adrp	x1, 0 <lt__alloc_die_callback>
    2af4:	add	x1, x1, #0x0
    2af8:	mov	x0, x20
    2afc:	bl	0 <fopen>
    2b00:	str	x0, [x21]
    2b04:	cbz	x0, 2b44 <find_file_callback+0x84>
    2b08:	mov	w1, #0x2f                  	// #47
    2b0c:	mov	x0, x20
    2b10:	bl	0 <strrchr>
    2b14:	cmp	x0, x20
    2b18:	b.ls	2b20 <find_file_callback+0x60>  // b.plast
    2b1c:	strb	wzr, [x0]
    2b20:	ldr	x0, [x19]
    2b24:	bl	0 <free>
    2b28:	mov	x0, x20
    2b2c:	str	xzr, [x19]
    2b30:	bl	0 <lt__strdup>
    2b34:	cmp	x0, #0x0
    2b38:	mov	w8, #0xffffffff            	// #-1
    2b3c:	str	x0, [x19]
    2b40:	cneg	w0, w8, ne  // ne = any
    2b44:	ldp	x20, x19, [sp, #32]
    2b48:	ldr	x21, [sp, #16]
    2b4c:	ldp	x29, x30, [sp], #48
    2b50:	ret
    2b54:	adrp	x0, 0 <lt__alloc_die_callback>
    2b58:	adrp	x1, 0 <lt__alloc_die_callback>
    2b5c:	adrp	x3, 0 <lt__alloc_die_callback>
    2b60:	add	x0, x0, #0x0
    2b64:	add	x1, x1, #0x0
    2b68:	add	x3, x3, #0x0
    2b6c:	mov	w2, #0x2f0                 	// #752
    2b70:	bl	0 <__assert_fail>
    2b74:	adrp	x0, 0 <lt__alloc_die_callback>
    2b78:	adrp	x1, 0 <lt__alloc_die_callback>
    2b7c:	adrp	x3, 0 <lt__alloc_die_callback>
    2b80:	add	x0, x0, #0x0
    2b84:	add	x1, x1, #0x0
    2b88:	add	x3, x3, #0x0
    2b8c:	mov	w2, #0x2f1                 	// #753
    2b90:	bl	0 <__assert_fail>
    2b94:	adrp	x0, 0 <lt__alloc_die_callback>
    2b98:	adrp	x1, 0 <lt__alloc_die_callback>
    2b9c:	adrp	x3, 0 <lt__alloc_die_callback>
    2ba0:	add	x0, x0, #0x0
    2ba4:	add	x1, x1, #0x0
    2ba8:	add	x3, x3, #0x0
    2bac:	mov	w2, #0x2f2                 	// #754
    2bb0:	bl	0 <__assert_fail>

0000000000002bb4 <tryall_dlopen_module>:
    2bb4:	stp	x29, x30, [sp, #-80]!
    2bb8:	stp	x24, x23, [sp, #32]
    2bbc:	stp	x22, x21, [sp, #48]
    2bc0:	stp	x20, x19, [sp, #64]
    2bc4:	mov	x19, x4
    2bc8:	mov	x22, x3
    2bcc:	mov	x23, x2
    2bd0:	mov	x21, x1
    2bd4:	mov	x20, x0
    2bd8:	str	x25, [sp, #16]
    2bdc:	mov	x29, sp
    2be0:	cbz	x2, 2c18 <tryall_dlopen_module+0x64>
    2be4:	ldrb	w8, [x23]
    2be8:	cbz	w8, 2c18 <tryall_dlopen_module+0x64>
    2bec:	mov	x0, x23
    2bf0:	bl	0 <strlen>
    2bf4:	cbnz	x20, 2c20 <tryall_dlopen_module+0x6c>
    2bf8:	adrp	x0, 0 <lt__alloc_die_callback>
    2bfc:	adrp	x1, 0 <lt__alloc_die_callback>
    2c00:	adrp	x3, 0 <lt__alloc_die_callback>
    2c04:	add	x0, x0, #0x0
    2c08:	add	x1, x1, #0x0
    2c0c:	add	x3, x3, #0x0
    2c10:	mov	w2, #0x1f6                 	// #502
    2c14:	bl	0 <__assert_fail>
    2c18:	mov	x0, xzr
    2c1c:	cbz	x20, 2bf8 <tryall_dlopen_module+0x44>
    2c20:	cbz	x23, 2d00 <tryall_dlopen_module+0x14c>
    2c24:	cbz	x22, 2d20 <tryall_dlopen_module+0x16c>
    2c28:	cbz	x0, 2c9c <tryall_dlopen_module+0xe8>
    2c2c:	sub	x8, x0, #0x1
    2c30:	ldrb	w9, [x23, x8]
    2c34:	cmp	w9, #0x2f
    2c38:	csel	x25, x8, x0, eq  // eq = none
    2c3c:	ldrb	w8, [x22]
    2c40:	cbz	w8, 2ca8 <tryall_dlopen_module+0xf4>
    2c44:	mov	x0, x22
    2c48:	bl	0 <strlen>
    2c4c:	add	x8, x25, x0
    2c50:	add	x0, x8, #0x2
    2c54:	bl	0 <lt__malloc>
    2c58:	cbz	x0, 2cbc <tryall_dlopen_module+0x108>
    2c5c:	adrp	x1, 0 <lt__alloc_die_callback>
    2c60:	add	x1, x1, #0x0
    2c64:	mov	w2, w25
    2c68:	mov	x3, x23
    2c6c:	mov	x4, x22
    2c70:	mov	x24, x0
    2c74:	bl	0 <sprintf>
    2c78:	mov	x0, x20
    2c7c:	cbz	x21, 2cc4 <tryall_dlopen_module+0x110>
    2c80:	mov	x1, xzr
    2c84:	mov	x2, x21
    2c88:	mov	x3, x24
    2c8c:	mov	x4, x19
    2c90:	bl	2bb4 <tryall_dlopen_module>
    2c94:	mov	w19, w0
    2c98:	b	2cdc <tryall_dlopen_module+0x128>
    2c9c:	mov	x25, xzr
    2ca0:	ldrb	w8, [x22]
    2ca4:	cbnz	w8, 2c44 <tryall_dlopen_module+0x90>
    2ca8:	mov	x0, xzr
    2cac:	add	x8, x25, x0
    2cb0:	add	x0, x8, #0x2
    2cb4:	bl	0 <lt__malloc>
    2cb8:	cbnz	x0, 2c5c <tryall_dlopen_module+0xa8>
    2cbc:	mov	w19, #0x1                   	// #1
    2cc0:	b	2ce4 <tryall_dlopen_module+0x130>
    2cc4:	mov	x1, x24
    2cc8:	mov	x2, x19
    2ccc:	mov	x3, xzr
    2cd0:	bl	2910 <tryall_dlopen>
    2cd4:	cmp	w0, #0x0
    2cd8:	cset	w19, ne  // ne = any
    2cdc:	mov	x0, x24
    2ce0:	bl	0 <free>
    2ce4:	mov	w0, w19
    2ce8:	ldp	x20, x19, [sp, #64]
    2cec:	ldp	x22, x21, [sp, #48]
    2cf0:	ldp	x24, x23, [sp, #32]
    2cf4:	ldr	x25, [sp, #16]
    2cf8:	ldp	x29, x30, [sp], #80
    2cfc:	ret
    2d00:	adrp	x0, 0 <lt__alloc_die_callback>
    2d04:	adrp	x1, 0 <lt__alloc_die_callback>
    2d08:	adrp	x3, 0 <lt__alloc_die_callback>
    2d0c:	add	x0, x0, #0x0
    2d10:	add	x1, x1, #0x0
    2d14:	add	x3, x3, #0x0
    2d18:	mov	w2, #0x1f7                 	// #503
    2d1c:	bl	0 <__assert_fail>
    2d20:	adrp	x0, 0 <lt__alloc_die_callback>
    2d24:	adrp	x1, 0 <lt__alloc_die_callback>
    2d28:	adrp	x3, 0 <lt__alloc_die_callback>
    2d2c:	add	x0, x0, #0x0
    2d30:	add	x1, x1, #0x0
    2d34:	add	x3, x3, #0x0
    2d38:	mov	w2, #0x1f8                 	// #504
    2d3c:	bl	0 <__assert_fail>

0000000000002d40 <find_handle_callback>:
    2d40:	stp	x29, x30, [sp, #-48]!
    2d44:	stp	x20, x19, [sp, #32]
    2d48:	mov	x19, x1
    2d4c:	mov	w1, #0x4                   	// #4
    2d50:	str	x21, [sp, #16]
    2d54:	mov	x29, sp
    2d58:	mov	x20, x2
    2d5c:	mov	x21, x0
    2d60:	bl	0 <access>
    2d64:	cbz	w0, 2d7c <find_handle_callback+0x3c>
    2d68:	mov	w0, wzr
    2d6c:	ldp	x20, x19, [sp, #32]
    2d70:	ldr	x21, [sp, #16]
    2d74:	ldp	x29, x30, [sp], #48
    2d78:	ret
    2d7c:	mov	x0, x19
    2d80:	mov	x1, x21
    2d84:	mov	x2, x20
    2d88:	mov	x3, xzr
    2d8c:	bl	2910 <tryall_dlopen>
    2d90:	cbz	w0, 2d98 <find_handle_callback+0x58>
    2d94:	str	xzr, [x19]
    2d98:	mov	w0, #0x1                   	// #1
    2d9c:	ldp	x20, x19, [sp, #32]
    2da0:	ldr	x21, [sp, #16]
    2da4:	ldp	x29, x30, [sp], #48
    2da8:	ret

0000000000002dac <lt_argz_insert>:
    2dac:	stp	x29, x30, [sp, #-48]!
    2db0:	str	x21, [sp, #16]
    2db4:	stp	x20, x19, [sp, #32]
    2db8:	mov	x19, x3
    2dbc:	mov	x20, x1
    2dc0:	mov	x21, x0
    2dc4:	mov	x29, sp
    2dc8:	cbz	x2, 2df0 <lt_argz_insert+0x44>
    2dcc:	mov	x0, x21
    2dd0:	mov	x1, x20
    2dd4:	mov	x3, x19
    2dd8:	bl	0 <argz_insert>
    2ddc:	cbnz	w0, 2e10 <lt_argz_insert+0x64>
    2de0:	ldp	x20, x19, [sp, #32]
    2de4:	ldr	x21, [sp, #16]
    2de8:	ldp	x29, x30, [sp], #48
    2dec:	ret
    2df0:	mov	x0, x19
    2df4:	bl	0 <strlen>
    2df8:	add	x3, x0, #0x1
    2dfc:	mov	x0, x21
    2e00:	mov	x1, x20
    2e04:	mov	x2, x19
    2e08:	bl	0 <argz_append>
    2e0c:	cbz	w0, 2de0 <lt_argz_insert+0x34>
    2e10:	cmp	w0, #0xc
    2e14:	b.ne	2e20 <lt_argz_insert+0x74>  // b.any
    2e18:	mov	w0, #0xb                   	// #11
    2e1c:	b	2e24 <lt_argz_insert+0x78>
    2e20:	mov	w0, wzr
    2e24:	bl	0 <lt__error_string>
    2e28:	bl	0 <lt__set_last_error>
    2e2c:	mov	w0, #0x1                   	// #1
    2e30:	ldp	x20, x19, [sp, #32]
    2e34:	ldr	x21, [sp, #16]
    2e38:	ldp	x29, x30, [sp], #48
    2e3c:	ret

libltdl_libltdl_la-slist.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__slist_delete>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	x1, 38 <lt__slist_delete+0x38>
  10:	cbz	x0, 28 <lt__slist_delete+0x28>
  14:	mov	x19, x1
  18:	ldr	x20, [x0]
  1c:	blr	x19
  20:	mov	x0, x20
  24:	cbnz	x20, 18 <lt__slist_delete+0x18>
  28:	ldp	x20, x19, [sp, #16]
  2c:	mov	x0, xzr
  30:	ldp	x29, x30, [sp], #32
  34:	ret
  38:	adrp	x0, 0 <lt__slist_delete>
  3c:	adrp	x1, 0 <lt__slist_delete>
  40:	adrp	x3, 0 <lt__slist_delete>
  44:	add	x0, x0, #0x0
  48:	add	x1, x1, #0x0
  4c:	add	x3, x3, #0x0
  50:	mov	w2, #0x38                  	// #56
  54:	bl	0 <__assert_fail>

0000000000000058 <lt__slist_remove>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	str	x21, [sp, #16]
  60:	stp	x20, x19, [sp, #32]
  64:	mov	x29, sp
  68:	cbz	x1, e4 <lt__slist_remove+0x8c>
  6c:	mov	x21, x0
  70:	cbz	x0, 98 <lt__slist_remove+0x40>
  74:	ldr	x0, [x21]
  78:	cbz	x0, 9c <lt__slist_remove+0x44>
  7c:	mov	x20, x1
  80:	mov	x1, x2
  84:	mov	x19, x2
  88:	blr	x20
  8c:	cbz	x0, ac <lt__slist_remove+0x54>
  90:	ldr	x8, [x21]
  94:	b	cc <lt__slist_remove+0x74>
  98:	mov	x0, xzr
  9c:	ldp	x20, x19, [sp, #32]
  a0:	ldr	x21, [sp, #16]
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret
  ac:	ldr	x8, [x21]
  b0:	ldr	x0, [x8]
  b4:	cbz	x0, 9c <lt__slist_remove+0x44>
  b8:	mov	x1, x19
  bc:	mov	x21, x8
  c0:	blr	x20
  c4:	ldr	x8, [x21]
  c8:	cbz	x0, b0 <lt__slist_remove+0x58>
  cc:	ldr	x8, [x8]
  d0:	str	x8, [x21]
  d4:	ldp	x20, x19, [sp, #32]
  d8:	ldr	x21, [sp, #16]
  dc:	ldp	x29, x30, [sp], #48
  e0:	ret
  e4:	adrp	x0, 0 <lt__slist_delete>
  e8:	adrp	x1, 0 <lt__slist_delete>
  ec:	adrp	x3, 0 <lt__slist_delete>
  f0:	add	x0, x0, #0x0
  f4:	add	x1, x1, #0x0
  f8:	add	x3, x3, #0x0
  fc:	mov	w2, #0x53                  	// #83
 100:	bl	0 <__assert_fail>

0000000000000104 <lt__slist_find>:
 104:	stp	x29, x30, [sp, #-48]!
 108:	str	x21, [sp, #16]
 10c:	stp	x20, x19, [sp, #32]
 110:	mov	x29, sp
 114:	cbz	x1, 154 <lt__slist_find+0x50>
 118:	mov	x21, x0
 11c:	cbz	x0, 140 <lt__slist_find+0x3c>
 120:	mov	x19, x2
 124:	mov	x20, x1
 128:	mov	x0, x21
 12c:	mov	x1, x19
 130:	blr	x20
 134:	cbnz	x0, 144 <lt__slist_find+0x40>
 138:	ldr	x21, [x21]
 13c:	cbnz	x21, 128 <lt__slist_find+0x24>
 140:	mov	x0, xzr
 144:	ldp	x20, x19, [sp, #32]
 148:	ldr	x21, [sp, #16]
 14c:	ldp	x29, x30, [sp], #48
 150:	ret
 154:	adrp	x0, 0 <lt__slist_delete>
 158:	adrp	x1, 0 <lt__slist_delete>
 15c:	adrp	x3, 0 <lt__slist_delete>
 160:	add	x0, x0, #0x0
 164:	add	x1, x1, #0x0
 168:	add	x3, x3, #0x0
 16c:	mov	w2, #0x7a                  	// #122
 170:	bl	0 <__assert_fail>

0000000000000174 <lt__slist_concat>:
 174:	cbz	x0, 190 <lt__slist_concat+0x1c>
 178:	mov	x9, x0
 17c:	mov	x8, x9
 180:	ldr	x9, [x9]
 184:	cbnz	x9, 17c <lt__slist_concat+0x8>
 188:	str	x1, [x8]
 18c:	ret
 190:	mov	x0, x1
 194:	ret

0000000000000198 <lt__slist_cons>:
 198:	stp	x29, x30, [sp, #-16]!
 19c:	mov	x29, sp
 1a0:	cbz	x0, 1b8 <lt__slist_cons+0x20>
 1a4:	ldr	x8, [x0]
 1a8:	cbnz	x8, 1c4 <lt__slist_cons+0x2c>
 1ac:	str	x1, [x0]
 1b0:	ldp	x29, x30, [sp], #16
 1b4:	ret
 1b8:	mov	x0, x1
 1bc:	ldp	x29, x30, [sp], #16
 1c0:	ret
 1c4:	adrp	x0, 0 <lt__slist_delete>
 1c8:	adrp	x1, 0 <lt__slist_delete>
 1cc:	adrp	x3, 0 <lt__slist_delete>
 1d0:	add	x0, x0, #0x0
 1d4:	add	x1, x1, #0x0
 1d8:	add	x3, x3, #0x0
 1dc:	mov	w2, #0xaf                  	// #175
 1e0:	bl	0 <__assert_fail>

00000000000001e4 <lt__slist_tail>:
 1e4:	cbz	x0, 1ec <lt__slist_tail+0x8>
 1e8:	ldr	x0, [x0]
 1ec:	ret

00000000000001f0 <lt__slist_nth>:
 1f0:	cbz	x0, 210 <lt__slist_nth+0x20>
 1f4:	cmp	x1, #0x2
 1f8:	b.cc	210 <lt__slist_nth+0x20>  // b.lo, b.ul, b.last
 1fc:	sub	x8, x1, #0x1
 200:	ldr	x0, [x0]
 204:	subs	x8, x8, #0x1
 208:	cbz	x0, 210 <lt__slist_nth+0x20>
 20c:	b.hi	200 <lt__slist_nth+0x10>  // b.pmore
 210:	ret

0000000000000214 <lt__slist_length>:
 214:	mov	x8, xzr
 218:	cbz	x0, 228 <lt__slist_length+0x14>
 21c:	ldr	x0, [x0]
 220:	add	x8, x8, #0x1
 224:	cbnz	x0, 21c <lt__slist_length+0x8>
 228:	mov	x0, x8
 22c:	ret

0000000000000230 <lt__slist_reverse>:
 230:	cbz	x0, 254 <lt__slist_reverse+0x24>
 234:	mov	x9, xzr
 238:	mov	x8, x0
 23c:	ldr	x0, [x0]
 240:	str	x9, [x8]
 244:	mov	x9, x8
 248:	cbnz	x0, 238 <lt__slist_reverse+0x8>
 24c:	mov	x0, x8
 250:	ret
 254:	mov	x0, xzr
 258:	ret

000000000000025c <lt__slist_foreach>:
 25c:	stp	x29, x30, [sp, #-48]!
 260:	str	x21, [sp, #16]
 264:	stp	x20, x19, [sp, #32]
 268:	mov	x29, sp
 26c:	cbz	x1, 2b0 <lt__slist_foreach+0x54>
 270:	mov	x19, x2
 274:	mov	x20, x1
 278:	cbz	x0, 298 <lt__slist_foreach+0x3c>
 27c:	ldr	x21, [x0]
 280:	mov	x1, x19
 284:	blr	x20
 288:	mov	x8, x0
 28c:	mov	x0, x21
 290:	cbz	x8, 278 <lt__slist_foreach+0x1c>
 294:	b	29c <lt__slist_foreach+0x40>
 298:	mov	x8, xzr
 29c:	ldp	x20, x19, [sp, #32]
 2a0:	ldr	x21, [sp, #16]
 2a4:	mov	x0, x8
 2a8:	ldp	x29, x30, [sp], #48
 2ac:	ret
 2b0:	adrp	x0, 0 <lt__slist_delete>
 2b4:	adrp	x1, 0 <lt__slist_delete>
 2b8:	adrp	x3, 0 <lt__slist_delete>
 2bc:	add	x0, x0, #0x0
 2c0:	add	x1, x1, #0x0
 2c4:	add	x3, x3, #0x0
 2c8:	mov	w2, #0xf6                  	// #246
 2cc:	bl	0 <__assert_fail>

00000000000002d0 <lt__slist_sort>:
 2d0:	stp	x29, x30, [sp, #-64]!
 2d4:	str	x23, [sp, #16]
 2d8:	stp	x22, x21, [sp, #32]
 2dc:	stp	x20, x19, [sp, #48]
 2e0:	mov	x29, sp
 2e4:	cbz	x0, 3dc <lt__slist_sort+0x10c>
 2e8:	ldr	x22, [x0]
 2ec:	cbz	x22, 3dc <lt__slist_sort+0x10c>
 2f0:	ldr	x9, [x22]
 2f4:	mov	x19, x2
 2f8:	mov	x20, x1
 2fc:	mov	x8, x0
 300:	cbz	x9, 320 <lt__slist_sort+0x50>
 304:	mov	x8, x0
 308:	ldr	x9, [x9]
 30c:	cbz	x9, 31c <lt__slist_sort+0x4c>
 310:	ldr	x9, [x9]
 314:	ldr	x8, [x8]
 318:	cbnz	x9, 308 <lt__slist_sort+0x38>
 31c:	ldr	x22, [x8]
 320:	mov	x1, x20
 324:	mov	x2, x19
 328:	str	xzr, [x8]
 32c:	bl	2d0 <lt__slist_sort>
 330:	mov	x21, x0
 334:	mov	x0, x22
 338:	mov	x1, x20
 33c:	mov	x2, x19
 340:	bl	2d0 <lt__slist_sort>
 344:	cmp	x21, #0x0
 348:	mov	x22, x0
 34c:	add	x23, x29, #0x18
 350:	cset	w10, ne  // ne = any
 354:	cbz	x21, 3c4 <lt__slist_sort+0xf4>
 358:	cbz	x22, 3c4 <lt__slist_sort+0xf4>
 35c:	add	x23, x29, #0x18
 360:	mov	x0, x21
 364:	mov	x1, x22
 368:	mov	x2, x19
 36c:	blr	x20
 370:	cmp	w0, #0x0
 374:	b.le	398 <lt__slist_sort+0xc8>
 378:	str	x22, [x23]
 37c:	ldr	x8, [x22]
 380:	mov	x9, x21
 384:	mov	x23, x22
 388:	cmp	x9, #0x0
 38c:	cset	w10, ne  // ne = any
 390:	cbnz	x8, 3b4 <lt__slist_sort+0xe4>
 394:	b	3cc <lt__slist_sort+0xfc>
 398:	str	x21, [x23]
 39c:	ldr	x9, [x21]
 3a0:	mov	x8, x22
 3a4:	mov	x23, x21
 3a8:	cmp	x9, #0x0
 3ac:	cset	w10, ne  // ne = any
 3b0:	cbz	x8, 3cc <lt__slist_sort+0xfc>
 3b4:	mov	x21, x9
 3b8:	mov	x22, x8
 3bc:	cbnz	x9, 360 <lt__slist_sort+0x90>
 3c0:	b	3cc <lt__slist_sort+0xfc>
 3c4:	mov	x8, x22
 3c8:	mov	x9, x21
 3cc:	cmp	w10, #0x0
 3d0:	csel	x8, x9, x8, ne  // ne = any
 3d4:	str	x8, [x23]
 3d8:	ldr	x0, [x29, #24]
 3dc:	ldp	x20, x19, [sp, #48]
 3e0:	ldp	x22, x21, [sp, #32]
 3e4:	ldr	x23, [sp, #16]
 3e8:	ldp	x29, x30, [sp], #64
 3ec:	ret

00000000000003f0 <lt__slist_box>:
 3f0:	stp	x29, x30, [sp, #-32]!
 3f4:	str	x19, [sp, #16]
 3f8:	mov	x19, x0
 3fc:	mov	w0, #0x10                  	// #16
 400:	mov	x29, sp
 404:	bl	0 <malloc>
 408:	cbz	x0, 410 <lt__slist_box+0x20>
 40c:	stp	xzr, x19, [x0]
 410:	ldr	x19, [sp, #16]
 414:	ldp	x29, x30, [sp], #32
 418:	ret

000000000000041c <lt__slist_unbox>:
 41c:	stp	x29, x30, [sp, #-32]!
 420:	str	x19, [sp, #16]
 424:	mov	x29, sp
 428:	cbz	x0, 444 <lt__slist_unbox+0x28>
 42c:	ldr	x19, [x0, #8]
 430:	bl	0 <free>
 434:	mov	x0, x19
 438:	ldr	x19, [sp, #16]
 43c:	ldp	x29, x30, [sp], #32
 440:	ret
 444:	mov	x19, xzr
 448:	mov	x0, x19
 44c:	ldr	x19, [sp, #16]
 450:	ldp	x29, x30, [sp], #32
 454:	ret

lt__strl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_strlcat>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	str	x21, [sp, #16]
   8:	stp	x20, x19, [sp, #32]
   c:	mov	x29, sp
  10:	cbz	x0, 84 <lt_strlcat+0x84>
  14:	mov	x19, x1
  18:	cbz	x1, a4 <lt_strlcat+0xa4>
  1c:	mov	x21, x2
  20:	cbz	x2, c4 <lt_strlcat+0xc4>
  24:	mov	x20, x0
  28:	bl	0 <strlen>
  2c:	sub	x8, x21, #0x1
  30:	cmp	x0, x8
  34:	b.cs	58 <lt_strlcat+0x58>  // b.hs, b.nlast
  38:	ldrb	w9, [x19]
  3c:	cbz	w9, 58 <lt_strlcat+0x58>
  40:	strb	w9, [x20, x0]
  44:	ldrb	w9, [x19, #1]!
  48:	add	x0, x0, #0x1
  4c:	cmp	x0, x8
  50:	b.cs	58 <lt_strlcat+0x58>  // b.hs, b.nlast
  54:	cbnz	w9, 40 <lt_strlcat+0x40>
  58:	strb	wzr, [x20, x0]
  5c:	ldrb	w8, [x19]
  60:	cbz	w8, 74 <lt_strlcat+0x74>
  64:	add	x8, x19, #0x1
  68:	ldrb	w9, [x8], #1
  6c:	add	x0, x0, #0x1
  70:	cbnz	w9, 68 <lt_strlcat+0x68>
  74:	ldp	x20, x19, [sp, #32]
  78:	ldr	x21, [sp, #16]
  7c:	ldp	x29, x30, [sp], #48
  80:	ret
  84:	adrp	x0, 0 <lt_strlcat>
  88:	adrp	x1, 0 <lt_strlcat>
  8c:	adrp	x3, 0 <lt_strlcat>
  90:	add	x0, x0, #0x0
  94:	add	x1, x1, #0x0
  98:	add	x3, x3, #0x0
  9c:	mov	w2, #0x39                  	// #57
  a0:	bl	0 <__assert_fail>
  a4:	adrp	x0, 0 <lt_strlcat>
  a8:	adrp	x1, 0 <lt_strlcat>
  ac:	adrp	x3, 0 <lt_strlcat>
  b0:	add	x0, x0, #0x0
  b4:	add	x1, x1, #0x0
  b8:	add	x3, x3, #0x0
  bc:	mov	w2, #0x3a                  	// #58
  c0:	bl	0 <__assert_fail>
  c4:	adrp	x0, 0 <lt_strlcat>
  c8:	adrp	x1, 0 <lt_strlcat>
  cc:	adrp	x3, 0 <lt_strlcat>
  d0:	add	x0, x0, #0x0
  d4:	add	x1, x1, #0x0
  d8:	add	x3, x3, #0x0
  dc:	mov	w2, #0x3b                  	// #59
  e0:	bl	0 <__assert_fail>

00000000000000e4 <lt_strlcpy>:
  e4:	stp	x29, x30, [sp, #-16]!
  e8:	mov	x29, sp
  ec:	cbz	x0, 15c <lt_strlcpy+0x78>
  f0:	cbz	x1, 17c <lt_strlcpy+0x98>
  f4:	cbz	x2, 19c <lt_strlcpy+0xb8>
  f8:	mov	x8, x0
  fc:	subs	x9, x2, #0x1
 100:	mov	x0, xzr
 104:	b.eq	138 <lt_strlcpy+0x54>  // b.none
 108:	ldrb	w10, [x1]
 10c:	cbz	w10, 138 <lt_strlcpy+0x54>
 110:	mov	x11, xzr
 114:	add	x0, x11, #0x1
 118:	cmp	x0, x9
 11c:	strb	w10, [x8, x11]
 120:	b.cs	134 <lt_strlcpy+0x50>  // b.hs, b.nlast
 124:	add	x10, x1, x11
 128:	ldrb	w10, [x10, #1]
 12c:	mov	x11, x0
 130:	cbnz	w10, 114 <lt_strlcpy+0x30>
 134:	add	x1, x1, x0
 138:	strb	wzr, [x8, x0]
 13c:	ldrb	w8, [x1]
 140:	cbz	w8, 154 <lt_strlcpy+0x70>
 144:	add	x8, x1, #0x1
 148:	ldrb	w9, [x8], #1
 14c:	add	x0, x0, #0x1
 150:	cbnz	w9, 148 <lt_strlcpy+0x64>
 154:	ldp	x29, x30, [sp], #16
 158:	ret
 15c:	adrp	x0, 0 <lt_strlcat>
 160:	adrp	x1, 0 <lt_strlcat>
 164:	adrp	x3, 0 <lt_strlcat>
 168:	add	x0, x0, #0x0
 16c:	add	x1, x1, #0x0
 170:	add	x3, x3, #0x0
 174:	mov	w2, #0x69                  	// #105
 178:	bl	0 <__assert_fail>
 17c:	adrp	x0, 0 <lt_strlcat>
 180:	adrp	x1, 0 <lt_strlcat>
 184:	adrp	x3, 0 <lt_strlcat>
 188:	add	x0, x0, #0x0
 18c:	add	x1, x1, #0x0
 190:	add	x3, x3, #0x0
 194:	mov	w2, #0x6a                  	// #106
 198:	bl	0 <__assert_fail>
 19c:	adrp	x0, 0 <lt_strlcat>
 1a0:	adrp	x1, 0 <lt_strlcat>
 1a4:	adrp	x3, 0 <lt_strlcat>
 1a8:	add	x0, x0, #0x0
 1ac:	add	x1, x1, #0x0
 1b0:	add	x3, x3, #0x0
 1b4:	mov	w2, #0x6b                  	// #107
 1b8:	bl	0 <__assert_fail>

libltdlS.o:     file format elf64-littleaarch64


dlopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <dlopen_LTX_get_vtable>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	adrp	x20, 0 <dlopen_LTX_get_vtable>
   c:	ldr	x8, [x20]
  10:	mov	x19, x0
  14:	mov	x29, sp
  18:	cbnz	x8, 30 <dlopen_LTX_get_vtable+0x30>
  1c:	mov	w0, #0x48                  	// #72
  20:	bl	0 <lt__zalloc>
  24:	mov	x8, x0
  28:	str	x0, [x20]
  2c:	cbz	x0, 54 <dlopen_LTX_get_vtable+0x54>
  30:	ldr	x9, [x8]
  34:	cbz	x9, 64 <dlopen_LTX_get_vtable+0x64>
  38:	ldr	x9, [x8, #56]
  3c:	cmp	x9, x19
  40:	b.eq	54 <dlopen_LTX_get_vtable+0x54>  // b.none
  44:	mov	w0, #0x3                   	// #3
  48:	bl	0 <lt__error_string>
  4c:	bl	0 <lt__set_last_error>
  50:	mov	x8, xzr
  54:	ldp	x20, x19, [sp, #16]
  58:	mov	x0, x8
  5c:	ldp	x29, x30, [sp], #32
  60:	ret
  64:	adrp	x9, 0 <dlopen_LTX_get_vtable>
  68:	adrp	x10, 0 <dlopen_LTX_get_vtable>
  6c:	adrp	x11, 0 <dlopen_LTX_get_vtable>
  70:	adrp	x12, 0 <dlopen_LTX_get_vtable>
  74:	adrp	x13, 0 <dlopen_LTX_get_vtable>
  78:	add	x9, x9, #0x0
  7c:	add	x10, x10, #0x0
  80:	add	x11, x11, #0x0
  84:	add	x12, x12, #0x0
  88:	add	x13, x13, #0x0
  8c:	str	x9, [x8]
  90:	stp	x10, x11, [x8, #16]
  94:	str	x12, [x8, #32]
  98:	stp	x13, x19, [x8, #48]
  9c:	str	wzr, [x8, #64]
  a0:	ldp	x20, x19, [sp, #16]
  a4:	mov	x0, x8
  a8:	ldp	x29, x30, [sp], #32
  ac:	ret

00000000000000b0 <vm_open>:
  b0:	stp	x29, x30, [sp, #-32]!
  b4:	mov	x0, x1
  b8:	str	x19, [sp, #16]
  bc:	mov	x29, sp
  c0:	cbz	x2, f0 <vm_open+0x40>
  c4:	ldrb	w8, [x2]
  c8:	tst	w8, #0x4
  cc:	mov	w8, #0x101                 	// #257
  d0:	csinc	w1, w8, wzr, ne  // ne = any
  d4:	bl	0 <dlopen>
  d8:	mov	x19, x0
  dc:	cbz	x0, 100 <vm_open+0x50>
  e0:	mov	x0, x19
  e4:	ldr	x19, [sp, #16]
  e8:	ldp	x29, x30, [sp], #32
  ec:	ret
  f0:	mov	w1, #0x1                   	// #1
  f4:	bl	0 <dlopen>
  f8:	mov	x19, x0
  fc:	cbnz	x0, e0 <vm_open+0x30>
 100:	bl	0 <dlerror>
 104:	bl	0 <lt__set_last_error>
 108:	mov	x0, x19
 10c:	ldr	x19, [sp, #16]
 110:	ldp	x29, x30, [sp], #32
 114:	ret

0000000000000118 <vm_close>:
 118:	stp	x29, x30, [sp, #-16]!
 11c:	mov	x0, x1
 120:	mov	x29, sp
 124:	bl	0 <dlclose>
 128:	cbz	w0, 138 <vm_close+0x20>
 12c:	bl	0 <dlerror>
 130:	bl	0 <lt__set_last_error>
 134:	mov	w0, #0x1                   	// #1
 138:	ldp	x29, x30, [sp], #16
 13c:	ret

0000000000000140 <vm_sym>:
 140:	stp	x29, x30, [sp, #-32]!
 144:	mov	x0, x1
 148:	mov	x1, x2
 14c:	str	x19, [sp, #16]
 150:	mov	x29, sp
 154:	bl	0 <dlsym>
 158:	mov	x19, x0
 15c:	cbz	x0, 170 <vm_sym+0x30>
 160:	mov	x0, x19
 164:	ldr	x19, [sp, #16]
 168:	ldp	x29, x30, [sp], #32
 16c:	ret
 170:	bl	0 <dlerror>
 174:	bl	0 <lt__set_last_error>
 178:	mov	x0, x19
 17c:	ldr	x19, [sp, #16]
 180:	ldp	x29, x30, [sp], #32
 184:	ret

0000000000000188 <vl_exit>:
 188:	adrp	x8, 0 <dlopen_LTX_get_vtable>
 18c:	mov	w0, wzr
 190:	str	xzr, [x8]
 194:	ret
