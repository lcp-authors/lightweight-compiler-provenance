In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libltdl.a_gcc_-O2:

libltdl_libltdl_la-preopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <vm_close>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

0000000000000008 <vl_exit>:
   8:	stp	x29, x30, [sp, #-32]!
   c:	adrp	x0, 0 <vm_close>
  10:	mov	x29, sp
  14:	stp	x19, x20, [sp, #16]
  18:	add	x20, x0, #0x0
  1c:	str	xzr, [x0]
  20:	ldr	x19, [x20, #8]
  24:	cbz	x19, 38 <vl_exit+0x30>
  28:	mov	x0, x19
  2c:	ldr	x19, [x19]
  30:	bl	0 <free>
  34:	cbnz	x19, 28 <vl_exit+0x20>
  38:	mov	w0, #0x0                   	// #0
  3c:	str	xzr, [x20, #8]
  40:	ldp	x19, x20, [sp, #16]
  44:	ldp	x29, x30, [sp], #32
  48:	ret
  4c:	nop

0000000000000050 <vm_sym>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	x29, sp
  58:	ldr	x0, [x1, #16]
  5c:	stp	x19, x20, [sp, #16]
  60:	mov	x19, x1
  64:	mov	x20, x2
  68:	cbz	x0, 84 <vm_sym+0x34>
  6c:	adrp	x1, 0 <vm_close>
  70:	add	x1, x1, #0x0
  74:	bl	0 <strcmp>
  78:	cmp	w0, #0x0
  7c:	add	x1, x19, #0x10
  80:	csel	x19, x1, x19, eq  // eq = none
  84:	ldr	x0, [x19, #32]
  88:	add	x19, x19, #0x20
  8c:	cbnz	x0, 9c <vm_sym+0x4c>
  90:	b	b8 <vm_sym+0x68>
  94:	ldr	x0, [x19, #16]!
  98:	cbz	x0, b8 <vm_sym+0x68>
  9c:	mov	x1, x20
  a0:	bl	0 <strcmp>
  a4:	cbnz	w0, 94 <vm_sym+0x44>
  a8:	ldr	x0, [x19, #8]
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret
  b8:	mov	w0, #0xa                   	// #10
  bc:	bl	0 <lt__error_string>
  c0:	bl	0 <lt__set_last_error>
  c4:	mov	x0, #0x0                   	// #0
  c8:	ldp	x19, x20, [sp, #16]
  cc:	ldp	x29, x30, [sp], #32
  d0:	ret
  d4:	nop

00000000000000d8 <vm_open>:
  d8:	stp	x29, x30, [sp, #-64]!
  dc:	adrp	x0, 0 <vm_close>
  e0:	mov	x29, sp
  e4:	stp	x21, x22, [sp, #32]
  e8:	ldr	x22, [x0]
  ec:	str	x23, [sp, #48]
  f0:	cbz	x22, 178 <vm_open+0xa0>
  f4:	cmp	x1, #0x0
  f8:	adrp	x0, 0 <vm_close>
  fc:	add	x0, x0, #0x0
 100:	stp	x19, x20, [sp, #16]
 104:	csel	x21, x0, x1, eq  // eq = none
 108:	ldr	x23, [x22, #8]
 10c:	ldr	x20, [x23]
 110:	cbz	x20, 148 <vm_open+0x70>
 114:	mov	x19, x23
 118:	b	124 <vm_open+0x4c>
 11c:	add	x19, x19, #0x10
 120:	cbz	x20, 148 <vm_open+0x70>
 124:	mov	x0, x20
 128:	ldp	x2, x20, [x19, #8]
 12c:	cbnz	x2, 11c <vm_open+0x44>
 130:	mov	x1, x21
 134:	bl	0 <strcmp>
 138:	cbnz	w0, 11c <vm_open+0x44>
 13c:	ldr	x0, [x19, #24]
 140:	cbz	x0, 11c <vm_open+0x44>
 144:	cbnz	x20, 160 <vm_open+0x88>
 148:	ldr	x22, [x22]
 14c:	cbnz	x22, 108 <vm_open+0x30>
 150:	mov	x23, #0x0                   	// #0
 154:	mov	w0, #0x5                   	// #5
 158:	bl	0 <lt__error_string>
 15c:	bl	0 <lt__set_last_error>
 160:	ldp	x19, x20, [sp, #16]
 164:	mov	x0, x23
 168:	ldp	x21, x22, [sp, #32]
 16c:	ldr	x23, [sp, #48]
 170:	ldp	x29, x30, [sp], #64
 174:	ret
 178:	mov	x23, #0x0                   	// #0
 17c:	mov	w0, #0x7                   	// #7
 180:	bl	0 <lt__error_string>
 184:	bl	0 <lt__set_last_error>
 188:	b	164 <vm_open+0x8c>
 18c:	nop

0000000000000190 <preopen_LTX_get_vtable>:
 190:	stp	x29, x30, [sp, #-48]!
 194:	mov	x29, sp
 198:	stp	x19, x20, [sp, #16]
 19c:	adrp	x20, 0 <vm_close>
 1a0:	mov	x19, x0
 1a4:	str	x0, [sp, #40]
 1a8:	ldr	x0, [x20]
 1ac:	cbz	x0, 220 <preopen_LTX_get_vtable+0x90>
 1b0:	ldr	x1, [x0]
 1b4:	cbz	x1, 1d0 <preopen_LTX_get_vtable+0x40>
 1b8:	ldr	x1, [x0, #56]
 1bc:	cmp	x1, x19
 1c0:	b.ne	23c <preopen_LTX_get_vtable+0xac>  // b.any
 1c4:	ldp	x19, x20, [sp, #16]
 1c8:	ldp	x29, x30, [sp], #48
 1cc:	ret
 1d0:	adrp	x6, 0 <vm_close>
 1d4:	adrp	x5, 0 <vm_close>
 1d8:	add	x6, x6, #0x0
 1dc:	add	x5, x5, #0x0
 1e0:	adrp	x4, 0 <vm_close>
 1e4:	adrp	x3, 0 <vm_close>
 1e8:	add	x4, x4, #0x0
 1ec:	add	x3, x3, #0x0
 1f0:	adrp	x2, 0 <vm_close>
 1f4:	adrp	x1, 0 <vm_close>
 1f8:	add	x2, x2, #0x0
 1fc:	add	x1, x1, #0x0
 200:	stp	x6, xzr, [x0]
 204:	stp	x5, x4, [x0, #16]
 208:	stp	x3, x2, [x0, #32]
 20c:	stp	x1, x19, [x0, #48]
 210:	str	wzr, [x0, #64]
 214:	ldp	x19, x20, [sp, #16]
 218:	ldp	x29, x30, [sp], #48
 21c:	ret
 220:	mov	x0, #0x48                  	// #72
 224:	bl	0 <lt__zalloc>
 228:	str	x0, [x20]
 22c:	cbnz	x0, 1b0 <preopen_LTX_get_vtable+0x20>
 230:	ldp	x19, x20, [sp, #16]
 234:	ldp	x29, x30, [sp], #48
 238:	ret
 23c:	mov	w0, #0x3                   	// #3
 240:	bl	0 <lt__error_string>
 244:	bl	0 <lt__set_last_error>
 248:	mov	x0, #0x0                   	// #0
 24c:	ldp	x19, x20, [sp, #16]
 250:	ldp	x29, x30, [sp], #48
 254:	ret

0000000000000258 <lt_dlpreload_default>:
 258:	adrp	x1, 0 <vm_close>
 25c:	mov	x2, x0
 260:	mov	w0, #0x0                   	// #0
 264:	str	x2, [x1]
 268:	ret
 26c:	nop

0000000000000270 <lt_dlpreload>:
 270:	stp	x29, x30, [sp, #-64]!
 274:	mov	x29, sp
 278:	str	x21, [sp, #32]
 27c:	adrp	x21, 0 <vm_close>
 280:	add	x21, x21, #0x0
 284:	stp	x19, x20, [sp, #16]
 288:	ldr	x19, [x21, #8]
 28c:	cbnz	x0, 2fc <lt_dlpreload+0x8c>
 290:	cbz	x19, 2a8 <lt_dlpreload+0x38>
 294:	nop
 298:	mov	x0, x19
 29c:	ldr	x19, [x19]
 2a0:	bl	0 <free>
 2a4:	cbnz	x19, 298 <lt_dlpreload+0x28>
 2a8:	ldr	x20, [x21, #16]
 2ac:	str	xzr, [x21, #8]
 2b0:	cbz	x20, 31c <lt_dlpreload+0xac>
 2b4:	mov	x0, #0x10                  	// #16
 2b8:	bl	0 <lt__zalloc>
 2bc:	mov	x1, x0
 2c0:	cbz	x0, 330 <lt_dlpreload+0xc0>
 2c4:	ldr	x0, [x20, #16]
 2c8:	ldr	x2, [x21, #8]
 2cc:	stp	x2, x20, [x1]
 2d0:	str	x1, [x21, #8]
 2d4:	cbz	x0, 31c <lt_dlpreload+0xac>
 2d8:	adrp	x1, 0 <vm_close>
 2dc:	add	x1, x1, #0x0
 2e0:	bl	0 <strcmp>
 2e4:	str	w0, [sp, #60]
 2e8:	cbnz	w0, 31c <lt_dlpreload+0xac>
 2ec:	ldr	x1, [x20, #24]
 2f0:	blr	x1
 2f4:	ldr	w0, [sp, #60]
 2f8:	b	320 <lt_dlpreload+0xb0>
 2fc:	mov	x20, x0
 300:	cbnz	x19, 310 <lt_dlpreload+0xa0>
 304:	b	2b4 <lt_dlpreload+0x44>
 308:	ldr	x19, [x19]
 30c:	cbz	x19, 2b4 <lt_dlpreload+0x44>
 310:	ldr	x0, [x19, #8]
 314:	cmp	x20, x0
 318:	b.ne	308 <lt_dlpreload+0x98>  // b.any
 31c:	mov	w0, #0x0                   	// #0
 320:	ldp	x19, x20, [sp, #16]
 324:	ldr	x21, [sp, #32]
 328:	ldp	x29, x30, [sp], #64
 32c:	ret
 330:	mov	w0, #0x1                   	// #1
 334:	b	320 <lt_dlpreload+0xb0>

0000000000000338 <vl_init>:
 338:	adrp	x1, 0 <vm_close>
 33c:	add	x1, x1, #0x0
 340:	ldr	x0, [x1, #16]
 344:	str	xzr, [x1, #8]
 348:	cbz	x0, 350 <vl_init+0x18>
 34c:	b	270 <lt_dlpreload>
 350:	mov	w0, #0x0                   	// #0
 354:	ret

0000000000000358 <lt_dlpreload_open>:
 358:	stp	x29, x30, [sp, #-96]!
 35c:	adrp	x2, 0 <vm_close>
 360:	mov	x29, sp
 364:	stp	x21, x22, [sp, #32]
 368:	ldr	x22, [x2]
 36c:	stp	x25, x26, [sp, #64]
 370:	cbz	x22, 488 <lt_dlpreload_open+0x130>
 374:	mov	w25, #0x0                   	// #0
 378:	mov	w26, #0x0                   	// #0
 37c:	stp	x19, x20, [sp, #16]
 380:	stp	x23, x24, [sp, #48]
 384:	adrp	x24, 0 <vm_close>
 388:	mov	x23, x0
 38c:	add	x24, x24, #0x0
 390:	str	x27, [sp, #80]
 394:	mov	x27, x1
 398:	b	3b0 <lt_dlpreload_open+0x58>
 39c:	mov	x1, x23
 3a0:	bl	0 <strcmp>
 3a4:	cbz	w0, 3c8 <lt_dlpreload_open+0x70>
 3a8:	ldr	x22, [x22]
 3ac:	cbz	x22, 428 <lt_dlpreload_open+0xd0>
 3b0:	ldr	x19, [x22, #8]
 3b4:	ldr	x0, [x19]
 3b8:	cbnz	x23, 39c <lt_dlpreload_open+0x44>
 3bc:	mov	x1, x24
 3c0:	bl	0 <strcmp>
 3c4:	cbnz	w0, 3a8 <lt_dlpreload_open+0x50>
 3c8:	ldr	x21, [x19, #16]
 3cc:	add	w25, w25, #0x1
 3d0:	add	x0, x19, #0x10
 3d4:	cbz	x21, 3a8 <lt_dlpreload_open+0x50>
 3d8:	mov	w20, #0x1                   	// #1
 3dc:	b	3f4 <lt_dlpreload_open+0x9c>
 3e0:	add	w20, w20, #0x1
 3e4:	ubfiz	x2, x20, #4, #32
 3e8:	add	x0, x19, x2
 3ec:	ldr	x21, [x19, x2]
 3f0:	cbz	x21, 3a8 <lt_dlpreload_open+0x50>
 3f4:	ldr	x0, [x0, #8]
 3f8:	cbnz	x0, 3e0 <lt_dlpreload_open+0x88>
 3fc:	mov	x1, x24
 400:	mov	x0, x21
 404:	bl	0 <strcmp>
 408:	cbz	w0, 3e0 <lt_dlpreload_open+0x88>
 40c:	mov	x0, x21
 410:	bl	0 <lt_dlopen>
 414:	cbz	x0, 44c <lt_dlpreload_open+0xf4>
 418:	blr	x27
 41c:	add	w26, w26, w0
 420:	ldr	x19, [x22, #8]
 424:	b	3e0 <lt_dlpreload_open+0x88>
 428:	cbz	w25, 458 <lt_dlpreload_open+0x100>
 42c:	mov	w0, w26
 430:	ldp	x19, x20, [sp, #16]
 434:	ldp	x21, x22, [sp, #32]
 438:	ldp	x23, x24, [sp, #48]
 43c:	ldp	x25, x26, [sp, #64]
 440:	ldr	x27, [sp, #80]
 444:	ldp	x29, x30, [sp], #96
 448:	ret
 44c:	add	w26, w26, #0x1
 450:	ldr	x19, [x22, #8]
 454:	b	3e0 <lt_dlpreload_open+0x88>
 458:	ldp	x19, x20, [sp, #16]
 45c:	add	w26, w26, #0x1
 460:	ldp	x23, x24, [sp, #48]
 464:	ldr	x27, [sp, #80]
 468:	mov	w0, #0x8                   	// #8
 46c:	bl	0 <lt__error_string>
 470:	bl	0 <lt__set_last_error>
 474:	mov	w0, w26
 478:	ldp	x21, x22, [sp, #32]
 47c:	ldp	x25, x26, [sp, #64]
 480:	ldp	x29, x30, [sp], #96
 484:	ret
 488:	mov	w26, #0x1                   	// #1
 48c:	b	468 <lt_dlpreload_open+0x110>

libltdl_libltdl_la-lt__alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <alloc_die_default>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x3, 0 <stderr>
   8:	mov	x2, #0xf                   	// #15
   c:	mov	x29, sp
  10:	ldr	x3, [x3]
  14:	mov	x1, #0x1                   	// #1
  18:	adrp	x0, 0 <alloc_die_default>
  1c:	add	x0, x0, #0x0
  20:	bl	0 <fwrite>
  24:	mov	w0, #0x1                   	// #1
  28:	bl	0 <exit>
  2c:	nop

0000000000000030 <lt__malloc>:
  30:	stp	x29, x30, [sp, #-32]!
  34:	mov	x29, sp
  38:	bl	0 <malloc>
  3c:	cbz	x0, 48 <lt__malloc+0x18>
  40:	ldp	x29, x30, [sp], #32
  44:	ret
  48:	adrp	x1, 0 <alloc_die_default>
  4c:	str	x0, [sp, #24]
  50:	ldr	x1, [x1]
  54:	blr	x1
  58:	ldr	x0, [sp, #24]
  5c:	b	40 <lt__malloc+0x10>

0000000000000060 <lt__zalloc>:
  60:	stp	x29, x30, [sp, #-32]!
  64:	mov	x1, #0x1                   	// #1
  68:	mov	x29, sp
  6c:	bl	0 <calloc>
  70:	cbz	x0, 7c <lt__zalloc+0x1c>
  74:	ldp	x29, x30, [sp], #32
  78:	ret
  7c:	adrp	x1, 0 <alloc_die_default>
  80:	str	x0, [sp, #24]
  84:	ldr	x1, [x1]
  88:	blr	x1
  8c:	ldr	x0, [sp, #24]
  90:	b	74 <lt__zalloc+0x14>
  94:	nop

0000000000000098 <lt__realloc>:
  98:	stp	x29, x30, [sp, #-32]!
  9c:	mov	x29, sp
  a0:	bl	0 <realloc>
  a4:	cbz	x0, b0 <lt__realloc+0x18>
  a8:	ldp	x29, x30, [sp], #32
  ac:	ret
  b0:	adrp	x1, 0 <alloc_die_default>
  b4:	str	x0, [sp, #24]
  b8:	ldr	x1, [x1]
  bc:	blr	x1
  c0:	ldr	x0, [sp, #24]
  c4:	b	a8 <lt__realloc+0x10>

00000000000000c8 <lt__memdup>:
  c8:	stp	x29, x30, [sp, #-32]!
  cc:	mov	x29, sp
  d0:	stp	x19, x20, [sp, #16]
  d4:	mov	x20, x0
  d8:	mov	x19, x1
  dc:	mov	x0, x1
  e0:	bl	0 <malloc>
  e4:	cbz	x0, fc <lt__memdup+0x34>
  e8:	mov	x2, x19
  ec:	mov	x1, x20
  f0:	ldp	x19, x20, [sp, #16]
  f4:	ldp	x29, x30, [sp], #32
  f8:	b	0 <memcpy>
  fc:	adrp	x0, 0 <alloc_die_default>
 100:	ldr	x0, [x0]
 104:	blr	x0
 108:	mov	x0, #0x0                   	// #0
 10c:	ldp	x19, x20, [sp, #16]
 110:	ldp	x29, x30, [sp], #32
 114:	ret

0000000000000118 <lt__strdup>:
 118:	stp	x29, x30, [sp, #-32]!
 11c:	mov	x29, sp
 120:	str	x19, [sp, #16]
 124:	mov	x19, x0
 128:	bl	0 <strlen>
 12c:	mov	x1, x0
 130:	mov	x0, x19
 134:	add	x1, x1, #0x1
 138:	ldr	x19, [sp, #16]
 13c:	ldp	x29, x30, [sp], #32
 140:	b	c8 <lt__memdup>

libltdl_libltdl_la-lt_dlloader.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <loader_callback>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	x0, [x0, #8]
  14:	cbz	x0, 34 <loader_callback+0x34>
  18:	ldr	x0, [x0]
  1c:	bl	0 <strcmp>
  20:	cmp	w0, #0x0
  24:	csel	x0, x19, xzr, eq  // eq = none
  28:	ldr	x19, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret
  34:	adrp	x3, 0 <loader_callback>
  38:	adrp	x1, 0 <loader_callback>
  3c:	adrp	x0, 0 <loader_callback>
  40:	add	x3, x3, #0x0
  44:	add	x1, x1, #0x0
  48:	add	x0, x0, #0x0
  4c:	mov	w2, #0x36                  	// #54
  50:	bl	0 <__assert_fail>
  54:	nop

0000000000000058 <lt_dlloader_add>:
  58:	stp	x29, x30, [sp, #-32]!
  5c:	mov	x29, sp
  60:	cbz	x0, 94 <lt_dlloader_add+0x3c>
  64:	ldr	x1, [x0, #16]
  68:	str	x19, [sp, #16]
  6c:	mov	x19, x0
  70:	cbz	x1, 90 <lt_dlloader_add+0x38>
  74:	ldr	x1, [x0, #24]
  78:	cbz	x1, 90 <lt_dlloader_add+0x38>
  7c:	ldr	x1, [x0, #32]
  80:	cbz	x1, 90 <lt_dlloader_add+0x38>
  84:	ldr	w1, [x0, #64]
  88:	cmp	w1, #0x1
  8c:	b.ls	ac <lt_dlloader_add+0x54>  // b.plast
  90:	ldr	x19, [sp, #16]
  94:	mov	w0, #0x2                   	// #2
  98:	bl	0 <lt__error_string>
  9c:	bl	0 <lt__set_last_error>
  a0:	mov	w0, #0x1                   	// #1
  a4:	ldp	x29, x30, [sp], #32
  a8:	ret
  ac:	bl	0 <lt__slist_box>
  b0:	mov	x1, x0
  b4:	cbz	x0, 10c <lt_dlloader_add+0xb4>
  b8:	ldr	w2, [x19, #64]
  bc:	cbz	w2, ec <lt_dlloader_add+0x94>
  c0:	cmp	w2, #0x1
  c4:	b.ne	124 <lt_dlloader_add+0xcc>  // b.any
  c8:	adrp	x19, 0 <loader_callback>
  cc:	ldr	x0, [x19]
  d0:	bl	0 <lt__slist_concat>
  d4:	mov	x1, x0
  d8:	mov	w0, #0x0                   	// #0
  dc:	str	x1, [x19]
  e0:	ldr	x19, [sp, #16]
  e4:	ldp	x29, x30, [sp], #32
  e8:	ret
  ec:	adrp	x19, 0 <loader_callback>
  f0:	ldr	x1, [x19]
  f4:	bl	0 <lt__slist_cons>
  f8:	mov	x1, x0
  fc:	mov	w0, #0x0                   	// #0
 100:	str	x1, [x19]
 104:	ldr	x19, [sp, #16]
 108:	b	a4 <lt_dlloader_add+0x4c>
 10c:	adrp	x0, 0 <lt__alloc_die>
 110:	ldr	x0, [x0]
 114:	blr	x0
 118:	mov	w0, #0x1                   	// #1
 11c:	ldr	x19, [sp, #16]
 120:	b	a4 <lt_dlloader_add+0x4c>
 124:	adrp	x3, 0 <loader_callback>
 128:	add	x3, x3, #0x0
 12c:	adrp	x1, 0 <loader_callback>
 130:	adrp	x0, 0 <loader_callback>
 134:	add	x3, x3, #0x10
 138:	add	x1, x1, #0x0
 13c:	add	x0, x0, #0x0
 140:	mov	w2, #0x5e                  	// #94
 144:	bl	0 <__assert_fail>

0000000000000148 <lt_dlloader_next>:
 148:	cbz	x0, 154 <lt_dlloader_next+0xc>
 14c:	ldr	x0, [x0]
 150:	ret
 154:	adrp	x0, 0 <loader_callback>
 158:	ldr	x0, [x0]
 15c:	ret

0000000000000160 <lt_dlloader_get>:
 160:	cbz	x0, 16c <lt_dlloader_get+0xc>
 164:	ldr	x0, [x0, #8]
 168:	ret
 16c:	mov	x0, #0x0                   	// #0
 170:	ret
 174:	nop

0000000000000178 <lt_dlloader_remove>:
 178:	stp	x29, x30, [sp, #-96]!
 17c:	mov	x29, sp
 180:	stp	x23, x24, [sp, #48]
 184:	adrp	x23, 0 <loader_callback>
 188:	stp	x21, x22, [sp, #32]
 18c:	mov	x21, x0
 190:	adrp	x22, 0 <loader_callback>
 194:	ldr	x0, [x23]
 198:	add	x22, x22, #0x0
 19c:	mov	x2, x21
 1a0:	mov	x1, x22
 1a4:	bl	0 <lt__slist_find>
 1a8:	cbz	x0, 274 <lt_dlloader_remove+0xfc>
 1ac:	stp	x19, x20, [sp, #16]
 1b0:	ldr	x20, [x0, #8]
 1b4:	cbz	x20, 270 <lt_dlloader_remove+0xf8>
 1b8:	adrp	x0, 0 <loader_callback>
 1bc:	add	x0, x0, #0x0
 1c0:	mov	x1, #0x0                   	// #0
 1c4:	add	x0, x0, #0x20
 1c8:	str	x25, [sp, #64]
 1cc:	bl	0 <lt_dlinterface_register>
 1d0:	mov	x19, x0
 1d4:	mov	w24, #0x0                   	// #0
 1d8:	mov	w25, #0x0                   	// #0
 1dc:	mov	x1, #0x0                   	// #0
 1e0:	mov	x0, x19
 1e4:	bl	0 <lt_dlhandle_iterate>
 1e8:	mov	x1, x0
 1ec:	cbz	x0, 228 <lt_dlloader_remove+0xb0>
 1f0:	ldr	x2, [x1, #8]
 1f4:	cmp	x2, x20
 1f8:	b.ne	1e0 <lt_dlloader_remove+0x68>  // b.any
 1fc:	str	x1, [sp, #88]
 200:	bl	0 <lt_dlisresident>
 204:	ldr	x1, [sp, #88]
 208:	cmp	w0, #0x0
 20c:	mov	w24, #0x1                   	// #1
 210:	mov	x0, x19
 214:	csel	w25, w25, w24, eq  // eq = none
 218:	bl	0 <lt_dlhandle_iterate>
 21c:	mov	x1, x0
 220:	cbnz	x0, 1f0 <lt_dlloader_remove+0x78>
 224:	nop
 228:	mov	x0, x19
 22c:	bl	0 <lt_dlinterface_free>
 230:	cbnz	w24, 294 <lt_dlloader_remove+0x11c>
 234:	ldr	x1, [x20, #48]
 238:	cbz	x1, 248 <lt_dlloader_remove+0xd0>
 23c:	ldr	x0, [x20, #56]
 240:	blr	x1
 244:	cbnz	w0, 298 <lt_dlloader_remove+0x120>
 248:	mov	x2, x21
 24c:	mov	x1, x22
 250:	add	x0, x23, #0x0
 254:	bl	0 <lt__slist_remove>
 258:	ldp	x19, x20, [sp, #16]
 25c:	ldp	x21, x22, [sp, #32]
 260:	ldp	x23, x24, [sp, #48]
 264:	ldr	x25, [sp, #64]
 268:	ldp	x29, x30, [sp], #96
 26c:	b	0 <lt__slist_unbox>
 270:	ldp	x19, x20, [sp, #16]
 274:	mov	w0, #0x2                   	// #2
 278:	bl	0 <lt__error_string>
 27c:	bl	0 <lt__set_last_error>
 280:	mov	x0, #0x0                   	// #0
 284:	ldp	x21, x22, [sp, #32]
 288:	ldp	x23, x24, [sp, #48]
 28c:	ldp	x29, x30, [sp], #96
 290:	ret
 294:	cbz	w25, 2b4 <lt_dlloader_remove+0x13c>
 298:	mov	x0, #0x0                   	// #0
 29c:	ldp	x19, x20, [sp, #16]
 2a0:	ldp	x21, x22, [sp, #32]
 2a4:	ldp	x23, x24, [sp, #48]
 2a8:	ldr	x25, [sp, #64]
 2ac:	ldp	x29, x30, [sp], #96
 2b0:	ret
 2b4:	mov	w0, #0x4                   	// #4
 2b8:	bl	0 <lt__error_string>
 2bc:	bl	0 <lt__set_last_error>
 2c0:	ldp	x19, x20, [sp, #16]
 2c4:	ldr	x25, [sp, #64]
 2c8:	b	280 <lt_dlloader_remove+0x108>
 2cc:	nop

00000000000002d0 <lt_dlloader_find>:
 2d0:	stp	x29, x30, [sp, #-16]!
 2d4:	adrp	x3, 0 <loader_callback>
 2d8:	mov	x2, x0
 2dc:	mov	x29, sp
 2e0:	ldr	x0, [x3]
 2e4:	adrp	x1, 0 <loader_callback>
 2e8:	add	x1, x1, #0x0
 2ec:	bl	0 <lt__slist_find>
 2f0:	cbz	x0, 2f8 <lt_dlloader_find+0x28>
 2f4:	ldr	x0, [x0, #8]
 2f8:	ldp	x29, x30, [sp], #16
 2fc:	ret

libltdl_libltdl_la-lt_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dladderror>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	cbz	x0, 70 <lt_dladderror+0x70>
  14:	adrp	x21, 0 <lt_dladderror>
  18:	adrp	x22, 0 <lt_dladderror>
  1c:	mov	x20, x0
  20:	ldr	w19, [x21]
  24:	ldr	x0, [x22]
  28:	sub	w19, w19, #0x13
  2c:	sbfiz	x19, x19, #3, #32
  30:	mov	x1, x19
  34:	bl	0 <lt__realloc>
  38:	mov	x1, x0
  3c:	cbz	x0, 68 <lt_dladderror+0x68>
  40:	add	x19, x0, x19
  44:	ldr	w0, [x21]
  48:	str	x1, [x22]
  4c:	add	w1, w0, #0x1
  50:	str	w1, [x21]
  54:	stur	x20, [x19, #-8]
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x21, x22, [sp, #32]
  60:	ldp	x29, x30, [sp], #48
  64:	ret
  68:	mov	w0, #0xffffffff            	// #-1
  6c:	b	58 <lt_dladderror+0x58>
  70:	adrp	x3, 0 <lt_dladderror>
  74:	adrp	x1, 0 <lt_dladderror>
  78:	adrp	x0, 0 <lt_dladderror>
  7c:	add	x3, x3, #0x0
  80:	add	x1, x1, #0x0
  84:	add	x0, x0, #0x0
  88:	mov	w2, #0x35                  	// #53
  8c:	bl	0 <__assert_fail>

0000000000000090 <lt_dlseterror>:
  90:	adrp	x2, 0 <lt_dladderror>
  94:	mov	w1, w0
  98:	cmp	w1, #0x0
  9c:	ldr	w0, [x2]
  a0:	ccmp	w0, w1, #0x4, ge  // ge = tcont
  a4:	b.gt	c4 <lt_dlseterror+0x34>
  a8:	adrp	x2, 0 <lt_dladderror>
  ac:	adrp	x1, 0 <lt_dladderror>
  b0:	add	x1, x1, #0x0
  b4:	mov	w0, #0x1                   	// #1
  b8:	add	x1, x1, #0x25c
  bc:	str	x1, [x2]
  c0:	ret
  c4:	cmp	w1, #0x13
  c8:	b.gt	f0 <lt_dlseterror+0x60>
  cc:	adrp	x2, 0 <lt_dladderror>
  d0:	add	x2, x2, #0x0
  d4:	add	x2, x2, #0x10
  d8:	mov	w4, #0x2a                  	// #42
  dc:	adrp	x3, 0 <lt_dladderror>
  e0:	mov	w0, #0x0                   	// #0
  e4:	smaddl	x1, w1, w4, x2
  e8:	str	x1, [x3]
  ec:	ret
  f0:	adrp	x0, 0 <lt_dladderror>
  f4:	mov	x2, #0xffffffffffffff60    	// #-160
  f8:	add	x1, x2, w1, sxtw #3
  fc:	add	x2, x0, #0x0
 100:	ldr	x3, [x0]
 104:	mov	w0, #0x0                   	// #0
 108:	ldr	x1, [x3, x1]
 10c:	str	x1, [x2, #8]
 110:	ret
 114:	nop

0000000000000118 <lt__error_string>:
 118:	stp	x29, x30, [sp, #-16]!
 11c:	mov	x29, sp
 120:	tbnz	w0, #31, 148 <lt__error_string+0x30>
 124:	cmp	w0, #0x13
 128:	b.gt	16c <lt__error_string+0x54>
 12c:	adrp	x1, 0 <lt_dladderror>
 130:	add	x1, x1, #0x0
 134:	add	x1, x1, #0x10
 138:	mov	w2, #0x2a                  	// #42
 13c:	ldp	x29, x30, [sp], #16
 140:	smaddl	x0, w0, w2, x1
 144:	ret
 148:	adrp	x3, 0 <lt_dladderror>
 14c:	add	x3, x3, #0x0
 150:	adrp	x1, 0 <lt_dladderror>
 154:	adrp	x0, 0 <lt_dladderror>
 158:	add	x3, x3, #0x358
 15c:	add	x1, x1, #0x0
 160:	add	x0, x0, #0x0
 164:	mov	w2, #0x5f                  	// #95
 168:	bl	0 <__assert_fail>
 16c:	adrp	x3, 0 <lt_dladderror>
 170:	add	x3, x3, #0x0
 174:	adrp	x1, 0 <lt_dladderror>
 178:	adrp	x0, 0 <lt_dladderror>
 17c:	add	x3, x3, #0x358
 180:	add	x1, x1, #0x0
 184:	add	x0, x0, #0x0
 188:	mov	w2, #0x60                  	// #96
 18c:	bl	0 <__assert_fail>

0000000000000190 <lt__get_last_error>:
 190:	adrp	x0, 0 <lt_dladderror>
 194:	ldr	x0, [x0]
 198:	ret
 19c:	nop

00000000000001a0 <lt__set_last_error>:
 1a0:	adrp	x1, 0 <lt_dladderror>
 1a4:	str	x0, [x1]
 1a8:	ret

libltdl_libltdl_la-ltdl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__alloc_die_callback>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	w0, #0xb                   	// #11
       8:	mov	x29, sp
       c:	bl	0 <lt__error_string>
      10:	ldp	x29, x30, [sp], #16
      14:	b	0 <lt__set_last_error>

0000000000000018 <canonicalize_path>:
      18:	stp	x29, x30, [sp, #-32]!
      1c:	mov	x29, sp
      20:	stp	x19, x20, [sp, #16]
      24:	cbz	x0, 100 <canonicalize_path+0xe8>
      28:	mov	x20, x1
      2c:	ldrb	w1, [x0]
      30:	mov	x19, x0
      34:	cbz	w1, 100 <canonicalize_path+0xe8>
      38:	bl	0 <strlen>
      3c:	add	x0, x0, #0x1
      40:	bl	0 <lt__malloc>
      44:	mov	x5, x0
      48:	cbz	x0, e8 <canonicalize_path+0xd0>
      4c:	ldrb	w2, [x19]
      50:	cbz	w2, f8 <canonicalize_path+0xe0>
      54:	add	x3, x19, #0x1
      58:	mov	x4, #0x0                   	// #0
      5c:	mov	w1, #0x2f                  	// #47
      60:	b	80 <canonicalize_path+0x68>
      64:	cmp	w2, #0x2f
      68:	b.eq	c4 <canonicalize_path+0xac>  // b.none
      6c:	strb	w2, [x5, x4]
      70:	add	x4, x4, #0x1
      74:	ldrb	w2, [x3]
      78:	add	x3, x3, #0x1
      7c:	cbz	w2, a8 <canonicalize_path+0x90>
      80:	cmp	w2, #0x3a
      84:	b.ne	64 <canonicalize_path+0x4c>  // b.any
      88:	ldrb	w0, [x3]
      8c:	cbz	x4, 9c <canonicalize_path+0x84>
      90:	cmp	w0, #0x3a
      94:	ccmp	w0, #0x0, #0x4, ne  // ne = any
      98:	b.ne	6c <canonicalize_path+0x54>  // b.any
      9c:	mov	w2, w0
      a0:	add	x3, x3, #0x1
      a4:	cbnz	w2, 80 <canonicalize_path+0x68>
      a8:	add	x4, x5, x4
      ac:	strb	wzr, [x4]
      b0:	mov	w0, #0x0                   	// #0
      b4:	str	x5, [x20]
      b8:	ldp	x19, x20, [sp, #16]
      bc:	ldp	x29, x30, [sp], #32
      c0:	ret
      c4:	ldrb	w2, [x3]
      c8:	cmp	w2, #0x3a
      cc:	ccmp	w2, #0x0, #0x4, ne  // ne = any
      d0:	ccmp	w2, w1, #0x4, ne  // ne = any
      d4:	b.eq	78 <canonicalize_path+0x60>  // b.none
      d8:	strb	w1, [x5, x4]
      dc:	add	x4, x4, #0x1
      e0:	ldrb	w2, [x3]
      e4:	b	78 <canonicalize_path+0x60>
      e8:	mov	w0, #0x1                   	// #1
      ec:	ldp	x19, x20, [sp, #16]
      f0:	ldp	x29, x30, [sp], #32
      f4:	ret
      f8:	mov	x4, x0
      fc:	b	ac <canonicalize_path+0x94>
     100:	adrp	x3, 0 <lt__alloc_die_callback>
     104:	adrp	x1, 0 <lt__alloc_die_callback>
     108:	adrp	x0, 0 <lt__alloc_die_callback>
     10c:	add	x3, x3, #0x0
     110:	add	x1, x1, #0x0
     114:	add	x0, x0, #0x0
     118:	mov	w2, #0x24f                 	// #591
     11c:	bl	0 <__assert_fail>

0000000000000120 <tryall_dlopen>:
     120:	stp	x29, x30, [sp, #-64]!
     124:	adrp	x4, 0 <lt__alloc_die_callback>
     128:	mov	x29, sp
     12c:	stp	x19, x20, [sp, #16]
     130:	mov	x20, x1
     134:	ldr	x19, [x4]
     138:	stp	x21, x22, [sp, #32]
     13c:	mov	x21, x2
     140:	stp	x23, x24, [sp, #48]
     144:	mov	x24, x0
     148:	mov	x23, x3
     14c:	bl	0 <lt__get_last_error>
     150:	mov	x22, x0
     154:	cbnz	x19, 178 <tryall_dlopen+0x58>
     158:	b	1b0 <tryall_dlopen+0x90>
     15c:	cmp	x20, #0x0
     160:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     164:	b.eq	170 <tryall_dlopen+0x50>  // b.none
     168:	bl	0 <strcmp>
     16c:	cbz	w0, 188 <tryall_dlopen+0x68>
     170:	ldr	x19, [x19]
     174:	cbz	x19, 1b0 <tryall_dlopen+0x90>
     178:	ldr	x0, [x19, #16]
     17c:	mov	x1, x20
     180:	cmp	x0, x20
     184:	b.ne	15c <tryall_dlopen+0x3c>  // b.any
     188:	ldr	w1, [x19, #32]
     18c:	mov	w0, #0x0                   	// #0
     190:	add	w1, w1, #0x1
     194:	str	w1, [x19, #32]
     198:	str	x19, [x24]
     19c:	ldp	x19, x20, [sp, #16]
     1a0:	ldp	x21, x22, [sp, #32]
     1a4:	ldp	x23, x24, [sp, #48]
     1a8:	ldp	x29, x30, [sp], #64
     1ac:	ret
     1b0:	ldr	x24, [x24]
     1b4:	cbz	x20, 2ac <tryall_dlopen+0x18c>
     1b8:	mov	x0, x20
     1bc:	bl	0 <lt__strdup>
     1c0:	str	x0, [x24, #16]
     1c4:	cbz	x0, 2b4 <tryall_dlopen+0x194>
     1c8:	mov	x0, #0x0                   	// #0
     1cc:	bl	0 <lt_dlloader_next>
     1d0:	mov	x19, x0
     1d4:	cbz	x23, 24c <tryall_dlopen+0x12c>
     1d8:	ldr	x3, [x23, #16]
     1dc:	mov	x1, x20
     1e0:	ldr	x0, [x23, #56]
     1e4:	mov	x2, x21
     1e8:	blr	x3
     1ec:	str	x0, [x24, #56]
     1f0:	cbz	x0, 288 <tryall_dlopen+0x168>
     1f4:	cbz	x21, 228 <tryall_dlopen+0x108>
     1f8:	ldrb	w1, [x21]
     1fc:	ldrb	w2, [x24, #36]
     200:	ubfx	x0, x1, #2, #1
     204:	ubfx	x3, x1, #3, #1
     208:	ubfx	x1, x1, #1, #1
     20c:	ubfiz	w0, w0, #1, #7
     210:	ubfiz	w3, w3, #2, #6
     214:	orr	w0, w0, w1
     218:	mov	w1, w2
     21c:	orr	w0, w0, w3
     220:	bfxil	w1, w0, #0, #3
     224:	strb	w1, [x24, #36]
     228:	str	x23, [x24, #8]
     22c:	mov	x0, x22
     230:	bl	0 <lt__set_last_error>
     234:	mov	w0, #0x0                   	// #0
     238:	ldp	x19, x20, [sp, #16]
     23c:	ldp	x21, x22, [sp, #32]
     240:	ldp	x23, x24, [sp, #48]
     244:	ldp	x29, x30, [sp], #64
     248:	ret
     24c:	mov	x0, x19
     250:	bl	0 <lt_dlloader_get>
     254:	mov	x23, x0
     258:	mov	x1, x20
     25c:	ldr	x3, [x0, #16]
     260:	mov	x2, x21
     264:	ldr	x0, [x0, #56]
     268:	blr	x3
     26c:	mov	x1, x0
     270:	str	x1, [x24, #56]
     274:	mov	x0, x19
     278:	cbnz	x1, 2bc <tryall_dlopen+0x19c>
     27c:	bl	0 <lt_dlloader_next>
     280:	mov	x19, x0
     284:	cbnz	x0, 24c <tryall_dlopen+0x12c>
     288:	ldr	x0, [x24, #16]
     28c:	bl	0 <free>
     290:	str	xzr, [x24, #16]
     294:	mov	w0, #0x1                   	// #1
     298:	ldp	x19, x20, [sp, #16]
     29c:	ldp	x21, x22, [sp, #32]
     2a0:	ldp	x23, x24, [sp, #48]
     2a4:	ldp	x29, x30, [sp], #64
     2a8:	ret
     2ac:	str	xzr, [x24, #16]
     2b0:	b	1c8 <tryall_dlopen+0xa8>
     2b4:	mov	w0, #0x1                   	// #1
     2b8:	b	19c <tryall_dlopen+0x7c>
     2bc:	cbz	x21, 2f0 <tryall_dlopen+0x1d0>
     2c0:	ldrb	w1, [x21]
     2c4:	ldrb	w2, [x24, #36]
     2c8:	ubfx	x0, x1, #2, #1
     2cc:	ubfx	x3, x1, #3, #1
     2d0:	ubfx	x1, x1, #1, #1
     2d4:	ubfiz	w0, w0, #1, #7
     2d8:	ubfiz	w3, w3, #2, #6
     2dc:	orr	w0, w0, w1
     2e0:	mov	w1, w2
     2e4:	orr	w0, w0, w3
     2e8:	bfxil	w1, w0, #0, #3
     2ec:	strb	w1, [x24, #36]
     2f0:	cbz	x19, 288 <tryall_dlopen+0x168>
     2f4:	b	228 <tryall_dlopen+0x108>

00000000000002f8 <tryall_dlopen_module>:
     2f8:	stp	x29, x30, [sp, #-80]!
     2fc:	mov	x29, sp
     300:	stp	x19, x20, [sp, #16]
     304:	stp	x21, x22, [sp, #32]
     308:	stp	x23, x24, [sp, #48]
     30c:	stp	x25, x26, [sp, #64]
     310:	cbz	x2, 41c <tryall_dlopen_module+0x124>
     314:	mov	x23, x0
     318:	ldrb	w0, [x2]
     31c:	mov	x22, x1
     320:	mov	x19, x2
     324:	mov	x20, x3
     328:	mov	x24, x4
     32c:	cbnz	w0, 3c0 <tryall_dlopen_module+0xc8>
     330:	cbz	x3, 440 <tryall_dlopen_module+0x148>
     334:	mov	x21, #0x2                   	// #2
     338:	mov	x26, #0x0                   	// #0
     33c:	ldrb	w1, [x20]
     340:	mov	x0, #0x0                   	// #0
     344:	cbz	w1, 350 <tryall_dlopen_module+0x58>
     348:	mov	x0, x20
     34c:	bl	0 <strlen>
     350:	add	x0, x0, x21
     354:	mov	w25, #0x1                   	// #1
     358:	bl	0 <lt__malloc>
     35c:	mov	x21, x0
     360:	cbz	x0, 3a4 <tryall_dlopen_module+0xac>
     364:	adrp	x1, 0 <lt__alloc_die_callback>
     368:	mov	x4, x20
     36c:	mov	x3, x19
     370:	mov	w2, w26
     374:	add	x1, x1, #0x0
     378:	bl	0 <sprintf>
     37c:	cbz	x22, 3f4 <tryall_dlopen_module+0xfc>
     380:	mov	x4, x24
     384:	mov	x2, x22
     388:	mov	x0, x23
     38c:	mov	x3, x21
     390:	mov	x1, #0x0                   	// #0
     394:	bl	2f8 <tryall_dlopen_module>
     398:	mov	w25, w0
     39c:	mov	x0, x21
     3a0:	bl	0 <free>
     3a4:	mov	w0, w25
     3a8:	ldp	x19, x20, [sp, #16]
     3ac:	ldp	x21, x22, [sp, #32]
     3b0:	ldp	x23, x24, [sp, #48]
     3b4:	ldp	x25, x26, [sp, #64]
     3b8:	ldp	x29, x30, [sp], #80
     3bc:	ret
     3c0:	mov	x0, x2
     3c4:	bl	0 <strlen>
     3c8:	mov	x26, x0
     3cc:	cbz	x20, 440 <tryall_dlopen_module+0x148>
     3d0:	cbz	x0, 414 <tryall_dlopen_module+0x11c>
     3d4:	sub	x0, x0, #0x1
     3d8:	add	x21, x26, #0x2
     3dc:	ldrb	w1, [x19, x0]
     3e0:	cmp	w1, #0x2f
     3e4:	b.ne	33c <tryall_dlopen_module+0x44>  // b.any
     3e8:	add	x21, x26, #0x1
     3ec:	mov	x26, x0
     3f0:	b	33c <tryall_dlopen_module+0x44>
     3f4:	mov	x2, x24
     3f8:	mov	x0, x23
     3fc:	mov	x1, x21
     400:	mov	x3, #0x0                   	// #0
     404:	bl	120 <tryall_dlopen>
     408:	cmp	w0, #0x0
     40c:	cset	w25, ne  // ne = any
     410:	b	39c <tryall_dlopen_module+0xa4>
     414:	mov	x21, #0x2                   	// #2
     418:	b	33c <tryall_dlopen_module+0x44>
     41c:	adrp	x3, 0 <lt__alloc_die_callback>
     420:	add	x3, x3, #0x0
     424:	adrp	x1, 0 <lt__alloc_die_callback>
     428:	adrp	x0, 0 <lt__alloc_die_callback>
     42c:	add	x3, x3, #0x18
     430:	add	x1, x1, #0x0
     434:	add	x0, x0, #0x0
     438:	mov	w2, #0x1f7                 	// #503
     43c:	bl	0 <__assert_fail>
     440:	adrp	x3, 0 <lt__alloc_die_callback>
     444:	add	x3, x3, #0x0
     448:	adrp	x1, 0 <lt__alloc_die_callback>
     44c:	adrp	x0, 0 <lt__alloc_die_callback>
     450:	add	x3, x3, #0x18
     454:	add	x1, x1, #0x0
     458:	add	x0, x0, #0x0
     45c:	mov	w2, #0x1f8                 	// #504
     460:	bl	0 <__assert_fail>
     464:	nop

0000000000000468 <trim>:
     468:	stp	x29, x30, [sp, #-64]!
     46c:	mov	x29, sp
     470:	stp	x19, x20, [sp, #16]
     474:	mov	x19, x1
     478:	stp	x21, x22, [sp, #32]
     47c:	mov	x21, x0
     480:	mov	x0, x1
     484:	mov	w1, #0x27                  	// #39
     488:	bl	0 <strrchr>
     48c:	ldrb	w1, [x19]
     490:	mov	x20, x0
     494:	cbz	w1, 50c <trim+0xa4>
     498:	mov	x0, x19
     49c:	bl	0 <strlen>
     4a0:	mov	x22, x0
     4a4:	ldr	x0, [x21]
     4a8:	bl	0 <free>
     4ac:	str	xzr, [x21]
     4b0:	cmp	x20, #0x0
     4b4:	ccmp	x19, x20, #0x4, ne  // ne = any
     4b8:	b.eq	540 <trim+0xd8>  // b.none
     4bc:	cmp	x22, #0x3
     4c0:	b.ls	524 <trim+0xbc>  // b.plast
     4c4:	ldrb	w0, [x19]
     4c8:	mov	w22, #0x0                   	// #0
     4cc:	cmp	w0, #0x27
     4d0:	b.ne	528 <trim+0xc0>  // b.any
     4d4:	sub	x20, x20, x19
     4d8:	str	x23, [sp, #48]
     4dc:	mov	x0, x20
     4e0:	bl	0 <lt__malloc>
     4e4:	mov	x23, x0
     4e8:	cbz	x0, 53c <trim+0xd4>
     4ec:	sub	x2, x20, #0x1
     4f0:	add	x20, x23, x20
     4f4:	add	x1, x19, #0x1
     4f8:	bl	0 <memcpy>
     4fc:	sturb	wzr, [x20, #-1]
     500:	str	x23, [x21]
     504:	ldr	x23, [sp, #48]
     508:	b	528 <trim+0xc0>
     50c:	ldr	x0, [x21]
     510:	bl	0 <free>
     514:	str	xzr, [x21]
     518:	cmp	x20, #0x0
     51c:	ccmp	x19, x20, #0x4, ne  // ne = any
     520:	b.eq	540 <trim+0xd8>  // b.none
     524:	mov	w22, #0x0                   	// #0
     528:	mov	w0, w22
     52c:	ldp	x19, x20, [sp, #16]
     530:	ldp	x21, x22, [sp, #32]
     534:	ldp	x29, x30, [sp], #64
     538:	ret
     53c:	ldr	x23, [sp, #48]
     540:	mov	w22, #0x1                   	// #1
     544:	mov	w0, w22
     548:	ldp	x19, x20, [sp, #16]
     54c:	ldp	x21, x22, [sp, #32]
     550:	ldp	x29, x30, [sp], #64
     554:	ret

0000000000000558 <lt_argz_insert>:
     558:	stp	x29, x30, [sp, #-48]!
     55c:	mov	x29, sp
     560:	cbz	x2, 594 <lt_argz_insert+0x3c>
     564:	bl	0 <argz_insert>
     568:	cbnz	w0, 574 <lt_argz_insert+0x1c>
     56c:	ldp	x29, x30, [sp], #48
     570:	ret
     574:	cmp	w0, #0xc
     578:	b.eq	5d0 <lt_argz_insert+0x78>  // b.none
     57c:	mov	w0, #0x0                   	// #0
     580:	bl	0 <lt__error_string>
     584:	bl	0 <lt__set_last_error>
     588:	mov	w0, #0x1                   	// #1
     58c:	ldp	x29, x30, [sp], #48
     590:	ret
     594:	stp	x19, x20, [sp, #16]
     598:	mov	x19, x3
     59c:	mov	x20, x0
     5a0:	mov	x0, x3
     5a4:	str	x21, [sp, #32]
     5a8:	mov	x21, x1
     5ac:	bl	0 <strlen>
     5b0:	mov	x2, x19
     5b4:	add	x3, x0, #0x1
     5b8:	mov	x1, x21
     5bc:	mov	x0, x20
     5c0:	bl	0 <argz_append>
     5c4:	ldp	x19, x20, [sp, #16]
     5c8:	ldr	x21, [sp, #32]
     5cc:	b	568 <lt_argz_insert+0x10>
     5d0:	mov	w0, #0xb                   	// #11
     5d4:	bl	0 <lt__error_string>
     5d8:	bl	0 <lt__set_last_error>
     5dc:	mov	w0, #0x1                   	// #1
     5e0:	ldp	x29, x30, [sp], #48
     5e4:	ret

00000000000005e8 <find_file_callback>:
     5e8:	stp	x29, x30, [sp, #-48]!
     5ec:	mov	x29, sp
     5f0:	stp	x19, x20, [sp, #16]
     5f4:	str	x21, [sp, #32]
     5f8:	cbz	x0, 688 <find_file_callback+0xa0>
     5fc:	mov	x20, x1
     600:	ldrb	w1, [x0]
     604:	mov	x19, x0
     608:	cbz	w1, 688 <find_file_callback+0xa0>
     60c:	cbz	x20, 6d0 <find_file_callback+0xe8>
     610:	mov	x21, x2
     614:	cbz	x2, 6ac <find_file_callback+0xc4>
     618:	adrp	x1, 0 <lt__alloc_die_callback>
     61c:	add	x1, x1, #0x0
     620:	bl	0 <fopen>
     624:	mov	x1, x0
     628:	str	x1, [x21]
     62c:	mov	w0, #0x0                   	// #0
     630:	cbz	x1, 670 <find_file_callback+0x88>
     634:	mov	x0, x19
     638:	mov	w1, #0x2f                  	// #47
     63c:	bl	0 <strrchr>
     640:	cmp	x19, x0
     644:	b.cc	680 <find_file_callback+0x98>  // b.lo, b.ul, b.last
     648:	ldr	x0, [x20]
     64c:	bl	0 <free>
     650:	str	xzr, [x20]
     654:	mov	x0, x19
     658:	bl	0 <lt__strdup>
     65c:	mov	x1, x0
     660:	cmp	x1, #0x0
     664:	mov	w0, #0x1                   	// #1
     668:	cneg	w0, w0, eq  // eq = none
     66c:	str	x1, [x20]
     670:	ldp	x19, x20, [sp, #16]
     674:	ldr	x21, [sp, #32]
     678:	ldp	x29, x30, [sp], #48
     67c:	ret
     680:	strb	wzr, [x0]
     684:	b	648 <find_file_callback+0x60>
     688:	adrp	x3, 0 <lt__alloc_die_callback>
     68c:	add	x3, x3, #0x0
     690:	adrp	x1, 0 <lt__alloc_die_callback>
     694:	adrp	x0, 0 <lt__alloc_die_callback>
     698:	add	x3, x3, #0x30
     69c:	add	x1, x1, #0x0
     6a0:	add	x0, x0, #0x0
     6a4:	mov	w2, #0x2f0                 	// #752
     6a8:	bl	0 <__assert_fail>
     6ac:	adrp	x3, 0 <lt__alloc_die_callback>
     6b0:	add	x3, x3, #0x0
     6b4:	adrp	x1, 0 <lt__alloc_die_callback>
     6b8:	adrp	x0, 0 <lt__alloc_die_callback>
     6bc:	add	x3, x3, #0x30
     6c0:	add	x1, x1, #0x0
     6c4:	add	x0, x0, #0x0
     6c8:	mov	w2, #0x2f2                 	// #754
     6cc:	bl	0 <__assert_fail>
     6d0:	adrp	x3, 0 <lt__alloc_die_callback>
     6d4:	add	x3, x3, #0x0
     6d8:	adrp	x1, 0 <lt__alloc_die_callback>
     6dc:	adrp	x0, 0 <lt__alloc_die_callback>
     6e0:	add	x3, x3, #0x30
     6e4:	add	x1, x1, #0x0
     6e8:	add	x0, x0, #0x0
     6ec:	mov	w2, #0x2f1                 	// #753
     6f0:	bl	0 <__assert_fail>
     6f4:	nop

00000000000006f8 <argzize_path>:
     6f8:	stp	x29, x30, [sp, #-16]!
     6fc:	mov	x29, sp
     700:	cbz	x0, 758 <argzize_path+0x60>
     704:	mov	x3, x2
     708:	mov	x2, x1
     70c:	mov	w1, #0x3a                  	// #58
     710:	bl	0 <argz_create_sep>
     714:	cbnz	w0, 720 <argzize_path+0x28>
     718:	ldp	x29, x30, [sp], #16
     71c:	ret
     720:	cmp	w0, #0xc
     724:	b.eq	740 <argzize_path+0x48>  // b.none
     728:	mov	w0, #0x0                   	// #0
     72c:	bl	0 <lt__error_string>
     730:	bl	0 <lt__set_last_error>
     734:	mov	w0, #0x1                   	// #1
     738:	ldp	x29, x30, [sp], #16
     73c:	ret
     740:	mov	w0, #0xb                   	// #11
     744:	bl	0 <lt__error_string>
     748:	bl	0 <lt__set_last_error>
     74c:	mov	w0, #0x1                   	// #1
     750:	ldp	x29, x30, [sp], #16
     754:	ret
     758:	adrp	x3, 0 <lt__alloc_die_callback>
     75c:	add	x3, x3, #0x0
     760:	adrp	x1, 0 <lt__alloc_die_callback>
     764:	adrp	x0, 0 <lt__alloc_die_callback>
     768:	add	x3, x3, #0x48
     76c:	add	x1, x1, #0x0
     770:	add	x0, x0, #0x0
     774:	mov	w2, #0x28c                 	// #652
     778:	bl	0 <__assert_fail>
     77c:	nop

0000000000000780 <foreach_dirinpath>:
     780:	stp	x29, x30, [sp, #-144]!
     784:	mov	x29, sp
     788:	stp	x19, x20, [sp, #16]
     78c:	mov	x19, x0
     790:	mov	x20, x1
     794:	stp	x21, x22, [sp, #32]
     798:	mov	x21, x2
     79c:	mov	x22, x3
     7a0:	stp	x23, x24, [sp, #48]
     7a4:	mov	x23, x4
     7a8:	stp	x25, x26, [sp, #64]
     7ac:	mov	x26, #0x0                   	// #0
     7b0:	cbz	x1, 7bc <foreach_dirinpath+0x3c>
     7b4:	ldrb	w0, [x1]
     7b8:	cbnz	w0, 83c <foreach_dirinpath+0xbc>
     7bc:	stp	xzr, xzr, [sp, #120]
     7c0:	str	xzr, [sp, #136]
     7c4:	cbz	x19, 7d0 <foreach_dirinpath+0x50>
     7c8:	ldrb	w0, [x19]
     7cc:	cbnz	w0, 81c <foreach_dirinpath+0x9c>
     7d0:	mov	w0, #0x5                   	// #5
     7d4:	bl	0 <lt__error_string>
     7d8:	bl	0 <lt__set_last_error>
     7dc:	mov	x25, #0x0                   	// #0
     7e0:	ldr	x19, [sp, #128]
     7e4:	mov	w24, #0x0                   	// #0
     7e8:	mov	x0, x19
     7ec:	bl	0 <free>
     7f0:	ldr	x0, [sp, #136]
     7f4:	bl	0 <free>
     7f8:	mov	x0, x25
     7fc:	bl	0 <free>
     800:	mov	w0, w24
     804:	ldp	x19, x20, [sp, #16]
     808:	ldp	x21, x22, [sp, #32]
     80c:	ldp	x23, x24, [sp, #48]
     810:	ldp	x25, x26, [sp, #64]
     814:	ldp	x29, x30, [sp], #144
     818:	ret
     81c:	mov	x0, x19
     820:	add	x1, sp, #0x88
     824:	bl	18 <canonicalize_path>
     828:	cbz	w0, 84c <foreach_dirinpath+0xcc>
     82c:	mov	x25, #0x0                   	// #0
     830:	mov	w24, #0x0                   	// #0
     834:	ldr	x19, [sp, #128]
     838:	b	7e8 <foreach_dirinpath+0x68>
     83c:	mov	x0, x1
     840:	bl	0 <strlen>
     844:	mov	x26, x0
     848:	b	7bc <foreach_dirinpath+0x3c>
     84c:	ldr	x0, [sp, #136]
     850:	add	x2, sp, #0x78
     854:	add	x1, sp, #0x80
     858:	bl	6f8 <argzize_path>
     85c:	mov	w24, w0
     860:	cbnz	w0, 938 <foreach_dirinpath+0x1b8>
     864:	mov	x25, #0x0                   	// #0
     868:	stp	x27, x28, [sp, #80]
     86c:	mov	x28, #0x0                   	// #0
     870:	mov	x27, #0x0                   	// #0
     874:	ldp	x0, x19, [sp, #120]
     878:	cbz	x28, 948 <foreach_dirinpath+0x1c8>
     87c:	add	x1, x19, x0
     880:	str	x1, [sp, #104]
     884:	cmp	x28, x1
     888:	b.cs	94c <foreach_dirinpath+0x1cc>  // b.hs, b.nlast
     88c:	mov	x0, x28
     890:	bl	0 <strlen>
     894:	ldr	x1, [sp, #104]
     898:	add	x0, x0, #0x1
     89c:	add	x28, x28, x0
     8a0:	cmp	x1, x28
     8a4:	b.ls	94c <foreach_dirinpath+0x1cc>  // b.plast
     8a8:	ldrb	w0, [x28]
     8ac:	cbz	w0, 954 <foreach_dirinpath+0x1d4>
     8b0:	mov	x0, x28
     8b4:	bl	0 <strlen>
     8b8:	mov	x19, x0
     8bc:	add	x1, x26, x0
     8c0:	add	x0, x1, #0x1
     8c4:	cmp	x0, x27
     8c8:	b.cs	96c <foreach_dirinpath+0x1ec>  // b.hs, b.nlast
     8cc:	cmp	x27, x19
     8d0:	b.ls	98c <foreach_dirinpath+0x20c>  // b.plast
     8d4:	mov	x1, x28
     8d8:	mov	x0, x25
     8dc:	bl	0 <strcpy>
     8e0:	cbz	x20, 914 <foreach_dirinpath+0x194>
     8e4:	ldrb	w0, [x20]
     8e8:	cbz	w0, 914 <foreach_dirinpath+0x194>
     8ec:	add	x0, x25, x19
     8f0:	ldurb	w1, [x0, #-1]
     8f4:	cmp	w1, #0x2f
     8f8:	b.eq	90c <foreach_dirinpath+0x18c>  // b.none
     8fc:	add	x0, x19, #0x1
     900:	mov	w1, #0x2f                  	// #47
     904:	add	x0, x25, x0
     908:	strb	w1, [x25, x19]
     90c:	mov	x1, x20
     910:	bl	0 <strcpy>
     914:	mov	x2, x23
     918:	mov	x1, x22
     91c:	mov	x0, x25
     920:	blr	x21
     924:	cbz	w0, 874 <foreach_dirinpath+0xf4>
     928:	mov	w24, w0
     92c:	ldp	x27, x28, [sp, #80]
     930:	ldr	x19, [sp, #128]
     934:	b	7e8 <foreach_dirinpath+0x68>
     938:	mov	w24, #0x0                   	// #0
     93c:	mov	x25, #0x0                   	// #0
     940:	ldr	x19, [sp, #128]
     944:	b	7e8 <foreach_dirinpath+0x68>
     948:	cbnz	x0, 960 <foreach_dirinpath+0x1e0>
     94c:	ldp	x27, x28, [sp, #80]
     950:	b	7e8 <foreach_dirinpath+0x68>
     954:	mov	x1, x26
     958:	mov	x19, #0x0                   	// #0
     95c:	b	8c0 <foreach_dirinpath+0x140>
     960:	cbz	x19, 94c <foreach_dirinpath+0x1cc>
     964:	mov	x28, x19
     968:	b	8a8 <foreach_dirinpath+0x128>
     96c:	mov	x0, x25
     970:	add	x27, x1, #0x2
     974:	bl	0 <free>
     978:	mov	x0, x27
     97c:	bl	0 <lt__malloc>
     980:	mov	x25, x0
     984:	cbnz	x0, 8cc <foreach_dirinpath+0x14c>
     988:	b	92c <foreach_dirinpath+0x1ac>
     98c:	adrp	x3, 0 <lt__alloc_die_callback>
     990:	add	x3, x3, #0x0
     994:	adrp	x1, 0 <lt__alloc_die_callback>
     998:	adrp	x0, 0 <lt__alloc_die_callback>
     99c:	add	x3, x3, #0x58
     9a0:	add	x1, x1, #0x0
     9a4:	add	x0, x0, #0x0
     9a8:	mov	w2, #0x2cd                 	// #717
     9ac:	bl	0 <__assert_fail>

00000000000009b0 <find_handle_callback>:
     9b0:	stp	x29, x30, [sp, #-48]!
     9b4:	mov	x29, sp
     9b8:	stp	x19, x20, [sp, #16]
     9bc:	mov	x19, x1
     9c0:	mov	x20, x0
     9c4:	mov	w1, #0x4                   	// #4
     9c8:	str	x21, [sp, #32]
     9cc:	mov	x21, x2
     9d0:	bl	0 <access>
     9d4:	cbz	w0, 9ec <find_handle_callback+0x3c>
     9d8:	mov	w0, #0x0                   	// #0
     9dc:	ldp	x19, x20, [sp, #16]
     9e0:	ldr	x21, [sp, #32]
     9e4:	ldp	x29, x30, [sp], #48
     9e8:	ret
     9ec:	mov	x1, x20
     9f0:	mov	x2, x21
     9f4:	mov	x0, x19
     9f8:	mov	x3, #0x0                   	// #0
     9fc:	bl	120 <tryall_dlopen>
     a00:	mov	w1, w0
     a04:	mov	w0, #0x1                   	// #1
     a08:	cbz	w1, 9dc <find_handle_callback+0x2c>
     a0c:	str	xzr, [x19]
     a10:	ldp	x19, x20, [sp, #16]
     a14:	ldr	x21, [sp, #32]
     a18:	ldp	x29, x30, [sp], #48
     a1c:	ret

0000000000000a20 <lt_dlpath_insertdir.constprop.0>:
     a20:	stp	x29, x30, [sp, #-80]!
     a24:	mov	x29, sp
     a28:	stp	x19, x20, [sp, #16]
     a2c:	stp	xzr, xzr, [sp, #56]
     a30:	str	xzr, [sp, #72]
     a34:	cbz	x1, b98 <lt_dlpath_insertdir.constprop.0+0x178>
     a38:	mov	x20, x0
     a3c:	ldrb	w0, [x1]
     a40:	mov	x19, x1
     a44:	cbz	w0, b98 <lt_dlpath_insertdir.constprop.0+0x178>
     a48:	add	x1, sp, #0x38
     a4c:	mov	x0, x19
     a50:	bl	18 <canonicalize_path>
     a54:	cbnz	w0, b34 <lt_dlpath_insertdir.constprop.0+0x114>
     a58:	ldr	x0, [sp, #56]
     a5c:	str	x21, [sp, #32]
     a60:	cbz	x0, bc0 <lt_dlpath_insertdir.constprop.0+0x1a0>
     a64:	ldrb	w0, [x0]
     a68:	cbz	w0, bc0 <lt_dlpath_insertdir.constprop.0+0x1a0>
     a6c:	adrp	x21, 0 <lt__alloc_die_callback>
     a70:	add	x21, x21, #0x0
     a74:	ldr	x0, [x21, #8]
     a78:	cbz	x0, af8 <lt_dlpath_insertdir.constprop.0+0xd8>
     a7c:	add	x2, sp, #0x48
     a80:	add	x1, sp, #0x40
     a84:	bl	6f8 <argzize_path>
     a88:	cbnz	w0, ad0 <lt_dlpath_insertdir.constprop.0+0xb0>
     a8c:	cbz	x20, ab4 <lt_dlpath_insertdir.constprop.0+0x94>
     a90:	ldr	x0, [x21, #8]
     a94:	cmp	x20, x0
     a98:	b.cc	c2c <lt_dlpath_insertdir.constprop.0+0x20c>  // b.lo, b.ul, b.last
     a9c:	sub	x20, x20, x0
     aa0:	bl	0 <strlen>
     aa4:	cmp	w20, w0
     aa8:	b.gt	c08 <lt_dlpath_insertdir.constprop.0+0x1e8>
     aac:	ldr	x0, [sp, #64]
     ab0:	add	x20, x0, x20
     ab4:	mov	x3, x19
     ab8:	mov	x2, x20
     abc:	add	x1, sp, #0x48
     ac0:	add	x0, sp, #0x40
     ac4:	bl	558 <lt_argz_insert>
     ac8:	mov	w19, w0
     acc:	cbz	w0, b58 <lt_dlpath_insertdir.constprop.0+0x138>
     ad0:	ldr	x0, [sp, #64]
     ad4:	mov	w19, #0x1                   	// #1
     ad8:	ldr	x21, [sp, #32]
     adc:	bl	0 <free>
     ae0:	ldr	x0, [sp, #56]
     ae4:	bl	0 <free>
     ae8:	mov	w0, w19
     aec:	ldp	x19, x20, [sp, #16]
     af0:	ldp	x29, x30, [sp], #80
     af4:	ret
     af8:	cbnz	x20, be4 <lt_dlpath_insertdir.constprop.0+0x1c4>
     afc:	mov	x0, x19
     b00:	bl	0 <lt__strdup>
     b04:	cmp	x0, #0x0
     b08:	str	x0, [x21, #8]
     b0c:	ldr	x21, [sp, #32]
     b10:	cset	w19, eq  // eq = none
     b14:	ldr	x0, [sp, #64]
     b18:	bl	0 <free>
     b1c:	ldr	x0, [sp, #56]
     b20:	bl	0 <free>
     b24:	mov	w0, w19
     b28:	ldp	x19, x20, [sp, #16]
     b2c:	ldp	x29, x30, [sp], #80
     b30:	ret
     b34:	ldr	x0, [sp, #64]
     b38:	mov	w19, #0x1                   	// #1
     b3c:	bl	0 <free>
     b40:	ldr	x0, [sp, #56]
     b44:	bl	0 <free>
     b48:	mov	w0, w19
     b4c:	ldp	x19, x20, [sp, #16]
     b50:	ldp	x29, x30, [sp], #80
     b54:	ret
     b58:	ldp	x0, x1, [sp, #64]
     b5c:	mov	w2, #0x3a                  	// #58
     b60:	bl	0 <argz_stringify>
     b64:	ldr	x1, [x21, #8]
     b68:	ldr	x0, [sp, #64]
     b6c:	cmp	x1, x0
     b70:	b.eq	b90 <lt_dlpath_insertdir.constprop.0+0x170>  // b.none
     b74:	mov	x0, x1
     b78:	bl	0 <free>
     b7c:	ldr	x1, [sp, #64]
     b80:	mov	x0, #0x0                   	// #0
     b84:	str	x1, [x21, #8]
     b88:	ldr	x21, [sp, #32]
     b8c:	b	b18 <lt_dlpath_insertdir.constprop.0+0xf8>
     b90:	ldr	x21, [sp, #32]
     b94:	b	b18 <lt_dlpath_insertdir.constprop.0+0xf8>
     b98:	adrp	x3, 0 <lt__alloc_die_callback>
     b9c:	add	x3, x3, #0x0
     ba0:	adrp	x1, 0 <lt__alloc_die_callback>
     ba4:	adrp	x0, 0 <lt__alloc_die_callback>
     ba8:	add	x3, x3, #0x70
     bac:	add	x1, x1, #0x0
     bb0:	add	x0, x0, #0x0
     bb4:	mov	w2, #0x84f                 	// #2127
     bb8:	str	x21, [sp, #32]
     bbc:	bl	0 <__assert_fail>
     bc0:	adrp	x3, 0 <lt__alloc_die_callback>
     bc4:	add	x3, x3, #0x0
     bc8:	adrp	x1, 0 <lt__alloc_die_callback>
     bcc:	adrp	x0, 0 <lt__alloc_die_callback>
     bd0:	add	x3, x3, #0x70
     bd4:	add	x1, x1, #0x0
     bd8:	add	x0, x0, #0x0
     bdc:	mov	w2, #0x857                 	// #2135
     be0:	bl	0 <__assert_fail>
     be4:	adrp	x3, 0 <lt__alloc_die_callback>
     be8:	add	x3, x3, #0x0
     bec:	adrp	x1, 0 <lt__alloc_die_callback>
     bf0:	adrp	x0, 0 <lt__alloc_die_callback>
     bf4:	add	x3, x3, #0x70
     bf8:	add	x1, x1, #0x0
     bfc:	add	x0, x0, #0x0
     c00:	mov	w2, #0x85c                 	// #2140
     c04:	bl	0 <__assert_fail>
     c08:	adrp	x3, 0 <lt__alloc_die_callback>
     c0c:	add	x3, x3, #0x0
     c10:	adrp	x1, 0 <lt__alloc_die_callback>
     c14:	adrp	x0, 0 <lt__alloc_die_callback>
     c18:	add	x3, x3, #0x70
     c1c:	add	x1, x1, #0x0
     c20:	add	x0, x0, #0x0
     c24:	mov	w2, #0x876                 	// #2166
     c28:	bl	0 <__assert_fail>
     c2c:	adrp	x3, 0 <lt__alloc_die_callback>
     c30:	add	x3, x3, #0x0
     c34:	adrp	x1, 0 <lt__alloc_die_callback>
     c38:	adrp	x0, 0 <lt__alloc_die_callback>
     c3c:	add	x3, x3, #0x70
     c40:	add	x1, x1, #0x0
     c44:	add	x0, x0, #0x0
     c48:	mov	w2, #0x875                 	// #2165
     c4c:	bl	0 <__assert_fail>

0000000000000c50 <foreachfile_callback>:
     c50:	stp	x29, x30, [sp, #-112]!
     c54:	mov	x29, sp
     c58:	stp	x21, x22, [sp, #32]
     c5c:	stp	x25, x26, [sp, #64]
     c60:	stp	xzr, xzr, [sp, #96]
     c64:	ldr	x25, [x1]
     c68:	cbz	x0, f10 <foreachfile_callback+0x2c0>
     c6c:	ldrb	w1, [x0]
     c70:	mov	x21, x0
     c74:	cbz	w1, f10 <foreachfile_callback+0x2c0>
     c78:	stp	x23, x24, [sp, #48]
     c7c:	mov	x23, x2
     c80:	bl	0 <strlen>
     c84:	add	x0, x21, x0
     c88:	ldurb	w0, [x0, #-1]
     c8c:	stp	x19, x20, [sp, #16]
     c90:	cmp	w0, #0x2f
     c94:	b.eq	f40 <foreachfile_callback+0x2f0>  // b.none
     c98:	mov	x0, x21
     c9c:	bl	0 <opendir>
     ca0:	mov	x22, x0
     ca4:	cbz	x0, edc <foreachfile_callback+0x28c>
     ca8:	adrp	x24, 0 <lt__alloc_die_callback>
     cac:	add	x24, x24, #0x0
     cb0:	stp	x27, x28, [sp, #80]
     cb4:	b	cc4 <foreachfile_callback+0x74>
     cb8:	ldrb	w0, [x19, #19]
     cbc:	cmp	w0, #0x2e
     cc0:	b.ne	d60 <foreachfile_callback+0x110>  // b.any
     cc4:	mov	x0, x22
     cc8:	bl	0 <readdir>
     ccc:	mov	x19, x0
     cd0:	cbnz	x0, cb8 <foreachfile_callback+0x68>
     cd4:	mov	x0, x22
     cd8:	bl	0 <closedir>
     cdc:	ldr	x20, [sp, #96]
     ce0:	cbz	x20, d34 <foreachfile_callback+0xe4>
     ce4:	ldr	x0, [sp, #104]
     ce8:	cbz	x19, d30 <foreachfile_callback+0xe0>
     cec:	add	x21, x20, x0
     cf0:	cmp	x19, x21
     cf4:	b.cs	d34 <foreachfile_callback+0xe4>  // b.hs, b.nlast
     cf8:	mov	x0, x19
     cfc:	bl	0 <strlen>
     d00:	add	x0, x0, #0x1
     d04:	add	x19, x19, x0
     d08:	cmp	x21, x19
     d0c:	b.ls	d34 <foreachfile_callback+0xe4>  // b.plast
     d10:	mov	x1, x23
     d14:	mov	x0, x19
     d18:	blr	x25
     d1c:	mov	w21, w0
     d20:	ldr	x20, [sp, #96]
     d24:	cbz	w0, ce4 <foreachfile_callback+0x94>
     d28:	ldp	x27, x28, [sp, #80]
     d2c:	b	d3c <foreachfile_callback+0xec>
     d30:	cbnz	x0, efc <foreachfile_callback+0x2ac>
     d34:	ldp	x27, x28, [sp, #80]
     d38:	mov	w21, #0x0                   	// #0
     d3c:	mov	x0, x20
     d40:	bl	0 <free>
     d44:	mov	w0, w21
     d48:	ldp	x19, x20, [sp, #16]
     d4c:	ldp	x21, x22, [sp, #32]
     d50:	ldp	x23, x24, [sp, #48]
     d54:	ldp	x25, x26, [sp, #64]
     d58:	ldp	x29, x30, [sp], #112
     d5c:	ret
     d60:	ldrb	w0, [x21]
     d64:	mov	x26, #0x0                   	// #0
     d68:	cbz	w0, d78 <foreachfile_callback+0x128>
     d6c:	mov	x0, x21
     d70:	bl	0 <strlen>
     d74:	mov	x26, x0
     d78:	add	x19, x19, #0x13
     d7c:	mov	x0, x19
     d80:	bl	0 <strlen>
     d84:	add	x27, x19, x0
     d88:	mov	x20, x27
     d8c:	b	da0 <foreachfile_callback+0x150>
     d90:	ldrb	w1, [x20]
     d94:	mov	x0, x24
     d98:	bl	0 <strchr>
     d9c:	cbz	x0, ec8 <foreachfile_callback+0x278>
     da0:	mov	x28, x20
     da4:	sub	x20, x20, #0x1
     da8:	cmp	x19, x20
     dac:	b.cc	d90 <foreachfile_callback+0x140>  // b.lo, b.ul, b.last
     db0:	ldrb	w0, [x28]
     db4:	cmp	w0, #0x2e
     db8:	b.eq	f08 <foreachfile_callback+0x2b8>  // b.none
     dbc:	sub	x20, x27, #0x1
     dc0:	cmp	x19, x20
     dc4:	b.cc	dd8 <foreachfile_callback+0x188>  // b.lo, b.ul, b.last
     dc8:	b	ee8 <foreachfile_callback+0x298>
     dcc:	sub	x20, x20, #0x1
     dd0:	cmp	x19, x20
     dd4:	b.eq	ee8 <foreachfile_callback+0x298>  // b.none
     dd8:	ldrb	w0, [x20]
     ddc:	cmp	w0, #0x2e
     de0:	b.ne	dcc <foreachfile_callback+0x17c>  // b.any
     de4:	sub	x20, x20, x19
     de8:	add	x27, x20, x26
     dec:	add	x0, x27, #0x2
     df0:	bl	0 <lt__malloc>
     df4:	mov	x26, x0
     df8:	cbz	x0, eb0 <foreachfile_callback+0x260>
     dfc:	mov	x1, x21
     e00:	bl	0 <stpcpy>
     e04:	mov	x3, x0
     e08:	add	x27, x26, x27
     e0c:	mov	w4, #0x2f                  	// #47
     e10:	mov	x2, x20
     e14:	mov	x1, x19
     e18:	mov	x0, x26
     e1c:	strh	w4, [x3]
     e20:	bl	0 <strncat>
     e24:	strb	wzr, [x27, #1]
     e28:	ldrb	w0, [x26]
     e2c:	cbz	w0, f68 <foreachfile_callback+0x318>
     e30:	ldr	x20, [sp, #96]
     e34:	cbz	x20, e8c <foreachfile_callback+0x23c>
     e38:	ldr	x28, [sp, #104]
     e3c:	mov	x19, #0x0                   	// #0
     e40:	add	x27, x20, x28
     e44:	cbz	x19, ef0 <foreachfile_callback+0x2a0>
     e48:	cmp	x19, x27
     e4c:	b.cs	e8c <foreachfile_callback+0x23c>  // b.hs, b.nlast
     e50:	mov	x0, x19
     e54:	bl	0 <strlen>
     e58:	add	x0, x0, #0x1
     e5c:	add	x19, x19, x0
     e60:	cmp	x27, x19
     e64:	b.ls	e8c <foreachfile_callback+0x23c>  // b.plast
     e68:	mov	x1, x19
     e6c:	mov	x0, x26
     e70:	bl	0 <strcmp>
     e74:	cmp	w0, #0x0
     e78:	b.lt	e90 <foreachfile_callback+0x240>  // b.tstop
     e7c:	b.ne	e44 <foreachfile_callback+0x1f4>  // b.any
     e80:	mov	x0, x26
     e84:	bl	0 <free>
     e88:	b	cc4 <foreachfile_callback+0x74>
     e8c:	mov	x19, #0x0                   	// #0
     e90:	mov	x2, x19
     e94:	mov	x3, x26
     e98:	add	x1, sp, #0x68
     e9c:	add	x0, sp, #0x60
     ea0:	bl	558 <lt_argz_insert>
     ea4:	cbz	w0, e80 <foreachfile_callback+0x230>
     ea8:	mov	x0, x26
     eac:	bl	0 <free>
     eb0:	mov	x0, x22
     eb4:	mov	w21, #0x0                   	// #0
     eb8:	bl	0 <closedir>
     ebc:	ldp	x27, x28, [sp, #80]
     ec0:	ldr	x20, [sp, #96]
     ec4:	b	d3c <foreachfile_callback+0xec>
     ec8:	ldrb	w0, [x28]
     ecc:	cmp	w0, #0x2e
     ed0:	b.ne	dbc <foreachfile_callback+0x16c>  // b.any
     ed4:	mov	x27, x28
     ed8:	b	dd8 <foreachfile_callback+0x188>
     edc:	mov	w21, #0x0                   	// #0
     ee0:	ldr	x20, [sp, #96]
     ee4:	b	d3c <foreachfile_callback+0xec>
     ee8:	mov	x20, x27
     eec:	b	de4 <foreachfile_callback+0x194>
     ef0:	cbz	x28, e90 <foreachfile_callback+0x240>
     ef4:	mov	x19, x20
     ef8:	b	e68 <foreachfile_callback+0x218>
     efc:	cbz	x20, d34 <foreachfile_callback+0xe4>
     f00:	mov	x19, x20
     f04:	b	d10 <foreachfile_callback+0xc0>
     f08:	mov	x20, x28
     f0c:	b	de4 <foreachfile_callback+0x194>
     f10:	adrp	x3, 0 <lt__alloc_die_callback>
     f14:	add	x3, x3, #0x0
     f18:	adrp	x1, 0 <lt__alloc_die_callback>
     f1c:	adrp	x0, 0 <lt__alloc_die_callback>
     f20:	add	x3, x3, #0x88
     f24:	add	x1, x1, #0x0
     f28:	add	x0, x0, #0x0
     f2c:	mov	w2, #0x730                 	// #1840
     f30:	stp	x19, x20, [sp, #16]
     f34:	stp	x23, x24, [sp, #48]
     f38:	stp	x27, x28, [sp, #80]
     f3c:	bl	0 <__assert_fail>
     f40:	adrp	x3, 0 <lt__alloc_die_callback>
     f44:	add	x3, x3, #0x0
     f48:	adrp	x1, 0 <lt__alloc_die_callback>
     f4c:	adrp	x0, 0 <lt__alloc_die_callback>
     f50:	add	x3, x3, #0x88
     f54:	add	x1, x1, #0x0
     f58:	add	x0, x0, #0x0
     f5c:	mov	w2, #0x733                 	// #1843
     f60:	stp	x27, x28, [sp, #80]
     f64:	bl	0 <__assert_fail>
     f68:	adrp	x3, 0 <lt__alloc_die_callback>
     f6c:	add	x3, x3, #0x0
     f70:	adrp	x1, 0 <lt__alloc_die_callback>
     f74:	adrp	x0, 0 <lt__alloc_die_callback>
     f78:	add	x3, x3, #0xa0
     f7c:	add	x1, x1, #0x0
     f80:	add	x0, x0, #0x0
     f84:	mov	w2, #0x6dd                 	// #1757
     f88:	bl	0 <__assert_fail>
     f8c:	nop

0000000000000f90 <loader_init.constprop.0>:
     f90:	stp	x29, x30, [sp, #-48]!
     f94:	mov	x29, sp
     f98:	stp	x19, x20, [sp, #16]
     f9c:	str	x21, [sp, #32]
     fa0:	cbz	x0, 1000 <loader_init.constprop.0+0x70>
     fa4:	mov	x1, x0
     fa8:	mov	x0, #0x0                   	// #0
     fac:	blr	x1
     fb0:	cmp	x0, #0x0
     fb4:	mov	x20, x0
     fb8:	cset	w21, ne  // ne = any
     fbc:	mov	x0, x20
     fc0:	bl	0 <lt_dlloader_add>
     fc4:	cmp	w0, #0x0
     fc8:	mov	w19, w0
     fcc:	ccmp	w21, #0x0, #0x0, eq  // eq = none
     fd0:	b.eq	1030 <loader_init.constprop.0+0xa0>  // b.none
     fd4:	cbnz	w0, fec <loader_init.constprop.0+0x5c>
     fd8:	ldr	x1, [x20, #40]
     fdc:	cbz	x1, fec <loader_init.constprop.0+0x5c>
     fe0:	ldr	x0, [x20, #56]
     fe4:	blr	x1
     fe8:	cbnz	w0, 100c <loader_init.constprop.0+0x7c>
     fec:	mov	w0, w19
     ff0:	ldp	x19, x20, [sp, #16]
     ff4:	ldr	x21, [sp, #32]
     ff8:	ldp	x29, x30, [sp], #48
     ffc:	ret
    1000:	mov	w21, #0x0                   	// #0
    1004:	mov	x20, #0x0                   	// #0
    1008:	b	fbc <loader_init.constprop.0+0x2c>
    100c:	mov	w19, #0x1                   	// #1
    1010:	mov	w0, #0x3                   	// #3
    1014:	bl	0 <lt__error_string>
    1018:	bl	0 <lt__set_last_error>
    101c:	mov	w0, w19
    1020:	ldp	x19, x20, [sp, #16]
    1024:	ldr	x21, [sp, #32]
    1028:	ldp	x29, x30, [sp], #48
    102c:	ret
    1030:	adrp	x3, 0 <lt__alloc_die_callback>
    1034:	add	x3, x3, #0x0
    1038:	adrp	x1, 0 <lt__alloc_die_callback>
    103c:	adrp	x0, 0 <lt__alloc_die_callback>
    1040:	add	x3, x3, #0xb8
    1044:	add	x1, x1, #0x0
    1048:	add	x0, x0, #0x0
    104c:	mov	w2, #0xc7                  	// #199
    1050:	bl	0 <__assert_fail>
    1054:	nop

0000000000001058 <lt_dlinit>:
    1058:	adrp	x3, 0 <lt__alloc_die_callback>
    105c:	add	x2, x3, #0x0
    1060:	mov	w0, #0x0                   	// #0
    1064:	ldr	w1, [x2, #16]
    1068:	add	w1, w1, #0x1
    106c:	str	w1, [x2, #16]
    1070:	cmp	w1, #0x1
    1074:	b.eq	107c <lt_dlinit+0x24>  // b.none
    1078:	ret
    107c:	stp	x29, x30, [sp, #-16]!
    1080:	adrp	x1, 0 <lt__alloc_die_callback>
    1084:	add	x1, x1, #0x0
    1088:	adrp	x4, 0 <lt__alloc_die>
    108c:	mov	x29, sp
    1090:	adrp	x0, 0 <preopen_LTX_get_vtable>
    1094:	str	xzr, [x3]
    1098:	add	x0, x0, #0x0
    109c:	str	x1, [x4]
    10a0:	str	xzr, [x2, #8]
    10a4:	bl	f90 <loader_init.constprop.0>
    10a8:	cbz	w0, 10b4 <lt_dlinit+0x5c>
    10ac:	ldp	x29, x30, [sp], #16
    10b0:	ret
    10b4:	adrp	x0, 0 <lt_libltdl_LTX_preloaded_symbols>
    10b8:	add	x0, x0, #0x0
    10bc:	bl	0 <lt_dlpreload>
    10c0:	cbnz	w0, 10ac <lt_dlinit+0x54>
    10c4:	ldp	x29, x30, [sp], #16
    10c8:	adrp	x1, 0 <lt__alloc_die_callback>
    10cc:	adrp	x0, 0 <lt__alloc_die_callback>
    10d0:	add	x1, x1, #0x0
    10d4:	add	x0, x0, #0x0
    10d8:	b	0 <lt_dlpreload_open>
    10dc:	nop

00000000000010e0 <lt_dladvise_init>:
    10e0:	stp	x29, x30, [sp, #-32]!
    10e4:	mov	x29, sp
    10e8:	str	x19, [sp, #16]
    10ec:	mov	x19, x0
    10f0:	mov	x0, #0x4                   	// #4
    10f4:	bl	0 <lt__zalloc>
    10f8:	cmp	x0, #0x0
    10fc:	str	x0, [x19]
    1100:	cset	w0, eq  // eq = none
    1104:	ldr	x19, [sp, #16]
    1108:	ldp	x29, x30, [sp], #32
    110c:	ret

0000000000001110 <lt_dladvise_destroy>:
    1110:	cbz	x0, 1140 <lt_dladvise_destroy+0x30>
    1114:	stp	x29, x30, [sp, #-32]!
    1118:	mov	x29, sp
    111c:	str	x19, [sp, #16]
    1120:	mov	x19, x0
    1124:	ldr	x0, [x0]
    1128:	bl	0 <free>
    112c:	str	xzr, [x19]
    1130:	mov	w0, #0x0                   	// #0
    1134:	ldr	x19, [sp, #16]
    1138:	ldp	x29, x30, [sp], #32
    113c:	ret
    1140:	mov	w0, #0x0                   	// #0
    1144:	ret

0000000000001148 <lt_dladvise_ext>:
    1148:	cbz	x0, 1168 <lt_dladvise_ext+0x20>
    114c:	ldr	x1, [x0]
    1150:	cbz	x1, 1168 <lt_dladvise_ext+0x20>
    1154:	ldrb	w2, [x1]
    1158:	mov	w0, #0x0                   	// #0
    115c:	orr	w2, w2, #0x1
    1160:	strb	w2, [x1]
    1164:	ret
    1168:	stp	x29, x30, [sp, #-16]!
    116c:	adrp	x3, 0 <lt__alloc_die_callback>
    1170:	add	x3, x3, #0x0
    1174:	mov	x29, sp
    1178:	adrp	x1, 0 <lt__alloc_die_callback>
    117c:	adrp	x0, 0 <lt__alloc_die_callback>
    1180:	add	x3, x3, #0xc8
    1184:	add	x1, x1, #0x0
    1188:	add	x0, x0, #0x0
    118c:	mov	w2, #0x631                 	// #1585
    1190:	bl	0 <__assert_fail>
    1194:	nop

0000000000001198 <lt_dladvise_resident>:
    1198:	cbz	x0, 11b8 <lt_dladvise_resident+0x20>
    119c:	ldr	x1, [x0]
    11a0:	cbz	x1, 11b8 <lt_dladvise_resident+0x20>
    11a4:	ldrb	w2, [x1]
    11a8:	mov	w0, #0x0                   	// #0
    11ac:	orr	w2, w2, #0x2
    11b0:	strb	w2, [x1]
    11b4:	ret
    11b8:	stp	x29, x30, [sp, #-16]!
    11bc:	adrp	x3, 0 <lt__alloc_die_callback>
    11c0:	add	x3, x3, #0x0
    11c4:	mov	x29, sp
    11c8:	adrp	x1, 0 <lt__alloc_die_callback>
    11cc:	adrp	x0, 0 <lt__alloc_die_callback>
    11d0:	add	x3, x3, #0xd8
    11d4:	add	x1, x1, #0x0
    11d8:	add	x0, x0, #0x0
    11dc:	mov	w2, #0x639                 	// #1593
    11e0:	bl	0 <__assert_fail>
    11e4:	nop

00000000000011e8 <lt_dladvise_local>:
    11e8:	cbz	x0, 1208 <lt_dladvise_local+0x20>
    11ec:	ldr	x1, [x0]
    11f0:	cbz	x1, 1208 <lt_dladvise_local+0x20>
    11f4:	ldrb	w2, [x1]
    11f8:	mov	w0, #0x0                   	// #0
    11fc:	orr	w2, w2, #0x8
    1200:	strb	w2, [x1]
    1204:	ret
    1208:	stp	x29, x30, [sp, #-16]!
    120c:	adrp	x3, 0 <lt__alloc_die_callback>
    1210:	add	x3, x3, #0x0
    1214:	mov	x29, sp
    1218:	adrp	x1, 0 <lt__alloc_die_callback>
    121c:	adrp	x0, 0 <lt__alloc_die_callback>
    1220:	add	x3, x3, #0xf0
    1224:	add	x1, x1, #0x0
    1228:	add	x0, x0, #0x0
    122c:	mov	w2, #0x641                 	// #1601
    1230:	bl	0 <__assert_fail>
    1234:	nop

0000000000001238 <lt_dladvise_global>:
    1238:	cbz	x0, 1258 <lt_dladvise_global+0x20>
    123c:	ldr	x1, [x0]
    1240:	cbz	x1, 1258 <lt_dladvise_global+0x20>
    1244:	ldrb	w2, [x1]
    1248:	mov	w0, #0x0                   	// #0
    124c:	orr	w2, w2, #0x4
    1250:	strb	w2, [x1]
    1254:	ret
    1258:	stp	x29, x30, [sp, #-16]!
    125c:	adrp	x3, 0 <lt__alloc_die_callback>
    1260:	add	x3, x3, #0x0
    1264:	mov	x29, sp
    1268:	adrp	x1, 0 <lt__alloc_die_callback>
    126c:	adrp	x0, 0 <lt__alloc_die_callback>
    1270:	add	x3, x3, #0x108
    1274:	add	x1, x1, #0x0
    1278:	add	x0, x0, #0x0
    127c:	mov	w2, #0x649                 	// #1609
    1280:	bl	0 <__assert_fail>
    1284:	nop

0000000000001288 <lt_dladvise_preload>:
    1288:	cbz	x0, 12a8 <lt_dladvise_preload+0x20>
    128c:	ldr	x1, [x0]
    1290:	cbz	x1, 12a8 <lt_dladvise_preload+0x20>
    1294:	ldrb	w2, [x1]
    1298:	mov	w0, #0x0                   	// #0
    129c:	orr	w2, w2, #0x10
    12a0:	strb	w2, [x1]
    12a4:	ret
    12a8:	stp	x29, x30, [sp, #-16]!
    12ac:	adrp	x3, 0 <lt__alloc_die_callback>
    12b0:	add	x3, x3, #0x0
    12b4:	mov	x29, sp
    12b8:	adrp	x1, 0 <lt__alloc_die_callback>
    12bc:	adrp	x0, 0 <lt__alloc_die_callback>
    12c0:	add	x3, x3, #0x120
    12c4:	add	x1, x1, #0x0
    12c8:	add	x0, x0, #0x0
    12cc:	mov	w2, #0x651                 	// #1617
    12d0:	bl	0 <__assert_fail>
    12d4:	nop

00000000000012d8 <lt_dlforeachfile>:
    12d8:	stp	x29, x30, [sp, #-48]!
    12dc:	mov	x29, sp
    12e0:	stp	x19, x20, [sp, #16]
    12e4:	mov	x19, x2
    12e8:	str	x1, [sp, #40]
    12ec:	cbz	x0, 1314 <lt_dlforeachfile+0x3c>
    12f0:	mov	x4, x2
    12f4:	add	x3, sp, #0x28
    12f8:	adrp	x2, 0 <lt__alloc_die_callback>
    12fc:	mov	x1, #0x0                   	// #0
    1300:	add	x2, x2, #0x0
    1304:	bl	780 <foreach_dirinpath>
    1308:	ldp	x19, x20, [sp, #16]
    130c:	ldp	x29, x30, [sp], #48
    1310:	ret
    1314:	adrp	x0, 0 <lt__alloc_die_callback>
    1318:	adrp	x20, 0 <lt__alloc_die_callback>
    131c:	add	x20, x20, #0x0
    1320:	add	x3, sp, #0x28
    1324:	ldr	x0, [x0]
    1328:	mov	x2, x20
    132c:	mov	x4, x19
    1330:	mov	x1, #0x0                   	// #0
    1334:	bl	780 <foreach_dirinpath>
    1338:	cbnz	w0, 1308 <lt_dlforeachfile+0x30>
    133c:	adrp	x0, 0 <lt__alloc_die_callback>
    1340:	add	x0, x0, #0x0
    1344:	bl	0 <getenv>
    1348:	mov	x4, x19
    134c:	add	x3, sp, #0x28
    1350:	mov	x2, x20
    1354:	mov	x1, #0x0                   	// #0
    1358:	bl	780 <foreach_dirinpath>
    135c:	cbnz	w0, 1308 <lt_dlforeachfile+0x30>
    1360:	adrp	x0, 0 <lt__alloc_die_callback>
    1364:	add	x0, x0, #0x0
    1368:	bl	0 <getenv>
    136c:	mov	x4, x19
    1370:	add	x3, sp, #0x28
    1374:	mov	x2, x20
    1378:	mov	x1, #0x0                   	// #0
    137c:	bl	780 <foreach_dirinpath>
    1380:	cbnz	w0, 1308 <lt_dlforeachfile+0x30>
    1384:	adrp	x0, 0 <lt__alloc_die_callback>
    1388:	add	x0, x0, #0x0
    138c:	mov	x4, x19
    1390:	add	x3, sp, #0x28
    1394:	mov	x2, x20
    1398:	mov	x1, #0x0                   	// #0
    139c:	add	x0, x0, #0x138
    13a0:	bl	780 <foreach_dirinpath>
    13a4:	b	1308 <lt_dlforeachfile+0x30>

00000000000013a8 <lt_dlclose>:
    13a8:	stp	x29, x30, [sp, #-32]!
    13ac:	adrp	x4, 0 <lt__alloc_die_callback>
    13b0:	mov	x29, sp
    13b4:	ldr	x3, [x4]
    13b8:	stp	x19, x20, [sp, #16]
    13bc:	mov	x19, x0
    13c0:	cmp	x3, #0x0
    13c4:	ccmp	x3, x0, #0x4, ne  // ne = any
    13c8:	b.eq	14ac <lt_dlclose+0x104>  // b.none
    13cc:	mov	x1, x3
    13d0:	mov	x2, x1
    13d4:	ldr	x1, [x1]
    13d8:	cmp	x1, #0x0
    13dc:	ccmp	x19, x1, #0x4, ne  // ne = any
    13e0:	b.ne	13d0 <lt_dlclose+0x28>  // b.any
    13e4:	cbz	x1, 14b8 <lt_dlclose+0x110>
    13e8:	ldr	w0, [x19, #32]
    13ec:	ldrb	w1, [x19, #36]
    13f0:	sub	w0, w0, #0x1
    13f4:	str	w0, [x19, #32]
    13f8:	and	w1, w1, #0x1
    13fc:	cmp	w0, #0x0
    1400:	b.le	141c <lt_dlclose+0x74>
    1404:	mov	w20, #0x0                   	// #0
    1408:	cbnz	w1, 1420 <lt_dlclose+0x78>
    140c:	mov	w0, w20
    1410:	ldp	x19, x20, [sp, #16]
    1414:	ldp	x29, x30, [sp], #32
    1418:	ret
    141c:	cbz	w1, 1440 <lt_dlclose+0x98>
    1420:	mov	w20, #0x1                   	// #1
    1424:	mov	w0, #0x10                  	// #16
    1428:	bl	0 <lt__error_string>
    142c:	bl	0 <lt__set_last_error>
    1430:	mov	w0, w20
    1434:	ldp	x19, x20, [sp, #16]
    1438:	ldp	x29, x30, [sp], #32
    143c:	ret
    1440:	cmp	x3, x19
    1444:	ldp	x3, x1, [x19]
    1448:	ldr	x0, [x1, #56]
    144c:	b.eq	14cc <lt_dlclose+0x124>  // b.none
    1450:	str	x3, [x2]
    1454:	ldr	x2, [x1, #24]
    1458:	ldr	x1, [x19, #56]
    145c:	blr	x2
    1460:	mov	w20, w0
    1464:	ldr	w1, [x19, #40]
    1468:	cbz	w1, 147c <lt_dlclose+0xd4>
    146c:	add	x1, x19, #0x30
    1470:	add	x0, x19, #0x28
    1474:	bl	1688 <unload_deplibs.isra.0.part.0>
    1478:	add	w20, w20, w0
    147c:	ldr	x0, [x19, #72]
    1480:	bl	0 <free>
    1484:	ldr	x0, [x19, #16]
    1488:	bl	0 <free>
    148c:	ldr	x0, [x19, #24]
    1490:	bl	0 <free>
    1494:	mov	x0, x19
    1498:	bl	0 <free>
    149c:	mov	w0, w20
    14a0:	ldp	x19, x20, [sp, #16]
    14a4:	ldp	x29, x30, [sp], #32
    14a8:	ret
    14ac:	mov	x2, x3
    14b0:	mov	x1, x3
    14b4:	b	13e4 <lt_dlclose+0x3c>
    14b8:	mov	w20, #0x1                   	// #1
    14bc:	mov	w0, #0xc                   	// #12
    14c0:	bl	0 <lt__error_string>
    14c4:	bl	0 <lt__set_last_error>
    14c8:	b	140c <lt_dlclose+0x64>
    14cc:	str	x3, [x4]
    14d0:	b	1454 <lt_dlclose+0xac>
    14d4:	nop

00000000000014d8 <lt_dlexit>:
    14d8:	stp	x29, x30, [sp, #-48]!
    14dc:	adrp	x3, 0 <lt__alloc_die_callback>
    14e0:	mov	x29, sp
    14e4:	stp	x21, x22, [sp, #32]
    14e8:	add	x22, x3, #0x0
    14ec:	ldr	w0, [x22, #16]
    14f0:	cbz	w0, 1570 <lt_dlexit+0x98>
    14f4:	sub	w0, w0, #0x1
    14f8:	str	w0, [x22, #16]
    14fc:	ldr	x4, [x3]
    1500:	mov	w21, #0x0                   	// #0
    1504:	cbnz	w0, 1580 <lt_dlexit+0xa8>
    1508:	stp	x19, x20, [sp, #16]
    150c:	mov	x0, x4
    1510:	mov	w2, #0x0                   	// #0
    1514:	cbnz	x4, 1528 <lt_dlexit+0x50>
    1518:	b	1670 <lt_dlexit+0x198>
    151c:	ldr	x0, [x0]
    1520:	mov	w2, #0x1                   	// #1
    1524:	cbz	x0, 166c <lt_dlexit+0x194>
    1528:	ldrb	w1, [x0, #36]
    152c:	tbnz	w1, #0, 151c <lt_dlexit+0x44>
    1530:	cbz	w2, 1680 <lt_dlexit+0x1a8>
    1534:	str	x0, [x3]
    1538:	mov	w21, #0x0                   	// #0
    153c:	mov	w20, #0x1                   	// #1
    1540:	mov	w2, #0x0                   	// #0
    1544:	nop
    1548:	ldrb	w1, [x0, #36]
    154c:	ldr	x19, [x0]
    1550:	tbnz	w1, #0, 1564 <lt_dlexit+0x8c>
    1554:	ldr	w1, [x0, #32]
    1558:	mov	w2, #0x1                   	// #1
    155c:	cmp	w1, w20
    1560:	b.le	1590 <lt_dlexit+0xb8>
    1564:	cbz	x19, 160c <lt_dlexit+0x134>
    1568:	mov	x0, x19
    156c:	b	1548 <lt_dlexit+0x70>
    1570:	mov	w0, #0xf                   	// #15
    1574:	mov	w21, #0x1                   	// #1
    1578:	bl	0 <lt__error_string>
    157c:	bl	0 <lt__set_last_error>
    1580:	mov	w0, w21
    1584:	ldp	x21, x22, [sp, #32]
    1588:	ldp	x29, x30, [sp], #48
    158c:	ret
    1590:	bl	13a8 <lt_dlclose>
    1594:	cmp	w0, #0x0
    1598:	cinc	w21, w21, ne  // ne = any
    159c:	cbnz	x19, 1614 <lt_dlexit+0x13c>
    15a0:	ldr	x0, [x22]
    15a4:	add	w20, w20, #0x1
    15a8:	cbnz	x0, 1540 <lt_dlexit+0x68>
    15ac:	cbz	w21, 1670 <lt_dlexit+0x198>
    15b0:	mov	x0, #0x0                   	// #0
    15b4:	bl	0 <lt_dlloader_next>
    15b8:	mov	x19, x0
    15bc:	cbz	x19, 15ec <lt_dlexit+0x114>
    15c0:	mov	x0, x19
    15c4:	mov	x20, x19
    15c8:	bl	0 <lt_dlloader_next>
    15cc:	mov	x19, x0
    15d0:	mov	x0, x20
    15d4:	bl	0 <lt_dlloader_get>
    15d8:	ldr	x0, [x0]
    15dc:	bl	0 <lt_dlloader_remove>
    15e0:	cbz	x0, 164c <lt_dlexit+0x174>
    15e4:	bl	0 <free>
    15e8:	cbnz	x19, 15c0 <lt_dlexit+0xe8>
    15ec:	ldr	x0, [x22, #8]
    15f0:	bl	0 <free>
    15f4:	str	xzr, [x22, #8]
    15f8:	mov	w0, w21
    15fc:	ldp	x19, x20, [sp, #16]
    1600:	ldp	x21, x22, [sp, #32]
    1604:	ldp	x29, x30, [sp], #48
    1608:	ret
    160c:	cbnz	w2, 15a0 <lt_dlexit+0xc8>
    1610:	b	15ac <lt_dlexit+0xd4>
    1614:	ldr	x1, [x22]
    1618:	cbz	x1, 15a0 <lt_dlexit+0xc8>
    161c:	cmp	x19, x1
    1620:	b.eq	163c <lt_dlexit+0x164>  // b.none
    1624:	mov	x0, x1
    1628:	b	1630 <lt_dlexit+0x158>
    162c:	b.eq	165c <lt_dlexit+0x184>  // b.none
    1630:	ldr	x0, [x0]
    1634:	cmp	x19, x0
    1638:	cbnz	x0, 162c <lt_dlexit+0x154>
    163c:	mov	x19, x1
    1640:	mov	w2, #0x1                   	// #1
    1644:	mov	x0, x19
    1648:	b	1548 <lt_dlexit+0x70>
    164c:	bl	0 <lt__get_last_error>
    1650:	cmp	x0, #0x0
    1654:	cinc	w21, w21, ne  // ne = any
    1658:	b	15bc <lt_dlexit+0xe4>
    165c:	mov	x1, x19
    1660:	mov	w2, #0x1                   	// #1
    1664:	mov	x19, x1
    1668:	b	1644 <lt_dlexit+0x16c>
    166c:	str	xzr, [x3]
    1670:	mov	w21, #0x0                   	// #0
    1674:	mov	x0, #0x0                   	// #0
    1678:	bl	0 <lt__set_last_error>
    167c:	b	15b0 <lt_dlexit+0xd8>
    1680:	mov	x0, x4
    1684:	b	1538 <lt_dlexit+0x60>

0000000000001688 <unload_deplibs.isra.0.part.0>:
    1688:	stp	x29, x30, [sp, #-48]!
    168c:	mov	x29, sp
    1690:	ldr	w4, [x0]
    1694:	stp	x19, x20, [sp, #16]
    1698:	mov	x20, x1
    169c:	cmp	w4, #0x0
    16a0:	stp	x21, x22, [sp, #32]
    16a4:	ldr	x3, [x1]
    16a8:	b.le	170c <unload_deplibs.isra.0.part.0+0x84>
    16ac:	mov	x22, x0
    16b0:	mov	x19, #0x0                   	// #0
    16b4:	mov	w21, #0x0                   	// #0
    16b8:	b	16c4 <unload_deplibs.isra.0.part.0+0x3c>
    16bc:	cmp	w4, w19
    16c0:	b.le	16ec <unload_deplibs.isra.0.part.0+0x64>
    16c4:	ldr	x0, [x3, x19, lsl #3]
    16c8:	add	x19, x19, #0x1
    16cc:	ldrb	w2, [x0, #36]
    16d0:	tbnz	w2, #0, 16bc <unload_deplibs.isra.0.part.0+0x34>
    16d4:	bl	13a8 <lt_dlclose>
    16d8:	add	w21, w21, w0
    16dc:	ldr	w4, [x22]
    16e0:	ldr	x3, [x20]
    16e4:	cmp	w4, w19
    16e8:	b.gt	16c4 <unload_deplibs.isra.0.part.0+0x3c>
    16ec:	mov	x0, x3
    16f0:	bl	0 <free>
    16f4:	mov	w0, w21
    16f8:	ldp	x21, x22, [sp, #32]
    16fc:	str	xzr, [x20]
    1700:	ldp	x19, x20, [sp, #16]
    1704:	ldp	x29, x30, [sp], #48
    1708:	ret
    170c:	mov	x0, x3
    1710:	mov	w21, #0x0                   	// #0
    1714:	bl	0 <free>
    1718:	mov	w0, w21
    171c:	ldp	x21, x22, [sp, #32]
    1720:	str	xzr, [x20]
    1724:	ldp	x19, x20, [sp, #16]
    1728:	ldp	x29, x30, [sp], #48
    172c:	ret

0000000000001730 <try_dlopen>:
    1730:	stp	x29, x30, [sp, #-224]!
    1734:	mov	x29, sp
    1738:	stp	x21, x22, [sp, #32]
    173c:	mov	x21, x0
    1740:	ldr	x0, [x0]
    1744:	stp	x19, x20, [sp, #16]
    1748:	stp	x23, x24, [sp, #48]
    174c:	str	x3, [sp, #104]
    1750:	stp	xzr, xzr, [sp, #160]
    1754:	cbnz	x0, 2254 <try_dlopen+0xb24>
    1758:	mov	x19, x1
    175c:	mov	x22, x2
    1760:	stp	x27, x28, [sp, #80]
    1764:	bl	0 <lt__get_last_error>
    1768:	str	x0, [sp, #112]
    176c:	cbz	x19, 1b8c <try_dlopen+0x45c>
    1770:	ldrb	w0, [x19]
    1774:	cbz	w0, 22a8 <try_dlopen+0xb78>
    1778:	mov	x0, x19
    177c:	cbz	x22, 1ac4 <try_dlopen+0x394>
    1780:	bl	0 <strlen>
    1784:	mov	x20, x0
    1788:	ldrb	w1, [x22]
    178c:	mov	x0, #0x0                   	// #0
    1790:	cbz	w1, 179c <try_dlopen+0x6c>
    1794:	mov	x0, x22
    1798:	bl	0 <strlen>
    179c:	add	x20, x20, #0x1
    17a0:	add	x0, x20, x0
    17a4:	bl	0 <lt__malloc>
    17a8:	mov	x23, x0
    17ac:	cbz	x0, 1ad0 <try_dlopen+0x3a0>
    17b0:	adrp	x1, 0 <lt__alloc_die_callback>
    17b4:	mov	x3, x22
    17b8:	mov	x2, x19
    17bc:	add	x1, x1, #0x0
    17c0:	bl	0 <sprintf>
    17c4:	add	x1, sp, #0xa0
    17c8:	mov	x0, x23
    17cc:	bl	18 <canonicalize_path>
    17d0:	mov	w24, w0
    17d4:	cbnz	w0, 1b44 <try_dlopen+0x414>
    17d8:	ldr	x22, [sp, #160]
    17dc:	mov	w1, #0x2f                  	// #47
    17e0:	mov	x0, x22
    17e4:	bl	0 <strrchr>
    17e8:	mov	x19, x0
    17ec:	cbz	x0, 1b84 <try_dlopen+0x454>
    17f0:	add	x28, x0, #0x1
    17f4:	sub	x20, x28, x22
    17f8:	add	x0, x20, #0x1
    17fc:	bl	0 <lt__malloc>
    1800:	str	x0, [sp, #168]
    1804:	mov	x27, x0
    1808:	cbz	x0, 1af0 <try_dlopen+0x3c0>
    180c:	ldr	x1, [sp, #160]
    1810:	mov	x2, x20
    1814:	mov	x22, x28
    1818:	bl	0 <lt_strlcpy>
    181c:	ldr	x0, [sp, #168]
    1820:	strb	wzr, [x0, x20]
    1824:	ldrb	w0, [x22]
    1828:	cbz	w0, 2280 <try_dlopen+0xb50>
    182c:	mov	x0, x22
    1830:	mov	w1, #0x2e                  	// #46
    1834:	bl	0 <strrchr>
    1838:	mov	x20, x0
    183c:	cbz	x0, 1ca0 <try_dlopen+0x570>
    1840:	sub	x27, x20, x22
    1844:	add	x0, x27, #0x1
    1848:	bl	0 <lt__malloc>
    184c:	mov	x19, x0
    1850:	cbz	x0, 1cb0 <try_dlopen+0x580>
    1854:	cmp	x27, #0x0
    1858:	b.le	1890 <try_dlopen+0x160>
    185c:	bl	0 <__ctype_b_loc>
    1860:	mov	x1, #0x0                   	// #0
    1864:	mov	w5, #0x5f                  	// #95
    1868:	ldrb	w2, [x22, x1]
    186c:	ldr	x4, [x0]
    1870:	ubfiz	x3, x2, #1, #8
    1874:	ldrh	w3, [x4, x3]
    1878:	tst	x3, #0x8
    187c:	csel	w2, w2, w5, ne  // ne = any
    1880:	strb	w2, [x19, x1]
    1884:	add	x1, x1, #0x1
    1888:	cmp	x27, x1
    188c:	b.ne	1868 <try_dlopen+0x138>  // b.any
    1890:	strb	wzr, [x19, x27]
    1894:	ldr	x0, [sp, #168]
    1898:	cbz	x0, 1cc0 <try_dlopen+0x590>
    189c:	mov	x27, #0x0                   	// #0
    18a0:	ldr	x0, [sp, #104]
    18a4:	cbz	x0, 18b0 <try_dlopen+0x180>
    18a8:	ldrb	w0, [x0]
    18ac:	tbnz	w0, #4, 1c98 <try_dlopen+0x568>
    18b0:	adrp	x28, 0 <lt__alloc_die_callback>
    18b4:	add	x0, x28, #0x0
    18b8:	mov	x1, x0
    18bc:	mov	x0, x20
    18c0:	str	x1, [sp, #128]
    18c4:	add	x1, x1, #0x180
    18c8:	bl	0 <strcmp>
    18cc:	cbnz	w0, 1c48 <try_dlopen+0x518>
    18d0:	ldr	x0, [sp, #168]
    18d4:	stp	xzr, xzr, [sp, #184]
    18d8:	stp	xzr, xzr, [sp, #200]
    18dc:	cbz	x0, 1dbc <try_dlopen+0x68c>
    18e0:	mov	x0, x23
    18e4:	adrp	x1, 0 <lt__alloc_die_callback>
    18e8:	add	x1, x1, #0x0
    18ec:	bl	0 <fopen>
    18f0:	mov	x24, x0
    18f4:	cbz	x24, 1f64 <try_dlopen+0x834>
    18f8:	mov	x0, #0x800                 	// #2048
    18fc:	bl	0 <lt__malloc>
    1900:	mov	w1, #0x1                   	// #1
    1904:	str	w1, [sp, #148]
    1908:	mov	x28, x0
    190c:	mov	x20, #0x800                 	// #2048
    1910:	cbz	x0, 2234 <try_dlopen+0xb04>
    1914:	adrp	x1, 0 <lt__alloc_die_callback>
    1918:	adrp	x0, 0 <lt__alloc_die_callback>
    191c:	add	x1, x1, #0x0
    1920:	add	x0, x0, #0x0
    1924:	stp	x25, x26, [sp, #64]
    1928:	str	x1, [sp, #136]
    192c:	str	x0, [sp, #152]
    1930:	mov	x0, x24
    1934:	bl	0 <feof>
    1938:	cbnz	w0, 2068 <try_dlopen+0x938>
    193c:	add	x4, x28, x20
    1940:	mov	x2, x24
    1944:	mov	w1, w20
    1948:	mov	x0, x28
    194c:	str	x4, [sp, #120]
    1950:	sturb	wzr, [x4, #-2]
    1954:	bl	0 <fgets>
    1958:	ldr	x4, [sp, #120]
    195c:	cbnz	x0, 19b0 <try_dlopen+0x280>
    1960:	b	2068 <try_dlopen+0x938>
    1964:	mov	x0, x24
    1968:	bl	0 <feof>
    196c:	cbnz	w0, 19c0 <try_dlopen+0x290>
    1970:	lsl	x25, x20, #1
    1974:	mov	x0, x28
    1978:	mov	x1, x25
    197c:	bl	0 <lt__realloc>
    1980:	mov	x28, x0
    1984:	cbz	x0, 1ed8 <try_dlopen+0x7a8>
    1988:	add	x26, x0, x25
    198c:	sub	x0, x20, #0x1
    1990:	add	x0, x28, x0
    1994:	mov	x2, x24
    1998:	add	w1, w20, #0x1
    199c:	sturb	wzr, [x26, #-2]
    19a0:	bl	0 <fgets>
    19a4:	cbz	x0, 19c0 <try_dlopen+0x290>
    19a8:	mov	x20, x25
    19ac:	mov	x4, x26
    19b0:	ldurb	w0, [x4, #-2]
    19b4:	cmp	w0, #0x0
    19b8:	ccmp	w0, #0xa, #0x4, ne  // ne = any
    19bc:	b.ne	1964 <try_dlopen+0x234>  // b.any
    19c0:	ldrb	w0, [x28]
    19c4:	cmp	w0, #0x23
    19c8:	ccmp	w0, #0xa, #0x4, ne  // ne = any
    19cc:	b.eq	1930 <try_dlopen+0x200>  // b.none
    19d0:	ldr	x1, [sp, #136]
    19d4:	mov	x0, x28
    19d8:	mov	x2, #0x7                   	// #7
    19dc:	bl	0 <strncmp>
    19e0:	cbz	w0, 1ec4 <try_dlopen+0x794>
    19e4:	ldr	x1, [sp, #152]
    19e8:	mov	x0, x28
    19ec:	mov	x2, #0xc                   	// #12
    19f0:	bl	0 <strncmp>
    19f4:	cbz	w0, 1f44 <try_dlopen+0x814>
    19f8:	adrp	x1, 0 <lt__alloc_die_callback>
    19fc:	mov	x0, x28
    1a00:	add	x1, x1, #0x0
    1a04:	mov	x2, #0x7                   	// #7
    1a08:	bl	0 <strncmp>
    1a0c:	cbz	w0, 1f54 <try_dlopen+0x824>
    1a10:	adrp	x1, 0 <lt__alloc_die_callback>
    1a14:	mov	x0, x28
    1a18:	add	x1, x1, #0x0
    1a1c:	mov	x2, #0x10                  	// #16
    1a20:	bl	0 <strncmp>
    1a24:	cbz	w0, 2058 <try_dlopen+0x928>
    1a28:	adrp	x1, 0 <lt__alloc_die_callback>
    1a2c:	mov	x0, x28
    1a30:	add	x1, x1, #0x0
    1a34:	bl	0 <strcmp>
    1a38:	cbz	w0, 204c <try_dlopen+0x91c>
    1a3c:	adrp	x1, 0 <lt__alloc_die_callback>
    1a40:	mov	x0, x28
    1a44:	add	x1, x1, #0x0
    1a48:	bl	0 <strcmp>
    1a4c:	cbz	w0, 224c <try_dlopen+0xb1c>
    1a50:	ldr	x0, [sp, #184]
    1a54:	cbnz	x0, 1930 <try_dlopen+0x200>
    1a58:	adrp	x1, 0 <lt__alloc_die_callback>
    1a5c:	mov	x0, x28
    1a60:	add	x1, x1, #0x0
    1a64:	mov	x2, #0xe                   	// #14
    1a68:	bl	0 <strncmp>
    1a6c:	cbnz	w0, 1930 <try_dlopen+0x200>
    1a70:	add	x1, x28, #0xe
    1a74:	add	x0, sp, #0xb8
    1a78:	bl	468 <trim>
    1a7c:	cbnz	w0, 1ed8 <try_dlopen+0x7a8>
    1a80:	ldr	x0, [sp, #184]
    1a84:	cbz	x0, 1930 <try_dlopen+0x200>
    1a88:	mov	w1, #0x20                  	// #32
    1a8c:	bl	0 <strrchr>
    1a90:	cbz	x0, 1930 <try_dlopen+0x200>
    1a94:	add	x0, x0, #0x1
    1a98:	bl	0 <lt__strdup>
    1a9c:	mov	x1, x0
    1aa0:	cbz	x0, 1ed8 <try_dlopen+0x7a8>
    1aa4:	ldr	x0, [sp, #184]
    1aa8:	str	x1, [sp, #120]
    1aac:	cmp	x1, x0
    1ab0:	b.eq	1930 <try_dlopen+0x200>  // b.none
    1ab4:	bl	0 <free>
    1ab8:	ldr	x1, [sp, #120]
    1abc:	str	x1, [sp, #184]
    1ac0:	b	1930 <try_dlopen+0x200>
    1ac4:	bl	0 <lt__strdup>
    1ac8:	mov	x23, x0
    1acc:	cbnz	x0, 17c4 <try_dlopen+0x94>
    1ad0:	mov	w24, #0x1                   	// #1
    1ad4:	mov	w0, w24
    1ad8:	ldp	x19, x20, [sp, #16]
    1adc:	ldp	x21, x22, [sp, #32]
    1ae0:	ldp	x23, x24, [sp, #48]
    1ae4:	ldp	x27, x28, [sp, #80]
    1ae8:	ldp	x29, x30, [sp], #224
    1aec:	ret
    1af0:	mov	x22, x19
    1af4:	mov	x0, #0x0                   	// #0
    1af8:	mov	x19, #0x0                   	// #0
    1afc:	mov	w24, #0x1                   	// #1
    1b00:	bl	0 <free>
    1b04:	mov	x0, x23
    1b08:	bl	0 <free>
    1b0c:	mov	x0, x19
    1b10:	bl	0 <free>
    1b14:	ldr	x0, [sp, #160]
    1b18:	cbz	x0, 1b74 <try_dlopen+0x444>
    1b1c:	bl	0 <free>
    1b20:	mov	x0, x27
    1b24:	bl	0 <free>
    1b28:	mov	w0, w24
    1b2c:	ldp	x19, x20, [sp, #16]
    1b30:	ldp	x21, x22, [sp, #32]
    1b34:	ldp	x23, x24, [sp, #48]
    1b38:	ldp	x27, x28, [sp, #80]
    1b3c:	ldp	x29, x30, [sp], #224
    1b40:	ret
    1b44:	ldr	x0, [sp, #168]
    1b48:	mov	x19, #0x0                   	// #0
    1b4c:	mov	x22, #0x0                   	// #0
    1b50:	mov	x27, #0x0                   	// #0
    1b54:	mov	w24, #0x1                   	// #1
    1b58:	bl	0 <free>
    1b5c:	mov	x0, x23
    1b60:	bl	0 <free>
    1b64:	mov	x0, x19
    1b68:	bl	0 <free>
    1b6c:	ldr	x0, [sp, #160]
    1b70:	cbnz	x0, 1b1c <try_dlopen+0x3ec>
    1b74:	mov	x0, x22
    1b78:	bl	0 <free>
    1b7c:	ldr	x0, [sp, #160]
    1b80:	b	1b1c <try_dlopen+0x3ec>
    1b84:	str	xzr, [sp, #160]
    1b88:	b	1824 <try_dlopen+0xf4>
    1b8c:	mov	x0, #0x58                  	// #88
    1b90:	bl	0 <lt__zalloc>
    1b94:	str	x0, [x21]
    1b98:	mov	x4, x0
    1b9c:	cbz	x0, 1ad0 <try_dlopen+0x3a0>
    1ba0:	ldrb	w0, [x0, #36]
    1ba4:	mov	x3, #0x0                   	// #0
    1ba8:	ldr	x2, [sp, #104]
    1bac:	orr	w0, w0, #0x1
    1bb0:	strb	w0, [x4, #36]
    1bb4:	mov	x1, #0x0                   	// #0
    1bb8:	add	x0, sp, #0xb0
    1bbc:	str	x4, [sp, #176]
    1bc0:	bl	120 <tryall_dlopen>
    1bc4:	cbnz	w0, 1eb0 <try_dlopen+0x780>
    1bc8:	ldr	x0, [x21]
    1bcc:	mov	x23, #0x0                   	// #0
    1bd0:	ldr	x1, [sp, #176]
    1bd4:	mov	x22, #0x0                   	// #0
    1bd8:	mov	x27, #0x0                   	// #0
    1bdc:	cmp	x0, x1
    1be0:	b.eq	1bf4 <try_dlopen+0x4c4>  // b.none
    1be4:	bl	0 <free>
    1be8:	ldr	x1, [sp, #176]
    1bec:	str	x1, [x21]
    1bf0:	str	xzr, [sp, #176]
    1bf4:	ldr	w0, [x1, #32]
    1bf8:	cbnz	w0, 1c34 <try_dlopen+0x504>
    1bfc:	ldr	x0, [x1, #24]
    1c00:	mov	w2, #0x1                   	// #1
    1c04:	str	w2, [x1, #32]
    1c08:	cmp	x0, x19
    1c0c:	b.eq	1c20 <try_dlopen+0x4f0>  // b.none
    1c10:	bl	0 <free>
    1c14:	ldr	x1, [x21]
    1c18:	str	x19, [x1, #24]
    1c1c:	mov	x19, #0x0                   	// #0
    1c20:	adrp	x0, 0 <lt__alloc_die_callback>
    1c24:	ldr	x2, [x0]
    1c28:	str	x2, [x1]
    1c2c:	ldr	x1, [x21]
    1c30:	str	x1, [x0]
    1c34:	ldr	x0, [sp, #112]
    1c38:	mov	w24, #0x0                   	// #0
    1c3c:	bl	0 <lt__set_last_error>
    1c40:	ldr	x0, [sp, #168]
    1c44:	b	1b00 <try_dlopen+0x3d0>
    1c48:	mov	x0, #0x58                  	// #88
    1c4c:	bl	0 <lt__zalloc>
    1c50:	str	x0, [x21]
    1c54:	cbz	x0, 1f38 <try_dlopen+0x808>
    1c58:	ldr	x1, [sp, #168]
    1c5c:	str	x0, [sp, #176]
    1c60:	cbz	x1, 1d78 <try_dlopen+0x648>
    1c64:	add	x20, sp, #0xb0
    1c68:	ldr	x2, [sp, #104]
    1c6c:	mov	x0, x20
    1c70:	mov	x1, x23
    1c74:	mov	x3, #0x0                   	// #0
    1c78:	bl	120 <tryall_dlopen>
    1c7c:	cbz	w0, 1da8 <try_dlopen+0x678>
    1c80:	ldr	x2, [x21]
    1c84:	str	xzr, [sp, #176]
    1c88:	mov	x0, x2
    1c8c:	mov	w24, #0x1                   	// #1
    1c90:	bl	0 <free>
    1c94:	str	xzr, [x21]
    1c98:	ldr	x0, [sp, #168]
    1c9c:	b	1b00 <try_dlopen+0x3d0>
    1ca0:	mov	x0, x22
    1ca4:	bl	0 <strlen>
    1ca8:	add	x20, x22, x0
    1cac:	b	1840 <try_dlopen+0x110>
    1cb0:	mov	x27, #0x0                   	// #0
    1cb4:	mov	w24, #0x1                   	// #1
    1cb8:	ldr	x0, [sp, #168]
    1cbc:	b	1b00 <try_dlopen+0x3d0>
    1cc0:	adrp	x0, 0 <lt__alloc_die_callback>
    1cc4:	add	x0, x0, #0x0
    1cc8:	bl	0 <lt_dlloader_find>
    1ccc:	mov	x28, x0
    1cd0:	cbz	x0, 189c <try_dlopen+0x16c>
    1cd4:	ldrb	w1, [x19]
    1cd8:	mov	x0, #0x6                   	// #6
    1cdc:	cbz	w1, 1cec <try_dlopen+0x5bc>
    1ce0:	mov	x0, x19
    1ce4:	bl	0 <strlen>
    1ce8:	add	x0, x0, #0x6
    1cec:	bl	0 <lt__malloc>
    1cf0:	mov	x27, x0
    1cf4:	mov	x0, #0x58                  	// #88
    1cf8:	bl	0 <lt__zalloc>
    1cfc:	str	x0, [x21]
    1d00:	cbz	x0, 1f38 <try_dlopen+0x808>
    1d04:	cbz	x27, 1f38 <try_dlopen+0x808>
    1d08:	str	x0, [sp, #176]
    1d0c:	ldrb	w0, [x19]
    1d10:	cmp	w0, #0x6c
    1d14:	b.ne	1ff0 <try_dlopen+0x8c0>  // b.any
    1d18:	ldrb	w0, [x19, #1]
    1d1c:	cmp	w0, #0x69
    1d20:	b.ne	1ff0 <try_dlopen+0x8c0>  // b.any
    1d24:	ldrb	w0, [x19, #2]
    1d28:	cmp	w0, #0x62
    1d2c:	b.ne	1ff0 <try_dlopen+0x8c0>  // b.any
    1d30:	adrp	x2, 0 <lt__alloc_die_callback>
    1d34:	add	x2, x2, #0x0
    1d38:	add	x4, x2, #0x170
    1d3c:	adrp	x1, 0 <lt__alloc_die_callback>
    1d40:	add	x2, x2, #0x178
    1d44:	add	x3, x19, #0x3
    1d48:	add	x1, x1, #0x0
    1d4c:	mov	x0, x27
    1d50:	bl	0 <sprintf>
    1d54:	ldr	x2, [sp, #104]
    1d58:	mov	x3, x28
    1d5c:	mov	x1, x27
    1d60:	add	x0, sp, #0xb0
    1d64:	bl	120 <tryall_dlopen>
    1d68:	cbnz	w0, 2014 <try_dlopen+0x8e4>
    1d6c:	ldr	x0, [x21]
    1d70:	ldr	x1, [sp, #176]
    1d74:	b	1bdc <try_dlopen+0x4ac>
    1d78:	adrp	x0, 0 <lt__alloc_die_callback>
    1d7c:	adrp	x24, 0 <lt__alloc_die_callback>
    1d80:	add	x20, sp, #0xb0
    1d84:	add	x24, x24, #0x0
    1d88:	ldr	x0, [x0]
    1d8c:	cbz	x0, 1f7c <try_dlopen+0x84c>
    1d90:	ldr	x4, [sp, #104]
    1d94:	mov	x2, x24
    1d98:	mov	x3, x20
    1d9c:	mov	x1, x22
    1da0:	bl	780 <foreach_dirinpath>
    1da4:	cbz	w0, 1f7c <try_dlopen+0x84c>
    1da8:	ldr	x1, [sp, #176]
    1dac:	ldr	x2, [x21]
    1db0:	mov	x0, x2
    1db4:	cbnz	x1, 1bdc <try_dlopen+0x4ac>
    1db8:	b	1c88 <try_dlopen+0x558>
    1dbc:	adrp	x0, 0 <lt__alloc_die_callback>
    1dc0:	ldr	x0, [x0]
    1dc4:	cbz	x0, 2028 <try_dlopen+0x8f8>
    1dc8:	adrp	x20, 0 <lt__alloc_die_callback>
    1dcc:	add	x20, x20, #0x0
    1dd0:	add	x4, sp, #0xd8
    1dd4:	add	x3, sp, #0xa8
    1dd8:	mov	x2, x20
    1ddc:	mov	x1, x22
    1de0:	str	x3, [sp, #120]
    1de4:	str	x4, [sp, #136]
    1de8:	str	xzr, [sp, #216]
    1dec:	bl	780 <foreach_dirinpath>
    1df0:	ldr	x24, [sp, #216]
    1df4:	ldr	x3, [sp, #120]
    1df8:	ldr	x4, [sp, #136]
    1dfc:	cbnz	x24, 18f8 <try_dlopen+0x1c8>
    1e00:	adrp	x0, 0 <lt__alloc_die_callback>
    1e04:	add	x0, x0, #0x0
    1e08:	str	x4, [sp, #120]
    1e0c:	str	x3, [sp, #136]
    1e10:	bl	0 <getenv>
    1e14:	ldr	x4, [sp, #120]
    1e18:	ldr	x3, [sp, #136]
    1e1c:	cbz	x0, 1e48 <try_dlopen+0x718>
    1e20:	mov	x2, x20
    1e24:	mov	x1, x22
    1e28:	str	x3, [sp, #120]
    1e2c:	str	x4, [sp, #136]
    1e30:	str	xzr, [sp, #216]
    1e34:	bl	780 <foreach_dirinpath>
    1e38:	ldr	x24, [sp, #216]
    1e3c:	ldr	x3, [sp, #120]
    1e40:	ldr	x4, [sp, #136]
    1e44:	cbnz	x24, 18f8 <try_dlopen+0x1c8>
    1e48:	adrp	x0, 0 <lt__alloc_die_callback>
    1e4c:	add	x0, x0, #0x0
    1e50:	str	x4, [sp, #120]
    1e54:	str	x3, [sp, #136]
    1e58:	bl	0 <getenv>
    1e5c:	ldr	x4, [sp, #120]
    1e60:	ldr	x3, [sp, #136]
    1e64:	cbz	x0, 1e90 <try_dlopen+0x760>
    1e68:	mov	x2, x20
    1e6c:	mov	x1, x22
    1e70:	str	x3, [sp, #120]
    1e74:	str	x4, [sp, #136]
    1e78:	str	xzr, [sp, #216]
    1e7c:	bl	780 <foreach_dirinpath>
    1e80:	ldr	x24, [sp, #216]
    1e84:	ldr	x3, [sp, #120]
    1e88:	ldr	x4, [sp, #136]
    1e8c:	cbnz	x24, 18f8 <try_dlopen+0x1c8>
    1e90:	ldr	x0, [sp, #128]
    1e94:	mov	x2, x20
    1e98:	mov	x1, x22
    1e9c:	str	xzr, [sp, #216]
    1ea0:	add	x0, x0, #0x138
    1ea4:	bl	780 <foreach_dirinpath>
    1ea8:	ldr	x24, [sp, #216]
    1eac:	b	18f4 <try_dlopen+0x1c4>
    1eb0:	ldr	x0, [x21]
    1eb4:	mov	w24, #0x1                   	// #1
    1eb8:	bl	0 <free>
    1ebc:	str	xzr, [x21]
    1ec0:	b	1ad4 <try_dlopen+0x3a4>
    1ec4:	add	x1, x28, #0x7
    1ec8:	add	x0, sp, #0xb8
    1ecc:	bl	468 <trim>
    1ed0:	cbz	w0, 1930 <try_dlopen+0x200>
    1ed4:	nop
    1ed8:	mov	x0, x28
    1edc:	bl	0 <free>
    1ee0:	ldp	x25, x26, [sp, #64]
    1ee4:	mov	x0, x24
    1ee8:	bl	0 <fclose>
    1eec:	mov	x0, #0x58                  	// #88
    1ef0:	bl	0 <lt__zalloc>
    1ef4:	cmp	x0, #0x0
    1ef8:	str	x0, [x21]
    1efc:	cset	w24, eq  // eq = none
    1f00:	add	w24, w24, #0x1
    1f04:	ldr	x0, [sp, #184]
    1f08:	bl	0 <free>
    1f0c:	ldr	x0, [sp, #192]
    1f10:	bl	0 <free>
    1f14:	ldr	x0, [sp, #200]
    1f18:	bl	0 <free>
    1f1c:	ldr	x0, [sp, #208]
    1f20:	bl	0 <free>
    1f24:	ldr	x0, [x21]
    1f28:	bl	0 <free>
    1f2c:	str	xzr, [x21]
    1f30:	ldr	x0, [sp, #168]
    1f34:	b	1b00 <try_dlopen+0x3d0>
    1f38:	mov	w24, #0x1                   	// #1
    1f3c:	ldr	x0, [sp, #168]
    1f40:	b	1b00 <try_dlopen+0x3d0>
    1f44:	add	x1, x28, #0xc
    1f48:	add	x0, sp, #0xc0
    1f4c:	bl	468 <trim>
    1f50:	b	1ed0 <try_dlopen+0x7a0>
    1f54:	add	x1, x28, #0x7
    1f58:	add	x0, sp, #0xc8
    1f5c:	bl	468 <trim>
    1f60:	b	1ed0 <try_dlopen+0x7a0>
    1f64:	mov	w0, #0x5                   	// #5
    1f68:	bl	0 <lt__error_string>
    1f6c:	bl	0 <lt__set_last_error>
    1f70:	mov	w24, #0x1                   	// #1
    1f74:	ldr	x0, [sp, #168]
    1f78:	b	1b00 <try_dlopen+0x3d0>
    1f7c:	adrp	x0, 0 <lt__alloc_die_callback>
    1f80:	add	x0, x0, #0x0
    1f84:	bl	0 <getenv>
    1f88:	cbz	x0, 1fa4 <try_dlopen+0x874>
    1f8c:	ldr	x4, [sp, #104]
    1f90:	mov	x3, x20
    1f94:	mov	x2, x24
    1f98:	mov	x1, x22
    1f9c:	bl	780 <foreach_dirinpath>
    1fa0:	cbnz	w0, 1da8 <try_dlopen+0x678>
    1fa4:	adrp	x0, 0 <lt__alloc_die_callback>
    1fa8:	add	x0, x0, #0x0
    1fac:	bl	0 <getenv>
    1fb0:	cbz	x0, 1fcc <try_dlopen+0x89c>
    1fb4:	ldr	x4, [sp, #104]
    1fb8:	mov	x3, x20
    1fbc:	mov	x2, x24
    1fc0:	mov	x1, x22
    1fc4:	bl	780 <foreach_dirinpath>
    1fc8:	cbnz	w0, 1da8 <try_dlopen+0x678>
    1fcc:	ldr	x4, [sp, #104]
    1fd0:	mov	x2, x24
    1fd4:	ldr	x0, [sp, #128]
    1fd8:	mov	x3, x20
    1fdc:	mov	x1, x22
    1fe0:	add	x0, x0, #0x138
    1fe4:	bl	780 <foreach_dirinpath>
    1fe8:	cbnz	w0, 1da8 <try_dlopen+0x678>
    1fec:	b	1c68 <try_dlopen+0x538>
    1ff0:	adrp	x3, 0 <lt__alloc_die_callback>
    1ff4:	add	x3, x3, #0x0
    1ff8:	add	x3, x3, #0x170
    1ffc:	mov	x2, x19
    2000:	mov	x0, x27
    2004:	adrp	x1, 0 <lt__alloc_die_callback>
    2008:	add	x1, x1, #0x0
    200c:	bl	0 <sprintf>
    2010:	b	1d54 <try_dlopen+0x624>
    2014:	ldr	x0, [x21]
    2018:	bl	0 <free>
    201c:	str	xzr, [x21]
    2020:	str	xzr, [sp, #176]
    2024:	b	18a0 <try_dlopen+0x170>
    2028:	adrp	x0, 0 <lt__alloc_die_callback>
    202c:	add	x0, x0, #0x0
    2030:	bl	0 <getenv>
    2034:	adrp	x20, 0 <lt__alloc_die_callback>
    2038:	add	x4, sp, #0xd8
    203c:	add	x20, x20, #0x0
    2040:	add	x3, sp, #0xa8
    2044:	cbnz	x0, 1e20 <try_dlopen+0x6f0>
    2048:	b	1e48 <try_dlopen+0x718>
    204c:	mov	w0, #0x1                   	// #1
    2050:	str	w0, [sp, #148]
    2054:	b	1930 <try_dlopen+0x200>
    2058:	add	x1, x28, #0x10
    205c:	add	x0, sp, #0xd0
    2060:	bl	468 <trim>
    2064:	b	1ed0 <try_dlopen+0x7a0>
    2068:	mov	x0, x28
    206c:	bl	0 <free>
    2070:	mov	x0, x24
    2074:	bl	0 <fclose>
    2078:	mov	x0, #0x58                  	// #88
    207c:	bl	0 <lt__zalloc>
    2080:	str	x0, [x21]
    2084:	cbz	x0, 22d0 <try_dlopen+0xba0>
    2088:	ldp	x20, x24, [sp, #184]
    208c:	str	wzr, [x0, #40]
    2090:	str	x0, [sp, #176]
    2094:	ldr	x5, [sp, #168]
    2098:	ldr	x4, [sp, #200]
    209c:	cbz	x24, 21f4 <try_dlopen+0xac4>
    20a0:	adrp	x0, 0 <lt__alloc_die_callback>
    20a4:	add	x0, x0, #0x0
    20a8:	str	x5, [sp, #120]
    20ac:	str	x4, [sp, #136]
    20b0:	bl	0 <lt_dlloader_find>
    20b4:	ldr	x2, [sp, #104]
    20b8:	mov	x3, x0
    20bc:	mov	x1, x24
    20c0:	add	x0, sp, #0xb0
    20c4:	bl	120 <tryall_dlopen>
    20c8:	cbz	w0, 2190 <try_dlopen+0xa60>
    20cc:	ldr	x5, [sp, #120]
    20d0:	ldr	x4, [sp, #136]
    20d4:	cbz	x20, 2110 <try_dlopen+0x9e0>
    20d8:	ldr	w0, [sp, #148]
    20dc:	cmp	x4, #0x0
    20e0:	csel	w0, w0, wzr, ne  // ne = any
    20e4:	cbnz	w0, 220c <try_dlopen+0xadc>
    20e8:	ldr	w0, [sp, #148]
    20ec:	cbz	w0, 2168 <try_dlopen+0xa38>
    20f0:	cbz	x5, 2110 <try_dlopen+0x9e0>
    20f4:	ldr	x4, [sp, #104]
    20f8:	mov	x3, x20
    20fc:	mov	x2, x5
    2100:	add	x0, sp, #0xb0
    2104:	mov	x1, #0x0                   	// #0
    2108:	bl	2f8 <tryall_dlopen_module>
    210c:	cbz	w0, 2190 <try_dlopen+0xa60>
    2110:	ldr	x0, [x21]
    2114:	ldr	w1, [x0, #40]
    2118:	cbz	w1, 2244 <try_dlopen+0xb14>
    211c:	add	x1, x0, #0x30
    2120:	add	x0, x0, #0x28
    2124:	bl	1688 <unload_deplibs.isra.0.part.0>
    2128:	ldr	x20, [sp, #184]
    212c:	mov	x0, x20
    2130:	bl	0 <free>
    2134:	mov	w24, #0x1                   	// #1
    2138:	ldr	x0, [sp, #192]
    213c:	bl	0 <free>
    2140:	ldr	x0, [sp, #200]
    2144:	bl	0 <free>
    2148:	ldr	x0, [sp, #208]
    214c:	bl	0 <free>
    2150:	ldr	x0, [x21]
    2154:	bl	0 <free>
    2158:	ldp	x25, x26, [sp, #64]
    215c:	str	xzr, [x21]
    2160:	ldr	x0, [sp, #168]
    2164:	b	1b00 <try_dlopen+0x3d0>
    2168:	ldr	x4, [sp, #104]
    216c:	mov	x1, x5
    2170:	ldr	x0, [sp, #128]
    2174:	mov	x3, x20
    2178:	str	x5, [sp, #120]
    217c:	add	x2, x0, #0x188
    2180:	add	x0, sp, #0xb0
    2184:	bl	2f8 <tryall_dlopen_module>
    2188:	ldr	x5, [sp, #120]
    218c:	cbnz	w0, 20f0 <try_dlopen+0x9c0>
    2190:	ldr	x0, [sp, #184]
    2194:	bl	0 <free>
    2198:	str	xzr, [sp, #184]
    219c:	ldr	x0, [sp, #192]
    21a0:	bl	0 <free>
    21a4:	str	xzr, [sp, #192]
    21a8:	ldr	x0, [sp, #200]
    21ac:	bl	0 <free>
    21b0:	str	xzr, [sp, #200]
    21b4:	ldr	x0, [sp, #208]
    21b8:	bl	0 <free>
    21bc:	str	xzr, [sp, #208]
    21c0:	ldr	x0, [x21]
    21c4:	ldr	x1, [sp, #176]
    21c8:	cmp	x0, x1
    21cc:	b.eq	2204 <try_dlopen+0xad4>  // b.none
    21d0:	ldr	w2, [x0, #40]
    21d4:	cbz	w2, 21fc <try_dlopen+0xacc>
    21d8:	add	x1, x0, #0x30
    21dc:	add	x0, x0, #0x28
    21e0:	bl	1688 <unload_deplibs.isra.0.part.0>
    21e4:	ldr	x0, [x21]
    21e8:	ldp	x25, x26, [sp, #64]
    21ec:	ldr	x1, [sp, #176]
    21f0:	b	1bdc <try_dlopen+0x4ac>
    21f4:	cbnz	x20, 20d8 <try_dlopen+0x9a8>
    21f8:	b	212c <try_dlopen+0x9fc>
    21fc:	ldp	x25, x26, [sp, #64]
    2200:	b	1bdc <try_dlopen+0x4ac>
    2204:	ldp	x25, x26, [sp, #64]
    2208:	b	1bf4 <try_dlopen+0x4c4>
    220c:	mov	x2, x4
    2210:	mov	x3, x20
    2214:	ldr	x4, [sp, #104]
    2218:	add	x0, sp, #0xb0
    221c:	mov	x1, #0x0                   	// #0
    2220:	str	x5, [sp, #120]
    2224:	bl	2f8 <tryall_dlopen_module>
    2228:	ldr	x5, [sp, #120]
    222c:	cbnz	w0, 20f0 <try_dlopen+0x9c0>
    2230:	b	2190 <try_dlopen+0xa60>
    2234:	mov	w0, #0x5                   	// #5
    2238:	bl	0 <lt__error_string>
    223c:	bl	0 <lt__set_last_error>
    2240:	b	1ee4 <try_dlopen+0x7b4>
    2244:	ldr	x20, [sp, #184]
    2248:	b	212c <try_dlopen+0x9fc>
    224c:	str	wzr, [sp, #148]
    2250:	b	1930 <try_dlopen+0x200>
    2254:	adrp	x3, 0 <lt__alloc_die_callback>
    2258:	add	x3, x3, #0x0
    225c:	adrp	x1, 0 <lt__alloc_die_callback>
    2260:	adrp	x0, 0 <lt__alloc_die_callback>
    2264:	add	x3, x3, #0x160
    2268:	add	x1, x1, #0x0
    226c:	add	x0, x0, #0x0
    2270:	mov	w2, #0x495                 	// #1173
    2274:	stp	x25, x26, [sp, #64]
    2278:	stp	x27, x28, [sp, #80]
    227c:	bl	0 <__assert_fail>
    2280:	adrp	x3, 0 <lt__alloc_die_callback>
    2284:	add	x3, x3, #0x0
    2288:	adrp	x1, 0 <lt__alloc_die_callback>
    228c:	adrp	x0, 0 <lt__alloc_die_callback>
    2290:	add	x3, x3, #0x160
    2294:	add	x1, x1, #0x0
    2298:	add	x0, x0, #0x0
    229c:	mov	w2, #0x4e3                 	// #1251
    22a0:	stp	x25, x26, [sp, #64]
    22a4:	bl	0 <__assert_fail>
    22a8:	adrp	x3, 0 <lt__alloc_die_callback>
    22ac:	add	x3, x3, #0x0
    22b0:	adrp	x1, 0 <lt__alloc_die_callback>
    22b4:	adrp	x0, 0 <lt__alloc_die_callback>
    22b8:	add	x3, x3, #0x160
    22bc:	add	x1, x1, #0x0
    22c0:	add	x0, x0, #0x0
    22c4:	mov	w2, #0x4b4                 	// #1204
    22c8:	stp	x25, x26, [sp, #64]
    22cc:	bl	0 <__assert_fail>
    22d0:	mov	w24, #0x1                   	// #1
    22d4:	ldp	x25, x26, [sp, #64]
    22d8:	b	1f04 <try_dlopen+0x7d4>
    22dc:	nop

00000000000022e0 <lt_dlopenadvise>:
    22e0:	stp	x29, x30, [sp, #-80]!
    22e4:	mov	x29, sp
    22e8:	stp	x19, x20, [sp, #16]
    22ec:	mov	x19, x1
    22f0:	mov	x20, x0
    22f4:	str	xzr, [sp, #72]
    22f8:	bl	0 <lt__get_last_error>
    22fc:	cbz	x19, 2324 <lt_dlopenadvise+0x44>
    2300:	ldrb	w1, [x19]
    2304:	stp	x21, x22, [sp, #32]
    2308:	mov	x21, x0
    230c:	and	w0, w1, #0xc
    2310:	cmp	w0, #0xc
    2314:	b.eq	2420 <lt_dlopenadvise+0x140>  // b.none
    2318:	cbz	x20, 2320 <lt_dlopenadvise+0x40>
    231c:	tbnz	w1, #0, 2350 <lt_dlopenadvise+0x70>
    2320:	ldp	x21, x22, [sp, #32]
    2324:	mov	x1, x20
    2328:	mov	x3, x19
    232c:	add	x0, sp, #0x48
    2330:	mov	x2, #0x0                   	// #0
    2334:	bl	1730 <try_dlopen>
    2338:	ldr	x1, [sp, #72]
    233c:	cmp	w0, #0x0
    2340:	csel	x0, x1, xzr, eq  // eq = none
    2344:	ldp	x19, x20, [sp, #16]
    2348:	ldp	x29, x30, [sp], #80
    234c:	ret
    2350:	mov	x0, x20
    2354:	mov	w1, #0x2e                  	// #46
    2358:	bl	0 <strrchr>
    235c:	mov	x22, x0
    2360:	cbz	x0, 2390 <lt_dlopenadvise+0xb0>
    2364:	str	x23, [sp, #48]
    2368:	adrp	x23, 0 <lt__alloc_die_callback>
    236c:	add	x23, x23, #0x0
    2370:	add	x1, x23, #0x180
    2374:	bl	0 <strcmp>
    2378:	cbz	w0, 23c8 <lt_dlopenadvise+0xe8>
    237c:	add	x1, x23, #0x190
    2380:	mov	x0, x22
    2384:	bl	0 <strcmp>
    2388:	cbz	w0, 23c8 <lt_dlopenadvise+0xe8>
    238c:	ldr	x23, [sp, #48]
    2390:	ldrb	w0, [x20]
    2394:	cbz	w0, 2408 <lt_dlopenadvise+0x128>
    2398:	adrp	x22, 0 <lt__alloc_die_callback>
    239c:	add	x22, x22, #0x0
    23a0:	mov	x1, x20
    23a4:	add	x0, sp, #0x48
    23a8:	add	x2, x22, #0x180
    23ac:	mov	x3, x19
    23b0:	bl	1730 <try_dlopen>
    23b4:	mov	w1, w0
    23b8:	ldr	x0, [sp, #72]
    23bc:	cbz	x0, 23d4 <lt_dlopenadvise+0xf4>
    23c0:	ldp	x21, x22, [sp, #32]
    23c4:	b	2344 <lt_dlopenadvise+0x64>
    23c8:	ldp	x21, x22, [sp, #32]
    23cc:	ldr	x23, [sp, #48]
    23d0:	b	2324 <lt_dlopenadvise+0x44>
    23d4:	cmp	w1, #0x0
    23d8:	b.le	243c <lt_dlopenadvise+0x15c>
    23dc:	str	x23, [sp, #48]
    23e0:	bl	0 <lt__get_last_error>
    23e4:	mov	x23, x0
    23e8:	mov	w0, #0x5                   	// #5
    23ec:	bl	0 <lt__error_string>
    23f0:	cmp	x23, x0
    23f4:	b.eq	2438 <lt_dlopenadvise+0x158>  // b.none
    23f8:	ldp	x21, x22, [sp, #32]
    23fc:	ldr	x23, [sp, #48]
    2400:	ldr	x0, [sp, #72]
    2404:	b	2344 <lt_dlopenadvise+0x64>
    2408:	mov	w0, #0x5                   	// #5
    240c:	bl	0 <lt__error_string>
    2410:	bl	0 <lt__set_last_error>
    2414:	mov	x0, #0x0                   	// #0
    2418:	ldp	x21, x22, [sp, #32]
    241c:	b	2344 <lt_dlopenadvise+0x64>
    2420:	mov	w0, #0x13                  	// #19
    2424:	bl	0 <lt__error_string>
    2428:	bl	0 <lt__set_last_error>
    242c:	mov	x0, #0x0                   	// #0
    2430:	ldp	x21, x22, [sp, #32]
    2434:	b	2344 <lt_dlopenadvise+0x64>
    2438:	ldr	x23, [sp, #48]
    243c:	mov	x0, x21
    2440:	bl	0 <lt__set_last_error>
    2444:	mov	x1, x20
    2448:	mov	x3, x19
    244c:	add	x2, x22, #0x190
    2450:	add	x0, sp, #0x48
    2454:	bl	1730 <try_dlopen>
    2458:	mov	w1, w0
    245c:	ldr	x0, [sp, #72]
    2460:	cbnz	x0, 23c0 <lt_dlopenadvise+0xe0>
    2464:	cmp	w1, #0x0
    2468:	b.le	2408 <lt_dlopenadvise+0x128>
    246c:	bl	0 <lt__get_last_error>
    2470:	mov	x19, x0
    2474:	mov	w0, #0x5                   	// #5
    2478:	bl	0 <lt__error_string>
    247c:	cmp	x19, x0
    2480:	b.eq	2408 <lt_dlopenadvise+0x128>  // b.none
    2484:	ldp	x21, x22, [sp, #32]
    2488:	ldr	x0, [sp, #72]
    248c:	b	2344 <lt_dlopenadvise+0x64>

0000000000002490 <lt_dlopen>:
    2490:	mov	x1, #0x0                   	// #0
    2494:	b	22e0 <lt_dlopenadvise>

0000000000002498 <lt_dlopenext>:
    2498:	stp	x29, x30, [sp, #-32]!
    249c:	mov	x29, sp
    24a0:	stp	x19, x20, [sp, #16]
    24a4:	mov	x20, x0
    24a8:	mov	x0, #0x4                   	// #4
    24ac:	bl	0 <lt__zalloc>
    24b0:	mov	x19, x0
    24b4:	cbz	x0, 24ec <lt_dlopenext+0x54>
    24b8:	ldrb	w2, [x0]
    24bc:	mov	x1, x19
    24c0:	mov	x0, x20
    24c4:	orr	w2, w2, #0x1
    24c8:	strb	w2, [x19]
    24cc:	bl	22e0 <lt_dlopenadvise>
    24d0:	mov	x20, x0
    24d4:	mov	x0, x19
    24d8:	bl	0 <free>
    24dc:	mov	x0, x20
    24e0:	ldp	x19, x20, [sp, #16]
    24e4:	ldp	x29, x30, [sp], #32
    24e8:	ret
    24ec:	mov	x0, x19
    24f0:	mov	x20, #0x0                   	// #0
    24f4:	bl	0 <free>
    24f8:	mov	x0, x20
    24fc:	ldp	x19, x20, [sp, #16]
    2500:	ldp	x29, x30, [sp], #32
    2504:	ret

0000000000002508 <lt_dlsym>:
    2508:	stp	x29, x30, [sp, #-208]!
    250c:	mov	x29, sp
    2510:	stp	x21, x22, [sp, #32]
    2514:	cbz	x0, 2764 <lt_dlsym+0x25c>
    2518:	mov	x21, x1
    251c:	cbz	x1, 2778 <lt_dlsym+0x270>
    2520:	stp	x19, x20, [sp, #16]
    2524:	mov	x19, x0
    2528:	mov	x20, #0x0                   	// #0
    252c:	stp	x23, x24, [sp, #48]
    2530:	ldrb	w0, [x1]
    2534:	cbnz	w0, 2628 <lt_dlsym+0x120>
    2538:	ldr	x24, [x19, #8]
    253c:	ldr	x22, [x24, #8]
    2540:	cbz	x22, 254c <lt_dlsym+0x44>
    2544:	ldrb	w0, [x22]
    2548:	cbnz	w0, 2638 <lt_dlsym+0x130>
    254c:	ldr	x0, [x19, #24]
    2550:	cbz	x0, 264c <lt_dlsym+0x144>
    2554:	ldrb	w1, [x0]
    2558:	cbz	w1, 2564 <lt_dlsym+0x5c>
    255c:	bl	0 <strlen>
    2560:	add	x20, x20, x0
    2564:	add	x0, x20, #0x5
    2568:	cmp	x0, #0x7f
    256c:	b.hi	26c0 <lt_dlsym+0x1b8>  // b.pmore
    2570:	add	x23, sp, #0x50
    2574:	mov	x20, x23
    2578:	ldr	x24, [x24, #56]
    257c:	str	x25, [sp, #64]
    2580:	bl	0 <lt__get_last_error>
    2584:	mov	x25, x0
    2588:	ldr	x1, [x19, #8]
    258c:	ldr	x1, [x1, #8]
    2590:	cbz	x1, 2730 <lt_dlsym+0x228>
    2594:	mov	x0, x20
    2598:	bl	0 <stpcpy>
    259c:	ldr	x1, [x19, #24]
    25a0:	bl	0 <strcpy>
    25a4:	mov	x0, x20
    25a8:	bl	0 <strlen>
    25ac:	adrp	x3, 0 <lt__alloc_die_callback>
    25b0:	add	x3, x3, #0x0
    25b4:	mov	x2, x0
    25b8:	add	x4, x20, x0
    25bc:	add	x0, x0, #0x5
    25c0:	mov	x1, x21
    25c4:	ldr	w5, [x3]
    25c8:	add	x0, x20, x0
    25cc:	str	w5, [x20, x2]
    25d0:	ldrb	w2, [x3, #4]
    25d4:	strb	w2, [x4, #4]
    25d8:	bl	0 <strcpy>
    25dc:	ldr	x3, [x19, #8]
    25e0:	mov	x2, x20
    25e4:	ldr	x1, [x19, #56]
    25e8:	mov	x0, x24
    25ec:	ldr	x3, [x3, #32]
    25f0:	blr	x3
    25f4:	mov	x22, x0
    25f8:	cbz	x0, 2740 <lt_dlsym+0x238>
    25fc:	cmp	x20, x23
    2600:	b.eq	2714 <lt_dlsym+0x20c>  // b.none
    2604:	mov	x0, x20
    2608:	bl	0 <free>
    260c:	mov	x0, x22
    2610:	ldp	x19, x20, [sp, #16]
    2614:	ldp	x21, x22, [sp, #32]
    2618:	ldp	x23, x24, [sp, #48]
    261c:	ldr	x25, [sp, #64]
    2620:	ldp	x29, x30, [sp], #208
    2624:	ret
    2628:	mov	x0, x1
    262c:	bl	0 <strlen>
    2630:	mov	x20, x0
    2634:	b	2538 <lt_dlsym+0x30>
    2638:	mov	x0, x22
    263c:	bl	0 <strlen>
    2640:	add	x20, x20, x0
    2644:	ldr	x0, [x19, #24]
    2648:	cbnz	x0, 2554 <lt_dlsym+0x4c>
    264c:	add	x0, x20, #0x5
    2650:	cmp	x0, #0x7f
    2654:	b.hi	26c0 <lt_dlsym+0x1b8>  // b.pmore
    2658:	add	x23, sp, #0x50
    265c:	ldr	x24, [x24, #56]
    2660:	mov	x20, x23
    2664:	cbz	x22, 26ec <lt_dlsym+0x1e4>
    2668:	mov	x1, x22
    266c:	mov	x0, x20
    2670:	bl	0 <stpcpy>
    2674:	mov	x1, x21
    2678:	bl	0 <strcpy>
    267c:	ldr	x3, [x19, #8]
    2680:	mov	x0, x24
    2684:	ldr	x1, [x19, #56]
    2688:	mov	x2, x20
    268c:	ldr	x3, [x3, #32]
    2690:	blr	x3
    2694:	mov	x22, x0
    2698:	cmp	x20, x23
    269c:	b.eq	26fc <lt_dlsym+0x1f4>  // b.none
    26a0:	mov	x0, x20
    26a4:	bl	0 <free>
    26a8:	ldp	x19, x20, [sp, #16]
    26ac:	ldp	x23, x24, [sp, #48]
    26b0:	mov	x0, x22
    26b4:	ldp	x21, x22, [sp, #32]
    26b8:	ldp	x29, x30, [sp], #208
    26bc:	ret
    26c0:	add	x0, x20, #0x6
    26c4:	bl	0 <lt__malloc>
    26c8:	mov	x20, x0
    26cc:	cbz	x0, 278c <lt_dlsym+0x284>
    26d0:	ldr	x0, [x19, #8]
    26d4:	ldr	x1, [x19, #24]
    26d8:	ldr	x24, [x0, #56]
    26dc:	cbnz	x1, 2758 <lt_dlsym+0x250>
    26e0:	ldr	x22, [x0, #8]
    26e4:	add	x23, sp, #0x50
    26e8:	cbnz	x22, 2668 <lt_dlsym+0x160>
    26ec:	mov	x1, x21
    26f0:	mov	x0, x20
    26f4:	bl	0 <strcpy>
    26f8:	b	267c <lt_dlsym+0x174>
    26fc:	mov	x0, x22
    2700:	ldp	x19, x20, [sp, #16]
    2704:	ldp	x21, x22, [sp, #32]
    2708:	ldp	x23, x24, [sp, #48]
    270c:	ldp	x29, x30, [sp], #208
    2710:	ret
    2714:	mov	x0, x22
    2718:	ldp	x19, x20, [sp, #16]
    271c:	ldp	x21, x22, [sp, #32]
    2720:	ldp	x23, x24, [sp, #48]
    2724:	ldr	x25, [sp, #64]
    2728:	ldp	x29, x30, [sp], #208
    272c:	ret
    2730:	ldr	x1, [x19, #24]
    2734:	mov	x0, x20
    2738:	bl	0 <strcpy>
    273c:	b	25a4 <lt_dlsym+0x9c>
    2740:	mov	x0, x25
    2744:	bl	0 <lt__set_last_error>
    2748:	ldr	x0, [x19, #8]
    274c:	ldr	x25, [sp, #64]
    2750:	ldr	x22, [x0, #8]
    2754:	b	2664 <lt_dlsym+0x15c>
    2758:	add	x23, sp, #0x50
    275c:	str	x25, [sp, #64]
    2760:	b	2580 <lt_dlsym+0x78>
    2764:	mov	x22, #0x0                   	// #0
    2768:	mov	w0, #0xc                   	// #12
    276c:	bl	0 <lt__error_string>
    2770:	bl	0 <lt__set_last_error>
    2774:	b	26b0 <lt_dlsym+0x1a8>
    2778:	mov	x22, #0x0                   	// #0
    277c:	mov	w0, #0xa                   	// #10
    2780:	bl	0 <lt__error_string>
    2784:	bl	0 <lt__set_last_error>
    2788:	b	26b0 <lt_dlsym+0x1a8>
    278c:	mov	w0, #0xd                   	// #13
    2790:	mov	x22, #0x0                   	// #0
    2794:	bl	0 <lt__error_string>
    2798:	bl	0 <lt__set_last_error>
    279c:	ldp	x19, x20, [sp, #16]
    27a0:	ldp	x23, x24, [sp, #48]
    27a4:	b	26b0 <lt_dlsym+0x1a8>

00000000000027a8 <loader_init_callback>:
    27a8:	stp	x29, x30, [sp, #-16]!
    27ac:	adrp	x1, 0 <lt__alloc_die_callback>
    27b0:	add	x1, x1, #0x0
    27b4:	mov	x29, sp
    27b8:	bl	2508 <lt_dlsym>
    27bc:	ldp	x29, x30, [sp], #16
    27c0:	b	f90 <loader_init.constprop.0>
    27c4:	nop

00000000000027c8 <lt_dlerror>:
    27c8:	stp	x29, x30, [sp, #-32]!
    27cc:	mov	x29, sp
    27d0:	str	x19, [sp, #16]
    27d4:	bl	0 <lt__get_last_error>
    27d8:	mov	x19, x0
    27dc:	mov	x0, #0x0                   	// #0
    27e0:	bl	0 <lt__set_last_error>
    27e4:	mov	x0, x19
    27e8:	ldr	x19, [sp, #16]
    27ec:	ldp	x29, x30, [sp], #32
    27f0:	ret
    27f4:	nop

00000000000027f8 <lt_dladdsearchdir>:
    27f8:	cbz	x0, 2830 <lt_dladdsearchdir+0x38>
    27fc:	ldrb	w2, [x0]
    2800:	mov	x1, x0
    2804:	mov	w0, #0x0                   	// #0
    2808:	cbnz	w2, 2810 <lt_dladdsearchdir+0x18>
    280c:	ret
    2810:	stp	x29, x30, [sp, #-16]!
    2814:	mov	x0, #0x0                   	// #0
    2818:	mov	x29, sp
    281c:	bl	a20 <lt_dlpath_insertdir.constprop.0>
    2820:	cmp	w0, #0x0
    2824:	cset	w0, ne  // ne = any
    2828:	ldp	x29, x30, [sp], #16
    282c:	ret
    2830:	mov	w0, #0x0                   	// #0
    2834:	ret

0000000000002838 <lt_dlinsertsearchdir>:
    2838:	stp	x29, x30, [sp, #-48]!
    283c:	mov	x29, sp
    2840:	stp	x19, x20, [sp, #16]
    2844:	mov	x19, x0
    2848:	mov	x20, x1
    284c:	cbz	x0, 2888 <lt_dlinsertsearchdir+0x50>
    2850:	adrp	x0, 0 <lt__alloc_die_callback>
    2854:	str	x21, [sp, #32]
    2858:	ldr	x21, [x0]
    285c:	cmp	x21, x19
    2860:	b.hi	28a4 <lt_dlinsertsearchdir+0x6c>  // b.pmore
    2864:	cbz	x21, 28a4 <lt_dlinsertsearchdir+0x6c>
    2868:	ldrb	w0, [x21]
    286c:	cbz	w0, 28a4 <lt_dlinsertsearchdir+0x6c>
    2870:	mov	x0, x21
    2874:	bl	0 <strlen>
    2878:	add	x21, x21, x0
    287c:	cmp	x19, x21
    2880:	b.cs	28a4 <lt_dlinsertsearchdir+0x6c>  // b.hs, b.nlast
    2884:	ldr	x21, [sp, #32]
    2888:	mov	w0, #0x0                   	// #0
    288c:	cbz	x20, 2898 <lt_dlinsertsearchdir+0x60>
    2890:	ldrb	w1, [x20]
    2894:	cbnz	w1, 28c4 <lt_dlinsertsearchdir+0x8c>
    2898:	ldp	x19, x20, [sp, #16]
    289c:	ldp	x29, x30, [sp], #48
    28a0:	ret
    28a4:	mov	w0, #0x12                  	// #18
    28a8:	bl	0 <lt__error_string>
    28ac:	bl	0 <lt__set_last_error>
    28b0:	mov	w0, #0x1                   	// #1
    28b4:	ldp	x19, x20, [sp, #16]
    28b8:	ldr	x21, [sp, #32]
    28bc:	ldp	x29, x30, [sp], #48
    28c0:	ret
    28c4:	mov	x1, x20
    28c8:	mov	x0, x19
    28cc:	bl	a20 <lt_dlpath_insertdir.constprop.0>
    28d0:	cmp	w0, #0x0
    28d4:	cset	w0, ne  // ne = any
    28d8:	ldp	x19, x20, [sp, #16]
    28dc:	ldp	x29, x30, [sp], #48
    28e0:	ret
    28e4:	nop

00000000000028e8 <lt_dlsetsearchpath>:
    28e8:	stp	x29, x30, [sp, #-32]!
    28ec:	mov	x29, sp
    28f0:	stp	x19, x20, [sp, #16]
    28f4:	adrp	x19, 0 <lt__alloc_die_callback>
    28f8:	add	x19, x19, #0x0
    28fc:	mov	x20, x0
    2900:	ldr	x0, [x19, #8]
    2904:	bl	0 <free>
    2908:	str	xzr, [x19, #8]
    290c:	cbz	x20, 2948 <lt_dlsetsearchpath+0x60>
    2910:	ldrb	w1, [x20]
    2914:	mov	w0, #0x0                   	// #0
    2918:	cbnz	w1, 2928 <lt_dlsetsearchpath+0x40>
    291c:	ldp	x19, x20, [sp, #16]
    2920:	ldp	x29, x30, [sp], #32
    2924:	ret
    2928:	add	x1, x19, #0x8
    292c:	mov	x0, x20
    2930:	bl	18 <canonicalize_path>
    2934:	cmp	w0, #0x0
    2938:	cset	w0, ne  // ne = any
    293c:	ldp	x19, x20, [sp, #16]
    2940:	ldp	x29, x30, [sp], #32
    2944:	ret
    2948:	mov	w0, #0x0                   	// #0
    294c:	ldp	x19, x20, [sp, #16]
    2950:	ldp	x29, x30, [sp], #32
    2954:	ret

0000000000002958 <lt_dlgetsearchpath>:
    2958:	adrp	x0, 0 <lt__alloc_die_callback>
    295c:	ldr	x0, [x0]
    2960:	ret
    2964:	nop

0000000000002968 <lt_dlmakeresident>:
    2968:	cbz	x0, 2984 <lt_dlmakeresident+0x1c>
    296c:	mov	x1, x0
    2970:	ldrb	w2, [x0, #36]
    2974:	mov	w0, #0x0                   	// #0
    2978:	orr	w2, w2, #0x1
    297c:	strb	w2, [x1, #36]
    2980:	ret
    2984:	stp	x29, x30, [sp, #-16]!
    2988:	mov	w0, #0xc                   	// #12
    298c:	mov	x29, sp
    2990:	bl	0 <lt__error_string>
    2994:	bl	0 <lt__set_last_error>
    2998:	mov	w0, #0x1                   	// #1
    299c:	ldp	x29, x30, [sp], #16
    29a0:	ret
    29a4:	nop

00000000000029a8 <lt_dlisresident>:
    29a8:	cbz	x0, 29b8 <lt_dlisresident+0x10>
    29ac:	ldrb	w0, [x0, #36]
    29b0:	and	w0, w0, #0x1
    29b4:	ret
    29b8:	stp	x29, x30, [sp, #-16]!
    29bc:	mov	w0, #0xc                   	// #12
    29c0:	mov	x29, sp
    29c4:	bl	0 <lt__error_string>
    29c8:	bl	0 <lt__set_last_error>
    29cc:	mov	w0, #0xffffffff            	// #-1
    29d0:	ldp	x29, x30, [sp], #16
    29d4:	ret

00000000000029d8 <lt_dlinterface_register>:
    29d8:	stp	x29, x30, [sp, #-48]!
    29dc:	mov	x29, sp
    29e0:	stp	x19, x20, [sp, #16]
    29e4:	mov	x20, x0
    29e8:	mov	x0, #0x10                  	// #16
    29ec:	str	x21, [sp, #32]
    29f0:	mov	x21, x1
    29f4:	bl	0 <lt__malloc>
    29f8:	mov	x19, x0
    29fc:	cbz	x0, 2a14 <lt_dlinterface_register+0x3c>
    2a00:	mov	x0, x20
    2a04:	bl	0 <lt__strdup>
    2a08:	str	x0, [x19]
    2a0c:	cbz	x0, 2a28 <lt_dlinterface_register+0x50>
    2a10:	str	x21, [x19, #8]
    2a14:	mov	x0, x19
    2a18:	ldp	x19, x20, [sp, #16]
    2a1c:	ldr	x21, [sp, #32]
    2a20:	ldp	x29, x30, [sp], #48
    2a24:	ret
    2a28:	mov	x0, x19
    2a2c:	mov	x19, #0x0                   	// #0
    2a30:	bl	0 <free>
    2a34:	b	2a14 <lt_dlinterface_register+0x3c>

0000000000002a38 <lt_dlinterface_free>:
    2a38:	stp	x29, x30, [sp, #-32]!
    2a3c:	mov	x29, sp
    2a40:	str	x19, [sp, #16]
    2a44:	mov	x19, x0
    2a48:	ldr	x0, [x0]
    2a4c:	bl	0 <free>
    2a50:	mov	x0, x19
    2a54:	ldr	x19, [sp, #16]
    2a58:	ldp	x29, x30, [sp], #32
    2a5c:	b	0 <free>

0000000000002a60 <lt_dlcaller_set_data>:
    2a60:	stp	x29, x30, [sp, #-64]!
    2a64:	mov	x29, sp
    2a68:	stp	x21, x22, [sp, #32]
    2a6c:	mov	x21, x0
    2a70:	mov	x22, x1
    2a74:	ldr	x0, [x1, #72]
    2a78:	stp	x19, x20, [sp, #16]
    2a7c:	str	x23, [sp, #48]
    2a80:	mov	x23, x2
    2a84:	cbz	x0, 2b04 <lt_dlcaller_set_data+0xa4>
    2a88:	ldr	x4, [x0]
    2a8c:	cbz	x4, 2b04 <lt_dlcaller_set_data+0xa4>
    2a90:	add	x5, x0, #0x10
    2a94:	mov	w19, #0x0                   	// #0
    2a98:	mov	x6, x5
    2a9c:	nop
    2aa0:	ldr	x20, [x6], #16
    2aa4:	mov	w7, w19
    2aa8:	add	w19, w19, #0x1
    2aac:	cbnz	x20, 2aa0 <lt_dlcaller_set_data+0x40>
    2ab0:	mov	w6, w19
    2ab4:	mov	w3, #0x0                   	// #0
    2ab8:	b	2acc <lt_dlcaller_set_data+0x6c>
    2abc:	add	w3, w3, #0x1
    2ac0:	cmp	w3, w6
    2ac4:	b.eq	2adc <lt_dlcaller_set_data+0x7c>  // b.none
    2ac8:	ldr	x4, [x5], #16
    2acc:	cmp	x21, x4
    2ad0:	b.ne	2abc <lt_dlcaller_set_data+0x5c>  // b.any
    2ad4:	add	x1, x0, w3, sxtw #4
    2ad8:	ldr	x20, [x1, #8]
    2adc:	cmp	w3, w19
    2ae0:	b.eq	2b38 <lt_dlcaller_set_data+0xd8>  // b.none
    2ae4:	add	x3, x0, w3, sxtw #4
    2ae8:	str	x23, [x3, #8]
    2aec:	mov	x0, x20
    2af0:	ldp	x19, x20, [sp, #16]
    2af4:	ldp	x21, x22, [sp, #32]
    2af8:	ldr	x23, [sp, #48]
    2afc:	ldp	x29, x30, [sp], #64
    2b00:	ret
    2b04:	mov	x20, #0x0                   	// #0
    2b08:	mov	x1, #0x20                  	// #32
    2b0c:	mov	w19, #0x0                   	// #0
    2b10:	bl	0 <lt__realloc>
    2b14:	cbz	x0, 2b30 <lt_dlcaller_set_data+0xd0>
    2b18:	sbfiz	x19, x19, #4, #32
    2b1c:	str	x0, [x22, #72]
    2b20:	add	x3, x0, x19
    2b24:	str	x21, [x0, x19]
    2b28:	str	xzr, [x3, #16]
    2b2c:	b	2ae8 <lt_dlcaller_set_data+0x88>
    2b30:	mov	x20, #0x0                   	// #0
    2b34:	b	2aec <lt_dlcaller_set_data+0x8c>
    2b38:	add	w7, w7, #0x3
    2b3c:	sbfiz	x1, x7, #4, #32
    2b40:	b	2b10 <lt_dlcaller_set_data+0xb0>
    2b44:	nop

0000000000002b48 <lt_dlcaller_get_data>:
    2b48:	ldr	x1, [x1, #72]
    2b4c:	mov	x2, x0
    2b50:	cbz	x1, 2b78 <lt_dlcaller_get_data+0x30>
    2b54:	ldr	x0, [x1]
    2b58:	cbnz	x0, 2b68 <lt_dlcaller_get_data+0x20>
    2b5c:	b	2b74 <lt_dlcaller_get_data+0x2c>
    2b60:	ldr	x0, [x1, #16]!
    2b64:	cbz	x0, 2b74 <lt_dlcaller_get_data+0x2c>
    2b68:	cmp	x2, x0
    2b6c:	b.ne	2b60 <lt_dlcaller_get_data+0x18>  // b.any
    2b70:	ldr	x0, [x1, #8]
    2b74:	ret
    2b78:	mov	x0, #0x0                   	// #0
    2b7c:	ret

0000000000002b80 <lt_dlgetinfo>:
    2b80:	cbz	x0, 2b8c <lt_dlgetinfo+0xc>
    2b84:	add	x0, x0, #0x10
    2b88:	ret
    2b8c:	stp	x29, x30, [sp, #-16]!
    2b90:	mov	w0, #0xc                   	// #12
    2b94:	mov	x29, sp
    2b98:	bl	0 <lt__error_string>
    2b9c:	bl	0 <lt__set_last_error>
    2ba0:	mov	x0, #0x0                   	// #0
    2ba4:	ldp	x29, x30, [sp], #16
    2ba8:	ret
    2bac:	nop

0000000000002bb0 <lt_dlhandle_iterate>:
    2bb0:	stp	x29, x30, [sp, #-32]!
    2bb4:	mov	x29, sp
    2bb8:	stp	x19, x20, [sp, #16]
    2bbc:	cbz	x0, 2c10 <lt_dlhandle_iterate+0x60>
    2bc0:	mov	x20, x0
    2bc4:	cbz	x1, 2c04 <lt_dlhandle_iterate+0x54>
    2bc8:	ldr	x19, [x1]
    2bcc:	cbz	x19, 2bf0 <lt_dlhandle_iterate+0x40>
    2bd0:	ldr	x2, [x20, #8]
    2bd4:	cbz	x2, 2bf4 <lt_dlhandle_iterate+0x44>
    2bd8:	ldr	x1, [x20]
    2bdc:	mov	x0, x19
    2be0:	blr	x2
    2be4:	cbz	w0, 2bf4 <lt_dlhandle_iterate+0x44>
    2be8:	ldr	x19, [x19]
    2bec:	cbnz	x19, 2bd0 <lt_dlhandle_iterate+0x20>
    2bf0:	mov	x19, #0x0                   	// #0
    2bf4:	mov	x0, x19
    2bf8:	ldp	x19, x20, [sp, #16]
    2bfc:	ldp	x29, x30, [sp], #32
    2c00:	ret
    2c04:	adrp	x0, 0 <lt__alloc_die_callback>
    2c08:	ldr	x19, [x0]
    2c0c:	b	2bcc <lt_dlhandle_iterate+0x1c>
    2c10:	adrp	x3, 0 <lt__alloc_die_callback>
    2c14:	add	x3, x3, #0x0
    2c18:	adrp	x1, 0 <lt__alloc_die_callback>
    2c1c:	adrp	x0, 0 <lt__alloc_die_callback>
    2c20:	add	x3, x3, #0x198
    2c24:	add	x1, x1, #0x0
    2c28:	add	x0, x0, #0x0
    2c2c:	mov	w2, #0x96a                 	// #2410
    2c30:	bl	0 <__assert_fail>
    2c34:	nop

0000000000002c38 <lt_dlhandle_fetch>:
    2c38:	stp	x29, x30, [sp, #-48]!
    2c3c:	mov	x29, sp
    2c40:	stp	x19, x20, [sp, #16]
    2c44:	mov	x20, x0
    2c48:	mov	x19, #0x0                   	// #0
    2c4c:	str	x21, [sp, #32]
    2c50:	mov	x21, x1
    2c54:	cbz	x0, 2c94 <lt_dlhandle_fetch+0x5c>
    2c58:	mov	x1, x19
    2c5c:	mov	x0, x20
    2c60:	bl	2bb0 <lt_dlhandle_iterate>
    2c64:	mov	x19, x0
    2c68:	cbz	x0, 2c80 <lt_dlhandle_fetch+0x48>
    2c6c:	ldr	x0, [x19, #24]
    2c70:	cbz	x0, 2c58 <lt_dlhandle_fetch+0x20>
    2c74:	mov	x1, x21
    2c78:	bl	0 <strcmp>
    2c7c:	cbnz	w0, 2c58 <lt_dlhandle_fetch+0x20>
    2c80:	mov	x0, x19
    2c84:	ldp	x19, x20, [sp, #16]
    2c88:	ldr	x21, [sp, #32]
    2c8c:	ldp	x29, x30, [sp], #48
    2c90:	ret
    2c94:	adrp	x3, 0 <lt__alloc_die_callback>
    2c98:	add	x3, x3, #0x0
    2c9c:	adrp	x1, 0 <lt__alloc_die_callback>
    2ca0:	adrp	x0, 0 <lt__alloc_die_callback>
    2ca4:	add	x3, x3, #0x1b0
    2ca8:	add	x1, x1, #0x0
    2cac:	add	x0, x0, #0x0
    2cb0:	mov	w2, #0x981                 	// #2433
    2cb4:	bl	0 <__assert_fail>

0000000000002cb8 <lt_dlhandle_map>:
    2cb8:	stp	x29, x30, [sp, #-48]!
    2cbc:	adrp	x3, 0 <lt__alloc_die_callback>
    2cc0:	mov	x29, sp
    2cc4:	stp	x19, x20, [sp, #16]
    2cc8:	stp	x21, x22, [sp, #32]
    2ccc:	ldr	x19, [x3]
    2cd0:	cbz	x0, 2d3c <lt_dlhandle_map+0x84>
    2cd4:	mov	x20, x0
    2cd8:	mov	x22, x1
    2cdc:	mov	x21, x2
    2ce0:	cbz	x19, 2d28 <lt_dlhandle_map+0x70>
    2ce4:	nop
    2ce8:	ldr	x3, [x20, #8]
    2cec:	cbz	x3, 2d08 <lt_dlhandle_map+0x50>
    2cf0:	ldr	x1, [x20]
    2cf4:	mov	x0, x19
    2cf8:	blr	x3
    2cfc:	cbz	w0, 2d08 <lt_dlhandle_map+0x50>
    2d00:	ldr	x19, [x19]
    2d04:	cbnz	x19, 2ce8 <lt_dlhandle_map+0x30>
    2d08:	mov	x1, x21
    2d0c:	mov	x0, x19
    2d10:	blr	x22
    2d14:	cbz	w0, 2ce0 <lt_dlhandle_map+0x28>
    2d18:	ldp	x19, x20, [sp, #16]
    2d1c:	ldp	x21, x22, [sp, #32]
    2d20:	ldp	x29, x30, [sp], #48
    2d24:	ret
    2d28:	mov	w0, #0x0                   	// #0
    2d2c:	ldp	x19, x20, [sp, #16]
    2d30:	ldp	x21, x22, [sp, #32]
    2d34:	ldp	x29, x30, [sp], #48
    2d38:	ret
    2d3c:	adrp	x3, 0 <lt__alloc_die_callback>
    2d40:	add	x3, x3, #0x0
    2d44:	adrp	x1, 0 <lt__alloc_die_callback>
    2d48:	adrp	x0, 0 <lt__alloc_die_callback>
    2d4c:	add	x3, x3, #0x1c8
    2d50:	add	x1, x1, #0x0
    2d54:	add	x0, x0, #0x0
    2d58:	mov	w2, #0x995                 	// #2453
    2d5c:	bl	0 <__assert_fail>

libltdl_libltdl_la-slist.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__slist_delete>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	cbz	x1, 40 <lt__slist_delete+0x40>
  10:	mov	x19, x0
  14:	mov	x20, x1
  18:	cbz	x0, 30 <lt__slist_delete+0x30>
  1c:	nop
  20:	mov	x0, x19
  24:	ldr	x19, [x19]
  28:	blr	x20
  2c:	cbnz	x19, 20 <lt__slist_delete+0x20>
  30:	mov	x0, #0x0                   	// #0
  34:	ldp	x19, x20, [sp, #16]
  38:	ldp	x29, x30, [sp], #32
  3c:	ret
  40:	adrp	x3, 0 <lt__slist_delete>
  44:	adrp	x1, 0 <lt__slist_delete>
  48:	adrp	x0, 0 <lt__slist_delete>
  4c:	add	x3, x3, #0x0
  50:	add	x1, x1, #0x0
  54:	add	x0, x0, #0x0
  58:	mov	w2, #0x38                  	// #56
  5c:	bl	0 <__assert_fail>

0000000000000060 <lt__slist_remove>:
  60:	stp	x29, x30, [sp, #-48]!
  64:	mov	x29, sp
  68:	stp	x19, x20, [sp, #16]
  6c:	cbz	x1, e0 <lt__slist_remove+0x80>
  70:	mov	x19, x0
  74:	cbz	x0, d0 <lt__slist_remove+0x70>
  78:	ldr	x0, [x0]
  7c:	cbz	x0, d0 <lt__slist_remove+0x70>
  80:	str	x21, [sp, #32]
  84:	mov	x20, x1
  88:	mov	x21, x2
  8c:	mov	x1, x2
  90:	blr	x20
  94:	cbz	x0, c0 <lt__slist_remove+0x60>
  98:	ldr	x1, [x19]
  9c:	ldr	x21, [sp, #32]
  a0:	ldr	x1, [x1]
  a4:	str	x1, [x19]
  a8:	ldp	x19, x20, [sp, #16]
  ac:	ldp	x29, x30, [sp], #48
  b0:	ret
  b4:	mov	x1, x21
  b8:	blr	x20
  bc:	cbnz	x0, 98 <lt__slist_remove+0x38>
  c0:	ldr	x19, [x19]
  c4:	ldr	x0, [x19]
  c8:	cbnz	x0, b4 <lt__slist_remove+0x54>
  cc:	ldr	x21, [sp, #32]
  d0:	mov	x0, #0x0                   	// #0
  d4:	ldp	x19, x20, [sp, #16]
  d8:	ldp	x29, x30, [sp], #48
  dc:	ret
  e0:	adrp	x3, 0 <lt__slist_delete>
  e4:	add	x3, x3, #0x0
  e8:	adrp	x1, 0 <lt__slist_delete>
  ec:	adrp	x0, 0 <lt__slist_delete>
  f0:	add	x3, x3, #0x18
  f4:	add	x1, x1, #0x0
  f8:	add	x0, x0, #0x0
  fc:	mov	w2, #0x53                  	// #83
 100:	str	x21, [sp, #32]
 104:	bl	0 <__assert_fail>

0000000000000108 <lt__slist_find>:
 108:	stp	x29, x30, [sp, #-48]!
 10c:	mov	x29, sp
 110:	stp	x19, x20, [sp, #16]
 114:	str	x21, [sp, #32]
 118:	cbz	x1, 16c <lt__slist_find+0x64>
 11c:	mov	x19, x0
 120:	mov	x20, x1
 124:	mov	x21, x2
 128:	cbnz	x0, 138 <lt__slist_find+0x30>
 12c:	b	158 <lt__slist_find+0x50>
 130:	ldr	x19, [x19]
 134:	cbz	x19, 158 <lt__slist_find+0x50>
 138:	mov	x1, x21
 13c:	mov	x0, x19
 140:	blr	x20
 144:	cbz	x0, 130 <lt__slist_find+0x28>
 148:	ldp	x19, x20, [sp, #16]
 14c:	ldr	x21, [sp, #32]
 150:	ldp	x29, x30, [sp], #48
 154:	ret
 158:	mov	x0, #0x0                   	// #0
 15c:	ldp	x19, x20, [sp, #16]
 160:	ldr	x21, [sp, #32]
 164:	ldp	x29, x30, [sp], #48
 168:	ret
 16c:	adrp	x3, 0 <lt__slist_delete>
 170:	add	x3, x3, #0x0
 174:	adrp	x1, 0 <lt__slist_delete>
 178:	adrp	x0, 0 <lt__slist_delete>
 17c:	add	x3, x3, #0x30
 180:	add	x1, x1, #0x0
 184:	add	x0, x0, #0x0
 188:	mov	w2, #0x7a                  	// #122
 18c:	bl	0 <__assert_fail>

0000000000000190 <lt__slist_concat>:
 190:	cbz	x0, 1ac <lt__slist_concat+0x1c>
 194:	mov	x2, x0
 198:	mov	x3, x2
 19c:	ldr	x2, [x2]
 1a0:	cbnz	x2, 198 <lt__slist_concat+0x8>
 1a4:	str	x1, [x3]
 1a8:	ret
 1ac:	mov	x0, x1
 1b0:	ret
 1b4:	nop

00000000000001b8 <lt__slist_cons>:
 1b8:	cbz	x0, 1d4 <lt__slist_cons+0x1c>
 1bc:	mov	x2, x0
 1c0:	ldr	x0, [x0]
 1c4:	cbnz	x0, 1dc <lt__slist_cons+0x24>
 1c8:	mov	x0, x2
 1cc:	str	x1, [x2]
 1d0:	ret
 1d4:	mov	x0, x1
 1d8:	ret
 1dc:	stp	x29, x30, [sp, #-16]!
 1e0:	adrp	x3, 0 <lt__slist_delete>
 1e4:	add	x3, x3, #0x0
 1e8:	mov	x29, sp
 1ec:	adrp	x1, 0 <lt__slist_delete>
 1f0:	adrp	x0, 0 <lt__slist_delete>
 1f4:	add	x3, x3, #0x40
 1f8:	add	x1, x1, #0x0
 1fc:	add	x0, x0, #0x0
 200:	mov	w2, #0xaf                  	// #175
 204:	bl	0 <__assert_fail>

0000000000000208 <lt__slist_tail>:
 208:	cbz	x0, 214 <lt__slist_tail+0xc>
 20c:	ldr	x0, [x0]
 210:	ret
 214:	mov	x0, #0x0                   	// #0
 218:	ret
 21c:	nop

0000000000000220 <lt__slist_nth>:
 220:	b	22c <lt__slist_nth+0xc>
 224:	ldr	x0, [x0]
 228:	sub	x1, x1, #0x1
 22c:	cmp	x0, #0x0
 230:	ccmp	x1, #0x1, #0x0, ne  // ne = any
 234:	b.hi	224 <lt__slist_nth+0x4>  // b.pmore
 238:	ret
 23c:	nop

0000000000000240 <lt__slist_length>:
 240:	mov	x1, x0
 244:	mov	x0, #0x0                   	// #0
 248:	cbz	x1, 25c <lt__slist_length+0x1c>
 24c:	nop
 250:	ldr	x1, [x1]
 254:	add	x0, x0, #0x1
 258:	cbnz	x1, 250 <lt__slist_length+0x10>
 25c:	ret

0000000000000260 <lt__slist_reverse>:
 260:	cbz	x0, 280 <lt__slist_reverse+0x20>
 264:	mov	x2, #0x0                   	// #0
 268:	b	270 <lt__slist_reverse+0x10>
 26c:	mov	x0, x1
 270:	ldr	x1, [x0]
 274:	str	x2, [x0]
 278:	mov	x2, x0
 27c:	cbnz	x1, 26c <lt__slist_reverse+0xc>
 280:	ret
 284:	nop

0000000000000288 <lt__slist_foreach>:
 288:	stp	x29, x30, [sp, #-48]!
 28c:	mov	x29, sp
 290:	stp	x19, x20, [sp, #16]
 294:	str	x21, [sp, #32]
 298:	cbz	x1, 2d0 <lt__slist_foreach+0x48>
 29c:	mov	x20, x1
 2a0:	mov	x21, x2
 2a4:	cbz	x0, 2c0 <lt__slist_foreach+0x38>
 2a8:	mov	x1, x21
 2ac:	ldr	x19, [x0]
 2b0:	blr	x20
 2b4:	cbnz	x0, 2c0 <lt__slist_foreach+0x38>
 2b8:	mov	x0, x19
 2bc:	cbnz	x0, 2a8 <lt__slist_foreach+0x20>
 2c0:	ldp	x19, x20, [sp, #16]
 2c4:	ldr	x21, [sp, #32]
 2c8:	ldp	x29, x30, [sp], #48
 2cc:	ret
 2d0:	adrp	x3, 0 <lt__slist_delete>
 2d4:	add	x3, x3, #0x0
 2d8:	adrp	x1, 0 <lt__slist_delete>
 2dc:	adrp	x0, 0 <lt__slist_delete>
 2e0:	add	x3, x3, #0x50
 2e4:	add	x1, x1, #0x0
 2e8:	add	x0, x0, #0x0
 2ec:	mov	w2, #0xf6                  	// #246
 2f0:	bl	0 <__assert_fail>
 2f4:	nop

00000000000002f8 <lt__slist_sort>:
 2f8:	cbz	x0, 3f4 <lt__slist_sort+0xfc>
 2fc:	stp	x29, x30, [sp, #-80]!
 300:	mov	x29, sp
 304:	stp	x19, x20, [sp, #16]
 308:	ldr	x19, [x0]
 30c:	cbz	x19, 3e8 <lt__slist_sort+0xf0>
 310:	ldr	x3, [x19]
 314:	stp	x21, x22, [sp, #32]
 318:	mov	x22, x1
 31c:	str	x23, [sp, #48]
 320:	mov	x1, x0
 324:	mov	x23, x2
 328:	cbnz	x3, 344 <lt__slist_sort+0x4c>
 32c:	b	34c <lt__slist_sort+0x54>
 330:	ldr	x3, [x3]
 334:	mov	x1, x19
 338:	ldr	x4, [x19]
 33c:	mov	x19, x4
 340:	cbz	x3, 34c <lt__slist_sort+0x54>
 344:	ldr	x3, [x3]
 348:	cbnz	x3, 330 <lt__slist_sort+0x38>
 34c:	str	xzr, [x1]
 350:	mov	x2, x23
 354:	mov	x1, x22
 358:	add	x21, sp, #0x40
 35c:	bl	2f8 <lt__slist_sort>
 360:	mov	x20, x0
 364:	mov	x2, x23
 368:	mov	x0, x19
 36c:	mov	x1, x22
 370:	bl	2f8 <lt__slist_sort>
 374:	cmp	x0, #0x0
 378:	mov	x19, x0
 37c:	ccmp	x20, #0x0, #0x4, ne  // ne = any
 380:	b.ne	3a0 <lt__slist_sort+0xa8>  // b.any
 384:	b	3d0 <lt__slist_sort+0xd8>
 388:	str	x19, [x21]
 38c:	mov	x21, x19
 390:	cmp	x20, #0x0
 394:	ldr	x19, [x19]
 398:	ccmp	x19, #0x0, #0x4, ne  // ne = any
 39c:	b.eq	3d0 <lt__slist_sort+0xd8>  // b.none
 3a0:	mov	x2, x23
 3a4:	mov	x1, x19
 3a8:	mov	x0, x20
 3ac:	blr	x22
 3b0:	cmp	w0, #0x0
 3b4:	b.gt	388 <lt__slist_sort+0x90>
 3b8:	str	x20, [x21]
 3bc:	mov	x21, x20
 3c0:	ldr	x20, [x20]
 3c4:	cmp	x20, #0x0
 3c8:	ccmp	x19, #0x0, #0x4, ne  // ne = any
 3cc:	b.ne	3a0 <lt__slist_sort+0xa8>  // b.any
 3d0:	cmp	x20, #0x0
 3d4:	csel	x20, x20, x19, ne  // ne = any
 3d8:	ldr	x23, [sp, #48]
 3dc:	str	x20, [x21]
 3e0:	ldp	x21, x22, [sp, #32]
 3e4:	ldr	x0, [sp, #64]
 3e8:	ldp	x19, x20, [sp, #16]
 3ec:	ldp	x29, x30, [sp], #80
 3f0:	ret
 3f4:	mov	x0, #0x0                   	// #0
 3f8:	ret
 3fc:	nop

0000000000000400 <lt__slist_box>:
 400:	stp	x29, x30, [sp, #-32]!
 404:	mov	x29, sp
 408:	str	x19, [sp, #16]
 40c:	mov	x19, x0
 410:	mov	x0, #0x10                  	// #16
 414:	bl	0 <malloc>
 418:	cbz	x0, 420 <lt__slist_box+0x20>
 41c:	stp	xzr, x19, [x0]
 420:	ldr	x19, [sp, #16]
 424:	ldp	x29, x30, [sp], #32
 428:	ret
 42c:	nop

0000000000000430 <lt__slist_unbox>:
 430:	stp	x29, x30, [sp, #-32]!
 434:	mov	x29, sp
 438:	str	x19, [sp, #16]
 43c:	mov	x19, #0x0                   	// #0
 440:	cbz	x0, 44c <lt__slist_unbox+0x1c>
 444:	ldr	x19, [x0, #8]
 448:	bl	0 <free>
 44c:	mov	x0, x19
 450:	ldr	x19, [sp, #16]
 454:	ldp	x29, x30, [sp], #32
 458:	ret

lt__strl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_strlcat>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	str	x21, [sp, #32]
  10:	cbz	x0, 94 <lt_strlcat+0x94>
  14:	mov	x19, x1
  18:	cbz	x1, d4 <lt_strlcat+0xd4>
  1c:	mov	x20, x2
  20:	cbz	x2, b4 <lt_strlcat+0xb4>
  24:	mov	x21, x0
  28:	bl	0 <strlen>
  2c:	ldrb	w1, [x19]
  30:	add	x3, x21, x0
  34:	cbz	w1, 64 <lt_strlcat+0x64>
  38:	sub	x2, x20, #0x1
  3c:	cmp	x0, x2
  40:	b.cc	50 <lt_strlcat+0x50>  // b.lo, b.ul, b.last
  44:	b	64 <lt_strlcat+0x64>
  48:	cmp	x0, x2
  4c:	b.eq	60 <lt_strlcat+0x60>  // b.none
  50:	strb	w1, [x21, x0]
  54:	add	x0, x0, #0x1
  58:	ldrb	w1, [x19, #1]!
  5c:	cbnz	w1, 48 <lt_strlcat+0x48>
  60:	add	x3, x21, x0
  64:	strb	wzr, [x3]
  68:	ldrb	w1, [x19]
  6c:	cbz	w1, 84 <lt_strlcat+0x84>
  70:	sub	x19, x19, x0
  74:	nop
  78:	add	x0, x0, #0x1
  7c:	ldrb	w1, [x19, x0]
  80:	cbnz	w1, 78 <lt_strlcat+0x78>
  84:	ldp	x19, x20, [sp, #16]
  88:	ldr	x21, [sp, #32]
  8c:	ldp	x29, x30, [sp], #48
  90:	ret
  94:	adrp	x3, 0 <lt_strlcat>
  98:	adrp	x1, 0 <lt_strlcat>
  9c:	adrp	x0, 0 <lt_strlcat>
  a0:	add	x3, x3, #0x0
  a4:	add	x1, x1, #0x0
  a8:	add	x0, x0, #0x0
  ac:	mov	w2, #0x39                  	// #57
  b0:	bl	0 <__assert_fail>
  b4:	adrp	x3, 0 <lt_strlcat>
  b8:	adrp	x1, 0 <lt_strlcat>
  bc:	adrp	x0, 0 <lt_strlcat>
  c0:	add	x3, x3, #0x0
  c4:	add	x1, x1, #0x0
  c8:	add	x0, x0, #0x0
  cc:	mov	w2, #0x3b                  	// #59
  d0:	bl	0 <__assert_fail>
  d4:	adrp	x3, 0 <lt_strlcat>
  d8:	adrp	x1, 0 <lt_strlcat>
  dc:	adrp	x0, 0 <lt_strlcat>
  e0:	add	x3, x3, #0x0
  e4:	add	x1, x1, #0x0
  e8:	add	x0, x0, #0x0
  ec:	mov	w2, #0x3a                  	// #58
  f0:	bl	0 <__assert_fail>
  f4:	nop

00000000000000f8 <lt_strlcpy>:
  f8:	stp	x29, x30, [sp, #-16]!
  fc:	mov	x29, sp
 100:	cbz	x0, 1ac <lt_strlcpy+0xb4>
 104:	cbz	x1, 188 <lt_strlcpy+0x90>
 108:	cbz	x2, 1d0 <lt_strlcpy+0xd8>
 10c:	ldrb	w3, [x1]
 110:	mov	x5, x0
 114:	cbz	w3, 17c <lt_strlcpy+0x84>
 118:	subs	x0, x2, #0x1
 11c:	mov	x4, x1
 120:	mov	x2, #0x0                   	// #0
 124:	b.ne	134 <lt_strlcpy+0x3c>  // b.any
 128:	b	150 <lt_strlcpy+0x58>
 12c:	cmp	x2, x0
 130:	b.eq	174 <lt_strlcpy+0x7c>  // b.none
 134:	strb	w3, [x5, x2]
 138:	add	x2, x2, #0x1
 13c:	add	x4, x1, x2
 140:	ldrb	w3, [x1, x2]
 144:	cbnz	w3, 12c <lt_strlcpy+0x34>
 148:	add	x5, x5, x2
 14c:	mov	x0, x2
 150:	strb	wzr, [x5]
 154:	ldrb	w1, [x4]
 158:	cbz	w1, 16c <lt_strlcpy+0x74>
 15c:	sub	x4, x4, x0
 160:	add	x0, x0, #0x1
 164:	ldrb	w1, [x4, x0]
 168:	cbnz	w1, 160 <lt_strlcpy+0x68>
 16c:	ldp	x29, x30, [sp], #16
 170:	ret
 174:	add	x5, x5, x0
 178:	b	150 <lt_strlcpy+0x58>
 17c:	mov	x4, x1
 180:	mov	x0, #0x0                   	// #0
 184:	b	150 <lt_strlcpy+0x58>
 188:	adrp	x3, 0 <lt_strlcat>
 18c:	add	x3, x3, #0x0
 190:	adrp	x1, 0 <lt_strlcat>
 194:	adrp	x0, 0 <lt_strlcat>
 198:	add	x3, x3, #0x10
 19c:	add	x1, x1, #0x0
 1a0:	add	x0, x0, #0x0
 1a4:	mov	w2, #0x6a                  	// #106
 1a8:	bl	0 <__assert_fail>
 1ac:	adrp	x3, 0 <lt_strlcat>
 1b0:	add	x3, x3, #0x0
 1b4:	adrp	x1, 0 <lt_strlcat>
 1b8:	adrp	x0, 0 <lt_strlcat>
 1bc:	add	x3, x3, #0x10
 1c0:	add	x1, x1, #0x0
 1c4:	add	x0, x0, #0x0
 1c8:	mov	w2, #0x69                  	// #105
 1cc:	bl	0 <__assert_fail>
 1d0:	adrp	x3, 0 <lt_strlcat>
 1d4:	add	x3, x3, #0x0
 1d8:	adrp	x1, 0 <lt_strlcat>
 1dc:	adrp	x0, 0 <lt_strlcat>
 1e0:	add	x3, x3, #0x10
 1e4:	add	x1, x1, #0x0
 1e8:	add	x0, x0, #0x0
 1ec:	mov	w2, #0x6b                  	// #107
 1f0:	bl	0 <__assert_fail>

libltdlS.o:     file format elf64-littleaarch64


dlopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <vl_exit>:
   0:	adrp	x1, 0 <vl_exit>
   4:	mov	w0, #0x0                   	// #0
   8:	str	xzr, [x1]
   c:	ret

0000000000000010 <vm_open>:
  10:	stp	x29, x30, [sp, #-32]!
  14:	mov	x0, x1
  18:	mov	w1, #0x1                   	// #1
  1c:	mov	x29, sp
  20:	str	x19, [sp, #16]
  24:	cbz	x2, 38 <vm_open+0x28>
  28:	ldrb	w3, [x2]
  2c:	mov	w2, #0x101                 	// #257
  30:	tst	x3, #0x4
  34:	csel	w1, w1, w2, eq  // eq = none
  38:	bl	0 <dlopen>
  3c:	mov	x19, x0
  40:	cbz	x0, 54 <vm_open+0x44>
  44:	mov	x0, x19
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret
  54:	bl	0 <dlerror>
  58:	bl	0 <lt__set_last_error>
  5c:	mov	x0, x19
  60:	ldr	x19, [sp, #16]
  64:	ldp	x29, x30, [sp], #32
  68:	ret
  6c:	nop

0000000000000070 <vm_close>:
  70:	stp	x29, x30, [sp, #-16]!
  74:	mov	x0, x1
  78:	mov	x29, sp
  7c:	bl	0 <dlclose>
  80:	cbnz	w0, 8c <vm_close+0x1c>
  84:	ldp	x29, x30, [sp], #16
  88:	ret
  8c:	bl	0 <dlerror>
  90:	bl	0 <lt__set_last_error>
  94:	mov	w0, #0x1                   	// #1
  98:	ldp	x29, x30, [sp], #16
  9c:	ret

00000000000000a0 <vm_sym>:
  a0:	stp	x29, x30, [sp, #-32]!
  a4:	mov	x0, x1
  a8:	mov	x1, x2
  ac:	mov	x29, sp
  b0:	str	x19, [sp, #16]
  b4:	bl	0 <dlsym>
  b8:	mov	x19, x0
  bc:	cbz	x0, d0 <vm_sym+0x30>
  c0:	mov	x0, x19
  c4:	ldr	x19, [sp, #16]
  c8:	ldp	x29, x30, [sp], #32
  cc:	ret
  d0:	bl	0 <dlerror>
  d4:	bl	0 <lt__set_last_error>
  d8:	mov	x0, x19
  dc:	ldr	x19, [sp, #16]
  e0:	ldp	x29, x30, [sp], #32
  e4:	ret

00000000000000e8 <dlopen_LTX_get_vtable>:
  e8:	stp	x29, x30, [sp, #-32]!
  ec:	mov	x29, sp
  f0:	stp	x19, x20, [sp, #16]
  f4:	adrp	x20, 0 <vl_exit>
  f8:	mov	x19, x0
  fc:	ldr	x0, [x20]
 100:	cbz	x0, 16c <dlopen_LTX_get_vtable+0x84>
 104:	ldr	x1, [x0]
 108:	cbz	x1, 124 <dlopen_LTX_get_vtable+0x3c>
 10c:	ldr	x1, [x0, #56]
 110:	cmp	x1, x19
 114:	b.ne	188 <dlopen_LTX_get_vtable+0xa0>  // b.any
 118:	ldp	x19, x20, [sp, #16]
 11c:	ldp	x29, x30, [sp], #32
 120:	ret
 124:	adrp	x5, 0 <vl_exit>
 128:	adrp	x4, 0 <vl_exit>
 12c:	add	x5, x5, #0x0
 130:	add	x4, x4, #0x0
 134:	adrp	x3, 0 <vl_exit>
 138:	adrp	x2, 0 <vl_exit>
 13c:	add	x3, x3, #0x0
 140:	add	x2, x2, #0x0
 144:	adrp	x1, 0 <vl_exit>
 148:	add	x1, x1, #0x0
 14c:	str	x5, [x0]
 150:	stp	x4, x3, [x0, #16]
 154:	str	x2, [x0, #32]
 158:	stp	x1, x19, [x0, #48]
 15c:	str	wzr, [x0, #64]
 160:	ldp	x19, x20, [sp, #16]
 164:	ldp	x29, x30, [sp], #32
 168:	ret
 16c:	mov	x0, #0x48                  	// #72
 170:	bl	0 <lt__zalloc>
 174:	str	x0, [x20]
 178:	cbnz	x0, 104 <dlopen_LTX_get_vtable+0x1c>
 17c:	ldp	x19, x20, [sp, #16]
 180:	ldp	x29, x30, [sp], #32
 184:	ret
 188:	mov	w0, #0x3                   	// #3
 18c:	bl	0 <lt__error_string>
 190:	bl	0 <lt__set_last_error>
 194:	mov	x0, #0x0                   	// #0
 198:	ldp	x19, x20, [sp, #16]
 19c:	ldp	x29, x30, [sp], #32
 1a0:	ret
