
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//liblzma.so.5.2.4_clang_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000003008 <.init>:
    3008:	stp	x29, x30, [sp, #-16]!
    300c:	mov	x29, sp
    3010:	bl	34f0 <pthread_cond_timedwait@plt+0x10>
    3014:	ldp	x29, x30, [sp], #16
    3018:	ret

Disassembly of section .plt:

0000000000003020 <memcpy@plt-0x20>:
    3020:	stp	x16, x30, [sp, #-16]!
    3024:	adrp	x16, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    3028:	ldr	x17, [x16, #4088]
    302c:	add	x16, x16, #0xff8
    3030:	br	x17
    3034:	nop
    3038:	nop
    303c:	nop

0000000000003040 <memcpy@plt>:
    3040:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3044:	ldr	x17, [x16]
    3048:	add	x16, x16, #0x0
    304c:	br	x17

0000000000003050 <memmove@plt>:
    3050:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3054:	ldr	x17, [x16, #8]
    3058:	add	x16, x16, #0x8
    305c:	br	x17

0000000000003060 <pthread_sigmask@plt>:
    3060:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3064:	ldr	x17, [x16, #16]
    3068:	add	x16, x16, #0x10
    306c:	br	x17

0000000000003070 <lzma_block_buffer_encode@plt>:
    3070:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3074:	ldr	x17, [x16, #24]
    3078:	add	x16, x16, #0x18
    307c:	br	x17

0000000000003080 <lzma_check_is_supported@plt>:
    3080:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3084:	ldr	x17, [x16, #32]
    3088:	add	x16, x16, #0x20
    308c:	br	x17

0000000000003090 <lzma_filter_flags_size@plt>:
    3090:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3094:	ldr	x17, [x16, #40]
    3098:	add	x16, x16, #0x28
    309c:	br	x17

00000000000030a0 <lzma_index_buffer_encode@plt>:
    30a0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    30a4:	ldr	x17, [x16, #48]
    30a8:	add	x16, x16, #0x30
    30ac:	br	x17

00000000000030b0 <lzma_stream_flags_compare@plt>:
    30b0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    30b4:	ldr	x17, [x16, #56]
    30b8:	add	x16, x16, #0x38
    30bc:	br	x17

00000000000030c0 <lzma_block_buffer_bound@plt>:
    30c0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    30c4:	ldr	x17, [x16, #64]
    30c8:	add	x16, x16, #0x40
    30cc:	br	x17

00000000000030d0 <lzma_index_hash_decode@plt>:
    30d0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    30d4:	ldr	x17, [x16, #72]
    30d8:	add	x16, x16, #0x48
    30dc:	br	x17

00000000000030e0 <__cxa_finalize@plt>:
    30e0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    30e4:	ldr	x17, [x16, #80]
    30e8:	add	x16, x16, #0x50
    30ec:	br	x17

00000000000030f0 <clock_gettime@plt>:
    30f0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    30f4:	ldr	x17, [x16, #88]
    30f8:	add	x16, x16, #0x58
    30fc:	br	x17

0000000000003100 <lzma_block_header_size@plt>:
    3100:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3104:	ldr	x17, [x16, #96]
    3108:	add	x16, x16, #0x60
    310c:	br	x17

0000000000003110 <sigfillset@plt>:
    3110:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3114:	ldr	x17, [x16, #104]
    3118:	add	x16, x16, #0x68
    311c:	br	x17

0000000000003120 <lzma_index_memusage@plt>:
    3120:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3124:	ldr	x17, [x16, #112]
    3128:	add	x16, x16, #0x70
    312c:	br	x17

0000000000003130 <lzma_block_unpadded_size@plt>:
    3130:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3134:	ldr	x17, [x16, #120]
    3138:	add	x16, x16, #0x78
    313c:	br	x17

0000000000003140 <malloc@plt>:
    3140:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3144:	ldr	x17, [x16, #128]
    3148:	add	x16, x16, #0x80
    314c:	br	x17

0000000000003150 <lzma_index_hash_append@plt>:
    3150:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3154:	ldr	x17, [x16, #136]
    3158:	add	x16, x16, #0x88
    315c:	br	x17

0000000000003160 <lzma_crc32@plt>:
    3160:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3164:	ldr	x17, [x16, #144]
    3168:	add	x16, x16, #0x90
    316c:	br	x17

0000000000003170 <pthread_condattr_destroy@plt>:
    3170:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3174:	ldr	x17, [x16, #152]
    3178:	add	x16, x16, #0x98
    317c:	br	x17

0000000000003180 <lzma_stream_buffer_encode@plt>:
    3180:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3184:	ldr	x17, [x16, #160]
    3188:	add	x16, x16, #0xa0
    318c:	br	x17

0000000000003190 <pthread_cond_signal@plt>:
    3190:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3194:	ldr	x17, [x16, #168]
    3198:	add	x16, x16, #0xa8
    319c:	br	x17

00000000000031a0 <lzma_stream_footer_encode@plt>:
    31a0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    31a4:	ldr	x17, [x16, #176]
    31a8:	add	x16, x16, #0xb0
    31ac:	br	x17

00000000000031b0 <lzma_raw_encoder_memusage@plt>:
    31b0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    31b4:	ldr	x17, [x16, #184]
    31b8:	add	x16, x16, #0xb8
    31bc:	br	x17

00000000000031c0 <memset@plt>:
    31c0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    31c4:	ldr	x17, [x16, #192]
    31c8:	add	x16, x16, #0xc0
    31cc:	br	x17

00000000000031d0 <lzma_filters_copy@plt>:
    31d0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    31d4:	ldr	x17, [x16, #200]
    31d8:	add	x16, x16, #0xc8
    31dc:	br	x17

00000000000031e0 <lzma_properties_decode@plt>:
    31e0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    31e4:	ldr	x17, [x16, #208]
    31e8:	add	x16, x16, #0xd0
    31ec:	br	x17

00000000000031f0 <calloc@plt>:
    31f0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    31f4:	ldr	x17, [x16, #216]
    31f8:	add	x16, x16, #0xd8
    31fc:	br	x17

0000000000003200 <lzma_check_size@plt>:
    3200:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3204:	ldr	x17, [x16, #224]
    3208:	add	x16, x16, #0xe0
    320c:	br	x17

0000000000003210 <bcmp@plt>:
    3210:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3214:	ldr	x17, [x16, #232]
    3218:	add	x16, x16, #0xe8
    321c:	br	x17

0000000000003220 <lzma_index_hash_init@plt>:
    3220:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3224:	ldr	x17, [x16, #240]
    3228:	add	x16, x16, #0xf0
    322c:	br	x17

0000000000003230 <lzma_crc64@plt>:
    3230:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3234:	ldr	x17, [x16, #248]
    3238:	add	x16, x16, #0xf8
    323c:	br	x17

0000000000003240 <pthread_mutex_init@plt>:
    3240:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3244:	ldr	x17, [x16, #256]
    3248:	add	x16, x16, #0x100
    324c:	br	x17

0000000000003250 <pthread_create@plt>:
    3250:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3254:	ldr	x17, [x16, #264]
    3258:	add	x16, x16, #0x108
    325c:	br	x17

0000000000003260 <__gmon_start__@plt>:
    3260:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3264:	ldr	x17, [x16, #272]
    3268:	add	x16, x16, #0x110
    326c:	br	x17

0000000000003270 <pthread_join@plt>:
    3270:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3274:	ldr	x17, [x16, #280]
    3278:	add	x16, x16, #0x118
    327c:	br	x17

0000000000003280 <lzma_raw_decoder_memusage@plt>:
    3280:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3284:	ldr	x17, [x16, #288]
    3288:	add	x16, x16, #0x120
    328c:	br	x17

0000000000003290 <sched_getaffinity@plt>:
    3290:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3294:	ldr	x17, [x16, #296]
    3298:	add	x16, x16, #0x128
    329c:	br	x17

00000000000032a0 <lzma_index_append@plt>:
    32a0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    32a4:	ldr	x17, [x16, #304]
    32a8:	add	x16, x16, #0x130
    32ac:	br	x17

00000000000032b0 <lzma_index_hash_end@plt>:
    32b0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    32b4:	ldr	x17, [x16, #312]
    32b8:	add	x16, x16, #0x138
    32bc:	br	x17

00000000000032c0 <lzma_end@plt>:
    32c0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    32c4:	ldr	x17, [x16, #320]
    32c8:	add	x16, x16, #0x140
    32cc:	br	x17

00000000000032d0 <lzma_block_header_decode@plt>:
    32d0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    32d4:	ldr	x17, [x16, #328]
    32d8:	add	x16, x16, #0x148
    32dc:	br	x17

00000000000032e0 <lzma_filter_flags_encode@plt>:
    32e0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    32e4:	ldr	x17, [x16, #336]
    32e8:	add	x16, x16, #0x150
    32ec:	br	x17

00000000000032f0 <lzma_properties_size@plt>:
    32f0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    32f4:	ldr	x17, [x16, #344]
    32f8:	add	x16, x16, #0x158
    32fc:	br	x17

0000000000003300 <free@plt>:
    3300:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3304:	ldr	x17, [x16, #352]
    3308:	add	x16, x16, #0x160
    330c:	br	x17

0000000000003310 <lzma_stream_header_encode@plt>:
    3310:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3314:	ldr	x17, [x16, #360]
    3318:	add	x16, x16, #0x168
    331c:	br	x17

0000000000003320 <pthread_cond_wait@plt>:
    3320:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3324:	ldr	x17, [x16, #368]
    3328:	add	x16, x16, #0x170
    332c:	br	x17

0000000000003330 <lzma_index_init@plt>:
    3330:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3334:	ldr	x17, [x16, #376]
    3338:	add	x16, x16, #0x178
    333c:	br	x17

0000000000003340 <lzma_vli_decode@plt>:
    3340:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3344:	ldr	x17, [x16, #384]
    3348:	add	x16, x16, #0x180
    334c:	br	x17

0000000000003350 <pthread_condattr_init@plt>:
    3350:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3354:	ldr	x17, [x16, #392]
    3358:	add	x16, x16, #0x188
    335c:	br	x17

0000000000003360 <lzma_index_end@plt>:
    3360:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3364:	ldr	x17, [x16, #400]
    3368:	add	x16, x16, #0x190
    336c:	br	x17

0000000000003370 <__sched_cpucount@plt>:
    3370:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3374:	ldr	x17, [x16, #408]
    3378:	add	x16, x16, #0x198
    337c:	br	x17

0000000000003380 <lzma_properties_encode@plt>:
    3380:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3384:	ldr	x17, [x16, #416]
    3388:	add	x16, x16, #0x1a0
    338c:	br	x17

0000000000003390 <pthread_mutex_destroy@plt>:
    3390:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3394:	ldr	x17, [x16, #424]
    3398:	add	x16, x16, #0x1a8
    339c:	br	x17

00000000000033a0 <pthread_cond_init@plt>:
    33a0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    33a4:	ldr	x17, [x16, #432]
    33a8:	add	x16, x16, #0x1b0
    33ac:	br	x17

00000000000033b0 <lzma_stream_footer_decode@plt>:
    33b0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    33b4:	ldr	x17, [x16, #440]
    33b8:	add	x16, x16, #0x1b8
    33bc:	br	x17

00000000000033c0 <lzma_lzma_preset@plt>:
    33c0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    33c4:	ldr	x17, [x16, #448]
    33c8:	add	x16, x16, #0x1c0
    33cc:	br	x17

00000000000033d0 <lzma_vli_encode@plt>:
    33d0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    33d4:	ldr	x17, [x16, #456]
    33d8:	add	x16, x16, #0x1c8
    33dc:	br	x17

00000000000033e0 <lzma_index_iter_next@plt>:
    33e0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    33e4:	ldr	x17, [x16, #464]
    33e8:	add	x16, x16, #0x1d0
    33ec:	br	x17

00000000000033f0 <sysconf@plt>:
    33f0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    33f4:	ldr	x17, [x16, #472]
    33f8:	add	x16, x16, #0x1d8
    33fc:	br	x17

0000000000003400 <lzma_vli_size@plt>:
    3400:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3404:	ldr	x17, [x16, #480]
    3408:	add	x16, x16, #0x1e0
    340c:	br	x17

0000000000003410 <pthread_condattr_setclock@plt>:
    3410:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3414:	ldr	x17, [x16, #488]
    3418:	add	x16, x16, #0x1e8
    341c:	br	x17

0000000000003420 <lzma_stream_encoder@plt>:
    3420:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3424:	ldr	x17, [x16, #496]
    3428:	add	x16, x16, #0x1f0
    342c:	br	x17

0000000000003430 <lzma_index_iter_init@plt>:
    3430:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3434:	ldr	x17, [x16, #504]
    3438:	add	x16, x16, #0x1f8
    343c:	br	x17

0000000000003440 <lzma_block_uncomp_encode@plt>:
    3440:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3444:	ldr	x17, [x16, #512]
    3448:	add	x16, x16, #0x200
    344c:	br	x17

0000000000003450 <lzma_index_hash_size@plt>:
    3450:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3454:	ldr	x17, [x16, #520]
    3458:	add	x16, x16, #0x208
    345c:	br	x17

0000000000003460 <lzma_index_block_count@plt>:
    3460:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3464:	ldr	x17, [x16, #528]
    3468:	add	x16, x16, #0x210
    346c:	br	x17

0000000000003470 <lzma_stream_header_decode@plt>:
    3470:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3474:	ldr	x17, [x16, #536]
    3478:	add	x16, x16, #0x218
    347c:	br	x17

0000000000003480 <lzma_filter_flags_decode@plt>:
    3480:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3484:	ldr	x17, [x16, #544]
    3488:	add	x16, x16, #0x220
    348c:	br	x17

0000000000003490 <lzma_index_size@plt>:
    3490:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    3494:	ldr	x17, [x16, #552]
    3498:	add	x16, x16, #0x228
    349c:	br	x17

00000000000034a0 <pthread_cond_destroy@plt>:
    34a0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    34a4:	ldr	x17, [x16, #560]
    34a8:	add	x16, x16, #0x230
    34ac:	br	x17

00000000000034b0 <pthread_mutex_lock@plt>:
    34b0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    34b4:	ldr	x17, [x16, #568]
    34b8:	add	x16, x16, #0x238
    34bc:	br	x17

00000000000034c0 <lzma_block_header_encode@plt>:
    34c0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    34c4:	ldr	x17, [x16, #576]
    34c8:	add	x16, x16, #0x240
    34cc:	br	x17

00000000000034d0 <pthread_mutex_unlock@plt>:
    34d0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    34d4:	ldr	x17, [x16, #584]
    34d8:	add	x16, x16, #0x248
    34dc:	br	x17

00000000000034e0 <pthread_cond_timedwait@plt>:
    34e0:	adrp	x16, 32000 <memcpy@GLIBC_2.17>
    34e4:	ldr	x17, [x16, #592]
    34e8:	add	x16, x16, #0x250
    34ec:	br	x17

Disassembly of section .text:

00000000000034f0 <lzma_version_number@@XZ_5.0-0x160>:
    34f0:	adrp	x0, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    34f4:	ldr	x0, [x0, #3968]
    34f8:	cbz	x0, 3500 <pthread_cond_timedwait@plt+0x20>
    34fc:	b	3260 <__gmon_start__@plt>
    3500:	ret
    3504:	nop
    3508:	adrp	x0, 32000 <lzma_mode_is_supported@@XZ_5.0+0x2033c>
    350c:	add	x0, x0, #0x260
    3510:	adrp	x1, 32000 <lzma_mode_is_supported@@XZ_5.0+0x2033c>
    3514:	add	x1, x1, #0x260
    3518:	cmp	x1, x0
    351c:	b.eq	3534 <pthread_cond_timedwait@plt+0x54>  // b.none
    3520:	adrp	x1, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    3524:	ldr	x1, [x1, #3904]
    3528:	cbz	x1, 3534 <pthread_cond_timedwait@plt+0x54>
    352c:	mov	x16, x1
    3530:	br	x16
    3534:	ret
    3538:	adrp	x0, 32000 <lzma_mode_is_supported@@XZ_5.0+0x2033c>
    353c:	add	x0, x0, #0x260
    3540:	adrp	x1, 32000 <lzma_mode_is_supported@@XZ_5.0+0x2033c>
    3544:	add	x1, x1, #0x260
    3548:	sub	x1, x1, x0
    354c:	lsr	x2, x1, #63
    3550:	add	x1, x2, x1, asr #3
    3554:	cmp	xzr, x1, asr #1
    3558:	asr	x1, x1, #1
    355c:	b.eq	3574 <pthread_cond_timedwait@plt+0x94>  // b.none
    3560:	adrp	x2, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    3564:	ldr	x2, [x2, #4040]
    3568:	cbz	x2, 3574 <pthread_cond_timedwait@plt+0x94>
    356c:	mov	x16, x2
    3570:	br	x16
    3574:	ret
    3578:	stp	x29, x30, [sp, #-32]!
    357c:	mov	x29, sp
    3580:	str	x19, [sp, #16]
    3584:	adrp	x19, 32000 <lzma_mode_is_supported@@XZ_5.0+0x2033c>
    3588:	ldrb	w0, [x19, #608]
    358c:	cbnz	w0, 35b4 <pthread_cond_timedwait@plt+0xd4>
    3590:	adrp	x0, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    3594:	ldr	x0, [x0, #3920]
    3598:	cbz	x0, 35a8 <pthread_cond_timedwait@plt+0xc8>
    359c:	adrp	x0, 32000 <lzma_mode_is_supported@@XZ_5.0+0x2033c>
    35a0:	ldr	x0, [x0, #600]
    35a4:	bl	30e0 <__cxa_finalize@plt>
    35a8:	bl	3508 <pthread_cond_timedwait@plt+0x28>
    35ac:	mov	w0, #0x1                   	// #1
    35b0:	strb	w0, [x19, #608]
    35b4:	ldr	x19, [sp, #16]
    35b8:	ldp	x29, x30, [sp], #32
    35bc:	ret
    35c0:	b	3538 <pthread_cond_timedwait@plt+0x58>
    35c4:	stp	x29, x30, [sp, #-32]!
    35c8:	mov	w0, #0x1e                  	// #30
    35cc:	str	x19, [sp, #16]
    35d0:	mov	x29, sp
    35d4:	bl	33f0 <sysconf@plt>
    35d8:	mov	x19, x0
    35dc:	mov	w0, #0x55                  	// #85
    35e0:	bl	33f0 <sysconf@plt>
    35e4:	cmn	x0, #0x1
    35e8:	mov	x8, #0xffffffffffffffff    	// #-1
    35ec:	ccmp	x19, x8, #0x4, ne  // ne = any
    35f0:	mul	x8, x0, x19
    35f4:	ldr	x19, [sp, #16]
    35f8:	csel	x0, x8, xzr, ne  // ne = any
    35fc:	ldp	x29, x30, [sp], #32
    3600:	ret
    3604:	sub	sp, sp, #0x90
    3608:	mov	x2, sp
    360c:	mov	w1, #0x80                  	// #128
    3610:	mov	w0, wzr
    3614:	stp	x29, x30, [sp, #128]
    3618:	add	x29, sp, #0x80
    361c:	bl	3290 <sched_getaffinity@plt>
    3620:	mov	w8, w0
    3624:	mov	w0, wzr
    3628:	cbz	w8, 3638 <pthread_cond_timedwait@plt+0x158>
    362c:	ldp	x29, x30, [sp, #128]
    3630:	add	sp, sp, #0x90
    3634:	ret
    3638:	mov	x1, sp
    363c:	mov	w0, #0x80                  	// #128
    3640:	bl	3370 <__sched_cpucount@plt>
    3644:	ldp	x29, x30, [sp, #128]
    3648:	add	sp, sp, #0x90
    364c:	ret

0000000000003650 <lzma_version_number@@XZ_5.0>:
    3650:	mov	w0, #0x3eca                	// #16074
    3654:	movk	w0, #0x2fb, lsl #16
    3658:	ret

000000000000365c <lzma_version_string@@XZ_5.0>:
    365c:	adrp	x0, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    3660:	add	x0, x0, #0x27b
    3664:	ret
    3668:	cmp	x0, #0x0
    366c:	csinc	x2, x0, xzr, ne  // ne = any
    3670:	cbz	x1, 3688 <lzma_version_string@@XZ_5.0+0x2c>
    3674:	ldr	x3, [x1]
    3678:	cbz	x3, 3688 <lzma_version_string@@XZ_5.0+0x2c>
    367c:	ldr	x0, [x1, #16]
    3680:	mov	w1, #0x1                   	// #1
    3684:	br	x3
    3688:	mov	x0, x2
    368c:	b	3140 <malloc@plt>
    3690:	stp	x29, x30, [sp, #-32]!
    3694:	cmp	x0, #0x0
    3698:	stp	x20, x19, [sp, #16]
    369c:	csinc	x19, x0, xzr, ne  // ne = any
    36a0:	mov	x29, sp
    36a4:	cbz	x1, 36e8 <lzma_version_string@@XZ_5.0+0x8c>
    36a8:	ldr	x8, [x1]
    36ac:	cbz	x8, 36e8 <lzma_version_string@@XZ_5.0+0x8c>
    36b0:	ldr	x0, [x1, #16]
    36b4:	mov	w1, #0x1                   	// #1
    36b8:	mov	x2, x19
    36bc:	blr	x8
    36c0:	mov	x20, x0
    36c4:	cbz	x0, 36d8 <lzma_version_string@@XZ_5.0+0x7c>
    36c8:	mov	x0, x20
    36cc:	mov	w1, wzr
    36d0:	mov	x2, x19
    36d4:	bl	31c0 <memset@plt>
    36d8:	mov	x0, x20
    36dc:	ldp	x20, x19, [sp, #16]
    36e0:	ldp	x29, x30, [sp], #32
    36e4:	ret
    36e8:	mov	x1, x19
    36ec:	ldp	x20, x19, [sp, #16]
    36f0:	mov	w0, #0x1                   	// #1
    36f4:	ldp	x29, x30, [sp], #32
    36f8:	b	31f0 <calloc@plt>
    36fc:	mov	x8, x0
    3700:	cbz	x1, 3718 <lzma_version_string@@XZ_5.0+0xbc>
    3704:	ldr	x2, [x1, #8]
    3708:	cbz	x2, 3718 <lzma_version_string@@XZ_5.0+0xbc>
    370c:	ldr	x0, [x1, #16]
    3710:	mov	x1, x8
    3714:	br	x2
    3718:	mov	x0, x8
    371c:	b	3300 <free@plt>
    3720:	stp	x29, x30, [sp, #-64]!
    3724:	str	x23, [sp, #16]
    3728:	stp	x22, x21, [sp, #32]
    372c:	ldr	x22, [x1]
    3730:	ldr	x23, [x4]
    3734:	stp	x20, x19, [sp, #48]
    3738:	mov	x20, x1
    373c:	sub	x9, x2, x22
    3740:	sub	x10, x5, x23
    3744:	cmp	x9, x10
    3748:	add	x8, x3, x23
    374c:	csel	x21, x9, x10, cc  // cc = lo, ul, last
    3750:	add	x1, x0, x22
    3754:	mov	x0, x8
    3758:	mov	x2, x21
    375c:	mov	x29, sp
    3760:	mov	x19, x4
    3764:	bl	3040 <memcpy@plt>
    3768:	add	x8, x21, x22
    376c:	add	x9, x21, x23
    3770:	str	x8, [x20]
    3774:	str	x9, [x19]
    3778:	mov	x0, x21
    377c:	ldp	x20, x19, [sp, #48]
    3780:	ldp	x22, x21, [sp, #32]
    3784:	ldr	x23, [sp, #16]
    3788:	ldp	x29, x30, [sp], #64
    378c:	ret
    3790:	stp	x29, x30, [sp, #-48]!
    3794:	stp	x22, x21, [sp, #16]
    3798:	stp	x20, x19, [sp, #32]
    379c:	mov	x22, x0
    37a0:	ldr	x3, [x2, #8]
    37a4:	ldr	x8, [x22, #16]!
    37a8:	mov	x19, x2
    37ac:	mov	x20, x0
    37b0:	mov	x21, x1
    37b4:	cmp	x3, x8
    37b8:	mov	x29, sp
    37bc:	b.eq	381c <lzma_version_string@@XZ_5.0+0x1c0>  // b.none
    37c0:	cbz	x8, 381c <lzma_version_string@@XZ_5.0+0x1c0>
    37c4:	ldr	x8, [x20, #32]
    37c8:	ldr	x1, [x20]
    37cc:	cbz	x8, 37e0 <lzma_version_string@@XZ_5.0+0x184>
    37d0:	mov	x0, x1
    37d4:	mov	x1, x21
    37d8:	blr	x8
    37dc:	b	3800 <lzma_version_string@@XZ_5.0+0x1a4>
    37e0:	cbz	x21, 37f8 <lzma_version_string@@XZ_5.0+0x19c>
    37e4:	ldr	x8, [x21, #8]
    37e8:	cbz	x8, 37f8 <lzma_version_string@@XZ_5.0+0x19c>
    37ec:	ldr	x0, [x21, #16]
    37f0:	blr	x8
    37f4:	b	3800 <lzma_version_string@@XZ_5.0+0x1a4>
    37f8:	mov	x0, x1
    37fc:	bl	3300 <free@plt>
    3800:	mov	x8, #0xffffffffffffffff    	// #-1
    3804:	movi	v0.2d, #0x0
    3808:	stp	xzr, x8, [x20]
    380c:	str	xzr, [x22, #48]
    3810:	stp	q0, q0, [x22, #16]
    3814:	str	q0, [x22]
    3818:	ldr	x3, [x19, #8]
    381c:	str	x3, [x20, #16]
    3820:	ldr	x8, [x19]
    3824:	str	x8, [x20, #8]
    3828:	cbz	x3, 3848 <lzma_version_string@@XZ_5.0+0x1ec>
    382c:	mov	x0, x20
    3830:	mov	x1, x21
    3834:	mov	x2, x19
    3838:	ldp	x20, x19, [sp, #32]
    383c:	ldp	x22, x21, [sp, #16]
    3840:	ldp	x29, x30, [sp], #48
    3844:	br	x3
    3848:	ldp	x20, x19, [sp, #32]
    384c:	ldp	x22, x21, [sp, #16]
    3850:	mov	w0, wzr
    3854:	ldp	x29, x30, [sp], #48
    3858:	ret
    385c:	stp	x29, x30, [sp, #-32]!
    3860:	stp	x20, x19, [sp, #16]
    3864:	mov	x20, x0
    3868:	ldr	x8, [x20, #16]!
    386c:	mov	x29, sp
    3870:	cbz	x8, 38cc <lzma_version_string@@XZ_5.0+0x270>
    3874:	ldr	x9, [x0, #32]
    3878:	ldr	x8, [x0]
    387c:	mov	x19, x0
    3880:	cbz	x9, 3890 <lzma_version_string@@XZ_5.0+0x234>
    3884:	mov	x0, x8
    3888:	blr	x9
    388c:	b	38b4 <lzma_version_string@@XZ_5.0+0x258>
    3890:	cbz	x1, 38ac <lzma_version_string@@XZ_5.0+0x250>
    3894:	ldr	x9, [x1, #8]
    3898:	cbz	x9, 38ac <lzma_version_string@@XZ_5.0+0x250>
    389c:	ldr	x0, [x1, #16]
    38a0:	mov	x1, x8
    38a4:	blr	x9
    38a8:	b	38b4 <lzma_version_string@@XZ_5.0+0x258>
    38ac:	mov	x0, x8
    38b0:	bl	3300 <free@plt>
    38b4:	mov	x8, #0xffffffffffffffff    	// #-1
    38b8:	movi	v0.2d, #0x0
    38bc:	stp	xzr, x8, [x19]
    38c0:	str	xzr, [x20, #48]
    38c4:	stp	q0, q0, [x20, #16]
    38c8:	str	q0, [x20]
    38cc:	ldp	x20, x19, [sp, #16]
    38d0:	ldp	x29, x30, [sp], #32
    38d4:	ret
    38d8:	ldr	x8, [x2]
    38dc:	ldr	x9, [x0, #8]
    38e0:	cmp	x8, x9
    38e4:	b.ne	3904 <lzma_version_string@@XZ_5.0+0x2a8>  // b.any
    38e8:	cmn	x8, #0x1
    38ec:	b.eq	390c <lzma_version_string@@XZ_5.0+0x2b0>  // b.none
    38f0:	ldr	x4, [x0, #64]
    38f4:	ldr	x0, [x0]
    38f8:	mov	x3, x2
    38fc:	mov	x2, xzr
    3900:	br	x4
    3904:	mov	w0, #0xb                   	// #11
    3908:	ret
    390c:	mov	w0, wzr
    3910:	ret
    3914:	stp	x29, x30, [sp, #-32]!
    3918:	str	x19, [sp, #16]
    391c:	mov	x29, sp
    3920:	cbz	x0, 3968 <lzma_version_string@@XZ_5.0+0x30c>
    3924:	ldr	x8, [x0, #56]
    3928:	mov	x19, x0
    392c:	cbnz	x8, 39a4 <lzma_version_string@@XZ_5.0+0x348>
    3930:	ldr	x9, [x19, #48]
    3934:	cbz	x9, 3978 <lzma_version_string@@XZ_5.0+0x31c>
    3938:	ldr	x8, [x9]
    393c:	cbz	x8, 3978 <lzma_version_string@@XZ_5.0+0x31c>
    3940:	ldr	x0, [x9, #16]
    3944:	mov	w1, #0x1                   	// #1
    3948:	mov	w2, #0x60                  	// #96
    394c:	blr	x8
    3950:	str	x0, [x19, #56]
    3954:	cbnz	x0, 3988 <lzma_version_string@@XZ_5.0+0x32c>
    3958:	mov	w0, #0x5                   	// #5
    395c:	ldr	x19, [sp, #16]
    3960:	ldp	x29, x30, [sp], #32
    3964:	ret
    3968:	mov	w0, #0xb                   	// #11
    396c:	ldr	x19, [sp, #16]
    3970:	ldp	x29, x30, [sp], #32
    3974:	ret
    3978:	mov	w0, #0x60                  	// #96
    397c:	bl	3140 <malloc@plt>
    3980:	str	x0, [x19, #56]
    3984:	cbz	x0, 3958 <lzma_version_string@@XZ_5.0+0x2fc>
    3988:	mov	x8, #0xffffffffffffffff    	// #-1
    398c:	movi	v0.2d, #0x0
    3990:	stp	xzr, x8, [x0]
    3994:	stp	q0, q0, [x0, #16]
    3998:	str	q0, [x0, #48]
    399c:	str	xzr, [x0, #64]
    39a0:	ldr	x8, [x19, #56]
    39a4:	strb	wzr, [x8, #92]
    39a8:	str	wzr, [x8, #88]
    39ac:	ldr	x8, [x19, #56]
    39b0:	mov	w0, wzr
    39b4:	str	wzr, [x8, #72]
    39b8:	strb	wzr, [x8, #93]
    39bc:	str	xzr, [x19, #16]
    39c0:	str	xzr, [x19, #40]
    39c4:	ldr	x19, [sp, #16]
    39c8:	ldp	x29, x30, [sp], #32
    39cc:	ret

00000000000039d0 <lzma_code@@XZ_5.0>:
    39d0:	sub	sp, sp, #0x30
    39d4:	stp	x29, x30, [sp, #16]
    39d8:	ldr	x2, [x0]
    39dc:	mov	x8, x0
    39e0:	str	x19, [sp, #32]
    39e4:	add	x29, sp, #0x10
    39e8:	cbz	x2, 3a38 <lzma_code@@XZ_5.0+0x68>
    39ec:	ldr	x5, [x8, #24]
    39f0:	cbz	x5, 3a44 <lzma_code@@XZ_5.0+0x74>
    39f4:	ldr	x10, [x8, #56]
    39f8:	cbz	x10, 3a4c <lzma_code@@XZ_5.0+0x7c>
    39fc:	cmp	w1, #0x4
    3a00:	mov	w0, #0xb                   	// #11
    3a04:	b.hi	3a28 <lzma_code@@XZ_5.0+0x58>  // b.pmore
    3a08:	ldr	x9, [x10, #24]
    3a0c:	cbz	x9, 3a28 <lzma_code@@XZ_5.0+0x58>
    3a10:	add	x11, x10, w1, uxtw
    3a14:	ldrb	w11, [x11, #88]
    3a18:	cbz	w11, 3a4c <lzma_code@@XZ_5.0+0x7c>
    3a1c:	ldr	x11, [x8, #64]
    3a20:	cbz	x11, 3a60 <lzma_code@@XZ_5.0+0x90>
    3a24:	mov	w0, #0x8                   	// #8
    3a28:	ldr	x19, [sp, #32]
    3a2c:	ldp	x29, x30, [sp, #16]
    3a30:	add	sp, sp, #0x30
    3a34:	ret
    3a38:	ldr	x9, [x8, #8]
    3a3c:	cbnz	x9, 3a4c <lzma_code@@XZ_5.0+0x7c>
    3a40:	b	39ec <lzma_code@@XZ_5.0+0x1c>
    3a44:	ldr	x9, [x8, #32]
    3a48:	cbz	x9, 39f4 <lzma_code@@XZ_5.0+0x24>
    3a4c:	mov	w0, #0xb                   	// #11
    3a50:	ldr	x19, [sp, #32]
    3a54:	ldp	x29, x30, [sp, #16]
    3a58:	add	sp, sp, #0x30
    3a5c:	ret
    3a60:	ldr	x11, [x8, #72]
    3a64:	cbnz	x11, 3aac <lzma_code@@XZ_5.0+0xdc>
    3a68:	ldr	x11, [x8, #80]
    3a6c:	cbnz	x11, 3aac <lzma_code@@XZ_5.0+0xdc>
    3a70:	ldr	x11, [x8, #88]
    3a74:	cbnz	x11, 3aac <lzma_code@@XZ_5.0+0xdc>
    3a78:	ldr	x11, [x8, #96]
    3a7c:	cbnz	x11, 3aac <lzma_code@@XZ_5.0+0xdc>
    3a80:	ldr	x11, [x8, #104]
    3a84:	cbnz	x11, 3aac <lzma_code@@XZ_5.0+0xdc>
    3a88:	ldr	x11, [x8, #112]
    3a8c:	cbnz	x11, 3aac <lzma_code@@XZ_5.0+0xdc>
    3a90:	ldr	x11, [x8, #120]
    3a94:	cbnz	x11, 3aac <lzma_code@@XZ_5.0+0xdc>
    3a98:	mov	x11, x8
    3a9c:	ldr	w8, [x8, #128]
    3aa0:	cbnz	w8, 3aac <lzma_code@@XZ_5.0+0xdc>
    3aa4:	ldr	w8, [x11, #132]
    3aa8:	cbz	w8, 3ac0 <lzma_code@@XZ_5.0+0xf0>
    3aac:	mov	w0, #0x8                   	// #8
    3ab0:	ldr	x19, [sp, #32]
    3ab4:	ldp	x29, x30, [sp, #16]
    3ab8:	add	sp, sp, #0x30
    3abc:	ret
    3ac0:	ldr	w8, [x10, #72]
    3ac4:	cmp	w8, #0x5
    3ac8:	b.hi	3a4c <lzma_code@@XZ_5.0+0x7c>  // b.pmore
    3acc:	adrp	x12, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    3ad0:	add	x12, x12, #0x250
    3ad4:	adr	x13, 3a28 <lzma_code@@XZ_5.0+0x58>
    3ad8:	ldrb	w14, [x12, x8]
    3adc:	add	x13, x13, x14, lsl #2
    3ae0:	mov	w0, #0x1                   	// #1
    3ae4:	br	x13
    3ae8:	sub	w8, w1, #0x1
    3aec:	cmp	w8, #0x3
    3af0:	b.hi	3b6c <lzma_code@@XZ_5.0+0x19c>  // b.pmore
    3af4:	adrp	x12, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    3af8:	add	x12, x12, #0x256
    3afc:	adr	x13, 3b0c <lzma_code@@XZ_5.0+0x13c>
    3b00:	ldrb	w14, [x12, x8]
    3b04:	add	x13, x13, x14, lsl #2
    3b08:	br	x13
    3b0c:	mov	w8, #0x1                   	// #1
    3b10:	b	3b68 <lzma_code@@XZ_5.0+0x198>
    3b14:	cmp	w1, #0x1
    3b18:	b.ne	3a4c <lzma_code@@XZ_5.0+0x7c>  // b.any
    3b1c:	b	3b40 <lzma_code@@XZ_5.0+0x170>
    3b20:	cmp	w1, #0x2
    3b24:	b.ne	3a4c <lzma_code@@XZ_5.0+0x7c>  // b.any
    3b28:	b	3b40 <lzma_code@@XZ_5.0+0x170>
    3b2c:	cmp	w1, #0x3
    3b30:	b.ne	3a4c <lzma_code@@XZ_5.0+0x7c>  // b.any
    3b34:	b	3b40 <lzma_code@@XZ_5.0+0x170>
    3b38:	cmp	w1, #0x4
    3b3c:	b.ne	3a4c <lzma_code@@XZ_5.0+0x7c>  // b.any
    3b40:	ldr	x8, [x10, #80]
    3b44:	ldr	x12, [x11, #8]
    3b48:	cmp	x8, x12
    3b4c:	b.ne	3a4c <lzma_code@@XZ_5.0+0x7c>  // b.any
    3b50:	b	3b6c <lzma_code@@XZ_5.0+0x19c>
    3b54:	mov	w8, #0x2                   	// #2
    3b58:	b	3b68 <lzma_code@@XZ_5.0+0x198>
    3b5c:	mov	w8, #0x3                   	// #3
    3b60:	b	3b68 <lzma_code@@XZ_5.0+0x198>
    3b64:	mov	w8, #0x4                   	// #4
    3b68:	str	w8, [x10, #72]
    3b6c:	str	xzr, [x29, #24]
    3b70:	str	xzr, [sp, #8]
    3b74:	ldr	x8, [x11, #48]
    3b78:	ldr	x0, [x10]
    3b7c:	ldr	x4, [x11, #8]
    3b80:	ldr	x7, [x11, #32]
    3b84:	add	x3, x29, #0x18
    3b88:	add	x6, sp, #0x8
    3b8c:	str	w1, [sp]
    3b90:	mov	x1, x8
    3b94:	mov	x19, x11
    3b98:	blr	x9
    3b9c:	ldr	x9, [x29, #24]
    3ba0:	ldp	x8, x10, [x19]
    3ba4:	ldp	x11, x12, [x19, #16]
    3ba8:	cmp	w0, #0x20
    3bac:	add	x8, x8, x9
    3bb0:	sub	x13, x10, x9
    3bb4:	add	x10, x11, x9
    3bb8:	stp	x8, x13, [x19]
    3bbc:	str	x10, [x19, #16]
    3bc0:	ldr	x10, [sp, #8]
    3bc4:	add	x11, x12, x10
    3bc8:	str	x11, [x19, #24]
    3bcc:	ldp	x8, x11, [x19, #32]
    3bd0:	sub	x8, x8, x10
    3bd4:	str	x8, [x19, #32]
    3bd8:	ldr	x8, [x19, #56]
    3bdc:	add	x11, x11, x10
    3be0:	str	x11, [x19, #40]
    3be4:	str	x13, [x8, #80]
    3be8:	b.hi	3c40 <lzma_code@@XZ_5.0+0x270>  // b.pmore
    3bec:	adrp	x12, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    3bf0:	mov	w11, w0
    3bf4:	add	x12, x12, #0x25a
    3bf8:	adr	x13, 3c08 <lzma_code@@XZ_5.0+0x238>
    3bfc:	ldrb	w14, [x12, x11]
    3c00:	add	x13, x13, x14, lsl #2
    3c04:	br	x13
    3c08:	orr	x9, x10, x9
    3c0c:	cbz	x9, 3c58 <lzma_code@@XZ_5.0+0x288>
    3c10:	mov	w0, wzr
    3c14:	b	3c7c <lzma_code@@XZ_5.0+0x2ac>
    3c18:	ldr	w9, [x8, #72]
    3c1c:	cmp	w9, #0x4
    3c20:	b.hi	3c74 <lzma_code@@XZ_5.0+0x2a4>  // b.pmore
    3c24:	mov	w10, #0x1                   	// #1
    3c28:	lsl	w9, w10, w9
    3c2c:	mov	w10, #0x16                  	// #22
    3c30:	tst	w9, w10
    3c34:	b.eq	3c74 <lzma_code@@XZ_5.0+0x2a4>  // b.none
    3c38:	str	wzr, [x8, #72]
    3c3c:	b	3c7c <lzma_code@@XZ_5.0+0x2ac>
    3c40:	mov	w9, #0x6                   	// #6
    3c44:	str	w9, [x8, #72]
    3c48:	ldr	x19, [sp, #32]
    3c4c:	ldp	x29, x30, [sp, #16]
    3c50:	add	sp, sp, #0x30
    3c54:	ret
    3c58:	ldrb	w9, [x8, #93]
    3c5c:	cbz	w9, 3c90 <lzma_code@@XZ_5.0+0x2c0>
    3c60:	mov	w0, #0xa                   	// #10
    3c64:	ldr	x19, [sp, #32]
    3c68:	ldp	x29, x30, [sp, #16]
    3c6c:	add	sp, sp, #0x30
    3c70:	ret
    3c74:	mov	w9, #0x5                   	// #5
    3c78:	str	w9, [x8, #72]
    3c7c:	strb	wzr, [x8, #93]
    3c80:	ldr	x19, [sp, #32]
    3c84:	ldp	x29, x30, [sp, #16]
    3c88:	add	sp, sp, #0x30
    3c8c:	ret
    3c90:	mov	w9, #0x1                   	// #1
    3c94:	mov	w0, wzr
    3c98:	strb	w9, [x8, #93]
    3c9c:	ldr	x19, [sp, #32]
    3ca0:	ldp	x29, x30, [sp, #16]
    3ca4:	add	sp, sp, #0x30
    3ca8:	ret

0000000000003cac <lzma_end@@XZ_5.0>:
    3cac:	stp	x29, x30, [sp, #-48]!
    3cb0:	str	x21, [sp, #16]
    3cb4:	stp	x20, x19, [sp, #32]
    3cb8:	mov	x29, sp
    3cbc:	cbz	x0, 3d5c <lzma_end@@XZ_5.0+0xb0>
    3cc0:	ldr	x20, [x0, #56]
    3cc4:	mov	x19, x0
    3cc8:	cbz	x20, 3d5c <lzma_end@@XZ_5.0+0xb0>
    3ccc:	mov	x21, x20
    3cd0:	ldr	x1, [x19, #48]
    3cd4:	ldr	x8, [x21, #16]!
    3cd8:	cbz	x8, 3d34 <lzma_end@@XZ_5.0+0x88>
    3cdc:	ldr	x9, [x20, #32]
    3ce0:	ldr	x8, [x20]
    3ce4:	cbz	x9, 3cf4 <lzma_end@@XZ_5.0+0x48>
    3ce8:	mov	x0, x8
    3cec:	blr	x9
    3cf0:	b	3d18 <lzma_end@@XZ_5.0+0x6c>
    3cf4:	cbz	x1, 3d10 <lzma_end@@XZ_5.0+0x64>
    3cf8:	ldr	x9, [x1, #8]
    3cfc:	cbz	x9, 3d10 <lzma_end@@XZ_5.0+0x64>
    3d00:	ldr	x0, [x1, #16]
    3d04:	mov	x1, x8
    3d08:	blr	x9
    3d0c:	b	3d18 <lzma_end@@XZ_5.0+0x6c>
    3d10:	mov	x0, x8
    3d14:	bl	3300 <free@plt>
    3d18:	mov	x8, #0xffffffffffffffff    	// #-1
    3d1c:	movi	v0.2d, #0x0
    3d20:	stp	xzr, x8, [x20]
    3d24:	str	xzr, [x21, #48]
    3d28:	stp	q0, q0, [x21, #16]
    3d2c:	str	q0, [x21]
    3d30:	ldp	x1, x20, [x19, #48]
    3d34:	cbz	x1, 3d50 <lzma_end@@XZ_5.0+0xa4>
    3d38:	ldr	x8, [x1, #8]
    3d3c:	cbz	x8, 3d50 <lzma_end@@XZ_5.0+0xa4>
    3d40:	ldr	x0, [x1, #16]
    3d44:	mov	x1, x20
    3d48:	blr	x8
    3d4c:	b	3d58 <lzma_end@@XZ_5.0+0xac>
    3d50:	mov	x0, x20
    3d54:	bl	3300 <free@plt>
    3d58:	str	xzr, [x19, #56]
    3d5c:	ldp	x20, x19, [sp, #32]
    3d60:	ldr	x21, [sp, #16]
    3d64:	ldp	x29, x30, [sp], #48
    3d68:	ret

0000000000003d6c <lzma_get_progress@@XZ_5.2>:
    3d6c:	ldr	x8, [x0, #56]
    3d70:	ldr	x3, [x8, #40]
    3d74:	cbz	x3, 3d80 <lzma_get_progress@@XZ_5.2+0x14>
    3d78:	ldr	x0, [x8]
    3d7c:	br	x3
    3d80:	ldr	x8, [x0, #16]
    3d84:	str	x8, [x1]
    3d88:	ldr	x8, [x0, #40]
    3d8c:	str	x8, [x2]
    3d90:	ret

0000000000003d94 <lzma_get_check@@XZ_5.0>:
    3d94:	ldr	x8, [x0, #56]
    3d98:	ldr	x1, [x8, #48]
    3d9c:	cbz	x1, 3da8 <lzma_get_check@@XZ_5.0+0x14>
    3da0:	ldr	x0, [x8]
    3da4:	br	x1
    3da8:	mov	w0, wzr
    3dac:	ret

0000000000003db0 <lzma_memusage@@XZ_5.0>:
    3db0:	sub	sp, sp, #0x20
    3db4:	stp	x29, x30, [sp, #16]
    3db8:	add	x29, sp, #0x10
    3dbc:	cbz	x0, 3df0 <lzma_memusage@@XZ_5.0+0x40>
    3dc0:	ldr	x9, [x0, #56]
    3dc4:	cbz	x9, 3dfc <lzma_memusage@@XZ_5.0+0x4c>
    3dc8:	ldr	x8, [x9, #56]
    3dcc:	cbz	x8, 3dfc <lzma_memusage@@XZ_5.0+0x4c>
    3dd0:	ldr	x0, [x9]
    3dd4:	add	x1, sp, #0x8
    3dd8:	mov	x2, sp
    3ddc:	mov	x3, xzr
    3de0:	blr	x8
    3de4:	ldr	x8, [sp, #8]
    3de8:	cmp	w0, #0x0
    3dec:	csel	x0, x8, xzr, eq  // eq = none
    3df0:	ldp	x29, x30, [sp, #16]
    3df4:	add	sp, sp, #0x20
    3df8:	ret
    3dfc:	mov	x0, xzr
    3e00:	ldp	x29, x30, [sp, #16]
    3e04:	add	sp, sp, #0x20
    3e08:	ret

0000000000003e0c <lzma_memlimit_get@@XZ_5.0>:
    3e0c:	sub	sp, sp, #0x20
    3e10:	stp	x29, x30, [sp, #16]
    3e14:	add	x29, sp, #0x10
    3e18:	cbz	x0, 3e4c <lzma_memlimit_get@@XZ_5.0+0x40>
    3e1c:	ldr	x9, [x0, #56]
    3e20:	cbz	x9, 3e58 <lzma_memlimit_get@@XZ_5.0+0x4c>
    3e24:	ldr	x8, [x9, #56]
    3e28:	cbz	x8, 3e58 <lzma_memlimit_get@@XZ_5.0+0x4c>
    3e2c:	ldr	x0, [x9]
    3e30:	mov	x1, sp
    3e34:	add	x2, sp, #0x8
    3e38:	mov	x3, xzr
    3e3c:	blr	x8
    3e40:	ldr	x8, [sp, #8]
    3e44:	cmp	w0, #0x0
    3e48:	csel	x0, x8, xzr, eq  // eq = none
    3e4c:	ldp	x29, x30, [sp, #16]
    3e50:	add	sp, sp, #0x20
    3e54:	ret
    3e58:	mov	x0, xzr
    3e5c:	ldp	x29, x30, [sp, #16]
    3e60:	add	sp, sp, #0x20
    3e64:	ret

0000000000003e68 <lzma_memlimit_set@@XZ_5.0>:
    3e68:	sub	sp, sp, #0x20
    3e6c:	stp	x29, x30, [sp, #16]
    3e70:	add	x29, sp, #0x10
    3e74:	cbz	x0, 3eac <lzma_memlimit_set@@XZ_5.0+0x44>
    3e78:	ldr	x9, [x0, #56]
    3e7c:	cbz	x9, 3eac <lzma_memlimit_set@@XZ_5.0+0x44>
    3e80:	ldr	x8, [x9, #56]
    3e84:	cbz	x8, 3eac <lzma_memlimit_set@@XZ_5.0+0x44>
    3e88:	ldr	x0, [x9]
    3e8c:	cmp	x1, #0x0
    3e90:	csinc	x3, x1, xzr, ne  // ne = any
    3e94:	mov	x1, sp
    3e98:	add	x2, sp, #0x8
    3e9c:	blr	x8
    3ea0:	ldp	x29, x30, [sp, #16]
    3ea4:	add	sp, sp, #0x20
    3ea8:	ret
    3eac:	mov	w0, #0xb                   	// #11
    3eb0:	ldp	x29, x30, [sp, #16]
    3eb4:	add	sp, sp, #0x20
    3eb8:	ret

0000000000003ebc <lzma_block_compressed_size@@XZ_5.0>:
    3ebc:	stp	x29, x30, [sp, #-64]!
    3ec0:	str	x23, [sp, #16]
    3ec4:	stp	x22, x21, [sp, #32]
    3ec8:	stp	x20, x19, [sp, #48]
    3ecc:	mov	x29, sp
    3ed0:	cbz	x0, 3ee4 <lzma_block_compressed_size@@XZ_5.0+0x28>
    3ed4:	ldr	w8, [x0]
    3ed8:	mov	x19, x0
    3edc:	cmp	w8, #0x1
    3ee0:	b.ls	3efc <lzma_block_compressed_size@@XZ_5.0+0x40>  // b.plast
    3ee4:	mov	w0, #0xb                   	// #11
    3ee8:	ldp	x20, x19, [sp, #48]
    3eec:	ldp	x22, x21, [sp, #32]
    3ef0:	ldr	x23, [sp, #16]
    3ef4:	ldp	x29, x30, [sp], #64
    3ef8:	ret
    3efc:	ldr	w21, [x19, #4]
    3f00:	mov	w0, #0xb                   	// #11
    3f04:	sub	w8, w21, #0x8
    3f08:	cmp	w8, #0x3f8
    3f0c:	b.hi	3ee8 <lzma_block_compressed_size@@XZ_5.0+0x2c>  // b.pmore
    3f10:	and	w8, w21, #0x3
    3f14:	cbnz	w8, 3ee8 <lzma_block_compressed_size@@XZ_5.0+0x2c>
    3f18:	ldr	x22, [x19, #16]
    3f1c:	mov	w0, #0xb                   	// #11
    3f20:	cmn	x22, #0x1
    3f24:	b.lt	3ee8 <lzma_block_compressed_size@@XZ_5.0+0x2c>  // b.tstop
    3f28:	cbz	x22, 3ee8 <lzma_block_compressed_size@@XZ_5.0+0x2c>
    3f2c:	ldr	w0, [x19, #8]
    3f30:	mov	x20, x1
    3f34:	cmn	x22, #0x1
    3f38:	b.eq	3f60 <lzma_block_compressed_size@@XZ_5.0+0xa4>  // b.none
    3f3c:	cmp	w0, #0xf
    3f40:	b.hi	3f60 <lzma_block_compressed_size@@XZ_5.0+0xa4>  // b.pmore
    3f44:	add	x23, x22, x21
    3f48:	bl	3200 <lzma_check_size@plt>
    3f4c:	add	x8, x23, w0, uxtw
    3f50:	mov	x9, #0x7ffffffffffffffc    	// #9223372036854775804
    3f54:	cmp	x8, x9
    3f58:	b.hi	3ee4 <lzma_block_compressed_size@@XZ_5.0+0x28>  // b.pmore
    3f5c:	b	3f6c <lzma_block_compressed_size@@XZ_5.0+0xb0>
    3f60:	cmp	w0, #0xf
    3f64:	b.hi	3ee4 <lzma_block_compressed_size@@XZ_5.0+0x28>  // b.pmore
    3f68:	bl	3200 <lzma_check_size@plt>
    3f6c:	add	w8, w0, w21
    3f70:	cmp	x8, x20
    3f74:	b.cs	3f8c <lzma_block_compressed_size@@XZ_5.0+0xd0>  // b.hs, b.nlast
    3f78:	cmn	x22, #0x1
    3f7c:	sub	x8, x20, x8
    3f80:	b.eq	3f94 <lzma_block_compressed_size@@XZ_5.0+0xd8>  // b.none
    3f84:	cmp	x22, x8
    3f88:	b.eq	3f94 <lzma_block_compressed_size@@XZ_5.0+0xd8>  // b.none
    3f8c:	mov	w0, #0x9                   	// #9
    3f90:	b	3ee8 <lzma_block_compressed_size@@XZ_5.0+0x2c>
    3f94:	mov	w0, wzr
    3f98:	str	x8, [x19, #16]
    3f9c:	b	3ee8 <lzma_block_compressed_size@@XZ_5.0+0x2c>

0000000000003fa0 <lzma_block_unpadded_size@@XZ_5.0>:
    3fa0:	stp	x29, x30, [sp, #-32]!
    3fa4:	str	x19, [sp, #16]
    3fa8:	mov	x29, sp
    3fac:	cbz	x0, 3fc4 <lzma_block_unpadded_size@@XZ_5.0+0x24>
    3fb0:	ldr	w9, [x0]
    3fb4:	mov	x8, x0
    3fb8:	cmp	w9, #0x1
    3fbc:	b.ls	3fd0 <lzma_block_unpadded_size@@XZ_5.0+0x30>  // b.plast
    3fc0:	mov	x0, xzr
    3fc4:	ldr	x19, [sp, #16]
    3fc8:	ldp	x29, x30, [sp], #32
    3fcc:	ret
    3fd0:	ldr	w9, [x8, #4]
    3fd4:	mov	x0, xzr
    3fd8:	sub	w10, w9, #0x8
    3fdc:	cmp	w10, #0x3f8
    3fe0:	b.hi	3fc4 <lzma_block_unpadded_size@@XZ_5.0+0x24>  // b.pmore
    3fe4:	and	w10, w9, #0x3
    3fe8:	cbnz	w10, 3fc4 <lzma_block_unpadded_size@@XZ_5.0+0x24>
    3fec:	ldr	x10, [x8, #16]
    3ff0:	mov	x0, xzr
    3ff4:	cmn	x10, #0x1
    3ff8:	b.lt	3fc4 <lzma_block_unpadded_size@@XZ_5.0+0x24>  // b.tstop
    3ffc:	cbz	x10, 3fc4 <lzma_block_unpadded_size@@XZ_5.0+0x24>
    4000:	ldr	w8, [x8, #8]
    4004:	cmp	w8, #0x10
    4008:	csetm	x0, cc  // cc = lo, ul, last
    400c:	cmn	x10, #0x1
    4010:	b.eq	3fc4 <lzma_block_unpadded_size@@XZ_5.0+0x24>  // b.none
    4014:	cmp	w8, #0xf
    4018:	b.hi	3fc4 <lzma_block_unpadded_size@@XZ_5.0+0x24>  // b.pmore
    401c:	mov	w0, w8
    4020:	add	x19, x10, x9
    4024:	bl	3200 <lzma_check_size@plt>
    4028:	add	x8, x19, w0, uxtw
    402c:	mov	x9, #0x7ffffffffffffffc    	// #9223372036854775804
    4030:	cmp	x8, x9
    4034:	csel	x0, xzr, x8, hi  // hi = pmore
    4038:	ldr	x19, [sp, #16]
    403c:	ldp	x29, x30, [sp], #32
    4040:	ret

0000000000004044 <lzma_block_total_size@@XZ_5.0>:
    4044:	stp	x29, x30, [sp, #-32]!
    4048:	str	x19, [sp, #16]
    404c:	mov	x29, sp
    4050:	cbz	x0, 4068 <lzma_block_total_size@@XZ_5.0+0x24>
    4054:	ldr	w9, [x0]
    4058:	mov	x8, x0
    405c:	cmp	w9, #0x1
    4060:	b.ls	4074 <lzma_block_total_size@@XZ_5.0+0x30>  // b.plast
    4064:	mov	x0, xzr
    4068:	ldr	x19, [sp, #16]
    406c:	ldp	x29, x30, [sp], #32
    4070:	ret
    4074:	ldr	w9, [x8, #4]
    4078:	mov	x0, xzr
    407c:	sub	w10, w9, #0x8
    4080:	cmp	w10, #0x3f8
    4084:	b.hi	4068 <lzma_block_total_size@@XZ_5.0+0x24>  // b.pmore
    4088:	and	w10, w9, #0x3
    408c:	cbnz	w10, 4068 <lzma_block_total_size@@XZ_5.0+0x24>
    4090:	ldr	x10, [x8, #16]
    4094:	mov	x0, xzr
    4098:	cmn	x10, #0x1
    409c:	b.lt	4068 <lzma_block_total_size@@XZ_5.0+0x24>  // b.tstop
    40a0:	cbz	x10, 4068 <lzma_block_total_size@@XZ_5.0+0x24>
    40a4:	ldr	w0, [x8, #8]
    40a8:	cmn	x10, #0x1
    40ac:	b.eq	40e4 <lzma_block_total_size@@XZ_5.0+0xa0>  // b.none
    40b0:	cmp	w0, #0xf
    40b4:	b.hi	40e4 <lzma_block_total_size@@XZ_5.0+0xa0>  // b.pmore
    40b8:	add	x19, x10, x9
    40bc:	bl	3200 <lzma_check_size@plt>
    40c0:	add	x8, x19, w0, uxtw
    40c4:	mov	x9, #0x7ffffffffffffffc    	// #9223372036854775804
    40c8:	add	x10, x8, #0x3
    40cc:	and	x10, x10, #0xfffffffffffffffc
    40d0:	cmp	x8, x9
    40d4:	csel	x0, xzr, x10, hi  // hi = pmore
    40d8:	ldr	x19, [sp, #16]
    40dc:	ldp	x29, x30, [sp], #32
    40e0:	ret
    40e4:	cmp	w0, #0x10
    40e8:	b.cs	4064 <lzma_block_total_size@@XZ_5.0+0x20>  // b.hs, b.nlast
    40ec:	mov	x0, #0xffffffffffffffff    	// #-1
    40f0:	ldr	x19, [sp, #16]
    40f4:	ldp	x29, x30, [sp], #32
    40f8:	ret
    40fc:	stp	x29, x30, [sp, #-32]!
    4100:	stp	x20, x19, [sp, #16]
    4104:	add	x20, x0, #0x50
    4108:	mov	x19, x0
    410c:	mov	x0, x20
    4110:	mov	x29, sp
    4114:	bl	33c0 <lzma_lzma_preset@plt>
    4118:	tst	w0, #0xff
    411c:	b.eq	4130 <lzma_block_total_size@@XZ_5.0+0xec>  // b.none
    4120:	mov	w0, #0x1                   	// #1
    4124:	ldp	x20, x19, [sp, #16]
    4128:	ldp	x29, x30, [sp], #32
    412c:	ret
    4130:	mov	w0, wzr
    4134:	mov	w8, #0x21                  	// #33
    4138:	mov	x9, #0xffffffffffffffff    	// #-1
    413c:	stp	x8, x20, [x19]
    4140:	str	x9, [x19, #16]
    4144:	ldp	x20, x19, [sp, #16]
    4148:	ldp	x29, x30, [sp], #32
    414c:	ret

0000000000004150 <lzma_filters_copy@@XZ_5.0>:
    4150:	stp	x29, x30, [sp, #-96]!
    4154:	stp	x22, x21, [sp, #64]
    4158:	mov	w22, #0xb                   	// #11
    415c:	stp	x28, x27, [sp, #16]
    4160:	stp	x26, x25, [sp, #32]
    4164:	stp	x24, x23, [sp, #48]
    4168:	stp	x20, x19, [sp, #80]
    416c:	mov	x29, sp
    4170:	cbz	x0, 42a8 <lzma_filters_copy@@XZ_5.0+0x158>
    4174:	mov	x20, x1
    4178:	cbz	x1, 42a8 <lzma_filters_copy@@XZ_5.0+0x158>
    417c:	ldr	x8, [x0]
    4180:	mov	x21, x0
    4184:	cmn	x8, #0x1
    4188:	b.eq	4260 <lzma_filters_copy@@XZ_5.0+0x110>  // b.none
    418c:	mov	x24, #0x1                   	// #1
    4190:	adrp	x26, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    4194:	adrp	x27, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    4198:	mov	x19, x2
    419c:	mov	x23, xzr
    41a0:	movk	x24, #0x4000, lsl #48
    41a4:	mov	w25, #0x18                  	// #24
    41a8:	add	x26, x26, #0x288
    41ac:	add	x27, x27, #0x2a0
    41b0:	mov	x9, x21
    41b4:	b	41d4 <lzma_filters_copy@@XZ_5.0+0x84>
    41b8:	add	x8, x20, x23, lsl #4
    41bc:	str	xzr, [x8, #8]
    41c0:	add	x23, x23, #0x1
    41c4:	add	x9, x21, x23, lsl #4
    41c8:	ldr	x8, [x9]
    41cc:	cmn	x8, #0x1
    41d0:	b.eq	4264 <lzma_filters_copy@@XZ_5.0+0x114>  // b.none
    41d4:	cmp	x23, #0x4
    41d8:	b.eq	4278 <lzma_filters_copy@@XZ_5.0+0x128>  // b.none
    41dc:	lsl	x10, x23, #4
    41e0:	str	x8, [x20, x10]
    41e4:	add	x28, x21, x10
    41e8:	ldr	x8, [x28, #8]!
    41ec:	cbz	x8, 41b8 <lzma_filters_copy@@XZ_5.0+0x68>
    41f0:	ldr	x9, [x9]
    41f4:	cmp	x9, x24
    41f8:	b.ne	4204 <lzma_filters_copy@@XZ_5.0+0xb4>  // b.any
    41fc:	mov	x8, xzr
    4200:	b	4224 <lzma_filters_copy@@XZ_5.0+0xd4>
    4204:	mov	x8, xzr
    4208:	mov	x10, x27
    420c:	cmp	x8, #0x9
    4210:	b.eq	4254 <lzma_filters_copy@@XZ_5.0+0x104>  // b.none
    4214:	ldr	x11, [x10], #24
    4218:	add	x8, x8, #0x1
    421c:	cmp	x9, x11
    4220:	b.ne	420c <lzma_filters_copy@@XZ_5.0+0xbc>  // b.any
    4224:	madd	x8, x8, x25, x26
    4228:	ldr	x22, [x8, #8]
    422c:	mov	x1, x19
    4230:	mov	x0, x22
    4234:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    4238:	add	x8, x20, x23, lsl #4
    423c:	str	x0, [x8, #8]
    4240:	cbz	x0, 4280 <lzma_filters_copy@@XZ_5.0+0x130>
    4244:	ldr	x1, [x28]
    4248:	mov	x2, x22
    424c:	bl	3040 <memcpy@plt>
    4250:	b	41c0 <lzma_filters_copy@@XZ_5.0+0x70>
    4254:	mov	w22, #0x8                   	// #8
    4258:	cbnz	x23, 4288 <lzma_filters_copy@@XZ_5.0+0x138>
    425c:	b	42a8 <lzma_filters_copy@@XZ_5.0+0x158>
    4260:	mov	x23, xzr
    4264:	mov	w22, wzr
    4268:	add	x8, x20, x23, lsl #4
    426c:	mov	x9, #0xffffffffffffffff    	// #-1
    4270:	stp	x9, xzr, [x8]
    4274:	b	42a8 <lzma_filters_copy@@XZ_5.0+0x158>
    4278:	mov	w22, #0x8                   	// #8
    427c:	b	4288 <lzma_filters_copy@@XZ_5.0+0x138>
    4280:	mov	w22, #0x5                   	// #5
    4284:	cbz	x23, 42a8 <lzma_filters_copy@@XZ_5.0+0x158>
    4288:	add	x8, x20, x23, lsl #4
    428c:	sub	x20, x8, #0x8
    4290:	ldr	x0, [x20]
    4294:	mov	x1, x19
    4298:	sub	x23, x23, #0x1
    429c:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    42a0:	str	xzr, [x20], #-16
    42a4:	cbnz	x23, 4290 <lzma_filters_copy@@XZ_5.0+0x140>
    42a8:	mov	w0, w22
    42ac:	ldp	x20, x19, [sp, #80]
    42b0:	ldp	x22, x21, [sp, #64]
    42b4:	ldp	x24, x23, [sp, #48]
    42b8:	ldp	x26, x25, [sp, #32]
    42bc:	ldp	x28, x27, [sp, #16]
    42c0:	ldp	x29, x30, [sp], #96
    42c4:	ret
    42c8:	sub	sp, sp, #0xe0
    42cc:	stp	x29, x30, [sp, #128]
    42d0:	str	x27, [sp, #144]
    42d4:	stp	x26, x25, [sp, #160]
    42d8:	stp	x24, x23, [sp, #176]
    42dc:	stp	x22, x21, [sp, #192]
    42e0:	stp	x20, x19, [sp, #208]
    42e4:	add	x29, sp, #0x80
    42e8:	cbz	x2, 43a8 <lzma_filters_copy@@XZ_5.0+0x258>
    42ec:	mov	x20, x0
    42f0:	ldr	x0, [x2]
    42f4:	mov	x22, x2
    42f8:	cmn	x0, #0x1
    42fc:	b.eq	43a8 <lzma_filters_copy@@XZ_5.0+0x258>  // b.none
    4300:	add	x10, sp, #0x8
    4304:	mov	x9, #0x1                   	// #1
    4308:	add	x26, x10, #0x10
    430c:	adrp	x10, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    4310:	mov	x21, x3
    4314:	mov	x19, x1
    4318:	mov	x8, xzr
    431c:	mov	x24, xzr
    4320:	mov	w14, #0x1                   	// #1
    4324:	movk	x9, #0x4000, lsl #48
    4328:	add	x10, x10, #0x2a0
    432c:	mov	x13, x0
    4330:	mov	x15, x26
    4334:	mov	w12, #0x1                   	// #1
    4338:	cmp	x13, x9
    433c:	mov	x27, x15
    4340:	mov	x25, x14
    4344:	mov	x11, xzr
    4348:	b.eq	4368 <lzma_filters_copy@@XZ_5.0+0x218>  // b.none
    434c:	mov	x14, x10
    4350:	cmp	x11, #0x9
    4354:	b.eq	43a0 <lzma_filters_copy@@XZ_5.0+0x250>  // b.none
    4358:	ldr	x15, [x14], #24
    435c:	add	x11, x11, #0x1
    4360:	cmp	x13, x15
    4364:	b.ne	4350 <lzma_filters_copy@@XZ_5.0+0x200>  // b.any
    4368:	tbz	w12, #0, 43a0 <lzma_filters_copy@@XZ_5.0+0x250>
    436c:	add	x24, x24, #0x1
    4370:	lsl	x13, x24, #4
    4374:	ldr	x13, [x22, x13]
    4378:	subs	x12, x11, #0x2
    437c:	cinc	x8, x8, cc  // cc = lo, ul, last
    4380:	cmp	x12, #0x7
    4384:	cset	w12, cc  // cc = lo, ul, last
    4388:	add	x15, x27, #0x18
    438c:	cmn	x13, #0x1
    4390:	add	x14, x25, #0x1
    4394:	b.ne	4338 <lzma_filters_copy@@XZ_5.0+0x1e8>  // b.any
    4398:	cmp	x24, #0x4
    439c:	b.ls	43d0 <lzma_filters_copy@@XZ_5.0+0x280>  // b.plast
    43a0:	mov	w23, #0x8                   	// #8
    43a4:	b	43ac <lzma_filters_copy@@XZ_5.0+0x25c>
    43a8:	mov	w23, #0xb                   	// #11
    43ac:	mov	w0, w23
    43b0:	ldp	x20, x19, [sp, #208]
    43b4:	ldp	x22, x21, [sp, #192]
    43b8:	ldp	x24, x23, [sp, #176]
    43bc:	ldp	x26, x25, [sp, #160]
    43c0:	ldr	x27, [sp, #144]
    43c4:	ldp	x29, x30, [sp, #128]
    43c8:	add	sp, sp, #0xe0
    43cc:	ret
    43d0:	cmp	x8, #0x3
    43d4:	mov	w23, #0x8                   	// #8
    43d8:	b.hi	43ac <lzma_filters_copy@@XZ_5.0+0x25c>  // b.pmore
    43dc:	cmp	x11, #0x1
    43e0:	b.hi	43ac <lzma_filters_copy@@XZ_5.0+0x25c>  // b.pmore
    43e4:	tbz	w4, #0, 4428 <lzma_filters_copy@@XZ_5.0+0x2d8>
    43e8:	cbz	x24, 4468 <lzma_filters_copy@@XZ_5.0+0x318>
    43ec:	blr	x21
    43f0:	cbz	x0, 43a0 <lzma_filters_copy@@XZ_5.0+0x250>
    43f4:	ldr	x8, [x0, #8]
    43f8:	cbz	x8, 43a0 <lzma_filters_copy@@XZ_5.0+0x250>
    43fc:	ldr	x9, [x22]
    4400:	subs	x25, x25, #0x1
    4404:	stp	x9, x8, [x27, #-16]
    4408:	ldr	x8, [x22, #8]
    440c:	str	x8, [x27]
    4410:	b.eq	4468 <lzma_filters_copy@@XZ_5.0+0x318>  // b.none
    4414:	ldr	x0, [x22, #16]!
    4418:	sub	x27, x27, #0x18
    441c:	blr	x21
    4420:	cbnz	x0, 43f4 <lzma_filters_copy@@XZ_5.0+0x2a4>
    4424:	b	43a0 <lzma_filters_copy@@XZ_5.0+0x250>
    4428:	cbz	x24, 4468 <lzma_filters_copy@@XZ_5.0+0x318>
    442c:	blr	x21
    4430:	cbz	x0, 43a0 <lzma_filters_copy@@XZ_5.0+0x250>
    4434:	ldr	x8, [x0, #8]
    4438:	cbz	x8, 43a0 <lzma_filters_copy@@XZ_5.0+0x250>
    443c:	ldr	x9, [x22]
    4440:	subs	x25, x25, #0x1
    4444:	stp	x9, x8, [x26, #-16]
    4448:	ldr	x8, [x22, #8]
    444c:	str	x8, [x26]
    4450:	b.eq	4468 <lzma_filters_copy@@XZ_5.0+0x318>  // b.none
    4454:	ldr	x0, [x22, #16]!
    4458:	add	x26, x26, #0x18
    445c:	blr	x21
    4460:	cbnz	x0, 4434 <lzma_filters_copy@@XZ_5.0+0x2e4>
    4464:	b	43a0 <lzma_filters_copy@@XZ_5.0+0x250>
    4468:	mov	w8, #0x18                  	// #24
    446c:	add	x9, sp, #0x8
    4470:	mov	x10, #0xffffffffffffffff    	// #-1
    4474:	madd	x8, x24, x8, x9
    4478:	add	x2, sp, #0x8
    447c:	mov	x0, x20
    4480:	mov	x1, x19
    4484:	stp	x10, xzr, [x8]
    4488:	bl	3790 <lzma_version_string@@XZ_5.0+0x134>
    448c:	mov	w23, w0
    4490:	cbz	w0, 43ac <lzma_filters_copy@@XZ_5.0+0x25c>
    4494:	mov	x0, x20
    4498:	mov	x1, x19
    449c:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    44a0:	b	43ac <lzma_filters_copy@@XZ_5.0+0x25c>
    44a4:	stp	x29, x30, [sp, #-48]!
    44a8:	str	x21, [sp, #16]
    44ac:	stp	x20, x19, [sp, #32]
    44b0:	mov	x29, sp
    44b4:	cbz	x1, 4548 <lzma_filters_copy@@XZ_5.0+0x3f8>
    44b8:	mov	x19, x0
    44bc:	ldr	x0, [x1]
    44c0:	cmn	x0, #0x1
    44c4:	b.eq	4548 <lzma_filters_copy@@XZ_5.0+0x3f8>  // b.none
    44c8:	mov	x10, #0x1                   	// #1
    44cc:	adrp	x11, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    44d0:	mov	x8, xzr
    44d4:	mov	x9, xzr
    44d8:	mov	w13, #0x1                   	// #1
    44dc:	movk	x10, #0x4000, lsl #48
    44e0:	add	x11, x11, #0x2a0
    44e4:	mov	x14, x0
    44e8:	cmp	x14, x10
    44ec:	b.ne	44f8 <lzma_filters_copy@@XZ_5.0+0x3a8>  // b.any
    44f0:	mov	x12, xzr
    44f4:	b	4518 <lzma_filters_copy@@XZ_5.0+0x3c8>
    44f8:	mov	x12, xzr
    44fc:	mov	x15, x11
    4500:	cmp	x12, #0x9
    4504:	b.eq	4548 <lzma_filters_copy@@XZ_5.0+0x3f8>  // b.none
    4508:	ldr	x16, [x15], #24
    450c:	add	x12, x12, #0x1
    4510:	cmp	x14, x16
    4514:	b.ne	4500 <lzma_filters_copy@@XZ_5.0+0x3b0>  // b.any
    4518:	tbz	w13, #0, 4548 <lzma_filters_copy@@XZ_5.0+0x3f8>
    451c:	add	x9, x9, #0x1
    4520:	lsl	x14, x9, #4
    4524:	ldr	x14, [x1, x14]
    4528:	subs	x13, x12, #0x2
    452c:	cinc	x8, x8, cc  // cc = lo, ul, last
    4530:	cmp	x13, #0x7
    4534:	cset	w13, cc  // cc = lo, ul, last
    4538:	cmn	x14, #0x1
    453c:	b.ne	44e8 <lzma_filters_copy@@XZ_5.0+0x398>  // b.any
    4540:	cmp	x9, #0x4
    4544:	b.ls	4560 <lzma_filters_copy@@XZ_5.0+0x410>  // b.plast
    4548:	mov	x8, #0xffffffffffffffff    	// #-1
    454c:	ldp	x20, x19, [sp, #32]
    4550:	ldr	x21, [sp, #16]
    4554:	mov	x0, x8
    4558:	ldp	x29, x30, [sp], #48
    455c:	ret
    4560:	cmp	x8, #0x3
    4564:	mov	x8, #0xffffffffffffffff    	// #-1
    4568:	b.hi	454c <lzma_filters_copy@@XZ_5.0+0x3fc>  // b.pmore
    456c:	cmp	x12, #0x1
    4570:	b.hi	454c <lzma_filters_copy@@XZ_5.0+0x3fc>  // b.pmore
    4574:	mov	x20, xzr
    4578:	add	x21, x1, #0x10
    457c:	b	4590 <lzma_filters_copy@@XZ_5.0+0x440>
    4580:	add	x20, x20, #0x400
    4584:	ldr	x0, [x21], #16
    4588:	cmn	x0, #0x1
    458c:	b.eq	45c4 <lzma_filters_copy@@XZ_5.0+0x474>  // b.none
    4590:	blr	x19
    4594:	cbz	x0, 4548 <lzma_filters_copy@@XZ_5.0+0x3f8>
    4598:	ldr	x8, [x0, #16]
    459c:	cbz	x8, 4580 <lzma_filters_copy@@XZ_5.0+0x430>
    45a0:	ldur	x0, [x21, #-8]
    45a4:	blr	x8
    45a8:	cmn	x0, #0x1
    45ac:	csel	x8, xzr, x0, eq  // eq = none
    45b0:	b.eq	4548 <lzma_filters_copy@@XZ_5.0+0x3f8>  // b.none
    45b4:	add	x20, x8, x20
    45b8:	ldr	x0, [x21], #16
    45bc:	cmn	x0, #0x1
    45c0:	b.ne	4590 <lzma_filters_copy@@XZ_5.0+0x440>  // b.any
    45c4:	add	x8, x20, #0x8, lsl #12
    45c8:	b	454c <lzma_filters_copy@@XZ_5.0+0x3fc>

00000000000045cc <lzma_physmem@@XZ_5.0>:
    45cc:	b	35c4 <pthread_cond_timedwait@plt+0xe4>

00000000000045d0 <lzma_index_init@@XZ_5.0>:
    45d0:	stp	x29, x30, [sp, #-32]!
    45d4:	stp	x20, x19, [sp, #16]
    45d8:	mov	x20, x0
    45dc:	mov	w0, #0x50                  	// #80
    45e0:	mov	x1, x20
    45e4:	mov	x29, sp
    45e8:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    45ec:	mov	x19, x0
    45f0:	cbz	x0, 46d4 <lzma_index_init@@XZ_5.0+0x104>
    45f4:	movi	v0.2d, #0x0
    45f8:	mov	w8, #0x200                 	// #512
    45fc:	mov	w0, #0xa8                  	// #168
    4600:	mov	x1, x20
    4604:	stp	xzr, xzr, [x19]
    4608:	str	wzr, [x19, #24]
    460c:	str	xzr, [x19, #16]
    4610:	stp	q0, q0, [x19, #32]
    4614:	str	x8, [x19, #64]
    4618:	str	wzr, [x19, #72]
    461c:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    4620:	cbz	x0, 46e4 <lzma_index_init@@XZ_5.0+0x114>
    4624:	ldr	w11, [x19, #24]
    4628:	ldr	x8, [x19, #16]
    462c:	ldr	x12, [x19]
    4630:	mov	w10, #0xffffffff            	// #-1
    4634:	mov	w9, #0x1                   	// #1
    4638:	movi	v0.2d, #0x0
    463c:	str	w10, [x0, #104]
    4640:	add	w10, w11, #0x1
    4644:	stp	xzr, xzr, [x0]
    4648:	stp	xzr, xzr, [x0, #88]
    464c:	stp	q0, q0, [x0, #48]
    4650:	str	wzr, [x0, #80]
    4654:	str	xzr, [x0, #160]
    4658:	stp	xzr, xzr, [x0, #24]
    465c:	str	w9, [x0, #40]
    4660:	str	x8, [x0, #16]
    4664:	str	w10, [x19, #24]
    4668:	cbz	x12, 4704 <lzma_index_init@@XZ_5.0+0x134>
    466c:	clz	w11, w10
    4670:	eor	w11, w11, #0x1f
    4674:	lsl	w9, w9, w11
    4678:	cmp	w10, w9
    467c:	str	x0, [x8, #32]
    4680:	str	x0, [x19, #16]
    4684:	b.eq	46d4 <lzma_index_init@@XZ_5.0+0x104>  // b.none
    4688:	rbit	w9, w10
    468c:	clz	w9, w9
    4690:	add	w9, w9, #0x1
    4694:	ldr	x8, [x8, #16]
    4698:	subs	w9, w9, #0x1
    469c:	b.ne	4694 <lzma_index_init@@XZ_5.0+0xc4>  // b.any
    46a0:	ldr	x11, [x8, #16]
    46a4:	ldr	x9, [x8, #32]
    46a8:	add	x10, x11, #0x20
    46ac:	cmp	x11, #0x0
    46b0:	csel	x10, x19, x10, eq  // eq = none
    46b4:	str	x9, [x10]
    46b8:	ldr	x10, [x9, #24]
    46bc:	str	x11, [x9, #16]
    46c0:	str	x10, [x8, #32]
    46c4:	cbz	x10, 46cc <lzma_index_init@@XZ_5.0+0xfc>
    46c8:	str	x8, [x10, #16]
    46cc:	str	x8, [x9, #24]
    46d0:	str	x9, [x8, #16]
    46d4:	mov	x0, x19
    46d8:	ldp	x20, x19, [sp, #16]
    46dc:	ldp	x29, x30, [sp], #32
    46e0:	ret
    46e4:	mov	x0, x19
    46e8:	mov	x1, x20
    46ec:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    46f0:	mov	x19, xzr
    46f4:	mov	x0, x19
    46f8:	ldp	x20, x19, [sp, #16]
    46fc:	ldp	x29, x30, [sp], #32
    4700:	ret
    4704:	stp	x0, x0, [x19]
    4708:	str	x0, [x19, #16]
    470c:	mov	x0, x19
    4710:	ldp	x20, x19, [sp, #16]
    4714:	ldp	x29, x30, [sp], #32
    4718:	ret

000000000000471c <lzma_index_end@@XZ_5.0>:
    471c:	cbz	x0, 4760 <lzma_index_end@@XZ_5.0+0x44>
    4720:	stp	x29, x30, [sp, #-32]!
    4724:	stp	x20, x19, [sp, #16]
    4728:	mov	x20, x0
    472c:	ldr	x0, [x0]
    4730:	mov	x19, x1
    4734:	mov	x29, sp
    4738:	cbz	x0, 474c <lzma_index_end@@XZ_5.0+0x30>
    473c:	adrp	x2, 4000 <lzma_block_unpadded_size@@XZ_5.0+0x60>
    4740:	add	x2, x2, #0x764
    4744:	mov	x1, x19
    4748:	bl	5a18 <lzma_index_iter_locate@@XZ_5.0+0xe0>
    474c:	mov	x0, x20
    4750:	mov	x1, x19
    4754:	ldp	x20, x19, [sp, #16]
    4758:	ldp	x29, x30, [sp], #32
    475c:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
    4760:	ret
    4764:	stp	x29, x30, [sp, #-32]!
    4768:	stp	x20, x19, [sp, #16]
    476c:	mov	x19, x0
    4770:	ldr	x0, [x0, #56]
    4774:	mov	x20, x1
    4778:	mov	x29, sp
    477c:	cbz	x0, 4790 <lzma_index_end@@XZ_5.0+0x74>
    4780:	adrp	x2, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    4784:	ldr	x2, [x2, #3992]
    4788:	mov	x1, x20
    478c:	bl	5a18 <lzma_index_iter_locate@@XZ_5.0+0xe0>
    4790:	mov	x0, x19
    4794:	mov	x1, x20
    4798:	ldp	x20, x19, [sp, #16]
    479c:	ldp	x29, x30, [sp], #32
    47a0:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
    47a4:	mov	x8, #0xfffffffffffffffb    	// #-5
    47a8:	movk	x8, #0xfff, lsl #48
    47ac:	cmp	x1, x8
    47b0:	csel	x8, x1, x8, cc  // cc = lo, ul, last
    47b4:	str	x8, [x0, #64]
    47b8:	ret

00000000000047bc <lzma_index_memusage@@XZ_5.0>:
    47bc:	add	x8, x1, #0x1ff
    47c0:	mov	w9, #0x128                 	// #296
    47c4:	mov	w10, #0x2060                	// #8288
    47c8:	lsr	x12, x8, #9
    47cc:	mul	x9, x0, x9
    47d0:	mul	x10, x12, x10
    47d4:	mov	x12, #0xffffffffffffff8f    	// #-113
    47d8:	sub	x12, x12, x9
    47dc:	cmp	x12, x10
    47e0:	mov	x12, #0x9ff                 	// #2559
    47e4:	movk	x12, #0xfd, lsl #16
    47e8:	movk	x12, #0x8e55, lsl #32
    47ec:	movk	x12, #0xfd0, lsl #48
    47f0:	ccmp	x8, x12, #0x2, cs  // cs = hs, nlast
    47f4:	sub	x11, x0, #0x1
    47f8:	add	x9, x9, x10
    47fc:	mov	w10, #0xfffffffe            	// #-2
    4800:	ccmp	x1, #0x0, #0x8, ls  // ls = plast
    4804:	ccmp	x11, x10, #0x2, ge  // ge = tcont
    4808:	add	x8, x9, #0x70
    480c:	csinv	x0, x8, xzr, ls  // ls = plast
    4810:	ret

0000000000004814 <lzma_index_memused@@XZ_5.0>:
    4814:	ldr	x8, [x0, #48]
    4818:	ldr	w9, [x0, #24]
    481c:	mov	w10, #0x128                 	// #296
    4820:	mov	w11, #0x2060                	// #8288
    4824:	add	x12, x8, #0x1ff
    4828:	lsr	x13, x12, #9
    482c:	mul	x11, x13, x11
    4830:	mov	x13, #0xffffffffffffff8f    	// #-113
    4834:	mul	x10, x9, x10
    4838:	sub	x13, x13, x10
    483c:	cmp	x13, x11
    4840:	add	x10, x10, x11
    4844:	mov	x11, #0x9ff                 	// #2559
    4848:	mov	w13, #0xfffffffe            	// #-2
    484c:	movk	x11, #0xfd, lsl #16
    4850:	sub	x9, x9, #0x1
    4854:	movk	x11, #0x8e55, lsl #32
    4858:	ccmp	x9, x13, #0x2, cs  // cs = hs, nlast
    485c:	movk	x11, #0xfd0, lsl #48
    4860:	ccmp	x8, #0x0, #0x8, ls  // ls = plast
    4864:	ccmp	x12, x11, #0x2, ge  // ge = tcont
    4868:	add	x8, x10, #0x70
    486c:	csinv	x0, x8, xzr, ls  // ls = plast
    4870:	ret

0000000000004874 <lzma_index_block_count@@XZ_5.0>:
    4874:	ldr	x0, [x0, #48]
    4878:	ret

000000000000487c <lzma_index_stream_count@@XZ_5.0>:
    487c:	ldr	w0, [x0, #24]
    4880:	ret

0000000000004884 <lzma_index_size@@XZ_5.0>:
    4884:	stp	x29, x30, [sp, #-32]!
    4888:	str	x19, [sp, #16]
    488c:	ldp	x8, x19, [x0, #48]
    4890:	mov	x29, sp
    4894:	mov	x0, x8
    4898:	bl	3400 <lzma_vli_size@plt>
    489c:	add	w8, w0, #0x1
    48a0:	add	x8, x19, x8
    48a4:	ldr	x19, [sp, #16]
    48a8:	add	x8, x8, #0x7
    48ac:	and	x0, x8, #0xfffffffffffffffc
    48b0:	ldp	x29, x30, [sp], #32
    48b4:	ret

00000000000048b8 <lzma_index_total_size@@XZ_5.0>:
    48b8:	ldr	x0, [x0, #40]
    48bc:	ret

00000000000048c0 <lzma_index_stream_size@@XZ_5.0>:
    48c0:	stp	x29, x30, [sp, #-32]!
    48c4:	stp	x20, x19, [sp, #16]
    48c8:	ldp	x19, x8, [x0, #40]
    48cc:	ldr	x20, [x0, #56]
    48d0:	mov	x29, sp
    48d4:	mov	x0, x8
    48d8:	bl	3400 <lzma_vli_size@plt>
    48dc:	add	w8, w0, #0x1
    48e0:	add	x8, x20, x8
    48e4:	add	x8, x8, #0x7
    48e8:	and	x8, x8, #0xfffffffffffffffc
    48ec:	add	x8, x19, x8
    48f0:	ldp	x20, x19, [sp, #16]
    48f4:	add	x0, x8, #0x18
    48f8:	ldp	x29, x30, [sp], #32
    48fc:	ret

0000000000004900 <lzma_index_file_size@@XZ_5.0>:
    4900:	stp	x29, x30, [sp, #-32]!
    4904:	stp	x20, x19, [sp, #16]
    4908:	ldr	x8, [x0, #16]
    490c:	mov	x29, sp
    4910:	ldr	x10, [x8, #72]
    4914:	ldr	x9, [x8, #8]
    4918:	cbz	x10, 4930 <lzma_index_file_size@@XZ_5.0+0x30>
    491c:	ldr	x11, [x10, #56]
    4920:	add	x10, x10, x11, lsl #4
    4924:	ldr	x10, [x10, #72]
    4928:	add	x10, x10, #0x3
    492c:	and	x10, x10, #0xfffffffffffffffc
    4930:	ldr	x11, [x8, #160]
    4934:	add	x9, x9, x10
    4938:	add	x9, x9, x11
    493c:	adds	x19, x9, #0x18
    4940:	b.mi	4974 <lzma_index_file_size@@XZ_5.0+0x74>  // b.first
    4944:	ldp	x0, x20, [x8, #88]
    4948:	bl	3400 <lzma_vli_size@plt>
    494c:	add	w8, w0, #0x1
    4950:	add	x8, x20, x8
    4954:	add	x8, x8, #0x7
    4958:	and	x8, x8, #0xfffffffffffffffc
    495c:	add	x8, x8, x19
    4960:	cmp	x8, #0x0
    4964:	csinv	x0, x8, xzr, ge  // ge = tcont
    4968:	ldp	x20, x19, [sp, #16]
    496c:	ldp	x29, x30, [sp], #32
    4970:	ret
    4974:	mov	x0, #0xffffffffffffffff    	// #-1
    4978:	ldp	x20, x19, [sp, #16]
    497c:	ldp	x29, x30, [sp], #32
    4980:	ret

0000000000004984 <lzma_index_uncompressed_size@@XZ_5.0>:
    4984:	ldr	x0, [x0, #32]
    4988:	ret

000000000000498c <lzma_index_checks@@XZ_5.0>:
    498c:	ldr	x8, [x0, #16]
    4990:	ldr	w0, [x0, #72]
    4994:	ldr	w9, [x8, #104]
    4998:	cmn	w9, #0x1
    499c:	b.eq	49b0 <lzma_index_checks@@XZ_5.0+0x24>  // b.none
    49a0:	ldr	w8, [x8, #120]
    49a4:	mov	w9, #0x1                   	// #1
    49a8:	lsl	w8, w9, w8
    49ac:	orr	w0, w8, w0
    49b0:	ret
    49b4:	stp	x29, x30, [sp, #-32]!
    49b8:	ldr	x8, [x0, #48]
    49bc:	str	x19, [sp, #16]
    49c0:	ldr	w19, [x0, #56]
    49c4:	mov	x29, sp
    49c8:	mov	x0, x8
    49cc:	bl	3400 <lzma_vli_size@plt>
    49d0:	add	w8, w19, w0
    49d4:	ldr	x19, [sp, #16]
    49d8:	mov	w9, #0x3                   	// #3
    49dc:	sub	w8, w9, w8
    49e0:	and	w0, w8, #0x3
    49e4:	ldp	x29, x30, [sp], #32
    49e8:	ret

00000000000049ec <lzma_index_stream_flags@@XZ_5.0>:
    49ec:	stp	x29, x30, [sp, #-32]!
    49f0:	stp	x20, x19, [sp, #16]
    49f4:	mov	x20, x0
    49f8:	mov	w0, #0xb                   	// #11
    49fc:	mov	x29, sp
    4a00:	cbz	x20, 4a1c <lzma_index_stream_flags@@XZ_5.0+0x30>
    4a04:	mov	x19, x1
    4a08:	cbz	x1, 4a1c <lzma_index_stream_flags@@XZ_5.0+0x30>
    4a0c:	mov	x0, x19
    4a10:	mov	x1, x19
    4a14:	bl	30b0 <lzma_stream_flags_compare@plt>
    4a18:	cbz	w0, 4a28 <lzma_index_stream_flags@@XZ_5.0+0x3c>
    4a1c:	ldp	x20, x19, [sp, #16]
    4a20:	ldp	x29, x30, [sp], #32
    4a24:	ret
    4a28:	ldr	x8, [x20, #16]
    4a2c:	ldr	x9, [x19, #48]
    4a30:	ldp	q1, q0, [x19, #16]
    4a34:	ldr	q2, [x19]
    4a38:	str	x9, [x8, #152]
    4a3c:	stur	q0, [x8, #136]
    4a40:	stur	q1, [x8, #120]
    4a44:	stur	q2, [x8, #104]
    4a48:	ldp	x20, x19, [sp, #16]
    4a4c:	ldp	x29, x30, [sp], #32
    4a50:	ret

0000000000004a54 <lzma_index_stream_padding@@XZ_5.0>:
    4a54:	stp	x29, x30, [sp, #-64]!
    4a58:	mov	x8, x0
    4a5c:	mov	w0, #0xb                   	// #11
    4a60:	str	x23, [sp, #16]
    4a64:	stp	x22, x21, [sp, #32]
    4a68:	stp	x20, x19, [sp, #48]
    4a6c:	mov	x29, sp
    4a70:	cbz	x8, 4b00 <lzma_index_stream_padding@@XZ_5.0+0xac>
    4a74:	mov	x19, x1
    4a78:	and	x9, x1, #0x8000000000000003
    4a7c:	cbnz	x9, 4b00 <lzma_index_stream_padding@@XZ_5.0+0xac>
    4a80:	ldr	x20, [x8, #16]
    4a84:	ldr	x21, [x20, #160]
    4a88:	ldr	x9, [x20, #72]
    4a8c:	ldr	x8, [x20, #8]
    4a90:	str	xzr, [x20, #160]
    4a94:	cbz	x9, 4aac <lzma_index_stream_padding@@XZ_5.0+0x58>
    4a98:	ldr	x10, [x9, #56]
    4a9c:	add	x9, x9, x10, lsl #4
    4aa0:	ldr	x9, [x9, #72]
    4aa4:	add	x9, x9, #0x3
    4aa8:	and	x9, x9, #0xfffffffffffffffc
    4aac:	add	x8, x8, x9
    4ab0:	adds	x22, x8, #0x18
    4ab4:	b.mi	4ae0 <lzma_index_stream_padding@@XZ_5.0+0x8c>  // b.first
    4ab8:	ldp	x0, x23, [x20, #88]
    4abc:	bl	3400 <lzma_vli_size@plt>
    4ac0:	add	w8, w0, #0x1
    4ac4:	add	x8, x23, x8
    4ac8:	add	x8, x8, #0x7
    4acc:	and	x8, x8, #0xfffffffffffffffc
    4ad0:	add	x8, x8, x22
    4ad4:	cmp	x8, #0x0
    4ad8:	csinv	x8, x8, xzr, ge  // ge = tcont
    4adc:	b	4ae4 <lzma_index_stream_padding@@XZ_5.0+0x90>
    4ae0:	mov	x8, #0xffffffffffffffff    	// #-1
    4ae4:	add	x8, x8, x19
    4ae8:	mov	w9, #0x9                   	// #9
    4aec:	cmp	x8, #0x0
    4af0:	asr	x8, x8, #63
    4af4:	csel	x10, x21, x19, lt  // lt = tstop
    4af8:	and	w0, w8, w9
    4afc:	str	x10, [x20, #160]
    4b00:	ldp	x20, x19, [sp, #48]
    4b04:	ldp	x22, x21, [sp, #32]
    4b08:	ldr	x23, [sp, #16]
    4b0c:	ldp	x29, x30, [sp], #64
    4b10:	ret

0000000000004b14 <lzma_index_append@@XZ_5.0>:
    4b14:	sub	sp, sp, #0x80
    4b18:	stp	x20, x19, [sp, #112]
    4b1c:	mov	x19, x0
    4b20:	mov	w0, #0xb                   	// #11
    4b24:	stp	x29, x30, [sp, #32]
    4b28:	stp	x28, x27, [sp, #48]
    4b2c:	stp	x26, x25, [sp, #64]
    4b30:	stp	x24, x23, [sp, #80]
    4b34:	stp	x22, x21, [sp, #96]
    4b38:	add	x29, sp, #0x20
    4b3c:	tbnz	x3, #63, 4c28 <lzma_index_append@@XZ_5.0+0x114>
    4b40:	cbz	x19, 4c28 <lzma_index_append@@XZ_5.0+0x114>
    4b44:	mov	x9, #0xfffffffffffffff7    	// #-9
    4b48:	sub	x8, x2, #0x5
    4b4c:	movk	x9, #0x7fff, lsl #48
    4b50:	mov	x21, x2
    4b54:	cmp	x8, x9
    4b58:	b.hi	4c28 <lzma_index_append@@XZ_5.0+0x114>  // b.pmore
    4b5c:	ldr	x25, [x19, #16]
    4b60:	mov	x20, x3
    4b64:	mov	x23, x1
    4b68:	ldr	x22, [x25, #72]
    4b6c:	cbz	x22, 4b88 <lzma_index_append@@XZ_5.0+0x74>
    4b70:	ldr	x8, [x22, #56]
    4b74:	add	x8, x22, x8, lsl #4
    4b78:	ldp	x27, x9, [x8, #64]
    4b7c:	add	x8, x9, #0x3
    4b80:	and	x28, x8, #0xfffffffffffffffc
    4b84:	b	4b90 <lzma_index_append@@XZ_5.0+0x7c>
    4b88:	mov	x28, xzr
    4b8c:	mov	x27, xzr
    4b90:	mov	x0, x21
    4b94:	bl	3400 <lzma_vli_size@plt>
    4b98:	mov	w24, w0
    4b9c:	mov	x0, x20
    4ba0:	bl	3400 <lzma_vli_size@plt>
    4ba4:	ldr	x8, [x25, #8]
    4ba8:	add	x11, x28, x21
    4bac:	ldr	x9, [x25, #160]
    4bb0:	add	x10, x11, #0x1b
    4bb4:	and	x10, x10, #0xfffffffffffffffc
    4bb8:	add	x8, x10, x8
    4bbc:	adds	x26, x8, x9
    4bc0:	b.mi	4c24 <lzma_index_append@@XZ_5.0+0x110>  // b.first
    4bc4:	str	x11, [sp, #8]
    4bc8:	stur	x27, [x29, #-8]
    4bcc:	ldp	x8, x27, [x25, #88]
    4bd0:	add	w24, w0, w24
    4bd4:	add	x0, x8, #0x1
    4bd8:	bl	3400 <lzma_vli_size@plt>
    4bdc:	str	x24, [sp, #16]
    4be0:	add	x24, x24, #0x7
    4be4:	add	w8, w0, #0x1
    4be8:	add	x9, x24, x27
    4bec:	add	x8, x9, x8
    4bf0:	and	x8, x8, #0xfffffffffffffffc
    4bf4:	cmn	x8, x26
    4bf8:	b.mi	4c24 <lzma_index_append@@XZ_5.0+0x110>  // b.first
    4bfc:	ldp	x8, x26, [x19, #48]
    4c00:	add	x0, x8, #0x1
    4c04:	bl	3400 <lzma_vli_size@plt>
    4c08:	add	w8, w0, #0x1
    4c0c:	add	x9, x24, x26
    4c10:	add	x8, x9, x8
    4c14:	and	x8, x8, #0xfffffffffffffffc
    4c18:	mov	x9, #0x400000000           	// #17179869184
    4c1c:	cmp	x8, x9
    4c20:	b.ls	4c48 <lzma_index_append@@XZ_5.0+0x134>  // b.plast
    4c24:	mov	w0, #0x9                   	// #9
    4c28:	ldp	x20, x19, [sp, #112]
    4c2c:	ldp	x22, x21, [sp, #96]
    4c30:	ldp	x24, x23, [sp, #80]
    4c34:	ldp	x26, x25, [sp, #64]
    4c38:	ldp	x28, x27, [sp, #48]
    4c3c:	ldp	x29, x30, [sp, #32]
    4c40:	add	sp, sp, #0x80
    4c44:	ret
    4c48:	cbz	x22, 4c6c <lzma_index_append@@XZ_5.0+0x158>
    4c4c:	ldp	x9, x8, [x22, #48]
    4c50:	add	x8, x8, #0x1
    4c54:	cmp	x8, x9
    4c58:	b.cs	4c6c <lzma_index_append@@XZ_5.0+0x158>  // b.hs, b.nlast
    4c5c:	str	x8, [x22, #56]
    4c60:	ldur	x13, [x29, #-8]
    4c64:	ldp	x15, x14, [sp, #8]
    4c68:	b	4d54 <lzma_index_append@@XZ_5.0+0x240>
    4c6c:	ldr	x8, [x19, #64]
    4c70:	mov	x1, x23
    4c74:	lsl	x8, x8, #4
    4c78:	add	x0, x8, #0x40
    4c7c:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    4c80:	cbz	x0, 4d44 <lzma_index_append@@XZ_5.0+0x230>
    4c84:	ldr	x8, [x19, #64]
    4c88:	ldur	x13, [x29, #-8]
    4c8c:	mov	w9, #0x200                 	// #512
    4c90:	mov	x22, x0
    4c94:	stp	x8, xzr, [x0, #48]
    4c98:	str	x9, [x19, #64]
    4c9c:	stp	x13, x28, [x0]
    4ca0:	ldr	x8, [x25, #88]
    4ca4:	add	x8, x8, #0x1
    4ca8:	str	x8, [x0, #40]
    4cac:	ldr	x8, [x25, #72]
    4cb0:	stp	xzr, xzr, [x0, #24]
    4cb4:	str	x8, [x0, #16]
    4cb8:	ldr	w9, [x25, #80]
    4cbc:	ldr	x11, [x25, #56]
    4cc0:	add	w10, w9, #0x1
    4cc4:	str	w10, [x25, #80]
    4cc8:	ldp	x15, x14, [sp, #8]
    4ccc:	cbz	x11, 4d4c <lzma_index_append@@XZ_5.0+0x238>
    4cd0:	clz	w9, w10
    4cd4:	eor	w9, w9, #0x1f
    4cd8:	mov	w11, #0x1                   	// #1
    4cdc:	lsl	w9, w11, w9
    4ce0:	cmp	w10, w9
    4ce4:	str	x22, [x8, #32]
    4ce8:	str	x22, [x25, #72]
    4cec:	b.eq	4d54 <lzma_index_append@@XZ_5.0+0x240>  // b.none
    4cf0:	rbit	w10, w10
    4cf4:	clz	w10, w10
    4cf8:	add	x9, x25, #0x38
    4cfc:	add	w10, w10, #0x1
    4d00:	ldr	x8, [x8, #16]
    4d04:	subs	w10, w10, #0x1
    4d08:	b.ne	4d00 <lzma_index_append@@XZ_5.0+0x1ec>  // b.any
    4d0c:	ldr	x11, [x8, #16]
    4d10:	ldr	x10, [x8, #32]
    4d14:	add	x12, x11, #0x20
    4d18:	cmp	x11, #0x0
    4d1c:	csel	x9, x9, x12, eq  // eq = none
    4d20:	str	x10, [x9]
    4d24:	ldr	x9, [x10, #24]
    4d28:	str	x11, [x10, #16]
    4d2c:	str	x9, [x8, #32]
    4d30:	cbz	x9, 4d38 <lzma_index_append@@XZ_5.0+0x224>
    4d34:	str	x8, [x9, #16]
    4d38:	str	x8, [x10, #24]
    4d3c:	str	x10, [x8, #16]
    4d40:	b	4d54 <lzma_index_append@@XZ_5.0+0x240>
    4d44:	mov	w0, #0x5                   	// #5
    4d48:	b	4c28 <lzma_index_append@@XZ_5.0+0x114>
    4d4c:	stp	x22, x22, [x25, #56]
    4d50:	str	x22, [x25, #72]
    4d54:	ldr	x8, [x22, #56]
    4d58:	add	x9, x13, x20
    4d5c:	add	x10, x21, #0x3
    4d60:	and	x10, x10, #0xfffffffffffffffc
    4d64:	add	x8, x22, x8, lsl #4
    4d68:	stp	x9, x15, [x8, #64]
    4d6c:	ldp	x8, x9, [x25, #88]
    4d70:	mov	w0, wzr
    4d74:	add	x8, x8, #0x1
    4d78:	add	x9, x9, x14
    4d7c:	stp	x8, x9, [x25, #88]
    4d80:	ldp	x9, x8, [x19, #32]
    4d84:	ldp	x11, x12, [x19, #48]
    4d88:	add	x8, x8, x10
    4d8c:	add	x9, x9, x20
    4d90:	add	x10, x11, #0x1
    4d94:	add	x11, x12, x14
    4d98:	stp	x9, x8, [x19, #32]
    4d9c:	stp	x10, x11, [x19, #48]
    4da0:	b	4c28 <lzma_index_append@@XZ_5.0+0x114>

0000000000004da4 <lzma_index_cat@@XZ_5.0>:
    4da4:	sub	sp, sp, #0x90
    4da8:	stp	x24, x23, [sp, #96]
    4dac:	ldr	x24, [x0, #16]
    4db0:	stp	x29, x30, [sp, #48]
    4db4:	stp	x28, x27, [sp, #64]
    4db8:	stp	x26, x25, [sp, #80]
    4dbc:	stp	x22, x21, [sp, #112]
    4dc0:	stp	x20, x19, [sp, #128]
    4dc4:	ldr	x22, [x24, #72]
    4dc8:	ldr	x8, [x24, #8]
    4dcc:	mov	x19, x2
    4dd0:	mov	x20, x0
    4dd4:	mov	x21, x1
    4dd8:	add	x29, sp, #0x30
    4ddc:	cbz	x22, 4df8 <lzma_index_cat@@XZ_5.0+0x54>
    4de0:	ldr	x9, [x22, #56]
    4de4:	add	x9, x22, x9, lsl #4
    4de8:	ldr	x9, [x9, #72]
    4dec:	add	x9, x9, #0x3
    4df0:	and	x9, x9, #0xfffffffffffffffc
    4df4:	b	4dfc <lzma_index_cat@@XZ_5.0+0x58>
    4df8:	mov	x9, xzr
    4dfc:	ldr	x10, [x24, #160]
    4e00:	add	x8, x8, x9
    4e04:	add	x8, x8, x10
    4e08:	adds	x23, x8, #0x18
    4e0c:	b.mi	4e9c <lzma_index_cat@@XZ_5.0+0xf8>  // b.first
    4e10:	ldp	x0, x25, [x24, #88]
    4e14:	bl	3400 <lzma_vli_size@plt>
    4e18:	add	w8, w0, #0x1
    4e1c:	add	x8, x25, x8
    4e20:	add	x8, x8, #0x7
    4e24:	and	x8, x8, #0xfffffffffffffffc
    4e28:	add	x8, x8, x23
    4e2c:	cmp	x8, #0x0
    4e30:	csinv	x25, x8, xzr, ge  // ge = tcont
    4e34:	ldr	x8, [x21, #16]
    4e38:	ldr	x10, [x8, #72]
    4e3c:	ldr	x9, [x8, #8]
    4e40:	cbz	x10, 4e58 <lzma_index_cat@@XZ_5.0+0xb4>
    4e44:	ldr	x11, [x10, #56]
    4e48:	add	x10, x10, x11, lsl #4
    4e4c:	ldr	x10, [x10, #72]
    4e50:	add	x10, x10, #0x3
    4e54:	and	x10, x10, #0xfffffffffffffffc
    4e58:	ldr	x11, [x8, #160]
    4e5c:	add	x9, x9, x10
    4e60:	add	x9, x9, x11
    4e64:	adds	x23, x9, #0x18
    4e68:	b.mi	4eb4 <lzma_index_cat@@XZ_5.0+0x110>  // b.first
    4e6c:	ldp	x0, x26, [x8, #88]
    4e70:	bl	3400 <lzma_vli_size@plt>
    4e74:	add	w8, w0, #0x1
    4e78:	add	x8, x26, x8
    4e7c:	add	x8, x8, #0x7
    4e80:	and	x8, x8, #0xfffffffffffffffc
    4e84:	add	x8, x8, x23
    4e88:	cmp	x8, #0x0
    4e8c:	csinv	x8, x8, xzr, ge  // ge = tcont
    4e90:	cmn	x8, x25
    4e94:	b.pl	4ec0 <lzma_index_cat@@XZ_5.0+0x11c>  // b.nfrst
    4e98:	b	4fc4 <lzma_index_cat@@XZ_5.0+0x220>
    4e9c:	mov	x25, #0xffffffffffffffff    	// #-1
    4ea0:	ldr	x8, [x21, #16]
    4ea4:	ldr	x10, [x8, #72]
    4ea8:	ldr	x9, [x8, #8]
    4eac:	cbnz	x10, 4e44 <lzma_index_cat@@XZ_5.0+0xa0>
    4eb0:	b	4e58 <lzma_index_cat@@XZ_5.0+0xb4>
    4eb4:	mov	x8, #0xffffffffffffffff    	// #-1
    4eb8:	cmn	x8, x25
    4ebc:	b.mi	4fc4 <lzma_index_cat@@XZ_5.0+0x220>  // b.first
    4ec0:	ldr	x26, [x20, #32]
    4ec4:	ldr	x8, [x21, #32]
    4ec8:	cmn	x8, x26
    4ecc:	b.mi	4fc4 <lzma_index_cat@@XZ_5.0+0x220>  // b.first
    4ed0:	ldp	x23, x27, [x20, #48]
    4ed4:	str	x19, [sp]
    4ed8:	mov	x0, x23
    4edc:	bl	3400 <lzma_vli_size@plt>
    4ee0:	ldp	x8, x28, [x21, #48]
    4ee4:	add	w19, w0, #0x1
    4ee8:	mov	x0, x8
    4eec:	bl	3400 <lzma_vli_size@plt>
    4ef0:	add	x9, x27, x19
    4ef4:	add	w8, w0, #0x1
    4ef8:	add	x9, x9, x28
    4efc:	add	x8, x9, x8
    4f00:	add	x8, x8, #0xb
    4f04:	and	x8, x8, #0xfffffffffffffffc
    4f08:	mov	x9, #0x400000000           	// #17179869184
    4f0c:	cmp	x8, x9
    4f10:	b.hi	4fc4 <lzma_index_cat@@XZ_5.0+0x220>  // b.pmore
    4f14:	cbz	x22, 4fe8 <lzma_index_cat@@XZ_5.0+0x244>
    4f18:	ldp	x9, x8, [x22, #48]
    4f1c:	ldr	x19, [sp]
    4f20:	add	x8, x8, #0x1
    4f24:	cmp	x8, x9
    4f28:	b.cs	4fec <lzma_index_cat@@XZ_5.0+0x248>  // b.hs, b.nlast
    4f2c:	lsl	x8, x8, #4
    4f30:	add	x0, x8, #0x40
    4f34:	mov	x1, x19
    4f38:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    4f3c:	cbz	x0, 5064 <lzma_index_cat@@XZ_5.0+0x2c0>
    4f40:	ldr	x8, [x22, #32]
    4f44:	ldp	q1, q0, [x22]
    4f48:	mov	x23, x0
    4f4c:	add	x1, x22, #0x40
    4f50:	str	x8, [x0, #32]
    4f54:	stp	q1, q0, [x0]
    4f58:	ldr	x8, [x22, #56]
    4f5c:	add	x8, x8, #0x1
    4f60:	str	x8, [x0, #48]
    4f64:	ldr	x9, [x22, #56]
    4f68:	lsl	x2, x8, #4
    4f6c:	str	x9, [x0, #56]
    4f70:	ldr	x9, [x22, #40]
    4f74:	add	x0, x0, #0x40
    4f78:	str	x9, [x23, #40]
    4f7c:	bl	3040 <memcpy@plt>
    4f80:	ldr	x8, [x22, #16]
    4f84:	cbz	x8, 4f8c <lzma_index_cat@@XZ_5.0+0x1e8>
    4f88:	str	x23, [x8, #32]
    4f8c:	ldr	x8, [x24, #64]
    4f90:	cmp	x8, x22
    4f94:	b.ne	4f9c <lzma_index_cat@@XZ_5.0+0x1f8>  // b.any
    4f98:	stp	x23, x23, [x24, #56]
    4f9c:	ldr	x8, [x24, #72]
    4fa0:	cmp	x8, x22
    4fa4:	b.ne	4fac <lzma_index_cat@@XZ_5.0+0x208>  // b.any
    4fa8:	str	x23, [x24, #72]
    4fac:	mov	x0, x22
    4fb0:	mov	x1, x19
    4fb4:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    4fb8:	ldr	x26, [x20, #32]
    4fbc:	ldr	x23, [x20, #48]
    4fc0:	b	4fec <lzma_index_cat@@XZ_5.0+0x248>
    4fc4:	mov	w0, #0x9                   	// #9
    4fc8:	ldp	x20, x19, [sp, #128]
    4fcc:	ldp	x22, x21, [sp, #112]
    4fd0:	ldp	x24, x23, [sp, #96]
    4fd4:	ldp	x26, x25, [sp, #80]
    4fd8:	ldp	x28, x27, [sp, #64]
    4fdc:	ldp	x29, x30, [sp, #48]
    4fe0:	add	sp, sp, #0x90
    4fe4:	ret
    4fe8:	ldr	x19, [sp]
    4fec:	ldr	w8, [x20, #24]
    4ff0:	ldr	x1, [x21]
    4ff4:	add	x0, sp, #0x8
    4ff8:	stp	x26, x25, [sp, #8]
    4ffc:	str	x23, [sp, #24]
    5000:	str	w8, [sp, #32]
    5004:	str	x20, [sp, #40]
    5008:	bl	506c <lzma_index_cat@@XZ_5.0+0x2c8>
    500c:	ldp	q0, q1, [x21, #32]
    5010:	ldp	q2, q3, [x20, #32]
    5014:	ldr	x9, [x20, #16]
    5018:	ldr	w8, [x20, #72]
    501c:	add	v0.2d, v2.2d, v0.2d
    5020:	add	v1.2d, v3.2d, v1.2d
    5024:	stp	q0, q1, [x20, #32]
    5028:	ldr	w10, [x9, #104]
    502c:	cmn	w10, #0x1
    5030:	b.eq	5044 <lzma_index_cat@@XZ_5.0+0x2a0>  // b.none
    5034:	ldr	w9, [x9, #120]
    5038:	mov	w10, #0x1                   	// #1
    503c:	lsl	w9, w10, w9
    5040:	orr	w8, w9, w8
    5044:	ldr	w9, [x21, #72]
    5048:	mov	x0, x21
    504c:	mov	x1, x19
    5050:	orr	w8, w9, w8
    5054:	str	w8, [x20, #72]
    5058:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    505c:	mov	w0, wzr
    5060:	b	4fc8 <lzma_index_cat@@XZ_5.0+0x224>
    5064:	mov	w0, #0x5                   	// #5
    5068:	b	4fc8 <lzma_index_cat@@XZ_5.0+0x224>
    506c:	stp	x29, x30, [sp, #-64]!
    5070:	stp	x22, x21, [sp, #32]
    5074:	stp	x20, x19, [sp, #48]
    5078:	mov	x20, x1
    507c:	mov	x19, x0
    5080:	mov	w21, #0x1                   	// #1
    5084:	str	x23, [sp, #16]
    5088:	mov	x29, sp
    508c:	b	509c <lzma_index_cat@@XZ_5.0+0x2f8>
    5090:	stp	x22, x22, [x9]
    5094:	str	x22, [x9, #16]
    5098:	cbz	x20, 5178 <lzma_index_cat@@XZ_5.0+0x3d4>
    509c:	mov	x23, x20
    50a0:	ldr	x1, [x23, #24]!
    50a4:	mov	x22, x20
    50a8:	ldr	x20, [x23, #8]
    50ac:	cbz	x1, 50b8 <lzma_index_cat@@XZ_5.0+0x314>
    50b0:	mov	x0, x19
    50b4:	bl	506c <lzma_index_cat@@XZ_5.0+0x2c8>
    50b8:	ldr	q0, [x19]
    50bc:	ldr	q1, [x22]
    50c0:	ldr	w8, [x22, #40]
    50c4:	ldr	x10, [x22, #48]
    50c8:	add	v0.2d, v1.2d, v0.2d
    50cc:	str	q0, [x22]
    50d0:	ldr	w9, [x19, #24]
    50d4:	add	w8, w8, w9
    50d8:	str	w8, [x22, #40]
    50dc:	ldr	x8, [x19, #16]
    50e0:	add	x8, x10, x8
    50e4:	str	x8, [x22, #48]
    50e8:	ldr	x9, [x19, #32]
    50ec:	ldr	x8, [x9, #16]
    50f0:	str	x8, [x22, #16]
    50f4:	stp	xzr, xzr, [x23]
    50f8:	ldr	w10, [x9, #24]
    50fc:	ldr	x11, [x9]
    5100:	add	w10, w10, #0x1
    5104:	str	w10, [x9, #24]
    5108:	cbz	x11, 5090 <lzma_index_cat@@XZ_5.0+0x2ec>
    510c:	clz	w11, w10
    5110:	eor	w11, w11, #0x1f
    5114:	lsl	w11, w21, w11
    5118:	cmp	w10, w11
    511c:	str	x22, [x8, #32]
    5120:	str	x22, [x9, #16]
    5124:	b.eq	5098 <lzma_index_cat@@XZ_5.0+0x2f4>  // b.none
    5128:	rbit	w10, w10
    512c:	clz	w10, w10
    5130:	add	w10, w10, #0x1
    5134:	ldr	x8, [x8, #16]
    5138:	subs	w10, w10, #0x1
    513c:	b.ne	5134 <lzma_index_cat@@XZ_5.0+0x390>  // b.any
    5140:	ldr	x11, [x8, #16]
    5144:	ldr	x10, [x8, #32]
    5148:	add	x12, x11, #0x20
    514c:	cmp	x11, #0x0
    5150:	csel	x9, x9, x12, eq  // eq = none
    5154:	str	x10, [x9]
    5158:	ldr	x9, [x10, #24]
    515c:	str	x11, [x10, #16]
    5160:	str	x9, [x8, #32]
    5164:	cbz	x9, 516c <lzma_index_cat@@XZ_5.0+0x3c8>
    5168:	str	x8, [x9, #16]
    516c:	str	x8, [x10, #24]
    5170:	str	x10, [x8, #16]
    5174:	b	5098 <lzma_index_cat@@XZ_5.0+0x2f4>
    5178:	ldp	x20, x19, [sp, #48]
    517c:	ldp	x22, x21, [sp, #32]
    5180:	ldr	x23, [sp, #16]
    5184:	ldp	x29, x30, [sp], #64
    5188:	ret

000000000000518c <lzma_index_dup@@XZ_5.0>:
    518c:	stp	x29, x30, [sp, #-96]!
    5190:	stp	x22, x21, [sp, #64]
    5194:	mov	x21, x0
    5198:	mov	w0, #0x50                  	// #80
    519c:	stp	x28, x27, [sp, #16]
    51a0:	stp	x26, x25, [sp, #32]
    51a4:	stp	x24, x23, [sp, #48]
    51a8:	stp	x20, x19, [sp, #80]
    51ac:	mov	x29, sp
    51b0:	mov	x19, x1
    51b4:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    51b8:	mov	x20, x0
    51bc:	cbz	x0, 522c <lzma_index_dup@@XZ_5.0+0xa0>
    51c0:	mov	w8, #0x200                 	// #512
    51c4:	stp	xzr, xzr, [x20]
    51c8:	str	wzr, [x20, #24]
    51cc:	str	xzr, [x20, #16]
    51d0:	str	x8, [x20, #64]
    51d4:	str	wzr, [x20, #72]
    51d8:	ldr	q0, [x21, #32]
    51dc:	mov	x9, #0xfffffffffffffffb    	// #-5
    51e0:	movk	x9, #0xfff, lsl #48
    51e4:	str	q0, [x20, #32]
    51e8:	ldr	q0, [x21, #48]
    51ec:	str	q0, [x20, #48]
    51f0:	ldr	x24, [x21, #8]
    51f4:	mov	x27, x24
    51f8:	ldr	x8, [x27, #88]!
    51fc:	cmp	x8, x9
    5200:	b.ls	524c <lzma_index_dup@@XZ_5.0+0xc0>  // b.plast
    5204:	ldr	x0, [x20]
    5208:	cbz	x0, 521c <lzma_index_dup@@XZ_5.0+0x90>
    520c:	adrp	x2, 4000 <lzma_block_unpadded_size@@XZ_5.0+0x60>
    5210:	add	x2, x2, #0x764
    5214:	mov	x1, x19
    5218:	bl	5a18 <lzma_index_iter_locate@@XZ_5.0+0xe0>
    521c:	mov	x0, x20
    5220:	mov	x1, x19
    5224:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    5228:	mov	x20, xzr
    522c:	mov	x0, x20
    5230:	ldp	x20, x19, [sp, #80]
    5234:	ldp	x22, x21, [sp, #64]
    5238:	ldp	x24, x23, [sp, #48]
    523c:	ldp	x26, x25, [sp, #32]
    5240:	ldp	x28, x27, [sp, #16]
    5244:	ldp	x29, x30, [sp], #96
    5248:	ret
    524c:	mov	w25, #0x1                   	// #1
    5250:	ldp	x28, x26, [x24]
    5254:	ldr	w22, [x24, #40]
    5258:	ldr	x23, [x24, #48]
    525c:	mov	w0, #0xa8                  	// #168
    5260:	mov	x1, x19
    5264:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    5268:	cbz	x0, 5204 <lzma_index_dup@@XZ_5.0+0x78>
    526c:	stp	x28, x26, [x0]
    5270:	mov	x26, x0
    5274:	stp	xzr, xzr, [x0, #24]
    5278:	str	xzr, [x0, #16]
    527c:	str	w22, [x0, #40]
    5280:	str	x23, [x0, #48]
    5284:	stp	xzr, xzr, [x0, #64]
    5288:	str	wzr, [x0, #80]
    528c:	str	xzr, [x26, #56]!
    5290:	ldr	x8, [x27]
    5294:	mov	x21, x0
    5298:	str	x8, [x0, #88]
    529c:	ldr	x9, [x24, #96]
    52a0:	str	x9, [x0, #96]
    52a4:	ldr	x9, [x24, #152]
    52a8:	ldur	q0, [x24, #136]
    52ac:	ldur	q1, [x24, #120]
    52b0:	ldur	q2, [x24, #104]
    52b4:	str	x9, [x0, #152]
    52b8:	stur	q0, [x0, #136]
    52bc:	stur	q1, [x0, #120]
    52c0:	stur	q2, [x0, #104]
    52c4:	ldr	x9, [x24, #160]
    52c8:	str	x9, [x0, #160]
    52cc:	ldr	x9, [x24, #64]
    52d0:	cbz	x9, 53fc <lzma_index_dup@@XZ_5.0+0x270>
    52d4:	lsl	x8, x8, #4
    52d8:	add	x0, x8, #0x40
    52dc:	mov	x1, x19
    52e0:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    52e4:	cbz	x0, 54e8 <lzma_index_dup@@XZ_5.0+0x35c>
    52e8:	stp	xzr, xzr, [x0]
    52ec:	str	x25, [x0, #40]
    52f0:	ldr	x8, [x27]
    52f4:	mov	x22, x0
    52f8:	mov	x28, xzr
    52fc:	add	x27, x0, #0x40
    5300:	sub	x9, x8, #0x1
    5304:	stp	x8, x9, [x0, #48]
    5308:	ldr	x23, [x24, #64]
    530c:	ldr	x8, [x23, #56]
    5310:	add	x0, x27, x28, lsl #4
    5314:	add	x1, x23, #0x40
    5318:	lsl	x8, x8, #4
    531c:	add	x2, x8, #0x10
    5320:	bl	3040 <memcpy@plt>
    5324:	ldr	x9, [x23, #32]
    5328:	ldr	x8, [x23, #56]
    532c:	cbz	x9, 5340 <lzma_index_dup@@XZ_5.0+0x1b4>
    5330:	mov	x23, x9
    5334:	ldr	x9, [x9, #24]
    5338:	cbnz	x9, 5330 <lzma_index_dup@@XZ_5.0+0x1a4>
    533c:	b	535c <lzma_index_dup@@XZ_5.0+0x1d0>
    5340:	mov	x9, x23
    5344:	ldr	x23, [x9, #16]
    5348:	cbz	x23, 5368 <lzma_index_dup@@XZ_5.0+0x1dc>
    534c:	ldr	x10, [x23, #32]
    5350:	cmp	x10, x9
    5354:	mov	x9, x23
    5358:	b.eq	5344 <lzma_index_dup@@XZ_5.0+0x1b8>  // b.none
    535c:	add	x8, x28, x8
    5360:	add	x28, x8, #0x1
    5364:	b	530c <lzma_index_dup@@XZ_5.0+0x180>
    5368:	ldr	w9, [x21, #80]
    536c:	ldr	x8, [x21, #72]
    5370:	ldr	x10, [x21, #56]
    5374:	stp	xzr, xzr, [x22, #24]
    5378:	add	w9, w9, #0x1
    537c:	str	x8, [x22, #16]
    5380:	str	w9, [x21, #80]
    5384:	cbz	x10, 53f4 <lzma_index_dup@@XZ_5.0+0x268>
    5388:	clz	w10, w9
    538c:	eor	w10, w10, #0x1f
    5390:	lsl	w10, w25, w10
    5394:	cmp	w9, w10
    5398:	str	x22, [x8, #32]
    539c:	str	x22, [x21, #72]
    53a0:	b.eq	53fc <lzma_index_dup@@XZ_5.0+0x270>  // b.none
    53a4:	rbit	w9, w9
    53a8:	clz	w9, w9
    53ac:	add	w9, w9, #0x1
    53b0:	ldr	x8, [x8, #16]
    53b4:	subs	w9, w9, #0x1
    53b8:	b.ne	53b0 <lzma_index_dup@@XZ_5.0+0x224>  // b.any
    53bc:	ldr	x11, [x8, #16]
    53c0:	ldr	x9, [x8, #32]
    53c4:	add	x10, x11, #0x20
    53c8:	cmp	x11, #0x0
    53cc:	csel	x10, x26, x10, eq  // eq = none
    53d0:	str	x9, [x10]
    53d4:	ldr	x10, [x9, #24]
    53d8:	str	x11, [x9, #16]
    53dc:	str	x10, [x8, #32]
    53e0:	cbz	x10, 53e8 <lzma_index_dup@@XZ_5.0+0x25c>
    53e4:	str	x8, [x10, #16]
    53e8:	str	x8, [x9, #24]
    53ec:	str	x9, [x8, #16]
    53f0:	b	53fc <lzma_index_dup@@XZ_5.0+0x270>
    53f4:	stp	x22, x22, [x21, #56]
    53f8:	str	x22, [x21, #72]
    53fc:	ldr	w9, [x20, #24]
    5400:	ldr	x8, [x20, #16]
    5404:	ldr	x10, [x20]
    5408:	stp	xzr, xzr, [x21, #24]
    540c:	add	w9, w9, #0x1
    5410:	str	x8, [x21, #16]
    5414:	str	w9, [x20, #24]
    5418:	cbz	x10, 5490 <lzma_index_dup@@XZ_5.0+0x304>
    541c:	clz	w10, w9
    5420:	eor	w10, w10, #0x1f
    5424:	lsl	w10, w25, w10
    5428:	cmp	w9, w10
    542c:	str	x21, [x8, #32]
    5430:	str	x21, [x20, #16]
    5434:	b.eq	5484 <lzma_index_dup@@XZ_5.0+0x2f8>  // b.none
    5438:	rbit	w9, w9
    543c:	clz	w9, w9
    5440:	add	w9, w9, #0x1
    5444:	ldr	x8, [x8, #16]
    5448:	subs	w9, w9, #0x1
    544c:	b.ne	5444 <lzma_index_dup@@XZ_5.0+0x2b8>  // b.any
    5450:	ldr	x11, [x8, #16]
    5454:	ldr	x9, [x8, #32]
    5458:	add	x10, x11, #0x20
    545c:	cmp	x11, #0x0
    5460:	csel	x10, x20, x10, eq  // eq = none
    5464:	str	x9, [x10]
    5468:	ldr	x10, [x9, #24]
    546c:	str	x11, [x9, #16]
    5470:	str	x10, [x8, #32]
    5474:	cbz	x10, 547c <lzma_index_dup@@XZ_5.0+0x2f0>
    5478:	str	x8, [x10, #16]
    547c:	str	x8, [x9, #24]
    5480:	str	x9, [x8, #16]
    5484:	ldr	x8, [x24, #32]
    5488:	cbnz	x8, 54a0 <lzma_index_dup@@XZ_5.0+0x314>
    548c:	b	54b0 <lzma_index_dup@@XZ_5.0+0x324>
    5490:	stp	x21, x21, [x20]
    5494:	str	x21, [x20, #16]
    5498:	ldr	x8, [x24, #32]
    549c:	cbz	x8, 54b0 <lzma_index_dup@@XZ_5.0+0x324>
    54a0:	mov	x24, x8
    54a4:	ldr	x8, [x8, #24]
    54a8:	cbnz	x8, 54a0 <lzma_index_dup@@XZ_5.0+0x314>
    54ac:	b	54cc <lzma_index_dup@@XZ_5.0+0x340>
    54b0:	mov	x8, x24
    54b4:	ldr	x24, [x8, #16]
    54b8:	cbz	x24, 522c <lzma_index_dup@@XZ_5.0+0xa0>
    54bc:	ldr	x9, [x24, #32]
    54c0:	cmp	x9, x8
    54c4:	mov	x8, x24
    54c8:	b.eq	54b4 <lzma_index_dup@@XZ_5.0+0x328>  // b.none
    54cc:	mov	x27, x24
    54d0:	ldr	x8, [x27, #88]!
    54d4:	mov	x9, #0xfffffffffffffffb    	// #-5
    54d8:	movk	x9, #0xfff, lsl #48
    54dc:	cmp	x8, x9
    54e0:	b.ls	5250 <lzma_index_dup@@XZ_5.0+0xc4>  // b.plast
    54e4:	b	5204 <lzma_index_dup@@XZ_5.0+0x78>
    54e8:	ldr	x0, [x26]
    54ec:	cbz	x0, 5500 <lzma_index_dup@@XZ_5.0+0x374>
    54f0:	adrp	x2, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    54f4:	ldr	x2, [x2, #3992]
    54f8:	mov	x1, x19
    54fc:	bl	5a18 <lzma_index_iter_locate@@XZ_5.0+0xe0>
    5500:	mov	x0, x21
    5504:	mov	x1, x19
    5508:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    550c:	b	5204 <lzma_index_dup@@XZ_5.0+0x78>

0000000000005510 <lzma_index_iter_init@@XZ_5.0>:
    5510:	add	x8, x0, #0x108
    5514:	movi	v0.2d, #0x0
    5518:	add	x9, x0, #0x118
    551c:	str	x1, [x0, #256]
    5520:	str	q0, [x8]
    5524:	str	q0, [x9]
    5528:	ret

000000000000552c <lzma_index_iter_rewind@@XZ_5.0>:
    552c:	add	x8, x0, #0x108
    5530:	add	x9, x0, #0x118
    5534:	movi	v0.2d, #0x0
    5538:	str	q0, [x9]
    553c:	str	q0, [x8]
    5540:	ret

0000000000005544 <lzma_index_iter_next@@XZ_5.0>:
    5544:	stp	x29, x30, [sp, #-16]!
    5548:	cmp	w1, #0x3
    554c:	mov	x29, sp
    5550:	b.ls	5560 <lzma_index_iter_next@@XZ_5.0+0x1c>  // b.plast
    5554:	mov	w0, #0x1                   	// #1
    5558:	ldp	x29, x30, [sp], #16
    555c:	ret
    5560:	ldp	x8, x9, [x0, #256]
    5564:	ldr	x10, [x0, #280]
    5568:	cmp	w1, #0x1
    556c:	b.ne	5578 <lzma_index_iter_next@@XZ_5.0+0x34>  // b.any
    5570:	mov	x11, xzr
    5574:	b	55f0 <lzma_index_iter_next@@XZ_5.0+0xac>
    5578:	ldr	x11, [x0, #288]
    557c:	cmp	x11, #0x2
    5580:	b.eq	5598 <lzma_index_iter_next@@XZ_5.0+0x54>  // b.none
    5584:	cmp	x11, #0x1
    5588:	b.eq	55a0 <lzma_index_iter_next@@XZ_5.0+0x5c>  // b.none
    558c:	cbnz	x11, 55d8 <lzma_index_iter_next@@XZ_5.0+0x94>
    5590:	ldr	x11, [x0, #272]
    5594:	b	55f0 <lzma_index_iter_next@@XZ_5.0+0xac>
    5598:	ldr	x11, [x9, #64]
    559c:	b	55f0 <lzma_index_iter_next@@XZ_5.0+0xac>
    55a0:	ldr	x12, [x0, #272]
    55a4:	ldr	x13, [x12, #32]
    55a8:	cbz	x13, 55bc <lzma_index_iter_next@@XZ_5.0+0x78>
    55ac:	mov	x11, x13
    55b0:	ldr	x13, [x13, #24]
    55b4:	cbnz	x13, 55ac <lzma_index_iter_next@@XZ_5.0+0x68>
    55b8:	b	55f0 <lzma_index_iter_next@@XZ_5.0+0xac>
    55bc:	ldr	x11, [x12, #16]
    55c0:	cbz	x11, 55f0 <lzma_index_iter_next@@XZ_5.0+0xac>
    55c4:	ldr	x13, [x11, #32]
    55c8:	cmp	x13, x12
    55cc:	mov	x12, x11
    55d0:	b.eq	55bc <lzma_index_iter_next@@XZ_5.0+0x78>  // b.none
    55d4:	b	55f0 <lzma_index_iter_next@@XZ_5.0+0xac>
    55d8:	mov	x11, xzr
    55dc:	b	55f0 <lzma_index_iter_next@@XZ_5.0+0xac>
    55e0:	ldr	x12, [x11]
    55e4:	ldr	x13, [x11, #64]
    55e8:	cmp	x12, x13
    55ec:	b.ne	573c <lzma_index_iter_next@@XZ_5.0+0x1f8>  // b.any
    55f0:	cbz	x9, 560c <lzma_index_iter_next@@XZ_5.0+0xc8>
    55f4:	cbz	x11, 5698 <lzma_index_iter_next@@XZ_5.0+0x154>
    55f8:	ldr	x12, [x11, #56]
    55fc:	cmp	x10, x12
    5600:	b.cs	5658 <lzma_index_iter_next@@XZ_5.0+0x114>  // b.hs, b.nlast
    5604:	add	x10, x10, #0x1
    5608:	b	571c <lzma_index_iter_next@@XZ_5.0+0x1d8>
    560c:	ldr	x9, [x8, #8]
    5610:	cmp	w1, #0x2
    5614:	b.cc	5714 <lzma_index_iter_next@@XZ_5.0+0x1d0>  // b.lo, b.ul, b.last
    5618:	ldr	x10, [x9, #64]
    561c:	cbnz	x10, 5714 <lzma_index_iter_next@@XZ_5.0+0x1d0>
    5620:	ldr	x10, [x9, #32]
    5624:	cbz	x10, 5638 <lzma_index_iter_next@@XZ_5.0+0xf4>
    5628:	mov	x9, x10
    562c:	ldr	x10, [x10, #24]
    5630:	cbnz	x10, 5628 <lzma_index_iter_next@@XZ_5.0+0xe4>
    5634:	b	5618 <lzma_index_iter_next@@XZ_5.0+0xd4>
    5638:	mov	x10, x9
    563c:	ldr	x9, [x10, #16]
    5640:	cbz	x9, 5554 <lzma_index_iter_next@@XZ_5.0+0x10>
    5644:	ldr	x11, [x9, #32]
    5648:	cmp	x11, x10
    564c:	mov	x10, x9
    5650:	b.eq	563c <lzma_index_iter_next@@XZ_5.0+0xf8>  // b.none
    5654:	b	5618 <lzma_index_iter_next@@XZ_5.0+0xd4>
    5658:	ldr	x10, [x11, #32]
    565c:	cbz	x10, 5670 <lzma_index_iter_next@@XZ_5.0+0x12c>
    5660:	mov	x12, x10
    5664:	ldr	x10, [x10, #24]
    5668:	cbnz	x10, 5660 <lzma_index_iter_next@@XZ_5.0+0x11c>
    566c:	b	5688 <lzma_index_iter_next@@XZ_5.0+0x144>
    5670:	ldr	x12, [x11, #16]
    5674:	cbz	x12, 5688 <lzma_index_iter_next@@XZ_5.0+0x144>
    5678:	ldr	x10, [x12, #32]
    567c:	cmp	x10, x11
    5680:	mov	x11, x12
    5684:	b.eq	5670 <lzma_index_iter_next@@XZ_5.0+0x12c>  // b.none
    5688:	cbz	x12, 5698 <lzma_index_iter_next@@XZ_5.0+0x154>
    568c:	mov	x10, xzr
    5690:	mov	x11, x12
    5694:	b	571c <lzma_index_iter_next@@XZ_5.0+0x1d8>
    5698:	cmp	w1, #0x2
    569c:	b.cc	56e0 <lzma_index_iter_next@@XZ_5.0+0x19c>  // b.lo, b.ul, b.last
    56a0:	ldr	x10, [x9, #32]
    56a4:	cbz	x10, 56b8 <lzma_index_iter_next@@XZ_5.0+0x174>
    56a8:	mov	x9, x10
    56ac:	ldr	x10, [x10, #24]
    56b0:	cbnz	x10, 56a8 <lzma_index_iter_next@@XZ_5.0+0x164>
    56b4:	b	56d4 <lzma_index_iter_next@@XZ_5.0+0x190>
    56b8:	mov	x10, x9
    56bc:	ldr	x9, [x10, #16]
    56c0:	cbz	x9, 5554 <lzma_index_iter_next@@XZ_5.0+0x10>
    56c4:	ldr	x11, [x9, #32]
    56c8:	cmp	x11, x10
    56cc:	mov	x10, x9
    56d0:	b.eq	56bc <lzma_index_iter_next@@XZ_5.0+0x178>  // b.none
    56d4:	ldr	x10, [x9, #64]
    56d8:	cbz	x10, 56a0 <lzma_index_iter_next@@XZ_5.0+0x15c>
    56dc:	b	5714 <lzma_index_iter_next@@XZ_5.0+0x1d0>
    56e0:	ldr	x10, [x9, #32]
    56e4:	cbz	x10, 56f8 <lzma_index_iter_next@@XZ_5.0+0x1b4>
    56e8:	mov	x9, x10
    56ec:	ldr	x10, [x10, #24]
    56f0:	cbnz	x10, 56e8 <lzma_index_iter_next@@XZ_5.0+0x1a4>
    56f4:	b	5714 <lzma_index_iter_next@@XZ_5.0+0x1d0>
    56f8:	mov	x10, x9
    56fc:	ldr	x9, [x10, #16]
    5700:	cbz	x9, 5554 <lzma_index_iter_next@@XZ_5.0+0x10>
    5704:	ldr	x11, [x9, #32]
    5708:	cmp	x11, x10
    570c:	mov	x10, x9
    5710:	b.eq	56fc <lzma_index_iter_next@@XZ_5.0+0x1b8>  // b.none
    5714:	ldr	x11, [x9, #64]
    5718:	mov	x10, xzr
    571c:	cmp	w1, #0x3
    5720:	b.ne	573c <lzma_index_iter_next@@XZ_5.0+0x1f8>  // b.any
    5724:	cbz	x10, 55e0 <lzma_index_iter_next@@XZ_5.0+0x9c>
    5728:	add	x12, x11, x10, lsl #4
    572c:	ldr	x13, [x12, #48]
    5730:	ldr	x12, [x12, #64]
    5734:	cmp	x13, x12
    5738:	b.eq	55f0 <lzma_index_iter_next@@XZ_5.0+0xac>  // b.none
    573c:	stp	x9, x11, [x0, #264]
    5740:	str	x10, [x0, #280]
    5744:	bl	5754 <lzma_index_iter_next@@XZ_5.0+0x210>
    5748:	mov	w0, wzr
    574c:	ldp	x29, x30, [sp], #16
    5750:	ret
    5754:	stp	x29, x30, [sp, #-80]!
    5758:	stp	x26, x25, [sp, #16]
    575c:	stp	x24, x23, [sp, #32]
    5760:	stp	x22, x21, [sp, #48]
    5764:	stp	x20, x19, [sp, #64]
    5768:	ldp	x22, x21, [x0, #264]
    576c:	ldr	x20, [x0, #280]
    5770:	mov	x19, x0
    5774:	mov	x29, sp
    5778:	cbz	x21, 57a0 <lzma_index_iter_next@@XZ_5.0+0x25c>
    577c:	ldr	x8, [x19, #256]
    5780:	ldr	x8, [x8, #16]
    5784:	cmp	x8, x22
    5788:	b.ne	5798 <lzma_index_iter_next@@XZ_5.0+0x254>  // b.any
    578c:	ldr	x8, [x22, #72]
    5790:	cmp	x8, x21
    5794:	b.eq	5908 <lzma_index_iter_next@@XZ_5.0+0x3c4>  // b.none
    5798:	str	xzr, [x19, #288]
    579c:	b	57a8 <lzma_index_iter_next@@XZ_5.0+0x264>
    57a0:	mov	w8, #0x2                   	// #2
    57a4:	str	x8, [x19, #288]
    57a8:	ldr	w8, [x22, #40]
    57ac:	str	x8, [x19, #32]
    57b0:	ldr	x0, [x22, #88]
    57b4:	mov	x8, x22
    57b8:	str	x0, [x19, #40]
    57bc:	ldr	x23, [x22, #8]
    57c0:	str	x23, [x19, #48]
    57c4:	ldr	x24, [x22]
    57c8:	str	x24, [x19, #56]
    57cc:	ldr	w9, [x8, #104]!
    57d0:	cmn	w9, #0x1
    57d4:	csel	x9, xzr, x8, eq  // eq = none
    57d8:	str	x9, [x19]
    57dc:	ldr	x9, [x8, #56]
    57e0:	str	x9, [x19, #80]
    57e4:	ldur	x25, [x8, #-32]
    57e8:	cbz	x25, 583c <lzma_index_iter_next@@XZ_5.0+0x2f8>
    57ec:	ldr	x26, [x22, #96]
    57f0:	bl	3400 <lzma_vli_size@plt>
    57f4:	ldr	x8, [x25, #56]
    57f8:	add	x10, x25, #0x40
    57fc:	add	w9, w0, #0x1
    5800:	add	x9, x26, x9
    5804:	add	x8, x10, x8, lsl #4
    5808:	ldr	x8, [x8, #8]
    580c:	add	x9, x9, #0x1f
    5810:	and	x9, x9, #0xfffffffffffffffc
    5814:	add	x8, x8, #0x3
    5818:	and	x8, x8, #0xfffffffffffffffc
    581c:	add	x8, x9, x8
    5820:	str	x8, [x19, #64]
    5824:	ldr	x8, [x25, #56]
    5828:	lsl	x8, x8, #4
    582c:	ldr	x8, [x10, x8]
    5830:	str	x8, [x19, #72]
    5834:	cbnz	x21, 5860 <lzma_index_iter_next@@XZ_5.0+0x31c>
    5838:	b	58f0 <lzma_index_iter_next@@XZ_5.0+0x3ac>
    583c:	mov	x0, xzr
    5840:	bl	3400 <lzma_vli_size@plt>
    5844:	add	w9, w0, #0x1
    5848:	add	x9, x9, #0x7
    584c:	and	x9, x9, #0x1fffffffc
    5850:	add	x9, x9, #0x18
    5854:	mov	x8, xzr
    5858:	stp	x9, x8, [x19, #64]
    585c:	cbz	x21, 58f0 <lzma_index_iter_next@@XZ_5.0+0x3ac>
    5860:	ldr	x8, [x21, #40]
    5864:	add	x8, x8, x20
    5868:	str	x8, [x19, #144]
    586c:	ldr	x9, [x22, #48]
    5870:	add	x8, x9, x8
    5874:	str	x8, [x19, #120]
    5878:	cbz	x20, 5894 <lzma_index_iter_next@@XZ_5.0+0x350>
    587c:	sub	x9, x20, #0x1
    5880:	add	x8, x21, x9, lsl #4
    5884:	ldr	x8, [x8, #72]
    5888:	add	x8, x8, #0x3
    588c:	and	x8, x8, #0xfffffffffffffffc
    5890:	b	589c <lzma_index_iter_next@@XZ_5.0+0x358>
    5894:	ldr	x8, [x21, #8]
    5898:	mov	x9, #0xffffffffffffffff    	// #-1
    589c:	add	x10, x21, #0x40
    58a0:	cmp	x20, #0x0
    58a4:	add	x9, x10, x9, lsl #4
    58a8:	str	x8, [x19, #152]
    58ac:	csel	x9, x21, x9, eq  // eq = none
    58b0:	ldr	x9, [x9]
    58b4:	add	x10, x10, x20, lsl #4
    58b8:	add	x12, x8, #0xc
    58bc:	str	x9, [x19, #160]
    58c0:	ldr	x11, [x10]
    58c4:	sub	x11, x11, x9
    58c8:	str	x11, [x19, #168]
    58cc:	ldr	x10, [x10, #8]
    58d0:	add	x11, x12, x23
    58d4:	add	x9, x9, x24
    58d8:	str	x12, [x19, #152]
    58dc:	sub	x8, x10, x8
    58e0:	add	x10, x8, #0x3
    58e4:	and	x10, x10, #0xfffffffffffffffc
    58e8:	stp	x8, x10, [x19, #176]
    58ec:	stp	x11, x9, [x19, #128]
    58f0:	ldp	x20, x19, [sp, #64]
    58f4:	ldp	x22, x21, [sp, #48]
    58f8:	ldp	x24, x23, [sp, #32]
    58fc:	ldp	x26, x25, [sp, #16]
    5900:	ldp	x29, x30, [sp], #80
    5904:	ret
    5908:	ldr	x9, [x22, #64]
    590c:	cmp	x9, x8
    5910:	b.eq	5928 <lzma_index_iter_next@@XZ_5.0+0x3e4>  // b.none
    5914:	mov	w8, #0x1                   	// #1
    5918:	str	x8, [x19, #288]
    591c:	ldr	x8, [x21, #16]
    5920:	str	x8, [x19, #272]
    5924:	b	57a8 <lzma_index_iter_next@@XZ_5.0+0x264>
    5928:	mov	w8, #0x2                   	// #2
    592c:	str	x8, [x19, #288]
    5930:	str	xzr, [x19, #272]
    5934:	b	57a8 <lzma_index_iter_next@@XZ_5.0+0x264>

0000000000005938 <lzma_index_iter_locate@@XZ_5.0>:
    5938:	stp	x29, x30, [sp, #-16]!
    593c:	ldr	x8, [x0, #256]
    5940:	mov	x29, sp
    5944:	ldr	x9, [x8, #32]
    5948:	cmp	x9, x1
    594c:	b.ls	5980 <lzma_index_iter_locate@@XZ_5.0+0x48>  // b.plast
    5950:	ldr	x9, [x8]
    5954:	cbz	x9, 598c <lzma_index_iter_locate@@XZ_5.0+0x54>
    5958:	mov	x8, xzr
    595c:	mov	w10, #0x20                  	// #32
    5960:	mov	w11, #0x18                  	// #24
    5964:	ldr	x12, [x9]
    5968:	cmp	x12, x1
    596c:	csel	x12, x11, x10, hi  // hi = pmore
    5970:	csel	x8, x8, x9, hi  // hi = pmore
    5974:	ldr	x9, [x9, x12]
    5978:	cbnz	x9, 5964 <lzma_index_iter_locate@@XZ_5.0+0x2c>
    597c:	b	5990 <lzma_index_iter_locate@@XZ_5.0+0x58>
    5980:	mov	w0, #0x1                   	// #1
    5984:	ldp	x29, x30, [sp], #16
    5988:	ret
    598c:	mov	x8, xzr
    5990:	ldr	x9, [x8]
    5994:	ldr	x11, [x8, #56]
    5998:	sub	x10, x1, x9
    599c:	mov	x9, xzr
    59a0:	cbz	x11, 59c4 <lzma_index_iter_locate@@XZ_5.0+0x8c>
    59a4:	mov	w12, #0x20                  	// #32
    59a8:	mov	w13, #0x18                  	// #24
    59ac:	ldr	x14, [x11]
    59b0:	cmp	x14, x10
    59b4:	csel	x14, x13, x12, hi  // hi = pmore
    59b8:	csel	x9, x9, x11, hi  // hi = pmore
    59bc:	ldr	x11, [x11, x14]
    59c0:	cbnz	x11, 59ac <lzma_index_iter_locate@@XZ_5.0+0x74>
    59c4:	ldr	x12, [x9, #56]
    59c8:	cbz	x12, 59fc <lzma_index_iter_locate@@XZ_5.0+0xc4>
    59cc:	mov	x11, xzr
    59d0:	add	x13, x9, #0x40
    59d4:	sub	x14, x12, x11
    59d8:	add	x14, x11, x14, lsr #1
    59dc:	lsl	x15, x14, #4
    59e0:	ldr	x15, [x13, x15]
    59e4:	cmp	x15, x10
    59e8:	csinc	x11, x11, x14, hi  // hi = pmore
    59ec:	csel	x12, x14, x12, hi  // hi = pmore
    59f0:	cmp	x12, x11
    59f4:	b.hi	59d4 <lzma_index_iter_locate@@XZ_5.0+0x9c>  // b.pmore
    59f8:	b	5a00 <lzma_index_iter_locate@@XZ_5.0+0xc8>
    59fc:	mov	x11, xzr
    5a00:	stp	x8, x9, [x0, #264]
    5a04:	str	x11, [x0, #280]
    5a08:	bl	5754 <lzma_index_iter_next@@XZ_5.0+0x210>
    5a0c:	mov	w0, wzr
    5a10:	ldp	x29, x30, [sp], #16
    5a14:	ret
    5a18:	sub	sp, sp, #0x30
    5a1c:	stp	x29, x30, [sp, #16]
    5a20:	stp	x20, x19, [sp, #32]
    5a24:	mov	x19, x0
    5a28:	ldr	x0, [x0, #24]
    5a2c:	mov	x20, x1
    5a30:	add	x29, sp, #0x10
    5a34:	str	x2, [sp, #8]
    5a38:	cbz	x0, 5a4c <lzma_index_iter_locate@@XZ_5.0+0x114>
    5a3c:	ldr	x2, [sp, #8]
    5a40:	mov	x1, x20
    5a44:	bl	5a18 <lzma_index_iter_locate@@XZ_5.0+0xe0>
    5a48:	ldr	x2, [sp, #8]
    5a4c:	ldr	x0, [x19, #32]
    5a50:	cbz	x0, 5a64 <lzma_index_iter_locate@@XZ_5.0+0x12c>
    5a54:	ldr	x2, [sp, #8]
    5a58:	mov	x1, x20
    5a5c:	bl	5a18 <lzma_index_iter_locate@@XZ_5.0+0xe0>
    5a60:	ldr	x2, [sp, #8]
    5a64:	mov	x0, x19
    5a68:	mov	x1, x20
    5a6c:	ldp	x20, x19, [sp, #32]
    5a70:	ldp	x29, x30, [sp, #16]
    5a74:	add	sp, sp, #0x30
    5a78:	br	x2

0000000000005a7c <lzma_stream_flags_compare@@XZ_5.0>:
    5a7c:	ldr	w8, [x0]
    5a80:	cbnz	w8, 5a8c <lzma_stream_flags_compare@@XZ_5.0+0x10>
    5a84:	ldr	w8, [x1]
    5a88:	cbz	w8, 5a94 <lzma_stream_flags_compare@@XZ_5.0+0x18>
    5a8c:	mov	w0, #0x8                   	// #8
    5a90:	ret
    5a94:	ldr	w8, [x0, #16]
    5a98:	cmp	w8, #0xf
    5a9c:	b.hi	5aac <lzma_stream_flags_compare@@XZ_5.0+0x30>  // b.pmore
    5aa0:	ldr	w9, [x1, #16]
    5aa4:	cmp	w9, #0xf
    5aa8:	b.ls	5ab4 <lzma_stream_flags_compare@@XZ_5.0+0x38>  // b.plast
    5aac:	mov	w0, #0xb                   	// #11
    5ab0:	ret
    5ab4:	cmp	w8, w9
    5ab8:	b.ne	5b1c <lzma_stream_flags_compare@@XZ_5.0+0xa0>  // b.any
    5abc:	ldr	x8, [x0, #8]
    5ac0:	cmn	x8, #0x1
    5ac4:	b.eq	5b14 <lzma_stream_flags_compare@@XZ_5.0+0x98>  // b.none
    5ac8:	ldr	x9, [x1, #8]
    5acc:	cmn	x9, #0x1
    5ad0:	b.eq	5b14 <lzma_stream_flags_compare@@XZ_5.0+0x98>  // b.none
    5ad4:	mov	x10, #0x3ffff0000           	// #17179803648
    5ad8:	movk	x10, #0xfffd
    5adc:	sub	x11, x8, #0x4
    5ae0:	cmp	x11, x10
    5ae4:	mov	w0, #0xb                   	// #11
    5ae8:	b.cs	5b18 <lzma_stream_flags_compare@@XZ_5.0+0x9c>  // b.hs, b.nlast
    5aec:	and	x11, x8, #0x3
    5af0:	cbnz	x11, 5b18 <lzma_stream_flags_compare@@XZ_5.0+0x9c>
    5af4:	sub	x11, x9, #0x4
    5af8:	cmp	x11, x10
    5afc:	mov	w0, #0xb                   	// #11
    5b00:	b.cs	5b18 <lzma_stream_flags_compare@@XZ_5.0+0x9c>  // b.hs, b.nlast
    5b04:	and	x10, x9, #0x3
    5b08:	cbnz	x10, 5b18 <lzma_stream_flags_compare@@XZ_5.0+0x9c>
    5b0c:	cmp	x8, x9
    5b10:	b.ne	5b1c <lzma_stream_flags_compare@@XZ_5.0+0xa0>  // b.any
    5b14:	mov	w0, wzr
    5b18:	ret
    5b1c:	mov	w0, #0x9                   	// #9
    5b20:	ret

0000000000005b24 <lzma_vli_size@@XZ_5.0>:
    5b24:	mov	w8, wzr
    5b28:	tbnz	x0, #63, 5b38 <lzma_vli_size@@XZ_5.0+0x14>
    5b2c:	lsr	x0, x0, #7
    5b30:	add	w8, w8, #0x1
    5b34:	cbnz	x0, 5b2c <lzma_vli_size@@XZ_5.0+0x8>
    5b38:	mov	w0, w8
    5b3c:	ret

0000000000005b40 <lzma_cputhreads@@XZ_5.2>:
    5b40:	b	3604 <pthread_cond_timedwait@plt+0x124>

0000000000005b44 <lzma_alone_encoder@@XZ_5.0>:
    5b44:	stp	x29, x30, [sp, #-48]!
    5b48:	str	x21, [sp, #16]
    5b4c:	stp	x20, x19, [sp, #32]
    5b50:	mov	x29, sp
    5b54:	mov	x21, x1
    5b58:	mov	x19, x0
    5b5c:	bl	3914 <lzma_version_string@@XZ_5.0+0x2b8>
    5b60:	mov	w20, w0
    5b64:	cbnz	w0, 5b98 <lzma_alone_encoder@@XZ_5.0+0x54>
    5b68:	ldp	x1, x0, [x19, #48]
    5b6c:	mov	x2, x21
    5b70:	bl	5bac <lzma_alone_encoder@@XZ_5.0+0x68>
    5b74:	mov	w20, w0
    5b78:	cbz	w0, 5b88 <lzma_alone_encoder@@XZ_5.0+0x44>
    5b7c:	mov	x0, x19
    5b80:	bl	32c0 <lzma_end@plt>
    5b84:	b	5b98 <lzma_alone_encoder@@XZ_5.0+0x54>
    5b88:	ldr	x8, [x19, #56]
    5b8c:	mov	w9, #0x1                   	// #1
    5b90:	strb	w9, [x8, #88]
    5b94:	strb	w9, [x8, #91]
    5b98:	mov	w0, w20
    5b9c:	ldp	x20, x19, [sp, #32]
    5ba0:	ldr	x21, [sp, #16]
    5ba4:	ldp	x29, x30, [sp], #48
    5ba8:	ret
    5bac:	sub	sp, sp, #0x70
    5bb0:	stp	x29, x30, [sp, #48]
    5bb4:	stp	x22, x21, [sp, #80]
    5bb8:	stp	x20, x19, [sp, #96]
    5bbc:	ldr	x8, [x0, #16]
    5bc0:	str	x23, [sp, #64]
    5bc4:	adrp	x23, 5000 <lzma_index_cat@@XZ_5.0+0x25c>
    5bc8:	add	x23, x23, #0xbac
    5bcc:	mov	x19, x2
    5bd0:	mov	x22, x0
    5bd4:	cmp	x8, x23
    5bd8:	mov	x20, x1
    5bdc:	add	x29, sp, #0x30
    5be0:	b.eq	5bf0 <lzma_alone_encoder@@XZ_5.0+0xac>  // b.none
    5be4:	mov	x0, x22
    5be8:	mov	x1, x20
    5bec:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    5bf0:	ldr	x21, [x22]
    5bf4:	str	x23, [x22, #16]
    5bf8:	cbnz	x21, 5c40 <lzma_alone_encoder@@XZ_5.0+0xfc>
    5bfc:	mov	w0, #0x68                  	// #104
    5c00:	mov	x1, x20
    5c04:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    5c08:	cbz	x0, 5cd8 <lzma_alone_encoder@@XZ_5.0+0x194>
    5c0c:	adrp	x8, 5000 <lzma_index_cat@@XZ_5.0+0x25c>
    5c10:	adrp	x9, 5000 <lzma_index_cat@@XZ_5.0+0x25c>
    5c14:	mov	x21, x0
    5c18:	add	x8, x8, #0xcf4
    5c1c:	add	x9, x9, #0xe14
    5c20:	mov	x10, #0xffffffffffffffff    	// #-1
    5c24:	movi	v0.2d, #0x0
    5c28:	str	x0, [x22]
    5c2c:	stp	x8, x9, [x22, #24]
    5c30:	stp	xzr, x10, [x0]
    5c34:	stp	q0, q0, [x0, #16]
    5c38:	str	q0, [x0, #48]
    5c3c:	str	xzr, [x0, #64]
    5c40:	add	x1, x21, #0x58
    5c44:	mov	x0, x19
    5c48:	str	wzr, [x21, #72]
    5c4c:	str	xzr, [x21, #80]
    5c50:	bl	11c04 <lzma_lzma_preset@@XZ_5.0+0x1780>
    5c54:	tbnz	w0, #0, 5c64 <lzma_alone_encoder@@XZ_5.0+0x120>
    5c58:	ldr	w8, [x19]
    5c5c:	cmp	w8, #0x1, lsl #12
    5c60:	b.cs	5c6c <lzma_alone_encoder@@XZ_5.0+0x128>  // b.hs, b.nlast
    5c64:	mov	w0, #0x8                   	// #8
    5c68:	b	5cdc <lzma_alone_encoder@@XZ_5.0+0x198>
    5c6c:	sub	w8, w8, #0x1
    5c70:	orr	w8, w8, w8, lsr #2
    5c74:	orr	w8, w8, w8, lsr #3
    5c78:	orr	w8, w8, w8, lsr #4
    5c7c:	orr	w8, w8, w8, lsr #8
    5c80:	orr	w8, w8, w8, lsr #16
    5c84:	adds	w8, w8, #0x1
    5c88:	mov	x9, #0xffffffffffffffff    	// #-1
    5c8c:	csinv	w8, w8, wzr, cc  // cc = lo, ul, last
    5c90:	stur	x9, [x21, #93]
    5c94:	lsr	w9, w8, #8
    5c98:	strb	w9, [x21, #90]
    5c9c:	lsr	w9, w8, #16
    5ca0:	strb	w9, [x21, #91]
    5ca4:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    5ca8:	ldr	x9, [x9, #4056]
    5cac:	strb	w8, [x21, #89]
    5cb0:	lsr	w8, w8, #24
    5cb4:	mov	x2, sp
    5cb8:	mov	x0, x21
    5cbc:	mov	x1, x20
    5cc0:	strb	w8, [x21, #92]
    5cc4:	stp	xzr, x9, [sp]
    5cc8:	stp	x19, xzr, [sp, #16]
    5ccc:	stp	xzr, xzr, [sp, #32]
    5cd0:	bl	3790 <lzma_version_string@@XZ_5.0+0x134>
    5cd4:	b	5cdc <lzma_alone_encoder@@XZ_5.0+0x198>
    5cd8:	mov	w0, #0x5                   	// #5
    5cdc:	ldp	x20, x19, [sp, #96]
    5ce0:	ldp	x22, x21, [sp, #80]
    5ce4:	ldr	x23, [sp, #64]
    5ce8:	ldp	x29, x30, [sp, #48]
    5cec:	add	sp, sp, #0x70
    5cf0:	ret
    5cf4:	sub	sp, sp, #0x70
    5cf8:	stp	x29, x30, [sp, #16]
    5cfc:	stp	x28, x27, [sp, #32]
    5d00:	stp	x26, x25, [sp, #48]
    5d04:	stp	x24, x23, [sp, #64]
    5d08:	stp	x22, x21, [sp, #80]
    5d0c:	stp	x20, x19, [sp, #96]
    5d10:	ldr	x8, [x6]
    5d14:	add	x29, sp, #0x10
    5d18:	cmp	x8, x7
    5d1c:	b.cs	5d94 <lzma_alone_encoder@@XZ_5.0+0x250>  // b.hs, b.nlast
    5d20:	ldr	w8, [x29, #96]
    5d24:	mov	x19, x7
    5d28:	mov	x20, x6
    5d2c:	mov	x21, x5
    5d30:	stur	w8, [x29, #-4]
    5d34:	ldr	w8, [x0, #72]
    5d38:	mov	x22, x4
    5d3c:	mov	x23, x3
    5d40:	mov	x24, x2
    5d44:	mov	x25, x1
    5d48:	mov	x26, x0
    5d4c:	add	x27, x0, #0x58
    5d50:	add	x28, x0, #0x50
    5d54:	cbnz	w8, 5db8 <lzma_alone_encoder@@XZ_5.0+0x274>
    5d58:	mov	w2, #0xd                   	// #13
    5d5c:	mov	x0, x27
    5d60:	mov	x1, x28
    5d64:	mov	x3, x21
    5d68:	mov	x4, x20
    5d6c:	mov	x5, x19
    5d70:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
    5d74:	ldr	x8, [x28]
    5d78:	cmp	x8, #0xd
    5d7c:	b.cc	5d94 <lzma_alone_encoder@@XZ_5.0+0x250>  // b.lo, b.ul, b.last
    5d80:	mov	w8, #0x1                   	// #1
    5d84:	str	w8, [x26, #72]
    5d88:	ldr	x9, [x20]
    5d8c:	cmp	x9, x19
    5d90:	b.cc	5d54 <lzma_alone_encoder@@XZ_5.0+0x210>  // b.lo, b.ul, b.last
    5d94:	mov	w0, wzr
    5d98:	ldp	x20, x19, [sp, #96]
    5d9c:	ldp	x22, x21, [sp, #80]
    5da0:	ldp	x24, x23, [sp, #64]
    5da4:	ldp	x26, x25, [sp, #48]
    5da8:	ldp	x28, x27, [sp, #32]
    5dac:	ldp	x29, x30, [sp, #16]
    5db0:	add	sp, sp, #0x70
    5db4:	ret
    5db8:	cmp	w8, #0x1
    5dbc:	b.ne	5e0c <lzma_alone_encoder@@XZ_5.0+0x2c8>  // b.any
    5dc0:	ldur	w9, [x29, #-4]
    5dc4:	ldr	x8, [x26, #24]
    5dc8:	ldr	x0, [x26]
    5dcc:	mov	x1, x25
    5dd0:	str	w9, [x29, #96]
    5dd4:	mov	x2, x24
    5dd8:	mov	x3, x23
    5ddc:	mov	x4, x22
    5de0:	mov	x5, x21
    5de4:	mov	x6, x20
    5de8:	mov	x7, x19
    5dec:	ldp	x20, x19, [sp, #96]
    5df0:	ldp	x22, x21, [sp, #80]
    5df4:	ldp	x24, x23, [sp, #64]
    5df8:	ldp	x26, x25, [sp, #48]
    5dfc:	ldp	x28, x27, [sp, #32]
    5e00:	ldp	x29, x30, [sp, #16]
    5e04:	add	sp, sp, #0x70
    5e08:	br	x8
    5e0c:	mov	w0, #0xb                   	// #11
    5e10:	b	5d98 <lzma_alone_encoder@@XZ_5.0+0x254>
    5e14:	stp	x29, x30, [sp, #-32]!
    5e18:	stp	x20, x19, [sp, #16]
    5e1c:	mov	x29, sp
    5e20:	mov	x19, x1
    5e24:	mov	x20, x0
    5e28:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    5e2c:	mov	x0, x20
    5e30:	mov	x1, x19
    5e34:	ldp	x20, x19, [sp, #16]
    5e38:	ldp	x29, x30, [sp], #32
    5e3c:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
    5e40:	mov	x8, #0xfffffffffffffbbb    	// #-1093
    5e44:	movk	x8, #0x7fff, lsl #48
    5e48:	add	x9, x8, #0x1
    5e4c:	cmp	x0, x9
    5e50:	b.ls	5e5c <lzma_alone_encoder@@XZ_5.0+0x318>  // b.plast
    5e54:	mov	x0, xzr
    5e58:	ret
    5e5c:	mov	w9, #0xffff                	// #65535
    5e60:	add	x9, x0, x9
    5e64:	lsr	x9, x9, #16
    5e68:	add	x9, x9, x9, lsl #1
    5e6c:	sub	x8, x8, x9
    5e70:	cmp	x8, x0
    5e74:	b.cs	5e80 <lzma_alone_encoder@@XZ_5.0+0x33c>  // b.hs, b.nlast
    5e78:	mov	x0, xzr
    5e7c:	ret
    5e80:	add	x8, x0, x9
    5e84:	add	x8, x8, #0x60
    5e88:	and	x0, x8, #0xfffffffffffffffc
    5e8c:	ret

0000000000005e90 <lzma_block_buffer_bound@@XZ_5.0>:
    5e90:	mov	x8, #0xfffffffffffffbbb    	// #-1093
    5e94:	movk	x8, #0x7fff, lsl #48
    5e98:	add	x9, x8, #0x1
    5e9c:	cmp	x0, x9
    5ea0:	b.ls	5eac <lzma_block_buffer_bound@@XZ_5.0+0x1c>  // b.plast
    5ea4:	mov	x0, xzr
    5ea8:	ret
    5eac:	mov	w9, #0xffff                	// #65535
    5eb0:	add	x9, x0, x9
    5eb4:	lsr	x9, x9, #16
    5eb8:	add	x9, x9, x9, lsl #1
    5ebc:	sub	x8, x8, x9
    5ec0:	cmp	x8, x0
    5ec4:	b.cs	5ed0 <lzma_block_buffer_bound@@XZ_5.0+0x40>  // b.hs, b.nlast
    5ec8:	mov	x0, xzr
    5ecc:	ret
    5ed0:	add	x8, x0, x9
    5ed4:	add	x8, x8, #0x60
    5ed8:	and	x0, x8, #0xfffffffffffffffc
    5edc:	ret

0000000000005ee0 <lzma_block_buffer_encode@@XZ_5.0>:
    5ee0:	mov	w7, #0x1                   	// #1
    5ee4:	b	5ee8 <lzma_block_buffer_encode@@XZ_5.0+0x8>
    5ee8:	sub	sp, sp, #0x120
    5eec:	stp	x29, x30, [sp, #192]
    5ef0:	stp	x28, x27, [sp, #208]
    5ef4:	stp	x26, x25, [sp, #224]
    5ef8:	stp	x24, x23, [sp, #240]
    5efc:	stp	x22, x21, [sp, #256]
    5f00:	stp	x20, x19, [sp, #272]
    5f04:	add	x29, sp, #0xc0
    5f08:	cbz	x0, 5f74 <lzma_block_buffer_encode@@XZ_5.0+0x94>
    5f0c:	cmp	x2, #0x0
    5f10:	cset	w8, eq  // eq = none
    5f14:	cmp	x3, #0x0
    5f18:	cset	w9, ne  // ne = any
    5f1c:	mov	x22, x3
    5f20:	mov	x23, x2
    5f24:	and	w8, w8, w9
    5f28:	mov	w26, #0xb                   	// #11
    5f2c:	tbnz	w8, #0, 5f78 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5f30:	mov	x21, x4
    5f34:	cbz	x4, 5f78 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5f38:	mov	x19, x5
    5f3c:	cbz	x5, 5f78 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5f40:	ldr	x28, [x19]
    5f44:	mov	x24, x6
    5f48:	cmp	x28, x6
    5f4c:	b.hi	5f74 <lzma_block_buffer_encode@@XZ_5.0+0x94>  // b.pmore
    5f50:	ldr	w8, [x0]
    5f54:	mov	x20, x0
    5f58:	cmp	w8, #0x1
    5f5c:	b.ls	5f68 <lzma_block_buffer_encode@@XZ_5.0+0x88>  // b.plast
    5f60:	mov	w26, #0x8                   	// #8
    5f64:	b	5f78 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    5f68:	ldr	w26, [x20, #8]
    5f6c:	cmp	w26, #0xf
    5f70:	b.ls	5f9c <lzma_block_buffer_encode@@XZ_5.0+0xbc>  // b.plast
    5f74:	mov	w26, #0xb                   	// #11
    5f78:	mov	w0, w26
    5f7c:	ldp	x20, x19, [sp, #272]
    5f80:	ldp	x22, x21, [sp, #256]
    5f84:	ldp	x24, x23, [sp, #240]
    5f88:	ldp	x26, x25, [sp, #224]
    5f8c:	ldp	x28, x27, [sp, #208]
    5f90:	ldp	x29, x30, [sp, #192]
    5f94:	add	sp, sp, #0x120
    5f98:	ret
    5f9c:	mov	w27, w7
    5fa0:	mov	x25, x1
    5fa4:	tbz	w7, #0, 5fb0 <lzma_block_buffer_encode@@XZ_5.0+0xd0>
    5fa8:	ldr	x8, [x20, #32]
    5fac:	cbz	x8, 5f74 <lzma_block_buffer_encode@@XZ_5.0+0x94>
    5fb0:	mov	w0, w26
    5fb4:	bl	3080 <lzma_check_is_supported@plt>
    5fb8:	tst	w0, #0xff
    5fbc:	b.eq	6024 <lzma_block_buffer_encode@@XZ_5.0+0x144>  // b.none
    5fc0:	sub	w8, w24, w28
    5fc4:	and	x8, x8, #0x3
    5fc8:	mov	w0, w26
    5fcc:	sub	x24, x24, x8
    5fd0:	bl	3200 <lzma_check_size@plt>
    5fd4:	mov	w10, w0
    5fd8:	sub	x8, x24, x28
    5fdc:	cmp	x8, x10
    5fe0:	b.ls	602c <lzma_block_buffer_encode@@XZ_5.0+0x14c>  // b.plast
    5fe4:	mov	x8, #0xfffffffffffffbbb    	// #-1093
    5fe8:	movk	x8, #0x7fff, lsl #48
    5fec:	add	x9, x8, #0x1
    5ff0:	cmp	x22, x9
    5ff4:	str	x22, [x20, #24]
    5ff8:	b.hi	6018 <lzma_block_buffer_encode@@XZ_5.0+0x138>  // b.pmore
    5ffc:	mov	w9, #0xffff                	// #65535
    6000:	add	x9, x22, x9
    6004:	lsr	x9, x9, #16
    6008:	add	x9, x9, x9, lsl #1
    600c:	sub	x8, x8, x9
    6010:	cmp	x8, x22
    6014:	b.cs	6034 <lzma_block_buffer_encode@@XZ_5.0+0x154>  // b.hs, b.nlast
    6018:	str	xzr, [x20, #16]
    601c:	mov	w26, #0x9                   	// #9
    6020:	b	5f78 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    6024:	mov	w26, #0x3                   	// #3
    6028:	b	5f78 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    602c:	mov	w26, #0xa                   	// #10
    6030:	b	5f78 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    6034:	add	x8, x22, x9
    6038:	sub	x28, x24, x10
    603c:	add	x8, x8, #0x1
    6040:	str	x10, [sp, #24]
    6044:	str	x8, [x20, #16]
    6048:	tbz	w27, #0, 6150 <lzma_block_buffer_encode@@XZ_5.0+0x270>
    604c:	mov	x0, x20
    6050:	bl	3100 <lzma_block_header_size@plt>
    6054:	mov	w26, w0
    6058:	cbnz	w0, 6144 <lzma_block_buffer_encode@@XZ_5.0+0x264>
    605c:	ldr	x27, [x19]
    6060:	ldr	w8, [x20, #4]
    6064:	sub	x9, x28, x27
    6068:	cmp	x9, x8
    606c:	b.ls	6150 <lzma_block_buffer_encode@@XZ_5.0+0x270>  // b.plast
    6070:	add	x24, x27, x8
    6074:	movi	v0.2d, #0x0
    6078:	mov	x8, #0xffffffffffffffff    	// #-1
    607c:	str	x24, [x19]
    6080:	ldr	x9, [x20, #16]
    6084:	str	xzr, [sp, #128]
    6088:	stp	q0, q0, [sp, #96]
    608c:	stp	q0, q0, [sp, #64]
    6090:	str	x8, [sp, #72]
    6094:	ldr	x2, [x20, #32]
    6098:	add	x0, sp, #0x40
    609c:	mov	x1, x25
    60a0:	str	x9, [sp, #16]
    60a4:	bl	6dec <lzma_raw_encoder_memusage@@XZ_5.0+0x14>
    60a8:	mov	w26, w0
    60ac:	cbnz	w0, 60f8 <lzma_block_buffer_encode@@XZ_5.0+0x218>
    60b0:	ldr	x11, [sp, #16]
    60b4:	ldr	x10, [sp, #88]
    60b8:	ldr	x0, [sp, #64]
    60bc:	sub	x8, x28, x24
    60c0:	add	x9, x11, x24
    60c4:	cmp	x8, x11
    60c8:	csel	x7, x9, x28, hi  // hi = pmore
    60cc:	mov	w8, #0x3                   	// #3
    60d0:	add	x3, sp, #0x20
    60d4:	mov	x1, x25
    60d8:	mov	x2, x23
    60dc:	mov	x4, x22
    60e0:	mov	x5, x21
    60e4:	mov	x6, x19
    60e8:	str	xzr, [sp, #32]
    60ec:	str	w8, [sp]
    60f0:	blr	x10
    60f4:	mov	w26, w0
    60f8:	add	x0, sp, #0x40
    60fc:	mov	x1, x25
    6100:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    6104:	cbz	w26, 613c <lzma_block_buffer_encode@@XZ_5.0+0x25c>
    6108:	cmp	w26, #0x1
    610c:	b.ne	6140 <lzma_block_buffer_encode@@XZ_5.0+0x260>  // b.any
    6110:	ldr	x8, [x19]
    6114:	ldr	w9, [x20, #4]
    6118:	add	x1, x21, x27
    611c:	mov	x0, x20
    6120:	sub	x8, x8, x27
    6124:	sub	x8, x8, x9
    6128:	str	x8, [x20, #16]
    612c:	bl	34c0 <lzma_block_header_encode@plt>
    6130:	cbz	w0, 6380 <lzma_block_buffer_encode@@XZ_5.0+0x4a0>
    6134:	mov	w26, #0xb                   	// #11
    6138:	b	6140 <lzma_block_buffer_encode@@XZ_5.0+0x260>
    613c:	mov	w26, #0xa                   	// #10
    6140:	str	x27, [x19]
    6144:	cbz	w26, 62e0 <lzma_block_buffer_encode@@XZ_5.0+0x400>
    6148:	cmp	w26, #0xa
    614c:	b.ne	5f78 <lzma_block_buffer_encode@@XZ_5.0+0x98>  // b.any
    6150:	movi	v0.2d, #0x0
    6154:	mov	w8, #0x1000                	// #4096
    6158:	mov	w9, #0x21                  	// #33
    615c:	add	x10, sp, #0x40
    6160:	stp	q0, q0, [sp, #64]
    6164:	str	w8, [sp, #64]
    6168:	mov	x8, #0xffffffffffffffff    	// #-1
    616c:	stp	q0, q0, [sp, #144]
    6170:	stp	q0, q0, [sp, #112]
    6174:	str	q0, [sp, #96]
    6178:	stp	x9, x10, [sp, #32]
    617c:	str	x8, [sp, #48]
    6180:	ldr	x25, [x20, #32]
    6184:	add	x8, sp, #0x20
    6188:	mov	x0, x20
    618c:	str	x8, [x20, #32]
    6190:	bl	3100 <lzma_block_header_size@plt>
    6194:	cbz	w0, 61a4 <lzma_block_buffer_encode@@XZ_5.0+0x2c4>
    6198:	mov	w26, #0xb                   	// #11
    619c:	str	x25, [x20, #32]
    61a0:	b	5f78 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    61a4:	ldr	x8, [x19]
    61a8:	ldr	w9, [x20, #4]
    61ac:	ldr	x10, [x20, #16]
    61b0:	sub	x11, x28, x8
    61b4:	add	x9, x10, x9
    61b8:	cmp	x11, x9
    61bc:	b.cs	61cc <lzma_block_buffer_encode@@XZ_5.0+0x2ec>  // b.hs, b.nlast
    61c0:	mov	w26, #0xa                   	// #10
    61c4:	str	x25, [x20, #32]
    61c8:	b	5f78 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    61cc:	add	x1, x21, x8
    61d0:	mov	x0, x20
    61d4:	bl	34c0 <lzma_block_header_encode@plt>
    61d8:	str	x25, [x20, #32]
    61dc:	cbnz	w0, 5f74 <lzma_block_buffer_encode@@XZ_5.0+0x94>
    61e0:	ldr	w8, [x20, #4]
    61e4:	ldr	x9, [x19]
    61e8:	add	x8, x9, x8
    61ec:	add	x9, x8, #0x1
    61f0:	add	x8, x21, x8
    61f4:	str	x9, [x19]
    61f8:	cbz	x22, 62dc <lzma_block_buffer_encode@@XZ_5.0+0x3fc>
    61fc:	mov	w9, #0x1                   	// #1
    6200:	strb	w9, [x8]
    6204:	ldr	x8, [x19]
    6208:	cmp	x22, #0x10, lsl #12
    620c:	mov	w10, #0x10000               	// #65536
    6210:	csel	x25, x22, x10, cc  // cc = lo, ul, last
    6214:	sub	x9, x25, #0x1
    6218:	lsr	x10, x9, #8
    621c:	add	x11, x8, #0x1
    6220:	str	x11, [x19]
    6224:	strb	w10, [x21, x8]
    6228:	ldr	x8, [x19]
    622c:	mov	x1, x23
    6230:	mov	x2, x25
    6234:	add	x10, x8, #0x1
    6238:	str	x10, [x19]
    623c:	strb	w9, [x21, x8]
    6240:	ldr	x8, [x19]
    6244:	add	x0, x21, x8
    6248:	bl	3040 <memcpy@plt>
    624c:	ldr	x8, [x19]
    6250:	cmp	x22, #0x10, lsl #12
    6254:	add	x8, x8, x25
    6258:	add	x9, x8, #0x1
    625c:	add	x8, x21, x8
    6260:	str	x9, [x19]
    6264:	b.ls	62dc <lzma_block_buffer_encode@@XZ_5.0+0x3fc>  // b.plast
    6268:	mov	w27, #0x2                   	// #2
    626c:	mov	w28, #0x10000               	// #65536
    6270:	strb	w27, [x8]
    6274:	sub	x8, x22, x25
    6278:	ldr	x9, [x19]
    627c:	cmp	x8, #0x10, lsl #12
    6280:	csel	x26, x8, x28, cc  // cc = lo, ul, last
    6284:	sub	x8, x26, #0x1
    6288:	lsr	x10, x8, #8
    628c:	add	x11, x9, #0x1
    6290:	str	x11, [x19]
    6294:	strb	w10, [x21, x9]
    6298:	ldr	x9, [x19]
    629c:	add	x1, x23, x25
    62a0:	mov	x2, x26
    62a4:	add	x10, x9, #0x1
    62a8:	str	x10, [x19]
    62ac:	strb	w8, [x21, x9]
    62b0:	ldr	x8, [x19]
    62b4:	add	x0, x21, x8
    62b8:	bl	3040 <memcpy@plt>
    62bc:	ldr	x8, [x19]
    62c0:	add	x25, x26, x25
    62c4:	cmp	x25, x22
    62c8:	add	x8, x8, x26
    62cc:	add	x9, x8, #0x1
    62d0:	add	x8, x21, x8
    62d4:	str	x9, [x19]
    62d8:	b.cc	6270 <lzma_block_buffer_encode@@XZ_5.0+0x390>  // b.lo, b.ul, b.last
    62dc:	strb	wzr, [x8]
    62e0:	ldr	x8, [x20, #16]
    62e4:	tst	x8, #0x3
    62e8:	b.eq	630c <lzma_block_buffer_encode@@XZ_5.0+0x42c>  // b.none
    62ec:	add	x8, x8, #0x1
    62f0:	ldr	x9, [x19]
    62f4:	tst	x8, #0x3
    62f8:	add	x8, x8, #0x1
    62fc:	add	x10, x9, #0x1
    6300:	str	x10, [x19]
    6304:	strb	wzr, [x21, x9]
    6308:	b.ne	62f0 <lzma_block_buffer_encode@@XZ_5.0+0x410>  // b.any
    630c:	ldr	x24, [sp, #24]
    6310:	cbz	w24, 6378 <lzma_block_buffer_encode@@XZ_5.0+0x498>
    6314:	ldr	w1, [x20, #8]
    6318:	add	x0, sp, #0x40
    631c:	bl	c554 <lzma_check_size@@XZ_5.0+0x20>
    6320:	ldr	w1, [x20, #8]
    6324:	add	x0, sp, #0x40
    6328:	mov	x2, x23
    632c:	mov	x3, x22
    6330:	bl	c580 <lzma_check_size@@XZ_5.0+0x4c>
    6334:	ldr	w1, [x20, #8]
    6338:	add	x0, sp, #0x40
    633c:	bl	c608 <lzma_check_size@@XZ_5.0+0xd4>
    6340:	add	x0, x20, #0x28
    6344:	add	x1, sp, #0x40
    6348:	mov	x2, x24
    634c:	bl	3040 <memcpy@plt>
    6350:	ldr	x8, [x19]
    6354:	add	x1, sp, #0x40
    6358:	mov	x2, x24
    635c:	add	x0, x21, x8
    6360:	bl	3040 <memcpy@plt>
    6364:	ldr	x8, [x19]
    6368:	mov	w26, wzr
    636c:	add	x8, x8, x24
    6370:	str	x8, [x19]
    6374:	b	5f78 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    6378:	mov	w26, wzr
    637c:	b	5f78 <lzma_block_buffer_encode@@XZ_5.0+0x98>
    6380:	mov	w26, wzr
    6384:	cbnz	w26, 6148 <lzma_block_buffer_encode@@XZ_5.0+0x268>
    6388:	b	62e0 <lzma_block_buffer_encode@@XZ_5.0+0x400>

000000000000638c <lzma_block_uncomp_encode@@XZ_5.2>:
    638c:	mov	x6, x5
    6390:	mov	x5, x4
    6394:	mov	x4, x3
    6398:	mov	x3, x2
    639c:	mov	x2, x1
    63a0:	mov	x1, xzr
    63a4:	mov	w7, wzr
    63a8:	b	5ee8 <lzma_block_buffer_encode@@XZ_5.0+0x8>
    63ac:	stp	x29, x30, [sp, #-64]!
    63b0:	stp	x22, x21, [sp, #32]
    63b4:	stp	x20, x19, [sp, #48]
    63b8:	ldr	x8, [x0, #16]
    63bc:	adrp	x22, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x120>
    63c0:	add	x22, x22, #0x3ac
    63c4:	mov	x19, x2
    63c8:	mov	x21, x0
    63cc:	cmp	x8, x22
    63d0:	mov	x20, x1
    63d4:	str	x23, [sp, #16]
    63d8:	mov	x29, sp
    63dc:	b.eq	63ec <lzma_block_uncomp_encode@@XZ_5.2+0x60>  // b.none
    63e0:	mov	x0, x21
    63e4:	mov	x1, x20
    63e8:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    63ec:	str	x22, [x21, #16]
    63f0:	cbz	x19, 6414 <lzma_block_uncomp_encode@@XZ_5.2+0x88>
    63f4:	ldr	w8, [x19]
    63f8:	cmp	w8, #0x1
    63fc:	b.ls	6408 <lzma_block_uncomp_encode@@XZ_5.2+0x7c>  // b.plast
    6400:	mov	w0, #0x8                   	// #8
    6404:	b	6418 <lzma_block_uncomp_encode@@XZ_5.2+0x8c>
    6408:	ldr	w23, [x19, #8]
    640c:	cmp	w23, #0xf
    6410:	b.ls	642c <lzma_block_uncomp_encode@@XZ_5.2+0xa0>  // b.plast
    6414:	mov	w0, #0xb                   	// #11
    6418:	ldp	x20, x19, [sp, #48]
    641c:	ldp	x22, x21, [sp, #32]
    6420:	ldr	x23, [sp, #16]
    6424:	ldp	x29, x30, [sp], #64
    6428:	ret
    642c:	mov	w0, w23
    6430:	bl	3080 <lzma_check_is_supported@plt>
    6434:	tst	w0, #0xff
    6438:	b.eq	64d4 <lzma_block_uncomp_encode@@XZ_5.2+0x148>  // b.none
    643c:	ldr	x22, [x21]
    6440:	cbnz	x22, 6498 <lzma_block_uncomp_encode@@XZ_5.2+0x10c>
    6444:	mov	w0, #0xd8                  	// #216
    6448:	mov	x1, x20
    644c:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    6450:	cbz	x0, 64dc <lzma_block_uncomp_encode@@XZ_5.2+0x150>
    6454:	adrp	x8, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x120>
    6458:	adrp	x9, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x120>
    645c:	add	x8, x8, #0x4e4
    6460:	add	x9, x9, #0x6e8
    6464:	stp	x8, x9, [x21, #24]
    6468:	adrp	x8, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x120>
    646c:	add	x8, x8, #0x714
    6470:	str	x8, [x21, #64]
    6474:	mov	x8, #0xffffffffffffffff    	// #-1
    6478:	movi	v0.2d, #0x0
    647c:	str	x0, [x21]
    6480:	stp	xzr, x8, [x0]
    6484:	stp	q0, q0, [x0, #16]
    6488:	str	q0, [x0, #48]
    648c:	str	xzr, [x0, #64]
    6490:	ldr	w23, [x19, #8]
    6494:	mov	x22, x0
    6498:	add	x0, x22, #0x70
    649c:	mov	w1, w23
    64a0:	str	wzr, [x22, #80]
    64a4:	str	x19, [x22, #72]
    64a8:	stp	xzr, xzr, [x22, #96]
    64ac:	str	xzr, [x22, #88]
    64b0:	bl	c554 <lzma_check_size@@XZ_5.0+0x20>
    64b4:	ldr	x2, [x19, #32]
    64b8:	mov	x0, x22
    64bc:	mov	x1, x20
    64c0:	ldp	x20, x19, [sp, #48]
    64c4:	ldp	x22, x21, [sp, #32]
    64c8:	ldr	x23, [sp, #16]
    64cc:	ldp	x29, x30, [sp], #64
    64d0:	b	6dec <lzma_raw_encoder_memusage@@XZ_5.0+0x14>
    64d4:	mov	w0, #0x3                   	// #3
    64d8:	b	6418 <lzma_block_uncomp_encode@@XZ_5.2+0x8c>
    64dc:	mov	w0, #0x5                   	// #5
    64e0:	b	6418 <lzma_block_uncomp_encode@@XZ_5.2+0x8c>
    64e4:	sub	sp, sp, #0x70
    64e8:	stp	x29, x30, [sp, #16]
    64ec:	stp	x28, x27, [sp, #32]
    64f0:	stp	x26, x25, [sp, #48]
    64f4:	stp	x24, x23, [sp, #64]
    64f8:	stp	x22, x21, [sp, #80]
    64fc:	stp	x20, x19, [sp, #96]
    6500:	ldr	x8, [x0, #96]
    6504:	ldr	x26, [x3]
    6508:	mov	x9, #0x7fffffffffffffff    	// #9223372036854775807
    650c:	add	x29, sp, #0x10
    6510:	sub	x8, x9, x8
    6514:	sub	x9, x4, x26
    6518:	cmp	x8, x9
    651c:	b.cs	6528 <lzma_block_uncomp_encode@@XZ_5.2+0x19c>  // b.hs, b.nlast
    6520:	mov	w24, #0x9                   	// #9
    6524:	b	66c4 <lzma_block_uncomp_encode@@XZ_5.2+0x338>
    6528:	ldr	w8, [x0, #80]
    652c:	mov	x20, x7
    6530:	mov	x21, x6
    6534:	mov	x22, x5
    6538:	mov	x19, x0
    653c:	cbz	w8, 6564 <lzma_block_uncomp_encode@@XZ_5.2+0x1d8>
    6540:	cmp	w8, #0x2
    6544:	b.eq	6660 <lzma_block_uncomp_encode@@XZ_5.2+0x2d4>  // b.none
    6548:	cmp	w8, #0x1
    654c:	b.ne	66a4 <lzma_block_uncomp_encode@@XZ_5.2+0x318>  // b.any
    6550:	mov	x25, x19
    6554:	ldr	x9, [x25, #88]!
    6558:	tst	x9, #0x3
    655c:	b.ne	6618 <lzma_block_uncomp_encode@@XZ_5.2+0x28c>  // b.any
    6560:	b	6644 <lzma_block_uncomp_encode@@XZ_5.2+0x2b8>
    6564:	ldr	w27, [x29, #96]
    6568:	ldr	x8, [x19, #24]
    656c:	ldr	x0, [x19]
    6570:	ldr	x28, [x21]
    6574:	mov	x5, x22
    6578:	mov	x6, x21
    657c:	mov	x7, x20
    6580:	mov	x24, x3
    6584:	mov	x23, x2
    6588:	str	w27, [sp]
    658c:	blr	x8
    6590:	mov	x25, x19
    6594:	ldr	x9, [x21]
    6598:	ldr	x10, [x24]
    659c:	ldr	x8, [x25, #88]!
    65a0:	mov	x11, #0xfffffffffffffbbc    	// #-1092
    65a4:	movk	x11, #0x7fff, lsl #48
    65a8:	sub	x9, x9, x28
    65ac:	sub	x11, x11, x8
    65b0:	cmp	x11, x9
    65b4:	b.cc	6520 <lzma_block_uncomp_encode@@XZ_5.2+0x194>  // b.lo, b.ul, b.last
    65b8:	sub	x3, x10, x26
    65bc:	ldr	x10, [x19, #96]
    65c0:	add	x8, x8, x9
    65c4:	ldr	x9, [x19, #72]
    65c8:	str	x8, [x19, #88]
    65cc:	add	x8, x10, x3
    65d0:	str	x8, [x19, #96]
    65d4:	ldr	w1, [x9, #8]
    65d8:	mov	w24, w0
    65dc:	add	x0, x19, #0x70
    65e0:	add	x2, x23, x26
    65e4:	bl	c580 <lzma_check_size@@XZ_5.0+0x4c>
    65e8:	cmp	w27, #0x1
    65ec:	b.eq	66c4 <lzma_block_uncomp_encode@@XZ_5.2+0x338>  // b.none
    65f0:	cmp	w24, #0x1
    65f4:	b.ne	66c4 <lzma_block_uncomp_encode@@XZ_5.2+0x338>  // b.any
    65f8:	ldr	x8, [x19, #72]
    65fc:	ldur	q0, [x19, #88]
    6600:	mov	w9, #0x1                   	// #1
    6604:	str	q0, [x8, #16]
    6608:	str	w9, [x19, #80]
    660c:	fmov	x9, d0
    6610:	tst	x9, #0x3
    6614:	b.eq	6644 <lzma_block_uncomp_encode@@XZ_5.2+0x2b8>  // b.none
    6618:	ldr	x8, [x21]
    661c:	add	x9, x9, #0x1
    6620:	cmp	x8, x20
    6624:	b.cs	669c <lzma_block_uncomp_encode@@XZ_5.2+0x310>  // b.hs, b.nlast
    6628:	strb	wzr, [x22, x8]
    662c:	add	x8, x8, #0x1
    6630:	tst	x9, #0x3
    6634:	str	x8, [x21]
    6638:	str	x9, [x25]
    663c:	add	x9, x9, #0x1
    6640:	b.ne	6620 <lzma_block_uncomp_encode@@XZ_5.2+0x294>  // b.any
    6644:	ldr	x8, [x19, #72]
    6648:	ldr	w1, [x8, #8]
    664c:	cbz	w1, 66c0 <lzma_block_uncomp_encode@@XZ_5.2+0x334>
    6650:	add	x0, x19, #0x70
    6654:	bl	c608 <lzma_check_size@@XZ_5.0+0xd4>
    6658:	mov	w8, #0x2                   	// #2
    665c:	str	w8, [x19, #80]
    6660:	ldr	x8, [x19, #72]
    6664:	ldr	w0, [x8, #8]
    6668:	bl	3200 <lzma_check_size@plt>
    666c:	mov	w23, w0
    6670:	add	x24, x19, #0x70
    6674:	add	x1, x19, #0x68
    6678:	mov	x0, x24
    667c:	mov	x2, x23
    6680:	mov	x3, x22
    6684:	mov	x4, x21
    6688:	mov	x5, x20
    668c:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
    6690:	ldr	x8, [x19, #104]
    6694:	cmp	x8, x23
    6698:	b.cs	66ac <lzma_block_uncomp_encode@@XZ_5.2+0x320>  // b.hs, b.nlast
    669c:	mov	w24, wzr
    66a0:	b	66c4 <lzma_block_uncomp_encode@@XZ_5.2+0x338>
    66a4:	mov	w24, #0xb                   	// #11
    66a8:	b	66c4 <lzma_block_uncomp_encode@@XZ_5.2+0x338>
    66ac:	ldr	x8, [x19, #72]
    66b0:	mov	x1, x24
    66b4:	mov	x2, x23
    66b8:	add	x0, x8, #0x28
    66bc:	bl	3040 <memcpy@plt>
    66c0:	mov	w24, #0x1                   	// #1
    66c4:	mov	w0, w24
    66c8:	ldp	x20, x19, [sp, #96]
    66cc:	ldp	x22, x21, [sp, #80]
    66d0:	ldp	x24, x23, [sp, #64]
    66d4:	ldp	x26, x25, [sp, #48]
    66d8:	ldp	x28, x27, [sp, #32]
    66dc:	ldp	x29, x30, [sp, #16]
    66e0:	add	sp, sp, #0x70
    66e4:	ret
    66e8:	stp	x29, x30, [sp, #-32]!
    66ec:	stp	x20, x19, [sp, #16]
    66f0:	mov	x29, sp
    66f4:	mov	x19, x1
    66f8:	mov	x20, x0
    66fc:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    6700:	mov	x0, x20
    6704:	mov	x1, x19
    6708:	ldp	x20, x19, [sp, #16]
    670c:	ldp	x29, x30, [sp], #32
    6710:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
    6714:	ldr	w8, [x0, #80]
    6718:	cbz	w8, 6724 <lzma_block_uncomp_encode@@XZ_5.2+0x398>
    671c:	mov	w0, #0xb                   	// #11
    6720:	ret
    6724:	mov	x2, x3
    6728:	b	38d8 <lzma_version_string@@XZ_5.0+0x27c>

000000000000672c <lzma_block_encoder@@XZ_5.0>:
    672c:	stp	x29, x30, [sp, #-48]!
    6730:	str	x21, [sp, #16]
    6734:	stp	x20, x19, [sp, #32]
    6738:	mov	x29, sp
    673c:	mov	x21, x1
    6740:	mov	x19, x0
    6744:	bl	3914 <lzma_version_string@@XZ_5.0+0x2b8>
    6748:	mov	w20, w0
    674c:	cbnz	w0, 6780 <lzma_block_encoder@@XZ_5.0+0x54>
    6750:	ldp	x1, x0, [x19, #48]
    6754:	mov	x2, x21
    6758:	bl	63ac <lzma_block_uncomp_encode@@XZ_5.2+0x20>
    675c:	mov	w20, w0
    6760:	cbz	w0, 6770 <lzma_block_encoder@@XZ_5.0+0x44>
    6764:	mov	x0, x19
    6768:	bl	32c0 <lzma_end@plt>
    676c:	b	6780 <lzma_block_encoder@@XZ_5.0+0x54>
    6770:	ldr	x8, [x19, #56]
    6774:	mov	w9, #0x1                   	// #1
    6778:	strb	w9, [x8, #88]
    677c:	strb	w9, [x8, #91]
    6780:	mov	w0, w20
    6784:	ldp	x20, x19, [sp, #32]
    6788:	ldr	x21, [sp, #16]
    678c:	ldp	x29, x30, [sp], #48
    6790:	ret

0000000000006794 <lzma_block_header_size@@XZ_5.0>:
    6794:	sub	sp, sp, #0x40
    6798:	stp	x29, x30, [sp, #16]
    679c:	stp	x22, x21, [sp, #32]
    67a0:	stp	x20, x19, [sp, #48]
    67a4:	ldr	w8, [x0]
    67a8:	add	x29, sp, #0x10
    67ac:	cmp	w8, #0x1
    67b0:	b.ls	67bc <lzma_block_header_size@@XZ_5.0+0x28>  // b.plast
    67b4:	mov	w0, #0x8                   	// #8
    67b8:	b	6888 <lzma_block_header_size@@XZ_5.0+0xf4>
    67bc:	ldr	x20, [x0, #16]
    67c0:	mov	x19, x0
    67c4:	cmn	x20, #0x1
    67c8:	b.eq	6800 <lzma_block_header_size@@XZ_5.0+0x6c>  // b.none
    67cc:	mov	x0, x20
    67d0:	bl	3400 <lzma_vli_size@plt>
    67d4:	mov	w8, w0
    67d8:	mov	w0, #0xb                   	// #11
    67dc:	cbz	x20, 6888 <lzma_block_header_size@@XZ_5.0+0xf4>
    67e0:	cbz	w8, 6888 <lzma_block_header_size@@XZ_5.0+0xf4>
    67e4:	add	w20, w8, #0x6
    67e8:	ldr	x0, [x19, #24]
    67ec:	cmn	x0, #0x1
    67f0:	b.ne	6810 <lzma_block_header_size@@XZ_5.0+0x7c>  // b.any
    67f4:	ldr	x8, [x19, #32]
    67f8:	cbnz	x8, 6824 <lzma_block_header_size@@XZ_5.0+0x90>
    67fc:	b	6884 <lzma_block_header_size@@XZ_5.0+0xf0>
    6800:	mov	w20, #0x6                   	// #6
    6804:	ldr	x0, [x19, #24]
    6808:	cmn	x0, #0x1
    680c:	b.eq	67f4 <lzma_block_header_size@@XZ_5.0+0x60>  // b.none
    6810:	bl	3400 <lzma_vli_size@plt>
    6814:	cbz	w0, 6884 <lzma_block_header_size@@XZ_5.0+0xf0>
    6818:	add	w20, w0, w20
    681c:	ldr	x8, [x19, #32]
    6820:	cbz	x8, 6884 <lzma_block_header_size@@XZ_5.0+0xf0>
    6824:	ldr	x9, [x8]
    6828:	cmn	x9, #0x1
    682c:	b.eq	6884 <lzma_block_header_size@@XZ_5.0+0xf0>  // b.none
    6830:	mov	w21, #0x10                  	// #16
    6834:	add	x22, x21, #0x10
    6838:	cmp	x22, #0x60
    683c:	b.eq	6884 <lzma_block_header_size@@XZ_5.0+0xf0>  // b.none
    6840:	add	x8, x8, x21
    6844:	sub	x1, x8, #0x10
    6848:	sub	x0, x29, #0x4
    684c:	bl	3090 <lzma_filter_flags_size@plt>
    6850:	cbnz	w0, 6888 <lzma_block_header_size@@XZ_5.0+0xf4>
    6854:	ldr	x8, [x19, #32]
    6858:	ldur	w10, [x29, #-4]
    685c:	ldr	x9, [x8, x21]
    6860:	add	w20, w10, w20
    6864:	mov	x21, x22
    6868:	cmn	x9, #0x1
    686c:	b.ne	6834 <lzma_block_header_size@@XZ_5.0+0xa0>  // b.any
    6870:	add	w8, w20, #0x3
    6874:	mov	w0, wzr
    6878:	and	w8, w8, #0xfffffffc
    687c:	str	w8, [x19, #4]
    6880:	b	6888 <lzma_block_header_size@@XZ_5.0+0xf4>
    6884:	mov	w0, #0xb                   	// #11
    6888:	ldp	x20, x19, [sp, #48]
    688c:	ldp	x22, x21, [sp, #32]
    6890:	ldp	x29, x30, [sp, #16]
    6894:	add	sp, sp, #0x40
    6898:	ret

000000000000689c <lzma_block_header_encode@@XZ_5.0>:
    689c:	stp	x29, x30, [sp, #-64]!
    68a0:	str	x23, [sp, #16]
    68a4:	stp	x22, x21, [sp, #32]
    68a8:	stp	x20, x19, [sp, #48]
    68ac:	mov	x29, sp
    68b0:	mov	x19, x1
    68b4:	mov	x21, x0
    68b8:	bl	3130 <lzma_block_unpadded_size@plt>
    68bc:	cbz	x0, 69e0 <lzma_block_header_encode@@XZ_5.0+0x144>
    68c0:	ldr	x8, [x21, #24]
    68c4:	cmn	x8, #0x1
    68c8:	b.lt	69e0 <lzma_block_header_encode@@XZ_5.0+0x144>  // b.tstop
    68cc:	ldr	w8, [x21, #4]
    68d0:	mov	w9, #0x2                   	// #2
    68d4:	strb	wzr, [x19, #1]
    68d8:	sub	w20, w8, #0x4
    68dc:	lsr	w8, w20, #2
    68e0:	strb	w8, [x19]
    68e4:	str	x9, [x29, #24]
    68e8:	ldr	x0, [x21, #16]
    68ec:	cmn	x0, #0x1
    68f0:	b.eq	6918 <lzma_block_header_encode@@XZ_5.0+0x7c>  // b.none
    68f4:	add	x3, x29, #0x18
    68f8:	mov	x1, xzr
    68fc:	mov	x2, x19
    6900:	mov	x4, x20
    6904:	bl	33d0 <lzma_vli_encode@plt>
    6908:	cbnz	w0, 69e4 <lzma_block_header_encode@@XZ_5.0+0x148>
    690c:	ldrb	w8, [x19, #1]
    6910:	orr	w8, w8, #0x40
    6914:	strb	w8, [x19, #1]
    6918:	ldr	x0, [x21, #24]
    691c:	cmn	x0, #0x1
    6920:	b.eq	6948 <lzma_block_header_encode@@XZ_5.0+0xac>  // b.none
    6924:	add	x3, x29, #0x18
    6928:	mov	x1, xzr
    692c:	mov	x2, x19
    6930:	mov	x4, x20
    6934:	bl	33d0 <lzma_vli_encode@plt>
    6938:	cbnz	w0, 69e4 <lzma_block_header_encode@@XZ_5.0+0x148>
    693c:	ldrb	w8, [x19, #1]
    6940:	orr	w8, w8, #0x80
    6944:	strb	w8, [x19, #1]
    6948:	ldr	x8, [x21, #32]
    694c:	cbz	x8, 69e0 <lzma_block_header_encode@@XZ_5.0+0x144>
    6950:	ldr	x9, [x8]
    6954:	cmn	x9, #0x1
    6958:	b.eq	69e0 <lzma_block_header_encode@@XZ_5.0+0x144>  // b.none
    695c:	mov	x23, xzr
    6960:	mov	x22, #0xffffffffffffffff    	// #-1
    6964:	cmp	x22, #0x3
    6968:	b.eq	69e0 <lzma_block_header_encode@@XZ_5.0+0x144>  // b.none
    696c:	add	x0, x8, x23
    6970:	add	x2, x29, #0x18
    6974:	mov	x1, x19
    6978:	mov	x3, x20
    697c:	bl	32e0 <lzma_filter_flags_encode@plt>
    6980:	cbnz	w0, 69e4 <lzma_block_header_encode@@XZ_5.0+0x148>
    6984:	ldr	x8, [x21, #32]
    6988:	add	x22, x22, #0x1
    698c:	add	x9, x8, x23
    6990:	ldr	x9, [x9, #16]
    6994:	add	x23, x23, #0x10
    6998:	cmn	x9, #0x1
    699c:	b.ne	6964 <lzma_block_header_encode@@XZ_5.0+0xc8>  // b.any
    69a0:	ldrb	w8, [x19, #1]
    69a4:	mov	w1, wzr
    69a8:	orr	w8, w8, w22
    69ac:	strb	w8, [x19, #1]
    69b0:	ldr	x8, [x29, #24]
    69b4:	add	x0, x19, x8
    69b8:	sub	x2, x20, x8
    69bc:	bl	31c0 <memset@plt>
    69c0:	mov	x0, x19
    69c4:	mov	x1, x20
    69c8:	mov	w2, wzr
    69cc:	bl	3160 <lzma_crc32@plt>
    69d0:	mov	w8, w0
    69d4:	mov	w0, wzr
    69d8:	str	w8, [x19, x20]
    69dc:	b	69e4 <lzma_block_header_encode@@XZ_5.0+0x148>
    69e0:	mov	w0, #0xb                   	// #11
    69e4:	ldp	x20, x19, [sp, #48]
    69e8:	ldp	x22, x21, [sp, #32]
    69ec:	ldr	x23, [sp, #16]
    69f0:	ldp	x29, x30, [sp], #64
    69f4:	ret

00000000000069f8 <lzma_easy_buffer_encode@@XZ_5.0>:
    69f8:	sub	sp, sp, #0x110
    69fc:	stp	x28, x25, [sp, #208]
    6a00:	mov	w25, w1
    6a04:	mov	w1, w0
    6a08:	mov	x0, sp
    6a0c:	stp	x29, x30, [sp, #192]
    6a10:	stp	x24, x23, [sp, #224]
    6a14:	stp	x22, x21, [sp, #240]
    6a18:	stp	x20, x19, [sp, #256]
    6a1c:	add	x29, sp, #0xc0
    6a20:	mov	x19, x7
    6a24:	mov	x20, x6
    6a28:	mov	x21, x5
    6a2c:	mov	x22, x4
    6a30:	mov	x23, x3
    6a34:	mov	x24, x2
    6a38:	bl	40fc <lzma_block_total_size@@XZ_5.0+0xb8>
    6a3c:	tbz	w0, #0, 6a48 <lzma_easy_buffer_encode@@XZ_5.0+0x50>
    6a40:	mov	w0, #0x8                   	// #8
    6a44:	b	6a6c <lzma_easy_buffer_encode@@XZ_5.0+0x74>
    6a48:	mov	x0, sp
    6a4c:	mov	w1, w25
    6a50:	mov	x2, x24
    6a54:	mov	x3, x23
    6a58:	mov	x4, x22
    6a5c:	mov	x5, x21
    6a60:	mov	x6, x20
    6a64:	mov	x7, x19
    6a68:	bl	3180 <lzma_stream_buffer_encode@plt>
    6a6c:	ldp	x20, x19, [sp, #256]
    6a70:	ldp	x22, x21, [sp, #240]
    6a74:	ldp	x24, x23, [sp, #224]
    6a78:	ldp	x28, x25, [sp, #208]
    6a7c:	ldp	x29, x30, [sp, #192]
    6a80:	add	sp, sp, #0x110
    6a84:	ret

0000000000006a88 <lzma_easy_encoder@@XZ_5.0>:
    6a88:	sub	sp, sp, #0xe0
    6a8c:	stp	x20, x19, [sp, #208]
    6a90:	mov	x20, x0
    6a94:	mov	x0, sp
    6a98:	stp	x29, x30, [sp, #192]
    6a9c:	add	x29, sp, #0xc0
    6aa0:	mov	w19, w2
    6aa4:	bl	40fc <lzma_block_total_size@@XZ_5.0+0xb8>
    6aa8:	tbz	w0, #0, 6ac0 <lzma_easy_encoder@@XZ_5.0+0x38>
    6aac:	mov	w0, #0x8                   	// #8
    6ab0:	ldp	x20, x19, [sp, #208]
    6ab4:	ldp	x29, x30, [sp, #192]
    6ab8:	add	sp, sp, #0xe0
    6abc:	ret
    6ac0:	mov	x1, sp
    6ac4:	mov	x0, x20
    6ac8:	mov	w2, w19
    6acc:	bl	3420 <lzma_stream_encoder@plt>
    6ad0:	ldp	x20, x19, [sp, #208]
    6ad4:	ldp	x29, x30, [sp, #192]
    6ad8:	add	sp, sp, #0xe0
    6adc:	ret

0000000000006ae0 <lzma_easy_encoder_memusage@@XZ_5.0>:
    6ae0:	sub	sp, sp, #0xd0
    6ae4:	mov	w1, w0
    6ae8:	mov	x0, sp
    6aec:	stp	x29, x30, [sp, #192]
    6af0:	add	x29, sp, #0xc0
    6af4:	bl	40fc <lzma_block_total_size@@XZ_5.0+0xb8>
    6af8:	tbz	w0, #0, 6b0c <lzma_easy_encoder_memusage@@XZ_5.0+0x2c>
    6afc:	mov	w0, #0xffffffff            	// #-1
    6b00:	ldp	x29, x30, [sp, #192]
    6b04:	add	sp, sp, #0xd0
    6b08:	ret
    6b0c:	mov	x0, sp
    6b10:	bl	31b0 <lzma_raw_encoder_memusage@plt>
    6b14:	ldp	x29, x30, [sp, #192]
    6b18:	add	sp, sp, #0xd0
    6b1c:	ret

0000000000006b20 <lzma_raw_buffer_encode@@XZ_5.0>:
    6b20:	sub	sp, sp, #0xb0
    6b24:	cmp	x2, #0x0
    6b28:	cset	w8, eq  // eq = none
    6b2c:	cmp	x3, #0x0
    6b30:	cset	w9, ne  // ne = any
    6b34:	stp	x26, x25, [sp, #112]
    6b38:	stp	x24, x23, [sp, #128]
    6b3c:	mov	x24, x2
    6b40:	and	w8, w8, w9
    6b44:	mov	w25, #0xb                   	// #11
    6b48:	stp	x29, x30, [sp, #96]
    6b4c:	stp	x22, x21, [sp, #144]
    6b50:	stp	x20, x19, [sp, #160]
    6b54:	add	x29, sp, #0x60
    6b58:	tbnz	w8, #0, 6c1c <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6b5c:	mov	x22, x4
    6b60:	cbz	x4, 6c1c <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6b64:	mov	x19, x5
    6b68:	cbz	x5, 6c1c <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6b6c:	ldr	x8, [x19]
    6b70:	mov	x21, x6
    6b74:	cmp	x8, x6
    6b78:	b.ls	6b84 <lzma_raw_buffer_encode@@XZ_5.0+0x64>  // b.plast
    6b7c:	mov	w25, #0xb                   	// #11
    6b80:	b	6c1c <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6b84:	mov	x2, x0
    6b88:	movi	v0.2d, #0x0
    6b8c:	mov	x8, #0xffffffffffffffff    	// #-1
    6b90:	add	x0, sp, #0x10
    6b94:	mov	x23, x3
    6b98:	mov	x20, x1
    6b9c:	str	xzr, [sp, #80]
    6ba0:	stp	q0, q0, [sp, #48]
    6ba4:	stp	q0, q0, [sp, #16]
    6ba8:	str	x8, [sp, #24]
    6bac:	bl	6dec <lzma_raw_encoder_memusage@@XZ_5.0+0x14>
    6bb0:	mov	w25, w0
    6bb4:	cbnz	w0, 6c1c <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6bb8:	ldr	x8, [sp, #40]
    6bbc:	ldr	x0, [sp, #16]
    6bc0:	ldr	x26, [x19]
    6bc4:	mov	w9, #0x3                   	// #3
    6bc8:	add	x3, sp, #0x8
    6bcc:	mov	x1, x20
    6bd0:	mov	x2, x24
    6bd4:	mov	x4, x23
    6bd8:	mov	x5, x22
    6bdc:	mov	x6, x19
    6be0:	mov	x7, x21
    6be4:	str	xzr, [sp, #8]
    6be8:	str	w9, [sp]
    6bec:	blr	x8
    6bf0:	mov	w25, w0
    6bf4:	add	x0, sp, #0x10
    6bf8:	mov	x1, x20
    6bfc:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    6c00:	cmp	w25, #0x1
    6c04:	b.eq	6c18 <lzma_raw_buffer_encode@@XZ_5.0+0xf8>  // b.none
    6c08:	cbnz	w25, 6c10 <lzma_raw_buffer_encode@@XZ_5.0+0xf0>
    6c0c:	mov	w25, #0xa                   	// #10
    6c10:	str	x26, [x19]
    6c14:	b	6c1c <lzma_raw_buffer_encode@@XZ_5.0+0xfc>
    6c18:	mov	w25, wzr
    6c1c:	mov	w0, w25
    6c20:	ldp	x20, x19, [sp, #160]
    6c24:	ldp	x22, x21, [sp, #144]
    6c28:	ldp	x24, x23, [sp, #128]
    6c2c:	ldp	x26, x25, [sp, #112]
    6c30:	ldp	x29, x30, [sp, #96]
    6c34:	add	sp, sp, #0xb0
    6c38:	ret

0000000000006c3c <lzma_filter_encoder_is_supported@@XZ_5.0>:
    6c3c:	sub	x8, x0, #0x3
    6c40:	cmp	x8, #0x7
    6c44:	b.cs	6c50 <lzma_filter_encoder_is_supported@@XZ_5.0+0x14>  // b.hs, b.nlast
    6c48:	mov	w0, #0x1                   	// #1
    6c4c:	ret
    6c50:	mov	x8, #0x1                   	// #1
    6c54:	movk	x8, #0x4000, lsl #48
    6c58:	cmp	x0, x8
    6c5c:	b.eq	6c48 <lzma_filter_encoder_is_supported@@XZ_5.0+0xc>  // b.none
    6c60:	cmp	x0, #0x21
    6c64:	b.eq	6c48 <lzma_filter_encoder_is_supported@@XZ_5.0+0xc>  // b.none
    6c68:	mov	w0, wzr
    6c6c:	ret
    6c70:	sub	x9, x0, #0x3
    6c74:	mov	x8, x0
    6c78:	cmp	x9, #0x1e
    6c7c:	mov	x0, xzr
    6c80:	b.hi	6ca4 <lzma_filter_encoder_is_supported@@XZ_5.0+0x68>  // b.pmore
    6c84:	adrp	x8, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    6c88:	add	x8, x8, #0x380
    6c8c:	adr	x10, 6c9c <lzma_filter_encoder_is_supported@@XZ_5.0+0x60>
    6c90:	ldrb	w11, [x8, x9]
    6c94:	add	x10, x10, x11, lsl #2
    6c98:	br	x10
    6c9c:	mov	w8, #0x8                   	// #8
    6ca0:	b	6cf0 <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6ca4:	mov	x9, #0x1                   	// #1
    6ca8:	movk	x9, #0x4000, lsl #48
    6cac:	cmp	x8, x9
    6cb0:	mov	x8, xzr
    6cb4:	b.eq	6cf0 <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>  // b.none
    6cb8:	ret
    6cbc:	mov	w8, #0x2                   	// #2
    6cc0:	b	6cf0 <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6cc4:	mov	w8, #0x3                   	// #3
    6cc8:	b	6cf0 <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6ccc:	mov	w8, #0x4                   	// #4
    6cd0:	b	6cf0 <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6cd4:	mov	w8, #0x5                   	// #5
    6cd8:	b	6cf0 <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6cdc:	mov	w8, #0x6                   	// #6
    6ce0:	b	6cf0 <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6ce4:	mov	w8, #0x7                   	// #7
    6ce8:	b	6cf0 <lzma_filter_encoder_is_supported@@XZ_5.0+0xb4>
    6cec:	mov	w8, #0x1                   	// #1
    6cf0:	adrp	x10, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    6cf4:	mov	w9, #0x38                  	// #56
    6cf8:	add	x10, x10, #0xa00
    6cfc:	madd	x0, x8, x9, x10
    6d00:	ret

0000000000006d04 <lzma_filters_update@@XZ_5.0>:
    6d04:	sub	sp, sp, #0x70
    6d08:	stp	x29, x30, [sp, #80]
    6d0c:	stp	x20, x19, [sp, #96]
    6d10:	ldr	x8, [x0, #56]
    6d14:	add	x29, sp, #0x50
    6d18:	ldr	x8, [x8, #64]
    6d1c:	cbz	x8, 6db0 <lzma_filters_update@@XZ_5.0+0xac>
    6d20:	mov	x20, x0
    6d24:	adrp	x0, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x120>
    6d28:	add	x0, x0, #0xc70
    6d2c:	mov	x19, x1
    6d30:	bl	44a4 <lzma_filters_copy@@XZ_5.0+0x354>
    6d34:	cmn	x0, #0x1
    6d38:	b.eq	6dc4 <lzma_filters_update@@XZ_5.0+0xc0>  // b.none
    6d3c:	mov	x9, xzr
    6d40:	mov	x8, xzr
    6d44:	add	x10, x19, x8
    6d48:	ldr	x10, [x10, #16]
    6d4c:	add	x8, x8, #0x10
    6d50:	add	x9, x9, #0x1
    6d54:	cmn	x10, #0x1
    6d58:	b.ne	6d44 <lzma_filters_update@@XZ_5.0+0x40>  // b.any
    6d5c:	mov	x10, sp
    6d60:	cbz	x9, 6d80 <lzma_filters_update@@XZ_5.0+0x7c>
    6d64:	add	x11, x10, x8
    6d68:	sub	x11, x11, #0x10
    6d6c:	mov	x12, x19
    6d70:	ldr	q0, [x12], #16
    6d74:	sub	x9, x9, #0x1
    6d78:	str	q0, [x11], #-16
    6d7c:	cbnz	x9, 6d70 <lzma_filters_update@@XZ_5.0+0x6c>
    6d80:	mov	x9, #0xffffffffffffffff    	// #-1
    6d84:	str	x9, [x10, x8]
    6d88:	ldp	x1, x8, [x20, #48]
    6d8c:	mov	x3, sp
    6d90:	mov	x2, x19
    6d94:	ldr	x9, [x8, #64]
    6d98:	ldr	x0, [x8]
    6d9c:	blr	x9
    6da0:	ldp	x20, x19, [sp, #96]
    6da4:	ldp	x29, x30, [sp, #80]
    6da8:	add	sp, sp, #0x70
    6dac:	ret
    6db0:	mov	w0, #0xb                   	// #11
    6db4:	ldp	x20, x19, [sp, #96]
    6db8:	ldp	x29, x30, [sp, #80]
    6dbc:	add	sp, sp, #0x70
    6dc0:	ret
    6dc4:	mov	w0, #0x8                   	// #8
    6dc8:	ldp	x20, x19, [sp, #96]
    6dcc:	ldp	x29, x30, [sp, #80]
    6dd0:	add	sp, sp, #0x70
    6dd4:	ret

0000000000006dd8 <lzma_raw_encoder_memusage@@XZ_5.0>:
    6dd8:	adrp	x8, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x120>
    6ddc:	add	x8, x8, #0xc70
    6de0:	mov	x1, x0
    6de4:	mov	x0, x8
    6de8:	b	44a4 <lzma_filters_copy@@XZ_5.0+0x354>
    6dec:	adrp	x3, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x120>
    6df0:	add	x3, x3, #0xc70
    6df4:	mov	w4, #0x1                   	// #1
    6df8:	b	42c8 <lzma_filters_copy@@XZ_5.0+0x178>

0000000000006dfc <lzma_raw_encoder@@XZ_5.0>:
    6dfc:	stp	x29, x30, [sp, #-48]!
    6e00:	stp	x22, x21, [sp, #16]
    6e04:	stp	x20, x19, [sp, #32]
    6e08:	mov	x29, sp
    6e0c:	mov	x21, x1
    6e10:	mov	x19, x0
    6e14:	bl	3914 <lzma_version_string@@XZ_5.0+0x2b8>
    6e18:	mov	w20, w0
    6e1c:	cbnz	w0, 6e60 <lzma_raw_encoder@@XZ_5.0+0x64>
    6e20:	ldp	x1, x0, [x19, #48]
    6e24:	adrp	x3, 6000 <lzma_block_buffer_encode@@XZ_5.0+0x120>
    6e28:	add	x3, x3, #0xc70
    6e2c:	mov	w4, #0x1                   	// #1
    6e30:	mov	x2, x21
    6e34:	mov	w22, #0x1                   	// #1
    6e38:	bl	42c8 <lzma_filters_copy@@XZ_5.0+0x178>
    6e3c:	mov	w20, w0
    6e40:	cbz	w0, 6e50 <lzma_raw_encoder@@XZ_5.0+0x54>
    6e44:	mov	x0, x19
    6e48:	bl	32c0 <lzma_end@plt>
    6e4c:	b	6e60 <lzma_raw_encoder@@XZ_5.0+0x64>
    6e50:	ldr	x8, [x19, #56]
    6e54:	mov	w9, #0x101                 	// #257
    6e58:	strh	w9, [x8, #88]
    6e5c:	strb	w22, [x8, #91]
    6e60:	mov	w0, w20
    6e64:	ldp	x20, x19, [sp, #32]
    6e68:	ldp	x22, x21, [sp, #16]
    6e6c:	ldp	x29, x30, [sp], #48
    6e70:	ret
    6e74:	stp	x29, x30, [sp, #-64]!
    6e78:	stp	x24, x23, [sp, #16]
    6e7c:	stp	x22, x21, [sp, #32]
    6e80:	mov	x21, #0x1                   	// #1
    6e84:	adrp	x23, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    6e88:	adrp	x24, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    6e8c:	stp	x20, x19, [sp, #48]
    6e90:	mov	x19, xzr
    6e94:	add	x20, x0, #0x8
    6e98:	movk	x21, #0x4000, lsl #48
    6e9c:	mov	w22, #0x38                  	// #56
    6ea0:	add	x23, x23, #0xa00
    6ea4:	add	x24, x24, #0x39f
    6ea8:	mov	x29, sp
    6eac:	b	6eb4 <lzma_raw_encoder@@XZ_5.0+0xb8>
    6eb0:	add	x20, x20, #0x10
    6eb4:	ldur	x9, [x20, #-8]
    6eb8:	mov	x8, xzr
    6ebc:	add	x10, x9, #0x1
    6ec0:	cmp	x10, #0x22
    6ec4:	b.hi	6ee0 <lzma_raw_encoder@@XZ_5.0+0xe4>  // b.pmore
    6ec8:	adr	x9, 6ed8 <lzma_raw_encoder@@XZ_5.0+0xdc>
    6ecc:	ldrb	w11, [x24, x10]
    6ed0:	add	x9, x9, x11, lsl #2
    6ed4:	br	x9
    6ed8:	mov	w9, #0x8                   	// #8
    6edc:	b	6f24 <lzma_raw_encoder@@XZ_5.0+0x128>
    6ee0:	cmp	x9, x21
    6ee4:	mov	x9, xzr
    6ee8:	b.eq	6f24 <lzma_raw_encoder@@XZ_5.0+0x128>  // b.none
    6eec:	b	6f28 <lzma_raw_encoder@@XZ_5.0+0x12c>
    6ef0:	mov	w9, #0x2                   	// #2
    6ef4:	b	6f24 <lzma_raw_encoder@@XZ_5.0+0x128>
    6ef8:	mov	w9, #0x3                   	// #3
    6efc:	b	6f24 <lzma_raw_encoder@@XZ_5.0+0x128>
    6f00:	mov	w9, #0x4                   	// #4
    6f04:	b	6f24 <lzma_raw_encoder@@XZ_5.0+0x128>
    6f08:	mov	w9, #0x5                   	// #5
    6f0c:	b	6f24 <lzma_raw_encoder@@XZ_5.0+0x128>
    6f10:	mov	w9, #0x6                   	// #6
    6f14:	b	6f24 <lzma_raw_encoder@@XZ_5.0+0x128>
    6f18:	mov	w9, #0x7                   	// #7
    6f1c:	b	6f24 <lzma_raw_encoder@@XZ_5.0+0x128>
    6f20:	mov	w9, #0x1                   	// #1
    6f24:	madd	x8, x9, x22, x23
    6f28:	ldr	x8, [x8, #24]
    6f2c:	cbz	x8, 6eb0 <lzma_raw_encoder@@XZ_5.0+0xb4>
    6f30:	ldr	x0, [x20]
    6f34:	blr	x8
    6f38:	cmp	x0, x19
    6f3c:	csel	x19, x0, x19, hi  // hi = pmore
    6f40:	cbnz	x0, 6eb0 <lzma_raw_encoder@@XZ_5.0+0xb4>
    6f44:	mov	x19, xzr
    6f48:	mov	x0, x19
    6f4c:	ldp	x20, x19, [sp, #48]
    6f50:	ldp	x22, x21, [sp, #32]
    6f54:	ldp	x24, x23, [sp, #16]
    6f58:	ldp	x29, x30, [sp], #64
    6f5c:	ret

0000000000006f60 <lzma_properties_size@@XZ_5.0>:
    6f60:	ldr	x9, [x1]
    6f64:	sub	x8, x9, #0x3
    6f68:	cmp	x8, #0x1e
    6f6c:	b.hi	6f94 <lzma_properties_size@@XZ_5.0+0x34>  // b.pmore
    6f70:	adrp	x10, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    6f74:	add	x10, x10, #0x3c2
    6f78:	adr	x11, 6f8c <lzma_properties_size@@XZ_5.0+0x2c>
    6f7c:	ldrb	w12, [x10, x8]
    6f80:	add	x11, x11, x12, lsl #2
    6f84:	mov	w8, #0x2                   	// #2
    6f88:	br	x11
    6f8c:	mov	w9, #0x8                   	// #8
    6f90:	b	7004 <lzma_properties_size@@XZ_5.0+0xa4>
    6f94:	mov	x8, #0x1                   	// #1
    6f98:	movk	x8, #0x4000, lsl #48
    6f9c:	cmp	x9, x8
    6fa0:	b.ne	6fac <lzma_properties_size@@XZ_5.0+0x4c>  // b.any
    6fa4:	mov	x9, xzr
    6fa8:	b	7004 <lzma_properties_size@@XZ_5.0+0xa4>
    6fac:	cmp	x9, #0x0
    6fb0:	mov	w8, #0xb                   	// #11
    6fb4:	mov	w9, #0x8                   	// #8
    6fb8:	csel	w0, w9, w8, ge  // ge = tcont
    6fbc:	ret
    6fc0:	mov	w8, #0x3                   	// #3
    6fc4:	b	6fe4 <lzma_properties_size@@XZ_5.0+0x84>
    6fc8:	mov	w8, #0x4                   	// #4
    6fcc:	b	6fe4 <lzma_properties_size@@XZ_5.0+0x84>
    6fd0:	mov	w8, #0x5                   	// #5
    6fd4:	b	6fe4 <lzma_properties_size@@XZ_5.0+0x84>
    6fd8:	mov	w8, #0x6                   	// #6
    6fdc:	b	6fe4 <lzma_properties_size@@XZ_5.0+0x84>
    6fe0:	mov	w8, #0x7                   	// #7
    6fe4:	adrp	x10, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    6fe8:	mov	w9, #0x38                  	// #56
    6fec:	add	x10, x10, #0xa00
    6ff0:	madd	x8, x8, x9, x10
    6ff4:	ldr	x2, [x8, #32]
    6ff8:	ldr	x1, [x1, #8]
    6ffc:	br	x2
    7000:	mov	w9, #0x1                   	// #1
    7004:	adrp	x11, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    7008:	mov	w10, #0x38                  	// #56
    700c:	add	x11, x11, #0xa00
    7010:	madd	x9, x9, x10, x11
    7014:	ldr	w9, [x9, #40]
    7018:	str	w9, [x0]
    701c:	mov	w0, wzr
    7020:	ret

0000000000007024 <lzma_properties_encode@@XZ_5.0>:
    7024:	ldr	x8, [x0]
    7028:	sub	x9, x8, #0x3
    702c:	cmp	x9, #0x1e
    7030:	b.hi	7054 <lzma_properties_encode@@XZ_5.0+0x30>  // b.pmore
    7034:	adrp	x8, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    7038:	add	x8, x8, #0x3e1
    703c:	adr	x10, 704c <lzma_properties_encode@@XZ_5.0+0x28>
    7040:	ldrb	w11, [x8, x9]
    7044:	add	x10, x10, x11, lsl #2
    7048:	br	x10
    704c:	mov	w8, #0x8                   	// #8
    7050:	b	70a8 <lzma_properties_encode@@XZ_5.0+0x84>
    7054:	mov	x9, #0x1                   	// #1
    7058:	movk	x9, #0x4000, lsl #48
    705c:	cmp	x8, x9
    7060:	b.ne	706c <lzma_properties_encode@@XZ_5.0+0x48>  // b.any
    7064:	mov	x8, xzr
    7068:	b	70a8 <lzma_properties_encode@@XZ_5.0+0x84>
    706c:	mov	w0, #0xb                   	// #11
    7070:	ret
    7074:	mov	w8, #0x2                   	// #2
    7078:	b	70a8 <lzma_properties_encode@@XZ_5.0+0x84>
    707c:	mov	w8, #0x3                   	// #3
    7080:	b	70a8 <lzma_properties_encode@@XZ_5.0+0x84>
    7084:	mov	w8, #0x4                   	// #4
    7088:	b	70a8 <lzma_properties_encode@@XZ_5.0+0x84>
    708c:	mov	w8, #0x5                   	// #5
    7090:	b	70a8 <lzma_properties_encode@@XZ_5.0+0x84>
    7094:	mov	w8, #0x6                   	// #6
    7098:	b	70a8 <lzma_properties_encode@@XZ_5.0+0x84>
    709c:	mov	w8, #0x7                   	// #7
    70a0:	b	70a8 <lzma_properties_encode@@XZ_5.0+0x84>
    70a4:	mov	w8, #0x1                   	// #1
    70a8:	adrp	x10, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    70ac:	mov	w9, #0x38                  	// #56
    70b0:	add	x10, x10, #0xa00
    70b4:	madd	x8, x8, x9, x10
    70b8:	ldr	x2, [x8, #48]
    70bc:	ldr	x0, [x0, #8]
    70c0:	br	x2

00000000000070c4 <lzma_filter_flags_size@@XZ_5.0>:
    70c4:	stp	x29, x30, [sp, #-48]!
    70c8:	stp	x20, x19, [sp, #32]
    70cc:	ldr	x8, [x1]
    70d0:	str	x21, [sp, #16]
    70d4:	mov	x29, sp
    70d8:	lsr	x8, x8, #62
    70dc:	cbz	x8, 70f4 <lzma_filter_flags_size@@XZ_5.0+0x30>
    70e0:	mov	w0, #0xb                   	// #11
    70e4:	ldp	x20, x19, [sp, #32]
    70e8:	ldr	x21, [sp, #16]
    70ec:	ldp	x29, x30, [sp], #48
    70f0:	ret
    70f4:	mov	x20, x1
    70f8:	mov	x19, x0
    70fc:	bl	32f0 <lzma_properties_size@plt>
    7100:	cbnz	w0, 70e4 <lzma_filter_flags_size@@XZ_5.0+0x20>
    7104:	ldr	x0, [x20]
    7108:	bl	3400 <lzma_vli_size@plt>
    710c:	ldr	w20, [x19]
    7110:	mov	w21, w0
    7114:	mov	x0, x20
    7118:	bl	3400 <lzma_vli_size@plt>
    711c:	mov	w8, w0
    7120:	add	w9, w20, w21
    7124:	mov	w0, wzr
    7128:	add	w8, w9, w8
    712c:	str	w8, [x19]
    7130:	ldp	x20, x19, [sp, #32]
    7134:	ldr	x21, [sp, #16]
    7138:	ldp	x29, x30, [sp], #48
    713c:	ret

0000000000007140 <lzma_filter_flags_encode@@XZ_5.0>:
    7140:	sub	sp, sp, #0x40
    7144:	stp	x29, x30, [sp, #16]
    7148:	stp	x22, x21, [sp, #32]
    714c:	stp	x20, x19, [sp, #48]
    7150:	mov	x20, x0
    7154:	ldr	x0, [x0]
    7158:	add	x29, sp, #0x10
    715c:	lsr	x8, x0, #62
    7160:	cbz	x8, 716c <lzma_filter_flags_encode@@XZ_5.0+0x2c>
    7164:	mov	w0, #0xb                   	// #11
    7168:	b	71bc <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    716c:	mov	x21, x3
    7170:	mov	x19, x2
    7174:	mov	x22, x1
    7178:	mov	x1, xzr
    717c:	mov	x2, x22
    7180:	mov	x3, x19
    7184:	mov	x4, x21
    7188:	bl	33d0 <lzma_vli_encode@plt>
    718c:	cbnz	w0, 71bc <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    7190:	sub	x0, x29, #0x4
    7194:	mov	x1, x20
    7198:	bl	32f0 <lzma_properties_size@plt>
    719c:	cbnz	w0, 71bc <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    71a0:	ldur	w0, [x29, #-4]
    71a4:	mov	x1, xzr
    71a8:	mov	x2, x22
    71ac:	mov	x3, x19
    71b0:	mov	x4, x21
    71b4:	bl	33d0 <lzma_vli_encode@plt>
    71b8:	cbz	w0, 71d0 <lzma_filter_flags_encode@@XZ_5.0+0x90>
    71bc:	ldp	x20, x19, [sp, #48]
    71c0:	ldp	x22, x21, [sp, #32]
    71c4:	ldp	x29, x30, [sp, #16]
    71c8:	add	sp, sp, #0x40
    71cc:	ret
    71d0:	ldr	x8, [x19]
    71d4:	ldur	w9, [x29, #-4]
    71d8:	sub	x10, x21, x8
    71dc:	cmp	x10, x9
    71e0:	b.cc	7164 <lzma_filter_flags_encode@@XZ_5.0+0x24>  // b.lo, b.ul, b.last
    71e4:	add	x1, x22, x8
    71e8:	mov	x0, x20
    71ec:	bl	3380 <lzma_properties_encode@plt>
    71f0:	cbnz	w0, 71bc <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    71f4:	ldur	w8, [x29, #-4]
    71f8:	ldr	x9, [x19]
    71fc:	add	x8, x9, x8
    7200:	str	x8, [x19]
    7204:	b	71bc <lzma_filter_flags_encode@@XZ_5.0+0x7c>
    7208:	stp	x29, x30, [sp, #-48]!
    720c:	stp	x22, x21, [sp, #16]
    7210:	stp	x20, x19, [sp, #32]
    7214:	ldr	x8, [x0, #16]
    7218:	adrp	x21, 7000 <lzma_properties_size@@XZ_5.0+0xa0>
    721c:	add	x21, x21, #0x208
    7220:	mov	x19, x2
    7224:	mov	x20, x0
    7228:	cmp	x8, x21
    722c:	mov	x22, x1
    7230:	mov	x29, sp
    7234:	b.eq	7244 <lzma_filter_flags_encode@@XZ_5.0+0x104>  // b.none
    7238:	mov	x0, x20
    723c:	mov	x1, x22
    7240:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    7244:	str	x21, [x20, #16]
    7248:	cbz	x19, 72b0 <lzma_filter_flags_encode@@XZ_5.0+0x170>
    724c:	ldr	x21, [x20]
    7250:	cbnz	x21, 7280 <lzma_filter_flags_encode@@XZ_5.0+0x140>
    7254:	mov	w0, #0x150                 	// #336
    7258:	mov	x1, x22
    725c:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    7260:	str	x0, [x20]
    7264:	cbz	x0, 72c4 <lzma_filter_flags_encode@@XZ_5.0+0x184>
    7268:	adrp	x8, 7000 <lzma_properties_size@@XZ_5.0+0xa0>
    726c:	adrp	x9, 7000 <lzma_properties_size@@XZ_5.0+0xa0>
    7270:	mov	x21, x0
    7274:	add	x8, x8, #0x2d8
    7278:	add	x9, x9, #0x50c
    727c:	stp	x8, x9, [x20, #24]
    7280:	add	x0, x21, #0x10
    7284:	mov	x1, x19
    7288:	bl	3430 <lzma_index_iter_init@plt>
    728c:	mov	w0, wzr
    7290:	str	wzr, [x21]
    7294:	str	x19, [x21, #8]
    7298:	str	xzr, [x21, #320]
    729c:	str	wzr, [x21, #328]
    72a0:	ldp	x20, x19, [sp, #32]
    72a4:	ldp	x22, x21, [sp, #16]
    72a8:	ldp	x29, x30, [sp], #48
    72ac:	ret
    72b0:	mov	w0, #0xb                   	// #11
    72b4:	ldp	x20, x19, [sp, #32]
    72b8:	ldp	x22, x21, [sp, #16]
    72bc:	ldp	x29, x30, [sp], #48
    72c0:	ret
    72c4:	mov	w0, #0x5                   	// #5
    72c8:	ldp	x20, x19, [sp, #32]
    72cc:	ldp	x22, x21, [sp, #16]
    72d0:	ldp	x29, x30, [sp], #48
    72d4:	ret
    72d8:	stp	x29, x30, [sp, #-96]!
    72dc:	stp	x26, x25, [sp, #32]
    72e0:	ldr	x26, [x6]
    72e4:	stp	x20, x19, [sp, #80]
    72e8:	mov	x20, x5
    72ec:	mov	x19, x0
    72f0:	cmp	x26, x7
    72f4:	stp	x28, x27, [sp, #16]
    72f8:	stp	x24, x23, [sp, #48]
    72fc:	stp	x22, x21, [sp, #64]
    7300:	mov	x29, sp
    7304:	b.cs	7454 <lzma_filter_flags_encode@@XZ_5.0+0x314>  // b.hs, b.nlast
    7308:	mov	x23, x19
    730c:	ldr	w8, [x23], #16
    7310:	adrp	x27, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    7314:	mov	x22, x7
    7318:	mov	x21, x6
    731c:	add	x24, x19, #0x140
    7320:	add	x27, x27, #0x400
    7324:	mov	w28, #0x2                   	// #2
    7328:	mov	w9, w8
    732c:	mov	x25, x26
    7330:	b	7358 <lzma_filter_flags_encode@@XZ_5.0+0x218>
    7334:	add	x9, x25, #0x1
    7338:	mov	w8, #0x1                   	// #1
    733c:	str	x9, [x21]
    7340:	mov	w9, #0x1                   	// #1
    7344:	strb	wzr, [x20, x25]
    7348:	str	w8, [x19]
    734c:	ldr	x25, [x21]
    7350:	cmp	x25, x22
    7354:	b.cs	7460 <lzma_filter_flags_encode@@XZ_5.0+0x320>  // b.hs, b.nlast
    7358:	cmp	w9, #0x6
    735c:	b.hi	74a4 <lzma_filter_flags_encode@@XZ_5.0+0x364>  // b.pmore
    7360:	mov	w9, w9
    7364:	adr	x10, 7334 <lzma_filter_flags_encode@@XZ_5.0+0x1f4>
    7368:	ldrb	w11, [x27, x9]
    736c:	add	x10, x10, x11, lsl #2
    7370:	br	x10
    7374:	cmp	w8, #0x2
    7378:	b.eq	7418 <lzma_filter_flags_encode@@XZ_5.0+0x2d8>  // b.none
    737c:	mov	w8, #0xb8                  	// #184
    7380:	b	741c <lzma_filter_flags_encode@@XZ_5.0+0x2dc>
    7384:	ldr	x0, [x19, #8]
    7388:	bl	3460 <lzma_index_block_count@plt>
    738c:	mov	x1, x24
    7390:	mov	x2, x20
    7394:	mov	x3, x21
    7398:	mov	x4, x22
    739c:	bl	33d0 <lzma_vli_encode@plt>
    73a0:	cmp	w0, #0x1
    73a4:	b.ne	7468 <lzma_filter_flags_encode@@XZ_5.0+0x328>  // b.any
    73a8:	mov	w8, #0x4                   	// #4
    73ac:	str	xzr, [x19, #320]
    73b0:	str	w8, [x19]
    73b4:	mov	w9, #0x4                   	// #4
    73b8:	b	734c <lzma_filter_flags_encode@@XZ_5.0+0x20c>
    73bc:	mov	w1, #0x2                   	// #2
    73c0:	mov	x0, x23
    73c4:	bl	33e0 <lzma_index_iter_next@plt>
    73c8:	tst	w0, #0xff
    73cc:	b.eq	7414 <lzma_filter_flags_encode@@XZ_5.0+0x2d4>  // b.none
    73d0:	ldr	x0, [x19, #8]
    73d4:	bl	49b4 <lzma_index_checks@@XZ_5.0+0x28>
    73d8:	mov	w9, w0
    73dc:	mov	w8, #0x5                   	// #5
    73e0:	str	x9, [x19, #320]
    73e4:	str	w8, [x19]
    73e8:	mov	w9, #0x5                   	// #5
    73ec:	b	734c <lzma_filter_flags_encode@@XZ_5.0+0x20c>
    73f0:	ldr	x9, [x24]
    73f4:	cbz	x9, 74ac <lzma_filter_flags_encode@@XZ_5.0+0x36c>
    73f8:	sub	x9, x9, #0x1
    73fc:	add	x10, x25, #0x1
    7400:	str	x9, [x24]
    7404:	str	x10, [x21]
    7408:	strb	wzr, [x20, x25]
    740c:	mov	w9, #0x5                   	// #5
    7410:	b	734c <lzma_filter_flags_encode@@XZ_5.0+0x20c>
    7414:	str	w28, [x19]
    7418:	mov	w8, #0xc0                  	// #192
    741c:	ldr	x0, [x19, x8]
    7420:	mov	x1, x24
    7424:	mov	x2, x20
    7428:	mov	x3, x21
    742c:	mov	x4, x22
    7430:	bl	33d0 <lzma_vli_encode@plt>
    7434:	cmp	w0, #0x1
    7438:	b.ne	7468 <lzma_filter_flags_encode@@XZ_5.0+0x328>  // b.any
    743c:	ldr	w8, [x19]
    7440:	str	xzr, [x19, #320]
    7444:	add	w8, w8, #0x1
    7448:	str	w8, [x19]
    744c:	mov	w9, w8
    7450:	b	734c <lzma_filter_flags_encode@@XZ_5.0+0x20c>
    7454:	mov	w25, wzr
    7458:	mov	x8, x26
    745c:	b	7470 <lzma_filter_flags_encode@@XZ_5.0+0x330>
    7460:	mov	w25, wzr
    7464:	b	746c <lzma_filter_flags_encode@@XZ_5.0+0x32c>
    7468:	mov	w25, w0
    746c:	ldr	x8, [x21]
    7470:	ldr	w2, [x19, #328]
    7474:	add	x0, x20, x26
    7478:	sub	x1, x8, x26
    747c:	bl	3160 <lzma_crc32@plt>
    7480:	str	w0, [x19, #328]
    7484:	mov	w0, w25
    7488:	ldp	x20, x19, [sp, #80]
    748c:	ldp	x22, x21, [sp, #64]
    7490:	ldp	x24, x23, [sp, #48]
    7494:	ldp	x26, x25, [sp, #32]
    7498:	ldp	x28, x27, [sp, #16]
    749c:	ldp	x29, x30, [sp], #96
    74a0:	ret
    74a4:	mov	w25, #0xb                   	// #11
    74a8:	b	7484 <lzma_filter_flags_encode@@XZ_5.0+0x344>
    74ac:	ldr	w2, [x19, #328]
    74b0:	add	x0, x20, x26
    74b4:	sub	x1, x25, x26
    74b8:	bl	3160 <lzma_crc32@plt>
    74bc:	mov	w8, #0x6                   	// #6
    74c0:	str	w0, [x19, #328]
    74c4:	str	w8, [x19]
    74c8:	cmp	x22, x25
    74cc:	b.eq	7504 <lzma_filter_flags_encode@@XZ_5.0+0x3c4>  // b.none
    74d0:	ldr	x8, [x19, #320]
    74d4:	ldr	w9, [x19, #328]
    74d8:	lsl	w10, w8, #3
    74dc:	add	x8, x8, #0x1
    74e0:	lsr	w9, w9, w10
    74e4:	cmp	x8, #0x4
    74e8:	strb	w9, [x20, x25]
    74ec:	add	x25, x25, #0x1
    74f0:	str	x25, [x21]
    74f4:	str	x8, [x19, #320]
    74f8:	b.cc	74c8 <lzma_filter_flags_encode@@XZ_5.0+0x388>  // b.lo, b.ul, b.last
    74fc:	mov	w25, #0x1                   	// #1
    7500:	b	7484 <lzma_filter_flags_encode@@XZ_5.0+0x344>
    7504:	mov	w25, wzr
    7508:	b	7484 <lzma_filter_flags_encode@@XZ_5.0+0x344>
    750c:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>

0000000000007510 <lzma_index_encoder@@XZ_5.0>:
    7510:	stp	x29, x30, [sp, #-64]!
    7514:	str	x23, [sp, #16]
    7518:	stp	x22, x21, [sp, #32]
    751c:	stp	x20, x19, [sp, #48]
    7520:	mov	x29, sp
    7524:	mov	x20, x1
    7528:	mov	x19, x0
    752c:	bl	3914 <lzma_version_string@@XZ_5.0+0x2b8>
    7530:	mov	w21, w0
    7534:	cbnz	w0, 75e0 <lzma_index_encoder@@XZ_5.0+0xd0>
    7538:	ldp	x23, x21, [x19, #48]
    753c:	adrp	x22, 7000 <lzma_properties_size@@XZ_5.0+0xa0>
    7540:	add	x22, x22, #0x208
    7544:	ldr	x8, [x21, #16]
    7548:	cmp	x8, x22
    754c:	b.eq	755c <lzma_index_encoder@@XZ_5.0+0x4c>  // b.none
    7550:	mov	x0, x21
    7554:	mov	x1, x23
    7558:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    755c:	str	x22, [x21, #16]
    7560:	cbz	x20, 75cc <lzma_index_encoder@@XZ_5.0+0xbc>
    7564:	ldr	x22, [x21]
    7568:	cbnz	x22, 7598 <lzma_index_encoder@@XZ_5.0+0x88>
    756c:	mov	w0, #0x150                 	// #336
    7570:	mov	x1, x23
    7574:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    7578:	str	x0, [x21]
    757c:	cbz	x0, 75d4 <lzma_index_encoder@@XZ_5.0+0xc4>
    7580:	adrp	x8, 7000 <lzma_properties_size@@XZ_5.0+0xa0>
    7584:	adrp	x9, 7000 <lzma_properties_size@@XZ_5.0+0xa0>
    7588:	mov	x22, x0
    758c:	add	x8, x8, #0x2d8
    7590:	add	x9, x9, #0x50c
    7594:	stp	x8, x9, [x21, #24]
    7598:	add	x0, x22, #0x10
    759c:	mov	x1, x20
    75a0:	bl	3430 <lzma_index_iter_init@plt>
    75a4:	str	wzr, [x22]
    75a8:	str	x20, [x22, #8]
    75ac:	str	xzr, [x22, #320]
    75b0:	str	wzr, [x22, #328]
    75b4:	ldr	x8, [x19, #56]
    75b8:	mov	w21, wzr
    75bc:	mov	w9, #0x1                   	// #1
    75c0:	strb	w9, [x8, #88]
    75c4:	strb	w9, [x8, #91]
    75c8:	b	75e0 <lzma_index_encoder@@XZ_5.0+0xd0>
    75cc:	mov	w21, #0xb                   	// #11
    75d0:	b	75d8 <lzma_index_encoder@@XZ_5.0+0xc8>
    75d4:	mov	w21, #0x5                   	// #5
    75d8:	mov	x0, x19
    75dc:	bl	32c0 <lzma_end@plt>
    75e0:	mov	w0, w21
    75e4:	ldp	x20, x19, [sp, #48]
    75e8:	ldp	x22, x21, [sp, #32]
    75ec:	ldr	x23, [sp, #16]
    75f0:	ldp	x29, x30, [sp], #64
    75f4:	ret

00000000000075f8 <lzma_index_buffer_encode@@XZ_5.0>:
    75f8:	sub	sp, sp, #0x1a0
    75fc:	stp	x22, x21, [sp, #384]
    7600:	mov	x22, x0
    7604:	mov	w0, #0xb                   	// #11
    7608:	stp	x29, x30, [sp, #352]
    760c:	stp	x28, x23, [sp, #368]
    7610:	stp	x20, x19, [sp, #400]
    7614:	add	x29, sp, #0x160
    7618:	cbz	x22, 76b8 <lzma_index_buffer_encode@@XZ_5.0+0xc0>
    761c:	mov	x21, x1
    7620:	cbz	x1, 76b8 <lzma_index_buffer_encode@@XZ_5.0+0xc0>
    7624:	mov	x19, x2
    7628:	cbz	x2, 76b8 <lzma_index_buffer_encode@@XZ_5.0+0xc0>
    762c:	ldr	x8, [x19]
    7630:	mov	x20, x3
    7634:	cmp	x8, x3
    7638:	b.hi	76b4 <lzma_index_buffer_encode@@XZ_5.0+0xbc>  // b.pmore
    763c:	mov	x0, x22
    7640:	sub	x23, x20, x8
    7644:	bl	3490 <lzma_index_size@plt>
    7648:	cmp	x23, x0
    764c:	b.cs	7658 <lzma_index_buffer_encode@@XZ_5.0+0x60>  // b.hs, b.nlast
    7650:	mov	w0, #0xa                   	// #10
    7654:	b	76b8 <lzma_index_buffer_encode@@XZ_5.0+0xc0>
    7658:	add	x8, sp, #0x10
    765c:	add	x0, x8, #0x10
    7660:	mov	x1, x22
    7664:	bl	3430 <lzma_index_iter_init@plt>
    7668:	str	wzr, [sp, #16]
    766c:	str	x22, [sp, #24]
    7670:	str	xzr, [sp, #336]
    7674:	str	wzr, [sp, #344]
    7678:	ldr	x22, [x19]
    767c:	add	x0, sp, #0x10
    7680:	mov	x1, xzr
    7684:	mov	x2, xzr
    7688:	mov	x3, xzr
    768c:	mov	x4, xzr
    7690:	mov	x5, x21
    7694:	mov	x6, x19
    7698:	mov	x7, x20
    769c:	str	wzr, [sp]
    76a0:	bl	72d8 <lzma_filter_flags_encode@@XZ_5.0+0x198>
    76a4:	cmp	w0, #0x1
    76a8:	mov	w0, wzr
    76ac:	b.eq	76b8 <lzma_index_buffer_encode@@XZ_5.0+0xc0>  // b.none
    76b0:	str	x22, [x19]
    76b4:	mov	w0, #0xb                   	// #11
    76b8:	ldp	x20, x19, [sp, #400]
    76bc:	ldp	x22, x21, [sp, #384]
    76c0:	ldp	x28, x23, [sp, #368]
    76c4:	ldp	x29, x30, [sp, #352]
    76c8:	add	sp, sp, #0x1a0
    76cc:	ret

00000000000076d0 <lzma_stream_buffer_bound@@XZ_5.0>:
    76d0:	stp	x29, x30, [sp, #-16]!
    76d4:	mov	x29, sp
    76d8:	bl	30c0 <lzma_block_buffer_bound@plt>
    76dc:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
    76e0:	sub	x8, x8, x0
    76e4:	cmp	x8, #0x30
    76e8:	ccmp	x0, #0x0, #0x4, cs  // cs = hs, nlast
    76ec:	add	x8, x0, #0x30
    76f0:	csel	x0, xzr, x8, eq  // eq = none
    76f4:	ldp	x29, x30, [sp], #16
    76f8:	ret

00000000000076fc <lzma_stream_buffer_encode@@XZ_5.0>:
    76fc:	sub	sp, sp, #0x170
    7700:	stp	x24, x23, [sp, #320]
    7704:	mov	w23, #0xb                   	// #11
    7708:	stp	x29, x30, [sp, #272]
    770c:	stp	x28, x27, [sp, #288]
    7710:	stp	x26, x25, [sp, #304]
    7714:	stp	x22, x21, [sp, #336]
    7718:	stp	x20, x19, [sp, #352]
    771c:	add	x29, sp, #0x110
    7720:	cbz	x0, 77b0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    7724:	mov	w26, w1
    7728:	cmp	w1, #0xf
    772c:	b.hi	77b0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>  // b.pmore
    7730:	cmp	x3, #0x0
    7734:	cset	w8, eq  // eq = none
    7738:	cmp	x4, #0x0
    773c:	cset	w9, ne  // ne = any
    7740:	mov	x22, x4
    7744:	mov	x24, x3
    7748:	and	w8, w8, w9
    774c:	mov	w23, #0xb                   	// #11
    7750:	tbnz	w8, #0, 77b0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    7754:	mov	x20, x5
    7758:	cbz	x5, 77b0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    775c:	mov	x19, x6
    7760:	cbz	x6, 77b0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    7764:	ldr	x23, [x19]
    7768:	mov	x27, x7
    776c:	cmp	x23, x7
    7770:	b.ls	777c <lzma_stream_buffer_encode@@XZ_5.0+0x80>  // b.plast
    7774:	mov	w23, #0xb                   	// #11
    7778:	b	77b0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    777c:	mov	x25, x0
    7780:	mov	w0, w26
    7784:	mov	x21, x2
    7788:	bl	3080 <lzma_check_is_supported@plt>
    778c:	tst	w0, #0xff
    7790:	b.eq	77ac <lzma_stream_buffer_encode@@XZ_5.0+0xb0>  // b.none
    7794:	sub	x8, x27, x23
    7798:	cmp	x8, #0x19
    779c:	stur	x23, [x29, #-8]
    77a0:	b.cs	77d4 <lzma_stream_buffer_encode@@XZ_5.0+0xd8>  // b.hs, b.nlast
    77a4:	mov	w23, #0xa                   	// #10
    77a8:	b	77b0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    77ac:	mov	w23, #0x3                   	// #3
    77b0:	mov	w0, w23
    77b4:	ldp	x20, x19, [sp, #352]
    77b8:	ldp	x22, x21, [sp, #336]
    77bc:	ldp	x24, x23, [sp, #320]
    77c0:	ldp	x26, x25, [sp, #304]
    77c4:	ldp	x28, x27, [sp, #288]
    77c8:	ldp	x29, x30, [sp, #272]
    77cc:	add	sp, sp, #0x170
    77d0:	ret
    77d4:	movi	v0.2d, #0x0
    77d8:	add	x1, x20, x23
    77dc:	sub	x0, x29, #0x40
    77e0:	stur	xzr, [x29, #-16]
    77e4:	stp	q0, q0, [x29, #-48]
    77e8:	stur	q0, [x29, #-64]
    77ec:	stur	w26, [x29, #-48]
    77f0:	bl	3310 <lzma_stream_header_encode@plt>
    77f4:	cbnz	w0, 7774 <lzma_stream_buffer_encode@@XZ_5.0+0x78>
    77f8:	sub	x27, x27, #0xc
    77fc:	add	x8, x23, #0xc
    7800:	movi	v0.2d, #0x0
    7804:	stp	q0, q0, [sp, #176]
    7808:	stp	q0, q0, [sp, #144]
    780c:	stp	q0, q0, [sp, #112]
    7810:	stp	q0, q0, [sp, #80]
    7814:	stp	q0, q0, [sp, #48]
    7818:	stp	q0, q0, [sp, #16]
    781c:	str	q0, [sp]
    7820:	str	w26, [sp, #8]
    7824:	stur	x8, [x29, #-8]
    7828:	str	x25, [sp, #32]
    782c:	cbz	x22, 7858 <lzma_stream_buffer_encode@@XZ_5.0+0x15c>
    7830:	mov	x0, sp
    7834:	sub	x5, x29, #0x8
    7838:	mov	x1, x21
    783c:	mov	x2, x24
    7840:	mov	x3, x22
    7844:	mov	x4, x20
    7848:	mov	x6, x27
    784c:	bl	3070 <lzma_block_buffer_encode@plt>
    7850:	mov	w23, w0
    7854:	cbnz	w0, 77b0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    7858:	mov	x0, x21
    785c:	bl	3330 <lzma_index_init@plt>
    7860:	cbz	x0, 78a0 <lzma_stream_buffer_encode@@XZ_5.0+0x1a4>
    7864:	mov	x24, x0
    7868:	cbz	x22, 78a8 <lzma_stream_buffer_encode@@XZ_5.0+0x1ac>
    786c:	mov	x0, sp
    7870:	bl	3130 <lzma_block_unpadded_size@plt>
    7874:	ldr	x3, [sp, #24]
    7878:	mov	x2, x0
    787c:	mov	x0, x24
    7880:	mov	x1, x21
    7884:	bl	32a0 <lzma_index_append@plt>
    7888:	cbz	w0, 78a8 <lzma_stream_buffer_encode@@XZ_5.0+0x1ac>
    788c:	mov	w23, w0
    7890:	mov	x0, x24
    7894:	mov	x1, x21
    7898:	bl	3360 <lzma_index_end@plt>
    789c:	b	77b0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    78a0:	mov	w23, #0x5                   	// #5
    78a4:	b	77b0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    78a8:	sub	x2, x29, #0x8
    78ac:	mov	x0, x24
    78b0:	mov	x1, x20
    78b4:	mov	x3, x27
    78b8:	bl	30a0 <lzma_index_buffer_encode@plt>
    78bc:	mov	w23, w0
    78c0:	mov	x0, x24
    78c4:	bl	3490 <lzma_index_size@plt>
    78c8:	stur	x0, [x29, #-56]
    78cc:	mov	x0, x24
    78d0:	mov	x1, x21
    78d4:	bl	3360 <lzma_index_end@plt>
    78d8:	cbnz	w23, 77b0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>
    78dc:	ldur	x8, [x29, #-8]
    78e0:	sub	x0, x29, #0x40
    78e4:	add	x1, x20, x8
    78e8:	bl	31a0 <lzma_stream_footer_encode@plt>
    78ec:	cbnz	w0, 7774 <lzma_stream_buffer_encode@@XZ_5.0+0x78>
    78f0:	ldur	x8, [x29, #-8]
    78f4:	mov	w23, wzr
    78f8:	add	x8, x8, #0xc
    78fc:	stur	x8, [x29, #-8]
    7900:	str	x8, [x19]
    7904:	b	77b0 <lzma_stream_buffer_encode@@XZ_5.0+0xb4>

0000000000007908 <lzma_stream_encoder@@XZ_5.0>:
    7908:	stp	x29, x30, [sp, #-48]!
    790c:	stp	x22, x21, [sp, #16]
    7910:	stp	x20, x19, [sp, #32]
    7914:	mov	x29, sp
    7918:	mov	w21, w2
    791c:	mov	x22, x1
    7920:	mov	x19, x0
    7924:	bl	3914 <lzma_version_string@@XZ_5.0+0x2b8>
    7928:	mov	w20, w0
    792c:	cbnz	w0, 7964 <lzma_stream_encoder@@XZ_5.0+0x5c>
    7930:	ldp	x1, x0, [x19, #48]
    7934:	mov	x2, x22
    7938:	mov	w3, w21
    793c:	bl	7978 <lzma_stream_encoder@@XZ_5.0+0x70>
    7940:	mov	w20, w0
    7944:	cbz	w0, 7954 <lzma_stream_encoder@@XZ_5.0+0x4c>
    7948:	mov	x0, x19
    794c:	bl	32c0 <lzma_end@plt>
    7950:	b	7964 <lzma_stream_encoder@@XZ_5.0+0x5c>
    7954:	ldr	x8, [x19, #56]
    7958:	mov	w9, #0x1010101             	// #16843009
    795c:	strb	w9, [x8, #92]
    7960:	str	w9, [x8, #88]
    7964:	mov	w0, w20
    7968:	ldp	x20, x19, [sp, #32]
    796c:	ldp	x22, x21, [sp, #16]
    7970:	ldp	x29, x30, [sp], #48
    7974:	ret
    7978:	sub	sp, sp, #0x80
    797c:	stp	x29, x30, [sp, #64]
    7980:	stp	x22, x21, [sp, #96]
    7984:	stp	x20, x19, [sp, #112]
    7988:	ldr	x8, [x0, #16]
    798c:	adrp	x22, 7000 <lzma_properties_size@@XZ_5.0+0xa0>
    7990:	add	x22, x22, #0x978
    7994:	str	x23, [sp, #80]
    7998:	mov	w21, w3
    799c:	mov	x19, x2
    79a0:	mov	x23, x0
    79a4:	cmp	x8, x22
    79a8:	mov	x20, x1
    79ac:	add	x29, sp, #0x40
    79b0:	b.eq	79c0 <lzma_stream_encoder@@XZ_5.0+0xb8>  // b.none
    79b4:	mov	x0, x23
    79b8:	mov	x1, x20
    79bc:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    79c0:	str	x22, [x23, #16]
    79c4:	cbz	x19, 7aa4 <lzma_stream_encoder@@XZ_5.0+0x19c>
    79c8:	ldr	x22, [x23]
    79cc:	cbnz	x22, 7a34 <lzma_stream_encoder@@XZ_5.0+0x12c>
    79d0:	mov	w0, #0x5d0                 	// #1488
    79d4:	mov	x1, x20
    79d8:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    79dc:	cbz	x0, 7aac <lzma_stream_encoder@@XZ_5.0+0x1a4>
    79e0:	adrp	x8, 7000 <lzma_properties_size@@XZ_5.0+0xa0>
    79e4:	adrp	x9, 7000 <lzma_properties_size@@XZ_5.0+0xa0>
    79e8:	add	x8, x8, #0xac8
    79ec:	add	x9, x9, #0xdc0
    79f0:	stp	x8, x9, [x23, #24]
    79f4:	adrp	x8, 7000 <lzma_properties_size@@XZ_5.0+0xa0>
    79f8:	add	x8, x8, #0xe38
    79fc:	mov	x22, x0
    7a00:	str	x8, [x23, #64]
    7a04:	mov	x8, #0xffffffffffffffff    	// #-1
    7a08:	movi	v0.2d, #0x0
    7a0c:	str	x0, [x23]
    7a10:	str	x8, [x0, #288]
    7a14:	stp	xzr, x8, [x0, #8]
    7a18:	stur	q0, [x0, #24]
    7a1c:	stur	q0, [x0, #40]
    7a20:	stur	q0, [x0, #56]
    7a24:	str	xzr, [x0, #72]
    7a28:	stp	xzr, x8, [x0, #368]
    7a2c:	stp	q0, q0, [x0, #384]
    7a30:	stp	q0, q0, [x0, #416]
    7a34:	ldr	x0, [x22, #440]
    7a38:	mov	x1, x20
    7a3c:	str	wzr, [x22]
    7a40:	str	wzr, [x22, #80]
    7a44:	str	w21, [x22, #88]
    7a48:	bl	3360 <lzma_index_end@plt>
    7a4c:	mov	x0, x20
    7a50:	bl	3330 <lzma_index_init@plt>
    7a54:	str	x0, [x22, #440]
    7a58:	cbz	x0, 7aac <lzma_stream_encoder@@XZ_5.0+0x1a4>
    7a5c:	movi	v0.2d, #0x0
    7a60:	add	x1, x22, #0x1d0
    7a64:	mov	x0, sp
    7a68:	str	xzr, [sp, #48]
    7a6c:	stp	q0, q0, [sp, #16]
    7a70:	str	q0, [sp]
    7a74:	str	w21, [sp, #16]
    7a78:	bl	3310 <lzma_stream_header_encode@plt>
    7a7c:	cbnz	w0, 7ab0 <lzma_stream_encoder@@XZ_5.0+0x1a8>
    7a80:	adrp	x8, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    7a84:	ldr	q0, [x8, #1040]
    7a88:	mov	x0, x22
    7a8c:	mov	x1, x20
    7a90:	mov	x2, x19
    7a94:	mov	x3, xzr
    7a98:	str	q0, [x22, #448]
    7a9c:	bl	7e38 <lzma_stream_encoder@@XZ_5.0+0x530>
    7aa0:	b	7ab0 <lzma_stream_encoder@@XZ_5.0+0x1a8>
    7aa4:	mov	w0, #0xb                   	// #11
    7aa8:	b	7ab0 <lzma_stream_encoder@@XZ_5.0+0x1a8>
    7aac:	mov	w0, #0x5                   	// #5
    7ab0:	ldp	x20, x19, [sp, #112]
    7ab4:	ldp	x22, x21, [sp, #96]
    7ab8:	ldr	x23, [sp, #80]
    7abc:	ldp	x29, x30, [sp, #64]
    7ac0:	add	sp, sp, #0x80
    7ac4:	ret
    7ac8:	sub	sp, sp, #0xf0
    7acc:	ldr	x8, [x6]
    7ad0:	stp	x29, x30, [sp, #144]
    7ad4:	stp	x28, x27, [sp, #160]
    7ad8:	stp	x26, x25, [sp, #176]
    7adc:	cmp	x8, x7
    7ae0:	stp	x24, x23, [sp, #192]
    7ae4:	stp	x22, x21, [sp, #208]
    7ae8:	stp	x20, x19, [sp, #224]
    7aec:	add	x29, sp, #0x90
    7af0:	b.cs	7d7c <lzma_stream_encoder@@XZ_5.0+0x474>  // b.hs, b.nlast
    7af4:	add	x8, x0, #0x170
    7af8:	str	x8, [sp, #40]
    7afc:	add	x8, x0, #0x8
    7b00:	str	x8, [sp, #24]
    7b04:	add	x8, x0, #0x50
    7b08:	str	x2, [sp, #64]
    7b0c:	ldr	w10, [x29, #96]
    7b10:	stur	x8, [x29, #-64]
    7b14:	mov	x11, x0
    7b18:	ldr	w8, [x11], #96
    7b1c:	sub	x9, x29, #0x38
    7b20:	adrp	x27, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    7b24:	add	x9, x9, #0x14
    7b28:	mov	x19, x7
    7b2c:	mov	x20, x6
    7b30:	mov	x21, x5
    7b34:	mov	x22, x4
    7b38:	mov	x23, x3
    7b3c:	mov	x25, x1
    7b40:	mov	x26, x0
    7b44:	add	x28, x0, #0x1d0
    7b48:	add	x24, x0, #0x1c0
    7b4c:	add	x27, x27, #0x420
    7b50:	str	x9, [sp, #48]
    7b54:	mov	w9, w10
    7b58:	str	x11, [sp, #32]
    7b5c:	stur	w10, [x29, #-68]
    7b60:	str	x9, [sp, #56]
    7b64:	b	7b78 <lzma_stream_encoder@@XZ_5.0+0x270>
    7b68:	str	w8, [x26]
    7b6c:	ldr	x9, [x20]
    7b70:	cmp	x9, x19
    7b74:	b.cs	7d7c <lzma_stream_encoder@@XZ_5.0+0x474>  // b.hs, b.nlast
    7b78:	cmp	w8, #0x5
    7b7c:	b.hi	7da0 <lzma_stream_encoder@@XZ_5.0+0x498>  // b.pmore
    7b80:	mov	w8, w8
    7b84:	adr	x9, 7b94 <lzma_stream_encoder@@XZ_5.0+0x28c>
    7b88:	ldrb	w10, [x27, x8]
    7b8c:	add	x9, x9, x10, lsl #2
    7b90:	br	x9
    7b94:	ldr	x2, [x26, #456]
    7b98:	mov	x0, x28
    7b9c:	mov	x1, x24
    7ba0:	mov	x3, x21
    7ba4:	mov	x4, x20
    7ba8:	mov	x5, x19
    7bac:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
    7bb0:	ldp	x8, x9, [x26, #448]
    7bb4:	cmp	x8, x9
    7bb8:	b.cc	7d7c <lzma_stream_encoder@@XZ_5.0+0x474>  // b.lo, b.ul, b.last
    7bbc:	ldr	w8, [x26]
    7bc0:	cmp	w8, #0x5
    7bc4:	b.eq	7da8 <lzma_stream_encoder@@XZ_5.0+0x4a0>  // b.none
    7bc8:	add	w8, w8, #0x1
    7bcc:	str	xzr, [x26, #448]
    7bd0:	b	7b68 <lzma_stream_encoder@@XZ_5.0+0x260>
    7bd4:	ldr	x8, [x23]
    7bd8:	ldur	x9, [x29, #-64]
    7bdc:	cmp	x8, x22
    7be0:	b.ne	7cfc <lzma_stream_encoder@@XZ_5.0+0x3f4>  // b.any
    7be4:	ldur	w8, [x29, #-68]
    7be8:	cmp	w8, #0x3
    7bec:	b.ne	7db0 <lzma_stream_encoder@@XZ_5.0+0x4a8>  // b.any
    7bf0:	ldr	x2, [x26, #440]
    7bf4:	ldr	x0, [sp, #40]
    7bf8:	mov	x1, x25
    7bfc:	bl	7208 <lzma_filter_flags_encode@@XZ_5.0+0xc8>
    7c00:	cbnz	w0, 7d80 <lzma_stream_encoder@@XZ_5.0+0x478>
    7c04:	mov	w8, #0x4                   	// #4
    7c08:	b	7b68 <lzma_stream_encoder@@XZ_5.0+0x260>
    7c0c:	ldp	x10, x2, [sp, #56]
    7c10:	adrp	x9, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    7c14:	add	x9, x9, #0x428
    7c18:	ldr	x8, [x26, #32]
    7c1c:	ldr	x0, [x26, #8]
    7c20:	ldr	w9, [x9, x10, lsl #2]
    7c24:	mov	x1, x25
    7c28:	mov	x3, x23
    7c2c:	mov	x4, x22
    7c30:	mov	x5, x21
    7c34:	mov	x6, x20
    7c38:	mov	x7, x19
    7c3c:	str	w9, [sp]
    7c40:	blr	x8
    7c44:	ldur	w8, [x29, #-68]
    7c48:	cmp	w8, #0x1
    7c4c:	b.eq	7d80 <lzma_stream_encoder@@XZ_5.0+0x478>  // b.none
    7c50:	cmp	w0, #0x1
    7c54:	b.ne	7d80 <lzma_stream_encoder@@XZ_5.0+0x478>  // b.any
    7c58:	ldur	x0, [x29, #-64]
    7c5c:	bl	3130 <lzma_block_unpadded_size@plt>
    7c60:	ldr	x8, [x26, #440]
    7c64:	ldr	x3, [x26, #104]
    7c68:	mov	x2, x0
    7c6c:	mov	x1, x25
    7c70:	mov	x0, x8
    7c74:	bl	32a0 <lzma_index_append@plt>
    7c78:	cbnz	w0, 7d80 <lzma_stream_encoder@@XZ_5.0+0x478>
    7c7c:	mov	w8, #0x1                   	// #1
    7c80:	b	7b68 <lzma_stream_encoder@@XZ_5.0+0x260>
    7c84:	ldr	x8, [x26, #392]
    7c88:	ldr	x0, [x26, #368]
    7c8c:	mov	x1, x25
    7c90:	mov	x2, xzr
    7c94:	mov	x3, xzr
    7c98:	mov	x4, xzr
    7c9c:	mov	x5, x21
    7ca0:	mov	x6, x20
    7ca4:	mov	x7, x19
    7ca8:	str	wzr, [sp]
    7cac:	blr	x8
    7cb0:	cmp	w0, #0x1
    7cb4:	b.ne	7d80 <lzma_stream_encoder@@XZ_5.0+0x478>  // b.any
    7cb8:	stur	wzr, [x29, #-56]
    7cbc:	ldr	x0, [x26, #440]
    7cc0:	bl	3490 <lzma_index_size@plt>
    7cc4:	stur	x0, [x29, #-48]
    7cc8:	ldr	w8, [x26, #88]
    7ccc:	movi	v0.2d, #0x0
    7cd0:	sub	x0, x29, #0x38
    7cd4:	mov	x1, x28
    7cd8:	stur	w8, [x29, #-40]
    7cdc:	ldr	x8, [sp, #48]
    7ce0:	stp	q0, q0, [x8]
    7ce4:	bl	31a0 <lzma_stream_footer_encode@plt>
    7ce8:	cbnz	w0, 7da0 <lzma_stream_encoder@@XZ_5.0+0x498>
    7cec:	mov	w8, #0xc                   	// #12
    7cf0:	str	x8, [x26, #456]
    7cf4:	mov	w8, #0x5                   	// #5
    7cf8:	b	7b68 <lzma_stream_encoder@@XZ_5.0+0x260>
    7cfc:	ldrb	w8, [x26, #4]
    7d00:	cbnz	w8, 7d58 <lzma_stream_encoder@@XZ_5.0+0x450>
    7d04:	ldr	x8, [sp, #32]
    7d08:	mov	x10, #0xffffffffffffffff    	// #-1
    7d0c:	mov	x0, x9
    7d10:	str	x24, [sp, #16]
    7d14:	mov	x24, x27
    7d18:	mov	x27, x23
    7d1c:	mov	x23, x22
    7d20:	stp	x10, x10, [x8]
    7d24:	mov	x22, x9
    7d28:	bl	3100 <lzma_block_header_size@plt>
    7d2c:	cbnz	w0, 7d80 <lzma_stream_encoder@@XZ_5.0+0x478>
    7d30:	ldr	x0, [sp, #24]
    7d34:	mov	x1, x25
    7d38:	mov	x2, x22
    7d3c:	bl	63ac <lzma_block_uncomp_encode@@XZ_5.2+0x20>
    7d40:	mov	x9, x22
    7d44:	mov	x22, x23
    7d48:	mov	x23, x27
    7d4c:	mov	x27, x24
    7d50:	ldr	x24, [sp, #16]
    7d54:	cbnz	w0, 7d80 <lzma_stream_encoder@@XZ_5.0+0x478>
    7d58:	mov	x0, x9
    7d5c:	mov	x1, x28
    7d60:	strb	wzr, [x26, #4]
    7d64:	bl	34c0 <lzma_block_header_encode@plt>
    7d68:	cbnz	w0, 7da0 <lzma_stream_encoder@@XZ_5.0+0x498>
    7d6c:	ldr	w9, [x26, #84]
    7d70:	mov	w8, #0x2                   	// #2
    7d74:	str	x9, [x26, #456]
    7d78:	b	7b68 <lzma_stream_encoder@@XZ_5.0+0x260>
    7d7c:	mov	w0, wzr
    7d80:	ldp	x20, x19, [sp, #224]
    7d84:	ldp	x22, x21, [sp, #208]
    7d88:	ldp	x24, x23, [sp, #192]
    7d8c:	ldp	x26, x25, [sp, #176]
    7d90:	ldp	x28, x27, [sp, #160]
    7d94:	ldp	x29, x30, [sp, #144]
    7d98:	add	sp, sp, #0xf0
    7d9c:	ret
    7da0:	mov	w0, #0xb                   	// #11
    7da4:	b	7d80 <lzma_stream_encoder@@XZ_5.0+0x478>
    7da8:	mov	w0, #0x1                   	// #1
    7dac:	b	7d80 <lzma_stream_encoder@@XZ_5.0+0x478>
    7db0:	ldur	w8, [x29, #-68]
    7db4:	cmp	w8, #0x0
    7db8:	cset	w0, ne  // ne = any
    7dbc:	b	7d80 <lzma_stream_encoder@@XZ_5.0+0x478>
    7dc0:	stp	x29, x30, [sp, #-48]!
    7dc4:	stp	x20, x19, [sp, #32]
    7dc8:	mov	x20, x0
    7dcc:	add	x0, x0, #0x8
    7dd0:	str	x21, [sp, #16]
    7dd4:	mov	x29, sp
    7dd8:	mov	x19, x1
    7ddc:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    7de0:	add	x0, x20, #0x170
    7de4:	mov	x1, x19
    7de8:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    7dec:	ldr	x0, [x20, #440]
    7df0:	mov	x1, x19
    7df4:	bl	3360 <lzma_index_end@plt>
    7df8:	ldr	x8, [x20, #288]
    7dfc:	cmn	x8, #0x1
    7e00:	b.eq	7e20 <lzma_stream_encoder@@XZ_5.0+0x518>  // b.none
    7e04:	add	x21, x20, #0x130
    7e08:	ldur	x0, [x21, #-8]
    7e0c:	mov	x1, x19
    7e10:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    7e14:	ldr	x8, [x21], #16
    7e18:	cmn	x8, #0x1
    7e1c:	b.ne	7e08 <lzma_stream_encoder@@XZ_5.0+0x500>  // b.any
    7e20:	mov	x0, x20
    7e24:	mov	x1, x19
    7e28:	ldp	x20, x19, [sp, #32]
    7e2c:	ldr	x21, [sp, #16]
    7e30:	ldp	x29, x30, [sp], #48
    7e34:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
    7e38:	stp	x29, x30, [sp, #-48]!
    7e3c:	stp	x22, x21, [sp, #16]
    7e40:	stp	x20, x19, [sp, #32]
    7e44:	ldr	w8, [x0]
    7e48:	mov	x19, x2
    7e4c:	mov	x21, x0
    7e50:	mov	x20, x1
    7e54:	cmp	w8, #0x1
    7e58:	mov	x29, sp
    7e5c:	b.hi	7e98 <lzma_stream_encoder@@XZ_5.0+0x590>  // b.pmore
    7e60:	add	x22, x21, #0x50
    7e64:	mov	x8, #0xffffffffffffffff    	// #-1
    7e68:	mov	x0, x22
    7e6c:	strb	wzr, [x21, #4]
    7e70:	str	x8, [x21, #96]
    7e74:	stp	x8, x19, [x21, #104]
    7e78:	bl	3100 <lzma_block_header_size@plt>
    7e7c:	cbz	w0, 7ee0 <lzma_stream_encoder@@XZ_5.0+0x5d8>
    7e80:	add	x8, x21, #0x120
    7e84:	str	x8, [x21, #112]
    7e88:	ldp	x20, x19, [sp, #32]
    7e8c:	ldp	x22, x21, [sp, #16]
    7e90:	ldp	x29, x30, [sp], #48
    7e94:	ret
    7e98:	cmp	w8, #0x3
    7e9c:	b.hi	7ecc <lzma_stream_encoder@@XZ_5.0+0x5c4>  // b.pmore
    7ea0:	ldr	x8, [x21, #72]
    7ea4:	ldr	x0, [x21, #8]
    7ea8:	mov	x1, x20
    7eac:	mov	x2, x19
    7eb0:	blr	x8
    7eb4:	cbnz	w0, 7e88 <lzma_stream_encoder@@XZ_5.0+0x580>
    7eb8:	ldr	x8, [x21, #288]
    7ebc:	add	x22, x21, #0x120
    7ec0:	cmn	x8, #0x1
    7ec4:	b.ne	7f14 <lzma_stream_encoder@@XZ_5.0+0x60c>  // b.any
    7ec8:	b	7f30 <lzma_stream_encoder@@XZ_5.0+0x628>
    7ecc:	mov	w0, #0xb                   	// #11
    7ed0:	ldp	x20, x19, [sp, #32]
    7ed4:	ldp	x22, x21, [sp, #16]
    7ed8:	ldp	x29, x30, [sp], #48
    7edc:	ret
    7ee0:	add	x0, x21, #0x8
    7ee4:	mov	x1, x20
    7ee8:	mov	x2, x22
    7eec:	bl	63ac <lzma_block_uncomp_encode@@XZ_5.2+0x20>
    7ef0:	add	x8, x21, #0x120
    7ef4:	str	x8, [x21, #112]
    7ef8:	cbnz	w0, 7e88 <lzma_stream_encoder@@XZ_5.0+0x580>
    7efc:	mov	w8, #0x1                   	// #1
    7f00:	strb	w8, [x21, #4]
    7f04:	ldr	x8, [x21, #288]
    7f08:	add	x22, x21, #0x120
    7f0c:	cmn	x8, #0x1
    7f10:	b.eq	7f30 <lzma_stream_encoder@@XZ_5.0+0x628>  // b.none
    7f14:	add	x21, x21, #0x130
    7f18:	ldur	x0, [x21, #-8]
    7f1c:	mov	x1, x20
    7f20:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    7f24:	ldr	x8, [x21], #16
    7f28:	cmn	x8, #0x1
    7f2c:	b.ne	7f18 <lzma_stream_encoder@@XZ_5.0+0x610>  // b.any
    7f30:	mov	x0, x19
    7f34:	mov	x1, x22
    7f38:	mov	x2, x20
    7f3c:	ldp	x20, x19, [sp, #32]
    7f40:	ldp	x22, x21, [sp, #16]
    7f44:	ldp	x29, x30, [sp], #48
    7f48:	b	31d0 <lzma_filters_copy@plt>

0000000000007f4c <lzma_stream_header_encode@@XZ_5.0>:
    7f4c:	stp	x29, x30, [sp, #-32]!
    7f50:	ldr	w8, [x0]
    7f54:	str	x19, [sp, #16]
    7f58:	mov	x29, sp
    7f5c:	cbz	w8, 7f70 <lzma_stream_header_encode@@XZ_5.0+0x24>
    7f60:	mov	w0, #0x8                   	// #8
    7f64:	ldr	x19, [sp, #16]
    7f68:	ldp	x29, x30, [sp], #32
    7f6c:	ret
    7f70:	adrp	x8, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    7f74:	ldr	x8, [x8, #3936]
    7f78:	mov	x19, x1
    7f7c:	ldrh	w9, [x8, #4]
    7f80:	ldr	w8, [x8]
    7f84:	strh	w9, [x1, #4]
    7f88:	str	w8, [x1]
    7f8c:	ldr	w8, [x0, #16]
    7f90:	cmp	w8, #0xf
    7f94:	b.ls	7fa8 <lzma_stream_header_encode@@XZ_5.0+0x5c>  // b.plast
    7f98:	mov	w0, #0xb                   	// #11
    7f9c:	ldr	x19, [sp, #16]
    7fa0:	ldp	x29, x30, [sp], #32
    7fa4:	ret
    7fa8:	strb	wzr, [x19, #6]
    7fac:	ldr	w8, [x0, #16]
    7fb0:	add	x0, x19, #0x6
    7fb4:	mov	w1, #0x2                   	// #2
    7fb8:	mov	w2, wzr
    7fbc:	strb	w8, [x19, #7]
    7fc0:	bl	3160 <lzma_crc32@plt>
    7fc4:	mov	w8, w0
    7fc8:	mov	w0, wzr
    7fcc:	str	w8, [x19, #8]
    7fd0:	ldr	x19, [sp, #16]
    7fd4:	ldp	x29, x30, [sp], #32
    7fd8:	ret

0000000000007fdc <lzma_stream_footer_encode@@XZ_5.0>:
    7fdc:	stp	x29, x30, [sp, #-32]!
    7fe0:	ldr	w9, [x0]
    7fe4:	str	x19, [sp, #16]
    7fe8:	mov	x29, sp
    7fec:	cbz	w9, 8000 <lzma_stream_footer_encode@@XZ_5.0+0x24>
    7ff0:	mov	w0, #0x8                   	// #8
    7ff4:	ldr	x19, [sp, #16]
    7ff8:	ldp	x29, x30, [sp], #32
    7ffc:	ret
    8000:	ldr	x9, [x0, #8]
    8004:	mov	x11, #0x3fffffffc           	// #17179869180
    8008:	mov	x8, x0
    800c:	mov	w0, #0xb                   	// #11
    8010:	sub	x10, x9, #0x4
    8014:	cmp	x10, x11
    8018:	b.hi	7ff4 <lzma_stream_footer_encode@@XZ_5.0+0x18>  // b.pmore
    801c:	and	x10, x9, #0x3
    8020:	cbnz	x10, 7ff4 <lzma_stream_footer_encode@@XZ_5.0+0x18>
    8024:	lsr	x9, x9, #2
    8028:	sub	w9, w9, #0x1
    802c:	mov	x0, x1
    8030:	str	w9, [x0, #4]!
    8034:	ldr	w9, [x8, #16]
    8038:	mov	x19, x1
    803c:	cmp	w9, #0xf
    8040:	b.ls	8054 <lzma_stream_footer_encode@@XZ_5.0+0x78>  // b.plast
    8044:	mov	w0, #0xb                   	// #11
    8048:	ldr	x19, [sp, #16]
    804c:	ldp	x29, x30, [sp], #32
    8050:	ret
    8054:	strb	wzr, [x19, #8]
    8058:	ldr	w8, [x8, #16]
    805c:	mov	w1, #0x6                   	// #6
    8060:	mov	w2, wzr
    8064:	strb	w8, [x19, #9]
    8068:	bl	3160 <lzma_crc32@plt>
    806c:	mov	w8, w0
    8070:	strb	w8, [x19]
    8074:	adrp	x11, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    8078:	ldr	x11, [x11, #3976]
    807c:	lsr	w9, w8, #8
    8080:	strb	w9, [x19, #1]
    8084:	mov	w0, wzr
    8088:	ldrh	w9, [x11]
    808c:	lsr	w10, w8, #16
    8090:	lsr	w8, w8, #24
    8094:	strb	w10, [x19, #2]
    8098:	strb	w8, [x19, #3]
    809c:	strh	w9, [x19, #10]
    80a0:	ldr	x19, [sp, #16]
    80a4:	ldp	x29, x30, [sp], #32
    80a8:	ret

00000000000080ac <lzma_vli_encode@@XZ_5.0>:
    80ac:	sub	sp, sp, #0x10
    80b0:	ldr	x10, [x3]
    80b4:	cmp	x1, #0x0
    80b8:	add	x9, sp, #0x8
    80bc:	mov	w11, #0xa                   	// #10
    80c0:	mov	x8, x0
    80c4:	csel	x9, x9, x1, eq  // eq = none
    80c8:	cinc	w0, w11, eq  // eq = none
    80cc:	cmp	x10, x4
    80d0:	str	xzr, [sp, #8]
    80d4:	b.cs	815c <lzma_vli_encode@@XZ_5.0+0xb0>  // b.hs, b.nlast
    80d8:	mov	w0, #0xb                   	// #11
    80dc:	tbnz	x8, #63, 815c <lzma_vli_encode@@XZ_5.0+0xb0>
    80e0:	ldr	x12, [x9]
    80e4:	cmp	x12, #0x8
    80e8:	b.hi	815c <lzma_vli_encode@@XZ_5.0+0xb0>  // b.pmore
    80ec:	lsl	x11, x12, #3
    80f0:	sub	x11, x11, x12
    80f4:	lsr	x11, x8, x11
    80f8:	add	x8, x12, #0x1
    80fc:	cmp	x11, #0x80
    8100:	b.cc	8140 <lzma_vli_encode@@XZ_5.0+0x94>  // b.lo, b.ul, b.last
    8104:	orr	w12, w11, #0x80
    8108:	str	x8, [x9]
    810c:	strb	w12, [x2, x10]
    8110:	add	x10, x10, #0x1
    8114:	lsr	x11, x11, #7
    8118:	cmp	x4, x10
    811c:	add	x8, x8, #0x1
    8120:	str	x10, [x3]
    8124:	b.ne	80fc <lzma_vli_encode@@XZ_5.0+0x50>  // b.any
    8128:	add	x8, sp, #0x8
    812c:	cmp	x9, x8
    8130:	mov	w8, #0xb                   	// #11
    8134:	csel	w0, w8, wzr, eq  // eq = none
    8138:	add	sp, sp, #0x10
    813c:	ret
    8140:	strb	w11, [x2, x10]
    8144:	add	x11, sp, #0x8
    8148:	cmp	x9, x11
    814c:	add	x10, x10, #0x1
    8150:	cset	w0, ne  // ne = any
    8154:	str	x10, [x3]
    8158:	str	x8, [x9]
    815c:	add	sp, sp, #0x10
    8160:	ret
    8164:	mov	x8, x0
    8168:	lsr	x9, x0, #48
    816c:	mov	x0, #0xffffffffffffffff    	// #-1
    8170:	cbnz	x9, 8190 <lzma_vli_encode@@XZ_5.0+0xe4>
    8174:	cmp	w1, #0x4, lsl #12
    8178:	b.hi	8190 <lzma_vli_encode@@XZ_5.0+0xe4>  // b.pmore
    817c:	lsl	w9, w1, #1
    8180:	mul	x8, x9, x8
    8184:	mov	w10, #0x28                  	// #40
    8188:	umaddl	x8, w9, w10, x8
    818c:	add	x0, x8, #0x30
    8190:	ret
    8194:	stp	x29, x30, [sp, #-64]!
    8198:	stp	x20, x19, [sp, #48]
    819c:	mov	x19, x0
    81a0:	lsr	x8, x2, #48
    81a4:	mov	w0, #0x8                   	// #8
    81a8:	str	x23, [sp, #16]
    81ac:	stp	x22, x21, [sp, #32]
    81b0:	mov	x29, sp
    81b4:	cbnz	x8, 8274 <lzma_vli_encode@@XZ_5.0+0x1c8>
    81b8:	cmp	w3, #0x4, lsl #12
    81bc:	b.hi	8274 <lzma_vli_encode@@XZ_5.0+0x1c8>  // b.pmore
    81c0:	ldr	x8, [x19, #16]
    81c4:	mov	x21, x2
    81c8:	mov	x20, x1
    81cc:	lsl	w23, w3, #1
    81d0:	cmp	x8, x2
    81d4:	b.ne	81e4 <lzma_vli_encode@@XZ_5.0+0x138>  // b.any
    81d8:	ldr	w8, [x19, #24]
    81dc:	cmp	w8, w23
    81e0:	b.eq	8238 <lzma_vli_encode@@XZ_5.0+0x18c>  // b.none
    81e4:	ldr	x0, [x19]
    81e8:	mov	x1, x20
    81ec:	mul	x22, x23, x21
    81f0:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    81f4:	ldr	x0, [x19, #8]
    81f8:	mov	x1, x20
    81fc:	str	xzr, [x19]
    8200:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    8204:	add	x8, x23, x23, lsl #2
    8208:	lsl	x0, x8, #3
    820c:	mov	x1, x20
    8210:	str	xzr, [x19, #8]
    8214:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    8218:	str	x0, [x19]
    821c:	mov	x0, x22
    8220:	mov	x1, x20
    8224:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    8228:	ldr	x8, [x19]
    822c:	str	x0, [x19, #8]
    8230:	cbz	x0, 8250 <lzma_vli_encode@@XZ_5.0+0x1a4>
    8234:	cbz	x8, 8250 <lzma_vli_encode@@XZ_5.0+0x1a4>
    8238:	mov	w0, wzr
    823c:	str	x21, [x19, #16]
    8240:	stp	wzr, wzr, [x19, #28]
    8244:	str	w23, [x19, #24]
    8248:	str	xzr, [x19, #40]
    824c:	b	8274 <lzma_vli_encode@@XZ_5.0+0x1c8>
    8250:	mov	x0, x8
    8254:	mov	x1, x20
    8258:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    825c:	ldr	x0, [x19, #8]
    8260:	mov	x1, x20
    8264:	str	xzr, [x19]
    8268:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    826c:	str	xzr, [x19, #8]
    8270:	mov	w0, #0x5                   	// #5
    8274:	ldp	x20, x19, [sp, #48]
    8278:	ldp	x22, x21, [sp, #32]
    827c:	ldr	x23, [sp, #16]
    8280:	ldp	x29, x30, [sp], #64
    8284:	ret
    8288:	stp	x29, x30, [sp, #-32]!
    828c:	stp	x20, x19, [sp, #16]
    8290:	mov	x19, x0
    8294:	ldr	x0, [x0]
    8298:	mov	x29, sp
    829c:	mov	x20, x1
    82a0:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    82a4:	ldr	x0, [x19, #8]
    82a8:	mov	x1, x20
    82ac:	str	xzr, [x19]
    82b0:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    82b4:	str	xzr, [x19, #8]
    82b8:	ldp	x20, x19, [sp, #16]
    82bc:	ldp	x29, x30, [sp], #32
    82c0:	ret
    82c4:	ldr	w9, [x0, #28]
    82c8:	ldp	x8, x10, [x0]
    82cc:	ldr	x11, [x0, #16]
    82d0:	mov	w12, #0x28                  	// #40
    82d4:	madd	x8, x9, x12, x8
    82d8:	madd	x10, x11, x9, x10
    82dc:	stp	x10, xzr, [x8]
    82e0:	strb	wzr, [x8, #32]
    82e4:	ldr	w10, [x0, #24]
    82e8:	ldr	w11, [x0, #32]
    82ec:	add	w12, w9, #0x1
    82f0:	cmp	w12, w10
    82f4:	add	w10, w11, #0x1
    82f8:	csinc	w9, wzr, w9, eq  // eq = none
    82fc:	stp	w9, w10, [x0, #28]
    8300:	mov	x0, x8
    8304:	ret
    8308:	ldp	w8, w9, [x0, #28]
    830c:	subs	w8, w8, w9
    8310:	b.cs	831c <lzma_vli_encode@@XZ_5.0+0x270>  // b.hs, b.nlast
    8314:	ldr	w9, [x0, #24]
    8318:	add	w8, w9, w8
    831c:	ldr	x9, [x0]
    8320:	mov	w10, #0x28                  	// #40
    8324:	umaddl	x8, w8, w10, x9
    8328:	ldrb	w0, [x8, #32]
    832c:	ret
    8330:	stp	x29, x30, [sp, #-64]!
    8334:	ldr	w8, [x0, #32]
    8338:	stp	x24, x23, [sp, #16]
    833c:	stp	x22, x21, [sp, #32]
    8340:	stp	x20, x19, [sp, #48]
    8344:	mov	x29, sp
    8348:	cbz	w8, 83b4 <lzma_vli_encode@@XZ_5.0+0x308>
    834c:	ldr	w9, [x0, #28]
    8350:	mov	x19, x5
    8354:	mov	x20, x4
    8358:	mov	x5, x3
    835c:	mov	x4, x2
    8360:	mov	x21, x0
    8364:	mov	x3, x1
    8368:	subs	w8, w9, w8
    836c:	b.cs	8378 <lzma_vli_encode@@XZ_5.0+0x2cc>  // b.hs, b.nlast
    8370:	ldr	w9, [x21, #24]
    8374:	add	w8, w9, w8
    8378:	ldr	x22, [x21]
    837c:	mov	w9, #0x28                  	// #40
    8380:	umaddl	x9, w8, w9, x22
    8384:	ldrb	w9, [x9, #32]
    8388:	cbz	w9, 83b4 <lzma_vli_encode@@XZ_5.0+0x308>
    838c:	mov	w23, w8
    8390:	mov	w8, #0x28                  	// #40
    8394:	madd	x24, x23, x8, x22
    8398:	ldp	x0, x2, [x24]
    839c:	add	x1, x21, #0x28
    83a0:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
    83a4:	ldr	x8, [x21, #40]
    83a8:	ldr	x9, [x24, #8]
    83ac:	cmp	x8, x9
    83b0:	b.cs	83bc <lzma_vli_encode@@XZ_5.0+0x310>  // b.hs, b.nlast
    83b4:	mov	w0, wzr
    83b8:	b	83e4 <lzma_vli_encode@@XZ_5.0+0x338>
    83bc:	mov	w8, #0x28                  	// #40
    83c0:	madd	x8, x23, x8, x22
    83c4:	ldp	x9, x8, [x8, #16]
    83c8:	ldr	w10, [x21, #32]
    83cc:	mov	w0, #0x1                   	// #1
    83d0:	str	xzr, [x21, #40]
    83d4:	str	x9, [x20]
    83d8:	sub	w9, w10, #0x1
    83dc:	str	w9, [x21, #32]
    83e0:	str	x8, [x19]
    83e4:	ldp	x20, x19, [sp, #48]
    83e8:	ldp	x22, x21, [sp, #32]
    83ec:	ldp	x24, x23, [sp, #16]
    83f0:	ldp	x29, x30, [sp], #64
    83f4:	ret

00000000000083f8 <lzma_stream_encoder_mt@@XZ_5.2>:
    83f8:	stp	x29, x30, [sp, #-48]!
    83fc:	str	x21, [sp, #16]
    8400:	stp	x20, x19, [sp, #32]
    8404:	mov	x29, sp
    8408:	mov	x21, x1
    840c:	mov	x20, x0
    8410:	bl	3914 <lzma_version_string@@XZ_5.0+0x2b8>
    8414:	mov	w19, w0
    8418:	cbnz	w0, 8454 <lzma_stream_encoder_mt@@XZ_5.2+0x5c>
    841c:	ldp	x1, x0, [x20, #48]
    8420:	mov	x2, x21
    8424:	bl	8468 <lzma_stream_encoder_mt@@XZ_5.2+0x70>
    8428:	mov	w19, w0
    842c:	cbz	w0, 843c <lzma_stream_encoder_mt@@XZ_5.2+0x44>
    8430:	mov	x0, x20
    8434:	bl	32c0 <lzma_end@plt>
    8438:	b	8454 <lzma_stream_encoder_mt@@XZ_5.2+0x5c>
    843c:	ldr	x8, [x20, #56]
    8440:	mov	w9, #0x1                   	// #1
    8444:	mov	w10, #0x101                 	// #257
    8448:	strb	w9, [x8, #88]
    844c:	strh	w10, [x8, #90]
    8450:	strb	w9, [x8, #92]
    8454:	mov	w0, w19
    8458:	ldp	x20, x19, [sp, #32]
    845c:	ldr	x21, [sp, #16]
    8460:	ldp	x29, x30, [sp], #48
    8464:	ret
    8468:	sub	sp, sp, #0x140
    846c:	stp	x29, x30, [sp, #224]
    8470:	stp	x28, x27, [sp, #240]
    8474:	stp	x26, x25, [sp, #256]
    8478:	stp	x24, x23, [sp, #272]
    847c:	stp	x22, x21, [sp, #288]
    8480:	stp	x20, x19, [sp, #304]
    8484:	ldr	x8, [x0, #16]
    8488:	adrp	x21, 8000 <lzma_stream_footer_encode@@XZ_5.0+0x24>
    848c:	add	x21, x21, #0x468
    8490:	mov	x19, x2
    8494:	mov	x23, x0
    8498:	cmp	x8, x21
    849c:	mov	x20, x1
    84a0:	add	x29, sp, #0xe0
    84a4:	b.eq	84b4 <lzma_stream_encoder_mt@@XZ_5.2+0xbc>  // b.none
    84a8:	mov	x0, x23
    84ac:	mov	x1, x20
    84b0:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    84b4:	str	x21, [x23, #16]
    84b8:	cbz	x19, 8548 <lzma_stream_encoder_mt@@XZ_5.2+0x150>
    84bc:	ldr	w8, [x19]
    84c0:	cbnz	w8, 8550 <lzma_stream_encoder_mt@@XZ_5.2+0x158>
    84c4:	ldr	w8, [x19, #4]
    84c8:	sub	w8, w8, #0x1
    84cc:	lsr	w8, w8, #14
    84d0:	cbnz	w8, 8550 <lzma_stream_encoder_mt@@XZ_5.2+0x158>
    84d4:	ldr	x21, [x19, #24]
    84d8:	cbz	x21, 84f0 <lzma_stream_encoder_mt@@XZ_5.2+0xf8>
    84dc:	ldr	x25, [x19, #8]
    84e0:	cbz	x25, 850c <lzma_stream_encoder_mt@@XZ_5.2+0x114>
    84e4:	lsr	x8, x25, #50
    84e8:	cbnz	x8, 8550 <lzma_stream_encoder_mt@@XZ_5.2+0x158>
    84ec:	b	851c <lzma_stream_encoder_mt@@XZ_5.2+0x124>
    84f0:	ldr	w1, [x19, #20]
    84f4:	mov	x0, sp
    84f8:	bl	40fc <lzma_block_total_size@@XZ_5.0+0xb8>
    84fc:	tbnz	w0, #0, 8550 <lzma_stream_encoder_mt@@XZ_5.2+0x158>
    8500:	mov	x21, sp
    8504:	ldr	x25, [x19, #8]
    8508:	cbnz	x25, 84e4 <lzma_stream_encoder_mt@@XZ_5.2+0xec>
    850c:	mov	x0, x21
    8510:	bl	6e74 <lzma_raw_encoder@@XZ_5.0+0x78>
    8514:	mov	x25, x0
    8518:	cbz	x0, 8550 <lzma_stream_encoder_mt@@XZ_5.2+0x158>
    851c:	mov	x0, x25
    8520:	bl	5e40 <lzma_alone_encoder@@XZ_5.0+0x2fc>
    8524:	cbz	x0, 8754 <lzma_stream_encoder_mt@@XZ_5.2+0x35c>
    8528:	mov	x24, x0
    852c:	mov	x0, x21
    8530:	bl	31b0 <lzma_raw_encoder_memusage@plt>
    8534:	cmn	x0, #0x1
    8538:	b.eq	8550 <lzma_stream_encoder_mt@@XZ_5.2+0x158>  // b.none
    853c:	ldr	w0, [x19, #32]
    8540:	cmp	w0, #0xf
    8544:	b.ls	8574 <lzma_stream_encoder_mt@@XZ_5.2+0x17c>  // b.plast
    8548:	mov	w0, #0xb                   	// #11
    854c:	b	8554 <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    8550:	mov	w0, #0x8                   	// #8
    8554:	ldp	x20, x19, [sp, #304]
    8558:	ldp	x22, x21, [sp, #288]
    855c:	ldp	x24, x23, [sp, #272]
    8560:	ldp	x26, x25, [sp, #256]
    8564:	ldp	x28, x27, [sp, #240]
    8568:	ldp	x29, x30, [sp, #224]
    856c:	add	sp, sp, #0x140
    8570:	ret
    8574:	bl	3080 <lzma_check_is_supported@plt>
    8578:	tst	w0, #0xff
    857c:	b.eq	85bc <lzma_stream_encoder_mt@@XZ_5.2+0x1c4>  // b.none
    8580:	ldr	x22, [x23]
    8584:	cbz	x22, 85c4 <lzma_stream_encoder_mt@@XZ_5.2+0x1cc>
    8588:	str	wzr, [x22]
    858c:	str	x25, [x22, #8]
    8590:	str	wzr, [x22, #308]
    8594:	str	xzr, [x22, #336]
    8598:	ldr	w8, [x22, #320]
    859c:	ldr	w9, [x19, #4]
    85a0:	cmp	w8, w9
    85a4:	b.ne	862c <lzma_stream_encoder_mt@@XZ_5.2+0x234>  // b.any
    85a8:	mov	w1, #0x1                   	// #1
    85ac:	mov	x0, x22
    85b0:	bl	9310 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb58>
    85b4:	ldr	w3, [x19, #4]
    85b8:	b	8664 <lzma_stream_encoder_mt@@XZ_5.2+0x26c>
    85bc:	mov	w0, #0x3                   	// #3
    85c0:	b	8554 <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    85c4:	mov	w0, #0x1d0                 	// #464
    85c8:	mov	x1, x20
    85cc:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    85d0:	cbz	x0, 8754 <lzma_stream_encoder_mt@@XZ_5.2+0x35c>
    85d4:	add	x26, x0, #0x168
    85d8:	mov	x22, x0
    85dc:	str	x0, [x23]
    85e0:	mov	x0, x26
    85e4:	mov	x1, xzr
    85e8:	bl	3240 <pthread_mutex_init@plt>
    85ec:	cbnz	w0, 8744 <lzma_stream_encoder_mt@@XZ_5.2+0x34c>
    85f0:	sub	x1, x29, #0x18
    85f4:	mov	w0, #0x1                   	// #1
    85f8:	add	x27, x22, #0x198
    85fc:	bl	30f0 <clock_gettime@plt>
    8600:	cbnz	w0, 8728 <lzma_stream_encoder_mt@@XZ_5.2+0x330>
    8604:	sub	x0, x29, #0x20
    8608:	bl	3350 <pthread_condattr_init@plt>
    860c:	cbnz	w0, 8728 <lzma_stream_encoder_mt@@XZ_5.2+0x330>
    8610:	sub	x0, x29, #0x20
    8614:	mov	w1, #0x1                   	// #1
    8618:	bl	3410 <pthread_condattr_setclock@plt>
    861c:	cbz	w0, 870c <lzma_stream_encoder_mt@@XZ_5.2+0x314>
    8620:	sub	x0, x29, #0x20
    8624:	bl	3170 <pthread_condattr_destroy@plt>
    8628:	b	8728 <lzma_stream_encoder_mt@@XZ_5.2+0x330>
    862c:	mov	x0, x22
    8630:	mov	x1, x20
    8634:	bl	9244 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa8c>
    8638:	stp	xzr, xzr, [x22, #312]
    863c:	str	xzr, [x22, #328]
    8640:	ldr	w8, [x19, #4]
    8644:	mov	w9, #0x1d0                 	// #464
    8648:	mov	x1, x20
    864c:	mul	x0, x8, x9
    8650:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    8654:	str	x0, [x22, #312]
    8658:	cbz	x0, 8754 <lzma_stream_encoder_mt@@XZ_5.2+0x35c>
    865c:	ldr	w3, [x19, #4]
    8660:	str	w3, [x22, #320]
    8664:	add	x0, x22, #0x100
    8668:	mov	x1, x20
    866c:	mov	x2, x24
    8670:	bl	8194 <lzma_vli_encode@@XZ_5.0+0xe8>
    8674:	cbnz	w0, 8554 <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    8678:	ldr	x8, [x22, #16]
    867c:	ldr	w9, [x19, #16]
    8680:	cmn	x8, #0x1
    8684:	str	w9, [x22, #304]
    8688:	b.eq	86a8 <lzma_stream_encoder_mt@@XZ_5.2+0x2b0>  // b.none
    868c:	add	x23, x22, #0x20
    8690:	ldur	x0, [x23, #-8]
    8694:	mov	x1, x20
    8698:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    869c:	ldr	x8, [x23], #16
    86a0:	cmn	x8, #0x1
    86a4:	b.ne	8690 <lzma_stream_encoder_mt@@XZ_5.2+0x298>  // b.any
    86a8:	add	x1, x22, #0x10
    86ac:	mov	x0, x21
    86b0:	mov	x2, x20
    86b4:	bl	31d0 <lzma_filters_copy@plt>
    86b8:	cbnz	w0, 8554 <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    86bc:	ldr	x0, [x22, #96]
    86c0:	mov	x1, x20
    86c4:	bl	3360 <lzma_index_end@plt>
    86c8:	mov	x0, x20
    86cc:	bl	3330 <lzma_index_init@plt>
    86d0:	str	x0, [x22, #96]
    86d4:	cbz	x0, 8754 <lzma_stream_encoder_mt@@XZ_5.2+0x35c>
    86d8:	mov	x0, x22
    86dc:	str	wzr, [x0, #176]!
    86e0:	ldr	w8, [x19, #32]
    86e4:	add	x1, x0, #0x38
    86e8:	str	w8, [x0, #16]
    86ec:	bl	3310 <lzma_stream_header_encode@plt>
    86f0:	cbnz	w0, 8554 <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    86f4:	adrp	x8, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    86f8:	ldr	q0, [x8, #1040]
    86fc:	add	x8, x22, #0x158
    8700:	str	xzr, [x22, #248]
    8704:	str	q0, [x8]
    8708:	b	8554 <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    870c:	sub	x1, x29, #0x20
    8710:	mov	x0, x27
    8714:	bl	33a0 <pthread_cond_init@plt>
    8718:	mov	w28, w0
    871c:	sub	x0, x29, #0x20
    8720:	bl	3170 <pthread_condattr_destroy@plt>
    8724:	cbz	w28, 875c <lzma_stream_encoder_mt@@XZ_5.2+0x364>
    8728:	mov	x0, x27
    872c:	mov	x1, xzr
    8730:	str	wzr, [x22, #456]
    8734:	bl	33a0 <pthread_cond_init@plt>
    8738:	cbz	w0, 8764 <lzma_stream_encoder_mt@@XZ_5.2+0x36c>
    873c:	mov	x0, x26
    8740:	bl	3390 <pthread_mutex_destroy@plt>
    8744:	mov	x0, x22
    8748:	mov	x1, x20
    874c:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    8750:	str	xzr, [x23]
    8754:	mov	w0, #0x5                   	// #5
    8758:	b	8554 <lzma_stream_encoder_mt@@XZ_5.2+0x15c>
    875c:	mov	w8, #0x1                   	// #1
    8760:	str	w8, [x22, #456]
    8764:	adrp	x8, 8000 <lzma_stream_footer_encode@@XZ_5.0+0x24>
    8768:	adrp	x9, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    876c:	add	x8, x8, #0x8dc
    8770:	add	x9, x9, #0xfc
    8774:	stp	x8, x9, [x23, #24]
    8778:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    877c:	add	x8, x8, #0x18c
    8780:	str	x8, [x23, #40]
    8784:	mov	x8, #0xffffffffffffffff    	// #-1
    8788:	movi	v0.2d, #0x0
    878c:	str	x8, [x22, #16]
    8790:	stp	xzr, x8, [x22, #104]
    8794:	str	xzr, [x22, #96]
    8798:	stp	q0, q0, [x22, #256]
    879c:	str	q0, [x22, #288]
    87a0:	stp	xzr, xzr, [x22, #312]
    87a4:	stur	q0, [x22, #120]
    87a8:	stur	q0, [x22, #136]
    87ac:	stur	q0, [x22, #152]
    87b0:	str	xzr, [x22, #168]
    87b4:	b	8588 <lzma_stream_encoder_mt@@XZ_5.2+0x190>

00000000000087b8 <lzma_stream_encoder_mt_memusage@@XZ_5.2>:
    87b8:	sub	sp, sp, #0x100
    87bc:	stp	x29, x30, [sp, #192]
    87c0:	str	x23, [sp, #208]
    87c4:	stp	x22, x21, [sp, #224]
    87c8:	stp	x20, x19, [sp, #240]
    87cc:	add	x29, sp, #0xc0
    87d0:	cbz	x0, 88b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    87d4:	ldr	w8, [x0]
    87d8:	mov	x19, x0
    87dc:	cbnz	w8, 88b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    87e0:	ldr	w8, [x19, #4]
    87e4:	sub	w8, w8, #0x1
    87e8:	lsr	w8, w8, #14
    87ec:	cbnz	w8, 88b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    87f0:	ldr	x21, [x19, #24]
    87f4:	cbz	x21, 880c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x54>
    87f8:	ldr	x20, [x19, #8]
    87fc:	cbz	x20, 8828 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x70>
    8800:	lsr	x8, x20, #50
    8804:	cbnz	x8, 88b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    8808:	b	8838 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x80>
    880c:	ldr	w1, [x19, #20]
    8810:	mov	x0, sp
    8814:	bl	40fc <lzma_block_total_size@@XZ_5.0+0xb8>
    8818:	tbnz	w0, #0, 88b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    881c:	mov	x21, sp
    8820:	ldr	x20, [x19, #8]
    8824:	cbnz	x20, 8800 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x48>
    8828:	mov	x0, x21
    882c:	bl	6e74 <lzma_raw_encoder@@XZ_5.0+0x78>
    8830:	mov	x20, x0
    8834:	cbz	x0, 88b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    8838:	mov	x0, x20
    883c:	bl	5e40 <lzma_alone_encoder@@XZ_5.0+0x2fc>
    8840:	cbz	x0, 88b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>
    8844:	ldr	w22, [x19, #4]
    8848:	mov	x23, x0
    884c:	mov	x0, x21
    8850:	bl	31b0 <lzma_raw_encoder_memusage@plt>
    8854:	cmn	x0, #0x1
    8858:	b.eq	88b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc>  // b.none
    885c:	mov	x21, x0
    8860:	mov	x0, x23
    8864:	mov	w1, w22
    8868:	bl	8164 <lzma_vli_encode@@XZ_5.0+0xb8>
    886c:	cmn	x0, #0x1
    8870:	b.eq	88b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc>  // b.none
    8874:	ldr	w9, [x19, #4]
    8878:	mov	w10, #0x1d0                 	// #464
    887c:	mul	x8, x20, x22
    8880:	mul	x10, x9, x10
    8884:	mov	x9, #0xffffffffffff7e2f    	// #-33233
    8888:	sub	x9, x9, x10
    888c:	cmp	x9, x8
    8890:	b.cc	88b0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf8>  // b.lo, b.ul, b.last
    8894:	add	x8, x8, x10
    8898:	mov	w10, #0x81d0                	// #33232
    889c:	add	x8, x8, x10
    88a0:	mul	x9, x21, x22
    88a4:	mvn	x10, x8
    88a8:	cmp	x9, x10
    88ac:	b.ls	88cc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x114>  // b.plast
    88b0:	mov	x0, #0xffffffffffffffff    	// #-1
    88b4:	ldp	x20, x19, [sp, #240]
    88b8:	ldp	x22, x21, [sp, #224]
    88bc:	ldr	x23, [sp, #208]
    88c0:	ldp	x29, x30, [sp, #192]
    88c4:	add	sp, sp, #0x100
    88c8:	ret
    88cc:	add	x8, x8, x9
    88d0:	adds	x8, x8, x0
    88d4:	csinv	x0, x8, xzr, cc  // cc = lo, ul, last
    88d8:	b	88b4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc>
    88dc:	stp	x29, x30, [sp, #-96]!
    88e0:	stp	x28, x27, [sp, #16]
    88e4:	stp	x26, x25, [sp, #32]
    88e8:	stp	x24, x23, [sp, #48]
    88ec:	stp	x22, x21, [sp, #64]
    88f0:	stp	x20, x19, [sp, #80]
    88f4:	mov	x29, sp
    88f8:	sub	sp, sp, #0x1b0
    88fc:	ldr	w8, [x0]
    8900:	str	x5, [sp, #104]
    8904:	cmp	w8, #0x3
    8908:	b.hi	90a0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8e8>  // b.pmore
    890c:	adrp	x9, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    8910:	add	x9, x9, #0x450
    8914:	adr	x10, 8940 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x188>
    8918:	ldrh	w11, [x9, x8, lsl #1]
    891c:	add	x10, x10, x11, lsl #2
    8920:	mov	x20, x7
    8924:	mov	x21, x6
    8928:	mov	x24, x4
    892c:	mov	x25, x3
    8930:	mov	x26, x2
    8934:	mov	x19, x0
    8938:	mov	x23, x1
    893c:	br	x10
    8940:	ldr	x3, [sp, #104]
    8944:	add	x0, x19, #0xe8
    8948:	add	x1, x19, #0xf8
    894c:	mov	w2, #0xc                   	// #12
    8950:	mov	x4, x21
    8954:	mov	x5, x20
    8958:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
    895c:	ldr	x8, [x19, #248]
    8960:	cmp	x8, #0xc
    8964:	b.cs	8970 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1b8>  // b.hs, b.nlast
    8968:	mov	w22, wzr
    896c:	b	90d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x920>
    8970:	mov	w8, #0x1                   	// #1
    8974:	str	xzr, [x19, #248]
    8978:	str	w8, [x19]
    897c:	add	x8, x19, #0x198
    8980:	str	x8, [sp, #112]
    8984:	adrp	x8, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    8988:	ldr	q0, [x8, #1088]
    898c:	str	x23, [sp, #120]
    8990:	ldr	w23, [x29, #96]
    8994:	mov	w8, #0xc9ff                	// #51711
    8998:	movk	w8, #0x3b9a, lsl #16
    899c:	str	q0, [sp, #64]
    89a0:	fmov	d0, x8
    89a4:	str	wzr, [sp, #100]
    89a8:	stp	xzr, xzr, [sp, #144]
    89ac:	add	x27, x19, #0x168
    89b0:	add	x28, x19, #0x100
    89b4:	str	q0, [sp, #48]
    89b8:	b	89c8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x210>
    89bc:	mov	x0, x27
    89c0:	bl	34d0 <pthread_mutex_unlock@plt>
    89c4:	tbnz	w22, #0, 8ff4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x83c>
    89c8:	mov	x0, x27
    89cc:	bl	34b0 <pthread_mutex_lock@plt>
    89d0:	ldr	w22, [x19, #308]
    89d4:	cbnz	w22, 89f8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x240>
    89d8:	ldr	x1, [sp, #104]
    89dc:	add	x4, sp, #0x98
    89e0:	add	x5, sp, #0x90
    89e4:	mov	x0, x28
    89e8:	mov	x2, x21
    89ec:	mov	x3, x20
    89f0:	bl	8330 <lzma_vli_encode@@XZ_5.0+0x284>
    89f4:	mov	w22, w0
    89f8:	mov	x0, x27
    89fc:	bl	34d0 <pthread_mutex_unlock@plt>
    8a00:	cmp	w22, #0x1
    8a04:	b.ne	8a28 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x270>  // b.any
    8a08:	ldr	x0, [x19, #96]
    8a0c:	ldp	x3, x2, [sp, #144]
    8a10:	ldr	x1, [sp, #120]
    8a14:	bl	32a0 <lzma_index_append@plt>
    8a18:	ldr	x8, [x21]
    8a1c:	cmp	x8, x20
    8a20:	b.cc	89c8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x210>  // b.lo, b.ul, b.last
    8a24:	mov	w22, w0
    8a28:	cbnz	w22, 8f3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x784>
    8a2c:	ldr	x22, [x25]
    8a30:	ldr	x8, [x19, #336]
    8a34:	cmp	x22, x24
    8a38:	b.cs	8abc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x304>  // b.hs, b.nlast
    8a3c:	cbnz	x8, 8ae4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x32c>
    8a40:	ldr	w8, [x19, #280]
    8a44:	ldr	w9, [x19, #288]
    8a48:	cmp	w9, w8
    8a4c:	b.cs	8ad8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x320>  // b.hs, b.nlast
    8a50:	mov	x0, x27
    8a54:	bl	34b0 <pthread_mutex_lock@plt>
    8a58:	ldr	x8, [x19, #328]
    8a5c:	cbz	x8, 8a6c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b4>
    8a60:	str	x8, [x19, #336]
    8a64:	ldr	x8, [x8, #344]
    8a68:	str	x8, [x19, #328]
    8a6c:	mov	x0, x27
    8a70:	bl	34d0 <pthread_mutex_unlock@plt>
    8a74:	ldr	x22, [x19, #336]
    8a78:	cbz	x22, 8ac8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x310>
    8a7c:	add	x0, x22, #0x160
    8a80:	bl	34b0 <pthread_mutex_lock@plt>
    8a84:	ldr	x8, [x19, #336]
    8a88:	mov	w9, #0x1                   	// #1
    8a8c:	mov	x0, x28
    8a90:	str	w9, [x8]
    8a94:	str	xzr, [x8, #16]
    8a98:	bl	82c4 <lzma_vli_encode@@XZ_5.0+0x218>
    8a9c:	ldr	x8, [x19, #336]
    8aa0:	str	x0, [x8, #24]
    8aa4:	add	x0, x8, #0x190
    8aa8:	bl	3190 <pthread_cond_signal@plt>
    8aac:	ldr	x8, [x19, #336]
    8ab0:	add	x0, x8, #0x160
    8ab4:	bl	34d0 <pthread_mutex_unlock@plt>
    8ab8:	b	8ad8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x320>
    8abc:	cbz	w23, 8d80 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5c8>
    8ac0:	cbnz	x8, 8ae4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x32c>
    8ac4:	b	8d80 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5c8>
    8ac8:	ldr	w9, [x19, #324]
    8acc:	ldr	w8, [x19, #320]
    8ad0:	cmp	w9, w8
    8ad4:	b.ne	8ba0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3e8>  // b.any
    8ad8:	mov	w22, wzr
    8adc:	ldr	x8, [x19, #336]
    8ae0:	cbz	x8, 8d78 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5c0>
    8ae4:	ldp	x3, x9, [x8, #8]
    8ae8:	sub	x4, x29, #0x90
    8aec:	mov	x0, x26
    8af0:	mov	x1, x25
    8af4:	stur	x9, [x29, #-144]
    8af8:	ldr	x5, [x19, #8]
    8afc:	mov	x2, x24
    8b00:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
    8b04:	ldur	x8, [x29, #-144]
    8b08:	ldr	x9, [x19, #8]
    8b0c:	cmp	x8, x9
    8b10:	b.ne	8b1c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x364>  // b.any
    8b14:	mov	w22, #0x1                   	// #1
    8b18:	b	8b34 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x37c>
    8b1c:	ldr	x8, [x25]
    8b20:	cmp	w23, #0x0
    8b24:	cset	w9, ne  // ne = any
    8b28:	cmp	x8, x24
    8b2c:	cset	w8, eq  // eq = none
    8b30:	and	w22, w9, w8
    8b34:	ldr	x8, [x19, #336]
    8b38:	add	x0, x8, #0x160
    8b3c:	bl	34b0 <pthread_mutex_lock@plt>
    8b40:	ldr	x8, [x19, #336]
    8b44:	ldr	w9, [x8]
    8b48:	cbz	w22, 8b7c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3c4>
    8b4c:	cbz	w9, 8d5c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5a4>
    8b50:	ldur	x9, [x29, #-144]
    8b54:	mov	w10, #0x2                   	// #2
    8b58:	add	x0, x8, #0x190
    8b5c:	str	w10, [x8]
    8b60:	str	x9, [x8, #16]
    8b64:	bl	3190 <pthread_cond_signal@plt>
    8b68:	ldr	x8, [x19, #336]
    8b6c:	add	x0, x8, #0x160
    8b70:	bl	34d0 <pthread_mutex_unlock@plt>
    8b74:	str	xzr, [x19, #336]
    8b78:	b	8a2c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x274>
    8b7c:	cbz	w9, 8d5c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5a4>
    8b80:	ldur	x9, [x29, #-144]
    8b84:	add	x0, x8, #0x190
    8b88:	str	x9, [x8, #16]
    8b8c:	bl	3190 <pthread_cond_signal@plt>
    8b90:	ldr	x8, [x19, #336]
    8b94:	add	x0, x8, #0x160
    8b98:	bl	34d0 <pthread_mutex_unlock@plt>
    8b9c:	b	8a2c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x274>
    8ba0:	ldr	x8, [x19, #312]
    8ba4:	ldr	x0, [x19, #8]
    8ba8:	ldr	x1, [sp, #120]
    8bac:	mov	w10, #0x1d0                 	// #464
    8bb0:	stp	x8, x9, [sp, #80]
    8bb4:	madd	x22, x9, x10, x8
    8bb8:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    8bbc:	mov	x8, x22
    8bc0:	str	x0, [x8, #8]!
    8bc4:	cbz	x0, 8c38 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x480>
    8bc8:	str	x8, [sp, #40]
    8bcc:	ldp	x8, x9, [sp, #80]
    8bd0:	mov	w10, #0x1d0                 	// #464
    8bd4:	mov	x1, xzr
    8bd8:	madd	x8, x9, x10, x8
    8bdc:	add	x0, x8, #0x160
    8be0:	str	x0, [sp, #32]
    8be4:	bl	3240 <pthread_mutex_init@plt>
    8be8:	cbnz	w0, 8d18 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x560>
    8bec:	ldp	x9, x10, [sp, #80]
    8bf0:	mov	w8, #0x1d0                 	// #464
    8bf4:	sub	x1, x29, #0x90
    8bf8:	mov	w0, #0x1                   	// #1
    8bfc:	madd	x8, x10, x8, x9
    8c00:	add	x8, x8, #0x190
    8c04:	str	x8, [sp, #24]
    8c08:	bl	30f0 <clock_gettime@plt>
    8c0c:	cbnz	w0, 8c60 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4a8>
    8c10:	add	x0, sp, #0xa0
    8c14:	bl	3350 <pthread_condattr_init@plt>
    8c18:	cbnz	w0, 8c60 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4a8>
    8c1c:	add	x0, sp, #0xa0
    8c20:	mov	w1, #0x1                   	// #1
    8c24:	bl	3410 <pthread_condattr_setclock@plt>
    8c28:	cbz	w0, 8c40 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x488>
    8c2c:	add	x0, sp, #0xa0
    8c30:	bl	3170 <pthread_condattr_destroy@plt>
    8c34:	b	8c60 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4a8>
    8c38:	mov	w22, #0x5                   	// #5
    8c3c:	b	8adc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x324>
    8c40:	ldr	x0, [sp, #24]
    8c44:	add	x1, sp, #0xa0
    8c48:	bl	33a0 <pthread_cond_init@plt>
    8c4c:	str	w0, [sp, #20]
    8c50:	add	x0, sp, #0xa0
    8c54:	bl	3170 <pthread_condattr_destroy@plt>
    8c58:	ldr	w8, [sp, #20]
    8c5c:	cbz	w8, 8d44 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x58c>
    8c60:	ldp	x10, x9, [sp, #80]
    8c64:	ldr	x0, [sp, #24]
    8c68:	mov	w8, #0x1d0                 	// #464
    8c6c:	mov	x1, xzr
    8c70:	madd	x8, x9, x8, x10
    8c74:	str	wzr, [x8, #448]
    8c78:	bl	33a0 <pthread_cond_init@plt>
    8c7c:	cbnz	w0, 8d10 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x558>
    8c80:	str	wzr, [x22]
    8c84:	ldp	x10, x9, [sp, #80]
    8c88:	mov	w8, #0x1d0                 	// #464
    8c8c:	movi	v0.2d, #0x0
    8c90:	add	x0, sp, #0xa0
    8c94:	madd	x8, x9, x8, x10
    8c98:	ldr	x9, [sp, #120]
    8c9c:	stp	xzr, xzr, [x8, #48]
    8ca0:	str	q0, [x8, #112]
    8ca4:	str	xzr, [x8, #128]
    8ca8:	stp	x19, x9, [x8, #32]
    8cac:	mov	x9, #0xffffffffffffffff    	// #-1
    8cb0:	stp	xzr, x9, [x8, #64]
    8cb4:	add	x9, x8, #0x1c8
    8cb8:	str	x9, [sp, #88]
    8cbc:	stp	q0, q0, [x8, #80]
    8cc0:	bl	3110 <sigfillset@plt>
    8cc4:	add	x1, sp, #0xa0
    8cc8:	sub	x2, x29, #0x90
    8ccc:	mov	w0, #0x2                   	// #2
    8cd0:	bl	3060 <pthread_sigmask@plt>
    8cd4:	ldr	x0, [sp, #88]
    8cd8:	adrp	x2, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    8cdc:	mov	x1, xzr
    8ce0:	add	x2, x2, #0x420
    8ce4:	mov	x3, x22
    8ce8:	bl	3250 <pthread_create@plt>
    8cec:	str	w0, [sp, #88]
    8cf0:	sub	x1, x29, #0x90
    8cf4:	mov	w0, #0x2                   	// #2
    8cf8:	mov	x2, xzr
    8cfc:	bl	3060 <pthread_sigmask@plt>
    8d00:	ldr	w8, [sp, #88]
    8d04:	cbz	w8, 8d30 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x578>
    8d08:	ldr	x0, [sp, #24]
    8d0c:	bl	34a0 <pthread_cond_destroy@plt>
    8d10:	ldr	x0, [sp, #32]
    8d14:	bl	3390 <pthread_mutex_destroy@plt>
    8d18:	ldr	x8, [sp, #40]
    8d1c:	ldr	x1, [sp, #120]
    8d20:	ldr	x0, [x8]
    8d24:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    8d28:	mov	w22, #0x5                   	// #5
    8d2c:	b	8adc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x324>
    8d30:	ldr	w8, [x19, #324]
    8d34:	str	x22, [x19, #336]
    8d38:	add	w8, w8, #0x1
    8d3c:	str	w8, [x19, #324]
    8d40:	b	8a7c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2c4>
    8d44:	ldp	x10, x9, [sp, #80]
    8d48:	mov	w8, #0x1d0                 	// #464
    8d4c:	madd	x8, x9, x8, x10
    8d50:	mov	w9, #0x1                   	// #1
    8d54:	str	w9, [x8, #448]
    8d58:	b	8c80 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4c8>
    8d5c:	add	x0, x8, #0x160
    8d60:	bl	34d0 <pthread_mutex_unlock@plt>
    8d64:	mov	x0, x27
    8d68:	bl	34b0 <pthread_mutex_lock@plt>
    8d6c:	ldr	w22, [x19, #308]
    8d70:	mov	x0, x27
    8d74:	bl	34d0 <pthread_mutex_unlock@plt>
    8d78:	cbnz	w22, 8f98 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x7e0>
    8d7c:	ldr	x22, [x25]
    8d80:	cmp	x22, x24
    8d84:	b.ne	8dac <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5f4>  // b.any
    8d88:	cbz	w23, 9004 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x84c>
    8d8c:	cmp	w23, #0x4
    8d90:	b.eq	8ffc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x844>  // b.none
    8d94:	ldr	w8, [x19, #288]
    8d98:	cbnz	w8, 8dac <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x5f4>
    8d9c:	cmp	w23, #0x2
    8da0:	b.eq	8ffc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x844>  // b.none
    8da4:	cmp	w23, #0x3
    8da8:	b.eq	900c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x854>  // b.none
    8dac:	ldr	x8, [x21]
    8db0:	cmp	x8, x20
    8db4:	b.eq	8968 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1b0>  // b.none
    8db8:	ldr	w8, [sp, #100]
    8dbc:	tst	w8, #0xff
    8dc0:	b.ne	8e30 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x678>  // b.any
    8dc4:	ldr	w8, [x19, #304]
    8dc8:	cbz	w8, 8e30 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x678>
    8dcc:	mov	w9, #0x4dd3                	// #19923
    8dd0:	movk	w9, #0x1062, lsl #16
    8dd4:	umull	x9, w8, w9
    8dd8:	ldr	w0, [x19, #456]
    8ddc:	lsr	x9, x9, #38
    8de0:	mov	w10, #0x3e8                 	// #1000
    8de4:	msub	w8, w9, w10, w8
    8de8:	mov	w10, #0x4240                	// #16960
    8dec:	movk	w10, #0xf, lsl #16
    8df0:	mul	w8, w8, w10
    8df4:	sub	x1, x29, #0x90
    8df8:	stp	x9, x8, [sp, #128]
    8dfc:	bl	30f0 <clock_gettime@plt>
    8e00:	ldur	q0, [x29, #-144]
    8e04:	ldr	q1, [sp, #128]
    8e08:	ldp	q3, q2, [sp, #48]
    8e0c:	mov	w8, #0x1                   	// #1
    8e10:	str	w8, [sp, #100]
    8e14:	add	v0.2d, v1.2d, v0.2d
    8e18:	dup	v1.2d, v0.d[1]
    8e1c:	cmgt	v1.2d, v1.2d, v3.2d
    8e20:	add	v2.2d, v0.2d, v2.2d
    8e24:	dup	v1.2d, v1.d[0]
    8e28:	bsl	v1.16b, v2.16b, v0.16b
    8e2c:	str	q1, [sp, #128]
    8e30:	mov	x0, x27
    8e34:	bl	34b0 <pthread_mutex_lock@plt>
    8e38:	cmp	x22, x24
    8e3c:	b.cs	8ec4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x70c>  // b.hs, b.nlast
    8e40:	mov	w22, wzr
    8e44:	ldr	x8, [x19, #328]
    8e48:	cbnz	x8, 8e70 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6b8>
    8e4c:	b	8e80 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6c8>
    8e50:	ldr	x0, [sp, #112]
    8e54:	add	x2, sp, #0x80
    8e58:	mov	x1, x27
    8e5c:	bl	34e0 <pthread_cond_timedwait@plt>
    8e60:	cmp	w0, #0x0
    8e64:	cset	w22, ne  // ne = any
    8e68:	ldr	x8, [x19, #328]
    8e6c:	cbz	x8, 8e80 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6c8>
    8e70:	ldr	w8, [x19, #280]
    8e74:	ldr	w9, [x19, #288]
    8e78:	cmp	w9, w8
    8e7c:	b.cc	89bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x204>  // b.lo, b.ul, b.last
    8e80:	mov	x0, x28
    8e84:	bl	8308 <lzma_vli_encode@@XZ_5.0+0x25c>
    8e88:	tbnz	w0, #0, 89bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x204>
    8e8c:	ldr	w8, [x19, #308]
    8e90:	cmp	w8, #0x0
    8e94:	cset	w8, ne  // ne = any
    8e98:	orr	w8, w22, w8
    8e9c:	tbnz	w8, #0, 89bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x204>
    8ea0:	ldr	w8, [x19, #304]
    8ea4:	cbnz	w8, 8e50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x698>
    8ea8:	ldr	x0, [sp, #112]
    8eac:	mov	x1, x27
    8eb0:	bl	3320 <pthread_cond_wait@plt>
    8eb4:	mov	w22, wzr
    8eb8:	ldr	x8, [x19, #328]
    8ebc:	cbnz	x8, 8e70 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6b8>
    8ec0:	b	8e80 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x6c8>
    8ec4:	mov	x0, x28
    8ec8:	bl	8308 <lzma_vli_encode@@XZ_5.0+0x25c>
    8ecc:	tbz	w0, #0, 8edc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x724>
    8ed0:	mov	x0, x27
    8ed4:	bl	34d0 <pthread_mutex_unlock@plt>
    8ed8:	b	89c8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x210>
    8edc:	mov	w22, wzr
    8ee0:	b	8f00 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x748>
    8ee4:	ldr	x0, [sp, #112]
    8ee8:	mov	x1, x27
    8eec:	bl	3320 <pthread_cond_wait@plt>
    8ef0:	mov	w22, wzr
    8ef4:	mov	x0, x28
    8ef8:	bl	8308 <lzma_vli_encode@@XZ_5.0+0x25c>
    8efc:	tbnz	w0, #0, 89bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x204>
    8f00:	tbnz	w22, #0, 89bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x204>
    8f04:	ldr	w8, [x19, #308]
    8f08:	cbnz	w8, 89bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x204>
    8f0c:	ldr	w8, [x19, #304]
    8f10:	cbz	w8, 8ee4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x72c>
    8f14:	ldr	x0, [sp, #112]
    8f18:	add	x2, sp, #0x80
    8f1c:	mov	x1, x27
    8f20:	bl	34e0 <pthread_cond_timedwait@plt>
    8f24:	cmp	w0, #0x0
    8f28:	cset	w22, ne  // ne = any
    8f2c:	mov	x0, x28
    8f30:	bl	8308 <lzma_vli_encode@@XZ_5.0+0x25c>
    8f34:	tbz	w0, #0, 8f00 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x748>
    8f38:	b	89bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x204>
    8f3c:	ldr	w8, [x19, #324]
    8f40:	cbz	w8, 90d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x920>
    8f44:	mov	x20, xzr
    8f48:	mov	w21, #0x160                 	// #352
    8f4c:	mov	w23, #0x3                   	// #3
    8f50:	ldr	x8, [x19, #312]
    8f54:	add	x0, x8, x21
    8f58:	bl	34b0 <pthread_mutex_lock@plt>
    8f5c:	ldr	x8, [x19, #312]
    8f60:	add	x8, x8, x21
    8f64:	sub	x9, x8, #0x160
    8f68:	add	x0, x8, #0x30
    8f6c:	str	w23, [x9]
    8f70:	bl	3190 <pthread_cond_signal@plt>
    8f74:	ldr	x8, [x19, #312]
    8f78:	add	x0, x8, x21
    8f7c:	bl	34d0 <pthread_mutex_unlock@plt>
    8f80:	ldr	w8, [x19, #324]
    8f84:	add	x20, x20, #0x1
    8f88:	add	x21, x21, #0x1d0
    8f8c:	cmp	x20, x8
    8f90:	b.cc	8f50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x798>  // b.lo, b.ul, b.last
    8f94:	b	90d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x920>
    8f98:	ldr	w8, [x19, #324]
    8f9c:	cbz	w8, 90d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x920>
    8fa0:	mov	x20, xzr
    8fa4:	mov	w21, #0x160                 	// #352
    8fa8:	mov	w23, #0x3                   	// #3
    8fac:	ldr	x8, [x19, #312]
    8fb0:	add	x0, x8, x21
    8fb4:	bl	34b0 <pthread_mutex_lock@plt>
    8fb8:	ldr	x8, [x19, #312]
    8fbc:	add	x8, x8, x21
    8fc0:	sub	x9, x8, #0x160
    8fc4:	add	x0, x8, #0x30
    8fc8:	str	w23, [x9]
    8fcc:	bl	3190 <pthread_cond_signal@plt>
    8fd0:	ldr	x8, [x19, #312]
    8fd4:	add	x0, x8, x21
    8fd8:	bl	34d0 <pthread_mutex_unlock@plt>
    8fdc:	ldr	w8, [x19, #324]
    8fe0:	add	x20, x20, #0x1
    8fe4:	add	x21, x21, #0x1d0
    8fe8:	cmp	x20, x8
    8fec:	b.cc	8fac <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x7f4>  // b.lo, b.ul, b.last
    8ff0:	b	90d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x920>
    8ff4:	mov	w22, #0x20                  	// #32
    8ff8:	b	90d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x920>
    8ffc:	mov	w22, #0x1                   	// #1
    9000:	b	90d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x920>
    9004:	mov	w22, w23
    9008:	b	90d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x920>
    900c:	ldr	x23, [sp, #120]
    9010:	ldr	x2, [x19, #96]
    9014:	add	x0, x19, #0x68
    9018:	mov	x1, x23
    901c:	bl	7208 <lzma_filter_flags_encode@@XZ_5.0+0xc8>
    9020:	mov	w22, w0
    9024:	cbnz	w0, 90d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x920>
    9028:	ldr	x0, [x19, #96]
    902c:	mov	w8, #0x2                   	// #2
    9030:	str	w8, [x19]
    9034:	bl	3490 <lzma_index_size@plt>
    9038:	ldr	x8, [x19, #352]
    903c:	add	x8, x0, x8
    9040:	add	x8, x8, #0xc
    9044:	str	x8, [x19, #352]
    9048:	ldr	x8, [x19, #128]
    904c:	ldr	x0, [x19, #104]
    9050:	ldr	x5, [sp, #104]
    9054:	mov	x1, x23
    9058:	mov	x2, xzr
    905c:	mov	x3, xzr
    9060:	mov	x4, xzr
    9064:	mov	x6, x21
    9068:	mov	x7, x20
    906c:	str	wzr, [sp]
    9070:	blr	x8
    9074:	mov	w22, w0
    9078:	cmp	w0, #0x1
    907c:	b.ne	90d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x920>  // b.any
    9080:	ldr	x0, [x19, #96]
    9084:	bl	3490 <lzma_index_size@plt>
    9088:	add	x8, x19, #0xb0
    908c:	str	x0, [x19, #184]
    9090:	add	x1, x19, #0xe8
    9094:	mov	x0, x8
    9098:	bl	31a0 <lzma_stream_footer_encode@plt>
    909c:	cbz	w0, 90a8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x8f0>
    90a0:	mov	w22, #0xb                   	// #11
    90a4:	b	90d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x920>
    90a8:	mov	w8, #0x3                   	// #3
    90ac:	str	w8, [x19]
    90b0:	ldr	x3, [sp, #104]
    90b4:	add	x0, x19, #0xe8
    90b8:	add	x1, x19, #0xf8
    90bc:	mov	w2, #0xc                   	// #12
    90c0:	mov	x4, x21
    90c4:	mov	x5, x20
    90c8:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
    90cc:	ldr	x8, [x19, #248]
    90d0:	cmp	x8, #0xb
    90d4:	cset	w22, hi  // hi = pmore
    90d8:	mov	w0, w22
    90dc:	add	sp, sp, #0x1b0
    90e0:	ldp	x20, x19, [sp, #80]
    90e4:	ldp	x22, x21, [sp, #64]
    90e8:	ldp	x24, x23, [sp, #48]
    90ec:	ldp	x26, x25, [sp, #32]
    90f0:	ldp	x28, x27, [sp, #16]
    90f4:	ldp	x29, x30, [sp], #96
    90f8:	ret
    90fc:	stp	x29, x30, [sp, #-48]!
    9100:	str	x21, [sp, #16]
    9104:	stp	x20, x19, [sp, #32]
    9108:	mov	x29, sp
    910c:	mov	x19, x1
    9110:	mov	x20, x0
    9114:	bl	9244 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa8c>
    9118:	add	x0, x20, #0x100
    911c:	mov	x1, x19
    9120:	bl	8288 <lzma_vli_encode@@XZ_5.0+0x1dc>
    9124:	ldr	x8, [x20, #16]
    9128:	cmn	x8, #0x1
    912c:	b.eq	914c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x994>  // b.none
    9130:	add	x21, x20, #0x20
    9134:	ldur	x0, [x21, #-8]
    9138:	mov	x1, x19
    913c:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    9140:	ldr	x8, [x21], #16
    9144:	cmn	x8, #0x1
    9148:	b.ne	9134 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x97c>  // b.any
    914c:	add	x0, x20, #0x68
    9150:	mov	x1, x19
    9154:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    9158:	ldr	x0, [x20, #96]
    915c:	mov	x1, x19
    9160:	bl	3360 <lzma_index_end@plt>
    9164:	add	x0, x20, #0x198
    9168:	bl	34a0 <pthread_cond_destroy@plt>
    916c:	add	x0, x20, #0x168
    9170:	bl	3390 <pthread_mutex_destroy@plt>
    9174:	mov	x0, x20
    9178:	mov	x1, x19
    917c:	ldp	x20, x19, [sp, #32]
    9180:	ldr	x21, [sp, #16]
    9184:	ldp	x29, x30, [sp], #48
    9188:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
    918c:	stp	x29, x30, [sp, #-64]!
    9190:	stp	x22, x21, [sp, #32]
    9194:	add	x21, x0, #0x168
    9198:	mov	x22, x0
    919c:	mov	x0, x21
    91a0:	stp	x24, x23, [sp, #16]
    91a4:	stp	x20, x19, [sp, #48]
    91a8:	mov	x29, sp
    91ac:	mov	x19, x2
    91b0:	mov	x20, x1
    91b4:	bl	34b0 <pthread_mutex_lock@plt>
    91b8:	ldr	x8, [x22, #344]
    91bc:	str	x8, [x20]
    91c0:	ldr	x8, [x22, #352]
    91c4:	str	x8, [x19]
    91c8:	ldr	w8, [x22, #324]
    91cc:	cbz	w8, 922c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa74>
    91d0:	mov	x23, xzr
    91d4:	mov	w24, #0x160                 	// #352
    91d8:	ldr	x8, [x22, #312]
    91dc:	add	x0, x8, x24
    91e0:	bl	34b0 <pthread_mutex_lock@plt>
    91e4:	ldr	x8, [x22, #312]
    91e8:	ldr	x9, [x20]
    91ec:	add	x0, x8, x24
    91f0:	sub	x8, x0, #0x130
    91f4:	ldr	x8, [x8]
    91f8:	sub	x10, x0, #0x128
    91fc:	add	x8, x9, x8
    9200:	str	x8, [x20]
    9204:	ldr	x8, [x10]
    9208:	ldr	x9, [x19]
    920c:	add	x8, x9, x8
    9210:	str	x8, [x19]
    9214:	bl	34d0 <pthread_mutex_unlock@plt>
    9218:	ldr	w8, [x22, #324]
    921c:	add	x23, x23, #0x1
    9220:	add	x24, x24, #0x1d0
    9224:	cmp	x23, x8
    9228:	b.cc	91d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xa20>  // b.lo, b.ul, b.last
    922c:	mov	x0, x21
    9230:	ldp	x20, x19, [sp, #48]
    9234:	ldp	x22, x21, [sp, #32]
    9238:	ldp	x24, x23, [sp, #16]
    923c:	ldp	x29, x30, [sp], #64
    9240:	b	34d0 <pthread_mutex_unlock@plt>
    9244:	stp	x29, x30, [sp, #-64]!
    9248:	stp	x22, x21, [sp, #32]
    924c:	stp	x20, x19, [sp, #48]
    9250:	ldr	w8, [x0, #324]
    9254:	mov	x20, x0
    9258:	mov	x19, x1
    925c:	str	x23, [sp, #16]
    9260:	mov	x29, sp
    9264:	cbz	w8, 92f0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb38>
    9268:	mov	x21, xzr
    926c:	mov	w22, #0x160                 	// #352
    9270:	mov	w23, #0x4                   	// #4
    9274:	ldr	x8, [x20, #312]
    9278:	add	x0, x8, x22
    927c:	bl	34b0 <pthread_mutex_lock@plt>
    9280:	ldr	x8, [x20, #312]
    9284:	add	x8, x8, x22
    9288:	sub	x9, x8, #0x160
    928c:	add	x0, x8, #0x30
    9290:	str	w23, [x9]
    9294:	bl	3190 <pthread_cond_signal@plt>
    9298:	ldr	x8, [x20, #312]
    929c:	add	x0, x8, x22
    92a0:	bl	34d0 <pthread_mutex_unlock@plt>
    92a4:	ldr	w8, [x20, #324]
    92a8:	add	x21, x21, #0x1
    92ac:	add	x22, x22, #0x1d0
    92b0:	cmp	x21, x8
    92b4:	b.cc	9274 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xabc>  // b.lo, b.ul, b.last
    92b8:	add	x21, x20, #0x138
    92bc:	cbz	w8, 92f4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb3c>
    92c0:	mov	x22, xzr
    92c4:	mov	w23, #0x1c8                 	// #456
    92c8:	ldr	x8, [x20, #312]
    92cc:	mov	x1, xzr
    92d0:	ldr	x0, [x8, x23]
    92d4:	bl	3270 <pthread_join@plt>
    92d8:	ldr	w8, [x20, #324]
    92dc:	add	x22, x22, #0x1
    92e0:	add	x23, x23, #0x1d0
    92e4:	cmp	x22, x8
    92e8:	b.cc	92c8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb10>  // b.lo, b.ul, b.last
    92ec:	b	92f4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb3c>
    92f0:	add	x21, x20, #0x138
    92f4:	ldr	x0, [x21]
    92f8:	mov	x1, x19
    92fc:	ldp	x20, x19, [sp, #48]
    9300:	ldp	x22, x21, [sp, #32]
    9304:	ldr	x23, [sp, #16]
    9308:	ldp	x29, x30, [sp], #64
    930c:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
    9310:	stp	x29, x30, [sp, #-64]!
    9314:	stp	x22, x21, [sp, #32]
    9318:	stp	x20, x19, [sp, #48]
    931c:	ldr	w8, [x0, #324]
    9320:	mov	x19, x0
    9324:	mov	w20, w1
    9328:	str	x23, [sp, #16]
    932c:	mov	x29, sp
    9330:	cbz	w8, 9394 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbdc>
    9334:	mov	x21, xzr
    9338:	mov	w22, #0x160                 	// #352
    933c:	mov	w23, #0x3                   	// #3
    9340:	ldr	x8, [x19, #312]
    9344:	add	x0, x8, x22
    9348:	bl	34b0 <pthread_mutex_lock@plt>
    934c:	ldr	x8, [x19, #312]
    9350:	add	x8, x8, x22
    9354:	sub	x9, x8, #0x160
    9358:	add	x0, x8, #0x30
    935c:	str	w23, [x9]
    9360:	bl	3190 <pthread_cond_signal@plt>
    9364:	ldr	x8, [x19, #312]
    9368:	add	x0, x8, x22
    936c:	bl	34d0 <pthread_mutex_unlock@plt>
    9370:	ldr	w8, [x19, #324]
    9374:	add	x21, x21, #0x1
    9378:	add	x22, x22, #0x1d0
    937c:	cmp	x21, x8
    9380:	b.cc	9340 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb88>  // b.lo, b.ul, b.last
    9384:	cmp	w8, #0x0
    9388:	cset	w8, eq  // eq = none
    938c:	tbz	w8, #0, 939c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbe4>
    9390:	b	940c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc54>
    9394:	mov	w8, #0x1                   	// #1
    9398:	tbnz	w8, #0, 940c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc54>
    939c:	tbz	w20, #0, 940c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc54>
    93a0:	mov	x20, xzr
    93a4:	mov	w21, #0x1d0                 	// #464
    93a8:	b	93c8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc10>
    93ac:	madd	x8, x20, x21, x8
    93b0:	add	x0, x8, #0x160
    93b4:	bl	34d0 <pthread_mutex_unlock@plt>
    93b8:	ldr	w8, [x19, #324]
    93bc:	add	x20, x20, #0x1
    93c0:	cmp	x20, x8
    93c4:	b.cs	940c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc54>  // b.hs, b.nlast
    93c8:	ldr	x8, [x19, #312]
    93cc:	mul	x22, x20, x21
    93d0:	add	x8, x8, x22
    93d4:	add	x0, x8, #0x160
    93d8:	bl	34b0 <pthread_mutex_lock@plt>
    93dc:	ldr	x8, [x19, #312]
    93e0:	ldr	w9, [x8, x22]
    93e4:	cbz	w9, 93ac <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbf4>
    93e8:	mul	x22, x20, x21
    93ec:	add	x8, x8, x22
    93f0:	add	x1, x8, #0x160
    93f4:	add	x0, x8, #0x190
    93f8:	bl	3320 <pthread_cond_wait@plt>
    93fc:	ldr	x8, [x19, #312]
    9400:	ldr	w9, [x8, x22]
    9404:	cbnz	w9, 93e8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xc30>
    9408:	b	93ac <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xbf4>
    940c:	ldp	x20, x19, [sp, #48]
    9410:	ldp	x22, x21, [sp, #32]
    9414:	ldr	x23, [sp, #16]
    9418:	ldp	x29, x30, [sp], #64
    941c:	ret
    9420:	sub	sp, sp, #0x80
    9424:	stp	x28, x27, [sp, #48]
    9428:	stp	x26, x25, [sp, #64]
    942c:	stp	x24, x23, [sp, #80]
    9430:	stp	x22, x21, [sp, #96]
    9434:	stp	x20, x19, [sp, #112]
    9438:	mov	x19, x0
    943c:	add	x22, x0, #0x160
    9440:	add	x20, x0, #0x190
    9444:	add	x23, x0, #0x88
    9448:	add	x26, x0, #0xb0
    944c:	add	x25, x0, #0x40
    9450:	add	x27, x0, #0x30
    9454:	stp	x29, x30, [sp, #32]
    9458:	add	x29, sp, #0x20
    945c:	str	x25, [sp, #16]
    9460:	b	94cc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd14>
    9464:	mov	x0, x22
    9468:	bl	34d0 <pthread_mutex_unlock@plt>
    946c:	ldr	x8, [x19, #32]
    9470:	cmp	w21, #0x2
    9474:	cset	w21, eq  // eq = none
    9478:	add	x0, x8, #0x168
    947c:	bl	34b0 <pthread_mutex_lock@plt>
    9480:	ldr	x8, [x19, #24]
    9484:	strb	w21, [x8, #32]
    9488:	ldr	x9, [x19, #32]
    948c:	ldr	x10, [x8, #24]
    9490:	ldp	x11, x12, [x9, #344]
    9494:	add	x0, x9, #0x198
    9498:	add	x10, x11, x10
    949c:	str	x10, [x9, #344]
    94a0:	ldr	x8, [x8, #8]
    94a4:	add	x8, x12, x8
    94a8:	str	x8, [x9, #352]
    94ac:	stp	xzr, xzr, [x27]
    94b0:	ldr	x8, [x9, #328]
    94b4:	str	x8, [x19, #344]
    94b8:	str	x19, [x9, #328]
    94bc:	bl	3190 <pthread_cond_signal@plt>
    94c0:	ldr	x8, [x19, #32]
    94c4:	add	x0, x8, #0x168
    94c8:	bl	34d0 <pthread_mutex_unlock@plt>
    94cc:	mov	x0, x22
    94d0:	bl	34b0 <pthread_mutex_lock@plt>
    94d4:	ldr	w21, [x19]
    94d8:	cmp	w21, #0x3
    94dc:	b.ne	94f0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd38>  // b.any
    94e0:	mov	x0, x20
    94e4:	str	wzr, [x19]
    94e8:	bl	3190 <pthread_cond_signal@plt>
    94ec:	ldr	w21, [x19]
    94f0:	cbnz	w21, 9510 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd58>
    94f4:	mov	x0, x20
    94f8:	mov	x1, x22
    94fc:	bl	3320 <pthread_cond_wait@plt>
    9500:	ldr	w21, [x19]
    9504:	cmp	w21, #0x3
    9508:	b.eq	94e0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd28>  // b.none
    950c:	b	94f0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd38>
    9510:	mov	x0, x22
    9514:	bl	34d0 <pthread_mutex_unlock@plt>
    9518:	cmp	w21, #0x3
    951c:	b.cs	97bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1004>  // b.hs, b.nlast
    9520:	ldr	x8, [x19, #32]
    9524:	movi	v0.2d, #0x0
    9528:	mov	x0, x23
    952c:	ldr	w9, [x8, #192]
    9530:	ldr	x10, [x8, #272]
    9534:	ldr	x11, [x8, #8]
    9538:	add	x8, x8, #0x10
    953c:	str	xzr, [x19, #136]
    9540:	stp	w9, wzr, [x19, #144]
    9544:	stp	x11, x8, [x19, #160]
    9548:	str	x10, [x19, #152]
    954c:	stp	q0, q0, [x26, #32]
    9550:	stp	q0, q0, [x26, #64]
    9554:	stp	q0, q0, [x26, #96]
    9558:	stp	q0, q0, [x26, #128]
    955c:	str	xzr, [x26, #160]
    9560:	stp	q0, q0, [x26]
    9564:	bl	3100 <lzma_block_header_size@plt>
    9568:	cbnz	w0, 9580 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xdc8>
    956c:	ldr	x1, [x19, #40]
    9570:	mov	x0, x25
    9574:	mov	x2, x23
    9578:	bl	63ac <lzma_block_uncomp_encode@@XZ_5.2+0x20>
    957c:	cbz	w0, 95bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe04>
    9580:	ldr	x8, [x19, #32]
    9584:	mov	w24, w0
    9588:	add	x0, x8, #0x168
    958c:	bl	34b0 <pthread_mutex_lock@plt>
    9590:	ldr	x8, [x19, #32]
    9594:	ldr	w9, [x8, #308]
    9598:	cbnz	w9, 95a0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xde8>
    959c:	str	w24, [x8, #308]
    95a0:	add	x0, x8, #0x198
    95a4:	bl	3190 <pthread_cond_signal@plt>
    95a8:	ldr	x8, [x19, #32]
    95ac:	add	x0, x8, #0x168
    95b0:	bl	34d0 <pthread_mutex_unlock@plt>
    95b4:	mov	w21, #0x3                   	// #3
    95b8:	b	97c4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x100c>
    95bc:	stur	xzr, [x29, #-8]
    95c0:	ldr	w8, [x19, #140]
    95c4:	ldr	x9, [x19, #24]
    95c8:	mov	x28, xzr
    95cc:	str	x8, [x9, #8]
    95d0:	ldr	x8, [x19, #32]
    95d4:	ldr	x24, [x8, #272]
    95d8:	mov	x0, x22
    95dc:	bl	34b0 <pthread_mutex_lock@plt>
    95e0:	ldur	x8, [x29, #-8]
    95e4:	str	x8, [x19, #48]
    95e8:	ldp	x8, x9, [x19, #16]
    95ec:	ldr	x9, [x9, #8]
    95f0:	cmp	x28, x8
    95f4:	str	x9, [x19, #56]
    95f8:	b.ne	9620 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe68>  // b.any
    95fc:	ldr	w21, [x19]
    9600:	cmp	w21, #0x1
    9604:	b.ne	9628 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe70>  // b.any
    9608:	mov	x0, x20
    960c:	mov	x1, x22
    9610:	bl	3320 <pthread_cond_wait@plt>
    9614:	ldr	x8, [x19, #16]
    9618:	cmp	x28, x8
    961c:	b.eq	95fc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe44>  // b.none
    9620:	ldr	w21, [x19]
    9624:	mov	x28, x8
    9628:	mov	x0, x22
    962c:	bl	34d0 <pthread_mutex_unlock@plt>
    9630:	cmp	w21, #0x2
    9634:	b.hi	97b8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1000>  // b.pmore
    9638:	ldr	x6, [x19, #24]
    963c:	ldur	x9, [x29, #-8]
    9640:	ldr	x10, [x19, #88]
    9644:	ldr	x0, [x19, #64]
    9648:	ldr	x1, [x19, #40]
    964c:	ldr	x2, [x19, #8]
    9650:	ldr	x5, [x6], #8
    9654:	mov	w8, #0x3                   	// #3
    9658:	sub	x11, x28, x9
    965c:	csel	w8, w8, wzr, eq  // eq = none
    9660:	add	x9, x9, #0x4, lsl #12
    9664:	cmp	x11, #0x4, lsl #12
    9668:	csel	w8, wzr, w8, hi  // hi = pmore
    966c:	csel	x4, x9, x28, hi  // hi = pmore
    9670:	sub	x3, x29, #0x8
    9674:	mov	x7, x24
    9678:	str	w8, [sp]
    967c:	blr	x10
    9680:	cbnz	w0, 9720 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf68>
    9684:	ldr	x8, [x19, #24]
    9688:	ldr	x8, [x8, #8]
    968c:	cmp	x8, x24
    9690:	b.cc	95d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xe20>  // b.lo, b.ul, b.last
    9694:	mov	x0, x22
    9698:	bl	34b0 <pthread_mutex_lock@plt>
    969c:	ldr	w21, [x19]
    96a0:	cmp	w21, #0x1
    96a4:	b.ne	96c0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xf08>  // b.any
    96a8:	mov	x0, x20
    96ac:	mov	x1, x22
    96b0:	bl	3320 <pthread_cond_wait@plt>
    96b4:	ldr	w21, [x19]
    96b8:	cmp	w21, #0x1
    96bc:	b.eq	96a8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xef0>  // b.none
    96c0:	ldr	x25, [x19, #16]
    96c4:	mov	x0, x22
    96c8:	bl	34d0 <pthread_mutex_unlock@plt>
    96cc:	cmp	w21, #0x2
    96d0:	b.hi	97b8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1000>  // b.pmore
    96d4:	ldr	x8, [x19, #24]
    96d8:	mov	x0, x23
    96dc:	mov	x2, x25
    96e0:	mov	x5, x24
    96e4:	mov	x4, x8
    96e8:	str	xzr, [x4, #8]!
    96ec:	ldr	x1, [x19, #8]
    96f0:	ldr	x3, [x8]
    96f4:	bl	3440 <lzma_block_uncomp_encode@plt>
    96f8:	cbz	w0, 979c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfe4>
    96fc:	ldr	x8, [x19, #32]
    9700:	add	x0, x8, #0x168
    9704:	bl	34b0 <pthread_mutex_lock@plt>
    9708:	ldr	x8, [x19, #32]
    970c:	ldr	w9, [x8, #308]
    9710:	cbnz	w9, 9780 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc8>
    9714:	mov	w9, #0xb                   	// #11
    9718:	str	w9, [x8, #308]
    971c:	b	9780 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc8>
    9720:	mov	w25, w0
    9724:	cmp	w0, #0x1
    9728:	b.ne	9764 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfac>  // b.any
    972c:	ldr	x8, [x19, #24]
    9730:	mov	x0, x23
    9734:	ldr	x1, [x8]
    9738:	bl	34c0 <lzma_block_header_encode@plt>
    973c:	cbz	w0, 979c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfe4>
    9740:	ldr	x8, [x19, #32]
    9744:	mov	w24, w0
    9748:	add	x0, x8, #0x168
    974c:	bl	34b0 <pthread_mutex_lock@plt>
    9750:	ldr	x8, [x19, #32]
    9754:	ldr	w9, [x8, #308]
    9758:	cbnz	w9, 9780 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc8>
    975c:	str	w24, [x8, #308]
    9760:	b	9780 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc8>
    9764:	ldr	x8, [x19, #32]
    9768:	add	x0, x8, #0x168
    976c:	bl	34b0 <pthread_mutex_lock@plt>
    9770:	ldr	x8, [x19, #32]
    9774:	ldr	w9, [x8, #308]
    9778:	cbnz	w9, 9780 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xfc8>
    977c:	str	w25, [x8, #308]
    9780:	add	x0, x8, #0x198
    9784:	bl	3190 <pthread_cond_signal@plt>
    9788:	ldr	x8, [x19, #32]
    978c:	add	x0, x8, #0x168
    9790:	bl	34d0 <pthread_mutex_unlock@plt>
    9794:	mov	w21, #0x3                   	// #3
    9798:	b	97b8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1000>
    979c:	mov	x0, x23
    97a0:	bl	3130 <lzma_block_unpadded_size@plt>
    97a4:	ldr	x8, [x19, #24]
    97a8:	mov	w21, #0x2                   	// #2
    97ac:	str	x0, [x8, #16]
    97b0:	ldr	x9, [x19, #160]
    97b4:	str	x9, [x8, #24]
    97b8:	ldr	x25, [sp, #16]
    97bc:	cmp	w21, #0x4
    97c0:	b.eq	97e8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1030>  // b.none
    97c4:	mov	x0, x22
    97c8:	bl	34b0 <pthread_mutex_lock@plt>
    97cc:	ldr	w8, [x19]
    97d0:	cmp	w8, #0x4
    97d4:	b.eq	9464 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcac>  // b.none
    97d8:	mov	x0, x20
    97dc:	str	wzr, [x19]
    97e0:	bl	3190 <pthread_cond_signal@plt>
    97e4:	b	9464 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcac>
    97e8:	mov	x0, x22
    97ec:	bl	3390 <pthread_mutex_destroy@plt>
    97f0:	mov	x0, x20
    97f4:	bl	34a0 <pthread_cond_destroy@plt>
    97f8:	ldr	x1, [x19, #40]
    97fc:	mov	x0, x25
    9800:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    9804:	ldr	x0, [x19, #8]
    9808:	ldr	x1, [x19, #40]
    980c:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    9810:	ldp	x20, x19, [sp, #112]
    9814:	ldp	x22, x21, [sp, #96]
    9818:	ldp	x24, x23, [sp, #80]
    981c:	ldp	x26, x25, [sp, #64]
    9820:	ldp	x28, x27, [sp, #48]
    9824:	ldp	x29, x30, [sp, #32]
    9828:	mov	x0, xzr
    982c:	add	sp, sp, #0x80
    9830:	ret
    9834:	stp	x29, x30, [sp, #-64]!
    9838:	stp	x22, x21, [sp, #32]
    983c:	stp	x20, x19, [sp, #48]
    9840:	ldr	x8, [x0, #16]
    9844:	str	x23, [sp, #16]
    9848:	adrp	x23, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    984c:	add	x23, x23, #0x834
    9850:	mov	w20, w3
    9854:	mov	x19, x2
    9858:	mov	x21, x0
    985c:	cmp	x8, x23
    9860:	mov	x22, x1
    9864:	mov	x29, sp
    9868:	b.eq	9878 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x10c0>  // b.none
    986c:	mov	x0, x21
    9870:	mov	x1, x22
    9874:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    9878:	ldr	x0, [x21]
    987c:	str	x23, [x21, #16]
    9880:	cbnz	x0, 98d0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1118>
    9884:	mov	w0, #0xe0                  	// #224
    9888:	mov	x1, x22
    988c:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    9890:	cbz	x0, 9918 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1160>
    9894:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    9898:	adrp	x9, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    989c:	adrp	x10, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    98a0:	add	x8, x8, #0x920
    98a4:	add	x9, x9, #0xba8
    98a8:	add	x10, x10, #0xbd4
    98ac:	mov	x11, #0xffffffffffffffff    	// #-1
    98b0:	movi	v0.2d, #0x0
    98b4:	str	x0, [x21]
    98b8:	stp	x8, x9, [x21, #24]
    98bc:	str	x10, [x21, #56]
    98c0:	stp	xzr, x11, [x0]
    98c4:	stp	q0, q0, [x0, #16]
    98c8:	str	q0, [x0, #48]
    98cc:	str	xzr, [x0, #64]
    98d0:	and	w9, w20, #0x1
    98d4:	cmp	x19, #0x0
    98d8:	mov	w8, wzr
    98dc:	mov	w10, #0x8000                	// #32768
    98e0:	strb	w9, [x0, #76]
    98e4:	csinc	x9, x19, xzr, ne  // ne = any
    98e8:	str	wzr, [x0, #72]
    98ec:	str	wzr, [x0, #112]
    98f0:	str	xzr, [x0, #120]
    98f4:	str	wzr, [x0, #128]
    98f8:	stp	xzr, xzr, [x0, #80]
    98fc:	stp	x9, x10, [x0, #96]
    9900:	ldp	x20, x19, [sp, #48]
    9904:	ldp	x22, x21, [sp, #32]
    9908:	ldr	x23, [sp, #16]
    990c:	mov	w0, w8
    9910:	ldp	x29, x30, [sp], #64
    9914:	ret
    9918:	mov	w8, #0x5                   	// #5
    991c:	b	9900 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1148>
    9920:	sub	sp, sp, #0xb0
    9924:	ldr	x8, [x6]
    9928:	stp	x29, x30, [sp, #80]
    992c:	stp	x28, x27, [sp, #96]
    9930:	stp	x26, x25, [sp, #112]
    9934:	cmp	x8, x7
    9938:	stp	x24, x23, [sp, #128]
    993c:	stp	x22, x21, [sp, #144]
    9940:	stp	x20, x19, [sp, #160]
    9944:	add	x29, sp, #0x50
    9948:	b.cs	9b38 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1380>  // b.hs, b.nlast
    994c:	ldr	w8, [x29, #96]
    9950:	ldr	w9, [x0, #72]
    9954:	adrp	x28, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    9958:	mov	x19, x7
    995c:	str	w8, [sp, #20]
    9960:	add	x8, sp, #0x20
    9964:	mov	x20, x6
    9968:	mov	x22, x4
    996c:	mov	x23, x3
    9970:	mov	x24, x2
    9974:	mov	x25, x1
    9978:	mov	x26, x0
    997c:	add	x27, x0, #0x70
    9980:	add	x28, x28, #0x458
    9984:	add	x21, x8, #0x18
    9988:	str	x5, [sp, #24]
    998c:	b	99a8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11f0>
    9990:	mov	w9, #0x1                   	// #1
    9994:	add	x8, x8, #0x1
    9998:	str	x8, [x23]
    999c:	ldr	x8, [x20]
    99a0:	cmp	x8, x19
    99a4:	b.cs	9b38 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1380>  // b.hs, b.nlast
    99a8:	cmp	w9, #0x4
    99ac:	b.eq	9b5c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13a4>  // b.none
    99b0:	ldr	x8, [x23]
    99b4:	cmp	x8, x22
    99b8:	b.cs	9b38 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1380>  // b.hs, b.nlast
    99bc:	cmp	w9, #0x3
    99c0:	b.hi	9b90 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13d8>  // b.pmore
    99c4:	mov	w9, w9
    99c8:	adr	x10, 99d8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1220>
    99cc:	ldrb	w11, [x28, x9]
    99d0:	add	x10, x10, x11, lsl #2
    99d4:	br	x10
    99d8:	ldrb	w1, [x24, x8]
    99dc:	mov	x0, x27
    99e0:	bl	188a8 <lzma_mode_is_supported@@XZ_5.0+0x6be4>
    99e4:	tbnz	w0, #0, 9b98 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13e0>
    99e8:	mov	w9, #0x1                   	// #1
    99ec:	str	w9, [x26, #72]
    99f0:	ldr	x8, [x23]
    99f4:	b	9994 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11dc>
    99f8:	ldr	x9, [x26, #80]
    99fc:	ldrb	w10, [x24, x8]
    9a00:	ldr	w11, [x26, #112]
    9a04:	lsl	x12, x9, #3
    9a08:	add	x13, x9, #0x1
    9a0c:	lsl	x9, x10, x12
    9a10:	cmp	x13, #0x4
    9a14:	orr	w9, w11, w9
    9a18:	str	w9, [x26, #112]
    9a1c:	str	x13, [x26, #80]
    9a20:	b.ne	9990 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11d8>  // b.any
    9a24:	cmn	w9, #0x1
    9a28:	b.eq	9a58 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12a0>  // b.none
    9a2c:	ldrb	w10, [x26, #76]
    9a30:	cbz	w10, 9a58 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12a0>
    9a34:	sub	w10, w9, #0x1
    9a38:	orr	w10, w10, w10, lsr #2
    9a3c:	orr	w10, w10, w10, lsr #3
    9a40:	orr	w10, w10, w10, lsr #4
    9a44:	orr	w10, w10, w10, lsr #8
    9a48:	orr	w10, w10, w10, lsr #16
    9a4c:	add	w10, w10, #0x1
    9a50:	cmp	w10, w9
    9a54:	b.ne	9b98 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13e0>  // b.any
    9a58:	mov	w9, #0x2                   	// #2
    9a5c:	str	xzr, [x26, #80]
    9a60:	str	w9, [x26, #72]
    9a64:	b	9994 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11dc>
    9a68:	ldp	x9, x11, [x26, #80]
    9a6c:	ldrb	w10, [x24, x8]
    9a70:	add	x12, x8, #0x1
    9a74:	lsl	x8, x9, #3
    9a78:	add	x9, x9, #0x1
    9a7c:	lsl	x8, x10, x8
    9a80:	cmp	x9, #0x8
    9a84:	orr	x8, x8, x11
    9a88:	stp	x9, x8, [x26, #80]
    9a8c:	str	x12, [x23]
    9a90:	b.cs	9aac <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x12f4>  // b.hs, b.nlast
    9a94:	mov	w9, #0x2                   	// #2
    9a98:	b	999c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11e4>
    9a9c:	ldp	x9, x8, [x26, #96]
    9aa0:	cmp	x8, x9
    9aa4:	b.ls	9af4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x133c>  // b.plast
    9aa8:	b	9ba0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13e8>
    9aac:	mov	x9, #0xffffffc000000000    	// #-274877906944
    9ab0:	add	x8, x8, x9
    9ab4:	mov	x9, #0xfffffffffffffffe    	// #-2
    9ab8:	movk	x9, #0xffbf, lsl #32
    9abc:	cmp	x8, x9
    9ac0:	b.hi	9acc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1314>  // b.pmore
    9ac4:	ldrb	w8, [x26, #76]
    9ac8:	cbnz	w8, 9b98 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13e0>
    9acc:	mov	x0, x27
    9ad0:	bl	18934 <lzma_mode_is_supported@@XZ_5.0+0x6c70>
    9ad4:	add	x8, x0, #0x8, lsl #12
    9ad8:	mov	w9, #0x3                   	// #3
    9adc:	str	xzr, [x26, #80]
    9ae0:	str	x8, [x26, #104]
    9ae4:	str	w9, [x26, #72]
    9ae8:	ldr	x9, [x26, #96]
    9aec:	cmp	x8, x9
    9af0:	b.hi	9ba0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x13e8>  // b.pmore
    9af4:	str	xzr, [sp, #32]
    9af8:	adrp	x8, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    9afc:	ldr	x8, [x8, #3944]
    9b00:	add	x2, sp, #0x20
    9b04:	mov	x0, x26
    9b08:	mov	x1, x25
    9b0c:	stp	x8, x27, [sp, #40]
    9b10:	stp	xzr, xzr, [x21]
    9b14:	str	xzr, [x21, #16]
    9b18:	bl	3790 <lzma_version_string@@XZ_5.0+0x134>
    9b1c:	cbnz	w0, 9b3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1384>
    9b20:	ldr	x0, [x26]
    9b24:	ldr	x1, [x26, #88]
    9b28:	bl	10478 <lzma_mf_is_supported@@XZ_5.0+0x2484>
    9b2c:	mov	w9, #0x4                   	// #4
    9b30:	str	w9, [x26, #72]
    9b34:	b	999c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x11e4>
    9b38:	mov	w0, wzr
    9b3c:	ldp	x20, x19, [sp, #160]
    9b40:	ldp	x22, x21, [sp, #144]
    9b44:	ldp	x24, x23, [sp, #128]
    9b48:	ldp	x26, x25, [sp, #112]
    9b4c:	ldp	x28, x27, [sp, #96]
    9b50:	ldp	x29, x30, [sp, #80]
    9b54:	add	sp, sp, #0xb0
    9b58:	ret
    9b5c:	ldr	x8, [x26, #24]
    9b60:	ldr	x0, [x26]
    9b64:	ldr	w9, [sp, #20]
    9b68:	ldr	x5, [sp, #24]
    9b6c:	mov	x1, x25
    9b70:	mov	x2, x24
    9b74:	mov	x3, x23
    9b78:	mov	x4, x22
    9b7c:	mov	x6, x20
    9b80:	mov	x7, x19
    9b84:	str	w9, [sp]
    9b88:	blr	x8
    9b8c:	b	9b3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1384>
    9b90:	mov	w0, #0xb                   	// #11
    9b94:	b	9b3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1384>
    9b98:	mov	w0, #0x7                   	// #7
    9b9c:	b	9b3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1384>
    9ba0:	mov	w0, #0x6                   	// #6
    9ba4:	b	9b3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1384>
    9ba8:	stp	x29, x30, [sp, #-32]!
    9bac:	stp	x20, x19, [sp, #16]
    9bb0:	mov	x29, sp
    9bb4:	mov	x19, x1
    9bb8:	mov	x20, x0
    9bbc:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    9bc0:	mov	x0, x20
    9bc4:	mov	x1, x19
    9bc8:	ldp	x20, x19, [sp, #16]
    9bcc:	ldp	x29, x30, [sp], #32
    9bd0:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
    9bd4:	ldr	x9, [x0, #104]
    9bd8:	str	x9, [x1]
    9bdc:	ldr	x9, [x0, #96]
    9be0:	str	x9, [x2]
    9be4:	cbz	x3, 9c00 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1448>
    9be8:	ldr	x9, [x0, #104]
    9bec:	mov	x8, x0
    9bf0:	cmp	x9, x3
    9bf4:	b.ls	9c08 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1450>  // b.plast
    9bf8:	mov	w0, #0x6                   	// #6
    9bfc:	ret
    9c00:	mov	w0, wzr
    9c04:	ret
    9c08:	mov	w0, wzr
    9c0c:	str	x3, [x8, #96]
    9c10:	ret

0000000000009c14 <lzma_alone_decoder@@XZ_5.0>:
    9c14:	stp	x29, x30, [sp, #-64]!
    9c18:	str	x23, [sp, #16]
    9c1c:	stp	x22, x21, [sp, #32]
    9c20:	stp	x20, x19, [sp, #48]
    9c24:	mov	x29, sp
    9c28:	mov	x20, x1
    9c2c:	mov	x19, x0
    9c30:	bl	3914 <lzma_version_string@@XZ_5.0+0x2b8>
    9c34:	mov	w8, w0
    9c38:	cbnz	w0, 9cf4 <lzma_alone_decoder@@XZ_5.0+0xe0>
    9c3c:	ldp	x22, x21, [x19, #48]
    9c40:	adrp	x23, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    9c44:	add	x23, x23, #0x834
    9c48:	ldr	x8, [x21, #16]
    9c4c:	cmp	x8, x23
    9c50:	b.eq	9c60 <lzma_alone_decoder@@XZ_5.0+0x4c>  // b.none
    9c54:	mov	x0, x21
    9c58:	mov	x1, x22
    9c5c:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    9c60:	ldr	x0, [x21]
    9c64:	str	x23, [x21, #16]
    9c68:	cbnz	x0, 9cb8 <lzma_alone_decoder@@XZ_5.0+0xa4>
    9c6c:	mov	w0, #0xe0                  	// #224
    9c70:	mov	x1, x22
    9c74:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    9c78:	cbz	x0, 9d0c <lzma_alone_decoder@@XZ_5.0+0xf8>
    9c7c:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    9c80:	adrp	x9, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    9c84:	adrp	x10, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    9c88:	add	x8, x8, #0x920
    9c8c:	add	x9, x9, #0xba8
    9c90:	add	x10, x10, #0xbd4
    9c94:	mov	x11, #0xffffffffffffffff    	// #-1
    9c98:	movi	v0.2d, #0x0
    9c9c:	str	x0, [x21]
    9ca0:	stp	x8, x9, [x21, #24]
    9ca4:	str	x10, [x21, #56]
    9ca8:	stp	xzr, x11, [x0]
    9cac:	stp	q0, q0, [x0, #16]
    9cb0:	str	q0, [x0, #48]
    9cb4:	str	xzr, [x0, #64]
    9cb8:	cmp	x20, #0x0
    9cbc:	mov	w9, #0x8000                	// #32768
    9cc0:	csinc	x10, x20, xzr, ne  // ne = any
    9cc4:	stp	x10, x9, [x0, #96]
    9cc8:	str	wzr, [x0, #72]
    9ccc:	strb	wzr, [x0, #76]
    9cd0:	str	wzr, [x0, #112]
    9cd4:	str	xzr, [x0, #120]
    9cd8:	str	wzr, [x0, #128]
    9cdc:	stp	xzr, xzr, [x0, #80]
    9ce0:	ldr	x9, [x19, #56]
    9ce4:	mov	w8, wzr
    9ce8:	mov	w10, #0x1                   	// #1
    9cec:	strb	w10, [x9, #88]
    9cf0:	strb	w10, [x9, #91]
    9cf4:	ldp	x20, x19, [sp, #48]
    9cf8:	ldp	x22, x21, [sp, #32]
    9cfc:	ldr	x23, [sp, #16]
    9d00:	mov	w0, w8
    9d04:	ldp	x29, x30, [sp], #64
    9d08:	ret
    9d0c:	mov	x0, x19
    9d10:	bl	32c0 <lzma_end@plt>
    9d14:	mov	w8, #0x5                   	// #5
    9d18:	b	9cf4 <lzma_alone_decoder@@XZ_5.0+0xe0>

0000000000009d1c <lzma_auto_decoder@@XZ_5.0>:
    9d1c:	stp	x29, x30, [sp, #-64]!
    9d20:	stp	x24, x23, [sp, #16]
    9d24:	stp	x22, x21, [sp, #32]
    9d28:	stp	x20, x19, [sp, #48]
    9d2c:	mov	x29, sp
    9d30:	mov	w21, w2
    9d34:	mov	x20, x1
    9d38:	mov	x19, x0
    9d3c:	bl	3914 <lzma_version_string@@XZ_5.0+0x2b8>
    9d40:	mov	w22, w0
    9d44:	cbnz	w0, 9e08 <lzma_auto_decoder@@XZ_5.0+0xec>
    9d48:	ldp	x23, x22, [x19, #48]
    9d4c:	adrp	x24, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    9d50:	add	x24, x24, #0xe28
    9d54:	ldr	x8, [x22, #16]
    9d58:	cmp	x8, x24
    9d5c:	b.eq	9d6c <lzma_auto_decoder@@XZ_5.0+0x50>  // b.none
    9d60:	mov	x0, x22
    9d64:	mov	x1, x23
    9d68:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    9d6c:	cmp	w21, #0x1f
    9d70:	str	x24, [x22, #16]
    9d74:	b.ls	9d88 <lzma_auto_decoder@@XZ_5.0+0x6c>  // b.plast
    9d78:	mov	w22, #0x8                   	// #8
    9d7c:	mov	x0, x19
    9d80:	bl	32c0 <lzma_end@plt>
    9d84:	b	9e08 <lzma_auto_decoder@@XZ_5.0+0xec>
    9d88:	ldr	x0, [x22]
    9d8c:	cbnz	x0, 9de4 <lzma_auto_decoder@@XZ_5.0+0xc8>
    9d90:	mov	w0, #0x58                  	// #88
    9d94:	mov	x1, x23
    9d98:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    9d9c:	cbz	x0, 9e20 <lzma_auto_decoder@@XZ_5.0+0x104>
    9da0:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    9da4:	adrp	x9, a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>
    9da8:	add	x8, x8, #0xf10
    9dac:	add	x9, x9, #0x6c
    9db0:	adrp	x10, a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>
    9db4:	stp	x8, x9, [x22, #24]
    9db8:	adrp	x8, a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>
    9dbc:	add	x10, x10, #0x98
    9dc0:	add	x8, x8, #0xb0
    9dc4:	stp	x10, x8, [x22, #48]
    9dc8:	mov	x8, #0xffffffffffffffff    	// #-1
    9dcc:	movi	v0.2d, #0x0
    9dd0:	str	x0, [x22]
    9dd4:	stp	xzr, x8, [x0]
    9dd8:	stp	q0, q0, [x0, #16]
    9ddc:	str	q0, [x0, #48]
    9de0:	str	xzr, [x0, #64]
    9de4:	cmp	x20, #0x0
    9de8:	csinc	x8, x20, xzr, ne  // ne = any
    9dec:	stp	w21, wzr, [x0, #80]
    9df0:	str	x8, [x0, #72]
    9df4:	ldr	x8, [x19, #56]
    9df8:	mov	w22, wzr
    9dfc:	mov	w9, #0x1                   	// #1
    9e00:	strb	w9, [x8, #88]
    9e04:	strb	w9, [x8, #91]
    9e08:	mov	w0, w22
    9e0c:	ldp	x20, x19, [sp, #48]
    9e10:	ldp	x22, x21, [sp, #32]
    9e14:	ldp	x24, x23, [sp, #16]
    9e18:	ldp	x29, x30, [sp], #64
    9e1c:	ret
    9e20:	mov	w22, #0x5                   	// #5
    9e24:	b	9d7c <lzma_auto_decoder@@XZ_5.0+0x60>
    9e28:	stp	x29, x30, [sp, #-64]!
    9e2c:	stp	x22, x21, [sp, #32]
    9e30:	stp	x20, x19, [sp, #48]
    9e34:	ldr	x8, [x0, #16]
    9e38:	str	x23, [sp, #16]
    9e3c:	adrp	x23, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    9e40:	add	x23, x23, #0xe28
    9e44:	mov	w19, w3
    9e48:	mov	x20, x2
    9e4c:	mov	x21, x0
    9e50:	cmp	x8, x23
    9e54:	mov	x22, x1
    9e58:	mov	x29, sp
    9e5c:	b.eq	9e6c <lzma_auto_decoder@@XZ_5.0+0x150>  // b.none
    9e60:	mov	x0, x21
    9e64:	mov	x1, x22
    9e68:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    9e6c:	cmp	w19, #0x1f
    9e70:	str	x23, [x21, #16]
    9e74:	b.ls	9e80 <lzma_auto_decoder@@XZ_5.0+0x164>  // b.plast
    9e78:	mov	w8, #0x8                   	// #8
    9e7c:	b	9ef0 <lzma_auto_decoder@@XZ_5.0+0x1d4>
    9e80:	ldr	x0, [x21]
    9e84:	cbnz	x0, 9edc <lzma_auto_decoder@@XZ_5.0+0x1c0>
    9e88:	mov	w0, #0x58                  	// #88
    9e8c:	mov	x1, x22
    9e90:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    9e94:	cbz	x0, 9f08 <lzma_auto_decoder@@XZ_5.0+0x1ec>
    9e98:	adrp	x8, 9000 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x848>
    9e9c:	adrp	x9, a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>
    9ea0:	add	x8, x8, #0xf10
    9ea4:	add	x9, x9, #0x6c
    9ea8:	adrp	x10, a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>
    9eac:	stp	x8, x9, [x21, #24]
    9eb0:	adrp	x8, a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>
    9eb4:	add	x10, x10, #0x98
    9eb8:	add	x8, x8, #0xb0
    9ebc:	stp	x10, x8, [x21, #48]
    9ec0:	mov	x8, #0xffffffffffffffff    	// #-1
    9ec4:	movi	v0.2d, #0x0
    9ec8:	str	x0, [x21]
    9ecc:	stp	xzr, x8, [x0]
    9ed0:	stp	q0, q0, [x0, #16]
    9ed4:	str	q0, [x0, #48]
    9ed8:	str	xzr, [x0, #64]
    9edc:	cmp	x20, #0x0
    9ee0:	mov	w8, wzr
    9ee4:	csinc	x9, x20, xzr, ne  // ne = any
    9ee8:	str	x9, [x0, #72]
    9eec:	stp	w19, wzr, [x0, #80]
    9ef0:	ldp	x20, x19, [sp, #48]
    9ef4:	ldp	x22, x21, [sp, #32]
    9ef8:	ldr	x23, [sp, #16]
    9efc:	mov	w0, w8
    9f00:	ldp	x29, x30, [sp], #64
    9f04:	ret
    9f08:	mov	w8, #0x5                   	// #5
    9f0c:	b	9ef0 <lzma_auto_decoder@@XZ_5.0+0x1d4>
    9f10:	sub	sp, sp, #0x70
    9f14:	stp	x29, x30, [sp, #16]
    9f18:	stp	x26, x25, [sp, #48]
    9f1c:	stp	x24, x23, [sp, #64]
    9f20:	stp	x22, x21, [sp, #80]
    9f24:	stp	x20, x19, [sp, #96]
    9f28:	add	x29, sp, #0x10
    9f2c:	ldr	w8, [x0, #84]
    9f30:	str	x27, [sp, #32]
    9f34:	ldr	w27, [x29, #96]
    9f38:	mov	x19, x4
    9f3c:	mov	x20, x3
    9f40:	cmp	w8, #0x2
    9f44:	b.eq	a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>  // b.none
    9f48:	mov	x22, x7
    9f4c:	mov	x23, x6
    9f50:	mov	x24, x5
    9f54:	mov	x25, x2
    9f58:	mov	x21, x0
    9f5c:	mov	x26, x1
    9f60:	cmp	w8, #0x1
    9f64:	b.eq	9fa4 <lzma_auto_decoder@@XZ_5.0+0x288>  // b.none
    9f68:	cbnz	w8, 9fe8 <lzma_auto_decoder@@XZ_5.0+0x2cc>
    9f6c:	ldr	x8, [x20]
    9f70:	cmp	x8, x19
    9f74:	b.cs	9ff0 <lzma_auto_decoder@@XZ_5.0+0x2d4>  // b.hs, b.nlast
    9f78:	mov	w9, #0x1                   	// #1
    9f7c:	str	w9, [x21, #84]
    9f80:	ldrb	w8, [x25, x8]
    9f84:	ldr	x2, [x21, #72]
    9f88:	cmp	w8, #0xfd
    9f8c:	b.ne	a03c <lzma_auto_decoder@@XZ_5.0+0x320>  // b.any
    9f90:	ldr	w3, [x21, #80]
    9f94:	mov	x0, x21
    9f98:	mov	x1, x26
    9f9c:	bl	bb64 <lzma_stream_buffer_decode@@XZ_5.0+0x18c>
    9fa0:	cbnz	w0, a01c <lzma_auto_decoder@@XZ_5.0+0x300>
    9fa4:	ldr	x8, [x21, #24]
    9fa8:	ldr	x0, [x21]
    9fac:	mov	x1, x26
    9fb0:	mov	x2, x25
    9fb4:	mov	x3, x20
    9fb8:	mov	x4, x19
    9fbc:	mov	x5, x24
    9fc0:	mov	x6, x23
    9fc4:	mov	x7, x22
    9fc8:	str	w27, [sp]
    9fcc:	blr	x8
    9fd0:	cmp	w0, #0x1
    9fd4:	b.ne	a01c <lzma_auto_decoder@@XZ_5.0+0x300>  // b.any
    9fd8:	ldrb	w8, [x21, #80]
    9fdc:	tbnz	w8, #3, 9ff8 <lzma_auto_decoder@@XZ_5.0+0x2dc>
    9fe0:	mov	w0, #0x1                   	// #1
    9fe4:	b	a01c <lzma_auto_decoder@@XZ_5.0+0x300>
    9fe8:	mov	w0, #0xb                   	// #11
    9fec:	b	a01c <lzma_auto_decoder@@XZ_5.0+0x300>
    9ff0:	mov	w0, wzr
    9ff4:	b	a01c <lzma_auto_decoder@@XZ_5.0+0x300>
    9ff8:	mov	w8, #0x2                   	// #2
    9ffc:	str	w8, [x21, #84]
    a000:	ldr	x8, [x20]
    a004:	cmp	x8, x19
    a008:	b.cs	a014 <lzma_auto_decoder@@XZ_5.0+0x2f8>  // b.hs, b.nlast
    a00c:	mov	w0, #0x9                   	// #9
    a010:	b	a01c <lzma_auto_decoder@@XZ_5.0+0x300>
    a014:	cmp	w27, #0x3
    a018:	cset	w0, eq  // eq = none
    a01c:	ldp	x20, x19, [sp, #96]
    a020:	ldp	x22, x21, [sp, #80]
    a024:	ldp	x24, x23, [sp, #64]
    a028:	ldp	x26, x25, [sp, #48]
    a02c:	ldr	x27, [sp, #32]
    a030:	ldp	x29, x30, [sp, #16]
    a034:	add	sp, sp, #0x70
    a038:	ret
    a03c:	mov	w3, #0x1                   	// #1
    a040:	mov	x0, x21
    a044:	mov	x1, x26
    a048:	bl	9834 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x107c>
    a04c:	cbnz	w0, a01c <lzma_auto_decoder@@XZ_5.0+0x300>
    a050:	ldr	w8, [x21, #80]
    a054:	tbnz	w8, #0, a064 <lzma_auto_decoder@@XZ_5.0+0x348>
    a058:	tbz	w8, #2, 9fa4 <lzma_auto_decoder@@XZ_5.0+0x288>
    a05c:	mov	w0, #0x4                   	// #4
    a060:	b	a01c <lzma_auto_decoder@@XZ_5.0+0x300>
    a064:	mov	w0, #0x2                   	// #2
    a068:	b	a01c <lzma_auto_decoder@@XZ_5.0+0x300>
    a06c:	stp	x29, x30, [sp, #-32]!
    a070:	stp	x20, x19, [sp, #16]
    a074:	mov	x29, sp
    a078:	mov	x19, x1
    a07c:	mov	x20, x0
    a080:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    a084:	mov	x0, x20
    a088:	mov	x1, x19
    a08c:	ldp	x20, x19, [sp, #16]
    a090:	ldp	x29, x30, [sp], #32
    a094:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
    a098:	ldr	x1, [x0, #48]
    a09c:	cbz	x1, a0a8 <lzma_auto_decoder@@XZ_5.0+0x38c>
    a0a0:	ldr	x0, [x0]
    a0a4:	br	x1
    a0a8:	mov	w0, wzr
    a0ac:	ret
    a0b0:	stp	x29, x30, [sp, #-32]!
    a0b4:	stp	x20, x19, [sp, #16]
    a0b8:	ldr	x8, [x0, #56]
    a0bc:	mov	x19, x3
    a0c0:	mov	x20, x0
    a0c4:	mov	x29, sp
    a0c8:	cbz	x8, a0e8 <lzma_auto_decoder@@XZ_5.0+0x3cc>
    a0cc:	ldr	x0, [x20]
    a0d0:	mov	x3, x19
    a0d4:	blr	x8
    a0d8:	cbnz	x19, a110 <lzma_auto_decoder@@XZ_5.0+0x3f4>
    a0dc:	ldp	x20, x19, [sp, #16]
    a0e0:	ldp	x29, x30, [sp], #32
    a0e4:	ret
    a0e8:	mov	w8, #0x8000                	// #32768
    a0ec:	str	x8, [x1]
    a0f0:	ldr	x8, [x20, #72]
    a0f4:	str	x8, [x2]
    a0f8:	cbz	x19, a124 <lzma_auto_decoder@@XZ_5.0+0x408>
    a0fc:	ldr	x8, [x1]
    a100:	cmp	x8, x19
    a104:	mov	w8, #0x6                   	// #6
    a108:	csel	w0, w8, wzr, hi  // hi = pmore
    a10c:	cbz	x19, a0dc <lzma_auto_decoder@@XZ_5.0+0x3c0>
    a110:	cbnz	w0, a0dc <lzma_auto_decoder@@XZ_5.0+0x3c0>
    a114:	str	x19, [x20, #72]
    a118:	ldp	x20, x19, [sp, #16]
    a11c:	ldp	x29, x30, [sp], #32
    a120:	ret
    a124:	mov	w0, wzr
    a128:	ldp	x20, x19, [sp, #16]
    a12c:	ldp	x29, x30, [sp], #32
    a130:	ret

000000000000a134 <lzma_block_buffer_decode@@XZ_5.0>:
    a134:	sub	sp, sp, #0xc0
    a138:	stp	x29, x30, [sp, #96]
    a13c:	stp	x28, x27, [sp, #112]
    a140:	stp	x26, x25, [sp, #128]
    a144:	stp	x24, x23, [sp, #144]
    a148:	stp	x22, x21, [sp, #160]
    a14c:	stp	x20, x19, [sp, #176]
    a150:	add	x29, sp, #0x60
    a154:	cbz	x3, a1ac <lzma_block_buffer_decode@@XZ_5.0+0x78>
    a158:	ldr	x8, [x3]
    a15c:	mov	x23, x7
    a160:	mov	x20, x6
    a164:	mov	x24, x5
    a168:	mov	x22, x4
    a16c:	mov	x21, x3
    a170:	mov	x25, x2
    a174:	mov	x19, x1
    a178:	mov	x2, x0
    a17c:	cbnz	x25, a18c <lzma_block_buffer_decode@@XZ_5.0+0x58>
    a180:	cmp	x8, x22
    a184:	mov	x8, x22
    a188:	b.ne	a1ac <lzma_block_buffer_decode@@XZ_5.0+0x78>  // b.any
    a18c:	mov	w26, #0xb                   	// #11
    a190:	cbz	x20, a1b0 <lzma_block_buffer_decode@@XZ_5.0+0x7c>
    a194:	cmp	x8, x22
    a198:	b.hi	a1b0 <lzma_block_buffer_decode@@XZ_5.0+0x7c>  // b.pmore
    a19c:	ldr	x8, [x20]
    a1a0:	cmp	x8, x23
    a1a4:	cbz	x24, a1d4 <lzma_block_buffer_decode@@XZ_5.0+0xa0>
    a1a8:	b.ls	a1d8 <lzma_block_buffer_decode@@XZ_5.0+0xa4>  // b.plast
    a1ac:	mov	w26, #0xb                   	// #11
    a1b0:	mov	w0, w26
    a1b4:	ldp	x20, x19, [sp, #176]
    a1b8:	ldp	x22, x21, [sp, #160]
    a1bc:	ldp	x24, x23, [sp, #144]
    a1c0:	ldp	x26, x25, [sp, #128]
    a1c4:	ldp	x28, x27, [sp, #112]
    a1c8:	ldp	x29, x30, [sp, #96]
    a1cc:	add	sp, sp, #0xc0
    a1d0:	ret
    a1d4:	b.ne	a1ac <lzma_block_buffer_decode@@XZ_5.0+0x78>  // b.any
    a1d8:	movi	v0.2d, #0x0
    a1dc:	mov	x8, #0xffffffffffffffff    	// #-1
    a1e0:	add	x0, sp, #0x10
    a1e4:	mov	x1, x19
    a1e8:	str	xzr, [sp, #80]
    a1ec:	stp	q0, q0, [sp, #48]
    a1f0:	stp	q0, q0, [sp, #16]
    a1f4:	str	x8, [sp, #24]
    a1f8:	bl	a27c <lzma_block_buffer_decode@@XZ_5.0+0x148>
    a1fc:	mov	w26, w0
    a200:	cbnz	w0, a26c <lzma_block_buffer_decode@@XZ_5.0+0x138>
    a204:	ldr	x8, [sp, #40]
    a208:	ldr	x0, [sp, #16]
    a20c:	ldr	x27, [x21]
    a210:	ldr	x28, [x20]
    a214:	mov	w9, #0x3                   	// #3
    a218:	mov	x1, x19
    a21c:	mov	x2, x25
    a220:	mov	x3, x21
    a224:	mov	x4, x22
    a228:	mov	x5, x24
    a22c:	mov	x6, x20
    a230:	mov	x7, x23
    a234:	str	w9, [sp]
    a238:	blr	x8
    a23c:	cmp	w0, #0x1
    a240:	b.eq	a268 <lzma_block_buffer_decode@@XZ_5.0+0x134>  // b.none
    a244:	mov	w26, w0
    a248:	cbnz	w0, a25c <lzma_block_buffer_decode@@XZ_5.0+0x128>
    a24c:	ldr	x8, [x21]
    a250:	cmp	x8, x22
    a254:	mov	w8, #0x9                   	// #9
    a258:	cinc	w26, w8, ne  // ne = any
    a25c:	str	x27, [x21]
    a260:	str	x28, [x20]
    a264:	b	a26c <lzma_block_buffer_decode@@XZ_5.0+0x138>
    a268:	mov	w26, wzr
    a26c:	add	x0, sp, #0x10
    a270:	mov	x1, x19
    a274:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    a278:	b	a1b0 <lzma_block_buffer_decode@@XZ_5.0+0x7c>
    a27c:	stp	x29, x30, [sp, #-64]!
    a280:	stp	x22, x21, [sp, #32]
    a284:	stp	x20, x19, [sp, #48]
    a288:	ldr	x8, [x0, #16]
    a28c:	adrp	x21, a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>
    a290:	add	x21, x21, #0x27c
    a294:	mov	x19, x2
    a298:	mov	x22, x0
    a29c:	cmp	x8, x21
    a2a0:	mov	x20, x1
    a2a4:	str	x23, [sp, #16]
    a2a8:	mov	x29, sp
    a2ac:	b.eq	a2bc <lzma_block_buffer_decode@@XZ_5.0+0x188>  // b.none
    a2b0:	mov	x0, x22
    a2b4:	mov	x1, x20
    a2b8:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    a2bc:	mov	x0, x19
    a2c0:	str	x21, [x22, #16]
    a2c4:	bl	3130 <lzma_block_unpadded_size@plt>
    a2c8:	cbz	x0, a348 <lzma_block_buffer_decode@@XZ_5.0+0x214>
    a2cc:	ldr	x8, [x19, #24]
    a2d0:	cmn	x8, #0x1
    a2d4:	b.lt	a348 <lzma_block_buffer_decode@@XZ_5.0+0x214>  // b.tstop
    a2d8:	ldr	x21, [x22]
    a2dc:	cbnz	x21, a328 <lzma_block_buffer_decode@@XZ_5.0+0x1f4>
    a2e0:	mov	w0, #0xe8                  	// #232
    a2e4:	mov	x1, x20
    a2e8:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    a2ec:	cbz	x0, a3c0 <lzma_block_buffer_decode@@XZ_5.0+0x28c>
    a2f0:	adrp	x8, a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>
    a2f4:	adrp	x9, a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>
    a2f8:	mov	x21, x0
    a2fc:	add	x8, x8, #0x3c8
    a300:	add	x9, x9, #0x620
    a304:	mov	x10, #0xffffffffffffffff    	// #-1
    a308:	movi	v0.2d, #0x0
    a30c:	str	x0, [x22]
    a310:	stp	x8, x9, [x22, #24]
    a314:	stp	xzr, x10, [x0, #8]
    a318:	stur	q0, [x0, #24]
    a31c:	stur	q0, [x0, #40]
    a320:	stur	q0, [x0, #56]
    a324:	str	xzr, [x0, #72]
    a328:	str	wzr, [x21]
    a32c:	stp	xzr, xzr, [x21, #88]
    a330:	str	x19, [x21, #80]
    a334:	ldr	x8, [x19, #16]
    a338:	cmn	x8, #0x1
    a33c:	b.eq	a360 <lzma_block_buffer_decode@@XZ_5.0+0x22c>  // b.none
    a340:	ldr	w22, [x19, #8]
    a344:	b	a378 <lzma_block_buffer_decode@@XZ_5.0+0x244>
    a348:	mov	w0, #0xb                   	// #11
    a34c:	ldp	x20, x19, [sp, #48]
    a350:	ldp	x22, x21, [sp, #32]
    a354:	ldr	x23, [sp, #16]
    a358:	ldp	x29, x30, [sp], #64
    a35c:	ret
    a360:	ldp	w23, w22, [x19, #4]
    a364:	mov	w0, w22
    a368:	bl	3200 <lzma_check_size@plt>
    a36c:	add	x8, x23, w0, uxtw
    a370:	mov	x9, #0x7ffffffffffffffc    	// #9223372036854775804
    a374:	sub	x8, x9, x8
    a378:	add	x0, x21, #0x78
    a37c:	mov	w1, w22
    a380:	stp	x8, xzr, [x21, #104]
    a384:	bl	c554 <lzma_check_size@@XZ_5.0+0x20>
    a388:	ldr	w8, [x19]
    a38c:	cbz	w8, a39c <lzma_block_buffer_decode@@XZ_5.0+0x268>
    a390:	ldrb	w8, [x19, #200]
    a394:	cmp	w8, #0x0
    a398:	cset	w8, ne  // ne = any
    a39c:	strb	w8, [x21, #224]
    a3a0:	ldr	x2, [x19, #32]
    a3a4:	add	x0, x21, #0x8
    a3a8:	mov	x1, x20
    a3ac:	ldp	x20, x19, [sp, #48]
    a3b0:	ldp	x22, x21, [sp, #32]
    a3b4:	ldr	x23, [sp, #16]
    a3b8:	ldp	x29, x30, [sp], #64
    a3bc:	b	ac08 <lzma_filter_decoder_is_supported@@XZ_5.0+0x118>
    a3c0:	mov	w0, #0x5                   	// #5
    a3c4:	b	a34c <lzma_block_buffer_decode@@XZ_5.0+0x218>
    a3c8:	sub	sp, sp, #0x70
    a3cc:	stp	x29, x30, [sp, #16]
    a3d0:	stp	x26, x25, [sp, #48]
    a3d4:	stp	x24, x23, [sp, #64]
    a3d8:	stp	x22, x21, [sp, #80]
    a3dc:	stp	x20, x19, [sp, #96]
    a3e0:	ldr	w8, [x0]
    a3e4:	mov	x20, x4
    a3e8:	mov	x21, x3
    a3ec:	mov	x22, x2
    a3f0:	mov	x19, x0
    a3f4:	str	x27, [sp, #32]
    a3f8:	add	x29, sp, #0x10
    a3fc:	cbz	w8, a448 <lzma_block_buffer_decode@@XZ_5.0+0x314>
    a400:	cmp	w8, #0x2
    a404:	b.eq	a584 <lzma_block_buffer_decode@@XZ_5.0+0x450>  // b.none
    a408:	cmp	w8, #0x1
    a40c:	b.ne	a558 <lzma_block_buffer_decode@@XZ_5.0+0x424>  // b.any
    a410:	mov	x25, x19
    a414:	ldr	x8, [x25, #88]!
    a418:	tst	x8, #0x3
    a41c:	b.eq	a560 <lzma_block_buffer_decode@@XZ_5.0+0x42c>  // b.none
    a420:	ldr	x9, [x21]
    a424:	cmp	x9, x20
    a428:	b.cs	a5bc <lzma_block_buffer_decode@@XZ_5.0+0x488>  // b.hs, b.nlast
    a42c:	add	x8, x8, #0x1
    a430:	str	x8, [x25]
    a434:	ldrb	w10, [x22, x9]
    a438:	add	x9, x9, #0x1
    a43c:	str	x9, [x21]
    a440:	cbz	w10, a418 <lzma_block_buffer_decode@@XZ_5.0+0x2e4>
    a444:	b	a5fc <lzma_block_buffer_decode@@XZ_5.0+0x4c8>
    a448:	ldr	w8, [x29, #96]
    a44c:	ldr	x9, [x19, #32]
    a450:	ldr	x0, [x19, #8]
    a454:	ldr	x27, [x21]
    a458:	ldr	x26, [x6]
    a45c:	mov	x2, x22
    a460:	mov	x3, x21
    a464:	mov	x4, x20
    a468:	mov	x25, x6
    a46c:	mov	x23, x5
    a470:	str	w8, [sp]
    a474:	blr	x9
    a478:	ldr	x8, [x25]
    a47c:	mov	x25, x19
    a480:	ldr	x9, [x21]
    a484:	ldr	x10, [x25, #88]!
    a488:	mov	x12, #0x7fffffffffffffff    	// #9223372036854775807
    a48c:	mov	w24, w0
    a490:	mov	w0, #0x9                   	// #9
    a494:	ldr	x11, [x25, #16]
    a498:	cmp	x11, x12
    a49c:	csel	x11, x11, x12, cc  // cc = lo, ul, last
    a4a0:	subs	x12, x11, x10
    a4a4:	b.cc	a600 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>  // b.lo, b.ul, b.last
    a4a8:	sub	x11, x9, x27
    a4ac:	cmp	x12, x11
    a4b0:	b.cc	a600 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>  // b.lo, b.ul, b.last
    a4b4:	ldr	x9, [x19, #80]
    a4b8:	add	x10, x10, x11
    a4bc:	str	x10, [x19, #88]
    a4c0:	ldr	x10, [x19, #96]
    a4c4:	ldr	x11, [x9, #24]
    a4c8:	mov	x12, #0x7fffffffffffffff    	// #9223372036854775807
    a4cc:	mov	w0, #0x9                   	// #9
    a4d0:	cmp	x11, x12
    a4d4:	csel	x11, x11, x12, cc  // cc = lo, ul, last
    a4d8:	subs	x11, x11, x10
    a4dc:	b.cc	a600 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>  // b.lo, b.ul, b.last
    a4e0:	sub	x3, x8, x26
    a4e4:	cmp	x11, x3
    a4e8:	b.cc	a600 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>  // b.lo, b.ul, b.last
    a4ec:	ldrb	w8, [x19, #224]
    a4f0:	add	x10, x10, x3
    a4f4:	str	x10, [x19, #96]
    a4f8:	cbnz	w8, a50c <lzma_block_buffer_decode@@XZ_5.0+0x3d8>
    a4fc:	ldr	w1, [x9, #8]
    a500:	add	x0, x19, #0x78
    a504:	add	x2, x23, x26
    a508:	bl	c580 <lzma_check_size@@XZ_5.0+0x4c>
    a50c:	cmp	w24, #0x1
    a510:	mov	w0, w24
    a514:	b.ne	a600 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>  // b.any
    a518:	ldp	x9, x8, [x19, #80]
    a51c:	ldr	x10, [x9, #16]
    a520:	cmn	x10, #0x1
    a524:	b.eq	a530 <lzma_block_buffer_decode@@XZ_5.0+0x3fc>  // b.none
    a528:	cmp	x10, x8
    a52c:	b.ne	a5fc <lzma_block_buffer_decode@@XZ_5.0+0x4c8>  // b.any
    a530:	ldr	x11, [x9, #24]
    a534:	ldr	x10, [x19, #96]
    a538:	cmn	x11, #0x1
    a53c:	b.eq	a548 <lzma_block_buffer_decode@@XZ_5.0+0x414>  // b.none
    a540:	cmp	x11, x10
    a544:	b.ne	a5fc <lzma_block_buffer_decode@@XZ_5.0+0x4c8>  // b.any
    a548:	stp	x8, x10, [x9, #16]
    a54c:	mov	w9, #0x1                   	// #1
    a550:	str	w9, [x19]
    a554:	b	a418 <lzma_block_buffer_decode@@XZ_5.0+0x2e4>
    a558:	mov	w0, #0xb                   	// #11
    a55c:	b	a600 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>
    a560:	ldr	x8, [x19, #80]
    a564:	ldr	w1, [x8, #8]
    a568:	cbz	w1, a5cc <lzma_block_buffer_decode@@XZ_5.0+0x498>
    a56c:	ldrb	w8, [x19, #224]
    a570:	cbnz	w8, a57c <lzma_block_buffer_decode@@XZ_5.0+0x448>
    a574:	add	x0, x19, #0x78
    a578:	bl	c608 <lzma_check_size@@XZ_5.0+0xd4>
    a57c:	mov	w8, #0x2                   	// #2
    a580:	str	w8, [x19]
    a584:	ldr	x24, [x19, #80]
    a588:	ldr	w0, [x24, #8]
    a58c:	bl	3200 <lzma_check_size@plt>
    a590:	mov	w23, w0
    a594:	add	x3, x24, #0x28
    a598:	add	x4, x19, #0x70
    a59c:	mov	x0, x22
    a5a0:	mov	x1, x21
    a5a4:	mov	x2, x20
    a5a8:	mov	x5, x23
    a5ac:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
    a5b0:	ldr	x8, [x19, #112]
    a5b4:	cmp	x8, x23
    a5b8:	b.cs	a5c4 <lzma_block_buffer_decode@@XZ_5.0+0x490>  // b.hs, b.nlast
    a5bc:	mov	w0, wzr
    a5c0:	b	a600 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>
    a5c4:	ldrb	w8, [x19, #224]
    a5c8:	cbz	w8, a5d4 <lzma_block_buffer_decode@@XZ_5.0+0x4a0>
    a5cc:	mov	w0, #0x1                   	// #1
    a5d0:	b	a600 <lzma_block_buffer_decode@@XZ_5.0+0x4cc>
    a5d4:	ldr	x20, [x19, #80]
    a5d8:	ldr	w0, [x20, #8]
    a5dc:	bl	3080 <lzma_check_is_supported@plt>
    a5e0:	tst	w0, #0xff
    a5e4:	b.eq	a5cc <lzma_block_buffer_decode@@XZ_5.0+0x498>  // b.none
    a5e8:	add	x0, x20, #0x28
    a5ec:	add	x1, x19, #0x78
    a5f0:	mov	x2, x23
    a5f4:	bl	3210 <bcmp@plt>
    a5f8:	cbz	w0, a5cc <lzma_block_buffer_decode@@XZ_5.0+0x498>
    a5fc:	mov	w0, #0x9                   	// #9
    a600:	ldp	x20, x19, [sp, #96]
    a604:	ldp	x22, x21, [sp, #80]
    a608:	ldp	x24, x23, [sp, #64]
    a60c:	ldp	x26, x25, [sp, #48]
    a610:	ldr	x27, [sp, #32]
    a614:	ldp	x29, x30, [sp, #16]
    a618:	add	sp, sp, #0x70
    a61c:	ret
    a620:	stp	x29, x30, [sp, #-32]!
    a624:	stp	x20, x19, [sp, #16]
    a628:	mov	x20, x0
    a62c:	add	x0, x0, #0x8
    a630:	mov	x29, sp
    a634:	mov	x19, x1
    a638:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    a63c:	mov	x0, x20
    a640:	mov	x1, x19
    a644:	ldp	x20, x19, [sp, #16]
    a648:	ldp	x29, x30, [sp], #32
    a64c:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>

000000000000a650 <lzma_block_decoder@@XZ_5.0>:
    a650:	stp	x29, x30, [sp, #-48]!
    a654:	str	x21, [sp, #16]
    a658:	stp	x20, x19, [sp, #32]
    a65c:	mov	x29, sp
    a660:	mov	x21, x1
    a664:	mov	x19, x0
    a668:	bl	3914 <lzma_version_string@@XZ_5.0+0x2b8>
    a66c:	mov	w20, w0
    a670:	cbnz	w0, a6a4 <lzma_block_decoder@@XZ_5.0+0x54>
    a674:	ldp	x1, x0, [x19, #48]
    a678:	mov	x2, x21
    a67c:	bl	a27c <lzma_block_buffer_decode@@XZ_5.0+0x148>
    a680:	mov	w20, w0
    a684:	cbz	w0, a694 <lzma_block_decoder@@XZ_5.0+0x44>
    a688:	mov	x0, x19
    a68c:	bl	32c0 <lzma_end@plt>
    a690:	b	a6a4 <lzma_block_decoder@@XZ_5.0+0x54>
    a694:	ldr	x8, [x19, #56]
    a698:	mov	w9, #0x1                   	// #1
    a69c:	strb	w9, [x8, #88]
    a6a0:	strb	w9, [x8, #91]
    a6a4:	mov	w0, w20
    a6a8:	ldp	x20, x19, [sp, #32]
    a6ac:	ldr	x21, [sp, #16]
    a6b0:	ldp	x29, x30, [sp], #48
    a6b4:	ret

000000000000a6b8 <lzma_block_header_decode@@XZ_5.0>:
    a6b8:	stp	x29, x30, [sp, #-80]!
    a6bc:	stp	x24, x23, [sp, #32]
    a6c0:	stp	x22, x21, [sp, #48]
    a6c4:	stp	x20, x19, [sp, #64]
    a6c8:	ldr	x8, [x0, #32]
    a6cc:	mov	x9, #0xffffffffffffffff    	// #-1
    a6d0:	str	x25, [sp, #16]
    a6d4:	mov	x21, x2
    a6d8:	stp	x9, xzr, [x8]
    a6dc:	stp	x9, xzr, [x8, #16]
    a6e0:	stp	x9, xzr, [x8, #32]
    a6e4:	stp	x9, xzr, [x8, #48]
    a6e8:	stp	x9, xzr, [x8, #64]
    a6ec:	ldr	w8, [x0]
    a6f0:	mov	x19, x0
    a6f4:	mov	x20, x1
    a6f8:	mov	x29, sp
    a6fc:	cmp	w8, #0x2
    a700:	b.cc	a70c <lzma_block_header_decode@@XZ_5.0+0x54>  // b.lo, b.ul, b.last
    a704:	mov	w8, #0x1                   	// #1
    a708:	str	w8, [x19]
    a70c:	strb	wzr, [x19, #200]
    a710:	ldrb	w8, [x21]
    a714:	ldr	w9, [x19, #4]
    a718:	lsl	x22, x8, #2
    a71c:	add	w8, w22, #0x4
    a720:	cmp	w8, w9
    a724:	b.ne	a734 <lzma_block_header_decode@@XZ_5.0+0x7c>  // b.any
    a728:	ldr	w8, [x19, #8]
    a72c:	cmp	w8, #0xf
    a730:	b.ls	a754 <lzma_block_header_decode@@XZ_5.0+0x9c>  // b.plast
    a734:	mov	w23, #0xb                   	// #11
    a738:	mov	w0, w23
    a73c:	ldp	x20, x19, [sp, #64]
    a740:	ldp	x22, x21, [sp, #48]
    a744:	ldp	x24, x23, [sp, #32]
    a748:	ldr	x25, [sp, #16]
    a74c:	ldp	x29, x30, [sp], #80
    a750:	ret
    a754:	mov	x0, x21
    a758:	mov	x1, x22
    a75c:	mov	w2, wzr
    a760:	bl	3160 <lzma_crc32@plt>
    a764:	ldr	w8, [x21, x22]
    a768:	cmp	w0, w8
    a76c:	b.ne	a894 <lzma_block_header_decode@@XZ_5.0+0x1dc>  // b.any
    a770:	ldrb	w8, [x21, #1]
    a774:	tst	w8, #0x3c
    a778:	b.eq	a784 <lzma_block_header_decode@@XZ_5.0+0xcc>  // b.none
    a77c:	mov	w23, #0x8                   	// #8
    a780:	b	a738 <lzma_block_header_decode@@XZ_5.0+0x80>
    a784:	mov	w9, #0x2                   	// #2
    a788:	add	x0, x19, #0x10
    a78c:	str	x9, [x29, #24]
    a790:	tbnz	w8, #6, a86c <lzma_block_header_decode@@XZ_5.0+0x1b4>
    a794:	mov	x8, #0xffffffffffffffff    	// #-1
    a798:	str	x8, [x0]
    a79c:	ldrsb	w8, [x21, #1]
    a7a0:	add	x0, x19, #0x18
    a7a4:	tbnz	w8, #31, a8fc <lzma_block_header_decode@@XZ_5.0+0x244>
    a7a8:	mov	x8, #0xffffffffffffffff    	// #-1
    a7ac:	str	x8, [x0]
    a7b0:	ldrb	w8, [x21, #1]
    a7b4:	mov	x24, xzr
    a7b8:	and	x8, x8, #0x3
    a7bc:	lsl	x8, x8, #4
    a7c0:	add	x25, x8, #0x10
    a7c4:	ldr	x8, [x19, #32]
    a7c8:	add	x3, x29, #0x18
    a7cc:	mov	x1, x20
    a7d0:	mov	x2, x21
    a7d4:	add	x0, x8, x24
    a7d8:	mov	x4, x22
    a7dc:	bl	3480 <lzma_filter_flags_decode@plt>
    a7e0:	cbnz	w0, a89c <lzma_block_header_decode@@XZ_5.0+0x1e4>
    a7e4:	add	x24, x24, #0x10
    a7e8:	cmp	x25, x24
    a7ec:	b.ne	a7c4 <lzma_block_header_decode@@XZ_5.0+0x10c>  // b.any
    a7f0:	ldr	x8, [x29, #24]
    a7f4:	cmp	x8, x22
    a7f8:	b.cs	a91c <lzma_block_header_decode@@XZ_5.0+0x264>  // b.hs, b.nlast
    a7fc:	add	x9, x8, #0x1
    a800:	str	x9, [x29, #24]
    a804:	ldrb	w10, [x21, x8]
    a808:	mov	x8, x9
    a80c:	cbz	w10, a7f4 <lzma_block_header_decode@@XZ_5.0+0x13c>
    a810:	ldr	x8, [x19, #32]
    a814:	mov	x1, x20
    a818:	ldr	x0, [x8, #8]
    a81c:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    a820:	ldr	x8, [x19, #32]
    a824:	mov	x21, #0xffffffffffffffff    	// #-1
    a828:	mov	x1, x20
    a82c:	ldr	x0, [x8, #24]
    a830:	stp	x21, xzr, [x8]
    a834:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    a838:	ldr	x8, [x19, #32]
    a83c:	mov	x1, x20
    a840:	ldr	x0, [x8, #40]
    a844:	stp	x21, xzr, [x8, #16]
    a848:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    a84c:	ldr	x8, [x19, #32]
    a850:	mov	x1, x20
    a854:	ldr	x0, [x8, #56]
    a858:	stp	x21, xzr, [x8, #32]
    a85c:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    a860:	ldr	x8, [x19, #32]
    a864:	stp	x21, xzr, [x8, #48]
    a868:	b	a77c <lzma_block_header_decode@@XZ_5.0+0xc4>
    a86c:	add	x3, x29, #0x18
    a870:	mov	x1, xzr
    a874:	mov	x2, x21
    a878:	mov	x4, x22
    a87c:	bl	3340 <lzma_vli_decode@plt>
    a880:	mov	w23, w0
    a884:	cbnz	w0, a738 <lzma_block_header_decode@@XZ_5.0+0x80>
    a888:	mov	x0, x19
    a88c:	bl	3130 <lzma_block_unpadded_size@plt>
    a890:	cbnz	x0, a79c <lzma_block_header_decode@@XZ_5.0+0xe4>
    a894:	mov	w23, #0x9                   	// #9
    a898:	b	a738 <lzma_block_header_decode@@XZ_5.0+0x80>
    a89c:	ldr	x8, [x19, #32]
    a8a0:	mov	w23, w0
    a8a4:	mov	x1, x20
    a8a8:	ldr	x0, [x8, #8]
    a8ac:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    a8b0:	ldr	x8, [x19, #32]
    a8b4:	mov	x21, #0xffffffffffffffff    	// #-1
    a8b8:	mov	x1, x20
    a8bc:	ldr	x0, [x8, #24]
    a8c0:	stp	x21, xzr, [x8]
    a8c4:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    a8c8:	ldr	x8, [x19, #32]
    a8cc:	mov	x1, x20
    a8d0:	ldr	x0, [x8, #40]
    a8d4:	stp	x21, xzr, [x8, #16]
    a8d8:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    a8dc:	ldr	x8, [x19, #32]
    a8e0:	mov	x1, x20
    a8e4:	ldr	x0, [x8, #56]
    a8e8:	stp	x21, xzr, [x8, #32]
    a8ec:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    a8f0:	ldr	x8, [x19, #32]
    a8f4:	stp	x21, xzr, [x8, #48]
    a8f8:	b	a738 <lzma_block_header_decode@@XZ_5.0+0x80>
    a8fc:	add	x3, x29, #0x18
    a900:	mov	x1, xzr
    a904:	mov	x2, x21
    a908:	mov	x4, x22
    a90c:	bl	3340 <lzma_vli_decode@plt>
    a910:	mov	w23, w0
    a914:	cbnz	w0, a738 <lzma_block_header_decode@@XZ_5.0+0x80>
    a918:	b	a7b0 <lzma_block_header_decode@@XZ_5.0+0xf8>
    a91c:	mov	w23, wzr
    a920:	b	a738 <lzma_block_header_decode@@XZ_5.0+0x80>

000000000000a924 <lzma_easy_decoder_memusage@@XZ_5.0>:
    a924:	sub	sp, sp, #0xd0
    a928:	mov	w1, w0
    a92c:	mov	x0, sp
    a930:	stp	x29, x30, [sp, #192]
    a934:	add	x29, sp, #0xc0
    a938:	bl	40fc <lzma_block_total_size@@XZ_5.0+0xb8>
    a93c:	tbz	w0, #0, a950 <lzma_easy_decoder_memusage@@XZ_5.0+0x2c>
    a940:	mov	w0, #0xffffffff            	// #-1
    a944:	ldp	x29, x30, [sp, #192]
    a948:	add	sp, sp, #0xd0
    a94c:	ret
    a950:	mov	x0, sp
    a954:	bl	3280 <lzma_raw_decoder_memusage@plt>
    a958:	ldp	x29, x30, [sp, #192]
    a95c:	add	sp, sp, #0xd0
    a960:	ret

000000000000a964 <lzma_raw_buffer_decode@@XZ_5.0>:
    a964:	sub	sp, sp, #0xd0
    a968:	stp	x24, x23, [sp, #160]
    a96c:	mov	x23, x2
    a970:	mov	w24, #0xb                   	// #11
    a974:	stp	x29, x30, [sp, #112]
    a978:	stp	x28, x27, [sp, #128]
    a97c:	stp	x26, x25, [sp, #144]
    a980:	stp	x22, x21, [sp, #176]
    a984:	stp	x20, x19, [sp, #192]
    a988:	add	x29, sp, #0x70
    a98c:	cbz	x2, aacc <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a990:	mov	x21, x3
    a994:	cbz	x3, aacc <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a998:	mov	x20, x6
    a99c:	mov	w24, #0xb                   	// #11
    a9a0:	cbz	x6, aacc <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a9a4:	mov	x26, x5
    a9a8:	cbz	x5, aacc <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a9ac:	ldr	x8, [x21]
    a9b0:	mov	x22, x4
    a9b4:	cmp	x8, x4
    a9b8:	b.hi	aacc <lzma_raw_buffer_decode@@XZ_5.0+0x168>  // b.pmore
    a9bc:	ldr	x8, [x20]
    a9c0:	mov	x25, x7
    a9c4:	cmp	x8, x7
    a9c8:	b.ls	a9d4 <lzma_raw_buffer_decode@@XZ_5.0+0x70>  // b.plast
    a9cc:	mov	w24, #0xb                   	// #11
    a9d0:	b	aacc <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    a9d4:	mov	x2, x0
    a9d8:	movi	v0.2d, #0x0
    a9dc:	mov	x8, #0xffffffffffffffff    	// #-1
    a9e0:	add	x0, sp, #0x20
    a9e4:	mov	x19, x1
    a9e8:	str	xzr, [sp, #96]
    a9ec:	stp	q0, q0, [sp, #64]
    a9f0:	stp	q0, q0, [sp, #32]
    a9f4:	str	x8, [sp, #40]
    a9f8:	bl	ac08 <lzma_filter_decoder_is_supported@@XZ_5.0+0x118>
    a9fc:	mov	w24, w0
    aa00:	cbnz	w0, aacc <lzma_raw_buffer_decode@@XZ_5.0+0x168>
    aa04:	ldr	x8, [sp, #56]
    aa08:	ldr	x0, [sp, #32]
    aa0c:	ldr	x27, [x21]
    aa10:	ldr	x28, [x20]
    aa14:	mov	w9, #0x3                   	// #3
    aa18:	mov	x1, x19
    aa1c:	mov	x2, x23
    aa20:	mov	x3, x21
    aa24:	mov	x4, x22
    aa28:	mov	x5, x26
    aa2c:	mov	x6, x20
    aa30:	mov	x7, x25
    aa34:	str	w9, [sp]
    aa38:	blr	x8
    aa3c:	cmp	w0, #0x1
    aa40:	b.eq	aaac <lzma_raw_buffer_decode@@XZ_5.0+0x148>  // b.none
    aa44:	mov	w24, w0
    aa48:	cbnz	w0, aab8 <lzma_raw_buffer_decode@@XZ_5.0+0x154>
    aa4c:	ldr	x8, [x21]
    aa50:	cmp	x8, x22
    aa54:	b.ne	aab4 <lzma_raw_buffer_decode@@XZ_5.0+0x150>  // b.any
    aa58:	ldr	x8, [x20]
    aa5c:	mov	w24, #0x9                   	// #9
    aa60:	cmp	x8, x25
    aa64:	b.ne	aab8 <lzma_raw_buffer_decode@@XZ_5.0+0x154>  // b.any
    aa68:	ldr	x8, [sp, #56]
    aa6c:	ldr	x0, [sp, #32]
    aa70:	mov	w9, #0x3                   	// #3
    aa74:	add	x5, sp, #0x1c
    aa78:	add	x6, sp, #0x10
    aa7c:	mov	w7, #0x1                   	// #1
    aa80:	mov	x1, x19
    aa84:	mov	x2, x23
    aa88:	mov	x3, x21
    aa8c:	mov	x4, x22
    aa90:	str	xzr, [sp, #16]
    aa94:	str	w9, [sp]
    aa98:	blr	x8
    aa9c:	ldr	x8, [sp, #16]
    aaa0:	cmp	x8, #0x1
    aaa4:	cinc	w24, w24, eq  // eq = none
    aaa8:	b	aab8 <lzma_raw_buffer_decode@@XZ_5.0+0x154>
    aaac:	mov	w24, wzr
    aab0:	b	aac0 <lzma_raw_buffer_decode@@XZ_5.0+0x15c>
    aab4:	mov	w24, #0xa                   	// #10
    aab8:	str	x27, [x21]
    aabc:	str	x28, [x20]
    aac0:	add	x0, sp, #0x20
    aac4:	mov	x1, x19
    aac8:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    aacc:	mov	w0, w24
    aad0:	ldp	x20, x19, [sp, #192]
    aad4:	ldp	x22, x21, [sp, #176]
    aad8:	ldp	x24, x23, [sp, #160]
    aadc:	ldp	x26, x25, [sp, #144]
    aae0:	ldp	x28, x27, [sp, #128]
    aae4:	ldp	x29, x30, [sp, #112]
    aae8:	add	sp, sp, #0xd0
    aaec:	ret

000000000000aaf0 <lzma_filter_decoder_is_supported@@XZ_5.0>:
    aaf0:	sub	x8, x0, #0x3
    aaf4:	cmp	x8, #0x7
    aaf8:	b.cs	ab04 <lzma_filter_decoder_is_supported@@XZ_5.0+0x14>  // b.hs, b.nlast
    aafc:	mov	w0, #0x1                   	// #1
    ab00:	ret
    ab04:	mov	x8, #0x1                   	// #1
    ab08:	movk	x8, #0x4000, lsl #48
    ab0c:	cmp	x0, x8
    ab10:	b.eq	aafc <lzma_filter_decoder_is_supported@@XZ_5.0+0xc>  // b.none
    ab14:	cmp	x0, #0x21
    ab18:	b.eq	aafc <lzma_filter_decoder_is_supported@@XZ_5.0+0xc>  // b.none
    ab1c:	mov	w0, wzr
    ab20:	ret
    ab24:	sub	x9, x0, #0x3
    ab28:	mov	x8, x0
    ab2c:	cmp	x9, #0x1e
    ab30:	mov	x0, xzr
    ab34:	b.hi	ab64 <lzma_filter_decoder_is_supported@@XZ_5.0+0x74>  // b.pmore
    ab38:	adrp	x8, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    ab3c:	add	x8, x8, #0x45c
    ab40:	adr	x10, ab50 <lzma_filter_decoder_is_supported@@XZ_5.0+0x60>
    ab44:	ldrb	w11, [x8, x9]
    ab48:	add	x10, x10, x11, lsl #2
    ab4c:	br	x10
    ab50:	mov	w8, #0x8                   	// #8
    ab54:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    ab58:	add	x9, x9, #0xbf8
    ab5c:	add	x0, x9, x8, lsl #5
    ab60:	ret
    ab64:	mov	x9, #0x1                   	// #1
    ab68:	movk	x9, #0x4000, lsl #48
    ab6c:	cmp	x8, x9
    ab70:	mov	x8, xzr
    ab74:	b.eq	ab80 <lzma_filter_decoder_is_supported@@XZ_5.0+0x90>  // b.none
    ab78:	ret
    ab7c:	mov	w8, #0x2                   	// #2
    ab80:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    ab84:	add	x9, x9, #0xbf8
    ab88:	add	x0, x9, x8, lsl #5
    ab8c:	ret
    ab90:	mov	w8, #0x3                   	// #3
    ab94:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    ab98:	add	x9, x9, #0xbf8
    ab9c:	add	x0, x9, x8, lsl #5
    aba0:	ret
    aba4:	mov	w8, #0x4                   	// #4
    aba8:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    abac:	add	x9, x9, #0xbf8
    abb0:	add	x0, x9, x8, lsl #5
    abb4:	ret
    abb8:	mov	w8, #0x5                   	// #5
    abbc:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    abc0:	add	x9, x9, #0xbf8
    abc4:	add	x0, x9, x8, lsl #5
    abc8:	ret
    abcc:	mov	w8, #0x6                   	// #6
    abd0:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    abd4:	add	x9, x9, #0xbf8
    abd8:	add	x0, x9, x8, lsl #5
    abdc:	ret
    abe0:	mov	w8, #0x7                   	// #7
    abe4:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    abe8:	add	x9, x9, #0xbf8
    abec:	add	x0, x9, x8, lsl #5
    abf0:	ret
    abf4:	mov	w8, #0x1                   	// #1
    abf8:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    abfc:	add	x9, x9, #0xbf8
    ac00:	add	x0, x9, x8, lsl #5
    ac04:	ret
    ac08:	adrp	x3, a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>
    ac0c:	add	x3, x3, #0xb24
    ac10:	mov	w4, wzr
    ac14:	b	42c8 <lzma_filters_copy@@XZ_5.0+0x178>

000000000000ac18 <lzma_raw_decoder@@XZ_5.0>:
    ac18:	stp	x29, x30, [sp, #-48]!
    ac1c:	str	x21, [sp, #16]
    ac20:	stp	x20, x19, [sp, #32]
    ac24:	mov	x29, sp
    ac28:	mov	x21, x1
    ac2c:	mov	x19, x0
    ac30:	bl	3914 <lzma_version_string@@XZ_5.0+0x2b8>
    ac34:	mov	w20, w0
    ac38:	cbnz	w0, ac78 <lzma_raw_decoder@@XZ_5.0+0x60>
    ac3c:	ldp	x1, x0, [x19, #48]
    ac40:	adrp	x3, a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>
    ac44:	add	x3, x3, #0xb24
    ac48:	mov	x2, x21
    ac4c:	mov	w4, wzr
    ac50:	bl	42c8 <lzma_filters_copy@@XZ_5.0+0x178>
    ac54:	mov	w20, w0
    ac58:	cbz	w0, ac68 <lzma_raw_decoder@@XZ_5.0+0x50>
    ac5c:	mov	x0, x19
    ac60:	bl	32c0 <lzma_end@plt>
    ac64:	b	ac78 <lzma_raw_decoder@@XZ_5.0+0x60>
    ac68:	ldr	x8, [x19, #56]
    ac6c:	mov	w9, #0x1                   	// #1
    ac70:	strb	w9, [x8, #88]
    ac74:	strb	w9, [x8, #91]
    ac78:	mov	w0, w20
    ac7c:	ldp	x20, x19, [sp, #32]
    ac80:	ldr	x21, [sp, #16]
    ac84:	ldp	x29, x30, [sp], #48
    ac88:	ret

000000000000ac8c <lzma_raw_decoder_memusage@@XZ_5.0>:
    ac8c:	adrp	x8, a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>
    ac90:	add	x8, x8, #0xb24
    ac94:	mov	x1, x0
    ac98:	mov	x0, x8
    ac9c:	b	44a4 <lzma_filters_copy@@XZ_5.0+0x354>

000000000000aca0 <lzma_properties_decode@@XZ_5.0>:
    aca0:	mov	x8, x0
    aca4:	str	xzr, [x0, #8]!
    aca8:	ldr	x8, [x8]
    acac:	sub	x9, x8, #0x3
    acb0:	cmp	x9, #0x1e
    acb4:	b.hi	acd8 <lzma_properties_decode@@XZ_5.0+0x38>  // b.pmore
    acb8:	adrp	x8, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    acbc:	add	x8, x8, #0x47b
    acc0:	adr	x10, acd0 <lzma_properties_decode@@XZ_5.0+0x30>
    acc4:	ldrb	w11, [x8, x9]
    acc8:	add	x10, x10, x11, lsl #2
    accc:	br	x10
    acd0:	mov	w8, #0x8                   	// #8
    acd4:	b	ad28 <lzma_properties_decode@@XZ_5.0+0x88>
    acd8:	mov	x9, #0x1                   	// #1
    acdc:	movk	x9, #0x4000, lsl #48
    ace0:	cmp	x8, x9
    ace4:	mov	x8, xzr
    ace8:	b.eq	ad28 <lzma_properties_decode@@XZ_5.0+0x88>  // b.none
    acec:	mov	w0, #0x8                   	// #8
    acf0:	ret
    acf4:	mov	w8, #0x2                   	// #2
    acf8:	b	ad28 <lzma_properties_decode@@XZ_5.0+0x88>
    acfc:	mov	w8, #0x3                   	// #3
    ad00:	b	ad28 <lzma_properties_decode@@XZ_5.0+0x88>
    ad04:	mov	w8, #0x4                   	// #4
    ad08:	b	ad28 <lzma_properties_decode@@XZ_5.0+0x88>
    ad0c:	mov	w8, #0x5                   	// #5
    ad10:	b	ad28 <lzma_properties_decode@@XZ_5.0+0x88>
    ad14:	mov	w8, #0x6                   	// #6
    ad18:	b	ad28 <lzma_properties_decode@@XZ_5.0+0x88>
    ad1c:	mov	w8, #0x7                   	// #7
    ad20:	b	ad28 <lzma_properties_decode@@XZ_5.0+0x88>
    ad24:	mov	w8, #0x1                   	// #1
    ad28:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    ad2c:	add	x9, x9, #0xbf8
    ad30:	add	x8, x9, x8, lsl #5
    ad34:	ldr	x4, [x8, #24]
    ad38:	br	x4

000000000000ad3c <lzma_filter_flags_decode@@XZ_5.0>:
    ad3c:	stp	x29, x30, [sp, #-64]!
    ad40:	stp	x20, x19, [sp, #48]
    ad44:	mov	x20, x1
    ad48:	mov	x1, xzr
    ad4c:	str	x23, [sp, #16]
    ad50:	stp	x22, x21, [sp, #32]
    ad54:	mov	x29, sp
    ad58:	mov	x23, x4
    ad5c:	mov	x19, x3
    ad60:	mov	x22, x2
    ad64:	mov	x21, x0
    ad68:	str	xzr, [x0, #8]
    ad6c:	bl	3340 <lzma_vli_decode@plt>
    ad70:	cbnz	w0, add8 <lzma_filter_flags_decode@@XZ_5.0+0x9c>
    ad74:	ldr	x8, [x21]
    ad78:	lsr	x8, x8, #62
    ad7c:	cbz	x8, ad88 <lzma_filter_flags_decode@@XZ_5.0+0x4c>
    ad80:	mov	w0, #0x9                   	// #9
    ad84:	b	add8 <lzma_filter_flags_decode@@XZ_5.0+0x9c>
    ad88:	add	x0, x29, #0x18
    ad8c:	mov	x1, xzr
    ad90:	mov	x2, x22
    ad94:	mov	x3, x19
    ad98:	mov	x4, x23
    ad9c:	bl	3340 <lzma_vli_decode@plt>
    ada0:	cbnz	w0, add8 <lzma_filter_flags_decode@@XZ_5.0+0x9c>
    ada4:	ldr	x8, [x19]
    ada8:	ldr	x3, [x29, #24]
    adac:	sub	x9, x23, x8
    adb0:	cmp	x9, x3
    adb4:	b.cc	ad80 <lzma_filter_flags_decode@@XZ_5.0+0x44>  // b.lo, b.ul, b.last
    adb8:	add	x2, x22, x8
    adbc:	mov	x0, x21
    adc0:	mov	x1, x20
    adc4:	bl	31e0 <lzma_properties_decode@plt>
    adc8:	ldr	x8, [x29, #24]
    adcc:	ldr	x9, [x19]
    add0:	add	x8, x9, x8
    add4:	str	x8, [x19]
    add8:	ldp	x20, x19, [sp, #48]
    addc:	ldp	x22, x21, [sp, #32]
    ade0:	ldr	x23, [sp, #16]
    ade4:	ldp	x29, x30, [sp], #64
    ade8:	ret

000000000000adec <lzma_index_decoder@@XZ_5.0>:
    adec:	stp	x29, x30, [sp, #-48]!
    adf0:	stp	x22, x21, [sp, #16]
    adf4:	stp	x20, x19, [sp, #32]
    adf8:	mov	x29, sp
    adfc:	mov	x21, x2
    ae00:	mov	x22, x1
    ae04:	mov	x19, x0
    ae08:	bl	3914 <lzma_version_string@@XZ_5.0+0x2b8>
    ae0c:	mov	w20, w0
    ae10:	cbnz	w0, ae48 <lzma_index_decoder@@XZ_5.0+0x5c>
    ae14:	ldp	x1, x0, [x19, #48]
    ae18:	mov	x2, x22
    ae1c:	mov	x3, x21
    ae20:	bl	ae5c <lzma_index_decoder@@XZ_5.0+0x70>
    ae24:	mov	w20, w0
    ae28:	cbz	w0, ae38 <lzma_index_decoder@@XZ_5.0+0x4c>
    ae2c:	mov	x0, x19
    ae30:	bl	32c0 <lzma_end@plt>
    ae34:	b	ae48 <lzma_index_decoder@@XZ_5.0+0x5c>
    ae38:	ldr	x8, [x19, #56]
    ae3c:	mov	w9, #0x1                   	// #1
    ae40:	strb	w9, [x8, #88]
    ae44:	strb	w9, [x8, #91]
    ae48:	mov	w0, w20
    ae4c:	ldp	x20, x19, [sp, #32]
    ae50:	ldp	x22, x21, [sp, #16]
    ae54:	ldp	x29, x30, [sp], #48
    ae58:	ret
    ae5c:	stp	x29, x30, [sp, #-64]!
    ae60:	stp	x22, x21, [sp, #32]
    ae64:	stp	x20, x19, [sp, #48]
    ae68:	ldr	x8, [x0, #16]
    ae6c:	adrp	x22, a000 <lzma_auto_decoder@@XZ_5.0+0x2e4>
    ae70:	add	x22, x22, #0xe5c
    ae74:	str	x23, [sp, #16]
    ae78:	mov	x19, x3
    ae7c:	mov	x20, x2
    ae80:	mov	x23, x0
    ae84:	cmp	x8, x22
    ae88:	mov	x21, x1
    ae8c:	mov	x29, sp
    ae90:	b.eq	aea0 <lzma_index_decoder@@XZ_5.0+0xb4>  // b.none
    ae94:	mov	x0, x23
    ae98:	mov	x1, x21
    ae9c:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    aea0:	str	x22, [x23, #16]
    aea4:	cbz	x20, aec0 <lzma_index_decoder@@XZ_5.0+0xd4>
    aea8:	ldr	x22, [x23]
    aeac:	cbz	x22, aec8 <lzma_index_decoder@@XZ_5.0+0xdc>
    aeb0:	ldr	x0, [x22, #16]
    aeb4:	mov	x1, x21
    aeb8:	bl	3360 <lzma_index_end@plt>
    aebc:	b	af04 <lzma_index_decoder@@XZ_5.0+0x118>
    aec0:	mov	w0, #0xb                   	// #11
    aec4:	b	af44 <lzma_index_decoder@@XZ_5.0+0x158>
    aec8:	mov	w0, #0x48                  	// #72
    aecc:	mov	x1, x21
    aed0:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    aed4:	cbz	x0, af40 <lzma_index_decoder@@XZ_5.0+0x154>
    aed8:	adrp	x8, b000 <lzma_index_buffer_decode@@XZ_5.0+0xa8>
    aedc:	adrp	x9, b000 <lzma_index_buffer_decode@@XZ_5.0+0xa8>
    aee0:	adrp	x10, b000 <lzma_index_buffer_decode@@XZ_5.0+0xa8>
    aee4:	add	x8, x8, #0x84
    aee8:	add	x9, x9, #0x370
    aeec:	add	x10, x10, #0x3a0
    aef0:	mov	x22, x0
    aef4:	str	x0, [x23]
    aef8:	stp	x8, x9, [x23, #24]
    aefc:	str	x10, [x23, #56]
    af00:	str	xzr, [x0, #16]
    af04:	mov	x0, x21
    af08:	str	x20, [x22, #24]
    af0c:	str	xzr, [x20]
    af10:	bl	3330 <lzma_index_init@plt>
    af14:	str	x0, [x22, #16]
    af18:	cbz	x0, af40 <lzma_index_decoder@@XZ_5.0+0x154>
    af1c:	cmp	x19, #0x0
    af20:	mov	w0, wzr
    af24:	csinc	x8, x19, xzr, ne  // ne = any
    af28:	str	wzr, [x22]
    af2c:	str	xzr, [x22, #32]
    af30:	str	xzr, [x22, #56]
    af34:	str	x8, [x22, #8]
    af38:	str	wzr, [x22, #64]
    af3c:	b	af44 <lzma_index_decoder@@XZ_5.0+0x158>
    af40:	mov	w0, #0x5                   	// #5
    af44:	ldp	x20, x19, [sp, #48]
    af48:	ldp	x22, x21, [sp, #32]
    af4c:	ldr	x23, [sp, #16]
    af50:	ldp	x29, x30, [sp], #64
    af54:	ret

000000000000af58 <lzma_index_buffer_decode@@XZ_5.0>:
    af58:	sub	sp, sp, #0x90
    af5c:	mov	x8, x0
    af60:	mov	w0, #0xb                   	// #11
    af64:	stp	x29, x30, [sp, #80]
    af68:	stp	x24, x23, [sp, #96]
    af6c:	stp	x22, x21, [sp, #112]
    af70:	stp	x20, x19, [sp, #128]
    af74:	add	x29, sp, #0x50
    af78:	cbz	x8, b06c <lzma_index_buffer_decode@@XZ_5.0+0x114>
    af7c:	mov	x19, x1
    af80:	cbz	x1, b06c <lzma_index_buffer_decode@@XZ_5.0+0x114>
    af84:	mov	x23, x3
    af88:	cbz	x3, b06c <lzma_index_buffer_decode@@XZ_5.0+0x114>
    af8c:	mov	x20, x4
    af90:	cbz	x4, b06c <lzma_index_buffer_decode@@XZ_5.0+0x114>
    af94:	ldr	x9, [x20]
    af98:	mov	x22, x5
    af9c:	cmp	x9, x5
    afa0:	b.ls	afac <lzma_index_buffer_decode@@XZ_5.0+0x54>  // b.plast
    afa4:	mov	w0, #0xb                   	// #11
    afa8:	b	b06c <lzma_index_buffer_decode@@XZ_5.0+0x114>
    afac:	ldr	x24, [x19]
    afb0:	mov	x0, x2
    afb4:	mov	x21, x2
    afb8:	str	x8, [sp, #32]
    afbc:	str	xzr, [x8]
    afc0:	bl	3330 <lzma_index_init@plt>
    afc4:	str	x0, [sp, #24]
    afc8:	cbz	x0, b058 <lzma_index_buffer_decode@@XZ_5.0+0x100>
    afcc:	cmp	x24, #0x0
    afd0:	csinc	x8, x24, xzr, ne  // ne = any
    afd4:	str	wzr, [sp, #8]
    afd8:	str	xzr, [sp, #64]
    afdc:	str	x8, [sp, #16]
    afe0:	str	xzr, [sp, #40]
    afe4:	str	wzr, [sp, #72]
    afe8:	ldr	x24, [x20]
    afec:	add	x0, sp, #0x8
    aff0:	mov	x1, x21
    aff4:	mov	x2, x23
    aff8:	mov	x3, x20
    affc:	mov	x4, x22
    b000:	mov	x5, xzr
    b004:	mov	x6, xzr
    b008:	mov	x7, xzr
    b00c:	str	wzr, [sp]
    b010:	bl	b084 <lzma_index_buffer_decode@@XZ_5.0+0x12c>
    b014:	mov	w22, w0
    b018:	cmp	w0, #0x1
    b01c:	mov	w0, wzr
    b020:	b.eq	b06c <lzma_index_buffer_decode@@XZ_5.0+0x114>  // b.none
    b024:	ldr	x0, [sp, #24]
    b028:	mov	x1, x21
    b02c:	bl	3360 <lzma_index_end@plt>
    b030:	str	x24, [x20]
    b034:	cbz	w22, b060 <lzma_index_buffer_decode@@XZ_5.0+0x108>
    b038:	cmp	w22, #0x6
    b03c:	b.ne	b068 <lzma_index_buffer_decode@@XZ_5.0+0x110>  // b.any
    b040:	ldr	x1, [sp, #40]
    b044:	mov	w0, #0x1                   	// #1
    b048:	bl	3120 <lzma_index_memusage@plt>
    b04c:	str	x0, [x19]
    b050:	mov	w0, #0x6                   	// #6
    b054:	b	b06c <lzma_index_buffer_decode@@XZ_5.0+0x114>
    b058:	mov	w0, #0x5                   	// #5
    b05c:	b	b06c <lzma_index_buffer_decode@@XZ_5.0+0x114>
    b060:	mov	w0, #0x9                   	// #9
    b064:	b	b06c <lzma_index_buffer_decode@@XZ_5.0+0x114>
    b068:	mov	w0, w22
    b06c:	ldp	x20, x19, [sp, #128]
    b070:	ldp	x22, x21, [sp, #112]
    b074:	ldp	x24, x23, [sp, #96]
    b078:	ldp	x29, x30, [sp, #80]
    b07c:	add	sp, sp, #0x90
    b080:	ret
    b084:	sub	sp, sp, #0x70
    b088:	stp	x28, x27, [sp, #32]
    b08c:	ldr	x27, [x3]
    b090:	stp	x20, x19, [sp, #96]
    b094:	mov	x20, x2
    b098:	mov	x19, x0
    b09c:	cmp	x27, x4
    b0a0:	stp	x29, x30, [sp, #16]
    b0a4:	stp	x26, x25, [sp, #48]
    b0a8:	stp	x24, x23, [sp, #64]
    b0ac:	stp	x22, x21, [sp, #80]
    b0b0:	add	x29, sp, #0x10
    b0b4:	str	x1, [sp]
    b0b8:	b.cs	b28c <lzma_index_buffer_decode@@XZ_5.0+0x334>  // b.hs, b.nlast
    b0bc:	add	x8, x19, #0x30
    b0c0:	str	x8, [sp, #8]
    b0c4:	mov	x25, x19
    b0c8:	ldr	w8, [x25], #32
    b0cc:	adrp	x24, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    b0d0:	mov	x22, x4
    b0d4:	mov	x21, x3
    b0d8:	add	x23, x19, #0x38
    b0dc:	add	x28, x19, #0x28
    b0e0:	add	x24, x24, #0x49a
    b0e4:	mov	x26, x27
    b0e8:	cmp	w8, #0x7
    b0ec:	b.hi	b298 <lzma_index_buffer_decode@@XZ_5.0+0x340>  // b.pmore
    b0f0:	mov	w9, w8
    b0f4:	adr	x10, b104 <lzma_index_buffer_decode@@XZ_5.0+0x1ac>
    b0f8:	ldrb	w11, [x24, x9]
    b0fc:	add	x10, x10, x11, lsl #2
    b100:	br	x10
    b104:	cmp	w8, #0x3
    b108:	ldr	x8, [sp, #8]
    b10c:	mov	x1, x23
    b110:	mov	x2, x20
    b114:	mov	x3, x21
    b118:	csel	x0, x28, x8, eq  // eq = none
    b11c:	mov	x4, x22
    b120:	bl	3340 <lzma_vli_decode@plt>
    b124:	cmp	w0, #0x1
    b128:	b.ne	b2a0 <lzma_index_buffer_decode@@XZ_5.0+0x348>  // b.any
    b12c:	ldr	w8, [x19]
    b130:	str	xzr, [x19, #56]
    b134:	cmp	w8, #0x3
    b138:	b.ne	b248 <lzma_index_buffer_decode@@XZ_5.0+0x2f0>  // b.any
    b13c:	ldr	x8, [x28]
    b140:	mov	x9, #0xfffffffffffffff7    	// #-9
    b144:	movk	x9, #0x7fff, lsl #48
    b148:	sub	x8, x8, #0x5
    b14c:	cmp	x8, x9
    b150:	b.hi	b358 <lzma_index_buffer_decode@@XZ_5.0+0x400>  // b.pmore
    b154:	mov	w8, #0x4                   	// #4
    b158:	str	w8, [x19]
    b15c:	ldr	x26, [x21]
    b160:	cmp	x26, x22
    b164:	b.cc	b0e8 <lzma_index_buffer_decode@@XZ_5.0+0x190>  // b.lo, b.ul, b.last
    b168:	b	b284 <lzma_index_buffer_decode@@XZ_5.0+0x32c>
    b16c:	ldrb	w8, [x20, x26]
    b170:	add	x9, x26, #0x1
    b174:	str	x9, [x21]
    b178:	cbnz	w8, b358 <lzma_index_buffer_decode@@XZ_5.0+0x400>
    b17c:	mov	w8, #0x1                   	// #1
    b180:	str	w8, [x19]
    b184:	ldr	x26, [x21]
    b188:	cmp	x26, x22
    b18c:	b.cc	b0e8 <lzma_index_buffer_decode@@XZ_5.0+0x190>  // b.lo, b.ul, b.last
    b190:	b	b284 <lzma_index_buffer_decode@@XZ_5.0+0x32c>
    b194:	mov	x0, x25
    b198:	mov	x1, x23
    b19c:	mov	x2, x20
    b1a0:	mov	x3, x21
    b1a4:	mov	x4, x22
    b1a8:	bl	3340 <lzma_vli_decode@plt>
    b1ac:	cmp	w0, #0x1
    b1b0:	b.ne	b2a0 <lzma_index_buffer_decode@@XZ_5.0+0x348>  // b.any
    b1b4:	mov	w8, #0x2                   	// #2
    b1b8:	str	xzr, [x19, #56]
    b1bc:	str	w8, [x19]
    b1c0:	ldr	x1, [x19, #32]
    b1c4:	mov	w0, #0x1                   	// #1
    b1c8:	bl	3120 <lzma_index_memusage@plt>
    b1cc:	ldr	x8, [x19, #8]
    b1d0:	cmp	x0, x8
    b1d4:	b.hi	b2a8 <lzma_index_buffer_decode@@XZ_5.0+0x350>  // b.pmore
    b1d8:	ldr	x0, [x19, #16]
    b1dc:	ldr	x1, [x19, #32]
    b1e0:	bl	47a4 <lzma_index_end@@XZ_5.0+0x88>
    b1e4:	ldr	x8, [x19, #32]
    b1e8:	cmp	x8, #0x0
    b1ec:	b	b268 <lzma_index_buffer_decode@@XZ_5.0+0x310>
    b1f0:	ldr	x0, [x19, #16]
    b1f4:	bl	49b4 <lzma_index_checks@@XZ_5.0+0x28>
    b1f8:	mov	w8, w0
    b1fc:	mov	w9, #0x6                   	// #6
    b200:	str	x8, [x19, #56]
    b204:	str	w9, [x19]
    b208:	cbnz	x8, b218 <lzma_index_buffer_decode@@XZ_5.0+0x2c0>
    b20c:	b	b2e8 <lzma_index_buffer_decode@@XZ_5.0+0x390>
    b210:	ldr	x8, [x23]
    b214:	cbz	x8, b2e8 <lzma_index_buffer_decode@@XZ_5.0+0x390>
    b218:	sub	x8, x8, #0x1
    b21c:	str	x8, [x23]
    b220:	ldr	x8, [x21]
    b224:	ldrb	w9, [x20, x8]
    b228:	add	x8, x8, #0x1
    b22c:	str	x8, [x21]
    b230:	cbnz	w9, b358 <lzma_index_buffer_decode@@XZ_5.0+0x400>
    b234:	mov	w8, #0x6                   	// #6
    b238:	ldr	x26, [x21]
    b23c:	cmp	x26, x22
    b240:	b.cc	b0e8 <lzma_index_buffer_decode@@XZ_5.0+0x190>  // b.lo, b.ul, b.last
    b244:	b	b284 <lzma_index_buffer_decode@@XZ_5.0+0x32c>
    b248:	ldr	x0, [x19, #16]
    b24c:	ldp	x2, x3, [x19, #40]
    b250:	ldr	x1, [sp]
    b254:	bl	32a0 <lzma_index_append@plt>
    b258:	cbnz	w0, b368 <lzma_index_buffer_decode@@XZ_5.0+0x410>
    b25c:	ldr	x8, [x25]
    b260:	subs	x8, x8, #0x1
    b264:	str	x8, [x25]
    b268:	mov	w8, #0x3                   	// #3
    b26c:	mov	w9, #0x5                   	// #5
    b270:	csel	w8, w9, w8, eq  // eq = none
    b274:	str	w8, [x19]
    b278:	ldr	x26, [x21]
    b27c:	cmp	x26, x22
    b280:	b.cc	b0e8 <lzma_index_buffer_decode@@XZ_5.0+0x190>  // b.lo, b.ul, b.last
    b284:	mov	w26, wzr
    b288:	b	b2ac <lzma_index_buffer_decode@@XZ_5.0+0x354>
    b28c:	mov	w26, wzr
    b290:	mov	x8, x27
    b294:	b	b2b0 <lzma_index_buffer_decode@@XZ_5.0+0x358>
    b298:	mov	w26, #0xb                   	// #11
    b29c:	b	b2c4 <lzma_index_buffer_decode@@XZ_5.0+0x36c>
    b2a0:	mov	w26, w0
    b2a4:	b	b2ac <lzma_index_buffer_decode@@XZ_5.0+0x354>
    b2a8:	mov	w26, #0x6                   	// #6
    b2ac:	ldr	x8, [x21]
    b2b0:	ldr	w2, [x19, #64]
    b2b4:	add	x0, x20, x27
    b2b8:	sub	x1, x8, x27
    b2bc:	bl	3160 <lzma_crc32@plt>
    b2c0:	str	w0, [x19, #64]
    b2c4:	mov	w0, w26
    b2c8:	ldp	x20, x19, [sp, #96]
    b2cc:	ldp	x22, x21, [sp, #80]
    b2d0:	ldp	x24, x23, [sp, #64]
    b2d4:	ldp	x26, x25, [sp, #48]
    b2d8:	ldp	x28, x27, [sp, #32]
    b2dc:	ldp	x29, x30, [sp, #16]
    b2e0:	add	sp, sp, #0x70
    b2e4:	ret
    b2e8:	ldr	x26, [x21]
    b2ec:	ldr	w2, [x19, #64]
    b2f0:	add	x0, x20, x27
    b2f4:	sub	x1, x26, x27
    b2f8:	bl	3160 <lzma_crc32@plt>
    b2fc:	mov	w8, #0x7                   	// #7
    b300:	str	w0, [x19, #64]
    b304:	str	w8, [x19]
    b308:	cmp	x22, x26
    b30c:	b.eq	b360 <lzma_index_buffer_decode@@XZ_5.0+0x408>  // b.none
    b310:	ldr	x8, [x19, #56]
    b314:	ldr	w9, [x19, #64]
    b318:	ldrb	w10, [x20, x26]
    b31c:	add	x26, x26, #0x1
    b320:	lsl	w11, w8, #3
    b324:	lsr	w9, w9, w11
    b328:	cmp	w10, w9, uxtb
    b32c:	str	x26, [x21]
    b330:	b.ne	b358 <lzma_index_buffer_decode@@XZ_5.0+0x400>  // b.any
    b334:	add	x8, x8, #0x1
    b338:	cmp	x8, #0x4
    b33c:	str	x8, [x23]
    b340:	b.cc	b308 <lzma_index_buffer_decode@@XZ_5.0+0x3b0>  // b.lo, b.ul, b.last
    b344:	ldp	x8, x9, [x19, #16]
    b348:	mov	w26, #0x1                   	// #1
    b34c:	str	x8, [x9]
    b350:	str	xzr, [x19, #16]
    b354:	b	b2c4 <lzma_index_buffer_decode@@XZ_5.0+0x36c>
    b358:	mov	w26, #0x9                   	// #9
    b35c:	b	b2c4 <lzma_index_buffer_decode@@XZ_5.0+0x36c>
    b360:	mov	w26, wzr
    b364:	b	b2c4 <lzma_index_buffer_decode@@XZ_5.0+0x36c>
    b368:	mov	w26, w0
    b36c:	b	b2c4 <lzma_index_buffer_decode@@XZ_5.0+0x36c>
    b370:	stp	x29, x30, [sp, #-32]!
    b374:	stp	x20, x19, [sp, #16]
    b378:	mov	x19, x0
    b37c:	ldr	x0, [x0, #16]
    b380:	mov	x29, sp
    b384:	mov	x20, x1
    b388:	bl	3360 <lzma_index_end@plt>
    b38c:	mov	x0, x19
    b390:	mov	x1, x20
    b394:	ldp	x20, x19, [sp, #16]
    b398:	ldp	x29, x30, [sp], #32
    b39c:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
    b3a0:	stp	x29, x30, [sp, #-48]!
    b3a4:	stp	x22, x21, [sp, #16]
    b3a8:	stp	x20, x19, [sp, #32]
    b3ac:	ldr	x8, [x0, #32]
    b3b0:	mov	x20, x0
    b3b4:	mov	x21, x1
    b3b8:	mov	w0, #0x1                   	// #1
    b3bc:	mov	x1, x8
    b3c0:	mov	x29, sp
    b3c4:	mov	x19, x3
    b3c8:	mov	x22, x2
    b3cc:	bl	3120 <lzma_index_memusage@plt>
    b3d0:	str	x0, [x21]
    b3d4:	ldr	x8, [x20, #8]
    b3d8:	str	x8, [x22]
    b3dc:	cbz	x19, b400 <lzma_index_buffer_decode@@XZ_5.0+0x4a8>
    b3e0:	ldr	x8, [x21]
    b3e4:	cmp	x8, x19
    b3e8:	b.ls	b414 <lzma_index_buffer_decode@@XZ_5.0+0x4bc>  // b.plast
    b3ec:	mov	w0, #0x6                   	// #6
    b3f0:	ldp	x20, x19, [sp, #32]
    b3f4:	ldp	x22, x21, [sp, #16]
    b3f8:	ldp	x29, x30, [sp], #48
    b3fc:	ret
    b400:	mov	w0, wzr
    b404:	ldp	x20, x19, [sp, #32]
    b408:	ldp	x22, x21, [sp, #16]
    b40c:	ldp	x29, x30, [sp], #48
    b410:	ret
    b414:	mov	w0, wzr
    b418:	str	x19, [x20, #8]
    b41c:	ldp	x20, x19, [sp, #32]
    b420:	ldp	x22, x21, [sp, #16]
    b424:	ldp	x29, x30, [sp], #48
    b428:	ret

000000000000b42c <lzma_index_hash_init@@XZ_5.0>:
    b42c:	stp	x29, x30, [sp, #-32]!
    b430:	str	x19, [sp, #16]
    b434:	mov	x19, x0
    b438:	mov	x29, sp
    b43c:	cbnz	x0, b450 <lzma_index_hash_init@@XZ_5.0+0x24>
    b440:	mov	w0, #0x140                 	// #320
    b444:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    b448:	mov	x19, x0
    b44c:	cbz	x0, b488 <lzma_index_hash_init@@XZ_5.0+0x5c>
    b450:	add	x0, x19, #0x28
    b454:	movi	v0.2d, #0x0
    b458:	mov	w1, #0xa                   	// #10
    b45c:	str	wzr, [x19]
    b460:	stp	xzr, xzr, [x19, #296]
    b464:	str	xzr, [x19, #288]
    b468:	stur	q0, [x19, #8]
    b46c:	stur	q0, [x19, #24]
    b470:	stp	q0, q0, [x19, #144]
    b474:	str	wzr, [x19, #312]
    b478:	bl	c554 <lzma_check_size@@XZ_5.0+0x20>
    b47c:	add	x0, x19, #0xb0
    b480:	mov	w1, #0xa                   	// #10
    b484:	bl	c554 <lzma_check_size@@XZ_5.0+0x20>
    b488:	mov	x0, x19
    b48c:	ldr	x19, [sp, #16]
    b490:	ldp	x29, x30, [sp], #32
    b494:	ret

000000000000b498 <lzma_index_hash_end@@XZ_5.0>:
    b498:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>

000000000000b49c <lzma_index_hash_size@@XZ_5.0>:
    b49c:	stp	x29, x30, [sp, #-32]!
    b4a0:	str	x19, [sp, #16]
    b4a4:	ldp	x8, x19, [x0, #24]
    b4a8:	mov	x29, sp
    b4ac:	mov	x0, x8
    b4b0:	bl	3400 <lzma_vli_size@plt>
    b4b4:	add	w8, w0, #0x1
    b4b8:	add	x8, x19, x8
    b4bc:	ldr	x19, [sp, #16]
    b4c0:	add	x8, x8, #0x7
    b4c4:	and	x0, x8, #0xfffffffffffffffc
    b4c8:	ldp	x29, x30, [sp], #32
    b4cc:	ret

000000000000b4d0 <lzma_index_hash_append@@XZ_5.0>:
    b4d0:	sub	sp, sp, #0x40
    b4d4:	stp	x20, x19, [sp, #48]
    b4d8:	mov	x19, x0
    b4dc:	mov	w0, #0xb                   	// #11
    b4e0:	stp	x29, x30, [sp, #16]
    b4e4:	stp	x22, x21, [sp, #32]
    b4e8:	add	x29, sp, #0x10
    b4ec:	tbnz	x2, #63, b5bc <lzma_index_hash_append@@XZ_5.0+0xec>
    b4f0:	mov	x9, #0xfffffffffffffff7    	// #-9
    b4f4:	sub	x8, x1, #0x5
    b4f8:	movk	x9, #0x7fff, lsl #48
    b4fc:	mov	x21, x1
    b500:	cmp	x8, x9
    b504:	b.hi	b5bc <lzma_index_hash_append@@XZ_5.0+0xec>  // b.pmore
    b508:	ldr	w8, [x19]
    b50c:	cbnz	w8, b5bc <lzma_index_hash_append@@XZ_5.0+0xec>
    b510:	ldp	x8, x9, [x19, #8]
    b514:	add	x10, x21, #0x3
    b518:	and	x10, x10, #0xfffffffffffffffc
    b51c:	mov	x0, x21
    b520:	add	x8, x8, x10
    b524:	add	x9, x9, x2
    b528:	mov	x20, x2
    b52c:	stp	x8, x9, [x19, #8]
    b530:	bl	3400 <lzma_vli_size@plt>
    b534:	mov	w22, w0
    b538:	mov	x0, x20
    b53c:	bl	3400 <lzma_vli_size@plt>
    b540:	ldp	x9, x8, [x19, #24]
    b544:	add	w10, w0, w22
    b548:	add	x0, x19, #0x28
    b54c:	mov	x2, sp
    b550:	add	x8, x8, x10
    b554:	add	x9, x9, #0x1
    b558:	mov	w1, #0xa                   	// #10
    b55c:	mov	w3, #0x10                  	// #16
    b560:	stp	x9, x8, [x19, #24]
    b564:	stp	x21, x20, [sp]
    b568:	bl	c580 <lzma_check_size@@XZ_5.0+0x4c>
    b56c:	ldr	x20, [x19, #8]
    b570:	tbnz	x20, #63, b5b8 <lzma_index_hash_append@@XZ_5.0+0xe8>
    b574:	ldr	x8, [x19, #16]
    b578:	tbnz	x8, #63, b5b8 <lzma_index_hash_append@@XZ_5.0+0xe8>
    b57c:	ldp	x0, x19, [x19, #24]
    b580:	bl	3400 <lzma_vli_size@plt>
    b584:	add	w8, w0, #0x1
    b588:	add	x8, x19, x8
    b58c:	add	x8, x8, #0x7
    b590:	and	x8, x8, #0xfffffffffffffffc
    b594:	mov	x9, #0x400000000           	// #17179869184
    b598:	cmp	x8, x9
    b59c:	mov	w0, #0x9                   	// #9
    b5a0:	b.hi	b5bc <lzma_index_hash_append@@XZ_5.0+0xec>  // b.pmore
    b5a4:	add	x8, x20, x8
    b5a8:	add	x8, x8, #0x18
    b5ac:	asr	x8, x8, #63
    b5b0:	and	w0, w8, w0
    b5b4:	b	b5bc <lzma_index_hash_append@@XZ_5.0+0xec>
    b5b8:	mov	w0, #0x9                   	// #9
    b5bc:	ldp	x20, x19, [sp, #48]
    b5c0:	ldp	x22, x21, [sp, #32]
    b5c4:	ldp	x29, x30, [sp, #16]
    b5c8:	add	sp, sp, #0x40
    b5cc:	ret

000000000000b5d0 <lzma_index_hash_decode@@XZ_5.0>:
    b5d0:	sub	sp, sp, #0x90
    b5d4:	stp	x29, x30, [sp, #48]
    b5d8:	stp	x28, x27, [sp, #64]
    b5dc:	stp	x26, x25, [sp, #80]
    b5e0:	stp	x24, x23, [sp, #96]
    b5e4:	stp	x22, x21, [sp, #112]
    b5e8:	stp	x20, x19, [sp, #128]
    b5ec:	ldr	x27, [x2]
    b5f0:	add	x29, sp, #0x30
    b5f4:	cmp	x27, x3
    b5f8:	b.cs	b888 <lzma_index_hash_decode@@XZ_5.0+0x2b8>  // b.hs, b.nlast
    b5fc:	add	x8, x0, #0x118
    b600:	mov	x9, x0
    b604:	str	x8, [sp, #24]
    b608:	ldr	w8, [x9], #176
    b60c:	adrp	x25, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    b610:	mov	x21, x3
    b614:	mov	x20, x2
    b618:	mov	x19, x1
    b61c:	mov	x22, x0
    b620:	add	x23, x0, #0x130
    b624:	add	x28, x0, #0x120
    b628:	add	x24, x0, #0x128
    b62c:	add	x25, x25, #0x4a2
    b630:	stp	x3, x9, [sp, #8]
    b634:	str	x27, [sp]
    b638:	cmp	w8, #0x6
    b63c:	b.hi	b890 <lzma_index_hash_decode@@XZ_5.0+0x2c0>  // b.pmore
    b640:	mov	w9, w8
    b644:	adr	x10, b654 <lzma_index_hash_decode@@XZ_5.0+0x84>
    b648:	ldrb	w11, [x25, x9]
    b64c:	add	x10, x10, x11, lsl #2
    b650:	br	x10
    b654:	cmp	w8, #0x2
    b658:	csel	x0, x28, x24, eq  // eq = none
    b65c:	mov	x1, x23
    b660:	mov	x2, x19
    b664:	mov	x3, x20
    b668:	mov	x4, x21
    b66c:	bl	3340 <lzma_vli_decode@plt>
    b670:	cmp	w0, #0x1
    b674:	b.ne	b898 <lzma_index_hash_decode@@XZ_5.0+0x2c8>  // b.any
    b678:	ldr	w8, [x22]
    b67c:	ldr	x26, [x22, #288]
    b680:	str	xzr, [x22, #304]
    b684:	cmp	w8, #0x2
    b688:	b.ne	b79c <lzma_index_hash_decode@@XZ_5.0+0x1cc>  // b.any
    b68c:	mov	x9, #0xfffffffffffffff7    	// #-9
    b690:	sub	x8, x26, #0x5
    b694:	movk	x9, #0x7fff, lsl #48
    b698:	cmp	x8, x9
    b69c:	b.hi	b928 <lzma_index_hash_decode@@XZ_5.0+0x358>  // b.pmore
    b6a0:	mov	w8, #0x3                   	// #3
    b6a4:	str	w8, [x22]
    b6a8:	ldr	x27, [x20]
    b6ac:	cmp	x27, x21
    b6b0:	b.cc	b638 <lzma_index_hash_decode@@XZ_5.0+0x68>  // b.lo, b.ul, b.last
    b6b4:	b	b880 <lzma_index_hash_decode@@XZ_5.0+0x2b0>
    b6b8:	add	x8, x27, #0x1
    b6bc:	str	x8, [x20]
    b6c0:	ldrb	w8, [x19, x27]
    b6c4:	cbnz	w8, b928 <lzma_index_hash_decode@@XZ_5.0+0x358>
    b6c8:	mov	w8, #0x1                   	// #1
    b6cc:	str	w8, [x22]
    b6d0:	ldr	x27, [x20]
    b6d4:	cmp	x27, x21
    b6d8:	b.cc	b638 <lzma_index_hash_decode@@XZ_5.0+0x68>  // b.lo, b.ul, b.last
    b6dc:	b	b880 <lzma_index_hash_decode@@XZ_5.0+0x2b0>
    b6e0:	ldr	x0, [sp, #24]
    b6e4:	mov	x1, x23
    b6e8:	mov	x2, x19
    b6ec:	mov	x3, x20
    b6f0:	mov	x4, x21
    b6f4:	bl	3340 <lzma_vli_decode@plt>
    b6f8:	cmp	w0, #0x1
    b6fc:	b.ne	b898 <lzma_index_hash_decode@@XZ_5.0+0x2c8>  // b.any
    b700:	ldr	x8, [x22, #280]
    b704:	ldr	x9, [x22, #24]
    b708:	cmp	x8, x9
    b70c:	b.ne	b928 <lzma_index_hash_decode@@XZ_5.0+0x358>  // b.any
    b710:	cmp	x8, #0x0
    b714:	mov	w8, #0x2                   	// #2
    b718:	mov	w9, #0x4                   	// #4
    b71c:	str	xzr, [x23]
    b720:	csel	w8, w9, w8, eq  // eq = none
    b724:	str	w8, [x22]
    b728:	ldr	x27, [x20]
    b72c:	cmp	x27, x21
    b730:	b.cc	b638 <lzma_index_hash_decode@@XZ_5.0+0x68>  // b.lo, b.ul, b.last
    b734:	b	b880 <lzma_index_hash_decode@@XZ_5.0+0x2b0>
    b738:	ldr	x0, [x22, #160]
    b73c:	ldr	w26, [x22, #168]
    b740:	bl	3400 <lzma_vli_size@plt>
    b744:	add	w8, w0, w26
    b748:	mvn	w8, w8
    b74c:	and	x8, x8, #0x3
    b750:	mov	w9, #0x5                   	// #5
    b754:	str	x8, [x22, #304]
    b758:	str	w9, [x22]
    b75c:	cbnz	x8, b76c <lzma_index_hash_decode@@XZ_5.0+0x19c>
    b760:	b	b8bc <lzma_index_hash_decode@@XZ_5.0+0x2ec>
    b764:	ldr	x8, [x23]
    b768:	cbz	x8, b8bc <lzma_index_hash_decode@@XZ_5.0+0x2ec>
    b76c:	sub	x8, x8, #0x1
    b770:	str	x8, [x23]
    b774:	ldr	x8, [x20]
    b778:	add	x9, x8, #0x1
    b77c:	str	x9, [x20]
    b780:	ldrb	w8, [x19, x8]
    b784:	cbnz	w8, b928 <lzma_index_hash_decode@@XZ_5.0+0x358>
    b788:	mov	w8, #0x5                   	// #5
    b78c:	ldr	x27, [x20]
    b790:	cmp	x27, x21
    b794:	b.cc	b638 <lzma_index_hash_decode@@XZ_5.0+0x68>  // b.lo, b.ul, b.last
    b798:	b	b880 <lzma_index_hash_decode@@XZ_5.0+0x2b0>
    b79c:	ldr	x27, [x22, #296]
    b7a0:	ldp	x8, x9, [x22, #144]
    b7a4:	add	x10, x26, #0x3
    b7a8:	and	x10, x10, #0xfffffffffffffffc
    b7ac:	mov	x0, x26
    b7b0:	add	x8, x8, x10
    b7b4:	add	x9, x9, x27
    b7b8:	mov	x21, x23
    b7bc:	mov	x23, x19
    b7c0:	mov	x19, x25
    b7c4:	mov	x25, x24
    b7c8:	mov	x24, x28
    b7cc:	stp	x8, x9, [x22, #144]
    b7d0:	bl	3400 <lzma_vli_size@plt>
    b7d4:	mov	w28, w0
    b7d8:	mov	x0, x27
    b7dc:	bl	3400 <lzma_vli_size@plt>
    b7e0:	ldp	x9, x8, [x22, #160]
    b7e4:	add	w10, w0, w28
    b7e8:	sub	x2, x29, #0x10
    b7ec:	mov	w1, #0xa                   	// #10
    b7f0:	add	x8, x8, x10
    b7f4:	add	x9, x9, #0x1
    b7f8:	stp	x9, x8, [x22, #160]
    b7fc:	ldr	x0, [sp, #16]
    b800:	mov	w3, #0x10                  	// #16
    b804:	stp	x26, x27, [x29, #-16]
    b808:	bl	c580 <lzma_check_size@@XZ_5.0+0x4c>
    b80c:	ldr	x8, [x22, #8]
    b810:	ldr	x9, [x22, #144]
    b814:	cmp	x8, x9
    b818:	b.cc	b928 <lzma_index_hash_decode@@XZ_5.0+0x358>  // b.lo, b.ul, b.last
    b81c:	ldr	x8, [x22, #16]
    b820:	ldr	x9, [x22, #152]
    b824:	cmp	x8, x9
    b828:	b.cc	b928 <lzma_index_hash_decode@@XZ_5.0+0x358>  // b.lo, b.ul, b.last
    b82c:	ldr	x8, [x22, #32]
    b830:	ldr	x9, [x22, #168]
    b834:	cmp	x8, x9
    b838:	b.cc	b928 <lzma_index_hash_decode@@XZ_5.0+0x358>  // b.lo, b.ul, b.last
    b83c:	ldr	x9, [sp, #24]
    b840:	mov	x28, x24
    b844:	mov	x24, x25
    b848:	mov	x25, x19
    b84c:	ldr	x8, [x9]
    b850:	mov	x19, x23
    b854:	mov	x23, x21
    b858:	ldr	x21, [sp, #8]
    b85c:	subs	x8, x8, #0x1
    b860:	str	x8, [x9]
    b864:	mov	w8, #0x2                   	// #2
    b868:	mov	w9, #0x4                   	// #4
    b86c:	csel	w8, w9, w8, eq  // eq = none
    b870:	str	w8, [x22]
    b874:	ldr	x27, [x20]
    b878:	cmp	x27, x21
    b87c:	b.cc	b638 <lzma_index_hash_decode@@XZ_5.0+0x68>  // b.lo, b.ul, b.last
    b880:	mov	w26, wzr
    b884:	b	b89c <lzma_index_hash_decode@@XZ_5.0+0x2cc>
    b888:	mov	w26, #0xa                   	// #10
    b88c:	b	b92c <lzma_index_hash_decode@@XZ_5.0+0x35c>
    b890:	mov	w26, #0xb                   	// #11
    b894:	b	b92c <lzma_index_hash_decode@@XZ_5.0+0x35c>
    b898:	mov	w26, w0
    b89c:	ldr	x9, [sp]
    b8a0:	ldr	x8, [x20]
    b8a4:	ldr	w2, [x22, #312]
    b8a8:	add	x0, x19, x9
    b8ac:	sub	x1, x8, x9
    b8b0:	bl	3160 <lzma_crc32@plt>
    b8b4:	str	w0, [x22, #312]
    b8b8:	b	b92c <lzma_index_hash_decode@@XZ_5.0+0x35c>
    b8bc:	ldr	x8, [x22, #8]
    b8c0:	ldr	x9, [x22, #144]
    b8c4:	cmp	x8, x9
    b8c8:	b.ne	b928 <lzma_index_hash_decode@@XZ_5.0+0x358>  // b.any
    b8cc:	ldr	x8, [x22, #16]
    b8d0:	ldr	x9, [x22, #152]
    b8d4:	cmp	x8, x9
    b8d8:	b.ne	b928 <lzma_index_hash_decode@@XZ_5.0+0x358>  // b.any
    b8dc:	ldr	x8, [x22, #32]
    b8e0:	ldr	x9, [x22, #168]
    b8e4:	cmp	x8, x9
    b8e8:	b.ne	b928 <lzma_index_hash_decode@@XZ_5.0+0x358>  // b.any
    b8ec:	add	x25, x22, #0x28
    b8f0:	mov	w1, #0xa                   	// #10
    b8f4:	mov	x0, x25
    b8f8:	bl	c608 <lzma_check_size@@XZ_5.0+0xd4>
    b8fc:	ldr	x24, [sp, #16]
    b900:	mov	w1, #0xa                   	// #10
    b904:	mov	x0, x24
    b908:	bl	c608 <lzma_check_size@@XZ_5.0+0xd4>
    b90c:	mov	w0, #0xa                   	// #10
    b910:	bl	3200 <lzma_check_size@plt>
    b914:	mov	w2, w0
    b918:	mov	x0, x25
    b91c:	mov	x1, x24
    b920:	bl	3210 <bcmp@plt>
    b924:	cbz	w0, b950 <lzma_index_hash_decode@@XZ_5.0+0x380>
    b928:	mov	w26, #0x9                   	// #9
    b92c:	mov	w0, w26
    b930:	ldp	x20, x19, [sp, #128]
    b934:	ldp	x22, x21, [sp, #112]
    b938:	ldp	x24, x23, [sp, #96]
    b93c:	ldp	x26, x25, [sp, #80]
    b940:	ldp	x28, x27, [sp, #64]
    b944:	ldp	x29, x30, [sp, #48]
    b948:	add	sp, sp, #0x90
    b94c:	ret
    b950:	ldr	x27, [x20]
    b954:	ldr	x8, [sp]
    b958:	ldr	w2, [x22, #312]
    b95c:	add	x0, x19, x8
    b960:	sub	x1, x27, x8
    b964:	bl	3160 <lzma_crc32@plt>
    b968:	mov	w8, #0x6                   	// #6
    b96c:	str	w0, [x22, #312]
    b970:	str	w8, [x22]
    b974:	cmp	x27, x21
    b978:	b.ne	b984 <lzma_index_hash_decode@@XZ_5.0+0x3b4>  // b.any
    b97c:	mov	w26, wzr
    b980:	b	b92c <lzma_index_hash_decode@@XZ_5.0+0x35c>
    b984:	ldr	w8, [x22, #312]
    b988:	ldr	w9, [x23]
    b98c:	add	x10, x27, #0x1
    b990:	str	x10, [x20]
    b994:	ldrb	w10, [x19, x27]
    b998:	lsl	w9, w9, #3
    b99c:	lsr	w9, w8, w9
    b9a0:	cmp	w10, w9, uxtb
    b9a4:	b.ne	b928 <lzma_index_hash_decode@@XZ_5.0+0x358>  // b.any
    b9a8:	ldr	x9, [x23]
    b9ac:	add	x9, x9, #0x1
    b9b0:	cmp	x9, #0x3
    b9b4:	str	x9, [x23]
    b9b8:	b.hi	b9d0 <lzma_index_hash_decode@@XZ_5.0+0x400>  // b.pmore
    b9bc:	ldr	x27, [x20]
    b9c0:	mov	w26, wzr
    b9c4:	cmp	x27, x21
    b9c8:	b.ne	b988 <lzma_index_hash_decode@@XZ_5.0+0x3b8>  // b.any
    b9cc:	b	b92c <lzma_index_hash_decode@@XZ_5.0+0x35c>
    b9d0:	mov	w26, #0x1                   	// #1
    b9d4:	b	b92c <lzma_index_hash_decode@@XZ_5.0+0x35c>

000000000000b9d8 <lzma_stream_buffer_decode@@XZ_5.0>:
    b9d8:	sub	sp, sp, #0xd0
    b9dc:	stp	x29, x30, [sp, #112]
    b9e0:	stp	x28, x27, [sp, #128]
    b9e4:	stp	x26, x25, [sp, #144]
    b9e8:	stp	x24, x23, [sp, #160]
    b9ec:	stp	x22, x21, [sp, #176]
    b9f0:	stp	x20, x19, [sp, #192]
    b9f4:	add	x29, sp, #0x70
    b9f8:	cbz	x4, bae4 <lzma_stream_buffer_decode@@XZ_5.0+0x10c>
    b9fc:	ldr	x8, [x4]
    ba00:	mov	x23, x7
    ba04:	mov	x24, x6
    ba08:	mov	x20, x5
    ba0c:	mov	x21, x4
    ba10:	mov	x25, x3
    ba14:	mov	x19, x2
    ba18:	mov	w3, w1
    ba1c:	mov	x22, x0
    ba20:	cbnz	x25, ba30 <lzma_stream_buffer_decode@@XZ_5.0+0x58>
    ba24:	cmp	x8, x20
    ba28:	mov	x8, x20
    ba2c:	b.ne	bae4 <lzma_stream_buffer_decode@@XZ_5.0+0x10c>  // b.any
    ba30:	mov	w26, #0xb                   	// #11
    ba34:	cbz	x23, bae8 <lzma_stream_buffer_decode@@XZ_5.0+0x110>
    ba38:	cmp	x8, x20
    ba3c:	b.hi	bae8 <lzma_stream_buffer_decode@@XZ_5.0+0x110>  // b.pmore
    ba40:	ldr	x27, [x29, #96]
    ba44:	ldr	x8, [x23]
    ba48:	cbnz	x24, ba58 <lzma_stream_buffer_decode@@XZ_5.0+0x80>
    ba4c:	cmp	x8, x27
    ba50:	mov	x8, x27
    ba54:	b.ne	bae4 <lzma_stream_buffer_decode@@XZ_5.0+0x10c>  // b.any
    ba58:	mov	w26, #0xb                   	// #11
    ba5c:	tbnz	w3, #2, bae8 <lzma_stream_buffer_decode@@XZ_5.0+0x110>
    ba60:	cmp	x8, x27
    ba64:	b.hi	bae8 <lzma_stream_buffer_decode@@XZ_5.0+0x110>  // b.pmore
    ba68:	movi	v0.2d, #0x0
    ba6c:	mov	x8, #0xffffffffffffffff    	// #-1
    ba70:	str	xzr, [sp, #96]
    ba74:	stp	q0, q0, [sp, #64]
    ba78:	stp	q0, q0, [sp, #32]
    ba7c:	str	x8, [sp, #40]
    ba80:	ldr	x2, [x22]
    ba84:	add	x0, sp, #0x20
    ba88:	mov	x1, x19
    ba8c:	bl	bb64 <lzma_stream_buffer_decode@@XZ_5.0+0x18c>
    ba90:	mov	w26, w0
    ba94:	cbnz	w0, bb54 <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    ba98:	ldr	x8, [x23]
    ba9c:	ldr	x0, [sp, #32]
    baa0:	ldr	x28, [x21]
    baa4:	mov	w9, #0x3                   	// #3
    baa8:	str	x8, [sp, #16]
    baac:	ldr	x8, [sp, #56]
    bab0:	mov	x1, x19
    bab4:	mov	x2, x25
    bab8:	mov	x3, x21
    babc:	mov	x4, x20
    bac0:	mov	x5, x24
    bac4:	mov	x6, x23
    bac8:	mov	x7, x27
    bacc:	str	w9, [sp]
    bad0:	blr	x8
    bad4:	cmp	w0, #0x1
    bad8:	b.ne	bb0c <lzma_stream_buffer_decode@@XZ_5.0+0x134>  // b.any
    badc:	mov	w26, wzr
    bae0:	b	bb54 <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    bae4:	mov	w26, #0xb                   	// #11
    bae8:	mov	w0, w26
    baec:	ldp	x20, x19, [sp, #192]
    baf0:	ldp	x22, x21, [sp, #176]
    baf4:	ldp	x24, x23, [sp, #160]
    baf8:	ldp	x26, x25, [sp, #144]
    bafc:	ldp	x28, x27, [sp, #128]
    bb00:	ldp	x29, x30, [sp, #112]
    bb04:	add	sp, sp, #0xd0
    bb08:	ret
    bb0c:	ldr	x8, [sp, #16]
    bb10:	mov	w26, w0
    bb14:	cmp	w0, #0x6
    bb18:	str	x28, [x21]
    bb1c:	str	x8, [x23]
    bb20:	b.eq	bb3c <lzma_stream_buffer_decode@@XZ_5.0+0x164>  // b.none
    bb24:	cbnz	w26, bb54 <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    bb28:	ldr	x8, [x21]
    bb2c:	cmp	x8, x20
    bb30:	mov	w8, #0x9                   	// #9
    bb34:	cinc	w26, w8, ne  // ne = any
    bb38:	b	bb54 <lzma_stream_buffer_decode@@XZ_5.0+0x17c>
    bb3c:	ldr	x8, [sp, #88]
    bb40:	ldr	x0, [sp, #32]
    bb44:	add	x2, sp, #0x18
    bb48:	mov	x1, x22
    bb4c:	mov	x3, xzr
    bb50:	blr	x8
    bb54:	add	x0, sp, #0x20
    bb58:	mov	x1, x19
    bb5c:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    bb60:	b	bae8 <lzma_stream_buffer_decode@@XZ_5.0+0x110>
    bb64:	stp	x29, x30, [sp, #-64]!
    bb68:	stp	x22, x21, [sp, #32]
    bb6c:	stp	x20, x19, [sp, #48]
    bb70:	ldr	x8, [x0, #16]
    bb74:	adrp	x22, b000 <lzma_index_buffer_decode@@XZ_5.0+0xa8>
    bb78:	add	x22, x22, #0xb64
    bb7c:	str	x23, [sp, #16]
    bb80:	mov	w21, w3
    bb84:	mov	x20, x2
    bb88:	mov	x23, x0
    bb8c:	cmp	x8, x22
    bb90:	mov	x19, x1
    bb94:	mov	x29, sp
    bb98:	b.eq	bba8 <lzma_stream_buffer_decode@@XZ_5.0+0x1d0>  // b.none
    bb9c:	mov	x0, x23
    bba0:	mov	x1, x19
    bba4:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    bba8:	cmp	w21, #0x1f
    bbac:	str	x22, [x23, #16]
    bbb0:	b.ls	bbbc <lzma_stream_buffer_decode@@XZ_5.0+0x1e4>  // b.plast
    bbb4:	mov	w0, #0x8                   	// #8
    bbb8:	b	bc90 <lzma_stream_buffer_decode@@XZ_5.0+0x2b8>
    bbbc:	ldr	x22, [x23]
    bbc0:	cbnz	x22, bc24 <lzma_stream_buffer_decode@@XZ_5.0+0x24c>
    bbc4:	mov	w0, #0x580                 	// #1408
    bbc8:	mov	x1, x19
    bbcc:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    bbd0:	cbz	x0, bc8c <lzma_stream_buffer_decode@@XZ_5.0+0x2b4>
    bbd4:	adrp	x8, b000 <lzma_index_buffer_decode@@XZ_5.0+0xa8>
    bbd8:	adrp	x9, c000 <lzma_stream_buffer_decode@@XZ_5.0+0x628>
    bbdc:	add	x8, x8, #0xca4
    bbe0:	add	x9, x9, #0xdc
    bbe4:	adrp	x10, c000 <lzma_stream_buffer_decode@@XZ_5.0+0x628>
    bbe8:	stp	x8, x9, [x23, #24]
    bbec:	adrp	x8, c000 <lzma_stream_buffer_decode@@XZ_5.0+0x628>
    bbf0:	add	x10, x10, #0x118
    bbf4:	add	x8, x8, #0x120
    bbf8:	mov	x22, x0
    bbfc:	stp	x10, x8, [x23, #48]
    bc00:	mov	x8, #0xffffffffffffffff    	// #-1
    bc04:	movi	v0.2d, #0x0
    bc08:	str	x0, [x23]
    bc0c:	stp	xzr, x8, [x0, #8]
    bc10:	str	xzr, [x0, #344]
    bc14:	stur	q0, [x0, #24]
    bc18:	stur	q0, [x0, #40]
    bc1c:	stur	q0, [x0, #56]
    bc20:	str	xzr, [x0, #72]
    bc24:	cmp	x20, #0x0
    bc28:	and	w9, w21, #0x1
    bc2c:	lsr	w10, w21, #4
    bc30:	mov	w8, #0x8000                	// #32768
    bc34:	strb	w9, [x22, #368]
    bc38:	and	w9, w21, #0xff
    bc3c:	strb	w10, [x22, #371]
    bc40:	ldr	x0, [x22, #344]
    bc44:	csinc	x10, x20, xzr, ne  // ne = any
    bc48:	stp	x10, x8, [x22, #352]
    bc4c:	ubfx	w8, w9, #1, #1
    bc50:	strb	w8, [x22, #369]
    bc54:	ubfx	w8, w9, #2, #1
    bc58:	ubfx	w9, w9, #3, #1
    bc5c:	strb	w8, [x22, #370]
    bc60:	mov	w8, #0x1                   	// #1
    bc64:	mov	x1, x19
    bc68:	strb	w9, [x22, #372]
    bc6c:	strb	w8, [x22, #373]
    bc70:	bl	3220 <lzma_index_hash_init@plt>
    bc74:	str	x0, [x22, #344]
    bc78:	cbz	x0, bc8c <lzma_stream_buffer_decode@@XZ_5.0+0x2b4>
    bc7c:	mov	w0, wzr
    bc80:	str	wzr, [x22]
    bc84:	str	xzr, [x22, #376]
    bc88:	b	bc90 <lzma_stream_buffer_decode@@XZ_5.0+0x2b8>
    bc8c:	mov	w0, #0x5                   	// #5
    bc90:	ldp	x20, x19, [sp, #48]
    bc94:	ldp	x22, x21, [sp, #32]
    bc98:	ldr	x23, [sp, #16]
    bc9c:	ldp	x29, x30, [sp], #64
    bca0:	ret
    bca4:	sub	sp, sp, #0xe0
    bca8:	stp	x29, x30, [sp, #128]
    bcac:	add	x29, sp, #0x80
    bcb0:	ldr	w8, [x29, #96]
    bcb4:	stp	x28, x27, [sp, #144]
    bcb8:	stp	x26, x25, [sp, #160]
    bcbc:	stp	x24, x23, [sp, #176]
    bcc0:	str	w8, [sp, #44]
    bcc4:	add	x8, x0, #0x120
    bcc8:	stp	x22, x21, [sp, #192]
    bccc:	stp	x20, x19, [sp, #208]
    bcd0:	stp	x6, x7, [sp, #16]
    bcd4:	str	x5, [sp, #8]
    bcd8:	str	x8, [sp, #32]
    bcdc:	mov	x23, x0
    bce0:	ldr	w8, [x23], #8
    bce4:	mov	x24, x4
    bce8:	mov	x22, x3
    bcec:	mov	x25, x2
    bcf0:	mov	x26, x1
    bcf4:	mov	x21, x0
    bcf8:	add	x28, x0, #0x180
    bcfc:	add	x27, x0, #0x178
    bd00:	add	x20, x0, #0x50
    bd04:	cmp	w8, #0x5
    bd08:	b.hi	c050 <lzma_stream_buffer_decode@@XZ_5.0+0x678>  // b.pmore
    bd0c:	adrp	x11, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    bd10:	mov	w8, w8
    bd14:	add	x11, x11, #0x4a9
    bd18:	adr	x9, bd28 <lzma_stream_buffer_decode@@XZ_5.0+0x350>
    bd1c:	ldrb	w10, [x11, x8]
    bd20:	add	x9, x9, x10, lsl #2
    bd24:	br	x9
    bd28:	mov	w5, #0xc                   	// #12
    bd2c:	mov	x0, x25
    bd30:	mov	x1, x22
    bd34:	mov	x2, x24
    bd38:	mov	x3, x28
    bd3c:	mov	x4, x27
    bd40:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
    bd44:	ldr	x8, [x27]
    bd48:	cmp	x8, #0xc
    bd4c:	b.cc	c040 <lzma_stream_buffer_decode@@XZ_5.0+0x668>  // b.lo, b.ul, b.last
    bd50:	ldr	x0, [sp, #32]
    bd54:	mov	x1, x28
    bd58:	str	xzr, [x27]
    bd5c:	bl	3470 <lzma_stream_header_decode@plt>
    bd60:	cbnz	w0, c088 <lzma_stream_buffer_decode@@XZ_5.0+0x6b0>
    bd64:	ldr	w0, [x21, #304]
    bd68:	mov	w8, #0x1                   	// #1
    bd6c:	strb	wzr, [x21, #373]
    bd70:	str	w8, [x21]
    bd74:	str	w0, [x21, #88]
    bd78:	cbnz	w0, bd84 <lzma_stream_buffer_decode@@XZ_5.0+0x3ac>
    bd7c:	ldrb	w8, [x21, #368]
    bd80:	cbnz	w8, c0a4 <lzma_stream_buffer_decode@@XZ_5.0+0x6cc>
    bd84:	ldrb	w8, [x21, #369]
    bd88:	cbz	w8, bd98 <lzma_stream_buffer_decode@@XZ_5.0+0x3c0>
    bd8c:	bl	3080 <lzma_check_is_supported@plt>
    bd90:	tst	w0, #0xff
    bd94:	b.eq	c0b4 <lzma_stream_buffer_decode@@XZ_5.0+0x6dc>  // b.none
    bd98:	ldrb	w8, [x21, #370]
    bd9c:	cbnz	w8, c0ac <lzma_stream_buffer_decode@@XZ_5.0+0x6d4>
    bda0:	ldr	x8, [x22]
    bda4:	cmp	x8, x24
    bda8:	b.cs	c040 <lzma_stream_buffer_decode@@XZ_5.0+0x668>  // b.hs, b.nlast
    bdac:	ldr	x9, [x27]
    bdb0:	cbz	x9, bec0 <lzma_stream_buffer_decode@@XZ_5.0+0x4e8>
    bdb4:	ldr	w8, [x21, #84]
    bdb8:	b	bed4 <lzma_stream_buffer_decode@@XZ_5.0+0x4fc>
    bdbc:	ldr	x8, [x22]
    bdc0:	cmp	x8, x24
    bdc4:	b.cs	c040 <lzma_stream_buffer_decode@@XZ_5.0+0x668>  // b.hs, b.nlast
    bdc8:	ldr	x0, [x21, #344]
    bdcc:	mov	x1, x25
    bdd0:	mov	x2, x22
    bdd4:	mov	x3, x24
    bdd8:	bl	30d0 <lzma_index_hash_decode@plt>
    bddc:	cmp	w0, #0x1
    bde0:	b.ne	c048 <lzma_stream_buffer_decode@@XZ_5.0+0x670>  // b.any
    bde4:	mov	w8, #0x4                   	// #4
    bde8:	str	w8, [x21]
    bdec:	mov	w5, #0xc                   	// #12
    bdf0:	mov	x0, x25
    bdf4:	mov	x1, x22
    bdf8:	mov	x2, x24
    bdfc:	mov	x3, x28
    be00:	mov	x4, x27
    be04:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
    be08:	ldr	x8, [x27]
    be0c:	cmp	x8, #0xc
    be10:	b.cc	c040 <lzma_stream_buffer_decode@@XZ_5.0+0x668>  // b.lo, b.ul, b.last
    be14:	add	x0, sp, #0x30
    be18:	mov	x1, x28
    be1c:	str	xzr, [x27]
    be20:	bl	33b0 <lzma_stream_footer_decode@plt>
    be24:	cbnz	w0, c058 <lzma_stream_buffer_decode@@XZ_5.0+0x680>
    be28:	ldr	x0, [x21, #344]
    be2c:	bl	3450 <lzma_index_hash_size@plt>
    be30:	ldr	x8, [sp, #56]
    be34:	cmp	x0, x8
    be38:	b.ne	c09c <lzma_stream_buffer_decode@@XZ_5.0+0x6c4>  // b.any
    be3c:	ldr	x0, [sp, #32]
    be40:	add	x1, sp, #0x30
    be44:	bl	30b0 <lzma_stream_flags_compare@plt>
    be48:	cbnz	w0, c048 <lzma_stream_buffer_decode@@XZ_5.0+0x670>
    be4c:	ldrb	w8, [x21, #372]
    be50:	cbz	w8, c068 <lzma_stream_buffer_decode@@XZ_5.0+0x690>
    be54:	mov	w8, #0x5                   	// #5
    be58:	str	w8, [x21]
    be5c:	ldr	x8, [x22]
    be60:	cmp	x8, x24
    be64:	b.cs	c020 <lzma_stream_buffer_decode@@XZ_5.0+0x648>  // b.hs, b.nlast
    be68:	ldrb	w9, [x25, x8]
    be6c:	cbnz	w9, be94 <lzma_stream_buffer_decode@@XZ_5.0+0x4bc>
    be70:	add	x8, x8, #0x1
    be74:	str	x8, [x22]
    be78:	ldr	w9, [x27]
    be7c:	cmp	x24, x8
    be80:	add	w9, w9, #0x1
    be84:	and	x9, x9, #0x3
    be88:	str	x9, [x27]
    be8c:	b.ne	be68 <lzma_stream_buffer_decode@@XZ_5.0+0x490>  // b.any
    be90:	b	c020 <lzma_stream_buffer_decode@@XZ_5.0+0x648>
    be94:	ldr	x9, [x27]
    be98:	cbnz	x9, c070 <lzma_stream_buffer_decode@@XZ_5.0+0x698>
    be9c:	ldr	x0, [x21, #344]
    bea0:	mov	x1, x26
    bea4:	bl	3220 <lzma_index_hash_init@plt>
    bea8:	str	x0, [x21, #344]
    beac:	cbz	x0, c080 <lzma_stream_buffer_decode@@XZ_5.0+0x6a8>
    beb0:	mov	w8, wzr
    beb4:	str	wzr, [x21]
    beb8:	str	xzr, [x21, #376]
    bebc:	b	bd04 <lzma_stream_buffer_decode@@XZ_5.0+0x32c>
    bec0:	ldrb	w8, [x25, x8]
    bec4:	cbz	w8, c014 <lzma_stream_buffer_decode@@XZ_5.0+0x63c>
    bec8:	lsl	w8, w8, #2
    becc:	add	w8, w8, #0x4
    bed0:	str	w8, [x21, #84]
    bed4:	mov	w5, w8
    bed8:	mov	x0, x25
    bedc:	mov	x1, x22
    bee0:	mov	x2, x24
    bee4:	mov	x3, x28
    bee8:	mov	x4, x27
    beec:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
    bef0:	ldr	x8, [x21, #376]
    bef4:	ldr	w9, [x21, #84]
    bef8:	cmp	x8, x9
    befc:	b.cc	c040 <lzma_stream_buffer_decode@@XZ_5.0+0x668>  // b.lo, b.ul, b.last
    bf00:	mov	w8, #0x1                   	// #1
    bf04:	str	w8, [x21, #80]
    bf08:	add	x8, sp, #0x30
    bf0c:	mov	x0, x20
    bf10:	mov	x1, x26
    bf14:	mov	x2, x28
    bf18:	str	xzr, [x21, #376]
    bf1c:	str	x8, [x21, #112]
    bf20:	bl	32d0 <lzma_block_header_decode@plt>
    bf24:	cbnz	w0, c048 <lzma_stream_buffer_decode@@XZ_5.0+0x670>
    bf28:	ldrb	w8, [x21, #371]
    bf2c:	add	x0, sp, #0x30
    bf30:	strb	w8, [x21, #280]
    bf34:	bl	3280 <lzma_raw_decoder_memusage@plt>
    bf38:	cmn	x0, #0x1
    bf3c:	b.eq	bf58 <lzma_stream_buffer_decode@@XZ_5.0+0x580>  // b.none
    bf40:	ldr	x8, [x21, #352]
    bf44:	str	x0, [x21, #360]
    bf48:	cmp	x0, x8
    bf4c:	b.ls	bf60 <lzma_stream_buffer_decode@@XZ_5.0+0x588>  // b.plast
    bf50:	mov	w19, #0x6                   	// #6
    bf54:	b	bf74 <lzma_stream_buffer_decode@@XZ_5.0+0x59c>
    bf58:	mov	w19, #0x8                   	// #8
    bf5c:	b	bf74 <lzma_stream_buffer_decode@@XZ_5.0+0x59c>
    bf60:	mov	x0, x23
    bf64:	mov	x1, x26
    bf68:	mov	x2, x20
    bf6c:	bl	a27c <lzma_block_buffer_decode@@XZ_5.0+0x148>
    bf70:	mov	w19, w0
    bf74:	ldr	x0, [sp, #56]
    bf78:	mov	x1, x26
    bf7c:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    bf80:	ldr	x0, [sp, #72]
    bf84:	mov	x1, x26
    bf88:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    bf8c:	ldr	x0, [sp, #88]
    bf90:	mov	x1, x26
    bf94:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    bf98:	ldr	x0, [sp, #104]
    bf9c:	mov	x1, x26
    bfa0:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    bfa4:	str	xzr, [x21, #112]
    bfa8:	cbnz	w19, c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    bfac:	mov	w8, #0x2                   	// #2
    bfb0:	str	w8, [x21]
    bfb4:	ldr	x8, [x21, #32]
    bfb8:	ldr	x0, [x21, #8]
    bfbc:	ldr	w9, [sp, #44]
    bfc0:	ldp	x5, x6, [sp, #8]
    bfc4:	ldr	x7, [sp, #24]
    bfc8:	mov	x1, x26
    bfcc:	mov	x2, x25
    bfd0:	mov	x3, x22
    bfd4:	mov	x4, x24
    bfd8:	str	w9, [sp]
    bfdc:	blr	x8
    bfe0:	cmp	w0, #0x1
    bfe4:	b.ne	c048 <lzma_stream_buffer_decode@@XZ_5.0+0x670>  // b.any
    bfe8:	ldr	x19, [x21, #344]
    bfec:	mov	x0, x20
    bff0:	bl	3130 <lzma_block_unpadded_size@plt>
    bff4:	ldr	x2, [x21, #104]
    bff8:	mov	x1, x0
    bffc:	mov	x0, x19
    c000:	bl	3150 <lzma_index_hash_append@plt>
    c004:	cbnz	w0, c048 <lzma_stream_buffer_decode@@XZ_5.0+0x670>
    c008:	mov	w8, #0x1                   	// #1
    c00c:	str	w8, [x21]
    c010:	b	bd04 <lzma_stream_buffer_decode@@XZ_5.0+0x32c>
    c014:	mov	w8, #0x3                   	// #3
    c018:	str	w8, [x21]
    c01c:	b	bd04 <lzma_stream_buffer_decode@@XZ_5.0+0x32c>
    c020:	ldr	w8, [sp, #44]
    c024:	cmp	w8, #0x3
    c028:	b.ne	c040 <lzma_stream_buffer_decode@@XZ_5.0+0x668>  // b.any
    c02c:	ldr	x8, [x27]
    c030:	cmp	x8, #0x0
    c034:	mov	w8, #0x9                   	// #9
    c038:	csinc	w19, w8, wzr, ne  // ne = any
    c03c:	b	c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    c040:	mov	w19, wzr
    c044:	b	c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    c048:	mov	w19, w0
    c04c:	b	c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    c050:	mov	w19, #0xb                   	// #11
    c054:	b	c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    c058:	cmp	w0, #0x7
    c05c:	mov	w8, #0x9                   	// #9
    c060:	csel	w19, w8, w0, eq  // eq = none
    c064:	b	c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    c068:	mov	w19, #0x1                   	// #1
    c06c:	b	c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    c070:	add	x8, x8, #0x1
    c074:	str	x8, [x22]
    c078:	mov	w19, #0x9                   	// #9
    c07c:	b	c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    c080:	mov	w19, #0x5                   	// #5
    c084:	b	c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    c088:	mov	w19, w0
    c08c:	cmp	w0, #0x7
    c090:	b.ne	c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>  // b.any
    c094:	ldrb	w8, [x21, #373]
    c098:	cbnz	w8, c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    c09c:	mov	w19, #0x9                   	// #9
    c0a0:	b	c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    c0a4:	mov	w19, #0x2                   	// #2
    c0a8:	b	c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    c0ac:	mov	w19, #0x4                   	// #4
    c0b0:	b	c0b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e0>
    c0b4:	mov	w19, #0x3                   	// #3
    c0b8:	mov	w0, w19
    c0bc:	ldp	x20, x19, [sp, #208]
    c0c0:	ldp	x22, x21, [sp, #192]
    c0c4:	ldp	x24, x23, [sp, #176]
    c0c8:	ldp	x26, x25, [sp, #160]
    c0cc:	ldp	x28, x27, [sp, #144]
    c0d0:	ldp	x29, x30, [sp, #128]
    c0d4:	add	sp, sp, #0xe0
    c0d8:	ret
    c0dc:	stp	x29, x30, [sp, #-32]!
    c0e0:	stp	x20, x19, [sp, #16]
    c0e4:	mov	x20, x0
    c0e8:	add	x0, x0, #0x8
    c0ec:	mov	x29, sp
    c0f0:	mov	x19, x1
    c0f4:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    c0f8:	ldr	x0, [x20, #344]
    c0fc:	mov	x1, x19
    c100:	bl	32b0 <lzma_index_hash_end@plt>
    c104:	mov	x0, x20
    c108:	mov	x1, x19
    c10c:	ldp	x20, x19, [sp, #16]
    c110:	ldp	x29, x30, [sp], #32
    c114:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
    c118:	ldr	w0, [x0, #304]
    c11c:	ret
    c120:	ldr	x9, [x0, #360]
    c124:	str	x9, [x1]
    c128:	ldr	x9, [x0, #352]
    c12c:	str	x9, [x2]
    c130:	cbz	x3, c14c <lzma_stream_buffer_decode@@XZ_5.0+0x774>
    c134:	ldr	x9, [x0, #360]
    c138:	mov	x8, x0
    c13c:	cmp	x9, x3
    c140:	b.ls	c154 <lzma_stream_buffer_decode@@XZ_5.0+0x77c>  // b.plast
    c144:	mov	w0, #0x6                   	// #6
    c148:	ret
    c14c:	mov	w0, wzr
    c150:	ret
    c154:	mov	w0, wzr
    c158:	str	x3, [x8, #352]
    c15c:	ret

000000000000c160 <lzma_stream_decoder@@XZ_5.0>:
    c160:	stp	x29, x30, [sp, #-48]!
    c164:	stp	x22, x21, [sp, #16]
    c168:	stp	x20, x19, [sp, #32]
    c16c:	mov	x29, sp
    c170:	mov	w21, w2
    c174:	mov	x22, x1
    c178:	mov	x19, x0
    c17c:	bl	3914 <lzma_version_string@@XZ_5.0+0x2b8>
    c180:	mov	w20, w0
    c184:	cbnz	w0, c1bc <lzma_stream_decoder@@XZ_5.0+0x5c>
    c188:	ldp	x1, x0, [x19, #48]
    c18c:	mov	x2, x22
    c190:	mov	w3, w21
    c194:	bl	bb64 <lzma_stream_buffer_decode@@XZ_5.0+0x18c>
    c198:	mov	w20, w0
    c19c:	cbz	w0, c1ac <lzma_stream_decoder@@XZ_5.0+0x4c>
    c1a0:	mov	x0, x19
    c1a4:	bl	32c0 <lzma_end@plt>
    c1a8:	b	c1bc <lzma_stream_decoder@@XZ_5.0+0x5c>
    c1ac:	ldr	x8, [x19, #56]
    c1b0:	mov	w9, #0x1                   	// #1
    c1b4:	strb	w9, [x8, #88]
    c1b8:	strb	w9, [x8, #91]
    c1bc:	mov	w0, w20
    c1c0:	ldp	x20, x19, [sp, #32]
    c1c4:	ldp	x22, x21, [sp, #16]
    c1c8:	ldp	x29, x30, [sp], #48
    c1cc:	ret

000000000000c1d0 <lzma_stream_header_decode@@XZ_5.0>:
    c1d0:	stp	x29, x30, [sp, #-48]!
    c1d4:	str	x21, [sp, #16]
    c1d8:	stp	x20, x19, [sp, #32]
    c1dc:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    c1e0:	ldr	w8, [x1]
    c1e4:	ldr	x9, [x9, #3936]
    c1e8:	ldrh	w10, [x1, #4]
    c1ec:	mov	x29, sp
    c1f0:	ldr	w11, [x9]
    c1f4:	ldrh	w9, [x9, #4]
    c1f8:	eor	w8, w8, w11
    c1fc:	eor	w9, w10, w9
    c200:	orr	w8, w8, w9
    c204:	cbz	w8, c21c <lzma_stream_header_decode@@XZ_5.0+0x4c>
    c208:	mov	w0, #0x7                   	// #7
    c20c:	ldp	x20, x19, [sp, #32]
    c210:	ldr	x21, [sp, #16]
    c214:	ldp	x29, x30, [sp], #48
    c218:	ret
    c21c:	add	x21, x1, #0x6
    c220:	mov	x19, x1
    c224:	mov	x20, x0
    c228:	mov	w1, #0x2                   	// #2
    c22c:	mov	x0, x21
    c230:	mov	w2, wzr
    c234:	bl	3160 <lzma_crc32@plt>
    c238:	ldr	w8, [x19, #8]
    c23c:	cmp	w0, w8
    c240:	b.ne	c26c <lzma_stream_header_decode@@XZ_5.0+0x9c>  // b.any
    c244:	ldrb	w8, [x21]
    c248:	cbnz	w8, c258 <lzma_stream_header_decode@@XZ_5.0+0x88>
    c24c:	ldrb	w8, [x19, #7]
    c250:	cmp	w8, #0xf
    c254:	b.ls	c280 <lzma_stream_header_decode@@XZ_5.0+0xb0>  // b.plast
    c258:	mov	w0, #0x8                   	// #8
    c25c:	ldp	x20, x19, [sp, #32]
    c260:	ldr	x21, [sp, #16]
    c264:	ldp	x29, x30, [sp], #48
    c268:	ret
    c26c:	mov	w0, #0x9                   	// #9
    c270:	ldp	x20, x19, [sp, #32]
    c274:	ldr	x21, [sp, #16]
    c278:	ldp	x29, x30, [sp], #48
    c27c:	ret
    c280:	str	wzr, [x20]
    c284:	ldrb	w8, [x19, #7]
    c288:	mov	w0, wzr
    c28c:	mov	x9, #0xffffffffffffffff    	// #-1
    c290:	str	x9, [x20, #8]
    c294:	and	w8, w8, #0xf
    c298:	str	w8, [x20, #16]
    c29c:	ldp	x20, x19, [sp, #32]
    c2a0:	ldr	x21, [sp, #16]
    c2a4:	ldp	x29, x30, [sp], #48
    c2a8:	ret

000000000000c2ac <lzma_stream_footer_decode@@XZ_5.0>:
    c2ac:	stp	x29, x30, [sp, #-32]!
    c2b0:	stp	x20, x19, [sp, #16]
    c2b4:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    c2b8:	ldrh	w8, [x1, #10]
    c2bc:	ldr	x9, [x9, #3976]
    c2c0:	mov	x29, sp
    c2c4:	ldrh	w9, [x9]
    c2c8:	cmp	w8, w9
    c2cc:	b.eq	c2e0 <lzma_stream_footer_decode@@XZ_5.0+0x34>  // b.none
    c2d0:	mov	w0, #0x7                   	// #7
    c2d4:	ldp	x20, x19, [sp, #16]
    c2d8:	ldp	x29, x30, [sp], #32
    c2dc:	ret
    c2e0:	mov	x20, x1
    c2e4:	mov	x19, x0
    c2e8:	add	x0, x1, #0x4
    c2ec:	mov	w1, #0x6                   	// #6
    c2f0:	mov	w2, wzr
    c2f4:	bl	3160 <lzma_crc32@plt>
    c2f8:	ldr	w8, [x20]
    c2fc:	cmp	w0, w8
    c300:	b.ne	c31c <lzma_stream_footer_decode@@XZ_5.0+0x70>  // b.any
    c304:	ldrb	w8, [x20, #8]
    c308:	cbz	w8, c32c <lzma_stream_footer_decode@@XZ_5.0+0x80>
    c30c:	mov	w0, #0x8                   	// #8
    c310:	ldp	x20, x19, [sp, #16]
    c314:	ldp	x29, x30, [sp], #32
    c318:	ret
    c31c:	mov	w0, #0x9                   	// #9
    c320:	ldp	x20, x19, [sp, #16]
    c324:	ldp	x29, x30, [sp], #32
    c328:	ret
    c32c:	ldrb	w8, [x20, #9]
    c330:	cmp	w8, #0xf
    c334:	b.ls	c348 <lzma_stream_footer_decode@@XZ_5.0+0x9c>  // b.plast
    c338:	mov	w0, #0x8                   	// #8
    c33c:	ldp	x20, x19, [sp, #16]
    c340:	ldp	x29, x30, [sp], #32
    c344:	ret
    c348:	str	wzr, [x19]
    c34c:	ldrb	w8, [x20, #9]
    c350:	mov	w0, wzr
    c354:	and	w8, w8, #0xf
    c358:	str	w8, [x19, #16]
    c35c:	ldrb	w8, [x20, #4]
    c360:	ldrb	w9, [x20, #5]
    c364:	ldrb	w10, [x20, #6]
    c368:	ldrb	w11, [x20, #7]
    c36c:	lsl	x8, x8, #2
    c370:	bfi	x8, x9, #10, #8
    c374:	bfi	x8, x10, #18, #8
    c378:	bfi	x8, x11, #26, #8
    c37c:	add	x8, x8, #0x4
    c380:	str	x8, [x19, #8]
    c384:	ldp	x20, x19, [sp, #16]
    c388:	ldp	x29, x30, [sp], #32
    c38c:	ret

000000000000c390 <lzma_vli_decode@@XZ_5.0>:
    c390:	sub	sp, sp, #0x10
    c394:	str	xzr, [sp, #8]
    c398:	cbz	x1, c3bc <lzma_vli_decode@@XZ_5.0+0x2c>
    c39c:	ldr	x8, [x1]
    c3a0:	cbz	x8, c3dc <lzma_vli_decode@@XZ_5.0+0x4c>
    c3a4:	cmp	x8, #0x8
    c3a8:	b.ls	c404 <lzma_vli_decode@@XZ_5.0+0x74>  // b.plast
    c3ac:	mov	w8, #0xb                   	// #11
    c3b0:	mov	w0, w8
    c3b4:	add	sp, sp, #0x10
    c3b8:	ret
    c3bc:	ldr	x10, [x3]
    c3c0:	str	xzr, [x0]
    c3c4:	cmp	x10, x4
    c3c8:	b.cs	c4c0 <lzma_vli_decode@@XZ_5.0+0x130>  // b.hs, b.nlast
    c3cc:	mov	x9, xzr
    c3d0:	mov	x8, xzr
    c3d4:	add	x1, sp, #0x8
    c3d8:	b	c424 <lzma_vli_decode@@XZ_5.0+0x94>
    c3dc:	mov	x9, xzr
    c3e0:	str	xzr, [x0]
    c3e4:	lsl	x10, x8, #3
    c3e8:	sub	x10, x10, x8
    c3ec:	lsr	x10, x9, x10
    c3f0:	cbz	x10, c418 <lzma_vli_decode@@XZ_5.0+0x88>
    c3f4:	mov	w8, #0xb                   	// #11
    c3f8:	mov	w0, w8
    c3fc:	add	sp, sp, #0x10
    c400:	ret
    c404:	ldr	x9, [x0]
    c408:	lsl	x10, x8, #3
    c40c:	sub	x10, x10, x8
    c410:	lsr	x10, x9, x10
    c414:	cbnz	x10, c3f4 <lzma_vli_decode@@XZ_5.0+0x64>
    c418:	ldr	x10, [x3]
    c41c:	cmp	x10, x4
    c420:	b.cs	c4ec <lzma_vli_decode@@XZ_5.0+0x15c>  // b.hs, b.nlast
    c424:	sub	x12, x10, x8
    c428:	lsl	x13, x8, #3
    c42c:	mov	x11, xzr
    c430:	add	x12, x12, #0x9
    c434:	sub	x13, x13, x8
    c438:	add	x14, x2, x10
    c43c:	ldrb	w15, [x14, x11]
    c440:	and	x16, x15, #0x7f
    c444:	lsl	x16, x16, x13
    c448:	add	x9, x16, x9
    c44c:	add	x16, x8, x11
    c450:	tbz	w15, #7, c49c <lzma_vli_decode@@XZ_5.0+0x10c>
    c454:	sub	x15, x16, #0x8
    c458:	cbz	x15, c4d0 <lzma_vli_decode@@XZ_5.0+0x140>
    c45c:	add	x11, x11, #0x1
    c460:	add	x15, x10, x11
    c464:	cmp	x15, x4
    c468:	add	x13, x13, #0x7
    c46c:	b.cc	c43c <lzma_vli_decode@@XZ_5.0+0xac>  // b.lo, b.ul, b.last
    c470:	add	x8, x8, x11
    c474:	add	x10, sp, #0x8
    c478:	str	x15, [x3]
    c47c:	str	x8, [x1]
    c480:	cmp	x1, x10
    c484:	mov	w8, #0x9                   	// #9
    c488:	str	x9, [x0]
    c48c:	csel	w8, w8, wzr, eq  // eq = none
    c490:	mov	w0, w8
    c494:	add	sp, sp, #0x10
    c498:	ret
    c49c:	add	x10, x10, x11
    c4a0:	add	x8, x16, #0x1
    c4a4:	add	x10, x10, #0x1
    c4a8:	str	x10, [x3]
    c4ac:	str	x8, [x1]
    c4b0:	str	x9, [x0]
    c4b4:	cbnz	w15, c4fc <lzma_vli_decode@@XZ_5.0+0x16c>
    c4b8:	cmp	x8, #0x1
    c4bc:	b.ls	c4fc <lzma_vli_decode@@XZ_5.0+0x16c>  // b.plast
    c4c0:	mov	w8, #0x9                   	// #9
    c4c4:	mov	w0, w8
    c4c8:	add	sp, sp, #0x10
    c4cc:	ret
    c4d0:	mov	w8, #0x9                   	// #9
    c4d4:	str	x12, [x3]
    c4d8:	str	x8, [x1]
    c4dc:	str	x9, [x0]
    c4e0:	mov	w0, w8
    c4e4:	add	sp, sp, #0x10
    c4e8:	ret
    c4ec:	mov	w8, #0xa                   	// #10
    c4f0:	mov	w0, w8
    c4f4:	add	sp, sp, #0x10
    c4f8:	ret
    c4fc:	add	x8, sp, #0x8
    c500:	cmp	x1, x8
    c504:	cset	w8, ne  // ne = any
    c508:	mov	w0, w8
    c50c:	add	sp, sp, #0x10
    c510:	ret

000000000000c514 <lzma_check_is_supported@@XZ_5.0>:
    c514:	cmp	w0, #0xf
    c518:	b.ls	c524 <lzma_check_is_supported@@XZ_5.0+0x10>  // b.plast
    c51c:	mov	w0, wzr
    c520:	ret
    c524:	adrp	x8, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    c528:	add	x8, x8, #0x4af
    c52c:	ldrb	w0, [x8, w0, uxtw]
    c530:	ret

000000000000c534 <lzma_check_size@@XZ_5.0>:
    c534:	cmp	w0, #0xf
    c538:	b.ls	c544 <lzma_check_size@@XZ_5.0+0x10>  // b.plast
    c53c:	mov	w0, #0xffffffff            	// #-1
    c540:	ret
    c544:	adrp	x8, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
    c548:	add	x8, x8, #0x4bf
    c54c:	ldrb	w0, [x8, w0, uxtw]
    c550:	ret
    c554:	cmp	w1, #0xa
    c558:	b.eq	c574 <lzma_check_size@@XZ_5.0+0x40>  // b.none
    c55c:	cmp	w1, #0x4
    c560:	b.eq	c578 <lzma_check_size@@XZ_5.0+0x44>  // b.none
    c564:	cmp	w1, #0x1
    c568:	b.ne	c57c <lzma_check_size@@XZ_5.0+0x48>  // b.any
    c56c:	str	wzr, [x0, #64]
    c570:	ret
    c574:	b	c820 <lzma_crc64@@XZ_5.0+0xd4>
    c578:	str	xzr, [x0, #64]
    c57c:	ret
    c580:	stp	x29, x30, [sp, #-32]!
    c584:	str	x19, [sp, #16]
    c588:	cmp	w1, #0xa
    c58c:	mov	x19, x0
    c590:	mov	x29, sp
    c594:	b.eq	c5cc <lzma_check_size@@XZ_5.0+0x98>  // b.none
    c598:	cmp	w1, #0x4
    c59c:	b.eq	c5e4 <lzma_check_size@@XZ_5.0+0xb0>  // b.none
    c5a0:	cmp	w1, #0x1
    c5a4:	b.ne	c5c0 <lzma_check_size@@XZ_5.0+0x8c>  // b.any
    c5a8:	ldr	w8, [x19, #64]
    c5ac:	mov	x0, x2
    c5b0:	mov	x1, x3
    c5b4:	mov	w2, w8
    c5b8:	bl	3160 <lzma_crc32@plt>
    c5bc:	str	w0, [x19, #64]
    c5c0:	ldr	x19, [sp, #16]
    c5c4:	ldp	x29, x30, [sp], #32
    c5c8:	ret
    c5cc:	mov	x0, x2
    c5d0:	mov	x2, x19
    c5d4:	ldr	x19, [sp, #16]
    c5d8:	mov	x1, x3
    c5dc:	ldp	x29, x30, [sp], #32
    c5e0:	b	c838 <lzma_crc64@@XZ_5.0+0xec>
    c5e4:	ldr	x8, [x19, #64]
    c5e8:	mov	x0, x2
    c5ec:	mov	x1, x3
    c5f0:	mov	x2, x8
    c5f4:	bl	3230 <lzma_crc64@plt>
    c5f8:	str	x0, [x19, #64]
    c5fc:	ldr	x19, [sp, #16]
    c600:	ldp	x29, x30, [sp], #32
    c604:	ret
    c608:	cmp	w1, #0xa
    c60c:	b.eq	c62c <lzma_check_size@@XZ_5.0+0xf8>  // b.none
    c610:	cmp	w1, #0x4
    c614:	b.eq	c630 <lzma_check_size@@XZ_5.0+0xfc>  // b.none
    c618:	cmp	w1, #0x1
    c61c:	b.ne	c638 <lzma_check_size@@XZ_5.0+0x104>  // b.any
    c620:	ldr	w8, [x0, #64]
    c624:	str	w8, [x0]
    c628:	ret
    c62c:	b	d718 <lzma_crc64@@XZ_5.0+0xfcc>
    c630:	ldr	x8, [x0, #64]
    c634:	str	x8, [x0]
    c638:	ret

000000000000c63c <lzma_crc32@@XZ_5.0>:
    c63c:	cmp	x1, #0x9
    c640:	mvn	w8, w2
    c644:	b.cc	c71c <lzma_crc32@@XZ_5.0+0xe0>  // b.lo, b.ul, b.last
    c648:	tst	x0, #0x7
    c64c:	b.eq	c678 <lzma_crc32@@XZ_5.0+0x3c>  // b.none
    c650:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    c654:	ldr	x9, [x9, #3952]
    c658:	ldrb	w10, [x0], #1
    c65c:	and	w11, w8, #0xff
    c660:	sub	x1, x1, #0x1
    c664:	eor	w10, w11, w10
    c668:	ldr	w10, [x9, w10, uxtw #2]
    c66c:	tst	x0, #0x7
    c670:	eor	w8, w10, w8, lsr #8
    c674:	b.ne	c658 <lzma_crc32@@XZ_5.0+0x1c>  // b.any
    c678:	and	x9, x1, #0xfffffffffffffff8
    c67c:	cmp	x9, #0x1
    c680:	and	x1, x1, #0x7
    c684:	b.lt	c71c <lzma_crc32@@XZ_5.0+0xe0>  // b.tstop
    c688:	adrp	x10, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    c68c:	ldr	x10, [x10, #3952]
    c690:	add	x9, x0, x9
    c694:	ldp	w11, w12, [x0], #8
    c698:	eor	w8, w11, w8
    c69c:	and	w15, w8, #0xff
    c6a0:	ubfx	w16, w8, #8, #8
    c6a4:	ubfx	w17, w8, #16, #8
    c6a8:	add	x15, x10, w15, uxtw #2
    c6ac:	add	x16, x10, w16, uxtw #2
    c6b0:	lsr	w8, w8, #24
    c6b4:	add	x17, x10, w17, uxtw #2
    c6b8:	ldr	w15, [x15, #7168]
    c6bc:	ldr	w16, [x16, #6144]
    c6c0:	add	x8, x10, w8, uxtw #2
    c6c4:	ldr	w17, [x17, #5120]
    c6c8:	add	x11, x10, w12, uxtb #2
    c6cc:	lsr	x13, x12, #8
    c6d0:	ldr	w8, [x8, #4096]
    c6d4:	lsr	x14, x12, #16
    c6d8:	ldr	w11, [x11, #3072]
    c6dc:	add	x13, x10, w13, uxtb #2
    c6e0:	lsr	x12, x12, #22
    c6e4:	add	x14, x10, w14, uxtb #2
    c6e8:	ldr	w13, [x13, #2048]
    c6ec:	eor	w15, w16, w15
    c6f0:	and	x12, x12, #0x3fc
    c6f4:	ldr	w14, [x14, #1024]
    c6f8:	eor	w15, w15, w17
    c6fc:	ldr	w12, [x10, x12]
    c700:	eor	w8, w15, w8
    c704:	eor	w8, w8, w11
    c708:	eor	w8, w8, w13
    c70c:	eor	w8, w8, w14
    c710:	cmp	x0, x9
    c714:	eor	w8, w8, w12
    c718:	b.cc	c694 <lzma_crc32@@XZ_5.0+0x58>  // b.lo, b.ul, b.last
    c71c:	cbz	x1, c744 <lzma_crc32@@XZ_5.0+0x108>
    c720:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    c724:	ldr	x9, [x9, #3952]
    c728:	ldrb	w10, [x0], #1
    c72c:	and	w11, w8, #0xff
    c730:	subs	x1, x1, #0x1
    c734:	eor	w10, w11, w10
    c738:	ldr	w10, [x9, w10, uxtw #2]
    c73c:	eor	w8, w10, w8, lsr #8
    c740:	b.ne	c728 <lzma_crc32@@XZ_5.0+0xec>  // b.any
    c744:	mvn	w0, w8
    c748:	ret

000000000000c74c <lzma_crc64@@XZ_5.0>:
    c74c:	cmp	x1, #0x5
    c750:	mvn	x8, x2
    c754:	b.cc	c7f0 <lzma_crc64@@XZ_5.0+0xa4>  // b.lo, b.ul, b.last
    c758:	tst	x0, #0x3
    c75c:	b.eq	c788 <lzma_crc64@@XZ_5.0+0x3c>  // b.none
    c760:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    c764:	ldr	x9, [x9, #3984]
    c768:	ldrb	w10, [x0], #1
    c76c:	and	x11, x8, #0xff
    c770:	sub	x1, x1, #0x1
    c774:	eor	x10, x11, x10
    c778:	ldr	x10, [x9, x10, lsl #3]
    c77c:	tst	x0, #0x3
    c780:	eor	x8, x10, x8, lsr #8
    c784:	b.ne	c768 <lzma_crc64@@XZ_5.0+0x1c>  // b.any
    c788:	and	x9, x1, #0xfffffffffffffffc
    c78c:	cmp	x9, #0x1
    c790:	and	x1, x1, #0x3
    c794:	b.lt	c7f0 <lzma_crc64@@XZ_5.0+0xa4>  // b.tstop
    c798:	adrp	x10, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    c79c:	ldr	x10, [x10, #3984]
    c7a0:	add	x9, x0, x9
    c7a4:	ldr	w11, [x0], #4
    c7a8:	eor	w11, w11, w8
    c7ac:	and	w12, w11, #0xff
    c7b0:	ubfx	w13, w11, #8, #8
    c7b4:	add	x12, x10, w12, uxtw #3
    c7b8:	ubfx	w14, w11, #16, #8
    c7bc:	add	x13, x10, w13, uxtw #3
    c7c0:	ldr	x12, [x12, #6144]
    c7c4:	add	x14, x10, w14, uxtw #3
    c7c8:	ldr	x13, [x13, #4096]
    c7cc:	lsr	w11, w11, #24
    c7d0:	ldr	x14, [x14, #2048]
    c7d4:	ldr	x11, [x10, w11, uxtw #3]
    c7d8:	eor	x8, x12, x8, lsr #32
    c7dc:	eor	x8, x8, x13
    c7e0:	eor	x8, x8, x14
    c7e4:	cmp	x0, x9
    c7e8:	eor	x8, x8, x11
    c7ec:	b.cc	c7a4 <lzma_crc64@@XZ_5.0+0x58>  // b.lo, b.ul, b.last
    c7f0:	cbz	x1, c818 <lzma_crc64@@XZ_5.0+0xcc>
    c7f4:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    c7f8:	ldr	x9, [x9, #3984]
    c7fc:	ldrb	w10, [x0], #1
    c800:	and	x11, x8, #0xff
    c804:	subs	x1, x1, #0x1
    c808:	eor	x10, x11, x10
    c80c:	ldr	x10, [x9, x10, lsl #3]
    c810:	eor	x8, x10, x8, lsr #8
    c814:	b.ne	c7fc <lzma_crc64@@XZ_5.0+0xb0>  // b.any
    c818:	mvn	x0, x8
    c81c:	ret
    c820:	adrp	x8, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
    c824:	add	x8, x8, #0x4d0
    c828:	ldp	q1, q0, [x8]
    c82c:	str	xzr, [x0, #96]
    c830:	stp	q1, q0, [x0, #64]
    c834:	ret
    c838:	stp	x29, x30, [sp, #-64]!
    c83c:	str	x23, [sp, #16]
    c840:	stp	x22, x21, [sp, #32]
    c844:	stp	x20, x19, [sp, #48]
    c848:	mov	x29, sp
    c84c:	cbz	x1, c8b4 <lzma_crc64@@XZ_5.0+0x168>
    c850:	mov	x19, x2
    c854:	mov	x20, x1
    c858:	mov	x21, x0
    c85c:	mov	w23, #0x40                  	// #64
    c860:	b	c868 <lzma_crc64@@XZ_5.0+0x11c>
    c864:	cbz	x20, c8b4 <lzma_crc64@@XZ_5.0+0x168>
    c868:	ldr	x8, [x19, #96]
    c86c:	mov	x1, x21
    c870:	and	x8, x8, #0x3f
    c874:	sub	x9, x23, x8
    c878:	cmp	x9, x20
    c87c:	csel	x22, x20, x9, hi  // hi = pmore
    c880:	add	x0, x19, x8
    c884:	mov	x2, x22
    c888:	bl	3040 <memcpy@plt>
    c88c:	ldr	x8, [x19, #96]
    c890:	add	x21, x21, x22
    c894:	sub	x20, x20, x22
    c898:	add	x8, x22, x8
    c89c:	tst	x8, #0x3f
    c8a0:	str	x8, [x19, #96]
    c8a4:	b.ne	c864 <lzma_crc64@@XZ_5.0+0x118>  // b.any
    c8a8:	mov	x0, x19
    c8ac:	bl	c8c8 <lzma_crc64@@XZ_5.0+0x17c>
    c8b0:	b	c864 <lzma_crc64@@XZ_5.0+0x118>
    c8b4:	ldp	x20, x19, [sp, #48]
    c8b8:	ldp	x22, x21, [sp, #32]
    c8bc:	ldr	x23, [sp, #16]
    c8c0:	ldp	x29, x30, [sp], #64
    c8c4:	ret
    c8c8:	sub	sp, sp, #0xb0
    c8cc:	stp	x29, x30, [sp, #80]
    c8d0:	stp	x28, x27, [sp, #96]
    c8d4:	stp	x26, x25, [sp, #112]
    c8d8:	stp	x24, x23, [sp, #128]
    c8dc:	stp	x22, x21, [sp, #144]
    c8e0:	stp	x20, x19, [sp, #160]
    c8e4:	str	xzr, [sp, #72]
    c8e8:	ldp	w26, w27, [x0, #80]
    c8ec:	ldp	w29, w8, [x0, #88]
    c8f0:	ldp	w13, w1, [x0, #8]
    c8f4:	ldp	w9, w11, [x0]
    c8f8:	ldp	w21, w23, [x0, #64]
    c8fc:	ldp	w24, w25, [x0, #72]
    c900:	bic	w3, w29, w26
    c904:	and	w4, w27, w26
    c908:	eor	w2, w26, w26, ror #14
    c90c:	rev	w19, w1
    c910:	orr	w1, w4, w3
    c914:	rev	w30, w9
    c918:	rev	w22, w13
    c91c:	eor	w13, w26, w2, ror #5
    c920:	add	w1, w8, w1
    c924:	ldp	w16, w17, [x0, #16]
    c928:	eor	w9, w21, w21, ror #9
    c92c:	eor	w5, w24, w23
    c930:	stp	w8, w29, [sp, #8]
    c934:	ror	w13, w13, #6
    c938:	add	w1, w1, w30
    c93c:	mov	w8, #0x2f98                	// #12184
    c940:	and	w6, w24, w23
    c944:	eor	w9, w21, w9, ror #11
    c948:	and	w2, w5, w21
    c94c:	add	w13, w1, w13
    c950:	movk	w8, #0x428a, lsl #16
    c954:	add	w2, w2, w6
    c958:	ror	w9, w9, #2
    c95c:	add	w8, w13, w8
    c960:	add	w9, w2, w9
    c964:	add	w13, w8, w25
    c968:	add	w8, w9, w8
    c96c:	bic	w9, w27, w13
    c970:	and	w1, w26, w13
    c974:	rev	w28, w11
    c978:	orr	w9, w1, w9
    c97c:	eor	w1, w13, w13, ror #14
    c980:	add	w3, w29, w28
    c984:	eor	w1, w13, w1, ror #5
    c988:	mov	w10, #0x4491                	// #17553
    c98c:	eor	w11, w23, w21
    c990:	eor	w5, w8, w8, ror #9
    c994:	add	w9, w3, w9
    c998:	ror	w1, w1, #6
    c99c:	movk	w10, #0x7137, lsl #16
    c9a0:	and	w7, w23, w21
    c9a4:	and	w11, w8, w11
    c9a8:	add	w9, w9, w1
    c9ac:	eor	w5, w8, w5, ror #11
    c9b0:	add	w11, w11, w7
    c9b4:	ror	w5, w5, #2
    c9b8:	add	w9, w9, w10
    c9bc:	add	w11, w11, w5
    c9c0:	add	w5, w9, w24
    c9c4:	add	w6, w11, w9
    c9c8:	bic	w9, w26, w5
    c9cc:	and	w10, w13, w5
    c9d0:	eor	w3, w8, w21
    c9d4:	orr	w9, w10, w9
    c9d8:	eor	w10, w5, w5, ror #14
    c9dc:	add	w4, w27, w22
    c9e0:	and	w1, w8, w21
    c9e4:	and	w11, w6, w3
    c9e8:	eor	w10, w5, w10, ror #5
    c9ec:	mov	w12, #0xfbcf                	// #64463
    c9f0:	add	w11, w11, w1
    c9f4:	eor	w1, w6, w6, ror #9
    c9f8:	add	w9, w4, w9
    c9fc:	ror	w10, w10, #6
    ca00:	movk	w12, #0xb5c0, lsl #16
    ca04:	add	w9, w9, w10
    ca08:	eor	w1, w6, w1, ror #11
    ca0c:	ror	w1, w1, #2
    ca10:	add	w9, w9, w12
    ca14:	add	w11, w11, w1
    ca18:	add	w12, w9, w23
    ca1c:	add	w11, w11, w9
    ca20:	bic	w9, w13, w12
    ca24:	and	w1, w5, w12
    ca28:	eor	w3, w6, w8
    ca2c:	orr	w9, w1, w9
    ca30:	eor	w1, w12, w12, ror #14
    ca34:	add	w2, w26, w19
    ca38:	and	w10, w6, w8
    ca3c:	and	w3, w11, w3
    ca40:	eor	w1, w12, w1, ror #5
    ca44:	mov	w14, #0xdba5                	// #56229
    ca48:	add	w10, w3, w10
    ca4c:	eor	w3, w11, w11, ror #9
    ca50:	add	w9, w2, w9
    ca54:	ror	w1, w1, #6
    ca58:	movk	w14, #0xe9b5, lsl #16
    ca5c:	add	w9, w9, w1
    ca60:	eor	w3, w11, w3, ror #11
    ca64:	ror	w3, w3, #2
    ca68:	add	w9, w9, w14
    ca6c:	add	w10, w10, w3
    ca70:	add	w14, w9, w21
    ca74:	stp	w23, w21, [sp, #32]
    ca78:	add	w9, w10, w9
    ca7c:	bic	w10, w5, w14
    ca80:	and	w3, w12, w14
    ca84:	rev	w23, w16
    ca88:	orr	w10, w3, w10
    ca8c:	add	w13, w23, w13
    ca90:	add	w10, w13, w10
    ca94:	eor	w13, w14, w14, ror #14
    ca98:	eor	w13, w14, w13, ror #5
    ca9c:	ror	w13, w13, #6
    caa0:	mov	w15, #0xc25b                	// #49755
    caa4:	eor	w2, w11, w6
    caa8:	add	w10, w10, w13
    caac:	eor	w13, w9, w9, ror #9
    cab0:	movk	w15, #0x3956, lsl #16
    cab4:	and	w1, w11, w6
    cab8:	and	w2, w9, w2
    cabc:	eor	w13, w9, w13, ror #11
    cac0:	add	w1, w2, w1
    cac4:	ror	w13, w13, #2
    cac8:	add	w10, w10, w15
    cacc:	add	w13, w1, w13
    cad0:	add	w15, w10, w8
    cad4:	stp	w27, w26, [sp, #16]
    cad8:	add	w10, w13, w10
    cadc:	bic	w8, w12, w15
    cae0:	and	w13, w14, w15
    cae4:	rev	w27, w17
    cae8:	orr	w8, w13, w8
    caec:	add	w17, w27, w5
    caf0:	add	w8, w17, w8
    caf4:	eor	w17, w15, w15, ror #14
    caf8:	eor	w17, w15, w17, ror #5
    cafc:	stp	w25, w24, [sp, #24]
    cb00:	ror	w17, w17, #6
    cb04:	mov	w18, #0x11f1                	// #4593
    cb08:	ldp	w2, w3, [x0, #24]
    cb0c:	eor	w16, w9, w11
    cb10:	add	w8, w8, w17
    cb14:	eor	w17, w10, w10, ror #9
    cb18:	movk	w18, #0x59f1, lsl #16
    cb1c:	and	w13, w9, w11
    cb20:	and	w16, w10, w16
    cb24:	eor	w17, w10, w17, ror #11
    cb28:	add	w13, w16, w13
    cb2c:	ror	w17, w17, #2
    cb30:	add	w8, w8, w18
    cb34:	add	w13, w13, w17
    cb38:	add	w18, w8, w6
    cb3c:	add	w8, w13, w8
    cb40:	bic	w13, w14, w18
    cb44:	and	w1, w15, w18
    cb48:	rev	w25, w2
    cb4c:	orr	w13, w1, w13
    cb50:	add	w12, w25, w12
    cb54:	add	w12, w12, w13
    cb58:	eor	w13, w18, w18, ror #14
    cb5c:	eor	w13, w18, w13, ror #5
    cb60:	ror	w13, w13, #6
    cb64:	mov	w20, #0x82a4                	// #33444
    cb68:	eor	w17, w10, w9
    cb6c:	add	w12, w12, w13
    cb70:	eor	w13, w8, w8, ror #9
    cb74:	movk	w20, #0x923f, lsl #16
    cb78:	and	w1, w10, w9
    cb7c:	and	w17, w8, w17
    cb80:	eor	w13, w8, w13, ror #11
    cb84:	add	w17, w17, w1
    cb88:	ror	w13, w13, #2
    cb8c:	add	w12, w12, w20
    cb90:	add	w13, w17, w13
    cb94:	add	w2, w12, w11
    cb98:	eor	w17, w8, w10
    cb9c:	add	w11, w13, w12
    cba0:	bic	w12, w15, w2
    cba4:	and	w13, w18, w2
    cba8:	rev	w5, w3
    cbac:	orr	w12, w13, w12
    cbb0:	and	w13, w8, w10
    cbb4:	and	w17, w11, w17
    cbb8:	add	w14, w5, w14
    cbbc:	add	w13, w17, w13
    cbc0:	eor	w17, w2, w2, ror #14
    cbc4:	add	w12, w14, w12
    cbc8:	eor	w14, w11, w11, ror #9
    cbcc:	eor	w17, w2, w17, ror #5
    cbd0:	mov	w16, #0x5ed5                	// #24277
    cbd4:	ror	w17, w17, #6
    cbd8:	eor	w14, w11, w14, ror #11
    cbdc:	movk	w16, #0xab1c, lsl #16
    cbe0:	add	w12, w12, w17
    cbe4:	ror	w14, w14, #2
    cbe8:	add	w13, w13, w14
    cbec:	add	w16, w12, w16
    cbf0:	eor	w17, w11, w8
    cbf4:	add	w12, w16, w9
    cbf8:	add	w9, w13, w16
    cbfc:	and	w14, w11, w8
    cc00:	bic	w13, w18, w12
    cc04:	and	w16, w2, w12
    cc08:	and	w17, w9, w17
    cc0c:	orr	w13, w16, w13
    cc10:	add	w14, w17, w14
    cc14:	ldp	w16, w17, [x0, #32]
    cc18:	mov	w1, #0xaa98                	// #43672
    cc1c:	movk	w1, #0xd807, lsl #16
    cc20:	rev	w20, w16
    cc24:	add	w15, w20, w15
    cc28:	add	w13, w15, w13
    cc2c:	eor	w15, w12, w12, ror #14
    cc30:	eor	w15, w12, w15, ror #5
    cc34:	ror	w15, w15, #6
    cc38:	add	w13, w13, w15
    cc3c:	eor	w15, w9, w9, ror #9
    cc40:	eor	w15, w9, w15, ror #11
    cc44:	ror	w15, w15, #2
    cc48:	add	w13, w13, w1
    cc4c:	add	w14, w14, w15
    cc50:	add	w15, w13, w10
    cc54:	add	w10, w14, w13
    cc58:	bic	w13, w2, w15
    cc5c:	and	w14, w12, w15
    cc60:	rev	w3, w17
    cc64:	orr	w13, w14, w13
    cc68:	add	w17, w3, w18
    cc6c:	add	w13, w17, w13
    cc70:	eor	w17, w15, w15, ror #14
    cc74:	eor	w17, w15, w17, ror #5
    cc78:	eor	w16, w9, w11
    cc7c:	ror	w17, w17, #6
    cc80:	and	w14, w9, w11
    cc84:	and	w16, w10, w16
    cc88:	add	w13, w13, w17
    cc8c:	eor	w17, w10, w10, ror #9
    cc90:	add	w14, w16, w14
    cc94:	mov	w16, #0x5b01                	// #23297
    cc98:	eor	w17, w10, w17, ror #11
    cc9c:	movk	w16, #0x1283, lsl #16
    cca0:	ror	w17, w17, #2
    cca4:	add	w14, w14, w17
    cca8:	add	w13, w13, w16
    ccac:	eor	w17, w10, w9
    ccb0:	add	w16, w13, w8
    ccb4:	add	w14, w14, w13
    ccb8:	bic	w8, w12, w16
    ccbc:	and	w13, w15, w16
    ccc0:	and	w17, w14, w17
    ccc4:	and	w18, w10, w9
    ccc8:	orr	w8, w13, w8
    cccc:	add	w17, w17, w18
    ccd0:	ldp	w13, w18, [x0, #40]
    ccd4:	and	w1, w14, w10
    ccd8:	rev	w7, w13
    ccdc:	add	w13, w7, w2
    cce0:	add	w8, w13, w8
    cce4:	eor	w13, w16, w16, ror #14
    cce8:	eor	w13, w16, w13, ror #5
    ccec:	ror	w13, w13, #6
    ccf0:	add	w8, w8, w13
    ccf4:	eor	w13, w14, w14, ror #9
    ccf8:	eor	w13, w14, w13, ror #11
    ccfc:	ror	w13, w13, #2
    cd00:	add	w17, w17, w13
    cd04:	mov	w13, #0x85be                	// #34238
    cd08:	movk	w13, #0x2431, lsl #16
    cd0c:	add	w8, w8, w13
    cd10:	add	w13, w8, w11
    cd14:	add	w11, w17, w8
    cd18:	bic	w8, w15, w13
    cd1c:	and	w17, w16, w13
    cd20:	rev	w2, w18
    cd24:	orr	w8, w17, w8
    cd28:	add	w12, w2, w12
    cd2c:	add	w8, w12, w8
    cd30:	eor	w12, w13, w13, ror #14
    cd34:	eor	w12, w13, w12, ror #5
    cd38:	ror	w12, w12, #6
    cd3c:	eor	w17, w14, w10
    cd40:	add	w8, w8, w12
    cd44:	eor	w12, w11, w11, ror #9
    cd48:	and	w17, w11, w17
    cd4c:	eor	w12, w11, w12, ror #11
    cd50:	add	w17, w17, w1
    cd54:	ror	w12, w12, #2
    cd58:	add	w17, w17, w12
    cd5c:	mov	w12, #0x7dc3                	// #32195
    cd60:	movk	w12, #0x550c, lsl #16
    cd64:	add	w8, w8, w12
    cd68:	add	w12, w8, w9
    cd6c:	add	w9, w17, w8
    cd70:	bic	w8, w16, w12
    cd74:	and	w17, w13, w12
    cd78:	orr	w8, w17, w8
    cd7c:	eor	w17, w11, w14
    cd80:	and	w17, w9, w17
    cd84:	and	w1, w11, w14
    cd88:	add	w17, w17, w1
    cd8c:	ldp	w18, w1, [x0, #48]
    cd90:	str	x0, [sp, #40]
    cd94:	rev	w4, w18
    cd98:	add	w15, w4, w15
    cd9c:	add	w8, w15, w8
    cda0:	eor	w15, w12, w12, ror #14
    cda4:	eor	w15, w12, w15, ror #5
    cda8:	ror	w15, w15, #6
    cdac:	add	w8, w8, w15
    cdb0:	eor	w15, w9, w9, ror #9
    cdb4:	eor	w15, w9, w15, ror #11
    cdb8:	ror	w15, w15, #2
    cdbc:	add	w15, w17, w15
    cdc0:	mov	w17, #0x5d74                	// #23924
    cdc4:	movk	w17, #0x72be, lsl #16
    cdc8:	add	w17, w8, w17
    cdcc:	add	w8, w17, w10
    cdd0:	add	w24, w15, w17
    cdd4:	bic	w10, w13, w8
    cdd8:	and	w15, w12, w8
    cddc:	rev	w1, w1
    cde0:	orr	w10, w15, w10
    cde4:	add	w16, w1, w16
    cde8:	add	w10, w16, w10
    cdec:	eor	w16, w8, w8, ror #14
    cdf0:	eor	w16, w8, w16, ror #5
    cdf4:	ror	w16, w16, #6
    cdf8:	eor	w15, w9, w11
    cdfc:	add	w10, w10, w16
    ce00:	eor	w16, w24, w24, ror #9
    ce04:	and	w15, w24, w15
    ce08:	and	w17, w9, w11
    ce0c:	eor	w16, w24, w16, ror #11
    ce10:	add	w15, w15, w17
    ce14:	ror	w16, w16, #2
    ce18:	add	w15, w15, w16
    ce1c:	mov	w16, #0xb1fe                	// #45566
    ce20:	movk	w16, #0x80de, lsl #16
    ce24:	add	w16, w10, w16
    ce28:	add	w10, w16, w14
    ce2c:	add	w21, w15, w16
    ce30:	bic	w14, w12, w10
    ce34:	and	w15, w8, w10
    ce38:	orr	w14, w15, w14
    ce3c:	eor	w15, w24, w9
    ce40:	and	w15, w21, w15
    ce44:	and	w17, w24, w9
    ce48:	add	w15, w15, w17
    ce4c:	ldp	w16, w17, [x0, #56]
    ce50:	rev	w0, w16
    ce54:	add	w13, w0, w13
    ce58:	add	w13, w13, w14
    ce5c:	eor	w14, w10, w10, ror #14
    ce60:	eor	w14, w10, w14, ror #5
    ce64:	ror	w14, w14, #6
    ce68:	add	w13, w13, w14
    ce6c:	eor	w14, w21, w21, ror #9
    ce70:	eor	w14, w21, w14, ror #11
    ce74:	ror	w14, w14, #2
    ce78:	add	w14, w15, w14
    ce7c:	mov	w15, #0x6a7                 	// #1703
    ce80:	movk	w15, #0x9bdc, lsl #16
    ce84:	add	w13, w13, w15
    ce88:	add	w15, w13, w11
    ce8c:	add	w26, w14, w13
    ce90:	bic	w11, w8, w15
    ce94:	and	w13, w10, w15
    ce98:	rev	w18, w17
    ce9c:	orr	w11, w13, w11
    cea0:	add	w12, w18, w12
    cea4:	add	w11, w12, w11
    cea8:	eor	w12, w15, w15, ror #14
    ceac:	eor	w12, w15, w12, ror #5
    ceb0:	ror	w12, w12, #6
    ceb4:	eor	w13, w21, w24
    ceb8:	add	w11, w11, w12
    cebc:	eor	w12, w26, w26, ror #9
    cec0:	and	w13, w26, w13
    cec4:	and	w14, w21, w24
    cec8:	eor	w12, w26, w12, ror #11
    cecc:	add	w13, w13, w14
    ced0:	ror	w12, w12, #2
    ced4:	add	w12, w13, w12
    ced8:	mov	w13, #0xf174                	// #61812
    cedc:	movk	w13, #0xc19b, lsl #16
    cee0:	add	w13, w11, w13
    cee4:	adrp	x17, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
    cee8:	add	w11, w13, w9
    ceec:	add	w29, w12, w13
    cef0:	add	x17, x17, #0x56c
    cef4:	bic	w12, w10, w11
    cef8:	and	w13, w15, w11
    cefc:	eor	w9, w11, w11, ror #14
    cf00:	orr	w12, w13, w12
    cf04:	eor	w13, w21, w26
    cf08:	add	w8, w12, w8
    cf0c:	and	w12, w21, w26
    cf10:	and	w13, w13, w29
    cf14:	eor	w9, w11, w9, ror #5
    cf18:	add	w12, w13, w12
    cf1c:	eor	w13, w29, w29, ror #9
    cf20:	ror	w9, w9, #6
    cf24:	add	w8, w8, w9
    cf28:	eor	w9, w29, w13, ror #11
    cf2c:	ror	w9, w9, #2
    cf30:	add	w9, w12, w9
    cf34:	eor	w14, w0, w0, ror #2
    cf38:	stp	w9, w14, [sp, #64]
    cf3c:	eor	w9, w22, w22, ror #11
    cf40:	eor	w14, w28, w28, ror #11
    cf44:	ror	w9, w9, #7
    cf48:	ror	w14, w14, #7
    cf4c:	eor	w9, w9, w22, lsr #3
    cf50:	eor	w14, w14, w28, lsr #3
    cf54:	add	w28, w9, w28
    cf58:	eor	w9, w19, w19, ror #11
    cf5c:	eor	w13, w27, w27, ror #11
    cf60:	ror	w9, w9, #7
    cf64:	ror	w13, w13, #7
    cf68:	eor	w9, w9, w19, lsr #3
    cf6c:	eor	w13, w13, w27, lsr #3
    cf70:	add	w9, w9, w22
    cf74:	eor	w12, w23, w23, ror #11
    cf78:	add	w22, w13, w23
    cf7c:	eor	w13, w25, w25, ror #11
    cf80:	ror	w12, w12, #7
    cf84:	ror	w13, w13, #7
    cf88:	eor	w12, w12, w23, lsr #3
    cf8c:	eor	w13, w13, w25, lsr #3
    cf90:	add	w12, w12, w19
    cf94:	add	w19, w13, w27
    cf98:	eor	w13, w5, w5, ror #11
    cf9c:	ror	w13, w13, #7
    cfa0:	eor	w13, w13, w5, lsr #3
    cfa4:	add	w23, w13, w25
    cfa8:	eor	w13, w20, w20, ror #11
    cfac:	ror	w13, w13, #7
    cfb0:	eor	w13, w13, w20, lsr #3
    cfb4:	add	w14, w14, w30
    cfb8:	ldp	w16, w30, [x17, #-60]
    cfbc:	add	w6, w13, w5
    cfc0:	eor	w13, w3, w3, ror #11
    cfc4:	ror	w13, w13, #7
    cfc8:	eor	w13, w13, w3, lsr #3
    cfcc:	add	w20, w13, w20
    cfd0:	eor	w13, w7, w7, ror #11
    cfd4:	ror	w13, w13, #7
    cfd8:	add	w5, w14, w3
    cfdc:	add	w14, w8, w16
    cfe0:	eor	w8, w2, w2, ror #11
    cfe4:	eor	w13, w13, w7, lsr #3
    cfe8:	ror	w8, w8, #7
    cfec:	add	w16, w30, w10
    cff0:	eor	w10, w4, w4, ror #11
    cff4:	add	w13, w13, w3
    cff8:	eor	w8, w8, w2, lsr #3
    cffc:	ror	w10, w10, #7
    d000:	add	w3, w9, w2
    d004:	eor	w9, w1, w1, ror #11
    d008:	add	w8, w8, w7
    d00c:	eor	w10, w10, w4, lsr #3
    d010:	ror	w9, w9, #7
    d014:	stp	w8, w13, [sp, #56]
    d018:	add	w8, w10, w2
    d01c:	eor	w9, w9, w1, lsr #3
    d020:	str	w8, [sp, #52]
    d024:	add	w10, w9, w4
    d028:	ldp	w9, w8, [sp, #64]
    d02c:	add	w4, w12, w4
    d030:	eor	w12, w0, w0, ror #11
    d034:	ror	w12, w12, #7
    d038:	eor	w12, w12, w0, lsr #3
    d03c:	eor	w25, w18, w18, ror #2
    d040:	add	w12, w12, w1
    d044:	add	w1, w22, w1
    d048:	ror	w22, w8, #17
    d04c:	eor	w22, w22, w0, lsr #10
    d050:	ror	w25, w25, #17
    d054:	add	w30, w5, w22
    d058:	eor	w22, w25, w18, lsr #10
    d05c:	ldp	w5, w25, [x17, #-52]
    d060:	eor	w13, w18, w18, ror #11
    d064:	ror	w13, w13, #7
    d068:	add	w14, w14, w30
    d06c:	add	w27, w28, w7
    d070:	eor	w13, w13, w18, lsr #3
    d074:	add	w24, w14, w24
    d078:	add	w13, w13, w0
    d07c:	add	w2, w19, w0
    d080:	add	w0, w27, w22
    d084:	add	w5, w5, w15
    d088:	bic	w15, w15, w24
    d08c:	and	w22, w11, w24
    d090:	add	w8, w23, w18
    d094:	orr	w23, w22, w15
    d098:	add	w16, w16, w0
    d09c:	add	w16, w16, w23
    d0a0:	eor	w23, w24, w24, ror #14
    d0a4:	eor	w23, w24, w23, ror #5
    d0a8:	add	w14, w9, w14
    d0ac:	ror	w23, w23, #6
    d0b0:	eor	w7, w26, w29
    d0b4:	eor	w15, w30, w30, ror #2
    d0b8:	add	w16, w16, w23
    d0bc:	eor	w23, w14, w14, ror #9
    d0c0:	and	w19, w26, w29
    d0c4:	and	w7, w14, w7
    d0c8:	ror	w15, w15, #17
    d0cc:	eor	w23, w14, w23, ror #11
    d0d0:	add	w7, w7, w19
    d0d4:	eor	w15, w15, w30, lsr #10
    d0d8:	ror	w23, w23, #2
    d0dc:	eor	w19, w0, w0, ror #2
    d0e0:	add	w28, w3, w15
    d0e4:	add	w7, w7, w23
    d0e8:	ror	w3, w19, #17
    d0ec:	add	w21, w16, w21
    d0f0:	add	w16, w7, w16
    d0f4:	eor	w7, w28, w28, ror #2
    d0f8:	eor	w3, w3, w0, lsr #10
    d0fc:	ror	w7, w7, #17
    d100:	add	w22, w4, w3
    d104:	eor	w7, w7, w28, lsr #10
    d108:	add	w23, w1, w7
    d10c:	eor	w1, w22, w22, ror #2
    d110:	ror	w1, w1, #17
    d114:	eor	w1, w1, w22, lsr #10
    d118:	add	w4, w25, w11
    d11c:	eor	w25, w14, w29
    d120:	bic	w11, w11, w21
    d124:	add	w27, w2, w1
    d128:	and	w1, w24, w21
    d12c:	orr	w11, w1, w11
    d130:	and	w1, w14, w29
    d134:	add	w2, w5, w28
    d138:	and	w5, w16, w25
    d13c:	add	w1, w5, w1
    d140:	eor	w5, w21, w21, ror #14
    d144:	add	w11, w2, w11
    d148:	eor	w2, w16, w16, ror #9
    d14c:	eor	w5, w21, w5, ror #5
    d150:	eor	w2, w16, w2, ror #11
    d154:	ror	w5, w5, #6
    d158:	ror	w2, w2, #2
    d15c:	add	w11, w11, w5
    d160:	add	w1, w1, w2
    d164:	add	w26, w11, w26
    d168:	add	w11, w1, w11
    d16c:	eor	w1, w23, w23, ror #2
    d170:	ror	w1, w1, #17
    d174:	eor	w1, w1, w23, lsr #10
    d178:	add	w25, w8, w1
    d17c:	eor	w8, w27, w27, ror #2
    d180:	ror	w8, w8, #17
    d184:	add	w6, w6, w30
    d188:	eor	w8, w8, w27, lsr #10
    d18c:	add	w19, w6, w8
    d190:	bic	w8, w24, w26
    d194:	and	w1, w21, w26
    d198:	orr	w8, w1, w8
    d19c:	add	w4, w4, w22
    d1a0:	add	w8, w4, w8
    d1a4:	eor	w4, w26, w26, ror #14
    d1a8:	eor	w4, w26, w4, ror #5
    d1ac:	eor	w15, w30, w30, ror #11
    d1b0:	ror	w4, w4, #6
    d1b4:	ror	w15, w15, #7
    d1b8:	eor	w5, w16, w14
    d1bc:	add	w8, w8, w4
    d1c0:	eor	w4, w11, w11, ror #9
    d1c4:	eor	w15, w15, w30, lsr #3
    d1c8:	and	w2, w16, w14
    d1cc:	and	w5, w11, w5
    d1d0:	ldr	w9, [sp, #60]
    d1d4:	eor	w4, w11, w4, ror #11
    d1d8:	add	w15, w15, w18
    d1dc:	ldp	w18, w3, [x17, #-44]
    d1e0:	add	w1, w5, w2
    d1e4:	ror	w4, w4, #2
    d1e8:	add	w1, w1, w4
    d1ec:	eor	w4, w25, w25, ror #2
    d1f0:	ror	w4, w4, #17
    d1f4:	add	w5, w20, w0
    d1f8:	add	w7, w9, w28
    d1fc:	ldr	w9, [sp, #56]
    d200:	eor	w4, w4, w25, lsr #10
    d204:	add	w18, w24, w18
    d208:	ldp	w2, w24, [x17, #-36]
    d20c:	add	w20, w5, w4
    d210:	eor	w4, w19, w19, ror #2
    d214:	ror	w4, w4, #17
    d218:	eor	w4, w4, w19, lsr #10
    d21c:	add	w29, w8, w29
    d220:	str	w0, [sp, #68]
    d224:	add	w0, w9, w22
    d228:	add	w9, w21, w3
    d22c:	ldr	w3, [sp, #52]
    d230:	add	w6, w7, w4
    d234:	add	w8, w1, w8
    d238:	bic	w1, w21, w29
    d23c:	and	w7, w26, w29
    d240:	add	w18, w18, w23
    d244:	eor	w4, w11, w16
    d248:	orr	w1, w7, w1
    d24c:	add	w2, w25, w2
    d250:	add	w21, w2, w26
    d254:	and	w2, w8, w4
    d258:	eor	w4, w20, w20, ror #2
    d25c:	add	w18, w18, w1
    d260:	eor	w1, w6, w6, ror #2
    d264:	ror	w4, w4, #17
    d268:	ror	w1, w1, #17
    d26c:	add	w3, w3, w23
    d270:	and	w7, w11, w16
    d274:	eor	w4, w4, w20, lsr #10
    d278:	eor	w1, w1, w6, lsr #10
    d27c:	add	w2, w2, w7
    d280:	add	w7, w0, w4
    d284:	eor	w0, w29, w29, ror #14
    d288:	add	w5, w3, w1
    d28c:	eor	w1, w8, w8, ror #9
    d290:	eor	w0, w29, w0, ror #5
    d294:	eor	w1, w8, w1, ror #11
    d298:	ror	w0, w0, #6
    d29c:	ror	w1, w1, #2
    d2a0:	add	w18, w18, w0
    d2a4:	add	w1, w2, w1
    d2a8:	eor	w0, w8, w11
    d2ac:	add	w14, w18, w14
    d2b0:	add	w18, w1, w18
    d2b4:	and	w2, w8, w11
    d2b8:	bic	w1, w26, w14
    d2bc:	and	w4, w29, w14
    d2c0:	and	w0, w18, w0
    d2c4:	orr	w26, w4, w1
    d2c8:	eor	w1, w7, w7, ror #2
    d2cc:	add	w0, w0, w2
    d2d0:	eor	w2, w5, w5, ror #2
    d2d4:	ror	w1, w1, #17
    d2d8:	ror	w2, w2, #17
    d2dc:	add	w10, w10, w27
    d2e0:	add	w12, w12, w25
    d2e4:	eor	w1, w1, w7, lsr #10
    d2e8:	eor	w2, w2, w5, lsr #10
    d2ec:	add	w4, w10, w1
    d2f0:	add	w1, w12, w2
    d2f4:	add	w2, w19, w24
    d2f8:	add	w24, w2, w29
    d2fc:	eor	w2, w14, w14, ror #14
    d300:	add	w9, w9, w27
    d304:	eor	w2, w14, w2, ror #5
    d308:	add	w9, w9, w26
    d30c:	ror	w2, w2, #6
    d310:	add	w9, w9, w2
    d314:	eor	w2, w18, w18, ror #9
    d318:	eor	w2, w18, w2, ror #11
    d31c:	ror	w2, w2, #2
    d320:	add	w0, w0, w2
    d324:	add	w16, w9, w16
    d328:	add	w9, w0, w9
    d32c:	eor	w0, w4, w4, ror #2
    d330:	ror	w0, w0, #17
    d334:	add	w13, w13, w19
    d338:	eor	w0, w0, w4, lsr #10
    d33c:	add	w3, w13, w0
    d340:	eor	w13, w1, w1, ror #2
    d344:	ror	w13, w13, #17
    d348:	add	w15, w15, w20
    d34c:	eor	w26, w18, w8
    d350:	eor	w13, w13, w1, lsr #10
    d354:	bic	w29, w29, w16
    d358:	add	w2, w15, w13
    d35c:	and	w13, w14, w16
    d360:	and	w15, w18, w8
    d364:	and	w26, w9, w26
    d368:	ldp	w10, w12, [x17, #-28]
    d36c:	orr	w13, w13, w29
    d370:	add	w15, w26, w15
    d374:	eor	w26, w16, w16, ror #14
    d378:	add	w13, w21, w13
    d37c:	eor	w21, w9, w9, ror #9
    d380:	eor	w26, w16, w26, ror #5
    d384:	ror	w26, w26, #6
    d388:	eor	w21, w9, w21, ror #11
    d38c:	add	w13, w13, w26
    d390:	ror	w21, w21, #2
    d394:	add	w10, w20, w10
    d398:	add	w15, w15, w21
    d39c:	add	w11, w13, w11
    d3a0:	add	w10, w10, w14
    d3a4:	add	w13, w15, w13
    d3a8:	bic	w14, w14, w11
    d3ac:	and	w15, w16, w11
    d3b0:	orr	w14, w15, w14
    d3b4:	add	w14, w24, w14
    d3b8:	eor	w24, w11, w11, ror #14
    d3bc:	eor	w24, w11, w24, ror #5
    d3c0:	ror	w24, w24, #6
    d3c4:	eor	w26, w9, w18
    d3c8:	add	w14, w14, w24
    d3cc:	eor	w24, w13, w13, ror #9
    d3d0:	and	w21, w9, w18
    d3d4:	and	w26, w13, w26
    d3d8:	eor	w24, w13, w24, ror #11
    d3dc:	add	w21, w26, w21
    d3e0:	ror	w24, w24, #2
    d3e4:	add	w12, w6, w12
    d3e8:	add	w21, w21, w24
    d3ec:	add	w8, w14, w8
    d3f0:	add	w12, w12, w16
    d3f4:	eor	w24, w13, w9
    d3f8:	add	w14, w21, w14
    d3fc:	bic	w16, w16, w8
    d400:	and	w21, w11, w8
    d404:	orr	w16, w21, w16
    d408:	and	w21, w13, w9
    d40c:	and	w24, w14, w24
    d410:	ldp	w15, w26, [x17, #-20]
    d414:	add	w21, w24, w21
    d418:	eor	w24, w8, w8, ror #14
    d41c:	add	w10, w10, w16
    d420:	eor	w16, w14, w14, ror #9
    d424:	eor	w24, w8, w24, ror #5
    d428:	ror	w24, w24, #6
    d42c:	eor	w16, w14, w16, ror #11
    d430:	add	w10, w10, w24
    d434:	ror	w16, w16, #2
    d438:	add	w15, w7, w15
    d43c:	add	w16, w21, w16
    d440:	add	w18, w10, w18
    d444:	add	w15, w15, w11
    d448:	add	w10, w16, w10
    d44c:	bic	w11, w11, w18
    d450:	and	w16, w8, w18
    d454:	orr	w11, w16, w11
    d458:	add	w11, w12, w11
    d45c:	eor	w12, w18, w18, ror #14
    d460:	eor	w12, w18, w12, ror #5
    d464:	ror	w12, w12, #6
    d468:	eor	w24, w14, w13
    d46c:	add	w11, w11, w12
    d470:	eor	w12, w10, w10, ror #9
    d474:	and	w21, w14, w13
    d478:	and	w24, w10, w24
    d47c:	eor	w12, w10, w12, ror #11
    d480:	add	w16, w24, w21
    d484:	ror	w12, w12, #2
    d488:	add	w26, w5, w26
    d48c:	add	w12, w16, w12
    d490:	add	w9, w11, w9
    d494:	add	w26, w26, w8
    d498:	add	w11, w12, w11
    d49c:	bic	w8, w8, w9
    d4a0:	and	w12, w18, w9
    d4a4:	orr	w8, w12, w8
    d4a8:	add	w8, w15, w8
    d4ac:	eor	w15, w9, w9, ror #14
    d4b0:	eor	w15, w9, w15, ror #5
    d4b4:	ldp	w21, w24, [x17, #-12]
    d4b8:	ror	w15, w15, #6
    d4bc:	eor	w16, w10, w14
    d4c0:	add	w8, w8, w15
    d4c4:	eor	w15, w11, w11, ror #9
    d4c8:	and	w12, w10, w14
    d4cc:	and	w16, w11, w16
    d4d0:	eor	w15, w11, w15, ror #11
    d4d4:	add	w12, w16, w12
    d4d8:	ror	w15, w15, #2
    d4dc:	add	w21, w4, w21
    d4e0:	add	w12, w12, w15
    d4e4:	add	w13, w8, w13
    d4e8:	add	w24, w1, w24
    d4ec:	add	w21, w21, w18
    d4f0:	add	w12, w12, w8
    d4f4:	bic	w8, w18, w13
    d4f8:	and	w18, w9, w13
    d4fc:	add	w29, w24, w9
    d500:	eor	w24, w13, w13, ror #14
    d504:	orr	w8, w18, w8
    d508:	eor	w24, w13, w24, ror #5
    d50c:	ldr	x0, [sp, #72]
    d510:	add	w8, w26, w8
    d514:	ror	w24, w24, #6
    d518:	ldur	w16, [x17, #-4]
    d51c:	eor	w15, w11, w10
    d520:	add	w8, w8, w24
    d524:	eor	w24, w12, w12, ror #9
    d528:	and	w18, w11, w10
    d52c:	and	w15, w12, w15
    d530:	eor	w24, w12, w24, ror #11
    d534:	add	w15, w15, w18
    d538:	ror	w24, w24, #2
    d53c:	add	x0, x0, #0x10
    d540:	add	w15, w15, w24
    d544:	add	w14, w8, w14
    d548:	str	x0, [sp, #72]
    d54c:	cmp	x0, #0x30
    d550:	add	w16, w3, w16
    d554:	eor	w24, w12, w11
    d558:	add	w0, w15, w8
    d55c:	bic	w8, w9, w14
    d560:	and	w9, w13, w14
    d564:	orr	w8, w9, w8
    d568:	and	w9, w12, w11
    d56c:	add	w15, w16, w13
    d570:	and	w16, w0, w24
    d574:	add	w9, w16, w9
    d578:	eor	w16, w14, w14, ror #14
    d57c:	eor	w16, w14, w16, ror #5
    d580:	add	w8, w21, w8
    d584:	eor	w21, w0, w0, ror #9
    d588:	ror	w16, w16, #6
    d58c:	add	w16, w8, w16
    d590:	eor	w8, w0, w21, ror #11
    d594:	ror	w8, w8, #2
    d598:	add	w9, w9, w8
    d59c:	add	w8, w16, w10
    d5a0:	add	w24, w9, w16
    d5a4:	bic	w9, w13, w8
    d5a8:	and	w10, w14, w8
    d5ac:	orr	w9, w10, w9
    d5b0:	eor	w10, w8, w8, ror #14
    d5b4:	eor	w10, w8, w10, ror #5
    d5b8:	eor	w26, w0, w12
    d5bc:	eor	w16, w24, w24, ror #9
    d5c0:	add	w9, w29, w9
    d5c4:	ror	w10, w10, #6
    d5c8:	ldr	w18, [x17], #64
    d5cc:	and	w21, w0, w12
    d5d0:	and	w13, w24, w26
    d5d4:	add	w9, w9, w10
    d5d8:	eor	w10, w24, w16, ror #11
    d5dc:	add	w13, w13, w21
    d5e0:	ror	w10, w10, #2
    d5e4:	add	w13, w13, w10
    d5e8:	add	w10, w9, w11
    d5ec:	add	w21, w13, w9
    d5f0:	eor	w9, w10, w10, ror #14
    d5f4:	bic	w11, w14, w10
    d5f8:	and	w13, w8, w10
    d5fc:	add	w18, w2, w18
    d600:	eor	w26, w24, w0
    d604:	orr	w11, w13, w11
    d608:	eor	w13, w21, w21, ror #9
    d60c:	eor	w9, w10, w9, ror #5
    d610:	add	w18, w18, w14
    d614:	and	w29, w24, w0
    d618:	and	w14, w21, w26
    d61c:	add	w11, w15, w11
    d620:	eor	w13, w21, w13, ror #11
    d624:	ror	w9, w9, #6
    d628:	add	w14, w14, w29
    d62c:	ror	w13, w13, #2
    d630:	add	w9, w11, w9
    d634:	add	w11, w14, w13
    d638:	add	w15, w9, w12
    d63c:	add	w26, w11, w9
    d640:	bic	w11, w8, w15
    d644:	and	w12, w10, w15
    d648:	eor	w16, w21, w24
    d64c:	eor	w9, w15, w15, ror #14
    d650:	orr	w11, w12, w11
    d654:	eor	w12, w26, w26, ror #9
    d658:	and	w29, w21, w24
    d65c:	and	w13, w26, w16
    d660:	eor	w9, w15, w9, ror #5
    d664:	eor	w12, w26, w12, ror #11
    d668:	add	w11, w18, w11
    d66c:	mov	w18, w2
    d670:	mov	w2, w5
    d674:	mov	w5, w19
    d678:	mov	w19, w22
    d67c:	mov	w22, w28
    d680:	ldr	w28, [sp, #68]
    d684:	add	w13, w13, w29
    d688:	ror	w9, w9, #6
    d68c:	ror	w12, w12, #2
    d690:	add	w9, w11, w9
    d694:	add	w12, w13, w12
    d698:	add	w11, w9, w0
    d69c:	mov	w0, w3
    d6a0:	mov	w3, w6
    d6a4:	add	w29, w12, w9
    d6a8:	b.cc	cef4 <lzma_crc64@@XZ_5.0+0x7a8>  // b.lo, b.ul, b.last
    d6ac:	ldr	w16, [sp, #20]
    d6b0:	ldp	w12, w9, [sp, #32]
    d6b4:	ldp	w14, w13, [sp, #24]
    d6b8:	add	w11, w11, w16
    d6bc:	ldr	w16, [sp, #16]
    d6c0:	add	w9, w29, w9
    d6c4:	add	w12, w26, w12
    d6c8:	add	w13, w21, w13
    d6cc:	add	w15, w15, w16
    d6d0:	ldr	w16, [sp, #12]
    d6d4:	add	w14, w24, w14
    d6d8:	add	w10, w10, w16
    d6dc:	ldr	w16, [sp, #8]
    d6e0:	add	w8, w8, w16
    d6e4:	ldr	x16, [sp, #40]
    d6e8:	stp	w9, w12, [x16, #64]
    d6ec:	stp	w13, w14, [x16, #72]
    d6f0:	stp	w11, w15, [x16, #80]
    d6f4:	stp	w10, w8, [x16, #88]
    d6f8:	ldp	x20, x19, [sp, #160]
    d6fc:	ldp	x22, x21, [sp, #144]
    d700:	ldp	x24, x23, [sp, #128]
    d704:	ldp	x26, x25, [sp, #112]
    d708:	ldp	x28, x27, [sp, #96]
    d70c:	ldp	x29, x30, [sp, #80]
    d710:	add	sp, sp, #0xb0
    d714:	ret
    d718:	stp	x29, x30, [sp, #-32]!
    d71c:	ldr	x8, [x0, #96]
    d720:	str	x19, [sp, #16]
    d724:	mov	x19, x0
    d728:	mov	w9, #0x80                  	// #128
    d72c:	and	x8, x8, #0x3f
    d730:	mov	x29, sp
    d734:	b	d748 <lzma_crc64@@XZ_5.0+0xffc>
    d738:	mov	x0, x19
    d73c:	bl	c8c8 <lzma_crc64@@XZ_5.0+0x17c>
    d740:	mov	x8, xzr
    d744:	mov	w9, wzr
    d748:	cmp	x8, #0x3f
    d74c:	add	x10, x8, #0x1
    d750:	strb	w9, [x19, x8]
    d754:	b.eq	d738 <lzma_crc64@@XZ_5.0+0xfec>  // b.none
    d758:	mov	w9, wzr
    d75c:	cmp	x8, #0x37
    d760:	mov	x8, x10
    d764:	b.ne	d748 <lzma_crc64@@XZ_5.0+0xffc>  // b.any
    d768:	ldr	x8, [x19, #96]
    d76c:	mov	x0, x19
    d770:	lsl	x8, x8, #3
    d774:	str	x8, [x19, #96]
    d778:	rev	x8, x8
    d77c:	str	x8, [x19, #56]
    d780:	bl	c8c8 <lzma_crc64@@XZ_5.0+0x17c>
    d784:	ldp	w8, w9, [x19, #64]
    d788:	ldp	w10, w11, [x19, #72]
    d78c:	rev	w8, w8
    d790:	rev	w9, w9
    d794:	stp	w8, w9, [x19]
    d798:	ldp	w8, w9, [x19, #80]
    d79c:	rev	w10, w10
    d7a0:	rev	w11, w11
    d7a4:	stp	w10, w11, [x19, #8]
    d7a8:	ldp	w10, w11, [x19, #88]
    d7ac:	rev	w8, w8
    d7b0:	rev	w9, w9
    d7b4:	stp	w8, w9, [x19, #16]
    d7b8:	rev	w8, w10
    d7bc:	rev	w9, w11
    d7c0:	stp	w8, w9, [x19, #24]
    d7c4:	ldr	x19, [sp, #16]
    d7c8:	ldp	x29, x30, [sp], #32
    d7cc:	ret
    d7d0:	sub	sp, sp, #0x90
    d7d4:	mov	x2, x0
    d7d8:	movi	v0.2d, #0x0
    d7dc:	mov	x0, sp
    d7e0:	mov	x1, xzr
    d7e4:	stp	x29, x30, [sp, #128]
    d7e8:	add	x29, sp, #0x80
    d7ec:	str	xzr, [sp, #112]
    d7f0:	stp	q0, q0, [sp, #80]
    d7f4:	stp	q0, q0, [sp, #48]
    d7f8:	stp	q0, q0, [sp, #16]
    d7fc:	str	q0, [sp]
    d800:	bl	d838 <lzma_crc64@@XZ_5.0+0x10ec>
    d804:	tbz	w0, #0, d818 <lzma_crc64@@XZ_5.0+0x10cc>
    d808:	mov	x0, #0xffffffffffffffff    	// #-1
    d80c:	ldp	x29, x30, [sp, #128]
    d810:	add	sp, sp, #0x90
    d814:	ret
    d818:	ldp	w9, w8, [sp, #108]
    d81c:	ldr	w10, [sp, #8]
    d820:	add	x8, x8, x9
    d824:	add	x8, x10, x8, lsl #2
    d828:	add	x0, x8, #0xe0
    d82c:	ldp	x29, x30, [sp, #128]
    d830:	add	sp, sp, #0x90
    d834:	ret
    d838:	stp	x29, x30, [sp, #-48]!
    d83c:	stp	x22, x21, [sp, #16]
    d840:	stp	x20, x19, [sp, #32]
    d844:	ldr	x8, [x2, #8]
    d848:	mov	w10, #0xf000                	// #61440
    d84c:	movk	w10, #0x5fff, lsl #16
    d850:	mov	x29, sp
    d854:	sub	x9, x8, #0x1, lsl #12
    d858:	cmp	x9, x10
    d85c:	b.ls	d874 <lzma_crc64@@XZ_5.0+0x1128>  // b.plast
    d860:	mov	w0, #0x1                   	// #1
    d864:	ldp	x20, x19, [sp, #32]
    d868:	ldp	x22, x21, [sp, #16]
    d86c:	ldp	x29, x30, [sp], #48
    d870:	ret
    d874:	ldp	x10, x9, [x2, #24]
    d878:	mov	x20, x2
    d87c:	cmp	x9, x10
    d880:	b.hi	d9ac <lzma_crc64@@XZ_5.0+0x1260>  // b.pmore
    d884:	ldr	x12, [x20]
    d888:	lsr	x13, x8, #1
    d88c:	mov	w11, #0x40000000            	// #1073741824
    d890:	lsr	x14, x8, #2
    d894:	add	w15, w12, w8
    d898:	str	w15, [x0, #12]
    d89c:	ldr	x16, [x20, #16]
    d8a0:	cmp	w13, w11
    d8a4:	csel	w13, w14, w13, hi  // hi = pmore
    d8a8:	mov	x19, x0
    d8ac:	add	x14, x16, x10
    d8b0:	add	x12, x14, x12
    d8b4:	ldr	w11, [x0, #8]
    d8b8:	add	w13, w13, w15
    d8bc:	str	w14, [x0, #16]
    d8c0:	lsr	x12, x12, #1
    d8c4:	ldr	x0, [x0]
    d8c8:	add	w12, w13, w12
    d8cc:	add	w12, w12, w14
    d8d0:	mov	x21, x1
    d8d4:	add	w12, w12, #0x80, lsl #12
    d8d8:	str	w12, [x19, #8]
    d8dc:	cbz	x0, d8fc <lzma_crc64@@XZ_5.0+0x11b0>
    d8e0:	cmp	w11, w12
    d8e4:	b.eq	d8fc <lzma_crc64@@XZ_5.0+0x11b0>  // b.none
    d8e8:	mov	x1, x21
    d8ec:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    d8f0:	str	xzr, [x19]
    d8f4:	ldp	x10, x9, [x20, #24]
    d8f8:	ldr	x8, [x20, #8]
    d8fc:	stp	w9, w10, [x19, #96]
    d900:	add	w10, w8, #0x1
    d904:	str	w10, [x19, #84]
    d908:	ldr	w11, [x20, #40]
    d90c:	mov	w0, #0x1                   	// #1
    d910:	sub	w12, w11, #0x3
    d914:	cmp	w12, #0x11
    d918:	b.hi	d864 <lzma_crc64@@XZ_5.0+0x1118>  // b.pmore
    d91c:	adrp	x14, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
    d920:	adrp	x13, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    d924:	add	x14, x14, #0x5f0
    d928:	ldr	x13, [x13, #3912]
    d92c:	adr	x15, d864 <lzma_crc64@@XZ_5.0+0x1118>
    d930:	ldrb	w16, [x14, x12]
    d934:	add	x15, x15, x16, lsl #2
    d938:	adrp	x14, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    d93c:	ldr	x14, [x14, #3896]
    d940:	br	x15
    d944:	adrp	x13, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    d948:	adrp	x14, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    d94c:	ldr	x13, [x13, #4024]
    d950:	ldr	x14, [x14, #4064]
    d954:	and	w12, w11, #0xf
    d958:	cmp	w12, w9
    d95c:	stp	x14, x13, [x19, #48]
    d960:	b.hi	d9ac <lzma_crc64@@XZ_5.0+0x1260>  // b.pmore
    d964:	b	d9e0 <lzma_crc64@@XZ_5.0+0x1294>
    d968:	adrp	x13, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    d96c:	adrp	x14, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    d970:	ldr	x13, [x13, #4032]
    d974:	ldr	x14, [x14, #4048]
    d978:	and	w12, w11, #0xf
    d97c:	cmp	w12, w9
    d980:	stp	x14, x13, [x19, #48]
    d984:	b.hi	d9ac <lzma_crc64@@XZ_5.0+0x1260>  // b.pmore
    d988:	b	d9e0 <lzma_crc64@@XZ_5.0+0x1294>
    d98c:	adrp	x13, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    d990:	adrp	x14, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    d994:	ldr	x13, [x13, #3928]
    d998:	ldr	x14, [x14, #3888]
    d99c:	and	w12, w11, #0xf
    d9a0:	cmp	w12, w9
    d9a4:	stp	x14, x13, [x19, #48]
    d9a8:	b.ls	d9e0 <lzma_crc64@@XZ_5.0+0x1294>  // b.plast
    d9ac:	mov	w0, #0x1                   	// #1
    d9b0:	ldp	x20, x19, [sp, #32]
    d9b4:	ldp	x22, x21, [sp, #16]
    d9b8:	ldp	x29, x30, [sp], #48
    d9bc:	ret
    d9c0:	adrp	x13, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    d9c4:	adrp	x14, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    d9c8:	ldr	x13, [x13, #4000]
    d9cc:	ldr	x14, [x14, #4016]
    d9d0:	and	w12, w11, #0xf
    d9d4:	cmp	w12, w9
    d9d8:	stp	x14, x13, [x19, #48]
    d9dc:	b.hi	d9ac <lzma_crc64@@XZ_5.0+0x1260>  // b.pmore
    d9e0:	cmp	w12, #0x2
    d9e4:	and	w22, w11, #0x10
    d9e8:	b.ne	d9f4 <lzma_crc64@@XZ_5.0+0x12a8>  // b.any
    d9ec:	mov	w8, #0xffff                	// #65535
    d9f0:	b	da30 <lzma_crc64@@XZ_5.0+0x12e4>
    d9f4:	sub	w8, w8, #0x1
    d9f8:	orr	w8, w8, w8, lsr #1
    d9fc:	orr	w8, w8, w8, lsr #2
    da00:	orr	w8, w8, w8, lsr #4
    da04:	lsr	w9, w8, #1
    da08:	orr	w8, w9, w8, lsr #9
    da0c:	mov	w9, #0x1                   	// #1
    da10:	orr	w8, w8, #0xffff
    da14:	movk	w9, #0x100, lsl #16
    da18:	cmp	w8, w9
    da1c:	b.cc	da30 <lzma_crc64@@XZ_5.0+0x12e4>  // b.lo, b.ul, b.last
    da20:	lsr	w8, w8, #1
    da24:	cmp	w12, #0x3
    da28:	mov	w9, #0xffffff              	// #16777215
    da2c:	csel	w8, w9, w8, eq  // eq = none
    da30:	cmp	w12, #0x2
    da34:	mov	w11, #0x401                 	// #1025
    da38:	ldp	w13, w9, [x19, #108]
    da3c:	csinc	w11, w11, wzr, hi  // hi = pmore
    da40:	str	w8, [x19, #88]
    da44:	add	w8, w8, w11
    da48:	cmp	w12, #0x3
    da4c:	add	w11, w8, #0x10, lsl #12
    da50:	lsr	w14, w22, #4
    da54:	csel	w8, w11, w8, hi  // hi = pmore
    da58:	lsl	w10, w10, w14
    da5c:	cmp	w13, w8
    da60:	stp	w8, w10, [x19, #108]
    da64:	b.ne	da70 <lzma_crc64@@XZ_5.0+0x1324>  // b.any
    da68:	cmp	w9, w10
    da6c:	b.eq	da90 <lzma_crc64@@XZ_5.0+0x1344>  // b.none
    da70:	ldr	x0, [x19, #64]
    da74:	mov	x1, x21
    da78:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    da7c:	ldr	x0, [x19, #72]
    da80:	mov	x1, x21
    da84:	str	xzr, [x19, #64]
    da88:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    da8c:	str	xzr, [x19, #72]
    da90:	ldr	w8, [x20, #44]
    da94:	str	w8, [x19, #92]
    da98:	cbz	w8, dab0 <lzma_crc64@@XZ_5.0+0x1364>
    da9c:	mov	w0, wzr
    daa0:	ldp	x20, x19, [sp, #32]
    daa4:	ldp	x22, x21, [sp, #16]
    daa8:	ldp	x29, x30, [sp], #48
    daac:	ret
    dab0:	ldr	w8, [x19, #96]
    dab4:	mov	w0, wzr
    dab8:	cbnz	w22, dac8 <lzma_crc64@@XZ_5.0+0x137c>
    dabc:	lsr	w8, w8, #2
    dac0:	add	w8, w8, #0x4
    dac4:	b	dad0 <lzma_crc64@@XZ_5.0+0x1384>
    dac8:	lsr	w8, w8, #1
    dacc:	add	w8, w8, #0x10
    dad0:	str	w8, [x19, #92]
    dad4:	ldp	x20, x19, [sp, #32]
    dad8:	ldp	x22, x21, [sp, #16]
    dadc:	ldp	x29, x30, [sp], #48
    dae0:	ret
    dae4:	sub	sp, sp, #0x80
    dae8:	stp	x29, x30, [sp, #64]
    daec:	stp	x22, x21, [sp, #96]
    daf0:	stp	x20, x19, [sp, #112]
    daf4:	ldr	x20, [x0]
    daf8:	mov	x22, x3
    dafc:	mov	x21, x2
    db00:	mov	x19, x1
    db04:	str	x23, [sp, #80]
    db08:	add	x29, sp, #0x40
    db0c:	cbnz	x20, db80 <lzma_crc64@@XZ_5.0+0x1434>
    db10:	mov	x23, x0
    db14:	mov	w0, #0xe0                  	// #224
    db18:	mov	x1, x19
    db1c:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    db20:	cbz	x0, dcb8 <lzma_crc64@@XZ_5.0+0x156c>
    db24:	adrp	x8, d000 <lzma_crc64@@XZ_5.0+0x8b4>
    db28:	adrp	x9, d000 <lzma_crc64@@XZ_5.0+0x8b4>
    db2c:	add	x8, x8, #0xcd4
    db30:	add	x9, x9, #0xf10
    db34:	stp	x8, x9, [x23, #24]
    db38:	adrp	x8, d000 <lzma_crc64@@XZ_5.0+0x8b4>
    db3c:	add	x8, x8, #0xf80
    db40:	mov	x20, x0
    db44:	str	x8, [x23, #64]
    db48:	mov	x8, #0xffffffffffffffff    	// #-1
    db4c:	movi	v0.2d, #0x0
    db50:	str	x0, [x23]
    db54:	str	xzr, [x0, #32]
    db58:	str	wzr, [x0, #40]
    db5c:	stp	wzr, wzr, [x0, #140]
    db60:	stp	xzr, xzr, [x0, #8]
    db64:	str	xzr, [x0]
    db68:	stp	xzr, xzr, [x0, #96]
    db6c:	stp	xzr, x8, [x0, #152]
    db70:	stur	q0, [x0, #168]
    db74:	stur	q0, [x0, #184]
    db78:	stur	q0, [x0, #200]
    db7c:	str	xzr, [x0, #216]
    db80:	ldr	x2, [x21, #16]
    db84:	mov	x3, sp
    db88:	mov	x0, x20
    db8c:	mov	x1, x19
    db90:	blr	x22
    db94:	cbnz	w0, dcbc <lzma_crc64@@XZ_5.0+0x1570>
    db98:	add	x22, x20, #0x20
    db9c:	mov	x2, sp
    dba0:	mov	x0, x22
    dba4:	mov	x1, x19
    dba8:	bl	d838 <lzma_crc64@@XZ_5.0+0x10ec>
    dbac:	tbz	w0, #0, dbb8 <lzma_crc64@@XZ_5.0+0x146c>
    dbb0:	mov	w0, #0x8                   	// #8
    dbb4:	b	dcbc <lzma_crc64@@XZ_5.0+0x1570>
    dbb8:	ldr	x8, [x22]
    dbbc:	cbnz	x8, dbd4 <lzma_crc64@@XZ_5.0+0x1488>
    dbc0:	ldr	w0, [x20, #40]
    dbc4:	mov	x1, x19
    dbc8:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    dbcc:	str	x0, [x20, #32]
    dbd0:	cbz	x0, dcb8 <lzma_crc64@@XZ_5.0+0x156c>
    dbd4:	ldr	w8, [x20, #116]
    dbd8:	ldr	x0, [x20, #96]
    dbdc:	stp	xzr, xzr, [x20, #56]
    dbe0:	str	wzr, [x20, #72]
    dbe4:	str	w8, [x20, #52]
    dbe8:	cbz	x0, dc00 <lzma_crc64@@XZ_5.0+0x14b4>
    dbec:	ldr	w8, [x20, #140]
    dbf0:	mov	w1, wzr
    dbf4:	lsl	x2, x8, #2
    dbf8:	bl	31c0 <memset@plt>
    dbfc:	b	dc34 <lzma_crc64@@XZ_5.0+0x14e8>
    dc00:	ldr	w8, [x20, #140]
    dc04:	mov	x1, x19
    dc08:	lsl	x0, x8, #2
    dc0c:	bl	3690 <lzma_version_string@@XZ_5.0+0x34>
    dc10:	ldr	w8, [x20, #144]
    dc14:	str	x0, [x20, #96]
    dc18:	mov	x1, x19
    dc1c:	lsl	x0, x8, #2
    dc20:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    dc24:	ldr	x8, [x20, #96]
    dc28:	str	x0, [x20, #104]
    dc2c:	cbz	x0, dc98 <lzma_crc64@@XZ_5.0+0x154c>
    dc30:	cbz	x8, dc98 <lzma_crc64@@XZ_5.0+0x154c>
    dc34:	str	wzr, [x20, #112]
    dc38:	ldr	x8, [sp, #48]
    dc3c:	cbz	x8, dc80 <lzma_crc64@@XZ_5.0+0x1534>
    dc40:	ldr	w9, [sp, #56]
    dc44:	cbz	w9, dc80 <lzma_crc64@@XZ_5.0+0x1534>
    dc48:	ldr	w10, [x20, #40]
    dc4c:	ldr	x0, [x20, #32]
    dc50:	add	x8, x8, x9
    dc54:	cmp	w9, w10
    dc58:	csel	w2, w9, w10, cc  // cc = lo, ul, last
    dc5c:	sub	x1, x8, x2
    dc60:	str	w2, [x20, #68]
    dc64:	bl	3040 <memcpy@plt>
    dc68:	ldr	x8, [x20, #88]
    dc6c:	ldr	w1, [x20, #68]
    dc70:	mov	w9, #0x1                   	// #1
    dc74:	mov	x0, x22
    dc78:	str	w9, [x20, #136]
    dc7c:	blr	x8
    dc80:	add	x0, x20, #0x98
    dc84:	add	x2, x21, #0x18
    dc88:	mov	x1, x19
    dc8c:	str	wzr, [x20, #136]
    dc90:	bl	3790 <lzma_version_string@@XZ_5.0+0x134>
    dc94:	b	dcbc <lzma_crc64@@XZ_5.0+0x1570>
    dc98:	mov	x0, x8
    dc9c:	mov	x1, x19
    dca0:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    dca4:	ldr	x0, [x20, #104]
    dca8:	mov	x1, x19
    dcac:	str	xzr, [x20, #96]
    dcb0:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    dcb4:	str	xzr, [x20, #104]
    dcb8:	mov	w0, #0x5                   	// #5
    dcbc:	ldp	x20, x19, [sp, #112]
    dcc0:	ldp	x22, x21, [sp, #96]
    dcc4:	ldr	x23, [sp, #80]
    dcc8:	ldp	x29, x30, [sp, #64]
    dccc:	add	sp, sp, #0x80
    dcd0:	ret
    dcd4:	sub	sp, sp, #0x80
    dcd8:	stp	x29, x30, [sp, #32]
    dcdc:	add	x29, sp, #0x20
    dce0:	stp	x26, x25, [sp, #64]
    dce4:	ldr	w26, [x29, #96]
    dce8:	stp	x28, x27, [sp, #48]
    dcec:	stp	x24, x23, [sp, #80]
    dcf0:	stp	x22, x21, [sp, #96]
    dcf4:	stp	x20, x19, [sp, #112]
    dcf8:	mov	x19, x7
    dcfc:	mov	x20, x6
    dd00:	mov	x21, x5
    dd04:	mov	x22, x4
    dd08:	mov	x23, x3
    dd0c:	mov	x24, x2
    dd10:	mov	x25, x0
    dd14:	add	x27, x0, #0x20
    dd18:	str	x1, [sp, #16]
    dd1c:	b	dd44 <lzma_crc64@@XZ_5.0+0x15f8>
    dd20:	ldr	w8, [x25, #136]
    dd24:	cbz	w8, dd64 <lzma_crc64@@XZ_5.0+0x1618>
    dd28:	ldp	x0, x8, [x25]
    dd2c:	mov	x1, x27
    dd30:	mov	x2, x21
    dd34:	mov	x3, x20
    dd38:	mov	x4, x19
    dd3c:	blr	x8
    dd40:	cbnz	w0, dee4 <lzma_crc64@@XZ_5.0+0x1798>
    dd44:	ldr	x8, [x20]
    dd48:	cmp	x8, x19
    dd4c:	b.cs	dedc <lzma_crc64@@XZ_5.0+0x1790>  // b.hs, b.nlast
    dd50:	cbnz	w26, dd20 <lzma_crc64@@XZ_5.0+0x15d4>
    dd54:	ldr	x8, [x23]
    dd58:	cmp	x8, x22
    dd5c:	b.cc	dd20 <lzma_crc64@@XZ_5.0+0x15d4>  // b.lo, b.ul, b.last
    dd60:	b	dedc <lzma_crc64@@XZ_5.0+0x1790>
    dd64:	ldr	w8, [x25, #56]
    dd68:	ldr	w9, [x25, #64]
    dd6c:	cmp	w8, w9
    dd70:	b.cc	dd28 <lzma_crc64@@XZ_5.0+0x15dc>  // b.lo, b.ul, b.last
    dd74:	ldr	w9, [x25, #40]
    dd78:	ldr	w10, [x25, #48]
    dd7c:	sub	w9, w9, w10
    dd80:	cmp	w8, w9
    dd84:	b.cs	dde4 <lzma_crc64@@XZ_5.0+0x1698>  // b.hs, b.nlast
    dd88:	ldr	w8, [x25, #68]
    dd8c:	mov	w8, w8
    dd90:	stur	x8, [x29, #-8]
    dd94:	ldr	x8, [x25, #176]
    dd98:	cbz	x8, de34 <lzma_crc64@@XZ_5.0+0x16e8>
    dd9c:	ldr	x0, [x25, #152]
    dda0:	ldr	x5, [x25, #32]
    dda4:	ldr	w7, [x25, #40]
    dda8:	ldr	x1, [sp, #16]
    ddac:	sub	x6, x29, #0x8
    ddb0:	mov	x2, x24
    ddb4:	mov	x3, x23
    ddb8:	mov	x4, x22
    ddbc:	str	w26, [sp]
    ddc0:	blr	x8
    ddc4:	mov	w28, w0
    ddc8:	ldur	w8, [x29, #-8]
    ddcc:	cmp	w28, #0x1
    ddd0:	str	w8, [x25, #68]
    ddd4:	b.ne	de70 <lzma_crc64@@XZ_5.0+0x1724>  // b.any
    ddd8:	mov	w28, wzr
    dddc:	str	w26, [x25, #136]
    dde0:	b	de7c <lzma_crc64@@XZ_5.0+0x1730>
    dde4:	ldr	w9, [x25, #44]
    dde8:	ldr	w10, [x25, #68]
    ddec:	ldr	x0, [x25, #32]
    ddf0:	sub	w8, w8, w9
    ddf4:	and	w28, w8, #0xfffffff0
    ddf8:	sub	w2, w10, w28
    ddfc:	add	x1, x0, x28
    de00:	bl	3050 <memmove@plt>
    de04:	ldp	w8, w9, [x25, #52]
    de08:	ldp	w10, w11, [x25, #64]
    de0c:	add	w12, w8, w28
    de10:	sub	w9, w9, w28
    de14:	sub	w10, w10, w28
    de18:	sub	w8, w11, w28
    de1c:	stp	w12, w9, [x25, #52]
    de20:	stp	w10, w8, [x25, #64]
    de24:	mov	w8, w8
    de28:	stur	x8, [x29, #-8]
    de2c:	ldr	x8, [x25, #176]
    de30:	cbnz	x8, dd9c <lzma_crc64@@XZ_5.0+0x1650>
    de34:	ldr	x3, [x25, #32]
    de38:	ldr	w5, [x25, #40]
    de3c:	sub	x4, x29, #0x8
    de40:	mov	x0, x24
    de44:	mov	x1, x23
    de48:	mov	x2, x22
    de4c:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
    de50:	cbz	w26, de8c <lzma_crc64@@XZ_5.0+0x1740>
    de54:	ldr	x8, [x23]
    de58:	cmp	x8, x22
    de5c:	cset	w28, eq  // eq = none
    de60:	ldur	w8, [x29, #-8]
    de64:	cmp	w28, #0x1
    de68:	str	w8, [x25, #68]
    de6c:	b.eq	ddd8 <lzma_crc64@@XZ_5.0+0x168c>  // b.none
    de70:	ldr	w9, [x25, #48]
    de74:	subs	w8, w8, w9
    de78:	b.ls	dea4 <lzma_crc64@@XZ_5.0+0x1758>  // b.plast
    de7c:	str	w8, [x25, #64]
    de80:	ldr	w1, [x25, #72]
    de84:	cbnz	w1, deac <lzma_crc64@@XZ_5.0+0x1760>
    de88:	b	ded4 <lzma_crc64@@XZ_5.0+0x1788>
    de8c:	ldur	w8, [x29, #-8]
    de90:	mov	w28, wzr
    de94:	str	w8, [x25, #68]
    de98:	ldr	w9, [x25, #48]
    de9c:	subs	w8, w8, w9
    dea0:	b.hi	de7c <lzma_crc64@@XZ_5.0+0x1730>  // b.pmore
    dea4:	ldr	w1, [x25, #72]
    dea8:	cbz	w1, ded4 <lzma_crc64@@XZ_5.0+0x1788>
    deac:	ldr	w8, [x25, #56]
    deb0:	ldr	w9, [x25, #64]
    deb4:	cmp	w8, w9
    deb8:	b.cs	ded4 <lzma_crc64@@XZ_5.0+0x1788>  // b.hs, b.nlast
    debc:	ldr	x9, [x25, #88]
    dec0:	sub	w8, w8, w1
    dec4:	mov	x0, x27
    dec8:	str	wzr, [x25, #72]
    decc:	str	w8, [x25, #56]
    ded0:	blr	x9
    ded4:	cbz	w28, dd28 <lzma_crc64@@XZ_5.0+0x15dc>
    ded8:	b	deec <lzma_crc64@@XZ_5.0+0x17a0>
    dedc:	mov	w28, wzr
    dee0:	b	deec <lzma_crc64@@XZ_5.0+0x17a0>
    dee4:	mov	w28, w0
    dee8:	str	wzr, [x25, #136]
    deec:	mov	w0, w28
    def0:	ldp	x20, x19, [sp, #112]
    def4:	ldp	x22, x21, [sp, #96]
    def8:	ldp	x24, x23, [sp, #80]
    defc:	ldp	x26, x25, [sp, #64]
    df00:	ldp	x28, x27, [sp, #48]
    df04:	ldp	x29, x30, [sp, #32]
    df08:	add	sp, sp, #0x80
    df0c:	ret
    df10:	stp	x29, x30, [sp, #-32]!
    df14:	stp	x20, x19, [sp, #16]
    df18:	mov	x20, x0
    df1c:	add	x0, x0, #0x98
    df20:	mov	x29, sp
    df24:	mov	x19, x1
    df28:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
    df2c:	ldr	x0, [x20, #104]
    df30:	mov	x1, x19
    df34:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    df38:	ldr	x0, [x20, #96]
    df3c:	mov	x1, x19
    df40:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    df44:	ldr	x0, [x20, #32]
    df48:	mov	x1, x19
    df4c:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    df50:	ldr	x8, [x20, #16]
    df54:	ldr	x0, [x20]
    df58:	mov	x1, x19
    df5c:	cbz	x8, df68 <lzma_crc64@@XZ_5.0+0x181c>
    df60:	blr	x8
    df64:	b	df6c <lzma_crc64@@XZ_5.0+0x1820>
    df68:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
    df6c:	mov	x0, x20
    df70:	mov	x1, x19
    df74:	ldp	x20, x19, [sp, #16]
    df78:	ldp	x29, x30, [sp], #32
    df7c:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
    df80:	stp	x29, x30, [sp, #-48]!
    df84:	stp	x20, x19, [sp, #32]
    df88:	ldr	x8, [x0, #24]
    df8c:	str	x21, [sp, #16]
    df90:	mov	x29, sp
    df94:	cbz	x8, dfc4 <lzma_crc64@@XZ_5.0+0x1878>
    df98:	mov	x21, x0
    df9c:	ldr	x0, [x0]
    dfa0:	mov	x20, x1
    dfa4:	mov	x1, x3
    dfa8:	mov	x19, x3
    dfac:	blr	x8
    dfb0:	cbz	w0, dfd8 <lzma_crc64@@XZ_5.0+0x188c>
    dfb4:	ldp	x20, x19, [sp, #32]
    dfb8:	ldr	x21, [sp, #16]
    dfbc:	ldp	x29, x30, [sp], #48
    dfc0:	ret
    dfc4:	mov	w0, #0xb                   	// #11
    dfc8:	ldp	x20, x19, [sp, #32]
    dfcc:	ldr	x21, [sp, #16]
    dfd0:	ldp	x29, x30, [sp], #48
    dfd4:	ret
    dfd8:	add	x0, x21, #0x98
    dfdc:	add	x2, x19, #0x10
    dfe0:	mov	x1, x20
    dfe4:	ldp	x20, x19, [sp, #32]
    dfe8:	ldr	x21, [sp, #16]
    dfec:	ldp	x29, x30, [sp], #48
    dff0:	b	38d8 <lzma_version_string@@XZ_5.0+0x27c>

000000000000dff4 <lzma_mf_is_supported@@XZ_5.0>:
    dff4:	sub	w8, w0, #0x3
    dff8:	orr	w9, w0, #0x1
    dffc:	cmp	w8, #0x2
    e000:	cset	w8, cc  // cc = lo, ul, last
    e004:	cmp	w9, #0x13
    e008:	cset	w9, eq  // eq = none
    e00c:	cmp	w0, #0x14
    e010:	orr	w8, w9, w8
    e014:	cset	w9, eq  // eq = none
    e018:	orr	w0, w9, w8
    e01c:	ret
    e020:	stp	x29, x30, [sp, #-48]!
    e024:	stp	x20, x19, [sp, #32]
    e028:	ldr	x8, [x0, #48]
    e02c:	mov	x20, x1
    e030:	mov	x1, x2
    e034:	str	x21, [sp, #16]
    e038:	mov	x29, sp
    e03c:	mov	x21, x2
    e040:	mov	x19, x0
    e044:	blr	x8
    e048:	cbz	w0, e0d0 <lzma_mf_is_supported@@XZ_5.0+0xdc>
    e04c:	sub	w10, w0, #0x1
    e050:	lsl	x8, x10, #3
    e054:	ldr	w8, [x21, x8]
    e058:	ldr	w9, [x19, #96]
    e05c:	cmp	w8, w9
    e060:	b.ne	e0d4 <lzma_mf_is_supported@@XZ_5.0+0xe0>  // b.any
    e064:	ldr	w11, [x19, #24]
    e068:	ldr	w9, [x19, #36]
    e06c:	ldr	w12, [x19, #100]
    e070:	sub	w9, w9, w11
    e074:	add	w13, w9, #0x1
    e078:	cmp	w13, w12
    e07c:	csinc	w9, w12, w9, hi  // hi = pmore
    e080:	cmp	w8, w9
    e084:	b.cs	e0d4 <lzma_mf_is_supported@@XZ_5.0+0xe0>  // b.hs, b.nlast
    e088:	add	x10, x21, x10, lsl #3
    e08c:	ldr	x13, [x19]
    e090:	ldr	w14, [x10, #4]
    e094:	mov	w12, w9
    e098:	add	x10, x13, x11
    e09c:	sub	x11, x11, x14
    e0a0:	add	x11, x13, x11
    e0a4:	add	x13, x10, x8
    e0a8:	add	x14, x11, x8
    e0ac:	ldurb	w13, [x13, #-1]
    e0b0:	ldurb	w14, [x14, #-2]
    e0b4:	cmp	w13, w14
    e0b8:	b.ne	e0d4 <lzma_mf_is_supported@@XZ_5.0+0xe0>  // b.any
    e0bc:	add	x8, x8, #0x1
    e0c0:	cmp	w12, w8
    e0c4:	b.ne	e0a4 <lzma_mf_is_supported@@XZ_5.0+0xb0>  // b.any
    e0c8:	mov	w8, w9
    e0cc:	b	e0d4 <lzma_mf_is_supported@@XZ_5.0+0xe0>
    e0d0:	mov	w8, wzr
    e0d4:	str	w0, [x20]
    e0d8:	ldr	w9, [x19, #28]
    e0dc:	ldr	x21, [sp, #16]
    e0e0:	mov	w0, w8
    e0e4:	add	w9, w9, #0x1
    e0e8:	str	w9, [x19, #28]
    e0ec:	ldp	x20, x19, [sp, #32]
    e0f0:	ldp	x29, x30, [sp], #48
    e0f4:	ret
    e0f8:	sub	sp, sp, #0x30
    e0fc:	stp	x29, x30, [sp, #16]
    e100:	stp	x20, x19, [sp, #32]
    e104:	ldr	w9, [x0, #24]
    e108:	ldr	w8, [x0, #36]
    e10c:	mov	x19, x0
    e110:	ldr	w0, [x0, #96]
    e114:	mov	x20, x1
    e118:	sub	w8, w8, w9
    e11c:	add	x29, sp, #0x10
    e120:	cmp	w0, w8
    e124:	b.ls	e15c <lzma_mf_is_supported@@XZ_5.0+0x168>  // b.plast
    e128:	cmp	w8, #0x2
    e12c:	mov	w0, w8
    e130:	b.hi	e15c <lzma_mf_is_supported@@XZ_5.0+0x168>  // b.pmore
    e134:	ldr	w8, [x19, #40]
    e138:	add	w9, w9, #0x1
    e13c:	mov	w0, wzr
    e140:	str	w9, [x19, #24]
    e144:	add	w8, w8, #0x1
    e148:	str	w8, [x19, #40]
    e14c:	ldp	x20, x19, [sp, #32]
    e150:	ldp	x29, x30, [sp, #16]
    e154:	add	sp, sp, #0x30
    e158:	ret
    e15c:	ldr	x11, [x19]
    e160:	adrp	x12, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    e164:	ldr	w10, [x19, #20]
    e168:	add	x2, x11, x9
    e16c:	ldrb	w8, [x2]
    e170:	ldr	x12, [x12, #3952]
    e174:	ldrb	w14, [x2, #1]
    e178:	ldrb	w15, [x2, #2]
    e17c:	ldr	w13, [x19, #88]
    e180:	ldr	w12, [x12, x8, lsl #2]
    e184:	add	w1, w10, w9
    e188:	ldr	x8, [x19, #64]
    e18c:	eor	w10, w12, w14
    e190:	and	w12, w10, #0x3ff
    e194:	eor	w10, w10, w15, lsl #8
    e198:	and	w10, w10, w13
    e19c:	add	w10, w10, #0x400
    e1a0:	lsl	x12, x12, #2
    e1a4:	lsl	x10, x10, #2
    e1a8:	ldr	w13, [x8, x12]
    e1ac:	ldr	w3, [x8, x10]
    e1b0:	str	w1, [x8, x12]
    e1b4:	str	w1, [x8, x10]
    e1b8:	ldr	w7, [x19, #84]
    e1bc:	sub	w10, w1, w13
    e1c0:	cmp	w10, w7
    e1c4:	b.cs	e228 <lzma_mf_is_supported@@XZ_5.0+0x234>  // b.hs, b.nlast
    e1c8:	mov	w13, w10
    e1cc:	sub	x12, x2, x13
    e1d0:	ldrb	w12, [x12]
    e1d4:	ldrb	w14, [x2]
    e1d8:	cmp	w12, w14
    e1dc:	b.ne	e228 <lzma_mf_is_supported@@XZ_5.0+0x234>  // b.any
    e1e0:	cmp	w0, #0x3
    e1e4:	b.cc	e308 <lzma_mf_is_supported@@XZ_5.0+0x314>  // b.lo, b.ul, b.last
    e1e8:	add	x9, x9, x11
    e1ec:	neg	x14, x13
    e1f0:	add	x9, x9, #0x2
    e1f4:	mov	x12, xzr
    e1f8:	sub	w13, w0, #0x2
    e1fc:	add	x11, x9, x14
    e200:	ldrb	w14, [x11, x12]
    e204:	ldrb	w15, [x9, x12]
    e208:	cmp	w14, w15
    e20c:	b.ne	e368 <lzma_mf_is_supported@@XZ_5.0+0x374>  // b.any
    e210:	add	x12, x12, #0x1
    e214:	cmp	w13, w12
    e218:	b.ne	e200 <lzma_mf_is_supported@@XZ_5.0+0x20c>  // b.any
    e21c:	sub	w9, w10, #0x1
    e220:	stp	w0, w9, [x20]
    e224:	b	e31c <lzma_mf_is_supported@@XZ_5.0+0x328>
    e228:	mov	x8, xzr
    e22c:	mov	w9, #0x2                   	// #2
    e230:	ldr	w4, [x19, #92]
    e234:	ldr	x5, [x19, #72]
    e238:	ldr	w6, [x19, #80]
    e23c:	add	x8, x20, x8, lsl #3
    e240:	str	w9, [sp, #8]
    e244:	str	x8, [sp]
    e248:	bl	e3f8 <lzma_mf_is_supported@@XZ_5.0+0x404>
    e24c:	ldp	w10, w8, [x19, #80]
    e250:	ldp	w12, w11, [x19, #20]
    e254:	sub	x9, x0, x20
    e258:	lsr	x0, x9, #3
    e25c:	add	w9, w10, #0x1
    e260:	add	w11, w11, #0x1
    e264:	cmp	w9, w8
    e268:	add	w9, w12, w11
    e26c:	csinc	w10, wzr, w10, eq  // eq = none
    e270:	cmn	w9, #0x1
    e274:	str	w10, [x19, #80]
    e278:	str	w11, [x19, #24]
    e27c:	b.ne	e14c <lzma_mf_is_supported@@XZ_5.0+0x158>  // b.any
    e280:	ldr	w9, [x19, #108]
    e284:	mvn	w8, w8
    e288:	cbz	w9, e2b8 <lzma_mf_is_supported@@XZ_5.0+0x2c4>
    e28c:	ldr	x9, [x19, #64]
    e290:	mov	x10, xzr
    e294:	lsl	x11, x10, #2
    e298:	ldr	w12, [x9, x11]
    e29c:	add	x10, x10, #0x1
    e2a0:	subs	w12, w12, w8
    e2a4:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    e2a8:	str	w12, [x9, x11]
    e2ac:	ldr	w11, [x19, #108]
    e2b0:	cmp	x10, x11
    e2b4:	b.cc	e294 <lzma_mf_is_supported@@XZ_5.0+0x2a0>  // b.lo, b.ul, b.last
    e2b8:	ldr	w9, [x19, #112]
    e2bc:	cbz	w9, e2ec <lzma_mf_is_supported@@XZ_5.0+0x2f8>
    e2c0:	ldr	x9, [x19, #72]
    e2c4:	mov	x10, xzr
    e2c8:	lsl	x11, x10, #2
    e2cc:	ldr	w12, [x9, x11]
    e2d0:	add	x10, x10, #0x1
    e2d4:	subs	w12, w12, w8
    e2d8:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    e2dc:	str	w12, [x9, x11]
    e2e0:	ldr	w11, [x19, #112]
    e2e4:	cmp	x10, x11
    e2e8:	b.cc	e2c8 <lzma_mf_is_supported@@XZ_5.0+0x2d4>  // b.lo, b.ul, b.last
    e2ec:	ldr	w9, [x19, #20]
    e2f0:	sub	w8, w9, w8
    e2f4:	str	w8, [x19, #20]
    e2f8:	ldp	x20, x19, [sp, #32]
    e2fc:	ldp	x29, x30, [sp, #16]
    e300:	add	sp, sp, #0x30
    e304:	ret
    e308:	mov	w9, #0x2                   	// #2
    e30c:	sub	w10, w10, #0x1
    e310:	cmp	w9, w0
    e314:	stp	w9, w10, [x20]
    e318:	b.ne	e37c <lzma_mf_is_supported@@XZ_5.0+0x388>  // b.any
    e31c:	ldr	x9, [x19, #72]
    e320:	ldr	w10, [x19, #80]
    e324:	str	w3, [x9, x10, lsl #2]
    e328:	ldp	w11, w10, [x19, #80]
    e32c:	ldp	w13, w12, [x19, #20]
    e330:	add	w14, w11, #0x1
    e334:	add	w12, w12, #0x1
    e338:	cmp	w14, w10
    e33c:	add	w13, w13, w12
    e340:	csinc	w11, wzr, w11, eq  // eq = none
    e344:	cmn	w13, #0x1
    e348:	str	w11, [x19, #80]
    e34c:	str	w12, [x19, #24]
    e350:	b.eq	e384 <lzma_mf_is_supported@@XZ_5.0+0x390>  // b.none
    e354:	mov	w0, #0x1                   	// #1
    e358:	ldp	x20, x19, [sp, #32]
    e35c:	ldp	x29, x30, [sp, #16]
    e360:	add	sp, sp, #0x30
    e364:	ret
    e368:	add	w9, w12, #0x2
    e36c:	sub	w10, w10, #0x1
    e370:	cmp	w9, w0
    e374:	stp	w9, w10, [x20]
    e378:	b.eq	e31c <lzma_mf_is_supported@@XZ_5.0+0x328>  // b.none
    e37c:	mov	w8, #0x1                   	// #1
    e380:	b	e230 <lzma_mf_is_supported@@XZ_5.0+0x23c>
    e384:	ldr	w11, [x19, #108]
    e388:	mvn	w10, w10
    e38c:	cbz	w11, e3b8 <lzma_mf_is_supported@@XZ_5.0+0x3c4>
    e390:	mov	x11, xzr
    e394:	lsl	x12, x11, #2
    e398:	ldr	w13, [x8, x12]
    e39c:	add	x11, x11, #0x1
    e3a0:	subs	w13, w13, w10
    e3a4:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    e3a8:	str	w13, [x8, x12]
    e3ac:	ldr	w12, [x19, #108]
    e3b0:	cmp	x11, x12
    e3b4:	b.cc	e394 <lzma_mf_is_supported@@XZ_5.0+0x3a0>  // b.lo, b.ul, b.last
    e3b8:	ldr	w8, [x19, #112]
    e3bc:	cbz	w8, e3e8 <lzma_mf_is_supported@@XZ_5.0+0x3f4>
    e3c0:	mov	x8, xzr
    e3c4:	lsl	x11, x8, #2
    e3c8:	ldr	w12, [x9, x11]
    e3cc:	add	x8, x8, #0x1
    e3d0:	subs	w12, w12, w10
    e3d4:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    e3d8:	str	w12, [x9, x11]
    e3dc:	ldr	w11, [x19, #112]
    e3e0:	cmp	x8, x11
    e3e4:	b.cc	e3c4 <lzma_mf_is_supported@@XZ_5.0+0x3d0>  // b.lo, b.ul, b.last
    e3e8:	ldr	w8, [x19, #20]
    e3ec:	sub	w8, w8, w10
    e3f0:	str	w8, [x19, #20]
    e3f4:	b	e354 <lzma_mf_is_supported@@XZ_5.0+0x360>
    e3f8:	mov	w8, w0
    e3fc:	ldr	x0, [sp]
    e400:	subs	w9, w4, #0x1
    e404:	str	w3, [x5, w6, uxtw #2]
    e408:	b.cc	e540 <lzma_mf_is_supported@@XZ_5.0+0x54c>  // b.lo, b.ul, b.last
    e40c:	sub	w11, w1, w3
    e410:	cmp	w11, w7
    e414:	b.cs	e540 <lzma_mf_is_supported@@XZ_5.0+0x54c>  // b.hs, b.nlast
    e418:	ldr	w10, [sp, #8]
    e41c:	cmp	w8, #0x2
    e420:	b.cc	e4dc <lzma_mf_is_supported@@XZ_5.0+0x4e8>  // b.lo, b.ul, b.last
    e424:	mov	w12, w8
    e428:	mov	w14, w11
    e42c:	subs	w13, w6, w11
    e430:	mov	w16, w10
    e434:	sub	x15, x2, x14
    e438:	csel	w17, w7, wzr, cc  // cc = lo, ul, last
    e43c:	ldrb	w18, [x15, x16]
    e440:	ldrb	w16, [x2, x16]
    e444:	add	w13, w13, w17
    e448:	ldr	w13, [x5, w13, uxtw #2]
    e44c:	cmp	w18, w16
    e450:	b.ne	e4ac <lzma_mf_is_supported@@XZ_5.0+0x4b8>  // b.any
    e454:	ldrb	w15, [x15]
    e458:	ldrb	w16, [x2]
    e45c:	cmp	w15, w16
    e460:	b.ne	e4bc <lzma_mf_is_supported@@XZ_5.0+0x4c8>  // b.any
    e464:	neg	x14, x14
    e468:	add	x15, x2, x14
    e46c:	mov	w14, #0x1                   	// #1
    e470:	ldrb	w16, [x15, x14]
    e474:	ldrb	w17, [x2, x14]
    e478:	cmp	w16, w17
    e47c:	b.ne	e490 <lzma_mf_is_supported@@XZ_5.0+0x49c>  // b.any
    e480:	add	x14, x14, #0x1
    e484:	cmp	w12, w14
    e488:	b.ne	e470 <lzma_mf_is_supported@@XZ_5.0+0x47c>  // b.any
    e48c:	mov	w14, w12
    e490:	cmp	w10, w14
    e494:	b.cs	e4ac <lzma_mf_is_supported@@XZ_5.0+0x4b8>  // b.hs, b.nlast
    e498:	sub	w10, w11, #0x1
    e49c:	cmp	w14, w8
    e4a0:	stp	w14, w10, [x0], #8
    e4a4:	b.ne	e4c0 <lzma_mf_is_supported@@XZ_5.0+0x4cc>  // b.any
    e4a8:	b	e540 <lzma_mf_is_supported@@XZ_5.0+0x54c>
    e4ac:	mov	w14, w10
    e4b0:	subs	w9, w9, #0x1
    e4b4:	b.cs	e4c8 <lzma_mf_is_supported@@XZ_5.0+0x4d4>  // b.hs, b.nlast
    e4b8:	b	e540 <lzma_mf_is_supported@@XZ_5.0+0x54c>
    e4bc:	mov	w14, w10
    e4c0:	subs	w9, w9, #0x1
    e4c4:	b.cc	e540 <lzma_mf_is_supported@@XZ_5.0+0x54c>  // b.lo, b.ul, b.last
    e4c8:	sub	w11, w1, w13
    e4cc:	cmp	w11, w7
    e4d0:	mov	w10, w14
    e4d4:	b.cc	e428 <lzma_mf_is_supported@@XZ_5.0+0x434>  // b.lo, b.ul, b.last
    e4d8:	b	e540 <lzma_mf_is_supported@@XZ_5.0+0x54c>
    e4dc:	subs	w12, w6, w11
    e4e0:	sub	x13, x2, w11, uxtw
    e4e4:	mov	w14, w10
    e4e8:	csel	w15, w7, wzr, cc  // cc = lo, ul, last
    e4ec:	ldrb	w16, [x13, x14]
    e4f0:	ldrb	w14, [x2, x14]
    e4f4:	add	w12, w12, w15
    e4f8:	ldr	w12, [x5, w12, uxtw #2]
    e4fc:	cmp	w16, w14
    e500:	b.ne	e52c <lzma_mf_is_supported@@XZ_5.0+0x538>  // b.any
    e504:	ldrb	w13, [x13]
    e508:	ldrb	w14, [x2]
    e50c:	cmp	w13, w14
    e510:	b.ne	e52c <lzma_mf_is_supported@@XZ_5.0+0x538>  // b.any
    e514:	cbnz	w10, e52c <lzma_mf_is_supported@@XZ_5.0+0x538>
    e518:	mov	w10, #0x1                   	// #1
    e51c:	sub	w11, w11, #0x1
    e520:	cmp	w8, #0x1
    e524:	stp	w10, w11, [x0], #8
    e528:	b.eq	e540 <lzma_mf_is_supported@@XZ_5.0+0x54c>  // b.none
    e52c:	subs	w9, w9, #0x1
    e530:	b.cc	e540 <lzma_mf_is_supported@@XZ_5.0+0x54c>  // b.lo, b.ul, b.last
    e534:	sub	w11, w1, w12
    e538:	cmp	w11, w7
    e53c:	b.cc	e4dc <lzma_mf_is_supported@@XZ_5.0+0x4e8>  // b.lo, b.ul, b.last
    e540:	ret
    e544:	adrp	x8, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    e548:	ldr	x8, [x8, #3952]
    e54c:	b	e56c <lzma_mf_is_supported@@XZ_5.0+0x578>
    e550:	ldr	w10, [x0, #40]
    e554:	add	w9, w9, #0x1
    e558:	str	w9, [x0, #24]
    e55c:	add	w9, w10, #0x1
    e560:	str	w9, [x0, #40]
    e564:	subs	w1, w1, #0x1
    e568:	b.eq	e678 <lzma_mf_is_supported@@XZ_5.0+0x684>  // b.none
    e56c:	ldr	w9, [x0, #24]
    e570:	ldr	w10, [x0, #36]
    e574:	sub	w10, w10, w9
    e578:	cmp	w10, #0x2
    e57c:	b.ls	e550 <lzma_mf_is_supported@@XZ_5.0+0x55c>  // b.plast
    e580:	ldr	x10, [x0]
    e584:	ldr	w12, [x0, #20]
    e588:	ldr	w13, [x0, #88]
    e58c:	add	x11, x10, x9
    e590:	ldrb	w10, [x11]
    e594:	ldrb	w14, [x11, #1]
    e598:	ldrb	w11, [x11, #2]
    e59c:	add	w9, w12, w9
    e5a0:	ldr	w15, [x8, x10, lsl #2]
    e5a4:	ldr	x10, [x0, #64]
    e5a8:	eor	w12, w15, w14
    e5ac:	eor	w11, w12, w11, lsl #8
    e5b0:	and	w11, w11, w13
    e5b4:	add	w11, w11, #0x400
    e5b8:	and	w14, w12, #0x3ff
    e5bc:	lsl	x11, x11, #2
    e5c0:	ldr	w12, [x10, x11]
    e5c4:	str	w9, [x10, w14, uxtw #2]
    e5c8:	str	w9, [x10, x11]
    e5cc:	ldr	x9, [x0, #72]
    e5d0:	ldr	w11, [x0, #80]
    e5d4:	str	w12, [x9, x11, lsl #2]
    e5d8:	ldp	w12, w11, [x0, #80]
    e5dc:	ldp	w14, w13, [x0, #20]
    e5e0:	add	w15, w12, #0x1
    e5e4:	add	w13, w13, #0x1
    e5e8:	cmp	w15, w11
    e5ec:	add	w14, w14, w13
    e5f0:	csinc	w12, wzr, w12, eq  // eq = none
    e5f4:	cmn	w14, #0x1
    e5f8:	str	w12, [x0, #80]
    e5fc:	str	w13, [x0, #24]
    e600:	b.ne	e564 <lzma_mf_is_supported@@XZ_5.0+0x570>  // b.any
    e604:	ldr	w12, [x0, #108]
    e608:	mvn	w11, w11
    e60c:	cbz	w12, e638 <lzma_mf_is_supported@@XZ_5.0+0x644>
    e610:	mov	x12, xzr
    e614:	lsl	x13, x12, #2
    e618:	ldr	w14, [x10, x13]
    e61c:	add	x12, x12, #0x1
    e620:	subs	w14, w14, w11
    e624:	csel	w14, wzr, w14, cc  // cc = lo, ul, last
    e628:	str	w14, [x10, x13]
    e62c:	ldr	w13, [x0, #108]
    e630:	cmp	x12, x13
    e634:	b.cc	e614 <lzma_mf_is_supported@@XZ_5.0+0x620>  // b.lo, b.ul, b.last
    e638:	ldr	w10, [x0, #112]
    e63c:	cbz	w10, e668 <lzma_mf_is_supported@@XZ_5.0+0x674>
    e640:	mov	x10, xzr
    e644:	lsl	x12, x10, #2
    e648:	ldr	w13, [x9, x12]
    e64c:	add	x10, x10, #0x1
    e650:	subs	w13, w13, w11
    e654:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    e658:	str	w13, [x9, x12]
    e65c:	ldr	w12, [x0, #112]
    e660:	cmp	x10, x12
    e664:	b.cc	e644 <lzma_mf_is_supported@@XZ_5.0+0x650>  // b.lo, b.ul, b.last
    e668:	ldr	w9, [x0, #20]
    e66c:	sub	w9, w9, w11
    e670:	str	w9, [x0, #20]
    e674:	b	e564 <lzma_mf_is_supported@@XZ_5.0+0x570>
    e678:	ret
    e67c:	sub	sp, sp, #0x30
    e680:	stp	x29, x30, [sp, #16]
    e684:	stp	x20, x19, [sp, #32]
    e688:	ldr	w10, [x0, #24]
    e68c:	ldr	w9, [x0, #36]
    e690:	ldr	w8, [x0, #96]
    e694:	mov	x19, x0
    e698:	mov	x20, x1
    e69c:	sub	w9, w9, w10
    e6a0:	cmp	w8, w9
    e6a4:	add	x29, sp, #0x10
    e6a8:	b.ls	e6e0 <lzma_mf_is_supported@@XZ_5.0+0x6ec>  // b.plast
    e6ac:	cmp	w9, #0x3
    e6b0:	mov	w8, w9
    e6b4:	b.hi	e6e0 <lzma_mf_is_supported@@XZ_5.0+0x6ec>  // b.pmore
    e6b8:	ldr	w8, [x19, #40]
    e6bc:	add	w9, w10, #0x1
    e6c0:	mov	w0, wzr
    e6c4:	str	w9, [x19, #24]
    e6c8:	add	w8, w8, #0x1
    e6cc:	str	w8, [x19, #40]
    e6d0:	ldp	x20, x19, [sp, #32]
    e6d4:	ldp	x29, x30, [sp, #16]
    e6d8:	add	sp, sp, #0x30
    e6dc:	ret
    e6e0:	ldr	x11, [x19]
    e6e4:	adrp	x13, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    e6e8:	ldr	w12, [x19, #20]
    e6ec:	ldr	x13, [x13, #3952]
    e6f0:	add	x2, x11, x10
    e6f4:	ldrb	w15, [x2]
    e6f8:	ldrb	w18, [x2, #3]
    e6fc:	ldrb	w16, [x2, #1]
    e700:	add	w1, w12, w10
    e704:	ldr	w15, [x13, x15, lsl #2]
    e708:	ldrb	w12, [x2, #2]
    e70c:	ldr	w13, [x13, x18, lsl #2]
    e710:	ldr	w14, [x19, #88]
    e714:	eor	w15, w15, w16
    e718:	eor	w12, w15, w12, lsl #8
    e71c:	ldr	x9, [x19, #64]
    e720:	mov	w17, #0x400                 	// #1024
    e724:	and	w16, w15, #0x3ff
    e728:	and	w15, w12, #0xffff
    e72c:	eor	w12, w12, w13, lsl #5
    e730:	movk	w17, #0x1, lsl #16
    e734:	and	w12, w12, w14
    e738:	add	w14, w15, #0x400
    e73c:	add	w12, w12, w17
    e740:	lsl	x13, x16, #2
    e744:	lsl	x14, x14, #2
    e748:	lsl	x12, x12, #2
    e74c:	ldr	w16, [x9, x13]
    e750:	ldr	w15, [x9, x14]
    e754:	ldr	w3, [x9, x12]
    e758:	str	w1, [x9, x13]
    e75c:	str	w1, [x9, x14]
    e760:	str	w1, [x9, x12]
    e764:	ldr	w7, [x19, #84]
    e768:	sub	w13, w1, w16
    e76c:	cmp	w13, w7
    e770:	b.cs	e7a4 <lzma_mf_is_supported@@XZ_5.0+0x7b0>  // b.hs, b.nlast
    e774:	sub	x12, x2, w13, uxtw
    e778:	ldrb	w12, [x12]
    e77c:	ldrb	w14, [x2]
    e780:	cmp	w12, w14
    e784:	b.ne	e7a4 <lzma_mf_is_supported@@XZ_5.0+0x7b0>  // b.any
    e788:	mov	w12, #0x2                   	// #2
    e78c:	sub	w14, w13, #0x1
    e790:	stp	w12, w14, [x20]
    e794:	mov	w14, #0x1                   	// #1
    e798:	cmp	w15, w16
    e79c:	b.ne	e7b4 <lzma_mf_is_supported@@XZ_5.0+0x7c0>  // b.any
    e7a0:	b	e7fc <lzma_mf_is_supported@@XZ_5.0+0x808>
    e7a4:	mov	w14, wzr
    e7a8:	mov	w12, #0x1                   	// #1
    e7ac:	cmp	w15, w16
    e7b0:	b.eq	e7fc <lzma_mf_is_supported@@XZ_5.0+0x808>  // b.none
    e7b4:	sub	w15, w1, w15
    e7b8:	cmp	w15, w7
    e7bc:	b.cs	e7fc <lzma_mf_is_supported@@XZ_5.0+0x808>  // b.hs, b.nlast
    e7c0:	mov	w16, w15
    e7c4:	sub	x17, x2, x16
    e7c8:	ldrb	w17, [x17]
    e7cc:	ldrb	w18, [x2]
    e7d0:	cmp	w17, w18
    e7d4:	b.ne	e7fc <lzma_mf_is_supported@@XZ_5.0+0x808>  // b.any
    e7d8:	sub	w12, w15, #0x1
    e7dc:	add	w0, w14, #0x1
    e7e0:	add	x14, x20, w14, uxtw #3
    e7e4:	neg	x13, x16
    e7e8:	str	w12, [x14, #4]
    e7ec:	mov	w12, #0x3                   	// #3
    e7f0:	cmp	w12, w8
    e7f4:	b.cs	e84c <lzma_mf_is_supported@@XZ_5.0+0x858>  // b.hs, b.nlast
    e7f8:	b	e814 <lzma_mf_is_supported@@XZ_5.0+0x820>
    e7fc:	cbz	w14, e908 <lzma_mf_is_supported@@XZ_5.0+0x914>
    e800:	mov	x14, xzr
    e804:	sub	x13, x14, w13, uxtw
    e808:	mov	w0, #0x1                   	// #1
    e80c:	cmp	w12, w8
    e810:	b.cs	e84c <lzma_mf_is_supported@@XZ_5.0+0x858>  // b.hs, b.nlast
    e814:	add	x10, x12, x10
    e818:	add	x10, x11, x10
    e81c:	ldrb	w11, [x10, x13]
    e820:	ldrb	w14, [x10]
    e824:	cmp	w11, w14
    e828:	b.ne	e84c <lzma_mf_is_supported@@XZ_5.0+0x858>  // b.any
    e82c:	add	w12, w12, #0x1
    e830:	cmp	w8, w12
    e834:	add	x10, x10, #0x1
    e838:	b.ne	e81c <lzma_mf_is_supported@@XZ_5.0+0x828>  // b.any
    e83c:	sub	w10, w0, #0x1
    e840:	lsl	x10, x10, #3
    e844:	str	w8, [x20, x10]
    e848:	b	e860 <lzma_mf_is_supported@@XZ_5.0+0x86c>
    e84c:	sub	w10, w0, #0x1
    e850:	lsl	x10, x10, #3
    e854:	cmp	w12, w8
    e858:	str	w12, [x20, x10]
    e85c:	b.ne	e90c <lzma_mf_is_supported@@XZ_5.0+0x918>  // b.any
    e860:	ldr	x8, [x19, #72]
    e864:	ldr	w10, [x19, #80]
    e868:	str	w3, [x8, x10, lsl #2]
    e86c:	ldp	w11, w10, [x19, #80]
    e870:	ldp	w13, w12, [x19, #20]
    e874:	add	w14, w11, #0x1
    e878:	add	w12, w12, #0x1
    e87c:	cmp	w14, w10
    e880:	add	w13, w13, w12
    e884:	csinc	w11, wzr, w11, eq  // eq = none
    e888:	cmn	w13, #0x1
    e88c:	str	w11, [x19, #80]
    e890:	str	w12, [x19, #24]
    e894:	b.ne	e6d0 <lzma_mf_is_supported@@XZ_5.0+0x6dc>  // b.any
    e898:	ldr	w11, [x19, #108]
    e89c:	mvn	w10, w10
    e8a0:	cbz	w11, e8cc <lzma_mf_is_supported@@XZ_5.0+0x8d8>
    e8a4:	mov	x11, xzr
    e8a8:	lsl	x12, x11, #2
    e8ac:	ldr	w13, [x9, x12]
    e8b0:	add	x11, x11, #0x1
    e8b4:	subs	w13, w13, w10
    e8b8:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    e8bc:	str	w13, [x9, x12]
    e8c0:	ldr	w12, [x19, #108]
    e8c4:	cmp	x11, x12
    e8c8:	b.cc	e8a8 <lzma_mf_is_supported@@XZ_5.0+0x8b4>  // b.lo, b.ul, b.last
    e8cc:	ldr	w9, [x19, #112]
    e8d0:	cbz	w9, e8fc <lzma_mf_is_supported@@XZ_5.0+0x908>
    e8d4:	mov	x9, xzr
    e8d8:	lsl	x11, x9, #2
    e8dc:	ldr	w12, [x8, x11]
    e8e0:	add	x9, x9, #0x1
    e8e4:	subs	w12, w12, w10
    e8e8:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    e8ec:	str	w12, [x8, x11]
    e8f0:	ldr	w11, [x19, #112]
    e8f4:	cmp	x9, x11
    e8f8:	b.cc	e8d8 <lzma_mf_is_supported@@XZ_5.0+0x8e4>  // b.lo, b.ul, b.last
    e8fc:	ldr	w8, [x19, #20]
    e900:	sub	w8, w8, w10
    e904:	b	e9e0 <lzma_mf_is_supported@@XZ_5.0+0x9ec>
    e908:	mov	w0, wzr
    e90c:	ldr	w4, [x19, #92]
    e910:	ldr	x5, [x19, #72]
    e914:	ldr	w6, [x19, #80]
    e918:	cmp	w12, #0x3
    e91c:	mov	w9, #0x3                   	// #3
    e920:	csel	w9, w12, w9, hi  // hi = pmore
    e924:	add	x10, x20, w0, uxtw #3
    e928:	mov	w0, w8
    e92c:	str	w9, [sp, #8]
    e930:	str	x10, [sp]
    e934:	bl	e3f8 <lzma_mf_is_supported@@XZ_5.0+0x404>
    e938:	ldp	w10, w8, [x19, #80]
    e93c:	ldp	w12, w11, [x19, #20]
    e940:	sub	x9, x0, x20
    e944:	lsr	x0, x9, #3
    e948:	add	w9, w10, #0x1
    e94c:	add	w11, w11, #0x1
    e950:	cmp	w9, w8
    e954:	add	w9, w12, w11
    e958:	csinc	w10, wzr, w10, eq  // eq = none
    e95c:	cmn	w9, #0x1
    e960:	str	w10, [x19, #80]
    e964:	str	w11, [x19, #24]
    e968:	b.ne	e6d0 <lzma_mf_is_supported@@XZ_5.0+0x6dc>  // b.any
    e96c:	ldr	w9, [x19, #108]
    e970:	mvn	w8, w8
    e974:	cbz	w9, e9a4 <lzma_mf_is_supported@@XZ_5.0+0x9b0>
    e978:	ldr	x9, [x19, #64]
    e97c:	mov	x10, xzr
    e980:	lsl	x11, x10, #2
    e984:	ldr	w12, [x9, x11]
    e988:	add	x10, x10, #0x1
    e98c:	subs	w12, w12, w8
    e990:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    e994:	str	w12, [x9, x11]
    e998:	ldr	w11, [x19, #108]
    e99c:	cmp	x10, x11
    e9a0:	b.cc	e980 <lzma_mf_is_supported@@XZ_5.0+0x98c>  // b.lo, b.ul, b.last
    e9a4:	ldr	w9, [x19, #112]
    e9a8:	cbz	w9, e9d8 <lzma_mf_is_supported@@XZ_5.0+0x9e4>
    e9ac:	ldr	x9, [x19, #72]
    e9b0:	mov	x10, xzr
    e9b4:	lsl	x11, x10, #2
    e9b8:	ldr	w12, [x9, x11]
    e9bc:	add	x10, x10, #0x1
    e9c0:	subs	w12, w12, w8
    e9c4:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    e9c8:	str	w12, [x9, x11]
    e9cc:	ldr	w11, [x19, #112]
    e9d0:	cmp	x10, x11
    e9d4:	b.cc	e9b4 <lzma_mf_is_supported@@XZ_5.0+0x9c0>  // b.lo, b.ul, b.last
    e9d8:	ldr	w9, [x19, #20]
    e9dc:	sub	w8, w9, w8
    e9e0:	str	w8, [x19, #20]
    e9e4:	ldp	x20, x19, [sp, #32]
    e9e8:	ldp	x29, x30, [sp, #16]
    e9ec:	add	sp, sp, #0x30
    e9f0:	ret
    e9f4:	adrp	x8, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    e9f8:	ldr	x8, [x8, #3952]
    e9fc:	mov	w9, #0x400                 	// #1024
    ea00:	movk	w9, #0x1, lsl #16
    ea04:	b	ea24 <lzma_mf_is_supported@@XZ_5.0+0xa30>
    ea08:	ldr	w11, [x0, #40]
    ea0c:	add	w10, w10, #0x1
    ea10:	str	w10, [x0, #24]
    ea14:	add	w10, w11, #0x1
    ea18:	str	w10, [x0, #40]
    ea1c:	subs	w1, w1, #0x1
    ea20:	b.eq	eb48 <lzma_mf_is_supported@@XZ_5.0+0xb54>  // b.none
    ea24:	ldr	w10, [x0, #24]
    ea28:	ldr	w11, [x0, #36]
    ea2c:	sub	w11, w11, w10
    ea30:	cmp	w11, #0x3
    ea34:	b.ls	ea08 <lzma_mf_is_supported@@XZ_5.0+0xa14>  // b.plast
    ea38:	ldr	x11, [x0]
    ea3c:	ldr	w12, [x0, #20]
    ea40:	ldr	w13, [x0, #88]
    ea44:	add	x14, x11, x10
    ea48:	ldrb	w11, [x14]
    ea4c:	ldrb	w15, [x14, #3]
    ea50:	add	w10, w12, w10
    ea54:	ldrb	w12, [x14, #1]
    ea58:	ldr	w16, [x8, x11, lsl #2]
    ea5c:	ldrb	w14, [x14, #2]
    ea60:	ldr	w15, [x8, x15, lsl #2]
    ea64:	ldr	x11, [x0, #64]
    ea68:	eor	w12, w16, w12
    ea6c:	and	w16, w12, #0x3ff
    ea70:	eor	w12, w12, w14, lsl #8
    ea74:	and	w14, w12, #0xffff
    ea78:	eor	w12, w12, w15, lsl #5
    ea7c:	and	w12, w12, w13
    ea80:	add	w12, w12, w9
    ea84:	add	w13, w14, #0x400
    ea88:	lsl	x12, x12, #2
    ea8c:	ldr	w14, [x11, x12]
    ea90:	str	w10, [x11, w16, uxtw #2]
    ea94:	str	w10, [x11, w13, uxtw #2]
    ea98:	str	w10, [x11, x12]
    ea9c:	ldr	x10, [x0, #72]
    eaa0:	ldr	w12, [x0, #80]
    eaa4:	str	w14, [x10, x12, lsl #2]
    eaa8:	ldp	w13, w12, [x0, #80]
    eaac:	ldp	w15, w14, [x0, #20]
    eab0:	add	w16, w13, #0x1
    eab4:	add	w14, w14, #0x1
    eab8:	cmp	w16, w12
    eabc:	add	w15, w15, w14
    eac0:	csinc	w13, wzr, w13, eq  // eq = none
    eac4:	cmn	w15, #0x1
    eac8:	str	w13, [x0, #80]
    eacc:	str	w14, [x0, #24]
    ead0:	b.ne	ea1c <lzma_mf_is_supported@@XZ_5.0+0xa28>  // b.any
    ead4:	ldr	w13, [x0, #108]
    ead8:	mvn	w12, w12
    eadc:	cbz	w13, eb08 <lzma_mf_is_supported@@XZ_5.0+0xb14>
    eae0:	mov	x13, xzr
    eae4:	lsl	x14, x13, #2
    eae8:	ldr	w15, [x11, x14]
    eaec:	add	x13, x13, #0x1
    eaf0:	subs	w15, w15, w12
    eaf4:	csel	w15, wzr, w15, cc  // cc = lo, ul, last
    eaf8:	str	w15, [x11, x14]
    eafc:	ldr	w14, [x0, #108]
    eb00:	cmp	x13, x14
    eb04:	b.cc	eae4 <lzma_mf_is_supported@@XZ_5.0+0xaf0>  // b.lo, b.ul, b.last
    eb08:	ldr	w11, [x0, #112]
    eb0c:	cbz	w11, eb38 <lzma_mf_is_supported@@XZ_5.0+0xb44>
    eb10:	mov	x11, xzr
    eb14:	lsl	x13, x11, #2
    eb18:	ldr	w14, [x10, x13]
    eb1c:	add	x11, x11, #0x1
    eb20:	subs	w14, w14, w12
    eb24:	csel	w14, wzr, w14, cc  // cc = lo, ul, last
    eb28:	str	w14, [x10, x13]
    eb2c:	ldr	w13, [x0, #112]
    eb30:	cmp	x11, x13
    eb34:	b.cc	eb14 <lzma_mf_is_supported@@XZ_5.0+0xb20>  // b.lo, b.ul, b.last
    eb38:	ldr	w10, [x0, #20]
    eb3c:	sub	w10, w10, w12
    eb40:	str	w10, [x0, #20]
    eb44:	b	ea1c <lzma_mf_is_supported@@XZ_5.0+0xa28>
    eb48:	ret
    eb4c:	str	x25, [sp, #-64]!
    eb50:	stp	x24, x23, [sp, #16]
    eb54:	stp	x22, x21, [sp, #32]
    eb58:	stp	x20, x19, [sp, #48]
    eb5c:	ldr	w15, [x0, #24]
    eb60:	ldr	w9, [x0, #36]
    eb64:	ldr	w8, [x0, #96]
    eb68:	sub	w9, w9, w15
    eb6c:	cmp	w8, w9
    eb70:	b.ls	eba8 <lzma_mf_is_supported@@XZ_5.0+0xbb4>  // b.plast
    eb74:	cmp	w9, #0x2
    eb78:	b.cc	eb8c <lzma_mf_is_supported@@XZ_5.0+0xb98>  // b.lo, b.ul, b.last
    eb7c:	ldr	w8, [x0, #104]
    eb80:	cmp	w8, #0x1
    eb84:	mov	w8, w9
    eb88:	b.ne	eba8 <lzma_mf_is_supported@@XZ_5.0+0xbb4>  // b.any
    eb8c:	ldr	w9, [x0, #40]
    eb90:	add	w10, w15, #0x1
    eb94:	mov	w8, wzr
    eb98:	str	w10, [x0, #24]
    eb9c:	add	w9, w9, #0x1
    eba0:	str	w9, [x0, #40]
    eba4:	b	ed30 <lzma_mf_is_supported@@XZ_5.0+0xd3c>
    eba8:	ldr	x3, [x0]
    ebac:	ldr	w9, [x0, #20]
    ebb0:	ldr	x10, [x0, #64]
    ebb4:	add	x13, x3, x15
    ebb8:	ldrb	w11, [x13]
    ebbc:	ldrb	w12, [x13, #1]
    ebc0:	add	w14, w9, w15
    ebc4:	lsl	x9, x11, #2
    ebc8:	bfi	x9, x12, #10, #8
    ebcc:	ldr	w4, [x10, x9]
    ebd0:	str	w14, [x10, x9]
    ebd4:	ldr	w16, [x0, #80]
    ebd8:	ldr	x9, [x0, #72]
    ebdc:	ldr	w17, [x0, #92]
    ebe0:	lsl	w11, w16, #1
    ebe4:	add	x11, x9, w11, uxtw #2
    ebe8:	add	x12, x11, #0x4
    ebec:	cbz	w17, ecf0 <lzma_mf_is_supported@@XZ_5.0+0xcfc>
    ebf0:	ldr	w18, [x0, #84]
    ebf4:	sub	w7, w14, w4
    ebf8:	cmp	w7, w18
    ebfc:	b.cs	ecf0 <lzma_mf_is_supported@@XZ_5.0+0xcfc>  // b.hs, b.nlast
    ec00:	mov	w5, wzr
    ec04:	mov	w2, wzr
    ec08:	add	x3, x3, x15
    ec0c:	mov	w6, #0x1                   	// #1
    ec10:	mov	x15, x1
    ec14:	subs	w19, w16, w7
    ec18:	mov	w22, w7
    ec1c:	csel	w23, w18, wzr, cc  // cc = lo, ul, last
    ec20:	cmp	w2, w5
    ec24:	sub	x21, x13, x22
    ec28:	csel	w20, w2, w5, cc  // cc = lo, ul, last
    ec2c:	ldrb	w24, [x21, x20]
    ec30:	ldrb	w25, [x13, x20]
    ec34:	add	w19, w19, w23
    ec38:	lsl	w19, w19, #1
    ec3c:	add	x19, x9, w19, uxtw #2
    ec40:	cmp	w24, w25
    ec44:	b.ne	ec9c <lzma_mf_is_supported@@XZ_5.0+0xca8>  // b.any
    ec48:	add	w20, w20, #0x1
    ec4c:	cmp	w20, w8
    ec50:	b.cs	ec80 <lzma_mf_is_supported@@XZ_5.0+0xc8c>  // b.hs, b.nlast
    ec54:	neg	x22, x22
    ec58:	add	x23, x3, w20, uxtw
    ec5c:	ldrb	w24, [x23, x22]
    ec60:	ldrb	w25, [x23]
    ec64:	cmp	w24, w25
    ec68:	b.ne	ec80 <lzma_mf_is_supported@@XZ_5.0+0xc8c>  // b.any
    ec6c:	add	w20, w20, #0x1
    ec70:	cmp	w8, w20
    ec74:	add	x23, x23, #0x1
    ec78:	b.ne	ec5c <lzma_mf_is_supported@@XZ_5.0+0xc68>  // b.any
    ec7c:	mov	w20, w8
    ec80:	cmp	w6, w20
    ec84:	b.cs	ec9c <lzma_mf_is_supported@@XZ_5.0+0xca8>  // b.hs, b.nlast
    ec88:	sub	w6, w7, #0x1
    ec8c:	cmp	w20, w8
    ec90:	stp	w20, w6, [x15], #8
    ec94:	b.eq	ed48 <lzma_mf_is_supported@@XZ_5.0+0xd54>  // b.none
    ec98:	mov	w6, w20
    ec9c:	mov	w7, w20
    eca0:	ldrb	w21, [x21, x7]
    eca4:	ldrb	w7, [x13, x7]
    eca8:	sub	w17, w17, #0x1
    ecac:	cmp	w21, w7
    ecb0:	b.cs	eccc <lzma_mf_is_supported@@XZ_5.0+0xcd8>  // b.hs, b.nlast
    ecb4:	str	w4, [x11]
    ecb8:	add	x11, x19, #0x4
    ecbc:	mov	w5, w20
    ecc0:	mov	x19, x11
    ecc4:	cbnz	w17, ecdc <lzma_mf_is_supported@@XZ_5.0+0xce8>
    ecc8:	b	ecf4 <lzma_mf_is_supported@@XZ_5.0+0xd00>
    eccc:	str	w4, [x12]
    ecd0:	mov	x12, x19
    ecd4:	mov	w2, w20
    ecd8:	cbz	w17, ecf4 <lzma_mf_is_supported@@XZ_5.0+0xd00>
    ecdc:	ldr	w4, [x19]
    ece0:	sub	w7, w14, w4
    ece4:	cmp	w7, w18
    ece8:	b.cc	ec14 <lzma_mf_is_supported@@XZ_5.0+0xc20>  // b.lo, b.ul, b.last
    ecec:	b	ecf4 <lzma_mf_is_supported@@XZ_5.0+0xd00>
    ecf0:	mov	x15, x1
    ecf4:	str	wzr, [x12]
    ecf8:	str	wzr, [x11]
    ecfc:	ldp	w12, w11, [x0, #80]
    ed00:	ldp	w14, w13, [x0, #20]
    ed04:	sub	x8, x15, x1
    ed08:	lsr	x8, x8, #3
    ed0c:	add	w15, w12, #0x1
    ed10:	add	w13, w13, #0x1
    ed14:	cmp	w15, w11
    ed18:	add	w14, w14, w13
    ed1c:	csinc	w12, wzr, w12, eq  // eq = none
    ed20:	cmn	w14, #0x1
    ed24:	str	w12, [x0, #80]
    ed28:	str	w13, [x0, #24]
    ed2c:	b.eq	ed5c <lzma_mf_is_supported@@XZ_5.0+0xd68>  // b.none
    ed30:	ldp	x20, x19, [sp, #48]
    ed34:	ldp	x22, x21, [sp, #32]
    ed38:	ldp	x24, x23, [sp, #16]
    ed3c:	mov	w0, w8
    ed40:	ldr	x25, [sp], #64
    ed44:	ret
    ed48:	ldr	w8, [x19]
    ed4c:	str	w8, [x11]
    ed50:	ldr	w8, [x19, #4]
    ed54:	str	w8, [x12]
    ed58:	b	ecfc <lzma_mf_is_supported@@XZ_5.0+0xd08>
    ed5c:	ldr	w12, [x0, #108]
    ed60:	mvn	w11, w11
    ed64:	cbz	w12, ed90 <lzma_mf_is_supported@@XZ_5.0+0xd9c>
    ed68:	mov	x12, xzr
    ed6c:	lsl	x13, x12, #2
    ed70:	ldr	w14, [x10, x13]
    ed74:	add	x12, x12, #0x1
    ed78:	subs	w14, w14, w11
    ed7c:	csel	w14, wzr, w14, cc  // cc = lo, ul, last
    ed80:	str	w14, [x10, x13]
    ed84:	ldr	w13, [x0, #108]
    ed88:	cmp	x12, x13
    ed8c:	b.cc	ed6c <lzma_mf_is_supported@@XZ_5.0+0xd78>  // b.lo, b.ul, b.last
    ed90:	ldr	w10, [x0, #112]
    ed94:	cbz	w10, edc0 <lzma_mf_is_supported@@XZ_5.0+0xdcc>
    ed98:	mov	x10, xzr
    ed9c:	lsl	x12, x10, #2
    eda0:	ldr	w13, [x9, x12]
    eda4:	add	x10, x10, #0x1
    eda8:	subs	w13, w13, w11
    edac:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    edb0:	str	w13, [x9, x12]
    edb4:	ldr	w12, [x0, #112]
    edb8:	cmp	x10, x12
    edbc:	b.cc	ed9c <lzma_mf_is_supported@@XZ_5.0+0xda8>  // b.lo, b.ul, b.last
    edc0:	ldr	w9, [x0, #20]
    edc4:	sub	w9, w9, w11
    edc8:	str	w9, [x0, #20]
    edcc:	b	ed30 <lzma_mf_is_supported@@XZ_5.0+0xd3c>
    edd0:	stp	x22, x21, [sp, #-32]!
    edd4:	stp	x20, x19, [sp, #16]
    edd8:	b	edf8 <lzma_mf_is_supported@@XZ_5.0+0xe04>
    eddc:	ldr	w8, [x0, #40]
    ede0:	add	w9, w2, #0x1
    ede4:	str	w9, [x0, #24]
    ede8:	add	w8, w8, #0x1
    edec:	str	w8, [x0, #40]
    edf0:	subs	w1, w1, #0x1
    edf4:	b.eq	f00c <lzma_mf_is_supported@@XZ_5.0+0x1018>  // b.none
    edf8:	ldr	w2, [x0, #24]
    edfc:	ldr	w8, [x0, #36]
    ee00:	ldr	w10, [x0, #96]
    ee04:	sub	w8, w8, w2
    ee08:	cmp	w10, w8
    ee0c:	b.ls	ee28 <lzma_mf_is_supported@@XZ_5.0+0xe34>  // b.plast
    ee10:	cmp	w8, #0x2
    ee14:	b.cc	eddc <lzma_mf_is_supported@@XZ_5.0+0xde8>  // b.lo, b.ul, b.last
    ee18:	ldr	w9, [x0, #104]
    ee1c:	mov	w10, w8
    ee20:	cmp	w9, #0x1
    ee24:	b.eq	eddc <lzma_mf_is_supported@@XZ_5.0+0xde8>  // b.none
    ee28:	ldr	x6, [x0]
    ee2c:	ldr	w8, [x0, #20]
    ee30:	ldr	x9, [x0, #64]
    ee34:	add	x12, x6, x2
    ee38:	ldrb	w11, [x12]
    ee3c:	ldrb	w13, [x12, #1]
    ee40:	add	w14, w8, w2
    ee44:	lsl	x8, x11, #2
    ee48:	bfi	x8, x13, #10, #8
    ee4c:	ldr	w4, [x9, x8]
    ee50:	str	w14, [x9, x8]
    ee54:	ldr	w15, [x0, #80]
    ee58:	ldr	x8, [x0, #72]
    ee5c:	ldr	w16, [x0, #92]
    ee60:	lsl	w11, w15, #1
    ee64:	add	x11, x8, w11, uxtw #2
    ee68:	add	x13, x11, #0x4
    ee6c:	cbz	w16, ef50 <lzma_mf_is_supported@@XZ_5.0+0xf5c>
    ee70:	ldr	w17, [x0, #84]
    ee74:	sub	w5, w14, w4
    ee78:	cmp	w5, w17
    ee7c:	b.cs	ef50 <lzma_mf_is_supported@@XZ_5.0+0xf5c>  // b.hs, b.nlast
    ee80:	mov	w3, wzr
    ee84:	mov	w18, wzr
    ee88:	add	x2, x6, x2
    ee8c:	subs	w22, w15, w5
    ee90:	mov	w21, w5
    ee94:	csel	w5, w17, wzr, cc  // cc = lo, ul, last
    ee98:	cmp	w18, w3
    ee9c:	sub	x7, x12, x21
    eea0:	csel	w6, w18, w3, cc  // cc = lo, ul, last
    eea4:	ldrb	w19, [x7, x6]
    eea8:	ldrb	w20, [x12, x6]
    eeac:	add	w5, w22, w5
    eeb0:	lsl	w5, w5, #1
    eeb4:	add	x5, x8, w5, uxtw #2
    eeb8:	cmp	w19, w20
    eebc:	b.ne	ef0c <lzma_mf_is_supported@@XZ_5.0+0xf18>  // b.any
    eec0:	add	w6, w6, #0x1
    eec4:	cmp	w6, w10
    eec8:	b.cs	eef8 <lzma_mf_is_supported@@XZ_5.0+0xf04>  // b.hs, b.nlast
    eecc:	neg	x19, x21
    eed0:	add	x20, x2, w6, uxtw
    eed4:	ldrb	w21, [x20, x19]
    eed8:	ldrb	w22, [x20]
    eedc:	cmp	w21, w22
    eee0:	b.ne	eef8 <lzma_mf_is_supported@@XZ_5.0+0xf04>  // b.any
    eee4:	add	w6, w6, #0x1
    eee8:	cmp	w10, w6
    eeec:	add	x20, x20, #0x1
    eef0:	b.ne	eed4 <lzma_mf_is_supported@@XZ_5.0+0xee0>  // b.any
    eef4:	b	ef5c <lzma_mf_is_supported@@XZ_5.0+0xf68>
    eef8:	cmp	w6, w10
    eefc:	b.eq	ef5c <lzma_mf_is_supported@@XZ_5.0+0xf68>  // b.none
    ef00:	mov	w20, w6
    ef04:	ldrb	w19, [x7, x20]
    ef08:	ldrb	w20, [x12, x20]
    ef0c:	cmp	w19, w20
    ef10:	sub	w16, w16, #0x1
    ef14:	b.cs	ef30 <lzma_mf_is_supported@@XZ_5.0+0xf3c>  // b.hs, b.nlast
    ef18:	str	w4, [x11]
    ef1c:	add	x11, x5, #0x4
    ef20:	mov	w3, w6
    ef24:	mov	x5, x11
    ef28:	cbnz	w16, ef40 <lzma_mf_is_supported@@XZ_5.0+0xf4c>
    ef2c:	b	ef50 <lzma_mf_is_supported@@XZ_5.0+0xf5c>
    ef30:	str	w4, [x13]
    ef34:	mov	w18, w6
    ef38:	mov	x13, x5
    ef3c:	cbz	w16, ef50 <lzma_mf_is_supported@@XZ_5.0+0xf5c>
    ef40:	ldr	w4, [x5]
    ef44:	sub	w5, w14, w4
    ef48:	cmp	w5, w17
    ef4c:	b.cc	ee8c <lzma_mf_is_supported@@XZ_5.0+0xe98>  // b.lo, b.ul, b.last
    ef50:	str	wzr, [x13]
    ef54:	str	wzr, [x11]
    ef58:	b	ef6c <lzma_mf_is_supported@@XZ_5.0+0xf78>
    ef5c:	ldr	w10, [x5]
    ef60:	str	w10, [x11]
    ef64:	ldr	w10, [x5, #4]
    ef68:	str	w10, [x13]
    ef6c:	ldp	w11, w10, [x0, #80]
    ef70:	ldp	w13, w12, [x0, #20]
    ef74:	add	w14, w11, #0x1
    ef78:	add	w12, w12, #0x1
    ef7c:	cmp	w14, w10
    ef80:	add	w13, w13, w12
    ef84:	csinc	w11, wzr, w11, eq  // eq = none
    ef88:	cmn	w13, #0x1
    ef8c:	str	w11, [x0, #80]
    ef90:	str	w12, [x0, #24]
    ef94:	b.ne	edf0 <lzma_mf_is_supported@@XZ_5.0+0xdfc>  // b.any
    ef98:	ldr	w11, [x0, #108]
    ef9c:	mvn	w10, w10
    efa0:	cbz	w11, efcc <lzma_mf_is_supported@@XZ_5.0+0xfd8>
    efa4:	mov	x11, xzr
    efa8:	lsl	x12, x11, #2
    efac:	ldr	w13, [x9, x12]
    efb0:	add	x11, x11, #0x1
    efb4:	subs	w13, w13, w10
    efb8:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    efbc:	str	w13, [x9, x12]
    efc0:	ldr	w12, [x0, #108]
    efc4:	cmp	x11, x12
    efc8:	b.cc	efa8 <lzma_mf_is_supported@@XZ_5.0+0xfb4>  // b.lo, b.ul, b.last
    efcc:	ldr	w9, [x0, #112]
    efd0:	cbz	w9, effc <lzma_mf_is_supported@@XZ_5.0+0x1008>
    efd4:	mov	x9, xzr
    efd8:	lsl	x11, x9, #2
    efdc:	ldr	w12, [x8, x11]
    efe0:	add	x9, x9, #0x1
    efe4:	subs	w12, w12, w10
    efe8:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    efec:	str	w12, [x8, x11]
    eff0:	ldr	w11, [x0, #112]
    eff4:	cmp	x9, x11
    eff8:	b.cc	efd8 <lzma_mf_is_supported@@XZ_5.0+0xfe4>  // b.lo, b.ul, b.last
    effc:	ldr	w8, [x0, #20]
    f000:	sub	w8, w8, w10
    f004:	str	w8, [x0, #20]
    f008:	b	edf0 <lzma_mf_is_supported@@XZ_5.0+0xdfc>
    f00c:	ldp	x20, x19, [sp, #16]
    f010:	ldp	x22, x21, [sp], #32
    f014:	ret
    f018:	str	x25, [sp, #-64]!
    f01c:	stp	x24, x23, [sp, #16]
    f020:	stp	x22, x21, [sp, #32]
    f024:	stp	x20, x19, [sp, #48]
    f028:	ldr	w3, [x0, #24]
    f02c:	ldr	w9, [x0, #36]
    f030:	ldr	w8, [x0, #96]
    f034:	sub	w9, w9, w3
    f038:	cmp	w8, w9
    f03c:	b.ls	f074 <lzma_mf_is_supported@@XZ_5.0+0x1080>  // b.plast
    f040:	cmp	w9, #0x3
    f044:	b.cc	f058 <lzma_mf_is_supported@@XZ_5.0+0x1064>  // b.lo, b.ul, b.last
    f048:	ldr	w8, [x0, #104]
    f04c:	cmp	w8, #0x1
    f050:	mov	w8, w9
    f054:	b.ne	f074 <lzma_mf_is_supported@@XZ_5.0+0x1080>  // b.any
    f058:	ldr	w9, [x0, #40]
    f05c:	add	w10, w3, #0x1
    f060:	mov	w8, wzr
    f064:	str	w10, [x0, #24]
    f068:	add	w9, w9, #0x1
    f06c:	str	w9, [x0, #40]
    f070:	b	f280 <lzma_mf_is_supported@@XZ_5.0+0x128c>
    f074:	ldr	x7, [x0]
    f078:	adrp	x12, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    f07c:	ldr	w11, [x0, #20]
    f080:	add	x10, x7, x3
    f084:	ldrb	w9, [x10]
    f088:	ldr	x12, [x12, #3952]
    f08c:	ldrb	w14, [x10, #1]
    f090:	ldrb	w15, [x10, #2]
    f094:	ldr	w13, [x0, #88]
    f098:	ldr	w12, [x12, x9, lsl #2]
    f09c:	ldr	x9, [x0, #64]
    f0a0:	add	w11, w11, w3
    f0a4:	eor	w12, w12, w14
    f0a8:	and	w14, w12, #0x3ff
    f0ac:	eor	w12, w12, w15, lsl #8
    f0b0:	and	w12, w12, w13
    f0b4:	add	w12, w12, #0x400
    f0b8:	lsl	x14, x14, #2
    f0bc:	lsl	x12, x12, #2
    f0c0:	ldr	w15, [x9, x14]
    f0c4:	ldr	w13, [x9, x12]
    f0c8:	str	w11, [x9, x14]
    f0cc:	str	w11, [x9, x12]
    f0d0:	ldr	w12, [x0, #84]
    f0d4:	sub	w14, w11, w15
    f0d8:	cmp	w14, w12
    f0dc:	b.cs	f12c <lzma_mf_is_supported@@XZ_5.0+0x1138>  // b.hs, b.nlast
    f0e0:	sub	x16, x10, w14, uxtw
    f0e4:	ldrb	w15, [x16]
    f0e8:	ldrb	w17, [x10]
    f0ec:	cmp	w15, w17
    f0f0:	b.ne	f12c <lzma_mf_is_supported@@XZ_5.0+0x1138>  // b.any
    f0f4:	cmp	w8, #0x3
    f0f8:	b.cc	f298 <lzma_mf_is_supported@@XZ_5.0+0x12a4>  // b.lo, b.ul, b.last
    f0fc:	mov	w17, w8
    f100:	mov	w15, #0x2                   	// #2
    f104:	ldrb	w18, [x10, x15]
    f108:	ldrb	w2, [x16, x15]
    f10c:	cmp	w18, w2
    f110:	b.ne	f29c <lzma_mf_is_supported@@XZ_5.0+0x12a8>  // b.any
    f114:	add	x15, x15, #0x1
    f118:	cmp	w17, w15
    f11c:	b.ne	f104 <lzma_mf_is_supported@@XZ_5.0+0x1110>  // b.any
    f120:	sub	w14, w14, #0x1
    f124:	stp	w8, w14, [x1]
    f128:	b	f2ac <lzma_mf_is_supported@@XZ_5.0+0x12b8>
    f12c:	mov	x16, xzr
    f130:	mov	w15, #0x2                   	// #2
    f134:	ldr	w2, [x0, #80]
    f138:	ldr	x14, [x0, #72]
    f13c:	sub	w19, w11, w13
    f140:	add	x16, x1, x16, lsl #3
    f144:	lsl	w17, w2, #1
    f148:	add	x18, x14, w17, uxtw #2
    f14c:	cmp	w19, w12
    f150:	add	x17, x18, #0x4
    f154:	b.cs	f244 <lzma_mf_is_supported@@XZ_5.0+0x1250>  // b.hs, b.nlast
    f158:	ldr	w4, [x0, #92]
    f15c:	cbz	w4, f244 <lzma_mf_is_supported@@XZ_5.0+0x1250>
    f160:	mov	w6, wzr
    f164:	mov	w5, wzr
    f168:	add	x3, x7, x3
    f16c:	subs	w7, w2, w19
    f170:	mov	w22, w19
    f174:	csel	w23, w12, wzr, cc  // cc = lo, ul, last
    f178:	cmp	w5, w6
    f17c:	sub	x21, x10, x22
    f180:	csel	w20, w5, w6, cc  // cc = lo, ul, last
    f184:	ldrb	w24, [x21, x20]
    f188:	ldrb	w25, [x10, x20]
    f18c:	add	w7, w7, w23
    f190:	lsl	w7, w7, #1
    f194:	add	x7, x14, w7, uxtw #2
    f198:	cmp	w24, w25
    f19c:	b.ne	f1f4 <lzma_mf_is_supported@@XZ_5.0+0x1200>  // b.any
    f1a0:	add	w20, w20, #0x1
    f1a4:	cmp	w20, w8
    f1a8:	b.cs	f1d8 <lzma_mf_is_supported@@XZ_5.0+0x11e4>  // b.hs, b.nlast
    f1ac:	neg	x22, x22
    f1b0:	add	x23, x3, w20, uxtw
    f1b4:	ldrb	w24, [x23, x22]
    f1b8:	ldrb	w25, [x23]
    f1bc:	cmp	w24, w25
    f1c0:	b.ne	f1d8 <lzma_mf_is_supported@@XZ_5.0+0x11e4>  // b.any
    f1c4:	add	w20, w20, #0x1
    f1c8:	cmp	w8, w20
    f1cc:	add	x23, x23, #0x1
    f1d0:	b.ne	f1b4 <lzma_mf_is_supported@@XZ_5.0+0x11c0>  // b.any
    f1d4:	mov	w20, w8
    f1d8:	cmp	w15, w20
    f1dc:	b.cs	f1f4 <lzma_mf_is_supported@@XZ_5.0+0x1200>  // b.hs, b.nlast
    f1e0:	sub	w15, w19, #0x1
    f1e4:	cmp	w20, w8
    f1e8:	stp	w20, w15, [x16], #8
    f1ec:	b.eq	f3b4 <lzma_mf_is_supported@@XZ_5.0+0x13c0>  // b.none
    f1f0:	mov	w15, w20
    f1f4:	mov	w19, w20
    f1f8:	ldrb	w21, [x21, x19]
    f1fc:	ldrb	w19, [x10, x19]
    f200:	sub	w4, w4, #0x1
    f204:	cmp	w21, w19
    f208:	b.cs	f224 <lzma_mf_is_supported@@XZ_5.0+0x1230>  // b.hs, b.nlast
    f20c:	str	w13, [x18]
    f210:	add	x18, x7, #0x4
    f214:	mov	w6, w20
    f218:	mov	x7, x18
    f21c:	cbnz	w4, f234 <lzma_mf_is_supported@@XZ_5.0+0x1240>
    f220:	b	f244 <lzma_mf_is_supported@@XZ_5.0+0x1250>
    f224:	str	w13, [x17]
    f228:	mov	x17, x7
    f22c:	mov	w5, w20
    f230:	cbz	w4, f244 <lzma_mf_is_supported@@XZ_5.0+0x1250>
    f234:	ldr	w13, [x7]
    f238:	sub	w19, w11, w13
    f23c:	cmp	w19, w12
    f240:	b.cc	f16c <lzma_mf_is_supported@@XZ_5.0+0x1178>  // b.lo, b.ul, b.last
    f244:	str	wzr, [x17]
    f248:	str	wzr, [x18]
    f24c:	ldp	w11, w10, [x0, #80]
    f250:	ldp	w13, w12, [x0, #20]
    f254:	sub	x8, x16, x1
    f258:	lsr	x8, x8, #3
    f25c:	add	w15, w11, #0x1
    f260:	add	w12, w12, #0x1
    f264:	cmp	w15, w10
    f268:	add	w13, w13, w12
    f26c:	csinc	w11, wzr, w11, eq  // eq = none
    f270:	cmn	w13, #0x1
    f274:	str	w11, [x0, #80]
    f278:	str	w12, [x0, #24]
    f27c:	b.eq	f40c <lzma_mf_is_supported@@XZ_5.0+0x1418>  // b.none
    f280:	ldp	x20, x19, [sp, #48]
    f284:	ldp	x22, x21, [sp, #32]
    f288:	ldp	x24, x23, [sp, #16]
    f28c:	mov	w0, w8
    f290:	ldr	x25, [sp], #64
    f294:	ret
    f298:	mov	w15, #0x2                   	// #2
    f29c:	sub	w14, w14, #0x1
    f2a0:	cmp	w15, w8
    f2a4:	stp	w15, w14, [x1]
    f2a8:	b.ne	f3ac <lzma_mf_is_supported@@XZ_5.0+0x13b8>  // b.any
    f2ac:	ldr	w17, [x0, #80]
    f2b0:	ldr	x14, [x0, #72]
    f2b4:	sub	w5, w11, w13
    f2b8:	cmp	w5, w12
    f2bc:	lsl	w15, w17, #1
    f2c0:	add	x15, x14, w15, uxtw #2
    f2c4:	add	x16, x15, #0x4
    f2c8:	b.cs	f3a0 <lzma_mf_is_supported@@XZ_5.0+0x13ac>  // b.hs, b.nlast
    f2cc:	ldr	w18, [x0, #92]
    f2d0:	cbz	w18, f3a0 <lzma_mf_is_supported@@XZ_5.0+0x13ac>
    f2d4:	mov	w4, wzr
    f2d8:	mov	w2, wzr
    f2dc:	add	x1, x7, x3
    f2e0:	subs	w3, w17, w5
    f2e4:	mov	w20, w5
    f2e8:	csel	w21, w12, wzr, cc  // cc = lo, ul, last
    f2ec:	cmp	w2, w4
    f2f0:	sub	x6, x10, x20
    f2f4:	csel	w5, w2, w4, cc  // cc = lo, ul, last
    f2f8:	ldrb	w7, [x6, x5]
    f2fc:	ldrb	w19, [x10, x5]
    f300:	add	w3, w3, w21
    f304:	lsl	w3, w3, #1
    f308:	add	x3, x14, w3, uxtw #2
    f30c:	cmp	w7, w19
    f310:	b.ne	f360 <lzma_mf_is_supported@@XZ_5.0+0x136c>  // b.any
    f314:	add	w5, w5, #0x1
    f318:	cmp	w5, w8
    f31c:	b.cs	f34c <lzma_mf_is_supported@@XZ_5.0+0x1358>  // b.hs, b.nlast
    f320:	neg	x7, x20
    f324:	add	x19, x1, w5, uxtw
    f328:	ldrb	w20, [x19, x7]
    f32c:	ldrb	w21, [x19]
    f330:	cmp	w20, w21
    f334:	b.ne	f34c <lzma_mf_is_supported@@XZ_5.0+0x1358>  // b.any
    f338:	add	w5, w5, #0x1
    f33c:	cmp	w8, w5
    f340:	add	x19, x19, #0x1
    f344:	b.ne	f328 <lzma_mf_is_supported@@XZ_5.0+0x1334>  // b.any
    f348:	b	f3c8 <lzma_mf_is_supported@@XZ_5.0+0x13d4>
    f34c:	cmp	w5, w8
    f350:	b.eq	f3c8 <lzma_mf_is_supported@@XZ_5.0+0x13d4>  // b.none
    f354:	mov	w19, w5
    f358:	ldrb	w7, [x6, x19]
    f35c:	ldrb	w19, [x10, x19]
    f360:	cmp	w7, w19
    f364:	sub	w18, w18, #0x1
    f368:	b.cs	f380 <lzma_mf_is_supported@@XZ_5.0+0x138c>  // b.hs, b.nlast
    f36c:	str	w13, [x15]
    f370:	add	x15, x3, #0x4
    f374:	mov	w4, w5
    f378:	mov	x3, x15
    f37c:	b	f38c <lzma_mf_is_supported@@XZ_5.0+0x1398>
    f380:	str	w13, [x16]
    f384:	mov	w2, w5
    f388:	mov	x16, x3
    f38c:	cbz	w18, f3a0 <lzma_mf_is_supported@@XZ_5.0+0x13ac>
    f390:	ldr	w13, [x3]
    f394:	sub	w5, w11, w13
    f398:	cmp	w5, w12
    f39c:	b.cc	f2e0 <lzma_mf_is_supported@@XZ_5.0+0x12ec>  // b.lo, b.ul, b.last
    f3a0:	str	wzr, [x16]
    f3a4:	str	wzr, [x15]
    f3a8:	b	f3d8 <lzma_mf_is_supported@@XZ_5.0+0x13e4>
    f3ac:	mov	w16, #0x1                   	// #1
    f3b0:	b	f134 <lzma_mf_is_supported@@XZ_5.0+0x1140>
    f3b4:	ldr	w8, [x7]
    f3b8:	str	w8, [x18]
    f3bc:	ldr	w8, [x7, #4]
    f3c0:	str	w8, [x17]
    f3c4:	b	f24c <lzma_mf_is_supported@@XZ_5.0+0x1258>
    f3c8:	ldr	w8, [x3]
    f3cc:	str	w8, [x15]
    f3d0:	ldr	w8, [x3, #4]
    f3d4:	str	w8, [x16]
    f3d8:	ldp	w10, w8, [x0, #80]
    f3dc:	ldp	w12, w11, [x0, #20]
    f3e0:	add	w13, w10, #0x1
    f3e4:	add	w11, w11, #0x1
    f3e8:	cmp	w13, w8
    f3ec:	add	w12, w12, w11
    f3f0:	csinc	w10, wzr, w10, eq  // eq = none
    f3f4:	cmn	w12, #0x1
    f3f8:	str	w10, [x0, #80]
    f3fc:	str	w11, [x0, #24]
    f400:	b.eq	f480 <lzma_mf_is_supported@@XZ_5.0+0x148c>  // b.none
    f404:	mov	w8, #0x1                   	// #1
    f408:	b	f280 <lzma_mf_is_supported@@XZ_5.0+0x128c>
    f40c:	ldr	w11, [x0, #108]
    f410:	mvn	w10, w10
    f414:	cbz	w11, f440 <lzma_mf_is_supported@@XZ_5.0+0x144c>
    f418:	mov	x11, xzr
    f41c:	lsl	x12, x11, #2
    f420:	ldr	w13, [x9, x12]
    f424:	add	x11, x11, #0x1
    f428:	subs	w13, w13, w10
    f42c:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    f430:	str	w13, [x9, x12]
    f434:	ldr	w12, [x0, #108]
    f438:	cmp	x11, x12
    f43c:	b.cc	f41c <lzma_mf_is_supported@@XZ_5.0+0x1428>  // b.lo, b.ul, b.last
    f440:	ldr	w9, [x0, #112]
    f444:	cbz	w9, f470 <lzma_mf_is_supported@@XZ_5.0+0x147c>
    f448:	mov	x9, xzr
    f44c:	lsl	x11, x9, #2
    f450:	ldr	w12, [x14, x11]
    f454:	add	x9, x9, #0x1
    f458:	subs	w12, w12, w10
    f45c:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    f460:	str	w12, [x14, x11]
    f464:	ldr	w11, [x0, #112]
    f468:	cmp	x9, x11
    f46c:	b.cc	f44c <lzma_mf_is_supported@@XZ_5.0+0x1458>  // b.lo, b.ul, b.last
    f470:	ldr	w9, [x0, #20]
    f474:	sub	w9, w9, w10
    f478:	str	w9, [x0, #20]
    f47c:	b	f280 <lzma_mf_is_supported@@XZ_5.0+0x128c>
    f480:	ldr	w10, [x0, #108]
    f484:	mvn	w8, w8
    f488:	cbz	w10, f4b4 <lzma_mf_is_supported@@XZ_5.0+0x14c0>
    f48c:	mov	x10, xzr
    f490:	lsl	x11, x10, #2
    f494:	ldr	w12, [x9, x11]
    f498:	add	x10, x10, #0x1
    f49c:	subs	w12, w12, w8
    f4a0:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    f4a4:	str	w12, [x9, x11]
    f4a8:	ldr	w11, [x0, #108]
    f4ac:	cmp	x10, x11
    f4b0:	b.cc	f490 <lzma_mf_is_supported@@XZ_5.0+0x149c>  // b.lo, b.ul, b.last
    f4b4:	ldr	w9, [x0, #112]
    f4b8:	cbz	w9, f4e4 <lzma_mf_is_supported@@XZ_5.0+0x14f0>
    f4bc:	mov	x9, xzr
    f4c0:	lsl	x10, x9, #2
    f4c4:	ldr	w11, [x14, x10]
    f4c8:	add	x9, x9, #0x1
    f4cc:	subs	w11, w11, w8
    f4d0:	csel	w11, wzr, w11, cc  // cc = lo, ul, last
    f4d4:	str	w11, [x14, x10]
    f4d8:	ldr	w10, [x0, #112]
    f4dc:	cmp	x9, x10
    f4e0:	b.cc	f4c0 <lzma_mf_is_supported@@XZ_5.0+0x14cc>  // b.lo, b.ul, b.last
    f4e4:	ldr	w9, [x0, #20]
    f4e8:	sub	w8, w9, w8
    f4ec:	str	w8, [x0, #20]
    f4f0:	mov	w8, #0x1                   	// #1
    f4f4:	b	f280 <lzma_mf_is_supported@@XZ_5.0+0x128c>
    f4f8:	str	x23, [sp, #-48]!
    f4fc:	stp	x22, x21, [sp, #16]
    f500:	stp	x20, x19, [sp, #32]
    f504:	adrp	x8, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    f508:	ldr	x8, [x8, #3952]
    f50c:	b	f52c <lzma_mf_is_supported@@XZ_5.0+0x1538>
    f510:	ldr	w9, [x0, #40]
    f514:	add	w10, w3, #0x1
    f518:	str	w10, [x0, #24]
    f51c:	add	w9, w9, #0x1
    f520:	str	w9, [x0, #40]
    f524:	subs	w1, w1, #0x1
    f528:	b.eq	f760 <lzma_mf_is_supported@@XZ_5.0+0x176c>  // b.none
    f52c:	ldr	w3, [x0, #24]
    f530:	ldr	w9, [x0, #36]
    f534:	ldr	w11, [x0, #96]
    f538:	sub	w9, w9, w3
    f53c:	cmp	w11, w9
    f540:	b.ls	f55c <lzma_mf_is_supported@@XZ_5.0+0x1568>  // b.plast
    f544:	cmp	w9, #0x3
    f548:	b.cc	f510 <lzma_mf_is_supported@@XZ_5.0+0x151c>  // b.lo, b.ul, b.last
    f54c:	ldr	w10, [x0, #104]
    f550:	mov	w11, w9
    f554:	cmp	w10, #0x1
    f558:	b.eq	f510 <lzma_mf_is_supported@@XZ_5.0+0x151c>  // b.none
    f55c:	ldr	x7, [x0]
    f560:	ldr	w13, [x0, #20]
    f564:	ldr	w14, [x0, #88]
    f568:	ldr	x10, [x0, #64]
    f56c:	add	x12, x7, x3
    f570:	ldrb	w9, [x12]
    f574:	ldrb	w16, [x12, #1]
    f578:	ldrb	w17, [x12, #2]
    f57c:	add	w15, w13, w3
    f580:	ldr	w9, [x8, x9, lsl #2]
    f584:	eor	w9, w9, w16
    f588:	and	w13, w9, #0x3ff
    f58c:	eor	w9, w9, w17, lsl #8
    f590:	and	w9, w9, w14
    f594:	add	w9, w9, #0x400
    f598:	lsl	x9, x9, #2
    f59c:	ldr	w4, [x10, x9]
    f5a0:	str	w15, [x10, w13, uxtw #2]
    f5a4:	str	w15, [x10, x9]
    f5a8:	ldr	w16, [x0, #80]
    f5ac:	ldr	x9, [x0, #72]
    f5b0:	ldr	w17, [x0, #92]
    f5b4:	lsl	w13, w16, #1
    f5b8:	add	x13, x9, w13, uxtw #2
    f5bc:	add	x14, x13, #0x4
    f5c0:	cbz	w17, f6a4 <lzma_mf_is_supported@@XZ_5.0+0x16b0>
    f5c4:	ldr	w18, [x0, #84]
    f5c8:	sub	w6, w15, w4
    f5cc:	cmp	w6, w18
    f5d0:	b.cs	f6a4 <lzma_mf_is_supported@@XZ_5.0+0x16b0>  // b.hs, b.nlast
    f5d4:	mov	w5, wzr
    f5d8:	mov	w2, wzr
    f5dc:	add	x3, x7, x3
    f5e0:	subs	w23, w16, w6
    f5e4:	mov	w22, w6
    f5e8:	csel	w6, w18, wzr, cc  // cc = lo, ul, last
    f5ec:	cmp	w2, w5
    f5f0:	sub	x19, x12, x22
    f5f4:	csel	w7, w2, w5, cc  // cc = lo, ul, last
    f5f8:	ldrb	w20, [x19, x7]
    f5fc:	ldrb	w21, [x12, x7]
    f600:	add	w6, w23, w6
    f604:	lsl	w6, w6, #1
    f608:	add	x6, x9, w6, uxtw #2
    f60c:	cmp	w20, w21
    f610:	b.ne	f660 <lzma_mf_is_supported@@XZ_5.0+0x166c>  // b.any
    f614:	add	w7, w7, #0x1
    f618:	cmp	w7, w11
    f61c:	b.cs	f64c <lzma_mf_is_supported@@XZ_5.0+0x1658>  // b.hs, b.nlast
    f620:	neg	x20, x22
    f624:	add	x21, x3, w7, uxtw
    f628:	ldrb	w22, [x21, x20]
    f62c:	ldrb	w23, [x21]
    f630:	cmp	w22, w23
    f634:	b.ne	f64c <lzma_mf_is_supported@@XZ_5.0+0x1658>  // b.any
    f638:	add	w7, w7, #0x1
    f63c:	cmp	w11, w7
    f640:	add	x21, x21, #0x1
    f644:	b.ne	f628 <lzma_mf_is_supported@@XZ_5.0+0x1634>  // b.any
    f648:	b	f6b0 <lzma_mf_is_supported@@XZ_5.0+0x16bc>
    f64c:	cmp	w7, w11
    f650:	b.eq	f6b0 <lzma_mf_is_supported@@XZ_5.0+0x16bc>  // b.none
    f654:	mov	w21, w7
    f658:	ldrb	w20, [x19, x21]
    f65c:	ldrb	w21, [x12, x21]
    f660:	cmp	w20, w21
    f664:	sub	w17, w17, #0x1
    f668:	b.cs	f684 <lzma_mf_is_supported@@XZ_5.0+0x1690>  // b.hs, b.nlast
    f66c:	str	w4, [x13]
    f670:	add	x13, x6, #0x4
    f674:	mov	w5, w7
    f678:	mov	x6, x13
    f67c:	cbnz	w17, f694 <lzma_mf_is_supported@@XZ_5.0+0x16a0>
    f680:	b	f6a4 <lzma_mf_is_supported@@XZ_5.0+0x16b0>
    f684:	str	w4, [x14]
    f688:	mov	w2, w7
    f68c:	mov	x14, x6
    f690:	cbz	w17, f6a4 <lzma_mf_is_supported@@XZ_5.0+0x16b0>
    f694:	ldr	w4, [x6]
    f698:	sub	w6, w15, w4
    f69c:	cmp	w6, w18
    f6a0:	b.cc	f5e0 <lzma_mf_is_supported@@XZ_5.0+0x15ec>  // b.lo, b.ul, b.last
    f6a4:	str	wzr, [x14]
    f6a8:	str	wzr, [x13]
    f6ac:	b	f6c0 <lzma_mf_is_supported@@XZ_5.0+0x16cc>
    f6b0:	ldr	w11, [x6]
    f6b4:	str	w11, [x13]
    f6b8:	ldr	w11, [x6, #4]
    f6bc:	str	w11, [x14]
    f6c0:	ldp	w12, w11, [x0, #80]
    f6c4:	ldp	w14, w13, [x0, #20]
    f6c8:	add	w15, w12, #0x1
    f6cc:	add	w13, w13, #0x1
    f6d0:	cmp	w15, w11
    f6d4:	add	w14, w14, w13
    f6d8:	csinc	w12, wzr, w12, eq  // eq = none
    f6dc:	cmn	w14, #0x1
    f6e0:	str	w12, [x0, #80]
    f6e4:	str	w13, [x0, #24]
    f6e8:	b.ne	f524 <lzma_mf_is_supported@@XZ_5.0+0x1530>  // b.any
    f6ec:	ldr	w12, [x0, #108]
    f6f0:	mvn	w11, w11
    f6f4:	cbz	w12, f720 <lzma_mf_is_supported@@XZ_5.0+0x172c>
    f6f8:	mov	x12, xzr
    f6fc:	lsl	x13, x12, #2
    f700:	ldr	w14, [x10, x13]
    f704:	add	x12, x12, #0x1
    f708:	subs	w14, w14, w11
    f70c:	csel	w14, wzr, w14, cc  // cc = lo, ul, last
    f710:	str	w14, [x10, x13]
    f714:	ldr	w13, [x0, #108]
    f718:	cmp	x12, x13
    f71c:	b.cc	f6fc <lzma_mf_is_supported@@XZ_5.0+0x1708>  // b.lo, b.ul, b.last
    f720:	ldr	w10, [x0, #112]
    f724:	cbz	w10, f750 <lzma_mf_is_supported@@XZ_5.0+0x175c>
    f728:	mov	x10, xzr
    f72c:	lsl	x12, x10, #2
    f730:	ldr	w13, [x9, x12]
    f734:	add	x10, x10, #0x1
    f738:	subs	w13, w13, w11
    f73c:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    f740:	str	w13, [x9, x12]
    f744:	ldr	w12, [x0, #112]
    f748:	cmp	x10, x12
    f74c:	b.cc	f72c <lzma_mf_is_supported@@XZ_5.0+0x1738>  // b.lo, b.ul, b.last
    f750:	ldr	w9, [x0, #20]
    f754:	sub	w9, w9, w11
    f758:	str	w9, [x0, #20]
    f75c:	b	f524 <lzma_mf_is_supported@@XZ_5.0+0x1530>
    f760:	ldp	x20, x19, [sp, #32]
    f764:	ldp	x22, x21, [sp, #16]
    f768:	ldr	x23, [sp], #48
    f76c:	ret
    f770:	str	x25, [sp, #-64]!
    f774:	stp	x24, x23, [sp, #16]
    f778:	stp	x22, x21, [sp, #32]
    f77c:	stp	x20, x19, [sp, #48]
    f780:	ldr	w16, [x0, #24]
    f784:	ldr	w8, [x0, #36]
    f788:	ldr	w10, [x0, #96]
    f78c:	sub	w8, w8, w16
    f790:	cmp	w10, w8
    f794:	b.ls	f7cc <lzma_mf_is_supported@@XZ_5.0+0x17d8>  // b.plast
    f798:	cmp	w8, #0x4
    f79c:	b.cc	f7b0 <lzma_mf_is_supported@@XZ_5.0+0x17bc>  // b.lo, b.ul, b.last
    f7a0:	ldr	w9, [x0, #104]
    f7a4:	mov	w10, w8
    f7a8:	cmp	w9, #0x1
    f7ac:	b.ne	f7cc <lzma_mf_is_supported@@XZ_5.0+0x17d8>  // b.any
    f7b0:	ldr	w9, [x0, #40]
    f7b4:	add	w10, w16, #0x1
    f7b8:	mov	w8, wzr
    f7bc:	str	w10, [x0, #24]
    f7c0:	add	w9, w9, #0x1
    f7c4:	str	w9, [x0, #40]
    f7c8:	b	fc48 <lzma_mf_is_supported@@XZ_5.0+0x1c54>
    f7cc:	ldr	x17, [x0]
    f7d0:	adrp	x13, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    f7d4:	ldr	w8, [x0, #20]
    f7d8:	ldr	x13, [x13, #3952]
    f7dc:	add	x11, x17, x16
    f7e0:	ldrb	w12, [x11]
    f7e4:	ldrb	w2, [x11, #3]
    f7e8:	ldrb	w18, [x11, #1]
    f7ec:	ldr	w14, [x0, #88]
    f7f0:	ldr	w3, [x13, x12, lsl #2]
    f7f4:	add	w12, w8, w16
    f7f8:	ldrb	w8, [x11, #2]
    f7fc:	ldr	w13, [x13, x2, lsl #2]
    f800:	eor	w18, w3, w18
    f804:	ldr	x9, [x0, #64]
    f808:	eor	w8, w18, w8, lsl #8
    f80c:	mov	w15, #0x400                 	// #1024
    f810:	and	w2, w18, #0x3ff
    f814:	and	w18, w8, #0xffff
    f818:	eor	w8, w8, w13, lsl #5
    f81c:	movk	w15, #0x1, lsl #16
    f820:	and	w8, w8, w14
    f824:	add	w14, w18, #0x400
    f828:	add	w8, w8, w15
    f82c:	lsl	x13, x2, #2
    f830:	lsl	x3, x14, #2
    f834:	lsl	x8, x8, #2
    f838:	ldr	w2, [x9, x13]
    f83c:	ldr	w18, [x9, x3]
    f840:	ldr	w14, [x9, x8]
    f844:	str	w12, [x9, x13]
    f848:	str	w12, [x9, x3]
    f84c:	str	w12, [x9, x8]
    f850:	ldr	w13, [x0, #84]
    f854:	sub	w8, w12, w2
    f858:	cmp	w8, w13
    f85c:	b.cs	f890 <lzma_mf_is_supported@@XZ_5.0+0x189c>  // b.hs, b.nlast
    f860:	sub	x15, x11, w8, uxtw
    f864:	ldrb	w15, [x15]
    f868:	ldrb	w3, [x11]
    f86c:	cmp	w15, w3
    f870:	b.ne	f890 <lzma_mf_is_supported@@XZ_5.0+0x189c>  // b.any
    f874:	mov	w7, #0x2                   	// #2
    f878:	sub	w15, w8, #0x1
    f87c:	stp	w7, w15, [x1]
    f880:	mov	w15, #0x1                   	// #1
    f884:	cmp	w18, w2
    f888:	b.ne	f8a0 <lzma_mf_is_supported@@XZ_5.0+0x18ac>  // b.any
    f88c:	b	f8e8 <lzma_mf_is_supported@@XZ_5.0+0x18f4>
    f890:	mov	w15, wzr
    f894:	mov	w7, #0x1                   	// #1
    f898:	cmp	w18, w2
    f89c:	b.eq	f8e8 <lzma_mf_is_supported@@XZ_5.0+0x18f4>  // b.none
    f8a0:	sub	w2, w12, w18
    f8a4:	cmp	w2, w13
    f8a8:	b.cs	f8e8 <lzma_mf_is_supported@@XZ_5.0+0x18f4>  // b.hs, b.nlast
    f8ac:	mov	w18, w2
    f8b0:	sub	x3, x11, x18
    f8b4:	ldrb	w3, [x3]
    f8b8:	ldrb	w4, [x11]
    f8bc:	cmp	w3, w4
    f8c0:	b.ne	f8e8 <lzma_mf_is_supported@@XZ_5.0+0x18f4>  // b.any
    f8c4:	sub	w2, w2, #0x1
    f8c8:	add	w8, w15, #0x1
    f8cc:	add	x15, x1, w15, uxtw #3
    f8d0:	neg	x18, x18
    f8d4:	str	w2, [x15, #4]
    f8d8:	mov	w7, #0x3                   	// #3
    f8dc:	cmp	w7, w10
    f8e0:	b.cc	f900 <lzma_mf_is_supported@@XZ_5.0+0x190c>  // b.lo, b.ul, b.last
    f8e4:	b	f934 <lzma_mf_is_supported@@XZ_5.0+0x1940>
    f8e8:	cbz	w15, fa48 <lzma_mf_is_supported@@XZ_5.0+0x1a54>
    f8ec:	mov	x15, xzr
    f8f0:	sub	x18, x15, w8, uxtw
    f8f4:	mov	w8, #0x1                   	// #1
    f8f8:	cmp	w7, w10
    f8fc:	b.cs	f934 <lzma_mf_is_supported@@XZ_5.0+0x1940>  // b.hs, b.nlast
    f900:	add	x15, x11, x18
    f904:	mov	w18, w10
    f908:	ldrb	w2, [x11, x7]
    f90c:	ldrb	w3, [x15, x7]
    f910:	cmp	w2, w3
    f914:	b.ne	f934 <lzma_mf_is_supported@@XZ_5.0+0x1940>  // b.any
    f918:	add	x7, x7, #0x1
    f91c:	cmp	w18, w7
    f920:	b.ne	f908 <lzma_mf_is_supported@@XZ_5.0+0x1914>  // b.any
    f924:	sub	w15, w8, #0x1
    f928:	lsl	x15, x15, #3
    f92c:	str	w10, [x1, x15]
    f930:	b	f948 <lzma_mf_is_supported@@XZ_5.0+0x1954>
    f934:	sub	w15, w8, #0x1
    f938:	lsl	x15, x15, #3
    f93c:	cmp	w7, w10
    f940:	str	w7, [x1, x15]
    f944:	b.ne	fa4c <lzma_mf_is_supported@@XZ_5.0+0x1a58>  // b.any
    f948:	ldr	w2, [x0, #80]
    f94c:	ldr	x15, [x0, #72]
    f950:	sub	w6, w12, w14
    f954:	cmp	w6, w13
    f958:	lsl	w18, w2, #1
    f95c:	add	x18, x15, w18, uxtw #2
    f960:	add	x1, x18, #0x4
    f964:	b.cs	fa3c <lzma_mf_is_supported@@XZ_5.0+0x1a48>  // b.hs, b.nlast
    f968:	ldr	w3, [x0, #92]
    f96c:	cbz	w3, fa3c <lzma_mf_is_supported@@XZ_5.0+0x1a48>
    f970:	mov	w5, wzr
    f974:	mov	w4, wzr
    f978:	add	x16, x17, x16
    f97c:	subs	w17, w2, w6
    f980:	mov	w21, w6
    f984:	csel	w22, w13, wzr, cc  // cc = lo, ul, last
    f988:	cmp	w4, w5
    f98c:	sub	x7, x11, x21
    f990:	csel	w6, w4, w5, cc  // cc = lo, ul, last
    f994:	ldrb	w19, [x7, x6]
    f998:	ldrb	w20, [x11, x6]
    f99c:	add	w17, w17, w22
    f9a0:	lsl	w17, w17, #1
    f9a4:	add	x17, x15, w17, uxtw #2
    f9a8:	cmp	w19, w20
    f9ac:	b.ne	f9fc <lzma_mf_is_supported@@XZ_5.0+0x1a08>  // b.any
    f9b0:	add	w6, w6, #0x1
    f9b4:	cmp	w6, w10
    f9b8:	b.cs	f9e8 <lzma_mf_is_supported@@XZ_5.0+0x19f4>  // b.hs, b.nlast
    f9bc:	neg	x19, x21
    f9c0:	add	x20, x16, w6, uxtw
    f9c4:	ldrb	w21, [x20, x19]
    f9c8:	ldrb	w22, [x20]
    f9cc:	cmp	w21, w22
    f9d0:	b.ne	f9e8 <lzma_mf_is_supported@@XZ_5.0+0x19f4>  // b.any
    f9d4:	add	w6, w6, #0x1
    f9d8:	cmp	w10, w6
    f9dc:	add	x20, x20, #0x1
    f9e0:	b.ne	f9c4 <lzma_mf_is_supported@@XZ_5.0+0x19d0>  // b.any
    f9e4:	b	fc0c <lzma_mf_is_supported@@XZ_5.0+0x1c18>
    f9e8:	cmp	w6, w10
    f9ec:	b.eq	fc0c <lzma_mf_is_supported@@XZ_5.0+0x1c18>  // b.none
    f9f0:	mov	w20, w6
    f9f4:	ldrb	w19, [x7, x20]
    f9f8:	ldrb	w20, [x11, x20]
    f9fc:	cmp	w19, w20
    fa00:	sub	w3, w3, #0x1
    fa04:	b.cs	fa1c <lzma_mf_is_supported@@XZ_5.0+0x1a28>  // b.hs, b.nlast
    fa08:	str	w14, [x18]
    fa0c:	add	x18, x17, #0x4
    fa10:	mov	w5, w6
    fa14:	mov	x17, x18
    fa18:	b	fa28 <lzma_mf_is_supported@@XZ_5.0+0x1a34>
    fa1c:	str	w14, [x1]
    fa20:	mov	w4, w6
    fa24:	mov	x1, x17
    fa28:	cbz	w3, fa3c <lzma_mf_is_supported@@XZ_5.0+0x1a48>
    fa2c:	ldr	w14, [x17]
    fa30:	sub	w6, w12, w14
    fa34:	cmp	w6, w13
    fa38:	b.cc	f97c <lzma_mf_is_supported@@XZ_5.0+0x1988>  // b.lo, b.ul, b.last
    fa3c:	str	wzr, [x1]
    fa40:	str	wzr, [x18]
    fa44:	b	fc1c <lzma_mf_is_supported@@XZ_5.0+0x1c28>
    fa48:	mov	w8, wzr
    fa4c:	ldr	w3, [x0, #80]
    fa50:	ldr	x15, [x0, #72]
    fa54:	sub	w19, w12, w14
    fa58:	add	x8, x1, w8, uxtw #3
    fa5c:	lsl	w18, w3, #1
    fa60:	add	x2, x15, w18, uxtw #2
    fa64:	cmp	w19, w13
    fa68:	add	x18, x2, #0x4
    fa6c:	b.cs	fb68 <lzma_mf_is_supported@@XZ_5.0+0x1b74>  // b.hs, b.nlast
    fa70:	ldr	w4, [x0, #92]
    fa74:	cbz	w4, fb68 <lzma_mf_is_supported@@XZ_5.0+0x1b74>
    fa78:	cmp	w7, #0x3
    fa7c:	mov	w20, #0x3                   	// #3
    fa80:	mov	w6, wzr
    fa84:	mov	w5, wzr
    fa88:	csel	w7, w7, w20, hi  // hi = pmore
    fa8c:	add	x16, x17, x16
    fa90:	subs	w17, w3, w19
    fa94:	mov	w22, w19
    fa98:	csel	w23, w13, wzr, cc  // cc = lo, ul, last
    fa9c:	cmp	w5, w6
    faa0:	sub	x21, x11, x22
    faa4:	csel	w20, w5, w6, cc  // cc = lo, ul, last
    faa8:	ldrb	w24, [x21, x20]
    faac:	ldrb	w25, [x11, x20]
    fab0:	add	w17, w17, w23
    fab4:	lsl	w17, w17, #1
    fab8:	add	x17, x15, w17, uxtw #2
    fabc:	cmp	w24, w25
    fac0:	b.ne	fb18 <lzma_mf_is_supported@@XZ_5.0+0x1b24>  // b.any
    fac4:	add	w20, w20, #0x1
    fac8:	cmp	w20, w10
    facc:	b.cs	fafc <lzma_mf_is_supported@@XZ_5.0+0x1b08>  // b.hs, b.nlast
    fad0:	neg	x22, x22
    fad4:	add	x23, x16, w20, uxtw
    fad8:	ldrb	w24, [x23, x22]
    fadc:	ldrb	w25, [x23]
    fae0:	cmp	w24, w25
    fae4:	b.ne	fafc <lzma_mf_is_supported@@XZ_5.0+0x1b08>  // b.any
    fae8:	add	w20, w20, #0x1
    faec:	cmp	w10, w20
    faf0:	add	x23, x23, #0x1
    faf4:	b.ne	fad8 <lzma_mf_is_supported@@XZ_5.0+0x1ae4>  // b.any
    faf8:	mov	w20, w10
    fafc:	cmp	w7, w20
    fb00:	b.cs	fb18 <lzma_mf_is_supported@@XZ_5.0+0x1b24>  // b.hs, b.nlast
    fb04:	sub	w7, w19, #0x1
    fb08:	cmp	w20, w10
    fb0c:	stp	w20, w7, [x8], #8
    fb10:	b.eq	fc60 <lzma_mf_is_supported@@XZ_5.0+0x1c6c>  // b.none
    fb14:	mov	w7, w20
    fb18:	mov	w19, w20
    fb1c:	ldrb	w21, [x21, x19]
    fb20:	ldrb	w19, [x11, x19]
    fb24:	sub	w4, w4, #0x1
    fb28:	cmp	w21, w19
    fb2c:	b.cs	fb48 <lzma_mf_is_supported@@XZ_5.0+0x1b54>  // b.hs, b.nlast
    fb30:	str	w14, [x2]
    fb34:	add	x2, x17, #0x4
    fb38:	mov	w6, w20
    fb3c:	mov	x17, x2
    fb40:	cbnz	w4, fb58 <lzma_mf_is_supported@@XZ_5.0+0x1b64>
    fb44:	b	fb68 <lzma_mf_is_supported@@XZ_5.0+0x1b74>
    fb48:	str	w14, [x18]
    fb4c:	mov	x18, x17
    fb50:	mov	w5, w20
    fb54:	cbz	w4, fb68 <lzma_mf_is_supported@@XZ_5.0+0x1b74>
    fb58:	ldr	w14, [x17]
    fb5c:	sub	w19, w12, w14
    fb60:	cmp	w19, w13
    fb64:	b.cc	fa90 <lzma_mf_is_supported@@XZ_5.0+0x1a9c>  // b.lo, b.ul, b.last
    fb68:	str	wzr, [x18]
    fb6c:	str	wzr, [x2]
    fb70:	ldp	w11, w10, [x0, #80]
    fb74:	ldp	w13, w12, [x0, #20]
    fb78:	sub	x8, x8, x1
    fb7c:	lsr	x8, x8, #3
    fb80:	add	w14, w11, #0x1
    fb84:	add	w12, w12, #0x1
    fb88:	cmp	w14, w10
    fb8c:	add	w13, w13, w12
    fb90:	csinc	w11, wzr, w11, eq  // eq = none
    fb94:	cmn	w13, #0x1
    fb98:	str	w11, [x0, #80]
    fb9c:	str	w12, [x0, #24]
    fba0:	b.ne	fc48 <lzma_mf_is_supported@@XZ_5.0+0x1c54>  // b.any
    fba4:	ldr	w11, [x0, #108]
    fba8:	mvn	w10, w10
    fbac:	cbz	w11, fbd8 <lzma_mf_is_supported@@XZ_5.0+0x1be4>
    fbb0:	mov	x11, xzr
    fbb4:	lsl	x12, x11, #2
    fbb8:	ldr	w13, [x9, x12]
    fbbc:	add	x11, x11, #0x1
    fbc0:	subs	w13, w13, w10
    fbc4:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    fbc8:	str	w13, [x9, x12]
    fbcc:	ldr	w12, [x0, #108]
    fbd0:	cmp	x11, x12
    fbd4:	b.cc	fbb4 <lzma_mf_is_supported@@XZ_5.0+0x1bc0>  // b.lo, b.ul, b.last
    fbd8:	ldr	w9, [x0, #112]
    fbdc:	cbz	w9, fcd8 <lzma_mf_is_supported@@XZ_5.0+0x1ce4>
    fbe0:	mov	x9, xzr
    fbe4:	lsl	x11, x9, #2
    fbe8:	ldr	w12, [x15, x11]
    fbec:	add	x9, x9, #0x1
    fbf0:	subs	w12, w12, w10
    fbf4:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    fbf8:	str	w12, [x15, x11]
    fbfc:	ldr	w11, [x0, #112]
    fc00:	cmp	x9, x11
    fc04:	b.cc	fbe4 <lzma_mf_is_supported@@XZ_5.0+0x1bf0>  // b.lo, b.ul, b.last
    fc08:	b	fcd8 <lzma_mf_is_supported@@XZ_5.0+0x1ce4>
    fc0c:	ldr	w10, [x17]
    fc10:	str	w10, [x18]
    fc14:	ldr	w10, [x17, #4]
    fc18:	str	w10, [x1]
    fc1c:	ldp	w11, w10, [x0, #80]
    fc20:	ldp	w13, w12, [x0, #20]
    fc24:	add	w14, w11, #0x1
    fc28:	add	w12, w12, #0x1
    fc2c:	cmp	w14, w10
    fc30:	add	w13, w13, w12
    fc34:	csinc	w11, wzr, w11, eq  // eq = none
    fc38:	cmn	w13, #0x1
    fc3c:	str	w11, [x0, #80]
    fc40:	str	w12, [x0, #24]
    fc44:	b.eq	fc74 <lzma_mf_is_supported@@XZ_5.0+0x1c80>  // b.none
    fc48:	ldp	x20, x19, [sp, #48]
    fc4c:	ldp	x22, x21, [sp, #32]
    fc50:	ldp	x24, x23, [sp, #16]
    fc54:	mov	w0, w8
    fc58:	ldr	x25, [sp], #64
    fc5c:	ret
    fc60:	ldr	w10, [x17]
    fc64:	str	w10, [x2]
    fc68:	ldr	w10, [x17, #4]
    fc6c:	str	w10, [x18]
    fc70:	b	fb70 <lzma_mf_is_supported@@XZ_5.0+0x1b7c>
    fc74:	ldr	w11, [x0, #108]
    fc78:	mvn	w10, w10
    fc7c:	cbz	w11, fca8 <lzma_mf_is_supported@@XZ_5.0+0x1cb4>
    fc80:	mov	x11, xzr
    fc84:	lsl	x12, x11, #2
    fc88:	ldr	w13, [x9, x12]
    fc8c:	add	x11, x11, #0x1
    fc90:	subs	w13, w13, w10
    fc94:	csel	w13, wzr, w13, cc  // cc = lo, ul, last
    fc98:	str	w13, [x9, x12]
    fc9c:	ldr	w12, [x0, #108]
    fca0:	cmp	x11, x12
    fca4:	b.cc	fc84 <lzma_mf_is_supported@@XZ_5.0+0x1c90>  // b.lo, b.ul, b.last
    fca8:	ldr	w9, [x0, #112]
    fcac:	cbz	w9, fcd8 <lzma_mf_is_supported@@XZ_5.0+0x1ce4>
    fcb0:	mov	x9, xzr
    fcb4:	lsl	x11, x9, #2
    fcb8:	ldr	w12, [x15, x11]
    fcbc:	add	x9, x9, #0x1
    fcc0:	subs	w12, w12, w10
    fcc4:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    fcc8:	str	w12, [x15, x11]
    fccc:	ldr	w11, [x0, #112]
    fcd0:	cmp	x9, x11
    fcd4:	b.cc	fcb4 <lzma_mf_is_supported@@XZ_5.0+0x1cc0>  // b.lo, b.ul, b.last
    fcd8:	ldr	w9, [x0, #20]
    fcdc:	sub	w9, w9, w10
    fce0:	str	w9, [x0, #20]
    fce4:	b	fc48 <lzma_mf_is_supported@@XZ_5.0+0x1c54>
    fce8:	stp	x24, x23, [sp, #-48]!
    fcec:	stp	x22, x21, [sp, #16]
    fcf0:	stp	x20, x19, [sp, #32]
    fcf4:	adrp	x8, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
    fcf8:	ldr	x8, [x8, #3952]
    fcfc:	mov	w9, #0x400                 	// #1024
    fd00:	movk	w9, #0x1, lsl #16
    fd04:	b	fd24 <lzma_mf_is_supported@@XZ_5.0+0x1d30>
    fd08:	ldr	w10, [x0, #40]
    fd0c:	add	w11, w4, #0x1
    fd10:	str	w11, [x0, #24]
    fd14:	add	w10, w10, #0x1
    fd18:	str	w10, [x0, #40]
    fd1c:	subs	w1, w1, #0x1
    fd20:	b.eq	ff70 <lzma_mf_is_supported@@XZ_5.0+0x1f7c>  // b.none
    fd24:	ldr	w4, [x0, #24]
    fd28:	ldr	w10, [x0, #36]
    fd2c:	ldr	w12, [x0, #96]
    fd30:	sub	w10, w10, w4
    fd34:	cmp	w12, w10
    fd38:	b.ls	fd54 <lzma_mf_is_supported@@XZ_5.0+0x1d60>  // b.plast
    fd3c:	cmp	w10, #0x4
    fd40:	b.cc	fd08 <lzma_mf_is_supported@@XZ_5.0+0x1d14>  // b.lo, b.ul, b.last
    fd44:	ldr	w11, [x0, #104]
    fd48:	mov	w12, w10
    fd4c:	cmp	w11, #0x1
    fd50:	b.eq	fd08 <lzma_mf_is_supported@@XZ_5.0+0x1d14>  // b.none
    fd54:	ldr	x19, [x0]
    fd58:	ldr	w10, [x0, #20]
    fd5c:	ldr	w13, [x0, #88]
    fd60:	ldr	x11, [x0, #64]
    fd64:	add	x14, x19, x4
    fd68:	ldrb	w15, [x14]
    fd6c:	ldrb	w18, [x14, #3]
    fd70:	ldrb	w17, [x14, #1]
    fd74:	add	w16, w10, w4
    fd78:	ldr	w15, [x8, x15, lsl #2]
    fd7c:	ldrb	w10, [x14, #2]
    fd80:	ldr	w18, [x8, x18, lsl #2]
    fd84:	eor	w15, w15, w17
    fd88:	eor	w10, w15, w10, lsl #8
    fd8c:	and	w17, w15, #0x3ff
    fd90:	and	w15, w10, #0xffff
    fd94:	eor	w10, w10, w18, lsl #5
    fd98:	and	w10, w10, w13
    fd9c:	add	w10, w10, w9
    fda0:	add	w13, w15, #0x400
    fda4:	lsl	x10, x10, #2
    fda8:	ldr	w6, [x11, x10]
    fdac:	str	w16, [x11, w17, uxtw #2]
    fdb0:	str	w16, [x11, w13, uxtw #2]
    fdb4:	str	w16, [x11, x10]
    fdb8:	ldr	w17, [x0, #80]
    fdbc:	ldr	x10, [x0, #72]
    fdc0:	ldr	w18, [x0, #92]
    fdc4:	lsl	w13, w17, #1
    fdc8:	add	x13, x10, w13, uxtw #2
    fdcc:	add	x15, x13, #0x4
    fdd0:	cbz	w18, feb4 <lzma_mf_is_supported@@XZ_5.0+0x1ec0>
    fdd4:	ldr	w2, [x0, #84]
    fdd8:	sub	w7, w16, w6
    fddc:	cmp	w7, w2
    fde0:	b.cs	feb4 <lzma_mf_is_supported@@XZ_5.0+0x1ec0>  // b.hs, b.nlast
    fde4:	mov	w5, wzr
    fde8:	mov	w3, wzr
    fdec:	add	x4, x19, x4
    fdf0:	subs	w24, w17, w7
    fdf4:	mov	w23, w7
    fdf8:	csel	w7, w2, wzr, cc  // cc = lo, ul, last
    fdfc:	cmp	w3, w5
    fe00:	sub	x20, x14, x23
    fe04:	csel	w19, w3, w5, cc  // cc = lo, ul, last
    fe08:	ldrb	w21, [x20, x19]
    fe0c:	ldrb	w22, [x14, x19]
    fe10:	add	w7, w24, w7
    fe14:	lsl	w7, w7, #1
    fe18:	add	x7, x10, w7, uxtw #2
    fe1c:	cmp	w21, w22
    fe20:	b.ne	fe70 <lzma_mf_is_supported@@XZ_5.0+0x1e7c>  // b.any
    fe24:	add	w19, w19, #0x1
    fe28:	cmp	w19, w12
    fe2c:	b.cs	fe5c <lzma_mf_is_supported@@XZ_5.0+0x1e68>  // b.hs, b.nlast
    fe30:	neg	x21, x23
    fe34:	add	x22, x4, w19, uxtw
    fe38:	ldrb	w23, [x22, x21]
    fe3c:	ldrb	w24, [x22]
    fe40:	cmp	w23, w24
    fe44:	b.ne	fe5c <lzma_mf_is_supported@@XZ_5.0+0x1e68>  // b.any
    fe48:	add	w19, w19, #0x1
    fe4c:	cmp	w12, w19
    fe50:	add	x22, x22, #0x1
    fe54:	b.ne	fe38 <lzma_mf_is_supported@@XZ_5.0+0x1e44>  // b.any
    fe58:	b	fec0 <lzma_mf_is_supported@@XZ_5.0+0x1ecc>
    fe5c:	cmp	w19, w12
    fe60:	b.eq	fec0 <lzma_mf_is_supported@@XZ_5.0+0x1ecc>  // b.none
    fe64:	mov	w22, w19
    fe68:	ldrb	w21, [x20, x22]
    fe6c:	ldrb	w22, [x14, x22]
    fe70:	cmp	w21, w22
    fe74:	sub	w18, w18, #0x1
    fe78:	b.cs	fe94 <lzma_mf_is_supported@@XZ_5.0+0x1ea0>  // b.hs, b.nlast
    fe7c:	str	w6, [x13]
    fe80:	add	x13, x7, #0x4
    fe84:	mov	w5, w19
    fe88:	mov	x7, x13
    fe8c:	cbnz	w18, fea4 <lzma_mf_is_supported@@XZ_5.0+0x1eb0>
    fe90:	b	feb4 <lzma_mf_is_supported@@XZ_5.0+0x1ec0>
    fe94:	str	w6, [x15]
    fe98:	mov	w3, w19
    fe9c:	mov	x15, x7
    fea0:	cbz	w18, feb4 <lzma_mf_is_supported@@XZ_5.0+0x1ec0>
    fea4:	ldr	w6, [x7]
    fea8:	sub	w7, w16, w6
    feac:	cmp	w7, w2
    feb0:	b.cc	fdf0 <lzma_mf_is_supported@@XZ_5.0+0x1dfc>  // b.lo, b.ul, b.last
    feb4:	str	wzr, [x15]
    feb8:	str	wzr, [x13]
    febc:	b	fed0 <lzma_mf_is_supported@@XZ_5.0+0x1edc>
    fec0:	ldr	w12, [x7]
    fec4:	str	w12, [x13]
    fec8:	ldr	w12, [x7, #4]
    fecc:	str	w12, [x15]
    fed0:	ldp	w13, w12, [x0, #80]
    fed4:	ldp	w15, w14, [x0, #20]
    fed8:	add	w16, w13, #0x1
    fedc:	add	w14, w14, #0x1
    fee0:	cmp	w16, w12
    fee4:	add	w15, w15, w14
    fee8:	csinc	w13, wzr, w13, eq  // eq = none
    feec:	cmn	w15, #0x1
    fef0:	str	w13, [x0, #80]
    fef4:	str	w14, [x0, #24]
    fef8:	b.ne	fd1c <lzma_mf_is_supported@@XZ_5.0+0x1d28>  // b.any
    fefc:	ldr	w13, [x0, #108]
    ff00:	mvn	w12, w12
    ff04:	cbz	w13, ff30 <lzma_mf_is_supported@@XZ_5.0+0x1f3c>
    ff08:	mov	x13, xzr
    ff0c:	lsl	x14, x13, #2
    ff10:	ldr	w15, [x11, x14]
    ff14:	add	x13, x13, #0x1
    ff18:	subs	w15, w15, w12
    ff1c:	csel	w15, wzr, w15, cc  // cc = lo, ul, last
    ff20:	str	w15, [x11, x14]
    ff24:	ldr	w14, [x0, #108]
    ff28:	cmp	x13, x14
    ff2c:	b.cc	ff0c <lzma_mf_is_supported@@XZ_5.0+0x1f18>  // b.lo, b.ul, b.last
    ff30:	ldr	w11, [x0, #112]
    ff34:	cbz	w11, ff60 <lzma_mf_is_supported@@XZ_5.0+0x1f6c>
    ff38:	mov	x11, xzr
    ff3c:	lsl	x13, x11, #2
    ff40:	ldr	w14, [x10, x13]
    ff44:	add	x11, x11, #0x1
    ff48:	subs	w14, w14, w12
    ff4c:	csel	w14, wzr, w14, cc  // cc = lo, ul, last
    ff50:	str	w14, [x10, x13]
    ff54:	ldr	w13, [x0, #112]
    ff58:	cmp	x11, x13
    ff5c:	b.cc	ff3c <lzma_mf_is_supported@@XZ_5.0+0x1f48>  // b.lo, b.ul, b.last
    ff60:	ldr	w10, [x0, #20]
    ff64:	sub	w10, w10, w12
    ff68:	str	w10, [x0, #20]
    ff6c:	b	fd1c <lzma_mf_is_supported@@XZ_5.0+0x1d28>
    ff70:	ldp	x20, x19, [sp, #32]
    ff74:	ldp	x22, x21, [sp, #16]
    ff78:	ldp	x24, x23, [sp], #48
    ff7c:	ret
    ff80:	sub	sp, sp, #0x60
    ff84:	stp	x29, x30, [sp, #32]
    ff88:	stp	x22, x21, [sp, #64]
    ff8c:	stp	x20, x19, [sp, #80]
    ff90:	ldr	x21, [x0]
    ff94:	str	x23, [sp, #48]
    ff98:	mov	x23, x3
    ff9c:	mov	x20, x2
    ffa0:	mov	x22, x0
    ffa4:	mov	x19, x1
    ffa8:	add	x29, sp, #0x20
    ffac:	cbnz	x21, 10008 <lzma_mf_is_supported@@XZ_5.0+0x2014>
    ffb0:	mov	w0, #0x10b8                	// #4280
    ffb4:	mov	x1, x19
    ffb8:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
    ffbc:	cbz	x0, 100ec <lzma_mf_is_supported@@XZ_5.0+0x20f8>
    ffc0:	adrp	x8, 10000 <lzma_mf_is_supported@@XZ_5.0+0x200c>
    ffc4:	adrp	x9, 10000 <lzma_mf_is_supported@@XZ_5.0+0x200c>
    ffc8:	add	x8, x8, #0x108
    ffcc:	add	x9, x9, #0x414
    ffd0:	mov	x21, x0
    ffd4:	movi	v0.2d, #0x0
    ffd8:	stp	x8, x9, [x22, #24]
    ffdc:	mov	x8, #0xffffffffffffffff    	// #-1
    ffe0:	str	x0, [x22]
    ffe4:	str	xzr, [x0]
    ffe8:	str	xzr, [x0, #32]
    ffec:	stp	q0, q0, [x0, #48]
    fff0:	stp	xzr, xzr, [x0, #80]
    fff4:	str	x8, [x0, #96]
    fff8:	stur	q0, [x0, #104]
    fffc:	stur	q0, [x0, #120]
   10000:	stur	q0, [x0, #136]
   10004:	str	xzr, [x0, #152]
   10008:	ldr	x2, [x20, #16]
   1000c:	add	x0, x21, #0x30
   10010:	add	x3, sp, #0x8
   10014:	mov	x1, x19
   10018:	blr	x23
   1001c:	cbnz	w0, 100f0 <lzma_mf_is_supported@@XZ_5.0+0x20fc>
   10020:	ldr	x8, [sp, #8]
   10024:	cmp	x8, #0xfff
   10028:	b.hi	10038 <lzma_mf_is_supported@@XZ_5.0+0x2044>  // b.pmore
   1002c:	mov	w8, #0x1000                	// #4096
   10030:	str	x8, [sp, #8]
   10034:	b	10040 <lzma_mf_is_supported@@XZ_5.0+0x204c>
   10038:	cmn	x8, #0x10
   1003c:	b.hi	100ec <lzma_mf_is_supported@@XZ_5.0+0x20f8>  // b.pmore
   10040:	add	x8, x8, #0xf
   10044:	and	x8, x8, #0xfffffffffffffff0
   10048:	str	x8, [sp, #8]
   1004c:	ldr	x9, [x21, #32]
   10050:	cmp	x9, x8
   10054:	b.eq	10080 <lzma_mf_is_supported@@XZ_5.0+0x208c>  // b.none
   10058:	ldr	x0, [x21]
   1005c:	mov	x1, x19
   10060:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
   10064:	ldr	x0, [sp, #8]
   10068:	mov	x1, x19
   1006c:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
   10070:	str	x0, [x21]
   10074:	cbz	x0, 100ec <lzma_mf_is_supported@@XZ_5.0+0x20f8>
   10078:	ldr	x8, [sp, #8]
   1007c:	str	x8, [x21, #32]
   10080:	ldr	x8, [x22]
   10084:	ldr	x9, [x8]
   10088:	ldr	x10, [x8, #32]
   1008c:	stp	xzr, xzr, [x8, #8]
   10090:	add	x9, x10, x9
   10094:	sturb	wzr, [x9, #-1]
   10098:	strb	wzr, [x8, #40]
   1009c:	ldr	x8, [sp, #16]
   100a0:	cbz	x8, 100d0 <lzma_mf_is_supported@@XZ_5.0+0x20dc>
   100a4:	ldr	x9, [sp, #24]
   100a8:	cbz	x9, 100d0 <lzma_mf_is_supported@@XZ_5.0+0x20dc>
   100ac:	ldr	x10, [sp, #8]
   100b0:	ldr	x0, [x21]
   100b4:	cmp	x9, x10
   100b8:	csel	x22, x9, x10, cc  // cc = lo, ul, last
   100bc:	sub	x9, x9, x22
   100c0:	add	x1, x8, x9
   100c4:	mov	x2, x22
   100c8:	bl	3040 <memcpy@plt>
   100cc:	stp	x22, x22, [x21, #8]
   100d0:	add	x0, x21, #0x58
   100d4:	add	x2, x20, #0x18
   100d8:	mov	x1, x19
   100dc:	strh	wzr, [x21, #160]
   100e0:	stp	xzr, xzr, [x21, #168]
   100e4:	bl	3790 <lzma_version_string@@XZ_5.0+0x134>
   100e8:	b	100f0 <lzma_mf_is_supported@@XZ_5.0+0x20fc>
   100ec:	mov	w0, #0x5                   	// #5
   100f0:	ldp	x20, x19, [sp, #80]
   100f4:	ldp	x22, x21, [sp, #64]
   100f8:	ldr	x23, [sp, #48]
   100fc:	ldp	x29, x30, [sp, #32]
   10100:	add	sp, sp, #0x60
   10104:	ret
   10108:	sub	sp, sp, #0xc0
   1010c:	stp	x29, x30, [sp, #96]
   10110:	stp	x28, x27, [sp, #112]
   10114:	stp	x26, x25, [sp, #128]
   10118:	stp	x24, x23, [sp, #144]
   1011c:	stp	x22, x21, [sp, #160]
   10120:	stp	x20, x19, [sp, #176]
   10124:	ldr	x8, [x0, #112]
   10128:	add	x29, sp, #0x60
   1012c:	mov	x27, x6
   10130:	mov	x19, x4
   10134:	mov	x23, x0
   10138:	stur	x5, [x29, #-16]
   1013c:	stur	x3, [x29, #-40]
   10140:	str	x2, [sp, #48]
   10144:	stur	x7, [x29, #-8]
   10148:	cbz	x8, 10314 <lzma_mf_is_supported@@XZ_5.0+0x2320>
   1014c:	ldr	x25, [x27]
   10150:	cmp	x25, x7
   10154:	b.cs	103d8 <lzma_mf_is_supported@@XZ_5.0+0x23e4>  // b.hs, b.nlast
   10158:	ldr	w8, [x29, #96]
   1015c:	add	x20, x23, #0xb0
   10160:	add	x21, x23, #0x8
   10164:	str	x1, [sp, #24]
   10168:	str	w8, [sp, #20]
   1016c:	add	x8, x23, #0xa8
   10170:	stur	x8, [x29, #-24]
   10174:	add	x8, x23, #0xb8
   10178:	stur	x8, [x29, #-32]
   1017c:	stp	x20, x19, [sp, #32]
   10180:	b	10190 <lzma_mf_is_supported@@XZ_5.0+0x219c>
   10184:	ldr	x20, [sp, #32]
   10188:	cmp	x25, x7
   1018c:	b.cs	103d8 <lzma_mf_is_supported@@XZ_5.0+0x23e4>  // b.hs, b.nlast
   10190:	ldrb	w8, [x23, #160]
   10194:	cbnz	w8, 1020c <lzma_mf_is_supported@@XZ_5.0+0x2218>
   10198:	ldur	x8, [x29, #-24]
   1019c:	ldr	x9, [x20]
   101a0:	ldr	x8, [x8]
   101a4:	cmp	x8, x9
   101a8:	b.ne	1020c <lzma_mf_is_supported@@XZ_5.0+0x2218>  // b.any
   101ac:	ldur	x8, [x29, #-24]
   101b0:	mov	w7, #0x1000                	// #4096
   101b4:	mov	x4, x19
   101b8:	mov	x6, x20
   101bc:	stp	xzr, xzr, [x8]
   101c0:	ldr	x8, [x23, #112]
   101c4:	ldr	x0, [x23, #88]
   101c8:	ldr	w9, [sp, #20]
   101cc:	ldr	x1, [sp, #24]
   101d0:	ldr	x2, [sp, #48]
   101d4:	ldp	x3, x5, [x29, #-40]
   101d8:	str	w9, [sp]
   101dc:	blr	x8
   101e0:	cbz	w0, 10200 <lzma_mf_is_supported@@XZ_5.0+0x220c>
   101e4:	mov	w28, w0
   101e8:	cmp	w0, #0x1
   101ec:	b.ne	103dc <lzma_mf_is_supported@@XZ_5.0+0x23e8>  // b.any
   101f0:	ldur	x7, [x29, #-8]
   101f4:	mov	w8, #0x1                   	// #1
   101f8:	strb	w8, [x23, #160]
   101fc:	b	1020c <lzma_mf_is_supported@@XZ_5.0+0x2218>
   10200:	ldr	x8, [x20]
   10204:	ldur	x7, [x29, #-8]
   10208:	cbz	x8, 103d8 <lzma_mf_is_supported@@XZ_5.0+0x23e4>
   1020c:	ldrb	w8, [x23, #161]
   10210:	ldr	x22, [x23, #176]
   10214:	mov	x19, x27
   10218:	cbnz	w8, 10400 <lzma_mf_is_supported@@XZ_5.0+0x240c>
   1021c:	ldr	x20, [x23, #8]
   10220:	ldr	x8, [x23, #32]
   10224:	cmp	x20, x8
   10228:	b.ne	10234 <lzma_mf_is_supported@@XZ_5.0+0x2240>  // b.any
   1022c:	mov	x20, xzr
   10230:	str	xzr, [x21]
   10234:	sub	x9, x7, x25
   10238:	sub	x8, x8, x20
   1023c:	cmp	x9, x8
   10240:	csel	x8, x9, x8, cc  // cc = lo, ul, last
   10244:	add	x8, x8, x20
   10248:	str	x8, [x23, #24]
   1024c:	ldp	x0, x10, [x23, #48]
   10250:	ldp	x2, x3, [x29, #-32]
   10254:	mov	x1, x23
   10258:	mov	x4, x22
   1025c:	blr	x10
   10260:	ldp	x27, x26, [x23]
   10264:	ldur	x8, [x29, #-16]
   10268:	mov	w28, w0
   1026c:	sub	x24, x26, x20
   10270:	add	x0, x8, x25
   10274:	add	x1, x27, x20
   10278:	mov	x2, x24
   1027c:	bl	3040 <memcpy@plt>
   10280:	add	x25, x24, x25
   10284:	str	x25, [x19]
   10288:	ldrb	w8, [x23, #40]
   1028c:	cbz	w8, 102b8 <lzma_mf_is_supported@@XZ_5.0+0x22c4>
   10290:	stp	xzr, xzr, [x21]
   10294:	ldr	x8, [x23, #32]
   10298:	ldur	x7, [x29, #-8]
   1029c:	add	x8, x8, x27
   102a0:	sturb	wzr, [x8, #-1]
   102a4:	strb	wzr, [x23, #40]
   102a8:	cbnz	w28, 102d8 <lzma_mf_is_supported@@XZ_5.0+0x22e4>
   102ac:	cmp	x25, x7
   102b0:	b.ne	1021c <lzma_mf_is_supported@@XZ_5.0+0x2228>  // b.any
   102b4:	b	102d8 <lzma_mf_is_supported@@XZ_5.0+0x22e4>
   102b8:	ldur	x7, [x29, #-8]
   102bc:	cbnz	w28, 102d8 <lzma_mf_is_supported@@XZ_5.0+0x22e4>
   102c0:	cmp	x25, x7
   102c4:	b.eq	102d8 <lzma_mf_is_supported@@XZ_5.0+0x22e4>  // b.none
   102c8:	ldr	x8, [x23, #32]
   102cc:	cmp	x26, x8
   102d0:	b.cs	1021c <lzma_mf_is_supported@@XZ_5.0+0x2228>  // b.hs, b.nlast
   102d4:	b	102f8 <lzma_mf_is_supported@@XZ_5.0+0x2304>
   102d8:	cbz	w28, 102f8 <lzma_mf_is_supported@@XZ_5.0+0x2304>
   102dc:	mov	x27, x19
   102e0:	ldr	x19, [sp, #40]
   102e4:	cmp	w28, #0x1
   102e8:	b.ne	103dc <lzma_mf_is_supported@@XZ_5.0+0x23e8>  // b.any
   102ec:	mov	w8, #0x1                   	// #1
   102f0:	strb	w8, [x23, #161]
   102f4:	b	10184 <lzma_mf_is_supported@@XZ_5.0+0x2190>
   102f8:	mov	x27, x19
   102fc:	ldr	x19, [sp, #40]
   10300:	cmp	x25, x7
   10304:	b.cs	10184 <lzma_mf_is_supported@@XZ_5.0+0x2190>  // b.hs, b.nlast
   10308:	ldrb	w8, [x23, #160]
   1030c:	cbz	w8, 10184 <lzma_mf_is_supported@@XZ_5.0+0x2190>
   10310:	b	10404 <lzma_mf_is_supported@@XZ_5.0+0x2410>
   10314:	add	x21, x23, #0x8
   10318:	ldr	x24, [x23, #8]
   1031c:	ldr	x8, [x23, #32]
   10320:	cmp	x24, x8
   10324:	b.ne	10330 <lzma_mf_is_supported@@XZ_5.0+0x233c>  // b.any
   10328:	mov	x24, xzr
   1032c:	str	xzr, [x21]
   10330:	ldr	x26, [x27]
   10334:	sub	x8, x8, x24
   10338:	ldp	x0, x10, [x23, #48]
   1033c:	ldr	x2, [sp, #48]
   10340:	sub	x9, x7, x26
   10344:	ldur	x3, [x29, #-40]
   10348:	cmp	x9, x8
   1034c:	csel	x8, x9, x8, cc  // cc = lo, ul, last
   10350:	add	x8, x8, x24
   10354:	mov	x1, x23
   10358:	mov	x4, x19
   1035c:	str	x8, [x23, #24]
   10360:	blr	x10
   10364:	ldp	x25, x20, [x23]
   10368:	ldur	x8, [x29, #-16]
   1036c:	mov	w28, w0
   10370:	sub	x22, x20, x24
   10374:	add	x0, x8, x26
   10378:	add	x1, x25, x24
   1037c:	mov	x2, x22
   10380:	bl	3040 <memcpy@plt>
   10384:	add	x8, x22, x26
   10388:	str	x8, [x27]
   1038c:	ldrb	w9, [x23, #40]
   10390:	cbz	w9, 103bc <lzma_mf_is_supported@@XZ_5.0+0x23c8>
   10394:	stp	xzr, xzr, [x21]
   10398:	ldr	x9, [x23, #32]
   1039c:	add	x9, x9, x25
   103a0:	sturb	wzr, [x9, #-1]
   103a4:	strb	wzr, [x23, #40]
   103a8:	cbnz	w28, 103dc <lzma_mf_is_supported@@XZ_5.0+0x23e8>
   103ac:	ldur	x7, [x29, #-8]
   103b0:	cmp	x8, x7
   103b4:	b.ne	10318 <lzma_mf_is_supported@@XZ_5.0+0x2324>  // b.any
   103b8:	b	103dc <lzma_mf_is_supported@@XZ_5.0+0x23e8>
   103bc:	cbnz	w28, 103dc <lzma_mf_is_supported@@XZ_5.0+0x23e8>
   103c0:	ldur	x7, [x29, #-8]
   103c4:	cmp	x8, x7
   103c8:	b.eq	103dc <lzma_mf_is_supported@@XZ_5.0+0x23e8>  // b.none
   103cc:	ldr	x8, [x23, #32]
   103d0:	cmp	x20, x8
   103d4:	b.cs	10318 <lzma_mf_is_supported@@XZ_5.0+0x2324>  // b.hs, b.nlast
   103d8:	mov	w28, wzr
   103dc:	mov	w0, w28
   103e0:	ldp	x20, x19, [sp, #176]
   103e4:	ldp	x22, x21, [sp, #160]
   103e8:	ldp	x24, x23, [sp, #144]
   103ec:	ldp	x26, x25, [sp, #128]
   103f0:	ldp	x28, x27, [sp, #112]
   103f4:	ldp	x29, x30, [sp, #96]
   103f8:	add	sp, sp, #0xc0
   103fc:	ret
   10400:	cbz	x22, 1040c <lzma_mf_is_supported@@XZ_5.0+0x2418>
   10404:	mov	w28, #0x9                   	// #9
   10408:	b	103dc <lzma_mf_is_supported@@XZ_5.0+0x23e8>
   1040c:	ldrb	w28, [x23, #160]
   10410:	b	103dc <lzma_mf_is_supported@@XZ_5.0+0x23e8>
   10414:	stp	x29, x30, [sp, #-32]!
   10418:	stp	x20, x19, [sp, #16]
   1041c:	mov	x20, x0
   10420:	add	x0, x0, #0x58
   10424:	mov	x29, sp
   10428:	mov	x19, x1
   1042c:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
   10430:	ldr	x0, [x20]
   10434:	mov	x1, x19
   10438:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
   1043c:	ldr	x8, [x20, #80]
   10440:	ldr	x0, [x20, #48]
   10444:	mov	x1, x19
   10448:	cbz	x8, 10454 <lzma_mf_is_supported@@XZ_5.0+0x2460>
   1044c:	blr	x8
   10450:	b	10458 <lzma_mf_is_supported@@XZ_5.0+0x2464>
   10454:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
   10458:	mov	x0, x20
   1045c:	mov	x1, x19
   10460:	ldp	x20, x19, [sp, #16]
   10464:	ldp	x29, x30, [sp], #32
   10468:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
   1046c:	mov	w8, #0x10b8                	// #4280
   10470:	add	x0, x0, x8
   10474:	ret
   10478:	ldr	x2, [x0, #72]
   1047c:	ldr	x0, [x0, #48]
   10480:	br	x2

0000000000010484 <lzma_lzma_preset@@XZ_5.0>:
   10484:	and	x9, x1, #0x1f
   10488:	cmp	w9, #0x9
   1048c:	mov	w8, #0x1                   	// #1
   10490:	b.hi	10594 <lzma_lzma_preset@@XZ_5.0+0x110>  // b.pmore
   10494:	and	w10, w1, #0x7fffffe0
   10498:	cbnz	w10, 10594 <lzma_lzma_preset@@XZ_5.0+0x110>
   1049c:	adrp	x11, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
   104a0:	adrp	x10, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
   104a4:	add	x11, x11, #0x618
   104a8:	adrp	x8, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
   104ac:	ldr	d1, [x10, #1552]
   104b0:	ldrb	w10, [x11, x9]
   104b4:	ldr	d0, [x8, #1544]
   104b8:	mov	w8, #0x1                   	// #1
   104bc:	cmp	w9, #0x3
   104c0:	lsl	w10, w8, w10
   104c4:	str	xzr, [x0, #8]
   104c8:	stp	d0, d1, [x0, #16]
   104cc:	str	w10, [x0]
   104d0:	b.hi	10514 <lzma_lzma_preset@@XZ_5.0+0x90>  // b.pmore
   104d4:	adrp	x10, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
   104d8:	str	w8, [x0, #32]
   104dc:	cmp	w9, #0x0
   104e0:	mov	w8, #0x3                   	// #3
   104e4:	add	x10, x10, #0x622
   104e8:	cinc	w11, w8, ne  // ne = any
   104ec:	ldrb	w8, [x10, x9]
   104f0:	cmp	w9, #0x2
   104f4:	mov	w10, #0x111                 	// #273
   104f8:	mov	w12, #0x80                  	// #128
   104fc:	csel	w10, w12, w10, cc  // cc = lo, ul, last
   10500:	stp	w10, w11, [x0, #36]
   10504:	str	w8, [x0, #44]
   10508:	tbnz	w1, #31, 1054c <lzma_lzma_preset@@XZ_5.0+0xc8>
   1050c:	mov	w0, wzr
   10510:	ret
   10514:	mov	w10, #0x2                   	// #2
   10518:	cmp	w9, #0x5
   1051c:	mov	w11, #0x40                  	// #64
   10520:	mov	w12, #0x20                  	// #32
   10524:	mov	w13, #0x10                  	// #16
   10528:	str	w10, [x0, #32]
   1052c:	csel	w10, w12, w11, eq  // eq = none
   10530:	cmp	w9, #0x4
   10534:	mov	w8, wzr
   10538:	csel	w10, w13, w10, eq  // eq = none
   1053c:	mov	w11, #0x14                  	// #20
   10540:	stp	w10, w11, [x0, #36]
   10544:	str	w8, [x0, #44]
   10548:	tbz	w1, #31, 1050c <lzma_lzma_preset@@XZ_5.0+0x88>
   1054c:	mov	w8, #0x2                   	// #2
   10550:	mov	w10, #0x14                  	// #20
   10554:	cmp	w9, #0x5
   10558:	str	w8, [x0, #32]
   1055c:	str	w10, [x0, #40]
   10560:	b.eq	1056c <lzma_lzma_preset@@XZ_5.0+0xe8>  // b.none
   10564:	cmp	w9, #0x3
   10568:	b.ne	10580 <lzma_lzma_preset@@XZ_5.0+0xfc>  // b.any
   1056c:	mov	w9, #0xc0                  	// #192
   10570:	str	w9, [x0, #36]
   10574:	str	wzr, [x0, #44]
   10578:	mov	w0, wzr
   1057c:	ret
   10580:	mov	w8, wzr
   10584:	mov	w9, #0x111                 	// #273
   10588:	mov	w10, #0x200                 	// #512
   1058c:	str	w9, [x0, #36]
   10590:	str	w10, [x0, #44]
   10594:	mov	w0, w8
   10598:	ret
   1059c:	sub	sp, sp, #0x70
   105a0:	ldrb	w8, [x0, #2957]
   105a4:	stp	x24, x23, [sp, #64]
   105a8:	stp	x22, x21, [sp, #80]
   105ac:	stp	x20, x19, [sp, #96]
   105b0:	mov	w23, w5
   105b4:	mov	x20, x4
   105b8:	mov	x21, x3
   105bc:	mov	x22, x2
   105c0:	mov	x19, x0
   105c4:	mov	x24, x1
   105c8:	stp	x29, x30, [sp, #16]
   105cc:	stp	x28, x27, [sp, #32]
   105d0:	stp	x26, x25, [sp, #48]
   105d4:	add	x29, sp, #0x10
   105d8:	cbnz	w8, 1075c <lzma_lzma_preset@@XZ_5.0+0x2d8>
   105dc:	ldr	w8, [x24, #24]
   105e0:	ldr	w9, [x24, #32]
   105e4:	cmp	w8, w9
   105e8:	b.ne	105f8 <lzma_lzma_preset@@XZ_5.0+0x174>  // b.any
   105ec:	ldr	w8, [x24, #104]
   105f0:	cbnz	w8, 10754 <lzma_lzma_preset@@XZ_5.0+0x2d0>
   105f4:	b	10778 <lzma_lzma_preset@@XZ_5.0+0x2f4>
   105f8:	ldr	x8, [x24, #56]
   105fc:	mov	w1, #0x1                   	// #1
   10600:	mov	x0, x24
   10604:	blr	x8
   10608:	ldr	x9, [x19, #24]
   1060c:	add	x8, x19, #0x28
   10610:	mov	w10, #0x6b9c                	// #27548
   10614:	ldr	x12, [x24]
   10618:	str	wzr, [x8, x9, lsl #2]
   1061c:	ldr	x11, [x19, #24]
   10620:	add	x9, x19, #0x110
   10624:	add	x10, x19, x10
   10628:	str	wzr, [x24, #28]
   1062c:	str	x10, [x9, x11, lsl #3]
   10630:	add	x11, x11, #0x1
   10634:	str	x11, [x19, #24]
   10638:	ldrb	w10, [x12]
   1063c:	add	x14, x19, #0xb9e
   10640:	mov	w15, #0x4                   	// #4
   10644:	lsr	x12, x10, #7
   10648:	str	w12, [x8, x11, lsl #2]
   1064c:	ldr	x13, [x19, #24]
   10650:	add	x11, x19, #0xb9c
   10654:	bfi	x15, x12, #1, #1
   10658:	add	x12, x11, x15
   1065c:	str	x14, [x9, x13, lsl #3]
   10660:	ubfx	x14, x10, #6, #1
   10664:	add	x13, x13, #0x1
   10668:	str	x13, [x19, #24]
   1066c:	str	w14, [x8, x13, lsl #2]
   10670:	ldr	x13, [x19, #24]
   10674:	ubfx	x14, x10, #5, #1
   10678:	bfxil	x15, x10, #6, #1
   1067c:	str	x12, [x9, x13, lsl #3]
   10680:	add	x13, x13, #0x1
   10684:	str	x13, [x19, #24]
   10688:	str	w14, [x8, x13, lsl #2]
   1068c:	ldr	x13, [x19, #24]
   10690:	lsl	x14, x15, #1
   10694:	add	x15, x11, x14
   10698:	ubfx	x12, x10, #4, #1
   1069c:	str	x15, [x9, x13, lsl #3]
   106a0:	add	x13, x13, #0x1
   106a4:	str	x13, [x19, #24]
   106a8:	str	w12, [x8, x13, lsl #2]
   106ac:	ldr	x13, [x19, #24]
   106b0:	bfxil	x14, x10, #5, #1
   106b4:	add	x15, x11, x14, lsl #1
   106b8:	and	x14, x14, #0xffffffff
   106bc:	str	x15, [x9, x13, lsl #3]
   106c0:	ubfx	x15, x10, #3, #1
   106c4:	add	x13, x13, #0x1
   106c8:	str	x13, [x19, #24]
   106cc:	str	w15, [x8, x13, lsl #2]
   106d0:	ldr	x15, [x19, #24]
   106d4:	bfi	x12, x14, #1, #32
   106d8:	add	x14, x11, x12, lsl #1
   106dc:	ubfx	x13, x10, #2, #1
   106e0:	str	x14, [x9, x15, lsl #3]
   106e4:	add	x15, x15, #0x1
   106e8:	str	x15, [x19, #24]
   106ec:	str	w13, [x8, x15, lsl #2]
   106f0:	ldr	x13, [x19, #24]
   106f4:	lsl	w12, w12, #1
   106f8:	bfxil	x12, x10, #3, #1
   106fc:	add	x15, x11, x12, lsl #1
   10700:	ubfx	x14, x10, #1, #1
   10704:	str	x15, [x9, x13, lsl #3]
   10708:	add	x13, x13, #0x1
   1070c:	str	x13, [x19, #24]
   10710:	str	w14, [x8, x13, lsl #2]
   10714:	ldr	x13, [x19, #24]
   10718:	lsl	w12, w12, #1
   1071c:	bfxil	x12, x10, #2, #1
   10720:	add	x14, x11, x12, lsl #1
   10724:	and	w15, w10, #0x1
   10728:	str	x14, [x9, x13, lsl #3]
   1072c:	add	x13, x13, #0x1
   10730:	str	x13, [x19, #24]
   10734:	str	w15, [x8, x13, lsl #2]
   10738:	ldr	x8, [x19, #24]
   1073c:	lsl	w12, w12, #1
   10740:	bfxil	x12, x10, #1, #1
   10744:	add	x10, x11, x12, lsl #1
   10748:	str	x10, [x9, x8, lsl #3]
   1074c:	add	x8, x8, #0x1
   10750:	str	x8, [x19, #24]
   10754:	mov	w8, #0x1                   	// #1
   10758:	strb	w8, [x19, #2957]
   1075c:	ldp	w25, w26, [x24, #24]
   10760:	mov	x0, x19
   10764:	mov	x1, x22
   10768:	mov	x2, x21
   1076c:	mov	x3, x20
   10770:	bl	10dd0 <lzma_lzma_preset@@XZ_5.0+0x94c>
   10774:	tbz	w0, #0, 10780 <lzma_lzma_preset@@XZ_5.0+0x2fc>
   10778:	mov	w0, wzr
   1077c:	b	10db0 <lzma_lzma_preset@@XZ_5.0+0x92c>
   10780:	mov	w8, #0xba48                	// #47688
   10784:	sub	w25, w25, w26
   10788:	mov	w26, #0x600                 	// #1536
   1078c:	mov	w28, #0x1                   	// #1
   10790:	add	x8, x19, x8
   10794:	str	x8, [sp]
   10798:	b	107f4 <lzma_lzma_preset@@XZ_5.0+0x370>
   1079c:	str	wzr, [x11]
   107a0:	ldr	x11, [x19, #24]
   107a4:	sub	w2, w9, #0x4
   107a8:	mov	x0, x19
   107ac:	mov	w1, w8
   107b0:	add	x12, x19, x11, lsl #3
   107b4:	add	x11, x11, #0x1
   107b8:	mov	w3, w27
   107bc:	str	x10, [x12, #272]
   107c0:	str	x11, [x19, #24]
   107c4:	bl	11cd4 <lzma_mode_is_supported@@XZ_5.0+0x10>
   107c8:	ldr	w8, [x24, #28]
   107cc:	ldur	w9, [x29, #-4]
   107d0:	mov	x0, x19
   107d4:	mov	x1, x22
   107d8:	sub	w8, w8, w27
   107dc:	mov	x2, x21
   107e0:	mov	x3, x20
   107e4:	str	w8, [x24, #28]
   107e8:	add	w25, w9, w25
   107ec:	bl	10dd0 <lzma_lzma_preset@@XZ_5.0+0x94c>
   107f0:	tbnz	w0, #0, 10778 <lzma_lzma_preset@@XZ_5.0+0x2f4>
   107f4:	ldr	w8, [x24, #24]
   107f8:	cmn	w23, #0x1
   107fc:	b.eq	1082c <lzma_lzma_preset@@XZ_5.0+0x3a8>  // b.none
   10800:	ldr	w9, [x24, #28]
   10804:	sub	w9, w8, w9
   10808:	cmp	w9, w23
   1080c:	b.cs	10cb0 <lzma_lzma_preset@@XZ_5.0+0x82c>  // b.hs, b.nlast
   10810:	ldr	x9, [x21]
   10814:	ldr	x10, [x19, #8]
   10818:	add	x9, x9, x10
   1081c:	add	x9, x9, #0x4
   10820:	mov	w10, #0xeffe                	// #61438
   10824:	cmp	x9, x10
   10828:	b.hi	10cb0 <lzma_lzma_preset@@XZ_5.0+0x82c>  // b.pmore
   1082c:	ldr	w9, [x24, #32]
   10830:	cmp	w8, w9
   10834:	b.cc	10848 <lzma_lzma_preset@@XZ_5.0+0x3c4>  // b.lo, b.ul, b.last
   10838:	ldr	w8, [x24, #104]
   1083c:	cbz	w8, 10778 <lzma_lzma_preset@@XZ_5.0+0x2f4>
   10840:	ldr	w8, [x24, #28]
   10844:	cbz	w8, 10cb0 <lzma_lzma_preset@@XZ_5.0+0x82c>
   10848:	ldrb	w8, [x19, #2956]
   1084c:	cbz	w8, 10868 <lzma_lzma_preset@@XZ_5.0+0x3e4>
   10850:	add	x2, sp, #0x8
   10854:	sub	x3, x29, #0x4
   10858:	mov	x0, x19
   1085c:	mov	x1, x24
   10860:	bl	12468 <lzma_mode_is_supported@@XZ_5.0+0x7a4>
   10864:	b	10880 <lzma_lzma_preset@@XZ_5.0+0x3fc>
   10868:	add	x2, sp, #0x8
   1086c:	sub	x3, x29, #0x4
   10870:	mov	x0, x19
   10874:	mov	x1, x24
   10878:	mov	w4, w25
   1087c:	bl	12acc <lzma_mode_is_supported@@XZ_5.0+0xe08>
   10880:	ldr	w8, [x19, #2960]
   10884:	ldr	w10, [x19, #736]
   10888:	ldr	x11, [x19, #24]
   1088c:	ldr	w9, [sp, #8]
   10890:	ldur	w27, [x29, #-4]
   10894:	and	w8, w8, w25
   10898:	add	x10, x19, x10, lsl #5
   1089c:	add	x12, x19, x11, lsl #2
   108a0:	add	x10, x10, w8, uxtw #1
   108a4:	mov	w11, #0x6b9c                	// #27548
   108a8:	cmn	w9, #0x1
   108ac:	add	x11, x10, x11
   108b0:	add	x10, x12, #0x28
   108b4:	b.eq	10978 <lzma_lzma_preset@@XZ_5.0+0x4f4>  // b.none
   108b8:	str	w28, [x10]
   108bc:	ldr	x10, [x19, #24]
   108c0:	cmp	w9, #0x3
   108c4:	add	x12, x19, x10, lsl #3
   108c8:	str	x11, [x12, #272]
   108cc:	ldr	w11, [x19, #736]
   108d0:	add	x10, x10, #0x1
   108d4:	str	x10, [x19, #24]
   108d8:	add	x12, x19, x10, lsl #2
   108dc:	add	x10, x19, x11, lsl #1
   108e0:	mov	w11, #0x6d1c                	// #27932
   108e4:	add	x10, x10, x11
   108e8:	add	x11, x12, #0x28
   108ec:	b.hi	1079c <lzma_lzma_preset@@XZ_5.0+0x318>  // b.pmore
   108f0:	str	w28, [x11]
   108f4:	ldr	x11, [x19, #24]
   108f8:	add	x12, x19, x11, lsl #3
   108fc:	add	x11, x11, #0x1
   10900:	str	x10, [x12, #272]
   10904:	str	x11, [x19, #24]
   10908:	cbz	w9, 10b8c <lzma_lzma_preset@@XZ_5.0+0x708>
   1090c:	add	x10, x19, x9, lsl #2
   10910:	add	x13, x19, #0x28
   10914:	ldr	w12, [x19, #736]
   10918:	ldr	w10, [x10, #740]
   1091c:	str	w28, [x13, x11, lsl #2]
   10920:	ldr	x11, [x19, #24]
   10924:	add	x12, x19, x12, lsl #1
   10928:	mov	w14, #0x6d34                	// #27956
   1092c:	add	x12, x12, x14
   10930:	add	x14, x19, x11, lsl #3
   10934:	str	x12, [x14, #272]
   10938:	ldr	w12, [x19, #736]
   1093c:	add	x14, x11, #0x1
   10940:	cmp	w9, #0x1
   10944:	str	x14, [x19, #24]
   10948:	add	x11, x19, x12, lsl #1
   1094c:	mov	w12, #0x6d4c                	// #27980
   10950:	add	x11, x11, x12
   10954:	add	x12, x13, x14, lsl #2
   10958:	b.ne	10c24 <lzma_lzma_preset@@XZ_5.0+0x7a0>  // b.any
   1095c:	str	wzr, [x12]
   10960:	ldr	x9, [x19, #24]
   10964:	add	x12, x19, x9, lsl #3
   10968:	add	x9, x9, #0x1
   1096c:	str	x11, [x12, #272]
   10970:	str	x9, [x19, #24]
   10974:	b	10c80 <lzma_lzma_preset@@XZ_5.0+0x7fc>
   10978:	str	wzr, [x10]
   1097c:	ldp	w8, w9, [x24, #24]
   10980:	ldr	x10, [x19, #24]
   10984:	ldr	x12, [x24]
   10988:	mov	w16, #0x8                   	// #8
   1098c:	sub	w13, w8, w9
   10990:	add	x8, x19, x10, lsl #3
   10994:	str	x11, [x8, #272]
   10998:	add	x10, x10, #0x1
   1099c:	ldr	w11, [x19, #2968]
   109a0:	sub	w9, w13, #0x1
   109a4:	str	x10, [x19, #24]
   109a8:	ldr	w14, [x19, #2964]
   109ac:	ldrb	w9, [x12, w9, uxtw]
   109b0:	ldr	w15, [x19, #736]
   109b4:	ldrb	w8, [x12, w13, uxtw]
   109b8:	and	w11, w11, w25
   109bc:	lsl	w11, w11, w14
   109c0:	sub	w14, w16, w14
   109c4:	lsr	w9, w9, w14
   109c8:	cmp	w15, #0x6
   109cc:	add	w9, w9, w11
   109d0:	b.hi	10afc <lzma_lzma_preset@@XZ_5.0+0x678>  // b.pmore
   109d4:	lsr	x12, x8, #7
   109d8:	madd	x11, x9, x26, x19
   109dc:	add	x9, x19, #0x28
   109e0:	str	w12, [x9, x10, lsl #2]
   109e4:	ldr	x13, [x19, #24]
   109e8:	add	x10, x19, #0x110
   109ec:	add	x15, x11, #0xb9e
   109f0:	ubfx	x14, x8, #6, #1
   109f4:	str	x15, [x10, x13, lsl #3]
   109f8:	add	x13, x13, #0x1
   109fc:	str	x13, [x19, #24]
   10a00:	str	w14, [x9, x13, lsl #2]
   10a04:	ldr	x14, [x19, #24]
   10a08:	mov	w15, #0x4                   	// #4
   10a0c:	add	x11, x11, #0xb9c
   10a10:	bfi	x15, x12, #1, #1
   10a14:	add	x12, x11, x15
   10a18:	ubfx	x13, x8, #5, #1
   10a1c:	str	x12, [x10, x14, lsl #3]
   10a20:	add	x14, x14, #0x1
   10a24:	str	x14, [x19, #24]
   10a28:	str	w13, [x9, x14, lsl #2]
   10a2c:	ldr	x13, [x19, #24]
   10a30:	bfxil	x15, x8, #6, #1
   10a34:	lsl	x14, x15, #1
   10a38:	add	x15, x11, x14
   10a3c:	ubfx	x12, x8, #4, #1
   10a40:	str	x15, [x10, x13, lsl #3]
   10a44:	add	x13, x13, #0x1
   10a48:	str	x13, [x19, #24]
   10a4c:	str	w12, [x9, x13, lsl #2]
   10a50:	ldr	x13, [x19, #24]
   10a54:	bfxil	x14, x8, #5, #1
   10a58:	add	x15, x11, x14, lsl #1
   10a5c:	and	x14, x14, #0xffffffff
   10a60:	str	x15, [x10, x13, lsl #3]
   10a64:	ubfx	x15, x8, #3, #1
   10a68:	add	x13, x13, #0x1
   10a6c:	str	x13, [x19, #24]
   10a70:	str	w15, [x9, x13, lsl #2]
   10a74:	ldr	x15, [x19, #24]
   10a78:	bfi	x12, x14, #1, #32
   10a7c:	add	x14, x11, x12, lsl #1
   10a80:	ubfx	x13, x8, #2, #1
   10a84:	str	x14, [x10, x15, lsl #3]
   10a88:	add	x15, x15, #0x1
   10a8c:	str	x15, [x19, #24]
   10a90:	str	w13, [x9, x15, lsl #2]
   10a94:	ldr	x13, [x19, #24]
   10a98:	lsl	w12, w12, #1
   10a9c:	bfxil	x12, x8, #3, #1
   10aa0:	add	x15, x11, x12, lsl #1
   10aa4:	ubfx	x14, x8, #1, #1
   10aa8:	str	x15, [x10, x13, lsl #3]
   10aac:	add	x13, x13, #0x1
   10ab0:	str	x13, [x19, #24]
   10ab4:	str	w14, [x9, x13, lsl #2]
   10ab8:	ldr	x13, [x19, #24]
   10abc:	lsl	w12, w12, #1
   10ac0:	bfxil	x12, x8, #2, #1
   10ac4:	add	x14, x11, x12, lsl #1
   10ac8:	and	w15, w8, #0x1
   10acc:	str	x14, [x10, x13, lsl #3]
   10ad0:	add	x13, x13, #0x1
   10ad4:	str	x13, [x19, #24]
   10ad8:	str	w15, [x9, x13, lsl #2]
   10adc:	ldr	x9, [x19, #24]
   10ae0:	lsl	w12, w12, #1
   10ae4:	bfxil	x12, x8, #1, #1
   10ae8:	add	x8, x11, x12, lsl #1
   10aec:	str	x8, [x10, x9, lsl #3]
   10af0:	add	x8, x9, #0x1
   10af4:	str	x8, [x19, #24]
   10af8:	b	10b64 <lzma_lzma_preset@@XZ_5.0+0x6e0>
   10afc:	ldr	w11, [x19, #740]
   10b00:	mvn	w11, w11
   10b04:	add	w11, w13, w11
   10b08:	ldrb	w11, [x12, w11, uxtw]
   10b0c:	orr	w12, w8, #0x100
   10b10:	mov	w8, #0x100                 	// #256
   10b14:	lsl	w11, w11, #1
   10b18:	ubfx	w14, w12, #7, #1
   10b1c:	add	x10, x19, x10, lsl #2
   10b20:	add	w13, w8, w12, lsr #8
   10b24:	str	w14, [x10, #40]
   10b28:	and	w10, w11, w8
   10b2c:	add	w10, w13, w10
   10b30:	ldr	x13, [x19, #24]
   10b34:	madd	x15, x9, x26, x19
   10b38:	cmp	w12, #0x8, lsl #12
   10b3c:	lsl	w12, w12, #1
   10b40:	eor	w14, w12, w11
   10b44:	add	x10, x15, w10, uxtw #1
   10b48:	add	x15, x10, #0xb9c
   10b4c:	add	x16, x19, x13, lsl #3
   10b50:	add	x10, x13, #0x1
   10b54:	bic	w8, w8, w14
   10b58:	str	x15, [x16, #272]
   10b5c:	str	x10, [x19, #24]
   10b60:	b.cc	10b14 <lzma_lzma_preset@@XZ_5.0+0x690>  // b.lo, b.ul, b.last
   10b64:	ldr	w8, [x19, #736]
   10b68:	mov	w9, #0xfffffffa            	// #-6
   10b6c:	mov	w10, #0xfffffffd            	// #-3
   10b70:	cmp	w8, #0xa
   10b74:	csel	w9, w10, w9, cc  // cc = lo, ul, last
   10b78:	add	w9, w9, w8
   10b7c:	cmp	w8, #0x4
   10b80:	csel	w8, wzr, w9, cc  // cc = lo, ul, last
   10b84:	str	w8, [x19, #736]
   10b88:	b	107c8 <lzma_lzma_preset@@XZ_5.0+0x344>
   10b8c:	ldr	w9, [x19, #736]
   10b90:	add	x10, x19, #0x28
   10b94:	str	wzr, [x10, x11, lsl #2]
   10b98:	ldr	x11, [x19, #24]
   10b9c:	add	x9, x19, x9, lsl #1
   10ba0:	mov	w14, #0x6d34                	// #27956
   10ba4:	add	x12, x19, #0x110
   10ba8:	add	x9, x9, x14
   10bac:	cmp	w27, #0x1
   10bb0:	str	x9, [x12, x11, lsl #3]
   10bb4:	cset	w13, ne  // ne = any
   10bb8:	add	x9, x11, #0x1
   10bbc:	ldr	w11, [x19, #736]
   10bc0:	str	x9, [x19, #24]
   10bc4:	str	w13, [x10, x9, lsl #2]
   10bc8:	ldr	x9, [x19, #24]
   10bcc:	add	x10, x19, x11, lsl #5
   10bd0:	add	x10, x10, x8, lsl #1
   10bd4:	mov	w13, #0x6d7c                	// #28028
   10bd8:	add	x11, x9, #0x1
   10bdc:	add	x10, x10, x13
   10be0:	str	x10, [x12, x9, lsl #3]
   10be4:	str	x11, [x19, #24]
   10be8:	cmp	w27, #0x1
   10bec:	b.eq	10c94 <lzma_lzma_preset@@XZ_5.0+0x810>  // b.none
   10bf0:	ldrb	w4, [x19, #2956]
   10bf4:	ldr	x1, [sp]
   10bf8:	mov	x0, x19
   10bfc:	mov	w2, w8
   10c00:	mov	w3, w27
   10c04:	bl	11ff8 <lzma_mode_is_supported@@XZ_5.0+0x334>
   10c08:	ldr	w8, [x19, #736]
   10c0c:	mov	w9, #0xb                   	// #11
   10c10:	cmp	w8, #0x7
   10c14:	mov	w8, #0x8                   	// #8
   10c18:	csel	w8, w8, w9, cc  // cc = lo, ul, last
   10c1c:	str	w8, [x19, #736]
   10c20:	b	107c8 <lzma_lzma_preset@@XZ_5.0+0x344>
   10c24:	str	w28, [x12]
   10c28:	ldr	x12, [x19, #24]
   10c2c:	add	x13, x19, #0x110
   10c30:	sub	w14, w9, #0x2
   10c34:	cmp	w9, #0x3
   10c38:	str	x11, [x13, x12, lsl #3]
   10c3c:	add	x11, x12, #0x1
   10c40:	str	x11, [x19, #24]
   10c44:	ldr	w12, [x19, #736]
   10c48:	add	x11, x19, x11, lsl #2
   10c4c:	str	w14, [x11, #40]
   10c50:	ldr	x11, [x19, #24]
   10c54:	add	x12, x19, x12, lsl #1
   10c58:	mov	w14, #0x6d64                	// #28004
   10c5c:	add	x12, x12, x14
   10c60:	str	x12, [x13, x11, lsl #3]
   10c64:	add	x11, x11, #0x1
   10c68:	str	x11, [x19, #24]
   10c6c:	b.ne	10c78 <lzma_lzma_preset@@XZ_5.0+0x7f4>  // b.any
   10c70:	ldr	w9, [x19, #748]
   10c74:	str	w9, [x19, #752]
   10c78:	ldr	w9, [x19, #744]
   10c7c:	str	w9, [x19, #748]
   10c80:	ldr	w9, [x19, #740]
   10c84:	str	w10, [x19, #740]
   10c88:	str	w9, [x19, #744]
   10c8c:	cmp	w27, #0x1
   10c90:	b.ne	10bf0 <lzma_lzma_preset@@XZ_5.0+0x76c>  // b.any
   10c94:	ldr	w8, [x19, #736]
   10c98:	mov	w9, #0x9                   	// #9
   10c9c:	cmp	w8, #0x7
   10ca0:	mov	w8, #0xb                   	// #11
   10ca4:	csel	w8, w9, w8, cc  // cc = lo, ul, last
   10ca8:	str	w8, [x19, #736]
   10cac:	b	107c8 <lzma_lzma_preset@@XZ_5.0+0x344>
   10cb0:	ldrb	w8, [x19, #2958]
   10cb4:	cbnz	w8, 10da8 <lzma_lzma_preset@@XZ_5.0+0x924>
   10cb8:	mov	w8, #0x1                   	// #1
   10cbc:	cmn	w23, #0x1
   10cc0:	strb	w8, [x19, #2958]
   10cc4:	b.ne	10d38 <lzma_lzma_preset@@XZ_5.0+0x8b4>  // b.any
   10cc8:	ldr	x9, [x19, #24]
   10ccc:	ldr	w10, [x19, #2960]
   10cd0:	ldr	w11, [x19, #736]
   10cd4:	add	x12, x19, #0x28
   10cd8:	str	w8, [x12, x9, lsl #2]
   10cdc:	and	w1, w10, w25
   10ce0:	ldr	x10, [x19, #24]
   10ce4:	add	x11, x19, x11, lsl #5
   10ce8:	mov	w8, #0x6b9c                	// #27548
   10cec:	add	x11, x11, w1, uxtw #1
   10cf0:	add	x9, x19, #0x110
   10cf4:	add	x8, x11, x8
   10cf8:	str	x8, [x9, x10, lsl #3]
   10cfc:	add	x8, x10, #0x1
   10d00:	str	x8, [x19, #24]
   10d04:	ldr	w10, [x19, #736]
   10d08:	str	wzr, [x12, x8, lsl #2]
   10d0c:	ldr	x8, [x19, #24]
   10d10:	mov	w11, #0x6d1c                	// #27932
   10d14:	add	x10, x19, x10, lsl #1
   10d18:	add	x10, x10, x11
   10d1c:	add	x11, x8, #0x1
   10d20:	mov	w2, #0xffffffff            	// #-1
   10d24:	mov	w3, #0x2                   	// #2
   10d28:	mov	x0, x19
   10d2c:	str	x10, [x9, x8, lsl #3]
   10d30:	str	x11, [x19, #24]
   10d34:	bl	11cd4 <lzma_mode_is_supported@@XZ_5.0+0x10>
   10d38:	ldr	x8, [x19, #24]
   10d3c:	add	x9, x19, #0x28
   10d40:	mov	w10, #0x4                   	// #4
   10d44:	mov	x0, x19
   10d48:	add	x11, x8, #0x1
   10d4c:	str	x11, [x19, #24]
   10d50:	str	w10, [x9, x8, lsl #2]
   10d54:	ldr	x8, [x19, #24]
   10d58:	mov	x1, x22
   10d5c:	mov	x2, x21
   10d60:	mov	x3, x20
   10d64:	add	x11, x8, #0x1
   10d68:	str	x11, [x19, #24]
   10d6c:	str	w10, [x9, x8, lsl #2]
   10d70:	ldr	x8, [x19, #24]
   10d74:	add	x11, x8, #0x1
   10d78:	str	x11, [x19, #24]
   10d7c:	str	w10, [x9, x8, lsl #2]
   10d80:	ldr	x8, [x19, #24]
   10d84:	add	x11, x8, #0x1
   10d88:	str	x11, [x19, #24]
   10d8c:	str	w10, [x9, x8, lsl #2]
   10d90:	ldr	x8, [x19, #24]
   10d94:	add	x11, x8, #0x1
   10d98:	str	x11, [x19, #24]
   10d9c:	str	w10, [x9, x8, lsl #2]
   10da0:	bl	10dd0 <lzma_lzma_preset@@XZ_5.0+0x94c>
   10da4:	tbnz	w0, #0, 10778 <lzma_lzma_preset@@XZ_5.0+0x2f4>
   10da8:	mov	w0, #0x1                   	// #1
   10dac:	strb	wzr, [x19, #2958]
   10db0:	ldp	x20, x19, [sp, #96]
   10db4:	ldp	x22, x21, [sp, #80]
   10db8:	ldp	x24, x23, [sp, #64]
   10dbc:	ldp	x26, x25, [sp, #48]
   10dc0:	ldp	x28, x27, [sp, #32]
   10dc4:	ldp	x29, x30, [sp, #16]
   10dc8:	add	sp, sp, #0x70
   10dcc:	ret
   10dd0:	mov	x9, x0
   10dd4:	ldr	x10, [x9, #24]!
   10dd8:	ldr	x8, [x9, #8]
   10ddc:	cmp	x8, x10
   10de0:	b.cs	10f34 <lzma_lzma_preset@@XZ_5.0+0xab0>  // b.hs, b.nlast
   10de4:	ldr	w13, [x0, #16]
   10de8:	adrp	x11, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
   10dec:	mov	w10, #0xff                  	// #255
   10df0:	add	x11, x11, #0x650
   10df4:	mov	w12, #0x800                 	// #2048
   10df8:	b	10e34 <lzma_lzma_preset@@XZ_5.0+0x9b0>
   10dfc:	add	x14, x0, x8, lsl #3
   10e00:	ldr	x14, [x14, #272]
   10e04:	lsr	w13, w13, #11
   10e08:	ldrh	w15, [x14]
   10e0c:	sub	w16, w12, w15
   10e10:	mul	w13, w13, w15
   10e14:	add	w15, w15, w16, lsr #5
   10e18:	str	w13, [x0, #16]
   10e1c:	strh	w15, [x14]
   10e20:	ldr	x14, [x0, #24]
   10e24:	add	x8, x8, #0x1
   10e28:	str	x8, [x0, #32]
   10e2c:	cmp	x8, x14
   10e30:	b.cs	10f34 <lzma_lzma_preset@@XZ_5.0+0xab0>  // b.hs, b.nlast
   10e34:	lsr	w14, w13, #24
   10e38:	cbnz	w14, 10ec4 <lzma_lzma_preset@@XZ_5.0+0xa40>
   10e3c:	ldr	x14, [x0]
   10e40:	lsr	x15, x14, #32
   10e44:	cbnz	x15, 10e60 <lzma_lzma_preset@@XZ_5.0+0x9dc>
   10e48:	lsr	w15, w14, #24
   10e4c:	cmp	w15, #0xfe
   10e50:	b.ls	10e60 <lzma_lzma_preset@@XZ_5.0+0x9dc>  // b.plast
   10e54:	ldr	x15, [x0, #8]
   10e58:	add	x15, x15, #0x1
   10e5c:	b	10eb4 <lzma_lzma_preset@@XZ_5.0+0xa30>
   10e60:	ldr	x8, [x2]
   10e64:	cmp	x8, x3
   10e68:	b.eq	11008 <lzma_lzma_preset@@XZ_5.0+0xb84>  // b.none
   10e6c:	ldrb	w13, [x0, #20]
   10e70:	ldrb	w14, [x0, #4]
   10e74:	add	w13, w13, w14
   10e78:	strb	w13, [x1, x8]
   10e7c:	ldr	x8, [x2]
   10e80:	add	x8, x8, #0x1
   10e84:	str	x8, [x2]
   10e88:	ldr	x8, [x0, #8]
   10e8c:	strb	w10, [x0, #20]
   10e90:	subs	x8, x8, #0x1
   10e94:	str	x8, [x0, #8]
   10e98:	b.ne	10e60 <lzma_lzma_preset@@XZ_5.0+0x9dc>  // b.any
   10e9c:	ldr	x14, [x0]
   10ea0:	ldr	w13, [x0, #16]
   10ea4:	ldr	x8, [x0, #32]
   10ea8:	lsr	x15, x14, #24
   10eac:	strb	w15, [x0, #20]
   10eb0:	mov	w15, #0x1                   	// #1
   10eb4:	lsl	w14, w14, #8
   10eb8:	lsl	w13, w13, #8
   10ebc:	stp	x14, x15, [x0]
   10ec0:	str	w13, [x0, #16]
   10ec4:	add	x14, x0, x8, lsl #2
   10ec8:	ldr	w14, [x14, #40]
   10ecc:	cmp	w14, #0x4
   10ed0:	b.hi	10e20 <lzma_lzma_preset@@XZ_5.0+0x99c>  // b.pmore
   10ed4:	adr	x15, 10dfc <lzma_lzma_preset@@XZ_5.0+0x978>
   10ed8:	ldrb	w16, [x11, x14]
   10edc:	add	x15, x15, x16, lsl #2
   10ee0:	br	x15
   10ee4:	add	x14, x0, x8, lsl #3
   10ee8:	ldr	x14, [x14, #272]
   10eec:	ldr	x16, [x0]
   10ef0:	lsr	w17, w13, #11
   10ef4:	ldrh	w15, [x14]
   10ef8:	mul	w17, w17, w15
   10efc:	add	x16, x16, x17
   10f00:	sub	w13, w13, w17
   10f04:	sub	w15, w15, w15, lsr #5
   10f08:	str	x16, [x0]
   10f0c:	b	10e18 <lzma_lzma_preset@@XZ_5.0+0x994>
   10f10:	lsr	w13, w13, #1
   10f14:	str	w13, [x0, #16]
   10f18:	b	10e20 <lzma_lzma_preset@@XZ_5.0+0x99c>
   10f1c:	ldr	x14, [x0]
   10f20:	lsr	w13, w13, #1
   10f24:	str	w13, [x0, #16]
   10f28:	add	x14, x14, x13
   10f2c:	str	x14, [x0]
   10f30:	b	10e20 <lzma_lzma_preset@@XZ_5.0+0x99c>
   10f34:	mov	w8, wzr
   10f38:	mov	w0, w8
   10f3c:	stp	xzr, xzr, [x9]
   10f40:	ret
   10f44:	ldr	x11, [x0]
   10f48:	mov	w10, #0xffffffff            	// #-1
   10f4c:	str	w10, [x0, #16]
   10f50:	mov	w10, #0xff                  	// #255
   10f54:	lsr	x12, x11, #32
   10f58:	cbnz	x12, 10f74 <lzma_lzma_preset@@XZ_5.0+0xaf0>
   10f5c:	lsr	w12, w11, #24
   10f60:	cmp	w12, #0xfe
   10f64:	b.ls	10f74 <lzma_lzma_preset@@XZ_5.0+0xaf0>  // b.plast
   10f68:	ldr	x12, [x0, #8]
   10f6c:	add	x12, x12, #0x1
   10f70:	b	10fc4 <lzma_lzma_preset@@XZ_5.0+0xb40>
   10f74:	ldr	x8, [x2]
   10f78:	cmp	x8, x3
   10f7c:	b.eq	11008 <lzma_lzma_preset@@XZ_5.0+0xb84>  // b.none
   10f80:	ldrb	w11, [x0, #20]
   10f84:	ldrb	w12, [x0, #4]
   10f88:	add	w11, w11, w12
   10f8c:	strb	w11, [x1, x8]
   10f90:	ldr	x8, [x2]
   10f94:	add	x8, x8, #0x1
   10f98:	str	x8, [x2]
   10f9c:	ldr	x8, [x0, #8]
   10fa0:	strb	w10, [x0, #20]
   10fa4:	subs	x8, x8, #0x1
   10fa8:	str	x8, [x0, #8]
   10fac:	b.ne	10f74 <lzma_lzma_preset@@XZ_5.0+0xaf0>  // b.any
   10fb0:	ldr	x11, [x0]
   10fb4:	ldr	x8, [x0, #32]
   10fb8:	lsr	x12, x11, #24
   10fbc:	strb	w12, [x0, #20]
   10fc0:	mov	w12, #0x1                   	// #1
   10fc4:	ldr	x13, [x0, #24]
   10fc8:	add	x8, x8, #0x1
   10fcc:	lsl	w11, w11, #8
   10fd0:	stp	x11, x12, [x0]
   10fd4:	cmp	x8, x13
   10fd8:	str	x8, [x0, #32]
   10fdc:	b.cc	10f54 <lzma_lzma_preset@@XZ_5.0+0xad0>  // b.lo, b.ul, b.last
   10fe0:	adrp	x10, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
   10fe4:	ldr	q0, [x10, #1584]
   10fe8:	mov	w10, #0xffffffff            	// #-1
   10fec:	mov	w8, wzr
   10ff0:	strb	wzr, [x0, #20]
   10ff4:	str	w10, [x0, #16]
   10ff8:	str	q0, [x0]
   10ffc:	mov	w0, w8
   11000:	stp	xzr, xzr, [x9]
   11004:	ret
   11008:	mov	w0, #0x1                   	// #1
   1100c:	ret
   11010:	stp	x29, x30, [sp, #-48]!
   11014:	stp	x22, x21, [sp, #16]
   11018:	stp	x20, x19, [sp, #32]
   1101c:	ldr	w9, [x1, #20]
   11020:	mov	x29, sp
   11024:	cmp	w9, #0x4
   11028:	b.hi	11214 <lzma_lzma_preset@@XZ_5.0+0xd90>  // b.pmore
   1102c:	ldr	w8, [x1, #24]
   11030:	mov	x20, x1
   11034:	mov	x19, x0
   11038:	mov	w0, #0x8                   	// #8
   1103c:	cmp	w8, #0x4
   11040:	b.hi	11218 <lzma_lzma_preset@@XZ_5.0+0xd94>  // b.pmore
   11044:	add	w10, w8, w9
   11048:	cmp	w10, #0x4
   1104c:	b.hi	11218 <lzma_lzma_preset@@XZ_5.0+0xd94>  // b.pmore
   11050:	ldr	w10, [x20, #28]
   11054:	cmp	w10, #0x4
   11058:	b.hi	11228 <lzma_lzma_preset@@XZ_5.0+0xda4>  // b.pmore
   1105c:	ldr	w11, [x20, #36]
   11060:	sub	w11, w11, #0x2
   11064:	cmp	w11, #0x10f
   11068:	b.hi	11228 <lzma_lzma_preset@@XZ_5.0+0xda4>  // b.pmore
   1106c:	ldr	w11, [x20, #32]
   11070:	sub	w11, w11, #0x1
   11074:	cmp	w11, #0x1
   11078:	b.hi	11228 <lzma_lzma_preset@@XZ_5.0+0xda4>  // b.pmore
   1107c:	adrp	x12, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
   11080:	movi	v0.2d, #0x0
   11084:	stur	q0, [x19, #24]
   11088:	str	q0, [x19, #736]
   1108c:	ldr	q0, [x12, #1584]
   11090:	mov	w11, #0xffffffff            	// #-1
   11094:	str	w9, [x19, #2964]
   11098:	lsl	w9, w11, w10
   1109c:	lsl	w8, w11, w8
   110a0:	mvn	w10, w9
   110a4:	mvn	w8, w8
   110a8:	strb	wzr, [x19, #20]
   110ac:	str	wzr, [x19, #752]
   110b0:	str	w11, [x19, #16]
   110b4:	str	w10, [x19, #2960]
   110b8:	str	w8, [x19, #2968]
   110bc:	str	q0, [x19]
   110c0:	ldp	w8, w12, [x20, #20]
   110c4:	mov	w14, #0xe94                 	// #3732
   110c8:	movk	w14, #0x1, lsl #16
   110cc:	mov	w15, #0x6d1c                	// #27932
   110d0:	mov	w11, #0x1                   	// #1
   110d4:	add	w12, w12, w8
   110d8:	mov	w13, #0x600                 	// #1536
   110dc:	add	x21, x19, x14
   110e0:	add	x8, x19, x15
   110e4:	movi	v0.8h, #0x4, lsl #8
   110e8:	sub	w14, w11, #0x1
   110ec:	umaddl	x14, w14, w13, x19
   110f0:	add	x14, x14, #0xb9c
   110f4:	stp	q0, q0, [x14]
   110f8:	stp	q0, q0, [x14, #32]
   110fc:	stp	q0, q0, [x14, #64]
   11100:	stp	q0, q0, [x14, #96]
   11104:	stp	q0, q0, [x14, #128]
   11108:	stp	q0, q0, [x14, #160]
   1110c:	stp	q0, q0, [x14, #192]
   11110:	stp	q0, q0, [x14, #224]
   11114:	stp	q0, q0, [x14, #256]
   11118:	stp	q0, q0, [x14, #288]
   1111c:	stp	q0, q0, [x14, #320]
   11120:	stp	q0, q0, [x14, #352]
   11124:	stp	q0, q0, [x14, #384]
   11128:	stp	q0, q0, [x14, #416]
   1112c:	stp	q0, q0, [x14, #448]
   11130:	stp	q0, q0, [x14, #480]
   11134:	stp	q0, q0, [x14, #512]
   11138:	stp	q0, q0, [x14, #544]
   1113c:	stp	q0, q0, [x14, #576]
   11140:	stp	q0, q0, [x14, #608]
   11144:	stp	q0, q0, [x14, #640]
   11148:	stp	q0, q0, [x14, #672]
   1114c:	stp	q0, q0, [x14, #704]
   11150:	stp	q0, q0, [x14, #736]
   11154:	stp	q0, q0, [x14, #768]
   11158:	stp	q0, q0, [x14, #800]
   1115c:	stp	q0, q0, [x14, #832]
   11160:	stp	q0, q0, [x14, #864]
   11164:	stp	q0, q0, [x14, #896]
   11168:	stp	q0, q0, [x14, #928]
   1116c:	stp	q0, q0, [x14, #960]
   11170:	stp	q0, q0, [x14, #992]
   11174:	str	q0, [x14, #1024]
   11178:	str	q0, [x14, #1040]
   1117c:	str	q0, [x14, #1056]
   11180:	str	q0, [x14, #1072]
   11184:	str	q0, [x14, #1088]
   11188:	str	q0, [x14, #1104]
   1118c:	str	q0, [x14, #1120]
   11190:	str	q0, [x14, #1136]
   11194:	str	q0, [x14, #1152]
   11198:	str	q0, [x14, #1168]
   1119c:	str	q0, [x14, #1184]
   111a0:	str	q0, [x14, #1200]
   111a4:	str	q0, [x14, #1216]
   111a8:	str	q0, [x14, #1232]
   111ac:	str	q0, [x14, #1248]
   111b0:	str	q0, [x14, #1264]
   111b4:	str	q0, [x14, #1280]
   111b8:	str	q0, [x14, #1296]
   111bc:	str	q0, [x14, #1312]
   111c0:	str	q0, [x14, #1328]
   111c4:	str	q0, [x14, #1344]
   111c8:	str	q0, [x14, #1360]
   111cc:	str	q0, [x14, #1376]
   111d0:	str	q0, [x14, #1392]
   111d4:	str	q0, [x14, #1408]
   111d8:	str	q0, [x14, #1424]
   111dc:	str	q0, [x14, #1440]
   111e0:	str	q0, [x14, #1456]
   111e4:	str	q0, [x14, #1472]
   111e8:	str	q0, [x14, #1488]
   111ec:	str	q0, [x14, #1504]
   111f0:	str	q0, [x14, #1520]
   111f4:	lsr	w14, w11, w12
   111f8:	add	w11, w11, #0x1
   111fc:	cbz	w14, 110e8 <lzma_lzma_preset@@XZ_5.0+0xc64>
   11200:	cmn	w9, #0x7
   11204:	mov	w10, w10
   11208:	b.cc	1123c <lzma_lzma_preset@@XZ_5.0+0xdb8>  // b.lo, b.ul, b.last
   1120c:	mov	x11, xzr
   11210:	b	11270 <lzma_lzma_preset@@XZ_5.0+0xdec>
   11214:	mov	w0, #0x8                   	// #8
   11218:	ldp	x20, x19, [sp, #32]
   1121c:	ldp	x22, x21, [sp, #16]
   11220:	ldp	x29, x30, [sp], #48
   11224:	ret
   11228:	mov	w0, #0x8                   	// #8
   1122c:	ldp	x20, x19, [sp, #32]
   11230:	ldp	x22, x21, [sp, #16]
   11234:	ldp	x29, x30, [sp], #48
   11238:	ret
   1123c:	add	x12, x10, #0x1
   11240:	mov	w13, #0x6b9c                	// #27548
   11244:	and	x11, x12, #0x1fffffff8
   11248:	add	x13, x19, x13
   1124c:	movi	v0.8h, #0x4, lsl #8
   11250:	mov	x14, x11
   11254:	str	q0, [x13]
   11258:	str	q0, [x13, #480]
   1125c:	subs	x14, x14, #0x8
   11260:	add	x13, x13, #0x10
   11264:	b.ne	11254 <lzma_lzma_preset@@XZ_5.0+0xdd0>  // b.any
   11268:	cmp	x12, x11
   1126c:	b.eq	1129c <lzma_lzma_preset@@XZ_5.0+0xe18>  // b.none
   11270:	sub	x12, x10, x11
   11274:	add	x13, x19, x11, lsl #1
   11278:	mov	w14, #0x6b9c                	// #27548
   1127c:	add	x11, x12, #0x1
   11280:	add	x12, x13, x14
   11284:	mov	w13, #0x400                 	// #1024
   11288:	strh	w13, [x12]
   1128c:	strh	w13, [x12, #480]
   11290:	subs	x11, x11, #0x1
   11294:	add	x12, x12, #0x2
   11298:	b.ne	11288 <lzma_lzma_preset@@XZ_5.0+0xe04>  // b.any
   1129c:	mov	w11, #0x400                 	// #1024
   112a0:	cmn	w9, #0x7
   112a4:	strh	w11, [x8]
   112a8:	strh	w11, [x8, #24]
   112ac:	strh	w11, [x8, #48]
   112b0:	strh	w11, [x8, #72]
   112b4:	b.cc	112c0 <lzma_lzma_preset@@XZ_5.0+0xe3c>  // b.lo, b.ul, b.last
   112b8:	mov	x12, xzr
   112bc:	b	112f4 <lzma_lzma_preset@@XZ_5.0+0xe70>
   112c0:	add	x13, x10, #0x1
   112c4:	mov	w14, #0x6bbc                	// #27580
   112c8:	and	x12, x13, #0x1fffffff8
   112cc:	add	x14, x19, x14
   112d0:	movi	v0.8h, #0x4, lsl #8
   112d4:	mov	x15, x12
   112d8:	str	q0, [x14]
   112dc:	str	q0, [x14, #480]
   112e0:	subs	x15, x15, #0x8
   112e4:	add	x14, x14, #0x10
   112e8:	b.ne	112d8 <lzma_lzma_preset@@XZ_5.0+0xe54>  // b.any
   112ec:	cmp	x13, x12
   112f0:	b.eq	1131c <lzma_lzma_preset@@XZ_5.0+0xe98>  // b.none
   112f4:	sub	x13, x10, x12
   112f8:	add	x14, x19, x12, lsl #1
   112fc:	mov	w15, #0x6bbc                	// #27580
   11300:	add	x12, x13, #0x1
   11304:	add	x13, x14, x15
   11308:	strh	w11, [x13]
   1130c:	strh	w11, [x13, #480]
   11310:	subs	x12, x12, #0x1
   11314:	add	x13, x13, #0x2
   11318:	b.ne	11308 <lzma_lzma_preset@@XZ_5.0+0xe84>  // b.any
   1131c:	mov	w11, #0x400                 	// #1024
   11320:	cmn	w9, #0x8
   11324:	strh	w11, [x8, #2]
   11328:	strh	w11, [x8, #26]
   1132c:	strh	w11, [x8, #50]
   11330:	strh	w11, [x8, #74]
   11334:	b.ls	11340 <lzma_lzma_preset@@XZ_5.0+0xebc>  // b.plast
   11338:	mov	x12, xzr
   1133c:	b	11374 <lzma_lzma_preset@@XZ_5.0+0xef0>
   11340:	add	x13, x10, #0x1
   11344:	mov	w14, #0x6bdc                	// #27612
   11348:	and	x12, x13, #0x1fffffff8
   1134c:	add	x14, x19, x14
   11350:	movi	v0.8h, #0x4, lsl #8
   11354:	mov	x15, x12
   11358:	str	q0, [x14]
   1135c:	str	q0, [x14, #480]
   11360:	subs	x15, x15, #0x8
   11364:	add	x14, x14, #0x10
   11368:	b.ne	11358 <lzma_lzma_preset@@XZ_5.0+0xed4>  // b.any
   1136c:	cmp	x13, x12
   11370:	b.eq	1139c <lzma_lzma_preset@@XZ_5.0+0xf18>  // b.none
   11374:	sub	x13, x10, x12
   11378:	add	x14, x19, x12, lsl #1
   1137c:	mov	w15, #0x6bdc                	// #27612
   11380:	add	x12, x13, #0x1
   11384:	add	x13, x14, x15
   11388:	strh	w11, [x13]
   1138c:	strh	w11, [x13, #480]
   11390:	subs	x12, x12, #0x1
   11394:	add	x13, x13, #0x2
   11398:	b.ne	11388 <lzma_lzma_preset@@XZ_5.0+0xf04>  // b.any
   1139c:	mov	w11, #0x400                 	// #1024
   113a0:	cmn	w9, #0x8
   113a4:	strh	w11, [x8, #4]
   113a8:	strh	w11, [x8, #28]
   113ac:	strh	w11, [x8, #52]
   113b0:	strh	w11, [x8, #76]
   113b4:	b.ls	113c0 <lzma_lzma_preset@@XZ_5.0+0xf3c>  // b.plast
   113b8:	mov	x12, xzr
   113bc:	b	113f4 <lzma_lzma_preset@@XZ_5.0+0xf70>
   113c0:	add	x13, x10, #0x1
   113c4:	mov	w14, #0x6bfc                	// #27644
   113c8:	and	x12, x13, #0x1fffffff8
   113cc:	add	x14, x19, x14
   113d0:	movi	v0.8h, #0x4, lsl #8
   113d4:	mov	x15, x12
   113d8:	str	q0, [x14]
   113dc:	str	q0, [x14, #480]
   113e0:	subs	x15, x15, #0x8
   113e4:	add	x14, x14, #0x10
   113e8:	b.ne	113d8 <lzma_lzma_preset@@XZ_5.0+0xf54>  // b.any
   113ec:	cmp	x13, x12
   113f0:	b.eq	1141c <lzma_lzma_preset@@XZ_5.0+0xf98>  // b.none
   113f4:	sub	x13, x10, x12
   113f8:	add	x14, x19, x12, lsl #1
   113fc:	mov	w15, #0x6bfc                	// #27644
   11400:	add	x12, x13, #0x1
   11404:	add	x13, x14, x15
   11408:	strh	w11, [x13]
   1140c:	strh	w11, [x13, #480]
   11410:	subs	x12, x12, #0x1
   11414:	add	x13, x13, #0x2
   11418:	b.ne	11408 <lzma_lzma_preset@@XZ_5.0+0xf84>  // b.any
   1141c:	mov	w11, #0x400                 	// #1024
   11420:	cmn	w9, #0x8
   11424:	strh	w11, [x8, #6]
   11428:	strh	w11, [x8, #30]
   1142c:	strh	w11, [x8, #54]
   11430:	strh	w11, [x8, #78]
   11434:	b.ls	11440 <lzma_lzma_preset@@XZ_5.0+0xfbc>  // b.plast
   11438:	mov	x12, xzr
   1143c:	b	11474 <lzma_lzma_preset@@XZ_5.0+0xff0>
   11440:	add	x13, x10, #0x1
   11444:	mov	w14, #0x6c1c                	// #27676
   11448:	and	x12, x13, #0x1fffffff8
   1144c:	add	x14, x19, x14
   11450:	movi	v0.8h, #0x4, lsl #8
   11454:	mov	x15, x12
   11458:	str	q0, [x14]
   1145c:	str	q0, [x14, #480]
   11460:	subs	x15, x15, #0x8
   11464:	add	x14, x14, #0x10
   11468:	b.ne	11458 <lzma_lzma_preset@@XZ_5.0+0xfd4>  // b.any
   1146c:	cmp	x13, x12
   11470:	b.eq	1149c <lzma_lzma_preset@@XZ_5.0+0x1018>  // b.none
   11474:	sub	x13, x10, x12
   11478:	add	x14, x19, x12, lsl #1
   1147c:	mov	w15, #0x6c1c                	// #27676
   11480:	add	x12, x13, #0x1
   11484:	add	x13, x14, x15
   11488:	strh	w11, [x13]
   1148c:	strh	w11, [x13, #480]
   11490:	subs	x12, x12, #0x1
   11494:	add	x13, x13, #0x2
   11498:	b.ne	11488 <lzma_lzma_preset@@XZ_5.0+0x1004>  // b.any
   1149c:	mov	w11, #0x400                 	// #1024
   114a0:	cmn	w9, #0x8
   114a4:	strh	w11, [x8, #8]
   114a8:	strh	w11, [x8, #32]
   114ac:	strh	w11, [x8, #56]
   114b0:	strh	w11, [x8, #80]
   114b4:	b.ls	114c0 <lzma_lzma_preset@@XZ_5.0+0x103c>  // b.plast
   114b8:	mov	x12, xzr
   114bc:	b	114f4 <lzma_lzma_preset@@XZ_5.0+0x1070>
   114c0:	add	x13, x10, #0x1
   114c4:	mov	w14, #0x6c3c                	// #27708
   114c8:	and	x12, x13, #0x1fffffff8
   114cc:	add	x14, x19, x14
   114d0:	movi	v0.8h, #0x4, lsl #8
   114d4:	mov	x15, x12
   114d8:	str	q0, [x14]
   114dc:	str	q0, [x14, #480]
   114e0:	subs	x15, x15, #0x8
   114e4:	add	x14, x14, #0x10
   114e8:	b.ne	114d8 <lzma_lzma_preset@@XZ_5.0+0x1054>  // b.any
   114ec:	cmp	x13, x12
   114f0:	b.eq	1151c <lzma_lzma_preset@@XZ_5.0+0x1098>  // b.none
   114f4:	sub	x13, x10, x12
   114f8:	add	x14, x19, x12, lsl #1
   114fc:	mov	w15, #0x6c3c                	// #27708
   11500:	add	x12, x13, #0x1
   11504:	add	x13, x14, x15
   11508:	strh	w11, [x13]
   1150c:	strh	w11, [x13, #480]
   11510:	subs	x12, x12, #0x1
   11514:	add	x13, x13, #0x2
   11518:	b.ne	11508 <lzma_lzma_preset@@XZ_5.0+0x1084>  // b.any
   1151c:	mov	w11, #0x400                 	// #1024
   11520:	cmn	w9, #0x8
   11524:	strh	w11, [x8, #10]
   11528:	strh	w11, [x8, #34]
   1152c:	strh	w11, [x8, #58]
   11530:	strh	w11, [x8, #82]
   11534:	b.ls	11540 <lzma_lzma_preset@@XZ_5.0+0x10bc>  // b.plast
   11538:	mov	x12, xzr
   1153c:	b	11574 <lzma_lzma_preset@@XZ_5.0+0x10f0>
   11540:	add	x13, x10, #0x1
   11544:	mov	w14, #0x6c5c                	// #27740
   11548:	and	x12, x13, #0x1fffffff8
   1154c:	add	x14, x19, x14
   11550:	movi	v0.8h, #0x4, lsl #8
   11554:	mov	x15, x12
   11558:	str	q0, [x14]
   1155c:	str	q0, [x14, #480]
   11560:	subs	x15, x15, #0x8
   11564:	add	x14, x14, #0x10
   11568:	b.ne	11558 <lzma_lzma_preset@@XZ_5.0+0x10d4>  // b.any
   1156c:	cmp	x13, x12
   11570:	b.eq	1159c <lzma_lzma_preset@@XZ_5.0+0x1118>  // b.none
   11574:	sub	x13, x10, x12
   11578:	add	x14, x19, x12, lsl #1
   1157c:	mov	w15, #0x6c5c                	// #27740
   11580:	add	x12, x13, #0x1
   11584:	add	x13, x14, x15
   11588:	strh	w11, [x13]
   1158c:	strh	w11, [x13, #480]
   11590:	subs	x12, x12, #0x1
   11594:	add	x13, x13, #0x2
   11598:	b.ne	11588 <lzma_lzma_preset@@XZ_5.0+0x1104>  // b.any
   1159c:	mov	w11, #0x400                 	// #1024
   115a0:	cmn	w9, #0x8
   115a4:	strh	w11, [x8, #12]
   115a8:	strh	w11, [x8, #36]
   115ac:	strh	w11, [x8, #60]
   115b0:	strh	w11, [x8, #84]
   115b4:	b.ls	115c0 <lzma_lzma_preset@@XZ_5.0+0x113c>  // b.plast
   115b8:	mov	x12, xzr
   115bc:	b	115f4 <lzma_lzma_preset@@XZ_5.0+0x1170>
   115c0:	add	x13, x10, #0x1
   115c4:	mov	w14, #0x6c7c                	// #27772
   115c8:	and	x12, x13, #0x1fffffff8
   115cc:	add	x14, x19, x14
   115d0:	movi	v0.8h, #0x4, lsl #8
   115d4:	mov	x15, x12
   115d8:	str	q0, [x14]
   115dc:	str	q0, [x14, #480]
   115e0:	subs	x15, x15, #0x8
   115e4:	add	x14, x14, #0x10
   115e8:	b.ne	115d8 <lzma_lzma_preset@@XZ_5.0+0x1154>  // b.any
   115ec:	cmp	x13, x12
   115f0:	b.eq	1161c <lzma_lzma_preset@@XZ_5.0+0x1198>  // b.none
   115f4:	sub	x13, x10, x12
   115f8:	add	x14, x19, x12, lsl #1
   115fc:	mov	w15, #0x6c7c                	// #27772
   11600:	add	x12, x13, #0x1
   11604:	add	x13, x14, x15
   11608:	strh	w11, [x13]
   1160c:	strh	w11, [x13, #480]
   11610:	subs	x12, x12, #0x1
   11614:	add	x13, x13, #0x2
   11618:	b.ne	11608 <lzma_lzma_preset@@XZ_5.0+0x1184>  // b.any
   1161c:	mov	w11, #0x400                 	// #1024
   11620:	cmn	w9, #0x8
   11624:	strh	w11, [x8, #14]
   11628:	strh	w11, [x8, #38]
   1162c:	strh	w11, [x8, #62]
   11630:	strh	w11, [x8, #86]
   11634:	b.ls	11640 <lzma_lzma_preset@@XZ_5.0+0x11bc>  // b.plast
   11638:	mov	x12, xzr
   1163c:	b	11674 <lzma_lzma_preset@@XZ_5.0+0x11f0>
   11640:	add	x13, x10, #0x1
   11644:	mov	w14, #0x6c9c                	// #27804
   11648:	and	x12, x13, #0x1fffffff8
   1164c:	add	x14, x19, x14
   11650:	movi	v0.8h, #0x4, lsl #8
   11654:	mov	x15, x12
   11658:	str	q0, [x14]
   1165c:	str	q0, [x14, #480]
   11660:	subs	x15, x15, #0x8
   11664:	add	x14, x14, #0x10
   11668:	b.ne	11658 <lzma_lzma_preset@@XZ_5.0+0x11d4>  // b.any
   1166c:	cmp	x13, x12
   11670:	b.eq	1169c <lzma_lzma_preset@@XZ_5.0+0x1218>  // b.none
   11674:	sub	x13, x10, x12
   11678:	add	x14, x19, x12, lsl #1
   1167c:	mov	w15, #0x6c9c                	// #27804
   11680:	add	x12, x13, #0x1
   11684:	add	x13, x14, x15
   11688:	strh	w11, [x13]
   1168c:	strh	w11, [x13, #480]
   11690:	subs	x12, x12, #0x1
   11694:	add	x13, x13, #0x2
   11698:	b.ne	11688 <lzma_lzma_preset@@XZ_5.0+0x1204>  // b.any
   1169c:	mov	w11, #0x400                 	// #1024
   116a0:	cmn	w9, #0x8
   116a4:	strh	w11, [x8, #16]
   116a8:	strh	w11, [x8, #40]
   116ac:	strh	w11, [x8, #64]
   116b0:	strh	w11, [x8, #88]
   116b4:	b.ls	116c0 <lzma_lzma_preset@@XZ_5.0+0x123c>  // b.plast
   116b8:	mov	x12, xzr
   116bc:	b	116f4 <lzma_lzma_preset@@XZ_5.0+0x1270>
   116c0:	add	x13, x10, #0x1
   116c4:	mov	w14, #0x6cbc                	// #27836
   116c8:	and	x12, x13, #0x1fffffff8
   116cc:	add	x14, x19, x14
   116d0:	movi	v0.8h, #0x4, lsl #8
   116d4:	mov	x15, x12
   116d8:	str	q0, [x14]
   116dc:	str	q0, [x14, #480]
   116e0:	subs	x15, x15, #0x8
   116e4:	add	x14, x14, #0x10
   116e8:	b.ne	116d8 <lzma_lzma_preset@@XZ_5.0+0x1254>  // b.any
   116ec:	cmp	x13, x12
   116f0:	b.eq	1171c <lzma_lzma_preset@@XZ_5.0+0x1298>  // b.none
   116f4:	sub	x13, x10, x12
   116f8:	add	x14, x19, x12, lsl #1
   116fc:	mov	w15, #0x6cbc                	// #27836
   11700:	add	x12, x13, #0x1
   11704:	add	x13, x14, x15
   11708:	strh	w11, [x13]
   1170c:	strh	w11, [x13, #480]
   11710:	subs	x12, x12, #0x1
   11714:	add	x13, x13, #0x2
   11718:	b.ne	11708 <lzma_lzma_preset@@XZ_5.0+0x1284>  // b.any
   1171c:	mov	w11, #0x400                 	// #1024
   11720:	cmn	w9, #0x8
   11724:	strh	w11, [x8, #18]
   11728:	strh	w11, [x8, #42]
   1172c:	strh	w11, [x8, #66]
   11730:	strh	w11, [x8, #90]
   11734:	b.ls	11740 <lzma_lzma_preset@@XZ_5.0+0x12bc>  // b.plast
   11738:	mov	x12, xzr
   1173c:	b	11774 <lzma_lzma_preset@@XZ_5.0+0x12f0>
   11740:	add	x13, x10, #0x1
   11744:	mov	w14, #0x6cdc                	// #27868
   11748:	and	x12, x13, #0x1fffffff8
   1174c:	add	x14, x19, x14
   11750:	movi	v0.8h, #0x4, lsl #8
   11754:	mov	x15, x12
   11758:	str	q0, [x14]
   1175c:	str	q0, [x14, #480]
   11760:	subs	x15, x15, #0x8
   11764:	add	x14, x14, #0x10
   11768:	b.ne	11758 <lzma_lzma_preset@@XZ_5.0+0x12d4>  // b.any
   1176c:	cmp	x13, x12
   11770:	b.eq	1179c <lzma_lzma_preset@@XZ_5.0+0x1318>  // b.none
   11774:	sub	x13, x10, x12
   11778:	add	x14, x19, x12, lsl #1
   1177c:	mov	w15, #0x6cdc                	// #27868
   11780:	add	x12, x13, #0x1
   11784:	add	x13, x14, x15
   11788:	strh	w11, [x13]
   1178c:	strh	w11, [x13, #480]
   11790:	subs	x12, x12, #0x1
   11794:	add	x13, x13, #0x2
   11798:	b.ne	11788 <lzma_lzma_preset@@XZ_5.0+0x1304>  // b.any
   1179c:	mov	w11, #0x400                 	// #1024
   117a0:	cmn	w9, #0x8
   117a4:	strh	w11, [x8, #20]
   117a8:	strh	w11, [x8, #44]
   117ac:	strh	w11, [x8, #68]
   117b0:	strh	w11, [x8, #92]
   117b4:	b.ls	117c0 <lzma_lzma_preset@@XZ_5.0+0x133c>  // b.plast
   117b8:	mov	x9, xzr
   117bc:	b	117f4 <lzma_lzma_preset@@XZ_5.0+0x1370>
   117c0:	add	x12, x10, #0x1
   117c4:	mov	w13, #0x6cfc                	// #27900
   117c8:	and	x9, x12, #0x1fffffff8
   117cc:	add	x13, x19, x13
   117d0:	movi	v0.8h, #0x4, lsl #8
   117d4:	mov	x14, x9
   117d8:	str	q0, [x13]
   117dc:	str	q0, [x13, #480]
   117e0:	subs	x14, x14, #0x8
   117e4:	add	x13, x13, #0x10
   117e8:	b.ne	117d8 <lzma_lzma_preset@@XZ_5.0+0x1354>  // b.any
   117ec:	cmp	x12, x9
   117f0:	b.eq	1181c <lzma_lzma_preset@@XZ_5.0+0x1398>  // b.none
   117f4:	sub	x10, x10, x9
   117f8:	add	x12, x19, x9, lsl #1
   117fc:	mov	w13, #0x6cfc                	// #27900
   11800:	add	x9, x10, #0x1
   11804:	add	x10, x12, x13
   11808:	strh	w11, [x10]
   1180c:	strh	w11, [x10, #480]
   11810:	subs	x9, x9, #0x1
   11814:	add	x10, x10, #0x2
   11818:	b.ne	11808 <lzma_lzma_preset@@XZ_5.0+0x1384>  // b.any
   1181c:	mov	w9, #0x400                 	// #1024
   11820:	movi	v0.8h, #0x4, lsl #8
   11824:	mov	w10, #0x4000400             	// #67109888
   11828:	strh	w9, [x8, #22]
   1182c:	strh	w9, [x8, #46]
   11830:	strh	w9, [x8, #70]
   11834:	strh	w9, [x8, #94]
   11838:	stp	q0, q0, [x8, #992]
   1183c:	str	q0, [x8, #1024]
   11840:	str	q0, [x8, #1040]
   11844:	str	q0, [x8, #1056]
   11848:	str	q0, [x8, #1072]
   1184c:	str	q0, [x8, #1088]
   11850:	str	q0, [x8, #1104]
   11854:	str	q0, [x8, #1120]
   11858:	str	q0, [x8, #1136]
   1185c:	str	q0, [x8, #1152]
   11860:	str	q0, [x8, #1168]
   11864:	str	q0, [x8, #1184]
   11868:	str	q0, [x8, #1200]
   1186c:	str	w10, [x8, #1216]
   11870:	stp	q0, q0, [x8, #480]
   11874:	stp	q0, q0, [x8, #512]
   11878:	stp	q0, q0, [x8, #544]
   1187c:	stp	q0, q0, [x8, #576]
   11880:	stp	q0, q0, [x8, #608]
   11884:	stp	q0, q0, [x8, #640]
   11888:	stp	q0, q0, [x8, #672]
   1188c:	stp	q0, q0, [x8, #704]
   11890:	stp	q0, q0, [x8, #736]
   11894:	stp	q0, q0, [x8, #768]
   11898:	stp	q0, q0, [x8, #800]
   1189c:	stp	q0, q0, [x8, #832]
   118a0:	stp	q0, q0, [x8, #864]
   118a4:	stp	q0, q0, [x8, #896]
   118a8:	stp	q0, q0, [x8, #928]
   118ac:	stp	q0, q0, [x8, #960]
   118b0:	str	q0, [x19, #29152]
   118b4:	str	q0, [x19, #29168]
   118b8:	ldr	w9, [x20, #28]
   118bc:	ldrb	w2, [x19, #2956]
   118c0:	mov	w8, #0x7200                	// #29184
   118c4:	mov	w22, #0x1                   	// #1
   118c8:	add	x0, x19, x8
   118cc:	lsl	w1, w22, w9
   118d0:	bl	11918 <lzma_lzma_preset@@XZ_5.0+0x1494>
   118d4:	ldr	w8, [x20, #28]
   118d8:	ldrb	w2, [x19, #2956]
   118dc:	mov	w9, #0xba48                	// #47688
   118e0:	add	x0, x19, x9
   118e4:	lsl	w1, w22, w8
   118e8:	bl	11918 <lzma_lzma_preset@@XZ_5.0+0x1494>
   118ec:	adrp	x8, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
   118f0:	ldr	d0, [x8, #1624]
   118f4:	mov	w0, wzr
   118f8:	mov	w8, #0x7fffffff            	// #2147483647
   118fc:	str	w8, [x21]
   11900:	stur	d0, [x21, #68]
   11904:	str	wzr, [x21, #76]
   11908:	ldp	x20, x19, [sp, #32]
   1190c:	ldp	x22, x21, [sp, #16]
   11910:	ldp	x29, x30, [sp], #48
   11914:	ret
   11918:	stp	x29, x30, [sp, #-48]!
   1191c:	stp	x20, x19, [sp, #32]
   11920:	mov	w19, w1
   11924:	mov	x20, x0
   11928:	add	x8, x0, #0x204
   1192c:	mov	w9, #0x4000400             	// #67109888
   11930:	str	x21, [sp, #16]
   11934:	mov	x29, sp
   11938:	str	w9, [x0]
   1193c:	cbz	w1, 1195c <lzma_lzma_preset@@XZ_5.0+0x14d8>
   11940:	mov	w9, w19
   11944:	add	x10, x20, #0x104
   11948:	movi	v0.8h, #0x4, lsl #8
   1194c:	stur	q0, [x10, #-256]
   11950:	str	q0, [x10], #16
   11954:	subs	x9, x9, #0x1
   11958:	b.ne	1194c <lzma_lzma_preset@@XZ_5.0+0x14c8>  // b.any
   1195c:	movi	v0.8h, #0x4, lsl #8
   11960:	stp	q0, q0, [x8]
   11964:	stp	q0, q0, [x8, #32]
   11968:	stp	q0, q0, [x8, #64]
   1196c:	stp	q0, q0, [x8, #96]
   11970:	stp	q0, q0, [x8, #128]
   11974:	stp	q0, q0, [x8, #160]
   11978:	stp	q0, q0, [x8, #192]
   1197c:	stp	q0, q0, [x8, #224]
   11980:	stp	q0, q0, [x8, #256]
   11984:	stp	q0, q0, [x8, #288]
   11988:	stp	q0, q0, [x8, #320]
   1198c:	stp	q0, q0, [x8, #352]
   11990:	stp	q0, q0, [x8, #384]
   11994:	stp	q0, q0, [x8, #416]
   11998:	stp	q0, q0, [x8, #448]
   1199c:	stp	q0, q0, [x8, #480]
   119a0:	cbz	w19, 119c4 <lzma_lzma_preset@@XZ_5.0+0x1540>
   119a4:	tbnz	w2, #0, 119c4 <lzma_lzma_preset@@XZ_5.0+0x1540>
   119a8:	mov	w21, wzr
   119ac:	mov	x0, x20
   119b0:	mov	w1, w21
   119b4:	bl	12294 <lzma_mode_is_supported@@XZ_5.0+0x5d0>
   119b8:	add	w21, w21, #0x1
   119bc:	cmp	w19, w21
   119c0:	b.ne	119ac <lzma_lzma_preset@@XZ_5.0+0x1528>  // b.any
   119c4:	ldp	x20, x19, [sp, #32]
   119c8:	ldr	x21, [sp, #16]
   119cc:	ldp	x29, x30, [sp], #48
   119d0:	ret
   119d4:	stp	x29, x30, [sp, #-48]!
   119d8:	stp	x20, x19, [sp, #32]
   119dc:	str	x21, [sp, #16]
   119e0:	mov	x21, x0
   119e4:	ldr	x0, [x0]
   119e8:	mov	x20, x3
   119ec:	mov	x19, x2
   119f0:	mov	x29, sp
   119f4:	cbnz	x0, 11a0c <lzma_lzma_preset@@XZ_5.0+0x1588>
   119f8:	mov	w0, #0xcee8                	// #52968
   119fc:	movk	w0, #0x3, lsl #16
   11a00:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
   11a04:	str	x0, [x21]
   11a08:	cbz	x0, 11afc <lzma_lzma_preset@@XZ_5.0+0x1678>
   11a0c:	ldr	w8, [x19, #32]
   11a10:	cmp	w8, #0x2
   11a14:	b.eq	11a3c <lzma_lzma_preset@@XZ_5.0+0x15b8>  // b.none
   11a18:	cmp	w8, #0x1
   11a1c:	b.ne	11ae8 <lzma_lzma_preset@@XZ_5.0+0x1664>  // b.any
   11a20:	strb	w8, [x0, #2956]
   11a24:	ldr	x8, [x19, #8]
   11a28:	cbz	x8, 11a94 <lzma_lzma_preset@@XZ_5.0+0x1610>
   11a2c:	ldr	w9, [x19, #16]
   11a30:	cmp	w9, #0x0
   11a34:	cset	w9, ne  // ne = any
   11a38:	b	11a98 <lzma_lzma_preset@@XZ_5.0+0x1614>
   11a3c:	strb	wzr, [x0, #2956]
   11a40:	ldr	w11, [x19]
   11a44:	mov	w9, #0x24c                 	// #588
   11a48:	movk	w9, #0x1, lsl #16
   11a4c:	mov	w10, #0xba04                	// #47620
   11a50:	mov	w8, wzr
   11a54:	add	x9, x0, x9
   11a58:	add	x10, x0, x10
   11a5c:	mov	w12, #0xfffffffe            	// #-2
   11a60:	mov	w13, #0x1                   	// #1
   11a64:	lsl	w14, w13, w8
   11a68:	add	w8, w8, #0x1
   11a6c:	cmp	w14, w11
   11a70:	add	w12, w12, #0x2
   11a74:	b.cc	11a64 <lzma_lzma_preset@@XZ_5.0+0x15e0>  // b.lo, b.ul, b.last
   11a78:	str	w12, [x9, #3140]
   11a7c:	ldr	w8, [x19, #36]
   11a80:	sub	w8, w8, #0x1
   11a84:	str	w8, [x10]
   11a88:	str	w8, [x9]
   11a8c:	ldr	x8, [x19, #8]
   11a90:	cbnz	x8, 11a2c <lzma_lzma_preset@@XZ_5.0+0x15a8>
   11a94:	mov	w9, wzr
   11a98:	strb	w9, [x0, #2957]
   11a9c:	mov	w9, #0x1000                	// #4096
   11aa0:	strb	wzr, [x0, #2958]
   11aa4:	str	x9, [x20]
   11aa8:	adrp	x9, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
   11aac:	ldr	q0, [x9, #1600]
   11ab0:	ldr	w9, [x19]
   11ab4:	mov	x1, x19
   11ab8:	str	q0, [x20, #16]
   11abc:	str	x9, [x20, #8]
   11ac0:	ldr	w9, [x19, #36]
   11ac4:	str	x9, [x20, #32]
   11ac8:	ldr	x9, [x19, #40]
   11acc:	stp	x9, x8, [x20, #40]
   11ad0:	ldr	w8, [x19, #16]
   11ad4:	ldr	x21, [sp, #16]
   11ad8:	str	w8, [x20, #56]
   11adc:	ldp	x20, x19, [sp, #32]
   11ae0:	ldp	x29, x30, [sp], #48
   11ae4:	b	11010 <lzma_lzma_preset@@XZ_5.0+0xb8c>
   11ae8:	mov	w0, #0x8                   	// #8
   11aec:	ldp	x20, x19, [sp, #32]
   11af0:	ldr	x21, [sp, #16]
   11af4:	ldp	x29, x30, [sp], #48
   11af8:	ret
   11afc:	mov	w0, #0x5                   	// #5
   11b00:	ldp	x20, x19, [sp, #32]
   11b04:	ldr	x21, [sp, #16]
   11b08:	ldp	x29, x30, [sp], #48
   11b0c:	ret
   11b10:	adrp	x3, 11000 <lzma_lzma_preset@@XZ_5.0+0xb7c>
   11b14:	add	x3, x3, #0xb1c
   11b18:	b	dae4 <lzma_crc64@@XZ_5.0+0x1398>
   11b1c:	adrp	x8, 12000 <lzma_mode_is_supported@@XZ_5.0+0x33c>
   11b20:	add	x8, x8, #0x44c
   11b24:	str	x8, [x0, #8]
   11b28:	b	119d4 <lzma_lzma_preset@@XZ_5.0+0x1550>
   11b2c:	sub	sp, sp, #0x50
   11b30:	stp	x29, x30, [sp, #64]
   11b34:	ldr	w9, [x0, #20]
   11b38:	add	x29, sp, #0x40
   11b3c:	cmp	w9, #0x4
   11b40:	b.hi	11bf0 <lzma_lzma_preset@@XZ_5.0+0x176c>  // b.pmore
   11b44:	ldr	w10, [x0, #24]
   11b48:	mov	x8, #0xffffffffffffffff    	// #-1
   11b4c:	cmp	w10, #0x4
   11b50:	b.hi	11be0 <lzma_lzma_preset@@XZ_5.0+0x175c>  // b.pmore
   11b54:	add	w9, w10, w9
   11b58:	cmp	w9, #0x4
   11b5c:	b.hi	11be0 <lzma_lzma_preset@@XZ_5.0+0x175c>  // b.pmore
   11b60:	ldr	w8, [x0, #28]
   11b64:	cmp	w8, #0x4
   11b68:	b.hi	11bf0 <lzma_lzma_preset@@XZ_5.0+0x176c>  // b.pmore
   11b6c:	ldr	w8, [x0, #36]
   11b70:	sub	w9, w8, #0x2
   11b74:	cmp	w9, #0x10f
   11b78:	b.hi	11bf0 <lzma_lzma_preset@@XZ_5.0+0x176c>  // b.pmore
   11b7c:	ldr	w9, [x0, #32]
   11b80:	sub	w9, w9, #0x1
   11b84:	cmp	w9, #0x1
   11b88:	b.hi	11bf0 <lzma_lzma_preset@@XZ_5.0+0x176c>  // b.pmore
   11b8c:	mov	w9, #0x1000                	// #4096
   11b90:	adrp	x10, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
   11b94:	str	x9, [sp]
   11b98:	ldr	q0, [x10, #1600]
   11b9c:	ldr	w9, [x0]
   11ba0:	str	x8, [sp, #32]
   11ba4:	str	q0, [sp, #16]
   11ba8:	str	x9, [sp, #8]
   11bac:	ldr	x8, [x0, #40]
   11bb0:	str	x8, [sp, #40]
   11bb4:	ldr	x8, [x0, #8]
   11bb8:	str	x8, [sp, #48]
   11bbc:	ldr	w8, [x0, #16]
   11bc0:	mov	x0, sp
   11bc4:	str	w8, [sp, #56]
   11bc8:	bl	d7d0 <lzma_crc64@@XZ_5.0+0x1084>
   11bcc:	mov	w8, #0xcee8                	// #52968
   11bd0:	movk	w8, #0x3, lsl #16
   11bd4:	add	x8, x0, x8
   11bd8:	cmn	x0, #0x1
   11bdc:	csinv	x8, x8, xzr, ne  // ne = any
   11be0:	ldp	x29, x30, [sp, #64]
   11be4:	mov	x0, x8
   11be8:	add	sp, sp, #0x50
   11bec:	ret
   11bf0:	mov	x8, #0xffffffffffffffff    	// #-1
   11bf4:	ldp	x29, x30, [sp, #64]
   11bf8:	mov	x0, x8
   11bfc:	add	sp, sp, #0x50
   11c00:	ret
   11c04:	ldr	w9, [x0, #20]
   11c08:	cmp	w9, #0x4
   11c0c:	b.hi	11c58 <lzma_lzma_preset@@XZ_5.0+0x17d4>  // b.pmore
   11c10:	ldr	w10, [x0, #24]
   11c14:	mov	x8, x0
   11c18:	mov	w0, #0x1                   	// #1
   11c1c:	cmp	w10, #0x4
   11c20:	b.hi	11c54 <lzma_lzma_preset@@XZ_5.0+0x17d0>  // b.pmore
   11c24:	add	w11, w10, w9
   11c28:	cmp	w11, #0x4
   11c2c:	b.hi	11c54 <lzma_lzma_preset@@XZ_5.0+0x17d0>  // b.pmore
   11c30:	ldr	w8, [x8, #28]
   11c34:	cmp	w8, #0x4
   11c38:	b.hi	11c58 <lzma_lzma_preset@@XZ_5.0+0x17d4>  // b.pmore
   11c3c:	add	w8, w8, w8, lsl #2
   11c40:	add	w8, w8, w10
   11c44:	add	w8, w8, w8, lsl #3
   11c48:	mov	w0, wzr
   11c4c:	add	w8, w8, w9
   11c50:	strb	w8, [x1]
   11c54:	ret
   11c58:	mov	w0, #0x1                   	// #1
   11c5c:	ret
   11c60:	ldr	w9, [x0, #20]
   11c64:	cmp	w9, #0x4
   11c68:	b.hi	11cbc <lzma_lzma_preset@@XZ_5.0+0x1838>  // b.pmore
   11c6c:	ldr	w10, [x0, #24]
   11c70:	mov	x8, x0
   11c74:	mov	w0, #0xb                   	// #11
   11c78:	cmp	w10, #0x4
   11c7c:	b.hi	11cb8 <lzma_lzma_preset@@XZ_5.0+0x1834>  // b.pmore
   11c80:	add	w11, w10, w9
   11c84:	cmp	w11, #0x4
   11c88:	b.hi	11cb8 <lzma_lzma_preset@@XZ_5.0+0x1834>  // b.pmore
   11c8c:	ldr	w11, [x8, #28]
   11c90:	cmp	w11, #0x4
   11c94:	b.hi	11cbc <lzma_lzma_preset@@XZ_5.0+0x1838>  // b.pmore
   11c98:	add	w11, w11, w11, lsl #2
   11c9c:	add	w10, w11, w10
   11ca0:	add	w10, w10, w10, lsl #3
   11ca4:	add	w9, w10, w9
   11ca8:	strb	w9, [x1]
   11cac:	ldr	w8, [x8]
   11cb0:	mov	w0, wzr
   11cb4:	stur	w8, [x1, #1]
   11cb8:	ret
   11cbc:	mov	w0, #0xb                   	// #11
   11cc0:	ret

0000000000011cc4 <lzma_mode_is_supported@@XZ_5.0>:
   11cc4:	sub	w8, w0, #0x1
   11cc8:	cmp	w8, #0x2
   11ccc:	cset	w0, cc  // cc = lo, ul, last
   11cd0:	ret
   11cd4:	stp	x29, x30, [sp, #-48]!
   11cd8:	stp	x22, x21, [sp, #16]
   11cdc:	stp	x20, x19, [sp, #32]
   11ce0:	ldr	w9, [x0, #736]
   11ce4:	ldrb	w4, [x0, #2956]
   11ce8:	mov	w8, #0xe94                 	// #3732
   11cec:	movk	w8, #0x1, lsl #16
   11cf0:	mov	w10, #0xa                   	// #10
   11cf4:	mov	w11, #0x7                   	// #7
   11cf8:	mov	w12, #0x7200                	// #29184
   11cfc:	cmp	w9, #0x7
   11d00:	mov	w19, w2
   11d04:	mov	w2, w1
   11d08:	add	x22, x0, x8
   11d0c:	csel	w8, w11, w10, cc  // cc = lo, ul, last
   11d10:	add	x1, x0, x12
   11d14:	mov	x29, sp
   11d18:	mov	w21, w3
   11d1c:	mov	x20, x0
   11d20:	str	w8, [x0, #736]
   11d24:	bl	11ff8 <lzma_mode_is_supported@@XZ_5.0+0x334>
   11d28:	lsr	w8, w19, #13
   11d2c:	cbnz	w8, 11d40 <lzma_mode_is_supported@@XZ_5.0+0x7c>
   11d30:	adrp	x8, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   11d34:	ldr	x8, [x8, #4008]
   11d38:	ldrb	w9, [x8, w19, uxtw]
   11d3c:	b	11d7c <lzma_mode_is_supported@@XZ_5.0+0xb8>
   11d40:	lsr	w8, w19, #25
   11d44:	cbnz	w8, 11d64 <lzma_mode_is_supported@@XZ_5.0+0xa0>
   11d48:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   11d4c:	ldr	x9, [x9, #4008]
   11d50:	mov	w8, w19
   11d54:	lsr	x8, x8, #12
   11d58:	ldrb	w8, [x9, x8]
   11d5c:	add	w9, w8, #0x18
   11d60:	b	11d7c <lzma_mode_is_supported@@XZ_5.0+0xb8>
   11d64:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   11d68:	ldr	x9, [x9, #4008]
   11d6c:	mov	w8, w19
   11d70:	lsr	x8, x8, #24
   11d74:	ldrb	w8, [x9, x8]
   11d78:	add	w9, w8, #0x30
   11d7c:	ldr	x12, [x20, #24]
   11d80:	ubfx	w13, w9, #5, #1
   11d84:	add	x16, x20, #0x28
   11d88:	sub	w10, w21, #0x2
   11d8c:	str	w13, [x16, x12, lsl #2]
   11d90:	cmp	w21, #0x6
   11d94:	mov	w11, #0x3                   	// #3
   11d98:	ldr	x12, [x20, #24]
   11d9c:	csel	w10, w10, w11, cc  // cc = lo, ul, last
   11da0:	mov	w15, #0x6efe                	// #28414
   11da4:	add	x10, x20, x10, lsl #7
   11da8:	add	x11, x20, #0x110
   11dac:	add	x15, x10, x15
   11db0:	str	x15, [x11, x12, lsl #3]
   11db4:	ubfx	w15, w9, #4, #1
   11db8:	add	x12, x12, #0x1
   11dbc:	str	x12, [x20, #24]
   11dc0:	str	w15, [x16, x12, lsl #2]
   11dc4:	ldr	x15, [x20, #24]
   11dc8:	mov	w14, #0x6efc                	// #28412
   11dcc:	mov	w13, #0x2                   	// #2
   11dd0:	bfxil	w13, w9, #5, #1
   11dd4:	add	x14, x10, x14
   11dd8:	add	x10, x14, w13, uxtw #1
   11ddc:	ubfx	w12, w9, #3, #1
   11de0:	str	x10, [x11, x15, lsl #3]
   11de4:	add	x15, x15, #0x1
   11de8:	str	x15, [x20, #24]
   11dec:	str	w12, [x16, x15, lsl #2]
   11df0:	ldr	x12, [x20, #24]
   11df4:	lsl	w13, w13, #1
   11df8:	bfxil	w13, w9, #4, #1
   11dfc:	add	x15, x14, w13, uxtw #1
   11e00:	ubfx	w10, w9, #2, #1
   11e04:	str	x15, [x11, x12, lsl #3]
   11e08:	add	x12, x12, #0x1
   11e0c:	str	x12, [x20, #24]
   11e10:	str	w10, [x16, x12, lsl #2]
   11e14:	ldr	x12, [x20, #24]
   11e18:	lsl	w13, w13, #1
   11e1c:	bfxil	w13, w9, #3, #1
   11e20:	add	x10, x14, w13, uxtw #1
   11e24:	ubfx	w15, w9, #1, #1
   11e28:	str	x10, [x11, x12, lsl #3]
   11e2c:	add	x12, x12, #0x1
   11e30:	str	x12, [x20, #24]
   11e34:	str	w15, [x16, x12, lsl #2]
   11e38:	ldr	x12, [x20, #24]
   11e3c:	lsl	w13, w13, #1
   11e40:	bfxil	w13, w9, #2, #1
   11e44:	add	x15, x14, w13, uxtw #1
   11e48:	and	w10, w9, #0x1
   11e4c:	str	x15, [x11, x12, lsl #3]
   11e50:	add	x12, x12, #0x1
   11e54:	str	x12, [x20, #24]
   11e58:	str	w10, [x16, x12, lsl #2]
   11e5c:	ldr	x12, [x20, #24]
   11e60:	lsl	w13, w13, #1
   11e64:	bfxil	w13, w9, #1, #1
   11e68:	add	x13, x14, w13, uxtw #1
   11e6c:	add	x8, x20, #0x2e4
   11e70:	str	x13, [x11, x12, lsl #3]
   11e74:	add	x11, x12, #0x1
   11e78:	cmp	w9, #0x4
   11e7c:	str	x11, [x20, #24]
   11e80:	b.cc	11fc8 <lzma_mode_is_supported@@XZ_5.0+0x304>  // b.lo, b.ul, b.last
   11e84:	lsr	w13, w9, #1
   11e88:	orr	w10, w10, #0x2
   11e8c:	sub	w12, w13, #0x1
   11e90:	lsl	w14, w10, w12
   11e94:	cmp	w9, #0xd
   11e98:	sub	w10, w19, w14
   11e9c:	b.hi	11ef4 <lzma_mode_is_supported@@XZ_5.0+0x230>  // b.pmore
   11ea0:	add	x13, x20, w14, uxtw #1
   11ea4:	mov	w14, #0x70fa                	// #28922
   11ea8:	sub	x9, x13, w9, uxtw #1
   11eac:	add	x9, x9, x14
   11eb0:	mov	w13, #0x1                   	// #1
   11eb4:	and	w14, w10, #0x1
   11eb8:	add	x11, x20, x11, lsl #2
   11ebc:	str	w14, [x11, #40]
   11ec0:	ldr	x11, [x20, #24]
   11ec4:	lsr	w15, w10, #1
   11ec8:	add	x14, x9, w13, uxtw #1
   11ecc:	bfi	w10, w13, #1, #31
   11ed0:	add	x13, x20, x11, lsl #3
   11ed4:	subs	w12, w12, #0x1
   11ed8:	add	x11, x11, #0x1
   11edc:	str	x14, [x13, #272]
   11ee0:	mov	w13, w10
   11ee4:	mov	w10, w15
   11ee8:	str	x11, [x20, #24]
   11eec:	b.ne	11eb4 <lzma_mode_is_supported@@XZ_5.0+0x1f0>  // b.any
   11ef0:	b	11fc8 <lzma_mode_is_supported@@XZ_5.0+0x304>
   11ef4:	lsr	w9, w10, #4
   11ef8:	sub	w12, w13, #0x6
   11efc:	lsr	w13, w9, w12
   11f00:	mov	w14, #0x2                   	// #2
   11f04:	add	x15, x11, #0x1
   11f08:	bfxil	w14, w13, #0, #1
   11f0c:	add	x11, x20, x11, lsl #2
   11f10:	str	x15, [x20, #24]
   11f14:	str	w14, [x11, #40]
   11f18:	ldr	x11, [x20, #24]
   11f1c:	sub	w12, w12, #0x1
   11f20:	cmn	w12, #0x1
   11f24:	b.ne	11efc <lzma_mode_is_supported@@XZ_5.0+0x238>  // b.any
   11f28:	and	w9, w10, #0x1
   11f2c:	add	x14, x20, #0x28
   11f30:	str	w9, [x14, x11, lsl #2]
   11f34:	ldr	x9, [x20, #24]
   11f38:	mov	w13, #0x71e2                	// #29154
   11f3c:	add	x15, x20, #0x110
   11f40:	add	x13, x20, x13
   11f44:	ubfx	w16, w10, #1, #1
   11f48:	str	x13, [x15, x9, lsl #3]
   11f4c:	add	x9, x9, #0x1
   11f50:	str	x9, [x20, #24]
   11f54:	str	w16, [x14, x9, lsl #2]
   11f58:	ldr	x9, [x20, #24]
   11f5c:	mov	w12, #0x71e0                	// #29152
   11f60:	mov	w11, #0x2                   	// #2
   11f64:	add	x12, x20, x12
   11f68:	bfxil	w11, w10, #0, #1
   11f6c:	add	x13, x12, w11, uxtw #1
   11f70:	str	x13, [x15, x9, lsl #3]
   11f74:	ubfx	w13, w10, #2, #1
   11f78:	add	x9, x9, #0x1
   11f7c:	str	x9, [x20, #24]
   11f80:	str	w13, [x14, x9, lsl #2]
   11f84:	ldr	x9, [x20, #24]
   11f88:	bfi	w16, w11, #1, #2
   11f8c:	add	x11, x12, w16, uxtw #1
   11f90:	ubfx	w10, w10, #3, #1
   11f94:	str	x11, [x15, x9, lsl #3]
   11f98:	add	x9, x9, #0x1
   11f9c:	str	x9, [x20, #24]
   11fa0:	str	w10, [x14, x9, lsl #2]
   11fa4:	ldr	x9, [x20, #24]
   11fa8:	bfi	w13, w16, #1, #3
   11fac:	add	x10, x12, w13, uxtw #1
   11fb0:	str	x10, [x15, x9, lsl #3]
   11fb4:	add	x9, x9, #0x1
   11fb8:	str	x9, [x20, #24]
   11fbc:	ldr	w9, [x22, #68]
   11fc0:	add	w9, w9, #0x1
   11fc4:	str	w9, [x22, #68]
   11fc8:	ldr	w9, [x20, #748]
   11fcc:	str	w9, [x20, #752]
   11fd0:	ldr	x8, [x8]
   11fd4:	str	w19, [x20, #740]
   11fd8:	str	x8, [x20, #744]
   11fdc:	ldr	w8, [x22]
   11fe0:	add	w8, w8, #0x1
   11fe4:	str	w8, [x22]
   11fe8:	ldp	x20, x19, [sp, #32]
   11fec:	ldp	x22, x21, [sp, #16]
   11ff0:	ldp	x29, x30, [sp], #48
   11ff4:	ret
   11ff8:	ldr	x9, [x0, #24]
   11ffc:	sub	w8, w3, #0x2
   12000:	cmp	w8, #0x7
   12004:	add	x9, x0, x9, lsl #2
   12008:	add	x10, x9, #0x28
   1200c:	b.hi	12080 <lzma_mode_is_supported@@XZ_5.0+0x3bc>  // b.pmore
   12010:	str	wzr, [x10]
   12014:	ldr	x11, [x0, #24]
   12018:	add	x9, x0, #0x110
   1201c:	lsr	w10, w8, #2
   12020:	add	x13, x0, #0x28
   12024:	str	x1, [x9, x11, lsl #3]
   12028:	add	x11, x11, #0x1
   1202c:	str	x11, [x0, #24]
   12030:	str	w10, [x13, x11, lsl #2]
   12034:	ldr	x11, [x0, #24]
   12038:	add	x12, x1, w2, uxtw #4
   1203c:	add	x15, x12, #0x4
   12040:	add	x12, x12, #0x6
   12044:	ubfx	w14, w8, #1, #1
   12048:	str	x12, [x9, x11, lsl #3]
   1204c:	add	x11, x11, #0x1
   12050:	str	x11, [x0, #24]
   12054:	str	w14, [x13, x11, lsl #2]
   12058:	ldr	x11, [x0, #24]
   1205c:	orr	w10, w10, #0x2
   12060:	add	x12, x15, w10, uxtw #1
   12064:	lsl	w10, w10, #1
   12068:	bfxil	w10, w8, #1, #1
   1206c:	str	x12, [x9, x11, lsl #3]
   12070:	add	x11, x11, #0x1
   12074:	str	x11, [x0, #24]
   12078:	add	x9, x15, w10, uxtw #1
   1207c:	b	12248 <lzma_mode_is_supported@@XZ_5.0+0x584>
   12080:	mov	w9, #0x1                   	// #1
   12084:	str	w9, [x10]
   12088:	ldr	x10, [x0, #24]
   1208c:	sub	w8, w3, #0xa
   12090:	add	x12, x1, #0x2
   12094:	cmp	w8, #0x7
   12098:	add	x11, x0, x10, lsl #3
   1209c:	add	x10, x10, #0x1
   120a0:	str	x1, [x11, #272]
   120a4:	str	x10, [x0, #24]
   120a8:	add	x10, x0, x10, lsl #2
   120ac:	add	x10, x10, #0x28
   120b0:	b.hi	12124 <lzma_mode_is_supported@@XZ_5.0+0x460>  // b.pmore
   120b4:	str	wzr, [x10]
   120b8:	ldr	x11, [x0, #24]
   120bc:	add	x9, x0, #0x110
   120c0:	lsr	w10, w8, #2
   120c4:	add	x14, x0, #0x28
   120c8:	str	x12, [x9, x11, lsl #3]
   120cc:	add	x11, x11, #0x1
   120d0:	str	x11, [x0, #24]
   120d4:	str	w10, [x14, x11, lsl #2]
   120d8:	ldr	x11, [x0, #24]
   120dc:	add	x13, x1, w2, uxtw #4
   120e0:	add	x12, x13, #0x104
   120e4:	add	x13, x13, #0x106
   120e8:	ubfx	w15, w8, #1, #1
   120ec:	str	x13, [x9, x11, lsl #3]
   120f0:	add	x11, x11, #0x1
   120f4:	str	x11, [x0, #24]
   120f8:	str	w15, [x14, x11, lsl #2]
   120fc:	ldr	x11, [x0, #24]
   12100:	orr	w10, w10, #0x2
   12104:	add	x13, x12, w10, uxtw #1
   12108:	lsl	w10, w10, #1
   1210c:	bfxil	w10, w8, #1, #1
   12110:	str	x13, [x9, x11, lsl #3]
   12114:	add	x11, x11, #0x1
   12118:	str	x11, [x0, #24]
   1211c:	add	x9, x12, w10, uxtw #1
   12120:	b	12248 <lzma_mode_is_supported@@XZ_5.0+0x584>
   12124:	str	w9, [x10]
   12128:	ldr	x13, [x0, #24]
   1212c:	add	x9, x0, #0x110
   12130:	sub	w8, w3, #0x12
   12134:	add	x11, x0, #0x28
   12138:	ubfx	w14, w8, #7, #1
   1213c:	str	x12, [x9, x13, lsl #3]
   12140:	add	x12, x13, #0x1
   12144:	str	x12, [x0, #24]
   12148:	str	w14, [x11, x12, lsl #2]
   1214c:	ldr	x12, [x0, #24]
   12150:	add	x13, x1, #0x206
   12154:	ubfx	w15, w8, #6, #1
   12158:	mov	w14, #0x2                   	// #2
   1215c:	str	x13, [x9, x12, lsl #3]
   12160:	add	x12, x12, #0x1
   12164:	str	x12, [x0, #24]
   12168:	str	w15, [x11, x12, lsl #2]
   1216c:	ldr	x12, [x0, #24]
   12170:	add	x10, x1, #0x204
   12174:	bfxil	w14, w8, #7, #1
   12178:	add	x15, x10, w14, uxtw #1
   1217c:	ubfx	w13, w8, #5, #1
   12180:	str	x15, [x9, x12, lsl #3]
   12184:	add	x12, x12, #0x1
   12188:	str	x12, [x0, #24]
   1218c:	str	w13, [x11, x12, lsl #2]
   12190:	ldr	x12, [x0, #24]
   12194:	lsl	w13, w14, #1
   12198:	bfxil	w13, w8, #6, #1
   1219c:	add	x14, x10, w13, uxtw #1
   121a0:	ubfx	w15, w8, #4, #1
   121a4:	str	x14, [x9, x12, lsl #3]
   121a8:	add	x12, x12, #0x1
   121ac:	str	x12, [x0, #24]
   121b0:	str	w15, [x11, x12, lsl #2]
   121b4:	ldr	x12, [x0, #24]
   121b8:	lsl	w13, w13, #1
   121bc:	bfxil	w13, w8, #5, #1
   121c0:	add	x15, x10, w13, uxtw #1
   121c4:	ubfx	w14, w8, #3, #1
   121c8:	str	x15, [x9, x12, lsl #3]
   121cc:	add	x12, x12, #0x1
   121d0:	str	x12, [x0, #24]
   121d4:	str	w14, [x11, x12, lsl #2]
   121d8:	ldr	x12, [x0, #24]
   121dc:	lsl	w13, w13, #1
   121e0:	bfxil	w13, w8, #4, #1
   121e4:	add	x14, x10, w13, uxtw #1
   121e8:	ubfx	w15, w8, #2, #1
   121ec:	str	x14, [x9, x12, lsl #3]
   121f0:	add	x12, x12, #0x1
   121f4:	str	x12, [x0, #24]
   121f8:	str	w15, [x11, x12, lsl #2]
   121fc:	ldr	x12, [x0, #24]
   12200:	lsl	w13, w13, #1
   12204:	bfxil	w13, w8, #3, #1
   12208:	add	x15, x10, w13, uxtw #1
   1220c:	ubfx	w14, w8, #1, #1
   12210:	str	x15, [x9, x12, lsl #3]
   12214:	add	x12, x12, #0x1
   12218:	str	x12, [x0, #24]
   1221c:	str	w14, [x11, x12, lsl #2]
   12220:	lsl	w13, w13, #1
   12224:	ldr	x11, [x0, #24]
   12228:	bfxil	w13, w8, #2, #1
   1222c:	add	x12, x10, w13, uxtw #1
   12230:	lsl	w13, w13, #1
   12234:	bfxil	w13, w8, #1, #1
   12238:	str	x12, [x9, x11, lsl #3]
   1223c:	add	x11, x11, #0x1
   12240:	add	x9, x10, w13, uxtw #1
   12244:	str	x11, [x0, #24]
   12248:	and	w8, w8, #0x1
   1224c:	add	x10, x0, x11, lsl #2
   12250:	str	w8, [x10, #40]
   12254:	ldr	x8, [x0, #24]
   12258:	add	x10, x0, x8, lsl #3
   1225c:	add	x8, x8, #0x1
   12260:	str	x9, [x10, #272]
   12264:	str	x8, [x0, #24]
   12268:	tbnz	w4, #0, 12284 <lzma_mode_is_supported@@XZ_5.0+0x5c0>
   1226c:	add	x8, x1, w2, uxtw #2
   12270:	mov	w9, #0x4808                	// #18440
   12274:	ldr	w10, [x8, x9]
   12278:	subs	w10, w10, #0x1
   1227c:	str	w10, [x8, x9]
   12280:	b.eq	12288 <lzma_mode_is_supported@@XZ_5.0+0x5c4>  // b.none
   12284:	ret
   12288:	mov	x0, x1
   1228c:	mov	w1, w2
   12290:	b	12294 <lzma_mode_is_supported@@XZ_5.0+0x5d0>
   12294:	mov	w8, #0x4804                	// #18436
   12298:	ldr	w8, [x0, x8]
   1229c:	add	x9, x0, w1, uxtw #2
   122a0:	mov	w10, #0x4808                	// #18440
   122a4:	str	w8, [x9, x10]
   122a8:	ldrh	w9, [x0]
   122ac:	ldrh	w12, [x0, #2]
   122b0:	mov	w10, w1
   122b4:	lsr	x13, x9, #4
   122b8:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   122bc:	ldr	x9, [x9, #3960]
   122c0:	eor	x11, x13, #0x7f
   122c4:	cbz	w8, 12340 <lzma_mode_is_supported@@XZ_5.0+0x67c>
   122c8:	ldrb	w14, [x9, x13]
   122cc:	mov	w13, #0x440                 	// #1088
   122d0:	mov	x15, xzr
   122d4:	madd	x16, x10, x13, x0
   122d8:	mov	w13, wzr
   122dc:	add	w17, w15, #0x8
   122e0:	and	w18, w17, #0x1
   122e4:	lsr	w17, w17, #1
   122e8:	lsl	w1, w17, #1
   122ec:	add	x2, x0, x10, lsl #4
   122f0:	add	x1, x2, x1
   122f4:	ldrh	w1, [x1, #4]
   122f8:	neg	w18, w18
   122fc:	and	w18, w18, #0x7f0
   12300:	cmp	w17, #0x1
   12304:	eor	w18, w18, w1
   12308:	lsr	x18, x18, #4
   1230c:	ldrb	w18, [x9, x18]
   12310:	add	w13, w13, w18
   12314:	b.ne	122e0 <lzma_mode_is_supported@@XZ_5.0+0x61c>  // b.any
   12318:	add	w17, w13, w14
   1231c:	add	x13, x15, #0x1
   12320:	add	x18, x16, x15, lsl #2
   12324:	cmp	x13, x8
   12328:	str	w17, [x18, #1028]
   1232c:	b.cs	12344 <lzma_mode_is_supported@@XZ_5.0+0x680>  // b.hs, b.nlast
   12330:	cmp	x15, #0x7
   12334:	mov	x15, x13
   12338:	b.cc	122d8 <lzma_mode_is_supported@@XZ_5.0+0x614>  // b.lo, b.ul, b.last
   1233c:	b	12344 <lzma_mode_is_supported@@XZ_5.0+0x680>
   12340:	mov	w13, wzr
   12344:	ldrb	w11, [x9, x11]
   12348:	cmp	w13, w8
   1234c:	lsr	x12, x12, #4
   12350:	b.cs	123d4 <lzma_mode_is_supported@@XZ_5.0+0x710>  // b.hs, b.nlast
   12354:	cmp	w13, #0xf
   12358:	b.hi	123d4 <lzma_mode_is_supported@@XZ_5.0+0x710>  // b.pmore
   1235c:	ldrb	w15, [x9, x12]
   12360:	mov	w14, w13
   12364:	mov	w13, #0x440                 	// #1088
   12368:	madd	x16, x10, x13, x0
   1236c:	add	w15, w15, w11
   12370:	mov	w13, wzr
   12374:	mov	w17, w14
   12378:	and	w18, w17, #0x1
   1237c:	lsr	w17, w17, #1
   12380:	lsl	w1, w17, #1
   12384:	add	x2, x0, x10, lsl #4
   12388:	add	x1, x2, x1
   1238c:	ldrh	w1, [x1, #260]
   12390:	neg	w18, w18
   12394:	and	w18, w18, #0x7f0
   12398:	cmp	w17, #0x1
   1239c:	eor	w18, w18, w1
   123a0:	lsr	x18, x18, #4
   123a4:	ldrb	w18, [x9, x18]
   123a8:	add	w13, w13, w18
   123ac:	b.ne	12378 <lzma_mode_is_supported@@XZ_5.0+0x6b4>  // b.any
   123b0:	add	w17, w15, w13
   123b4:	add	x13, x14, #0x1
   123b8:	add	x18, x16, x14, lsl #2
   123bc:	cmp	x13, x8
   123c0:	str	w17, [x18, #1028]
   123c4:	b.cs	123d4 <lzma_mode_is_supported@@XZ_5.0+0x710>  // b.hs, b.nlast
   123c8:	cmp	x14, #0xf
   123cc:	mov	x14, x13
   123d0:	b.cc	12370 <lzma_mode_is_supported@@XZ_5.0+0x6ac>  // b.lo, b.ul, b.last
   123d4:	cmp	w13, w8
   123d8:	b.cs	12448 <lzma_mode_is_supported@@XZ_5.0+0x784>  // b.hs, b.nlast
   123dc:	eor	x12, x12, #0x7f
   123e0:	ldrb	w14, [x9, x12]
   123e4:	mov	w12, w13
   123e8:	mov	w13, #0x440                 	// #1088
   123ec:	madd	x10, x10, x13, x0
   123f0:	add	w11, w14, w11
   123f4:	mov	w13, wzr
   123f8:	add	w14, w12, #0xf0
   123fc:	and	w15, w14, #0x1
   12400:	lsr	w14, w14, #1
   12404:	lsl	w16, w14, #1
   12408:	add	x16, x0, x16
   1240c:	ldrh	w16, [x16, #516]
   12410:	neg	w15, w15
   12414:	and	w15, w15, #0x7f0
   12418:	cmp	w14, #0x1
   1241c:	eor	w15, w15, w16
   12420:	lsr	x15, x15, #4
   12424:	ldrb	w15, [x9, x15]
   12428:	add	w13, w13, w15
   1242c:	b.ne	123fc <lzma_mode_is_supported@@XZ_5.0+0x738>  // b.any
   12430:	add	x14, x10, x12, lsl #2
   12434:	add	x12, x12, #0x1
   12438:	add	w13, w11, w13
   1243c:	cmp	x12, x8
   12440:	str	w13, [x14, #1028]
   12444:	b.ne	123f4 <lzma_mode_is_supported@@XZ_5.0+0x730>  // b.any
   12448:	ret
   1244c:	ldr	w8, [x1, #104]
   12450:	cmp	w8, #0x1
   12454:	b.eq	12460 <lzma_mode_is_supported@@XZ_5.0+0x79c>  // b.none
   12458:	mov	w5, #0xffffffff            	// #-1
   1245c:	b	1059c <lzma_lzma_preset@@XZ_5.0+0x118>
   12460:	mov	w0, #0x8                   	// #8
   12464:	ret
   12468:	stp	x29, x30, [sp, #-96]!
   1246c:	stp	x26, x25, [sp, #32]
   12470:	ldr	w8, [x1, #28]
   12474:	ldr	w25, [x1, #96]
   12478:	stp	x22, x21, [sp, #64]
   1247c:	stp	x20, x19, [sp, #80]
   12480:	mov	x20, x3
   12484:	mov	x21, x2
   12488:	mov	x19, x1
   1248c:	mov	x22, x0
   12490:	str	x27, [sp, #16]
   12494:	stp	x24, x23, [sp, #48]
   12498:	mov	x29, sp
   1249c:	cbz	w8, 124b0 <lzma_mode_is_supported@@XZ_5.0+0x7ec>
   124a0:	ldr	w8, [x22, #2948]
   124a4:	ldr	w23, [x22, #2952]
   124a8:	str	w8, [x29, #28]
   124ac:	b	124c4 <lzma_mode_is_supported@@XZ_5.0+0x800>
   124b0:	add	x2, x22, #0x2f4
   124b4:	add	x1, x29, #0x1c
   124b8:	mov	x0, x19
   124bc:	bl	e020 <lzma_mf_is_supported@@XZ_5.0+0x2c>
   124c0:	mov	w23, w0
   124c4:	ldr	w13, [x19, #24]
   124c8:	ldr	w8, [x19, #36]
   124cc:	sub	w8, w8, w13
   124d0:	add	w9, w8, #0x1
   124d4:	cmp	w9, #0x111
   124d8:	mov	w9, #0x111                 	// #273
   124dc:	csinc	w8, w9, w8, cs  // cs = hs, nlast
   124e0:	cmp	w8, #0x2
   124e4:	b.cs	124fc <lzma_mode_is_supported@@XZ_5.0+0x838>  // b.hs, b.nlast
   124e8:	mov	w8, #0xffffffff            	// #-1
   124ec:	mov	w9, #0x1                   	// #1
   124f0:	str	w8, [x21]
   124f4:	str	w9, [x20]
   124f8:	b	1299c <lzma_mode_is_supported@@XZ_5.0+0xcd8>
   124fc:	ldr	x14, [x19]
   12500:	ldr	w16, [x22, #740]
   12504:	cmp	w8, #0x2
   12508:	add	x24, x14, x13
   1250c:	sub	x12, x24, #0x2
   12510:	sub	x9, x12, x16
   12514:	ldurb	w11, [x24, #-1]
   12518:	ldrb	w10, [x9]
   1251c:	b.ne	12548 <lzma_mode_is_supported@@XZ_5.0+0x884>  // b.any
   12520:	cmp	w11, w10
   12524:	b.ne	125ac <lzma_mode_is_supported@@XZ_5.0+0x8e8>  // b.any
   12528:	ldrb	w10, [x24]
   1252c:	ldrb	w9, [x9, #1]
   12530:	cmp	w10, w9
   12534:	b.ne	125ac <lzma_mode_is_supported@@XZ_5.0+0x8e8>  // b.any
   12538:	cmp	w25, #0x2
   1253c:	b.ls	12760 <lzma_mode_is_supported@@XZ_5.0+0xa9c>  // b.plast
   12540:	mov	w9, #0x2                   	// #2
   12544:	b	125b0 <lzma_mode_is_supported@@XZ_5.0+0x8ec>
   12548:	cmp	w11, w10
   1254c:	mov	w15, w8
   12550:	b.ne	125ec <lzma_mode_is_supported@@XZ_5.0+0x928>  // b.any
   12554:	ldrb	w10, [x24]
   12558:	ldrb	w9, [x9, #1]
   1255c:	cmp	w10, w9
   12560:	b.ne	125ec <lzma_mode_is_supported@@XZ_5.0+0x928>  // b.any
   12564:	sub	x16, x13, x16
   12568:	add	x17, x13, x14
   1256c:	mov	x9, xzr
   12570:	sub	x10, x15, #0x2
   12574:	add	x16, x14, x16
   12578:	add	x17, x17, #0x1
   1257c:	ldrb	w18, [x17, x9]
   12580:	ldrb	w0, [x16, x9]
   12584:	cmp	w18, w0
   12588:	b.ne	1274c <lzma_mode_is_supported@@XZ_5.0+0xa88>  // b.any
   1258c:	add	x9, x9, #0x1
   12590:	cmp	x10, x9
   12594:	b.ne	1257c <lzma_mode_is_supported@@XZ_5.0+0x8b8>  // b.any
   12598:	mov	w16, w8
   1259c:	cmp	w16, w25
   125a0:	b.cc	12758 <lzma_mode_is_supported@@XZ_5.0+0xa94>  // b.lo, b.ul, b.last
   125a4:	mov	w17, wzr
   125a8:	b	12820 <lzma_mode_is_supported@@XZ_5.0+0xb5c>
   125ac:	mov	w9, wzr
   125b0:	ldr	w10, [x22, #744]
   125b4:	sub	x10, x12, x10
   125b8:	ldrb	w13, [x10]
   125bc:	cmp	w11, w13
   125c0:	b.ne	1265c <lzma_mode_is_supported@@XZ_5.0+0x998>  // b.any
   125c4:	ldrb	w13, [x24]
   125c8:	ldrb	w10, [x10, #1]
   125cc:	cmp	w13, w10
   125d0:	b.ne	1265c <lzma_mode_is_supported@@XZ_5.0+0x998>  // b.any
   125d4:	cmp	w25, #0x3
   125d8:	b.cc	12784 <lzma_mode_is_supported@@XZ_5.0+0xac0>  // b.lo, b.ul, b.last
   125dc:	lsr	w9, w9, #1
   125e0:	eor	w10, w9, #0x1
   125e4:	mov	w9, #0x2                   	// #2
   125e8:	b	12660 <lzma_mode_is_supported@@XZ_5.0+0x99c>
   125ec:	mov	w9, wzr
   125f0:	ldr	w17, [x22, #744]
   125f4:	sub	x10, x12, x17
   125f8:	ldrb	w16, [x10]
   125fc:	cmp	w11, w16
   12600:	b.ne	126dc <lzma_mode_is_supported@@XZ_5.0+0xa18>  // b.any
   12604:	ldrb	w16, [x24]
   12608:	ldrb	w10, [x10, #1]
   1260c:	cmp	w16, w10
   12610:	b.ne	126dc <lzma_mode_is_supported@@XZ_5.0+0xa18>  // b.any
   12614:	sub	x17, x13, x17
   12618:	add	x18, x13, x14
   1261c:	mov	x10, xzr
   12620:	sub	x16, x15, #0x2
   12624:	add	x17, x14, x17
   12628:	add	x18, x18, #0x1
   1262c:	ldrb	w0, [x18, x10]
   12630:	ldrb	w1, [x17, x10]
   12634:	cmp	w0, w1
   12638:	b.ne	12768 <lzma_mode_is_supported@@XZ_5.0+0xaa4>  // b.any
   1263c:	add	x10, x10, #0x1
   12640:	cmp	x16, x10
   12644:	b.ne	1262c <lzma_mode_is_supported@@XZ_5.0+0x968>  // b.any
   12648:	mov	w16, w8
   1264c:	cmp	w16, w25
   12650:	b.cc	12774 <lzma_mode_is_supported@@XZ_5.0+0xab0>  // b.lo, b.ul, b.last
   12654:	mov	w17, #0x1                   	// #1
   12658:	b	12820 <lzma_mode_is_supported@@XZ_5.0+0xb5c>
   1265c:	mov	w10, wzr
   12660:	ldr	w13, [x22, #748]
   12664:	sub	x13, x12, x13
   12668:	ldrb	w14, [x13]
   1266c:	cmp	w11, w14
   12670:	b.ne	1269c <lzma_mode_is_supported@@XZ_5.0+0x9d8>  // b.any
   12674:	ldrb	w14, [x24]
   12678:	ldrb	w13, [x13, #1]
   1267c:	cmp	w14, w13
   12680:	b.ne	1269c <lzma_mode_is_supported@@XZ_5.0+0x9d8>  // b.any
   12684:	cmp	w25, #0x3
   12688:	mov	w13, #0x2                   	// #2
   1268c:	b.cc	12788 <lzma_mode_is_supported@@XZ_5.0+0xac4>  // b.lo, b.ul, b.last
   12690:	cmp	w9, #0x2
   12694:	csel	w10, w13, w10, cc  // cc = lo, ul, last
   12698:	mov	w9, #0x2                   	// #2
   1269c:	ldr	w13, [x22, #752]
   126a0:	sub	x12, x12, x13
   126a4:	ldrb	w13, [x12]
   126a8:	cmp	w11, w13
   126ac:	b.ne	12868 <lzma_mode_is_supported@@XZ_5.0+0xba4>  // b.any
   126b0:	ldrb	w11, [x24]
   126b4:	ldrb	w12, [x12, #1]
   126b8:	cmp	w11, w12
   126bc:	b.ne	12868 <lzma_mode_is_supported@@XZ_5.0+0xba4>  // b.any
   126c0:	cmp	w25, #0x3
   126c4:	mov	w13, #0x3                   	// #3
   126c8:	b.cc	12788 <lzma_mode_is_supported@@XZ_5.0+0xac4>  // b.lo, b.ul, b.last
   126cc:	cmp	w9, #0x2
   126d0:	csel	w10, w13, w10, cc  // cc = lo, ul, last
   126d4:	mov	w9, #0x2                   	// #2
   126d8:	b	12868 <lzma_mode_is_supported@@XZ_5.0+0xba4>
   126dc:	mov	w10, wzr
   126e0:	ldr	w18, [x22, #748]
   126e4:	sub	x16, x12, x18
   126e8:	ldrb	w17, [x16]
   126ec:	cmp	w11, w17
   126f0:	b.ne	127b8 <lzma_mode_is_supported@@XZ_5.0+0xaf4>  // b.any
   126f4:	ldrb	w17, [x24]
   126f8:	ldrb	w16, [x16, #1]
   126fc:	cmp	w17, w16
   12700:	b.ne	127b8 <lzma_mode_is_supported@@XZ_5.0+0xaf4>  // b.any
   12704:	sub	x18, x13, x18
   12708:	add	x0, x13, x14
   1270c:	mov	x16, xzr
   12710:	sub	x17, x15, #0x2
   12714:	add	x18, x14, x18
   12718:	add	x0, x0, #0x1
   1271c:	ldrb	w1, [x0, x16]
   12720:	ldrb	w2, [x18, x16]
   12724:	cmp	w1, w2
   12728:	b.ne	1279c <lzma_mode_is_supported@@XZ_5.0+0xad8>  // b.any
   1272c:	add	x16, x16, #0x1
   12730:	cmp	x17, x16
   12734:	b.ne	1271c <lzma_mode_is_supported@@XZ_5.0+0xa58>  // b.any
   12738:	mov	w16, w8
   1273c:	cmp	w16, w25
   12740:	mov	w17, #0x2                   	// #2
   12744:	b.cc	127ac <lzma_mode_is_supported@@XZ_5.0+0xae8>  // b.lo, b.ul, b.last
   12748:	b	12820 <lzma_mode_is_supported@@XZ_5.0+0xb5c>
   1274c:	add	w16, w9, #0x2
   12750:	cmp	w16, w25
   12754:	b.cs	125a4 <lzma_mode_is_supported@@XZ_5.0+0x8e0>  // b.hs, b.nlast
   12758:	mov	w9, w16
   1275c:	b	125f0 <lzma_mode_is_supported@@XZ_5.0+0x92c>
   12760:	mov	w13, wzr
   12764:	b	12788 <lzma_mode_is_supported@@XZ_5.0+0xac4>
   12768:	add	w16, w10, #0x2
   1276c:	cmp	w16, w25
   12770:	b.cs	12654 <lzma_mode_is_supported@@XZ_5.0+0x990>  // b.hs, b.nlast
   12774:	cmp	w16, w9
   12778:	cset	w10, hi  // hi = pmore
   1277c:	csel	w9, w16, w9, hi  // hi = pmore
   12780:	b	126e0 <lzma_mode_is_supported@@XZ_5.0+0xa1c>
   12784:	mov	w13, #0x1                   	// #1
   12788:	mov	w8, #0x2                   	// #2
   1278c:	str	w13, [x21]
   12790:	str	w8, [x20]
   12794:	mov	w21, #0x1                   	// #1
   12798:	b	12830 <lzma_mode_is_supported@@XZ_5.0+0xb6c>
   1279c:	add	w16, w16, #0x2
   127a0:	cmp	w16, w25
   127a4:	mov	w17, #0x2                   	// #2
   127a8:	b.cs	12820 <lzma_mode_is_supported@@XZ_5.0+0xb5c>  // b.hs, b.nlast
   127ac:	cmp	w16, w9
   127b0:	csel	w10, w17, w10, hi  // hi = pmore
   127b4:	csel	w9, w16, w9, hi  // hi = pmore
   127b8:	ldr	w16, [x22, #752]
   127bc:	sub	x12, x12, x16
   127c0:	ldrb	w17, [x12]
   127c4:	cmp	w11, w17
   127c8:	b.ne	12868 <lzma_mode_is_supported@@XZ_5.0+0xba4>  // b.any
   127cc:	ldrb	w11, [x24]
   127d0:	ldrb	w12, [x12, #1]
   127d4:	cmp	w11, w12
   127d8:	b.ne	12868 <lzma_mode_is_supported@@XZ_5.0+0xba4>  // b.any
   127dc:	sub	x12, x15, #0x2
   127e0:	sub	x15, x13, x16
   127e4:	add	x16, x13, x14
   127e8:	mov	x11, xzr
   127ec:	add	x13, x14, x15
   127f0:	add	x14, x16, #0x1
   127f4:	ldrb	w15, [x14, x11]
   127f8:	ldrb	w16, [x13, x11]
   127fc:	cmp	w15, w16
   12800:	b.ne	1284c <lzma_mode_is_supported@@XZ_5.0+0xb88>  // b.any
   12804:	add	x11, x11, #0x1
   12808:	cmp	x12, x11
   1280c:	b.ne	127f4 <lzma_mode_is_supported@@XZ_5.0+0xb30>  // b.any
   12810:	mov	w16, w8
   12814:	cmp	w16, w25
   12818:	mov	w17, #0x3                   	// #3
   1281c:	b.cc	1285c <lzma_mode_is_supported@@XZ_5.0+0xb98>  // b.lo, b.ul, b.last
   12820:	str	w17, [x21]
   12824:	subs	w21, w16, #0x1
   12828:	str	w16, [x20]
   1282c:	b.eq	1299c <lzma_mode_is_supported@@XZ_5.0+0xcd8>  // b.none
   12830:	ldr	x8, [x19, #56]
   12834:	mov	x0, x19
   12838:	mov	w1, w21
   1283c:	blr	x8
   12840:	ldr	w8, [x19, #28]
   12844:	add	w8, w8, w21
   12848:	b	12998 <lzma_mode_is_supported@@XZ_5.0+0xcd4>
   1284c:	add	w16, w11, #0x2
   12850:	cmp	w16, w25
   12854:	mov	w17, #0x3                   	// #3
   12858:	b.cs	12820 <lzma_mode_is_supported@@XZ_5.0+0xb5c>  // b.hs, b.nlast
   1285c:	cmp	w16, w9
   12860:	csel	w10, w17, w10, hi  // hi = pmore
   12864:	csel	w9, w16, w9, hi  // hi = pmore
   12868:	cmp	w23, w25
   1286c:	b.cs	128f4 <lzma_mode_is_supported@@XZ_5.0+0xc30>  // b.hs, b.nlast
   12870:	cmp	w23, #0x2
   12874:	b.cc	12934 <lzma_mode_is_supported@@XZ_5.0+0xc70>  // b.lo, b.ul, b.last
   12878:	ldr	w11, [x29, #28]
   1287c:	sub	w12, w11, #0x1
   12880:	add	x12, x22, w12, uxtw #3
   12884:	ldr	w26, [x12, #760]
   12888:	cmp	w11, #0x2
   1288c:	b.cc	128dc <lzma_mode_is_supported@@XZ_5.0+0xc18>  // b.lo, b.ul, b.last
   12890:	mov	w12, #0xfffffffe            	// #-2
   12894:	add	x12, x11, x12
   12898:	add	x13, x22, w12, uxtw #3
   1289c:	ldr	w13, [x13, #756]
   128a0:	add	w14, w13, #0x1
   128a4:	cmp	w23, w14
   128a8:	b.ne	128dc <lzma_mode_is_supported@@XZ_5.0+0xc18>  // b.any
   128ac:	and	x14, x12, #0xffffffff
   128b0:	add	x14, x22, x14, lsl #3
   128b4:	ldr	w14, [x14, #760]
   128b8:	cmp	w14, w26, lsr #7
   128bc:	b.cs	128dc <lzma_mode_is_supported@@XZ_5.0+0xc18>  // b.hs, b.nlast
   128c0:	sub	w11, w11, #0x1
   128c4:	cmp	w11, #0x1
   128c8:	sub	x12, x12, #0x1
   128cc:	mov	w26, w14
   128d0:	mov	w23, w13
   128d4:	str	w11, [x29, #28]
   128d8:	b.hi	12898 <lzma_mode_is_supported@@XZ_5.0+0xbd4>  // b.pmore
   128dc:	cmp	w26, #0x7f
   128e0:	ccmp	w23, #0x2, #0x0, hi  // hi = pmore
   128e4:	csinc	w23, w23, wzr, ne  // ne = any
   128e8:	cmp	w9, #0x2
   128ec:	b.cs	12940 <lzma_mode_is_supported@@XZ_5.0+0xc7c>  // b.hs, b.nlast
   128f0:	b	129b8 <lzma_mode_is_supported@@XZ_5.0+0xcf4>
   128f4:	ldr	w8, [x29, #28]
   128f8:	sub	w8, w8, #0x1
   128fc:	add	x8, x22, w8, uxtw #3
   12900:	ldr	w8, [x8, #760]
   12904:	subs	w22, w23, #0x1
   12908:	add	w8, w8, #0x4
   1290c:	str	w8, [x21]
   12910:	str	w23, [x20]
   12914:	b.eq	1299c <lzma_mode_is_supported@@XZ_5.0+0xcd8>  // b.none
   12918:	ldr	x8, [x19, #56]
   1291c:	mov	x0, x19
   12920:	mov	w1, w22
   12924:	blr	x8
   12928:	ldr	w8, [x19, #28]
   1292c:	add	w8, w8, w22
   12930:	b	12998 <lzma_mode_is_supported@@XZ_5.0+0xcd4>
   12934:	mov	w26, wzr
   12938:	cmp	w9, #0x2
   1293c:	b.cc	129b8 <lzma_mode_is_supported@@XZ_5.0+0xcf4>  // b.lo, b.ul, b.last
   12940:	add	w11, w9, #0x1
   12944:	cmp	w11, w23
   12948:	b.cs	12974 <lzma_mode_is_supported@@XZ_5.0+0xcb0>  // b.hs, b.nlast
   1294c:	cmp	w26, #0x201
   12950:	b.cc	12960 <lzma_mode_is_supported@@XZ_5.0+0xc9c>  // b.lo, b.ul, b.last
   12954:	add	w11, w9, #0x2
   12958:	cmp	w11, w23
   1295c:	b.cs	12974 <lzma_mode_is_supported@@XZ_5.0+0xcb0>  // b.hs, b.nlast
   12960:	cmp	w26, #0x8, lsl #12
   12964:	b.ls	129b8 <lzma_mode_is_supported@@XZ_5.0+0xcf4>  // b.plast
   12968:	add	w11, w9, #0x3
   1296c:	cmp	w11, w23
   12970:	b.cc	129b8 <lzma_mode_is_supported@@XZ_5.0+0xcf4>  // b.lo, b.ul, b.last
   12974:	ldr	x8, [x19, #56]
   12978:	str	w9, [x20]
   1297c:	sub	w20, w9, #0x1
   12980:	mov	x0, x19
   12984:	mov	w1, w20
   12988:	str	w10, [x21]
   1298c:	blr	x8
   12990:	ldr	w8, [x19, #28]
   12994:	add	w8, w8, w20
   12998:	str	w8, [x19, #28]
   1299c:	ldp	x20, x19, [sp, #80]
   129a0:	ldp	x22, x21, [sp, #64]
   129a4:	ldp	x24, x23, [sp, #48]
   129a8:	ldp	x26, x25, [sp, #32]
   129ac:	ldr	x27, [sp, #16]
   129b0:	ldp	x29, x30, [sp], #96
   129b4:	ret
   129b8:	cmp	w8, #0x3
   129bc:	b.cc	124e8 <lzma_mode_is_supported@@XZ_5.0+0x824>  // b.lo, b.ul, b.last
   129c0:	subs	w25, w23, #0x1
   129c4:	b.ls	124e8 <lzma_mode_is_supported@@XZ_5.0+0x824>  // b.plast
   129c8:	add	x1, x22, #0xb84
   129cc:	add	x2, x22, #0x2f4
   129d0:	mov	x0, x19
   129d4:	bl	e020 <lzma_mf_is_supported@@XZ_5.0+0x2c>
   129d8:	cmp	w0, #0x2
   129dc:	str	w0, [x22, #2952]
   129e0:	b.cc	12a44 <lzma_mode_is_supported@@XZ_5.0+0xd80>  // b.lo, b.ul, b.last
   129e4:	ldr	w8, [x22, #2948]
   129e8:	cmp	w0, w23
   129ec:	sub	w8, w8, #0x1
   129f0:	add	x8, x22, w8, uxtw #3
   129f4:	ldr	w8, [x8, #760]
   129f8:	b.cc	12a04 <lzma_mode_is_supported@@XZ_5.0+0xd40>  // b.lo, b.ul, b.last
   129fc:	cmp	w8, w26
   12a00:	b.cc	124e8 <lzma_mode_is_supported@@XZ_5.0+0x824>  // b.lo, b.ul, b.last
   12a04:	add	w10, w23, #0x1
   12a08:	cmp	w26, w8, lsr #7
   12a0c:	cset	w9, cs  // cs = hs, nlast
   12a10:	cmp	w0, w10
   12a14:	cset	w10, eq  // eq = none
   12a18:	b.hi	124e8 <lzma_mode_is_supported@@XZ_5.0+0x824>  // b.pmore
   12a1c:	and	w9, w10, w9
   12a20:	tbnz	w9, #0, 124e8 <lzma_mode_is_supported@@XZ_5.0+0x824>
   12a24:	cmp	w23, #0x3
   12a28:	b.cc	12a44 <lzma_mode_is_supported@@XZ_5.0+0xd80>  // b.lo, b.ul, b.last
   12a2c:	add	w9, w0, #0x1
   12a30:	cmp	w9, w23
   12a34:	b.cc	12a44 <lzma_mode_is_supported@@XZ_5.0+0xd80>  // b.lo, b.ul, b.last
   12a38:	lsr	w9, w26, #7
   12a3c:	cmp	w9, w8
   12a40:	b.hi	124e8 <lzma_mode_is_supported@@XZ_5.0+0x824>  // b.pmore
   12a44:	ldr	w8, [x22, #740]
   12a48:	cmp	w25, #0x2
   12a4c:	mov	w9, #0x2                   	// #2
   12a50:	sub	x27, x24, #0x1
   12a54:	csel	w25, w25, w9, hi  // hi = pmore
   12a58:	sub	x1, x27, x8
   12a5c:	mov	x0, x24
   12a60:	mov	x2, x25
   12a64:	bl	3210 <bcmp@plt>
   12a68:	cbz	w0, 124e8 <lzma_mode_is_supported@@XZ_5.0+0x824>
   12a6c:	ldr	w8, [x22, #744]
   12a70:	mov	x0, x24
   12a74:	mov	x2, x25
   12a78:	sub	x1, x27, x8
   12a7c:	bl	3210 <bcmp@plt>
   12a80:	cbz	w0, 124e8 <lzma_mode_is_supported@@XZ_5.0+0x824>
   12a84:	ldr	w8, [x22, #748]
   12a88:	mov	x0, x24
   12a8c:	mov	x2, x25
   12a90:	sub	x1, x27, x8
   12a94:	bl	3210 <bcmp@plt>
   12a98:	cbz	w0, 124e8 <lzma_mode_is_supported@@XZ_5.0+0x824>
   12a9c:	ldr	w8, [x22, #752]
   12aa0:	mov	x0, x24
   12aa4:	mov	x2, x25
   12aa8:	sub	x1, x27, x8
   12aac:	bl	3210 <bcmp@plt>
   12ab0:	cbz	w0, 124e8 <lzma_mode_is_supported@@XZ_5.0+0x824>
   12ab4:	add	w8, w26, #0x4
   12ab8:	subs	w22, w23, #0x2
   12abc:	str	w8, [x21]
   12ac0:	str	w23, [x20]
   12ac4:	b.ne	12918 <lzma_mode_is_supported@@XZ_5.0+0xc54>  // b.any
   12ac8:	b	1299c <lzma_mode_is_supported@@XZ_5.0+0xcd8>
   12acc:	sub	sp, sp, #0x1b0
   12ad0:	mov	w8, #0xedc                 	// #3804
   12ad4:	mov	w9, #0xee0                 	// #3808
   12ad8:	movk	w8, #0x1, lsl #16
   12adc:	movk	w9, #0x1, lsl #16
   12ae0:	ldr	w10, [x0, x8]
   12ae4:	ldr	w8, [x0, x9]
   12ae8:	mov	w9, #0x290                 	// #656
   12aec:	movk	w9, #0x1, lsl #16
   12af0:	stp	x26, x25, [sp, #368]
   12af4:	stp	x24, x23, [sp, #384]
   12af8:	stp	x22, x21, [sp, #400]
   12afc:	mov	x24, x3
   12b00:	mov	x25, x2
   12b04:	mov	x21, x0
   12b08:	cmp	w10, w8
   12b0c:	add	x26, x0, x9
   12b10:	stp	x29, x30, [sp, #336]
   12b14:	stp	x28, x27, [sp, #352]
   12b18:	stp	x20, x19, [sp, #416]
   12b1c:	add	x29, sp, #0x150
   12b20:	b.ne	12b54 <lzma_mode_is_supported@@XZ_5.0+0xe90>  // b.any
   12b24:	ldr	w8, [x1, #28]
   12b28:	mov	w9, #0x6d24                	// #27940
   12b2c:	mov	w23, w4
   12b30:	mov	x22, x1
   12b34:	add	x9, x21, x9
   12b38:	stur	x9, [x29, #-56]
   12b3c:	cbz	w8, 12b88 <lzma_mode_is_supported@@XZ_5.0+0xec4>
   12b40:	ldr	w19, [x22, #96]
   12b44:	ldr	w8, [x21, #2948]
   12b48:	ldr	w0, [x21, #2952]
   12b4c:	stur	w8, [x29, #-12]
   12b50:	b	13074 <lzma_mode_is_supported@@XZ_5.0+0x13b0>
   12b54:	mov	w9, #0x2c                  	// #44
   12b58:	mov	w10, #0xef8                 	// #3832
   12b5c:	movk	w10, #0x1, lsl #16
   12b60:	mov	w11, #0xefc                 	// #3836
   12b64:	madd	x9, x8, x9, x21
   12b68:	movk	w11, #0x1, lsl #16
   12b6c:	ldr	w10, [x9, x10]
   12b70:	ldr	w9, [x9, x11]
   12b74:	sub	w8, w10, w8
   12b78:	str	w9, [x25]
   12b7c:	str	w8, [x24]
   12b80:	str	w10, [x26, #3152]
   12b84:	b	13470 <lzma_mode_is_supported@@XZ_5.0+0x17ac>
   12b88:	ldr	w8, [x26, #3076]
   12b8c:	cmp	w8, #0x80
   12b90:	b.cc	12f90 <lzma_mode_is_supported@@XZ_5.0+0x12cc>  // b.lo, b.ul, b.last
   12b94:	ldr	w8, [x26, #3072]
   12b98:	cbz	w8, 12c58 <lzma_mode_is_supported@@XZ_5.0+0xf94>
   12b9c:	adrp	x10, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   12ba0:	ldr	x10, [x10, #3960]
   12ba4:	mov	w11, #0x290                 	// #656
   12ba8:	mov	x8, xzr
   12bac:	mov	w9, #0x6efc                	// #28412
   12bb0:	movk	w11, #0x1, lsl #16
   12bb4:	mov	w12, wzr
   12bb8:	add	w13, w8, #0x40
   12bbc:	and	w14, w13, #0x1
   12bc0:	lsr	w13, w13, #1
   12bc4:	lsl	w15, w13, #1
   12bc8:	add	x15, x21, x15
   12bcc:	ldrh	w15, [x15, x9]
   12bd0:	neg	w14, w14
   12bd4:	and	w14, w14, #0x7f0
   12bd8:	cmp	w13, #0x1
   12bdc:	eor	w14, w14, w15
   12be0:	lsr	x14, x14, #4
   12be4:	ldrb	w14, [x10, x14]
   12be8:	add	w12, w12, w14
   12bec:	b.ne	12bbc <lzma_mode_is_supported@@XZ_5.0+0xef8>  // b.any
   12bf0:	add	x13, x21, x8, lsl #2
   12bf4:	str	w12, [x13, x11]
   12bf8:	ldr	w12, [x26, #3072]
   12bfc:	add	x8, x8, #0x1
   12c00:	cmp	x8, x12
   12c04:	b.cc	12bb4 <lzma_mode_is_supported@@XZ_5.0+0xef0>  // b.lo, b.ul, b.last
   12c08:	cmp	w12, #0xf
   12c0c:	b.cc	12c5c <lzma_mode_is_supported@@XZ_5.0+0xf98>  // b.lo, b.ul, b.last
   12c10:	mov	w9, #0x2c8                 	// #712
   12c14:	movk	w9, #0x1, lsl #16
   12c18:	mov	x8, xzr
   12c1c:	add	x9, x21, x9
   12c20:	lsl	x10, x8, #2
   12c24:	ldr	w11, [x9, x10]
   12c28:	lsl	w12, w8, #3
   12c2c:	add	w12, w12, #0x70
   12c30:	and	w12, w12, #0xfffffff0
   12c34:	add	w11, w11, w12
   12c38:	sub	w11, w11, #0x50
   12c3c:	str	w11, [x9, x10]
   12c40:	ldr	w12, [x26, #3072]
   12c44:	add	x10, x8, #0xf
   12c48:	add	x8, x8, #0x1
   12c4c:	cmp	x10, x12
   12c50:	b.cc	12c20 <lzma_mode_is_supported@@XZ_5.0+0xf5c>  // b.lo, b.ul, b.last
   12c54:	b	12c5c <lzma_mode_is_supported@@XZ_5.0+0xf98>
   12c58:	mov	w12, wzr
   12c5c:	ldr	q0, [x26]
   12c60:	str	q0, [x26, #1024]
   12c64:	cbz	w12, 12d20 <lzma_mode_is_supported@@XZ_5.0+0x105c>
   12c68:	adrp	x10, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   12c6c:	ldr	x10, [x10, #3960]
   12c70:	mov	w11, #0x390                 	// #912
   12c74:	mov	x8, xzr
   12c78:	mov	w9, #0x6f7c                	// #28540
   12c7c:	movk	w11, #0x1, lsl #16
   12c80:	mov	w12, wzr
   12c84:	add	w13, w8, #0x40
   12c88:	and	w14, w13, #0x1
   12c8c:	lsr	w13, w13, #1
   12c90:	lsl	w15, w13, #1
   12c94:	add	x15, x21, x15
   12c98:	ldrh	w15, [x15, x9]
   12c9c:	neg	w14, w14
   12ca0:	and	w14, w14, #0x7f0
   12ca4:	cmp	w13, #0x1
   12ca8:	eor	w14, w14, w15
   12cac:	lsr	x14, x14, #4
   12cb0:	ldrb	w14, [x10, x14]
   12cb4:	add	w12, w12, w14
   12cb8:	b.ne	12c88 <lzma_mode_is_supported@@XZ_5.0+0xfc4>  // b.any
   12cbc:	add	x13, x21, x8, lsl #2
   12cc0:	str	w12, [x13, x11]
   12cc4:	ldr	w12, [x26, #3072]
   12cc8:	add	x8, x8, #0x1
   12ccc:	cmp	x8, x12
   12cd0:	b.cc	12c80 <lzma_mode_is_supported@@XZ_5.0+0xfbc>  // b.lo, b.ul, b.last
   12cd4:	cmp	w12, #0xf
   12cd8:	b.cc	12d20 <lzma_mode_is_supported@@XZ_5.0+0x105c>  // b.lo, b.ul, b.last
   12cdc:	mov	w9, #0x3c8                 	// #968
   12ce0:	movk	w9, #0x1, lsl #16
   12ce4:	mov	x8, xzr
   12ce8:	add	x9, x21, x9
   12cec:	lsl	x10, x8, #2
   12cf0:	ldr	w11, [x9, x10]
   12cf4:	lsl	w12, w8, #3
   12cf8:	add	w12, w12, #0x70
   12cfc:	and	w12, w12, #0xfffffff0
   12d00:	add	w11, w11, w12
   12d04:	sub	w11, w11, #0x50
   12d08:	str	w11, [x9, x10]
   12d0c:	ldr	w12, [x26, #3072]
   12d10:	add	x10, x8, #0xf
   12d14:	add	x8, x8, #0x1
   12d18:	cmp	x10, x12
   12d1c:	b.cc	12cec <lzma_mode_is_supported@@XZ_5.0+0x1028>  // b.lo, b.ul, b.last
   12d20:	ldr	q0, [x26, #256]
   12d24:	str	q0, [x26, #1536]
   12d28:	cbz	w12, 12de4 <lzma_mode_is_supported@@XZ_5.0+0x1120>
   12d2c:	adrp	x10, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   12d30:	ldr	x10, [x10, #3960]
   12d34:	mov	w11, #0x490                 	// #1168
   12d38:	mov	x8, xzr
   12d3c:	mov	w9, #0x6ffc                	// #28668
   12d40:	movk	w11, #0x1, lsl #16
   12d44:	mov	w12, wzr
   12d48:	add	w13, w8, #0x40
   12d4c:	and	w14, w13, #0x1
   12d50:	lsr	w13, w13, #1
   12d54:	lsl	w15, w13, #1
   12d58:	add	x15, x21, x15
   12d5c:	ldrh	w15, [x15, x9]
   12d60:	neg	w14, w14
   12d64:	and	w14, w14, #0x7f0
   12d68:	cmp	w13, #0x1
   12d6c:	eor	w14, w14, w15
   12d70:	lsr	x14, x14, #4
   12d74:	ldrb	w14, [x10, x14]
   12d78:	add	w12, w12, w14
   12d7c:	b.ne	12d4c <lzma_mode_is_supported@@XZ_5.0+0x1088>  // b.any
   12d80:	add	x13, x21, x8, lsl #2
   12d84:	str	w12, [x13, x11]
   12d88:	ldr	w12, [x26, #3072]
   12d8c:	add	x8, x8, #0x1
   12d90:	cmp	x8, x12
   12d94:	b.cc	12d44 <lzma_mode_is_supported@@XZ_5.0+0x1080>  // b.lo, b.ul, b.last
   12d98:	cmp	w12, #0xf
   12d9c:	b.cc	12de4 <lzma_mode_is_supported@@XZ_5.0+0x1120>  // b.lo, b.ul, b.last
   12da0:	mov	w9, #0x4c8                 	// #1224
   12da4:	movk	w9, #0x1, lsl #16
   12da8:	mov	x8, xzr
   12dac:	add	x9, x21, x9
   12db0:	lsl	x10, x8, #2
   12db4:	ldr	w11, [x9, x10]
   12db8:	lsl	w12, w8, #3
   12dbc:	add	w12, w12, #0x70
   12dc0:	and	w12, w12, #0xfffffff0
   12dc4:	add	w11, w11, w12
   12dc8:	sub	w11, w11, #0x50
   12dcc:	str	w11, [x9, x10]
   12dd0:	ldr	w12, [x26, #3072]
   12dd4:	add	x10, x8, #0xf
   12dd8:	add	x8, x8, #0x1
   12ddc:	cmp	x10, x12
   12de0:	b.cc	12db0 <lzma_mode_is_supported@@XZ_5.0+0x10ec>  // b.lo, b.ul, b.last
   12de4:	ldr	q0, [x26, #512]
   12de8:	str	q0, [x26, #2048]
   12dec:	cbz	w12, 12ea8 <lzma_mode_is_supported@@XZ_5.0+0x11e4>
   12df0:	adrp	x10, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   12df4:	ldr	x10, [x10, #3960]
   12df8:	mov	w11, #0x590                 	// #1424
   12dfc:	mov	x8, xzr
   12e00:	mov	w9, #0x707c                	// #28796
   12e04:	movk	w11, #0x1, lsl #16
   12e08:	mov	w12, wzr
   12e0c:	add	w13, w8, #0x40
   12e10:	and	w14, w13, #0x1
   12e14:	lsr	w13, w13, #1
   12e18:	lsl	w15, w13, #1
   12e1c:	add	x15, x21, x15
   12e20:	ldrh	w15, [x15, x9]
   12e24:	neg	w14, w14
   12e28:	and	w14, w14, #0x7f0
   12e2c:	cmp	w13, #0x1
   12e30:	eor	w14, w14, w15
   12e34:	lsr	x14, x14, #4
   12e38:	ldrb	w14, [x10, x14]
   12e3c:	add	w12, w12, w14
   12e40:	b.ne	12e10 <lzma_mode_is_supported@@XZ_5.0+0x114c>  // b.any
   12e44:	add	x13, x21, x8, lsl #2
   12e48:	str	w12, [x13, x11]
   12e4c:	ldr	w12, [x26, #3072]
   12e50:	add	x8, x8, #0x1
   12e54:	cmp	x8, x12
   12e58:	b.cc	12e08 <lzma_mode_is_supported@@XZ_5.0+0x1144>  // b.lo, b.ul, b.last
   12e5c:	cmp	w12, #0xf
   12e60:	b.cc	12ea8 <lzma_mode_is_supported@@XZ_5.0+0x11e4>  // b.lo, b.ul, b.last
   12e64:	mov	w9, #0x5c8                 	// #1480
   12e68:	movk	w9, #0x1, lsl #16
   12e6c:	mov	x8, xzr
   12e70:	add	x9, x21, x9
   12e74:	lsl	x10, x8, #2
   12e78:	ldr	w11, [x9, x10]
   12e7c:	lsl	w12, w8, #3
   12e80:	add	w12, w12, #0x70
   12e84:	and	w12, w12, #0xfffffff0
   12e88:	add	w11, w11, w12
   12e8c:	sub	w11, w11, #0x50
   12e90:	str	w11, [x9, x10]
   12e94:	ldr	w10, [x26, #3072]
   12e98:	add	x11, x8, #0xf
   12e9c:	add	x8, x8, #0x1
   12ea0:	cmp	x11, x10
   12ea4:	b.cc	12e74 <lzma_mode_is_supported@@XZ_5.0+0x11b0>  // b.lo, b.ul, b.last
   12ea8:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   12eac:	adrp	x11, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   12eb0:	ldr	q0, [x26, #768]
   12eb4:	ldr	x9, [x9, #4008]
   12eb8:	ldr	x11, [x11, #3960]
   12ebc:	mov	w12, #0x290                 	// #656
   12ec0:	mov	w13, #0x690                 	// #1680
   12ec4:	mov	w8, #0x4                   	// #4
   12ec8:	mov	w10, #0x70fa                	// #28922
   12ecc:	movk	w12, #0x1, lsl #16
   12ed0:	movk	w13, #0x1, lsl #16
   12ed4:	str	q0, [x26, #2560]
   12ed8:	ldrb	w15, [x9, x8]
   12edc:	mov	w17, #0x2                   	// #2
   12ee0:	mov	w14, wzr
   12ee4:	ubfx	x16, x15, #1, #31
   12ee8:	bfxil	w17, w15, #0, #1
   12eec:	sub	w16, w16, #0x1
   12ef0:	lsl	w17, w17, w16
   12ef4:	add	x0, x21, w17, uxtw #1
   12ef8:	sub	w18, w8, w17
   12efc:	sub	x17, x0, x15, lsl #1
   12f00:	add	x17, x17, x10
   12f04:	mov	w0, #0x1                   	// #1
   12f08:	ldrh	w1, [x17, w0, uxtw #1]
   12f0c:	and	w2, w18, #0x1
   12f10:	neg	w2, w2
   12f14:	and	w2, w2, #0x7f0
   12f18:	eor	w1, w2, w1
   12f1c:	lsr	x1, x1, #4
   12f20:	ldrb	w1, [x11, x1]
   12f24:	lsr	w2, w18, #1
   12f28:	bfi	w18, w0, #1, #31
   12f2c:	subs	w16, w16, #0x1
   12f30:	add	w14, w14, w1
   12f34:	mov	w0, w18
   12f38:	mov	w18, w2
   12f3c:	b.ne	12f08 <lzma_mode_is_supported@@XZ_5.0+0x1244>  // b.any
   12f40:	add	x15, x21, x15, lsl #2
   12f44:	add	x15, x15, x12
   12f48:	ldr	w16, [x15]
   12f4c:	add	x17, x21, x8, lsl #2
   12f50:	add	x17, x17, x13
   12f54:	add	x8, x8, #0x1
   12f58:	add	w16, w16, w14
   12f5c:	str	w16, [x17]
   12f60:	ldr	w16, [x15, #256]
   12f64:	cmp	x8, #0x80
   12f68:	add	w16, w16, w14
   12f6c:	str	w16, [x17, #512]
   12f70:	ldr	w16, [x15, #512]
   12f74:	add	w16, w16, w14
   12f78:	str	w16, [x17, #1024]
   12f7c:	ldr	w15, [x15, #768]
   12f80:	add	w14, w15, w14
   12f84:	str	w14, [x17, #1536]
   12f88:	b.ne	12ed8 <lzma_mode_is_supported@@XZ_5.0+0x1214>  // b.any
   12f8c:	str	wzr, [x26, #3076]
   12f90:	ldr	w8, [x26, #3144]
   12f94:	cmp	w8, #0x10
   12f98:	b.cc	13060 <lzma_mode_is_supported@@XZ_5.0+0x139c>  // b.lo, b.ul, b.last
   12f9c:	ldur	x9, [x29, #-56]
   12fa0:	adrp	x11, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   12fa4:	mov	w10, #0xe98                 	// #3736
   12fa8:	movk	w10, #0x1, lsl #16
   12fac:	ldrh	w9, [x9, #1214]
   12fb0:	ldr	x11, [x11, #3960]
   12fb4:	mov	w12, #0x71e0                	// #29152
   12fb8:	mov	x8, xzr
   12fbc:	add	x10, x21, x10
   12fc0:	add	x12, x21, x12
   12fc4:	mov	w13, #0x2                   	// #2
   12fc8:	ubfx	w14, w8, #1, #1
   12fcc:	bfxil	w13, w8, #0, #1
   12fd0:	neg	w16, w14
   12fd4:	bfi	w14, w13, #1, #2
   12fd8:	ldrh	w13, [x12, w13, uxtw #1]
   12fdc:	ubfx	w15, w8, #2, #1
   12fe0:	neg	w17, w15
   12fe4:	bfi	w15, w14, #1, #3
   12fe8:	ldrh	w14, [x12, w14, uxtw #1]
   12fec:	and	w16, w16, #0x7f0
   12ff0:	eor	w13, w16, w13
   12ff4:	and	w16, w8, #0x1
   12ff8:	and	w17, w17, #0x7f0
   12ffc:	neg	w16, w16
   13000:	ldrh	w15, [x12, w15, uxtw #1]
   13004:	eor	w14, w17, w14
   13008:	ubfx	w17, w8, #3, #1
   1300c:	and	w16, w16, #0x7f0
   13010:	neg	w17, w17
   13014:	eor	w16, w16, w9
   13018:	and	x17, x17, #0x7f0
   1301c:	lsr	x16, x16, #4
   13020:	lsr	x13, x13, #4
   13024:	ldrb	w16, [x11, x16]
   13028:	ldrb	w13, [x11, x13]
   1302c:	lsr	x14, x14, #4
   13030:	eor	x15, x17, x15
   13034:	ldrb	w14, [x11, x14]
   13038:	lsr	x15, x15, #4
   1303c:	ldrb	w15, [x11, x15]
   13040:	add	w13, w13, w16
   13044:	add	w13, w13, w14
   13048:	add	w13, w13, w15
   1304c:	str	w13, [x10, x8, lsl #2]
   13050:	add	x8, x8, #0x1
   13054:	cmp	x8, #0x10
   13058:	b.ne	12fc4 <lzma_mode_is_supported@@XZ_5.0+0x1300>  // b.any
   1305c:	str	wzr, [x26, #3144]
   13060:	ldr	w19, [x22, #96]
   13064:	add	x2, x21, #0x2f4
   13068:	sub	x1, x29, #0xc
   1306c:	mov	x0, x22
   13070:	bl	e020 <lzma_mf_is_supported@@XZ_5.0+0x2c>
   13074:	ldr	w3, [x22, #24]
   13078:	ldr	w8, [x22, #36]
   1307c:	sub	w8, w8, w3
   13080:	add	w9, w8, #0x1
   13084:	cmp	w9, #0x110
   13088:	b.hi	13098 <lzma_mode_is_supported@@XZ_5.0+0x13d4>  // b.pmore
   1308c:	cmp	w9, #0x1
   13090:	b.hi	1309c <lzma_mode_is_supported@@XZ_5.0+0x13d8>  // b.pmore
   13094:	b	1341c <lzma_mode_is_supported@@XZ_5.0+0x1758>
   13098:	mov	w9, #0x111                 	// #273
   1309c:	ldr	x4, [x22]
   130a0:	cmp	w9, #0x2
   130a4:	add	x17, x4, x3
   130a8:	mov	x16, x17
   130ac:	ldrb	w18, [x16, #-1]!
   130b0:	ldr	w12, [x21, #740]
   130b4:	sub	x14, x17, #0x2
   130b8:	sub	x8, x14, x12
   130bc:	ldrb	w10, [x8]
   130c0:	b.ls	1311c <lzma_mode_is_supported@@XZ_5.0+0x1458>  // b.plast
   130c4:	cmp	w18, w10
   130c8:	b.ne	13140 <lzma_mode_is_supported@@XZ_5.0+0x147c>  // b.any
   130cc:	ldrb	w10, [x17]
   130d0:	ldrb	w8, [x8, #1]
   130d4:	cmp	w10, w8
   130d8:	b.ne	13140 <lzma_mode_is_supported@@XZ_5.0+0x147c>  // b.any
   130dc:	mov	w10, w9
   130e0:	sub	x11, x3, x12
   130e4:	add	x13, x3, x4
   130e8:	mov	x8, xzr
   130ec:	sub	x10, x10, #0x2
   130f0:	add	x11, x4, x11
   130f4:	add	x13, x13, #0x1
   130f8:	ldrb	w15, [x13, x8]
   130fc:	ldrb	w1, [x11, x8]
   13100:	cmp	w15, w1
   13104:	b.ne	1325c <lzma_mode_is_supported@@XZ_5.0+0x1598>  // b.any
   13108:	add	x8, x8, #0x1
   1310c:	cmp	w10, w8
   13110:	b.ne	130f8 <lzma_mode_is_supported@@XZ_5.0+0x1434>  // b.any
   13114:	mov	w8, w9
   13118:	b	13260 <lzma_mode_is_supported@@XZ_5.0+0x159c>
   1311c:	cmp	w18, w10
   13120:	b.ne	1314c <lzma_mode_is_supported@@XZ_5.0+0x1488>  // b.any
   13124:	ldrb	w9, [x17]
   13128:	ldrb	w8, [x8, #1]
   1312c:	cmp	w9, w8
   13130:	b.ne	1314c <lzma_mode_is_supported@@XZ_5.0+0x1488>  // b.any
   13134:	mov	w8, #0x2                   	// #2
   13138:	stur	w8, [x29, #-32]
   1313c:	b	13154 <lzma_mode_is_supported@@XZ_5.0+0x1490>
   13140:	mov	w8, wzr
   13144:	stur	wzr, [x29, #-32]
   13148:	b	13264 <lzma_mode_is_supported@@XZ_5.0+0x15a0>
   1314c:	mov	w8, wzr
   13150:	stur	wzr, [x29, #-32]
   13154:	ldr	w13, [x21, #744]
   13158:	sub	x9, x14, x13
   1315c:	ldrb	w10, [x9]
   13160:	cmp	w18, w10
   13164:	b.ne	1318c <lzma_mode_is_supported@@XZ_5.0+0x14c8>  // b.any
   13168:	ldrb	w10, [x17]
   1316c:	ldrb	w9, [x9, #1]
   13170:	cmp	w10, w9
   13174:	b.ne	1318c <lzma_mode_is_supported@@XZ_5.0+0x14c8>  // b.any
   13178:	lsr	w9, w8, #1
   1317c:	mov	w10, #0x2                   	// #2
   13180:	eor	w2, w9, #0x1
   13184:	stur	w10, [x29, #-28]
   13188:	b	13198 <lzma_mode_is_supported@@XZ_5.0+0x14d4>
   1318c:	mov	w10, wzr
   13190:	mov	w2, wzr
   13194:	stur	wzr, [x29, #-28]
   13198:	ldr	w15, [x21, #748]
   1319c:	sub	x9, x14, x15
   131a0:	ldrb	w11, [x9]
   131a4:	cmp	w18, w11
   131a8:	b.ne	131d8 <lzma_mode_is_supported@@XZ_5.0+0x1514>  // b.any
   131ac:	ldrb	w11, [x17]
   131b0:	ldrb	w9, [x9, #1]
   131b4:	cmp	w11, w9
   131b8:	b.ne	131d8 <lzma_mode_is_supported@@XZ_5.0+0x1514>  // b.any
   131bc:	mov	w11, #0x2                   	// #2
   131c0:	stur	w11, [x29, #-24]
   131c4:	sub	x9, x29, #0x20
   131c8:	ldr	w9, [x9, w2, uxtw #2]
   131cc:	cmp	w9, #0x2
   131d0:	csel	w2, w11, w2, cc  // cc = lo, ul, last
   131d4:	b	131e0 <lzma_mode_is_supported@@XZ_5.0+0x151c>
   131d8:	mov	w11, wzr
   131dc:	stur	wzr, [x29, #-24]
   131e0:	ldr	w1, [x21, #752]
   131e4:	sub	x9, x14, x1
   131e8:	ldrb	w3, [x9]
   131ec:	cmp	w18, w3
   131f0:	b.ne	133d4 <lzma_mode_is_supported@@XZ_5.0+0x1710>  // b.any
   131f4:	ldrb	w17, [x17]
   131f8:	ldrb	w9, [x9, #1]
   131fc:	cmp	w17, w9
   13200:	b.ne	133d4 <lzma_mode_is_supported@@XZ_5.0+0x1710>  // b.any
   13204:	mov	w9, #0x2                   	// #2
   13208:	sub	x17, x29, #0x20
   1320c:	stur	w9, [x29, #-20]
   13210:	ldr	w17, [x17, w2, uxtw #2]
   13214:	cmp	w17, #0x2
   13218:	mov	w17, #0x3                   	// #3
   1321c:	csel	w2, w17, w2, cc  // cc = lo, ul, last
   13220:	sub	x17, x29, #0x20
   13224:	ldr	w4, [x17, w2, uxtw #2]
   13228:	cmp	w4, w19
   1322c:	b.cc	133ec <lzma_mode_is_supported@@XZ_5.0+0x1728>  // b.lo, b.ul, b.last
   13230:	subs	w20, w4, #0x1
   13234:	str	w2, [x25]
   13238:	str	w4, [x24]
   1323c:	b.eq	13470 <lzma_mode_is_supported@@XZ_5.0+0x17ac>  // b.none
   13240:	ldr	x8, [x22, #56]
   13244:	mov	x0, x22
   13248:	mov	w1, w20
   1324c:	blr	x8
   13250:	ldr	w8, [x22, #28]
   13254:	add	w8, w8, w20
   13258:	b	1346c <lzma_mode_is_supported@@XZ_5.0+0x17a8>
   1325c:	add	w8, w8, #0x2
   13260:	stur	w8, [x29, #-32]
   13264:	ldr	w13, [x21, #744]
   13268:	sub	x10, x14, x13
   1326c:	ldrb	w11, [x10]
   13270:	cmp	w18, w11
   13274:	b.ne	132c8 <lzma_mode_is_supported@@XZ_5.0+0x1604>  // b.any
   13278:	ldrb	w11, [x17]
   1327c:	ldrb	w10, [x10, #1]
   13280:	cmp	w11, w10
   13284:	b.ne	132c8 <lzma_mode_is_supported@@XZ_5.0+0x1604>  // b.any
   13288:	mov	w11, w9
   1328c:	sub	x15, x3, x13
   13290:	add	x1, x3, x4
   13294:	mov	x10, xzr
   13298:	sub	x11, x11, #0x2
   1329c:	add	x15, x4, x15
   132a0:	add	x1, x1, #0x1
   132a4:	ldrb	w2, [x1, x10]
   132a8:	ldrb	w5, [x15, x10]
   132ac:	cmp	w2, w5
   132b0:	b.ne	132d8 <lzma_mode_is_supported@@XZ_5.0+0x1614>  // b.any
   132b4:	add	x10, x10, #0x1
   132b8:	cmp	w11, w10
   132bc:	b.ne	132a4 <lzma_mode_is_supported@@XZ_5.0+0x15e0>  // b.any
   132c0:	mov	w10, w9
   132c4:	b	132dc <lzma_mode_is_supported@@XZ_5.0+0x1618>
   132c8:	mov	w10, wzr
   132cc:	mov	w2, wzr
   132d0:	stur	wzr, [x29, #-28]
   132d4:	b	132e8 <lzma_mode_is_supported@@XZ_5.0+0x1624>
   132d8:	add	w10, w10, #0x2
   132dc:	cmp	w10, w8
   132e0:	cset	w2, hi  // hi = pmore
   132e4:	stur	w10, [x29, #-28]
   132e8:	ldr	w15, [x21, #748]
   132ec:	sub	x11, x14, x15
   132f0:	ldrb	w1, [x11]
   132f4:	cmp	w18, w1
   132f8:	b.ne	1334c <lzma_mode_is_supported@@XZ_5.0+0x1688>  // b.any
   132fc:	ldrb	w1, [x17]
   13300:	ldrb	w11, [x11, #1]
   13304:	cmp	w1, w11
   13308:	b.ne	1334c <lzma_mode_is_supported@@XZ_5.0+0x1688>  // b.any
   1330c:	mov	w1, w9
   13310:	sub	x5, x3, x15
   13314:	add	x6, x3, x4
   13318:	mov	x11, xzr
   1331c:	sub	x1, x1, #0x2
   13320:	add	x5, x4, x5
   13324:	add	x6, x6, #0x1
   13328:	ldrb	w7, [x6, x11]
   1332c:	ldrb	w20, [x5, x11]
   13330:	cmp	w7, w20
   13334:	b.ne	13358 <lzma_mode_is_supported@@XZ_5.0+0x1694>  // b.any
   13338:	add	x11, x11, #0x1
   1333c:	cmp	w1, w11
   13340:	b.ne	13328 <lzma_mode_is_supported@@XZ_5.0+0x1664>  // b.any
   13344:	mov	w11, w9
   13348:	b	1335c <lzma_mode_is_supported@@XZ_5.0+0x1698>
   1334c:	mov	w11, wzr
   13350:	stur	wzr, [x29, #-24]
   13354:	b	13374 <lzma_mode_is_supported@@XZ_5.0+0x16b0>
   13358:	add	w11, w11, #0x2
   1335c:	stur	w11, [x29, #-24]
   13360:	sub	x1, x29, #0x20
   13364:	ldr	w1, [x1, w2, uxtw #2]
   13368:	cmp	w11, w1
   1336c:	mov	w1, #0x2                   	// #2
   13370:	csel	w2, w1, w2, hi  // hi = pmore
   13374:	ldr	w1, [x21, #752]
   13378:	sub	x5, x14, x1
   1337c:	ldrb	w6, [x5]
   13380:	cmp	w18, w6
   13384:	b.ne	133d4 <lzma_mode_is_supported@@XZ_5.0+0x1710>  // b.any
   13388:	ldrb	w17, [x17]
   1338c:	ldrb	w18, [x5, #1]
   13390:	cmp	w17, w18
   13394:	b.ne	133d4 <lzma_mode_is_supported@@XZ_5.0+0x1710>  // b.any
   13398:	mov	w18, w9
   1339c:	sub	x5, x3, x1
   133a0:	add	x6, x3, x4
   133a4:	mov	x17, xzr
   133a8:	sub	x18, x18, #0x2
   133ac:	add	x3, x4, x5
   133b0:	add	x4, x6, #0x1
   133b4:	ldrb	w5, [x4, x17]
   133b8:	ldrb	w6, [x3, x17]
   133bc:	cmp	w5, w6
   133c0:	b.ne	13560 <lzma_mode_is_supported@@XZ_5.0+0x189c>  // b.any
   133c4:	add	x17, x17, #0x1
   133c8:	cmp	w18, w17
   133cc:	b.ne	133b4 <lzma_mode_is_supported@@XZ_5.0+0x16f0>  // b.any
   133d0:	b	13564 <lzma_mode_is_supported@@XZ_5.0+0x18a0>
   133d4:	mov	w9, wzr
   133d8:	stur	wzr, [x29, #-20]
   133dc:	sub	x17, x29, #0x20
   133e0:	ldr	w4, [x17, w2, uxtw #2]
   133e4:	cmp	w4, w19
   133e8:	b.cs	13230 <lzma_mode_is_supported@@XZ_5.0+0x156c>  // b.hs, b.nlast
   133ec:	cmp	w0, w19
   133f0:	b.cs	13430 <lzma_mode_is_supported@@XZ_5.0+0x176c>  // b.hs, b.nlast
   133f4:	neg	x17, x12
   133f8:	ldrb	w18, [x16]
   133fc:	add	x16, x16, x17
   13400:	ldurb	w2, [x16, #-1]
   13404:	cmp	w4, #0x1
   13408:	b.hi	13490 <lzma_mode_is_supported@@XZ_5.0+0x17cc>  // b.pmore
   1340c:	cmp	w0, #0x1
   13410:	b.hi	13490 <lzma_mode_is_supported@@XZ_5.0+0x17cc>  // b.pmore
   13414:	cmp	w18, w2
   13418:	b.eq	13490 <lzma_mode_is_supported@@XZ_5.0+0x17cc>  // b.none
   1341c:	mov	w8, #0xffffffff            	// #-1
   13420:	mov	w9, #0x1                   	// #1
   13424:	str	w8, [x25]
   13428:	str	w9, [x24]
   1342c:	b	13470 <lzma_mode_is_supported@@XZ_5.0+0x17ac>
   13430:	ldur	w8, [x29, #-12]
   13434:	str	w0, [x24]
   13438:	sub	w8, w8, #0x1
   1343c:	add	x8, x21, w8, uxtw #3
   13440:	ldr	w8, [x8, #760]
   13444:	subs	w21, w0, #0x1
   13448:	add	w8, w8, #0x4
   1344c:	str	w8, [x25]
   13450:	b.eq	13470 <lzma_mode_is_supported@@XZ_5.0+0x17ac>  // b.none
   13454:	ldr	x8, [x22, #56]
   13458:	mov	x0, x22
   1345c:	mov	w1, w21
   13460:	blr	x8
   13464:	ldr	w8, [x22, #28]
   13468:	add	w8, w8, w21
   1346c:	str	w8, [x22, #28]
   13470:	ldp	x20, x19, [sp, #416]
   13474:	ldp	x22, x21, [sp, #400]
   13478:	ldp	x24, x23, [sp, #384]
   1347c:	ldp	x26, x25, [sp, #368]
   13480:	ldp	x28, x27, [sp, #352]
   13484:	ldp	x29, x30, [sp, #336]
   13488:	add	sp, sp, #0x1b0
   1348c:	ret
   13490:	ldr	w3, [x21, #736]
   13494:	str	x22, [sp, #64]
   13498:	adrp	x22, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   1349c:	ldr	x22, [x22, #3960]
   134a0:	str	w3, [x26, #3156]
   134a4:	ldr	w6, [x21, #2960]
   134a8:	add	x5, x21, x3, lsl #5
   134ac:	ldrb	w7, [x14]
   134b0:	mov	w16, #0x6b9c                	// #27548
   134b4:	and	w14, w6, w23
   134b8:	add	x5, x5, w14, uxtw #1
   134bc:	ldrh	w16, [x5, x16]
   134c0:	ldr	w20, [x21, #2964]
   134c4:	ldr	w19, [x21, #2968]
   134c8:	mov	w17, #0x8                   	// #8
   134cc:	lsr	x16, x16, #4
   134d0:	sub	w6, w17, w20
   134d4:	ldrb	w17, [x22, x16]
   134d8:	and	w5, w19, w23
   134dc:	lsl	w5, w5, w20
   134e0:	lsr	w6, w7, w6
   134e4:	add	w19, w6, w5
   134e8:	cmp	w3, #0x6
   134ec:	orr	w6, w18, #0x100
   134f0:	mov	w5, wzr
   134f4:	str	w23, [sp, #76]
   134f8:	b.ls	13590 <lzma_mode_is_supported@@XZ_5.0+0x18cc>  // b.plast
   134fc:	adrp	x27, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   13500:	ldr	x27, [x27, #3960]
   13504:	mov	w20, #0x600                 	// #1536
   13508:	mov	w7, #0x100                 	// #256
   1350c:	madd	x19, x19, x20, x21
   13510:	mov	w20, w2
   13514:	lsl	w20, w20, #1
   13518:	add	w22, w7, w6, lsr #8
   1351c:	and	w23, w20, w7
   13520:	add	w22, w22, w23
   13524:	add	x22, x19, w22, uxtw #1
   13528:	ldrh	w22, [x22, #2972]
   1352c:	ubfx	w23, w6, #7, #1
   13530:	neg	w23, w23
   13534:	and	w23, w23, #0x7f0
   13538:	eor	w22, w23, w22
   1353c:	lsr	x22, x22, #4
   13540:	ldrb	w22, [x27, x22]
   13544:	cmp	w6, #0x8, lsl #12
   13548:	lsl	w6, w6, #1
   1354c:	eor	w23, w6, w20
   13550:	add	w5, w5, w22
   13554:	bic	w7, w7, w23
   13558:	b.cc	13514 <lzma_mode_is_supported@@XZ_5.0+0x1850>  // b.lo, b.ul, b.last
   1355c:	b	135d4 <lzma_mode_is_supported@@XZ_5.0+0x1910>
   13560:	add	w9, w17, #0x2
   13564:	stur	w9, [x29, #-20]
   13568:	sub	x17, x29, #0x20
   1356c:	ldr	w17, [x17, w2, uxtw #2]
   13570:	cmp	w9, w17
   13574:	mov	w17, #0x3                   	// #3
   13578:	csel	w2, w17, w2, hi  // hi = pmore
   1357c:	sub	x17, x29, #0x20
   13580:	ldr	w4, [x17, w2, uxtw #2]
   13584:	cmp	w4, w19
   13588:	b.cc	133ec <lzma_mode_is_supported@@XZ_5.0+0x1728>  // b.lo, b.ul, b.last
   1358c:	b	13230 <lzma_mode_is_supported@@XZ_5.0+0x156c>
   13590:	adrp	x27, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   13594:	ldr	x27, [x27, #3960]
   13598:	mov	w7, #0x600                 	// #1536
   1359c:	madd	x7, x19, x7, x21
   135a0:	and	w19, w6, #0x1
   135a4:	lsr	w6, w6, #1
   135a8:	lsl	w20, w6, #1
   135ac:	add	x20, x7, x20
   135b0:	ldrh	w20, [x20, #2972]
   135b4:	neg	w19, w19
   135b8:	and	w19, w19, #0x7f0
   135bc:	cmp	w6, #0x1
   135c0:	eor	w19, w19, w20
   135c4:	lsr	x19, x19, #4
   135c8:	ldrb	w19, [x27, x19]
   135cc:	add	w5, w5, w19
   135d0:	b.ne	135a0 <lzma_mode_is_supported@@XZ_5.0+0x18dc>  // b.any
   135d4:	add	w6, w5, w17
   135d8:	mov	w5, #0xffffffff            	// #-1
   135dc:	strb	wzr, [x26, #3204]
   135e0:	add	x7, x21, x3, lsl #1
   135e4:	str	w6, [x26, #3216]
   135e8:	str	w5, [x26, #3224]
   135ec:	mov	w17, #0x6d1c                	// #27932
   135f0:	ldrh	w17, [x7, x17]
   135f4:	eor	x16, x16, #0x7f
   135f8:	ldrb	w16, [x27, x16]
   135fc:	cmp	w18, w2
   13600:	lsr	x17, x17, #4
   13604:	eor	x19, x17, #0x7f
   13608:	ldrb	w19, [x27, x19]
   1360c:	add	w18, w19, w16
   13610:	b.ne	1366c <lzma_mode_is_supported@@XZ_5.0+0x19a8>  // b.any
   13614:	mov	w2, #0x6d34                	// #27956
   13618:	add	x5, x21, x3, lsl #5
   1361c:	mov	w19, #0x6d7c                	// #28028
   13620:	ldrh	w2, [x7, x2]
   13624:	add	x5, x5, x14, lsl #1
   13628:	adrp	x7, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   1362c:	ldrh	w5, [x5, x19]
   13630:	ldr	x7, [x7, #3960]
   13634:	lsr	x2, x2, #4
   13638:	lsr	x5, x5, #4
   1363c:	ldrb	w2, [x7, x2]
   13640:	ldrb	w5, [x7, x5]
   13644:	add	w2, w18, w2
   13648:	add	w2, w2, w5
   1364c:	cmp	w2, w6
   13650:	b.cs	13668 <lzma_mode_is_supported@@XZ_5.0+0x19a4>  // b.hs, b.nlast
   13654:	mov	w5, wzr
   13658:	str	w2, [x26, #3216]
   1365c:	str	wzr, [x26, #3224]
   13660:	strb	wzr, [x26, #3204]
   13664:	b	1366c <lzma_mode_is_supported@@XZ_5.0+0x19a8>
   13668:	mov	w5, #0xffffffff            	// #-1
   1366c:	cmp	w0, w4
   13670:	csel	w4, w0, w4, hi  // hi = pmore
   13674:	cmp	w4, #0x1
   13678:	b.hi	1368c <lzma_mode_is_supported@@XZ_5.0+0x19c8>  // b.pmore
   1367c:	mov	w8, #0x1                   	// #1
   13680:	str	w5, [x25]
   13684:	str	w8, [x24]
   13688:	b	13470 <lzma_mode_is_supported@@XZ_5.0+0x17ac>
   1368c:	mov	w2, #0xef4                 	// #3828
   13690:	movk	w2, #0x1, lsl #16
   13694:	str	w12, [x26, #3184]
   13698:	str	w13, [x26, #3188]
   1369c:	subs	w13, w4, #0x2
   136a0:	mov	w12, w4
   136a4:	str	wzr, [x26, #3220]
   136a8:	str	w15, [x26, #3192]
   136ac:	str	w1, [x26, #3196]
   136b0:	stur	x4, [x29, #-88]
   136b4:	b.eq	136f4 <lzma_mode_is_supported@@XZ_5.0+0x1a30>  // b.none
   136b8:	add	x13, x13, #0x1
   136bc:	mov	w1, #0x2c                  	// #44
   136c0:	and	x15, x13, #0x1fffffffe
   136c4:	madd	x1, x12, x1, x2
   136c8:	sub	x12, x12, x15
   136cc:	add	x1, x21, x1
   136d0:	mov	w4, #0x40000000            	// #1073741824
   136d4:	mov	x5, x15
   136d8:	str	w4, [x1]
   136dc:	stur	w4, [x1, #-44]
   136e0:	subs	x5, x5, #0x2
   136e4:	sub	x1, x1, #0x58
   136e8:	b.ne	136d8 <lzma_mode_is_supported@@XZ_5.0+0x1a14>  // b.any
   136ec:	cmp	x13, x15
   136f0:	b.eq	13714 <lzma_mode_is_supported@@XZ_5.0+0x1a50>  // b.none
   136f4:	mov	w13, #0x2c                  	// #44
   136f8:	madd	x13, x12, x13, x2
   136fc:	add	x13, x21, x13
   13700:	mov	w15, #0x40000000            	// #1073741824
   13704:	sub	w12, w12, #0x1
   13708:	cmp	w12, #0x1
   1370c:	str	w15, [x13], #-44
   13710:	b.hi	13704 <lzma_mode_is_supported@@XZ_5.0+0x1a40>  // b.pmore
   13714:	add	x15, x21, x3, lsl #1
   13718:	mov	w12, #0x6d34                	// #27956
   1371c:	mov	w13, #0x6d4c                	// #27980
   13720:	subs	w4, w8, #0x2
   13724:	add	x12, x15, x12
   13728:	add	x13, x15, x13
   1372c:	mov	w1, #0x6d64                	// #28004
   13730:	b.cs	14d04 <lzma_mode_is_supported@@XZ_5.0+0x3040>  // b.hs, b.nlast
   13734:	subs	w3, w10, #0x2
   13738:	add	x15, x15, x1
   1373c:	b.cs	14da0 <lzma_mode_is_supported@@XZ_5.0+0x30dc>  // b.hs, b.nlast
   13740:	subs	w10, w11, #0x2
   13744:	b.cs	14e34 <lzma_mode_is_supported@@XZ_5.0+0x3170>  // b.hs, b.nlast
   13748:	adrp	x3, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   1374c:	ldr	x3, [x3, #3960]
   13750:	subs	w10, w9, #0x2
   13754:	b.cs	14edc <lzma_mode_is_supported@@XZ_5.0+0x3218>  // b.hs, b.nlast
   13758:	cmp	w8, #0x2
   1375c:	mov	w9, #0x2                   	// #2
   13760:	csinc	w15, w9, w8, cc  // cc = lo, ul, last
   13764:	cmp	w15, w0
   13768:	stp	x26, x25, [sp]
   1376c:	str	x24, [sp, #16]
   13770:	b.hi	138ec <lzma_mode_is_supported@@XZ_5.0+0x1c28>  // b.pmore
   13774:	adrp	x8, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   13778:	ldr	x8, [x8, #3960]
   1377c:	ldrb	w9, [x8, x17]
   13780:	mov	w8, #0xffffffff            	// #-1
   13784:	add	w8, w8, #0x1
   13788:	add	x10, x21, w8, uxtw #3
   1378c:	ldr	w10, [x10, #756]
   13790:	cmp	w15, w10
   13794:	b.hi	13784 <lzma_mode_is_supported@@XZ_5.0+0x1ac0>  // b.pmore
   13798:	mov	w19, #0x440                 	// #1088
   1379c:	madd	x14, x14, x19, x21
   137a0:	adrp	x19, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   137a4:	ldur	w10, [x29, #-12]
   137a8:	ldr	x19, [x19, #4008]
   137ac:	mov	w12, #0x690                 	// #1680
   137b0:	mov	w17, #0xef4                 	// #3828
   137b4:	mov	w18, #0xef8                 	// #3832
   137b8:	mov	w0, #0xefc                 	// #3836
   137bc:	mov	w1, #0xee8                 	// #3816
   137c0:	mov	w20, #0x290                 	// #656
   137c4:	mov	w22, #0xe98                 	// #3736
   137c8:	add	w9, w9, w16
   137cc:	mov	w11, #0x3                   	// #3
   137d0:	movk	w12, #0x1, lsl #16
   137d4:	mov	w13, #0x7604                	// #30212
   137d8:	mov	w16, #0x2c                  	// #44
   137dc:	movk	w17, #0x1, lsl #16
   137e0:	movk	w18, #0x1, lsl #16
   137e4:	movk	w0, #0x1, lsl #16
   137e8:	movk	w1, #0x1, lsl #16
   137ec:	mov	w2, #0x1e                  	// #30
   137f0:	mov	w3, #0x12                  	// #18
   137f4:	mov	w4, #0x3c                  	// #60
   137f8:	mov	w5, #0x24                  	// #36
   137fc:	mov	w6, #0x6                   	// #6
   13800:	mov	w7, #0xc                   	// #12
   13804:	movk	w20, #0x1, lsl #16
   13808:	movk	w22, #0x1, lsl #16
   1380c:	b	13814 <lzma_mode_is_supported@@XZ_5.0+0x1b50>
   13810:	add	w15, w15, #0x1
   13814:	add	x23, x21, w8, uxtw #3
   13818:	ldr	w25, [x23, #760]
   1381c:	sub	w23, w15, #0x2
   13820:	cmp	w15, #0x6
   13824:	csel	w24, w23, w11, cc  // cc = lo, ul, last
   13828:	cmp	w25, #0x7f
   1382c:	mov	w26, w8
   13830:	b.hi	13848 <lzma_mode_is_supported@@XZ_5.0+0x1b84>  // b.pmore
   13834:	mov	w24, w24
   13838:	add	x24, x21, x24, lsl #9
   1383c:	add	x24, x24, x25, lsl #2
   13840:	ldr	w24, [x24, x12]
   13844:	b	1388c <lzma_mode_is_supported@@XZ_5.0+0x1bc8>
   13848:	cmp	w25, #0x0
   1384c:	csel	w27, w3, w2, ge  // ge = tcont
   13850:	csel	x28, x5, x4, ge  // ge = tcont
   13854:	cmp	w25, #0x80, lsl #12
   13858:	csel	w27, w6, w27, cc  // cc = lo, ul, last
   1385c:	lsr	x27, x25, x27
   13860:	ldrb	w27, [x19, x27]
   13864:	mov	w24, w24
   13868:	csel	x28, x7, x28, cc  // cc = lo, ul, last
   1386c:	add	x24, x21, x24, lsl #8
   13870:	add	x27, x28, x27
   13874:	and	x28, x25, #0xf
   13878:	add	x28, x21, x28, lsl #2
   1387c:	add	x24, x24, x27, lsl #2
   13880:	ldr	w24, [x24, x20]
   13884:	ldr	w27, [x28, x22]
   13888:	add	w24, w27, w24
   1388c:	add	x27, x14, w23, uxtw #2
   13890:	umaddl	x28, w15, w16, x21
   13894:	ldr	w30, [x27, x13]
   13898:	add	x27, x28, x17
   1389c:	ldr	w28, [x27]
   138a0:	add	w24, w9, w24
   138a4:	add	w24, w24, w30
   138a8:	cmp	w24, w28
   138ac:	b.cs	138cc <lzma_mode_is_supported@@XZ_5.0+0x1c08>  // b.hs, b.nlast
   138b0:	mov	w15, w15
   138b4:	str	w24, [x27]
   138b8:	add	w24, w25, #0x4
   138bc:	madd	x15, x15, x16, x21
   138c0:	str	wzr, [x15, x18]
   138c4:	str	w24, [x15, x0]
   138c8:	strb	wzr, [x15, x1]
   138cc:	add	x15, x21, x26, lsl #3
   138d0:	ldr	w24, [x15, #756]
   138d4:	add	w15, w23, #0x2
   138d8:	cmp	w15, w24
   138dc:	b.ne	13810 <lzma_mode_is_supported@@XZ_5.0+0x1b4c>  // b.any
   138e0:	add	w8, w8, #0x1
   138e4:	cmp	w8, w10
   138e8:	b.ne	13810 <lzma_mode_is_supported@@XZ_5.0+0x1b4c>  // b.any
   138ec:	ldur	x11, [x29, #-88]
   138f0:	cmn	w11, #0x1
   138f4:	b.eq	13470 <lzma_mode_is_supported@@XZ_5.0+0x17ac>  // b.none
   138f8:	add	x8, x21, #0x2e4
   138fc:	ldr	q0, [x8]
   13900:	cmp	w11, #0x2
   13904:	mov	w23, #0x1                   	// #1
   13908:	stur	q0, [x29, #-32]
   1390c:	b.cc	14f80 <lzma_mode_is_supported@@XZ_5.0+0x32bc>  // b.lo, b.ul, b.last
   13910:	add	x8, x21, #0xb84
   13914:	str	x8, [sp, #56]
   13918:	add	x8, x21, #0x2f4
   1391c:	ldr	w10, [sp, #76]
   13920:	str	x8, [sp, #48]
   13924:	mov	w8, #0xf4c                 	// #3916
   13928:	movk	w8, #0x1, lsl #16
   1392c:	mov	w9, #0xf20                 	// #3872
   13930:	movk	w9, #0x1, lsl #16
   13934:	add	x8, x21, x8
   13938:	mov	w12, #0xbe4c                	// #48716
   1393c:	add	w10, w10, #0x1
   13940:	mov	w22, #0xef4                 	// #3828
   13944:	str	x8, [sp, #144]
   13948:	add	x8, x21, x9
   1394c:	stur	w10, [x29, #-136]
   13950:	mov	w10, #0xffe                 	// #4094
   13954:	mov	w28, #0x2c                  	// #44
   13958:	movk	w22, #0x1, lsl #16
   1395c:	mov	w25, #0x440                 	// #1088
   13960:	mov	w27, #0x40000000            	// #1073741824
   13964:	stur	x8, [x29, #-160]
   13968:	mov	w20, #0x1e                  	// #30
   1396c:	mov	w26, #0x7604                	// #30212
   13970:	add	x8, x21, x12
   13974:	mov	w23, #0x1                   	// #1
   13978:	stur	wzr, [x29, #-60]
   1397c:	str	w10, [sp, #156]
   13980:	str	x8, [sp, #24]
   13984:	b	139c0 <lzma_mode_is_supported@@XZ_5.0+0x1cfc>
   13988:	stur	x3, [x29, #-88]
   1398c:	ldr	w8, [sp, #156]
   13990:	ldur	x11, [x29, #-88]
   13994:	ldr	x23, [sp, #120]
   13998:	sub	w8, w8, #0x1
   1399c:	str	w8, [sp, #156]
   139a0:	ldur	w8, [x29, #-136]
   139a4:	cmp	x23, w11, uxtw
   139a8:	add	w8, w8, #0x1
   139ac:	stur	w8, [x29, #-136]
   139b0:	ldur	w8, [x29, #-60]
   139b4:	add	w8, w8, #0x1
   139b8:	stur	w8, [x29, #-60]
   139bc:	b.cs	14f80 <lzma_mode_is_supported@@XZ_5.0+0x32bc>  // b.hs, b.nlast
   139c0:	ldp	x1, x19, [sp, #56]
   139c4:	ldr	x2, [sp, #48]
   139c8:	stur	x11, [x29, #-88]
   139cc:	mov	x0, x19
   139d0:	bl	e020 <lzma_mf_is_supported@@XZ_5.0+0x2c>
   139d4:	ldr	w24, [x19, #96]
   139d8:	str	w0, [x21, #2952]
   139dc:	cmp	w0, w24
   139e0:	b.cs	14f80 <lzma_mode_is_supported@@XZ_5.0+0x32bc>  // b.hs, b.nlast
   139e4:	ldr	x12, [x19]
   139e8:	ldr	w13, [x19, #24]
   139ec:	ldr	w10, [x19, #36]
   139f0:	mov	w30, #0xef8                 	// #3832
   139f4:	mov	w11, #0xee8                 	// #3816
   139f8:	madd	x9, x23, x28, x21
   139fc:	movk	w30, #0x1, lsl #16
   13a00:	movk	w11, #0x1, lsl #16
   13a04:	ldr	w8, [x9, x30]
   13a08:	ldrb	w9, [x9, x11]
   13a0c:	add	x11, x12, x13
   13a10:	sub	x11, x11, #0x1
   13a14:	ldr	w6, [x21, #2948]
   13a18:	sub	w10, w10, w13
   13a1c:	stur	x11, [x29, #-80]
   13a20:	mov	w11, #0xfff                 	// #4095
   13a24:	stp	x13, x12, [sp, #96]
   13a28:	add	w12, w10, #0x1
   13a2c:	sub	w11, w11, w23
   13a30:	cmp	w12, w11
   13a34:	csinc	w7, w11, w10, cs  // cs = hs, nlast
   13a38:	str	w12, [sp, #84]
   13a3c:	cbz	w9, 13a8c <lzma_mode_is_supported@@XZ_5.0+0x1dc8>
   13a40:	mov	w11, #0xee9                 	// #3817
   13a44:	madd	x10, x23, x28, x21
   13a48:	movk	w11, #0x1, lsl #16
   13a4c:	ldrb	w10, [x10, x11]
   13a50:	sub	w8, w8, #0x1
   13a54:	cbz	w10, 13ab0 <lzma_mode_is_supported@@XZ_5.0+0x1dec>
   13a58:	mov	w10, #0xee4                 	// #3812
   13a5c:	movk	w10, #0x1, lsl #16
   13a60:	add	x10, x21, x10
   13a64:	madd	x11, x23, x28, x10
   13a68:	ldp	w12, w11, [x11, #8]
   13a6c:	mul	x12, x12, x28
   13a70:	ldr	w10, [x10, x12]
   13a74:	cmp	w11, #0x3
   13a78:	b.hi	13ac4 <lzma_mode_is_supported@@XZ_5.0+0x1e00>  // b.pmore
   13a7c:	cmp	w10, #0x7
   13a80:	mov	w10, #0xb                   	// #11
   13a84:	mov	w11, #0x8                   	// #8
   13a88:	b	13ad0 <lzma_mode_is_supported@@XZ_5.0+0x1e0c>
   13a8c:	mov	w11, #0xee4                 	// #3812
   13a90:	madd	x10, x8, x28, x21
   13a94:	movk	w11, #0x1, lsl #16
   13a98:	adrp	x5, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   13a9c:	ldr	w10, [x10, x11]
   13aa0:	ldr	x5, [x5, #3960]
   13aa4:	mov	w4, #0x600                 	// #1536
   13aa8:	sub	x13, x29, #0x20
   13aac:	b	13b04 <lzma_mode_is_supported@@XZ_5.0+0x1e40>
   13ab0:	mov	w11, #0xee4                 	// #3812
   13ab4:	umaddl	x10, w8, w28, x21
   13ab8:	movk	w11, #0x1, lsl #16
   13abc:	ldr	w10, [x10, x11]
   13ac0:	b	13ad4 <lzma_mode_is_supported@@XZ_5.0+0x1e10>
   13ac4:	cmp	w10, #0x7
   13ac8:	mov	w10, #0xa                   	// #10
   13acc:	mov	w11, #0x7                   	// #7
   13ad0:	csel	w10, w11, w10, cc  // cc = lo, ul, last
   13ad4:	adrp	x5, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   13ad8:	ldr	x5, [x5, #3960]
   13adc:	cmp	w10, #0xa
   13ae0:	mov	w11, #0xfffffffa            	// #-6
   13ae4:	mov	w12, #0xfffffffd            	// #-3
   13ae8:	csel	w11, w12, w11, cc  // cc = lo, ul, last
   13aec:	cmp	w10, #0x4
   13af0:	add	w10, w11, w10
   13af4:	mov	w4, #0x600                 	// #1536
   13af8:	sub	x13, x29, #0x20
   13afc:	csel	w10, wzr, w10, cc  // cc = lo, ul, last
   13b00:	mov	w8, w8
   13b04:	sub	x11, x23, #0x1
   13b08:	cmp	x8, x11
   13b0c:	ldr	w11, [sp, #76]
   13b10:	stur	w7, [x29, #-64]
   13b14:	str	w0, [sp, #80]
   13b18:	add	w11, w23, w11
   13b1c:	stur	w11, [x29, #-144]
   13b20:	b.ne	13b58 <lzma_mode_is_supported@@XZ_5.0+0x1e94>  // b.any
   13b24:	mov	w9, #0xefc                 	// #3836
   13b28:	madd	x8, x23, x28, x21
   13b2c:	movk	w9, #0x1, lsl #16
   13b30:	ldr	w8, [x8, x9]
   13b34:	cbz	w8, 13c7c <lzma_mode_is_supported@@XZ_5.0+0x1fb8>
   13b38:	cmp	w10, #0xa
   13b3c:	mov	w8, #0xfffffffa            	// #-6
   13b40:	mov	w9, #0xfffffffd            	// #-3
   13b44:	csel	w8, w9, w8, cc  // cc = lo, ul, last
   13b48:	add	w8, w8, w10
   13b4c:	cmp	w10, #0x4
   13b50:	csel	w15, wzr, w8, cc  // cc = lo, ul, last
   13b54:	b	13cc4 <lzma_mode_is_supported@@XZ_5.0+0x2000>
   13b58:	mov	w14, #0xf00                 	// #3840
   13b5c:	movk	w14, #0x1, lsl #16
   13b60:	cbz	w9, 13bb0 <lzma_mode_is_supported@@XZ_5.0+0x1eec>
   13b64:	mov	w11, #0xee9                 	// #3817
   13b68:	madd	x9, x23, x28, x21
   13b6c:	movk	w11, #0x1, lsl #16
   13b70:	ldrb	w9, [x9, x11]
   13b74:	cbz	w9, 13bb0 <lzma_mode_is_supported@@XZ_5.0+0x1eec>
   13b78:	mov	w9, #0xef0                 	// #3824
   13b7c:	madd	x8, x23, x28, x21
   13b80:	movk	w9, #0x1, lsl #16
   13b84:	mov	w11, #0xeec                 	// #3820
   13b88:	ldr	w9, [x8, x9]
   13b8c:	movk	w11, #0x1, lsl #16
   13b90:	ldr	w8, [x8, x11]
   13b94:	cmp	w10, #0x7
   13b98:	mov	w10, #0xb                   	// #11
   13b9c:	mov	w11, #0x8                   	// #8
   13ba0:	csel	w15, w11, w10, cc  // cc = lo, ul, last
   13ba4:	cmp	w9, #0x3
   13ba8:	b.ls	13bd8 <lzma_mode_is_supported@@XZ_5.0+0x1f14>  // b.plast
   13bac:	b	13ca0 <lzma_mode_is_supported@@XZ_5.0+0x1fdc>
   13bb0:	mov	w11, #0xefc                 	// #3836
   13bb4:	madd	x9, x23, x28, x21
   13bb8:	movk	w11, #0x1, lsl #16
   13bbc:	ldr	w9, [x9, x11]
   13bc0:	cmp	w9, #0x3
   13bc4:	b.hi	13c90 <lzma_mode_is_supported@@XZ_5.0+0x1fcc>  // b.pmore
   13bc8:	cmp	w10, #0x7
   13bcc:	mov	w10, #0xb                   	// #11
   13bd0:	mov	w11, #0x8                   	// #8
   13bd4:	csel	w15, w11, w10, cc  // cc = lo, ul, last
   13bd8:	madd	x10, x8, x28, x21
   13bdc:	add	x10, x10, w9, uxtw #2
   13be0:	ldr	w10, [x10, x14]
   13be4:	stur	w10, [x29, #-32]
   13be8:	mov	w10, #0x1                   	// #1
   13bec:	cbz	w9, 13c18 <lzma_mode_is_supported@@XZ_5.0+0x1f54>
   13bf0:	sub	w11, w10, #0x1
   13bf4:	madd	x12, x8, x28, x21
   13bf8:	add	x11, x12, w11, uxtw #2
   13bfc:	ldr	w11, [x11, x14]
   13c00:	str	w11, [x13, w10, uxtw #2]
   13c04:	add	w10, w10, #0x1
   13c08:	cmp	w10, w9
   13c0c:	b.ls	13bf0 <lzma_mode_is_supported@@XZ_5.0+0x1f2c>  // b.plast
   13c10:	cmp	w10, #0x3
   13c14:	b.hi	13cc4 <lzma_mode_is_supported@@XZ_5.0+0x2000>  // b.pmore
   13c18:	mov	w9, w10
   13c1c:	add	x0, x13, w10, uxtw #2
   13c20:	cmp	w10, #0x3
   13c24:	mov	w10, #0xb                   	// #11
   13c28:	madd	x8, x8, x10, x9
   13c2c:	mov	w10, #0x3                   	// #3
   13c30:	csel	x10, x9, x10, hi  // hi = pmore
   13c34:	add	x8, x21, x8, lsl #2
   13c38:	sub	x9, x10, x9
   13c3c:	add	x1, x8, x14
   13c40:	lsl	x8, x9, #2
   13c44:	add	x2, x8, #0x4
   13c48:	mov	w19, w6
   13c4c:	mov	w20, w15
   13c50:	bl	3040 <memcpy@plt>
   13c54:	adrp	x5, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   13c58:	ldur	w7, [x29, #-64]
   13c5c:	ldr	x5, [x5, #3960]
   13c60:	mov	w30, #0xef8                 	// #3832
   13c64:	mov	w15, w20
   13c68:	mov	w20, #0x1e                  	// #30
   13c6c:	mov	w6, w19
   13c70:	mov	w4, #0x600                 	// #1536
   13c74:	movk	w30, #0x1, lsl #16
   13c78:	b	13cc4 <lzma_mode_is_supported@@XZ_5.0+0x2000>
   13c7c:	cmp	w10, #0x7
   13c80:	mov	w8, #0xb                   	// #11
   13c84:	mov	w9, #0x9                   	// #9
   13c88:	csel	w15, w9, w8, cc  // cc = lo, ul, last
   13c8c:	b	13cc4 <lzma_mode_is_supported@@XZ_5.0+0x2000>
   13c90:	cmp	w10, #0x7
   13c94:	mov	w10, #0xa                   	// #10
   13c98:	mov	w11, #0x7                   	// #7
   13c9c:	csel	w15, w11, w10, cc  // cc = lo, ul, last
   13ca0:	mov	w11, #0xf08                 	// #3848
   13ca4:	madd	x8, x8, x28, x21
   13ca8:	movk	w11, #0x1, lsl #16
   13cac:	ldr	x10, [x8, x14]
   13cb0:	ldr	w8, [x8, x11]
   13cb4:	sub	w9, w9, #0x4
   13cb8:	stur	w9, [x29, #-32]
   13cbc:	stur	x10, [x29, #-28]
   13cc0:	stur	w8, [x29, #-20]
   13cc4:	ldur	q0, [x29, #-32]
   13cc8:	ldur	x10, [x29, #-80]
   13ccc:	mov	w9, #0xee4                 	// #3812
   13cd0:	madd	x8, x23, x28, x21
   13cd4:	movk	w9, #0x1, lsl #16
   13cd8:	mov	w12, w15
   13cdc:	add	x8, x8, x9
   13ce0:	mov	x11, x10
   13ce4:	str	x12, [sp, #168]
   13ce8:	str	w15, [x8]
   13cec:	stur	q0, [x8, #28]
   13cf0:	cmp	w15, #0x6
   13cf4:	add	x9, x21, x12, lsl #5
   13cf8:	ldr	w15, [x8, #16]
   13cfc:	ldrb	w10, [x10]
   13d00:	ldrb	w8, [x11, #-1]!
   13d04:	ldr	w12, [x21, #2960]
   13d08:	ldur	w16, [x29, #-144]
   13d0c:	mov	w13, #0x6b9c                	// #27548
   13d10:	ldr	w14, [x21, #2968]
   13d14:	stur	x12, [x29, #-72]
   13d18:	and	w12, w12, w16
   13d1c:	add	x9, x9, w12, uxtw #1
   13d20:	ldrh	w9, [x9, x13]
   13d24:	ldr	w17, [x21, #2964]
   13d28:	fmov	w18, s0
   13d2c:	stur	w14, [x29, #-116]
   13d30:	and	w14, w14, w16
   13d34:	lsr	x16, x9, #4
   13d38:	stur	x11, [x29, #-48]
   13d3c:	sub	x11, x11, x18
   13d40:	mov	w13, #0x8                   	// #8
   13d44:	ldrb	w9, [x5, x16]
   13d48:	sub	w0, w13, w17
   13d4c:	ldrb	w13, [x11]
   13d50:	lsl	w11, w14, w17
   13d54:	lsr	w8, w8, w0
   13d58:	add	w8, w8, w11
   13d5c:	add	w11, w15, w9
   13d60:	orr	w9, w10, #0x100
   13d64:	mov	w14, wzr
   13d68:	stur	x17, [x29, #-128]
   13d6c:	stur	w0, [x29, #-132]
   13d70:	b.hi	13db0 <lzma_mode_is_supported@@XZ_5.0+0x20ec>  // b.pmore
   13d74:	and	w17, w9, #0x1
   13d78:	lsr	w9, w9, #1
   13d7c:	lsl	w0, w9, #1
   13d80:	madd	x1, x8, x4, x21
   13d84:	add	x0, x1, x0
   13d88:	ldrh	w0, [x0, #2972]
   13d8c:	neg	w17, w17
   13d90:	and	w17, w17, #0x7f0
   13d94:	cmp	w9, #0x1
   13d98:	eor	w17, w17, w0
   13d9c:	lsr	x17, x17, #4
   13da0:	ldrb	w17, [x5, x17]
   13da4:	add	w14, w14, w17
   13da8:	b.ne	13d74 <lzma_mode_is_supported@@XZ_5.0+0x20b0>  // b.any
   13dac:	b	13e04 <lzma_mode_is_supported@@XZ_5.0+0x2140>
   13db0:	mov	w17, #0x100                 	// #256
   13db4:	mov	w0, w13
   13db8:	lsl	w0, w0, #1
   13dbc:	add	w1, w17, w9, lsr #8
   13dc0:	and	w3, w0, w17
   13dc4:	madd	x2, x8, x4, x21
   13dc8:	add	w1, w1, w3
   13dcc:	add	x1, x2, w1, uxtw #1
   13dd0:	ldrh	w1, [x1, #2972]
   13dd4:	ubfx	w2, w9, #7, #1
   13dd8:	neg	w2, w2
   13ddc:	and	w2, w2, #0x7f0
   13de0:	eor	w1, w2, w1
   13de4:	lsr	x1, x1, #4
   13de8:	ldrb	w1, [x5, x1]
   13dec:	cmp	w9, #0x8, lsl #12
   13df0:	lsl	w9, w9, #1
   13df4:	eor	w2, w9, w0
   13df8:	add	w14, w14, w1
   13dfc:	bic	w17, w17, w2
   13e00:	b.cc	13db8 <lzma_mode_is_supported@@XZ_5.0+0x20f4>  // b.lo, b.ul, b.last
   13e04:	add	x1, x23, #0x1
   13e08:	madd	x8, x1, x28, x21
   13e0c:	add	x9, x8, x22
   13e10:	ldr	w8, [x9]
   13e14:	add	w14, w11, w14
   13e18:	cmp	w14, w8
   13e1c:	b.cs	13e54 <lzma_mode_is_supported@@XZ_5.0+0x2190>  // b.hs, b.nlast
   13e20:	mov	w11, #0xefc                 	// #3836
   13e24:	madd	x8, x1, x28, x21
   13e28:	movk	w11, #0x1, lsl #16
   13e2c:	mov	w17, #0xffffffff            	// #-1
   13e30:	str	w14, [x9]
   13e34:	str	w23, [x8, x30]
   13e38:	str	w17, [x8, x11]
   13e3c:	mov	w11, #0xee8                 	// #3816
   13e40:	movk	w11, #0x1, lsl #16
   13e44:	strb	wzr, [x8, x11]
   13e48:	mov	w11, #0x1                   	// #1
   13e4c:	mov	w8, w14
   13e50:	b	13e58 <lzma_mode_is_supported@@XZ_5.0+0x2194>
   13e54:	mov	w11, wzr
   13e58:	ldr	x17, [sp, #168]
   13e5c:	mov	w0, #0x6d1c                	// #27932
   13e60:	eor	x16, x16, #0x7f
   13e64:	ldrb	w16, [x5, x16]
   13e68:	add	x17, x21, x17, lsl #1
   13e6c:	ldrh	w17, [x17, x0]
   13e70:	ldur	x4, [x29, #-80]
   13e74:	add	w2, w15, w16
   13e78:	cmp	w13, w10
   13e7c:	lsr	x3, x17, #4
   13e80:	eor	x17, x3, #0x7f
   13e84:	ldrb	w17, [x5, x17]
   13e88:	add	w19, w2, w17
   13e8c:	b.ne	13f20 <lzma_mode_is_supported@@XZ_5.0+0x225c>  // b.any
   13e90:	madd	x15, x1, x28, x21
   13e94:	add	x15, x15, x30
   13e98:	ldr	w16, [x15]
   13e9c:	cmp	x23, x16
   13ea0:	b.ls	13eb8 <lzma_mode_is_supported@@XZ_5.0+0x21f4>  // b.plast
   13ea4:	mov	w17, #0xefc                 	// #3836
   13ea8:	madd	x16, x1, x28, x21
   13eac:	movk	w17, #0x1, lsl #16
   13eb0:	ldr	w16, [x16, x17]
   13eb4:	cbz	w16, 13f20 <lzma_mode_is_supported@@XZ_5.0+0x225c>
   13eb8:	ldr	x17, [sp, #168]
   13ebc:	mov	w0, #0x6d34                	// #27956
   13ec0:	add	x16, x21, x17, lsl #1
   13ec4:	add	x17, x21, x17, lsl #5
   13ec8:	ldrh	w16, [x16, x0]
   13ecc:	add	x17, x17, x12, lsl #1
   13ed0:	mov	w0, #0x6d7c                	// #28028
   13ed4:	ldrh	w17, [x17, x0]
   13ed8:	lsr	x16, x16, #4
   13edc:	ldrb	w16, [x5, x16]
   13ee0:	lsr	x17, x17, #4
   13ee4:	ldrb	w17, [x5, x17]
   13ee8:	add	w16, w19, w16
   13eec:	add	w16, w16, w17
   13ef0:	cmp	w16, w8
   13ef4:	b.hi	13f20 <lzma_mode_is_supported@@XZ_5.0+0x225c>  // b.pmore
   13ef8:	str	w16, [x9]
   13efc:	mov	w9, #0xefc                 	// #3836
   13f00:	madd	x8, x1, x28, x21
   13f04:	movk	w9, #0x1, lsl #16
   13f08:	str	w23, [x15]
   13f0c:	str	wzr, [x8, x9]
   13f10:	mov	w9, #0xee8                 	// #3816
   13f14:	movk	w9, #0x1, lsl #16
   13f18:	mov	w11, #0x1                   	// #1
   13f1c:	strb	wzr, [x8, x9]
   13f20:	cmp	w7, #0x2
   13f24:	str	x1, [sp, #120]
   13f28:	b.cc	1398c <lzma_mode_is_supported@@XZ_5.0+0x1cc8>  // b.lo, b.ul, b.last
   13f2c:	cmp	w13, w10
   13f30:	cset	w8, eq  // eq = none
   13f34:	cmp	w7, w24
   13f38:	orr	w8, w8, w11
   13f3c:	csel	w0, w7, w24, cc  // cc = lo, ul, last
   13f40:	sub	x1, x29, #0x20
   13f44:	stur	w0, [x29, #-36]
   13f48:	stur	w6, [x29, #-92]
   13f4c:	str	w2, [sp, #44]
   13f50:	str	x3, [sp, #32]
   13f54:	tbnz	w8, #0, 13fc4 <lzma_mode_is_supported@@XZ_5.0+0x2300>
   13f58:	add	w11, w24, #0x1
   13f5c:	cmp	w11, w7
   13f60:	csinc	w10, w7, w24, hi  // hi = pmore
   13f64:	cmp	w10, #0x2
   13f68:	b.cc	13fc4 <lzma_mode_is_supported@@XZ_5.0+0x2300>  // b.lo, b.ul, b.last
   13f6c:	ldr	w13, [sp, #156]
   13f70:	ldr	w15, [sp, #84]
   13f74:	ldur	x3, [x29, #-88]
   13f78:	mov	x8, xzr
   13f7c:	cmp	w13, w15
   13f80:	csel	w13, w13, w15, cc  // cc = lo, ul, last
   13f84:	ldp	x16, x15, [sp, #96]
   13f88:	sub	x9, x16, x18
   13f8c:	cmp	w13, w11
   13f90:	csel	w11, w13, w11, cc  // cc = lo, ul, last
   13f94:	add	x9, x15, x9
   13f98:	sub	x9, x9, #0x1
   13f9c:	sub	w11, w11, #0x1
   13fa0:	add	x13, x15, x16
   13fa4:	ldrb	w15, [x13, x8]
   13fa8:	ldrb	w16, [x9, x8]
   13fac:	cmp	w15, w16
   13fb0:	b.ne	14600 <lzma_mode_is_supported@@XZ_5.0+0x293c>  // b.any
   13fb4:	add	x8, x8, #0x1
   13fb8:	cmp	w11, w8
   13fbc:	b.ne	13fa4 <lzma_mode_is_supported@@XZ_5.0+0x22e0>  // b.any
   13fc0:	b	14604 <lzma_mode_is_supported@@XZ_5.0+0x2940>
   13fc4:	ldur	x3, [x29, #-88]
   13fc8:	ldr	x10, [sp, #168]
   13fcc:	mov	x2, xzr
   13fd0:	mov	w6, #0x2                   	// #2
   13fd4:	stp	w19, w24, [sp, #128]
   13fd8:	add	x8, x21, x10, lsl #1
   13fdc:	add	x9, x21, x10, lsl #5
   13fe0:	cmp	w10, #0x7
   13fe4:	ldp	x11, x10, [sp, #96]
   13fe8:	add	x11, x10, x11
   13fec:	ldr	x10, [sp, #24]
   13ff0:	add	x17, x11, #0x1
   13ff4:	madd	x10, x12, x25, x10
   13ff8:	stur	x10, [x29, #-88]
   13ffc:	mov	w10, #0x6d34                	// #27956
   14000:	add	x10, x8, x10
   14004:	stp	x11, x10, [x29, #-112]
   14008:	mov	w10, #0x6d4c                	// #27980
   1400c:	add	x10, x8, x10
   14010:	str	x10, [sp, #160]
   14014:	mov	w10, #0x6d64                	// #28004
   14018:	add	x8, x8, x10
   1401c:	str	x8, [sp, #88]
   14020:	add	x8, x9, x12, lsl #1
   14024:	mov	w9, #0xb                   	// #11
   14028:	mov	w10, #0x8                   	// #8
   1402c:	csel	x9, x10, x9, cc  // cc = lo, ul, last
   14030:	str	x9, [sp, #136]
   14034:	ldr	w9, [sp, #156]
   14038:	mov	w10, #0x6d7c                	// #28028
   1403c:	add	x8, x8, x10
   14040:	str	x8, [sp, #112]
   14044:	cmp	w24, w9
   14048:	csel	w8, w24, w9, cc  // cc = lo, ul, last
   1404c:	ldr	w9, [sp, #84]
   14050:	cmp	w8, w9
   14054:	csel	w8, w8, w9, cc  // cc = lo, ul, last
   14058:	sub	w7, w8, #0x2
   1405c:	ldur	x9, [x29, #-48]
   14060:	mov	w8, w18
   14064:	sub	x14, x9, x8
   14068:	ldrb	w9, [x4]
   1406c:	ldrb	w10, [x14]
   14070:	cmp	w9, w10
   14074:	b.ne	14584 <lzma_mode_is_supported@@XZ_5.0+0x28c0>  // b.any
   14078:	ldrb	w9, [x4, #1]
   1407c:	ldrb	w10, [x14, #1]
   14080:	cmp	w9, w10
   14084:	b.ne	14584 <lzma_mode_is_supported@@XZ_5.0+0x28c0>  // b.any
   14088:	cmp	w0, #0x3
   1408c:	neg	x10, x8
   14090:	b.cc	140d0 <lzma_mode_is_supported@@XZ_5.0+0x240c>  // b.lo, b.ul, b.last
   14094:	ldur	x9, [x29, #-112]
   14098:	mov	x8, xzr
   1409c:	add	x9, x9, x10
   140a0:	ldrb	w11, [x17, x8]
   140a4:	ldrb	w13, [x9, x8]
   140a8:	cmp	w11, w13
   140ac:	b.ne	140fc <lzma_mode_is_supported@@XZ_5.0+0x2438>  // b.any
   140b0:	add	x8, x8, #0x1
   140b4:	cmp	w7, w8
   140b8:	b.ne	140a0 <lzma_mode_is_supported@@XZ_5.0+0x23dc>  // b.any
   140bc:	mov	w1, w0
   140c0:	add	w18, w1, w23
   140c4:	cmp	w3, w18
   140c8:	b.cs	1410c <lzma_mode_is_supported@@XZ_5.0+0x2448>  // b.hs, b.nlast
   140cc:	b	140e0 <lzma_mode_is_supported@@XZ_5.0+0x241c>
   140d0:	mov	w1, #0x2                   	// #2
   140d4:	add	w18, w1, w23
   140d8:	cmp	w3, w18
   140dc:	b.cs	1410c <lzma_mode_is_supported@@XZ_5.0+0x2448>  // b.hs, b.nlast
   140e0:	mov	w15, w3
   140e4:	mov	w8, w18
   140e8:	sub	x9, x8, x15
   140ec:	cmp	x9, #0x2
   140f0:	b.cs	14170 <lzma_mode_is_supported@@XZ_5.0+0x24ac>  // b.hs, b.nlast
   140f4:	mov	x8, x15
   140f8:	b	141a4 <lzma_mode_is_supported@@XZ_5.0+0x24e0>
   140fc:	add	w1, w8, #0x2
   14100:	add	w18, w1, w23
   14104:	cmp	w3, w18
   14108:	b.cc	140e0 <lzma_mode_is_supported@@XZ_5.0+0x241c>  // b.lo, b.ul, b.last
   1410c:	ldur	x8, [x29, #-104]
   14110:	ldrh	w8, [x8]
   14114:	lsr	x8, x8, #4
   14118:	cbz	x2, 141d4 <lzma_mode_is_supported@@XZ_5.0+0x2510>
   1411c:	ldr	x9, [sp, #160]
   14120:	eor	x8, x8, #0x7f
   14124:	ldrb	w8, [x5, x8]
   14128:	mov	w4, #0xef8                 	// #3832
   1412c:	ldrh	w9, [x9]
   14130:	cmp	x2, #0x1
   14134:	movk	w4, #0x1, lsl #16
   14138:	lsr	x9, x9, #4
   1413c:	b.eq	141f0 <lzma_mode_is_supported@@XZ_5.0+0x252c>  // b.none
   14140:	ldr	x11, [sp, #88]
   14144:	eor	x9, x9, #0x7f
   14148:	ldrb	w9, [x5, x9]
   1414c:	mov	w13, #0x2                   	// #2
   14150:	ldrh	w11, [x11]
   14154:	sub	w13, w13, w2
   14158:	and	x13, x13, #0x7f0
   1415c:	add	w9, w9, w8
   14160:	eor	x11, x13, x11
   14164:	lsr	x8, x11, #4
   14168:	ldrb	w8, [x5, x8]
   1416c:	b	141f4 <lzma_mode_is_supported@@XZ_5.0+0x2530>
   14170:	ldr	x8, [sp, #144]
   14174:	and	x11, x9, #0xfffffffffffffffe
   14178:	add	w16, w23, w1
   1417c:	madd	x13, x15, x28, x8
   14180:	add	x8, x11, x15
   14184:	sub	x15, x16, x15
   14188:	and	x15, x15, #0xfffffffffffffffe
   1418c:	stur	w27, [x13, #-44]
   14190:	str	w27, [x13], #88
   14194:	subs	x15, x15, #0x2
   14198:	b.ne	1418c <lzma_mode_is_supported@@XZ_5.0+0x24c8>  // b.any
   1419c:	cmp	x9, x11
   141a0:	b.eq	141c0 <lzma_mode_is_supported@@XZ_5.0+0x24fc>  // b.none
   141a4:	ldur	x11, [x29, #-160]
   141a8:	add	w9, w23, w1
   141ac:	sub	x9, x9, x8
   141b0:	madd	x8, x8, x28, x11
   141b4:	subs	x9, x9, #0x1
   141b8:	str	w27, [x8], #44
   141bc:	b.ne	141b4 <lzma_mode_is_supported@@XZ_5.0+0x24f0>  // b.any
   141c0:	mov	w3, w18
   141c4:	ldur	x8, [x29, #-104]
   141c8:	ldrh	w8, [x8]
   141cc:	lsr	x8, x8, #4
   141d0:	cbnz	x2, 1411c <lzma_mode_is_supported@@XZ_5.0+0x2458>
   141d4:	ldr	x9, [sp, #112]
   141d8:	ldrb	w8, [x5, x8]
   141dc:	mov	w4, #0xef8                 	// #3832
   141e0:	movk	w4, #0x1, lsl #16
   141e4:	ldrh	w9, [x9]
   141e8:	lsr	x9, x9, #4
   141ec:	eor	x9, x9, #0x7f
   141f0:	ldrb	w9, [x5, x9]
   141f4:	add	w8, w9, w8
   141f8:	add	w30, w8, w19
   141fc:	ldur	x8, [x29, #-88]
   14200:	sub	w9, w1, #0x2
   14204:	mov	w11, w1
   14208:	add	x8, x8, w9, uxtw #2
   1420c:	b	14220 <lzma_mode_is_supported@@XZ_5.0+0x255c>
   14210:	sub	w11, w11, #0x1
   14214:	cmp	w11, #0x1
   14218:	sub	x8, x8, #0x4
   1421c:	b.ls	14268 <lzma_mode_is_supported@@XZ_5.0+0x25a4>  // b.plast
   14220:	add	w13, w23, w11
   14224:	umaddl	x15, w13, w28, x21
   14228:	ldr	w16, [x8]
   1422c:	add	x15, x15, x22
   14230:	ldr	w0, [x15]
   14234:	add	w16, w16, w30
   14238:	cmp	w16, w0
   1423c:	b.cs	14210 <lzma_mode_is_supported@@XZ_5.0+0x254c>  // b.hs, b.nlast
   14240:	str	w16, [x15]
   14244:	mov	w15, #0xefc                 	// #3836
   14248:	madd	x13, x13, x28, x21
   1424c:	movk	w15, #0x1, lsl #16
   14250:	str	w23, [x13, x4]
   14254:	str	w2, [x13, x15]
   14258:	mov	w15, #0xee8                 	// #3816
   1425c:	movk	w15, #0x1, lsl #16
   14260:	strb	wzr, [x13, x15]
   14264:	b	14210 <lzma_mode_is_supported@@XZ_5.0+0x254c>
   14268:	ldur	w13, [x29, #-64]
   1426c:	add	w8, w1, #0x1
   14270:	cmp	x2, #0x0
   14274:	add	w11, w8, w24
   14278:	ldur	x4, [x29, #-80]
   1427c:	csinc	w20, w6, w1, ne  // ne = any
   14280:	cmp	w11, w13
   14284:	csel	w11, w13, w11, hi  // hi = pmore
   14288:	cmp	w8, w11
   1428c:	mov	w6, w8
   14290:	b.cs	142c8 <lzma_mode_is_supported@@XZ_5.0+0x2604>  // b.hs, b.nlast
   14294:	ldur	x15, [x29, #-112]
   14298:	mov	w6, w8
   1429c:	mov	w13, w11
   142a0:	add	x10, x15, x10
   142a4:	add	x16, x10, x6
   142a8:	ldrb	w15, [x4, x6]
   142ac:	ldurb	w16, [x16, #-2]
   142b0:	cmp	w15, w16
   142b4:	b.ne	142c8 <lzma_mode_is_supported@@XZ_5.0+0x2604>  // b.any
   142b8:	add	x6, x6, #0x1
   142bc:	cmp	x6, x13
   142c0:	b.cc	142a4 <lzma_mode_is_supported@@XZ_5.0+0x25e0>  // b.lo, b.ul, b.last
   142c4:	mov	w6, w11
   142c8:	sub	w0, w6, w8
   142cc:	subs	w13, w0, #0x2
   142d0:	b.cc	14410 <lzma_mode_is_supported@@XZ_5.0+0x274c>  // b.lo, b.ul, b.last
   142d4:	ldur	w8, [x29, #-144]
   142d8:	ldr	x15, [sp, #136]
   142dc:	mov	x24, x3
   142e0:	sub	w16, w1, #0x1
   142e4:	add	w11, w1, w8
   142e8:	madd	x8, x12, x25, x21
   142ec:	add	x9, x8, w9, uxtw #2
   142f0:	ldur	x8, [x29, #-72]
   142f4:	add	x15, x21, x15, lsl #5
   142f8:	mov	w1, w1
   142fc:	ldrb	w16, [x4, w16, uxtw]
   14300:	and	x3, x11, x8
   14304:	ldrb	w8, [x14, x1]
   14308:	add	x14, x15, x3, lsl #1
   1430c:	mov	w15, #0x6b9c                	// #27548
   14310:	ldrb	w4, [x4, x1]
   14314:	ldrh	w14, [x14, x15]
   14318:	mov	w1, #0xbe4c                	// #48716
   1431c:	ldr	w9, [x9, x1]
   14320:	ldur	w15, [x29, #-116]
   14324:	lsr	x14, x14, #4
   14328:	ldrb	w1, [x5, x14]
   1432c:	stur	w9, [x29, #-148]
   14330:	ldur	x9, [x29, #-128]
   14334:	ldur	w14, [x29, #-132]
   14338:	and	w15, w11, w15
   1433c:	mov	w10, wzr
   14340:	lsl	w9, w15, w9
   14344:	lsr	w15, w16, w14
   14348:	add	w9, w15, w9
   1434c:	orr	w4, w4, #0x100
   14350:	mov	x19, x5
   14354:	mov	w5, #0x100                 	// #256
   14358:	mov	w14, #0x600                 	// #1536
   1435c:	lsl	w8, w8, #1
   14360:	add	w15, w5, w4, lsr #8
   14364:	and	w3, w8, w5
   14368:	madd	x16, x9, x14, x21
   1436c:	add	w15, w15, w3
   14370:	add	x15, x16, w15, uxtw #1
   14374:	ldrh	w15, [x15, #2972]
   14378:	ubfx	w16, w4, #7, #1
   1437c:	neg	w16, w16
   14380:	and	w16, w16, #0x7f0
   14384:	eor	w15, w16, w15
   14388:	lsr	x15, x15, #4
   1438c:	ldrb	w15, [x19, x15]
   14390:	cmp	w4, #0x8, lsl #12
   14394:	lsl	w4, w4, #1
   14398:	eor	w16, w4, w8
   1439c:	add	w10, w10, w15
   143a0:	bic	w5, w5, w16
   143a4:	b.cc	1435c <lzma_mode_is_supported@@XZ_5.0+0x2698>  // b.lo, b.ul, b.last
   143a8:	ldur	x9, [x29, #-56]
   143ac:	add	w8, w11, #0x1
   143b0:	mov	w14, #0x6c3c                	// #27708
   143b4:	add	w18, w18, #0x1
   143b8:	ldrh	w11, [x9, #2]
   143bc:	ldur	x9, [x29, #-72]
   143c0:	add	w5, w0, w18
   143c4:	lsr	x11, x11, #4
   143c8:	and	x9, x8, x9
   143cc:	add	x8, x21, x9, lsl #1
   143d0:	ldrh	w8, [x8, x14]
   143d4:	eor	x11, x11, #0x7f
   143d8:	ldrb	w11, [x19, x11]
   143dc:	lsr	x8, x8, #4
   143e0:	eor	x8, x8, #0x7f
   143e4:	ldrb	w4, [x19, x8]
   143e8:	mov	x8, x24
   143ec:	cmp	w8, w5
   143f0:	b.cs	14424 <lzma_mode_is_supported@@XZ_5.0+0x2760>  // b.hs, b.nlast
   143f4:	mov	w24, w8
   143f8:	mov	w0, w5
   143fc:	sub	x3, x0, x24
   14400:	cmp	x3, #0x2
   14404:	b.cs	14438 <lzma_mode_is_supported@@XZ_5.0+0x2774>  // b.hs, b.nlast
   14408:	mov	x8, x24
   1440c:	b	14474 <lzma_mode_is_supported@@XZ_5.0+0x27b0>
   14410:	mov	w30, #0xef8                 	// #3832
   14414:	movk	w30, #0x1, lsl #16
   14418:	sub	x1, x29, #0x20
   1441c:	mov	w6, w20
   14420:	b	1457c <lzma_mode_is_supported@@XZ_5.0+0x28b8>
   14424:	mov	w0, w5
   14428:	adrp	x5, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   1442c:	ldr	x5, [x5, #3960]
   14430:	ldr	w19, [sp, #128]
   14434:	b	144a0 <lzma_mode_is_supported@@XZ_5.0+0x27dc>
   14438:	ldr	x8, [sp, #144]
   1443c:	add	w19, w23, w6
   14440:	and	x16, x3, #0xfffffffffffffffe
   14444:	sub	x19, x19, x24
   14448:	madd	x15, x24, x28, x8
   1444c:	add	x8, x16, x24
   14450:	and	x19, x19, #0xfffffffffffffffe
   14454:	stur	w27, [x15, #-44]
   14458:	str	w27, [x15], #88
   1445c:	subs	x19, x19, #0x2
   14460:	b.ne	14454 <lzma_mode_is_supported@@XZ_5.0+0x2790>  // b.any
   14464:	cmp	x3, x16
   14468:	b.ne	14474 <lzma_mode_is_supported@@XZ_5.0+0x27b0>  // b.any
   1446c:	mov	w24, w5
   14470:	b	14428 <lzma_mode_is_supported@@XZ_5.0+0x2764>
   14474:	ldur	x14, [x29, #-160]
   14478:	ldr	w19, [sp, #128]
   1447c:	add	w15, w23, w6
   14480:	sub	x15, x15, x8
   14484:	madd	x8, x8, x28, x14
   14488:	subs	x15, x15, #0x1
   1448c:	str	w27, [x8], #44
   14490:	b.ne	14488 <lzma_mode_is_supported@@XZ_5.0+0x27c4>  // b.any
   14494:	mov	w24, w5
   14498:	adrp	x5, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   1449c:	ldr	x5, [x5, #3960]
   144a0:	mov	w6, w20
   144a4:	ldur	w14, [x29, #-148]
   144a8:	ldur	x16, [x29, #-56]
   144ac:	madd	x8, x9, x25, x21
   144b0:	add	x9, x21, x9, lsl #1
   144b4:	add	w15, w14, w30
   144b8:	mov	w14, #0x6e1c                	// #28188
   144bc:	ldrh	w16, [x16, #26]
   144c0:	ldrh	w9, [x9, x14]
   144c4:	add	x8, x8, w13, uxtw #2
   144c8:	add	w14, w15, w1
   144cc:	mov	w15, #0xbe4c                	// #48716
   144d0:	ldr	w15, [x8, x15]
   144d4:	add	w8, w14, w10
   144d8:	add	w8, w8, w4
   144dc:	lsr	x10, x16, #4
   144e0:	add	w11, w8, w11
   144e4:	lsr	x8, x9, #4
   144e8:	madd	x13, x0, x28, x21
   144ec:	ldrb	w10, [x5, x10]
   144f0:	eor	x8, x8, #0x7f
   144f4:	ldrb	w9, [x5, x8]
   144f8:	add	x8, x13, x22
   144fc:	ldr	w13, [x8]
   14500:	add	w11, w11, w15
   14504:	add	w10, w11, w10
   14508:	add	w9, w10, w9
   1450c:	cmp	w9, w13
   14510:	b.cs	14564 <lzma_mode_is_supported@@XZ_5.0+0x28a0>  // b.hs, b.nlast
   14514:	str	w9, [x8]
   14518:	mov	w30, #0xef8                 	// #3832
   1451c:	mov	w9, #0xefc                 	// #3836
   14520:	madd	x8, x0, x28, x21
   14524:	movk	w30, #0x1, lsl #16
   14528:	movk	w9, #0x1, lsl #16
   1452c:	str	w18, [x8, x30]
   14530:	str	wzr, [x8, x9]
   14534:	mov	w9, #0xee8                 	// #3816
   14538:	movk	w9, #0x1, lsl #16
   1453c:	mov	w10, #0x101                 	// #257
   14540:	strh	w10, [x8, x9]
   14544:	mov	w9, #0xeec                 	// #3820
   14548:	movk	w9, #0x1, lsl #16
   1454c:	str	w23, [x8, x9]
   14550:	mov	w9, #0xef0                 	// #3824
   14554:	movk	w9, #0x1, lsl #16
   14558:	mov	x3, x24
   1455c:	str	w2, [x8, x9]
   14560:	b	14570 <lzma_mode_is_supported@@XZ_5.0+0x28ac>
   14564:	mov	w30, #0xef8                 	// #3832
   14568:	mov	x3, x24
   1456c:	movk	w30, #0x1, lsl #16
   14570:	ldur	x4, [x29, #-80]
   14574:	ldr	w24, [sp, #132]
   14578:	sub	x1, x29, #0x20
   1457c:	ldur	w0, [x29, #-36]
   14580:	mov	w20, #0x1e                  	// #30
   14584:	add	x2, x2, #0x1
   14588:	cmp	x2, #0x4
   1458c:	b.eq	14598 <lzma_mode_is_supported@@XZ_5.0+0x28d4>  // b.none
   14590:	ldr	w18, [x1, x2, lsl #2]
   14594:	b	1405c <lzma_mode_is_supported@@XZ_5.0+0x2398>
   14598:	ldr	w14, [sp, #80]
   1459c:	ldur	w7, [x29, #-92]
   145a0:	cmp	w14, w0
   145a4:	mov	w8, w14
   145a8:	b.ls	145d0 <lzma_mode_is_supported@@XZ_5.0+0x290c>  // b.plast
   145ac:	mov	w7, wzr
   145b0:	add	x8, x21, w7, uxtw #3
   145b4:	ldr	w9, [x8, #756]
   145b8:	add	w7, w7, #0x1
   145bc:	cmp	w0, w9
   145c0:	b.hi	145b0 <lzma_mode_is_supported@@XZ_5.0+0x28ec>  // b.pmore
   145c4:	add	x8, x8, #0x2f4
   145c8:	str	w0, [x8]
   145cc:	mov	w8, w0
   145d0:	cmp	w8, w6
   145d4:	b.cc	13988 <lzma_mode_is_supported@@XZ_5.0+0x1cc4>  // b.lo, b.ul, b.last
   145d8:	add	w8, w8, w23
   145dc:	cmp	w3, w8
   145e0:	b.cs	14708 <lzma_mode_is_supported@@XZ_5.0+0x2a44>  // b.hs, b.nlast
   145e4:	mov	w13, w3
   145e8:	mov	w8, w8
   145ec:	sub	x9, x8, x13
   145f0:	cmp	x9, #0x1
   145f4:	b.hi	1469c <lzma_mode_is_supported@@XZ_5.0+0x29d8>  // b.pmore
   145f8:	mov	x3, x13
   145fc:	b	146f0 <lzma_mode_is_supported@@XZ_5.0+0x2a2c>
   14600:	add	w10, w8, #0x1
   14604:	sub	w8, w10, #0x1
   14608:	cmp	w8, #0x2
   1460c:	b.cc	13fc8 <lzma_mode_is_supported@@XZ_5.0+0x2304>  // b.lo, b.ul, b.last
   14610:	ldr	x15, [sp, #168]
   14614:	ldur	w8, [x29, #-144]
   14618:	mov	w9, #0xfffffffa            	// #-6
   1461c:	mov	w11, #0xfffffffd            	// #-3
   14620:	cmp	w15, #0xa
   14624:	csel	w9, w11, w9, cc  // cc = lo, ul, last
   14628:	ldur	x11, [x29, #-72]
   1462c:	add	w8, w8, #0x1
   14630:	cmp	w15, #0x4
   14634:	add	w0, w10, w23
   14638:	and	x13, x11, x8
   1463c:	add	w8, w9, w15
   14640:	csel	w16, wzr, w8, cc  // cc = lo, ul, last
   14644:	add	x8, x21, x16, lsl #5
   14648:	add	x9, x21, w16, uxtw #1
   1464c:	mov	w11, #0x6d1c                	// #27932
   14650:	add	x8, x8, x13, lsl #1
   14654:	ldrh	w9, [x9, x11]
   14658:	mov	w11, #0x6b9c                	// #27548
   1465c:	ldrh	w8, [x8, x11]
   14660:	cmp	w0, w3
   14664:	lsr	x9, x9, #4
   14668:	eor	x11, x9, #0x7f
   1466c:	lsr	x8, x8, #4
   14670:	eor	x8, x8, #0x7f
   14674:	ldrb	w9, [x5, x8]
   14678:	ldrb	w17, [x5, x11]
   1467c:	b.ls	14c00 <lzma_mode_is_supported@@XZ_5.0+0x2f3c>  // b.plast
   14680:	mov	w15, w3
   14684:	mov	w11, w0
   14688:	sub	x1, x11, x15
   1468c:	cmp	x1, #0x2
   14690:	b.cs	14c08 <lzma_mode_is_supported@@XZ_5.0+0x2f44>  // b.hs, b.nlast
   14694:	mov	x8, x15
   14698:	b	14c40 <lzma_mode_is_supported@@XZ_5.0+0x2f7c>
   1469c:	ldr	w15, [sp, #156]
   146a0:	cmp	w14, w24
   146a4:	csel	w14, w14, w24, cc  // cc = lo, ul, last
   146a8:	ldr	x11, [sp, #144]
   146ac:	cmp	w14, w15
   146b0:	csel	w14, w14, w15, cc  // cc = lo, ul, last
   146b4:	ldr	w15, [sp, #84]
   146b8:	and	x10, x9, #0xfffffffffffffffe
   146bc:	madd	x11, x13, x28, x11
   146c0:	add	x3, x10, x13
   146c4:	cmp	w14, w15
   146c8:	csel	w14, w14, w15, cc  // cc = lo, ul, last
   146cc:	add	w14, w14, w23
   146d0:	sub	x13, x14, x13
   146d4:	and	x13, x13, #0xfffffffffffffffe
   146d8:	stur	w27, [x11, #-44]
   146dc:	str	w27, [x11], #88
   146e0:	subs	x13, x13, #0x2
   146e4:	b.ne	146d8 <lzma_mode_is_supported@@XZ_5.0+0x2a14>  // b.any
   146e8:	cmp	x9, x10
   146ec:	b.eq	14708 <lzma_mode_is_supported@@XZ_5.0+0x2a44>  // b.none
   146f0:	ldur	x9, [x29, #-160]
   146f4:	madd	x9, x3, x28, x9
   146f8:	add	x3, x3, #0x1
   146fc:	cmp	x3, x8
   14700:	str	w27, [x9], #44
   14704:	b.cc	146f8 <lzma_mode_is_supported@@XZ_5.0+0x2a34>  // b.lo, b.ul, b.last
   14708:	ldr	x8, [sp, #32]
   1470c:	mov	w17, #0xffffffff            	// #-1
   14710:	stur	x3, [x29, #-88]
   14714:	ldrb	w8, [x5, x8]
   14718:	add	w17, w17, #0x1
   1471c:	add	x9, x21, w17, uxtw #3
   14720:	ldr	w9, [x9, #756]
   14724:	cmp	w6, w9
   14728:	b.hi	14718 <lzma_mode_is_supported@@XZ_5.0+0x2a54>  // b.pmore
   1472c:	ldr	w9, [sp, #44]
   14730:	mov	w4, w6
   14734:	stur	w6, [x29, #-36]
   14738:	stur	w7, [x29, #-92]
   1473c:	add	w18, w9, w8
   14740:	ldr	x8, [sp, #168]
   14744:	mov	w9, #0x7                   	// #7
   14748:	cmp	w8, #0x7
   1474c:	add	w8, w24, #0x1
   14750:	stur	w8, [x29, #-104]
   14754:	mov	w8, #0xa                   	// #10
   14758:	csel	x8, x9, x8, cc  // cc = lo, ul, last
   1475c:	stur	x8, [x29, #-144]
   14760:	ldp	x9, x8, [sp, #96]
   14764:	add	x1, x8, x9
   14768:	b	14784 <lzma_mode_is_supported@@XZ_5.0+0x2ac0>
   1476c:	ldur	w7, [x29, #-92]
   14770:	mov	w30, #0xef8                 	// #3832
   14774:	movk	w30, #0x1, lsl #16
   14778:	add	w17, w17, #0x1
   1477c:	cmp	w17, w7
   14780:	b.eq	1398c <lzma_mode_is_supported@@XZ_5.0+0x1cc8>  // b.none
   14784:	add	x8, x21, w17, uxtw #3
   14788:	ldr	w2, [x8, #760]
   1478c:	ldur	w9, [x29, #-60]
   14790:	mov	w10, #0x12                  	// #18
   14794:	mov	w14, #0x3c                  	// #60
   14798:	cmp	w2, #0x0
   1479c:	mov	w15, #0x24                  	// #36
   147a0:	csel	w10, w10, w20, ge  // ge = tcont
   147a4:	csel	x14, x15, x14, ge  // ge = tcont
   147a8:	cmp	w2, #0x80, lsl #12
   147ac:	mov	w15, #0x6                   	// #6
   147b0:	csel	w10, w15, w10, cc  // cc = lo, ul, last
   147b4:	mov	w15, #0xc                   	// #12
   147b8:	mov	w5, w4
   147bc:	add	w9, w9, w4
   147c0:	sub	w11, w4, #0x2
   147c4:	ldr	w13, [x8, #756]
   147c8:	and	x8, x2, #0xf
   147cc:	csel	x4, x15, x14, cc  // cc = lo, ul, last
   147d0:	mov	w14, #0xe98                 	// #3736
   147d4:	add	x8, x21, x8, lsl #2
   147d8:	movk	w14, #0x1, lsl #16
   147dc:	add	x6, x8, x14
   147e0:	ldur	w8, [x29, #-36]
   147e4:	mov	w3, wzr
   147e8:	add	w0, w2, #0x4
   147ec:	lsr	x7, x2, x10
   147f0:	add	w10, w8, #0x1
   147f4:	add	w14, w5, w3
   147f8:	sub	w8, w14, #0x2
   147fc:	cmp	w14, #0x6
   14800:	mov	w14, #0x3                   	// #3
   14804:	csel	w15, w8, w14, cc  // cc = lo, ul, last
   14808:	cmp	w2, #0x7f
   1480c:	add	w14, w11, w3
   14810:	b.hi	14830 <lzma_mode_is_supported@@XZ_5.0+0x2b6c>  // b.pmore
   14814:	mov	w15, w15
   14818:	add	x15, x21, x15, lsl #9
   1481c:	mov	w16, #0x690                 	// #1680
   14820:	add	x15, x15, x2, lsl #2
   14824:	movk	w16, #0x1, lsl #16
   14828:	ldr	w15, [x15, x16]
   1482c:	b	14860 <lzma_mode_is_supported@@XZ_5.0+0x2b9c>
   14830:	adrp	x16, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   14834:	ldr	x16, [x16, #4008]
   14838:	mov	w15, w15
   1483c:	add	x15, x21, x15, lsl #8
   14840:	ldrb	w16, [x16, x7]
   14844:	add	x16, x4, x16
   14848:	add	x15, x15, x16, lsl #2
   1484c:	mov	w16, #0x290                 	// #656
   14850:	movk	w16, #0x1, lsl #16
   14854:	ldr	w15, [x15, x16]
   14858:	ldr	w16, [x6]
   1485c:	add	w15, w16, w15
   14860:	madd	x16, x12, x25, x21
   14864:	add	w19, w9, w3
   14868:	add	x14, x16, w14, uxtw #2
   1486c:	add	w16, w19, #0x1
   14870:	umaddl	x19, w16, w28, x21
   14874:	ldr	w14, [x14, x26]
   14878:	add	x19, x19, x22
   1487c:	ldr	w24, [x19]
   14880:	add	w15, w18, w15
   14884:	add	w14, w15, w14
   14888:	cmp	w14, w24
   1488c:	b.cs	148b4 <lzma_mode_is_supported@@XZ_5.0+0x2bf0>  // b.hs, b.nlast
   14890:	madd	x15, x16, x28, x21
   14894:	mov	w16, #0xefc                 	// #3836
   14898:	movk	w16, #0x1, lsl #16
   1489c:	str	w14, [x19]
   148a0:	str	w23, [x15, x30]
   148a4:	str	w0, [x15, x16]
   148a8:	mov	w16, #0xee8                 	// #3816
   148ac:	movk	w16, #0x1, lsl #16
   148b0:	strb	wzr, [x15, x16]
   148b4:	add	w8, w8, #0x2
   148b8:	cmp	w8, w13
   148bc:	b.eq	148cc <lzma_mode_is_supported@@XZ_5.0+0x2c08>  // b.none
   148c0:	add	w3, w3, #0x1
   148c4:	add	w10, w10, #0x1
   148c8:	b	147f4 <lzma_mode_is_supported@@XZ_5.0+0x2b30>
   148cc:	ldur	w8, [x29, #-104]
   148d0:	ldur	w11, [x29, #-64]
   148d4:	add	w9, w5, w3
   148d8:	add	w4, w9, #0x1
   148dc:	add	w8, w8, w5
   148e0:	add	w8, w8, w3
   148e4:	cmp	w8, w11
   148e8:	csel	w11, w11, w8, hi  // hi = pmore
   148ec:	ldur	w8, [x29, #-36]
   148f0:	cmp	w4, w11
   148f4:	mov	w6, w4
   148f8:	add	w8, w8, w3
   148fc:	b.cs	1494c <lzma_mode_is_supported@@XZ_5.0+0x2c88>  // b.hs, b.nlast
   14900:	neg	x15, x2
   14904:	mov	w13, w10
   14908:	mov	w11, w11
   1490c:	sub	x13, x13, #0x1
   14910:	add	x15, x1, x15
   14914:	mov	w6, w4
   14918:	add	x0, x15, x13
   1491c:	ldrb	w16, [x1, x13]
   14920:	ldurb	w0, [x0, #-1]
   14924:	cmp	w16, w0
   14928:	b.ne	14948 <lzma_mode_is_supported@@XZ_5.0+0x2c84>  // b.any
   1492c:	add	x16, x13, #0x2
   14930:	add	w6, w6, #0x1
   14934:	add	x13, x13, #0x1
   14938:	cmp	x16, x11
   1493c:	add	w10, w10, #0x1
   14940:	b.cc	14918 <lzma_mode_is_supported@@XZ_5.0+0x2c54>  // b.lo, b.ul, b.last
   14944:	b	1494c <lzma_mode_is_supported@@XZ_5.0+0x2c88>
   14948:	mov	w6, w10
   1494c:	sub	w13, w6, w5
   14950:	mvn	w10, w3
   14954:	add	w30, w10, w13
   14958:	cmp	w30, #0x2
   1495c:	add	w8, w8, #0x1
   14960:	stur	w8, [x29, #-36]
   14964:	b.cc	1476c <lzma_mode_is_supported@@XZ_5.0+0x2aa8>  // b.lo, b.ul, b.last
   14968:	ldur	x8, [x29, #-48]
   1496c:	ldur	x19, [x29, #-80]
   14970:	ldur	w11, [x29, #-136]
   14974:	mov	w9, w9
   14978:	sub	x8, x8, x2
   1497c:	ldur	x15, [x29, #-144]
   14980:	ldrb	w8, [x8, x9]
   14984:	ldrb	w0, [x19, x9]
   14988:	ldur	x9, [x29, #-72]
   1498c:	add	w11, w11, w5
   14990:	add	w11, w11, w3
   14994:	add	x15, x21, x15, lsl #5
   14998:	and	w9, w11, w9
   1499c:	add	x15, x15, w9, uxtw #1
   149a0:	mov	w7, #0x6b9c                	// #27548
   149a4:	ldrh	w15, [x15, x7]
   149a8:	ldur	w7, [x29, #-116]
   149ac:	add	w16, w5, w3
   149b0:	sub	w16, w16, #0x1
   149b4:	adrp	x24, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   149b8:	ldrb	w16, [x19, w16, uxtw]
   149bc:	and	w11, w11, w7
   149c0:	ldur	x7, [x29, #-128]
   149c4:	ldr	x24, [x24, #3960]
   149c8:	lsr	x15, x15, #4
   149cc:	mov	w10, wzr
   149d0:	lsl	w11, w11, w7
   149d4:	ldrb	w15, [x24, x15]
   149d8:	orr	w0, w0, #0x100
   149dc:	mov	w20, #0x600                 	// #1536
   149e0:	stur	w15, [x29, #-112]
   149e4:	ldur	w15, [x29, #-132]
   149e8:	lsr	w15, w16, w15
   149ec:	add	w11, w15, w11
   149f0:	mov	w15, #0x100                 	// #256
   149f4:	lsl	w8, w8, #1
   149f8:	add	w16, w15, w0, lsr #8
   149fc:	and	w19, w8, w15
   14a00:	madd	x7, x11, x20, x21
   14a04:	add	w16, w16, w19
   14a08:	add	x16, x7, w16, uxtw #1
   14a0c:	ldrh	w16, [x16, #2972]
   14a10:	ubfx	w7, w0, #7, #1
   14a14:	neg	w7, w7
   14a18:	and	w7, w7, #0x7f0
   14a1c:	eor	w16, w7, w16
   14a20:	lsr	x16, x16, #4
   14a24:	ldrb	w16, [x24, x16]
   14a28:	cmp	w0, #0x8, lsl #12
   14a2c:	lsl	w0, w0, #1
   14a30:	eor	w7, w0, w8
   14a34:	add	w10, w10, w16
   14a38:	bic	w15, w15, w7
   14a3c:	b.cc	149f4 <lzma_mode_is_supported@@XZ_5.0+0x2d30>  // b.lo, b.ul, b.last
   14a40:	add	w8, w9, #0x1
   14a44:	ldur	x9, [x29, #-56]
   14a48:	ldur	w11, [x29, #-60]
   14a4c:	ldur	x15, [x29, #-72]
   14a50:	ldrh	w9, [x9]
   14a54:	add	w11, w11, w5
   14a58:	and	w0, w8, w15
   14a5c:	add	w8, w11, w3
   14a60:	add	x11, x21, w0, uxtw #1
   14a64:	mov	w15, #0x6c1c                	// #27676
   14a68:	ldrh	w15, [x11, x15]
   14a6c:	lsr	x9, x9, #4
   14a70:	eor	x9, x9, #0x7f
   14a74:	ldrb	w11, [x24, x9]
   14a78:	lsr	x9, x15, #4
   14a7c:	eor	x9, x9, #0x7f
   14a80:	ldur	x15, [x29, #-88]
   14a84:	ldrb	w9, [x24, x9]
   14a88:	add	w5, w8, #0x2
   14a8c:	add	w8, w30, w5
   14a90:	cmp	w15, w8
   14a94:	b.cs	14abc <lzma_mode_is_supported@@XZ_5.0+0x2df8>  // b.hs, b.nlast
   14a98:	mov	w15, w15
   14a9c:	mov	w30, w8
   14aa0:	sub	x16, x30, x15
   14aa4:	cmp	x16, #0x2
   14aa8:	b.cs	14acc <lzma_mode_is_supported@@XZ_5.0+0x2e08>  // b.hs, b.nlast
   14aac:	ldur	w7, [x29, #-92]
   14ab0:	mov	x19, x15
   14ab4:	mov	w20, #0x1e                  	// #30
   14ab8:	b	14b08 <lzma_mode_is_supported@@XZ_5.0+0x2e44>
   14abc:	ldur	w7, [x29, #-92]
   14ac0:	mov	w30, w8
   14ac4:	mov	w20, #0x1e                  	// #30
   14ac8:	b	14b28 <lzma_mode_is_supported@@XZ_5.0+0x2e64>
   14acc:	ldr	x7, [sp, #144]
   14ad0:	and	x20, x16, #0xfffffffffffffffe
   14ad4:	add	x19, x20, x15
   14ad8:	madd	x24, x15, x28, x7
   14adc:	add	w7, w23, w6
   14ae0:	sub	x15, x7, x15
   14ae4:	and	x15, x15, #0xfffffffffffffffe
   14ae8:	stur	w27, [x24, #-44]
   14aec:	str	w27, [x24], #88
   14af0:	subs	x15, x15, #0x2
   14af4:	b.ne	14ae8 <lzma_mode_is_supported@@XZ_5.0+0x2e24>  // b.any
   14af8:	ldur	w7, [x29, #-92]
   14afc:	cmp	x16, x20
   14b00:	mov	w20, #0x1e                  	// #30
   14b04:	b.eq	14b24 <lzma_mode_is_supported@@XZ_5.0+0x2e60>  // b.none
   14b08:	add	w15, w23, w6
   14b0c:	sub	x16, x15, x19
   14b10:	ldur	x15, [x29, #-160]
   14b14:	madd	x15, x19, x28, x15
   14b18:	subs	x16, x16, #0x1
   14b1c:	str	w27, [x15], #44
   14b20:	b.ne	14b18 <lzma_mode_is_supported@@XZ_5.0+0x2e54>  // b.any
   14b24:	stur	x8, [x29, #-88]
   14b28:	ldur	w15, [x29, #-112]
   14b2c:	sub	w8, w13, w3
   14b30:	madd	x13, x0, x25, x21
   14b34:	sub	w8, w8, #0x3
   14b38:	add	w14, w14, w15
   14b3c:	ldur	x15, [x29, #-56]
   14b40:	add	w10, w14, w10
   14b44:	add	x16, x21, x0, lsl #1
   14b48:	mov	w0, #0x6dfc                	// #28156
   14b4c:	ldrh	w15, [x15, #24]
   14b50:	add	x8, x13, w8, uxtw #2
   14b54:	add	w9, w10, w9
   14b58:	mov	w10, #0xbe4c                	// #48716
   14b5c:	adrp	x13, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   14b60:	ldrh	w16, [x16, x0]
   14b64:	ldr	w10, [x8, x10]
   14b68:	ldr	x13, [x13, #3960]
   14b6c:	lsr	x8, x15, #4
   14b70:	add	w9, w9, w11
   14b74:	madd	x14, x30, x28, x21
   14b78:	ldrb	w11, [x13, x8]
   14b7c:	lsr	x8, x16, #4
   14b80:	eor	x8, x8, #0x7f
   14b84:	ldrb	w13, [x13, x8]
   14b88:	add	x8, x14, x22
   14b8c:	ldr	w14, [x8]
   14b90:	add	w9, w9, w10
   14b94:	add	w9, w9, w11
   14b98:	add	w9, w9, w13
   14b9c:	cmp	w9, w14
   14ba0:	b.cs	14770 <lzma_mode_is_supported@@XZ_5.0+0x2aac>  // b.hs, b.nlast
   14ba4:	str	w9, [x8]
   14ba8:	madd	x8, x30, x28, x21
   14bac:	mov	w30, #0xef8                 	// #3832
   14bb0:	mov	w10, #0xefc                 	// #3836
   14bb4:	movk	w30, #0x1, lsl #16
   14bb8:	movk	w10, #0x1, lsl #16
   14bbc:	str	w5, [x8, x30]
   14bc0:	str	wzr, [x8, x10]
   14bc4:	mov	w10, #0xee8                 	// #3816
   14bc8:	movk	w10, #0x1, lsl #16
   14bcc:	mov	w11, #0x101                 	// #257
   14bd0:	strh	w11, [x8, x10]
   14bd4:	mov	w10, #0xeec                 	// #3820
   14bd8:	movk	w10, #0x1, lsl #16
   14bdc:	str	w23, [x8, x10]
   14be0:	mov	w10, #0xef0                 	// #3824
   14be4:	add	w9, w2, #0x4
   14be8:	movk	w10, #0x1, lsl #16
   14bec:	str	w9, [x8, x10]
   14bf0:	add	w17, w17, #0x1
   14bf4:	cmp	w17, w7
   14bf8:	b.ne	14784 <lzma_mode_is_supported@@XZ_5.0+0x2ac0>  // b.any
   14bfc:	b	1398c <lzma_mode_is_supported@@XZ_5.0+0x1cc8>
   14c00:	mov	w11, w0
   14c04:	b	14c64 <lzma_mode_is_supported@@XZ_5.0+0x2fa0>
   14c08:	ldr	x8, [sp, #144]
   14c0c:	and	x2, x1, #0xfffffffffffffffe
   14c10:	add	w4, w10, w23
   14c14:	madd	x3, x15, x28, x8
   14c18:	add	x8, x2, x15
   14c1c:	sub	x15, x4, x15
   14c20:	and	x15, x15, #0xfffffffffffffffe
   14c24:	stur	w27, [x3, #-44]
   14c28:	str	w27, [x3], #88
   14c2c:	subs	x15, x15, #0x2
   14c30:	b.ne	14c24 <lzma_mode_is_supported@@XZ_5.0+0x2f60>  // b.any
   14c34:	ldur	x4, [x29, #-80]
   14c38:	cmp	x1, x2
   14c3c:	b.eq	14c5c <lzma_mode_is_supported@@XZ_5.0+0x2f98>  // b.none
   14c40:	ldur	x1, [x29, #-160]
   14c44:	add	w15, w10, w23
   14c48:	sub	x15, x15, x8
   14c4c:	madd	x8, x8, x28, x1
   14c50:	subs	x15, x15, #0x1
   14c54:	str	w27, [x8], #44
   14c58:	b.ne	14c50 <lzma_mode_is_supported@@XZ_5.0+0x2f8c>  // b.any
   14c5c:	mov	w3, w0
   14c60:	sub	x1, x29, #0x20
   14c64:	add	w9, w14, w9
   14c68:	add	x14, x21, x16, lsl #1
   14c6c:	add	x15, x21, x16, lsl #5
   14c70:	mov	w16, #0x6d34                	// #27956
   14c74:	sub	w8, w10, #0x3
   14c78:	madd	x10, x13, x25, x21
   14c7c:	ldrh	w14, [x14, x16]
   14c80:	add	x13, x15, x13, lsl #1
   14c84:	mov	w15, #0x6d7c                	// #28028
   14c88:	ldrh	w13, [x13, x15]
   14c8c:	add	x8, x10, w8, uxtw #2
   14c90:	mov	w15, #0xbe4c                	// #48716
   14c94:	ldr	w15, [x8, x15]
   14c98:	lsr	x8, x14, #4
   14c9c:	ldrb	w14, [x5, x8]
   14ca0:	lsr	x8, x13, #4
   14ca4:	madd	x10, x11, x28, x21
   14ca8:	eor	x8, x8, #0x7f
   14cac:	ldrb	w13, [x5, x8]
   14cb0:	add	x8, x10, x22
   14cb4:	add	w9, w9, w17
   14cb8:	ldr	w10, [x8]
   14cbc:	ldur	w0, [x29, #-36]
   14cc0:	add	w9, w9, w15
   14cc4:	add	w9, w9, w14
   14cc8:	add	w9, w9, w13
   14ccc:	cmp	w9, w10
   14cd0:	b.cs	13fc8 <lzma_mode_is_supported@@XZ_5.0+0x2304>  // b.hs, b.nlast
   14cd4:	str	w9, [x8]
   14cd8:	ldr	x9, [sp, #120]
   14cdc:	madd	x8, x11, x28, x21
   14ce0:	mov	w10, #0xee8                 	// #3816
   14ce4:	movk	w10, #0x1, lsl #16
   14ce8:	str	w9, [x8, x30]
   14cec:	mov	w9, #0xefc                 	// #3836
   14cf0:	movk	w9, #0x1, lsl #16
   14cf4:	str	wzr, [x8, x9]
   14cf8:	mov	w9, #0x1                   	// #1
   14cfc:	strh	w9, [x8, x10]
   14d00:	b	13fc8 <lzma_mode_is_supported@@XZ_5.0+0x2304>
   14d04:	add	x3, x21, x3, lsl #5
   14d08:	ldrh	w5, [x12]
   14d0c:	mov	w6, #0x6d7c                	// #28028
   14d10:	add	x3, x3, x14, lsl #1
   14d14:	adrp	x7, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   14d18:	ldrh	w6, [x3, x6]
   14d1c:	mov	w3, #0x440                 	// #1088
   14d20:	ldr	x7, [x7, #3960]
   14d24:	mul	x3, x14, x3
   14d28:	add	x3, x3, w4, uxtw #2
   14d2c:	mov	w4, #0xbe4c                	// #48716
   14d30:	add	x3, x3, x21
   14d34:	lsr	x5, x5, #4
   14d38:	add	x3, x3, x4
   14d3c:	ldrb	w4, [x7, x5]
   14d40:	lsr	x5, x6, #4
   14d44:	eor	x5, x5, #0x7f
   14d48:	ldrb	w5, [x7, x5]
   14d4c:	mov	w6, #0x2c                  	// #44
   14d50:	umaddl	x6, w8, w6, x2
   14d54:	add	w4, w18, w4
   14d58:	add	w4, w4, w5
   14d5c:	add	x5, x21, x6
   14d60:	mov	w6, w8
   14d64:	b	14d7c <lzma_mode_is_supported@@XZ_5.0+0x30b8>
   14d68:	sub	w6, w6, #0x1
   14d6c:	sub	x3, x3, #0x4
   14d70:	cmp	w6, #0x1
   14d74:	sub	x5, x5, #0x2c
   14d78:	b.ls	13734 <lzma_mode_is_supported@@XZ_5.0+0x1a70>  // b.plast
   14d7c:	ldr	w7, [x3]
   14d80:	ldr	w19, [x5]
   14d84:	add	w7, w4, w7
   14d88:	cmp	w7, w19
   14d8c:	b.cs	14d68 <lzma_mode_is_supported@@XZ_5.0+0x30a4>  // b.hs, b.nlast
   14d90:	stp	wzr, wzr, [x5, #4]
   14d94:	str	w7, [x5]
   14d98:	sturb	wzr, [x5, #-12]
   14d9c:	b	14d68 <lzma_mode_is_supported@@XZ_5.0+0x30a4>
   14da0:	ldrh	w4, [x12]
   14da4:	adrp	x5, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
   14da8:	ldrh	w1, [x13]
   14dac:	ldr	d0, [x5, #1632]
   14db0:	mov	w5, #0x440                 	// #1088
   14db4:	mul	x5, x14, x5
   14db8:	add	x3, x5, w3, uxtw #2
   14dbc:	mov	w5, #0xbe4c                	// #48716
   14dc0:	add	x3, x3, x21
   14dc4:	lsr	x4, x4, #4
   14dc8:	lsr	x6, x1, #4
   14dcc:	add	x1, x3, x5
   14dd0:	eor	x3, x4, #0x7f
   14dd4:	adrp	x4, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   14dd8:	ldr	x4, [x4, #3960]
   14ddc:	mov	w5, #0x2c                  	// #44
   14de0:	umaddl	x5, w10, w5, x2
   14de4:	ldrb	w3, [x4, x3]
   14de8:	ldrb	w4, [x4, x6]
   14dec:	add	w3, w18, w3
   14df0:	add	w3, w3, w4
   14df4:	add	x4, x21, x5
   14df8:	b	14e10 <lzma_mode_is_supported@@XZ_5.0+0x314c>
   14dfc:	sub	w10, w10, #0x1
   14e00:	sub	x1, x1, #0x4
   14e04:	cmp	w10, #0x1
   14e08:	sub	x4, x4, #0x2c
   14e0c:	b.ls	13740 <lzma_mode_is_supported@@XZ_5.0+0x1a7c>  // b.plast
   14e10:	ldr	w5, [x1]
   14e14:	ldr	w6, [x4]
   14e18:	add	w5, w3, w5
   14e1c:	cmp	w5, w6
   14e20:	b.cs	14dfc <lzma_mode_is_supported@@XZ_5.0+0x3138>  // b.hs, b.nlast
   14e24:	str	w5, [x4]
   14e28:	stur	d0, [x4, #4]
   14e2c:	sturb	wzr, [x4, #-12]
   14e30:	b	14dfc <lzma_mode_is_supported@@XZ_5.0+0x3138>
   14e34:	adrp	x4, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
   14e38:	ldr	d0, [x4, #1552]
   14e3c:	mov	w4, #0x440                 	// #1088
   14e40:	mul	x4, x14, x4
   14e44:	ldrh	w3, [x12]
   14e48:	add	x10, x4, w10, uxtw #2
   14e4c:	ldrh	w1, [x13]
   14e50:	mov	w4, #0xbe4c                	// #48716
   14e54:	add	x10, x10, x21
   14e58:	adrp	x5, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   14e5c:	add	x10, x10, x4
   14e60:	ldrh	w4, [x15]
   14e64:	ldr	x5, [x5, #3960]
   14e68:	lsr	x3, x3, #4
   14e6c:	lsr	x1, x1, #4
   14e70:	eor	x3, x3, #0x7f
   14e74:	eor	x1, x1, #0x7f
   14e78:	ldrb	w3, [x5, x3]
   14e7c:	ldrb	w1, [x5, x1]
   14e80:	lsr	x4, x4, #4
   14e84:	ldrb	w4, [x5, x4]
   14e88:	add	w3, w18, w3
   14e8c:	add	w1, w3, w1
   14e90:	mov	w3, #0x2c                  	// #44
   14e94:	umaddl	x3, w11, w3, x2
   14e98:	add	w1, w1, w4
   14e9c:	add	x3, x21, x3
   14ea0:	b	14eb8 <lzma_mode_is_supported@@XZ_5.0+0x31f4>
   14ea4:	sub	w11, w11, #0x1
   14ea8:	sub	x10, x10, #0x4
   14eac:	cmp	w11, #0x1
   14eb0:	sub	x3, x3, #0x2c
   14eb4:	b.ls	13748 <lzma_mode_is_supported@@XZ_5.0+0x1a84>  // b.plast
   14eb8:	ldr	w4, [x10]
   14ebc:	ldr	w5, [x3]
   14ec0:	add	w4, w1, w4
   14ec4:	cmp	w4, w5
   14ec8:	b.cs	14ea4 <lzma_mode_is_supported@@XZ_5.0+0x31e0>  // b.hs, b.nlast
   14ecc:	str	w4, [x3]
   14ed0:	stur	d0, [x3, #4]
   14ed4:	sturb	wzr, [x3, #-12]
   14ed8:	b	14ea4 <lzma_mode_is_supported@@XZ_5.0+0x31e0>
   14edc:	ldrh	w12, [x12]
   14ee0:	ldrh	w11, [x13]
   14ee4:	ldrh	w13, [x15]
   14ee8:	adrp	x1, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xd33c>
   14eec:	lsr	x12, x12, #4
   14ef0:	lsr	x11, x11, #4
   14ef4:	eor	x12, x12, #0x7f
   14ef8:	lsr	x13, x13, #4
   14efc:	eor	x11, x11, #0x7f
   14f00:	ldrb	w12, [x3, x12]
   14f04:	eor	x13, x13, #0x7f
   14f08:	ldrb	w11, [x3, x11]
   14f0c:	ldr	d0, [x1, #1544]
   14f10:	mov	w1, #0x440                 	// #1088
   14f14:	ldrb	w13, [x3, x13]
   14f18:	mul	x1, x14, x1
   14f1c:	mov	w15, #0x2c                  	// #44
   14f20:	add	x10, x1, w10, uxtw #2
   14f24:	add	w12, w18, w12
   14f28:	umaddl	x15, w9, w15, x2
   14f2c:	mov	w1, #0xbe4c                	// #48716
   14f30:	add	x10, x10, x21
   14f34:	add	w11, w12, w11
   14f38:	add	x10, x10, x1
   14f3c:	add	w11, w11, w13
   14f40:	add	x12, x21, x15
   14f44:	b	14f5c <lzma_mode_is_supported@@XZ_5.0+0x3298>
   14f48:	sub	w9, w9, #0x1
   14f4c:	sub	x10, x10, #0x4
   14f50:	cmp	w9, #0x1
   14f54:	sub	x12, x12, #0x2c
   14f58:	b.ls	13758 <lzma_mode_is_supported@@XZ_5.0+0x1a94>  // b.plast
   14f5c:	ldr	w13, [x10]
   14f60:	ldr	w15, [x12]
   14f64:	add	w13, w11, w13
   14f68:	cmp	w13, w15
   14f6c:	b.cs	14f48 <lzma_mode_is_supported@@XZ_5.0+0x3284>  // b.hs, b.nlast
   14f70:	str	w13, [x12]
   14f74:	stur	d0, [x12, #4]
   14f78:	sturb	wzr, [x12, #-12]
   14f7c:	b	14f48 <lzma_mode_is_supported@@XZ_5.0+0x3284>
   14f80:	ldp	x4, x3, [sp]
   14f84:	mov	w8, #0x2c                  	// #44
   14f88:	mov	w9, #0xef8                 	// #3832
   14f8c:	mov	w10, #0xefc                 	// #3836
   14f90:	str	w23, [x4, #3148]
   14f94:	movk	w9, #0x1, lsl #16
   14f98:	movk	w10, #0x1, lsl #16
   14f9c:	umaddl	x11, w23, w8, x21
   14fa0:	ldr	w15, [x11, x9]
   14fa4:	ldr	w11, [x11, x10]
   14fa8:	ldr	x2, [sp, #16]
   14fac:	mov	w10, #0xee4                 	// #3812
   14fb0:	movk	w10, #0x1, lsl #16
   14fb4:	add	x12, x21, x10
   14fb8:	b	14fdc <lzma_mode_is_supported@@XZ_5.0+0x3318>
   14fbc:	madd	x15, x14, x8, x21
   14fc0:	ldr	w17, [x16]
   14fc4:	ldr	w15, [x15, x9]
   14fc8:	madd	x18, x14, x8, x21
   14fcc:	str	w11, [x16]
   14fd0:	mov	w11, w17
   14fd4:	str	w13, [x18, x9]
   14fd8:	cbz	w14, 15048 <lzma_mode_is_supported@@XZ_5.0+0x3384>
   14fdc:	umaddl	x14, w23, w8, x12
   14fe0:	ldrb	w17, [x14, #4]
   14fe4:	mov	w13, w23
   14fe8:	mov	w23, w15
   14fec:	mov	w14, w15
   14ff0:	umaddl	x15, w15, w8, x12
   14ff4:	add	x16, x15, #0x18
   14ff8:	cbz	w17, 14fbc <lzma_mode_is_supported@@XZ_5.0+0x32f8>
   14ffc:	add	x0, x21, x10
   15000:	mov	w18, w13
   15004:	mov	w17, #0xffffffff            	// #-1
   15008:	sub	w15, w14, #0x1
   1500c:	madd	x1, x14, x8, x0
   15010:	str	w17, [x16]
   15014:	strb	wzr, [x1, #4]
   15018:	str	w15, [x1, #20]
   1501c:	madd	x0, x18, x8, x0
   15020:	ldrb	w0, [x0, #5]
   15024:	cbz	w0, 14fc8 <lzma_mode_is_supported@@XZ_5.0+0x3304>
   15028:	add	x17, x21, x10
   1502c:	umaddl	x0, w15, w8, x17
   15030:	madd	x17, x18, x8, x17
   15034:	strb	wzr, [x0, #4]
   15038:	ldr	x17, [x17, #8]
   1503c:	stur	x17, [x0, #20]
   15040:	mov	w17, #0xffffffff            	// #-1
   15044:	b	14fc8 <lzma_mode_is_supported@@XZ_5.0+0x3304>
   15048:	ldr	w8, [x4, #3176]
   1504c:	ldr	w9, [x4, #3180]
   15050:	str	w8, [x4, #3152]
   15054:	str	w8, [x2]
   15058:	str	w9, [x3]
   1505c:	b	13470 <lzma_mode_is_supported@@XZ_5.0+0x17ac>
   15060:	stp	x29, x30, [sp, #-48]!
   15064:	stp	x20, x19, [sp, #32]
   15068:	ldr	x8, [x0]
   1506c:	mov	x19, x3
   15070:	mov	x20, x2
   15074:	str	x21, [sp, #16]
   15078:	mov	x29, sp
   1507c:	cbnz	x8, 150b4 <lzma_mode_is_supported@@XZ_5.0+0x33f0>
   15080:	mov	x21, x0
   15084:	mov	w0, #0x6ec0                	// #28352
   15088:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
   1508c:	str	x0, [x21]
   15090:	cbz	x0, 150e0 <lzma_mode_is_supported@@XZ_5.0+0x341c>
   15094:	adrp	x8, 15000 <lzma_mode_is_supported@@XZ_5.0+0x333c>
   15098:	adrp	x9, 18000 <lzma_mode_is_supported@@XZ_5.0+0x633c>
   1509c:	adrp	x10, 18000 <lzma_mode_is_supported@@XZ_5.0+0x633c>
   150a0:	add	x8, x8, #0xf4
   150a4:	add	x9, x9, #0x4
   150a8:	add	x10, x10, #0x7a4
   150ac:	stp	x8, x9, [x21, #8]
   150b0:	str	x10, [x21, #24]
   150b4:	ldr	w8, [x20]
   150b8:	mov	w0, wzr
   150bc:	str	x8, [x19]
   150c0:	ldr	x8, [x20, #8]
   150c4:	str	x8, [x19, #8]
   150c8:	ldr	w8, [x20, #16]
   150cc:	str	x8, [x19, #16]
   150d0:	ldp	x20, x19, [sp, #32]
   150d4:	ldr	x21, [sp, #16]
   150d8:	ldp	x29, x30, [sp], #48
   150dc:	ret
   150e0:	mov	w0, #0x5                   	// #5
   150e4:	ldp	x20, x19, [sp, #32]
   150e8:	ldr	x21, [sp, #16]
   150ec:	ldp	x29, x30, [sp], #48
   150f0:	ret
   150f4:	sub	sp, sp, #0x120
   150f8:	stp	x29, x30, [sp, #192]
   150fc:	stp	x28, x27, [sp, #208]
   15100:	stp	x26, x25, [sp, #224]
   15104:	stp	x24, x23, [sp, #240]
   15108:	stp	x22, x21, [sp, #256]
   1510c:	stp	x20, x19, [sp, #272]
   15110:	mov	w8, #0x6e74                	// #28276
   15114:	ldr	w8, [x0, x8]
   15118:	mov	w9, #0x6664                	// #26212
   1511c:	add	x29, sp, #0xc0
   15120:	mov	x6, x2
   15124:	add	x9, x0, x9
   15128:	stp	x9, x0, [x29, #-24]
   1512c:	cbz	w8, 1519c <lzma_mode_is_supported@@XZ_5.0+0x34d8>
   15130:	ldr	x10, [x3]
   15134:	ldur	x18, [x29, #-24]
   15138:	mov	x9, xzr
   1513c:	sub	x11, x8, #0x5
   15140:	add	x12, x6, x10
   15144:	sub	x13, x10, x4
   15148:	mov	w14, #0xffffffff            	// #-1
   1514c:	b	15180 <lzma_mode_is_supported@@XZ_5.0+0x34bc>
   15150:	ldr	w15, [x18, #2060]
   15154:	add	x16, x10, x9
   15158:	add	x9, x9, #0x1
   1515c:	add	w17, w8, w14
   15160:	add	x16, x16, #0x1
   15164:	cmp	w8, w9
   15168:	bfi	w22, w15, #8, #24
   1516c:	sub	x14, x14, #0x1
   15170:	str	w22, [x18, #2060]
   15174:	str	x16, [x3]
   15178:	str	w17, [x18, #2064]
   1517c:	b.eq	151b8 <lzma_mode_is_supported@@XZ_5.0+0x34f4>  // b.none
   15180:	cmn	x13, x9
   15184:	b.eq	151b0 <lzma_mode_is_supported@@XZ_5.0+0x34ec>  // b.none
   15188:	ldrb	w22, [x12, x9]
   1518c:	cmp	w11, w9
   15190:	b.ne	15150 <lzma_mode_is_supported@@XZ_5.0+0x348c>  // b.any
   15194:	cbz	w22, 15150 <lzma_mode_is_supported@@XZ_5.0+0x348c>
   15198:	b	17f44 <lzma_mode_is_supported@@XZ_5.0+0x6280>
   1519c:	ldur	x8, [x29, #-24]
   151a0:	ldr	x28, [x3]
   151a4:	str	x3, [sp, #24]
   151a8:	ldr	w22, [x8, #2060]
   151ac:	b	151c0 <lzma_mode_is_supported@@XZ_5.0+0x34fc>
   151b0:	mov	w0, wzr
   151b4:	b	17f74 <lzma_mode_is_supported@@XZ_5.0+0x62b0>
   151b8:	add	x28, x10, x9
   151bc:	str	x3, [sp, #24]
   151c0:	ldur	x14, [x29, #-24]
   151c4:	ldp	x13, x16, [x1, #8]
   151c8:	ldr	x9, [x1, #24]
   151cc:	mov	x11, #0xffffffffffffffff    	// #-1
   151d0:	ldr	w8, [x14, #2076]
   151d4:	ldr	w27, [x14, #2056]
   151d8:	ldr	w15, [x14, #2068]
   151dc:	ldr	w3, [x14, #2072]
   151e0:	stur	w8, [x29, #-28]
   151e4:	ldr	w8, [x14, #2084]
   151e8:	ldr	w17, [x14, #2080]
   151ec:	ldr	w19, [x14, #2124]
   151f0:	ldr	w5, [x14, #2128]
   151f4:	stur	w8, [x29, #-36]
   151f8:	ldur	x8, [x29, #-16]
   151fc:	ldr	w26, [x14, #2132]
   15200:	ldr	w2, [x14, #2136]
   15204:	sub	x12, x9, x13
   15208:	ldr	x23, [x8, #28312]
   1520c:	ldr	x18, [x8, #28328]
   15210:	ldr	w8, [x14, #2108]
   15214:	mov	x21, x13
   15218:	cmp	x23, x12
   1521c:	ccmp	x23, x11, #0x4, cc  // cc = lo, ul, last
   15220:	add	x10, x23, x13
   15224:	csel	x7, x10, x9, ne  // ne = any
   15228:	cmp	w8, #0x46
   1522c:	add	x9, x14, #0x83c
   15230:	stp	x9, x13, [sp]
   15234:	str	x1, [sp, #16]
   15238:	b.hi	1528c <lzma_mode_is_supported@@XZ_5.0+0x35c8>  // b.pmore
   1523c:	ldur	x9, [x29, #-24]
   15240:	ldr	x30, [x1]
   15244:	ldr	x24, [x1, #32]
   15248:	ldr	w12, [x9, #2088]
   1524c:	ldr	w10, [x9, #2096]
   15250:	ldr	w9, [x9, #2092]
   15254:	stp	x9, x10, [sp, #88]
   15258:	adrp	x10, 21000 <lzma_mode_is_supported@@XZ_5.0+0xf33c>
   1525c:	add	x10, x10, #0x668
   15260:	adr	x9, 152e0 <lzma_mode_is_supported@@XZ_5.0+0x361c>
   15264:	ldrh	w11, [x10, x8, lsl #1]
   15268:	add	x9, x9, x11, lsl #2
   1526c:	stur	w12, [x29, #-32]
   15270:	and	w8, w12, w13
   15274:	stp	x6, x4, [x29, #-80]
   15278:	str	x7, [sp, #32]
   1527c:	stur	x23, [x29, #-88]
   15280:	stp	x24, x30, [sp, #40]
   15284:	br	x9
   15288:	mov	x21, x7
   1528c:	mov	w9, w22
   15290:	lsr	w8, w27, #24
   15294:	cbnz	w8, 152b4 <lzma_mode_is_supported@@XZ_5.0+0x35f0>
   15298:	cmp	x28, x4
   1529c:	b.eq	152c8 <lzma_mode_is_supported@@XZ_5.0+0x3604>  // b.none
   152a0:	ldrb	w8, [x6, x28]
   152a4:	add	x28, x28, #0x1
   152a8:	lsl	w27, w27, #8
   152ac:	bfi	w8, w9, #8, #24
   152b0:	mov	w9, w8
   152b4:	ldr	x10, [sp]
   152b8:	mov	w0, wzr
   152bc:	mov	w8, #0x1                   	// #1
   152c0:	str	w8, [x10]
   152c4:	b	171dc <lzma_mode_is_supported@@XZ_5.0+0x5518>
   152c8:	ldr	x8, [sp]
   152cc:	mov	w0, wzr
   152d0:	str	wzr, [x8]
   152d4:	b	17eb0 <lzma_mode_is_supported@@XZ_5.0+0x61ec>
   152d8:	ldur	w8, [x29, #-32]
   152dc:	and	w8, w8, w21
   152e0:	cmn	x23, #0x1
   152e4:	b.eq	152f0 <lzma_mode_is_supported@@XZ_5.0+0x362c>  // b.none
   152e8:	cmp	x21, x7
   152ec:	b.eq	15288 <lzma_mode_is_supported@@XZ_5.0+0x35c4>  // b.none
   152f0:	lsr	w9, w27, #24
   152f4:	cbnz	w9, 15314 <lzma_mode_is_supported@@XZ_5.0+0x3650>
   152f8:	cmp	x28, x4
   152fc:	b.eq	17e9c <lzma_mode_is_supported@@XZ_5.0+0x61d8>  // b.none
   15300:	ldrb	w9, [x6, x28]
   15304:	lsl	w11, w27, #8
   15308:	add	x28, x28, #0x1
   1530c:	bfi	w9, w22, #8, #24
   15310:	b	1531c <lzma_mode_is_supported@@XZ_5.0+0x3658>
   15314:	mov	w11, w27
   15318:	mov	w9, w22
   1531c:	ldur	x12, [x29, #-16]
   15320:	mov	w10, w15
   15324:	lsr	w13, w11, #11
   15328:	add	x10, x12, x10, lsl #5
   1532c:	add	x10, x10, w8, uxtw #1
   15330:	add	x10, x10, #0x6, lsl #12
   15334:	ldrh	w12, [x10]
   15338:	mul	w27, w13, w12
   1533c:	subs	w22, w9, w27
   15340:	b.cs	15780 <lzma_mode_is_supported@@XZ_5.0+0x3abc>  // b.hs, b.nlast
   15344:	mov	w8, #0x800                 	// #2048
   15348:	cmp	x21, #0x0
   1534c:	sub	w8, w8, w12
   15350:	add	w8, w12, w8, lsr #5
   15354:	csel	x11, x24, xzr, eq  // eq = none
   15358:	add	x11, x21, x11
   1535c:	strh	w8, [x10]
   15360:	add	x8, x11, x30
   15364:	ldp	x12, x10, [sp, #88]
   15368:	ldurb	w8, [x8, #-1]
   1536c:	mov	w11, #0x8                   	// #8
   15370:	cmp	w15, #0x6
   15374:	and	x10, x21, x10
   15378:	sub	w11, w11, w12
   1537c:	lsr	w8, w8, w11
   15380:	lsl	x10, x10, x12
   15384:	add	x8, x10, x8
   15388:	ldur	x10, [x29, #-16]
   1538c:	mov	w11, #0x600                 	// #1536
   15390:	madd	x18, x8, x11, x10
   15394:	b.hi	171e4 <lzma_mode_is_supported@@XZ_5.0+0x5520>  // b.pmore
   15398:	mov	w19, #0x1                   	// #1
   1539c:	mov	w22, w9
   153a0:	lsr	w8, w27, #24
   153a4:	cbnz	w8, 153c4 <lzma_mode_is_supported@@XZ_5.0+0x3700>
   153a8:	cmp	x28, x4
   153ac:	b.eq	17b80 <lzma_mode_is_supported@@XZ_5.0+0x5ebc>  // b.none
   153b0:	ldrb	w8, [x6, x28]
   153b4:	lsl	w9, w27, #8
   153b8:	add	x28, x28, #0x1
   153bc:	bfi	w8, w22, #8, #24
   153c0:	b	153cc <lzma_mode_is_supported@@XZ_5.0+0x3708>
   153c4:	mov	w9, w27
   153c8:	mov	w8, w22
   153cc:	ldrh	w11, [x18, w19, uxtw #1]
   153d0:	lsr	w10, w9, #11
   153d4:	mul	w27, w10, w11
   153d8:	subs	w22, w8, w27
   153dc:	mov	w10, w19
   153e0:	b.cs	15420 <lzma_mode_is_supported@@XZ_5.0+0x375c>  // b.hs, b.nlast
   153e4:	mov	w9, #0x800                 	// #2048
   153e8:	sub	w9, w9, w11
   153ec:	add	w9, w11, w9, lsr #5
   153f0:	lsl	w19, w19, #1
   153f4:	strh	w9, [x18, x10, lsl #1]
   153f8:	mov	w22, w8
   153fc:	lsr	w8, w27, #24
   15400:	cbnz	w8, 15440 <lzma_mode_is_supported@@XZ_5.0+0x377c>
   15404:	cmp	x28, x4
   15408:	b.eq	17b8c <lzma_mode_is_supported@@XZ_5.0+0x5ec8>  // b.none
   1540c:	ldrb	w8, [x6, x28]
   15410:	lsl	w9, w27, #8
   15414:	add	x28, x28, #0x1
   15418:	bfi	w8, w22, #8, #24
   1541c:	b	15448 <lzma_mode_is_supported@@XZ_5.0+0x3784>
   15420:	sub	w27, w9, w27
   15424:	mov	w9, #0x1                   	// #1
   15428:	bfi	w9, w19, #1, #31
   1542c:	sub	w8, w11, w11, lsr #5
   15430:	mov	w19, w9
   15434:	strh	w8, [x18, x10, lsl #1]
   15438:	lsr	w8, w27, #24
   1543c:	cbz	w8, 15404 <lzma_mode_is_supported@@XZ_5.0+0x3740>
   15440:	mov	w9, w27
   15444:	mov	w8, w22
   15448:	ldrh	w11, [x18, w19, uxtw #1]
   1544c:	lsr	w10, w9, #11
   15450:	mul	w27, w10, w11
   15454:	subs	w22, w8, w27
   15458:	mov	w10, w19
   1545c:	b.cs	1549c <lzma_mode_is_supported@@XZ_5.0+0x37d8>  // b.hs, b.nlast
   15460:	mov	w9, #0x800                 	// #2048
   15464:	sub	w9, w9, w11
   15468:	add	w9, w11, w9, lsr #5
   1546c:	lsl	w19, w19, #1
   15470:	strh	w9, [x18, x10, lsl #1]
   15474:	mov	w22, w8
   15478:	lsr	w8, w27, #24
   1547c:	cbnz	w8, 154bc <lzma_mode_is_supported@@XZ_5.0+0x37f8>
   15480:	cmp	x28, x4
   15484:	b.eq	17b98 <lzma_mode_is_supported@@XZ_5.0+0x5ed4>  // b.none
   15488:	ldrb	w8, [x6, x28]
   1548c:	lsl	w9, w27, #8
   15490:	add	x28, x28, #0x1
   15494:	bfi	w8, w22, #8, #24
   15498:	b	154c4 <lzma_mode_is_supported@@XZ_5.0+0x3800>
   1549c:	sub	w27, w9, w27
   154a0:	mov	w9, #0x1                   	// #1
   154a4:	bfi	w9, w19, #1, #31
   154a8:	sub	w8, w11, w11, lsr #5
   154ac:	mov	w19, w9
   154b0:	strh	w8, [x18, x10, lsl #1]
   154b4:	lsr	w8, w27, #24
   154b8:	cbz	w8, 15480 <lzma_mode_is_supported@@XZ_5.0+0x37bc>
   154bc:	mov	w9, w27
   154c0:	mov	w8, w22
   154c4:	ldrh	w11, [x18, w19, uxtw #1]
   154c8:	lsr	w10, w9, #11
   154cc:	mul	w27, w10, w11
   154d0:	subs	w22, w8, w27
   154d4:	mov	w10, w19
   154d8:	b.cs	15518 <lzma_mode_is_supported@@XZ_5.0+0x3854>  // b.hs, b.nlast
   154dc:	mov	w9, #0x800                 	// #2048
   154e0:	sub	w9, w9, w11
   154e4:	add	w9, w11, w9, lsr #5
   154e8:	lsl	w19, w19, #1
   154ec:	strh	w9, [x18, x10, lsl #1]
   154f0:	mov	w22, w8
   154f4:	lsr	w8, w27, #24
   154f8:	cbnz	w8, 15538 <lzma_mode_is_supported@@XZ_5.0+0x3874>
   154fc:	cmp	x28, x4
   15500:	b.eq	17ba4 <lzma_mode_is_supported@@XZ_5.0+0x5ee0>  // b.none
   15504:	ldrb	w8, [x6, x28]
   15508:	lsl	w9, w27, #8
   1550c:	add	x28, x28, #0x1
   15510:	bfi	w8, w22, #8, #24
   15514:	b	15540 <lzma_mode_is_supported@@XZ_5.0+0x387c>
   15518:	sub	w27, w9, w27
   1551c:	mov	w9, #0x1                   	// #1
   15520:	bfi	w9, w19, #1, #31
   15524:	sub	w8, w11, w11, lsr #5
   15528:	mov	w19, w9
   1552c:	strh	w8, [x18, x10, lsl #1]
   15530:	lsr	w8, w27, #24
   15534:	cbz	w8, 154fc <lzma_mode_is_supported@@XZ_5.0+0x3838>
   15538:	mov	w9, w27
   1553c:	mov	w8, w22
   15540:	ldrh	w11, [x18, w19, uxtw #1]
   15544:	lsr	w10, w9, #11
   15548:	mul	w27, w10, w11
   1554c:	subs	w22, w8, w27
   15550:	mov	w10, w19
   15554:	b.cs	15594 <lzma_mode_is_supported@@XZ_5.0+0x38d0>  // b.hs, b.nlast
   15558:	mov	w9, #0x800                 	// #2048
   1555c:	sub	w9, w9, w11
   15560:	add	w9, w11, w9, lsr #5
   15564:	lsl	w19, w19, #1
   15568:	strh	w9, [x18, x10, lsl #1]
   1556c:	mov	w22, w8
   15570:	lsr	w8, w27, #24
   15574:	cbnz	w8, 155b4 <lzma_mode_is_supported@@XZ_5.0+0x38f0>
   15578:	cmp	x28, x4
   1557c:	b.eq	17bb0 <lzma_mode_is_supported@@XZ_5.0+0x5eec>  // b.none
   15580:	ldrb	w8, [x6, x28]
   15584:	lsl	w9, w27, #8
   15588:	add	x28, x28, #0x1
   1558c:	bfi	w8, w22, #8, #24
   15590:	b	155bc <lzma_mode_is_supported@@XZ_5.0+0x38f8>
   15594:	sub	w27, w9, w27
   15598:	mov	w9, #0x1                   	// #1
   1559c:	bfi	w9, w19, #1, #31
   155a0:	sub	w8, w11, w11, lsr #5
   155a4:	mov	w19, w9
   155a8:	strh	w8, [x18, x10, lsl #1]
   155ac:	lsr	w8, w27, #24
   155b0:	cbz	w8, 15578 <lzma_mode_is_supported@@XZ_5.0+0x38b4>
   155b4:	mov	w9, w27
   155b8:	mov	w8, w22
   155bc:	ldrh	w11, [x18, w19, uxtw #1]
   155c0:	lsr	w10, w9, #11
   155c4:	mul	w27, w10, w11
   155c8:	subs	w22, w8, w27
   155cc:	mov	w10, w19
   155d0:	b.cs	15610 <lzma_mode_is_supported@@XZ_5.0+0x394c>  // b.hs, b.nlast
   155d4:	mov	w9, #0x800                 	// #2048
   155d8:	sub	w9, w9, w11
   155dc:	add	w9, w11, w9, lsr #5
   155e0:	lsl	w19, w19, #1
   155e4:	strh	w9, [x18, x10, lsl #1]
   155e8:	mov	w22, w8
   155ec:	lsr	w8, w27, #24
   155f0:	cbnz	w8, 15630 <lzma_mode_is_supported@@XZ_5.0+0x396c>
   155f4:	cmp	x28, x4
   155f8:	b.eq	17bbc <lzma_mode_is_supported@@XZ_5.0+0x5ef8>  // b.none
   155fc:	ldrb	w8, [x6, x28]
   15600:	lsl	w9, w27, #8
   15604:	add	x28, x28, #0x1
   15608:	bfi	w8, w22, #8, #24
   1560c:	b	15638 <lzma_mode_is_supported@@XZ_5.0+0x3974>
   15610:	sub	w27, w9, w27
   15614:	mov	w9, #0x1                   	// #1
   15618:	bfi	w9, w19, #1, #31
   1561c:	sub	w8, w11, w11, lsr #5
   15620:	mov	w19, w9
   15624:	strh	w8, [x18, x10, lsl #1]
   15628:	lsr	w8, w27, #24
   1562c:	cbz	w8, 155f4 <lzma_mode_is_supported@@XZ_5.0+0x3930>
   15630:	mov	w9, w27
   15634:	mov	w8, w22
   15638:	ldrh	w11, [x18, w19, uxtw #1]
   1563c:	lsr	w10, w9, #11
   15640:	mul	w27, w10, w11
   15644:	subs	w22, w8, w27
   15648:	mov	w10, w19
   1564c:	b.cs	1568c <lzma_mode_is_supported@@XZ_5.0+0x39c8>  // b.hs, b.nlast
   15650:	mov	w9, #0x800                 	// #2048
   15654:	sub	w9, w9, w11
   15658:	add	w9, w11, w9, lsr #5
   1565c:	lsl	w19, w19, #1
   15660:	strh	w9, [x18, x10, lsl #1]
   15664:	mov	w22, w8
   15668:	lsr	w8, w27, #24
   1566c:	cbnz	w8, 156ac <lzma_mode_is_supported@@XZ_5.0+0x39e8>
   15670:	cmp	x28, x4
   15674:	b.eq	17bc8 <lzma_mode_is_supported@@XZ_5.0+0x5f04>  // b.none
   15678:	ldrb	w8, [x6, x28]
   1567c:	lsl	w9, w27, #8
   15680:	add	x28, x28, #0x1
   15684:	bfi	w8, w22, #8, #24
   15688:	b	156b4 <lzma_mode_is_supported@@XZ_5.0+0x39f0>
   1568c:	sub	w27, w9, w27
   15690:	mov	w9, #0x1                   	// #1
   15694:	bfi	w9, w19, #1, #31
   15698:	sub	w8, w11, w11, lsr #5
   1569c:	mov	w19, w9
   156a0:	strh	w8, [x18, x10, lsl #1]
   156a4:	lsr	w8, w27, #24
   156a8:	cbz	w8, 15670 <lzma_mode_is_supported@@XZ_5.0+0x39ac>
   156ac:	mov	w9, w27
   156b0:	mov	w8, w22
   156b4:	ldrh	w11, [x18, w19, uxtw #1]
   156b8:	lsr	w10, w9, #11
   156bc:	mul	w27, w10, w11
   156c0:	subs	w22, w8, w27
   156c4:	mov	w10, w19
   156c8:	b.cs	15708 <lzma_mode_is_supported@@XZ_5.0+0x3a44>  // b.hs, b.nlast
   156cc:	mov	w9, #0x800                 	// #2048
   156d0:	sub	w9, w9, w11
   156d4:	add	w9, w11, w9, lsr #5
   156d8:	lsl	w19, w19, #1
   156dc:	strh	w9, [x18, x10, lsl #1]
   156e0:	mov	w22, w8
   156e4:	lsr	w8, w27, #24
   156e8:	cbnz	w8, 15728 <lzma_mode_is_supported@@XZ_5.0+0x3a64>
   156ec:	cmp	x28, x4
   156f0:	b.eq	17bd4 <lzma_mode_is_supported@@XZ_5.0+0x5f10>  // b.none
   156f4:	ldrb	w8, [x6, x28]
   156f8:	lsl	w9, w27, #8
   156fc:	add	x28, x28, #0x1
   15700:	bfi	w8, w22, #8, #24
   15704:	b	15730 <lzma_mode_is_supported@@XZ_5.0+0x3a6c>
   15708:	sub	w27, w9, w27
   1570c:	mov	w9, #0x1                   	// #1
   15710:	bfi	w9, w19, #1, #31
   15714:	sub	w8, w11, w11, lsr #5
   15718:	mov	w19, w9
   1571c:	strh	w8, [x18, x10, lsl #1]
   15720:	lsr	w8, w27, #24
   15724:	cbz	w8, 156ec <lzma_mode_is_supported@@XZ_5.0+0x3a28>
   15728:	mov	w9, w27
   1572c:	mov	w8, w22
   15730:	ldrh	w12, [x18, w19, uxtw #1]
   15734:	lsr	w10, w9, #11
   15738:	mul	w27, w10, w12
   1573c:	subs	w11, w8, w27
   15740:	mov	w10, w19
   15744:	b.cs	15764 <lzma_mode_is_supported@@XZ_5.0+0x3aa0>  // b.hs, b.nlast
   15748:	mov	w9, #0x800                 	// #2048
   1574c:	sub	w9, w9, w12
   15750:	add	w9, w12, w9, lsr #5
   15754:	strh	w9, [x18, x10, lsl #1]
   15758:	lsl	w9, w19, #1
   1575c:	mov	w10, w26
   15760:	b	176a0 <lzma_mode_is_supported@@XZ_5.0+0x59dc>
   15764:	sub	w27, w9, w27
   15768:	sub	w8, w12, w12, lsr #5
   1576c:	mov	w9, #0x1                   	// #1
   15770:	strh	w8, [x18, x10, lsl #1]
   15774:	bfi	w9, w19, #1, #31
   15778:	mov	w10, w26
   1577c:	b	1769c <lzma_mode_is_supported@@XZ_5.0+0x59d8>
   15780:	sub	w27, w11, w27
   15784:	sub	w9, w12, w12, lsr #5
   15788:	strh	w9, [x10]
   1578c:	mov	w1, w17
   15790:	ldur	w17, [x29, #-28]
   15794:	lsr	w9, w27, #24
   15798:	cbnz	w9, 157b8 <lzma_mode_is_supported@@XZ_5.0+0x3af4>
   1579c:	cmp	x28, x4
   157a0:	b.eq	17be0 <lzma_mode_is_supported@@XZ_5.0+0x5f1c>  // b.none
   157a4:	ldrb	w10, [x6, x28]
   157a8:	lsl	w14, w27, #8
   157ac:	add	x28, x28, #0x1
   157b0:	bfi	w10, w22, #8, #24
   157b4:	b	157c0 <lzma_mode_is_supported@@XZ_5.0+0x3afc>
   157b8:	mov	w14, w27
   157bc:	mov	w10, w22
   157c0:	ldur	x11, [x29, #-16]
   157c4:	mov	w9, #0x6180                	// #24960
   157c8:	mov	w13, w15
   157cc:	add	x11, x11, x9
   157d0:	ldrh	w12, [x11, w15, uxtw #1]
   157d4:	lsr	w9, w14, #11
   157d8:	mul	w27, w9, w12
   157dc:	subs	w9, w10, w27
   157e0:	b.cs	15900 <lzma_mode_is_supported@@XZ_5.0+0x3c3c>  // b.hs, b.nlast
   157e4:	mov	w9, #0x800                 	// #2048
   157e8:	cmp	w15, #0x7
   157ec:	mov	w14, #0xa                   	// #10
   157f0:	mov	w15, #0x7                   	// #7
   157f4:	sub	w9, w9, w12
   157f8:	csel	w15, w15, w14, cc  // cc = lo, ul, last
   157fc:	add	w9, w12, w9, lsr #5
   15800:	mov	w19, #0x1                   	// #1
   15804:	mov	w22, w10
   15808:	stur	w3, [x29, #-28]
   1580c:	stur	w1, [x29, #-36]
   15810:	strh	w9, [x11, x13, lsl #1]
   15814:	lsr	w9, w27, #24
   15818:	cbnz	w9, 15838 <lzma_mode_is_supported@@XZ_5.0+0x3b74>
   1581c:	cmp	x28, x4
   15820:	b.eq	17bfc <lzma_mode_is_supported@@XZ_5.0+0x5f38>  // b.none
   15824:	ldrb	w9, [x6, x28]
   15828:	lsl	w10, w27, #8
   1582c:	add	x28, x28, #0x1
   15830:	bfi	w9, w22, #8, #24
   15834:	b	15840 <lzma_mode_is_supported@@XZ_5.0+0x3b7c>
   15838:	mov	w10, w27
   1583c:	mov	w9, w22
   15840:	ldur	x11, [x29, #-24]
   15844:	lsr	w12, w10, #11
   15848:	ldrh	w11, [x11]
   1584c:	mul	w27, w12, w11
   15850:	subs	w22, w9, w27
   15854:	b.cs	160c4 <lzma_mode_is_supported@@XZ_5.0+0x4400>  // b.hs, b.nlast
   15858:	mov	w10, #0x800                 	// #2048
   1585c:	sub	w10, w10, w11
   15860:	add	w10, w11, w10, lsr #5
   15864:	ldur	x11, [x29, #-24]
   15868:	mov	w22, w9
   1586c:	strh	w10, [x11]
   15870:	lsr	w9, w27, #24
   15874:	cbnz	w9, 15894 <lzma_mode_is_supported@@XZ_5.0+0x3bd0>
   15878:	cmp	x28, x4
   1587c:	b.eq	17c08 <lzma_mode_is_supported@@XZ_5.0+0x5f44>  // b.none
   15880:	ldrb	w9, [x6, x28]
   15884:	lsl	w10, w27, #8
   15888:	add	x28, x28, #0x1
   1588c:	bfi	w9, w22, #8, #24
   15890:	b	1589c <lzma_mode_is_supported@@XZ_5.0+0x3bd8>
   15894:	mov	w10, w27
   15898:	mov	w9, w22
   1589c:	ldur	x11, [x29, #-16]
   158a0:	mov	w12, #0x6668                	// #26216
   158a4:	lsr	w13, w10, #11
   158a8:	add	x11, x11, w8, uxtw #4
   158ac:	add	x11, x11, w19, uxtw #1
   158b0:	add	x11, x11, x12
   158b4:	ldrh	w12, [x11]
   158b8:	mul	w27, w13, w12
   158bc:	subs	w22, w9, w27
   158c0:	b.cs	15a38 <lzma_mode_is_supported@@XZ_5.0+0x3d74>  // b.hs, b.nlast
   158c4:	mov	w10, #0x800                 	// #2048
   158c8:	sub	w10, w10, w12
   158cc:	add	w10, w12, w10, lsr #5
   158d0:	lsl	w19, w19, #1
   158d4:	strh	w10, [x11]
   158d8:	mov	w22, w9
   158dc:	lsr	w9, w27, #24
   158e0:	cbnz	w9, 15a58 <lzma_mode_is_supported@@XZ_5.0+0x3d94>
   158e4:	cmp	x28, x4
   158e8:	b.eq	17c14 <lzma_mode_is_supported@@XZ_5.0+0x5f50>  // b.none
   158ec:	ldrb	w9, [x6, x28]
   158f0:	lsl	w10, w27, #8
   158f4:	add	x28, x28, #0x1
   158f8:	bfi	w9, w22, #8, #24
   158fc:	b	15a60 <lzma_mode_is_supported@@XZ_5.0+0x3d9c>
   15900:	sub	w27, w14, w27
   15904:	sub	w10, w12, w12, lsr #5
   15908:	strh	w10, [x11, x13, lsl #1]
   1590c:	cbz	x16, 17e8c <lzma_mode_is_supported@@XZ_5.0+0x61c8>
   15910:	stur	w17, [x29, #-28]
   15914:	mov	w17, w1
   15918:	mov	w22, w9
   1591c:	lsr	w9, w27, #24
   15920:	cbnz	w9, 15940 <lzma_mode_is_supported@@XZ_5.0+0x3c7c>
   15924:	cmp	x28, x4
   15928:	b.eq	17c20 <lzma_mode_is_supported@@XZ_5.0+0x5f5c>  // b.none
   1592c:	ldrb	w9, [x6, x28]
   15930:	lsl	w27, w27, #8
   15934:	add	x28, x28, #0x1
   15938:	bfi	w9, w22, #8, #24
   1593c:	b	15944 <lzma_mode_is_supported@@XZ_5.0+0x3c80>
   15940:	mov	w9, w22
   15944:	ldur	x11, [x29, #-16]
   15948:	mov	w10, #0x6198                	// #24984
   1594c:	mov	w13, w15
   15950:	add	x11, x11, x10
   15954:	ldrh	w12, [x11, w15, uxtw #1]
   15958:	lsr	w10, w27, #11
   1595c:	mul	w10, w10, w12
   15960:	subs	w22, w9, w10
   15964:	b.cs	15ac4 <lzma_mode_is_supported@@XZ_5.0+0x3e00>  // b.hs, b.nlast
   15968:	mov	w14, #0x800                 	// #2048
   1596c:	sub	w14, w14, w12
   15970:	add	w12, w12, w14, lsr #5
   15974:	mov	w27, w10
   15978:	mov	w22, w9
   1597c:	strh	w12, [x11, x13, lsl #1]
   15980:	lsr	w9, w27, #24
   15984:	cbnz	w9, 159a4 <lzma_mode_is_supported@@XZ_5.0+0x3ce0>
   15988:	cmp	x28, x4
   1598c:	b.eq	17c2c <lzma_mode_is_supported@@XZ_5.0+0x5f68>  // b.none
   15990:	ldrb	w10, [x6, x28]
   15994:	lsl	w11, w27, #8
   15998:	add	x28, x28, #0x1
   1599c:	bfi	w10, w22, #8, #24
   159a0:	b	159ac <lzma_mode_is_supported@@XZ_5.0+0x3ce8>
   159a4:	mov	w11, w27
   159a8:	mov	w10, w22
   159ac:	ldur	x12, [x29, #-16]
   159b0:	mov	w9, w15
   159b4:	add	x9, x12, x9, lsl #5
   159b8:	add	x9, x9, w8, uxtw #1
   159bc:	mov	w12, #0x61e0                	// #25056
   159c0:	add	x12, x9, x12
   159c4:	ldrh	w13, [x12]
   159c8:	lsr	w9, w11, #11
   159cc:	mul	w27, w9, w13
   159d0:	subs	w9, w10, w27
   159d4:	b.cs	15b40 <lzma_mode_is_supported@@XZ_5.0+0x3e7c>  // b.hs, b.nlast
   159d8:	mov	w8, #0x800                 	// #2048
   159dc:	cmp	w15, #0x7
   159e0:	mov	w9, #0xb                   	// #11
   159e4:	mov	w11, #0x9                   	// #9
   159e8:	sub	w8, w8, w13
   159ec:	add	w8, w13, w8, lsr #5
   159f0:	csel	w15, w11, w9, cc  // cc = lo, ul, last
   159f4:	mov	w22, w10
   159f8:	strh	w8, [x12]
   159fc:	cmp	x21, x7
   15a00:	b.eq	17b5c <lzma_mode_is_supported@@XZ_5.0+0x5e98>  // b.none
   15a04:	mov	w8, w3
   15a08:	mvn	x9, x8
   15a0c:	cmp	x21, x8
   15a10:	add	x8, x21, x9
   15a14:	csel	x9, xzr, x24, hi  // hi = pmore
   15a18:	add	x8, x8, x9
   15a1c:	ldrb	w8, [x30, x8]
   15a20:	add	x9, x21, #0x1
   15a24:	cmp	x9, x16
   15a28:	csinc	x16, x16, x21, ls  // ls = plast
   15a2c:	strb	w8, [x30, x21]
   15a30:	mov	x21, x9
   15a34:	b	152d8 <lzma_mode_is_supported@@XZ_5.0+0x3614>
   15a38:	sub	w27, w10, w27
   15a3c:	mov	w10, #0x1                   	// #1
   15a40:	bfi	w10, w19, #1, #31
   15a44:	sub	w9, w12, w12, lsr #5
   15a48:	mov	w19, w10
   15a4c:	strh	w9, [x11]
   15a50:	lsr	w9, w27, #24
   15a54:	cbz	w9, 158e4 <lzma_mode_is_supported@@XZ_5.0+0x3c20>
   15a58:	mov	w10, w27
   15a5c:	mov	w9, w22
   15a60:	ldur	x11, [x29, #-16]
   15a64:	mov	w12, #0x6668                	// #26216
   15a68:	lsr	w13, w10, #11
   15a6c:	add	x11, x11, w8, uxtw #4
   15a70:	add	x11, x11, w19, uxtw #1
   15a74:	add	x11, x11, x12
   15a78:	ldrh	w12, [x11]
   15a7c:	mul	w27, w13, w12
   15a80:	subs	w22, w9, w27
   15a84:	b.cs	15b5c <lzma_mode_is_supported@@XZ_5.0+0x3e98>  // b.hs, b.nlast
   15a88:	mov	w10, #0x800                 	// #2048
   15a8c:	sub	w10, w10, w12
   15a90:	add	w10, w12, w10, lsr #5
   15a94:	lsl	w19, w19, #1
   15a98:	strh	w10, [x11]
   15a9c:	mov	w22, w9
   15aa0:	lsr	w9, w27, #24
   15aa4:	cbnz	w9, 15b7c <lzma_mode_is_supported@@XZ_5.0+0x3eb8>
   15aa8:	cmp	x28, x4
   15aac:	b.eq	17c38 <lzma_mode_is_supported@@XZ_5.0+0x5f74>  // b.none
   15ab0:	ldrb	w9, [x6, x28]
   15ab4:	lsl	w10, w27, #8
   15ab8:	add	x28, x28, #0x1
   15abc:	bfi	w9, w22, #8, #24
   15ac0:	b	15b84 <lzma_mode_is_supported@@XZ_5.0+0x3ec0>
   15ac4:	sub	w27, w27, w10
   15ac8:	sub	w9, w12, w12, lsr #5
   15acc:	strh	w9, [x11, x13, lsl #1]
   15ad0:	lsr	w9, w27, #24
   15ad4:	cbnz	w9, 15af4 <lzma_mode_is_supported@@XZ_5.0+0x3e30>
   15ad8:	cmp	x28, x4
   15adc:	b.eq	17c44 <lzma_mode_is_supported@@XZ_5.0+0x5f80>  // b.none
   15ae0:	ldrb	w9, [x6, x28]
   15ae4:	lsl	w10, w27, #8
   15ae8:	add	x28, x28, #0x1
   15aec:	bfi	w9, w22, #8, #24
   15af0:	b	15afc <lzma_mode_is_supported@@XZ_5.0+0x3e38>
   15af4:	mov	w10, w27
   15af8:	mov	w9, w22
   15afc:	ldur	x12, [x29, #-16]
   15b00:	mov	w11, #0x61b0                	// #25008
   15b04:	lsr	w13, w10, #11
   15b08:	add	x11, x12, x11
   15b0c:	ldrh	w12, [x11, w15, uxtw #1]
   15b10:	mul	w27, w13, w12
   15b14:	subs	w22, w9, w27
   15b18:	mov	w13, w15
   15b1c:	b.cs	15bc8 <lzma_mode_is_supported@@XZ_5.0+0x3f04>  // b.hs, b.nlast
   15b20:	mov	w10, #0x800                 	// #2048
   15b24:	ldur	w0, [x29, #-28]
   15b28:	sub	w10, w10, w12
   15b2c:	add	w10, w12, w10, lsr #5
   15b30:	strh	w10, [x11, x13, lsl #1]
   15b34:	mov	w1, w3
   15b38:	stur	w17, [x29, #-28]
   15b3c:	b	15c7c <lzma_mode_is_supported@@XZ_5.0+0x3fb8>
   15b40:	ldur	w1, [x29, #-28]
   15b44:	sub	w10, w13, w13, lsr #5
   15b48:	sub	w27, w11, w27
   15b4c:	strh	w10, [x12]
   15b50:	mov	w0, w3
   15b54:	stur	w17, [x29, #-28]
   15b58:	b	15c7c <lzma_mode_is_supported@@XZ_5.0+0x3fb8>
   15b5c:	sub	w27, w10, w27
   15b60:	mov	w10, #0x1                   	// #1
   15b64:	bfi	w10, w19, #1, #31
   15b68:	sub	w9, w12, w12, lsr #5
   15b6c:	mov	w19, w10
   15b70:	strh	w9, [x11]
   15b74:	lsr	w9, w27, #24
   15b78:	cbz	w9, 15aa8 <lzma_mode_is_supported@@XZ_5.0+0x3de4>
   15b7c:	mov	w10, w27
   15b80:	mov	w9, w22
   15b84:	ldur	x11, [x29, #-16]
   15b88:	add	x8, x11, w8, uxtw #4
   15b8c:	add	x8, x8, w19, uxtw #1
   15b90:	mov	w11, #0x6668                	// #26216
   15b94:	add	x8, x8, x11
   15b98:	ldrh	w12, [x8]
   15b9c:	lsr	w11, w10, #11
   15ba0:	mul	w27, w11, w12
   15ba4:	subs	w11, w9, w27
   15ba8:	b.cs	15c40 <lzma_mode_is_supported@@XZ_5.0+0x3f7c>  // b.hs, b.nlast
   15bac:	mov	w10, #0x800                 	// #2048
   15bb0:	sub	w10, w10, w12
   15bb4:	add	w10, w12, w10, lsr #5
   15bb8:	strh	w10, [x8]
   15bbc:	lsl	w10, w19, #1
   15bc0:	sub	w2, w10, #0x6
   15bc4:	b	16ae4 <lzma_mode_is_supported@@XZ_5.0+0x4e20>
   15bc8:	sub	w27, w10, w27
   15bcc:	sub	w9, w12, w12, lsr #5
   15bd0:	strh	w9, [x11, x13, lsl #1]
   15bd4:	lsr	w9, w27, #24
   15bd8:	cbnz	w9, 15bf8 <lzma_mode_is_supported@@XZ_5.0+0x3f34>
   15bdc:	cmp	x28, x4
   15be0:	b.eq	17c50 <lzma_mode_is_supported@@XZ_5.0+0x5f8c>  // b.none
   15be4:	ldrb	w9, [x6, x28]
   15be8:	lsl	w10, w27, #8
   15bec:	add	x28, x28, #0x1
   15bf0:	bfi	w9, w22, #8, #24
   15bf4:	b	15c00 <lzma_mode_is_supported@@XZ_5.0+0x3f3c>
   15bf8:	mov	w10, w27
   15bfc:	mov	w9, w22
   15c00:	ldur	x12, [x29, #-16]
   15c04:	mov	w11, #0x61c8                	// #25032
   15c08:	mov	w14, w15
   15c0c:	add	x12, x12, x11
   15c10:	ldrh	w13, [x12, w15, uxtw #1]
   15c14:	lsr	w11, w10, #11
   15c18:	mul	w27, w11, w13
   15c1c:	subs	w11, w9, w27
   15c20:	b.cs	15c60 <lzma_mode_is_supported@@XZ_5.0+0x3f9c>  // b.hs, b.nlast
   15c24:	mov	w10, #0x800                 	// #2048
   15c28:	sub	w10, w10, w13
   15c2c:	add	w10, w13, w10, lsr #5
   15c30:	strh	w10, [x12, x14, lsl #1]
   15c34:	mov	w0, w17
   15c38:	mov	w1, w3
   15c3c:	b	15c7c <lzma_mode_is_supported@@XZ_5.0+0x3fb8>
   15c40:	sub	w27, w10, w27
   15c44:	mov	w10, #0x1                   	// #1
   15c48:	sub	w9, w12, w12, lsr #5
   15c4c:	bfi	w10, w19, #1, #31
   15c50:	strh	w9, [x8]
   15c54:	mov	w9, w11
   15c58:	sub	w2, w10, #0x6
   15c5c:	b	16ae4 <lzma_mode_is_supported@@XZ_5.0+0x4e20>
   15c60:	ldur	w0, [x29, #-36]
   15c64:	sub	w9, w13, w13, lsr #5
   15c68:	sub	w27, w10, w27
   15c6c:	strh	w9, [x12, x14, lsl #1]
   15c70:	mov	w1, w3
   15c74:	mov	w9, w11
   15c78:	stur	w17, [x29, #-36]
   15c7c:	ldur	w17, [x29, #-28]
   15c80:	cmp	w15, #0x7
   15c84:	mov	w10, #0xb                   	// #11
   15c88:	mov	w11, #0x8                   	// #8
   15c8c:	mov	w3, w0
   15c90:	csel	w15, w11, w10, cc  // cc = lo, ul, last
   15c94:	mov	w19, #0x1                   	// #1
   15c98:	mov	w22, w9
   15c9c:	stur	w1, [x29, #-28]
   15ca0:	lsr	w10, w27, #24
   15ca4:	mov	w9, w22
   15ca8:	cbnz	w10, 15ccc <lzma_mode_is_supported@@XZ_5.0+0x4008>
   15cac:	cmp	x28, x4
   15cb0:	b.eq	17c5c <lzma_mode_is_supported@@XZ_5.0+0x5f98>  // b.none
   15cb4:	ldrb	w11, [x6, x28]
   15cb8:	add	x28, x28, #0x1
   15cbc:	lsl	w10, w27, #8
   15cc0:	bfi	w11, w9, #8, #24
   15cc4:	mov	w9, w11
   15cc8:	b	15cd0 <lzma_mode_is_supported@@XZ_5.0+0x400c>
   15ccc:	mov	w10, w27
   15cd0:	ldur	x11, [x29, #-24]
   15cd4:	lsr	w12, w10, #11
   15cd8:	ldrh	w11, [x11, #1028]
   15cdc:	mul	w27, w12, w11
   15ce0:	subs	w22, w9, w27
   15ce4:	b.cs	15d90 <lzma_mode_is_supported@@XZ_5.0+0x40cc>  // b.hs, b.nlast
   15ce8:	mov	w10, #0x800                 	// #2048
   15cec:	sub	w10, w10, w11
   15cf0:	add	w10, w11, w10, lsr #5
   15cf4:	ldur	x11, [x29, #-24]
   15cf8:	mov	w22, w9
   15cfc:	strh	w10, [x11, #1028]
   15d00:	lsr	w10, w27, #24
   15d04:	mov	w9, w22
   15d08:	cbnz	w10, 15d28 <lzma_mode_is_supported@@XZ_5.0+0x4064>
   15d0c:	cmp	x28, x4
   15d10:	b.eq	17c68 <lzma_mode_is_supported@@XZ_5.0+0x5fa4>  // b.none
   15d14:	ldrb	w10, [x6, x28]
   15d18:	add	x28, x28, #0x1
   15d1c:	lsl	w27, w27, #8
   15d20:	bfi	w10, w9, #8, #24
   15d24:	mov	w9, w10
   15d28:	ldur	x10, [x29, #-16]
   15d2c:	mov	w11, #0x6a6c                	// #27244
   15d30:	add	x10, x10, w8, uxtw #4
   15d34:	add	x10, x10, w19, uxtw #1
   15d38:	add	x11, x10, x11
   15d3c:	ldrh	w12, [x11]
   15d40:	lsr	w10, w27, #11
   15d44:	mul	w10, w10, w12
   15d48:	subs	w22, w9, w10
   15d4c:	b.cs	15e8c <lzma_mode_is_supported@@XZ_5.0+0x41c8>  // b.hs, b.nlast
   15d50:	mov	w13, #0x800                 	// #2048
   15d54:	sub	w13, w13, w12
   15d58:	add	w12, w12, w13, lsr #5
   15d5c:	lsl	w19, w19, #1
   15d60:	strh	w12, [x11]
   15d64:	mov	w27, w10
   15d68:	mov	w22, w9
   15d6c:	lsr	w9, w27, #24
   15d70:	cbnz	w9, 15eac <lzma_mode_is_supported@@XZ_5.0+0x41e8>
   15d74:	cmp	x28, x4
   15d78:	b.eq	17c74 <lzma_mode_is_supported@@XZ_5.0+0x5fb0>  // b.none
   15d7c:	ldrb	w9, [x6, x28]
   15d80:	lsl	w10, w27, #8
   15d84:	add	x28, x28, #0x1
   15d88:	bfi	w9, w22, #8, #24
   15d8c:	b	15eb4 <lzma_mode_is_supported@@XZ_5.0+0x41f0>
   15d90:	sub	w27, w10, w27
   15d94:	ldur	x10, [x29, #-24]
   15d98:	sub	w9, w11, w11, lsr #5
   15d9c:	strh	w9, [x10, #1028]
   15da0:	lsr	w10, w27, #24
   15da4:	mov	w9, w22
   15da8:	cbnz	w10, 15dc8 <lzma_mode_is_supported@@XZ_5.0+0x4104>
   15dac:	cmp	x28, x4
   15db0:	b.eq	17c80 <lzma_mode_is_supported@@XZ_5.0+0x5fbc>  // b.none
   15db4:	ldrb	w10, [x6, x28]
   15db8:	add	x28, x28, #0x1
   15dbc:	lsl	w27, w27, #8
   15dc0:	bfi	w10, w9, #8, #24
   15dc4:	mov	w9, w10
   15dc8:	ldur	x10, [x29, #-24]
   15dcc:	ldrh	w11, [x10, #1030]
   15dd0:	lsr	w10, w27, #11
   15dd4:	mul	w10, w10, w11
   15dd8:	subs	w22, w9, w10
   15ddc:	b.cs	15f18 <lzma_mode_is_supported@@XZ_5.0+0x4254>  // b.hs, b.nlast
   15de0:	mov	w12, #0x800                 	// #2048
   15de4:	sub	w12, w12, w11
   15de8:	add	w11, w11, w12, lsr #5
   15dec:	ldur	x12, [x29, #-24]
   15df0:	mov	w27, w10
   15df4:	mov	w22, w9
   15df8:	strh	w11, [x12, #1030]
   15dfc:	lsr	w10, w27, #24
   15e00:	mov	w9, w22
   15e04:	cbnz	w10, 15e24 <lzma_mode_is_supported@@XZ_5.0+0x4160>
   15e08:	cmp	x28, x4
   15e0c:	b.eq	17c8c <lzma_mode_is_supported@@XZ_5.0+0x5fc8>  // b.none
   15e10:	ldrb	w10, [x6, x28]
   15e14:	add	x28, x28, #0x1
   15e18:	lsl	w27, w27, #8
   15e1c:	bfi	w10, w9, #8, #24
   15e20:	mov	w9, w10
   15e24:	ldur	x10, [x29, #-16]
   15e28:	mov	w11, #0x6b6c                	// #27500
   15e2c:	add	x10, x10, w8, uxtw #4
   15e30:	add	x10, x10, w19, uxtw #1
   15e34:	add	x11, x10, x11
   15e38:	ldrh	w12, [x11]
   15e3c:	lsr	w10, w27, #11
   15e40:	mul	w10, w10, w12
   15e44:	subs	w22, w9, w10
   15e48:	b.cs	163fc <lzma_mode_is_supported@@XZ_5.0+0x4738>  // b.hs, b.nlast
   15e4c:	mov	w13, #0x800                 	// #2048
   15e50:	sub	w13, w13, w12
   15e54:	add	w12, w12, w13, lsr #5
   15e58:	lsl	w19, w19, #1
   15e5c:	strh	w12, [x11]
   15e60:	mov	w27, w10
   15e64:	mov	w22, w9
   15e68:	lsr	w9, w27, #24
   15e6c:	cbnz	w9, 1641c <lzma_mode_is_supported@@XZ_5.0+0x4758>
   15e70:	cmp	x28, x4
   15e74:	b.eq	17c98 <lzma_mode_is_supported@@XZ_5.0+0x5fd4>  // b.none
   15e78:	ldrb	w9, [x6, x28]
   15e7c:	lsl	w10, w27, #8
   15e80:	add	x28, x28, #0x1
   15e84:	bfi	w9, w22, #8, #24
   15e88:	b	16424 <lzma_mode_is_supported@@XZ_5.0+0x4760>
   15e8c:	sub	w27, w27, w10
   15e90:	mov	w10, #0x1                   	// #1
   15e94:	bfi	w10, w19, #1, #31
   15e98:	sub	w9, w12, w12, lsr #5
   15e9c:	mov	w19, w10
   15ea0:	strh	w9, [x11]
   15ea4:	lsr	w9, w27, #24
   15ea8:	cbz	w9, 15d74 <lzma_mode_is_supported@@XZ_5.0+0x40b0>
   15eac:	mov	w10, w27
   15eb0:	mov	w9, w22
   15eb4:	ldur	x11, [x29, #-16]
   15eb8:	mov	w12, #0x6a6c                	// #27244
   15ebc:	lsr	w13, w10, #11
   15ec0:	add	x11, x11, w8, uxtw #4
   15ec4:	add	x11, x11, w19, uxtw #1
   15ec8:	add	x11, x11, x12
   15ecc:	ldrh	w12, [x11]
   15ed0:	mul	w27, w13, w12
   15ed4:	subs	w22, w9, w27
   15ed8:	b.cs	15fb4 <lzma_mode_is_supported@@XZ_5.0+0x42f0>  // b.hs, b.nlast
   15edc:	mov	w10, #0x800                 	// #2048
   15ee0:	sub	w10, w10, w12
   15ee4:	add	w10, w12, w10, lsr #5
   15ee8:	lsl	w19, w19, #1
   15eec:	strh	w10, [x11]
   15ef0:	mov	w22, w9
   15ef4:	lsr	w9, w27, #24
   15ef8:	cbnz	w9, 15fd4 <lzma_mode_is_supported@@XZ_5.0+0x4310>
   15efc:	cmp	x28, x4
   15f00:	b.eq	17ca4 <lzma_mode_is_supported@@XZ_5.0+0x5fe0>  // b.none
   15f04:	ldrb	w9, [x6, x28]
   15f08:	lsl	w10, w27, #8
   15f0c:	add	x28, x28, #0x1
   15f10:	bfi	w9, w22, #8, #24
   15f14:	b	15fdc <lzma_mode_is_supported@@XZ_5.0+0x4318>
   15f18:	ldur	x9, [x29, #-24]
   15f1c:	sub	w27, w27, w10
   15f20:	sub	w8, w11, w11, lsr #5
   15f24:	strh	w8, [x9, #1030]
   15f28:	lsr	w8, w27, #24
   15f2c:	mov	w9, w22
   15f30:	cbnz	w8, 15f50 <lzma_mode_is_supported@@XZ_5.0+0x428c>
   15f34:	cmp	x28, x4
   15f38:	b.eq	17cb0 <lzma_mode_is_supported@@XZ_5.0+0x5fec>  // b.none
   15f3c:	ldrb	w8, [x6, x28]
   15f40:	add	x28, x28, #0x1
   15f44:	lsl	w27, w27, #8
   15f48:	bfi	w8, w9, #8, #24
   15f4c:	mov	w9, w8
   15f50:	ldur	x10, [x29, #-16]
   15f54:	mov	w8, #0x6c6c                	// #27756
   15f58:	mov	w11, w19
   15f5c:	add	x10, x10, x8
   15f60:	ldrh	w12, [x10, w19, uxtw #1]
   15f64:	lsr	w8, w27, #11
   15f68:	mul	w8, w8, w12
   15f6c:	subs	w22, w9, w8
   15f70:	b.cs	1601c <lzma_mode_is_supported@@XZ_5.0+0x4358>  // b.hs, b.nlast
   15f74:	mov	w13, #0x800                 	// #2048
   15f78:	sub	w13, w13, w12
   15f7c:	add	w12, w12, w13, lsr #5
   15f80:	lsl	w19, w19, #1
   15f84:	strh	w12, [x10, x11, lsl #1]
   15f88:	mov	w27, w8
   15f8c:	mov	w22, w9
   15f90:	lsr	w8, w27, #24
   15f94:	cbnz	w8, 1603c <lzma_mode_is_supported@@XZ_5.0+0x4378>
   15f98:	cmp	x28, x4
   15f9c:	b.eq	17cc4 <lzma_mode_is_supported@@XZ_5.0+0x6000>  // b.none
   15fa0:	ldrb	w8, [x6, x28]
   15fa4:	lsl	w27, w27, #8
   15fa8:	add	x28, x28, #0x1
   15fac:	bfi	w8, w22, #8, #24
   15fb0:	b	16040 <lzma_mode_is_supported@@XZ_5.0+0x437c>
   15fb4:	sub	w27, w10, w27
   15fb8:	mov	w10, #0x1                   	// #1
   15fbc:	bfi	w10, w19, #1, #31
   15fc0:	sub	w9, w12, w12, lsr #5
   15fc4:	mov	w19, w10
   15fc8:	strh	w9, [x11]
   15fcc:	lsr	w9, w27, #24
   15fd0:	cbz	w9, 15efc <lzma_mode_is_supported@@XZ_5.0+0x4238>
   15fd4:	mov	w10, w27
   15fd8:	mov	w9, w22
   15fdc:	ldur	x11, [x29, #-16]
   15fe0:	lsr	w12, w10, #11
   15fe4:	add	x8, x11, w8, uxtw #4
   15fe8:	add	x8, x8, w19, uxtw #1
   15fec:	mov	w11, #0x6a6c                	// #27244
   15ff0:	add	x11, x8, x11
   15ff4:	ldrh	w8, [x11]
   15ff8:	mul	w27, w12, w8
   15ffc:	subs	w12, w9, w27
   16000:	b.cs	160a4 <lzma_mode_is_supported@@XZ_5.0+0x43e0>  // b.hs, b.nlast
   16004:	mov	w10, #0x800                 	// #2048
   16008:	sub	w10, w10, w8
   1600c:	add	w8, w8, w10, lsr #5
   16010:	strh	w8, [x11]
   16014:	lsl	w8, w19, #1
   16018:	b	160bc <lzma_mode_is_supported@@XZ_5.0+0x43f8>
   1601c:	mov	w9, #0x1                   	// #1
   16020:	bfi	w9, w19, #1, #31
   16024:	sub	w27, w27, w8
   16028:	sub	w8, w12, w12, lsr #5
   1602c:	mov	w19, w9
   16030:	strh	w8, [x10, x11, lsl #1]
   16034:	lsr	w8, w27, #24
   16038:	cbz	w8, 15f98 <lzma_mode_is_supported@@XZ_5.0+0x42d4>
   1603c:	mov	w8, w22
   16040:	ldur	x10, [x29, #-16]
   16044:	mov	w9, #0x6c6c                	// #27756
   16048:	mov	w11, w19
   1604c:	add	x10, x10, x9
   16050:	ldrh	w12, [x10, w19, uxtw #1]
   16054:	lsr	w9, w27, #11
   16058:	mul	w9, w9, w12
   1605c:	subs	w22, w8, w9
   16060:	b.cs	16488 <lzma_mode_is_supported@@XZ_5.0+0x47c4>  // b.hs, b.nlast
   16064:	mov	w13, #0x800                 	// #2048
   16068:	sub	w13, w13, w12
   1606c:	add	w12, w12, w13, lsr #5
   16070:	lsl	w19, w19, #1
   16074:	strh	w12, [x10, x11, lsl #1]
   16078:	mov	w27, w9
   1607c:	mov	w22, w8
   16080:	lsr	w8, w27, #24
   16084:	cbnz	w8, 164a8 <lzma_mode_is_supported@@XZ_5.0+0x47e4>
   16088:	cmp	x28, x4
   1608c:	b.eq	17cd0 <lzma_mode_is_supported@@XZ_5.0+0x600c>  // b.none
   16090:	ldrb	w8, [x6, x28]
   16094:	lsl	w27, w27, #8
   16098:	add	x28, x28, #0x1
   1609c:	bfi	w8, w22, #8, #24
   160a0:	b	164ac <lzma_mode_is_supported@@XZ_5.0+0x47e8>
   160a4:	sub	w9, w8, w8, lsr #5
   160a8:	mov	w8, #0x1                   	// #1
   160ac:	sub	w27, w10, w27
   160b0:	strh	w9, [x11]
   160b4:	bfi	w8, w19, #1, #31
   160b8:	mov	w9, w12
   160bc:	sub	w2, w8, #0x6
   160c0:	b	167b4 <lzma_mode_is_supported@@XZ_5.0+0x4af0>
   160c4:	sub	w27, w10, w27
   160c8:	ldur	x10, [x29, #-24]
   160cc:	sub	w9, w11, w11, lsr #5
   160d0:	strh	w9, [x10]
   160d4:	lsr	w9, w27, #24
   160d8:	cbnz	w9, 160f8 <lzma_mode_is_supported@@XZ_5.0+0x4434>
   160dc:	cmp	x28, x4
   160e0:	b.eq	17cdc <lzma_mode_is_supported@@XZ_5.0+0x6018>  // b.none
   160e4:	ldrb	w9, [x6, x28]
   160e8:	lsl	w10, w27, #8
   160ec:	add	x28, x28, #0x1
   160f0:	bfi	w9, w22, #8, #24
   160f4:	b	16100 <lzma_mode_is_supported@@XZ_5.0+0x443c>
   160f8:	mov	w10, w27
   160fc:	mov	w9, w22
   16100:	ldur	x11, [x29, #-24]
   16104:	lsr	w12, w10, #11
   16108:	ldrh	w11, [x11, #2]
   1610c:	mul	w27, w12, w11
   16110:	subs	w22, w9, w27
   16114:	b.cs	161c0 <lzma_mode_is_supported@@XZ_5.0+0x44fc>  // b.hs, b.nlast
   16118:	mov	w10, #0x800                 	// #2048
   1611c:	sub	w10, w10, w11
   16120:	add	w10, w11, w10, lsr #5
   16124:	ldur	x11, [x29, #-24]
   16128:	mov	w22, w9
   1612c:	strh	w10, [x11, #2]
   16130:	lsr	w9, w27, #24
   16134:	cbnz	w9, 16154 <lzma_mode_is_supported@@XZ_5.0+0x4490>
   16138:	cmp	x28, x4
   1613c:	b.eq	17ce8 <lzma_mode_is_supported@@XZ_5.0+0x6024>  // b.none
   16140:	ldrb	w9, [x6, x28]
   16144:	lsl	w10, w27, #8
   16148:	add	x28, x28, #0x1
   1614c:	bfi	w9, w22, #8, #24
   16150:	b	1615c <lzma_mode_is_supported@@XZ_5.0+0x4498>
   16154:	mov	w10, w27
   16158:	mov	w9, w22
   1615c:	ldur	x11, [x29, #-16]
   16160:	mov	w12, #0x6768                	// #26472
   16164:	lsr	w13, w10, #11
   16168:	add	x11, x11, w8, uxtw #4
   1616c:	add	x11, x11, w19, uxtw #1
   16170:	add	x11, x11, x12
   16174:	ldrh	w12, [x11]
   16178:	mul	w27, w13, w12
   1617c:	subs	w22, w9, w27
   16180:	b.cs	1625c <lzma_mode_is_supported@@XZ_5.0+0x4598>  // b.hs, b.nlast
   16184:	mov	w10, #0x800                 	// #2048
   16188:	sub	w10, w10, w12
   1618c:	add	w10, w12, w10, lsr #5
   16190:	lsl	w19, w19, #1
   16194:	strh	w10, [x11]
   16198:	mov	w22, w9
   1619c:	lsr	w9, w27, #24
   161a0:	cbnz	w9, 1627c <lzma_mode_is_supported@@XZ_5.0+0x45b8>
   161a4:	cmp	x28, x4
   161a8:	b.eq	17cf4 <lzma_mode_is_supported@@XZ_5.0+0x6030>  // b.none
   161ac:	ldrb	w9, [x6, x28]
   161b0:	lsl	w10, w27, #8
   161b4:	add	x28, x28, #0x1
   161b8:	bfi	w9, w22, #8, #24
   161bc:	b	16284 <lzma_mode_is_supported@@XZ_5.0+0x45c0>
   161c0:	ldur	x9, [x29, #-24]
   161c4:	sub	w27, w10, w27
   161c8:	sub	w8, w11, w11, lsr #5
   161cc:	strh	w8, [x9, #2]
   161d0:	lsr	w8, w27, #24
   161d4:	cbnz	w8, 161f4 <lzma_mode_is_supported@@XZ_5.0+0x4530>
   161d8:	cmp	x28, x4
   161dc:	b.eq	17d00 <lzma_mode_is_supported@@XZ_5.0+0x603c>  // b.none
   161e0:	ldrb	w8, [x6, x28]
   161e4:	lsl	w27, w27, #8
   161e8:	add	x28, x28, #0x1
   161ec:	bfi	w8, w22, #8, #24
   161f0:	b	161f8 <lzma_mode_is_supported@@XZ_5.0+0x4534>
   161f4:	mov	w8, w22
   161f8:	ldur	x10, [x29, #-16]
   161fc:	mov	w9, #0x6868                	// #26728
   16200:	mov	w11, w19
   16204:	add	x10, x10, x9
   16208:	ldrh	w12, [x10, w19, uxtw #1]
   1620c:	lsr	w9, w27, #11
   16210:	mul	w9, w9, w12
   16214:	subs	w22, w8, w9
   16218:	b.cs	162e8 <lzma_mode_is_supported@@XZ_5.0+0x4624>  // b.hs, b.nlast
   1621c:	mov	w13, #0x800                 	// #2048
   16220:	sub	w13, w13, w12
   16224:	add	w12, w12, w13, lsr #5
   16228:	lsl	w19, w19, #1
   1622c:	strh	w12, [x10, x11, lsl #1]
   16230:	mov	w27, w9
   16234:	mov	w22, w8
   16238:	lsr	w8, w27, #24
   1623c:	cbnz	w8, 16308 <lzma_mode_is_supported@@XZ_5.0+0x4644>
   16240:	cmp	x28, x4
   16244:	b.eq	17d0c <lzma_mode_is_supported@@XZ_5.0+0x6048>  // b.none
   16248:	ldrb	w8, [x6, x28]
   1624c:	lsl	w27, w27, #8
   16250:	add	x28, x28, #0x1
   16254:	bfi	w8, w22, #8, #24
   16258:	b	1630c <lzma_mode_is_supported@@XZ_5.0+0x4648>
   1625c:	sub	w27, w10, w27
   16260:	mov	w10, #0x1                   	// #1
   16264:	bfi	w10, w19, #1, #31
   16268:	sub	w9, w12, w12, lsr #5
   1626c:	mov	w19, w10
   16270:	strh	w9, [x11]
   16274:	lsr	w9, w27, #24
   16278:	cbz	w9, 161a4 <lzma_mode_is_supported@@XZ_5.0+0x44e0>
   1627c:	mov	w10, w27
   16280:	mov	w9, w22
   16284:	ldur	x11, [x29, #-16]
   16288:	mov	w12, #0x6768                	// #26472
   1628c:	lsr	w13, w10, #11
   16290:	add	x11, x11, w8, uxtw #4
   16294:	add	x11, x11, w19, uxtw #1
   16298:	add	x11, x11, x12
   1629c:	ldrh	w12, [x11]
   162a0:	mul	w27, w13, w12
   162a4:	subs	w22, w9, w27
   162a8:	b.cs	16370 <lzma_mode_is_supported@@XZ_5.0+0x46ac>  // b.hs, b.nlast
   162ac:	mov	w10, #0x800                 	// #2048
   162b0:	sub	w10, w10, w12
   162b4:	add	w10, w12, w10, lsr #5
   162b8:	lsl	w19, w19, #1
   162bc:	strh	w10, [x11]
   162c0:	mov	w22, w9
   162c4:	lsr	w9, w27, #24
   162c8:	cbnz	w9, 16390 <lzma_mode_is_supported@@XZ_5.0+0x46cc>
   162cc:	cmp	x28, x4
   162d0:	b.eq	17d18 <lzma_mode_is_supported@@XZ_5.0+0x6054>  // b.none
   162d4:	ldrb	w9, [x6, x28]
   162d8:	lsl	w10, w27, #8
   162dc:	add	x28, x28, #0x1
   162e0:	bfi	w9, w22, #8, #24
   162e4:	b	16398 <lzma_mode_is_supported@@XZ_5.0+0x46d4>
   162e8:	sub	w27, w27, w9
   162ec:	mov	w9, #0x1                   	// #1
   162f0:	bfi	w9, w19, #1, #31
   162f4:	sub	w8, w12, w12, lsr #5
   162f8:	mov	w19, w9
   162fc:	strh	w8, [x10, x11, lsl #1]
   16300:	lsr	w8, w27, #24
   16304:	cbz	w8, 16240 <lzma_mode_is_supported@@XZ_5.0+0x457c>
   16308:	mov	w8, w22
   1630c:	ldur	x10, [x29, #-16]
   16310:	mov	w9, #0x6868                	// #26728
   16314:	mov	w11, w19
   16318:	add	x10, x10, x9
   1631c:	ldrh	w12, [x10, w19, uxtw #1]
   16320:	lsr	w9, w27, #11
   16324:	mul	w9, w9, w12
   16328:	subs	w22, w8, w9
   1632c:	b.cs	16598 <lzma_mode_is_supported@@XZ_5.0+0x48d4>  // b.hs, b.nlast
   16330:	mov	w13, #0x800                 	// #2048
   16334:	sub	w13, w13, w12
   16338:	add	w12, w12, w13, lsr #5
   1633c:	lsl	w19, w19, #1
   16340:	strh	w12, [x10, x11, lsl #1]
   16344:	mov	w27, w9
   16348:	mov	w22, w8
   1634c:	lsr	w8, w27, #24
   16350:	cbnz	w8, 165b8 <lzma_mode_is_supported@@XZ_5.0+0x48f4>
   16354:	cmp	x28, x4
   16358:	b.eq	17d24 <lzma_mode_is_supported@@XZ_5.0+0x6060>  // b.none
   1635c:	ldrb	w8, [x6, x28]
   16360:	lsl	w27, w27, #8
   16364:	add	x28, x28, #0x1
   16368:	bfi	w8, w22, #8, #24
   1636c:	b	165bc <lzma_mode_is_supported@@XZ_5.0+0x48f8>
   16370:	sub	w27, w10, w27
   16374:	mov	w10, #0x1                   	// #1
   16378:	bfi	w10, w19, #1, #31
   1637c:	sub	w9, w12, w12, lsr #5
   16380:	mov	w19, w10
   16384:	strh	w9, [x11]
   16388:	lsr	w9, w27, #24
   1638c:	cbz	w9, 162cc <lzma_mode_is_supported@@XZ_5.0+0x4608>
   16390:	mov	w10, w27
   16394:	mov	w9, w22
   16398:	ldur	x11, [x29, #-16]
   1639c:	add	x8, x11, w8, uxtw #4
   163a0:	add	x8, x8, w19, uxtw #1
   163a4:	mov	w11, #0x6768                	// #26472
   163a8:	add	x8, x8, x11
   163ac:	ldrh	w12, [x8]
   163b0:	lsr	w11, w10, #11
   163b4:	mul	w27, w11, w12
   163b8:	subs	w11, w9, w27
   163bc:	b.cs	163dc <lzma_mode_is_supported@@XZ_5.0+0x4718>  // b.hs, b.nlast
   163c0:	mov	w10, #0x800                 	// #2048
   163c4:	sub	w10, w10, w12
   163c8:	add	w10, w12, w10, lsr #5
   163cc:	strh	w10, [x8]
   163d0:	lsl	w10, w19, #1
   163d4:	add	w2, w10, #0x2
   163d8:	b	16ae4 <lzma_mode_is_supported@@XZ_5.0+0x4e20>
   163dc:	sub	w27, w10, w27
   163e0:	mov	w10, #0x1                   	// #1
   163e4:	sub	w9, w12, w12, lsr #5
   163e8:	bfi	w10, w19, #1, #31
   163ec:	strh	w9, [x8]
   163f0:	mov	w9, w11
   163f4:	add	w2, w10, #0x2
   163f8:	b	16ae4 <lzma_mode_is_supported@@XZ_5.0+0x4e20>
   163fc:	sub	w27, w27, w10
   16400:	mov	w10, #0x1                   	// #1
   16404:	bfi	w10, w19, #1, #31
   16408:	sub	w9, w12, w12, lsr #5
   1640c:	mov	w19, w10
   16410:	strh	w9, [x11]
   16414:	lsr	w9, w27, #24
   16418:	cbz	w9, 15e70 <lzma_mode_is_supported@@XZ_5.0+0x41ac>
   1641c:	mov	w10, w27
   16420:	mov	w9, w22
   16424:	ldur	x11, [x29, #-16]
   16428:	mov	w12, #0x6b6c                	// #27500
   1642c:	lsr	w13, w10, #11
   16430:	add	x11, x11, w8, uxtw #4
   16434:	add	x11, x11, w19, uxtw #1
   16438:	add	x11, x11, x12
   1643c:	ldrh	w12, [x11]
   16440:	mul	w27, w13, w12
   16444:	subs	w22, w9, w27
   16448:	b.cs	16730 <lzma_mode_is_supported@@XZ_5.0+0x4a6c>  // b.hs, b.nlast
   1644c:	mov	w10, #0x800                 	// #2048
   16450:	sub	w10, w10, w12
   16454:	add	w10, w12, w10, lsr #5
   16458:	lsl	w19, w19, #1
   1645c:	strh	w10, [x11]
   16460:	mov	w22, w9
   16464:	lsr	w9, w27, #24
   16468:	cbnz	w9, 16750 <lzma_mode_is_supported@@XZ_5.0+0x4a8c>
   1646c:	cmp	x28, x4
   16470:	b.eq	17d30 <lzma_mode_is_supported@@XZ_5.0+0x606c>  // b.none
   16474:	ldrb	w9, [x6, x28]
   16478:	lsl	w10, w27, #8
   1647c:	add	x28, x28, #0x1
   16480:	bfi	w9, w22, #8, #24
   16484:	b	16758 <lzma_mode_is_supported@@XZ_5.0+0x4a94>
   16488:	sub	w27, w27, w9
   1648c:	mov	w9, #0x1                   	// #1
   16490:	bfi	w9, w19, #1, #31
   16494:	sub	w8, w12, w12, lsr #5
   16498:	mov	w19, w9
   1649c:	strh	w8, [x10, x11, lsl #1]
   164a0:	lsr	w8, w27, #24
   164a4:	cbz	w8, 16088 <lzma_mode_is_supported@@XZ_5.0+0x43c4>
   164a8:	mov	w8, w22
   164ac:	ldur	x10, [x29, #-16]
   164b0:	mov	w9, #0x6c6c                	// #27756
   164b4:	mov	w11, w19
   164b8:	add	x10, x10, x9
   164bc:	ldrh	w12, [x10, w19, uxtw #1]
   164c0:	lsr	w9, w27, #11
   164c4:	mul	w9, w9, w12
   164c8:	subs	w22, w8, w9
   164cc:	b.cs	16510 <lzma_mode_is_supported@@XZ_5.0+0x484c>  // b.hs, b.nlast
   164d0:	mov	w13, #0x800                 	// #2048
   164d4:	sub	w13, w13, w12
   164d8:	add	w12, w12, w13, lsr #5
   164dc:	lsl	w19, w19, #1
   164e0:	strh	w12, [x10, x11, lsl #1]
   164e4:	mov	w27, w9
   164e8:	mov	w22, w8
   164ec:	lsr	w8, w27, #24
   164f0:	cbnz	w8, 16530 <lzma_mode_is_supported@@XZ_5.0+0x486c>
   164f4:	cmp	x28, x4
   164f8:	b.eq	17d3c <lzma_mode_is_supported@@XZ_5.0+0x6078>  // b.none
   164fc:	ldrb	w8, [x6, x28]
   16500:	lsl	w27, w27, #8
   16504:	add	x28, x28, #0x1
   16508:	bfi	w8, w22, #8, #24
   1650c:	b	16534 <lzma_mode_is_supported@@XZ_5.0+0x4870>
   16510:	sub	w27, w27, w9
   16514:	mov	w9, #0x1                   	// #1
   16518:	bfi	w9, w19, #1, #31
   1651c:	sub	w8, w12, w12, lsr #5
   16520:	mov	w19, w9
   16524:	strh	w8, [x10, x11, lsl #1]
   16528:	lsr	w8, w27, #24
   1652c:	cbz	w8, 164f4 <lzma_mode_is_supported@@XZ_5.0+0x4830>
   16530:	mov	w8, w22
   16534:	ldur	x10, [x29, #-16]
   16538:	mov	w9, #0x6c6c                	// #27756
   1653c:	mov	w11, w19
   16540:	add	x10, x10, x9
   16544:	ldrh	w12, [x10, w19, uxtw #1]
   16548:	lsr	w9, w27, #11
   1654c:	mul	w9, w9, w12
   16550:	subs	w22, w8, w9
   16554:	b.cs	167bc <lzma_mode_is_supported@@XZ_5.0+0x4af8>  // b.hs, b.nlast
   16558:	mov	w13, #0x800                 	// #2048
   1655c:	sub	w13, w13, w12
   16560:	add	w12, w12, w13, lsr #5
   16564:	lsl	w19, w19, #1
   16568:	strh	w12, [x10, x11, lsl #1]
   1656c:	mov	w27, w9
   16570:	mov	w22, w8
   16574:	lsr	w8, w27, #24
   16578:	cbnz	w8, 167dc <lzma_mode_is_supported@@XZ_5.0+0x4b18>
   1657c:	cmp	x28, x4
   16580:	b.eq	17d48 <lzma_mode_is_supported@@XZ_5.0+0x6084>  // b.none
   16584:	ldrb	w8, [x6, x28]
   16588:	lsl	w27, w27, #8
   1658c:	add	x28, x28, #0x1
   16590:	bfi	w8, w22, #8, #24
   16594:	b	167e0 <lzma_mode_is_supported@@XZ_5.0+0x4b1c>
   16598:	sub	w27, w27, w9
   1659c:	mov	w9, #0x1                   	// #1
   165a0:	bfi	w9, w19, #1, #31
   165a4:	sub	w8, w12, w12, lsr #5
   165a8:	mov	w19, w9
   165ac:	strh	w8, [x10, x11, lsl #1]
   165b0:	lsr	w8, w27, #24
   165b4:	cbz	w8, 16354 <lzma_mode_is_supported@@XZ_5.0+0x4690>
   165b8:	mov	w8, w22
   165bc:	ldur	x10, [x29, #-16]
   165c0:	mov	w9, #0x6868                	// #26728
   165c4:	mov	w11, w19
   165c8:	add	x10, x10, x9
   165cc:	ldrh	w12, [x10, w19, uxtw #1]
   165d0:	lsr	w9, w27, #11
   165d4:	mul	w9, w9, w12
   165d8:	subs	w22, w8, w9
   165dc:	b.cs	16620 <lzma_mode_is_supported@@XZ_5.0+0x495c>  // b.hs, b.nlast
   165e0:	mov	w13, #0x800                 	// #2048
   165e4:	sub	w13, w13, w12
   165e8:	add	w12, w12, w13, lsr #5
   165ec:	lsl	w19, w19, #1
   165f0:	strh	w12, [x10, x11, lsl #1]
   165f4:	mov	w27, w9
   165f8:	mov	w22, w8
   165fc:	lsr	w8, w27, #24
   16600:	cbnz	w8, 16640 <lzma_mode_is_supported@@XZ_5.0+0x497c>
   16604:	cmp	x28, x4
   16608:	b.eq	17d54 <lzma_mode_is_supported@@XZ_5.0+0x6090>  // b.none
   1660c:	ldrb	w8, [x6, x28]
   16610:	lsl	w27, w27, #8
   16614:	add	x28, x28, #0x1
   16618:	bfi	w8, w22, #8, #24
   1661c:	b	16644 <lzma_mode_is_supported@@XZ_5.0+0x4980>
   16620:	sub	w27, w27, w9
   16624:	mov	w9, #0x1                   	// #1
   16628:	bfi	w9, w19, #1, #31
   1662c:	sub	w8, w12, w12, lsr #5
   16630:	mov	w19, w9
   16634:	strh	w8, [x10, x11, lsl #1]
   16638:	lsr	w8, w27, #24
   1663c:	cbz	w8, 16604 <lzma_mode_is_supported@@XZ_5.0+0x4940>
   16640:	mov	w8, w22
   16644:	ldur	x10, [x29, #-16]
   16648:	mov	w9, #0x6868                	// #26728
   1664c:	mov	w11, w19
   16650:	add	x10, x10, x9
   16654:	ldrh	w12, [x10, w19, uxtw #1]
   16658:	lsr	w9, w27, #11
   1665c:	mul	w9, w9, w12
   16660:	subs	w22, w8, w9
   16664:	b.cs	166a8 <lzma_mode_is_supported@@XZ_5.0+0x49e4>  // b.hs, b.nlast
   16668:	mov	w13, #0x800                 	// #2048
   1666c:	sub	w13, w13, w12
   16670:	add	w12, w12, w13, lsr #5
   16674:	lsl	w19, w19, #1
   16678:	strh	w12, [x10, x11, lsl #1]
   1667c:	mov	w27, w9
   16680:	mov	w22, w8
   16684:	lsr	w8, w27, #24
   16688:	cbnz	w8, 166c8 <lzma_mode_is_supported@@XZ_5.0+0x4a04>
   1668c:	cmp	x28, x4
   16690:	b.eq	17d60 <lzma_mode_is_supported@@XZ_5.0+0x609c>  // b.none
   16694:	ldrb	w8, [x6, x28]
   16698:	lsl	w27, w27, #8
   1669c:	add	x28, x28, #0x1
   166a0:	bfi	w8, w22, #8, #24
   166a4:	b	166cc <lzma_mode_is_supported@@XZ_5.0+0x4a08>
   166a8:	sub	w27, w27, w9
   166ac:	mov	w9, #0x1                   	// #1
   166b0:	bfi	w9, w19, #1, #31
   166b4:	sub	w8, w12, w12, lsr #5
   166b8:	mov	w19, w9
   166bc:	strh	w8, [x10, x11, lsl #1]
   166c0:	lsr	w8, w27, #24
   166c4:	cbz	w8, 1668c <lzma_mode_is_supported@@XZ_5.0+0x49c8>
   166c8:	mov	w8, w22
   166cc:	ldur	x10, [x29, #-16]
   166d0:	mov	w9, #0x6868                	// #26728
   166d4:	mov	w11, w19
   166d8:	add	x10, x10, x9
   166dc:	ldrh	w12, [x10, w19, uxtw #1]
   166e0:	lsr	w9, w27, #11
   166e4:	mul	w9, w9, w12
   166e8:	subs	w22, w8, w9
   166ec:	b.cs	168cc <lzma_mode_is_supported@@XZ_5.0+0x4c08>  // b.hs, b.nlast
   166f0:	mov	w13, #0x800                 	// #2048
   166f4:	sub	w13, w13, w12
   166f8:	add	w12, w12, w13, lsr #5
   166fc:	lsl	w19, w19, #1
   16700:	strh	w12, [x10, x11, lsl #1]
   16704:	mov	w27, w9
   16708:	mov	w22, w8
   1670c:	lsr	w8, w27, #24
   16710:	cbnz	w8, 168ec <lzma_mode_is_supported@@XZ_5.0+0x4c28>
   16714:	cmp	x28, x4
   16718:	b.eq	17d6c <lzma_mode_is_supported@@XZ_5.0+0x60a8>  // b.none
   1671c:	ldrb	w8, [x6, x28]
   16720:	lsl	w27, w27, #8
   16724:	add	x28, x28, #0x1
   16728:	bfi	w8, w22, #8, #24
   1672c:	b	168f0 <lzma_mode_is_supported@@XZ_5.0+0x4c2c>
   16730:	sub	w27, w10, w27
   16734:	mov	w10, #0x1                   	// #1
   16738:	bfi	w10, w19, #1, #31
   1673c:	sub	w9, w12, w12, lsr #5
   16740:	mov	w19, w10
   16744:	strh	w9, [x11]
   16748:	lsr	w9, w27, #24
   1674c:	cbz	w9, 1646c <lzma_mode_is_supported@@XZ_5.0+0x47a8>
   16750:	mov	w10, w27
   16754:	mov	w9, w22
   16758:	ldur	x11, [x29, #-16]
   1675c:	lsr	w12, w10, #11
   16760:	add	x8, x11, w8, uxtw #4
   16764:	add	x8, x8, w19, uxtw #1
   16768:	mov	w11, #0x6b6c                	// #27500
   1676c:	add	x11, x8, x11
   16770:	ldrh	w8, [x11]
   16774:	mul	w27, w12, w8
   16778:	subs	w12, w9, w27
   1677c:	b.cs	16798 <lzma_mode_is_supported@@XZ_5.0+0x4ad4>  // b.hs, b.nlast
   16780:	mov	w10, #0x800                 	// #2048
   16784:	sub	w10, w10, w8
   16788:	add	w8, w8, w10, lsr #5
   1678c:	strh	w8, [x11]
   16790:	lsl	w8, w19, #1
   16794:	b	167b0 <lzma_mode_is_supported@@XZ_5.0+0x4aec>
   16798:	sub	w9, w8, w8, lsr #5
   1679c:	mov	w8, #0x1                   	// #1
   167a0:	bfi	w8, w19, #1, #31
   167a4:	sub	w27, w10, w27
   167a8:	strh	w9, [x11]
   167ac:	mov	w9, w12
   167b0:	add	w2, w8, #0x2
   167b4:	mov	w19, w8
   167b8:	b	17964 <lzma_mode_is_supported@@XZ_5.0+0x5ca0>
   167bc:	sub	w27, w27, w9
   167c0:	mov	w9, #0x1                   	// #1
   167c4:	bfi	w9, w19, #1, #31
   167c8:	sub	w8, w12, w12, lsr #5
   167cc:	mov	w19, w9
   167d0:	strh	w8, [x10, x11, lsl #1]
   167d4:	lsr	w8, w27, #24
   167d8:	cbz	w8, 1657c <lzma_mode_is_supported@@XZ_5.0+0x48b8>
   167dc:	mov	w8, w22
   167e0:	ldur	x10, [x29, #-16]
   167e4:	mov	w9, #0x6c6c                	// #27756
   167e8:	mov	w11, w19
   167ec:	add	x10, x10, x9
   167f0:	ldrh	w12, [x10, w19, uxtw #1]
   167f4:	lsr	w9, w27, #11
   167f8:	mul	w9, w9, w12
   167fc:	subs	w22, w8, w9
   16800:	b.cs	16844 <lzma_mode_is_supported@@XZ_5.0+0x4b80>  // b.hs, b.nlast
   16804:	mov	w13, #0x800                 	// #2048
   16808:	sub	w13, w13, w12
   1680c:	add	w12, w12, w13, lsr #5
   16810:	lsl	w19, w19, #1
   16814:	strh	w12, [x10, x11, lsl #1]
   16818:	mov	w27, w9
   1681c:	mov	w22, w8
   16820:	lsr	w8, w27, #24
   16824:	cbnz	w8, 16864 <lzma_mode_is_supported@@XZ_5.0+0x4ba0>
   16828:	cmp	x28, x4
   1682c:	b.eq	17d78 <lzma_mode_is_supported@@XZ_5.0+0x60b4>  // b.none
   16830:	ldrb	w8, [x6, x28]
   16834:	lsl	w27, w27, #8
   16838:	add	x28, x28, #0x1
   1683c:	bfi	w8, w22, #8, #24
   16840:	b	16868 <lzma_mode_is_supported@@XZ_5.0+0x4ba4>
   16844:	sub	w27, w27, w9
   16848:	mov	w9, #0x1                   	// #1
   1684c:	bfi	w9, w19, #1, #31
   16850:	sub	w8, w12, w12, lsr #5
   16854:	mov	w19, w9
   16858:	strh	w8, [x10, x11, lsl #1]
   1685c:	lsr	w8, w27, #24
   16860:	cbz	w8, 16828 <lzma_mode_is_supported@@XZ_5.0+0x4b64>
   16864:	mov	w8, w22
   16868:	ldur	x10, [x29, #-16]
   1686c:	mov	w9, #0x6c6c                	// #27756
   16870:	mov	w11, w19
   16874:	add	x10, x10, x9
   16878:	ldrh	w12, [x10, w19, uxtw #1]
   1687c:	lsr	w9, w27, #11
   16880:	mul	w9, w9, w12
   16884:	subs	w22, w8, w9
   16888:	b.cs	16954 <lzma_mode_is_supported@@XZ_5.0+0x4c90>  // b.hs, b.nlast
   1688c:	mov	w13, #0x800                 	// #2048
   16890:	sub	w13, w13, w12
   16894:	add	w12, w12, w13, lsr #5
   16898:	lsl	w19, w19, #1
   1689c:	strh	w12, [x10, x11, lsl #1]
   168a0:	mov	w27, w9
   168a4:	mov	w22, w8
   168a8:	lsr	w8, w27, #24
   168ac:	cbnz	w8, 16974 <lzma_mode_is_supported@@XZ_5.0+0x4cb0>
   168b0:	cmp	x28, x4
   168b4:	b.eq	17d84 <lzma_mode_is_supported@@XZ_5.0+0x60c0>  // b.none
   168b8:	ldrb	w8, [x6, x28]
   168bc:	lsl	w27, w27, #8
   168c0:	add	x28, x28, #0x1
   168c4:	bfi	w8, w22, #8, #24
   168c8:	b	16978 <lzma_mode_is_supported@@XZ_5.0+0x4cb4>
   168cc:	sub	w27, w27, w9
   168d0:	mov	w9, #0x1                   	// #1
   168d4:	bfi	w9, w19, #1, #31
   168d8:	sub	w8, w12, w12, lsr #5
   168dc:	mov	w19, w9
   168e0:	strh	w8, [x10, x11, lsl #1]
   168e4:	lsr	w8, w27, #24
   168e8:	cbz	w8, 16714 <lzma_mode_is_supported@@XZ_5.0+0x4a50>
   168ec:	mov	w8, w22
   168f0:	ldur	x10, [x29, #-16]
   168f4:	mov	w9, #0x6868                	// #26728
   168f8:	mov	w11, w19
   168fc:	add	x10, x10, x9
   16900:	ldrh	w12, [x10, w19, uxtw #1]
   16904:	lsr	w9, w27, #11
   16908:	mul	w9, w9, w12
   1690c:	subs	w22, w8, w9
   16910:	b.cs	169dc <lzma_mode_is_supported@@XZ_5.0+0x4d18>  // b.hs, b.nlast
   16914:	mov	w13, #0x800                 	// #2048
   16918:	sub	w13, w13, w12
   1691c:	add	w12, w12, w13, lsr #5
   16920:	lsl	w19, w19, #1
   16924:	strh	w12, [x10, x11, lsl #1]
   16928:	mov	w27, w9
   1692c:	mov	w22, w8
   16930:	lsr	w8, w27, #24
   16934:	cbnz	w8, 169fc <lzma_mode_is_supported@@XZ_5.0+0x4d38>
   16938:	cmp	x28, x4
   1693c:	b.eq	17d90 <lzma_mode_is_supported@@XZ_5.0+0x60cc>  // b.none
   16940:	ldrb	w8, [x6, x28]
   16944:	lsl	w27, w27, #8
   16948:	add	x28, x28, #0x1
   1694c:	bfi	w8, w22, #8, #24
   16950:	b	16a00 <lzma_mode_is_supported@@XZ_5.0+0x4d3c>
   16954:	sub	w27, w27, w9
   16958:	mov	w9, #0x1                   	// #1
   1695c:	bfi	w9, w19, #1, #31
   16960:	sub	w8, w12, w12, lsr #5
   16964:	mov	w19, w9
   16968:	strh	w8, [x10, x11, lsl #1]
   1696c:	lsr	w8, w27, #24
   16970:	cbz	w8, 168b0 <lzma_mode_is_supported@@XZ_5.0+0x4bec>
   16974:	mov	w8, w22
   16978:	ldur	x10, [x29, #-16]
   1697c:	mov	w9, #0x6c6c                	// #27756
   16980:	mov	w11, w19
   16984:	add	x10, x10, x9
   16988:	ldrh	w12, [x10, w19, uxtw #1]
   1698c:	lsr	w9, w27, #11
   16990:	mul	w9, w9, w12
   16994:	subs	w22, w8, w9
   16998:	b.cs	16b8c <lzma_mode_is_supported@@XZ_5.0+0x4ec8>  // b.hs, b.nlast
   1699c:	mov	w13, #0x800                 	// #2048
   169a0:	sub	w13, w13, w12
   169a4:	add	w12, w12, w13, lsr #5
   169a8:	lsl	w19, w19, #1
   169ac:	strh	w12, [x10, x11, lsl #1]
   169b0:	mov	w27, w9
   169b4:	mov	w22, w8
   169b8:	lsr	w8, w27, #24
   169bc:	cbnz	w8, 16bac <lzma_mode_is_supported@@XZ_5.0+0x4ee8>
   169c0:	cmp	x28, x4
   169c4:	b.eq	17d9c <lzma_mode_is_supported@@XZ_5.0+0x60d8>  // b.none
   169c8:	ldrb	w8, [x6, x28]
   169cc:	lsl	w9, w27, #8
   169d0:	add	x28, x28, #0x1
   169d4:	bfi	w8, w22, #8, #24
   169d8:	b	16bb4 <lzma_mode_is_supported@@XZ_5.0+0x4ef0>
   169dc:	sub	w27, w27, w9
   169e0:	mov	w9, #0x1                   	// #1
   169e4:	bfi	w9, w19, #1, #31
   169e8:	sub	w8, w12, w12, lsr #5
   169ec:	mov	w19, w9
   169f0:	strh	w8, [x10, x11, lsl #1]
   169f4:	lsr	w8, w27, #24
   169f8:	cbz	w8, 16938 <lzma_mode_is_supported@@XZ_5.0+0x4c74>
   169fc:	mov	w8, w22
   16a00:	ldur	x10, [x29, #-16]
   16a04:	mov	w9, #0x6868                	// #26728
   16a08:	mov	w11, w19
   16a0c:	add	x10, x10, x9
   16a10:	ldrh	w12, [x10, w19, uxtw #1]
   16a14:	lsr	w9, w27, #11
   16a18:	mul	w9, w9, w12
   16a1c:	subs	w22, w8, w9
   16a20:	b.cs	16a64 <lzma_mode_is_supported@@XZ_5.0+0x4da0>  // b.hs, b.nlast
   16a24:	mov	w13, #0x800                 	// #2048
   16a28:	sub	w13, w13, w12
   16a2c:	add	w12, w12, w13, lsr #5
   16a30:	lsl	w19, w19, #1
   16a34:	strh	w12, [x10, x11, lsl #1]
   16a38:	mov	w27, w9
   16a3c:	mov	w22, w8
   16a40:	lsr	w8, w27, #24
   16a44:	cbnz	w8, 16a84 <lzma_mode_is_supported@@XZ_5.0+0x4dc0>
   16a48:	cmp	x28, x4
   16a4c:	b.eq	17da8 <lzma_mode_is_supported@@XZ_5.0+0x60e4>  // b.none
   16a50:	ldrb	w9, [x6, x28]
   16a54:	lsl	w8, w27, #8
   16a58:	add	x28, x28, #0x1
   16a5c:	bfi	w9, w22, #8, #24
   16a60:	b	16a8c <lzma_mode_is_supported@@XZ_5.0+0x4dc8>
   16a64:	sub	w27, w27, w9
   16a68:	mov	w9, #0x1                   	// #1
   16a6c:	bfi	w9, w19, #1, #31
   16a70:	sub	w8, w12, w12, lsr #5
   16a74:	mov	w19, w9
   16a78:	strh	w8, [x10, x11, lsl #1]
   16a7c:	lsr	w8, w27, #24
   16a80:	cbz	w8, 16a48 <lzma_mode_is_supported@@XZ_5.0+0x4d84>
   16a84:	mov	w8, w27
   16a88:	mov	w9, w22
   16a8c:	ldur	x11, [x29, #-16]
   16a90:	mov	w10, #0x6868                	// #26728
   16a94:	mov	w12, w19
   16a98:	add	x10, x11, x10
   16a9c:	ldrh	w13, [x10, w19, uxtw #1]
   16aa0:	lsr	w11, w8, #11
   16aa4:	mul	w27, w11, w13
   16aa8:	subs	w11, w9, w27
   16aac:	b.cs	16ac8 <lzma_mode_is_supported@@XZ_5.0+0x4e04>  // b.hs, b.nlast
   16ab0:	mov	w8, #0x800                 	// #2048
   16ab4:	sub	w8, w8, w13
   16ab8:	add	w8, w13, w8, lsr #5
   16abc:	strh	w8, [x10, x12, lsl #1]
   16ac0:	lsl	w8, w19, #1
   16ac4:	b	16ae0 <lzma_mode_is_supported@@XZ_5.0+0x4e1c>
   16ac8:	sub	w27, w8, w27
   16acc:	sub	w9, w13, w13, lsr #5
   16ad0:	mov	w8, #0x1                   	// #1
   16ad4:	strh	w9, [x10, x12, lsl #1]
   16ad8:	bfi	w8, w19, #1, #31
   16adc:	mov	w9, w11
   16ae0:	sub	w2, w8, #0xee
   16ae4:	sub	w8, w2, #0x2
   16ae8:	cmp	w2, #0x6
   16aec:	mov	w10, #0x3                   	// #3
   16af0:	csel	w8, w8, w10, cc  // cc = lo, ul, last
   16af4:	ldur	x10, [x29, #-16]
   16af8:	mov	w11, #0x6360                	// #25440
   16afc:	mov	w19, #0x1                   	// #1
   16b00:	mov	w22, w9
   16b04:	add	x8, x10, x8, lsl #7
   16b08:	add	x18, x8, x11
   16b0c:	lsr	w8, w27, #24
   16b10:	cbnz	w8, 16b30 <lzma_mode_is_supported@@XZ_5.0+0x4e6c>
   16b14:	cmp	x28, x4
   16b18:	b.eq	17db4 <lzma_mode_is_supported@@XZ_5.0+0x60f0>  // b.none
   16b1c:	ldrb	w8, [x6, x28]
   16b20:	lsl	w9, w27, #8
   16b24:	add	x28, x28, #0x1
   16b28:	bfi	w8, w22, #8, #24
   16b2c:	b	16b38 <lzma_mode_is_supported@@XZ_5.0+0x4e74>
   16b30:	mov	w9, w27
   16b34:	mov	w8, w22
   16b38:	ldrh	w11, [x18, w19, uxtw #1]
   16b3c:	lsr	w10, w9, #11
   16b40:	mul	w27, w10, w11
   16b44:	subs	w22, w8, w27
   16b48:	mov	w10, w19
   16b4c:	b.cs	16c18 <lzma_mode_is_supported@@XZ_5.0+0x4f54>  // b.hs, b.nlast
   16b50:	mov	w9, #0x800                 	// #2048
   16b54:	sub	w9, w9, w11
   16b58:	add	w9, w11, w9, lsr #5
   16b5c:	lsl	w19, w19, #1
   16b60:	strh	w9, [x18, x10, lsl #1]
   16b64:	mov	w22, w8
   16b68:	lsr	w8, w27, #24
   16b6c:	cbnz	w8, 16c38 <lzma_mode_is_supported@@XZ_5.0+0x4f74>
   16b70:	cmp	x28, x4
   16b74:	b.eq	17dc0 <lzma_mode_is_supported@@XZ_5.0+0x60fc>  // b.none
   16b78:	ldrb	w8, [x6, x28]
   16b7c:	lsl	w9, w27, #8
   16b80:	add	x28, x28, #0x1
   16b84:	bfi	w8, w22, #8, #24
   16b88:	b	16c40 <lzma_mode_is_supported@@XZ_5.0+0x4f7c>
   16b8c:	sub	w27, w27, w9
   16b90:	mov	w9, #0x1                   	// #1
   16b94:	bfi	w9, w19, #1, #31
   16b98:	sub	w8, w12, w12, lsr #5
   16b9c:	mov	w19, w9
   16ba0:	strh	w8, [x10, x11, lsl #1]
   16ba4:	lsr	w8, w27, #24
   16ba8:	cbz	w8, 169c0 <lzma_mode_is_supported@@XZ_5.0+0x4cfc>
   16bac:	mov	w9, w27
   16bb0:	mov	w8, w22
   16bb4:	ldur	x11, [x29, #-16]
   16bb8:	mov	w10, #0x6c6c                	// #27756
   16bbc:	mov	w12, w19
   16bc0:	add	x10, x11, x10
   16bc4:	ldrh	w13, [x10, w19, uxtw #1]
   16bc8:	lsr	w11, w9, #11
   16bcc:	mul	w27, w11, w13
   16bd0:	subs	w11, w8, w27
   16bd4:	b.cs	16bf0 <lzma_mode_is_supported@@XZ_5.0+0x4f2c>  // b.hs, b.nlast
   16bd8:	mov	w9, #0x800                 	// #2048
   16bdc:	sub	w9, w9, w13
   16be0:	add	w9, w13, w9, lsr #5
   16be4:	strh	w9, [x10, x12, lsl #1]
   16be8:	lsl	w9, w19, #1
   16bec:	b	16c08 <lzma_mode_is_supported@@XZ_5.0+0x4f44>
   16bf0:	sub	w27, w9, w27
   16bf4:	sub	w8, w13, w13, lsr #5
   16bf8:	mov	w9, #0x1                   	// #1
   16bfc:	strh	w8, [x10, x12, lsl #1]
   16c00:	bfi	w9, w19, #1, #31
   16c04:	mov	w8, w11
   16c08:	sub	w2, w9, #0xee
   16c0c:	mov	w19, w9
   16c10:	mov	w22, w8
   16c14:	b	17968 <lzma_mode_is_supported@@XZ_5.0+0x5ca4>
   16c18:	sub	w27, w9, w27
   16c1c:	mov	w9, #0x1                   	// #1
   16c20:	bfi	w9, w19, #1, #31
   16c24:	sub	w8, w11, w11, lsr #5
   16c28:	mov	w19, w9
   16c2c:	strh	w8, [x18, x10, lsl #1]
   16c30:	lsr	w8, w27, #24
   16c34:	cbz	w8, 16b70 <lzma_mode_is_supported@@XZ_5.0+0x4eac>
   16c38:	mov	w9, w27
   16c3c:	mov	w8, w22
   16c40:	ldrh	w11, [x18, w19, uxtw #1]
   16c44:	lsr	w10, w9, #11
   16c48:	mul	w27, w10, w11
   16c4c:	subs	w22, w8, w27
   16c50:	mov	w10, w19
   16c54:	b.cs	16c94 <lzma_mode_is_supported@@XZ_5.0+0x4fd0>  // b.hs, b.nlast
   16c58:	mov	w9, #0x800                 	// #2048
   16c5c:	sub	w9, w9, w11
   16c60:	add	w9, w11, w9, lsr #5
   16c64:	lsl	w19, w19, #1
   16c68:	strh	w9, [x18, x10, lsl #1]
   16c6c:	mov	w22, w8
   16c70:	lsr	w8, w27, #24
   16c74:	cbnz	w8, 16cb4 <lzma_mode_is_supported@@XZ_5.0+0x4ff0>
   16c78:	cmp	x28, x4
   16c7c:	b.eq	17dcc <lzma_mode_is_supported@@XZ_5.0+0x6108>  // b.none
   16c80:	ldrb	w8, [x6, x28]
   16c84:	lsl	w9, w27, #8
   16c88:	add	x28, x28, #0x1
   16c8c:	bfi	w8, w22, #8, #24
   16c90:	b	16cbc <lzma_mode_is_supported@@XZ_5.0+0x4ff8>
   16c94:	sub	w27, w9, w27
   16c98:	mov	w9, #0x1                   	// #1
   16c9c:	bfi	w9, w19, #1, #31
   16ca0:	sub	w8, w11, w11, lsr #5
   16ca4:	mov	w19, w9
   16ca8:	strh	w8, [x18, x10, lsl #1]
   16cac:	lsr	w8, w27, #24
   16cb0:	cbz	w8, 16c78 <lzma_mode_is_supported@@XZ_5.0+0x4fb4>
   16cb4:	mov	w9, w27
   16cb8:	mov	w8, w22
   16cbc:	ldrh	w11, [x18, w19, uxtw #1]
   16cc0:	lsr	w10, w9, #11
   16cc4:	mul	w27, w10, w11
   16cc8:	subs	w22, w8, w27
   16ccc:	mov	w10, w19
   16cd0:	b.cs	16d10 <lzma_mode_is_supported@@XZ_5.0+0x504c>  // b.hs, b.nlast
   16cd4:	mov	w9, #0x800                 	// #2048
   16cd8:	sub	w9, w9, w11
   16cdc:	add	w9, w11, w9, lsr #5
   16ce0:	lsl	w19, w19, #1
   16ce4:	strh	w9, [x18, x10, lsl #1]
   16ce8:	mov	w22, w8
   16cec:	lsr	w8, w27, #24
   16cf0:	cbnz	w8, 16d30 <lzma_mode_is_supported@@XZ_5.0+0x506c>
   16cf4:	cmp	x28, x4
   16cf8:	b.eq	17dd8 <lzma_mode_is_supported@@XZ_5.0+0x6114>  // b.none
   16cfc:	ldrb	w8, [x6, x28]
   16d00:	lsl	w9, w27, #8
   16d04:	add	x28, x28, #0x1
   16d08:	bfi	w8, w22, #8, #24
   16d0c:	b	16d38 <lzma_mode_is_supported@@XZ_5.0+0x5074>
   16d10:	sub	w27, w9, w27
   16d14:	mov	w9, #0x1                   	// #1
   16d18:	bfi	w9, w19, #1, #31
   16d1c:	sub	w8, w11, w11, lsr #5
   16d20:	mov	w19, w9
   16d24:	strh	w8, [x18, x10, lsl #1]
   16d28:	lsr	w8, w27, #24
   16d2c:	cbz	w8, 16cf4 <lzma_mode_is_supported@@XZ_5.0+0x5030>
   16d30:	mov	w9, w27
   16d34:	mov	w8, w22
   16d38:	ldrh	w11, [x18, w19, uxtw #1]
   16d3c:	lsr	w10, w9, #11
   16d40:	mul	w27, w10, w11
   16d44:	subs	w22, w8, w27
   16d48:	mov	w10, w19
   16d4c:	b.cs	16d8c <lzma_mode_is_supported@@XZ_5.0+0x50c8>  // b.hs, b.nlast
   16d50:	mov	w9, #0x800                 	// #2048
   16d54:	sub	w9, w9, w11
   16d58:	add	w9, w11, w9, lsr #5
   16d5c:	lsl	w19, w19, #1
   16d60:	strh	w9, [x18, x10, lsl #1]
   16d64:	mov	w22, w8
   16d68:	lsr	w8, w27, #24
   16d6c:	cbnz	w8, 16dac <lzma_mode_is_supported@@XZ_5.0+0x50e8>
   16d70:	cmp	x28, x4
   16d74:	b.eq	17de4 <lzma_mode_is_supported@@XZ_5.0+0x6120>  // b.none
   16d78:	ldrb	w8, [x6, x28]
   16d7c:	lsl	w9, w27, #8
   16d80:	add	x28, x28, #0x1
   16d84:	bfi	w8, w22, #8, #24
   16d88:	b	16db4 <lzma_mode_is_supported@@XZ_5.0+0x50f0>
   16d8c:	sub	w27, w9, w27
   16d90:	mov	w9, #0x1                   	// #1
   16d94:	bfi	w9, w19, #1, #31
   16d98:	sub	w8, w11, w11, lsr #5
   16d9c:	mov	w19, w9
   16da0:	strh	w8, [x18, x10, lsl #1]
   16da4:	lsr	w8, w27, #24
   16da8:	cbz	w8, 16d70 <lzma_mode_is_supported@@XZ_5.0+0x50ac>
   16dac:	mov	w9, w27
   16db0:	mov	w8, w22
   16db4:	ldrh	w11, [x18, w19, uxtw #1]
   16db8:	lsr	w10, w9, #11
   16dbc:	mul	w27, w10, w11
   16dc0:	subs	w22, w8, w27
   16dc4:	mov	w10, w19
   16dc8:	b.cs	16e08 <lzma_mode_is_supported@@XZ_5.0+0x5144>  // b.hs, b.nlast
   16dcc:	mov	w9, #0x800                 	// #2048
   16dd0:	sub	w9, w9, w11
   16dd4:	add	w9, w11, w9, lsr #5
   16dd8:	lsl	w19, w19, #1
   16ddc:	strh	w9, [x18, x10, lsl #1]
   16de0:	mov	w22, w8
   16de4:	lsr	w8, w27, #24
   16de8:	cbnz	w8, 16e28 <lzma_mode_is_supported@@XZ_5.0+0x5164>
   16dec:	cmp	x28, x4
   16df0:	b.eq	17df0 <lzma_mode_is_supported@@XZ_5.0+0x612c>  // b.none
   16df4:	ldrb	w9, [x6, x28]
   16df8:	lsl	w8, w27, #8
   16dfc:	add	x28, x28, #0x1
   16e00:	bfi	w9, w22, #8, #24
   16e04:	b	16e30 <lzma_mode_is_supported@@XZ_5.0+0x516c>
   16e08:	sub	w27, w9, w27
   16e0c:	mov	w9, #0x1                   	// #1
   16e10:	bfi	w9, w19, #1, #31
   16e14:	sub	w8, w11, w11, lsr #5
   16e18:	mov	w19, w9
   16e1c:	strh	w8, [x18, x10, lsl #1]
   16e20:	lsr	w8, w27, #24
   16e24:	cbz	w8, 16dec <lzma_mode_is_supported@@XZ_5.0+0x5128>
   16e28:	mov	w8, w27
   16e2c:	mov	w9, w22
   16e30:	ldrh	w12, [x18, w19, uxtw #1]
   16e34:	lsr	w10, w8, #11
   16e38:	mov	w11, w19
   16e3c:	mul	w27, w10, w12
   16e40:	subs	w10, w9, w27
   16e44:	b.cs	16ef0 <lzma_mode_is_supported@@XZ_5.0+0x522c>  // b.hs, b.nlast
   16e48:	mov	w8, #0x800                 	// #2048
   16e4c:	sub	w8, w8, w12
   16e50:	add	w8, w12, w8, lsr #5
   16e54:	strh	w8, [x18, x11, lsl #1]
   16e58:	lsl	w8, w19, #1
   16e5c:	sub	w8, w8, #0x40
   16e60:	cmp	w8, #0x4
   16e64:	b.cc	16f14 <lzma_mode_is_supported@@XZ_5.0+0x5250>  // b.lo, b.ul, b.last
   16e68:	mov	w10, #0x2                   	// #2
   16e6c:	lsr	w11, w8, #1
   16e70:	cmp	w8, #0xd
   16e74:	bfxil	w10, w8, #0, #1
   16e78:	b.hi	16f1c <lzma_mode_is_supported@@XZ_5.0+0x5258>  // b.pmore
   16e7c:	ldur	x12, [x29, #-16]
   16e80:	sub	w5, w11, #0x1
   16e84:	lsl	w10, w10, w5
   16e88:	mov	w11, #0x655e                	// #25950
   16e8c:	add	x12, x12, w10, uxtw #1
   16e90:	sub	x8, x12, w8, uxtw #1
   16e94:	mov	w26, wzr
   16e98:	mov	w3, w10
   16e9c:	add	x18, x8, x11
   16ea0:	mov	w19, #0x1                   	// #1
   16ea4:	mov	w22, w9
   16ea8:	sub	w8, w5, #0x1
   16eac:	cmp	w8, #0x4
   16eb0:	b.hi	176d8 <lzma_mode_is_supported@@XZ_5.0+0x5a14>  // b.pmore
   16eb4:	adrp	x9, 21000 <lzma_mode_is_supported@@XZ_5.0+0xf33c>
   16eb8:	add	x9, x9, #0x6f6
   16ebc:	adr	x10, 16ecc <lzma_mode_is_supported@@XZ_5.0+0x5208>
   16ec0:	ldrh	w11, [x9, x8, lsl #1]
   16ec4:	add	x10, x10, x11, lsl #2
   16ec8:	br	x10
   16ecc:	lsr	w8, w27, #24
   16ed0:	cbnz	w8, 176e4 <lzma_mode_is_supported@@XZ_5.0+0x5a20>
   16ed4:	cmp	x28, x4
   16ed8:	b.eq	17fe4 <lzma_mode_is_supported@@XZ_5.0+0x6320>  // b.none
   16edc:	ldrb	w8, [x6, x28]
   16ee0:	lsl	w9, w27, #8
   16ee4:	add	x28, x28, #0x1
   16ee8:	bfi	w8, w22, #8, #24
   16eec:	b	176ec <lzma_mode_is_supported@@XZ_5.0+0x5a28>
   16ef0:	sub	w27, w8, w27
   16ef4:	sub	w9, w12, w12, lsr #5
   16ef8:	mov	w8, #0x1                   	// #1
   16efc:	strh	w9, [x18, x11, lsl #1]
   16f00:	bfi	w8, w19, #1, #31
   16f04:	mov	w9, w10
   16f08:	sub	w8, w8, #0x40
   16f0c:	cmp	w8, #0x4
   16f10:	b.cs	16e68 <lzma_mode_is_supported@@XZ_5.0+0x51a4>  // b.hs, b.nlast
   16f14:	mov	w19, w8
   16f18:	b	17958 <lzma_mode_is_supported@@XZ_5.0+0x5c94>
   16f1c:	sub	w5, w11, #0x5
   16f20:	mov	w3, w10
   16f24:	mov	w19, w8
   16f28:	mov	w22, w9
   16f2c:	mov	w9, w22
   16f30:	mov	w8, w3
   16f34:	b	16f60 <lzma_mode_is_supported@@XZ_5.0+0x529c>
   16f38:	lsr	w27, w27, #1
   16f3c:	mov	w10, #0x1                   	// #1
   16f40:	sub	w9, w9, w27
   16f44:	bfi	w10, w8, #1, #31
   16f48:	asr	w8, w9, #31
   16f4c:	and	w11, w8, w27
   16f50:	subs	w5, w5, #0x1
   16f54:	add	w9, w11, w9
   16f58:	add	w8, w10, w8
   16f5c:	b.eq	16f88 <lzma_mode_is_supported@@XZ_5.0+0x52c4>  // b.none
   16f60:	lsr	w10, w27, #24
   16f64:	cbnz	w10, 16f38 <lzma_mode_is_supported@@XZ_5.0+0x5274>
   16f68:	cmp	x28, x4
   16f6c:	b.eq	17b2c <lzma_mode_is_supported@@XZ_5.0+0x5e68>  // b.none
   16f70:	ldrb	w10, [x6, x28]
   16f74:	add	x28, x28, #0x1
   16f78:	lsl	w27, w27, #8
   16f7c:	bfi	w10, w9, #8, #24
   16f80:	mov	w9, w10
   16f84:	b	16f38 <lzma_mode_is_supported@@XZ_5.0+0x5274>
   16f88:	lsl	w3, w8, #4
   16f8c:	mov	w19, #0x1                   	// #1
   16f90:	mov	w22, w9
   16f94:	lsr	w8, w27, #24
   16f98:	cbnz	w8, 16fb8 <lzma_mode_is_supported@@XZ_5.0+0x52f4>
   16f9c:	cmp	x28, x4
   16fa0:	b.eq	17dfc <lzma_mode_is_supported@@XZ_5.0+0x6138>  // b.none
   16fa4:	ldrb	w8, [x6, x28]
   16fa8:	lsl	w27, w27, #8
   16fac:	add	x28, x28, #0x1
   16fb0:	bfi	w8, w22, #8, #24
   16fb4:	b	16fbc <lzma_mode_is_supported@@XZ_5.0+0x52f8>
   16fb8:	mov	w8, w22
   16fbc:	ldur	x10, [x29, #-16]
   16fc0:	mov	w9, #0x6644                	// #26180
   16fc4:	mov	w11, w19
   16fc8:	add	x9, x10, x9
   16fcc:	ldrh	w12, [x9, w19, uxtw #1]
   16fd0:	lsr	w10, w27, #11
   16fd4:	mul	w10, w10, w12
   16fd8:	subs	w22, w8, w10
   16fdc:	b.cs	17020 <lzma_mode_is_supported@@XZ_5.0+0x535c>  // b.hs, b.nlast
   16fe0:	mov	w13, #0x800                 	// #2048
   16fe4:	sub	w13, w13, w12
   16fe8:	add	w12, w12, w13, lsr #5
   16fec:	lsl	w19, w19, #1
   16ff0:	strh	w12, [x9, x11, lsl #1]
   16ff4:	mov	w27, w10
   16ff8:	mov	w22, w8
   16ffc:	lsr	w8, w27, #24
   17000:	cbnz	w8, 17044 <lzma_mode_is_supported@@XZ_5.0+0x5380>
   17004:	cmp	x28, x4
   17008:	b.eq	17e08 <lzma_mode_is_supported@@XZ_5.0+0x6144>  // b.none
   1700c:	ldrb	w8, [x6, x28]
   17010:	lsl	w27, w27, #8
   17014:	add	x28, x28, #0x1
   17018:	bfi	w8, w22, #8, #24
   1701c:	b	17048 <lzma_mode_is_supported@@XZ_5.0+0x5384>
   17020:	sub	w27, w27, w10
   17024:	mov	w10, #0x1                   	// #1
   17028:	bfi	w10, w19, #1, #31
   1702c:	sub	w8, w12, w12, lsr #5
   17030:	add	w3, w3, #0x1
   17034:	mov	w19, w10
   17038:	strh	w8, [x9, x11, lsl #1]
   1703c:	lsr	w8, w27, #24
   17040:	cbz	w8, 17004 <lzma_mode_is_supported@@XZ_5.0+0x5340>
   17044:	mov	w8, w22
   17048:	ldur	x10, [x29, #-16]
   1704c:	mov	w9, #0x6644                	// #26180
   17050:	mov	w11, w19
   17054:	add	x9, x10, x9
   17058:	ldrh	w12, [x9, w19, uxtw #1]
   1705c:	lsr	w10, w27, #11
   17060:	mul	w10, w10, w12
   17064:	subs	w22, w8, w10
   17068:	b.cs	170ac <lzma_mode_is_supported@@XZ_5.0+0x53e8>  // b.hs, b.nlast
   1706c:	mov	w13, #0x800                 	// #2048
   17070:	sub	w13, w13, w12
   17074:	add	w12, w12, w13, lsr #5
   17078:	lsl	w19, w19, #1
   1707c:	strh	w12, [x9, x11, lsl #1]
   17080:	mov	w27, w10
   17084:	mov	w22, w8
   17088:	lsr	w8, w27, #24
   1708c:	cbnz	w8, 170d0 <lzma_mode_is_supported@@XZ_5.0+0x540c>
   17090:	cmp	x28, x4
   17094:	b.eq	17e14 <lzma_mode_is_supported@@XZ_5.0+0x6150>  // b.none
   17098:	ldrb	w8, [x6, x28]
   1709c:	lsl	w27, w27, #8
   170a0:	add	x28, x28, #0x1
   170a4:	bfi	w8, w22, #8, #24
   170a8:	b	170d4 <lzma_mode_is_supported@@XZ_5.0+0x5410>
   170ac:	sub	w27, w27, w10
   170b0:	mov	w10, #0x1                   	// #1
   170b4:	bfi	w10, w19, #1, #31
   170b8:	sub	w8, w12, w12, lsr #5
   170bc:	add	w3, w3, #0x2
   170c0:	mov	w19, w10
   170c4:	strh	w8, [x9, x11, lsl #1]
   170c8:	lsr	w8, w27, #24
   170cc:	cbz	w8, 17090 <lzma_mode_is_supported@@XZ_5.0+0x53cc>
   170d0:	mov	w8, w22
   170d4:	ldur	x10, [x29, #-16]
   170d8:	mov	w9, #0x6644                	// #26180
   170dc:	mov	w11, w19
   170e0:	add	x9, x10, x9
   170e4:	ldrh	w12, [x9, w19, uxtw #1]
   170e8:	lsr	w10, w27, #11
   170ec:	mul	w10, w10, w12
   170f0:	subs	w22, w8, w10
   170f4:	b.cs	17138 <lzma_mode_is_supported@@XZ_5.0+0x5474>  // b.hs, b.nlast
   170f8:	mov	w13, #0x800                 	// #2048
   170fc:	sub	w13, w13, w12
   17100:	add	w12, w12, w13, lsr #5
   17104:	lsl	w19, w19, #1
   17108:	strh	w12, [x9, x11, lsl #1]
   1710c:	mov	w27, w10
   17110:	mov	w22, w8
   17114:	lsr	w8, w27, #24
   17118:	cbnz	w8, 1715c <lzma_mode_is_supported@@XZ_5.0+0x5498>
   1711c:	cmp	x28, x4
   17120:	b.eq	17e20 <lzma_mode_is_supported@@XZ_5.0+0x615c>  // b.none
   17124:	ldrb	w9, [x6, x28]
   17128:	lsl	w8, w27, #8
   1712c:	add	x28, x28, #0x1
   17130:	bfi	w9, w22, #8, #24
   17134:	b	17164 <lzma_mode_is_supported@@XZ_5.0+0x54a0>
   17138:	sub	w27, w27, w10
   1713c:	mov	w10, #0x1                   	// #1
   17140:	bfi	w10, w19, #1, #31
   17144:	sub	w8, w12, w12, lsr #5
   17148:	add	w3, w3, #0x4
   1714c:	mov	w19, w10
   17150:	strh	w8, [x9, x11, lsl #1]
   17154:	lsr	w8, w27, #24
   17158:	cbz	w8, 1711c <lzma_mode_is_supported@@XZ_5.0+0x5458>
   1715c:	mov	w8, w27
   17160:	mov	w9, w22
   17164:	ldur	x11, [x29, #-16]
   17168:	mov	w10, #0x6644                	// #26180
   1716c:	lsr	w12, w8, #11
   17170:	mov	w13, w19
   17174:	add	x10, x11, x10
   17178:	ldrh	w11, [x10, w19, uxtw #1]
   1717c:	mul	w27, w12, w11
   17180:	subs	w12, w9, w27
   17184:	b.cs	171a8 <lzma_mode_is_supported@@XZ_5.0+0x54e4>  // b.hs, b.nlast
   17188:	mov	w8, #0x800                 	// #2048
   1718c:	sub	w8, w8, w11
   17190:	add	w8, w11, w8, lsr #5
   17194:	strh	w8, [x10, x13, lsl #1]
   17198:	mov	w8, w3
   1719c:	cmn	w8, #0x1
   171a0:	b.ne	17958 <lzma_mode_is_supported@@XZ_5.0+0x5c94>  // b.any
   171a4:	b	171c4 <lzma_mode_is_supported@@XZ_5.0+0x5500>
   171a8:	sub	w27, w8, w27
   171ac:	sub	w8, w11, w11, lsr #5
   171b0:	strh	w8, [x10, x13, lsl #1]
   171b4:	add	w8, w3, #0x8
   171b8:	mov	w9, w12
   171bc:	cmn	w8, #0x1
   171c0:	b.ne	17958 <lzma_mode_is_supported@@XZ_5.0+0x5c94>  // b.any
   171c4:	ldur	x8, [x29, #-16]
   171c8:	ldr	x8, [x8, #28312]
   171cc:	cmn	x8, #0x1
   171d0:	b.eq	17afc <lzma_mode_is_supported@@XZ_5.0+0x5e38>  // b.none
   171d4:	mov	w0, #0x9                   	// #9
   171d8:	mov	w3, #0xffffffff            	// #-1
   171dc:	mov	x4, x28
   171e0:	b	17eb0 <lzma_mode_is_supported@@XZ_5.0+0x61ec>
   171e4:	mov	w8, w3
   171e8:	mvn	x10, x8
   171ec:	cmp	x21, x8
   171f0:	add	x8, x21, x10
   171f4:	csel	x10, xzr, x24, hi  // hi = pmore
   171f8:	add	x8, x8, x10
   171fc:	ldrb	w8, [x30, x8]
   17200:	mov	w19, #0x1                   	// #1
   17204:	mov	w26, #0x100                 	// #256
   17208:	mov	w22, w9
   1720c:	lsl	w2, w8, #1
   17210:	lsr	w8, w27, #24
   17214:	cbnz	w8, 17234 <lzma_mode_is_supported@@XZ_5.0+0x5570>
   17218:	cmp	x28, x4
   1721c:	b.eq	17e2c <lzma_mode_is_supported@@XZ_5.0+0x6168>  // b.none
   17220:	ldrb	w8, [x6, x28]
   17224:	lsl	w10, w27, #8
   17228:	add	x28, x28, #0x1
   1722c:	bfi	w8, w22, #8, #24
   17230:	b	1723c <lzma_mode_is_supported@@XZ_5.0+0x5578>
   17234:	mov	w10, w27
   17238:	mov	w8, w22
   1723c:	and	w9, w26, w2
   17240:	add	w11, w26, w19
   17244:	add	w11, w11, w9
   17248:	ldrh	w12, [x18, w11, uxtw #1]
   1724c:	lsr	w13, w10, #11
   17250:	mov	w11, w11
   17254:	mul	w27, w13, w12
   17258:	subs	w13, w8, w27
   1725c:	b.cs	1727c <lzma_mode_is_supported@@XZ_5.0+0x55b8>  // b.hs, b.nlast
   17260:	mov	w13, #0x800                 	// #2048
   17264:	sub	w13, w13, w12
   17268:	add	w12, w12, w13, lsr #5
   1726c:	lsl	w10, w19, #1
   17270:	strh	w12, [x18, x11, lsl #1]
   17274:	eor	w9, w9, w26
   17278:	b	17294 <lzma_mode_is_supported@@XZ_5.0+0x55d0>
   1727c:	sub	w27, w10, w27
   17280:	sub	w8, w12, w12, lsr #5
   17284:	mov	w10, #0x1                   	// #1
   17288:	strh	w8, [x18, x11, lsl #1]
   1728c:	bfi	w10, w19, #1, #31
   17290:	mov	w8, w13
   17294:	lsl	w2, w2, #1
   17298:	mov	w19, w10
   1729c:	mov	w26, w9
   172a0:	mov	w22, w8
   172a4:	lsr	w8, w27, #24
   172a8:	cbnz	w8, 172c8 <lzma_mode_is_supported@@XZ_5.0+0x5604>
   172ac:	cmp	x28, x4
   172b0:	b.eq	17e38 <lzma_mode_is_supported@@XZ_5.0+0x6174>  // b.none
   172b4:	ldrb	w8, [x6, x28]
   172b8:	lsl	w10, w27, #8
   172bc:	add	x28, x28, #0x1
   172c0:	bfi	w8, w22, #8, #24
   172c4:	b	172d0 <lzma_mode_is_supported@@XZ_5.0+0x560c>
   172c8:	mov	w10, w27
   172cc:	mov	w8, w22
   172d0:	and	w9, w26, w2
   172d4:	add	w11, w26, w19
   172d8:	add	w11, w11, w9
   172dc:	ldrh	w12, [x18, w11, uxtw #1]
   172e0:	lsr	w13, w10, #11
   172e4:	mov	w11, w11
   172e8:	mul	w27, w13, w12
   172ec:	subs	w13, w8, w27
   172f0:	b.cs	17310 <lzma_mode_is_supported@@XZ_5.0+0x564c>  // b.hs, b.nlast
   172f4:	mov	w13, #0x800                 	// #2048
   172f8:	sub	w13, w13, w12
   172fc:	add	w12, w12, w13, lsr #5
   17300:	lsl	w10, w19, #1
   17304:	strh	w12, [x18, x11, lsl #1]
   17308:	eor	w9, w9, w26
   1730c:	b	17328 <lzma_mode_is_supported@@XZ_5.0+0x5664>
   17310:	sub	w27, w10, w27
   17314:	sub	w8, w12, w12, lsr #5
   17318:	mov	w10, #0x1                   	// #1
   1731c:	strh	w8, [x18, x11, lsl #1]
   17320:	bfi	w10, w19, #1, #31
   17324:	mov	w8, w13
   17328:	lsl	w2, w2, #1
   1732c:	mov	w19, w10
   17330:	mov	w26, w9
   17334:	mov	w22, w8
   17338:	lsr	w8, w27, #24
   1733c:	cbnz	w8, 1735c <lzma_mode_is_supported@@XZ_5.0+0x5698>
   17340:	cmp	x28, x4
   17344:	b.eq	17e44 <lzma_mode_is_supported@@XZ_5.0+0x6180>  // b.none
   17348:	ldrb	w8, [x6, x28]
   1734c:	lsl	w10, w27, #8
   17350:	add	x28, x28, #0x1
   17354:	bfi	w8, w22, #8, #24
   17358:	b	17364 <lzma_mode_is_supported@@XZ_5.0+0x56a0>
   1735c:	mov	w10, w27
   17360:	mov	w8, w22
   17364:	and	w9, w26, w2
   17368:	add	w11, w26, w19
   1736c:	add	w11, w11, w9
   17370:	ldrh	w12, [x18, w11, uxtw #1]
   17374:	lsr	w13, w10, #11
   17378:	mov	w11, w11
   1737c:	mul	w27, w13, w12
   17380:	subs	w13, w8, w27
   17384:	b.cs	173a4 <lzma_mode_is_supported@@XZ_5.0+0x56e0>  // b.hs, b.nlast
   17388:	mov	w13, #0x800                 	// #2048
   1738c:	sub	w13, w13, w12
   17390:	add	w12, w12, w13, lsr #5
   17394:	lsl	w10, w19, #1
   17398:	strh	w12, [x18, x11, lsl #1]
   1739c:	eor	w9, w9, w26
   173a0:	b	173bc <lzma_mode_is_supported@@XZ_5.0+0x56f8>
   173a4:	sub	w27, w10, w27
   173a8:	sub	w8, w12, w12, lsr #5
   173ac:	mov	w10, #0x1                   	// #1
   173b0:	strh	w8, [x18, x11, lsl #1]
   173b4:	bfi	w10, w19, #1, #31
   173b8:	mov	w8, w13
   173bc:	lsl	w2, w2, #1
   173c0:	mov	w19, w10
   173c4:	mov	w26, w9
   173c8:	mov	w22, w8
   173cc:	lsr	w8, w27, #24
   173d0:	cbnz	w8, 173f0 <lzma_mode_is_supported@@XZ_5.0+0x572c>
   173d4:	cmp	x28, x4
   173d8:	b.eq	17e50 <lzma_mode_is_supported@@XZ_5.0+0x618c>  // b.none
   173dc:	ldrb	w8, [x6, x28]
   173e0:	lsl	w10, w27, #8
   173e4:	add	x28, x28, #0x1
   173e8:	bfi	w8, w22, #8, #24
   173ec:	b	173f8 <lzma_mode_is_supported@@XZ_5.0+0x5734>
   173f0:	mov	w10, w27
   173f4:	mov	w8, w22
   173f8:	and	w9, w26, w2
   173fc:	add	w11, w26, w19
   17400:	add	w11, w11, w9
   17404:	ldrh	w12, [x18, w11, uxtw #1]
   17408:	lsr	w13, w10, #11
   1740c:	mov	w11, w11
   17410:	mul	w27, w13, w12
   17414:	subs	w13, w8, w27
   17418:	b.cs	17438 <lzma_mode_is_supported@@XZ_5.0+0x5774>  // b.hs, b.nlast
   1741c:	mov	w13, #0x800                 	// #2048
   17420:	sub	w13, w13, w12
   17424:	add	w12, w12, w13, lsr #5
   17428:	lsl	w10, w19, #1
   1742c:	strh	w12, [x18, x11, lsl #1]
   17430:	eor	w9, w9, w26
   17434:	b	17450 <lzma_mode_is_supported@@XZ_5.0+0x578c>
   17438:	sub	w27, w10, w27
   1743c:	sub	w8, w12, w12, lsr #5
   17440:	mov	w10, #0x1                   	// #1
   17444:	strh	w8, [x18, x11, lsl #1]
   17448:	bfi	w10, w19, #1, #31
   1744c:	mov	w8, w13
   17450:	lsl	w2, w2, #1
   17454:	mov	w19, w10
   17458:	mov	w26, w9
   1745c:	mov	w22, w8
   17460:	lsr	w8, w27, #24
   17464:	cbnz	w8, 17484 <lzma_mode_is_supported@@XZ_5.0+0x57c0>
   17468:	cmp	x28, x4
   1746c:	b.eq	17e5c <lzma_mode_is_supported@@XZ_5.0+0x6198>  // b.none
   17470:	ldrb	w8, [x6, x28]
   17474:	lsl	w10, w27, #8
   17478:	add	x28, x28, #0x1
   1747c:	bfi	w8, w22, #8, #24
   17480:	b	1748c <lzma_mode_is_supported@@XZ_5.0+0x57c8>
   17484:	mov	w10, w27
   17488:	mov	w8, w22
   1748c:	and	w9, w26, w2
   17490:	add	w11, w26, w19
   17494:	add	w11, w11, w9
   17498:	ldrh	w12, [x18, w11, uxtw #1]
   1749c:	lsr	w13, w10, #11
   174a0:	mov	w11, w11
   174a4:	mul	w27, w13, w12
   174a8:	subs	w13, w8, w27
   174ac:	b.cs	174cc <lzma_mode_is_supported@@XZ_5.0+0x5808>  // b.hs, b.nlast
   174b0:	mov	w13, #0x800                 	// #2048
   174b4:	sub	w13, w13, w12
   174b8:	add	w12, w12, w13, lsr #5
   174bc:	lsl	w10, w19, #1
   174c0:	strh	w12, [x18, x11, lsl #1]
   174c4:	eor	w9, w9, w26
   174c8:	b	174e4 <lzma_mode_is_supported@@XZ_5.0+0x5820>
   174cc:	sub	w27, w10, w27
   174d0:	sub	w8, w12, w12, lsr #5
   174d4:	mov	w10, #0x1                   	// #1
   174d8:	strh	w8, [x18, x11, lsl #1]
   174dc:	bfi	w10, w19, #1, #31
   174e0:	mov	w8, w13
   174e4:	lsl	w2, w2, #1
   174e8:	mov	w19, w10
   174ec:	mov	w26, w9
   174f0:	mov	w22, w8
   174f4:	lsr	w8, w27, #24
   174f8:	cbnz	w8, 17518 <lzma_mode_is_supported@@XZ_5.0+0x5854>
   174fc:	cmp	x28, x4
   17500:	b.eq	17e68 <lzma_mode_is_supported@@XZ_5.0+0x61a4>  // b.none
   17504:	ldrb	w8, [x6, x28]
   17508:	lsl	w10, w27, #8
   1750c:	add	x28, x28, #0x1
   17510:	bfi	w8, w22, #8, #24
   17514:	b	17520 <lzma_mode_is_supported@@XZ_5.0+0x585c>
   17518:	mov	w10, w27
   1751c:	mov	w8, w22
   17520:	and	w9, w26, w2
   17524:	add	w11, w26, w19
   17528:	add	w11, w11, w9
   1752c:	ldrh	w12, [x18, w11, uxtw #1]
   17530:	lsr	w13, w10, #11
   17534:	mov	w11, w11
   17538:	mul	w27, w13, w12
   1753c:	subs	w13, w8, w27
   17540:	b.cs	17560 <lzma_mode_is_supported@@XZ_5.0+0x589c>  // b.hs, b.nlast
   17544:	mov	w13, #0x800                 	// #2048
   17548:	sub	w13, w13, w12
   1754c:	add	w12, w12, w13, lsr #5
   17550:	lsl	w10, w19, #1
   17554:	strh	w12, [x18, x11, lsl #1]
   17558:	eor	w9, w9, w26
   1755c:	b	17578 <lzma_mode_is_supported@@XZ_5.0+0x58b4>
   17560:	sub	w27, w10, w27
   17564:	sub	w8, w12, w12, lsr #5
   17568:	mov	w10, #0x1                   	// #1
   1756c:	strh	w8, [x18, x11, lsl #1]
   17570:	bfi	w10, w19, #1, #31
   17574:	mov	w8, w13
   17578:	lsl	w2, w2, #1
   1757c:	mov	w19, w10
   17580:	mov	w26, w9
   17584:	mov	w22, w8
   17588:	lsr	w8, w27, #24
   1758c:	cbnz	w8, 175ac <lzma_mode_is_supported@@XZ_5.0+0x58e8>
   17590:	cmp	x28, x4
   17594:	b.eq	17e74 <lzma_mode_is_supported@@XZ_5.0+0x61b0>  // b.none
   17598:	ldrb	w8, [x6, x28]
   1759c:	lsl	w10, w27, #8
   175a0:	add	x28, x28, #0x1
   175a4:	bfi	w8, w22, #8, #24
   175a8:	b	175b4 <lzma_mode_is_supported@@XZ_5.0+0x58f0>
   175ac:	mov	w10, w27
   175b0:	mov	w8, w22
   175b4:	and	w9, w26, w2
   175b8:	add	w11, w26, w19
   175bc:	add	w11, w11, w9
   175c0:	ldrh	w12, [x18, w11, uxtw #1]
   175c4:	lsr	w13, w10, #11
   175c8:	mov	w11, w11
   175cc:	mul	w27, w13, w12
   175d0:	subs	w13, w8, w27
   175d4:	b.cs	175f4 <lzma_mode_is_supported@@XZ_5.0+0x5930>  // b.hs, b.nlast
   175d8:	mov	w13, #0x800                 	// #2048
   175dc:	sub	w13, w13, w12
   175e0:	add	w12, w12, w13, lsr #5
   175e4:	lsl	w10, w19, #1
   175e8:	strh	w12, [x18, x11, lsl #1]
   175ec:	eor	w9, w9, w26
   175f0:	b	1760c <lzma_mode_is_supported@@XZ_5.0+0x5948>
   175f4:	sub	w27, w10, w27
   175f8:	sub	w8, w12, w12, lsr #5
   175fc:	mov	w10, #0x1                   	// #1
   17600:	strh	w8, [x18, x11, lsl #1]
   17604:	bfi	w10, w19, #1, #31
   17608:	mov	w8, w13
   1760c:	lsl	w2, w2, #1
   17610:	mov	w19, w10
   17614:	mov	w26, w9
   17618:	mov	w22, w8
   1761c:	lsr	w8, w27, #24
   17620:	cbnz	w8, 17640 <lzma_mode_is_supported@@XZ_5.0+0x597c>
   17624:	cmp	x28, x4
   17628:	b.eq	17e80 <lzma_mode_is_supported@@XZ_5.0+0x61bc>  // b.none
   1762c:	ldrb	w8, [x6, x28]
   17630:	lsl	w9, w27, #8
   17634:	add	x28, x28, #0x1
   17638:	bfi	w8, w22, #8, #24
   1763c:	b	17648 <lzma_mode_is_supported@@XZ_5.0+0x5984>
   17640:	mov	w9, w27
   17644:	mov	w8, w22
   17648:	and	w10, w26, w2
   1764c:	add	w11, w26, w19
   17650:	add	w12, w11, w10
   17654:	ldrh	w13, [x18, w12, uxtw #1]
   17658:	lsr	w11, w9, #11
   1765c:	mov	w12, w12
   17660:	mul	w27, w11, w13
   17664:	subs	w11, w8, w27
   17668:	b.cs	17688 <lzma_mode_is_supported@@XZ_5.0+0x59c4>  // b.hs, b.nlast
   1766c:	mov	w11, #0x800                 	// #2048
   17670:	sub	w11, w11, w13
   17674:	add	w11, w13, w11, lsr #5
   17678:	lsl	w9, w19, #1
   1767c:	strh	w11, [x18, x12, lsl #1]
   17680:	eor	w10, w10, w26
   17684:	b	176a0 <lzma_mode_is_supported@@XZ_5.0+0x59dc>
   17688:	sub	w27, w9, w27
   1768c:	mov	w9, #0x1                   	// #1
   17690:	sub	w8, w13, w13, lsr #5
   17694:	bfi	w9, w19, #1, #31
   17698:	strh	w8, [x18, x12, lsl #1]
   1769c:	mov	w8, w11
   176a0:	adrp	x11, 21000 <lzma_mode_is_supported@@XZ_5.0+0xf33c>
   176a4:	add	x11, x11, #0x700
   176a8:	ldr	w15, [x11, w15, uxtw #2]
   176ac:	mov	w19, w9
   176b0:	mov	w26, w10
   176b4:	mov	w22, w8
   176b8:	cmp	x21, x7
   176bc:	b.eq	17b68 <lzma_mode_is_supported@@XZ_5.0+0x5ea4>  // b.none
   176c0:	add	x8, x21, #0x1
   176c4:	cmp	x8, x16
   176c8:	strb	w19, [x30, x21]
   176cc:	csinc	x16, x16, x21, ls  // ls = plast
   176d0:	mov	x21, x8
   176d4:	b	152d8 <lzma_mode_is_supported@@XZ_5.0+0x3614>
   176d8:	mov	w8, w3
   176dc:	mov	w9, w22
   176e0:	b	17958 <lzma_mode_is_supported@@XZ_5.0+0x5c94>
   176e4:	mov	w9, w27
   176e8:	mov	w8, w22
   176ec:	ldrh	w12, [x18, w19, uxtw #1]
   176f0:	lsr	w10, w9, #11
   176f4:	mov	w11, w19
   176f8:	mul	w27, w10, w12
   176fc:	subs	w10, w8, w27
   17700:	b.cs	1771c <lzma_mode_is_supported@@XZ_5.0+0x5a58>  // b.hs, b.nlast
   17704:	mov	w9, #0x800                 	// #2048
   17708:	sub	w9, w9, w12
   1770c:	add	w9, w12, w9, lsr #5
   17710:	strh	w9, [x18, x11, lsl #1]
   17714:	lsl	w9, w19, #1
   17718:	b	17738 <lzma_mode_is_supported@@XZ_5.0+0x5a74>
   1771c:	sub	w27, w9, w27
   17720:	sub	w8, w12, w12, lsr #5
   17724:	mov	w9, #0x1                   	// #1
   17728:	add	w3, w3, #0x1
   1772c:	strh	w8, [x18, x11, lsl #1]
   17730:	bfi	w9, w19, #1, #31
   17734:	mov	w8, w10
   17738:	add	w26, w26, #0x1
   1773c:	mov	w19, w9
   17740:	mov	w22, w8
   17744:	lsr	w8, w27, #24
   17748:	cbnz	w8, 17768 <lzma_mode_is_supported@@XZ_5.0+0x5aa4>
   1774c:	cmp	x28, x4
   17750:	b.eq	17fd0 <lzma_mode_is_supported@@XZ_5.0+0x630c>  // b.none
   17754:	ldrb	w8, [x6, x28]
   17758:	lsl	w9, w27, #8
   1775c:	add	x28, x28, #0x1
   17760:	bfi	w8, w22, #8, #24
   17764:	b	17770 <lzma_mode_is_supported@@XZ_5.0+0x5aac>
   17768:	mov	w9, w27
   1776c:	mov	w8, w22
   17770:	ldrh	w12, [x18, w19, uxtw #1]
   17774:	lsr	w10, w9, #11
   17778:	mov	w11, w19
   1777c:	mul	w27, w10, w12
   17780:	subs	w10, w8, w27
   17784:	b.cs	177a0 <lzma_mode_is_supported@@XZ_5.0+0x5adc>  // b.hs, b.nlast
   17788:	mov	w9, #0x800                 	// #2048
   1778c:	sub	w9, w9, w12
   17790:	add	w9, w12, w9, lsr #5
   17794:	strh	w9, [x18, x11, lsl #1]
   17798:	lsl	w9, w19, #1
   1779c:	b	177c0 <lzma_mode_is_supported@@XZ_5.0+0x5afc>
   177a0:	sub	w27, w9, w27
   177a4:	sub	w8, w12, w12, lsr #5
   177a8:	mov	w9, #0x1                   	// #1
   177ac:	strh	w8, [x18, x11, lsl #1]
   177b0:	lsl	w8, w9, w26
   177b4:	add	w3, w8, w3
   177b8:	bfi	w9, w19, #1, #31
   177bc:	mov	w8, w10
   177c0:	add	w26, w26, #0x1
   177c4:	mov	w19, w9
   177c8:	mov	w22, w8
   177cc:	lsr	w8, w27, #24
   177d0:	cbnz	w8, 177f0 <lzma_mode_is_supported@@XZ_5.0+0x5b2c>
   177d4:	cmp	x28, x4
   177d8:	b.eq	17fbc <lzma_mode_is_supported@@XZ_5.0+0x62f8>  // b.none
   177dc:	ldrb	w8, [x6, x28]
   177e0:	lsl	w9, w27, #8
   177e4:	add	x28, x28, #0x1
   177e8:	bfi	w8, w22, #8, #24
   177ec:	b	177f8 <lzma_mode_is_supported@@XZ_5.0+0x5b34>
   177f0:	mov	w9, w27
   177f4:	mov	w8, w22
   177f8:	ldrh	w12, [x18, w19, uxtw #1]
   177fc:	lsr	w10, w9, #11
   17800:	mov	w11, w19
   17804:	mul	w27, w10, w12
   17808:	subs	w10, w8, w27
   1780c:	b.cs	17828 <lzma_mode_is_supported@@XZ_5.0+0x5b64>  // b.hs, b.nlast
   17810:	mov	w9, #0x800                 	// #2048
   17814:	sub	w9, w9, w12
   17818:	add	w9, w12, w9, lsr #5
   1781c:	strh	w9, [x18, x11, lsl #1]
   17820:	lsl	w9, w19, #1
   17824:	b	17848 <lzma_mode_is_supported@@XZ_5.0+0x5b84>
   17828:	sub	w27, w9, w27
   1782c:	sub	w8, w12, w12, lsr #5
   17830:	mov	w9, #0x1                   	// #1
   17834:	strh	w8, [x18, x11, lsl #1]
   17838:	lsl	w8, w9, w26
   1783c:	add	w3, w8, w3
   17840:	bfi	w9, w19, #1, #31
   17844:	mov	w8, w10
   17848:	add	w26, w26, #0x1
   1784c:	mov	w19, w9
   17850:	mov	w22, w8
   17854:	lsr	w8, w27, #24
   17858:	cbnz	w8, 17878 <lzma_mode_is_supported@@XZ_5.0+0x5bb4>
   1785c:	cmp	x28, x4
   17860:	b.eq	17fa8 <lzma_mode_is_supported@@XZ_5.0+0x62e4>  // b.none
   17864:	ldrb	w8, [x6, x28]
   17868:	lsl	w9, w27, #8
   1786c:	add	x28, x28, #0x1
   17870:	bfi	w8, w22, #8, #24
   17874:	b	17880 <lzma_mode_is_supported@@XZ_5.0+0x5bbc>
   17878:	mov	w9, w27
   1787c:	mov	w8, w22
   17880:	ldrh	w12, [x18, w19, uxtw #1]
   17884:	lsr	w10, w9, #11
   17888:	mov	w11, w19
   1788c:	mul	w27, w10, w12
   17890:	subs	w10, w8, w27
   17894:	b.cs	178b0 <lzma_mode_is_supported@@XZ_5.0+0x5bec>  // b.hs, b.nlast
   17898:	mov	w9, #0x800                 	// #2048
   1789c:	sub	w9, w9, w12
   178a0:	add	w9, w12, w9, lsr #5
   178a4:	strh	w9, [x18, x11, lsl #1]
   178a8:	lsl	w9, w19, #1
   178ac:	b	178d0 <lzma_mode_is_supported@@XZ_5.0+0x5c0c>
   178b0:	sub	w27, w9, w27
   178b4:	sub	w8, w12, w12, lsr #5
   178b8:	mov	w9, #0x1                   	// #1
   178bc:	strh	w8, [x18, x11, lsl #1]
   178c0:	lsl	w8, w9, w26
   178c4:	add	w3, w8, w3
   178c8:	bfi	w9, w19, #1, #31
   178cc:	mov	w8, w10
   178d0:	add	w26, w26, #0x1
   178d4:	mov	w19, w9
   178d8:	mov	w22, w8
   178dc:	lsr	w8, w27, #24
   178e0:	cbnz	w8, 17900 <lzma_mode_is_supported@@XZ_5.0+0x5c3c>
   178e4:	cmp	x28, x4
   178e8:	b.eq	17f94 <lzma_mode_is_supported@@XZ_5.0+0x62d0>  // b.none
   178ec:	ldrb	w9, [x6, x28]
   178f0:	lsl	w8, w27, #8
   178f4:	add	x28, x28, #0x1
   178f8:	bfi	w9, w22, #8, #24
   178fc:	b	17908 <lzma_mode_is_supported@@XZ_5.0+0x5c44>
   17900:	mov	w8, w27
   17904:	mov	w9, w22
   17908:	ldrh	w12, [x18, w19, uxtw #1]
   1790c:	lsr	w10, w8, #11
   17910:	mov	w11, w19
   17914:	mul	w27, w10, w12
   17918:	subs	w10, w9, w27
   1791c:	b.cs	1793c <lzma_mode_is_supported@@XZ_5.0+0x5c78>  // b.hs, b.nlast
   17920:	mov	w8, #0x800                 	// #2048
   17924:	sub	w8, w8, w12
   17928:	add	w8, w12, w8, lsr #5
   1792c:	strh	w8, [x18, x11, lsl #1]
   17930:	mov	w5, #0x1                   	// #1
   17934:	mov	w8, w3
   17938:	b	17958 <lzma_mode_is_supported@@XZ_5.0+0x5c94>
   1793c:	sub	w27, w8, w27
   17940:	sub	w8, w12, w12, lsr #5
   17944:	mov	w5, #0x1                   	// #1
   17948:	strh	w8, [x18, x11, lsl #1]
   1794c:	lsl	w8, w5, w26
   17950:	add	w8, w8, w3
   17954:	mov	w9, w10
   17958:	cmp	x16, w8, uxtw
   1795c:	b.ls	17b50 <lzma_mode_is_supported@@XZ_5.0+0x5e8c>  // b.plast
   17960:	mov	w3, w8
   17964:	mov	w22, w9
   17968:	sub	x8, x7, x21
   1796c:	mov	w9, w2
   17970:	cmp	x8, x9
   17974:	csel	x25, x8, x9, cc  // cc = lo, ul, last
   17978:	sub	w2, w2, w25
   1797c:	cmp	w3, w25
   17980:	mov	w8, w3
   17984:	b.cs	179d0 <lzma_mode_is_supported@@XZ_5.0+0x5d0c>  // b.hs, b.nlast
   17988:	mvn	x9, x8
   1798c:	add	x9, x30, x9
   17990:	cmp	x21, x8
   17994:	csel	x10, xzr, x24, hi  // hi = pmore
   17998:	add	x10, x9, x10
   1799c:	ldrb	w10, [x10, x21]
   179a0:	subs	w25, w25, #0x1
   179a4:	strb	w10, [x30, x21]
   179a8:	add	x21, x21, #0x1
   179ac:	b.ne	17990 <lzma_mode_is_supported@@XZ_5.0+0x5ccc>  // b.any
   179b0:	cmp	x16, x21
   179b4:	csel	x16, x21, x16, cc  // cc = lo, ul, last
   179b8:	cbz	w2, 152d8 <lzma_mode_is_supported@@XZ_5.0+0x3614>
   179bc:	ldr	x9, [sp]
   179c0:	mov	w8, #0x46                  	// #70
   179c4:	mov	w0, wzr
   179c8:	str	w8, [x9]
   179cc:	b	17b48 <lzma_mode_is_supported@@XZ_5.0+0x5e84>
   179d0:	cmp	x21, x8
   179d4:	stp	w26, w3, [x29, #-60]
   179d8:	stur	x16, [x29, #-48]
   179dc:	stur	w2, [x29, #-52]
   179e0:	b.ls	17a54 <lzma_mode_is_supported@@XZ_5.0+0x5d90>  // b.plast
   179e4:	add	x0, x30, x21
   179e8:	mvn	x8, x8
   179ec:	add	x1, x8, x0
   179f0:	mov	x2, x25
   179f4:	str	x21, [sp, #80]
   179f8:	mov	w21, w15
   179fc:	mov	w20, w17
   17a00:	mov	x23, x18
   17a04:	mov	w24, w5
   17a08:	mov	x26, x7
   17a0c:	bl	3040 <memcpy@plt>
   17a10:	mov	w15, w21
   17a14:	ldr	x21, [sp, #80]
   17a18:	mov	x7, x26
   17a1c:	ldp	x6, x4, [x29, #-80]
   17a20:	mov	w5, w24
   17a24:	ldp	x24, x30, [sp, #40]
   17a28:	ldp	w3, w2, [x29, #-56]
   17a2c:	mov	x18, x23
   17a30:	ldur	x16, [x29, #-48]
   17a34:	ldur	w26, [x29, #-60]
   17a38:	ldur	x23, [x29, #-88]
   17a3c:	mov	w17, w20
   17a40:	add	x21, x25, x21
   17a44:	cmp	x16, x21
   17a48:	csel	x16, x21, x16, cc  // cc = lo, ul, last
   17a4c:	cbz	w2, 152d8 <lzma_mode_is_supported@@XZ_5.0+0x3614>
   17a50:	b	179bc <lzma_mode_is_supported@@XZ_5.0+0x5cf8>
   17a54:	eor	x8, x8, #0xffffffff
   17a58:	add	x23, x8, x21
   17a5c:	add	w9, w23, w24
   17a60:	neg	x8, x23
   17a64:	mov	x20, x24
   17a68:	add	x0, x30, x21
   17a6c:	cmp	w25, w8
   17a70:	add	x1, x30, x9
   17a74:	mov	x24, x30
   17a78:	str	w5, [sp, #60]
   17a7c:	str	x18, [sp, #64]
   17a80:	stp	w17, w15, [sp, #76]
   17a84:	b.ls	17ab4 <lzma_mode_is_supported@@XZ_5.0+0x5df0>  // b.plast
   17a88:	and	x26, x8, #0xffffffff
   17a8c:	mov	x2, x26
   17a90:	bl	3050 <memmove@plt>
   17a94:	add	x21, x26, x21
   17a98:	add	w25, w23, w25
   17a9c:	add	x0, x24, x21
   17aa0:	mov	x1, x24
   17aa4:	mov	x2, x25
   17aa8:	bl	3040 <memcpy@plt>
   17aac:	add	x21, x21, x25
   17ab0:	b	17ac0 <lzma_mode_is_supported@@XZ_5.0+0x5dfc>
   17ab4:	mov	x2, x25
   17ab8:	bl	3050 <memmove@plt>
   17abc:	add	x21, x25, x21
   17ac0:	ldur	x16, [x29, #-48]
   17ac4:	ldp	w17, w15, [sp, #76]
   17ac8:	ldp	x6, x4, [x29, #-80]
   17acc:	ldr	x18, [sp, #64]
   17ad0:	ldp	w3, w2, [x29, #-56]
   17ad4:	ldr	w5, [sp, #60]
   17ad8:	ldur	w26, [x29, #-60]
   17adc:	ldr	x7, [sp, #32]
   17ae0:	ldur	x23, [x29, #-88]
   17ae4:	mov	x30, x24
   17ae8:	mov	x24, x20
   17aec:	cmp	x16, x21
   17af0:	csel	x16, x21, x16, cc  // cc = lo, ul, last
   17af4:	cbz	w2, 152d8 <lzma_mode_is_supported@@XZ_5.0+0x3614>
   17af8:	b	179bc <lzma_mode_is_supported@@XZ_5.0+0x5cf8>
   17afc:	mov	w3, #0xffffffff            	// #-1
   17b00:	mov	w22, w9
   17b04:	lsr	w8, w27, #24
   17b08:	cbnz	w8, 17b44 <lzma_mode_is_supported@@XZ_5.0+0x5e80>
   17b0c:	cmp	x28, x4
   17b10:	b.eq	17ff8 <lzma_mode_is_supported@@XZ_5.0+0x6334>  // b.none
   17b14:	ldrb	w9, [x6, x28]
   17b18:	lsl	w27, w27, #8
   17b1c:	add	x4, x28, #0x1
   17b20:	mov	w0, #0x1                   	// #1
   17b24:	bfi	w9, w22, #8, #24
   17b28:	b	17eb0 <lzma_mode_is_supported@@XZ_5.0+0x61ec>
   17b2c:	ldr	x11, [sp]
   17b30:	mov	w10, #0x2b                  	// #43
   17b34:	mov	w0, wzr
   17b38:	mov	w3, w8
   17b3c:	str	w10, [x11]
   17b40:	b	17eb0 <lzma_mode_is_supported@@XZ_5.0+0x61ec>
   17b44:	mov	w0, #0x1                   	// #1
   17b48:	mov	x4, x28
   17b4c:	b	17eac <lzma_mode_is_supported@@XZ_5.0+0x61e8>
   17b50:	mov	w0, #0x9                   	// #9
   17b54:	mov	w3, w8
   17b58:	b	171dc <lzma_mode_is_supported@@XZ_5.0+0x5518>
   17b5c:	mov	w0, wzr
   17b60:	mov	w8, #0x32                  	// #50
   17b64:	b	17b70 <lzma_mode_is_supported@@XZ_5.0+0x5eac>
   17b68:	mov	w0, wzr
   17b6c:	mov	w8, #0x12                  	// #18
   17b70:	ldr	x9, [sp]
   17b74:	mov	x21, x7
   17b78:	str	w8, [x9]
   17b7c:	b	17b48 <lzma_mode_is_supported@@XZ_5.0+0x5e84>
   17b80:	mov	w0, wzr
   17b84:	mov	w8, #0x2                   	// #2
   17b88:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17b8c:	mov	w0, wzr
   17b90:	mov	w8, #0x3                   	// #3
   17b94:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17b98:	mov	w0, wzr
   17b9c:	mov	w8, #0x4                   	// #4
   17ba0:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17ba4:	mov	w0, wzr
   17ba8:	mov	w8, #0x5                   	// #5
   17bac:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17bb0:	mov	w0, wzr
   17bb4:	mov	w8, #0x6                   	// #6
   17bb8:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17bbc:	mov	w0, wzr
   17bc0:	mov	w8, #0x7                   	// #7
   17bc4:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17bc8:	mov	w0, wzr
   17bcc:	mov	w8, #0x8                   	// #8
   17bd0:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17bd4:	mov	w0, wzr
   17bd8:	mov	w8, #0x9                   	// #9
   17bdc:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17be0:	ldr	x9, [sp]
   17be4:	mov	w8, #0x13                  	// #19
   17be8:	mov	w0, wzr
   17bec:	stur	w17, [x29, #-28]
   17bf0:	str	w8, [x9]
   17bf4:	mov	w17, w1
   17bf8:	b	17eac <lzma_mode_is_supported@@XZ_5.0+0x61e8>
   17bfc:	mov	w0, wzr
   17c00:	mov	w8, #0x14                  	// #20
   17c04:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17c08:	mov	w0, wzr
   17c0c:	mov	w8, #0x15                  	// #21
   17c10:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17c14:	mov	w0, wzr
   17c18:	mov	w8, #0x16                  	// #22
   17c1c:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17c20:	mov	w0, wzr
   17c24:	mov	w8, #0x31                  	// #49
   17c28:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17c2c:	mov	w0, wzr
   17c30:	mov	w8, #0x33                  	// #51
   17c34:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17c38:	mov	w0, wzr
   17c3c:	mov	w8, #0x17                  	// #23
   17c40:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17c44:	mov	w0, wzr
   17c48:	mov	w8, #0x34                  	// #52
   17c4c:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17c50:	mov	w0, wzr
   17c54:	mov	w8, #0x35                  	// #53
   17c58:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17c5c:	mov	w0, wzr
   17c60:	mov	w8, #0x36                  	// #54
   17c64:	b	17cb8 <lzma_mode_is_supported@@XZ_5.0+0x5ff4>
   17c68:	mov	w0, wzr
   17c6c:	mov	w8, #0x37                  	// #55
   17c70:	b	17cb8 <lzma_mode_is_supported@@XZ_5.0+0x5ff4>
   17c74:	mov	w0, wzr
   17c78:	mov	w8, #0x38                  	// #56
   17c7c:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17c80:	mov	w0, wzr
   17c84:	mov	w8, #0x3a                  	// #58
   17c88:	b	17cb8 <lzma_mode_is_supported@@XZ_5.0+0x5ff4>
   17c8c:	mov	w0, wzr
   17c90:	mov	w8, #0x3b                  	// #59
   17c94:	b	17cb8 <lzma_mode_is_supported@@XZ_5.0+0x5ff4>
   17c98:	mov	w0, wzr
   17c9c:	mov	w8, #0x3c                  	// #60
   17ca0:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17ca4:	mov	w0, wzr
   17ca8:	mov	w8, #0x39                  	// #57
   17cac:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17cb0:	mov	w0, wzr
   17cb4:	mov	w8, #0x3e                  	// #62
   17cb8:	ldr	x10, [sp]
   17cbc:	str	w8, [x10]
   17cc0:	b	17eb0 <lzma_mode_is_supported@@XZ_5.0+0x61ec>
   17cc4:	mov	w0, wzr
   17cc8:	mov	w8, #0x3f                  	// #63
   17ccc:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17cd0:	mov	w0, wzr
   17cd4:	mov	w8, #0x40                  	// #64
   17cd8:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17cdc:	mov	w0, wzr
   17ce0:	mov	w8, #0x18                  	// #24
   17ce4:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17ce8:	mov	w0, wzr
   17cec:	mov	w8, #0x19                  	// #25
   17cf0:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17cf4:	mov	w0, wzr
   17cf8:	mov	w8, #0x1a                  	// #26
   17cfc:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d00:	mov	w0, wzr
   17d04:	mov	w8, #0x1c                  	// #28
   17d08:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d0c:	mov	w0, wzr
   17d10:	mov	w8, #0x1d                  	// #29
   17d14:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d18:	mov	w0, wzr
   17d1c:	mov	w8, #0x1b                  	// #27
   17d20:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d24:	mov	w0, wzr
   17d28:	mov	w8, #0x1e                  	// #30
   17d2c:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d30:	mov	w0, wzr
   17d34:	mov	w8, #0x3d                  	// #61
   17d38:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d3c:	mov	w0, wzr
   17d40:	mov	w8, #0x41                  	// #65
   17d44:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d48:	mov	w0, wzr
   17d4c:	mov	w8, #0x42                  	// #66
   17d50:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d54:	mov	w0, wzr
   17d58:	mov	w8, #0x1f                  	// #31
   17d5c:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d60:	mov	w0, wzr
   17d64:	mov	w8, #0x20                  	// #32
   17d68:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d6c:	mov	w0, wzr
   17d70:	mov	w8, #0x21                  	// #33
   17d74:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d78:	mov	w0, wzr
   17d7c:	mov	w8, #0x43                  	// #67
   17d80:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d84:	mov	w0, wzr
   17d88:	mov	w8, #0x44                  	// #68
   17d8c:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d90:	mov	w0, wzr
   17d94:	mov	w8, #0x22                  	// #34
   17d98:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17d9c:	mov	w0, wzr
   17da0:	mov	w8, #0x45                  	// #69
   17da4:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17da8:	mov	w0, wzr
   17dac:	mov	w8, #0x23                  	// #35
   17db0:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17db4:	mov	w0, wzr
   17db8:	mov	w8, #0x24                  	// #36
   17dbc:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17dc0:	mov	w0, wzr
   17dc4:	mov	w8, #0x25                  	// #37
   17dc8:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17dcc:	mov	w0, wzr
   17dd0:	mov	w8, #0x26                  	// #38
   17dd4:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17dd8:	mov	w0, wzr
   17ddc:	mov	w8, #0x27                  	// #39
   17de0:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17de4:	mov	w0, wzr
   17de8:	mov	w8, #0x28                  	// #40
   17dec:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17df0:	mov	w0, wzr
   17df4:	mov	w8, #0x29                  	// #41
   17df8:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17dfc:	mov	w0, wzr
   17e00:	mov	w8, #0x2c                  	// #44
   17e04:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17e08:	mov	w0, wzr
   17e0c:	mov	w8, #0x2d                  	// #45
   17e10:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17e14:	mov	w0, wzr
   17e18:	mov	w8, #0x2e                  	// #46
   17e1c:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17e20:	mov	w0, wzr
   17e24:	mov	w8, #0x2f                  	// #47
   17e28:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17e2c:	mov	w0, wzr
   17e30:	mov	w8, #0xa                   	// #10
   17e34:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17e38:	mov	w0, wzr
   17e3c:	mov	w8, #0xb                   	// #11
   17e40:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17e44:	mov	w0, wzr
   17e48:	mov	w8, #0xc                   	// #12
   17e4c:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17e50:	mov	w0, wzr
   17e54:	mov	w8, #0xd                   	// #13
   17e58:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17e5c:	mov	w0, wzr
   17e60:	mov	w8, #0xe                   	// #14
   17e64:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17e68:	mov	w0, wzr
   17e6c:	mov	w8, #0xf                   	// #15
   17e70:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17e74:	mov	w0, wzr
   17e78:	mov	w8, #0x10                  	// #16
   17e7c:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17e80:	mov	w0, wzr
   17e84:	mov	w8, #0x11                  	// #17
   17e88:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   17e8c:	mov	w0, #0x9                   	// #9
   17e90:	stur	w17, [x29, #-28]
   17e94:	mov	w17, w1
   17e98:	b	171dc <lzma_mode_is_supported@@XZ_5.0+0x5518>
   17e9c:	mov	w0, wzr
   17ea0:	mov	w8, #0x1                   	// #1
   17ea4:	ldr	x9, [sp]
   17ea8:	str	w8, [x9]
   17eac:	mov	w9, w22
   17eb0:	ldr	x10, [sp, #16]
   17eb4:	mov	w8, w3
   17eb8:	ldur	x11, [x29, #-24]
   17ebc:	ldur	w8, [x29, #-28]
   17ec0:	stp	x21, x16, [x10, #8]
   17ec4:	ldr	x10, [sp, #24]
   17ec8:	str	w27, [x11, #2056]
   17ecc:	str	w9, [x11, #2060]
   17ed0:	str	wzr, [x11, #2064]
   17ed4:	str	x4, [x10]
   17ed8:	str	w8, [x11, #2076]
   17edc:	ldur	w8, [x29, #-36]
   17ee0:	str	w15, [x11, #2068]
   17ee4:	str	w3, [x11, #2072]
   17ee8:	str	w17, [x11, #2080]
   17eec:	str	w8, [x11, #2084]
   17ef0:	ldur	x8, [x29, #-16]
   17ef4:	ldr	x10, [sp, #8]
   17ef8:	str	x18, [x8, #28328]
   17efc:	str	w19, [x11, #2124]
   17f00:	str	w5, [x11, #2128]
   17f04:	str	w26, [x11, #2132]
   17f08:	str	w2, [x11, #2136]
   17f0c:	ldr	x8, [x8, #28312]
   17f10:	cmn	x8, #0x1
   17f14:	b.eq	17f4c <lzma_mode_is_supported@@XZ_5.0+0x6288>  // b.none
   17f18:	sub	x10, x10, x21
   17f1c:	add	x8, x8, x10
   17f20:	ldur	x10, [x29, #-16]
   17f24:	str	x8, [x10, #28312]
   17f28:	cbnz	w0, 17f4c <lzma_mode_is_supported@@XZ_5.0+0x6288>
   17f2c:	cbnz	x8, 17f4c <lzma_mode_is_supported@@XZ_5.0+0x6288>
   17f30:	ldr	x8, [sp]
   17f34:	ldr	w0, [x8]
   17f38:	cbz	w0, 17f74 <lzma_mode_is_supported@@XZ_5.0+0x62b0>
   17f3c:	cmp	w0, #0x1
   17f40:	b.eq	17f54 <lzma_mode_is_supported@@XZ_5.0+0x6290>  // b.none
   17f44:	mov	w0, #0x9                   	// #9
   17f48:	b	17f74 <lzma_mode_is_supported@@XZ_5.0+0x62b0>
   17f4c:	cmp	w0, #0x1
   17f50:	b.ne	17f74 <lzma_mode_is_supported@@XZ_5.0+0x62b0>  // b.any
   17f54:	cmp	w9, #0x0
   17f58:	mov	w8, #0x9                   	// #9
   17f5c:	csinc	w0, w8, wzr, ne  // ne = any
   17f60:	ldur	x8, [x29, #-24]
   17f64:	movi	d0, #0xffffffff
   17f68:	mov	w9, #0x5                   	// #5
   17f6c:	str	d0, [x8, #2056]
   17f70:	str	w9, [x8, #2064]
   17f74:	ldp	x20, x19, [sp, #272]
   17f78:	ldp	x22, x21, [sp, #256]
   17f7c:	ldp	x24, x23, [sp, #240]
   17f80:	ldp	x26, x25, [sp, #224]
   17f84:	ldp	x28, x27, [sp, #208]
   17f88:	ldp	x29, x30, [sp, #192]
   17f8c:	add	sp, sp, #0x120
   17f90:	ret
   17f94:	ldr	x9, [sp]
   17f98:	mov	w8, #0x2a                  	// #42
   17f9c:	mov	w0, wzr
   17fa0:	mov	w5, #0x1                   	// #1
   17fa4:	b	17ea8 <lzma_mode_is_supported@@XZ_5.0+0x61e4>
   17fa8:	ldr	x9, [sp]
   17fac:	mov	w8, #0x2a                  	// #42
   17fb0:	mov	w0, wzr
   17fb4:	mov	w5, #0x2                   	// #2
   17fb8:	b	17ea8 <lzma_mode_is_supported@@XZ_5.0+0x61e4>
   17fbc:	ldr	x9, [sp]
   17fc0:	mov	w8, #0x2a                  	// #42
   17fc4:	mov	w0, wzr
   17fc8:	mov	w5, #0x3                   	// #3
   17fcc:	b	17ea8 <lzma_mode_is_supported@@XZ_5.0+0x61e4>
   17fd0:	ldr	x9, [sp]
   17fd4:	mov	w8, #0x2a                  	// #42
   17fd8:	mov	w0, wzr
   17fdc:	mov	w5, #0x4                   	// #4
   17fe0:	b	17ea8 <lzma_mode_is_supported@@XZ_5.0+0x61e4>
   17fe4:	ldr	x9, [sp]
   17fe8:	mov	w8, #0x2a                  	// #42
   17fec:	mov	w0, wzr
   17ff0:	mov	w5, #0x5                   	// #5
   17ff4:	b	17ea8 <lzma_mode_is_supported@@XZ_5.0+0x61e4>
   17ff8:	mov	w0, wzr
   17ffc:	mov	w8, #0x30                  	// #48
   18000:	b	17ea4 <lzma_mode_is_supported@@XZ_5.0+0x61e0>
   18004:	ldr	w9, [x1, #28]
   18008:	mov	w10, #0xffffffff            	// #-1
   1800c:	mov	w11, #0x6e8c                	// #28300
   18010:	mov	w8, #0x6180                	// #24960
   18014:	lsl	w10, w10, w9
   18018:	mvn	w10, w10
   1801c:	str	w10, [x0, x11]
   18020:	ldp	w12, w11, [x1, #20]
   18024:	mov	w13, #0x1                   	// #1
   18028:	mov	w14, #0x600                 	// #1536
   1802c:	add	x8, x0, x8
   18030:	add	w15, w11, w12
   18034:	movi	v0.8h, #0x4, lsl #8
   18038:	sub	w16, w13, #0x1
   1803c:	umaddl	x16, w16, w14, x0
   18040:	stp	q0, q0, [x16]
   18044:	stp	q0, q0, [x16, #32]
   18048:	stp	q0, q0, [x16, #64]
   1804c:	stp	q0, q0, [x16, #96]
   18050:	stp	q0, q0, [x16, #128]
   18054:	stp	q0, q0, [x16, #160]
   18058:	stp	q0, q0, [x16, #192]
   1805c:	stp	q0, q0, [x16, #224]
   18060:	stp	q0, q0, [x16, #256]
   18064:	stp	q0, q0, [x16, #288]
   18068:	stp	q0, q0, [x16, #320]
   1806c:	stp	q0, q0, [x16, #352]
   18070:	stp	q0, q0, [x16, #384]
   18074:	stp	q0, q0, [x16, #416]
   18078:	stp	q0, q0, [x16, #448]
   1807c:	stp	q0, q0, [x16, #480]
   18080:	stp	q0, q0, [x16, #512]
   18084:	stp	q0, q0, [x16, #544]
   18088:	stp	q0, q0, [x16, #576]
   1808c:	stp	q0, q0, [x16, #608]
   18090:	stp	q0, q0, [x16, #640]
   18094:	stp	q0, q0, [x16, #672]
   18098:	stp	q0, q0, [x16, #704]
   1809c:	stp	q0, q0, [x16, #736]
   180a0:	stp	q0, q0, [x16, #768]
   180a4:	stp	q0, q0, [x16, #800]
   180a8:	stp	q0, q0, [x16, #832]
   180ac:	stp	q0, q0, [x16, #864]
   180b0:	stp	q0, q0, [x16, #896]
   180b4:	stp	q0, q0, [x16, #928]
   180b8:	stp	q0, q0, [x16, #960]
   180bc:	stp	q0, q0, [x16, #992]
   180c0:	str	q0, [x16, #1024]
   180c4:	str	q0, [x16, #1040]
   180c8:	str	q0, [x16, #1056]
   180cc:	str	q0, [x16, #1072]
   180d0:	str	q0, [x16, #1088]
   180d4:	str	q0, [x16, #1104]
   180d8:	str	q0, [x16, #1120]
   180dc:	str	q0, [x16, #1136]
   180e0:	str	q0, [x16, #1152]
   180e4:	str	q0, [x16, #1168]
   180e8:	str	q0, [x16, #1184]
   180ec:	str	q0, [x16, #1200]
   180f0:	str	q0, [x16, #1216]
   180f4:	str	q0, [x16, #1232]
   180f8:	str	q0, [x16, #1248]
   180fc:	str	q0, [x16, #1264]
   18100:	str	q0, [x16, #1280]
   18104:	str	q0, [x16, #1296]
   18108:	str	q0, [x16, #1312]
   1810c:	str	q0, [x16, #1328]
   18110:	str	q0, [x16, #1344]
   18114:	str	q0, [x16, #1360]
   18118:	str	q0, [x16, #1376]
   1811c:	str	q0, [x16, #1392]
   18120:	str	q0, [x16, #1408]
   18124:	str	q0, [x16, #1424]
   18128:	str	q0, [x16, #1440]
   1812c:	str	q0, [x16, #1456]
   18130:	str	q0, [x16, #1472]
   18134:	str	q0, [x16, #1488]
   18138:	str	q0, [x16, #1504]
   1813c:	str	q0, [x16, #1520]
   18140:	lsr	w16, w13, w15
   18144:	add	w13, w13, #0x1
   18148:	cbz	w16, 18038 <lzma_mode_is_supported@@XZ_5.0+0x6374>
   1814c:	str	w12, [x8, #3344]
   18150:	mov	w12, #0xffffffff            	// #-1
   18154:	lsl	w11, w12, w11
   18158:	movi	v0.2d, #0x0
   1815c:	mov	w12, #0x6e78                	// #28280
   18160:	mvn	w11, w11
   18164:	mov	w14, #0x6e88                	// #28296
   18168:	str	w11, [x8, #3348]
   1816c:	str	q0, [x0, x12]
   18170:	mov	w12, #0x61e0                	// #25056
   18174:	mov	w13, wzr
   18178:	add	x15, x8, #0xcec
   1817c:	movi	d0, #0xffffffff
   18180:	mov	w16, #0x5                   	// #5
   18184:	str	wzr, [x0, x14]
   18188:	add	x11, x0, #0x6, lsl #12
   1818c:	add	x12, x0, x12
   18190:	mov	w14, #0x400                 	// #1024
   18194:	str	w10, [x8, #3340]
   18198:	str	d0, [x15]
   1819c:	str	w16, [x8, #3316]
   181a0:	mov	w15, w13
   181a4:	add	w13, w13, #0x1
   181a8:	lsl	x15, x15, #1
   181ac:	cmp	w13, w10
   181b0:	strh	w14, [x11, x15]
   181b4:	strh	w14, [x12, x15]
   181b8:	b.ls	181a0 <lzma_mode_is_supported@@XZ_5.0+0x64dc>  // b.plast
   181bc:	mov	w13, wzr
   181c0:	mov	w14, #0x400                 	// #1024
   181c4:	strh	w14, [x8]
   181c8:	strh	w14, [x8, #24]
   181cc:	strh	w14, [x8, #48]
   181d0:	strh	w14, [x8, #72]
   181d4:	mov	w15, w13
   181d8:	add	w13, w13, #0x1
   181dc:	lsl	x15, x15, #1
   181e0:	cmp	w13, w10
   181e4:	add	x16, x11, x15
   181e8:	add	x15, x12, x15
   181ec:	strh	w14, [x16, #32]
   181f0:	strh	w14, [x15, #32]
   181f4:	b.ls	181d4 <lzma_mode_is_supported@@XZ_5.0+0x6510>  // b.plast
   181f8:	mov	w13, wzr
   181fc:	mov	w14, #0x400                 	// #1024
   18200:	strh	w14, [x8, #2]
   18204:	strh	w14, [x8, #26]
   18208:	strh	w14, [x8, #50]
   1820c:	strh	w14, [x8, #74]
   18210:	mov	w15, w13
   18214:	add	w13, w13, #0x1
   18218:	lsl	x15, x15, #1
   1821c:	cmp	w13, w10
   18220:	add	x16, x11, x15
   18224:	add	x15, x12, x15
   18228:	strh	w14, [x16, #64]
   1822c:	strh	w14, [x15, #64]
   18230:	b.ls	18210 <lzma_mode_is_supported@@XZ_5.0+0x654c>  // b.plast
   18234:	mov	w13, wzr
   18238:	mov	w14, #0x400                 	// #1024
   1823c:	strh	w14, [x8, #4]
   18240:	strh	w14, [x8, #28]
   18244:	strh	w14, [x8, #52]
   18248:	strh	w14, [x8, #76]
   1824c:	mov	w15, w13
   18250:	add	w13, w13, #0x1
   18254:	lsl	x15, x15, #1
   18258:	cmp	w13, w10
   1825c:	add	x16, x11, x15
   18260:	add	x15, x12, x15
   18264:	strh	w14, [x16, #96]
   18268:	strh	w14, [x15, #96]
   1826c:	b.ls	1824c <lzma_mode_is_supported@@XZ_5.0+0x6588>  // b.plast
   18270:	mov	w13, wzr
   18274:	mov	w14, #0x400                 	// #1024
   18278:	strh	w14, [x8, #6]
   1827c:	strh	w14, [x8, #30]
   18280:	strh	w14, [x8, #54]
   18284:	strh	w14, [x8, #78]
   18288:	mov	w15, w13
   1828c:	add	w13, w13, #0x1
   18290:	lsl	x15, x15, #1
   18294:	cmp	w13, w10
   18298:	add	x16, x11, x15
   1829c:	add	x15, x12, x15
   182a0:	strh	w14, [x16, #128]
   182a4:	strh	w14, [x15, #128]
   182a8:	b.ls	18288 <lzma_mode_is_supported@@XZ_5.0+0x65c4>  // b.plast
   182ac:	mov	w13, wzr
   182b0:	mov	w14, #0x400                 	// #1024
   182b4:	strh	w14, [x8, #8]
   182b8:	strh	w14, [x8, #32]
   182bc:	strh	w14, [x8, #56]
   182c0:	strh	w14, [x8, #80]
   182c4:	mov	w15, w13
   182c8:	add	w13, w13, #0x1
   182cc:	lsl	x15, x15, #1
   182d0:	cmp	w13, w10
   182d4:	add	x16, x11, x15
   182d8:	add	x15, x12, x15
   182dc:	strh	w14, [x16, #160]
   182e0:	strh	w14, [x15, #160]
   182e4:	b.ls	182c4 <lzma_mode_is_supported@@XZ_5.0+0x6600>  // b.plast
   182e8:	mov	w13, wzr
   182ec:	mov	w14, #0x400                 	// #1024
   182f0:	strh	w14, [x8, #10]
   182f4:	strh	w14, [x8, #34]
   182f8:	strh	w14, [x8, #58]
   182fc:	strh	w14, [x8, #82]
   18300:	mov	w15, w13
   18304:	add	w13, w13, #0x1
   18308:	lsl	x15, x15, #1
   1830c:	cmp	w13, w10
   18310:	add	x16, x11, x15
   18314:	add	x15, x12, x15
   18318:	strh	w14, [x16, #192]
   1831c:	strh	w14, [x15, #192]
   18320:	b.ls	18300 <lzma_mode_is_supported@@XZ_5.0+0x663c>  // b.plast
   18324:	mov	w13, wzr
   18328:	mov	w14, #0x400                 	// #1024
   1832c:	strh	w14, [x8, #12]
   18330:	strh	w14, [x8, #36]
   18334:	strh	w14, [x8, #60]
   18338:	strh	w14, [x8, #84]
   1833c:	mov	w15, w13
   18340:	add	w13, w13, #0x1
   18344:	lsl	x15, x15, #1
   18348:	cmp	w13, w10
   1834c:	add	x16, x11, x15
   18350:	add	x15, x12, x15
   18354:	strh	w14, [x16, #224]
   18358:	strh	w14, [x15, #224]
   1835c:	b.ls	1833c <lzma_mode_is_supported@@XZ_5.0+0x6678>  // b.plast
   18360:	mov	w13, wzr
   18364:	mov	w14, #0x400                 	// #1024
   18368:	strh	w14, [x8, #14]
   1836c:	strh	w14, [x8, #38]
   18370:	strh	w14, [x8, #62]
   18374:	strh	w14, [x8, #86]
   18378:	mov	w15, w13
   1837c:	add	w13, w13, #0x1
   18380:	lsl	x15, x15, #1
   18384:	cmp	w13, w10
   18388:	add	x16, x11, x15
   1838c:	add	x15, x12, x15
   18390:	strh	w14, [x16, #256]
   18394:	strh	w14, [x15, #256]
   18398:	b.ls	18378 <lzma_mode_is_supported@@XZ_5.0+0x66b4>  // b.plast
   1839c:	mov	w13, wzr
   183a0:	mov	w14, #0x400                 	// #1024
   183a4:	strh	w14, [x8, #16]
   183a8:	strh	w14, [x8, #40]
   183ac:	strh	w14, [x8, #64]
   183b0:	strh	w14, [x8, #88]
   183b4:	mov	w15, w13
   183b8:	add	w13, w13, #0x1
   183bc:	lsl	x15, x15, #1
   183c0:	cmp	w13, w10
   183c4:	add	x16, x11, x15
   183c8:	add	x15, x12, x15
   183cc:	strh	w14, [x16, #288]
   183d0:	strh	w14, [x15, #288]
   183d4:	b.ls	183b4 <lzma_mode_is_supported@@XZ_5.0+0x66f0>  // b.plast
   183d8:	mov	w13, wzr
   183dc:	mov	w14, #0x400                 	// #1024
   183e0:	strh	w14, [x8, #18]
   183e4:	strh	w14, [x8, #42]
   183e8:	strh	w14, [x8, #66]
   183ec:	strh	w14, [x8, #90]
   183f0:	mov	w15, w13
   183f4:	add	w13, w13, #0x1
   183f8:	lsl	x15, x15, #1
   183fc:	cmp	w13, w10
   18400:	add	x16, x11, x15
   18404:	add	x15, x12, x15
   18408:	strh	w14, [x16, #320]
   1840c:	strh	w14, [x15, #320]
   18410:	b.ls	183f0 <lzma_mode_is_supported@@XZ_5.0+0x672c>  // b.plast
   18414:	mov	w13, wzr
   18418:	mov	w14, #0x400                 	// #1024
   1841c:	strh	w14, [x8, #20]
   18420:	strh	w14, [x8, #44]
   18424:	strh	w14, [x8, #68]
   18428:	strh	w14, [x8, #92]
   1842c:	mov	w15, w13
   18430:	add	w13, w13, #0x1
   18434:	lsl	x15, x15, #1
   18438:	cmp	w13, w10
   1843c:	add	x16, x11, x15
   18440:	add	x15, x12, x15
   18444:	strh	w14, [x16, #352]
   18448:	strh	w14, [x15, #352]
   1844c:	b.ls	1842c <lzma_mode_is_supported@@XZ_5.0+0x6768>  // b.plast
   18450:	mov	w10, #0x400                 	// #1024
   18454:	movi	v0.8h, #0x4, lsl #8
   18458:	movi	v1.4h, #0x4, lsl #8
   1845c:	mov	w11, #0x4000400             	// #67109888
   18460:	mov	w12, #0x6668                	// #26216
   18464:	mov	w13, #0x6768                	// #26472
   18468:	mov	w14, #0x6a6c                	// #27244
   1846c:	mov	w15, #0x6b6c                	// #27500
   18470:	strh	w10, [x8, #22]
   18474:	strh	w10, [x8, #46]
   18478:	strh	w10, [x8, #70]
   1847c:	strh	w10, [x8, #94]
   18480:	str	q0, [x0, #25440]
   18484:	str	q0, [x0, #25456]
   18488:	str	q0, [x0, #25472]
   1848c:	str	q0, [x0, #25488]
   18490:	str	q0, [x0, #25504]
   18494:	str	q0, [x0, #25520]
   18498:	str	q0, [x0, #25536]
   1849c:	str	q0, [x0, #25552]
   184a0:	str	q0, [x0, #25568]
   184a4:	str	q0, [x0, #25584]
   184a8:	str	q0, [x0, #25600]
   184ac:	str	q0, [x0, #25616]
   184b0:	str	q0, [x0, #25632]
   184b4:	str	q0, [x0, #25648]
   184b8:	str	q0, [x0, #25664]
   184bc:	str	q0, [x0, #25680]
   184c0:	str	q0, [x0, #25696]
   184c4:	str	q0, [x0, #25712]
   184c8:	str	q0, [x0, #25728]
   184cc:	str	q0, [x0, #25744]
   184d0:	str	q0, [x0, #25760]
   184d4:	str	q0, [x0, #25776]
   184d8:	str	q0, [x0, #25792]
   184dc:	str	q0, [x0, #25808]
   184e0:	str	q0, [x0, #25824]
   184e4:	str	q0, [x0, #25840]
   184e8:	str	q0, [x0, #25856]
   184ec:	str	q0, [x0, #25872]
   184f0:	str	q0, [x0, #25888]
   184f4:	str	q0, [x0, #25904]
   184f8:	str	q0, [x0, #25920]
   184fc:	str	q0, [x0, #25936]
   18500:	str	q0, [x0, #25952]
   18504:	str	q0, [x0, #25968]
   18508:	str	q0, [x0, #25984]
   1850c:	str	q0, [x0, #26000]
   18510:	str	q0, [x0, #26016]
   18514:	str	q0, [x0, #26032]
   18518:	str	q0, [x0, #26048]
   1851c:	str	q0, [x0, #26064]
   18520:	str	q0, [x0, #26080]
   18524:	str	q0, [x0, #26096]
   18528:	str	q0, [x0, #26112]
   1852c:	str	q0, [x0, #26128]
   18530:	str	q0, [x0, #26144]
   18534:	str	q0, [x0, #26160]
   18538:	str	q0, [x0, #26176]
   1853c:	str	q0, [x0, #26192]
   18540:	str	d1, [x0, #26208]
   18544:	str	w11, [x8, #2280]
   18548:	add	x10, x0, x12
   1854c:	add	x11, x0, x13
   18550:	add	x12, x0, x14
   18554:	add	x13, x0, x15
   18558:	mov	w14, #0x1                   	// #1
   1855c:	sub	w15, w14, #0x1
   18560:	lsr	w16, w14, w9
   18564:	lsl	x15, x15, #4
   18568:	add	w14, w14, #0x1
   1856c:	str	q0, [x10, x15]
   18570:	str	q0, [x11, x15]
   18574:	str	q0, [x12, x15]
   18578:	str	q0, [x13, x15]
   1857c:	cbz	w16, 1855c <lzma_mode_is_supported@@XZ_5.0+0x6898>
   18580:	add	x9, x8, #0x6e8
   18584:	movi	v0.8h, #0x4, lsl #8
   18588:	str	q0, [x9]
   1858c:	add	x9, x8, #0x6f8
   18590:	str	q0, [x9]
   18594:	add	x9, x8, #0x708
   18598:	str	q0, [x9]
   1859c:	add	x9, x8, #0x718
   185a0:	str	q0, [x9]
   185a4:	add	x9, x8, #0x728
   185a8:	str	q0, [x9]
   185ac:	add	x9, x8, #0x738
   185b0:	str	q0, [x9]
   185b4:	add	x9, x8, #0x748
   185b8:	str	q0, [x9]
   185bc:	add	x9, x8, #0x758
   185c0:	str	q0, [x9]
   185c4:	add	x9, x8, #0x768
   185c8:	str	q0, [x9]
   185cc:	add	x9, x8, #0x778
   185d0:	str	q0, [x9]
   185d4:	add	x9, x8, #0x788
   185d8:	str	q0, [x9]
   185dc:	add	x9, x8, #0x798
   185e0:	str	q0, [x9]
   185e4:	add	x9, x8, #0x7a8
   185e8:	str	q0, [x9]
   185ec:	add	x9, x8, #0x7b8
   185f0:	str	q0, [x9]
   185f4:	add	x9, x8, #0x7c8
   185f8:	str	q0, [x9]
   185fc:	add	x9, x8, #0x7d8
   18600:	str	q0, [x9]
   18604:	add	x9, x8, #0x7e8
   18608:	str	q0, [x9]
   1860c:	add	x9, x8, #0x7f8
   18610:	str	q0, [x9]
   18614:	add	x9, x8, #0x808
   18618:	str	q0, [x9]
   1861c:	add	x9, x8, #0x818
   18620:	str	q0, [x9]
   18624:	add	x9, x8, #0x828
   18628:	str	q0, [x9]
   1862c:	add	x9, x8, #0x838
   18630:	str	q0, [x9]
   18634:	add	x9, x8, #0x848
   18638:	str	q0, [x9]
   1863c:	add	x9, x8, #0x858
   18640:	str	q0, [x9]
   18644:	add	x9, x8, #0x868
   18648:	str	q0, [x9]
   1864c:	add	x9, x8, #0x878
   18650:	str	q0, [x9]
   18654:	add	x9, x8, #0x888
   18658:	str	q0, [x9]
   1865c:	add	x9, x8, #0x898
   18660:	str	q0, [x9]
   18664:	add	x9, x8, #0x8a8
   18668:	str	q0, [x9]
   1866c:	add	x9, x8, #0x8b8
   18670:	str	q0, [x9]
   18674:	add	x9, x8, #0x8c8
   18678:	str	q0, [x9]
   1867c:	add	x9, x8, #0x8d8
   18680:	str	q0, [x9]
   18684:	add	x9, x8, #0xaec
   18688:	str	q0, [x9]
   1868c:	add	x9, x8, #0xafc
   18690:	str	q0, [x9]
   18694:	add	x9, x8, #0xb0c
   18698:	str	q0, [x9]
   1869c:	add	x9, x8, #0xb1c
   186a0:	str	q0, [x9]
   186a4:	add	x9, x8, #0xb2c
   186a8:	str	q0, [x9]
   186ac:	add	x9, x8, #0xb3c
   186b0:	str	q0, [x9]
   186b4:	add	x9, x8, #0xb4c
   186b8:	str	q0, [x9]
   186bc:	add	x9, x8, #0xb5c
   186c0:	str	q0, [x9]
   186c4:	add	x9, x8, #0xb6c
   186c8:	str	q0, [x9]
   186cc:	add	x9, x8, #0xb7c
   186d0:	str	q0, [x9]
   186d4:	add	x9, x8, #0xb8c
   186d8:	str	q0, [x9]
   186dc:	add	x9, x8, #0xb9c
   186e0:	str	q0, [x9]
   186e4:	add	x9, x8, #0xbac
   186e8:	str	q0, [x9]
   186ec:	add	x9, x8, #0xbbc
   186f0:	str	q0, [x9]
   186f4:	add	x9, x8, #0xbcc
   186f8:	str	q0, [x9]
   186fc:	add	x9, x8, #0xbdc
   18700:	str	q0, [x9]
   18704:	add	x9, x8, #0xbec
   18708:	str	q0, [x9]
   1870c:	add	x9, x8, #0xbfc
   18710:	str	q0, [x9]
   18714:	add	x9, x8, #0xc0c
   18718:	str	q0, [x9]
   1871c:	add	x9, x8, #0xc1c
   18720:	str	q0, [x9]
   18724:	add	x9, x8, #0xc2c
   18728:	str	q0, [x9]
   1872c:	add	x9, x8, #0xc3c
   18730:	str	q0, [x9]
   18734:	add	x9, x8, #0xc4c
   18738:	str	q0, [x9]
   1873c:	add	x9, x8, #0xc5c
   18740:	str	q0, [x9]
   18744:	add	x9, x8, #0xc6c
   18748:	str	q0, [x9]
   1874c:	add	x9, x8, #0xc7c
   18750:	str	q0, [x9]
   18754:	add	x9, x8, #0xc8c
   18758:	str	q0, [x9]
   1875c:	add	x9, x8, #0xc9c
   18760:	str	q0, [x9]
   18764:	add	x9, x8, #0xcac
   18768:	str	q0, [x9]
   1876c:	add	x9, x8, #0xcbc
   18770:	str	q0, [x9]
   18774:	add	x9, x8, #0xccc
   18778:	str	q0, [x9]
   1877c:	add	x9, x8, #0xcdc
   18780:	str	q0, [x9]
   18784:	mov	w9, #0x1                   	// #1
   18788:	str	w9, [x8, #3360]
   1878c:	mov	w8, #0x6ea8                	// #28328
   18790:	movi	v0.2d, #0x0
   18794:	add	x8, x0, x8
   18798:	str	xzr, [x8, #16]
   1879c:	str	q0, [x8]
   187a0:	ret
   187a4:	str	x1, [x0, #28312]
   187a8:	ret
   187ac:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x633c>
   187b0:	add	x3, x3, #0x7b8
   187b4:	b	ff80 <lzma_mf_is_supported@@XZ_5.0+0x1f8c>
   187b8:	stp	x29, x30, [sp, #-48]!
   187bc:	stp	x20, x19, [sp, #32]
   187c0:	ldr	w8, [x2, #20]
   187c4:	str	x21, [sp, #16]
   187c8:	mov	x29, sp
   187cc:	cmp	w8, #0x4
   187d0:	b.hi	18880 <lzma_mode_is_supported@@XZ_5.0+0x6bbc>  // b.pmore
   187d4:	ldr	w9, [x2, #24]
   187d8:	mov	x19, x2
   187dc:	mov	x20, x0
   187e0:	mov	w0, #0xb                   	// #11
   187e4:	cmp	w9, #0x4
   187e8:	b.hi	18870 <lzma_mode_is_supported@@XZ_5.0+0x6bac>  // b.pmore
   187ec:	add	w8, w9, w8
   187f0:	cmp	w8, #0x4
   187f4:	b.hi	18870 <lzma_mode_is_supported@@XZ_5.0+0x6bac>  // b.pmore
   187f8:	ldr	w8, [x19, #28]
   187fc:	cmp	w8, #0x4
   18800:	b.hi	18880 <lzma_mode_is_supported@@XZ_5.0+0x6bbc>  // b.pmore
   18804:	ldr	x0, [x20]
   18808:	mov	x21, x3
   1880c:	cbnz	x0, 18840 <lzma_mode_is_supported@@XZ_5.0+0x6b7c>
   18810:	mov	w0, #0x6ec0                	// #28352
   18814:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
   18818:	str	x0, [x20]
   1881c:	cbz	x0, 18894 <lzma_mode_is_supported@@XZ_5.0+0x6bd0>
   18820:	adrp	x8, 15000 <lzma_mode_is_supported@@XZ_5.0+0x333c>
   18824:	adrp	x9, 18000 <lzma_mode_is_supported@@XZ_5.0+0x633c>
   18828:	adrp	x10, 18000 <lzma_mode_is_supported@@XZ_5.0+0x633c>
   1882c:	add	x8, x8, #0xf4
   18830:	add	x9, x9, #0x4
   18834:	add	x10, x10, #0x7a4
   18838:	stp	x8, x9, [x20, #8]
   1883c:	str	x10, [x20, #24]
   18840:	ldr	w8, [x19]
   18844:	mov	x1, x19
   18848:	str	x8, [x21]
   1884c:	ldr	x8, [x19, #8]
   18850:	str	x8, [x21, #8]
   18854:	ldr	w8, [x19, #16]
   18858:	str	x8, [x21, #16]
   1885c:	bl	18004 <lzma_mode_is_supported@@XZ_5.0+0x6340>
   18860:	ldr	x8, [x20]
   18864:	mov	w0, wzr
   18868:	mov	x9, #0xffffffffffffffff    	// #-1
   1886c:	str	x9, [x8, #28312]
   18870:	ldp	x20, x19, [sp, #32]
   18874:	ldr	x21, [sp, #16]
   18878:	ldp	x29, x30, [sp], #48
   1887c:	ret
   18880:	mov	w0, #0xb                   	// #11
   18884:	ldp	x20, x19, [sp, #32]
   18888:	ldr	x21, [sp, #16]
   1888c:	ldp	x29, x30, [sp], #48
   18890:	ret
   18894:	mov	w0, #0x5                   	// #5
   18898:	ldp	x20, x19, [sp, #32]
   1889c:	ldr	x21, [sp, #16]
   188a0:	ldp	x29, x30, [sp], #48
   188a4:	ret
   188a8:	and	w8, w1, #0xff
   188ac:	cmp	w8, #0xe0
   188b0:	b.ls	188bc <lzma_mode_is_supported@@XZ_5.0+0x6bf8>  // b.plast
   188b4:	mov	w0, #0x1                   	// #1
   188b8:	ret
   188bc:	mov	w9, #0xc16d                	// #49517
   188c0:	movk	w9, #0x6c16, lsl #16
   188c4:	umull	x9, w8, w9
   188c8:	lsr	x9, x9, #32
   188cc:	sub	w8, w8, w9
   188d0:	add	w8, w9, w8, lsr #1
   188d4:	mov	w9, #0xffffffd3            	// #-45
   188d8:	lsr	w8, w8, #5
   188dc:	madd	w9, w8, w9, w1
   188e0:	mov	w10, #0x8e39                	// #36409
   188e4:	movk	w10, #0x38e3, lsl #16
   188e8:	str	w8, [x0, #28]
   188ec:	and	w8, w9, #0xff
   188f0:	umull	x9, w8, w10
   188f4:	lsr	x9, x9, #33
   188f8:	add	w10, w9, w9, lsl #3
   188fc:	sub	w8, w8, w10
   18900:	stp	w8, w9, [x0, #20]
   18904:	add	w8, w8, w9
   18908:	cmp	w8, #0x4
   1890c:	cset	w0, hi  // hi = pmore
   18910:	ret
   18914:	stp	x29, x30, [sp, #-16]!
   18918:	ldr	w0, [x0]
   1891c:	mov	x29, sp
   18920:	bl	1046c <lzma_mf_is_supported@@XZ_5.0+0x2478>
   18924:	mov	w8, #0x6ec0                	// #28352
   18928:	add	x0, x0, x8
   1892c:	ldp	x29, x30, [sp], #16
   18930:	ret
   18934:	stp	x29, x30, [sp, #-16]!
   18938:	ldr	w9, [x0, #20]
   1893c:	mov	x29, sp
   18940:	cmp	w9, #0x4
   18944:	b.hi	1898c <lzma_mode_is_supported@@XZ_5.0+0x6cc8>  // b.pmore
   18948:	ldr	w10, [x0, #24]
   1894c:	mov	x8, x0
   18950:	mov	x0, #0xffffffffffffffff    	// #-1
   18954:	cmp	w10, #0x4
   18958:	b.hi	18984 <lzma_mode_is_supported@@XZ_5.0+0x6cc0>  // b.pmore
   1895c:	add	w9, w10, w9
   18960:	cmp	w9, #0x4
   18964:	b.hi	18984 <lzma_mode_is_supported@@XZ_5.0+0x6cc0>  // b.pmore
   18968:	ldr	w9, [x8, #28]
   1896c:	cmp	w9, #0x4
   18970:	b.hi	1898c <lzma_mode_is_supported@@XZ_5.0+0x6cc8>  // b.pmore
   18974:	ldr	w0, [x8]
   18978:	bl	1046c <lzma_mf_is_supported@@XZ_5.0+0x2478>
   1897c:	mov	w8, #0x6ec0                	// #28352
   18980:	add	x0, x0, x8
   18984:	ldp	x29, x30, [sp], #16
   18988:	ret
   1898c:	mov	x0, #0xffffffffffffffff    	// #-1
   18990:	ldp	x29, x30, [sp], #16
   18994:	ret
   18998:	stp	x29, x30, [sp, #-48]!
   1899c:	cmp	x3, #0x5
   189a0:	str	x21, [sp, #16]
   189a4:	stp	x20, x19, [sp, #32]
   189a8:	mov	x29, sp
   189ac:	b.ne	18a30 <lzma_mode_is_supported@@XZ_5.0+0x6d6c>  // b.any
   189b0:	mov	x19, x0
   189b4:	mov	w0, #0x70                  	// #112
   189b8:	mov	x21, x2
   189bc:	mov	x20, x1
   189c0:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
   189c4:	cbz	x0, 18a38 <lzma_mode_is_supported@@XZ_5.0+0x6d74>
   189c8:	ldrb	w8, [x21]
   189cc:	cmp	w8, #0xe0
   189d0:	b.hi	18a28 <lzma_mode_is_supported@@XZ_5.0+0x6d64>  // b.pmore
   189d4:	mov	w9, #0xc16d                	// #49517
   189d8:	movk	w9, #0x6c16, lsl #16
   189dc:	umull	x9, w8, w9
   189e0:	lsr	x9, x9, #32
   189e4:	sub	w10, w8, w9
   189e8:	add	w9, w9, w10, lsr #1
   189ec:	mov	w10, #0xffffffd3            	// #-45
   189f0:	lsr	w9, w9, #5
   189f4:	madd	w8, w9, w10, w8
   189f8:	mov	w10, #0x8e39                	// #36409
   189fc:	movk	w10, #0x38e3, lsl #16
   18a00:	and	w8, w8, #0xff
   18a04:	str	w9, [x0, #28]
   18a08:	umull	x9, w8, w10
   18a0c:	lsr	x9, x9, #33
   18a10:	add	w10, w9, w9, lsl #3
   18a14:	sub	w8, w8, w10
   18a18:	add	w10, w8, w9
   18a1c:	cmp	w10, #0x4
   18a20:	stp	w8, w9, [x0, #20]
   18a24:	b.ls	18a40 <lzma_mode_is_supported@@XZ_5.0+0x6d7c>  // b.plast
   18a28:	mov	x1, x20
   18a2c:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
   18a30:	mov	w8, #0x8                   	// #8
   18a34:	b	18a58 <lzma_mode_is_supported@@XZ_5.0+0x6d94>
   18a38:	mov	w8, #0x5                   	// #5
   18a3c:	b	18a58 <lzma_mode_is_supported@@XZ_5.0+0x6d94>
   18a40:	ldur	w9, [x21, #1]
   18a44:	mov	w8, wzr
   18a48:	str	xzr, [x0, #8]
   18a4c:	str	wzr, [x0, #16]
   18a50:	str	w9, [x0]
   18a54:	str	x0, [x19]
   18a58:	ldp	x20, x19, [sp, #32]
   18a5c:	ldr	x21, [sp, #16]
   18a60:	mov	w0, w8
   18a64:	ldp	x29, x30, [sp], #48
   18a68:	ret
   18a6c:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x633c>
   18a70:	add	x3, x3, #0xa78
   18a74:	b	dae4 <lzma_crc64@@XZ_5.0+0x1398>
   18a78:	stp	x29, x30, [sp, #-48]!
   18a7c:	stp	x22, x21, [sp, #16]
   18a80:	stp	x20, x19, [sp, #32]
   18a84:	mov	x29, sp
   18a88:	cbz	x2, 18b48 <lzma_mode_is_supported@@XZ_5.0+0x6e84>
   18a8c:	mov	x22, x0
   18a90:	ldr	x0, [x0]
   18a94:	mov	x19, x3
   18a98:	mov	x21, x2
   18a9c:	mov	x20, x1
   18aa0:	cbnz	x0, 18adc <lzma_mode_is_supported@@XZ_5.0+0x6e18>
   18aa4:	mov	w0, #0xa8                  	// #168
   18aa8:	movk	w0, #0x1, lsl #16
   18aac:	mov	x1, x20
   18ab0:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
   18ab4:	cbz	x0, 18b8c <lzma_mode_is_supported@@XZ_5.0+0x6ec8>
   18ab8:	adrp	x8, 18000 <lzma_mode_is_supported@@XZ_5.0+0x633c>
   18abc:	adrp	x9, 19000 <lzma_mode_is_supported@@XZ_5.0+0x733c>
   18ac0:	adrp	x10, 19000 <lzma_mode_is_supported@@XZ_5.0+0x733c>
   18ac4:	add	x8, x8, #0xcac
   18ac8:	add	x9, x9, #0x40
   18acc:	add	x10, x10, #0x70
   18ad0:	stp	x0, x8, [x22]
   18ad4:	stp	x9, x10, [x22, #16]
   18ad8:	str	xzr, [x0, #8]
   18adc:	ldp	q2, q0, [x21, #16]
   18ae0:	ldr	q1, [x21]
   18ae4:	add	x2, x0, #0x10
   18ae8:	mov	w8, #0x1                   	// #1
   18aec:	stp	q2, q0, [x0, #32]
   18af0:	str	q1, [x0, #16]
   18af4:	ldp	q0, q1, [x21, #80]
   18af8:	ldp	q2, q3, [x21, #48]
   18afc:	ldr	x9, [x0, #24]
   18b00:	str	wzr, [x0]
   18b04:	stp	q0, q1, [x0, #96]
   18b08:	stp	q2, q3, [x0, #64]
   18b0c:	strh	w8, [x0, #128]
   18b10:	cbz	x9, 18b20 <lzma_mode_is_supported@@XZ_5.0+0x6e5c>
   18b14:	ldr	w8, [x0, #32]
   18b18:	cmp	w8, #0x0
   18b1c:	cset	w8, eq  // eq = none
   18b20:	strb	w8, [x0, #130]
   18b24:	add	x0, x0, #0x8
   18b28:	mov	x1, x20
   18b2c:	mov	x3, x19
   18b30:	bl	119d4 <lzma_lzma_preset@@XZ_5.0+0x1550>
   18b34:	cbz	w0, 18b5c <lzma_mode_is_supported@@XZ_5.0+0x6e98>
   18b38:	ldp	x20, x19, [sp, #32]
   18b3c:	ldp	x22, x21, [sp, #16]
   18b40:	ldp	x29, x30, [sp], #48
   18b44:	ret
   18b48:	mov	w0, #0xb                   	// #11
   18b4c:	ldp	x20, x19, [sp, #32]
   18b50:	ldp	x22, x21, [sp, #16]
   18b54:	ldp	x29, x30, [sp], #48
   18b58:	ret
   18b5c:	ldp	x9, x8, [x19]
   18b60:	mov	w0, wzr
   18b64:	add	x9, x8, x9
   18b68:	lsr	x9, x9, #16
   18b6c:	cbnz	x9, 18b38 <lzma_mode_is_supported@@XZ_5.0+0x6e74>
   18b70:	mov	w9, #0x10000               	// #65536
   18b74:	sub	x8, x9, x8
   18b78:	str	x8, [x19]
   18b7c:	ldp	x20, x19, [sp, #32]
   18b80:	ldp	x22, x21, [sp, #16]
   18b84:	ldp	x29, x30, [sp], #48
   18b88:	ret
   18b8c:	mov	w0, #0x5                   	// #5
   18b90:	ldp	x20, x19, [sp, #32]
   18b94:	ldp	x22, x21, [sp, #16]
   18b98:	ldp	x29, x30, [sp], #48
   18b9c:	ret
   18ba0:	stp	x29, x30, [sp, #-16]!
   18ba4:	mov	x29, sp
   18ba8:	bl	11b2c <lzma_lzma_preset@@XZ_5.0+0x16a8>
   18bac:	mov	w8, #0xa8                  	// #168
   18bb0:	movk	w8, #0x1, lsl #16
   18bb4:	add	x8, x0, x8
   18bb8:	cmn	x0, #0x1
   18bbc:	csinv	x0, x8, xzr, ne  // ne = any
   18bc0:	ldp	x29, x30, [sp], #16
   18bc4:	ret
   18bc8:	ldr	w8, [x0]
   18bcc:	sub	w9, w8, #0x1
   18bd0:	cmp	w8, #0x1, lsl #12
   18bd4:	mov	w8, #0xfff                 	// #4095
   18bd8:	csel	w8, w9, w8, hi  // hi = pmore
   18bdc:	orr	w8, w8, w8, lsr #2
   18be0:	orr	w8, w8, w8, lsr #3
   18be4:	orr	w8, w8, w8, lsr #4
   18be8:	orr	w8, w8, w8, lsr #8
   18bec:	orr	w8, w8, w8, lsr #16
   18bf0:	cmn	w8, #0x1
   18bf4:	b.eq	18c28 <lzma_mode_is_supported@@XZ_5.0+0x6f64>  // b.none
   18bf8:	mov	w9, w8
   18bfc:	mov	w10, #0x1ffe                	// #8190
   18c00:	cmp	w8, w10
   18c04:	add	x9, x9, #0x1
   18c08:	b.hi	18c38 <lzma_mode_is_supported@@XZ_5.0+0x6f74>  // b.pmore
   18c0c:	adrp	x8, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   18c10:	ldr	x8, [x8, #4008]
   18c14:	ldrb	w8, [x8, x9]
   18c18:	sub	w8, w8, #0x18
   18c1c:	mov	w0, wzr
   18c20:	strb	w8, [x1]
   18c24:	ret
   18c28:	mov	w8, #0x28                  	// #40
   18c2c:	mov	w0, wzr
   18c30:	strb	w8, [x1]
   18c34:	ret
   18c38:	mov	w10, #0x1fffffe             	// #33554430
   18c3c:	cmp	w8, w10
   18c40:	b.hi	18c6c <lzma_mode_is_supported@@XZ_5.0+0x6fa8>  // b.pmore
   18c44:	mov	w8, w9
   18c48:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   18c4c:	ldr	x9, [x9, #4008]
   18c50:	lsr	x8, x8, #12
   18c54:	ldrb	w8, [x9, x8]
   18c58:	add	w8, w8, #0x18
   18c5c:	sub	w8, w8, #0x18
   18c60:	mov	w0, wzr
   18c64:	strb	w8, [x1]
   18c68:	ret
   18c6c:	mov	w8, w9
   18c70:	adrp	x9, 31000 <lzma_mode_is_supported@@XZ_5.0+0x1f33c>
   18c74:	ldr	x9, [x9, #4008]
   18c78:	lsr	x8, x8, #24
   18c7c:	ldrb	w8, [x9, x8]
   18c80:	add	w8, w8, #0x30
   18c84:	sub	w8, w8, #0x18
   18c88:	mov	w0, wzr
   18c8c:	strb	w8, [x1]
   18c90:	ret
   18c94:	ldr	w8, [x0]
   18c98:	mov	w9, #0x100000              	// #1048576
   18c9c:	add	x8, x8, x8, lsl #1
   18ca0:	cmp	x8, #0x100, lsl #12
   18ca4:	csel	x0, x8, x9, hi  // hi = pmore
   18ca8:	ret
   18cac:	sub	sp, sp, #0x90
   18cb0:	stp	x24, x23, [sp, #96]
   18cb4:	ldr	x24, [x3]
   18cb8:	stp	x29, x30, [sp, #48]
   18cbc:	add	x29, sp, #0x30
   18cc0:	stp	x28, x27, [sp, #64]
   18cc4:	cmp	x24, x4
   18cc8:	stp	x26, x25, [sp, #80]
   18ccc:	stp	x22, x21, [sp, #112]
   18cd0:	stp	x20, x19, [sp, #128]
   18cd4:	stur	x2, [x29, #-8]
   18cd8:	b.cs	18ff4 <lzma_mode_is_supported@@XZ_5.0+0x7330>  // b.hs, b.nlast
   18cdc:	add	x8, x0, #0x98
   18ce0:	str	x8, [sp, #16]
   18ce4:	add	x8, x0, #0x88
   18ce8:	stur	x8, [x29, #-16]
   18cec:	add	x8, x0, #0x10
   18cf0:	str	x8, [sp]
   18cf4:	mov	x9, x0
   18cf8:	ldr	w8, [x9], #166
   18cfc:	ldur	x27, [x29, #-16]
   18d00:	adrp	x25, 21000 <lzma_mode_is_supported@@XZ_5.0+0xf33c>
   18d04:	mov	x26, x4
   18d08:	mov	x20, x3
   18d0c:	mov	x22, x1
   18d10:	mov	x23, x0
   18d14:	add	x19, x0, #0xa0
   18d18:	add	x21, x0, #0x90
   18d1c:	add	x25, x25, #0x730
   18d20:	str	x9, [sp, #8]
   18d24:	str	x4, [sp, #24]
   18d28:	b	18d9c <lzma_mode_is_supported@@XZ_5.0+0x70d8>
   18d2c:	mov	x28, x25
   18d30:	mov	x25, x19
   18d34:	ldr	x19, [x27]
   18d38:	ldr	x8, [x22]
   18d3c:	ldr	w9, [x22, #24]
   18d40:	ldur	x11, [x29, #-8]
   18d44:	sub	x10, x26, x24
   18d48:	cmp	x10, x19
   18d4c:	add	x8, x8, x9
   18d50:	csel	x26, x10, x19, cc  // cc = lo, ul, last
   18d54:	add	x0, x11, x24
   18d58:	sub	x1, x8, x19
   18d5c:	mov	x2, x26
   18d60:	bl	3040 <memcpy@plt>
   18d64:	add	x9, x26, x24
   18d68:	subs	x10, x19, x26
   18d6c:	ldr	x26, [sp, #24]
   18d70:	mov	w8, wzr
   18d74:	mov	w0, wzr
   18d78:	mov	x19, x25
   18d7c:	mov	x25, x28
   18d80:	str	x9, [x20]
   18d84:	str	x10, [x27]
   18d88:	b.ne	18ff8 <lzma_mode_is_supported@@XZ_5.0+0x7334>  // b.any
   18d8c:	str	w8, [x23]
   18d90:	ldr	x24, [x20]
   18d94:	cmp	x24, x26
   18d98:	b.cs	18ff4 <lzma_mode_is_supported@@XZ_5.0+0x7330>  // b.hs, b.nlast
   18d9c:	cmp	w8, #0x4
   18da0:	b.hi	18d90 <lzma_mode_is_supported@@XZ_5.0+0x70cc>  // b.pmore
   18da4:	mov	w8, w8
   18da8:	adr	x9, 18d2c <lzma_mode_is_supported@@XZ_5.0+0x7068>
   18dac:	ldrb	w10, [x25, x8]
   18db0:	add	x9, x9, x10, lsl #2
   18db4:	br	x9
   18db8:	ldp	w8, w9, [x22, #24]
   18dbc:	ldr	w10, [x22, #36]
   18dc0:	sub	w8, w9, w8
   18dc4:	cmn	w8, w10
   18dc8:	b.eq	19018 <lzma_mode_is_supported@@XZ_5.0+0x7354>  // b.none
   18dcc:	ldrb	w8, [x23, #129]
   18dd0:	cbz	w8, 18de4 <lzma_mode_is_supported@@XZ_5.0+0x7120>
   18dd4:	ldr	x0, [x23, #8]
   18dd8:	ldr	x1, [sp]
   18ddc:	bl	11010 <lzma_lzma_preset@@XZ_5.0+0xb8c>
   18de0:	cbnz	w0, 18ff8 <lzma_mode_is_supported@@XZ_5.0+0x7334>
   18de4:	ldur	x9, [x29, #-16]
   18de8:	mov	x8, xzr
   18dec:	stp	xzr, xzr, [x9]
   18df0:	mov	w9, #0x1                   	// #1
   18df4:	str	w9, [x23]
   18df8:	b	18e04 <lzma_mode_is_supported@@XZ_5.0+0x7140>
   18dfc:	ldur	x8, [x29, #-16]
   18e00:	ldr	x8, [x8]
   18e04:	mov	w9, #0x200000              	// #2097152
   18e08:	sub	w8, w9, w8
   18e0c:	ldr	w9, [x22, #100]
   18e10:	ldp	w24, w26, [x22, #24]
   18e14:	ldr	x0, [x23, #8]
   18e18:	ldr	x2, [sp, #8]
   18e1c:	subs	w10, w8, w9
   18e20:	add	w10, w10, w24
   18e24:	sub	w10, w10, w26
   18e28:	cmp	w8, w9
   18e2c:	csel	w5, wzr, w10, cc  // cc = lo, ul, last
   18e30:	mov	w4, #0x10000               	// #65536
   18e34:	mov	x1, x22
   18e38:	mov	x3, x21
   18e3c:	bl	1059c <lzma_lzma_preset@@XZ_5.0+0x118>
   18e40:	ldp	w8, w9, [x22, #24]
   18e44:	ldr	x10, [x23, #136]
   18e48:	sub	w11, w26, w24
   18e4c:	cmp	w0, #0x1
   18e50:	add	w8, w11, w8
   18e54:	sub	w8, w8, w9
   18e58:	add	x10, x10, x8
   18e5c:	str	x10, [x23, #136]
   18e60:	b.ne	18ff4 <lzma_mode_is_supported@@XZ_5.0+0x7330>  // b.any
   18e64:	ldr	x8, [x21]
   18e68:	cmp	x8, x10
   18e6c:	b.cs	18ed4 <lzma_mode_is_supported@@XZ_5.0+0x7210>  // b.hs, b.nlast
   18e70:	ldrb	w9, [x23, #128]
   18e74:	cbz	w9, 18f1c <lzma_mode_is_supported@@XZ_5.0+0x7258>
   18e78:	ldrb	w11, [x23, #130]
   18e7c:	cbz	w11, 18f2c <lzma_mode_is_supported@@XZ_5.0+0x7268>
   18e80:	mov	w12, #0xe0                  	// #224
   18e84:	mov	x11, xzr
   18e88:	strb	w12, [x19]
   18e8c:	b	18f48 <lzma_mode_is_supported@@XZ_5.0+0x7284>
   18e90:	ldr	x2, [x21]
   18e94:	b	18fbc <lzma_mode_is_supported@@XZ_5.0+0x72f8>
   18e98:	ldr	x24, [sp, #16]
   18e9c:	ldur	x3, [x29, #-8]
   18ea0:	mov	w2, #0x3                   	// #3
   18ea4:	mov	x0, x19
   18ea8:	mov	x1, x24
   18eac:	mov	x4, x20
   18eb0:	mov	x5, x26
   18eb4:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
   18eb8:	ldr	x8, [x24]
   18ebc:	cmp	x8, #0x3
   18ec0:	b.ne	18ff4 <lzma_mode_is_supported@@XZ_5.0+0x7330>  // b.any
   18ec4:	mov	w8, #0x4                   	// #4
   18ec8:	str	w8, [x23]
   18ecc:	ldr	x24, [x20]
   18ed0:	b	18d2c <lzma_mode_is_supported@@XZ_5.0+0x7068>
   18ed4:	add	x8, x10, x9
   18ed8:	str	x8, [x23, #136]
   18edc:	str	wzr, [x22, #28]
   18ee0:	ldrb	w9, [x23, #130]
   18ee4:	ldr	x26, [sp, #24]
   18ee8:	sub	w8, w8, #0x1
   18eec:	mov	w11, #0x1                   	// #1
   18ef0:	cmp	w9, #0x0
   18ef4:	lsr	w10, w8, #8
   18ef8:	strb	w8, [x23, #162]
   18efc:	cinc	w8, w11, eq  // eq = none
   18f00:	str	xzr, [x23, #152]
   18f04:	strb	w11, [x23, #129]
   18f08:	strb	wzr, [x23, #130]
   18f0c:	strb	w10, [x23, #161]
   18f10:	strb	w8, [x23, #160]
   18f14:	mov	w8, #0x3                   	// #3
   18f18:	b	18d8c <lzma_mode_is_supported@@XZ_5.0+0x70c8>
   18f1c:	ldrb	w11, [x23, #129]
   18f20:	cbz	w11, 18f3c <lzma_mode_is_supported@@XZ_5.0+0x7278>
   18f24:	mov	w11, #0xa0                  	// #160
   18f28:	b	18f40 <lzma_mode_is_supported@@XZ_5.0+0x727c>
   18f2c:	mov	w12, #0xc0                  	// #192
   18f30:	mov	x11, xzr
   18f34:	strb	w12, [x19]
   18f38:	b	18f48 <lzma_mode_is_supported@@XZ_5.0+0x7284>
   18f3c:	mov	w11, #0x80                  	// #128
   18f40:	strb	w11, [x23, #161]
   18f44:	mov	w11, #0x1                   	// #1
   18f48:	add	x13, x23, #0xa0
   18f4c:	str	x11, [x23, #152]
   18f50:	add	x14, x13, x11
   18f54:	ldrb	w15, [x14]
   18f58:	sub	x12, x10, #0x1
   18f5c:	ldr	x26, [sp, #24]
   18f60:	lsr	x10, x12, #8
   18f64:	strb	w10, [x14, #1]
   18f68:	orr	x10, x11, #0x2
   18f6c:	add	w11, w15, w12, lsr #16
   18f70:	strb	w11, [x14]
   18f74:	sub	x11, x8, #0x1
   18f78:	add	x13, x13, x10
   18f7c:	lsr	x14, x11, #8
   18f80:	strb	w12, [x13]
   18f84:	strb	w14, [x13, #1]
   18f88:	strb	w11, [x13, #2]
   18f8c:	cbz	w9, 18fa4 <lzma_mode_is_supported@@XZ_5.0+0x72e0>
   18f90:	ldr	x0, [sp]
   18f94:	add	x8, x10, x23
   18f98:	add	x1, x8, #0xa3
   18f9c:	bl	11c04 <lzma_lzma_preset@@XZ_5.0+0x1780>
   18fa0:	ldr	x8, [x23, #144]
   18fa4:	add	x2, x8, #0x6
   18fa8:	mov	w8, #0x2                   	// #2
   18fac:	strh	wzr, [x23, #128]
   18fb0:	strb	wzr, [x23, #130]
   18fb4:	str	x2, [x23, #144]
   18fb8:	str	w8, [x23]
   18fbc:	ldr	x24, [sp, #16]
   18fc0:	ldur	x3, [x29, #-8]
   18fc4:	mov	x0, x19
   18fc8:	mov	x4, x20
   18fcc:	mov	x1, x24
   18fd0:	mov	x5, x26
   18fd4:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
   18fd8:	ldr	x9, [x24]
   18fdc:	ldr	x10, [x21]
   18fe0:	mov	w8, wzr
   18fe4:	mov	w0, wzr
   18fe8:	cmp	x9, x10
   18fec:	b.eq	18d8c <lzma_mode_is_supported@@XZ_5.0+0x70c8>  // b.none
   18ff0:	b	18ff8 <lzma_mode_is_supported@@XZ_5.0+0x7334>
   18ff4:	mov	w0, wzr
   18ff8:	ldp	x20, x19, [sp, #128]
   18ffc:	ldp	x22, x21, [sp, #112]
   19000:	ldp	x24, x23, [sp, #96]
   19004:	ldp	x26, x25, [sp, #80]
   19008:	ldp	x28, x27, [sp, #64]
   1900c:	ldp	x29, x30, [sp, #48]
   19010:	add	sp, sp, #0x90
   19014:	ret
   19018:	ldr	w8, [x22, #104]
   1901c:	cmp	w8, #0x3
   19020:	b.ne	19034 <lzma_mode_is_supported@@XZ_5.0+0x7370>  // b.any
   19024:	add	x9, x24, #0x1
   19028:	str	x9, [x20]
   1902c:	ldur	x9, [x29, #-8]
   19030:	strb	wzr, [x9, x24]
   19034:	cmp	w8, #0x0
   19038:	cset	w0, ne  // ne = any
   1903c:	b	18ff8 <lzma_mode_is_supported@@XZ_5.0+0x7334>
   19040:	stp	x29, x30, [sp, #-32]!
   19044:	stp	x20, x19, [sp, #16]
   19048:	mov	x19, x0
   1904c:	ldr	x0, [x0, #8]
   19050:	mov	x29, sp
   19054:	mov	x20, x1
   19058:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
   1905c:	mov	x0, x19
   19060:	mov	x1, x20
   19064:	ldp	x20, x19, [sp, #16]
   19068:	ldp	x29, x30, [sp], #32
   1906c:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
   19070:	ldr	x9, [x1, #8]
   19074:	cbz	x9, 19080 <lzma_mode_is_supported@@XZ_5.0+0x73bc>
   19078:	ldr	w8, [x0]
   1907c:	cbz	w8, 19088 <lzma_mode_is_supported@@XZ_5.0+0x73c4>
   19080:	mov	w0, #0xb                   	// #11
   19084:	ret
   19088:	ldr	w8, [x0, #36]
   1908c:	ldr	w10, [x9, #20]
   19090:	cmp	w8, w10
   19094:	b.ne	190c0 <lzma_mode_is_supported@@XZ_5.0+0x73fc>  // b.any
   19098:	ldr	w8, [x0, #40]
   1909c:	ldr	w11, [x9, #24]
   190a0:	cmp	w8, w11
   190a4:	b.ne	190c0 <lzma_mode_is_supported@@XZ_5.0+0x73fc>  // b.any
   190a8:	ldr	w8, [x0, #44]
   190ac:	ldr	w11, [x9, #28]
   190b0:	cmp	w8, w11
   190b4:	b.ne	190c0 <lzma_mode_is_supported@@XZ_5.0+0x73fc>  // b.any
   190b8:	mov	w0, wzr
   190bc:	ret
   190c0:	cmp	w10, #0x4
   190c4:	b.ls	190d0 <lzma_mode_is_supported@@XZ_5.0+0x740c>  // b.plast
   190c8:	mov	w0, #0x8                   	// #8
   190cc:	ret
   190d0:	ldr	w11, [x9, #24]
   190d4:	mov	w8, #0x8                   	// #8
   190d8:	cmp	w11, #0x4
   190dc:	b.hi	1910c <lzma_mode_is_supported@@XZ_5.0+0x7448>  // b.pmore
   190e0:	add	w12, w11, w10
   190e4:	cmp	w12, #0x4
   190e8:	b.hi	1910c <lzma_mode_is_supported@@XZ_5.0+0x7448>  // b.pmore
   190ec:	ldr	w9, [x9, #28]
   190f0:	cmp	w9, #0x4
   190f4:	b.hi	190c8 <lzma_mode_is_supported@@XZ_5.0+0x7404>  // b.pmore
   190f8:	mov	w8, wzr
   190fc:	str	w9, [x0, #44]
   19100:	mov	w9, #0x101                 	// #257
   19104:	stp	w10, w11, [x0, #36]
   19108:	strh	w9, [x0, #128]
   1910c:	mov	w0, w8
   19110:	ret
   19114:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x733c>
   19118:	add	x3, x3, #0x120
   1911c:	b	ff80 <lzma_mf_is_supported@@XZ_5.0+0x1f8c>
   19120:	stp	x29, x30, [sp, #-48]!
   19124:	stp	x22, x21, [sp, #16]
   19128:	stp	x20, x19, [sp, #32]
   1912c:	mov	x22, x0
   19130:	ldr	x0, [x0]
   19134:	mov	x19, x3
   19138:	mov	x20, x2
   1913c:	mov	x21, x1
   19140:	mov	x29, sp
   19144:	cbnz	x0, 19180 <lzma_mode_is_supported@@XZ_5.0+0x74bc>
   19148:	mov	w0, #0xb8                  	// #184
   1914c:	mov	x1, x21
   19150:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
   19154:	cbz	x0, 191c8 <lzma_mode_is_supported@@XZ_5.0+0x7504>
   19158:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x733c>
   1915c:	adrp	x9, 19000 <lzma_mode_is_supported@@XZ_5.0+0x733c>
   19160:	add	x8, x8, #0x29c
   19164:	add	x9, x9, #0x584
   19168:	movi	v0.2d, #0x0
   1916c:	stp	x0, x8, [x22]
   19170:	str	x9, [x22, #32]
   19174:	str	xzr, [x0, #40]
   19178:	stur	q0, [x0, #24]
   1917c:	stur	q0, [x0, #8]
   19180:	mov	w9, #0x1                   	// #1
   19184:	str	wzr, [x0]
   19188:	strb	w9, [x0, #64]
   1918c:	ldr	x8, [x20, #8]
   19190:	cbz	x8, 191a0 <lzma_mode_is_supported@@XZ_5.0+0x74dc>
   19194:	ldr	w8, [x20, #16]
   19198:	cmp	w8, #0x0
   1919c:	cset	w9, eq  // eq = none
   191a0:	strb	w9, [x0, #65]
   191a4:	mov	x1, x21
   191a8:	mov	x2, x20
   191ac:	mov	x3, x19
   191b0:	ldp	x20, x19, [sp, #32]
   191b4:	ldp	x22, x21, [sp, #16]
   191b8:	add	x8, x0, #0x8
   191bc:	mov	x0, x8
   191c0:	ldp	x29, x30, [sp], #48
   191c4:	b	15060 <lzma_mode_is_supported@@XZ_5.0+0x339c>
   191c8:	ldp	x20, x19, [sp, #32]
   191cc:	ldp	x22, x21, [sp, #16]
   191d0:	mov	w0, #0x5                   	// #5
   191d4:	ldp	x29, x30, [sp], #48
   191d8:	ret
   191dc:	stp	x29, x30, [sp, #-16]!
   191e0:	mov	x29, sp
   191e4:	bl	18914 <lzma_mode_is_supported@@XZ_5.0+0x6c50>
   191e8:	add	x0, x0, #0xb8
   191ec:	ldp	x29, x30, [sp], #16
   191f0:	ret
   191f4:	stp	x29, x30, [sp, #-32]!
   191f8:	cmp	x3, #0x1
   191fc:	stp	x20, x19, [sp, #16]
   19200:	mov	x29, sp
   19204:	b.ne	19218 <lzma_mode_is_supported@@XZ_5.0+0x7554>  // b.any
   19208:	ldrb	w8, [x2]
   1920c:	mov	x20, x2
   19210:	cmp	w8, #0x28
   19214:	b.ls	1922c <lzma_mode_is_supported@@XZ_5.0+0x7568>  // b.plast
   19218:	mov	w8, #0x8                   	// #8
   1921c:	ldp	x20, x19, [sp, #16]
   19220:	mov	w0, w8
   19224:	ldp	x29, x30, [sp], #32
   19228:	ret
   1922c:	mov	x19, x0
   19230:	mov	w0, #0x70                  	// #112
   19234:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
   19238:	cbz	x0, 19250 <lzma_mode_is_supported@@XZ_5.0+0x758c>
   1923c:	ldrb	w8, [x20]
   19240:	cmp	w8, #0x28
   19244:	b.ne	19264 <lzma_mode_is_supported@@XZ_5.0+0x75a0>  // b.any
   19248:	mov	w8, #0xffffffff            	// #-1
   1924c:	b	19278 <lzma_mode_is_supported@@XZ_5.0+0x75b4>
   19250:	mov	w8, #0x5                   	// #5
   19254:	ldp	x20, x19, [sp, #16]
   19258:	mov	w0, w8
   1925c:	ldp	x29, x30, [sp], #32
   19260:	ret
   19264:	mov	w9, #0x2                   	// #2
   19268:	lsr	w10, w8, #1
   1926c:	bfxil	w9, w8, #0, #1
   19270:	add	w8, w10, #0xb
   19274:	lsl	w8, w9, w8
   19278:	str	w8, [x0]
   1927c:	mov	w8, wzr
   19280:	str	xzr, [x0, #8]
   19284:	str	wzr, [x0, #16]
   19288:	str	x0, [x19]
   1928c:	ldp	x20, x19, [sp, #16]
   19290:	mov	w0, w8
   19294:	ldp	x29, x30, [sp], #32
   19298:	ret
   1929c:	str	d8, [sp, #-112]!
   192a0:	adrp	x8, 21000 <lzma_mode_is_supported@@XZ_5.0+0xf33c>
   192a4:	ldr	d8, [x8, #1848]
   192a8:	stp	x26, x25, [sp, #48]
   192ac:	adrp	x26, 21000 <lzma_mode_is_supported@@XZ_5.0+0xf33c>
   192b0:	stp	x28, x27, [sp, #32]
   192b4:	stp	x24, x23, [sp, #64]
   192b8:	stp	x22, x21, [sp, #80]
   192bc:	stp	x20, x19, [sp, #96]
   192c0:	mov	x20, x4
   192c4:	mov	x21, x3
   192c8:	mov	x23, x2
   192cc:	mov	x19, x1
   192d0:	mov	x22, x0
   192d4:	add	x24, x1, #0x8
   192d8:	add	x25, x0, #0x48
   192dc:	add	x26, x26, #0x740
   192e0:	mov	w28, #0x6                   	// #6
   192e4:	stp	x29, x30, [sp, #16]
   192e8:	mov	x29, sp
   192ec:	ldr	x27, [x21]
   192f0:	ldr	w8, [x22]
   192f4:	cmp	x27, x20
   192f8:	b.cs	19358 <lzma_mode_is_supported@@XZ_5.0+0x7694>  // b.hs, b.nlast
   192fc:	cmp	w8, #0x7
   19300:	b.hi	19558 <lzma_mode_is_supported@@XZ_5.0+0x7894>  // b.pmore
   19304:	mov	w8, w8
   19308:	adr	x9, 19318 <lzma_mode_is_supported@@XZ_5.0+0x7654>
   1930c:	ldrb	w10, [x26, x8]
   19310:	add	x9, x9, x10, lsl #2
   19314:	br	x9
   19318:	ldrb	w8, [x23, x27]
   1931c:	add	x9, x27, #0x1
   19320:	str	x9, [x21]
   19324:	cbz	x8, 1957c <lzma_mode_is_supported@@XZ_5.0+0x78b8>
   19328:	cmp	w8, #0xdf
   1932c:	b.hi	194c8 <lzma_mode_is_supported@@XZ_5.0+0x7804>  // b.pmore
   19330:	cmp	w8, #0x1
   19334:	b.eq	194c8 <lzma_mode_is_supported@@XZ_5.0+0x7804>  // b.none
   19338:	ldrb	w9, [x22, #65]
   1933c:	cbnz	w9, 19548 <lzma_mode_is_supported@@XZ_5.0+0x7884>
   19340:	sxtb	w10, w8
   19344:	tbnz	w10, #31, 194dc <lzma_mode_is_supported@@XZ_5.0+0x7818>
   19348:	cmp	w8, #0x2
   1934c:	b.hi	19548 <lzma_mode_is_supported@@XZ_5.0+0x7884>  // b.pmore
   19350:	str	d8, [x22]
   19354:	b	19530 <lzma_mode_is_supported@@XZ_5.0+0x786c>
   19358:	cmp	w8, #0x6
   1935c:	b.ne	19550 <lzma_mode_is_supported@@XZ_5.0+0x788c>  // b.any
   19360:	ldp	x0, x8, [x22, #8]
   19364:	mov	x1, x19
   19368:	mov	x2, x23
   1936c:	mov	x3, x21
   19370:	mov	x4, x20
   19374:	blr	x8
   19378:	ldr	x8, [x21]
   1937c:	ldr	x9, [x22, #56]
   19380:	sub	x8, x8, x27
   19384:	subs	x8, x9, x8
   19388:	b.cc	19548 <lzma_mode_is_supported@@XZ_5.0+0x7884>  // b.lo, b.ul, b.last
   1938c:	cmp	w0, #0x1
   19390:	str	x8, [x22, #56]
   19394:	b.ne	1955c <lzma_mode_is_supported@@XZ_5.0+0x7898>  // b.any
   19398:	cbnz	x8, 19548 <lzma_mode_is_supported@@XZ_5.0+0x7884>
   1939c:	str	wzr, [x22]
   193a0:	b	192ec <lzma_mode_is_supported@@XZ_5.0+0x7628>
   193a4:	add	x8, x27, #0x1
   193a8:	str	x8, [x21]
   193ac:	ldrb	w9, [x23, x27]
   193b0:	ldr	x8, [x22, #48]
   193b4:	add	x8, x8, x9, lsl #8
   193b8:	str	x8, [x22, #48]
   193bc:	mov	w8, #0x2                   	// #2
   193c0:	str	w8, [x22]
   193c4:	b	192ec <lzma_mode_is_supported@@XZ_5.0+0x7628>
   193c8:	add	x8, x27, #0x1
   193cc:	str	x8, [x21]
   193d0:	ldrb	w9, [x23, x27]
   193d4:	ldr	x8, [x22, #48]
   193d8:	ldr	x10, [x22, #32]
   193dc:	ldr	x0, [x22, #8]
   193e0:	add	x8, x9, x8
   193e4:	add	x1, x8, #0x1
   193e8:	mov	w8, #0x3                   	// #3
   193ec:	str	x1, [x22, #48]
   193f0:	str	w8, [x22]
   193f4:	blr	x10
   193f8:	b	192ec <lzma_mode_is_supported@@XZ_5.0+0x7628>
   193fc:	ldrb	w8, [x23, x27]
   19400:	add	x9, x27, #0x1
   19404:	str	x9, [x21]
   19408:	lsl	x8, x8, #8
   1940c:	str	x8, [x22, #56]
   19410:	mov	w8, #0x4                   	// #4
   19414:	str	w8, [x22]
   19418:	b	192ec <lzma_mode_is_supported@@XZ_5.0+0x7628>
   1941c:	add	x8, x27, #0x1
   19420:	str	x8, [x21]
   19424:	ldrb	w9, [x23, x27]
   19428:	ldr	x8, [x22, #56]
   1942c:	ldr	w10, [x22, #4]
   19430:	add	x8, x9, x8
   19434:	add	x8, x8, #0x1
   19438:	str	x8, [x22, #56]
   1943c:	str	w10, [x22]
   19440:	b	192ec <lzma_mode_is_supported@@XZ_5.0+0x7628>
   19444:	ldrb	w1, [x23, x27]
   19448:	add	x8, x27, #0x1
   1944c:	mov	x0, x25
   19450:	str	x8, [x21]
   19454:	bl	188a8 <lzma_mode_is_supported@@XZ_5.0+0x6be4>
   19458:	tbnz	w0, #0, 19548 <lzma_mode_is_supported@@XZ_5.0+0x7884>
   1945c:	ldr	x8, [x22, #24]
   19460:	ldr	x0, [x22, #8]
   19464:	mov	x1, x25
   19468:	blr	x8
   1946c:	str	w28, [x22]
   19470:	b	192ec <lzma_mode_is_supported@@XZ_5.0+0x7628>
   19474:	ldr	x28, [x22, #56]
   19478:	ldr	x3, [x19]
   1947c:	ldr	x5, [x19, #24]
   19480:	sub	x8, x20, x27
   19484:	add	x9, x28, x27
   19488:	cmp	x8, x28
   1948c:	csel	x2, x9, x20, hi  // hi = pmore
   19490:	mov	x0, x23
   19494:	mov	x1, x21
   19498:	mov	x4, x24
   1949c:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
   194a0:	sub	x8, x28, x0
   194a4:	str	x8, [x22, #56]
   194a8:	ldp	x9, x10, [x19, #8]
   194ac:	cmp	x9, x10
   194b0:	b.ls	194b8 <lzma_mode_is_supported@@XZ_5.0+0x77f4>  // b.plast
   194b4:	str	x9, [x19, #16]
   194b8:	mov	w28, #0x6                   	// #6
   194bc:	cbnz	x8, 19550 <lzma_mode_is_supported@@XZ_5.0+0x788c>
   194c0:	str	wzr, [x22]
   194c4:	b	192ec <lzma_mode_is_supported@@XZ_5.0+0x7628>
   194c8:	mov	w9, #0x101                 	// #257
   194cc:	strh	w9, [x22, #64]
   194d0:	mov	w9, #0x1                   	// #1
   194d4:	sxtb	w10, w8
   194d8:	tbz	w10, #31, 19348 <lzma_mode_is_supported@@XZ_5.0+0x7684>
   194dc:	lsl	w10, w8, #16
   194e0:	and	x10, x10, #0x1f0000
   194e4:	cmp	w8, #0xc0
   194e8:	str	x10, [x22, #48]
   194ec:	mov	w10, #0x1                   	// #1
   194f0:	str	w10, [x22]
   194f4:	b.cc	19508 <lzma_mode_is_supported@@XZ_5.0+0x7844>  // b.lo, b.ul, b.last
   194f8:	mov	w8, #0x5                   	// #5
   194fc:	strb	wzr, [x22, #64]
   19500:	str	w8, [x22, #4]
   19504:	b	19530 <lzma_mode_is_supported@@XZ_5.0+0x786c>
   19508:	ldrb	w10, [x22, #64]
   1950c:	cbnz	w10, 19548 <lzma_mode_is_supported@@XZ_5.0+0x7884>
   19510:	cmp	w8, #0xa0
   19514:	str	w28, [x22, #4]
   19518:	b.cc	19530 <lzma_mode_is_supported@@XZ_5.0+0x786c>  // b.lo, b.ul, b.last
   1951c:	ldr	x8, [x22, #24]
   19520:	ldr	x0, [x22, #8]
   19524:	mov	x1, x25
   19528:	blr	x8
   1952c:	ldrb	w9, [x22, #65]
   19530:	cbz	w9, 192ec <lzma_mode_is_supported@@XZ_5.0+0x7628>
   19534:	mov	w8, #0x1                   	// #1
   19538:	mov	w0, wzr
   1953c:	strb	wzr, [x22, #65]
   19540:	strb	w8, [x19, #40]
   19544:	b	1955c <lzma_mode_is_supported@@XZ_5.0+0x7898>
   19548:	mov	w0, #0x9                   	// #9
   1954c:	b	1955c <lzma_mode_is_supported@@XZ_5.0+0x7898>
   19550:	mov	w0, wzr
   19554:	b	1955c <lzma_mode_is_supported@@XZ_5.0+0x7898>
   19558:	mov	w0, #0xb                   	// #11
   1955c:	ldp	x20, x19, [sp, #96]
   19560:	ldp	x22, x21, [sp, #80]
   19564:	ldp	x24, x23, [sp, #64]
   19568:	ldp	x26, x25, [sp, #48]
   1956c:	ldp	x28, x27, [sp, #32]
   19570:	ldp	x29, x30, [sp, #16]
   19574:	ldr	d8, [sp], #112
   19578:	ret
   1957c:	mov	w0, #0x1                   	// #1
   19580:	b	1955c <lzma_mode_is_supported@@XZ_5.0+0x7898>
   19584:	stp	x29, x30, [sp, #-32]!
   19588:	stp	x20, x19, [sp, #16]
   1958c:	mov	x19, x0
   19590:	ldr	x0, [x0, #8]
   19594:	mov	x29, sp
   19598:	mov	x20, x1
   1959c:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
   195a0:	mov	x0, x19
   195a4:	mov	x1, x20
   195a8:	ldp	x20, x19, [sp, #16]
   195ac:	ldp	x29, x30, [sp], #32
   195b0:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
   195b4:	stp	x29, x30, [sp, #-48]!
   195b8:	stp	x20, x19, [sp, #32]
   195bc:	str	x21, [sp, #16]
   195c0:	mov	x21, x0
   195c4:	ldr	x0, [x0]
   195c8:	mov	x20, x2
   195cc:	mov	x19, x1
   195d0:	mov	x29, sp
   195d4:	cbz	x0, 195e4 <lzma_mode_is_supported@@XZ_5.0+0x7920>
   195d8:	ldr	x8, [x20, #16]
   195dc:	cbnz	x8, 19624 <lzma_mode_is_supported@@XZ_5.0+0x7960>
   195e0:	b	1963c <lzma_mode_is_supported@@XZ_5.0+0x7978>
   195e4:	mov	w0, #0x158                 	// #344
   195e8:	mov	x1, x19
   195ec:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
   195f0:	cbz	x0, 19650 <lzma_mode_is_supported@@XZ_5.0+0x798c>
   195f4:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x733c>
   195f8:	add	x8, x8, #0x6a8
   195fc:	mov	x9, #0xffffffffffffffff    	// #-1
   19600:	movi	v0.2d, #0x0
   19604:	str	x0, [x21]
   19608:	str	x8, [x21, #32]
   1960c:	stp	xzr, x9, [x0]
   19610:	stp	q0, q0, [x0, #16]
   19614:	str	q0, [x0, #48]
   19618:	str	xzr, [x0, #64]
   1961c:	ldr	x8, [x20, #16]
   19620:	cbz	x8, 1963c <lzma_mode_is_supported@@XZ_5.0+0x7978>
   19624:	ldr	w9, [x8]
   19628:	cbnz	w9, 1963c <lzma_mode_is_supported@@XZ_5.0+0x7978>
   1962c:	ldr	w8, [x8, #4]
   19630:	sub	w9, w8, #0x1
   19634:	cmp	w9, #0xff
   19638:	b.ls	19664 <lzma_mode_is_supported@@XZ_5.0+0x79a0>  // b.plast
   1963c:	mov	w0, #0x8                   	// #8
   19640:	ldp	x20, x19, [sp, #32]
   19644:	ldr	x21, [sp, #16]
   19648:	ldp	x29, x30, [sp], #48
   1964c:	ret
   19650:	mov	w0, #0x5                   	// #5
   19654:	ldp	x20, x19, [sp, #32]
   19658:	ldr	x21, [sp, #16]
   1965c:	ldp	x29, x30, [sp], #48
   19660:	ret
   19664:	movi	v0.2d, #0x0
   19668:	str	x8, [x0, #72]
   1966c:	stp	q0, q0, [x0, #80]
   19670:	stp	q0, q0, [x0, #112]
   19674:	stp	q0, q0, [x0, #144]
   19678:	stp	q0, q0, [x0, #176]
   1967c:	stp	q0, q0, [x0, #208]
   19680:	stp	q0, q0, [x0, #240]
   19684:	stp	q0, q0, [x0, #272]
   19688:	stp	q0, q0, [x0, #304]
   1968c:	strb	wzr, [x0, #336]
   19690:	add	x2, x20, #0x18
   19694:	mov	x1, x19
   19698:	ldp	x20, x19, [sp, #32]
   1969c:	ldr	x21, [sp, #16]
   196a0:	ldp	x29, x30, [sp], #48
   196a4:	b	3790 <lzma_version_string@@XZ_5.0+0x134>
   196a8:	stp	x29, x30, [sp, #-32]!
   196ac:	stp	x20, x19, [sp, #16]
   196b0:	mov	x29, sp
   196b4:	mov	x19, x1
   196b8:	mov	x20, x0
   196bc:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
   196c0:	mov	x0, x20
   196c4:	mov	x1, x19
   196c8:	ldp	x20, x19, [sp, #16]
   196cc:	ldp	x29, x30, [sp], #32
   196d0:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
   196d4:	cbz	x0, 196e0 <lzma_mode_is_supported@@XZ_5.0+0x7a1c>
   196d8:	ldr	w8, [x0]
   196dc:	cbz	w8, 196e8 <lzma_mode_is_supported@@XZ_5.0+0x7a24>
   196e0:	mov	x0, #0xffffffffffffffff    	// #-1
   196e4:	ret
   196e8:	ldr	w8, [x0, #4]
   196ec:	sub	w8, w8, #0x1
   196f0:	cmp	w8, #0xff
   196f4:	mov	w8, #0x158                 	// #344
   196f8:	csinv	x0, x8, xzr, ls  // ls = plast
   196fc:	ret
   19700:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x733c>
   19704:	adrp	x9, 19000 <lzma_mode_is_supported@@XZ_5.0+0x733c>
   19708:	add	x8, x8, #0x71c
   1970c:	add	x9, x9, #0xb18
   19710:	str	x8, [x0, #24]
   19714:	str	x9, [x0, #64]
   19718:	b	195b4 <lzma_mode_is_supported@@XZ_5.0+0x78f0>
   1971c:	sub	sp, sp, #0x40
   19720:	stp	x29, x30, [sp, #16]
   19724:	stp	x22, x21, [sp, #32]
   19728:	stp	x20, x19, [sp, #48]
   1972c:	add	x29, sp, #0x10
   19730:	ldr	x9, [x0, #24]
   19734:	ldr	w8, [x29, #48]
   19738:	mov	x21, x6
   1973c:	mov	x20, x5
   19740:	mov	x19, x0
   19744:	cbz	x9, 197cc <lzma_mode_is_supported@@XZ_5.0+0x7b08>
   19748:	ldr	x0, [x19]
   1974c:	ldr	x22, [x21]
   19750:	mov	x5, x20
   19754:	mov	x6, x21
   19758:	str	w8, [sp]
   1975c:	blr	x9
   19760:	ldr	x9, [x21]
   19764:	subs	x12, x9, x22
   19768:	b.eq	19b04 <lzma_mode_is_supported@@XZ_5.0+0x7e40>  // b.none
   1976c:	mov	x13, x19
   19770:	ldr	x8, [x19, #72]
   19774:	ldrb	w11, [x13, #80]!
   19778:	cmp	x12, #0x10
   1977c:	b.cs	19804 <lzma_mode_is_supported@@XZ_5.0+0x7b40>  // b.hs, b.nlast
   19780:	mov	x10, xzr
   19784:	mov	w14, w11
   19788:	add	x10, x10, x22
   1978c:	sub	x9, x10, x9
   19790:	add	x10, x20, x10
   19794:	add	w12, w8, w14
   19798:	add	x13, x19, #0x51
   1979c:	and	x12, x12, #0xff
   197a0:	ldrb	w15, [x10]
   197a4:	ldrb	w12, [x13, x12]
   197a8:	and	x11, x14, #0xff
   197ac:	sub	w14, w14, #0x1
   197b0:	strb	w14, [x19, #80]
   197b4:	strb	w15, [x13, x11]
   197b8:	sub	w11, w15, w12
   197bc:	adds	x9, x9, #0x1
   197c0:	strb	w11, [x10], #1
   197c4:	b.cc	19794 <lzma_mode_is_supported@@XZ_5.0+0x7ad0>  // b.lo, b.ul, b.last
   197c8:	b	19b04 <lzma_mode_is_supported@@XZ_5.0+0x7e40>
   197cc:	ldr	x9, [x3]
   197d0:	ldr	x10, [x21]
   197d4:	sub	x11, x4, x9
   197d8:	sub	x12, x7, x10
   197dc:	cmp	x11, x12
   197e0:	csel	x11, x11, x12, cc  // cc = lo, ul, last
   197e4:	cbz	x11, 19ae0 <lzma_mode_is_supported@@XZ_5.0+0x7e1c>
   197e8:	mov	x15, x19
   197ec:	ldr	x12, [x19, #72]
   197f0:	ldrb	w14, [x15, #80]!
   197f4:	cmp	x11, #0x10
   197f8:	b.cs	19954 <lzma_mode_is_supported@@XZ_5.0+0x7c90>  // b.hs, b.nlast
   197fc:	mov	x13, xzr
   19800:	b	19a94 <lzma_mode_is_supported@@XZ_5.0+0x7dd0>
   19804:	mvn	x10, x22
   19808:	add	x14, x9, x10
   1980c:	cmp	w11, w14, uxtb
   19810:	mov	x10, xzr
   19814:	b.cc	19784 <lzma_mode_is_supported@@XZ_5.0+0x7ac0>  // b.lo, b.ul, b.last
   19818:	cmp	x14, #0xff
   1981c:	b.hi	19784 <lzma_mode_is_supported@@XZ_5.0+0x7ac0>  // b.pmore
   19820:	add	w15, w11, w8
   19824:	and	w16, w15, #0xff
   19828:	cmp	w16, w14, uxtb
   1982c:	b.cc	19784 <lzma_mode_is_supported@@XZ_5.0+0x7ac0>  // b.lo, b.ul, b.last
   19830:	cmp	x14, #0xff
   19834:	b.hi	19784 <lzma_mode_is_supported@@XZ_5.0+0x7ac0>  // b.pmore
   19838:	add	x16, x11, x19
   1983c:	add	x16, x16, #0x51
   19840:	cmp	x14, x16
   19844:	b.hi	19784 <lzma_mode_is_supported@@XZ_5.0+0x7ac0>  // b.pmore
   19848:	add	x15, x19, w15, uxtb
   1984c:	add	x15, x15, #0x51
   19850:	cmp	x14, x15
   19854:	b.hi	19784 <lzma_mode_is_supported@@XZ_5.0+0x7ac0>  // b.pmore
   19858:	add	x14, x22, x11
   1985c:	add	x16, x11, x19
   19860:	add	w17, w11, w8
   19864:	sub	x14, x14, x9
   19868:	add	x18, x16, #0x52
   1986c:	and	x16, x17, #0xff
   19870:	add	x14, x14, x19
   19874:	add	x17, x22, x16
   19878:	add	x15, x19, #0x51
   1987c:	add	x16, x16, x19
   19880:	cmp	x13, x18
   19884:	add	x1, x14, #0x52
   19888:	sub	x14, x17, x9
   1988c:	add	x17, x16, #0x52
   19890:	cset	w2, cc  // cc = lo, ul, last
   19894:	add	x14, x14, x19
   19898:	cmp	x1, x15
   1989c:	add	x3, x14, #0x52
   198a0:	cset	w4, cc  // cc = lo, ul, last
   198a4:	cmp	x13, x17
   198a8:	cset	w14, cc  // cc = lo, ul, last
   198ac:	cmp	x3, x15
   198b0:	cset	w16, cc  // cc = lo, ul, last
   198b4:	cmp	x1, x17
   198b8:	cset	w15, cc  // cc = lo, ul, last
   198bc:	cmp	x3, x18
   198c0:	mov	x10, xzr
   198c4:	and	w1, w2, w4
   198c8:	cset	w17, cc  // cc = lo, ul, last
   198cc:	tbnz	w1, #0, 19784 <lzma_mode_is_supported@@XZ_5.0+0x7ac0>
   198d0:	and	w14, w14, w16
   198d4:	tbnz	w14, #0, 19784 <lzma_mode_is_supported@@XZ_5.0+0x7ac0>
   198d8:	and	w14, w15, w17
   198dc:	tbnz	w14, #0, 19784 <lzma_mode_is_supported@@XZ_5.0+0x7ac0>
   198e0:	adrp	x10, 21000 <lzma_mode_is_supported@@XZ_5.0+0xf33c>
   198e4:	ldr	q0, [x10, #2000]
   198e8:	and	x10, x12, #0xfffffffffffffff0
   198ec:	mov	x15, xzr
   198f0:	add	x16, x20, x22
   198f4:	sub	w14, w11, w10
   198f8:	sub	w18, w11, #0xf
   198fc:	mov	w17, w18
   19900:	sub	w18, w11, w15
   19904:	add	x1, x19, #0x51
   19908:	add	w2, w8, w18
   1990c:	add	x2, x1, w2, uxtb
   19910:	ldur	q2, [x2, #-15]
   19914:	ldr	q1, [x16, x15]
   19918:	add	x18, x1, w18, uxtb
   1991c:	tbl	v2.16b, {v2.16b}, v0.16b
   19920:	tbl	v3.16b, {v1.16b}, v0.16b
   19924:	sub	v1.16b, v1.16b, v2.16b
   19928:	stur	q3, [x18, #-15]
   1992c:	str	q1, [x16, x15]
   19930:	add	x15, x15, #0x10
   19934:	cmp	x10, x15
   19938:	sub	w18, w17, #0x10
   1993c:	b.ne	198fc <lzma_mode_is_supported@@XZ_5.0+0x7c38>  // b.any
   19940:	sub	w11, w17, #0x1
   19944:	cmp	x12, x10
   19948:	strb	w11, [x13]
   1994c:	b.ne	19788 <lzma_mode_is_supported@@XZ_5.0+0x7ac4>  // b.any
   19950:	b	19b04 <lzma_mode_is_supported@@XZ_5.0+0x7e40>
   19954:	sub	x16, x11, #0x1
   19958:	cmp	w14, w16, uxtb
   1995c:	mov	x13, xzr
   19960:	b.cc	19a94 <lzma_mode_is_supported@@XZ_5.0+0x7dd0>  // b.lo, b.ul, b.last
   19964:	cmp	x16, #0xff
   19968:	b.hi	19a94 <lzma_mode_is_supported@@XZ_5.0+0x7dd0>  // b.pmore
   1996c:	add	w17, w14, w12
   19970:	and	w18, w17, #0xff
   19974:	cmp	w18, w16, uxtb
   19978:	b.cc	19a94 <lzma_mode_is_supported@@XZ_5.0+0x7dd0>  // b.lo, b.ul, b.last
   1997c:	cmp	x16, #0xff
   19980:	b.hi	19a94 <lzma_mode_is_supported@@XZ_5.0+0x7dd0>  // b.pmore
   19984:	add	x18, x14, x19
   19988:	add	x18, x18, #0x51
   1998c:	cmp	x16, x18
   19990:	b.hi	19a94 <lzma_mode_is_supported@@XZ_5.0+0x7dd0>  // b.pmore
   19994:	add	x17, x19, w17, uxtb
   19998:	add	x17, x17, #0x51
   1999c:	cmp	x16, x17
   199a0:	b.hi	19a94 <lzma_mode_is_supported@@XZ_5.0+0x7dd0>  // b.pmore
   199a4:	add	x16, x14, #0x52
   199a8:	add	w18, w14, w12
   199ac:	sub	x0, x16, x11
   199b0:	add	x1, x19, x16
   199b4:	and	x16, x18, #0xff
   199b8:	add	x17, x19, #0x51
   199bc:	add	x0, x19, x0
   199c0:	add	x16, x16, #0x52
   199c4:	cmp	x15, x1
   199c8:	sub	x18, x16, x11
   199cc:	add	x5, x19, x16
   199d0:	cset	w6, cc  // cc = lo, ul, last
   199d4:	cmp	x0, x17
   199d8:	add	x7, x19, x18
   199dc:	cset	w22, cc  // cc = lo, ul, last
   199e0:	cmp	x15, x5
   199e4:	cset	w16, cc  // cc = lo, ul, last
   199e8:	cmp	x7, x17
   199ec:	cset	w18, cc  // cc = lo, ul, last
   199f0:	cmp	x0, x5
   199f4:	cset	w17, cc  // cc = lo, ul, last
   199f8:	cmp	x7, x1
   199fc:	mov	x13, xzr
   19a00:	and	w5, w6, w22
   19a04:	cset	w0, cc  // cc = lo, ul, last
   19a08:	tbnz	w5, #0, 19a94 <lzma_mode_is_supported@@XZ_5.0+0x7dd0>
   19a0c:	and	w16, w16, w18
   19a10:	tbnz	w16, #0, 19a94 <lzma_mode_is_supported@@XZ_5.0+0x7dd0>
   19a14:	and	w16, w17, w0
   19a18:	tbnz	w16, #0, 19a94 <lzma_mode_is_supported@@XZ_5.0+0x7dd0>
   19a1c:	adrp	x13, 21000 <lzma_mode_is_supported@@XZ_5.0+0xf33c>
   19a20:	ldr	q0, [x13, #2000]
   19a24:	and	x13, x11, #0xfffffffffffffff0
   19a28:	mov	x17, xzr
   19a2c:	add	x18, x2, x9
   19a30:	add	x0, x20, x10
   19a34:	sub	w16, w14, w13
   19a38:	sub	w5, w14, #0xf
   19a3c:	mov	w1, w5
   19a40:	sub	w5, w14, w17
   19a44:	add	x6, x19, #0x51
   19a48:	add	w7, w12, w5
   19a4c:	add	x7, x6, w7, uxtb
   19a50:	ldur	q2, [x7, #-15]
   19a54:	ldr	q1, [x18, x17]
   19a58:	add	x5, x6, w5, uxtb
   19a5c:	tbl	v2.16b, {v2.16b}, v0.16b
   19a60:	tbl	v3.16b, {v1.16b}, v0.16b
   19a64:	sub	v1.16b, v1.16b, v2.16b
   19a68:	stur	q3, [x5, #-15]
   19a6c:	str	q1, [x0, x17]
   19a70:	add	x17, x17, #0x10
   19a74:	cmp	x13, x17
   19a78:	sub	w5, w1, #0x10
   19a7c:	b.ne	19a3c <lzma_mode_is_supported@@XZ_5.0+0x7d78>  // b.any
   19a80:	sub	w14, w1, #0x1
   19a84:	cmp	x11, x13
   19a88:	strb	w14, [x15]
   19a8c:	b.eq	19ae0 <lzma_mode_is_supported@@XZ_5.0+0x7e1c>  // b.none
   19a90:	b	19a98 <lzma_mode_is_supported@@XZ_5.0+0x7dd4>
   19a94:	mov	w16, w14
   19a98:	add	x15, x13, x10
   19a9c:	add	x17, x13, x9
   19aa0:	sub	x14, x11, x13
   19aa4:	add	x13, x20, x15
   19aa8:	add	x15, x2, x17
   19aac:	add	w17, w12, w16
   19ab0:	add	x18, x19, #0x51
   19ab4:	and	x17, x17, #0xff
   19ab8:	ldrb	w17, [x18, x17]
   19abc:	ldrb	w0, [x15], #1
   19ac0:	and	x1, x16, #0xff
   19ac4:	sub	w16, w16, #0x1
   19ac8:	strb	w16, [x19, #80]
   19acc:	sub	w17, w0, w17
   19ad0:	strb	w0, [x18, x1]
   19ad4:	subs	x14, x14, #0x1
   19ad8:	strb	w17, [x13], #1
   19adc:	b.ne	19aac <lzma_mode_is_supported@@XZ_5.0+0x7de8>  // b.any
   19ae0:	add	x9, x11, x9
   19ae4:	add	x10, x11, x10
   19ae8:	str	x9, [x3]
   19aec:	str	x10, [x21]
   19af0:	cbz	w8, 19b00 <lzma_mode_is_supported@@XZ_5.0+0x7e3c>
   19af4:	cmp	x9, x4
   19af8:	cset	w0, eq  // eq = none
   19afc:	b	19b04 <lzma_mode_is_supported@@XZ_5.0+0x7e40>
   19b00:	mov	w0, wzr
   19b04:	ldp	x20, x19, [sp, #48]
   19b08:	ldp	x22, x21, [sp, #32]
   19b0c:	ldp	x29, x30, [sp, #16]
   19b10:	add	sp, sp, #0x40
   19b14:	ret
   19b18:	add	x2, x3, #0x10
   19b1c:	b	38d8 <lzma_version_string@@XZ_5.0+0x27c>
   19b20:	stp	x29, x30, [sp, #-32]!
   19b24:	stp	x20, x19, [sp, #16]
   19b28:	mov	x29, sp
   19b2c:	mov	x19, x1
   19b30:	mov	x20, x0
   19b34:	bl	196d4 <lzma_mode_is_supported@@XZ_5.0+0x7a10>
   19b38:	cmn	x0, #0x1
   19b3c:	b.eq	19b5c <lzma_mode_is_supported@@XZ_5.0+0x7e98>  // b.none
   19b40:	ldrb	w8, [x20, #4]
   19b44:	mov	w0, wzr
   19b48:	sub	w8, w8, #0x1
   19b4c:	strb	w8, [x19]
   19b50:	ldp	x20, x19, [sp, #16]
   19b54:	ldp	x29, x30, [sp], #32
   19b58:	ret
   19b5c:	mov	w0, #0xb                   	// #11
   19b60:	ldp	x20, x19, [sp, #16]
   19b64:	ldp	x29, x30, [sp], #32
   19b68:	ret
   19b6c:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x733c>
   19b70:	add	x8, x8, #0xb7c
   19b74:	str	x8, [x0, #24]
   19b78:	b	195b4 <lzma_mode_is_supported@@XZ_5.0+0x78f0>
   19b7c:	sub	sp, sp, #0x40
   19b80:	stp	x29, x30, [sp, #16]
   19b84:	stp	x22, x21, [sp, #32]
   19b88:	stp	x20, x19, [sp, #48]
   19b8c:	add	x29, sp, #0x10
   19b90:	mov	x19, x0
   19b94:	ldr	w8, [x29, #48]
   19b98:	ldr	x9, [x0, #24]
   19b9c:	ldr	x0, [x0]
   19ba0:	ldr	x22, [x6]
   19ba4:	mov	x21, x6
   19ba8:	mov	x20, x5
   19bac:	str	w8, [sp]
   19bb0:	blr	x9
   19bb4:	ldr	x9, [x21]
   19bb8:	subs	x12, x9, x22
   19bbc:	b.eq	19d70 <lzma_mode_is_supported@@XZ_5.0+0x80ac>  // b.none
   19bc0:	mov	x13, x19
   19bc4:	ldr	x8, [x19, #72]
   19bc8:	ldrb	w11, [x13, #80]!
   19bcc:	cmp	x12, #0x10
   19bd0:	b.cs	19bdc <lzma_mode_is_supported@@XZ_5.0+0x7f18>  // b.hs, b.nlast
   19bd4:	mov	x10, xzr
   19bd8:	b	19d2c <lzma_mode_is_supported@@XZ_5.0+0x8068>
   19bdc:	mvn	x10, x22
   19be0:	add	x14, x9, x10
   19be4:	cmp	w11, w14, uxtb
   19be8:	mov	x10, xzr
   19bec:	b.cc	19d2c <lzma_mode_is_supported@@XZ_5.0+0x8068>  // b.lo, b.ul, b.last
   19bf0:	cmp	x14, #0xff
   19bf4:	b.hi	19d2c <lzma_mode_is_supported@@XZ_5.0+0x8068>  // b.pmore
   19bf8:	add	w15, w11, w8
   19bfc:	and	w16, w15, #0xff
   19c00:	cmp	w16, w14, uxtb
   19c04:	b.cc	19d2c <lzma_mode_is_supported@@XZ_5.0+0x8068>  // b.lo, b.ul, b.last
   19c08:	cmp	x14, #0xff
   19c0c:	b.hi	19d2c <lzma_mode_is_supported@@XZ_5.0+0x8068>  // b.pmore
   19c10:	add	x16, x11, x19
   19c14:	add	x16, x16, #0x51
   19c18:	cmp	x14, x16
   19c1c:	b.hi	19d2c <lzma_mode_is_supported@@XZ_5.0+0x8068>  // b.pmore
   19c20:	add	x15, x19, w15, uxtb
   19c24:	add	x15, x15, #0x51
   19c28:	cmp	x14, x15
   19c2c:	b.hi	19d2c <lzma_mode_is_supported@@XZ_5.0+0x8068>  // b.pmore
   19c30:	add	x14, x22, x11
   19c34:	add	x16, x11, x19
   19c38:	add	w17, w11, w8
   19c3c:	sub	x14, x14, x9
   19c40:	add	x18, x16, #0x52
   19c44:	and	x16, x17, #0xff
   19c48:	add	x14, x14, x19
   19c4c:	add	x17, x22, x16
   19c50:	add	x15, x19, #0x51
   19c54:	add	x16, x16, x19
   19c58:	cmp	x13, x18
   19c5c:	add	x1, x14, #0x52
   19c60:	sub	x14, x17, x9
   19c64:	add	x17, x16, #0x52
   19c68:	cset	w2, cc  // cc = lo, ul, last
   19c6c:	add	x14, x14, x19
   19c70:	cmp	x1, x15
   19c74:	add	x3, x14, #0x52
   19c78:	cset	w4, cc  // cc = lo, ul, last
   19c7c:	cmp	x13, x17
   19c80:	cset	w14, cc  // cc = lo, ul, last
   19c84:	cmp	x3, x15
   19c88:	cset	w16, cc  // cc = lo, ul, last
   19c8c:	cmp	x1, x17
   19c90:	cset	w15, cc  // cc = lo, ul, last
   19c94:	cmp	x3, x18
   19c98:	mov	x10, xzr
   19c9c:	and	w1, w2, w4
   19ca0:	cset	w17, cc  // cc = lo, ul, last
   19ca4:	tbnz	w1, #0, 19d2c <lzma_mode_is_supported@@XZ_5.0+0x8068>
   19ca8:	and	w14, w14, w16
   19cac:	tbnz	w14, #0, 19d2c <lzma_mode_is_supported@@XZ_5.0+0x8068>
   19cb0:	and	w14, w15, w17
   19cb4:	tbnz	w14, #0, 19d2c <lzma_mode_is_supported@@XZ_5.0+0x8068>
   19cb8:	adrp	x10, 21000 <lzma_mode_is_supported@@XZ_5.0+0xf33c>
   19cbc:	ldr	q0, [x10, #2000]
   19cc0:	and	x10, x12, #0xfffffffffffffff0
   19cc4:	mov	x15, xzr
   19cc8:	add	x16, x20, x22
   19ccc:	sub	w14, w11, w10
   19cd0:	sub	w17, w11, #0xf
   19cd4:	sub	w1, w11, w15
   19cd8:	add	x2, x19, #0x51
   19cdc:	add	w18, w8, w1
   19ce0:	add	x18, x2, w18, uxtb
   19ce4:	ldur	q1, [x18, #-15]
   19ce8:	ldr	q2, [x16, x15]
   19cec:	mov	w18, w17
   19cf0:	add	x17, x2, w1, uxtb
   19cf4:	tbl	v1.16b, {v1.16b}, v0.16b
   19cf8:	add	v1.16b, v2.16b, v1.16b
   19cfc:	str	q1, [x16, x15]
   19d00:	tbl	v1.16b, {v1.16b}, v0.16b
   19d04:	add	x15, x15, #0x10
   19d08:	stur	q1, [x17, #-15]
   19d0c:	cmp	x10, x15
   19d10:	sub	w17, w18, #0x10
   19d14:	b.ne	19cd4 <lzma_mode_is_supported@@XZ_5.0+0x8010>  // b.any
   19d18:	sub	w11, w18, #0x1
   19d1c:	cmp	x12, x10
   19d20:	strb	w11, [x13]
   19d24:	b.eq	19d70 <lzma_mode_is_supported@@XZ_5.0+0x80ac>  // b.none
   19d28:	b	19d30 <lzma_mode_is_supported@@XZ_5.0+0x806c>
   19d2c:	mov	w14, w11
   19d30:	add	x10, x10, x22
   19d34:	sub	x9, x10, x9
   19d38:	add	x10, x20, x10
   19d3c:	add	w11, w8, w14
   19d40:	add	x12, x19, #0x51
   19d44:	and	x11, x11, #0xff
   19d48:	ldrb	w13, [x10]
   19d4c:	ldrb	w11, [x12, x11]
   19d50:	and	x15, x14, #0xff
   19d54:	sub	w14, w14, #0x1
   19d58:	adds	x9, x9, #0x1
   19d5c:	add	w11, w13, w11
   19d60:	strb	w11, [x10], #1
   19d64:	strb	w14, [x19, #80]
   19d68:	strb	w11, [x12, x15]
   19d6c:	b.cc	19d3c <lzma_mode_is_supported@@XZ_5.0+0x8078>  // b.lo, b.ul, b.last
   19d70:	ldp	x20, x19, [sp, #48]
   19d74:	ldp	x22, x21, [sp, #32]
   19d78:	ldp	x29, x30, [sp, #16]
   19d7c:	add	sp, sp, #0x40
   19d80:	ret
   19d84:	stp	x29, x30, [sp, #-32]!
   19d88:	cmp	x3, #0x1
   19d8c:	stp	x20, x19, [sp, #16]
   19d90:	mov	x29, sp
   19d94:	b.ne	19dd0 <lzma_mode_is_supported@@XZ_5.0+0x810c>  // b.any
   19d98:	mov	x20, x0
   19d9c:	mov	w0, #0x28                  	// #40
   19da0:	mov	x19, x2
   19da4:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
   19da8:	cbz	x0, 19de0 <lzma_mode_is_supported@@XZ_5.0+0x811c>
   19dac:	ldrb	w9, [x19]
   19db0:	mov	x8, x0
   19db4:	mov	w0, wzr
   19db8:	add	w9, w9, #0x1
   19dbc:	stp	wzr, w9, [x8]
   19dc0:	str	x8, [x20]
   19dc4:	ldp	x20, x19, [sp, #16]
   19dc8:	ldp	x29, x30, [sp], #32
   19dcc:	ret
   19dd0:	mov	w0, #0x8                   	// #8
   19dd4:	ldp	x20, x19, [sp, #16]
   19dd8:	ldp	x29, x30, [sp], #32
   19ddc:	ret
   19de0:	mov	w0, #0x5                   	// #5
   19de4:	ldp	x20, x19, [sp, #16]
   19de8:	ldp	x29, x30, [sp], #32
   19dec:	ret
   19df0:	stp	x29, x30, [sp, #-96]!
   19df4:	stp	x26, x25, [sp, #32]
   19df8:	stp	x24, x23, [sp, #48]
   19dfc:	stp	x22, x21, [sp, #64]
   19e00:	stp	x20, x19, [sp, #80]
   19e04:	ldr	x22, [x0]
   19e08:	mov	w21, w7
   19e0c:	mov	w23, w6
   19e10:	mov	x20, x2
   19e14:	mov	x19, x1
   19e18:	str	x27, [sp, #16]
   19e1c:	mov	x29, sp
   19e20:	cbz	x22, 19e48 <lzma_mode_is_supported@@XZ_5.0+0x8184>
   19e24:	ldr	x8, [x20, #16]
   19e28:	cbz	x8, 19ee8 <lzma_mode_is_supported@@XZ_5.0+0x8224>
   19e2c:	ldr	w8, [x8]
   19e30:	sub	w9, w23, #0x1
   19e34:	tst	w8, w9
   19e38:	str	w8, [x22, #96]
   19e3c:	b.eq	19eec <lzma_mode_is_supported@@XZ_5.0+0x8228>  // b.none
   19e40:	mov	w0, #0x8                   	// #8
   19e44:	b	19ecc <lzma_mode_is_supported@@XZ_5.0+0x8208>
   19e48:	lsl	x27, x5, #1
   19e4c:	mov	x26, x0
   19e50:	add	x0, x27, #0x88
   19e54:	mov	x1, x19
   19e58:	mov	x24, x4
   19e5c:	mov	x25, x3
   19e60:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
   19e64:	cbz	x0, 19ec8 <lzma_mode_is_supported@@XZ_5.0+0x8204>
   19e68:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x733c>
   19e6c:	adrp	x9, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x833c>
   19e70:	add	x8, x8, #0xf30
   19e74:	add	x9, x9, #0x280
   19e78:	stp	x8, x9, [x26, #24]
   19e7c:	adrp	x8, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x833c>
   19e80:	add	x8, x8, #0x2b8
   19e84:	mov	x22, x0
   19e88:	str	x8, [x26, #64]
   19e8c:	mov	x8, #0xffffffffffffffff    	// #-1
   19e90:	movi	v0.2d, #0x0
   19e94:	str	x0, [x26]
   19e98:	stp	xzr, x8, [x0]
   19e9c:	stp	q0, q0, [x0, #16]
   19ea0:	str	q0, [x0, #48]
   19ea4:	str	xzr, [x0, #64]
   19ea8:	str	x25, [x0, #80]
   19eac:	str	x27, [x0, #104]
   19eb0:	cbz	x24, 19f28 <lzma_mode_is_supported@@XZ_5.0+0x8264>
   19eb4:	mov	x0, x24
   19eb8:	mov	x1, x19
   19ebc:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
   19ec0:	str	x0, [x22, #88]
   19ec4:	cbnz	x0, 19e24 <lzma_mode_is_supported@@XZ_5.0+0x8160>
   19ec8:	mov	w0, #0x5                   	// #5
   19ecc:	ldp	x20, x19, [sp, #80]
   19ed0:	ldp	x22, x21, [sp, #64]
   19ed4:	ldp	x24, x23, [sp, #48]
   19ed8:	ldp	x26, x25, [sp, #32]
   19edc:	ldr	x27, [sp, #16]
   19ee0:	ldp	x29, x30, [sp], #96
   19ee4:	ret
   19ee8:	str	wzr, [x22, #96]
   19eec:	and	w8, w21, #0x1
   19ef0:	strb	wzr, [x22, #72]
   19ef4:	stp	xzr, xzr, [x22, #120]
   19ef8:	strb	w8, [x22, #73]
   19efc:	str	xzr, [x22, #112]
   19f00:	add	x2, x20, #0x18
   19f04:	mov	x0, x22
   19f08:	mov	x1, x19
   19f0c:	ldp	x20, x19, [sp, #80]
   19f10:	ldp	x22, x21, [sp, #64]
   19f14:	ldp	x24, x23, [sp, #48]
   19f18:	ldp	x26, x25, [sp, #32]
   19f1c:	ldr	x27, [sp, #16]
   19f20:	ldp	x29, x30, [sp], #96
   19f24:	b	3790 <lzma_version_string@@XZ_5.0+0x134>
   19f28:	str	xzr, [x22, #88]
   19f2c:	b	19e24 <lzma_mode_is_supported@@XZ_5.0+0x8160>
   19f30:	sub	sp, sp, #0xa0
   19f34:	stp	x29, x30, [sp, #64]
   19f38:	add	x29, sp, #0x40
   19f3c:	stp	x26, x25, [sp, #96]
   19f40:	ldr	w25, [x29, #96]
   19f44:	stp	x28, x27, [sp, #80]
   19f48:	stp	x24, x23, [sp, #112]
   19f4c:	stp	x22, x21, [sp, #128]
   19f50:	cmp	w25, #0x1
   19f54:	stp	x20, x19, [sp, #144]
   19f58:	b.ne	19f64 <lzma_mode_is_supported@@XZ_5.0+0x82a0>  // b.any
   19f5c:	mov	w0, #0x8                   	// #8
   19f60:	b	1a220 <lzma_mode_is_supported@@XZ_5.0+0x855c>
   19f64:	mov	x19, x0
   19f68:	ldr	x8, [x19, #112]!
   19f6c:	mov	x27, x2
   19f70:	mov	x20, x7
   19f74:	mov	x22, x6
   19f78:	ldr	x2, [x19, #8]
   19f7c:	mov	x23, x5
   19f80:	mov	x26, x4
   19f84:	mov	x24, x3
   19f88:	mov	x28, x1
   19f8c:	mov	x21, x0
   19f90:	cmp	x8, x2
   19f94:	b.cs	19fc4 <lzma_mode_is_supported@@XZ_5.0+0x8300>  // b.hs, b.nlast
   19f98:	add	x0, x21, #0x88
   19f9c:	mov	x1, x19
   19fa0:	mov	x3, x23
   19fa4:	mov	x4, x22
   19fa8:	mov	x5, x20
   19fac:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
   19fb0:	ldp	x8, x9, [x21, #112]
   19fb4:	cmp	x8, x9
   19fb8:	b.cc	1a21c <lzma_mode_is_supported@@XZ_5.0+0x8558>  // b.lo, b.ul, b.last
   19fbc:	ldrb	w9, [x21, #72]
   19fc0:	cbnz	w9, 1a214 <lzma_mode_is_supported@@XZ_5.0+0x8550>
   19fc4:	stp	x28, x24, [x29, #-24]
   19fc8:	stur	x23, [x29, #-8]
   19fcc:	mov	x24, x21
   19fd0:	ldr	x9, [x24, #128]!
   19fd4:	stur	xzr, [x24, #-8]
   19fd8:	ldr	x23, [x22]
   19fdc:	sub	x28, x9, x8
   19fe0:	sub	x10, x20, x23
   19fe4:	cmp	x10, x28
   19fe8:	b.hi	1a064 <lzma_mode_is_supported@@XZ_5.0+0x83a0>  // b.pmore
   19fec:	cbz	x28, 1a064 <lzma_mode_is_supported@@XZ_5.0+0x83a0>
   19ff0:	cbz	x8, 1a0c8 <lzma_mode_is_supported@@XZ_5.0+0x8404>
   19ff4:	add	x0, x21, #0x88
   19ff8:	add	x1, x0, x8
   19ffc:	mov	x2, x28
   1a000:	bl	3050 <memmove@plt>
   1a004:	str	x28, [x21, #128]
   1a008:	str	xzr, [x21, #112]
   1a00c:	ldp	x3, x28, [x29, #-16]
   1a010:	ldr	x8, [x21, #24]
   1a014:	ldr	x7, [x21, #104]
   1a018:	add	x23, x21, #0x88
   1a01c:	cbnz	x8, 1a0e0 <lzma_mode_is_supported@@XZ_5.0+0x841c>
   1a020:	mov	x0, x27
   1a024:	mov	x27, x3
   1a028:	mov	x1, x3
   1a02c:	mov	x2, x26
   1a030:	mov	x3, x23
   1a034:	mov	x4, x24
   1a038:	mov	x5, x7
   1a03c:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
   1a040:	cmp	w25, #0x3
   1a044:	mov	x25, x23
   1a048:	b.ne	1a118 <lzma_mode_is_supported@@XZ_5.0+0x8454>  // b.any
   1a04c:	ldrb	w8, [x21, #73]
   1a050:	cbz	w8, 1a118 <lzma_mode_is_supported@@XZ_5.0+0x8454>
   1a054:	ldr	x8, [x27]
   1a058:	cmp	x8, x26
   1a05c:	b.ne	1a118 <lzma_mode_is_supported@@XZ_5.0+0x8454>  // b.any
   1a060:	b	1a110 <lzma_mode_is_supported@@XZ_5.0+0x844c>
   1a064:	str	x26, [sp, #32]
   1a068:	ldur	x26, [x29, #-8]
   1a06c:	add	x9, x21, #0x88
   1a070:	add	x1, x9, x8
   1a074:	mov	x2, x28
   1a078:	add	x0, x26, x23
   1a07c:	stp	x9, x0, [sp, #16]
   1a080:	bl	3040 <memcpy@plt>
   1a084:	add	x8, x28, x23
   1a088:	str	x8, [x22]
   1a08c:	ldr	x8, [x21, #24]
   1a090:	cbz	x8, 1a170 <lzma_mode_is_supported@@XZ_5.0+0x84ac>
   1a094:	ldr	x0, [x21]
   1a098:	ldp	x1, x3, [x29, #-24]
   1a09c:	ldr	x4, [sp, #32]
   1a0a0:	mov	x2, x27
   1a0a4:	mov	x5, x26
   1a0a8:	mov	x6, x22
   1a0ac:	mov	x7, x20
   1a0b0:	str	w25, [sp]
   1a0b4:	blr	x8
   1a0b8:	cbz	w0, 1a1b8 <lzma_mode_is_supported@@XZ_5.0+0x84f4>
   1a0bc:	cmp	w0, #0x1
   1a0c0:	b.eq	1a1b0 <lzma_mode_is_supported@@XZ_5.0+0x84ec>  // b.none
   1a0c4:	b	1a220 <lzma_mode_is_supported@@XZ_5.0+0x855c>
   1a0c8:	ldp	x3, x28, [x29, #-16]
   1a0cc:	cbz	x9, 1a1fc <lzma_mode_is_supported@@XZ_5.0+0x8538>
   1a0d0:	ldr	x8, [x21, #24]
   1a0d4:	ldr	x7, [x21, #104]
   1a0d8:	add	x23, x21, #0x88
   1a0dc:	cbz	x8, 1a020 <lzma_mode_is_supported@@XZ_5.0+0x835c>
   1a0e0:	ldr	x0, [x21]
   1a0e4:	ldur	x1, [x29, #-24]
   1a0e8:	mov	x2, x27
   1a0ec:	mov	x4, x26
   1a0f0:	mov	x5, x23
   1a0f4:	mov	x6, x24
   1a0f8:	str	w25, [sp]
   1a0fc:	blr	x8
   1a100:	mov	x25, x23
   1a104:	cbz	w0, 1a118 <lzma_mode_is_supported@@XZ_5.0+0x8454>
   1a108:	cmp	w0, #0x1
   1a10c:	b.ne	1a220 <lzma_mode_is_supported@@XZ_5.0+0x855c>  // b.any
   1a110:	mov	w8, #0x1                   	// #1
   1a114:	strb	w8, [x21, #72]
   1a118:	ldr	x4, [x21, #128]
   1a11c:	ldp	x8, x0, [x21, #80]
   1a120:	ldr	w1, [x21, #96]
   1a124:	ldrb	w2, [x21, #73]
   1a128:	mov	x3, x25
   1a12c:	blr	x8
   1a130:	ldr	w8, [x21, #96]
   1a134:	ldrb	w9, [x21, #72]
   1a138:	mov	x2, x0
   1a13c:	str	x0, [x21, #120]
   1a140:	add	w8, w8, w2
   1a144:	str	w8, [x21, #96]
   1a148:	cbz	w9, 1a154 <lzma_mode_is_supported@@XZ_5.0+0x8490>
   1a14c:	ldr	x2, [x21, #128]
   1a150:	str	x2, [x21, #120]
   1a154:	mov	x0, x25
   1a158:	mov	x1, x19
   1a15c:	mov	x3, x28
   1a160:	mov	x4, x22
   1a164:	mov	x5, x20
   1a168:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
   1a16c:	b	1a1fc <lzma_mode_is_supported@@XZ_5.0+0x8538>
   1a170:	ldur	x28, [x29, #-16]
   1a174:	ldr	x2, [sp, #32]
   1a178:	mov	x0, x27
   1a17c:	mov	x3, x26
   1a180:	mov	x1, x28
   1a184:	mov	x4, x22
   1a188:	mov	x5, x20
   1a18c:	bl	3720 <lzma_version_string@@XZ_5.0+0xc4>
   1a190:	cmp	w25, #0x3
   1a194:	b.ne	1a1b8 <lzma_mode_is_supported@@XZ_5.0+0x84f4>  // b.any
   1a198:	ldrb	w8, [x21, #73]
   1a19c:	cbz	w8, 1a1b8 <lzma_mode_is_supported@@XZ_5.0+0x84f4>
   1a1a0:	ldr	x8, [x28]
   1a1a4:	ldr	x9, [sp, #32]
   1a1a8:	cmp	x8, x9
   1a1ac:	b.ne	1a1b8 <lzma_mode_is_supported@@XZ_5.0+0x84f4>  // b.any
   1a1b0:	mov	w8, #0x1                   	// #1
   1a1b4:	strb	w8, [x21, #72]
   1a1b8:	ldr	x8, [x22]
   1a1bc:	ldp	x9, x0, [x21, #80]
   1a1c0:	ldr	w1, [x21, #96]
   1a1c4:	ldrb	w2, [x21, #73]
   1a1c8:	ldr	x3, [sp, #24]
   1a1cc:	sub	x28, x8, x23
   1a1d0:	mov	x4, x28
   1a1d4:	blr	x9
   1a1d8:	ldr	w8, [x21, #96]
   1a1dc:	ldrb	w9, [x21, #72]
   1a1e0:	sub	x2, x28, x0
   1a1e4:	str	xzr, [x21, #112]
   1a1e8:	add	w8, w8, w0
   1a1ec:	str	w8, [x21, #96]
   1a1f0:	str	x2, [x21, #128]
   1a1f4:	cbz	w9, 1a240 <lzma_mode_is_supported@@XZ_5.0+0x857c>
   1a1f8:	str	xzr, [x24]
   1a1fc:	ldrb	w8, [x21, #72]
   1a200:	cbz	w8, 1a21c <lzma_mode_is_supported@@XZ_5.0+0x8558>
   1a204:	ldr	x8, [x19]
   1a208:	ldr	x9, [x24]
   1a20c:	cmp	x8, x9
   1a210:	b.ne	1a21c <lzma_mode_is_supported@@XZ_5.0+0x8558>  // b.any
   1a214:	mov	w0, #0x1                   	// #1
   1a218:	b	1a220 <lzma_mode_is_supported@@XZ_5.0+0x855c>
   1a21c:	mov	w0, wzr
   1a220:	ldp	x20, x19, [sp, #144]
   1a224:	ldp	x22, x21, [sp, #128]
   1a228:	ldp	x24, x23, [sp, #112]
   1a22c:	ldp	x26, x25, [sp, #96]
   1a230:	ldp	x28, x27, [sp, #80]
   1a234:	ldp	x29, x30, [sp, #64]
   1a238:	add	sp, sp, #0xa0
   1a23c:	ret
   1a240:	ldp	x9, x28, [x29, #-16]
   1a244:	ldr	x26, [sp, #32]
   1a248:	cbz	x2, 1a1fc <lzma_mode_is_supported@@XZ_5.0+0x8538>
   1a24c:	ldr	x8, [x22]
   1a250:	ldr	x0, [sp, #16]
   1a254:	mov	x23, x9
   1a258:	sub	x8, x8, x2
   1a25c:	add	x1, x28, x8
   1a260:	str	x8, [x22]
   1a264:	bl	3040 <memcpy@plt>
   1a268:	mov	x3, x23
   1a26c:	ldr	x8, [x21, #24]
   1a270:	ldr	x7, [x21, #104]
   1a274:	add	x23, x21, #0x88
   1a278:	cbnz	x8, 1a0e0 <lzma_mode_is_supported@@XZ_5.0+0x841c>
   1a27c:	b	1a020 <lzma_mode_is_supported@@XZ_5.0+0x835c>
   1a280:	stp	x29, x30, [sp, #-32]!
   1a284:	stp	x20, x19, [sp, #16]
   1a288:	mov	x29, sp
   1a28c:	mov	x19, x1
   1a290:	mov	x20, x0
   1a294:	bl	385c <lzma_version_string@@XZ_5.0+0x200>
   1a298:	ldr	x0, [x20, #88]
   1a29c:	mov	x1, x19
   1a2a0:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
   1a2a4:	mov	x0, x20
   1a2a8:	mov	x1, x19
   1a2ac:	ldp	x20, x19, [sp, #16]
   1a2b0:	ldp	x29, x30, [sp], #32
   1a2b4:	b	36fc <lzma_version_string@@XZ_5.0+0xa0>
   1a2b8:	add	x2, x3, #0x10
   1a2bc:	b	38d8 <lzma_version_string@@XZ_5.0+0x27c>
   1a2c0:	cbz	x1, 1a2e0 <lzma_mode_is_supported@@XZ_5.0+0x861c>
   1a2c4:	ldr	w8, [x1]
   1a2c8:	cmp	w8, #0x0
   1a2cc:	cset	w8, ne  // ne = any
   1a2d0:	lsl	w8, w8, #2
   1a2d4:	str	w8, [x0]
   1a2d8:	mov	w0, wzr
   1a2dc:	ret
   1a2e0:	mov	w8, wzr
   1a2e4:	str	w8, [x0]
   1a2e8:	mov	w0, wzr
   1a2ec:	ret
   1a2f0:	cbz	x0, 1a300 <lzma_mode_is_supported@@XZ_5.0+0x863c>
   1a2f4:	ldr	w8, [x0]
   1a2f8:	cbz	w8, 1a300 <lzma_mode_is_supported@@XZ_5.0+0x863c>
   1a2fc:	str	w8, [x1]
   1a300:	mov	w0, wzr
   1a304:	ret
   1a308:	stp	x29, x30, [sp, #-48]!
   1a30c:	str	x21, [sp, #16]
   1a310:	stp	x20, x19, [sp, #32]
   1a314:	mov	x29, sp
   1a318:	cbz	x3, 1a398 <lzma_mode_is_supported@@XZ_5.0+0x86d4>
   1a31c:	cmp	x3, #0x4
   1a320:	b.ne	1a364 <lzma_mode_is_supported@@XZ_5.0+0x86a0>  // b.any
   1a324:	mov	x20, x0
   1a328:	mov	w0, #0x4                   	// #4
   1a32c:	mov	x21, x2
   1a330:	mov	x19, x1
   1a334:	bl	3668 <lzma_version_string@@XZ_5.0+0xc>
   1a338:	cbz	x0, 1a378 <lzma_mode_is_supported@@XZ_5.0+0x86b4>
   1a33c:	ldr	w9, [x21]
   1a340:	mov	x8, x0
   1a344:	str	w9, [x0]
   1a348:	cbz	w9, 1a38c <lzma_mode_is_supported@@XZ_5.0+0x86c8>
   1a34c:	mov	w0, wzr
   1a350:	str	x8, [x20]
   1a354:	ldp	x20, x19, [sp, #32]
   1a358:	ldr	x21, [sp, #16]
   1a35c:	ldp	x29, x30, [sp], #48
   1a360:	ret
   1a364:	mov	w0, #0x8                   	// #8
   1a368:	ldp	x20, x19, [sp, #32]
   1a36c:	ldr	x21, [sp, #16]
   1a370:	ldp	x29, x30, [sp], #48
   1a374:	ret
   1a378:	mov	w0, #0x5                   	// #5
   1a37c:	ldp	x20, x19, [sp, #32]
   1a380:	ldr	x21, [sp, #16]
   1a384:	ldp	x29, x30, [sp], #48
   1a388:	ret
   1a38c:	mov	x0, x8
   1a390:	mov	x1, x19
   1a394:	bl	36fc <lzma_version_string@@XZ_5.0+0xa0>
   1a398:	mov	w0, wzr
   1a39c:	ldp	x20, x19, [sp, #32]
   1a3a0:	ldr	x21, [sp, #16]
   1a3a4:	ldp	x29, x30, [sp], #48
   1a3a8:	ret
   1a3ac:	stp	x29, x30, [sp, #-32]!
   1a3b0:	adrp	x3, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x833c>
   1a3b4:	add	x3, x3, #0x464
   1a3b8:	mov	w4, #0x8                   	// #8
   1a3bc:	mov	w5, #0x5                   	// #5
   1a3c0:	mov	w6, #0x1                   	// #1
   1a3c4:	mov	w7, #0x1                   	// #1
   1a3c8:	str	x19, [sp, #16]
   1a3cc:	mov	x29, sp
   1a3d0:	mov	x19, x0
   1a3d4:	bl	19df0 <lzma_mode_is_supported@@XZ_5.0+0x812c>
   1a3d8:	cbz	w0, 1a3e8 <lzma_mode_is_supported@@XZ_5.0+0x8724>
   1a3dc:	ldr	x19, [sp, #16]
   1a3e0:	ldp	x29, x30, [sp], #32
   1a3e4:	ret
   1a3e8:	ldr	x8, [x19]
   1a3ec:	adrp	x9, 21000 <lzma_mode_is_supported@@XZ_5.0+0xf33c>
   1a3f0:	ldr	d0, [x9, #2016]
   1a3f4:	ldr	x8, [x8, #88]
   1a3f8:	str	d0, [x8]
   1a3fc:	ldr	x19, [sp, #16]
   1a400:	ldp	x29, x30, [sp], #32
   1a404:	ret
   1a408:	stp	x29, x30, [sp, #-32]!
   1a40c:	adrp	x3, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x833c>
   1a410:	add	x3, x3, #0x464
   1a414:	mov	w4, #0x8                   	// #8
   1a418:	mov	w5, #0x5                   	// #5
   1a41c:	mov	w6, #0x1                   	// #1
   1a420:	mov	w7, wzr
   1a424:	str	x19, [sp, #16]
   1a428:	mov	x29, sp
   1a42c:	mov	x19, x0
   1a430:	bl	19df0 <lzma_mode_is_supported@@XZ_5.0+0x812c>
   1a434:	cbz	w0, 1a444 <lzma_mode_is_supported@@XZ_5.0+0x8780>
   1a438:	ldr	x19, [sp, #16]
   1a43c:	ldp	x29, x30, [sp], #32
   1a440:	ret
   1a444:	ldr	x8, [x19]
   1a448:	adrp	x9, 21000 <lzma_mode_is_supported@@XZ_5.0+0xf33c>
   1a44c:	ldr	d0, [x9, #2016]
   1a450:	ldr	x8, [x8, #88]
   1a454:	str	d0, [x8]
   1a458:	ldr	x19, [sp, #16]
   1a45c:	ldp	x29, x30, [sp], #32
   1a460:	ret
   1a464:	subs	x9, x4, #0x5
   1a468:	b.cs	1a474 <lzma_mode_is_supported@@XZ_5.0+0x87b0>  // b.hs, b.nlast
   1a46c:	mov	x0, xzr
   1a470:	ret
   1a474:	str	x21, [sp, #-32]!
   1a478:	stp	x20, x19, [sp, #16]
   1a47c:	ldp	w11, w8, [x0]
   1a480:	sub	w12, w1, #0x5
   1a484:	sub	w10, w1, w8
   1a488:	cmp	w10, #0x5
   1a48c:	csel	w4, w12, w8, hi  // hi = pmore
   1a490:	mov	x8, xzr
   1a494:	mov	w12, #0x17                  	// #23
   1a498:	tbz	w2, #0, 1a5e4 <lzma_mode_is_supported@@XZ_5.0+0x8920>
   1a49c:	adrp	x13, 21000 <lzma_mode_is_supported@@XZ_5.0+0xf33c>
   1a4a0:	add	x13, x13, #0x7e8
   1a4a4:	mov	w14, #0x18                  	// #24
   1a4a8:	mov	w15, #0xffffffff            	// #-1
   1a4ac:	mov	w16, #0x11                  	// #17
   1a4b0:	mov	w17, #0xee                  	// #238
   1a4b4:	b	1a4cc <lzma_mode_is_supported@@XZ_5.0+0x8808>
   1a4b8:	add	x8, x8, #0x1
   1a4bc:	mov	w10, w4
   1a4c0:	cmp	x8, x9
   1a4c4:	mov	w4, w10
   1a4c8:	b.hi	1a730 <lzma_mode_is_supported@@XZ_5.0+0x8a6c>  // b.pmore
   1a4cc:	ldrb	w10, [x3, x8]
   1a4d0:	and	w10, w10, #0xfe
   1a4d4:	cmp	w10, #0xe8
   1a4d8:	b.ne	1a4b8 <lzma_mode_is_supported@@XZ_5.0+0x87f4>  // b.any
   1a4dc:	add	w10, w8, w1
   1a4e0:	sub	w18, w10, w4
   1a4e4:	cmp	w18, #0x5
   1a4e8:	b.ls	1a4f4 <lzma_mode_is_supported@@XZ_5.0+0x8830>  // b.plast
   1a4ec:	mov	w11, wzr
   1a4f0:	b	1a504 <lzma_mode_is_supported@@XZ_5.0+0x8840>
   1a4f4:	cbz	w18, 1a504 <lzma_mode_is_supported@@XZ_5.0+0x8840>
   1a4f8:	subs	w18, w18, #0x1
   1a4fc:	and	w11, w17, w11, lsl #1
   1a500:	b.ne	1a4f8 <lzma_mode_is_supported@@XZ_5.0+0x8834>  // b.any
   1a504:	add	x18, x8, #0x4
   1a508:	ldrb	w6, [x3, x18]
   1a50c:	cmp	w6, #0xff
   1a510:	b.eq	1a518 <lzma_mode_is_supported@@XZ_5.0+0x8854>  // b.none
   1a514:	cbnz	w6, 1a5c4 <lzma_mode_is_supported@@XZ_5.0+0x8900>
   1a518:	cmp	w11, #0x1f
   1a51c:	b.hi	1a5c4 <lzma_mode_is_supported@@XZ_5.0+0x8900>  // b.pmore
   1a520:	ubfx	w2, w11, #1, #3
   1a524:	lsr	x2, x12, x2
   1a528:	tbz	w2, #0, 1a5c4 <lzma_mode_is_supported@@XZ_5.0+0x8900>
   1a52c:	add	x2, x8, #0x3
   1a530:	add	x4, x8, #0x2
   1a534:	ldrb	w7, [x3, x2]
   1a538:	add	x5, x8, #0x1
   1a53c:	ldrb	w19, [x3, x4]
   1a540:	ldrb	w20, [x3, x5]
   1a544:	lsl	w6, w6, #24
   1a548:	bfi	w6, w7, #16, #8
   1a54c:	bfi	w6, w19, #8, #8
   1a550:	orr	w6, w6, w20
   1a554:	add	w7, w10, #0x5
   1a558:	add	w6, w6, w7
   1a55c:	cbz	w11, 1a598 <lzma_mode_is_supported@@XZ_5.0+0x88d4>
   1a560:	lsr	w11, w11, #1
   1a564:	ldr	w11, [x13, w11, uxtw #2]
   1a568:	lsl	w19, w11, #3
   1a56c:	sub	w11, w14, w19
   1a570:	neg	w19, w19
   1a574:	lsl	w19, w15, w19
   1a578:	b	1a584 <lzma_mode_is_supported@@XZ_5.0+0x88c0>
   1a57c:	eon	w6, w6, w19
   1a580:	add	w6, w6, w7
   1a584:	lsr	w20, w6, w11
   1a588:	and	w20, w20, #0xff
   1a58c:	cmp	w20, #0xff
   1a590:	b.eq	1a57c <lzma_mode_is_supported@@XZ_5.0+0x88b8>  // b.none
   1a594:	cbz	w20, 1a57c <lzma_mode_is_supported@@XZ_5.0+0x88b8>
   1a598:	ubfx	w7, w6, #24, #1
   1a59c:	lsr	w19, w6, #16
   1a5a0:	lsr	w20, w6, #8
   1a5a4:	neg	w7, w7
   1a5a8:	mov	w11, wzr
   1a5ac:	strb	w7, [x3, x18]
   1a5b0:	strb	w19, [x3, x2]
   1a5b4:	strb	w20, [x3, x4]
   1a5b8:	strb	w6, [x3, x5]
   1a5bc:	add	x8, x8, #0x5
   1a5c0:	b	1a4c0 <lzma_mode_is_supported@@XZ_5.0+0x87fc>
   1a5c4:	add	x8, x8, #0x1
   1a5c8:	cbz	w6, 1a5dc <lzma_mode_is_supported@@XZ_5.0+0x8918>
   1a5cc:	cmp	w6, #0xff
   1a5d0:	b.eq	1a5dc <lzma_mode_is_supported@@XZ_5.0+0x8918>  // b.none
   1a5d4:	orr	w11, w11, #0x1
   1a5d8:	b	1a4c0 <lzma_mode_is_supported@@XZ_5.0+0x87fc>
   1a5dc:	orr	w11, w11, w16
   1a5e0:	b	1a4c0 <lzma_mode_is_supported@@XZ_5.0+0x87fc>
   1a5e4:	adrp	x14, 21000 <lzma_mode_is_supported@@XZ_5.0+0xf33c>
   1a5e8:	mov	w13, #0xfffffffb            	// #-5
   1a5ec:	add	x14, x14, #0x7e8
   1a5f0:	mov	w15, #0x18                  	// #24
   1a5f4:	mov	w16, #0xffffffff            	// #-1
   1a5f8:	mov	w17, #0x11                  	// #17
   1a5fc:	mov	w18, #0xee                  	// #238
   1a600:	b	1a618 <lzma_mode_is_supported@@XZ_5.0+0x8954>
   1a604:	add	x8, x8, #0x1
   1a608:	mov	w10, w4
   1a60c:	cmp	x8, x9
   1a610:	mov	w4, w10
   1a614:	b.hi	1a730 <lzma_mode_is_supported@@XZ_5.0+0x8a6c>  // b.pmore
   1a618:	ldrb	w10, [x3, x8]
   1a61c:	and	w10, w10, #0xfe
   1a620:	cmp	w10, #0xe8
   1a624:	b.ne	1a604 <lzma_mode_is_supported@@XZ_5.0+0x8940>  // b.any
   1a628:	add	w10, w8, w1
   1a62c:	sub	w2, w10, w4
   1a630:	cmp	w2, #0x5
   1a634:	b.ls	1a640 <lzma_mode_is_supported@@XZ_5.0+0x897c>  // b.plast
   1a638:	mov	w11, wzr
   1a63c:	b	1a650 <lzma_mode_is_supported@@XZ_5.0+0x898c>
   1a640:	cbz	w2, 1a650 <lzma_mode_is_supported@@XZ_5.0+0x898c>
   1a644:	subs	w2, w2, #0x1
   1a648:	and	w11, w18, w11, lsl #1
   1a64c:	b.ne	1a644 <lzma_mode_is_supported@@XZ_5.0+0x8980>  // b.any
   1a650:	add	x2, x8, #0x4
   1a654:	ldrb	w7, [x3, x2]
   1a658:	cmp	w7, #0xff
   1a65c:	b.eq	1a664 <lzma_mode_is_supported@@XZ_5.0+0x89a0>  // b.none
   1a660:	cbnz	w7, 1a710 <lzma_mode_is_supported@@XZ_5.0+0x8a4c>
   1a664:	cmp	w11, #0x1f
   1a668:	b.hi	1a710 <lzma_mode_is_supported@@XZ_5.0+0x8a4c>  // b.pmore
   1a66c:	ubfx	w4, w11, #1, #3
   1a670:	lsr	x4, x12, x4
   1a674:	tbz	w4, #0, 1a710 <lzma_mode_is_supported@@XZ_5.0+0x8a4c>
   1a678:	add	x4, x8, #0x3
   1a67c:	add	x5, x8, #0x2
   1a680:	ldrb	w19, [x3, x4]
   1a684:	add	x6, x8, #0x1
   1a688:	ldrb	w20, [x3, x5]
   1a68c:	ldrb	w21, [x3, x6]
   1a690:	lsl	w7, w7, #24
   1a694:	bfi	w7, w19, #16, #8
   1a698:	bfi	w7, w20, #8, #8
   1a69c:	orr	w7, w7, w21
   1a6a0:	sub	w19, w13, w10
   1a6a4:	add	w7, w7, w19
   1a6a8:	cbz	w11, 1a6e4 <lzma_mode_is_supported@@XZ_5.0+0x8a20>
   1a6ac:	lsr	w11, w11, #1
   1a6b0:	ldr	w11, [x14, w11, uxtw #2]
   1a6b4:	lsl	w20, w11, #3
   1a6b8:	sub	w11, w15, w20
   1a6bc:	neg	w20, w20
   1a6c0:	lsl	w20, w16, w20
   1a6c4:	b	1a6d0 <lzma_mode_is_supported@@XZ_5.0+0x8a0c>
   1a6c8:	eon	w7, w7, w20
   1a6cc:	add	w7, w7, w19
   1a6d0:	lsr	w21, w7, w11
   1a6d4:	and	w21, w21, #0xff
   1a6d8:	cmp	w21, #0xff
   1a6dc:	b.eq	1a6c8 <lzma_mode_is_supported@@XZ_5.0+0x8a04>  // b.none
   1a6e0:	cbz	w21, 1a6c8 <lzma_mode_is_supported@@XZ_5.0+0x8a04>
   1a6e4:	ubfx	w19, w7, #24, #1
   1a6e8:	lsr	w20, w7, #16
   1a6ec:	lsr	w21, w7, #8
   1a6f0:	neg	w19, w19
   1a6f4:	mov	w11, wzr
   1a6f8:	strb	w19, [x3, x2]
   1a6fc:	strb	w20, [x3, x4]
   1a700:	strb	w21, [x3, x5]
   1a704:	strb	w7, [x3, x6]
   1a708:	add	x8, x8, #0x5
   1a70c:	b	1a60c <lzma_mode_is_supported@@XZ_5.0+0x8948>
   1a710:	add	x8, x8, #0x1
   1a714:	cbz	w7, 1a728 <lzma_mode_is_supported@@XZ_5.0+0x8a64>
   1a718:	cmp	w7, #0xff
   1a71c:	b.eq	1a728 <lzma_mode_is_supported@@XZ_5.0+0x8a64>  // b.none
   1a720:	orr	w11, w11, #0x1
   1a724:	b	1a60c <lzma_mode_is_supported@@XZ_5.0+0x8948>
   1a728:	orr	w11, w11, w17
   1a72c:	b	1a60c <lzma_mode_is_supported@@XZ_5.0+0x8948>
   1a730:	stp	w11, w10, [x0]
   1a734:	ldp	x20, x19, [sp, #16]
   1a738:	ldr	x21, [sp], #32
   1a73c:	mov	x0, x8
   1a740:	ret
   1a744:	adrp	x3, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x833c>
   1a748:	add	x3, x3, #0x77c
   1a74c:	mov	w5, #0x4                   	// #4
   1a750:	mov	w6, #0x4                   	// #4
   1a754:	mov	w7, #0x1                   	// #1
   1a758:	mov	x4, xzr
   1a75c:	b	19df0 <lzma_mode_is_supported@@XZ_5.0+0x812c>
   1a760:	adrp	x3, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x833c>
   1a764:	add	x3, x3, #0x77c
   1a768:	mov	w5, #0x4                   	// #4
   1a76c:	mov	w6, #0x4                   	// #4
   1a770:	mov	x4, xzr
   1a774:	mov	w7, wzr
   1a778:	b	19df0 <lzma_mode_is_supported@@XZ_5.0+0x812c>
   1a77c:	cmp	x4, #0x4
   1a780:	b.cs	1a78c <lzma_mode_is_supported@@XZ_5.0+0x8ac8>  // b.hs, b.nlast
   1a784:	mov	x0, xzr
   1a788:	ret
   1a78c:	tbz	w2, #0, 1a824 <lzma_mode_is_supported@@XZ_5.0+0x8b60>
   1a790:	mov	x9, xzr
   1a794:	mov	w8, w1
   1a798:	add	x10, x3, #0x3
   1a79c:	b	1a7b4 <lzma_mode_is_supported@@XZ_5.0+0x8af0>
   1a7a0:	add	x0, x9, #0x4
   1a7a4:	add	x9, x9, #0x8
   1a7a8:	cmp	x9, x4
   1a7ac:	mov	x9, x0
   1a7b0:	b.hi	1a8b8 <lzma_mode_is_supported@@XZ_5.0+0x8bf4>  // b.pmore
   1a7b4:	add	x11, x10, x9
   1a7b8:	ldurb	w13, [x11, #-3]
   1a7bc:	and	w12, w13, #0xfc
   1a7c0:	cmp	w12, #0x48
   1a7c4:	b.ne	1a7a0 <lzma_mode_is_supported@@XZ_5.0+0x8adc>  // b.any
   1a7c8:	ldrb	w14, [x10, x9]
   1a7cc:	and	w12, w14, #0x3
   1a7d0:	cmp	w12, #0x1
   1a7d4:	b.ne	1a7a0 <lzma_mode_is_supported@@XZ_5.0+0x8adc>  // b.any
   1a7d8:	add	x15, x10, x9
   1a7dc:	bfi	w14, w13, #24, #8
   1a7e0:	ldurb	w13, [x15, #-2]
   1a7e4:	ldurb	w17, [x15, #-1]
   1a7e8:	and	w14, w14, #0x3fffffc
   1a7ec:	add	w16, w8, w9
   1a7f0:	orr	w13, w14, w13, lsl #16
   1a7f4:	orr	w13, w13, w17, lsl #8
   1a7f8:	mov	w14, #0x48                  	// #72
   1a7fc:	add	w13, w16, w13
   1a800:	bfxil	w14, w13, #24, #2
   1a804:	lsr	w16, w13, #16
   1a808:	lsr	w17, w13, #8
   1a80c:	orr	w12, w12, w13
   1a810:	sturb	w14, [x11, #-3]
   1a814:	sturb	w16, [x15, #-2]
   1a818:	sturb	w17, [x15, #-1]
   1a81c:	strb	w12, [x15]
   1a820:	b	1a7a0 <lzma_mode_is_supported@@XZ_5.0+0x8adc>
   1a824:	mov	x10, xzr
   1a828:	neg	w8, w1
   1a82c:	add	x9, x3, #0x1
   1a830:	b	1a84c <lzma_mode_is_supported@@XZ_5.0+0x8b88>
   1a834:	add	x0, x10, #0x4
   1a838:	add	x10, x10, #0x8
   1a83c:	cmp	x10, x4
   1a840:	sub	w8, w8, #0x4
   1a844:	mov	x10, x0
   1a848:	b.hi	1a8b8 <lzma_mode_is_supported@@XZ_5.0+0x8bf4>  // b.pmore
   1a84c:	add	x11, x9, x10
   1a850:	ldurb	w13, [x11, #-1]
   1a854:	and	w12, w13, #0xfc
   1a858:	cmp	w12, #0x48
   1a85c:	b.ne	1a834 <lzma_mode_is_supported@@XZ_5.0+0x8b70>  // b.any
   1a860:	ldrb	w14, [x11, #2]
   1a864:	and	w12, w14, #0x3
   1a868:	cmp	w12, #0x1
   1a86c:	b.ne	1a834 <lzma_mode_is_supported@@XZ_5.0+0x8b70>  // b.any
   1a870:	add	x15, x9, x10
   1a874:	bfi	w14, w13, #24, #8
   1a878:	ldrb	w13, [x15]
   1a87c:	ldrb	w16, [x15, #1]
   1a880:	and	w14, w14, #0x3fffffc
   1a884:	mov	w17, #0x48                  	// #72
   1a888:	orr	w13, w14, w13, lsl #16
   1a88c:	orr	w13, w13, w16, lsl #8
   1a890:	add	w13, w8, w13
   1a894:	bfxil	w17, w13, #24, #2
   1a898:	lsr	w14, w13, #16
   1a89c:	lsr	w16, w13, #8
   1a8a0:	orr	w12, w12, w13
   1a8a4:	sturb	w17, [x11, #-1]
   1a8a8:	strb	w14, [x15]
   1a8ac:	strb	w16, [x15, #1]
   1a8b0:	strb	w12, [x11, #2]
   1a8b4:	b	1a834 <lzma_mode_is_supported@@XZ_5.0+0x8b70>
   1a8b8:	ret
   1a8bc:	adrp	x3, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x833c>
   1a8c0:	add	x3, x3, #0x8f4
   1a8c4:	mov	w5, #0x10                  	// #16
   1a8c8:	mov	w6, #0x10                  	// #16
   1a8cc:	mov	w7, #0x1                   	// #1
   1a8d0:	mov	x4, xzr
   1a8d4:	b	19df0 <lzma_mode_is_supported@@XZ_5.0+0x812c>
   1a8d8:	adrp	x3, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x833c>
   1a8dc:	add	x3, x3, #0x8f4
   1a8e0:	mov	w5, #0x10                  	// #16
   1a8e4:	mov	w6, #0x10                  	// #16
   1a8e8:	mov	x4, xzr
   1a8ec:	mov	w7, wzr
   1a8f0:	b	19df0 <lzma_mode_is_supported@@XZ_5.0+0x812c>
   1a8f4:	stp	x22, x21, [sp, #-32]!
   1a8f8:	cmp	x4, #0x10
   1a8fc:	stp	x20, x19, [sp, #16]
   1a900:	b.cs	1a914 <lzma_mode_is_supported@@XZ_5.0+0x8c50>  // b.hs, b.nlast
   1a904:	mov	x0, xzr
   1a908:	ldp	x20, x19, [sp, #16]
   1a90c:	ldp	x22, x21, [sp], #32
   1a910:	ret
   1a914:	mov	x8, #0xffffffffffffffe0    	// #-32
   1a918:	mov	x9, #0xffffffffffffffc0    	// #-64
   1a91c:	mov	x10, #0xffffffffffffff80    	// #-128
   1a920:	movk	x8, #0x3, lsl #16
   1a924:	movk	x9, #0x7, lsl #16
   1a928:	movk	x10, #0xf, lsl #16
   1a92c:	mov	x11, #0x70000               	// #458752
   1a930:	mov	x12, #0x38000               	// #229376
   1a934:	mov	x13, #0x1c000               	// #114688
   1a938:	movk	x8, #0xfdc0, lsl #32
   1a93c:	movk	x9, #0xfb80, lsl #32
   1a940:	movk	x10, #0xf700, lsl #32
   1a944:	movk	x11, #0xf000, lsl #32
   1a948:	movk	x12, #0x7800, lsl #32
   1a94c:	movk	x13, #0x3c00, lsl #32
   1a950:	mov	w14, #0xff33ffff            	// #-13369345
   1a954:	mov	w15, #0xcc30ffff            	// #-869203969
   1a958:	tbz	w2, #0, 1ab8c <lzma_mode_is_supported@@XZ_5.0+0x8ec8>
   1a95c:	mov	x17, xzr
   1a960:	mov	w16, w1
   1a964:	add	x18, x3, #0x7
   1a968:	mov	x1, #0x140000000000        	// #21990232555520
   1a96c:	mov	x2, #0x280000000000        	// #43980465111040
   1a970:	mov	x3, #0x500000000000        	// #87960930222080
   1a974:	b	1a98c <lzma_mode_is_supported@@XZ_5.0+0x8cc8>
   1a978:	add	x0, x17, #0x10
   1a97c:	add	x17, x17, #0x20
   1a980:	cmp	x17, x4
   1a984:	mov	x17, x0
   1a988:	b.hi	1a908 <lzma_mode_is_supported@@XZ_5.0+0x8c44>  // b.pmore
   1a98c:	add	x5, x18, x17
   1a990:	ldurb	w6, [x5, #-7]
   1a994:	and	x0, x6, #0x1f
   1a998:	orr	x7, x0, #0x1
   1a99c:	cmp	x7, #0x17
   1a9a0:	b.ne	1aa3c <lzma_mode_is_supported@@XZ_5.0+0x8d78>  // b.any
   1a9a4:	ldurb	w19, [x5, #-6]
   1a9a8:	ldurb	w20, [x5, #-5]
   1a9ac:	ldurb	w21, [x5, #-4]
   1a9b0:	mov	x7, x6
   1a9b4:	ldurb	w22, [x5, #-3]
   1a9b8:	bfi	x7, x19, #8, #8
   1a9bc:	bfi	x7, x20, #16, #8
   1a9c0:	ldurb	w20, [x5, #-2]
   1a9c4:	bfi	x7, x21, #24, #8
   1a9c8:	bfi	x7, x22, #32, #8
   1a9cc:	mov	x19, x7
   1a9d0:	bfi	x19, x20, #40, #8
   1a9d4:	and	x20, x19, x13
   1a9d8:	cmp	x20, x1
   1a9dc:	b.ne	1aa3c <lzma_mode_is_supported@@XZ_5.0+0x8d78>  // b.any
   1a9e0:	lsr	x20, x19, #21
   1a9e4:	ubfx	x7, x7, #18, #20
   1a9e8:	and	x19, x19, x8
   1a9ec:	and	w6, w6, #0x1f
   1a9f0:	and	w20, w20, #0x100000
   1a9f4:	add	w21, w16, w17
   1a9f8:	orr	w6, w19, w6
   1a9fc:	orr	w7, w7, w20
   1aa00:	sturb	w6, [x5, #-7]
   1aa04:	add	w6, w21, w7, lsl #4
   1aa08:	lsr	w7, w6, #4
   1aa0c:	ubfx	w20, w6, #4, #20
   1aa10:	lsr	w6, w6, #10
   1aa14:	and	w7, w7, #0x100000
   1aa18:	orr	x20, x19, x20, lsl #18
   1aa1c:	sturb	w6, [x5, #-4]
   1aa20:	orr	x6, x19, x7, lsl #21
   1aa24:	lsr	x7, x20, #16
   1aa28:	lsr	x19, x20, #32
   1aa2c:	lsr	x6, x6, #40
   1aa30:	sturb	w7, [x5, #-5]
   1aa34:	sturb	w19, [x5, #-3]
   1aa38:	sturb	w6, [x5, #-2]
   1aa3c:	lsr	x5, x14, x0
   1aa40:	tbnz	w5, #0, 1aae4 <lzma_mode_is_supported@@XZ_5.0+0x8e20>
   1aa44:	add	x5, x18, x17
   1aa48:	ldurb	w6, [x5, #-2]
   1aa4c:	ldurb	w7, [x5, #-1]
   1aa50:	ldrb	w20, [x5]
   1aa54:	ldrb	w21, [x5, #1]
   1aa58:	mov	x19, x6
   1aa5c:	bfi	x19, x7, #8, #8
   1aa60:	ldrb	w7, [x5, #2]
   1aa64:	bfi	x19, x20, #16, #8
   1aa68:	ldrb	w20, [x5, #3]
   1aa6c:	bfi	x19, x21, #24, #8
   1aa70:	bfi	x19, x7, #32, #8
   1aa74:	mov	x7, x19
   1aa78:	bfi	x7, x20, #40, #8
   1aa7c:	and	x20, x7, x12
   1aa80:	cmp	x20, x2
   1aa84:	b.ne	1aae4 <lzma_mode_is_supported@@XZ_5.0+0x8e20>  // b.any
   1aa88:	lsr	x20, x7, #22
   1aa8c:	ubfx	x19, x19, #19, #20
   1aa90:	and	x7, x7, x9
   1aa94:	and	w6, w6, #0x3f
   1aa98:	and	w20, w20, #0x100000
   1aa9c:	add	w21, w16, w17
   1aaa0:	orr	w6, w7, w6
   1aaa4:	orr	w19, w19, w20
   1aaa8:	sturb	w6, [x5, #-2]
   1aaac:	add	w6, w21, w19, lsl #4
   1aab0:	lsr	w19, w6, #4
   1aab4:	ubfx	w20, w6, #4, #20
   1aab8:	orr	x20, x7, x20, lsl #19
   1aabc:	and	w19, w19, #0x100000
   1aac0:	lsr	w6, w6, #9
   1aac4:	orr	x7, x7, x19, lsl #22
   1aac8:	lsr	x19, x20, #16
   1aacc:	lsr	x20, x20, #32
   1aad0:	strb	w19, [x18, x17]
   1aad4:	strb	w6, [x5, #1]
   1aad8:	lsr	x6, x7, #40
   1aadc:	strb	w20, [x5, #2]
   1aae0:	strb	w6, [x5, #3]
   1aae4:	lsr	x0, x15, x0
   1aae8:	tbnz	w0, #0, 1a978 <lzma_mode_is_supported@@XZ_5.0+0x8cb4>
   1aaec:	add	x0, x18, x17
   1aaf0:	ldrb	w5, [x0, #3]
   1aaf4:	ldrb	w6, [x0, #4]
   1aaf8:	ldrb	w19, [x0, #5]
   1aafc:	ldrb	w20, [x0, #6]
   1ab00:	mov	x7, x5
   1ab04:	bfi	x7, x6, #8, #8
   1ab08:	ldrb	w6, [x0, #7]
   1ab0c:	bfi	x7, x19, #16, #8
   1ab10:	ldrb	w19, [x0, #8]
   1ab14:	bfi	x7, x20, #24, #8
   1ab18:	bfi	x7, x6, #32, #8
   1ab1c:	mov	x6, x7
   1ab20:	bfi	x6, x19, #40, #8
   1ab24:	and	x19, x6, x11
   1ab28:	cmp	x19, x3
   1ab2c:	b.ne	1a978 <lzma_mode_is_supported@@XZ_5.0+0x8cb4>  // b.any
   1ab30:	lsr	x19, x6, #23
   1ab34:	lsr	x7, x7, #20
   1ab38:	and	x6, x6, x10
   1ab3c:	and	w5, w5, #0x7f
   1ab40:	and	w19, w19, #0x100000
   1ab44:	add	w20, w16, w17
   1ab48:	orr	w5, w6, w5
   1ab4c:	orr	w7, w7, w19
   1ab50:	strb	w5, [x0, #3]
   1ab54:	add	w5, w20, w7, lsl #4
   1ab58:	lsr	w7, w5, #4
   1ab5c:	lsr	w19, w5, #8
   1ab60:	lsr	w5, w5, #16
   1ab64:	orr	w20, w6, w7, lsl #20
   1ab68:	and	w7, w7, #0x100000
   1ab6c:	strb	w5, [x0, #7]
   1ab70:	lsr	w5, w20, #16
   1ab74:	orr	x6, x6, x7, lsl #23
   1ab78:	strb	w5, [x0, #5]
   1ab7c:	lsr	x5, x6, #40
   1ab80:	strb	w19, [x0, #6]
   1ab84:	strb	w5, [x0, #8]
   1ab88:	b	1a978 <lzma_mode_is_supported@@XZ_5.0+0x8cb4>
   1ab8c:	mov	x18, xzr
   1ab90:	neg	w16, w1
   1ab94:	add	x17, x3, #0x7
   1ab98:	mov	x1, #0x140000000000        	// #21990232555520
   1ab9c:	mov	x2, #0x280000000000        	// #43980465111040
   1aba0:	mov	x3, #0x500000000000        	// #87960930222080
   1aba4:	b	1abc0 <lzma_mode_is_supported@@XZ_5.0+0x8efc>
   1aba8:	add	x0, x18, #0x10
   1abac:	add	x18, x18, #0x20
   1abb0:	cmp	x18, x4
   1abb4:	sub	w16, w16, #0x10
   1abb8:	mov	x18, x0
   1abbc:	b.hi	1a908 <lzma_mode_is_supported@@XZ_5.0+0x8c44>  // b.pmore
   1abc0:	add	x5, x17, x18
   1abc4:	ldurb	w6, [x5, #-7]
   1abc8:	and	x0, x6, #0x1f
   1abcc:	orr	x7, x0, #0x1
   1abd0:	cmp	x7, #0x17
   1abd4:	b.ne	1ac6c <lzma_mode_is_supported@@XZ_5.0+0x8fa8>  // b.any
   1abd8:	ldurb	w19, [x5, #-6]
   1abdc:	ldurb	w20, [x5, #-5]
   1abe0:	ldurb	w21, [x5, #-4]
   1abe4:	mov	x7, x6
   1abe8:	ldurb	w22, [x5, #-3]
   1abec:	bfi	x7, x19, #8, #8
   1abf0:	bfi	x7, x20, #16, #8
   1abf4:	ldurb	w20, [x5, #-2]
   1abf8:	bfi	x7, x21, #24, #8
   1abfc:	bfi	x7, x22, #32, #8
   1ac00:	mov	x19, x7
   1ac04:	bfi	x19, x20, #40, #8
   1ac08:	and	x20, x19, x13
   1ac0c:	cmp	x20, x1
   1ac10:	b.ne	1ac6c <lzma_mode_is_supported@@XZ_5.0+0x8fa8>  // b.any
   1ac14:	lsr	x20, x19, #21
   1ac18:	ubfx	x7, x7, #18, #20
   1ac1c:	and	x19, x19, x8
   1ac20:	and	w6, w6, #0x1f
   1ac24:	and	w20, w20, #0x100000
   1ac28:	orr	w6, w19, w6
   1ac2c:	orr	w7, w7, w20
   1ac30:	sturb	w6, [x5, #-7]
   1ac34:	add	w6, w16, w7, lsl #4
   1ac38:	lsr	w7, w6, #4
   1ac3c:	ubfx	w20, w6, #4, #20
   1ac40:	lsr	w6, w6, #10
   1ac44:	and	w7, w7, #0x100000
   1ac48:	orr	x20, x19, x20, lsl #18
   1ac4c:	sturb	w6, [x5, #-4]
   1ac50:	orr	x6, x19, x7, lsl #21
   1ac54:	lsr	x7, x20, #16
   1ac58:	lsr	x19, x20, #32
   1ac5c:	lsr	x6, x6, #40
   1ac60:	sturb	w7, [x5, #-5]
   1ac64:	sturb	w19, [x5, #-3]
   1ac68:	sturb	w6, [x5, #-2]
   1ac6c:	lsr	x5, x14, x0
   1ac70:	tbnz	w5, #0, 1ad10 <lzma_mode_is_supported@@XZ_5.0+0x904c>
   1ac74:	add	x5, x17, x18
   1ac78:	ldurb	w6, [x5, #-2]
   1ac7c:	ldurb	w19, [x5, #-1]
   1ac80:	ldrb	w20, [x5]
   1ac84:	ldrb	w21, [x5, #1]
   1ac88:	mov	x7, x6
   1ac8c:	bfi	x7, x19, #8, #8
   1ac90:	ldrb	w19, [x5, #2]
   1ac94:	bfi	x7, x20, #16, #8
   1ac98:	ldrb	w20, [x5, #3]
   1ac9c:	bfi	x7, x21, #24, #8
   1aca0:	bfi	x7, x19, #32, #8
   1aca4:	mov	x19, x7
   1aca8:	bfi	x19, x20, #40, #8
   1acac:	and	x20, x19, x12
   1acb0:	cmp	x20, x2
   1acb4:	b.ne	1ad10 <lzma_mode_is_supported@@XZ_5.0+0x904c>  // b.any
   1acb8:	lsr	x20, x19, #22
   1acbc:	ubfx	x7, x7, #19, #20
   1acc0:	and	x19, x19, x9
   1acc4:	and	w6, w6, #0x3f
   1acc8:	and	w20, w20, #0x100000
   1accc:	orr	w6, w19, w6
   1acd0:	orr	w7, w7, w20
   1acd4:	sturb	w6, [x5, #-2]
   1acd8:	add	w6, w16, w7, lsl #4
   1acdc:	lsr	w7, w6, #4
   1ace0:	ubfx	w20, w6, #4, #20
   1ace4:	orr	x20, x19, x20, lsl #19
   1ace8:	and	w7, w7, #0x100000
   1acec:	lsr	w6, w6, #9
   1acf0:	orr	x7, x19, x7, lsl #22
   1acf4:	lsr	x19, x20, #16
   1acf8:	lsr	x20, x20, #32
   1acfc:	strb	w19, [x17, x18]
   1ad00:	strb	w6, [x5, #1]
   1ad04:	lsr	x6, x7, #40
   1ad08:	strb	w20, [x5, #2]
   1ad0c:	strb	w6, [x5, #3]
   1ad10:	lsr	x0, x15, x0
   1ad14:	tbnz	w0, #0, 1aba8 <lzma_mode_is_supported@@XZ_5.0+0x8ee4>
   1ad18:	add	x0, x17, x18
   1ad1c:	ldrb	w5, [x0, #3]
   1ad20:	ldrb	w7, [x0, #4]
   1ad24:	ldrb	w19, [x0, #5]
   1ad28:	ldrb	w20, [x0, #6]
   1ad2c:	mov	x6, x5
   1ad30:	bfi	x6, x7, #8, #8
   1ad34:	ldrb	w7, [x0, #7]
   1ad38:	bfi	x6, x19, #16, #8
   1ad3c:	ldrb	w19, [x0, #8]
   1ad40:	bfi	x6, x20, #24, #8
   1ad44:	bfi	x6, x7, #32, #8
   1ad48:	mov	x7, x6
   1ad4c:	bfi	x7, x19, #40, #8
   1ad50:	and	x19, x7, x11
   1ad54:	cmp	x19, x3
   1ad58:	b.ne	1aba8 <lzma_mode_is_supported@@XZ_5.0+0x8ee4>  // b.any
   1ad5c:	lsr	x19, x7, #23
   1ad60:	lsr	x6, x6, #20
   1ad64:	and	x7, x7, x10
   1ad68:	and	w5, w5, #0x7f
   1ad6c:	and	w19, w19, #0x100000
   1ad70:	orr	w5, w7, w5
   1ad74:	orr	w6, w6, w19
   1ad78:	strb	w5, [x0, #3]
   1ad7c:	add	w5, w16, w6, lsl #4
   1ad80:	lsr	w6, w5, #4
   1ad84:	lsr	w19, w5, #8
   1ad88:	lsr	w5, w5, #16
   1ad8c:	orr	w20, w7, w6, lsl #20
   1ad90:	and	w6, w6, #0x100000
   1ad94:	strb	w5, [x0, #7]
   1ad98:	lsr	w5, w20, #16
   1ad9c:	orr	x6, x7, x6, lsl #23
   1ada0:	strb	w5, [x0, #5]
   1ada4:	lsr	x5, x6, #40
   1ada8:	strb	w19, [x0, #6]
   1adac:	strb	w5, [x0, #8]
   1adb0:	b	1aba8 <lzma_mode_is_supported@@XZ_5.0+0x8ee4>
   1adb4:	adrp	x3, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x833c>
   1adb8:	add	x3, x3, #0xdec
   1adbc:	mov	w5, #0x4                   	// #4
   1adc0:	mov	w6, #0x4                   	// #4
   1adc4:	mov	w7, #0x1                   	// #1
   1adc8:	mov	x4, xzr
   1adcc:	b	19df0 <lzma_mode_is_supported@@XZ_5.0+0x812c>
   1add0:	adrp	x3, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x833c>
   1add4:	add	x3, x3, #0xdec
   1add8:	mov	w5, #0x4                   	// #4
   1addc:	mov	w6, #0x4                   	// #4
   1ade0:	mov	x4, xzr
   1ade4:	mov	w7, wzr
   1ade8:	b	19df0 <lzma_mode_is_supported@@XZ_5.0+0x812c>
   1adec:	cmp	x4, #0x4
   1adf0:	b.cs	1adfc <lzma_mode_is_supported@@XZ_5.0+0x9138>  // b.hs, b.nlast
   1adf4:	mov	x0, xzr
   1adf8:	ret
   1adfc:	mov	x9, xzr
   1ae00:	tbz	w2, #0, 1ae70 <lzma_mode_is_supported@@XZ_5.0+0x91ac>
   1ae04:	add	w8, w1, #0x8
   1ae08:	add	x10, x3, #0x1
   1ae0c:	b	1ae24 <lzma_mode_is_supported@@XZ_5.0+0x9160>
   1ae10:	add	x0, x9, #0x4
   1ae14:	add	x9, x9, #0x8
   1ae18:	cmp	x9, x4
   1ae1c:	mov	x9, x0
   1ae20:	b.hi	1aee0 <lzma_mode_is_supported@@XZ_5.0+0x921c>  // b.pmore
   1ae24:	add	x11, x10, x9
   1ae28:	ldrb	w12, [x11, #2]
   1ae2c:	cmp	w12, #0xeb
   1ae30:	b.ne	1ae10 <lzma_mode_is_supported@@XZ_5.0+0x914c>  // b.any
   1ae34:	ldrb	w12, [x11, #1]
   1ae38:	ldrb	w13, [x11]
   1ae3c:	ldurb	w14, [x11, #-1]
   1ae40:	add	w15, w8, w9
   1ae44:	lsl	w12, w12, #16
   1ae48:	bfi	w12, w13, #8, #8
   1ae4c:	orr	w12, w12, w14
   1ae50:	add	w12, w15, w12, lsl #2
   1ae54:	lsr	w13, w12, #2
   1ae58:	lsr	w14, w12, #18
   1ae5c:	lsr	w12, w12, #10
   1ae60:	strb	w14, [x11, #1]
   1ae64:	strb	w12, [x11]
   1ae68:	sturb	w13, [x11, #-1]
   1ae6c:	b	1ae10 <lzma_mode_is_supported@@XZ_5.0+0x914c>
   1ae70:	mov	w8, #0xfffffff8            	// #-8
   1ae74:	sub	w8, w8, w1
   1ae78:	add	x10, x3, #0x1
   1ae7c:	b	1ae98 <lzma_mode_is_supported@@XZ_5.0+0x91d4>
   1ae80:	add	x0, x9, #0x4
   1ae84:	add	x9, x9, #0x8
   1ae88:	cmp	x9, x4
   1ae8c:	sub	w8, w8, #0x4
   1ae90:	mov	x9, x0
   1ae94:	b.hi	1aee0 <lzma_mode_is_supported@@XZ_5.0+0x921c>  // b.pmore
   1ae98:	add	x11, x10, x9
   1ae9c:	ldrb	w12, [x11, #2]
   1aea0:	cmp	w12, #0xeb
   1aea4:	b.ne	1ae80 <lzma_mode_is_supported@@XZ_5.0+0x91bc>  // b.any
   1aea8:	ldrb	w12, [x11, #1]
   1aeac:	ldrb	w13, [x11]
   1aeb0:	ldurb	w14, [x11, #-1]
   1aeb4:	lsl	w12, w12, #16
   1aeb8:	bfi	w12, w13, #8, #8
   1aebc:	orr	w12, w12, w14
   1aec0:	add	w12, w8, w12, lsl #2
   1aec4:	lsr	w13, w12, #2
   1aec8:	lsr	w14, w12, #18
   1aecc:	lsr	w12, w12, #10
   1aed0:	strb	w14, [x11, #1]
   1aed4:	strb	w12, [x11]
   1aed8:	sturb	w13, [x11, #-1]
   1aedc:	b	1ae80 <lzma_mode_is_supported@@XZ_5.0+0x91bc>
   1aee0:	ret
   1aee4:	adrp	x3, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x833c>
   1aee8:	add	x3, x3, #0xf1c
   1aeec:	mov	w5, #0x4                   	// #4
   1aef0:	mov	w6, #0x2                   	// #2
   1aef4:	mov	w7, #0x1                   	// #1
   1aef8:	mov	x4, xzr
   1aefc:	b	19df0 <lzma_mode_is_supported@@XZ_5.0+0x812c>
   1af00:	adrp	x3, 1a000 <lzma_mode_is_supported@@XZ_5.0+0x833c>
   1af04:	add	x3, x3, #0xf1c
   1af08:	mov	w5, #0x4                   	// #4
   1af0c:	mov	w6, #0x2                   	// #2
   1af10:	mov	x4, xzr
   1af14:	mov	w7, wzr
   1af18:	b	19df0 <lzma_mode_is_supported@@XZ_5.0+0x812c>
   1af1c:	cmp	x4, #0x4
   1af20:	b.cs	1af2c <lzma_mode_is_supported@@XZ_5.0+0x9268>  // b.hs, b.nlast
   1af24:	mov	x0, xzr
   1af28:	ret
   1af2c:	mov	w8, #0x700                 	// #1792
   1af30:	mov	x9, xzr
   1af34:	movk	w8, #0x38, lsl #16
   1af38:	tbnz	w2, #0, 1af54 <lzma_mode_is_supported@@XZ_5.0+0x9290>
   1af3c:	b	1afec <lzma_mode_is_supported@@XZ_5.0+0x9328>
   1af40:	add	x0, x9, #0x2
   1af44:	add	x9, x9, #0x6
   1af48:	cmp	x9, x4
   1af4c:	mov	x9, x0
   1af50:	b.hi	1b074 <lzma_mode_is_supported@@XZ_5.0+0x93b0>  // b.pmore
   1af54:	add	x10, x9, #0x1
   1af58:	ldrb	w12, [x3, x10]
   1af5c:	and	w11, w12, #0xf8
   1af60:	cmp	w11, #0xf0
   1af64:	b.ne	1af40 <lzma_mode_is_supported@@XZ_5.0+0x927c>  // b.any
   1af68:	add	x11, x9, #0x3
   1af6c:	ldrb	w13, [x3, x11]
   1af70:	mvn	w14, w13
   1af74:	tst	w14, #0xf8
   1af78:	b.ne	1af40 <lzma_mode_is_supported@@XZ_5.0+0x927c>  // b.any
   1af7c:	lsl	w12, w12, #19
   1af80:	ldrb	w14, [x3, x9]
   1af84:	add	x15, x9, #0x2
   1af88:	bfi	w12, w13, #8, #8
   1af8c:	ldrb	w13, [x3, x15]
   1af90:	and	w12, w12, w8
   1af94:	bfi	w12, w14, #11, #8
   1af98:	add	w14, w9, w1
   1af9c:	orr	w12, w12, w13
   1afa0:	add	w12, w14, w12, lsl #1
   1afa4:	mov	w13, #0xf0                  	// #240
   1afa8:	add	w12, w12, #0x4
   1afac:	bfxil	w13, w12, #20, #3
   1afb0:	lsr	w14, w12, #1
   1afb4:	strb	w13, [x3, x10]
   1afb8:	lsr	w10, w12, #12
   1afbc:	lsr	w12, w12, #9
   1afc0:	strb	w10, [x3, x9]
   1afc4:	orr	w9, w12, #0xf8
   1afc8:	strb	w9, [x3, x11]
   1afcc:	mov	x9, x15
   1afd0:	strb	w14, [x3, x15]
   1afd4:	b	1af40 <lzma_mode_is_supported@@XZ_5.0+0x927c>
   1afd8:	add	x0, x9, #0x2
   1afdc:	add	x9, x9, #0x6
   1afe0:	cmp	x9, x4
   1afe4:	mov	x9, x0
   1afe8:	b.hi	1b074 <lzma_mode_is_supported@@XZ_5.0+0x93b0>  // b.pmore
   1afec:	add	x10, x9, #0x1
   1aff0:	ldrb	w12, [x3, x10]
   1aff4:	and	w11, w12, #0xf8
   1aff8:	cmp	w11, #0xf0
   1affc:	b.ne	1afd8 <lzma_mode_is_supported@@XZ_5.0+0x9314>  // b.any
   1b000:	add	x11, x9, #0x3
   1b004:	ldrb	w13, [x3, x11]
   1b008:	mvn	w14, w13
   1b00c:	tst	w14, #0xf8
   1b010:	b.ne	1afd8 <lzma_mode_is_supported@@XZ_5.0+0x9314>  // b.any
   1b014:	lsl	w12, w12, #19
   1b018:	ldrb	w14, [x3, x9]
   1b01c:	add	x15, x9, #0x2
   1b020:	bfi	w12, w13, #8, #8
   1b024:	ldrb	w13, [x3, x15]
   1b028:	and	w12, w12, w8
   1b02c:	bfi	w12, w14, #11, #8
   1b030:	add	w14, w9, w1
   1b034:	orr	w12, w12, w13
   1b038:	lsl	w12, w12, #1
   1b03c:	sub	w12, w12, w14
   1b040:	mov	w13, #0xf0                  	// #240
   1b044:	sub	w12, w12, #0x4
   1b048:	bfxil	w13, w12, #20, #3
   1b04c:	lsr	w14, w12, #1
   1b050:	strb	w13, [x3, x10]
   1b054:	lsr	w10, w12, #12
   1b058:	lsr	w12, w12, #9
   1b05c:	strb	w10, [x3, x9]
   1b060:	orr	w9, w12, #0xf8
   1b064:	strb	w9, [x3, x11]
   1b068:	mov	x9, x15
   1b06c:	strb	w14, [x3, x15]
   1b070:	b	1afd8 <lzma_mode_is_supported@@XZ_5.0+0x9314>
   1b074:	ret
   1b078:	adrp	x3, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
   1b07c:	add	x3, x3, #0xb0
   1b080:	mov	w5, #0x4                   	// #4
   1b084:	mov	w6, #0x4                   	// #4
   1b088:	mov	w7, #0x1                   	// #1
   1b08c:	mov	x4, xzr
   1b090:	b	19df0 <lzma_mode_is_supported@@XZ_5.0+0x812c>
   1b094:	adrp	x3, 1b000 <lzma_mode_is_supported@@XZ_5.0+0x933c>
   1b098:	add	x3, x3, #0xb0
   1b09c:	mov	w5, #0x4                   	// #4
   1b0a0:	mov	w6, #0x4                   	// #4
   1b0a4:	mov	x4, xzr
   1b0a8:	mov	w7, wzr
   1b0ac:	b	19df0 <lzma_mode_is_supported@@XZ_5.0+0x812c>
   1b0b0:	cmp	x4, #0x4
   1b0b4:	b.cs	1b0c0 <lzma_mode_is_supported@@XZ_5.0+0x93fc>  // b.hs, b.nlast
   1b0b8:	mov	x0, xzr
   1b0bc:	ret
   1b0c0:	tbz	w2, #0, 1b180 <lzma_mode_is_supported@@XZ_5.0+0x94bc>
   1b0c4:	mov	x9, xzr
   1b0c8:	mov	w8, w1
   1b0cc:	add	x10, x3, #0x1
   1b0d0:	b	1b140 <lzma_mode_is_supported@@XZ_5.0+0x947c>
   1b0d4:	add	x14, x10, x9
   1b0d8:	ldrb	w16, [x14, #1]
   1b0dc:	ldrb	w17, [x14, #2]
   1b0e0:	lsl	w13, w13, #24
   1b0e4:	bfi	w13, w12, #16, #8
   1b0e8:	bfi	w13, w16, #8, #8
   1b0ec:	add	w15, w8, w9
   1b0f0:	orr	w13, w13, w17
   1b0f4:	add	w13, w15, w13, lsl #2
   1b0f8:	lsr	w15, w13, #2
   1b0fc:	and	w16, w15, #0x400000
   1b100:	and	w17, w15, #0x3f0000
   1b104:	mov	w12, #0x40                  	// #64
   1b108:	sub	w17, w17, w16
   1b10c:	neg	w16, w16
   1b110:	lsr	w13, w13, #10
   1b114:	bfxil	w12, w16, #24, #6
   1b118:	lsr	w16, w17, #16
   1b11c:	strb	w12, [x3, x9]
   1b120:	strb	w16, [x3, x11]
   1b124:	strb	w13, [x14, #1]
   1b128:	strb	w15, [x14, #2]
   1b12c:	add	x0, x9, #0x4
   1b130:	add	x9, x9, #0x8
   1b134:	cmp	x9, x4
   1b138:	mov	x9, x0
   1b13c:	b.hi	1b23c <lzma_mode_is_supported@@XZ_5.0+0x9578>  // b.pmore
   1b140:	add	x11, x10, x9
   1b144:	ldurb	w13, [x11, #-1]
   1b148:	cmp	w13, #0x40
   1b14c:	b.eq	1b16c <lzma_mode_is_supported@@XZ_5.0+0x94a8>  // b.none
   1b150:	cmp	w13, #0x7f
   1b154:	b.ne	1b12c <lzma_mode_is_supported@@XZ_5.0+0x9468>  // b.any
   1b158:	ldrb	w12, [x10, x9]
   1b15c:	cmp	w12, #0xbf
   1b160:	b.ls	1b12c <lzma_mode_is_supported@@XZ_5.0+0x9468>  // b.plast
   1b164:	orr	x11, x9, #0x1
   1b168:	b	1b0d4 <lzma_mode_is_supported@@XZ_5.0+0x9410>
   1b16c:	ldrb	w12, [x10, x9]
   1b170:	cmp	w12, #0x3f
   1b174:	b.hi	1b12c <lzma_mode_is_supported@@XZ_5.0+0x9468>  // b.pmore
   1b178:	add	x11, x9, #0x1
   1b17c:	b	1b0d4 <lzma_mode_is_supported@@XZ_5.0+0x9410>
   1b180:	mov	x10, xzr
   1b184:	add	x8, x3, #0x1
   1b188:	neg	w9, w1
   1b18c:	b	1b1fc <lzma_mode_is_supported@@XZ_5.0+0x9538>
   1b190:	add	x14, x8, x10
   1b194:	ldrb	w15, [x14, #1]
   1b198:	ldrb	w16, [x14, #2]
   1b19c:	lsl	w13, w13, #24
   1b1a0:	bfi	w13, w11, #16, #8
   1b1a4:	bfi	w13, w15, #8, #8
   1b1a8:	orr	w11, w13, w16
   1b1ac:	add	w11, w9, w11, lsl #2
   1b1b0:	lsr	w13, w11, #2
   1b1b4:	and	w15, w13, #0x400000
   1b1b8:	and	w16, w13, #0x3f0000
   1b1bc:	mov	w17, #0x40                  	// #64
   1b1c0:	sub	w16, w16, w15
   1b1c4:	neg	w15, w15
   1b1c8:	lsr	w11, w11, #10
   1b1cc:	bfxil	w17, w15, #24, #6
   1b1d0:	lsr	w15, w16, #16
   1b1d4:	strb	w17, [x3, x10]
   1b1d8:	strb	w15, [x3, x12]
   1b1dc:	strb	w11, [x14, #1]
   1b1e0:	strb	w13, [x14, #2]
   1b1e4:	add	x0, x10, #0x4
   1b1e8:	add	x10, x10, #0x8
   1b1ec:	cmp	x10, x4
   1b1f0:	sub	w9, w9, #0x4
   1b1f4:	mov	x10, x0
   1b1f8:	b.hi	1b23c <lzma_mode_is_supported@@XZ_5.0+0x9578>  // b.pmore
   1b1fc:	add	x11, x8, x10
   1b200:	ldurb	w13, [x11, #-1]
   1b204:	cmp	w13, #0x7f
   1b208:	b.eq	1b228 <lzma_mode_is_supported@@XZ_5.0+0x9564>  // b.none
   1b20c:	cmp	w13, #0x40
   1b210:	b.ne	1b1e4 <lzma_mode_is_supported@@XZ_5.0+0x9520>  // b.any
   1b214:	ldrb	w11, [x8, x10]
   1b218:	cmp	w11, #0x40
   1b21c:	b.cs	1b1e4 <lzma_mode_is_supported@@XZ_5.0+0x9520>  // b.hs, b.nlast
   1b220:	orr	x12, x10, #0x1
   1b224:	b	1b190 <lzma_mode_is_supported@@XZ_5.0+0x94cc>
   1b228:	ldrb	w11, [x8, x10]
   1b22c:	cmp	w11, #0xc0
   1b230:	b.cc	1b1e4 <lzma_mode_is_supported@@XZ_5.0+0x9520>  // b.lo, b.ul, b.last
   1b234:	add	x12, x10, #0x1
   1b238:	b	1b190 <lzma_mode_is_supported@@XZ_5.0+0x94cc>
   1b23c:	ret

Disassembly of section .fini:

000000000001b240 <.fini>:
   1b240:	stp	x29, x30, [sp, #-16]!
   1b244:	mov	x29, sp
   1b248:	ldp	x29, x30, [sp], #16
   1b24c:	ret
