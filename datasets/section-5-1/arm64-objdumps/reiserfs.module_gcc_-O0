
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//reiserfs.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_swap_bytes16>:
       0:	sub	sp, sp, #0x10
       4:	strh	w0, [sp, #14]
       8:	ldrh	w0, [sp, #14]
       c:	lsl	w0, w0, #8
      10:	sxth	w1, w0
      14:	ldrh	w0, [sp, #14]
      18:	lsr	w0, w0, #8
      1c:	and	w0, w0, #0xffff
      20:	sxth	w0, w0
      24:	orr	w0, w1, w0
      28:	sxth	w0, w0
      2c:	and	w0, w0, #0xffff
      30:	add	sp, sp, #0x10
      34:	ret

0000000000000038 <grub_fs_register>:
      38:	stp	x29, x30, [sp, #-32]!
      3c:	mov	x29, sp
      40:	str	x0, [sp, #24]
      44:	ldr	x1, [sp, #24]
      48:	adrp	x0, 0 <grub_swap_bytes16>
      4c:	add	x0, x0, #0x0
      50:	ldr	x0, [x0]
      54:	bl	0 <grub_list_push>
      58:	nop
      5c:	ldp	x29, x30, [sp], #32
      60:	ret
      64:	nop
	...

0000000000000070 <grub_fs_unregister>:
      70:	stp	x29, x30, [sp, #-32]!
      74:	mov	x29, sp
      78:	str	x0, [sp, #24]
      7c:	ldr	x0, [sp, #24]
      80:	bl	0 <grub_list_remove>
      84:	nop
      88:	ldp	x29, x30, [sp], #32
      8c:	ret

0000000000000090 <grub_memcpy>:
      90:	stp	x29, x30, [sp, #-48]!
      94:	mov	x29, sp
      98:	str	x0, [sp, #40]
      9c:	str	x1, [sp, #32]
      a0:	str	x2, [sp, #24]
      a4:	ldr	x2, [sp, #24]
      a8:	ldr	x1, [sp, #32]
      ac:	ldr	x0, [sp, #40]
      b0:	bl	0 <grub_memmove>
      b4:	ldp	x29, x30, [sp], #48
      b8:	ret

00000000000000bc <real_assert>:
      bc:	stp	x29, x30, [sp, #-32]!
      c0:	mov	x29, sp
      c4:	str	w0, [sp, #28]
      c8:	str	x1, [sp, #16]
      cc:	str	w2, [sp, #24]
      d0:	ldr	w0, [sp, #28]
      d4:	cmp	w0, #0x0
      d8:	b.ne	f4 <real_assert+0x38>  // b.any
      dc:	ldr	w2, [sp, #24]
      e0:	ldr	x1, [sp, #16]
      e4:	adrp	x0, 0 <grub_swap_bytes16>
      e8:	add	x0, x0, #0x0
      ec:	ldr	x0, [x0]
      f0:	bl	0 <grub_printf>
      f4:	nop
      f8:	ldp	x29, x30, [sp], #32
      fc:	ret
	...

0000000000000108 <grub_reiserfs_get_key_v2_type>:
     108:	sub	sp, sp, #0x10
     10c:	str	x0, [sp, #8]
     110:	ldr	x0, [sp, #8]
     114:	ldr	x0, [x0, #8]
     118:	lsr	x0, x0, #60
     11c:	cmp	x0, #0xf
     120:	b.eq	168 <grub_reiserfs_get_key_v2_type+0x60>  // b.none
     124:	cmp	x0, #0xf
     128:	b.hi	188 <grub_reiserfs_get_key_v2_type+0x80>  // b.pmore
     12c:	cmp	x0, #0x3
     130:	b.eq	170 <grub_reiserfs_get_key_v2_type+0x68>  // b.none
     134:	cmp	x0, #0x3
     138:	b.hi	188 <grub_reiserfs_get_key_v2_type+0x80>  // b.pmore
     13c:	cmp	x0, #0x2
     140:	b.eq	178 <grub_reiserfs_get_key_v2_type+0x70>  // b.none
     144:	cmp	x0, #0x2
     148:	b.hi	188 <grub_reiserfs_get_key_v2_type+0x80>  // b.pmore
     14c:	cmp	x0, #0x0
     150:	b.eq	160 <grub_reiserfs_get_key_v2_type+0x58>  // b.none
     154:	cmp	x0, #0x1
     158:	b.eq	180 <grub_reiserfs_get_key_v2_type+0x78>  // b.none
     15c:	b	188 <grub_reiserfs_get_key_v2_type+0x80>
     160:	mov	w0, #0x0                   	// #0
     164:	b	18c <grub_reiserfs_get_key_v2_type+0x84>
     168:	mov	w0, #0x4                   	// #4
     16c:	b	18c <grub_reiserfs_get_key_v2_type+0x84>
     170:	mov	w0, #0x1                   	// #1
     174:	b	18c <grub_reiserfs_get_key_v2_type+0x84>
     178:	mov	w0, #0x2                   	// #2
     17c:	b	18c <grub_reiserfs_get_key_v2_type+0x84>
     180:	mov	w0, #0x3                   	// #3
     184:	b	18c <grub_reiserfs_get_key_v2_type+0x84>
     188:	mov	w0, #0x5                   	// #5
     18c:	add	sp, sp, #0x10
     190:	ret

0000000000000194 <grub_reiserfs_get_key_v1_type>:
     194:	sub	sp, sp, #0x10
     198:	str	x0, [sp, #8]
     19c:	ldr	x0, [sp, #8]
     1a0:	ldr	w0, [x0, #12]
     1a4:	cmn	w0, #0x1
     1a8:	b.eq	228 <grub_reiserfs_get_key_v1_type+0x94>  // b.none
     1ac:	cmn	w0, #0x2
     1b0:	b.eq	230 <grub_reiserfs_get_key_v1_type+0x9c>  // b.none
     1b4:	cmn	w0, #0x2
     1b8:	b.hi	238 <grub_reiserfs_get_key_v1_type+0xa4>  // b.pmore
     1bc:	mov	w1, #0x20000000            	// #536870912
     1c0:	cmp	w0, w1
     1c4:	b.eq	228 <grub_reiserfs_get_key_v1_type+0x94>  // b.none
     1c8:	mov	w1, #0x20000000            	// #536870912
     1cc:	cmp	w0, w1
     1d0:	b.hi	238 <grub_reiserfs_get_key_v1_type+0xa4>  // b.pmore
     1d4:	mov	w1, #0x10000000            	// #268435456
     1d8:	cmp	w0, w1
     1dc:	b.eq	230 <grub_reiserfs_get_key_v1_type+0x9c>  // b.none
     1e0:	mov	w1, #0x10000000            	// #268435456
     1e4:	cmp	w0, w1
     1e8:	b.hi	238 <grub_reiserfs_get_key_v1_type+0xa4>  // b.pmore
     1ec:	cmp	w0, #0x22b
     1f0:	b.eq	218 <grub_reiserfs_get_key_v1_type+0x84>  // b.none
     1f4:	cmp	w0, #0x22b
     1f8:	b.hi	238 <grub_reiserfs_get_key_v1_type+0xa4>  // b.pmore
     1fc:	cmp	w0, #0x0
     200:	b.eq	210 <grub_reiserfs_get_key_v1_type+0x7c>  // b.none
     204:	cmp	w0, #0x1f4
     208:	b.eq	220 <grub_reiserfs_get_key_v1_type+0x8c>  // b.none
     20c:	b	238 <grub_reiserfs_get_key_v1_type+0xa4>
     210:	mov	w0, #0x0                   	// #0
     214:	b	23c <grub_reiserfs_get_key_v1_type+0xa8>
     218:	mov	w0, #0x4                   	// #4
     21c:	b	23c <grub_reiserfs_get_key_v1_type+0xa8>
     220:	mov	w0, #0x1                   	// #1
     224:	b	23c <grub_reiserfs_get_key_v1_type+0xa8>
     228:	mov	w0, #0x2                   	// #2
     22c:	b	23c <grub_reiserfs_get_key_v1_type+0xa8>
     230:	mov	w0, #0x3                   	// #3
     234:	b	23c <grub_reiserfs_get_key_v1_type+0xa8>
     238:	mov	w0, #0x5                   	// #5
     23c:	add	sp, sp, #0x10
     240:	ret

0000000000000244 <grub_reiserfs_get_key_version>:
     244:	stp	x29, x30, [sp, #-32]!
     248:	mov	x29, sp
     24c:	str	x0, [sp, #24]
     250:	ldr	x0, [sp, #24]
     254:	bl	194 <grub_reiserfs_get_key_v1_type>
     258:	cmp	w0, #0x5
     25c:	b.ne	268 <grub_reiserfs_get_key_version+0x24>  // b.any
     260:	mov	w0, #0x2                   	// #2
     264:	b	26c <grub_reiserfs_get_key_version+0x28>
     268:	mov	w0, #0x1                   	// #1
     26c:	ldp	x29, x30, [sp], #32
     270:	ret

0000000000000274 <grub_reiserfs_get_key_offset>:
     274:	stp	x29, x30, [sp, #-32]!
     278:	mov	x29, sp
     27c:	str	x0, [sp, #24]
     280:	ldr	x0, [sp, #24]
     284:	bl	244 <grub_reiserfs_get_key_version>
     288:	cmp	w0, #0x1
     28c:	b.ne	2a0 <grub_reiserfs_get_key_offset+0x2c>  // b.any
     290:	ldr	x0, [sp, #24]
     294:	ldr	w0, [x0, #8]
     298:	mov	w0, w0
     29c:	b	2ac <grub_reiserfs_get_key_offset+0x38>
     2a0:	ldr	x0, [sp, #24]
     2a4:	ldr	x0, [x0, #8]
     2a8:	and	x0, x0, #0xfffffffffffffff
     2ac:	ldp	x29, x30, [sp], #32
     2b0:	ret

00000000000002b4 <grub_reiserfs_set_key_offset>:
     2b4:	stp	x29, x30, [sp, #-32]!
     2b8:	mov	x29, sp
     2bc:	str	x0, [sp, #24]
     2c0:	str	x1, [sp, #16]
     2c4:	ldr	x0, [sp, #24]
     2c8:	bl	244 <grub_reiserfs_get_key_version>
     2cc:	cmp	w0, #0x1
     2d0:	b.ne	2e8 <grub_reiserfs_set_key_offset+0x34>  // b.any
     2d4:	ldr	x0, [sp, #16]
     2d8:	mov	w1, w0
     2dc:	ldr	x0, [sp, #24]
     2e0:	str	w1, [x0, #8]
     2e4:	b	308 <grub_reiserfs_set_key_offset+0x54>
     2e8:	ldr	x0, [sp, #24]
     2ec:	ldr	x0, [x0, #8]
     2f0:	and	x1, x0, #0xf000000000000000
     2f4:	ldr	x0, [sp, #16]
     2f8:	and	x0, x0, #0xfffffffffffffff
     2fc:	orr	x1, x1, x0
     300:	ldr	x0, [sp, #24]
     304:	str	x1, [x0, #8]
     308:	nop
     30c:	ldp	x29, x30, [sp], #32
     310:	ret

0000000000000314 <grub_reiserfs_get_key_type>:
     314:	stp	x29, x30, [sp, #-32]!
     318:	mov	x29, sp
     31c:	str	x0, [sp, #24]
     320:	ldr	x0, [sp, #24]
     324:	bl	244 <grub_reiserfs_get_key_version>
     328:	cmp	w0, #0x1
     32c:	b.ne	33c <grub_reiserfs_get_key_type+0x28>  // b.any
     330:	ldr	x0, [sp, #24]
     334:	bl	194 <grub_reiserfs_get_key_v1_type>
     338:	b	344 <grub_reiserfs_get_key_type+0x30>
     33c:	ldr	x0, [sp, #24]
     340:	bl	108 <grub_reiserfs_get_key_v2_type>
     344:	ldp	x29, x30, [sp], #32
     348:	ret

000000000000034c <grub_reiserfs_set_key_type>:
     34c:	stp	x29, x30, [sp, #-48]!
     350:	mov	x29, sp
     354:	str	x0, [sp, #24]
     358:	str	w1, [sp, #20]
     35c:	str	w2, [sp, #16]
     360:	ldr	w0, [sp, #20]
     364:	cmp	w0, #0x4
     368:	b.eq	3cc <grub_reiserfs_set_key_type+0x80>  // b.none
     36c:	ldr	w0, [sp, #20]
     370:	cmp	w0, #0x4
     374:	b.hi	4c4 <grub_reiserfs_set_key_type+0x178>  // b.pmore
     378:	ldr	w0, [sp, #20]
     37c:	cmp	w0, #0x3
     380:	b.eq	42c <grub_reiserfs_set_key_type+0xe0>  // b.none
     384:	ldr	w0, [sp, #20]
     388:	cmp	w0, #0x3
     38c:	b.hi	4c4 <grub_reiserfs_set_key_type+0x178>  // b.pmore
     390:	ldr	w0, [sp, #20]
     394:	cmp	w0, #0x2
     398:	b.eq	40c <grub_reiserfs_set_key_type+0xc0>  // b.none
     39c:	ldr	w0, [sp, #20]
     3a0:	cmp	w0, #0x2
     3a4:	b.hi	4c4 <grub_reiserfs_set_key_type+0x178>  // b.pmore
     3a8:	ldr	w0, [sp, #20]
     3ac:	cmp	w0, #0x0
     3b0:	b.eq	3c4 <grub_reiserfs_set_key_type+0x78>  // b.none
     3b4:	ldr	w0, [sp, #20]
     3b8:	cmp	w0, #0x1
     3bc:	b.eq	3ec <grub_reiserfs_set_key_type+0xa0>  // b.none
     3c0:	b	4c4 <grub_reiserfs_set_key_type+0x178>
     3c4:	str	wzr, [sp, #44]
     3c8:	b	44c <grub_reiserfs_set_key_type+0x100>
     3cc:	ldr	w0, [sp, #16]
     3d0:	cmp	w0, #0x1
     3d4:	b.ne	3e0 <grub_reiserfs_set_key_type+0x94>  // b.any
     3d8:	mov	w0, #0x22b                 	// #555
     3dc:	b	3e4 <grub_reiserfs_set_key_type+0x98>
     3e0:	mov	w0, #0xf                   	// #15
     3e4:	str	w0, [sp, #44]
     3e8:	b	44c <grub_reiserfs_set_key_type+0x100>
     3ec:	ldr	w0, [sp, #16]
     3f0:	cmp	w0, #0x1
     3f4:	b.ne	400 <grub_reiserfs_set_key_type+0xb4>  // b.any
     3f8:	mov	w0, #0x1f4                 	// #500
     3fc:	b	404 <grub_reiserfs_set_key_type+0xb8>
     400:	mov	w0, #0x3                   	// #3
     404:	str	w0, [sp, #44]
     408:	b	44c <grub_reiserfs_set_key_type+0x100>
     40c:	ldr	w0, [sp, #16]
     410:	cmp	w0, #0x1
     414:	b.ne	420 <grub_reiserfs_set_key_type+0xd4>  // b.any
     418:	mov	w0, #0xffffffff            	// #-1
     41c:	b	424 <grub_reiserfs_set_key_type+0xd8>
     420:	mov	w0, #0x2                   	// #2
     424:	str	w0, [sp, #44]
     428:	b	44c <grub_reiserfs_set_key_type+0x100>
     42c:	ldr	w0, [sp, #16]
     430:	cmp	w0, #0x1
     434:	b.ne	440 <grub_reiserfs_set_key_type+0xf4>  // b.any
     438:	mov	w0, #0xfffffffe            	// #-2
     43c:	b	444 <grub_reiserfs_set_key_type+0xf8>
     440:	mov	w0, #0x1                   	// #1
     444:	str	w0, [sp, #44]
     448:	nop
     44c:	ldr	w0, [sp, #16]
     450:	cmp	w0, #0x1
     454:	b.ne	468 <grub_reiserfs_set_key_type+0x11c>  // b.any
     458:	ldr	x0, [sp, #24]
     45c:	ldr	w1, [sp, #44]
     460:	str	w1, [x0, #12]
     464:	b	488 <grub_reiserfs_set_key_type+0x13c>
     468:	ldr	x0, [sp, #24]
     46c:	ldr	x0, [x0, #8]
     470:	and	x1, x0, #0xfffffffffffffff
     474:	ldr	w0, [sp, #44]
     478:	lsl	x0, x0, #60
     47c:	orr	x1, x1, x0
     480:	ldr	x0, [sp, #24]
     484:	str	x1, [x0, #8]
     488:	ldr	x0, [sp, #24]
     48c:	bl	314 <grub_reiserfs_get_key_type>
     490:	mov	w1, w0
     494:	ldr	w0, [sp, #20]
     498:	cmp	w0, w1
     49c:	cset	w0, eq  // eq = none
     4a0:	and	w0, w0, #0xff
     4a4:	mov	w3, w0
     4a8:	mov	w2, #0x1a2                 	// #418
     4ac:	adrp	x0, 0 <grub_swap_bytes16>
     4b0:	add	x0, x0, #0x0
     4b4:	ldr	x1, [x0]
     4b8:	mov	w0, w3
     4bc:	bl	bc <real_assert>
     4c0:	b	4c8 <grub_reiserfs_set_key_type+0x17c>
     4c4:	nop
     4c8:	ldp	x29, x30, [sp], #48
     4cc:	ret
	...

00000000000004d8 <grub_reiserfs_compare_keys>:
     4d8:	stp	x29, x30, [sp, #-64]!
     4dc:	mov	x29, sp
     4e0:	str	x0, [sp, #24]
     4e4:	str	x1, [sp, #16]
     4e8:	ldr	x0, [sp, #24]
     4ec:	cmp	x0, #0x0
     4f0:	b.eq	500 <grub_reiserfs_compare_keys+0x28>  // b.none
     4f4:	ldr	x0, [sp, #16]
     4f8:	cmp	x0, #0x0
     4fc:	b.ne	508 <grub_reiserfs_compare_keys+0x30>  // b.any
     500:	mov	w0, #0xfffffffe            	// #-2
     504:	b	67c <grub_reiserfs_compare_keys+0x1a4>
     508:	ldr	x0, [sp, #24]
     50c:	ldr	w0, [x0]
     510:	str	w0, [sp, #60]
     514:	ldr	x0, [sp, #16]
     518:	ldr	w0, [x0]
     51c:	str	w0, [sp, #56]
     520:	ldr	w1, [sp, #60]
     524:	ldr	w0, [sp, #56]
     528:	cmp	w1, w0
     52c:	b.cs	538 <grub_reiserfs_compare_keys+0x60>  // b.hs, b.nlast
     530:	mov	w0, #0xffffffff            	// #-1
     534:	b	67c <grub_reiserfs_compare_keys+0x1a4>
     538:	ldr	w1, [sp, #60]
     53c:	ldr	w0, [sp, #56]
     540:	cmp	w1, w0
     544:	b.ls	550 <grub_reiserfs_compare_keys+0x78>  // b.plast
     548:	mov	w0, #0x1                   	// #1
     54c:	b	67c <grub_reiserfs_compare_keys+0x1a4>
     550:	ldr	x0, [sp, #24]
     554:	ldr	w0, [x0, #4]
     558:	str	w0, [sp, #60]
     55c:	ldr	x0, [sp, #16]
     560:	ldr	w0, [x0, #4]
     564:	str	w0, [sp, #56]
     568:	ldr	w1, [sp, #60]
     56c:	ldr	w0, [sp, #56]
     570:	cmp	w1, w0
     574:	b.cs	580 <grub_reiserfs_compare_keys+0xa8>  // b.hs, b.nlast
     578:	mov	w0, #0xffffffff            	// #-1
     57c:	b	67c <grub_reiserfs_compare_keys+0x1a4>
     580:	ldr	w1, [sp, #60]
     584:	ldr	w0, [sp, #56]
     588:	cmp	w1, w0
     58c:	b.ls	598 <grub_reiserfs_compare_keys+0xc0>  // b.plast
     590:	mov	w0, #0x1                   	// #1
     594:	b	67c <grub_reiserfs_compare_keys+0x1a4>
     598:	ldr	x0, [sp, #24]
     59c:	bl	274 <grub_reiserfs_get_key_offset>
     5a0:	str	x0, [sp, #48]
     5a4:	ldr	x0, [sp, #16]
     5a8:	bl	274 <grub_reiserfs_get_key_offset>
     5ac:	str	x0, [sp, #40]
     5b0:	ldr	x1, [sp, #48]
     5b4:	ldr	x0, [sp, #40]
     5b8:	cmp	x1, x0
     5bc:	b.cs	5c8 <grub_reiserfs_compare_keys+0xf0>  // b.hs, b.nlast
     5c0:	mov	w0, #0xffffffff            	// #-1
     5c4:	b	67c <grub_reiserfs_compare_keys+0x1a4>
     5c8:	ldr	x1, [sp, #48]
     5cc:	ldr	x0, [sp, #40]
     5d0:	cmp	x1, x0
     5d4:	b.ls	5e0 <grub_reiserfs_compare_keys+0x108>  // b.plast
     5d8:	mov	w0, #0x1                   	// #1
     5dc:	b	67c <grub_reiserfs_compare_keys+0x1a4>
     5e0:	ldr	x0, [sp, #24]
     5e4:	bl	314 <grub_reiserfs_get_key_type>
     5e8:	str	w0, [sp, #36]
     5ec:	ldr	x0, [sp, #16]
     5f0:	bl	314 <grub_reiserfs_get_key_type>
     5f4:	str	w0, [sp, #32]
     5f8:	ldr	w0, [sp, #36]
     5fc:	cmp	w0, #0x4
     600:	b.ne	61c <grub_reiserfs_compare_keys+0x144>  // b.any
     604:	ldr	w0, [sp, #32]
     608:	cmp	w0, #0x2
     60c:	b.eq	640 <grub_reiserfs_compare_keys+0x168>  // b.none
     610:	ldr	w0, [sp, #32]
     614:	cmp	w0, #0x3
     618:	b.eq	640 <grub_reiserfs_compare_keys+0x168>  // b.none
     61c:	ldr	w0, [sp, #32]
     620:	cmp	w0, #0x4
     624:	b.ne	648 <grub_reiserfs_compare_keys+0x170>  // b.any
     628:	ldr	w0, [sp, #36]
     62c:	cmp	w0, #0x2
     630:	b.eq	640 <grub_reiserfs_compare_keys+0x168>  // b.none
     634:	ldr	w0, [sp, #36]
     638:	cmp	w0, #0x3
     63c:	b.ne	648 <grub_reiserfs_compare_keys+0x170>  // b.any
     640:	mov	w0, #0x0                   	// #0
     644:	b	67c <grub_reiserfs_compare_keys+0x1a4>
     648:	ldr	w1, [sp, #36]
     64c:	ldr	w0, [sp, #32]
     650:	cmp	w1, w0
     654:	b.cs	660 <grub_reiserfs_compare_keys+0x188>  // b.hs, b.nlast
     658:	mov	w0, #0xffffffff            	// #-1
     65c:	b	67c <grub_reiserfs_compare_keys+0x1a4>
     660:	ldr	w1, [sp, #36]
     664:	ldr	w0, [sp, #32]
     668:	cmp	w1, w0
     66c:	b.ls	678 <grub_reiserfs_compare_keys+0x1a0>  // b.plast
     670:	mov	w0, #0x1                   	// #1
     674:	b	67c <grub_reiserfs_compare_keys+0x1a4>
     678:	mov	w0, #0x0                   	// #0
     67c:	ldp	x29, x30, [sp], #64
     680:	ret

0000000000000684 <grub_reiserfs_get_item>:
     684:	stp	x29, x30, [sp, #-128]!
     688:	mov	x29, sp
     68c:	str	x0, [sp, #40]
     690:	str	x1, [sp, #32]
     694:	str	x2, [sp, #24]
     698:	str	w3, [sp, #20]
     69c:	str	xzr, [sp, #88]
     6a0:	str	xzr, [sp, #112]
     6a4:	mov	w0, #0xffffffff            	// #-1
     6a8:	strh	w0, [sp, #108]
     6ac:	str	xzr, [sp, #96]
     6b0:	ldr	x0, [sp, #40]
     6b4:	ldrh	w0, [x0, #44]
     6b8:	strh	w0, [sp, #86]
     6bc:	ldr	x0, [sp, #40]
     6c0:	ldr	w0, [x0, #8]
     6c4:	str	w0, [sp, #124]
     6c8:	ldrh	w0, [sp, #86]
     6cc:	bl	0 <grub_malloc>
     6d0:	str	x0, [sp, #88]
     6d4:	ldr	x0, [sp, #88]
     6d8:	cmp	x0, #0x0
     6dc:	b.eq	bac <grub_reiserfs_get_item+0x528>  // b.none
     6e0:	ldr	x0, [sp, #24]
     6e4:	str	xzr, [x0, #16]
     6e8:	ldr	x0, [sp, #40]
     6ec:	ldr	x5, [x0, #120]
     6f0:	ldrh	w0, [sp, #86]
     6f4:	lsr	w0, w0, #9
     6f8:	and	w0, w0, #0xffff
     6fc:	mov	w1, w0
     700:	ldr	w0, [sp, #124]
     704:	mul	w0, w1, w0
     708:	mov	w6, w0
     70c:	ldr	w1, [sp, #124]
     710:	ldrh	w0, [sp, #86]
     714:	mul	x0, x1, x0
     718:	and	x0, x0, #0x1ff
     71c:	ldrh	w1, [sp, #86]
     720:	ldr	x4, [sp, #88]
     724:	mov	x3, x1
     728:	mov	x2, x0
     72c:	mov	x1, x6
     730:	mov	x0, x5
     734:	bl	0 <grub_disk_read>
     738:	adrp	x0, 0 <grub_swap_bytes16>
     73c:	add	x0, x0, #0x0
     740:	ldr	x0, [x0]
     744:	ldr	w0, [x0]
     748:	cmp	w0, #0x0
     74c:	b.ne	bb4 <grub_reiserfs_get_item+0x530>  // b.any
     750:	ldr	x0, [sp, #88]
     754:	ldrh	w0, [x0]
     758:	strh	w0, [sp, #84]
     75c:	ldrh	w0, [sp, #84]
     760:	mov	w4, w0
     764:	adrp	x0, 0 <grub_swap_bytes16>
     768:	add	x0, x0, #0x0
     76c:	ldr	x3, [x0]
     770:	adrp	x0, 0 <grub_swap_bytes16>
     774:	add	x0, x0, #0x0
     778:	ldr	x2, [x0]
     77c:	mov	w1, #0x211                 	// #529
     780:	adrp	x0, 0 <grub_swap_bytes16>
     784:	add	x0, x0, #0x0
     788:	ldr	x0, [x0]
     78c:	bl	0 <grub_real_dprintf>
     790:	ldrh	w1, [sp, #84]
     794:	ldrh	w0, [sp, #108]
     798:	cmp	w1, w0
     79c:	b.cc	7e4 <grub_reiserfs_get_item+0x160>  // b.lo, b.ul, b.last
     7a0:	adrp	x0, 0 <grub_swap_bytes16>
     7a4:	add	x0, x0, #0x0
     7a8:	ldr	x3, [x0]
     7ac:	adrp	x0, 0 <grub_swap_bytes16>
     7b0:	add	x0, x0, #0x0
     7b4:	ldr	x2, [x0]
     7b8:	mov	w1, #0x214                 	// #532
     7bc:	adrp	x0, 0 <grub_swap_bytes16>
     7c0:	add	x0, x0, #0x0
     7c4:	ldr	x0, [x0]
     7c8:	bl	0 <grub_real_dprintf>
     7cc:	adrp	x0, 0 <grub_swap_bytes16>
     7d0:	add	x0, x0, #0x0
     7d4:	ldr	x1, [x0]
     7d8:	mov	w0, #0x9                   	// #9
     7dc:	bl	0 <grub_error>
     7e0:	b	bb8 <grub_reiserfs_get_item+0x534>
     7e4:	ldrh	w0, [sp, #84]
     7e8:	strh	w0, [sp, #108]
     7ec:	ldr	x0, [sp, #88]
     7f0:	ldrh	w0, [x0, #2]
     7f4:	strh	w0, [sp, #82]
     7f8:	ldrh	w0, [sp, #82]
     7fc:	mov	w4, w0
     800:	adrp	x0, 0 <grub_swap_bytes16>
     804:	add	x0, x0, #0x0
     808:	ldr	x3, [x0]
     80c:	adrp	x0, 0 <grub_swap_bytes16>
     810:	add	x0, x0, #0x0
     814:	ldr	x2, [x0]
     818:	mov	w1, #0x21a                 	// #538
     81c:	adrp	x0, 0 <grub_swap_bytes16>
     820:	add	x0, x0, #0x0
     824:	ldr	x0, [x0]
     828:	bl	0 <grub_real_dprintf>
     82c:	ldrh	w0, [sp, #84]
     830:	cmp	w0, #0x1
     834:	b.ls	934 <grub_reiserfs_get_item+0x2b0>  // b.plast
     838:	ldr	x0, [sp, #88]
     83c:	add	x0, x0, #0x18
     840:	str	x0, [sp, #64]
     844:	ldrh	w0, [sp, #82]
     848:	lsl	x0, x0, #4
     84c:	ldr	x1, [sp, #64]
     850:	add	x0, x1, x0
     854:	str	x0, [sp, #56]
     858:	strh	wzr, [sp, #110]
     85c:	b	86c <grub_reiserfs_get_item+0x1e8>
     860:	ldrh	w0, [sp, #110]
     864:	add	w0, w0, #0x1
     868:	strh	w0, [sp, #110]
     86c:	ldrh	w1, [sp, #110]
     870:	ldrh	w0, [sp, #82]
     874:	cmp	w1, w0
     878:	b.cs	8a0 <grub_reiserfs_get_item+0x21c>  // b.hs, b.nlast
     87c:	ldrh	w0, [sp, #110]
     880:	lsl	x0, x0, #4
     884:	ldr	x1, [sp, #64]
     888:	add	x0, x1, x0
     88c:	mov	x1, x0
     890:	ldr	x0, [sp, #32]
     894:	bl	4d8 <grub_reiserfs_compare_keys>
     898:	cmp	w0, #0x0
     89c:	b.ge	860 <grub_reiserfs_get_item+0x1dc>  // b.tcont
     8a0:	ldrh	w0, [sp, #110]
     8a4:	lsl	x0, x0, #3
     8a8:	ldr	x1, [sp, #56]
     8ac:	add	x0, x1, x0
     8b0:	ldr	w0, [x0]
     8b4:	str	w0, [sp, #124]
     8b8:	ldrh	w1, [sp, #110]
     8bc:	ldrh	w0, [sp, #82]
     8c0:	cmp	w1, w0
     8c4:	b.cs	abc <grub_reiserfs_get_item+0x438>  // b.hs, b.nlast
     8c8:	ldr	x0, [sp, #32]
     8cc:	ldr	w1, [x0]
     8d0:	ldrh	w0, [sp, #110]
     8d4:	lsl	x0, x0, #4
     8d8:	ldr	x2, [sp, #64]
     8dc:	add	x0, x2, x0
     8e0:	ldr	w0, [x0]
     8e4:	cmp	w1, w0
     8e8:	b.ne	abc <grub_reiserfs_get_item+0x438>  // b.any
     8ec:	ldr	x0, [sp, #32]
     8f0:	ldr	w1, [x0, #4]
     8f4:	ldrh	w0, [sp, #110]
     8f8:	lsl	x0, x0, #4
     8fc:	ldr	x2, [sp, #64]
     900:	add	x0, x2, x0
     904:	ldr	w0, [x0, #4]
     908:	cmp	w1, w0
     90c:	b.ne	abc <grub_reiserfs_get_item+0x438>  // b.any
     910:	ldrh	w0, [sp, #110]
     914:	lsl	x0, x0, #4
     918:	ldr	x1, [sp, #64]
     91c:	add	x0, x1, x0
     920:	bl	274 <grub_reiserfs_get_key_offset>
     924:	mov	x1, x0
     928:	ldr	x0, [sp, #24]
     92c:	str	x1, [x0, #16]
     930:	b	abc <grub_reiserfs_get_item+0x438>
     934:	ldr	x0, [sp, #88]
     938:	add	x0, x0, #0x18
     93c:	str	x0, [sp, #96]
     940:	strh	wzr, [sp, #110]
     944:	b	a34 <grub_reiserfs_get_item+0x3b0>
     948:	ldrh	w1, [sp, #110]
     94c:	mov	x0, x1
     950:	lsl	x0, x0, #1
     954:	add	x0, x0, x1
     958:	lsl	x0, x0, #3
     95c:	mov	x1, x0
     960:	ldr	x0, [sp, #96]
     964:	add	x0, x0, x1
     968:	mov	x1, x0
     96c:	ldr	x0, [sp, #32]
     970:	bl	4d8 <grub_reiserfs_compare_keys>
     974:	str	w0, [sp, #76]
     978:	ldr	w0, [sp, #76]
     97c:	cmp	w0, #0x0
     980:	b.ne	9ac <grub_reiserfs_get_item+0x328>  // b.any
     984:	ldrh	w1, [sp, #110]
     988:	mov	x0, x1
     98c:	lsl	x0, x0, #1
     990:	add	x0, x0, x1
     994:	lsl	x0, x0, #3
     998:	mov	x1, x0
     99c:	ldr	x0, [sp, #96]
     9a0:	add	x0, x0, x1
     9a4:	str	x0, [sp, #112]
     9a8:	b	a4c <grub_reiserfs_get_item+0x3c8>
     9ac:	ldr	w0, [sp, #76]
     9b0:	cmp	w0, #0x0
     9b4:	b.ge	9c4 <grub_reiserfs_get_item+0x340>  // b.tcont
     9b8:	ldr	w0, [sp, #20]
     9bc:	cmp	w0, #0x0
     9c0:	b.ne	a48 <grub_reiserfs_get_item+0x3c4>  // b.any
     9c4:	ldr	w0, [sp, #76]
     9c8:	cmp	w0, #0x0
     9cc:	b.ge	a28 <grub_reiserfs_get_item+0x3a4>  // b.tcont
     9d0:	ldrh	w0, [sp, #110]
     9d4:	cmp	w0, #0x0
     9d8:	b.ne	9f4 <grub_reiserfs_get_item+0x370>  // b.any
     9dc:	adrp	x0, 0 <grub_swap_bytes16>
     9e0:	add	x0, x0, #0x0
     9e4:	ldr	x1, [x0]
     9e8:	mov	w0, #0xe                   	// #14
     9ec:	bl	0 <grub_error>
     9f0:	b	bb8 <grub_reiserfs_get_item+0x534>
     9f4:	ldrh	w0, [sp, #110]
     9f8:	sub	w0, w0, #0x1
     9fc:	strh	w0, [sp, #110]
     a00:	ldrh	w1, [sp, #110]
     a04:	mov	x0, x1
     a08:	lsl	x0, x0, #1
     a0c:	add	x0, x0, x1
     a10:	lsl	x0, x0, #3
     a14:	mov	x1, x0
     a18:	ldr	x0, [sp, #96]
     a1c:	add	x0, x0, x1
     a20:	str	x0, [sp, #112]
     a24:	b	a4c <grub_reiserfs_get_item+0x3c8>
     a28:	ldrh	w0, [sp, #110]
     a2c:	add	w0, w0, #0x1
     a30:	strh	w0, [sp, #110]
     a34:	ldrh	w1, [sp, #110]
     a38:	ldrh	w0, [sp, #82]
     a3c:	cmp	w1, w0
     a40:	b.cc	948 <grub_reiserfs_get_item+0x2c4>  // b.lo, b.ul, b.last
     a44:	b	a4c <grub_reiserfs_get_item+0x3c8>
     a48:	nop
     a4c:	ldr	w0, [sp, #20]
     a50:	cmp	w0, #0x0
     a54:	b.ne	abc <grub_reiserfs_get_item+0x438>  // b.any
     a58:	ldrh	w1, [sp, #110]
     a5c:	ldrh	w0, [sp, #82]
     a60:	cmp	w1, w0
     a64:	b.ne	abc <grub_reiserfs_get_item+0x438>  // b.any
     a68:	ldrh	w0, [sp, #110]
     a6c:	cmp	w0, #0x0
     a70:	b.ne	a8c <grub_reiserfs_get_item+0x408>  // b.any
     a74:	adrp	x0, 0 <grub_swap_bytes16>
     a78:	add	x0, x0, #0x0
     a7c:	ldr	x1, [x0]
     a80:	mov	w0, #0xe                   	// #14
     a84:	bl	0 <grub_error>
     a88:	b	bb8 <grub_reiserfs_get_item+0x534>
     a8c:	ldrh	w0, [sp, #110]
     a90:	sub	w0, w0, #0x1
     a94:	strh	w0, [sp, #110]
     a98:	ldrh	w1, [sp, #110]
     a9c:	mov	x0, x1
     aa0:	lsl	x0, x0, #1
     aa4:	add	x0, x0, x1
     aa8:	lsl	x0, x0, #3
     aac:	mov	x1, x0
     ab0:	ldr	x0, [sp, #96]
     ab4:	add	x0, x0, x1
     ab8:	str	x0, [sp, #112]
     abc:	ldrh	w0, [sp, #84]
     ac0:	cmp	w0, #0x1
     ac4:	b.hi	6e8 <grub_reiserfs_get_item+0x64>  // b.pmore
     ac8:	ldr	x0, [sp, #24]
     acc:	ldr	x1, [sp, #40]
     ad0:	str	x1, [x0]
     ad4:	ldr	x0, [sp, #112]
     ad8:	cmp	x0, #0x0
     adc:	b.ne	b00 <grub_reiserfs_get_item+0x47c>  // b.any
     ae0:	ldr	x0, [sp, #24]
     ae4:	str	wzr, [x0, #8]
     ae8:	ldr	x0, [sp, #24]
     aec:	strh	wzr, [x0, #12]
     af0:	ldr	x0, [sp, #24]
     af4:	mov	w1, #0x5                   	// #5
     af8:	str	w1, [x0, #40]
     afc:	b	b64 <grub_reiserfs_get_item+0x4e0>
     b00:	ldr	x0, [sp, #24]
     b04:	ldr	w1, [sp, #124]
     b08:	str	w1, [x0, #8]
     b0c:	ldr	x0, [sp, #24]
     b10:	ldrh	w1, [sp, #110]
     b14:	strh	w1, [x0, #12]
     b18:	ldr	x0, [sp, #112]
     b1c:	bl	314 <grub_reiserfs_get_key_type>
     b20:	mov	w1, w0
     b24:	ldr	x0, [sp, #24]
     b28:	str	w1, [x0, #40]
     b2c:	ldr	x0, [sp, #24]
     b30:	add	x3, x0, #0x2c
     b34:	ldrh	w1, [sp, #110]
     b38:	mov	x0, x1
     b3c:	lsl	x0, x0, #1
     b40:	add	x0, x0, x1
     b44:	lsl	x0, x0, #3
     b48:	mov	x1, x0
     b4c:	ldr	x0, [sp, #96]
     b50:	add	x0, x0, x1
     b54:	mov	x2, #0x18                  	// #24
     b58:	mov	x1, x0
     b5c:	mov	x0, x3
     b60:	bl	90 <grub_memcpy>
     b64:	adrp	x0, 0 <grub_swap_bytes16>
     b68:	add	x0, x0, #0x0
     b6c:	ldr	x0, [x0]
     b70:	ldr	w0, [x0]
     b74:	cmp	w0, #0x0
     b78:	cset	w0, eq  // eq = none
     b7c:	and	w0, w0, #0xff
     b80:	mov	w3, w0
     b84:	mov	w2, #0x28d                 	// #653
     b88:	adrp	x0, 0 <grub_swap_bytes16>
     b8c:	add	x0, x0, #0x0
     b90:	ldr	x1, [x0]
     b94:	mov	w0, w3
     b98:	bl	bc <real_assert>
     b9c:	ldr	x0, [sp, #88]
     ba0:	bl	0 <grub_free>
     ba4:	mov	w0, #0x0                   	// #0
     ba8:	b	c40 <grub_reiserfs_get_item+0x5bc>
     bac:	nop
     bb0:	b	bb8 <grub_reiserfs_get_item+0x534>
     bb4:	nop
     bb8:	adrp	x0, 0 <grub_swap_bytes16>
     bbc:	add	x0, x0, #0x0
     bc0:	ldr	x0, [x0]
     bc4:	ldr	w0, [x0]
     bc8:	cmp	w0, #0x0
     bcc:	cset	w0, ne  // ne = any
     bd0:	and	w0, w0, #0xff
     bd4:	mov	w3, w0
     bd8:	mov	w2, #0x292                 	// #658
     bdc:	adrp	x0, 0 <grub_swap_bytes16>
     be0:	add	x0, x0, #0x0
     be4:	ldr	x1, [x0]
     be8:	mov	w0, w3
     bec:	bl	bc <real_assert>
     bf0:	ldr	x0, [sp, #88]
     bf4:	bl	0 <grub_free>
     bf8:	adrp	x0, 0 <grub_swap_bytes16>
     bfc:	add	x0, x0, #0x0
     c00:	ldr	x0, [x0]
     c04:	ldr	w0, [x0]
     c08:	cmp	w0, #0x0
     c0c:	cset	w0, ne  // ne = any
     c10:	and	w0, w0, #0xff
     c14:	mov	w3, w0
     c18:	mov	w2, #0x294                 	// #660
     c1c:	adrp	x0, 0 <grub_swap_bytes16>
     c20:	add	x0, x0, #0x0
     c24:	ldr	x1, [x0]
     c28:	mov	w0, w3
     c2c:	bl	bc <real_assert>
     c30:	adrp	x0, 0 <grub_swap_bytes16>
     c34:	add	x0, x0, #0x0
     c38:	ldr	x0, [x0]
     c3c:	ldr	w0, [x0]
     c40:	ldp	x29, x30, [sp], #128
     c44:	ret
	...

0000000000000c88 <grub_reiserfs_read_symlink>:
     c88:	stp	x29, x30, [sp, #-64]!
     c8c:	mov	x29, sp
     c90:	str	x0, [sp, #24]
     c94:	str	xzr, [sp, #56]
     c98:	ldr	x0, [sp, #24]
     c9c:	ldr	x0, [x0, #32]
     ca0:	str	x0, [sp, #48]
     ca4:	ldr	x0, [sp, #48]
     ca8:	add	x0, x0, #0x1
     cac:	bl	0 <grub_malloc>
     cb0:	str	x0, [sp, #56]
     cb4:	ldr	x0, [sp, #56]
     cb8:	cmp	x0, #0x0
     cbc:	b.ne	cc8 <grub_reiserfs_read_symlink+0x40>  // b.any
     cc0:	mov	x0, #0x0                   	// #0
     cc4:	b	d18 <grub_reiserfs_read_symlink+0x90>
     cc8:	mov	x5, #0x0                   	// #0
     ccc:	mov	x4, #0x0                   	// #0
     cd0:	ldr	x3, [sp, #48]
     cd4:	ldr	x2, [sp, #56]
     cd8:	mov	x1, #0x0                   	// #0
     cdc:	ldr	x0, [sp, #24]
     ce0:	bl	18a8 <grub_reiserfs_read_real>
     ce4:	str	x0, [sp, #40]
     ce8:	ldr	x0, [sp, #40]
     cec:	cmp	x0, #0x0
     cf0:	b.ge	d04 <grub_reiserfs_read_symlink+0x7c>  // b.tcont
     cf4:	ldr	x0, [sp, #56]
     cf8:	bl	0 <grub_free>
     cfc:	mov	x0, #0x0                   	// #0
     d00:	b	d18 <grub_reiserfs_read_symlink+0x90>
     d04:	ldr	x0, [sp, #40]
     d08:	ldr	x1, [sp, #56]
     d0c:	add	x0, x1, x0
     d10:	strb	wzr, [x0]
     d14:	ldr	x0, [sp, #56]
     d18:	ldp	x29, x30, [sp], #64
     d1c:	ret

0000000000000d20 <grub_reiserfs_mount>:
     d20:	stp	x29, x30, [sp, #-48]!
     d24:	mov	x29, sp
     d28:	str	x0, [sp, #24]
     d2c:	str	xzr, [sp, #40]
     d30:	mov	x0, #0x80                  	// #128
     d34:	bl	0 <grub_malloc>
     d38:	str	x0, [sp, #40]
     d3c:	ldr	x0, [sp, #40]
     d40:	cmp	x0, #0x0
     d44:	b.eq	dd0 <grub_reiserfs_mount+0xb0>  // b.none
     d48:	ldr	x0, [sp, #40]
     d4c:	mov	x4, x0
     d50:	mov	x3, #0x74                  	// #116
     d54:	mov	x2, #0x0                   	// #0
     d58:	mov	x1, #0x80                  	// #128
     d5c:	ldr	x0, [sp, #24]
     d60:	bl	0 <grub_disk_read>
     d64:	adrp	x0, 0 <grub_swap_bytes16>
     d68:	add	x0, x0, #0x0
     d6c:	ldr	x0, [x0]
     d70:	ldr	w0, [x0]
     d74:	cmp	w0, #0x0
     d78:	b.ne	dd8 <grub_reiserfs_mount+0xb8>  // b.any
     d7c:	ldr	x0, [sp, #40]
     d80:	add	x3, x0, #0x34
     d84:	mov	x2, #0x6                   	// #6
     d88:	adrp	x0, 0 <grub_swap_bytes16>
     d8c:	add	x0, x0, #0x0
     d90:	ldr	x1, [x0]
     d94:	mov	x0, x3
     d98:	bl	0 <grub_memcmp>
     d9c:	cmp	w0, #0x0
     da0:	b.eq	dbc <grub_reiserfs_mount+0x9c>  // b.none
     da4:	adrp	x0, 0 <grub_swap_bytes16>
     da8:	add	x0, x0, #0x0
     dac:	ldr	x1, [x0]
     db0:	mov	w0, #0x9                   	// #9
     db4:	bl	0 <grub_error>
     db8:	b	ddc <grub_reiserfs_mount+0xbc>
     dbc:	ldr	x0, [sp, #40]
     dc0:	ldr	x1, [sp, #24]
     dc4:	str	x1, [x0, #120]
     dc8:	ldr	x0, [sp, #40]
     dcc:	b	e14 <grub_reiserfs_mount+0xf4>
     dd0:	nop
     dd4:	b	ddc <grub_reiserfs_mount+0xbc>
     dd8:	nop
     ddc:	adrp	x0, 0 <grub_swap_bytes16>
     de0:	add	x0, x0, #0x0
     de4:	ldr	x0, [x0]
     de8:	ldr	w0, [x0]
     dec:	cmp	w0, #0xb
     df0:	b.ne	e08 <grub_reiserfs_mount+0xe8>  // b.any
     df4:	adrp	x0, 0 <grub_swap_bytes16>
     df8:	add	x0, x0, #0x0
     dfc:	ldr	x1, [x0]
     e00:	mov	w0, #0x9                   	// #9
     e04:	bl	0 <grub_error>
     e08:	ldr	x0, [sp, #40]
     e0c:	bl	0 <grub_free>
     e10:	mov	x0, #0x0                   	// #0
     e14:	ldp	x29, x30, [sp], #48
     e18:	ret
     e1c:	nop
	...

0000000000000e38 <grub_reiserfs_iterate_dir>:
     e38:	stp	x29, x30, [sp, #-272]!
     e3c:	mov	x29, sp
     e40:	str	x0, [sp, #40]
     e44:	str	x1, [sp, #32]
     e48:	str	x2, [sp, #24]
     e4c:	ldr	x0, [sp, #40]
     e50:	ldr	x0, [x0]
     e54:	str	x0, [sp, #216]
     e58:	str	xzr, [sp, #264]
     e5c:	ldr	x0, [sp, #40]
     e60:	ldr	x0, [x0, #16]
     e64:	str	x0, [sp, #248]
     e68:	str	wzr, [sp, #244]
     e6c:	ldr	x0, [sp, #40]
     e70:	ldr	w0, [x0, #40]
     e74:	cmp	w0, #0x1
     e78:	b.eq	e94 <grub_reiserfs_iterate_dir+0x5c>  // b.none
     e7c:	adrp	x0, 0 <grub_swap_bytes16>
     e80:	add	x0, x0, #0x0
     e84:	ldr	x1, [x0]
     e88:	mov	w0, #0x4                   	// #4
     e8c:	bl	0 <grub_error>
     e90:	b	15b0 <grub_reiserfs_iterate_dir+0x778>
     e94:	ldr	x0, [sp, #216]
     e98:	ldrh	w0, [x0, #44]
     e9c:	strh	w0, [sp, #214]
     ea0:	ldrh	w0, [sp, #214]
     ea4:	add	w0, w0, #0x1
     ea8:	sxtw	x0, w0
     eac:	bl	0 <grub_malloc>
     eb0:	str	x0, [sp, #264]
     eb4:	ldr	x0, [sp, #264]
     eb8:	cmp	x0, #0x0
     ebc:	b.eq	1594 <grub_reiserfs_iterate_dir+0x75c>  // b.none
     ec0:	ldr	x0, [sp, #40]
     ec4:	ldr	w0, [x0, #8]
     ec8:	str	w0, [sp, #256]
     ecc:	ldr	x0, [sp, #40]
     ed0:	ldrh	w0, [x0, #12]
     ed4:	strh	w0, [sp, #262]
     ed8:	adrp	x0, 0 <grub_swap_bytes16>
     edc:	add	x0, x0, #0x0
     ee0:	ldr	x3, [x0]
     ee4:	adrp	x0, 0 <grub_swap_bytes16>
     ee8:	add	x0, x0, #0x0
     eec:	ldr	x2, [x0]
     ef0:	mov	w1, #0x2e5                 	// #741
     ef4:	adrp	x0, 0 <grub_swap_bytes16>
     ef8:	add	x0, x0, #0x0
     efc:	ldr	x0, [x0]
     f00:	bl	0 <grub_real_dprintf>
     f04:	ldr	x0, [sp, #216]
     f08:	ldr	x5, [x0, #120]
     f0c:	ldrh	w0, [sp, #214]
     f10:	lsr	w0, w0, #9
     f14:	and	w0, w0, #0xffff
     f18:	mov	w1, w0
     f1c:	ldr	w0, [sp, #256]
     f20:	mul	w0, w1, w0
     f24:	mov	w6, w0
     f28:	ldr	w1, [sp, #256]
     f2c:	ldrh	w0, [sp, #214]
     f30:	mul	x0, x1, x0
     f34:	and	x0, x0, #0x1ff
     f38:	ldrh	w1, [sp, #214]
     f3c:	ldr	x4, [sp, #264]
     f40:	mov	x3, x1
     f44:	mov	x2, x0
     f48:	mov	x1, x6
     f4c:	mov	x0, x5
     f50:	bl	0 <grub_disk_read>
     f54:	adrp	x0, 0 <grub_swap_bytes16>
     f58:	add	x0, x0, #0x0
     f5c:	ldr	x0, [x0]
     f60:	ldr	w0, [x0]
     f64:	cmp	w0, #0x0
     f68:	b.ne	159c <grub_reiserfs_iterate_dir+0x764>  // b.any
     f6c:	ldrh	w0, [sp, #214]
     f70:	ldr	x1, [sp, #264]
     f74:	add	x0, x1, x0
     f78:	strb	wzr, [x0]
     f7c:	ldr	x0, [sp, #264]
     f80:	add	x0, x0, #0x18
     f84:	str	x0, [sp, #200]
     f88:	ldrh	w1, [sp, #262]
     f8c:	mov	x0, x1
     f90:	lsl	x0, x0, #1
     f94:	add	x0, x0, x1
     f98:	lsl	x0, x0, #3
     f9c:	mov	x1, x0
     fa0:	ldr	x0, [sp, #200]
     fa4:	add	x0, x0, x1
     fa8:	ldrh	w0, [x0, #20]
     fac:	and	x0, x0, #0xffff
     fb0:	ldr	x1, [sp, #264]
     fb4:	add	x0, x1, x0
     fb8:	str	x0, [sp, #192]
     fbc:	ldrh	w1, [sp, #262]
     fc0:	mov	x0, x1
     fc4:	lsl	x0, x0, #1
     fc8:	add	x0, x0, x1
     fcc:	lsl	x0, x0, #3
     fd0:	mov	x1, x0
     fd4:	ldr	x0, [sp, #200]
     fd8:	add	x0, x0, x1
     fdc:	ldrh	w0, [x0, #16]
     fe0:	strh	w0, [sp, #190]
     fe4:	strh	wzr, [sp, #242]
     fe8:	b	149c <grub_reiserfs_iterate_dir+0x664>
     fec:	ldrh	w0, [sp, #242]
     ff0:	lsl	x0, x0, #4
     ff4:	ldr	x1, [sp, #192]
     ff8:	add	x0, x1, x0
     ffc:	str	x0, [sp, #176]
    1000:	ldr	x0, [sp, #176]
    1004:	ldrh	w0, [x0, #14]
    1008:	strh	w0, [sp, #174]
    100c:	str	xzr, [sp, #224]
    1010:	ldrh	w0, [sp, #174]
    1014:	and	w0, w0, #0x4
    1018:	cmp	w0, #0x0
    101c:	b.eq	148c <grub_reiserfs_iterate_dir+0x654>  // b.none
    1020:	ldr	x0, [sp, #176]
    1024:	ldrh	w0, [x0, #12]
    1028:	and	x0, x0, #0xffff
    102c:	ldr	x1, [sp, #192]
    1030:	add	x0, x1, x0
    1034:	str	x0, [sp, #160]
    1038:	ldrh	w0, [sp, #242]
    103c:	cmp	w0, #0x0
    1040:	b.ne	10a8 <grub_reiserfs_iterate_dir+0x270>  // b.any
    1044:	ldrh	w1, [sp, #262]
    1048:	mov	x0, x1
    104c:	lsl	x0, x0, #1
    1050:	add	x0, x0, x1
    1054:	lsl	x0, x0, #3
    1058:	mov	x1, x0
    105c:	ldr	x0, [sp, #200]
    1060:	add	x0, x0, x1
    1064:	ldrh	w0, [x0, #20]
    1068:	and	x2, x0, #0xffff
    106c:	ldrh	w1, [sp, #262]
    1070:	mov	x0, x1
    1074:	lsl	x0, x0, #1
    1078:	add	x0, x0, x1
    107c:	lsl	x0, x0, #3
    1080:	mov	x1, x0
    1084:	ldr	x0, [sp, #200]
    1088:	add	x0, x0, x1
    108c:	ldrh	w0, [x0, #18]
    1090:	and	x0, x0, #0xffff
    1094:	add	x0, x2, x0
    1098:	ldr	x1, [sp, #264]
    109c:	add	x0, x1, x0
    10a0:	str	x0, [sp, #224]
    10a4:	b	10d0 <grub_reiserfs_iterate_dir+0x298>
    10a8:	ldrh	w0, [sp, #242]
    10ac:	lsl	x0, x0, #4
    10b0:	sub	x0, x0, #0x10
    10b4:	ldr	x1, [sp, #192]
    10b8:	add	x0, x1, x0
    10bc:	ldrh	w0, [x0, #12]
    10c0:	and	x0, x0, #0xffff
    10c4:	ldr	x1, [sp, #192]
    10c8:	add	x0, x1, x0
    10cc:	str	x0, [sp, #224]
    10d0:	ldr	x1, [sp, #224]
    10d4:	ldr	x0, [sp, #160]
    10d8:	cmp	x1, x0
    10dc:	b.cc	10f8 <grub_reiserfs_iterate_dir+0x2c0>  // b.lo, b.ul, b.last
    10e0:	ldrh	w0, [sp, #214]
    10e4:	ldr	x1, [sp, #264]
    10e8:	add	x0, x1, x0
    10ec:	ldr	x1, [sp, #224]
    10f0:	cmp	x1, x0
    10f4:	b.ls	1108 <grub_reiserfs_iterate_dir+0x2d0>  // b.plast
    10f8:	ldrh	w0, [sp, #214]
    10fc:	ldr	x1, [sp, #264]
    1100:	add	x0, x1, x0
    1104:	str	x0, [sp, #224]
    1108:	ldr	x0, [sp, #176]
    110c:	ldr	w0, [x0, #4]
    1110:	str	w0, [sp, #120]
    1114:	ldr	x0, [sp, #176]
    1118:	ldr	w0, [x0, #8]
    111c:	str	w0, [sp, #124]
    1120:	str	xzr, [sp, #128]
    1124:	add	x0, sp, #0x78
    1128:	mov	w2, #0x2                   	// #2
    112c:	mov	w1, #0x1                   	// #1
    1130:	bl	34c <grub_reiserfs_set_key_type>
    1134:	add	x0, sp, #0x78
    1138:	mov	x1, #0x1                   	// #1
    113c:	bl	2b4 <grub_reiserfs_set_key_offset>
    1140:	mov	x0, #0x48                  	// #72
    1144:	bl	0 <grub_malloc>
    1148:	str	x0, [sp, #152]
    114c:	ldr	x0, [sp, #152]
    1150:	cmp	x0, #0x0
    1154:	b.eq	15a4 <grub_reiserfs_iterate_dir+0x76c>  // b.none
    1158:	add	x0, sp, #0x78
    115c:	mov	w3, #0x1                   	// #1
    1160:	ldr	x2, [sp, #152]
    1164:	mov	x1, x0
    1168:	ldr	x0, [sp, #216]
    116c:	bl	684 <grub_reiserfs_get_item>
    1170:	cmp	w0, #0x0
    1174:	b.eq	1184 <grub_reiserfs_iterate_dir+0x34c>  // b.none
    1178:	ldr	x0, [sp, #152]
    117c:	bl	0 <grub_free>
    1180:	b	1488 <grub_reiserfs_iterate_dir+0x650>
    1184:	ldr	x0, [sp, #152]
    1188:	ldr	w0, [x0, #40]
    118c:	cmp	w0, #0x1
    1190:	b.ne	11a0 <grub_reiserfs_iterate_dir+0x368>  // b.any
    1194:	mov	w0, #0x2                   	// #2
    1198:	str	w0, [sp, #236]
    119c:	b	13f8 <grub_reiserfs_iterate_dir+0x5c0>
    11a0:	add	x0, sp, #0x78
    11a4:	mov	x1, #0x0                   	// #0
    11a8:	bl	2b4 <grub_reiserfs_set_key_offset>
    11ac:	add	x0, sp, #0x78
    11b0:	mov	w2, #0x2                   	// #2
    11b4:	mov	w1, #0x0                   	// #0
    11b8:	bl	34c <grub_reiserfs_set_key_type>
    11bc:	add	x0, sp, #0x78
    11c0:	mov	w3, #0x1                   	// #1
    11c4:	ldr	x2, [sp, #152]
    11c8:	mov	x1, x0
    11cc:	ldr	x0, [sp, #216]
    11d0:	bl	684 <grub_reiserfs_get_item>
    11d4:	cmp	w0, #0x0
    11d8:	b.eq	11e8 <grub_reiserfs_iterate_dir+0x3b0>  // b.none
    11dc:	ldr	x0, [sp, #152]
    11e0:	bl	0 <grub_free>
    11e4:	b	1488 <grub_reiserfs_iterate_dir+0x650>
    11e8:	ldr	x0, [sp, #152]
    11ec:	ldr	w0, [x0, #8]
    11f0:	cmp	w0, #0x0
    11f4:	b.eq	1388 <grub_reiserfs_iterate_dir+0x550>  // b.none
    11f8:	ldr	x0, [sp, #152]
    11fc:	ldrh	w0, [x0, #66]
    1200:	strh	w0, [sp, #150]
    1204:	ldr	x0, [sp, #152]
    1208:	ldr	w0, [x0, #8]
    120c:	str	w0, [sp, #144]
    1210:	ldrh	w0, [sp, #150]
    1214:	cmp	w0, #0x0
    1218:	b.ne	12d4 <grub_reiserfs_iterate_dir+0x49c>  // b.any
    121c:	ldr	x0, [sp, #216]
    1220:	ldr	x5, [x0, #120]
    1224:	ldrh	w0, [sp, #214]
    1228:	lsr	w0, w0, #9
    122c:	and	w0, w0, #0xffff
    1230:	mov	w1, w0
    1234:	ldr	w0, [sp, #144]
    1238:	mul	w0, w1, w0
    123c:	mov	w1, w0
    1240:	ldr	x0, [sp, #152]
    1244:	ldrh	w0, [x0, #64]
    1248:	and	x0, x0, #0xffff
    124c:	add	x2, sp, #0x30
    1250:	mov	x4, x2
    1254:	mov	x3, #0x20                  	// #32
    1258:	mov	x2, x0
    125c:	mov	x0, x5
    1260:	bl	0 <grub_disk_read>
    1264:	adrp	x0, 0 <grub_swap_bytes16>
    1268:	add	x0, x0, #0x0
    126c:	ldr	x0, [x0]
    1270:	ldr	w0, [x0]
    1274:	cmp	w0, #0x0
    1278:	b.eq	1284 <grub_reiserfs_iterate_dir+0x44c>  // b.none
    127c:	nop
    1280:	b	15a4 <grub_reiserfs_iterate_dir+0x76c>
    1284:	ldr	w0, [sp, #64]
    1288:	mov	w1, w0
    128c:	ldr	x0, [sp, #152]
    1290:	str	w1, [x0, #24]
    1294:	ldrh	w0, [sp, #48]
    1298:	mov	w1, w0
    129c:	mov	w0, #0xa000                	// #40960
    12a0:	and	w0, w1, w0
    12a4:	cmp	w0, #0xa, lsl #12
    12a8:	b.ne	12b8 <grub_reiserfs_iterate_dir+0x480>  // b.any
    12ac:	mov	w0, #0x3                   	// #3
    12b0:	str	w0, [sp, #236]
    12b4:	b	12c0 <grub_reiserfs_iterate_dir+0x488>
    12b8:	mov	w0, #0x1                   	// #1
    12bc:	str	w0, [sp, #236]
    12c0:	ldr	w0, [sp, #56]
    12c4:	mov	w1, w0
    12c8:	ldr	x0, [sp, #152]
    12cc:	str	x1, [x0, #32]
    12d0:	b	13f8 <grub_reiserfs_iterate_dir+0x5c0>
    12d4:	ldr	x0, [sp, #216]
    12d8:	ldr	x5, [x0, #120]
    12dc:	ldrh	w0, [sp, #214]
    12e0:	lsr	w0, w0, #9
    12e4:	and	w0, w0, #0xffff
    12e8:	mov	w1, w0
    12ec:	ldr	w0, [sp, #144]
    12f0:	mul	w0, w1, w0
    12f4:	mov	w1, w0
    12f8:	ldr	x0, [sp, #152]
    12fc:	ldrh	w0, [x0, #64]
    1300:	and	x0, x0, #0xffff
    1304:	add	x2, sp, #0x30
    1308:	mov	x4, x2
    130c:	mov	x3, #0x2c                  	// #44
    1310:	mov	x2, x0
    1314:	mov	x0, x5
    1318:	bl	0 <grub_disk_read>
    131c:	adrp	x0, 0 <grub_swap_bytes16>
    1320:	add	x0, x0, #0x0
    1324:	ldr	x0, [x0]
    1328:	ldr	w0, [x0]
    132c:	cmp	w0, #0x0
    1330:	b.eq	133c <grub_reiserfs_iterate_dir+0x504>  // b.none
    1334:	nop
    1338:	b	15a4 <grub_reiserfs_iterate_dir+0x76c>
    133c:	ldr	w0, [sp, #76]
    1340:	mov	w1, w0
    1344:	ldr	x0, [sp, #152]
    1348:	str	w1, [x0, #24]
    134c:	ldr	x1, [sp, #56]
    1350:	ldr	x0, [sp, #152]
    1354:	str	x1, [x0, #32]
    1358:	ldrh	w0, [sp, #48]
    135c:	mov	w1, w0
    1360:	mov	w0, #0xa000                	// #40960
    1364:	and	w0, w1, w0
    1368:	cmp	w0, #0xa, lsl #12
    136c:	b.ne	137c <grub_reiserfs_iterate_dir+0x544>  // b.any
    1370:	mov	w0, #0x3                   	// #3
    1374:	str	w0, [sp, #236]
    1378:	b	13f8 <grub_reiserfs_iterate_dir+0x5c0>
    137c:	mov	w0, #0x1                   	// #1
    1380:	str	w0, [sp, #236]
    1384:	b	13f8 <grub_reiserfs_iterate_dir+0x5c0>
    1388:	ldr	x0, [sp, #160]
    138c:	add	x0, x0, #0x2
    1390:	ldr	x1, [sp, #224]
    1394:	cmp	x1, x0
    1398:	b.ne	13ec <grub_reiserfs_iterate_dir+0x5b4>  // b.any
    139c:	mov	x2, #0x2                   	// #2
    13a0:	adrp	x0, 0 <grub_swap_bytes16>
    13a4:	add	x0, x0, #0x0
    13a8:	ldr	x1, [x0]
    13ac:	ldr	x0, [sp, #160]
    13b0:	bl	0 <grub_memcmp>
    13b4:	cmp	w0, #0x0
    13b8:	b.eq	13ec <grub_reiserfs_iterate_dir+0x5b4>  // b.none
    13bc:	ldr	x4, [sp, #160]
    13c0:	adrp	x0, 0 <grub_swap_bytes16>
    13c4:	add	x0, x0, #0x0
    13c8:	ldr	x3, [x0]
    13cc:	adrp	x0, 0 <grub_swap_bytes16>
    13d0:	add	x0, x0, #0x0
    13d4:	ldr	x2, [x0]
    13d8:	mov	w1, #0x3bd                 	// #957
    13dc:	adrp	x0, 0 <grub_swap_bytes16>
    13e0:	add	x0, x0, #0x0
    13e4:	ldr	x0, [x0]
    13e8:	bl	0 <grub_real_dprintf>
    13ec:	ldr	x0, [sp, #152]
    13f0:	bl	0 <grub_free>
    13f4:	b	1490 <grub_reiserfs_iterate_dir+0x658>
    13f8:	ldr	x0, [sp, #224]
    13fc:	ldrb	w0, [x0]
    1400:	strb	w0, [sp, #143]
    1404:	ldr	x0, [sp, #224]
    1408:	strb	wzr, [x0]
    140c:	ldr	x4, [sp, #32]
    1410:	ldr	x3, [sp, #24]
    1414:	ldr	x2, [sp, #152]
    1418:	ldr	w1, [sp, #236]
    141c:	ldr	x0, [sp, #160]
    1420:	blr	x4
    1424:	cmp	w0, #0x0
    1428:	b.eq	1478 <grub_reiserfs_iterate_dir+0x640>  // b.none
    142c:	ldr	x0, [sp, #224]
    1430:	ldrb	w1, [sp, #143]
    1434:	strb	w1, [x0]
    1438:	ldr	w5, [sp, #236]
    143c:	ldr	x4, [sp, #160]
    1440:	adrp	x0, 0 <grub_swap_bytes16>
    1444:	add	x0, x0, #0x0
    1448:	ldr	x3, [x0]
    144c:	adrp	x0, 0 <grub_swap_bytes16>
    1450:	add	x0, x0, #0x0
    1454:	ldr	x2, [x0]
    1458:	mov	w1, #0x3ca                 	// #970
    145c:	adrp	x0, 0 <grub_swap_bytes16>
    1460:	add	x0, x0, #0x0
    1464:	ldr	x0, [x0]
    1468:	bl	0 <grub_real_dprintf>
    146c:	mov	w0, #0x1                   	// #1
    1470:	str	w0, [sp, #244]
    1474:	b	154c <grub_reiserfs_iterate_dir+0x714>
    1478:	ldr	x0, [sp, #224]
    147c:	ldrb	w1, [sp, #143]
    1480:	strb	w1, [x0]
    1484:	b	1490 <grub_reiserfs_iterate_dir+0x658>
    1488:	b	159c <grub_reiserfs_iterate_dir+0x764>
    148c:	nop
    1490:	ldrh	w0, [sp, #242]
    1494:	add	w0, w0, #0x1
    1498:	strh	w0, [sp, #242]
    149c:	ldrh	w1, [sp, #242]
    14a0:	ldrh	w0, [sp, #190]
    14a4:	cmp	w1, w0
    14a8:	b.cc	fec <grub_reiserfs_iterate_dir+0x1b4>  // b.lo, b.ul, b.last
    14ac:	ldr	x0, [sp, #248]
    14b0:	cmp	x0, #0x0
    14b4:	b.eq	1548 <grub_reiserfs_iterate_dir+0x710>  // b.none
    14b8:	ldrh	w1, [sp, #262]
    14bc:	mov	x0, x1
    14c0:	lsl	x0, x0, #1
    14c4:	add	x0, x0, x1
    14c8:	lsl	x0, x0, #3
    14cc:	mov	x1, x0
    14d0:	ldr	x0, [sp, #200]
    14d4:	add	x0, x0, x1
    14d8:	ldr	x1, [sp, #248]
    14dc:	bl	2b4 <grub_reiserfs_set_key_offset>
    14e0:	ldrh	w1, [sp, #262]
    14e4:	mov	x0, x1
    14e8:	lsl	x0, x0, #1
    14ec:	add	x0, x0, x1
    14f0:	lsl	x0, x0, #3
    14f4:	mov	x1, x0
    14f8:	ldr	x0, [sp, #200]
    14fc:	add	x0, x0, x1
    1500:	mov	x1, x0
    1504:	add	x0, sp, #0x30
    1508:	mov	w3, #0x1                   	// #1
    150c:	mov	x2, x0
    1510:	ldr	x0, [sp, #216]
    1514:	bl	684 <grub_reiserfs_get_item>
    1518:	cmp	w0, #0x0
    151c:	b.ne	15ac <grub_reiserfs_iterate_dir+0x774>  // b.any
    1520:	ldr	w0, [sp, #56]
    1524:	str	w0, [sp, #256]
    1528:	ldrh	w0, [sp, #60]
    152c:	strh	w0, [sp, #262]
    1530:	ldr	x0, [sp, #64]
    1534:	str	x0, [sp, #248]
    1538:	ldr	w0, [sp, #256]
    153c:	cmp	w0, #0x0
    1540:	b.ne	f04 <grub_reiserfs_iterate_dir+0xcc>  // b.any
    1544:	b	154c <grub_reiserfs_iterate_dir+0x714>
    1548:	nop
    154c:	adrp	x0, 0 <grub_swap_bytes16>
    1550:	add	x0, x0, #0x0
    1554:	ldr	x0, [x0]
    1558:	ldr	w0, [x0]
    155c:	cmp	w0, #0x0
    1560:	cset	w0, eq  // eq = none
    1564:	and	w0, w0, #0xff
    1568:	mov	w3, w0
    156c:	mov	w2, #0x3e4                 	// #996
    1570:	adrp	x0, 0 <grub_swap_bytes16>
    1574:	add	x0, x0, #0x0
    1578:	ldr	x1, [x0]
    157c:	mov	w0, w3
    1580:	bl	bc <real_assert>
    1584:	ldr	x0, [sp, #264]
    1588:	bl	0 <grub_free>
    158c:	ldr	w0, [sp, #244]
    1590:	b	15f4 <grub_reiserfs_iterate_dir+0x7bc>
    1594:	nop
    1598:	b	15b0 <grub_reiserfs_iterate_dir+0x778>
    159c:	nop
    15a0:	b	15b0 <grub_reiserfs_iterate_dir+0x778>
    15a4:	nop
    15a8:	b	15b0 <grub_reiserfs_iterate_dir+0x778>
    15ac:	nop
    15b0:	adrp	x0, 0 <grub_swap_bytes16>
    15b4:	add	x0, x0, #0x0
    15b8:	ldr	x0, [x0]
    15bc:	ldr	w0, [x0]
    15c0:	cmp	w0, #0x0
    15c4:	cset	w0, ne  // ne = any
    15c8:	and	w0, w0, #0xff
    15cc:	mov	w3, w0
    15d0:	mov	w2, #0x3e8                 	// #1000
    15d4:	adrp	x0, 0 <grub_swap_bytes16>
    15d8:	add	x0, x0, #0x0
    15dc:	ldr	x1, [x0]
    15e0:	mov	w0, w3
    15e4:	bl	bc <real_assert>
    15e8:	ldr	x0, [sp, #264]
    15ec:	bl	0 <grub_free>
    15f0:	mov	w0, #0x0                   	// #0
    15f4:	ldp	x29, x30, [sp], #272
    15f8:	ret
    15fc:	nop
	...

0000000000001640 <grub_reiserfs_open>:
    1640:	stp	x29, x30, [sp, #-144]!
    1644:	mov	x29, sp
    1648:	str	x0, [sp, #24]
    164c:	str	x1, [sp, #16]
    1650:	str	xzr, [sp, #136]
    1654:	str	xzr, [sp, #56]
    1658:	adrp	x0, 0 <grub_swap_bytes16>
    165c:	add	x0, x0, #0x0
    1660:	ldr	x0, [x0]
    1664:	ldr	x0, [x0]
    1668:	bl	0 <grub_dl_ref>
    166c:	ldr	x0, [sp, #24]
    1670:	ldr	x0, [x0, #8]
    1674:	ldr	x0, [x0]
    1678:	bl	d20 <grub_reiserfs_mount>
    167c:	str	x0, [sp, #136]
    1680:	ldr	x0, [sp, #136]
    1684:	cmp	x0, #0x0
    1688:	b.eq	17d0 <grub_reiserfs_open+0x190>  // b.none
    168c:	mov	w0, #0x1                   	// #1
    1690:	str	w0, [sp, #40]
    1694:	mov	w0, #0x2                   	// #2
    1698:	str	w0, [sp, #44]
    169c:	str	xzr, [sp, #48]
    16a0:	add	x0, sp, #0x28
    16a4:	mov	w2, #0x2                   	// #2
    16a8:	mov	w1, #0x1                   	// #1
    16ac:	bl	34c <grub_reiserfs_set_key_type>
    16b0:	add	x0, sp, #0x28
    16b4:	mov	x1, #0x1                   	// #1
    16b8:	bl	2b4 <grub_reiserfs_set_key_offset>
    16bc:	add	x1, sp, #0x40
    16c0:	add	x0, sp, #0x28
    16c4:	mov	w3, #0x1                   	// #1
    16c8:	mov	x2, x1
    16cc:	mov	x1, x0
    16d0:	ldr	x0, [sp, #136]
    16d4:	bl	684 <grub_reiserfs_get_item>
    16d8:	cmp	w0, #0x0
    16dc:	b.ne	17d8 <grub_reiserfs_open+0x198>  // b.any
    16e0:	ldr	w0, [sp, #72]
    16e4:	cmp	w0, #0x0
    16e8:	b.ne	1704 <grub_reiserfs_open+0xc4>  // b.any
    16ec:	adrp	x0, 0 <grub_swap_bytes16>
    16f0:	add	x0, x0, #0x0
    16f4:	ldr	x1, [x0]
    16f8:	mov	w0, #0x9                   	// #9
    16fc:	bl	0 <grub_error>
    1700:	b	17e4 <grub_reiserfs_open+0x1a4>
    1704:	add	x2, sp, #0x38
    1708:	add	x1, sp, #0x40
    170c:	mov	w5, #0x1                   	// #1
    1710:	adrp	x0, 0 <grub_swap_bytes16>
    1714:	add	x0, x0, #0x0
    1718:	ldr	x4, [x0]
    171c:	adrp	x0, 0 <grub_swap_bytes16>
    1720:	add	x0, x0, #0x0
    1724:	ldr	x3, [x0]
    1728:	ldr	x0, [sp, #16]
    172c:	bl	0 <grub_fshelp_find_file>
    1730:	adrp	x0, 0 <grub_swap_bytes16>
    1734:	add	x0, x0, #0x0
    1738:	ldr	x0, [x0]
    173c:	ldr	w0, [x0]
    1740:	cmp	w0, #0x0
    1744:	b.ne	17e0 <grub_reiserfs_open+0x1a0>  // b.any
    1748:	ldr	x0, [sp, #56]
    174c:	ldr	x1, [x0, #32]
    1750:	ldr	x0, [sp, #24]
    1754:	str	x1, [x0, #64]
    1758:	ldr	x0, [sp, #24]
    175c:	ldr	x0, [x0, #64]
    1760:	mov	w1, w0
    1764:	ldr	x0, [sp, #24]
    1768:	ldr	x0, [x0, #64]
    176c:	lsr	x0, x0, #32
    1770:	mov	w2, w0
    1774:	ldr	x0, [sp, #24]
    1778:	ldr	x0, [x0, #64]
    177c:	mov	w6, w0
    1780:	mov	w5, w2
    1784:	mov	w4, w1
    1788:	adrp	x0, 0 <grub_swap_bytes16>
    178c:	add	x0, x0, #0x0
    1790:	ldr	x3, [x0]
    1794:	adrp	x0, 0 <grub_swap_bytes16>
    1798:	add	x0, x0, #0x0
    179c:	ldr	x2, [x0]
    17a0:	mov	w1, #0x410                 	// #1040
    17a4:	adrp	x0, 0 <grub_swap_bytes16>
    17a8:	add	x0, x0, #0x0
    17ac:	ldr	x0, [x0]
    17b0:	bl	0 <grub_real_dprintf>
    17b4:	ldr	x0, [sp, #24]
    17b8:	str	xzr, [x0, #24]
    17bc:	ldr	x1, [sp, #56]
    17c0:	ldr	x0, [sp, #24]
    17c4:	str	x1, [x0, #80]
    17c8:	mov	w0, #0x0                   	// #0
    17cc:	b	1860 <grub_reiserfs_open+0x220>
    17d0:	nop
    17d4:	b	17e4 <grub_reiserfs_open+0x1a4>
    17d8:	nop
    17dc:	b	17e4 <grub_reiserfs_open+0x1a4>
    17e0:	nop
    17e4:	adrp	x0, 0 <grub_swap_bytes16>
    17e8:	add	x0, x0, #0x0
    17ec:	ldr	x0, [x0]
    17f0:	ldr	w0, [x0]
    17f4:	cmp	w0, #0x0
    17f8:	cset	w0, ne  // ne = any
    17fc:	and	w0, w0, #0xff
    1800:	mov	w3, w0
    1804:	mov	w2, #0x418                 	// #1048
    1808:	adrp	x0, 0 <grub_swap_bytes16>
    180c:	add	x0, x0, #0x0
    1810:	ldr	x1, [x0]
    1814:	mov	w0, w3
    1818:	bl	bc <real_assert>
    181c:	ldr	x1, [sp, #56]
    1820:	add	x0, sp, #0x40
    1824:	cmp	x1, x0
    1828:	b.eq	1834 <grub_reiserfs_open+0x1f4>  // b.none
    182c:	ldr	x0, [sp, #56]
    1830:	bl	0 <grub_free>
    1834:	ldr	x0, [sp, #136]
    1838:	bl	0 <grub_free>
    183c:	adrp	x0, 0 <grub_swap_bytes16>
    1840:	add	x0, x0, #0x0
    1844:	ldr	x0, [x0]
    1848:	ldr	x0, [x0]
    184c:	bl	0 <grub_dl_unref>
    1850:	adrp	x0, 0 <grub_swap_bytes16>
    1854:	add	x0, x0, #0x0
    1858:	ldr	x0, [x0]
    185c:	ldr	w0, [x0]
    1860:	ldp	x29, x30, [sp], #144
    1864:	ret
	...

00000000000018a8 <grub_reiserfs_read_real>:
    18a8:	stp	x29, x30, [sp, #-320]!
    18ac:	mov	x29, sp
    18b0:	str	x0, [sp, #56]
    18b4:	str	x1, [sp, #48]
    18b8:	str	x2, [sp, #40]
    18bc:	str	x3, [sp, #32]
    18c0:	str	x4, [sp, #24]
    18c4:	str	x5, [sp, #16]
    18c8:	ldr	x0, [sp, #56]
    18cc:	ldr	x0, [x0]
    18d0:	str	x0, [sp, #280]
    18d4:	ldr	x0, [sp, #280]
    18d8:	ldrh	w0, [x0, #44]
    18dc:	strh	w0, [sp, #278]
    18e0:	str	xzr, [sp, #304]
    18e4:	mov	x0, #0x1                   	// #1
    18e8:	str	x0, [sp, #296]
    18ec:	ldr	x0, [sp, #56]
    18f0:	ldr	w0, [x0, #44]
    18f4:	str	w0, [sp, #144]
    18f8:	ldr	x0, [sp, #56]
    18fc:	ldr	w0, [x0, #48]
    1900:	str	w0, [sp, #148]
    1904:	str	xzr, [sp, #152]
    1908:	add	x0, sp, #0x90
    190c:	mov	w2, #0x2                   	// #2
    1910:	mov	w1, #0x4                   	// #4
    1914:	bl	34c <grub_reiserfs_set_key_type>
    1918:	ldr	x0, [sp, #48]
    191c:	str	x0, [sp, #264]
    1920:	str	xzr, [sp, #288]
    1924:	ldr	x1, [sp, #32]
    1928:	ldr	x0, [sp, #264]
    192c:	add	x0, x1, x0
    1930:	str	x0, [sp, #256]
    1934:	ldr	x0, [sp, #56]
    1938:	ldr	x0, [x0, #32]
    193c:	str	x0, [sp, #248]
    1940:	ldr	x0, [sp, #256]
    1944:	ldr	x2, [sp, #248]
    1948:	ldr	x1, [sp, #248]
    194c:	cmp	x2, x0
    1950:	csel	x0, x1, x0, ls  // ls = plast
    1954:	str	x0, [sp, #240]
    1958:	ldr	x1, [sp, #240]
    195c:	ldr	x0, [sp, #264]
    1960:	sub	x0, x1, x0
    1964:	ldr	x7, [sp, #32]
    1968:	mov	x6, x0
    196c:	ldr	x5, [sp, #240]
    1970:	ldr	x4, [sp, #264]
    1974:	adrp	x0, 0 <grub_swap_bytes16>
    1978:	add	x0, x0, #0x0
    197c:	ldr	x3, [x0]
    1980:	adrp	x0, 0 <grub_swap_bytes16>
    1984:	add	x0, x0, #0x0
    1988:	ldr	x2, [x0]
    198c:	mov	w1, #0x438                 	// #1080
    1990:	adrp	x0, 0 <grub_swap_bytes16>
    1994:	add	x0, x0, #0x0
    1998:	ldr	x0, [x0]
    199c:	bl	0 <grub_real_dprintf>
    19a0:	ldr	x0, [sp, #264]
    19a4:	add	x1, x0, #0x1
    19a8:	add	x0, sp, #0x90
    19ac:	bl	2b4 <grub_reiserfs_set_key_offset>
    19b0:	add	x1, sp, #0x48
    19b4:	add	x0, sp, #0x90
    19b8:	mov	w3, #0x0                   	// #0
    19bc:	mov	x2, x1
    19c0:	mov	x1, x0
    19c4:	ldr	x0, [sp, #280]
    19c8:	bl	684 <grub_reiserfs_get_item>
    19cc:	cmp	w0, #0x0
    19d0:	b.ne	1f68 <grub_reiserfs_read_real+0x6c0>  // b.any
    19d4:	ldr	w0, [sp, #80]
    19d8:	cmp	w0, #0x0
    19dc:	b.ne	19fc <grub_reiserfs_read_real+0x154>  // b.any
    19e0:	ldr	x2, [sp, #264]
    19e4:	adrp	x0, 0 <grub_swap_bytes16>
    19e8:	add	x0, x0, #0x0
    19ec:	ldr	x1, [x0]
    19f0:	mov	w0, #0xe                   	// #14
    19f4:	bl	0 <grub_error>
    19f8:	b	1f9c <grub_reiserfs_read_real+0x6f4>
    19fc:	add	x0, sp, #0x48
    1a00:	add	x0, x0, #0x2c
    1a04:	bl	274 <grub_reiserfs_get_key_offset>
    1a08:	str	x0, [sp, #296]
    1a0c:	ldr	x0, [sp, #296]
    1a10:	sub	x0, x0, #0x1
    1a14:	str	x0, [sp, #288]
    1a18:	b	1f08 <grub_reiserfs_read_real+0x660>
    1a1c:	add	x0, sp, #0x90
    1a20:	ldr	x1, [sp, #296]
    1a24:	bl	2b4 <grub_reiserfs_set_key_offset>
    1a28:	add	x1, sp, #0x48
    1a2c:	add	x0, sp, #0x90
    1a30:	mov	w3, #0x1                   	// #1
    1a34:	mov	x2, x1
    1a38:	mov	x1, x0
    1a3c:	ldr	x0, [sp, #280]
    1a40:	bl	684 <grub_reiserfs_get_item>
    1a44:	cmp	w0, #0x0
    1a48:	b.ne	1f70 <grub_reiserfs_read_real+0x6c8>  // b.any
    1a4c:	ldr	w0, [sp, #80]
    1a50:	cmp	w0, #0x0
    1a54:	b.eq	1f78 <grub_reiserfs_read_real+0x6d0>  // b.none
    1a58:	ldrh	w0, [sp, #134]
    1a5c:	strh	w0, [sp, #238]
    1a60:	ldr	w0, [sp, #112]
    1a64:	cmp	w0, #0x2
    1a68:	b.eq	1a78 <grub_reiserfs_read_real+0x1d0>  // b.none
    1a6c:	cmp	w0, #0x3
    1a70:	b.eq	1c5c <grub_reiserfs_read_real+0x3b4>  // b.none
    1a74:	b	1f9c <grub_reiserfs_read_real+0x6f4>
    1a78:	ldr	w0, [sp, #80]
    1a7c:	mov	w1, w0
    1a80:	ldrh	w0, [sp, #278]
    1a84:	lsr	w0, w0, #9
    1a88:	and	w0, w0, #0xffff
    1a8c:	and	x0, x0, #0xffff
    1a90:	mul	x0, x1, x0
    1a94:	str	x0, [sp, #224]
    1a98:	ldr	x0, [sp, #224]
    1a9c:	mov	w4, w0
    1aa0:	adrp	x0, 0 <grub_swap_bytes16>
    1aa4:	add	x0, x0, #0x0
    1aa8:	ldr	x3, [x0]
    1aac:	adrp	x0, 0 <grub_swap_bytes16>
    1ab0:	add	x0, x0, #0x0
    1ab4:	ldr	x2, [x0]
    1ab8:	mov	w1, #0x45b                 	// #1115
    1abc:	adrp	x0, 0 <grub_swap_bytes16>
    1ac0:	add	x0, x0, #0x0
    1ac4:	ldr	x0, [x0]
    1ac8:	bl	0 <grub_real_dprintf>
    1acc:	ldrh	w1, [sp, #238]
    1ad0:	ldr	x0, [sp, #288]
    1ad4:	add	x0, x1, x0
    1ad8:	ldr	x1, [sp, #264]
    1adc:	cmp	x1, x0
    1ae0:	b.cs	1c48 <grub_reiserfs_read_real+0x3a0>  // b.hs, b.nlast
    1ae4:	ldr	x0, [sp, #264]
    1ae8:	mov	w1, w0
    1aec:	ldr	x0, [sp, #288]
    1af0:	sub	w0, w1, w0
    1af4:	str	w0, [sp, #180]
    1af8:	str	wzr, [sp, #176]
    1afc:	ldr	w0, [sp, #180]
    1b00:	ldr	w2, [sp, #176]
    1b04:	ldr	w1, [sp, #176]
    1b08:	cmp	w2, w0
    1b0c:	csel	w0, w1, w0, ge  // ge = tcont
    1b10:	sxtw	x0, w0
    1b14:	str	x0, [sp, #208]
    1b18:	ldrh	w0, [sp, #238]
    1b1c:	strh	w0, [sp, #174]
    1b20:	ldr	x1, [sp, #240]
    1b24:	ldr	x0, [sp, #288]
    1b28:	sub	x0, x1, x0
    1b2c:	str	x0, [sp, #160]
    1b30:	ldrh	w0, [sp, #174]
    1b34:	ldr	x2, [sp, #160]
    1b38:	ldr	x1, [sp, #160]
    1b3c:	cmp	x2, x0
    1b40:	csel	x1, x1, x0, ls  // ls = plast
    1b44:	ldr	x0, [sp, #208]
    1b48:	sub	x0, x1, x0
    1b4c:	str	x0, [sp, #184]
    1b50:	ldr	x0, [sp, #224]
    1b54:	mov	w2, w0
    1b58:	ldr	x0, [sp, #208]
    1b5c:	mov	w3, w0
    1b60:	ldr	x0, [sp, #208]
    1b64:	mov	w1, w0
    1b68:	ldr	x0, [sp, #184]
    1b6c:	add	w0, w1, w0
    1b70:	mov	w6, w0
    1b74:	mov	w5, w3
    1b78:	mov	w4, w2
    1b7c:	adrp	x0, 0 <grub_swap_bytes16>
    1b80:	add	x0, x0, #0x0
    1b84:	ldr	x3, [x0]
    1b88:	adrp	x0, 0 <grub_swap_bytes16>
    1b8c:	add	x0, x0, #0x0
    1b90:	ldr	x2, [x0]
    1b94:	mov	w1, #0x461                 	// #1121
    1b98:	adrp	x0, 0 <grub_swap_bytes16>
    1b9c:	add	x0, x0, #0x0
    1ba0:	ldr	x0, [x0]
    1ba4:	bl	0 <grub_real_dprintf>
    1ba8:	ldr	x0, [sp, #72]
    1bac:	ldr	x0, [x0, #120]
    1bb0:	ldr	x1, [sp, #24]
    1bb4:	str	x1, [x0, #48]
    1bb8:	ldr	x0, [sp, #72]
    1bbc:	ldr	x0, [x0, #120]
    1bc0:	ldr	x1, [sp, #16]
    1bc4:	str	x1, [x0, #56]
    1bc8:	ldr	x0, [sp, #72]
    1bcc:	ldr	x5, [x0, #120]
    1bd0:	ldrh	w0, [sp, #136]
    1bd4:	and	x1, x0, #0xffff
    1bd8:	ldr	x0, [sp, #208]
    1bdc:	add	x0, x1, x0
    1be0:	ldr	x4, [sp, #40]
    1be4:	ldr	x3, [sp, #184]
    1be8:	mov	x2, x0
    1bec:	ldr	x1, [sp, #224]
    1bf0:	mov	x0, x5
    1bf4:	bl	0 <grub_disk_read>
    1bf8:	ldr	x0, [sp, #72]
    1bfc:	ldr	x0, [x0, #120]
    1c00:	str	xzr, [x0, #48]
    1c04:	adrp	x0, 0 <grub_swap_bytes16>
    1c08:	add	x0, x0, #0x0
    1c0c:	ldr	x0, [x0]
    1c10:	ldr	w0, [x0]
    1c14:	cmp	w0, #0x0
    1c18:	b.ne	1f80 <grub_reiserfs_read_real+0x6d8>  // b.any
    1c1c:	ldr	x1, [sp, #40]
    1c20:	ldr	x0, [sp, #184]
    1c24:	add	x0, x1, x0
    1c28:	str	x0, [sp, #40]
    1c2c:	ldr	x1, [sp, #208]
    1c30:	ldr	x0, [sp, #184]
    1c34:	add	x0, x1, x0
    1c38:	ldr	x1, [sp, #288]
    1c3c:	add	x0, x1, x0
    1c40:	str	x0, [sp, #288]
    1c44:	b	1efc <grub_reiserfs_read_real+0x654>
    1c48:	ldrh	w0, [sp, #238]
    1c4c:	ldr	x1, [sp, #288]
    1c50:	add	x0, x1, x0
    1c54:	str	x0, [sp, #288]
    1c58:	b	1efc <grub_reiserfs_read_real+0x654>
    1c5c:	ldrh	w0, [sp, #238]
    1c60:	lsr	w0, w0, #2
    1c64:	and	w0, w0, #0xffff
    1c68:	str	w0, [sp, #232]
    1c6c:	ldrh	w0, [sp, #238]
    1c70:	bl	0 <grub_malloc>
    1c74:	str	x0, [sp, #304]
    1c78:	ldr	x0, [sp, #304]
    1c7c:	cmp	x0, #0x0
    1c80:	b.eq	1f88 <grub_reiserfs_read_real+0x6e0>  // b.none
    1c84:	ldr	x0, [sp, #72]
    1c88:	ldr	x5, [x0, #120]
    1c8c:	ldr	w0, [sp, #80]
    1c90:	ldrh	w1, [sp, #278]
    1c94:	lsr	w1, w1, #9
    1c98:	and	w1, w1, #0xffff
    1c9c:	mul	w0, w0, w1
    1ca0:	mov	w0, w0
    1ca4:	ldrh	w1, [sp, #136]
    1ca8:	and	x1, x1, #0xffff
    1cac:	ldrh	w2, [sp, #238]
    1cb0:	ldr	x4, [sp, #304]
    1cb4:	mov	x3, x2
    1cb8:	mov	x2, x1
    1cbc:	mov	x1, x0
    1cc0:	mov	x0, x5
    1cc4:	bl	0 <grub_disk_read>
    1cc8:	adrp	x0, 0 <grub_swap_bytes16>
    1ccc:	add	x0, x0, #0x0
    1cd0:	ldr	x0, [x0]
    1cd4:	ldr	w0, [x0]
    1cd8:	cmp	w0, #0x0
    1cdc:	b.ne	1f90 <grub_reiserfs_read_real+0x6e8>  // b.any
    1ce0:	ldr	x0, [sp, #72]
    1ce4:	ldr	x0, [x0, #120]
    1ce8:	ldr	x1, [sp, #24]
    1cec:	str	x1, [x0, #48]
    1cf0:	ldr	x0, [sp, #72]
    1cf4:	ldr	x0, [x0, #120]
    1cf8:	ldr	x1, [sp, #16]
    1cfc:	str	x1, [x0, #56]
    1d00:	str	wzr, [sp, #316]
    1d04:	b	1ec0 <grub_reiserfs_read_real+0x618>
    1d08:	ldr	w0, [sp, #316]
    1d0c:	lsl	x0, x0, #2
    1d10:	ldr	x1, [sp, #304]
    1d14:	add	x0, x1, x0
    1d18:	ldr	w0, [x0]
    1d1c:	ldrh	w1, [sp, #278]
    1d20:	lsr	w1, w1, #9
    1d24:	and	w1, w1, #0xffff
    1d28:	mul	w0, w0, w1
    1d2c:	mov	w0, w0
    1d30:	str	x0, [sp, #224]
    1d34:	ldr	x0, [sp, #224]
    1d38:	mov	w4, w0
    1d3c:	adrp	x0, 0 <grub_swap_bytes16>
    1d40:	add	x0, x0, #0x0
    1d44:	ldr	x3, [x0]
    1d48:	adrp	x0, 0 <grub_swap_bytes16>
    1d4c:	add	x0, x0, #0x0
    1d50:	ldr	x2, [x0]
    1d54:	mov	w1, #0x489                 	// #1161
    1d58:	adrp	x0, 0 <grub_swap_bytes16>
    1d5c:	add	x0, x0, #0x0
    1d60:	ldr	x0, [x0]
    1d64:	bl	0 <grub_real_dprintf>
    1d68:	ldrh	w1, [sp, #278]
    1d6c:	ldr	x0, [sp, #288]
    1d70:	add	x0, x1, x0
    1d74:	ldr	x1, [sp, #264]
    1d78:	cmp	x1, x0
    1d7c:	b.hi	1ea4 <grub_reiserfs_read_real+0x5fc>  // b.pmore
    1d80:	ldr	x0, [sp, #264]
    1d84:	mov	w1, w0
    1d88:	ldr	x0, [sp, #288]
    1d8c:	sub	w0, w1, w0
    1d90:	str	w0, [sp, #220]
    1d94:	str	wzr, [sp, #216]
    1d98:	ldr	w0, [sp, #220]
    1d9c:	ldr	w2, [sp, #216]
    1da0:	ldr	w1, [sp, #216]
    1da4:	cmp	w2, w0
    1da8:	csel	w0, w1, w0, ge  // ge = tcont
    1dac:	sxtw	x0, w0
    1db0:	str	x0, [sp, #208]
    1db4:	ldrh	w0, [sp, #278]
    1db8:	strh	w0, [sp, #206]
    1dbc:	ldr	x1, [sp, #240]
    1dc0:	ldr	x0, [sp, #288]
    1dc4:	sub	x0, x1, x0
    1dc8:	str	x0, [sp, #192]
    1dcc:	ldrh	w0, [sp, #206]
    1dd0:	ldr	x2, [sp, #192]
    1dd4:	ldr	x1, [sp, #192]
    1dd8:	cmp	x2, x0
    1ddc:	csel	x1, x1, x0, ls  // ls = plast
    1de0:	ldr	x0, [sp, #208]
    1de4:	sub	x0, x1, x0
    1de8:	str	x0, [sp, #184]
    1dec:	ldr	x0, [sp, #224]
    1df0:	mov	w2, w0
    1df4:	ldr	x0, [sp, #208]
    1df8:	mov	w3, w0
    1dfc:	ldr	x0, [sp, #208]
    1e00:	mov	w1, w0
    1e04:	ldr	x0, [sp, #184]
    1e08:	add	w0, w1, w0
    1e0c:	mov	w6, w0
    1e10:	mov	w5, w3
    1e14:	mov	w4, w2
    1e18:	adrp	x0, 0 <grub_swap_bytes16>
    1e1c:	add	x0, x0, #0x0
    1e20:	ldr	x3, [x0]
    1e24:	adrp	x0, 0 <grub_swap_bytes16>
    1e28:	add	x0, x0, #0x0
    1e2c:	ldr	x2, [x0]
    1e30:	mov	w1, #0x490                 	// #1168
    1e34:	adrp	x0, 0 <grub_swap_bytes16>
    1e38:	add	x0, x0, #0x0
    1e3c:	ldr	x0, [x0]
    1e40:	bl	0 <grub_real_dprintf>
    1e44:	ldr	x0, [sp, #72]
    1e48:	ldr	x0, [x0, #120]
    1e4c:	ldr	x4, [sp, #40]
    1e50:	ldr	x3, [sp, #184]
    1e54:	ldr	x2, [sp, #208]
    1e58:	ldr	x1, [sp, #224]
    1e5c:	bl	0 <grub_disk_read>
    1e60:	adrp	x0, 0 <grub_swap_bytes16>
    1e64:	add	x0, x0, #0x0
    1e68:	ldr	x0, [x0]
    1e6c:	ldr	w0, [x0]
    1e70:	cmp	w0, #0x0
    1e74:	b.ne	1f98 <grub_reiserfs_read_real+0x6f0>  // b.any
    1e78:	ldr	x1, [sp, #40]
    1e7c:	ldr	x0, [sp, #184]
    1e80:	add	x0, x1, x0
    1e84:	str	x0, [sp, #40]
    1e88:	ldr	x1, [sp, #208]
    1e8c:	ldr	x0, [sp, #184]
    1e90:	add	x0, x1, x0
    1e94:	ldr	x1, [sp, #288]
    1e98:	add	x0, x1, x0
    1e9c:	str	x0, [sp, #288]
    1ea0:	b	1eb4 <grub_reiserfs_read_real+0x60c>
    1ea4:	ldrh	w0, [sp, #278]
    1ea8:	ldr	x1, [sp, #288]
    1eac:	add	x0, x1, x0
    1eb0:	str	x0, [sp, #288]
    1eb4:	ldr	w0, [sp, #316]
    1eb8:	add	w0, w0, #0x1
    1ebc:	str	w0, [sp, #316]
    1ec0:	ldr	w1, [sp, #316]
    1ec4:	ldr	w0, [sp, #232]
    1ec8:	cmp	w1, w0
    1ecc:	b.cs	1ee0 <grub_reiserfs_read_real+0x638>  // b.hs, b.nlast
    1ed0:	ldr	x1, [sp, #288]
    1ed4:	ldr	x0, [sp, #240]
    1ed8:	cmp	x1, x0
    1edc:	b.cc	1d08 <grub_reiserfs_read_real+0x460>  // b.lo, b.ul, b.last
    1ee0:	ldr	x0, [sp, #72]
    1ee4:	ldr	x0, [x0, #120]
    1ee8:	str	xzr, [x0, #48]
    1eec:	ldr	x0, [sp, #304]
    1ef0:	bl	0 <grub_free>
    1ef4:	str	xzr, [sp, #304]
    1ef8:	nop
    1efc:	ldr	x0, [sp, #288]
    1f00:	add	x0, x0, #0x1
    1f04:	str	x0, [sp, #296]
    1f08:	ldr	x1, [sp, #288]
    1f0c:	ldr	x0, [sp, #240]
    1f10:	cmp	x1, x0
    1f14:	b.cc	1a1c <grub_reiserfs_read_real+0x174>  // b.lo, b.ul, b.last
    1f18:	ldr	x1, [sp, #288]
    1f1c:	ldr	x0, [sp, #264]
    1f20:	sub	x0, x1, x0
    1f24:	ldr	x5, [sp, #32]
    1f28:	mov	x4, x0
    1f2c:	adrp	x0, 0 <grub_swap_bytes16>
    1f30:	add	x0, x0, #0x0
    1f34:	ldr	x3, [x0]
    1f38:	adrp	x0, 0 <grub_swap_bytes16>
    1f3c:	add	x0, x0, #0x0
    1f40:	ldr	x2, [x0]
    1f44:	mov	w1, #0x4ae                 	// #1198
    1f48:	adrp	x0, 0 <grub_swap_bytes16>
    1f4c:	add	x0, x0, #0x0
    1f50:	ldr	x0, [x0]
    1f54:	bl	0 <grub_real_dprintf>
    1f58:	ldr	x1, [sp, #288]
    1f5c:	ldr	x0, [sp, #264]
    1f60:	sub	x0, x1, x0
    1f64:	b	1fa8 <grub_reiserfs_read_real+0x700>
    1f68:	nop
    1f6c:	b	1f9c <grub_reiserfs_read_real+0x6f4>
    1f70:	nop
    1f74:	b	1f9c <grub_reiserfs_read_real+0x6f4>
    1f78:	nop
    1f7c:	b	1f9c <grub_reiserfs_read_real+0x6f4>
    1f80:	nop
    1f84:	b	1f9c <grub_reiserfs_read_real+0x6f4>
    1f88:	nop
    1f8c:	b	1f9c <grub_reiserfs_read_real+0x6f4>
    1f90:	nop
    1f94:	b	1f9c <grub_reiserfs_read_real+0x6f4>
    1f98:	nop
    1f9c:	ldr	x0, [sp, #304]
    1fa0:	bl	0 <grub_free>
    1fa4:	mov	x0, #0xffffffffffffffff    	// #-1
    1fa8:	ldp	x29, x30, [sp], #320
    1fac:	ret
	...

0000000000002008 <grub_reiserfs_read>:
    2008:	stp	x29, x30, [sp, #-48]!
    200c:	mov	x29, sp
    2010:	str	x0, [sp, #40]
    2014:	str	x1, [sp, #32]
    2018:	str	x2, [sp, #24]
    201c:	ldr	x0, [sp, #40]
    2020:	ldr	x6, [x0, #80]
    2024:	ldr	x0, [sp, #40]
    2028:	ldr	x1, [x0, #24]
    202c:	ldr	x0, [sp, #40]
    2030:	ldr	x2, [x0, #88]
    2034:	ldr	x0, [sp, #40]
    2038:	ldr	x0, [x0, #96]
    203c:	mov	x5, x0
    2040:	mov	x4, x2
    2044:	ldr	x3, [sp, #24]
    2048:	ldr	x2, [sp, #32]
    204c:	mov	x0, x6
    2050:	bl	18a8 <grub_reiserfs_read_real>
    2054:	ldp	x29, x30, [sp], #48
    2058:	ret

000000000000205c <grub_reiserfs_close>:
    205c:	stp	x29, x30, [sp, #-48]!
    2060:	mov	x29, sp
    2064:	str	x0, [sp, #24]
    2068:	ldr	x0, [sp, #24]
    206c:	ldr	x0, [x0, #80]
    2070:	str	x0, [sp, #40]
    2074:	ldr	x0, [sp, #40]
    2078:	ldr	x0, [x0]
    207c:	str	x0, [sp, #32]
    2080:	ldr	x0, [sp, #32]
    2084:	bl	0 <grub_free>
    2088:	ldr	x0, [sp, #40]
    208c:	bl	0 <grub_free>
    2090:	adrp	x0, 0 <grub_swap_bytes16>
    2094:	add	x0, x0, #0x0
    2098:	ldr	x0, [x0]
    209c:	ldr	x0, [x0]
    20a0:	bl	0 <grub_dl_unref>
    20a4:	mov	w0, #0x0                   	// #0
    20a8:	ldp	x29, x30, [sp], #48
    20ac:	ret
	...

00000000000020b8 <grub_reiserfs_dir_iter>:
    20b8:	stp	x29, x30, [sp, #-80]!
    20bc:	mov	x29, sp
    20c0:	str	x0, [sp, #40]
    20c4:	str	w1, [sp, #36]
    20c8:	str	x2, [sp, #24]
    20cc:	str	x3, [sp, #16]
    20d0:	ldr	x0, [sp, #16]
    20d4:	str	x0, [sp, #72]
    20d8:	add	x0, sp, #0x38
    20dc:	mov	x2, #0x10                  	// #16
    20e0:	mov	w1, #0x0                   	// #0
    20e4:	bl	0 <grub_memset>
    20e8:	ldr	w0, [sp, #36]
    20ec:	and	w0, w0, #0xff
    20f0:	cmp	w0, #0x2
    20f4:	cset	w0, eq  // eq = none
    20f8:	and	w1, w0, #0xff
    20fc:	ldrb	w0, [sp, #56]
    2100:	bfxil	w0, w1, #0, #1
    2104:	strb	w0, [sp, #56]
    2108:	ldrb	w0, [sp, #56]
    210c:	orr	w0, w0, #0x2
    2110:	strb	w0, [sp, #56]
    2114:	ldr	x0, [sp, #24]
    2118:	ldr	w0, [x0, #24]
    211c:	str	w0, [sp, #60]
    2120:	ldr	x0, [sp, #24]
    2124:	bl	0 <grub_free>
    2128:	ldr	x0, [sp, #72]
    212c:	ldr	x3, [x0]
    2130:	ldr	x0, [sp, #72]
    2134:	ldr	x1, [x0, #8]
    2138:	add	x0, sp, #0x38
    213c:	mov	x2, x1
    2140:	mov	x1, x0
    2144:	ldr	x0, [sp, #40]
    2148:	blr	x3
    214c:	ldp	x29, x30, [sp], #80
    2150:	ret

0000000000002154 <grub_reiserfs_dir>:
    2154:	stp	x29, x30, [sp, #-176]!
    2158:	mov	x29, sp
    215c:	str	x0, [sp, #40]
    2160:	str	x1, [sp, #32]
    2164:	str	x2, [sp, #24]
    2168:	str	x3, [sp, #16]
    216c:	ldr	x0, [sp, #24]
    2170:	str	x0, [sp, #152]
    2174:	ldr	x0, [sp, #16]
    2178:	str	x0, [sp, #160]
    217c:	str	xzr, [sp, #168]
    2180:	adrp	x0, 0 <grub_swap_bytes16>
    2184:	add	x0, x0, #0x0
    2188:	ldr	x0, [x0]
    218c:	ldr	x0, [x0]
    2190:	bl	0 <grub_dl_ref>
    2194:	ldr	x0, [sp, #40]
    2198:	ldr	x0, [x0]
    219c:	bl	d20 <grub_reiserfs_mount>
    21a0:	str	x0, [sp, #168]
    21a4:	ldr	x0, [sp, #168]
    21a8:	cmp	x0, #0x0
    21ac:	b.eq	22b0 <grub_reiserfs_dir+0x15c>  // b.none
    21b0:	mov	w0, #0x1                   	// #1
    21b4:	str	w0, [sp, #56]
    21b8:	mov	w0, #0x2                   	// #2
    21bc:	str	w0, [sp, #60]
    21c0:	str	xzr, [sp, #64]
    21c4:	add	x0, sp, #0x38
    21c8:	mov	w2, #0x2                   	// #2
    21cc:	mov	w1, #0x1                   	// #1
    21d0:	bl	34c <grub_reiserfs_set_key_type>
    21d4:	add	x0, sp, #0x38
    21d8:	mov	x1, #0x1                   	// #1
    21dc:	bl	2b4 <grub_reiserfs_set_key_offset>
    21e0:	add	x1, sp, #0x50
    21e4:	add	x0, sp, #0x38
    21e8:	mov	w3, #0x1                   	// #1
    21ec:	mov	x2, x1
    21f0:	mov	x1, x0
    21f4:	ldr	x0, [sp, #168]
    21f8:	bl	684 <grub_reiserfs_get_item>
    21fc:	cmp	w0, #0x0
    2200:	b.ne	22b8 <grub_reiserfs_dir+0x164>  // b.any
    2204:	ldr	w0, [sp, #88]
    2208:	cmp	w0, #0x0
    220c:	b.ne	2228 <grub_reiserfs_dir+0xd4>  // b.any
    2210:	adrp	x0, 0 <grub_swap_bytes16>
    2214:	add	x0, x0, #0x0
    2218:	ldr	x1, [x0]
    221c:	mov	w0, #0x9                   	// #9
    2220:	bl	0 <grub_error>
    2224:	b	22c4 <grub_reiserfs_dir+0x170>
    2228:	add	x2, sp, #0x48
    222c:	add	x1, sp, #0x50
    2230:	mov	w5, #0x2                   	// #2
    2234:	adrp	x0, 0 <grub_swap_bytes16>
    2238:	add	x0, x0, #0x0
    223c:	ldr	x4, [x0]
    2240:	adrp	x0, 0 <grub_swap_bytes16>
    2244:	add	x0, x0, #0x0
    2248:	ldr	x3, [x0]
    224c:	ldr	x0, [sp, #32]
    2250:	bl	0 <grub_fshelp_find_file>
    2254:	adrp	x0, 0 <grub_swap_bytes16>
    2258:	add	x0, x0, #0x0
    225c:	ldr	x0, [x0]
    2260:	ldr	w0, [x0]
    2264:	cmp	w0, #0x0
    2268:	b.ne	22c0 <grub_reiserfs_dir+0x16c>  // b.any
    226c:	ldr	x3, [sp, #72]
    2270:	add	x0, sp, #0x98
    2274:	mov	x2, x0
    2278:	adrp	x0, 0 <grub_swap_bytes16>
    227c:	add	x0, x0, #0x0
    2280:	ldr	x1, [x0]
    2284:	mov	x0, x3
    2288:	bl	e38 <grub_reiserfs_iterate_dir>
    228c:	ldr	x0, [sp, #168]
    2290:	bl	0 <grub_free>
    2294:	adrp	x0, 0 <grub_swap_bytes16>
    2298:	add	x0, x0, #0x0
    229c:	ldr	x0, [x0]
    22a0:	ldr	x0, [x0]
    22a4:	bl	0 <grub_dl_unref>
    22a8:	mov	w0, #0x0                   	// #0
    22ac:	b	22f0 <grub_reiserfs_dir+0x19c>
    22b0:	nop
    22b4:	b	22c4 <grub_reiserfs_dir+0x170>
    22b8:	nop
    22bc:	b	22c4 <grub_reiserfs_dir+0x170>
    22c0:	nop
    22c4:	ldr	x0, [sp, #168]
    22c8:	bl	0 <grub_free>
    22cc:	adrp	x0, 0 <grub_swap_bytes16>
    22d0:	add	x0, x0, #0x0
    22d4:	ldr	x0, [x0]
    22d8:	ldr	x0, [x0]
    22dc:	bl	0 <grub_dl_unref>
    22e0:	adrp	x0, 0 <grub_swap_bytes16>
    22e4:	add	x0, x0, #0x0
    22e8:	ldr	x0, [x0]
    22ec:	ldr	w0, [x0]
    22f0:	ldp	x29, x30, [sp], #176
    22f4:	ret
	...

0000000000002328 <grub_reiserfs_label>:
    2328:	stp	x29, x30, [sp, #-48]!
    232c:	mov	x29, sp
    2330:	str	x0, [sp, #24]
    2334:	str	x1, [sp, #16]
    2338:	ldr	x0, [sp, #24]
    233c:	ldr	x0, [x0]
    2340:	str	x0, [sp, #40]
    2344:	adrp	x0, 0 <grub_swap_bytes16>
    2348:	add	x0, x0, #0x0
    234c:	ldr	x0, [x0]
    2350:	ldr	x0, [x0]
    2354:	bl	0 <grub_dl_ref>
    2358:	ldr	x0, [sp, #40]
    235c:	bl	d20 <grub_reiserfs_mount>
    2360:	str	x0, [sp, #32]
    2364:	ldr	x0, [sp, #32]
    2368:	cmp	x0, #0x0
    236c:	b.eq	2390 <grub_reiserfs_label+0x68>  // b.none
    2370:	ldr	x0, [sp, #32]
    2374:	add	x0, x0, #0x64
    2378:	mov	x1, #0x10                  	// #16
    237c:	bl	0 <grub_strndup>
    2380:	mov	x1, x0
    2384:	ldr	x0, [sp, #16]
    2388:	str	x1, [x0]
    238c:	b	2398 <grub_reiserfs_label+0x70>
    2390:	ldr	x0, [sp, #16]
    2394:	str	xzr, [x0]
    2398:	adrp	x0, 0 <grub_swap_bytes16>
    239c:	add	x0, x0, #0x0
    23a0:	ldr	x0, [x0]
    23a4:	ldr	x0, [x0]
    23a8:	bl	0 <grub_dl_unref>
    23ac:	ldr	x0, [sp, #32]
    23b0:	bl	0 <grub_free>
    23b4:	adrp	x0, 0 <grub_swap_bytes16>
    23b8:	add	x0, x0, #0x0
    23bc:	ldr	x0, [x0]
    23c0:	ldr	w0, [x0]
    23c4:	ldp	x29, x30, [sp], #48
    23c8:	ret
    23cc:	nop
	...

00000000000023e0 <grub_reiserfs_uuid>:
    23e0:	sub	sp, sp, #0x90
    23e4:	stp	x29, x30, [sp, #16]
    23e8:	add	x29, sp, #0x10
    23ec:	stp	x19, x20, [sp, #32]
    23f0:	stp	x21, x22, [sp, #48]
    23f4:	stp	x23, x24, [sp, #64]
    23f8:	str	x25, [sp, #80]
    23fc:	str	x0, [sp, #104]
    2400:	str	x1, [sp, #96]
    2404:	ldr	x0, [sp, #104]
    2408:	ldr	x0, [x0]
    240c:	str	x0, [sp, #128]
    2410:	adrp	x0, 0 <grub_swap_bytes16>
    2414:	add	x0, x0, #0x0
    2418:	ldr	x0, [x0]
    241c:	ldr	x0, [x0]
    2420:	bl	0 <grub_dl_ref>
    2424:	ldr	x0, [sp, #96]
    2428:	str	xzr, [x0]
    242c:	ldr	x0, [sp, #128]
    2430:	bl	d20 <grub_reiserfs_mount>
    2434:	str	x0, [sp, #120]
    2438:	ldr	x0, [sp, #120]
    243c:	cmp	x0, #0x0
    2440:	b.eq	2570 <grub_reiserfs_uuid+0x190>  // b.none
    2444:	str	wzr, [sp, #140]
    2448:	b	2478 <grub_reiserfs_uuid+0x98>
    244c:	ldr	x1, [sp, #120]
    2450:	ldr	w0, [sp, #140]
    2454:	add	x0, x0, #0x28
    2458:	lsl	x0, x0, #1
    245c:	add	x0, x1, x0
    2460:	ldrh	w0, [x0, #4]
    2464:	cmp	w0, #0x0
    2468:	b.ne	2488 <grub_reiserfs_uuid+0xa8>  // b.any
    246c:	ldr	w0, [sp, #140]
    2470:	add	w0, w0, #0x1
    2474:	str	w0, [sp, #140]
    2478:	ldr	w0, [sp, #140]
    247c:	cmp	w0, #0x7
    2480:	b.ls	244c <grub_reiserfs_uuid+0x6c>  // b.plast
    2484:	b	248c <grub_reiserfs_uuid+0xac>
    2488:	nop
    248c:	ldr	w0, [sp, #140]
    2490:	cmp	w0, #0x7
    2494:	b.hi	2570 <grub_reiserfs_uuid+0x190>  // b.pmore
    2498:	ldr	x0, [sp, #120]
    249c:	ldrh	w0, [x0, #84]
    24a0:	bl	0 <grub_swap_bytes16>
    24a4:	and	w0, w0, #0xffff
    24a8:	mov	w19, w0
    24ac:	ldr	x0, [sp, #120]
    24b0:	ldrh	w0, [x0, #86]
    24b4:	bl	0 <grub_swap_bytes16>
    24b8:	and	w0, w0, #0xffff
    24bc:	mov	w20, w0
    24c0:	ldr	x0, [sp, #120]
    24c4:	ldrh	w0, [x0, #88]
    24c8:	bl	0 <grub_swap_bytes16>
    24cc:	and	w0, w0, #0xffff
    24d0:	mov	w21, w0
    24d4:	ldr	x0, [sp, #120]
    24d8:	ldrh	w0, [x0, #90]
    24dc:	bl	0 <grub_swap_bytes16>
    24e0:	and	w0, w0, #0xffff
    24e4:	mov	w22, w0
    24e8:	ldr	x0, [sp, #120]
    24ec:	ldrh	w0, [x0, #92]
    24f0:	bl	0 <grub_swap_bytes16>
    24f4:	and	w0, w0, #0xffff
    24f8:	mov	w23, w0
    24fc:	ldr	x0, [sp, #120]
    2500:	ldrh	w0, [x0, #94]
    2504:	bl	0 <grub_swap_bytes16>
    2508:	and	w0, w0, #0xffff
    250c:	mov	w24, w0
    2510:	ldr	x0, [sp, #120]
    2514:	ldrh	w0, [x0, #96]
    2518:	bl	0 <grub_swap_bytes16>
    251c:	and	w0, w0, #0xffff
    2520:	mov	w25, w0
    2524:	ldr	x0, [sp, #120]
    2528:	ldrh	w0, [x0, #98]
    252c:	bl	0 <grub_swap_bytes16>
    2530:	and	w0, w0, #0xffff
    2534:	str	w0, [sp]
    2538:	mov	w7, w25
    253c:	mov	w6, w24
    2540:	mov	w5, w23
    2544:	mov	w4, w22
    2548:	mov	w3, w21
    254c:	mov	w2, w20
    2550:	mov	w1, w19
    2554:	adrp	x0, 0 <grub_swap_bytes16>
    2558:	add	x0, x0, #0x0
    255c:	ldr	x0, [x0]
    2560:	bl	0 <grub_xasprintf>
    2564:	mov	x1, x0
    2568:	ldr	x0, [sp, #96]
    256c:	str	x1, [x0]
    2570:	adrp	x0, 0 <grub_swap_bytes16>
    2574:	add	x0, x0, #0x0
    2578:	ldr	x0, [x0]
    257c:	ldr	x0, [x0]
    2580:	bl	0 <grub_dl_unref>
    2584:	ldr	x0, [sp, #120]
    2588:	bl	0 <grub_free>
    258c:	adrp	x0, 0 <grub_swap_bytes16>
    2590:	add	x0, x0, #0x0
    2594:	ldr	x0, [x0]
    2598:	ldr	w0, [x0]
    259c:	ldp	x19, x20, [sp, #32]
    25a0:	ldp	x21, x22, [sp, #48]
    25a4:	ldp	x23, x24, [sp, #64]
    25a8:	ldr	x25, [sp, #80]
    25ac:	ldp	x29, x30, [sp, #16]
    25b0:	add	sp, sp, #0x90
    25b4:	ret
	...

00000000000025d0 <grub_mod_init>:
    25d0:	stp	x29, x30, [sp, #-32]!
    25d4:	mov	x29, sp
    25d8:	str	x0, [sp, #24]
    25dc:	adrp	x0, 0 <grub_swap_bytes16>
    25e0:	add	x0, x0, #0x0
    25e4:	ldr	x0, [x0]
    25e8:	bl	38 <grub_fs_register>
    25ec:	adrp	x0, 0 <grub_swap_bytes16>
    25f0:	add	x0, x0, #0x0
    25f4:	ldr	x0, [x0]
    25f8:	ldr	x1, [sp, #24]
    25fc:	str	x1, [x0]
    2600:	nop
    2604:	ldp	x29, x30, [sp], #32
    2608:	ret
    260c:	nop
	...

0000000000002620 <grub_mod_fini>:
    2620:	stp	x29, x30, [sp, #-16]!
    2624:	mov	x29, sp
    2628:	adrp	x0, 0 <grub_swap_bytes16>
    262c:	add	x0, x0, #0x0
    2630:	ldr	x0, [x0]
    2634:	bl	70 <grub_fs_unregister>
    2638:	nop
    263c:	ldp	x29, x30, [sp], #16
    2640:	ret
    2644:	nop
	...
