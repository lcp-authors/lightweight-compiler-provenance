
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//v4l_id_clang_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

00000000004007c8 <_init>:
  4007c8:	stp	x29, x30, [sp, #-16]!
  4007cc:	mov	x29, sp
  4007d0:	bl	4008e0 <call_weak_fn>
  4007d4:	ldp	x29, x30, [sp], #16
  4007d8:	ret

Disassembly of section .plt:

00000000004007e0 <__libc_start_main@plt-0x20>:
  4007e0:	stp	x16, x30, [sp, #-16]!
  4007e4:	adrp	x16, 41f000 <__FRAME_END__+0x1dfb0>
  4007e8:	ldr	x17, [x16, #4016]
  4007ec:	add	x16, x16, #0xfb0
  4007f0:	br	x17
  4007f4:	nop
  4007f8:	nop
  4007fc:	nop

0000000000400800 <__libc_start_main@plt>:
  400800:	adrp	x16, 41f000 <__FRAME_END__+0x1dfb0>
  400804:	ldr	x17, [x16, #4024]
  400808:	add	x16, x16, #0xfb8
  40080c:	br	x17

0000000000400810 <abort@plt>:
  400810:	adrp	x16, 41f000 <__FRAME_END__+0x1dfb0>
  400814:	ldr	x17, [x16, #4032]
  400818:	add	x16, x16, #0xfc0
  40081c:	br	x17

0000000000400820 <__gmon_start__@plt>:
  400820:	adrp	x16, 41f000 <__FRAME_END__+0x1dfb0>
  400824:	ldr	x17, [x16, #4040]
  400828:	add	x16, x16, #0xfc8
  40082c:	br	x17

0000000000400830 <getopt_long@plt>:
  400830:	adrp	x16, 41f000 <__FRAME_END__+0x1dfb0>
  400834:	ldr	x17, [x16, #4048]
  400838:	add	x16, x16, #0xfd0
  40083c:	br	x17

0000000000400840 <printf@plt>:
  400840:	adrp	x16, 41f000 <__FRAME_END__+0x1dfb0>
  400844:	ldr	x17, [x16, #4056]
  400848:	add	x16, x16, #0xfd8
  40084c:	br	x17

0000000000400850 <log_assert_failed_unreachable_realm@plt>:
  400850:	adrp	x16, 41f000 <__FRAME_END__+0x1dfb0>
  400854:	ldr	x17, [x16, #4064]
  400858:	add	x16, x16, #0xfe0
  40085c:	br	x17

0000000000400860 <open64@plt>:
  400860:	adrp	x16, 41f000 <__FRAME_END__+0x1dfb0>
  400864:	ldr	x17, [x16, #4072]
  400868:	add	x16, x16, #0xfe8
  40086c:	br	x17

0000000000400870 <ioctl@plt>:
  400870:	adrp	x16, 41f000 <__FRAME_END__+0x1dfb0>
  400874:	ldr	x17, [x16, #4080]
  400878:	add	x16, x16, #0xff0
  40087c:	br	x17

0000000000400880 <safe_close@plt>:
  400880:	adrp	x16, 41f000 <__FRAME_END__+0x1dfb0>
  400884:	ldr	x17, [x16, #4088]
  400888:	add	x16, x16, #0xff8
  40088c:	br	x17

Disassembly of section .text:

0000000000400890 <_start>:
  400890:	mov	x29, #0x0                   	// #0
  400894:	mov	x30, #0x0                   	// #0
  400898:	mov	x5, x0
  40089c:	ldr	x1, [sp]
  4008a0:	add	x2, sp, #0x8
  4008a4:	mov	x6, sp
  4008a8:	movz	x0, #0x0, lsl #48
  4008ac:	movk	x0, #0x0, lsl #32
  4008b0:	movk	x0, #0x40, lsl #16
  4008b4:	movk	x0, #0xa58
  4008b8:	movz	x3, #0x0, lsl #48
  4008bc:	movk	x3, #0x0, lsl #32
  4008c0:	movk	x3, #0x40, lsl #16
  4008c4:	movk	x3, #0xd58
  4008c8:	movz	x4, #0x0, lsl #48
  4008cc:	movk	x4, #0x0, lsl #32
  4008d0:	movk	x4, #0x40, lsl #16
  4008d4:	movk	x4, #0xdd8
  4008d8:	bl	400800 <__libc_start_main@plt>
  4008dc:	bl	400810 <abort@plt>

00000000004008e0 <call_weak_fn>:
  4008e0:	adrp	x0, 41f000 <__FRAME_END__+0x1dfb0>
  4008e4:	ldr	x0, [x0, #3992]
  4008e8:	cbz	x0, 4008f0 <call_weak_fn+0x10>
  4008ec:	b	400820 <__gmon_start__@plt>
  4008f0:	ret

00000000004008f4 <deregister_tm_clones>:
  4008f4:	stp	x29, x30, [sp, #-32]!
  4008f8:	mov	x29, sp
  4008fc:	adrp	x0, 420000 <completed.8445>
  400900:	add	x0, x0, #0x0
  400904:	str	x0, [sp, #24]
  400908:	ldr	x0, [sp, #24]
  40090c:	str	x0, [sp, #24]
  400910:	ldr	x1, [sp, #24]
  400914:	adrp	x0, 420000 <completed.8445>
  400918:	add	x0, x0, #0x0
  40091c:	cmp	x1, x0
  400920:	b.eq	40095c <deregister_tm_clones+0x68>  // b.none
  400924:	adrp	x0, 400000 <_init-0x7c8>
  400928:	add	x0, x0, #0xdf0
  40092c:	ldr	x0, [x0]
  400930:	str	x0, [sp, #16]
  400934:	ldr	x0, [sp, #16]
  400938:	str	x0, [sp, #16]
  40093c:	ldr	x0, [sp, #16]
  400940:	cmp	x0, #0x0
  400944:	b.eq	400960 <deregister_tm_clones+0x6c>  // b.none
  400948:	ldr	x1, [sp, #16]
  40094c:	adrp	x0, 420000 <completed.8445>
  400950:	add	x0, x0, #0x0
  400954:	blr	x1
  400958:	b	400960 <deregister_tm_clones+0x6c>
  40095c:	nop
  400960:	ldp	x29, x30, [sp], #32
  400964:	ret

0000000000400968 <register_tm_clones>:
  400968:	stp	x29, x30, [sp, #-48]!
  40096c:	mov	x29, sp
  400970:	adrp	x0, 420000 <completed.8445>
  400974:	add	x0, x0, #0x0
  400978:	str	x0, [sp, #40]
  40097c:	ldr	x0, [sp, #40]
  400980:	str	x0, [sp, #40]
  400984:	ldr	x1, [sp, #40]
  400988:	adrp	x0, 420000 <completed.8445>
  40098c:	add	x0, x0, #0x0
  400990:	sub	x0, x1, x0
  400994:	asr	x0, x0, #3
  400998:	lsr	x1, x0, #63
  40099c:	add	x0, x1, x0
  4009a0:	asr	x0, x0, #1
  4009a4:	str	x0, [sp, #32]
  4009a8:	ldr	x0, [sp, #32]
  4009ac:	cmp	x0, #0x0
  4009b0:	b.eq	4009f0 <register_tm_clones+0x88>  // b.none
  4009b4:	adrp	x0, 400000 <_init-0x7c8>
  4009b8:	add	x0, x0, #0xdf8
  4009bc:	ldr	x0, [x0]
  4009c0:	str	x0, [sp, #24]
  4009c4:	ldr	x0, [sp, #24]
  4009c8:	str	x0, [sp, #24]
  4009cc:	ldr	x0, [sp, #24]
  4009d0:	cmp	x0, #0x0
  4009d4:	b.eq	4009f4 <register_tm_clones+0x8c>  // b.none
  4009d8:	ldr	x2, [sp, #24]
  4009dc:	ldr	x1, [sp, #32]
  4009e0:	adrp	x0, 420000 <completed.8445>
  4009e4:	add	x0, x0, #0x0
  4009e8:	blr	x2
  4009ec:	b	4009f4 <register_tm_clones+0x8c>
  4009f0:	nop
  4009f4:	ldp	x29, x30, [sp], #48
  4009f8:	ret

00000000004009fc <__do_global_dtors_aux>:
  4009fc:	stp	x29, x30, [sp, #-16]!
  400a00:	mov	x29, sp
  400a04:	adrp	x0, 420000 <completed.8445>
  400a08:	add	x0, x0, #0x0
  400a0c:	ldrb	w0, [x0]
  400a10:	and	x0, x0, #0xff
  400a14:	cmp	x0, #0x0
  400a18:	b.ne	400a34 <__do_global_dtors_aux+0x38>  // b.any
  400a1c:	bl	4008f4 <deregister_tm_clones>
  400a20:	adrp	x0, 420000 <completed.8445>
  400a24:	add	x0, x0, #0x0
  400a28:	mov	w1, #0x1                   	// #1
  400a2c:	strb	w1, [x0]
  400a30:	b	400a38 <__do_global_dtors_aux+0x3c>
  400a34:	nop
  400a38:	ldp	x29, x30, [sp], #16
  400a3c:	ret

0000000000400a40 <frame_dummy>:
  400a40:	stp	x29, x30, [sp, #-16]!
  400a44:	mov	x29, sp
  400a48:	bl	400968 <register_tm_clones>
  400a4c:	nop
  400a50:	ldp	x29, x30, [sp], #16
  400a54:	ret

0000000000400a58 <main>:
  400a58:	sub	sp, sp, #0xc0
  400a5c:	stp	x29, x30, [sp, #176]
  400a60:	add	x29, sp, #0xb0
  400a64:	sub	x8, x29, #0x10
  400a68:	mov	w9, #0xffffffff            	// #-1
  400a6c:	adrp	x10, 400000 <_init-0x7c8>
  400a70:	add	x10, x10, #0xeb4
  400a74:	add	x2, x10, #0x3
  400a78:	stur	wzr, [x29, #-4]
  400a7c:	stur	w0, [x29, #-8]
  400a80:	str	x1, [x8]
  400a84:	stur	w9, [x29, #-20]
  400a88:	str	x8, [sp, #16]
  400a8c:	str	x2, [sp, #8]
  400a90:	ldur	w0, [x29, #-8]
  400a94:	ldr	x8, [sp, #16]
  400a98:	ldr	x1, [x8]
  400a9c:	adrp	x2, 400000 <_init-0x7c8>
  400aa0:	add	x2, x2, #0xe45
  400aa4:	adrp	x3, 400000 <_init-0x7c8>
  400aa8:	add	x3, x3, #0xe00
  400aac:	mov	x9, xzr
  400ab0:	mov	x4, x9
  400ab4:	bl	400830 <getopt_long@plt>
  400ab8:	str	w0, [sp, #36]
  400abc:	cmp	w0, #0x0
  400ac0:	cset	w10, lt  // lt = tstop
  400ac4:	tbnz	w10, #0, 400b50 <main+0xf8>
  400ac8:	ldr	w8, [sp, #36]
  400acc:	cmp	w8, #0x3f
  400ad0:	str	w8, [sp, #4]
  400ad4:	b.eq	400b1c <main+0xc4>  // b.none
  400ad8:	b	400adc <main+0x84>
  400adc:	ldr	w8, [sp, #4]
  400ae0:	cmp	w8, #0x68
  400ae4:	cset	w9, eq  // eq = none
  400ae8:	eor	w9, w9, #0x1
  400aec:	tbnz	w9, #0, 400b30 <main+0xd8>
  400af0:	b	400af4 <main+0x9c>
  400af4:	adrp	x8, 420000 <completed.8445>
  400af8:	add	x8, x8, #0x8
  400afc:	ldr	x1, [x8]
  400b00:	adrp	x0, 400000 <_init-0x7c8>
  400b04:	add	x0, x0, #0xe47
  400b08:	bl	400840 <printf@plt>
  400b0c:	stur	wzr, [x29, #-4]
  400b10:	mov	w9, #0x1                   	// #1
  400b14:	str	w9, [sp, #32]
  400b18:	b	400d18 <main+0x2c0>
  400b1c:	mov	w8, #0xffffffea            	// #-22
  400b20:	stur	w8, [x29, #-4]
  400b24:	mov	w8, #0x1                   	// #1
  400b28:	str	w8, [sp, #32]
  400b2c:	b	400d18 <main+0x2c0>
  400b30:	mov	w0, #0x1                   	// #1
  400b34:	adrp	x1, 400000 <_init-0x7c8>
  400b38:	add	x1, x1, #0xea3
  400b3c:	ldr	x2, [sp, #8]
  400b40:	mov	w3, #0x37                  	// #55
  400b44:	adrp	x4, 400000 <_init-0x7c8>
  400b48:	add	x4, x4, #0xed0
  400b4c:	bl	400850 <log_assert_failed_unreachable_realm@plt>
  400b50:	ldr	x8, [sp, #16]
  400b54:	ldr	x9, [x8]
  400b58:	adrp	x10, 420000 <completed.8445>
  400b5c:	add	x10, x10, #0x10
  400b60:	ldrsw	x10, [x10]
  400b64:	mov	x11, #0x8                   	// #8
  400b68:	mul	x10, x11, x10
  400b6c:	add	x9, x9, x10
  400b70:	ldr	x9, [x9]
  400b74:	stur	x9, [x29, #-32]
  400b78:	ldur	x9, [x29, #-32]
  400b7c:	cbnz	x9, 400b94 <main+0x13c>
  400b80:	mov	w8, #0x2                   	// #2
  400b84:	stur	w8, [x29, #-4]
  400b88:	mov	w8, #0x1                   	// #1
  400b8c:	str	w8, [sp, #32]
  400b90:	b	400d18 <main+0x2c0>
  400b94:	ldur	x0, [x29, #-32]
  400b98:	mov	w8, wzr
  400b9c:	mov	w1, w8
  400ba0:	bl	400860 <open64@plt>
  400ba4:	stur	w0, [x29, #-20]
  400ba8:	ldur	w8, [x29, #-20]
  400bac:	cmp	w8, #0x0
  400bb0:	cset	w8, ge  // ge = tcont
  400bb4:	tbnz	w8, #0, 400bcc <main+0x174>
  400bb8:	mov	w8, #0x3                   	// #3
  400bbc:	stur	w8, [x29, #-4]
  400bc0:	mov	w8, #0x1                   	// #1
  400bc4:	str	w8, [sp, #32]
  400bc8:	b	400d18 <main+0x2c0>
  400bcc:	ldur	w0, [x29, #-20]
  400bd0:	mov	x1, #0x5600                	// #22016
  400bd4:	movk	x1, #0x8068, lsl #16
  400bd8:	add	x2, sp, #0x28
  400bdc:	bl	400870 <ioctl@plt>
  400be0:	cbnz	w0, 400d0c <main+0x2b4>
  400be4:	adrp	x0, 400000 <_init-0x7c8>
  400be8:	add	x0, x0, #0xee7
  400bec:	bl	400840 <printf@plt>
  400bf0:	add	x8, sp, #0x28
  400bf4:	add	x1, x8, #0x10
  400bf8:	adrp	x8, 400000 <_init-0x7c8>
  400bfc:	add	x8, x8, #0xef9
  400c00:	mov	x0, x8
  400c04:	bl	400840 <printf@plt>
  400c08:	adrp	x8, 400000 <_init-0x7c8>
  400c0c:	add	x8, x8, #0xf0c
  400c10:	mov	x0, x8
  400c14:	bl	400840 <printf@plt>
  400c18:	ldr	w9, [sp, #124]
  400c1c:	and	w9, w9, #0x80000000
  400c20:	cbz	w9, 400c30 <main+0x1d8>
  400c24:	ldr	w8, [sp, #128]
  400c28:	str	w8, [sp, #28]
  400c2c:	b	400c38 <main+0x1e0>
  400c30:	ldr	w8, [sp, #124]
  400c34:	str	w8, [sp, #28]
  400c38:	ldr	w8, [sp, #28]
  400c3c:	tst	w8, #0x1
  400c40:	cset	w8, gt
  400c44:	tbnz	w8, #0, 400c58 <main+0x200>
  400c48:	ldr	w8, [sp, #28]
  400c4c:	tst	w8, #0x1000
  400c50:	cset	w8, le
  400c54:	tbnz	w8, #0, 400c64 <main+0x20c>
  400c58:	adrp	x0, 400000 <_init-0x7c8>
  400c5c:	add	x0, x0, #0xf22
  400c60:	bl	400840 <printf@plt>
  400c64:	ldr	w8, [sp, #28]
  400c68:	tst	w8, #0x2
  400c6c:	cset	w8, gt
  400c70:	tbnz	w8, #0, 400c84 <main+0x22c>
  400c74:	ldr	w8, [sp, #28]
  400c78:	tst	w8, #0x2000
  400c7c:	cset	w8, le
  400c80:	tbnz	w8, #0, 400c90 <main+0x238>
  400c84:	adrp	x0, 400000 <_init-0x7c8>
  400c88:	add	x0, x0, #0xf2b
  400c8c:	bl	400840 <printf@plt>
  400c90:	ldr	w8, [sp, #28]
  400c94:	tst	w8, #0x4
  400c98:	cset	w8, le
  400c9c:	tbnz	w8, #0, 400cac <main+0x254>
  400ca0:	adrp	x0, 400000 <_init-0x7c8>
  400ca4:	add	x0, x0, #0xf39
  400ca8:	bl	400840 <printf@plt>
  400cac:	ldr	w8, [sp, #28]
  400cb0:	tst	w8, #0x20000
  400cb4:	cset	w8, le
  400cb8:	tbnz	w8, #0, 400cc8 <main+0x270>
  400cbc:	adrp	x0, 400000 <_init-0x7c8>
  400cc0:	add	x0, x0, #0xf48
  400cc4:	bl	400840 <printf@plt>
  400cc8:	ldr	w8, [sp, #28]
  400ccc:	tst	w8, #0x10000
  400cd0:	cset	w8, le
  400cd4:	tbnz	w8, #0, 400ce4 <main+0x28c>
  400cd8:	adrp	x0, 400000 <_init-0x7c8>
  400cdc:	add	x0, x0, #0xf4f
  400ce0:	bl	400840 <printf@plt>
  400ce4:	ldr	w8, [sp, #28]
  400ce8:	tst	w8, #0x40000
  400cec:	cset	w8, le
  400cf0:	tbnz	w8, #0, 400d00 <main+0x2a8>
  400cf4:	adrp	x0, 400000 <_init-0x7c8>
  400cf8:	add	x0, x0, #0xf56
  400cfc:	bl	400840 <printf@plt>
  400d00:	adrp	x0, 400000 <_init-0x7c8>
  400d04:	add	x0, x0, #0xf5d
  400d08:	bl	400840 <printf@plt>
  400d0c:	stur	wzr, [x29, #-4]
  400d10:	mov	w8, #0x1                   	// #1
  400d14:	str	w8, [sp, #32]
  400d18:	sub	x0, x29, #0x14
  400d1c:	bl	400d30 <closep>
  400d20:	ldur	w0, [x29, #-4]
  400d24:	ldp	x29, x30, [sp, #176]
  400d28:	add	sp, sp, #0xc0
  400d2c:	ret

0000000000400d30 <closep>:
  400d30:	sub	sp, sp, #0x20
  400d34:	stp	x29, x30, [sp, #16]
  400d38:	add	x29, sp, #0x10
  400d3c:	str	x0, [sp, #8]
  400d40:	ldr	x8, [sp, #8]
  400d44:	ldr	w0, [x8]
  400d48:	bl	400880 <safe_close@plt>
  400d4c:	ldp	x29, x30, [sp, #16]
  400d50:	add	sp, sp, #0x20
  400d54:	ret

0000000000400d58 <__libc_csu_init>:
  400d58:	stp	x29, x30, [sp, #-64]!
  400d5c:	mov	x29, sp
  400d60:	stp	x19, x20, [sp, #16]
  400d64:	adrp	x20, 41f000 <__FRAME_END__+0x1dfb0>
  400d68:	add	x20, x20, #0xd70
  400d6c:	stp	x21, x22, [sp, #32]
  400d70:	adrp	x21, 41f000 <__FRAME_END__+0x1dfb0>
  400d74:	add	x21, x21, #0xd68
  400d78:	sub	x20, x20, x21
  400d7c:	mov	w22, w0
  400d80:	stp	x23, x24, [sp, #48]
  400d84:	mov	x23, x1
  400d88:	mov	x24, x2
  400d8c:	bl	4007c8 <_init>
  400d90:	cmp	xzr, x20, asr #3
  400d94:	b.eq	400dc0 <__libc_csu_init+0x68>  // b.none
  400d98:	asr	x20, x20, #3
  400d9c:	mov	x19, #0x0                   	// #0
  400da0:	ldr	x3, [x21, x19, lsl #3]
  400da4:	mov	x2, x24
  400da8:	add	x19, x19, #0x1
  400dac:	mov	x1, x23
  400db0:	mov	w0, w22
  400db4:	blr	x3
  400db8:	cmp	x20, x19
  400dbc:	b.ne	400da0 <__libc_csu_init+0x48>  // b.any
  400dc0:	ldp	x19, x20, [sp, #16]
  400dc4:	ldp	x21, x22, [sp, #32]
  400dc8:	ldp	x23, x24, [sp, #48]
  400dcc:	ldp	x29, x30, [sp], #64
  400dd0:	ret
  400dd4:	nop

0000000000400dd8 <__libc_csu_fini>:
  400dd8:	ret

Disassembly of section .fini:

0000000000400ddc <_fini>:
  400ddc:	stp	x29, x30, [sp, #-16]!
  400de0:	mov	x29, sp
  400de4:	ldp	x29, x30, [sp], #16
  400de8:	ret
