In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libgomp.a_clang_-Os:

alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_malloc>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <malloc>
  14:	cbnz	x0, 28 <gomp_malloc+0x28>
  18:	adrp	x0, 0 <gomp_malloc>
  1c:	mov	x1, x19
  20:	add	x0, x0, #0x0
  24:	bl	0 <gomp_fatal>
  28:	ldr	x19, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

0000000000000034 <gomp_malloc_cleared>:
  34:	stp	x29, x30, [sp, #-32]!
  38:	mov	x1, x0
  3c:	mov	x29, sp
  40:	str	x19, [sp, #16]
  44:	mov	x19, x0
  48:	mov	x0, #0x1                   	// #1
  4c:	bl	0 <calloc>
  50:	cbnz	x0, 64 <gomp_malloc_cleared+0x30>
  54:	adrp	x0, 0 <gomp_malloc>
  58:	mov	x1, x19
  5c:	add	x0, x0, #0x0
  60:	bl	0 <gomp_fatal>
  64:	ldr	x19, [sp, #16]
  68:	ldp	x29, x30, [sp], #32
  6c:	ret

0000000000000070 <gomp_realloc>:
  70:	stp	x29, x30, [sp, #-32]!
  74:	mov	x29, sp
  78:	str	x19, [sp, #16]
  7c:	mov	x19, x1
  80:	bl	0 <realloc>
  84:	cbnz	x0, 98 <gomp_realloc+0x28>
  88:	adrp	x0, 0 <gomp_malloc>
  8c:	mov	x1, x19
  90:	add	x0, x0, #0x0
  94:	bl	0 <gomp_fatal>
  98:	ldr	x19, [sp, #16]
  9c:	ldp	x29, x30, [sp], #32
  a0:	ret

00000000000000a4 <gomp_aligned_alloc>:
  a4:	stp	x29, x30, [sp, #-32]!
  a8:	cmp	x0, #0x8
  ac:	mov	x2, #0x8                   	// #8
  b0:	mov	x29, sp
  b4:	csel	x0, x0, x2, cs  // cs = hs, nlast
  b8:	str	x19, [sp, #16]
  bc:	mov	x19, x1
  c0:	bl	0 <aligned_alloc>
  c4:	cbnz	x0, d8 <gomp_aligned_alloc+0x34>
  c8:	adrp	x0, 0 <gomp_malloc>
  cc:	mov	x1, x19
  d0:	add	x0, x0, #0x0
  d4:	bl	0 <gomp_fatal>
  d8:	ldr	x19, [sp, #16]
  dc:	ldp	x29, x30, [sp], #32
  e0:	ret

00000000000000e4 <gomp_aligned_free>:
  e4:	b	0 <free>

atomic.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_atomic_start>:
   0:	adrp	x0, 0 <GOMP_atomic_start>
   4:	add	x0, x0, #0x0
   8:	mov	w2, #0x1                   	// #1
   c:	ldaxr	w1, [x0]
  10:	cbnz	w1, 1c <GOMP_atomic_start+0x1c>
  14:	stxr	w3, w2, [x0]
  18:	cbnz	w3, c <GOMP_atomic_start+0xc>
  1c:	cmp	w1, #0x0
  20:	b.eq	28 <GOMP_atomic_start+0x28>  // b.none
  24:	b	0 <gomp_mutex_lock_slow>
  28:	ret

000000000000002c <GOMP_atomic_end>:
  2c:	adrp	x0, 0 <GOMP_atomic_start>
  30:	add	x0, x0, #0x0
  34:	ldxr	w1, [x0]
  38:	stlxr	w2, wzr, [x0]
  3c:	cbnz	w2, 34 <GOMP_atomic_end+0x8>
  40:	tbz	w1, #31, 48 <GOMP_atomic_end+0x1c>
  44:	b	0 <gomp_mutex_unlock_slow>
  48:	ret

barrier.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_barrier>:
   0:	adrp	x0, 0 <gomp_tls_data>
   4:	ldr	x0, [x0]
   8:	mrs	x1, tpidr_el0
   c:	add	x0, x1, x0
  10:	ldr	x0, [x0, #16]
  14:	cbz	x0, 20 <GOMP_barrier+0x20>
  18:	add	x0, x0, #0x80
  1c:	b	0 <gomp_team_barrier_wait>
  20:	ret

0000000000000024 <GOMP_barrier_cancel>:
  24:	adrp	x0, 0 <gomp_tls_data>
  28:	ldr	x0, [x0]
  2c:	mrs	x1, tpidr_el0
  30:	add	x0, x1, x0
  34:	ldr	x0, [x0, #16]
  38:	add	x0, x0, #0x80
  3c:	b	0 <gomp_team_barrier_wait_cancel>

critical.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_unlock>:
   0:	mov	x1, x0
   4:	ldxr	w2, [x1]
   8:	stlxr	w3, wzr, [x1]
   c:	cbnz	w3, 4 <gomp_mutex_unlock+0x4>
  10:	tbz	w2, #31, 18 <gomp_mutex_unlock+0x18>
  14:	b	0 <gomp_mutex_unlock_slow>
  18:	ret

000000000000001c <GOMP_critical_start>:
  1c:	dmb	ish
  20:	adrp	x0, 0 <gomp_mutex_unlock>
  24:	add	x0, x0, #0x0
  28:	mov	w2, #0x1                   	// #1
  2c:	ldaxr	w1, [x0]
  30:	cbnz	w1, 3c <GOMP_critical_start+0x20>
  34:	stxr	w3, w2, [x0]
  38:	cbnz	w3, 2c <GOMP_critical_start+0x10>
  3c:	cmp	w1, #0x0
  40:	b.eq	48 <GOMP_critical_start+0x2c>  // b.none
  44:	b	0 <gomp_mutex_lock_slow>
  48:	ret

000000000000004c <GOMP_critical_end>:
  4c:	adrp	x0, 0 <gomp_mutex_unlock>
  50:	add	x0, x0, #0x0
  54:	b	0 <gomp_mutex_unlock>

0000000000000058 <GOMP_critical_name_start>:
  58:	mov	x2, x0
  5c:	mov	w3, #0x1                   	// #1
  60:	ldaxr	w1, [x2]
  64:	cbnz	w1, 70 <GOMP_critical_name_start+0x18>
  68:	stxr	w4, w3, [x2]
  6c:	cbnz	w4, 60 <GOMP_critical_name_start+0x8>
  70:	cmp	w1, #0x0
  74:	b.eq	7c <GOMP_critical_name_start+0x24>  // b.none
  78:	b	0 <gomp_mutex_lock_slow>
  7c:	ret

0000000000000080 <GOMP_critical_name_end>:
  80:	b	0 <gomp_mutex_unlock>

env.o:     file format elf64-littleaarch64


Disassembly of section .text.startup:

0000000000000000 <parse_boolean>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	mov	x20, x1
      10:	stp	x21, x22, [sp, #32]
      14:	mov	x21, x0
      18:	bl	0 <getenv>
      1c:	cbz	x0, cc <parse_boolean+0xcc>
      20:	mov	x19, x0
      24:	bl	0 <__ctype_b_loc>
      28:	ldr	x22, [x0]
      2c:	ldrb	w0, [x19]
      30:	ldrh	w0, [x22, x0, lsl #1]
      34:	tbnz	w0, #13, 8c <parse_boolean+0x8c>
      38:	adrp	x1, 0 <parse_boolean>
      3c:	mov	x0, x19
      40:	add	x1, x1, #0x0
      44:	mov	x2, #0x4                   	// #4
      48:	bl	0 <strncasecmp>
      4c:	cbnz	w0, a0 <parse_boolean+0xa0>
      50:	add	x19, x19, #0x4
      54:	mov	w0, #0x1                   	// #1
      58:	strb	w0, [x20]
      5c:	ldrb	w1, [x19]
      60:	ldrb	w0, [x19]
      64:	ldrh	w1, [x22, x1, lsl #1]
      68:	tbnz	w1, #13, c4 <parse_boolean+0xc4>
      6c:	cbz	w0, cc <parse_boolean+0xcc>
      70:	mov	x1, x21
      74:	adrp	x0, 0 <parse_boolean>
      78:	ldp	x19, x20, [sp, #16]
      7c:	add	x0, x0, #0x0
      80:	ldp	x21, x22, [sp, #32]
      84:	ldp	x29, x30, [sp], #48
      88:	b	0 <gomp_error>
      8c:	add	x19, x19, #0x1
      90:	b	2c <parse_boolean+0x2c>
      94:	adrp	x19, 0 <parse_boolean>
      98:	add	x19, x19, #0x0
      9c:	b	5c <parse_boolean+0x5c>
      a0:	adrp	x1, 0 <parse_boolean>
      a4:	mov	x0, x19
      a8:	add	x1, x1, #0x0
      ac:	mov	x2, #0x5                   	// #5
      b0:	bl	0 <strncasecmp>
      b4:	cbnz	w0, 94 <parse_boolean+0x94>
      b8:	add	x19, x19, #0x5
      bc:	strb	wzr, [x20]
      c0:	b	5c <parse_boolean+0x5c>
      c4:	add	x19, x19, #0x1
      c8:	b	5c <parse_boolean+0x5c>
      cc:	ldp	x19, x20, [sp, #16]
      d0:	ldp	x21, x22, [sp, #32]
      d4:	ldp	x29, x30, [sp], #48
      d8:	ret

00000000000000dc <parse_unsigned_long_1>:
      dc:	stp	x29, x30, [sp, #-80]!
      e0:	tst	w3, #0xff
      e4:	mov	x29, sp
      e8:	stp	x19, x20, [sp, #16]
      ec:	stp	x21, x22, [sp, #32]
      f0:	mov	x21, x0
      f4:	mov	x22, x1
      f8:	stp	x23, x24, [sp, #48]
      fc:	and	w23, w2, #0xff
     100:	b.eq	19c <parse_unsigned_long_1+0xc0>  // b.none
     104:	bl	0 <secure_getenv>
     108:	mov	x19, x0
     10c:	cbz	x0, 1c8 <parse_unsigned_long_1+0xec>
     110:	bl	0 <__ctype_b_loc>
     114:	mov	x20, x0
     118:	ldr	x2, [x0]
     11c:	ldrb	w1, [x19]
     120:	ldrb	w0, [x19]
     124:	ldrh	w1, [x2, x1, lsl #1]
     128:	tbnz	w1, #13, 1a4 <parse_unsigned_long_1+0xc8>
     12c:	cbz	w0, 1b8 <parse_unsigned_long_1+0xdc>
     130:	bl	0 <__errno_location>
     134:	mov	x24, x0
     138:	add	x1, sp, #0x48
     13c:	mov	x0, x19
     140:	mov	w2, #0xa                   	// #10
     144:	str	wzr, [x24]
     148:	bl	0 <strtoul>
     14c:	mov	x3, x0
     150:	ldr	w0, [x24]
     154:	cbnz	w0, 1b8 <parse_unsigned_long_1+0xdc>
     158:	neg	w23, w23
     15c:	cmp	x3, w23, sxtw
     160:	b.le	1b8 <parse_unsigned_long_1+0xdc>
     164:	ldr	x4, [x20]
     168:	ldr	x2, [sp, #72]
     16c:	ldrb	w1, [x2]
     170:	ldrb	w0, [x2]
     174:	ldrh	w1, [x4, x1, lsl #1]
     178:	tbnz	w1, #13, 1ac <parse_unsigned_long_1+0xd0>
     17c:	cbnz	w0, 1b8 <parse_unsigned_long_1+0xdc>
     180:	mov	w0, #0x1                   	// #1
     184:	str	x3, [x22]
     188:	ldp	x19, x20, [sp, #16]
     18c:	ldp	x21, x22, [sp, #32]
     190:	ldp	x23, x24, [sp, #48]
     194:	ldp	x29, x30, [sp], #80
     198:	ret
     19c:	bl	0 <getenv>
     1a0:	b	108 <parse_unsigned_long_1+0x2c>
     1a4:	add	x19, x19, #0x1
     1a8:	b	11c <parse_unsigned_long_1+0x40>
     1ac:	add	x2, x2, #0x1
     1b0:	str	x2, [sp, #72]
     1b4:	b	168 <parse_unsigned_long_1+0x8c>
     1b8:	adrp	x0, 0 <parse_boolean>
     1bc:	mov	x1, x21
     1c0:	add	x0, x0, #0x0
     1c4:	bl	0 <gomp_error>
     1c8:	mov	w0, #0x0                   	// #0
     1cc:	b	188 <parse_unsigned_long_1+0xac>

00000000000001d0 <parse_one_place>:
     1d0:	stp	x29, x30, [sp, #-160]!
     1d4:	mov	x29, sp
     1d8:	stp	x23, x24, [sp, #48]
     1dc:	adrp	x23, 8 <parse_boolean+0x8>
     1e0:	mov	x24, x0
     1e4:	stp	x21, x22, [sp, #32]
     1e8:	ldr	x21, [x23]
     1ec:	stp	x19, x20, [sp, #16]
     1f0:	ldr	x0, [x0]
     1f4:	stp	x25, x26, [sp, #64]
     1f8:	stp	x27, x28, [sp, #80]
     1fc:	str	x1, [sp, #104]
     200:	stp	x2, x3, [sp, #120]
     204:	str	x0, [sp, #152]
     208:	cbz	x21, 218 <parse_one_place+0x48>
     20c:	adrp	x0, 8 <parse_boolean+0x8>
     210:	ldr	x0, [x0]
     214:	ldr	x21, [x21, x0, lsl #3]
     218:	ldr	x0, [sp, #104]
     21c:	strb	wzr, [x0]
     220:	bl	0 <__ctype_b_loc>
     224:	mov	x19, x0
     228:	ldr	x1, [x0]
     22c:	ldr	x0, [sp, #152]
     230:	ldrb	w3, [x0]
     234:	ldrb	w2, [x0]
     238:	ldrh	w3, [x1, x3, lsl #1]
     23c:	tbnz	w3, #13, 4ec <parse_one_place+0x31c>
     240:	cmp	w2, #0x21
     244:	b.eq	4f8 <parse_one_place+0x328>  // b.none
     248:	ldr	x0, [sp, #152]
     24c:	ldrb	w2, [x0]
     250:	cmp	w2, #0x7b
     254:	b.ne	5b8 <parse_one_place+0x3e8>  // b.any
     258:	add	x0, x0, #0x1
     25c:	str	x0, [sp, #152]
     260:	ldr	x22, [sp, #152]
     264:	ldrb	w0, [x22]
     268:	ldrh	w0, [x1, x0, lsl #1]
     26c:	tbnz	w0, #13, 520 <parse_one_place+0x350>
     270:	mov	w26, #0x0                   	// #0
     274:	mov	w25, #0x0                   	// #0
     278:	str	x22, [sp, #152]
     27c:	ldr	x0, [sp, #152]
     280:	ldrb	w27, [x0]
     284:	cmp	w27, #0x21
     288:	cset	w1, eq  // eq = none
     28c:	str	w1, [sp, #116]
     290:	b.ne	2bc <parse_one_place+0xec>  // b.any
     294:	ldr	x1, [x23]
     298:	add	x0, x0, #0x1
     29c:	ldr	x2, [x19]
     2a0:	cmp	x1, #0x0
     2a4:	csinc	w26, w26, wzr, eq  // eq = none
     2a8:	str	x0, [sp, #152]
     2ac:	ldr	x0, [sp, #152]
     2b0:	ldrb	w1, [x0]
     2b4:	ldrh	w1, [x2, x1, lsl #1]
     2b8:	tbnz	w1, #13, 534 <parse_one_place+0x364>
     2bc:	bl	0 <__errno_location>
     2c0:	mov	x20, x0
     2c4:	ldr	x0, [sp, #152]
     2c8:	add	x1, sp, #0x98
     2cc:	str	wzr, [x20]
     2d0:	mov	w2, #0xa                   	// #10
     2d4:	bl	0 <strtoul>
     2d8:	mov	x28, x0
     2dc:	ldr	w0, [x20]
     2e0:	cbnz	w0, 5b8 <parse_one_place+0x3e8>
     2e4:	ldr	x2, [x19]
     2e8:	ldr	x1, [sp, #152]
     2ec:	ldrb	w3, [x1]
     2f0:	ldrb	w0, [x1]
     2f4:	ldrh	w3, [x2, x3, lsl #1]
     2f8:	tbnz	w3, #13, 540 <parse_one_place+0x370>
     2fc:	cmp	w0, #0x3a
     300:	b.ne	57c <parse_one_place+0x3ac>  // b.any
     304:	add	x1, x1, #0x1
     308:	str	x1, [sp, #152]
     30c:	ldr	x0, [sp, #152]
     310:	ldrb	w1, [x0]
     314:	ldrh	w1, [x2, x1, lsl #1]
     318:	tbnz	w1, #13, 54c <parse_one_place+0x37c>
     31c:	str	wzr, [x20]
     320:	add	x1, sp, #0x98
     324:	mov	w2, #0xa                   	// #10
     328:	bl	0 <strtoul>
     32c:	mov	x5, x0
     330:	ldr	w0, [x20]
     334:	cbnz	w0, 5b8 <parse_one_place+0x3e8>
     338:	cbz	x5, 5b8 <parse_one_place+0x3e8>
     33c:	ldr	x2, [x19]
     340:	ldr	x1, [sp, #152]
     344:	ldrb	w3, [x1]
     348:	ldrb	w0, [x1]
     34c:	ldrh	w3, [x2, x3, lsl #1]
     350:	tbnz	w3, #13, 558 <parse_one_place+0x388>
     354:	cmp	w0, #0x3a
     358:	b.ne	588 <parse_one_place+0x3b8>  // b.any
     35c:	add	x1, x1, #0x1
     360:	str	x1, [sp, #152]
     364:	ldr	x0, [sp, #152]
     368:	ldrb	w1, [x0]
     36c:	ldrh	w1, [x2, x1, lsl #1]
     370:	tbnz	w1, #13, 564 <parse_one_place+0x394>
     374:	str	wzr, [x20]
     378:	add	x1, sp, #0x98
     37c:	mov	w2, #0xa                   	// #10
     380:	str	x5, [sp, #136]
     384:	bl	0 <strtol>
     388:	mov	x3, x0
     38c:	ldr	w0, [x20]
     390:	cbnz	w0, 5b8 <parse_one_place+0x3e8>
     394:	ldr	x2, [x19]
     398:	ldr	x5, [sp, #136]
     39c:	ldr	x0, [sp, #152]
     3a0:	ldrb	w1, [x0]
     3a4:	ldrh	w1, [x2, x1, lsl #1]
     3a8:	tbnz	w1, #13, 570 <parse_one_place+0x3a0>
     3ac:	ldr	w0, [sp, #116]
     3b0:	cmp	w0, #0x0
     3b4:	ccmp	x5, #0x1, #0x4, ne  // ne = any
     3b8:	b.ne	5b8 <parse_one_place+0x3e8>  // b.any
     3bc:	ldr	x0, [x23]
     3c0:	cbnz	x0, 590 <parse_one_place+0x3c0>
     3c4:	ldr	x0, [sp, #152]
     3c8:	ldrb	w1, [x0]
     3cc:	cmp	w1, #0x7d
     3d0:	b.ne	5f0 <parse_one_place+0x420>  // b.any
     3d4:	cbz	w26, 3dc <parse_one_place+0x20c>
     3d8:	cbz	w25, 52c <parse_one_place+0x35c>
     3dc:	ldr	x1, [x19]
     3e0:	add	x0, x0, #0x1
     3e4:	str	x0, [sp, #152]
     3e8:	ldr	x0, [sp, #152]
     3ec:	ldrb	w3, [x0]
     3f0:	ldrb	w2, [x0]
     3f4:	ldrh	w3, [x1, x3, lsl #1]
     3f8:	tbnz	w3, #13, 604 <parse_one_place+0x434>
     3fc:	cmp	w2, #0x3a
     400:	b.ne	640 <parse_one_place+0x470>  // b.any
     404:	add	x0, x0, #0x1
     408:	str	x0, [sp, #152]
     40c:	ldr	x21, [sp, #152]
     410:	ldrb	w0, [x21]
     414:	ldrh	w0, [x1, x0, lsl #1]
     418:	tbnz	w0, #13, 610 <parse_one_place+0x440>
     41c:	bl	0 <__errno_location>
     420:	mov	x22, x0
     424:	add	x1, sp, #0x98
     428:	mov	x0, x21
     42c:	mov	w2, #0xa                   	// #10
     430:	str	wzr, [x22]
     434:	bl	0 <strtoul>
     438:	mov	x21, x0
     43c:	ldr	w0, [x22]
     440:	cbnz	w0, 5b8 <parse_one_place+0x3e8>
     444:	sub	x1, x21, #0x1
     448:	mov	x0, #0xfffe                	// #65534
     44c:	cmp	x1, x0
     450:	b.hi	5b8 <parse_one_place+0x3e8>  // b.pmore
     454:	ldr	x2, [x19]
     458:	ldr	x1, [sp, #152]
     45c:	ldrb	w3, [x1]
     460:	ldrb	w0, [x1]
     464:	ldrh	w3, [x2, x3, lsl #1]
     468:	tbnz	w3, #13, 61c <parse_one_place+0x44c>
     46c:	cmp	w0, #0x3a
     470:	b.ne	64c <parse_one_place+0x47c>  // b.any
     474:	add	x1, x1, #0x1
     478:	str	x1, [sp, #152]
     47c:	ldr	x0, [sp, #152]
     480:	ldrb	w1, [x0]
     484:	ldrh	w1, [x2, x1, lsl #1]
     488:	tbnz	w1, #13, 628 <parse_one_place+0x458>
     48c:	str	wzr, [x22]
     490:	add	x1, sp, #0x98
     494:	mov	w2, #0xa                   	// #10
     498:	bl	0 <strtol>
     49c:	ldr	w1, [x22]
     4a0:	cbnz	w1, 5b8 <parse_one_place+0x3e8>
     4a4:	ldr	x3, [x19]
     4a8:	ldr	x1, [sp, #152]
     4ac:	ldrb	w2, [x1]
     4b0:	ldrh	w2, [x3, x2, lsl #1]
     4b4:	tbnz	w2, #13, 634 <parse_one_place+0x464>
     4b8:	ldr	x1, [sp, #104]
     4bc:	ldrb	w1, [x1]
     4c0:	cbz	w1, 4cc <parse_one_place+0x2fc>
     4c4:	cmp	x21, #0x1
     4c8:	b.ne	5b8 <parse_one_place+0x3e8>  // b.any
     4cc:	ldr	x1, [sp, #152]
     4d0:	str	x1, [x24]
     4d4:	ldr	x1, [sp, #120]
     4d8:	str	x21, [x1]
     4dc:	ldr	x1, [sp, #128]
     4e0:	str	x0, [x1]
     4e4:	mov	w0, #0x1                   	// #1
     4e8:	b	5bc <parse_one_place+0x3ec>
     4ec:	add	x0, x0, #0x1
     4f0:	str	x0, [sp, #152]
     4f4:	b	22c <parse_one_place+0x5c>
     4f8:	ldr	x3, [sp, #104]
     4fc:	mov	w2, #0x1                   	// #1
     500:	strb	w2, [x3]
     504:	add	x0, x0, #0x1
     508:	str	x0, [sp, #152]
     50c:	ldr	x0, [sp, #152]
     510:	ldrb	w2, [x0]
     514:	ldrh	w2, [x1, x2, lsl #1]
     518:	tbnz	w2, #13, 504 <parse_one_place+0x334>
     51c:	b	248 <parse_one_place+0x78>
     520:	add	x22, x22, #0x1
     524:	str	x22, [sp, #152]
     528:	b	260 <parse_one_place+0x90>
     52c:	mov	w25, #0x1                   	// #1
     530:	b	278 <parse_one_place+0xa8>
     534:	add	x0, x0, #0x1
     538:	str	x0, [sp, #152]
     53c:	b	2ac <parse_one_place+0xdc>
     540:	add	x1, x1, #0x1
     544:	str	x1, [sp, #152]
     548:	b	2e8 <parse_one_place+0x118>
     54c:	add	x0, x0, #0x1
     550:	str	x0, [sp, #152]
     554:	b	30c <parse_one_place+0x13c>
     558:	add	x1, x1, #0x1
     55c:	str	x1, [sp, #152]
     560:	b	340 <parse_one_place+0x170>
     564:	add	x0, x0, #0x1
     568:	str	x0, [sp, #152]
     56c:	b	364 <parse_one_place+0x194>
     570:	add	x0, x0, #0x1
     574:	str	x0, [sp, #152]
     578:	b	39c <parse_one_place+0x1cc>
     57c:	mov	x3, #0x1                   	// #1
     580:	mov	x5, x3
     584:	b	3ac <parse_one_place+0x1dc>
     588:	mov	x3, #0x1                   	// #1
     58c:	b	3ac <parse_one_place+0x1dc>
     590:	ldr	w0, [sp, #116]
     594:	cmp	w0, w25
     598:	b.ne	3c4 <parse_one_place+0x1f4>  // b.any
     59c:	cmp	w27, #0x21
     5a0:	b.ne	5d8 <parse_one_place+0x408>  // b.any
     5a4:	mov	x1, x28
     5a8:	mov	x0, x21
     5ac:	bl	0 <gomp_affinity_remove_cpu>
     5b0:	tst	w0, #0xff
     5b4:	b.ne	3c4 <parse_one_place+0x1f4>  // b.any
     5b8:	mov	w0, #0x0                   	// #0
     5bc:	ldp	x19, x20, [sp, #16]
     5c0:	ldp	x21, x22, [sp, #32]
     5c4:	ldp	x23, x24, [sp, #48]
     5c8:	ldp	x25, x26, [sp, #64]
     5cc:	ldp	x27, x28, [sp, #80]
     5d0:	ldp	x29, x30, [sp], #160
     5d4:	ret
     5d8:	mov	x2, x5
     5dc:	mov	x1, x28
     5e0:	mov	x0, x21
     5e4:	mov	w4, #0x0                   	// #0
     5e8:	bl	0 <gomp_affinity_add_cpus>
     5ec:	b	5b0 <parse_one_place+0x3e0>
     5f0:	cmp	w1, #0x2c
     5f4:	b.ne	5b8 <parse_one_place+0x3e8>  // b.any
     5f8:	add	x0, x0, #0x1
     5fc:	str	x0, [sp, #152]
     600:	b	27c <parse_one_place+0xac>
     604:	add	x0, x0, #0x1
     608:	str	x0, [sp, #152]
     60c:	b	3e8 <parse_one_place+0x218>
     610:	add	x21, x21, #0x1
     614:	str	x21, [sp, #152]
     618:	b	40c <parse_one_place+0x23c>
     61c:	add	x1, x1, #0x1
     620:	str	x1, [sp, #152]
     624:	b	458 <parse_one_place+0x288>
     628:	add	x0, x0, #0x1
     62c:	str	x0, [sp, #152]
     630:	b	47c <parse_one_place+0x2ac>
     634:	add	x1, x1, #0x1
     638:	str	x1, [sp, #152]
     63c:	b	4a8 <parse_one_place+0x2d8>
     640:	mov	x0, #0x1                   	// #1
     644:	mov	x21, x0
     648:	b	4b8 <parse_one_place+0x2e8>
     64c:	mov	x0, #0x1                   	// #1
     650:	b	4b8 <parse_one_place+0x2e8>

0000000000000654 <parse_stacksize>:
     654:	stp	x29, x30, [sp, #-80]!
     658:	mov	x29, sp
     65c:	stp	x19, x20, [sp, #16]
     660:	mov	x20, x0
     664:	stp	x21, x22, [sp, #32]
     668:	mov	x21, x1
     66c:	stp	x23, x24, [sp, #48]
     670:	bl	0 <getenv>
     674:	cbz	x0, 758 <parse_stacksize+0x104>
     678:	mov	x19, x0
     67c:	bl	0 <__ctype_b_loc>
     680:	ldr	x2, [x0]
     684:	mov	x23, x0
     688:	ldrb	w1, [x19]
     68c:	ldrb	w0, [x19]
     690:	ldrh	w1, [x2, x1, lsl #1]
     694:	tbnz	w1, #13, 710 <parse_stacksize+0xbc>
     698:	cbz	w0, 748 <parse_stacksize+0xf4>
     69c:	bl	0 <__errno_location>
     6a0:	mov	x24, x0
     6a4:	add	x1, sp, #0x48
     6a8:	mov	x0, x19
     6ac:	mov	w2, #0xa                   	// #10
     6b0:	str	wzr, [x24]
     6b4:	bl	0 <strtoul>
     6b8:	mov	x22, x0
     6bc:	ldr	w0, [x24]
     6c0:	cbnz	w0, 748 <parse_stacksize+0xf4>
     6c4:	ldr	x23, [x23]
     6c8:	ldr	x19, [sp, #72]
     6cc:	ldrb	w24, [x19]
     6d0:	ldrb	w0, [x19]
     6d4:	ldrh	w1, [x23, x24, lsl #1]
     6d8:	tbnz	w1, #13, 718 <parse_stacksize+0xc4>
     6dc:	cbz	w0, 784 <parse_stacksize+0x130>
     6e0:	bl	0 <__ctype_tolower_loc>
     6e4:	ldr	x0, [x0]
     6e8:	ldr	w0, [x0, x24, lsl #2]
     6ec:	sub	w0, w0, #0x62
     6f0:	cmp	w0, #0xb
     6f4:	b.hi	748 <parse_stacksize+0xf4>  // b.pmore
     6f8:	adrp	x1, 0 <parse_boolean>
     6fc:	add	x1, x1, #0x0
     700:	ldrb	w0, [x1, w0, uxtw]
     704:	adr	x1, 710 <parse_stacksize+0xbc>
     708:	add	x0, x1, w0, sxtb #2
     70c:	br	x0
     710:	add	x19, x19, #0x1
     714:	b	688 <parse_stacksize+0x34>
     718:	add	x19, x19, #0x1
     71c:	str	x19, [sp, #72]
     720:	b	6c8 <parse_stacksize+0x74>
     724:	mov	x2, #0x0                   	// #0
     728:	add	x19, x19, #0x1
     72c:	str	x19, [sp, #72]
     730:	ldr	x3, [sp, #72]
     734:	ldrb	w1, [x3]
     738:	ldrb	w0, [x3]
     73c:	ldrh	w1, [x23, x1, lsl #1]
     740:	tbnz	w1, #13, 778 <parse_stacksize+0x124>
     744:	cbz	w0, 788 <parse_stacksize+0x134>
     748:	adrp	x0, 0 <parse_boolean>
     74c:	mov	x1, x20
     750:	add	x0, x0, #0x0
     754:	bl	0 <gomp_error>
     758:	mov	w0, #0x0                   	// #0
     75c:	b	7a0 <parse_stacksize+0x14c>
     760:	mov	x2, #0x14                  	// #20
     764:	b	728 <parse_stacksize+0xd4>
     768:	mov	x2, #0x1e                  	// #30
     76c:	b	728 <parse_stacksize+0xd4>
     770:	mov	x2, #0xa                   	// #10
     774:	b	728 <parse_stacksize+0xd4>
     778:	add	x3, x3, #0x1
     77c:	str	x3, [sp, #72]
     780:	b	730 <parse_stacksize+0xdc>
     784:	mov	x2, #0xa                   	// #10
     788:	lsl	x0, x22, x2
     78c:	lsr	x2, x0, x2
     790:	cmp	x2, x22
     794:	b.ne	748 <parse_stacksize+0xf4>  // b.any
     798:	str	x0, [x21]
     79c:	mov	w0, #0x1                   	// #1
     7a0:	ldp	x19, x20, [sp, #16]
     7a4:	ldp	x21, x22, [sp, #32]
     7a8:	ldp	x23, x24, [sp, #48]
     7ac:	ldp	x29, x30, [sp], #80
     7b0:	ret

00000000000007b4 <parse_int.constprop.0>:
     7b4:	stp	x29, x30, [sp, #-48]!
     7b8:	mov	w3, #0x0                   	// #0
     7bc:	mov	w2, #0x1                   	// #1
     7c0:	mov	x29, sp
     7c4:	stp	x19, x20, [sp, #16]
     7c8:	mov	x20, x0
     7cc:	mov	x19, x1
     7d0:	add	x1, sp, #0x28
     7d4:	bl	dc <parse_unsigned_long_1>
     7d8:	ands	w0, w0, #0xff
     7dc:	b.eq	804 <parse_int.constprop.0+0x50>  // b.none
     7e0:	ldr	x1, [sp, #40]
     7e4:	mov	x2, #0x7fffffff            	// #2147483647
     7e8:	cmp	x1, x2
     7ec:	b.ls	810 <parse_int.constprop.0+0x5c>  // b.plast
     7f0:	mov	x1, x20
     7f4:	adrp	x0, 0 <parse_boolean>
     7f8:	add	x0, x0, #0x0
     7fc:	bl	0 <gomp_error>
     800:	mov	w0, #0x0                   	// #0
     804:	ldp	x19, x20, [sp, #16]
     808:	ldp	x29, x30, [sp], #48
     80c:	ret
     810:	str	w1, [x19]
     814:	b	804 <parse_int.constprop.0+0x50>

0000000000000818 <initialize_env>:
     818:	stp	x29, x30, [sp, #-208]!
     81c:	adrp	x0, 0 <parse_boolean>
     820:	add	x0, x0, #0x0
     824:	mov	x29, sp
     828:	stp	x19, x20, [sp, #16]
     82c:	stp	x21, x22, [sp, #32]
     830:	stp	x23, x24, [sp, #48]
     834:	stp	x25, x26, [sp, #64]
     838:	stp	x27, x28, [sp, #80]
     83c:	str	xzr, [sp, #168]
     840:	bl	0 <getenv>
     844:	cbz	x0, 988 <initialize_env+0x170>
     848:	mov	x19, x0
     84c:	bl	0 <__ctype_b_loc>
     850:	ldr	x23, [x0]
     854:	mov	x21, x0
     858:	ldrb	w0, [x19]
     85c:	ldrh	w0, [x23, x0, lsl #1]
     860:	tbnz	w0, #13, 8dc <initialize_env+0xc4>
     864:	adrp	x1, 0 <parse_boolean>
     868:	mov	x0, x19
     86c:	add	x1, x1, #0x0
     870:	mov	x2, #0x9                   	// #9
     874:	bl	0 <strncasecmp>
     878:	cbnz	w0, 8e4 <initialize_env+0xcc>
     87c:	add	x19, x19, #0x9
     880:	mov	w22, #0x1                   	// #1
     884:	ldrb	w1, [x19]
     888:	ldrb	w0, [x19]
     88c:	ldrh	w1, [x23, x1, lsl #1]
     890:	tbnz	w1, #13, 908 <initialize_env+0xf0>
     894:	cmp	w0, #0x3a
     898:	b.ne	c68 <initialize_env+0x450>  // b.any
     89c:	ldrb	w0, [x19, #1]
     8a0:	add	x19, x19, #0x1
     8a4:	ldrh	w0, [x23, x0, lsl #1]
     8a8:	tbnz	w0, #13, 89c <initialize_env+0x84>
     8ac:	mov	x0, x19
     8b0:	mov	x2, #0x6                   	// #6
     8b4:	adrp	x1, 0 <parse_boolean>
     8b8:	adrp	x20, 0 <parse_boolean>
     8bc:	add	x1, x1, #0x0
     8c0:	add	x20, x20, #0x0
     8c4:	bl	0 <strncasecmp>
     8c8:	cbnz	w0, 918 <initialize_env+0x100>
     8cc:	mov	w0, #0x1                   	// #1
     8d0:	add	x19, x19, #0x6
     8d4:	str	w0, [x20, #8]
     8d8:	b	93c <initialize_env+0x124>
     8dc:	add	x19, x19, #0x1
     8e0:	b	858 <initialize_env+0x40>
     8e4:	adrp	x1, 0 <parse_boolean>
     8e8:	mov	x0, x19
     8ec:	add	x1, x1, #0x0
     8f0:	mov	x2, #0xc                   	// #12
     8f4:	bl	0 <strncasecmp>
     8f8:	cbnz	w0, 910 <initialize_env+0xf8>
     8fc:	add	x19, x19, #0xc
     900:	mov	w22, #0xffffffff            	// #-1
     904:	b	884 <initialize_env+0x6c>
     908:	add	x19, x19, #0x1
     90c:	b	884 <initialize_env+0x6c>
     910:	mov	w22, #0x0                   	// #0
     914:	b	8ac <initialize_env+0x94>
     918:	adrp	x1, 0 <parse_boolean>
     91c:	mov	x0, x19
     920:	add	x1, x1, #0x0
     924:	mov	x2, #0x7                   	// #7
     928:	bl	0 <strncasecmp>
     92c:	cbnz	w0, b8c <initialize_env+0x374>
     930:	add	x19, x19, #0x7
     934:	mov	w0, #0x2                   	// #2
     938:	str	w0, [x20, #8]
     93c:	cmp	w22, #0x1
     940:	b.eq	954 <initialize_env+0x13c>  // b.none
     944:	cbnz	w22, 960 <initialize_env+0x148>
     948:	ldr	w0, [x20, #8]
     94c:	cmp	w0, #0x1
     950:	b.ne	960 <initialize_env+0x148>  // b.any
     954:	ldr	w0, [x20, #8]
     958:	orr	w0, w0, #0x80000000
     95c:	str	w0, [x20, #8]
     960:	ldrb	w1, [x19]
     964:	ldrb	w0, [x19]
     968:	ldrh	w1, [x23, x1, lsl #1]
     96c:	tbnz	w1, #13, bd4 <initialize_env+0x3bc>
     970:	cbnz	w0, bdc <initialize_env+0x3c4>
     974:	ldr	w0, [x20, #8]
     978:	and	w0, w0, #0x7fffffff
     97c:	cmp	w0, #0x1
     980:	cset	w0, ne  // ne = any
     984:	str	w0, [x20, #12]
     988:	adrp	x22, 0 <parse_boolean>
     98c:	add	x20, x22, #0x0
     990:	add	x1, x20, #0x18
     994:	adrp	x0, 0 <parse_boolean>
     998:	add	x0, x0, #0x0
     99c:	bl	0 <parse_boolean>
     9a0:	add	x1, x20, #0x19
     9a4:	adrp	x19, 0 <parse_boolean>
     9a8:	adrp	x0, 0 <parse_boolean>
     9ac:	add	x21, x19, #0x0
     9b0:	add	x0, x0, #0x0
     9b4:	bl	0 <parse_boolean>
     9b8:	mov	x1, x21
     9bc:	adrp	x0, 0 <parse_boolean>
     9c0:	add	x0, x0, #0x0
     9c4:	bl	0 <parse_boolean>
     9c8:	adrp	x1, 1 <parse_boolean+0x1>
     9cc:	adrp	x0, 0 <parse_boolean>
     9d0:	add	x1, x1, #0x0
     9d4:	add	x0, x0, #0x0
     9d8:	bl	0 <parse_boolean>
     9dc:	add	x1, x20, #0x10
     9e0:	adrp	x0, 0 <parse_boolean>
     9e4:	add	x0, x0, #0x0
     9e8:	bl	7b4 <parse_int.constprop.0>
     9ec:	add	x1, x21, #0x4
     9f0:	adrp	x0, 0 <parse_boolean>
     9f4:	add	x0, x0, #0x0
     9f8:	bl	7b4 <parse_int.constprop.0>
     9fc:	add	x1, x20, #0x28
     a00:	mov	w3, #0x0                   	// #0
     a04:	mov	w2, #0x1                   	// #1
     a08:	adrp	x0, 0 <parse_boolean>
     a0c:	add	x0, x0, #0x0
     a10:	bl	dc <parse_unsigned_long_1>
     a14:	add	x1, sp, #0xa0
     a18:	mov	w3, #0x0                   	// #0
     a1c:	mov	w2, #0x0                   	// #0
     a20:	adrp	x0, 0 <parse_boolean>
     a24:	add	x0, x0, #0x0
     a28:	bl	dc <parse_unsigned_long_1>
     a2c:	str	x19, [sp, #112]
     a30:	tst	w0, #0xff
     a34:	b.eq	a50 <initialize_env+0x238>  // b.none
     a38:	ldr	x0, [sp, #160]
     a3c:	mov	x1, #0x7fffffff            	// #2147483647
     a40:	cmp	x0, x1
     a44:	mov	x1, #0xffffffff            	// #4294967295
     a48:	csel	x0, x0, x1, ls  // ls = plast
     a4c:	str	w0, [x20, #20]
     a50:	adrp	x19, 0 <parse_boolean>
     a54:	add	x19, x19, #0x0
     a58:	mov	w3, #0x1                   	// #1
     a5c:	add	x1, sp, #0xc8
     a60:	mov	w2, w3
     a64:	mov	x0, x19
     a68:	bl	dc <parse_unsigned_long_1>
     a6c:	tst	w0, #0xff
     a70:	b.eq	a94 <initialize_env+0x27c>  // b.none
     a74:	ldr	x0, [sp, #200]
     a78:	mov	x1, #0x7fffffff            	// #2147483647
     a7c:	cmp	x0, x1
     a80:	b.ls	c84 <initialize_env+0x46c>  // b.plast
     a84:	adrp	x0, 0 <parse_boolean>
     a88:	mov	x1, x19
     a8c:	add	x0, x0, #0x0
     a90:	bl	0 <gomp_error>
     a94:	bl	0 <gomp_init_num_threads>
     a98:	adrp	x24, 0 <parse_boolean>
     a9c:	ldr	x0, [x22]
     aa0:	add	x24, x24, #0x0
     aa4:	str	x0, [x20, #48]
     aa8:	mov	x0, x24
     aac:	bl	0 <getenv>
     ab0:	mov	x19, x0
     ab4:	cbz	x0, b80 <initialize_env+0x368>
     ab8:	bl	0 <__ctype_b_loc>
     abc:	mov	x23, x0
     ac0:	ldr	x2, [x0]
     ac4:	ldrb	w1, [x19]
     ac8:	ldrb	w0, [x19]
     acc:	ldrh	w1, [x2, x1, lsl #1]
     ad0:	tbnz	w1, #13, c90 <initialize_env+0x478>
     ad4:	cbz	w0, e54 <initialize_env+0x63c>
     ad8:	bl	0 <__errno_location>
     adc:	mov	x25, x0
     ae0:	add	x1, sp, #0xc8
     ae4:	mov	x0, x19
     ae8:	mov	w2, #0xa                   	// #10
     aec:	str	wzr, [x25]
     af0:	bl	0 <strtoul>
     af4:	mov	x26, x0
     af8:	ldr	w0, [x25]
     afc:	cbnz	w0, e54 <initialize_env+0x63c>
     b00:	cmp	x26, #0x0
     b04:	b.le	e54 <initialize_env+0x63c>
     b08:	ldr	x4, [x23]
     b0c:	ldr	x1, [sp, #200]
     b10:	ldrb	w2, [x1]
     b14:	ldrb	w0, [x1]
     b18:	ldrh	w2, [x4, x2, lsl #1]
     b1c:	tbnz	w2, #13, c98 <initialize_env+0x480>
     b20:	cbz	w0, e4c <initialize_env+0x634>
     b24:	cmp	w0, #0x2c
     b28:	b.ne	e54 <initialize_env+0x63c>  // b.any
     b2c:	mov	x28, #0x0                   	// #0
     b30:	mov	x19, #0x0                   	// #0
     b34:	mov	x27, #0x0                   	// #0
     b38:	ldr	x21, [sp, #200]
     b3c:	cmp	x19, x28
     b40:	add	x21, x21, #0x1
     b44:	b.ne	cb4 <initialize_env+0x49c>  // b.any
     b48:	lsl	x28, x19, #1
     b4c:	cmp	x19, #0x0
     b50:	mov	x0, #0x10                  	// #16
     b54:	csel	x28, x28, x0, ne  // ne = any
     b58:	mov	x0, x27
     b5c:	lsl	x1, x28, #3
     b60:	bl	0 <realloc>
     b64:	cbnz	x0, ca4 <initialize_env+0x48c>
     b68:	mov	x0, x27
     b6c:	bl	0 <free>
     b70:	adrp	x0, 0 <parse_boolean>
     b74:	mov	x1, x24
     b78:	add	x0, x0, #0x0
     b7c:	bl	0 <gomp_error>
     b80:	ldr	x0, [x20, #48]
     b84:	str	x0, [x22]
     b88:	b	d5c <initialize_env+0x544>
     b8c:	adrp	x1, 0 <parse_boolean>
     b90:	mov	x0, x19
     b94:	add	x1, x1, #0x0
     b98:	mov	x2, #0x6                   	// #6
     b9c:	bl	0 <strncasecmp>
     ba0:	cbnz	w0, bac <initialize_env+0x394>
     ba4:	mov	w0, #0x3                   	// #3
     ba8:	b	8d0 <initialize_env+0xb8>
     bac:	adrp	x1, 0 <parse_boolean>
     bb0:	mov	x0, x19
     bb4:	add	x1, x1, #0x0
     bb8:	mov	x2, #0x4                   	// #4
     bbc:	bl	0 <strncasecmp>
     bc0:	cbnz	w0, c68 <initialize_env+0x450>
     bc4:	mov	w0, #0x4                   	// #4
     bc8:	add	x19, x19, #0x4
     bcc:	str	w0, [x20, #8]
     bd0:	b	93c <initialize_env+0x124>
     bd4:	add	x19, x19, #0x1
     bd8:	b	960 <initialize_env+0x148>
     bdc:	cmp	w0, #0x2c
     be0:	b.ne	c68 <initialize_env+0x450>  // b.any
     be4:	ldrb	w1, [x19, #1]
     be8:	add	x19, x19, #0x1
     bec:	ldrb	w0, [x19]
     bf0:	ldrh	w1, [x23, x1, lsl #1]
     bf4:	tbnz	w1, #13, be4 <initialize_env+0x3cc>
     bf8:	cbz	w0, c78 <initialize_env+0x460>
     bfc:	bl	0 <__errno_location>
     c00:	mov	x22, x0
     c04:	add	x1, sp, #0xc8
     c08:	mov	x0, x19
     c0c:	mov	w2, #0xa                   	// #10
     c10:	str	wzr, [x22]
     c14:	bl	0 <strtoul>
     c18:	ldr	w1, [x22]
     c1c:	cbnz	w1, c78 <initialize_env+0x460>
     c20:	ldr	x4, [x21]
     c24:	ldr	x1, [sp, #200]
     c28:	ldrb	w3, [x1]
     c2c:	ldrb	w2, [x1]
     c30:	ldrh	w3, [x4, x3, lsl #1]
     c34:	tbnz	w3, #13, c5c <initialize_env+0x444>
     c38:	cbnz	w2, c78 <initialize_env+0x460>
     c3c:	cmp	x0, w0, sxtw
     c40:	b.ne	c78 <initialize_env+0x460>  // b.any
     c44:	cbnz	x0, 984 <initialize_env+0x16c>
     c48:	ldr	w0, [x20, #8]
     c4c:	and	w0, w0, #0x7fffffff
     c50:	cmp	w0, #0x1
     c54:	cset	x0, ne  // ne = any
     c58:	b	984 <initialize_env+0x16c>
     c5c:	add	x1, x1, #0x1
     c60:	str	x1, [sp, #200]
     c64:	b	c24 <initialize_env+0x40c>
     c68:	adrp	x0, 0 <parse_boolean>
     c6c:	add	x0, x0, #0x0
     c70:	bl	0 <gomp_error>
     c74:	b	988 <initialize_env+0x170>
     c78:	adrp	x0, 0 <parse_boolean>
     c7c:	add	x0, x0, #0x0
     c80:	b	c70 <initialize_env+0x458>
     c84:	adrp	x1, 4 <parse_boolean+0x4>
     c88:	str	w0, [x1]
     c8c:	b	a94 <initialize_env+0x27c>
     c90:	add	x19, x19, #0x1
     c94:	b	ac4 <initialize_env+0x2ac>
     c98:	add	x1, x1, #0x1
     c9c:	str	x1, [sp, #200]
     ca0:	b	b0c <initialize_env+0x2f4>
     ca4:	cbnz	x19, d28 <initialize_env+0x510>
     ca8:	mov	x27, x0
     cac:	mov	x19, #0x1                   	// #1
     cb0:	str	x26, [x0]
     cb4:	ldr	x2, [x23]
     cb8:	ldrb	w1, [x21]
     cbc:	ldrb	w0, [x21]
     cc0:	ldrh	w1, [x2, x1, lsl #1]
     cc4:	tbnz	w1, #13, d30 <initialize_env+0x518>
     cc8:	cbz	w0, e58 <initialize_env+0x640>
     ccc:	str	wzr, [x25]
     cd0:	add	x1, sp, #0xc8
     cd4:	mov	x0, x21
     cd8:	mov	w2, #0xa                   	// #10
     cdc:	bl	0 <strtoul>
     ce0:	mov	x26, x0
     ce4:	ldr	w0, [x25]
     ce8:	cbnz	w0, e58 <initialize_env+0x640>
     cec:	cmp	x26, #0x0
     cf0:	b.le	e58 <initialize_env+0x640>
     cf4:	ldr	x5, [x23]
     cf8:	add	x0, x19, #0x1
     cfc:	str	x26, [x27, x19, lsl #3]
     d00:	ldr	x1, [sp, #200]
     d04:	ldrb	w4, [x1]
     d08:	ldrb	w2, [x1]
     d0c:	ldrh	w4, [x5, x4, lsl #1]
     d10:	tbnz	w4, #13, d38 <initialize_env+0x520>
     d14:	cbz	w2, d44 <initialize_env+0x52c>
     d18:	cmp	w2, #0x2c
     d1c:	b.ne	e58 <initialize_env+0x640>  // b.any
     d20:	mov	x19, x0
     d24:	b	b38 <initialize_env+0x320>
     d28:	mov	x27, x0
     d2c:	b	cb4 <initialize_env+0x49c>
     d30:	add	x21, x21, #0x1
     d34:	b	cb8 <initialize_env+0x4a0>
     d38:	add	x1, x1, #0x1
     d3c:	str	x1, [sp, #200]
     d40:	b	d00 <initialize_env+0x4e8>
     d44:	ldr	x1, [x27]
     d48:	str	x1, [x22]
     d4c:	adrp	x1, 8 <parse_boolean+0x8>
     d50:	str	x27, [x1]
     d54:	adrp	x1, 8 <parse_boolean+0x8>
     d58:	str	x0, [x1]
     d5c:	adrp	x21, 0 <parse_boolean>
     d60:	add	x21, x21, #0x0
     d64:	mov	x0, x21
     d68:	bl	0 <getenv>
     d6c:	mov	x19, x0
     d70:	cbz	x0, e44 <initialize_env+0x62c>
     d74:	bl	0 <__ctype_b_loc>
     d78:	ldr	x23, [x0]
     d7c:	ldrb	w1, [x19]
     d80:	ldrb	w0, [x19]
     d84:	ldrh	w1, [x23, x1, lsl #1]
     d88:	tbnz	w1, #13, e70 <initialize_env+0x658>
     d8c:	cbz	w0, e88 <initialize_env+0x670>
     d90:	add	x24, x20, #0x38
     d94:	mov	w25, #0x0                   	// #0
     d98:	mov	x26, x24
     d9c:	ldrb	w28, [x26, #7]
     da0:	mov	x1, x26
     da4:	mov	x0, x19
     da8:	mov	x2, x28
     dac:	bl	0 <strncasecmp>
     db0:	cbnz	w0, e78 <initialize_env+0x660>
     db4:	sxtw	x25, w25
     db8:	mov	x0, #0xc                   	// #12
     dbc:	add	x2, x19, x28
     dc0:	madd	x25, x25, x0, x20
     dc4:	ldrb	w27, [x25, #64]
     dc8:	ldrb	w1, [x2]
     dcc:	ldrb	w0, [x2]
     dd0:	ldrh	w1, [x23, x1, lsl #1]
     dd4:	tbnz	w1, #13, e90 <initialize_env+0x678>
     dd8:	cbz	w0, 10c8 <initialize_env+0x8b0>
     ddc:	cmp	w0, #0x2c
     de0:	b.ne	e88 <initialize_env+0x670>  // b.any
     de4:	cmp	w27, #0x1
     de8:	b.ls	e88 <initialize_env+0x670>  // b.plast
     dec:	add	x0, x20, #0x38
     df0:	mov	x26, #0x0                   	// #0
     df4:	mov	x25, #0x0                   	// #0
     df8:	mov	x19, #0x0                   	// #0
     dfc:	str	x0, [sp, #96]
     e00:	add	x28, x2, #0x1
     e04:	cmp	x25, x26
     e08:	b.ne	ea8 <initialize_env+0x690>  // b.any
     e0c:	lsl	x5, x25, #1
     e10:	cmp	x25, #0x0
     e14:	mov	x0, #0x10                  	// #16
     e18:	csel	x26, x5, x0, ne  // ne = any
     e1c:	mov	x1, x26
     e20:	mov	x0, x19
     e24:	bl	0 <realloc>
     e28:	cbnz	x0, e98 <initialize_env+0x680>
     e2c:	mov	x0, x19
     e30:	bl	0 <free>
     e34:	adrp	x0, 0 <parse_boolean>
     e38:	mov	x1, x21
     e3c:	add	x0, x0, #0x0
     e40:	bl	0 <gomp_error>
     e44:	mov	w19, #0x0                   	// #0
     e48:	b	f90 <initialize_env+0x778>
     e4c:	str	x26, [x22]
     e50:	b	d5c <initialize_env+0x544>
     e54:	mov	x27, #0x0                   	// #0
     e58:	mov	x0, x27
     e5c:	bl	0 <free>
     e60:	adrp	x0, 0 <parse_boolean>
     e64:	mov	x1, x24
     e68:	add	x0, x0, #0x0
     e6c:	b	b7c <initialize_env+0x364>
     e70:	add	x19, x19, #0x1
     e74:	b	d7c <initialize_env+0x564>
     e78:	add	w25, w25, #0x1
     e7c:	add	x26, x26, #0xc
     e80:	cmp	w25, #0x5
     e84:	b.ne	d9c <initialize_env+0x584>  // b.any
     e88:	mov	x19, #0x0                   	// #0
     e8c:	b	f4c <initialize_env+0x734>
     e90:	add	x2, x2, #0x1
     e94:	b	dc8 <initialize_env+0x5b0>
     e98:	cbnz	x25, f2c <initialize_env+0x714>
     e9c:	mov	x19, x0
     ea0:	mov	x25, #0x1                   	// #1
     ea4:	strb	w27, [x0]
     ea8:	ldrb	w1, [x28]
     eac:	ldrb	w0, [x28]
     eb0:	ldrh	w1, [x23, x1, lsl #1]
     eb4:	tbnz	w1, #13, f34 <initialize_env+0x71c>
     eb8:	cbz	w0, f4c <initialize_env+0x734>
     ebc:	mov	x6, x24
     ec0:	mov	w27, #0x2                   	// #2
     ec4:	ldrb	w2, [x6, #31]
     ec8:	add	x1, x6, #0x18
     ecc:	mov	x0, x28
     ed0:	str	x6, [sp, #104]
     ed4:	str	x2, [sp, #120]
     ed8:	bl	0 <strncasecmp>
     edc:	ldr	x6, [sp, #104]
     ee0:	ldr	x2, [sp, #120]
     ee4:	cbnz	w0, f3c <initialize_env+0x724>
     ee8:	ldr	x1, [sp, #96]
     eec:	sxtw	x27, w27
     ef0:	mov	x0, #0xc                   	// #12
     ef4:	add	x2, x28, x2
     ef8:	madd	x27, x27, x0, x1
     efc:	add	x0, x25, #0x1
     f00:	ldrb	w27, [x27, #8]
     f04:	strb	w27, [x19, x25]
     f08:	ldrb	w4, [x2]
     f0c:	ldrb	w1, [x2]
     f10:	ldrh	w4, [x23, x4, lsl #1]
     f14:	tbnz	w4, #13, f64 <initialize_env+0x74c>
     f18:	cbz	w1, f6c <initialize_env+0x754>
     f1c:	cmp	w1, #0x2c
     f20:	b.ne	f4c <initialize_env+0x734>  // b.any
     f24:	mov	x25, x0
     f28:	b	e00 <initialize_env+0x5e8>
     f2c:	mov	x19, x0
     f30:	b	ea8 <initialize_env+0x690>
     f34:	add	x28, x28, #0x1
     f38:	b	ea8 <initialize_env+0x690>
     f3c:	add	w27, w27, #0x1
     f40:	add	x6, x6, #0xc
     f44:	cmp	w27, #0x5
     f48:	b.ne	ec4 <initialize_env+0x6ac>  // b.any
     f4c:	mov	x0, x19
     f50:	bl	0 <free>
     f54:	adrp	x0, 0 <parse_boolean>
     f58:	mov	x1, x21
     f5c:	add	x0, x0, #0x0
     f60:	b	e40 <initialize_env+0x628>
     f64:	add	x2, x2, #0x1
     f68:	b	f08 <initialize_env+0x6f0>
     f6c:	ldrb	w1, [x19]
     f70:	strb	w1, [x20, #26]
     f74:	adrp	x1, 8 <parse_boolean+0x8>
     f78:	str	x19, [x1]
     f7c:	adrp	x1, 8 <parse_boolean+0x8>
     f80:	str	x0, [x1]
     f84:	ldrb	w0, [x20, #26]
     f88:	cmp	w0, #0x0
     f8c:	cset	w19, eq  // eq = none
     f90:	adrp	x23, 0 <parse_boolean>
     f94:	add	x23, x23, #0x0
     f98:	mov	x0, x23
     f9c:	bl	0 <getenv>
     fa0:	str	x0, [sp, #176]
     fa4:	cbz	x0, 11d0 <initialize_env+0x9b8>
     fa8:	bl	0 <__ctype_b_loc>
     fac:	mov	x24, x0
     fb0:	ldr	x25, [x0]
     fb4:	ldr	x21, [sp, #176]
     fb8:	ldrb	w1, [x21]
     fbc:	ldrb	w0, [x21]
     fc0:	ldrh	w1, [x25, x1, lsl #1]
     fc4:	tbnz	w1, #13, 10d0 <initialize_env+0x8b8>
     fc8:	cbz	w0, 109c <initialize_env+0x884>
     fcc:	adrp	x1, 0 <parse_boolean>
     fd0:	mov	x0, x21
     fd4:	add	x1, x1, #0x0
     fd8:	mov	x2, #0x7                   	// #7
     fdc:	bl	0 <strncasecmp>
     fe0:	cbnz	w0, 10dc <initialize_env+0x8c4>
     fe4:	add	x21, x21, #0x7
     fe8:	mov	w26, #0x1                   	// #1
     fec:	str	x21, [sp, #176]
     ff0:	ldr	x0, [sp, #176]
     ff4:	ldrb	w2, [x0]
     ff8:	ldrb	w1, [x0]
     ffc:	ldrh	w2, [x25, x2, lsl #1]
    1000:	tbnz	w2, #13, 1190 <initialize_env+0x978>
    1004:	cbz	w1, 11b4 <initialize_env+0x99c>
    1008:	add	x1, x0, #0x1
    100c:	str	x1, [sp, #176]
    1010:	ldrb	w0, [x0]
    1014:	cmp	w0, #0x28
    1018:	b.ne	109c <initialize_env+0x884>  // b.any
    101c:	ldr	x21, [sp, #176]
    1020:	ldrb	w0, [x21]
    1024:	ldrh	w0, [x25, x0, lsl #1]
    1028:	tbnz	w0, #13, 119c <initialize_env+0x984>
    102c:	bl	0 <__errno_location>
    1030:	mov	x25, x0
    1034:	add	x1, sp, #0xb8
    1038:	mov	x0, x21
    103c:	mov	w2, #0xa                   	// #10
    1040:	str	wzr, [x25]
    1044:	bl	0 <strtoul>
    1048:	mov	x1, x0
    104c:	ldr	w0, [x25]
    1050:	cbnz	w0, 109c <initialize_env+0x884>
    1054:	ldr	x0, [sp, #184]
    1058:	str	x0, [sp, #176]
    105c:	ldr	x0, [x24]
    1060:	ldr	x2, [sp, #176]
    1064:	ldrb	w4, [x2]
    1068:	ldrb	w3, [x2]
    106c:	ldrh	w4, [x0, x4, lsl #1]
    1070:	tbnz	w4, #13, 11a8 <initialize_env+0x990>
    1074:	cmp	w3, #0x29
    1078:	b.ne	109c <initialize_env+0x884>  // b.any
    107c:	add	x2, x2, #0x1
    1080:	str	x2, [sp, #176]
    1084:	ldr	x2, [sp, #176]
    1088:	ldrb	w4, [x2]
    108c:	ldrb	w3, [x2]
    1090:	ldrh	w4, [x0, x4, lsl #1]
    1094:	tbnz	w4, #13, 107c <initialize_env+0x864>
    1098:	cbz	w3, 11b8 <initialize_env+0x9a0>
    109c:	adrp	x21, 8 <parse_boolean+0x8>
    10a0:	ldr	x0, [x21]
    10a4:	bl	0 <free>
    10a8:	str	xzr, [x21]
    10ac:	adrp	x0, 8 <parse_boolean+0x8>
    10b0:	mov	x1, x23
    10b4:	str	xzr, [x0]
    10b8:	adrp	x0, 0 <parse_boolean>
    10bc:	add	x0, x0, #0x0
    10c0:	bl	0 <gomp_error>
    10c4:	b	11d0 <initialize_env+0x9b8>
    10c8:	strb	w27, [x20, #26]
    10cc:	b	f84 <initialize_env+0x76c>
    10d0:	add	x21, x21, #0x1
    10d4:	str	x21, [sp, #176]
    10d8:	b	fb4 <initialize_env+0x79c>
    10dc:	adrp	x1, 0 <parse_boolean>
    10e0:	mov	x0, x21
    10e4:	add	x1, x1, #0x0
    10e8:	mov	x2, #0x5                   	// #5
    10ec:	bl	0 <strncasecmp>
    10f0:	cbnz	w0, 1104 <initialize_env+0x8ec>
    10f4:	add	x21, x21, #0x5
    10f8:	mov	w26, #0x2                   	// #2
    10fc:	str	x21, [sp, #176]
    1100:	b	ff0 <initialize_env+0x7d8>
    1104:	adrp	x1, 0 <parse_boolean>
    1108:	mov	x0, x21
    110c:	add	x1, x1, #0x0
    1110:	mov	x2, #0x7                   	// #7
    1114:	bl	0 <strncasecmp>
    1118:	cbnz	w0, 112c <initialize_env+0x914>
    111c:	add	x21, x21, #0x7
    1120:	mov	w26, #0x3                   	// #3
    1124:	str	x21, [sp, #176]
    1128:	b	ff0 <initialize_env+0x7d8>
    112c:	mov	w24, #0x0                   	// #0
    1130:	str	x21, [sp, #184]
    1134:	mov	x21, #0x0                   	// #0
    1138:	add	x3, sp, #0xc8
    113c:	add	x2, sp, #0xc0
    1140:	add	x1, sp, #0x9f
    1144:	add	x0, sp, #0xb8
    1148:	bl	1d0 <parse_one_place>
    114c:	tst	w0, #0xff
    1150:	b.eq	109c <initialize_env+0x884>  // b.none
    1154:	ldrb	w0, [sp, #159]
    1158:	cbz	w0, 1308 <initialize_env+0xaf0>
    115c:	cbnz	w24, 1170 <initialize_env+0x958>
    1160:	add	x21, x21, #0x1
    1164:	mov	w24, w0
    1168:	cmp	x21, #0x10, lsl #12
    116c:	b.hi	109c <initialize_env+0x884>  // b.pmore
    1170:	ldr	x0, [sp, #184]
    1174:	ldrb	w1, [x0]
    1178:	cbz	w1, 1314 <initialize_env+0xafc>
    117c:	cmp	w1, #0x2c
    1180:	b.ne	109c <initialize_env+0x884>  // b.any
    1184:	add	x0, x0, #0x1
    1188:	str	x0, [sp, #184]
    118c:	b	1138 <initialize_env+0x920>
    1190:	add	x0, x0, #0x1
    1194:	str	x0, [sp, #176]
    1198:	b	ff0 <initialize_env+0x7d8>
    119c:	add	x21, x21, #0x1
    11a0:	str	x21, [sp, #176]
    11a4:	b	101c <initialize_env+0x804>
    11a8:	add	x2, x2, #0x1
    11ac:	str	x2, [sp, #176]
    11b0:	b	1060 <initialize_env+0x848>
    11b4:	mov	x1, #0xffffffffffffffff    	// #-1
    11b8:	cbnz	w19, 14b0 <initialize_env+0xc98>
    11bc:	mov	w0, w26
    11c0:	mov	w2, #0x0                   	// #0
    11c4:	bl	0 <gomp_affinity_init_level>
    11c8:	ands	w19, w0, #0xff
    11cc:	b.ne	14a0 <initialize_env+0xc88>  // b.any
    11d0:	adrp	x0, 0 <parse_boolean>
    11d4:	add	x0, x0, #0x0
    11d8:	bl	0 <getenv>
    11dc:	str	x0, [sp, #96]
    11e0:	cbz	x0, 14d8 <initialize_env+0xcc0>
    11e4:	bl	0 <__ctype_b_loc>
    11e8:	mov	x26, #0x0                   	// #0
    11ec:	mov	w21, #0x0                   	// #0
    11f0:	adrp	x25, 8 <parse_boolean+0x8>
    11f4:	adrp	x28, 8 <parse_boolean+0x8>
    11f8:	str	x0, [sp, #104]
    11fc:	ldr	x23, [sp, #96]
    1200:	ldr	x0, [sp, #104]
    1204:	ldrb	w1, [x23]
    1208:	ldr	x0, [x0]
    120c:	ldrh	w0, [x0, x1, lsl #1]
    1210:	tbnz	w0, #13, 1300 <initialize_env+0xae8>
    1214:	bl	0 <__errno_location>
    1218:	mov	x24, x0
    121c:	add	x1, sp, #0xc8
    1220:	mov	x0, x23
    1224:	mov	w2, #0x0                   	// #0
    1228:	str	wzr, [x24]
    122c:	bl	0 <strtoul>
    1230:	mov	x27, x0
    1234:	ldr	w0, [x24]
    1238:	cbnz	w0, 1688 <initialize_env+0xe70>
    123c:	mov	x0, #0xffff                	// #65535
    1240:	cmp	x27, x0
    1244:	b.hi	1688 <initialize_env+0xe70>  // b.pmore
    1248:	ldr	x23, [sp, #200]
    124c:	ldrb	w0, [x23]
    1250:	cmp	w0, #0x2d
    1254:	b.ne	15f0 <initialize_env+0xdd8>  // b.any
    1258:	add	x1, sp, #0xc8
    125c:	add	x0, x23, #0x1
    1260:	mov	w2, #0x0                   	// #0
    1264:	bl	0 <strtoul>
    1268:	mov	x5, x0
    126c:	ldr	w0, [x24]
    1270:	cbnz	w0, 1688 <initialize_env+0xe70>
    1274:	mov	x0, #0xffff                	// #65535
    1278:	cmp	x5, x0
    127c:	ccmp	x27, x5, #0x2, ls  // ls = plast
    1280:	b.hi	1688 <initialize_env+0xe70>  // b.pmore
    1284:	ldr	x23, [sp, #200]
    1288:	ldrb	w0, [x23]
    128c:	cmp	w0, #0x3a
    1290:	b.ne	15f4 <initialize_env+0xddc>  // b.any
    1294:	add	x1, sp, #0xc8
    1298:	add	x0, x23, #0x1
    129c:	mov	w2, #0x0                   	// #0
    12a0:	str	x5, [sp, #120]
    12a4:	bl	0 <strtoul>
    12a8:	mov	x8, x0
    12ac:	ldr	w0, [x24]
    12b0:	cbnz	w0, 1688 <initialize_env+0xe70>
    12b4:	sub	x1, x8, #0x1
    12b8:	mov	x0, #0xfffe                	// #65534
    12bc:	cmp	x1, x0
    12c0:	b.hi	1688 <initialize_env+0xe70>  // b.pmore
    12c4:	ldr	x5, [sp, #120]
    12c8:	ldr	x23, [sp, #200]
    12cc:	sub	x5, x5, x27
    12d0:	udiv	x5, x5, x8
    12d4:	add	x5, x5, #0x1
    12d8:	cbnz	w21, 1648 <initialize_env+0xe30>
    12dc:	add	x26, x26, x5
    12e0:	ldr	x0, [sp, #104]
    12e4:	ldr	x2, [x0]
    12e8:	ldrb	w1, [x23]
    12ec:	ldrb	w0, [x23]
    12f0:	ldrh	w1, [x2, x1, lsl #1]
    12f4:	tbnz	w1, #13, 1658 <initialize_env+0xe40>
    12f8:	cmp	w0, #0x2c
    12fc:	b.ne	1660 <initialize_env+0xe48>  // b.any
    1300:	add	x23, x23, #0x1
    1304:	b	1200 <initialize_env+0x9e8>
    1308:	ldr	x0, [sp, #192]
    130c:	add	x21, x21, x0
    1310:	b	1168 <initialize_env+0x950>
    1314:	cbnz	w19, 14b0 <initialize_env+0xc98>
    1318:	adrp	x24, 8 <parse_boolean+0x8>
    131c:	adrp	x26, 8 <parse_boolean+0x8>
    1320:	mov	x0, x21
    1324:	mov	w1, #0x0                   	// #0
    1328:	str	xzr, [x24]
    132c:	bl	0 <gomp_affinity_alloc>
    1330:	str	x0, [x26]
    1334:	cbz	x0, 11d0 <initialize_env+0x9b8>
    1338:	add	x25, x24, #0x0
    133c:	add	x26, x26, #0x0
    1340:	ldr	x1, [x25]
    1344:	ldr	x0, [x26]
    1348:	ldr	x0, [x0, x1, lsl #3]
    134c:	bl	0 <gomp_affinity_init_place>
    1350:	add	x3, sp, #0xc8
    1354:	add	x2, sp, #0xc0
    1358:	add	x1, sp, #0x9f
    135c:	add	x0, sp, #0xb0
    1360:	bl	1d0 <parse_one_place>
    1364:	tst	w0, #0xff
    1368:	b.eq	109c <initialize_env+0x884>  // b.none
    136c:	ldrb	w0, [sp, #159]
    1370:	cbz	w0, 1414 <initialize_env+0xbfc>
    1374:	mov	x21, #0x0                   	// #0
    1378:	b	1380 <initialize_env+0xb68>
    137c:	add	x21, x21, #0x1
    1380:	ldr	x0, [x25]
    1384:	cmp	x21, x0
    1388:	b.cs	13a4 <initialize_env+0xb8c>  // b.hs, b.nlast
    138c:	ldr	x2, [x26]
    1390:	ldr	x1, [x2, x0, lsl #3]
    1394:	ldr	x0, [x2, x21, lsl #3]
    1398:	bl	0 <gomp_affinity_same_place>
    139c:	tst	w0, #0xff
    13a0:	b.eq	137c <initialize_env+0xb64>  // b.none
    13a4:	ldr	x2, [x25]
    13a8:	cmp	x21, x2
    13ac:	b.ne	13c0 <initialize_env+0xba8>  // b.any
    13b0:	adrp	x0, 0 <parse_boolean>
    13b4:	add	x0, x0, #0x0
    13b8:	bl	0 <gomp_error>
    13bc:	b	109c <initialize_env+0x884>
    13c0:	ldr	x0, [x26]
    13c4:	lsl	x1, x21, #3
    13c8:	sub	x2, x2, #0x1
    13cc:	sub	x2, x2, x21
    13d0:	ldr	x27, [x0, x1]
    13d4:	add	x1, x1, #0x8
    13d8:	add	x1, x0, x1
    13dc:	lsl	x2, x2, #3
    13e0:	add	x0, x0, x21, lsl #3
    13e4:	bl	0 <memmove>
    13e8:	ldr	x0, [x25]
    13ec:	ldr	x1, [x26]
    13f0:	sub	x0, x0, #0x1
    13f4:	str	x0, [x25]
    13f8:	str	x27, [x1, x0, lsl #3]
    13fc:	ldr	x0, [sp, #176]
    1400:	ldrb	w1, [x0]
    1404:	cbz	w1, 147c <initialize_env+0xc64>
    1408:	add	x0, x0, #0x1
    140c:	str	x0, [sp, #176]
    1410:	b	1340 <initialize_env+0xb28>
    1414:	ldr	x0, [sp, #192]
    1418:	cmp	x0, #0x1
    141c:	b.ne	1474 <initialize_env+0xc5c>  // b.any
    1420:	ldr	x0, [x25]
    1424:	add	x0, x0, #0x1
    1428:	str	x0, [x25]
    142c:	b	13fc <initialize_env+0xbe4>
    1430:	add	x0, x21, x0
    1434:	ldr	x3, [x26]
    1438:	add	x4, x0, #0x1
    143c:	ldr	x2, [sp, #200]
    1440:	ldr	x1, [x3, x0, lsl #3]
    1444:	ldr	x0, [x3, x4, lsl #3]
    1448:	bl	0 <gomp_affinity_copy_place>
    144c:	tst	w0, #0xff
    1450:	b.eq	109c <initialize_env+0x884>  // b.none
    1454:	add	x21, x21, #0x1
    1458:	ldr	x1, [sp, #192]
    145c:	ldr	x0, [x25]
    1460:	sub	x2, x1, #0x1
    1464:	cmp	x21, x2
    1468:	b.cc	1430 <initialize_env+0xc18>  // b.lo, b.ul, b.last
    146c:	add	x0, x1, x0
    1470:	b	1428 <initialize_env+0xc10>
    1474:	mov	x21, #0x0                   	// #0
    1478:	b	1458 <initialize_env+0xc40>
    147c:	ldr	x0, [x24]
    1480:	cbnz	x0, 1490 <initialize_env+0xc78>
    1484:	adrp	x0, 0 <parse_boolean>
    1488:	add	x0, x0, #0x0
    148c:	b	13b8 <initialize_env+0xba0>
    1490:	mov	w0, #0x0                   	// #0
    1494:	bl	0 <gomp_affinity_finalize_place_list>
    1498:	tst	w0, #0xff
    149c:	b.eq	109c <initialize_env+0x884>  // b.none
    14a0:	ldrb	w0, [x20, #26]
    14a4:	cbnz	w0, 14b0 <initialize_env+0xc98>
    14a8:	mov	w0, #0x1                   	// #1
    14ac:	strb	w0, [x20, #26]
    14b0:	mov	w19, #0x1                   	// #1
    14b4:	b	11d0 <initialize_env+0x9b8>
    14b8:	cbnz	w19, 14d8 <initialize_env+0xcc0>
    14bc:	mov	x0, x26
    14c0:	str	xzr, [x25]
    14c4:	mov	w1, #0x1                   	// #1
    14c8:	bl	0 <gomp_affinity_alloc>
    14cc:	str	x0, [x28]
    14d0:	mov	w21, #0x1                   	// #1
    14d4:	cbnz	x0, 11fc <initialize_env+0x9e4>
    14d8:	ldrb	w0, [x20, #26]
    14dc:	cbnz	w0, 16a4 <initialize_env+0xe8c>
    14e0:	adrp	x0, 0 <parse_boolean>
    14e4:	add	x0, x0, #0x0
    14e8:	bl	0 <getenv>
    14ec:	mov	x19, x0
    14f0:	cbz	x0, 1504 <initialize_env+0xcec>
    14f4:	bl	0 <strlen>
    14f8:	mov	x1, x0
    14fc:	mov	x0, x19
    1500:	bl	0 <gomp_set_affinity_format>
    1504:	adrp	x0, 0 <parse_boolean>
    1508:	add	x0, x0, #0x0
    150c:	bl	0 <getenv>
    1510:	mov	x19, x0
    1514:	cbz	x0, 156c <initialize_env+0xd54>
    1518:	bl	0 <__ctype_b_loc>
    151c:	ldr	x23, [x0]
    1520:	ldrb	w0, [x19]
    1524:	ldrh	w0, [x23, x0, lsl #1]
    1528:	tbnz	w0, #13, 16ac <initialize_env+0xe94>
    152c:	adrp	x1, 0 <parse_boolean>
    1530:	mov	x0, x19
    1534:	add	x1, x1, #0x0
    1538:	mov	x2, #0x6                   	// #6
    153c:	bl	0 <strncasecmp>
    1540:	cbnz	w0, 16b4 <initialize_env+0xe9c>
    1544:	add	x19, x19, #0x6
    1548:	mov	w21, #0x1                   	// #1
    154c:	ldrb	w1, [x19]
    1550:	ldrb	w0, [x19]
    1554:	ldrh	w1, [x23, x1, lsl #1]
    1558:	tbnz	w1, #13, 16d8 <initialize_env+0xec0>
    155c:	cbz	w0, 1570 <initialize_env+0xd58>
    1560:	adrp	x0, 0 <parse_boolean>
    1564:	add	x0, x0, #0x0
    1568:	bl	0 <gomp_error>
    156c:	mov	w21, #0xffffffff            	// #-1
    1570:	adrp	x23, 0 <parse_boolean>
    1574:	add	x23, x23, #0x0
    1578:	mov	x0, x23
    157c:	bl	0 <getenv>
    1580:	mov	x19, x0
    1584:	cbz	x0, 1778 <initialize_env+0xf60>
    1588:	bl	0 <__ctype_b_loc>
    158c:	mov	x24, x0
    1590:	ldr	x2, [x0]
    1594:	ldrb	w1, [x19]
    1598:	ldrb	w0, [x19]
    159c:	ldrh	w1, [x2, x1, lsl #1]
    15a0:	tbnz	w1, #13, 16f0 <initialize_env+0xed8>
    15a4:	cbz	w0, 1768 <initialize_env+0xf50>
    15a8:	adrp	x1, 0 <parse_boolean>
    15ac:	mov	x0, x19
    15b0:	add	x1, x1, #0x0
    15b4:	mov	x2, #0x8                   	// #8
    15b8:	bl	0 <strncasecmp>
    15bc:	cbz	w0, 15d8 <initialize_env+0xdc0>
    15c0:	adrp	x1, 0 <parse_boolean>
    15c4:	mov	x0, x19
    15c8:	add	x1, x1, #0x0
    15cc:	mov	x2, #0x8                   	// #8
    15d0:	bl	0 <strncasecmp>
    15d4:	cbnz	w0, 16f8 <initialize_env+0xee0>
    15d8:	add	x19, x19, #0x8
    15dc:	mov	x1, #0x1                   	// #1
    15e0:	mov	x26, #0xffffffffffffffff    	// #-1
    15e4:	str	x19, [sp, #200]
    15e8:	ldr	x4, [x24]
    15ec:	b	17f0 <initialize_env+0xfd8>
    15f0:	mov	x5, x27
    15f4:	mov	x8, #0x1                   	// #1
    15f8:	b	12cc <initialize_env+0xab4>
    15fc:	ldr	x1, [x25]
    1600:	str	x5, [sp, #136]
    1604:	ldr	x0, [x28]
    1608:	ldr	x0, [x0, x1, lsl #3]
    160c:	stp	x0, x8, [sp, #120]
    1610:	bl	0 <gomp_affinity_init_place>
    1614:	ldr	x0, [sp, #120]
    1618:	mov	x1, x27
    161c:	mov	w4, #0x1                   	// #1
    1620:	mov	x3, #0x0                   	// #0
    1624:	mov	x2, #0x1                   	// #1
    1628:	bl	0 <gomp_affinity_add_cpus>
    162c:	tst	w0, #0xff
    1630:	ldp	x8, x5, [sp, #128]
    1634:	b.eq	1644 <initialize_env+0xe2c>  // b.none
    1638:	ldr	x0, [x25]
    163c:	add	x0, x0, #0x1
    1640:	str	x0, [x25]
    1644:	add	x27, x27, x8
    1648:	sub	x5, x5, #0x1
    164c:	cmn	x5, #0x1
    1650:	b.ne	15fc <initialize_env+0xde4>  // b.any
    1654:	b	12e0 <initialize_env+0xac8>
    1658:	add	x23, x23, #0x1
    165c:	b	12e8 <initialize_env+0xad0>
    1660:	cbnz	w0, 1200 <initialize_env+0x9e8>
    1664:	cbz	w21, 14b8 <initialize_env+0xca0>
    1668:	adrp	x0, 8 <parse_boolean+0x8>
    166c:	ldr	x0, [x0]
    1670:	cbnz	x0, 1698 <initialize_env+0xe80>
    1674:	adrp	x19, 8 <parse_boolean+0x8>
    1678:	ldr	x0, [x19]
    167c:	bl	0 <free>
    1680:	str	xzr, [x19]
    1684:	b	14d8 <initialize_env+0xcc0>
    1688:	adrp	x0, 0 <parse_boolean>
    168c:	add	x0, x0, #0x0
    1690:	bl	0 <gomp_error>
    1694:	b	14d8 <initialize_env+0xcc0>
    1698:	ldrb	w0, [x20, #26]
    169c:	cbnz	w0, 16a4 <initialize_env+0xe8c>
    16a0:	strb	w21, [x20, #26]
    16a4:	bl	0 <gomp_init_affinity>
    16a8:	b	14e0 <initialize_env+0xcc8>
    16ac:	add	x19, x19, #0x1
    16b0:	b	1520 <initialize_env+0xd08>
    16b4:	mov	x0, x19
    16b8:	mov	x2, #0x7                   	// #7
    16bc:	adrp	x1, 0 <parse_boolean>
    16c0:	add	x1, x1, #0x0
    16c4:	bl	0 <strncasecmp>
    16c8:	mov	w21, w0
    16cc:	cbnz	w0, 16e0 <initialize_env+0xec8>
    16d0:	add	x19, x19, #0x7
    16d4:	b	154c <initialize_env+0xd34>
    16d8:	add	x19, x19, #0x1
    16dc:	b	154c <initialize_env+0xd34>
    16e0:	adrp	x19, 0 <parse_boolean>
    16e4:	mov	w21, #0xffffffff            	// #-1
    16e8:	add	x19, x19, #0x0
    16ec:	b	154c <initialize_env+0xd34>
    16f0:	add	x19, x19, #0x1
    16f4:	b	1594 <initialize_env+0xd7c>
    16f8:	bl	0 <__errno_location>
    16fc:	mov	x25, x0
    1700:	add	x1, sp, #0xc8
    1704:	mov	x0, x19
    1708:	mov	w2, #0xa                   	// #10
    170c:	str	wzr, [x25]
    1710:	bl	0 <strtoull>
    1714:	mov	x26, x0
    1718:	ldr	w0, [x25]
    171c:	cbnz	w0, 1768 <initialize_env+0xf50>
    1720:	ldr	x2, [x24]
    1724:	ldr	x19, [sp, #200]
    1728:	ldrb	w25, [x19]
    172c:	ldrb	w0, [x19]
    1730:	ldrh	w1, [x2, x25, lsl #1]
    1734:	tbnz	w1, #13, 17a4 <initialize_env+0xf8c>
    1738:	cbz	w0, 18a8 <initialize_env+0x1090>
    173c:	bl	0 <__ctype_tolower_loc>
    1740:	ldr	x0, [x0]
    1744:	ldr	w2, [x0, x25, lsl #2]
    1748:	cmp	w2, #0x6d
    174c:	b.eq	17d0 <initialize_env+0xfb8>  // b.none
    1750:	b.gt	17b0 <initialize_env+0xf98>
    1754:	cmp	w2, #0x67
    1758:	b.eq	17dc <initialize_env+0xfc4>  // b.none
    175c:	cmp	w2, #0x6b
    1760:	mov	x1, #0x3e8                 	// #1000
    1764:	b.eq	17c4 <initialize_env+0xfac>  // b.none
    1768:	adrp	x0, 0 <parse_boolean>
    176c:	mov	x1, x23
    1770:	add	x0, x0, #0x0
    1774:	bl	0 <gomp_error>
    1778:	cmp	w21, #0x1
    177c:	adrp	x0, 8 <parse_boolean+0x8>
    1780:	b.ne	18b4 <initialize_env+0x109c>  // b.any
    1784:	mov	x1, #0xac00                	// #44032
    1788:	movk	x1, #0xfc23, lsl #16
    178c:	movk	x1, #0x6, lsl #32
    1790:	str	x1, [x0]
    1794:	adrp	x0, 8 <parse_boolean+0x8>
    1798:	mov	x1, #0x3e8                 	// #1000
    179c:	str	x1, [x0]
    17a0:	b	1828 <initialize_env+0x1010>
    17a4:	add	x19, x19, #0x1
    17a8:	str	x19, [sp, #200]
    17ac:	b	1724 <initialize_env+0xf0c>
    17b0:	cmp	w2, #0x74
    17b4:	b.ne	1768 <initialize_env+0xf50>  // b.any
    17b8:	mov	x1, #0x1000                	// #4096
    17bc:	movk	x1, #0xd4a5, lsl #16
    17c0:	movk	x1, #0xe8, lsl #32
    17c4:	add	x19, x19, #0x1
    17c8:	str	x19, [sp, #200]
    17cc:	b	15e8 <initialize_env+0xdd0>
    17d0:	mov	x1, #0x4240                	// #16960
    17d4:	movk	x1, #0xf, lsl #16
    17d8:	b	17c4 <initialize_env+0xfac>
    17dc:	mov	x1, #0xca00                	// #51712
    17e0:	movk	x1, #0x3b9a, lsl #16
    17e4:	b	17c4 <initialize_env+0xfac>
    17e8:	add	x2, x2, #0x1
    17ec:	str	x2, [sp, #200]
    17f0:	ldr	x2, [sp, #200]
    17f4:	ldrb	w3, [x2]
    17f8:	ldrb	w0, [x2]
    17fc:	ldrh	w3, [x4, x3, lsl #1]
    1800:	tbnz	w3, #13, 17e8 <initialize_env+0xfd0>
    1804:	cbnz	w0, 1768 <initialize_env+0xf50>
    1808:	umulh	x0, x26, x1
    180c:	cbz	x0, 18ac <initialize_env+0x1094>
    1810:	mov	x1, #0xffffffffffffffff    	// #-1
    1814:	adrp	x0, 8 <parse_boolean+0x8>
    1818:	cmp	w21, #0x1
    181c:	str	x1, [x0]
    1820:	b.eq	1794 <initialize_env+0xf7c>  // b.none
    1824:	cbnz	w21, 18c4 <initialize_env+0x10ac>
    1828:	adrp	x2, 8 <parse_boolean+0x8>
    182c:	adrp	x0, 8 <parse_boolean+0x8>
    1830:	str	x2, [sp, #96]
    1834:	ldr	x1, [x2]
    1838:	ldr	x3, [x0]
    183c:	cmp	x3, x1
    1840:	b.ls	1848 <initialize_env+0x1030>  // b.plast
    1844:	str	x1, [x0]
    1848:	adrp	x19, 0 <gomp_thread_attr>
    184c:	add	x19, x19, #0x0
    1850:	mov	x0, x19
    1854:	bl	0 <pthread_attr_init>
    1858:	add	x1, sp, #0xa8
    185c:	adrp	x0, 0 <parse_boolean>
    1860:	add	x0, x0, #0x0
    1864:	bl	654 <parse_stacksize>
    1868:	tst	w0, #0xff
    186c:	b.eq	18d0 <initialize_env+0x10b8>  // b.none
    1870:	ldr	x1, [sp, #168]
    1874:	mov	x0, x19
    1878:	bl	0 <pthread_attr_setstacksize>
    187c:	cmp	w0, #0x16
    1880:	b.ne	1a88 <initialize_env+0x1270>  // b.any
    1884:	ldr	x1, [sp, #168]
    1888:	mov	x0, #0x1ffff               	// #131071
    188c:	cmp	x1, x0
    1890:	b.hi	1a78 <initialize_env+0x1260>  // b.pmore
    1894:	adrp	x0, 0 <parse_boolean>
    1898:	add	x0, x0, #0x0
    189c:	mov	x1, #0x80                  	// #128
    18a0:	bl	0 <gomp_error>
    18a4:	b	18e8 <initialize_env+0x10d0>
    18a8:	mov	x1, #0x1                   	// #1
    18ac:	mul	x1, x1, x26
    18b0:	b	1814 <initialize_env+0xffc>
    18b4:	cbz	w21, 1828 <initialize_env+0x1010>
    18b8:	mov	x1, #0x93e0                	// #37856
    18bc:	movk	x1, #0x4, lsl #16
    18c0:	str	x1, [x0]
    18c4:	adrp	x0, 8 <parse_boolean+0x8>
    18c8:	mov	x1, #0x64                  	// #100
    18cc:	b	179c <initialize_env+0xf84>
    18d0:	add	x1, sp, #0xa8
    18d4:	adrp	x0, 0 <parse_boolean>
    18d8:	add	x0, x0, #0x0
    18dc:	bl	654 <parse_stacksize>
    18e0:	tst	w0, #0xff
    18e4:	b.ne	1870 <initialize_env+0x1058>  // b.any
    18e8:	adrp	x0, 0 <parse_boolean>
    18ec:	add	x0, x0, #0x0
    18f0:	ldr	x27, [sp, #168]
    18f4:	bl	0 <getenv>
    18f8:	mov	x19, x0
    18fc:	cbz	x0, 1e34 <initialize_env+0x161c>
    1900:	bl	0 <__ctype_b_loc>
    1904:	ldr	x23, [x0]
    1908:	ldrb	w0, [x19]
    190c:	ldrh	w0, [x23, x0, lsl #1]
    1910:	tbnz	w0, #13, 1aa0 <initialize_env+0x1288>
    1914:	adrp	x1, 0 <parse_boolean>
    1918:	mov	x0, x19
    191c:	add	x1, x1, #0x0
    1920:	mov	x2, #0x4                   	// #4
    1924:	bl	0 <strncasecmp>
    1928:	cbnz	w0, 1aa8 <initialize_env+0x1290>
    192c:	add	x19, x19, #0x4
    1930:	mov	w24, #0x0                   	// #0
    1934:	mov	w25, #0x1                   	// #1
    1938:	ldrb	w1, [x19]
    193c:	ldrb	w0, [x19]
    1940:	ldrh	w1, [x23, x1, lsl #1]
    1944:	tbnz	w1, #13, 1af4 <initialize_env+0x12dc>
    1948:	cbz	w0, 1958 <initialize_env+0x1140>
    194c:	adrp	x0, 0 <parse_boolean>
    1950:	add	x0, x0, #0x0
    1954:	bl	0 <gomp_error>
    1958:	cbz	w25, 1e34 <initialize_env+0x161c>
    195c:	adrp	x19, 0 <stderr>
    1960:	adrp	x0, 0 <parse_boolean>
    1964:	add	x0, x0, #0x0
    1968:	adrp	x23, 0 <parse_boolean>
    196c:	ldr	x1, [x19]
    1970:	add	x23, x23, #0x0
    1974:	adrp	x25, 0 <parse_boolean>
    1978:	add	x25, x25, #0x0
    197c:	adrp	x26, 8 <parse_boolean+0x8>
    1980:	bl	0 <fputs>
    1984:	ldr	x1, [x19]
    1988:	adrp	x0, 0 <parse_boolean>
    198c:	add	x0, x0, #0x0
    1990:	bl	0 <fputs>
    1994:	ldrb	w0, [x20, #24]
    1998:	adrp	x1, 0 <parse_boolean>
    199c:	add	x1, x1, #0x0
    19a0:	cmp	w0, #0x0
    19a4:	ldr	x0, [x19]
    19a8:	csel	x2, x25, x23, ne  // ne = any
    19ac:	bl	0 <fprintf>
    19b0:	ldrb	w0, [x20, #25]
    19b4:	adrp	x1, 0 <parse_boolean>
    19b8:	add	x1, x1, #0x0
    19bc:	cmp	w0, #0x0
    19c0:	ldr	x0, [x19]
    19c4:	csel	x2, x25, x23, ne  // ne = any
    19c8:	adrp	x25, 0 <parse_boolean>
    19cc:	add	x25, x25, #0x0
    19d0:	mov	x23, #0x0                   	// #0
    19d4:	bl	0 <fprintf>
    19d8:	ldr	x2, [x22]
    19dc:	add	x22, x19, #0x0
    19e0:	ldr	x0, [x19]
    19e4:	adrp	x1, 0 <parse_boolean>
    19e8:	add	x1, x1, #0x0
    19ec:	bl	0 <fprintf>
    19f0:	ldr	x1, [x26]
    19f4:	add	x23, x23, #0x1
    19f8:	ldr	x0, [x22]
    19fc:	cmp	x1, x23
    1a00:	b.hi	1b10 <initialize_env+0x12f8>  // b.pmore
    1a04:	adrp	x23, 0 <parse_boolean>
    1a08:	add	x23, x23, #0x0
    1a0c:	mov	x1, x0
    1a10:	mov	x0, x23
    1a14:	bl	0 <fputs>
    1a18:	ldr	x1, [x22]
    1a1c:	adrp	x0, 0 <parse_boolean>
    1a20:	add	x0, x0, #0x0
    1a24:	bl	0 <fputs>
    1a28:	ldr	w0, [x20, #8]
    1a2c:	tbz	w0, #31, 1b28 <initialize_env+0x1310>
    1a30:	mov	w1, #0x80000001            	// #-2147483647
    1a34:	cmp	w0, w1
    1a38:	b.eq	1b98 <initialize_env+0x1380>  // b.none
    1a3c:	ldr	x1, [x22]
    1a40:	adrp	x0, 0 <parse_boolean>
    1a44:	add	x0, x0, #0x0
    1a48:	bl	0 <fputs>
    1a4c:	ldr	w0, [x20, #8]
    1a50:	ldr	x1, [x19]
    1a54:	and	w0, w0, #0x7fffffff
    1a58:	cmp	w0, #0x4
    1a5c:	b.hi	1b58 <initialize_env+0x1340>  // b.pmore
    1a60:	adrp	x2, 0 <parse_boolean>
    1a64:	add	x2, x2, #0x0
    1a68:	ldrb	w0, [x2, w0, uxtw]
    1a6c:	adr	x2, 1a78 <initialize_env+0x1260>
    1a70:	add	x0, x2, w0, sxtb #2
    1a74:	br	x0
    1a78:	adrp	x0, 0 <parse_boolean>
    1a7c:	add	x0, x0, #0x0
    1a80:	bl	0 <gomp_error>
    1a84:	b	18e8 <initialize_env+0x10d0>
    1a88:	cbz	w0, 18e8 <initialize_env+0x10d0>
    1a8c:	bl	0 <strerror>
    1a90:	mov	x1, x0
    1a94:	adrp	x0, 0 <parse_boolean>
    1a98:	add	x0, x0, #0x0
    1a9c:	b	18a0 <initialize_env+0x1088>
    1aa0:	add	x19, x19, #0x1
    1aa4:	b	1908 <initialize_env+0x10f0>
    1aa8:	adrp	x1, 0 <parse_boolean>
    1aac:	mov	x0, x19
    1ab0:	add	x1, x1, #0x0
    1ab4:	mov	x2, #0x5                   	// #5
    1ab8:	bl	0 <strncasecmp>
    1abc:	cbnz	w0, 1ad0 <initialize_env+0x12b8>
    1ac0:	add	x19, x19, #0x5
    1ac4:	mov	w24, #0x0                   	// #0
    1ac8:	mov	w25, #0x0                   	// #0
    1acc:	b	1938 <initialize_env+0x1120>
    1ad0:	adrp	x1, 0 <parse_boolean>
    1ad4:	mov	x0, x19
    1ad8:	add	x1, x1, #0x0
    1adc:	mov	x2, #0x7                   	// #7
    1ae0:	bl	0 <strncasecmp>
    1ae4:	cbnz	w0, 1afc <initialize_env+0x12e4>
    1ae8:	add	x19, x19, #0x7
    1aec:	mov	w24, #0x1                   	// #1
    1af0:	b	1934 <initialize_env+0x111c>
    1af4:	add	x19, x19, #0x1
    1af8:	b	1938 <initialize_env+0x1120>
    1afc:	adrp	x19, 0 <parse_boolean>
    1b00:	mov	w24, #0x0                   	// #0
    1b04:	add	x19, x19, #0x0
    1b08:	mov	w25, #0x0                   	// #0
    1b0c:	b	1938 <initialize_env+0x1120>
    1b10:	adrp	x1, 8 <parse_boolean+0x8>
    1b14:	ldr	x1, [x1]
    1b18:	ldr	x2, [x1, x23, lsl #3]
    1b1c:	mov	x1, x25
    1b20:	bl	0 <fprintf>
    1b24:	b	19f0 <initialize_env+0x11d8>
    1b28:	cmp	w0, #0x1
    1b2c:	b.ne	1a4c <initialize_env+0x1234>  // b.any
    1b30:	adrp	x0, 0 <parse_boolean>
    1b34:	add	x0, x0, #0x0
    1b38:	ldr	x1, [x22]
    1b3c:	b	1a48 <initialize_env+0x1230>
    1b40:	adrp	x0, 0 <parse_boolean>
    1b44:	add	x0, x0, #0x0
    1b48:	bl	0 <fputs>
    1b4c:	ldr	w2, [x20, #12]
    1b50:	cmp	w2, #0x1
    1b54:	b.ne	1bb0 <initialize_env+0x1398>  // b.any
    1b58:	ldr	x1, [x19]
    1b5c:	mov	x0, x23
    1b60:	bl	0 <fputs>
    1b64:	ldr	x1, [x19]
    1b68:	adrp	x0, 0 <parse_boolean>
    1b6c:	add	x0, x0, #0x0
    1b70:	bl	0 <fputs>
    1b74:	ldrb	w1, [x20, #26]
    1b78:	cmp	w1, #0x4
    1b7c:	b.hi	1bfc <initialize_env+0x13e4>  // b.pmore
    1b80:	adrp	x0, 0 <parse_boolean>
    1b84:	add	x0, x0, #0x0
    1b88:	ldrb	w0, [x0, w1, uxtw]
    1b8c:	adr	x1, 1b98 <initialize_env+0x1380>
    1b90:	add	x0, x1, w0, sxtb #2
    1b94:	br	x0
    1b98:	ldr	x1, [x19]
    1b9c:	adrp	x0, 0 <parse_boolean>
    1ba0:	add	x0, x0, #0x0
    1ba4:	bl	0 <fputs>
    1ba8:	ldr	w2, [x20, #12]
    1bac:	cbz	w2, 1b58 <initialize_env+0x1340>
    1bb0:	ldr	x0, [x19]
    1bb4:	adrp	x1, 0 <parse_boolean>
    1bb8:	add	x1, x1, #0x0
    1bbc:	bl	0 <fprintf>
    1bc0:	b	1b58 <initialize_env+0x1340>
    1bc4:	adrp	x0, 0 <parse_boolean>
    1bc8:	add	x0, x0, #0x0
    1bcc:	b	1b48 <initialize_env+0x1330>
    1bd0:	adrp	x0, 0 <parse_boolean>
    1bd4:	add	x0, x0, #0x0
    1bd8:	b	1b48 <initialize_env+0x1330>
    1bdc:	adrp	x0, 0 <parse_boolean>
    1be0:	add	x0, x0, #0x0
    1be4:	bl	0 <fputs>
    1be8:	b	1b58 <initialize_env+0x1340>
    1bec:	ldr	x1, [x19]
    1bf0:	adrp	x0, 0 <parse_boolean>
    1bf4:	add	x0, x0, #0x0
    1bf8:	bl	0 <fputs>
    1bfc:	adrp	x0, 0 <parse_boolean>
    1c00:	adrp	x26, 0 <parse_boolean>
    1c04:	add	x0, x0, #0x0
    1c08:	add	x26, x26, #0x0
    1c0c:	mov	x25, #0x1                   	// #1
    1c10:	adrp	x28, 8 <parse_boolean+0x8>
    1c14:	str	x0, [sp, #104]
    1c18:	b	1c90 <initialize_env+0x1478>
    1c1c:	adrp	x0, 0 <parse_boolean>
    1c20:	add	x0, x0, #0x0
    1c24:	ldr	x1, [x19]
    1c28:	b	1bf8 <initialize_env+0x13e0>
    1c2c:	adrp	x0, 0 <parse_boolean>
    1c30:	add	x0, x0, #0x0
    1c34:	ldr	x1, [x19]
    1c38:	b	1bf8 <initialize_env+0x13e0>
    1c3c:	adrp	x0, 0 <parse_boolean>
    1c40:	add	x0, x0, #0x0
    1c44:	ldr	x1, [x19]
    1c48:	b	1bf8 <initialize_env+0x13e0>
    1c4c:	adrp	x0, 0 <parse_boolean>
    1c50:	add	x0, x0, #0x0
    1c54:	ldr	x1, [x19]
    1c58:	b	1bf8 <initialize_env+0x13e0>
    1c5c:	adrp	x0, 8 <parse_boolean+0x8>
    1c60:	ldr	x0, [x0]
    1c64:	ldrb	w0, [x0, x25]
    1c68:	cmp	w0, #0x3
    1c6c:	b.eq	1eac <initialize_env+0x1694>  // b.none
    1c70:	cmp	w0, #0x4
    1c74:	b.eq	1eb4 <initialize_env+0x169c>  // b.none
    1c78:	cmp	w0, #0x2
    1c7c:	b.ne	1c8c <initialize_env+0x1474>  // b.any
    1c80:	adrp	x0, 0 <parse_boolean>
    1c84:	add	x0, x0, #0x0
    1c88:	bl	0 <fputs>
    1c8c:	add	x25, x25, #0x1
    1c90:	ldr	x0, [x28]
    1c94:	ldr	x1, [x22]
    1c98:	cmp	x0, x25
    1c9c:	b.hi	1c5c <initialize_env+0x1444>  // b.pmore
    1ca0:	mov	x0, x23
    1ca4:	bl	0 <fputs>
    1ca8:	ldr	x1, [x22]
    1cac:	adrp	x0, 0 <parse_boolean>
    1cb0:	adrp	x25, 0 <parse_boolean>
    1cb4:	add	x0, x0, #0x0
    1cb8:	adrp	x26, 0 <parse_boolean>
    1cbc:	add	x25, x25, #0x0
    1cc0:	bl	0 <fputs>
    1cc4:	add	x26, x26, #0x0
    1cc8:	mov	x28, #0x0                   	// #0
    1ccc:	adrp	x2, 8 <parse_boolean+0x8>
    1cd0:	ldr	x0, [x2]
    1cd4:	ldr	x1, [x22]
    1cd8:	cmp	x0, x28
    1cdc:	b.hi	1ebc <initialize_env+0x16a4>  // b.pmore
    1ce0:	mov	x0, x23
    1ce4:	bl	0 <fputs>
    1ce8:	ldr	x0, [x22]
    1cec:	mov	x2, x27
    1cf0:	adrp	x1, 0 <parse_boolean>
    1cf4:	add	x1, x1, #0x0
    1cf8:	bl	0 <fprintf>
    1cfc:	cmp	w21, #0x1
    1d00:	adrp	x0, 0 <parse_boolean>
    1d04:	adrp	x2, 0 <parse_boolean>
    1d08:	add	x0, x0, #0x0
    1d0c:	add	x2, x2, #0x0
    1d10:	adrp	x1, 0 <parse_boolean>
    1d14:	csel	x2, x2, x0, eq  // eq = none
    1d18:	add	x1, x1, #0x0
    1d1c:	ldr	x0, [x22]
    1d20:	adrp	x21, 0 <parse_boolean>
    1d24:	adrp	x22, 0 <parse_boolean>
    1d28:	add	x21, x21, #0x0
    1d2c:	add	x22, x22, #0x0
    1d30:	bl	0 <fprintf>
    1d34:	ldr	w2, [x20, #20]
    1d38:	adrp	x1, 0 <parse_boolean>
    1d3c:	ldr	x0, [x19]
    1d40:	add	x1, x1, #0x0
    1d44:	bl	0 <fprintf>
    1d48:	ldr	x0, [x19]
    1d4c:	adrp	x1, 0 <parse_boolean>
    1d50:	ldr	x2, [x20, #40]
    1d54:	add	x1, x1, #0x0
    1d58:	adrp	x20, 0 <parse_boolean>
    1d5c:	add	x20, x20, #0x0
    1d60:	bl	0 <fprintf>
    1d64:	ldr	x0, [sp, #112]
    1d68:	adrp	x1, 0 <parse_boolean>
    1d6c:	add	x1, x1, #0x0
    1d70:	ldrb	w0, [x0]
    1d74:	cmp	w0, #0x0
    1d78:	ldr	x0, [x19]
    1d7c:	csel	x2, x22, x21, ne  // ne = any
    1d80:	bl	0 <fprintf>
    1d84:	ldr	w2, [x20, #16]
    1d88:	adrp	x1, 0 <parse_boolean>
    1d8c:	ldr	x0, [x19]
    1d90:	add	x1, x1, #0x0
    1d94:	bl	0 <fprintf>
    1d98:	adrp	x0, 0 <parse_boolean>
    1d9c:	adrp	x1, 0 <parse_boolean>
    1da0:	add	x1, x1, #0x0
    1da4:	ldr	w2, [x0]
    1da8:	ldr	x0, [x19]
    1dac:	bl	0 <fprintf>
    1db0:	adrp	x0, 1 <parse_boolean+0x1>
    1db4:	adrp	x1, 0 <parse_boolean>
    1db8:	add	x1, x1, #0x0
    1dbc:	ldrb	w0, [x0]
    1dc0:	cmp	w0, #0x0
    1dc4:	ldr	x0, [x19]
    1dc8:	csel	x2, x22, x21, ne  // ne = any
    1dcc:	bl	0 <fprintf>
    1dd0:	ldr	x0, [x19]
    1dd4:	adrp	x1, 0 <parse_boolean>
    1dd8:	ldr	x2, [x20, #120]
    1ddc:	add	x1, x1, #0x0
    1de0:	bl	0 <fprintf>
    1de4:	cbz	w24, 1e24 <initialize_env+0x160c>
    1de8:	ldr	x1, [x19]
    1dec:	adrp	x0, 0 <parse_boolean>
    1df0:	add	x0, x0, #0x0
    1df4:	bl	0 <fputs>
    1df8:	ldr	x0, [x19]
    1dfc:	mov	x2, x27
    1e00:	adrp	x1, 0 <parse_boolean>
    1e04:	add	x1, x1, #0x0
    1e08:	bl	0 <fprintf>
    1e0c:	ldr	x0, [sp, #96]
    1e10:	adrp	x1, 0 <parse_boolean>
    1e14:	add	x1, x1, #0x0
    1e18:	ldr	x2, [x0]
    1e1c:	ldr	x0, [x19]
    1e20:	bl	0 <fprintf>
    1e24:	ldr	x1, [x19]
    1e28:	adrp	x0, 0 <parse_boolean>
    1e2c:	add	x0, x0, #0x0
    1e30:	bl	0 <fputs>
    1e34:	adrp	x19, 4 <parse_boolean+0x4>
    1e38:	adrp	x0, 0 <parse_boolean>
    1e3c:	add	x1, x19, #0x0
    1e40:	add	x0, x0, #0x0
    1e44:	bl	7b4 <parse_int.constprop.0>
    1e48:	tst	w0, #0xff
    1e4c:	b.ne	1e54 <initialize_env+0x163c>  // b.any
    1e50:	str	wzr, [x19]
    1e54:	adrp	x0, 0 <parse_boolean>
    1e58:	adrp	x19, 8 <parse_boolean+0x8>
    1e5c:	add	x0, x0, #0x0
    1e60:	bl	0 <getenv>
    1e64:	cbz	x0, 1ef8 <initialize_env+0x16e0>
    1e68:	ldrb	w1, [x0]
    1e6c:	cbz	w1, 1ef8 <initialize_env+0x16e0>
    1e70:	bl	0 <strdup>
    1e74:	str	x0, [x19]
    1e78:	adrp	x0, 0 <parse_boolean>
    1e7c:	add	x0, x0, #0x0
    1e80:	bl	0 <getenv>
    1e84:	mov	x19, x0
    1e88:	cbnz	x0, 1f6c <initialize_env+0x1754>
    1e8c:	bl	0 <goacc_runtime_initialize>
    1e90:	ldp	x19, x20, [sp, #16]
    1e94:	ldp	x21, x22, [sp, #32]
    1e98:	ldp	x23, x24, [sp, #48]
    1e9c:	ldp	x25, x26, [sp, #64]
    1ea0:	ldp	x27, x28, [sp, #80]
    1ea4:	ldp	x29, x30, [sp], #208
    1ea8:	ret
    1eac:	ldr	x0, [sp, #104]
    1eb0:	b	1c88 <initialize_env+0x1470>
    1eb4:	mov	x0, x26
    1eb8:	b	1c88 <initialize_env+0x1470>
    1ebc:	mov	w0, #0x7b                  	// #123
    1ec0:	bl	0 <fputc>
    1ec4:	adrp	x0, 8 <parse_boolean+0x8>
    1ec8:	ldr	x0, [x0]
    1ecc:	ldr	x0, [x0, x28, lsl #3]
    1ed0:	add	x28, x28, #0x1
    1ed4:	bl	0 <gomp_affinity_print_place>
    1ed8:	adrp	x2, 8 <parse_boolean+0x8>
    1edc:	ldr	x1, [x22]
    1ee0:	ldr	x0, [x2]
    1ee4:	cmp	x0, x28
    1ee8:	csel	x0, x26, x25, ne  // ne = any
    1eec:	bl	0 <fputs>
    1ef0:	adrp	x2, 8 <parse_boolean+0x8>
    1ef4:	b	1cd0 <initialize_env+0x14b8>
    1ef8:	str	xzr, [x19]
    1efc:	b	1e78 <initialize_env+0x1660>
    1f00:	cbz	x20, 1f10 <initialize_env+0x16f8>
    1f04:	add	x19, x19, #0x1
    1f08:	cmp	w0, #0x3a
    1f0c:	b.ne	1e8c <initialize_env+0x1674>  // b.any
    1f10:	ldrb	w0, [x19]
    1f14:	cmp	w0, #0x3a
    1f18:	b.eq	1f54 <initialize_env+0x173c>  // b.none
    1f1c:	bl	0 <__errno_location>
    1f20:	mov	x21, x0
    1f24:	add	x1, sp, #0xc8
    1f28:	mov	x0, x19
    1f2c:	mov	w2, #0xa                   	// #10
    1f30:	str	wzr, [x21]
    1f34:	bl	0 <strtol>
    1f38:	ldr	w1, [x21]
    1f3c:	cbnz	w1, 1e8c <initialize_env+0x1674>
    1f40:	tbnz	x0, #63, 1e8c <initialize_env+0x1674>
    1f44:	tst	x0, #0xffffffff00000000
    1f48:	b.ne	1e8c <initialize_env+0x1674>  // b.any
    1f4c:	ldr	x19, [sp, #200]
    1f50:	str	w0, [x22, x20, lsl #2]
    1f54:	add	x20, x20, #0x1
    1f58:	ldrb	w0, [x19]
    1f5c:	cbz	w0, 1e8c <initialize_env+0x1674>
    1f60:	cmp	x20, #0x3
    1f64:	b.ne	1f00 <initialize_env+0x16e8>  // b.any
    1f68:	b	1e8c <initialize_env+0x1674>
    1f6c:	adrp	x22, c <parse_boolean+0xc>
    1f70:	mov	x20, #0x0                   	// #0
    1f74:	add	x22, x22, #0x0
    1f78:	b	1f58 <initialize_env+0x1740>

error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_vdebug>:
   0:	adrp	x0, 0 <gomp_debug_var>
   4:	ldr	w0, [x0]
   8:	cbz	w0, 3c <gomp_vdebug+0x3c>
   c:	stp	x29, x30, [sp, #-48]!
  10:	adrp	x0, 0 <stderr>
  14:	mov	x29, sp
  18:	ldp	x4, x5, [x2]
  1c:	stp	x4, x5, [sp, #16]
  20:	ldp	x2, x3, [x2, #16]
  24:	stp	x2, x3, [sp, #32]
  28:	ldr	x0, [x0]
  2c:	add	x2, sp, #0x10
  30:	bl	0 <vfprintf>
  34:	ldp	x29, x30, [sp], #48
  38:	ret
  3c:	ret

0000000000000040 <gomp_debug>:
  40:	stp	x29, x30, [sp, #-256]!
  44:	mov	x29, sp
  48:	stp	x2, x3, [sp, #208]
  4c:	add	x2, sp, #0x100
  50:	stp	x2, x2, [sp, #48]
  54:	add	x2, sp, #0xd0
  58:	str	x2, [sp, #64]
  5c:	mov	w2, #0xffffffd0            	// #-48
  60:	str	w2, [sp, #72]
  64:	mov	w2, #0xffffff80            	// #-128
  68:	str	w2, [sp, #76]
  6c:	ldp	x2, x3, [sp, #48]
  70:	stp	x2, x3, [sp, #16]
  74:	ldp	x2, x3, [sp, #64]
  78:	stp	x2, x3, [sp, #32]
  7c:	add	x2, sp, #0x10
  80:	str	q0, [sp, #80]
  84:	str	q1, [sp, #96]
  88:	str	q2, [sp, #112]
  8c:	str	q3, [sp, #128]
  90:	str	q4, [sp, #144]
  94:	str	q5, [sp, #160]
  98:	str	q6, [sp, #176]
  9c:	str	q7, [sp, #192]
  a0:	stp	x4, x5, [sp, #224]
  a4:	stp	x6, x7, [sp, #240]
  a8:	bl	0 <gomp_vdebug>
  ac:	ldp	x29, x30, [sp], #256
  b0:	ret

00000000000000b4 <gomp_verror>:
  b4:	stp	x29, x30, [sp, #-80]!
  b8:	mov	x29, sp
  bc:	stp	x19, x20, [sp, #16]
  c0:	adrp	x20, 0 <stderr>
  c4:	mov	x19, x1
  c8:	ldr	x1, [x20]
  cc:	str	x21, [sp, #32]
  d0:	mov	x21, x0
  d4:	adrp	x0, 0 <gomp_vdebug>
  d8:	add	x0, x0, #0x0
  dc:	bl	0 <fputs>
  e0:	ldp	x0, x1, [x19]
  e4:	stp	x0, x1, [sp, #48]
  e8:	add	x2, sp, #0x30
  ec:	ldp	x0, x1, [x19, #16]
  f0:	stp	x0, x1, [sp, #64]
  f4:	ldr	x0, [x20]
  f8:	mov	x1, x21
  fc:	bl	0 <vfprintf>
 100:	ldr	x1, [x20]
 104:	mov	w0, #0xa                   	// #10
 108:	ldp	x19, x20, [sp, #16]
 10c:	ldr	x21, [sp, #32]
 110:	ldp	x29, x30, [sp], #80
 114:	b	0 <fputc>

0000000000000118 <gomp_error>:
 118:	stp	x29, x30, [sp, #-272]!
 11c:	mov	x29, sp
 120:	stp	x1, x2, [sp, #216]
 124:	add	x1, sp, #0x110
 128:	stp	x1, x1, [sp, #48]
 12c:	add	x1, sp, #0xd0
 130:	str	x1, [sp, #64]
 134:	mov	w1, #0xffffffc8            	// #-56
 138:	str	w1, [sp, #72]
 13c:	mov	w1, #0xffffff80            	// #-128
 140:	str	w1, [sp, #76]
 144:	add	x1, sp, #0x10
 148:	stp	x3, x4, [sp, #232]
 14c:	ldp	x2, x3, [sp, #48]
 150:	stp	x2, x3, [sp, #16]
 154:	ldp	x2, x3, [sp, #64]
 158:	stp	x2, x3, [sp, #32]
 15c:	str	q0, [sp, #80]
 160:	str	q1, [sp, #96]
 164:	str	q2, [sp, #112]
 168:	str	q3, [sp, #128]
 16c:	str	q4, [sp, #144]
 170:	str	q5, [sp, #160]
 174:	str	q6, [sp, #176]
 178:	str	q7, [sp, #192]
 17c:	stp	x5, x6, [sp, #248]
 180:	str	x7, [sp, #264]
 184:	bl	b4 <gomp_verror>
 188:	ldp	x29, x30, [sp], #272
 18c:	ret

0000000000000190 <gomp_vfatal>:
 190:	stp	x29, x30, [sp, #-48]!
 194:	mov	x29, sp
 198:	ldp	x2, x3, [x1]
 19c:	stp	x2, x3, [sp, #16]
 1a0:	ldp	x2, x3, [x1, #16]
 1a4:	add	x1, sp, #0x10
 1a8:	stp	x2, x3, [sp, #32]
 1ac:	bl	b4 <gomp_verror>
 1b0:	mov	w0, #0x1                   	// #1
 1b4:	bl	0 <exit>

00000000000001b8 <gomp_fatal>:
 1b8:	stp	x29, x30, [sp, #-272]!
 1bc:	mov	x29, sp
 1c0:	stp	x1, x2, [sp, #216]
 1c4:	add	x1, sp, #0x110
 1c8:	stp	x1, x1, [sp, #48]
 1cc:	add	x1, sp, #0xd0
 1d0:	str	x1, [sp, #64]
 1d4:	mov	w1, #0xffffffc8            	// #-56
 1d8:	str	w1, [sp, #72]
 1dc:	mov	w1, #0xffffff80            	// #-128
 1e0:	str	w1, [sp, #76]
 1e4:	add	x1, sp, #0x10
 1e8:	stp	x3, x4, [sp, #232]
 1ec:	ldp	x2, x3, [sp, #48]
 1f0:	stp	x2, x3, [sp, #16]
 1f4:	ldp	x2, x3, [sp, #64]
 1f8:	stp	x2, x3, [sp, #32]
 1fc:	str	q0, [sp, #80]
 200:	str	q1, [sp, #96]
 204:	str	q2, [sp, #112]
 208:	str	q3, [sp, #128]
 20c:	str	q4, [sp, #144]
 210:	str	q5, [sp, #160]
 214:	str	q6, [sp, #176]
 218:	str	q7, [sp, #192]
 21c:	stp	x5, x6, [sp, #248]
 220:	str	x7, [sp, #264]
 224:	bl	190 <gomp_vfatal>

icv.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_set_num_threads>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mrs	x1, tpidr_el0
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	mov	w19, w0
  14:	adrp	x0, 0 <gomp_tls_data>
  18:	ldr	x0, [x0]
  1c:	add	x0, x1, x0
  20:	ldr	x0, [x0, #80]
  24:	cbz	x0, 48 <gomp_ialias_omp_set_num_threads+0x48>
  28:	add	x0, x0, #0x90
  2c:	cmp	w19, #0x0
  30:	csinc	w19, w19, wzr, gt
  34:	sxtw	x19, w19
  38:	str	x19, [x0]
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret
  48:	bl	0 <gomp_new_icv>
  4c:	b	2c <gomp_ialias_omp_set_num_threads+0x2c>

0000000000000050 <gomp_ialias_omp_set_dynamic>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	mrs	x1, tpidr_el0
  58:	mov	x29, sp
  5c:	str	x19, [sp, #16]
  60:	mov	w19, w0
  64:	adrp	x0, 0 <gomp_tls_data>
  68:	ldr	x0, [x0]
  6c:	add	x0, x1, x0
  70:	ldr	x1, [x0, #80]
  74:	cbz	x1, 94 <gomp_ialias_omp_set_dynamic+0x44>
  78:	add	x0, x1, #0x90
  7c:	cmp	w19, #0x0
  80:	cset	w1, ne  // ne = any
  84:	strb	w1, [x0, #24]
  88:	ldr	x19, [sp, #16]
  8c:	ldp	x29, x30, [sp], #32
  90:	ret
  94:	bl	0 <gomp_new_icv>
  98:	b	7c <gomp_ialias_omp_set_dynamic+0x2c>

000000000000009c <gomp_ialias_omp_get_dynamic>:
  9c:	adrp	x0, 0 <gomp_tls_data>
  a0:	ldr	x0, [x0]
  a4:	mrs	x1, tpidr_el0
  a8:	add	x0, x1, x0
  ac:	ldr	x1, [x0, #80]
  b0:	adrp	x0, 0 <gomp_global_icv>
  b4:	add	x0, x0, #0x0
  b8:	add	x2, x1, #0x90
  bc:	cmp	x1, #0x0
  c0:	csel	x0, x0, x2, eq  // eq = none
  c4:	ldrb	w0, [x0, #24]
  c8:	ret

00000000000000cc <gomp_ialias_omp_set_nested>:
  cc:	stp	x29, x30, [sp, #-32]!
  d0:	mrs	x1, tpidr_el0
  d4:	mov	x29, sp
  d8:	str	x19, [sp, #16]
  dc:	mov	w19, w0
  e0:	adrp	x0, 0 <gomp_tls_data>
  e4:	ldr	x0, [x0]
  e8:	add	x0, x1, x0
  ec:	ldr	x1, [x0, #80]
  f0:	cbz	x1, 110 <gomp_ialias_omp_set_nested+0x44>
  f4:	add	x0, x1, #0x90
  f8:	cmp	w19, #0x0
  fc:	cset	w1, ne  // ne = any
 100:	strb	w1, [x0, #25]
 104:	ldr	x19, [sp, #16]
 108:	ldp	x29, x30, [sp], #32
 10c:	ret
 110:	bl	0 <gomp_new_icv>
 114:	b	f8 <gomp_ialias_omp_set_nested+0x2c>

0000000000000118 <gomp_ialias_omp_get_nested>:
 118:	adrp	x0, 0 <gomp_tls_data>
 11c:	ldr	x0, [x0]
 120:	mrs	x1, tpidr_el0
 124:	add	x0, x1, x0
 128:	ldr	x1, [x0, #80]
 12c:	adrp	x0, 0 <gomp_global_icv>
 130:	add	x0, x0, #0x0
 134:	add	x2, x1, #0x90
 138:	cmp	x1, #0x0
 13c:	csel	x0, x0, x2, eq  // eq = none
 140:	ldrb	w0, [x0, #25]
 144:	ret

0000000000000148 <gomp_ialias_omp_set_schedule>:
 148:	stp	x29, x30, [sp, #-32]!
 14c:	mov	x29, sp
 150:	stp	x19, x20, [sp, #16]
 154:	mov	w20, w0
 158:	adrp	x0, 0 <gomp_tls_data>
 15c:	ldr	x0, [x0]
 160:	mov	w19, w1
 164:	mrs	x1, tpidr_el0
 168:	add	x0, x1, x0
 16c:	ldr	x1, [x0, #80]
 170:	cbz	x1, 1a0 <gomp_ialias_omp_set_schedule+0x58>
 174:	add	x0, x1, #0x90
 178:	and	w1, w20, #0x7fffffff
 17c:	tst	w20, #0x7ffffffc
 180:	b.ne	1a8 <gomp_ialias_omp_set_schedule+0x60>  // b.any
 184:	tst	w20, #0x7ffffffe
 188:	b.ne	1c8 <gomp_ialias_omp_set_schedule+0x80>  // b.any
 18c:	cmp	w1, #0x1
 190:	b.eq	1b8 <gomp_ialias_omp_set_schedule+0x70>  // b.none
 194:	ldp	x19, x20, [sp, #16]
 198:	ldp	x29, x30, [sp], #32
 19c:	ret
 1a0:	bl	0 <gomp_new_icv>
 1a4:	b	178 <gomp_ialias_omp_set_schedule+0x30>
 1a8:	cmp	w1, #0x4
 1ac:	b.ne	194 <gomp_ialias_omp_set_schedule+0x4c>  // b.any
 1b0:	str	w20, [x0, #8]
 1b4:	b	194 <gomp_ialias_omp_set_schedule+0x4c>
 1b8:	cmp	w19, #0x0
 1bc:	csel	w19, w19, wzr, ge  // ge = tcont
 1c0:	str	w19, [x0, #12]
 1c4:	b	1b0 <gomp_ialias_omp_set_schedule+0x68>
 1c8:	cmp	w19, #0x0
 1cc:	csinc	w19, w19, wzr, gt
 1d0:	b	1c0 <gomp_ialias_omp_set_schedule+0x78>

00000000000001d4 <gomp_ialias_omp_get_schedule>:
 1d4:	adrp	x2, 0 <gomp_tls_data>
 1d8:	ldr	x2, [x2]
 1dc:	mrs	x3, tpidr_el0
 1e0:	add	x2, x3, x2
 1e4:	ldr	x3, [x2, #80]
 1e8:	adrp	x2, 0 <gomp_global_icv>
 1ec:	add	x2, x2, #0x0
 1f0:	add	x4, x3, #0x90
 1f4:	cmp	x3, #0x0
 1f8:	csel	x2, x2, x4, eq  // eq = none
 1fc:	ldr	w3, [x2, #8]
 200:	str	w3, [x0]
 204:	ldr	w0, [x2, #12]
 208:	str	w0, [x1]
 20c:	ret

0000000000000210 <gomp_ialias_omp_get_max_threads>:
 210:	adrp	x0, 0 <gomp_tls_data>
 214:	ldr	x0, [x0]
 218:	mrs	x1, tpidr_el0
 21c:	add	x0, x1, x0
 220:	ldr	x1, [x0, #80]
 224:	adrp	x0, 0 <gomp_global_icv>
 228:	add	x0, x0, #0x0
 22c:	add	x2, x1, #0x90
 230:	cmp	x1, #0x0
 234:	csel	x0, x0, x2, eq  // eq = none
 238:	ldr	w0, [x0]
 23c:	ret

0000000000000240 <gomp_ialias_omp_get_thread_limit>:
 240:	adrp	x0, 0 <gomp_tls_data>
 244:	ldr	x0, [x0]
 248:	mrs	x1, tpidr_el0
 24c:	add	x0, x1, x0
 250:	ldr	x1, [x0, #80]
 254:	adrp	x0, 0 <gomp_global_icv>
 258:	add	x0, x0, #0x0
 25c:	add	x2, x1, #0x90
 260:	cmp	x1, #0x0
 264:	csel	x0, x0, x2, eq  // eq = none
 268:	mov	w1, #0x7fffffff            	// #2147483647
 26c:	ldr	w0, [x0, #20]
 270:	cmp	w0, #0x0
 274:	csel	w0, w0, w1, ge  // ge = tcont
 278:	ret

000000000000027c <gomp_ialias_omp_set_max_active_levels>:
 27c:	tbnz	w0, #31, 28c <gomp_ialias_omp_set_max_active_levels+0x10>
 280:	adrp	x1, 0 <gomp_max_active_levels_var>
 284:	sxtw	x0, w0
 288:	str	x0, [x1]
 28c:	ret

0000000000000290 <gomp_ialias_omp_get_max_active_levels>:
 290:	adrp	x0, 0 <gomp_max_active_levels_var>
 294:	ldr	w0, [x0]
 298:	ret

000000000000029c <gomp_ialias_omp_get_cancellation>:
 29c:	adrp	x0, 0 <gomp_cancel_var>
 2a0:	ldrb	w0, [x0]
 2a4:	ret

00000000000002a8 <gomp_ialias_omp_get_max_task_priority>:
 2a8:	adrp	x0, 0 <gomp_max_task_priority_var>
 2ac:	ldr	w0, [x0]
 2b0:	ret

00000000000002b4 <gomp_ialias_omp_get_proc_bind>:
 2b4:	adrp	x0, 0 <gomp_tls_data>
 2b8:	ldr	x0, [x0]
 2bc:	mrs	x1, tpidr_el0
 2c0:	add	x0, x1, x0
 2c4:	ldr	x1, [x0, #80]
 2c8:	adrp	x0, 0 <gomp_global_icv>
 2cc:	add	x0, x0, #0x0
 2d0:	add	x2, x1, #0x90
 2d4:	cmp	x1, #0x0
 2d8:	csel	x0, x0, x2, eq  // eq = none
 2dc:	ldrb	w0, [x0, #26]
 2e0:	ret

00000000000002e4 <gomp_ialias_omp_get_initial_device>:
 2e4:	mov	w0, #0xfffffffe            	// #-2
 2e8:	ret

00000000000002ec <gomp_ialias_omp_get_num_places>:
 2ec:	adrp	x0, 0 <gomp_places_list_len>
 2f0:	ldr	w0, [x0]
 2f4:	ret

00000000000002f8 <gomp_ialias_omp_get_place_num>:
 2f8:	adrp	x0, 0 <gomp_places_list>
 2fc:	ldr	x0, [x0]
 300:	cbz	x0, 344 <gomp_ialias_omp_get_place_num+0x4c>
 304:	stp	x29, x30, [sp, #-32]!
 308:	mov	x29, sp
 30c:	stp	x19, x20, [sp, #16]
 310:	mrs	x19, tpidr_el0
 314:	adrp	x20, 0 <gomp_tls_data>
 318:	ldr	x20, [x20]
 31c:	add	x0, x19, x20
 320:	ldr	w0, [x0, #92]
 324:	cbnz	w0, 32c <gomp_ialias_omp_get_place_num+0x34>
 328:	bl	0 <gomp_init_affinity>
 32c:	add	x19, x19, x20
 330:	ldr	w0, [x19, #92]
 334:	ldp	x19, x20, [sp, #16]
 338:	sub	w0, w0, #0x1
 33c:	ldp	x29, x30, [sp], #32
 340:	ret
 344:	mov	w0, #0xffffffff            	// #-1
 348:	ret

000000000000034c <gomp_ialias_omp_get_partition_num_places>:
 34c:	adrp	x0, 0 <gomp_places_list>
 350:	ldr	x0, [x0]
 354:	cbz	x0, 394 <gomp_ialias_omp_get_partition_num_places+0x48>
 358:	stp	x29, x30, [sp, #-32]!
 35c:	mov	x29, sp
 360:	stp	x19, x20, [sp, #16]
 364:	mrs	x19, tpidr_el0
 368:	adrp	x20, 0 <gomp_tls_data>
 36c:	ldr	x20, [x20]
 370:	add	x0, x19, x20
 374:	ldr	w0, [x0, #92]
 378:	cbnz	w0, 380 <gomp_ialias_omp_get_partition_num_places+0x34>
 37c:	bl	0 <gomp_init_affinity>
 380:	add	x19, x19, x20
 384:	ldr	w0, [x19, #56]
 388:	ldp	x19, x20, [sp, #16]
 38c:	ldp	x29, x30, [sp], #32
 390:	ret
 394:	mov	w0, #0x0                   	// #0
 398:	ret

000000000000039c <gomp_ialias_omp_get_partition_place_nums>:
 39c:	stp	x29, x30, [sp, #-48]!
 3a0:	mov	x29, sp
 3a4:	stp	x19, x20, [sp, #16]
 3a8:	mov	x20, x0
 3ac:	adrp	x0, 0 <gomp_places_list>
 3b0:	str	x21, [sp, #32]
 3b4:	ldr	x0, [x0]
 3b8:	cbz	x0, 3ec <gomp_ialias_omp_get_partition_place_nums+0x50>
 3bc:	adrp	x21, 0 <gomp_tls_data>
 3c0:	ldr	x21, [x21]
 3c4:	mrs	x19, tpidr_el0
 3c8:	add	x0, x19, x21
 3cc:	ldr	w0, [x0, #92]
 3d0:	cbnz	w0, 3d8 <gomp_ialias_omp_get_partition_place_nums+0x3c>
 3d4:	bl	0 <gomp_init_affinity>
 3d8:	add	x19, x19, x21
 3dc:	mov	x1, #0x0                   	// #0
 3e0:	ldr	w0, [x19, #56]
 3e4:	cmp	w0, w1
 3e8:	b.hi	3fc <gomp_ialias_omp_get_partition_place_nums+0x60>  // b.pmore
 3ec:	ldp	x19, x20, [sp, #16]
 3f0:	ldr	x21, [sp, #32]
 3f4:	ldp	x29, x30, [sp], #48
 3f8:	ret
 3fc:	ldr	w0, [x19, #52]
 400:	add	w0, w0, w1
 404:	str	w0, [x20, x1, lsl #2]
 408:	add	x1, x1, #0x1
 40c:	b	3e0 <gomp_ialias_omp_get_partition_place_nums+0x44>

icv-device.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_set_default_device>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mrs	x1, tpidr_el0
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	mov	w19, w0
  14:	adrp	x0, 0 <gomp_tls_data>
  18:	ldr	x0, [x0]
  1c:	add	x0, x1, x0
  20:	ldr	x1, [x0, #80]
  24:	cbz	x1, 44 <gomp_ialias_omp_set_default_device+0x44>
  28:	add	x0, x1, #0x90
  2c:	cmp	w19, #0x0
  30:	csel	w19, w19, wzr, ge  // ge = tcont
  34:	str	w19, [x0, #16]
  38:	ldr	x19, [sp, #16]
  3c:	ldp	x29, x30, [sp], #32
  40:	ret
  44:	bl	0 <gomp_new_icv>
  48:	b	2c <gomp_ialias_omp_set_default_device+0x2c>

000000000000004c <gomp_ialias_omp_get_default_device>:
  4c:	adrp	x0, 0 <gomp_tls_data>
  50:	ldr	x0, [x0]
  54:	mrs	x1, tpidr_el0
  58:	add	x0, x1, x0
  5c:	ldr	x1, [x0, #80]
  60:	adrp	x0, 0 <gomp_global_icv>
  64:	add	x0, x0, #0x0
  68:	add	x2, x1, #0x90
  6c:	cmp	x1, #0x0
  70:	csel	x0, x0, x2, eq  // eq = none
  74:	ldr	w0, [x0, #16]
  78:	ret

000000000000007c <gomp_ialias_omp_get_num_devices>:
  7c:	b	0 <gomp_get_num_devices>

0000000000000080 <gomp_ialias_omp_is_initial_device>:
  80:	mov	w0, #0x1                   	// #1
  84:	ret

iter.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_iter_static_next>:
   0:	adrp	x10, 0 <gomp_tls_data>
   4:	ldr	x10, [x10]
   8:	mrs	x7, tpidr_el0
   c:	mov	x9, x0
  10:	add	x0, x7, x10
  14:	ldr	x0, [x0, #16]
  18:	cbz	x0, 64 <gomp_iter_static_next+0x64>
  1c:	ldr	w5, [x0]
  20:	add	x6, x7, x10
  24:	ldr	x2, [x6, #72]
  28:	cmn	x2, #0x1
  2c:	b.eq	178 <gomp_iter_static_next+0x178>  // b.none
  30:	cmp	x5, #0x1
  34:	ldr	x4, [x6, #24]
  38:	b.ne	6c <gomp_iter_static_next+0x6c>  // b.any
  3c:	ldr	x0, [x4, #72]
  40:	str	x0, [x9]
  44:	ldr	x0, [x4, #16]
  48:	str	x0, [x1]
  4c:	mov	x1, #0xffffffffffffffff    	// #-1
  50:	str	x1, [x6, #72]
  54:	ldr	x1, [x4, #72]
  58:	cmp	x1, x0
  5c:	cset	w0, eq  // eq = none
  60:	ret
  64:	mov	x5, #0x1                   	// #1
  68:	b	20 <gomp_iter_static_next+0x20>
  6c:	ldr	x8, [x4, #8]
  70:	cbnz	x8, 108 <gomp_iter_static_next+0x108>
  74:	cbnz	x2, 180 <gomp_iter_static_next+0x180>
  78:	ldr	x8, [x4, #24]
  7c:	mov	x2, #0x1                   	// #1
  80:	ldr	x0, [x4, #72]
  84:	cmp	x8, #0x0
  88:	ldr	x4, [x4, #16]
  8c:	cneg	x2, x2, gt
  90:	add	x2, x8, x2
  94:	ldr	w6, [x6, #40]
  98:	sub	x4, x4, x0
  9c:	add	x4, x4, x2
  a0:	sdiv	x4, x4, x8
  a4:	udiv	x3, x4, x5
  a8:	msub	x2, x3, x5, x4
  ac:	cmp	x6, x2
  b0:	b.cs	bc <gomp_iter_static_next+0xbc>  // b.hs, b.nlast
  b4:	add	x3, x3, #0x1
  b8:	mov	x2, #0x0                   	// #0
  bc:	madd	x2, x3, x6, x2
  c0:	add	x3, x3, x2
  c4:	cmp	x2, x3
  c8:	b.cc	dc <gomp_iter_static_next+0xdc>  // b.lo, b.ul, b.last
  cc:	add	x7, x7, x10
  d0:	mov	x0, #0x1                   	// #1
  d4:	str	x0, [x7, #72]
  d8:	b	60 <gomp_iter_static_next+0x60>
  dc:	madd	x2, x2, x8, x0
  e0:	add	x7, x7, x10
  e4:	madd	x8, x3, x8, x0
  e8:	str	x2, [x9]
  ec:	cmp	x4, x3
  f0:	str	x8, [x1]
  f4:	mov	x0, #0x1                   	// #1
  f8:	cneg	x0, x0, eq  // eq = none
  fc:	str	x0, [x7, #72]
 100:	mov	w0, #0x0                   	// #0
 104:	b	60 <gomp_iter_static_next+0x60>
 108:	ldp	x3, x7, [x4, #16]
 10c:	mov	x0, #0x1                   	// #1
 110:	ldr	x10, [x4, #72]
 114:	cmp	x7, #0x0
 118:	sub	x3, x3, x10
 11c:	cneg	x11, x0, gt
 120:	add	x4, x7, x11
 124:	add	x3, x3, x4
 128:	ldr	w4, [x6, #40]
 12c:	sdiv	x3, x3, x7
 130:	madd	x2, x2, x5, x4
 134:	mul	x2, x2, x8
 138:	cmp	x3, x2
 13c:	b.ls	60 <gomp_iter_static_next+0x60>  // b.plast
 140:	add	x4, x8, x2
 144:	madd	x2, x2, x7, x10
 148:	cmp	x3, x4
 14c:	str	x2, [x9]
 150:	csel	x0, x3, x4, ls  // ls = plast
 154:	madd	x7, x0, x7, x10
 158:	str	x7, [x1]
 15c:	b.hi	16c <gomp_iter_static_next+0x16c>  // b.pmore
 160:	mov	x0, #0xffffffffffffffff    	// #-1
 164:	str	x0, [x6, #72]
 168:	b	100 <gomp_iter_static_next+0x100>
 16c:	ldr	x0, [x6, #72]
 170:	add	x0, x0, #0x1
 174:	b	164 <gomp_iter_static_next+0x164>
 178:	mov	w0, w2
 17c:	b	60 <gomp_iter_static_next+0x60>
 180:	mov	w0, #0x1                   	// #1
 184:	b	60 <gomp_iter_static_next+0x60>

0000000000000188 <gomp_iter_dynamic_next_locked>:
 188:	adrp	x2, 0 <gomp_tls_data>
 18c:	ldr	x2, [x2]
 190:	mrs	x3, tpidr_el0
 194:	add	x2, x3, x2
 198:	ldr	x4, [x2, #24]
 19c:	ldr	x3, [x4, #16]
 1a0:	ldr	x5, [x4, #72]
 1a4:	cmp	x3, x5
 1a8:	b.eq	1e8 <gomp_iter_dynamic_next_locked+0x60>  // b.none
 1ac:	ldr	x6, [x4, #24]
 1b0:	sub	x3, x3, x5
 1b4:	ldr	x2, [x4, #8]
 1b8:	tbz	x6, #63, 1dc <gomp_iter_dynamic_next_locked+0x54>
 1bc:	cmp	x2, x3
 1c0:	csel	x2, x2, x3, ge  // ge = tcont
 1c4:	add	x2, x2, x5
 1c8:	str	x2, [x4, #72]
 1cc:	str	x5, [x0]
 1d0:	mov	w0, #0x1                   	// #1
 1d4:	str	x2, [x1]
 1d8:	ret
 1dc:	cmp	x2, x3
 1e0:	csel	x2, x2, x3, le
 1e4:	b	1c4 <gomp_iter_dynamic_next_locked+0x3c>
 1e8:	mov	w0, #0x0                   	// #0
 1ec:	b	1d8 <gomp_iter_dynamic_next_locked+0x50>

00000000000001f0 <gomp_iter_dynamic_next>:
 1f0:	adrp	x2, 0 <gomp_tls_data>
 1f4:	ldr	x2, [x2]
 1f8:	mrs	x3, tpidr_el0
 1fc:	add	x2, x3, x2
 200:	ldr	x4, [x2, #24]
 204:	add	x5, x4, #0x48
 208:	ldp	x2, x3, [x4, #8]
 20c:	ldr	x8, [x4, #24]
 210:	ldr	w4, [x4, #4]
 214:	cbz	w4, 27c <gomp_iter_dynamic_next+0x8c>
 218:	ldxr	x4, [x5]
 21c:	add	x6, x4, x2
 220:	stlxr	w7, x6, [x5]
 224:	cbnz	w7, 218 <gomp_iter_dynamic_next+0x28>
 228:	dmb	ish
 22c:	cmp	x8, #0x0
 230:	b.le	260 <gomp_iter_dynamic_next+0x70>
 234:	cmp	x3, x4
 238:	b.gt	244 <gomp_iter_dynamic_next+0x54>
 23c:	mov	w0, #0x0                   	// #0
 240:	ret
 244:	add	x2, x2, x4
 248:	str	x4, [x0]
 24c:	cmp	x3, x2
 250:	csel	x2, x3, x2, le
 254:	str	x2, [x1]
 258:	mov	w0, #0x1                   	// #1
 25c:	b	240 <gomp_iter_dynamic_next+0x50>
 260:	cmp	x3, x4
 264:	b.ge	23c <gomp_iter_dynamic_next+0x4c>  // b.tcont
 268:	add	x2, x2, x4
 26c:	str	x4, [x0]
 270:	cmp	x3, x2
 274:	csel	x2, x3, x2, ge  // ge = tcont
 278:	b	254 <gomp_iter_dynamic_next+0x64>
 27c:	ldr	x4, [x5]
 280:	sub	x6, x3, x4
 284:	cmp	x4, x3
 288:	b.eq	23c <gomp_iter_dynamic_next+0x4c>  // b.none
 28c:	tbz	x8, #63, 2d0 <gomp_iter_dynamic_next+0xe0>
 290:	cmp	x2, x6
 294:	csel	x2, x2, x6, ge  // ge = tcont
 298:	add	x6, x4, x2
 29c:	ldxr	x7, [x5]
 2a0:	cmp	x7, x4
 2a4:	b.ne	2b0 <gomp_iter_dynamic_next+0xc0>  // b.any
 2a8:	stlxr	w9, x6, [x5]
 2ac:	cbnz	w9, 29c <gomp_iter_dynamic_next+0xac>
 2b0:	dmb	ish
 2b4:	cmp	x4, x7
 2b8:	b.ne	2c8 <gomp_iter_dynamic_next+0xd8>  // b.any
 2bc:	str	x4, [x0]
 2c0:	str	x6, [x1]
 2c4:	b	258 <gomp_iter_dynamic_next+0x68>
 2c8:	mov	x4, x7
 2cc:	b	280 <gomp_iter_dynamic_next+0x90>
 2d0:	cmp	x2, x6
 2d4:	csel	x2, x2, x6, le
 2d8:	b	298 <gomp_iter_dynamic_next+0xa8>

00000000000002dc <gomp_iter_guided_next_locked>:
 2dc:	adrp	x2, 0 <gomp_tls_data>
 2e0:	ldr	x2, [x2]
 2e4:	mrs	x3, tpidr_el0
 2e8:	add	x2, x3, x2
 2ec:	ldr	x4, [x2, #24]
 2f0:	ldr	x2, [x2, #16]
 2f4:	cbz	x2, 350 <gomp_iter_guided_next_locked+0x74>
 2f8:	ldr	w5, [x2]
 2fc:	ldr	x3, [x4, #16]
 300:	ldr	x6, [x4, #72]
 304:	cmp	x6, x3
 308:	b.eq	358 <gomp_iter_guided_next_locked+0x7c>  // b.none
 30c:	ldr	x8, [x4, #24]
 310:	sub	x7, x3, x6
 314:	sdiv	x7, x7, x8
 318:	sub	x2, x7, #0x1
 31c:	add	x2, x2, x5
 320:	udiv	x2, x2, x5
 324:	ldr	x5, [x4, #8]
 328:	cmp	x5, x2
 32c:	csel	x2, x5, x2, cs  // cs = hs, nlast
 330:	cmp	x2, x7
 334:	b.hi	33c <gomp_iter_guided_next_locked+0x60>  // b.pmore
 338:	madd	x3, x8, x2, x6
 33c:	str	x3, [x4, #72]
 340:	str	x6, [x0]
 344:	mov	w0, #0x1                   	// #1
 348:	str	x3, [x1]
 34c:	ret
 350:	mov	x5, #0x1                   	// #1
 354:	b	2fc <gomp_iter_guided_next_locked+0x20>
 358:	mov	w0, #0x0                   	// #0
 35c:	b	34c <gomp_iter_guided_next_locked+0x70>

0000000000000360 <gomp_iter_guided_next>:
 360:	adrp	x2, 0 <gomp_tls_data>
 364:	ldr	x2, [x2]
 368:	mrs	x3, tpidr_el0
 36c:	add	x2, x3, x2
 370:	ldr	x3, [x2, #24]
 374:	ldr	x2, [x2, #16]
 378:	cbz	x2, 3f0 <gomp_iter_guided_next+0x90>
 37c:	ldr	w8, [x2]
 380:	add	x6, x3, #0x48
 384:	ldr	x2, [x6]
 388:	ldp	x10, x7, [x3, #8]
 38c:	sub	x11, x8, #0x1
 390:	ldr	x9, [x3, #24]
 394:	cmp	x2, x7
 398:	b.eq	400 <gomp_iter_guided_next+0xa0>  // b.none
 39c:	sub	x5, x7, x2
 3a0:	sdiv	x5, x5, x9
 3a4:	add	x3, x11, x5
 3a8:	udiv	x3, x3, x8
 3ac:	cmp	x10, x3
 3b0:	csel	x3, x10, x3, cs  // cs = hs, nlast
 3b4:	cmp	x3, x5
 3b8:	madd	x4, x9, x3, x2
 3bc:	csel	x3, x4, x7, ls  // ls = plast
 3c0:	ldxr	x4, [x6]
 3c4:	cmp	x4, x2
 3c8:	b.ne	3d4 <gomp_iter_guided_next+0x74>  // b.any
 3cc:	stlxr	w5, x3, [x6]
 3d0:	cbnz	w5, 3c0 <gomp_iter_guided_next+0x60>
 3d4:	dmb	ish
 3d8:	cmp	x2, x4
 3dc:	b.ne	3f8 <gomp_iter_guided_next+0x98>  // b.any
 3e0:	str	x2, [x0]
 3e4:	mov	w0, #0x1                   	// #1
 3e8:	str	x3, [x1]
 3ec:	ret
 3f0:	mov	x8, #0x1                   	// #1
 3f4:	b	380 <gomp_iter_guided_next+0x20>
 3f8:	mov	x2, x4
 3fc:	b	394 <gomp_iter_guided_next+0x34>
 400:	mov	w0, #0x0                   	// #0
 404:	b	3ec <gomp_iter_guided_next+0x8c>

iter_ull.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_iter_ull_static_next>:
   0:	adrp	x6, 0 <gomp_tls_data>
   4:	ldr	x6, [x6]
   8:	mrs	x5, tpidr_el0
   c:	mov	x9, x0
  10:	add	x0, x5, x6
  14:	ldr	x0, [x0, #16]
  18:	cbz	x0, 64 <gomp_iter_ull_static_next+0x64>
  1c:	ldr	w2, [x0]
  20:	add	x3, x5, x6
  24:	ldr	x0, [x3, #72]
  28:	cmn	x0, #0x1
  2c:	b.eq	60 <gomp_iter_ull_static_next+0x60>  // b.none
  30:	cmp	x2, #0x1
  34:	ldr	x4, [x3, #24]
  38:	b.ne	6c <gomp_iter_ull_static_next+0x6c>  // b.any
  3c:	ldr	x0, [x4, #72]
  40:	str	x0, [x9]
  44:	ldr	x0, [x4, #16]
  48:	str	x0, [x1]
  4c:	mov	x1, #0xffffffffffffffff    	// #-1
  50:	str	x1, [x3, #72]
  54:	ldr	x1, [x4, #72]
  58:	cmp	x1, x0
  5c:	cset	w0, eq  // eq = none
  60:	ret
  64:	mov	x2, #0x1                   	// #1
  68:	b	20 <gomp_iter_ull_static_next+0x20>
  6c:	ldr	x7, [x4, #8]
  70:	cbnz	x7, 118 <gomp_iter_ull_static_next+0x118>
  74:	cbnz	x0, 194 <gomp_iter_ull_static_next+0x194>
  78:	ldp	x3, x8, [x4, #16]
  7c:	ldr	x0, [x4, #72]
  80:	add	x7, x8, x3
  84:	ldr	w3, [x4, #4]
  88:	cbnz	w3, d8 <gomp_iter_ull_static_next+0xd8>
  8c:	mvn	x3, x0
  90:	add	x3, x3, x7
  94:	udiv	x3, x3, x8
  98:	add	x4, x5, x6
  9c:	ldr	w7, [x4, #40]
  a0:	udiv	x4, x3, x2
  a4:	msub	x2, x4, x2, x3
  a8:	cmp	x7, x2
  ac:	b.cs	b8 <gomp_iter_ull_static_next+0xb8>  // b.hs, b.nlast
  b0:	add	x4, x4, #0x1
  b4:	mov	x2, #0x0                   	// #0
  b8:	madd	x2, x4, x7, x2
  bc:	add	x4, x4, x2
  c0:	cmp	x2, x4
  c4:	b.cc	ec <gomp_iter_ull_static_next+0xec>  // b.lo, b.ul, b.last
  c8:	add	x5, x5, x6
  cc:	mov	x0, #0x1                   	// #1
  d0:	str	x0, [x5, #72]
  d4:	b	60 <gomp_iter_ull_static_next+0x60>
  d8:	sub	x3, x0, #0x1
  dc:	neg	x4, x8
  e0:	sub	x3, x3, x7
  e4:	udiv	x3, x3, x4
  e8:	b	98 <gomp_iter_ull_static_next+0x98>
  ec:	madd	x2, x8, x2, x0
  f0:	cmp	x3, x4
  f4:	madd	x8, x8, x4, x0
  f8:	add	x5, x5, x6
  fc:	mov	x0, #0x1                   	// #1
 100:	cneg	x0, x0, eq  // eq = none
 104:	str	x2, [x9]
 108:	str	x8, [x1]
 10c:	str	x0, [x5, #72]
 110:	mov	w0, #0x0                   	// #0
 114:	b	60 <gomp_iter_ull_static_next+0x60>
 118:	ldp	x3, x8, [x4, #16]
 11c:	ldr	x10, [x4, #72]
 120:	add	x11, x8, x3
 124:	ldr	w3, [x4, #4]
 128:	cbnz	w3, 178 <gomp_iter_ull_static_next+0x178>
 12c:	mvn	x3, x10
 130:	add	x3, x3, x11
 134:	udiv	x3, x3, x8
 138:	add	x5, x5, x6
 13c:	ldr	w4, [x5, #40]
 140:	madd	x2, x0, x2, x4
 144:	mul	x2, x2, x7
 148:	cmp	x3, x2
 14c:	b.ls	194 <gomp_iter_ull_static_next+0x194>  // b.plast
 150:	add	x4, x7, x2
 154:	madd	x2, x2, x8, x10
 158:	cmp	x3, x4
 15c:	str	x2, [x9]
 160:	csel	x2, x3, x4, ls  // ls = plast
 164:	madd	x8, x2, x8, x10
 168:	str	x8, [x1]
 16c:	b.hi	18c <gomp_iter_ull_static_next+0x18c>  // b.pmore
 170:	mov	x0, #0xffffffffffffffff    	// #-1
 174:	b	10c <gomp_iter_ull_static_next+0x10c>
 178:	sub	x3, x10, #0x1
 17c:	neg	x4, x8
 180:	sub	x3, x3, x11
 184:	udiv	x3, x3, x4
 188:	b	138 <gomp_iter_ull_static_next+0x138>
 18c:	add	x0, x0, #0x1
 190:	b	10c <gomp_iter_ull_static_next+0x10c>
 194:	mov	w0, #0x1                   	// #1
 198:	b	60 <gomp_iter_ull_static_next+0x60>

000000000000019c <gomp_iter_ull_dynamic_next_locked>:
 19c:	adrp	x2, 0 <gomp_tls_data>
 1a0:	ldr	x2, [x2]
 1a4:	mrs	x3, tpidr_el0
 1a8:	add	x2, x3, x2
 1ac:	ldr	x4, [x2, #24]
 1b0:	ldr	x3, [x4, #16]
 1b4:	ldr	x5, [x4, #72]
 1b8:	cmp	x3, x5
 1bc:	b.eq	1fc <gomp_iter_ull_dynamic_next_locked+0x60>  // b.none
 1c0:	ldr	w6, [x4, #4]
 1c4:	sub	x3, x3, x5
 1c8:	ldr	x2, [x4, #8]
 1cc:	tbz	w6, #1, 1f0 <gomp_iter_ull_dynamic_next_locked+0x54>
 1d0:	cmp	x2, x3
 1d4:	csel	x2, x2, x3, cs  // cs = hs, nlast
 1d8:	add	x2, x2, x5
 1dc:	str	x2, [x4, #72]
 1e0:	str	x5, [x0]
 1e4:	mov	w0, #0x1                   	// #1
 1e8:	str	x2, [x1]
 1ec:	ret
 1f0:	cmp	x2, x3
 1f4:	csel	x2, x2, x3, ls  // ls = plast
 1f8:	b	1d8 <gomp_iter_ull_dynamic_next_locked+0x3c>
 1fc:	mov	w0, #0x0                   	// #0
 200:	b	1ec <gomp_iter_ull_dynamic_next_locked+0x50>

0000000000000204 <gomp_iter_ull_dynamic_next>:
 204:	adrp	x2, 0 <gomp_tls_data>
 208:	ldr	x2, [x2]
 20c:	mrs	x3, tpidr_el0
 210:	add	x2, x3, x2
 214:	ldr	x6, [x2, #24]
 218:	add	x5, x6, #0x48
 21c:	ldr	w4, [x6, #4]
 220:	ldp	x2, x3, [x6, #8]
 224:	tbz	w4, #0, 28c <gomp_iter_ull_dynamic_next+0x88>
 228:	ldxr	x4, [x5]
 22c:	add	x7, x4, x2
 230:	stlxr	w8, x7, [x5]
 234:	cbnz	w8, 228 <gomp_iter_ull_dynamic_next+0x24>
 238:	dmb	ish
 23c:	ldr	w5, [x6, #4]
 240:	tbnz	w5, #1, 270 <gomp_iter_ull_dynamic_next+0x6c>
 244:	cmp	x3, x4
 248:	b.hi	254 <gomp_iter_ull_dynamic_next+0x50>  // b.pmore
 24c:	mov	w0, #0x0                   	// #0
 250:	ret
 254:	add	x2, x2, x4
 258:	str	x4, [x0]
 25c:	cmp	x3, x2
 260:	csel	x2, x3, x2, ls  // ls = plast
 264:	str	x2, [x1]
 268:	mov	w0, #0x1                   	// #1
 26c:	b	250 <gomp_iter_ull_dynamic_next+0x4c>
 270:	cmp	x3, x4
 274:	b.cs	24c <gomp_iter_ull_dynamic_next+0x48>  // b.hs, b.nlast
 278:	add	x2, x2, x4
 27c:	str	x4, [x0]
 280:	cmp	x3, x2
 284:	csel	x2, x3, x2, cs  // cs = hs, nlast
 288:	b	264 <gomp_iter_ull_dynamic_next+0x60>
 28c:	ldr	x4, [x5]
 290:	sub	x7, x3, x4
 294:	cmp	x4, x3
 298:	b.eq	24c <gomp_iter_ull_dynamic_next+0x48>  // b.none
 29c:	ldr	w8, [x6, #4]
 2a0:	tbz	w8, #1, 2e4 <gomp_iter_ull_dynamic_next+0xe0>
 2a4:	cmp	x2, x7
 2a8:	csel	x2, x2, x7, cs  // cs = hs, nlast
 2ac:	add	x7, x4, x2
 2b0:	ldxr	x8, [x5]
 2b4:	cmp	x8, x4
 2b8:	b.ne	2c4 <gomp_iter_ull_dynamic_next+0xc0>  // b.any
 2bc:	stlxr	w9, x7, [x5]
 2c0:	cbnz	w9, 2b0 <gomp_iter_ull_dynamic_next+0xac>
 2c4:	dmb	ish
 2c8:	cmp	x4, x8
 2cc:	b.ne	2dc <gomp_iter_ull_dynamic_next+0xd8>  // b.any
 2d0:	str	x4, [x0]
 2d4:	str	x7, [x1]
 2d8:	b	268 <gomp_iter_ull_dynamic_next+0x64>
 2dc:	mov	x4, x8
 2e0:	b	290 <gomp_iter_ull_dynamic_next+0x8c>
 2e4:	cmp	x2, x7
 2e8:	csel	x2, x2, x7, ls  // ls = plast
 2ec:	b	2ac <gomp_iter_ull_dynamic_next+0xa8>

00000000000002f0 <gomp_iter_ull_guided_next_locked>:
 2f0:	adrp	x2, 0 <gomp_tls_data>
 2f4:	ldr	x2, [x2]
 2f8:	mrs	x3, tpidr_el0
 2fc:	add	x2, x3, x2
 300:	ldr	x4, [x2, #24]
 304:	ldr	x2, [x2, #16]
 308:	cbz	x2, 36c <gomp_iter_ull_guided_next_locked+0x7c>
 30c:	ldr	w7, [x2]
 310:	ldr	x3, [x4, #16]
 314:	ldr	x6, [x4, #72]
 318:	cmp	x6, x3
 31c:	b.eq	384 <gomp_iter_ull_guided_next_locked+0x94>  // b.none
 320:	ldr	w2, [x4, #4]
 324:	ldr	x8, [x4, #24]
 328:	cbnz	w2, 374 <gomp_iter_ull_guided_next_locked+0x84>
 32c:	sub	x2, x3, x6
 330:	udiv	x2, x2, x8
 334:	sub	x5, x7, #0x1
 338:	add	x5, x5, x2
 33c:	udiv	x5, x5, x7
 340:	ldr	x7, [x4, #8]
 344:	cmp	x7, x5
 348:	csel	x5, x7, x5, cs  // cs = hs, nlast
 34c:	cmp	x2, x5
 350:	b.cc	358 <gomp_iter_ull_guided_next_locked+0x68>  // b.lo, b.ul, b.last
 354:	madd	x3, x5, x8, x6
 358:	str	x3, [x4, #72]
 35c:	str	x6, [x0]
 360:	mov	w0, #0x1                   	// #1
 364:	str	x3, [x1]
 368:	ret
 36c:	mov	x7, #0x1                   	// #1
 370:	b	310 <gomp_iter_ull_guided_next_locked+0x20>
 374:	sub	x2, x6, x3
 378:	neg	x5, x8
 37c:	udiv	x2, x2, x5
 380:	b	334 <gomp_iter_ull_guided_next_locked+0x44>
 384:	mov	w0, #0x0                   	// #0
 388:	b	368 <gomp_iter_ull_guided_next_locked+0x78>

000000000000038c <gomp_iter_ull_guided_next>:
 38c:	adrp	x2, 0 <gomp_tls_data>
 390:	ldr	x2, [x2]
 394:	mrs	x3, tpidr_el0
 398:	add	x2, x3, x2
 39c:	ldr	x5, [x2, #24]
 3a0:	ldr	x2, [x2, #16]
 3a4:	cbz	x2, 428 <gomp_iter_ull_guided_next+0x9c>
 3a8:	ldr	w10, [x2]
 3ac:	add	x8, x5, #0x48
 3b0:	ldr	x2, [x8]
 3b4:	ldp	x11, x7, [x5, #8]
 3b8:	sub	x12, x10, #0x1
 3bc:	ldr	x9, [x5, #24]
 3c0:	neg	x13, x9
 3c4:	cmp	x2, x7
 3c8:	b.eq	444 <gomp_iter_ull_guided_next+0xb8>  // b.none
 3cc:	ldr	w3, [x5, #4]
 3d0:	cbnz	w3, 438 <gomp_iter_ull_guided_next+0xac>
 3d4:	sub	x4, x7, x2
 3d8:	udiv	x4, x4, x9
 3dc:	add	x3, x12, x4
 3e0:	udiv	x3, x3, x10
 3e4:	cmp	x11, x3
 3e8:	csel	x3, x11, x3, cs  // cs = hs, nlast
 3ec:	cmp	x4, x3
 3f0:	madd	x6, x3, x9, x2
 3f4:	csel	x3, x6, x7, cs  // cs = hs, nlast
 3f8:	ldxr	x4, [x8]
 3fc:	cmp	x4, x2
 400:	b.ne	40c <gomp_iter_ull_guided_next+0x80>  // b.any
 404:	stlxr	w6, x3, [x8]
 408:	cbnz	w6, 3f8 <gomp_iter_ull_guided_next+0x6c>
 40c:	dmb	ish
 410:	cmp	x2, x4
 414:	b.ne	430 <gomp_iter_ull_guided_next+0xa4>  // b.any
 418:	str	x2, [x0]
 41c:	mov	w0, #0x1                   	// #1
 420:	str	x3, [x1]
 424:	ret
 428:	mov	x10, #0x1                   	// #1
 42c:	b	3ac <gomp_iter_ull_guided_next+0x20>
 430:	mov	x2, x4
 434:	b	3c4 <gomp_iter_ull_guided_next+0x38>
 438:	sub	x4, x2, x7
 43c:	udiv	x4, x4, x13
 440:	b	3dc <gomp_iter_ull_guided_next+0x50>
 444:	mov	w0, #0x0                   	// #0
 448:	b	424 <gomp_iter_ull_guided_next+0x98>

loop.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_loop_init>:
       0:	str	w4, [x0]
       4:	cmp	x3, #0x0
       8:	str	x5, [x0, #8]
       c:	ccmp	x1, x2, #0x4, gt
      10:	b.gt	74 <gomp_loop_init+0x74>
      14:	cmp	x3, #0x0
      18:	ccmp	x1, x2, #0x0, lt  // lt = tstop
      1c:	csel	x2, x2, x1, ge  // ge = tcont
      20:	stp	x2, x3, [x0, #16]
      24:	cmp	w4, #0x2
      28:	str	x1, [x0, #72]
      2c:	b.ne	70 <gomp_loop_init+0x70>  // b.any
      30:	adrp	x1, 0 <gomp_tls_data>
      34:	ldr	x1, [x1]
      38:	mrs	x4, tpidr_el0
      3c:	mul	x5, x5, x3
      40:	add	x1, x4, x1
      44:	ldr	x1, [x1, #16]
      48:	str	x5, [x0, #8]
      4c:	cbz	x1, 7c <gomp_loop_init+0x7c>
      50:	ldr	w1, [x1]
      54:	cmp	x3, #0x0
      58:	mov	x3, #0x7fffffff            	// #2147483647
      5c:	b.le	a0 <gomp_loop_init+0xa0>
      60:	orr	x4, x5, x1
      64:	cmp	x4, x3
      68:	b.ls	84 <gomp_loop_init+0x84>  // b.plast
      6c:	str	wzr, [x0, #4]
      70:	ret
      74:	mov	x2, x1
      78:	b	20 <gomp_loop_init+0x20>
      7c:	mov	x1, #0x1                   	// #1
      80:	b	54 <gomp_loop_init+0x54>
      84:	madd	x5, x1, x5, x5
      88:	mov	x1, #0x7fffffffffffffff    	// #9223372036854775807
      8c:	sub	x5, x1, x5
      90:	cmp	x5, x2
      94:	cset	w1, gt
      98:	str	w1, [x0, #4]
      9c:	b	70 <gomp_loop_init+0x70>
      a0:	neg	x5, x5
      a4:	orr	x4, x5, x1
      a8:	cmp	x4, x3
      ac:	b.hi	6c <gomp_loop_init+0x6c>  // b.pmore
      b0:	madd	x5, x1, x5, x5
      b4:	mov	x1, #0x2                   	// #2
      b8:	movk	x1, #0x8000, lsl #48
      bc:	add	x5, x5, x1
      c0:	cmp	x5, x2
      c4:	cset	w1, le
      c8:	b	98 <gomp_loop_init+0x98>

00000000000000cc <gomp_work_share_init_done>:
      cc:	adrp	x1, 0 <gomp_tls_data>
      d0:	ldr	x1, [x1]
      d4:	mrs	x0, tpidr_el0
      d8:	add	x1, x0, x1
      dc:	ldr	x0, [x1, #32]
      e0:	cbz	x0, 104 <gomp_work_share_init_done+0x38>
      e4:	ldr	x2, [x1, #24]
      e8:	add	x0, x0, #0x50
      ec:	ldxr	x1, [x0]
      f0:	stlxr	w3, x2, [x0]
      f4:	cbnz	w3, ec <gomp_work_share_init_done+0x20>
      f8:	cmp	x1, #0x1
      fc:	b.eq	104 <gomp_work_share_init_done+0x38>  // b.none
     100:	b	0 <gomp_ptrlock_set_slow>
     104:	ret

0000000000000108 <gomp_mutex_lock>:
     108:	mov	x2, x0
     10c:	mov	w3, #0x1                   	// #1
     110:	ldaxr	w1, [x2]
     114:	cbnz	w1, 120 <gomp_mutex_lock+0x18>
     118:	stxr	w4, w3, [x2]
     11c:	cbnz	w4, 110 <gomp_mutex_lock+0x8>
     120:	cmp	w1, #0x0
     124:	b.eq	12c <gomp_mutex_lock+0x24>  // b.none
     128:	b	0 <gomp_mutex_lock_slow>
     12c:	ret

0000000000000130 <gomp_mutex_unlock>:
     130:	mov	x1, x0
     134:	ldxr	w2, [x1]
     138:	stlxr	w3, wzr, [x1]
     13c:	cbnz	w3, 134 <gomp_mutex_unlock+0x4>
     140:	tbz	w2, #31, 148 <gomp_mutex_unlock+0x18>
     144:	b	0 <gomp_mutex_unlock_slow>
     148:	ret

000000000000014c <gomp_parallel_loop_start>:
     14c:	stp	x29, x30, [sp, #-96]!
     150:	mov	x29, sp
     154:	stp	x19, x20, [sp, #16]
     158:	mov	x20, x1
     15c:	mov	w1, #0x0                   	// #0
     160:	mov	x19, x0
     164:	mov	w0, w2
     168:	stp	x21, x22, [sp, #32]
     16c:	mov	x22, x3
     170:	stp	x23, x24, [sp, #48]
     174:	mov	x23, x4
     178:	mov	x24, x5
     17c:	stp	x25, x26, [sp, #64]
     180:	mov	w25, w6
     184:	mov	x26, x7
     188:	str	x27, [sp, #80]
     18c:	ldr	w27, [sp, #96]
     190:	bl	0 <gomp_resolve_num_threads>
     194:	mov	w21, w0
     198:	bl	0 <gomp_new_team>
     19c:	mov	x8, x0
     1a0:	mov	x5, x26
     1a4:	mov	w4, w25
     1a8:	mov	x3, x24
     1ac:	mov	x2, x23
     1b0:	mov	x1, x22
     1b4:	add	x0, x0, #0x100
     1b8:	bl	0 <gomp_loop_init>
     1bc:	mov	w3, w27
     1c0:	mov	w2, w21
     1c4:	mov	x1, x20
     1c8:	mov	x0, x19
     1cc:	ldp	x19, x20, [sp, #16]
     1d0:	mov	x4, x8
     1d4:	ldp	x21, x22, [sp, #32]
     1d8:	mov	x5, #0x0                   	// #0
     1dc:	ldp	x23, x24, [sp, #48]
     1e0:	ldp	x25, x26, [sp, #64]
     1e4:	ldr	x27, [sp, #80]
     1e8:	ldp	x29, x30, [sp], #96
     1ec:	b	0 <gomp_team_start>

00000000000001f0 <gomp_adjust_sched>:
     1f0:	mov	x2, x0
     1f4:	and	x0, x0, #0x7fffffff
     1f8:	tst	x2, #0x7ffffffc
     1fc:	b.ne	24c <gomp_adjust_sched+0x5c>  // b.any
     200:	cbnz	x0, 274 <gomp_adjust_sched+0x84>
     204:	adrp	x0, 0 <gomp_tls_data>
     208:	ldr	x0, [x0]
     20c:	mrs	x2, tpidr_el0
     210:	add	x0, x2, x0
     214:	adrp	x2, 0 <gomp_global_icv>
     218:	add	x2, x2, #0x0
     21c:	ldr	x0, [x0, #80]
     220:	add	x3, x0, #0x90
     224:	cmp	x0, #0x0
     228:	csel	x2, x2, x3, eq  // eq = none
     22c:	ldr	w3, [x2, #8]
     230:	and	w0, w3, #0x7fffffff
     234:	tst	w3, #0x7ffffffc
     238:	b.ne	260 <gomp_adjust_sched+0x70>  // b.any
     23c:	cbz	w0, 254 <gomp_adjust_sched+0x64>
     240:	ldrsw	x2, [x2, #12]
     244:	str	x2, [x1]
     248:	ret
     24c:	cmp	x0, #0x4
     250:	b.eq	204 <gomp_adjust_sched+0x14>  // b.none
     254:	stp	x29, x30, [sp, #-16]!
     258:	mov	x29, sp
     25c:	bl	0 <abort>
     260:	cmp	w0, #0x4
     264:	b.ne	254 <gomp_adjust_sched+0x64>  // b.any
     268:	mov	x0, #0x1                   	// #1
     26c:	str	xzr, [x1]
     270:	ret
     274:	ret

0000000000000278 <GOMP_loop_static_start>:
     278:	stp	x29, x30, [sp, #-80]!
     27c:	mrs	x6, tpidr_el0
     280:	mov	x29, sp
     284:	stp	x19, x20, [sp, #16]
     288:	mov	x20, x4
     28c:	adrp	x19, 0 <gomp_tls_data>
     290:	ldr	x19, [x19]
     294:	stp	x21, x22, [sp, #32]
     298:	mov	x22, x0
     29c:	add	x19, x6, x19
     2a0:	stp	x23, x24, [sp, #48]
     2a4:	mov	x21, x5
     2a8:	mov	x23, x1
     2ac:	str	x25, [sp, #64]
     2b0:	mov	x24, x2
     2b4:	mov	x25, x3
     2b8:	mov	x0, #0x0                   	// #0
     2bc:	str	xzr, [x19, #72]
     2c0:	bl	0 <gomp_work_share_start>
     2c4:	tst	w0, #0xff
     2c8:	b.eq	2ec <GOMP_loop_static_start+0x74>  // b.none
     2cc:	ldr	x0, [x19, #24]
     2d0:	mov	x5, x25
     2d4:	mov	x3, x24
     2d8:	mov	x2, x23
     2dc:	mov	x1, x22
     2e0:	mov	w4, #0x1                   	// #1
     2e4:	bl	0 <gomp_loop_init>
     2e8:	bl	cc <gomp_work_share_init_done>
     2ec:	mov	x1, x21
     2f0:	mov	x0, x20
     2f4:	bl	0 <gomp_iter_static_next>
     2f8:	cmp	w0, #0x0
     2fc:	cset	w0, eq  // eq = none
     300:	ldp	x19, x20, [sp, #16]
     304:	ldp	x21, x22, [sp, #32]
     308:	ldp	x23, x24, [sp, #48]
     30c:	ldr	x25, [sp, #64]
     310:	ldp	x29, x30, [sp], #80
     314:	ret

0000000000000318 <GOMP_loop_dynamic_start>:
     318:	stp	x29, x30, [sp, #-64]!
     31c:	mov	x29, sp
     320:	stp	x19, x20, [sp, #16]
     324:	mov	x19, x4
     328:	mov	x20, x5
     32c:	stp	x21, x22, [sp, #32]
     330:	mov	x21, x0
     334:	mov	x22, x1
     338:	mov	x0, #0x0                   	// #0
     33c:	stp	x23, x24, [sp, #48]
     340:	mov	x23, x2
     344:	mov	x24, x3
     348:	bl	0 <gomp_work_share_start>
     34c:	tst	w0, #0xff
     350:	b.eq	384 <GOMP_loop_dynamic_start+0x6c>  // b.none
     354:	adrp	x0, 0 <gomp_tls_data>
     358:	ldr	x0, [x0]
     35c:	mrs	x6, tpidr_el0
     360:	mov	x5, x24
     364:	mov	x3, x23
     368:	add	x0, x6, x0
     36c:	mov	x2, x22
     370:	mov	x1, x21
     374:	mov	w4, #0x2                   	// #2
     378:	ldr	x0, [x0, #24]
     37c:	bl	0 <gomp_loop_init>
     380:	bl	cc <gomp_work_share_init_done>
     384:	mov	x1, x20
     388:	mov	x0, x19
     38c:	ldp	x19, x20, [sp, #16]
     390:	ldp	x21, x22, [sp, #32]
     394:	ldp	x23, x24, [sp, #48]
     398:	ldp	x29, x30, [sp], #64
     39c:	b	0 <gomp_iter_dynamic_next>

00000000000003a0 <GOMP_loop_guided_start>:
     3a0:	stp	x29, x30, [sp, #-64]!
     3a4:	mov	x29, sp
     3a8:	stp	x19, x20, [sp, #16]
     3ac:	mov	x19, x4
     3b0:	mov	x20, x5
     3b4:	stp	x21, x22, [sp, #32]
     3b8:	mov	x21, x0
     3bc:	mov	x22, x1
     3c0:	mov	x0, #0x0                   	// #0
     3c4:	stp	x23, x24, [sp, #48]
     3c8:	mov	x23, x2
     3cc:	mov	x24, x3
     3d0:	bl	0 <gomp_work_share_start>
     3d4:	tst	w0, #0xff
     3d8:	b.eq	40c <GOMP_loop_guided_start+0x6c>  // b.none
     3dc:	adrp	x0, 0 <gomp_tls_data>
     3e0:	ldr	x0, [x0]
     3e4:	mrs	x6, tpidr_el0
     3e8:	mov	x5, x24
     3ec:	mov	x3, x23
     3f0:	add	x0, x6, x0
     3f4:	mov	x2, x22
     3f8:	mov	x1, x21
     3fc:	mov	w4, #0x3                   	// #3
     400:	ldr	x0, [x0, #24]
     404:	bl	0 <gomp_loop_init>
     408:	bl	cc <gomp_work_share_init_done>
     40c:	mov	x1, x20
     410:	mov	x0, x19
     414:	ldp	x19, x20, [sp, #16]
     418:	ldp	x21, x22, [sp, #32]
     41c:	ldp	x23, x24, [sp, #48]
     420:	ldp	x29, x30, [sp], #64
     424:	b	0 <gomp_iter_guided_next>

0000000000000428 <GOMP_loop_maybe_nonmonotonic_runtime_start>:
     428:	mov	x5, x4
     42c:	adrp	x4, 0 <gomp_tls_data>
     430:	ldr	x4, [x4]
     434:	mrs	x6, tpidr_el0
     438:	add	x4, x6, x4
     43c:	adrp	x6, 0 <gomp_global_icv>
     440:	add	x6, x6, #0x0
     444:	ldr	x4, [x4, #80]
     448:	cmp	x4, #0x0
     44c:	add	x7, x4, #0x90
     450:	csel	x6, x6, x7, eq  // eq = none
     454:	ldr	w4, [x6, #8]
     458:	and	w4, w4, #0x7fffffff
     45c:	sub	w4, w4, #0x1
     460:	cmp	w4, #0x3
     464:	b.hi	4b0 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x88>  // b.pmore
     468:	adrp	x7, 0 <gomp_loop_init>
     46c:	add	x7, x7, #0x0
     470:	ldrb	w4, [x7, w4, uxtw]
     474:	adr	x7, 480 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x58>
     478:	add	x4, x7, w4, sxtb #2
     47c:	br	x4
     480:	mov	x4, x3
     484:	ldrsw	x3, [x6, #12]
     488:	b	278 <GOMP_loop_static_start>
     48c:	mov	x4, x3
     490:	ldrsw	x3, [x6, #12]
     494:	b	318 <GOMP_loop_dynamic_start>
     498:	mov	x4, x3
     49c:	ldrsw	x3, [x6, #12]
     4a0:	b	3a0 <GOMP_loop_guided_start>
     4a4:	mov	x4, x3
     4a8:	mov	x3, #0x0                   	// #0
     4ac:	b	488 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x60>
     4b0:	stp	x29, x30, [sp, #-16]!
     4b4:	mov	x29, sp
     4b8:	bl	0 <abort>

00000000000004bc <GOMP_loop_ordered_static_start>:
     4bc:	stp	x29, x30, [sp, #-80]!
     4c0:	mrs	x6, tpidr_el0
     4c4:	mov	x29, sp
     4c8:	stp	x19, x20, [sp, #16]
     4cc:	mov	x20, x4
     4d0:	adrp	x19, 0 <gomp_tls_data>
     4d4:	ldr	x19, [x19]
     4d8:	stp	x21, x22, [sp, #32]
     4dc:	mov	x22, x0
     4e0:	add	x19, x6, x19
     4e4:	stp	x23, x24, [sp, #48]
     4e8:	mov	x21, x5
     4ec:	mov	x23, x1
     4f0:	str	x25, [sp, #64]
     4f4:	mov	x24, x2
     4f8:	mov	x25, x3
     4fc:	mov	x0, #0x1                   	// #1
     500:	str	xzr, [x19, #72]
     504:	bl	0 <gomp_work_share_start>
     508:	tst	w0, #0xff
     50c:	b.eq	534 <GOMP_loop_ordered_static_start+0x78>  // b.none
     510:	ldr	x0, [x19, #24]
     514:	mov	x5, x25
     518:	mov	x3, x24
     51c:	mov	x2, x23
     520:	mov	x1, x22
     524:	mov	w4, #0x1                   	// #1
     528:	bl	0 <gomp_loop_init>
     52c:	bl	0 <gomp_ordered_static_init>
     530:	bl	cc <gomp_work_share_init_done>
     534:	mov	x1, x21
     538:	mov	x0, x20
     53c:	bl	0 <gomp_iter_static_next>
     540:	cmp	w0, #0x0
     544:	cset	w0, eq  // eq = none
     548:	ldp	x19, x20, [sp, #16]
     54c:	ldp	x21, x22, [sp, #32]
     550:	ldp	x23, x24, [sp, #48]
     554:	ldr	x25, [sp, #64]
     558:	ldp	x29, x30, [sp], #80
     55c:	ret

0000000000000560 <GOMP_loop_ordered_dynamic_start>:
     560:	stp	x29, x30, [sp, #-80]!
     564:	mov	x29, sp
     568:	stp	x19, x20, [sp, #16]
     56c:	mov	x20, x4
     570:	mrs	x19, tpidr_el0
     574:	stp	x21, x22, [sp, #32]
     578:	mov	x22, x5
     57c:	adrp	x21, 0 <gomp_tls_data>
     580:	ldr	x21, [x21]
     584:	stp	x23, x24, [sp, #48]
     588:	mov	x23, x0
     58c:	mov	x24, x1
     590:	mov	x0, #0x1                   	// #1
     594:	stp	x25, x26, [sp, #64]
     598:	mov	x25, x2
     59c:	mov	x26, x3
     5a0:	bl	0 <gomp_work_share_start>
     5a4:	tst	w0, #0xff
     5a8:	b.eq	624 <GOMP_loop_ordered_dynamic_start+0xc4>  // b.none
     5ac:	add	x6, x19, x21
     5b0:	mov	x5, x26
     5b4:	mov	x3, x25
     5b8:	mov	x2, x24
     5bc:	mov	x1, x23
     5c0:	mov	w4, #0x2                   	// #2
     5c4:	ldr	x0, [x6, #24]
     5c8:	bl	0 <gomp_loop_init>
     5cc:	ldr	x0, [x6, #24]
     5d0:	add	x0, x0, #0x40
     5d4:	bl	108 <gomp_mutex_lock>
     5d8:	bl	cc <gomp_work_share_init_done>
     5dc:	mov	x0, x20
     5e0:	mov	x1, x22
     5e4:	bl	0 <gomp_iter_dynamic_next_locked>
     5e8:	mov	w20, w0
     5ec:	tst	w0, #0xff
     5f0:	b.eq	5f8 <GOMP_loop_ordered_dynamic_start+0x98>  // b.none
     5f4:	bl	0 <gomp_ordered_first>
     5f8:	add	x19, x19, x21
     5fc:	ldr	x0, [x19, #24]
     600:	add	x0, x0, #0x40
     604:	bl	130 <gomp_mutex_unlock>
     608:	mov	w0, w20
     60c:	ldp	x19, x20, [sp, #16]
     610:	ldp	x21, x22, [sp, #32]
     614:	ldp	x23, x24, [sp, #48]
     618:	ldp	x25, x26, [sp, #64]
     61c:	ldp	x29, x30, [sp], #80
     620:	ret
     624:	add	x0, x19, x21
     628:	ldr	x0, [x0, #24]
     62c:	add	x0, x0, #0x40
     630:	bl	108 <gomp_mutex_lock>
     634:	b	5dc <GOMP_loop_ordered_dynamic_start+0x7c>

0000000000000638 <GOMP_loop_ordered_guided_start>:
     638:	stp	x29, x30, [sp, #-80]!
     63c:	mov	x29, sp
     640:	stp	x19, x20, [sp, #16]
     644:	mov	x20, x4
     648:	mrs	x19, tpidr_el0
     64c:	stp	x21, x22, [sp, #32]
     650:	mov	x22, x5
     654:	adrp	x21, 0 <gomp_tls_data>
     658:	ldr	x21, [x21]
     65c:	stp	x23, x24, [sp, #48]
     660:	mov	x23, x0
     664:	mov	x24, x1
     668:	mov	x0, #0x1                   	// #1
     66c:	stp	x25, x26, [sp, #64]
     670:	mov	x25, x2
     674:	mov	x26, x3
     678:	bl	0 <gomp_work_share_start>
     67c:	tst	w0, #0xff
     680:	b.eq	6fc <GOMP_loop_ordered_guided_start+0xc4>  // b.none
     684:	add	x6, x19, x21
     688:	mov	x5, x26
     68c:	mov	x3, x25
     690:	mov	x2, x24
     694:	mov	x1, x23
     698:	mov	w4, #0x3                   	// #3
     69c:	ldr	x0, [x6, #24]
     6a0:	bl	0 <gomp_loop_init>
     6a4:	ldr	x0, [x6, #24]
     6a8:	add	x0, x0, #0x40
     6ac:	bl	108 <gomp_mutex_lock>
     6b0:	bl	cc <gomp_work_share_init_done>
     6b4:	mov	x0, x20
     6b8:	mov	x1, x22
     6bc:	bl	0 <gomp_iter_guided_next_locked>
     6c0:	mov	w20, w0
     6c4:	tst	w0, #0xff
     6c8:	b.eq	6d0 <GOMP_loop_ordered_guided_start+0x98>  // b.none
     6cc:	bl	0 <gomp_ordered_first>
     6d0:	add	x19, x19, x21
     6d4:	ldr	x0, [x19, #24]
     6d8:	add	x0, x0, #0x40
     6dc:	bl	130 <gomp_mutex_unlock>
     6e0:	mov	w0, w20
     6e4:	ldp	x19, x20, [sp, #16]
     6e8:	ldp	x21, x22, [sp, #32]
     6ec:	ldp	x23, x24, [sp, #48]
     6f0:	ldp	x25, x26, [sp, #64]
     6f4:	ldp	x29, x30, [sp], #80
     6f8:	ret
     6fc:	add	x0, x19, x21
     700:	ldr	x0, [x0, #24]
     704:	add	x0, x0, #0x40
     708:	bl	108 <gomp_mutex_lock>
     70c:	b	6b4 <GOMP_loop_ordered_guided_start+0x7c>

0000000000000710 <GOMP_loop_ordered_runtime_start>:
     710:	mov	x5, x4
     714:	adrp	x4, 0 <gomp_tls_data>
     718:	ldr	x4, [x4]
     71c:	mrs	x6, tpidr_el0
     720:	add	x4, x6, x4
     724:	adrp	x6, 0 <gomp_global_icv>
     728:	add	x6, x6, #0x0
     72c:	ldr	x4, [x4, #80]
     730:	cmp	x4, #0x0
     734:	add	x7, x4, #0x90
     738:	csel	x6, x6, x7, eq  // eq = none
     73c:	ldr	w4, [x6, #8]
     740:	and	w4, w4, #0x7fffffff
     744:	sub	w4, w4, #0x1
     748:	cmp	w4, #0x3
     74c:	b.hi	798 <GOMP_loop_ordered_runtime_start+0x88>  // b.pmore
     750:	adrp	x7, 0 <gomp_loop_init>
     754:	add	x7, x7, #0x0
     758:	ldrb	w4, [x7, w4, uxtw]
     75c:	adr	x7, 768 <GOMP_loop_ordered_runtime_start+0x58>
     760:	add	x4, x7, w4, sxtb #2
     764:	br	x4
     768:	mov	x4, x3
     76c:	ldrsw	x3, [x6, #12]
     770:	b	4bc <GOMP_loop_ordered_static_start>
     774:	mov	x4, x3
     778:	ldrsw	x3, [x6, #12]
     77c:	b	560 <GOMP_loop_ordered_dynamic_start>
     780:	mov	x4, x3
     784:	ldrsw	x3, [x6, #12]
     788:	b	638 <GOMP_loop_ordered_guided_start>
     78c:	mov	x4, x3
     790:	mov	x3, #0x0                   	// #0
     794:	b	770 <GOMP_loop_ordered_runtime_start+0x60>
     798:	stp	x29, x30, [sp, #-16]!
     79c:	mov	x29, sp
     7a0:	bl	0 <abort>

00000000000007a4 <GOMP_loop_ordered_start>:
     7a4:	stp	x29, x30, [sp, #-112]!
     7a8:	mov	x29, sp
     7ac:	stp	x19, x20, [sp, #16]
     7b0:	mov	x19, x3
     7b4:	adrp	x20, 0 <gomp_tls_data>
     7b8:	ldr	x20, [x20]
     7bc:	stp	x21, x22, [sp, #32]
     7c0:	mrs	x22, tpidr_el0
     7c4:	mov	x21, x7
     7c8:	stp	x0, x4, [sp, #96]
     7cc:	add	x0, x22, x20
     7d0:	stp	x23, x24, [sp, #48]
     7d4:	mov	x23, x5
     7d8:	mov	x24, x6
     7dc:	stp	x25, x26, [sp, #64]
     7e0:	stp	x27, x28, [sp, #80]
     7e4:	mov	x27, x1
     7e8:	mov	x28, x2
     7ec:	str	xzr, [x0, #72]
     7f0:	ldr	x25, [sp, #112]
     7f4:	cbz	x7, 7fc <GOMP_loop_ordered_start+0x58>
     7f8:	bl	0 <gomp_workshare_taskgroup_start>
     7fc:	cbz	x25, 8d0 <GOMP_loop_ordered_start+0x12c>
     800:	ldr	x0, [x25]
     804:	add	x0, x0, #0x1
     808:	bl	0 <gomp_work_share_start>
     80c:	tst	w0, #0xff
     810:	b.eq	8ec <GOMP_loop_ordered_start+0x148>  // b.none
     814:	add	x1, sp, #0x68
     818:	mov	x0, x19
     81c:	add	x26, x22, x20
     820:	bl	1f0 <gomp_adjust_sched>
     824:	ldp	x1, x5, [sp, #96]
     828:	mov	x19, x0
     82c:	mov	w4, w0
     830:	mov	x3, x28
     834:	ldr	x0, [x26, #24]
     838:	mov	x2, x27
     83c:	bl	0 <gomp_loop_init>
     840:	cbz	x21, 864 <GOMP_loop_ordered_start+0xc0>
     844:	mov	x0, x21
     848:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     84c:	ldr	x0, [x26, #80]
     850:	mov	w1, #0x1                   	// #1
     854:	ldr	x0, [x0, #40]
     858:	strb	w1, [x0, #50]
     85c:	ldr	x0, [x26, #24]
     860:	str	x21, [x0, #88]
     864:	cmp	x19, #0x1
     868:	b.ne	8d8 <GOMP_loop_ordered_start+0x134>  // b.any
     86c:	bl	0 <gomp_ordered_static_init>
     870:	bl	cc <gomp_work_share_init_done>
     874:	cbz	x25, 8a4 <GOMP_loop_ordered_start+0x100>
     878:	add	x1, x22, x20
     87c:	ldr	x0, [x1, #24]
     880:	ldr	x1, [x1, #16]
     884:	ldr	x0, [x0, #32]
     888:	cbz	x1, 924 <GOMP_loop_ordered_start+0x180>
     88c:	ldr	w1, [x1]
     890:	lsl	x1, x1, #2
     894:	add	x0, x0, x1
     898:	add	x0, x0, #0x7
     89c:	and	x0, x0, #0xfffffffffffffff8
     8a0:	str	x0, [x25]
     8a4:	sub	x19, x19, #0x1
     8a8:	cmp	x19, #0x3
     8ac:	b.hi	968 <GOMP_loop_ordered_start+0x1c4>  // b.pmore
     8b0:	cmp	w19, #0x3
     8b4:	b.hi	968 <GOMP_loop_ordered_start+0x1c4>  // b.pmore
     8b8:	adrp	x1, 0 <gomp_loop_init>
     8bc:	add	x1, x1, #0x0
     8c0:	ldrb	w0, [x1, w19, uxtw]
     8c4:	adr	x1, 8d0 <GOMP_loop_ordered_start+0x12c>
     8c8:	add	x0, x1, w0, sxtb #2
     8cc:	br	x0
     8d0:	mov	x0, #0x1                   	// #1
     8d4:	b	808 <GOMP_loop_ordered_start+0x64>
     8d8:	add	x0, x22, x20
     8dc:	ldr	x0, [x0, #24]
     8e0:	add	x0, x0, #0x40
     8e4:	bl	108 <gomp_mutex_lock>
     8e8:	b	870 <GOMP_loop_ordered_start+0xcc>
     8ec:	cbz	x21, 904 <GOMP_loop_ordered_start+0x160>
     8f0:	add	x0, x22, x20
     8f4:	ldr	x0, [x0, #24]
     8f8:	ldr	x1, [x0, #88]
     8fc:	mov	x0, x21
     900:	bl	0 <gomp_workshare_task_reduction_register>
     904:	add	x0, x22, x20
     908:	ldr	x0, [x0, #24]
     90c:	ldr	w19, [x0]
     910:	cmp	x19, #0x1
     914:	b.eq	96c <GOMP_loop_ordered_start+0x1c8>  // b.none
     918:	add	x0, x0, #0x40
     91c:	bl	108 <gomp_mutex_lock>
     920:	b	874 <GOMP_loop_ordered_start+0xd0>
     924:	mov	x1, #0x4                   	// #4
     928:	b	894 <GOMP_loop_ordered_start+0xf0>
     92c:	mov	x1, x24
     930:	mov	x0, x23
     934:	bl	0 <gomp_iter_dynamic_next_locked>
     938:	and	w19, w0, #0xff
     93c:	cbz	w19, 944 <GOMP_loop_ordered_start+0x1a0>
     940:	bl	0 <gomp_ordered_first>
     944:	add	x20, x22, x20
     948:	ldr	x0, [x20, #24]
     94c:	add	x0, x0, #0x40
     950:	bl	130 <gomp_mutex_unlock>
     954:	b	984 <GOMP_loop_ordered_start+0x1e0>
     958:	mov	x1, x24
     95c:	mov	x0, x23
     960:	bl	0 <gomp_iter_guided_next_locked>
     964:	b	938 <GOMP_loop_ordered_start+0x194>
     968:	bl	0 <abort>
     96c:	cbnz	x25, 878 <GOMP_loop_ordered_start+0xd4>
     970:	mov	x1, x24
     974:	mov	x0, x23
     978:	bl	0 <gomp_iter_static_next>
     97c:	cmp	w0, #0x0
     980:	cset	w19, eq  // eq = none
     984:	mov	w0, w19
     988:	ldp	x19, x20, [sp, #16]
     98c:	ldp	x21, x22, [sp, #32]
     990:	ldp	x23, x24, [sp, #48]
     994:	ldp	x25, x26, [sp, #64]
     998:	ldp	x27, x28, [sp, #80]
     99c:	ldp	x29, x30, [sp], #112
     9a0:	ret

00000000000009a4 <GOMP_loop_doacross_static_start>:
     9a4:	stp	x29, x30, [sp, #-64]!
     9a8:	mov	x29, sp
     9ac:	stp	x21, x22, [sp, #32]
     9b0:	mov	x22, x3
     9b4:	adrp	x21, 0 <gomp_tls_data>
     9b8:	ldr	x21, [x21]
     9bc:	stp	x19, x20, [sp, #16]
     9c0:	mov	x19, x1
     9c4:	mrs	x1, tpidr_el0
     9c8:	add	x21, x1, x21
     9cc:	stp	x23, x24, [sp, #48]
     9d0:	mov	x20, x2
     9d4:	mov	w24, w0
     9d8:	mov	x23, x4
     9dc:	mov	x0, #0x0                   	// #0
     9e0:	str	xzr, [x21, #72]
     9e4:	bl	0 <gomp_work_share_start>
     9e8:	tst	w0, #0xff
     9ec:	b.eq	a24 <GOMP_loop_doacross_static_start+0x80>  // b.none
     9f0:	ldr	x2, [x19]
     9f4:	mov	x5, x20
     9f8:	ldr	x0, [x21, #24]
     9fc:	mov	w4, #0x1                   	// #1
     a00:	mov	x3, #0x1                   	// #1
     a04:	mov	x1, #0x0                   	// #0
     a08:	bl	0 <gomp_loop_init>
     a0c:	mov	x2, x20
     a10:	mov	x1, x19
     a14:	mov	w0, w24
     a18:	mov	x3, #0x0                   	// #0
     a1c:	bl	0 <gomp_doacross_init>
     a20:	bl	cc <gomp_work_share_init_done>
     a24:	mov	x1, x23
     a28:	mov	x0, x22
     a2c:	bl	0 <gomp_iter_static_next>
     a30:	cmp	w0, #0x0
     a34:	cset	w0, eq  // eq = none
     a38:	ldp	x19, x20, [sp, #16]
     a3c:	ldp	x21, x22, [sp, #32]
     a40:	ldp	x23, x24, [sp, #48]
     a44:	ldp	x29, x30, [sp], #64
     a48:	ret

0000000000000a4c <GOMP_loop_doacross_dynamic_start>:
     a4c:	stp	x29, x30, [sp, #-64]!
     a50:	mov	x29, sp
     a54:	stp	x19, x20, [sp, #16]
     a58:	mov	x19, x1
     a5c:	mov	x20, x2
     a60:	stp	x21, x22, [sp, #32]
     a64:	mov	x21, x3
     a68:	mov	x22, x4
     a6c:	str	x23, [sp, #48]
     a70:	mov	w23, w0
     a74:	mov	x0, #0x0                   	// #0
     a78:	bl	0 <gomp_work_share_start>
     a7c:	tst	w0, #0xff
     a80:	b.eq	ac8 <GOMP_loop_doacross_dynamic_start+0x7c>  // b.none
     a84:	adrp	x0, 0 <gomp_tls_data>
     a88:	ldr	x0, [x0]
     a8c:	mrs	x6, tpidr_el0
     a90:	ldr	x2, [x19]
     a94:	add	x0, x6, x0
     a98:	mov	x5, x20
     a9c:	mov	w4, #0x2                   	// #2
     aa0:	mov	x3, #0x1                   	// #1
     aa4:	mov	x1, #0x0                   	// #0
     aa8:	ldr	x0, [x0, #24]
     aac:	bl	0 <gomp_loop_init>
     ab0:	mov	x2, x20
     ab4:	mov	x1, x19
     ab8:	mov	w0, w23
     abc:	mov	x3, #0x0                   	// #0
     ac0:	bl	0 <gomp_doacross_init>
     ac4:	bl	cc <gomp_work_share_init_done>
     ac8:	mov	x1, x22
     acc:	mov	x0, x21
     ad0:	ldp	x19, x20, [sp, #16]
     ad4:	ldp	x21, x22, [sp, #32]
     ad8:	ldr	x23, [sp, #48]
     adc:	ldp	x29, x30, [sp], #64
     ae0:	b	0 <gomp_iter_dynamic_next>

0000000000000ae4 <GOMP_loop_doacross_guided_start>:
     ae4:	stp	x29, x30, [sp, #-64]!
     ae8:	mov	x29, sp
     aec:	stp	x19, x20, [sp, #16]
     af0:	mov	x19, x1
     af4:	mov	x20, x2
     af8:	stp	x21, x22, [sp, #32]
     afc:	mov	x21, x3
     b00:	mov	x22, x4
     b04:	str	x23, [sp, #48]
     b08:	mov	w23, w0
     b0c:	mov	x0, #0x0                   	// #0
     b10:	bl	0 <gomp_work_share_start>
     b14:	tst	w0, #0xff
     b18:	b.eq	b60 <GOMP_loop_doacross_guided_start+0x7c>  // b.none
     b1c:	adrp	x0, 0 <gomp_tls_data>
     b20:	ldr	x0, [x0]
     b24:	mrs	x6, tpidr_el0
     b28:	ldr	x2, [x19]
     b2c:	add	x0, x6, x0
     b30:	mov	x5, x20
     b34:	mov	w4, #0x3                   	// #3
     b38:	mov	x3, #0x1                   	// #1
     b3c:	mov	x1, #0x0                   	// #0
     b40:	ldr	x0, [x0, #24]
     b44:	bl	0 <gomp_loop_init>
     b48:	mov	x2, x20
     b4c:	mov	x1, x19
     b50:	mov	w0, w23
     b54:	mov	x3, #0x0                   	// #0
     b58:	bl	0 <gomp_doacross_init>
     b5c:	bl	cc <gomp_work_share_init_done>
     b60:	mov	x1, x22
     b64:	mov	x0, x21
     b68:	ldp	x19, x20, [sp, #16]
     b6c:	ldp	x21, x22, [sp, #32]
     b70:	ldr	x23, [sp, #48]
     b74:	ldp	x29, x30, [sp], #64
     b78:	b	0 <gomp_iter_guided_next>

0000000000000b7c <GOMP_loop_doacross_runtime_start>:
     b7c:	mov	x4, x3
     b80:	adrp	x3, 0 <gomp_tls_data>
     b84:	ldr	x3, [x3]
     b88:	mrs	x5, tpidr_el0
     b8c:	add	x3, x5, x3
     b90:	adrp	x5, 0 <gomp_global_icv>
     b94:	add	x5, x5, #0x0
     b98:	ldr	x3, [x3, #80]
     b9c:	cmp	x3, #0x0
     ba0:	add	x6, x3, #0x90
     ba4:	csel	x5, x5, x6, eq  // eq = none
     ba8:	ldr	w3, [x5, #8]
     bac:	and	w3, w3, #0x7fffffff
     bb0:	sub	w3, w3, #0x1
     bb4:	cmp	w3, #0x3
     bb8:	b.hi	c04 <GOMP_loop_doacross_runtime_start+0x88>  // b.pmore
     bbc:	adrp	x6, 0 <gomp_loop_init>
     bc0:	add	x6, x6, #0x0
     bc4:	ldrb	w3, [x6, w3, uxtw]
     bc8:	adr	x6, bd4 <GOMP_loop_doacross_runtime_start+0x58>
     bcc:	add	x3, x6, w3, sxtb #2
     bd0:	br	x3
     bd4:	mov	x3, x2
     bd8:	ldrsw	x2, [x5, #12]
     bdc:	b	9a4 <GOMP_loop_doacross_static_start>
     be0:	mov	x3, x2
     be4:	ldrsw	x2, [x5, #12]
     be8:	b	a4c <GOMP_loop_doacross_dynamic_start>
     bec:	mov	x3, x2
     bf0:	ldrsw	x2, [x5, #12]
     bf4:	b	ae4 <GOMP_loop_doacross_guided_start>
     bf8:	mov	x3, x2
     bfc:	mov	x2, #0x0                   	// #0
     c00:	b	bdc <GOMP_loop_doacross_runtime_start+0x60>
     c04:	stp	x29, x30, [sp, #-16]!
     c08:	mov	x29, sp
     c0c:	bl	0 <abort>

0000000000000c10 <GOMP_loop_static_next>:
     c10:	stp	x29, x30, [sp, #-16]!
     c14:	mov	x29, sp
     c18:	bl	0 <gomp_iter_static_next>
     c1c:	cmp	w0, #0x0
     c20:	cset	w0, eq  // eq = none
     c24:	ldp	x29, x30, [sp], #16
     c28:	ret

0000000000000c2c <GOMP_loop_dynamic_next>:
     c2c:	b	0 <gomp_iter_dynamic_next>

0000000000000c30 <GOMP_loop_guided_next>:
     c30:	b	0 <gomp_iter_guided_next>

0000000000000c34 <GOMP_loop_maybe_nonmonotonic_runtime_next>:
     c34:	adrp	x2, 0 <gomp_tls_data>
     c38:	ldr	x2, [x2]
     c3c:	mrs	x3, tpidr_el0
     c40:	add	x2, x3, x2
     c44:	ldr	x2, [x2, #24]
     c48:	ldr	w2, [x2]
     c4c:	sub	w2, w2, #0x1
     c50:	cmp	w2, #0x3
     c54:	b.hi	c7c <GOMP_loop_maybe_nonmonotonic_runtime_next+0x48>  // b.pmore
     c58:	adrp	x3, 0 <gomp_loop_init>
     c5c:	add	x3, x3, #0x0
     c60:	ldrb	w2, [x3, w2, uxtw]
     c64:	adr	x3, c70 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x3c>
     c68:	add	x2, x3, w2, sxtb #2
     c6c:	br	x2
     c70:	b	c10 <GOMP_loop_static_next>
     c74:	b	0 <gomp_iter_dynamic_next>
     c78:	b	0 <gomp_iter_guided_next>
     c7c:	stp	x29, x30, [sp, #-16]!
     c80:	mov	x29, sp
     c84:	bl	0 <abort>

0000000000000c88 <GOMP_loop_start>:
     c88:	stp	x29, x30, [sp, #-112]!
     c8c:	mov	x29, sp
     c90:	stp	x27, x28, [sp, #80]
     c94:	mov	x27, x3
     c98:	adrp	x28, 0 <gomp_tls_data>
     c9c:	ldr	x28, [x28]
     ca0:	stp	x19, x20, [sp, #16]
     ca4:	mrs	x20, tpidr_el0
     ca8:	mov	x19, x7
     cac:	stp	x23, x24, [sp, #48]
     cb0:	mov	x24, x0
     cb4:	add	x0, x20, x28
     cb8:	stp	x21, x22, [sp, #32]
     cbc:	mov	x23, x6
     cc0:	mov	x22, x5
     cc4:	stp	x25, x26, [sp, #64]
     cc8:	mov	x25, x1
     ccc:	mov	x26, x2
     cd0:	str	xzr, [x0, #72]
     cd4:	str	x4, [sp, #104]
     cd8:	ldr	x21, [sp, #112]
     cdc:	cbz	x7, ce4 <GOMP_loop_start+0x5c>
     ce0:	bl	0 <gomp_workshare_taskgroup_start>
     ce4:	mov	x0, #0x0                   	// #0
     ce8:	bl	0 <gomp_work_share_start>
     cec:	tst	w0, #0xff
     cf0:	b.eq	db0 <GOMP_loop_start+0x128>  // b.none
     cf4:	mov	x0, x27
     cf8:	add	x27, x20, x28
     cfc:	add	x1, sp, #0x68
     d00:	bl	1f0 <gomp_adjust_sched>
     d04:	mov	w4, w0
     d08:	mov	x3, x26
     d0c:	ldr	x0, [x27, #24]
     d10:	mov	x2, x25
     d14:	ldr	x5, [sp, #104]
     d18:	mov	x1, x24
     d1c:	bl	0 <gomp_loop_init>
     d20:	cbz	x19, d44 <GOMP_loop_start+0xbc>
     d24:	mov	x0, x19
     d28:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     d2c:	ldr	x0, [x27, #80]
     d30:	mov	w1, #0x1                   	// #1
     d34:	ldr	x0, [x0, #40]
     d38:	strb	w1, [x0, #50]
     d3c:	ldr	x0, [x27, #24]
     d40:	str	x19, [x0, #88]
     d44:	cbz	x21, d68 <GOMP_loop_start+0xe0>
     d48:	add	x20, x20, x28
     d4c:	ldr	x0, [x21]
     d50:	ldr	x19, [x20, #24]
     d54:	cmp	x0, #0x20
     d58:	b.ls	d9c <GOMP_loop_start+0x114>  // b.plast
     d5c:	bl	0 <gomp_malloc_cleared>
     d60:	str	x0, [x19, #32]
     d64:	str	x0, [x21]
     d68:	bl	cc <gomp_work_share_init_done>
     d6c:	cbz	x22, de0 <GOMP_loop_start+0x158>
     d70:	mov	x1, x23
     d74:	mov	x0, x22
     d78:	bl	c34 <GOMP_loop_maybe_nonmonotonic_runtime_next>
     d7c:	and	w0, w0, #0xff
     d80:	ldp	x19, x20, [sp, #16]
     d84:	ldp	x21, x22, [sp, #32]
     d88:	ldp	x23, x24, [sp, #48]
     d8c:	ldp	x25, x26, [sp, #64]
     d90:	ldp	x27, x28, [sp, #80]
     d94:	ldp	x29, x30, [sp], #112
     d98:	ret
     d9c:	mov	x2, x0
     da0:	mov	w1, #0x0                   	// #0
     da4:	add	x0, x19, #0x60
     da8:	bl	0 <memset>
     dac:	b	d64 <GOMP_loop_start+0xdc>
     db0:	cbz	x19, dc8 <GOMP_loop_start+0x140>
     db4:	add	x0, x20, x28
     db8:	ldr	x0, [x0, #24]
     dbc:	ldr	x1, [x0, #88]
     dc0:	mov	x0, x19
     dc4:	bl	0 <gomp_workshare_task_reduction_register>
     dc8:	cbz	x21, d6c <GOMP_loop_start+0xe4>
     dcc:	add	x20, x20, x28
     dd0:	ldr	x0, [x20, #24]
     dd4:	ldr	x0, [x0, #32]
     dd8:	str	x0, [x21]
     ddc:	b	d6c <GOMP_loop_start+0xe4>
     de0:	mov	w0, #0x1                   	// #1
     de4:	b	d80 <GOMP_loop_start+0xf8>

0000000000000de8 <GOMP_loop_doacross_start>:
     de8:	stp	x29, x30, [sp, #-112]!
     dec:	mov	x29, sp
     df0:	stp	x21, x22, [sp, #32]
     df4:	mrs	x21, tpidr_el0
     df8:	adrp	x22, 0 <gomp_tls_data>
     dfc:	ldr	x22, [x22]
     e00:	stp	x27, x28, [sp, #80]
     e04:	mov	w27, w0
     e08:	add	x0, x21, x22
     e0c:	stp	x19, x20, [sp, #16]
     e10:	mov	x19, x6
     e14:	mov	x20, x7
     e18:	stp	x23, x24, [sp, #48]
     e1c:	mov	x23, x1
     e20:	mov	x24, x4
     e24:	stp	x25, x26, [sp, #64]
     e28:	mov	x26, x2
     e2c:	mov	x25, x5
     e30:	str	xzr, [x0, #72]
     e34:	str	x3, [sp, #104]
     e38:	cbz	x6, e40 <GOMP_loop_doacross_start+0x58>
     e3c:	bl	0 <gomp_workshare_taskgroup_start>
     e40:	mov	x0, #0x0                   	// #0
     e44:	bl	0 <gomp_work_share_start>
     e48:	tst	w0, #0xff
     e4c:	b.eq	f08 <GOMP_loop_doacross_start+0x120>  // b.none
     e50:	cbz	x20, f00 <GOMP_loop_doacross_start+0x118>
     e54:	ldr	x28, [x20]
     e58:	mov	x0, x26
     e5c:	add	x26, x21, x22
     e60:	add	x1, sp, #0x68
     e64:	bl	1f0 <gomp_adjust_sched>
     e68:	mov	w4, w0
     e6c:	ldr	x2, [x23]
     e70:	mov	x3, #0x1                   	// #1
     e74:	ldr	x0, [x26, #24]
     e78:	mov	x1, #0x0                   	// #0
     e7c:	ldr	x5, [sp, #104]
     e80:	bl	0 <gomp_loop_init>
     e84:	ldr	x2, [sp, #104]
     e88:	mov	x3, x28
     e8c:	mov	x1, x23
     e90:	mov	w0, w27
     e94:	bl	0 <gomp_doacross_init>
     e98:	cbz	x19, ebc <GOMP_loop_doacross_start+0xd4>
     e9c:	mov	x0, x19
     ea0:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     ea4:	ldr	x0, [x26, #80]
     ea8:	mov	w1, #0x1                   	// #1
     eac:	ldr	x0, [x0, #40]
     eb0:	strb	w1, [x0, #50]
     eb4:	ldr	x0, [x26, #24]
     eb8:	str	x19, [x0, #88]
     ebc:	bl	cc <gomp_work_share_init_done>
     ec0:	cbz	x20, ed8 <GOMP_loop_doacross_start+0xf0>
     ec4:	add	x21, x21, x22
     ec8:	ldr	x0, [x21, #24]
     ecc:	ldr	x0, [x0, #32]
     ed0:	ldr	x0, [x0, #48]
     ed4:	str	x0, [x20]
     ed8:	mov	x1, x25
     edc:	mov	x0, x24
     ee0:	bl	c34 <GOMP_loop_maybe_nonmonotonic_runtime_next>
     ee4:	ldp	x19, x20, [sp, #16]
     ee8:	ldp	x21, x22, [sp, #32]
     eec:	ldp	x23, x24, [sp, #48]
     ef0:	ldp	x25, x26, [sp, #64]
     ef4:	ldp	x27, x28, [sp, #80]
     ef8:	ldp	x29, x30, [sp], #112
     efc:	ret
     f00:	mov	x28, #0x0                   	// #0
     f04:	b	e58 <GOMP_loop_doacross_start+0x70>
     f08:	cbz	x19, ec0 <GOMP_loop_doacross_start+0xd8>
     f0c:	add	x0, x21, x22
     f10:	ldr	x0, [x0, #24]
     f14:	ldr	x1, [x0, #88]
     f18:	mov	x0, x19
     f1c:	bl	0 <gomp_workshare_task_reduction_register>
     f20:	b	ec0 <GOMP_loop_doacross_start+0xd8>

0000000000000f24 <GOMP_loop_ordered_static_next>:
     f24:	stp	x29, x30, [sp, #-48]!
     f28:	mov	x29, sp
     f2c:	stp	x21, x22, [sp, #32]
     f30:	mov	x21, x1
     f34:	adrp	x22, 0 <gomp_tls_data>
     f38:	ldr	x22, [x22]
     f3c:	stp	x19, x20, [sp, #16]
     f40:	mov	x19, x0
     f44:	mrs	x20, tpidr_el0
     f48:	bl	0 <gomp_ordered_sync>
     f4c:	add	x0, x20, x22
     f50:	ldr	x0, [x0, #24]
     f54:	add	x0, x0, #0x40
     f58:	bl	108 <gomp_mutex_lock>
     f5c:	mov	x0, x19
     f60:	mov	x1, x21
     f64:	bl	0 <gomp_iter_static_next>
     f68:	mov	w19, w0
     f6c:	tbnz	w0, #31, f74 <GOMP_loop_ordered_static_next+0x50>
     f70:	bl	0 <gomp_ordered_static_next>
     f74:	add	x20, x20, x22
     f78:	ldr	x0, [x20, #24]
     f7c:	add	x0, x0, #0x40
     f80:	bl	130 <gomp_mutex_unlock>
     f84:	cmp	w19, #0x0
     f88:	cset	w0, eq  // eq = none
     f8c:	ldp	x19, x20, [sp, #16]
     f90:	ldp	x21, x22, [sp, #32]
     f94:	ldp	x29, x30, [sp], #48
     f98:	ret

0000000000000f9c <GOMP_loop_ordered_dynamic_next>:
     f9c:	stp	x29, x30, [sp, #-48]!
     fa0:	mov	x29, sp
     fa4:	stp	x21, x22, [sp, #32]
     fa8:	mov	x21, x1
     fac:	adrp	x22, 0 <gomp_tls_data>
     fb0:	ldr	x22, [x22]
     fb4:	stp	x19, x20, [sp, #16]
     fb8:	mov	x19, x0
     fbc:	mrs	x20, tpidr_el0
     fc0:	bl	0 <gomp_ordered_sync>
     fc4:	add	x0, x20, x22
     fc8:	ldr	x0, [x0, #24]
     fcc:	add	x0, x0, #0x40
     fd0:	bl	108 <gomp_mutex_lock>
     fd4:	mov	x0, x19
     fd8:	mov	x1, x21
     fdc:	bl	0 <gomp_iter_dynamic_next_locked>
     fe0:	mov	w19, w0
     fe4:	tst	w0, #0xff
     fe8:	b.eq	1014 <GOMP_loop_ordered_dynamic_next+0x78>  // b.none
     fec:	bl	0 <gomp_ordered_next>
     ff0:	add	x20, x20, x22
     ff4:	ldr	x0, [x20, #24]
     ff8:	add	x0, x0, #0x40
     ffc:	bl	130 <gomp_mutex_unlock>
    1000:	mov	w0, w19
    1004:	ldp	x19, x20, [sp, #16]
    1008:	ldp	x21, x22, [sp, #32]
    100c:	ldp	x29, x30, [sp], #48
    1010:	ret
    1014:	bl	0 <gomp_ordered_last>
    1018:	b	ff0 <GOMP_loop_ordered_dynamic_next+0x54>

000000000000101c <GOMP_loop_ordered_guided_next>:
    101c:	stp	x29, x30, [sp, #-48]!
    1020:	mov	x29, sp
    1024:	stp	x21, x22, [sp, #32]
    1028:	mov	x21, x1
    102c:	adrp	x22, 0 <gomp_tls_data>
    1030:	ldr	x22, [x22]
    1034:	stp	x19, x20, [sp, #16]
    1038:	mov	x19, x0
    103c:	mrs	x20, tpidr_el0
    1040:	bl	0 <gomp_ordered_sync>
    1044:	add	x0, x20, x22
    1048:	ldr	x0, [x0, #24]
    104c:	add	x0, x0, #0x40
    1050:	bl	108 <gomp_mutex_lock>
    1054:	mov	x0, x19
    1058:	mov	x1, x21
    105c:	bl	0 <gomp_iter_guided_next_locked>
    1060:	mov	w19, w0
    1064:	tst	w0, #0xff
    1068:	b.eq	1094 <GOMP_loop_ordered_guided_next+0x78>  // b.none
    106c:	bl	0 <gomp_ordered_next>
    1070:	add	x20, x20, x22
    1074:	ldr	x0, [x20, #24]
    1078:	add	x0, x0, #0x40
    107c:	bl	130 <gomp_mutex_unlock>
    1080:	mov	w0, w19
    1084:	ldp	x19, x20, [sp, #16]
    1088:	ldp	x21, x22, [sp, #32]
    108c:	ldp	x29, x30, [sp], #48
    1090:	ret
    1094:	bl	0 <gomp_ordered_last>
    1098:	b	1070 <GOMP_loop_ordered_guided_next+0x54>

000000000000109c <GOMP_loop_ordered_runtime_next>:
    109c:	adrp	x2, 0 <gomp_tls_data>
    10a0:	ldr	x2, [x2]
    10a4:	mrs	x3, tpidr_el0
    10a8:	add	x2, x3, x2
    10ac:	ldr	x2, [x2, #24]
    10b0:	ldr	w2, [x2]
    10b4:	sub	w2, w2, #0x1
    10b8:	cmp	w2, #0x3
    10bc:	b.hi	10e4 <GOMP_loop_ordered_runtime_next+0x48>  // b.pmore
    10c0:	adrp	x3, 0 <gomp_loop_init>
    10c4:	add	x3, x3, #0x0
    10c8:	ldrb	w2, [x3, w2, uxtw]
    10cc:	adr	x3, 10d8 <GOMP_loop_ordered_runtime_next+0x3c>
    10d0:	add	x2, x3, w2, sxtb #2
    10d4:	br	x2
    10d8:	b	f24 <GOMP_loop_ordered_static_next>
    10dc:	b	f9c <GOMP_loop_ordered_dynamic_next>
    10e0:	b	101c <GOMP_loop_ordered_guided_next>
    10e4:	stp	x29, x30, [sp, #-16]!
    10e8:	mov	x29, sp
    10ec:	bl	0 <abort>

00000000000010f0 <GOMP_parallel_loop_static_start>:
    10f0:	sub	sp, sp, #0x20
    10f4:	mov	x7, x6
    10f8:	mov	w6, #0x1                   	// #1
    10fc:	stp	x29, x30, [sp, #16]
    1100:	add	x29, sp, #0x10
    1104:	str	wzr, [sp]
    1108:	bl	14c <gomp_parallel_loop_start>
    110c:	ldp	x29, x30, [sp, #16]
    1110:	add	sp, sp, #0x20
    1114:	ret

0000000000001118 <GOMP_parallel_loop_dynamic_start>:
    1118:	sub	sp, sp, #0x20
    111c:	mov	x7, x6
    1120:	mov	w6, #0x2                   	// #2
    1124:	stp	x29, x30, [sp, #16]
    1128:	add	x29, sp, #0x10
    112c:	str	wzr, [sp]
    1130:	bl	14c <gomp_parallel_loop_start>
    1134:	ldp	x29, x30, [sp, #16]
    1138:	add	sp, sp, #0x20
    113c:	ret

0000000000001140 <GOMP_parallel_loop_guided_start>:
    1140:	sub	sp, sp, #0x20
    1144:	mov	x7, x6
    1148:	mov	w6, #0x3                   	// #3
    114c:	stp	x29, x30, [sp, #16]
    1150:	add	x29, sp, #0x10
    1154:	str	wzr, [sp]
    1158:	bl	14c <gomp_parallel_loop_start>
    115c:	ldp	x29, x30, [sp, #16]
    1160:	add	sp, sp, #0x20
    1164:	ret

0000000000001168 <GOMP_parallel_loop_runtime_start>:
    1168:	sub	sp, sp, #0x20
    116c:	adrp	x6, 0 <gomp_tls_data>
    1170:	ldr	x6, [x6]
    1174:	mrs	x7, tpidr_el0
    1178:	add	x6, x7, x6
    117c:	stp	x29, x30, [sp, #16]
    1180:	add	x29, sp, #0x10
    1184:	ldr	x7, [x6, #80]
    1188:	adrp	x6, 0 <gomp_global_icv>
    118c:	add	x6, x6, #0x0
    1190:	add	x8, x7, #0x90
    1194:	cmp	x7, #0x0
    1198:	csel	x6, x6, x8, eq  // eq = none
    119c:	ldrsw	x7, [x6, #12]
    11a0:	ldr	w6, [x6, #8]
    11a4:	str	wzr, [sp]
    11a8:	and	w6, w6, #0x7fffffff
    11ac:	bl	14c <gomp_parallel_loop_start>
    11b0:	ldp	x29, x30, [sp, #16]
    11b4:	add	sp, sp, #0x20
    11b8:	ret

00000000000011bc <GOMP_parallel_loop_static>:
    11bc:	sub	sp, sp, #0x30
    11c0:	stp	x29, x30, [sp, #16]
    11c4:	add	x29, sp, #0x10
    11c8:	str	w7, [sp]
    11cc:	mov	x7, x6
    11d0:	mov	w6, #0x1                   	// #1
    11d4:	stp	x19, x20, [sp, #32]
    11d8:	mov	x20, x1
    11dc:	mov	x19, x0
    11e0:	bl	14c <gomp_parallel_loop_start>
    11e4:	mov	x0, x20
    11e8:	blr	x19
    11ec:	ldp	x29, x30, [sp, #16]
    11f0:	ldp	x19, x20, [sp, #32]
    11f4:	add	sp, sp, #0x30
    11f8:	b	0 <gomp_ialias_GOMP_parallel_end>

00000000000011fc <GOMP_parallel_loop_dynamic>:
    11fc:	sub	sp, sp, #0x30
    1200:	stp	x29, x30, [sp, #16]
    1204:	add	x29, sp, #0x10
    1208:	str	w7, [sp]
    120c:	mov	x7, x6
    1210:	mov	w6, #0x2                   	// #2
    1214:	stp	x19, x20, [sp, #32]
    1218:	mov	x20, x1
    121c:	mov	x19, x0
    1220:	bl	14c <gomp_parallel_loop_start>
    1224:	mov	x0, x20
    1228:	blr	x19
    122c:	ldp	x29, x30, [sp, #16]
    1230:	ldp	x19, x20, [sp, #32]
    1234:	add	sp, sp, #0x30
    1238:	b	0 <gomp_ialias_GOMP_parallel_end>

000000000000123c <GOMP_parallel_loop_guided>:
    123c:	sub	sp, sp, #0x30
    1240:	stp	x29, x30, [sp, #16]
    1244:	add	x29, sp, #0x10
    1248:	str	w7, [sp]
    124c:	mov	x7, x6
    1250:	mov	w6, #0x3                   	// #3
    1254:	stp	x19, x20, [sp, #32]
    1258:	mov	x20, x1
    125c:	mov	x19, x0
    1260:	bl	14c <gomp_parallel_loop_start>
    1264:	mov	x0, x20
    1268:	blr	x19
    126c:	ldp	x29, x30, [sp, #16]
    1270:	ldp	x19, x20, [sp, #32]
    1274:	add	sp, sp, #0x30
    1278:	b	0 <gomp_ialias_GOMP_parallel_end>

000000000000127c <GOMP_parallel_loop_maybe_nonmonotonic_runtime>:
    127c:	sub	sp, sp, #0x30
    1280:	adrp	x7, 0 <gomp_tls_data>
    1284:	ldr	x7, [x7]
    1288:	mrs	x8, tpidr_el0
    128c:	add	x7, x8, x7
    1290:	adrp	x8, 0 <gomp_global_icv>
    1294:	stp	x29, x30, [sp, #16]
    1298:	add	x29, sp, #0x10
    129c:	add	x8, x8, #0x0
    12a0:	ldr	x7, [x7, #80]
    12a4:	stp	x19, x20, [sp, #32]
    12a8:	mov	x20, x1
    12ac:	add	x9, x7, #0x90
    12b0:	cmp	x7, #0x0
    12b4:	csel	x8, x8, x9, eq  // eq = none
    12b8:	mov	x19, x0
    12bc:	ldrsw	x7, [x8, #12]
    12c0:	ldr	w8, [x8, #8]
    12c4:	str	w6, [sp]
    12c8:	and	w6, w8, #0x7fffffff
    12cc:	bl	14c <gomp_parallel_loop_start>
    12d0:	mov	x0, x20
    12d4:	blr	x19
    12d8:	ldp	x29, x30, [sp, #16]
    12dc:	ldp	x19, x20, [sp, #32]
    12e0:	add	sp, sp, #0x30
    12e4:	b	0 <gomp_ialias_GOMP_parallel_end>

00000000000012e8 <GOMP_loop_end>:
    12e8:	b	0 <gomp_work_share_end>

00000000000012ec <GOMP_loop_end_cancel>:
    12ec:	b	0 <gomp_work_share_end_cancel>

00000000000012f0 <GOMP_loop_end_nowait>:
    12f0:	b	0 <gomp_work_share_end_nowait>

loop_ull.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_loop_ull_init>:
       0:	str	w5, [x0]
       4:	ands	w1, w1, #0xff
       8:	str	x6, [x0, #8]
       c:	ccmp	x2, x3, #0x0, ne  // ne = any
      10:	b.hi	8c <gomp_loop_ull_init+0x8c>  // b.pmore
      14:	cmp	x2, x3
      18:	eor	w7, w1, #0x1
      1c:	cset	w8, cc  // cc = lo, ul, last
      20:	tst	w8, w7
      24:	csel	x3, x3, x2, eq  // eq = none
      28:	str	wzr, [x0, #4]
      2c:	cmp	w5, #0x2
      30:	stp	x3, x4, [x0, #16]
      34:	str	x2, [x0, #72]
      38:	b.ne	cc <gomp_loop_ull_init+0xcc>  // b.any
      3c:	adrp	x2, 0 <gomp_tls_data>
      40:	ldr	x2, [x2]
      44:	mrs	x5, tpidr_el0
      48:	mul	x4, x6, x4
      4c:	add	x2, x5, x2
      50:	ldr	x2, [x2, #16]
      54:	str	x4, [x0, #8]
      58:	cbz	x2, 94 <gomp_loop_ull_init+0x94>
      5c:	ldr	w6, [x2]
      60:	mov	x2, #0x7fffffff            	// #2147483647
      64:	cbz	w1, 9c <gomp_loop_ull_init+0x9c>
      68:	orr	x1, x4, x6
      6c:	cmp	x1, x2
      70:	b.hi	d0 <gomp_loop_ull_init+0xd0>  // b.pmore
      74:	madd	x4, x6, x4, x4
      78:	mvn	x4, x4
      7c:	cmp	x4, x3
      80:	cset	w1, hi  // hi = pmore
      84:	str	w1, [x0, #4]
      88:	b	d0 <gomp_loop_ull_init+0xd0>
      8c:	mov	x3, x2
      90:	b	28 <gomp_loop_ull_init+0x28>
      94:	mov	x6, #0x1                   	// #1
      98:	b	60 <gomp_loop_ull_init+0x60>
      9c:	neg	x4, x4
      a0:	orr	x1, x4, x6
      a4:	cmp	x1, x2
      a8:	b.hi	c0 <gomp_loop_ull_init+0xc0>  // b.pmore
      ac:	madd	x4, x6, x4, x4
      b0:	add	x4, x4, #0x1
      b4:	cmp	x4, x3
      b8:	cset	w1, cc  // cc = lo, ul, last
      bc:	str	w1, [x0, #4]
      c0:	ldr	w1, [x0, #4]
      c4:	orr	w1, w1, #0x2
      c8:	b	84 <gomp_loop_ull_init+0x84>
      cc:	cbz	w1, c0 <gomp_loop_ull_init+0xc0>
      d0:	ret

00000000000000d4 <gomp_work_share_init_done>:
      d4:	adrp	x1, 0 <gomp_tls_data>
      d8:	ldr	x1, [x1]
      dc:	mrs	x0, tpidr_el0
      e0:	add	x1, x0, x1
      e4:	ldr	x0, [x1, #32]
      e8:	cbz	x0, 10c <gomp_work_share_init_done+0x38>
      ec:	ldr	x2, [x1, #24]
      f0:	add	x0, x0, #0x50
      f4:	ldxr	x1, [x0]
      f8:	stlxr	w3, x2, [x0]
      fc:	cbnz	w3, f4 <gomp_work_share_init_done+0x20>
     100:	cmp	x1, #0x1
     104:	b.eq	10c <gomp_work_share_init_done+0x38>  // b.none
     108:	b	0 <gomp_ptrlock_set_slow>
     10c:	ret

0000000000000110 <gomp_mutex_lock>:
     110:	mov	x2, x0
     114:	mov	w3, #0x1                   	// #1
     118:	ldaxr	w1, [x2]
     11c:	cbnz	w1, 128 <gomp_mutex_lock+0x18>
     120:	stxr	w4, w3, [x2]
     124:	cbnz	w4, 118 <gomp_mutex_lock+0x8>
     128:	cmp	w1, #0x0
     12c:	b.eq	134 <gomp_mutex_lock+0x24>  // b.none
     130:	b	0 <gomp_mutex_lock_slow>
     134:	ret

0000000000000138 <gomp_mutex_unlock>:
     138:	mov	x1, x0
     13c:	ldxr	w2, [x1]
     140:	stlxr	w3, wzr, [x1]
     144:	cbnz	w3, 13c <gomp_mutex_unlock+0x4>
     148:	tbz	w2, #31, 150 <gomp_mutex_unlock+0x18>
     14c:	b	0 <gomp_mutex_unlock_slow>
     150:	ret

0000000000000154 <gomp_adjust_sched>:
     154:	mov	x2, x0
     158:	and	x0, x0, #0x7fffffff
     15c:	tst	x2, #0x7ffffffc
     160:	b.ne	1b0 <gomp_adjust_sched+0x5c>  // b.any
     164:	cbnz	x0, 1d8 <gomp_adjust_sched+0x84>
     168:	adrp	x0, 0 <gomp_tls_data>
     16c:	ldr	x0, [x0]
     170:	mrs	x2, tpidr_el0
     174:	add	x0, x2, x0
     178:	adrp	x2, 0 <gomp_global_icv>
     17c:	add	x2, x2, #0x0
     180:	ldr	x0, [x0, #80]
     184:	add	x3, x0, #0x90
     188:	cmp	x0, #0x0
     18c:	csel	x2, x2, x3, eq  // eq = none
     190:	ldr	w3, [x2, #8]
     194:	and	w0, w3, #0x7fffffff
     198:	tst	w3, #0x7ffffffc
     19c:	b.ne	1c4 <gomp_adjust_sched+0x70>  // b.any
     1a0:	cbz	w0, 1b8 <gomp_adjust_sched+0x64>
     1a4:	ldrsw	x2, [x2, #12]
     1a8:	str	x2, [x1]
     1ac:	ret
     1b0:	cmp	x0, #0x4
     1b4:	b.eq	168 <gomp_adjust_sched+0x14>  // b.none
     1b8:	stp	x29, x30, [sp, #-16]!
     1bc:	mov	x29, sp
     1c0:	bl	0 <abort>
     1c4:	cmp	w0, #0x4
     1c8:	b.ne	1b8 <gomp_adjust_sched+0x64>  // b.any
     1cc:	mov	x0, #0x1                   	// #1
     1d0:	str	xzr, [x1]
     1d4:	ret
     1d8:	ret

00000000000001dc <GOMP_loop_ull_static_start>:
     1dc:	stp	x29, x30, [sp, #-80]!
     1e0:	mov	x29, sp
     1e4:	stp	x19, x20, [sp, #16]
     1e8:	mov	x20, x5
     1ec:	adrp	x19, 0 <gomp_tls_data>
     1f0:	ldr	x19, [x19]
     1f4:	stp	x25, x26, [sp, #64]
     1f8:	and	w26, w0, #0xff
     1fc:	mrs	x0, tpidr_el0
     200:	add	x19, x0, x19
     204:	stp	x21, x22, [sp, #32]
     208:	mov	x25, x4
     20c:	stp	x23, x24, [sp, #48]
     210:	mov	x22, x1
     214:	mov	x23, x2
     218:	mov	x24, x3
     21c:	mov	x21, x6
     220:	mov	x0, #0x0                   	// #0
     224:	str	xzr, [x19, #72]
     228:	bl	0 <gomp_work_share_start>
     22c:	tst	w0, #0xff
     230:	b.eq	258 <GOMP_loop_ull_static_start+0x7c>  // b.none
     234:	ldr	x0, [x19, #24]
     238:	mov	x6, x25
     23c:	mov	x4, x24
     240:	mov	x3, x23
     244:	mov	x2, x22
     248:	mov	w1, w26
     24c:	mov	w5, #0x1                   	// #1
     250:	bl	0 <gomp_loop_ull_init>
     254:	bl	d4 <gomp_work_share_init_done>
     258:	mov	x1, x21
     25c:	mov	x0, x20
     260:	bl	0 <gomp_iter_ull_static_next>
     264:	cmp	w0, #0x0
     268:	cset	w0, eq  // eq = none
     26c:	ldp	x19, x20, [sp, #16]
     270:	ldp	x21, x22, [sp, #32]
     274:	ldp	x23, x24, [sp, #48]
     278:	ldp	x25, x26, [sp, #64]
     27c:	ldp	x29, x30, [sp], #80
     280:	ret

0000000000000284 <GOMP_loop_ull_dynamic_start>:
     284:	stp	x29, x30, [sp, #-80]!
     288:	mov	x29, sp
     28c:	stp	x19, x20, [sp, #16]
     290:	mov	x19, x5
     294:	mov	x20, x6
     298:	stp	x21, x22, [sp, #32]
     29c:	mov	x21, x1
     2a0:	mov	x22, x2
     2a4:	stp	x23, x24, [sp, #48]
     2a8:	mov	x23, x3
     2ac:	mov	x24, x4
     2b0:	str	x25, [sp, #64]
     2b4:	and	w25, w0, #0xff
     2b8:	mov	x0, #0x0                   	// #0
     2bc:	bl	0 <gomp_work_share_start>
     2c0:	tst	w0, #0xff
     2c4:	b.eq	2fc <GOMP_loop_ull_dynamic_start+0x78>  // b.none
     2c8:	adrp	x0, 0 <gomp_tls_data>
     2cc:	ldr	x0, [x0]
     2d0:	mrs	x7, tpidr_el0
     2d4:	mov	x6, x24
     2d8:	mov	x4, x23
     2dc:	add	x0, x7, x0
     2e0:	mov	x3, x22
     2e4:	mov	x2, x21
     2e8:	mov	w1, w25
     2ec:	mov	w5, #0x2                   	// #2
     2f0:	ldr	x0, [x0, #24]
     2f4:	bl	0 <gomp_loop_ull_init>
     2f8:	bl	d4 <gomp_work_share_init_done>
     2fc:	mov	x1, x20
     300:	mov	x0, x19
     304:	ldp	x19, x20, [sp, #16]
     308:	ldp	x21, x22, [sp, #32]
     30c:	ldp	x23, x24, [sp, #48]
     310:	ldr	x25, [sp, #64]
     314:	ldp	x29, x30, [sp], #80
     318:	b	0 <gomp_iter_ull_dynamic_next>

000000000000031c <GOMP_loop_ull_guided_start>:
     31c:	stp	x29, x30, [sp, #-80]!
     320:	mov	x29, sp
     324:	stp	x19, x20, [sp, #16]
     328:	mov	x19, x5
     32c:	mov	x20, x6
     330:	stp	x21, x22, [sp, #32]
     334:	mov	x21, x1
     338:	mov	x22, x2
     33c:	stp	x23, x24, [sp, #48]
     340:	mov	x23, x3
     344:	mov	x24, x4
     348:	str	x25, [sp, #64]
     34c:	and	w25, w0, #0xff
     350:	mov	x0, #0x0                   	// #0
     354:	bl	0 <gomp_work_share_start>
     358:	tst	w0, #0xff
     35c:	b.eq	394 <GOMP_loop_ull_guided_start+0x78>  // b.none
     360:	adrp	x0, 0 <gomp_tls_data>
     364:	ldr	x0, [x0]
     368:	mrs	x7, tpidr_el0
     36c:	mov	x6, x24
     370:	mov	x4, x23
     374:	add	x0, x7, x0
     378:	mov	x3, x22
     37c:	mov	x2, x21
     380:	mov	w1, w25
     384:	mov	w5, #0x3                   	// #3
     388:	ldr	x0, [x0, #24]
     38c:	bl	0 <gomp_loop_ull_init>
     390:	bl	d4 <gomp_work_share_init_done>
     394:	mov	x1, x20
     398:	mov	x0, x19
     39c:	ldp	x19, x20, [sp, #16]
     3a0:	ldp	x21, x22, [sp, #32]
     3a4:	ldp	x23, x24, [sp, #48]
     3a8:	ldr	x25, [sp, #64]
     3ac:	ldp	x29, x30, [sp], #80
     3b0:	b	0 <gomp_iter_ull_guided_next>

00000000000003b4 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start>:
     3b4:	mov	x6, x5
     3b8:	adrp	x5, 0 <gomp_tls_data>
     3bc:	ldr	x5, [x5]
     3c0:	mrs	x7, tpidr_el0
     3c4:	add	x5, x7, x5
     3c8:	adrp	x7, 0 <gomp_global_icv>
     3cc:	add	x7, x7, #0x0
     3d0:	ldr	x5, [x5, #80]
     3d4:	cmp	x5, #0x0
     3d8:	add	x8, x5, #0x90
     3dc:	csel	x7, x7, x8, eq  // eq = none
     3e0:	ldr	w5, [x7, #8]
     3e4:	and	w5, w5, #0x7fffffff
     3e8:	sub	w5, w5, #0x1
     3ec:	cmp	w5, #0x3
     3f0:	b.hi	440 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x8c>  // b.pmore
     3f4:	adrp	x8, 0 <gomp_loop_ull_init>
     3f8:	and	w0, w0, #0xff
     3fc:	add	x8, x8, #0x0
     400:	ldrb	w5, [x8, w5, uxtw]
     404:	adr	x8, 410 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x5c>
     408:	add	x5, x8, w5, sxtb #2
     40c:	br	x5
     410:	mov	x5, x4
     414:	ldrsw	x4, [x7, #12]
     418:	b	1dc <GOMP_loop_ull_static_start>
     41c:	mov	x5, x4
     420:	ldrsw	x4, [x7, #12]
     424:	b	284 <GOMP_loop_ull_dynamic_start>
     428:	mov	x5, x4
     42c:	ldrsw	x4, [x7, #12]
     430:	b	31c <GOMP_loop_ull_guided_start>
     434:	mov	x5, x4
     438:	mov	x4, #0x0                   	// #0
     43c:	b	418 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x64>
     440:	stp	x29, x30, [sp, #-16]!
     444:	mov	x29, sp
     448:	bl	0 <abort>

000000000000044c <GOMP_loop_ull_ordered_static_start>:
     44c:	stp	x29, x30, [sp, #-80]!
     450:	mov	x29, sp
     454:	stp	x19, x20, [sp, #16]
     458:	mov	x20, x5
     45c:	adrp	x19, 0 <gomp_tls_data>
     460:	ldr	x19, [x19]
     464:	stp	x25, x26, [sp, #64]
     468:	and	w26, w0, #0xff
     46c:	mrs	x0, tpidr_el0
     470:	add	x19, x0, x19
     474:	stp	x21, x22, [sp, #32]
     478:	mov	x25, x4
     47c:	stp	x23, x24, [sp, #48]
     480:	mov	x22, x1
     484:	mov	x23, x2
     488:	mov	x24, x3
     48c:	mov	x21, x6
     490:	mov	x0, #0x1                   	// #1
     494:	str	xzr, [x19, #72]
     498:	bl	0 <gomp_work_share_start>
     49c:	tst	w0, #0xff
     4a0:	b.eq	4cc <GOMP_loop_ull_ordered_static_start+0x80>  // b.none
     4a4:	ldr	x0, [x19, #24]
     4a8:	mov	x6, x25
     4ac:	mov	x4, x24
     4b0:	mov	x3, x23
     4b4:	mov	x2, x22
     4b8:	mov	w1, w26
     4bc:	mov	w5, #0x1                   	// #1
     4c0:	bl	0 <gomp_loop_ull_init>
     4c4:	bl	0 <gomp_ordered_static_init>
     4c8:	bl	d4 <gomp_work_share_init_done>
     4cc:	mov	x1, x21
     4d0:	mov	x0, x20
     4d4:	bl	0 <gomp_iter_ull_static_next>
     4d8:	cmp	w0, #0x0
     4dc:	cset	w0, eq  // eq = none
     4e0:	ldp	x19, x20, [sp, #16]
     4e4:	ldp	x21, x22, [sp, #32]
     4e8:	ldp	x23, x24, [sp, #48]
     4ec:	ldp	x25, x26, [sp, #64]
     4f0:	ldp	x29, x30, [sp], #80
     4f4:	ret

00000000000004f8 <GOMP_loop_ull_ordered_dynamic_start>:
     4f8:	stp	x29, x30, [sp, #-96]!
     4fc:	mov	x29, sp
     500:	stp	x19, x20, [sp, #16]
     504:	mov	x20, x5
     508:	mrs	x19, tpidr_el0
     50c:	stp	x21, x22, [sp, #32]
     510:	mov	x22, x6
     514:	adrp	x21, 0 <gomp_tls_data>
     518:	ldr	x21, [x21]
     51c:	stp	x23, x24, [sp, #48]
     520:	mov	x23, x1
     524:	mov	x24, x2
     528:	stp	x25, x26, [sp, #64]
     52c:	mov	x25, x3
     530:	mov	x26, x4
     534:	str	x27, [sp, #80]
     538:	and	w27, w0, #0xff
     53c:	mov	x0, #0x1                   	// #1
     540:	bl	0 <gomp_work_share_start>
     544:	tst	w0, #0xff
     548:	b.eq	5cc <GOMP_loop_ull_ordered_dynamic_start+0xd4>  // b.none
     54c:	add	x9, x19, x21
     550:	mov	x6, x26
     554:	mov	x4, x25
     558:	mov	x3, x24
     55c:	mov	x2, x23
     560:	mov	w1, w27
     564:	ldr	x0, [x9, #24]
     568:	mov	w5, #0x2                   	// #2
     56c:	bl	0 <gomp_loop_ull_init>
     570:	ldr	x0, [x9, #24]
     574:	add	x0, x0, #0x40
     578:	bl	110 <gomp_mutex_lock>
     57c:	bl	d4 <gomp_work_share_init_done>
     580:	mov	x0, x20
     584:	mov	x1, x22
     588:	bl	0 <gomp_iter_ull_dynamic_next_locked>
     58c:	mov	w20, w0
     590:	tst	w0, #0xff
     594:	b.eq	59c <GOMP_loop_ull_ordered_dynamic_start+0xa4>  // b.none
     598:	bl	0 <gomp_ordered_first>
     59c:	add	x19, x19, x21
     5a0:	ldr	x0, [x19, #24]
     5a4:	add	x0, x0, #0x40
     5a8:	bl	138 <gomp_mutex_unlock>
     5ac:	mov	w0, w20
     5b0:	ldp	x19, x20, [sp, #16]
     5b4:	ldp	x21, x22, [sp, #32]
     5b8:	ldp	x23, x24, [sp, #48]
     5bc:	ldp	x25, x26, [sp, #64]
     5c0:	ldr	x27, [sp, #80]
     5c4:	ldp	x29, x30, [sp], #96
     5c8:	ret
     5cc:	add	x0, x19, x21
     5d0:	ldr	x0, [x0, #24]
     5d4:	add	x0, x0, #0x40
     5d8:	bl	110 <gomp_mutex_lock>
     5dc:	b	580 <GOMP_loop_ull_ordered_dynamic_start+0x88>

00000000000005e0 <GOMP_loop_ull_ordered_guided_start>:
     5e0:	stp	x29, x30, [sp, #-96]!
     5e4:	mov	x29, sp
     5e8:	stp	x19, x20, [sp, #16]
     5ec:	mov	x20, x5
     5f0:	mrs	x19, tpidr_el0
     5f4:	stp	x21, x22, [sp, #32]
     5f8:	mov	x22, x6
     5fc:	adrp	x21, 0 <gomp_tls_data>
     600:	ldr	x21, [x21]
     604:	stp	x23, x24, [sp, #48]
     608:	mov	x23, x1
     60c:	mov	x24, x2
     610:	stp	x25, x26, [sp, #64]
     614:	mov	x25, x3
     618:	mov	x26, x4
     61c:	str	x27, [sp, #80]
     620:	and	w27, w0, #0xff
     624:	mov	x0, #0x1                   	// #1
     628:	bl	0 <gomp_work_share_start>
     62c:	tst	w0, #0xff
     630:	b.eq	6b4 <GOMP_loop_ull_ordered_guided_start+0xd4>  // b.none
     634:	add	x9, x19, x21
     638:	mov	x6, x26
     63c:	mov	x4, x25
     640:	mov	x3, x24
     644:	mov	x2, x23
     648:	mov	w1, w27
     64c:	ldr	x0, [x9, #24]
     650:	mov	w5, #0x3                   	// #3
     654:	bl	0 <gomp_loop_ull_init>
     658:	ldr	x0, [x9, #24]
     65c:	add	x0, x0, #0x40
     660:	bl	110 <gomp_mutex_lock>
     664:	bl	d4 <gomp_work_share_init_done>
     668:	mov	x0, x20
     66c:	mov	x1, x22
     670:	bl	0 <gomp_iter_ull_guided_next_locked>
     674:	mov	w20, w0
     678:	tst	w0, #0xff
     67c:	b.eq	684 <GOMP_loop_ull_ordered_guided_start+0xa4>  // b.none
     680:	bl	0 <gomp_ordered_first>
     684:	add	x19, x19, x21
     688:	ldr	x0, [x19, #24]
     68c:	add	x0, x0, #0x40
     690:	bl	138 <gomp_mutex_unlock>
     694:	mov	w0, w20
     698:	ldp	x19, x20, [sp, #16]
     69c:	ldp	x21, x22, [sp, #32]
     6a0:	ldp	x23, x24, [sp, #48]
     6a4:	ldp	x25, x26, [sp, #64]
     6a8:	ldr	x27, [sp, #80]
     6ac:	ldp	x29, x30, [sp], #96
     6b0:	ret
     6b4:	add	x0, x19, x21
     6b8:	ldr	x0, [x0, #24]
     6bc:	add	x0, x0, #0x40
     6c0:	bl	110 <gomp_mutex_lock>
     6c4:	b	668 <GOMP_loop_ull_ordered_guided_start+0x88>

00000000000006c8 <GOMP_loop_ull_ordered_runtime_start>:
     6c8:	mov	x6, x5
     6cc:	adrp	x5, 0 <gomp_tls_data>
     6d0:	ldr	x5, [x5]
     6d4:	mrs	x7, tpidr_el0
     6d8:	add	x5, x7, x5
     6dc:	adrp	x7, 0 <gomp_global_icv>
     6e0:	add	x7, x7, #0x0
     6e4:	ldr	x5, [x5, #80]
     6e8:	cmp	x5, #0x0
     6ec:	add	x8, x5, #0x90
     6f0:	csel	x7, x7, x8, eq  // eq = none
     6f4:	ldr	w5, [x7, #8]
     6f8:	and	w5, w5, #0x7fffffff
     6fc:	sub	w5, w5, #0x1
     700:	cmp	w5, #0x3
     704:	b.hi	754 <GOMP_loop_ull_ordered_runtime_start+0x8c>  // b.pmore
     708:	adrp	x8, 0 <gomp_loop_ull_init>
     70c:	and	w0, w0, #0xff
     710:	add	x8, x8, #0x0
     714:	ldrb	w5, [x8, w5, uxtw]
     718:	adr	x8, 724 <GOMP_loop_ull_ordered_runtime_start+0x5c>
     71c:	add	x5, x8, w5, sxtb #2
     720:	br	x5
     724:	mov	x5, x4
     728:	ldrsw	x4, [x7, #12]
     72c:	b	44c <GOMP_loop_ull_ordered_static_start>
     730:	mov	x5, x4
     734:	ldrsw	x4, [x7, #12]
     738:	b	4f8 <GOMP_loop_ull_ordered_dynamic_start>
     73c:	mov	x5, x4
     740:	ldrsw	x4, [x7, #12]
     744:	b	5e0 <GOMP_loop_ull_ordered_guided_start>
     748:	mov	x5, x4
     74c:	mov	x4, #0x0                   	// #0
     750:	b	72c <GOMP_loop_ull_ordered_runtime_start+0x64>
     754:	stp	x29, x30, [sp, #-16]!
     758:	mov	x29, sp
     75c:	bl	0 <abort>

0000000000000760 <GOMP_loop_ull_ordered_start>:
     760:	stp	x29, x30, [sp, #-128]!
     764:	and	w0, w0, #0xff
     768:	mov	x29, sp
     76c:	stp	x19, x20, [sp, #16]
     770:	mov	x19, x4
     774:	adrp	x20, 0 <gomp_tls_data>
     778:	ldr	x20, [x20]
     77c:	stp	x21, x22, [sp, #32]
     780:	mrs	x21, tpidr_el0
     784:	stp	x25, x26, [sp, #64]
     788:	ldp	x22, x25, [sp, #128]
     78c:	str	w0, [sp, #108]
     790:	add	x0, x21, x20
     794:	stp	x23, x24, [sp, #48]
     798:	mov	x23, x6
     79c:	stp	x27, x28, [sp, #80]
     7a0:	mov	x24, x7
     7a4:	mov	x27, x2
     7a8:	str	xzr, [x0, #72]
     7ac:	mov	x28, x3
     7b0:	stp	x1, x5, [sp, #112]
     7b4:	cbz	x22, 7bc <GOMP_loop_ull_ordered_start+0x5c>
     7b8:	bl	0 <gomp_workshare_taskgroup_start>
     7bc:	cbz	x25, 894 <GOMP_loop_ull_ordered_start+0x134>
     7c0:	ldr	x0, [x25]
     7c4:	add	x0, x0, #0x1
     7c8:	bl	0 <gomp_work_share_start>
     7cc:	tst	w0, #0xff
     7d0:	b.eq	8b0 <GOMP_loop_ull_ordered_start+0x150>  // b.none
     7d4:	add	x1, sp, #0x78
     7d8:	mov	x0, x19
     7dc:	add	x26, x21, x20
     7e0:	bl	154 <gomp_adjust_sched>
     7e4:	ldp	x2, x6, [sp, #112]
     7e8:	mov	x19, x0
     7ec:	mov	w5, w0
     7f0:	ldrb	w1, [sp, #108]
     7f4:	ldr	x0, [x26, #24]
     7f8:	mov	x4, x28
     7fc:	mov	x3, x27
     800:	bl	0 <gomp_loop_ull_init>
     804:	cbz	x22, 828 <GOMP_loop_ull_ordered_start+0xc8>
     808:	mov	x0, x22
     80c:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     810:	ldr	x0, [x26, #80]
     814:	mov	w1, #0x1                   	// #1
     818:	ldr	x0, [x0, #40]
     81c:	strb	w1, [x0, #50]
     820:	ldr	x0, [x26, #24]
     824:	str	x22, [x0, #88]
     828:	cmp	x19, #0x1
     82c:	b.ne	89c <GOMP_loop_ull_ordered_start+0x13c>  // b.any
     830:	bl	0 <gomp_ordered_static_init>
     834:	bl	d4 <gomp_work_share_init_done>
     838:	cbz	x25, 868 <GOMP_loop_ull_ordered_start+0x108>
     83c:	add	x1, x21, x20
     840:	ldr	x0, [x1, #24]
     844:	ldr	x1, [x1, #16]
     848:	ldr	x0, [x0, #32]
     84c:	cbz	x1, 8e8 <GOMP_loop_ull_ordered_start+0x188>
     850:	ldr	w1, [x1]
     854:	lsl	x1, x1, #2
     858:	add	x0, x0, x1
     85c:	add	x0, x0, #0x7
     860:	and	x0, x0, #0xfffffffffffffff8
     864:	str	x0, [x25]
     868:	sub	x19, x19, #0x1
     86c:	cmp	x19, #0x3
     870:	b.hi	92c <GOMP_loop_ull_ordered_start+0x1cc>  // b.pmore
     874:	cmp	w19, #0x3
     878:	b.hi	92c <GOMP_loop_ull_ordered_start+0x1cc>  // b.pmore
     87c:	adrp	x1, 0 <gomp_loop_ull_init>
     880:	add	x1, x1, #0x0
     884:	ldrb	w0, [x1, w19, uxtw]
     888:	adr	x1, 894 <GOMP_loop_ull_ordered_start+0x134>
     88c:	add	x0, x1, w0, sxtb #2
     890:	br	x0
     894:	mov	x0, #0x1                   	// #1
     898:	b	7c8 <GOMP_loop_ull_ordered_start+0x68>
     89c:	add	x0, x21, x20
     8a0:	ldr	x0, [x0, #24]
     8a4:	add	x0, x0, #0x40
     8a8:	bl	110 <gomp_mutex_lock>
     8ac:	b	834 <GOMP_loop_ull_ordered_start+0xd4>
     8b0:	cbz	x22, 8c8 <GOMP_loop_ull_ordered_start+0x168>
     8b4:	add	x0, x21, x20
     8b8:	ldr	x0, [x0, #24]
     8bc:	ldr	x1, [x0, #88]
     8c0:	mov	x0, x22
     8c4:	bl	0 <gomp_workshare_task_reduction_register>
     8c8:	add	x0, x21, x20
     8cc:	ldr	x0, [x0, #24]
     8d0:	ldr	w19, [x0]
     8d4:	cmp	x19, #0x1
     8d8:	b.eq	930 <GOMP_loop_ull_ordered_start+0x1d0>  // b.none
     8dc:	add	x0, x0, #0x40
     8e0:	bl	110 <gomp_mutex_lock>
     8e4:	b	838 <GOMP_loop_ull_ordered_start+0xd8>
     8e8:	mov	x1, #0x4                   	// #4
     8ec:	b	858 <GOMP_loop_ull_ordered_start+0xf8>
     8f0:	mov	x1, x24
     8f4:	mov	x0, x23
     8f8:	bl	0 <gomp_iter_ull_dynamic_next_locked>
     8fc:	and	w19, w0, #0xff
     900:	cbz	w19, 908 <GOMP_loop_ull_ordered_start+0x1a8>
     904:	bl	0 <gomp_ordered_first>
     908:	add	x20, x21, x20
     90c:	ldr	x0, [x20, #24]
     910:	add	x0, x0, #0x40
     914:	bl	138 <gomp_mutex_unlock>
     918:	b	948 <GOMP_loop_ull_ordered_start+0x1e8>
     91c:	mov	x1, x24
     920:	mov	x0, x23
     924:	bl	0 <gomp_iter_ull_guided_next_locked>
     928:	b	8fc <GOMP_loop_ull_ordered_start+0x19c>
     92c:	bl	0 <abort>
     930:	cbnz	x25, 83c <GOMP_loop_ull_ordered_start+0xdc>
     934:	mov	x1, x24
     938:	mov	x0, x23
     93c:	bl	0 <gomp_iter_ull_static_next>
     940:	cmp	w0, #0x0
     944:	cset	w19, eq  // eq = none
     948:	mov	w0, w19
     94c:	ldp	x19, x20, [sp, #16]
     950:	ldp	x21, x22, [sp, #32]
     954:	ldp	x23, x24, [sp, #48]
     958:	ldp	x25, x26, [sp, #64]
     95c:	ldp	x27, x28, [sp, #80]
     960:	ldp	x29, x30, [sp], #128
     964:	ret

0000000000000968 <GOMP_loop_ull_doacross_static_start>:
     968:	stp	x29, x30, [sp, #-64]!
     96c:	mov	x29, sp
     970:	stp	x21, x22, [sp, #32]
     974:	mov	x22, x3
     978:	adrp	x21, 0 <gomp_tls_data>
     97c:	ldr	x21, [x21]
     980:	stp	x19, x20, [sp, #16]
     984:	mov	x19, x1
     988:	mrs	x1, tpidr_el0
     98c:	add	x21, x1, x21
     990:	stp	x23, x24, [sp, #48]
     994:	mov	x20, x2
     998:	mov	w24, w0
     99c:	mov	x23, x4
     9a0:	mov	x0, #0x0                   	// #0
     9a4:	str	xzr, [x21, #72]
     9a8:	bl	0 <gomp_work_share_start>
     9ac:	tst	w0, #0xff
     9b0:	b.eq	9ec <GOMP_loop_ull_doacross_static_start+0x84>  // b.none
     9b4:	ldr	x3, [x19]
     9b8:	mov	w5, #0x1                   	// #1
     9bc:	ldr	x0, [x21, #24]
     9c0:	mov	w1, w5
     9c4:	mov	x6, x20
     9c8:	mov	x4, #0x1                   	// #1
     9cc:	mov	x2, #0x0                   	// #0
     9d0:	bl	0 <gomp_loop_ull_init>
     9d4:	mov	x2, x20
     9d8:	mov	x1, x19
     9dc:	mov	w0, w24
     9e0:	mov	x3, #0x0                   	// #0
     9e4:	bl	0 <gomp_doacross_ull_init>
     9e8:	bl	d4 <gomp_work_share_init_done>
     9ec:	mov	x1, x23
     9f0:	mov	x0, x22
     9f4:	bl	0 <gomp_iter_ull_static_next>
     9f8:	cmp	w0, #0x0
     9fc:	cset	w0, eq  // eq = none
     a00:	ldp	x19, x20, [sp, #16]
     a04:	ldp	x21, x22, [sp, #32]
     a08:	ldp	x23, x24, [sp, #48]
     a0c:	ldp	x29, x30, [sp], #64
     a10:	ret

0000000000000a14 <GOMP_loop_ull_doacross_dynamic_start>:
     a14:	stp	x29, x30, [sp, #-64]!
     a18:	mov	x29, sp
     a1c:	stp	x19, x20, [sp, #16]
     a20:	mov	x19, x1
     a24:	mov	x20, x2
     a28:	stp	x21, x22, [sp, #32]
     a2c:	mov	x21, x3
     a30:	mov	x22, x4
     a34:	str	x23, [sp, #48]
     a38:	mov	w23, w0
     a3c:	mov	x0, #0x0                   	// #0
     a40:	bl	0 <gomp_work_share_start>
     a44:	tst	w0, #0xff
     a48:	b.eq	a94 <GOMP_loop_ull_doacross_dynamic_start+0x80>  // b.none
     a4c:	adrp	x0, 0 <gomp_tls_data>
     a50:	ldr	x0, [x0]
     a54:	mrs	x7, tpidr_el0
     a58:	ldr	x3, [x19]
     a5c:	add	x0, x7, x0
     a60:	mov	x4, #0x1                   	// #1
     a64:	mov	x6, x20
     a68:	mov	w1, w4
     a6c:	mov	w5, #0x2                   	// #2
     a70:	ldr	x0, [x0, #24]
     a74:	mov	x2, #0x0                   	// #0
     a78:	bl	0 <gomp_loop_ull_init>
     a7c:	mov	x2, x20
     a80:	mov	x1, x19
     a84:	mov	w0, w23
     a88:	mov	x3, #0x0                   	// #0
     a8c:	bl	0 <gomp_doacross_ull_init>
     a90:	bl	d4 <gomp_work_share_init_done>
     a94:	mov	x1, x22
     a98:	mov	x0, x21
     a9c:	ldp	x19, x20, [sp, #16]
     aa0:	ldp	x21, x22, [sp, #32]
     aa4:	ldr	x23, [sp, #48]
     aa8:	ldp	x29, x30, [sp], #64
     aac:	b	0 <gomp_iter_ull_dynamic_next>

0000000000000ab0 <GOMP_loop_ull_doacross_guided_start>:
     ab0:	stp	x29, x30, [sp, #-64]!
     ab4:	mov	x29, sp
     ab8:	stp	x19, x20, [sp, #16]
     abc:	mov	x19, x1
     ac0:	mov	x20, x2
     ac4:	stp	x21, x22, [sp, #32]
     ac8:	mov	x21, x3
     acc:	mov	x22, x4
     ad0:	str	x23, [sp, #48]
     ad4:	mov	w23, w0
     ad8:	mov	x0, #0x0                   	// #0
     adc:	bl	0 <gomp_work_share_start>
     ae0:	tst	w0, #0xff
     ae4:	b.eq	b30 <GOMP_loop_ull_doacross_guided_start+0x80>  // b.none
     ae8:	adrp	x0, 0 <gomp_tls_data>
     aec:	ldr	x0, [x0]
     af0:	mrs	x7, tpidr_el0
     af4:	ldr	x3, [x19]
     af8:	add	x0, x7, x0
     afc:	mov	x4, #0x1                   	// #1
     b00:	mov	x6, x20
     b04:	mov	w1, w4
     b08:	mov	w5, #0x3                   	// #3
     b0c:	ldr	x0, [x0, #24]
     b10:	mov	x2, #0x0                   	// #0
     b14:	bl	0 <gomp_loop_ull_init>
     b18:	mov	x2, x20
     b1c:	mov	x1, x19
     b20:	mov	w0, w23
     b24:	mov	x3, #0x0                   	// #0
     b28:	bl	0 <gomp_doacross_ull_init>
     b2c:	bl	d4 <gomp_work_share_init_done>
     b30:	mov	x1, x22
     b34:	mov	x0, x21
     b38:	ldp	x19, x20, [sp, #16]
     b3c:	ldp	x21, x22, [sp, #32]
     b40:	ldr	x23, [sp, #48]
     b44:	ldp	x29, x30, [sp], #64
     b48:	b	0 <gomp_iter_ull_guided_next>

0000000000000b4c <GOMP_loop_ull_doacross_runtime_start>:
     b4c:	mov	x4, x3
     b50:	adrp	x3, 0 <gomp_tls_data>
     b54:	ldr	x3, [x3]
     b58:	mrs	x5, tpidr_el0
     b5c:	add	x3, x5, x3
     b60:	adrp	x5, 0 <gomp_global_icv>
     b64:	add	x5, x5, #0x0
     b68:	ldr	x3, [x3, #80]
     b6c:	cmp	x3, #0x0
     b70:	add	x6, x3, #0x90
     b74:	csel	x5, x5, x6, eq  // eq = none
     b78:	ldr	w3, [x5, #8]
     b7c:	and	w3, w3, #0x7fffffff
     b80:	sub	w3, w3, #0x1
     b84:	cmp	w3, #0x3
     b88:	b.hi	bd4 <GOMP_loop_ull_doacross_runtime_start+0x88>  // b.pmore
     b8c:	adrp	x6, 0 <gomp_loop_ull_init>
     b90:	add	x6, x6, #0x0
     b94:	ldrb	w3, [x6, w3, uxtw]
     b98:	adr	x6, ba4 <GOMP_loop_ull_doacross_runtime_start+0x58>
     b9c:	add	x3, x6, w3, sxtb #2
     ba0:	br	x3
     ba4:	mov	x3, x2
     ba8:	ldrsw	x2, [x5, #12]
     bac:	b	968 <GOMP_loop_ull_doacross_static_start>
     bb0:	mov	x3, x2
     bb4:	ldrsw	x2, [x5, #12]
     bb8:	b	a14 <GOMP_loop_ull_doacross_dynamic_start>
     bbc:	mov	x3, x2
     bc0:	ldrsw	x2, [x5, #12]
     bc4:	b	ab0 <GOMP_loop_ull_doacross_guided_start>
     bc8:	mov	x3, x2
     bcc:	mov	x2, #0x0                   	// #0
     bd0:	b	bac <GOMP_loop_ull_doacross_runtime_start+0x60>
     bd4:	stp	x29, x30, [sp, #-16]!
     bd8:	mov	x29, sp
     bdc:	bl	0 <abort>

0000000000000be0 <GOMP_loop_ull_static_next>:
     be0:	stp	x29, x30, [sp, #-16]!
     be4:	mov	x29, sp
     be8:	bl	0 <gomp_iter_ull_static_next>
     bec:	cmp	w0, #0x0
     bf0:	cset	w0, eq  // eq = none
     bf4:	ldp	x29, x30, [sp], #16
     bf8:	ret

0000000000000bfc <GOMP_loop_ull_dynamic_next>:
     bfc:	b	0 <gomp_iter_ull_dynamic_next>

0000000000000c00 <GOMP_loop_ull_guided_next>:
     c00:	b	0 <gomp_iter_ull_guided_next>

0000000000000c04 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next>:
     c04:	adrp	x2, 0 <gomp_tls_data>
     c08:	ldr	x2, [x2]
     c0c:	mrs	x3, tpidr_el0
     c10:	add	x2, x3, x2
     c14:	ldr	x2, [x2, #24]
     c18:	ldr	w2, [x2]
     c1c:	sub	w2, w2, #0x1
     c20:	cmp	w2, #0x3
     c24:	b.hi	c4c <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x48>  // b.pmore
     c28:	adrp	x3, 0 <gomp_loop_ull_init>
     c2c:	add	x3, x3, #0x0
     c30:	ldrb	w2, [x3, w2, uxtw]
     c34:	adr	x3, c40 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x3c>
     c38:	add	x2, x3, w2, sxtb #2
     c3c:	br	x2
     c40:	b	be0 <GOMP_loop_ull_static_next>
     c44:	b	0 <gomp_iter_ull_dynamic_next>
     c48:	b	0 <gomp_iter_ull_guided_next>
     c4c:	stp	x29, x30, [sp, #-16]!
     c50:	mov	x29, sp
     c54:	bl	0 <abort>

0000000000000c58 <GOMP_loop_ull_start>:
     c58:	stp	x29, x30, [sp, #-112]!
     c5c:	and	w0, w0, #0xff
     c60:	mov	x29, sp
     c64:	stp	x19, x20, [sp, #16]
     c68:	mrs	x19, tpidr_el0
     c6c:	adrp	x20, 0 <gomp_tls_data>
     c70:	ldr	x20, [x20]
     c74:	stp	x21, x22, [sp, #32]
     c78:	ldp	x22, x21, [sp, #112]
     c7c:	str	w0, [sp, #100]
     c80:	add	x0, x19, x20
     c84:	stp	x23, x24, [sp, #48]
     c88:	mov	x23, x6
     c8c:	stp	x25, x26, [sp, #64]
     c90:	mov	x24, x7
     c94:	mov	x25, x1
     c98:	stp	x27, x28, [sp, #80]
     c9c:	mov	x26, x2
     ca0:	mov	x27, x3
     ca4:	str	xzr, [x0, #72]
     ca8:	mov	x28, x4
     cac:	str	x5, [sp, #104]
     cb0:	cbz	x22, cb8 <GOMP_loop_ull_start+0x60>
     cb4:	bl	0 <gomp_workshare_taskgroup_start>
     cb8:	mov	x0, #0x0                   	// #0
     cbc:	bl	0 <gomp_work_share_start>
     cc0:	tst	w0, #0xff
     cc4:	b.eq	d80 <GOMP_loop_ull_start+0x128>  // b.none
     cc8:	mov	x0, x28
     ccc:	add	x28, x19, x20
     cd0:	add	x1, sp, #0x68
     cd4:	bl	154 <gomp_adjust_sched>
     cd8:	ldrb	w1, [sp, #100]
     cdc:	mov	w5, w0
     ce0:	ldr	x0, [x28, #24]
     ce4:	mov	x4, x27
     ce8:	ldr	x6, [sp, #104]
     cec:	mov	x3, x26
     cf0:	mov	x2, x25
     cf4:	bl	0 <gomp_loop_ull_init>
     cf8:	cbz	x22, d1c <GOMP_loop_ull_start+0xc4>
     cfc:	mov	x0, x22
     d00:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     d04:	ldr	x0, [x28, #80]
     d08:	mov	w1, #0x1                   	// #1
     d0c:	ldr	x0, [x0, #40]
     d10:	strb	w1, [x0, #50]
     d14:	ldr	x0, [x28, #24]
     d18:	str	x22, [x0, #88]
     d1c:	cbz	x21, d40 <GOMP_loop_ull_start+0xe8>
     d20:	add	x19, x19, x20
     d24:	ldr	x0, [x21]
     d28:	ldr	x19, [x19, #24]
     d2c:	cmp	x0, #0x20
     d30:	b.ls	d6c <GOMP_loop_ull_start+0x114>  // b.plast
     d34:	bl	0 <gomp_malloc_cleared>
     d38:	str	x0, [x19, #32]
     d3c:	str	x0, [x21]
     d40:	bl	d4 <gomp_work_share_init_done>
     d44:	mov	x1, x24
     d48:	mov	x0, x23
     d4c:	bl	c04 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next>
     d50:	ldp	x19, x20, [sp, #16]
     d54:	ldp	x21, x22, [sp, #32]
     d58:	ldp	x23, x24, [sp, #48]
     d5c:	ldp	x25, x26, [sp, #64]
     d60:	ldp	x27, x28, [sp, #80]
     d64:	ldp	x29, x30, [sp], #112
     d68:	ret
     d6c:	mov	x2, x0
     d70:	mov	w1, #0x0                   	// #0
     d74:	add	x0, x19, #0x60
     d78:	bl	0 <memset>
     d7c:	b	d3c <GOMP_loop_ull_start+0xe4>
     d80:	cbz	x22, d98 <GOMP_loop_ull_start+0x140>
     d84:	add	x0, x19, x20
     d88:	ldr	x0, [x0, #24]
     d8c:	ldr	x1, [x0, #88]
     d90:	mov	x0, x22
     d94:	bl	0 <gomp_workshare_task_reduction_register>
     d98:	cbz	x21, d44 <GOMP_loop_ull_start+0xec>
     d9c:	add	x19, x19, x20
     da0:	ldr	x0, [x19, #24]
     da4:	ldr	x0, [x0, #32]
     da8:	str	x0, [x21]
     dac:	b	d44 <GOMP_loop_ull_start+0xec>

0000000000000db0 <GOMP_loop_ull_doacross_start>:
     db0:	stp	x29, x30, [sp, #-112]!
     db4:	mov	x29, sp
     db8:	stp	x21, x22, [sp, #32]
     dbc:	mrs	x21, tpidr_el0
     dc0:	adrp	x22, 0 <gomp_tls_data>
     dc4:	ldr	x22, [x22]
     dc8:	stp	x27, x28, [sp, #80]
     dcc:	mov	w27, w0
     dd0:	add	x0, x21, x22
     dd4:	stp	x19, x20, [sp, #16]
     dd8:	mov	x19, x6
     ddc:	mov	x20, x7
     de0:	stp	x23, x24, [sp, #48]
     de4:	mov	x23, x1
     de8:	mov	x24, x4
     dec:	stp	x25, x26, [sp, #64]
     df0:	mov	x26, x2
     df4:	mov	x25, x5
     df8:	str	xzr, [x0, #72]
     dfc:	str	x3, [sp, #104]
     e00:	cbz	x6, e08 <GOMP_loop_ull_doacross_start+0x58>
     e04:	bl	0 <gomp_workshare_taskgroup_start>
     e08:	mov	x0, #0x0                   	// #0
     e0c:	bl	0 <gomp_work_share_start>
     e10:	tst	w0, #0xff
     e14:	b.eq	ed4 <GOMP_loop_ull_doacross_start+0x124>  // b.none
     e18:	cbz	x20, ecc <GOMP_loop_ull_doacross_start+0x11c>
     e1c:	ldr	x28, [x20]
     e20:	mov	x0, x26
     e24:	add	x26, x21, x22
     e28:	add	x1, sp, #0x68
     e2c:	bl	154 <gomp_adjust_sched>
     e30:	mov	w5, w0
     e34:	ldr	x3, [x23]
     e38:	mov	x4, #0x1                   	// #1
     e3c:	ldr	x0, [x26, #24]
     e40:	mov	w1, w4
     e44:	ldr	x6, [sp, #104]
     e48:	mov	x2, #0x0                   	// #0
     e4c:	bl	0 <gomp_loop_ull_init>
     e50:	ldr	x2, [sp, #104]
     e54:	mov	x3, x28
     e58:	mov	x1, x23
     e5c:	mov	w0, w27
     e60:	bl	0 <gomp_doacross_ull_init>
     e64:	cbz	x19, e88 <GOMP_loop_ull_doacross_start+0xd8>
     e68:	mov	x0, x19
     e6c:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     e70:	ldr	x0, [x26, #80]
     e74:	mov	w1, #0x1                   	// #1
     e78:	ldr	x0, [x0, #40]
     e7c:	strb	w1, [x0, #50]
     e80:	ldr	x0, [x26, #24]
     e84:	str	x19, [x0, #88]
     e88:	bl	d4 <gomp_work_share_init_done>
     e8c:	cbz	x20, ea4 <GOMP_loop_ull_doacross_start+0xf4>
     e90:	add	x21, x21, x22
     e94:	ldr	x0, [x21, #24]
     e98:	ldr	x0, [x0, #32]
     e9c:	ldr	x0, [x0, #48]
     ea0:	str	x0, [x20]
     ea4:	mov	x1, x25
     ea8:	mov	x0, x24
     eac:	bl	c04 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next>
     eb0:	ldp	x19, x20, [sp, #16]
     eb4:	ldp	x21, x22, [sp, #32]
     eb8:	ldp	x23, x24, [sp, #48]
     ebc:	ldp	x25, x26, [sp, #64]
     ec0:	ldp	x27, x28, [sp, #80]
     ec4:	ldp	x29, x30, [sp], #112
     ec8:	ret
     ecc:	mov	x28, #0x0                   	// #0
     ed0:	b	e20 <GOMP_loop_ull_doacross_start+0x70>
     ed4:	cbz	x19, e8c <GOMP_loop_ull_doacross_start+0xdc>
     ed8:	add	x0, x21, x22
     edc:	ldr	x0, [x0, #24]
     ee0:	ldr	x1, [x0, #88]
     ee4:	mov	x0, x19
     ee8:	bl	0 <gomp_workshare_task_reduction_register>
     eec:	b	e8c <GOMP_loop_ull_doacross_start+0xdc>

0000000000000ef0 <GOMP_loop_ull_ordered_static_next>:
     ef0:	stp	x29, x30, [sp, #-48]!
     ef4:	mov	x29, sp
     ef8:	stp	x21, x22, [sp, #32]
     efc:	mov	x21, x1
     f00:	adrp	x22, 0 <gomp_tls_data>
     f04:	ldr	x22, [x22]
     f08:	stp	x19, x20, [sp, #16]
     f0c:	mov	x19, x0
     f10:	mrs	x20, tpidr_el0
     f14:	bl	0 <gomp_ordered_sync>
     f18:	add	x0, x20, x22
     f1c:	ldr	x0, [x0, #24]
     f20:	add	x0, x0, #0x40
     f24:	bl	110 <gomp_mutex_lock>
     f28:	mov	x0, x19
     f2c:	mov	x1, x21
     f30:	bl	0 <gomp_iter_ull_static_next>
     f34:	mov	w19, w0
     f38:	tbnz	w0, #31, f40 <GOMP_loop_ull_ordered_static_next+0x50>
     f3c:	bl	0 <gomp_ordered_static_next>
     f40:	add	x20, x20, x22
     f44:	ldr	x0, [x20, #24]
     f48:	add	x0, x0, #0x40
     f4c:	bl	138 <gomp_mutex_unlock>
     f50:	cmp	w19, #0x0
     f54:	cset	w0, eq  // eq = none
     f58:	ldp	x19, x20, [sp, #16]
     f5c:	ldp	x21, x22, [sp, #32]
     f60:	ldp	x29, x30, [sp], #48
     f64:	ret

0000000000000f68 <GOMP_loop_ull_ordered_dynamic_next>:
     f68:	stp	x29, x30, [sp, #-48]!
     f6c:	mov	x29, sp
     f70:	stp	x21, x22, [sp, #32]
     f74:	mov	x21, x1
     f78:	adrp	x22, 0 <gomp_tls_data>
     f7c:	ldr	x22, [x22]
     f80:	stp	x19, x20, [sp, #16]
     f84:	mov	x19, x0
     f88:	mrs	x20, tpidr_el0
     f8c:	bl	0 <gomp_ordered_sync>
     f90:	add	x0, x20, x22
     f94:	ldr	x0, [x0, #24]
     f98:	add	x0, x0, #0x40
     f9c:	bl	110 <gomp_mutex_lock>
     fa0:	mov	x0, x19
     fa4:	mov	x1, x21
     fa8:	bl	0 <gomp_iter_ull_dynamic_next_locked>
     fac:	mov	w19, w0
     fb0:	tst	w0, #0xff
     fb4:	b.eq	fe0 <GOMP_loop_ull_ordered_dynamic_next+0x78>  // b.none
     fb8:	bl	0 <gomp_ordered_next>
     fbc:	add	x20, x20, x22
     fc0:	ldr	x0, [x20, #24]
     fc4:	add	x0, x0, #0x40
     fc8:	bl	138 <gomp_mutex_unlock>
     fcc:	mov	w0, w19
     fd0:	ldp	x19, x20, [sp, #16]
     fd4:	ldp	x21, x22, [sp, #32]
     fd8:	ldp	x29, x30, [sp], #48
     fdc:	ret
     fe0:	bl	0 <gomp_ordered_last>
     fe4:	b	fbc <GOMP_loop_ull_ordered_dynamic_next+0x54>

0000000000000fe8 <GOMP_loop_ull_ordered_guided_next>:
     fe8:	stp	x29, x30, [sp, #-48]!
     fec:	mov	x29, sp
     ff0:	stp	x21, x22, [sp, #32]
     ff4:	mov	x21, x1
     ff8:	adrp	x22, 0 <gomp_tls_data>
     ffc:	ldr	x22, [x22]
    1000:	stp	x19, x20, [sp, #16]
    1004:	mov	x19, x0
    1008:	mrs	x20, tpidr_el0
    100c:	bl	0 <gomp_ordered_sync>
    1010:	add	x0, x20, x22
    1014:	ldr	x0, [x0, #24]
    1018:	add	x0, x0, #0x40
    101c:	bl	110 <gomp_mutex_lock>
    1020:	mov	x0, x19
    1024:	mov	x1, x21
    1028:	bl	0 <gomp_iter_ull_guided_next_locked>
    102c:	mov	w19, w0
    1030:	tst	w0, #0xff
    1034:	b.eq	1060 <GOMP_loop_ull_ordered_guided_next+0x78>  // b.none
    1038:	bl	0 <gomp_ordered_next>
    103c:	add	x20, x20, x22
    1040:	ldr	x0, [x20, #24]
    1044:	add	x0, x0, #0x40
    1048:	bl	138 <gomp_mutex_unlock>
    104c:	mov	w0, w19
    1050:	ldp	x19, x20, [sp, #16]
    1054:	ldp	x21, x22, [sp, #32]
    1058:	ldp	x29, x30, [sp], #48
    105c:	ret
    1060:	bl	0 <gomp_ordered_last>
    1064:	b	103c <GOMP_loop_ull_ordered_guided_next+0x54>

0000000000001068 <GOMP_loop_ull_ordered_runtime_next>:
    1068:	adrp	x2, 0 <gomp_tls_data>
    106c:	ldr	x2, [x2]
    1070:	mrs	x3, tpidr_el0
    1074:	add	x2, x3, x2
    1078:	ldr	x2, [x2, #24]
    107c:	ldr	w2, [x2]
    1080:	sub	w2, w2, #0x1
    1084:	cmp	w2, #0x3
    1088:	b.hi	10b0 <GOMP_loop_ull_ordered_runtime_next+0x48>  // b.pmore
    108c:	adrp	x3, 0 <gomp_loop_ull_init>
    1090:	add	x3, x3, #0x0
    1094:	ldrb	w2, [x3, w2, uxtw]
    1098:	adr	x3, 10a4 <GOMP_loop_ull_ordered_runtime_next+0x3c>
    109c:	add	x2, x3, w2, sxtb #2
    10a0:	br	x2
    10a4:	b	ef0 <GOMP_loop_ull_ordered_static_next>
    10a8:	b	f68 <GOMP_loop_ull_ordered_dynamic_next>
    10ac:	b	fe8 <GOMP_loop_ull_ordered_guided_next>
    10b0:	stp	x29, x30, [sp, #-16]!
    10b4:	mov	x29, sp
    10b8:	bl	0 <abort>

ordered.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_sem_post>:
   0:	ldr	w1, [x0]
   4:	add	w2, w1, #0x1
   8:	and	w2, w2, #0x7fffffff
   c:	ldxr	w3, [x0]
  10:	cmp	w3, w1
  14:	b.ne	20 <gomp_sem_post+0x20>  // b.any
  18:	stlxr	w4, w2, [x0]
  1c:	cmp	w4, #0x0
  20:	mov	w1, w3
  24:	b.ne	4 <gomp_sem_post+0x4>  // b.any
  28:	tbz	w3, #31, 30 <gomp_sem_post+0x30>
  2c:	b	0 <gomp_sem_post_slow>
  30:	ret

0000000000000034 <gomp_ordered_first>:
  34:	adrp	x5, 0 <gomp_tls_data>
  38:	ldr	x5, [x5]
  3c:	mrs	x2, tpidr_el0
  40:	add	x0, x2, x5
  44:	ldr	x3, [x0, #16]
  48:	cbz	x3, a0 <gomp_ordered_first+0x6c>
  4c:	ldr	w4, [x3]
  50:	cmp	w4, #0x1
  54:	b.eq	a0 <gomp_ordered_first+0x6c>  // b.none
  58:	ldr	x1, [x0, #24]
  5c:	ldr	w6, [x1, #40]
  60:	ldr	w0, [x1, #48]
  64:	add	w0, w0, w6
  68:	cmp	w4, w0
  6c:	b.hi	74 <gomp_ordered_first+0x40>  // b.pmore
  70:	sub	w0, w0, w4
  74:	add	x2, x2, x5
  78:	ldr	x4, [x1, #32]
  7c:	ldr	w2, [x2, #40]
  80:	str	w2, [x4, w0, uxtw #2]
  84:	ldr	w0, [x1, #40]
  88:	add	w4, w0, #0x1
  8c:	str	w4, [x1, #40]
  90:	cbnz	w0, a0 <gomp_ordered_first+0x6c>
  94:	ldr	x0, [x3, #80]
  98:	ldr	x0, [x0, w2, uxtw #3]
  9c:	b	0 <gomp_sem_post>
  a0:	ret

00000000000000a4 <gomp_ordered_last>:
  a4:	adrp	x0, 0 <gomp_tls_data>
  a8:	ldr	x0, [x0]
  ac:	mrs	x1, tpidr_el0
  b0:	add	x0, x1, x0
  b4:	ldr	x2, [x0, #16]
  b8:	cbz	x2, 10c <gomp_ordered_last+0x68>
  bc:	ldr	w3, [x2]
  c0:	cmp	w3, #0x1
  c4:	b.eq	10c <gomp_ordered_last+0x68>  // b.none
  c8:	ldr	x1, [x0, #24]
  cc:	mov	w0, #0xffffffff            	// #-1
  d0:	str	w0, [x1, #44]
  d4:	ldr	w0, [x1, #40]
  d8:	sub	w0, w0, #0x1
  dc:	str	w0, [x1, #40]
  e0:	cbz	w0, 10c <gomp_ordered_last+0x68>
  e4:	ldr	w0, [x1, #48]
  e8:	add	w0, w0, #0x1
  ec:	cmp	w3, w0
  f0:	csel	w0, w0, wzr, ne  // ne = any
  f4:	str	w0, [x1, #48]
  f8:	ldr	x1, [x1, #32]
  fc:	ldr	w1, [x1, w0, uxtw #2]
 100:	ldr	x0, [x2, #80]
 104:	ldr	x0, [x0, x1, lsl #3]
 108:	b	0 <gomp_sem_post>
 10c:	ret

0000000000000110 <gomp_ordered_next>:
 110:	adrp	x7, 0 <gomp_tls_data>
 114:	ldr	x7, [x7]
 118:	mrs	x3, tpidr_el0
 11c:	add	x5, x3, x7
 120:	ldr	x2, [x5, #16]
 124:	cbz	x2, 1a8 <gomp_ordered_next+0x98>
 128:	ldr	w4, [x2]
 12c:	cmp	w4, #0x1
 130:	b.eq	1a8 <gomp_ordered_next+0x98>  // b.none
 134:	ldr	x1, [x5, #24]
 138:	mov	w0, #0xffffffff            	// #-1
 13c:	ldr	x6, [x2, #80]
 140:	str	w0, [x1, #44]
 144:	ldr	w0, [x1, #40]
 148:	cmp	w0, #0x1
 14c:	b.ne	15c <gomp_ordered_next+0x4c>  // b.any
 150:	ldr	w0, [x5, #40]
 154:	ldr	x0, [x6, x0, lsl #3]
 158:	b	0 <gomp_sem_post>
 15c:	cmp	w4, w0
 160:	ldr	x5, [x1, #32]
 164:	b.ls	188 <gomp_ordered_next+0x78>  // b.plast
 168:	ldr	w8, [x1, #48]
 16c:	add	w0, w0, w8
 170:	cmp	w4, w0
 174:	b.hi	17c <gomp_ordered_next+0x6c>  // b.pmore
 178:	sub	w0, w0, w4
 17c:	add	x3, x3, x7
 180:	ldr	w3, [x3, #40]
 184:	str	w3, [x5, w0, uxtw #2]
 188:	ldr	w0, [x1, #48]
 18c:	ldr	w2, [x2]
 190:	add	w0, w0, #0x1
 194:	cmp	w2, w0
 198:	csel	w0, w0, wzr, ne  // ne = any
 19c:	str	w0, [x1, #48]
 1a0:	ldr	w0, [x5, w0, uxtw #2]
 1a4:	b	154 <gomp_ordered_next+0x44>
 1a8:	ret

00000000000001ac <gomp_ordered_static_init>:
 1ac:	adrp	x0, 0 <gomp_tls_data>
 1b0:	ldr	x0, [x0]
 1b4:	mrs	x1, tpidr_el0
 1b8:	add	x0, x1, x0
 1bc:	ldr	x0, [x0, #16]
 1c0:	cbz	x0, 1dc <gomp_ordered_static_init+0x30>
 1c4:	ldr	w1, [x0]
 1c8:	cmp	w1, #0x1
 1cc:	b.eq	1dc <gomp_ordered_static_init+0x30>  // b.none
 1d0:	ldr	x0, [x0, #80]
 1d4:	ldr	x0, [x0]
 1d8:	b	0 <gomp_sem_post>
 1dc:	ret

00000000000001e0 <gomp_ordered_static_next>:
 1e0:	adrp	x0, 0 <gomp_tls_data>
 1e4:	ldr	x0, [x0]
 1e8:	mrs	x1, tpidr_el0
 1ec:	add	x0, x1, x0
 1f0:	ldr	x1, [x0, #16]
 1f4:	cbz	x1, 234 <gomp_ordered_static_next+0x54>
 1f8:	ldr	w3, [x1]
 1fc:	cmp	w3, #0x1
 200:	b.eq	234 <gomp_ordered_static_next+0x54>  // b.none
 204:	ldr	x2, [x0, #24]
 208:	mov	w4, #0xffffffff            	// #-1
 20c:	ldr	w0, [x0, #40]
 210:	ldr	x1, [x1, #80]
 214:	add	w0, w0, #0x1
 218:	cmp	w3, w0
 21c:	str	w4, [x2, #44]
 220:	ldr	x2, [x2, #32]
 224:	csel	w0, w0, wzr, ne  // ne = any
 228:	str	w0, [x2]
 22c:	ldr	x0, [x1, w0, uxtw #3]
 230:	b	0 <gomp_sem_post>
 234:	ret

0000000000000238 <GOMP_ordered_start>:
 238:	stp	x29, x30, [sp, #-48]!
 23c:	mov	x29, sp
 240:	str	x21, [sp, #32]
 244:	adrp	x21, 0 <gomp_tls_data>
 248:	ldr	x21, [x21]
 24c:	stp	x19, x20, [sp, #16]
 250:	mrs	x19, tpidr_el0
 254:	add	x1, x19, x21
 258:	ldr	x0, [x1, #16]
 25c:	cbz	x0, 2cc <GOMP_ordered_start+0x94>
 260:	ldr	w2, [x0]
 264:	cmp	w2, #0x1
 268:	b.eq	2cc <GOMP_ordered_start+0x94>  // b.none
 26c:	ldr	x20, [x1, #24]
 270:	dmb	ish
 274:	ldr	w1, [x1, #40]
 278:	ldr	w2, [x20, #44]
 27c:	cmp	w2, w1
 280:	b.eq	2cc <GOMP_ordered_start+0x94>  // b.none
 284:	ldr	x0, [x0, #80]
 288:	ldr	x0, [x0, w1, uxtw #3]
 28c:	ldr	w1, [x0]
 290:	tst	x1, #0x7fffffff
 294:	b.ne	2a0 <GOMP_ordered_start+0x68>  // b.any
 298:	bl	0 <gomp_sem_wait_slow>
 29c:	b	2c0 <GOMP_ordered_start+0x88>
 2a0:	sub	w3, w1, #0x1
 2a4:	ldaxr	w2, [x0]
 2a8:	cmp	w2, w1
 2ac:	b.ne	2b8 <GOMP_ordered_start+0x80>  // b.any
 2b0:	stxr	w4, w3, [x0]
 2b4:	cmp	w4, #0x0
 2b8:	mov	w1, w2
 2bc:	b.ne	290 <GOMP_ordered_start+0x58>  // b.any
 2c0:	add	x19, x19, x21
 2c4:	ldr	w0, [x19, #40]
 2c8:	str	w0, [x20, #44]
 2cc:	ldp	x19, x20, [sp, #16]
 2d0:	ldr	x21, [sp, #32]
 2d4:	ldp	x29, x30, [sp], #48
 2d8:	ret

00000000000002dc <GOMP_ordered_end>:
 2dc:	ret

00000000000002e0 <gomp_doacross_init>:
 2e0:	stp	x29, x30, [sp, #-368]!
 2e4:	mov	x29, sp
 2e8:	stp	x23, x24, [sp, #48]
 2ec:	mov	x24, x1
 2f0:	adrp	x1, 0 <gomp_tls_data>
 2f4:	ldr	x1, [x1]
 2f8:	stp	x25, x26, [sp, #64]
 2fc:	mov	x25, x2
 300:	mrs	x2, tpidr_el0
 304:	add	x1, x2, x1
 308:	stp	x19, x20, [sp, #16]
 30c:	stp	x21, x22, [sp, #32]
 310:	ldp	x2, x23, [x1, #16]
 314:	stp	x27, x28, [sp, #80]
 318:	mov	x28, x3
 31c:	cbnz	x2, 33c <gomp_doacross_init+0x5c>
 320:	cbz	x28, 42c <gomp_doacross_init+0x14c>
 324:	add	x0, x28, #0x38
 328:	bl	0 <gomp_malloc_cleared>
 32c:	add	x1, x0, #0x38
 330:	str	x1, [x0, #48]
 334:	str	x0, [x23, #32]
 338:	b	430 <gomp_doacross_init+0x150>
 33c:	ldr	w19, [x2]
 340:	cmp	w19, #0x1
 344:	b.eq	320 <gomp_doacross_init+0x40>  // b.none
 348:	mov	w26, w0
 34c:	add	x6, sp, #0x70
 350:	add	x0, x3, #0x77
 354:	mov	x2, #0x0                   	// #0
 358:	mov	w27, #0x0                   	// #0
 35c:	mov	w4, #0x1                   	// #1
 360:	mov	w5, #0x40                  	// #64
 364:	cmp	w26, w2
 368:	b.hi	44c <gomp_doacross_init+0x16c>  // b.pmore
 36c:	ldr	w1, [x23]
 370:	cmp	w1, #0x1
 374:	b.ne	490 <gomp_doacross_init+0x1b0>  // b.any
 378:	mov	w19, w19
 37c:	cmp	w27, #0x40
 380:	mov	w3, w26
 384:	b.hi	4ac <gomp_doacross_init+0x1cc>  // b.pmore
 388:	lsl	x21, x3, #2
 38c:	mov	x22, #0x8                   	// #8
 390:	add	x22, x22, #0x3f
 394:	and	x22, x22, #0xffffffffffffffc0
 398:	mul	x1, x19, x22
 39c:	stp	x1, x3, [sp, #96]
 3a0:	add	x2, x1, x21
 3a4:	add	x21, x21, #0x77
 3a8:	add	x0, x2, x0
 3ac:	bl	0 <gomp_malloc>
 3b0:	add	x21, x0, x21
 3b4:	and	x21, x21, #0xffffffffffffffc0
 3b8:	stp	x25, x22, [x0]
 3bc:	mov	x20, x0
 3c0:	str	w26, [x0, #16]
 3c4:	strb	wzr, [x0, #20]
 3c8:	str	x21, [x0, #24]
 3cc:	ldp	x1, x3, [sp, #96]
 3d0:	cbz	x28, 4b8 <gomp_doacross_init+0x1d8>
 3d4:	add	x0, x21, x1
 3d8:	mov	x2, x28
 3dc:	mov	w1, #0x0                   	// #0
 3e0:	str	x0, [x20, #48]
 3e4:	str	x3, [sp, #96]
 3e8:	bl	0 <memset>
 3ec:	ldr	x3, [sp, #96]
 3f0:	cmp	w27, #0x40
 3f4:	b.ls	4c0 <gomp_doacross_init+0x1e0>  // b.plast
 3f8:	lsl	x21, x3, #3
 3fc:	mov	x27, #0x0                   	// #0
 400:	mov	x26, #0x0                   	// #0
 404:	cmp	x26, x19
 408:	b.eq	4e4 <gomp_doacross_init+0x204>  // b.none
 40c:	ldr	x0, [x20, #24]
 410:	mov	x2, x21
 414:	mov	w1, #0x0                   	// #0
 418:	add	x26, x26, #0x1
 41c:	add	x0, x0, x27
 420:	add	x27, x27, x22
 424:	bl	0 <memset>
 428:	b	404 <gomp_doacross_init+0x124>
 42c:	str	xzr, [x23, #32]
 430:	ldp	x19, x20, [sp, #16]
 434:	ldp	x21, x22, [sp, #32]
 438:	ldp	x23, x24, [sp, #48]
 43c:	ldp	x25, x26, [sp, #64]
 440:	ldp	x27, x28, [sp, #80]
 444:	ldp	x29, x30, [sp], #368
 448:	ret
 44c:	ldr	x3, [x24, x2, lsl #3]
 450:	cbz	x3, 320 <gomp_doacross_init+0x40>
 454:	cmp	w27, #0x40
 458:	b.hi	480 <gomp_doacross_init+0x1a0>  // b.pmore
 45c:	sub	x1, x3, #0x1
 460:	cmp	x3, #0x1
 464:	clz	x1, x1
 468:	sub	w1, w5, w1
 46c:	csel	w1, w1, w4, ne  // ne = any
 470:	add	w27, w27, w1
 474:	cmp	w27, #0x40
 478:	b.hi	488 <gomp_doacross_init+0x1a8>  // b.pmore
 47c:	str	w1, [x6, x2, lsl #2]
 480:	add	x2, x2, #0x1
 484:	b	364 <gomp_doacross_init+0x84>
 488:	mov	w27, #0x41                  	// #65
 48c:	b	480 <gomp_doacross_init+0x1a0>
 490:	cmp	w1, #0x3
 494:	ldr	x19, [x24]
 498:	b.eq	37c <gomp_doacross_init+0x9c>  // b.none
 49c:	sub	x19, x19, #0x1
 4a0:	sdiv	x19, x19, x25
 4a4:	add	x19, x19, #0x1
 4a8:	b	37c <gomp_doacross_init+0x9c>
 4ac:	lsl	x22, x3, #3
 4b0:	mov	x21, #0x0                   	// #0
 4b4:	b	390 <gomp_doacross_init+0xb0>
 4b8:	str	xzr, [x0, #48]
 4bc:	b	3f0 <gomp_doacross_init+0x110>
 4c0:	mov	w0, #0x1                   	// #1
 4c4:	add	x2, sp, #0x70
 4c8:	strb	w0, [x20, #20]
 4cc:	mov	w0, #0x0                   	// #0
 4d0:	cbnz	w26, 514 <gomp_doacross_init+0x234>
 4d4:	mov	x1, #0x0                   	// #0
 4d8:	mov	x0, #0x0                   	// #0
 4dc:	cmp	x0, x19
 4e0:	b.ne	530 <gomp_doacross_init+0x250>  // b.any
 4e4:	ldr	w0, [x23]
 4e8:	cmp	w0, #0x1
 4ec:	b.ne	50c <gomp_doacross_init+0x22c>  // b.any
 4f0:	cbnz	x25, 50c <gomp_doacross_init+0x22c>
 4f4:	ldr	x1, [x24]
 4f8:	udiv	x0, x1, x19
 4fc:	msub	x19, x0, x19, x1
 500:	str	x0, [x20]
 504:	madd	x1, x0, x19, x19
 508:	stp	x19, x1, [x20, #32]
 50c:	str	x20, [x23, #32]
 510:	b	430 <gomp_doacross_init+0x150>
 514:	sub	w1, w26, #0x1
 518:	mov	x26, x1
 51c:	add	x3, x20, x1, lsl #2
 520:	ldr	w1, [x2, x1, lsl #2]
 524:	str	w0, [x3, #56]
 528:	add	w0, w0, w1
 52c:	b	4d0 <gomp_doacross_init+0x1f0>
 530:	ldr	x2, [x20, #24]
 534:	add	x0, x0, #0x1
 538:	str	xzr, [x2, x1]
 53c:	add	x1, x1, x22
 540:	b	4dc <gomp_doacross_init+0x1fc>

0000000000000544 <GOMP_doacross_post>:
 544:	adrp	x3, 0 <gomp_tls_data>
 548:	ldr	x3, [x3]
 54c:	mrs	x1, tpidr_el0
 550:	add	x3, x1, x3
 554:	ldr	x2, [x3, #24]
 558:	ldr	x1, [x2, #32]
 55c:	cbz	x1, 568 <GOMP_doacross_post+0x24>
 560:	ldr	x4, [x1, #24]
 564:	cbnz	x4, 570 <GOMP_doacross_post+0x2c>
 568:	dmb	ish
 56c:	ret
 570:	ldr	w5, [x2]
 574:	cmp	w5, #0x1
 578:	b.ne	5cc <GOMP_doacross_post+0x88>  // b.any
 57c:	ldr	w2, [x3, #40]
 580:	ldr	x3, [x1, #8]
 584:	madd	x2, x2, x3, x4
 588:	ldrb	w3, [x1, #20]
 58c:	cbz	w3, 600 <GOMP_doacross_post+0xbc>
 590:	ldr	x3, [x0]
 594:	add	x1, x1, #0x38
 598:	ldr	w4, [x1]
 59c:	ldur	w6, [x1, #-40]
 5a0:	lsl	x3, x3, x4
 5a4:	mov	x4, #0x0                   	// #0
 5a8:	add	x4, x4, #0x1
 5ac:	cmp	w6, w4
 5b0:	b.hi	5e4 <GOMP_doacross_post+0xa0>  // b.pmore
 5b4:	add	x3, x3, #0x1
 5b8:	ldar	x0, [x2]
 5bc:	cmp	x0, x3
 5c0:	b.ne	5f8 <GOMP_doacross_post+0xb4>  // b.any
 5c4:	dmb	ish
 5c8:	b	56c <GOMP_doacross_post+0x28>
 5cc:	cmp	w5, #0x3
 5d0:	ldr	x2, [x0]
 5d4:	b.eq	580 <GOMP_doacross_post+0x3c>  // b.none
 5d8:	ldr	x3, [x1]
 5dc:	sdiv	x2, x2, x3
 5e0:	b	580 <GOMP_doacross_post+0x3c>
 5e4:	ldr	x5, [x0, x4, lsl #3]
 5e8:	ldr	w7, [x1, x4, lsl #2]
 5ec:	lsl	x5, x5, x7
 5f0:	orr	x3, x3, x5
 5f4:	b	5a8 <GOMP_doacross_post+0x64>
 5f8:	stlr	x3, [x2]
 5fc:	b	56c <GOMP_doacross_post+0x28>
 600:	dmb	ishld
 604:	ldr	w3, [x1, #16]
 608:	sub	w3, w3, #0x1
 60c:	cmn	w3, #0x1
 610:	b.eq	56c <GOMP_doacross_post+0x28>  // b.none
 614:	ubfiz	x1, x3, #3, #32
 618:	ldr	x4, [x0, x1]
 61c:	add	x1, x2, x1
 620:	add	x4, x4, #0x1
 624:	ldr	x5, [x1]
 628:	cmp	x4, x5
 62c:	b.eq	608 <GOMP_doacross_post+0xc4>  // b.none
 630:	stlr	x4, [x1]
 634:	b	608 <GOMP_doacross_post+0xc4>

0000000000000638 <GOMP_doacross_wait>:
 638:	sub	sp, sp, #0x60
 63c:	stp	x1, x2, [sp, #40]
 640:	mrs	x1, tpidr_el0
 644:	adrp	x2, 0 <gomp_tls_data>
 648:	ldr	x2, [x2]
 64c:	stp	x3, x4, [sp, #56]
 650:	add	x2, x1, x2
 654:	stp	x5, x6, [sp, #72]
 658:	str	x7, [sp, #88]
 65c:	ldr	x4, [x2, #24]
 660:	ldr	x3, [x4, #32]
 664:	cbz	x3, 670 <GOMP_doacross_wait+0x38>
 668:	ldr	x5, [x3, #24]
 66c:	cbnz	x5, 678 <GOMP_doacross_wait+0x40>
 670:	dmb	ish
 674:	b	7cc <GOMP_doacross_wait+0x194>
 678:	ldr	w1, [x4]
 67c:	cmp	w1, #0x1
 680:	b.ne	750 <GOMP_doacross_wait+0x118>  // b.any
 684:	ldr	x1, [x4, #8]
 688:	cbnz	x1, 738 <GOMP_doacross_wait+0x100>
 68c:	ldr	x2, [x3, #40]
 690:	ldr	x1, [x3]
 694:	cmp	x2, x0
 698:	b.le	6a8 <GOMP_doacross_wait+0x70>
 69c:	add	x1, x1, #0x1
 6a0:	sdiv	x1, x0, x1
 6a4:	b	6b8 <GOMP_doacross_wait+0x80>
 6a8:	sub	x2, x0, x2
 6ac:	sdiv	x1, x2, x1
 6b0:	ldr	x2, [x3, #32]
 6b4:	add	x1, x1, x2
 6b8:	ldrb	w6, [x3, #20]
 6bc:	add	x7, sp, #0x20
 6c0:	ldr	x2, [x3, #8]
 6c4:	madd	x1, x1, x2, x5
 6c8:	cbnz	w6, 768 <GOMP_doacross_wait+0x130>
 6cc:	add	x0, x0, #0x1
 6d0:	mov	w9, #0xffffffc8            	// #-56
 6d4:	add	x2, sp, #0x60
 6d8:	stp	x2, x2, [sp]
 6dc:	mov	w2, #0x0                   	// #0
 6e0:	str	x7, [sp, #16]
 6e4:	stp	w9, wzr, [sp, #24]
 6e8:	ldr	w5, [x3, #16]
 6ec:	cmp	w5, w2
 6f0:	b.ls	72c <GOMP_doacross_wait+0xf4>  // b.plast
 6f4:	cbz	w2, 860 <GOMP_doacross_wait+0x228>
 6f8:	ldr	w6, [sp, #24]
 6fc:	ldr	x4, [sp]
 700:	tbnz	w6, #31, 844 <GOMP_doacross_wait+0x20c>
 704:	add	x6, x4, #0xf
 708:	and	x6, x6, #0xfffffffffffffff8
 70c:	str	x6, [sp]
 710:	ldr	x4, [x4]
 714:	add	x4, x4, #0x1
 718:	add	x6, x1, w2, uxtw #3
 71c:	ldr	x6, [x6]
 720:	cmp	x4, x6
 724:	b.cs	868 <GOMP_doacross_wait+0x230>  // b.hs, b.nlast
 728:	mov	w2, w5
 72c:	cmp	w5, w2
 730:	b.eq	670 <GOMP_doacross_wait+0x38>  // b.none
 734:	b	6d4 <GOMP_doacross_wait+0x9c>
 738:	ldr	x2, [x2, #16]
 73c:	sdiv	x1, x0, x1
 740:	ldr	w4, [x2]
 744:	sdiv	x2, x1, x4
 748:	msub	x1, x2, x4, x1
 74c:	b	6b8 <GOMP_doacross_wait+0x80>
 750:	cmp	w1, #0x3
 754:	b.ne	760 <GOMP_doacross_wait+0x128>  // b.any
 758:	mov	x1, x0
 75c:	b	6b8 <GOMP_doacross_wait+0x80>
 760:	ldr	x1, [x3]
 764:	b	6a0 <GOMP_doacross_wait+0x68>
 768:	ldr	w2, [x3, #56]
 76c:	add	x4, sp, #0x60
 770:	ldr	w11, [x3, #16]
 774:	add	x3, x3, #0x3c
 778:	mov	w8, #0x0                   	// #0
 77c:	mov	w9, #0x0                   	// #0
 780:	lsl	x0, x0, x2
 784:	add	x2, sp, #0x60
 788:	stp	x2, x2, [sp]
 78c:	mov	w2, #0xffffffc8            	// #-56
 790:	str	x7, [sp, #16]
 794:	mov	x7, #0x0                   	// #0
 798:	str	w2, [sp, #24]
 79c:	str	wzr, [sp, #28]
 7a0:	add	w5, w7, #0x1
 7a4:	cmp	w11, w5
 7a8:	b.hi	7d4 <GOMP_doacross_wait+0x19c>  // b.pmore
 7ac:	cbz	w9, 7b4 <GOMP_doacross_wait+0x17c>
 7b0:	str	w2, [sp, #24]
 7b4:	cbz	w8, 7bc <GOMP_doacross_wait+0x184>
 7b8:	str	x4, [sp]
 7bc:	ldar	x2, [x1]
 7c0:	cmp	x0, x2
 7c4:	b.cs	83c <GOMP_doacross_wait+0x204>  // b.hs, b.nlast
 7c8:	dmb	ish
 7cc:	add	sp, sp, #0x60
 7d0:	ret
 7d4:	tbnz	w2, #31, 808 <GOMP_doacross_wait+0x1d0>
 7d8:	add	x5, x4, #0xf
 7dc:	mov	w8, w6
 7e0:	and	x5, x5, #0xfffffffffffffff8
 7e4:	mov	w10, w2
 7e8:	ldr	x2, [x4]
 7ec:	mov	x4, x5
 7f0:	ldr	w12, [x3, x7, lsl #2]
 7f4:	add	x7, x7, #0x1
 7f8:	lsl	x2, x2, x12
 7fc:	orr	x0, x0, x2
 800:	mov	w2, w10
 804:	b	7a0 <GOMP_doacross_wait+0x168>
 808:	add	w10, w2, #0x8
 80c:	cmp	w10, #0x0
 810:	b.le	828 <GOMP_doacross_wait+0x1f0>
 814:	add	x5, x4, #0xf
 818:	mov	w8, w6
 81c:	and	x5, x5, #0xfffffffffffffff8
 820:	mov	w9, w6
 824:	b	7e8 <GOMP_doacross_wait+0x1b0>
 828:	mov	x5, x4
 82c:	add	x4, sp, #0x60
 830:	mov	w9, w6
 834:	add	x4, x4, w2, sxtw
 838:	b	7e8 <GOMP_doacross_wait+0x1b0>
 83c:	ldr	x2, [x1]
 840:	b	7c0 <GOMP_doacross_wait+0x188>
 844:	add	w8, w6, #0x8
 848:	str	w8, [sp, #24]
 84c:	cmp	w8, #0x0
 850:	b.gt	704 <GOMP_doacross_wait+0xcc>
 854:	ldr	x4, [sp, #8]
 858:	add	x4, x4, w6, sxtw
 85c:	b	710 <GOMP_doacross_wait+0xd8>
 860:	mov	x4, x0
 864:	b	718 <GOMP_doacross_wait+0xe0>
 868:	b.hi	72c <GOMP_doacross_wait+0xf4>  // b.pmore
 86c:	add	w2, w2, #0x1
 870:	b	6e8 <GOMP_doacross_wait+0xb0>

0000000000000874 <gomp_doacross_ull_init>:
 874:	stp	x29, x30, [sp, #-368]!
 878:	mov	x29, sp
 87c:	stp	x25, x26, [sp, #64]
 880:	mov	w26, w0
 884:	adrp	x0, 0 <gomp_tls_data>
 888:	ldr	x0, [x0]
 88c:	stp	x23, x24, [sp, #48]
 890:	mov	x24, x1
 894:	mrs	x1, tpidr_el0
 898:	add	x0, x1, x0
 89c:	stp	x19, x20, [sp, #16]
 8a0:	mov	x25, x2
 8a4:	stp	x21, x22, [sp, #32]
 8a8:	mov	x2, x3
 8ac:	ldp	x1, x23, [x0, #16]
 8b0:	stp	x27, x28, [sp, #80]
 8b4:	cbnz	x1, 8d4 <gomp_doacross_ull_init+0x60>
 8b8:	cbz	x2, 9b0 <gomp_doacross_ull_init+0x13c>
 8bc:	add	x0, x2, #0x38
 8c0:	bl	0 <gomp_malloc_cleared>
 8c4:	add	x1, x0, #0x38
 8c8:	str	x1, [x0, #48]
 8cc:	str	x0, [x23, #32]
 8d0:	b	9b4 <gomp_doacross_ull_init+0x140>
 8d4:	ldr	w20, [x1]
 8d8:	cmp	w20, #0x1
 8dc:	b.eq	8b8 <gomp_doacross_ull_init+0x44>  // b.none
 8e0:	add	x6, sp, #0x70
 8e4:	mov	x1, #0x0                   	// #0
 8e8:	mov	w28, #0x0                   	// #0
 8ec:	mov	w4, #0x1                   	// #1
 8f0:	mov	w5, #0x40                  	// #64
 8f4:	cmp	w26, w1
 8f8:	b.hi	9d0 <gomp_doacross_ull_init+0x15c>  // b.pmore
 8fc:	ldr	w0, [x23]
 900:	cmp	w0, #0x1
 904:	b.ne	a14 <gomp_doacross_ull_init+0x1a0>  // b.any
 908:	mov	w20, w20
 90c:	cmp	w28, #0x40
 910:	mov	w27, w26
 914:	b.hi	a30 <gomp_doacross_ull_init+0x1bc>  // b.pmore
 918:	lsl	x21, x27, #2
 91c:	mov	x22, #0x8                   	// #8
 920:	add	x22, x22, #0x3f
 924:	add	x21, x21, #0x77
 928:	and	x22, x22, #0xffffffffffffffc0
 92c:	mul	x1, x20, x22
 930:	stp	x1, x2, [sp, #96]
 934:	add	x0, x1, x21
 938:	bl	0 <gomp_malloc>
 93c:	add	x21, x0, x21
 940:	ldp	x1, x2, [sp, #96]
 944:	and	x21, x21, #0xffffffffffffffc0
 948:	stp	x25, x22, [x0]
 94c:	mov	x19, x0
 950:	str	w26, [x0, #16]
 954:	strb	wzr, [x0, #20]
 958:	str	x21, [x0, #24]
 95c:	str	xzr, [x0, #40]
 960:	cbz	x2, a3c <gomp_doacross_ull_init+0x1c8>
 964:	add	x0, x21, x1
 968:	mov	w1, #0x0                   	// #0
 96c:	str	x0, [x19, #48]
 970:	bl	0 <memset>
 974:	cmp	w28, #0x40
 978:	b.ls	a44 <gomp_doacross_ull_init+0x1d0>  // b.plast
 97c:	lsl	x27, x27, #3
 980:	mov	x26, #0x0                   	// #0
 984:	mov	x21, #0x0                   	// #0
 988:	cmp	x21, x20
 98c:	b.eq	a68 <gomp_doacross_ull_init+0x1f4>  // b.none
 990:	ldr	x0, [x19, #24]
 994:	mov	x2, x27
 998:	mov	w1, #0x0                   	// #0
 99c:	add	x21, x21, #0x1
 9a0:	add	x0, x0, x26
 9a4:	add	x26, x26, x22
 9a8:	bl	0 <memset>
 9ac:	b	988 <gomp_doacross_ull_init+0x114>
 9b0:	str	xzr, [x23, #32]
 9b4:	ldp	x19, x20, [sp, #16]
 9b8:	ldp	x21, x22, [sp, #32]
 9bc:	ldp	x23, x24, [sp, #48]
 9c0:	ldp	x25, x26, [sp, #64]
 9c4:	ldp	x27, x28, [sp, #80]
 9c8:	ldp	x29, x30, [sp], #368
 9cc:	ret
 9d0:	ldr	x3, [x24, x1, lsl #3]
 9d4:	cbz	x3, 8b8 <gomp_doacross_ull_init+0x44>
 9d8:	cmp	w28, #0x40
 9dc:	b.hi	a04 <gomp_doacross_ull_init+0x190>  // b.pmore
 9e0:	sub	x0, x3, #0x1
 9e4:	cmp	x3, #0x1
 9e8:	clz	x0, x0
 9ec:	sub	w0, w5, w0
 9f0:	csel	w0, w0, w4, ne  // ne = any
 9f4:	add	w28, w28, w0
 9f8:	cmp	w28, #0x40
 9fc:	b.hi	a0c <gomp_doacross_ull_init+0x198>  // b.pmore
 a00:	str	w0, [x6, x1, lsl #2]
 a04:	add	x1, x1, #0x1
 a08:	b	8f4 <gomp_doacross_ull_init+0x80>
 a0c:	mov	w28, #0x41                  	// #65
 a10:	b	a04 <gomp_doacross_ull_init+0x190>
 a14:	cmp	w0, #0x3
 a18:	ldr	x20, [x24]
 a1c:	b.eq	90c <gomp_doacross_ull_init+0x98>  // b.none
 a20:	sub	x20, x20, #0x1
 a24:	udiv	x20, x20, x25
 a28:	add	x20, x20, #0x1
 a2c:	b	90c <gomp_doacross_ull_init+0x98>
 a30:	lsl	x22, x27, #3
 a34:	mov	x21, #0x0                   	// #0
 a38:	b	920 <gomp_doacross_ull_init+0xac>
 a3c:	str	xzr, [x0, #48]
 a40:	b	974 <gomp_doacross_ull_init+0x100>
 a44:	mov	w0, #0x1                   	// #1
 a48:	add	x2, sp, #0x70
 a4c:	strb	w0, [x19, #20]
 a50:	mov	w0, #0x0                   	// #0
 a54:	cbnz	w26, a98 <gomp_doacross_ull_init+0x224>
 a58:	mov	x1, #0x0                   	// #0
 a5c:	mov	x0, #0x0                   	// #0
 a60:	cmp	x0, x20
 a64:	b.ne	ab4 <gomp_doacross_ull_init+0x240>  // b.any
 a68:	ldr	w0, [x23]
 a6c:	cmp	w0, #0x1
 a70:	b.ne	a90 <gomp_doacross_ull_init+0x21c>  // b.any
 a74:	cbnz	x25, a90 <gomp_doacross_ull_init+0x21c>
 a78:	ldr	x1, [x24]
 a7c:	udiv	x0, x1, x20
 a80:	msub	x20, x0, x20, x1
 a84:	str	x0, [x19]
 a88:	madd	x1, x0, x20, x20
 a8c:	stp	x20, x1, [x19, #32]
 a90:	str	x19, [x23, #32]
 a94:	b	9b4 <gomp_doacross_ull_init+0x140>
 a98:	sub	w1, w26, #0x1
 a9c:	mov	x26, x1
 aa0:	add	x3, x19, x1, lsl #2
 aa4:	ldr	w1, [x2, x1, lsl #2]
 aa8:	str	w0, [x3, #56]
 aac:	add	w0, w0, w1
 ab0:	b	a54 <gomp_doacross_ull_init+0x1e0>
 ab4:	ldr	x2, [x19, #24]
 ab8:	add	x0, x0, #0x1
 abc:	str	xzr, [x2, x1]
 ac0:	add	x1, x1, x22
 ac4:	b	a60 <gomp_doacross_ull_init+0x1ec>

0000000000000ac8 <GOMP_doacross_ull_post>:
 ac8:	adrp	x3, 0 <gomp_tls_data>
 acc:	ldr	x3, [x3]
 ad0:	mrs	x1, tpidr_el0
 ad4:	add	x3, x1, x3
 ad8:	ldr	x2, [x3, #24]
 adc:	ldr	x1, [x2, #32]
 ae0:	cbz	x1, aec <GOMP_doacross_ull_post+0x24>
 ae4:	ldr	x4, [x1, #24]
 ae8:	cbnz	x4, af4 <GOMP_doacross_ull_post+0x2c>
 aec:	dmb	ish
 af0:	ret
 af4:	ldr	w5, [x2]
 af8:	cmp	w5, #0x1
 afc:	b.ne	b50 <GOMP_doacross_ull_post+0x88>  // b.any
 b00:	ldr	w2, [x3, #40]
 b04:	ldrb	w3, [x1, #20]
 b08:	cbz	w3, b84 <GOMP_doacross_ull_post+0xbc>
 b0c:	ldr	x3, [x1, #8]
 b10:	add	x1, x1, #0x38
 b14:	ldur	w6, [x1, #-40]
 b18:	madd	x2, x2, x3, x4
 b1c:	ldr	w4, [x1]
 b20:	ldr	x3, [x0]
 b24:	lsl	x3, x3, x4
 b28:	mov	x4, #0x0                   	// #0
 b2c:	add	x4, x4, #0x1
 b30:	cmp	w6, w4
 b34:	b.hi	b68 <GOMP_doacross_ull_post+0xa0>  // b.pmore
 b38:	add	x3, x3, #0x1
 b3c:	ldar	x0, [x2]
 b40:	cmp	x0, x3
 b44:	b.ne	b7c <GOMP_doacross_ull_post+0xb4>  // b.any
 b48:	dmb	ish
 b4c:	b	af0 <GOMP_doacross_ull_post+0x28>
 b50:	cmp	w5, #0x3
 b54:	ldr	x2, [x0]
 b58:	b.eq	b04 <GOMP_doacross_ull_post+0x3c>  // b.none
 b5c:	ldr	x3, [x1]
 b60:	udiv	x2, x2, x3
 b64:	b	b04 <GOMP_doacross_ull_post+0x3c>
 b68:	ldr	x5, [x0, x4, lsl #3]
 b6c:	ldr	w7, [x1, x4, lsl #2]
 b70:	lsl	x5, x5, x7
 b74:	orr	x3, x3, x5
 b78:	b	b2c <GOMP_doacross_ull_post+0x64>
 b7c:	stlr	x3, [x2]
 b80:	b	af0 <GOMP_doacross_ull_post+0x28>
 b84:	dmb	ishld
 b88:	ldr	x3, [x1, #8]
 b8c:	ldr	x5, [x1, #24]
 b90:	mul	x2, x2, x3
 b94:	ldr	w3, [x1, #16]
 b98:	sub	w3, w3, #0x1
 b9c:	cmn	w3, #0x1
 ba0:	b.eq	af0 <GOMP_doacross_ull_post+0x28>  // b.none
 ba4:	ubfiz	x1, x3, #3, #32
 ba8:	ldr	x4, [x0, x1]
 bac:	add	x1, x2, x1
 bb0:	add	x1, x5, x1
 bb4:	add	x4, x4, #0x1
 bb8:	ldr	x6, [x1]
 bbc:	cmp	x4, x6
 bc0:	b.eq	b98 <GOMP_doacross_ull_post+0xd0>  // b.none
 bc4:	stlr	x4, [x1]
 bc8:	b	b98 <GOMP_doacross_ull_post+0xd0>

0000000000000bcc <GOMP_doacross_ull_wait>:
 bcc:	sub	sp, sp, #0x60
 bd0:	stp	x1, x2, [sp, #40]
 bd4:	mrs	x1, tpidr_el0
 bd8:	adrp	x2, 0 <gomp_tls_data>
 bdc:	ldr	x2, [x2]
 be0:	stp	x3, x4, [sp, #56]
 be4:	add	x2, x1, x2
 be8:	stp	x5, x6, [sp, #72]
 bec:	str	x7, [sp, #88]
 bf0:	ldr	x1, [x2, #24]
 bf4:	ldr	x3, [x1, #32]
 bf8:	cbz	x3, c04 <GOMP_doacross_ull_wait+0x38>
 bfc:	ldr	x5, [x3, #24]
 c00:	cbnz	x5, c0c <GOMP_doacross_ull_wait+0x40>
 c04:	dmb	ish
 c08:	b	d68 <GOMP_doacross_ull_wait+0x19c>
 c0c:	ldr	w4, [x1]
 c10:	cmp	w4, #0x1
 c14:	b.ne	ce8 <GOMP_doacross_ull_wait+0x11c>  // b.any
 c18:	ldr	x1, [x1, #8]
 c1c:	cbnz	x1, cd0 <GOMP_doacross_ull_wait+0x104>
 c20:	ldr	x2, [x3, #40]
 c24:	ldr	x1, [x3]
 c28:	cmp	x2, x0
 c2c:	b.ls	c3c <GOMP_doacross_ull_wait+0x70>  // b.plast
 c30:	add	x1, x1, #0x1
 c34:	udiv	x1, x0, x1
 c38:	b	c4c <GOMP_doacross_ull_wait+0x80>
 c3c:	sub	x2, x0, x2
 c40:	udiv	x2, x2, x1
 c44:	ldr	x1, [x3, #32]
 c48:	add	x1, x2, x1
 c4c:	ldrb	w6, [x3, #20]
 c50:	add	x8, sp, #0x20
 c54:	ldr	x2, [x3, #8]
 c58:	mul	x1, x1, x2
 c5c:	cbnz	w6, d00 <GOMP_doacross_ull_wait+0x134>
 c60:	add	x0, x0, #0x1
 c64:	mov	w10, #0xffffffc8            	// #-56
 c68:	add	x2, sp, #0x60
 c6c:	stp	x2, x2, [sp]
 c70:	mov	w2, #0x0                   	// #0
 c74:	str	x8, [sp, #16]
 c78:	stp	w10, wzr, [sp, #24]
 c7c:	ldr	w6, [x3, #16]
 c80:	cmp	w6, w2
 c84:	b.ls	cc4 <GOMP_doacross_ull_wait+0xf8>  // b.plast
 c88:	cbz	w2, dfc <GOMP_doacross_ull_wait+0x230>
 c8c:	ldr	w7, [sp, #24]
 c90:	ldr	x4, [sp]
 c94:	tbnz	w7, #31, de0 <GOMP_doacross_ull_wait+0x214>
 c98:	add	x7, x4, #0xf
 c9c:	and	x7, x7, #0xfffffffffffffff8
 ca0:	str	x7, [sp]
 ca4:	ldr	x4, [x4]
 ca8:	add	x4, x4, #0x1
 cac:	add	x7, x1, w2, uxtw #3
 cb0:	add	x7, x5, x7
 cb4:	ldr	x7, [x7]
 cb8:	cmp	x4, x7
 cbc:	b.cs	e04 <GOMP_doacross_ull_wait+0x238>  // b.hs, b.nlast
 cc0:	mov	w2, w6
 cc4:	cmp	w6, w2
 cc8:	b.eq	c04 <GOMP_doacross_ull_wait+0x38>  // b.none
 ccc:	b	c68 <GOMP_doacross_ull_wait+0x9c>
 cd0:	ldr	x2, [x2, #16]
 cd4:	udiv	x1, x0, x1
 cd8:	ldr	w4, [x2]
 cdc:	udiv	x2, x1, x4
 ce0:	msub	x1, x2, x4, x1
 ce4:	b	c4c <GOMP_doacross_ull_wait+0x80>
 ce8:	cmp	w4, #0x3
 cec:	b.eq	cf8 <GOMP_doacross_ull_wait+0x12c>  // b.none
 cf0:	ldr	x1, [x3]
 cf4:	b	c34 <GOMP_doacross_ull_wait+0x68>
 cf8:	mov	x1, x0
 cfc:	b	c4c <GOMP_doacross_ull_wait+0x80>
 d00:	ldr	w2, [x3, #56]
 d04:	add	x1, x5, x1
 d08:	ldr	w11, [x3, #16]
 d0c:	add	x4, sp, #0x60
 d10:	add	x3, x3, #0x3c
 d14:	mov	x7, #0x0                   	// #0
 d18:	lsl	x0, x0, x2
 d1c:	add	x2, sp, #0x60
 d20:	mov	w9, #0x0                   	// #0
 d24:	stp	x2, x2, [sp]
 d28:	mov	w2, #0xffffffc8            	// #-56
 d2c:	str	x8, [sp, #16]
 d30:	mov	w8, #0x0                   	// #0
 d34:	str	w2, [sp, #24]
 d38:	str	wzr, [sp, #28]
 d3c:	add	w5, w7, #0x1
 d40:	cmp	w11, w5
 d44:	b.hi	d70 <GOMP_doacross_ull_wait+0x1a4>  // b.pmore
 d48:	cbz	w9, d50 <GOMP_doacross_ull_wait+0x184>
 d4c:	str	w2, [sp, #24]
 d50:	cbz	w8, d58 <GOMP_doacross_ull_wait+0x18c>
 d54:	str	x4, [sp]
 d58:	ldar	x2, [x1]
 d5c:	cmp	x0, x2
 d60:	b.cs	dd8 <GOMP_doacross_ull_wait+0x20c>  // b.hs, b.nlast
 d64:	dmb	ish
 d68:	add	sp, sp, #0x60
 d6c:	ret
 d70:	tbnz	w2, #31, da4 <GOMP_doacross_ull_wait+0x1d8>
 d74:	add	x5, x4, #0xf
 d78:	mov	w8, w6
 d7c:	and	x5, x5, #0xfffffffffffffff8
 d80:	mov	w10, w2
 d84:	ldr	x2, [x4]
 d88:	mov	x4, x5
 d8c:	ldr	w12, [x3, x7, lsl #2]
 d90:	add	x7, x7, #0x1
 d94:	lsl	x2, x2, x12
 d98:	orr	x0, x0, x2
 d9c:	mov	w2, w10
 da0:	b	d3c <GOMP_doacross_ull_wait+0x170>
 da4:	add	w10, w2, #0x8
 da8:	cmp	w10, #0x0
 dac:	b.le	dc4 <GOMP_doacross_ull_wait+0x1f8>
 db0:	add	x5, x4, #0xf
 db4:	mov	w8, w6
 db8:	and	x5, x5, #0xfffffffffffffff8
 dbc:	mov	w9, w6
 dc0:	b	d84 <GOMP_doacross_ull_wait+0x1b8>
 dc4:	mov	x5, x4
 dc8:	add	x4, sp, #0x60
 dcc:	mov	w9, w6
 dd0:	add	x4, x4, w2, sxtw
 dd4:	b	d84 <GOMP_doacross_ull_wait+0x1b8>
 dd8:	ldr	x2, [x1]
 ddc:	b	d5c <GOMP_doacross_ull_wait+0x190>
 de0:	add	w9, w7, #0x8
 de4:	str	w9, [sp, #24]
 de8:	cmp	w9, #0x0
 dec:	b.gt	c98 <GOMP_doacross_ull_wait+0xcc>
 df0:	ldr	x4, [sp, #8]
 df4:	add	x4, x4, w7, sxtw
 df8:	b	ca4 <GOMP_doacross_ull_wait+0xd8>
 dfc:	mov	x4, x0
 e00:	b	cac <GOMP_doacross_ull_wait+0xe0>
 e04:	b.hi	cc4 <GOMP_doacross_ull_wait+0xf8>  // b.pmore
 e08:	add	w2, w2, #0x1
 e0c:	b	c7c <GOMP_doacross_ull_wait+0xb0>

parallel.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_resolve_num_threads>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x23, [sp, #48]
   c:	adrp	x23, 0 <gomp_tls_data>
  10:	ldr	x23, [x23]
  14:	stp	x21, x22, [sp, #32]
  18:	mrs	x21, tpidr_el0
  1c:	mov	w22, w1
  20:	stp	x19, x20, [sp, #16]
  24:	mov	w19, w0
  28:	add	x0, x21, x23
  2c:	adrp	x20, 0 <gomp_global_icv>
  30:	add	x20, x20, #0x0
  34:	ldr	x1, [x0, #80]
  38:	cmp	x1, #0x0
  3c:	add	x2, x1, #0x90
  40:	csel	x20, x20, x2, eq  // eq = none
  44:	cmp	w19, #0x1
  48:	b.eq	144 <gomp_resolve_num_threads+0x144>  // b.none
  4c:	ldr	w0, [x0, #48]
  50:	cbz	w0, 5c <gomp_resolve_num_threads+0x5c>
  54:	ldrb	w1, [x20, #25]
  58:	cbz	w1, 144 <gomp_resolve_num_threads+0x144>
  5c:	adrp	x1, 0 <gomp_max_active_levels_var>
  60:	ldr	x1, [x1]
  64:	cmp	x1, w0, uxtw
  68:	b.ls	144 <gomp_resolve_num_threads+0x144>  // b.plast
  6c:	cbnz	w19, 74 <gomp_resolve_num_threads+0x74>
  70:	ldr	w19, [x20]
  74:	ldrb	w0, [x20, #24]
  78:	cbz	w0, 94 <gomp_resolve_num_threads+0x94>
  7c:	bl	0 <gomp_dynamic_max_threads>
  80:	cmp	w19, w0
  84:	csel	w19, w19, w0, ls  // ls = plast
  88:	cmp	w22, #0x0
  8c:	ccmp	w19, w22, #0x0, ne  // ne = any
  90:	csel	w19, w19, w22, ls  // ls = plast
  94:	ldr	w1, [x20, #20]
  98:	mov	w0, w19
  9c:	cmn	w1, #0x1
  a0:	b.eq	130 <gomp_resolve_num_threads+0x130>  // b.none
  a4:	cmp	w19, #0x1
  a8:	b.eq	144 <gomp_resolve_num_threads+0x144>  // b.none
  ac:	add	x21, x21, x23
  b0:	ldr	x0, [x21, #16]
  b4:	ldr	x3, [x21, #96]
  b8:	cbz	x0, 11c <gomp_resolve_num_threads+0x11c>
  bc:	cbz	x3, 11c <gomp_resolve_num_threads+0x11c>
  c0:	mov	w7, w19
  c4:	add	x5, x3, #0x18
  c8:	mov	x6, #0x1                   	// #1
  cc:	ldr	x2, [x3, #24]
  d0:	ldr	w4, [x20, #20]
  d4:	sub	x0, x6, x2
  d8:	sub	w1, w6, w2
  dc:	add	w1, w1, w4
  e0:	add	x0, x0, w4, uxtw
  e4:	sub	x4, x2, #0x1
  e8:	cmp	x0, x7
  ec:	csel	w0, w1, w19, cc  // cc = lo, ul, last
  f0:	csel	w1, w1, w19, cc  // cc = lo, ul, last
  f4:	add	x1, x4, x1
  f8:	ldxr	x4, [x5]
  fc:	cmp	x4, x2
 100:	b.ne	10c <gomp_resolve_num_threads+0x10c>  // b.any
 104:	stlxr	w8, x1, [x5]
 108:	cbnz	w8, f8 <gomp_resolve_num_threads+0xf8>
 10c:	dmb	ish
 110:	cmp	x4, x2
 114:	b.ne	cc <gomp_resolve_num_threads+0xcc>  // b.any
 118:	b	130 <gomp_resolve_num_threads+0x130>
 11c:	cmp	w1, w19
 120:	csel	w0, w1, w19, ls  // ls = plast
 124:	cbz	x3, 130 <gomp_resolve_num_threads+0x130>
 128:	mov	w1, w0
 12c:	str	x1, [x3, #24]
 130:	ldp	x19, x20, [sp, #16]
 134:	ldp	x21, x22, [sp, #32]
 138:	ldr	x23, [sp, #48]
 13c:	ldp	x29, x30, [sp], #64
 140:	ret
 144:	mov	w0, #0x1                   	// #1
 148:	b	130 <gomp_resolve_num_threads+0x130>

000000000000014c <GOMP_parallel_start>:
 14c:	stp	x29, x30, [sp, #-48]!
 150:	mov	x29, sp
 154:	stp	x19, x20, [sp, #16]
 158:	mov	x20, x1
 15c:	mov	w1, #0x0                   	// #0
 160:	mov	x19, x0
 164:	mov	w0, w2
 168:	str	x21, [sp, #32]
 16c:	bl	0 <gomp_resolve_num_threads>
 170:	mov	w21, w0
 174:	bl	0 <gomp_new_team>
 178:	mov	w2, w21
 17c:	mov	x4, x0
 180:	mov	x1, x20
 184:	mov	x0, x19
 188:	ldp	x19, x20, [sp, #16]
 18c:	mov	x5, #0x0                   	// #0
 190:	ldr	x21, [sp, #32]
 194:	mov	w3, #0x0                   	// #0
 198:	ldp	x29, x30, [sp], #48
 19c:	b	0 <gomp_team_start>

00000000000001a0 <GOMP_parallel_end>:
 1a0:	stp	x29, x30, [sp, #-32]!
 1a4:	mrs	x0, tpidr_el0
 1a8:	mov	x29, sp
 1ac:	stp	x19, x20, [sp, #16]
 1b0:	adrp	x19, 0 <gomp_tls_data>
 1b4:	ldr	x19, [x19]
 1b8:	add	x19, x0, x19
 1bc:	adrp	x0, 0 <gomp_global_icv>
 1c0:	add	x0, x0, #0x0
 1c4:	ldr	x1, [x19, #80]
 1c8:	cmp	x1, #0x0
 1cc:	add	x2, x1, #0x90
 1d0:	csel	x0, x0, x2, eq  // eq = none
 1d4:	ldr	w0, [x0, #20]
 1d8:	cmn	w0, #0x1
 1dc:	b.eq	1e8 <GOMP_parallel_end+0x48>  // b.none
 1e0:	ldr	x0, [x19, #16]
 1e4:	cbnz	x0, 1f4 <GOMP_parallel_end+0x54>
 1e8:	ldp	x19, x20, [sp, #16]
 1ec:	ldp	x29, x30, [sp], #32
 1f0:	b	0 <gomp_team_end>
 1f4:	ldr	w20, [x0]
 1f8:	bl	0 <gomp_team_end>
 1fc:	cmp	w20, #0x1
 200:	b.ls	218 <GOMP_parallel_end+0x78>  // b.plast
 204:	ldr	x0, [x19, #16]
 208:	mov	x1, #0x1                   	// #1
 20c:	cbnz	x0, 224 <GOMP_parallel_end+0x84>
 210:	ldr	x0, [x19, #96]
 214:	str	x1, [x0, #24]
 218:	ldp	x19, x20, [sp, #16]
 21c:	ldp	x29, x30, [sp], #32
 220:	ret
 224:	ldr	x0, [x19, #96]
 228:	sub	x1, x1, w20, uxtw
 22c:	add	x0, x0, #0x18
 230:	ldxr	x2, [x0]
 234:	add	x2, x2, x1
 238:	stlxr	w3, x2, [x0]
 23c:	cbnz	w3, 230 <GOMP_parallel_end+0x90>
 240:	dmb	ish
 244:	b	218 <GOMP_parallel_end+0x78>

0000000000000248 <GOMP_parallel>:
 248:	stp	x29, x30, [sp, #-48]!
 24c:	mov	x29, sp
 250:	stp	x19, x20, [sp, #16]
 254:	mov	x20, x1
 258:	mov	w1, #0x0                   	// #0
 25c:	mov	x19, x0
 260:	mov	w0, w2
 264:	stp	x21, x22, [sp, #32]
 268:	mov	w22, w3
 26c:	bl	0 <gomp_resolve_num_threads>
 270:	mov	w21, w0
 274:	bl	0 <gomp_new_team>
 278:	mov	w3, w22
 27c:	mov	x4, x0
 280:	mov	w2, w21
 284:	mov	x1, x20
 288:	mov	x5, #0x0                   	// #0
 28c:	mov	x0, x19
 290:	bl	0 <gomp_team_start>
 294:	mov	x0, x20
 298:	blr	x19
 29c:	ldp	x19, x20, [sp, #16]
 2a0:	ldp	x21, x22, [sp, #32]
 2a4:	ldp	x29, x30, [sp], #48
 2a8:	b	1a0 <GOMP_parallel_end>

00000000000002ac <GOMP_parallel_reductions>:
 2ac:	stp	x29, x30, [sp, #-64]!
 2b0:	mov	x29, sp
 2b4:	stp	x19, x20, [sp, #16]
 2b8:	mov	x20, x1
 2bc:	mov	w1, #0x0                   	// #0
 2c0:	stp	x21, x22, [sp, #32]
 2c4:	mov	x22, x0
 2c8:	mov	w0, w2
 2cc:	str	x23, [sp, #48]
 2d0:	mov	w23, w3
 2d4:	bl	0 <gomp_resolve_num_threads>
 2d8:	mov	w19, w0
 2dc:	mov	w1, w0
 2e0:	ldr	x0, [x20]
 2e4:	bl	0 <gomp_parallel_reduction_register>
 2e8:	mov	x21, x0
 2ec:	mov	w0, w19
 2f0:	bl	0 <gomp_new_team>
 2f4:	mov	x5, x21
 2f8:	mov	x4, x0
 2fc:	mov	w3, w23
 300:	mov	w2, w19
 304:	mov	x1, x20
 308:	mov	x0, x22
 30c:	bl	0 <gomp_team_start>
 310:	mov	x0, x20
 314:	blr	x22
 318:	bl	1a0 <GOMP_parallel_end>
 31c:	mov	x0, x21
 320:	bl	0 <free>
 324:	mov	w0, w19
 328:	ldp	x19, x20, [sp, #16]
 32c:	ldp	x21, x22, [sp, #32]
 330:	ldr	x23, [sp, #48]
 334:	ldp	x29, x30, [sp], #64
 338:	ret

000000000000033c <GOMP_cancellation_point>:
 33c:	mov	w3, w0
 340:	adrp	x0, 0 <gomp_cancel_var>
 344:	ldrb	w0, [x0]
 348:	cbz	w0, 378 <GOMP_cancellation_point+0x3c>
 34c:	adrp	x2, 0 <gomp_tls_data>
 350:	ldr	x2, [x2]
 354:	mrs	x1, tpidr_el0
 358:	tst	w3, #0x6
 35c:	add	x2, x1, x2
 360:	ldr	x1, [x2, #16]
 364:	b.eq	37c <GOMP_cancellation_point+0x40>  // b.none
 368:	cbz	x1, 3bc <GOMP_cancellation_point+0x80>
 36c:	ldr	w0, [x1, #1332]
 370:	cmp	w0, #0x0
 374:	cset	w0, ne  // ne = any
 378:	ret
 37c:	tbz	w3, #3, 3ac <GOMP_cancellation_point+0x70>
 380:	ldr	x0, [x2, #80]
 384:	ldr	x2, [x0, #40]
 388:	cbz	x2, 3ac <GOMP_cancellation_point+0x70>
 38c:	ldrb	w0, [x2, #49]
 390:	cbnz	w0, 378 <GOMP_cancellation_point+0x3c>
 394:	ldrb	w0, [x2, #50]
 398:	cbz	w0, 3ac <GOMP_cancellation_point+0x70>
 39c:	ldr	x0, [x2]
 3a0:	cbz	x0, 3ac <GOMP_cancellation_point+0x70>
 3a4:	ldrb	w0, [x0, #49]
 3a8:	cbnz	w0, 378 <GOMP_cancellation_point+0x3c>
 3ac:	cbz	x1, 3bc <GOMP_cancellation_point+0x80>
 3b0:	ldr	w0, [x1, #132]
 3b4:	ubfx	x0, x0, #2, #1
 3b8:	b	378 <GOMP_cancellation_point+0x3c>
 3bc:	mov	w0, #0x0                   	// #0
 3c0:	b	378 <GOMP_cancellation_point+0x3c>

00000000000003c4 <GOMP_cancel>:
 3c4:	stp	x29, x30, [sp, #-48]!
 3c8:	mov	x29, sp
 3cc:	str	x21, [sp, #32]
 3d0:	and	w21, w1, #0xff
 3d4:	adrp	x1, 0 <gomp_cancel_var>
 3d8:	stp	x19, x20, [sp, #16]
 3dc:	ldrb	w1, [x1]
 3e0:	cbz	w1, 4c0 <GOMP_cancel+0xfc>
 3e4:	cbnz	w21, 3f8 <GOMP_cancel+0x34>
 3e8:	ldp	x19, x20, [sp, #16]
 3ec:	ldr	x21, [sp, #32]
 3f0:	ldp	x29, x30, [sp], #48
 3f4:	b	33c <GOMP_cancellation_point>
 3f8:	adrp	x1, 0 <gomp_tls_data>
 3fc:	ldr	x1, [x1]
 400:	mrs	x2, tpidr_el0
 404:	mov	w3, w0
 408:	tst	w0, #0x6
 40c:	add	x1, x2, x1
 410:	ldr	x0, [x1, #16]
 414:	b.eq	438 <GOMP_cancel+0x74>  // b.none
 418:	cbz	x0, 424 <GOMP_cancel+0x60>
 41c:	mov	w1, #0x1                   	// #1
 420:	str	w1, [x0, #1332]
 424:	mov	w0, w21
 428:	ldp	x19, x20, [sp, #16]
 42c:	ldr	x21, [sp, #32]
 430:	ldp	x29, x30, [sp], #48
 434:	ret
 438:	tbz	w3, #3, 4b0 <GOMP_cancel+0xec>
 43c:	ldr	x1, [x1, #80]
 440:	ldr	x20, [x1, #40]
 444:	cbz	x20, 424 <GOMP_cancel+0x60>
 448:	ldrb	w1, [x20, #50]
 44c:	cbz	w1, 45c <GOMP_cancel+0x98>
 450:	ldr	x1, [x20]
 454:	cmp	x1, #0x0
 458:	csel	x20, x20, x1, eq  // eq = none
 45c:	ldrb	w1, [x20, #49]
 460:	cbnz	w1, 424 <GOMP_cancel+0x60>
 464:	add	x19, x0, #0x500
 468:	mov	w0, #0x1                   	// #1
 46c:	ldaxr	w1, [x19]
 470:	cbnz	w1, 47c <GOMP_cancel+0xb8>
 474:	stxr	w2, w0, [x19]
 478:	cbnz	w2, 46c <GOMP_cancel+0xa8>
 47c:	cmp	w1, #0x0
 480:	b.eq	48c <GOMP_cancel+0xc8>  // b.none
 484:	mov	x0, x19
 488:	bl	0 <gomp_mutex_lock_slow>
 48c:	mov	w0, #0x1                   	// #1
 490:	strb	w0, [x20, #49]
 494:	ldxr	w0, [x19]
 498:	stlxr	w1, wzr, [x19]
 49c:	cbnz	w1, 494 <GOMP_cancel+0xd0>
 4a0:	tbz	w0, #31, 424 <GOMP_cancel+0x60>
 4a4:	mov	x0, x19
 4a8:	bl	0 <gomp_mutex_unlock_slow>
 4ac:	b	424 <GOMP_cancel+0x60>
 4b0:	mov	w1, #0x1                   	// #1
 4b4:	str	w1, [x0, #1336]
 4b8:	bl	0 <gomp_team_barrier_cancel>
 4bc:	b	424 <GOMP_cancel+0x60>
 4c0:	mov	w21, #0x0                   	// #0
 4c4:	b	424 <GOMP_cancel+0x60>

00000000000004c8 <gomp_ialias_omp_get_num_threads>:
 4c8:	adrp	x0, 0 <gomp_tls_data>
 4cc:	ldr	x0, [x0]
 4d0:	mrs	x1, tpidr_el0
 4d4:	add	x0, x1, x0
 4d8:	ldr	x0, [x0, #16]
 4dc:	cbz	x0, 4e8 <gomp_ialias_omp_get_num_threads+0x20>
 4e0:	ldr	w0, [x0]
 4e4:	ret
 4e8:	mov	w0, #0x1                   	// #1
 4ec:	b	4e4 <gomp_ialias_omp_get_num_threads+0x1c>

00000000000004f0 <gomp_ialias_omp_get_thread_num>:
 4f0:	adrp	x0, 0 <gomp_tls_data>
 4f4:	ldr	x0, [x0]
 4f8:	mrs	x1, tpidr_el0
 4fc:	add	x0, x1, x0
 500:	ldr	w0, [x0, #40]
 504:	ret

0000000000000508 <gomp_ialias_omp_in_parallel>:
 508:	adrp	x0, 0 <gomp_tls_data>
 50c:	ldr	x0, [x0]
 510:	mrs	x1, tpidr_el0
 514:	add	x0, x1, x0
 518:	ldr	w0, [x0, #48]
 51c:	cmp	w0, #0x0
 520:	cset	w0, ne  // ne = any
 524:	ret

0000000000000528 <gomp_ialias_omp_get_level>:
 528:	adrp	x0, 0 <gomp_tls_data>
 52c:	ldr	x0, [x0]
 530:	mrs	x1, tpidr_el0
 534:	add	x0, x1, x0
 538:	ldr	w0, [x0, #44]
 53c:	ret

0000000000000540 <gomp_ialias_omp_get_ancestor_thread_num>:
 540:	tbnz	w0, #31, 588 <gomp_ialias_omp_get_ancestor_thread_num+0x48>
 544:	adrp	x1, 0 <gomp_tls_data>
 548:	ldr	x1, [x1]
 54c:	mrs	x2, tpidr_el0
 550:	add	x1, x2, x1
 554:	ldr	w2, [x1, #44]
 558:	cmp	w2, w0
 55c:	b.cc	588 <gomp_ialias_omp_get_ancestor_thread_num+0x48>  // b.lo, b.ul, b.last
 560:	sub	w0, w2, w0
 564:	add	x1, x1, #0x10
 568:	cmp	w0, #0x0
 56c:	b.gt	578 <gomp_ialias_omp_get_ancestor_thread_num+0x38>
 570:	ldr	w0, [x1, #24]
 574:	ret
 578:	ldr	x1, [x1]
 57c:	sub	w0, w0, #0x1
 580:	add	x1, x1, #0x8
 584:	b	568 <gomp_ialias_omp_get_ancestor_thread_num+0x28>
 588:	mov	w0, #0xffffffff            	// #-1
 58c:	b	574 <gomp_ialias_omp_get_ancestor_thread_num+0x34>

0000000000000590 <gomp_ialias_omp_get_team_size>:
 590:	tbnz	w0, #31, 5dc <gomp_ialias_omp_get_team_size+0x4c>
 594:	adrp	x1, 0 <gomp_tls_data>
 598:	ldr	x1, [x1]
 59c:	mrs	x2, tpidr_el0
 5a0:	add	x1, x2, x1
 5a4:	ldr	w2, [x1, #44]
 5a8:	cmp	w2, w0
 5ac:	b.cc	5dc <gomp_ialias_omp_get_team_size+0x4c>  // b.lo, b.ul, b.last
 5b0:	sub	w0, w2, w0
 5b4:	add	x1, x1, #0x10
 5b8:	cmp	w0, #0x0
 5bc:	ldr	x1, [x1]
 5c0:	b.gt	5d0 <gomp_ialias_omp_get_team_size+0x40>
 5c4:	cbz	x1, 5e4 <gomp_ialias_omp_get_team_size+0x54>
 5c8:	ldr	w0, [x1]
 5cc:	ret
 5d0:	add	x1, x1, #0x8
 5d4:	sub	w0, w0, #0x1
 5d8:	b	5b8 <gomp_ialias_omp_get_team_size+0x28>
 5dc:	mov	w0, #0xffffffff            	// #-1
 5e0:	b	5cc <gomp_ialias_omp_get_team_size+0x3c>
 5e4:	mov	w0, #0x1                   	// #1
 5e8:	b	5cc <gomp_ialias_omp_get_team_size+0x3c>

00000000000005ec <gomp_ialias_omp_get_active_level>:
 5ec:	adrp	x0, 0 <gomp_tls_data>
 5f0:	ldr	x0, [x0]
 5f4:	mrs	x1, tpidr_el0
 5f8:	add	x0, x1, x0
 5fc:	ldr	w0, [x0, #48]
 600:	ret

sections.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_work_share_init_done>:
   0:	adrp	x1, 0 <gomp_tls_data>
   4:	ldr	x1, [x1]
   8:	mrs	x0, tpidr_el0
   c:	add	x1, x0, x1
  10:	ldr	x0, [x1, #32]
  14:	cbz	x0, 38 <gomp_work_share_init_done+0x38>
  18:	ldr	x2, [x1, #24]
  1c:	add	x0, x0, #0x50
  20:	ldxr	x1, [x0]
  24:	stlxr	w3, x2, [x0]
  28:	cbnz	w3, 20 <gomp_work_share_init_done+0x20>
  2c:	cmp	x1, #0x1
  30:	b.eq	38 <gomp_work_share_init_done+0x38>  // b.none
  34:	b	0 <gomp_ptrlock_set_slow>
  38:	ret

000000000000003c <GOMP_sections_start>:
  3c:	stp	x29, x30, [sp, #-48]!
  40:	mov	x29, sp
  44:	str	x19, [sp, #16]
  48:	mov	w19, w0
  4c:	mov	x0, #0x0                   	// #0
  50:	bl	0 <gomp_work_share_start>
  54:	tst	w0, #0xff
  58:	b.eq	90 <GOMP_sections_start+0x54>  // b.none
  5c:	adrp	x0, 0 <gomp_tls_data>
  60:	ldr	x0, [x0]
  64:	mrs	x1, tpidr_el0
  68:	mov	x2, #0x2                   	// #2
  6c:	add	x19, x19, #0x1
  70:	add	x0, x1, x0
  74:	movk	x2, #0x1, lsl #32
  78:	mov	x1, #0x1                   	// #1
  7c:	ldr	x0, [x0, #24]
  80:	stp	x2, x1, [x0]
  84:	stp	x19, x1, [x0, #16]
  88:	str	x1, [x0, #72]
  8c:	bl	0 <gomp_work_share_init_done>
  90:	add	x1, sp, #0x28
  94:	add	x0, sp, #0x20
  98:	bl	0 <gomp_iter_dynamic_next>
  9c:	tst	w0, #0xff
  a0:	ldr	x0, [sp, #32]
  a4:	ldr	x19, [sp, #16]
  a8:	csel	x0, x0, xzr, ne  // ne = any
  ac:	ldp	x29, x30, [sp], #48
  b0:	ret

00000000000000b4 <GOMP_sections2_start>:
  b4:	stp	x29, x30, [sp, #-80]!
  b8:	mov	x29, sp
  bc:	stp	x19, x20, [sp, #16]
  c0:	mov	x20, x1
  c4:	mov	x19, x2
  c8:	stp	x21, x22, [sp, #32]
  cc:	mov	w21, w0
  d0:	stp	x23, x24, [sp, #48]
  d4:	cbz	x1, dc <GOMP_sections2_start+0x28>
  d8:	bl	0 <gomp_workshare_taskgroup_start>
  dc:	mov	x0, #0x0                   	// #0
  e0:	bl	0 <gomp_work_share_start>
  e4:	tst	w0, #0xff
  e8:	b.eq	1ac <GOMP_sections2_start+0xf8>  // b.none
  ec:	adrp	x24, 0 <gomp_tls_data>
  f0:	ldr	x24, [x24]
  f4:	mrs	x22, tpidr_el0
  f8:	add	x21, x21, #0x1
  fc:	mov	x1, #0x2                   	// #2
 100:	add	x23, x22, x24
 104:	movk	x1, #0x1, lsl #32
 108:	ldr	x0, [x23, #24]
 10c:	str	x1, [x0]
 110:	str	x21, [x0, #16]
 114:	mov	x21, #0x1                   	// #1
 118:	str	x21, [x0, #8]
 11c:	str	x21, [x0, #24]
 120:	str	x21, [x0, #72]
 124:	cbz	x20, 144 <GOMP_sections2_start+0x90>
 128:	mov	x0, x20
 12c:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
 130:	ldr	x0, [x23, #80]
 134:	ldr	x0, [x0, #40]
 138:	strb	w21, [x0, #50]
 13c:	ldr	x0, [x23, #24]
 140:	str	x20, [x0, #88]
 144:	cbz	x19, 168 <GOMP_sections2_start+0xb4>
 148:	add	x22, x22, x24
 14c:	ldr	x0, [x19]
 150:	ldr	x20, [x22, #24]
 154:	cmp	x0, #0x20
 158:	b.ls	198 <GOMP_sections2_start+0xe4>  // b.plast
 15c:	bl	0 <gomp_malloc_cleared>
 160:	str	x0, [x20, #32]
 164:	str	x0, [x19]
 168:	bl	0 <gomp_work_share_init_done>
 16c:	add	x1, sp, #0x48
 170:	add	x0, sp, #0x40
 174:	bl	0 <gomp_iter_dynamic_next>
 178:	tst	w0, #0xff
 17c:	ldr	x0, [sp, #64]
 180:	ldp	x19, x20, [sp, #16]
 184:	csel	x0, x0, xzr, ne  // ne = any
 188:	ldp	x21, x22, [sp, #32]
 18c:	ldp	x23, x24, [sp, #48]
 190:	ldp	x29, x30, [sp], #80
 194:	ret
 198:	mov	x2, x0
 19c:	mov	w1, #0x0                   	// #0
 1a0:	add	x0, x20, #0x60
 1a4:	bl	0 <memset>
 1a8:	b	164 <GOMP_sections2_start+0xb0>
 1ac:	cbz	x20, 1d0 <GOMP_sections2_start+0x11c>
 1b0:	adrp	x0, 0 <gomp_tls_data>
 1b4:	ldr	x0, [x0]
 1b8:	mrs	x1, tpidr_el0
 1bc:	add	x0, x1, x0
 1c0:	ldr	x0, [x0, #24]
 1c4:	ldr	x1, [x0, #88]
 1c8:	mov	x0, x20
 1cc:	bl	0 <gomp_workshare_task_reduction_register>
 1d0:	cbz	x19, 16c <GOMP_sections2_start+0xb8>
 1d4:	adrp	x0, 0 <gomp_tls_data>
 1d8:	ldr	x0, [x0]
 1dc:	mrs	x1, tpidr_el0
 1e0:	add	x0, x1, x0
 1e4:	ldr	x0, [x0, #24]
 1e8:	ldr	x0, [x0, #32]
 1ec:	str	x0, [x19]
 1f0:	b	16c <GOMP_sections2_start+0xb8>

00000000000001f4 <GOMP_sections_next>:
 1f4:	stp	x29, x30, [sp, #-32]!
 1f8:	mov	x29, sp
 1fc:	add	x1, sp, #0x18
 200:	add	x0, sp, #0x10
 204:	bl	0 <gomp_iter_dynamic_next>
 208:	tst	w0, #0xff
 20c:	ldr	x0, [sp, #16]
 210:	ldp	x29, x30, [sp], #32
 214:	csel	x0, x0, xzr, ne  // ne = any
 218:	ret

000000000000021c <GOMP_parallel_sections_start>:
 21c:	stp	x29, x30, [sp, #-48]!
 220:	mov	x29, sp
 224:	stp	x19, x20, [sp, #16]
 228:	mov	w19, w3
 22c:	mov	x20, x0
 230:	stp	x21, x22, [sp, #32]
 234:	mov	x21, x1
 238:	mov	w1, w19
 23c:	mov	w0, w2
 240:	bl	0 <gomp_resolve_num_threads>
 244:	mov	w22, w0
 248:	add	x19, x19, #0x1
 24c:	bl	0 <gomp_new_team>
 250:	mov	x4, x0
 254:	mov	x1, #0x2                   	// #2
 258:	mov	x0, #0x1                   	// #1
 25c:	movk	x1, #0x1, lsl #32
 260:	mov	w2, w22
 264:	stp	x1, x0, [x4, #256]
 268:	mov	x1, x21
 26c:	mov	x5, #0x0                   	// #0
 270:	stp	x19, x0, [x4, #272]
 274:	mov	w3, #0x0                   	// #0
 278:	str	x0, [x4, #328]
 27c:	mov	x0, x20
 280:	ldp	x19, x20, [sp, #16]
 284:	ldp	x21, x22, [sp, #32]
 288:	ldp	x29, x30, [sp], #48
 28c:	b	0 <gomp_team_start>

0000000000000290 <GOMP_parallel_sections>:
 290:	stp	x29, x30, [sp, #-64]!
 294:	mov	x29, sp
 298:	stp	x19, x20, [sp, #16]
 29c:	mov	w19, w3
 2a0:	mov	x20, x0
 2a4:	stp	x21, x22, [sp, #32]
 2a8:	mov	x21, x1
 2ac:	mov	w1, w19
 2b0:	mov	w0, w2
 2b4:	str	x23, [sp, #48]
 2b8:	mov	w23, w4
 2bc:	bl	0 <gomp_resolve_num_threads>
 2c0:	mov	w22, w0
 2c4:	bl	0 <gomp_new_team>
 2c8:	mov	x4, x0
 2cc:	mov	x2, #0x2                   	// #2
 2d0:	movk	x2, #0x1, lsl #32
 2d4:	mov	w3, w23
 2d8:	mov	x1, x21
 2dc:	mov	x0, #0x1                   	// #1
 2e0:	add	x19, x19, #0x1
 2e4:	stp	x2, x0, [x4, #256]
 2e8:	mov	w2, w22
 2ec:	stp	x19, x0, [x4, #272]
 2f0:	mov	x5, #0x0                   	// #0
 2f4:	str	x0, [x4, #328]
 2f8:	mov	x0, x20
 2fc:	bl	0 <gomp_team_start>
 300:	mov	x0, x21
 304:	blr	x20
 308:	ldp	x19, x20, [sp, #16]
 30c:	ldp	x21, x22, [sp, #32]
 310:	ldr	x23, [sp, #48]
 314:	ldp	x29, x30, [sp], #64
 318:	b	0 <gomp_ialias_GOMP_parallel_end>

000000000000031c <GOMP_sections_end>:
 31c:	b	0 <gomp_work_share_end>

0000000000000320 <GOMP_sections_end_cancel>:
 320:	b	0 <gomp_work_share_end_cancel>

0000000000000324 <GOMP_sections_end_nowait>:
 324:	b	0 <gomp_work_share_end_nowait>

single.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_single_start>:
   0:	adrp	x1, 0 <gomp_tls_data>
   4:	ldr	x1, [x1]
   8:	mrs	x0, tpidr_el0
   c:	add	x1, x0, x1
  10:	ldr	x0, [x1, #16]
  14:	cbz	x0, 48 <GOMP_single_start+0x48>
  18:	ldr	x2, [x1, #64]
  1c:	add	x0, x0, #0x70
  20:	add	x3, x2, #0x1
  24:	str	x3, [x1, #64]
  28:	ldxr	x1, [x0]
  2c:	cmp	x1, x2
  30:	b.ne	3c <GOMP_single_start+0x3c>  // b.any
  34:	stlxr	w4, x3, [x0]
  38:	cbnz	w4, 28 <GOMP_single_start+0x28>
  3c:	cset	w0, eq  // eq = none
  40:	dmb	ish
  44:	ret
  48:	mov	w0, #0x1                   	// #1
  4c:	b	44 <GOMP_single_start+0x44>

0000000000000050 <GOMP_single_copy_start>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	x0, #0x0                   	// #0
  58:	mov	x29, sp
  5c:	str	x19, [sp, #16]
  60:	bl	0 <gomp_work_share_start>
  64:	tst	w0, #0xff
  68:	adrp	x0, 0 <gomp_tls_data>
  6c:	ldr	x0, [x0]
  70:	mrs	x19, tpidr_el0
  74:	add	x19, x19, x0
  78:	b.eq	bc <GOMP_single_copy_start+0x6c>  // b.none
  7c:	ldr	x0, [x19, #32]
  80:	cbnz	x0, 98 <GOMP_single_copy_start+0x48>
  84:	mov	x19, #0x0                   	// #0
  88:	mov	x0, x19
  8c:	ldr	x19, [sp, #16]
  90:	ldp	x29, x30, [sp], #32
  94:	ret
  98:	ldr	x2, [x19, #24]
  9c:	add	x0, x0, #0x50
  a0:	ldxr	x1, [x0]
  a4:	stlxr	w3, x2, [x0]
  a8:	cbnz	w3, a0 <GOMP_single_copy_start+0x50>
  ac:	cmp	x1, #0x1
  b0:	b.eq	84 <GOMP_single_copy_start+0x34>  // b.none
  b4:	bl	0 <gomp_ptrlock_set_slow>
  b8:	b	84 <GOMP_single_copy_start+0x34>
  bc:	ldr	x0, [x19, #16]
  c0:	add	x0, x0, #0x80
  c4:	bl	0 <gomp_team_barrier_wait>
  c8:	ldr	x0, [x19, #24]
  cc:	ldr	x19, [x0, #72]
  d0:	bl	0 <gomp_work_share_end_nowait>
  d4:	b	88 <GOMP_single_copy_start+0x38>

00000000000000d8 <GOMP_single_copy_end>:
  d8:	adrp	x1, 0 <gomp_tls_data>
  dc:	ldr	x1, [x1]
  e0:	mrs	x2, tpidr_el0
  e4:	add	x1, x2, x1
  e8:	ldr	x2, [x1, #16]
  ec:	cbz	x2, 10c <GOMP_single_copy_end+0x34>
  f0:	stp	x29, x30, [sp, #-16]!
  f4:	mov	x29, sp
  f8:	ldr	x1, [x1, #24]
  fc:	str	x0, [x1, #72]
 100:	add	x0, x2, #0x80
 104:	bl	0 <gomp_team_barrier_wait>
 108:	ldp	x29, x30, [sp], #16
 10c:	b	0 <gomp_work_share_end_nowait>

task.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <htab_mod_m2>:
       0:	ldr	w3, [x1, #24]
       4:	adrp	x4, 0 <htab_mod_m2>
       8:	add	x4, x4, #0x0
       c:	add	w5, w0, #0x1
      10:	lsl	x6, x3, #4
      14:	add	x3, x4, x3, lsl #4
      18:	ldr	w1, [x3, #8]
      1c:	umull	x1, w0, w1
      20:	lsr	x2, x1, #32
      24:	sub	w1, w0, w2
      28:	ldr	w0, [x3, #12]
      2c:	add	w1, w2, w1, lsr #1
      30:	lsr	w1, w1, w0
      34:	ldr	w0, [x4, x6]
      38:	sub	w0, w0, #0x2
      3c:	msub	w0, w1, w0, w5
      40:	ret

0000000000000044 <priority_list_upgrade_task>:
      44:	ldr	x2, [x0, #16]
      48:	cbz	x2, 78 <priority_list_upgrade_task+0x34>
      4c:	ldp	x4, x3, [x1]
      50:	str	x4, [x3]
      54:	ldr	x4, [x1]
      58:	str	x3, [x4, #8]
      5c:	ldr	x3, [x2]
      60:	stp	x3, x2, [x1]
      64:	str	x1, [x2]
      68:	ldr	x2, [x1]
      6c:	str	x1, [x2, #8]
      70:	str	x1, [x0, #16]
      74:	ret
      78:	ldr	x2, [x0, #8]
      7c:	cmp	x2, x1
      80:	b.eq	70 <priority_list_upgrade_task+0x2c>  // b.none
      84:	ldp	x3, x4, [x1]
      88:	str	x3, [x4]
      8c:	str	x4, [x3, #8]
      90:	ldr	x3, [x2, #8]
      94:	stp	x2, x3, [x1]
      98:	str	x1, [x0, #8]
      9c:	str	x1, [x3]
      a0:	b	68 <priority_list_upgrade_task+0x24>

00000000000000a4 <priority_list_downgrade_task>:
      a4:	ubfiz	x0, x0, #4, #32
      a8:	add	x0, x0, #0x60
      ac:	ldr	x4, [x1, #8]
      b0:	add	x3, x2, x0
      b4:	ldr	x5, [x2, x0]
      b8:	cmp	x4, x3
      bc:	b.ne	104 <priority_list_downgrade_task+0x60>  // b.any
      c0:	str	x5, [x1, #8]
      c4:	ldrb	w2, [x2, #207]
      c8:	cbz	w2, 100 <priority_list_downgrade_task+0x5c>
      cc:	ldr	x2, [x1, #16]
      d0:	cmp	x2, x3
      d4:	b.ne	100 <priority_list_downgrade_task+0x5c>  // b.any
      d8:	ldr	x2, [x3, #8]
      dc:	cmp	x2, x3
      e0:	b.eq	144 <priority_list_downgrade_task+0xa0>  // b.none
      e4:	sub	x0, x2, x0
      e8:	ldr	w3, [x0, #200]
      ec:	cmp	w3, #0x2
      f0:	b.ne	144 <priority_list_downgrade_task+0xa0>  // b.any
      f4:	ldrb	w0, [x0, #207]
      f8:	cbz	w0, 144 <priority_list_downgrade_task+0xa0>
      fc:	str	x2, [x1, #16]
     100:	ret
     104:	cmp	x4, x5
     108:	b.eq	c4 <priority_list_downgrade_task+0x20>  // b.none
     10c:	sub	x6, x5, x0
     110:	ldr	w6, [x6, #200]
     114:	cmp	w6, #0x2
     118:	b.ne	c4 <priority_list_downgrade_task+0x20>  // b.any
     11c:	ldr	x6, [x3, #8]
     120:	str	x5, [x6]
     124:	str	x6, [x5, #8]
     128:	str	x4, [x2, x0]
     12c:	ldr	x5, [x4, #8]
     130:	str	x5, [x3, #8]
     134:	ldr	x5, [x4, #8]
     138:	str	x3, [x5]
     13c:	str	x3, [x4, #8]
     140:	b	c4 <priority_list_downgrade_task+0x20>
     144:	str	xzr, [x1, #16]
     148:	b	100 <priority_list_downgrade_task+0x5c>

000000000000014c <gomp_finish_task>:
     14c:	ldr	x0, [x0, #56]
     150:	cbz	x0, 158 <gomp_finish_task+0xc>
     154:	b	0 <free>
     158:	ret

000000000000015c <gomp_taskgroup_init>:
     15c:	stp	x29, x30, [sp, #-32]!
     160:	mov	x29, sp
     164:	str	x19, [sp, #16]
     168:	mov	x19, x0
     16c:	mov	x0, #0x40                  	// #64
     170:	bl	0 <gomp_malloc>
     174:	mov	x1, x0
     178:	str	x19, [x1], #8
     17c:	str	xzr, [x0, #8]
     180:	stp	xzr, xzr, [x1, #16]
     184:	cbz	x19, 18c <gomp_taskgroup_init+0x30>
     188:	ldr	x19, [x19, #40]
     18c:	str	x19, [x0, #40]
     190:	strh	wzr, [x0, #48]
     194:	strb	wzr, [x0, #50]
     198:	str	wzr, [x0, #52]
     19c:	str	xzr, [x0, #56]
     1a0:	ldr	x19, [sp, #16]
     1a4:	ldp	x29, x30, [sp], #32
     1a8:	ret

00000000000001ac <gomp_mutex_lock>:
     1ac:	mov	x2, x0
     1b0:	mov	w3, #0x1                   	// #1
     1b4:	ldaxr	w1, [x2]
     1b8:	cbnz	w1, 1c4 <gomp_mutex_lock+0x18>
     1bc:	stxr	w4, w3, [x2]
     1c0:	cbnz	w4, 1b4 <gomp_mutex_lock+0x8>
     1c4:	cmp	w1, #0x0
     1c8:	b.eq	1d0 <gomp_mutex_lock+0x24>  // b.none
     1cc:	b	0 <gomp_mutex_lock_slow>
     1d0:	ret

00000000000001d4 <htab_create>:
     1d4:	stp	x29, x30, [sp, #-48]!
     1d8:	adrp	x3, 0 <htab_mod_m2>
     1dc:	add	x3, x3, #0x0
     1e0:	mov	x29, sp
     1e4:	mov	w2, #0x0                   	// #0
     1e8:	stp	x19, x20, [sp, #16]
     1ec:	mov	w20, #0x1e                  	// #30
     1f0:	stp	x21, x22, [sp, #32]
     1f4:	cmp	w20, w2
     1f8:	b.ne	210 <htab_create+0x3c>  // b.any
     1fc:	ubfiz	x1, x20, #4, #32
     200:	ldr	w22, [x3, x1]
     204:	cmp	x0, x22
     208:	b.ls	23c <htab_create+0x68>  // b.plast
     20c:	bl	0 <abort>
     210:	sub	w1, w20, w2
     214:	add	w4, w2, w1, lsr #1
     218:	add	w1, w2, w1, lsr #1
     21c:	lsl	x1, x1, #4
     220:	ldr	w1, [x3, x1]
     224:	cmp	x0, x1
     228:	b.ls	234 <htab_create+0x60>  // b.plast
     22c:	add	w2, w4, #0x1
     230:	b	1f4 <htab_create+0x20>
     234:	mov	w20, w4
     238:	b	1f4 <htab_create+0x20>
     23c:	add	x21, x22, #0x4
     240:	lsl	x21, x21, #3
     244:	mov	x0, x21
     248:	bl	0 <gomp_malloc>
     24c:	mov	x19, x0
     250:	sub	x2, x21, #0x20
     254:	mov	w1, #0x0                   	// #0
     258:	add	x0, x0, #0x20
     25c:	stp	x22, xzr, [x19]
     260:	str	xzr, [x19, #16]
     264:	str	w20, [x19, #24]
     268:	bl	0 <memset>
     26c:	mov	x0, x19
     270:	ldp	x19, x20, [sp, #16]
     274:	ldp	x21, x22, [sp, #32]
     278:	ldp	x29, x30, [sp], #48
     27c:	ret

0000000000000280 <priority_queue_lookup_priority>:
     280:	ldr	x2, [x0]
     284:	cbz	x2, 2a4 <priority_queue_lookup_priority+0x24>
     288:	stp	x29, x30, [sp, #-48]!
     28c:	mov	x29, sp
     290:	str	w1, [sp, #24]
     294:	add	x1, sp, #0x18
     298:	bl	0 <prio_splay_tree_lookup>
     29c:	ldp	x29, x30, [sp], #48
     2a0:	ret
     2a4:	mov	x0, x2
     2a8:	ret

00000000000002ac <gomp_mutex_unlock>:
     2ac:	mov	x1, x0
     2b0:	ldxr	w2, [x1]
     2b4:	stlxr	w3, wzr, [x1]
     2b8:	cbnz	w3, 2b0 <gomp_mutex_unlock+0x4>
     2bc:	tbz	w2, #31, 2c4 <gomp_mutex_unlock+0x18>
     2c0:	b	0 <gomp_mutex_unlock_slow>
     2c4:	ret

00000000000002c8 <gomp_sem_post>:
     2c8:	ldr	w1, [x0]
     2cc:	add	w2, w1, #0x1
     2d0:	and	w2, w2, #0x7fffffff
     2d4:	ldxr	w3, [x0]
     2d8:	cmp	w3, w1
     2dc:	b.ne	2e8 <gomp_sem_post+0x20>  // b.any
     2e0:	stlxr	w4, w2, [x0]
     2e4:	cmp	w4, #0x0
     2e8:	mov	w1, w3
     2ec:	b.ne	2cc <gomp_sem_post+0x4>  // b.any
     2f0:	tbz	w3, #31, 2f8 <gomp_sem_post+0x30>
     2f4:	b	0 <gomp_sem_post_slow>
     2f8:	ret

00000000000002fc <gomp_sem_wait>:
     2fc:	ldr	w1, [x0]
     300:	tst	x1, #0x7fffffff
     304:	b.ne	30c <gomp_sem_wait+0x10>  // b.any
     308:	b	0 <gomp_sem_wait_slow>
     30c:	sub	w3, w1, #0x1
     310:	ldaxr	w2, [x0]
     314:	cmp	w2, w1
     318:	b.ne	324 <gomp_sem_wait+0x28>  // b.any
     31c:	stxr	w4, w3, [x0]
     320:	cmp	w4, #0x0
     324:	mov	w1, w2
     328:	b.ne	300 <gomp_sem_wait+0x4>  // b.any
     32c:	ret

0000000000000330 <priority_list_insert.isra.0>:
     330:	ldr	x7, [x1, #8]
     334:	ubfiz	x0, x0, #4, #32
     338:	add	x0, x0, #0x60
     33c:	and	w4, w4, #0xff
     340:	and	w5, w5, #0xff
     344:	add	x6, x2, x0
     348:	cbz	x7, 3ac <priority_list_insert.isra.0+0x7c>
     34c:	bic	x8, x4, x3
     350:	tbz	w8, #0, 394 <priority_list_insert.isra.0+0x64>
     354:	ldr	x8, [x1, #16]
     358:	cbz	x8, 394 <priority_list_insert.isra.0+0x64>
     35c:	cbnz	w5, 394 <priority_list_insert.isra.0+0x64>
     360:	ldr	x3, [x8]
     364:	str	x3, [x2, x0]
     368:	str	x8, [x6, #8]
     36c:	ldr	x0, [x2, x0]
     370:	str	x6, [x0, #8]
     374:	ldr	x0, [x6, #8]
     378:	str	x6, [x0]
     37c:	cbz	w4, 390 <priority_list_insert.isra.0+0x60>
     380:	ldr	x0, [x1, #16]
     384:	cbnz	x0, 390 <priority_list_insert.isra.0+0x60>
     388:	cbz	w5, 390 <priority_list_insert.isra.0+0x60>
     38c:	str	x6, [x1, #16]
     390:	ret
     394:	str	x7, [x2, x0]
     398:	ldr	x7, [x7, #8]
     39c:	str	x7, [x6, #8]
     3a0:	cbnz	w3, 36c <priority_list_insert.isra.0+0x3c>
     3a4:	str	x6, [x1, #8]
     3a8:	b	36c <priority_list_insert.isra.0+0x3c>
     3ac:	str	x6, [x2, x0]
     3b0:	str	x6, [x6, #8]
     3b4:	str	x6, [x1, #8]
     3b8:	b	37c <priority_list_insert.isra.0+0x4c>

00000000000003bc <priority_queue_insert>:
     3bc:	stp	x29, x30, [sp, #-80]!
     3c0:	mov	x29, sp
     3c4:	stp	x25, x26, [sp, #64]
     3c8:	mov	x26, x1
     3cc:	and	w25, w6, #0xff
     3d0:	ldr	x1, [x1]
     3d4:	stp	x19, x20, [sp, #16]
     3d8:	mov	w20, w3
     3dc:	stp	x21, x22, [sp, #32]
     3e0:	mov	w22, w0
     3e4:	mov	w21, w4
     3e8:	stp	x23, x24, [sp, #48]
     3ec:	mov	x23, x2
     3f0:	and	w24, w5, #0xff
     3f4:	cbnz	x1, 438 <priority_queue_insert+0x7c>
     3f8:	cmp	w3, #0x0
     3fc:	b.le	4a0 <priority_queue_insert+0xe4>
     400:	ldr	x0, [x26, #16]
     404:	cbz	x0, 438 <priority_queue_insert+0x7c>
     408:	mov	x0, #0x28                  	// #40
     40c:	bl	0 <gomp_malloc>
     410:	mov	x1, x0
     414:	ldr	x0, [x26, #16]
     418:	str	x0, [x1, #8]
     41c:	ldr	x0, [x26, #24]
     420:	str	wzr, [x1]
     424:	str	x0, [x1, #16]
     428:	mov	x0, x26
     42c:	stp	xzr, xzr, [x1, #24]
     430:	bl	0 <prio_splay_tree_insert>
     434:	str	xzr, [x26, #16]
     438:	mov	w1, w20
     43c:	mov	x0, x26
     440:	bl	280 <priority_queue_lookup_priority>
     444:	mov	x1, x0
     448:	cbnz	x0, 474 <priority_queue_insert+0xb8>
     44c:	mov	x0, #0x28                  	// #40
     450:	bl	0 <gomp_malloc>
     454:	mov	x19, x0
     458:	mov	x1, x0
     45c:	mov	x0, x26
     460:	str	w20, [x19]
     464:	stp	xzr, xzr, [x19, #8]
     468:	stp	xzr, xzr, [x19, #24]
     46c:	bl	0 <prio_splay_tree_insert>
     470:	mov	x1, x19
     474:	mov	w5, w25
     478:	mov	w4, w24
     47c:	mov	w3, w21
     480:	mov	x2, x23
     484:	mov	w0, w22
     488:	ldp	x19, x20, [sp, #16]
     48c:	ldp	x21, x22, [sp, #32]
     490:	ldp	x23, x24, [sp, #48]
     494:	ldp	x25, x26, [sp, #64]
     498:	ldp	x29, x30, [sp], #80
     49c:	b	330 <priority_list_insert.isra.0>
     4a0:	mov	w5, w25
     4a4:	mov	w4, w24
     4a8:	mov	w3, w21
     4ac:	add	x1, x26, #0x8
     4b0:	b	488 <priority_queue_insert+0xcc>

00000000000004b4 <priority_queue_next_task>:
     4b4:	stp	x29, x30, [sp, #-32]!
     4b8:	mov	x29, sp
     4bc:	ldr	x6, [x1]
     4c0:	stp	x19, x20, [sp, #16]
     4c4:	mov	w19, w0
     4c8:	mov	x20, x1
     4cc:	cbz	x6, 4f8 <priority_queue_next_task+0x44>
     4d0:	bl	0 <priority_tree_next_task>
     4d4:	cbnz	x0, 4ec <priority_queue_next_task+0x38>
     4d8:	ldr	x1, [x20]
     4dc:	ubfiz	x0, x19, #4, #32
     4e0:	add	x0, x0, #0x60
     4e4:	ldr	x19, [x1, #8]
     4e8:	sub	x0, x19, x0
     4ec:	ldp	x19, x20, [sp, #16]
     4f0:	ldp	x29, x30, [sp], #32
     4f4:	ret
     4f8:	mov	w0, #0x1                   	// #1
     4fc:	strb	w0, [x4]
     500:	ubfiz	x0, x19, #4, #32
     504:	add	x0, x0, #0x60
     508:	ldr	x19, [x1, #16]
     50c:	b	4e8 <priority_queue_next_task+0x34>

0000000000000510 <gomp_clear_parent_in_tree>:
     510:	stp	x29, x30, [sp, #-48]!
     514:	mov	x29, sp
     518:	stp	x19, x20, [sp, #16]
     51c:	mov	x19, x0
     520:	mov	x0, x1
     524:	str	x21, [sp, #32]
     528:	cbz	x0, 564 <gomp_clear_parent_in_tree+0x54>
     52c:	ldr	x3, [x0, #8]
     530:	ldp	x21, x20, [x0, #24]
     534:	cbz	x3, 54c <gomp_clear_parent_in_tree+0x3c>
     538:	mov	x2, x3
     53c:	stur	xzr, [x2, #-112]
     540:	ldr	x2, [x2]
     544:	cmp	x3, x2
     548:	b.ne	53c <gomp_clear_parent_in_tree+0x2c>  // b.any
     54c:	bl	0 <free>
     550:	mov	x0, x19
     554:	mov	x1, x21
     558:	bl	510 <gomp_clear_parent_in_tree>
     55c:	mov	x0, x20
     560:	b	528 <gomp_clear_parent_in_tree+0x18>
     564:	ldp	x19, x20, [sp, #16]
     568:	ldr	x21, [sp, #32]
     56c:	ldp	x29, x30, [sp], #48
     570:	ret

0000000000000574 <gomp_clear_parent>:
     574:	stp	x29, x30, [sp, #-32]!
     578:	mov	x29, sp
     57c:	ldr	x1, [x0]
     580:	str	x19, [sp, #16]
     584:	mov	x19, x0
     588:	cbz	x1, 5a0 <gomp_clear_parent+0x2c>
     58c:	bl	510 <gomp_clear_parent_in_tree>
     590:	str	xzr, [x19]
     594:	ldr	x19, [sp, #16]
     598:	ldp	x29, x30, [sp], #32
     59c:	ret
     5a0:	ldr	x1, [x0, #16]
     5a4:	cbz	x1, 594 <gomp_clear_parent+0x20>
     5a8:	mov	x0, x1
     5ac:	stur	xzr, [x0, #-112]
     5b0:	ldr	x0, [x0]
     5b4:	cmp	x1, x0
     5b8:	b.ne	5ac <gomp_clear_parent+0x38>  // b.any
     5bc:	b	594 <gomp_clear_parent+0x20>

00000000000005c0 <htab_mod>:
     5c0:	ldr	w3, [x1, #24]
     5c4:	adrp	x4, 0 <htab_mod_m2>
     5c8:	add	x4, x4, #0x0
     5cc:	lsl	x5, x3, #4
     5d0:	add	x3, x4, x3, lsl #4
     5d4:	ldr	w1, [x3, #4]
     5d8:	umull	x1, w0, w1
     5dc:	lsr	x1, x1, #32
     5e0:	sub	w2, w0, w1
     5e4:	add	w1, w1, w2, lsr #1
     5e8:	ldr	w2, [x3, #12]
     5ec:	lsr	w1, w1, w2
     5f0:	ldr	w2, [x4, x5]
     5f4:	msub	w0, w1, w2, w0
     5f8:	ret

00000000000005fc <htab_find>:
     5fc:	stp	x29, x30, [sp, #-16]!
     600:	mov	x8, x0
     604:	mov	x29, sp
     608:	ldr	x9, [x1]
     60c:	mov	x1, x0
     610:	eor	x6, x9, x9, lsr #32
     614:	mov	w0, w6
     618:	bl	5c0 <htab_mod>
     61c:	mov	w7, w0
     620:	add	x0, x8, w7, uxtw #3
     624:	ldr	x0, [x0, #32]
     628:	cbnz	x0, 638 <htab_find+0x3c>
     62c:	mov	x0, #0x0                   	// #0
     630:	ldp	x29, x30, [sp], #16
     634:	ret
     638:	cmp	x0, #0x1
     63c:	b.eq	64c <htab_find+0x50>  // b.none
     640:	ldr	x1, [x0]
     644:	cmp	x9, x1
     648:	b.eq	630 <htab_find+0x34>  // b.none
     64c:	ldr	x10, [x8]
     650:	mov	x1, x8
     654:	mov	w0, w6
     658:	bl	0 <htab_mod_m2>
     65c:	mov	w1, w0
     660:	add	w7, w7, w1
     664:	cmp	x10, w7, uxtw
     668:	b.hi	670 <htab_find+0x74>  // b.pmore
     66c:	sub	w7, w7, w10
     670:	add	x0, x8, w7, uxtw #3
     674:	ldr	x0, [x0, #32]
     678:	cbz	x0, 62c <htab_find+0x30>
     67c:	cmp	x0, #0x1
     680:	b.eq	660 <htab_find+0x64>  // b.none
     684:	ldr	x2, [x0]
     688:	cmp	x9, x2
     68c:	b.ne	660 <htab_find+0x64>  // b.any
     690:	b	630 <htab_find+0x34>

0000000000000694 <find_empty_slot_for_expand>:
     694:	mov	x6, x0
     698:	mov	w9, w1
     69c:	stp	x29, x30, [sp, #-16]!
     6a0:	mov	x1, x0
     6a4:	mov	w0, w9
     6a8:	mov	x29, sp
     6ac:	bl	5c0 <htab_mod>
     6b0:	mov	w7, w0
     6b4:	add	x8, x6, #0x20
     6b8:	ubfiz	x1, x7, #3, #32
     6bc:	add	x0, x8, x1
     6c0:	ldr	x1, [x8, x1]
     6c4:	cbz	x1, 714 <find_empty_slot_for_expand+0x80>
     6c8:	cmp	x1, #0x1
     6cc:	b.ne	6d4 <find_empty_slot_for_expand+0x40>  // b.any
     6d0:	bl	0 <abort>
     6d4:	ldr	x10, [x6]
     6d8:	mov	x1, x6
     6dc:	mov	w0, w9
     6e0:	bl	0 <htab_mod_m2>
     6e4:	mov	w1, w0
     6e8:	add	w7, w7, w1
     6ec:	cmp	x10, w7, uxtw
     6f0:	b.hi	6f8 <find_empty_slot_for_expand+0x64>  // b.pmore
     6f4:	sub	w7, w7, w10
     6f8:	ubfiz	x2, x7, #3, #32
     6fc:	add	x0, x8, x2
     700:	ldr	x2, [x8, x2]
     704:	cbz	x2, 714 <find_empty_slot_for_expand+0x80>
     708:	cmp	x2, #0x1
     70c:	b.ne	6e8 <find_empty_slot_for_expand+0x54>  // b.any
     710:	b	6d0 <find_empty_slot_for_expand+0x3c>
     714:	ldp	x29, x30, [sp], #16
     718:	ret

000000000000071c <htab_find_slot>:
     71c:	stp	x29, x30, [sp, #-96]!
     720:	cmp	w2, #0x1
     724:	mov	x29, sp
     728:	stp	x19, x20, [sp, #16]
     72c:	mov	w20, w2
     730:	ldr	x19, [x0]
     734:	stp	x21, x22, [sp, #32]
     738:	mov	x21, x1
     73c:	ldr	x22, [x1]
     740:	stp	x23, x24, [sp, #48]
     744:	stp	x25, x26, [sp, #64]
     748:	eor	x22, x22, x22, lsr #32
     74c:	ldr	x9, [x19]
     750:	str	x27, [sp, #80]
     754:	b.ne	7ec <htab_find_slot+0xd0>  // b.any
     758:	ldr	x1, [x19, #8]
     75c:	mov	x24, x0
     760:	add	x0, x9, x9, lsl #1
     764:	cmp	x0, x1, lsl #2
     768:	b.hi	7ec <htab_find_slot+0xd0>  // b.pmore
     76c:	ldr	x0, [x19, #16]
     770:	add	x26, x19, #0x20
     774:	add	x25, x26, x9, lsl #3
     778:	sub	x1, x1, x0
     77c:	lsl	x0, x1, #1
     780:	cmp	x9, x1, lsl #1
     784:	b.cc	798 <htab_find_slot+0x7c>  // b.lo, b.ul, b.last
     788:	cmp	x9, x1, lsl #3
     78c:	b.ls	85c <htab_find_slot+0x140>  // b.plast
     790:	cmp	x9, #0x20
     794:	b.ls	85c <htab_find_slot+0x140>  // b.plast
     798:	bl	1d4 <htab_create>
     79c:	mov	x23, x0
     7a0:	ldp	x0, x1, [x19, #8]
     7a4:	sub	x0, x0, x1
     7a8:	str	x0, [x23, #8]
     7ac:	ldr	x27, [x26]
     7b0:	cmp	x27, #0x1
     7b4:	b.ls	7cc <htab_find_slot+0xb0>  // b.plast
     7b8:	ldr	x1, [x27]
     7bc:	mov	x0, x23
     7c0:	eor	x1, x1, x1, lsr #32
     7c4:	bl	694 <find_empty_slot_for_expand>
     7c8:	str	x27, [x0]
     7cc:	add	x26, x26, #0x8
     7d0:	cmp	x25, x26
     7d4:	b.hi	7ac <htab_find_slot+0x90>  // b.pmore
     7d8:	mov	x0, x19
     7dc:	mov	x19, x23
     7e0:	bl	0 <free>
     7e4:	ldr	x9, [x23]
     7e8:	str	x23, [x24]
     7ec:	mov	x1, x19
     7f0:	mov	w0, w22
     7f4:	bl	5c0 <htab_mod>
     7f8:	mov	w8, w0
     7fc:	mov	x7, x8
     800:	add	x8, x8, #0x4
     804:	ldr	x0, [x19, x8, lsl #3]
     808:	cbz	x0, 8d4 <htab_find_slot+0x1b8>
     80c:	cmp	x0, #0x1
     810:	b.ne	864 <htab_find_slot+0x148>  // b.any
     814:	add	x8, x19, x8, lsl #3
     818:	mov	x1, x19
     81c:	mov	w0, w22
     820:	bl	0 <htab_mod_m2>
     824:	mov	w2, w0
     828:	add	w7, w7, w2
     82c:	cmp	x9, w7, uxtw
     830:	b.hi	838 <htab_find_slot+0x11c>  // b.pmore
     834:	sub	w7, w7, w9
     838:	mov	w1, w7
     83c:	add	x1, x1, #0x4
     840:	ldr	x0, [x19, x1, lsl #3]
     844:	cbz	x0, 8b4 <htab_find_slot+0x198>
     848:	cmp	x0, #0x1
     84c:	b.ne	89c <htab_find_slot+0x180>  // b.any
     850:	cbnz	x8, 828 <htab_find_slot+0x10c>
     854:	add	x8, x19, x1, lsl #3
     858:	b	828 <htab_find_slot+0x10c>
     85c:	sub	x0, x9, #0x1
     860:	b	798 <htab_find_slot+0x7c>
     864:	ldr	x1, [x0]
     868:	ldr	x0, [x21]
     86c:	cmp	x1, x0
     870:	b.ne	894 <htab_find_slot+0x178>  // b.any
     874:	add	x0, x19, x8, lsl #3
     878:	ldp	x19, x20, [sp, #16]
     87c:	ldp	x21, x22, [sp, #32]
     880:	ldp	x23, x24, [sp, #48]
     884:	ldp	x25, x26, [sp, #64]
     888:	ldr	x27, [sp, #80]
     88c:	ldp	x29, x30, [sp], #96
     890:	ret
     894:	mov	x8, #0x0                   	// #0
     898:	b	818 <htab_find_slot+0xfc>
     89c:	ldr	x3, [x0]
     8a0:	ldr	x0, [x21]
     8a4:	cmp	x3, x0
     8a8:	b.ne	828 <htab_find_slot+0x10c>  // b.any
     8ac:	add	x0, x19, x1, lsl #3
     8b0:	b	878 <htab_find_slot+0x15c>
     8b4:	cbz	w20, 878 <htab_find_slot+0x15c>
     8b8:	cbz	x8, 8d8 <htab_find_slot+0x1bc>
     8bc:	ldr	x0, [x19, #16]
     8c0:	sub	x0, x0, #0x1
     8c4:	str	x0, [x19, #16]
     8c8:	mov	x0, x8
     8cc:	str	xzr, [x8]
     8d0:	b	878 <htab_find_slot+0x15c>
     8d4:	cbz	w20, 878 <htab_find_slot+0x15c>
     8d8:	ldr	x0, [x19, #8]
     8dc:	add	x0, x0, #0x1
     8e0:	str	x0, [x19, #8]
     8e4:	ubfiz	x0, x7, #3, #32
     8e8:	add	x0, x0, #0x20
     8ec:	add	x0, x19, x0
     8f0:	b	878 <htab_find_slot+0x15c>

00000000000008f4 <gomp_task_handle_depend>:
     8f4:	stp	x29, x30, [sp, #-96]!
     8f8:	mov	x29, sp
     8fc:	stp	x21, x22, [sp, #32]
     900:	mov	x22, x1
     904:	ldp	x1, x5, [x2]
     908:	stp	x19, x20, [sp, #16]
     90c:	mov	x20, x0
     910:	stp	x23, x24, [sp, #48]
     914:	stp	x25, x26, [sp, #64]
     918:	stp	x27, x28, [sp, #80]
     91c:	cbz	x1, 9a8 <gomp_task_handle_depend+0xb4>
     920:	add	x0, x0, #0xd0
     924:	add	x2, x2, #0x10
     928:	mov	x26, #0x0                   	// #0
     92c:	cmp	x5, x26
     930:	add	x0, x0, #0x28
     934:	ldr	x3, [x2, x26, lsl #3]
     938:	stur	x3, [x0, #-40]
     93c:	cset	w3, ls  // ls = plast
     940:	sturb	w3, [x0, #-8]
     944:	add	x26, x26, #0x1
     948:	cmp	x1, x26
     94c:	b.ne	92c <gomp_task_handle_depend+0x38>  // b.any
     950:	ldr	x0, [x22, #56]
     954:	stp	x26, xzr, [x20, #72]
     958:	cbnz	x0, 974 <gomp_task_handle_depend+0x80>
     95c:	lsl	x0, x26, #1
     960:	mov	x1, #0xc                   	// #12
     964:	cmp	x0, #0xc
     968:	csel	x0, x0, x1, cs  // cs = hs, nlast
     96c:	bl	1d4 <htab_create>
     970:	str	x0, [x22, #56]
     974:	add	x21, x20, #0xd0
     978:	add	x22, x22, #0x38
     97c:	mov	x23, #0x0                   	// #0
     980:	mov	x25, #0x6                   	// #6
     984:	cmp	x26, x23
     988:	b.ne	a94 <gomp_task_handle_depend+0x1a0>  // b.any
     98c:	ldp	x19, x20, [sp, #16]
     990:	ldp	x21, x22, [sp, #32]
     994:	ldp	x23, x24, [sp, #48]
     998:	ldp	x25, x26, [sp, #64]
     99c:	ldp	x27, x28, [sp, #80]
     9a0:	ldp	x29, x30, [sp], #96
     9a4:	ret
     9a8:	ldp	x6, x0, [x2, #16]
     9ac:	add	x8, x2, #0x28
     9b0:	mov	x3, #0x0                   	// #0
     9b4:	mov	x9, #0x28                  	// #40
     9b8:	add	x6, x6, x0
     9bc:	ldr	x0, [x2, #32]
     9c0:	add	x0, x0, x6
     9c4:	mov	x4, x0
     9c8:	cmp	x4, x5
     9cc:	b.cc	a08 <gomp_task_handle_depend+0x114>  // b.lo, b.ul, b.last
     9d0:	mov	x4, #0x28                  	// #40
     9d4:	add	x7, x2, #0x28
     9d8:	mov	x1, #0x0                   	// #0
     9dc:	madd	x4, x3, x4, x20
     9e0:	add	x4, x4, #0x28
     9e4:	cmp	x1, x0
     9e8:	b.ne	a4c <gomp_task_handle_depend+0x158>  // b.any
     9ec:	add	x3, x3, x0
     9f0:	add	x2, x2, #0x28
     9f4:	mov	x6, #0x28                  	// #40
     9f8:	cmp	x0, x5
     9fc:	b.cc	a68 <gomp_task_handle_depend+0x174>  // b.lo, b.ul, b.last
     a00:	mov	x26, x5
     a04:	b	950 <gomp_task_handle_depend+0x5c>
     a08:	ldr	x7, [x8, x4, lsl #3]
     a0c:	ldr	x1, [x7, #8]
     a10:	cmp	x1, #0x1
     a14:	b.eq	a38 <gomp_task_handle_depend+0x144>  // b.none
     a18:	sub	x10, x1, #0x2
     a1c:	cmp	x10, #0x2
     a20:	b.hi	a40 <gomp_task_handle_depend+0x14c>  // b.pmore
     a24:	madd	x1, x3, x9, x20
     a28:	add	x3, x3, #0x1
     a2c:	ldr	x7, [x7]
     a30:	str	x7, [x1, #208]
     a34:	strb	wzr, [x1, #240]
     a38:	add	x4, x4, #0x1
     a3c:	b	9c8 <gomp_task_handle_depend+0xd4>
     a40:	adrp	x0, 0 <htab_mod_m2>
     a44:	add	x0, x0, #0x0
     a48:	bl	0 <gomp_fatal>
     a4c:	cmp	x6, x1
     a50:	ldr	x8, [x7, x1, lsl #3]
     a54:	add	x1, x1, #0x1
     a58:	str	x8, [x4, #168]
     a5c:	cset	w8, ls  // ls = plast
     a60:	strb	w8, [x4, #200]
     a64:	b	9e0 <gomp_task_handle_depend+0xec>
     a68:	ldr	x1, [x2, x0, lsl #3]
     a6c:	ldr	x4, [x1, #8]
     a70:	cmp	x4, #0x1
     a74:	b.ne	a8c <gomp_task_handle_depend+0x198>  // b.any
     a78:	ldr	x7, [x1]
     a7c:	madd	x1, x3, x6, x20
     a80:	add	x3, x3, #0x1
     a84:	str	x7, [x1, #208]
     a88:	strb	w4, [x1, #240]
     a8c:	add	x0, x0, #0x1
     a90:	b	9f8 <gomp_task_handle_depend+0x104>
     a94:	stp	xzr, xzr, [x21, #8]
     a98:	mov	x1, x21
     a9c:	mov	x0, x22
     aa0:	str	x20, [x21, #24]
     aa4:	mov	w2, #0x1                   	// #1
     aa8:	strb	wzr, [x21, #33]
     aac:	strb	wzr, [x21, #34]
     ab0:	bl	71c <htab_find_slot>
     ab4:	mov	x27, x0
     ab8:	ldr	x19, [x0]
     abc:	cbz	x19, c10 <gomp_task_handle_depend+0x31c>
     ac0:	ldr	x0, [x19, #24]
     ac4:	cmp	x0, x20
     ac8:	b.ne	ae0 <gomp_task_handle_depend+0x1ec>  // b.any
     acc:	mov	w0, #0x1                   	// #1
     ad0:	strb	w0, [x21, #33]
     ad4:	add	x23, x23, #0x1
     ad8:	add	x21, x21, #0x28
     adc:	b	984 <gomp_task_handle_depend+0x90>
     ae0:	mov	x1, #0x0                   	// #0
     ae4:	mov	x28, #0x0                   	// #0
     ae8:	ldrb	w0, [x19, #34]
     aec:	ldrb	w2, [x21, #32]
     af0:	cbnz	w0, b40 <gomp_task_handle_depend+0x24c>
     af4:	ldrb	w0, [x19, #32]
     af8:	cbz	w2, ba0 <gomp_task_handle_depend+0x2ac>
     afc:	cbnz	w0, b34 <gomp_task_handle_depend+0x240>
     b00:	mov	x28, x19
     b04:	ldr	x24, [x19, #24]
     b08:	ldr	x0, [x24, #48]
     b0c:	cbnz	x0, bac <gomp_task_handle_depend+0x2b8>
     b10:	mov	x0, #0x40                  	// #64
     b14:	bl	0 <gomp_malloc>
     b18:	str	x0, [x24, #48]
     b1c:	mov	x1, #0x1                   	// #1
     b20:	stp	x1, x25, [x0]
     b24:	str	x20, [x0, #16]
     b28:	ldr	x0, [x20, #80]
     b2c:	add	x0, x0, x1
     b30:	str	x0, [x20, #80]
     b34:	ldr	x0, [x19, #8]
     b38:	mov	x1, x19
     b3c:	cbnz	x0, b98 <gomp_task_handle_depend+0x2a4>
     b40:	ldr	x0, [x27]
     b44:	mov	x19, x28
     b48:	str	x0, [x21, #8]
     b4c:	str	x21, [x0, #16]
     b50:	ldrb	w0, [x21, #32]
     b54:	str	x21, [x27]
     b58:	cbnz	w0, ad4 <gomp_task_handle_depend+0x1e0>
     b5c:	cbz	x19, ad4 <gomp_task_handle_depend+0x1e0>
     b60:	cmp	x19, x1
     b64:	b.eq	b8c <gomp_task_handle_depend+0x298>  // b.none
     b68:	ldp	x2, x0, [x19, #8]
     b6c:	str	x0, [x2, #16]
     b70:	str	x2, [x0, #8]
     b74:	ldr	x0, [x1, #8]
     b78:	stp	x0, x1, [x19, #8]
     b7c:	str	x19, [x1, #8]
     b80:	ldr	x0, [x19, #8]
     b84:	cbz	x0, b8c <gomp_task_handle_depend+0x298>
     b88:	str	x19, [x0, #16]
     b8c:	mov	w0, #0x1                   	// #1
     b90:	strb	w0, [x19, #34]
     b94:	b	ad4 <gomp_task_handle_depend+0x1e0>
     b98:	mov	x19, x0
     b9c:	b	ae8 <gomp_task_handle_depend+0x1f4>
     ba0:	cmp	w0, #0x0
     ba4:	csel	x28, x28, x19, ne  // ne = any
     ba8:	b	b04 <gomp_task_handle_depend+0x210>
     bac:	ldr	x1, [x0]
     bb0:	cbz	x1, bc4 <gomp_task_handle_depend+0x2d0>
     bb4:	add	x3, x1, #0x1
     bb8:	ldr	x3, [x0, x3, lsl #3]
     bbc:	cmp	x3, x20
     bc0:	b.eq	b34 <gomp_task_handle_depend+0x240>  // b.none
     bc4:	ldr	x3, [x0, #8]
     bc8:	cmp	x1, x3
     bcc:	b.ne	bec <gomp_task_handle_depend+0x2f8>  // b.any
     bd0:	add	x1, x1, #0x1
     bd4:	lsl	x1, x1, #1
     bd8:	str	x1, [x0, #8]
     bdc:	add	x1, x1, #0x2
     be0:	lsl	x1, x1, #3
     be4:	bl	0 <gomp_realloc>
     be8:	str	x0, [x24, #48]
     bec:	ldr	x1, [x24, #48]
     bf0:	ldr	x0, [x1]
     bf4:	add	x2, x0, #0x1
     bf8:	add	x0, x0, #0x2
     bfc:	str	x2, [x1]
     c00:	str	x20, [x1, x0, lsl #3]
     c04:	ldr	x0, [x20, #80]
     c08:	add	x0, x0, #0x1
     c0c:	b	b30 <gomp_task_handle_depend+0x23c>
     c10:	mov	x1, #0x0                   	// #0
     c14:	b	b50 <gomp_task_handle_depend+0x25c>

0000000000000c18 <gomp_task_run_post_handle_depend_hash>:
     c18:	stp	x29, x30, [sp, #-80]!
     c1c:	mov	x29, sp
     c20:	stp	x19, x20, [sp, #16]
     c24:	mov	x19, x0
     c28:	mov	x20, x0
     c2c:	stp	x23, x24, [sp, #48]
     c30:	ldr	x23, [x19], #216
     c34:	stp	x21, x22, [sp, #32]
     c38:	mov	x22, #0x0                   	// #0
     c3c:	add	x24, x23, #0x38
     c40:	str	x25, [sp, #64]
     c44:	mov	x25, #0x1                   	// #1
     c48:	ldr	x0, [x20, #72]
     c4c:	cmp	x0, x22
     c50:	b.hi	c6c <gomp_task_run_post_handle_depend_hash+0x54>  // b.pmore
     c54:	ldp	x19, x20, [sp, #16]
     c58:	ldp	x21, x22, [sp, #32]
     c5c:	ldp	x23, x24, [sp, #48]
     c60:	ldr	x25, [sp, #64]
     c64:	ldp	x29, x30, [sp], #80
     c68:	ret
     c6c:	ldrb	w0, [x19, #25]
     c70:	cbnz	w0, c90 <gomp_task_run_post_handle_depend_hash+0x78>
     c74:	ldr	x0, [x19]
     c78:	cbz	x0, c84 <gomp_task_run_post_handle_depend_hash+0x6c>
     c7c:	ldr	x1, [x19, #8]
     c80:	str	x1, [x0, #16]
     c84:	ldr	x1, [x19, #8]
     c88:	cbz	x1, c9c <gomp_task_run_post_handle_depend_hash+0x84>
     c8c:	str	x0, [x1, #8]
     c90:	add	x22, x22, #0x1
     c94:	add	x19, x19, #0x28
     c98:	b	c48 <gomp_task_run_post_handle_depend_hash+0x30>
     c9c:	sub	x21, x19, #0x8
     ca0:	mov	x0, x24
     ca4:	mov	x1, x21
     ca8:	mov	w2, #0x0                   	// #0
     cac:	bl	71c <htab_find_slot>
     cb0:	ldr	x1, [x0]
     cb4:	cmp	x1, x21
     cb8:	b.eq	cc0 <gomp_task_run_post_handle_depend_hash+0xa8>  // b.none
     cbc:	bl	0 <abort>
     cc0:	ldr	x1, [x19]
     cc4:	cbz	x1, cd0 <gomp_task_run_post_handle_depend_hash+0xb8>
     cc8:	str	x1, [x0]
     ccc:	b	c90 <gomp_task_run_post_handle_depend_hash+0x78>
     cd0:	ldr	x1, [x23, #56]
     cd4:	add	x3, x1, #0x20
     cd8:	cmp	x0, x3
     cdc:	b.cc	cbc <gomp_task_run_post_handle_depend_hash+0xa4>  // b.lo, b.ul, b.last
     ce0:	ldr	x2, [x1]
     ce4:	add	x2, x3, x2, lsl #3
     ce8:	cmp	x0, x2
     cec:	b.cs	cbc <gomp_task_run_post_handle_depend_hash+0xa4>  // b.hs, b.nlast
     cf0:	cmp	x19, #0x9
     cf4:	b.eq	cbc <gomp_task_run_post_handle_depend_hash+0xa4>  // b.none
     cf8:	str	x25, [x0]
     cfc:	ldr	x0, [x1, #16]
     d00:	add	x0, x0, #0x1
     d04:	str	x0, [x1, #16]
     d08:	b	c90 <gomp_task_run_post_handle_depend_hash+0x78>

0000000000000d0c <gomp_task_run_post_handle_depend>:
     d0c:	stp	x29, x30, [sp, #-96]!
     d10:	mov	x29, sp
     d14:	stp	x19, x20, [sp, #16]
     d18:	mov	x20, x1
     d1c:	ldr	x1, [x0, #72]
     d20:	stp	x21, x22, [sp, #32]
     d24:	stp	x23, x24, [sp, #48]
     d28:	stp	x25, x26, [sp, #64]
     d2c:	stp	x27, x28, [sp, #80]
     d30:	cbnz	x1, d58 <gomp_task_run_post_handle_depend+0x4c>
     d34:	mov	x22, #0x0                   	// #0
     d38:	mov	x0, x22
     d3c:	ldp	x19, x20, [sp, #16]
     d40:	ldp	x21, x22, [sp, #32]
     d44:	ldp	x23, x24, [sp, #48]
     d48:	ldp	x25, x26, [sp, #64]
     d4c:	ldp	x27, x28, [sp, #80]
     d50:	ldp	x29, x30, [sp], #96
     d54:	ret
     d58:	ldr	x1, [x0]
     d5c:	mov	x21, x0
     d60:	cbz	x1, d68 <gomp_task_run_post_handle_depend+0x5c>
     d64:	bl	c18 <gomp_task_run_post_handle_depend_hash>
     d68:	ldr	x0, [x21, #48]
     d6c:	cbz	x0, d34 <gomp_task_run_post_handle_depend+0x28>
     d70:	ldr	x25, [x21]
     d74:	add	x27, x20, #0x508
     d78:	ldr	x26, [x0]
     d7c:	add	x28, x25, #0x8
     d80:	mov	x22, #0x0                   	// #0
     d84:	mov	x24, #0x0                   	// #0
     d88:	cmp	x26, x24
     d8c:	ldr	x0, [x21, #48]
     d90:	b.ne	db4 <gomp_task_run_post_handle_depend+0xa8>  // b.any
     d94:	bl	0 <free>
     d98:	str	xzr, [x21, #48]
     d9c:	cmp	x22, #0x1
     da0:	b.ls	d38 <gomp_task_run_post_handle_depend+0x2c>  // b.plast
     da4:	ldr	w0, [x20, #132]
     da8:	orr	w0, w0, #0x1
     dac:	str	w0, [x20, #132]
     db0:	b	d38 <gomp_task_run_post_handle_depend+0x2c>
     db4:	add	x1, x24, #0x2
     db8:	ldr	x19, [x0, x1, lsl #3]
     dbc:	ldr	x0, [x19, #80]
     dc0:	sub	x0, x0, #0x1
     dc4:	str	x0, [x19, #80]
     dc8:	cbnz	x0, e80 <gomp_task_run_post_handle_depend+0x174>
     dcc:	ldr	x23, [x19, #40]
     dd0:	cbz	x25, e0c <gomp_task_run_post_handle_depend+0x100>
     dd4:	ldrb	w6, [x19, #207]
     dd8:	mov	w0, #0x1                   	// #1
     ddc:	ldr	w3, [x19, #88]
     de0:	mov	x2, x19
     de4:	mov	x1, x28
     de8:	mov	w5, #0x1                   	// #1
     dec:	mov	w4, #0x0                   	// #0
     df0:	bl	3bc <priority_queue_insert>
     df4:	ldr	x0, [x25, #64]
     df8:	cbz	x0, e0c <gomp_task_run_post_handle_depend+0x100>
     dfc:	ldrb	w1, [x0]
     e00:	cbz	w1, e88 <gomp_task_run_post_handle_depend+0x17c>
     e04:	strb	wzr, [x0], #16
     e08:	bl	2c8 <gomp_sem_post>
     e0c:	cbz	x23, e44 <gomp_task_run_post_handle_depend+0x138>
     e10:	ldrb	w6, [x19, #207]
     e14:	mov	w0, #0x2                   	// #2
     e18:	ldr	w3, [x19, #88]
     e1c:	mov	x2, x19
     e20:	add	x1, x23, #0x8
     e24:	mov	w5, #0x0                   	// #0
     e28:	mov	w4, #0x0                   	// #0
     e2c:	bl	3bc <priority_queue_insert>
     e30:	ldrb	w0, [x23, #48]
     e34:	cbz	w0, e44 <gomp_task_run_post_handle_depend+0x138>
     e38:	strb	wzr, [x23, #48]
     e3c:	add	x0, x23, #0x34
     e40:	bl	2c8 <gomp_sem_post>
     e44:	ldrb	w6, [x19, #207]
     e48:	mov	w0, #0x0                   	// #0
     e4c:	ldr	w3, [x19, #88]
     e50:	mov	x2, x19
     e54:	mov	x1, x27
     e58:	mov	w5, #0x0                   	// #0
     e5c:	mov	w4, #0x1                   	// #1
     e60:	add	x22, x22, #0x1
     e64:	bl	3bc <priority_queue_insert>
     e68:	ldr	w0, [x20, #1320]
     e6c:	add	w0, w0, #0x1
     e70:	str	w0, [x20, #1320]
     e74:	ldr	w0, [x20, #1324]
     e78:	add	w0, w0, #0x1
     e7c:	str	w0, [x20, #1324]
     e80:	add	x24, x24, #0x1
     e84:	b	d88 <gomp_task_run_post_handle_depend+0x7c>
     e88:	ldrb	w1, [x0, #1]
     e8c:	cbz	w1, e0c <gomp_task_run_post_handle_depend+0x100>
     e90:	add	x0, x0, #0x10
     e94:	sturb	wzr, [x0, #-15]
     e98:	b	e08 <gomp_task_run_post_handle_depend+0xfc>

0000000000000e9c <priority_queue_remove>:
     e9c:	stp	x29, x30, [sp, #-32]!
     ea0:	ubfiz	x4, x0, #4, #32
     ea4:	add	x4, x4, #0x60
     ea8:	mov	x29, sp
     eac:	stp	x19, x20, [sp, #16]
     eb0:	mov	w20, w3
     eb4:	mov	x5, x2
     eb8:	ldr	x3, [x1]
     ebc:	mov	x19, x1
     ec0:	add	x2, x2, x4
     ec4:	cbz	x3, ef8 <priority_queue_remove+0x5c>
     ec8:	bl	0 <priority_tree_remove>
     ecc:	ldr	x0, [x19]
     ed0:	cbz	x0, ee4 <priority_queue_remove+0x48>
     ed4:	mov	w0, #0x0                   	// #0
     ed8:	ldp	x19, x20, [sp, #16]
     edc:	ldp	x29, x30, [sp], #32
     ee0:	ret
     ee4:	cmp	w20, #0x3
     ee8:	b.ne	ef0 <priority_queue_remove+0x54>  // b.any
     eec:	stlr	xzr, [x19]
     ef0:	mov	w0, #0x1                   	// #1
     ef4:	b	ed8 <priority_queue_remove+0x3c>
     ef8:	ldr	x1, [x2, #8]
     efc:	ldr	x0, [x5, x4]
     f00:	str	x0, [x1]
     f04:	str	x1, [x0, #8]
     f08:	add	x1, x19, #0x8
     f0c:	ldr	x3, [x1, #8]
     f10:	cmp	x2, x3
     f14:	b.ne	ed4 <priority_queue_remove+0x38>  // b.any
     f18:	cmp	x2, x0
     f1c:	b.eq	f28 <priority_queue_remove+0x8c>  // b.none
     f20:	str	x0, [x1, #8]
     f24:	b	ed4 <priority_queue_remove+0x38>
     f28:	cmp	w20, #0x3
     f2c:	b.ne	f38 <priority_queue_remove+0x9c>  // b.any
     f30:	add	x19, x19, #0x10
     f34:	b	eec <priority_queue_remove+0x50>
     f38:	str	xzr, [x1, #8]
     f3c:	b	ef0 <priority_queue_remove+0x54>

0000000000000f40 <gomp_task_run_post_remove_parent>:
     f40:	stp	x29, x30, [sp, #-32]!
     f44:	mov	x29, sp
     f48:	stp	x19, x20, [sp, #16]
     f4c:	ldr	x20, [x0]
     f50:	cbz	x20, fc0 <gomp_task_run_post_remove_parent+0x80>
     f54:	mov	x19, x0
     f58:	ldrb	w0, [x0, #207]
     f5c:	cbz	w0, f88 <gomp_task_run_post_remove_parent+0x48>
     f60:	ldr	x0, [x20, #64]
     f64:	ldr	x1, [x0, #8]
     f68:	sub	x1, x1, #0x1
     f6c:	str	x1, [x0, #8]
     f70:	cbnz	x1, f88 <gomp_task_run_post_remove_parent+0x48>
     f74:	ldrb	w1, [x0, #1]
     f78:	cbz	w1, f88 <gomp_task_run_post_remove_parent+0x48>
     f7c:	strb	wzr, [x0, #1]
     f80:	add	x0, x0, #0x10
     f84:	bl	2c8 <gomp_sem_post>
     f88:	mov	x2, x19
     f8c:	add	x1, x20, #0x8
     f90:	mov	w3, #0x3                   	// #3
     f94:	mov	w0, #0x1                   	// #1
     f98:	bl	e9c <priority_queue_remove>
     f9c:	tst	w0, #0xff
     fa0:	b.eq	fbc <gomp_task_run_post_remove_parent+0x7c>  // b.none
     fa4:	ldr	x0, [x20, #64]
     fa8:	cbz	x0, fbc <gomp_task_run_post_remove_parent+0x7c>
     fac:	ldrb	w1, [x0]
     fb0:	cbz	w1, fbc <gomp_task_run_post_remove_parent+0x7c>
     fb4:	strb	wzr, [x0], #16
     fb8:	bl	2c8 <gomp_sem_post>
     fbc:	stp	xzr, xzr, [x19, #112]
     fc0:	ldp	x19, x20, [sp, #16]
     fc4:	ldp	x29, x30, [sp], #32
     fc8:	ret

0000000000000fcc <gomp_task_run_post_remove_taskgroup>:
     fcc:	stp	x29, x30, [sp, #-32]!
     fd0:	mov	x29, sp
     fd4:	stp	x19, x20, [sp, #16]
     fd8:	ldr	x19, [x0, #40]
     fdc:	cbz	x19, 1040 <gomp_task_run_post_remove_taskgroup+0x74>
     fe0:	mov	x20, x0
     fe4:	mov	x2, x0
     fe8:	add	x1, x19, #0x8
     fec:	mov	w3, #0x0                   	// #0
     ff0:	mov	w0, #0x2                   	// #2
     ff4:	bl	e9c <priority_queue_remove>
     ff8:	ldr	x1, [x19, #56]
     ffc:	stp	xzr, xzr, [x20, #128]
    1000:	and	w0, w0, #0xff
    1004:	cmp	x1, #0x1
    1008:	b.ls	1034 <gomp_task_run_post_remove_taskgroup+0x68>  // b.plast
    100c:	sub	x1, x1, #0x1
    1010:	str	x1, [x19, #56]
    1014:	cbz	w0, 1040 <gomp_task_run_post_remove_taskgroup+0x74>
    1018:	ldrb	w0, [x19, #48]
    101c:	cbz	w0, 1040 <gomp_task_run_post_remove_taskgroup+0x74>
    1020:	strb	wzr, [x19, #48]
    1024:	add	x0, x19, #0x34
    1028:	ldp	x19, x20, [sp, #16]
    102c:	ldp	x29, x30, [sp], #32
    1030:	b	2c8 <gomp_sem_post>
    1034:	add	x1, x19, #0x38
    1038:	stlr	xzr, [x1]
    103c:	b	1014 <gomp_task_run_post_remove_taskgroup+0x48>
    1040:	ldp	x19, x20, [sp, #16]
    1044:	ldp	x29, x30, [sp], #32
    1048:	ret

000000000000104c <priority_queue_move_task_first>:
    104c:	stp	x29, x30, [sp, #-32]!
    1050:	mov	x29, sp
    1054:	stp	x19, x20, [sp, #16]
    1058:	mov	w20, w0
    105c:	mov	x19, x2
    1060:	mov	x0, x1
    1064:	ldr	x2, [x1], #8
    1068:	cbz	x2, 1078 <priority_queue_move_task_first+0x2c>
    106c:	ldr	w1, [x19, #88]
    1070:	bl	280 <priority_queue_lookup_priority>
    1074:	mov	x1, x0
    1078:	ubfiz	x0, x20, #4, #32
    107c:	add	x0, x0, #0x60
    1080:	add	x3, x19, x0
    1084:	ldr	x2, [x19, x0]
    1088:	ldr	x4, [x3, #8]
    108c:	ldr	x0, [x1, #8]
    1090:	str	x2, [x4]
    1094:	str	x4, [x2, #8]
    1098:	cmp	x3, x0
    109c:	b.ne	10ac <priority_queue_move_task_first+0x60>  // b.any
    10a0:	cmp	x3, x2
    10a4:	csel	x2, x2, xzr, ne  // ne = any
    10a8:	str	x2, [x1, #8]
    10ac:	cmp	w20, #0x1
    10b0:	ldrb	w5, [x19, #207]
    10b4:	mov	x2, x19
    10b8:	mov	w0, w20
    10bc:	ldp	x19, x20, [sp, #16]
    10c0:	cset	w4, eq  // eq = none
    10c4:	ldp	x29, x30, [sp], #32
    10c8:	mov	w3, #0x0                   	// #0
    10cc:	b	330 <priority_list_insert.isra.0>

00000000000010d0 <gomp_target_task_completion>:
    10d0:	stp	x29, x30, [sp, #-48]!
    10d4:	mov	x29, sp
    10d8:	stp	x21, x22, [sp, #32]
    10dc:	ldr	x22, [x1]
    10e0:	stp	x19, x20, [sp, #16]
    10e4:	mov	x19, x0
    10e8:	mov	x20, x1
    10ec:	cbz	x22, 1100 <gomp_target_task_completion+0x30>
    10f0:	mov	x2, x1
    10f4:	mov	w0, #0x1                   	// #1
    10f8:	add	x1, x22, #0x8
    10fc:	bl	104c <priority_queue_move_task_first>
    1100:	ldr	x21, [x20, #40]
    1104:	cbz	x21, 1118 <gomp_target_task_completion+0x48>
    1108:	mov	x2, x20
    110c:	add	x1, x21, #0x8
    1110:	mov	w0, #0x2                   	// #2
    1114:	bl	104c <priority_queue_move_task_first>
    1118:	ldrb	w6, [x20, #207]
    111c:	mov	w0, #0x0                   	// #0
    1120:	ldr	w3, [x20, #88]
    1124:	mov	x2, x20
    1128:	add	x1, x19, #0x508
    112c:	mov	w5, #0x0                   	// #0
    1130:	mov	w4, #0x0                   	// #0
    1134:	bl	3bc <priority_queue_insert>
    1138:	mov	w0, #0x2                   	// #2
    113c:	str	w0, [x20, #200]
    1140:	cbz	x22, 115c <gomp_target_task_completion+0x8c>
    1144:	ldr	x0, [x22, #64]
    1148:	cbz	x0, 115c <gomp_target_task_completion+0x8c>
    114c:	ldrb	w1, [x0]
    1150:	cbz	w1, 11b4 <gomp_target_task_completion+0xe4>
    1154:	strb	wzr, [x0], #16
    1158:	bl	2c8 <gomp_sem_post>
    115c:	cbz	x21, 1174 <gomp_target_task_completion+0xa4>
    1160:	ldrb	w0, [x21, #48]
    1164:	cbz	w0, 1174 <gomp_target_task_completion+0xa4>
    1168:	strb	wzr, [x21, #48]
    116c:	add	x0, x21, #0x34
    1170:	bl	2c8 <gomp_sem_post>
    1174:	ldr	w0, [x19, #1324]
    1178:	ldr	w1, [x19]
    117c:	add	w0, w0, #0x1
    1180:	str	w0, [x19, #1324]
    1184:	ldr	w0, [x19, #132]
    1188:	orr	w0, w0, #0x1
    118c:	str	w0, [x19, #132]
    1190:	ldr	w0, [x19, #1328]
    1194:	cmp	w1, w0
    1198:	b.ls	11c8 <gomp_target_task_completion+0xf8>  // b.plast
    119c:	add	x0, x19, #0x80
    11a0:	mov	w1, #0x1                   	// #1
    11a4:	ldp	x19, x20, [sp, #16]
    11a8:	ldp	x21, x22, [sp, #32]
    11ac:	ldp	x29, x30, [sp], #48
    11b0:	b	0 <gomp_team_barrier_wake>
    11b4:	ldrb	w1, [x0, #1]
    11b8:	cbz	w1, 115c <gomp_target_task_completion+0x8c>
    11bc:	add	x0, x0, #0x10
    11c0:	sturb	wzr, [x0, #-15]
    11c4:	b	1158 <gomp_target_task_completion+0x88>
    11c8:	ldp	x19, x20, [sp, #16]
    11cc:	ldp	x21, x22, [sp, #32]
    11d0:	ldp	x29, x30, [sp], #48
    11d4:	ret

00000000000011d8 <gomp_task_run_pre>:
    11d8:	stp	x29, x30, [sp, #-48]!
    11dc:	mov	x29, sp
    11e0:	stp	x19, x20, [sp, #16]
    11e4:	mov	x19, x0
    11e8:	mov	x20, x2
    11ec:	str	x21, [sp, #32]
    11f0:	cbz	x1, 1218 <gomp_task_run_pre+0x40>
    11f4:	mov	x0, x1
    11f8:	ldr	x1, [x0, #8]!
    11fc:	cbz	x1, 12cc <gomp_task_run_pre+0xf4>
    1200:	ldr	w1, [x19, #88]
    1204:	bl	280 <priority_queue_lookup_priority>
    1208:	mov	x1, x0
    120c:	mov	x2, x19
    1210:	mov	w0, #0x1                   	// #1
    1214:	bl	a4 <priority_list_downgrade_task>
    1218:	ldr	x21, [x19, #40]
    121c:	cbz	x21, 1244 <gomp_task_run_pre+0x6c>
    1220:	mov	x0, x21
    1224:	ldr	x1, [x0, #8]!
    1228:	cbz	x1, 12d8 <gomp_task_run_pre+0x100>
    122c:	ldr	w1, [x19, #88]
    1230:	bl	280 <priority_queue_lookup_priority>
    1234:	mov	x1, x0
    1238:	mov	x2, x19
    123c:	mov	w0, #0x2                   	// #2
    1240:	bl	a4 <priority_list_downgrade_task>
    1244:	mov	x2, x19
    1248:	add	x1, x20, #0x508
    124c:	mov	w3, #0x0                   	// #0
    1250:	mov	w0, #0x0                   	// #0
    1254:	bl	e9c <priority_queue_remove>
    1258:	stp	xzr, xzr, [x19, #96]
    125c:	mov	w0, #0x3                   	// #3
    1260:	str	w0, [x19, #200]
    1264:	ldr	w0, [x20, #1324]
    1268:	sub	w0, w0, #0x1
    126c:	str	w0, [x20, #1324]
    1270:	cbnz	w0, 1280 <gomp_task_run_pre+0xa8>
    1274:	ldr	w0, [x20, #132]
    1278:	and	w0, w0, #0xfffffffe
    127c:	str	w0, [x20, #132]
    1280:	adrp	x0, 0 <gomp_cancel_var>
    1284:	ldrb	w0, [x0]
    1288:	cbz	w0, 12bc <gomp_task_run_pre+0xe4>
    128c:	ldrb	w1, [x19, #206]
    1290:	cbnz	w1, 12e4 <gomp_task_run_pre+0x10c>
    1294:	ldr	w1, [x20, #132]
    1298:	tbnz	w1, #2, 12bc <gomp_task_run_pre+0xe4>
    129c:	cbz	x21, 12e4 <gomp_task_run_pre+0x10c>
    12a0:	ldrb	w0, [x21, #49]
    12a4:	cbnz	w0, 12bc <gomp_task_run_pre+0xe4>
    12a8:	ldrb	w1, [x21, #50]
    12ac:	cbz	w1, 12bc <gomp_task_run_pre+0xe4>
    12b0:	ldr	x1, [x21]
    12b4:	cbz	x1, 12bc <gomp_task_run_pre+0xe4>
    12b8:	ldrb	w0, [x1, #49]
    12bc:	ldp	x19, x20, [sp, #16]
    12c0:	ldr	x21, [sp, #32]
    12c4:	ldp	x29, x30, [sp], #48
    12c8:	ret
    12cc:	mov	x2, x19
    12d0:	add	x1, x0, #0x8
    12d4:	b	1210 <gomp_task_run_pre+0x38>
    12d8:	mov	x2, x19
    12dc:	add	x1, x0, #0x8
    12e0:	b	123c <gomp_task_run_pre+0x64>
    12e4:	mov	w0, #0x0                   	// #0
    12e8:	b	12bc <gomp_task_run_pre+0xe4>

00000000000012ec <gomp_init_task>:
    12ec:	mov	x3, x0
    12f0:	ldp	x4, x5, [x2]
    12f4:	str	x1, [x3], #144
    12f8:	stp	x4, x5, [x0, #144]
    12fc:	ldp	x4, x5, [x2, #16]
    1300:	stp	x4, x5, [x3, #16]
    1304:	ldr	x1, [x2, #32]
    1308:	str	x1, [x3, #32]
    130c:	str	xzr, [x0, #8]
    1310:	stp	xzr, xzr, [x0, #24]
    1314:	stp	xzr, xzr, [x0, #40]
    1318:	stp	xzr, xzr, [x0, #56]
    131c:	str	xzr, [x0, #72]
    1320:	str	xzr, [x0, #200]
    1324:	ret

0000000000001328 <gomp_end_task>:
    1328:	stp	x29, x30, [sp, #-32]!
    132c:	mrs	x0, tpidr_el0
    1330:	mov	x29, sp
    1334:	stp	x19, x20, [sp, #16]
    1338:	adrp	x19, 0 <gomp_tls_data>
    133c:	ldr	x19, [x19]
    1340:	add	x19, x0, x19
    1344:	ldr	x20, [x19, #80]
    1348:	mov	x0, x20
    134c:	bl	14c <gomp_finish_task>
    1350:	ldr	x0, [x20]
    1354:	str	x0, [x19, #80]
    1358:	ldp	x19, x20, [sp, #16]
    135c:	ldp	x29, x30, [sp], #32
    1360:	ret

0000000000001364 <gomp_create_artificial_team>:
    1364:	stp	x29, x30, [sp, #-48]!
    1368:	mov	w0, #0x1                   	// #1
    136c:	mov	x29, sp
    1370:	stp	x19, x20, [sp, #16]
    1374:	adrp	x19, 0 <gomp_tls_data>
    1378:	ldr	x19, [x19]
    137c:	str	x21, [sp, #32]
    1380:	bl	0 <gomp_new_team>
    1384:	mrs	x1, tpidr_el0
    1388:	add	x3, x0, #0x100
    138c:	add	x19, x1, x19
    1390:	add	x20, x0, #0x540
    1394:	adrp	x1, 0 <gomp_global_icv>
    1398:	add	x1, x1, #0x0
    139c:	ldp	x6, x7, [x19, #16]
    13a0:	ldp	x4, x5, [x19, #64]
    13a4:	ldr	x21, [x19, #80]
    13a8:	stp	x6, x7, [x0, #8]
    13ac:	ldp	x6, x7, [x19, #32]
    13b0:	stp	x6, x7, [x0, #24]
    13b4:	cmp	x21, #0x0
    13b8:	ldp	x6, x7, [x19, #48]
    13bc:	stp	x6, x7, [x0, #40]
    13c0:	add	x2, x21, #0x90
    13c4:	stp	x4, x5, [x0, #56]
    13c8:	csel	x2, x1, x2, eq  // eq = none
    13cc:	mov	x1, #0x0                   	// #0
    13d0:	stp	x0, x3, [x19, #16]
    13d4:	mov	x0, x20
    13d8:	str	xzr, [x19, #32]
    13dc:	str	wzr, [x19, #40]
    13e0:	stp	xzr, xzr, [x19, #64]
    13e4:	str	x20, [x19, #80]
    13e8:	bl	12ec <gomp_init_task>
    13ec:	cbz	x21, 1414 <gomp_create_artificial_team+0xb0>
    13f0:	str	x21, [x19, #80]
    13f4:	bl	1328 <gomp_end_task>
    13f8:	mov	x0, x21
    13fc:	bl	0 <free>
    1400:	ldr	x21, [sp, #32]
    1404:	str	x20, [x19, #80]
    1408:	ldp	x19, x20, [sp, #16]
    140c:	ldp	x29, x30, [sp], #48
    1410:	ret
    1414:	mov	x1, x19
    1418:	adrp	x0, 0 <gomp_thread_destructor>
    141c:	ldp	x19, x20, [sp, #16]
    1420:	ldr	x21, [sp, #32]
    1424:	ldp	x29, x30, [sp], #48
    1428:	ldr	w0, [x0]
    142c:	b	0 <pthread_setspecific>

0000000000001430 <GOMP_PLUGIN_target_task_completion>:
    1430:	stp	x29, x30, [sp, #-48]!
    1434:	mov	x29, sp
    1438:	stp	x21, x22, [sp, #32]
    143c:	ldp	x22, x21, [x0, #56]
    1440:	stp	x19, x20, [sp, #16]
    1444:	mov	x19, x0
    1448:	add	x20, x21, #0x500
    144c:	mov	x0, x20
    1450:	bl	1ac <gomp_mutex_lock>
    1454:	ldr	w0, [x19, #44]
    1458:	cmp	w0, #0x3
    145c:	mov	w0, #0x5                   	// #5
    1460:	str	w0, [x19, #44]
    1464:	b.ne	147c <GOMP_PLUGIN_target_task_completion+0x4c>  // b.any
    1468:	mov	x0, x20
    146c:	ldp	x19, x20, [sp, #16]
    1470:	ldp	x21, x22, [sp, #32]
    1474:	ldp	x29, x30, [sp], #48
    1478:	b	2ac <gomp_mutex_unlock>
    147c:	mov	x1, x22
    1480:	mov	x0, x21
    1484:	bl	10d0 <gomp_target_task_completion>
    1488:	b	1468 <GOMP_PLUGIN_target_task_completion+0x38>

000000000000148c <gomp_create_target_task>:
    148c:	stp	x29, x30, [sp, #-176]!
    1490:	mov	x29, sp
    1494:	stp	x27, x28, [sp, #80]
    1498:	mov	x28, x1
    149c:	adrp	x1, 0 <gomp_cancel_var>
    14a0:	stp	x0, x5, [sp, #112]
    14a4:	adrp	x0, 0 <gomp_tls_data>
    14a8:	ldr	x0, [x0]
    14ac:	stp	x19, x20, [sp, #16]
    14b0:	mov	x19, x2
    14b4:	ldrb	w2, [x1]
    14b8:	stp	x21, x22, [sp, #32]
    14bc:	mrs	x21, tpidr_el0
    14c0:	mov	x22, x7
    14c4:	str	x0, [sp, #96]
    14c8:	add	x0, x21, x0
    14cc:	stp	x23, x24, [sp, #48]
    14d0:	stp	x25, x26, [sp, #64]
    14d4:	mov	x25, x4
    14d8:	str	x3, [sp, #128]
    14dc:	str	w6, [sp, #140]
    14e0:	str	x1, [sp, #144]
    14e4:	ldr	x27, [x0, #16]
    14e8:	cbz	w2, 152c <gomp_create_target_task+0xa0>
    14ec:	cbz	x27, 152c <gomp_create_target_task+0xa0>
    14f0:	ldr	w1, [x27, #132]
    14f4:	tbz	w1, #2, 1500 <gomp_create_target_task+0x74>
    14f8:	mov	w25, #0x1                   	// #1
    14fc:	b	169c <gomp_create_target_task+0x210>
    1500:	ldr	x0, [x0, #80]
    1504:	ldr	x0, [x0, #40]
    1508:	cbz	x0, 152c <gomp_create_target_task+0xa0>
    150c:	ldrb	w1, [x0, #49]
    1510:	cbnz	w1, 14f8 <gomp_create_target_task+0x6c>
    1514:	ldrb	w1, [x0, #50]
    1518:	cbz	w1, 152c <gomp_create_target_task+0xa0>
    151c:	ldr	x0, [x0]
    1520:	cbz	x0, 152c <gomp_create_target_task+0xa0>
    1524:	ldrb	w0, [x0, #49]
    1528:	cbnz	w0, 14f8 <gomp_create_target_task+0x6c>
    152c:	ldr	x0, [sp, #96]
    1530:	add	x0, x21, x0
    1534:	ldr	x20, [x0, #80]
    1538:	ldr	x26, [x20, #40]
    153c:	cbz	x22, 16bc <gomp_create_target_task+0x230>
    1540:	ldr	x3, [x22]
    1544:	cbnz	x3, 154c <gomp_create_target_task+0xc0>
    1548:	ldr	x3, [x22, #8]
    154c:	mov	x24, #0x28                  	// #40
    1550:	mul	x0, x3, x24
    1554:	str	x0, [sp, #104]
    1558:	mov	x2, #0x0                   	// #0
    155c:	cbnz	x28, 1724 <gomp_create_target_task+0x298>
    1560:	mov	x5, #0x0                   	// #0
    1564:	ldr	x1, [sp, #104]
    1568:	mov	x0, #0x12                  	// #18
    156c:	stp	x3, x5, [sp, #152]
    1570:	add	x2, x1, x2
    1574:	mul	x0, x19, x0
    1578:	add	x0, x0, #0x120
    157c:	add	x0, x0, x2
    1580:	bl	0 <gomp_malloc>
    1584:	ldr	x1, [sp, #96]
    1588:	mov	x23, x0
    158c:	add	x1, x21, x1
    1590:	ldr	x6, [x1, #80]
    1594:	adrp	x1, 0 <gomp_global_icv>
    1598:	add	x1, x1, #0x0
    159c:	cmp	x6, #0x0
    15a0:	add	x2, x6, #0x90
    15a4:	csel	x2, x1, x2, eq  // eq = none
    15a8:	mov	x1, x20
    15ac:	bl	12ec <gomp_init_task>
    15b0:	str	wzr, [x23, #88]
    15b4:	mov	w0, #0x2                   	// #2
    15b8:	str	w0, [x23, #200]
    15bc:	ldrb	w0, [x20, #204]
    15c0:	lsl	x2, x19, #3
    15c4:	ldr	x3, [sp, #152]
    15c8:	strb	w0, [x23, #204]
    15cc:	mov	x0, #0x28                  	// #40
    15d0:	str	x26, [x23, #40]
    15d4:	ldr	x1, [sp, #128]
    15d8:	mul	x3, x3, x0
    15dc:	ldr	x0, [sp, #112]
    15e0:	add	x3, x3, #0xd0
    15e4:	add	x24, x23, x3
    15e8:	str	x2, [sp, #152]
    15ec:	str	x0, [x23, x3]
    15f0:	ldr	x0, [sp, #176]
    15f4:	stp	x28, x19, [x24, #8]
    15f8:	add	x28, x24, #0x50
    15fc:	str	x0, [x24, #72]
    1600:	mov	x0, x28
    1604:	bl	0 <memcpy>
    1608:	ldr	x2, [sp, #152]
    160c:	mov	x1, x25
    1610:	add	x0, x2, #0x50
    1614:	add	x0, x24, x0
    1618:	str	x0, [x24, #24]
    161c:	bl	0 <memcpy>
    1620:	ldr	x0, [x24, #24]
    1624:	ldr	x2, [sp, #152]
    1628:	ldr	x1, [sp, #120]
    162c:	add	x0, x0, x2
    1630:	str	x0, [x24, #32]
    1634:	lsl	x2, x19, #1
    1638:	str	x2, [sp, #152]
    163c:	bl	0 <memcpy>
    1640:	ldp	x2, x5, [sp, #152]
    1644:	cbnz	x5, 1734 <gomp_create_target_task+0x2a8>
    1648:	ldr	w0, [sp, #140]
    164c:	add	x19, x27, #0x500
    1650:	str	w0, [x24, #40]
    1654:	ldr	w0, [sp, #184]
    1658:	str	w0, [x24, #44]
    165c:	mov	x0, x19
    1660:	stp	x23, x27, [x24, #56]
    1664:	stp	xzr, x24, [x23, #184]
    1668:	strb	wzr, [x23, #205]
    166c:	bl	1ac <gomp_mutex_lock>
    1670:	ldr	x0, [sp, #144]
    1674:	ldrb	w25, [x0]
    1678:	cbz	w25, 17f4 <gomp_create_target_task+0x368>
    167c:	ldr	w0, [x27, #132]
    1680:	tbz	w0, #2, 17d0 <gomp_create_target_task+0x344>
    1684:	mov	x0, x19
    1688:	bl	2ac <gomp_mutex_unlock>
    168c:	mov	x0, x23
    1690:	bl	14c <gomp_finish_task>
    1694:	mov	x0, x23
    1698:	bl	0 <free>
    169c:	mov	w0, w25
    16a0:	ldp	x19, x20, [sp, #16]
    16a4:	ldp	x21, x22, [sp, #32]
    16a8:	ldp	x23, x24, [sp, #48]
    16ac:	ldp	x25, x26, [sp, #64]
    16b0:	ldp	x27, x28, [sp, #80]
    16b4:	ldp	x29, x30, [sp], #176
    16b8:	ret
    16bc:	mov	x3, #0x0                   	// #0
    16c0:	str	xzr, [sp, #104]
    16c4:	b	1558 <gomp_create_target_task+0xcc>
    16c8:	ldr	x1, [sp, #120]
    16cc:	ldrh	w1, [x1, x2, lsl #1]
    16d0:	and	w7, w1, #0xff
    16d4:	cmp	w7, #0xc
    16d8:	b.ne	1704 <gomp_create_target_task+0x278>  // b.any
    16dc:	lsr	w1, w1, #8
    16e0:	sub	x0, x0, #0x1
    16e4:	lsl	x1, x6, x1
    16e8:	cmp	x5, x1
    16ec:	add	x0, x0, x1
    16f0:	csel	x5, x5, x1, cs  // cs = hs, nlast
    16f4:	neg	x1, x1
    16f8:	and	x1, x1, x0
    16fc:	ldr	x0, [x25, x2, lsl #3]
    1700:	add	x0, x1, x0
    1704:	add	x2, x2, #0x1
    1708:	cmp	x2, x19
    170c:	b.ne	16c8 <gomp_create_target_task+0x23c>  // b.any
    1710:	add	x2, x5, x0
    1714:	cmp	x5, #0x0
    1718:	sub	x2, x2, #0x1
    171c:	csel	x2, x2, xzr, ne  // ne = any
    1720:	b	1564 <gomp_create_target_task+0xd8>
    1724:	mov	x0, #0x0                   	// #0
    1728:	mov	x5, #0x0                   	// #0
    172c:	mov	x6, #0x1                   	// #1
    1730:	b	1708 <gomp_create_target_task+0x27c>
    1734:	ldr	x6, [x24, #32]
    1738:	sub	x0, x5, #0x1
    173c:	add	x6, x6, x2
    1740:	ands	x0, x6, x0
    1744:	b.eq	1750 <gomp_create_target_task+0x2c4>  // b.none
    1748:	sub	x5, x5, x0
    174c:	add	x6, x6, x5
    1750:	mov	x5, #0x0                   	// #0
    1754:	mov	x3, #0x0                   	// #0
    1758:	mov	x11, #0x1                   	// #1
    175c:	cmp	x5, x19
    1760:	b.eq	1648 <gomp_create_target_task+0x1bc>  // b.none
    1764:	ldr	x0, [sp, #120]
    1768:	ldrh	w0, [x0, x5, lsl #1]
    176c:	and	w1, w0, #0xff
    1770:	cmp	w1, #0xc
    1774:	b.ne	17c8 <gomp_create_target_task+0x33c>  // b.any
    1778:	lsr	w0, w0, #8
    177c:	sub	x3, x3, #0x1
    1780:	ldr	x2, [x25, x5, lsl #3]
    1784:	lsl	x0, x11, x0
    1788:	add	x3, x3, x0
    178c:	neg	x0, x0
    1790:	and	x3, x0, x3
    1794:	stp	x5, x6, [sp, #152]
    1798:	add	x12, x6, x3
    179c:	ldr	x0, [sp, #128]
    17a0:	str	x3, [sp, #168]
    17a4:	ldr	x1, [x0, x5, lsl #3]
    17a8:	mov	x0, x12
    17ac:	bl	0 <memcpy>
    17b0:	ldp	x5, x6, [sp, #152]
    17b4:	str	x0, [x28, x5, lsl #3]
    17b8:	ldr	x3, [sp, #168]
    17bc:	mov	x11, #0x1                   	// #1
    17c0:	ldr	x0, [x25, x5, lsl #3]
    17c4:	add	x3, x3, x0
    17c8:	add	x5, x5, #0x1
    17cc:	b	175c <gomp_create_target_task+0x2d0>
    17d0:	cbz	x26, 17f4 <gomp_create_target_task+0x368>
    17d4:	ldrb	w0, [x26, #49]
    17d8:	cbnz	w0, 1684 <gomp_create_target_task+0x1f8>
    17dc:	ldrb	w0, [x26, #50]
    17e0:	cbz	w0, 17f4 <gomp_create_target_task+0x368>
    17e4:	ldr	x0, [x26]
    17e8:	cbz	x0, 17f4 <gomp_create_target_task+0x368>
    17ec:	ldrb	w0, [x0, #49]
    17f0:	cbnz	w0, 1684 <gomp_create_target_task+0x1f8>
    17f4:	ldr	x0, [sp, #104]
    17f8:	cbz	x0, 1830 <gomp_create_target_task+0x3a4>
    17fc:	mov	x0, x23
    1800:	mov	x2, x22
    1804:	mov	x1, x20
    1808:	bl	8f4 <gomp_task_handle_depend>
    180c:	ldr	x0, [x23, #80]
    1810:	cbz	x0, 1830 <gomp_create_target_task+0x3a4>
    1814:	cbz	x26, 1824 <gomp_create_target_task+0x398>
    1818:	ldr	x0, [x26, #56]
    181c:	add	x0, x0, #0x1
    1820:	str	x0, [x26, #56]
    1824:	mov	x0, x19
    1828:	bl	2ac <gomp_mutex_unlock>
    182c:	b	14f8 <gomp_create_target_task+0x6c>
    1830:	ldr	w0, [sp, #184]
    1834:	cbnz	w0, 1860 <gomp_create_target_task+0x3d4>
    1838:	mov	x0, x23
    183c:	bl	c18 <gomp_task_run_post_handle_depend_hash>
    1840:	mov	x0, x19
    1844:	bl	2ac <gomp_mutex_unlock>
    1848:	mov	x0, x23
    184c:	bl	14c <gomp_finish_task>
    1850:	mov	x0, x23
    1854:	mov	w25, #0x0                   	// #0
    1858:	bl	0 <free>
    185c:	b	169c <gomp_create_target_task+0x210>
    1860:	cbz	x26, 1870 <gomp_create_target_task+0x3e4>
    1864:	ldr	x0, [x26, #56]
    1868:	add	x0, x0, #0x1
    186c:	str	x0, [x26, #56]
    1870:	ldr	x0, [sp, #112]
    1874:	add	x1, x20, #0x8
    1878:	ldrb	w6, [x23, #207]
    187c:	mov	w5, #0x0                   	// #0
    1880:	cbz	x0, 1930 <gomp_create_target_task+0x4a4>
    1884:	ldr	w0, [x0, #8]
    1888:	tbz	w0, #2, 1930 <gomp_create_target_task+0x4a4>
    188c:	mov	w4, #0x1                   	// #1
    1890:	mov	x2, x23
    1894:	mov	w0, w4
    1898:	mov	w3, #0x0                   	// #0
    189c:	bl	3bc <priority_queue_insert>
    18a0:	cbz	x26, 18c4 <gomp_create_target_task+0x438>
    18a4:	ldrb	w6, [x23, #207]
    18a8:	mov	x2, x23
    18ac:	add	x1, x26, #0x8
    18b0:	mov	w5, #0x0                   	// #0
    18b4:	mov	w4, #0x1                   	// #1
    18b8:	mov	w3, #0x0                   	// #0
    18bc:	mov	w0, #0x2                   	// #2
    18c0:	bl	3bc <priority_queue_insert>
    18c4:	mov	w0, #0x3                   	// #3
    18c8:	str	w0, [x23, #200]
    18cc:	ldr	w0, [x27, #1320]
    18d0:	stp	xzr, xzr, [x23, #96]
    18d4:	add	w0, w0, #0x1
    18d8:	str	w0, [x27, #1320]
    18dc:	mov	x0, x19
    18e0:	bl	2ac <gomp_mutex_unlock>
    18e4:	ldr	x0, [sp, #96]
    18e8:	add	x21, x21, x0
    18ec:	ldr	x0, [x23, #192]
    18f0:	str	x23, [x21, #80]
    18f4:	bl	0 <gomp_target_task_fn>
    18f8:	str	x20, [x21, #80]
    18fc:	mov	x0, x19
    1900:	bl	1ac <gomp_mutex_lock>
    1904:	ldr	w1, [x24, #44]
    1908:	mov	w0, #0x4                   	// #4
    190c:	str	w0, [x23, #200]
    1910:	cmp	w1, #0x5
    1914:	b.ne	1928 <gomp_create_target_task+0x49c>  // b.any
    1918:	mov	x1, x23
    191c:	mov	x0, x27
    1920:	bl	10d0 <gomp_target_task_completion>
    1924:	b	1824 <gomp_create_target_task+0x398>
    1928:	str	w0, [x24, #44]
    192c:	b	1824 <gomp_create_target_task+0x398>
    1930:	mov	x2, x23
    1934:	mov	w4, #0x0                   	// #0
    1938:	mov	w3, #0x0                   	// #0
    193c:	mov	w0, #0x1                   	// #1
    1940:	bl	3bc <priority_queue_insert>
    1944:	cbz	x26, 1968 <gomp_create_target_task+0x4dc>
    1948:	ldrb	w6, [x23, #207]
    194c:	mov	x2, x23
    1950:	add	x1, x26, #0x8
    1954:	mov	w5, #0x0                   	// #0
    1958:	mov	w4, #0x0                   	// #0
    195c:	mov	w3, #0x0                   	// #0
    1960:	mov	w0, #0x2                   	// #2
    1964:	bl	3bc <priority_queue_insert>
    1968:	ldrb	w6, [x23, #207]
    196c:	mov	x2, x23
    1970:	add	x1, x27, #0x508
    1974:	mov	w5, #0x0                   	// #0
    1978:	mov	w4, #0x1                   	// #1
    197c:	mov	w3, #0x0                   	// #0
    1980:	mov	w0, #0x0                   	// #0
    1984:	bl	3bc <priority_queue_insert>
    1988:	ldrb	w20, [x20, #204]
    198c:	ldr	w0, [x27, #1320]
    1990:	ldr	w21, [x27]
    1994:	eor	w20, w20, #0x1
    1998:	add	w0, w0, #0x1
    199c:	str	w0, [x27, #1320]
    19a0:	ldr	w0, [x27, #1324]
    19a4:	add	w0, w0, #0x1
    19a8:	str	w0, [x27, #1324]
    19ac:	ldr	w0, [x27, #132]
    19b0:	orr	w0, w0, #0x1
    19b4:	str	w0, [x27, #132]
    19b8:	ldr	w0, [x27, #1328]
    19bc:	add	w20, w20, w0
    19c0:	mov	x0, x19
    19c4:	bl	2ac <gomp_mutex_unlock>
    19c8:	cmp	w20, w21
    19cc:	b.cs	14f8 <gomp_create_target_task+0x6c>  // b.hs, b.nlast
    19d0:	add	x0, x27, #0x80
    19d4:	mov	w1, #0x1                   	// #1
    19d8:	bl	0 <gomp_team_barrier_wake>
    19dc:	b	14f8 <gomp_create_target_task+0x6c>

00000000000019e0 <gomp_barrier_handle_tasks>:
    19e0:	stp	x29, x30, [sp, #-144]!
    19e4:	mov	x29, sp
    19e8:	stp	x23, x24, [sp, #48]
    19ec:	adrp	x24, 0 <gomp_tls_data>
    19f0:	ldr	x24, [x24]
    19f4:	stp	x25, x26, [sp, #64]
    19f8:	mrs	x25, tpidr_el0
    19fc:	stp	x21, x22, [sp, #32]
    1a00:	mov	w21, w0
    1a04:	add	x0, x25, x24
    1a08:	stp	x19, x20, [sp, #16]
    1a0c:	ldr	x19, [x0, #16]
    1a10:	stp	x27, x28, [sp, #80]
    1a14:	add	x22, x19, #0x500
    1a18:	ldr	x0, [x0, #80]
    1a1c:	str	x0, [sp, #104]
    1a20:	mov	x0, x22
    1a24:	bl	1ac <gomp_mutex_lock>
    1a28:	tbz	w21, #0, 1a7c <gomp_barrier_handle_tasks+0x9c>
    1a2c:	ldr	w0, [x19, #1320]
    1a30:	cbnz	w0, 1a70 <gomp_barrier_handle_tasks+0x90>
    1a34:	and	w21, w21, #0xfffffff8
    1a38:	mov	x0, x22
    1a3c:	add	w21, w21, #0x8
    1a40:	str	w21, [x19, #132]
    1a44:	bl	2ac <gomp_mutex_unlock>
    1a48:	add	x0, x19, #0x80
    1a4c:	mov	w1, #0x0                   	// #0
    1a50:	bl	0 <gomp_team_barrier_wake>
    1a54:	ldp	x19, x20, [sp, #16]
    1a58:	ldp	x21, x22, [sp, #32]
    1a5c:	ldp	x23, x24, [sp, #48]
    1a60:	ldp	x25, x26, [sp, #64]
    1a64:	ldp	x27, x28, [sp, #80]
    1a68:	ldp	x29, x30, [sp], #144
    1a6c:	ret
    1a70:	ldr	w0, [x19, #132]
    1a74:	orr	w0, w0, #0x2
    1a78:	str	w0, [x19, #132]
    1a7c:	and	w21, w21, #0xfffffff8
    1a80:	add	x28, x19, #0x508
    1a84:	add	x26, x19, #0x80
    1a88:	add	w0, w21, #0x8
    1a8c:	mov	w23, #0x0                   	// #0
    1a90:	mov	x27, #0x0                   	// #0
    1a94:	str	w0, [sp, #116]
    1a98:	ldr	x0, [x19, #1288]
    1a9c:	cbnz	x0, 1aa8 <gomp_barrier_handle_tasks+0xc8>
    1aa0:	ldr	x20, [x28, #16]
    1aa4:	cbz	x20, 1b9c <gomp_barrier_handle_tasks+0x1bc>
    1aa8:	mov	x1, x28
    1aac:	add	x4, sp, #0x8f
    1ab0:	mov	x3, #0x0                   	// #0
    1ab4:	mov	w2, #0x3e7                 	// #999
    1ab8:	mov	w0, #0x0                   	// #0
    1abc:	bl	4b4 <priority_queue_next_task>
    1ac0:	ldr	x1, [x0]
    1ac4:	mov	x20, x0
    1ac8:	mov	x2, x19
    1acc:	bl	11d8 <gomp_task_run_pre>
    1ad0:	ands	w21, w0, #0xff
    1ad4:	b.eq	1b88 <gomp_barrier_handle_tasks+0x1a8>  // b.none
    1ad8:	cbz	x27, 1aec <gomp_barrier_handle_tasks+0x10c>
    1adc:	mov	x0, x27
    1ae0:	bl	14c <gomp_finish_task>
    1ae4:	mov	x0, x27
    1ae8:	bl	0 <free>
    1aec:	mov	x1, x19
    1af0:	mov	x0, x20
    1af4:	bl	d0c <gomp_task_run_post_handle_depend>
    1af8:	mov	x1, x0
    1afc:	mov	x0, x20
    1b00:	str	x1, [sp, #120]
    1b04:	bl	f40 <gomp_task_run_post_remove_parent>
    1b08:	add	x0, x20, #0x8
    1b0c:	bl	574 <gomp_clear_parent>
    1b10:	mov	x0, x20
    1b14:	bl	fcc <gomp_task_run_post_remove_taskgroup>
    1b18:	ldr	x1, [sp, #120]
    1b1c:	cbnz	w21, 1b2c <gomp_barrier_handle_tasks+0x14c>
    1b20:	ldr	w0, [x19, #1328]
    1b24:	sub	w0, w0, #0x1
    1b28:	str	w0, [x19, #1328]
    1b2c:	cmp	x1, #0x1
    1b30:	b.ls	1b48 <gomp_barrier_handle_tasks+0x168>  // b.plast
    1b34:	ldr	w5, [x19]
    1b38:	ldr	w0, [x19, #1328]
    1b3c:	sub	w23, w5, w0
    1b40:	cmp	x1, w23, sxtw
    1b44:	csel	w23, w1, w23, cc  // cc = lo, ul, last
    1b48:	ldr	w0, [x19, #1320]
    1b4c:	sub	w0, w0, #0x1
    1b50:	str	w0, [x19, #1320]
    1b54:	cbnz	w0, 1c30 <gomp_barrier_handle_tasks+0x250>
    1b58:	ldr	w0, [x19, #132]
    1b5c:	tbz	w0, #1, 1c30 <gomp_barrier_handle_tasks+0x250>
    1b60:	ldr	w0, [sp, #116]
    1b64:	str	w0, [x19, #132]
    1b68:	mov	x0, x22
    1b6c:	bl	2ac <gomp_mutex_unlock>
    1b70:	mov	w1, #0x0                   	// #0
    1b74:	mov	x0, x26
    1b78:	bl	0 <gomp_team_barrier_wake>
    1b7c:	mov	x0, x22
    1b80:	bl	1ac <gomp_mutex_lock>
    1b84:	b	1c30 <gomp_barrier_handle_tasks+0x250>
    1b88:	ldr	w0, [x19, #1328]
    1b8c:	add	w0, w0, #0x1
    1b90:	str	w0, [x19, #1328]
    1b94:	mov	w0, #0x1                   	// #1
    1b98:	strb	w0, [x20, #204]
    1b9c:	mov	x0, x22
    1ba0:	bl	2ac <gomp_mutex_unlock>
    1ba4:	cbz	w23, 1bb4 <gomp_barrier_handle_tasks+0x1d4>
    1ba8:	mov	w1, w23
    1bac:	mov	x0, x26
    1bb0:	bl	0 <gomp_team_barrier_wake>
    1bb4:	cbz	x27, 1bc8 <gomp_barrier_handle_tasks+0x1e8>
    1bb8:	mov	x0, x27
    1bbc:	bl	14c <gomp_finish_task>
    1bc0:	mov	x0, x27
    1bc4:	bl	0 <free>
    1bc8:	cbz	x20, 1a54 <gomp_barrier_handle_tasks+0x74>
    1bcc:	ldp	x1, x0, [x20, #184]
    1bd0:	add	x23, x25, x24
    1bd4:	str	x20, [x23, #80]
    1bd8:	cbnz	x1, 1c40 <gomp_barrier_handle_tasks+0x260>
    1bdc:	bl	0 <gomp_target_task_fn>
    1be0:	tst	w0, #0xff
    1be4:	b.eq	1c44 <gomp_barrier_handle_tasks+0x264>  // b.none
    1be8:	ldr	x0, [sp, #104]
    1bec:	str	x0, [x23, #80]
    1bf0:	mov	x0, x22
    1bf4:	bl	1ac <gomp_mutex_lock>
    1bf8:	ldr	w0, [x19, #1328]
    1bfc:	mov	w1, #0x4                   	// #4
    1c00:	str	w1, [x20, #200]
    1c04:	sub	w0, w0, #0x1
    1c08:	str	w0, [x19, #1328]
    1c0c:	ldr	x0, [x20, #192]
    1c10:	ldr	w2, [x0, #44]
    1c14:	cmp	w2, #0x5
    1c18:	b.ne	1c38 <gomp_barrier_handle_tasks+0x258>  // b.any
    1c1c:	mov	x1, x20
    1c20:	mov	x0, x19
    1c24:	bl	10d0 <gomp_target_task_completion>
    1c28:	mov	w23, #0x0                   	// #0
    1c2c:	mov	x20, #0x0                   	// #0
    1c30:	mov	x27, x20
    1c34:	b	1a98 <gomp_barrier_handle_tasks+0xb8>
    1c38:	str	w1, [x0, #44]
    1c3c:	b	1c28 <gomp_barrier_handle_tasks+0x248>
    1c40:	blr	x1
    1c44:	ldr	x1, [sp, #104]
    1c48:	add	x0, x25, x24
    1c4c:	mov	w21, #0x0                   	// #0
    1c50:	mov	w23, #0x0                   	// #0
    1c54:	str	x1, [x0, #80]
    1c58:	mov	x0, x22
    1c5c:	bl	1ac <gomp_mutex_lock>
    1c60:	b	1aec <gomp_barrier_handle_tasks+0x10c>

0000000000001c64 <GOMP_taskwait>:
    1c64:	stp	x29, x30, [sp, #-144]!
    1c68:	mov	x29, sp
    1c6c:	stp	x25, x26, [sp, #64]
    1c70:	adrp	x26, 0 <gomp_tls_data>
    1c74:	ldr	x26, [x26]
    1c78:	stp	x27, x28, [sp, #80]
    1c7c:	mrs	x27, tpidr_el0
    1c80:	add	x0, x27, x26
    1c84:	stp	x21, x22, [sp, #32]
    1c88:	ldr	x21, [x0, #80]
    1c8c:	stp	x19, x20, [sp, #16]
    1c90:	stp	x23, x24, [sp, #48]
    1c94:	cbz	x21, 1d1c <GOMP_taskwait+0xb8>
    1c98:	ldr	x22, [x0, #16]
    1c9c:	add	x25, x21, #0x8
    1ca0:	ldr	x0, [x21, #8]
    1ca4:	cbz	x0, 1d38 <GOMP_taskwait+0xd4>
    1ca8:	ldar	x0, [x25]
    1cac:	cmp	x0, #0x0
    1cb0:	cset	w0, eq  // eq = none
    1cb4:	cbnz	w0, 1d1c <GOMP_taskwait+0xb8>
    1cb8:	add	x24, x22, #0x500
    1cbc:	strb	wzr, [sp, #119]
    1cc0:	mov	x0, x24
    1cc4:	stp	xzr, xzr, [sp, #120]
    1cc8:	add	x28, sp, #0x78
    1ccc:	str	xzr, [sp, #136]
    1cd0:	bl	1ac <gomp_mutex_lock>
    1cd4:	add	x0, x22, #0x508
    1cd8:	mov	w20, #0x0                   	// #0
    1cdc:	mov	x23, #0x0                   	// #0
    1ce0:	str	x0, [sp, #96]
    1ce4:	add	x0, x28, #0x10
    1ce8:	str	x0, [sp, #104]
    1cec:	ldr	x0, [x21, #8]
    1cf0:	cbnz	x0, 1d44 <GOMP_taskwait+0xe0>
    1cf4:	ldr	x0, [x25, #16]
    1cf8:	cbnz	x0, 1d44 <GOMP_taskwait+0xe0>
    1cfc:	str	xzr, [x21, #64]
    1d00:	mov	x0, x24
    1d04:	bl	2ac <gomp_mutex_unlock>
    1d08:	cbz	x23, 1d1c <GOMP_taskwait+0xb8>
    1d0c:	mov	x0, x23
    1d10:	bl	14c <gomp_finish_task>
    1d14:	mov	x0, x23
    1d18:	bl	0 <free>
    1d1c:	ldp	x19, x20, [sp, #16]
    1d20:	ldp	x21, x22, [sp, #32]
    1d24:	ldp	x23, x24, [sp, #48]
    1d28:	ldp	x25, x26, [sp, #64]
    1d2c:	ldp	x27, x28, [sp, #80]
    1d30:	ldp	x29, x30, [sp], #144
    1d34:	ret
    1d38:	add	x0, x21, #0x18
    1d3c:	ldar	x0, [x0]
    1d40:	b	1cac <GOMP_taskwait+0x48>
    1d44:	ldr	x3, [sp, #96]
    1d48:	mov	x1, x25
    1d4c:	add	x4, sp, #0x77
    1d50:	mov	w2, #0x0                   	// #0
    1d54:	mov	w0, #0x1                   	// #1
    1d58:	bl	4b4 <priority_queue_next_task>
    1d5c:	ldr	w1, [x0, #200]
    1d60:	mov	x19, x0
    1d64:	cmp	w1, #0x2
    1d68:	b.ne	1e0c <GOMP_taskwait+0x1a8>  // b.any
    1d6c:	mov	x2, x22
    1d70:	mov	x1, x21
    1d74:	bl	11d8 <gomp_task_run_pre>
    1d78:	tst	w0, #0xff
    1d7c:	b.eq	1e2c <GOMP_taskwait+0x1c8>  // b.none
    1d80:	cbz	x23, 1d94 <GOMP_taskwait+0x130>
    1d84:	mov	x0, x23
    1d88:	bl	14c <gomp_finish_task>
    1d8c:	mov	x0, x23
    1d90:	bl	0 <free>
    1d94:	mov	x1, x22
    1d98:	mov	x0, x19
    1d9c:	bl	d0c <gomp_task_run_post_handle_depend>
    1da0:	mov	x23, x0
    1da4:	ldrb	w0, [sp, #119]
    1da8:	cbz	w0, 1dc4 <GOMP_taskwait+0x160>
    1dac:	mov	x2, x19
    1db0:	mov	x1, x25
    1db4:	mov	w3, #0x0                   	// #0
    1db8:	mov	w0, #0x1                   	// #1
    1dbc:	bl	e9c <priority_queue_remove>
    1dc0:	stp	xzr, xzr, [x19, #112]
    1dc4:	add	x0, x19, #0x8
    1dc8:	bl	574 <gomp_clear_parent>
    1dcc:	mov	x0, x19
    1dd0:	bl	fcc <gomp_task_run_post_remove_taskgroup>
    1dd4:	ldr	w0, [x22, #1320]
    1dd8:	cmp	x23, #0x1
    1ddc:	sub	w0, w0, #0x1
    1de0:	str	w0, [x22, #1320]
    1de4:	b.ls	1eb0 <GOMP_taskwait+0x24c>  // b.plast
    1de8:	ldr	w0, [x22, #1328]
    1dec:	ldr	w20, [x22]
    1df0:	sub	w20, w20, w0
    1df4:	ldrb	w0, [x21, #204]
    1df8:	eor	w0, w0, #0x1
    1dfc:	sub	w20, w20, w0
    1e00:	cmp	x23, w20, sxtw
    1e04:	csel	w20, w23, w20, cc  // cc = lo, ul, last
    1e08:	b	1eb0 <GOMP_taskwait+0x24c>
    1e0c:	ldr	x0, [x21, #64]
    1e10:	cbnz	x0, 1e20 <GOMP_taskwait+0x1bc>
    1e14:	str	x28, [x21, #64]
    1e18:	strb	wzr, [sp, #121]
    1e1c:	str	wzr, [sp, #136]
    1e20:	mov	w0, #0x1                   	// #1
    1e24:	mov	x19, #0x0                   	// #0
    1e28:	strb	w0, [sp, #120]
    1e2c:	mov	x0, x24
    1e30:	bl	2ac <gomp_mutex_unlock>
    1e34:	cbz	w20, 1e44 <GOMP_taskwait+0x1e0>
    1e38:	mov	w1, w20
    1e3c:	add	x0, x22, #0x80
    1e40:	bl	0 <gomp_team_barrier_wake>
    1e44:	cbz	x23, 1e58 <GOMP_taskwait+0x1f4>
    1e48:	mov	x0, x23
    1e4c:	bl	14c <gomp_finish_task>
    1e50:	mov	x0, x23
    1e54:	bl	0 <free>
    1e58:	cbz	x19, 1ee0 <GOMP_taskwait+0x27c>
    1e5c:	ldp	x1, x0, [x19, #184]
    1e60:	add	x20, x27, x26
    1e64:	str	x19, [x20, #80]
    1e68:	cbnz	x1, 1ec0 <GOMP_taskwait+0x25c>
    1e6c:	bl	0 <gomp_target_task_fn>
    1e70:	tst	w0, #0xff
    1e74:	b.eq	1ec4 <GOMP_taskwait+0x260>  // b.none
    1e78:	mov	x0, x24
    1e7c:	str	x21, [x20, #80]
    1e80:	bl	1ac <gomp_mutex_lock>
    1e84:	ldr	x0, [x19, #192]
    1e88:	mov	w1, #0x4                   	// #4
    1e8c:	ldr	w2, [x0, #44]
    1e90:	str	w1, [x19, #200]
    1e94:	cmp	w2, #0x5
    1e98:	b.ne	1eb8 <GOMP_taskwait+0x254>  // b.any
    1e9c:	mov	x1, x19
    1ea0:	mov	x0, x22
    1ea4:	bl	10d0 <gomp_target_task_completion>
    1ea8:	mov	w20, #0x0                   	// #0
    1eac:	mov	x19, #0x0                   	// #0
    1eb0:	mov	x23, x19
    1eb4:	b	1cec <GOMP_taskwait+0x88>
    1eb8:	str	w1, [x0, #44]
    1ebc:	b	1ea8 <GOMP_taskwait+0x244>
    1ec0:	blr	x1
    1ec4:	add	x0, x27, x26
    1ec8:	str	x21, [x0, #80]
    1ecc:	mov	x0, x24
    1ed0:	mov	w20, #0x0                   	// #0
    1ed4:	bl	1ac <gomp_mutex_lock>
    1ed8:	cbnz	x19, 1d94 <GOMP_taskwait+0x130>
    1edc:	b	1eb0 <GOMP_taskwait+0x24c>
    1ee0:	ldr	x0, [sp, #104]
    1ee4:	bl	2fc <gomp_sem_wait>
    1ee8:	b	1ecc <GOMP_taskwait+0x268>

0000000000001eec <gomp_task_maybe_wait_for_dependencies>:
    1eec:	stp	x29, x30, [sp, #-224]!
    1ef0:	mov	x29, sp
    1ef4:	stp	x25, x26, [sp, #64]
    1ef8:	adrp	x26, 0 <gomp_tls_data>
    1efc:	ldr	x26, [x26]
    1f00:	stp	x27, x28, [sp, #80]
    1f04:	mrs	x27, tpidr_el0
    1f08:	stp	x23, x24, [sp, #48]
    1f0c:	mov	x24, x0
    1f10:	add	x0, x27, x26
    1f14:	stp	x19, x20, [sp, #16]
    1f18:	stp	x21, x22, [sp, #32]
    1f1c:	ldr	x20, [x0, #16]
    1f20:	ldr	x19, [x0, #80]
    1f24:	ldp	x22, x0, [x24]
    1f28:	cbz	x22, 1f94 <gomp_task_maybe_wait_for_dependencies+0xa8>
    1f2c:	mov	x23, x0
    1f30:	mov	x28, #0x2                   	// #2
    1f34:	str	x22, [sp, #104]
    1f38:	add	x21, x20, #0x500
    1f3c:	mov	x0, x21
    1f40:	bl	1ac <gomp_mutex_lock>
    1f44:	add	x0, x24, x28, lsl #3
    1f48:	str	x0, [sp, #112]
    1f4c:	add	x0, x19, #0x8
    1f50:	mov	x24, #0x0                   	// #0
    1f54:	mov	x28, #0x0                   	// #0
    1f58:	str	x0, [sp, #120]
    1f5c:	add	x0, x19, #0x10
    1f60:	str	x0, [sp, #128]
    1f64:	cmp	x22, x28
    1f68:	b.ne	1fb4 <gomp_task_maybe_wait_for_dependencies+0xc8>  // b.any
    1f6c:	cbnz	x24, 2098 <gomp_task_maybe_wait_for_dependencies+0x1ac>
    1f70:	mov	x0, x21
    1f74:	bl	2ac <gomp_mutex_unlock>
    1f78:	ldp	x19, x20, [sp, #16]
    1f7c:	ldp	x21, x22, [sp, #32]
    1f80:	ldp	x23, x24, [sp, #48]
    1f84:	ldp	x25, x26, [sp, #64]
    1f88:	ldp	x27, x28, [sp, #80]
    1f8c:	ldp	x29, x30, [sp], #224
    1f90:	ret
    1f94:	ldp	x23, x1, [x24, #16]
    1f98:	mov	x22, x0
    1f9c:	ldr	x25, [x24, #32]
    1fa0:	mov	x28, #0x5                   	// #5
    1fa4:	add	x23, x23, x1
    1fa8:	add	x1, x25, x23
    1fac:	str	x1, [sp, #104]
    1fb0:	b	1f38 <gomp_task_maybe_wait_for_dependencies+0x4c>
    1fb4:	cmp	x23, x28
    1fb8:	cset	w1, ls  // ls = plast
    1fbc:	strb	w1, [sp, #216]
    1fc0:	ldp	x1, x0, [sp, #104]
    1fc4:	ldr	x0, [x0, x28, lsl #3]
    1fc8:	str	x0, [sp, #184]
    1fcc:	cmp	x1, x28
    1fd0:	b.hi	1ff8 <gomp_task_maybe_wait_for_dependencies+0x10c>  // b.pmore
    1fd4:	ldr	x1, [x0, #8]
    1fd8:	cmp	x1, #0x1
    1fdc:	b.eq	1ff0 <gomp_task_maybe_wait_for_dependencies+0x104>  // b.none
    1fe0:	sub	x2, x1, #0x2
    1fe4:	cmp	x2, #0x2
    1fe8:	b.hi	2014 <gomp_task_maybe_wait_for_dependencies+0x128>  // b.pmore
    1fec:	strb	wzr, [sp, #216]
    1ff0:	ldr	x0, [x0]
    1ff4:	str	x0, [sp, #184]
    1ff8:	ldr	x0, [x19, #56]
    1ffc:	add	x1, sp, #0xb8
    2000:	bl	5fc <htab_find>
    2004:	mov	x25, x0
    2008:	cbnz	x25, 2020 <gomp_task_maybe_wait_for_dependencies+0x134>
    200c:	add	x28, x28, #0x1
    2010:	b	1f64 <gomp_task_maybe_wait_for_dependencies+0x78>
    2014:	adrp	x0, 0 <htab_mod_m2>
    2018:	add	x0, x0, #0x0
    201c:	bl	0 <gomp_fatal>
    2020:	ldrb	w0, [sp, #216]
    2024:	cbz	w0, 2030 <gomp_task_maybe_wait_for_dependencies+0x144>
    2028:	ldrb	w0, [x25, #32]
    202c:	cbnz	w0, 2084 <gomp_task_maybe_wait_for_dependencies+0x198>
    2030:	ldr	x0, [x25, #24]
    2034:	ldrb	w1, [x0, #207]
    2038:	cbnz	w1, 2084 <gomp_task_maybe_wait_for_dependencies+0x198>
    203c:	mov	w1, #0x1                   	// #1
    2040:	strb	w1, [x0, #207]
    2044:	ldr	x1, [x0, #80]
    2048:	add	x24, x24, #0x1
    204c:	cbnz	x1, 2084 <gomp_task_maybe_wait_for_dependencies+0x198>
    2050:	ldr	w1, [x0, #200]
    2054:	cmp	w1, #0x2
    2058:	b.ne	2084 <gomp_task_maybe_wait_for_dependencies+0x198>  // b.any
    205c:	ldr	x1, [x19, #8]
    2060:	add	x4, x0, #0x70
    2064:	cbz	x1, 208c <gomp_task_maybe_wait_for_dependencies+0x1a0>
    2068:	ldr	w1, [x0, #88]
    206c:	ldr	x0, [sp, #120]
    2070:	str	x4, [sp, #136]
    2074:	bl	280 <priority_queue_lookup_priority>
    2078:	ldr	x4, [sp, #136]
    207c:	mov	x1, x4
    2080:	bl	44 <priority_list_upgrade_task>
    2084:	ldr	x25, [x25, #8]
    2088:	b	2008 <gomp_task_maybe_wait_for_dependencies+0x11c>
    208c:	mov	x1, x4
    2090:	ldr	x0, [sp, #128]
    2094:	b	2080 <gomp_task_maybe_wait_for_dependencies+0x194>
    2098:	add	x25, sp, #0xa0
    209c:	add	x28, x19, #0x8
    20a0:	str	x25, [x19, #64]
    20a4:	add	x25, sp, #0xb0
    20a8:	stp	xzr, xzr, [sp, #160]
    20ac:	mov	w23, #0x0                   	// #0
    20b0:	stp	x24, xzr, [sp, #168]
    20b4:	mov	x24, #0x0                   	// #0
    20b8:	mov	x1, x28
    20bc:	add	x4, sp, #0x9f
    20c0:	mov	x3, #0x0                   	// #0
    20c4:	mov	w2, #0x3e7                 	// #999
    20c8:	mov	w0, #0x1                   	// #1
    20cc:	bl	4b4 <priority_queue_next_task>
    20d0:	ldr	w1, [x0, #200]
    20d4:	mov	x22, x0
    20d8:	cmp	w1, #0x2
    20dc:	b.ne	218c <gomp_task_maybe_wait_for_dependencies+0x2a0>  // b.any
    20e0:	mov	x2, x20
    20e4:	mov	x1, x19
    20e8:	bl	11d8 <gomp_task_run_pre>
    20ec:	tst	w0, #0xff
    20f0:	b.eq	2198 <gomp_task_maybe_wait_for_dependencies+0x2ac>  // b.none
    20f4:	cbz	x24, 2108 <gomp_task_maybe_wait_for_dependencies+0x21c>
    20f8:	mov	x0, x24
    20fc:	bl	14c <gomp_finish_task>
    2100:	mov	x0, x24
    2104:	bl	0 <free>
    2108:	mov	x1, x20
    210c:	mov	x0, x22
    2110:	bl	d0c <gomp_task_run_post_handle_depend>
    2114:	mov	x24, x0
    2118:	ldrb	w0, [x22, #207]
    211c:	cbz	w0, 212c <gomp_task_maybe_wait_for_dependencies+0x240>
    2120:	ldr	x0, [sp, #168]
    2124:	sub	x0, x0, #0x1
    2128:	str	x0, [sp, #168]
    212c:	mov	x2, x22
    2130:	mov	x1, x28
    2134:	mov	w3, #0x0                   	// #0
    2138:	mov	w0, #0x1                   	// #1
    213c:	bl	e9c <priority_queue_remove>
    2140:	stp	xzr, xzr, [x22, #112]
    2144:	add	x0, x22, #0x8
    2148:	bl	574 <gomp_clear_parent>
    214c:	mov	x0, x22
    2150:	bl	fcc <gomp_task_run_post_remove_taskgroup>
    2154:	ldr	w0, [x20, #1320]
    2158:	cmp	x24, #0x1
    215c:	sub	w0, w0, #0x1
    2160:	str	w0, [x20, #1320]
    2164:	b.ls	226c <gomp_task_maybe_wait_for_dependencies+0x380>  // b.plast
    2168:	ldr	w0, [x20, #1328]
    216c:	ldr	w23, [x20]
    2170:	sub	w23, w23, w0
    2174:	ldrb	w0, [x19, #204]
    2178:	eor	w0, w0, #0x1
    217c:	sub	w23, w23, w0
    2180:	cmp	x24, w23, sxtw
    2184:	csel	w23, w24, w23, cc  // cc = lo, ul, last
    2188:	b	226c <gomp_task_maybe_wait_for_dependencies+0x380>
    218c:	mov	w0, #0x1                   	// #1
    2190:	mov	x22, #0x0                   	// #0
    2194:	strb	w0, [sp, #161]
    2198:	mov	x0, x21
    219c:	bl	2ac <gomp_mutex_unlock>
    21a0:	cbz	w23, 21b0 <gomp_task_maybe_wait_for_dependencies+0x2c4>
    21a4:	mov	w1, w23
    21a8:	add	x0, x20, #0x80
    21ac:	bl	0 <gomp_team_barrier_wake>
    21b0:	cbz	x24, 21c4 <gomp_task_maybe_wait_for_dependencies+0x2d8>
    21b4:	mov	x0, x24
    21b8:	bl	14c <gomp_finish_task>
    21bc:	mov	x0, x24
    21c0:	bl	0 <free>
    21c4:	cbz	x22, 2274 <gomp_task_maybe_wait_for_dependencies+0x388>
    21c8:	ldp	x1, x0, [x22, #184]
    21cc:	add	x23, x27, x26
    21d0:	str	x22, [x23, #80]
    21d4:	cbnz	x1, 2250 <gomp_task_maybe_wait_for_dependencies+0x364>
    21d8:	bl	0 <gomp_target_task_fn>
    21dc:	tst	w0, #0xff
    21e0:	b.eq	2254 <gomp_task_maybe_wait_for_dependencies+0x368>  // b.none
    21e4:	mov	x0, x21
    21e8:	str	x19, [x23, #80]
    21ec:	bl	1ac <gomp_mutex_lock>
    21f0:	ldr	x0, [x22, #192]
    21f4:	mov	w1, #0x4                   	// #4
    21f8:	ldr	w2, [x0, #44]
    21fc:	str	w1, [x22, #200]
    2200:	cmp	w2, #0x5
    2204:	b.ne	2248 <gomp_task_maybe_wait_for_dependencies+0x35c>  // b.any
    2208:	mov	x1, x22
    220c:	mov	x0, x20
    2210:	bl	10d0 <gomp_target_task_completion>
    2214:	mov	w23, #0x0                   	// #0
    2218:	mov	x24, #0x0                   	// #0
    221c:	ldr	x0, [sp, #168]
    2220:	cbnz	x0, 20b8 <gomp_task_maybe_wait_for_dependencies+0x1cc>
    2224:	str	xzr, [x19, #64]
    2228:	mov	x0, x21
    222c:	bl	2ac <gomp_mutex_unlock>
    2230:	cbz	x24, 1f78 <gomp_task_maybe_wait_for_dependencies+0x8c>
    2234:	mov	x0, x24
    2238:	bl	14c <gomp_finish_task>
    223c:	mov	x0, x24
    2240:	bl	0 <free>
    2244:	b	1f78 <gomp_task_maybe_wait_for_dependencies+0x8c>
    2248:	str	w1, [x0, #44]
    224c:	b	2214 <gomp_task_maybe_wait_for_dependencies+0x328>
    2250:	blr	x1
    2254:	add	x0, x27, x26
    2258:	str	x19, [x0, #80]
    225c:	mov	x0, x21
    2260:	mov	w23, #0x0                   	// #0
    2264:	bl	1ac <gomp_mutex_lock>
    2268:	cbnz	x22, 2108 <gomp_task_maybe_wait_for_dependencies+0x21c>
    226c:	mov	x24, x22
    2270:	b	221c <gomp_task_maybe_wait_for_dependencies+0x330>
    2274:	mov	x0, x25
    2278:	bl	2fc <gomp_sem_wait>
    227c:	b	225c <gomp_task_maybe_wait_for_dependencies+0x370>

0000000000002280 <GOMP_task>:
    2280:	stp	x29, x30, [sp, #-368]!
    2284:	mov	x9, x1
    2288:	and	w5, w5, #0xff
    228c:	mov	x29, sp
    2290:	stp	x19, x20, [sp, #16]
    2294:	stp	x21, x22, [sp, #32]
    2298:	mov	x22, x4
    229c:	adrp	x21, 0 <gomp_tls_data>
    22a0:	ldr	x21, [x21]
    22a4:	stp	x23, x24, [sp, #48]
    22a8:	ldr	w1, [x29, #368]
    22ac:	stp	x25, x26, [sp, #64]
    22b0:	mrs	x25, tpidr_el0
    22b4:	stp	x27, x28, [sp, #80]
    22b8:	mov	x27, x7
    22bc:	str	x2, [x29, #152]
    22c0:	adrp	x2, 0 <gomp_cancel_var>
    22c4:	stp	x3, x0, [x29, #128]
    22c8:	add	x0, x25, x21
    22cc:	ldrb	w3, [x2]
    22d0:	str	x2, [x29, #120]
    22d4:	str	w6, [x29, #144]
    22d8:	ldr	x19, [x0, #16]
    22dc:	cbz	w3, 2318 <GOMP_task+0x98>
    22e0:	cbz	x19, 2318 <GOMP_task+0x98>
    22e4:	ldr	w2, [x19, #132]
    22e8:	tbnz	w2, #2, 2484 <GOMP_task+0x204>
    22ec:	ldr	x0, [x0, #80]
    22f0:	ldr	x0, [x0, #40]
    22f4:	cbz	x0, 2318 <GOMP_task+0x98>
    22f8:	ldrb	w2, [x0, #49]
    22fc:	cbnz	w2, 2484 <GOMP_task+0x204>
    2300:	ldrb	w2, [x0, #50]
    2304:	cbz	w2, 2318 <GOMP_task+0x98>
    2308:	ldr	x0, [x0]
    230c:	cbz	x0, 2318 <GOMP_task+0x98>
    2310:	ldrb	w0, [x0, #49]
    2314:	cbnz	w0, 2484 <GOMP_task+0x204>
    2318:	ldr	x0, [x29, #144]
    231c:	tbz	w0, #4, 24a4 <GOMP_task+0x224>
    2320:	adrp	x0, 0 <gomp_max_task_priority_var>
    2324:	ldr	w23, [x0]
    2328:	cmp	w23, w1
    232c:	csel	w23, w23, w1, le
    2330:	add	x0, x25, x21
    2334:	cmp	x19, #0x0
    2338:	ldr	x20, [x0, #80]
    233c:	eor	w0, w5, #0x1
    2340:	cset	w5, eq  // eq = none
    2344:	orr	w5, w5, w0
    2348:	ldr	w0, [x29, #144]
    234c:	and	w0, w0, #0x8
    2350:	cbnz	w5, 2370 <GOMP_task+0xf0>
    2354:	cbz	x20, 2360 <GOMP_task+0xe0>
    2358:	ldrb	w1, [x20, #205]
    235c:	cbnz	w1, 2370 <GOMP_task+0xf0>
    2360:	ldr	w2, [x19]
    2364:	ldr	w1, [x19, #1320]
    2368:	cmp	w1, w2, lsl #6
    236c:	b.ls	24bc <GOMP_task+0x23c>  // b.plast
    2370:	cbz	w0, 2390 <GOMP_task+0x110>
    2374:	cbz	x20, 2390 <GOMP_task+0x110>
    2378:	ldr	x0, [x20, #56]
    237c:	cbz	x0, 2390 <GOMP_task+0x110>
    2380:	mov	x0, x27
    2384:	str	x9, [x29, #120]
    2388:	bl	1eec <gomp_task_maybe_wait_for_dependencies>
    238c:	ldr	x9, [x29, #120]
    2390:	add	x7, x25, x21
    2394:	add	x20, x29, #0xa0
    2398:	adrp	x0, 0 <gomp_global_icv>
    239c:	add	x0, x0, #0x0
    23a0:	str	x9, [x29, #120]
    23a4:	ldr	x1, [x7, #80]
    23a8:	cmp	x1, #0x0
    23ac:	add	x2, x1, #0x90
    23b0:	csel	x2, x0, x2, eq  // eq = none
    23b4:	mov	x0, x20
    23b8:	bl	12ec <gomp_init_task>
    23bc:	ldr	x0, [x7, #80]
    23c0:	mov	w6, #0x1                   	// #1
    23c4:	str	w6, [x29, #360]
    23c8:	ldr	x9, [x29, #120]
    23cc:	cbz	x0, 23d8 <GOMP_task+0x158>
    23d0:	ldrb	w1, [x0, #205]
    23d4:	cbnz	w1, 23e0 <GOMP_task+0x160>
    23d8:	ldr	x1, [x29, #144]
    23dc:	ubfx	x6, x1, #1, #1
    23e0:	str	w23, [x29, #248]
    23e4:	strb	w6, [x29, #365]
    23e8:	cbz	x0, 23fc <GOMP_task+0x17c>
    23ec:	ldrb	w1, [x0, #204]
    23f0:	ldr	x0, [x0, #40]
    23f4:	str	x0, [x29, #200]
    23f8:	strb	w1, [x29, #364]
    23fc:	add	x25, x25, x21
    2400:	ldr	x0, [x29, #152]
    2404:	str	x20, [x25, #80]
    2408:	cbz	x0, 24ac <GOMP_task+0x22c>
    240c:	ldr	x0, [x29, #128]
    2410:	mov	x23, sp
    2414:	ldr	x2, [x29, #152]
    2418:	add	x21, x0, x22
    241c:	add	x21, x21, #0xe
    2420:	sub	x0, x22, #0x1
    2424:	and	x21, x21, #0xfffffffffffffff0
    2428:	neg	x22, x22
    242c:	sub	sp, sp, x21
    2430:	mov	x1, x9
    2434:	add	x0, sp, x0
    2438:	and	x22, x0, x22
    243c:	mov	x0, x22
    2440:	blr	x2
    2444:	ldr	x1, [x29, #136]
    2448:	mov	x0, x22
    244c:	blr	x1
    2450:	mov	sp, x23
    2454:	ldr	x0, [x29, #168]
    2458:	cbnz	x0, 2464 <GOMP_task+0x1e4>
    245c:	ldr	x0, [x29, #184]
    2460:	cbz	x0, 2480 <GOMP_task+0x200>
    2464:	add	x19, x19, #0x500
    2468:	mov	x0, x19
    246c:	bl	1ac <gomp_mutex_lock>
    2470:	add	x0, x20, #0x8
    2474:	bl	574 <gomp_clear_parent>
    2478:	mov	x0, x19
    247c:	bl	2ac <gomp_mutex_unlock>
    2480:	bl	1328 <gomp_end_task>
    2484:	mov	sp, x29
    2488:	ldp	x19, x20, [sp, #16]
    248c:	ldp	x21, x22, [sp, #32]
    2490:	ldp	x23, x24, [sp, #48]
    2494:	ldp	x25, x26, [sp, #64]
    2498:	ldp	x27, x28, [sp, #80]
    249c:	ldp	x29, x30, [sp], #368
    24a0:	ret
    24a4:	mov	w23, #0x0                   	// #0
    24a8:	b	2330 <GOMP_task+0xb0>
    24ac:	ldr	x1, [x29, #136]
    24b0:	mov	x0, x9
    24b4:	blr	x1
    24b8:	b	2454 <GOMP_task+0x1d4>
    24bc:	ldr	x26, [x20, #40]
    24c0:	cbz	w0, 25dc <GOMP_task+0x35c>
    24c4:	ldr	x0, [x27]
    24c8:	mov	x24, #0x28                  	// #40
    24cc:	cbz	x0, 25d4 <GOMP_task+0x354>
    24d0:	mul	x24, x0, x24
    24d4:	ldr	x0, [x29, #128]
    24d8:	add	x1, x22, #0xcf
    24dc:	stp	x9, x1, [x29, #104]
    24e0:	neg	x22, x22
    24e4:	add	x0, x1, x0
    24e8:	add	x0, x0, x24
    24ec:	bl	0 <gomp_malloc>
    24f0:	add	x6, x25, x21
    24f4:	mov	x28, x0
    24f8:	ldr	x1, [x29, #112]
    24fc:	ldr	x3, [x6, #80]
    2500:	add	x1, x1, x24
    2504:	add	x1, x0, x1
    2508:	cmp	x3, #0x0
    250c:	add	x2, x3, #0x90
    2510:	and	x22, x1, x22
    2514:	adrp	x1, 0 <gomp_global_icv>
    2518:	add	x1, x1, #0x0
    251c:	csel	x2, x1, x2, eq  // eq = none
    2520:	mov	x1, x20
    2524:	bl	12ec <gomp_init_task>
    2528:	str	x28, [x6, #80]
    252c:	ldrb	w0, [x20, #204]
    2530:	mov	w2, #0x1                   	// #1
    2534:	strb	w0, [x28, #204]
    2538:	ldr	x0, [x29, #152]
    253c:	str	x26, [x28, #40]
    2540:	str	w23, [x28, #88]
    2544:	str	w2, [x28, #200]
    2548:	ldr	x9, [x29, #104]
    254c:	cbz	x0, 25e4 <GOMP_task+0x364>
    2550:	ldr	x2, [x29, #152]
    2554:	mov	x1, x9
    2558:	mov	x0, x22
    255c:	blr	x2
    2560:	mov	w2, #0x1                   	// #1
    2564:	strb	w2, [x28, #206]
    2568:	mov	w0, #0x2                   	// #2
    256c:	str	w0, [x28, #200]
    2570:	ldr	x0, [x29, #136]
    2574:	str	x0, [x28, #184]
    2578:	ldr	x0, [x29, #144]
    257c:	add	x25, x25, x21
    2580:	add	x21, x19, #0x500
    2584:	str	x22, [x28, #192]
    2588:	ubfx	x6, x0, #1, #1
    258c:	mov	x0, x21
    2590:	str	x20, [x25, #80]
    2594:	strb	w6, [x28, #205]
    2598:	bl	1ac <gomp_mutex_lock>
    259c:	ldr	x0, [x29, #120]
    25a0:	ldrb	w0, [x0]
    25a4:	cbz	w0, 262c <GOMP_task+0x3ac>
    25a8:	ldrb	w0, [x28, #206]
    25ac:	cbnz	w0, 262c <GOMP_task+0x3ac>
    25b0:	ldr	w0, [x19, #132]
    25b4:	tbz	w0, #2, 25f8 <GOMP_task+0x378>
    25b8:	mov	x0, x21
    25bc:	bl	2ac <gomp_mutex_unlock>
    25c0:	mov	x0, x28
    25c4:	bl	14c <gomp_finish_task>
    25c8:	mov	x0, x28
    25cc:	bl	0 <free>
    25d0:	b	2484 <GOMP_task+0x204>
    25d4:	ldr	x0, [x27, #8]
    25d8:	b	24d0 <GOMP_task+0x250>
    25dc:	mov	x24, #0x0                   	// #0
    25e0:	b	24d4 <GOMP_task+0x254>
    25e4:	ldr	x2, [x29, #128]
    25e8:	mov	x1, x9
    25ec:	mov	x0, x22
    25f0:	bl	0 <memcpy>
    25f4:	b	2568 <GOMP_task+0x2e8>
    25f8:	cbz	x26, 2630 <GOMP_task+0x3b0>
    25fc:	ldrb	w0, [x26, #49]
    2600:	cbnz	w0, 25b8 <GOMP_task+0x338>
    2604:	ldrb	w0, [x26, #50]
    2608:	cbz	w0, 261c <GOMP_task+0x39c>
    260c:	ldr	x0, [x26]
    2610:	cbz	x0, 261c <GOMP_task+0x39c>
    2614:	ldrb	w0, [x0, #49]
    2618:	cbnz	w0, 25b8 <GOMP_task+0x338>
    261c:	ldr	x0, [x26, #56]
    2620:	add	x0, x0, #0x1
    2624:	str	x0, [x26, #56]
    2628:	b	2630 <GOMP_task+0x3b0>
    262c:	cbnz	x26, 261c <GOMP_task+0x39c>
    2630:	cbz	x24, 2658 <GOMP_task+0x3d8>
    2634:	mov	x0, x28
    2638:	mov	x2, x27
    263c:	mov	x1, x20
    2640:	bl	8f4 <gomp_task_handle_depend>
    2644:	ldr	x0, [x28, #80]
    2648:	cbz	x0, 2658 <GOMP_task+0x3d8>
    264c:	mov	x0, x21
    2650:	bl	2ac <gomp_mutex_unlock>
    2654:	b	2484 <GOMP_task+0x204>
    2658:	ldrb	w6, [x28, #207]
    265c:	mov	w3, w23
    2660:	mov	x2, x28
    2664:	add	x1, x20, #0x8
    2668:	mov	w5, #0x0                   	// #0
    266c:	mov	w4, #0x0                   	// #0
    2670:	mov	w0, #0x1                   	// #1
    2674:	bl	3bc <priority_queue_insert>
    2678:	cbz	x26, 269c <GOMP_task+0x41c>
    267c:	ldrb	w6, [x28, #207]
    2680:	mov	w3, w23
    2684:	mov	x2, x28
    2688:	add	x1, x26, #0x8
    268c:	mov	w5, #0x0                   	// #0
    2690:	mov	w4, #0x0                   	// #0
    2694:	mov	w0, #0x2                   	// #2
    2698:	bl	3bc <priority_queue_insert>
    269c:	ldrb	w6, [x28, #207]
    26a0:	mov	w3, w23
    26a4:	mov	x2, x28
    26a8:	add	x1, x19, #0x508
    26ac:	mov	w5, #0x0                   	// #0
    26b0:	mov	w4, #0x1                   	// #1
    26b4:	mov	w0, #0x0                   	// #0
    26b8:	bl	3bc <priority_queue_insert>
    26bc:	ldrb	w20, [x20, #204]
    26c0:	ldr	w0, [x19, #1320]
    26c4:	ldr	w22, [x19]
    26c8:	eor	w20, w20, #0x1
    26cc:	add	w0, w0, #0x1
    26d0:	str	w0, [x19, #1320]
    26d4:	ldr	w0, [x19, #1324]
    26d8:	add	w0, w0, #0x1
    26dc:	str	w0, [x19, #1324]
    26e0:	ldr	w0, [x19, #132]
    26e4:	orr	w0, w0, #0x1
    26e8:	str	w0, [x19, #132]
    26ec:	ldr	w0, [x19, #1328]
    26f0:	add	w20, w20, w0
    26f4:	mov	x0, x21
    26f8:	bl	2ac <gomp_mutex_unlock>
    26fc:	cmp	w20, w22
    2700:	b.cs	2484 <GOMP_task+0x204>  // b.hs, b.nlast
    2704:	add	x0, x19, #0x80
    2708:	mov	w1, #0x1                   	// #1
    270c:	bl	0 <gomp_team_barrier_wake>
    2710:	b	2484 <GOMP_task+0x204>

0000000000002714 <GOMP_taskwait_depend>:
    2714:	adrp	x1, 0 <gomp_cancel_var>
    2718:	adrp	x3, 0 <gomp_tls_data>
    271c:	ldr	x3, [x3]
    2720:	ldrb	w2, [x1]
    2724:	mrs	x1, tpidr_el0
    2728:	cbz	w2, 276c <GOMP_taskwait_depend+0x58>
    272c:	add	x2, x1, x3
    2730:	ldr	x4, [x2, #16]
    2734:	cbz	x4, 276c <GOMP_taskwait_depend+0x58>
    2738:	ldr	w4, [x4, #132]
    273c:	tbnz	w4, #2, 2784 <GOMP_taskwait_depend+0x70>
    2740:	ldr	x2, [x2, #80]
    2744:	ldr	x2, [x2, #40]
    2748:	cbz	x2, 276c <GOMP_taskwait_depend+0x58>
    274c:	ldrb	w4, [x2, #49]
    2750:	cbnz	w4, 2784 <GOMP_taskwait_depend+0x70>
    2754:	ldrb	w4, [x2, #50]
    2758:	cbz	w4, 276c <GOMP_taskwait_depend+0x58>
    275c:	ldr	x2, [x2]
    2760:	cbz	x2, 276c <GOMP_taskwait_depend+0x58>
    2764:	ldrb	w2, [x2, #49]
    2768:	cbnz	w2, 2784 <GOMP_taskwait_depend+0x70>
    276c:	add	x1, x1, x3
    2770:	ldr	x1, [x1, #80]
    2774:	cbz	x1, 2784 <GOMP_taskwait_depend+0x70>
    2778:	ldr	x1, [x1, #56]
    277c:	cbz	x1, 2784 <GOMP_taskwait_depend+0x70>
    2780:	b	1eec <gomp_task_maybe_wait_for_dependencies>
    2784:	ret

0000000000002788 <GOMP_taskyield>:
    2788:	ret

000000000000278c <GOMP_taskgroup_start>:
    278c:	adrp	x0, 0 <gomp_tls_data>
    2790:	ldr	x0, [x0]
    2794:	mrs	x1, tpidr_el0
    2798:	add	x0, x1, x0
    279c:	ldr	x1, [x0, #16]
    27a0:	cbz	x1, 27cc <GOMP_taskgroup_start+0x40>
    27a4:	stp	x29, x30, [sp, #-32]!
    27a8:	mov	x29, sp
    27ac:	str	x19, [sp, #16]
    27b0:	ldr	x19, [x0, #80]
    27b4:	ldr	x0, [x19, #40]
    27b8:	bl	15c <gomp_taskgroup_init>
    27bc:	str	x0, [x19, #40]
    27c0:	ldr	x19, [sp, #16]
    27c4:	ldp	x29, x30, [sp], #32
    27c8:	ret
    27cc:	ret

00000000000027d0 <GOMP_taskgroup_end>:
    27d0:	stp	x29, x30, [sp, #-112]!
    27d4:	mov	x29, sp
    27d8:	stp	x19, x20, [sp, #16]
    27dc:	adrp	x19, 0 <gomp_tls_data>
    27e0:	ldr	x19, [x19]
    27e4:	stp	x25, x26, [sp, #64]
    27e8:	mrs	x25, tpidr_el0
    27ec:	add	x0, x25, x19
    27f0:	stp	x21, x22, [sp, #32]
    27f4:	ldr	x21, [x0, #16]
    27f8:	stp	x23, x24, [sp, #48]
    27fc:	stp	x27, x28, [sp, #80]
    2800:	cbz	x21, 2820 <GOMP_taskgroup_end+0x50>
    2804:	ldr	x24, [x0, #80]
    2808:	ldr	x23, [x24, #40]
    280c:	cbnz	x23, 283c <GOMP_taskgroup_end+0x6c>
    2810:	ldr	w0, [x0, #44]
    2814:	cbnz	w0, 283c <GOMP_taskgroup_end+0x6c>
    2818:	add	x0, x21, #0x80
    281c:	bl	0 <gomp_team_barrier_wait>
    2820:	ldp	x19, x20, [sp, #16]
    2824:	ldp	x21, x22, [sp, #32]
    2828:	ldp	x23, x24, [sp, #48]
    282c:	ldp	x25, x26, [sp, #64]
    2830:	ldp	x27, x28, [sp, #80]
    2834:	ldp	x29, x30, [sp], #112
    2838:	ret
    283c:	add	x0, x23, #0x38
    2840:	ldar	x0, [x0]
    2844:	cbz	x0, 2960 <GOMP_taskgroup_end+0x190>
    2848:	add	x27, x23, #0x8
    284c:	add	x28, x23, #0x34
    2850:	add	x25, x25, x19
    2854:	mov	w20, #0x0                   	// #0
    2858:	mov	x22, #0x0                   	// #0
    285c:	add	x26, x21, #0x500
    2860:	mov	x0, x26
    2864:	bl	1ac <gomp_mutex_lock>
    2868:	ldr	x0, [x23, #8]
    286c:	cbnz	x0, 2974 <GOMP_taskgroup_end+0x1a4>
    2870:	ldr	x0, [x27, #16]
    2874:	cbnz	x0, 2974 <GOMP_taskgroup_end+0x1a4>
    2878:	ldr	x0, [x23, #56]
    287c:	cbz	x0, 2944 <GOMP_taskgroup_end+0x174>
    2880:	mov	x1, x24
    2884:	ldr	x0, [x1, #8]!
    2888:	cbnz	x0, 2894 <GOMP_taskgroup_end+0xc4>
    288c:	ldr	x0, [x1, #16]
    2890:	cbz	x0, 298c <GOMP_taskgroup_end+0x1bc>
    2894:	add	x4, sp, #0x6f
    2898:	add	x3, x21, #0x508
    289c:	mov	w2, #0x0                   	// #0
    28a0:	mov	w0, #0x1                   	// #1
    28a4:	bl	4b4 <priority_queue_next_task>
    28a8:	mov	x19, x0
    28ac:	ldr	w0, [x0, #200]
    28b0:	cmp	w0, #0x2
    28b4:	b.ne	298c <GOMP_taskgroup_end+0x1bc>  // b.any
    28b8:	ldr	x1, [x19]
    28bc:	mov	x2, x21
    28c0:	mov	x0, x19
    28c4:	bl	11d8 <gomp_task_run_pre>
    28c8:	tst	w0, #0xff
    28cc:	b.eq	2998 <GOMP_taskgroup_end+0x1c8>  // b.none
    28d0:	cbz	x22, 28e4 <GOMP_taskgroup_end+0x114>
    28d4:	mov	x0, x22
    28d8:	bl	14c <gomp_finish_task>
    28dc:	mov	x0, x22
    28e0:	bl	0 <free>
    28e4:	mov	x1, x21
    28e8:	mov	x0, x19
    28ec:	bl	d0c <gomp_task_run_post_handle_depend>
    28f0:	mov	x22, x0
    28f4:	mov	x0, x19
    28f8:	bl	f40 <gomp_task_run_post_remove_parent>
    28fc:	add	x0, x19, #0x8
    2900:	bl	574 <gomp_clear_parent>
    2904:	mov	x0, x19
    2908:	bl	fcc <gomp_task_run_post_remove_taskgroup>
    290c:	ldr	w0, [x21, #1320]
    2910:	cmp	x22, #0x1
    2914:	sub	w0, w0, #0x1
    2918:	str	w0, [x21, #1320]
    291c:	b.ls	2a18 <GOMP_taskgroup_end+0x248>  // b.plast
    2920:	ldr	w0, [x21, #1328]
    2924:	ldr	w20, [x21]
    2928:	sub	w20, w20, w0
    292c:	ldrb	w0, [x24, #204]
    2930:	eor	w0, w0, #0x1
    2934:	sub	w20, w20, w0
    2938:	cmp	x22, w20, sxtw
    293c:	csel	w20, w22, w20, cc  // cc = lo, ul, last
    2940:	b	2a18 <GOMP_taskgroup_end+0x248>
    2944:	mov	x0, x26
    2948:	bl	2ac <gomp_mutex_unlock>
    294c:	cbz	x22, 2960 <GOMP_taskgroup_end+0x190>
    2950:	mov	x0, x22
    2954:	bl	14c <gomp_finish_task>
    2958:	mov	x0, x22
    295c:	bl	0 <free>
    2960:	ldr	x0, [x23]
    2964:	str	x0, [x24, #40]
    2968:	mov	x0, x23
    296c:	bl	0 <free>
    2970:	b	2820 <GOMP_taskgroup_end+0x50>
    2974:	add	x4, sp, #0x6f
    2978:	add	x3, x21, #0x508
    297c:	mov	x1, x27
    2980:	mov	w2, #0x0                   	// #0
    2984:	mov	w0, #0x2                   	// #2
    2988:	b	28a4 <GOMP_taskgroup_end+0xd4>
    298c:	mov	w0, #0x1                   	// #1
    2990:	mov	x19, #0x0                   	// #0
    2994:	strb	w0, [x23, #48]
    2998:	mov	x0, x26
    299c:	bl	2ac <gomp_mutex_unlock>
    29a0:	cbz	w20, 29b0 <GOMP_taskgroup_end+0x1e0>
    29a4:	mov	w1, w20
    29a8:	add	x0, x21, #0x80
    29ac:	bl	0 <gomp_team_barrier_wake>
    29b0:	cbz	x22, 29c4 <GOMP_taskgroup_end+0x1f4>
    29b4:	mov	x0, x22
    29b8:	bl	14c <gomp_finish_task>
    29bc:	mov	x0, x22
    29c0:	bl	0 <free>
    29c4:	cbz	x19, 2a44 <GOMP_taskgroup_end+0x274>
    29c8:	ldp	x1, x0, [x19, #184]
    29cc:	str	x19, [x25, #80]
    29d0:	cbnz	x1, 2a28 <GOMP_taskgroup_end+0x258>
    29d4:	bl	0 <gomp_target_task_fn>
    29d8:	tst	w0, #0xff
    29dc:	b.eq	2a2c <GOMP_taskgroup_end+0x25c>  // b.none
    29e0:	mov	x0, x26
    29e4:	str	x24, [x25, #80]
    29e8:	bl	1ac <gomp_mutex_lock>
    29ec:	ldr	x0, [x19, #192]
    29f0:	mov	w1, #0x4                   	// #4
    29f4:	ldr	w2, [x0, #44]
    29f8:	str	w1, [x19, #200]
    29fc:	cmp	w2, #0x5
    2a00:	b.ne	2a20 <GOMP_taskgroup_end+0x250>  // b.any
    2a04:	mov	x1, x19
    2a08:	mov	x0, x21
    2a0c:	bl	10d0 <gomp_target_task_completion>
    2a10:	mov	w20, #0x0                   	// #0
    2a14:	mov	x19, #0x0                   	// #0
    2a18:	mov	x22, x19
    2a1c:	b	2868 <GOMP_taskgroup_end+0x98>
    2a20:	str	w1, [x0, #44]
    2a24:	b	2a10 <GOMP_taskgroup_end+0x240>
    2a28:	blr	x1
    2a2c:	str	x24, [x25, #80]
    2a30:	mov	x0, x26
    2a34:	mov	w20, #0x0                   	// #0
    2a38:	bl	1ac <gomp_mutex_lock>
    2a3c:	cbnz	x19, 28e4 <GOMP_taskgroup_end+0x114>
    2a40:	b	2a18 <GOMP_taskgroup_end+0x248>
    2a44:	mov	x0, x28
    2a48:	bl	2fc <gomp_sem_wait>
    2a4c:	b	2a30 <GOMP_taskgroup_end+0x260>

0000000000002a50 <GOMP_taskgroup_reduction_register>:
    2a50:	stp	x29, x30, [sp, #-96]!
    2a54:	mov	x29, sp
    2a58:	stp	x19, x20, [sp, #16]
    2a5c:	mrs	x19, tpidr_el0
    2a60:	adrp	x20, 0 <gomp_tls_data>
    2a64:	ldr	x20, [x20]
    2a68:	stp	x21, x22, [sp, #32]
    2a6c:	mov	x22, x0
    2a70:	add	x21, x19, x20
    2a74:	stp	x23, x24, [sp, #48]
    2a78:	ldr	x0, [x21, #16]
    2a7c:	stp	x25, x26, [sp, #64]
    2a80:	cbnz	x0, 2a90 <GOMP_taskgroup_reduction_register+0x40>
    2a84:	bl	1364 <gomp_create_artificial_team>
    2a88:	bl	278c <GOMP_taskgroup_start>
    2a8c:	ldr	x0, [x21, #16]
    2a90:	add	x19, x19, x20
    2a94:	ldr	w26, [x0]
    2a98:	mov	x20, x22
    2a9c:	mov	x24, #0x0                   	// #0
    2aa0:	ldr	x23, [x19, #80]
    2aa4:	ldr	x1, [x23, #40]
    2aa8:	ldr	x19, [x1, #40]
    2aac:	ldp	x21, x0, [x20, #8]
    2ab0:	mul	x21, x26, x21
    2ab4:	mov	x1, x21
    2ab8:	bl	0 <gomp_aligned_alloc>
    2abc:	mov	x2, x21
    2ac0:	mov	x25, x0
    2ac4:	mov	w1, #0x0                   	// #0
    2ac8:	bl	0 <memset>
    2acc:	ldr	x0, [x20]
    2ad0:	add	x21, x21, x25
    2ad4:	str	x25, [x20, #16]
    2ad8:	add	x24, x24, x0
    2adc:	stp	xzr, x21, [x20, #40]
    2ae0:	ldr	x0, [x20, #32]
    2ae4:	cbnz	x0, 2b74 <GOMP_taskgroup_reduction_register+0x124>
    2ae8:	str	x19, [x20, #32]
    2aec:	mov	x21, x19
    2af0:	cbnz	x19, 2b7c <GOMP_taskgroup_reduction_register+0x12c>
    2af4:	mov	x0, x24
    2af8:	bl	1d4 <htab_create>
    2afc:	str	x0, [sp, #88]
    2b00:	mov	x20, x0
    2b04:	cbz	x19, 2b48 <GOMP_taskgroup_reduction_register+0xf8>
    2b08:	ldp	x0, x1, [x19, #8]
    2b0c:	ldr	x24, [x19], #32
    2b10:	add	x24, x19, x24, lsl #3
    2b14:	sub	x0, x0, x1
    2b18:	str	x0, [x20, #8]
    2b1c:	ldr	x25, [x19]
    2b20:	cmp	x25, #0x1
    2b24:	b.ls	2b3c <GOMP_taskgroup_reduction_register+0xec>  // b.plast
    2b28:	ldr	x1, [x25]
    2b2c:	mov	x0, x20
    2b30:	eor	x1, x1, x1, lsr #32
    2b34:	bl	694 <find_empty_slot_for_expand>
    2b38:	str	x25, [x0]
    2b3c:	add	x19, x19, #0x8
    2b40:	cmp	x24, x19
    2b44:	b.hi	2b1c <GOMP_taskgroup_reduction_register+0xcc>  // b.pmore
    2b48:	mov	x19, x22
    2b4c:	add	x20, x19, #0x38
    2b50:	mov	x25, #0x0                   	// #0
    2b54:	ldr	x0, [x19]
    2b58:	cmp	x25, x0
    2b5c:	b.cc	2b9c <GOMP_taskgroup_reduction_register+0x14c>  // b.lo, b.ul, b.last
    2b60:	ldr	x0, [x19, #32]
    2b64:	cmp	x21, x0
    2b68:	b.eq	2bc4 <GOMP_taskgroup_reduction_register+0x174>  // b.none
    2b6c:	mov	x19, x0
    2b70:	b	2b4c <GOMP_taskgroup_reduction_register+0xfc>
    2b74:	mov	x20, x0
    2b78:	b	2aac <GOMP_taskgroup_reduction_register+0x5c>
    2b7c:	ldr	x19, [x19, #40]
    2b80:	cbz	x19, 2b94 <GOMP_taskgroup_reduction_register+0x144>
    2b84:	ldp	x0, x1, [x19, #8]
    2b88:	sub	x0, x0, x1
    2b8c:	add	x24, x24, x0
    2b90:	b	2af4 <GOMP_taskgroup_reduction_register+0xa4>
    2b94:	mov	x19, #0x0                   	// #0
    2b98:	b	2af4 <GOMP_taskgroup_reduction_register+0xa4>
    2b9c:	str	x19, [x20, #16]
    2ba0:	mov	x24, x20
    2ba4:	add	x0, sp, #0x58
    2ba8:	mov	w2, #0x1                   	// #1
    2bac:	add	x25, x25, #0x1
    2bb0:	mov	x1, x24
    2bb4:	add	x20, x20, #0x18
    2bb8:	bl	71c <htab_find_slot>
    2bbc:	str	x24, [x0]
    2bc0:	b	2b54 <GOMP_taskgroup_reduction_register+0x104>
    2bc4:	ldr	x0, [sp, #88]
    2bc8:	ldp	x25, x26, [sp, #64]
    2bcc:	str	x0, [x19, #40]
    2bd0:	ldr	x0, [x23, #40]
    2bd4:	ldp	x19, x20, [sp, #16]
    2bd8:	ldp	x23, x24, [sp, #48]
    2bdc:	str	x22, [x0, #40]
    2be0:	ldp	x21, x22, [sp, #32]
    2be4:	ldp	x29, x30, [sp], #96
    2be8:	ret

0000000000002bec <GOMP_taskloop>:
    2bec:	stp	x29, x30, [sp, #-432]!
    2bf0:	mov	x29, sp
    2bf4:	stp	x19, x20, [sp, #16]
    2bf8:	stp	x21, x22, [sp, #32]
    2bfc:	stp	x23, x24, [sp, #48]
    2c00:	mov	x23, x4
    2c04:	stp	x25, x26, [sp, #64]
    2c08:	mov	w26, w5
    2c0c:	stp	x27, x28, [sp, #80]
    2c10:	mov	w27, w7
    2c14:	stp	x3, x0, [x29, #160]
    2c18:	mrs	x0, tpidr_el0
    2c1c:	str	x0, [x29, #208]
    2c20:	adrp	x0, 0 <gomp_tls_data>
    2c24:	ldr	x0, [x0]
    2c28:	str	x0, [x29, #216]
    2c2c:	str	x1, [x29, #200]
    2c30:	ldp	x0, x1, [x29, #208]
    2c34:	str	x2, [x29, #184]
    2c38:	ldp	x24, x19, [x29, #432]
    2c3c:	ldr	x25, [x29, #448]
    2c40:	add	x0, x0, x1
    2c44:	ldr	x21, [x0, #16]
    2c48:	cbz	x21, 2c54 <GOMP_taskloop+0x68>
    2c4c:	ldr	w0, [x21, #132]
    2c50:	tbnz	w0, #2, 2cf8 <GOMP_taskloop+0x10c>
    2c54:	cmp	x25, #0x0
    2c58:	b.le	2d18 <GOMP_taskloop+0x12c>
    2c5c:	cmp	x24, x19
    2c60:	b.ge	2cf8 <GOMP_taskloop+0x10c>  // b.tcont
    2c64:	sub	x22, x25, #0x1
    2c68:	sub	x19, x19, x24
    2c6c:	add	x22, x19, x22
    2c70:	sdiv	x22, x22, x25
    2c74:	tbz	w26, #9, 2d28 <GOMP_taskloop+0x13c>
    2c78:	udiv	x20, x22, x6
    2c7c:	cmp	x20, #0x1
    2c80:	b.ls	2d68 <GOMP_taskloop+0x17c>  // b.plast
    2c84:	cmp	x6, x20
    2c88:	b.hi	2d3c <GOMP_taskloop+0x150>  // b.pmore
    2c8c:	mul	x0, x6, x20
    2c90:	mul	x19, x6, x25
    2c94:	cmp	x22, x0
    2c98:	b.eq	2ca8 <GOMP_taskloop+0xbc>  // b.none
    2c9c:	sub	x22, x22, x0
    2ca0:	add	x19, x19, x25
    2ca4:	sub	x22, x22, #0x1
    2ca8:	and	w0, w26, #0x800
    2cac:	str	w0, [x29, #192]
    2cb0:	tbz	w26, #11, 2d7c <GOMP_taskloop+0x190>
    2cb4:	adrp	x0, 0 <gomp_cancel_var>
    2cb8:	ldrb	w0, [x0]
    2cbc:	cbz	w0, 2d90 <GOMP_taskloop+0x1a4>
    2cc0:	ldp	x0, x1, [x29, #208]
    2cc4:	add	x0, x0, x1
    2cc8:	ldr	x0, [x0, #80]
    2ccc:	cbz	x0, 2d90 <GOMP_taskloop+0x1a4>
    2cd0:	ldr	x0, [x0, #40]
    2cd4:	cbz	x0, 2d90 <GOMP_taskloop+0x1a4>
    2cd8:	ldrb	w1, [x0, #49]
    2cdc:	cbnz	w1, 2cf8 <GOMP_taskloop+0x10c>
    2ce0:	ldrb	w1, [x0, #50]
    2ce4:	cbz	w1, 2d90 <GOMP_taskloop+0x1a4>
    2ce8:	ldr	x0, [x0]
    2cec:	cbz	x0, 2d90 <GOMP_taskloop+0x1a4>
    2cf0:	ldrb	w0, [x0, #49]
    2cf4:	cbz	w0, 2d90 <GOMP_taskloop+0x1a4>
    2cf8:	mov	sp, x29
    2cfc:	ldp	x19, x20, [sp, #16]
    2d00:	ldp	x21, x22, [sp, #32]
    2d04:	ldp	x23, x24, [sp, #48]
    2d08:	ldp	x25, x26, [sp, #64]
    2d0c:	ldp	x27, x28, [sp, #80]
    2d10:	ldp	x29, x30, [sp], #432
    2d14:	ret
    2d18:	cmp	x24, x19
    2d1c:	b.le	2cf8 <GOMP_taskloop+0x10c>
    2d20:	add	x22, x25, #0x1
    2d24:	b	2c68 <GOMP_taskloop+0x7c>
    2d28:	cbnz	x6, 2d58 <GOMP_taskloop+0x16c>
    2d2c:	cbz	x21, 2d60 <GOMP_taskloop+0x174>
    2d30:	ldr	w20, [x21]
    2d34:	cmp	x20, x22
    2d38:	b.cs	2d70 <GOMP_taskloop+0x184>  // b.hs, b.nlast
    2d3c:	udiv	x19, x22, x20
    2d40:	msub	x0, x19, x20, x22
    2d44:	mul	x19, x19, x25
    2d48:	cbz	x0, 2ca8 <GOMP_taskloop+0xbc>
    2d4c:	add	x19, x19, x25
    2d50:	sub	x22, x0, #0x1
    2d54:	b	2ca8 <GOMP_taskloop+0xbc>
    2d58:	mov	x20, x6
    2d5c:	b	2d34 <GOMP_taskloop+0x148>
    2d60:	mov	x20, #0x1                   	// #1
    2d64:	b	2d34 <GOMP_taskloop+0x148>
    2d68:	mov	x20, #0x1                   	// #1
    2d6c:	b	2ca8 <GOMP_taskloop+0xbc>
    2d70:	mov	x19, x25
    2d74:	mov	x20, x22
    2d78:	b	2ca8 <GOMP_taskloop+0xbc>
    2d7c:	bl	278c <GOMP_taskgroup_start>
    2d80:	tbz	w26, #12, 2d90 <GOMP_taskloop+0x1a4>
    2d84:	ldr	x0, [x29, #200]
    2d88:	ldr	x0, [x0, #16]
    2d8c:	bl	2a50 <GOMP_taskgroup_reduction_register>
    2d90:	adrp	x0, 0 <gomp_max_task_priority_var>
    2d94:	ldr	w7, [x0]
    2d98:	cmp	w7, w27
    2d9c:	csel	w0, w7, w27, le
    2da0:	str	w0, [x29, #196]
    2da4:	tbz	w26, #10, 2ddc <GOMP_taskloop+0x1f0>
    2da8:	cbz	x21, 2ddc <GOMP_taskloop+0x1f0>
    2dac:	ldp	x0, x1, [x29, #208]
    2db0:	add	x0, x0, x1
    2db4:	ldr	x28, [x0, #80]
    2db8:	cbz	x28, 2dc4 <GOMP_taskloop+0x1d8>
    2dbc:	ldrb	w0, [x28, #205]
    2dc0:	cbnz	w0, 2ddc <GOMP_taskloop+0x1f0>
    2dc4:	ldr	w0, [x21]
    2dc8:	ldr	w1, [x21, #1320]
    2dcc:	lsl	w0, w0, #6
    2dd0:	add	x1, x1, x20
    2dd4:	cmp	x1, x0
    2dd8:	b.ls	30a8 <GOMP_taskloop+0x4bc>  // b.plast
    2ddc:	ldr	x0, [x29, #184]
    2de0:	mov	x27, #0x0                   	// #0
    2de4:	cbnz	x0, 2e14 <GOMP_taskloop+0x228>
    2de8:	add	x23, x29, #0xe0
    2dec:	adrp	x0, 0 <gomp_global_icv>
    2df0:	add	x28, x23, #0x8
    2df4:	add	x0, x0, #0x0
    2df8:	str	x0, [x29, #184]
    2dfc:	cmp	x20, x27
    2e00:	b.ne	2fd4 <GOMP_taskloop+0x3e8>  // b.any
    2e04:	ldr	w0, [x29, #192]
    2e08:	cbnz	w0, 2cf8 <GOMP_taskloop+0x10c>
    2e0c:	bl	27d0 <GOMP_taskgroup_end>
    2e10:	b	2cf8 <GOMP_taskloop+0x10c>
    2e14:	mov	x0, sp
    2e18:	str	x0, [x29, #152]
    2e1c:	ldr	x0, [x29, #208]
    2e20:	neg	x3, x23
    2e24:	ldr	x1, [x29, #216]
    2e28:	sub	x4, x23, #0x1
    2e2c:	mov	x2, #0xd0                  	// #208
    2e30:	ubfx	x26, x26, #1, #1
    2e34:	add	x0, x0, x1
    2e38:	mul	x2, x20, x2
    2e3c:	ldr	x1, [x0, #80]
    2e40:	str	x1, [x29, #144]
    2e44:	ldr	x1, [x29, #160]
    2e48:	sub	sp, sp, x2
    2e4c:	mov	x28, sp
    2e50:	add	x27, x1, x23
    2e54:	sub	x27, x27, #0x1
    2e58:	and	x27, x27, x3
    2e5c:	madd	x1, x27, x20, x4
    2e60:	add	x1, x1, #0xf
    2e64:	and	x1, x1, #0xfffffffffffffff0
    2e68:	sub	sp, sp, x1
    2e6c:	add	x1, x2, x28
    2e70:	add	x4, sp, x4
    2e74:	str	x1, [x29, #176]
    2e78:	and	x23, x4, x3
    2e7c:	mov	x3, x28
    2e80:	mov	x6, x23
    2e84:	mov	x4, x0
    2e88:	adrp	x0, 0 <gomp_global_icv>
    2e8c:	add	x0, x0, #0x0
    2e90:	str	x0, [x29, #160]
    2e94:	ldr	x0, [x29, #176]
    2e98:	cmp	x0, x3
    2e9c:	b.ne	2ecc <GOMP_taskloop+0x2e0>  // b.any
    2ea0:	ldp	x0, x1, [x29, #208]
    2ea4:	add	x28, x28, #0x8
    2ea8:	add	x21, x21, #0x500
    2eac:	mov	x26, #0x0                   	// #0
    2eb0:	add	x0, x0, x1
    2eb4:	str	x0, [x29, #216]
    2eb8:	cmp	x20, x26
    2ebc:	b.ne	2f68 <GOMP_taskloop+0x37c>  // b.any
    2ec0:	ldr	x0, [x29, #152]
    2ec4:	mov	sp, x0
    2ec8:	b	2e04 <GOMP_taskloop+0x218>
    2ecc:	ldr	x0, [x4, #80]
    2ed0:	stp	x6, x4, [x29, #120]
    2ed4:	ldr	x1, [x29, #144]
    2ed8:	cmp	x0, #0x0
    2edc:	add	x2, x0, #0x90
    2ee0:	str	x3, [x29, #136]
    2ee4:	ldr	x0, [x29, #160]
    2ee8:	csel	x2, x0, x2, eq  // eq = none
    2eec:	mov	x0, x3
    2ef0:	bl	12ec <gomp_init_task>
    2ef4:	ldp	x6, x4, [x29, #120]
    2ef8:	mov	w1, #0x1                   	// #1
    2efc:	ldr	x3, [x29, #136]
    2f00:	ldr	w0, [x29, #196]
    2f04:	str	w0, [x3, #88]
    2f08:	ldr	x0, [x4, #80]
    2f0c:	str	w1, [x3, #200]
    2f10:	cbz	x0, 2f1c <GOMP_taskloop+0x330>
    2f14:	ldrb	w2, [x0, #205]
    2f18:	cbnz	w2, 2f20 <GOMP_taskloop+0x334>
    2f1c:	mov	w1, w26
    2f20:	strb	w1, [x3, #205]
    2f24:	cbz	x0, 2f38 <GOMP_taskloop+0x34c>
    2f28:	ldrb	w1, [x0, #204]
    2f2c:	ldr	x0, [x0, #40]
    2f30:	str	x0, [x3, #40]
    2f34:	strb	w1, [x3, #204]
    2f38:	ldr	x2, [x29, #184]
    2f3c:	str	x3, [x4, #80]
    2f40:	ldr	x1, [x29, #200]
    2f44:	mov	x0, x6
    2f48:	stp	x3, x4, [x29, #120]
    2f4c:	str	x6, [x29, #136]
    2f50:	blr	x2
    2f54:	ldp	x3, x4, [x29, #120]
    2f58:	ldr	x6, [x29, #136]
    2f5c:	add	x6, x6, x27
    2f60:	add	x3, x3, #0xd0
    2f64:	b	2e94 <GOMP_taskloop+0x2a8>
    2f68:	ldr	x1, [x29, #216]
    2f6c:	sub	x0, x28, #0x8
    2f70:	cmp	x22, x26
    2f74:	str	x0, [x1, #80]
    2f78:	str	x24, [x23]
    2f7c:	add	x24, x24, x19
    2f80:	str	x24, [x23, #8]
    2f84:	b.ne	2f8c <GOMP_taskloop+0x3a0>  // b.any
    2f88:	sub	x19, x19, x25
    2f8c:	ldr	x1, [x29, #168]
    2f90:	mov	x0, x23
    2f94:	add	x23, x23, x27
    2f98:	blr	x1
    2f9c:	ldr	x0, [x28]
    2fa0:	cbnz	x0, 2fac <GOMP_taskloop+0x3c0>
    2fa4:	ldr	x0, [x28, #16]
    2fa8:	cbz	x0, 2fc4 <GOMP_taskloop+0x3d8>
    2fac:	mov	x0, x21
    2fb0:	bl	1ac <gomp_mutex_lock>
    2fb4:	mov	x0, x28
    2fb8:	bl	574 <gomp_clear_parent>
    2fbc:	mov	x0, x21
    2fc0:	bl	2ac <gomp_mutex_unlock>
    2fc4:	add	x26, x26, #0x1
    2fc8:	add	x28, x28, #0xd0
    2fcc:	bl	1328 <gomp_end_task>
    2fd0:	b	2eb8 <GOMP_taskloop+0x2cc>
    2fd4:	ldp	x0, x1, [x29, #208]
    2fd8:	add	x6, x0, x1
    2fdc:	ldr	x0, [x29, #184]
    2fe0:	ldr	x1, [x6, #80]
    2fe4:	cmp	x1, #0x0
    2fe8:	add	x2, x1, #0x90
    2fec:	csel	x2, x0, x2, eq  // eq = none
    2ff0:	mov	x0, x23
    2ff4:	bl	12ec <gomp_init_task>
    2ff8:	ldr	w0, [x29, #196]
    2ffc:	mov	w1, #0x1                   	// #1
    3000:	str	w0, [x29, #312]
    3004:	ldr	x0, [x6, #80]
    3008:	str	w1, [x29, #424]
    300c:	cbz	x0, 3018 <GOMP_taskloop+0x42c>
    3010:	ldrb	w2, [x0, #205]
    3014:	cbnz	w2, 301c <GOMP_taskloop+0x430>
    3018:	ubfx	x1, x26, #1, #1
    301c:	strb	w1, [x29, #429]
    3020:	cbz	x0, 3034 <GOMP_taskloop+0x448>
    3024:	ldrb	w1, [x0, #204]
    3028:	ldr	x0, [x0, #40]
    302c:	str	x0, [x29, #264]
    3030:	strb	w1, [x29, #428]
    3034:	ldp	x0, x1, [x29, #208]
    3038:	cmp	x22, x27
    303c:	add	x0, x0, x1
    3040:	str	x23, [x0, #80]
    3044:	ldr	x0, [x29, #200]
    3048:	str	x24, [x0]
    304c:	add	x24, x24, x19
    3050:	str	x24, [x0, #8]
    3054:	b.ne	305c <GOMP_taskloop+0x470>  // b.any
    3058:	sub	x19, x19, x25
    305c:	ldr	x1, [x29, #168]
    3060:	ldr	x0, [x29, #200]
    3064:	blr	x1
    3068:	ldr	x0, [x29, #232]
    306c:	cbnz	x0, 3078 <GOMP_taskloop+0x48c>
    3070:	ldr	x0, [x29, #248]
    3074:	cbz	x0, 309c <GOMP_taskloop+0x4b0>
    3078:	add	x1, x21, #0x500
    307c:	str	x1, [x29, #176]
    3080:	mov	x0, x1
    3084:	bl	1ac <gomp_mutex_lock>
    3088:	mov	x0, x28
    308c:	bl	574 <gomp_clear_parent>
    3090:	ldr	x1, [x29, #176]
    3094:	mov	x0, x1
    3098:	bl	2ac <gomp_mutex_unlock>
    309c:	add	x27, x27, #0x1
    30a0:	bl	1328 <gomp_end_task>
    30a4:	b	2dfc <GOMP_taskloop+0x210>
    30a8:	mov	x0, sp
    30ac:	str	x0, [x29, #152]
    30b0:	lsl	x0, x20, #3
    30b4:	add	x1, x23, #0xcf
    30b8:	add	x0, x0, #0xf
    30bc:	and	x0, x0, #0xfffffffffffffff0
    30c0:	sub	sp, sp, x0
    30c4:	mov	x0, sp
    30c8:	str	x0, [x29, #176]
    30cc:	ubfx	x0, x26, #1, #1
    30d0:	str	x0, [x29, #144]
    30d4:	add	x0, x23, #0xcf
    30d8:	str	x0, [x29, #136]
    30dc:	ldr	x0, [x29, #160]
    30e0:	mov	x26, #0x0                   	// #0
    30e4:	ldr	x27, [x28, #40]
    30e8:	add	x0, x0, x1
    30ec:	str	x0, [x29, #128]
    30f0:	neg	x0, x23
    30f4:	str	x0, [x29, #120]
    30f8:	adrp	x0, 0 <gomp_global_icv>
    30fc:	add	x0, x0, #0x0
    3100:	str	x0, [x29, #112]
    3104:	cmp	x20, x26
    3108:	b.ne	3160 <GOMP_taskloop+0x574>  // b.any
    310c:	add	x22, x21, #0x500
    3110:	mov	x0, x22
    3114:	bl	1ac <gomp_mutex_lock>
    3118:	adrp	x0, 0 <gomp_cancel_var>
    311c:	ldrb	w0, [x0]
    3120:	cbz	w0, 32ac <GOMP_taskloop+0x6c0>
    3124:	ldr	x0, [x29, #184]
    3128:	cbnz	x0, 32ac <GOMP_taskloop+0x6c0>
    312c:	ldr	w0, [x21, #132]
    3130:	tbz	w0, #2, 3278 <GOMP_taskloop+0x68c>
    3134:	mov	x19, #0x0                   	// #0
    3138:	mov	x0, x22
    313c:	bl	2ac <gomp_mutex_unlock>
    3140:	cmp	x20, x19
    3144:	b.ne	3258 <GOMP_taskloop+0x66c>  // b.any
    3148:	ldr	w0, [x29, #192]
    314c:	cbnz	w0, 3154 <GOMP_taskloop+0x568>
    3150:	bl	27d0 <GOMP_taskgroup_end>
    3154:	ldr	x0, [x29, #152]
    3158:	mov	sp, x0
    315c:	b	2cf8 <GOMP_taskloop+0x10c>
    3160:	ldr	x0, [x29, #128]
    3164:	bl	0 <gomp_malloc>
    3168:	mov	x23, x0
    316c:	ldr	x1, [x29, #176]
    3170:	ldr	x2, [x29, #216]
    3174:	str	x0, [x1, x26, lsl #3]
    3178:	ldr	x1, [x29, #136]
    317c:	add	x4, x0, x1
    3180:	ldr	x1, [x29, #120]
    3184:	and	x4, x4, x1
    3188:	str	x4, [x29, #104]
    318c:	ldr	x1, [x29, #208]
    3190:	add	x6, x1, x2
    3194:	ldr	x1, [x6, #80]
    3198:	cmp	x1, #0x0
    319c:	add	x2, x1, #0x90
    31a0:	ldr	x1, [x29, #112]
    31a4:	csel	x2, x1, x2, eq  // eq = none
    31a8:	mov	x1, x28
    31ac:	bl	12ec <gomp_init_task>
    31b0:	str	x23, [x6, #80]
    31b4:	ldr	w0, [x29, #196]
    31b8:	mov	w2, #0x1                   	// #1
    31bc:	str	w0, [x23, #88]
    31c0:	ldrb	w0, [x28, #204]
    31c4:	strb	w0, [x23, #204]
    31c8:	ldr	x0, [x29, #184]
    31cc:	str	x27, [x23, #40]
    31d0:	str	w2, [x23, #200]
    31d4:	ldr	x4, [x29, #104]
    31d8:	cbz	x0, 3240 <GOMP_taskloop+0x654>
    31dc:	ldr	x2, [x29, #184]
    31e0:	mov	x0, x4
    31e4:	ldr	x1, [x29, #200]
    31e8:	blr	x2
    31ec:	ldr	x4, [x29, #104]
    31f0:	mov	w2, #0x1                   	// #1
    31f4:	strb	w2, [x23, #206]
    31f8:	str	x24, [x4]
    31fc:	add	x24, x24, x19
    3200:	str	x24, [x4, #8]
    3204:	cmp	x22, x26
    3208:	b.ne	3210 <GOMP_taskloop+0x624>  // b.any
    320c:	sub	x19, x19, x25
    3210:	ldp	x0, x1, [x29, #208]
    3214:	add	x26, x26, #0x1
    3218:	str	x4, [x23, #192]
    321c:	add	x0, x0, x1
    3220:	str	x28, [x0, #80]
    3224:	mov	w0, #0x2                   	// #2
    3228:	str	w0, [x23, #200]
    322c:	ldr	x0, [x29, #168]
    3230:	str	x0, [x23, #184]
    3234:	ldrb	w0, [x29, #144]
    3238:	strb	w0, [x23, #205]
    323c:	b	3104 <GOMP_taskloop+0x518>
    3240:	ldr	x2, [x29, #160]
    3244:	mov	x0, x4
    3248:	ldr	x1, [x29, #200]
    324c:	bl	0 <memcpy>
    3250:	mov	x4, x0
    3254:	b	31f8 <GOMP_taskloop+0x60c>
    3258:	ldr	x0, [x29, #176]
    325c:	ldr	x21, [x0, x19, lsl #3]
    3260:	add	x19, x19, #0x1
    3264:	mov	x0, x21
    3268:	bl	14c <gomp_finish_task>
    326c:	mov	x0, x21
    3270:	bl	0 <free>
    3274:	b	3140 <GOMP_taskloop+0x554>
    3278:	cbz	x27, 32b0 <GOMP_taskloop+0x6c4>
    327c:	ldrb	w0, [x27, #49]
    3280:	cbnz	w0, 3134 <GOMP_taskloop+0x548>
    3284:	ldrb	w0, [x27, #50]
    3288:	cbz	w0, 329c <GOMP_taskloop+0x6b0>
    328c:	ldr	x0, [x27]
    3290:	cbz	x0, 329c <GOMP_taskloop+0x6b0>
    3294:	ldrb	w0, [x0, #49]
    3298:	cbnz	w0, 3134 <GOMP_taskloop+0x548>
    329c:	ldr	x0, [x27, #56]
    32a0:	add	x0, x0, x20
    32a4:	str	x0, [x27, #56]
    32a8:	b	32b0 <GOMP_taskloop+0x6c4>
    32ac:	cbnz	x27, 329c <GOMP_taskloop+0x6b0>
    32b0:	add	x23, x28, #0x8
    32b4:	add	x24, x27, #0x8
    32b8:	add	x25, x21, #0x508
    32bc:	mov	x19, #0x0                   	// #0
    32c0:	b	334c <GOMP_taskloop+0x760>
    32c4:	ldr	x0, [x29, #176]
    32c8:	mov	x1, x23
    32cc:	ldr	w3, [x29, #196]
    32d0:	mov	w5, #0x0                   	// #0
    32d4:	mov	w4, #0x0                   	// #0
    32d8:	ldr	x26, [x0, x19, lsl #3]
    32dc:	mov	w0, #0x1                   	// #1
    32e0:	mov	x2, x26
    32e4:	ldrb	w6, [x26, #207]
    32e8:	bl	3bc <priority_queue_insert>
    32ec:	cbz	x27, 3310 <GOMP_taskloop+0x724>
    32f0:	ldrb	w6, [x26, #207]
    32f4:	mov	x2, x26
    32f8:	ldr	w3, [x29, #196]
    32fc:	mov	x1, x24
    3300:	mov	w5, #0x0                   	// #0
    3304:	mov	w4, #0x0                   	// #0
    3308:	mov	w0, #0x2                   	// #2
    330c:	bl	3bc <priority_queue_insert>
    3310:	ldrb	w6, [x26, #207]
    3314:	mov	w0, #0x0                   	// #0
    3318:	ldr	w3, [x29, #196]
    331c:	mov	x2, x26
    3320:	mov	x1, x25
    3324:	mov	w5, #0x0                   	// #0
    3328:	mov	w4, #0x1                   	// #1
    332c:	add	x19, x19, #0x1
    3330:	bl	3bc <priority_queue_insert>
    3334:	ldr	w0, [x21, #1320]
    3338:	add	w0, w0, #0x1
    333c:	str	w0, [x21, #1320]
    3340:	ldr	w0, [x21, #1324]
    3344:	add	w0, w0, #0x1
    3348:	str	w0, [x21, #1324]
    334c:	cmp	x20, x19
    3350:	b.ne	32c4 <GOMP_taskloop+0x6d8>  // b.any
    3354:	ldr	w0, [x21, #132]
    3358:	ldrb	w19, [x28, #204]
    335c:	orr	w0, w0, #0x1
    3360:	ldr	w1, [x21, #1328]
    3364:	eor	w19, w19, #0x1
    3368:	str	w0, [x21, #132]
    336c:	ldr	w0, [x21]
    3370:	add	w2, w1, w19
    3374:	cmp	w2, w0
    3378:	b.cs	33a8 <GOMP_taskloop+0x7bc>  // b.hs, b.nlast
    337c:	sub	w0, w0, w1
    3380:	sub	w19, w0, w19
    3384:	cmp	x20, w19, sxtw
    3388:	csel	w19, w20, w19, cc  // cc = lo, ul, last
    338c:	mov	x0, x22
    3390:	bl	2ac <gomp_mutex_unlock>
    3394:	cbz	w19, 2ec0 <GOMP_taskloop+0x2d4>
    3398:	mov	w1, w19
    339c:	add	x0, x21, #0x80
    33a0:	bl	0 <gomp_team_barrier_wake>
    33a4:	b	2ec0 <GOMP_taskloop+0x2d4>
    33a8:	mov	w19, #0x0                   	// #0
    33ac:	b	338c <GOMP_taskloop+0x7a0>

00000000000033b0 <GOMP_taskloop_ull>:
    33b0:	stp	x29, x30, [sp, #-432]!
    33b4:	mov	x29, sp
    33b8:	stp	x19, x20, [sp, #16]
    33bc:	stp	x21, x22, [sp, #32]
    33c0:	stp	x23, x24, [sp, #48]
    33c4:	mov	x23, x4
    33c8:	stp	x25, x26, [sp, #64]
    33cc:	mov	w26, w5
    33d0:	stp	x27, x28, [sp, #80]
    33d4:	mov	w27, w7
    33d8:	str	x1, [x29, #200]
    33dc:	mrs	x1, tpidr_el0
    33e0:	str	x1, [x29, #208]
    33e4:	adrp	x1, 0 <gomp_tls_data>
    33e8:	ldr	x1, [x1]
    33ec:	str	x1, [x29, #216]
    33f0:	str	x2, [x29, #184]
    33f4:	ldp	x1, x2, [x29, #208]
    33f8:	stp	x3, x0, [x29, #160]
    33fc:	ldr	x25, [x29, #448]
    3400:	ldp	x24, x19, [x29, #432]
    3404:	add	x1, x1, x2
    3408:	sub	x0, x25, #0x1
    340c:	ldr	x21, [x1, #16]
    3410:	cbz	x21, 341c <GOMP_taskloop_ull+0x6c>
    3414:	ldr	w1, [x21, #132]
    3418:	tbnz	w1, #2, 349c <GOMP_taskloop_ull+0xec>
    341c:	tbz	w26, #8, 34bc <GOMP_taskloop_ull+0x10c>
    3420:	cmp	x24, x19
    3424:	b.cs	349c <GOMP_taskloop_ull+0xec>  // b.hs, b.nlast
    3428:	sub	x22, x19, x24
    342c:	add	x22, x22, x0
    3430:	udiv	x22, x22, x25
    3434:	tbz	w26, #9, 3508 <GOMP_taskloop_ull+0x158>
    3438:	udiv	x20, x22, x6
    343c:	cmp	x20, #0x1
    3440:	b.hi	34dc <GOMP_taskloop_ull+0x12c>  // b.pmore
    3444:	sub	x19, x19, x24
    3448:	mov	x20, #0x1                   	// #1
    344c:	and	w0, w26, #0x800
    3450:	str	w0, [x29, #192]
    3454:	tbz	w26, #11, 3554 <GOMP_taskloop_ull+0x1a4>
    3458:	adrp	x0, 0 <gomp_cancel_var>
    345c:	ldrb	w0, [x0]
    3460:	cbz	w0, 3568 <GOMP_taskloop_ull+0x1b8>
    3464:	ldp	x0, x1, [x29, #208]
    3468:	add	x0, x0, x1
    346c:	ldr	x0, [x0, #80]
    3470:	cbz	x0, 3568 <GOMP_taskloop_ull+0x1b8>
    3474:	ldr	x0, [x0, #40]
    3478:	cbz	x0, 3568 <GOMP_taskloop_ull+0x1b8>
    347c:	ldrb	w1, [x0, #49]
    3480:	cbnz	w1, 349c <GOMP_taskloop_ull+0xec>
    3484:	ldrb	w1, [x0, #50]
    3488:	cbz	w1, 3568 <GOMP_taskloop_ull+0x1b8>
    348c:	ldr	x0, [x0]
    3490:	cbz	x0, 3568 <GOMP_taskloop_ull+0x1b8>
    3494:	ldrb	w0, [x0, #49]
    3498:	cbz	w0, 3568 <GOMP_taskloop_ull+0x1b8>
    349c:	mov	sp, x29
    34a0:	ldp	x19, x20, [sp, #16]
    34a4:	ldp	x21, x22, [sp, #32]
    34a8:	ldp	x23, x24, [sp, #48]
    34ac:	ldp	x25, x26, [sp, #64]
    34b0:	ldp	x27, x28, [sp, #80]
    34b4:	ldp	x29, x30, [sp], #432
    34b8:	ret
    34bc:	cmp	x24, x19
    34c0:	b.ls	349c <GOMP_taskloop_ull+0xec>  // b.plast
    34c4:	sub	x0, x24, x19
    34c8:	mvn	x22, x25
    34cc:	add	x22, x22, x0
    34d0:	neg	x0, x25
    34d4:	udiv	x22, x22, x0
    34d8:	b	3434 <GOMP_taskloop_ull+0x84>
    34dc:	cmp	x6, x20
    34e0:	ccmn	x20, #0x1, #0x4, ls  // ls = plast
    34e4:	b.eq	351c <GOMP_taskloop_ull+0x16c>  // b.none
    34e8:	mul	x0, x6, x20
    34ec:	mul	x19, x25, x6
    34f0:	cmp	x22, x0
    34f4:	b.eq	344c <GOMP_taskloop_ull+0x9c>  // b.none
    34f8:	sub	x22, x22, x0
    34fc:	add	x19, x19, x25
    3500:	sub	x22, x22, #0x1
    3504:	b	344c <GOMP_taskloop_ull+0x9c>
    3508:	cbnz	x6, 3538 <GOMP_taskloop_ull+0x188>
    350c:	cbz	x21, 3540 <GOMP_taskloop_ull+0x190>
    3510:	ldr	w20, [x21]
    3514:	cmp	x22, x20
    3518:	b.ls	3548 <GOMP_taskloop_ull+0x198>  // b.plast
    351c:	udiv	x19, x22, x20
    3520:	msub	x0, x19, x20, x22
    3524:	mul	x19, x19, x25
    3528:	cbz	x0, 344c <GOMP_taskloop_ull+0x9c>
    352c:	add	x19, x19, x25
    3530:	sub	x22, x0, #0x1
    3534:	b	344c <GOMP_taskloop_ull+0x9c>
    3538:	mov	x20, x6
    353c:	b	3514 <GOMP_taskloop_ull+0x164>
    3540:	mov	x20, #0x1                   	// #1
    3544:	b	3514 <GOMP_taskloop_ull+0x164>
    3548:	mov	x19, x25
    354c:	mov	x20, x22
    3550:	b	344c <GOMP_taskloop_ull+0x9c>
    3554:	bl	278c <GOMP_taskgroup_start>
    3558:	tbz	w26, #12, 3568 <GOMP_taskloop_ull+0x1b8>
    355c:	ldr	x0, [x29, #200]
    3560:	ldr	x0, [x0, #16]
    3564:	bl	2a50 <GOMP_taskgroup_reduction_register>
    3568:	adrp	x0, 0 <gomp_max_task_priority_var>
    356c:	ldr	w7, [x0]
    3570:	cmp	w7, w27
    3574:	csel	w0, w7, w27, le
    3578:	str	w0, [x29, #196]
    357c:	tbz	w26, #10, 35b4 <GOMP_taskloop_ull+0x204>
    3580:	cbz	x21, 35b4 <GOMP_taskloop_ull+0x204>
    3584:	ldp	x0, x1, [x29, #208]
    3588:	add	x0, x0, x1
    358c:	ldr	x28, [x0, #80]
    3590:	cbz	x28, 359c <GOMP_taskloop_ull+0x1ec>
    3594:	ldrb	w0, [x28, #205]
    3598:	cbnz	w0, 35b4 <GOMP_taskloop_ull+0x204>
    359c:	ldr	w0, [x21]
    35a0:	ldr	w1, [x21, #1320]
    35a4:	lsl	w0, w0, #6
    35a8:	add	x1, x1, x20
    35ac:	cmp	x1, x0
    35b0:	b.ls	387c <GOMP_taskloop_ull+0x4cc>  // b.plast
    35b4:	ldr	x0, [x29, #184]
    35b8:	mov	x27, #0x0                   	// #0
    35bc:	cbnz	x0, 35ec <GOMP_taskloop_ull+0x23c>
    35c0:	add	x23, x29, #0xe0
    35c4:	adrp	x0, 0 <gomp_global_icv>
    35c8:	add	x28, x23, #0x8
    35cc:	add	x0, x0, #0x0
    35d0:	str	x0, [x29, #184]
    35d4:	cmp	x20, x27
    35d8:	b.ne	37a8 <GOMP_taskloop_ull+0x3f8>  // b.any
    35dc:	ldr	w0, [x29, #192]
    35e0:	cbnz	w0, 349c <GOMP_taskloop_ull+0xec>
    35e4:	bl	27d0 <GOMP_taskgroup_end>
    35e8:	b	349c <GOMP_taskloop_ull+0xec>
    35ec:	mov	x0, sp
    35f0:	str	x0, [x29, #176]
    35f4:	ldr	x0, [x29, #208]
    35f8:	neg	x3, x23
    35fc:	ldr	x1, [x29, #216]
    3600:	sub	x4, x23, #0x1
    3604:	mov	x2, #0xd0                  	// #208
    3608:	ubfx	x26, x26, #1, #1
    360c:	add	x0, x0, x1
    3610:	mul	x2, x20, x2
    3614:	ldr	x1, [x0, #80]
    3618:	str	x1, [x29, #152]
    361c:	ldr	x1, [x29, #160]
    3620:	sub	sp, sp, x2
    3624:	mov	x28, sp
    3628:	add	x27, x1, x23
    362c:	sub	x27, x27, #0x1
    3630:	and	x27, x27, x3
    3634:	madd	x1, x27, x20, x4
    3638:	add	x1, x1, #0xf
    363c:	and	x1, x1, #0xfffffffffffffff0
    3640:	sub	sp, sp, x1
    3644:	add	x1, x28, x2
    3648:	add	x4, sp, x4
    364c:	str	x1, [x29, #160]
    3650:	and	x23, x4, x3
    3654:	mov	x3, x28
    3658:	mov	x6, x23
    365c:	mov	x4, x0
    3660:	adrp	x0, 0 <gomp_global_icv>
    3664:	add	x0, x0, #0x0
    3668:	str	x0, [x29, #144]
    366c:	ldr	x0, [x29, #160]
    3670:	cmp	x3, x0
    3674:	b.ne	36a4 <GOMP_taskloop_ull+0x2f4>  // b.any
    3678:	ldp	x0, x1, [x29, #208]
    367c:	add	x28, x28, #0x8
    3680:	add	x21, x21, #0x500
    3684:	mov	x26, #0x0                   	// #0
    3688:	add	x0, x0, x1
    368c:	str	x0, [x29, #216]
    3690:	cmp	x20, x26
    3694:	b.ne	373c <GOMP_taskloop_ull+0x38c>  // b.any
    3698:	ldr	x0, [x29, #176]
    369c:	mov	sp, x0
    36a0:	b	35dc <GOMP_taskloop_ull+0x22c>
    36a4:	ldr	x0, [x4, #80]
    36a8:	stp	x6, x4, [x29, #120]
    36ac:	cmp	x0, #0x0
    36b0:	add	x2, x0, #0x90
    36b4:	ldp	x0, x1, [x29, #144]
    36b8:	str	x3, [x29, #136]
    36bc:	csel	x2, x0, x2, eq  // eq = none
    36c0:	mov	x0, x3
    36c4:	bl	12ec <gomp_init_task>
    36c8:	ldp	x6, x4, [x29, #120]
    36cc:	mov	w1, #0x1                   	// #1
    36d0:	ldr	x3, [x29, #136]
    36d4:	ldr	w0, [x29, #196]
    36d8:	str	w0, [x3, #88]
    36dc:	ldr	x0, [x4, #80]
    36e0:	str	w1, [x3, #200]
    36e4:	cbz	x0, 36f0 <GOMP_taskloop_ull+0x340>
    36e8:	ldrb	w2, [x0, #205]
    36ec:	cbnz	w2, 36f4 <GOMP_taskloop_ull+0x344>
    36f0:	mov	w1, w26
    36f4:	strb	w1, [x3, #205]
    36f8:	cbz	x0, 370c <GOMP_taskloop_ull+0x35c>
    36fc:	ldrb	w1, [x0, #204]
    3700:	ldr	x0, [x0, #40]
    3704:	str	x0, [x3, #40]
    3708:	strb	w1, [x3, #204]
    370c:	ldr	x2, [x29, #184]
    3710:	str	x3, [x4, #80]
    3714:	ldr	x1, [x29, #200]
    3718:	mov	x0, x6
    371c:	stp	x3, x4, [x29, #120]
    3720:	str	x6, [x29, #136]
    3724:	blr	x2
    3728:	ldp	x3, x4, [x29, #120]
    372c:	ldr	x6, [x29, #136]
    3730:	add	x6, x6, x27
    3734:	add	x3, x3, #0xd0
    3738:	b	366c <GOMP_taskloop_ull+0x2bc>
    373c:	ldr	x1, [x29, #216]
    3740:	sub	x0, x28, #0x8
    3744:	cmp	x22, x26
    3748:	str	x0, [x1, #80]
    374c:	str	x24, [x23]
    3750:	add	x24, x24, x19
    3754:	str	x24, [x23, #8]
    3758:	b.ne	3760 <GOMP_taskloop_ull+0x3b0>  // b.any
    375c:	sub	x19, x19, x25
    3760:	ldr	x1, [x29, #168]
    3764:	mov	x0, x23
    3768:	add	x23, x23, x27
    376c:	blr	x1
    3770:	ldr	x0, [x28]
    3774:	cbnz	x0, 3780 <GOMP_taskloop_ull+0x3d0>
    3778:	ldr	x0, [x28, #16]
    377c:	cbz	x0, 3798 <GOMP_taskloop_ull+0x3e8>
    3780:	mov	x0, x21
    3784:	bl	1ac <gomp_mutex_lock>
    3788:	mov	x0, x28
    378c:	bl	574 <gomp_clear_parent>
    3790:	mov	x0, x21
    3794:	bl	2ac <gomp_mutex_unlock>
    3798:	add	x26, x26, #0x1
    379c:	add	x28, x28, #0xd0
    37a0:	bl	1328 <gomp_end_task>
    37a4:	b	3690 <GOMP_taskloop_ull+0x2e0>
    37a8:	ldp	x0, x1, [x29, #208]
    37ac:	add	x6, x0, x1
    37b0:	ldr	x0, [x29, #184]
    37b4:	ldr	x1, [x6, #80]
    37b8:	cmp	x1, #0x0
    37bc:	add	x2, x1, #0x90
    37c0:	csel	x2, x0, x2, eq  // eq = none
    37c4:	mov	x0, x23
    37c8:	bl	12ec <gomp_init_task>
    37cc:	ldr	w0, [x29, #196]
    37d0:	mov	w1, #0x1                   	// #1
    37d4:	str	w0, [x29, #312]
    37d8:	ldr	x0, [x6, #80]
    37dc:	str	w1, [x29, #424]
    37e0:	cbz	x0, 37ec <GOMP_taskloop_ull+0x43c>
    37e4:	ldrb	w2, [x0, #205]
    37e8:	cbnz	w2, 37f0 <GOMP_taskloop_ull+0x440>
    37ec:	ubfx	x1, x26, #1, #1
    37f0:	strb	w1, [x29, #429]
    37f4:	cbz	x0, 3808 <GOMP_taskloop_ull+0x458>
    37f8:	ldrb	w1, [x0, #204]
    37fc:	ldr	x0, [x0, #40]
    3800:	str	x0, [x29, #264]
    3804:	strb	w1, [x29, #428]
    3808:	ldp	x0, x1, [x29, #208]
    380c:	cmp	x22, x27
    3810:	add	x0, x0, x1
    3814:	str	x23, [x0, #80]
    3818:	ldr	x0, [x29, #200]
    381c:	str	x24, [x0]
    3820:	add	x24, x24, x19
    3824:	str	x24, [x0, #8]
    3828:	b.ne	3830 <GOMP_taskloop_ull+0x480>  // b.any
    382c:	sub	x19, x19, x25
    3830:	ldr	x1, [x29, #168]
    3834:	ldr	x0, [x29, #200]
    3838:	blr	x1
    383c:	ldr	x0, [x29, #232]
    3840:	cbnz	x0, 384c <GOMP_taskloop_ull+0x49c>
    3844:	ldr	x0, [x29, #248]
    3848:	cbz	x0, 3870 <GOMP_taskloop_ull+0x4c0>
    384c:	add	x1, x21, #0x500
    3850:	str	x1, [x29, #176]
    3854:	mov	x0, x1
    3858:	bl	1ac <gomp_mutex_lock>
    385c:	mov	x0, x28
    3860:	bl	574 <gomp_clear_parent>
    3864:	ldr	x1, [x29, #176]
    3868:	mov	x0, x1
    386c:	bl	2ac <gomp_mutex_unlock>
    3870:	add	x27, x27, #0x1
    3874:	bl	1328 <gomp_end_task>
    3878:	b	35d4 <GOMP_taskloop_ull+0x224>
    387c:	mov	x0, sp
    3880:	str	x0, [x29, #152]
    3884:	lsl	x0, x20, #3
    3888:	add	x1, x23, #0xcf
    388c:	add	x0, x0, #0xf
    3890:	and	x0, x0, #0xfffffffffffffff0
    3894:	sub	sp, sp, x0
    3898:	mov	x0, sp
    389c:	str	x0, [x29, #176]
    38a0:	ubfx	x0, x26, #1, #1
    38a4:	str	x0, [x29, #144]
    38a8:	add	x0, x23, #0xcf
    38ac:	str	x0, [x29, #136]
    38b0:	ldr	x0, [x29, #160]
    38b4:	mov	x26, #0x0                   	// #0
    38b8:	ldr	x27, [x28, #40]
    38bc:	add	x0, x0, x1
    38c0:	str	x0, [x29, #128]
    38c4:	neg	x0, x23
    38c8:	str	x0, [x29, #120]
    38cc:	adrp	x0, 0 <gomp_global_icv>
    38d0:	add	x0, x0, #0x0
    38d4:	str	x0, [x29, #112]
    38d8:	cmp	x20, x26
    38dc:	b.ne	3934 <GOMP_taskloop_ull+0x584>  // b.any
    38e0:	add	x22, x21, #0x500
    38e4:	mov	x0, x22
    38e8:	bl	1ac <gomp_mutex_lock>
    38ec:	adrp	x0, 0 <gomp_cancel_var>
    38f0:	ldrb	w0, [x0]
    38f4:	cbz	w0, 3a80 <GOMP_taskloop_ull+0x6d0>
    38f8:	ldr	x0, [x29, #184]
    38fc:	cbnz	x0, 3a80 <GOMP_taskloop_ull+0x6d0>
    3900:	ldr	w0, [x21, #132]
    3904:	tbz	w0, #2, 3a4c <GOMP_taskloop_ull+0x69c>
    3908:	mov	x19, #0x0                   	// #0
    390c:	mov	x0, x22
    3910:	bl	2ac <gomp_mutex_unlock>
    3914:	cmp	x20, x19
    3918:	b.ne	3a2c <GOMP_taskloop_ull+0x67c>  // b.any
    391c:	ldr	w0, [x29, #192]
    3920:	cbnz	w0, 3928 <GOMP_taskloop_ull+0x578>
    3924:	bl	27d0 <GOMP_taskgroup_end>
    3928:	ldr	x0, [x29, #152]
    392c:	mov	sp, x0
    3930:	b	349c <GOMP_taskloop_ull+0xec>
    3934:	ldr	x0, [x29, #128]
    3938:	bl	0 <gomp_malloc>
    393c:	mov	x23, x0
    3940:	ldr	x1, [x29, #176]
    3944:	ldr	x2, [x29, #216]
    3948:	str	x0, [x1, x26, lsl #3]
    394c:	ldr	x1, [x29, #136]
    3950:	add	x4, x0, x1
    3954:	ldr	x1, [x29, #120]
    3958:	and	x4, x4, x1
    395c:	str	x4, [x29, #104]
    3960:	ldr	x1, [x29, #208]
    3964:	add	x6, x1, x2
    3968:	ldr	x1, [x6, #80]
    396c:	cmp	x1, #0x0
    3970:	add	x2, x1, #0x90
    3974:	ldr	x1, [x29, #112]
    3978:	csel	x2, x1, x2, eq  // eq = none
    397c:	mov	x1, x28
    3980:	bl	12ec <gomp_init_task>
    3984:	str	x23, [x6, #80]
    3988:	ldr	w0, [x29, #196]
    398c:	mov	w2, #0x1                   	// #1
    3990:	str	w0, [x23, #88]
    3994:	ldrb	w0, [x28, #204]
    3998:	strb	w0, [x23, #204]
    399c:	ldr	x0, [x29, #184]
    39a0:	str	x27, [x23, #40]
    39a4:	str	w2, [x23, #200]
    39a8:	ldr	x4, [x29, #104]
    39ac:	cbz	x0, 3a14 <GOMP_taskloop_ull+0x664>
    39b0:	ldr	x2, [x29, #184]
    39b4:	mov	x0, x4
    39b8:	ldr	x1, [x29, #200]
    39bc:	blr	x2
    39c0:	ldr	x4, [x29, #104]
    39c4:	mov	w2, #0x1                   	// #1
    39c8:	strb	w2, [x23, #206]
    39cc:	str	x24, [x4]
    39d0:	add	x24, x24, x19
    39d4:	str	x24, [x4, #8]
    39d8:	cmp	x22, x26
    39dc:	b.ne	39e4 <GOMP_taskloop_ull+0x634>  // b.any
    39e0:	sub	x19, x19, x25
    39e4:	ldp	x0, x1, [x29, #208]
    39e8:	add	x26, x26, #0x1
    39ec:	str	x4, [x23, #192]
    39f0:	add	x0, x0, x1
    39f4:	str	x28, [x0, #80]
    39f8:	mov	w0, #0x2                   	// #2
    39fc:	str	w0, [x23, #200]
    3a00:	ldr	x0, [x29, #168]
    3a04:	str	x0, [x23, #184]
    3a08:	ldrb	w0, [x29, #144]
    3a0c:	strb	w0, [x23, #205]
    3a10:	b	38d8 <GOMP_taskloop_ull+0x528>
    3a14:	ldr	x2, [x29, #160]
    3a18:	mov	x0, x4
    3a1c:	ldr	x1, [x29, #200]
    3a20:	bl	0 <memcpy>
    3a24:	mov	x4, x0
    3a28:	b	39cc <GOMP_taskloop_ull+0x61c>
    3a2c:	ldr	x0, [x29, #176]
    3a30:	ldr	x21, [x0, x19, lsl #3]
    3a34:	add	x19, x19, #0x1
    3a38:	mov	x0, x21
    3a3c:	bl	14c <gomp_finish_task>
    3a40:	mov	x0, x21
    3a44:	bl	0 <free>
    3a48:	b	3914 <GOMP_taskloop_ull+0x564>
    3a4c:	cbz	x27, 3a84 <GOMP_taskloop_ull+0x6d4>
    3a50:	ldrb	w0, [x27, #49]
    3a54:	cbnz	w0, 3908 <GOMP_taskloop_ull+0x558>
    3a58:	ldrb	w0, [x27, #50]
    3a5c:	cbz	w0, 3a70 <GOMP_taskloop_ull+0x6c0>
    3a60:	ldr	x0, [x27]
    3a64:	cbz	x0, 3a70 <GOMP_taskloop_ull+0x6c0>
    3a68:	ldrb	w0, [x0, #49]
    3a6c:	cbnz	w0, 3908 <GOMP_taskloop_ull+0x558>
    3a70:	ldr	x0, [x27, #56]
    3a74:	add	x0, x0, x20
    3a78:	str	x0, [x27, #56]
    3a7c:	b	3a84 <GOMP_taskloop_ull+0x6d4>
    3a80:	cbnz	x27, 3a70 <GOMP_taskloop_ull+0x6c0>
    3a84:	add	x23, x28, #0x8
    3a88:	add	x24, x27, #0x8
    3a8c:	add	x25, x21, #0x508
    3a90:	mov	x19, #0x0                   	// #0
    3a94:	b	3b20 <GOMP_taskloop_ull+0x770>
    3a98:	ldr	x0, [x29, #176]
    3a9c:	mov	x1, x23
    3aa0:	ldr	w3, [x29, #196]
    3aa4:	mov	w5, #0x0                   	// #0
    3aa8:	mov	w4, #0x0                   	// #0
    3aac:	ldr	x26, [x0, x19, lsl #3]
    3ab0:	mov	w0, #0x1                   	// #1
    3ab4:	mov	x2, x26
    3ab8:	ldrb	w6, [x26, #207]
    3abc:	bl	3bc <priority_queue_insert>
    3ac0:	cbz	x27, 3ae4 <GOMP_taskloop_ull+0x734>
    3ac4:	ldrb	w6, [x26, #207]
    3ac8:	mov	x2, x26
    3acc:	ldr	w3, [x29, #196]
    3ad0:	mov	x1, x24
    3ad4:	mov	w5, #0x0                   	// #0
    3ad8:	mov	w4, #0x0                   	// #0
    3adc:	mov	w0, #0x2                   	// #2
    3ae0:	bl	3bc <priority_queue_insert>
    3ae4:	ldrb	w6, [x26, #207]
    3ae8:	mov	w0, #0x0                   	// #0
    3aec:	ldr	w3, [x29, #196]
    3af0:	mov	x2, x26
    3af4:	mov	x1, x25
    3af8:	mov	w5, #0x0                   	// #0
    3afc:	mov	w4, #0x1                   	// #1
    3b00:	add	x19, x19, #0x1
    3b04:	bl	3bc <priority_queue_insert>
    3b08:	ldr	w0, [x21, #1320]
    3b0c:	add	w0, w0, #0x1
    3b10:	str	w0, [x21, #1320]
    3b14:	ldr	w0, [x21, #1324]
    3b18:	add	w0, w0, #0x1
    3b1c:	str	w0, [x21, #1324]
    3b20:	cmp	x20, x19
    3b24:	b.ne	3a98 <GOMP_taskloop_ull+0x6e8>  // b.any
    3b28:	ldr	w0, [x21, #132]
    3b2c:	ldrb	w19, [x28, #204]
    3b30:	orr	w0, w0, #0x1
    3b34:	ldr	w1, [x21, #1328]
    3b38:	eor	w19, w19, #0x1
    3b3c:	str	w0, [x21, #132]
    3b40:	ldr	w0, [x21]
    3b44:	add	w2, w1, w19
    3b48:	cmp	w2, w0
    3b4c:	b.cs	3b80 <GOMP_taskloop_ull+0x7d0>  // b.hs, b.nlast
    3b50:	sub	w0, w0, w1
    3b54:	sub	w19, w0, w19
    3b58:	cmp	x20, w19, sxtw
    3b5c:	csel	w19, w20, w19, cc  // cc = lo, ul, last
    3b60:	mov	x0, x22
    3b64:	bl	2ac <gomp_mutex_unlock>
    3b68:	cbz	w19, 3b78 <GOMP_taskloop_ull+0x7c8>
    3b6c:	mov	w1, w19
    3b70:	add	x0, x21, #0x80
    3b74:	bl	0 <gomp_team_barrier_wake>
    3b78:	ldr	x0, [x29, #152]
    3b7c:	b	369c <GOMP_taskloop_ull+0x2ec>
    3b80:	mov	w19, #0x0                   	// #0
    3b84:	b	3b60 <GOMP_taskloop_ull+0x7b0>

0000000000003b88 <GOMP_taskgroup_reduction_unregister>:
    3b88:	stp	x29, x30, [sp, #-32]!
    3b8c:	mov	x29, sp
    3b90:	str	x19, [sp, #16]
    3b94:	mov	x19, x0
    3b98:	ldr	x0, [x0, #40]
    3b9c:	bl	0 <free>
    3ba0:	ldr	x0, [x19, #16]
    3ba4:	bl	0 <gomp_aligned_free>
    3ba8:	ldr	x19, [x19, #32]
    3bac:	cbz	x19, 3bb8 <GOMP_taskgroup_reduction_unregister+0x30>
    3bb0:	ldr	x0, [x19, #40]
    3bb4:	cbz	x0, 3ba0 <GOMP_taskgroup_reduction_unregister+0x18>
    3bb8:	ldr	x19, [sp, #16]
    3bbc:	ldp	x29, x30, [sp], #32
    3bc0:	ret

0000000000003bc4 <GOMP_task_reduction_remap>:
    3bc4:	mov	x13, x0
    3bc8:	adrp	x0, 0 <gomp_tls_data>
    3bcc:	ldr	x0, [x0]
    3bd0:	mov	x14, x1
    3bd4:	mrs	x1, tpidr_el0
    3bd8:	add	x0, x1, x0
    3bdc:	stp	x29, x30, [sp, #-48]!
    3be0:	mov	x12, x2
    3be4:	mov	x29, sp
    3be8:	ldr	x1, [x0, #80]
    3bec:	add	x18, x2, x13, lsl #3
    3bf0:	mov	x11, #0x0                   	// #0
    3bf4:	stp	x19, x20, [sp, #16]
    3bf8:	ldr	w19, [x0, #40]
    3bfc:	ldr	x1, [x1, #40]
    3c00:	ldr	x15, [x1, #40]
    3c04:	ldr	x20, [x15, #40]
    3c08:	str	x21, [sp, #32]
    3c0c:	mov	x21, #0x18                  	// #24
    3c10:	cmp	x11, x13
    3c14:	b.ne	3c28 <GOMP_task_reduction_remap+0x64>  // b.any
    3c18:	ldp	x19, x20, [sp, #16]
    3c1c:	ldr	x21, [sp, #32]
    3c20:	ldp	x29, x30, [sp], #48
    3c24:	ret
    3c28:	add	x1, x12, x11, lsl #3
    3c2c:	mov	x0, x20
    3c30:	bl	5fc <htab_find>
    3c34:	mov	x3, x0
    3c38:	cbz	x0, 3c6c <GOMP_task_reduction_remap+0xa8>
    3c3c:	ldp	x1, x2, [x3, #8]
    3c40:	cmp	x11, x14
    3c44:	ldr	x0, [x2, #16]
    3c48:	add	x1, x0, x1
    3c4c:	ldr	x0, [x2, #8]
    3c50:	madd	x0, x19, x0, x1
    3c54:	str	x0, [x12, x11, lsl #3]
    3c58:	b.cs	3c64 <GOMP_task_reduction_remap+0xa0>  // b.hs, b.nlast
    3c5c:	ldr	x0, [x3]
    3c60:	str	x0, [x18, x11, lsl #3]
    3c64:	add	x11, x11, #0x1
    3c68:	b	3c10 <GOMP_task_reduction_remap+0x4c>
    3c6c:	ldr	x1, [x12, x11, lsl #3]
    3c70:	mov	x4, x15
    3c74:	ldr	x0, [x4, #16]
    3c78:	cmp	x1, x0
    3c7c:	b.cc	3c8c <GOMP_task_reduction_remap+0xc8>  // b.lo, b.ul, b.last
    3c80:	ldr	x2, [x4, #48]
    3c84:	cmp	x1, x2
    3c88:	b.cc	3cb4 <GOMP_task_reduction_remap+0xf0>  // b.lo, b.ul, b.last
    3c8c:	ldr	x4, [x4, #32]
    3c90:	cbnz	x4, 3c74 <GOMP_task_reduction_remap+0xb0>
    3c94:	adrp	x0, 0 <htab_mod_m2>
    3c98:	add	x0, x0, #0x0
    3c9c:	bl	0 <gomp_fatal>
    3ca0:	b.ne	3cac <GOMP_task_reduction_remap+0xe8>  // b.any
    3ca4:	ldr	x0, [x6, #56]
    3ca8:	b	3c60 <GOMP_task_reduction_remap+0x9c>
    3cac:	sub	x3, x5, #0x1
    3cb0:	b	3d00 <GOMP_task_reduction_remap+0x13c>
    3cb4:	ldr	x3, [x4, #8]
    3cb8:	sub	x2, x1, x0
    3cbc:	cmp	x11, x14
    3cc0:	udiv	x1, x2, x3
    3cc4:	msub	x2, x1, x3, x2
    3cc8:	madd	x3, x19, x3, x2
    3ccc:	add	x1, x3, x0
    3cd0:	str	x1, [x12, x11, lsl #3]
    3cd4:	b.cs	3c64 <GOMP_task_reduction_remap+0xa0>  // b.hs, b.nlast
    3cd8:	ldr	x3, [x4]
    3cdc:	mov	x0, #0x0                   	// #0
    3ce0:	sub	x3, x3, #0x1
    3ce4:	add	x5, x0, x3
    3ce8:	lsr	x5, x5, #1
    3cec:	madd	x6, x5, x21, x4
    3cf0:	ldr	x7, [x6, #64]
    3cf4:	cmp	x7, x2
    3cf8:	b.cs	3ca0 <GOMP_task_reduction_remap+0xdc>  // b.hs, b.nlast
    3cfc:	add	x0, x5, #0x1
    3d00:	cmp	x3, x0
    3d04:	b.cs	3ce4 <GOMP_task_reduction_remap+0x120>  // b.hs, b.nlast
    3d08:	b	3c94 <GOMP_task_reduction_remap+0xd0>

0000000000003d0c <gomp_parallel_reduction_register>:
    3d0c:	stp	x29, x30, [sp, #-96]!
    3d10:	mov	x29, sp
    3d14:	stp	x21, x22, [sp, #32]
    3d18:	mov	x21, x0
    3d1c:	mov	w22, w1
    3d20:	mov	x0, #0x0                   	// #0
    3d24:	stp	x19, x20, [sp, #16]
    3d28:	mov	x19, x21
    3d2c:	stp	x23, x24, [sp, #48]
    3d30:	str	x25, [sp, #64]
    3d34:	bl	15c <gomp_taskgroup_init>
    3d38:	mov	x23, x0
    3d3c:	mov	x25, #0x0                   	// #0
    3d40:	ldp	x20, x0, [x19, #8]
    3d44:	mul	x20, x22, x20
    3d48:	mov	x1, x20
    3d4c:	bl	0 <gomp_aligned_alloc>
    3d50:	mov	x2, x20
    3d54:	mov	x24, x0
    3d58:	mov	w1, #0x0                   	// #0
    3d5c:	bl	0 <memset>
    3d60:	add	x20, x20, x24
    3d64:	str	x24, [x19, #16]
    3d68:	stp	xzr, x20, [x19, #40]
    3d6c:	ldr	x0, [x19]
    3d70:	ldr	x19, [x19, #32]
    3d74:	add	x25, x25, x0
    3d78:	cbnz	x19, 3d40 <gomp_parallel_reduction_register+0x34>
    3d7c:	mov	x19, x21
    3d80:	mov	x0, x25
    3d84:	bl	1d4 <htab_create>
    3d88:	str	x0, [sp, #88]
    3d8c:	add	x20, x19, #0x38
    3d90:	mov	x24, #0x0                   	// #0
    3d94:	ldr	x0, [x19]
    3d98:	cmp	x24, x0
    3d9c:	b.cc	3db0 <gomp_parallel_reduction_register+0xa4>  // b.lo, b.ul, b.last
    3da0:	ldr	x0, [x19, #32]
    3da4:	cbz	x0, 3dd8 <gomp_parallel_reduction_register+0xcc>
    3da8:	mov	x19, x0
    3dac:	b	3d8c <gomp_parallel_reduction_register+0x80>
    3db0:	str	x19, [x20, #16]
    3db4:	mov	x22, x20
    3db8:	add	x0, sp, #0x58
    3dbc:	mov	w2, #0x1                   	// #1
    3dc0:	add	x24, x24, #0x1
    3dc4:	mov	x1, x22
    3dc8:	add	x20, x20, #0x18
    3dcc:	bl	71c <htab_find_slot>
    3dd0:	str	x22, [x0]
    3dd4:	b	3d94 <gomp_parallel_reduction_register+0x88>
    3dd8:	ldr	x0, [sp, #88]
    3ddc:	ldr	x25, [sp, #64]
    3de0:	str	x0, [x19, #40]
    3de4:	ldp	x19, x20, [sp, #16]
    3de8:	str	x21, [x23, #40]
    3dec:	mov	x0, x23
    3df0:	ldp	x21, x22, [sp, #32]
    3df4:	ldp	x23, x24, [sp, #48]
    3df8:	ldp	x29, x30, [sp], #96
    3dfc:	ret

0000000000003e00 <gomp_workshare_task_reduction_register>:
    3e00:	stp	x29, x30, [sp, #-112]!
    3e04:	mov	x29, sp
    3e08:	stp	x23, x24, [sp, #48]
    3e0c:	mov	x23, x0
    3e10:	adrp	x0, 0 <gomp_tls_data>
    3e14:	ldr	x0, [x0]
    3e18:	stp	x21, x22, [sp, #32]
    3e1c:	mov	x21, x1
    3e20:	mrs	x1, tpidr_el0
    3e24:	add	x0, x1, x0
    3e28:	stp	x19, x20, [sp, #16]
    3e2c:	mov	x20, x23
    3e30:	stp	x25, x26, [sp, #64]
    3e34:	mov	x25, #0x0                   	// #0
    3e38:	ldr	x24, [x0, #80]
    3e3c:	ldr	x0, [x0, #16]
    3e40:	ldr	x1, [x24, #40]
    3e44:	ldr	x19, [x1, #40]
    3e48:	str	x27, [sp, #80]
    3e4c:	ldr	w27, [x0]
    3e50:	cbz	x21, 3f08 <gomp_workshare_task_reduction_register+0x108>
    3e54:	ldr	x0, [x21, #16]
    3e58:	str	x0, [x20, #16]
    3e5c:	ldr	x0, [x21, #48]
    3e60:	str	x0, [x20, #48]
    3e64:	ldr	x21, [x21, #32]
    3e68:	str	xzr, [x20, #40]
    3e6c:	ldr	x0, [x20]
    3e70:	add	x25, x25, x0
    3e74:	ldr	x0, [x20, #32]
    3e78:	cbnz	x0, 3f38 <gomp_workshare_task_reduction_register+0x138>
    3e7c:	str	x19, [x20, #32]
    3e80:	mov	x21, x19
    3e84:	cbnz	x19, 3f40 <gomp_workshare_task_reduction_register+0x140>
    3e88:	mov	x0, x25
    3e8c:	bl	1d4 <htab_create>
    3e90:	str	x0, [sp, #104]
    3e94:	mov	x20, x0
    3e98:	cbz	x19, 3edc <gomp_workshare_task_reduction_register+0xdc>
    3e9c:	ldp	x0, x1, [x19, #8]
    3ea0:	ldr	x22, [x19], #32
    3ea4:	add	x22, x19, x22, lsl #3
    3ea8:	sub	x0, x0, x1
    3eac:	str	x0, [x20, #8]
    3eb0:	ldr	x25, [x19]
    3eb4:	cmp	x25, #0x1
    3eb8:	b.ls	3ed0 <gomp_workshare_task_reduction_register+0xd0>  // b.plast
    3ebc:	ldr	x1, [x25]
    3ec0:	mov	x0, x20
    3ec4:	eor	x1, x1, x1, lsr #32
    3ec8:	bl	694 <find_empty_slot_for_expand>
    3ecc:	str	x25, [x0]
    3ed0:	add	x19, x19, #0x8
    3ed4:	cmp	x22, x19
    3ed8:	b.hi	3eb0 <gomp_workshare_task_reduction_register+0xb0>  // b.pmore
    3edc:	mov	x19, x23
    3ee0:	add	x20, x19, #0x38
    3ee4:	mov	x25, #0x0                   	// #0
    3ee8:	ldr	x0, [x19]
    3eec:	cmp	x25, x0
    3ef0:	b.cc	3f60 <gomp_workshare_task_reduction_register+0x160>  // b.lo, b.ul, b.last
    3ef4:	ldr	x0, [x19, #32]
    3ef8:	cmp	x21, x0
    3efc:	b.eq	3f88 <gomp_workshare_task_reduction_register+0x188>  // b.none
    3f00:	mov	x19, x0
    3f04:	b	3ee0 <gomp_workshare_task_reduction_register+0xe0>
    3f08:	ldp	x22, x0, [x20, #8]
    3f0c:	mul	x22, x27, x22
    3f10:	mov	x1, x22
    3f14:	bl	0 <gomp_aligned_alloc>
    3f18:	mov	x26, x0
    3f1c:	mov	x2, x22
    3f20:	mov	w1, #0x0                   	// #0
    3f24:	add	x22, x22, x26
    3f28:	bl	0 <memset>
    3f2c:	str	x26, [x20, #16]
    3f30:	str	x22, [x20, #48]
    3f34:	b	3e68 <gomp_workshare_task_reduction_register+0x68>
    3f38:	mov	x20, x0
    3f3c:	b	3e50 <gomp_workshare_task_reduction_register+0x50>
    3f40:	ldr	x19, [x19, #40]
    3f44:	cbz	x19, 3f58 <gomp_workshare_task_reduction_register+0x158>
    3f48:	ldp	x0, x1, [x19, #8]
    3f4c:	sub	x0, x0, x1
    3f50:	add	x25, x25, x0
    3f54:	b	3e88 <gomp_workshare_task_reduction_register+0x88>
    3f58:	mov	x19, #0x0                   	// #0
    3f5c:	b	3e88 <gomp_workshare_task_reduction_register+0x88>
    3f60:	str	x19, [x20, #16]
    3f64:	mov	x22, x20
    3f68:	add	x0, sp, #0x68
    3f6c:	mov	w2, #0x1                   	// #1
    3f70:	add	x25, x25, #0x1
    3f74:	mov	x1, x22
    3f78:	add	x20, x20, #0x18
    3f7c:	bl	71c <htab_find_slot>
    3f80:	str	x22, [x0]
    3f84:	b	3ee8 <gomp_workshare_task_reduction_register+0xe8>
    3f88:	ldr	x0, [sp, #104]
    3f8c:	ldp	x21, x22, [sp, #32]
    3f90:	ldp	x25, x26, [sp, #64]
    3f94:	ldr	x27, [sp, #80]
    3f98:	str	x0, [x19, #40]
    3f9c:	ldr	x0, [x24, #40]
    3fa0:	ldp	x19, x20, [sp, #16]
    3fa4:	str	x23, [x0, #40]
    3fa8:	ldp	x23, x24, [sp, #48]
    3fac:	ldp	x29, x30, [sp], #112
    3fb0:	ret

0000000000003fb4 <gomp_workshare_taskgroup_start>:
    3fb4:	stp	x29, x30, [sp, #-32]!
    3fb8:	mov	x29, sp
    3fbc:	stp	x19, x20, [sp, #16]
    3fc0:	mrs	x19, tpidr_el0
    3fc4:	adrp	x20, 0 <gomp_tls_data>
    3fc8:	ldr	x20, [x20]
    3fcc:	add	x0, x19, x20
    3fd0:	ldr	x0, [x0, #16]
    3fd4:	cbnz	x0, 3fdc <gomp_workshare_taskgroup_start+0x28>
    3fd8:	bl	1364 <gomp_create_artificial_team>
    3fdc:	add	x19, x19, x20
    3fe0:	ldr	x19, [x19, #80]
    3fe4:	ldr	x0, [x19, #40]
    3fe8:	bl	15c <gomp_taskgroup_init>
    3fec:	str	x0, [x19, #40]
    3ff0:	mov	w1, #0x1                   	// #1
    3ff4:	strb	w1, [x0, #50]
    3ff8:	ldp	x19, x20, [sp, #16]
    3ffc:	ldp	x29, x30, [sp], #32
    4000:	ret

0000000000004004 <GOMP_workshare_task_reduction_unregister>:
    4004:	stp	x29, x30, [sp, #-48]!
    4008:	mov	x29, sp
    400c:	stp	x19, x20, [sp, #16]
    4010:	adrp	x19, 0 <gomp_tls_data>
    4014:	ldr	x19, [x19]
    4018:	stp	x21, x22, [sp, #32]
    401c:	and	w22, w0, #0xff
    4020:	mrs	x0, tpidr_el0
    4024:	add	x19, x0, x19
    4028:	ldr	x0, [x19, #80]
    402c:	ldr	x21, [x19, #16]
    4030:	ldr	x0, [x0, #40]
    4034:	ldr	x20, [x0, #40]
    4038:	bl	27d0 <GOMP_taskgroup_end>
    403c:	ldr	w0, [x19, #40]
    4040:	cbnz	w0, 4064 <GOMP_workshare_task_reduction_unregister+0x60>
    4044:	mov	x0, x20
    4048:	bl	3b88 <GOMP_taskgroup_reduction_unregister>
    404c:	cbnz	w22, 4070 <GOMP_workshare_task_reduction_unregister+0x6c>
    4050:	add	x0, x21, #0x80
    4054:	ldp	x19, x20, [sp, #16]
    4058:	ldp	x21, x22, [sp, #32]
    405c:	ldp	x29, x30, [sp], #48
    4060:	b	0 <gomp_team_barrier_wait>
    4064:	ldr	x0, [x20, #40]
    4068:	bl	0 <free>
    406c:	b	404c <GOMP_workshare_task_reduction_unregister+0x48>
    4070:	ldp	x19, x20, [sp, #16]
    4074:	ldp	x21, x22, [sp, #32]
    4078:	ldp	x29, x30, [sp], #48
    407c:	ret

0000000000004080 <gomp_ialias_omp_in_final>:
    4080:	adrp	x0, 0 <gomp_tls_data>
    4084:	ldr	x0, [x0]
    4088:	mrs	x1, tpidr_el0
    408c:	add	x0, x1, x0
    4090:	ldr	x0, [x0, #80]
    4094:	cbz	x0, 40a0 <gomp_ialias_omp_in_final+0x20>
    4098:	ldrb	w0, [x0, #205]
    409c:	ret
    40a0:	mov	w0, #0x0                   	// #0
    40a4:	b	409c <gomp_ialias_omp_in_final+0x1c>

team.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_free_pool_helper>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	add	x0, x0, #0x40
       8:	mov	x29, sp
       c:	bl	0 <gomp_barrier_wait_last>
      10:	mrs	x0, tpidr_el0
      14:	add	x0, x0, #0x0, lsl #12
      18:	add	x0, x0, #0x0
      1c:	str	xzr, [x0, #80]
      20:	str	xzr, [x0, #96]
      24:	bl	0 <pthread_self>
      28:	bl	0 <pthread_detach>
      2c:	mov	x0, #0x0                   	// #0
      30:	bl	0 <pthread_exit>

0000000000000034 <gomp_pause_pool_helper>:
      34:	stp	x29, x30, [sp, #-16]!
      38:	add	x0, x0, #0x40
      3c:	mov	x29, sp
      40:	bl	0 <gomp_barrier_wait_last>
      44:	mrs	x0, tpidr_el0
      48:	add	x0, x0, #0x0, lsl #12
      4c:	add	x0, x0, #0x0
      50:	str	xzr, [x0, #80]
      54:	str	xzr, [x0, #96]
      58:	mov	x0, #0x0                   	// #0
      5c:	bl	0 <pthread_exit>

0000000000000060 <gomp_thread_start>:
      60:	stp	x29, x30, [sp, #-80]!
      64:	mov	x29, sp
      68:	stp	x21, x22, [sp, #32]
      6c:	mrs	x21, tpidr_el0
      70:	stp	x19, x20, [sp, #16]
      74:	add	x19, x21, #0x0, lsl #12
      78:	add	x19, x19, #0x0
      7c:	add	x4, x19, #0x58
      80:	stp	x23, x24, [sp, #48]
      84:	ldp	x22, x23, [x0]
      88:	ldp	x1, x2, [x0, #16]
      8c:	ldp	x24, x20, [x0, #80]
      90:	str	x25, [sp, #64]
      94:	stp	x1, x2, [x19, #16]
      98:	ldp	x2, x3, [x0, #32]
      9c:	stp	x2, x3, [x19, #32]
      a0:	ldp	x2, x3, [x0, #48]
      a4:	stp	x2, x3, [x19, #48]
      a8:	ldp	x2, x3, [x0, #64]
      ac:	stp	x2, x3, [x19, #64]
      b0:	ldr	w2, [x0, #96]
      b4:	ldr	x3, [x1, #80]
      b8:	str	w2, [x19, #92]
      bc:	ldr	w2, [x19, #40]
      c0:	str	x24, [x19, #80]
      c4:	str	wzr, [x19, #88]
      c8:	lsl	x2, x2, #3
      cc:	str	x20, [x19, #96]
      d0:	str	x4, [x3, x2]
      d4:	ldrb	w0, [x0, #100]
      d8:	cbz	w0, 140 <gomp_thread_start+0xe0>
      dc:	add	x19, x1, #0x80
      e0:	mov	x0, x19
      e4:	bl	0 <gomp_barrier_wait>
      e8:	mov	x0, x23
      ec:	blr	x22
      f0:	mov	x0, x19
      f4:	bl	0 <gomp_team_barrier_wait_final>
      f8:	ldr	x0, [x24, #56]
      fc:	cbz	x0, 104 <gomp_thread_start+0xa4>
     100:	bl	0 <free>
     104:	mov	x0, x19
     108:	bl	0 <gomp_barrier_wait_last>
     10c:	add	x21, x21, #0x0, lsl #12
     110:	add	x21, x21, #0x0
     114:	bl	0 <pthread_self>
     118:	bl	0 <pthread_detach>
     11c:	ldp	x19, x20, [sp, #16]
     120:	mov	x0, #0x0                   	// #0
     124:	ldp	x23, x24, [sp, #48]
     128:	ldr	x25, [sp, #64]
     12c:	str	xzr, [x21, #80]
     130:	str	xzr, [x21, #96]
     134:	ldp	x21, x22, [sp, #32]
     138:	ldp	x29, x30, [sp], #80
     13c:	ret
     140:	ldr	x0, [x20], #64
     144:	str	x19, [x0, x2]
     148:	mov	x0, x20
     14c:	bl	0 <gomp_barrier_wait>
     150:	ldr	x25, [x19, #16]
     154:	mov	x0, x23
     158:	ldr	x24, [x19, #80]
     15c:	blr	x22
     160:	add	x0, x25, #0x80
     164:	bl	0 <gomp_team_barrier_wait_final>
     168:	ldr	x0, [x24, #56]
     16c:	cbz	x0, 174 <gomp_thread_start+0x114>
     170:	bl	0 <free>
     174:	mov	x0, x20
     178:	bl	0 <gomp_barrier_wait>
     17c:	ldp	x22, x23, [x19]
     180:	str	xzr, [x19]
     184:	cbnz	x22, 150 <gomp_thread_start+0xf0>
     188:	b	10c <gomp_thread_start+0xac>

000000000000018c <gomp_new_team>:
     18c:	stp	x29, x30, [sp, #-48]!
     190:	mov	x29, sp
     194:	stp	x19, x20, [sp, #16]
     198:	mrs	x19, tpidr_el0
     19c:	add	x19, x19, #0x0, lsl #12
     1a0:	add	x19, x19, #0x0
     1a4:	stp	x21, x22, [sp, #32]
     1a8:	mov	w22, w0
     1ac:	mov	x20, x22
     1b0:	ldr	x0, [x19, #16]
     1b4:	cbnz	x0, 2a8 <gomp_new_team+0x11c>
     1b8:	ldr	x21, [x19, #96]
     1bc:	cbnz	x21, 1e8 <gomp_new_team+0x5c>
     1c0:	mov	x0, #0xc0                  	// #192
     1c4:	bl	0 <gomp_malloc>
     1c8:	mov	x21, x0
     1cc:	adrp	x0, 4 <gomp_free_pool_helper+0x4>
     1d0:	mov	x1, x19
     1d4:	str	x21, [x19, #96]
     1d8:	ldr	w0, [x0]
     1dc:	stp	xzr, xzr, [x21]
     1e0:	stp	xzr, x22, [x21, #16]
     1e4:	bl	0 <pthread_setspecific>
     1e8:	ldr	x19, [x21, #16]
     1ec:	cbz	x19, 2a8 <gomp_new_team+0x11c>
     1f0:	ldr	w0, [x19]
     1f4:	cmp	w20, w0
     1f8:	b.ne	2a8 <gomp_new_team+0x11c>  // b.any
     1fc:	str	xzr, [x21, #16]
     200:	mov	w0, #0x8                   	// #8
     204:	str	w0, [x19, #4]
     208:	add	x0, x19, #0x100
     20c:	str	x0, [x19, #88]
     210:	str	xzr, [x19, #112]
     214:	mov	w2, w20
     218:	mov	x1, #0x0                   	// #0
     21c:	bl	0 <gomp_init_work_share>
     220:	str	wzr, [x19, #72]
     224:	add	x0, x19, #0x180
     228:	stp	x0, xzr, [x19, #96]
     22c:	add	x0, x19, #0x200
     230:	str	x0, [x19, #464]
     234:	add	x0, x19, #0x280
     238:	str	x0, [x19, #592]
     23c:	add	x0, x19, #0x300
     240:	str	x0, [x19, #720]
     244:	add	x0, x19, #0x380
     248:	str	x0, [x19, #848]
     24c:	add	x0, x19, #0x400
     250:	str	x0, [x19, #976]
     254:	add	x0, x19, #0x480
     258:	mov	x2, #0x540                 	// #1344
     25c:	str	x0, [x19, #1104]
     260:	mov	w0, #0xd0                  	// #208
     264:	add	x1, x19, #0x518
     268:	str	xzr, [x19, #312]
     26c:	umaddl	x20, w20, w0, x2
     270:	str	xzr, [x19, #1232]
     274:	add	x0, x19, x20
     278:	str	x0, [x19, #80]
     27c:	add	x0, x19, #0x48
     280:	str	x0, [x19, x20]
     284:	mov	x0, x19
     288:	str	xzr, [x19, #1288]
     28c:	stp	xzr, xzr, [x1]
     290:	stp	xzr, xzr, [x1, #16]
     294:	str	wzr, [x19, #1336]
     298:	ldp	x19, x20, [sp, #16]
     29c:	ldp	x21, x22, [sp, #32]
     2a0:	ldp	x29, x30, [sp], #48
     2a4:	ret
     2a8:	mov	w1, #0xd8                  	// #216
     2ac:	mov	x0, #0x540                 	// #1344
     2b0:	umaddl	x0, w20, w1, x0
     2b4:	bl	0 <gomp_malloc>
     2b8:	mov	x19, x0
     2bc:	str	w20, [x0]
     2c0:	stp	w20, wzr, [x0, #128]
     2c4:	stp	w20, w20, [x0, #192]
     2c8:	str	wzr, [x0, #1280]
     2cc:	b	200 <gomp_new_team+0x74>

00000000000002d0 <gomp_team_start>:
     2d0:	stp	x29, x30, [sp, #-320]!
     2d4:	mov	x29, sp
     2d8:	stp	x25, x26, [sp, #64]
     2dc:	mrs	x25, tpidr_el0
     2e0:	add	x26, x25, #0x0, lsl #12
     2e4:	add	x26, x26, #0x0
     2e8:	stp	x19, x20, [sp, #16]
     2ec:	adrp	x19, 0 <gomp_places_list>
     2f0:	stp	x21, x22, [sp, #32]
     2f4:	mov	w21, w2
     2f8:	mov	w22, w3
     2fc:	stp	x23, x24, [sp, #48]
     300:	adrp	x24, 0 <gomp_global_icv>
     304:	add	x24, x24, #0x0
     308:	stp	x27, x28, [sp, #80]
     30c:	mov	x27, x4
     310:	stp	x1, x0, [x29, #144]
     314:	ldr	w0, [x26, #44]
     318:	str	w0, [x29, #196]
     31c:	mov	w0, w0
     320:	str	x5, [x29, #176]
     324:	cmp	w0, #0x0
     328:	cset	w0, ne  // ne = any
     32c:	str	w0, [x29, #192]
     330:	ldr	x0, [x26, #80]
     334:	str	x0, [x29, #200]
     338:	ldr	x23, [x26, #96]
     33c:	add	x0, x0, #0x90
     340:	ldr	x1, [x29, #200]
     344:	cmp	x1, #0x0
     348:	csel	x0, x24, x0, eq  // eq = none
     34c:	str	x0, [x29, #208]
     350:	ldr	x0, [x19]
     354:	cbz	x0, 388 <gomp_team_start+0xb8>
     358:	ldr	w0, [x26, #92]
     35c:	cbnz	w0, 388 <gomp_team_start+0xb8>
     360:	bl	0 <gomp_init_affinity>
     364:	adrp	x0, 0 <gomp_display_affinity_var>
     368:	ldrb	w0, [x0]
     36c:	cbz	w0, 388 <gomp_team_start+0xb8>
     370:	cmp	w21, #0x1
     374:	b.ne	388 <gomp_team_start+0xb8>  // b.any
     378:	bl	0 <pthread_self>
     37c:	ldr	w2, [x26, #92]
     380:	add	x1, x26, #0x10
     384:	bl	0 <gomp_display_affinity_thread>
     388:	add	x2, x25, #0x0, lsl #12
     38c:	add	x2, x2, #0x0
     390:	cmp	w21, #0x1
     394:	ldp	x0, x1, [x2, #16]
     398:	stp	x0, x1, [x27, #8]
     39c:	ldp	x0, x1, [x2, #32]
     3a0:	stp	x0, x1, [x27, #24]
     3a4:	ldp	x0, x1, [x2, #48]
     3a8:	stp	x0, x1, [x27, #40]
     3ac:	ldp	x0, x1, [x2, #64]
     3b0:	stp	x0, x1, [x27, #56]
     3b4:	ldr	w1, [x2, #44]
     3b8:	str	x27, [x2, #16]
     3bc:	add	w1, w1, #0x1
     3c0:	stp	wzr, w1, [x2, #40]
     3c4:	b.ls	3d4 <gomp_team_start+0x104>  // b.plast
     3c8:	ldr	w0, [x2, #48]
     3cc:	add	w0, w0, #0x1
     3d0:	str	w0, [x2, #48]
     3d4:	add	x2, x25, #0x0, lsl #12
     3d8:	add	x2, x2, #0x0
     3dc:	add	x0, x27, #0x100
     3e0:	str	x0, [x29, #160]
     3e4:	stp	x0, xzr, [x2, #24]
     3e8:	add	x0, x27, #0x540
     3ec:	stp	xzr, xzr, [x2, #64]
     3f0:	str	x0, [x2, #80]
     3f4:	ldr	x2, [x29, #208]
     3f8:	ldr	x2, [x2]
     3fc:	str	x2, [x29, #184]
     400:	adrp	x2, 0 <gomp_nthreads_var_list>
     404:	ldr	x2, [x2]
     408:	cbz	x2, 428 <gomp_team_start+0x158>
     40c:	adrp	x5, 0 <gomp_nthreads_var_list_len>
     410:	mov	w3, w1
     414:	ldr	x5, [x5]
     418:	cmp	x5, w1, uxtw
     41c:	b.ls	428 <gomp_team_start+0x158>  // b.plast
     420:	ldr	x2, [x2, x3, lsl #3]
     424:	str	x2, [x29, #184]
     428:	ldr	x2, [x29, #208]
     42c:	ldrb	w2, [x2, #26]
     430:	str	w2, [x29, #232]
     434:	cbz	w2, 448 <gomp_team_start+0x178>
     438:	ands	w22, w22, #0x7
     43c:	b.eq	448 <gomp_team_start+0x178>  // b.none
     440:	and	w2, w22, #0xff
     444:	str	w2, [x29, #232]
     448:	adrp	x2, 0 <gomp_bind_var_list>
     44c:	ldr	w3, [x29, #232]
     450:	str	w3, [x29, #216]
     454:	ldr	x2, [x2]
     458:	cbz	x2, 478 <gomp_team_start+0x1a8>
     45c:	adrp	x5, 0 <gomp_bind_var_list_len>
     460:	mov	w3, w1
     464:	ldr	x5, [x5]
     468:	cmp	x5, w1, uxtw
     46c:	b.ls	71c <gomp_team_start+0x44c>  // b.plast
     470:	ldrb	w1, [x2, x3]
     474:	str	w1, [x29, #216]
     478:	ldp	x1, x2, [x29, #200]
     47c:	bl	0 <gomp_init_task>
     480:	add	x0, x25, #0x0, lsl #12
     484:	add	x0, x0, #0x0
     488:	cmp	w21, #0x1
     48c:	ldr	x2, [x29, #176]
     490:	ldr	x1, [x0, #80]
     494:	str	x2, [x1, #40]
     498:	ldr	x1, [x29, #184]
     49c:	str	x1, [x27, #1488]
     4a0:	ldrb	w1, [x29, #216]
     4a4:	strb	w1, [x27, #1514]
     4a8:	b.eq	efc <gomp_team_start+0xc2c>  // b.none
     4ac:	ldr	x1, [x19]
     4b0:	cbz	x1, 7a0 <gomp_team_start+0x4d0>
     4b4:	ldr	w5, [x0, #92]
     4b8:	ldr	w1, [x29, #232]
     4bc:	sub	w26, w5, #0x1
     4c0:	cmp	w1, #0x3
     4c4:	b.eq	4d8 <gomp_team_start+0x208>  // b.none
     4c8:	cmp	w1, #0x4
     4cc:	b.eq	724 <gomp_team_start+0x454>  // b.none
     4d0:	cmp	w1, #0x1
     4d4:	b.ne	7b8 <gomp_team_start+0x4e8>  // b.any
     4d8:	add	x0, x25, #0x0, lsl #12
     4dc:	add	x0, x0, #0x0
     4e0:	ldr	w19, [x0, #56]
     4e4:	cmp	w19, w21
     4e8:	b.cs	7c8 <gomp_team_start+0x4f8>  // b.hs, b.nlast
     4ec:	udiv	w4, w21, w19
     4f0:	msub	w19, w4, w19, w21
     4f4:	mov	w24, #0x1                   	// #1
     4f8:	ldr	w0, [x29, #196]
     4fc:	cbnz	w0, c7c <gomp_team_start+0x9ac>
     500:	ldr	w0, [x23, #12]
     504:	str	w0, [x29, #224]
     508:	mov	w0, w0
     50c:	cmp	w21, w0
     510:	b.ls	800 <gomp_team_start+0x530>  // b.plast
     514:	cbnz	w0, 7d8 <gomp_team_start+0x508>
     518:	mov	w14, #0x0                   	// #0
     51c:	stp	w21, wzr, [x23, #64]
     520:	stp	w21, w21, [x23, #128]
     524:	ldr	w0, [x23, #8]
     528:	str	w21, [x23, #12]
     52c:	cmp	w0, w21
     530:	b.hi	568 <gomp_team_start+0x298>  // b.pmore
     534:	ldr	x0, [x23]
     538:	add	w1, w21, #0x1
     53c:	str	w1, [x23, #8]
     540:	add	x25, x25, #0x0, lsl #12
     544:	add	x25, x25, #0x0
     548:	ubfiz	x1, x1, #3, #32
     54c:	str	w4, [x29, #168]
     550:	str	w14, [x29, #220]
     554:	bl	0 <gomp_realloc>
     558:	ldr	w4, [x29, #168]
     55c:	ldr	w14, [x29, #220]
     560:	str	x0, [x23]
     564:	str	x25, [x0]
     568:	ldr	x0, [x29, #224]
     56c:	mov	w22, #0x0                   	// #0
     570:	mov	x11, #0x0                   	// #0
     574:	mov	w25, #0x1                   	// #1
     578:	str	wzr, [x29, #220]
     57c:	ubfiz	x0, x0, #3, #32
     580:	str	x0, [x29, #136]
     584:	ldr	w0, [x29, #224]
     588:	sub	w0, w21, w0
     58c:	lsl	x0, x0, #3
     590:	str	x0, [x29, #128]
     594:	mrs	x0, tpidr_el0
     598:	add	x0, x0, #0x0, lsl #12
     59c:	add	x0, x0, #0x0
     5a0:	str	x0, [x29, #168]
     5a4:	cmp	w25, w14
     5a8:	b.cc	808 <gomp_team_start+0x538>  // b.lo, b.ul, b.last
     5ac:	cbz	x11, 5ec <gomp_team_start+0x31c>
     5b0:	ldr	w0, [x29, #224]
     5b4:	cmp	w21, w0
     5b8:	b.hi	bcc <gomp_team_start+0x8fc>  // b.pmore
     5bc:	sub	w0, w0, w21
     5c0:	cmp	w0, w22
     5c4:	cset	w0, eq  // eq = none
     5c8:	cbz	w0, bd8 <gomp_team_start+0x908>
     5cc:	ldr	w0, [x27, #48]
     5d0:	cmp	w0, #0x40
     5d4:	b.ls	c74 <gomp_team_start+0x9a4>  // b.plast
     5d8:	mov	x0, x11
     5dc:	str	w4, [x29, #168]
     5e0:	bl	0 <free>
     5e4:	mov	w22, #0x0                   	// #0
     5e8:	ldr	w4, [x29, #168]
     5ec:	cmp	w25, w21
     5f0:	mov	x11, #0x0                   	// #0
     5f4:	b.eq	e80 <gomp_team_start+0xbb0>  // b.none
     5f8:	ldr	w1, [x29, #224]
     5fc:	add	w0, w22, w21
     600:	cmp	w0, w1
     604:	b.ls	634 <gomp_team_start+0x364>  // b.plast
     608:	cmp	w1, #0x0
     60c:	sub	x0, x0, w1, uxtw
     610:	cset	x1, eq  // eq = none
     614:	sub	x0, x0, x1
     618:	adrp	x1, 0 <gomp_managed_threads>
     61c:	add	x1, x1, #0x0
     620:	ldxr	x2, [x1]
     624:	add	x2, x2, x0
     628:	stlxr	w3, x2, [x1]
     62c:	cbnz	w3, 620 <gomp_team_start+0x350>
     630:	dmb	ish
     634:	adrp	x0, 0 <gomp_places_list>
     638:	adrp	x12, 40 <gomp_pause_pool_helper+0xc>
     63c:	add	x28, x12, #0x0
     640:	ldr	x0, [x0]
     644:	cbz	x0, 68c <gomp_team_start+0x3bc>
     648:	add	x0, x29, #0x100
     64c:	str	x11, [x29, #136]
     650:	str	w4, [x29, #168]
     654:	bl	0 <pthread_attr_init>
     658:	add	x1, x29, #0xf8
     65c:	mov	x0, x28
     660:	bl	0 <pthread_attr_getstacksize>
     664:	ldr	w4, [x29, #168]
     668:	ldr	x11, [x29, #136]
     66c:	cbnz	w0, 688 <gomp_team_start+0x3b8>
     670:	ldr	x1, [x29, #248]
     674:	add	x0, x29, #0x100
     678:	str	w4, [x29, #168]
     67c:	bl	0 <pthread_attr_setstacksize>
     680:	ldr	w4, [x29, #168]
     684:	ldr	x11, [x29, #136]
     688:	add	x28, x29, #0x100
     68c:	mov	x2, sp
     690:	sub	w0, w21, w25
     694:	mov	w1, #0x70                  	// #112
     698:	mov	w13, #0xd0                  	// #208
     69c:	mrs	x14, tpidr_el0
     6a0:	ubfiz	x15, x25, #3, #32
     6a4:	umsubl	x0, w0, w1, x2
     6a8:	add	x14, x14, #0x0, lsl #12
     6ac:	add	x14, x14, #0x0
     6b0:	umaddl	x13, w25, w13, x27
     6b4:	mov	sp, x0
     6b8:	adrp	x0, 0 <gomp_free_pool_helper>
     6bc:	mov	x20, sp
     6c0:	add	x0, x0, #0x0
     6c4:	str	x0, [x29, #168]
     6c8:	cmp	w25, w21
     6cc:	b.cc	c8c <gomp_team_start+0x9bc>  // b.lo, b.ul, b.last
     6d0:	add	x0, x29, #0x100
     6d4:	cmp	x28, x0
     6d8:	b.ne	6ec <gomp_team_start+0x41c>  // b.any
     6dc:	mov	x0, x28
     6e0:	str	x11, [x29, #232]
     6e4:	bl	0 <pthread_attr_destroy>
     6e8:	ldr	x11, [x29, #232]
     6ec:	ldr	w0, [x29, #196]
     6f0:	cbz	w0, e80 <gomp_team_start+0xbb0>
     6f4:	add	x0, x27, #0x80
     6f8:	str	x11, [x29, #232]
     6fc:	bl	0 <gomp_barrier_wait>
     700:	ldr	w0, [x29, #224]
     704:	ldr	x11, [x29, #232]
     708:	cmp	w21, w0
     70c:	b.cc	e8c <gomp_team_start+0xbbc>  // b.lo, b.ul, b.last
     710:	cbz	w22, ed8 <gomp_team_start+0xc08>
     714:	neg	w22, w22
     718:	b	e9c <gomp_team_start+0xbcc>
     71c:	ldr	w1, [x29, #232]
     720:	b	474 <gomp_team_start+0x1a4>
     724:	ldr	w19, [x0, #56]
     728:	cmp	w19, w21
     72c:	b.cc	78c <gomp_team_start+0x4bc>  // b.lo, b.ul, b.last
     730:	udiv	w4, w19, w21
     734:	ldr	w0, [x0, #52]
     738:	msub	w19, w4, w21, w19
     73c:	add	w1, w4, #0x1
     740:	madd	w19, w4, w19, w19
     744:	add	w19, w19, w0
     748:	cmp	w26, w19
     74c:	b.cs	774 <gomp_team_start+0x4a4>  // b.hs, b.nlast
     750:	sub	w0, w26, w0
     754:	udiv	w2, w0, w1
     758:	msub	w0, w2, w1, w0
     75c:	sub	w26, w26, w0
     760:	add	x0, x25, #0x0, lsl #12
     764:	add	x0, x0, #0x0
     768:	mov	w24, #0x0                   	// #0
     76c:	stp	w26, w1, [x0, #52]
     770:	b	4f8 <gomp_team_start+0x228>
     774:	sub	w1, w26, w19
     778:	udiv	w0, w1, w4
     77c:	msub	w0, w0, w4, w1
     780:	mov	w1, w4
     784:	sub	w26, w26, w0
     788:	b	760 <gomp_team_start+0x490>
     78c:	udiv	w4, w21, w19
     790:	mov	w7, #0x1                   	// #1
     794:	stp	w26, w7, [x0, #52]
     798:	msub	w19, w4, w19, w21
     79c:	b	4f4 <gomp_team_start+0x224>
     7a0:	mov	w24, #0x0                   	// #0
     7a4:	mov	w26, #0x0                   	// #0
     7a8:	mov	w19, #0x0                   	// #0
     7ac:	mov	w4, #0x0                   	// #0
     7b0:	str	wzr, [x29, #232]
     7b4:	b	4f8 <gomp_team_start+0x228>
     7b8:	mov	w24, #0x0                   	// #0
     7bc:	mov	w19, #0x0                   	// #0
     7c0:	mov	w4, #0x0                   	// #0
     7c4:	b	4f8 <gomp_team_start+0x228>
     7c8:	mov	w24, #0x1                   	// #1
     7cc:	mov	w19, #0x0                   	// #0
     7d0:	mov	w4, w24
     7d4:	b	4f8 <gomp_team_start+0x228>
     7d8:	ldr	w0, [x23, #64]
     7dc:	add	x1, x23, #0x80
     7e0:	sub	w0, w21, w0
     7e4:	ldaxr	w2, [x1]
     7e8:	add	w2, w2, w0
     7ec:	stlxr	w3, w2, [x1]
     7f0:	cbnz	w3, 7e4 <gomp_team_start+0x514>
     7f4:	ldr	w14, [x29, #224]
     7f8:	str	w21, [x23, #64]
     7fc:	b	524 <gomp_team_start+0x254>
     800:	mov	w14, w21
     804:	b	524 <gomp_team_start+0x254>
     808:	ldr	x0, [x29, #168]
     80c:	ldp	w15, w13, [x0, #52]
     810:	adrp	x0, 0 <gomp_places_list>
     814:	ldr	x0, [x0]
     818:	cbz	x0, ba8 <gomp_team_start+0x8d8>
     81c:	ldr	w0, [x29, #232]
     820:	cmp	w0, #0x3
     824:	b.eq	838 <gomp_team_start+0x568>  // b.none
     828:	cmp	w0, #0x4
     82c:	b.eq	9b8 <gomp_team_start+0x6e8>  // b.none
     830:	cmp	w0, #0x1
     834:	b.ne	ff8 <gomp_team_start+0xd28>  // b.any
     838:	cmp	w4, w24
     83c:	b.ne	86c <gomp_team_start+0x59c>  // b.any
     840:	ldp	w1, w0, [x27, #44]
     844:	add	w28, w26, #0x1
     848:	add	w0, w1, w0
     84c:	cmp	w0, w28
     850:	sub	w0, w21, w19
     854:	csel	w28, w28, w1, ne  // ne = any
     858:	cmp	w0, w25
     85c:	b.ne	864 <gomp_team_start+0x594>  // b.any
     860:	mov	w4, #0x1                   	// #1
     864:	mov	w24, #0x1                   	// #1
     868:	b	874 <gomp_team_start+0x5a4>
     86c:	add	w24, w24, #0x1
     870:	mov	w28, w26
     874:	cbnz	x11, 978 <gomp_team_start+0x6a8>
     878:	ldr	w0, [x29, #232]
     87c:	cmp	w0, #0x1
     880:	b.eq	89c <gomp_team_start+0x5cc>  // b.none
     884:	ldr	x0, [x23]
     888:	ldr	x1, [x0, w25, uxtw #3]
     88c:	add	w0, w28, #0x1
     890:	ldr	w1, [x1, #92]
     894:	cmp	w1, w0
     898:	b.ne	8bc <gomp_team_start+0x5ec>  // b.any
     89c:	ldr	x0, [x23]
     8a0:	ldr	x12, [x0, w25, uxtw #3]
     8a4:	ldr	w0, [x12, #92]
     8a8:	cmp	w0, w15
     8ac:	b.ls	8bc <gomp_team_start+0x5ec>  // b.plast
     8b0:	add	w1, w13, w15
     8b4:	cmp	w0, w1
     8b8:	b.ls	ba0 <gomp_team_start+0x8d0>  // b.plast
     8bc:	ldr	w1, [x27, #48]
     8c0:	cmp	w1, #0x40
     8c4:	ubfiz	x0, x1, #3, #32
     8c8:	b.ls	a34 <gomp_team_start+0x764>  // b.plast
     8cc:	str	w15, [x29, #112]
     8d0:	str	w13, [x29, #120]
     8d4:	str	w4, [x29, #220]
     8d8:	bl	0 <gomp_malloc>
     8dc:	ldr	w15, [x29, #112]
     8e0:	mov	x11, x0
     8e4:	ldr	w13, [x29, #120]
     8e8:	ldr	w4, [x29, #220]
     8ec:	ldr	w22, [x27, #48]
     8f0:	mov	x0, x11
     8f4:	mov	w1, #0x0                   	// #0
     8f8:	str	w15, [x29, #112]
     8fc:	str	w13, [x29, #120]
     900:	ubfiz	x2, x22, #3, #32
     904:	str	w4, [x29, #220]
     908:	bl	0 <memset>
     90c:	mov	x11, x0
     910:	ldr	w15, [x29, #112]
     914:	ubfiz	x1, x25, #3, #32
     918:	ldr	w13, [x29, #120]
     91c:	mov	w2, w25
     920:	ldr	w4, [x29, #220]
     924:	ldr	w0, [x29, #224]
     928:	cmp	w2, w0
     92c:	b.cc	a48 <gomp_team_start+0x778>  // b.lo, b.ul, b.last
     930:	cmp	w21, w0
     934:	b.ls	96c <gomp_team_start+0x69c>  // b.plast
     938:	ldp	x2, x3, [x29, #128]
     93c:	mov	w1, #0x0                   	// #0
     940:	ldr	x0, [x23]
     944:	str	w15, [x29, #104]
     948:	str	x11, [x29, #112]
     94c:	str	w13, [x29, #120]
     950:	add	x0, x0, x3
     954:	str	w4, [x29, #220]
     958:	bl	0 <memset>
     95c:	ldr	w15, [x29, #104]
     960:	ldr	w13, [x29, #120]
     964:	ldr	w4, [x29, #220]
     968:	ldr	x11, [x29, #112]
     96c:	mov	w14, w21
     970:	ldr	w0, [x29, #224]
     974:	sub	w22, w0, w25
     978:	cbz	w22, bbc <gomp_team_start+0x8ec>
     97c:	ldr	w1, [x27, #44]
     980:	sub	w0, w28, w1
     984:	ldr	x0, [x11, x0, lsl #3]
     988:	cbnz	x0, ab0 <gomp_team_start+0x7e0>
     98c:	ldr	w0, [x29, #232]
     990:	cmp	w0, #0x1
     994:	b.ne	9ac <gomp_team_start+0x6dc>  // b.any
     998:	mov	w0, w15
     99c:	add	w2, w13, w15
     9a0:	cmp	w2, w0
     9a4:	b.hi	a9c <gomp_team_start+0x7cc>  // b.pmore
     9a8:	b.ne	ab4 <gomp_team_start+0x7e4>  // b.any
     9ac:	mov	w0, #0x1                   	// #1
     9b0:	str	w0, [x29, #220]
     9b4:	b	b94 <gomp_team_start+0x8c4>
     9b8:	cbnz	w24, 9ec <gomp_team_start+0x71c>
     9bc:	ldp	w1, w0, [x27, #44]
     9c0:	cmp	w19, w26
     9c4:	add	w28, w4, w26
     9c8:	cinc	w28, w28, hi  // hi = pmore
     9cc:	add	w0, w1, w0
     9d0:	cmp	w0, w28
     9d4:	csel	w28, w28, w1, ne  // ne = any
     9d8:	cmp	w19, w28
     9dc:	cinc	w13, w4, hi  // hi = pmore
     9e0:	mov	w15, w28
     9e4:	cbnz	x11, 978 <gomp_team_start+0x6a8>
     9e8:	b	884 <gomp_team_start+0x5b4>
     9ec:	cmp	w4, w24
     9f0:	b.ne	a24 <gomp_team_start+0x754>  // b.any
     9f4:	ldp	w1, w0, [x27, #44]
     9f8:	add	w28, w26, #0x1
     9fc:	mov	w24, #0x1                   	// #1
     a00:	mov	w13, w24
     a04:	add	w0, w1, w0
     a08:	cmp	w0, w28
     a0c:	sub	w0, w21, w19
     a10:	csel	w28, w28, w1, ne  // ne = any
     a14:	cmp	w0, w25
     a18:	b.ne	9e0 <gomp_team_start+0x710>  // b.any
     a1c:	mov	w4, w24
     a20:	b	9e0 <gomp_team_start+0x710>
     a24:	add	w24, w24, #0x1
     a28:	mov	w28, w26
     a2c:	mov	w13, #0x1                   	// #1
     a30:	b	9e0 <gomp_team_start+0x710>
     a34:	add	x0, x0, #0xf
     a38:	and	x0, x0, #0xffffffff0
     a3c:	sub	sp, sp, x0
     a40:	mov	x11, sp
     a44:	b	8ec <gomp_team_start+0x61c>
     a48:	ldr	x0, [x23]
     a4c:	add	x12, x0, x1
     a50:	ldr	x14, [x0, x1]
     a54:	ldr	w0, [x27, #44]
     a58:	ldr	w5, [x14, #92]
     a5c:	cmp	w5, w0
     a60:	b.ls	a8c <gomp_team_start+0x7bc>  // b.plast
     a64:	add	w16, w22, w0
     a68:	cmp	w5, w16
     a6c:	b.hi	a8c <gomp_team_start+0x7bc>  // b.pmore
     a70:	mvn	w0, w0
     a74:	add	w0, w0, w5
     a78:	lsl	x0, x0, #3
     a7c:	ldr	x5, [x11, x0]
     a80:	str	x5, [x14, #8]
     a84:	ldr	x5, [x12]
     a88:	str	x5, [x11, x0]
     a8c:	add	w2, w2, #0x1
     a90:	add	x1, x1, #0x8
     a94:	str	xzr, [x12]
     a98:	b	924 <gomp_team_start+0x654>
     a9c:	sub	w5, w0, w1
     aa0:	ldr	x5, [x11, x5, lsl #3]
     aa4:	cbnz	x5, ab4 <gomp_team_start+0x7e4>
     aa8:	add	w0, w0, #0x1
     aac:	b	9a0 <gomp_team_start+0x6d0>
     ab0:	mov	w0, w28
     ab4:	sub	w0, w0, w1
     ab8:	sub	w22, w22, #0x1
     abc:	lsl	x0, x0, #3
     ac0:	ldr	x12, [x11, x0]
     ac4:	ldr	x1, [x12, #8]
     ac8:	str	x1, [x11, x0]
     acc:	ldr	x0, [x23]
     ad0:	str	x12, [x0, w25, uxtw #3]
     ad4:	mov	w0, #0x1                   	// #1
     ad8:	str	w0, [x29, #220]
     adc:	add	w1, w28, #0x1
     ae0:	ldr	x0, [x29, #160]
     ae4:	stp	x27, x0, [x12, #16]
     ae8:	ldr	w0, [x27, #36]
     aec:	str	w1, [x12, #92]
     af0:	add	w0, w0, #0x1
     af4:	str	w0, [x12, #44]
     af8:	ldr	x0, [x29, #168]
     afc:	str	xzr, [x12, #32]
     b00:	ldr	x1, [x29, #200]
     b04:	str	w25, [x12, #40]
     b08:	ldr	w0, [x0, #48]
     b0c:	str	w0, [x12, #48]
     b10:	mov	w0, #0xd0                  	// #208
     b14:	stp	w15, w13, [x12, #52]
     b18:	ldr	x2, [x29, #208]
     b1c:	umaddl	x0, w25, w0, x27
     b20:	stp	xzr, xzr, [x12, #64]
     b24:	add	x0, x0, #0x540
     b28:	str	x0, [x12, #80]
     b2c:	str	x11, [x29, #96]
     b30:	str	w4, [x29, #104]
     b34:	str	w14, [x29, #112]
     b38:	str	x12, [x29, #120]
     b3c:	bl	0 <gomp_init_task>
     b40:	mov	w0, w25
     b44:	mov	x1, #0xd0                  	// #208
     b48:	ldr	x12, [x29, #120]
     b4c:	madd	x1, x0, x1, x27
     b50:	ldr	w4, [x29, #104]
     b54:	ldr	x2, [x29, #184]
     b58:	add	x12, x12, #0x58
     b5c:	ldr	w14, [x29, #112]
     b60:	str	x2, [x1, #1488]
     b64:	ldrb	w2, [x29, #216]
     b68:	strb	w2, [x1, #1514]
     b6c:	ldr	x2, [x29, #176]
     b70:	ldur	x1, [x12, #-8]
     b74:	ldr	x11, [x29, #96]
     b78:	str	x2, [x1, #40]
     b7c:	ldr	x1, [x29, #152]
     b80:	stur	x1, [x12, #-88]
     b84:	ldr	x1, [x29, #144]
     b88:	stur	x1, [x12, #-80]
     b8c:	ldr	x1, [x27, #80]
     b90:	str	x12, [x1, x0, lsl #3]
     b94:	add	w25, w25, #0x1
     b98:	mov	w26, w28
     b9c:	b	5a4 <gomp_team_start+0x2d4>
     ba0:	mov	x11, #0x0                   	// #0
     ba4:	b	adc <gomp_team_start+0x80c>
     ba8:	ldr	x0, [x23]
     bac:	mov	w28, w26
     bb0:	mov	w1, #0x0                   	// #0
     bb4:	ldr	x12, [x0, w25, uxtw #3]
     bb8:	b	ae0 <gomp_team_start+0x810>
     bbc:	mov	w0, #0x1                   	// #1
     bc0:	mov	w26, w28
     bc4:	str	w0, [x29, #220]
     bc8:	b	5b0 <gomp_team_start+0x2e0>
     bcc:	ldr	w0, [x29, #224]
     bd0:	cmp	w25, w0
     bd4:	b	5c4 <gomp_team_start+0x2f4>
     bd8:	ldr	w0, [x29, #232]
     bdc:	cmp	w0, #0x3
     be0:	b.eq	bf4 <gomp_team_start+0x924>  // b.none
     be4:	cmp	w0, #0x4
     be8:	b.eq	c54 <gomp_team_start+0x984>  // b.none
     bec:	cmp	w0, #0x1
     bf0:	b.ne	c24 <gomp_team_start+0x954>  // b.any
     bf4:	mrs	x0, tpidr_el0
     bf8:	add	x1, x0, #0x0, lsl #12
     bfc:	add	x1, x1, #0x0
     c00:	ldr	w1, [x1, #56]
     c04:	cmp	w1, w21
     c08:	b.cs	c10 <gomp_team_start+0x940>  // b.hs, b.nlast
     c0c:	udiv	w4, w21, w1
     c10:	add	x0, x0, #0x0, lsl #12
     c14:	add	x0, x0, #0x0
     c18:	ldr	w5, [x0, #92]
     c1c:	sub	w26, w5, #0x1
     c20:	mov	w24, #0x1                   	// #1
     c24:	cbz	w22, c4c <gomp_team_start+0x97c>
     c28:	ldr	w1, [x23, #64]
     c2c:	add	w0, w21, w22
     c30:	add	x2, x23, #0x80
     c34:	sub	w1, w0, w1
     c38:	ldaxr	w3, [x2]
     c3c:	add	w3, w3, w1
     c40:	stlxr	w5, w3, [x2]
     c44:	cbnz	w5, c38 <gomp_team_start+0x968>
     c48:	str	w0, [x23, #64]
     c4c:	mov	w25, #0x1                   	// #1
     c50:	b	5f8 <gomp_team_start+0x328>
     c54:	mrs	x0, tpidr_el0
     c58:	add	x0, x0, #0x0, lsl #12
     c5c:	add	x0, x0, #0x0
     c60:	ldr	w26, [x0, #52]
     c64:	cbz	w24, c24 <gomp_team_start+0x954>
     c68:	ldr	w8, [x27, #48]
     c6c:	udiv	w4, w21, w8
     c70:	b	c20 <gomp_team_start+0x950>
     c74:	mov	w22, #0x0                   	// #0
     c78:	b	5ec <gomp_team_start+0x31c>
     c7c:	mov	x11, #0x0                   	// #0
     c80:	mov	w22, #0x0                   	// #0
     c84:	stp	wzr, wzr, [x29, #220]
     c88:	b	c4c <gomp_team_start+0x97c>
     c8c:	ldur	x0, [x14, #52]
     c90:	stur	x0, [x20, #52]
     c94:	adrp	x0, 0 <gomp_places_list>
     c98:	str	wzr, [x20, #96]
     c9c:	ldr	x0, [x0]
     ca0:	cbz	x0, d3c <gomp_team_start+0xa6c>
     ca4:	ldr	w0, [x29, #232]
     ca8:	cmp	w0, #0x3
     cac:	b.eq	cc0 <gomp_team_start+0x9f0>  // b.none
     cb0:	cmp	w0, #0x4
     cb4:	b.eq	df8 <gomp_team_start+0xb28>  // b.none
     cb8:	cmp	w0, #0x1
     cbc:	b.ne	cf8 <gomp_team_start+0xa28>  // b.any
     cc0:	cmp	w4, w24
     cc4:	b.ne	cf4 <gomp_team_start+0xa24>  // b.any
     cc8:	ldp	w1, w0, [x27, #44]
     ccc:	add	w26, w26, #0x1
     cd0:	add	w0, w1, w0
     cd4:	cmp	w26, w0
     cd8:	sub	w0, w21, w19
     cdc:	csel	w26, w26, w1, ne  // ne = any
     ce0:	cmp	w0, w25
     ce4:	b.ne	cec <gomp_team_start+0xa1c>  // b.any
     ce8:	mov	w4, #0x1                   	// #1
     cec:	mov	w24, #0x1                   	// #1
     cf0:	b	cf8 <gomp_team_start+0xa28>
     cf4:	add	w24, w24, #0x1
     cf8:	add	w0, w26, #0x1
     cfc:	str	w0, [x20, #96]
     d00:	cbz	x11, d10 <gomp_team_start+0xa40>
     d04:	ldr	x0, [x23]
     d08:	ldr	x0, [x0, x15]
     d0c:	cbnz	x0, e70 <gomp_team_start+0xba0>
     d10:	mov	w1, w26
     d14:	mov	x0, x28
     d18:	stp	x14, x15, [x29, #104]
     d1c:	str	x11, [x29, #120]
     d20:	str	w4, [x29, #128]
     d24:	str	x13, [x29, #136]
     d28:	bl	0 <gomp_init_thread_affinity>
     d2c:	ldp	x14, x15, [x29, #104]
     d30:	ldr	w4, [x29, #128]
     d34:	ldr	x11, [x29, #120]
     d38:	ldr	x13, [x29, #136]
     d3c:	str	x27, [x20, #16]
     d40:	ldr	x0, [x29, #152]
     d44:	str	x0, [x20]
     d48:	ldr	x0, [x29, #144]
     d4c:	str	x0, [x20, #8]
     d50:	ldr	x0, [x29, #160]
     d54:	str	x0, [x20, #24]
     d58:	ldr	w0, [x27, #36]
     d5c:	ldp	x1, x2, [x29, #200]
     d60:	add	w0, w0, #0x1
     d64:	str	w0, [x20, #44]
     d68:	ldr	w0, [x14, #48]
     d6c:	str	xzr, [x20, #32]
     d70:	str	w25, [x20, #40]
     d74:	str	w0, [x20, #48]
     d78:	add	x0, x13, #0x540
     d7c:	stp	xzr, xzr, [x20, #64]
     d80:	str	x0, [x20, #80]
     d84:	stp	x15, x11, [x29, #104]
     d88:	str	w4, [x29, #120]
     d8c:	stp	x14, x13, [x29, #128]
     d90:	bl	0 <gomp_init_task>
     d94:	mov	x3, x20
     d98:	ldr	x13, [x29, #136]
     d9c:	ldr	x0, [x29, #184]
     da0:	str	x0, [x13, #1488]
     da4:	ldrb	w0, [x29, #216]
     da8:	strb	w0, [x13, #1514]
     dac:	ldr	x0, [x20, #80]
     db0:	ldp	x2, x1, [x29, #168]
     db4:	str	x1, [x0, #40]
     db8:	ldrb	w0, [x29, #192]
     dbc:	mov	x1, x28
     dc0:	str	x23, [x20, #88]
     dc4:	strb	w0, [x20, #100]
     dc8:	add	x0, x20, #0x68
     dcc:	add	x20, x20, #0x70
     dd0:	bl	0 <pthread_create>
     dd4:	ldr	w4, [x29, #120]
     dd8:	ldp	x15, x11, [x29, #104]
     ddc:	ldp	x14, x13, [x29, #128]
     de0:	cbz	w0, e70 <gomp_team_start+0xba0>
     de4:	bl	0 <strerror>
     de8:	mov	x1, x0
     dec:	adrp	x0, 0 <gomp_free_pool_helper>
     df0:	add	x0, x0, #0x0
     df4:	bl	0 <gomp_fatal>
     df8:	cbnz	w24, e2c <gomp_team_start+0xb5c>
     dfc:	add	w0, w4, w26
     e00:	cmp	w19, w26
     e04:	cinc	w26, w0, hi  // hi = pmore
     e08:	ldp	w1, w0, [x27, #44]
     e0c:	add	w0, w1, w0
     e10:	cmp	w0, w26
     e14:	csel	w26, w26, w1, ne  // ne = any
     e18:	str	w26, [x20, #52]
     e1c:	cmp	w19, w26
     e20:	cinc	w0, w4, hi  // hi = pmore
     e24:	str	w0, [x20, #56]
     e28:	b	cf8 <gomp_team_start+0xa28>
     e2c:	cmp	w4, w24
     e30:	b.ne	e60 <gomp_team_start+0xb90>  // b.any
     e34:	ldp	w1, w0, [x27, #44]
     e38:	add	w26, w26, #0x1
     e3c:	add	w0, w1, w0
     e40:	cmp	w0, w26
     e44:	sub	w0, w21, w19
     e48:	csel	w26, w26, w1, ne  // ne = any
     e4c:	cmp	w0, w25
     e50:	b.ne	e58 <gomp_team_start+0xb88>  // b.any
     e54:	mov	w4, #0x1                   	// #1
     e58:	mov	w24, #0x1                   	// #1
     e5c:	b	e64 <gomp_team_start+0xb94>
     e60:	add	w24, w24, #0x1
     e64:	mov	w0, #0x1                   	// #1
     e68:	str	w26, [x20, #52]
     e6c:	b	e24 <gomp_team_start+0xb54>
     e70:	add	w25, w25, #0x1
     e74:	add	x13, x13, #0xd0
     e78:	add	x15, x15, #0x8
     e7c:	b	6c8 <gomp_team_start+0x3f8>
     e80:	add	x0, x23, #0x40
     e84:	str	x11, [x29, #232]
     e88:	b	6fc <gomp_team_start+0x42c>
     e8c:	cbnz	w22, 714 <gomp_team_start+0x444>
     e90:	ldr	w0, [x29, #224]
     e94:	mov	w22, w21
     e98:	sub	x22, x22, w0, uxtw
     e9c:	ldr	w0, [x23, #64]
     ea0:	add	x1, x23, #0x80
     ea4:	sub	w0, w21, w0
     ea8:	ldaxr	w2, [x1]
     eac:	add	w2, w2, w0
     eb0:	stlxr	w3, w2, [x1]
     eb4:	cbnz	w3, ea8 <gomp_team_start+0xbd8>
     eb8:	adrp	x0, 0 <gomp_managed_threads>
     ebc:	add	x0, x0, #0x0
     ec0:	str	w21, [x23, #64]
     ec4:	ldxr	x1, [x0]
     ec8:	add	x1, x1, x22
     ecc:	stlxr	w2, x1, [x0]
     ed0:	cbnz	w2, ec4 <gomp_team_start+0xbf4>
     ed4:	dmb	ish
     ed8:	adrp	x0, 0 <gomp_display_affinity_var>
     edc:	ldrb	w0, [x0]
     ee0:	cbnz	w0, f1c <gomp_team_start+0xc4c>
     ee4:	cbz	x11, efc <gomp_team_start+0xc2c>
     ee8:	ldr	w0, [x27, #48]
     eec:	cmp	w0, #0x40
     ef0:	b.ls	efc <gomp_team_start+0xc2c>  // b.plast
     ef4:	mov	x0, x11
     ef8:	bl	0 <free>
     efc:	mov	sp, x29
     f00:	ldp	x19, x20, [sp, #16]
     f04:	ldp	x21, x22, [sp, #32]
     f08:	ldp	x23, x24, [sp, #48]
     f0c:	ldp	x25, x26, [sp, #64]
     f10:	ldp	x27, x28, [sp, #80]
     f14:	ldp	x29, x30, [sp], #320
     f18:	ret
     f1c:	ldr	w0, [x29, #192]
     f20:	cmp	w0, #0x0
     f24:	ldr	w0, [x29, #224]
     f28:	ccmp	w21, w0, #0x0, eq  // eq = none
     f2c:	b.ne	f38 <gomp_team_start+0xc68>  // b.any
     f30:	ldr	w0, [x29, #220]
     f34:	cbz	w0, ee4 <gomp_team_start+0xc14>
     f38:	mrs	x19, tpidr_el0
     f3c:	str	x11, [x29, #232]
     f40:	add	x19, x19, #0x0, lsl #12
     f44:	add	x19, x19, #0x0
     f48:	bl	0 <pthread_self>
     f4c:	add	x1, x19, #0x10
     f50:	mov	x24, x0
     f54:	ldr	w2, [x19, #92]
     f58:	bl	0 <gomp_display_affinity_thread>
     f5c:	ldr	w0, [x29, #196]
     f60:	ldr	x11, [x29, #232]
     f64:	cbz	w0, fe8 <gomp_team_start+0xd18>
     f68:	sub	w1, w21, #0x1
     f6c:	mov	w0, #0x70                  	// #112
     f70:	mov	x2, #0x10                  	// #16
     f74:	mov	w19, #0x1                   	// #1
     f78:	umsubl	x1, w1, w0, x2
     f7c:	add	x20, x20, x1
     f80:	cmp	w19, w21
     f84:	b.cs	ee4 <gomp_team_start+0xc14>  // b.hs, b.nlast
     f88:	ldr	w2, [x20, #80]
     f8c:	mov	x1, x20
     f90:	ldr	x0, [x20, #88]
     f94:	str	x11, [x29, #232]
     f98:	add	w19, w19, #0x1
     f9c:	add	x20, x20, #0x70
     fa0:	bl	0 <gomp_display_affinity_thread>
     fa4:	ldr	x11, [x29, #232]
     fa8:	b	f80 <gomp_team_start+0xcb0>
     fac:	ldr	x0, [x23]
     fb0:	str	x11, [x29, #232]
     fb4:	add	w22, w22, #0x1
     fb8:	ldr	x1, [x0, x20]
     fbc:	add	x20, x20, #0x8
     fc0:	cmp	x19, x1
     fc4:	add	x0, x1, x25
     fc8:	ldr	w2, [x1, #92]
     fcc:	csel	x0, x0, x24, ne  // ne = any
     fd0:	add	x1, x1, #0x10
     fd4:	bl	0 <gomp_display_affinity_thread>
     fd8:	ldr	x11, [x29, #232]
     fdc:	cmp	w22, w21
     fe0:	b.cc	fac <gomp_team_start+0xcdc>  // b.lo, b.ul, b.last
     fe4:	b	ee4 <gomp_team_start+0xc14>
     fe8:	sub	x25, x24, x19
     fec:	mov	x20, #0x8                   	// #8
     ff0:	mov	w22, #0x1                   	// #1
     ff4:	b	fdc <gomp_team_start+0xd0c>
     ff8:	mov	w28, w26
     ffc:	b	9e4 <gomp_team_start+0x714>

0000000000001000 <gomp_team_end>:
    1000:	stp	x29, x30, [sp, #-80]!
    1004:	mov	x29, sp
    1008:	stp	x21, x22, [sp, #32]
    100c:	mrs	x22, tpidr_el0
    1010:	stp	x19, x20, [sp, #16]
    1014:	add	x19, x22, #0x0, lsl #12
    1018:	add	x19, x19, #0x0
    101c:	stp	x23, x24, [sp, #48]
    1020:	ldr	x20, [x19, #16]
    1024:	str	x25, [sp, #64]
    1028:	add	x24, x20, #0x80
    102c:	mov	x0, x24
    1030:	bl	0 <gomp_team_barrier_wait_final>
    1034:	ldr	w0, [x20, #1336]
    1038:	cbz	w0, 1134 <gomp_team_end+0x134>
    103c:	ldr	x23, [x20, #88]
    1040:	mov	x25, #0x1                   	// #1
    1044:	add	x21, x23, #0x50
    1048:	ldar	x19, [x21]
    104c:	cmp	x19, #0x2
    1050:	b.hi	10a0 <gomp_team_end+0xa0>  // b.pmore
    1054:	ldaxr	x0, [x21]
    1058:	cbnz	x0, 1064 <gomp_team_end+0x64>
    105c:	stxr	w1, x25, [x21]
    1060:	cbnz	w1, 1054 <gomp_team_end+0x54>
    1064:	cmp	x0, #0x0
    1068:	b.ne	1090 <gomp_team_end+0x90>  // b.any
    106c:	ldxr	x0, [x21]
    1070:	stlxr	w1, x23, [x21]
    1074:	cbnz	w1, 106c <gomp_team_end+0x6c>
    1078:	cmp	x0, #0x1
    107c:	b.ne	1128 <gomp_team_end+0x128>  // b.any
    1080:	mov	x19, #0x0                   	// #0
    1084:	b	10a0 <gomp_team_end+0xa0>
    1088:	mov	x23, x19
    108c:	b	1044 <gomp_team_end+0x44>
    1090:	mov	x0, x21
    1094:	bl	0 <gomp_ptrlock_get_slow>
    1098:	mov	x19, x0
    109c:	cbz	x0, 106c <gomp_team_end+0x6c>
    10a0:	mov	x0, x23
    10a4:	bl	0 <gomp_fini_work_share>
    10a8:	cbnz	x19, 1088 <gomp_team_end+0x88>
    10ac:	bl	0 <gomp_end_task>
    10b0:	add	x0, x22, #0x0, lsl #12
    10b4:	add	x0, x0, #0x0
    10b8:	ldp	x4, x5, [x20, #8]
    10bc:	stp	x4, x5, [x0, #16]
    10c0:	ldp	x4, x5, [x20, #24]
    10c4:	stp	x4, x5, [x0, #32]
    10c8:	ldp	x4, x5, [x20, #40]
    10cc:	stp	x4, x5, [x0, #48]
    10d0:	ldp	x2, x3, [x20, #56]
    10d4:	stp	x2, x3, [x0, #64]
    10d8:	ldr	w0, [x0, #44]
    10dc:	cbz	w0, 1110 <gomp_team_end+0x110>
    10e0:	ldr	w2, [x20]
    10e4:	adrp	x0, 0 <gomp_managed_threads>
    10e8:	mov	x1, #0x1                   	// #1
    10ec:	add	x0, x0, #0x0
    10f0:	sub	x1, x1, x2
    10f4:	ldxr	x2, [x0]
    10f8:	add	x2, x2, x1
    10fc:	stlxr	w3, x2, [x0]
    1100:	cbnz	w3, 10f4 <gomp_team_end+0xf4>
    1104:	mov	x0, x24
    1108:	dmb	ish
    110c:	bl	0 <gomp_barrier_wait>
    1110:	ldr	x19, [x20, #312]
    1114:	cbz	x19, 1140 <gomp_team_end+0x140>
    1118:	mov	x0, x19
    111c:	ldr	x19, [x19, #56]
    1120:	bl	0 <free>
    1124:	b	1114 <gomp_team_end+0x114>
    1128:	mov	x0, x21
    112c:	bl	0 <gomp_ptrlock_set_slow>
    1130:	b	1080 <gomp_team_end+0x80>
    1134:	ldr	x0, [x19, #24]
    1138:	bl	0 <gomp_fini_work_share>
    113c:	b	10ac <gomp_team_end+0xac>
    1140:	add	x22, x22, #0x0, lsl #12
    1144:	add	x22, x22, #0x0
    1148:	ldr	x0, [x22, #16]
    114c:	cbnz	x0, 115c <gomp_team_end+0x15c>
    1150:	ldr	w0, [x20]
    1154:	cmp	w0, #0x1
    1158:	b.ne	1178 <gomp_team_end+0x178>  // b.any
    115c:	mov	x0, x20
    1160:	ldp	x19, x20, [sp, #16]
    1164:	ldp	x21, x22, [sp, #32]
    1168:	ldp	x23, x24, [sp, #48]
    116c:	ldr	x25, [sp, #64]
    1170:	ldp	x29, x30, [sp], #80
    1174:	b	0 <free>
    1178:	ldr	x19, [x22, #96]
    117c:	ldr	x0, [x19, #16]
    1180:	cbz	x0, 1188 <gomp_team_end+0x188>
    1184:	bl	0 <free>
    1188:	ldp	x21, x22, [sp, #32]
    118c:	ldp	x23, x24, [sp, #48]
    1190:	ldr	x25, [sp, #64]
    1194:	str	x20, [x19, #16]
    1198:	ldp	x19, x20, [sp, #16]
    119c:	ldp	x29, x30, [sp], #80
    11a0:	ret

00000000000011a4 <gomp_free_thread>:
    11a4:	stp	x29, x30, [sp, #-48]!
    11a8:	mov	x29, sp
    11ac:	stp	x19, x20, [sp, #16]
    11b0:	mrs	x20, tpidr_el0
    11b4:	add	x0, x20, #0x0, lsl #12
    11b8:	add	x0, x0, #0x0
    11bc:	ldr	x19, [x0, #96]
    11c0:	str	x21, [sp, #32]
    11c4:	cbz	x19, 11f8 <gomp_free_thread+0x54>
    11c8:	ldr	w2, [x19, #12]
    11cc:	cbnz	w2, 1294 <gomp_free_thread+0xf0>
    11d0:	ldr	x0, [x19, #16]
    11d4:	cbz	x0, 11dc <gomp_free_thread+0x38>
    11d8:	bl	0 <free>
    11dc:	ldr	x0, [x19]
    11e0:	bl	0 <free>
    11e4:	mov	x0, x19
    11e8:	bl	0 <free>
    11ec:	add	x0, x20, #0x0, lsl #12
    11f0:	add	x0, x0, #0x0
    11f4:	str	xzr, [x0, #96]
    11f8:	add	x0, x20, #0x0, lsl #12
    11fc:	add	x0, x0, #0x0
    1200:	ldr	w1, [x0, #44]
    1204:	cbnz	w1, 1214 <gomp_free_thread+0x70>
    1208:	ldr	x0, [x0, #16]
    120c:	cbz	x0, 1214 <gomp_free_thread+0x70>
    1210:	bl	1000 <gomp_team_end>
    1214:	add	x20, x20, #0x0, lsl #12
    1218:	add	x20, x20, #0x0
    121c:	ldr	x19, [x20, #80]
    1220:	cbz	x19, 12a4 <gomp_free_thread+0x100>
    1224:	bl	0 <gomp_end_task>
    1228:	mov	x0, x19
    122c:	ldp	x19, x20, [sp, #16]
    1230:	ldr	x21, [sp, #32]
    1234:	ldp	x29, x30, [sp], #48
    1238:	b	0 <free>
    123c:	ldr	x3, [x19]
    1240:	ldr	x3, [x3, x0, lsl #3]
    1244:	stp	x1, x19, [x3]
    1248:	add	x0, x0, #0x1
    124c:	cmp	w2, w0
    1250:	b.hi	123c <gomp_free_thread+0x98>  // b.pmore
    1254:	add	x21, x19, #0x40
    1258:	mov	x0, x21
    125c:	bl	0 <gomp_barrier_wait>
    1260:	mov	x0, x21
    1264:	bl	0 <gomp_barrier_wait>
    1268:	ldr	w2, [x19, #12]
    126c:	adrp	x0, 0 <gomp_managed_threads>
    1270:	mov	x1, #0x1                   	// #1
    1274:	add	x0, x0, #0x0
    1278:	sub	x1, x1, x2
    127c:	ldxr	x2, [x0]
    1280:	add	x2, x2, x1
    1284:	stlxr	w3, x2, [x0]
    1288:	cbnz	w3, 127c <gomp_free_thread+0xd8>
    128c:	dmb	ish
    1290:	b	11d0 <gomp_free_thread+0x2c>
    1294:	adrp	x1, 0 <gomp_free_pool_helper>
    1298:	mov	x0, #0x0                   	// #0
    129c:	add	x1, x1, #0x0
    12a0:	b	1248 <gomp_free_thread+0xa4>
    12a4:	ldp	x19, x20, [sp, #16]
    12a8:	ldr	x21, [sp, #32]
    12ac:	ldp	x29, x30, [sp], #48
    12b0:	ret

00000000000012b4 <gomp_pause_host>:
    12b4:	stp	x29, x30, [sp, #-80]!
    12b8:	mov	x29, sp
    12bc:	stp	x23, x24, [sp, #48]
    12c0:	mrs	x23, tpidr_el0
    12c4:	add	x0, x23, #0x0, lsl #12
    12c8:	add	x0, x0, #0x0
    12cc:	stp	x19, x20, [sp, #16]
    12d0:	ldr	w1, [x0, #44]
    12d4:	stp	x21, x22, [sp, #32]
    12d8:	stp	x25, x26, [sp, #64]
    12dc:	ldr	x19, [x0, #96]
    12e0:	cbnz	w1, 13dc <gomp_pause_host+0x128>
    12e4:	cbz	x19, 1314 <gomp_pause_host+0x60>
    12e8:	ldr	w25, [x19, #12]
    12ec:	cbnz	w25, 131c <gomp_pause_host+0x68>
    12f0:	ldr	x0, [x19, #16]
    12f4:	cbnz	x0, 13d4 <gomp_pause_host+0x120>
    12f8:	ldr	x0, [x19]
    12fc:	add	x23, x23, #0x0, lsl #12
    1300:	add	x23, x23, #0x0
    1304:	bl	0 <free>
    1308:	mov	x0, x19
    130c:	bl	0 <free>
    1310:	str	xzr, [x23, #96]
    1314:	mov	w0, #0x0                   	// #0
    1318:	b	13e0 <gomp_pause_host+0x12c>
    131c:	ubfiz	x1, x25, #3, #32
    1320:	adrp	x26, 0 <gomp_free_pool_helper>
    1324:	add	x1, x1, #0xf
    1328:	add	x26, x26, #0x0
    132c:	and	x1, x1, #0xffffffff0
    1330:	mov	x20, x0
    1334:	sub	sp, sp, x1
    1338:	mov	x22, #0x1                   	// #1
    133c:	mov	x24, sp
    1340:	cmp	w25, w22
    1344:	b.hi	13a8 <gomp_pause_host+0xf4>  // b.pmore
    1348:	add	x20, x19, #0x40
    134c:	mov	x0, x20
    1350:	bl	0 <gomp_barrier_wait>
    1354:	mov	x0, x20
    1358:	bl	0 <gomp_barrier_wait>
    135c:	ldr	w2, [x19, #12]
    1360:	adrp	x0, 0 <gomp_managed_threads>
    1364:	mov	x1, #0x1                   	// #1
    1368:	add	x0, x0, #0x0
    136c:	sub	x1, x1, x2
    1370:	ldxr	x2, [x0]
    1374:	add	x2, x2, x1
    1378:	stlxr	w3, x2, [x0]
    137c:	cbnz	w3, 1370 <gomp_pause_host+0xbc>
    1380:	mov	x20, #0x0                   	// #0
    1384:	dmb	ish
    1388:	ldr	w0, [x19, #12]
    138c:	add	x20, x20, #0x1
    1390:	cmp	w0, w20
    1394:	b.ls	12f0 <gomp_pause_host+0x3c>  // b.plast
    1398:	ldr	x0, [x24, x20, lsl #3]
    139c:	mov	x1, #0x0                   	// #0
    13a0:	bl	0 <pthread_join>
    13a4:	b	1388 <gomp_pause_host+0xd4>
    13a8:	ldr	x0, [x19]
    13ac:	ldr	x21, [x0, x22, lsl #3]
    13b0:	stp	x26, x19, [x21]
    13b4:	bl	0 <pthread_self>
    13b8:	cmp	x20, x21
    13bc:	b.eq	13c8 <gomp_pause_host+0x114>  // b.none
    13c0:	sub	x21, x21, x20
    13c4:	add	x0, x0, x21
    13c8:	str	x0, [x24, x22, lsl #3]
    13cc:	add	x22, x22, #0x1
    13d0:	b	1340 <gomp_pause_host+0x8c>
    13d4:	bl	0 <free>
    13d8:	b	12f8 <gomp_pause_host+0x44>
    13dc:	mov	w0, #0xffffffff            	// #-1
    13e0:	mov	sp, x29
    13e4:	ldp	x19, x20, [sp, #16]
    13e8:	ldp	x21, x22, [sp, #32]
    13ec:	ldp	x23, x24, [sp, #48]
    13f0:	ldp	x25, x26, [sp, #64]
    13f4:	ldp	x29, x30, [sp], #80
    13f8:	ret

00000000000013fc <gomp_new_icv>:
    13fc:	stp	x29, x30, [sp, #-32]!
    1400:	mov	x0, #0xd0                  	// #208
    1404:	mov	x29, sp
    1408:	str	x19, [sp, #16]
    140c:	bl	0 <gomp_malloc>
    1410:	mov	x1, #0x0                   	// #0
    1414:	mov	x19, x0
    1418:	adrp	x2, 0 <gomp_global_icv>
    141c:	add	x2, x2, #0x0
    1420:	bl	0 <gomp_init_task>
    1424:	adrp	x0, 4 <gomp_free_pool_helper+0x4>
    1428:	mrs	x1, tpidr_el0
    142c:	add	x1, x1, #0x0, lsl #12
    1430:	add	x1, x1, #0x0
    1434:	ldr	w0, [x0]
    1438:	str	x19, [x1, #80]
    143c:	bl	0 <pthread_setspecific>
    1440:	add	x0, x19, #0x90
    1444:	ldr	x19, [sp, #16]
    1448:	ldp	x29, x30, [sp], #32
    144c:	ret

Disassembly of section .text.startup:

0000000000000000 <initialize_team>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 11a4 <gomp_free_thread>
   8:	adrp	x0, 4 <initialize_team+0x4>
   c:	mov	x29, sp
  10:	add	x1, x1, #0x0
  14:	add	x0, x0, #0x0
  18:	bl	0 <pthread_key_create>
  1c:	cbz	w0, 2c <initialize_team+0x2c>
  20:	adrp	x0, 0 <initialize_team>
  24:	add	x0, x0, #0x0
  28:	bl	0 <gomp_fatal>
  2c:	ldp	x29, x30, [sp], #16
  30:	ret

Disassembly of section .text.exit:

0000000000000000 <team_destructor>:
   0:	adrp	x0, 4 <team_destructor+0x4>
   4:	ldr	w0, [x0]
   8:	b	0 <pthread_key_delete>

work.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_barrier_wait_start>:
   0:	mov	x1, x0
   4:	add	x0, x0, #0x4
   8:	ldar	w0, [x0]
   c:	and	w0, w0, #0xfffffffc
  10:	add	x1, x1, #0x40
  14:	ldaxr	w2, [x1]
  18:	sub	w2, w2, #0x1
  1c:	stlxr	w3, w2, [x1]
  20:	cbnz	w3, 14 <gomp_barrier_wait_start+0x14>
  24:	cbnz	w2, 2c <gomp_barrier_wait_start+0x2c>
  28:	orr	w0, w0, #0x1
  2c:	ret

0000000000000030 <gomp_init_work_share>:
  30:	stp	x29, x30, [sp, #-32]!
  34:	mov	x29, sp
  38:	stp	x19, x20, [sp, #16]
  3c:	mov	x19, x0
  40:	str	wzr, [x0, #64]
  44:	cbz	x1, b0 <gomp_init_work_share+0x80>
  48:	ubfiz	x20, x2, #2, #32
  4c:	cmp	x1, #0x1
  50:	b.eq	64 <gomp_init_work_share+0x34>  // b.none
  54:	add	x20, x20, #0x7
  58:	sub	x1, x1, #0x1
  5c:	and	x20, x20, #0xfffffffffffffff8
  60:	add	x20, x20, x1
  64:	cmp	x20, #0x20
  68:	b.ls	a8 <gomp_init_work_share+0x78>  // b.plast
  6c:	mov	x0, x20
  70:	bl	0 <gomp_malloc>
  74:	str	x0, [x19, #32]
  78:	mov	x2, x20
  7c:	mov	w1, #0x0                   	// #0
  80:	ldr	x0, [x19, #32]
  84:	bl	0 <memset>
  88:	str	wzr, [x19, #48]
  8c:	mov	x0, #0xffffffff00000000    	// #-4294967296
  90:	str	x0, [x19, #40]
  94:	str	wzr, [x19, #68]
  98:	str	xzr, [x19, #80]
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x29, x30, [sp], #32
  a4:	ret
  a8:	add	x0, x19, #0x60
  ac:	b	74 <gomp_init_work_share+0x44>
  b0:	add	x0, x0, #0x60
  b4:	str	x0, [x19, #32]
  b8:	b	94 <gomp_init_work_share+0x64>

00000000000000bc <gomp_fini_work_share>:
  bc:	mov	x1, x0
  c0:	ldr	x0, [x0, #32]
  c4:	add	x1, x1, #0x60
  c8:	cmp	x0, x1
  cc:	b.eq	d4 <gomp_fini_work_share+0x18>  // b.none
  d0:	b	0 <free>
  d4:	ret

00000000000000d8 <free_work_share>:
  d8:	stp	x29, x30, [sp, #-32]!
  dc:	mov	x29, sp
  e0:	stp	x19, x20, [sp, #16]
  e4:	mov	x20, x0
  e8:	mov	x19, x1
  ec:	mov	x0, x1
  f0:	bl	bc <gomp_fini_work_share>
  f4:	cbz	x20, 12c <free_work_share+0x54>
  f8:	add	x0, x20, #0x68
  fc:	ldr	x1, [x20, #104]
 100:	str	x1, [x19, #80]
 104:	ldxr	x2, [x0]
 108:	cmp	x2, x1
 10c:	b.ne	118 <free_work_share+0x40>  // b.any
 110:	stlxr	w3, x19, [x0]
 114:	cbnz	w3, 104 <free_work_share+0x2c>
 118:	dmb	ish
 11c:	b.ne	fc <free_work_share+0x24>  // b.any
 120:	ldp	x19, x20, [sp, #16]
 124:	ldp	x29, x30, [sp], #32
 128:	ret
 12c:	mov	x0, x19
 130:	ldp	x19, x20, [sp, #16]
 134:	ldp	x29, x30, [sp], #32
 138:	b	0 <free>

000000000000013c <gomp_work_share_start>:
 13c:	stp	x29, x30, [sp, #-64]!
 140:	mov	x29, sp
 144:	stp	x21, x22, [sp, #32]
 148:	mrs	x21, tpidr_el0
 14c:	adrp	x22, 0 <gomp_tls_data>
 150:	ldr	x22, [x22]
 154:	stp	x19, x20, [sp, #16]
 158:	add	x19, x21, x22
 15c:	ldr	x20, [x19, #16]
 160:	str	x23, [sp, #48]
 164:	mov	x23, x0
 168:	cbnz	x20, 1a0 <gomp_work_share_start+0x64>
 16c:	mov	x0, #0x80                  	// #128
 170:	bl	0 <gomp_malloc>
 174:	mov	x1, x23
 178:	mov	x20, x0
 17c:	mov	w2, #0x1                   	// #1
 180:	bl	30 <gomp_init_work_share>
 184:	str	x20, [x19, #24]
 188:	mov	w0, #0x1                   	// #1
 18c:	ldp	x19, x20, [sp, #16]
 190:	ldp	x21, x22, [sp, #32]
 194:	ldr	x23, [sp, #48]
 198:	ldp	x29, x30, [sp], #64
 19c:	ret
 1a0:	ldr	x0, [x19, #24]
 1a4:	str	x0, [x19, #32]
 1a8:	add	x0, x0, #0x50
 1ac:	ldar	x1, [x0]
 1b0:	cmp	x1, #0x2
 1b4:	b.ls	1cc <gomp_work_share_start+0x90>  // b.plast
 1b8:	mov	x0, x1
 1bc:	add	x21, x21, x22
 1c0:	str	x0, [x21, #24]
 1c4:	mov	w0, #0x0                   	// #0
 1c8:	b	18c <gomp_work_share_start+0x50>
 1cc:	mov	x1, #0x1                   	// #1
 1d0:	ldaxr	x2, [x0]
 1d4:	cbnz	x2, 1e0 <gomp_work_share_start+0xa4>
 1d8:	stxr	w3, x1, [x0]
 1dc:	cbnz	w3, 1d0 <gomp_work_share_start+0x94>
 1e0:	cmp	x2, #0x0
 1e4:	b.ne	228 <gomp_work_share_start+0xec>  // b.any
 1e8:	ldr	x19, [x20, #96]
 1ec:	cbnz	x19, 204 <gomp_work_share_start+0xc8>
 1f0:	ldr	x0, [x20, #104]
 1f4:	cbz	x0, 234 <gomp_work_share_start+0xf8>
 1f8:	ldr	x19, [x0, #80]
 1fc:	cbz	x19, 234 <gomp_work_share_start+0xf8>
 200:	str	xzr, [x0, #80]
 204:	ldr	x0, [x19, #80]
 208:	str	x0, [x20, #96]
 20c:	ldr	w2, [x20]
 210:	add	x21, x21, x22
 214:	mov	x1, x23
 218:	mov	x0, x19
 21c:	bl	30 <gomp_init_work_share>
 220:	str	x19, [x21, #24]
 224:	b	188 <gomp_work_share_start+0x4c>
 228:	bl	0 <gomp_ptrlock_get_slow>
 22c:	cbz	x0, 1e8 <gomp_work_share_start+0xac>
 230:	b	1bc <gomp_work_share_start+0x80>
 234:	ldr	w1, [x20, #4]
 238:	mov	x0, #0x40                  	// #64
 23c:	lsl	w1, w1, #1
 240:	str	w1, [x20, #4]
 244:	lsl	x1, x1, #7
 248:	bl	0 <gomp_aligned_alloc>
 24c:	mov	x19, x0
 250:	ldr	w2, [x20, #4]
 254:	add	x3, x0, #0xd0
 258:	ldr	x0, [x20, #312]
 25c:	sub	w4, w2, #0x1
 260:	str	x0, [x19, #56]
 264:	add	x0, x19, #0x80
 268:	str	x0, [x20, #96]
 26c:	mov	w0, #0x1                   	// #1
 270:	str	x19, [x20, #312]
 274:	cmp	w0, w4
 278:	b.cc	2a0 <gomp_work_share_start+0x164>  // b.lo, b.ul, b.last
 27c:	sub	w1, w2, #0x2
 280:	cmp	w2, #0x1
 284:	add	x1, x1, #0x1
 288:	mov	x0, #0x80                  	// #128
 28c:	lsl	x1, x1, #7
 290:	csel	x1, x1, x0, ne  // ne = any
 294:	add	x1, x19, x1
 298:	str	xzr, [x1, #80]
 29c:	b	20c <gomp_work_share_start+0xd0>
 2a0:	add	w0, w0, #0x1
 2a4:	ubfiz	x1, x0, #7, #32
 2a8:	add	x1, x19, x1
 2ac:	str	x1, [x3], #128
 2b0:	b	274 <gomp_work_share_start+0x138>

00000000000002b4 <gomp_work_share_end>:
 2b4:	stp	x29, x30, [sp, #-64]!
 2b8:	mov	x29, sp
 2bc:	stp	x21, x22, [sp, #32]
 2c0:	adrp	x22, 0 <gomp_tls_data>
 2c4:	ldr	x22, [x22]
 2c8:	stp	x19, x20, [sp, #16]
 2cc:	mrs	x20, tpidr_el0
 2d0:	add	x19, x20, x22
 2d4:	ldr	x4, [x19, #16]
 2d8:	str	x23, [sp, #48]
 2dc:	cbnz	x4, 304 <gomp_work_share_end+0x50>
 2e0:	ldr	x1, [x19, #24]
 2e4:	mov	x0, #0x0                   	// #0
 2e8:	bl	d8 <free_work_share>
 2ec:	str	xzr, [x19, #24]
 2f0:	ldp	x19, x20, [sp, #16]
 2f4:	ldp	x21, x22, [sp, #32]
 2f8:	ldr	x23, [sp, #48]
 2fc:	ldp	x29, x30, [sp], #64
 300:	ret
 304:	add	x23, x4, #0x80
 308:	mov	x0, x23
 30c:	bl	0 <gomp_barrier_wait_start>
 310:	mov	w21, w0
 314:	tbz	w21, #0, 330 <gomp_work_share_end+0x7c>
 318:	ldr	x1, [x19, #32]
 31c:	cbz	x1, 330 <gomp_work_share_end+0x7c>
 320:	ldr	x0, [x19, #24]
 324:	str	x0, [x4, #88]
 328:	mov	x0, x4
 32c:	bl	d8 <free_work_share>
 330:	add	x20, x20, x22
 334:	mov	w1, w21
 338:	mov	x0, x23
 33c:	bl	0 <gomp_team_barrier_wait_end>
 340:	str	xzr, [x20, #32]
 344:	b	2f0 <gomp_work_share_end+0x3c>

0000000000000348 <gomp_work_share_end_cancel>:
 348:	stp	x29, x30, [sp, #-48]!
 34c:	mov	x29, sp
 350:	stp	x21, x22, [sp, #32]
 354:	adrp	x22, 0 <gomp_tls_data>
 358:	ldr	x22, [x22]
 35c:	stp	x19, x20, [sp, #16]
 360:	mrs	x20, tpidr_el0
 364:	add	x5, x20, x22
 368:	ldr	x4, [x5, #16]
 36c:	add	x21, x4, #0x80
 370:	mov	x0, x21
 374:	bl	0 <gomp_barrier_wait_start>
 378:	mov	w19, w0
 37c:	tbz	w19, #0, 398 <gomp_work_share_end_cancel+0x50>
 380:	ldr	x1, [x5, #32]
 384:	cbz	x1, 398 <gomp_work_share_end_cancel+0x50>
 388:	ldr	x0, [x5, #24]
 38c:	str	x0, [x4, #88]
 390:	mov	x0, x4
 394:	bl	d8 <free_work_share>
 398:	add	x20, x20, x22
 39c:	mov	x0, x21
 3a0:	ldp	x21, x22, [sp, #32]
 3a4:	mov	w1, w19
 3a8:	str	xzr, [x20, #32]
 3ac:	ldp	x19, x20, [sp, #16]
 3b0:	ldp	x29, x30, [sp], #48
 3b4:	b	0 <gomp_team_barrier_wait_cancel_end>

00000000000003b8 <gomp_work_share_end_nowait>:
 3b8:	stp	x29, x30, [sp, #-48]!
 3bc:	mov	x29, sp
 3c0:	str	x21, [sp, #32]
 3c4:	adrp	x21, 0 <gomp_tls_data>
 3c8:	ldr	x21, [x21]
 3cc:	stp	x19, x20, [sp, #16]
 3d0:	mrs	x20, tpidr_el0
 3d4:	add	x19, x20, x21
 3d8:	ldp	x0, x1, [x19, #16]
 3dc:	cbnz	x0, 3f8 <gomp_work_share_end_nowait+0x40>
 3e0:	bl	d8 <free_work_share>
 3e4:	str	xzr, [x19, #24]
 3e8:	ldp	x19, x20, [sp, #16]
 3ec:	ldr	x21, [sp, #32]
 3f0:	ldp	x29, x30, [sp], #48
 3f4:	ret
 3f8:	ldr	x2, [x19, #32]
 3fc:	cbz	x2, 3e8 <gomp_work_share_end_nowait+0x30>
 400:	add	x1, x1, #0x44
 404:	ldxr	w2, [x1]
 408:	add	w2, w2, #0x1
 40c:	stlxr	w3, w2, [x1]
 410:	cbnz	w3, 404 <gomp_work_share_end_nowait+0x4c>
 414:	dmb	ish
 418:	ldr	w1, [x0]
 41c:	cmp	w1, w2
 420:	b.ne	434 <gomp_work_share_end_nowait+0x7c>  // b.any
 424:	ldr	x1, [x19, #24]
 428:	str	x1, [x0, #88]
 42c:	ldr	x1, [x19, #32]
 430:	bl	d8 <free_work_share>
 434:	add	x20, x20, x21
 438:	str	xzr, [x20, #32]
 43c:	b	3e8 <gomp_work_share_end_nowait+0x30>

lock.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_unlock>:
   0:	mov	x1, x0
   4:	ldxr	w2, [x1]
   8:	stlxr	w3, wzr, [x1]
   c:	cbnz	w3, 4 <gomp_mutex_unlock+0x4>
  10:	tbz	w2, #31, 18 <gomp_mutex_unlock+0x18>
  14:	b	0 <gomp_mutex_unlock_slow>
  18:	ret

000000000000001c <gomp_ialias_omp_init_lock>:
  1c:	str	wzr, [x0]
  20:	ret

0000000000000024 <gomp_ialias_omp_destroy_lock>:
  24:	ret

0000000000000028 <gomp_ialias_omp_set_lock>:
  28:	mov	x2, x0
  2c:	mov	w3, #0x1                   	// #1
  30:	ldaxr	w1, [x2]
  34:	cbnz	w1, 40 <gomp_ialias_omp_set_lock+0x18>
  38:	stxr	w4, w3, [x2]
  3c:	cbnz	w4, 30 <gomp_ialias_omp_set_lock+0x8>
  40:	cmp	w1, #0x0
  44:	b.eq	4c <gomp_ialias_omp_set_lock+0x24>  // b.none
  48:	b	0 <gomp_mutex_lock_slow>
  4c:	ret

0000000000000050 <gomp_ialias_omp_unset_lock>:
  50:	b	0 <gomp_mutex_unlock>

0000000000000054 <gomp_ialias_omp_test_lock>:
  54:	mov	w1, #0x1                   	// #1
  58:	ldaxr	w2, [x0]
  5c:	cbnz	w2, 68 <gomp_ialias_omp_test_lock+0x14>
  60:	stxr	w3, w1, [x0]
  64:	cbnz	w3, 58 <gomp_ialias_omp_test_lock+0x4>
  68:	cmp	w2, #0x0
  6c:	cset	w0, eq  // eq = none
  70:	ret

0000000000000074 <gomp_ialias_omp_init_nest_lock>:
  74:	stp	xzr, xzr, [x0]
  78:	ret

000000000000007c <gomp_ialias_omp_destroy_nest_lock>:
  7c:	ret

0000000000000080 <gomp_ialias_omp_set_nest_lock>:
  80:	stp	x29, x30, [sp, #-32]!
  84:	mrs	x1, tpidr_el0
  88:	mov	x29, sp
  8c:	stp	x19, x20, [sp, #16]
  90:	mov	x19, x0
  94:	adrp	x0, 0 <gomp_tls_data>
  98:	ldr	x0, [x0]
  9c:	add	x0, x1, x0
  a0:	ldr	x20, [x0, #80]
  a4:	cbz	x20, f8 <gomp_ialias_omp_set_nest_lock+0x78>
  a8:	add	x20, x20, #0x90
  ac:	ldr	x0, [x19, #8]
  b0:	cmp	x0, x20
  b4:	b.eq	e0 <gomp_ialias_omp_set_nest_lock+0x60>  // b.none
  b8:	mov	w0, #0x1                   	// #1
  bc:	ldaxr	w1, [x19]
  c0:	cbnz	w1, cc <gomp_ialias_omp_set_nest_lock+0x4c>
  c4:	stxr	w2, w0, [x19]
  c8:	cbnz	w2, bc <gomp_ialias_omp_set_nest_lock+0x3c>
  cc:	cmp	w1, #0x0
  d0:	b.eq	dc <gomp_ialias_omp_set_nest_lock+0x5c>  // b.none
  d4:	mov	x0, x19
  d8:	bl	0 <gomp_mutex_lock_slow>
  dc:	str	x20, [x19, #8]
  e0:	ldr	w0, [x19, #4]
  e4:	add	w0, w0, #0x1
  e8:	str	w0, [x19, #4]
  ec:	ldp	x19, x20, [sp, #16]
  f0:	ldp	x29, x30, [sp], #32
  f4:	ret
  f8:	bl	0 <gomp_new_icv>
  fc:	mov	x20, x0
 100:	b	ac <gomp_ialias_omp_set_nest_lock+0x2c>

0000000000000104 <gomp_ialias_omp_unset_nest_lock>:
 104:	ldr	w2, [x0, #4]
 108:	sub	w2, w2, #0x1
 10c:	str	w2, [x0, #4]
 110:	cbnz	w2, 11c <gomp_ialias_omp_unset_nest_lock+0x18>
 114:	str	xzr, [x0, #8]
 118:	b	0 <gomp_mutex_unlock>
 11c:	ret

0000000000000120 <gomp_ialias_omp_test_nest_lock>:
 120:	stp	x29, x30, [sp, #-32]!
 124:	mrs	x1, tpidr_el0
 128:	mov	x29, sp
 12c:	str	x19, [sp, #16]
 130:	mov	x19, x0
 134:	adrp	x0, 0 <gomp_tls_data>
 138:	ldr	x0, [x0]
 13c:	add	x0, x1, x0
 140:	ldr	x1, [x0, #80]
 144:	cbz	x1, 170 <gomp_ialias_omp_test_nest_lock+0x50>
 148:	add	x1, x1, #0x90
 14c:	ldr	x0, [x19, #8]
 150:	cmp	x0, x1
 154:	b.ne	17c <gomp_ialias_omp_test_nest_lock+0x5c>  // b.any
 158:	ldr	w1, [x19, #4]
 15c:	add	w0, w1, #0x1
 160:	str	w0, [x19, #4]
 164:	ldr	x19, [sp, #16]
 168:	ldp	x29, x30, [sp], #32
 16c:	ret
 170:	bl	0 <gomp_new_icv>
 174:	mov	x1, x0
 178:	b	14c <gomp_ialias_omp_test_nest_lock+0x2c>
 17c:	mov	w0, #0x1                   	// #1
 180:	ldaxr	w2, [x19]
 184:	cbnz	w2, 190 <gomp_ialias_omp_test_nest_lock+0x70>
 188:	stxr	w3, w0, [x19]
 18c:	cbnz	w3, 180 <gomp_ialias_omp_test_nest_lock+0x60>
 190:	cmp	w2, #0x0
 194:	b.ne	1a0 <gomp_ialias_omp_test_nest_lock+0x80>  // b.any
 198:	str	x1, [x19, #8]
 19c:	b	160 <gomp_ialias_omp_test_nest_lock+0x40>
 1a0:	mov	w0, #0x0                   	// #0
 1a4:	b	164 <gomp_ialias_omp_test_nest_lock+0x44>

mutex.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <do_spin>:
   0:	adrp	x2, 0 <gomp_spin_count_var>
   4:	ldr	x3, [x2]
   8:	adrp	x2, 0 <gomp_managed_threads>
   c:	add	x2, x2, #0x0
  10:	ldr	x4, [x2]
  14:	adrp	x2, 0 <gomp_available_cpus>
  18:	ldr	x2, [x2]
  1c:	cmp	x4, x2
  20:	b.ls	2c <do_spin+0x2c>  // b.plast
  24:	adrp	x2, 0 <gomp_throttled_spin_count_var>
  28:	ldr	x3, [x2]
  2c:	mov	x2, #0x0                   	// #0
  30:	cmp	x2, x3
  34:	b.ne	40 <do_spin+0x40>  // b.any
  38:	mov	w0, #0x1                   	// #1
  3c:	ret
  40:	ldr	w4, [x0]
  44:	cmp	w4, w1
  48:	b.ne	54 <do_spin+0x54>  // b.any
  4c:	add	x2, x2, #0x1
  50:	b	30 <do_spin+0x30>
  54:	mov	w0, #0x0                   	// #0
  58:	b	3c <do_spin+0x3c>

000000000000005c <futex_wait.constprop.0>:
  5c:	stp	x29, x30, [sp, #-48]!
  60:	mov	x1, x0
  64:	mov	x4, #0x0                   	// #0
  68:	mov	x29, sp
  6c:	stp	x19, x20, [sp, #16]
  70:	adrp	x20, 0 <do_spin>
  74:	mov	x19, x0
  78:	ldr	w2, [x20]
  7c:	mov	w3, #0xffffffff            	// #-1
  80:	mov	x0, #0x62                  	// #98
  84:	str	x21, [sp, #32]
  88:	bl	0 <syscall>
  8c:	tbz	w0, #31, dc <futex_wait.constprop.0+0x80>
  90:	bl	0 <__errno_location>
  94:	ldr	w0, [x0]
  98:	cmp	w0, #0x26
  9c:	b.ne	dc <futex_wait.constprop.0+0x80>  // b.any
  a0:	add	x21, x20, #0x0
  a4:	ldr	w2, [x20]
  a8:	mov	x1, x19
  ac:	mov	x4, #0x0                   	// #0
  b0:	and	w2, w2, #0xffffff7f
  b4:	str	w2, [x20]
  b8:	ldr	w0, [x21, #4]
  bc:	mov	w3, #0xffffffff            	// #-1
  c0:	ldp	x19, x20, [sp, #16]
  c4:	and	w0, w0, #0xffffff7f
  c8:	str	w0, [x21, #4]
  cc:	mov	x0, #0x62                  	// #98
  d0:	ldr	x21, [sp, #32]
  d4:	ldp	x29, x30, [sp], #48
  d8:	b	0 <syscall>
  dc:	ldp	x19, x20, [sp, #16]
  e0:	ldr	x21, [sp, #32]
  e4:	ldp	x29, x30, [sp], #48
  e8:	ret

00000000000000ec <gomp_mutex_lock_slow>:
  ec:	stp	x29, x30, [sp, #-32]!
  f0:	mov	x29, sp
  f4:	stp	x19, x20, [sp, #16]
  f8:	mov	x19, x0
  fc:	cmp	w1, #0x1
 100:	b.ne	12c <gomp_mutex_lock_slow+0x40>  // b.any
 104:	mov	x0, x19
 108:	bl	0 <do_spin>
 10c:	cbz	w0, 15c <gomp_mutex_lock_slow+0x70>
 110:	mov	w1, #0xffffffff            	// #-1
 114:	ldaxr	w0, [x19]
 118:	stxr	w2, w1, [x19]
 11c:	cbnz	w2, 114 <gomp_mutex_lock_slow+0x28>
 120:	cbz	w0, 178 <gomp_mutex_lock_slow+0x8c>
 124:	mov	x0, x19
 128:	bl	5c <futex_wait.constprop.0>
 12c:	mov	w20, #0xffffffff            	// #-1
 130:	ldaxr	w0, [x19]
 134:	stxr	w1, w20, [x19]
 138:	cbnz	w1, 130 <gomp_mutex_lock_slow+0x44>
 13c:	cbz	w0, 178 <gomp_mutex_lock_slow+0x8c>
 140:	mov	x0, x19
 144:	mov	w1, #0xffffffff            	// #-1
 148:	bl	0 <do_spin>
 14c:	cbz	w0, 130 <gomp_mutex_lock_slow+0x44>
 150:	mov	x0, x19
 154:	bl	5c <futex_wait.constprop.0>
 158:	b	130 <gomp_mutex_lock_slow+0x44>
 15c:	ldaxr	w0, [x19]
 160:	cbnz	w0, 16c <gomp_mutex_lock_slow+0x80>
 164:	stxr	w2, w1, [x19]
 168:	cbnz	w2, 15c <gomp_mutex_lock_slow+0x70>
 16c:	cmp	w0, #0x0
 170:	mov	w1, w0
 174:	b.ne	fc <gomp_mutex_lock_slow+0x10>  // b.any
 178:	ldp	x19, x20, [sp, #16]
 17c:	ldp	x29, x30, [sp], #32
 180:	ret

0000000000000184 <gomp_mutex_unlock_slow>:
 184:	stp	x29, x30, [sp, #-48]!
 188:	mov	x1, x0
 18c:	mov	w3, #0x1                   	// #1
 190:	mov	x29, sp
 194:	stp	x19, x20, [sp, #16]
 198:	mov	x19, x0
 19c:	mov	x0, #0x62                  	// #98
 1a0:	str	x21, [sp, #32]
 1a4:	adrp	x21, 0 <do_spin>
 1a8:	add	x20, x21, #0x0
 1ac:	ldr	w2, [x20, #4]
 1b0:	bl	0 <syscall>
 1b4:	tbz	w0, #31, 1fc <gomp_mutex_unlock_slow+0x78>
 1b8:	bl	0 <__errno_location>
 1bc:	ldr	w0, [x0]
 1c0:	cmp	w0, #0x26
 1c4:	b.ne	1fc <gomp_mutex_unlock_slow+0x78>  // b.any
 1c8:	ldr	w0, [x21]
 1cc:	mov	x1, x19
 1d0:	ldr	w2, [x20, #4]
 1d4:	mov	w3, #0x1                   	// #1
 1d8:	and	w0, w0, #0xffffff7f
 1dc:	str	w0, [x21]
 1e0:	and	w2, w2, #0xffffff7f
 1e4:	str	w2, [x20, #4]
 1e8:	ldp	x19, x20, [sp, #16]
 1ec:	mov	x0, #0x62                  	// #98
 1f0:	ldr	x21, [sp, #32]
 1f4:	ldp	x29, x30, [sp], #48
 1f8:	b	0 <syscall>
 1fc:	ldp	x19, x20, [sp, #16]
 200:	ldr	x21, [sp, #32]
 204:	ldp	x29, x30, [sp], #48
 208:	ret

proc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_num_procs>:
   0:	adrp	x0, 0 <gomp_places_list>
   4:	ldr	x0, [x0]
   8:	cbnz	x0, 68 <get_num_procs+0x68>
   c:	stp	x29, x30, [sp, #-48]!
  10:	mov	x29, sp
  14:	stp	x19, x20, [sp, #16]
  18:	adrp	x20, 8 <get_num_procs+0x8>
  1c:	str	x21, [sp, #32]
  20:	ldr	x21, [x20]
  24:	cbz	x21, 74 <get_num_procs+0x74>
  28:	bl	0 <pthread_self>
  2c:	adrp	x1, 0 <get_num_procs>
  30:	mov	x2, x21
  34:	ldr	x19, [x1]
  38:	mov	x1, x19
  3c:	bl	0 <pthread_getaffinity_np>
  40:	cbnz	w0, 74 <get_num_procs+0x74>
  44:	ldr	x1, [x20]
  48:	mov	x0, x19
  4c:	bl	0 <__sched_cpucount>
  50:	cmp	w0, #0x0
  54:	csinc	w0, w0, wzr, ne  // ne = any
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldr	x21, [sp, #32]
  60:	ldp	x29, x30, [sp], #48
  64:	ret
  68:	adrp	x0, 0 <gomp_available_cpus>
  6c:	ldr	w0, [x0]
  70:	ret
  74:	mov	w0, #0x54                  	// #84
  78:	bl	0 <sysconf>
  7c:	b	58 <get_num_procs+0x58>

0000000000000080 <gomp_cpuset_popcount>:
  80:	stp	x29, x30, [sp, #-16]!
  84:	mov	x29, sp
  88:	bl	0 <__sched_cpucount>
  8c:	sxtw	x0, w0
  90:	ldp	x29, x30, [sp], #16
  94:	ret

0000000000000098 <gomp_init_num_threads>:
  98:	stp	x29, x30, [sp, #-64]!
  9c:	mov	w0, #0x53                  	// #83
  a0:	mov	x29, sp
  a4:	stp	x19, x20, [sp, #16]
  a8:	adrp	x20, 8 <get_num_procs+0x8>
  ac:	adrp	x19, 8 <get_num_procs+0x8>
  b0:	stp	x21, x22, [sp, #32]
  b4:	add	x21, x19, #0x0
  b8:	add	x22, x20, #0x0
  bc:	stp	x23, x24, [sp, #48]
  c0:	bl	0 <sysconf>
  c4:	add	x0, x0, #0x3f
  c8:	mov	x24, #0x80                  	// #128
  cc:	lsr	x0, x0, #6
  d0:	lsl	x0, x0, #3
  d4:	str	x0, [x20]
  d8:	bl	0 <gomp_malloc>
  dc:	str	x0, [x19]
  e0:	bl	0 <pthread_self>
  e4:	mov	x23, x0
  e8:	ldr	x2, [x21]
  ec:	mov	x0, x23
  f0:	ldr	x1, [x22]
  f4:	bl	0 <pthread_getaffinity_np>
  f8:	cbnz	w0, 178 <gomp_init_num_threads+0xe0>
  fc:	ldr	x1, [x21]
 100:	ldr	x0, [x22]
 104:	bl	0 <__sched_cpucount>
 108:	sxtw	x0, w0
 10c:	adrp	x1, 0 <gomp_global_icv>
 110:	str	x0, [x1]
 114:	cbz	x0, 1b4 <gomp_init_num_threads+0x11c>
 118:	ldr	x2, [x22]
 11c:	adrp	x0, 0 <get_num_procs>
 120:	ldr	x4, [x21]
 124:	str	x2, [x0]
 128:	lsl	x0, x2, #3
 12c:	cbnz	x0, 154 <gomp_init_num_threads+0xbc>
 130:	add	x0, x0, #0x3f
 134:	lsr	x0, x0, #6
 138:	lsl	x0, x0, #3
 13c:	str	x0, [x20]
 140:	ldp	x19, x20, [sp, #16]
 144:	ldp	x21, x22, [sp, #32]
 148:	ldp	x23, x24, [sp, #48]
 14c:	ldp	x29, x30, [sp], #64
 150:	ret
 154:	sub	x1, x0, #0x1
 158:	cmp	x2, x1, lsr #3
 15c:	b.ls	170 <gomp_init_num_threads+0xd8>  // b.plast
 160:	lsr	x3, x1, #6
 164:	ldr	x3, [x4, x3, lsl #3]
 168:	lsr	x3, x3, x1
 16c:	tbnz	w3, #0, 130 <gomp_init_num_threads+0x98>
 170:	mov	x0, x1
 174:	b	12c <gomp_init_num_threads+0x94>
 178:	cmp	w0, #0x16
 17c:	b.ne	1b4 <gomp_init_num_threads+0x11c>  // b.any
 180:	ldr	x0, [x22]
 184:	cmp	x0, #0x7f
 188:	lsl	x1, x0, #1
 18c:	csel	x1, x1, x24, hi  // hi = pmore
 190:	str	x1, [x22]
 194:	cmp	x1, #0x3ff
 198:	ldr	x0, [x21]
 19c:	b.hi	1ac <gomp_init_num_threads+0x114>  // b.pmore
 1a0:	bl	0 <gomp_realloc>
 1a4:	str	x0, [x21]
 1a8:	b	e8 <gomp_init_num_threads+0x50>
 1ac:	bl	0 <realloc>
 1b0:	cbnz	x0, 1a4 <gomp_init_num_threads+0x10c>
 1b4:	str	xzr, [x20]
 1b8:	adrp	x20, 0 <gomp_global_icv>
 1bc:	mov	x0, #0x1                   	// #1
 1c0:	str	x0, [x20]
 1c4:	ldr	x0, [x19]
 1c8:	bl	0 <free>
 1cc:	str	xzr, [x19]
 1d0:	mov	w0, #0x54                  	// #84
 1d4:	bl	0 <sysconf>
 1d8:	str	x0, [x20]
 1dc:	b	140 <gomp_init_num_threads+0xa8>

00000000000001e0 <gomp_dynamic_max_threads>:
 1e0:	adrp	x0, 0 <gomp_tls_data>
 1e4:	ldr	x0, [x0]
 1e8:	mrs	x1, tpidr_el0
 1ec:	stp	x29, x30, [sp, #-64]!
 1f0:	add	x0, x1, x0
 1f4:	mov	x29, sp
 1f8:	ldr	x1, [x0, #80]
 1fc:	adrp	x0, 0 <gomp_global_icv>
 200:	add	x0, x0, #0x0
 204:	str	x20, [sp, #16]
 208:	add	x2, x1, #0x90
 20c:	cmp	x1, #0x0
 210:	csel	x0, x0, x2, eq  // eq = none
 214:	ldr	x20, [x0]
 218:	bl	0 <get_num_procs>
 21c:	mov	w1, #0x3                   	// #3
 220:	cmp	w20, w0
 224:	csel	w20, w20, w0, ls  // ls = plast
 228:	add	x0, sp, #0x28
 22c:	bl	0 <getloadavg>
 230:	cmp	w0, #0x3
 234:	b.ne	264 <gomp_dynamic_max_threads+0x84>  // b.any
 238:	adrp	x0, 0 <get_num_procs>
 23c:	ldr	d0, [sp, #56]
 240:	ldr	d1, [x0]
 244:	fadd	d0, d0, d1
 248:	fcvtzu	w1, d0
 24c:	sub	w0, w20, w1
 250:	cmp	w1, w20
 254:	csinc	w0, w0, wzr, cc  // cc = lo, ul, last
 258:	ldr	x20, [sp, #16]
 25c:	ldp	x29, x30, [sp], #64
 260:	ret
 264:	mov	w1, #0x0                   	// #0
 268:	b	24c <gomp_dynamic_max_threads+0x6c>

000000000000026c <gomp_ialias_omp_get_num_procs>:
 26c:	b	0 <get_num_procs>

sem.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <do_spin>:
   0:	adrp	x2, 0 <gomp_spin_count_var>
   4:	ldr	x3, [x2]
   8:	adrp	x2, 0 <gomp_managed_threads>
   c:	add	x2, x2, #0x0
  10:	ldr	x4, [x2]
  14:	adrp	x2, 0 <gomp_available_cpus>
  18:	ldr	x2, [x2]
  1c:	cmp	x4, x2
  20:	b.ls	2c <do_spin+0x2c>  // b.plast
  24:	adrp	x2, 0 <gomp_throttled_spin_count_var>
  28:	ldr	x3, [x2]
  2c:	mov	x2, #0x0                   	// #0
  30:	cmp	x2, x3
  34:	b.ne	40 <do_spin+0x40>  // b.any
  38:	mov	w0, #0x1                   	// #1
  3c:	ret
  40:	ldr	w4, [x0]
  44:	cmp	w4, w1
  48:	b.ne	54 <do_spin+0x54>  // b.any
  4c:	add	x2, x2, #0x1
  50:	b	30 <do_spin+0x30>
  54:	mov	w0, #0x0                   	// #0
  58:	b	3c <do_spin+0x3c>

000000000000005c <futex_wait.constprop.0>:
  5c:	stp	x29, x30, [sp, #-32]!
  60:	mov	x1, x0
  64:	mov	x4, #0x0                   	// #0
  68:	mov	x29, sp
  6c:	stp	x19, x20, [sp, #16]
  70:	adrp	x20, 0 <gomp_futex_wait>
  74:	mov	x19, x0
  78:	ldr	w2, [x20]
  7c:	mov	w3, #0x80000000            	// #-2147483648
  80:	mov	x0, #0x62                  	// #98
  84:	bl	0 <syscall>
  88:	tbz	w0, #31, d4 <futex_wait.constprop.0+0x78>
  8c:	bl	0 <__errno_location>
  90:	ldr	w0, [x0]
  94:	cmp	w0, #0x26
  98:	b.ne	d4 <futex_wait.constprop.0+0x78>  // b.any
  9c:	adrp	x1, 0 <gomp_futex_wake>
  a0:	ldr	w2, [x20]
  a4:	mov	x4, #0x0                   	// #0
  a8:	mov	w3, #0x80000000            	// #-2147483648
  ac:	ldr	w0, [x1]
  b0:	and	w2, w2, #0xffffff7f
  b4:	str	w2, [x20]
  b8:	and	w0, w0, #0xffffff7f
  bc:	str	w0, [x1]
  c0:	mov	x1, x19
  c4:	mov	x0, #0x62                  	// #98
  c8:	ldp	x19, x20, [sp, #16]
  cc:	ldp	x29, x30, [sp], #32
  d0:	b	0 <syscall>
  d4:	ldp	x19, x20, [sp, #16]
  d8:	ldp	x29, x30, [sp], #32
  dc:	ret

00000000000000e0 <gomp_sem_post_slow>:
  e0:	stp	x29, x30, [sp, #-32]!
  e4:	mov	x1, x0
  e8:	mov	w3, #0x1                   	// #1
  ec:	mov	x29, sp
  f0:	stp	x19, x20, [sp, #16]
  f4:	adrp	x20, 0 <gomp_futex_wake>
  f8:	mov	x19, x0
  fc:	ldr	w2, [x20]
 100:	mov	x0, #0x62                  	// #98
 104:	bl	0 <syscall>
 108:	tbz	w0, #31, 150 <gomp_sem_post_slow+0x70>
 10c:	bl	0 <__errno_location>
 110:	ldr	w0, [x0]
 114:	cmp	w0, #0x26
 118:	b.ne	150 <gomp_sem_post_slow+0x70>  // b.any
 11c:	adrp	x1, 0 <gomp_futex_wait>
 120:	ldr	w2, [x20]
 124:	mov	w3, #0x1                   	// #1
 128:	ldr	w0, [x1]
 12c:	and	w2, w2, #0xffffff7f
 130:	str	w2, [x20]
 134:	and	w0, w0, #0xffffff7f
 138:	str	w0, [x1]
 13c:	mov	x1, x19
 140:	mov	x0, #0x62                  	// #98
 144:	ldp	x19, x20, [sp, #16]
 148:	ldp	x29, x30, [sp], #32
 14c:	b	0 <syscall>
 150:	ldp	x19, x20, [sp, #16]
 154:	ldp	x29, x30, [sp], #32
 158:	ret

000000000000015c <gomp_sem_wait_slow>:
 15c:	stp	x29, x30, [sp, #-32]!
 160:	mov	w5, #0x80000000            	// #-2147483648
 164:	mov	x29, sp
 168:	stp	x19, x20, [sp, #16]
 16c:	mov	x19, x0
 170:	cbnz	w1, 1a8 <gomp_sem_wait_slow+0x4c>
 174:	mov	x0, x19
 178:	mov	w1, #0x0                   	// #0
 17c:	bl	0 <do_spin>
 180:	cbz	w0, 1f4 <gomp_sem_wait_slow+0x98>
 184:	ldaxr	w0, [x19]
 188:	cbnz	w0, 194 <gomp_sem_wait_slow+0x38>
 18c:	stxr	w1, w5, [x19]
 190:	cbnz	w1, 184 <gomp_sem_wait_slow+0x28>
 194:	cmp	w0, #0x0
 198:	b.ne	1f4 <gomp_sem_wait_slow+0x98>  // b.any
 19c:	mov	x0, x19
 1a0:	bl	5c <futex_wait.constprop.0>
 1a4:	ldr	w1, [x19]
 1a8:	mov	w20, #0x80000000            	// #-2147483648
 1ac:	ands	w3, w1, #0x7fffffff
 1b0:	mov	w2, w1
 1b4:	sub	w0, w3, #0x1
 1b8:	orr	w0, w0, #0x80000000
 1bc:	csel	w0, w0, w20, ne  // ne = any
 1c0:	ldaxr	w1, [x19]
 1c4:	cmp	w1, w2
 1c8:	b.ne	1d4 <gomp_sem_wait_slow+0x78>  // b.any
 1cc:	stxr	w4, w0, [x19]
 1d0:	cbnz	w4, 1c0 <gomp_sem_wait_slow+0x64>
 1d4:	b.ne	1ac <gomp_sem_wait_slow+0x50>  // b.any
 1d8:	cbz	w3, 228 <gomp_sem_wait_slow+0xcc>
 1dc:	tst	w2, #0x7ffffffe
 1e0:	b.eq	248 <gomp_sem_wait_slow+0xec>  // b.none
 1e4:	mov	x0, x19
 1e8:	ldp	x19, x20, [sp, #16]
 1ec:	ldp	x29, x30, [sp], #32
 1f0:	b	e0 <gomp_sem_post_slow>
 1f4:	ldr	w1, [x19]
 1f8:	cmp	w1, #0x0
 1fc:	b.lt	170 <gomp_sem_wait_slow+0x14>  // b.tstop
 200:	b.eq	174 <gomp_sem_wait_slow+0x18>  // b.none
 204:	sub	w2, w1, #0x1
 208:	ldaxr	w0, [x19]
 20c:	cmp	w0, w1
 210:	b.ne	21c <gomp_sem_wait_slow+0xc0>  // b.any
 214:	stxr	w3, w2, [x19]
 218:	cbnz	w3, 208 <gomp_sem_wait_slow+0xac>
 21c:	b.eq	248 <gomp_sem_wait_slow+0xec>  // b.none
 220:	mov	w1, w0
 224:	b	170 <gomp_sem_wait_slow+0x14>
 228:	mov	x0, x19
 22c:	mov	w1, #0x80000000            	// #-2147483648
 230:	bl	0 <do_spin>
 234:	cbz	w0, 240 <gomp_sem_wait_slow+0xe4>
 238:	mov	x0, x19
 23c:	bl	5c <futex_wait.constprop.0>
 240:	ldr	w1, [x19]
 244:	b	1ac <gomp_sem_wait_slow+0x50>
 248:	ldp	x19, x20, [sp, #16]
 24c:	ldp	x29, x30, [sp], #32
 250:	ret

bar.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <do_wait>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	adrp	x0, 0 <gomp_spin_count_var>
  14:	mov	w20, w1
  18:	str	x21, [sp, #32]
  1c:	ldr	x1, [x0]
  20:	adrp	x0, 0 <gomp_managed_threads>
  24:	add	x0, x0, #0x0
  28:	ldr	x2, [x0]
  2c:	adrp	x0, 0 <gomp_available_cpus>
  30:	ldr	x0, [x0]
  34:	cmp	x2, x0
  38:	b.ls	44 <do_wait+0x44>  // b.plast
  3c:	adrp	x0, 0 <gomp_throttled_spin_count_var>
  40:	ldr	x1, [x0]
  44:	mov	x0, #0x0                   	// #0
  48:	cmp	x0, x1
  4c:	b.ne	80 <do_wait+0x80>  // b.any
  50:	adrp	x21, 0 <gomp_futex_wait>
  54:	mov	w3, w20
  58:	mov	x1, x19
  5c:	mov	x4, #0x0                   	// #0
  60:	ldr	w2, [x21]
  64:	mov	x0, #0x62                  	// #98
  68:	bl	0 <syscall>
  6c:	tbnz	w0, #31, 94 <do_wait+0x94>
  70:	ldp	x19, x20, [sp, #16]
  74:	ldr	x21, [sp, #32]
  78:	ldp	x29, x30, [sp], #48
  7c:	ret
  80:	ldr	w2, [x19]
  84:	cmp	w20, w2
  88:	b.ne	70 <do_wait+0x70>  // b.any
  8c:	add	x0, x0, #0x1
  90:	b	48 <do_wait+0x48>
  94:	bl	0 <__errno_location>
  98:	ldr	w0, [x0]
  9c:	cmp	w0, #0x26
  a0:	b.ne	70 <do_wait+0x70>  // b.any
  a4:	adrp	x1, 0 <gomp_futex_wake>
  a8:	ldr	w2, [x21]
  ac:	mov	w3, w20
  b0:	mov	x4, #0x0                   	// #0
  b4:	ldr	w0, [x1]
  b8:	and	w2, w2, #0xffffff7f
  bc:	str	w2, [x21]
  c0:	and	w0, w0, #0xffffff7f
  c4:	str	w0, [x1]
  c8:	mov	x1, x19
  cc:	mov	x0, #0x62                  	// #98
  d0:	ldp	x19, x20, [sp, #16]
  d4:	ldr	x21, [sp, #32]
  d8:	ldp	x29, x30, [sp], #48
  dc:	b	0 <syscall>

00000000000000e0 <gomp_barrier_wait_start>:
  e0:	mov	x1, x0
  e4:	add	x0, x0, #0x4
  e8:	ldar	w0, [x0]
  ec:	and	w0, w0, #0xfffffffc
  f0:	add	x1, x1, #0x40
  f4:	ldaxr	w2, [x1]
  f8:	sub	w2, w2, #0x1
  fc:	stlxr	w3, w2, [x1]
 100:	cbnz	w3, f4 <gomp_barrier_wait_start+0x14>
 104:	cbnz	w2, 10c <gomp_barrier_wait_start+0x2c>
 108:	orr	w0, w0, #0x1
 10c:	ret

0000000000000110 <gomp_mutex_unlock>:
 110:	mov	x1, x0
 114:	ldxr	w2, [x1]
 118:	stlxr	w3, wzr, [x1]
 11c:	cbnz	w3, 114 <gomp_mutex_unlock+0x4>
 120:	tbz	w2, #31, 128 <gomp_mutex_unlock+0x18>
 124:	b	0 <gomp_mutex_unlock_slow>
 128:	ret

000000000000012c <futex_wake>:
 12c:	stp	x29, x30, [sp, #-48]!
 130:	mov	w3, w1
 134:	mov	x29, sp
 138:	str	x21, [sp, #32]
 13c:	adrp	x21, 0 <gomp_futex_wake>
 140:	stp	x19, x20, [sp, #16]
 144:	mov	x19, x0
 148:	ldr	w2, [x21]
 14c:	mov	w20, w1
 150:	mov	x1, x0
 154:	mov	x0, #0x62                  	// #98
 158:	bl	0 <syscall>
 15c:	tbz	w0, #31, 1a8 <futex_wake+0x7c>
 160:	bl	0 <__errno_location>
 164:	ldr	w0, [x0]
 168:	cmp	w0, #0x26
 16c:	b.ne	1a8 <futex_wake+0x7c>  // b.any
 170:	adrp	x1, 0 <gomp_futex_wait>
 174:	ldr	w2, [x21]
 178:	mov	w3, w20
 17c:	ldr	w0, [x1]
 180:	and	w2, w2, #0xffffff7f
 184:	str	w2, [x21]
 188:	and	w0, w0, #0xffffff7f
 18c:	str	w0, [x1]
 190:	mov	x1, x19
 194:	mov	x0, #0x62                  	// #98
 198:	ldp	x19, x20, [sp, #16]
 19c:	ldr	x21, [sp, #32]
 1a0:	ldp	x29, x30, [sp], #48
 1a4:	b	0 <syscall>
 1a8:	ldp	x19, x20, [sp, #16]
 1ac:	ldr	x21, [sp, #32]
 1b0:	ldp	x29, x30, [sp], #48
 1b4:	ret

00000000000001b8 <gomp_barrier_wait_end>:
 1b8:	stp	x29, x30, [sp, #-32]!
 1bc:	mov	x29, sp
 1c0:	stp	x19, x20, [sp, #16]
 1c4:	mov	w19, w1
 1c8:	add	x20, x0, #0x4
 1cc:	tbz	w19, #0, 1fc <gomp_barrier_wait_end+0x44>
 1d0:	mov	x2, x0
 1d4:	ldr	w0, [x0]
 1d8:	str	w0, [x2, #64]
 1dc:	ldr	w0, [x2, #4]
 1e0:	add	w0, w0, #0x8
 1e4:	stlr	w0, [x20]
 1e8:	mov	x0, x20
 1ec:	ldp	x19, x20, [sp, #16]
 1f0:	mov	w1, #0x7fffffff            	// #2147483647
 1f4:	ldp	x29, x30, [sp], #32
 1f8:	b	12c <futex_wake>
 1fc:	mov	x0, x20
 200:	mov	w1, w19
 204:	bl	0 <do_wait>
 208:	ldar	w0, [x20]
 20c:	cmp	w0, w19
 210:	b.eq	1fc <gomp_barrier_wait_end+0x44>  // b.none
 214:	ldp	x19, x20, [sp, #16]
 218:	ldp	x29, x30, [sp], #32
 21c:	ret

0000000000000220 <gomp_barrier_wait>:
 220:	mov	x4, x0
 224:	stp	x29, x30, [sp, #-16]!
 228:	mov	x29, sp
 22c:	bl	e0 <gomp_barrier_wait_start>
 230:	mov	w1, w0
 234:	ldp	x29, x30, [sp], #16
 238:	mov	x0, x4
 23c:	b	1b8 <gomp_barrier_wait_end>

0000000000000240 <gomp_barrier_wait_last>:
 240:	mov	x4, x0
 244:	stp	x29, x30, [sp, #-16]!
 248:	mov	x29, sp
 24c:	bl	e0 <gomp_barrier_wait_start>
 250:	mov	w1, w0
 254:	tbz	w1, #0, 264 <gomp_barrier_wait_last+0x24>
 258:	ldp	x29, x30, [sp], #16
 25c:	mov	x0, x4
 260:	b	1b8 <gomp_barrier_wait_end>
 264:	ldp	x29, x30, [sp], #16
 268:	ret

000000000000026c <gomp_team_barrier_wake>:
 26c:	cmp	w1, #0x0
 270:	mov	w2, #0x7fffffff            	// #2147483647
 274:	add	x0, x0, #0x4
 278:	csel	w1, w1, w2, ne  // ne = any
 27c:	b	12c <futex_wake>

0000000000000280 <gomp_team_barrier_wait_end>:
 280:	stp	x29, x30, [sp, #-48]!
 284:	mov	x29, sp
 288:	stp	x19, x20, [sp, #16]
 28c:	mov	w19, w1
 290:	add	x20, x0, #0x4
 294:	stp	x21, x22, [sp, #32]
 298:	tbz	w19, #0, 2d0 <gomp_team_barrier_wait_end+0x50>
 29c:	adrp	x1, 0 <gomp_tls_data>
 2a0:	ldr	x1, [x1]
 2a4:	mrs	x2, tpidr_el0
 2a8:	add	x1, x2, x1
 2ac:	ldr	w2, [x0]
 2b0:	str	w2, [x0, #64]
 2b4:	ldr	x1, [x1, #16]
 2b8:	ldr	w0, [x1, #1320]
 2bc:	str	wzr, [x1, #1332]
 2c0:	cbz	w0, 318 <gomp_team_barrier_wait_end+0x98>
 2c4:	mov	w0, w19
 2c8:	and	w19, w19, #0xfffffffe
 2cc:	bl	0 <gomp_barrier_handle_tasks>
 2d0:	and	w21, w19, #0xfffffffb
 2d4:	add	w22, w21, #0x8
 2d8:	mov	x0, x20
 2dc:	mov	w1, w19
 2e0:	bl	0 <do_wait>
 2e4:	ldar	w0, [x20]
 2e8:	tbz	w0, #0, 2f8 <gomp_team_barrier_wait_end+0x78>
 2ec:	mov	w0, w21
 2f0:	bl	0 <gomp_barrier_handle_tasks>
 2f4:	ldar	w0, [x20]
 2f8:	and	w1, w0, #0x2
 2fc:	cmp	w22, w0
 300:	orr	w19, w19, w1
 304:	b.ne	2d8 <gomp_team_barrier_wait_end+0x58>  // b.any
 308:	ldp	x19, x20, [sp, #16]
 30c:	ldp	x21, x22, [sp, #32]
 310:	ldp	x29, x30, [sp], #48
 314:	ret
 318:	and	w19, w19, #0xfffffffb
 31c:	add	w19, w19, #0x7
 320:	stlr	w19, [x20]
 324:	mov	x0, x20
 328:	ldp	x19, x20, [sp, #16]
 32c:	mov	w1, #0x7fffffff            	// #2147483647
 330:	ldp	x21, x22, [sp, #32]
 334:	ldp	x29, x30, [sp], #48
 338:	b	12c <futex_wake>

000000000000033c <gomp_team_barrier_wait>:
 33c:	mov	x4, x0
 340:	stp	x29, x30, [sp, #-16]!
 344:	mov	x29, sp
 348:	bl	e0 <gomp_barrier_wait_start>
 34c:	mov	w1, w0
 350:	ldp	x29, x30, [sp], #16
 354:	mov	x0, x4
 358:	b	280 <gomp_team_barrier_wait_end>

000000000000035c <gomp_team_barrier_wait_final>:
 35c:	add	x1, x0, #0x4
 360:	ldar	w1, [x1]
 364:	and	w1, w1, #0xfffffffc
 368:	add	x2, x0, #0x44
 36c:	ldaxr	w3, [x2]
 370:	sub	w3, w3, #0x1
 374:	stlxr	w4, w3, [x2]
 378:	cbnz	w4, 36c <gomp_team_barrier_wait_final+0x10>
 37c:	cbnz	w3, 38c <gomp_team_barrier_wait_final+0x30>
 380:	ldr	w2, [x0]
 384:	orr	w1, w1, #0x1
 388:	str	w2, [x0, #68]
 38c:	b	280 <gomp_team_barrier_wait_end>

0000000000000390 <gomp_team_barrier_wait_cancel_end>:
 390:	stp	x29, x30, [sp, #-48]!
 394:	mov	x29, sp
 398:	stp	x19, x20, [sp, #16]
 39c:	mov	x19, x0
 3a0:	mov	w20, w1
 3a4:	stp	x21, x22, [sp, #32]
 3a8:	tbz	w20, #0, 3e0 <gomp_team_barrier_wait_cancel_end+0x50>
 3ac:	adrp	x0, 0 <gomp_tls_data>
 3b0:	ldr	x0, [x0]
 3b4:	mrs	x1, tpidr_el0
 3b8:	add	x0, x1, x0
 3bc:	ldr	w1, [x19]
 3c0:	str	w1, [x19, #64]
 3c4:	ldr	x0, [x0, #16]
 3c8:	str	wzr, [x0, #1332]
 3cc:	ldr	w0, [x0, #1320]
 3d0:	cbz	w0, 428 <gomp_team_barrier_wait_cancel_end+0x98>
 3d4:	mov	w0, w20
 3d8:	and	w20, w20, #0xfffffffe
 3dc:	bl	0 <gomp_barrier_handle_tasks>
 3e0:	tbnz	w20, #2, 450 <gomp_team_barrier_wait_cancel_end+0xc0>
 3e4:	mov	w21, w20
 3e8:	add	x19, x19, #0x4
 3ec:	add	w22, w20, #0x8
 3f0:	mov	x0, x19
 3f4:	mov	w1, w21
 3f8:	bl	0 <do_wait>
 3fc:	ldar	w0, [x19]
 400:	tbnz	w0, #2, 450 <gomp_team_barrier_wait_cancel_end+0xc0>
 404:	tbz	w0, #0, 414 <gomp_team_barrier_wait_cancel_end+0x84>
 408:	mov	w0, w20
 40c:	bl	0 <gomp_barrier_handle_tasks>
 410:	ldar	w0, [x19]
 414:	and	w1, w0, #0x2
 418:	cmp	w22, w0
 41c:	orr	w21, w21, w1
 420:	b.ne	3f0 <gomp_team_barrier_wait_cancel_end+0x60>  // b.any
 424:	b	43c <gomp_team_barrier_wait_cancel_end+0xac>
 428:	add	x0, x19, #0x4
 42c:	add	w20, w20, #0x7
 430:	stlr	w20, [x0]
 434:	mov	w1, #0x7fffffff            	// #2147483647
 438:	bl	12c <futex_wake>
 43c:	mov	w0, #0x0                   	// #0
 440:	ldp	x19, x20, [sp, #16]
 444:	ldp	x21, x22, [sp, #32]
 448:	ldp	x29, x30, [sp], #48
 44c:	ret
 450:	mov	w0, #0x1                   	// #1
 454:	b	440 <gomp_team_barrier_wait_cancel_end+0xb0>

0000000000000458 <gomp_team_barrier_wait_cancel>:
 458:	mov	x4, x0
 45c:	stp	x29, x30, [sp, #-16]!
 460:	mov	x29, sp
 464:	bl	e0 <gomp_barrier_wait_start>
 468:	mov	w1, w0
 46c:	ldp	x29, x30, [sp], #16
 470:	mov	x0, x4
 474:	b	390 <gomp_team_barrier_wait_cancel_end>

0000000000000478 <gomp_team_barrier_cancel>:
 478:	stp	x29, x30, [sp, #-32]!
 47c:	mov	x29, sp
 480:	stp	x19, x20, [sp, #16]
 484:	mov	x19, x0
 488:	add	x20, x0, #0x500
 48c:	mov	w0, #0x1                   	// #1
 490:	ldaxr	w1, [x20]
 494:	cbnz	w1, 4a0 <gomp_team_barrier_cancel+0x28>
 498:	stxr	w2, w0, [x20]
 49c:	cbnz	w2, 490 <gomp_team_barrier_cancel+0x18>
 4a0:	cmp	w1, #0x0
 4a4:	b.eq	4b0 <gomp_team_barrier_cancel+0x38>  // b.none
 4a8:	mov	x0, x20
 4ac:	bl	0 <gomp_mutex_lock_slow>
 4b0:	ldr	w0, [x19, #132]
 4b4:	tbz	w0, #2, 4c8 <gomp_team_barrier_cancel+0x50>
 4b8:	mov	x0, x20
 4bc:	ldp	x19, x20, [sp, #16]
 4c0:	ldp	x29, x30, [sp], #32
 4c4:	b	110 <gomp_mutex_unlock>
 4c8:	orr	w0, w0, #0x4
 4cc:	str	w0, [x19, #132]!
 4d0:	mov	x0, x20
 4d4:	bl	110 <gomp_mutex_unlock>
 4d8:	mov	x0, x19
 4dc:	mov	w1, #0x7fffffff            	// #2147483647
 4e0:	ldp	x19, x20, [sp, #16]
 4e4:	ldp	x29, x30, [sp], #32
 4e8:	b	12c <futex_wake>

ptrlock.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ptrlock_get_slow>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x0
  10:	mov	x0, #0x2                   	// #2
  14:	stp	x21, x22, [sp, #32]
  18:	str	x23, [sp, #48]
  1c:	ldxr	x1, [x20]
  20:	cmp	x1, #0x1
  24:	b.ne	30 <gomp_ptrlock_get_slow+0x30>  // b.any
  28:	stxr	w2, x0, [x20]
  2c:	cbnz	w2, 1c <gomp_ptrlock_get_slow+0x1c>
  30:	mov	x19, x20
  34:	adrp	x23, 0 <gomp_managed_threads>
  38:	adrp	x21, 0 <gomp_futex_wait>
  3c:	adrp	x22, 0 <gomp_futex_wake>
  40:	add	x23, x23, #0x0
  44:	add	x21, x21, #0x0
  48:	add	x22, x22, #0x0
  4c:	adrp	x0, 0 <gomp_spin_count_var>
  50:	ldr	x1, [x0]
  54:	ldr	x2, [x23]
  58:	adrp	x0, 0 <gomp_available_cpus>
  5c:	ldr	x0, [x0]
  60:	cmp	x2, x0
  64:	b.ls	70 <gomp_ptrlock_get_slow+0x70>  // b.plast
  68:	adrp	x0, 0 <gomp_throttled_spin_count_var>
  6c:	ldr	x1, [x0]
  70:	mov	x0, #0x0                   	// #0
  74:	cmp	x0, x1
  78:	b.ne	f8 <gomp_ptrlock_get_slow+0xf8>  // b.any
  7c:	ldr	w2, [x21]
  80:	mov	x1, x19
  84:	mov	x4, #0x0                   	// #0
  88:	mov	w3, #0x2                   	// #2
  8c:	mov	x0, #0x62                  	// #98
  90:	bl	0 <syscall>
  94:	tbz	w0, #31, d4 <gomp_ptrlock_get_slow+0xd4>
  98:	bl	0 <__errno_location>
  9c:	ldr	w0, [x0]
  a0:	cmp	w0, #0x26
  a4:	b.ne	d4 <gomp_ptrlock_get_slow+0xd4>  // b.any
  a8:	ldr	w0, [x22]
  ac:	mov	x1, x19
  b0:	ldr	w2, [x21]
  b4:	mov	x4, #0x0                   	// #0
  b8:	and	w0, w0, #0xffffff7f
  bc:	mov	w3, #0x2                   	// #2
  c0:	and	w2, w2, #0xffffff7f
  c4:	str	w0, [x22]
  c8:	mov	x0, #0x62                  	// #98
  cc:	str	w2, [x21]
  d0:	bl	0 <syscall>
  d4:	ldr	w0, [x19]
  d8:	cmp	w0, #0x2
  dc:	b.eq	4c <gomp_ptrlock_get_slow+0x4c>  // b.none
  e0:	ldar	x0, [x20]
  e4:	ldp	x19, x20, [sp, #16]
  e8:	ldp	x21, x22, [sp, #32]
  ec:	ldr	x23, [sp, #48]
  f0:	ldp	x29, x30, [sp], #64
  f4:	ret
  f8:	ldr	w2, [x19]
  fc:	cmp	w2, #0x2
 100:	b.ne	d4 <gomp_ptrlock_get_slow+0xd4>  // b.any
 104:	add	x0, x0, #0x1
 108:	b	74 <gomp_ptrlock_get_slow+0x74>

000000000000010c <gomp_ptrlock_set_slow>:
 10c:	stp	x29, x30, [sp, #-32]!
 110:	mov	x29, sp
 114:	stp	x19, x20, [sp, #16]
 118:	mov	x19, x0
 11c:	adrp	x20, 0 <gomp_futex_wake>
 120:	mov	x1, x19
 124:	mov	w3, #0x7fffffff            	// #2147483647
 128:	mov	x0, #0x62                  	// #98
 12c:	ldr	w2, [x20]
 130:	bl	0 <syscall>
 134:	tbz	w0, #31, 17c <gomp_ptrlock_set_slow+0x70>
 138:	bl	0 <__errno_location>
 13c:	ldr	w0, [x0]
 140:	cmp	w0, #0x26
 144:	b.ne	17c <gomp_ptrlock_set_slow+0x70>  // b.any
 148:	adrp	x1, 0 <gomp_futex_wait>
 14c:	ldr	w2, [x20]
 150:	mov	w3, #0x7fffffff            	// #2147483647
 154:	ldr	w0, [x1]
 158:	and	w2, w2, #0xffffff7f
 15c:	str	w2, [x20]
 160:	and	w0, w0, #0xffffff7f
 164:	str	w0, [x1]
 168:	mov	x1, x19
 16c:	mov	x0, #0x62                  	// #98
 170:	ldp	x19, x20, [sp, #16]
 174:	ldp	x29, x30, [sp], #32
 178:	b	0 <syscall>
 17c:	ldp	x19, x20, [sp, #16]
 180:	ldp	x29, x30, [sp], #32
 184:	ret

time.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_get_wtime>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w0, #0x1                   	// #1
   8:	mov	x29, sp
   c:	add	x1, sp, #0x10
  10:	bl	0 <clock_gettime>
  14:	tbz	w0, #31, 24 <gomp_ialias_omp_get_wtime+0x24>
  18:	add	x1, sp, #0x10
  1c:	mov	w0, #0x0                   	// #0
  20:	bl	0 <clock_gettime>
  24:	ldr	d1, [sp, #24]
  28:	mov	x0, #0xcd6500000000        	// #225833675390976
  2c:	movk	x0, #0x41cd, lsl #48
  30:	fmov	d0, x0
  34:	scvtf	d1, d1
  38:	fdiv	d1, d1, d0
  3c:	ldr	d0, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	scvtf	d0, d0
  48:	fadd	d0, d1, d0
  4c:	ret

0000000000000050 <gomp_ialias_omp_get_wtick>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	w0, #0x1                   	// #1
  58:	mov	x29, sp
  5c:	add	x1, sp, #0x10
  60:	bl	0 <clock_getres>
  64:	tbz	w0, #31, 74 <gomp_ialias_omp_get_wtick+0x24>
  68:	add	x1, sp, #0x10
  6c:	mov	w0, #0x0                   	// #0
  70:	bl	0 <clock_getres>
  74:	ldr	d1, [sp, #24]
  78:	mov	x0, #0xcd6500000000        	// #225833675390976
  7c:	movk	x0, #0x41cd, lsl #48
  80:	fmov	d0, x0
  84:	scvtf	d1, d1
  88:	fdiv	d1, d1, d0
  8c:	ldr	d0, [sp, #16]
  90:	ldp	x29, x30, [sp], #32
  94:	scvtf	d0, d0
  98:	fadd	d0, d1, d0
  9c:	ret

fortran.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <omp_init_lock_>:
   0:	b	0 <gomp_ialias_omp_init_lock>

0000000000000004 <omp_init_nest_lock_>:
   4:	stp	x29, x30, [sp, #-32]!
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	mov	x19, x0
  14:	mov	x0, #0x10                  	// #16
  18:	bl	0 <malloc>
  1c:	str	x0, [x19]
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	b	0 <gomp_ialias_omp_init_nest_lock>

000000000000002c <omp_destroy_lock_>:
  2c:	b	0 <gomp_ialias_omp_destroy_lock>

0000000000000030 <omp_destroy_nest_lock_>:
  30:	stp	x29, x30, [sp, #-32]!
  34:	mov	x29, sp
  38:	str	x19, [sp, #16]
  3c:	mov	x19, x0
  40:	ldr	x0, [x0]
  44:	bl	0 <gomp_ialias_omp_destroy_nest_lock>
  48:	ldr	x0, [x19]
  4c:	bl	0 <free>
  50:	str	xzr, [x19]
  54:	ldr	x19, [sp, #16]
  58:	ldp	x29, x30, [sp], #32
  5c:	ret

0000000000000060 <omp_set_lock_>:
  60:	b	0 <gomp_ialias_omp_set_lock>

0000000000000064 <omp_set_nest_lock_>:
  64:	ldr	x0, [x0]
  68:	b	0 <gomp_ialias_omp_set_nest_lock>

000000000000006c <omp_unset_lock_>:
  6c:	b	0 <gomp_ialias_omp_unset_lock>

0000000000000070 <omp_unset_nest_lock_>:
  70:	ldr	x0, [x0]
  74:	b	0 <gomp_ialias_omp_unset_nest_lock>

0000000000000078 <omp_test_lock_>:
  78:	b	0 <gomp_ialias_omp_test_lock>

000000000000007c <omp_test_nest_lock_>:
  7c:	ldr	x0, [x0]
  80:	b	0 <gomp_ialias_omp_test_nest_lock>

0000000000000084 <omp_set_dynamic_>:
  84:	ldr	w0, [x0]
  88:	b	0 <gomp_ialias_omp_set_dynamic>

000000000000008c <omp_set_dynamic_8_>:
  8c:	ldr	x0, [x0]
  90:	cmp	x0, #0x0
  94:	cset	w0, ne  // ne = any
  98:	b	0 <gomp_ialias_omp_set_dynamic>

000000000000009c <omp_set_nested_>:
  9c:	ldr	w0, [x0]
  a0:	b	0 <gomp_ialias_omp_set_nested>

00000000000000a4 <omp_set_nested_8_>:
  a4:	ldr	x0, [x0]
  a8:	cmp	x0, #0x0
  ac:	cset	w0, ne  // ne = any
  b0:	b	0 <gomp_ialias_omp_set_nested>

00000000000000b4 <omp_set_num_threads_>:
  b4:	ldr	w0, [x0]
  b8:	b	0 <gomp_ialias_omp_set_num_threads>

00000000000000bc <omp_set_num_threads_8_>:
  bc:	ldr	x0, [x0]
  c0:	mov	x1, #0xffffffff80000001    	// #-2147483647
  c4:	cmp	x0, x1
  c8:	b.lt	dc <omp_set_num_threads_8_+0x20>  // b.tstop
  cc:	mov	x1, #0x7fffffff            	// #2147483647
  d0:	cmp	x0, x1
  d4:	csel	x0, x0, x1, le
  d8:	b	0 <gomp_ialias_omp_set_num_threads>
  dc:	mov	w0, #0x80000000            	// #-2147483648
  e0:	b	d8 <omp_set_num_threads_8_+0x1c>

00000000000000e4 <omp_get_dynamic_>:
  e4:	b	0 <gomp_ialias_omp_get_dynamic>

00000000000000e8 <omp_get_nested_>:
  e8:	b	0 <gomp_ialias_omp_get_nested>

00000000000000ec <omp_in_parallel_>:
  ec:	b	0 <gomp_ialias_omp_in_parallel>

00000000000000f0 <omp_get_max_threads_>:
  f0:	b	0 <gomp_ialias_omp_get_max_threads>

00000000000000f4 <omp_get_num_procs_>:
  f4:	b	0 <gomp_ialias_omp_get_num_procs>

00000000000000f8 <omp_get_num_threads_>:
  f8:	b	0 <gomp_ialias_omp_get_num_threads>

00000000000000fc <omp_get_thread_num_>:
  fc:	b	0 <gomp_ialias_omp_get_thread_num>

0000000000000100 <omp_get_wtick_>:
 100:	b	0 <gomp_ialias_omp_get_wtick>

0000000000000104 <omp_get_wtime_>:
 104:	b	0 <gomp_ialias_omp_get_wtime>

0000000000000108 <omp_set_schedule_>:
 108:	ldr	w0, [x0]
 10c:	ldr	w1, [x1]
 110:	b	0 <gomp_ialias_omp_set_schedule>

0000000000000114 <omp_set_schedule_8_>:
 114:	ldr	x1, [x1]
 118:	mov	x2, #0xffffffff80000001    	// #-2147483647
 11c:	ldr	w0, [x0]
 120:	cmp	x1, x2
 124:	b.lt	138 <omp_set_schedule_8_+0x24>  // b.tstop
 128:	mov	x2, #0x7fffffff            	// #2147483647
 12c:	cmp	x1, x2
 130:	csel	x1, x1, x2, le
 134:	b	0 <gomp_ialias_omp_set_schedule>
 138:	mov	w1, #0x80000000            	// #-2147483648
 13c:	b	134 <omp_set_schedule_8_+0x20>

0000000000000140 <omp_get_schedule_>:
 140:	stp	x29, x30, [sp, #-48]!
 144:	mov	x29, sp
 148:	stp	x19, x20, [sp, #16]
 14c:	mov	x20, x0
 150:	mov	x19, x1
 154:	add	x0, sp, #0x28
 158:	add	x1, sp, #0x2c
 15c:	bl	0 <gomp_ialias_omp_get_schedule>
 160:	ldr	w0, [sp, #40]
 164:	and	w0, w0, #0x7fffffff
 168:	str	w0, [x20]
 16c:	ldr	w0, [sp, #44]
 170:	str	w0, [x19]
 174:	ldp	x19, x20, [sp, #16]
 178:	ldp	x29, x30, [sp], #48
 17c:	ret

0000000000000180 <omp_get_schedule_8_>:
 180:	stp	x29, x30, [sp, #-48]!
 184:	mov	x29, sp
 188:	stp	x19, x20, [sp, #16]
 18c:	mov	x20, x0
 190:	mov	x19, x1
 194:	add	x0, sp, #0x28
 198:	add	x1, sp, #0x2c
 19c:	bl	0 <gomp_ialias_omp_get_schedule>
 1a0:	ldr	w0, [sp, #40]
 1a4:	and	w0, w0, #0x7fffffff
 1a8:	str	w0, [x20]
 1ac:	ldrsw	x0, [sp, #44]
 1b0:	str	x0, [x19]
 1b4:	ldp	x19, x20, [sp, #16]
 1b8:	ldp	x29, x30, [sp], #48
 1bc:	ret

00000000000001c0 <omp_get_thread_limit_>:
 1c0:	b	0 <gomp_ialias_omp_get_thread_limit>

00000000000001c4 <omp_set_max_active_levels_>:
 1c4:	ldr	w0, [x0]
 1c8:	b	0 <gomp_ialias_omp_set_max_active_levels>

00000000000001cc <omp_set_max_active_levels_8_>:
 1cc:	ldr	x0, [x0]
 1d0:	mov	x1, #0xffffffff80000001    	// #-2147483647
 1d4:	cmp	x0, x1
 1d8:	b.lt	1ec <omp_set_max_active_levels_8_+0x20>  // b.tstop
 1dc:	mov	x1, #0x7fffffff            	// #2147483647
 1e0:	cmp	x0, x1
 1e4:	csel	x0, x0, x1, le
 1e8:	b	0 <gomp_ialias_omp_set_max_active_levels>
 1ec:	mov	w0, #0x80000000            	// #-2147483648
 1f0:	b	1e8 <omp_set_max_active_levels_8_+0x1c>

00000000000001f4 <omp_get_max_active_levels_>:
 1f4:	b	0 <gomp_ialias_omp_get_max_active_levels>

00000000000001f8 <omp_get_level_>:
 1f8:	b	0 <gomp_ialias_omp_get_level>

00000000000001fc <omp_get_ancestor_thread_num_>:
 1fc:	ldr	w0, [x0]
 200:	b	0 <gomp_ialias_omp_get_ancestor_thread_num>

0000000000000204 <omp_get_ancestor_thread_num_8_>:
 204:	ldr	x0, [x0]
 208:	mov	x1, #0xffffffff80000001    	// #-2147483647
 20c:	cmp	x0, x1
 210:	b.lt	224 <omp_get_ancestor_thread_num_8_+0x20>  // b.tstop
 214:	mov	x1, #0x7fffffff            	// #2147483647
 218:	cmp	x0, x1
 21c:	csel	x0, x0, x1, le
 220:	b	0 <gomp_ialias_omp_get_ancestor_thread_num>
 224:	mov	w0, #0x80000000            	// #-2147483648
 228:	b	220 <omp_get_ancestor_thread_num_8_+0x1c>

000000000000022c <omp_get_team_size_>:
 22c:	ldr	w0, [x0]
 230:	b	0 <gomp_ialias_omp_get_team_size>

0000000000000234 <omp_get_team_size_8_>:
 234:	ldr	x0, [x0]
 238:	mov	x1, #0xffffffff80000001    	// #-2147483647
 23c:	cmp	x0, x1
 240:	b.lt	254 <omp_get_team_size_8_+0x20>  // b.tstop
 244:	mov	x1, #0x7fffffff            	// #2147483647
 248:	cmp	x0, x1
 24c:	csel	x0, x0, x1, le
 250:	b	0 <gomp_ialias_omp_get_team_size>
 254:	mov	w0, #0x80000000            	// #-2147483648
 258:	b	250 <omp_get_team_size_8_+0x1c>

000000000000025c <omp_get_active_level_>:
 25c:	b	0 <gomp_ialias_omp_get_active_level>

0000000000000260 <omp_in_final_>:
 260:	b	0 <gomp_ialias_omp_in_final>

0000000000000264 <omp_get_cancellation_>:
 264:	b	0 <gomp_ialias_omp_get_cancellation>

0000000000000268 <omp_get_proc_bind_>:
 268:	b	0 <gomp_ialias_omp_get_proc_bind>

000000000000026c <omp_get_num_places_>:
 26c:	b	0 <gomp_ialias_omp_get_num_places>

0000000000000270 <omp_get_place_num_procs_>:
 270:	ldr	w0, [x0]
 274:	b	0 <gomp_ialias_omp_get_place_num_procs>

0000000000000278 <omp_get_place_num_procs_8_>:
 278:	ldr	x0, [x0]
 27c:	mov	x1, #0xffffffff80000001    	// #-2147483647
 280:	cmp	x0, x1
 284:	b.lt	298 <omp_get_place_num_procs_8_+0x20>  // b.tstop
 288:	mov	x1, #0x7fffffff            	// #2147483647
 28c:	cmp	x0, x1
 290:	csel	x0, x0, x1, le
 294:	b	0 <gomp_ialias_omp_get_place_num_procs>
 298:	mov	w0, #0x80000000            	// #-2147483648
 29c:	b	294 <omp_get_place_num_procs_8_+0x1c>

00000000000002a0 <omp_get_place_proc_ids_>:
 2a0:	ldr	w0, [x0]
 2a4:	b	0 <gomp_ialias_omp_get_place_proc_ids>

00000000000002a8 <omp_get_place_proc_ids_8_>:
 2a8:	ldr	x0, [x0]
 2ac:	mov	x2, #0xffffffff80000001    	// #-2147483647
 2b0:	cmp	x0, x2
 2b4:	b.lt	2c8 <omp_get_place_proc_ids_8_+0x20>  // b.tstop
 2b8:	mov	x2, #0x7fffffff            	// #2147483647
 2bc:	cmp	x0, x2
 2c0:	csel	x0, x0, x2, le
 2c4:	b	0 <gomp_get_place_proc_ids_8>
 2c8:	mov	w0, #0x80000000            	// #-2147483648
 2cc:	b	2c4 <omp_get_place_proc_ids_8_+0x1c>

00000000000002d0 <omp_get_place_num_>:
 2d0:	b	0 <gomp_ialias_omp_get_place_num>

00000000000002d4 <omp_get_partition_num_places_>:
 2d4:	b	0 <gomp_ialias_omp_get_partition_num_places>

00000000000002d8 <omp_get_partition_place_nums_>:
 2d8:	b	0 <gomp_ialias_omp_get_partition_place_nums>

00000000000002dc <omp_get_partition_place_nums_8_>:
 2dc:	stp	x29, x30, [sp, #-48]!
 2e0:	mov	x29, sp
 2e4:	stp	x19, x20, [sp, #16]
 2e8:	mov	x20, x0
 2ec:	adrp	x0, 0 <gomp_places_list>
 2f0:	str	x21, [sp, #32]
 2f4:	ldr	x0, [x0]
 2f8:	cbz	x0, 32c <omp_get_partition_place_nums_8_+0x50>
 2fc:	adrp	x21, 0 <gomp_tls_data>
 300:	ldr	x21, [x21]
 304:	mrs	x19, tpidr_el0
 308:	add	x0, x19, x21
 30c:	ldr	w0, [x0, #92]
 310:	cbnz	w0, 318 <omp_get_partition_place_nums_8_+0x3c>
 314:	bl	0 <gomp_init_affinity>
 318:	add	x19, x19, x21
 31c:	mov	x1, #0x0                   	// #0
 320:	ldp	w2, w0, [x19, #52]
 324:	cmp	w0, w1
 328:	b.hi	33c <omp_get_partition_place_nums_8_+0x60>  // b.pmore
 32c:	ldp	x19, x20, [sp, #16]
 330:	ldr	x21, [sp, #32]
 334:	ldp	x29, x30, [sp], #48
 338:	ret
 33c:	add	x3, x2, x1
 340:	str	x3, [x20, x1, lsl #3]
 344:	add	x1, x1, #0x1
 348:	b	324 <omp_get_partition_place_nums_8_+0x48>

000000000000034c <omp_set_default_device_>:
 34c:	ldr	w0, [x0]
 350:	b	0 <gomp_ialias_omp_set_default_device>

0000000000000354 <omp_set_default_device_8_>:
 354:	ldr	x0, [x0]
 358:	mov	x1, #0xffffffff80000001    	// #-2147483647
 35c:	cmp	x0, x1
 360:	b.lt	374 <omp_set_default_device_8_+0x20>  // b.tstop
 364:	mov	x1, #0x7fffffff            	// #2147483647
 368:	cmp	x0, x1
 36c:	csel	x0, x0, x1, le
 370:	b	0 <gomp_ialias_omp_set_default_device>
 374:	mov	w0, #0x80000000            	// #-2147483648
 378:	b	370 <omp_set_default_device_8_+0x1c>

000000000000037c <omp_get_default_device_>:
 37c:	b	0 <gomp_ialias_omp_get_default_device>

0000000000000380 <omp_get_num_devices_>:
 380:	b	0 <gomp_ialias_omp_get_num_devices>

0000000000000384 <omp_get_num_teams_>:
 384:	b	0 <gomp_ialias_omp_get_num_teams>

0000000000000388 <omp_get_team_num_>:
 388:	b	0 <gomp_ialias_omp_get_team_num>

000000000000038c <omp_is_initial_device_>:
 38c:	b	0 <gomp_ialias_omp_is_initial_device>

0000000000000390 <omp_get_initial_device_>:
 390:	b	0 <gomp_ialias_omp_get_initial_device>

0000000000000394 <omp_get_max_task_priority_>:
 394:	b	0 <gomp_ialias_omp_get_max_task_priority>

0000000000000398 <omp_set_affinity_format_>:
 398:	b	0 <gomp_set_affinity_format>

000000000000039c <omp_get_affinity_format_>:
 39c:	stp	x29, x30, [sp, #-48]!
 3a0:	mov	x29, sp
 3a4:	stp	x21, x22, [sp, #32]
 3a8:	mov	x21, x0
 3ac:	adrp	x0, 0 <gomp_affinity_format_var>
 3b0:	stp	x19, x20, [sp, #16]
 3b4:	mov	x20, x1
 3b8:	ldr	x22, [x0]
 3bc:	mov	x0, x22
 3c0:	bl	0 <strlen>
 3c4:	mov	x19, x0
 3c8:	cbz	x20, 3f4 <omp_get_affinity_format_+0x58>
 3cc:	cmp	x0, x20
 3d0:	b.cs	408 <omp_get_affinity_format_+0x6c>  // b.hs, b.nlast
 3d4:	mov	x2, x0
 3d8:	mov	x1, x22
 3dc:	mov	x0, x21
 3e0:	bl	0 <memcpy>
 3e4:	sub	x2, x20, x19
 3e8:	add	x0, x21, x19
 3ec:	mov	w1, #0x20                  	// #32
 3f0:	bl	0 <memset>
 3f4:	mov	w0, w19
 3f8:	ldp	x19, x20, [sp, #16]
 3fc:	ldp	x21, x22, [sp, #32]
 400:	ldp	x29, x30, [sp], #48
 404:	ret
 408:	mov	x2, x20
 40c:	mov	x1, x22
 410:	mov	x0, x21
 414:	bl	0 <memcpy>
 418:	b	3f4 <omp_get_affinity_format_+0x58>

000000000000041c <omp_display_affinity_>:
 41c:	sub	sp, sp, #0x360
 420:	stp	x29, x30, [sp]
 424:	mov	x29, sp
 428:	stp	x19, x20, [sp, #16]
 42c:	mov	x20, x1
 430:	stp	x21, x22, [sp, #32]
 434:	stp	x23, x24, [sp, #48]
 438:	stp	x25, x26, [sp, #64]
 43c:	str	x27, [sp, #80]
 440:	cbz	x1, 568 <omp_display_affinity_+0x14c>
 444:	mov	x21, x0
 448:	cmp	x1, #0xff
 44c:	b.ls	50c <omp_display_affinity_+0xf0>  // b.plast
 450:	add	x0, x1, #0x1
 454:	bl	0 <gomp_malloc>
 458:	mov	x19, x0
 45c:	mov	x1, x21
 460:	mov	x21, x19
 464:	mov	x2, x20
 468:	mov	x0, x19
 46c:	bl	0 <memcpy>
 470:	strb	wzr, [x19, x20]
 474:	bl	0 <pthread_self>
 478:	adrp	x23, 0 <gomp_tls_data>
 47c:	ldr	x23, [x23]
 480:	mrs	x1, tpidr_el0
 484:	add	x24, sp, #0x160
 488:	add	x23, x1, x23
 48c:	mov	x3, x0
 490:	add	x27, x23, #0x10
 494:	mov	x2, x19
 498:	mov	x25, x0
 49c:	mov	x4, x27
 4a0:	ldr	w5, [x23, #92]
 4a4:	mov	x0, x24
 4a8:	mov	x1, #0x200                 	// #512
 4ac:	bl	0 <gomp_display_affinity>
 4b0:	mov	x19, x0
 4b4:	cmp	x0, #0x1ff
 4b8:	add	x26, x0, #0x1
 4bc:	b.hi	514 <omp_display_affinity_+0xf8>  // b.pmore
 4c0:	mov	w0, #0xa                   	// #10
 4c4:	mov	x1, x26
 4c8:	strb	w0, [x24, x19]
 4cc:	mov	x0, x24
 4d0:	bl	0 <gomp_print_string>
 4d4:	cbz	x21, 4ec <omp_display_affinity_+0xd0>
 4d8:	add	x0, sp, #0x60
 4dc:	cmp	x21, x0
 4e0:	b.eq	4ec <omp_display_affinity_+0xd0>  // b.none
 4e4:	mov	x0, x21
 4e8:	bl	0 <free>
 4ec:	ldp	x29, x30, [sp]
 4f0:	ldp	x19, x20, [sp, #16]
 4f4:	ldp	x21, x22, [sp, #32]
 4f8:	ldp	x23, x24, [sp, #48]
 4fc:	ldp	x25, x26, [sp, #64]
 500:	ldr	x27, [sp, #80]
 504:	add	sp, sp, #0x360
 508:	ret
 50c:	add	x19, sp, #0x60
 510:	b	45c <omp_display_affinity_+0x40>
 514:	mov	x0, x26
 518:	bl	0 <gomp_malloc>
 51c:	mov	x22, x0
 520:	adrp	x0, 0 <gomp_affinity_format_var>
 524:	ldr	w5, [x23, #92]
 528:	cmp	x20, #0x0
 52c:	ldr	x2, [x0]
 530:	mov	x4, x27
 534:	mov	x3, x25
 538:	mov	x0, x24
 53c:	csel	x2, x2, x21, eq  // eq = none
 540:	mov	x1, #0x200                 	// #512
 544:	bl	0 <gomp_display_affinity>
 548:	mov	x1, x26
 54c:	mov	w0, #0xa                   	// #10
 550:	strb	w0, [x22, x19]
 554:	mov	x0, x22
 558:	bl	0 <gomp_print_string>
 55c:	mov	x0, x22
 560:	bl	0 <free>
 564:	b	4d4 <omp_display_affinity_+0xb8>
 568:	adrp	x0, 0 <gomp_affinity_format_var>
 56c:	mov	x21, #0x0                   	// #0
 570:	ldr	x19, [x0]
 574:	b	474 <omp_display_affinity_+0x58>

0000000000000578 <omp_capture_affinity_>:
 578:	stp	x29, x30, [sp, #-320]!
 57c:	mov	x29, sp
 580:	stp	x19, x20, [sp, #16]
 584:	stp	x21, x22, [sp, #32]
 588:	mov	x22, x0
 58c:	mov	x21, x2
 590:	str	x23, [sp, #48]
 594:	cbz	x3, 650 <omp_capture_affinity_+0xd8>
 598:	mov	x23, x1
 59c:	mov	x20, x3
 5a0:	cmp	x3, #0xff
 5a4:	b.ls	648 <omp_capture_affinity_+0xd0>  // b.plast
 5a8:	add	x0, x3, #0x1
 5ac:	bl	0 <gomp_malloc>
 5b0:	mov	x19, x0
 5b4:	mov	x2, x20
 5b8:	mov	x1, x23
 5bc:	mov	x0, x19
 5c0:	bl	0 <memcpy>
 5c4:	strb	wzr, [x19, x20]
 5c8:	mov	x20, x19
 5cc:	bl	0 <pthread_self>
 5d0:	mov	x3, x0
 5d4:	adrp	x4, 0 <gomp_tls_data>
 5d8:	ldr	x4, [x4]
 5dc:	mrs	x1, tpidr_el0
 5e0:	mov	x2, x19
 5e4:	mov	x0, x22
 5e8:	add	x4, x1, x4
 5ec:	mov	x1, x21
 5f0:	add	x4, x4, #0x10
 5f4:	ldr	w5, [x4, #76]
 5f8:	bl	0 <gomp_display_affinity>
 5fc:	mov	x19, x0
 600:	cbz	x20, 618 <omp_capture_affinity_+0xa0>
 604:	add	x0, sp, #0x40
 608:	cmp	x20, x0
 60c:	b.eq	618 <omp_capture_affinity_+0xa0>  // b.none
 610:	mov	x0, x20
 614:	bl	0 <free>
 618:	cmp	x21, x19
 61c:	b.ls	630 <omp_capture_affinity_+0xb8>  // b.plast
 620:	sub	x2, x21, x19
 624:	add	x0, x22, x19
 628:	mov	w1, #0x20                  	// #32
 62c:	bl	0 <memset>
 630:	mov	w0, w19
 634:	ldp	x19, x20, [sp, #16]
 638:	ldp	x21, x22, [sp, #32]
 63c:	ldr	x23, [sp, #48]
 640:	ldp	x29, x30, [sp], #320
 644:	ret
 648:	add	x19, sp, #0x40
 64c:	b	5b4 <omp_capture_affinity_+0x3c>
 650:	adrp	x0, 0 <gomp_affinity_format_var>
 654:	mov	x20, #0x0                   	// #0
 658:	ldr	x19, [x0]
 65c:	b	5cc <omp_capture_affinity_+0x54>

0000000000000660 <omp_pause_resource_>:
 660:	ldr	w0, [x0]
 664:	ldr	w1, [x1]
 668:	b	0 <gomp_ialias_omp_pause_resource>

000000000000066c <omp_pause_resource_all_>:
 66c:	ldr	w0, [x0]
 670:	b	0 <gomp_ialias_omp_pause_resource_all>

affinity.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_init_thread_affinity>:
   0:	adrp	x2, 0 <gomp_places_list>
   4:	ldr	x2, [x2]
   8:	ldr	x2, [x2, w1, uxtw #3]
   c:	adrp	x1, 0 <gomp_cpuset_size>
  10:	ldr	x1, [x1]
  14:	b	0 <pthread_attr_setaffinity_np>

0000000000000018 <gomp_affinity_alloc>:
  18:	stp	x29, x30, [sp, #-48]!
  1c:	mov	x29, sp
  20:	stp	x19, x20, [sp, #16]
  24:	mov	x20, x0
  28:	adrp	x0, 0 <gomp_cpusetp>
  2c:	stp	x21, x22, [sp, #32]
  30:	and	w22, w1, #0xff
  34:	ldr	x19, [x0]
  38:	cbnz	x19, 68 <gomp_affinity_alloc+0x50>
  3c:	cbz	w22, 58 <gomp_affinity_alloc+0x40>
  40:	mov	x19, #0x0                   	// #0
  44:	mov	x0, x19
  48:	ldp	x19, x20, [sp, #16]
  4c:	ldp	x21, x22, [sp, #32]
  50:	ldp	x29, x30, [sp], #48
  54:	ret
  58:	adrp	x0, 0 <gomp_init_thread_affinity>
  5c:	add	x0, x0, #0x0
  60:	bl	0 <gomp_error>
  64:	b	44 <gomp_affinity_alloc+0x2c>
  68:	adrp	x0, 0 <gomp_cpuset_size>
  6c:	ldr	x21, [x0]
  70:	add	x0, x21, #0x8
  74:	mul	x0, x0, x20
  78:	bl	0 <malloc>
  7c:	mov	x19, x0
  80:	cbnz	x0, 94 <gomp_affinity_alloc+0x7c>
  84:	cbnz	w22, 40 <gomp_affinity_alloc+0x28>
  88:	adrp	x0, 0 <gomp_init_thread_affinity>
  8c:	add	x0, x0, #0x0
  90:	b	60 <gomp_affinity_alloc+0x48>
  94:	add	x1, x0, x20, lsl #3
  98:	mov	x0, #0x0                   	// #0
  9c:	cmp	x0, x20
  a0:	b.eq	44 <gomp_affinity_alloc+0x2c>  // b.none
  a4:	str	x1, [x19, x0, lsl #3]
  a8:	add	x0, x0, #0x1
  ac:	add	x1, x1, x21
  b0:	b	9c <gomp_affinity_alloc+0x84>

00000000000000b4 <gomp_affinity_init_place>:
  b4:	adrp	x1, 0 <gomp_cpuset_size>
  b8:	ldr	x2, [x1]
  bc:	mov	w1, #0x0                   	// #0
  c0:	b	0 <memset>

00000000000000c4 <gomp_affinity_add_cpus>:
  c4:	stp	x29, x30, [sp, #-32]!
  c8:	mov	x5, x2
  cc:	mov	x2, x3
  d0:	adrp	x3, 0 <gomp_cpuset_size>
  d4:	mov	x29, sp
  d8:	mov	x9, #0x1                   	// #1
  dc:	ldr	x6, [x3]
  e0:	str	x19, [sp, #16]
  e4:	and	w19, w4, #0xff
  e8:	lsl	x6, x6, #3
  ec:	cmp	x1, x6
  f0:	b.cc	11c <gomp_affinity_add_cpus+0x58>  // b.lo, b.ul, b.last
  f4:	cbz	w19, 10c <gomp_affinity_add_cpus+0x48>
  f8:	mov	w19, #0x0                   	// #0
  fc:	mov	w0, w19
 100:	ldr	x19, [sp, #16]
 104:	ldp	x29, x30, [sp], #32
 108:	ret
 10c:	adrp	x0, 0 <gomp_init_thread_affinity>
 110:	add	x0, x0, #0x0
 114:	bl	0 <gomp_error>
 118:	b	fc <gomp_affinity_add_cpus+0x38>
 11c:	ldr	x4, [x3]
 120:	cmp	x4, x1, lsr #3
 124:	b.ls	140 <gomp_affinity_add_cpus+0x7c>  // b.plast
 128:	lsr	x4, x1, #6
 12c:	lsl	x7, x9, x1
 130:	lsl	x4, x4, #3
 134:	ldr	x8, [x0, x4]
 138:	orr	x7, x8, x7
 13c:	str	x7, [x0, x4]
 140:	subs	x5, x5, #0x1
 144:	b.eq	184 <gomp_affinity_add_cpus+0xc0>  // b.none
 148:	cmp	x2, #0x0
 14c:	add	x4, x1, x2
 150:	b.ge	170 <gomp_affinity_add_cpus+0xac>  // b.tcont
 154:	cmp	x1, x4
 158:	b.cs	17c <gomp_affinity_add_cpus+0xb8>  // b.hs, b.nlast
 15c:	cbnz	w19, f8 <gomp_affinity_add_cpus+0x34>
 160:	adrp	x0, 0 <gomp_init_thread_affinity>
 164:	add	x0, x0, #0x0
 168:	bl	0 <gomp_error>
 16c:	b	fc <gomp_affinity_add_cpus+0x38>
 170:	b.eq	17c <gomp_affinity_add_cpus+0xb8>  // b.none
 174:	cmp	x1, x4
 178:	b.hi	15c <gomp_affinity_add_cpus+0x98>  // b.pmore
 17c:	mov	x1, x4
 180:	b	ec <gomp_affinity_add_cpus+0x28>
 184:	mov	w19, #0x1                   	// #1
 188:	b	fc <gomp_affinity_add_cpus+0x38>

000000000000018c <gomp_affinity_init_level_1>:
 18c:	stp	x29, x30, [sp, #-208]!
 190:	cmp	w1, #0x3
 194:	mov	x29, sp
 198:	stp	x25, x26, [sp, #64]
 19c:	adrp	x25, 0 <gomp_cpuset_size>
 1a0:	stp	x21, x22, [sp, #32]
 1a4:	mov	w22, w0
 1a8:	and	w0, w5, #0xff
 1ac:	str	w0, [sp, #164]
 1b0:	mov	x21, #0x0                   	// #0
 1b4:	ldr	x0, [x25]
 1b8:	stp	x19, x20, [sp, #16]
 1bc:	adrp	x20, 0 <gomp_places_list_len>
 1c0:	mov	x19, x3
 1c4:	add	x20, x20, #0x0
 1c8:	lsl	x0, x0, #3
 1cc:	stp	x23, x24, [sp, #48]
 1d0:	mov	w24, w1
 1d4:	adrp	x1, 0 <gomp_init_thread_affinity>
 1d8:	add	x1, x1, #0x0
 1dc:	str	x0, [sp, #152]
 1e0:	adrp	x0, 0 <gomp_init_thread_affinity>
 1e4:	add	x0, x0, #0x0
 1e8:	stp	x27, x28, [sp, #80]
 1ec:	csel	x0, x1, x0, eq  // eq = none
 1f0:	str	x4, [sp, #112]
 1f4:	str	x2, [sp, #136]
 1f8:	str	x0, [sp, #144]
 1fc:	stp	xzr, xzr, [sp, #184]
 200:	ldr	x0, [sp, #152]
 204:	cmp	x21, x0
 208:	b.eq	21c <gomp_affinity_init_level_1+0x90>  // b.none
 20c:	ldr	x0, [x20]
 210:	ldr	x1, [sp, #136]
 214:	cmp	x0, x1
 218:	b.cc	240 <gomp_affinity_init_level_1+0xb4>  // b.lo, b.ul, b.last
 21c:	ldr	x0, [sp, #184]
 220:	bl	0 <free>
 224:	ldp	x19, x20, [sp, #16]
 228:	ldp	x21, x22, [sp, #32]
 22c:	ldp	x23, x24, [sp, #48]
 230:	ldp	x25, x26, [sp, #64]
 234:	ldp	x27, x28, [sp, #80]
 238:	ldp	x29, x30, [sp], #208
 23c:	ret
 240:	lsr	x0, x21, #3
 244:	str	x0, [sp, #120]
 248:	ldr	x0, [x25]
 24c:	cmp	x0, x21, lsr #3
 250:	b.ls	2d0 <gomp_affinity_init_level_1+0x144>  // b.plast
 254:	lsr	x23, x21, #6
 258:	and	w0, w21, #0x3f
 25c:	str	w0, [sp, #160]
 260:	lsl	x23, x23, #3
 264:	ldrb	w1, [sp, #160]
 268:	ldr	x0, [x19, x23]
 26c:	lsr	x0, x0, x1
 270:	tbz	w0, #0, 2d0 <gomp_affinity_init_level_1+0x144>
 274:	ldr	x3, [sp, #144]
 278:	mov	x2, x21
 27c:	ldr	x0, [sp, #112]
 280:	adrp	x1, 0 <gomp_init_thread_affinity>
 284:	add	x1, x1, #0x0
 288:	add	x0, x0, #0x1b
 28c:	bl	0 <sprintf>
 290:	ldr	x0, [sp, #112]
 294:	adrp	x1, 0 <gomp_init_thread_affinity>
 298:	add	x1, x1, #0x0
 29c:	bl	0 <fopen>
 2a0:	mov	x27, x0
 2a4:	cbnz	x0, 2d8 <gomp_affinity_init_level_1+0x14c>
 2a8:	ldr	x0, [x25]
 2ac:	lsr	x1, x21, #3
 2b0:	cmp	x1, x0
 2b4:	b.cs	2d0 <gomp_affinity_init_level_1+0x144>  // b.hs, b.nlast
 2b8:	ldrb	w1, [sp, #160]
 2bc:	mov	x0, #0x1                   	// #1
 2c0:	lsl	x0, x0, x1
 2c4:	ldr	x1, [x19, x23]
 2c8:	bic	x0, x1, x0
 2cc:	str	x0, [x19, x23]
 2d0:	add	x21, x21, #0x1
 2d4:	b	200 <gomp_affinity_init_level_1+0x74>
 2d8:	mov	x2, x0
 2dc:	add	x1, sp, #0xc0
 2e0:	add	x0, sp, #0xb8
 2e4:	bl	0 <getline>
 2e8:	cmp	x0, #0x0
 2ec:	b.le	3a4 <gomp_affinity_init_level_1+0x218>
 2f0:	ldr	x0, [sp, #184]
 2f4:	str	x0, [sp, #200]
 2f8:	adrp	x0, 0 <gomp_places_list>
 2fc:	cmp	w24, w22
 300:	ldr	x1, [x20]
 304:	ldr	x0, [x0]
 308:	ldr	x28, [x0, x1, lsl #3]
 30c:	b.ne	318 <gomp_affinity_init_level_1+0x18c>  // b.any
 310:	mov	x0, x28
 314:	bl	b4 <gomp_affinity_init_place>
 318:	ldr	x4, [sp, #200]
 31c:	ldrb	w0, [x4]
 320:	cmp	w0, #0x0
 324:	ccmp	w0, #0xa, #0x4, ne  // ne = any
 328:	b.eq	364 <gomp_affinity_init_level_1+0x1d8>  // b.none
 32c:	str	x4, [sp, #128]
 330:	bl	0 <__errno_location>
 334:	mov	x3, x0
 338:	add	x1, sp, #0xc8
 33c:	ldr	x4, [sp, #128]
 340:	mov	w2, #0xa                   	// #10
 344:	str	wzr, [x3]
 348:	mov	x0, x4
 34c:	str	x3, [sp, #104]
 350:	bl	0 <strtoul>
 354:	mov	x26, x0
 358:	ldr	x3, [sp, #104]
 35c:	ldr	w0, [x3]
 360:	cbz	w0, 3b0 <gomp_affinity_init_level_1+0x224>
 364:	ldr	x1, [x25]
 368:	cmp	w24, w22
 36c:	b.ne	534 <gomp_affinity_init_level_1+0x3a8>  // b.any
 370:	ldr	x0, [sp, #120]
 374:	cmp	x0, x1
 378:	b.cs	528 <gomp_affinity_init_level_1+0x39c>  // b.hs, b.nlast
 37c:	ldr	x0, [x19, x23]
 380:	ldrb	w2, [sp, #160]
 384:	lsr	x0, x0, x2
 388:	tbz	w0, #0, 528 <gomp_affinity_init_level_1+0x39c>
 38c:	ldrb	w1, [sp, #160]
 390:	mov	x0, #0x1                   	// #1
 394:	lsl	x0, x0, x1
 398:	ldr	x1, [x19, x23]
 39c:	bic	x0, x1, x0
 3a0:	str	x0, [x19, x23]
 3a4:	mov	x0, x27
 3a8:	bl	0 <fclose>
 3ac:	b	2d0 <gomp_affinity_init_level_1+0x144>
 3b0:	ldr	x0, [sp, #200]
 3b4:	ldrb	w1, [x0]
 3b8:	cmp	w1, #0x2d
 3bc:	b.ne	520 <gomp_affinity_init_level_1+0x394>  // b.any
 3c0:	add	x1, sp, #0xc8
 3c4:	add	x0, x0, #0x1
 3c8:	mov	w2, #0xa                   	// #10
 3cc:	str	x3, [sp, #128]
 3d0:	bl	0 <strtoul>
 3d4:	str	x0, [sp, #104]
 3d8:	ldr	x3, [sp, #128]
 3dc:	ldr	w0, [x3]
 3e0:	cbnz	w0, 364 <gomp_affinity_init_level_1+0x1d8>
 3e4:	ldr	x0, [sp, #104]
 3e8:	cmp	x26, x0
 3ec:	b.hi	364 <gomp_affinity_init_level_1+0x1d8>  // b.pmore
 3f0:	ldr	x0, [sp, #104]
 3f4:	cmp	x26, x0
 3f8:	b.ls	418 <gomp_affinity_init_level_1+0x28c>  // b.plast
 3fc:	ldr	x0, [sp, #200]
 400:	ldrb	w1, [x0]
 404:	cmp	w1, #0x2c
 408:	b.ne	318 <gomp_affinity_init_level_1+0x18c>  // b.any
 40c:	add	x0, x0, #0x1
 410:	str	x0, [sp, #200]
 414:	b	318 <gomp_affinity_init_level_1+0x18c>
 418:	lsr	x0, x26, #3
 41c:	str	x0, [sp, #128]
 420:	adrp	x0, 0 <gomp_cpuset_size>
 424:	add	x0, x0, #0x0
 428:	ldr	x0, [x0]
 42c:	cmp	x0, x26, lsr #3
 430:	b.ls	47c <gomp_affinity_init_level_1+0x2f0>  // b.plast
 434:	lsr	x5, x26, #6
 438:	and	w0, w26, #0x3f
 43c:	str	w0, [sp, #128]
 440:	lsl	x5, x5, #3
 444:	ldrb	w1, [sp, #128]
 448:	ldr	x0, [x19, x5]
 44c:	lsr	x0, x0, x1
 450:	tbz	w0, #0, 47c <gomp_affinity_init_level_1+0x2f0>
 454:	cmp	w24, #0x3
 458:	ccmp	w24, w22, #0x4, eq  // eq = none
 45c:	b.le	484 <gomp_affinity_init_level_1+0x2f8>
 460:	ldrb	w5, [sp, #164]
 464:	mov	x3, x19
 468:	ldr	x4, [sp, #112]
 46c:	mov	w0, w22
 470:	ldr	x2, [sp, #136]
 474:	mov	w1, #0x2                   	// #2
 478:	bl	18c <gomp_affinity_init_level_1>
 47c:	add	x26, x26, #0x1
 480:	b	3f0 <gomp_affinity_init_level_1+0x264>
 484:	cmp	w22, #0x1
 488:	b.ne	4b0 <gomp_affinity_init_level_1+0x324>  // b.any
 48c:	adrp	x0, 0 <gomp_places_list>
 490:	add	x0, x0, #0x0
 494:	ldr	x1, [x20]
 498:	str	x5, [sp, #168]
 49c:	ldr	x0, [x0]
 4a0:	ldr	x28, [x0, x1, lsl #3]
 4a4:	mov	x0, x28
 4a8:	bl	b4 <gomp_affinity_init_place>
 4ac:	ldr	x5, [sp, #168]
 4b0:	mov	x1, x26
 4b4:	mov	x0, x28
 4b8:	mov	w4, #0x1                   	// #1
 4bc:	mov	x3, #0x0                   	// #0
 4c0:	mov	x2, #0x1                   	// #1
 4c4:	str	x5, [sp, #168]
 4c8:	bl	c4 <gomp_affinity_add_cpus>
 4cc:	tst	w0, #0xff
 4d0:	b.eq	47c <gomp_affinity_init_level_1+0x2f0>  // b.none
 4d4:	adrp	x0, 0 <gomp_cpuset_size>
 4d8:	add	x0, x0, #0x0
 4dc:	lsr	x1, x26, #3
 4e0:	ldr	x0, [x0]
 4e4:	cmp	x1, x0
 4e8:	b.cs	508 <gomp_affinity_init_level_1+0x37c>  // b.hs, b.nlast
 4ec:	ldr	x5, [sp, #168]
 4f0:	mov	x0, #0x1                   	// #1
 4f4:	ldrb	w1, [sp, #128]
 4f8:	lsl	x0, x0, x1
 4fc:	ldr	x1, [x19, x5]
 500:	bic	x0, x1, x0
 504:	str	x0, [x19, x5]
 508:	cmp	w22, #0x1
 50c:	b.ne	47c <gomp_affinity_init_level_1+0x2f0>  // b.any
 510:	ldr	x0, [x20]
 514:	add	x0, x0, #0x1
 518:	str	x0, [x20]
 51c:	b	47c <gomp_affinity_init_level_1+0x2f0>
 520:	str	x26, [sp, #104]
 524:	b	3f0 <gomp_affinity_init_level_1+0x264>
 528:	ldr	x0, [x20]
 52c:	add	x0, x0, #0x1
 530:	str	x0, [x20]
 534:	ldr	x0, [sp, #120]
 538:	cmp	x0, x1
 53c:	b.cs	3a4 <gomp_affinity_init_level_1+0x218>  // b.hs, b.nlast
 540:	b	38c <gomp_affinity_init_level_1+0x200>

0000000000000544 <gomp_affinity_remove_cpu>:
 544:	stp	x29, x30, [sp, #-16]!
 548:	mov	x4, x0
 54c:	adrp	x0, 0 <gomp_cpuset_size>
 550:	mov	x29, sp
 554:	ldr	x0, [x0]
 558:	cmp	x1, x0, lsl #3
 55c:	b.cc	578 <gomp_affinity_remove_cpu+0x34>  // b.lo, b.ul, b.last
 560:	adrp	x0, 0 <gomp_init_thread_affinity>
 564:	add	x0, x0, #0x0
 568:	bl	0 <gomp_error>
 56c:	mov	w0, #0x0                   	// #0
 570:	ldp	x29, x30, [sp], #16
 574:	ret
 578:	mov	x2, x1
 57c:	cmp	x0, x1, lsr #3
 580:	b.ls	59c <gomp_affinity_remove_cpu+0x58>  // b.plast
 584:	lsr	x3, x1, #6
 588:	and	w1, w1, #0x3f
 58c:	lsl	x3, x3, #3
 590:	ldr	x5, [x4, x3]
 594:	lsr	x0, x5, x1
 598:	tbnz	w0, #0, 5ac <gomp_affinity_remove_cpu+0x68>
 59c:	adrp	x0, 0 <gomp_init_thread_affinity>
 5a0:	mov	x1, x2
 5a4:	add	x0, x0, #0x0
 5a8:	b	568 <gomp_affinity_remove_cpu+0x24>
 5ac:	mov	x0, #0x1                   	// #1
 5b0:	lsl	x1, x0, x1
 5b4:	bic	x1, x5, x1
 5b8:	str	x1, [x4, x3]
 5bc:	b	570 <gomp_affinity_remove_cpu+0x2c>

00000000000005c0 <gomp_affinity_copy_place>:
 5c0:	stp	x29, x30, [sp, #-64]!
 5c4:	mov	x29, sp
 5c8:	stp	x21, x22, [sp, #32]
 5cc:	adrp	x21, 0 <gomp_cpuset_size>
 5d0:	mov	x22, x1
 5d4:	stp	x19, x20, [sp, #16]
 5d8:	mov	x19, x2
 5dc:	mov	w1, #0x0                   	// #0
 5e0:	ldr	x2, [x21]
 5e4:	mov	x20, x0
 5e8:	str	x23, [sp, #48]
 5ec:	lsl	x23, x2, #3
 5f0:	bl	0 <memset>
 5f4:	mov	x1, #0x0                   	// #0
 5f8:	mov	x5, #0x1                   	// #1
 5fc:	cmp	x1, x23
 600:	b.ne	60c <gomp_affinity_copy_place+0x4c>  // b.any
 604:	mov	w0, #0x1                   	// #1
 608:	b	658 <gomp_affinity_copy_place+0x98>
 60c:	ldr	x4, [x21]
 610:	cmp	x4, x1, lsr #3
 614:	b.ls	6a0 <gomp_affinity_copy_place+0xe0>  // b.plast
 618:	lsr	x0, x1, #6
 61c:	mov	w2, w1
 620:	ldr	x0, [x22, x0, lsl #3]
 624:	lsr	x0, x0, x1
 628:	tbz	w0, #0, 6a0 <gomp_affinity_copy_place+0xe0>
 62c:	adds	x3, x19, x1
 630:	cset	x0, cs  // cs = hs, nlast
 634:	cmp	x19, #0x0
 638:	b.ge	66c <gomp_affinity_copy_place+0xac>  // b.tcont
 63c:	cmp	x1, x3
 640:	b.cs	67c <gomp_affinity_copy_place+0xbc>  // b.hs, b.nlast
 644:	mov	x2, x19
 648:	adrp	x0, 0 <gomp_init_thread_affinity>
 64c:	add	x0, x0, #0x0
 650:	bl	0 <gomp_error>
 654:	mov	w0, #0x0                   	// #0
 658:	ldp	x19, x20, [sp, #16]
 65c:	ldp	x21, x22, [sp, #32]
 660:	ldr	x23, [sp, #48]
 664:	ldp	x29, x30, [sp], #64
 668:	ret
 66c:	b.eq	67c <gomp_affinity_copy_place+0xbc>  // b.none
 670:	cbnz	x0, 644 <gomp_affinity_copy_place+0x84>
 674:	cmp	x23, x3
 678:	b.ls	644 <gomp_affinity_copy_place+0x84>  // b.plast
 67c:	cmp	x4, x3, lsr #3
 680:	b.ls	6a0 <gomp_affinity_copy_place+0xe0>  // b.plast
 684:	lsr	x3, x3, #6
 688:	add	w2, w2, w19
 68c:	lsl	x3, x3, #3
 690:	lsl	x2, x5, x2
 694:	ldr	x0, [x20, x3]
 698:	orr	x2, x0, x2
 69c:	str	x2, [x20, x3]
 6a0:	add	x1, x1, #0x1
 6a4:	b	5fc <gomp_affinity_copy_place+0x3c>

00000000000006a8 <gomp_affinity_same_place>:
 6a8:	stp	x29, x30, [sp, #-16]!
 6ac:	adrp	x2, 0 <gomp_cpuset_size>
 6b0:	mov	x29, sp
 6b4:	ldr	x2, [x2]
 6b8:	bl	0 <memcmp>
 6bc:	cmp	w0, #0x0
 6c0:	cset	w0, eq  // eq = none
 6c4:	ldp	x29, x30, [sp], #16
 6c8:	ret

00000000000006cc <gomp_affinity_finalize_place_list>:
 6cc:	stp	x29, x30, [sp, #-80]!
 6d0:	mov	x29, sp
 6d4:	stp	x19, x20, [sp, #16]
 6d8:	and	w20, w0, #0xff
 6dc:	mov	x19, #0x0                   	// #0
 6e0:	stp	x21, x22, [sp, #32]
 6e4:	adrp	x22, 0 <gomp_places_list>
 6e8:	add	x22, x22, #0x0
 6ec:	stp	x23, x24, [sp, #48]
 6f0:	adrp	x24, 0 <gomp_places_list_len>
 6f4:	mov	x23, x24
 6f8:	mov	x21, #0x0                   	// #0
 6fc:	stp	x25, x26, [sp, #64]
 700:	adrp	x26, 0 <gomp_cpusetp>
 704:	ldr	x1, [x24]
 708:	cmp	x1, x21
 70c:	b.hi	740 <gomp_affinity_finalize_place_list+0x74>  // b.pmore
 710:	cbnz	x19, 7a4 <gomp_affinity_finalize_place_list+0xd8>
 714:	cbnz	w20, 7cc <gomp_affinity_finalize_place_list+0x100>
 718:	adrp	x0, 0 <gomp_init_thread_affinity>
 71c:	add	x0, x0, #0x0
 720:	bl	0 <gomp_error>
 724:	mov	w0, w20
 728:	ldp	x19, x20, [sp, #16]
 72c:	ldp	x21, x22, [sp, #32]
 730:	ldp	x23, x24, [sp, #48]
 734:	ldp	x25, x26, [sp, #64]
 738:	ldp	x29, x30, [sp], #80
 73c:	ret
 740:	adrp	x4, 0 <gomp_cpuset_size>
 744:	lsl	x25, x21, #3
 748:	ldr	x0, [x22]
 74c:	ldr	x2, [x4]
 750:	ldr	x5, [x26]
 754:	lsr	x2, x2, #3
 758:	ldr	x1, [x0, x25]
 75c:	mov	x0, #0x0                   	// #0
 760:	cmp	x0, x2
 764:	b.ne	78c <gomp_affinity_finalize_place_list+0xc0>  // b.any
 768:	ldr	x0, [x4]
 76c:	bl	0 <gomp_cpuset_popcount>
 770:	cbz	x0, 784 <gomp_affinity_finalize_place_list+0xb8>
 774:	ldr	x0, [x22]
 778:	ldr	x1, [x0, x25]
 77c:	str	x1, [x0, x19, lsl #3]
 780:	add	x19, x19, #0x1
 784:	add	x21, x21, #0x1
 788:	b	704 <gomp_affinity_finalize_place_list+0x38>
 78c:	ldr	x3, [x1, x0, lsl #3]
 790:	ldr	x6, [x5, x0, lsl #3]
 794:	and	x3, x3, x6
 798:	str	x3, [x1, x0, lsl #3]
 79c:	add	x0, x0, #0x1
 7a0:	b	760 <gomp_affinity_finalize_place_list+0x94>
 7a4:	cmp	x1, x19
 7a8:	b.ls	7c4 <gomp_affinity_finalize_place_list+0xf8>  // b.plast
 7ac:	cbnz	w20, 7c0 <gomp_affinity_finalize_place_list+0xf4>
 7b0:	adrp	x0, 0 <gomp_init_thread_affinity>
 7b4:	mov	x2, x19
 7b8:	add	x0, x0, #0x0
 7bc:	bl	0 <gomp_error>
 7c0:	str	x19, [x23]
 7c4:	mov	w20, #0x1                   	// #1
 7c8:	b	724 <gomp_affinity_finalize_place_list+0x58>
 7cc:	mov	w20, #0x0                   	// #0
 7d0:	b	724 <gomp_affinity_finalize_place_list+0x58>

00000000000007d4 <gomp_affinity_init_level>:
 7d4:	stp	x29, x30, [sp, #-176]!
 7d8:	mov	x29, sp
 7dc:	stp	x21, x22, [sp, #32]
 7e0:	adrp	x21, 0 <gomp_cpusetp>
 7e4:	and	w22, w2, #0xff
 7e8:	stp	x19, x20, [sp, #16]
 7ec:	mov	x19, x1
 7f0:	ldr	x1, [x21]
 7f4:	stp	x23, x24, [sp, #48]
 7f8:	mov	w23, w0
 7fc:	stp	x25, x26, [sp, #64]
 800:	cbz	x1, 818 <gomp_affinity_init_level+0x44>
 804:	adrp	x0, 0 <gomp_cpuset_size>
 808:	ldr	x0, [x0]
 80c:	bl	0 <gomp_cpuset_popcount>
 810:	cmp	x19, x0
 814:	csel	x19, x19, x0, ls  // ls = plast
 818:	adrp	x20, 0 <gomp_places_list>
 81c:	adrp	x24, 0 <gomp_places_list_len>
 820:	mov	w1, w22
 824:	mov	x0, x19
 828:	bl	18 <gomp_affinity_alloc>
 82c:	str	xzr, [x24]
 830:	str	x0, [x20]
 834:	cbz	x0, 8b0 <gomp_affinity_init_level+0xdc>
 838:	adrp	x0, 0 <gomp_cpuset_size>
 83c:	adrp	x1, 0 <gomp_init_thread_affinity>
 840:	add	x1, x1, #0x0
 844:	ldr	x26, [x0]
 848:	add	x0, x26, #0xf
 84c:	and	x0, x0, #0xfffffffffffffff0
 850:	sub	sp, sp, x0
 854:	add	x0, x29, #0x58
 858:	bl	0 <strcpy>
 85c:	mov	x25, sp
 860:	ldr	x1, [x21]
 864:	mov	x2, x26
 868:	mov	x0, x25
 86c:	bl	0 <memcpy>
 870:	mov	w0, w23
 874:	mov	w5, w22
 878:	add	x4, x29, #0x58
 87c:	mov	x3, x25
 880:	mov	x2, x19
 884:	mov	w1, #0x3                   	// #3
 888:	bl	18c <gomp_affinity_init_level_1>
 88c:	ldr	x0, [x24]
 890:	cbnz	x0, 8d0 <gomp_affinity_init_level+0xfc>
 894:	cbnz	w22, 8a4 <gomp_affinity_init_level+0xd0>
 898:	adrp	x0, 0 <gomp_init_thread_affinity>
 89c:	add	x0, x0, #0x0
 8a0:	bl	0 <gomp_error>
 8a4:	ldr	x0, [x20]
 8a8:	bl	0 <free>
 8ac:	str	xzr, [x20]
 8b0:	mov	w0, #0x0                   	// #0
 8b4:	mov	sp, x29
 8b8:	ldp	x19, x20, [sp, #16]
 8bc:	ldp	x21, x22, [sp, #32]
 8c0:	ldp	x23, x24, [sp, #48]
 8c4:	ldp	x25, x26, [sp, #64]
 8c8:	ldp	x29, x30, [sp], #176
 8cc:	ret
 8d0:	mov	w0, #0x1                   	// #1
 8d4:	b	8b4 <gomp_affinity_init_level+0xe0>

00000000000008d8 <gomp_init_affinity>:
 8d8:	stp	x29, x30, [sp, #-32]!
 8dc:	adrp	x0, 0 <gomp_places_list>
 8e0:	mov	x29, sp
 8e4:	ldr	x1, [x0]
 8e8:	str	x19, [sp, #16]
 8ec:	mov	x19, x0
 8f0:	cbz	x1, 940 <gomp_init_affinity+0x68>
 8f4:	bl	0 <pthread_self>
 8f8:	ldr	x1, [x19]
 8fc:	ldr	x2, [x1]
 900:	adrp	x1, 0 <gomp_cpuset_size>
 904:	ldr	x1, [x1]
 908:	bl	0 <pthread_setaffinity_np>
 90c:	adrp	x0, 0 <gomp_tls_data>
 910:	ldr	x0, [x0]
 914:	mrs	x1, tpidr_el0
 918:	add	x0, x1, x0
 91c:	mov	w1, #0x1                   	// #1
 920:	str	w1, [x0, #92]
 924:	adrp	x1, 0 <gomp_places_list_len>
 928:	str	wzr, [x0, #52]
 92c:	ldr	x1, [x1]
 930:	str	w1, [x0, #56]
 934:	ldr	x19, [sp, #16]
 938:	ldp	x29, x30, [sp], #32
 93c:	ret
 940:	mov	w2, #0x1                   	// #1
 944:	mov	x1, #0xffffffffffffffff    	// #-1
 948:	mov	w0, #0x1                   	// #1
 94c:	bl	7d4 <gomp_affinity_init_level>
 950:	tst	w0, #0xff
 954:	b.ne	8f4 <gomp_init_affinity+0x1c>  // b.any
 958:	b	934 <gomp_init_affinity+0x5c>

000000000000095c <gomp_affinity_print_place>:
 95c:	stp	x29, x30, [sp, #-96]!
 960:	mov	x29, sp
 964:	stp	x21, x22, [sp, #32]
 968:	adrp	x21, 0 <gomp_cpuset_size>
 96c:	ldr	x22, [x21]
 970:	stp	x23, x24, [sp, #48]
 974:	adrp	x24, 0 <gomp_init_thread_affinity>
 978:	mov	x23, x0
 97c:	add	x24, x24, #0x0
 980:	lsl	x22, x22, #3
 984:	stp	x25, x26, [sp, #64]
 988:	adrp	x26, 0 <gomp_init_thread_affinity>
 98c:	add	x26, x26, #0x0
 990:	adrp	x25, 0 <stderr>
 994:	stp	x19, x20, [sp, #16]
 998:	mov	x19, #0x0                   	// #0
 99c:	mov	x20, #0x0                   	// #0
 9a0:	str	x27, [sp, #80]
 9a4:	mov	w27, #0x0                   	// #0
 9a8:	cmp	x20, x22
 9ac:	b.ne	9e8 <gomp_affinity_print_place+0x8c>  // b.any
 9b0:	cmp	x19, #0x1
 9b4:	b.ls	a60 <gomp_affinity_print_place+0x104>  // b.plast
 9b8:	mov	x2, x19
 9bc:	adrp	x0, 0 <stderr>
 9c0:	ldp	x19, x20, [sp, #16]
 9c4:	adrp	x1, 0 <gomp_init_thread_affinity>
 9c8:	ldp	x21, x22, [sp, #32]
 9cc:	add	x1, x1, #0x0
 9d0:	ldp	x23, x24, [sp, #48]
 9d4:	ldp	x25, x26, [sp, #64]
 9d8:	ldr	x27, [sp, #80]
 9dc:	ldp	x29, x30, [sp], #96
 9e0:	ldr	x0, [x0]
 9e4:	b	0 <fprintf>
 9e8:	ldr	x0, [x21]
 9ec:	cmp	x0, x20, lsr #3
 9f0:	b.ls	a14 <gomp_affinity_print_place+0xb8>  // b.plast
 9f4:	lsr	x0, x20, #6
 9f8:	ldr	x0, [x23, x0, lsl #3]
 9fc:	lsr	x0, x0, x20
 a00:	tbz	w0, #0, a14 <gomp_affinity_print_place+0xb8>
 a04:	cbz	x19, a24 <gomp_affinity_print_place+0xc8>
 a08:	add	x19, x19, #0x1
 a0c:	add	x20, x20, #0x1
 a10:	b	9a8 <gomp_affinity_print_place+0x4c>
 a14:	cmp	x19, #0x1
 a18:	b.hi	a4c <gomp_affinity_print_place+0xf0>  // b.pmore
 a1c:	mov	x19, #0x0                   	// #0
 a20:	b	a0c <gomp_affinity_print_place+0xb0>
 a24:	cbz	w27, a34 <gomp_affinity_print_place+0xd8>
 a28:	ldr	x1, [x25]
 a2c:	mov	w0, #0x2c                  	// #44
 a30:	bl	0 <fputc>
 a34:	ldr	x0, [x25]
 a38:	mov	x2, x20
 a3c:	mov	x1, x26
 a40:	mov	w27, #0x1                   	// #1
 a44:	bl	0 <fprintf>
 a48:	b	a08 <gomp_affinity_print_place+0xac>
 a4c:	ldr	x0, [x25]
 a50:	mov	x2, x19
 a54:	mov	x1, x24
 a58:	bl	0 <fprintf>
 a5c:	b	a1c <gomp_affinity_print_place+0xc0>
 a60:	ldp	x19, x20, [sp, #16]
 a64:	ldp	x21, x22, [sp, #32]
 a68:	ldp	x23, x24, [sp, #48]
 a6c:	ldp	x25, x26, [sp, #64]
 a70:	ldr	x27, [sp, #80]
 a74:	ldp	x29, x30, [sp], #96
 a78:	ret

0000000000000a7c <gomp_ialias_omp_get_place_num_procs>:
 a7c:	tbnz	w0, #31, abc <gomp_ialias_omp_get_place_num_procs+0x40>
 a80:	adrp	x2, 0 <gomp_places_list_len>
 a84:	sxtw	x1, w0
 a88:	ldr	x2, [x2]
 a8c:	cmp	x2, w0, sxtw
 a90:	b.ls	abc <gomp_ialias_omp_get_place_num_procs+0x40>  // b.plast
 a94:	stp	x29, x30, [sp, #-16]!
 a98:	adrp	x0, 0 <gomp_places_list>
 a9c:	mov	x29, sp
 aa0:	ldr	x0, [x0]
 aa4:	ldr	x1, [x0, x1, lsl #3]
 aa8:	adrp	x0, 0 <gomp_cpuset_size>
 aac:	ldr	x0, [x0]
 ab0:	bl	0 <gomp_cpuset_popcount>
 ab4:	ldp	x29, x30, [sp], #16
 ab8:	ret
 abc:	mov	w0, #0x0                   	// #0
 ac0:	ret

0000000000000ac4 <gomp_ialias_omp_get_place_proc_ids>:
 ac4:	tbnz	w0, #31, b00 <gomp_ialias_omp_get_place_proc_ids+0x3c>
 ac8:	adrp	x3, 0 <gomp_places_list_len>
 acc:	sxtw	x2, w0
 ad0:	ldr	x3, [x3]
 ad4:	cmp	x3, w0, sxtw
 ad8:	b.ls	b00 <gomp_ialias_omp_get_place_proc_ids+0x3c>  // b.plast
 adc:	adrp	x0, 0 <gomp_places_list>
 ae0:	ldr	x0, [x0]
 ae4:	ldr	x5, [x0, x2, lsl #3]
 ae8:	adrp	x0, 0 <gomp_cpuset_size>
 aec:	ldr	x3, [x0]
 af0:	mov	x0, #0x0                   	// #0
 af4:	lsl	x4, x3, #3
 af8:	cmp	x0, x4
 afc:	b.ne	b04 <gomp_ialias_omp_get_place_proc_ids+0x40>  // b.any
 b00:	ret
 b04:	cmp	x3, x0, lsr #3
 b08:	b.ls	b20 <gomp_ialias_omp_get_place_proc_ids+0x5c>  // b.plast
 b0c:	lsr	x2, x0, #6
 b10:	ldr	x2, [x5, x2, lsl #3]
 b14:	lsr	x2, x2, x0
 b18:	tbz	w2, #0, b20 <gomp_ialias_omp_get_place_proc_ids+0x5c>
 b1c:	str	w0, [x1], #4
 b20:	add	x0, x0, #0x1
 b24:	b	af8 <gomp_ialias_omp_get_place_proc_ids+0x34>

0000000000000b28 <gomp_get_place_proc_ids_8>:
 b28:	tbnz	w0, #31, b64 <gomp_get_place_proc_ids_8+0x3c>
 b2c:	adrp	x3, 0 <gomp_places_list_len>
 b30:	sxtw	x2, w0
 b34:	ldr	x3, [x3]
 b38:	cmp	x3, w0, sxtw
 b3c:	b.ls	b64 <gomp_get_place_proc_ids_8+0x3c>  // b.plast
 b40:	adrp	x0, 0 <gomp_places_list>
 b44:	ldr	x0, [x0]
 b48:	ldr	x5, [x0, x2, lsl #3]
 b4c:	adrp	x2, 0 <gomp_cpuset_size>
 b50:	mov	x0, #0x0                   	// #0
 b54:	ldr	x3, [x2]
 b58:	lsl	x3, x3, #3
 b5c:	cmp	x0, x3
 b60:	b.ne	b68 <gomp_get_place_proc_ids_8+0x40>  // b.any
 b64:	ret
 b68:	ldr	x4, [x2]
 b6c:	cmp	x4, x0, lsr #3
 b70:	b.ls	b88 <gomp_get_place_proc_ids_8+0x60>  // b.plast
 b74:	lsr	x4, x0, #6
 b78:	ldr	x4, [x5, x4, lsl #3]
 b7c:	lsr	x4, x4, x0
 b80:	tbz	w4, #0, b88 <gomp_get_place_proc_ids_8+0x60>
 b84:	str	x0, [x1], #8
 b88:	add	x0, x0, #0x1
 b8c:	b	b5c <gomp_get_place_proc_ids_8+0x34>

0000000000000b90 <gomp_display_affinity_place>:
 b90:	stp	x29, x30, [sp, #-144]!
 b94:	mov	x29, sp
 b98:	stp	x19, x20, [sp, #16]
 b9c:	stp	x21, x22, [sp, #32]
 ba0:	mov	x22, x0
 ba4:	stp	x23, x24, [sp, #48]
 ba8:	mov	x23, x1
 bac:	mov	x24, x2
 bb0:	stp	x25, x26, [sp, #64]
 bb4:	stp	x27, x28, [sp, #80]
 bb8:	tbnz	w3, #31, c90 <gomp_display_affinity_place+0x100>
 bbc:	adrp	x0, 0 <gomp_places_list_len>
 bc0:	sxtw	x1, w3
 bc4:	ldr	x0, [x0]
 bc8:	cmp	x0, w3, sxtw
 bcc:	b.ls	c90 <gomp_display_affinity_place+0x100>  // b.plast
 bd0:	adrp	x0, 0 <gomp_places_list>
 bd4:	ldr	x0, [x0]
 bd8:	ldr	x26, [x0, x1, lsl #3]
 bdc:	adrp	x25, 0 <gomp_cpuset_size>
 be0:	adrp	x27, 0 <gomp_init_thread_affinity>
 be4:	add	x27, x27, #0x0
 be8:	ldr	x21, [x25]
 bec:	add	x1, sp, #0x71
 bf0:	mov	w0, #0x0                   	// #0
 bf4:	mov	x19, #0x0                   	// #0
 bf8:	str	x1, [sp, #104]
 bfc:	lsl	x21, x21, #3
 c00:	mov	x28, x21
 c04:	cmp	x21, x19
 c08:	b.eq	d28 <gomp_display_affinity_place+0x198>  // b.none
 c0c:	ldr	x1, [x25]
 c10:	cmp	x1, x19, lsr #3
 c14:	b.ls	d10 <gomp_display_affinity_place+0x180>  // b.plast
 c18:	lsr	x1, x19, #6
 c1c:	ldr	x20, [x26, x1, lsl #3]
 c20:	lsr	x20, x20, x19
 c24:	and	w20, w20, #0x1
 c28:	cmp	w20, w0
 c2c:	b.eq	c80 <gomp_display_affinity_place+0xf0>  // b.none
 c30:	cbz	w20, d2c <gomp_display_affinity_place+0x19c>
 c34:	cmp	x21, x28
 c38:	b.eq	d18 <gomp_display_affinity_place+0x188>  // b.none
 c3c:	mov	w0, #0x2c                  	// #44
 c40:	strb	w0, [sp, #112]
 c44:	ldr	x0, [sp, #104]
 c48:	mov	x28, x19
 c4c:	mov	x2, x19
 c50:	adrp	x1, 0 <gomp_init_thread_affinity>
 c54:	add	x1, x1, #0x0
 c58:	bl	0 <sprintf>
 c5c:	add	x0, sp, #0x70
 c60:	bl	0 <strlen>
 c64:	add	x3, sp, #0x70
 c68:	mov	x4, x0
 c6c:	mov	x2, x24
 c70:	mov	x0, x22
 c74:	mov	x1, x23
 c78:	bl	0 <gomp_display_string>
 c7c:	mov	w0, w20
 c80:	add	x19, x19, #0x1
 c84:	cmp	x21, x19
 c88:	b.cs	c04 <gomp_display_affinity_place+0x74>  // b.hs, b.nlast
 c8c:	b	ce0 <gomp_display_affinity_place+0x150>
 c90:	adrp	x0, 0 <gomp_cpusetp>
 c94:	ldr	x26, [x0]
 c98:	cbnz	x26, bdc <gomp_display_affinity_place+0x4c>
 c9c:	adrp	x0, 0 <gomp_available_cpus>
 ca0:	ldr	x2, [x0]
 ca4:	cmp	x2, #0x1
 ca8:	b.ls	cfc <gomp_display_affinity_place+0x16c>  // b.plast
 cac:	adrp	x1, 0 <gomp_init_thread_affinity>
 cb0:	sub	x2, x2, #0x1
 cb4:	add	x1, x1, #0x0
 cb8:	add	x0, sp, #0x70
 cbc:	bl	0 <sprintf>
 cc0:	add	x0, sp, #0x70
 cc4:	bl	0 <strlen>
 cc8:	add	x3, sp, #0x70
 ccc:	mov	x4, x0
 cd0:	mov	x2, x24
 cd4:	mov	x1, x23
 cd8:	mov	x0, x22
 cdc:	bl	0 <gomp_display_string>
 ce0:	ldp	x19, x20, [sp, #16]
 ce4:	ldp	x21, x22, [sp, #32]
 ce8:	ldp	x23, x24, [sp, #48]
 cec:	ldp	x25, x26, [sp, #64]
 cf0:	ldp	x27, x28, [sp, #80]
 cf4:	ldp	x29, x30, [sp], #144
 cf8:	ret
 cfc:	add	x0, sp, #0x70
 d00:	adrp	x1, 0 <gomp_init_thread_affinity>
 d04:	add	x1, x1, #0x0
 d08:	bl	0 <strcpy>
 d0c:	b	cc0 <gomp_display_affinity_place+0x130>
 d10:	mov	w20, #0x0                   	// #0
 d14:	b	c28 <gomp_display_affinity_place+0x98>
 d18:	add	x0, sp, #0x70
 d1c:	b	c48 <gomp_display_affinity_place+0xb8>
 d20:	mov	w0, #0x0                   	// #0
 d24:	b	c80 <gomp_display_affinity_place+0xf0>
 d28:	cbz	w0, c80 <gomp_display_affinity_place+0xf0>
 d2c:	add	x0, x28, #0x1
 d30:	cmp	x0, x19
 d34:	b.eq	d20 <gomp_display_affinity_place+0x190>  // b.none
 d38:	sub	x2, x19, #0x1
 d3c:	mov	x1, x27
 d40:	add	x0, sp, #0x70
 d44:	mov	w20, #0x0                   	// #0
 d48:	bl	0 <sprintf>
 d4c:	b	c5c <gomp_display_affinity_place+0xcc>

target.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_to_device_kind_p>:
       0:	cmp	w0, #0x12
       4:	b.gt	24 <gomp_to_device_kind_p+0x24>
       8:	mov	x1, #0x1                   	// #1
       c:	lsl	x0, x1, x0
      10:	mov	x1, #0x5                   	// #5
      14:	movk	x1, #0x4, lsl #16
      18:	tst	x0, x1
      1c:	cset	w0, eq  // eq = none
      20:	ret
      24:	cmp	w0, #0x80
      28:	cset	w0, ne  // ne = any
      2c:	b	20 <gomp_to_device_kind_p+0x20>

0000000000000030 <get_kind>:
      30:	sxtw	x2, w2
      34:	tst	w0, #0xff
      38:	b.eq	44 <get_kind+0x14>  // b.none
      3c:	ldrh	w0, [x1, x2, lsl #1]
      40:	ret
      44:	ldrb	w0, [x1, x2]
      48:	b	40 <get_kind+0x10>

000000000000004c <calculate_firstprivate_requirements>:
      4c:	mov	x7, #0x0                   	// #0
      50:	mov	x8, #0x1                   	// #1
      54:	cmp	x7, x0
      58:	b.ne	60 <calculate_firstprivate_requirements+0x14>  // b.any
      5c:	ret
      60:	ldrh	w5, [x2, x7, lsl #1]
      64:	and	w6, w5, #0xff
      68:	cmp	w6, #0xc
      6c:	b.ne	ac <calculate_firstprivate_requirements+0x60>  // b.any
      70:	ldr	x6, [x3]
      74:	lsr	w5, w5, #8
      78:	lsl	x5, x8, x5
      7c:	cmp	x6, x5
      80:	b.cs	88 <calculate_firstprivate_requirements+0x3c>  // b.hs, b.nlast
      84:	str	x5, [x3]
      88:	ldr	x6, [x4]
      8c:	sub	x6, x6, #0x1
      90:	add	x6, x6, x5
      94:	neg	x5, x5
      98:	and	x5, x6, x5
      9c:	str	x5, [x4]
      a0:	ldr	x6, [x1, x7, lsl #3]
      a4:	add	x5, x6, x5
      a8:	str	x5, [x4]
      ac:	add	x7, x7, #0x1
      b0:	b	54 <calculate_firstprivate_requirements+0x8>

00000000000000b4 <omp_target_memcpy_rect_worker>:
      b4:	sub	sp, sp, #0xb0
      b8:	cmp	w3, #0x1
      bc:	stp	x29, x30, [sp, #32]
      c0:	add	x29, sp, #0x20
      c4:	stp	x19, x20, [sp, #48]
      c8:	stp	x21, x22, [sp, #64]
      cc:	mov	x22, x2
      d0:	stp	x23, x24, [sp, #80]
      d4:	stp	x25, x26, [sp, #96]
      d8:	stp	x27, x28, [sp, #112]
      dc:	mov	x27, x4
      e0:	ldp	x28, x23, [sp, #176]
      e4:	ldr	x26, [sp, #192]
      e8:	b.ne	270 <omp_target_memcpy_rect_worker+0x1bc>  // b.any
      ec:	ldr	x2, [x4]
      f0:	mul	x3, x22, x2
      f4:	umulh	x2, x22, x2
      f8:	cbnz	x2, 190 <omp_target_memcpy_rect_worker+0xdc>
      fc:	ldr	x2, [x5]
     100:	mul	x4, x22, x2
     104:	umulh	x2, x22, x2
     108:	cbnz	x2, 190 <omp_target_memcpy_rect_worker+0xdc>
     10c:	ldr	x2, [x6]
     110:	mul	x5, x22, x2
     114:	umulh	x2, x22, x2
     118:	cbnz	x2, 190 <omp_target_memcpy_rect_worker+0xdc>
     11c:	orr	x2, x23, x26
     120:	cbnz	x2, 158 <omp_target_memcpy_rect_worker+0xa4>
     124:	mov	x2, x3
     128:	add	x1, x1, x5
     12c:	add	x0, x0, x4
     130:	bl	0 <memcpy>
     134:	mov	w0, #0x0                   	// #0
     138:	ldp	x29, x30, [sp, #32]
     13c:	ldp	x19, x20, [sp, #48]
     140:	ldp	x21, x22, [sp, #64]
     144:	ldp	x23, x24, [sp, #80]
     148:	ldp	x25, x26, [sp, #96]
     14c:	ldp	x27, x28, [sp, #112]
     150:	add	sp, sp, #0xb0
     154:	ret
     158:	cbnz	x26, 170 <omp_target_memcpy_rect_worker+0xbc>
     15c:	ldr	x6, [x23, #120]
     160:	add	x2, x1, x5
     164:	add	x1, x0, x4
     168:	ldr	w0, [x23, #12]
     16c:	b	184 <omp_target_memcpy_rect_worker+0xd0>
     170:	cbnz	x23, 198 <omp_target_memcpy_rect_worker+0xe4>
     174:	add	x2, x1, x5
     178:	add	x1, x0, x4
     17c:	ldr	w0, [x26, #12]
     180:	ldr	x6, [x26, #112]
     184:	blr	x6
     188:	and	w0, w0, #0xff
     18c:	cbnz	w0, 134 <omp_target_memcpy_rect_worker+0x80>
     190:	mov	w0, #0x16                  	// #22
     194:	b	138 <omp_target_memcpy_rect_worker+0x84>
     198:	cmp	x23, x26
     19c:	b.ne	190 <omp_target_memcpy_rect_worker+0xdc>  // b.any
     1a0:	ldr	x6, [x23, #128]
     1a4:	b	160 <omp_target_memcpy_rect_worker+0xac>
     1a8:	ldr	x4, [x7, x2, lsl #3]
     1ac:	umulh	x8, x24, x4
     1b0:	mul	x24, x24, x4
     1b4:	cbnz	x8, 190 <omp_target_memcpy_rect_worker+0xdc>
     1b8:	ldr	x4, [x28, x2, lsl #3]
     1bc:	add	x2, x2, #0x1
     1c0:	umulh	x8, x25, x4
     1c4:	mul	x25, x25, x4
     1c8:	cbnz	x8, 190 <omp_target_memcpy_rect_worker+0xdc>
     1cc:	cmp	w3, w2
     1d0:	b.gt	1a8 <omp_target_memcpy_rect_worker+0xf4>
     1d4:	ldr	x2, [x5]
     1d8:	mul	x21, x24, x2
     1dc:	umulh	x2, x24, x2
     1e0:	cbnz	x2, 190 <omp_target_memcpy_rect_worker+0xdc>
     1e4:	ldr	x2, [x6]
     1e8:	mul	x4, x25, x2
     1ec:	umulh	x2, x25, x2
     1f0:	cmp	x2, #0x0
     1f4:	cset	x8, ne  // ne = any
     1f8:	b.ne	190 <omp_target_memcpy_rect_worker+0xdc>  // b.any
     1fc:	add	x1, x1, x4
     200:	add	x21, x0, x21
     204:	add	x7, x7, #0x8
     208:	add	x6, x6, #0x8
     20c:	add	x19, x5, #0x8
     210:	add	x4, x27, #0x8
     214:	sub	w20, w3, #0x1
     218:	ldr	x0, [x27]
     21c:	cmp	x0, x8
     220:	b.ls	134 <omp_target_memcpy_rect_worker+0x80>  // b.plast
     224:	add	x0, x28, #0x8
     228:	stp	x0, x23, [sp]
     22c:	mov	x5, x19
     230:	str	x26, [sp, #16]
     234:	mov	x0, x21
     238:	mov	w3, w20
     23c:	mov	x2, x22
     240:	stp	x1, x4, [sp, #136]
     244:	add	x21, x21, x24
     248:	stp	x6, x7, [sp, #152]
     24c:	str	x8, [sp, #168]
     250:	bl	b4 <omp_target_memcpy_rect_worker>
     254:	ldr	x1, [sp, #136]
     258:	add	x1, x1, x25
     25c:	cbnz	w0, 138 <omp_target_memcpy_rect_worker+0x84>
     260:	ldp	x7, x8, [sp, #160]
     264:	ldp	x4, x6, [sp, #144]
     268:	add	x8, x8, #0x1
     26c:	b	218 <omp_target_memcpy_rect_worker+0x164>
     270:	mov	x25, x2
     274:	mov	x24, x2
     278:	mov	x2, #0x1                   	// #1
     27c:	b	1cc <omp_target_memcpy_rect_worker+0x118>

0000000000000280 <gomp_target_init>:
     280:	stp	x29, x30, [sp, #-32]!
     284:	adrp	x0, 0 <gomp_to_device_kind_p>
     288:	mov	x29, sp
     28c:	str	x19, [sp, #16]
     290:	add	x19, x0, #0x0
     294:	str	wzr, [x0]
     298:	mov	x0, #0x0                   	// #0
     29c:	bl	0 <malloc>
     2a0:	str	wzr, [x19, #4]
     2a4:	str	x0, [x19, #8]
     2a8:	adrp	x0, 0 <gomp_to_device_kind_p>
     2ac:	add	x0, x0, #0x0
     2b0:	bl	0 <atexit>
     2b4:	cbz	w0, 2c4 <gomp_target_init+0x44>
     2b8:	adrp	x0, 0 <gomp_to_device_kind_p>
     2bc:	add	x0, x0, #0x0
     2c0:	bl	0 <gomp_fatal>
     2c4:	ldr	x19, [sp, #16]
     2c8:	ldp	x29, x30, [sp], #32
     2cc:	ret

00000000000002d0 <gomp_mutex_lock>:
     2d0:	mov	x2, x0
     2d4:	mov	w3, #0x1                   	// #1
     2d8:	ldaxr	w1, [x2]
     2dc:	cbnz	w1, 2e8 <gomp_mutex_lock+0x18>
     2e0:	stxr	w4, w3, [x2]
     2e4:	cbnz	w4, 2d8 <gomp_mutex_lock+0x8>
     2e8:	cmp	w1, #0x0
     2ec:	b.eq	2f4 <gomp_mutex_lock+0x24>  // b.none
     2f0:	b	0 <gomp_mutex_lock_slow>
     2f4:	ret

00000000000002f8 <gomp_mutex_unlock>:
     2f8:	mov	x1, x0
     2fc:	ldxr	w2, [x1]
     300:	stlxr	w3, wzr, [x1]
     304:	cbnz	w3, 2fc <gomp_mutex_unlock+0x4>
     308:	tbz	w2, #31, 310 <gomp_mutex_unlock+0x18>
     30c:	b	0 <gomp_mutex_unlock_slow>
     310:	ret

0000000000000314 <gomp_target_fini>:
     314:	stp	x29, x30, [sp, #-80]!
     318:	mov	x29, sp
     31c:	stp	x21, x22, [sp, #32]
     320:	adrp	x21, 0 <gomp_to_device_kind_p>
     324:	add	x21, x21, #0x0
     328:	stp	x19, x20, [sp, #16]
     32c:	mov	x20, #0x0                   	// #0
     330:	stp	x23, x24, [sp, #48]
     334:	mov	x24, #0x130                 	// #304
     338:	str	x25, [sp, #64]
     33c:	mov	w25, #0x2                   	// #2
     340:	ldr	w0, [x21]
     344:	cmp	w0, w20
     348:	b.gt	364 <gomp_target_fini+0x50>
     34c:	ldp	x19, x20, [sp, #16]
     350:	ldp	x21, x22, [sp, #32]
     354:	ldp	x23, x24, [sp, #48]
     358:	ldr	x25, [sp, #64]
     35c:	ldp	x29, x30, [sp], #80
     360:	ret
     364:	ldr	x19, [x21, #8]
     368:	madd	x19, x20, x24, x19
     36c:	add	x23, x19, #0xa8
     370:	mov	x0, x23
     374:	bl	2d0 <gomp_mutex_lock>
     378:	ldr	w0, [x19, #172]
     37c:	cmp	w0, #0x1
     380:	b.ne	3b4 <gomp_target_fini+0xa0>  // b.any
     384:	ldr	w0, [x19, #12]
     388:	ldr	x1, [x19, #64]
     38c:	blr	x1
     390:	and	w22, w0, #0xff
     394:	str	w25, [x19, #172]
     398:	mov	x0, x23
     39c:	add	x20, x20, #0x1
     3a0:	bl	2f8 <gomp_mutex_unlock>
     3a4:	cbnz	w22, 340 <gomp_target_fini+0x2c>
     3a8:	adrp	x0, 0 <gomp_to_device_kind_p>
     3ac:	add	x0, x0, #0x0
     3b0:	bl	0 <gomp_fatal>
     3b4:	mov	w22, #0x1                   	// #1
     3b8:	b	398 <gomp_target_fini+0x84>

00000000000003bc <gomp_map_0len_lookup>:
     3bc:	ldp	x2, x3, [x1]
     3c0:	cmp	x2, x3
     3c4:	b.eq	3cc <gomp_map_0len_lookup+0x10>  // b.none
     3c8:	b	0 <splay_tree_prefix_splay_tree_lookup>
     3cc:	stp	x29, x30, [sp, #-32]!
     3d0:	add	x2, x2, #0x1
     3d4:	mov	x29, sp
     3d8:	str	x19, [sp, #16]
     3dc:	mov	x19, x1
     3e0:	str	x2, [x1, #8]
     3e4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     3e8:	ldr	x1, [x19, #8]
     3ec:	sub	x1, x1, #0x1
     3f0:	str	x1, [x19, #8]
     3f4:	ldr	x19, [sp, #16]
     3f8:	ldp	x29, x30, [sp], #32
     3fc:	ret

0000000000000400 <gomp_load_image_to_device>:
     400:	stp	x29, x30, [sp, #-128]!
     404:	mov	x29, sp
     408:	stp	x27, x28, [sp, #80]
     40c:	mov	x28, x0
     410:	mov	x0, x2
     414:	stp	x19, x20, [sp, #16]
     418:	mov	x2, x3
     41c:	add	x3, sp, #0x78
     420:	stp	x21, x22, [sp, #32]
     424:	ldp	x22, x19, [x0, #16]
     428:	stp	x23, x24, [sp, #48]
     42c:	and	w23, w4, #0xff
     430:	ldp	x24, x20, [x0]
     434:	mov	x0, #0x2                   	// #2
     438:	ldr	x4, [x28, #80]
     43c:	sub	x19, x19, x22
     440:	stp	x25, x26, [sp, #64]
     444:	asr	x19, x19, #3
     448:	sub	x20, x20, x24
     44c:	str	xzr, [sp, #120]
     450:	sdiv	x19, x19, x0
     454:	ldr	w0, [x28, #12]
     458:	asr	x20, x20, #3
     45c:	mov	w25, w19
     460:	add	w19, w19, w20
     464:	blr	x4
     468:	cmp	w19, w0
     46c:	b.eq	4a4 <gomp_load_image_to_device+0xa4>  // b.none
     470:	mov	w21, w0
     474:	add	x0, x28, #0xa8
     478:	bl	2f8 <gomp_mutex_unlock>
     47c:	cbz	w23, 490 <gomp_load_image_to_device+0x90>
     480:	adrp	x0, 0 <gomp_to_device_kind_p>
     484:	add	x0, x0, #0x0
     488:	add	x0, x0, #0x10
     48c:	bl	2f8 <gomp_mutex_unlock>
     490:	adrp	x0, 0 <gomp_to_device_kind_p>
     494:	mov	w2, w21
     498:	mov	w1, w19
     49c:	add	x0, x0, #0x0
     4a0:	bl	0 <gomp_fatal>
     4a4:	mov	x0, #0x40                  	// #64
     4a8:	bl	0 <gomp_malloc>
     4ac:	mov	x21, x0
     4b0:	mov	w0, #0x48                  	// #72
     4b4:	mov	w26, w20
     4b8:	smull	x0, w19, w0
     4bc:	bl	0 <gomp_malloc>
     4c0:	mov	x19, x0
     4c4:	mov	x0, #0xffffffffffffffff    	// #-1
     4c8:	mov	x27, x19
     4cc:	mov	x3, x0
     4d0:	stp	x0, x19, [x21]
     4d4:	add	x0, x28, #0xa0
     4d8:	mov	x2, #0x0                   	// #0
     4dc:	stp	xzr, xzr, [x21, #16]
     4e0:	stp	xzr, xzr, [x21, #32]
     4e4:	stp	xzr, x28, [x21, #48]
     4e8:	cmp	w26, w2
     4ec:	ldr	x4, [sp, #120]
     4f0:	b.gt	544 <gomp_load_image_to_device+0x144>
     4f4:	and	x1, x20, #0xffffffff
     4f8:	mov	x0, #0x48                  	// #72
     4fc:	cmp	w20, #0x0
     500:	add	x26, x28, #0xa0
     504:	sbfiz	x20, x20, #4, #32
     508:	mov	w24, #0x0                   	// #0
     50c:	mul	x1, x1, x0
     510:	csel	x1, x1, xzr, ge  // ge = tcont
     514:	add	x19, x19, x1
     518:	cmp	w24, w25
     51c:	ldr	x0, [sp, #120]
     520:	b.lt	58c <gomp_load_image_to_device+0x18c>  // b.tstop
     524:	bl	0 <free>
     528:	ldp	x19, x20, [sp, #16]
     52c:	ldp	x21, x22, [sp, #32]
     530:	ldp	x23, x24, [sp, #48]
     534:	ldp	x25, x26, [sp, #64]
     538:	ldp	x27, x28, [sp, #80]
     53c:	ldp	x29, x30, [sp], #128
     540:	ret
     544:	ldr	x1, [x24, x2, lsl #3]
     548:	str	x1, [x27]
     54c:	str	x21, [x27, #16]
     550:	add	x1, x1, #0x1
     554:	str	x1, [x27, #8]
     558:	lsl	x1, x2, #4
     55c:	stp	x0, x2, [sp, #96]
     560:	ldr	x1, [x4, x1]
     564:	stp	x1, x3, [x27, #24]
     568:	mov	x1, x27
     56c:	stp	xzr, xzr, [x27, #48]
     570:	add	x27, x27, #0x48
     574:	stur	xzr, [x27, #-8]
     578:	bl	0 <splay_tree_prefix_splay_tree_insert>
     57c:	ldp	x0, x2, [sp, #96]
     580:	mov	x3, #0xffffffffffffffff    	// #-1
     584:	add	x2, x2, #0x1
     588:	b	4e8 <gomp_load_image_to_device+0xe8>
     58c:	add	x1, x0, x20
     590:	ldr	x3, [x0, x20]
     594:	ldr	x2, [x1, #8]
     598:	ldr	x1, [x22, #8]
     59c:	sub	x2, x2, x3
     5a0:	cmp	x1, x2
     5a4:	b.eq	5d0 <gomp_load_image_to_device+0x1d0>  // b.none
     5a8:	add	x0, x28, #0xa8
     5ac:	bl	2f8 <gomp_mutex_unlock>
     5b0:	cbz	w23, 5c4 <gomp_load_image_to_device+0x1c4>
     5b4:	adrp	x0, 0 <gomp_to_device_kind_p>
     5b8:	add	x0, x0, #0x0
     5bc:	add	x0, x0, #0x10
     5c0:	bl	2f8 <gomp_mutex_unlock>
     5c4:	adrp	x0, 0 <gomp_to_device_kind_p>
     5c8:	add	x0, x0, #0x0
     5cc:	bl	0 <gomp_fatal>
     5d0:	ldr	x4, [x22], #16
     5d4:	and	x2, x1, #0x7fffffffffffffff
     5d8:	mvn	x1, x1
     5dc:	stp	x21, x3, [x19, #16]
     5e0:	add	x2, x2, x4
     5e4:	lsr	x1, x1, #63
     5e8:	stp	x4, x2, [x19]
     5ec:	sub	x1, x1, #0x2
     5f0:	str	x1, [x19, #32]
     5f4:	mov	x0, x26
     5f8:	stp	xzr, xzr, [x19, #48]
     5fc:	mov	x1, x19
     600:	add	w24, w24, #0x1
     604:	str	xzr, [x19, #64]
     608:	add	x20, x20, #0x10
     60c:	add	x19, x19, #0x48
     610:	bl	0 <splay_tree_prefix_splay_tree_insert>
     614:	b	518 <gomp_load_image_to_device+0x118>

0000000000000618 <gomp_target_fallback>:
     618:	stp	x29, x30, [sp, #-176]!
     61c:	mov	x2, #0x68                  	// #104
     620:	mov	x29, sp
     624:	str	x23, [sp, #48]
     628:	adrp	x23, 0 <gomp_tls_data>
     62c:	ldr	x23, [x23]
     630:	stp	x19, x20, [sp, #16]
     634:	mrs	x20, tpidr_el0
     638:	add	x19, x20, x23
     63c:	stp	x21, x22, [sp, #32]
     640:	mov	x21, x0
     644:	mov	x22, x1
     648:	add	x0, sp, #0x48
     64c:	mov	x1, x19
     650:	bl	0 <memcpy>
     654:	stp	xzr, xzr, [x19]
     658:	adrp	x1, 0 <gomp_places_list>
     65c:	ldr	w0, [x19, #92]
     660:	ldr	x1, [x1]
     664:	stp	xzr, xzr, [x19, #16]
     668:	stp	xzr, xzr, [x19, #32]
     66c:	stp	xzr, xzr, [x19, #48]
     670:	stp	xzr, xzr, [x19, #64]
     674:	stp	xzr, xzr, [x19, #80]
     678:	str	xzr, [x19, #96]
     67c:	cbz	x1, 690 <gomp_target_fallback+0x78>
     680:	str	w0, [x19, #92]
     684:	adrp	x0, 0 <gomp_places_list_len>
     688:	ldr	x0, [x0]
     68c:	str	w0, [x19, #56]
     690:	add	x20, x20, x23
     694:	mov	x0, x22
     698:	blr	x21
     69c:	mov	x0, x20
     6a0:	bl	0 <gomp_free_thread>
     6a4:	add	x1, sp, #0x48
     6a8:	mov	x0, x20
     6ac:	mov	x2, #0x68                  	// #104
     6b0:	bl	0 <memcpy>
     6b4:	ldp	x19, x20, [sp, #16]
     6b8:	ldp	x21, x22, [sp, #32]
     6bc:	ldr	x23, [sp, #48]
     6c0:	ldp	x29, x30, [sp], #176
     6c4:	ret

00000000000006c8 <gomp_coalesce_buf_add>:
     6c8:	sub	x4, x2, #0x1
     6cc:	mov	x3, #0x7fff                	// #32767
     6d0:	cmp	x4, x3
     6d4:	b.hi	70c <gomp_coalesce_buf_add+0x44>  // b.pmore
     6d8:	ldr	x3, [x0, #24]
     6dc:	cmp	x3, #0x0
     6e0:	cbz	x3, 744 <gomp_coalesce_buf_add+0x7c>
     6e4:	b.lt	70c <gomp_coalesce_buf_add+0x44>  // b.tstop
     6e8:	lsl	x5, x3, #4
     6ec:	sub	x4, x5, #0x10
     6f0:	ldr	x5, [x0, #16]
     6f4:	add	x5, x5, x4
     6f8:	ldr	x6, [x5, #8]
     6fc:	cmp	x6, x1
     700:	b.ls	710 <gomp_coalesce_buf_add+0x48>  // b.plast
     704:	mov	x1, #0xffffffffffffffff    	// #-1
     708:	str	x1, [x0, #24]
     70c:	ret
     710:	add	x6, x6, #0x1, lsl #12
     714:	cmp	x6, x1
     718:	ldr	x4, [x0, #32]
     71c:	b.ls	734 <gomp_coalesce_buf_add+0x6c>  // b.plast
     720:	add	x2, x2, x1
     724:	str	x2, [x5, #8]
     728:	add	x4, x4, #0x1
     72c:	str	x4, [x0, #32]
     730:	b	70c <gomp_coalesce_buf_add+0x44>
     734:	cmp	x4, #0x1
     738:	b.ne	744 <gomp_coalesce_buf_add+0x7c>  // b.any
     73c:	sub	x3, x3, #0x1
     740:	str	x3, [x0, #24]
     744:	ldp	x4, x3, [x0, #16]
     748:	add	x2, x2, x1
     74c:	lsl	x6, x3, #4
     750:	add	x5, x4, x3, lsl #4
     754:	add	x3, x3, #0x1
     758:	str	x1, [x4, x6]
     75c:	mov	x1, #0x1                   	// #1
     760:	str	x2, [x5, #8]
     764:	stp	x3, x1, [x0, #24]
     768:	b	70c <gomp_coalesce_buf_add+0x44>

000000000000076c <gomp_map_val>:
     76c:	add	x4, x0, x2, lsl #5
     770:	ldr	x5, [x4, #64]
     774:	ldr	x3, [x4, #80]
     778:	cbz	x5, 790 <gomp_map_val+0x24>
     77c:	ldp	x1, x0, [x5, #16]
     780:	ldr	x1, [x1, #16]
     784:	add	x0, x3, x0
     788:	add	x0, x0, x1
     78c:	ret
     790:	cmn	x3, #0x1
     794:	b.ne	7a0 <gomp_map_val+0x34>  // b.any
     798:	ldr	x0, [x1, x2, lsl #3]
     79c:	b	78c <gomp_map_val+0x20>
     7a0:	cmn	x3, #0x2
     7a4:	b.eq	7f4 <gomp_map_val+0x88>  // b.none
     7a8:	cmn	x3, #0x3
     7ac:	b.ne	7e8 <gomp_map_val+0x7c>  // b.any
     7b0:	ldr	x5, [x4, #96]
     7b4:	lsl	x4, x2, #3
     7b8:	add	x2, x0, x2, lsl #5
     7bc:	ldr	x3, [x1, x4]
     7c0:	add	x1, x1, x4
     7c4:	ldr	x0, [x2, #112]
     7c8:	ldp	x6, x2, [x5, #16]
     7cc:	ldr	x1, [x1, #8]
     7d0:	ldr	x6, [x6, #16]
     7d4:	add	x0, x0, x2
     7d8:	add	x3, x3, x6
     7dc:	add	x0, x3, x0
     7e0:	sub	x0, x0, x1
     7e4:	b	78c <gomp_map_val+0x20>
     7e8:	ldr	x0, [x0, #16]
     7ec:	add	x0, x3, x0
     7f0:	b	78c <gomp_map_val+0x20>
     7f4:	mov	x0, #0x0                   	// #0
     7f8:	b	78c <gomp_map_val+0x20>

00000000000007fc <copy_firstprivate_data.isra.0>:
     7fc:	stp	x29, x30, [sp, #-80]!
     800:	mov	x29, sp
     804:	stp	x19, x20, [sp, #16]
     808:	mov	x20, x4
     80c:	stp	x21, x22, [sp, #32]
     810:	mov	x21, x2
     814:	mov	x22, x3
     818:	stp	x23, x24, [sp, #48]
     81c:	mov	x23, x0
     820:	sub	x0, x5, #0x1
     824:	str	x25, [sp, #64]
     828:	ands	x0, x23, x0
     82c:	b.eq	838 <copy_firstprivate_data.isra.0+0x3c>  // b.none
     830:	sub	x5, x5, x0
     834:	add	x23, x23, x5
     838:	add	x24, x20, x1, lsl #1
     83c:	mov	x19, #0x0                   	// #0
     840:	mov	x25, #0x1                   	// #1
     844:	cmp	x20, x24
     848:	b.ne	864 <copy_firstprivate_data.isra.0+0x68>  // b.any
     84c:	ldp	x19, x20, [sp, #16]
     850:	ldp	x21, x22, [sp, #32]
     854:	ldp	x23, x24, [sp, #48]
     858:	ldr	x25, [sp, #64]
     85c:	ldp	x29, x30, [sp], #80
     860:	ret
     864:	ldrb	w0, [x20]
     868:	ldrh	w1, [x20]
     86c:	cmp	w0, #0xc
     870:	b.ne	8ac <copy_firstprivate_data.isra.0+0xb0>  // b.any
     874:	lsr	w1, w1, #8
     878:	sub	x19, x19, #0x1
     87c:	ldr	x2, [x22]
     880:	lsl	x1, x25, x1
     884:	add	x19, x19, x1
     888:	neg	x1, x1
     88c:	and	x19, x1, x19
     890:	ldr	x1, [x21]
     894:	add	x3, x23, x19
     898:	mov	x0, x3
     89c:	bl	0 <memcpy>
     8a0:	ldr	x1, [x22]
     8a4:	str	x0, [x21]
     8a8:	add	x19, x19, x1
     8ac:	add	x21, x21, #0x8
     8b0:	add	x22, x22, #0x8
     8b4:	add	x20, x20, #0x2
     8b8:	b	844 <copy_firstprivate_data.isra.0+0x48>

00000000000008bc <gomp_copy_host2dev>:
     8bc:	stp	x29, x30, [sp, #-48]!
     8c0:	mov	x29, sp
     8c4:	stp	x19, x20, [sp, #16]
     8c8:	mov	x20, x2
     8cc:	mov	x19, x3
     8d0:	stp	x21, x22, [sp, #32]
     8d4:	mov	x22, x0
     8d8:	mov	x21, x1
     8dc:	cbz	x4, 914 <gomp_copy_host2dev+0x58>
     8e0:	ldr	x0, [x4, #8]
     8e4:	ldr	x1, [x4, #24]
     8e8:	ldr	x6, [x0, #16]
     8ec:	ldr	x0, [x4, #16]
     8f0:	sub	x6, x21, x6
     8f4:	add	x2, x0, x1, lsl #4
     8f8:	ldur	x2, [x2, #-8]
     8fc:	cmp	x2, x6
     900:	b.ls	914 <gomp_copy_host2dev+0x58>  // b.plast
     904:	sub	x1, x1, #0x1
     908:	mov	x3, #0x0                   	// #0
     90c:	cmp	x3, x1
     910:	b.le	968 <gomp_copy_host2dev+0xac>
     914:	ldr	w0, [x22, #12]
     918:	mov	x3, x19
     91c:	ldr	x4, [x22, #120]
     920:	mov	x2, x20
     924:	mov	x1, x21
     928:	blr	x4
     92c:	tst	w0, #0xff
     930:	b.ne	9e0 <gomp_copy_host2dev+0x124>  // b.any
     934:	add	x0, x22, #0xa8
     938:	bl	2f8 <gomp_mutex_unlock>
     93c:	adrp	x4, 0 <gomp_to_device_kind_p>
     940:	adrp	x1, 0 <gomp_to_device_kind_p>
     944:	adrp	x0, 0 <gomp_to_device_kind_p>
     948:	add	x6, x21, x19
     94c:	mov	x5, x21
     950:	add	x4, x4, #0x0
     954:	add	x3, x20, x19
     958:	mov	x2, x20
     95c:	add	x1, x1, #0x0
     960:	add	x0, x0, #0x0
     964:	bl	0 <gomp_fatal>
     968:	add	x2, x3, x1
     96c:	asr	x2, x2, #1
     970:	add	x5, x0, x2, lsl #4
     974:	lsl	x7, x2, #4
     978:	ldr	x5, [x5, #8]
     97c:	cmp	x5, x6
     980:	b.hi	98c <gomp_copy_host2dev+0xd0>  // b.pmore
     984:	add	x3, x2, #0x1
     988:	b	90c <gomp_copy_host2dev+0x50>
     98c:	ldr	x1, [x0, x7]
     990:	cmp	x1, x6
     994:	b.hi	9d8 <gomp_copy_host2dev+0x11c>  // b.pmore
     998:	add	x1, x6, x19
     99c:	cmp	x5, x1
     9a0:	b.cs	9b0 <gomp_copy_host2dev+0xf4>  // b.hs, b.nlast
     9a4:	adrp	x0, 0 <gomp_to_device_kind_p>
     9a8:	add	x0, x0, #0x0
     9ac:	bl	0 <gomp_fatal>
     9b0:	mov	x2, x19
     9b4:	mov	x1, x20
     9b8:	ldr	x0, [x0]
     9bc:	ldp	x19, x20, [sp, #16]
     9c0:	sub	x6, x6, x0
     9c4:	ldp	x21, x22, [sp, #32]
     9c8:	ldp	x29, x30, [sp], #48
     9cc:	ldr	x0, [x4]
     9d0:	add	x0, x0, x6
     9d4:	b	0 <memcpy>
     9d8:	sub	x1, x2, #0x1
     9dc:	b	90c <gomp_copy_host2dev+0x50>
     9e0:	ldp	x19, x20, [sp, #16]
     9e4:	ldp	x21, x22, [sp, #32]
     9e8:	ldp	x29, x30, [sp], #48
     9ec:	ret

00000000000009f0 <gomp_map_vars_existing>:
     9f0:	stp	x29, x30, [sp, #-32]!
     9f4:	and	w7, w4, #0xff
     9f8:	and	w4, w4, #0xe
     9fc:	mov	x29, sp
     a00:	stp	x19, x20, [sp, #16]
     a04:	mov	x20, x2
     a08:	cmp	w4, #0x2
     a0c:	mov	x19, x1
     a10:	mov	x6, x3
     a14:	ldr	x2, [x2]
     a18:	mov	x8, x0
     a1c:	ldr	x4, [x20, #8]
     a20:	str	x1, [x3]
     a24:	cset	w1, eq  // eq = none
     a28:	strb	w1, [x3, #8]
     a2c:	sub	w1, w7, #0x12
     a30:	and	w1, w1, #0xff
     a34:	cmp	w1, #0x1
     a38:	cset	w1, ls  // ls = plast
     a3c:	strb	w1, [x3, #9]
     a40:	ldr	x1, [x19]
     a44:	sub	x3, x2, x1
     a48:	str	x3, [x6, #16]
     a4c:	sub	x3, x4, x2
     a50:	str	x3, [x6, #24]
     a54:	tbnz	w7, #7, a6c <gomp_map_vars_existing+0x7c>
     a58:	cmp	x2, x1
     a5c:	b.cc	a6c <gomp_map_vars_existing+0x7c>  // b.lo, b.ul, b.last
     a60:	ldr	x6, [x19, #8]
     a64:	cmp	x4, x6
     a68:	b.ls	a88 <gomp_map_vars_existing+0x98>  // b.plast
     a6c:	add	x0, x8, #0xa8
     a70:	bl	2f8 <gomp_mutex_unlock>
     a74:	ldp	x3, x4, [x19]
     a78:	adrp	x0, 0 <gomp_to_device_kind_p>
     a7c:	ldp	x1, x2, [x20]
     a80:	add	x0, x0, #0x0
     a84:	bl	0 <gomp_fatal>
     a88:	and	w7, w7, #0xfffffffd
     a8c:	cmp	w7, #0x11
     a90:	b.ne	ab4 <gomp_map_vars_existing+0xc4>  // b.any
     a94:	ldr	x4, [x19, #16]
     a98:	ldr	x6, [x4, #16]
     a9c:	mov	x4, x5
     aa0:	sub	x6, x6, x1
     aa4:	ldr	x1, [x19, #24]
     aa8:	add	x1, x2, x1
     aac:	add	x1, x6, x1
     ab0:	bl	8bc <gomp_copy_host2dev>
     ab4:	ldr	x0, [x19, #32]
     ab8:	cmn	x0, #0x1
     abc:	b.eq	ac8 <gomp_map_vars_existing+0xd8>  // b.none
     ac0:	add	x0, x0, #0x1
     ac4:	str	x0, [x19, #32]
     ac8:	ldp	x19, x20, [sp, #16]
     acc:	ldp	x29, x30, [sp], #32
     ad0:	ret

0000000000000ad4 <gomp_map_fields_existing>:
     ad4:	stp	x29, x30, [sp, #-176]!
     ad8:	mov	x29, sp
     adc:	stp	x19, x20, [sp, #16]
     ae0:	mov	x20, x2
     ae4:	lsl	x2, x3, #3
     ae8:	mov	x19, x1
     aec:	stp	x21, x22, [sp, #32]
     af0:	mov	x22, x0
     af4:	stp	x23, x24, [sp, #48]
     af8:	mov	x21, x3
     afc:	mov	x24, x7
     b00:	ldr	x1, [x4, x2]
     b04:	stp	x27, x28, [sp, #80]
     b08:	mov	x27, x6
     b0c:	ldr	x23, [x0, #56]
     b10:	stp	x25, x26, [sp, #64]
     b14:	mov	x25, x4
     b18:	ldr	x0, [x5, x2]
     b1c:	add	x28, x23, #0xa0
     b20:	mov	x26, x5
     b24:	str	x2, [sp, #104]
     b28:	add	x0, x0, x1
     b2c:	stp	x1, x0, [sp, #120]
     b30:	add	x1, sp, #0x78
     b34:	mov	x0, x28
     b38:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     b3c:	ldrh	w27, [x27, w21, sxtw #1]
     b40:	add	x21, x21, #0x2
     b44:	ldr	x2, [sp, #104]
     b48:	cbz	x0, bb4 <gomp_map_fields_existing+0xe0>
     b4c:	mov	x1, x0
     b50:	ldr	x3, [x0, #16]
     b54:	ldr	x0, [x19, #16]
     b58:	cmp	x3, x0
     b5c:	b.ne	bb4 <gomp_map_fields_existing+0xe0>  // b.any
     b60:	ldr	x0, [x19]
     b64:	ldr	x3, [x1]
     b68:	ldr	x4, [x19, #24]
     b6c:	sub	x3, x3, x0
     b70:	ldr	x0, [x1, #24]
     b74:	sub	x0, x0, x4
     b78:	cmp	x3, x0
     b7c:	b.ne	bb4 <gomp_map_fields_existing+0xe0>  // b.any
     b80:	mov	x5, x24
     b84:	mov	w4, w27
     b88:	add	x3, x22, x21, lsl #5
     b8c:	add	x2, sp, #0x78
     b90:	mov	x0, x23
     b94:	bl	9f0 <gomp_map_vars_existing>
     b98:	ldp	x19, x20, [sp, #16]
     b9c:	ldp	x21, x22, [sp, #32]
     ba0:	ldp	x23, x24, [sp, #48]
     ba4:	ldp	x25, x26, [sp, #64]
     ba8:	ldp	x27, x28, [sp, #80]
     bac:	ldp	x29, x30, [sp], #176
     bb0:	ret
     bb4:	ldr	x0, [x26, x2]
     bb8:	cbnz	x0, c84 <gomp_map_fields_existing+0x1b0>
     bbc:	add	x20, x25, x20, lsl #3
     bc0:	ldr	x0, [sp, #120]
     bc4:	ldur	x1, [x20, #-8]
     bc8:	cmp	x1, x0
     bcc:	b.cs	c28 <gomp_map_fields_existing+0x154>  // b.hs, b.nlast
     bd0:	sub	x0, x0, #0x1
     bd4:	add	x1, sp, #0x78
     bd8:	str	x0, [sp, #120]
     bdc:	mov	x0, x28
     be0:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     be4:	mov	x1, x0
     be8:	ldr	x0, [sp, #120]
     bec:	add	x0, x0, #0x1
     bf0:	str	x0, [sp, #120]
     bf4:	cbz	x1, c28 <gomp_map_fields_existing+0x154>
     bf8:	ldr	x2, [x1, #16]
     bfc:	ldr	x0, [x19, #16]
     c00:	cmp	x2, x0
     c04:	b.ne	c28 <gomp_map_fields_existing+0x154>  // b.any
     c08:	ldr	x0, [x19]
     c0c:	ldr	x2, [x1]
     c10:	ldr	x3, [x19, #24]
     c14:	sub	x2, x2, x0
     c18:	ldr	x0, [x1, #24]
     c1c:	sub	x0, x0, x3
     c20:	cmp	x2, x0
     c24:	b.eq	b80 <gomp_map_fields_existing+0xac>  // b.none
     c28:	ldr	x0, [sp, #128]
     c2c:	add	x1, sp, #0x78
     c30:	add	x0, x0, #0x1
     c34:	str	x0, [sp, #128]
     c38:	mov	x0, x28
     c3c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     c40:	mov	x1, x0
     c44:	ldr	x0, [sp, #128]
     c48:	sub	x0, x0, #0x1
     c4c:	str	x0, [sp, #128]
     c50:	cbz	x1, c84 <gomp_map_fields_existing+0x1b0>
     c54:	ldr	x2, [x1, #16]
     c58:	ldr	x0, [x19, #16]
     c5c:	cmp	x2, x0
     c60:	b.ne	c84 <gomp_map_fields_existing+0x1b0>  // b.any
     c64:	ldr	x0, [x19]
     c68:	ldr	x2, [x1]
     c6c:	ldr	x3, [x19, #24]
     c70:	sub	x2, x2, x0
     c74:	ldr	x0, [x1, #24]
     c78:	sub	x0, x0, x3
     c7c:	cmp	x2, x0
     c80:	b.eq	b80 <gomp_map_fields_existing+0xac>  // b.none
     c84:	add	x0, x23, #0xa8
     c88:	bl	2f8 <gomp_mutex_unlock>
     c8c:	ldp	x1, x2, [sp, #120]
     c90:	adrp	x0, 0 <gomp_to_device_kind_p>
     c94:	add	x0, x0, #0x0
     c98:	bl	0 <gomp_fatal>

0000000000000c9c <gomp_free_device_memory>:
     c9c:	stp	x29, x30, [sp, #-32]!
     ca0:	mov	x29, sp
     ca4:	stp	x19, x20, [sp, #16]
     ca8:	mov	x19, x0
     cac:	mov	x20, x1
     cb0:	ldr	x2, [x0, #104]
     cb4:	ldr	w0, [x0, #12]
     cb8:	blr	x2
     cbc:	tst	w0, #0xff
     cc0:	b.ne	cdc <gomp_free_device_memory+0x40>  // b.any
     cc4:	add	x0, x19, #0xa8
     cc8:	bl	2f8 <gomp_mutex_unlock>
     ccc:	adrp	x0, 0 <gomp_to_device_kind_p>
     cd0:	mov	x1, x20
     cd4:	add	x0, x0, #0x0
     cd8:	bl	0 <gomp_fatal>
     cdc:	ldp	x19, x20, [sp, #16]
     ce0:	ldp	x29, x30, [sp], #32
     ce4:	ret

0000000000000ce8 <gomp_unmap_tgt>:
     ce8:	stp	x29, x30, [sp, #-32]!
     cec:	mov	x29, sp
     cf0:	str	x19, [sp, #16]
     cf4:	mov	x19, x0
     cf8:	ldr	x0, [x0, #24]
     cfc:	cbz	x0, d0c <gomp_unmap_tgt+0x24>
     d00:	ldr	x1, [x19, #32]
     d04:	ldr	x0, [x19, #56]
     d08:	bl	c9c <gomp_free_device_memory>
     d0c:	ldr	x0, [x19, #8]
     d10:	bl	0 <free>
     d14:	mov	x0, x19
     d18:	ldr	x19, [sp, #16]
     d1c:	ldp	x29, x30, [sp], #32
     d20:	b	0 <free>

0000000000000d24 <gomp_map_lookup>:
     d24:	ldp	x2, x3, [x1]
     d28:	cmp	x2, x3
     d2c:	b.eq	d34 <gomp_map_lookup+0x10>  // b.none
     d30:	b	0 <splay_tree_prefix_splay_tree_lookup>
     d34:	stp	x29, x30, [sp, #-32]!
     d38:	add	x2, x2, #0x1
     d3c:	mov	x29, sp
     d40:	stp	x19, x20, [sp, #16]
     d44:	mov	x19, x1
     d48:	mov	x20, x0
     d4c:	str	x2, [x1, #8]
     d50:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     d54:	ldr	x1, [x19, #8]
     d58:	sub	x1, x1, #0x1
     d5c:	str	x1, [x19, #8]
     d60:	cbnz	x0, da0 <gomp_map_lookup+0x7c>
     d64:	ldr	x0, [x19]
     d68:	mov	x1, x19
     d6c:	sub	x0, x0, #0x1
     d70:	str	x0, [x19]
     d74:	mov	x0, x20
     d78:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     d7c:	ldr	x1, [x19]
     d80:	add	x1, x1, #0x1
     d84:	str	x1, [x19]
     d88:	cbnz	x0, da0 <gomp_map_lookup+0x7c>
     d8c:	mov	x1, x19
     d90:	mov	x0, x20
     d94:	ldp	x19, x20, [sp, #16]
     d98:	ldp	x29, x30, [sp], #32
     d9c:	b	d30 <gomp_map_lookup+0xc>
     da0:	ldp	x19, x20, [sp, #16]
     da4:	ldp	x29, x30, [sp], #32
     da8:	ret

0000000000000dac <gomp_map_pointer>:
     dac:	stp	x29, x30, [sp, #-128]!
     db0:	mov	x29, sp
     db4:	stp	x19, x20, [sp, #16]
     db8:	mov	x19, x0
     dbc:	stp	x21, x22, [sp, #32]
     dc0:	mov	x21, x2
     dc4:	str	x1, [sp, #72]
     dc8:	ldr	x20, [x0, #56]
     dcc:	str	x23, [sp, #48]
     dd0:	cbnz	x1, e04 <gomp_map_pointer+0x58>
     dd4:	ldr	x1, [x0, #16]
     dd8:	str	xzr, [sp, #96]
     ddc:	add	x2, sp, #0x60
     de0:	add	x1, x21, x1
     de4:	mov	x0, x20
     de8:	mov	x3, #0x8                   	// #8
     dec:	bl	8bc <gomp_copy_host2dev>
     df0:	ldp	x19, x20, [sp, #16]
     df4:	ldp	x21, x22, [sp, #32]
     df8:	ldr	x23, [sp, #48]
     dfc:	ldp	x29, x30, [sp], #128
     e00:	ret
     e04:	add	x1, x1, x3
     e08:	mov	x22, x3
     e0c:	mov	x23, x4
     e10:	add	x0, x20, #0xa0
     e14:	stp	x1, x1, [sp, #72]
     e18:	add	x1, sp, #0x48
     e1c:	bl	d24 <gomp_map_lookup>
     e20:	cbnz	x0, e38 <gomp_map_pointer+0x8c>
     e24:	add	x0, x20, #0xa8
     e28:	bl	2f8 <gomp_mutex_unlock>
     e2c:	adrp	x0, 0 <gomp_to_device_kind_p>
     e30:	add	x0, x0, #0x0
     e34:	bl	0 <gomp_fatal>
     e38:	ldr	x2, [x0]
     e3c:	mov	x4, x23
     e40:	ldr	x1, [sp, #72]
     e44:	ldr	x3, [x0, #24]
     e48:	sub	x1, x1, x2
     e4c:	ldr	x2, [x0, #16]
     e50:	sub	x22, x3, x22
     e54:	str	x1, [sp, #72]
     e58:	ldr	x2, [x2, #16]
     e5c:	add	x1, x1, x2
     e60:	add	x1, x1, x22
     e64:	str	x1, [sp, #96]
     e68:	ldr	x1, [x19, #16]
     e6c:	b	ddc <gomp_map_pointer+0x30>

0000000000000e70 <gomp_get_target_fn_addr>:
     e70:	stp	x29, x30, [sp, #-112]!
     e74:	mov	x29, sp
     e78:	stp	x19, x20, [sp, #16]
     e7c:	mov	x20, x0
     e80:	ldr	w0, [x0, #8]
     e84:	str	x21, [sp, #32]
     e88:	mov	x19, x1
     e8c:	tbnz	w0, #1, eb4 <gomp_get_target_fn_addr+0x44>
     e90:	add	x21, x20, #0xa8
     e94:	mov	x0, x21
     e98:	bl	2d0 <gomp_mutex_lock>
     e9c:	ldr	w0, [x20, #172]
     ea0:	cmp	w0, #0x2
     ea4:	b.ne	ec8 <gomp_get_target_fn_addr+0x58>  // b.any
     ea8:	mov	x19, #0x0                   	// #0
     eac:	mov	x0, x21
     eb0:	bl	2f8 <gomp_mutex_unlock>
     eb4:	mov	x0, x19
     eb8:	ldp	x19, x20, [sp, #16]
     ebc:	ldr	x21, [sp, #32]
     ec0:	ldp	x29, x30, [sp], #112
     ec4:	ret
     ec8:	add	x1, sp, #0x38
     ecc:	add	x0, x20, #0xa0
     ed0:	str	x19, [sp, #56]
     ed4:	add	x19, x19, #0x1
     ed8:	str	x19, [sp, #64]
     edc:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     ee0:	mov	x19, x0
     ee4:	mov	x0, x21
     ee8:	bl	2f8 <gomp_mutex_unlock>
     eec:	cbz	x19, eb4 <gomp_get_target_fn_addr+0x44>
     ef0:	ldr	x19, [x19, #24]
     ef4:	b	eb4 <gomp_get_target_fn_addr+0x44>

0000000000000ef8 <gomp_copy_dev2host>:
     ef8:	stp	x29, x30, [sp, #-48]!
     efc:	mov	x29, sp
     f00:	stp	x19, x20, [sp, #16]
     f04:	mov	x19, x0
     f08:	mov	x20, x2
     f0c:	ldr	x4, [x0, #112]
     f10:	stp	x21, x22, [sp, #32]
     f14:	ldr	w0, [x0, #12]
     f18:	mov	x22, x1
     f1c:	mov	x21, x3
     f20:	blr	x4
     f24:	tst	w0, #0xff
     f28:	b.ne	f60 <gomp_copy_dev2host+0x68>  // b.any
     f2c:	add	x0, x19, #0xa8
     f30:	bl	2f8 <gomp_mutex_unlock>
     f34:	adrp	x4, 0 <gomp_to_device_kind_p>
     f38:	adrp	x1, 0 <gomp_to_device_kind_p>
     f3c:	adrp	x0, 0 <gomp_to_device_kind_p>
     f40:	add	x6, x22, x21
     f44:	mov	x5, x22
     f48:	add	x4, x4, #0x0
     f4c:	add	x3, x20, x21
     f50:	mov	x2, x20
     f54:	add	x1, x1, #0x0
     f58:	add	x0, x0, #0x0
     f5c:	bl	0 <gomp_fatal>
     f60:	ldp	x19, x20, [sp, #16]
     f64:	ldp	x21, x22, [sp, #32]
     f68:	ldp	x29, x30, [sp], #48
     f6c:	ret

0000000000000f70 <gomp_update>:
     f70:	stp	x29, x30, [sp, #-208]!
     f74:	mov	x29, sp
     f78:	stp	x19, x20, [sp, #16]
     f7c:	mov	x19, x0
     f80:	ands	w0, w5, #0xff
     f84:	stp	x21, x22, [sp, #32]
     f88:	mov	w22, #0xff                  	// #255
     f8c:	stp	x23, x24, [sp, #48]
     f90:	stp	x25, x26, [sp, #64]
     f94:	stp	x27, x28, [sp, #80]
     f98:	str	x3, [sp, #104]
     f9c:	str	w0, [sp, #136]
     fa0:	mov	w0, #0x7                   	// #7
     fa4:	csel	w22, w22, w0, ne  // ne = any
     fa8:	cbz	x19, 10dc <gomp_update+0x16c>
     fac:	mov	x21, x1
     fb0:	cbz	x1, 10dc <gomp_update+0x16c>
     fb4:	add	x20, x19, #0xa8
     fb8:	mov	x23, x2
     fbc:	mov	x0, x20
     fc0:	mov	x25, x4
     fc4:	bl	2d0 <gomp_mutex_lock>
     fc8:	mov	x24, #0x0                   	// #0
     fcc:	ldr	w0, [x19, #172]
     fd0:	cmp	w0, #0x2
     fd4:	b.eq	10d4 <gomp_update+0x164>  // b.none
     fd8:	add	x27, x19, #0xa0
     fdc:	mov	w28, #0xd                   	// #13
     fe0:	ldr	x0, [sp, #104]
     fe4:	ldr	x0, [x0, x24, lsl #3]
     fe8:	cbz	x0, 10c8 <gomp_update+0x158>
     fec:	ldr	x1, [x23, x24, lsl #3]
     ff0:	add	x0, x0, x1
     ff4:	stp	x1, x0, [sp, #152]
     ff8:	add	x1, sp, #0x98
     ffc:	mov	x0, x27
    1000:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1004:	mov	x26, x0
    1008:	cbz	x0, 10c8 <gomp_update+0x158>
    100c:	ldrb	w0, [sp, #136]
    1010:	mov	w2, w24
    1014:	mov	x1, x25
    1018:	bl	30 <get_kind>
    101c:	ldr	x2, [x26]
    1020:	ldr	x7, [sp, #152]
    1024:	cmp	x2, x7
    1028:	b.ls	1048 <gomp_update+0xd8>  // b.plast
    102c:	mov	x0, x20
    1030:	bl	2f8 <gomp_mutex_unlock>
    1034:	ldp	x3, x4, [x26]
    1038:	adrp	x0, 0 <gomp_to_device_kind_p>
    103c:	ldp	x1, x2, [sp, #152]
    1040:	add	x0, x0, #0x0
    1044:	bl	0 <gomp_fatal>
    1048:	ldr	x1, [x26, #8]
    104c:	ldr	x3, [sp, #160]
    1050:	cmp	x1, x3
    1054:	b.cc	102c <gomp_update+0xbc>  // b.lo, b.ul, b.last
    1058:	ldr	x1, [x26, #16]
    105c:	and	w5, w22, w0
    1060:	and	w0, w5, w28
    1064:	sub	x3, x3, x7
    1068:	cmp	w0, #0x1
    106c:	ldr	x1, [x1, #16]
    1070:	sub	x1, x1, x2
    1074:	ldr	x2, [x26, #24]
    1078:	add	x2, x7, x2
    107c:	add	x1, x1, x2
    1080:	b.ne	10ac <gomp_update+0x13c>  // b.any
    1084:	mov	x2, x7
    1088:	mov	x0, x19
    108c:	mov	x4, #0x0                   	// #0
    1090:	stp	x1, x7, [sp, #112]
    1094:	str	x3, [sp, #128]
    1098:	str	w5, [sp, #140]
    109c:	bl	8bc <gomp_copy_host2dev>
    10a0:	ldp	x1, x7, [sp, #112]
    10a4:	ldr	w5, [sp, #140]
    10a8:	ldr	x3, [sp, #128]
    10ac:	and	w5, w5, #0xe
    10b0:	cmp	w5, #0x2
    10b4:	b.ne	10c8 <gomp_update+0x158>  // b.any
    10b8:	mov	x2, x1
    10bc:	mov	x0, x19
    10c0:	mov	x1, x7
    10c4:	bl	ef8 <gomp_copy_dev2host>
    10c8:	add	x24, x24, #0x1
    10cc:	cmp	x21, x24
    10d0:	b.ne	fe0 <gomp_update+0x70>  // b.any
    10d4:	mov	x0, x20
    10d8:	bl	2f8 <gomp_mutex_unlock>
    10dc:	ldp	x19, x20, [sp, #16]
    10e0:	ldp	x21, x22, [sp, #32]
    10e4:	ldp	x23, x24, [sp, #48]
    10e8:	ldp	x25, x26, [sp, #64]
    10ec:	ldp	x27, x28, [sp, #80]
    10f0:	ldp	x29, x30, [sp], #208
    10f4:	ret

00000000000010f8 <gomp_exit_data>:
    10f8:	stp	x29, x30, [sp, #-176]!
    10fc:	mov	x29, sp
    1100:	stp	x19, x20, [sp, #16]
    1104:	mov	x20, x0
    1108:	stp	x21, x22, [sp, #32]
    110c:	add	x21, x0, #0xa8
    1110:	mov	x0, x21
    1114:	stp	x23, x24, [sp, #48]
    1118:	mov	x23, x2
    111c:	mov	x24, x3
    1120:	stp	x25, x26, [sp, #64]
    1124:	mov	x25, x4
    1128:	stp	x27, x28, [sp, #80]
    112c:	str	x1, [sp, #104]
    1130:	bl	2d0 <gomp_mutex_lock>
    1134:	ldr	w0, [x20, #172]
    1138:	cmp	w0, #0x2
    113c:	b.eq	1154 <gomp_exit_data+0x5c>  // b.none
    1140:	add	x22, x20, #0xa0
    1144:	mov	x19, #0x0                   	// #0
    1148:	ldr	x0, [sp, #104]
    114c:	cmp	x19, x0
    1150:	b.ne	1178 <gomp_exit_data+0x80>  // b.any
    1154:	mov	x0, x21
    1158:	bl	2f8 <gomp_mutex_unlock>
    115c:	ldp	x19, x20, [sp, #16]
    1160:	ldp	x21, x22, [sp, #32]
    1164:	ldp	x23, x24, [sp, #48]
    1168:	ldp	x25, x26, [sp, #64]
    116c:	ldp	x27, x28, [sp, #80]
    1170:	ldp	x29, x30, [sp], #176
    1174:	ret
    1178:	ldrh	w0, [x25, x19, lsl #1]
    117c:	and	w26, w0, #0xff
    1180:	cmp	w26, #0x1f
    1184:	b.hi	12a8 <gomp_exit_data+0x1b0>  // b.pmore
    1188:	mov	x0, #0x1                   	// #1
    118c:	mov	x1, #0x8084                	// #32900
    1190:	lsl	x0, x0, x26
    1194:	movk	x1, #0x8084, lsl #16
    1198:	tst	x0, x1
    119c:	b.eq	12a8 <gomp_exit_data+0x1b0>  // b.none
    11a0:	ldr	x1, [x23, x19, lsl #3]
    11a4:	cmp	w26, #0x1f
    11a8:	ldr	x0, [x24, x19, lsl #3]
    11ac:	cset	w28, eq  // eq = none
    11b0:	add	x0, x0, x1
    11b4:	stp	x1, x0, [sp, #120]
    11b8:	and	w0, w26, #0xffffffef
    11bc:	cmp	w0, #0xf
    11c0:	add	x1, sp, #0x78
    11c4:	mov	x0, x22
    11c8:	b.ne	11e0 <gomp_exit_data+0xe8>  // b.any
    11cc:	bl	3bc <gomp_map_0len_lookup>
    11d0:	mov	x27, x0
    11d4:	cbnz	x0, 11e8 <gomp_exit_data+0xf0>
    11d8:	add	x19, x19, #0x1
    11dc:	b	1148 <gomp_exit_data+0x50>
    11e0:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    11e4:	b	11d0 <gomp_exit_data+0xd8>
    11e8:	ldr	x0, [x0, #32]
    11ec:	sub	x0, x0, #0x1
    11f0:	cmn	x0, #0x3
    11f4:	b.hi	11fc <gomp_exit_data+0x104>  // b.pmore
    11f8:	str	x0, [x27, #32]
    11fc:	cmp	w28, #0x0
    1200:	ccmp	w26, #0x7, #0x4, eq  // eq = none
    1204:	b.ne	128c <gomp_exit_data+0x194>  // b.any
    1208:	ldr	x0, [x27, #32]
    120c:	cmn	x0, #0x1
    1210:	b.eq	12cc <gomp_exit_data+0x1d4>  // b.none
    1214:	str	xzr, [x27, #32]
    1218:	cmp	w26, #0x2
    121c:	b.ne	12c0 <gomp_exit_data+0x1c8>  // b.any
    1220:	ldr	x0, [x27, #16]
    1224:	ldp	x1, x3, [sp, #120]
    1228:	ldr	x2, [x0, #16]
    122c:	ldr	x0, [x27]
    1230:	sub	x3, x3, x1
    1234:	sub	x2, x2, x0
    1238:	ldr	x0, [x27, #24]
    123c:	add	x0, x1, x0
    1240:	add	x2, x2, x0
    1244:	mov	x0, x20
    1248:	bl	ef8 <gomp_copy_dev2host>
    124c:	ldr	x0, [x27, #32]
    1250:	cbnz	x0, 11d8 <gomp_exit_data+0xe0>
    1254:	mov	x1, x27
    1258:	mov	x0, x22
    125c:	bl	0 <splay_tree_prefix_splay_tree_remove>
    1260:	ldr	x1, [x27, #48]
    1264:	cbz	x1, 1270 <gomp_exit_data+0x178>
    1268:	mov	x0, x22
    126c:	bl	0 <splay_tree_prefix_splay_tree_insert>
    1270:	ldr	x0, [x27, #16]
    1274:	ldr	x1, [x0]
    1278:	cmp	x1, #0x1
    127c:	b.ls	12a0 <gomp_exit_data+0x1a8>  // b.plast
    1280:	sub	x1, x1, #0x1
    1284:	str	x1, [x0]
    1288:	b	11d8 <gomp_exit_data+0xe0>
    128c:	cmp	w26, #0x2
    1290:	b.ne	12d4 <gomp_exit_data+0x1dc>  // b.any
    1294:	ldr	x0, [x27, #32]
    1298:	cbnz	x0, 11d8 <gomp_exit_data+0xe0>
    129c:	b	1220 <gomp_exit_data+0x128>
    12a0:	bl	ce8 <gomp_unmap_tgt>
    12a4:	b	11d8 <gomp_exit_data+0xe0>
    12a8:	mov	x0, x21
    12ac:	bl	2f8 <gomp_mutex_unlock>
    12b0:	adrp	x0, 0 <gomp_to_device_kind_p>
    12b4:	mov	w1, w26
    12b8:	add	x0, x0, #0x0
    12bc:	bl	0 <gomp_fatal>
    12c0:	cmp	w26, #0x12
    12c4:	b.ne	1254 <gomp_exit_data+0x15c>  // b.any
    12c8:	b	1220 <gomp_exit_data+0x128>
    12cc:	cmp	w26, #0x2
    12d0:	b.eq	11d8 <gomp_exit_data+0xe0>  // b.none
    12d4:	cmp	w26, #0x12
    12d8:	b.ne	124c <gomp_exit_data+0x154>  // b.any
    12dc:	b	1220 <gomp_exit_data+0x128>

00000000000012e0 <gomp_init_targets_once>:
    12e0:	adrp	x0, 0 <gomp_to_device_kind_p>
    12e4:	add	x0, x0, #0x0
    12e8:	add	x0, x0, #0x14
    12ec:	adrp	x1, 0 <gomp_to_device_kind_p>
    12f0:	add	x1, x1, #0x0
    12f4:	b	0 <pthread_once>

00000000000012f8 <gomp_get_num_devices>:
    12f8:	stp	x29, x30, [sp, #-16]!
    12fc:	mov	x29, sp
    1300:	bl	12e0 <gomp_init_targets_once>
    1304:	adrp	x0, 0 <gomp_to_device_kind_p>
    1308:	ldp	x29, x30, [sp], #16
    130c:	ldr	w0, [x0]
    1310:	ret

0000000000001314 <gomp_map_vars>:
    1314:	stp	x29, x30, [sp, #-336]!
    1318:	mov	x29, sp
    131c:	stp	x23, x24, [sp, #48]
    1320:	mov	x23, x0
    1324:	ands	w0, w6, #0xff
    1328:	str	w0, [x29, #180]
    132c:	mov	w0, #0x8                   	// #8
    1330:	str	x1, [x29, #216]
    1334:	mov	w1, #0x3                   	// #3
    1338:	csel	w0, w1, w0, eq  // eq = none
    133c:	str	w0, [x29, #172]
    1340:	ldr	w0, [x29, #180]
    1344:	mov	w1, #0x7                   	// #7
    1348:	mov	x24, x2
    134c:	stp	x19, x20, [sp, #16]
    1350:	cmp	w0, #0x0
    1354:	mov	w0, #0xff                  	// #255
    1358:	csel	w0, w1, w0, eq  // eq = none
    135c:	str	w0, [x29, #176]
    1360:	ldr	x0, [x29, #216]
    1364:	stp	x21, x22, [sp, #32]
    1368:	mov	x22, x3
    136c:	add	x0, x0, #0x2
    1370:	stp	x25, x26, [sp, #64]
    1374:	mov	x25, x4
    1378:	lsl	x0, x0, #5
    137c:	stp	x27, x28, [sp, #80]
    1380:	str	w7, [x29, #168]
    1384:	str	x5, [x29, #192]
    1388:	bl	0 <gomp_malloc>
    138c:	mov	x19, x0
    1390:	ldr	x0, [x29, #216]
    1394:	stp	x0, x23, [x19, #48]
    1398:	ldr	w0, [x29, #168]
    139c:	cmp	w0, #0x3
    13a0:	cset	x0, ne  // ne = any
    13a4:	str	x0, [x19]
    13a8:	ldr	x0, [x29, #216]
    13ac:	cbnz	x0, 13d8 <gomp_map_vars+0xc4>
    13b0:	stp	xzr, xzr, [x19, #16]
    13b4:	mov	sp, x29
    13b8:	mov	x0, x19
    13bc:	ldp	x19, x20, [sp, #16]
    13c0:	ldp	x21, x22, [sp, #32]
    13c4:	ldp	x23, x24, [sp, #48]
    13c8:	ldp	x25, x26, [sp, #64]
    13cc:	ldp	x27, x28, [sp, #80]
    13d0:	ldp	x29, x30, [sp], #336
    13d4:	ret
    13d8:	mov	x0, #0xffffffffffffffff    	// #-1
    13dc:	stp	xzr, x0, [x29, #256]
    13e0:	ldr	w0, [x29, #168]
    13e4:	str	xzr, [x29, #240]
    13e8:	cmp	w0, #0x1
    13ec:	str	xzr, [x29, #272]
    13f0:	cset	w0, eq  // eq = none
    13f4:	str	w0, [x29, #136]
    13f8:	cmp	w0, #0x0
    13fc:	ldr	x0, [x29, #216]
    1400:	ccmp	x0, #0x1, #0x2, eq  // eq = none
    1404:	b.hi	1474 <gomp_map_vars+0x160>  // b.pmore
    1408:	mov	x26, #0x8                   	// #8
    140c:	str	xzr, [x29, #184]
    1410:	add	x0, x23, #0xa8
    1414:	str	x0, [x29, #200]
    1418:	bl	2d0 <gomp_mutex_lock>
    141c:	ldr	w0, [x23, #172]
    1420:	cmp	w0, #0x2
    1424:	b.eq	14dc <gomp_map_vars+0x1c8>  // b.none
    1428:	ldr	x20, [x29, #184]
    142c:	add	x0, x23, #0xa0
    1430:	mov	x28, #0x0                   	// #0
    1434:	mov	x27, #0x0                   	// #0
    1438:	str	wzr, [x29, #152]
    143c:	str	x0, [x29, #208]
    1440:	add	x0, x19, #0x40
    1444:	str	x0, [x29, #128]
    1448:	ldr	x0, [x29, #216]
    144c:	cmp	x27, x0
    1450:	b.cc	14f4 <gomp_map_vars+0x1e0>  // b.lo, b.ul, b.last
    1454:	cbz	x22, 1994 <gomp_map_vars+0x680>
    1458:	cmp	x0, #0x1
    145c:	b.eq	1910 <gomp_map_vars+0x5fc>  // b.none
    1460:	ldr	x0, [x29, #200]
    1464:	bl	2f8 <gomp_mutex_unlock>
    1468:	adrp	x0, 0 <gomp_to_device_kind_p>
    146c:	add	x0, x0, #0x0
    1470:	b	1580 <gomp_map_vars+0x26c>
    1474:	ldr	x0, [x29, #216]
    1478:	ldr	w1, [x29, #168]
    147c:	lsl	x0, x0, #4
    1480:	cmp	w1, #0x1
    1484:	add	x0, x0, #0x10
    1488:	sub	sp, sp, x0
    148c:	mov	x0, sp
    1490:	str	x0, [x29, #256]
    1494:	b.eq	14a0 <gomp_map_vars+0x18c>  // b.none
    1498:	str	xzr, [x29, #264]
    149c:	b	1408 <gomp_map_vars+0xf4>
    14a0:	ldr	x1, [x29, #216]
    14a4:	mov	x26, #0x20                  	// #32
    14a8:	str	xzr, [x0]
    14ac:	lsl	x1, x1, #3
    14b0:	str	x1, [x29, #184]
    14b4:	mov	x1, #0x1                   	// #1
    14b8:	str	x1, [x29, #264]
    14bc:	ldr	x1, [x29, #216]
    14c0:	cmp	x1, #0x1
    14c4:	cset	x1, hi  // hi = pmore
    14c8:	add	x1, x1, #0x1
    14cc:	str	x1, [x29, #272]
    14d0:	ldr	x1, [x29, #184]
    14d4:	str	x1, [x0, #8]
    14d8:	b	1410 <gomp_map_vars+0xfc>
    14dc:	ldr	x0, [x29, #200]
    14e0:	bl	2f8 <gomp_mutex_unlock>
    14e4:	mov	x0, x19
    14e8:	mov	x19, #0x0                   	// #0
    14ec:	bl	0 <free>
    14f0:	b	13b4 <gomp_map_vars+0xa0>
    14f4:	ldrb	w0, [x29, #180]
    14f8:	mov	w2, w27
    14fc:	ldr	x1, [x29, #192]
    1500:	add	x21, x27, #0x2
    1504:	bl	30 <get_kind>
    1508:	str	w0, [x29, #160]
    150c:	lsl	x2, x27, #3
    1510:	add	x5, x24, x27, lsl #3
    1514:	ldr	x0, [x24, x2]
    1518:	cbz	x0, 1530 <gomp_map_vars+0x21c>
    151c:	ldr	w3, [x29, #160]
    1520:	ldr	w1, [x29, #176]
    1524:	and	w4, w1, w3
    1528:	cmp	w4, #0xd
    152c:	b.ne	154c <gomp_map_vars+0x238>  // b.any
    1530:	lsl	x3, x21, #5
    1534:	add	x0, x19, x27, lsl #5
    1538:	mov	x1, #0xffffffffffffffff    	// #-1
    153c:	str	xzr, [x19, x3]
    1540:	str	x1, [x0, #80]
    1544:	add	x27, x27, #0x1
    1548:	b	1448 <gomp_map_vars+0x134>
    154c:	cmp	w4, #0xe
    1550:	b.ne	15ac <gomp_map_vars+0x298>  // b.any
    1554:	stp	x0, x0, [x29, #280]
    1558:	add	x1, x29, #0x118
    155c:	ldr	x0, [x29, #208]
    1560:	str	x2, [x29, #160]
    1564:	bl	d24 <gomp_map_lookup>
    1568:	ldr	x2, [x29, #160]
    156c:	cbnz	x0, 1584 <gomp_map_vars+0x270>
    1570:	ldr	x0, [x29, #200]
    1574:	bl	2f8 <gomp_mutex_unlock>
    1578:	adrp	x0, 0 <gomp_to_device_kind_p>
    157c:	add	x0, x0, #0x0
    1580:	bl	0 <gomp_fatal>
    1584:	ldr	x4, [x0]
    1588:	ldr	x1, [x29, #280]
    158c:	sub	x1, x1, x4
    1590:	str	x1, [x29, #280]
    1594:	ldp	x4, x0, [x0, #16]
    1598:	ldr	x4, [x4, #16]
    159c:	add	x1, x1, x4
    15a0:	add	x1, x1, x0
    15a4:	str	x1, [x24, x2]
    15a8:	b	1530 <gomp_map_vars+0x21c>
    15ac:	add	x8, x27, #0x1
    15b0:	cmp	w4, #0x1c
    15b4:	b.ne	1720 <gomp_map_vars+0x40c>  // b.any
    15b8:	ldr	x2, [x25, x2]
    15bc:	str	x0, [x29, #280]
    15c0:	lsl	x3, x21, #5
    15c4:	add	x6, x19, x27, lsl #5
    15c8:	add	x1, x2, x27
    15cc:	str	x1, [x29, #144]
    15d0:	stp	x8, x5, [x29, #104]
    15d4:	lsl	x1, x1, #3
    15d8:	str	xzr, [x19, x3]
    15dc:	str	x2, [x29, #120]
    15e0:	ldr	x0, [x24, x1]
    15e4:	ldr	x1, [x25, x1]
    15e8:	add	x0, x0, x1
    15ec:	str	x0, [x29, #288]
    15f0:	mov	x0, #0xfffffffffffffffd    	// #-3
    15f4:	str	x0, [x6, #80]
    15f8:	ldr	x0, [x29, #208]
    15fc:	add	x1, x29, #0x118
    1600:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1604:	mov	x21, x0
    1608:	ldp	x8, x5, [x29, #104]
    160c:	ldr	x2, [x29, #120]
    1610:	cbnz	x0, 1718 <gomp_map_vars+0x404>
    1614:	ldrb	w1, [x29, #172]
    1618:	add	x28, x28, x2
    161c:	ldr	w0, [x29, #160]
    1620:	asr	w21, w0, w1
    1624:	mov	x1, #0x1                   	// #1
    1628:	lsl	x21, x1, x21
    162c:	cmp	x26, x21
    1630:	ldr	x1, [x5, #8]
    1634:	csel	x26, x26, x21, cs  // cs = hs, nlast
    1638:	ldr	x0, [x29, #280]
    163c:	sub	x20, x20, x1
    1640:	sub	x1, x0, #0x1
    1644:	add	x20, x20, x1
    1648:	add	x20, x20, x21
    164c:	neg	x21, x21
    1650:	and	x21, x21, x20
    1654:	ldr	x20, [x29, #288]
    1658:	sub	x20, x20, x0
    165c:	add	x20, x20, x21
    1660:	ldr	x0, [x29, #144]
    1664:	cmp	x8, x0
    1668:	b.ls	1674 <gomp_map_vars+0x360>  // b.plast
    166c:	sub	x27, x8, #0x1
    1670:	b	1544 <gomp_map_vars+0x230>
    1674:	ldr	x1, [x29, #128]
    1678:	lsl	x0, x8, #5
    167c:	mov	w2, w8
    1680:	str	x8, [x29, #160]
    1684:	str	xzr, [x1, x0]
    1688:	ldrb	w0, [x29, #180]
    168c:	ldr	x1, [x29, #192]
    1690:	bl	30 <get_kind>
    1694:	ldr	w1, [x29, #176]
    1698:	and	w0, w0, w1
    169c:	bl	0 <gomp_to_device_kind_p>
    16a0:	tst	w0, #0xff
    16a4:	ldr	x8, [x29, #160]
    16a8:	b.eq	16cc <gomp_map_vars+0x3b8>  // b.none
    16ac:	ldr	x2, [x25, x8, lsl #3]
    16b0:	ldr	x0, [x29, #288]
    16b4:	ldr	x1, [x24, x8, lsl #3]
    16b8:	sub	x0, x20, x0
    16bc:	add	x1, x1, x0
    16c0:	add	x0, x29, #0xf0
    16c4:	bl	6c8 <gomp_coalesce_buf_add>
    16c8:	ldr	x8, [x29, #160]
    16cc:	add	x8, x8, #0x1
    16d0:	b	1660 <gomp_map_vars+0x34c>
    16d4:	ldr	x6, [x29, #192]
    16d8:	mov	x3, x27
    16dc:	mov	x2, x8
    16e0:	mov	x5, x25
    16e4:	mov	x4, x24
    16e8:	mov	x1, x21
    16ec:	mov	x0, x19
    16f0:	mov	x7, #0x0                   	// #0
    16f4:	str	x8, [x29, #160]
    16f8:	bl	ad4 <gomp_map_fields_existing>
    16fc:	ldr	x8, [x29, #160]
    1700:	add	x27, x27, #0x1
    1704:	ldr	x0, [x29, #144]
    1708:	cmp	x27, x0
    170c:	b.ls	16d4 <gomp_map_vars+0x3c0>  // b.plast
    1710:	sub	x27, x27, #0x1
    1714:	b	1544 <gomp_map_vars+0x230>
    1718:	mov	x27, x8
    171c:	b	1704 <gomp_map_vars+0x3f0>
    1720:	cmp	w4, #0x1d
    1724:	b.ne	1748 <gomp_map_vars+0x434>  // b.any
    1728:	lsl	x3, x21, #5
    172c:	add	x0, x19, x27, lsl #5
    1730:	mov	x1, #0xfffffffffffffffe    	// #-2
    1734:	str	xzr, [x19, x3]
    1738:	str	x1, [x0, #80]
    173c:	mov	w0, #0x1                   	// #1
    1740:	str	w0, [x29, #152]
    1744:	b	1544 <gomp_map_vars+0x230>
    1748:	str	x0, [x29, #280]
    174c:	cmp	w4, #0x4
    1750:	b.eq	17c0 <gomp_map_vars+0x4ac>  // b.none
    1754:	ldr	x2, [x25, x2]
    1758:	add	x2, x0, x2
    175c:	str	x2, [x29, #288]
    1760:	cmp	w4, #0xc
    1764:	b.ne	17c8 <gomp_map_vars+0x4b4>  // b.any
    1768:	lsl	x3, x21, #5
    176c:	ldr	w1, [x29, #160]
    1770:	mov	x7, #0x1                   	// #1
    1774:	sub	x20, x20, #0x1
    1778:	sub	x2, x2, x0
    177c:	add	x0, x29, #0xf0
    1780:	str	xzr, [x19, x3]
    1784:	ldrb	w3, [x29, #172]
    1788:	asr	w21, w1, w3
    178c:	lsl	x21, x7, x21
    1790:	cmp	x26, x21
    1794:	add	x20, x20, x21
    1798:	csel	x26, x26, x21, cs  // cs = hs, nlast
    179c:	neg	x21, x21
    17a0:	and	x21, x21, x20
    17a4:	mov	x1, x21
    17a8:	bl	6c8 <gomp_coalesce_buf_add>
    17ac:	ldp	x1, x20, [x29, #280]
    17b0:	str	w7, [x29, #152]
    17b4:	sub	x20, x20, x1
    17b8:	add	x20, x20, x21
    17bc:	b	1544 <gomp_map_vars+0x230>
    17c0:	add	x2, x0, #0x8
    17c4:	b	175c <gomp_map_vars+0x448>
    17c8:	str	w4, [x29, #144]
    17cc:	add	x1, x29, #0x118
    17d0:	cmp	w4, #0xf
    17d4:	ldr	x0, [x29, #208]
    17d8:	b.ne	1800 <gomp_map_vars+0x4ec>  // b.any
    17dc:	bl	3bc <gomp_map_0len_lookup>
    17e0:	mov	x1, x0
    17e4:	ldr	w4, [x29, #144]
    17e8:	cbnz	x0, 1810 <gomp_map_vars+0x4fc>
    17ec:	lsl	x3, x21, #5
    17f0:	add	x0, x19, x27, lsl #5
    17f4:	mov	x1, #0xfffffffffffffffe    	// #-2
    17f8:	str	xzr, [x19, x3]
    17fc:	b	1540 <gomp_map_vars+0x22c>
    1800:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1804:	mov	x1, x0
    1808:	ldr	w4, [x29, #144]
    180c:	cbz	x0, 1834 <gomp_map_vars+0x520>
    1810:	ldr	x0, [x1, #32]
    1814:	cmn	x0, #0x2
    1818:	b.eq	1834 <gomp_map_vars+0x520>  // b.none
    181c:	add	x3, x19, x21, lsl #5
    1820:	add	x2, x29, #0x118
    1824:	mov	x0, x23
    1828:	mov	x5, #0x0                   	// #0
    182c:	bl	9f0 <gomp_map_vars_existing>
    1830:	b	1544 <gomp_map_vars+0x230>
    1834:	ldr	w0, [x29, #160]
    1838:	lsl	x3, x21, #5
    183c:	ldrb	w1, [x29, #172]
    1840:	sub	x20, x20, #0x1
    1844:	str	w4, [x29, #160]
    1848:	str	xzr, [x19, x3]
    184c:	asr	w21, w0, w1
    1850:	mov	x1, #0x1                   	// #1
    1854:	lsl	x21, x1, x21
    1858:	cmp	x26, x21
    185c:	csel	x26, x26, x21, cs  // cs = hs, nlast
    1860:	add	x20, x20, x21
    1864:	mov	w0, w4
    1868:	add	x28, x28, x1
    186c:	neg	x21, x21
    1870:	bl	0 <gomp_to_device_kind_p>
    1874:	ldr	w4, [x29, #160]
    1878:	and	x21, x21, x20
    187c:	tst	w0, #0xff
    1880:	b.eq	18a0 <gomp_map_vars+0x58c>  // b.none
    1884:	ldp	x0, x2, [x29, #280]
    1888:	mov	x1, x21
    188c:	str	w4, [x29, #160]
    1890:	sub	x2, x2, x0
    1894:	add	x0, x29, #0xf0
    1898:	bl	6c8 <gomp_coalesce_buf_add>
    189c:	ldr	w4, [x29, #160]
    18a0:	ldp	x7, x5, [x29, #280]
    18a4:	cmp	w4, #0x5
    18a8:	sub	x20, x5, x7
    18ac:	add	x20, x20, x21
    18b0:	b.ne	1544 <gomp_map_vars+0x230>  // b.any
    18b4:	ldr	x0, [x29, #216]
    18b8:	add	x3, x27, #0x1
    18bc:	cmp	x0, x3
    18c0:	b.eq	1544 <gomp_map_vars+0x230>  // b.none
    18c4:	ldrb	w0, [x29, #180]
    18c8:	mov	w2, w3
    18cc:	ldr	x1, [x29, #192]
    18d0:	bl	30 <get_kind>
    18d4:	ldr	w1, [x29, #176]
    18d8:	and	w0, w0, w1
    18dc:	cmp	w0, #0x4
    18e0:	b.ne	1544 <gomp_map_vars+0x230>  // b.any
    18e4:	ldr	x0, [x24, x3, lsl #3]
    18e8:	cmp	x7, x0
    18ec:	b.hi	1544 <gomp_map_vars+0x230>  // b.pmore
    18f0:	add	x0, x0, #0x8
    18f4:	cmp	x5, x0
    18f8:	b.cc	1544 <gomp_map_vars+0x230>  // b.lo, b.ul, b.last
    18fc:	ldr	x1, [x29, #128]
    1900:	lsl	x0, x3, #5
    1904:	mov	x27, x3
    1908:	str	xzr, [x1, x0]
    190c:	b	18b4 <gomp_map_vars+0x5a0>
    1910:	ldr	x1, [x22]
    1914:	mov	x22, #0x0                   	// #0
    1918:	ldr	x0, [x25]
    191c:	str	x1, [x19, #32]
    1920:	add	x0, x0, x1
    1924:	stp	x1, x0, [x19, #16]
    1928:	ldr	w0, [x29, #152]
    192c:	str	xzr, [x19, #8]
    1930:	cmp	x28, #0x0
    1934:	ccmp	w0, #0x0, #0x0, eq  // eq = none
    1938:	b.ne	1a4c <gomp_map_vars+0x738>  // b.any
    193c:	ldr	w0, [x29, #168]
    1940:	cmp	w0, #0x1
    1944:	b.ne	20a0 <gomp_map_vars+0xd8c>  // b.any
    1948:	mov	x20, #0x0                   	// #0
    194c:	mov	x2, x20
    1950:	mov	x1, x24
    1954:	mov	x0, x19
    1958:	bl	76c <gomp_map_val>
    195c:	ldr	x1, [x19, #16]
    1960:	mov	x4, x22
    1964:	add	x2, x29, #0x130
    1968:	mov	x3, #0x8                   	// #8
    196c:	str	x0, [x29, #304]
    1970:	mov	x0, x23
    1974:	add	x1, x1, x20, lsl #3
    1978:	bl	8bc <gomp_copy_host2dev>
    197c:	ldr	x0, [x29, #216]
    1980:	add	x20, x20, #0x1
    1984:	cmp	x0, x20
    1988:	b.ne	194c <gomp_map_vars+0x638>  // b.any
    198c:	cbnz	x22, 20a4 <gomp_map_vars+0xd90>
    1990:	b	20e0 <gomp_map_vars+0xdcc>
    1994:	ldr	w0, [x29, #136]
    1998:	cmp	x28, #0x0
    199c:	ccmp	w0, #0x0, #0x0, eq  // eq = none
    19a0:	b.eq	1a40 <gomp_map_vars+0x72c>  // b.none
    19a4:	ldr	w0, [x23, #12]
    19a8:	add	x1, x26, x20
    19ac:	ldr	x2, [x23, #96]
    19b0:	sub	x1, x1, #0x1
    19b4:	blr	x2
    19b8:	str	x0, [x19, #32]
    19bc:	cbnz	x0, 19d4 <gomp_map_vars+0x6c0>
    19c0:	ldr	x0, [x29, #200]
    19c4:	bl	2f8 <gomp_mutex_unlock>
    19c8:	adrp	x0, 0 <gomp_to_device_kind_p>
    19cc:	add	x0, x0, #0x0
    19d0:	b	1580 <gomp_map_vars+0x26c>
    19d4:	sub	x1, x26, #0x1
    19d8:	neg	x26, x26
    19dc:	add	x0, x0, x1
    19e0:	and	x26, x0, x26
    19e4:	str	x26, [x19, #16]
    19e8:	ldr	x0, [x29, #272]
    19ec:	add	x26, x26, x20
    19f0:	str	x26, [x19, #24]
    19f4:	cmp	x0, #0x1
    19f8:	b.ne	1a08 <gomp_map_vars+0x6f4>  // b.any
    19fc:	ldr	x0, [x29, #264]
    1a00:	sub	x0, x0, #0x1
    1a04:	str	x0, [x29, #264]
    1a08:	ldr	x0, [x29, #264]
    1a0c:	cmp	x0, #0x0
    1a10:	b.le	1928 <gomp_map_vars+0x614>
    1a14:	ldr	x1, [x29, #256]
    1a18:	add	x0, x1, x0, lsl #4
    1a1c:	ldur	x2, [x0, #-8]
    1a20:	ldr	x0, [x1]
    1a24:	sub	x0, x2, x0
    1a28:	bl	0 <malloc>
    1a2c:	str	x0, [x29, #240]
    1a30:	cbz	x0, 1928 <gomp_map_vars+0x614>
    1a34:	add	x22, x29, #0xf0
    1a38:	str	x19, [x29, #248]
    1a3c:	b	1928 <gomp_map_vars+0x614>
    1a40:	stp	xzr, xzr, [x19, #16]
    1a44:	str	xzr, [x19, #32]
    1a48:	b	1928 <gomp_map_vars+0x614>
    1a4c:	cbz	x28, 1a60 <gomp_map_vars+0x74c>
    1a50:	mov	x0, #0x48                  	// #72
    1a54:	mul	x0, x28, x0
    1a58:	bl	0 <gomp_malloc>
    1a5c:	str	x0, [x19, #8]
    1a60:	ldr	x27, [x19, #8]
    1a64:	mov	x0, #0xffffffffffffffff    	// #-1
    1a68:	mov	x20, #0x0                   	// #0
    1a6c:	str	xzr, [x29, #136]
    1a70:	stp	xzr, x0, [x29, #152]
    1a74:	add	x0, x29, #0x130
    1a78:	str	x0, [x29, #112]
    1a7c:	ldr	x0, [x29, #216]
    1a80:	cmp	x20, x0
    1a84:	b.cs	193c <gomp_map_vars+0x628>  // b.hs, b.nlast
    1a88:	add	x21, x19, x20, lsl #5
    1a8c:	lsl	x0, x20, #5
    1a90:	str	x0, [x29, #144]
    1a94:	ldr	x0, [x21, #64]
    1a98:	cbnz	x0, 1b00 <gomp_map_vars+0x7ec>
    1a9c:	ldrb	w0, [x29, #180]
    1aa0:	lsl	x28, x20, #3
    1aa4:	ldr	x1, [x29, #192]
    1aa8:	mov	w2, w20
    1aac:	bl	30 <get_kind>
    1ab0:	str	w0, [x29, #144]
    1ab4:	ldr	x2, [x24, x28]
    1ab8:	add	x3, x24, x20, lsl #3
    1abc:	cbz	x2, 1b00 <gomp_map_vars+0x7ec>
    1ac0:	ldr	x0, [x29, #184]
    1ac4:	ldr	w1, [x29, #144]
    1ac8:	sub	x0, x0, #0x1
    1acc:	str	x0, [x29, #128]
    1ad0:	ldr	w0, [x29, #176]
    1ad4:	and	w4, w0, w1
    1ad8:	add	x0, x20, #0x1
    1adc:	str	x0, [x29, #120]
    1ae0:	cmp	w4, #0x1c
    1ae4:	b.eq	1bc0 <gomp_map_vars+0x8ac>  // b.none
    1ae8:	b.gt	1b08 <gomp_map_vars+0x7f4>
    1aec:	cmp	w4, #0xc
    1af0:	b.eq	1b70 <gomp_map_vars+0x85c>  // b.none
    1af4:	sub	w0, w4, #0xd
    1af8:	cmp	w0, #0x2
    1afc:	b.hi	1b10 <gomp_map_vars+0x7fc>  // b.pmore
    1b00:	add	x20, x20, #0x1
    1b04:	b	1a7c <gomp_map_vars+0x768>
    1b08:	cmp	w4, #0x1d
    1b0c:	b.eq	1ca4 <gomp_map_vars+0x990>  // b.none
    1b10:	str	x2, [x27]
    1b14:	cmp	w4, #0x4
    1b18:	b.eq	1d94 <gomp_map_vars+0xa80>  // b.none
    1b1c:	ldr	x0, [x25, x28]
    1b20:	add	x2, x2, x0
    1b24:	ldr	x0, [x29, #208]
    1b28:	str	x2, [x27, #8]
    1b2c:	mov	x1, x27
    1b30:	str	w4, [x29, #104]
    1b34:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1b38:	mov	x26, x0
    1b3c:	ldr	w4, [x29, #104]
    1b40:	cbz	x0, 1d9c <gomp_map_vars+0xa88>
    1b44:	ldr	x0, [x0, #32]
    1b48:	cmn	x0, #0x2
    1b4c:	b.eq	1d9c <gomp_map_vars+0xa88>  // b.none
    1b50:	add	x3, x20, #0x2
    1b54:	mov	x5, x22
    1b58:	mov	x2, x27
    1b5c:	mov	x1, x26
    1b60:	add	x3, x19, x3, lsl #5
    1b64:	mov	x0, x23
    1b68:	bl	9f0 <gomp_map_vars_existing>
    1b6c:	b	1b00 <gomp_map_vars+0x7ec>
    1b70:	ldrb	w1, [x29, #172]
    1b74:	mov	x4, x22
    1b78:	ldr	w0, [x29, #144]
    1b7c:	asr	w0, w0, w1
    1b80:	mov	x1, #0x1                   	// #1
    1b84:	lsl	x0, x1, x0
    1b88:	ldr	x1, [x29, #128]
    1b8c:	add	x26, x1, x0
    1b90:	neg	x0, x0
    1b94:	and	x26, x26, x0
    1b98:	mov	x0, x23
    1b9c:	ldr	x1, [x19, #16]
    1ba0:	str	x26, [x21, #80]
    1ba4:	ldr	x21, [x25, x28]
    1ba8:	add	x1, x26, x1
    1bac:	mov	x3, x21
    1bb0:	bl	8bc <gomp_copy_host2dev>
    1bb4:	add	x0, x26, x21
    1bb8:	str	x0, [x29, #184]
    1bbc:	b	1b00 <gomp_map_vars+0x7ec>
    1bc0:	ldr	x26, [x25, x28]
    1bc4:	add	x26, x20, x26
    1bc8:	lsl	x1, x26, #3
    1bcc:	ldr	x0, [x24, x1]
    1bd0:	ldr	x1, [x25, x1]
    1bd4:	add	x0, x0, x1
    1bd8:	stp	x2, x0, [x29, #280]
    1bdc:	ldr	x0, [x21, #96]
    1be0:	cbnz	x0, 1b00 <gomp_map_vars+0x7ec>
    1be4:	ldr	x0, [x29, #208]
    1be8:	add	x1, x29, #0x118
    1bec:	str	x3, [x29, #104]
    1bf0:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1bf4:	mov	x21, x0
    1bf8:	cbnz	x0, 1c9c <gomp_map_vars+0x988>
    1bfc:	ldrb	w1, [x29, #172]
    1c00:	ldr	w0, [x29, #144]
    1c04:	ldr	x3, [x29, #104]
    1c08:	asr	w0, w0, w1
    1c0c:	mov	x1, #0x1                   	// #1
    1c10:	lsl	x0, x1, x0
    1c14:	ldr	x1, [x3, #8]
    1c18:	stp	x1, x26, [x29, #152]
    1c1c:	ldr	x2, [x24, x28]
    1c20:	ldr	x1, [x29, #128]
    1c24:	ldr	x3, [x29, #152]
    1c28:	add	x1, x2, x1
    1c2c:	sub	x3, x0, x3
    1c30:	neg	x0, x0
    1c34:	add	x1, x1, x3
    1c38:	and	x0, x1, x0
    1c3c:	ldr	x1, [x29, #152]
    1c40:	ldr	x3, [x29, #288]
    1c44:	sub	x2, x1, x2
    1c48:	add	x0, x2, x0
    1c4c:	str	x0, [x29, #136]
    1c50:	sub	x3, x3, x1
    1c54:	ldr	x0, [x29, #136]
    1c58:	add	x0, x3, x0
    1c5c:	str	x0, [x29, #184]
    1c60:	b	1b00 <gomp_map_vars+0x7ec>
    1c64:	ldr	x2, [x29, #120]
    1c68:	mov	x3, x20
    1c6c:	ldr	x6, [x29, #192]
    1c70:	mov	x7, x22
    1c74:	mov	x5, x25
    1c78:	mov	x4, x24
    1c7c:	mov	x1, x21
    1c80:	mov	x0, x19
    1c84:	add	x20, x20, #0x1
    1c88:	bl	ad4 <gomp_map_fields_existing>
    1c8c:	cmp	x20, x26
    1c90:	b.ls	1c64 <gomp_map_vars+0x950>  // b.plast
    1c94:	sub	x20, x20, #0x1
    1c98:	b	1b00 <gomp_map_vars+0x7ec>
    1c9c:	ldr	x20, [x29, #120]
    1ca0:	b	1c8c <gomp_map_vars+0x978>
    1ca4:	ldr	x0, [x29, #208]
    1ca8:	str	x2, [x29, #280]
    1cac:	add	x2, x2, #0x8
    1cb0:	add	x1, x29, #0x118
    1cb4:	str	x2, [x29, #288]
    1cb8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1cbc:	mov	x21, x0
    1cc0:	cbz	x0, 1ce4 <gomp_map_vars+0x9d0>
    1cc4:	ldr	x9, [x0]
    1cc8:	ldr	x7, [x29, #280]
    1ccc:	cmp	x9, x7
    1cd0:	b.hi	1ce4 <gomp_map_vars+0x9d0>  // b.pmore
    1cd4:	ldr	x1, [x0, #8]
    1cd8:	ldr	x0, [x29, #288]
    1cdc:	cmp	x1, x0
    1ce0:	b.cs	1cf8 <gomp_map_vars+0x9e4>  // b.hs, b.nlast
    1ce4:	ldr	x0, [x29, #200]
    1ce8:	bl	2f8 <gomp_mutex_unlock>
    1cec:	adrp	x0, 0 <gomp_to_device_kind_p>
    1cf0:	add	x0, x0, #0x0
    1cf4:	b	1580 <gomp_map_vars+0x26c>
    1cf8:	ldrb	w0, [x29, #180]
    1cfc:	sub	w2, w20, #0x1
    1d00:	ldr	x1, [x29, #192]
    1d04:	bl	30 <get_kind>
    1d08:	ldr	w1, [x29, #176]
    1d0c:	and	w0, w0, w1
    1d10:	cmp	w0, #0x1d
    1d14:	b.eq	1d2c <gomp_map_vars+0xa18>  // b.none
    1d18:	sub	x2, x20, #0x1
    1d1c:	mov	x1, x24
    1d20:	mov	x0, x19
    1d24:	bl	76c <gomp_map_val>
    1d28:	str	x0, [x29, #304]
    1d2c:	ldr	x0, [x29, #304]
    1d30:	cbz	x0, 1d40 <gomp_map_vars+0xa2c>
    1d34:	ldr	x1, [x25, x28]
    1d38:	sub	x0, x0, x1
    1d3c:	str	x0, [x29, #304]
    1d40:	ldr	x0, [x21, #16]
    1d44:	mov	x4, x22
    1d48:	ldr	x2, [x29, #112]
    1d4c:	mov	x3, #0x8                   	// #8
    1d50:	ldr	x1, [x0, #16]
    1d54:	ldr	x0, [x21, #24]
    1d58:	sub	x1, x1, x9
    1d5c:	add	x7, x7, x0
    1d60:	mov	x0, x23
    1d64:	add	x1, x1, x7
    1d68:	bl	8bc <gomp_copy_host2dev>
    1d6c:	ldr	x0, [x21, #16]
    1d70:	ldr	x1, [x21]
    1d74:	ldr	x0, [x0, #16]
    1d78:	ldr	x2, [x29, #280]
    1d7c:	sub	x0, x0, x1
    1d80:	ldr	x1, [x21, #24]
    1d84:	add	x1, x1, x2
    1d88:	add	x0, x0, x1
    1d8c:	str	x0, [x29, #304]
    1d90:	b	1b00 <gomp_map_vars+0x7ec>
    1d94:	add	x2, x2, #0x8
    1d98:	b	1b24 <gomp_map_vars+0x810>
    1d9c:	str	xzr, [x27, #48]
    1da0:	cbz	x26, 1dc8 <gomp_map_vars+0xab4>
    1da4:	ldr	x0, [x26, #32]
    1da8:	cmn	x0, #0x2
    1dac:	b.ne	1dc8 <gomp_map_vars+0xab4>  // b.any
    1db0:	ldr	x0, [x29, #208]
    1db4:	mov	x1, x26
    1db8:	str	w4, [x29, #104]
    1dbc:	bl	0 <splay_tree_prefix_splay_tree_remove>
    1dc0:	str	x26, [x27, #48]
    1dc4:	ldr	w4, [x29, #104]
    1dc8:	ldp	x0, x1, [x27]
    1dcc:	str	x27, [x21, #64]
    1dd0:	ldr	x2, [x29, #160]
    1dd4:	str	x19, [x27, #16]
    1dd8:	cmn	x2, #0x1
    1ddc:	sub	x1, x1, x0
    1de0:	b.eq	1e98 <gomp_map_vars+0xb84>  // b.none
    1de4:	ldr	x2, [x29, #152]
    1de8:	sub	x0, x0, x2
    1dec:	ldr	x2, [x29, #136]
    1df0:	add	x0, x0, x2
    1df4:	str	x0, [x27, #24]
    1df8:	ldr	x0, [x29, #160]
    1dfc:	cmp	x20, x0
    1e00:	csinv	x0, x0, xzr, ne  // ne = any
    1e04:	str	x0, [x29, #160]
    1e08:	and	w0, w4, #0xe
    1e0c:	str	w4, [x29, #128]
    1e10:	cmp	w0, #0x2
    1e14:	cset	w0, eq  // eq = none
    1e18:	strb	w0, [x21, #72]
    1e1c:	and	w0, w4, #0xfffffffe
    1e20:	cmp	w0, #0x12
    1e24:	cset	w0, eq  // eq = none
    1e28:	strb	w0, [x21, #73]
    1e2c:	lsl	x0, x20, #5
    1e30:	add	x0, x19, x0
    1e34:	stp	xzr, x1, [x0, #80]
    1e38:	mov	x0, #0x1                   	// #1
    1e3c:	mov	x1, x27
    1e40:	stp	x0, xzr, [x27, #32]
    1e44:	ldr	x0, [x19]
    1e48:	add	x0, x0, #0x1
    1e4c:	str	x0, [x19]
    1e50:	ldr	x0, [x29, #208]
    1e54:	stp	xzr, xzr, [x27, #56]
    1e58:	bl	0 <splay_tree_prefix_splay_tree_insert>
    1e5c:	ldr	w4, [x29, #128]
    1e60:	cmp	w4, #0x13
    1e64:	b.le	1ee4 <gomp_map_vars+0xbd0>
    1e68:	sub	w4, w4, #0x80
    1e6c:	cmp	w4, #0x3
    1e70:	b.ls	1ecc <gomp_map_vars+0xbb8>  // b.plast
    1e74:	ldr	x0, [x29, #200]
    1e78:	bl	2f8 <gomp_mutex_unlock>
    1e7c:	ldr	w2, [x29, #144]
    1e80:	adrp	x1, 0 <gomp_to_device_kind_p>
    1e84:	add	x1, x1, #0x0
    1e88:	adrp	x0, 0 <gomp_to_device_kind_p>
    1e8c:	add	x1, x1, #0xe
    1e90:	add	x0, x0, #0x0
    1e94:	bl	0 <gomp_fatal>
    1e98:	ldrb	w2, [x29, #172]
    1e9c:	ldr	w0, [x29, #144]
    1ea0:	asr	w0, w0, w2
    1ea4:	mov	x2, #0x1                   	// #1
    1ea8:	lsl	x0, x2, x0
    1eac:	ldr	x2, [x29, #128]
    1eb0:	add	x3, x2, x0
    1eb4:	neg	x0, x0
    1eb8:	and	x3, x3, x0
    1ebc:	str	x3, [x27, #24]
    1ec0:	add	x0, x1, x3
    1ec4:	str	x0, [x29, #184]
    1ec8:	b	1e08 <gomp_map_vars+0xaf4>
    1ecc:	adrp	x0, 0 <gomp_to_device_kind_p>
    1ed0:	add	x0, x0, #0x0
    1ed4:	ldrb	w0, [x0, w4, uxtw]
    1ed8:	adr	x1, 1ee4 <gomp_map_vars+0xbd0>
    1edc:	add	x0, x1, w0, sxtb #2
    1ee0:	br	x0
    1ee4:	b.hi	1e74 <gomp_map_vars+0xb60>  // b.pmore
    1ee8:	adrp	x0, 0 <gomp_to_device_kind_p>
    1eec:	add	x0, x0, #0x0
    1ef0:	ldrb	w0, [x0, w4, uxtw]
    1ef4:	adr	x1, 1f00 <gomp_map_vars+0xbec>
    1ef8:	add	x0, x1, w0, sxtb #2
    1efc:	br	x0
    1f00:	ldp	x2, x3, [x27]
    1f04:	mov	x4, x22
    1f08:	ldr	x1, [x19, #16]
    1f0c:	ldr	x0, [x27, #24]
    1f10:	sub	x3, x3, x2
    1f14:	add	x1, x1, x0
    1f18:	mov	x0, x23
    1f1c:	bl	8bc <gomp_copy_host2dev>
    1f20:	b	1f40 <gomp_map_vars+0xc2c>
    1f24:	ldr	x0, [x27]
    1f28:	mov	x4, x22
    1f2c:	ldr	x3, [x25, x28]
    1f30:	ldr	x1, [x0]
    1f34:	mov	x0, x19
    1f38:	ldr	x2, [x27, #24]
    1f3c:	bl	dac <gomp_map_pointer>
    1f40:	ldr	x0, [x27, #48]
    1f44:	cbz	x0, 1f70 <gomp_map_vars+0xc5c>
    1f48:	ldr	x0, [x19, #16]
    1f4c:	add	x2, x29, #0xe8
    1f50:	ldr	x1, [x27, #24]
    1f54:	mov	x4, #0x0                   	// #0
    1f58:	mov	x3, #0x8                   	// #8
    1f5c:	add	x0, x0, x1
    1f60:	str	x0, [x29, #232]
    1f64:	ldr	x1, [x26, #24]
    1f68:	mov	x0, x23
    1f6c:	bl	8bc <gomp_copy_host2dev>
    1f70:	add	x27, x27, #0x48
    1f74:	b	1b00 <gomp_map_vars+0x7ec>
    1f78:	ldp	x2, x3, [x27]
    1f7c:	mov	x4, x22
    1f80:	ldr	x1, [x19, #16]
    1f84:	ldr	x0, [x27, #24]
    1f88:	sub	x3, x3, x2
    1f8c:	add	x1, x1, x0
    1f90:	mov	x0, x23
    1f94:	bl	8bc <gomp_copy_host2dev>
    1f98:	ldr	x28, [x29, #120]
    1f9c:	sub	x20, x28, #0x1
    1fa0:	ldr	x0, [x29, #216]
    1fa4:	cmp	x28, x0
    1fa8:	b.eq	1f40 <gomp_map_vars+0xc2c>  // b.none
    1fac:	ldrb	w0, [x29, #180]
    1fb0:	mov	w2, w28
    1fb4:	ldr	x1, [x29, #192]
    1fb8:	bl	30 <get_kind>
    1fbc:	ldr	w1, [x29, #176]
    1fc0:	and	w0, w0, w1
    1fc4:	cmp	w0, #0x4
    1fc8:	b.ne	1f40 <gomp_map_vars+0xc2c>  // b.any
    1fcc:	ldr	x0, [x24, x28, lsl #3]
    1fd0:	ldr	x3, [x27]
    1fd4:	cmp	x0, x3
    1fd8:	b.cc	1f40 <gomp_map_vars+0xc2c>  // b.lo, b.ul, b.last
    1fdc:	ldr	x2, [x27, #8]
    1fe0:	add	x1, x0, #0x8
    1fe4:	cmp	x1, x2
    1fe8:	b.hi	1f40 <gomp_map_vars+0xc2c>  // b.pmore
    1fec:	ldr	x1, [x27, #32]
    1ff0:	str	x27, [x21, #96]
    1ff4:	strb	wzr, [x21, #104]
    1ff8:	strb	wzr, [x21, #105]
    1ffc:	cmn	x1, #0x1
    2000:	b.eq	200c <gomp_map_vars+0xcf8>  // b.none
    2004:	add	x1, x1, #0x1
    2008:	str	x1, [x27, #32]
    200c:	ldr	x2, [x27, #24]
    2010:	mov	x4, x22
    2014:	ldr	x1, [x0]
    2018:	sub	x2, x2, x3
    201c:	ldr	x3, [x25, x28, lsl #3]
    2020:	add	x2, x0, x2
    2024:	add	x21, x21, #0x20
    2028:	mov	x0, x19
    202c:	add	x28, x28, #0x1
    2030:	bl	dac <gomp_map_pointer>
    2034:	b	1f9c <gomp_map_vars+0xc88>
    2038:	ldp	x3, x19, [x27]
    203c:	ldr	x0, [x29, #200]
    2040:	sub	x19, x19, x3
    2044:	bl	2f8 <gomp_mutex_unlock>
    2048:	ldr	x1, [x27]
    204c:	adrp	x0, 0 <gomp_to_device_kind_p>
    2050:	mov	x3, x19
    2054:	mov	x2, x19
    2058:	add	x0, x0, #0x0
    205c:	bl	0 <gomp_fatal>
    2060:	ldp	x2, x3, [x27]
    2064:	sub	x3, x3, x2
    2068:	cmp	x3, #0x8
    206c:	b.eq	2090 <gomp_map_vars+0xd7c>  // b.none
    2070:	adrp	x3, 0 <gomp_to_device_kind_p>
    2074:	adrp	x1, 0 <gomp_to_device_kind_p>
    2078:	adrp	x0, 0 <gomp_to_device_kind_p>
    207c:	add	x3, x3, #0x0
    2080:	add	x1, x1, #0x0
    2084:	add	x0, x0, #0x0
    2088:	mov	w2, #0x3b4                 	// #948
    208c:	bl	0 <__assert_fail>
    2090:	mov	x4, x22
    2094:	ldr	x1, [x19, #16]
    2098:	ldr	x0, [x27, #24]
    209c:	b	1f14 <gomp_map_vars+0xc00>
    20a0:	cbz	x22, 20c0 <gomp_map_vars+0xdac>
    20a4:	mov	x20, #0x0                   	// #0
    20a8:	ldr	x1, [x29, #264]
    20ac:	ldr	x0, [x29, #240]
    20b0:	cmp	x1, x20
    20b4:	b.gt	20ec <gomp_map_vars+0xdd8>
    20b8:	bl	0 <free>
    20bc:	str	xzr, [x29, #240]
    20c0:	ldr	w0, [x29, #168]
    20c4:	cmp	w0, #0x3
    20c8:	b.ne	20e0 <gomp_map_vars+0xdcc>  // b.any
    20cc:	ldr	x0, [x19]
    20d0:	cbnz	x0, 20e0 <gomp_map_vars+0xdcc>
    20d4:	mov	x0, x19
    20d8:	mov	x19, #0x0                   	// #0
    20dc:	bl	0 <free>
    20e0:	ldr	x0, [x29, #200]
    20e4:	bl	2f8 <gomp_mutex_unlock>
    20e8:	b	13b4 <gomp_map_vars+0xa0>
    20ec:	ldr	x4, [x29, #256]
    20f0:	lsl	x1, x20, #4
    20f4:	ldr	x5, [x19, #16]
    20f8:	add	x2, x4, x20, lsl #4
    20fc:	add	x20, x20, #0x1
    2100:	ldr	x1, [x4, x1]
    2104:	ldr	x3, [x2, #8]
    2108:	ldr	x2, [x4]
    210c:	sub	x3, x3, x1
    2110:	mov	x4, #0x0                   	// #0
    2114:	sub	x2, x1, x2
    2118:	add	x1, x1, x5
    211c:	add	x2, x0, x2
    2120:	mov	x0, x23
    2124:	bl	8bc <gomp_copy_host2dev>
    2128:	b	20a8 <gomp_map_vars+0xd94>

000000000000212c <gomp_target_data_fallback>:
    212c:	adrp	x0, 0 <gomp_tls_data>
    2130:	ldr	x0, [x0]
    2134:	mrs	x1, tpidr_el0
    2138:	stp	x29, x30, [sp, #-32]!
    213c:	add	x0, x1, x0
    2140:	mov	x29, sp
    2144:	ldr	x0, [x0, #80]
    2148:	str	x19, [sp, #16]
    214c:	adrp	x19, 0 <gomp_global_icv>
    2150:	add	x19, x19, #0x0
    2154:	add	x1, x0, #0x90
    2158:	cmp	x0, #0x0
    215c:	csel	x19, x19, x1, eq  // eq = none
    2160:	ldr	x0, [x19, #32]
    2164:	cbz	x0, 2198 <gomp_target_data_fallback+0x6c>
    2168:	mov	x1, #0x0                   	// #0
    216c:	mov	w7, #0x2                   	// #2
    2170:	mov	w6, #0x0                   	// #0
    2174:	mov	x5, #0x0                   	// #0
    2178:	mov	x4, #0x0                   	// #0
    217c:	mov	x3, #0x0                   	// #0
    2180:	mov	x2, #0x0                   	// #0
    2184:	mov	x0, #0x0                   	// #0
    2188:	bl	1314 <gomp_map_vars>
    218c:	ldr	x1, [x19, #32]
    2190:	str	x1, [x0, #40]
    2194:	str	x0, [x19, #32]
    2198:	ldr	x19, [sp, #16]
    219c:	ldp	x29, x30, [sp], #32
    21a0:	ret

00000000000021a4 <gomp_remove_var>:
    21a4:	stp	x29, x30, [sp, #-32]!
    21a8:	mov	x29, sp
    21ac:	stp	x19, x20, [sp, #16]
    21b0:	mov	x19, x1
    21b4:	add	x20, x0, #0xa0
    21b8:	mov	x0, x20
    21bc:	bl	0 <splay_tree_prefix_splay_tree_remove>
    21c0:	ldr	x1, [x19, #48]
    21c4:	cbz	x1, 21d0 <gomp_remove_var+0x2c>
    21c8:	mov	x0, x20
    21cc:	bl	0 <splay_tree_prefix_splay_tree_insert>
    21d0:	ldr	x0, [x19, #16]
    21d4:	ldr	x1, [x0]
    21d8:	cmp	x1, #0x1
    21dc:	b.ls	21f8 <gomp_remove_var+0x54>  // b.plast
    21e0:	sub	x1, x1, #0x1
    21e4:	str	x1, [x0]
    21e8:	mov	w0, #0x0                   	// #0
    21ec:	ldp	x19, x20, [sp, #16]
    21f0:	ldp	x29, x30, [sp], #32
    21f4:	ret
    21f8:	bl	ce8 <gomp_unmap_tgt>
    21fc:	mov	w0, #0x1                   	// #1
    2200:	b	21ec <gomp_remove_var+0x48>

0000000000002204 <gomp_unload_image_from_device>:
    2204:	stp	x29, x30, [sp, #-144]!
    2208:	mov	x29, sp
    220c:	stp	x19, x20, [sp, #16]
    2210:	mov	x19, x0
    2214:	ldp	x20, x4, [x2, #16]
    2218:	stp	x21, x22, [sp, #32]
    221c:	ldp	x21, x0, [x2]
    2220:	stp	x25, x26, [sp, #64]
    2224:	mov	w25, w1
    2228:	sub	x4, x4, x20
    222c:	mov	x1, #0x2                   	// #2
    2230:	stp	x23, x24, [sp, #48]
    2234:	mov	x26, x3
    2238:	asr	x4, x4, #3
    223c:	sub	x0, x0, x21
    2240:	sdiv	x4, x4, x1
    2244:	asr	x0, x0, #3
    2248:	mov	w22, w0
    224c:	mov	w24, w4
    2250:	orr	w4, w4, w0
    2254:	cbz	w4, 2300 <gomp_unload_image_from_device+0xfc>
    2258:	cbz	w0, 22f8 <gomp_unload_image_from_device+0xf4>
    225c:	ldr	x0, [x21]
    2260:	str	x0, [sp, #88]
    2264:	add	x0, x0, #0x1
    2268:	add	x1, sp, #0x58
    226c:	str	x0, [sp, #96]
    2270:	add	x0, x19, #0xa0
    2274:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2278:	mov	x23, x0
    227c:	ldr	w0, [x19, #12]
    2280:	mov	w1, w25
    2284:	ldr	x3, [x19, #88]
    2288:	mov	x2, x26
    228c:	mov	x25, #0x0                   	// #0
    2290:	blr	x3
    2294:	tst	w0, #0xff
    2298:	b.eq	2308 <gomp_unload_image_from_device+0x104>  // b.none
    229c:	add	x26, x19, #0xa0
    22a0:	cmp	w22, w25
    22a4:	b.gt	231c <gomp_unload_image_from_device+0x118>
    22a8:	add	x25, x19, #0xa0
    22ac:	mov	w21, #0x0                   	// #0
    22b0:	mov	w22, #0x0                   	// #0
    22b4:	cmp	w22, w24
    22b8:	b.lt	2340 <gomp_unload_image_from_device+0x13c>  // b.tstop
    22bc:	cmp	x23, #0x0
    22c0:	eor	w21, w21, #0x1
    22c4:	cset	w0, ne  // ne = any
    22c8:	tst	w0, w21
    22cc:	b.eq	22e0 <gomp_unload_image_from_device+0xdc>  // b.none
    22d0:	ldr	x0, [x23, #16]
    22d4:	bl	0 <free>
    22d8:	mov	x0, x23
    22dc:	bl	0 <free>
    22e0:	ldp	x19, x20, [sp, #16]
    22e4:	ldp	x21, x22, [sp, #32]
    22e8:	ldp	x23, x24, [sp, #48]
    22ec:	ldp	x25, x26, [sp, #64]
    22f0:	ldp	x29, x30, [sp], #144
    22f4:	ret
    22f8:	ldr	x0, [x20]
    22fc:	b	2260 <gomp_unload_image_from_device+0x5c>
    2300:	mov	x23, #0x0                   	// #0
    2304:	b	227c <gomp_unload_image_from_device+0x78>
    2308:	add	x0, x19, #0xa8
    230c:	bl	2f8 <gomp_mutex_unlock>
    2310:	adrp	x0, 0 <gomp_to_device_kind_p>
    2314:	add	x0, x0, #0x0
    2318:	bl	0 <gomp_fatal>
    231c:	ldr	x1, [x21, x25, lsl #3]
    2320:	str	x1, [sp, #88]
    2324:	mov	x0, x26
    2328:	add	x25, x25, #0x1
    232c:	add	x1, x1, #0x1
    2330:	str	x1, [sp, #96]
    2334:	add	x1, sp, #0x58
    2338:	bl	0 <splay_tree_prefix_splay_tree_remove>
    233c:	b	22a0 <gomp_unload_image_from_device+0x9c>
    2340:	ldp	x2, x1, [x20]
    2344:	and	x0, x1, #0x7fffffffffffffff
    2348:	add	x0, x0, x2
    234c:	stp	x2, x0, [sp, #88]
    2350:	tbnz	x1, #63, 236c <gomp_unload_image_from_device+0x168>
    2354:	add	x1, sp, #0x58
    2358:	mov	x0, x25
    235c:	bl	0 <splay_tree_prefix_splay_tree_remove>
    2360:	add	w22, w22, #0x1
    2364:	add	x20, x20, #0x10
    2368:	b	22b4 <gomp_unload_image_from_device+0xb0>
    236c:	add	x1, sp, #0x58
    2370:	mov	x0, x25
    2374:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    2378:	mov	x1, x0
    237c:	mov	x0, x19
    2380:	bl	21a4 <gomp_remove_var>
    2384:	and	w21, w0, #0xff
    2388:	b	2360 <gomp_unload_image_from_device+0x15c>

000000000000238c <gomp_unmap_vars>:
    238c:	stp	x29, x30, [sp, #-80]!
    2390:	mov	x29, sp
    2394:	stp	x25, x26, [sp, #64]
    2398:	and	w26, w1, #0xff
    239c:	ldr	x1, [x0, #48]
    23a0:	stp	x19, x20, [sp, #16]
    23a4:	stp	x21, x22, [sp, #32]
    23a8:	stp	x23, x24, [sp, #48]
    23ac:	cbnz	x1, 23c8 <gomp_unmap_vars+0x3c>
    23b0:	ldp	x19, x20, [sp, #16]
    23b4:	ldp	x21, x22, [sp, #32]
    23b8:	ldp	x23, x24, [sp, #48]
    23bc:	ldp	x25, x26, [sp, #64]
    23c0:	ldp	x29, x30, [sp], #80
    23c4:	b	0 <free>
    23c8:	ldr	x23, [x0, #56]
    23cc:	mov	x19, x0
    23d0:	add	x24, x23, #0xa8
    23d4:	mov	x0, x24
    23d8:	bl	2d0 <gomp_mutex_lock>
    23dc:	ldr	w0, [x23, #172]
    23e0:	cmp	w0, #0x2
    23e4:	b.eq	242c <gomp_unmap_vars+0xa0>  // b.none
    23e8:	add	x22, x19, #0x40
    23ec:	mov	x25, #0x0                   	// #0
    23f0:	ldr	x0, [x19, #48]
    23f4:	cmp	x0, x25
    23f8:	b.hi	2444 <gomp_unmap_vars+0xb8>  // b.pmore
    23fc:	ldr	x0, [x19]
    2400:	cmp	x0, #0x1
    2404:	b.ls	24d4 <gomp_unmap_vars+0x148>  // b.plast
    2408:	sub	x0, x0, #0x1
    240c:	str	x0, [x19]
    2410:	mov	x0, x24
    2414:	ldp	x19, x20, [sp, #16]
    2418:	ldp	x21, x22, [sp, #32]
    241c:	ldp	x23, x24, [sp, #48]
    2420:	ldp	x25, x26, [sp, #64]
    2424:	ldp	x29, x30, [sp], #80
    2428:	b	2f8 <gomp_mutex_unlock>
    242c:	mov	x0, x24
    2430:	bl	2f8 <gomp_mutex_unlock>
    2434:	ldr	x0, [x19, #8]
    2438:	bl	0 <free>
    243c:	mov	x0, x19
    2440:	b	23b0 <gomp_unmap_vars+0x24>
    2444:	ldr	x21, [x22]
    2448:	cbz	x21, 24c8 <gomp_unmap_vars+0x13c>
    244c:	ldr	x20, [x21, #32]
    2450:	sub	x0, x20, #0x2
    2454:	cmn	x0, #0x4
    2458:	b.hi	246c <gomp_unmap_vars+0xe0>  // b.pmore
    245c:	sub	x20, x20, #0x1
    2460:	str	x20, [x21, #32]
    2464:	mov	w20, #0x0                   	// #0
    2468:	b	2478 <gomp_unmap_vars+0xec>
    246c:	cmp	x20, #0x1
    2470:	b.ne	2464 <gomp_unmap_vars+0xd8>  // b.any
    2474:	str	xzr, [x21, #32]
    2478:	cmp	w20, #0x0
    247c:	ccmp	w26, #0x0, #0x4, ne  // ne = any
    2480:	b.eq	248c <gomp_unmap_vars+0x100>  // b.none
    2484:	ldrb	w0, [x22, #8]
    2488:	cbnz	w0, 2494 <gomp_unmap_vars+0x108>
    248c:	ldrb	w0, [x22, #9]
    2490:	cbz	w0, 24b8 <gomp_unmap_vars+0x12c>
    2494:	ldp	x2, x0, [x21, #16]
    2498:	ldp	x1, x3, [x22, #16]
    249c:	ldr	x4, [x21]
    24a0:	ldr	x2, [x2, #16]
    24a4:	add	x0, x1, x0
    24a8:	add	x1, x1, x4
    24ac:	add	x2, x0, x2
    24b0:	mov	x0, x23
    24b4:	bl	ef8 <gomp_copy_dev2host>
    24b8:	cbz	w20, 24c8 <gomp_unmap_vars+0x13c>
    24bc:	mov	x1, x21
    24c0:	mov	x0, x23
    24c4:	bl	21a4 <gomp_remove_var>
    24c8:	add	x25, x25, #0x1
    24cc:	add	x22, x22, #0x20
    24d0:	b	23f0 <gomp_unmap_vars+0x64>
    24d4:	mov	x0, x19
    24d8:	bl	ce8 <gomp_unmap_tgt>
    24dc:	b	2410 <gomp_unmap_vars+0x84>

00000000000024e0 <GOMP_offload_register_ver>:
    24e0:	stp	x29, x30, [sp, #-96]!
    24e4:	mov	x29, sp
    24e8:	stp	x19, x20, [sp, #16]
    24ec:	stp	x21, x22, [sp, #32]
    24f0:	stp	x23, x24, [sp, #48]
    24f4:	mov	w24, w2
    24f8:	lsr	w2, w0, #16
    24fc:	stp	x25, x26, [sp, #64]
    2500:	cmp	w2, #0x1
    2504:	str	x27, [sp, #80]
    2508:	b.ls	251c <GOMP_offload_register_ver+0x3c>  // b.plast
    250c:	adrp	x0, 0 <gomp_to_device_kind_p>
    2510:	mov	w1, #0x1                   	// #1
    2514:	add	x0, x0, #0x0
    2518:	bl	0 <gomp_fatal>
    251c:	mov	x25, #0x0                   	// #0
    2520:	mov	x27, #0x130                 	// #304
    2524:	adrp	x19, 0 <gomp_to_device_kind_p>
    2528:	add	x19, x19, #0x0
    252c:	mov	w21, w0
    2530:	mov	x23, x1
    2534:	mov	x22, x3
    2538:	add	x0, x19, #0x10
    253c:	bl	2d0 <gomp_mutex_lock>
    2540:	ldr	w0, [x19]
    2544:	cmp	w0, w25
    2548:	b.gt	2588 <GOMP_offload_register_ver+0xa8>
    254c:	ldr	w25, [x19, #24]
    2550:	mov	w20, #0x18                  	// #24
    2554:	ldr	x0, [x19, #32]
    2558:	add	w25, w25, #0x1
    255c:	smull	x20, w25, w20
    2560:	mov	x1, x20
    2564:	bl	0 <realloc>
    2568:	mov	x4, x0
    256c:	add	x0, x19, #0x10
    2570:	cbnz	x4, 25d8 <GOMP_offload_register_ver+0xf8>
    2574:	bl	2f8 <gomp_mutex_unlock>
    2578:	adrp	x0, 0 <gomp_to_device_kind_p>
    257c:	mov	x1, x20
    2580:	add	x0, x0, #0x0
    2584:	bl	0 <gomp_fatal>
    2588:	ldr	x20, [x19, #8]
    258c:	madd	x20, x25, x27, x20
    2590:	add	x26, x20, #0xa8
    2594:	mov	x0, x26
    2598:	bl	2d0 <gomp_mutex_lock>
    259c:	ldr	w0, [x20, #16]
    25a0:	cmp	w0, w24
    25a4:	b.ne	25c8 <GOMP_offload_register_ver+0xe8>  // b.any
    25a8:	ldr	w4, [x20, #172]
    25ac:	cmp	w4, #0x1
    25b0:	b.ne	25c8 <GOMP_offload_register_ver+0xe8>  // b.any
    25b4:	mov	x3, x22
    25b8:	mov	x2, x23
    25bc:	mov	w1, w21
    25c0:	mov	x0, x20
    25c4:	bl	400 <gomp_load_image_to_device>
    25c8:	mov	x0, x26
    25cc:	add	x25, x25, #0x1
    25d0:	bl	2f8 <gomp_mutex_unlock>
    25d4:	b	2540 <GOMP_offload_register_ver+0x60>
    25d8:	sub	x20, x20, #0x18
    25dc:	str	w25, [x19, #24]
    25e0:	add	x1, x4, x20
    25e4:	str	x4, [x19, #32]
    25e8:	ldr	x27, [sp, #80]
    25ec:	str	w21, [x4, x20]
    25f0:	str	w24, [x1, #4]
    25f4:	stp	x23, x22, [x1, #8]
    25f8:	ldp	x19, x20, [sp, #16]
    25fc:	ldp	x21, x22, [sp, #32]
    2600:	ldp	x23, x24, [sp, #48]
    2604:	ldp	x25, x26, [sp, #64]
    2608:	ldp	x29, x30, [sp], #96
    260c:	b	2f8 <gomp_mutex_unlock>

0000000000002610 <GOMP_offload_register>:
    2610:	mov	x3, x2
    2614:	mov	w2, w1
    2618:	mov	x1, x0
    261c:	mov	w0, #0x0                   	// #0
    2620:	b	24e0 <GOMP_offload_register_ver>

0000000000002624 <GOMP_offload_unregister_ver>:
    2624:	stp	x29, x30, [sp, #-96]!
    2628:	mov	x29, sp
    262c:	stp	x21, x22, [sp, #32]
    2630:	mov	x22, #0x0                   	// #0
    2634:	mov	x21, x3
    2638:	str	x27, [sp, #80]
    263c:	mov	x27, #0x130                 	// #304
    2640:	stp	x19, x20, [sp, #16]
    2644:	adrp	x19, 0 <gomp_to_device_kind_p>
    2648:	add	x19, x19, #0x0
    264c:	stp	x23, x24, [sp, #48]
    2650:	mov	w23, w0
    2654:	mov	x24, x1
    2658:	add	x0, x19, #0x10
    265c:	stp	x25, x26, [sp, #64]
    2660:	mov	w25, w2
    2664:	bl	2d0 <gomp_mutex_lock>
    2668:	ldr	w0, [x19]
    266c:	cmp	w0, w22
    2670:	b.gt	26e0 <GOMP_offload_unregister_ver+0xbc>
    2674:	ldr	x3, [x19, #32]
    2678:	mov	w2, #0x0                   	// #0
    267c:	ldr	w0, [x19, #24]
    2680:	mov	x1, x3
    2684:	cmp	w0, w2
    2688:	b.le	26c0 <GOMP_offload_unregister_ver+0x9c>
    268c:	mov	x4, x1
    2690:	add	x1, x1, #0x18
    2694:	ldur	x5, [x1, #-8]
    2698:	cmp	x5, x21
    269c:	b.ne	2730 <GOMP_offload_unregister_ver+0x10c>  // b.any
    26a0:	sub	w0, w0, #0x1
    26a4:	mov	w1, #0x18                  	// #24
    26a8:	str	w0, [x19, #24]
    26ac:	smaddl	x0, w0, w1, x3
    26b0:	ldp	x2, x3, [x0]
    26b4:	stp	x2, x3, [x4]
    26b8:	ldr	x0, [x0, #16]
    26bc:	str	x0, [x4, #16]
    26c0:	add	x0, x19, #0x10
    26c4:	ldp	x19, x20, [sp, #16]
    26c8:	ldp	x21, x22, [sp, #32]
    26cc:	ldp	x23, x24, [sp, #48]
    26d0:	ldp	x25, x26, [sp, #64]
    26d4:	ldr	x27, [sp, #80]
    26d8:	ldp	x29, x30, [sp], #96
    26dc:	b	2f8 <gomp_mutex_unlock>
    26e0:	ldr	x20, [x19, #8]
    26e4:	madd	x20, x22, x27, x20
    26e8:	add	x26, x20, #0xa8
    26ec:	mov	x0, x26
    26f0:	bl	2d0 <gomp_mutex_lock>
    26f4:	ldr	w0, [x20, #16]
    26f8:	cmp	w0, w25
    26fc:	b.ne	2720 <GOMP_offload_unregister_ver+0xfc>  // b.any
    2700:	ldr	w0, [x20, #172]
    2704:	cmp	w0, #0x1
    2708:	b.ne	2720 <GOMP_offload_unregister_ver+0xfc>  // b.any
    270c:	mov	x3, x21
    2710:	mov	x2, x24
    2714:	mov	w1, w23
    2718:	mov	x0, x20
    271c:	bl	2204 <gomp_unload_image_from_device>
    2720:	mov	x0, x26
    2724:	add	x22, x22, #0x1
    2728:	bl	2f8 <gomp_mutex_unlock>
    272c:	b	2668 <GOMP_offload_unregister_ver+0x44>
    2730:	add	w2, w2, #0x1
    2734:	b	2684 <GOMP_offload_unregister_ver+0x60>

0000000000002738 <GOMP_offload_unregister>:
    2738:	mov	x3, x2
    273c:	mov	w2, w1
    2740:	mov	x1, x0
    2744:	mov	w0, #0x0                   	// #0
    2748:	b	2624 <GOMP_offload_unregister_ver>

000000000000274c <gomp_init_device>:
    274c:	stp	x29, x30, [sp, #-48]!
    2750:	mov	x29, sp
    2754:	stp	x19, x20, [sp, #16]
    2758:	mov	x19, x0
    275c:	ldr	x1, [x0, #56]
    2760:	stp	x21, x22, [sp, #32]
    2764:	ldr	w0, [x0, #12]
    2768:	blr	x1
    276c:	tst	w0, #0xff
    2770:	b.eq	27a8 <gomp_init_device+0x5c>  // b.none
    2774:	adrp	x21, 0 <gomp_to_device_kind_p>
    2778:	add	x21, x21, #0x0
    277c:	mov	x20, #0x0                   	// #0
    2780:	mov	x22, #0x18                  	// #24
    2784:	ldr	w0, [x21, #24]
    2788:	cmp	w0, w20
    278c:	b.gt	27bc <gomp_init_device+0x70>
    2790:	mov	w0, #0x1                   	// #1
    2794:	ldp	x21, x22, [sp, #32]
    2798:	str	w0, [x19, #172]
    279c:	ldp	x19, x20, [sp, #16]
    27a0:	ldp	x29, x30, [sp], #48
    27a4:	ret
    27a8:	add	x0, x19, #0xa8
    27ac:	bl	2f8 <gomp_mutex_unlock>
    27b0:	adrp	x0, 0 <gomp_to_device_kind_p>
    27b4:	add	x0, x0, #0x0
    27b8:	bl	0 <gomp_fatal>
    27bc:	ldr	x5, [x21, #32]
    27c0:	mul	x1, x20, x22
    27c4:	ldr	w2, [x19, #16]
    27c8:	add	x0, x5, x1
    27cc:	ldr	w3, [x0, #4]
    27d0:	cmp	w3, w2
    27d4:	b.ne	27ec <gomp_init_device+0xa0>  // b.any
    27d8:	ldp	x2, x3, [x0, #8]
    27dc:	mov	w4, #0x0                   	// #0
    27e0:	ldr	w1, [x5, x1]
    27e4:	mov	x0, x19
    27e8:	bl	400 <gomp_load_image_to_device>
    27ec:	add	x20, x20, #0x1
    27f0:	b	2784 <gomp_init_device+0x38>

00000000000027f4 <resolve_device>:
    27f4:	stp	x29, x30, [sp, #-32]!
    27f8:	cmn	w0, #0x1
    27fc:	mov	x29, sp
    2800:	stp	x19, x20, [sp, #16]
    2804:	b.ne	2848 <resolve_device+0x54>  // b.any
    2808:	adrp	x0, 0 <gomp_tls_data>
    280c:	ldr	x0, [x0]
    2810:	mrs	x1, tpidr_el0
    2814:	add	x0, x1, x0
    2818:	ldr	x1, [x0, #80]
    281c:	adrp	x0, 0 <gomp_global_icv>
    2820:	add	x0, x0, #0x0
    2824:	add	x2, x1, #0x90
    2828:	cmp	x1, #0x0
    282c:	csel	x0, x0, x2, eq  // eq = none
    2830:	ldr	w19, [x0, #16]
    2834:	tbz	w19, #31, 2850 <resolve_device+0x5c>
    2838:	mov	x0, #0x0                   	// #0
    283c:	ldp	x19, x20, [sp, #16]
    2840:	ldp	x29, x30, [sp], #32
    2844:	ret
    2848:	mov	w19, w0
    284c:	b	2834 <resolve_device+0x40>
    2850:	adrp	x20, 0 <gomp_to_device_kind_p>
    2854:	add	x20, x20, #0x0
    2858:	bl	12e0 <gomp_init_targets_once>
    285c:	ldr	w0, [x20, #4]
    2860:	cmp	w19, w0
    2864:	b.ge	2838 <resolve_device+0x44>  // b.tcont
    2868:	mov	w0, #0x130                 	// #304
    286c:	smull	x19, w19, w0
    2870:	ldr	x0, [x20, #8]
    2874:	add	x0, x0, x19
    2878:	add	x0, x0, #0xa8
    287c:	bl	2d0 <gomp_mutex_lock>
    2880:	ldr	x0, [x20, #8]
    2884:	add	x0, x0, x19
    2888:	ldr	w1, [x0, #172]
    288c:	cbnz	w1, 28b0 <resolve_device+0xbc>
    2890:	bl	274c <gomp_init_device>
    2894:	ldr	x0, [x20, #8]
    2898:	add	x0, x0, x19
    289c:	add	x0, x0, #0xa8
    28a0:	bl	2f8 <gomp_mutex_unlock>
    28a4:	ldr	x0, [x20, #8]
    28a8:	add	x0, x0, x19
    28ac:	b	283c <resolve_device+0x48>
    28b0:	cmp	w1, #0x2
    28b4:	b.ne	2894 <resolve_device+0xa0>  // b.any
    28b8:	add	x0, x0, #0xa8
    28bc:	bl	2f8 <gomp_mutex_unlock>
    28c0:	b	2838 <resolve_device+0x44>

00000000000028c4 <gomp_unload_device>:
    28c4:	stp	x29, x30, [sp, #-48]!
    28c8:	mov	x29, sp
    28cc:	stp	x19, x20, [sp, #16]
    28d0:	mov	x19, x0
    28d4:	ldr	w0, [x0, #172]
    28d8:	stp	x21, x22, [sp, #32]
    28dc:	cmp	w0, #0x1
    28e0:	b.ne	2934 <gomp_unload_device+0x70>  // b.any
    28e4:	adrp	x21, 0 <gomp_to_device_kind_p>
    28e8:	mov	w20, #0x0                   	// #0
    28ec:	add	x21, x21, #0x0
    28f0:	mov	w22, #0x18                  	// #24
    28f4:	b	2928 <gomp_unload_device+0x64>
    28f8:	ldr	x4, [x21, #32]
    28fc:	umull	x1, w20, w22
    2900:	ldr	w2, [x19, #16]
    2904:	add	x0, x4, x1
    2908:	ldr	w3, [x0, #4]
    290c:	cmp	w3, w2
    2910:	b.ne	2924 <gomp_unload_device+0x60>  // b.any
    2914:	ldp	x2, x3, [x0, #8]
    2918:	mov	x0, x19
    291c:	ldr	w1, [x4, x1]
    2920:	bl	2204 <gomp_unload_image_from_device>
    2924:	add	w20, w20, #0x1
    2928:	ldr	w0, [x21, #24]
    292c:	cmp	w0, w20
    2930:	b.hi	28f8 <gomp_unload_device+0x34>  // b.pmore
    2934:	ldp	x19, x20, [sp, #16]
    2938:	ldp	x21, x22, [sp, #32]
    293c:	ldp	x29, x30, [sp], #48
    2940:	ret

0000000000002944 <gomp_free_memmap>:
    2944:	stp	x29, x30, [sp, #-32]!
    2948:	mov	x29, sp
    294c:	stp	x19, x20, [sp, #16]
    2950:	mov	x19, x0
    2954:	ldr	x1, [x19]
    2958:	cbnz	x1, 2968 <gomp_free_memmap+0x24>
    295c:	ldp	x19, x20, [sp, #16]
    2960:	ldp	x29, x30, [sp], #32
    2964:	ret
    2968:	ldr	x20, [x1, #16]
    296c:	mov	x0, x19
    2970:	bl	0 <splay_tree_prefix_splay_tree_remove>
    2974:	ldr	x0, [x20, #8]
    2978:	bl	0 <free>
    297c:	mov	x0, x20
    2980:	bl	0 <free>
    2984:	b	2954 <gomp_free_memmap+0x10>

0000000000002988 <GOMP_target>:
    2988:	stp	x29, x30, [sp, #-80]!
    298c:	mov	x29, sp
    2990:	stp	x19, x20, [sp, #16]
    2994:	mov	x20, x4
    2998:	stp	x21, x22, [sp, #32]
    299c:	mov	x22, x1
    29a0:	stp	x23, x24, [sp, #48]
    29a4:	mov	x23, x3
    29a8:	mov	x24, x5
    29ac:	str	x25, [sp, #64]
    29b0:	mov	x25, x6
    29b4:	bl	27f4 <resolve_device>
    29b8:	cbnz	x0, 29dc <GOMP_target+0x54>
    29bc:	mov	x1, x20
    29c0:	mov	x0, x22
    29c4:	ldp	x19, x20, [sp, #16]
    29c8:	ldp	x21, x22, [sp, #32]
    29cc:	ldp	x23, x24, [sp, #48]
    29d0:	ldr	x25, [sp, #64]
    29d4:	ldp	x29, x30, [sp], #80
    29d8:	b	618 <gomp_target_fallback>
    29dc:	ldr	w1, [x0, #8]
    29e0:	mov	w2, #0x5                   	// #5
    29e4:	mov	x19, x0
    29e8:	and	w1, w1, w2
    29ec:	cmp	w1, #0x4
    29f0:	b.ne	29bc <GOMP_target+0x34>  // b.any
    29f4:	mov	x1, x22
    29f8:	bl	e70 <gomp_get_target_fn_addr>
    29fc:	mov	x21, x0
    2a00:	cbz	x0, 29bc <GOMP_target+0x34>
    2a04:	mov	x5, x25
    2a08:	mov	x4, x24
    2a0c:	mov	x2, x20
    2a10:	mov	x1, x23
    2a14:	mov	w7, #0x1                   	// #1
    2a18:	mov	w6, #0x0                   	// #0
    2a1c:	mov	x0, x19
    2a20:	mov	x3, #0x0                   	// #0
    2a24:	bl	1314 <gomp_map_vars>
    2a28:	mov	x20, x0
    2a2c:	ldr	w0, [x19, #12]
    2a30:	mov	x1, x21
    2a34:	ldr	x4, [x19, #144]
    2a38:	mov	x3, #0x0                   	// #0
    2a3c:	ldr	x2, [x20, #16]
    2a40:	blr	x4
    2a44:	mov	x0, x20
    2a48:	mov	w1, #0x1                   	// #1
    2a4c:	ldp	x19, x20, [sp, #16]
    2a50:	ldp	x21, x22, [sp, #32]
    2a54:	ldp	x23, x24, [sp, #48]
    2a58:	ldr	x25, [sp, #64]
    2a5c:	ldp	x29, x30, [sp], #80
    2a60:	b	238c <gomp_unmap_vars>

0000000000002a64 <GOMP_target_ext>:
    2a64:	stp	x29, x30, [sp, #-144]!
    2a68:	mov	x29, sp
    2a6c:	stp	x19, x20, [sp, #16]
    2a70:	mov	x20, x2
    2a74:	stp	x21, x22, [sp, #32]
    2a78:	mov	x21, x3
    2a7c:	mov	x22, x4
    2a80:	stp	x23, x24, [sp, #48]
    2a84:	mov	x24, x1
    2a88:	mov	x23, x5
    2a8c:	stp	x25, x26, [sp, #64]
    2a90:	mov	x25, x7
    2a94:	stp	x27, x28, [sp, #80]
    2a98:	sub	sp, sp, #0x10
    2a9c:	str	w6, [x29, #120]
    2aa0:	bl	27f4 <resolve_device>
    2aa4:	mov	x19, x0
    2aa8:	stp	xzr, xzr, [x29, #128]
    2aac:	ldr	x0, [x29, #120]
    2ab0:	tbz	w0, #0, 2bcc <GOMP_target_ext+0x168>
    2ab4:	adrp	x26, 0 <gomp_tls_data>
    2ab8:	ldr	x26, [x26]
    2abc:	mrs	x28, tpidr_el0
    2ac0:	add	x27, x28, x26
    2ac4:	ldr	x0, [x27, #16]
    2ac8:	cbz	x0, 2b30 <GOMP_target_ext+0xcc>
    2acc:	add	x26, x28, x26
    2ad0:	ldr	x0, [x26, #80]
    2ad4:	ldrb	w0, [x0, #205]
    2ad8:	cbnz	w0, 2bcc <GOMP_target_ext+0x168>
    2adc:	mov	w0, #0x1                   	// #1
    2ae0:	ldr	w6, [x29, #120]
    2ae4:	str	w0, [sp, #8]
    2ae8:	mov	x7, x25
    2aec:	ldr	x0, [x29, #144]
    2af0:	str	x0, [sp]
    2af4:	mov	x5, x23
    2af8:	mov	x4, x22
    2afc:	mov	x3, x21
    2b00:	mov	x2, x20
    2b04:	mov	x1, x24
    2b08:	mov	x0, x19
    2b0c:	bl	0 <gomp_create_target_task>
    2b10:	mov	sp, x29
    2b14:	ldp	x19, x20, [sp, #16]
    2b18:	ldp	x21, x22, [sp, #32]
    2b1c:	ldp	x23, x24, [sp, #48]
    2b20:	ldp	x25, x26, [sp, #64]
    2b24:	ldp	x27, x28, [sp, #80]
    2b28:	ldp	x29, x30, [sp], #144
    2b2c:	ret
    2b30:	mov	w0, #0x1                   	// #1
    2b34:	bl	0 <gomp_new_team>
    2b38:	ldp	x6, x7, [x27, #16]
    2b3c:	add	x4, x0, #0x100
    2b40:	ldr	x5, [x27, #80]
    2b44:	stp	x6, x7, [x0, #8]
    2b48:	adrp	x1, 0 <gomp_global_icv>
    2b4c:	ldp	x6, x7, [x27, #32]
    2b50:	stp	x6, x7, [x0, #24]
    2b54:	cmp	x5, #0x0
    2b58:	ldp	x6, x7, [x27, #48]
    2b5c:	stp	x6, x7, [x0, #40]
    2b60:	add	x2, x5, #0x90
    2b64:	ldp	x6, x7, [x27, #64]
    2b68:	stp	x0, x4, [x27, #16]
    2b6c:	add	x4, x0, #0x540
    2b70:	stp	x6, x7, [x0, #56]
    2b74:	add	x1, x1, #0x0
    2b78:	csel	x2, x1, x2, eq  // eq = none
    2b7c:	mov	x0, x4
    2b80:	mov	x1, #0x0                   	// #0
    2b84:	str	xzr, [x27, #32]
    2b88:	str	wzr, [x27, #40]
    2b8c:	stp	xzr, xzr, [x27, #64]
    2b90:	str	x4, [x27, #80]
    2b94:	stp	x4, x5, [x29, #104]
    2b98:	bl	0 <gomp_init_task>
    2b9c:	ldr	x5, [x29, #112]
    2ba0:	cbz	x5, 2cb4 <GOMP_target_ext+0x250>
    2ba4:	str	x5, [x27, #80]
    2ba8:	bl	0 <gomp_end_task>
    2bac:	ldr	x5, [x29, #112]
    2bb0:	mov	x0, x5
    2bb4:	bl	0 <free>
    2bb8:	ldr	x4, [x29, #104]
    2bbc:	str	x4, [x27, #80]
    2bc0:	add	x0, x28, x26
    2bc4:	ldr	x0, [x0, #16]
    2bc8:	cbnz	x0, 2acc <GOMP_target_ext+0x68>
    2bcc:	cbz	x25, 2db0 <GOMP_target_ext+0x34c>
    2bd0:	adrp	x0, 0 <gomp_tls_data>
    2bd4:	ldr	x0, [x0]
    2bd8:	mrs	x1, tpidr_el0
    2bdc:	add	x0, x1, x0
    2be0:	ldr	x0, [x0, #80]
    2be4:	cbz	x0, 2db0 <GOMP_target_ext+0x34c>
    2be8:	ldr	x0, [x0, #56]
    2bec:	cbz	x0, 2db0 <GOMP_target_ext+0x34c>
    2bf0:	add	x4, x29, #0x88
    2bf4:	add	x3, x29, #0x80
    2bf8:	mov	x2, x23
    2bfc:	mov	x1, x22
    2c00:	mov	x0, x20
    2c04:	bl	4c <calculate_firstprivate_requirements>
    2c08:	ldr	x5, [x29, #128]
    2c0c:	cbz	x5, 2c3c <GOMP_target_ext+0x1d8>
    2c10:	ldr	x0, [x29, #136]
    2c14:	mov	x4, x23
    2c18:	mov	x3, x22
    2c1c:	mov	x2, x21
    2c20:	add	x0, x5, x0
    2c24:	mov	x1, x20
    2c28:	add	x0, x0, #0xe
    2c2c:	and	x0, x0, #0xfffffffffffffff0
    2c30:	sub	sp, sp, x0
    2c34:	add	x0, sp, #0x10
    2c38:	bl	7fc <copy_firstprivate_data.isra.0>
    2c3c:	mov	x0, x25
    2c40:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    2c44:	cbz	x19, 2ca4 <GOMP_target_ext+0x240>
    2c48:	mov	w26, #0x1                   	// #1
    2c4c:	ldr	w0, [x19, #8]
    2c50:	tbnz	w0, #2, 2cc8 <GOMP_target_ext+0x264>
    2c54:	cbnz	w26, 2ca4 <GOMP_target_ext+0x240>
    2c58:	add	x4, x29, #0x88
    2c5c:	add	x3, x29, #0x80
    2c60:	mov	x2, x23
    2c64:	mov	x1, x22
    2c68:	mov	x0, x20
    2c6c:	bl	4c <calculate_firstprivate_requirements>
    2c70:	ldr	x5, [x29, #128]
    2c74:	cbz	x5, 2ca4 <GOMP_target_ext+0x240>
    2c78:	ldr	x0, [x29, #136]
    2c7c:	mov	x4, x23
    2c80:	mov	x3, x22
    2c84:	mov	x2, x21
    2c88:	add	x0, x5, x0
    2c8c:	mov	x1, x20
    2c90:	add	x0, x0, #0xe
    2c94:	and	x0, x0, #0xfffffffffffffff0
    2c98:	sub	sp, sp, x0
    2c9c:	add	x0, sp, #0x10
    2ca0:	bl	7fc <copy_firstprivate_data.isra.0>
    2ca4:	mov	x1, x21
    2ca8:	mov	x0, x24
    2cac:	bl	618 <gomp_target_fallback>
    2cb0:	b	2b10 <GOMP_target_ext+0xac>
    2cb4:	adrp	x0, 0 <gomp_thread_destructor>
    2cb8:	mov	x1, x27
    2cbc:	ldr	w0, [x0]
    2cc0:	bl	0 <pthread_setspecific>
    2cc4:	b	2bc0 <GOMP_target_ext+0x15c>
    2cc8:	mov	x1, x24
    2ccc:	mov	x0, x19
    2cd0:	bl	e70 <gomp_get_target_fn_addr>
    2cd4:	mov	x25, x0
    2cd8:	cbz	x0, 2c54 <GOMP_target_ext+0x1f0>
    2cdc:	ldr	x1, [x19, #136]
    2ce0:	cbz	x1, 2cf0 <GOMP_target_ext+0x28c>
    2ce4:	blr	x1
    2ce8:	tst	w0, #0xff
    2cec:	b.eq	2c54 <GOMP_target_ext+0x1f0>  // b.none
    2cf0:	ldr	w0, [x19, #8]
    2cf4:	tbz	w0, #0, 2d84 <GOMP_target_ext+0x320>
    2cf8:	cbz	w26, 2d34 <GOMP_target_ext+0x2d0>
    2cfc:	mov	x20, #0x0                   	// #0
    2d00:	ldr	w0, [x19, #12]
    2d04:	ldr	x4, [x19, #144]
    2d08:	cbz	x20, 2d10 <GOMP_target_ext+0x2ac>
    2d0c:	ldr	x21, [x20, #16]
    2d10:	mov	x2, x21
    2d14:	ldr	x3, [x29, #144]
    2d18:	mov	x1, x25
    2d1c:	blr	x4
    2d20:	cbz	x20, 2b10 <GOMP_target_ext+0xac>
    2d24:	mov	x0, x20
    2d28:	mov	w1, #0x1                   	// #1
    2d2c:	bl	238c <gomp_unmap_vars>
    2d30:	b	2b10 <GOMP_target_ext+0xac>
    2d34:	add	x4, x29, #0x88
    2d38:	add	x3, x29, #0x80
    2d3c:	mov	x2, x23
    2d40:	mov	x1, x22
    2d44:	mov	x0, x20
    2d48:	bl	4c <calculate_firstprivate_requirements>
    2d4c:	ldr	x5, [x29, #128]
    2d50:	cbz	x5, 2cfc <GOMP_target_ext+0x298>
    2d54:	ldr	x0, [x29, #136]
    2d58:	mov	x4, x23
    2d5c:	mov	x3, x22
    2d60:	mov	x2, x21
    2d64:	add	x0, x5, x0
    2d68:	mov	x1, x20
    2d6c:	add	x0, x0, #0xe
    2d70:	and	x0, x0, #0xfffffffffffffff0
    2d74:	sub	sp, sp, x0
    2d78:	add	x0, sp, #0x10
    2d7c:	bl	7fc <copy_firstprivate_data.isra.0>
    2d80:	b	2cfc <GOMP_target_ext+0x298>
    2d84:	mov	x1, x20
    2d88:	mov	w7, #0x1                   	// #1
    2d8c:	mov	x5, x23
    2d90:	mov	w6, w7
    2d94:	mov	x4, x22
    2d98:	mov	x2, x21
    2d9c:	mov	x0, x19
    2da0:	mov	x3, #0x0                   	// #0
    2da4:	bl	1314 <gomp_map_vars>
    2da8:	mov	x20, x0
    2dac:	b	2d00 <GOMP_target_ext+0x29c>
    2db0:	cbz	x19, 2c58 <GOMP_target_ext+0x1f4>
    2db4:	mov	w26, #0x0                   	// #0
    2db8:	b	2c4c <GOMP_target_ext+0x1e8>

0000000000002dbc <GOMP_target_data>:
    2dbc:	stp	x29, x30, [sp, #-48]!
    2dc0:	mov	x29, sp
    2dc4:	stp	x19, x20, [sp, #16]
    2dc8:	mov	x19, x2
    2dcc:	mov	x20, x3
    2dd0:	stp	x21, x22, [sp, #32]
    2dd4:	mov	x21, x4
    2dd8:	mov	x22, x5
    2ddc:	bl	27f4 <resolve_device>
    2de0:	cbz	x0, 2df8 <GOMP_target_data+0x3c>
    2de4:	ldr	w1, [x0, #8]
    2de8:	mov	w2, #0x5                   	// #5
    2dec:	and	w1, w1, w2
    2df0:	cmp	w1, #0x4
    2df4:	b.eq	2e08 <GOMP_target_data+0x4c>  // b.none
    2df8:	ldp	x19, x20, [sp, #16]
    2dfc:	ldp	x21, x22, [sp, #32]
    2e00:	ldp	x29, x30, [sp], #48
    2e04:	b	212c <gomp_target_data_fallback>
    2e08:	mov	x1, x19
    2e0c:	mov	x5, x22
    2e10:	mov	x4, x21
    2e14:	mov	x2, x20
    2e18:	mov	w7, #0x2                   	// #2
    2e1c:	mov	w6, #0x0                   	// #0
    2e20:	mov	x3, #0x0                   	// #0
    2e24:	bl	1314 <gomp_map_vars>
    2e28:	mov	x19, x0
    2e2c:	adrp	x0, 0 <gomp_tls_data>
    2e30:	ldr	x0, [x0]
    2e34:	mrs	x1, tpidr_el0
    2e38:	add	x0, x1, x0
    2e3c:	ldr	x1, [x0, #80]
    2e40:	cbz	x1, 2e64 <GOMP_target_data+0xa8>
    2e44:	add	x0, x1, #0x90
    2e48:	ldr	x1, [x0, #32]
    2e4c:	ldp	x21, x22, [sp, #32]
    2e50:	str	x1, [x19, #40]
    2e54:	str	x19, [x0, #32]
    2e58:	ldp	x19, x20, [sp, #16]
    2e5c:	ldp	x29, x30, [sp], #48
    2e60:	ret
    2e64:	bl	0 <gomp_new_icv>
    2e68:	b	2e48 <GOMP_target_data+0x8c>

0000000000002e6c <GOMP_target_data_ext>:
    2e6c:	stp	x29, x30, [sp, #-48]!
    2e70:	mov	x29, sp
    2e74:	stp	x19, x20, [sp, #16]
    2e78:	mov	x19, x1
    2e7c:	mov	x20, x2
    2e80:	stp	x21, x22, [sp, #32]
    2e84:	mov	x21, x3
    2e88:	mov	x22, x4
    2e8c:	bl	27f4 <resolve_device>
    2e90:	cbz	x0, 2ea8 <GOMP_target_data_ext+0x3c>
    2e94:	ldr	w1, [x0, #8]
    2e98:	mov	w2, #0x5                   	// #5
    2e9c:	and	w1, w1, w2
    2ea0:	cmp	w1, #0x4
    2ea4:	b.eq	2eb8 <GOMP_target_data_ext+0x4c>  // b.none
    2ea8:	ldp	x19, x20, [sp, #16]
    2eac:	ldp	x21, x22, [sp, #32]
    2eb0:	ldp	x29, x30, [sp], #48
    2eb4:	b	212c <gomp_target_data_fallback>
    2eb8:	mov	x1, x19
    2ebc:	mov	x5, x22
    2ec0:	mov	x4, x21
    2ec4:	mov	x2, x20
    2ec8:	mov	w7, #0x2                   	// #2
    2ecc:	mov	w6, #0x1                   	// #1
    2ed0:	mov	x3, #0x0                   	// #0
    2ed4:	bl	1314 <gomp_map_vars>
    2ed8:	mov	x19, x0
    2edc:	adrp	x0, 0 <gomp_tls_data>
    2ee0:	ldr	x0, [x0]
    2ee4:	mrs	x1, tpidr_el0
    2ee8:	add	x0, x1, x0
    2eec:	ldr	x1, [x0, #80]
    2ef0:	cbz	x1, 2f14 <GOMP_target_data_ext+0xa8>
    2ef4:	add	x0, x1, #0x90
    2ef8:	ldr	x1, [x0, #32]
    2efc:	ldp	x21, x22, [sp, #32]
    2f00:	str	x1, [x19, #40]
    2f04:	str	x19, [x0, #32]
    2f08:	ldp	x19, x20, [sp, #16]
    2f0c:	ldp	x29, x30, [sp], #48
    2f10:	ret
    2f14:	bl	0 <gomp_new_icv>
    2f18:	b	2ef8 <GOMP_target_data_ext+0x8c>

0000000000002f1c <GOMP_target_end_data>:
    2f1c:	adrp	x0, 0 <gomp_tls_data>
    2f20:	ldr	x0, [x0]
    2f24:	mrs	x1, tpidr_el0
    2f28:	add	x0, x1, x0
    2f2c:	adrp	x1, 0 <gomp_global_icv>
    2f30:	add	x1, x1, #0x0
    2f34:	ldr	x0, [x0, #80]
    2f38:	add	x2, x0, #0x90
    2f3c:	cmp	x0, #0x0
    2f40:	csel	x1, x1, x2, eq  // eq = none
    2f44:	ldr	x0, [x1, #32]
    2f48:	cbz	x0, 2f5c <GOMP_target_end_data+0x40>
    2f4c:	ldr	x2, [x0, #40]
    2f50:	str	x2, [x1, #32]
    2f54:	mov	w1, #0x1                   	// #1
    2f58:	b	238c <gomp_unmap_vars>
    2f5c:	ret

0000000000002f60 <GOMP_target_update>:
    2f60:	stp	x29, x30, [sp, #-48]!
    2f64:	mov	x29, sp
    2f68:	stp	x19, x20, [sp, #16]
    2f6c:	mov	x19, x2
    2f70:	mov	x20, x3
    2f74:	stp	x21, x22, [sp, #32]
    2f78:	mov	x21, x4
    2f7c:	mov	x22, x5
    2f80:	bl	27f4 <resolve_device>
    2f84:	cbz	x0, 2fc0 <GOMP_target_update+0x60>
    2f88:	ldr	w1, [x0, #8]
    2f8c:	mov	w2, #0x5                   	// #5
    2f90:	and	w1, w1, w2
    2f94:	cmp	w1, #0x4
    2f98:	b.ne	2fc0 <GOMP_target_update+0x60>  // b.any
    2f9c:	mov	x4, x22
    2fa0:	mov	x3, x21
    2fa4:	mov	x2, x20
    2fa8:	mov	x1, x19
    2fac:	ldp	x19, x20, [sp, #16]
    2fb0:	mov	w5, #0x0                   	// #0
    2fb4:	ldp	x21, x22, [sp, #32]
    2fb8:	ldp	x29, x30, [sp], #48
    2fbc:	b	f70 <gomp_update>
    2fc0:	ldp	x19, x20, [sp, #16]
    2fc4:	ldp	x21, x22, [sp, #32]
    2fc8:	ldp	x29, x30, [sp], #48
    2fcc:	ret

0000000000002fd0 <GOMP_target_update_ext>:
    2fd0:	sub	sp, sp, #0x60
    2fd4:	stp	x29, x30, [sp, #16]
    2fd8:	add	x29, sp, #0x10
    2fdc:	stp	x19, x20, [sp, #32]
    2fe0:	mov	x20, x6
    2fe4:	stp	x21, x22, [sp, #48]
    2fe8:	mov	x21, x1
    2fec:	mov	x22, x2
    2ff0:	stp	x23, x24, [sp, #64]
    2ff4:	mov	x23, x3
    2ff8:	mov	x24, x4
    2ffc:	str	x25, [sp, #80]
    3000:	mov	w25, w5
    3004:	bl	27f4 <resolve_device>
    3008:	mov	x19, x0
    300c:	cbz	x20, 30d8 <GOMP_target_update_ext+0x108>
    3010:	adrp	x2, 0 <gomp_tls_data>
    3014:	ldr	x2, [x2]
    3018:	mrs	x1, tpidr_el0
    301c:	add	x2, x1, x2
    3020:	ldr	x1, [x2, #80]
    3024:	cbz	x1, 30d8 <GOMP_target_update_ext+0x108>
    3028:	ldr	x3, [x1, #56]
    302c:	cbz	x3, 30d8 <GOMP_target_update_ext+0x108>
    3030:	ldr	x2, [x2, #16]
    3034:	tbz	w25, #0, 3090 <GOMP_target_update_ext+0xc0>
    3038:	cbz	x2, 3090 <GOMP_target_update_ext+0xc0>
    303c:	ldrb	w3, [x1, #205]
    3040:	cbnz	w3, 3090 <GOMP_target_update_ext+0xc0>
    3044:	str	xzr, [sp]
    3048:	mov	x7, x20
    304c:	str	wzr, [sp, #8]
    3050:	orr	w6, w25, #0x80000000
    3054:	mov	x5, x24
    3058:	mov	x4, x23
    305c:	mov	x3, x22
    3060:	mov	x2, x21
    3064:	mov	x1, #0x0                   	// #0
    3068:	bl	0 <gomp_create_target_task>
    306c:	tst	w0, #0xff
    3070:	b.eq	30d8 <GOMP_target_update_ext+0x108>  // b.none
    3074:	ldp	x29, x30, [sp, #16]
    3078:	ldp	x19, x20, [sp, #32]
    307c:	ldp	x21, x22, [sp, #48]
    3080:	ldp	x23, x24, [sp, #64]
    3084:	ldr	x25, [sp, #80]
    3088:	add	sp, sp, #0x60
    308c:	ret
    3090:	adrp	x0, 0 <gomp_cancel_var>
    3094:	ldrb	w0, [x0]
    3098:	cbz	w0, 30d0 <GOMP_target_update_ext+0x100>
    309c:	cbz	x2, 30d0 <GOMP_target_update_ext+0x100>
    30a0:	ldr	w0, [x2, #132]
    30a4:	tbnz	w0, #2, 3074 <GOMP_target_update_ext+0xa4>
    30a8:	ldr	x0, [x1, #40]
    30ac:	cbz	x0, 30d0 <GOMP_target_update_ext+0x100>
    30b0:	ldrb	w1, [x0, #49]
    30b4:	cbnz	w1, 3074 <GOMP_target_update_ext+0xa4>
    30b8:	ldrb	w1, [x0, #50]
    30bc:	cbz	w1, 30d0 <GOMP_target_update_ext+0x100>
    30c0:	ldr	x0, [x0]
    30c4:	cbz	x0, 30d0 <GOMP_target_update_ext+0x100>
    30c8:	ldrb	w0, [x0, #49]
    30cc:	cbnz	w0, 3074 <GOMP_target_update_ext+0xa4>
    30d0:	mov	x0, x20
    30d4:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    30d8:	cbz	x19, 3074 <GOMP_target_update_ext+0xa4>
    30dc:	ldr	w0, [x19, #8]
    30e0:	mov	w1, #0x5                   	// #5
    30e4:	and	w0, w0, w1
    30e8:	cmp	w0, #0x4
    30ec:	b.ne	3074 <GOMP_target_update_ext+0xa4>  // b.any
    30f0:	adrp	x0, 0 <gomp_cancel_var>
    30f4:	ldrb	w0, [x0]
    30f8:	cbz	w0, 3148 <GOMP_target_update_ext+0x178>
    30fc:	adrp	x0, 0 <gomp_tls_data>
    3100:	ldr	x0, [x0]
    3104:	mrs	x1, tpidr_el0
    3108:	add	x0, x1, x0
    310c:	ldr	x1, [x0, #16]
    3110:	cbz	x1, 3148 <GOMP_target_update_ext+0x178>
    3114:	ldr	w1, [x1, #132]
    3118:	tbnz	w1, #2, 3074 <GOMP_target_update_ext+0xa4>
    311c:	ldr	x0, [x0, #80]
    3120:	ldr	x0, [x0, #40]
    3124:	cbz	x0, 3148 <GOMP_target_update_ext+0x178>
    3128:	ldrb	w1, [x0, #49]
    312c:	cbnz	w1, 3074 <GOMP_target_update_ext+0xa4>
    3130:	ldrb	w1, [x0, #50]
    3134:	cbz	w1, 3148 <GOMP_target_update_ext+0x178>
    3138:	ldr	x0, [x0]
    313c:	cbz	x0, 3148 <GOMP_target_update_ext+0x178>
    3140:	ldrb	w0, [x0, #49]
    3144:	cbnz	w0, 3074 <GOMP_target_update_ext+0xa4>
    3148:	mov	x4, x24
    314c:	mov	x3, x23
    3150:	mov	x2, x22
    3154:	mov	x1, x21
    3158:	mov	x0, x19
    315c:	mov	w5, #0x1                   	// #1
    3160:	ldp	x29, x30, [sp, #16]
    3164:	ldp	x19, x20, [sp, #32]
    3168:	ldp	x21, x22, [sp, #48]
    316c:	ldp	x23, x24, [sp, #64]
    3170:	ldr	x25, [sp, #80]
    3174:	add	sp, sp, #0x60
    3178:	b	f70 <gomp_update>

000000000000317c <GOMP_target_enter_exit_data>:
    317c:	sub	sp, sp, #0x60
    3180:	stp	x29, x30, [sp, #16]
    3184:	add	x29, sp, #0x10
    3188:	stp	x19, x20, [sp, #32]
    318c:	mov	w19, w5
    3190:	stp	x21, x22, [sp, #48]
    3194:	mov	x21, x3
    3198:	mov	x22, x4
    319c:	stp	x23, x24, [sp, #64]
    31a0:	mov	x23, x1
    31a4:	mov	x24, x2
    31a8:	str	x25, [sp, #80]
    31ac:	mov	x25, x6
    31b0:	bl	27f4 <resolve_device>
    31b4:	mov	x20, x0
    31b8:	cbz	x25, 3284 <GOMP_target_enter_exit_data+0x108>
    31bc:	adrp	x2, 0 <gomp_tls_data>
    31c0:	ldr	x2, [x2]
    31c4:	mrs	x1, tpidr_el0
    31c8:	add	x2, x1, x2
    31cc:	ldr	x1, [x2, #80]
    31d0:	cbz	x1, 3284 <GOMP_target_enter_exit_data+0x108>
    31d4:	ldr	x3, [x1, #56]
    31d8:	cbz	x3, 3284 <GOMP_target_enter_exit_data+0x108>
    31dc:	ldr	x2, [x2, #16]
    31e0:	tbz	w19, #0, 323c <GOMP_target_enter_exit_data+0xc0>
    31e4:	cbz	x2, 323c <GOMP_target_enter_exit_data+0xc0>
    31e8:	ldrb	w3, [x1, #205]
    31ec:	cbnz	w3, 323c <GOMP_target_enter_exit_data+0xc0>
    31f0:	str	xzr, [sp]
    31f4:	mov	x7, x25
    31f8:	str	wzr, [sp, #8]
    31fc:	mov	w6, w19
    3200:	mov	x5, x22
    3204:	mov	x4, x21
    3208:	mov	x3, x24
    320c:	mov	x2, x23
    3210:	mov	x1, #0x0                   	// #0
    3214:	bl	0 <gomp_create_target_task>
    3218:	tst	w0, #0xff
    321c:	b.eq	3284 <GOMP_target_enter_exit_data+0x108>  // b.none
    3220:	ldp	x29, x30, [sp, #16]
    3224:	ldp	x19, x20, [sp, #32]
    3228:	ldp	x21, x22, [sp, #48]
    322c:	ldp	x23, x24, [sp, #64]
    3230:	ldr	x25, [sp, #80]
    3234:	add	sp, sp, #0x60
    3238:	ret
    323c:	adrp	x0, 0 <gomp_cancel_var>
    3240:	ldrb	w0, [x0]
    3244:	cbz	w0, 327c <GOMP_target_enter_exit_data+0x100>
    3248:	cbz	x2, 327c <GOMP_target_enter_exit_data+0x100>
    324c:	ldr	w0, [x2, #132]
    3250:	tbnz	w0, #2, 3220 <GOMP_target_enter_exit_data+0xa4>
    3254:	ldr	x0, [x1, #40]
    3258:	cbz	x0, 327c <GOMP_target_enter_exit_data+0x100>
    325c:	ldrb	w1, [x0, #49]
    3260:	cbnz	w1, 3220 <GOMP_target_enter_exit_data+0xa4>
    3264:	ldrb	w1, [x0, #50]
    3268:	cbz	w1, 327c <GOMP_target_enter_exit_data+0x100>
    326c:	ldr	x0, [x0]
    3270:	cbz	x0, 327c <GOMP_target_enter_exit_data+0x100>
    3274:	ldrb	w0, [x0, #49]
    3278:	cbnz	w0, 3220 <GOMP_target_enter_exit_data+0xa4>
    327c:	mov	x0, x25
    3280:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    3284:	cbz	x20, 3220 <GOMP_target_enter_exit_data+0xa4>
    3288:	ldr	w0, [x20, #8]
    328c:	mov	w1, #0x5                   	// #5
    3290:	and	w0, w0, w1
    3294:	cmp	w0, #0x4
    3298:	b.ne	3220 <GOMP_target_enter_exit_data+0xa4>  // b.any
    329c:	adrp	x0, 0 <gomp_cancel_var>
    32a0:	ldrb	w0, [x0]
    32a4:	cbz	w0, 32f4 <GOMP_target_enter_exit_data+0x178>
    32a8:	adrp	x0, 0 <gomp_tls_data>
    32ac:	ldr	x0, [x0]
    32b0:	mrs	x1, tpidr_el0
    32b4:	add	x0, x1, x0
    32b8:	ldr	x1, [x0, #16]
    32bc:	cbz	x1, 32f4 <GOMP_target_enter_exit_data+0x178>
    32c0:	ldr	w1, [x1, #132]
    32c4:	tbnz	w1, #2, 3220 <GOMP_target_enter_exit_data+0xa4>
    32c8:	ldr	x0, [x0, #80]
    32cc:	ldr	x0, [x0, #40]
    32d0:	cbz	x0, 32f4 <GOMP_target_enter_exit_data+0x178>
    32d4:	ldrb	w1, [x0, #49]
    32d8:	cbnz	w1, 3220 <GOMP_target_enter_exit_data+0xa4>
    32dc:	ldrb	w1, [x0, #50]
    32e0:	cbz	w1, 32f4 <GOMP_target_enter_exit_data+0x178>
    32e4:	ldr	x0, [x0]
    32e8:	cbz	x0, 32f4 <GOMP_target_enter_exit_data+0x178>
    32ec:	ldrb	w0, [x0, #49]
    32f0:	cbnz	w0, 3220 <GOMP_target_enter_exit_data+0xa4>
    32f4:	tbz	w19, #1, 3398 <GOMP_target_enter_exit_data+0x21c>
    32f8:	mov	x4, x22
    32fc:	mov	x3, x21
    3300:	mov	x2, x24
    3304:	mov	x1, x23
    3308:	mov	x0, x20
    330c:	ldp	x29, x30, [sp, #16]
    3310:	ldp	x19, x20, [sp, #32]
    3314:	ldp	x21, x22, [sp, #48]
    3318:	ldp	x23, x24, [sp, #64]
    331c:	ldr	x25, [sp, #80]
    3320:	add	sp, sp, #0x60
    3324:	b	10f8 <gomp_exit_data>
    3328:	ldrh	w0, [x22, x19, lsl #1]
    332c:	add	x5, x22, x19, lsl #1
    3330:	lsl	x25, x19, #3
    3334:	add	x2, x24, x19, lsl #3
    3338:	and	w0, w0, #0xff
    333c:	add	x4, x21, x19, lsl #3
    3340:	cmp	w0, #0x1c
    3344:	b.ne	337c <GOMP_target_enter_exit_data+0x200>  // b.any
    3348:	ldr	x1, [x21, x25]
    334c:	mov	x0, x20
    3350:	mov	w7, #0x3                   	// #3
    3354:	mov	w6, #0x1                   	// #1
    3358:	add	x1, x1, #0x1
    335c:	mov	x3, #0x0                   	// #0
    3360:	bl	1314 <gomp_map_vars>
    3364:	ldr	x0, [x21, x25]
    3368:	add	x19, x19, x0
    336c:	add	x19, x19, #0x1
    3370:	cmp	x19, x23
    3374:	b.cc	3328 <GOMP_target_enter_exit_data+0x1ac>  // b.lo, b.ul, b.last
    3378:	b	3220 <GOMP_target_enter_exit_data+0xa4>
    337c:	mov	x0, x20
    3380:	mov	w7, #0x3                   	// #3
    3384:	mov	w6, #0x1                   	// #1
    3388:	mov	x3, #0x0                   	// #0
    338c:	mov	x1, #0x1                   	// #1
    3390:	bl	1314 <gomp_map_vars>
    3394:	b	336c <GOMP_target_enter_exit_data+0x1f0>
    3398:	mov	x19, #0x0                   	// #0
    339c:	b	3370 <GOMP_target_enter_exit_data+0x1f4>

00000000000033a0 <gomp_target_task_fn>:
    33a0:	stp	x29, x30, [sp, #-48]!
    33a4:	mov	x29, sp
    33a8:	stp	x19, x20, [sp, #16]
    33ac:	mov	x19, x0
    33b0:	ldp	x20, x1, [x0]
    33b4:	stp	x21, x22, [sp, #32]
    33b8:	cbz	x1, 3494 <gomp_target_task_fn+0xf4>
    33bc:	cbnz	x20, 33dc <gomp_target_task_fn+0x3c>
    33c0:	mov	w0, #0x2                   	// #2
    33c4:	str	w0, [x19, #44]
    33c8:	ldr	x0, [x19, #8]
    33cc:	add	x1, x19, #0x50
    33d0:	bl	618 <gomp_target_fallback>
    33d4:	mov	w0, #0x0                   	// #0
    33d8:	b	345c <gomp_target_task_fn+0xbc>
    33dc:	ldr	w0, [x20, #8]
    33e0:	tbz	w0, #2, 33c0 <gomp_target_task_fn+0x20>
    33e4:	mov	x0, x20
    33e8:	bl	e70 <gomp_get_target_fn_addr>
    33ec:	mov	x21, x0
    33f0:	cbz	x0, 33c0 <gomp_target_task_fn+0x20>
    33f4:	ldr	x1, [x20, #136]
    33f8:	cbz	x1, 3408 <gomp_target_task_fn+0x68>
    33fc:	blr	x1
    3400:	tst	w0, #0xff
    3404:	b.eq	33c0 <gomp_target_task_fn+0x20>  // b.none
    3408:	ldr	w0, [x19, #44]
    340c:	cmp	w0, #0x5
    3410:	b.ne	3428 <gomp_target_task_fn+0x88>  // b.any
    3414:	ldr	x0, [x19, #48]
    3418:	cbz	x0, 33d4 <gomp_target_task_fn+0x34>
    341c:	mov	w1, #0x1                   	// #1
    3420:	bl	238c <gomp_unmap_vars>
    3424:	b	33d4 <gomp_target_task_fn+0x34>
    3428:	ldr	w0, [x20, #8]
    342c:	add	x2, x19, #0x50
    3430:	tbz	w0, #0, 346c <gomp_target_task_fn+0xcc>
    3434:	str	xzr, [x19, #48]
    3438:	mov	w0, #0x3                   	// #3
    343c:	mov	x4, x19
    3440:	ldr	x3, [x19, #72]
    3444:	mov	x1, x21
    3448:	ldr	x5, [x20, #152]
    344c:	str	w0, [x19, #44]
    3450:	ldr	w0, [x20, #12]
    3454:	blr	x5
    3458:	mov	w0, #0x1                   	// #1
    345c:	ldp	x19, x20, [sp, #16]
    3460:	ldp	x21, x22, [sp, #32]
    3464:	ldp	x29, x30, [sp], #48
    3468:	ret
    346c:	ldp	x1, x4, [x19, #16]
    3470:	mov	w7, #0x1                   	// #1
    3474:	ldr	x5, [x19, #32]
    3478:	mov	w6, w7
    347c:	mov	x0, x20
    3480:	mov	x3, #0x0                   	// #0
    3484:	bl	1314 <gomp_map_vars>
    3488:	ldr	x2, [x0, #16]
    348c:	str	x0, [x19, #48]
    3490:	b	3438 <gomp_target_task_fn+0x98>
    3494:	cbz	x20, 33d4 <gomp_target_task_fn+0x34>
    3498:	ldr	w0, [x20, #8]
    349c:	mov	w1, #0x5                   	// #5
    34a0:	and	w0, w0, w1
    34a4:	cmp	w0, #0x4
    34a8:	b.ne	33d4 <gomp_target_task_fn+0x34>  // b.any
    34ac:	ldr	w0, [x19, #40]
    34b0:	ldr	x1, [x19, #16]
    34b4:	tbz	w0, #31, 34d0 <gomp_target_task_fn+0x130>
    34b8:	ldp	x3, x4, [x19, #24]
    34bc:	add	x2, x19, #0x50
    34c0:	mov	x0, x20
    34c4:	mov	w5, #0x1                   	// #1
    34c8:	bl	f70 <gomp_update>
    34cc:	b	33d4 <gomp_target_task_fn+0x34>
    34d0:	tbz	w0, #1, 356c <gomp_target_task_fn+0x1cc>
    34d4:	ldp	x3, x4, [x19, #24]
    34d8:	add	x2, x19, #0x50
    34dc:	mov	x0, x20
    34e0:	bl	10f8 <gomp_exit_data>
    34e4:	b	33d4 <gomp_target_task_fn+0x34>
    34e8:	ldp	x1, x0, [x19, #24]
    34ec:	add	x2, x21, #0xa
    34f0:	lsl	x22, x2, #3
    34f4:	add	x2, x19, x2, lsl #3
    34f8:	sub	x22, x22, #0x50
    34fc:	add	x5, x0, x21, lsl #1
    3500:	ldrh	w0, [x0, x21, lsl #1]
    3504:	add	x4, x1, x22
    3508:	and	w0, w0, #0xff
    350c:	cmp	w0, #0x1c
    3510:	b.ne	3550 <gomp_target_task_fn+0x1b0>  // b.any
    3514:	ldr	x1, [x1, x22]
    3518:	mov	x0, x20
    351c:	mov	w7, #0x3                   	// #3
    3520:	mov	w6, #0x1                   	// #1
    3524:	add	x1, x1, #0x1
    3528:	mov	x3, #0x0                   	// #0
    352c:	bl	1314 <gomp_map_vars>
    3530:	ldr	x0, [x19, #24]
    3534:	ldr	x0, [x0, x22]
    3538:	add	x21, x21, x0
    353c:	add	x21, x21, #0x1
    3540:	ldr	x0, [x19, #16]
    3544:	cmp	x0, x21
    3548:	b.hi	34e8 <gomp_target_task_fn+0x148>  // b.pmore
    354c:	b	33d4 <gomp_target_task_fn+0x34>
    3550:	mov	x0, x20
    3554:	mov	w7, #0x3                   	// #3
    3558:	mov	w6, #0x1                   	// #1
    355c:	mov	x3, #0x0                   	// #0
    3560:	mov	x1, #0x1                   	// #1
    3564:	bl	1314 <gomp_map_vars>
    3568:	b	353c <gomp_target_task_fn+0x19c>
    356c:	mov	x21, #0x0                   	// #0
    3570:	b	3540 <gomp_target_task_fn+0x1a0>

0000000000003574 <GOMP_teams>:
    3574:	cbz	w1, 35c4 <GOMP_teams+0x50>
    3578:	stp	x29, x30, [sp, #-32]!
    357c:	adrp	x0, 0 <gomp_tls_data>
    3580:	ldr	x0, [x0]
    3584:	mov	x29, sp
    3588:	str	x19, [sp, #16]
    358c:	mov	w19, w1
    3590:	mrs	x1, tpidr_el0
    3594:	add	x0, x1, x0
    3598:	ldr	x0, [x0, #80]
    359c:	cbz	x0, 35bc <GOMP_teams+0x48>
    35a0:	add	x0, x0, #0x90
    35a4:	cmp	w19, #0x0
    35a8:	csinv	w19, w19, wzr, ge  // ge = tcont
    35ac:	str	w19, [x0, #20]
    35b0:	ldr	x19, [sp, #16]
    35b4:	ldp	x29, x30, [sp], #32
    35b8:	ret
    35bc:	bl	0 <gomp_new_icv>
    35c0:	b	35a4 <GOMP_teams+0x30>
    35c4:	ret

00000000000035c8 <omp_target_alloc>:
    35c8:	cmn	w1, #0x2
    35cc:	b.ne	35d4 <omp_target_alloc+0xc>  // b.any
    35d0:	b	0 <malloc>
    35d4:	stp	x29, x30, [sp, #-48]!
    35d8:	mov	x29, sp
    35dc:	stp	x19, x20, [sp, #16]
    35e0:	str	x21, [sp, #32]
    35e4:	tbz	w1, #31, 3600 <omp_target_alloc+0x38>
    35e8:	mov	x19, #0x0                   	// #0
    35ec:	mov	x0, x19
    35f0:	ldp	x19, x20, [sp, #16]
    35f4:	ldr	x21, [sp, #32]
    35f8:	ldp	x29, x30, [sp], #48
    35fc:	ret
    3600:	mov	x20, x0
    3604:	mov	w0, w1
    3608:	bl	27f4 <resolve_device>
    360c:	mov	x19, x0
    3610:	cbz	x0, 35e8 <omp_target_alloc+0x20>
    3614:	ldr	w0, [x0, #8]
    3618:	mov	w1, #0x5                   	// #5
    361c:	and	w0, w0, w1
    3620:	cmp	w0, #0x4
    3624:	b.eq	363c <omp_target_alloc+0x74>  // b.none
    3628:	mov	x0, x20
    362c:	ldp	x19, x20, [sp, #16]
    3630:	ldr	x21, [sp, #32]
    3634:	ldp	x29, x30, [sp], #48
    3638:	b	35d0 <omp_target_alloc+0x8>
    363c:	add	x21, x19, #0xa8
    3640:	mov	x0, x21
    3644:	bl	2d0 <gomp_mutex_lock>
    3648:	ldr	w0, [x19, #12]
    364c:	mov	x1, x20
    3650:	ldr	x2, [x19, #96]
    3654:	blr	x2
    3658:	mov	x19, x0
    365c:	mov	x0, x21
    3660:	bl	2f8 <gomp_mutex_unlock>
    3664:	b	35ec <omp_target_alloc+0x24>

0000000000003668 <omp_target_free>:
    3668:	stp	x29, x30, [sp, #-48]!
    366c:	mov	x29, sp
    3670:	stp	x19, x20, [sp, #16]
    3674:	mov	x20, x0
    3678:	str	x21, [sp, #32]
    367c:	cbz	x0, 36f0 <omp_target_free+0x88>
    3680:	mov	w0, w1
    3684:	cmn	w1, #0x2
    3688:	b.ne	36a0 <omp_target_free+0x38>  // b.any
    368c:	mov	x0, x20
    3690:	ldp	x19, x20, [sp, #16]
    3694:	ldr	x21, [sp, #32]
    3698:	ldp	x29, x30, [sp], #48
    369c:	b	0 <free>
    36a0:	tbnz	w1, #31, 36f0 <omp_target_free+0x88>
    36a4:	bl	27f4 <resolve_device>
    36a8:	mov	x19, x0
    36ac:	cbz	x0, 36f0 <omp_target_free+0x88>
    36b0:	ldr	w0, [x0, #8]
    36b4:	mov	w1, #0x5                   	// #5
    36b8:	and	w0, w0, w1
    36bc:	cmp	w0, #0x4
    36c0:	b.ne	368c <omp_target_free+0x24>  // b.any
    36c4:	add	x21, x19, #0xa8
    36c8:	mov	x0, x21
    36cc:	bl	2d0 <gomp_mutex_lock>
    36d0:	mov	x1, x20
    36d4:	mov	x0, x19
    36d8:	bl	c9c <gomp_free_device_memory>
    36dc:	mov	x0, x21
    36e0:	ldp	x19, x20, [sp, #16]
    36e4:	ldr	x21, [sp, #32]
    36e8:	ldp	x29, x30, [sp], #48
    36ec:	b	2f8 <gomp_mutex_unlock>
    36f0:	ldp	x19, x20, [sp, #16]
    36f4:	ldr	x21, [sp, #32]
    36f8:	ldp	x29, x30, [sp], #48
    36fc:	ret

0000000000003700 <omp_target_is_present>:
    3700:	stp	x29, x30, [sp, #-112]!
    3704:	mov	x29, sp
    3708:	stp	x19, x20, [sp, #16]
    370c:	mov	x20, x0
    3710:	str	x21, [sp, #32]
    3714:	cbnz	x0, 3730 <omp_target_is_present+0x30>
    3718:	mov	w19, #0x1                   	// #1
    371c:	mov	w0, w19
    3720:	ldp	x19, x20, [sp, #16]
    3724:	ldr	x21, [sp, #32]
    3728:	ldp	x29, x30, [sp], #112
    372c:	ret
    3730:	mov	w0, w1
    3734:	cmn	w1, #0x2
    3738:	b.eq	3718 <omp_target_is_present+0x18>  // b.none
    373c:	tbz	w1, #31, 3748 <omp_target_is_present+0x48>
    3740:	mov	w19, #0x0                   	// #0
    3744:	b	371c <omp_target_is_present+0x1c>
    3748:	bl	27f4 <resolve_device>
    374c:	mov	x19, x0
    3750:	cbz	x0, 3740 <omp_target_is_present+0x40>
    3754:	ldr	w0, [x0, #8]
    3758:	mov	w1, #0x5                   	// #5
    375c:	and	w0, w0, w1
    3760:	cmp	w0, #0x4
    3764:	b.ne	3718 <omp_target_is_present+0x18>  // b.any
    3768:	add	x21, x19, #0xa8
    376c:	mov	x0, x21
    3770:	bl	2d0 <gomp_mutex_lock>
    3774:	add	x1, sp, #0x38
    3778:	add	x0, x19, #0xa0
    377c:	stp	x20, x20, [sp, #56]
    3780:	bl	3bc <gomp_map_0len_lookup>
    3784:	cmp	x0, #0x0
    3788:	cset	w19, ne  // ne = any
    378c:	mov	x0, x21
    3790:	bl	2f8 <gomp_mutex_unlock>
    3794:	b	371c <omp_target_is_present+0x1c>

0000000000003798 <omp_target_memcpy>:
    3798:	stp	x29, x30, [sp, #-80]!
    379c:	cmn	w5, #0x2
    37a0:	mov	x29, sp
    37a4:	stp	x19, x20, [sp, #16]
    37a8:	mov	w20, w6
    37ac:	stp	x21, x22, [sp, #32]
    37b0:	mov	x21, x0
    37b4:	mov	x22, x1
    37b8:	stp	x23, x24, [sp, #48]
    37bc:	mov	x23, x2
    37c0:	mov	x24, x3
    37c4:	stp	x25, x26, [sp, #64]
    37c8:	mov	x25, x4
    37cc:	b.eq	37f8 <omp_target_memcpy+0x60>  // b.none
    37d0:	mov	w0, w5
    37d4:	tbnz	w5, #31, 38e8 <omp_target_memcpy+0x150>
    37d8:	bl	27f4 <resolve_device>
    37dc:	mov	x19, x0
    37e0:	cbz	x0, 38e8 <omp_target_memcpy+0x150>
    37e4:	ldr	w0, [x0, #8]
    37e8:	mov	w1, #0x5                   	// #5
    37ec:	and	w0, w0, w1
    37f0:	cmp	w0, #0x4
    37f4:	b.eq	38ac <omp_target_memcpy+0x114>  // b.none
    37f8:	cmn	w20, #0x2
    37fc:	b.eq	3830 <omp_target_memcpy+0x98>  // b.none
    3800:	mov	x19, #0x0                   	// #0
    3804:	tbnz	w20, #31, 38e8 <omp_target_memcpy+0x150>
    3808:	mov	w0, w20
    380c:	bl	27f4 <resolve_device>
    3810:	mov	x20, x0
    3814:	cbz	x0, 38e8 <omp_target_memcpy+0x150>
    3818:	ldr	w0, [x0, #8]
    381c:	mov	w1, #0x5                   	// #5
    3820:	and	w0, w0, w1
    3824:	cmp	w0, #0x4
    3828:	b.eq	3878 <omp_target_memcpy+0xe0>  // b.none
    382c:	cbnz	x19, 38b4 <omp_target_memcpy+0x11c>
    3830:	mov	x2, x23
    3834:	add	x1, x22, x25
    3838:	add	x0, x21, x24
    383c:	bl	0 <memcpy>
    3840:	mov	w0, #0x0                   	// #0
    3844:	ldp	x19, x20, [sp, #16]
    3848:	ldp	x21, x22, [sp, #32]
    384c:	ldp	x23, x24, [sp, #48]
    3850:	ldp	x25, x26, [sp, #64]
    3854:	ldp	x29, x30, [sp], #80
    3858:	ret
    385c:	cmp	x20, x19
    3860:	b.ne	38e8 <omp_target_memcpy+0x150>  // b.any
    3864:	add	x20, x19, #0xa8
    3868:	mov	x0, x20
    386c:	bl	2d0 <gomp_mutex_lock>
    3870:	ldr	x4, [x19, #128]
    3874:	b	38c4 <omp_target_memcpy+0x12c>
    3878:	cbnz	x19, 385c <omp_target_memcpy+0xc4>
    387c:	add	x26, x20, #0xa8
    3880:	mov	x0, x26
    3884:	bl	2d0 <gomp_mutex_lock>
    3888:	ldr	w0, [x20, #12]
    388c:	mov	x3, x23
    3890:	ldr	x4, [x20, #112]
    3894:	add	x2, x22, x25
    3898:	add	x1, x21, x24
    389c:	blr	x4
    38a0:	and	w19, w0, #0xff
    38a4:	mov	x0, x26
    38a8:	b	38e0 <omp_target_memcpy+0x148>
    38ac:	cmn	w20, #0x2
    38b0:	b.ne	3804 <omp_target_memcpy+0x6c>  // b.any
    38b4:	add	x20, x19, #0xa8
    38b8:	mov	x0, x20
    38bc:	bl	2d0 <gomp_mutex_lock>
    38c0:	ldr	x4, [x19, #120]
    38c4:	mov	x3, x23
    38c8:	ldr	w0, [x19, #12]
    38cc:	add	x2, x22, x25
    38d0:	add	x1, x21, x24
    38d4:	blr	x4
    38d8:	and	w19, w0, #0xff
    38dc:	mov	x0, x20
    38e0:	bl	2f8 <gomp_mutex_unlock>
    38e4:	cbnz	w19, 3840 <omp_target_memcpy+0xa8>
    38e8:	mov	w0, #0x16                  	// #22
    38ec:	b	3844 <omp_target_memcpy+0xac>

00000000000038f0 <omp_target_memcpy_rect>:
    38f0:	sub	sp, sp, #0x80
    38f4:	stp	x29, x30, [sp, #32]
    38f8:	add	x29, sp, #0x20
    38fc:	stp	x19, x20, [sp, #48]
    3900:	ldr	w20, [sp, #144]
    3904:	stp	x21, x22, [sp, #64]
    3908:	mov	x21, x0
    390c:	mov	x22, x1
    3910:	stp	x23, x24, [sp, #80]
    3914:	orr	x1, x0, x1
    3918:	ldr	w0, [sp, #136]
    391c:	stp	x25, x26, [sp, #96]
    3920:	stp	x27, x28, [sp, #112]
    3924:	cbz	x1, 3a48 <omp_target_memcpy_rect+0x158>
    3928:	mov	x23, x2
    392c:	mov	w24, w3
    3930:	mov	x25, x4
    3934:	mov	x26, x5
    3938:	mov	x27, x6
    393c:	mov	x28, x7
    3940:	cmn	w0, #0x2
    3944:	b.eq	3994 <omp_target_memcpy_rect+0xa4>  // b.none
    3948:	tbz	w0, #31, 3974 <omp_target_memcpy_rect+0x84>
    394c:	mov	w21, #0x16                  	// #22
    3950:	mov	w0, w21
    3954:	ldp	x29, x30, [sp, #32]
    3958:	ldp	x19, x20, [sp, #48]
    395c:	ldp	x21, x22, [sp, #64]
    3960:	ldp	x23, x24, [sp, #80]
    3964:	ldp	x25, x26, [sp, #96]
    3968:	ldp	x27, x28, [sp, #112]
    396c:	add	sp, sp, #0x80
    3970:	ret
    3974:	bl	27f4 <resolve_device>
    3978:	mov	x19, x0
    397c:	cbz	x0, 394c <omp_target_memcpy_rect+0x5c>
    3980:	ldr	w0, [x0, #8]
    3984:	mov	w1, #0x5                   	// #5
    3988:	and	w0, w0, w1
    398c:	cmp	w0, #0x4
    3990:	b.eq	3998 <omp_target_memcpy_rect+0xa8>  // b.none
    3994:	mov	x19, #0x0                   	// #0
    3998:	cmn	w20, #0x2
    399c:	b.eq	39c8 <omp_target_memcpy_rect+0xd8>  // b.none
    39a0:	tbnz	w20, #31, 394c <omp_target_memcpy_rect+0x5c>
    39a4:	mov	w0, w20
    39a8:	bl	27f4 <resolve_device>
    39ac:	mov	x20, x0
    39b0:	cbz	x0, 394c <omp_target_memcpy_rect+0x5c>
    39b4:	ldr	w0, [x0, #8]
    39b8:	mov	w1, #0x5                   	// #5
    39bc:	and	w0, w0, w1
    39c0:	cmp	w0, #0x4
    39c4:	b.eq	39cc <omp_target_memcpy_rect+0xdc>  // b.none
    39c8:	mov	x20, #0x0                   	// #0
    39cc:	cmp	x20, #0x0
    39d0:	ccmp	x19, #0x0, #0x4, ne  // ne = any
    39d4:	b.eq	3a2c <omp_target_memcpy_rect+0x13c>  // b.none
    39d8:	cmp	x19, x20
    39dc:	b.ne	394c <omp_target_memcpy_rect+0x5c>  // b.any
    39e0:	add	x0, x20, #0xa8
    39e4:	bl	2d0 <gomp_mutex_lock>
    39e8:	ldr	x0, [sp, #128]
    39ec:	stp	x0, x19, [sp]
    39f0:	mov	x7, x28
    39f4:	str	x20, [sp, #16]
    39f8:	mov	x0, x21
    39fc:	mov	x6, x27
    3a00:	mov	x5, x26
    3a04:	mov	x4, x25
    3a08:	mov	w3, w24
    3a0c:	mov	x2, x23
    3a10:	mov	x1, x22
    3a14:	bl	b4 <omp_target_memcpy_rect_worker>
    3a18:	mov	w21, w0
    3a1c:	cbz	x20, 3a3c <omp_target_memcpy_rect+0x14c>
    3a20:	add	x0, x20, #0xa8
    3a24:	bl	2f8 <gomp_mutex_unlock>
    3a28:	b	3950 <omp_target_memcpy_rect+0x60>
    3a2c:	cbnz	x20, 39e0 <omp_target_memcpy_rect+0xf0>
    3a30:	cbz	x19, 39e8 <omp_target_memcpy_rect+0xf8>
    3a34:	add	x0, x19, #0xa8
    3a38:	b	39e4 <omp_target_memcpy_rect+0xf4>
    3a3c:	cbz	x19, 3950 <omp_target_memcpy_rect+0x60>
    3a40:	add	x0, x19, #0xa8
    3a44:	b	3a24 <omp_target_memcpy_rect+0x134>
    3a48:	mov	w21, #0x7fffffff            	// #2147483647
    3a4c:	b	3950 <omp_target_memcpy_rect+0x60>

0000000000003a50 <omp_target_associate_ptr>:
    3a50:	stp	x29, x30, [sp, #-144]!
    3a54:	mov	x29, sp
    3a58:	stp	x19, x20, [sp, #16]
    3a5c:	stp	x21, x22, [sp, #32]
    3a60:	stp	x23, x24, [sp, #48]
    3a64:	str	x25, [sp, #64]
    3a68:	tbz	w4, #31, 3a8c <omp_target_associate_ptr+0x3c>
    3a6c:	mov	w19, #0x16                  	// #22
    3a70:	mov	w0, w19
    3a74:	ldp	x19, x20, [sp, #16]
    3a78:	ldp	x21, x22, [sp, #32]
    3a7c:	ldp	x23, x24, [sp, #48]
    3a80:	ldr	x25, [sp, #64]
    3a84:	ldp	x29, x30, [sp], #144
    3a88:	ret
    3a8c:	mov	x19, x0
    3a90:	mov	x22, x1
    3a94:	mov	x23, x2
    3a98:	mov	x21, x3
    3a9c:	mov	w0, w4
    3aa0:	bl	27f4 <resolve_device>
    3aa4:	mov	x20, x0
    3aa8:	cbz	x0, 3a6c <omp_target_associate_ptr+0x1c>
    3aac:	ldr	w0, [x0, #8]
    3ab0:	mov	w1, #0x5                   	// #5
    3ab4:	and	w0, w0, w1
    3ab8:	cmp	w0, #0x4
    3abc:	b.ne	3a6c <omp_target_associate_ptr+0x1c>  // b.any
    3ac0:	add	x24, x20, #0xa8
    3ac4:	add	x25, x20, #0xa0
    3ac8:	mov	x0, x24
    3acc:	bl	2d0 <gomp_mutex_lock>
    3ad0:	add	x1, sp, #0x58
    3ad4:	mov	x0, x25
    3ad8:	add	x21, x22, x21
    3adc:	str	x19, [sp, #88]
    3ae0:	add	x19, x19, x23
    3ae4:	str	x19, [sp, #96]
    3ae8:	bl	d24 <gomp_map_lookup>
    3aec:	cbz	x0, 3b34 <omp_target_associate_ptr+0xe4>
    3af0:	ldp	x1, x2, [x0, #16]
    3af4:	ldr	x1, [x1, #16]
    3af8:	add	x1, x1, x2
    3afc:	cmp	x1, x21
    3b00:	b.ne	3b90 <omp_target_associate_ptr+0x140>  // b.any
    3b04:	ldr	x2, [x0]
    3b08:	ldr	x1, [sp, #88]
    3b0c:	cmp	x2, x1
    3b10:	b.hi	3b90 <omp_target_associate_ptr+0x140>  // b.pmore
    3b14:	ldr	x1, [x0, #8]
    3b18:	mov	w19, #0x16                  	// #22
    3b1c:	ldr	x0, [sp, #96]
    3b20:	cmp	x1, x0
    3b24:	csel	w19, w19, wzr, cc  // cc = lo, ul, last
    3b28:	mov	x0, x24
    3b2c:	bl	2f8 <gomp_mutex_unlock>
    3b30:	b	3a70 <omp_target_associate_ptr+0x20>
    3b34:	mov	x0, #0x40                  	// #64
    3b38:	bl	0 <gomp_malloc>
    3b3c:	mov	x19, x0
    3b40:	mov	x0, #0x48                  	// #72
    3b44:	bl	0 <gomp_malloc>
    3b48:	mov	x1, x0
    3b4c:	mov	x0, #0x1                   	// #1
    3b50:	stp	x0, x1, [x19]
    3b54:	ldr	x0, [sp, #88]
    3b58:	str	x0, [x1]
    3b5c:	ldr	x0, [sp, #96]
    3b60:	str	x0, [x1, #8]
    3b64:	mov	x0, #0xffffffffffffffff    	// #-1
    3b68:	stp	x19, x21, [x1, #16]
    3b6c:	stp	xzr, xzr, [x19, #16]
    3b70:	str	x0, [x1, #32]
    3b74:	mov	x0, x25
    3b78:	stp	xzr, xzr, [x19, #32]
    3b7c:	stp	xzr, x20, [x19, #48]
    3b80:	mov	w19, #0x0                   	// #0
    3b84:	stp	xzr, xzr, [x1, #56]
    3b88:	bl	0 <splay_tree_prefix_splay_tree_insert>
    3b8c:	b	3b28 <omp_target_associate_ptr+0xd8>
    3b90:	mov	w19, #0x16                  	// #22
    3b94:	b	3b28 <omp_target_associate_ptr+0xd8>

0000000000003b98 <omp_target_disassociate_ptr>:
    3b98:	stp	x29, x30, [sp, #-112]!
    3b9c:	mov	x29, sp
    3ba0:	stp	x19, x20, [sp, #16]
    3ba4:	str	x21, [sp, #32]
    3ba8:	tbz	w1, #31, 3bc4 <omp_target_disassociate_ptr+0x2c>
    3bac:	mov	w19, #0x16                  	// #22
    3bb0:	mov	w0, w19
    3bb4:	ldp	x19, x20, [sp, #16]
    3bb8:	ldr	x21, [sp, #32]
    3bbc:	ldp	x29, x30, [sp], #112
    3bc0:	ret
    3bc4:	mov	x20, x0
    3bc8:	mov	w0, w1
    3bcc:	bl	27f4 <resolve_device>
    3bd0:	mov	x19, x0
    3bd4:	cbz	x0, 3bac <omp_target_disassociate_ptr+0x14>
    3bd8:	ldr	w0, [x0, #8]
    3bdc:	tbz	w0, #2, 3bac <omp_target_disassociate_ptr+0x14>
    3be0:	add	x21, x19, #0xa8
    3be4:	add	x19, x19, #0xa0
    3be8:	mov	x0, x21
    3bec:	bl	2d0 <gomp_mutex_lock>
    3bf0:	add	x1, sp, #0x38
    3bf4:	mov	x0, x19
    3bf8:	stp	x20, x20, [sp, #56]
    3bfc:	bl	d24 <gomp_map_lookup>
    3c00:	mov	x20, x0
    3c04:	cbz	x0, 3c70 <omp_target_disassociate_ptr+0xd8>
    3c08:	ldr	x1, [x0]
    3c0c:	ldr	x0, [sp, #56]
    3c10:	cmp	x1, x0
    3c14:	b.ne	3c70 <omp_target_disassociate_ptr+0xd8>  // b.any
    3c18:	ldr	x0, [x20, #32]
    3c1c:	cmn	x0, #0x1
    3c20:	b.ne	3c70 <omp_target_disassociate_ptr+0xd8>  // b.any
    3c24:	ldr	x0, [x20, #16]
    3c28:	ldr	x1, [x0, #16]
    3c2c:	cbnz	x1, 3c70 <omp_target_disassociate_ptr+0xd8>
    3c30:	ldr	x1, [x0, #32]
    3c34:	cbnz	x1, 3c70 <omp_target_disassociate_ptr+0xd8>
    3c38:	ldr	x1, [x0]
    3c3c:	cmp	x1, #0x1
    3c40:	b.ne	3c70 <omp_target_disassociate_ptr+0xd8>  // b.any
    3c44:	ldr	x0, [x0, #48]
    3c48:	cbnz	x0, 3c70 <omp_target_disassociate_ptr+0xd8>
    3c4c:	mov	x0, x19
    3c50:	mov	x1, x20
    3c54:	bl	0 <splay_tree_prefix_splay_tree_remove>
    3c58:	mov	w19, #0x0                   	// #0
    3c5c:	ldr	x0, [x20, #16]
    3c60:	bl	ce8 <gomp_unmap_tgt>
    3c64:	mov	x0, x21
    3c68:	bl	2f8 <gomp_mutex_unlock>
    3c6c:	b	3bb0 <omp_target_disassociate_ptr+0x18>
    3c70:	mov	w19, #0x16                  	// #22
    3c74:	b	3c64 <omp_target_disassociate_ptr+0xcc>

0000000000003c78 <gomp_ialias_omp_pause_resource>:
    3c78:	cmn	w1, #0x2
    3c7c:	b.ne	3c84 <gomp_ialias_omp_pause_resource+0xc>  // b.any
    3c80:	b	0 <gomp_pause_host>
    3c84:	stp	x29, x30, [sp, #-32]!
    3c88:	mov	x29, sp
    3c8c:	str	x19, [sp, #16]
    3c90:	mov	w19, w1
    3c94:	tbnz	w1, #31, 3cb8 <gomp_ialias_omp_pause_resource+0x40>
    3c98:	bl	12e0 <gomp_init_targets_once>
    3c9c:	adrp	x0, 0 <gomp_to_device_kind_p>
    3ca0:	ldr	w0, [x0]
    3ca4:	cmp	w19, w0
    3ca8:	csetm	w0, ge  // ge = tcont
    3cac:	ldr	x19, [sp, #16]
    3cb0:	ldp	x29, x30, [sp], #32
    3cb4:	ret
    3cb8:	mov	w0, #0xffffffff            	// #-1
    3cbc:	b	3cac <gomp_ialias_omp_pause_resource+0x34>

0000000000003cc0 <gomp_ialias_omp_pause_resource_all>:
    3cc0:	stp	x29, x30, [sp, #-16]!
    3cc4:	mov	x29, sp
    3cc8:	bl	0 <gomp_pause_host>
    3ccc:	cmp	w0, #0x0
    3cd0:	csetm	w0, ne  // ne = any
    3cd4:	ldp	x29, x30, [sp], #16
    3cd8:	ret

splay-tree.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <splay_tree_prefix_splay_compare>:
   0:	ldp	x2, x3, [x0]
   4:	ldr	x0, [x1]
   8:	cmp	x2, x3
   c:	b.ne	1c <splay_tree_prefix_splay_compare+0x1c>  // b.any
  10:	ldr	x4, [x1, #8]
  14:	cmp	x4, x0
  18:	b.eq	34 <splay_tree_prefix_splay_compare+0x34>  // b.none
  1c:	cmp	x3, x0
  20:	b.ls	3c <splay_tree_prefix_splay_compare+0x3c>  // b.plast
  24:	ldr	x0, [x1, #8]
  28:	cmp	x2, x0
  2c:	cset	w0, cs  // cs = hs, nlast
  30:	ret
  34:	mov	w0, #0x0                   	// #0
  38:	b	30 <splay_tree_prefix_splay_compare+0x30>
  3c:	mov	w0, #0xffffffff            	// #-1
  40:	b	30 <splay_tree_prefix_splay_compare+0x30>

0000000000000044 <splay_tree_foreach_internal>:
  44:	stp	x29, x30, [sp, #-48]!
  48:	mov	x29, sp
  4c:	stp	x19, x20, [sp, #16]
  50:	mov	x19, x0
  54:	mov	x20, x1
  58:	str	x21, [sp, #32]
  5c:	mov	x21, x2
  60:	cbz	x19, 88 <splay_tree_foreach_internal+0x44>
  64:	mov	x0, x19
  68:	mov	x1, x21
  6c:	blr	x20
  70:	ldr	x0, [x19, #56]
  74:	mov	x2, x21
  78:	mov	x1, x20
  7c:	bl	44 <splay_tree_foreach_internal>
  80:	ldr	x19, [x19, #64]
  84:	b	60 <splay_tree_foreach_internal+0x1c>
  88:	ldp	x19, x20, [sp, #16]
  8c:	ldr	x21, [sp, #32]
  90:	ldp	x29, x30, [sp], #48
  94:	ret

0000000000000098 <splay_tree_splay.part.0>:
  98:	mov	x6, x0
  9c:	mov	x8, x1
  a0:	stp	x29, x30, [sp, #-16]!
  a4:	mov	x29, sp
  a8:	ldr	x5, [x6]
  ac:	mov	x0, x8
  b0:	mov	x1, x5
  b4:	bl	0 <splay_tree_prefix_splay_compare>
  b8:	mov	w7, w0
  bc:	cmp	w0, #0x0
  c0:	cbz	w0, f4 <splay_tree_splay.part.0+0x5c>
  c4:	ldp	x0, x1, [x5, #56]
  c8:	csel	x1, x1, x0, ge  // ge = tcont
  cc:	cbz	x1, f4 <splay_tree_splay.part.0+0x5c>
  d0:	mov	x0, x8
  d4:	bl	0 <splay_tree_prefix_splay_compare>
  d8:	cmp	w0, #0x0
  dc:	cbnz	w0, fc <splay_tree_splay.part.0+0x64>
  e0:	tbz	w7, #31, 14c <splay_tree_splay.part.0+0xb4>
  e4:	ldr	x0, [x1, #64]
  e8:	str	x5, [x1, #64]
  ec:	str	x0, [x5, #56]
  f0:	str	x1, [x6]
  f4:	ldp	x29, x30, [sp], #16
  f8:	ret
  fc:	b.ge	144 <splay_tree_splay.part.0+0xac>  // b.tcont
 100:	ldr	x2, [x1, #56]
 104:	cbz	x2, e0 <splay_tree_splay.part.0+0x48>
 108:	lsr	w4, w7, #31
 10c:	lsr	w3, w0, #31
 110:	cmp	w4, #0x0
 114:	ccmp	w3, #0x0, #0x4, ne  // ne = any
 118:	b.eq	15c <splay_tree_splay.part.0+0xc4>  // b.none
 11c:	ldr	x0, [x1, #56]
 120:	ldr	x2, [x0, #64]
 124:	str	x1, [x0, #64]
 128:	str	x2, [x1, #56]
 12c:	str	x0, [x5, #56]
 130:	ldr	x1, [x0, #64]
 134:	str	x5, [x0, #64]
 138:	str	x1, [x5, #56]
 13c:	str	x0, [x6]
 140:	b	a8 <splay_tree_splay.part.0+0x10>
 144:	ldr	x2, [x1, #64]
 148:	b	104 <splay_tree_splay.part.0+0x6c>
 14c:	ldr	x0, [x1, #56]
 150:	str	x5, [x1, #56]
 154:	str	x0, [x5, #64]
 158:	b	f0 <splay_tree_splay.part.0+0x58>
 15c:	cmp	w7, #0x0
 160:	cset	w2, gt
 164:	cmp	w0, #0x0
 168:	cset	w0, gt
 16c:	cmp	w2, #0x0
 170:	ccmp	w0, #0x0, #0x4, ne  // ne = any
 174:	b.eq	19c <splay_tree_splay.part.0+0x104>  // b.none
 178:	ldr	x0, [x1, #64]
 17c:	ldr	x2, [x0, #56]
 180:	str	x1, [x0, #56]
 184:	str	x2, [x1, #64]
 188:	str	x0, [x5, #64]
 18c:	ldr	x1, [x0, #56]
 190:	str	x5, [x0, #56]
 194:	str	x1, [x5, #64]
 198:	b	13c <splay_tree_splay.part.0+0xa4>
 19c:	cmp	w4, #0x0
 1a0:	ccmp	w0, #0x0, #0x4, ne  // ne = any
 1a4:	b.eq	1bc <splay_tree_splay.part.0+0x124>  // b.none
 1a8:	ldr	x0, [x1, #64]
 1ac:	ldr	x2, [x0, #56]
 1b0:	str	x1, [x0, #56]
 1b4:	str	x2, [x1, #64]
 1b8:	b	12c <splay_tree_splay.part.0+0x94>
 1bc:	cmp	w3, #0x0
 1c0:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 1c4:	b.eq	a8 <splay_tree_splay.part.0+0x10>  // b.none
 1c8:	ldr	x0, [x1, #56]
 1cc:	ldr	x2, [x0, #64]
 1d0:	str	x1, [x0, #64]
 1d4:	str	x2, [x1, #56]
 1d8:	b	188 <splay_tree_splay.part.0+0xf0>

00000000000001dc <splay_tree_prefix_splay_tree_insert>:
 1dc:	stp	x29, x30, [sp, #-16]!
 1e0:	mov	x10, x0
 1e4:	mov	x9, x1
 1e8:	mov	x29, sp
 1ec:	ldr	x2, [x0]
 1f0:	cbz	x2, 1f8 <splay_tree_prefix_splay_tree_insert+0x1c>
 1f4:	bl	98 <splay_tree_splay.part.0>
 1f8:	ldr	x5, [x10]
 1fc:	cbz	x5, 24c <splay_tree_prefix_splay_tree_insert+0x70>
 200:	mov	x1, x9
 204:	mov	x0, x5
 208:	bl	0 <splay_tree_prefix_splay_compare>
 20c:	cmp	w0, #0x0
 210:	cbnz	w0, 220 <splay_tree_prefix_splay_tree_insert+0x44>
 214:	adrp	x0, 0 <splay_tree_prefix_splay_compare>
 218:	add	x0, x0, #0x0
 21c:	bl	0 <gomp_fatal>
 220:	b.ge	23c <splay_tree_prefix_splay_tree_insert+0x60>  // b.tcont
 224:	ldr	x0, [x5, #64]
 228:	stp	x5, x0, [x9, #56]
 22c:	str	xzr, [x5, #64]
 230:	ldp	x29, x30, [sp], #16
 234:	str	x9, [x10]
 238:	ret
 23c:	ldr	x0, [x5, #56]
 240:	stp	x0, x5, [x9, #56]
 244:	str	xzr, [x5, #56]
 248:	b	230 <splay_tree_prefix_splay_tree_insert+0x54>
 24c:	stp	xzr, xzr, [x9, #56]
 250:	b	230 <splay_tree_prefix_splay_tree_insert+0x54>

0000000000000254 <splay_tree_prefix_splay_tree_remove>:
 254:	stp	x29, x30, [sp, #-16]!
 258:	mov	x9, x0
 25c:	mov	x10, x1
 260:	mov	x29, sp
 264:	ldr	x2, [x0]
 268:	cbz	x2, 270 <splay_tree_prefix_splay_tree_remove+0x1c>
 26c:	bl	98 <splay_tree_splay.part.0>
 270:	ldr	x5, [x9]
 274:	cbz	x5, 2a8 <splay_tree_prefix_splay_tree_remove+0x54>
 278:	mov	x1, x10
 27c:	mov	x0, x5
 280:	bl	0 <splay_tree_prefix_splay_compare>
 284:	cbnz	w0, 2a8 <splay_tree_prefix_splay_tree_remove+0x54>
 288:	ldp	x0, x1, [x5, #56]
 28c:	cbz	x0, 2b0 <splay_tree_prefix_splay_tree_remove+0x5c>
 290:	str	x0, [x9]
 294:	cbz	x1, 2a8 <splay_tree_prefix_splay_tree_remove+0x54>
 298:	mov	x2, x0
 29c:	ldr	x0, [x0, #64]
 2a0:	cbnz	x0, 298 <splay_tree_prefix_splay_tree_remove+0x44>
 2a4:	str	x1, [x2, #64]
 2a8:	ldp	x29, x30, [sp], #16
 2ac:	ret
 2b0:	str	x1, [x9]
 2b4:	b	2a8 <splay_tree_prefix_splay_tree_remove+0x54>

00000000000002b8 <splay_tree_prefix_splay_tree_lookup>:
 2b8:	stp	x29, x30, [sp, #-16]!
 2bc:	mov	x9, x0
 2c0:	mov	x10, x1
 2c4:	mov	x29, sp
 2c8:	ldr	x2, [x0]
 2cc:	cbz	x2, 2d4 <splay_tree_prefix_splay_tree_lookup+0x1c>
 2d0:	bl	98 <splay_tree_splay.part.0>
 2d4:	ldr	x5, [x9]
 2d8:	cbz	x5, 2f0 <splay_tree_prefix_splay_tree_lookup+0x38>
 2dc:	mov	x0, x5
 2e0:	mov	x1, x10
 2e4:	bl	0 <splay_tree_prefix_splay_compare>
 2e8:	cmp	w0, #0x0
 2ec:	csel	x5, x5, xzr, eq  // eq = none
 2f0:	mov	x0, x5
 2f4:	ldp	x29, x30, [sp], #16
 2f8:	ret

00000000000002fc <splay_tree_prefix_splay_tree_foreach>:
 2fc:	ldr	x0, [x0]
 300:	b	44 <splay_tree_foreach_internal>

libgomp-plugin.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_PLUGIN_malloc>:
   0:	b	0 <gomp_malloc>

0000000000000004 <GOMP_PLUGIN_malloc_cleared>:
   4:	b	0 <gomp_malloc_cleared>

0000000000000008 <GOMP_PLUGIN_realloc>:
   8:	b	0 <gomp_realloc>

000000000000000c <GOMP_PLUGIN_debug>:
   c:	stp	x29, x30, [sp, #-256]!
  10:	mov	x29, sp
  14:	stp	x2, x3, [sp, #208]
  18:	add	x2, sp, #0x100
  1c:	stp	x2, x2, [sp, #48]
  20:	add	x2, sp, #0xd0
  24:	str	x2, [sp, #64]
  28:	mov	w2, #0xffffffd0            	// #-48
  2c:	str	w2, [sp, #72]
  30:	mov	w2, #0xffffff80            	// #-128
  34:	str	w2, [sp, #76]
  38:	adrp	x2, 0 <gomp_debug_var>
  3c:	str	q0, [sp, #80]
  40:	ldr	w2, [x2]
  44:	str	q1, [sp, #96]
  48:	str	q2, [sp, #112]
  4c:	str	q3, [sp, #128]
  50:	str	q4, [sp, #144]
  54:	str	q5, [sp, #160]
  58:	str	q6, [sp, #176]
  5c:	str	q7, [sp, #192]
  60:	stp	x4, x5, [sp, #224]
  64:	stp	x6, x7, [sp, #240]
  68:	cbz	w2, 84 <GOMP_PLUGIN_debug+0x78>
  6c:	ldp	x2, x3, [sp, #48]
  70:	stp	x2, x3, [sp, #16]
  74:	ldp	x2, x3, [sp, #64]
  78:	stp	x2, x3, [sp, #32]
  7c:	add	x2, sp, #0x10
  80:	bl	0 <gomp_vdebug>
  84:	ldp	x29, x30, [sp], #256
  88:	ret

000000000000008c <GOMP_PLUGIN_error>:
  8c:	stp	x29, x30, [sp, #-272]!
  90:	mov	x29, sp
  94:	stp	x1, x2, [sp, #216]
  98:	add	x1, sp, #0x110
  9c:	stp	x1, x1, [sp, #48]
  a0:	add	x1, sp, #0xd0
  a4:	str	x1, [sp, #64]
  a8:	mov	w1, #0xffffffc8            	// #-56
  ac:	str	w1, [sp, #72]
  b0:	mov	w1, #0xffffff80            	// #-128
  b4:	str	w1, [sp, #76]
  b8:	add	x1, sp, #0x10
  bc:	stp	x3, x4, [sp, #232]
  c0:	ldp	x2, x3, [sp, #48]
  c4:	stp	x2, x3, [sp, #16]
  c8:	ldp	x2, x3, [sp, #64]
  cc:	stp	x2, x3, [sp, #32]
  d0:	str	q0, [sp, #80]
  d4:	str	q1, [sp, #96]
  d8:	str	q2, [sp, #112]
  dc:	str	q3, [sp, #128]
  e0:	str	q4, [sp, #144]
  e4:	str	q5, [sp, #160]
  e8:	str	q6, [sp, #176]
  ec:	str	q7, [sp, #192]
  f0:	stp	x5, x6, [sp, #248]
  f4:	str	x7, [sp, #264]
  f8:	bl	0 <gomp_verror>
  fc:	ldp	x29, x30, [sp], #272
 100:	ret

0000000000000104 <GOMP_PLUGIN_fatal>:
 104:	stp	x29, x30, [sp, #-272]!
 108:	mov	x29, sp
 10c:	stp	x1, x2, [sp, #216]
 110:	add	x1, sp, #0x110
 114:	stp	x1, x1, [sp, #48]
 118:	add	x1, sp, #0xd0
 11c:	str	x1, [sp, #64]
 120:	mov	w1, #0xffffffc8            	// #-56
 124:	str	w1, [sp, #72]
 128:	mov	w1, #0xffffff80            	// #-128
 12c:	str	w1, [sp, #76]
 130:	add	x1, sp, #0x10
 134:	stp	x3, x4, [sp, #232]
 138:	ldp	x2, x3, [sp, #48]
 13c:	stp	x2, x3, [sp, #16]
 140:	ldp	x2, x3, [sp, #64]
 144:	stp	x2, x3, [sp, #32]
 148:	str	q0, [sp, #80]
 14c:	str	q1, [sp, #96]
 150:	str	q2, [sp, #112]
 154:	str	q3, [sp, #128]
 158:	str	q4, [sp, #144]
 15c:	str	q5, [sp, #160]
 160:	str	q6, [sp, #176]
 164:	str	q7, [sp, #192]
 168:	stp	x5, x6, [sp, #248]
 16c:	str	x7, [sp, #264]
 170:	bl	0 <gomp_vfatal>

oacc-parallel.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <goacc_wait>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	w20, w0
  10:	mov	x19, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	w21, w1
  1c:	cbnz	w21, 30 <goacc_wait+0x30>
  20:	ldp	x19, x20, [sp, #16]
  24:	ldp	x21, x22, [sp, #32]
  28:	ldp	x29, x30, [sp], #48
  2c:	ret
  30:	ldr	w1, [x19, #24]
  34:	ldr	x0, [x19]
  38:	tbnz	w1, #31, 6c <goacc_wait+0x6c>
  3c:	add	x1, x0, #0xb
  40:	and	x1, x1, #0xfffffffffffffff8
  44:	str	x1, [x19]
  48:	ldr	w22, [x0]
  4c:	cmn	w22, #0x1
  50:	b.ne	9c <goacc_wait+0x9c>  // b.any
  54:	cmn	w20, #0x2
  58:	b.ne	88 <goacc_wait+0x88>  // b.any
  5c:	ldp	x19, x20, [sp, #16]
  60:	ldp	x21, x22, [sp, #32]
  64:	ldp	x29, x30, [sp], #48
  68:	b	0 <acc_wait_all>
  6c:	add	w2, w1, #0x8
  70:	str	w2, [x19, #24]
  74:	cmp	w2, #0x0
  78:	b.gt	3c <goacc_wait+0x3c>
  7c:	ldr	x0, [x19, #8]
  80:	add	x0, x0, w1, sxtw
  84:	b	48 <goacc_wait+0x48>
  88:	mov	w0, w20
  8c:	ldp	x19, x20, [sp, #16]
  90:	ldp	x21, x22, [sp, #32]
  94:	ldp	x29, x30, [sp], #48
  98:	b	0 <acc_wait_all_async>
  9c:	mov	w0, w22
  a0:	bl	0 <acc_async_test>
  a4:	cbnz	w0, b8 <goacc_wait+0xb8>
  a8:	cmn	w20, #0x2
  ac:	b.ne	c0 <goacc_wait+0xc0>  // b.any
  b0:	mov	w0, w22
  b4:	bl	0 <acc_wait>
  b8:	sub	w21, w21, #0x1
  bc:	b	1c <goacc_wait+0x1c>
  c0:	cmp	w22, w20
  c4:	b.eq	b8 <goacc_wait+0xb8>  // b.none
  c8:	mov	w1, w20
  cc:	mov	w0, w22
  d0:	bl	0 <acc_wait_async>
  d4:	b	b8 <goacc_wait+0xb8>

00000000000000d8 <GOACC_parallel_keyed>:
  d8:	stp	x29, x30, [sp, #-352]!
  dc:	mov	x29, sp
  e0:	stp	x19, x20, [sp, #16]
  e4:	mvn	w20, w0
  e8:	adrp	x0, 0 <gomp_debug_var>
  ec:	stp	x21, x22, [sp, #32]
  f0:	mov	x19, x1
  f4:	ldr	w0, [x0]
  f8:	stp	x23, x24, [sp, #48]
  fc:	mov	x21, x4
 100:	mov	x24, x2
 104:	stp	x25, x26, [sp, #64]
 108:	mov	x23, x3
 10c:	mov	x26, x5
 110:	str	x27, [sp, #80]
 114:	str	q0, [x29, #208]
 118:	str	q1, [x29, #224]
 11c:	str	q2, [x29, #240]
 120:	str	q3, [x29, #256]
 124:	str	q4, [x29, #272]
 128:	str	q5, [x29, #288]
 12c:	str	q6, [x29, #304]
 130:	str	q7, [x29, #320]
 134:	stp	x6, x7, [x29, #336]
 138:	cbz	w0, 164 <GOACC_parallel_keyed+0x8c>
 13c:	mov	x6, x5
 140:	adrp	x1, 0 <goacc_wait>
 144:	mov	x5, x4
 148:	add	x1, x1, #0x0
 14c:	mov	x4, x3
 150:	mov	w0, #0x0                   	// #0
 154:	mov	x3, x2
 158:	adrp	x2, 0 <goacc_wait>
 15c:	add	x2, x2, #0x0
 160:	bl	0 <gomp_debug>
 164:	bl	0 <goacc_lazy_initialize>
 168:	adrp	x0, 0 <goacc_tls_data>
 16c:	ldr	x0, [x0]
 170:	mrs	x1, tpidr_el0
 174:	sub	w4, w24, #0x1
 178:	mov	x2, #0x1                   	// #1
 17c:	mov	x5, #0x8                   	// #8
 180:	ldr	x0, [x1, x0]
 184:	mov	x1, #0x0                   	// #0
 188:	ldr	x25, [x0, #8]
 18c:	cmp	x24, x1
 190:	b.ne	1cc <GOACC_parallel_keyed+0xf4>  // b.any
 194:	tbz	w20, #0, 23c <GOACC_parallel_keyed+0x164>
 198:	mov	w0, #0x2                   	// #2
 19c:	bl	0 <goacc_save_and_set_bind>
 1a0:	mov	x0, x23
 1a4:	blr	x19
 1a8:	bl	0 <goacc_restore_bind>
 1ac:	mov	sp, x29
 1b0:	ldp	x19, x20, [sp, #16]
 1b4:	ldp	x21, x22, [sp, #32]
 1b8:	ldp	x23, x24, [sp, #48]
 1bc:	ldp	x25, x26, [sp, #64]
 1c0:	ldr	x27, [sp, #80]
 1c4:	ldp	x29, x30, [sp], #352
 1c8:	ret
 1cc:	ldrh	w0, [x26, x1, lsl #1]
 1d0:	and	w3, w0, #0xff
 1d4:	cmp	w3, #0x8
 1d8:	b.ne	228 <GOACC_parallel_keyed+0x150>  // b.any
 1dc:	cmp	w4, w1
 1e0:	b.le	234 <GOACC_parallel_keyed+0x15c>
 1e4:	ldrh	w3, [x26, x2, lsl #1]
 1e8:	and	w3, w3, #0xff
 1ec:	ldr	x6, [x21, x1, lsl #3]
 1f0:	cmp	x6, #0x8
 1f4:	b.eq	228 <GOACC_parallel_keyed+0x150>  // b.none
 1f8:	cmp	w3, #0x4
 1fc:	b.ne	224 <GOACC_parallel_keyed+0x14c>  // b.any
 200:	ldr	x3, [x21, x2, lsl #3]
 204:	cbnz	x3, 224 <GOACC_parallel_keyed+0x14c>
 208:	ldr	x3, [x23, x2, lsl #3]
 20c:	ldr	x6, [x23, x1, lsl #3]
 210:	ldr	x3, [x3]
 214:	cmp	x6, x3
 218:	b.ne	224 <GOACC_parallel_keyed+0x14c>  // b.any
 21c:	strh	w0, [x26, x2, lsl #1]
 220:	str	x5, [x21, x2, lsl #3]
 224:	str	xzr, [x23, x1, lsl #3]
 228:	add	x1, x1, #0x1
 22c:	add	x2, x2, #0x1
 230:	b	18c <GOACC_parallel_keyed+0xb4>
 234:	mov	w3, #0xffff                	// #65535
 238:	b	1ec <GOACC_parallel_keyed+0x114>
 23c:	ldr	w0, [x25, #16]
 240:	cmp	w0, #0x2
 244:	b.eq	318 <GOACC_parallel_keyed+0x240>  // b.none
 248:	add	x0, x29, #0x160
 24c:	stp	x0, x0, [x29, #120]
 250:	add	x0, x29, #0x150
 254:	add	x27, x29, #0x68
 258:	str	x0, [x29, #136]
 25c:	mov	w0, #0xfffffff0            	// #-16
 260:	mov	w22, #0xfffffffe            	// #-2
 264:	str	xzr, [x29, #104]
 268:	str	wzr, [x29, #112]
 26c:	str	w0, [x29, #144]
 270:	mov	w0, #0xffffff80            	// #-128
 274:	str	w0, [x29, #148]
 278:	ldr	w1, [x29, #144]
 27c:	ldr	x0, [x29, #120]
 280:	tbnz	w1, #31, 42c <GOACC_parallel_keyed+0x354>
 284:	add	x1, x0, #0xb
 288:	and	x1, x1, #0xfffffffffffffff8
 28c:	str	x1, [x29, #120]
 290:	ldr	w20, [x0]
 294:	cbnz	w20, 324 <GOACC_parallel_keyed+0x24c>
 298:	ldr	x1, [x25, #248]
 29c:	mov	w0, w22
 2a0:	blr	x1
 2a4:	ldr	w0, [x25, #8]
 2a8:	tbnz	w0, #1, 44c <GOACC_parallel_keyed+0x374>
 2ac:	str	x19, [x29, #152]
 2b0:	add	x19, x19, #0x1
 2b4:	str	x19, [x29, #160]
 2b8:	add	x19, x25, #0xa8
 2bc:	mov	w0, #0x1                   	// #1
 2c0:	ldaxr	w1, [x19]
 2c4:	cbnz	w1, 2d0 <GOACC_parallel_keyed+0x1f8>
 2c8:	stxr	w2, w0, [x19]
 2cc:	cbnz	w2, 2c0 <GOACC_parallel_keyed+0x1e8>
 2d0:	cmp	w1, #0x0
 2d4:	b.eq	2e0 <GOACC_parallel_keyed+0x208>  // b.none
 2d8:	mov	x0, x19
 2dc:	bl	0 <gomp_mutex_lock_slow>
 2e0:	add	x1, x29, #0x98
 2e4:	add	x0, x25, #0xa0
 2e8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
 2ec:	mov	x27, x0
 2f0:	ldxr	w0, [x19]
 2f4:	stlxr	w1, wzr, [x19]
 2f8:	cbnz	w1, 2f0 <GOACC_parallel_keyed+0x218>
 2fc:	tbz	w0, #31, 308 <GOACC_parallel_keyed+0x230>
 300:	mov	x0, x19
 304:	bl	0 <gomp_mutex_unlock_slow>
 308:	cbnz	x27, 448 <GOACC_parallel_keyed+0x370>
 30c:	adrp	x0, 0 <goacc_wait>
 310:	add	x0, x0, #0x0
 314:	bl	0 <gomp_fatal>
 318:	mov	x0, x23
 31c:	blr	x19
 320:	b	1ac <GOACC_parallel_keyed+0xd4>
 324:	ubfx	x1, x20, #16, #12
 328:	cbz	w1, 338 <GOACC_parallel_keyed+0x260>
 32c:	adrp	x0, 0 <goacc_wait>
 330:	add	x0, x0, #0x0
 334:	bl	0 <gomp_fatal>
 338:	lsr	w0, w20, #28
 33c:	and	w1, w20, #0xffff
 340:	cmp	w0, #0x2
 344:	b.eq	3c0 <GOACC_parallel_keyed+0x2e8>  // b.none
 348:	cmp	w0, #0x3
 34c:	b.eq	40c <GOACC_parallel_keyed+0x334>  // b.none
 350:	cmp	w0, #0x1
 354:	b.ne	41c <GOACC_parallel_keyed+0x344>  // b.any
 358:	ldp	x0, x6, [x29, #120]
 35c:	mov	x3, #0x0                   	// #0
 360:	mov	w4, #0x0                   	// #0
 364:	lsr	w2, w1, w3
 368:	tbz	w2, #0, 38c <GOACC_parallel_keyed+0x2b4>
 36c:	ldr	w5, [x29, #144]
 370:	tbnz	w5, #31, 3a4 <GOACC_parallel_keyed+0x2cc>
 374:	add	x2, x0, #0xb
 378:	mov	w4, #0x1                   	// #1
 37c:	and	x2, x2, #0xfffffffffffffff8
 380:	ldr	w0, [x0]
 384:	str	w0, [x27, x3, lsl #2]
 388:	mov	x0, x2
 38c:	add	x3, x3, #0x1
 390:	cmp	x3, #0x3
 394:	b.ne	364 <GOACC_parallel_keyed+0x28c>  // b.any
 398:	cbz	w4, 278 <GOACC_parallel_keyed+0x1a0>
 39c:	str	x0, [x29, #120]
 3a0:	b	278 <GOACC_parallel_keyed+0x1a0>
 3a4:	add	w2, w5, #0x8
 3a8:	str	w2, [x29, #144]
 3ac:	cmp	w2, #0x0
 3b0:	b.gt	374 <GOACC_parallel_keyed+0x29c>
 3b4:	mov	x2, x0
 3b8:	add	x0, x6, w5, sxtw
 3bc:	b	380 <GOACC_parallel_keyed+0x2a8>
 3c0:	mov	w0, #0xffff                	// #65535
 3c4:	mov	w22, w1
 3c8:	cmp	w1, w0
 3cc:	b.ne	278 <GOACC_parallel_keyed+0x1a0>  // b.any
 3d0:	ldr	w1, [x29, #144]
 3d4:	ldr	x0, [x29, #120]
 3d8:	tbnz	w1, #31, 3f0 <GOACC_parallel_keyed+0x318>
 3dc:	add	x1, x0, #0xb
 3e0:	and	x1, x1, #0xfffffffffffffff8
 3e4:	str	x1, [x29, #120]
 3e8:	ldr	w22, [x0]
 3ec:	b	278 <GOACC_parallel_keyed+0x1a0>
 3f0:	add	w2, w1, #0x8
 3f4:	str	w2, [x29, #144]
 3f8:	cmp	w2, #0x0
 3fc:	b.gt	3dc <GOACC_parallel_keyed+0x304>
 400:	ldr	x0, [x29, #128]
 404:	add	x0, x0, w1, sxtw
 408:	b	3e8 <GOACC_parallel_keyed+0x310>
 40c:	add	x2, x29, #0x78
 410:	mov	w0, w22
 414:	bl	0 <goacc_wait>
 418:	b	278 <GOACC_parallel_keyed+0x1a0>
 41c:	mov	w1, w0
 420:	adrp	x0, 0 <goacc_wait>
 424:	add	x0, x0, #0x0
 428:	b	334 <GOACC_parallel_keyed+0x25c>
 42c:	add	w2, w1, #0x8
 430:	str	w2, [x29, #144]
 434:	cmp	w2, #0x0
 438:	b.gt	284 <GOACC_parallel_keyed+0x1ac>
 43c:	ldr	x0, [x29, #128]
 440:	add	x0, x0, w1, sxtw
 444:	b	290 <GOACC_parallel_keyed+0x1b8>
 448:	ldr	x19, [x27, #24]
 44c:	mov	x4, x21
 450:	mov	x3, #0x0                   	// #0
 454:	mov	x5, x26
 458:	mov	x2, x23
 45c:	mov	x1, x24
 460:	mov	x0, x25
 464:	mov	w7, #0x0                   	// #0
 468:	mov	w6, #0x1                   	// #1
 46c:	bl	0 <gomp_map_vars>
 470:	mov	x21, x0
 474:	lsl	x0, x24, #3
 478:	add	x0, x0, #0xf
 47c:	and	x0, x0, #0xfffffffffffffff0
 480:	sub	sp, sp, x0
 484:	mov	x3, sp
 488:	mov	w1, w20
 48c:	cmp	x24, w20, uxtw
 490:	b.hi	4d0 <GOACC_parallel_keyed+0x3f8>  // b.pmore
 494:	ldr	x7, [x25, #184]
 498:	mov	x6, x21
 49c:	add	x5, x29, #0x68
 4a0:	mov	w4, w22
 4a4:	mov	x2, x23
 4a8:	mov	x1, x24
 4ac:	mov	x0, x19
 4b0:	blr	x7
 4b4:	cmn	w22, #0x2
 4b8:	b.cc	500 <GOACC_parallel_keyed+0x428>  // b.lo, b.ul, b.last
 4bc:	b.ne	504 <GOACC_parallel_keyed+0x42c>  // b.any
 4c0:	mov	w1, #0x1                   	// #1
 4c4:	mov	x0, x21
 4c8:	bl	0 <gomp_unmap_vars>
 4cc:	b	554 <GOACC_parallel_keyed+0x47c>
 4d0:	add	x0, x21, x1, lsl #5
 4d4:	add	w20, w20, #0x1
 4d8:	mov	x4, x0
 4dc:	ldr	x2, [x0, #64]
 4e0:	ldr	x4, [x4, #80]
 4e4:	ldr	x0, [x2, #24]
 4e8:	ldr	x2, [x2, #16]
 4ec:	add	x0, x0, x4
 4f0:	ldr	x2, [x2, #16]
 4f4:	add	x0, x0, x2
 4f8:	str	x0, [x3, x1, lsl #3]
 4fc:	b	488 <GOACC_parallel_keyed+0x3b0>
 500:	tbnz	w22, #31, 4c0 <GOACC_parallel_keyed+0x3e8>
 504:	add	x3, x21, #0x40
 508:	mov	x0, #0x0                   	// #0
 50c:	ldr	x2, [x21, #48]
 510:	b	530 <GOACC_parallel_keyed+0x458>
 514:	lsl	x1, x0, #5
 518:	ldr	x1, [x3, x1]
 51c:	cbz	x1, 52c <GOACC_parallel_keyed+0x454>
 520:	ldr	x1, [x1, #32]
 524:	cmp	x1, #0x1
 528:	b.eq	540 <GOACC_parallel_keyed+0x468>  // b.none
 52c:	add	x0, x0, #0x1
 530:	cmp	x2, x0
 534:	b.ne	514 <GOACC_parallel_keyed+0x43c>  // b.any
 538:	mov	w1, #0x0                   	// #0
 53c:	b	4c4 <GOACC_parallel_keyed+0x3ec>
 540:	ldr	x0, [x21, #56]
 544:	mov	w1, w22
 548:	ldr	x2, [x0, #192]
 54c:	mov	x0, x21
 550:	blr	x2
 554:	ldr	x1, [x25, #248]
 558:	mov	w0, #0xfffffffe            	// #-2
 55c:	blr	x1
 560:	b	1ac <GOACC_parallel_keyed+0xd4>

0000000000000564 <GOACC_parallel>:
 564:	stp	x29, x30, [sp, #-32]!
 568:	mov	w0, #0x2                   	// #2
 56c:	mov	x29, sp
 570:	stp	x19, x20, [sp, #16]
 574:	mov	x20, x3
 578:	mov	x19, x1
 57c:	bl	0 <goacc_save_and_set_bind>
 580:	mov	x0, x20
 584:	blr	x19
 588:	bl	0 <goacc_restore_bind>
 58c:	ldp	x19, x20, [sp, #16]
 590:	ldp	x29, x30, [sp], #32
 594:	ret

0000000000000598 <GOACC_data_start>:
 598:	stp	x29, x30, [sp, #-80]!
 59c:	mov	x29, sp
 5a0:	stp	x19, x20, [sp, #16]
 5a4:	adrp	x20, 0 <gomp_debug_var>
 5a8:	stp	x21, x22, [sp, #32]
 5ac:	mvn	w21, w0
 5b0:	ldr	w0, [x20]
 5b4:	stp	x23, x24, [sp, #48]
 5b8:	mov	x22, x1
 5bc:	mov	x23, x2
 5c0:	stp	x25, x26, [sp, #64]
 5c4:	mov	x24, x3
 5c8:	mov	x25, x4
 5cc:	cbz	w0, 5fc <GOACC_data_start+0x64>
 5d0:	mov	x6, x4
 5d4:	mov	x4, x2
 5d8:	adrp	x2, 0 <goacc_wait>
 5dc:	add	x2, x2, #0x0
 5e0:	mov	x5, x3
 5e4:	add	x2, x2, #0x15
 5e8:	mov	x3, x1
 5ec:	mov	w0, #0x0                   	// #0
 5f0:	adrp	x1, 0 <goacc_wait>
 5f4:	add	x1, x1, #0x0
 5f8:	bl	0 <gomp_debug>
 5fc:	bl	0 <goacc_lazy_initialize>
 600:	adrp	x0, 0 <goacc_tls_data>
 604:	ldr	x0, [x0]
 608:	mrs	x1, tpidr_el0
 60c:	ldr	x19, [x1, x0]
 610:	ldr	x26, [x19, #8]
 614:	ldr	w0, [x26, #8]
 618:	orr	w21, w21, w0
 61c:	tbz	w21, #0, 668 <GOACC_data_start+0xd0>
 620:	mov	x1, #0x0                   	// #0
 624:	mov	w7, #0x0                   	// #0
 628:	mov	w6, #0x1                   	// #1
 62c:	mov	x5, #0x0                   	// #0
 630:	mov	x4, #0x0                   	// #0
 634:	mov	x3, #0x0                   	// #0
 638:	mov	x2, #0x0                   	// #0
 63c:	mov	x0, #0x0                   	// #0
 640:	bl	0 <gomp_map_vars>
 644:	ldr	x1, [x19, #24]
 648:	str	x1, [x0, #40]
 64c:	str	x0, [x19, #24]
 650:	ldp	x19, x20, [sp, #16]
 654:	ldp	x21, x22, [sp, #32]
 658:	ldp	x23, x24, [sp, #48]
 65c:	ldp	x25, x26, [sp, #64]
 660:	ldp	x29, x30, [sp], #80
 664:	ret
 668:	ldr	w0, [x20]
 66c:	cbz	w0, 68c <GOACC_data_start+0xf4>
 670:	adrp	x0, 0 <goacc_wait>
 674:	add	x0, x0, #0x0
 678:	add	x2, x0, #0x15
 67c:	adrp	x1, 0 <goacc_wait>
 680:	mov	w0, #0x0                   	// #0
 684:	add	x1, x1, #0x0
 688:	bl	0 <gomp_debug>
 68c:	mov	x5, x25
 690:	mov	x4, x24
 694:	mov	x2, x23
 698:	mov	x1, x22
 69c:	mov	x0, x26
 6a0:	mov	w7, #0x0                   	// #0
 6a4:	mov	w6, #0x1                   	// #1
 6a8:	mov	x3, #0x0                   	// #0
 6ac:	bl	0 <gomp_map_vars>
 6b0:	mov	x21, x0
 6b4:	ldr	w0, [x20]
 6b8:	cbz	w0, 6d8 <GOACC_data_start+0x140>
 6bc:	adrp	x2, 0 <goacc_wait>
 6c0:	add	x2, x2, #0x0
 6c4:	adrp	x1, 0 <goacc_wait>
 6c8:	add	x2, x2, #0x15
 6cc:	add	x1, x1, #0x0
 6d0:	mov	w0, #0x0                   	// #0
 6d4:	bl	0 <gomp_debug>
 6d8:	ldr	x0, [x19, #24]
 6dc:	str	x0, [x21, #40]
 6e0:	str	x21, [x19, #24]
 6e4:	b	650 <GOACC_data_start+0xb8>

00000000000006e8 <GOACC_data_end>:
 6e8:	adrp	x0, 0 <goacc_tls_data>
 6ec:	ldr	x0, [x0]
 6f0:	mrs	x1, tpidr_el0
 6f4:	stp	x29, x30, [sp, #-48]!
 6f8:	mov	x29, sp
 6fc:	str	x21, [sp, #32]
 700:	ldr	x21, [x1, x0]
 704:	adrp	x0, 0 <gomp_debug_var>
 708:	stp	x19, x20, [sp, #16]
 70c:	mov	x19, x0
 710:	ldr	w1, [x0]
 714:	ldr	x20, [x21, #24]
 718:	cbz	w1, 738 <GOACC_data_end+0x50>
 71c:	adrp	x2, 0 <goacc_wait>
 720:	add	x2, x2, #0x0
 724:	adrp	x1, 0 <goacc_wait>
 728:	add	x2, x2, #0x26
 72c:	add	x1, x1, #0x0
 730:	mov	w0, #0x0                   	// #0
 734:	bl	0 <gomp_debug>
 738:	ldr	x0, [x20, #40]
 73c:	str	x0, [x21, #24]
 740:	mov	w1, #0x1                   	// #1
 744:	mov	x0, x20
 748:	bl	0 <gomp_unmap_vars>
 74c:	ldr	w0, [x19]
 750:	cbz	w0, 77c <GOACC_data_end+0x94>
 754:	ldp	x19, x20, [sp, #16]
 758:	adrp	x2, 0 <goacc_wait>
 75c:	ldr	x21, [sp, #32]
 760:	add	x2, x2, #0x0
 764:	ldp	x29, x30, [sp], #48
 768:	add	x2, x2, #0x26
 76c:	adrp	x1, 0 <goacc_wait>
 770:	mov	w0, #0x0                   	// #0
 774:	add	x1, x1, #0x0
 778:	b	0 <gomp_debug>
 77c:	ldp	x19, x20, [sp, #16]
 780:	ldr	x21, [sp, #32]
 784:	ldp	x29, x30, [sp], #48
 788:	ret

000000000000078c <GOACC_enter_exit_data>:
 78c:	stp	x29, x30, [sp, #-272]!
 790:	mov	x29, sp
 794:	stp	x19, x20, [sp, #16]
 798:	mov	w19, w0
 79c:	mov	x20, x2
 7a0:	stp	x21, x22, [sp, #32]
 7a4:	mov	x21, x3
 7a8:	mov	x22, x4
 7ac:	stp	x23, x24, [sp, #48]
 7b0:	mov	x23, x1
 7b4:	mov	w24, w6
 7b8:	stp	x25, x26, [sp, #64]
 7bc:	mov	w26, w5
 7c0:	stp	x27, x28, [sp, #80]
 7c4:	str	q0, [sp, #128]
 7c8:	str	q1, [sp, #144]
 7cc:	str	q2, [sp, #160]
 7d0:	str	q3, [sp, #176]
 7d4:	str	q4, [sp, #192]
 7d8:	str	q5, [sp, #208]
 7dc:	str	q6, [sp, #224]
 7e0:	str	q7, [sp, #240]
 7e4:	str	x7, [sp, #264]
 7e8:	bl	0 <goacc_lazy_initialize>
 7ec:	adrp	x0, 0 <goacc_tls_data>
 7f0:	ldr	x0, [x0]
 7f4:	mrs	x1, tpidr_el0
 7f8:	ldr	x0, [x1, x0]
 7fc:	ldr	x25, [x0, #8]
 800:	ldr	w0, [x25, #8]
 804:	orn	w19, w0, w19
 808:	tbnz	w19, #0, 964 <GOACC_enter_exit_data+0x1d8>
 80c:	cbz	w24, 840 <GOACC_enter_exit_data+0xb4>
 810:	add	x0, sp, #0x110
 814:	stp	x0, x0, [sp, #96]
 818:	add	x0, sp, #0x100
 81c:	str	x0, [sp, #112]
 820:	mov	w0, #0xfffffff8            	// #-8
 824:	str	w0, [sp, #120]
 828:	mov	w0, #0xffffff80            	// #-128
 82c:	add	x2, sp, #0x60
 830:	mov	w1, w24
 834:	str	w0, [sp, #124]
 838:	mov	w0, w26
 83c:	bl	0 <goacc_wait>
 840:	cbz	x23, 878 <GOACC_enter_exit_data+0xec>
 844:	ldrb	w0, [x22]
 848:	cmp	w0, #0x7
 84c:	cset	w24, eq  // eq = none
 850:	cmp	w0, #0x82
 854:	csinc	w24, w24, wzr, ne  // ne = any
 858:	ldr	x1, [x25, #248]
 85c:	mov	w0, w26
 860:	blr	x1
 864:	mov	x0, #0x0                   	// #0
 868:	cmp	x0, x23
 86c:	b.ne	880 <GOACC_enter_exit_data+0xf4>  // b.any
 870:	mov	x19, #0x0                   	// #0
 874:	b	a18 <GOACC_enter_exit_data+0x28c>
 878:	mov	w24, #0x0                   	// #0
 87c:	b	858 <GOACC_enter_exit_data+0xcc>
 880:	ldrh	w1, [x22, x0, lsl #1]
 884:	and	w1, w1, #0xff
 888:	sub	w2, w1, #0x4
 88c:	and	w2, w2, #0xff
 890:	cmp	w2, #0x1
 894:	b.hi	8a0 <GOACC_enter_exit_data+0x114>  // b.pmore
 898:	add	x0, x0, #0x1
 89c:	b	868 <GOACC_enter_exit_data+0xdc>
 8a0:	cmp	w1, #0x6
 8a4:	b.eq	8d8 <GOACC_enter_exit_data+0x14c>  // b.none
 8a8:	tst	w1, #0x7e
 8ac:	b.eq	8d8 <GOACC_enter_exit_data+0x14c>  // b.none
 8b0:	and	w0, w1, #0xffffffef
 8b4:	cmp	w0, #0x7
 8b8:	b.eq	870 <GOACC_enter_exit_data+0xe4>  // b.none
 8bc:	and	w0, w1, #0x7f
 8c0:	mov	x19, #0x0                   	// #0
 8c4:	cmp	w0, #0x2
 8c8:	b.eq	a18 <GOACC_enter_exit_data+0x28c>  // b.none
 8cc:	adrp	x0, 0 <goacc_wait>
 8d0:	add	x0, x0, #0x0
 8d4:	bl	0 <gomp_fatal>
 8d8:	mov	x19, #0x0                   	// #0
 8dc:	add	w0, w19, #0x1
 8e0:	lsl	x2, x19, #1
 8e4:	add	x3, x22, x19, lsl #1
 8e8:	cmp	x23, w0, sxtw
 8ec:	lsl	x0, x19, #3
 8f0:	b.ls	90c <GOACC_enter_exit_data+0x180>  // b.plast
 8f4:	add	x1, x22, w19, sxtw #1
 8f8:	ldrb	w1, [x1, #2]
 8fc:	cmp	w1, #0x5
 900:	b.eq	980 <GOACC_enter_exit_data+0x1f4>  // b.none
 904:	cmp	w1, #0x4
 908:	b.eq	9a0 <GOACC_enter_exit_data+0x214>  // b.none
 90c:	ldrb	w1, [x22, x2]
 910:	cmp	w1, #0x80
 914:	b.eq	940 <GOACC_enter_exit_data+0x1b4>  // b.none
 918:	b.hi	938 <GOACC_enter_exit_data+0x1ac>  // b.pmore
 91c:	cbz	w1, 940 <GOACC_enter_exit_data+0x1b4>
 920:	cmp	w1, #0x1
 924:	b.ne	8cc <GOACC_enter_exit_data+0x140>  // b.any
 928:	ldr	x1, [x21, x0]
 92c:	ldr	x0, [x20, x0]
 930:	bl	0 <acc_copyin>
 934:	b	94c <GOACC_enter_exit_data+0x1c0>
 938:	cmp	w1, #0x81
 93c:	b	924 <GOACC_enter_exit_data+0x198>
 940:	ldr	x1, [x21, x0]
 944:	ldr	x0, [x20, x0]
 948:	bl	0 <acc_create>
 94c:	add	x19, x19, #0x1
 950:	cmp	x23, x19
 954:	b.hi	8dc <GOACC_enter_exit_data+0x150>  // b.pmore
 958:	ldr	x1, [x25, #248]
 95c:	mov	w0, #0xfffffffe            	// #-2
 960:	blr	x1
 964:	ldp	x19, x20, [sp, #16]
 968:	ldp	x21, x22, [sp, #32]
 96c:	ldp	x23, x24, [sp, #48]
 970:	ldp	x25, x26, [sp, #64]
 974:	ldp	x27, x28, [sp, #80]
 978:	ldp	x29, x30, [sp], #272
 97c:	ret
 980:	mov	w24, #0x3                   	// #3
 984:	add	x2, x21, x0
 988:	add	x1, x20, x0
 98c:	sxtw	x0, w24
 990:	sub	w24, w24, #0x1
 994:	bl	0 <gomp_acc_insert_pointer>
 998:	add	x19, x19, w24, sxtw
 99c:	b	94c <GOACC_enter_exit_data+0x1c0>
 9a0:	mov	w24, #0x2                   	// #2
 9a4:	b	984 <GOACC_enter_exit_data+0x1f8>
 9a8:	ldrh	w0, [x22, x19, lsl #1]
 9ac:	lsl	x27, x19, #3
 9b0:	and	w1, w0, #0xff
 9b4:	add	w0, w19, #0x1
 9b8:	cmp	x23, w0, sxtw
 9bc:	b.ls	9d8 <GOACC_enter_exit_data+0x24c>  // b.plast
 9c0:	add	x0, x22, w19, sxtw #1
 9c4:	ldrb	w0, [x0, #2]
 9c8:	cmp	w0, #0x5
 9cc:	b.eq	a50 <GOACC_enter_exit_data+0x2c4>  // b.none
 9d0:	cmp	w0, #0x4
 9d4:	b.eq	a84 <GOACC_enter_exit_data+0x2f8>  // b.none
 9d8:	cmp	w1, #0x17
 9dc:	b.eq	9f4 <GOACC_enter_exit_data+0x268>  // b.none
 9e0:	b.hi	a24 <GOACC_enter_exit_data+0x298>  // b.pmore
 9e4:	cmp	w1, #0x2
 9e8:	b.eq	a2c <GOACC_enter_exit_data+0x2a0>  // b.none
 9ec:	cmp	w1, #0x7
 9f0:	b.ne	8cc <GOACC_enter_exit_data+0x140>  // b.any
 9f4:	ldr	x1, [x21, x27]
 9f8:	ldr	x0, [x20, x27]
 9fc:	bl	0 <acc_is_present>
 a00:	cbz	w0, a14 <GOACC_enter_exit_data+0x288>
 a04:	ldr	x0, [x20, x27]
 a08:	ldr	x1, [x21, x27]
 a0c:	cbz	w24, a40 <GOACC_enter_exit_data+0x2b4>
 a10:	bl	0 <acc_delete_finalize>
 a14:	add	x19, x19, #0x1
 a18:	cmp	x19, x23
 a1c:	b.cc	9a8 <GOACC_enter_exit_data+0x21c>  // b.lo, b.ul, b.last
 a20:	b	958 <GOACC_enter_exit_data+0x1cc>
 a24:	cmp	w1, #0x82
 a28:	b.ne	8cc <GOACC_enter_exit_data+0x140>  // b.any
 a2c:	ldr	x0, [x20, x27]
 a30:	ldr	x1, [x21, x27]
 a34:	cbz	w24, a48 <GOACC_enter_exit_data+0x2bc>
 a38:	bl	0 <acc_copyout_finalize>
 a3c:	b	a14 <GOACC_enter_exit_data+0x288>
 a40:	bl	0 <acc_delete>
 a44:	b	a14 <GOACC_enter_exit_data+0x288>
 a48:	bl	0 <acc_copyout>
 a4c:	b	a14 <GOACC_enter_exit_data+0x288>
 a50:	mov	w28, #0x3                   	// #3
 a54:	and	w0, w1, #0x7f
 a58:	mov	w5, w28
 a5c:	cmp	w0, #0x2
 a60:	sub	w28, w28, #0x1
 a64:	ldr	x1, [x21, x27]
 a68:	mov	w4, w24
 a6c:	ldr	x0, [x20, x27]
 a70:	mov	w3, w26
 a74:	cset	w2, eq  // eq = none
 a78:	add	x19, x19, w28, sxtw
 a7c:	bl	0 <gomp_acc_remove_pointer>
 a80:	b	a14 <GOACC_enter_exit_data+0x288>
 a84:	mov	w28, #0x2                   	// #2
 a88:	b	a54 <GOACC_enter_exit_data+0x2c8>

0000000000000a8c <GOACC_update>:
 a8c:	stp	x29, x30, [sp, #-256]!
 a90:	mov	x29, sp
 a94:	stp	x19, x20, [sp, #16]
 a98:	mov	w20, w0
 a9c:	mov	x19, x2
 aa0:	stp	x21, x22, [sp, #32]
 aa4:	mov	x21, x3
 aa8:	stp	x23, x24, [sp, #48]
 aac:	mov	x23, x1
 ab0:	mov	x24, x4
 ab4:	stp	x25, x26, [sp, #64]
 ab8:	mov	w25, w5
 abc:	mov	w26, w6
 ac0:	str	q0, [sp, #112]
 ac4:	str	q1, [sp, #128]
 ac8:	str	q2, [sp, #144]
 acc:	str	q3, [sp, #160]
 ad0:	str	q4, [sp, #176]
 ad4:	str	q5, [sp, #192]
 ad8:	str	q6, [sp, #208]
 adc:	str	q7, [sp, #224]
 ae0:	str	x7, [sp, #248]
 ae4:	bl	0 <goacc_lazy_initialize>
 ae8:	adrp	x0, 0 <goacc_tls_data>
 aec:	ldr	x0, [x0]
 af0:	mrs	x1, tpidr_el0
 af4:	ldr	x0, [x1, x0]
 af8:	ldr	x22, [x0, #8]
 afc:	ldr	w0, [x22, #8]
 b00:	orn	w20, w0, w20
 b04:	tbnz	w20, #0, b64 <GOACC_update+0xd8>
 b08:	cbz	w26, b3c <GOACC_update+0xb0>
 b0c:	add	x0, sp, #0x100
 b10:	stp	x0, x0, [sp, #80]
 b14:	add	x0, sp, #0xf0
 b18:	str	x0, [sp, #96]
 b1c:	mov	w0, #0xfffffff8            	// #-8
 b20:	str	w0, [sp, #104]
 b24:	mov	w0, #0xffffff80            	// #-128
 b28:	add	x2, sp, #0x50
 b2c:	mov	w1, w26
 b30:	str	w0, [sp, #108]
 b34:	mov	w0, w25
 b38:	bl	0 <goacc_wait>
 b3c:	ldr	x1, [x22, #248]
 b40:	mov	w0, w25
 b44:	mov	x20, #0x0                   	// #0
 b48:	blr	x1
 b4c:	mov	w0, #0x0                   	// #0
 b50:	cmp	x20, x23
 b54:	b.ne	b7c <GOACC_update+0xf0>  // b.any
 b58:	ldr	x1, [x22, #248]
 b5c:	mov	w0, #0xfffffffe            	// #-2
 b60:	blr	x1
 b64:	ldp	x19, x20, [sp, #16]
 b68:	ldp	x21, x22, [sp, #32]
 b6c:	ldp	x23, x24, [sp, #48]
 b70:	ldp	x25, x26, [sp, #64]
 b74:	ldp	x29, x30, [sp], #256
 b78:	ret
 b7c:	ldrh	w1, [x24, x20, lsl #1]
 b80:	and	w1, w1, #0xff
 b84:	cmp	w1, #0x1d
 b88:	b.eq	bec <GOACC_update+0x160>  // b.none
 b8c:	b.hi	bcc <GOACC_update+0x140>  // b.pmore
 b90:	cmp	w1, #0x2
 b94:	b.eq	c48 <GOACC_update+0x1bc>  // b.none
 b98:	b.hi	bb0 <GOACC_update+0x124>  // b.pmore
 b9c:	cmp	w1, #0x1
 ba0:	b.eq	c24 <GOACC_update+0x198>  // b.none
 ba4:	adrp	x0, 0 <goacc_wait>
 ba8:	add	x0, x0, #0x0
 bac:	bl	0 <gomp_fatal>
 bb0:	sub	w2, w1, #0x4
 bb4:	and	w2, w2, #0xff
 bb8:	cmp	w2, #0x1
 bbc:	b.hi	ba4 <GOACC_update+0x118>  // b.pmore
 bc0:	add	x20, x20, #0x1
 bc4:	add	x19, x19, #0x8
 bc8:	b	b50 <GOACC_update+0xc4>
 bcc:	cmp	w1, #0x81
 bd0:	b.eq	c34 <GOACC_update+0x1a8>  // b.none
 bd4:	cmp	w1, #0x82
 bd8:	b.ne	ba4 <GOACC_update+0x118>  // b.any
 bdc:	ldr	x1, [x21, x20, lsl #3]
 be0:	ldr	x0, [x19]
 be4:	bl	0 <acc_update_self>
 be8:	b	bf0 <GOACC_update+0x164>
 bec:	cbnz	w0, bf8 <GOACC_update+0x16c>
 bf0:	mov	w0, #0x0                   	// #0
 bf4:	b	bc0 <GOACC_update+0x134>
 bf8:	ldur	x0, [x19, #-8]
 bfc:	bl	0 <acc_deviceptr>
 c00:	mov	x1, x0
 c04:	ldr	x0, [x19]
 c08:	ldr	x25, [x0]
 c0c:	str	x1, [x0]
 c10:	mov	x1, #0x8                   	// #8
 c14:	bl	0 <acc_update_device>
 c18:	ldr	x0, [x19]
 c1c:	str	x25, [x0]
 c20:	b	bf0 <GOACC_update+0x164>
 c24:	ldr	x1, [x21, x20, lsl #3]
 c28:	ldr	x0, [x19]
 c2c:	bl	0 <acc_is_present>
 c30:	cbz	w0, bf0 <GOACC_update+0x164>
 c34:	ldr	x0, [x19]
 c38:	ldr	x1, [x21, x20, lsl #3]
 c3c:	bl	0 <acc_update_device>
 c40:	mov	w0, #0x1                   	// #1
 c44:	b	bc0 <GOACC_update+0x134>
 c48:	ldr	x1, [x21, x20, lsl #3]
 c4c:	ldr	x0, [x19]
 c50:	bl	0 <acc_is_present>
 c54:	cbz	w0, bf0 <GOACC_update+0x164>
 c58:	b	bdc <GOACC_update+0x150>

0000000000000c5c <GOACC_wait>:
 c5c:	stp	x29, x30, [sp, #-224]!
 c60:	mov	x29, sp
 c64:	str	q0, [sp, #48]
 c68:	str	q1, [sp, #64]
 c6c:	str	q2, [sp, #80]
 c70:	str	q3, [sp, #96]
 c74:	str	q4, [sp, #112]
 c78:	str	q5, [sp, #128]
 c7c:	str	q6, [sp, #144]
 c80:	str	q7, [sp, #160]
 c84:	stp	x2, x3, [sp, #176]
 c88:	stp	x4, x5, [sp, #192]
 c8c:	stp	x6, x7, [sp, #208]
 c90:	cbz	w1, cc4 <GOACC_wait+0x68>
 c94:	add	x2, sp, #0xe0
 c98:	stp	x2, x2, [sp, #16]
 c9c:	add	x2, sp, #0xb0
 ca0:	str	x2, [sp, #32]
 ca4:	mov	w2, #0xffffffd0            	// #-48
 ca8:	str	w2, [sp, #40]
 cac:	mov	w2, #0xffffff80            	// #-128
 cb0:	str	w2, [sp, #44]
 cb4:	add	x2, sp, #0x10
 cb8:	bl	0 <goacc_wait>
 cbc:	ldp	x29, x30, [sp], #224
 cc0:	ret
 cc4:	cmn	w0, #0x2
 cc8:	b.ne	cd4 <GOACC_wait+0x78>  // b.any
 ccc:	bl	0 <acc_wait_all>
 cd0:	b	cbc <GOACC_wait+0x60>
 cd4:	bl	0 <acc_wait_all_async>
 cd8:	b	cbc <GOACC_wait+0x60>

0000000000000cdc <GOACC_get_num_threads>:
 cdc:	mov	w0, #0x1                   	// #1
 ce0:	ret

0000000000000ce4 <GOACC_get_thread_num>:
 ce4:	mov	w0, #0x0                   	// #0
 ce8:	ret

0000000000000cec <GOACC_declare>:
 cec:	stp	x29, x30, [sp, #-112]!
 cf0:	mov	x29, sp
 cf4:	stp	x19, x20, [sp, #16]
 cf8:	mov	x20, x2
 cfc:	mov	x19, #0x0                   	// #0
 d00:	stp	x21, x22, [sp, #32]
 d04:	mov	w22, w0
 d08:	mov	x21, x3
 d0c:	stp	x23, x24, [sp, #48]
 d10:	mov	x24, x1
 d14:	mov	x23, x4
 d18:	stp	x25, x26, [sp, #64]
 d1c:	adrp	x25, 0 <goacc_wait>
 d20:	add	x25, x25, #0x0
 d24:	str	x27, [sp, #80]
 d28:	cmp	x24, x19
 d2c:	b.ne	d4c <GOACC_declare+0x60>  // b.any
 d30:	ldp	x19, x20, [sp, #16]
 d34:	ldp	x21, x22, [sp, #32]
 d38:	ldp	x23, x24, [sp, #48]
 d3c:	ldp	x25, x26, [sp, #64]
 d40:	ldr	x27, [sp, #80]
 d44:	ldp	x29, x30, [sp], #112
 d48:	ret
 d4c:	ldrh	w0, [x23, x19, lsl #1]
 d50:	add	x4, x23, x19, lsl #1
 d54:	and	w5, w0, #0xff
 d58:	sub	w0, w5, #0x4
 d5c:	and	w0, w0, #0xff
 d60:	cmp	w0, #0x1
 d64:	b.ls	de8 <GOACC_declare+0xfc>  // b.plast
 d68:	cmp	w5, #0x8
 d6c:	b.hi	d80 <GOACC_declare+0x94>  // b.pmore
 d70:	ldrb	w0, [x25, w5, uxtw]
 d74:	adr	x1, d80 <GOACC_declare+0x94>
 d78:	add	x0, x1, w0, sxtb #2
 d7c:	br	x0
 d80:	cmp	w5, #0x17
 d84:	b.eq	d98 <GOACC_declare+0xac>  // b.none
 d88:	sub	w5, w5, #0x80
 d8c:	and	w5, w5, #0xff
 d90:	cmp	w5, #0x2
 d94:	b.hi	e1c <GOACC_declare+0x130>  // b.pmore
 d98:	add	x3, x21, x19, lsl #3
 d9c:	add	x2, x20, x19, lsl #3
 da0:	mov	w6, #0x0                   	// #0
 da4:	mov	w5, #0xfffffffe            	// #-2
 da8:	b	ddc <GOACC_declare+0xf0>
 dac:	ldr	x1, [x21, x19, lsl #3]
 db0:	str	x4, [sp, #104]
 db4:	ldr	x0, [x20, x19, lsl #3]
 db8:	add	x26, x20, x19, lsl #3
 dbc:	add	x27, x21, x19, lsl #3
 dc0:	bl	0 <acc_is_present>
 dc4:	ldr	x4, [sp, #104]
 dc8:	cbnz	w0, de8 <GOACC_declare+0xfc>
 dcc:	mov	x3, x27
 dd0:	mov	x2, x26
 dd4:	mov	w6, #0x0                   	// #0
 dd8:	mov	w5, #0xfffffffe            	// #-2
 ddc:	mov	w0, w22
 de0:	mov	x1, #0x1                   	// #1
 de4:	bl	78c <GOACC_enter_exit_data>
 de8:	add	x19, x19, #0x1
 dec:	b	d28 <GOACC_declare+0x3c>
 df0:	ldr	x1, [x21, x19, lsl #3]
 df4:	add	x26, x20, x19, lsl #3
 df8:	ldr	x0, [x20, x19, lsl #3]
 dfc:	add	x27, x21, x19, lsl #3
 e00:	bl	0 <acc_is_present>
 e04:	cbnz	w0, de8 <GOACC_declare+0xfc>
 e08:	ldr	x1, [x26]
 e0c:	adrp	x0, 0 <goacc_wait>
 e10:	ldr	x2, [x27]
 e14:	add	x0, x0, #0x0
 e18:	bl	0 <gomp_fatal>
 e1c:	adrp	x3, 0 <goacc_wait>
 e20:	add	x3, x3, #0x0
 e24:	adrp	x1, 0 <goacc_wait>
 e28:	adrp	x0, 0 <goacc_wait>
 e2c:	add	x3, x3, #0x35
 e30:	add	x1, x1, #0x0
 e34:	add	x0, x0, #0x0
 e38:	mov	w2, #0x2cc                 	// #716
 e3c:	bl	0 <__assert_fail>

oacc-host.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <host_get_name>:
   0:	adrp	x0, 0 <host_get_name>
   4:	ldr	x0, [x0]
   8:	ret

000000000000000c <host_get_caps>:
   c:	adrp	x0, 0 <host_get_name>
  10:	ldr	w0, [x0]
  14:	ret

0000000000000018 <host_get_type>:
  18:	adrp	x0, 0 <host_get_name>
  1c:	ldr	w0, [x0]
  20:	ret

0000000000000024 <host_get_num_devices>:
  24:	mov	w0, #0x1                   	// #1
  28:	ret

000000000000002c <host_init_device>:
  2c:	mov	w0, #0x1                   	// #1
  30:	ret

0000000000000034 <host_version>:
  34:	mov	w0, #0x1                   	// #1
  38:	ret

000000000000003c <host_load_image>:
  3c:	mov	w0, #0x0                   	// #0
  40:	ret

0000000000000044 <host_unload_image>:
  44:	mov	w0, #0x1                   	// #1
  48:	ret

000000000000004c <host_dev2host>:
  4c:	mov	w0, #0x1                   	// #1
  50:	ret

0000000000000054 <host_run>:
  54:	mov	x16, x1
  58:	mov	x0, x2
  5c:	br	x16

0000000000000060 <host_openacc_exec>:
  60:	mov	x16, x0
  64:	mov	x0, x2
  68:	br	x16

000000000000006c <host_openacc_register_async_cleanup>:
  6c:	ret

0000000000000070 <host_openacc_async_test>:
  70:	mov	w0, #0x1                   	// #1
  74:	ret

0000000000000078 <host_openacc_async_wait>:
  78:	ret

000000000000007c <host_openacc_async_wait_async>:
  7c:	ret

0000000000000080 <host_openacc_async_wait_all>:
  80:	ret

0000000000000084 <host_openacc_create_thread_data>:
  84:	mov	x0, #0x0                   	// #0
  88:	ret

000000000000008c <host_openacc_destroy_thread_data>:
  8c:	ret

0000000000000090 <host_free>:
  90:	stp	x29, x30, [sp, #-16]!
  94:	mov	x0, x1
  98:	mov	x29, sp
  9c:	bl	0 <free>
  a0:	mov	w0, #0x1                   	// #1
  a4:	ldp	x29, x30, [sp], #16
  a8:	ret

00000000000000ac <host_alloc>:
  ac:	mov	x0, x1
  b0:	b	0 <gomp_malloc>

00000000000000b4 <host_host2dev>:
  b4:	mov	w0, #0x1                   	// #1
  b8:	ret

00000000000000bc <host_fini_device>:
  bc:	mov	w0, #0x1                   	// #1
  c0:	ret

00000000000000c4 <host_openacc_async_set_async>:
  c4:	ret

00000000000000c8 <host_openacc_async_test_all>:
  c8:	mov	w0, #0x1                   	// #1
  cc:	ret

00000000000000d0 <host_openacc_async_wait_all_async>:
  d0:	ret

00000000000000d4 <goacc_host_init>:
  d4:	adrp	x0, 0 <host_get_name>
  d8:	add	x0, x0, #0x0
  dc:	str	wzr, [x0, #168]
  e0:	b	0 <goacc_register>

oacc-init.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_lock>:
   0:	mov	x2, x0
   4:	mov	w3, #0x1                   	// #1
   8:	ldaxr	w1, [x2]
   c:	cbnz	w1, 18 <gomp_mutex_lock+0x18>
  10:	stxr	w4, w3, [x2]
  14:	cbnz	w4, 8 <gomp_mutex_lock+0x8>
  18:	cmp	w1, #0x0
  1c:	b.eq	24 <gomp_mutex_lock+0x24>  // b.none
  20:	b	0 <gomp_mutex_lock_slow>
  24:	ret

0000000000000028 <gomp_mutex_unlock>:
  28:	mov	x1, x0
  2c:	ldxr	w2, [x1]
  30:	stlxr	w3, wzr, [x1]
  34:	cbnz	w3, 2c <gomp_mutex_unlock+0x4>
  38:	tbz	w2, #31, 40 <gomp_mutex_unlock+0x18>
  3c:	b	0 <gomp_mutex_unlock_slow>
  40:	ret

0000000000000044 <name_of_acc_device_t>:
  44:	mov	w1, w0
  48:	cmp	w0, #0x5
  4c:	b.hi	8c <name_of_acc_device_t+0x48>  // b.pmore
  50:	adrp	x0, 0 <gomp_mutex_lock>
  54:	add	x0, x0, #0x0
  58:	ldrb	w0, [x0, w1, uxtw]
  5c:	adr	x2, 68 <name_of_acc_device_t+0x24>
  60:	add	x0, x2, w0, sxtb #2
  64:	br	x0
  68:	adrp	x0, 0 <gomp_mutex_lock>
  6c:	add	x0, x0, #0x0
  70:	ret
  74:	adrp	x0, 0 <gomp_mutex_lock>
  78:	add	x0, x0, #0x0
  7c:	ret
  80:	adrp	x0, 0 <gomp_mutex_lock>
  84:	add	x0, x0, #0x0
  88:	ret
  8c:	stp	x29, x30, [sp, #-16]!
  90:	adrp	x0, 0 <gomp_mutex_lock>
  94:	add	x0, x0, #0x0
  98:	mov	x29, sp
  9c:	bl	0 <gomp_fatal>
  a0:	adrp	x0, 0 <gomp_mutex_lock>
  a4:	add	x0, x0, #0x0
  a8:	ret
  ac:	adrp	x0, 0 <gomp_mutex_lock>
  b0:	add	x0, x0, #0x0
  b4:	ret

00000000000000b8 <acc_dev_num_out_of_range>:
  b8:	stp	x29, x30, [sp, #-16]!
  bc:	mov	x29, sp
  c0:	cbnz	w2, d8 <acc_dev_num_out_of_range+0x20>
  c4:	bl	44 <name_of_acc_device_t>
  c8:	mov	x1, x0
  cc:	adrp	x0, 0 <gomp_mutex_lock>
  d0:	add	x0, x0, #0x0
  d4:	bl	0 <gomp_fatal>
  d8:	adrp	x0, 0 <gomp_mutex_lock>
  dc:	add	x0, x0, #0x0
  e0:	bl	0 <gomp_fatal>

00000000000000e4 <resolve_device>:
  e4:	stp	x29, x30, [sp, #-96]!
  e8:	cmp	w0, #0x2
  ec:	mov	x29, sp
  f0:	stp	x19, x20, [sp, #16]
  f4:	mov	w19, w0
  f8:	stp	x21, x22, [sp, #32]
  fc:	and	w22, w1, #0xff
 100:	stp	x23, x24, [sp, #48]
 104:	stp	x25, x26, [sp, #64]
 108:	stp	x27, x28, [sp, #80]
 10c:	b.eq	1d4 <resolve_device+0xf0>  // b.none
 110:	cmp	w0, #0x4
 114:	b.eq	12c <resolve_device+0x48>  // b.none
 118:	cmp	w0, #0x1
 11c:	b.ne	234 <resolve_device+0x150>  // b.any
 120:	adrp	x20, 0 <goacc_device_type>
 124:	ldr	x0, [x20]
 128:	cbnz	x0, 200 <resolve_device+0x11c>
 12c:	adrp	x20, 0 <gomp_mutex_lock>
 130:	add	x20, x20, #0x0
 134:	ldr	x0, [x20, #40]
 138:	cbnz	x0, 21c <resolve_device+0x138>
 13c:	cmp	w19, #0x1
 140:	b.eq	268 <resolve_device+0x184>  // b.none
 144:	cbz	w22, 29c <resolve_device+0x1b8>
 148:	add	x0, x20, #0x30
 14c:	bl	28 <gomp_mutex_unlock>
 150:	adrp	x0, 0 <gomp_mutex_lock>
 154:	add	x0, x0, #0x0
 158:	bl	0 <gomp_fatal>
 15c:	ldr	x25, [x23, x21, lsl #3]
 160:	cbnz	x25, 198 <resolve_device+0xb4>
 164:	add	x21, x21, #0x1
 168:	mov	w19, w21
 16c:	cmp	x21, #0x6
 170:	b.ne	15c <resolve_device+0x78>  // b.any
 174:	cbz	w22, 29c <resolve_device+0x1b8>
 178:	adrp	x0, 0 <gomp_mutex_lock>
 17c:	add	x0, x0, #0x0
 180:	add	x0, x0, #0x30
 184:	bl	28 <gomp_mutex_unlock>
 188:	ldr	x1, [x20]
 18c:	adrp	x0, 0 <gomp_mutex_lock>
 190:	add	x0, x0, #0x0
 194:	bl	0 <gomp_fatal>
 198:	ldr	x26, [x25]
 19c:	mov	x1, x24
 1a0:	ldr	x28, [x20]
 1a4:	mov	x0, x26
 1a8:	bl	0 <strcmp>
 1ac:	cbnz	w0, 1b4 <resolve_device+0xd0>
 1b0:	add	x26, x27, #0x0
 1b4:	mov	x1, x26
 1b8:	mov	x0, x28
 1bc:	bl	0 <strcasecmp>
 1c0:	cbnz	w0, 164 <resolve_device+0x80>
 1c4:	ldr	x0, [x25, #48]
 1c8:	blr	x0
 1cc:	cmp	w0, #0x0
 1d0:	b.le	164 <resolve_device+0x80>
 1d4:	cmp	w19, #0x1
 1d8:	ccmp	w19, #0x4, #0x4, hi  // hi = pmore
 1dc:	b.ne	270 <resolve_device+0x18c>  // b.any
 1e0:	adrp	x3, 0 <gomp_mutex_lock>
 1e4:	adrp	x1, 0 <gomp_mutex_lock>
 1e8:	adrp	x0, 0 <gomp_mutex_lock>
 1ec:	add	x3, x3, #0x0
 1f0:	add	x1, x1, #0x0
 1f4:	add	x0, x0, #0x0
 1f8:	mov	w2, #0xb6                  	// #182
 1fc:	bl	0 <__assert_fail>
 200:	adrp	x23, 0 <gomp_mutex_lock>
 204:	adrp	x24, 0 <gomp_mutex_lock>
 208:	add	x23, x23, #0x0
 20c:	add	x24, x24, #0x0
 210:	mov	x21, #0x2                   	// #2
 214:	adrp	x27, 0 <gomp_mutex_lock>
 218:	b	168 <resolve_device+0x84>
 21c:	ldr	x0, [x0, #48]
 220:	blr	x0
 224:	cmp	w0, #0x0
 228:	b.le	13c <resolve_device+0x58>
 22c:	mov	w19, #0x5                   	// #5
 230:	b	1d4 <resolve_device+0xf0>
 234:	cmp	w0, #0x6
 238:	b.le	1d4 <resolve_device+0xf0>
 23c:	cbz	w22, 29c <resolve_device+0x1b8>
 240:	adrp	x0, 0 <gomp_mutex_lock>
 244:	add	x0, x0, #0x0
 248:	add	x0, x0, #0x30
 24c:	bl	28 <gomp_mutex_unlock>
 250:	mov	w0, w19
 254:	bl	44 <name_of_acc_device_t>
 258:	mov	x1, x0
 25c:	adrp	x0, 0 <gomp_mutex_lock>
 260:	add	x0, x0, #0x0
 264:	bl	0 <gomp_fatal>
 268:	mov	w19, #0x2                   	// #2
 26c:	b	1d4 <resolve_device+0xf0>
 270:	adrp	x0, 0 <gomp_mutex_lock>
 274:	add	x0, x0, #0x0
 278:	ldr	x0, [x0, w19, sxtw #3]
 27c:	cbz	x0, 23c <resolve_device+0x158>
 280:	ldp	x19, x20, [sp, #16]
 284:	ldp	x21, x22, [sp, #32]
 288:	ldp	x23, x24, [sp, #48]
 28c:	ldp	x25, x26, [sp, #64]
 290:	ldp	x27, x28, [sp, #80]
 294:	ldp	x29, x30, [sp], #96
 298:	ret
 29c:	mov	x0, #0x0                   	// #0
 2a0:	b	280 <resolve_device+0x19c>

00000000000002a4 <goacc_destroy_thread>:
 2a4:	stp	x29, x30, [sp, #-32]!
 2a8:	mov	x29, sp
 2ac:	stp	x19, x20, [sp, #16]
 2b0:	adrp	x20, 0 <gomp_mutex_lock>
 2b4:	add	x20, x20, #0x0
 2b8:	mov	x19, x0
 2bc:	add	x0, x20, #0x34
 2c0:	bl	0 <gomp_mutex_lock>
 2c4:	cbz	x19, 358 <goacc_destroy_thread+0xb4>
 2c8:	ldr	x1, [x19, #8]
 2cc:	cbz	x1, 2e4 <goacc_destroy_thread+0x40>
 2d0:	ldr	x0, [x19, #40]
 2d4:	cbz	x0, 2e4 <goacc_destroy_thread+0x40>
 2d8:	ldr	x1, [x1, #264]
 2dc:	blr	x1
 2e0:	str	xzr, [x19, #40]
 2e4:	ldr	x1, [x19, #24]
 2e8:	cbz	x1, 310 <goacc_destroy_thread+0x6c>
 2ec:	adrp	x3, 0 <gomp_mutex_lock>
 2f0:	add	x3, x3, #0x0
 2f4:	adrp	x1, 0 <gomp_mutex_lock>
 2f8:	adrp	x0, 0 <gomp_mutex_lock>
 2fc:	add	x3, x3, #0xf
 300:	add	x1, x1, #0x0
 304:	add	x0, x0, #0x0
 308:	mov	w2, #0x16b                 	// #363
 30c:	bl	0 <__assert_fail>
 310:	ldr	x0, [x20, #56]
 314:	cbnz	x0, 33c <goacc_destroy_thread+0x98>
 318:	adrp	x3, 0 <gomp_mutex_lock>
 31c:	add	x3, x3, #0x0
 320:	adrp	x1, 0 <gomp_mutex_lock>
 324:	adrp	x0, 0 <gomp_mutex_lock>
 328:	add	x3, x3, #0xf
 32c:	add	x1, x1, #0x0
 330:	add	x0, x0, #0x0
 334:	mov	w2, #0x17c                 	// #380
 338:	bl	0 <__assert_fail>
 33c:	cmp	x0, x19
 340:	ldr	x2, [x0, #32]
 344:	b.ne	370 <goacc_destroy_thread+0xcc>  // b.any
 348:	cbnz	x1, 368 <goacc_destroy_thread+0xc4>
 34c:	str	x2, [x20, #56]
 350:	mov	x0, x19
 354:	bl	0 <free>
 358:	add	x0, x20, #0x34
 35c:	ldp	x19, x20, [sp, #16]
 360:	ldp	x29, x30, [sp], #32
 364:	b	28 <gomp_mutex_unlock>
 368:	str	x2, [x1, #32]
 36c:	b	350 <goacc_destroy_thread+0xac>
 370:	mov	x1, x0
 374:	mov	x0, x2
 378:	b	314 <goacc_destroy_thread+0x70>

000000000000037c <goacc_register>:
 37c:	stp	x29, x30, [sp, #-48]!
 380:	mov	x29, sp
 384:	stp	x19, x20, [sp, #16]
 388:	mov	x20, x0
 38c:	ldr	w0, [x0, #12]
 390:	str	x21, [sp, #32]
 394:	cbnz	w0, 42c <goacc_register+0xb0>
 398:	adrp	x19, 0 <gomp_mutex_lock>
 39c:	add	x19, x19, #0x0
 3a0:	add	x21, x19, #0x30
 3a4:	mov	x0, x21
 3a8:	bl	0 <gomp_mutex_lock>
 3ac:	ldr	w1, [x20, #16]
 3b0:	cmp	w1, #0x1
 3b4:	b.ls	3c0 <goacc_register+0x44>  // b.plast
 3b8:	cmp	w1, #0x4
 3bc:	b.ne	3e4 <goacc_register+0x68>  // b.any
 3c0:	adrp	x3, 0 <gomp_mutex_lock>
 3c4:	add	x3, x3, #0x0
 3c8:	adrp	x1, 0 <gomp_mutex_lock>
 3cc:	adrp	x0, 0 <gomp_mutex_lock>
 3d0:	add	x3, x3, #0x24
 3d4:	add	x1, x1, #0x0
 3d8:	add	x0, x0, #0x0
 3dc:	mov	w2, #0x4c                  	// #76
 3e0:	bl	0 <__assert_fail>
 3e4:	mov	w1, w1
 3e8:	ldr	x0, [x19, x1, lsl #3]
 3ec:	cbz	x0, 414 <goacc_register+0x98>
 3f0:	adrp	x3, 0 <gomp_mutex_lock>
 3f4:	add	x3, x3, #0x0
 3f8:	adrp	x1, 0 <gomp_mutex_lock>
 3fc:	adrp	x0, 0 <gomp_mutex_lock>
 400:	add	x3, x3, #0x24
 404:	add	x1, x1, #0x0
 408:	add	x0, x0, #0x0
 40c:	mov	w2, #0x4f                  	// #79
 410:	bl	0 <__assert_fail>
 414:	mov	x0, x21
 418:	str	x20, [x19, x1, lsl #3]
 41c:	ldp	x19, x20, [sp, #16]
 420:	ldr	x21, [sp, #32]
 424:	ldp	x29, x30, [sp], #48
 428:	b	28 <gomp_mutex_unlock>
 42c:	ldp	x19, x20, [sp, #16]
 430:	ldr	x21, [sp, #32]
 434:	ldp	x29, x30, [sp], #48
 438:	ret

000000000000043c <goacc_attach_host_thread_to_device>:
 43c:	stp	x29, x30, [sp, #-64]!
 440:	mov	x29, sp
 444:	stp	x21, x22, [sp, #32]
 448:	mrs	x22, tpidr_el0
 44c:	stp	x19, x20, [sp, #16]
 450:	mov	w20, w0
 454:	add	x0, x22, #0x0, lsl #12
 458:	add	x0, x0, #0x0
 45c:	ldr	x19, [x0]
 460:	str	x23, [sp, #48]
 464:	cbz	x19, 598 <goacc_attach_host_thread_to_device+0x15c>
 468:	ldr	x0, [x19, #8]
 46c:	cbz	x0, 550 <goacc_attach_host_thread_to_device+0x114>
 470:	ldr	w0, [x0, #12]
 474:	cmp	w0, w20
 478:	b.eq	480 <goacc_attach_host_thread_to_device+0x44>  // b.none
 47c:	tbz	w20, #31, 560 <goacc_attach_host_thread_to_device+0x124>
 480:	ldp	x19, x20, [sp, #16]
 484:	ldp	x21, x22, [sp, #32]
 488:	ldr	x23, [sp, #48]
 48c:	ldp	x29, x30, [sp], #64
 490:	ret
 494:	ldr	x0, [x21, #48]
 498:	blr	x0
 49c:	mov	w2, w0
 4a0:	cmp	w20, #0x0
 4a4:	csel	w0, w20, wzr, ge  // ge = tcont
 4a8:	cmp	w0, w2
 4ac:	b.lt	4bc <goacc_attach_host_thread_to_device+0x80>  // b.tstop
 4b0:	ldr	w0, [x21, #16]
 4b4:	mov	w1, w20
 4b8:	bl	b8 <acc_dev_num_out_of_range>
 4bc:	cbnz	x19, 50c <goacc_attach_host_thread_to_device+0xd0>
 4c0:	add	x22, x22, #0x0, lsl #12
 4c4:	add	x22, x22, #0x0
 4c8:	mov	x0, #0x30                  	// #48
 4cc:	bl	0 <gomp_malloc>
 4d0:	mov	x19, x0
 4d4:	mov	x1, x0
 4d8:	str	x0, [x22]
 4dc:	adrp	x22, 0 <gomp_mutex_lock>
 4e0:	add	x22, x22, #0x0
 4e4:	add	x23, x22, #0x34
 4e8:	ldr	w0, [x22, #72]
 4ec:	bl	0 <pthread_setspecific>
 4f0:	mov	x0, x23
 4f4:	bl	0 <gomp_mutex_lock>
 4f8:	ldr	x0, [x22, #56]
 4fc:	str	x0, [x19, #32]
 500:	mov	x0, x23
 504:	str	x19, [x22, #56]
 508:	bl	28 <gomp_mutex_unlock>
 50c:	mov	w0, #0x130                 	// #304
 510:	str	x21, [x19]
 514:	stp	xzr, xzr, [x19, #16]
 518:	smaddl	x21, w20, w0, x21
 51c:	mov	w0, w20
 520:	ldr	x1, [x21, #256]
 524:	str	x21, [x19, #8]
 528:	blr	x1
 52c:	ldr	x23, [sp, #48]
 530:	ldr	x1, [x21, #248]
 534:	ldp	x21, x22, [sp, #32]
 538:	str	x0, [x19, #40]
 53c:	ldp	x19, x20, [sp, #16]
 540:	mov	x16, x1
 544:	ldp	x29, x30, [sp], #64
 548:	mov	w0, #0xfffffffe            	// #-2
 54c:	br	x16
 550:	tbz	w20, #31, 560 <goacc_attach_host_thread_to_device+0x124>
 554:	adrp	x0, 0 <goacc_device_num>
 558:	ldr	w20, [x0]
 55c:	cbz	x19, 568 <goacc_attach_host_thread_to_device+0x12c>
 560:	ldr	x21, [x19]
 564:	cbnz	x21, 494 <goacc_attach_host_thread_to_device+0x58>
 568:	adrp	x0, 0 <gomp_mutex_lock>
 56c:	ldr	x21, [x0]
 570:	cbnz	x21, 494 <goacc_attach_host_thread_to_device+0x58>
 574:	adrp	x3, 0 <gomp_mutex_lock>
 578:	add	x3, x3, #0x0
 57c:	adrp	x1, 0 <gomp_mutex_lock>
 580:	adrp	x0, 0 <gomp_mutex_lock>
 584:	add	x3, x3, #0x33
 588:	add	x1, x1, #0x0
 58c:	add	x0, x0, #0x0
 590:	mov	w2, #0x19a                 	// #410
 594:	bl	0 <__assert_fail>
 598:	tbnz	w20, #31, 554 <goacc_attach_host_thread_to_device+0x118>
 59c:	b	568 <goacc_attach_host_thread_to_device+0x12c>

00000000000005a0 <acc_init>:
 5a0:	stp	x29, x30, [sp, #-64]!
 5a4:	mov	x29, sp
 5a8:	stp	x21, x22, [sp, #32]
 5ac:	adrp	x21, 0 <gomp_mutex_lock>
 5b0:	add	x21, x21, #0x0
 5b4:	mov	w22, w0
 5b8:	stp	x19, x20, [sp, #16]
 5bc:	str	x23, [sp, #48]
 5c0:	bl	0 <gomp_init_targets_once>
 5c4:	add	x23, x21, #0x30
 5c8:	mov	x0, x23
 5cc:	bl	0 <gomp_mutex_lock>
 5d0:	mov	w1, #0x1                   	// #1
 5d4:	mov	w0, w22
 5d8:	bl	e4 <resolve_device>
 5dc:	mov	x20, x0
 5e0:	ldr	x0, [x0, #48]
 5e4:	blr	x0
 5e8:	mov	w2, w0
 5ec:	cmp	w0, #0x0
 5f0:	adrp	x0, 0 <goacc_device_num>
 5f4:	b.le	604 <acc_init+0x64>
 5f8:	ldr	w19, [x0]
 5fc:	cmp	w2, w19
 600:	b.gt	610 <acc_init+0x70>
 604:	ldr	w1, [x0]
 608:	mov	w0, w22
 60c:	bl	b8 <acc_dev_num_out_of_range>
 610:	mov	w0, #0x130                 	// #304
 614:	smaddl	x19, w19, w0, x20
 618:	add	x22, x19, #0xa8
 61c:	mov	x0, x22
 620:	bl	0 <gomp_mutex_lock>
 624:	ldr	w0, [x19, #172]
 628:	cmp	w0, #0x1
 62c:	b.ne	644 <acc_init+0xa4>  // b.any
 630:	mov	x0, x22
 634:	bl	28 <gomp_mutex_unlock>
 638:	adrp	x0, 0 <gomp_mutex_lock>
 63c:	add	x0, x0, #0x0
 640:	bl	0 <gomp_fatal>
 644:	mov	x0, x19
 648:	bl	0 <gomp_init_device>
 64c:	mov	x0, x22
 650:	bl	28 <gomp_mutex_unlock>
 654:	mov	x0, x23
 658:	str	x20, [x21, #64]
 65c:	bl	28 <gomp_mutex_unlock>
 660:	ldp	x19, x20, [sp, #16]
 664:	mov	w0, #0xffffffff            	// #-1
 668:	ldp	x21, x22, [sp, #32]
 66c:	ldr	x23, [sp, #48]
 670:	ldp	x29, x30, [sp], #64
 674:	b	43c <goacc_attach_host_thread_to_device>

0000000000000678 <acc_shutdown>:
 678:	stp	x29, x30, [sp, #-80]!
 67c:	mov	x29, sp
 680:	stp	x19, x20, [sp, #16]
 684:	mov	w19, w0
 688:	adrp	x20, 0 <gomp_mutex_lock>
 68c:	add	x20, x20, #0x0
 690:	stp	x21, x22, [sp, #32]
 694:	stp	x23, x24, [sp, #48]
 698:	mov	w24, #0x0                   	// #0
 69c:	str	x25, [sp, #64]
 6a0:	bl	0 <gomp_init_targets_once>
 6a4:	add	x0, x20, #0x30
 6a8:	bl	0 <gomp_mutex_lock>
 6ac:	mov	w0, w19
 6b0:	mov	w1, #0x1                   	// #1
 6b4:	bl	e4 <resolve_device>
 6b8:	add	x21, x0, #0xa8
 6bc:	mov	x22, x0
 6c0:	mov	x19, x21
 6c4:	ldr	x0, [x0, #48]
 6c8:	blr	x0
 6cc:	mov	w23, w0
 6d0:	cmp	w23, w24
 6d4:	b.gt	714 <acc_shutdown+0x9c>
 6d8:	add	x0, x20, #0x34
 6dc:	bl	0 <gomp_mutex_lock>
 6e0:	ldr	x19, [x20, #56]
 6e4:	cbnz	x19, 738 <acc_shutdown+0xc0>
 6e8:	mov	w19, #0x1                   	// #1
 6ec:	mov	w24, #0x0                   	// #0
 6f0:	mov	w22, #0x0                   	// #0
 6f4:	add	x0, x20, #0x34
 6f8:	bl	28 <gomp_mutex_unlock>
 6fc:	cmp	w23, w22
 700:	b.gt	7b8 <acc_shutdown+0x140>
 704:	cbnz	w19, 7f8 <acc_shutdown+0x180>
 708:	adrp	x0, 0 <gomp_mutex_lock>
 70c:	add	x0, x0, #0x0
 710:	bl	0 <gomp_fatal>
 714:	mov	x0, x19
 718:	bl	0 <gomp_mutex_lock>
 71c:	sub	x0, x19, #0xa8
 720:	bl	0 <gomp_unload_device>
 724:	mov	x0, x19
 728:	add	w24, w24, #0x1
 72c:	add	x19, x19, #0x130
 730:	bl	28 <gomp_mutex_unlock>
 734:	b	6d0 <acc_shutdown+0x58>
 738:	ldr	x0, [x19, #40]
 73c:	cbz	x0, 748 <acc_shutdown+0xd0>
 740:	ldr	x1, [x22, #264]
 744:	blr	x1
 748:	ldr	x0, [x19, #24]
 74c:	str	xzr, [x19, #40]
 750:	cbz	x0, 768 <acc_shutdown+0xf0>
 754:	add	x0, x20, #0x34
 758:	bl	28 <gomp_mutex_unlock>
 75c:	adrp	x0, 0 <gomp_mutex_lock>
 760:	add	x0, x0, #0x0
 764:	bl	0 <gomp_fatal>
 768:	ldr	x0, [x19, #16]
 76c:	cbz	x0, 784 <acc_shutdown+0x10c>
 770:	add	x0, x20, #0x34
 774:	bl	28 <gomp_mutex_unlock>
 778:	adrp	x0, 0 <gomp_mutex_lock>
 77c:	add	x0, x0, #0x0
 780:	bl	0 <gomp_fatal>
 784:	ldr	x0, [x19, #8]
 788:	cbz	x0, 7b0 <acc_shutdown+0x138>
 78c:	add	x0, x0, #0xa8
 790:	bl	0 <gomp_mutex_lock>
 794:	ldr	x0, [x19, #8]
 798:	add	x0, x0, #0xa0
 79c:	bl	0 <gomp_free_memmap>
 7a0:	ldr	x0, [x19, #8]
 7a4:	add	x0, x0, #0xa8
 7a8:	bl	28 <gomp_mutex_unlock>
 7ac:	stp	xzr, xzr, [x19]
 7b0:	ldr	x19, [x19, #32]
 7b4:	b	6e4 <acc_shutdown+0x6c>
 7b8:	mov	x0, x21
 7bc:	bl	0 <gomp_mutex_lock>
 7c0:	ldr	w25, [x21, #4]
 7c4:	cmp	w25, #0x1
 7c8:	b.ne	7e4 <acc_shutdown+0x16c>  // b.any
 7cc:	ldur	w0, [x21, #-156]
 7d0:	mov	w24, w25
 7d4:	ldur	x1, [x21, #-104]
 7d8:	blr	x1
 7dc:	and	w19, w19, w0
 7e0:	str	wzr, [x21, #4]
 7e4:	mov	x0, x21
 7e8:	add	w22, w22, #0x1
 7ec:	add	x21, x21, #0x130
 7f0:	bl	28 <gomp_mutex_unlock>
 7f4:	b	6fc <acc_shutdown+0x84>
 7f8:	cbnz	w24, 808 <acc_shutdown+0x190>
 7fc:	adrp	x0, 0 <gomp_mutex_lock>
 800:	add	x0, x0, #0x0
 804:	bl	0 <gomp_fatal>
 808:	add	x0, x20, #0x30
 80c:	ldp	x19, x20, [sp, #16]
 810:	ldp	x21, x22, [sp, #32]
 814:	ldp	x23, x24, [sp, #48]
 818:	ldr	x25, [sp, #64]
 81c:	ldp	x29, x30, [sp], #80
 820:	b	28 <gomp_mutex_unlock>

0000000000000824 <acc_get_num_devices>:
 824:	cbnz	w0, 840 <acc_get_num_devices+0x1c>
 828:	mov	w0, #0x0                   	// #0
 82c:	ret
 830:	mov	w0, #0x0                   	// #0
 834:	ldp	x19, x20, [sp, #16]
 838:	ldp	x29, x30, [sp], #32
 83c:	ret
 840:	stp	x29, x30, [sp, #-32]!
 844:	mov	x29, sp
 848:	stp	x19, x20, [sp, #16]
 84c:	adrp	x19, 0 <gomp_mutex_lock>
 850:	add	x19, x19, #0x0
 854:	mov	w20, w0
 858:	add	x19, x19, #0x30
 85c:	bl	0 <gomp_init_targets_once>
 860:	mov	x0, x19
 864:	bl	0 <gomp_mutex_lock>
 868:	mov	w1, #0x0                   	// #0
 86c:	mov	w0, w20
 870:	bl	e4 <resolve_device>
 874:	mov	x20, x0
 878:	mov	x0, x19
 87c:	bl	28 <gomp_mutex_unlock>
 880:	cbz	x20, 830 <acc_get_num_devices+0xc>
 884:	ldr	x0, [x20, #48]
 888:	blr	x0
 88c:	cmp	w0, #0x0
 890:	csel	w0, w0, wzr, ge  // ge = tcont
 894:	b	834 <acc_get_num_devices+0x10>

0000000000000898 <acc_set_device_type>:
 898:	stp	x29, x30, [sp, #-64]!
 89c:	mov	x29, sp
 8a0:	stp	x19, x20, [sp, #16]
 8a4:	mov	w20, w0
 8a8:	mrs	x0, tpidr_el0
 8ac:	add	x0, x0, #0x0, lsl #12
 8b0:	add	x0, x0, #0x0
 8b4:	stp	x21, x22, [sp, #32]
 8b8:	adrp	x21, 0 <gomp_mutex_lock>
 8bc:	add	x21, x21, #0x0
 8c0:	ldr	x19, [x0]
 8c4:	str	x23, [sp, #48]
 8c8:	bl	0 <gomp_init_targets_once>
 8cc:	add	x0, x21, #0x30
 8d0:	bl	0 <gomp_mutex_lock>
 8d4:	mov	w0, w20
 8d8:	mov	w1, #0x1                   	// #1
 8dc:	bl	e4 <resolve_device>
 8e0:	mov	x20, x0
 8e4:	str	x0, [x21, #64]
 8e8:	adrp	x0, 0 <goacc_device_num>
 8ec:	ldr	w22, [x0]
 8f0:	mov	w0, #0x130                 	// #304
 8f4:	smaddl	x22, w22, w0, x20
 8f8:	add	x23, x22, #0xa8
 8fc:	mov	x0, x23
 900:	bl	0 <gomp_mutex_lock>
 904:	ldr	w0, [x22, #172]
 908:	cbnz	w0, 914 <acc_set_device_type+0x7c>
 90c:	mov	x0, x22
 910:	bl	0 <gomp_init_device>
 914:	mov	x0, x23
 918:	bl	28 <gomp_mutex_unlock>
 91c:	add	x0, x21, #0x30
 920:	bl	28 <gomp_mutex_unlock>
 924:	cbz	x19, 94c <acc_set_device_type+0xb4>
 928:	ldr	x0, [x19]
 92c:	cmp	x0, x20
 930:	b.eq	94c <acc_set_device_type+0xb4>  // b.none
 934:	ldr	x0, [x19, #24]
 938:	stp	xzr, xzr, [x19]
 93c:	cbz	x0, 94c <acc_set_device_type+0xb4>
 940:	adrp	x0, 0 <gomp_mutex_lock>
 944:	add	x0, x0, #0x0
 948:	bl	0 <gomp_fatal>
 94c:	ldp	x19, x20, [sp, #16]
 950:	mov	w0, #0xffffffff            	// #-1
 954:	ldp	x21, x22, [sp, #32]
 958:	ldr	x23, [sp, #48]
 95c:	ldp	x29, x30, [sp], #64
 960:	b	43c <goacc_attach_host_thread_to_device>

0000000000000964 <acc_get_device_type>:
 964:	mrs	x0, tpidr_el0
 968:	stp	x29, x30, [sp, #-32]!
 96c:	add	x0, x0, #0x0, lsl #12
 970:	add	x0, x0, #0x0
 974:	mov	x29, sp
 978:	stp	x19, x20, [sp, #16]
 97c:	ldr	x0, [x0]
 980:	cbz	x0, 9c0 <acc_get_device_type+0x5c>
 984:	ldr	x0, [x0]
 988:	cbz	x0, 9c0 <acc_get_device_type+0x5c>
 98c:	ldr	w0, [x0, #16]
 990:	cmp	w0, #0x1
 994:	ccmp	w0, #0x4, #0x4, ne  // ne = any
 998:	b.ne	9f8 <acc_get_device_type+0x94>  // b.any
 99c:	adrp	x3, 0 <gomp_mutex_lock>
 9a0:	add	x3, x3, #0x0
 9a4:	adrp	x1, 0 <gomp_mutex_lock>
 9a8:	adrp	x0, 0 <gomp_mutex_lock>
 9ac:	add	x3, x3, #0x56
 9b0:	add	x1, x1, #0x0
 9b4:	add	x0, x0, #0x0
 9b8:	mov	w2, #0x226                 	// #550
 9bc:	bl	0 <__assert_fail>
 9c0:	adrp	x19, 0 <gomp_mutex_lock>
 9c4:	add	x19, x19, #0x0
 9c8:	bl	0 <gomp_init_targets_once>
 9cc:	add	x19, x19, #0x30
 9d0:	mov	x0, x19
 9d4:	bl	0 <gomp_mutex_lock>
 9d8:	mov	w1, #0x1                   	// #1
 9dc:	mov	w0, #0x1                   	// #1
 9e0:	bl	e4 <resolve_device>
 9e4:	mov	x20, x0
 9e8:	mov	x0, x19
 9ec:	bl	28 <gomp_mutex_unlock>
 9f0:	ldr	w0, [x20, #16]
 9f4:	b	990 <acc_get_device_type+0x2c>
 9f8:	ldp	x19, x20, [sp, #16]
 9fc:	ldp	x29, x30, [sp], #32
 a00:	ret

0000000000000a04 <acc_get_device_num>:
 a04:	stp	x29, x30, [sp, #-48]!
 a08:	mov	x29, sp
 a0c:	stp	x19, x20, [sp, #16]
 a10:	mov	w20, w0
 a14:	mrs	x0, tpidr_el0
 a18:	add	x0, x0, #0x0, lsl #12
 a1c:	add	x0, x0, #0x0
 a20:	str	x21, [sp, #32]
 a24:	cmp	w20, #0x5
 a28:	ldr	x21, [x0]
 a2c:	b.le	a40 <acc_get_device_num+0x3c>
 a30:	adrp	x0, 0 <gomp_mutex_lock>
 a34:	mov	w1, w20
 a38:	add	x0, x0, #0x0
 a3c:	bl	0 <gomp_fatal>
 a40:	adrp	x19, 0 <gomp_mutex_lock>
 a44:	add	x19, x19, #0x0
 a48:	bl	0 <gomp_init_targets_once>
 a4c:	add	x19, x19, #0x30
 a50:	mov	x0, x19
 a54:	bl	0 <gomp_mutex_lock>
 a58:	mov	w1, #0x1                   	// #1
 a5c:	mov	w0, w20
 a60:	bl	e4 <resolve_device>
 a64:	mov	x20, x0
 a68:	mov	x0, x19
 a6c:	bl	28 <gomp_mutex_unlock>
 a70:	cbz	x21, a9c <acc_get_device_num+0x98>
 a74:	ldr	x0, [x21]
 a78:	cmp	x0, x20
 a7c:	b.ne	a9c <acc_get_device_num+0x98>  // b.any
 a80:	ldr	x0, [x21, #8]
 a84:	cbz	x0, a9c <acc_get_device_num+0x98>
 a88:	ldr	w0, [x0, #12]
 a8c:	ldp	x19, x20, [sp, #16]
 a90:	ldr	x21, [sp, #32]
 a94:	ldp	x29, x30, [sp], #48
 a98:	ret
 a9c:	adrp	x0, 0 <goacc_device_num>
 aa0:	ldr	w0, [x0]
 aa4:	b	a8c <acc_get_device_num+0x88>

0000000000000aa8 <acc_set_device_num>:
 aa8:	stp	x29, x30, [sp, #-64]!
 aac:	mov	x29, sp
 ab0:	stp	x19, x20, [sp, #16]
 ab4:	mov	w19, w0
 ab8:	stp	x21, x22, [sp, #32]
 abc:	mov	w21, w1
 ac0:	str	x23, [sp, #48]
 ac4:	adrp	x23, 0 <goacc_device_num>
 ac8:	bl	0 <gomp_init_targets_once>
 acc:	tbz	w19, #31, ad4 <acc_set_device_num+0x2c>
 ad0:	ldr	w19, [x23]
 ad4:	cbnz	w21, af8 <acc_set_device_num+0x50>
 ad8:	mov	w0, w19
 adc:	bl	43c <goacc_attach_host_thread_to_device>
 ae0:	str	w19, [x23]
 ae4:	ldp	x19, x20, [sp, #16]
 ae8:	ldp	x21, x22, [sp, #32]
 aec:	ldr	x23, [sp, #48]
 af0:	ldp	x29, x30, [sp], #64
 af4:	ret
 af8:	adrp	x20, 0 <gomp_mutex_lock>
 afc:	add	x20, x20, #0x0
 b00:	add	x0, x20, #0x30
 b04:	bl	0 <gomp_mutex_lock>
 b08:	mov	w1, #0x1                   	// #1
 b0c:	mov	w0, w21
 b10:	bl	e4 <resolve_device>
 b14:	mov	x22, x0
 b18:	ldr	x0, [x0, #48]
 b1c:	str	x22, [x20, #64]
 b20:	blr	x0
 b24:	mov	w2, w0
 b28:	cmp	w19, #0x0
 b2c:	csel	w0, w19, wzr, ge  // ge = tcont
 b30:	cmp	w2, w0
 b34:	b.gt	b44 <acc_set_device_num+0x9c>
 b38:	mov	w1, w19
 b3c:	mov	w0, w21
 b40:	bl	b8 <acc_dev_num_out_of_range>
 b44:	mov	w21, #0x130                 	// #304
 b48:	smaddl	x21, w19, w21, x22
 b4c:	add	x22, x21, #0xa8
 b50:	mov	x0, x22
 b54:	bl	0 <gomp_mutex_lock>
 b58:	ldr	w0, [x21, #172]
 b5c:	cbnz	w0, b68 <acc_set_device_num+0xc0>
 b60:	mov	x0, x21
 b64:	bl	0 <gomp_init_device>
 b68:	mov	x0, x22
 b6c:	bl	28 <gomp_mutex_unlock>
 b70:	add	x0, x20, #0x30
 b74:	bl	28 <gomp_mutex_unlock>
 b78:	b	ad8 <acc_set_device_num+0x30>
 b7c:	nop

0000000000000b80 <acc_on_device>:
 b80:	tst	w0, #0xfffffffd
 b84:	cset	w0, eq  // eq = none
 b88:	ret

0000000000000b8c <goacc_runtime_initialize>:
 b8c:	stp	x29, x30, [sp, #-32]!
 b90:	adrp	x1, 0 <gomp_mutex_lock>
 b94:	add	x1, x1, #0x0
 b98:	mov	x29, sp
 b9c:	str	x19, [sp, #16]
 ba0:	adrp	x19, 0 <gomp_mutex_lock>
 ba4:	add	x19, x19, #0x0
 ba8:	add	x0, x19, #0x48
 bac:	str	wzr, [x19, #48]
 bb0:	bl	0 <pthread_key_create>
 bb4:	str	wzr, [x19, #52]
 bb8:	stp	xzr, xzr, [x19, #56]
 bbc:	ldr	x19, [sp, #16]
 bc0:	ldp	x29, x30, [sp], #32
 bc4:	b	0 <goacc_host_init>

0000000000000bc8 <goacc_save_and_set_bind>:
 bc8:	mrs	x1, tpidr_el0
 bcc:	add	x1, x1, #0x0, lsl #12
 bd0:	add	x1, x1, #0x0
 bd4:	ldr	x1, [x1]
 bd8:	ldr	x2, [x1, #16]
 bdc:	cbz	x2, c0c <goacc_save_and_set_bind+0x44>
 be0:	stp	x29, x30, [sp, #-16]!
 be4:	adrp	x3, 0 <gomp_mutex_lock>
 be8:	add	x3, x3, #0x0
 bec:	mov	x29, sp
 bf0:	adrp	x1, 0 <gomp_mutex_lock>
 bf4:	adrp	x0, 0 <gomp_mutex_lock>
 bf8:	add	x3, x3, #0x6a
 bfc:	add	x1, x1, #0x0
 c00:	add	x0, x0, #0x0
 c04:	mov	w2, #0x29b                 	// #667
 c08:	bl	0 <__assert_fail>
 c0c:	ldr	x2, [x1, #8]
 c10:	str	x2, [x1, #16]
 c14:	adrp	x2, 0 <gomp_mutex_lock>
 c18:	add	x2, x2, #0x0
 c1c:	ldr	x0, [x2, w0, sxtw #3]
 c20:	str	x0, [x1, #8]
 c24:	ret

0000000000000c28 <goacc_restore_bind>:
 c28:	mrs	x0, tpidr_el0
 c2c:	add	x0, x0, #0x0, lsl #12
 c30:	add	x0, x0, #0x0
 c34:	ldr	x0, [x0]
 c38:	ldr	x1, [x0, #16]
 c3c:	stp	x1, xzr, [x0, #8]
 c40:	ret

0000000000000c44 <goacc_lazy_initialize>:
 c44:	mrs	x0, tpidr_el0
 c48:	add	x0, x0, #0x0, lsl #12
 c4c:	add	x0, x0, #0x0
 c50:	ldr	x0, [x0]
 c54:	cbz	x0, c60 <goacc_lazy_initialize+0x1c>
 c58:	ldr	x0, [x0, #8]
 c5c:	cbnz	x0, c7c <goacc_lazy_initialize+0x38>
 c60:	adrp	x0, 0 <gomp_mutex_lock>
 c64:	ldr	x0, [x0]
 c68:	cbnz	x0, c74 <goacc_lazy_initialize+0x30>
 c6c:	mov	w0, #0x1                   	// #1
 c70:	b	5a0 <acc_init>
 c74:	mov	w0, #0xffffffff            	// #-1
 c78:	b	43c <goacc_attach_host_thread_to_device>
 c7c:	ret

oacc-mem.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_lock>:
       0:	mov	x2, x0
       4:	mov	w3, #0x1                   	// #1
       8:	ldaxr	w1, [x2]
       c:	cbnz	w1, 18 <gomp_mutex_lock+0x18>
      10:	stxr	w4, w3, [x2]
      14:	cbnz	w4, 8 <gomp_mutex_lock+0x8>
      18:	cmp	w1, #0x0
      1c:	b.eq	24 <gomp_mutex_lock+0x24>  // b.none
      20:	b	0 <gomp_mutex_lock_slow>
      24:	ret

0000000000000028 <gomp_mutex_unlock>:
      28:	mov	x1, x0
      2c:	ldxr	w2, [x1]
      30:	stlxr	w3, wzr, [x1]
      34:	cbnz	w3, 2c <gomp_mutex_unlock+0x4>
      38:	tbz	w2, #31, 40 <gomp_mutex_unlock+0x18>
      3c:	b	0 <gomp_mutex_unlock_slow>
      40:	ret

0000000000000044 <memcpy_tofrom_device>:
      44:	stp	x29, x30, [sp, #-80]!
      48:	mov	x29, sp
      4c:	str	x25, [sp, #64]
      50:	and	w25, w0, #0xff
      54:	adrp	x0, 0 <goacc_tls_data>
      58:	ldr	x0, [x0]
      5c:	stp	x19, x20, [sp, #16]
      60:	mov	x19, x2
      64:	mrs	x2, tpidr_el0
      68:	stp	x23, x24, [sp, #48]
      6c:	ldr	x23, [x2, x0]
      70:	stp	x21, x22, [sp, #32]
      74:	cbz	x23, 80 <memcpy_tofrom_device+0x3c>
      78:	ldr	x0, [x23, #8]
      7c:	cbnz	x0, a0 <memcpy_tofrom_device+0x5c>
      80:	adrp	x3, 0 <gomp_mutex_lock>
      84:	adrp	x1, 0 <gomp_mutex_lock>
      88:	adrp	x0, 0 <gomp_mutex_lock>
      8c:	add	x3, x3, #0x0
      90:	add	x1, x1, #0x0
      94:	add	x0, x0, #0x0
      98:	mov	w2, #0xa4                  	// #164
      9c:	bl	0 <__assert_fail>
      a0:	ldr	w2, [x0, #8]
      a4:	mov	x22, x1
      a8:	mov	x20, x3
      ac:	tbz	w2, #0, e0 <memcpy_tofrom_device+0x9c>
      b0:	mov	x2, x3
      b4:	cbz	w25, d4 <memcpy_tofrom_device+0x90>
      b8:	mov	x0, x19
      bc:	ldp	x19, x20, [sp, #16]
      c0:	ldp	x21, x22, [sp, #32]
      c4:	ldp	x23, x24, [sp, #48]
      c8:	ldr	x25, [sp, #64]
      cc:	ldp	x29, x30, [sp], #80
      d0:	b	0 <memmove>
      d4:	mov	x1, x19
      d8:	mov	x0, x22
      dc:	b	bc <memcpy_tofrom_device+0x78>
      e0:	mov	w21, w4
      e4:	mov	x24, x5
      e8:	cmn	w4, #0x1
      ec:	b.lt	fc <memcpy_tofrom_device+0xb8>  // b.tstop
      f0:	ldr	x1, [x0, #248]
      f4:	mov	w0, w4
      f8:	blr	x1
      fc:	ldr	x1, [x23, #8]
     100:	ldr	w0, [x1, #12]
     104:	cbz	w25, 14c <memcpy_tofrom_device+0x108>
     108:	mov	x3, x20
     10c:	mov	x2, x22
     110:	ldr	x4, [x1, #112]
     114:	mov	x1, x19
     118:	blr	x4
     11c:	and	w19, w0, #0xff
     120:	cmn	w21, #0x1
     124:	b.lt	138 <memcpy_tofrom_device+0xf4>  // b.tstop
     128:	ldr	x0, [x23, #8]
     12c:	ldr	x1, [x0, #248]
     130:	mov	w0, #0xfffffffe            	// #-2
     134:	blr	x1
     138:	cbnz	w19, 160 <memcpy_tofrom_device+0x11c>
     13c:	adrp	x0, 0 <gomp_mutex_lock>
     140:	mov	x1, x24
     144:	add	x0, x0, #0x0
     148:	bl	0 <gomp_fatal>
     14c:	mov	x3, x20
     150:	mov	x2, x19
     154:	ldr	x4, [x1, #120]
     158:	mov	x1, x22
     15c:	b	118 <memcpy_tofrom_device+0xd4>
     160:	ldp	x19, x20, [sp, #16]
     164:	ldp	x21, x22, [sp, #32]
     168:	ldp	x23, x24, [sp, #48]
     16c:	ldr	x25, [sp, #64]
     170:	ldp	x29, x30, [sp], #80
     174:	ret

0000000000000178 <lookup_host>:
     178:	stp	x29, x30, [sp, #-80]!
     17c:	add	x0, x0, #0xa0
     180:	mov	x29, sp
     184:	str	x1, [sp, #24]
     188:	add	x1, x1, x2
     18c:	str	x1, [sp, #32]
     190:	add	x1, sp, #0x18
     194:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     198:	ldp	x29, x30, [sp], #80
     19c:	ret

00000000000001a0 <update_dev_host>:
     1a0:	stp	x29, x30, [sp, #-80]!
     1a4:	mov	x29, sp
     1a8:	stp	x19, x20, [sp, #16]
     1ac:	mov	x20, x1
     1b0:	stp	x21, x22, [sp, #32]
     1b4:	mov	x22, x2
     1b8:	stp	x23, x24, [sp, #48]
     1bc:	mov	w23, w3
     1c0:	str	x25, [sp, #64]
     1c4:	mov	w25, w0
     1c8:	bl	0 <goacc_lazy_initialize>
     1cc:	adrp	x0, 0 <goacc_tls_data>
     1d0:	ldr	x0, [x0]
     1d4:	mrs	x1, tpidr_el0
     1d8:	ldr	x0, [x1, x0]
     1dc:	ldr	x19, [x0, #8]
     1e0:	ldr	w0, [x19, #8]
     1e4:	tbnz	w0, #0, 2b4 <update_dev_host+0x114>
     1e8:	add	x24, x19, #0xa8
     1ec:	mov	x0, x24
     1f0:	bl	0 <gomp_mutex_lock>
     1f4:	mov	x2, x22
     1f8:	mov	x1, x20
     1fc:	mov	x0, x19
     200:	bl	178 <lookup_host>
     204:	cbnz	x0, 224 <update_dev_host+0x84>
     208:	mov	x0, x24
     20c:	bl	28 <gomp_mutex_unlock>
     210:	adrp	x0, 0 <gomp_mutex_lock>
     214:	mov	w2, w22
     218:	mov	x1, x20
     21c:	add	x0, x0, #0x0
     220:	bl	0 <gomp_fatal>
     224:	ldr	x1, [x0, #16]
     228:	cmn	w23, #0x1
     22c:	ldr	x21, [x1, #16]
     230:	ldr	x1, [x0]
     234:	sub	x21, x21, x1
     238:	ldr	x1, [x0, #24]
     23c:	add	x1, x20, x1
     240:	add	x21, x21, x1
     244:	b.lt	254 <update_dev_host+0xb4>  // b.tstop
     248:	ldr	x1, [x19, #248]
     24c:	mov	w0, w23
     250:	blr	x1
     254:	ldr	w0, [x19, #12]
     258:	cbz	w25, 2a0 <update_dev_host+0x100>
     25c:	ldr	x4, [x19, #120]
     260:	mov	x3, x22
     264:	mov	x2, x20
     268:	mov	x1, x21
     26c:	blr	x4
     270:	cmn	w23, #0x1
     274:	b.lt	284 <update_dev_host+0xe4>  // b.tstop
     278:	ldr	x1, [x19, #248]
     27c:	mov	w0, #0xfffffffe            	// #-2
     280:	blr	x1
     284:	mov	x0, x24
     288:	ldp	x19, x20, [sp, #16]
     28c:	ldp	x21, x22, [sp, #32]
     290:	ldp	x23, x24, [sp, #48]
     294:	ldr	x25, [sp, #64]
     298:	ldp	x29, x30, [sp], #80
     29c:	b	28 <gomp_mutex_unlock>
     2a0:	mov	x3, x22
     2a4:	mov	x2, x21
     2a8:	mov	x1, x20
     2ac:	ldr	x4, [x19, #112]
     2b0:	b	26c <update_dev_host+0xcc>
     2b4:	ldp	x19, x20, [sp, #16]
     2b8:	ldp	x21, x22, [sp, #32]
     2bc:	ldp	x23, x24, [sp, #48]
     2c0:	ldr	x25, [sp, #64]
     2c4:	ldp	x29, x30, [sp], #80
     2c8:	ret

00000000000002cc <present_create_copy>:
     2cc:	stp	x29, x30, [sp, #-96]!
     2d0:	cmp	x1, #0x0
     2d4:	ccmp	x2, #0x0, #0x4, ne  // ne = any
     2d8:	mov	x29, sp
     2dc:	stp	x19, x20, [sp, #16]
     2e0:	stp	x21, x22, [sp, #32]
     2e4:	str	x23, [sp, #48]
     2e8:	str	x2, [sp, #72]
     2ec:	b.ne	2fc <present_create_copy+0x30>  // b.any
     2f0:	adrp	x0, 0 <gomp_mutex_lock>
     2f4:	add	x0, x0, #0x0
     2f8:	bl	0 <gomp_fatal>
     2fc:	mov	w22, w0
     300:	mov	x19, x1
     304:	mov	w23, w3
     308:	bl	0 <goacc_lazy_initialize>
     30c:	adrp	x0, 0 <goacc_tls_data>
     310:	ldr	x0, [x0]
     314:	mrs	x1, tpidr_el0
     318:	ldr	x0, [x1, x0]
     31c:	ldr	x21, [x0, #8]
     320:	ldr	w0, [x21, #8]
     324:	tbnz	w0, #0, 3d8 <present_create_copy+0x10c>
     328:	add	x20, x21, #0xa8
     32c:	mov	x0, x20
     330:	bl	0 <gomp_mutex_lock>
     334:	ldr	x2, [sp, #72]
     338:	mov	x1, x19
     33c:	mov	x0, x21
     340:	bl	178 <lookup_host>
     344:	cbz	x0, 3f0 <present_create_copy+0x124>
     348:	ldp	x1, x3, [x0, #16]
     34c:	ldr	x21, [x1, #16]
     350:	add	x21, x21, x3
     354:	tbnz	w22, #0, 37c <present_create_copy+0xb0>
     358:	mov	x0, x20
     35c:	bl	28 <gomp_mutex_unlock>
     360:	ldr	w4, [sp, #72]
     364:	adrp	x0, 0 <gomp_mutex_lock>
     368:	mov	x3, x21
     36c:	mov	x1, x19
     370:	add	x0, x0, #0x0
     374:	mov	x2, x4
     378:	bl	0 <gomp_fatal>
     37c:	ldr	x1, [sp, #72]
     380:	ldr	x2, [x0, #8]
     384:	add	x1, x19, x1
     388:	cmp	x1, x2
     38c:	b.ls	3ac <present_create_copy+0xe0>  // b.plast
     390:	mov	x0, x20
     394:	bl	28 <gomp_mutex_unlock>
     398:	adrp	x0, 0 <gomp_mutex_lock>
     39c:	ldr	w2, [sp, #72]
     3a0:	mov	x1, x19
     3a4:	add	x0, x0, #0x0
     3a8:	b	2f8 <present_create_copy+0x2c>
     3ac:	ldr	x1, [x0, #32]
     3b0:	cmn	x1, #0x1
     3b4:	b.eq	3cc <present_create_copy+0x100>  // b.none
     3b8:	add	x1, x1, #0x1
     3bc:	str	x1, [x0, #32]
     3c0:	ldr	x1, [x0, #40]
     3c4:	add	x1, x1, #0x1
     3c8:	str	x1, [x0, #40]
     3cc:	mov	x19, x21
     3d0:	mov	x0, x20
     3d4:	bl	28 <gomp_mutex_unlock>
     3d8:	mov	x0, x19
     3dc:	ldp	x19, x20, [sp, #16]
     3e0:	ldp	x21, x22, [sp, #32]
     3e4:	ldr	x23, [sp, #48]
     3e8:	ldp	x29, x30, [sp], #96
     3ec:	ret
     3f0:	tbz	w22, #1, 390 <present_create_copy+0xc4>
     3f4:	ubfx	x22, x22, #2, #1
     3f8:	mov	x0, x20
     3fc:	strh	w22, [sp, #86]
     400:	str	x19, [sp, #88]
     404:	bl	28 <gomp_mutex_unlock>
     408:	cmn	w23, #0x1
     40c:	b.lt	41c <present_create_copy+0x150>  // b.tstop
     410:	ldr	x1, [x21, #248]
     414:	mov	w0, w23
     418:	blr	x1
     41c:	mov	x1, #0x1                   	// #1
     420:	add	x5, sp, #0x56
     424:	add	x4, sp, #0x48
     428:	add	x2, sp, #0x58
     42c:	mov	x0, x21
     430:	mov	w7, #0x0                   	// #0
     434:	mov	w6, #0x1                   	// #1
     438:	mov	x3, #0x0                   	// #0
     43c:	bl	0 <gomp_map_vars>
     440:	mov	x22, x0
     444:	ldr	x0, [x0, #64]
     448:	mov	x1, #0x1                   	// #1
     44c:	cmn	w23, #0x1
     450:	str	x1, [x0, #40]
     454:	b.lt	464 <present_create_copy+0x198>  // b.tstop
     458:	ldr	x1, [x21, #248]
     45c:	mov	w0, #0xfffffffe            	// #-2
     460:	blr	x1
     464:	mov	x0, x20
     468:	bl	0 <gomp_mutex_lock>
     46c:	ldr	x0, [x21, #176]
     470:	str	x0, [x22, #40]
     474:	ldr	x19, [x22, #32]
     478:	str	x22, [x21, #176]
     47c:	mov	x0, x20
     480:	bl	28 <gomp_mutex_unlock>
     484:	b	3d8 <present_create_copy+0x10c>

0000000000000488 <lookup_dev.part.0>:
     488:	add	x2, x1, x2
     48c:	cbnz	x0, 494 <lookup_dev.part.0+0xc>
     490:	ret
     494:	ldr	x5, [x0, #16]
     498:	cmp	x5, x1
     49c:	b.hi	4c8 <lookup_dev.part.0+0x40>  // b.pmore
     4a0:	ldr	x3, [x0, #24]
     4a4:	cmp	x3, x2
     4a8:	b.cc	4c8 <lookup_dev.part.0+0x40>  // b.lo, b.ul, b.last
     4ac:	ldr	x8, [x0, #48]
     4b0:	mov	x3, #0x0                   	// #0
     4b4:	mov	x9, #0x48                  	// #72
     4b8:	cmp	x3, x8
     4bc:	b.ne	4d0 <lookup_dev.part.0+0x48>  // b.any
     4c0:	mov	x0, #0x0                   	// #0
     4c4:	b	490 <lookup_dev.part.0+0x8>
     4c8:	ldr	x0, [x0, #40]
     4cc:	b	48c <lookup_dev.part.0+0x4>
     4d0:	ldr	x7, [x0, #8]
     4d4:	mul	x6, x3, x9
     4d8:	add	x3, x3, #0x1
     4dc:	add	x4, x7, x6
     4e0:	ldr	x6, [x7, x6]
     4e4:	ldr	x2, [x4, #24]
     4e8:	add	x2, x2, x6
     4ec:	ldr	x6, [x4, #8]
     4f0:	sub	x2, x2, x5
     4f4:	add	x2, x1, x2
     4f8:	cmp	x2, x6
     4fc:	b.hi	4b8 <lookup_dev.part.0+0x30>  // b.pmore
     500:	mov	x0, x4
     504:	b	490 <lookup_dev.part.0+0x8>

0000000000000508 <delete_copyout.isra.0>:
     508:	stp	x29, x30, [sp, #-112]!
     50c:	mov	x29, sp
     510:	stp	x25, x26, [sp, #64]
     514:	mov	w26, w0
     518:	adrp	x0, 0 <goacc_tls_data>
     51c:	ldr	x0, [x0]
     520:	stp	x21, x22, [sp, #32]
     524:	mov	x21, x1
     528:	mrs	x1, tpidr_el0
     52c:	stp	x19, x20, [sp, #16]
     530:	ldr	x0, [x1, x0]
     534:	stp	x23, x24, [sp, #48]
     538:	stp	x27, x28, [sp, #80]
     53c:	ldr	x20, [x0, #8]
     540:	ldr	w0, [x20, #8]
     544:	tbnz	w0, #0, 6ec <delete_copyout.isra.0+0x1e4>
     548:	add	x22, x20, #0xa8
     54c:	mov	x24, x2
     550:	mov	w23, w3
     554:	mov	x0, x22
     558:	bl	0 <gomp_mutex_lock>
     55c:	mov	x2, x24
     560:	mov	x1, x21
     564:	mov	x0, x20
     568:	bl	178 <lookup_host>
     56c:	mov	x19, x0
     570:	cbnz	x0, 590 <delete_copyout.isra.0+0x88>
     574:	mov	x0, x22
     578:	bl	28 <gomp_mutex_unlock>
     57c:	adrp	x0, 0 <gomp_mutex_lock>
     580:	mov	w2, w24
     584:	mov	x1, x21
     588:	add	x0, x0, #0x0
     58c:	bl	0 <gomp_fatal>
     590:	ldp	x2, x25, [x0]
     594:	ldp	x0, x27, [x0, #16]
     598:	sub	x25, x25, x2
     59c:	cmp	x21, x2
     5a0:	add	x27, x21, x27
     5a4:	ldr	x28, [x0, #16]
     5a8:	b.ne	5b4 <delete_copyout.isra.0+0xac>  // b.any
     5ac:	cmp	x24, x25
     5b0:	b.eq	5d8 <delete_copyout.isra.0+0xd0>  // b.none
     5b4:	mov	x0, x22
     5b8:	bl	28 <gomp_mutex_unlock>
     5bc:	ldr	x1, [x19]
     5c0:	adrp	x0, 0 <gomp_mutex_lock>
     5c4:	mov	w4, w24
     5c8:	mov	x3, x21
     5cc:	mov	w2, w25
     5d0:	add	x0, x0, #0x0
     5d4:	bl	0 <gomp_fatal>
     5d8:	ldr	x1, [x19, #32]
     5dc:	cmn	x1, #0x1
     5e0:	b.ne	5e8 <delete_copyout.isra.0+0xe0>  // b.any
     5e4:	stp	xzr, xzr, [x19, #32]
     5e8:	ldp	x1, x4, [x19, #32]
     5ec:	cmp	x1, x4
     5f0:	b.cs	608 <delete_copyout.isra.0+0x100>  // b.hs, b.nlast
     5f4:	mov	x0, x22
     5f8:	bl	28 <gomp_mutex_unlock>
     5fc:	adrp	x0, 0 <gomp_mutex_lock>
     600:	add	x0, x0, #0x0
     604:	bl	0 <gomp_fatal>
     608:	tbz	w26, #1, 6c4 <delete_copyout.isra.0+0x1bc>
     60c:	sub	x1, x1, x4
     610:	stp	x1, xzr, [x19, #32]
     614:	ldr	x1, [x19, #32]
     618:	cbnz	x1, 6a4 <delete_copyout.isra.0+0x19c>
     61c:	ldr	x1, [x0]
     620:	cmp	x1, #0x2
     624:	b.ne	648 <delete_copyout.isra.0+0x140>  // b.any
     628:	ldr	x1, [x20, #176]
     62c:	mov	x3, #0x0                   	// #0
     630:	cbz	x1, 648 <delete_copyout.isra.0+0x140>
     634:	cmp	x0, x1
     638:	ldr	x4, [x1, #40]
     63c:	b.ne	6e0 <delete_copyout.isra.0+0x1d8>  // b.any
     640:	cbz	x3, 6d8 <delete_copyout.isra.0+0x1d0>
     644:	str	x4, [x3, #40]
     648:	tbz	w26, #0, 698 <delete_copyout.isra.0+0x190>
     64c:	cmn	w23, #0x1
     650:	b.lt	668 <delete_copyout.isra.0+0x160>  // b.tstop
     654:	ldr	x1, [x20, #248]
     658:	mov	w0, w23
     65c:	str	x2, [sp, #104]
     660:	blr	x1
     664:	ldr	x2, [sp, #104]
     668:	sub	x2, x28, x2
     66c:	ldr	w0, [x20, #12]
     670:	mov	x3, x25
     674:	ldr	x4, [x20, #112]
     678:	add	x2, x2, x27
     67c:	mov	x1, x21
     680:	blr	x4
     684:	cmn	w23, #0x1
     688:	b.lt	698 <delete_copyout.isra.0+0x190>  // b.tstop
     68c:	ldr	x1, [x20, #248]
     690:	mov	w0, #0xfffffffe            	// #-2
     694:	blr	x1
     698:	mov	x1, x19
     69c:	mov	x0, x20
     6a0:	bl	0 <gomp_remove_var>
     6a4:	mov	x0, x22
     6a8:	ldp	x19, x20, [sp, #16]
     6ac:	ldp	x21, x22, [sp, #32]
     6b0:	ldp	x23, x24, [sp, #48]
     6b4:	ldp	x25, x26, [sp, #64]
     6b8:	ldp	x27, x28, [sp, #80]
     6bc:	ldp	x29, x30, [sp], #112
     6c0:	b	28 <gomp_mutex_unlock>
     6c4:	cbz	x4, 614 <delete_copyout.isra.0+0x10c>
     6c8:	sub	x4, x4, #0x1
     6cc:	sub	x1, x1, #0x1
     6d0:	stp	x1, x4, [x19, #32]
     6d4:	b	614 <delete_copyout.isra.0+0x10c>
     6d8:	str	x4, [x20, #176]
     6dc:	b	648 <delete_copyout.isra.0+0x140>
     6e0:	mov	x3, x1
     6e4:	mov	x1, x4
     6e8:	b	630 <delete_copyout.isra.0+0x128>
     6ec:	ldp	x19, x20, [sp, #16]
     6f0:	ldp	x21, x22, [sp, #32]
     6f4:	ldp	x23, x24, [sp, #48]
     6f8:	ldp	x25, x26, [sp, #64]
     6fc:	ldp	x27, x28, [sp, #80]
     700:	ldp	x29, x30, [sp], #112
     704:	ret

0000000000000708 <acc_malloc>:
     708:	cbz	x0, 790 <acc_malloc+0x88>
     70c:	stp	x29, x30, [sp, #-32]!
     710:	mov	x29, sp
     714:	str	x19, [sp, #16]
     718:	mov	x19, x0
     71c:	bl	0 <goacc_lazy_initialize>
     720:	adrp	x0, 0 <goacc_tls_data>
     724:	ldr	x0, [x0]
     728:	mrs	x1, tpidr_el0
     72c:	ldr	x0, [x1, x0]
     730:	ldr	x0, [x0, #8]
     734:	cbnz	x0, 75c <acc_malloc+0x54>
     738:	adrp	x3, 0 <gomp_mutex_lock>
     73c:	add	x3, x3, #0x0
     740:	adrp	x1, 0 <gomp_mutex_lock>
     744:	adrp	x0, 0 <gomp_mutex_lock>
     748:	add	x3, x3, #0x15
     74c:	add	x1, x1, #0x0
     750:	add	x0, x0, #0x0
     754:	mov	w2, #0x6a                  	// #106
     758:	bl	0 <__assert_fail>
     75c:	ldr	w1, [x0, #8]
     760:	tbz	w1, #0, 774 <acc_malloc+0x6c>
     764:	mov	x0, x19
     768:	ldr	x19, [sp, #16]
     76c:	ldp	x29, x30, [sp], #32
     770:	b	0 <malloc>
     774:	mov	x1, x19
     778:	ldr	x19, [sp, #16]
     77c:	ldp	x29, x30, [sp], #32
     780:	ldr	x2, [x0, #96]
     784:	ldr	w0, [x0, #12]
     788:	mov	x16, x2
     78c:	br	x16
     790:	ret

0000000000000794 <acc_memcpy_to_device>:
     794:	adrp	x5, 0 <gomp_mutex_lock>
     798:	add	x5, x5, #0x0
     79c:	mov	x3, x2
     7a0:	add	x5, x5, #0x20
     7a4:	mov	x2, x1
     7a8:	mov	w4, #0xfffffffe            	// #-2
     7ac:	mov	x1, x0
     7b0:	mov	w0, #0x0                   	// #0
     7b4:	b	44 <memcpy_tofrom_device>

00000000000007b8 <acc_memcpy_to_device_async>:
     7b8:	adrp	x5, 0 <gomp_mutex_lock>
     7bc:	add	x5, x5, #0x0
     7c0:	mov	w4, w3
     7c4:	add	x5, x5, #0x35
     7c8:	mov	x3, x2
     7cc:	mov	x2, x1
     7d0:	mov	x1, x0
     7d4:	mov	w0, #0x0                   	// #0
     7d8:	b	44 <memcpy_tofrom_device>

00000000000007dc <acc_memcpy_from_device>:
     7dc:	adrp	x5, 0 <gomp_mutex_lock>
     7e0:	add	x5, x5, #0x0
     7e4:	mov	x3, x2
     7e8:	add	x5, x5, #0x50
     7ec:	mov	x2, x0
     7f0:	mov	w4, #0xfffffffe            	// #-2
     7f4:	mov	w0, #0x1                   	// #1
     7f8:	b	44 <memcpy_tofrom_device>

00000000000007fc <acc_memcpy_from_device_async>:
     7fc:	adrp	x5, 0 <gomp_mutex_lock>
     800:	add	x5, x5, #0x0
     804:	mov	w4, w3
     808:	add	x5, x5, #0x67
     80c:	mov	x3, x2
     810:	mov	x2, x0
     814:	mov	w0, #0x1                   	// #1
     818:	b	44 <memcpy_tofrom_device>

000000000000081c <acc_deviceptr>:
     81c:	stp	x29, x30, [sp, #-48]!
     820:	mov	x29, sp
     824:	stp	x19, x20, [sp, #16]
     828:	mov	x19, x0
     82c:	str	x21, [sp, #32]
     830:	bl	0 <goacc_lazy_initialize>
     834:	adrp	x0, 0 <goacc_tls_data>
     838:	ldr	x0, [x0]
     83c:	mrs	x1, tpidr_el0
     840:	ldr	x0, [x1, x0]
     844:	ldr	x21, [x0, #8]
     848:	ldr	w0, [x21, #8]
     84c:	tbnz	w0, #0, 87c <acc_deviceptr+0x60>
     850:	add	x20, x21, #0xa8
     854:	mov	x0, x20
     858:	bl	0 <gomp_mutex_lock>
     85c:	mov	x1, x19
     860:	mov	x0, x21
     864:	mov	x2, #0x1                   	// #1
     868:	bl	178 <lookup_host>
     86c:	cbnz	x0, 890 <acc_deviceptr+0x74>
     870:	mov	x19, #0x0                   	// #0
     874:	mov	x0, x20
     878:	bl	28 <gomp_mutex_unlock>
     87c:	mov	x0, x19
     880:	ldp	x19, x20, [sp, #16]
     884:	ldr	x21, [sp, #32]
     888:	ldp	x29, x30, [sp], #48
     88c:	ret
     890:	ldr	x2, [x0]
     894:	ldp	x1, x0, [x0, #16]
     898:	ldr	x1, [x1, #16]
     89c:	sub	x1, x1, x2
     8a0:	add	x0, x1, x0
     8a4:	add	x19, x19, x0
     8a8:	mov	x0, x20
     8ac:	bl	28 <gomp_mutex_unlock>
     8b0:	b	87c <acc_deviceptr+0x60>

00000000000008b4 <acc_hostptr>:
     8b4:	stp	x29, x30, [sp, #-48]!
     8b8:	mov	x29, sp
     8bc:	stp	x19, x20, [sp, #16]
     8c0:	mov	x19, x0
     8c4:	str	x21, [sp, #32]
     8c8:	bl	0 <goacc_lazy_initialize>
     8cc:	adrp	x0, 0 <goacc_tls_data>
     8d0:	ldr	x0, [x0]
     8d4:	mrs	x1, tpidr_el0
     8d8:	ldr	x0, [x1, x0]
     8dc:	ldr	x21, [x0, #8]
     8e0:	ldr	w0, [x21, #8]
     8e4:	tbnz	w0, #0, 918 <acc_hostptr+0x64>
     8e8:	add	x20, x21, #0xa8
     8ec:	mov	x0, x20
     8f0:	bl	0 <gomp_mutex_lock>
     8f4:	ldr	x0, [x21, #176]
     8f8:	cbz	x0, 90c <acc_hostptr+0x58>
     8fc:	mov	x1, x19
     900:	mov	x2, #0x1                   	// #1
     904:	bl	488 <lookup_dev.part.0>
     908:	cbnz	x0, 92c <acc_hostptr+0x78>
     90c:	mov	x19, #0x0                   	// #0
     910:	mov	x0, x20
     914:	bl	28 <gomp_mutex_unlock>
     918:	mov	x0, x19
     91c:	ldp	x19, x20, [sp, #16]
     920:	ldr	x21, [sp, #32]
     924:	ldp	x29, x30, [sp], #48
     928:	ret
     92c:	ldr	x2, [x0]
     930:	ldr	x1, [x0, #24]
     934:	ldr	x0, [x0, #16]
     938:	add	x1, x1, x2
     93c:	ldr	x0, [x0, #16]
     940:	sub	x0, x1, x0
     944:	add	x19, x19, x0
     948:	mov	x0, x20
     94c:	bl	28 <gomp_mutex_unlock>
     950:	b	918 <acc_hostptr+0x64>

0000000000000954 <acc_is_present>:
     954:	cmp	x1, #0x0
     958:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     95c:	b.eq	a0c <acc_is_present+0xb8>  // b.none
     960:	stp	x29, x30, [sp, #-48]!
     964:	mov	x29, sp
     968:	stp	x19, x20, [sp, #16]
     96c:	mov	x20, x0
     970:	stp	x21, x22, [sp, #32]
     974:	mov	x21, x1
     978:	bl	0 <goacc_lazy_initialize>
     97c:	adrp	x0, 0 <goacc_tls_data>
     980:	ldr	x0, [x0]
     984:	mrs	x1, tpidr_el0
     988:	ldr	x0, [x1, x0]
     98c:	ldr	x19, [x0, #8]
     990:	ldr	w0, [x19, #8]
     994:	tbnz	w0, #0, a14 <acc_is_present+0xc0>
     998:	add	x22, x19, #0xa8
     99c:	mov	x0, x22
     9a0:	bl	0 <gomp_mutex_lock>
     9a4:	mov	x0, x19
     9a8:	mov	x2, x21
     9ac:	mov	x1, x20
     9b0:	bl	178 <lookup_host>
     9b4:	mov	x19, x0
     9b8:	cbz	x0, 9e4 <acc_is_present+0x90>
     9bc:	ldr	x1, [x0]
     9c0:	cmp	x1, x20
     9c4:	b.hi	a04 <acc_is_present+0xb0>  // b.pmore
     9c8:	ldr	x0, [x0, #8]
     9cc:	add	x20, x21, x20
     9d0:	cmp	x20, x0
     9d4:	b.hi	a04 <acc_is_present+0xb0>  // b.pmore
     9d8:	sub	x0, x0, x1
     9dc:	cmp	x21, x0
     9e0:	csel	x19, x19, xzr, ls  // ls = plast
     9e4:	mov	x0, x22
     9e8:	bl	28 <gomp_mutex_unlock>
     9ec:	cmp	x19, #0x0
     9f0:	cset	w0, ne  // ne = any
     9f4:	ldp	x19, x20, [sp, #16]
     9f8:	ldp	x21, x22, [sp, #32]
     9fc:	ldp	x29, x30, [sp], #48
     a00:	ret
     a04:	mov	x19, #0x0                   	// #0
     a08:	b	9e4 <acc_is_present+0x90>
     a0c:	mov	w0, #0x0                   	// #0
     a10:	ret
     a14:	mov	w0, #0x1                   	// #1
     a18:	b	9f4 <acc_is_present+0xa0>

0000000000000a1c <acc_map_data>:
     a1c:	stp	x29, x30, [sp, #-96]!
     a20:	mov	x29, sp
     a24:	stp	x19, x20, [sp, #16]
     a28:	mov	x20, x1
     a2c:	mov	x19, x2
     a30:	stp	x21, x22, [sp, #32]
     a34:	mov	x21, x0
     a38:	stp	x23, x24, [sp, #48]
     a3c:	strh	wzr, [sp, #70]
     a40:	stp	x0, x1, [sp, #72]
     a44:	str	x2, [sp, #88]
     a48:	bl	0 <goacc_lazy_initialize>
     a4c:	adrp	x0, 0 <goacc_tls_data>
     a50:	ldr	x0, [x0]
     a54:	mrs	x1, tpidr_el0
     a58:	ldr	x24, [x1, x0]
     a5c:	ldr	x22, [x24, #8]
     a60:	add	x23, x22, #0xa8
     a64:	ldr	w0, [x22, #8]
     a68:	tbz	w0, #0, a80 <acc_map_data+0x64>
     a6c:	cmp	x21, x20
     a70:	b.eq	b88 <acc_map_data+0x16c>  // b.none
     a74:	adrp	x0, 0 <gomp_mutex_lock>
     a78:	add	x0, x0, #0x0
     a7c:	bl	0 <gomp_fatal>
     a80:	cmp	x20, #0x0
     a84:	ccmp	x21, #0x0, #0x4, ne  // ne = any
     a88:	b.eq	a90 <acc_map_data+0x74>  // b.none
     a8c:	cbnz	x19, aac <acc_map_data+0x90>
     a90:	adrp	x0, 0 <gomp_mutex_lock>
     a94:	mov	w4, w19
     a98:	mov	x3, x20
     a9c:	mov	w2, w19
     aa0:	mov	x1, x21
     aa4:	add	x0, x0, #0x0
     aa8:	bl	0 <gomp_fatal>
     aac:	mov	x0, x23
     ab0:	bl	0 <gomp_mutex_lock>
     ab4:	mov	x2, x19
     ab8:	mov	x1, x21
     abc:	mov	x0, x22
     ac0:	bl	178 <lookup_host>
     ac4:	cbz	x0, ae4 <acc_map_data+0xc8>
     ac8:	mov	x0, x23
     acc:	bl	28 <gomp_mutex_unlock>
     ad0:	adrp	x0, 0 <gomp_mutex_lock>
     ad4:	mov	w2, w19
     ad8:	mov	x1, x21
     adc:	add	x0, x0, #0x0
     ae0:	bl	0 <gomp_fatal>
     ae4:	ldr	x0, [x24, #8]
     ae8:	ldr	x0, [x0, #176]
     aec:	cbz	x0, b1c <acc_map_data+0x100>
     af0:	mov	x2, x19
     af4:	mov	x1, x20
     af8:	bl	488 <lookup_dev.part.0>
     afc:	cbz	x0, b1c <acc_map_data+0x100>
     b00:	mov	x0, x23
     b04:	bl	28 <gomp_mutex_unlock>
     b08:	adrp	x0, 0 <gomp_mutex_lock>
     b0c:	mov	w2, w19
     b10:	mov	x1, x20
     b14:	add	x0, x0, #0x0
     b18:	b	ae0 <acc_map_data+0xc4>
     b1c:	mov	x0, x23
     b20:	bl	28 <gomp_mutex_unlock>
     b24:	add	x5, sp, #0x46
     b28:	add	x4, sp, #0x58
     b2c:	add	x3, sp, #0x50
     b30:	add	x2, sp, #0x48
     b34:	mov	w7, #0x0                   	// #0
     b38:	mov	w6, #0x1                   	// #1
     b3c:	mov	x0, x22
     b40:	mov	x1, #0x1                   	// #1
     b44:	bl	0 <gomp_map_vars>
     b48:	mov	x19, x0
     b4c:	ldr	x0, [x0, #64]
     b50:	mov	x1, #0xffffffffffffffff    	// #-1
     b54:	str	x1, [x0, #32]
     b58:	mov	x0, x23
     b5c:	bl	0 <gomp_mutex_lock>
     b60:	ldr	x0, [x22, #176]
     b64:	str	x0, [x19, #40]
     b68:	str	x19, [x22, #176]
     b6c:	mov	x0, x23
     b70:	bl	28 <gomp_mutex_unlock>
     b74:	ldp	x19, x20, [sp, #16]
     b78:	ldp	x21, x22, [sp, #32]
     b7c:	ldp	x23, x24, [sp, #48]
     b80:	ldp	x29, x30, [sp], #96
     b84:	ret
     b88:	mov	x0, x23
     b8c:	bl	0 <gomp_mutex_lock>
     b90:	mov	x0, #0x0                   	// #0
     b94:	ldr	x1, [x22, #176]
     b98:	str	x1, [x0, #40]
     b9c:	brk	#0x3e8

0000000000000ba0 <acc_unmap_data>:
     ba0:	stp	x29, x30, [sp, #-64]!
     ba4:	mrs	x1, tpidr_el0
     ba8:	mov	x29, sp
     bac:	stp	x19, x20, [sp, #16]
     bb0:	mov	x20, x0
     bb4:	adrp	x0, 0 <goacc_tls_data>
     bb8:	ldr	x0, [x0]
     bbc:	stp	x21, x22, [sp, #32]
     bc0:	ldr	x0, [x1, x0]
     bc4:	ldr	x21, [x0, #8]
     bc8:	ldr	w0, [x21, #8]
     bcc:	str	x23, [sp, #48]
     bd0:	tbnz	w0, #0, cbc <acc_unmap_data+0x11c>
     bd4:	add	x22, x21, #0xa8
     bd8:	mov	x0, x22
     bdc:	bl	0 <gomp_mutex_lock>
     be0:	mov	x1, x20
     be4:	mov	x0, x21
     be8:	mov	x2, #0x1                   	// #1
     bec:	bl	178 <lookup_host>
     bf0:	mov	x19, x0
     bf4:	cbnz	x0, c10 <acc_unmap_data+0x70>
     bf8:	mov	x0, x22
     bfc:	bl	28 <gomp_mutex_unlock>
     c00:	adrp	x0, 0 <gomp_mutex_lock>
     c04:	mov	x1, x20
     c08:	add	x0, x0, #0x0
     c0c:	bl	0 <gomp_fatal>
     c10:	ldr	x23, [x0]
     c14:	cmp	x20, x23
     c18:	b.eq	c40 <acc_unmap_data+0xa0>  // b.none
     c1c:	mov	x0, x22
     c20:	ldr	x21, [x19, #8]
     c24:	bl	28 <gomp_mutex_unlock>
     c28:	ldr	x1, [x19]
     c2c:	adrp	x0, 0 <gomp_mutex_lock>
     c30:	mov	x3, x20
     c34:	sub	w2, w21, w23
     c38:	add	x0, x0, #0x0
     c3c:	bl	0 <gomp_fatal>
     c40:	mov	x0, #0x1                   	// #1
     c44:	str	x0, [x19, #32]
     c48:	ldr	x19, [x19, #16]
     c4c:	ldr	x0, [x19]
     c50:	cmp	x0, #0x2
     c54:	b.ne	c84 <acc_unmap_data+0xe4>  // b.any
     c58:	mov	x1, #0x0                   	// #0
     c5c:	ldr	x0, [x21, #176]
     c60:	stp	xzr, xzr, [x19, #24]
     c64:	cbnz	x0, c70 <acc_unmap_data+0xd0>
     c68:	mov	x19, #0x0                   	// #0
     c6c:	b	c84 <acc_unmap_data+0xe4>
     c70:	cmp	x0, x19
     c74:	ldr	x2, [x0, #40]
     c78:	b.ne	cb0 <acc_unmap_data+0x110>  // b.any
     c7c:	cbz	x1, ca8 <acc_unmap_data+0x108>
     c80:	str	x2, [x1, #40]
     c84:	mov	x0, x22
     c88:	bl	28 <gomp_mutex_unlock>
     c8c:	mov	x0, x19
     c90:	mov	w1, #0x1                   	// #1
     c94:	ldp	x19, x20, [sp, #16]
     c98:	ldp	x21, x22, [sp, #32]
     c9c:	ldr	x23, [sp, #48]
     ca0:	ldp	x29, x30, [sp], #64
     ca4:	b	0 <gomp_unmap_vars>
     ca8:	str	x2, [x21, #176]
     cac:	b	c84 <acc_unmap_data+0xe4>
     cb0:	mov	x1, x0
     cb4:	mov	x0, x2
     cb8:	b	c64 <acc_unmap_data+0xc4>
     cbc:	ldp	x19, x20, [sp, #16]
     cc0:	ldp	x21, x22, [sp, #32]
     cc4:	ldr	x23, [sp, #48]
     cc8:	ldp	x29, x30, [sp], #64
     ccc:	ret

0000000000000cd0 <acc_free>:
     cd0:	cbz	x0, de4 <acc_free+0x114>
     cd4:	adrp	x1, 0 <goacc_tls_data>
     cd8:	ldr	x1, [x1]
     cdc:	mrs	x2, tpidr_el0
     ce0:	stp	x29, x30, [sp, #-64]!
     ce4:	mov	x29, sp
     ce8:	ldr	x1, [x2, x1]
     cec:	stp	x19, x20, [sp, #16]
     cf0:	stp	x21, x22, [sp, #32]
     cf4:	stp	x23, x24, [sp, #48]
     cf8:	cbz	x1, d04 <acc_free+0x34>
     cfc:	ldr	x19, [x1, #8]
     d00:	cbnz	x19, d28 <acc_free+0x58>
     d04:	adrp	x3, 0 <gomp_mutex_lock>
     d08:	add	x3, x3, #0x0
     d0c:	adrp	x1, 0 <gomp_mutex_lock>
     d10:	adrp	x0, 0 <gomp_mutex_lock>
     d14:	add	x3, x3, #0x84
     d18:	add	x1, x1, #0x0
     d1c:	add	x0, x0, #0x0
     d20:	mov	w2, #0x7f                  	// #127
     d24:	bl	0 <__assert_fail>
     d28:	ldr	w1, [x19, #8]
     d2c:	tbz	w1, #0, d44 <acc_free+0x74>
     d30:	ldp	x19, x20, [sp, #16]
     d34:	ldp	x21, x22, [sp, #32]
     d38:	ldp	x23, x24, [sp, #48]
     d3c:	ldp	x29, x30, [sp], #64
     d40:	b	0 <free>
     d44:	add	x23, x19, #0xa8
     d48:	mov	x20, x0
     d4c:	mov	x0, x23
     d50:	bl	0 <gomp_mutex_lock>
     d54:	ldr	x0, [x19, #176]
     d58:	cbz	x0, dc4 <acc_free+0xf4>
     d5c:	mov	x1, x20
     d60:	mov	x2, #0x1                   	// #1
     d64:	bl	488 <lookup_dev.part.0>
     d68:	mov	x21, x0
     d6c:	cbz	x0, dc4 <acc_free+0xf4>
     d70:	ldp	x0, x22, [x0, #16]
     d74:	ldr	x24, [x0, #16]
     d78:	mov	x0, x23
     d7c:	bl	28 <gomp_mutex_unlock>
     d80:	ldr	x0, [x21]
     d84:	add	x0, x22, x0
     d88:	sub	x0, x0, x24
     d8c:	add	x0, x20, x0
     d90:	bl	ba0 <acc_unmap_data>
     d94:	ldr	w0, [x19, #12]
     d98:	mov	x1, x20
     d9c:	ldr	x2, [x19, #104]
     da0:	blr	x2
     da4:	tst	w0, #0xff
     da8:	b.ne	dd0 <acc_free+0x100>  // b.any
     dac:	adrp	x1, 0 <gomp_mutex_lock>
     db0:	add	x1, x1, #0x0
     db4:	adrp	x0, 0 <gomp_mutex_lock>
     db8:	add	x1, x1, #0x8d
     dbc:	add	x0, x0, #0x0
     dc0:	bl	0 <gomp_fatal>
     dc4:	mov	x0, x23
     dc8:	bl	28 <gomp_mutex_unlock>
     dcc:	b	d94 <acc_free+0xc4>
     dd0:	ldp	x19, x20, [sp, #16]
     dd4:	ldp	x21, x22, [sp, #32]
     dd8:	ldp	x23, x24, [sp, #48]
     ddc:	ldp	x29, x30, [sp], #64
     de0:	ret
     de4:	ret

0000000000000de8 <acc_create>:
     de8:	mov	x2, x1
     dec:	mov	w3, #0xfffffffe            	// #-2
     df0:	mov	x1, x0
     df4:	mov	w0, #0x3                   	// #3
     df8:	b	2cc <present_create_copy>

0000000000000dfc <acc_create_async>:
     dfc:	mov	w3, w2
     e00:	mov	x2, x1
     e04:	mov	x1, x0
     e08:	mov	w0, #0x3                   	// #3
     e0c:	b	2cc <present_create_copy>

0000000000000e10 <acc_copyin>:
     e10:	mov	x2, x1
     e14:	mov	w3, #0xfffffffe            	// #-2
     e18:	mov	x1, x0
     e1c:	mov	w0, #0x7                   	// #7
     e20:	b	2cc <present_create_copy>

0000000000000e24 <acc_copyin_async>:
     e24:	mov	w3, w2
     e28:	mov	x2, x1
     e2c:	mov	x1, x0
     e30:	mov	w0, #0x7                   	// #7
     e34:	b	2cc <present_create_copy>

0000000000000e38 <acc_delete>:
     e38:	mov	x2, x1
     e3c:	mov	w3, #0xfffffffe            	// #-2
     e40:	mov	x1, x0
     e44:	mov	w0, #0x0                   	// #0
     e48:	b	508 <delete_copyout.isra.0>

0000000000000e4c <acc_delete_async>:
     e4c:	mov	w3, w2
     e50:	mov	x2, x1
     e54:	mov	x1, x0
     e58:	mov	w0, #0x0                   	// #0
     e5c:	b	508 <delete_copyout.isra.0>

0000000000000e60 <acc_delete_finalize>:
     e60:	mov	x2, x1
     e64:	mov	w3, #0xfffffffe            	// #-2
     e68:	mov	x1, x0
     e6c:	mov	w0, #0x2                   	// #2
     e70:	b	508 <delete_copyout.isra.0>

0000000000000e74 <acc_delete_finalize_async>:
     e74:	mov	w3, w2
     e78:	mov	x2, x1
     e7c:	mov	x1, x0
     e80:	mov	w0, #0x2                   	// #2
     e84:	b	508 <delete_copyout.isra.0>

0000000000000e88 <acc_copyout>:
     e88:	mov	x2, x1
     e8c:	mov	w3, #0xfffffffe            	// #-2
     e90:	mov	x1, x0
     e94:	mov	w0, #0x1                   	// #1
     e98:	b	508 <delete_copyout.isra.0>

0000000000000e9c <acc_copyout_async>:
     e9c:	mov	w3, w2
     ea0:	mov	x2, x1
     ea4:	mov	x1, x0
     ea8:	mov	w0, #0x1                   	// #1
     eac:	b	508 <delete_copyout.isra.0>

0000000000000eb0 <acc_copyout_finalize>:
     eb0:	mov	x2, x1
     eb4:	mov	w3, #0xfffffffe            	// #-2
     eb8:	mov	x1, x0
     ebc:	mov	w0, #0x3                   	// #3
     ec0:	b	508 <delete_copyout.isra.0>

0000000000000ec4 <acc_copyout_finalize_async>:
     ec4:	mov	w3, w2
     ec8:	mov	x2, x1
     ecc:	mov	x1, x0
     ed0:	mov	w0, #0x3                   	// #3
     ed4:	b	508 <delete_copyout.isra.0>

0000000000000ed8 <acc_update_device>:
     ed8:	mov	x2, x1
     edc:	mov	w3, #0xfffffffe            	// #-2
     ee0:	mov	x1, x0
     ee4:	mov	w0, #0x1                   	// #1
     ee8:	b	1a0 <update_dev_host>

0000000000000eec <acc_update_device_async>:
     eec:	mov	w3, w2
     ef0:	mov	x2, x1
     ef4:	mov	x1, x0
     ef8:	mov	w0, #0x1                   	// #1
     efc:	b	1a0 <update_dev_host>

0000000000000f00 <acc_update_self>:
     f00:	mov	x2, x1
     f04:	mov	w3, #0xfffffffe            	// #-2
     f08:	mov	x1, x0
     f0c:	mov	w0, #0x0                   	// #0
     f10:	b	1a0 <update_dev_host>

0000000000000f14 <acc_update_self_async>:
     f14:	mov	w3, w2
     f18:	mov	x2, x1
     f1c:	mov	x1, x0
     f20:	mov	w0, #0x0                   	// #0
     f24:	b	1a0 <update_dev_host>

0000000000000f28 <gomp_acc_insert_pointer>:
     f28:	stp	x29, x30, [sp, #-80]!
     f2c:	mov	x29, sp
     f30:	stp	x19, x20, [sp, #16]
     f34:	mov	x19, x0
     f38:	adrp	x0, 0 <goacc_tls_data>
     f3c:	ldr	x0, [x0]
     f40:	stp	x21, x22, [sp, #32]
     f44:	mov	x21, x1
     f48:	mrs	x1, tpidr_el0
     f4c:	mov	x22, x2
     f50:	stp	x23, x24, [sp, #48]
     f54:	ldr	x0, [x1, x0]
     f58:	ldr	x1, [x2]
     f5c:	ldr	x20, [x0, #8]
     f60:	ldr	x0, [x21]
     f64:	add	x23, x20, #0xa8
     f68:	str	x25, [sp, #64]
     f6c:	mov	x25, x3
     f70:	bl	954 <acc_is_present>
     f74:	cbz	w0, 1030 <gomp_acc_insert_pointer+0x108>
     f78:	mov	x0, x23
     f7c:	bl	0 <gomp_mutex_lock>
     f80:	ldr	x1, [x21]
     f84:	mov	x0, x20
     f88:	ldr	x2, [x22]
     f8c:	bl	178 <lookup_host>
     f90:	mov	x20, x0
     f94:	mov	x0, x23
     f98:	bl	28 <gomp_mutex_unlock>
     f9c:	mov	x2, #0x0                   	// #0
     fa0:	ldr	x1, [x20, #16]
     fa4:	add	x1, x1, #0x40
     fa8:	ldur	x5, [x1, #-16]
     fac:	cmp	x5, x2
     fb0:	b.ne	fc0 <gomp_acc_insert_pointer+0x98>  // b.any
     fb4:	adrp	x0, 0 <gomp_mutex_lock>
     fb8:	add	x0, x0, #0x0
     fbc:	bl	0 <gomp_fatal>
     fc0:	lsl	x0, x2, #5
     fc4:	ldr	x0, [x1, x0]
     fc8:	cmp	x0, x20
     fcc:	b.ne	1028 <gomp_acc_insert_pointer+0x100>  // b.any
     fd0:	add	x19, x2, x19
     fd4:	cmp	x2, x19
     fd8:	b.ne	ff4 <gomp_acc_insert_pointer+0xcc>  // b.any
     fdc:	ldp	x19, x20, [sp, #16]
     fe0:	ldp	x21, x22, [sp, #32]
     fe4:	ldp	x23, x24, [sp, #48]
     fe8:	ldr	x25, [sp, #64]
     fec:	ldp	x29, x30, [sp], #80
     ff0:	ret
     ff4:	cmp	x2, x5
     ff8:	b.cs	1020 <gomp_acc_insert_pointer+0xf8>  // b.hs, b.nlast
     ffc:	lsl	x0, x2, #5
    1000:	ldr	x3, [x1, x0]
    1004:	cbz	x3, 1020 <gomp_acc_insert_pointer+0xf8>
    1008:	ldr	x4, [x3, #32]
    100c:	add	x4, x4, #0x1
    1010:	str	x4, [x3, #32]
    1014:	ldr	x4, [x3, #40]
    1018:	add	x4, x4, #0x1
    101c:	str	x4, [x3, #40]
    1020:	add	x2, x2, #0x1
    1024:	b	fd4 <gomp_acc_insert_pointer+0xac>
    1028:	add	x2, x2, #0x1
    102c:	b	fac <gomp_acc_insert_pointer+0x84>
    1030:	adrp	x24, 0 <gomp_debug_var>
    1034:	ldr	w1, [x24]
    1038:	cbz	w1, 1054 <gomp_acc_insert_pointer+0x12c>
    103c:	adrp	x2, 0 <gomp_mutex_lock>
    1040:	add	x2, x2, #0x0
    1044:	adrp	x1, 0 <gomp_mutex_lock>
    1048:	add	x2, x2, #0x96
    104c:	add	x1, x1, #0x0
    1050:	bl	0 <gomp_debug>
    1054:	mov	x1, x19
    1058:	mov	x5, x25
    105c:	mov	x4, x22
    1060:	mov	x2, x21
    1064:	mov	x0, x20
    1068:	mov	w7, #0x0                   	// #0
    106c:	mov	w6, #0x1                   	// #1
    1070:	mov	x3, #0x0                   	// #0
    1074:	bl	0 <gomp_map_vars>
    1078:	mov	x19, x0
    107c:	ldr	w0, [x24]
    1080:	cbz	w0, 10a0 <gomp_acc_insert_pointer+0x178>
    1084:	adrp	x2, 0 <gomp_mutex_lock>
    1088:	add	x2, x2, #0x0
    108c:	adrp	x1, 0 <gomp_mutex_lock>
    1090:	add	x2, x2, #0x96
    1094:	add	x1, x1, #0x0
    1098:	mov	w0, #0x0                   	// #0
    109c:	bl	0 <gomp_debug>
    10a0:	ldr	x0, [x19, #64]
    10a4:	mov	x1, #0x1                   	// #1
    10a8:	str	x1, [x0, #40]
    10ac:	mov	x0, x23
    10b0:	bl	0 <gomp_mutex_lock>
    10b4:	ldr	x0, [x20, #176]
    10b8:	ldp	x21, x22, [sp, #32]
    10bc:	ldr	x25, [sp, #64]
    10c0:	str	x0, [x19, #40]
    10c4:	mov	x0, x23
    10c8:	ldp	x23, x24, [sp, #48]
    10cc:	str	x19, [x20, #176]
    10d0:	ldp	x19, x20, [sp, #16]
    10d4:	ldp	x29, x30, [sp], #80
    10d8:	b	28 <gomp_mutex_unlock>

00000000000010dc <gomp_acc_remove_pointer>:
    10dc:	stp	x29, x30, [sp, #-96]!
    10e0:	cmp	w5, #0x1
    10e4:	mov	x29, sp
    10e8:	stp	x25, x26, [sp, #64]
    10ec:	and	w25, w2, #0xff
    10f0:	adrp	x2, 0 <goacc_tls_data>
    10f4:	ldr	x2, [x2]
    10f8:	stp	x23, x24, [sp, #48]
    10fc:	mov	w23, w3
    1100:	mrs	x3, tpidr_el0
    1104:	cset	w26, ne  // ne = any
    1108:	stp	x19, x20, [sp, #16]
    110c:	mov	x19, x0
    1110:	ldr	x2, [x3, x2]
    1114:	stp	x21, x22, [sp, #32]
    1118:	ldr	x24, [x2, #8]
    111c:	str	x27, [sp, #80]
    1120:	mov	w27, w4
    1124:	bl	954 <acc_is_present>
    1128:	cbz	w0, 12ec <gomp_acc_remove_pointer+0x210>
    112c:	add	x21, x24, #0xa8
    1130:	mov	x0, x21
    1134:	bl	0 <gomp_mutex_lock>
    1138:	mov	x1, x19
    113c:	mov	x0, x24
    1140:	mov	x2, #0x1                   	// #1
    1144:	bl	178 <lookup_host>
    1148:	mov	x20, x0
    114c:	cbnz	x0, 1168 <gomp_acc_remove_pointer+0x8c>
    1150:	mov	x0, x21
    1154:	bl	28 <gomp_mutex_unlock>
    1158:	adrp	x0, 0 <gomp_mutex_lock>
    115c:	mov	x1, x19
    1160:	add	x0, x0, #0x0
    1164:	bl	0 <gomp_fatal>
    1168:	adrp	x22, 0 <gomp_debug_var>
    116c:	add	w26, w26, #0x2
    1170:	ldr	w0, [x22]
    1174:	cbz	w0, 1194 <gomp_acc_remove_pointer+0xb8>
    1178:	adrp	x2, 0 <gomp_mutex_lock>
    117c:	add	x2, x2, #0x0
    1180:	adrp	x1, 0 <gomp_mutex_lock>
    1184:	add	x2, x2, #0xae
    1188:	add	x1, x1, #0x0
    118c:	mov	w0, #0x0                   	// #0
    1190:	bl	0 <gomp_debug>
    1194:	ldp	x0, x1, [x20, #32]
    1198:	ldr	x19, [x20, #16]
    119c:	cmp	x0, x1
    11a0:	b.cs	11b8 <gomp_acc_remove_pointer+0xdc>  // b.hs, b.nlast
    11a4:	mov	x0, x21
    11a8:	bl	28 <gomp_mutex_unlock>
    11ac:	adrp	x0, 0 <gomp_mutex_lock>
    11b0:	add	x0, x0, #0x0
    11b4:	bl	0 <gomp_fatal>
    11b8:	cbz	w27, 1200 <gomp_acc_remove_pointer+0x124>
    11bc:	sub	x0, x0, x1
    11c0:	stp	x0, xzr, [x20, #32]
    11c4:	mov	x0, x21
    11c8:	bl	28 <gomp_mutex_unlock>
    11cc:	ldr	x0, [x20, #32]
    11d0:	cbnz	x0, 1274 <gomp_acc_remove_pointer+0x198>
    11d4:	ldr	x1, [x19]
    11d8:	sxtw	x3, w26
    11dc:	cmp	x1, w26, sxtw
    11e0:	b.ne	122c <gomp_acc_remove_pointer+0x150>  // b.any
    11e4:	ldr	x19, [x24, #176]
    11e8:	mov	x1, #0x0                   	// #0
    11ec:	cbnz	x19, 1214 <gomp_acc_remove_pointer+0x138>
    11f0:	mov	x0, #0x1                   	// #1
    11f4:	str	x0, [x20, #32]
    11f8:	str	xzr, [x19]
    11fc:	brk	#0x3e8
    1200:	cbz	x1, 11c4 <gomp_acc_remove_pointer+0xe8>
    1204:	sub	x1, x1, #0x1
    1208:	sub	x0, x0, #0x1
    120c:	stp	x0, x1, [x20, #32]
    1210:	b	11c4 <gomp_acc_remove_pointer+0xe8>
    1214:	ldr	x4, [x20, #16]
    1218:	ldr	x2, [x19, #40]
    121c:	cmp	x4, x19
    1220:	b.ne	12c0 <gomp_acc_remove_pointer+0x1e4>  // b.any
    1224:	cbz	x1, 12b8 <gomp_acc_remove_pointer+0x1dc>
    1228:	str	x2, [x1, #40]
    122c:	mov	x1, #0x1                   	// #1
    1230:	str	x1, [x20, #32]
    1234:	ldr	x1, [x19, #48]
    1238:	add	x2, x19, #0x40
    123c:	str	x3, [x19]
    1240:	cmp	x1, x0
    1244:	b.eq	1260 <gomp_acc_remove_pointer+0x184>  // b.none
    1248:	lsl	x3, x0, #5
    124c:	ldr	x3, [x2, x3]
    1250:	cmp	x3, x20
    1254:	b.ne	12cc <gomp_acc_remove_pointer+0x1f0>  // b.any
    1258:	add	x0, x19, x0, lsl #5
    125c:	strb	w25, [x0, #72]
    1260:	cmn	w23, #0x1
    1264:	b.ge	12d4 <gomp_acc_remove_pointer+0x1f8>  // b.tcont
    1268:	mov	x0, x19
    126c:	mov	w1, #0x1                   	// #1
    1270:	bl	0 <gomp_unmap_vars>
    1274:	mov	x0, x21
    1278:	bl	28 <gomp_mutex_unlock>
    127c:	ldr	w0, [x22]
    1280:	cbz	w0, 12ec <gomp_acc_remove_pointer+0x210>
    1284:	ldp	x19, x20, [sp, #16]
    1288:	adrp	x2, 0 <gomp_mutex_lock>
    128c:	ldp	x21, x22, [sp, #32]
    1290:	add	x2, x2, #0x0
    1294:	ldp	x23, x24, [sp, #48]
    1298:	add	x2, x2, #0xae
    129c:	ldp	x25, x26, [sp, #64]
    12a0:	adrp	x1, 0 <gomp_mutex_lock>
    12a4:	ldr	x27, [sp, #80]
    12a8:	add	x1, x1, #0x0
    12ac:	ldp	x29, x30, [sp], #96
    12b0:	mov	w0, #0x0                   	// #0
    12b4:	b	0 <gomp_debug>
    12b8:	str	x2, [x24, #176]
    12bc:	b	122c <gomp_acc_remove_pointer+0x150>
    12c0:	mov	x1, x19
    12c4:	mov	x19, x2
    12c8:	b	11ec <gomp_acc_remove_pointer+0x110>
    12cc:	add	x0, x0, #0x1
    12d0:	b	1240 <gomp_acc_remove_pointer+0x164>
    12d4:	ldr	x0, [x19, #56]
    12d8:	mov	w1, w23
    12dc:	ldr	x2, [x0, #192]
    12e0:	mov	x0, x19
    12e4:	blr	x2
    12e8:	b	1274 <gomp_acc_remove_pointer+0x198>
    12ec:	ldp	x19, x20, [sp, #16]
    12f0:	ldp	x21, x22, [sp, #32]
    12f4:	ldp	x23, x24, [sp, #48]
    12f8:	ldp	x25, x26, [sp, #64]
    12fc:	ldr	x27, [sp, #80]
    1300:	ldp	x29, x30, [sp], #96
    1304:	ret

oacc-async.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <acc_async_test>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	add	w1, w0, #0x2
   8:	cmp	w1, #0x1
   c:	mov	x29, sp
  10:	b.ls	28 <acc_async_test+0x28>  // b.plast
  14:	tbz	w0, #31, 28 <acc_async_test+0x28>
  18:	mov	w1, w0
  1c:	adrp	x0, 0 <acc_async_test>
  20:	add	x0, x0, #0x0
  24:	bl	0 <gomp_fatal>
  28:	adrp	x1, 0 <goacc_tls_data>
  2c:	ldr	x1, [x1]
  30:	mrs	x2, tpidr_el0
  34:	ldr	x1, [x2, x1]
  38:	cbz	x1, 44 <acc_async_test+0x44>
  3c:	ldr	x1, [x1, #8]
  40:	cbnz	x1, 50 <acc_async_test+0x50>
  44:	adrp	x0, 0 <acc_async_test>
  48:	add	x0, x0, #0x0
  4c:	bl	0 <gomp_fatal>
  50:	ldp	x29, x30, [sp], #16
  54:	ldr	x1, [x1, #200]
  58:	mov	x16, x1
  5c:	br	x16

0000000000000060 <acc_async_test_all>:
  60:	adrp	x0, 0 <goacc_tls_data>
  64:	ldr	x0, [x0]
  68:	mrs	x1, tpidr_el0
  6c:	ldr	x0, [x1, x0]
  70:	cbz	x0, 7c <acc_async_test_all+0x1c>
  74:	ldr	x0, [x0, #8]
  78:	cbnz	x0, 90 <acc_async_test_all+0x30>
  7c:	stp	x29, x30, [sp, #-16]!
  80:	adrp	x0, 0 <acc_async_test>
  84:	add	x0, x0, #0x0
  88:	mov	x29, sp
  8c:	bl	0 <gomp_fatal>
  90:	ldr	x0, [x0, #208]
  94:	mov	x16, x0
  98:	br	x16

000000000000009c <acc_async_wait>:
  9c:	stp	x29, x30, [sp, #-16]!
  a0:	add	w1, w0, #0x2
  a4:	cmp	w1, #0x1
  a8:	mov	x29, sp
  ac:	b.ls	c4 <acc_async_wait+0x28>  // b.plast
  b0:	tbz	w0, #31, c4 <acc_async_wait+0x28>
  b4:	mov	w1, w0
  b8:	adrp	x0, 0 <acc_async_test>
  bc:	add	x0, x0, #0x0
  c0:	bl	0 <gomp_fatal>
  c4:	adrp	x1, 0 <goacc_tls_data>
  c8:	ldr	x1, [x1]
  cc:	mrs	x2, tpidr_el0
  d0:	ldr	x1, [x2, x1]
  d4:	cbz	x1, e0 <acc_async_wait+0x44>
  d8:	ldr	x1, [x1, #8]
  dc:	cbnz	x1, ec <acc_async_wait+0x50>
  e0:	adrp	x0, 0 <acc_async_test>
  e4:	add	x0, x0, #0x0
  e8:	bl	0 <gomp_fatal>
  ec:	ldp	x29, x30, [sp], #16
  f0:	ldr	x1, [x1, #216]
  f4:	mov	x16, x1
  f8:	br	x16

00000000000000fc <acc_wait_async>:
  fc:	adrp	x2, 0 <goacc_tls_data>
 100:	ldr	x2, [x2]
 104:	mrs	x3, tpidr_el0
 108:	ldr	x2, [x3, x2]
 10c:	cbz	x2, 118 <acc_wait_async+0x1c>
 110:	ldr	x2, [x2, #8]
 114:	cbnz	x2, 12c <acc_wait_async+0x30>
 118:	stp	x29, x30, [sp, #-16]!
 11c:	adrp	x0, 0 <acc_async_test>
 120:	add	x0, x0, #0x0
 124:	mov	x29, sp
 128:	bl	0 <gomp_fatal>
 12c:	ldr	x2, [x2, #224]
 130:	mov	x16, x2
 134:	br	x16

0000000000000138 <acc_async_wait_all>:
 138:	adrp	x0, 0 <goacc_tls_data>
 13c:	ldr	x0, [x0]
 140:	mrs	x1, tpidr_el0
 144:	ldr	x0, [x1, x0]
 148:	cbz	x0, 154 <acc_async_wait_all+0x1c>
 14c:	ldr	x0, [x0, #8]
 150:	cbnz	x0, 168 <acc_async_wait_all+0x30>
 154:	stp	x29, x30, [sp, #-16]!
 158:	adrp	x0, 0 <acc_async_test>
 15c:	add	x0, x0, #0x0
 160:	mov	x29, sp
 164:	bl	0 <gomp_fatal>
 168:	ldr	x0, [x0, #232]
 16c:	mov	x16, x0
 170:	br	x16

0000000000000174 <acc_wait_all_async>:
 174:	stp	x29, x30, [sp, #-16]!
 178:	add	w1, w0, #0x2
 17c:	cmp	w1, #0x1
 180:	mov	x29, sp
 184:	b.ls	19c <acc_wait_all_async+0x28>  // b.plast
 188:	tbz	w0, #31, 19c <acc_wait_all_async+0x28>
 18c:	mov	w1, w0
 190:	adrp	x0, 0 <acc_async_test>
 194:	add	x0, x0, #0x0
 198:	bl	0 <gomp_fatal>
 19c:	adrp	x1, 0 <goacc_tls_data>
 1a0:	ldr	x1, [x1]
 1a4:	mrs	x2, tpidr_el0
 1a8:	ldr	x1, [x2, x1]
 1ac:	cbz	x1, 1b8 <acc_wait_all_async+0x44>
 1b0:	ldr	x1, [x1, #8]
 1b4:	cbnz	x1, 1c4 <acc_wait_all_async+0x50>
 1b8:	adrp	x0, 0 <acc_async_test>
 1bc:	add	x0, x0, #0x0
 1c0:	bl	0 <gomp_fatal>
 1c4:	ldp	x29, x30, [sp], #16
 1c8:	ldr	x1, [x1, #240]
 1cc:	mov	x16, x1
 1d0:	br	x16

oacc-plugin.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_PLUGIN_async_unmap_vars>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	w0, w1
  14:	ldr	x20, [x19, #56]
  18:	ldr	x2, [x20, #248]
  1c:	blr	x2
  20:	mov	x0, x19
  24:	mov	w1, #0x1                   	// #1
  28:	bl	0 <gomp_unmap_vars>
  2c:	ldr	x1, [x20, #248]
  30:	mov	w0, #0xfffffffe            	// #-2
  34:	ldp	x19, x20, [sp, #16]
  38:	mov	x16, x1
  3c:	ldp	x29, x30, [sp], #32
  40:	br	x16

0000000000000044 <GOMP_PLUGIN_acc_thread>:
  44:	adrp	x0, 0 <goacc_tls_data>
  48:	ldr	x0, [x0]
  4c:	mrs	x1, tpidr_el0
  50:	ldr	x0, [x1, x0]
  54:	cbz	x0, 5c <GOMP_PLUGIN_acc_thread+0x18>
  58:	ldr	x0, [x0, #40]
  5c:	ret

0000000000000060 <GOMP_PLUGIN_acc_default_dim>:
  60:	mov	w1, w0
  64:	cmp	w0, #0x2
  68:	b.ls	80 <GOMP_PLUGIN_acc_default_dim+0x20>  // b.plast
  6c:	stp	x29, x30, [sp, #-16]!
  70:	adrp	x0, 0 <GOMP_PLUGIN_async_unmap_vars>
  74:	add	x0, x0, #0x0
  78:	mov	x29, sp
  7c:	bl	0 <gomp_fatal>
  80:	adrp	x0, 0 <goacc_default_dims>
  84:	add	x0, x0, #0x0
  88:	ldr	w0, [x0, w1, uxtw #2]
  8c:	ret

oacc-cuda.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <acc_get_current_cuda_device>:
   0:	adrp	x0, 0 <goacc_tls_data>
   4:	ldr	x0, [x0]
   8:	mrs	x1, tpidr_el0
   c:	ldr	x0, [x1, x0]
  10:	cbz	x0, 2c <acc_get_current_cuda_device+0x2c>
  14:	ldr	x0, [x0, #8]
  18:	cbz	x0, 2c <acc_get_current_cuda_device+0x2c>
  1c:	ldr	x0, [x0, #272]
  20:	cbz	x0, 2c <acc_get_current_cuda_device+0x2c>
  24:	mov	x16, x0
  28:	br	x16
  2c:	mov	x0, #0x0                   	// #0
  30:	ret

0000000000000034 <acc_get_current_cuda_context>:
  34:	adrp	x0, 0 <goacc_tls_data>
  38:	ldr	x0, [x0]
  3c:	mrs	x1, tpidr_el0
  40:	ldr	x0, [x1, x0]
  44:	cbz	x0, 60 <acc_get_current_cuda_context+0x2c>
  48:	ldr	x0, [x0, #8]
  4c:	cbz	x0, 60 <acc_get_current_cuda_context+0x2c>
  50:	ldr	x0, [x0, #280]
  54:	cbz	x0, 60 <acc_get_current_cuda_context+0x2c>
  58:	mov	x16, x0
  5c:	br	x16
  60:	mov	x0, #0x0                   	// #0
  64:	ret

0000000000000068 <acc_get_cuda_stream>:
  68:	adrp	x1, 0 <goacc_tls_data>
  6c:	ldr	x1, [x1]
  70:	mrs	x2, tpidr_el0
  74:	ldr	x1, [x2, x1]
  78:	add	w2, w0, #0x2
  7c:	cmp	w2, #0x1
  80:	b.ls	88 <acc_get_cuda_stream+0x20>  // b.plast
  84:	tbnz	w0, #31, a4 <acc_get_cuda_stream+0x3c>
  88:	cbz	x1, a4 <acc_get_cuda_stream+0x3c>
  8c:	ldr	x1, [x1, #8]
  90:	cbz	x1, a4 <acc_get_cuda_stream+0x3c>
  94:	ldr	x1, [x1, #288]
  98:	cbz	x1, a4 <acc_get_cuda_stream+0x3c>
  9c:	mov	x16, x1
  a0:	br	x16
  a4:	mov	x0, #0x0                   	// #0
  a8:	ret

00000000000000ac <acc_set_cuda_stream>:
  ac:	stp	x29, x30, [sp, #-32]!
  b0:	mov	x29, sp
  b4:	stp	x19, x20, [sp, #16]
  b8:	mov	w19, w0
  bc:	add	w0, w0, #0x2
  c0:	mov	x20, x1
  c4:	cmp	w0, #0x1
  c8:	b.ls	d0 <acc_set_cuda_stream+0x24>  // b.plast
  cc:	tbnz	w19, #31, 114 <acc_set_cuda_stream+0x68>
  d0:	cbz	x20, 114 <acc_set_cuda_stream+0x68>
  d4:	bl	0 <goacc_lazy_initialize>
  d8:	adrp	x0, 0 <goacc_tls_data>
  dc:	ldr	x0, [x0]
  e0:	mrs	x1, tpidr_el0
  e4:	ldr	x0, [x1, x0]
  e8:	cbz	x0, 124 <acc_set_cuda_stream+0x78>
  ec:	ldr	x0, [x0, #8]
  f0:	cbz	x0, 124 <acc_set_cuda_stream+0x78>
  f4:	ldr	x2, [x0, #296]
  f8:	cbz	x2, 124 <acc_set_cuda_stream+0x78>
  fc:	mov	x1, x20
 100:	mov	w0, w19
 104:	ldp	x19, x20, [sp, #16]
 108:	mov	x16, x2
 10c:	ldp	x29, x30, [sp], #32
 110:	br	x16
 114:	mov	w0, #0x0                   	// #0
 118:	ldp	x19, x20, [sp, #16]
 11c:	ldp	x29, x30, [sp], #32
 120:	ret
 124:	mov	w0, #0xffffffff            	// #-1
 128:	b	118 <acc_set_cuda_stream+0x6c>

priority_queue.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <priority_tree_next_task_1>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	sxtw	x20, w0
  10:	mov	x19, x1
  14:	str	x21, [sp, #32]
  18:	mov	x21, x20
  1c:	add	x20, x20, #0x6
  20:	neg	x20, x20, lsl #4
  24:	cbz	x19, 54 <priority_tree_next_task_1+0x54>
  28:	ldr	x1, [x19, #32]
  2c:	mov	w0, w21
  30:	bl	0 <priority_tree_next_task_1>
  34:	cbnz	x0, 58 <priority_tree_next_task_1+0x58>
  38:	ldr	x2, [x19, #8]
  3c:	add	x0, x2, x20
  40:	ldr	w1, [x0, #200]
  44:	cmp	w1, #0x2
  48:	b.eq	58 <priority_tree_next_task_1+0x58>  // b.none
  4c:	ldr	x19, [x19, #24]
  50:	b	24 <priority_tree_next_task_1+0x24>
  54:	mov	x0, #0x0                   	// #0
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldr	x21, [sp, #32]
  60:	ldp	x29, x30, [sp], #48
  64:	ret

0000000000000068 <splay_tree_foreach_internal>:
  68:	stp	x29, x30, [sp, #-48]!
  6c:	mov	x29, sp
  70:	stp	x19, x20, [sp, #16]
  74:	mov	x19, x0
  78:	mov	x20, x1
  7c:	str	x21, [sp, #32]
  80:	mov	x21, x2
  84:	cbz	x19, ac <splay_tree_foreach_internal+0x44>
  88:	mov	x0, x19
  8c:	mov	x1, x21
  90:	blr	x20
  94:	ldr	x0, [x19, #24]
  98:	mov	x2, x21
  9c:	mov	x1, x20
  a0:	bl	68 <splay_tree_foreach_internal>
  a4:	ldr	x19, [x19, #32]
  a8:	b	84 <splay_tree_foreach_internal+0x1c>
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldr	x21, [sp, #32]
  b4:	ldp	x29, x30, [sp], #48
  b8:	ret

00000000000000bc <splay_tree_splay.part.0>:
  bc:	ldr	w5, [x1]
  c0:	mov	w8, #0xffffffff            	// #-1
  c4:	mov	w9, #0x1                   	// #1
  c8:	ldr	x2, [x0]
  cc:	ldr	w1, [x2]
  d0:	cmp	w5, w1
  d4:	b.eq	10c <splay_tree_splay.part.0+0x50>  // b.none
  d8:	ldp	x1, x3, [x2, #24]
  dc:	csel	w4, w8, w9, lt  // lt = tstop
  e0:	csel	x1, x1, x3, lt  // lt = tstop
  e4:	cbz	x1, 10c <splay_tree_splay.part.0+0x50>
  e8:	ldr	w3, [x1]
  ec:	cmp	w5, w3
  f0:	b.ne	110 <splay_tree_splay.part.0+0x54>  // b.any
  f4:	cmn	w4, #0x1
  f8:	b.ne	15c <splay_tree_splay.part.0+0xa0>  // b.any
  fc:	ldr	x3, [x1, #32]
 100:	str	x2, [x1, #32]
 104:	str	x3, [x2, #24]
 108:	str	x1, [x0]
 10c:	ret
 110:	b.ge	1ec <splay_tree_splay.part.0+0x130>  // b.tcont
 114:	ldr	x3, [x1, #24]
 118:	cbz	x3, f4 <splay_tree_splay.part.0+0x38>
 11c:	mov	w3, #0xffffffff            	// #-1
 120:	lsr	w7, w4, #31
 124:	lsr	w6, w3, #31
 128:	cmp	w7, #0x0
 12c:	ccmp	w6, #0x0, #0x4, ne  // ne = any
 130:	b.eq	16c <splay_tree_splay.part.0+0xb0>  // b.none
 134:	ldr	x3, [x1, #24]
 138:	ldr	x4, [x3, #32]
 13c:	str	x1, [x3, #32]
 140:	str	x4, [x1, #24]
 144:	str	x3, [x2, #24]
 148:	ldr	x1, [x3, #32]
 14c:	str	x2, [x3, #32]
 150:	str	x1, [x2, #24]
 154:	str	x3, [x0]
 158:	b	c8 <splay_tree_splay.part.0+0xc>
 15c:	ldr	x3, [x1, #24]
 160:	str	x2, [x1, #24]
 164:	str	x3, [x2, #32]
 168:	b	108 <splay_tree_splay.part.0+0x4c>
 16c:	cmp	w4, #0x0
 170:	cset	w4, gt
 174:	cmp	w3, #0x0
 178:	cset	w3, gt
 17c:	cmp	w4, #0x0
 180:	ccmp	w3, #0x0, #0x4, ne  // ne = any
 184:	b.eq	1ac <splay_tree_splay.part.0+0xf0>  // b.none
 188:	ldr	x3, [x1, #32]
 18c:	ldr	x4, [x3, #24]
 190:	str	x1, [x3, #24]
 194:	str	x4, [x1, #32]
 198:	str	x3, [x2, #32]
 19c:	ldr	x1, [x3, #24]
 1a0:	str	x2, [x3, #24]
 1a4:	str	x1, [x2, #32]
 1a8:	b	154 <splay_tree_splay.part.0+0x98>
 1ac:	cmp	w7, #0x0
 1b0:	ccmp	w3, #0x0, #0x4, ne  // ne = any
 1b4:	b.eq	1cc <splay_tree_splay.part.0+0x110>  // b.none
 1b8:	ldr	x3, [x1, #32]
 1bc:	ldr	x4, [x3, #24]
 1c0:	str	x1, [x3, #24]
 1c4:	str	x4, [x1, #32]
 1c8:	b	144 <splay_tree_splay.part.0+0x88>
 1cc:	cmp	w6, #0x0
 1d0:	ccmp	w4, #0x0, #0x4, ne  // ne = any
 1d4:	b.eq	c8 <splay_tree_splay.part.0+0xc>  // b.none
 1d8:	ldr	x3, [x1, #24]
 1dc:	ldr	x4, [x3, #32]
 1e0:	str	x1, [x3, #32]
 1e4:	str	x4, [x1, #24]
 1e8:	b	198 <splay_tree_splay.part.0+0xdc>
 1ec:	ldr	x3, [x1, #32]
 1f0:	cbz	x3, f4 <splay_tree_splay.part.0+0x38>
 1f4:	mov	w3, #0x1                   	// #1
 1f8:	b	120 <splay_tree_splay.part.0+0x64>

00000000000001fc <priority_tree_next_task>:
 1fc:	stp	x29, x30, [sp, #-16]!
 200:	mov	w6, w2
 204:	mov	x29, sp
 208:	ldr	x1, [x1]
 20c:	bl	0 <priority_tree_next_task_1>
 210:	cmp	x0, #0x0
 214:	mov	x5, x0
 218:	ccmp	x3, #0x0, #0x4, ne  // ne = any
 21c:	b.ne	22c <priority_tree_next_task+0x30>  // b.any
 220:	mov	w0, #0x1                   	// #1
 224:	strb	w0, [x4]
 228:	b	258 <priority_tree_next_task+0x5c>
 22c:	ldr	x1, [x3]
 230:	mov	w0, w6
 234:	bl	0 <priority_tree_next_task_1>
 238:	cbz	x0, 220 <priority_tree_next_task+0x24>
 23c:	ldr	w1, [x0, #88]
 240:	ldr	w2, [x5, #88]
 244:	cmp	w2, w1
 248:	b.gt	220 <priority_tree_next_task+0x24>
 24c:	b.ge	264 <priority_tree_next_task+0x68>  // b.tcont
 250:	mov	x5, x0
 254:	strb	wzr, [x4]
 258:	mov	x0, x5
 25c:	ldp	x29, x30, [sp], #16
 260:	ret
 264:	ldrb	w1, [x0, #207]
 268:	cbz	w1, 220 <priority_tree_next_task+0x24>
 26c:	ldrb	w1, [x5, #207]
 270:	cbnz	w1, 220 <priority_tree_next_task+0x24>
 274:	b	250 <priority_tree_next_task+0x54>

0000000000000278 <prio_splay_tree_insert>:
 278:	stp	x29, x30, [sp, #-16]!
 27c:	mov	x11, x0
 280:	mov	x10, x1
 284:	mov	x29, sp
 288:	ldr	x2, [x0]
 28c:	cbz	x2, 294 <prio_splay_tree_insert+0x1c>
 290:	bl	bc <splay_tree_splay.part.0>
 294:	ldr	x1, [x11]
 298:	cbz	x1, 2e4 <prio_splay_tree_insert+0x6c>
 29c:	ldr	w2, [x1]
 2a0:	ldr	w0, [x10]
 2a4:	cmp	w2, w0
 2a8:	b.eq	2c8 <prio_splay_tree_insert+0x50>  // b.none
 2ac:	b.lt	2d4 <prio_splay_tree_insert+0x5c>  // b.tstop
 2b0:	ldr	x0, [x1, #24]
 2b4:	stp	x0, x1, [x10, #24]
 2b8:	str	xzr, [x1, #24]
 2bc:	ldp	x29, x30, [sp], #16
 2c0:	str	x10, [x11]
 2c4:	ret
 2c8:	adrp	x0, 0 <priority_tree_next_task_1>
 2cc:	add	x0, x0, #0x0
 2d0:	bl	0 <gomp_fatal>
 2d4:	ldr	x0, [x1, #32]
 2d8:	stp	x1, x0, [x10, #24]
 2dc:	str	xzr, [x1, #32]
 2e0:	b	2bc <prio_splay_tree_insert+0x44>
 2e4:	stp	xzr, xzr, [x10, #24]
 2e8:	b	2bc <prio_splay_tree_insert+0x44>

00000000000002ec <prio_splay_tree_remove>:
 2ec:	ldr	x2, [x0]
 2f0:	mov	x10, x0
 2f4:	mov	x11, x1
 2f8:	cbz	x2, 350 <prio_splay_tree_remove+0x64>
 2fc:	stp	x29, x30, [sp, #-16]!
 300:	mov	x29, sp
 304:	bl	bc <splay_tree_splay.part.0>
 308:	ldr	x2, [x0]
 30c:	cbz	x2, 340 <prio_splay_tree_remove+0x54>
 310:	ldr	w1, [x2]
 314:	ldr	w0, [x11]
 318:	cmp	w1, w0
 31c:	b.ne	340 <prio_splay_tree_remove+0x54>  // b.any
 320:	ldp	x0, x1, [x2, #24]
 324:	cbz	x0, 348 <prio_splay_tree_remove+0x5c>
 328:	str	x0, [x10]
 32c:	cbz	x1, 340 <prio_splay_tree_remove+0x54>
 330:	mov	x2, x0
 334:	ldr	x0, [x0, #32]
 338:	cbnz	x0, 330 <prio_splay_tree_remove+0x44>
 33c:	str	x1, [x2, #32]
 340:	ldp	x29, x30, [sp], #16
 344:	ret
 348:	str	x1, [x10]
 34c:	b	340 <prio_splay_tree_remove+0x54>
 350:	ldr	x2, [x0]
 354:	cbz	x2, 394 <prio_splay_tree_remove+0xa8>
 358:	ldr	w1, [x2]
 35c:	ldr	w0, [x11]
 360:	cmp	w1, w0
 364:	b.ne	394 <prio_splay_tree_remove+0xa8>  // b.any
 368:	ldp	x0, x1, [x2, #24]
 36c:	cbz	x0, 38c <prio_splay_tree_remove+0xa0>
 370:	str	x0, [x10]
 374:	cbz	x1, 394 <prio_splay_tree_remove+0xa8>
 378:	mov	x2, x0
 37c:	ldr	x0, [x0, #32]
 380:	cbnz	x0, 378 <prio_splay_tree_remove+0x8c>
 384:	str	x1, [x2, #32]
 388:	ret
 38c:	str	x1, [x10]
 390:	ret
 394:	ret

0000000000000398 <prio_splay_tree_lookup>:
 398:	ldr	x2, [x0]
 39c:	mov	x11, x1
 3a0:	cbz	x2, 3d0 <prio_splay_tree_lookup+0x38>
 3a4:	stp	x29, x30, [sp, #-16]!
 3a8:	mov	x29, sp
 3ac:	bl	bc <splay_tree_splay.part.0>
 3b0:	ldr	x0, [x0]
 3b4:	cbz	x0, 3c8 <prio_splay_tree_lookup+0x30>
 3b8:	ldr	w2, [x0]
 3bc:	ldr	w1, [x11]
 3c0:	cmp	w2, w1
 3c4:	csel	x0, x0, xzr, eq  // eq = none
 3c8:	ldp	x29, x30, [sp], #16
 3cc:	ret
 3d0:	ldr	x0, [x0]
 3d4:	cbz	x0, 3ec <prio_splay_tree_lookup+0x54>
 3d8:	ldr	w2, [x0]
 3dc:	ldr	w1, [x1]
 3e0:	cmp	w2, w1
 3e4:	csel	x0, x0, xzr, eq  // eq = none
 3e8:	ret
 3ec:	ret

00000000000003f0 <priority_tree_remove>:
 3f0:	mov	x13, x1
 3f4:	sub	x0, x2, w0, sxtw #4
 3f8:	mov	x10, x2
 3fc:	ldur	w1, [x0, #-8]
 400:	ldr	x0, [x13]
 404:	cbz	x0, 46c <priority_tree_remove+0x7c>
 408:	stp	x29, x30, [sp, #-48]!
 40c:	mov	x0, x13
 410:	mov	x29, sp
 414:	str	w1, [sp, #24]
 418:	add	x1, sp, #0x18
 41c:	bl	398 <prio_splay_tree_lookup>
 420:	mov	x12, x0
 424:	ldp	x0, x1, [x10]
 428:	str	x0, [x1]
 42c:	str	x1, [x0, #8]
 430:	ldr	x1, [x12, #8]
 434:	cmp	x10, x1
 438:	b.ne	448 <priority_tree_remove+0x58>  // b.any
 43c:	cmp	x10, x0
 440:	b.eq	450 <priority_tree_remove+0x60>  // b.none
 444:	str	x0, [x12, #8]
 448:	ldp	x29, x30, [sp], #48
 44c:	ret
 450:	mov	x1, x12
 454:	str	xzr, [x12, #8]
 458:	mov	x0, x13
 45c:	bl	2ec <prio_splay_tree_remove>
 460:	mov	x0, x12
 464:	bl	0 <free>
 468:	b	448 <priority_tree_remove+0x58>
 46c:	ldp	x1, x2, [x2]
 470:	str	x1, [x2]
 474:	str	x2, [x1, #8]
 478:	ldr	x0, [x0, #8]
 47c:	brk	#0x3e8

0000000000000480 <prio_splay_tree_foreach>:
 480:	ldr	x0, [x0]
 484:	b	68 <splay_tree_foreach_internal>

affinity-fmt.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_display_repeat>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	cmp	x1, #0x0
   8:	mov	x5, x1
   c:	mov	x29, sp
  10:	str	x21, [sp, #32]
  14:	ldr	x21, [x2]
  18:	stp	x19, x20, [sp, #16]
  1c:	mov	x20, x2
  20:	mov	x19, x4
  24:	ccmp	x21, x1, #0x2, ne  // ne = any
  28:	b.cs	44 <gomp_display_repeat+0x44>  // b.hs, b.nlast
  2c:	sub	x5, x5, x21
  30:	and	w1, w3, #0xff
  34:	cmp	x5, x4
  38:	add	x0, x0, x21
  3c:	csel	x2, x5, x4, ls  // ls = plast
  40:	bl	0 <memset>
  44:	ldr	x4, [x20]
  48:	add	x19, x19, x4
  4c:	str	x19, [x20]
  50:	cmp	x19, x21
  54:	b.cs	64 <gomp_display_repeat+0x64>  // b.hs, b.nlast
  58:	adrp	x0, 0 <gomp_display_repeat>
  5c:	add	x0, x0, #0x0
  60:	bl	0 <gomp_fatal>
  64:	ldp	x19, x20, [sp, #16]
  68:	ldr	x21, [sp, #32]
  6c:	ldp	x29, x30, [sp], #48
  70:	ret

0000000000000074 <gomp_print_string>:
  74:	adrp	x2, 0 <stderr>
  78:	ldr	x3, [x2]
  7c:	mov	x2, x1
  80:	mov	x1, #0x1                   	// #1
  84:	b	0 <fwrite>

0000000000000088 <gomp_set_affinity_format>:
  88:	stp	x29, x30, [sp, #-64]!
  8c:	mov	x29, sp
  90:	stp	x19, x20, [sp, #16]
  94:	mov	x19, x1
  98:	adrp	x1, 0 <gomp_affinity_format_len>
  9c:	stp	x21, x22, [sp, #32]
  a0:	mov	x22, x0
  a4:	adrp	x20, 0 <gomp_affinity_format_var>
  a8:	ldr	x0, [x1]
  ac:	str	x23, [sp, #48]
  b0:	cmp	x0, x19
  b4:	b.ls	e4 <gomp_set_affinity_format+0x5c>  // b.plast
  b8:	ldr	x0, [x20]
  bc:	mov	x2, x19
  c0:	mov	x1, x22
  c4:	bl	0 <memcpy>
  c8:	ldr	x0, [x20]
  cc:	strb	wzr, [x0, x19]
  d0:	ldp	x19, x20, [sp, #16]
  d4:	ldp	x21, x22, [sp, #32]
  d8:	ldr	x23, [sp, #48]
  dc:	ldp	x29, x30, [sp], #64
  e0:	ret
  e4:	mov	x21, x1
  e8:	add	x23, x19, #0x1
  ec:	cbz	x0, 114 <gomp_set_affinity_format+0x8c>
  f0:	ldr	x0, [x20]
  f4:	mov	x1, x23
  f8:	bl	0 <gomp_realloc>
  fc:	mov	x2, x19
 100:	mov	x1, x22
 104:	bl	0 <memcpy>
 108:	str	x23, [x21]
 10c:	str	x0, [x20]
 110:	b	c8 <gomp_set_affinity_format+0x40>
 114:	mov	x0, x23
 118:	bl	0 <gomp_malloc>
 11c:	b	fc <gomp_set_affinity_format+0x74>

0000000000000120 <omp_set_affinity_format>:
 120:	stp	x29, x30, [sp, #-32]!
 124:	mov	x29, sp
 128:	str	x19, [sp, #16]
 12c:	mov	x19, x0
 130:	bl	0 <strlen>
 134:	mov	x1, x0
 138:	mov	x0, x19
 13c:	ldr	x19, [sp, #16]
 140:	ldp	x29, x30, [sp], #32
 144:	b	88 <gomp_set_affinity_format>

0000000000000148 <omp_get_affinity_format>:
 148:	stp	x29, x30, [sp, #-48]!
 14c:	mov	x29, sp
 150:	stp	x21, x22, [sp, #32]
 154:	mov	x21, x0
 158:	adrp	x0, 0 <gomp_affinity_format_var>
 15c:	stp	x19, x20, [sp, #16]
 160:	mov	x19, x1
 164:	ldr	x22, [x0]
 168:	mov	x0, x22
 16c:	bl	0 <strlen>
 170:	mov	x20, x0
 174:	cbz	x19, 190 <omp_get_affinity_format+0x48>
 178:	cmp	x0, x19
 17c:	b.cs	1a4 <omp_get_affinity_format+0x5c>  // b.hs, b.nlast
 180:	add	x2, x0, #0x1
 184:	mov	x1, x22
 188:	mov	x0, x21
 18c:	bl	0 <memcpy>
 190:	mov	x0, x20
 194:	ldp	x19, x20, [sp, #16]
 198:	ldp	x21, x22, [sp, #32]
 19c:	ldp	x29, x30, [sp], #48
 1a0:	ret
 1a4:	sub	x19, x19, #0x1
 1a8:	mov	x1, x22
 1ac:	mov	x2, x19
 1b0:	mov	x0, x21
 1b4:	bl	0 <memcpy>
 1b8:	strb	wzr, [x21, x19]
 1bc:	b	190 <omp_get_affinity_format+0x48>

00000000000001c0 <gomp_display_string>:
 1c0:	stp	x29, x30, [sp, #-48]!
 1c4:	cmp	x1, #0x0
 1c8:	mov	x5, x1
 1cc:	mov	x29, sp
 1d0:	str	x21, [sp, #32]
 1d4:	ldr	x21, [x2]
 1d8:	stp	x19, x20, [sp, #16]
 1dc:	mov	x20, x2
 1e0:	mov	x19, x4
 1e4:	ccmp	x21, x1, #0x2, ne  // ne = any
 1e8:	b.cs	204 <gomp_display_string+0x44>  // b.hs, b.nlast
 1ec:	sub	x5, x5, x21
 1f0:	mov	x1, x3
 1f4:	cmp	x5, x4
 1f8:	add	x0, x0, x21
 1fc:	csel	x2, x5, x4, ls  // ls = plast
 200:	bl	0 <memcpy>
 204:	ldr	x4, [x20]
 208:	add	x19, x19, x4
 20c:	str	x19, [x20]
 210:	cmp	x19, x21
 214:	b.cs	224 <gomp_display_string+0x64>  // b.hs, b.nlast
 218:	adrp	x0, 0 <gomp_display_repeat>
 21c:	add	x0, x0, #0x0
 220:	bl	0 <gomp_fatal>
 224:	ldp	x19, x20, [sp, #16]
 228:	ldr	x21, [sp, #32]
 22c:	ldp	x29, x30, [sp], #48
 230:	ret

0000000000000234 <gomp_display_string_len>:
 234:	stp	x29, x30, [sp, #-64]!
 238:	cmp	x4, x6
 23c:	ccmn	x4, #0x1, #0x4, hi  // hi = pmore
 240:	mov	x29, sp
 244:	stp	x19, x20, [sp, #16]
 248:	mov	x20, x6
 24c:	stp	x21, x22, [sp, #32]
 250:	mov	x21, x5
 254:	stp	x23, x24, [sp, #48]
 258:	b.ne	278 <gomp_display_string_len+0x44>  // b.any
 25c:	mov	x4, x6
 260:	mov	x3, x5
 264:	ldp	x19, x20, [sp, #16]
 268:	ldp	x21, x22, [sp, #32]
 26c:	ldp	x23, x24, [sp, #48]
 270:	ldp	x29, x30, [sp], #64
 274:	b	1c0 <gomp_display_string>
 278:	mov	x22, x0
 27c:	mov	x23, x1
 280:	mov	x24, x2
 284:	and	w3, w3, #0xff
 288:	sub	x19, x4, x6
 28c:	cbz	w3, 2b4 <gomp_display_string_len+0x80>
 290:	mov	x4, x19
 294:	mov	w3, #0x20                  	// #32
 298:	bl	0 <gomp_display_repeat>
 29c:	mov	x4, x20
 2a0:	mov	x3, x21
 2a4:	mov	x2, x24
 2a8:	mov	x1, x23
 2ac:	mov	x0, x22
 2b0:	b	264 <gomp_display_string_len+0x30>
 2b4:	mov	x4, x6
 2b8:	mov	x3, x5
 2bc:	bl	1c0 <gomp_display_string>
 2c0:	mov	x4, x19
 2c4:	mov	x2, x24
 2c8:	mov	x1, x23
 2cc:	mov	x0, x22
 2d0:	ldp	x19, x20, [sp, #16]
 2d4:	mov	w3, #0x20                  	// #32
 2d8:	ldp	x21, x22, [sp, #32]
 2dc:	ldp	x23, x24, [sp, #48]
 2e0:	ldp	x29, x30, [sp], #64
 2e4:	b	0 <gomp_display_repeat>

00000000000002e8 <gomp_display_num>:
 2e8:	stp	x29, x30, [sp, #-80]!
 2ec:	mov	x29, sp
 2f0:	stp	x23, x24, [sp, #48]
 2f4:	mov	x24, x5
 2f8:	stp	x19, x20, [sp, #16]
 2fc:	mov	x20, x0
 300:	mov	x19, x6
 304:	mov	x0, x6
 308:	stp	x21, x22, [sp, #32]
 30c:	mov	x21, x1
 310:	mov	x22, x2
 314:	stp	x25, x26, [sp, #64]
 318:	and	w26, w3, #0xff
 31c:	and	w25, w4, #0xff
 320:	bl	0 <strlen>
 324:	cmp	x0, x24
 328:	mov	x23, x0
 32c:	ccmn	x24, #0x1, #0x4, cc  // cc = lo, ul, last
 330:	b.ne	340 <gomp_display_num+0x58>  // b.any
 334:	mov	x4, x23
 338:	mov	x3, x19
 33c:	b	398 <gomp_display_num+0xb0>
 340:	sub	x24, x24, x0
 344:	cbz	w26, 3f8 <gomp_display_num+0x110>
 348:	ldrb	w0, [x19]
 34c:	cmp	w0, #0x2d
 350:	b.ne	3bc <gomp_display_num+0xd4>  // b.any
 354:	mov	x4, #0x1                   	// #1
 358:	mov	x3, x19
 35c:	mov	x2, x22
 360:	mov	x1, x21
 364:	mov	x0, x20
 368:	bl	1c0 <gomp_display_string>
 36c:	mov	x0, x20
 370:	mov	x4, x24
 374:	mov	x2, x22
 378:	mov	x1, x21
 37c:	mov	w3, #0x30                  	// #48
 380:	bl	0 <gomp_display_repeat>
 384:	ldrb	w0, [x19]
 388:	cmp	w0, #0x2d
 38c:	b.ne	3d8 <gomp_display_num+0xf0>  // b.any
 390:	sub	x4, x23, #0x1
 394:	add	x3, x19, #0x1
 398:	mov	x2, x22
 39c:	mov	x1, x21
 3a0:	mov	x0, x20
 3a4:	ldp	x19, x20, [sp, #16]
 3a8:	ldp	x21, x22, [sp, #32]
 3ac:	ldp	x23, x24, [sp, #48]
 3b0:	ldp	x25, x26, [sp, #64]
 3b4:	ldp	x29, x30, [sp], #80
 3b8:	b	1c0 <gomp_display_string>
 3bc:	cmp	w0, #0x30
 3c0:	b.ne	36c <gomp_display_num+0x84>  // b.any
 3c4:	ldrb	w0, [x19, #1]
 3c8:	cmp	w0, #0x78
 3cc:	b.ne	36c <gomp_display_num+0x84>  // b.any
 3d0:	mov	x4, #0x2                   	// #2
 3d4:	b	358 <gomp_display_num+0x70>
 3d8:	cmp	w0, #0x30
 3dc:	b.ne	334 <gomp_display_num+0x4c>  // b.any
 3e0:	ldrb	w0, [x19, #1]
 3e4:	cmp	w0, #0x78
 3e8:	b.ne	334 <gomp_display_num+0x4c>  // b.any
 3ec:	sub	x4, x23, #0x2
 3f0:	add	x3, x19, #0x2
 3f4:	b	398 <gomp_display_num+0xb0>
 3f8:	cbz	w25, 418 <gomp_display_num+0x130>
 3fc:	mov	x4, x24
 400:	mov	x2, x22
 404:	mov	x1, x21
 408:	mov	x0, x20
 40c:	mov	w3, #0x20                  	// #32
 410:	bl	0 <gomp_display_repeat>
 414:	b	334 <gomp_display_num+0x4c>
 418:	mov	x4, x0
 41c:	mov	x3, x19
 420:	mov	x2, x22
 424:	mov	x1, x21
 428:	mov	x0, x20
 42c:	bl	1c0 <gomp_display_string>
 430:	mov	x4, x24
 434:	mov	x2, x22
 438:	mov	x1, x21
 43c:	mov	x0, x20
 440:	ldp	x19, x20, [sp, #16]
 444:	mov	w3, #0x20                  	// #32
 448:	ldp	x21, x22, [sp, #32]
 44c:	ldp	x23, x24, [sp, #48]
 450:	ldp	x25, x26, [sp, #64]
 454:	ldp	x29, x30, [sp], #80
 458:	b	0 <gomp_display_repeat>

000000000000045c <gomp_display_affinity>:
 45c:	stp	x29, x30, [sp, #-416]!
 460:	mov	x29, sp
 464:	stp	x19, x20, [sp, #16]
 468:	mov	x19, x2
 46c:	mov	x20, x0
 470:	stp	x21, x22, [sp, #32]
 474:	mov	x21, x1
 478:	stp	x23, x24, [sp, #48]
 47c:	add	x23, sp, #0xa0
 480:	stp	x25, x26, [sp, #64]
 484:	mov	x25, x4
 488:	sub	w26, w5, #0x1
 48c:	stp	x27, x28, [sp, #80]
 490:	adrp	x28, 0 <gomp_display_repeat>
 494:	add	x0, x28, #0x0
 498:	stp	x3, x0, [sp, #104]
 49c:	str	xzr, [sp, #152]
 4a0:	mov	x0, x19
 4a4:	mov	w1, #0x25                  	// #37
 4a8:	bl	0 <strchr>
 4ac:	mov	x22, x0
 4b0:	cbnz	x0, 4c0 <gomp_display_affinity+0x64>
 4b4:	mov	x0, x19
 4b8:	bl	0 <strlen>
 4bc:	add	x22, x19, x0
 4c0:	cmp	x19, x22
 4c4:	b.eq	4e0 <gomp_display_affinity+0x84>  // b.none
 4c8:	sub	x4, x22, x19
 4cc:	mov	x3, x19
 4d0:	add	x2, sp, #0x98
 4d4:	mov	x1, x21
 4d8:	mov	x0, x20
 4dc:	bl	1c0 <gomp_display_string>
 4e0:	ldrb	w0, [x22]
 4e4:	cbz	w0, 904 <gomp_display_affinity+0x4a8>
 4e8:	ldrb	w0, [x22, #1]
 4ec:	cmp	w0, #0x25
 4f0:	b.ne	518 <gomp_display_affinity+0xbc>  // b.any
 4f4:	add	x2, sp, #0x98
 4f8:	mov	x1, x21
 4fc:	mov	x0, x20
 500:	mov	x4, #0x1                   	// #1
 504:	adrp	x3, 0 <gomp_display_repeat>
 508:	add	x19, x22, #0x2
 50c:	add	x3, x3, #0x0
 510:	bl	1c0 <gomp_display_string>
 514:	b	4a0 <gomp_display_affinity+0x44>
 518:	cmp	w0, #0x30
 51c:	b.ne	53c <gomp_display_affinity+0xe0>  // b.any
 520:	ldrb	w0, [x22, #2]
 524:	add	x19, x22, #0x2
 528:	cmp	w0, #0x2e
 52c:	b.eq	61c <gomp_display_affinity+0x1c0>  // b.none
 530:	adrp	x0, 0 <gomp_display_repeat>
 534:	add	x0, x0, #0x0
 538:	bl	0 <gomp_fatal>
 53c:	add	x19, x22, #0x1
 540:	mov	w27, #0x0                   	// #0
 544:	ldrb	w0, [x19]
 548:	cmp	w0, #0x2e
 54c:	b.ne	624 <gomp_display_affinity+0x1c8>  // b.any
 550:	add	x19, x19, #0x1
 554:	mov	w24, #0x1                   	// #1
 558:	ldrb	w0, [x19]
 55c:	sub	w0, w0, #0x31
 560:	and	w0, w0, #0xff
 564:	cmp	w0, #0x8
 568:	b.hi	62c <gomp_display_affinity+0x1d0>  // b.pmore
 56c:	mov	x0, x19
 570:	mov	x1, x23
 574:	mov	w2, #0xa                   	// #10
 578:	bl	0 <strtoul>
 57c:	ldr	x19, [sp, #160]
 580:	mov	x22, x0
 584:	ldrb	w1, [x19]
 588:	cmp	w1, #0x7b
 58c:	b.ne	5f8 <gomp_display_affinity+0x19c>  // b.any
 590:	adrp	x1, 0 <gomp_display_repeat>
 594:	add	x4, x19, #0x1
 598:	add	x1, x1, #0x0
 59c:	mov	w28, #0x0                   	// #0
 5a0:	ldrb	w2, [x1, #18]
 5a4:	mov	x0, x4
 5a8:	stp	x4, x1, [sp, #120]
 5ac:	str	x2, [sp, #136]
 5b0:	bl	0 <strncmp>
 5b4:	adrp	x2, 0 <gomp_display_repeat>
 5b8:	add	x5, x2, #0x0
 5bc:	ldp	x4, x1, [sp, #120]
 5c0:	cbnz	w0, 64c <gomp_display_affinity+0x1f0>
 5c4:	ldr	x2, [sp, #136]
 5c8:	add	x0, x2, #0x1
 5cc:	add	x2, x19, x0
 5d0:	ldrb	w0, [x19, x0]
 5d4:	cmp	w0, #0x7d
 5d8:	b.ne	64c <gomp_display_affinity+0x1f0>  // b.any
 5dc:	sxtw	x3, w28
 5e0:	mov	x0, #0x14                  	// #20
 5e4:	madd	x3, x3, x0, x5
 5e8:	ldrb	w1, [x3, #19]
 5ec:	cmp	w1, #0x7b
 5f0:	b.eq	660 <gomp_display_affinity+0x204>  // b.none
 5f4:	mov	x19, x2
 5f8:	cmp	w1, #0x54
 5fc:	b.hi	6bc <gomp_display_affinity+0x260>  // b.pmore
 600:	cmp	w1, #0x47
 604:	b.hi	698 <gomp_display_affinity+0x23c>  // b.pmore
 608:	cmp	w1, #0x41
 60c:	b.eq	848 <gomp_display_affinity+0x3ec>  // b.none
 610:	adrp	x0, 0 <gomp_display_repeat>
 614:	add	x0, x0, #0x0
 618:	bl	0 <gomp_fatal>
 61c:	mov	w27, #0x1                   	// #1
 620:	b	544 <gomp_display_affinity+0xe8>
 624:	mov	w24, #0x0                   	// #0
 628:	b	558 <gomp_display_affinity+0xfc>
 62c:	cmp	w27, #0x0
 630:	ccmp	w24, #0x0, #0x0, eq  // eq = none
 634:	b.eq	644 <gomp_display_affinity+0x1e8>  // b.none
 638:	adrp	x0, 0 <gomp_display_repeat>
 63c:	add	x0, x0, #0x0
 640:	b	538 <gomp_display_affinity+0xdc>
 644:	mov	x22, #0xffffffffffffffff    	// #-1
 648:	b	584 <gomp_display_affinity+0x128>
 64c:	add	w28, w28, #0x1
 650:	add	x1, x1, #0x14
 654:	cmp	w28, #0xa
 658:	b.ne	5a0 <gomp_display_affinity+0x144>  // b.any
 65c:	mov	x2, x19
 660:	add	x19, x2, #0x1
 664:	mov	w1, #0x7d                  	// #125
 668:	mov	x0, x19
 66c:	bl	0 <strchr>
 670:	cbz	x0, 688 <gomp_display_affinity+0x22c>
 674:	sub	w1, w0, w19
 678:	mov	x2, x19
 67c:	adrp	x0, 0 <gomp_display_repeat>
 680:	add	x0, x0, #0x0
 684:	bl	0 <gomp_fatal>
 688:	adrp	x0, 0 <gomp_display_repeat>
 68c:	mov	x1, x19
 690:	add	x0, x0, #0x0
 694:	bl	0 <gomp_fatal>
 698:	sub	w2, w1, #0x48
 69c:	cmp	w2, #0xc
 6a0:	b.hi	610 <gomp_display_affinity+0x1b4>  // b.pmore
 6a4:	adrp	x0, 0 <gomp_display_repeat>
 6a8:	add	x0, x0, #0x0
 6ac:	ldrb	w0, [x0, w2, uxtw]
 6b0:	adr	x2, 6bc <gomp_display_affinity+0x260>
 6b4:	add	x0, x2, w0, sxtb #2
 6b8:	br	x0
 6bc:	cmp	w1, #0x6e
 6c0:	b.eq	740 <gomp_display_affinity+0x2e4>  // b.none
 6c4:	b.hi	710 <gomp_display_affinity+0x2b4>  // b.pmore
 6c8:	cmp	w1, #0x61
 6cc:	b.eq	758 <gomp_display_affinity+0x2fc>  // b.none
 6d0:	cmp	w1, #0x69
 6d4:	b.ne	610 <gomp_display_affinity+0x1b4>  // b.any
 6d8:	ldr	x2, [sp, #104]
 6dc:	adrp	x1, 0 <gomp_display_repeat>
 6e0:	mov	x0, x23
 6e4:	add	x1, x1, #0x0
 6e8:	bl	0 <sprintf>
 6ec:	mov	x6, x23
 6f0:	mov	x5, x22
 6f4:	mov	w4, w24
 6f8:	mov	w3, w27
 6fc:	add	x2, sp, #0x98
 700:	mov	x1, x21
 704:	mov	x0, x20
 708:	bl	2e8 <gomp_display_num>
 70c:	b	7cc <gomp_display_affinity+0x370>
 710:	cmp	w1, #0x74
 714:	b.ne	610 <gomp_display_affinity+0x1b4>  // b.any
 718:	bl	0 <omp_get_team_num>
 71c:	ldr	x1, [sp, #112]
 720:	mov	w2, w0
 724:	mov	x0, x23
 728:	bl	0 <sprintf>
 72c:	b	6ec <gomp_display_affinity+0x290>
 730:	bl	0 <omp_get_num_teams>
 734:	b	71c <gomp_display_affinity+0x2c0>
 738:	ldr	w0, [x25, #28]
 73c:	b	71c <gomp_display_affinity+0x2c0>
 740:	ldr	w0, [x25, #24]
 744:	b	71c <gomp_display_affinity+0x2c0>
 748:	ldr	x0, [x25]
 74c:	cbz	x0, 8f4 <gomp_display_affinity+0x498>
 750:	ldr	w0, [x0]
 754:	b	71c <gomp_display_affinity+0x2c0>
 758:	ldr	x0, [x25]
 75c:	cbz	x0, 8fc <gomp_display_affinity+0x4a0>
 760:	ldr	w0, [x0, #32]
 764:	b	71c <gomp_display_affinity+0x2c0>
 768:	mov	x27, x23
 76c:	mov	x28, #0x100                 	// #256
 770:	sub	x1, x28, #0x1
 774:	mov	x0, x27
 778:	str	x1, [sp, #120]
 77c:	strb	wzr, [x27, x1]
 780:	bl	0 <gethostname>
 784:	cbnz	w0, 7d4 <gomp_display_affinity+0x378>
 788:	mov	x0, x27
 78c:	bl	0 <strlen>
 790:	ldr	x1, [sp, #120]
 794:	mov	x6, x0
 798:	cmp	x1, x0
 79c:	b.ls	7d4 <gomp_display_affinity+0x378>  // b.plast
 7a0:	mov	x5, x27
 7a4:	mov	x4, x22
 7a8:	mov	w3, w24
 7ac:	add	x2, sp, #0x98
 7b0:	mov	x1, x21
 7b4:	mov	x0, x20
 7b8:	bl	234 <gomp_display_string_len>
 7bc:	cmp	x27, x23
 7c0:	b.eq	7cc <gomp_display_affinity+0x370>  // b.none
 7c4:	mov	x0, x27
 7c8:	bl	0 <free>
 7cc:	add	x19, x19, #0x1
 7d0:	b	4a0 <gomp_display_affinity+0x44>
 7d4:	cmp	x28, #0x100, lsl #12
 7d8:	b.eq	808 <gomp_display_affinity+0x3ac>  // b.none
 7dc:	lsl	x28, x28, #1
 7e0:	cmp	x28, #0x200
 7e4:	b.ne	7f8 <gomp_display_affinity+0x39c>  // b.any
 7e8:	mov	x0, x28
 7ec:	bl	0 <gomp_malloc>
 7f0:	mov	x27, x0
 7f4:	b	770 <gomp_display_affinity+0x314>
 7f8:	mov	x1, x28
 7fc:	mov	x0, x27
 800:	bl	0 <gomp_realloc>
 804:	b	7f0 <gomp_display_affinity+0x394>
 808:	cmp	x27, x23
 80c:	b.eq	818 <gomp_display_affinity+0x3bc>  // b.none
 810:	mov	x0, x27
 814:	bl	0 <free>
 818:	mov	x4, x22
 81c:	mov	w3, w24
 820:	add	x2, sp, #0x98
 824:	mov	x1, x21
 828:	mov	x0, x20
 82c:	mov	x6, #0x4                   	// #4
 830:	adrp	x5, 0 <gomp_display_repeat>
 834:	add	x5, x5, #0x0
 838:	bl	234 <gomp_display_string_len>
 83c:	b	7cc <gomp_display_affinity+0x370>
 840:	bl	0 <getpid>
 844:	b	71c <gomp_display_affinity+0x2c0>
 848:	cmn	x22, #0x1
 84c:	b.ne	868 <gomp_display_affinity+0x40c>  // b.any
 850:	mov	w3, w26
 854:	add	x2, sp, #0x98
 858:	mov	x1, x21
 85c:	mov	x0, x20
 860:	bl	0 <gomp_display_affinity_place>
 864:	b	7cc <gomp_display_affinity+0x370>
 868:	cbz	w24, 8ac <gomp_display_affinity+0x450>
 86c:	mov	w3, w26
 870:	mov	x2, x23
 874:	mov	x1, #0x0                   	// #0
 878:	mov	x0, #0x0                   	// #0
 87c:	str	xzr, [sp, #160]
 880:	bl	0 <gomp_display_affinity_place>
 884:	ldr	x4, [sp, #160]
 888:	cmp	x4, x22
 88c:	b.cs	850 <gomp_display_affinity+0x3f4>  // b.hs, b.nlast
 890:	sub	x4, x22, x4
 894:	add	x2, sp, #0x98
 898:	mov	x1, x21
 89c:	mov	x0, x20
 8a0:	mov	w3, #0x20                  	// #32
 8a4:	bl	0 <gomp_display_repeat>
 8a8:	b	850 <gomp_display_affinity+0x3f4>
 8ac:	mov	x0, x20
 8b0:	mov	w3, w26
 8b4:	add	x2, sp, #0x98
 8b8:	mov	x1, x21
 8bc:	ldr	x24, [sp, #152]
 8c0:	bl	0 <gomp_display_affinity_place>
 8c4:	ldr	x4, [sp, #152]
 8c8:	sub	x0, x4, x24
 8cc:	cmp	x0, x22
 8d0:	b.cs	7cc <gomp_display_affinity+0x370>  // b.hs, b.nlast
 8d4:	sub	x4, x24, x4
 8d8:	add	x2, sp, #0x98
 8dc:	add	x4, x4, x22
 8e0:	mov	x1, x21
 8e4:	mov	x0, x20
 8e8:	mov	w3, #0x20                  	// #32
 8ec:	bl	0 <gomp_display_repeat>
 8f0:	b	7cc <gomp_display_affinity+0x370>
 8f4:	mov	w0, #0x1                   	// #1
 8f8:	b	71c <gomp_display_affinity+0x2c0>
 8fc:	mov	w0, #0xffffffff            	// #-1
 900:	b	71c <gomp_display_affinity+0x2c0>
 904:	ldp	x19, x20, [sp, #16]
 908:	ldp	x21, x22, [sp, #32]
 90c:	ldp	x23, x24, [sp, #48]
 910:	ldp	x25, x26, [sp, #64]
 914:	ldp	x27, x28, [sp, #80]
 918:	ldr	x0, [sp, #152]
 91c:	ldp	x29, x30, [sp], #416
 920:	ret

0000000000000924 <gomp_ialias_omp_capture_affinity>:
 924:	stp	x29, x30, [sp, #-48]!
 928:	mov	x29, sp
 92c:	stp	x19, x20, [sp, #16]
 930:	mov	x19, x0
 934:	mov	x20, x1
 938:	str	x21, [sp, #32]
 93c:	cbz	x2, 94c <gomp_ialias_omp_capture_affinity+0x28>
 940:	ldrb	w0, [x2]
 944:	mov	x21, x2
 948:	cbnz	w0, 954 <gomp_ialias_omp_capture_affinity+0x30>
 94c:	adrp	x0, 0 <gomp_affinity_format_var>
 950:	ldr	x21, [x0]
 954:	bl	0 <pthread_self>
 958:	adrp	x4, 0 <gomp_tls_data>
 95c:	ldr	x4, [x4]
 960:	mrs	x1, tpidr_el0
 964:	mov	x3, x0
 968:	mov	x2, x21
 96c:	add	x4, x1, x4
 970:	mov	x0, x19
 974:	mov	x1, x20
 978:	add	x4, x4, #0x10
 97c:	ldr	w5, [x4, #76]
 980:	bl	45c <gomp_display_affinity>
 984:	cbz	x20, 998 <gomp_ialias_omp_capture_affinity+0x74>
 988:	cmp	x20, x0
 98c:	b.hi	9a8 <gomp_ialias_omp_capture_affinity+0x84>  // b.pmore
 990:	add	x19, x19, x20
 994:	sturb	wzr, [x19, #-1]
 998:	ldp	x19, x20, [sp, #16]
 99c:	ldr	x21, [sp, #32]
 9a0:	ldp	x29, x30, [sp], #48
 9a4:	ret
 9a8:	strb	wzr, [x19, x0]
 9ac:	b	998 <gomp_ialias_omp_capture_affinity+0x74>

00000000000009b0 <omp_display_affinity>:
 9b0:	sub	sp, sp, #0x230
 9b4:	mov	x2, x0
 9b8:	mov	x1, #0x200                 	// #512
 9bc:	stp	x29, x30, [sp]
 9c0:	mov	x29, sp
 9c4:	stp	x19, x20, [sp, #16]
 9c8:	add	x20, sp, #0x30
 9cc:	stp	x21, x22, [sp, #32]
 9d0:	mov	x22, x0
 9d4:	mov	x0, x20
 9d8:	bl	924 <gomp_ialias_omp_capture_affinity>
 9dc:	mov	x19, x0
 9e0:	cmp	x0, #0x1ff
 9e4:	add	x21, x0, #0x1
 9e8:	b.hi	a14 <omp_display_affinity+0x64>  // b.pmore
 9ec:	mov	w0, #0xa                   	// #10
 9f0:	mov	x1, x21
 9f4:	strb	w0, [x20, x19]
 9f8:	mov	x0, x20
 9fc:	bl	74 <gomp_print_string>
 a00:	ldp	x29, x30, [sp]
 a04:	ldp	x19, x20, [sp, #16]
 a08:	ldp	x21, x22, [sp, #32]
 a0c:	add	sp, sp, #0x230
 a10:	ret
 a14:	mov	x0, x21
 a18:	bl	0 <gomp_malloc>
 a1c:	mov	x20, x0
 a20:	mov	x2, x22
 a24:	mov	x1, x21
 a28:	bl	924 <gomp_ialias_omp_capture_affinity>
 a2c:	mov	w0, #0xa                   	// #10
 a30:	mov	x1, x21
 a34:	strb	w0, [x20, x19]
 a38:	mov	x0, x20
 a3c:	bl	74 <gomp_print_string>
 a40:	mov	x0, x20
 a44:	ldp	x29, x30, [sp]
 a48:	ldp	x19, x20, [sp, #16]
 a4c:	ldp	x21, x22, [sp, #32]
 a50:	add	sp, sp, #0x230
 a54:	b	0 <free>

Disassembly of section .text.unlikely:

0000000000000000 <gomp_display_affinity_thread>:
   0:	sub	sp, sp, #0x250
   4:	mov	w5, w2
   8:	mov	x4, x1
   c:	mov	x3, x0
  10:	stp	x29, x30, [sp]
  14:	mov	x29, sp
  18:	str	x25, [sp, #64]
  1c:	adrp	x25, 0 <gomp_affinity_format_var>
  20:	stp	x23, x24, [sp, #48]
  24:	mov	w24, w2
  28:	mov	x23, x1
  2c:	ldr	x2, [x25]
  30:	stp	x19, x20, [sp, #16]
  34:	add	x20, sp, #0x50
  38:	mov	x1, #0x200                 	// #512
  3c:	stp	x21, x22, [sp, #32]
  40:	mov	x22, x0
  44:	mov	x0, x20
  48:	bl	45c <gomp_display_affinity>
  4c:	mov	x19, x0
  50:	cmp	x0, #0x1ff
  54:	add	x21, x0, #0x1
  58:	b.hi	8c <gomp_display_affinity_thread+0x8c>  // b.pmore
  5c:	mov	w0, #0xa                   	// #10
  60:	mov	x1, x21
  64:	strb	w0, [x20, x19]
  68:	mov	x0, x20
  6c:	bl	74 <gomp_display_affinity_thread+0x74>
  70:	ldp	x29, x30, [sp]
  74:	ldp	x19, x20, [sp, #16]
  78:	ldp	x21, x22, [sp, #32]
  7c:	ldp	x23, x24, [sp, #48]
  80:	ldr	x25, [sp, #64]
  84:	add	sp, sp, #0x250
  88:	ret
  8c:	mov	x0, x21
  90:	bl	0 <gomp_malloc>
  94:	ldr	x2, [x25]
  98:	mov	x20, x0
  9c:	mov	w5, w24
  a0:	mov	x4, x23
  a4:	mov	x3, x22
  a8:	mov	x1, x21
  ac:	bl	45c <gomp_display_affinity>
  b0:	mov	w0, #0xa                   	// #10
  b4:	strb	w0, [x20, x19]
  b8:	mov	x1, x21
  bc:	mov	x0, x20
  c0:	bl	74 <gomp_display_affinity_thread+0x74>
  c4:	mov	x0, x20
  c8:	ldp	x29, x30, [sp]
  cc:	ldp	x19, x20, [sp, #16]
  d0:	ldp	x21, x22, [sp, #32]
  d4:	ldp	x23, x24, [sp, #48]
  d8:	ldr	x25, [sp, #64]
  dc:	add	sp, sp, #0x250
  e0:	b	0 <free>

teams.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_teams_reg>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	w19, w2
  10:	mov	w20, w3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x0
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	x23, x1
  24:	str	x25, [sp, #64]
  28:	cbz	w3, e8 <GOMP_teams_reg+0xe8>
  2c:	adrp	x0, 0 <gomp_tls_data>
  30:	ldr	x0, [x0]
  34:	mrs	x1, tpidr_el0
  38:	add	x0, x1, x0
  3c:	ldr	x4, [x0, #80]
  40:	cbz	x4, e0 <GOMP_teams_reg+0xe0>
  44:	add	x0, x4, #0x90
  48:	cmp	w20, #0x0
  4c:	ldr	w24, [x0, #20]
  50:	csinv	w1, w20, wzr, ge  // ge = tcont
  54:	str	w1, [x0, #20]
  58:	mov	w0, #0x3                   	// #3
  5c:	adrp	x21, 0 <GOMP_teams_reg>
  60:	cmp	w19, #0x0
  64:	csel	w19, w19, w0, ne  // ne = any
  68:	adrp	x0, 0 <GOMP_teams_reg>
  6c:	str	wzr, [x21]
  70:	mov	x25, x0
  74:	add	x21, x21, #0x0
  78:	str	w19, [x0]
  7c:	mov	x0, x23
  80:	blr	x22
  84:	ldr	w0, [x21]
  88:	add	w0, w0, #0x1
  8c:	str	w0, [x21]
  90:	cmp	w0, w19
  94:	b.cc	7c <GOMP_teams_reg+0x7c>  // b.lo, b.ul, b.last
  98:	mov	w0, #0x1                   	// #1
  9c:	str	w0, [x25]
  a0:	str	wzr, [x21]
  a4:	cbz	w20, c8 <GOMP_teams_reg+0xc8>
  a8:	adrp	x0, 0 <gomp_tls_data>
  ac:	ldr	x0, [x0]
  b0:	mrs	x1, tpidr_el0
  b4:	add	x0, x1, x0
  b8:	ldr	x0, [x0, #80]
  bc:	cbz	x0, f0 <GOMP_teams_reg+0xf0>
  c0:	add	x0, x0, #0x90
  c4:	str	w24, [x0, #20]
  c8:	ldp	x19, x20, [sp, #16]
  cc:	ldp	x21, x22, [sp, #32]
  d0:	ldp	x23, x24, [sp, #48]
  d4:	ldr	x25, [sp, #64]
  d8:	ldp	x29, x30, [sp], #80
  dc:	ret
  e0:	bl	0 <gomp_new_icv>
  e4:	b	48 <GOMP_teams_reg+0x48>
  e8:	mov	w24, #0x0                   	// #0
  ec:	b	58 <GOMP_teams_reg+0x58>
  f0:	bl	0 <gomp_new_icv>
  f4:	b	c4 <GOMP_teams_reg+0xc4>

00000000000000f8 <gomp_ialias_omp_get_num_teams>:
  f8:	adrp	x0, 0 <GOMP_teams_reg>
  fc:	ldr	w0, [x0]
 100:	ret

0000000000000104 <gomp_ialias_omp_get_team_num>:
 104:	adrp	x0, 0 <GOMP_teams_reg>
 108:	ldr	w0, [x0]
 10c:	ret
