In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libgomp.a_gcc_-O0:

alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_malloc>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <malloc>
  14:	str	x0, [sp, #40]
  18:	ldr	x0, [sp, #40]
  1c:	cmp	x0, #0x0
  20:	b.ne	34 <gomp_malloc+0x34>  // b.any
  24:	ldr	x1, [sp, #24]
  28:	adrp	x0, 0 <gomp_malloc>
  2c:	add	x0, x0, #0x0
  30:	bl	0 <gomp_fatal>
  34:	ldr	x0, [sp, #40]
  38:	ldp	x29, x30, [sp], #48
  3c:	ret

0000000000000040 <gomp_malloc_cleared>:
  40:	stp	x29, x30, [sp, #-48]!
  44:	mov	x29, sp
  48:	str	x0, [sp, #24]
  4c:	ldr	x1, [sp, #24]
  50:	mov	x0, #0x1                   	// #1
  54:	bl	0 <calloc>
  58:	str	x0, [sp, #40]
  5c:	ldr	x0, [sp, #40]
  60:	cmp	x0, #0x0
  64:	b.ne	78 <gomp_malloc_cleared+0x38>  // b.any
  68:	ldr	x1, [sp, #24]
  6c:	adrp	x0, 0 <gomp_malloc>
  70:	add	x0, x0, #0x0
  74:	bl	0 <gomp_fatal>
  78:	ldr	x0, [sp, #40]
  7c:	ldp	x29, x30, [sp], #48
  80:	ret

0000000000000084 <gomp_realloc>:
  84:	stp	x29, x30, [sp, #-48]!
  88:	mov	x29, sp
  8c:	str	x0, [sp, #24]
  90:	str	x1, [sp, #16]
  94:	ldr	x1, [sp, #16]
  98:	ldr	x0, [sp, #24]
  9c:	bl	0 <realloc>
  a0:	str	x0, [sp, #40]
  a4:	ldr	x0, [sp, #40]
  a8:	cmp	x0, #0x0
  ac:	b.ne	c0 <gomp_realloc+0x3c>  // b.any
  b0:	ldr	x1, [sp, #16]
  b4:	adrp	x0, 0 <gomp_malloc>
  b8:	add	x0, x0, #0x0
  bc:	bl	0 <gomp_fatal>
  c0:	ldr	x0, [sp, #40]
  c4:	ldp	x29, x30, [sp], #48
  c8:	ret

00000000000000cc <gomp_aligned_alloc>:
  cc:	stp	x29, x30, [sp, #-48]!
  d0:	mov	x29, sp
  d4:	str	x0, [sp, #24]
  d8:	str	x1, [sp, #16]
  dc:	ldr	x0, [sp, #24]
  e0:	cmp	x0, #0x7
  e4:	b.hi	f0 <gomp_aligned_alloc+0x24>  // b.pmore
  e8:	mov	x0, #0x8                   	// #8
  ec:	str	x0, [sp, #24]
  f0:	ldr	x1, [sp, #16]
  f4:	ldr	x0, [sp, #24]
  f8:	bl	0 <aligned_alloc>
  fc:	str	x0, [sp, #40]
 100:	ldr	x0, [sp, #40]
 104:	cmp	x0, #0x0
 108:	b.ne	11c <gomp_aligned_alloc+0x50>  // b.any
 10c:	ldr	x1, [sp, #16]
 110:	adrp	x0, 0 <gomp_malloc>
 114:	add	x0, x0, #0x0
 118:	bl	0 <gomp_fatal>
 11c:	ldr	x0, [sp, #40]
 120:	ldp	x29, x30, [sp], #48
 124:	ret

0000000000000128 <gomp_aligned_free>:
 128:	stp	x29, x30, [sp, #-32]!
 12c:	mov	x29, sp
 130:	str	x0, [sp, #24]
 134:	ldr	x0, [sp, #24]
 138:	bl	0 <free>
 13c:	nop
 140:	ldp	x29, x30, [sp], #32
 144:	ret

atomic.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_lock>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	wzr, [sp, #44]
  10:	ldr	x1, [sp, #24]
  14:	add	x0, sp, #0x2c
  18:	ldr	w3, [x0]
  1c:	mov	w4, #0x1                   	// #1
  20:	ldaxr	w2, [x1]
  24:	cmp	w2, w3
  28:	b.ne	34 <gomp_mutex_lock+0x34>  // b.any
  2c:	stxr	w5, w4, [x1]
  30:	cbnz	w5, 20 <gomp_mutex_lock+0x20>
  34:	cset	w1, eq  // eq = none
  38:	cmp	w1, #0x0
  3c:	b.ne	44 <gomp_mutex_lock+0x44>  // b.any
  40:	str	w2, [x0]
  44:	mov	w0, w1
  48:	eor	w0, w0, #0x1
  4c:	and	w0, w0, #0xff
  50:	cmp	w0, #0x0
  54:	b.eq	68 <gomp_mutex_lock+0x68>  // b.none
  58:	ldr	w0, [sp, #44]
  5c:	mov	w1, w0
  60:	ldr	x0, [sp, #24]
  64:	bl	0 <gomp_mutex_lock_slow>
  68:	nop
  6c:	ldp	x29, x30, [sp], #48
  70:	ret

0000000000000074 <gomp_mutex_unlock>:
  74:	stp	x29, x30, [sp, #-48]!
  78:	mov	x29, sp
  7c:	str	x0, [sp, #24]
  80:	ldr	x1, [sp, #24]
  84:	ldxr	w0, [x1]
  88:	stlxr	w2, wzr, [x1]
  8c:	cbnz	w2, 84 <gomp_mutex_unlock+0x10>
  90:	str	w0, [sp, #44]
  94:	ldr	w0, [sp, #44]
  98:	lsr	w0, w0, #31
  9c:	and	w0, w0, #0xff
  a0:	and	x0, x0, #0xff
  a4:	cmp	x0, #0x0
  a8:	b.eq	b4 <gomp_mutex_unlock+0x40>  // b.none
  ac:	ldr	x0, [sp, #24]
  b0:	bl	0 <gomp_mutex_unlock_slow>
  b4:	nop
  b8:	ldp	x29, x30, [sp], #48
  bc:	ret

00000000000000c0 <GOMP_atomic_start>:
  c0:	stp	x29, x30, [sp, #-16]!
  c4:	mov	x29, sp
  c8:	adrp	x0, 0 <gomp_mutex_lock>
  cc:	add	x0, x0, #0x0
  d0:	bl	0 <gomp_mutex_lock>
  d4:	nop
  d8:	ldp	x29, x30, [sp], #16
  dc:	ret

00000000000000e0 <GOMP_atomic_end>:
  e0:	stp	x29, x30, [sp, #-16]!
  e4:	mov	x29, sp
  e8:	adrp	x0, 0 <gomp_mutex_lock>
  ec:	add	x0, x0, #0x0
  f0:	bl	74 <gomp_mutex_unlock>
  f4:	nop
  f8:	ldp	x29, x30, [sp], #16
  fc:	ret

barrier.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_thread>:
   0:	mrs	x1, tpidr_el0
   4:	adrp	x0, 0 <gomp_tls_data>
   8:	ldr	x0, [x0]
   c:	add	x0, x1, x0
  10:	ret

0000000000000014 <GOMP_barrier>:
  14:	stp	x29, x30, [sp, #-32]!
  18:	mov	x29, sp
  1c:	bl	0 <gomp_thread>
  20:	str	x0, [sp, #24]
  24:	ldr	x0, [sp, #24]
  28:	ldr	x0, [x0, #16]
  2c:	str	x0, [sp, #16]
  30:	ldr	x0, [sp, #16]
  34:	cmp	x0, #0x0
  38:	b.eq	4c <GOMP_barrier+0x38>  // b.none
  3c:	ldr	x0, [sp, #16]
  40:	add	x0, x0, #0x80
  44:	bl	0 <gomp_team_barrier_wait>
  48:	b	50 <GOMP_barrier+0x3c>
  4c:	nop
  50:	ldp	x29, x30, [sp], #32
  54:	ret

0000000000000058 <GOMP_barrier_cancel>:
  58:	stp	x29, x30, [sp, #-32]!
  5c:	mov	x29, sp
  60:	bl	0 <gomp_thread>
  64:	str	x0, [sp, #24]
  68:	ldr	x0, [sp, #24]
  6c:	ldr	x0, [x0, #16]
  70:	str	x0, [sp, #16]
  74:	ldr	x0, [sp, #16]
  78:	add	x0, x0, #0x80
  7c:	bl	0 <gomp_team_barrier_wait_cancel>
  80:	and	w0, w0, #0xff
  84:	ldp	x29, x30, [sp], #32
  88:	ret

critical.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_lock>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	wzr, [sp, #44]
  10:	ldr	x1, [sp, #24]
  14:	add	x0, sp, #0x2c
  18:	ldr	w3, [x0]
  1c:	mov	w4, #0x1                   	// #1
  20:	ldaxr	w2, [x1]
  24:	cmp	w2, w3
  28:	b.ne	34 <gomp_mutex_lock+0x34>  // b.any
  2c:	stxr	w5, w4, [x1]
  30:	cbnz	w5, 20 <gomp_mutex_lock+0x20>
  34:	cset	w1, eq  // eq = none
  38:	cmp	w1, #0x0
  3c:	b.ne	44 <gomp_mutex_lock+0x44>  // b.any
  40:	str	w2, [x0]
  44:	mov	w0, w1
  48:	eor	w0, w0, #0x1
  4c:	and	w0, w0, #0xff
  50:	cmp	w0, #0x0
  54:	b.eq	68 <gomp_mutex_lock+0x68>  // b.none
  58:	ldr	w0, [sp, #44]
  5c:	mov	w1, w0
  60:	ldr	x0, [sp, #24]
  64:	bl	0 <gomp_mutex_lock_slow>
  68:	nop
  6c:	ldp	x29, x30, [sp], #48
  70:	ret

0000000000000074 <gomp_mutex_unlock>:
  74:	stp	x29, x30, [sp, #-48]!
  78:	mov	x29, sp
  7c:	str	x0, [sp, #24]
  80:	ldr	x1, [sp, #24]
  84:	ldxr	w0, [x1]
  88:	stlxr	w2, wzr, [x1]
  8c:	cbnz	w2, 84 <gomp_mutex_unlock+0x10>
  90:	str	w0, [sp, #44]
  94:	ldr	w0, [sp, #44]
  98:	lsr	w0, w0, #31
  9c:	and	w0, w0, #0xff
  a0:	and	x0, x0, #0xff
  a4:	cmp	x0, #0x0
  a8:	b.eq	b4 <gomp_mutex_unlock+0x40>  // b.none
  ac:	ldr	x0, [sp, #24]
  b0:	bl	0 <gomp_mutex_unlock_slow>
  b4:	nop
  b8:	ldp	x29, x30, [sp], #48
  bc:	ret

00000000000000c0 <GOMP_critical_start>:
  c0:	stp	x29, x30, [sp, #-16]!
  c4:	mov	x29, sp
  c8:	dmb	ish
  cc:	adrp	x0, 0 <gomp_mutex_lock>
  d0:	add	x0, x0, #0x0
  d4:	bl	0 <gomp_mutex_lock>
  d8:	nop
  dc:	ldp	x29, x30, [sp], #16
  e0:	ret

00000000000000e4 <GOMP_critical_end>:
  e4:	stp	x29, x30, [sp, #-16]!
  e8:	mov	x29, sp
  ec:	adrp	x0, 0 <gomp_mutex_lock>
  f0:	add	x0, x0, #0x0
  f4:	bl	74 <gomp_mutex_unlock>
  f8:	nop
  fc:	ldp	x29, x30, [sp], #16
 100:	ret

0000000000000104 <GOMP_critical_name_start>:
 104:	stp	x29, x30, [sp, #-48]!
 108:	mov	x29, sp
 10c:	str	x0, [sp, #24]
 110:	ldr	x0, [sp, #24]
 114:	str	x0, [sp, #40]
 118:	ldr	x0, [sp, #40]
 11c:	bl	0 <gomp_mutex_lock>
 120:	nop
 124:	ldp	x29, x30, [sp], #48
 128:	ret

000000000000012c <GOMP_critical_name_end>:
 12c:	stp	x29, x30, [sp, #-48]!
 130:	mov	x29, sp
 134:	str	x0, [sp, #24]
 138:	ldr	x0, [sp, #24]
 13c:	str	x0, [sp, #40]
 140:	ldr	x0, [sp, #40]
 144:	bl	74 <gomp_mutex_unlock>
 148:	nop
 14c:	ldp	x29, x30, [sp], #48
 150:	ret

env.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <omp_check_defines>:
       0:	sub	sp, sp, #0x10
       4:	nop
       8:	add	sp, sp, #0x10
       c:	ret

0000000000000010 <parse_schedule>:
      10:	stp	x29, x30, [sp, #-48]!
      14:	mov	x29, sp
      18:	str	wzr, [sp, #28]
      1c:	adrp	x0, 0 <omp_check_defines>
      20:	add	x0, x0, #0x0
      24:	bl	0 <getenv>
      28:	str	x0, [sp, #40]
      2c:	ldr	x0, [sp, #40]
      30:	cmp	x0, #0x0
      34:	b.eq	4b0 <parse_schedule+0x4a0>  // b.none
      38:	b	48 <parse_schedule+0x38>
      3c:	ldr	x0, [sp, #40]
      40:	add	x0, x0, #0x1
      44:	str	x0, [sp, #40]
      48:	bl	0 <__ctype_b_loc>
      4c:	ldr	x1, [x0]
      50:	ldr	x0, [sp, #40]
      54:	ldrb	w0, [x0]
      58:	and	x0, x0, #0xff
      5c:	lsl	x0, x0, #1
      60:	add	x0, x1, x0
      64:	ldrh	w0, [x0]
      68:	and	w0, w0, #0x2000
      6c:	cmp	w0, #0x0
      70:	b.ne	3c <parse_schedule+0x2c>  // b.any
      74:	mov	x2, #0x9                   	// #9
      78:	adrp	x0, 0 <omp_check_defines>
      7c:	add	x1, x0, #0x0
      80:	ldr	x0, [sp, #40]
      84:	bl	0 <strncasecmp>
      88:	cmp	w0, #0x0
      8c:	b.ne	a8 <parse_schedule+0x98>  // b.any
      90:	mov	w0, #0x1                   	// #1
      94:	str	w0, [sp, #28]
      98:	ldr	x0, [sp, #40]
      9c:	add	x0, x0, #0x9
      a0:	str	x0, [sp, #40]
      a4:	b	d8 <parse_schedule+0xc8>
      a8:	mov	x2, #0xc                   	// #12
      ac:	adrp	x0, 0 <omp_check_defines>
      b0:	add	x1, x0, #0x0
      b4:	ldr	x0, [sp, #40]
      b8:	bl	0 <strncasecmp>
      bc:	cmp	w0, #0x0
      c0:	b.ne	d8 <parse_schedule+0xc8>  // b.any
      c4:	mov	w0, #0xffffffff            	// #-1
      c8:	str	w0, [sp, #28]
      cc:	ldr	x0, [sp, #40]
      d0:	add	x0, x0, #0xc
      d4:	str	x0, [sp, #40]
      d8:	ldr	w0, [sp, #28]
      dc:	cmp	w0, #0x0
      e0:	b.eq	178 <parse_schedule+0x168>  // b.none
      e4:	b	f4 <parse_schedule+0xe4>
      e8:	ldr	x0, [sp, #40]
      ec:	add	x0, x0, #0x1
      f0:	str	x0, [sp, #40]
      f4:	bl	0 <__ctype_b_loc>
      f8:	ldr	x1, [x0]
      fc:	ldr	x0, [sp, #40]
     100:	ldrb	w0, [x0]
     104:	and	x0, x0, #0xff
     108:	lsl	x0, x0, #1
     10c:	add	x0, x1, x0
     110:	ldrh	w0, [x0]
     114:	and	w0, w0, #0x2000
     118:	cmp	w0, #0x0
     11c:	b.ne	e8 <parse_schedule+0xd8>  // b.any
     120:	ldr	x0, [sp, #40]
     124:	ldrb	w0, [x0]
     128:	cmp	w0, #0x3a
     12c:	b.ne	460 <parse_schedule+0x450>  // b.any
     130:	ldr	x0, [sp, #40]
     134:	add	x0, x0, #0x1
     138:	str	x0, [sp, #40]
     13c:	b	14c <parse_schedule+0x13c>
     140:	ldr	x0, [sp, #40]
     144:	add	x0, x0, #0x1
     148:	str	x0, [sp, #40]
     14c:	bl	0 <__ctype_b_loc>
     150:	ldr	x1, [x0]
     154:	ldr	x0, [sp, #40]
     158:	ldrb	w0, [x0]
     15c:	and	x0, x0, #0xff
     160:	lsl	x0, x0, #1
     164:	add	x0, x1, x0
     168:	ldrh	w0, [x0]
     16c:	and	w0, w0, #0x2000
     170:	cmp	w0, #0x0
     174:	b.ne	140 <parse_schedule+0x130>  // b.any
     178:	mov	x2, #0x6                   	// #6
     17c:	adrp	x0, 0 <omp_check_defines>
     180:	add	x1, x0, #0x0
     184:	ldr	x0, [sp, #40]
     188:	bl	0 <strncasecmp>
     18c:	cmp	w0, #0x0
     190:	b.ne	1b4 <parse_schedule+0x1a4>  // b.any
     194:	adrp	x0, 0 <omp_check_defines>
     198:	add	x0, x0, #0x0
     19c:	mov	w1, #0x1                   	// #1
     1a0:	str	w1, [x0, #8]
     1a4:	ldr	x0, [sp, #40]
     1a8:	add	x0, x0, #0x6
     1ac:	str	x0, [sp, #40]
     1b0:	b	264 <parse_schedule+0x254>
     1b4:	mov	x2, #0x7                   	// #7
     1b8:	adrp	x0, 0 <omp_check_defines>
     1bc:	add	x1, x0, #0x0
     1c0:	ldr	x0, [sp, #40]
     1c4:	bl	0 <strncasecmp>
     1c8:	cmp	w0, #0x0
     1cc:	b.ne	1f0 <parse_schedule+0x1e0>  // b.any
     1d0:	adrp	x0, 0 <omp_check_defines>
     1d4:	add	x0, x0, #0x0
     1d8:	mov	w1, #0x2                   	// #2
     1dc:	str	w1, [x0, #8]
     1e0:	ldr	x0, [sp, #40]
     1e4:	add	x0, x0, #0x7
     1e8:	str	x0, [sp, #40]
     1ec:	b	264 <parse_schedule+0x254>
     1f0:	mov	x2, #0x6                   	// #6
     1f4:	adrp	x0, 0 <omp_check_defines>
     1f8:	add	x1, x0, #0x0
     1fc:	ldr	x0, [sp, #40]
     200:	bl	0 <strncasecmp>
     204:	cmp	w0, #0x0
     208:	b.ne	22c <parse_schedule+0x21c>  // b.any
     20c:	adrp	x0, 0 <omp_check_defines>
     210:	add	x0, x0, #0x0
     214:	mov	w1, #0x3                   	// #3
     218:	str	w1, [x0, #8]
     21c:	ldr	x0, [sp, #40]
     220:	add	x0, x0, #0x6
     224:	str	x0, [sp, #40]
     228:	b	264 <parse_schedule+0x254>
     22c:	mov	x2, #0x4                   	// #4
     230:	adrp	x0, 0 <omp_check_defines>
     234:	add	x1, x0, #0x0
     238:	ldr	x0, [sp, #40]
     23c:	bl	0 <strncasecmp>
     240:	cmp	w0, #0x0
     244:	b.ne	468 <parse_schedule+0x458>  // b.any
     248:	adrp	x0, 0 <omp_check_defines>
     24c:	add	x0, x0, #0x0
     250:	mov	w1, #0x4                   	// #4
     254:	str	w1, [x0, #8]
     258:	ldr	x0, [sp, #40]
     25c:	add	x0, x0, #0x4
     260:	str	x0, [sp, #40]
     264:	ldr	w0, [sp, #28]
     268:	cmp	w0, #0x1
     26c:	b.eq	290 <parse_schedule+0x280>  // b.none
     270:	ldr	w0, [sp, #28]
     274:	cmp	w0, #0x0
     278:	b.ne	2bc <parse_schedule+0x2ac>  // b.any
     27c:	adrp	x0, 0 <omp_check_defines>
     280:	add	x0, x0, #0x0
     284:	ldr	w0, [x0, #8]
     288:	cmp	w0, #0x1
     28c:	b.ne	2bc <parse_schedule+0x2ac>  // b.any
     290:	adrp	x0, 0 <omp_check_defines>
     294:	add	x0, x0, #0x0
     298:	ldr	w0, [x0, #8]
     29c:	orr	w1, w0, #0x80000000
     2a0:	adrp	x0, 0 <omp_check_defines>
     2a4:	add	x0, x0, #0x0
     2a8:	str	w1, [x0, #8]
     2ac:	b	2bc <parse_schedule+0x2ac>
     2b0:	ldr	x0, [sp, #40]
     2b4:	add	x0, x0, #0x1
     2b8:	str	x0, [sp, #40]
     2bc:	bl	0 <__ctype_b_loc>
     2c0:	ldr	x1, [x0]
     2c4:	ldr	x0, [sp, #40]
     2c8:	ldrb	w0, [x0]
     2cc:	and	x0, x0, #0xff
     2d0:	lsl	x0, x0, #1
     2d4:	add	x0, x1, x0
     2d8:	ldrh	w0, [x0]
     2dc:	and	w0, w0, #0x2000
     2e0:	cmp	w0, #0x0
     2e4:	b.ne	2b0 <parse_schedule+0x2a0>  // b.any
     2e8:	ldr	x0, [sp, #40]
     2ec:	ldrb	w0, [x0]
     2f0:	cmp	w0, #0x0
     2f4:	b.ne	328 <parse_schedule+0x318>  // b.any
     2f8:	adrp	x0, 0 <omp_check_defines>
     2fc:	add	x0, x0, #0x0
     300:	ldr	w0, [x0, #8]
     304:	and	w0, w0, #0x7fffffff
     308:	cmp	w0, #0x1
     30c:	cset	w0, ne  // ne = any
     310:	and	w0, w0, #0xff
     314:	mov	w1, w0
     318:	adrp	x0, 0 <omp_check_defines>
     31c:	add	x0, x0, #0x0
     320:	str	w1, [x0, #12]
     324:	b	4b4 <parse_schedule+0x4a4>
     328:	ldr	x0, [sp, #40]
     32c:	add	x1, x0, #0x1
     330:	str	x1, [sp, #40]
     334:	ldrb	w0, [x0]
     338:	cmp	w0, #0x2c
     33c:	b.ne	470 <parse_schedule+0x460>  // b.any
     340:	b	350 <parse_schedule+0x340>
     344:	ldr	x0, [sp, #40]
     348:	add	x0, x0, #0x1
     34c:	str	x0, [sp, #40]
     350:	bl	0 <__ctype_b_loc>
     354:	ldr	x1, [x0]
     358:	ldr	x0, [sp, #40]
     35c:	ldrb	w0, [x0]
     360:	and	x0, x0, #0xff
     364:	lsl	x0, x0, #1
     368:	add	x0, x1, x0
     36c:	ldrh	w0, [x0]
     370:	and	w0, w0, #0x2000
     374:	cmp	w0, #0x0
     378:	b.ne	344 <parse_schedule+0x334>  // b.any
     37c:	ldr	x0, [sp, #40]
     380:	ldrb	w0, [x0]
     384:	cmp	w0, #0x0
     388:	b.eq	484 <parse_schedule+0x474>  // b.none
     38c:	bl	0 <__errno_location>
     390:	str	wzr, [x0]
     394:	add	x0, sp, #0x10
     398:	mov	w2, #0xa                   	// #10
     39c:	mov	x1, x0
     3a0:	ldr	x0, [sp, #40]
     3a4:	bl	0 <strtoul>
     3a8:	str	x0, [sp, #32]
     3ac:	bl	0 <__errno_location>
     3b0:	ldr	w0, [x0]
     3b4:	cmp	w0, #0x0
     3b8:	b.ne	48c <parse_schedule+0x47c>  // b.any
     3bc:	b	3cc <parse_schedule+0x3bc>
     3c0:	ldr	x0, [sp, #16]
     3c4:	add	x0, x0, #0x1
     3c8:	str	x0, [sp, #16]
     3cc:	bl	0 <__ctype_b_loc>
     3d0:	ldr	x1, [x0]
     3d4:	ldr	x0, [sp, #16]
     3d8:	ldrb	w0, [x0]
     3dc:	and	x0, x0, #0xff
     3e0:	lsl	x0, x0, #1
     3e4:	add	x0, x1, x0
     3e8:	ldrh	w0, [x0]
     3ec:	and	w0, w0, #0x2000
     3f0:	cmp	w0, #0x0
     3f4:	b.ne	3c0 <parse_schedule+0x3b0>  // b.any
     3f8:	ldr	x0, [sp, #16]
     3fc:	ldrb	w0, [x0]
     400:	cmp	w0, #0x0
     404:	b.ne	494 <parse_schedule+0x484>  // b.any
     408:	ldr	x0, [sp, #32]
     40c:	sxtw	x0, w0
     410:	ldr	x1, [sp, #32]
     414:	cmp	x1, x0
     418:	b.ne	49c <parse_schedule+0x48c>  // b.any
     41c:	ldr	x0, [sp, #32]
     420:	cmp	x0, #0x0
     424:	b.ne	448 <parse_schedule+0x438>  // b.any
     428:	adrp	x0, 0 <omp_check_defines>
     42c:	add	x0, x0, #0x0
     430:	ldr	w0, [x0, #8]
     434:	and	w0, w0, #0x7fffffff
     438:	cmp	w0, #0x1
     43c:	b.eq	448 <parse_schedule+0x438>  // b.none
     440:	mov	x0, #0x1                   	// #1
     444:	str	x0, [sp, #32]
     448:	ldr	x0, [sp, #32]
     44c:	mov	w1, w0
     450:	adrp	x0, 0 <omp_check_defines>
     454:	add	x0, x0, #0x0
     458:	str	w1, [x0, #12]
     45c:	b	4b4 <parse_schedule+0x4a4>
     460:	nop
     464:	b	474 <parse_schedule+0x464>
     468:	nop
     46c:	b	474 <parse_schedule+0x464>
     470:	nop
     474:	adrp	x0, 0 <omp_check_defines>
     478:	add	x0, x0, #0x0
     47c:	bl	0 <gomp_error>
     480:	b	4b4 <parse_schedule+0x4a4>
     484:	nop
     488:	b	4a0 <parse_schedule+0x490>
     48c:	nop
     490:	b	4a0 <parse_schedule+0x490>
     494:	nop
     498:	b	4a0 <parse_schedule+0x490>
     49c:	nop
     4a0:	adrp	x0, 0 <omp_check_defines>
     4a4:	add	x0, x0, #0x0
     4a8:	bl	0 <gomp_error>
     4ac:	b	4b4 <parse_schedule+0x4a4>
     4b0:	nop
     4b4:	ldp	x29, x30, [sp], #48
     4b8:	ret

00000000000004bc <parse_unsigned_long_1>:
     4bc:	stp	x29, x30, [sp, #-80]!
     4c0:	mov	x29, sp
     4c4:	str	x0, [sp, #40]
     4c8:	str	x1, [sp, #32]
     4cc:	strb	w2, [sp, #31]
     4d0:	strb	w3, [sp, #30]
     4d4:	ldrb	w0, [sp, #30]
     4d8:	cmp	w0, #0x0
     4dc:	b.eq	4ec <parse_unsigned_long_1+0x30>  // b.none
     4e0:	ldr	x0, [sp, #40]
     4e4:	bl	0 <secure_getenv>
     4e8:	b	4f4 <parse_unsigned_long_1+0x38>
     4ec:	ldr	x0, [sp, #40]
     4f0:	bl	0 <getenv>
     4f4:	str	x0, [sp, #72]
     4f8:	ldr	x0, [sp, #72]
     4fc:	cmp	x0, #0x0
     500:	b.ne	518 <parse_unsigned_long_1+0x5c>  // b.any
     504:	mov	w0, #0x0                   	// #0
     508:	b	624 <parse_unsigned_long_1+0x168>
     50c:	ldr	x0, [sp, #72]
     510:	add	x0, x0, #0x1
     514:	str	x0, [sp, #72]
     518:	bl	0 <__ctype_b_loc>
     51c:	ldr	x1, [x0]
     520:	ldr	x0, [sp, #72]
     524:	ldrb	w0, [x0]
     528:	and	x0, x0, #0xff
     52c:	lsl	x0, x0, #1
     530:	add	x0, x1, x0
     534:	ldrh	w0, [x0]
     538:	and	w0, w0, #0x2000
     53c:	cmp	w0, #0x0
     540:	b.ne	50c <parse_unsigned_long_1+0x50>  // b.any
     544:	ldr	x0, [sp, #72]
     548:	ldrb	w0, [x0]
     54c:	cmp	w0, #0x0
     550:	b.eq	5fc <parse_unsigned_long_1+0x140>  // b.none
     554:	bl	0 <__errno_location>
     558:	str	wzr, [x0]
     55c:	add	x0, sp, #0x38
     560:	mov	w2, #0xa                   	// #10
     564:	mov	x1, x0
     568:	ldr	x0, [sp, #72]
     56c:	bl	0 <strtoul>
     570:	str	x0, [sp, #64]
     574:	bl	0 <__errno_location>
     578:	ldr	w0, [x0]
     57c:	cmp	w0, #0x0
     580:	b.ne	604 <parse_unsigned_long_1+0x148>  // b.any
     584:	ldrb	w0, [sp, #31]
     588:	neg	w0, w0
     58c:	sxtw	x1, w0
     590:	ldr	x0, [sp, #64]
     594:	cmp	x1, x0
     598:	b.ge	604 <parse_unsigned_long_1+0x148>  // b.tcont
     59c:	b	5ac <parse_unsigned_long_1+0xf0>
     5a0:	ldr	x0, [sp, #56]
     5a4:	add	x0, x0, #0x1
     5a8:	str	x0, [sp, #56]
     5ac:	bl	0 <__ctype_b_loc>
     5b0:	ldr	x1, [x0]
     5b4:	ldr	x0, [sp, #56]
     5b8:	ldrb	w0, [x0]
     5bc:	and	x0, x0, #0xff
     5c0:	lsl	x0, x0, #1
     5c4:	add	x0, x1, x0
     5c8:	ldrh	w0, [x0]
     5cc:	and	w0, w0, #0x2000
     5d0:	cmp	w0, #0x0
     5d4:	b.ne	5a0 <parse_unsigned_long_1+0xe4>  // b.any
     5d8:	ldr	x0, [sp, #56]
     5dc:	ldrb	w0, [x0]
     5e0:	cmp	w0, #0x0
     5e4:	b.ne	60c <parse_unsigned_long_1+0x150>  // b.any
     5e8:	ldr	x0, [sp, #32]
     5ec:	ldr	x1, [sp, #64]
     5f0:	str	x1, [x0]
     5f4:	mov	w0, #0x1                   	// #1
     5f8:	b	624 <parse_unsigned_long_1+0x168>
     5fc:	nop
     600:	b	610 <parse_unsigned_long_1+0x154>
     604:	nop
     608:	b	610 <parse_unsigned_long_1+0x154>
     60c:	nop
     610:	ldr	x1, [sp, #40]
     614:	adrp	x0, 0 <omp_check_defines>
     618:	add	x0, x0, #0x0
     61c:	bl	0 <gomp_error>
     620:	mov	w0, #0x0                   	// #0
     624:	ldp	x29, x30, [sp], #80
     628:	ret

000000000000062c <parse_unsigned_long>:
     62c:	stp	x29, x30, [sp, #-48]!
     630:	mov	x29, sp
     634:	str	x0, [sp, #40]
     638:	str	x1, [sp, #32]
     63c:	strb	w2, [sp, #31]
     640:	mov	w3, #0x0                   	// #0
     644:	ldrb	w2, [sp, #31]
     648:	ldr	x1, [sp, #32]
     64c:	ldr	x0, [sp, #40]
     650:	bl	4bc <parse_unsigned_long_1>
     654:	and	w0, w0, #0xff
     658:	ldp	x29, x30, [sp], #48
     65c:	ret

0000000000000660 <parse_int_1>:
     660:	stp	x29, x30, [sp, #-64]!
     664:	mov	x29, sp
     668:	str	x0, [sp, #40]
     66c:	str	x1, [sp, #32]
     670:	strb	w2, [sp, #31]
     674:	strb	w3, [sp, #30]
     678:	add	x0, sp, #0x38
     67c:	ldrb	w3, [sp, #30]
     680:	ldrb	w2, [sp, #31]
     684:	mov	x1, x0
     688:	ldr	x0, [sp, #40]
     68c:	bl	4bc <parse_unsigned_long_1>
     690:	and	w0, w0, #0xff
     694:	eor	w0, w0, #0x1
     698:	and	w0, w0, #0xff
     69c:	cmp	w0, #0x0
     6a0:	b.eq	6ac <parse_int_1+0x4c>  // b.none
     6a4:	mov	w0, #0x0                   	// #0
     6a8:	b	6e8 <parse_int_1+0x88>
     6ac:	ldr	x1, [sp, #56]
     6b0:	mov	x0, #0x7fffffff            	// #2147483647
     6b4:	cmp	x1, x0
     6b8:	b.ls	6d4 <parse_int_1+0x74>  // b.plast
     6bc:	ldr	x1, [sp, #40]
     6c0:	adrp	x0, 0 <omp_check_defines>
     6c4:	add	x0, x0, #0x0
     6c8:	bl	0 <gomp_error>
     6cc:	mov	w0, #0x0                   	// #0
     6d0:	b	6e8 <parse_int_1+0x88>
     6d4:	ldr	x0, [sp, #56]
     6d8:	mov	w1, w0
     6dc:	ldr	x0, [sp, #32]
     6e0:	str	w1, [x0]
     6e4:	mov	w0, #0x1                   	// #1
     6e8:	ldp	x29, x30, [sp], #64
     6ec:	ret

00000000000006f0 <parse_int>:
     6f0:	stp	x29, x30, [sp, #-48]!
     6f4:	mov	x29, sp
     6f8:	str	x0, [sp, #40]
     6fc:	str	x1, [sp, #32]
     700:	strb	w2, [sp, #31]
     704:	mov	w3, #0x0                   	// #0
     708:	ldrb	w2, [sp, #31]
     70c:	ldr	x1, [sp, #32]
     710:	ldr	x0, [sp, #40]
     714:	bl	660 <parse_int_1>
     718:	and	w0, w0, #0xff
     71c:	ldp	x29, x30, [sp], #48
     720:	ret

0000000000000724 <parse_int_secure>:
     724:	stp	x29, x30, [sp, #-48]!
     728:	mov	x29, sp
     72c:	str	x0, [sp, #40]
     730:	str	x1, [sp, #32]
     734:	strb	w2, [sp, #31]
     738:	mov	w3, #0x1                   	// #1
     73c:	ldrb	w2, [sp, #31]
     740:	ldr	x1, [sp, #32]
     744:	ldr	x0, [sp, #40]
     748:	bl	660 <parse_int_1>
     74c:	and	w0, w0, #0xff
     750:	ldp	x29, x30, [sp], #48
     754:	ret

0000000000000758 <parse_unsigned_long_list>:
     758:	stp	x29, x30, [sp, #-112]!
     75c:	mov	x29, sp
     760:	str	x0, [sp, #40]
     764:	str	x1, [sp, #32]
     768:	str	x2, [sp, #24]
     76c:	str	x3, [sp, #16]
     770:	str	xzr, [sp, #88]
     774:	ldr	x0, [sp, #40]
     778:	bl	0 <getenv>
     77c:	str	x0, [sp, #104]
     780:	ldr	x0, [sp, #104]
     784:	cmp	x0, #0x0
     788:	b.ne	7a0 <parse_unsigned_long_list+0x48>  // b.any
     78c:	mov	w0, #0x0                   	// #0
     790:	b	ac8 <parse_unsigned_long_list+0x370>
     794:	ldr	x0, [sp, #104]
     798:	add	x0, x0, #0x1
     79c:	str	x0, [sp, #104]
     7a0:	bl	0 <__ctype_b_loc>
     7a4:	ldr	x1, [x0]
     7a8:	ldr	x0, [sp, #104]
     7ac:	ldrb	w0, [x0]
     7b0:	and	x0, x0, #0xff
     7b4:	lsl	x0, x0, #1
     7b8:	add	x0, x1, x0
     7bc:	ldrh	w0, [x0]
     7c0:	and	w0, w0, #0x2000
     7c4:	cmp	w0, #0x0
     7c8:	b.ne	794 <parse_unsigned_long_list+0x3c>  // b.any
     7cc:	ldr	x0, [sp, #104]
     7d0:	ldrb	w0, [x0]
     7d4:	cmp	w0, #0x0
     7d8:	b.eq	a80 <parse_unsigned_long_list+0x328>  // b.none
     7dc:	bl	0 <__errno_location>
     7e0:	str	wzr, [x0]
     7e4:	add	x0, sp, #0x38
     7e8:	mov	w2, #0xa                   	// #10
     7ec:	mov	x1, x0
     7f0:	ldr	x0, [sp, #104]
     7f4:	bl	0 <strtoul>
     7f8:	str	x0, [sp, #96]
     7fc:	bl	0 <__errno_location>
     800:	ldr	w0, [x0]
     804:	cmp	w0, #0x0
     808:	b.ne	a88 <parse_unsigned_long_list+0x330>  // b.any
     80c:	ldr	x0, [sp, #96]
     810:	cmp	x0, #0x0
     814:	b.le	a88 <parse_unsigned_long_list+0x330>
     818:	b	828 <parse_unsigned_long_list+0xd0>
     81c:	ldr	x0, [sp, #56]
     820:	add	x0, x0, #0x1
     824:	str	x0, [sp, #56]
     828:	bl	0 <__ctype_b_loc>
     82c:	ldr	x1, [x0]
     830:	ldr	x0, [sp, #56]
     834:	ldrb	w0, [x0]
     838:	and	x0, x0, #0xff
     83c:	lsl	x0, x0, #1
     840:	add	x0, x1, x0
     844:	ldrh	w0, [x0]
     848:	and	w0, w0, #0x2000
     84c:	cmp	w0, #0x0
     850:	b.ne	81c <parse_unsigned_long_list+0xc4>  // b.any
     854:	ldr	x0, [sp, #56]
     858:	ldrb	w0, [x0]
     85c:	cmp	w0, #0x0
     860:	b.eq	a6c <parse_unsigned_long_list+0x314>  // b.none
     864:	ldr	x0, [sp, #56]
     868:	ldrb	w0, [x0]
     86c:	cmp	w0, #0x2c
     870:	b.ne	a90 <parse_unsigned_long_list+0x338>  // b.any
     874:	str	xzr, [sp, #80]
     878:	str	xzr, [sp, #72]
     87c:	ldr	x0, [sp, #56]
     880:	add	x0, x0, #0x1
     884:	str	x0, [sp, #104]
     888:	ldr	x1, [sp, #80]
     88c:	ldr	x0, [sp, #72]
     890:	cmp	x1, x0
     894:	b.ne	940 <parse_unsigned_long_list+0x1e8>  // b.any
     898:	ldr	x0, [sp, #72]
     89c:	cmp	x0, #0x0
     8a0:	b.eq	8b0 <parse_unsigned_long_list+0x158>  // b.none
     8a4:	ldr	x0, [sp, #72]
     8a8:	lsl	x0, x0, #1
     8ac:	b	8b4 <parse_unsigned_long_list+0x15c>
     8b0:	mov	x0, #0x10                  	// #16
     8b4:	str	x0, [sp, #72]
     8b8:	ldr	x0, [sp, #72]
     8bc:	lsl	x0, x0, #3
     8c0:	mov	x1, x0
     8c4:	ldr	x0, [sp, #88]
     8c8:	bl	0 <realloc>
     8cc:	str	x0, [sp, #64]
     8d0:	ldr	x0, [sp, #64]
     8d4:	cmp	x0, #0x0
     8d8:	b.ne	8fc <parse_unsigned_long_list+0x1a4>  // b.any
     8dc:	ldr	x0, [sp, #88]
     8e0:	bl	0 <free>
     8e4:	ldr	x1, [sp, #40]
     8e8:	adrp	x0, 0 <omp_check_defines>
     8ec:	add	x0, x0, #0x0
     8f0:	bl	0 <gomp_error>
     8f4:	mov	w0, #0x0                   	// #0
     8f8:	b	ac8 <parse_unsigned_long_list+0x370>
     8fc:	ldr	x0, [sp, #64]
     900:	str	x0, [sp, #88]
     904:	ldr	x0, [sp, #80]
     908:	cmp	x0, #0x0
     90c:	b.ne	940 <parse_unsigned_long_list+0x1e8>  // b.any
     910:	ldr	x0, [sp, #80]
     914:	add	x1, x0, #0x1
     918:	str	x1, [sp, #80]
     91c:	lsl	x0, x0, #3
     920:	ldr	x1, [sp, #88]
     924:	add	x0, x1, x0
     928:	ldr	x1, [sp, #96]
     92c:	str	x1, [x0]
     930:	b	940 <parse_unsigned_long_list+0x1e8>
     934:	ldr	x0, [sp, #104]
     938:	add	x0, x0, #0x1
     93c:	str	x0, [sp, #104]
     940:	bl	0 <__ctype_b_loc>
     944:	ldr	x1, [x0]
     948:	ldr	x0, [sp, #104]
     94c:	ldrb	w0, [x0]
     950:	and	x0, x0, #0xff
     954:	lsl	x0, x0, #1
     958:	add	x0, x1, x0
     95c:	ldrh	w0, [x0]
     960:	and	w0, w0, #0x2000
     964:	cmp	w0, #0x0
     968:	b.ne	934 <parse_unsigned_long_list+0x1dc>  // b.any
     96c:	ldr	x0, [sp, #104]
     970:	ldrb	w0, [x0]
     974:	cmp	w0, #0x0
     978:	b.eq	a98 <parse_unsigned_long_list+0x340>  // b.none
     97c:	bl	0 <__errno_location>
     980:	str	wzr, [x0]
     984:	add	x0, sp, #0x38
     988:	mov	w2, #0xa                   	// #10
     98c:	mov	x1, x0
     990:	ldr	x0, [sp, #104]
     994:	bl	0 <strtoul>
     998:	str	x0, [sp, #96]
     99c:	bl	0 <__errno_location>
     9a0:	ldr	w0, [x0]
     9a4:	cmp	w0, #0x0
     9a8:	b.ne	aa0 <parse_unsigned_long_list+0x348>  // b.any
     9ac:	ldr	x0, [sp, #96]
     9b0:	cmp	x0, #0x0
     9b4:	b.le	aa0 <parse_unsigned_long_list+0x348>
     9b8:	ldr	x0, [sp, #80]
     9bc:	add	x1, x0, #0x1
     9c0:	str	x1, [sp, #80]
     9c4:	lsl	x0, x0, #3
     9c8:	ldr	x1, [sp, #88]
     9cc:	add	x0, x1, x0
     9d0:	ldr	x1, [sp, #96]
     9d4:	str	x1, [x0]
     9d8:	b	9e8 <parse_unsigned_long_list+0x290>
     9dc:	ldr	x0, [sp, #56]
     9e0:	add	x0, x0, #0x1
     9e4:	str	x0, [sp, #56]
     9e8:	bl	0 <__ctype_b_loc>
     9ec:	ldr	x1, [x0]
     9f0:	ldr	x0, [sp, #56]
     9f4:	ldrb	w0, [x0]
     9f8:	and	x0, x0, #0xff
     9fc:	lsl	x0, x0, #1
     a00:	add	x0, x1, x0
     a04:	ldrh	w0, [x0]
     a08:	and	w0, w0, #0x2000
     a0c:	cmp	w0, #0x0
     a10:	b.ne	9dc <parse_unsigned_long_list+0x284>  // b.any
     a14:	ldr	x0, [sp, #56]
     a18:	ldrb	w0, [x0]
     a1c:	cmp	w0, #0x0
     a20:	b.eq	a38 <parse_unsigned_long_list+0x2e0>  // b.none
     a24:	ldr	x0, [sp, #56]
     a28:	ldrb	w0, [x0]
     a2c:	cmp	w0, #0x2c
     a30:	b.ne	aa8 <parse_unsigned_long_list+0x350>  // b.any
     a34:	b	87c <parse_unsigned_long_list+0x124>
     a38:	nop
     a3c:	ldr	x0, [sp, #88]
     a40:	ldr	x1, [x0]
     a44:	ldr	x0, [sp, #32]
     a48:	str	x1, [x0]
     a4c:	ldr	x0, [sp, #24]
     a50:	ldr	x1, [sp, #88]
     a54:	str	x1, [x0]
     a58:	ldr	x0, [sp, #16]
     a5c:	ldr	x1, [sp, #80]
     a60:	str	x1, [x0]
     a64:	mov	w0, #0x1                   	// #1
     a68:	b	ac8 <parse_unsigned_long_list+0x370>
     a6c:	ldr	x0, [sp, #32]
     a70:	ldr	x1, [sp, #96]
     a74:	str	x1, [x0]
     a78:	mov	w0, #0x1                   	// #1
     a7c:	b	ac8 <parse_unsigned_long_list+0x370>
     a80:	nop
     a84:	b	aac <parse_unsigned_long_list+0x354>
     a88:	nop
     a8c:	b	aac <parse_unsigned_long_list+0x354>
     a90:	nop
     a94:	b	aac <parse_unsigned_long_list+0x354>
     a98:	nop
     a9c:	b	aac <parse_unsigned_long_list+0x354>
     aa0:	nop
     aa4:	b	aac <parse_unsigned_long_list+0x354>
     aa8:	nop
     aac:	ldr	x0, [sp, #88]
     ab0:	bl	0 <free>
     ab4:	ldr	x1, [sp, #40]
     ab8:	adrp	x0, 0 <omp_check_defines>
     abc:	add	x0, x0, #0x0
     ac0:	bl	0 <gomp_error>
     ac4:	mov	w0, #0x0                   	// #0
     ac8:	ldp	x29, x30, [sp], #112
     acc:	ret

0000000000000ad0 <parse_bind_var>:
     ad0:	stp	x29, x30, [sp, #-112]!
     ad4:	mov	x29, sp
     ad8:	str	x0, [sp, #40]
     adc:	str	x1, [sp, #32]
     ae0:	str	x2, [sp, #24]
     ae4:	str	x3, [sp, #16]
     ae8:	strb	wzr, [sp, #103]
     aec:	str	xzr, [sp, #88]
     af0:	ldr	x0, [sp, #40]
     af4:	bl	0 <getenv>
     af8:	str	x0, [sp, #104]
     afc:	ldr	x0, [sp, #104]
     b00:	cmp	x0, #0x0
     b04:	b.ne	b1c <parse_bind_var+0x4c>  // b.any
     b08:	mov	w0, #0x0                   	// #0
     b0c:	b	fb8 <parse_bind_var+0x4e8>
     b10:	ldr	x0, [sp, #104]
     b14:	add	x0, x0, #0x1
     b18:	str	x0, [sp, #104]
     b1c:	bl	0 <__ctype_b_loc>
     b20:	ldr	x1, [x0]
     b24:	ldr	x0, [sp, #104]
     b28:	ldrb	w0, [x0]
     b2c:	and	x0, x0, #0xff
     b30:	lsl	x0, x0, #1
     b34:	add	x0, x1, x0
     b38:	ldrh	w0, [x0]
     b3c:	and	w0, w0, #0x2000
     b40:	cmp	w0, #0x0
     b44:	b.ne	b10 <parse_bind_var+0x40>  // b.any
     b48:	ldr	x0, [sp, #104]
     b4c:	ldrb	w0, [x0]
     b50:	cmp	w0, #0x0
     b54:	b.eq	f68 <parse_bind_var+0x498>  // b.none
     b58:	str	wzr, [sp, #84]
     b5c:	b	c2c <parse_bind_var+0x15c>
     b60:	ldrsw	x1, [sp, #84]
     b64:	mov	x0, x1
     b68:	lsl	x0, x0, #1
     b6c:	add	x0, x0, x1
     b70:	lsl	x0, x0, #2
     b74:	adrp	x1, 0 <omp_check_defines>
     b78:	add	x1, x1, #0x0
     b7c:	add	x3, x0, x1
     b80:	adrp	x0, 0 <omp_check_defines>
     b84:	add	x2, x0, #0x0
     b88:	ldrsw	x1, [sp, #84]
     b8c:	mov	x0, x1
     b90:	lsl	x0, x0, #1
     b94:	add	x0, x0, x1
     b98:	lsl	x0, x0, #2
     b9c:	add	x0, x2, x0
     ba0:	ldrb	w0, [x0, #7]
     ba4:	and	x0, x0, #0xff
     ba8:	mov	x2, x0
     bac:	mov	x1, x3
     bb0:	ldr	x0, [sp, #104]
     bb4:	bl	0 <strncasecmp>
     bb8:	cmp	w0, #0x0
     bbc:	b.ne	c20 <parse_bind_var+0x150>  // b.any
     bc0:	adrp	x0, 0 <omp_check_defines>
     bc4:	add	x2, x0, #0x0
     bc8:	ldrsw	x1, [sp, #84]
     bcc:	mov	x0, x1
     bd0:	lsl	x0, x0, #1
     bd4:	add	x0, x0, x1
     bd8:	lsl	x0, x0, #2
     bdc:	add	x0, x2, x0
     be0:	ldr	w0, [x0, #8]
     be4:	strb	w0, [sp, #103]
     be8:	adrp	x0, 0 <omp_check_defines>
     bec:	add	x2, x0, #0x0
     bf0:	ldrsw	x1, [sp, #84]
     bf4:	mov	x0, x1
     bf8:	lsl	x0, x0, #1
     bfc:	add	x0, x0, x1
     c00:	lsl	x0, x0, #2
     c04:	add	x0, x2, x0
     c08:	ldrb	w0, [x0, #7]
     c0c:	and	x0, x0, #0xff
     c10:	ldr	x1, [sp, #104]
     c14:	add	x0, x1, x0
     c18:	str	x0, [sp, #104]
     c1c:	b	c38 <parse_bind_var+0x168>
     c20:	ldr	w0, [sp, #84]
     c24:	add	w0, w0, #0x1
     c28:	str	w0, [sp, #84]
     c2c:	ldr	w0, [sp, #84]
     c30:	cmp	w0, #0x4
     c34:	b.le	b60 <parse_bind_var+0x90>
     c38:	ldr	w0, [sp, #84]
     c3c:	cmp	w0, #0x5
     c40:	b.eq	f70 <parse_bind_var+0x4a0>  // b.none
     c44:	b	c54 <parse_bind_var+0x184>
     c48:	ldr	x0, [sp, #104]
     c4c:	add	x0, x0, #0x1
     c50:	str	x0, [sp, #104]
     c54:	bl	0 <__ctype_b_loc>
     c58:	ldr	x1, [x0]
     c5c:	ldr	x0, [sp, #104]
     c60:	ldrb	w0, [x0]
     c64:	and	x0, x0, #0xff
     c68:	lsl	x0, x0, #1
     c6c:	add	x0, x1, x0
     c70:	ldrh	w0, [x0]
     c74:	and	w0, w0, #0x2000
     c78:	cmp	w0, #0x0
     c7c:	b.ne	c48 <parse_bind_var+0x178>  // b.any
     c80:	ldr	x0, [sp, #104]
     c84:	ldrb	w0, [x0]
     c88:	cmp	w0, #0x0
     c8c:	b.eq	f54 <parse_bind_var+0x484>  // b.none
     c90:	ldr	x0, [sp, #104]
     c94:	ldrb	w0, [x0]
     c98:	cmp	w0, #0x2c
     c9c:	b.ne	f78 <parse_bind_var+0x4a8>  // b.any
     ca0:	str	xzr, [sp, #72]
     ca4:	str	xzr, [sp, #64]
     ca8:	ldrb	w0, [sp, #103]
     cac:	cmp	w0, #0x0
     cb0:	b.eq	f80 <parse_bind_var+0x4b0>  // b.none
     cb4:	ldrb	w0, [sp, #103]
     cb8:	cmp	w0, #0x1
     cbc:	b.eq	f80 <parse_bind_var+0x4b0>  // b.none
     cc0:	ldr	x0, [sp, #104]
     cc4:	add	x0, x0, #0x1
     cc8:	str	x0, [sp, #104]
     ccc:	ldr	x1, [sp, #72]
     cd0:	ldr	x0, [sp, #64]
     cd4:	cmp	x1, x0
     cd8:	b.ne	d78 <parse_bind_var+0x2a8>  // b.any
     cdc:	ldr	x0, [sp, #64]
     ce0:	cmp	x0, #0x0
     ce4:	b.eq	cf4 <parse_bind_var+0x224>  // b.none
     ce8:	ldr	x0, [sp, #64]
     cec:	lsl	x0, x0, #1
     cf0:	b	cf8 <parse_bind_var+0x228>
     cf4:	mov	x0, #0x10                  	// #16
     cf8:	str	x0, [sp, #64]
     cfc:	ldr	x1, [sp, #64]
     d00:	ldr	x0, [sp, #88]
     d04:	bl	0 <realloc>
     d08:	str	x0, [sp, #56]
     d0c:	ldr	x0, [sp, #56]
     d10:	cmp	x0, #0x0
     d14:	b.ne	d38 <parse_bind_var+0x268>  // b.any
     d18:	ldr	x0, [sp, #88]
     d1c:	bl	0 <free>
     d20:	ldr	x1, [sp, #40]
     d24:	adrp	x0, 0 <omp_check_defines>
     d28:	add	x0, x0, #0x0
     d2c:	bl	0 <gomp_error>
     d30:	mov	w0, #0x0                   	// #0
     d34:	b	fb8 <parse_bind_var+0x4e8>
     d38:	ldr	x0, [sp, #56]
     d3c:	str	x0, [sp, #88]
     d40:	ldr	x0, [sp, #72]
     d44:	cmp	x0, #0x0
     d48:	b.ne	d78 <parse_bind_var+0x2a8>  // b.any
     d4c:	ldr	x0, [sp, #72]
     d50:	add	x1, x0, #0x1
     d54:	str	x1, [sp, #72]
     d58:	ldr	x1, [sp, #88]
     d5c:	add	x0, x1, x0
     d60:	ldrb	w1, [sp, #103]
     d64:	strb	w1, [x0]
     d68:	b	d78 <parse_bind_var+0x2a8>
     d6c:	ldr	x0, [sp, #104]
     d70:	add	x0, x0, #0x1
     d74:	str	x0, [sp, #104]
     d78:	bl	0 <__ctype_b_loc>
     d7c:	ldr	x1, [x0]
     d80:	ldr	x0, [sp, #104]
     d84:	ldrb	w0, [x0]
     d88:	and	x0, x0, #0xff
     d8c:	lsl	x0, x0, #1
     d90:	add	x0, x1, x0
     d94:	ldrh	w0, [x0]
     d98:	and	w0, w0, #0x2000
     d9c:	cmp	w0, #0x0
     da0:	b.ne	d6c <parse_bind_var+0x29c>  // b.any
     da4:	ldr	x0, [sp, #104]
     da8:	ldrb	w0, [x0]
     dac:	cmp	w0, #0x0
     db0:	b.eq	f88 <parse_bind_var+0x4b8>  // b.none
     db4:	mov	w0, #0x2                   	// #2
     db8:	str	w0, [sp, #84]
     dbc:	b	e8c <parse_bind_var+0x3bc>
     dc0:	ldrsw	x1, [sp, #84]
     dc4:	mov	x0, x1
     dc8:	lsl	x0, x0, #1
     dcc:	add	x0, x0, x1
     dd0:	lsl	x0, x0, #2
     dd4:	adrp	x1, 0 <omp_check_defines>
     dd8:	add	x1, x1, #0x0
     ddc:	add	x3, x0, x1
     de0:	adrp	x0, 0 <omp_check_defines>
     de4:	add	x2, x0, #0x0
     de8:	ldrsw	x1, [sp, #84]
     dec:	mov	x0, x1
     df0:	lsl	x0, x0, #1
     df4:	add	x0, x0, x1
     df8:	lsl	x0, x0, #2
     dfc:	add	x0, x2, x0
     e00:	ldrb	w0, [x0, #7]
     e04:	and	x0, x0, #0xff
     e08:	mov	x2, x0
     e0c:	mov	x1, x3
     e10:	ldr	x0, [sp, #104]
     e14:	bl	0 <strncasecmp>
     e18:	cmp	w0, #0x0
     e1c:	b.ne	e80 <parse_bind_var+0x3b0>  // b.any
     e20:	adrp	x0, 0 <omp_check_defines>
     e24:	add	x2, x0, #0x0
     e28:	ldrsw	x1, [sp, #84]
     e2c:	mov	x0, x1
     e30:	lsl	x0, x0, #1
     e34:	add	x0, x0, x1
     e38:	lsl	x0, x0, #2
     e3c:	add	x0, x2, x0
     e40:	ldr	w0, [x0, #8]
     e44:	strb	w0, [sp, #103]
     e48:	adrp	x0, 0 <omp_check_defines>
     e4c:	add	x2, x0, #0x0
     e50:	ldrsw	x1, [sp, #84]
     e54:	mov	x0, x1
     e58:	lsl	x0, x0, #1
     e5c:	add	x0, x0, x1
     e60:	lsl	x0, x0, #2
     e64:	add	x0, x2, x0
     e68:	ldrb	w0, [x0, #7]
     e6c:	and	x0, x0, #0xff
     e70:	ldr	x1, [sp, #104]
     e74:	add	x0, x1, x0
     e78:	str	x0, [sp, #104]
     e7c:	b	e98 <parse_bind_var+0x3c8>
     e80:	ldr	w0, [sp, #84]
     e84:	add	w0, w0, #0x1
     e88:	str	w0, [sp, #84]
     e8c:	ldr	w0, [sp, #84]
     e90:	cmp	w0, #0x4
     e94:	b.le	dc0 <parse_bind_var+0x2f0>
     e98:	ldr	w0, [sp, #84]
     e9c:	cmp	w0, #0x5
     ea0:	b.eq	f90 <parse_bind_var+0x4c0>  // b.none
     ea4:	ldr	x0, [sp, #72]
     ea8:	add	x1, x0, #0x1
     eac:	str	x1, [sp, #72]
     eb0:	ldr	x1, [sp, #88]
     eb4:	add	x0, x1, x0
     eb8:	ldrb	w1, [sp, #103]
     ebc:	strb	w1, [x0]
     ec0:	b	ed0 <parse_bind_var+0x400>
     ec4:	ldr	x0, [sp, #104]
     ec8:	add	x0, x0, #0x1
     ecc:	str	x0, [sp, #104]
     ed0:	bl	0 <__ctype_b_loc>
     ed4:	ldr	x1, [x0]
     ed8:	ldr	x0, [sp, #104]
     edc:	ldrb	w0, [x0]
     ee0:	and	x0, x0, #0xff
     ee4:	lsl	x0, x0, #1
     ee8:	add	x0, x1, x0
     eec:	ldrh	w0, [x0]
     ef0:	and	w0, w0, #0x2000
     ef4:	cmp	w0, #0x0
     ef8:	b.ne	ec4 <parse_bind_var+0x3f4>  // b.any
     efc:	ldr	x0, [sp, #104]
     f00:	ldrb	w0, [x0]
     f04:	cmp	w0, #0x0
     f08:	b.eq	f20 <parse_bind_var+0x450>  // b.none
     f0c:	ldr	x0, [sp, #104]
     f10:	ldrb	w0, [x0]
     f14:	cmp	w0, #0x2c
     f18:	b.ne	f98 <parse_bind_var+0x4c8>  // b.any
     f1c:	b	cc0 <parse_bind_var+0x1f0>
     f20:	nop
     f24:	ldr	x0, [sp, #88]
     f28:	ldrb	w1, [x0]
     f2c:	ldr	x0, [sp, #32]
     f30:	strb	w1, [x0]
     f34:	ldr	x0, [sp, #24]
     f38:	ldr	x1, [sp, #88]
     f3c:	str	x1, [x0]
     f40:	ldr	x0, [sp, #16]
     f44:	ldr	x1, [sp, #72]
     f48:	str	x1, [x0]
     f4c:	mov	w0, #0x1                   	// #1
     f50:	b	fb8 <parse_bind_var+0x4e8>
     f54:	ldr	x0, [sp, #32]
     f58:	ldrb	w1, [sp, #103]
     f5c:	strb	w1, [x0]
     f60:	mov	w0, #0x1                   	// #1
     f64:	b	fb8 <parse_bind_var+0x4e8>
     f68:	nop
     f6c:	b	f9c <parse_bind_var+0x4cc>
     f70:	nop
     f74:	b	f9c <parse_bind_var+0x4cc>
     f78:	nop
     f7c:	b	f9c <parse_bind_var+0x4cc>
     f80:	nop
     f84:	b	f9c <parse_bind_var+0x4cc>
     f88:	nop
     f8c:	b	f9c <parse_bind_var+0x4cc>
     f90:	nop
     f94:	b	f9c <parse_bind_var+0x4cc>
     f98:	nop
     f9c:	ldr	x0, [sp, #88]
     fa0:	bl	0 <free>
     fa4:	ldr	x1, [sp, #40]
     fa8:	adrp	x0, 0 <omp_check_defines>
     fac:	add	x0, x0, #0x0
     fb0:	bl	0 <gomp_error>
     fb4:	mov	w0, #0x0                   	// #0
     fb8:	ldp	x29, x30, [sp], #112
     fbc:	ret

0000000000000fc0 <parse_one_place>:
     fc0:	stp	x29, x30, [sp, #-128]!
     fc4:	mov	x29, sp
     fc8:	str	x0, [sp, #40]
     fcc:	str	x1, [sp, #32]
     fd0:	str	x2, [sp, #24]
     fd4:	str	x3, [sp, #16]
     fd8:	ldr	x0, [sp, #40]
     fdc:	ldr	x0, [x0]
     fe0:	str	x0, [sp, #48]
     fe4:	adrp	x0, 8 <omp_check_defines+0x8>
     fe8:	add	x0, x0, #0x0
     fec:	ldr	x0, [x0]
     ff0:	cmp	x0, #0x0
     ff4:	b.eq	1020 <parse_one_place+0x60>  // b.none
     ff8:	adrp	x0, 8 <omp_check_defines+0x8>
     ffc:	add	x0, x0, #0x0
    1000:	ldr	x1, [x0]
    1004:	adrp	x0, 8 <omp_check_defines+0x8>
    1008:	add	x0, x0, #0x0
    100c:	ldr	x0, [x0]
    1010:	lsl	x0, x0, #3
    1014:	add	x0, x1, x0
    1018:	ldr	x0, [x0]
    101c:	b	1024 <parse_one_place+0x64>
    1020:	mov	x0, #0x0                   	// #0
    1024:	str	x0, [sp, #80]
    1028:	mov	x0, #0x1                   	// #1
    102c:	str	x0, [sp, #120]
    1030:	mov	x0, #0x1                   	// #1
    1034:	str	x0, [sp, #112]
    1038:	strb	wzr, [sp, #107]
    103c:	ldr	x0, [sp, #32]
    1040:	strb	wzr, [x0]
    1044:	b	1054 <parse_one_place+0x94>
    1048:	ldr	x0, [sp, #48]
    104c:	add	x0, x0, #0x1
    1050:	str	x0, [sp, #48]
    1054:	bl	0 <__ctype_b_loc>
    1058:	ldr	x1, [x0]
    105c:	ldr	x0, [sp, #48]
    1060:	ldrb	w0, [x0]
    1064:	and	x0, x0, #0xff
    1068:	lsl	x0, x0, #1
    106c:	add	x0, x1, x0
    1070:	ldrh	w0, [x0]
    1074:	and	w0, w0, #0x2000
    1078:	cmp	w0, #0x0
    107c:	b.ne	1048 <parse_one_place+0x88>  // b.any
    1080:	ldr	x0, [sp, #48]
    1084:	ldrb	w0, [x0]
    1088:	cmp	w0, #0x21
    108c:	b.ne	10e4 <parse_one_place+0x124>  // b.any
    1090:	ldr	x0, [sp, #32]
    1094:	mov	w1, #0x1                   	// #1
    1098:	strb	w1, [x0]
    109c:	ldr	x0, [sp, #48]
    10a0:	add	x0, x0, #0x1
    10a4:	str	x0, [sp, #48]
    10a8:	b	10b8 <parse_one_place+0xf8>
    10ac:	ldr	x0, [sp, #48]
    10b0:	add	x0, x0, #0x1
    10b4:	str	x0, [sp, #48]
    10b8:	bl	0 <__ctype_b_loc>
    10bc:	ldr	x1, [x0]
    10c0:	ldr	x0, [sp, #48]
    10c4:	ldrb	w0, [x0]
    10c8:	and	x0, x0, #0xff
    10cc:	lsl	x0, x0, #1
    10d0:	add	x0, x1, x0
    10d4:	ldrh	w0, [x0]
    10d8:	and	w0, w0, #0x2000
    10dc:	cmp	w0, #0x0
    10e0:	b.ne	10ac <parse_one_place+0xec>  // b.any
    10e4:	ldr	x0, [sp, #48]
    10e8:	ldrb	w0, [x0]
    10ec:	cmp	w0, #0x7b
    10f0:	b.eq	10fc <parse_one_place+0x13c>  // b.none
    10f4:	mov	w0, #0x0                   	// #0
    10f8:	b	1740 <parse_one_place+0x780>
    10fc:	ldr	x0, [sp, #48]
    1100:	add	x0, x0, #0x1
    1104:	str	x0, [sp, #48]
    1108:	b	1118 <parse_one_place+0x158>
    110c:	ldr	x0, [sp, #48]
    1110:	add	x0, x0, #0x1
    1114:	str	x0, [sp, #48]
    1118:	bl	0 <__ctype_b_loc>
    111c:	ldr	x1, [x0]
    1120:	ldr	x0, [sp, #48]
    1124:	ldrb	w0, [x0]
    1128:	and	x0, x0, #0xff
    112c:	lsl	x0, x0, #1
    1130:	add	x0, x1, x0
    1134:	ldrh	w0, [x0]
    1138:	and	w0, w0, #0x2000
    113c:	cmp	w0, #0x0
    1140:	b.ne	110c <parse_one_place+0x14c>  // b.any
    1144:	ldr	x0, [sp, #48]
    1148:	str	x0, [sp, #72]
    114c:	str	wzr, [sp, #108]
    1150:	b	14e4 <parse_one_place+0x524>
    1154:	ldr	x0, [sp, #72]
    1158:	str	x0, [sp, #48]
    115c:	mov	x0, #0x1                   	// #1
    1160:	str	x0, [sp, #96]
    1164:	mov	x0, #0x1                   	// #1
    1168:	str	x0, [sp, #88]
    116c:	ldr	x0, [sp, #48]
    1170:	ldrb	w0, [x0]
    1174:	cmp	w0, #0x21
    1178:	cset	w0, eq  // eq = none
    117c:	strb	w0, [sp, #71]
    1180:	ldrb	w0, [sp, #71]
    1184:	cmp	w0, #0x0
    1188:	b.eq	11f0 <parse_one_place+0x230>  // b.none
    118c:	adrp	x0, 8 <omp_check_defines+0x8>
    1190:	add	x0, x0, #0x0
    1194:	ldr	x0, [x0]
    1198:	cmp	x0, #0x0
    119c:	b.eq	11a8 <parse_one_place+0x1e8>  // b.none
    11a0:	mov	w0, #0x1                   	// #1
    11a4:	strb	w0, [sp, #107]
    11a8:	ldr	x0, [sp, #48]
    11ac:	add	x0, x0, #0x1
    11b0:	str	x0, [sp, #48]
    11b4:	b	11c4 <parse_one_place+0x204>
    11b8:	ldr	x0, [sp, #48]
    11bc:	add	x0, x0, #0x1
    11c0:	str	x0, [sp, #48]
    11c4:	bl	0 <__ctype_b_loc>
    11c8:	ldr	x1, [x0]
    11cc:	ldr	x0, [sp, #48]
    11d0:	ldrb	w0, [x0]
    11d4:	and	x0, x0, #0xff
    11d8:	lsl	x0, x0, #1
    11dc:	add	x0, x1, x0
    11e0:	ldrh	w0, [x0]
    11e4:	and	w0, w0, #0x2000
    11e8:	cmp	w0, #0x0
    11ec:	b.ne	11b8 <parse_one_place+0x1f8>  // b.any
    11f0:	bl	0 <__errno_location>
    11f4:	str	wzr, [x0]
    11f8:	ldr	x0, [sp, #48]
    11fc:	add	x1, sp, #0x30
    1200:	mov	w2, #0xa                   	// #10
    1204:	bl	0 <strtoul>
    1208:	str	x0, [sp, #56]
    120c:	bl	0 <__errno_location>
    1210:	ldr	w0, [x0]
    1214:	cmp	w0, #0x0
    1218:	b.eq	1230 <parse_one_place+0x270>  // b.none
    121c:	mov	w0, #0x0                   	// #0
    1220:	b	1740 <parse_one_place+0x780>
    1224:	ldr	x0, [sp, #48]
    1228:	add	x0, x0, #0x1
    122c:	str	x0, [sp, #48]
    1230:	bl	0 <__ctype_b_loc>
    1234:	ldr	x1, [x0]
    1238:	ldr	x0, [sp, #48]
    123c:	ldrb	w0, [x0]
    1240:	and	x0, x0, #0xff
    1244:	lsl	x0, x0, #1
    1248:	add	x0, x1, x0
    124c:	ldrh	w0, [x0]
    1250:	and	w0, w0, #0x2000
    1254:	cmp	w0, #0x0
    1258:	b.ne	1224 <parse_one_place+0x264>  // b.any
    125c:	ldr	x0, [sp, #48]
    1260:	ldrb	w0, [x0]
    1264:	cmp	w0, #0x3a
    1268:	b.ne	13f0 <parse_one_place+0x430>  // b.any
    126c:	ldr	x0, [sp, #48]
    1270:	add	x0, x0, #0x1
    1274:	str	x0, [sp, #48]
    1278:	b	1288 <parse_one_place+0x2c8>
    127c:	ldr	x0, [sp, #48]
    1280:	add	x0, x0, #0x1
    1284:	str	x0, [sp, #48]
    1288:	bl	0 <__ctype_b_loc>
    128c:	ldr	x1, [x0]
    1290:	ldr	x0, [sp, #48]
    1294:	ldrb	w0, [x0]
    1298:	and	x0, x0, #0xff
    129c:	lsl	x0, x0, #1
    12a0:	add	x0, x1, x0
    12a4:	ldrh	w0, [x0]
    12a8:	and	w0, w0, #0x2000
    12ac:	cmp	w0, #0x0
    12b0:	b.ne	127c <parse_one_place+0x2bc>  // b.any
    12b4:	bl	0 <__errno_location>
    12b8:	str	wzr, [x0]
    12bc:	ldr	x0, [sp, #48]
    12c0:	add	x1, sp, #0x30
    12c4:	mov	w2, #0xa                   	// #10
    12c8:	bl	0 <strtoul>
    12cc:	str	x0, [sp, #96]
    12d0:	bl	0 <__errno_location>
    12d4:	ldr	w0, [x0]
    12d8:	cmp	w0, #0x0
    12dc:	b.ne	12ec <parse_one_place+0x32c>  // b.any
    12e0:	ldr	x0, [sp, #96]
    12e4:	cmp	x0, #0x0
    12e8:	b.ne	1300 <parse_one_place+0x340>  // b.any
    12ec:	mov	w0, #0x0                   	// #0
    12f0:	b	1740 <parse_one_place+0x780>
    12f4:	ldr	x0, [sp, #48]
    12f8:	add	x0, x0, #0x1
    12fc:	str	x0, [sp, #48]
    1300:	bl	0 <__ctype_b_loc>
    1304:	ldr	x1, [x0]
    1308:	ldr	x0, [sp, #48]
    130c:	ldrb	w0, [x0]
    1310:	and	x0, x0, #0xff
    1314:	lsl	x0, x0, #1
    1318:	add	x0, x1, x0
    131c:	ldrh	w0, [x0]
    1320:	and	w0, w0, #0x2000
    1324:	cmp	w0, #0x0
    1328:	b.ne	12f4 <parse_one_place+0x334>  // b.any
    132c:	ldr	x0, [sp, #48]
    1330:	ldrb	w0, [x0]
    1334:	cmp	w0, #0x3a
    1338:	b.ne	13f0 <parse_one_place+0x430>  // b.any
    133c:	ldr	x0, [sp, #48]
    1340:	add	x0, x0, #0x1
    1344:	str	x0, [sp, #48]
    1348:	b	1358 <parse_one_place+0x398>
    134c:	ldr	x0, [sp, #48]
    1350:	add	x0, x0, #0x1
    1354:	str	x0, [sp, #48]
    1358:	bl	0 <__ctype_b_loc>
    135c:	ldr	x1, [x0]
    1360:	ldr	x0, [sp, #48]
    1364:	ldrb	w0, [x0]
    1368:	and	x0, x0, #0xff
    136c:	lsl	x0, x0, #1
    1370:	add	x0, x1, x0
    1374:	ldrh	w0, [x0]
    1378:	and	w0, w0, #0x2000
    137c:	cmp	w0, #0x0
    1380:	b.ne	134c <parse_one_place+0x38c>  // b.any
    1384:	bl	0 <__errno_location>
    1388:	str	wzr, [x0]
    138c:	ldr	x0, [sp, #48]
    1390:	add	x1, sp, #0x30
    1394:	mov	w2, #0xa                   	// #10
    1398:	bl	0 <strtol>
    139c:	str	x0, [sp, #88]
    13a0:	bl	0 <__errno_location>
    13a4:	ldr	w0, [x0]
    13a8:	cmp	w0, #0x0
    13ac:	b.eq	13c4 <parse_one_place+0x404>  // b.none
    13b0:	mov	w0, #0x0                   	// #0
    13b4:	b	1740 <parse_one_place+0x780>
    13b8:	ldr	x0, [sp, #48]
    13bc:	add	x0, x0, #0x1
    13c0:	str	x0, [sp, #48]
    13c4:	bl	0 <__ctype_b_loc>
    13c8:	ldr	x1, [x0]
    13cc:	ldr	x0, [sp, #48]
    13d0:	ldrb	w0, [x0]
    13d4:	and	x0, x0, #0xff
    13d8:	lsl	x0, x0, #1
    13dc:	add	x0, x1, x0
    13e0:	ldrh	w0, [x0]
    13e4:	and	w0, w0, #0x2000
    13e8:	cmp	w0, #0x0
    13ec:	b.ne	13b8 <parse_one_place+0x3f8>  // b.any
    13f0:	ldrb	w0, [sp, #71]
    13f4:	cmp	w0, #0x0
    13f8:	b.eq	1410 <parse_one_place+0x450>  // b.none
    13fc:	ldr	x0, [sp, #96]
    1400:	cmp	x0, #0x1
    1404:	b.eq	1410 <parse_one_place+0x450>  // b.none
    1408:	mov	w0, #0x0                   	// #0
    140c:	b	1740 <parse_one_place+0x780>
    1410:	adrp	x0, 8 <omp_check_defines+0x8>
    1414:	add	x0, x0, #0x0
    1418:	ldr	x0, [x0]
    141c:	cmp	x0, #0x0
    1420:	b.eq	149c <parse_one_place+0x4dc>  // b.none
    1424:	ldrb	w0, [sp, #71]
    1428:	ldr	w1, [sp, #108]
    142c:	cmp	w1, w0
    1430:	b.ne	149c <parse_one_place+0x4dc>  // b.any
    1434:	ldrb	w0, [sp, #71]
    1438:	cmp	w0, #0x0
    143c:	b.eq	1468 <parse_one_place+0x4a8>  // b.none
    1440:	ldr	x1, [sp, #56]
    1444:	ldr	x0, [sp, #80]
    1448:	bl	0 <gomp_affinity_remove_cpu>
    144c:	and	w0, w0, #0xff
    1450:	eor	w0, w0, #0x1
    1454:	and	w0, w0, #0xff
    1458:	cmp	w0, #0x0
    145c:	b.eq	149c <parse_one_place+0x4dc>  // b.none
    1460:	mov	w0, #0x0                   	// #0
    1464:	b	1740 <parse_one_place+0x780>
    1468:	mov	w4, #0x0                   	// #0
    146c:	ldr	x3, [sp, #88]
    1470:	ldr	x2, [sp, #96]
    1474:	ldr	x1, [sp, #56]
    1478:	ldr	x0, [sp, #80]
    147c:	bl	0 <gomp_affinity_add_cpus>
    1480:	and	w0, w0, #0xff
    1484:	eor	w0, w0, #0x1
    1488:	and	w0, w0, #0xff
    148c:	cmp	w0, #0x0
    1490:	b.eq	149c <parse_one_place+0x4dc>  // b.none
    1494:	mov	w0, #0x0                   	// #0
    1498:	b	1740 <parse_one_place+0x780>
    149c:	ldr	x0, [sp, #48]
    14a0:	ldrb	w0, [x0]
    14a4:	cmp	w0, #0x7d
    14a8:	b.eq	14d4 <parse_one_place+0x514>  // b.none
    14ac:	ldr	x0, [sp, #48]
    14b0:	ldrb	w0, [x0]
    14b4:	cmp	w0, #0x2c
    14b8:	b.eq	14c4 <parse_one_place+0x504>  // b.none
    14bc:	mov	w0, #0x0                   	// #0
    14c0:	b	1740 <parse_one_place+0x780>
    14c4:	ldr	x0, [sp, #48]
    14c8:	add	x0, x0, #0x1
    14cc:	str	x0, [sp, #48]
    14d0:	b	115c <parse_one_place+0x19c>
    14d4:	nop
    14d8:	ldr	w0, [sp, #108]
    14dc:	add	w0, w0, #0x1
    14e0:	str	w0, [sp, #108]
    14e4:	ldrb	w0, [sp, #107]
    14e8:	cmp	w0, #0x0
    14ec:	b.eq	14f8 <parse_one_place+0x538>  // b.none
    14f0:	mov	w0, #0x2                   	// #2
    14f4:	b	14fc <parse_one_place+0x53c>
    14f8:	mov	w0, #0x1                   	// #1
    14fc:	ldr	w1, [sp, #108]
    1500:	cmp	w0, w1
    1504:	b.gt	1154 <parse_one_place+0x194>
    1508:	ldr	x0, [sp, #48]
    150c:	add	x0, x0, #0x1
    1510:	str	x0, [sp, #48]
    1514:	b	1524 <parse_one_place+0x564>
    1518:	ldr	x0, [sp, #48]
    151c:	add	x0, x0, #0x1
    1520:	str	x0, [sp, #48]
    1524:	bl	0 <__ctype_b_loc>
    1528:	ldr	x1, [x0]
    152c:	ldr	x0, [sp, #48]
    1530:	ldrb	w0, [x0]
    1534:	and	x0, x0, #0xff
    1538:	lsl	x0, x0, #1
    153c:	add	x0, x1, x0
    1540:	ldrh	w0, [x0]
    1544:	and	w0, w0, #0x2000
    1548:	cmp	w0, #0x0
    154c:	b.ne	1518 <parse_one_place+0x558>  // b.any
    1550:	ldr	x0, [sp, #48]
    1554:	ldrb	w0, [x0]
    1558:	cmp	w0, #0x3a
    155c:	b.ne	16f4 <parse_one_place+0x734>  // b.any
    1560:	ldr	x0, [sp, #48]
    1564:	add	x0, x0, #0x1
    1568:	str	x0, [sp, #48]
    156c:	b	157c <parse_one_place+0x5bc>
    1570:	ldr	x0, [sp, #48]
    1574:	add	x0, x0, #0x1
    1578:	str	x0, [sp, #48]
    157c:	bl	0 <__ctype_b_loc>
    1580:	ldr	x1, [x0]
    1584:	ldr	x0, [sp, #48]
    1588:	ldrb	w0, [x0]
    158c:	and	x0, x0, #0xff
    1590:	lsl	x0, x0, #1
    1594:	add	x0, x1, x0
    1598:	ldrh	w0, [x0]
    159c:	and	w0, w0, #0x2000
    15a0:	cmp	w0, #0x0
    15a4:	b.ne	1570 <parse_one_place+0x5b0>  // b.any
    15a8:	bl	0 <__errno_location>
    15ac:	str	wzr, [x0]
    15b0:	ldr	x0, [sp, #48]
    15b4:	add	x1, sp, #0x30
    15b8:	mov	w2, #0xa                   	// #10
    15bc:	bl	0 <strtoul>
    15c0:	str	x0, [sp, #120]
    15c4:	bl	0 <__errno_location>
    15c8:	ldr	w0, [x0]
    15cc:	cmp	w0, #0x0
    15d0:	b.ne	15f0 <parse_one_place+0x630>  // b.any
    15d4:	ldr	x0, [sp, #120]
    15d8:	cmp	x0, #0x0
    15dc:	b.eq	15f0 <parse_one_place+0x630>  // b.none
    15e0:	ldr	x1, [sp, #120]
    15e4:	mov	x0, #0xffff                	// #65535
    15e8:	cmp	x1, x0
    15ec:	b.ls	1604 <parse_one_place+0x644>  // b.plast
    15f0:	mov	w0, #0x0                   	// #0
    15f4:	b	1740 <parse_one_place+0x780>
    15f8:	ldr	x0, [sp, #48]
    15fc:	add	x0, x0, #0x1
    1600:	str	x0, [sp, #48]
    1604:	bl	0 <__ctype_b_loc>
    1608:	ldr	x1, [x0]
    160c:	ldr	x0, [sp, #48]
    1610:	ldrb	w0, [x0]
    1614:	and	x0, x0, #0xff
    1618:	lsl	x0, x0, #1
    161c:	add	x0, x1, x0
    1620:	ldrh	w0, [x0]
    1624:	and	w0, w0, #0x2000
    1628:	cmp	w0, #0x0
    162c:	b.ne	15f8 <parse_one_place+0x638>  // b.any
    1630:	ldr	x0, [sp, #48]
    1634:	ldrb	w0, [x0]
    1638:	cmp	w0, #0x3a
    163c:	b.ne	16f4 <parse_one_place+0x734>  // b.any
    1640:	ldr	x0, [sp, #48]
    1644:	add	x0, x0, #0x1
    1648:	str	x0, [sp, #48]
    164c:	b	165c <parse_one_place+0x69c>
    1650:	ldr	x0, [sp, #48]
    1654:	add	x0, x0, #0x1
    1658:	str	x0, [sp, #48]
    165c:	bl	0 <__ctype_b_loc>
    1660:	ldr	x1, [x0]
    1664:	ldr	x0, [sp, #48]
    1668:	ldrb	w0, [x0]
    166c:	and	x0, x0, #0xff
    1670:	lsl	x0, x0, #1
    1674:	add	x0, x1, x0
    1678:	ldrh	w0, [x0]
    167c:	and	w0, w0, #0x2000
    1680:	cmp	w0, #0x0
    1684:	b.ne	1650 <parse_one_place+0x690>  // b.any
    1688:	bl	0 <__errno_location>
    168c:	str	wzr, [x0]
    1690:	ldr	x0, [sp, #48]
    1694:	add	x1, sp, #0x30
    1698:	mov	w2, #0xa                   	// #10
    169c:	bl	0 <strtol>
    16a0:	str	x0, [sp, #112]
    16a4:	bl	0 <__errno_location>
    16a8:	ldr	w0, [x0]
    16ac:	cmp	w0, #0x0
    16b0:	b.eq	16c8 <parse_one_place+0x708>  // b.none
    16b4:	mov	w0, #0x0                   	// #0
    16b8:	b	1740 <parse_one_place+0x780>
    16bc:	ldr	x0, [sp, #48]
    16c0:	add	x0, x0, #0x1
    16c4:	str	x0, [sp, #48]
    16c8:	bl	0 <__ctype_b_loc>
    16cc:	ldr	x1, [x0]
    16d0:	ldr	x0, [sp, #48]
    16d4:	ldrb	w0, [x0]
    16d8:	and	x0, x0, #0xff
    16dc:	lsl	x0, x0, #1
    16e0:	add	x0, x1, x0
    16e4:	ldrh	w0, [x0]
    16e8:	and	w0, w0, #0x2000
    16ec:	cmp	w0, #0x0
    16f0:	b.ne	16bc <parse_one_place+0x6fc>  // b.any
    16f4:	ldr	x0, [sp, #32]
    16f8:	ldrb	w0, [x0]
    16fc:	cmp	w0, #0x0
    1700:	b.eq	1718 <parse_one_place+0x758>  // b.none
    1704:	ldr	x0, [sp, #120]
    1708:	cmp	x0, #0x1
    170c:	b.eq	1718 <parse_one_place+0x758>  // b.none
    1710:	mov	w0, #0x0                   	// #0
    1714:	b	1740 <parse_one_place+0x780>
    1718:	ldr	x1, [sp, #48]
    171c:	ldr	x0, [sp, #40]
    1720:	str	x1, [x0]
    1724:	ldr	x0, [sp, #24]
    1728:	ldr	x1, [sp, #120]
    172c:	str	x1, [x0]
    1730:	ldr	x0, [sp, #16]
    1734:	ldr	x1, [sp, #112]
    1738:	str	x1, [x0]
    173c:	mov	w0, #0x1                   	// #1
    1740:	ldp	x29, x30, [sp], #128
    1744:	ret

0000000000001748 <parse_places_var>:
    1748:	stp	x29, x30, [sp, #-128]!
    174c:	mov	x29, sp
    1750:	str	x0, [sp, #24]
    1754:	strb	w1, [sp, #23]
    1758:	ldr	x0, [sp, #24]
    175c:	bl	0 <getenv>
    1760:	str	x0, [sp, #96]
    1764:	strb	wzr, [sp, #127]
    1768:	str	wzr, [sp, #120]
    176c:	str	xzr, [sp, #112]
    1770:	ldr	x0, [sp, #96]
    1774:	cmp	x0, #0x0
    1778:	b.ne	1790 <parse_places_var+0x48>  // b.any
    177c:	mov	w0, #0x0                   	// #0
    1780:	b	1f08 <parse_places_var+0x7c0>
    1784:	ldr	x0, [sp, #96]
    1788:	add	x0, x0, #0x1
    178c:	str	x0, [sp, #96]
    1790:	bl	0 <__ctype_b_loc>
    1794:	ldr	x1, [x0]
    1798:	ldr	x0, [sp, #96]
    179c:	ldrb	w0, [x0]
    17a0:	and	x0, x0, #0xff
    17a4:	lsl	x0, x0, #1
    17a8:	add	x0, x1, x0
    17ac:	ldrh	w0, [x0]
    17b0:	and	w0, w0, #0x2000
    17b4:	cmp	w0, #0x0
    17b8:	b.ne	1784 <parse_places_var+0x3c>  // b.any
    17bc:	ldr	x0, [sp, #96]
    17c0:	ldrb	w0, [x0]
    17c4:	cmp	w0, #0x0
    17c8:	b.eq	1e78 <parse_places_var+0x730>  // b.none
    17cc:	ldr	x3, [sp, #96]
    17d0:	mov	x2, #0x7                   	// #7
    17d4:	adrp	x0, 0 <omp_check_defines>
    17d8:	add	x1, x0, #0x0
    17dc:	mov	x0, x3
    17e0:	bl	0 <strncasecmp>
    17e4:	cmp	w0, #0x0
    17e8:	b.ne	1804 <parse_places_var+0xbc>  // b.any
    17ec:	ldr	x0, [sp, #96]
    17f0:	add	x0, x0, #0x7
    17f4:	str	x0, [sp, #96]
    17f8:	mov	w0, #0x1                   	// #1
    17fc:	str	w0, [sp, #120]
    1800:	b	1870 <parse_places_var+0x128>
    1804:	ldr	x3, [sp, #96]
    1808:	mov	x2, #0x5                   	// #5
    180c:	adrp	x0, 0 <omp_check_defines>
    1810:	add	x1, x0, #0x0
    1814:	mov	x0, x3
    1818:	bl	0 <strncasecmp>
    181c:	cmp	w0, #0x0
    1820:	b.ne	183c <parse_places_var+0xf4>  // b.any
    1824:	ldr	x0, [sp, #96]
    1828:	add	x0, x0, #0x5
    182c:	str	x0, [sp, #96]
    1830:	mov	w0, #0x2                   	// #2
    1834:	str	w0, [sp, #120]
    1838:	b	1870 <parse_places_var+0x128>
    183c:	ldr	x3, [sp, #96]
    1840:	mov	x2, #0x7                   	// #7
    1844:	adrp	x0, 0 <omp_check_defines>
    1848:	add	x1, x0, #0x0
    184c:	mov	x0, x3
    1850:	bl	0 <strncasecmp>
    1854:	cmp	w0, #0x0
    1858:	b.ne	1870 <parse_places_var+0x128>  // b.any
    185c:	ldr	x0, [sp, #96]
    1860:	add	x0, x0, #0x7
    1864:	str	x0, [sp, #96]
    1868:	mov	w0, #0x3                   	// #3
    186c:	str	w0, [sp, #120]
    1870:	ldr	w0, [sp, #120]
    1874:	cmp	w0, #0x0
    1878:	b.eq	1a28 <parse_places_var+0x2e0>  // b.none
    187c:	mov	x0, #0xffffffffffffffff    	// #-1
    1880:	str	x0, [sp, #112]
    1884:	b	1894 <parse_places_var+0x14c>
    1888:	ldr	x0, [sp, #96]
    188c:	add	x0, x0, #0x1
    1890:	str	x0, [sp, #96]
    1894:	bl	0 <__ctype_b_loc>
    1898:	ldr	x1, [x0]
    189c:	ldr	x0, [sp, #96]
    18a0:	ldrb	w0, [x0]
    18a4:	and	x0, x0, #0xff
    18a8:	lsl	x0, x0, #1
    18ac:	add	x0, x1, x0
    18b0:	ldrh	w0, [x0]
    18b4:	and	w0, w0, #0x2000
    18b8:	cmp	w0, #0x0
    18bc:	b.ne	1888 <parse_places_var+0x140>  // b.any
    18c0:	ldr	x0, [sp, #96]
    18c4:	ldrb	w0, [x0]
    18c8:	cmp	w0, #0x0
    18cc:	b.eq	19fc <parse_places_var+0x2b4>  // b.none
    18d0:	ldr	x0, [sp, #96]
    18d4:	add	x1, x0, #0x1
    18d8:	str	x1, [sp, #96]
    18dc:	ldrb	w0, [x0]
    18e0:	cmp	w0, #0x28
    18e4:	b.ne	1e80 <parse_places_var+0x738>  // b.any
    18e8:	b	18f8 <parse_places_var+0x1b0>
    18ec:	ldr	x0, [sp, #96]
    18f0:	add	x0, x0, #0x1
    18f4:	str	x0, [sp, #96]
    18f8:	bl	0 <__ctype_b_loc>
    18fc:	ldr	x1, [x0]
    1900:	ldr	x0, [sp, #96]
    1904:	ldrb	w0, [x0]
    1908:	and	x0, x0, #0xff
    190c:	lsl	x0, x0, #1
    1910:	add	x0, x1, x0
    1914:	ldrh	w0, [x0]
    1918:	and	w0, w0, #0x2000
    191c:	cmp	w0, #0x0
    1920:	b.ne	18ec <parse_places_var+0x1a4>  // b.any
    1924:	bl	0 <__errno_location>
    1928:	str	wzr, [x0]
    192c:	ldr	x0, [sp, #96]
    1930:	add	x1, sp, #0x58
    1934:	mov	w2, #0xa                   	// #10
    1938:	bl	0 <strtoul>
    193c:	str	x0, [sp, #112]
    1940:	bl	0 <__errno_location>
    1944:	ldr	w0, [x0]
    1948:	cmp	w0, #0x0
    194c:	b.ne	1e88 <parse_places_var+0x740>  // b.any
    1950:	ldr	x0, [sp, #88]
    1954:	str	x0, [sp, #96]
    1958:	b	1968 <parse_places_var+0x220>
    195c:	ldr	x0, [sp, #96]
    1960:	add	x0, x0, #0x1
    1964:	str	x0, [sp, #96]
    1968:	bl	0 <__ctype_b_loc>
    196c:	ldr	x1, [x0]
    1970:	ldr	x0, [sp, #96]
    1974:	ldrb	w0, [x0]
    1978:	and	x0, x0, #0xff
    197c:	lsl	x0, x0, #1
    1980:	add	x0, x1, x0
    1984:	ldrh	w0, [x0]
    1988:	and	w0, w0, #0x2000
    198c:	cmp	w0, #0x0
    1990:	b.ne	195c <parse_places_var+0x214>  // b.any
    1994:	ldr	x0, [sp, #96]
    1998:	ldrb	w0, [x0]
    199c:	cmp	w0, #0x29
    19a0:	b.ne	1e90 <parse_places_var+0x748>  // b.any
    19a4:	ldr	x0, [sp, #96]
    19a8:	add	x0, x0, #0x1
    19ac:	str	x0, [sp, #96]
    19b0:	b	19c0 <parse_places_var+0x278>
    19b4:	ldr	x0, [sp, #96]
    19b8:	add	x0, x0, #0x1
    19bc:	str	x0, [sp, #96]
    19c0:	bl	0 <__ctype_b_loc>
    19c4:	ldr	x1, [x0]
    19c8:	ldr	x0, [sp, #96]
    19cc:	ldrb	w0, [x0]
    19d0:	and	x0, x0, #0xff
    19d4:	lsl	x0, x0, #1
    19d8:	add	x0, x1, x0
    19dc:	ldrh	w0, [x0]
    19e0:	and	w0, w0, #0x2000
    19e4:	cmp	w0, #0x0
    19e8:	b.ne	19b4 <parse_places_var+0x26c>  // b.any
    19ec:	ldr	x0, [sp, #96]
    19f0:	ldrb	w0, [x0]
    19f4:	cmp	w0, #0x0
    19f8:	b.ne	1e98 <parse_places_var+0x750>  // b.any
    19fc:	ldrb	w0, [sp, #23]
    1a00:	cmp	w0, #0x0
    1a04:	b.eq	1a10 <parse_places_var+0x2c8>  // b.none
    1a08:	mov	w0, #0x0                   	// #0
    1a0c:	b	1f08 <parse_places_var+0x7c0>
    1a10:	mov	w2, #0x0                   	// #0
    1a14:	ldr	x1, [sp, #112]
    1a18:	ldr	w0, [sp, #120]
    1a1c:	bl	0 <gomp_affinity_init_level>
    1a20:	and	w0, w0, #0xff
    1a24:	b	1f08 <parse_places_var+0x7c0>
    1a28:	str	xzr, [sp, #112]
    1a2c:	ldr	x0, [sp, #96]
    1a30:	str	x0, [sp, #88]
    1a34:	add	x3, sp, #0x40
    1a38:	add	x2, sp, #0x48
    1a3c:	add	x1, sp, #0x57
    1a40:	add	x0, sp, #0x58
    1a44:	bl	fc0 <parse_one_place>
    1a48:	and	w0, w0, #0xff
    1a4c:	eor	w0, w0, #0x1
    1a50:	and	w0, w0, #0xff
    1a54:	cmp	w0, #0x0
    1a58:	b.ne	1ea0 <parse_places_var+0x758>  // b.any
    1a5c:	ldrb	w0, [sp, #87]
    1a60:	cmp	w0, #0x0
    1a64:	b.eq	1a94 <parse_places_var+0x34c>  // b.none
    1a68:	ldrb	w0, [sp, #127]
    1a6c:	eor	w0, w0, #0x1
    1a70:	and	w0, w0, #0xff
    1a74:	cmp	w0, #0x0
    1a78:	b.eq	1a88 <parse_places_var+0x340>  // b.none
    1a7c:	ldr	x0, [sp, #112]
    1a80:	add	x0, x0, #0x1
    1a84:	str	x0, [sp, #112]
    1a88:	mov	w0, #0x1                   	// #1
    1a8c:	strb	w0, [sp, #127]
    1a90:	b	1aa4 <parse_places_var+0x35c>
    1a94:	ldr	x0, [sp, #72]
    1a98:	ldr	x1, [sp, #112]
    1a9c:	add	x0, x1, x0
    1aa0:	str	x0, [sp, #112]
    1aa4:	ldr	x0, [sp, #112]
    1aa8:	cmp	x0, #0x10, lsl #12
    1aac:	b.hi	1ea8 <parse_places_var+0x760>  // b.pmore
    1ab0:	ldr	x0, [sp, #88]
    1ab4:	ldrb	w0, [x0]
    1ab8:	cmp	w0, #0x0
    1abc:	b.ne	1ad0 <parse_places_var+0x388>  // b.any
    1ac0:	ldrb	w0, [sp, #23]
    1ac4:	cmp	w0, #0x0
    1ac8:	b.ne	1af0 <parse_places_var+0x3a8>  // b.any
    1acc:	b	1af8 <parse_places_var+0x3b0>
    1ad0:	ldr	x0, [sp, #88]
    1ad4:	ldrb	w0, [x0]
    1ad8:	cmp	w0, #0x2c
    1adc:	b.ne	1eb0 <parse_places_var+0x768>  // b.any
    1ae0:	ldr	x0, [sp, #88]
    1ae4:	add	x0, x0, #0x1
    1ae8:	str	x0, [sp, #88]
    1aec:	b	1a34 <parse_places_var+0x2ec>
    1af0:	mov	w0, #0x0                   	// #0
    1af4:	b	1f08 <parse_places_var+0x7c0>
    1af8:	adrp	x0, 8 <omp_check_defines+0x8>
    1afc:	add	x0, x0, #0x0
    1b00:	str	xzr, [x0]
    1b04:	mov	w1, #0x0                   	// #0
    1b08:	ldr	x0, [sp, #112]
    1b0c:	bl	0 <gomp_affinity_alloc>
    1b10:	mov	x1, x0
    1b14:	adrp	x0, 8 <omp_check_defines+0x8>
    1b18:	add	x0, x0, #0x0
    1b1c:	str	x1, [x0]
    1b20:	adrp	x0, 8 <omp_check_defines+0x8>
    1b24:	add	x0, x0, #0x0
    1b28:	ldr	x0, [x0]
    1b2c:	cmp	x0, #0x0
    1b30:	b.ne	1b3c <parse_places_var+0x3f4>  // b.any
    1b34:	mov	w0, #0x0                   	// #0
    1b38:	b	1f08 <parse_places_var+0x7c0>
    1b3c:	adrp	x0, 8 <omp_check_defines+0x8>
    1b40:	add	x0, x0, #0x0
    1b44:	ldr	x1, [x0]
    1b48:	adrp	x0, 8 <omp_check_defines+0x8>
    1b4c:	add	x0, x0, #0x0
    1b50:	ldr	x0, [x0]
    1b54:	lsl	x0, x0, #3
    1b58:	add	x0, x1, x0
    1b5c:	ldr	x0, [x0]
    1b60:	bl	0 <gomp_affinity_init_place>
    1b64:	add	x3, sp, #0x28
    1b68:	add	x2, sp, #0x30
    1b6c:	add	x1, sp, #0x3f
    1b70:	add	x0, sp, #0x60
    1b74:	bl	fc0 <parse_one_place>
    1b78:	and	w0, w0, #0xff
    1b7c:	eor	w0, w0, #0x1
    1b80:	and	w0, w0, #0xff
    1b84:	cmp	w0, #0x0
    1b88:	b.ne	1eb8 <parse_places_var+0x770>  // b.any
    1b8c:	ldrb	w0, [sp, #63]
    1b90:	cmp	w0, #0x0
    1b94:	b.eq	1d14 <parse_places_var+0x5cc>  // b.none
    1b98:	str	xzr, [sp, #112]
    1b9c:	b	1c04 <parse_places_var+0x4bc>
    1ba0:	adrp	x0, 8 <omp_check_defines+0x8>
    1ba4:	add	x0, x0, #0x0
    1ba8:	ldr	x1, [x0]
    1bac:	ldr	x0, [sp, #112]
    1bb0:	lsl	x0, x0, #3
    1bb4:	add	x0, x1, x0
    1bb8:	ldr	x2, [x0]
    1bbc:	adrp	x0, 8 <omp_check_defines+0x8>
    1bc0:	add	x0, x0, #0x0
    1bc4:	ldr	x1, [x0]
    1bc8:	adrp	x0, 8 <omp_check_defines+0x8>
    1bcc:	add	x0, x0, #0x0
    1bd0:	ldr	x0, [x0]
    1bd4:	lsl	x0, x0, #3
    1bd8:	add	x0, x1, x0
    1bdc:	ldr	x0, [x0]
    1be0:	mov	x1, x0
    1be4:	mov	x0, x2
    1be8:	bl	0 <gomp_affinity_same_place>
    1bec:	and	w0, w0, #0xff
    1bf0:	cmp	w0, #0x0
    1bf4:	b.ne	1c20 <parse_places_var+0x4d8>  // b.any
    1bf8:	ldr	x0, [sp, #112]
    1bfc:	add	x0, x0, #0x1
    1c00:	str	x0, [sp, #112]
    1c04:	adrp	x0, 8 <omp_check_defines+0x8>
    1c08:	add	x0, x0, #0x0
    1c0c:	ldr	x0, [x0]
    1c10:	ldr	x1, [sp, #112]
    1c14:	cmp	x1, x0
    1c18:	b.cc	1ba0 <parse_places_var+0x458>  // b.lo, b.ul, b.last
    1c1c:	b	1c24 <parse_places_var+0x4dc>
    1c20:	nop
    1c24:	adrp	x0, 8 <omp_check_defines+0x8>
    1c28:	add	x0, x0, #0x0
    1c2c:	ldr	x0, [x0]
    1c30:	ldr	x1, [sp, #112]
    1c34:	cmp	x1, x0
    1c38:	b.ne	1c4c <parse_places_var+0x504>  // b.any
    1c3c:	adrp	x0, 0 <omp_check_defines>
    1c40:	add	x0, x0, #0x0
    1c44:	bl	0 <gomp_error>
    1c48:	b	1ecc <parse_places_var+0x784>
    1c4c:	adrp	x0, 8 <omp_check_defines+0x8>
    1c50:	add	x0, x0, #0x0
    1c54:	ldr	x1, [x0]
    1c58:	ldr	x0, [sp, #112]
    1c5c:	lsl	x0, x0, #3
    1c60:	add	x0, x1, x0
    1c64:	ldr	x0, [x0]
    1c68:	str	x0, [sp, #104]
    1c6c:	adrp	x0, 8 <omp_check_defines+0x8>
    1c70:	add	x0, x0, #0x0
    1c74:	ldr	x1, [x0]
    1c78:	ldr	x0, [sp, #112]
    1c7c:	lsl	x0, x0, #3
    1c80:	add	x3, x1, x0
    1c84:	adrp	x0, 8 <omp_check_defines+0x8>
    1c88:	add	x0, x0, #0x0
    1c8c:	ldr	x1, [x0]
    1c90:	ldr	x0, [sp, #112]
    1c94:	add	x0, x0, #0x1
    1c98:	lsl	x0, x0, #3
    1c9c:	add	x4, x1, x0
    1ca0:	adrp	x0, 8 <omp_check_defines+0x8>
    1ca4:	add	x0, x0, #0x0
    1ca8:	ldr	x1, [x0]
    1cac:	ldr	x0, [sp, #112]
    1cb0:	sub	x0, x1, x0
    1cb4:	sub	x0, x0, #0x1
    1cb8:	lsl	x0, x0, #3
    1cbc:	mov	x2, x0
    1cc0:	mov	x1, x4
    1cc4:	mov	x0, x3
    1cc8:	bl	0 <memmove>
    1ccc:	adrp	x0, 8 <omp_check_defines+0x8>
    1cd0:	add	x0, x0, #0x0
    1cd4:	ldr	x0, [x0]
    1cd8:	sub	x1, x0, #0x1
    1cdc:	adrp	x0, 8 <omp_check_defines+0x8>
    1ce0:	add	x0, x0, #0x0
    1ce4:	str	x1, [x0]
    1ce8:	adrp	x0, 8 <omp_check_defines+0x8>
    1cec:	add	x0, x0, #0x0
    1cf0:	ldr	x1, [x0]
    1cf4:	adrp	x0, 8 <omp_check_defines+0x8>
    1cf8:	add	x0, x0, #0x0
    1cfc:	ldr	x0, [x0]
    1d00:	lsl	x0, x0, #3
    1d04:	add	x0, x1, x0
    1d08:	ldr	x1, [sp, #104]
    1d0c:	str	x1, [x0]
    1d10:	b	1e0c <parse_places_var+0x6c4>
    1d14:	ldr	x0, [sp, #48]
    1d18:	cmp	x0, #0x1
    1d1c:	b.ne	1d40 <parse_places_var+0x5f8>  // b.any
    1d20:	adrp	x0, 8 <omp_check_defines+0x8>
    1d24:	add	x0, x0, #0x0
    1d28:	ldr	x0, [x0]
    1d2c:	add	x1, x0, #0x1
    1d30:	adrp	x0, 8 <omp_check_defines+0x8>
    1d34:	add	x0, x0, #0x0
    1d38:	str	x1, [x0]
    1d3c:	b	1e0c <parse_places_var+0x6c4>
    1d40:	str	xzr, [sp, #112]
    1d44:	b	1dd8 <parse_places_var+0x690>
    1d48:	adrp	x0, 8 <omp_check_defines+0x8>
    1d4c:	add	x0, x0, #0x0
    1d50:	ldr	x1, [x0]
    1d54:	adrp	x0, 8 <omp_check_defines+0x8>
    1d58:	add	x0, x0, #0x0
    1d5c:	ldr	x2, [x0]
    1d60:	ldr	x0, [sp, #112]
    1d64:	add	x0, x2, x0
    1d68:	add	x0, x0, #0x1
    1d6c:	lsl	x0, x0, #3
    1d70:	add	x0, x1, x0
    1d74:	ldr	x3, [x0]
    1d78:	adrp	x0, 8 <omp_check_defines+0x8>
    1d7c:	add	x0, x0, #0x0
    1d80:	ldr	x1, [x0]
    1d84:	adrp	x0, 8 <omp_check_defines+0x8>
    1d88:	add	x0, x0, #0x0
    1d8c:	ldr	x2, [x0]
    1d90:	ldr	x0, [sp, #112]
    1d94:	add	x0, x2, x0
    1d98:	lsl	x0, x0, #3
    1d9c:	add	x0, x1, x0
    1da0:	ldr	x0, [x0]
    1da4:	ldr	x1, [sp, #40]
    1da8:	mov	x2, x1
    1dac:	mov	x1, x0
    1db0:	mov	x0, x3
    1db4:	bl	0 <gomp_affinity_copy_place>
    1db8:	and	w0, w0, #0xff
    1dbc:	eor	w0, w0, #0x1
    1dc0:	and	w0, w0, #0xff
    1dc4:	cmp	w0, #0x0
    1dc8:	b.ne	1ec0 <parse_places_var+0x778>  // b.any
    1dcc:	ldr	x0, [sp, #112]
    1dd0:	add	x0, x0, #0x1
    1dd4:	str	x0, [sp, #112]
    1dd8:	ldr	x0, [sp, #48]
    1ddc:	sub	x0, x0, #0x1
    1de0:	ldr	x1, [sp, #112]
    1de4:	cmp	x1, x0
    1de8:	b.cc	1d48 <parse_places_var+0x600>  // b.lo, b.ul, b.last
    1dec:	adrp	x0, 8 <omp_check_defines+0x8>
    1df0:	add	x0, x0, #0x0
    1df4:	ldr	x1, [x0]
    1df8:	ldr	x0, [sp, #48]
    1dfc:	add	x1, x1, x0
    1e00:	adrp	x0, 8 <omp_check_defines+0x8>
    1e04:	add	x0, x0, #0x0
    1e08:	str	x1, [x0]
    1e0c:	ldr	x0, [sp, #96]
    1e10:	ldrb	w0, [x0]
    1e14:	cmp	w0, #0x0
    1e18:	b.ne	1e34 <parse_places_var+0x6ec>  // b.any
    1e1c:	adrp	x0, 8 <omp_check_defines+0x8>
    1e20:	add	x0, x0, #0x0
    1e24:	ldr	x0, [x0]
    1e28:	cmp	x0, #0x0
    1e2c:	b.eq	1e44 <parse_places_var+0x6fc>  // b.none
    1e30:	b	1e54 <parse_places_var+0x70c>
    1e34:	ldr	x0, [sp, #96]
    1e38:	add	x0, x0, #0x1
    1e3c:	str	x0, [sp, #96]
    1e40:	b	1b3c <parse_places_var+0x3f4>
    1e44:	adrp	x0, 0 <omp_check_defines>
    1e48:	add	x0, x0, #0x0
    1e4c:	bl	0 <gomp_error>
    1e50:	b	1ecc <parse_places_var+0x784>
    1e54:	mov	w0, #0x0                   	// #0
    1e58:	bl	0 <gomp_affinity_finalize_place_list>
    1e5c:	and	w0, w0, #0xff
    1e60:	eor	w0, w0, #0x1
    1e64:	and	w0, w0, #0xff
    1e68:	cmp	w0, #0x0
    1e6c:	b.ne	1ec8 <parse_places_var+0x780>  // b.any
    1e70:	mov	w0, #0x1                   	// #1
    1e74:	b	1f08 <parse_places_var+0x7c0>
    1e78:	nop
    1e7c:	b	1ecc <parse_places_var+0x784>
    1e80:	nop
    1e84:	b	1ecc <parse_places_var+0x784>
    1e88:	nop
    1e8c:	b	1ecc <parse_places_var+0x784>
    1e90:	nop
    1e94:	b	1ecc <parse_places_var+0x784>
    1e98:	nop
    1e9c:	b	1ecc <parse_places_var+0x784>
    1ea0:	nop
    1ea4:	b	1ecc <parse_places_var+0x784>
    1ea8:	nop
    1eac:	b	1ecc <parse_places_var+0x784>
    1eb0:	nop
    1eb4:	b	1ecc <parse_places_var+0x784>
    1eb8:	nop
    1ebc:	b	1ecc <parse_places_var+0x784>
    1ec0:	nop
    1ec4:	b	1ecc <parse_places_var+0x784>
    1ec8:	nop
    1ecc:	adrp	x0, 8 <omp_check_defines+0x8>
    1ed0:	add	x0, x0, #0x0
    1ed4:	ldr	x0, [x0]
    1ed8:	bl	0 <free>
    1edc:	adrp	x0, 8 <omp_check_defines+0x8>
    1ee0:	add	x0, x0, #0x0
    1ee4:	str	xzr, [x0]
    1ee8:	adrp	x0, 8 <omp_check_defines+0x8>
    1eec:	add	x0, x0, #0x0
    1ef0:	str	xzr, [x0]
    1ef4:	ldr	x1, [sp, #24]
    1ef8:	adrp	x0, 0 <omp_check_defines>
    1efc:	add	x0, x0, #0x0
    1f00:	bl	0 <gomp_error>
    1f04:	mov	w0, #0x0                   	// #0
    1f08:	ldp	x29, x30, [sp], #128
    1f0c:	ret

0000000000001f10 <parse_stacksize>:
    1f10:	stp	x29, x30, [sp, #-64]!
    1f14:	mov	x29, sp
    1f18:	str	x0, [sp, #24]
    1f1c:	str	x1, [sp, #16]
    1f20:	mov	x0, #0xa                   	// #10
    1f24:	str	x0, [sp, #48]
    1f28:	ldr	x0, [sp, #24]
    1f2c:	bl	0 <getenv>
    1f30:	str	x0, [sp, #56]
    1f34:	ldr	x0, [sp, #56]
    1f38:	cmp	x0, #0x0
    1f3c:	b.ne	1f54 <parse_stacksize+0x44>  // b.any
    1f40:	mov	w0, #0x0                   	// #0
    1f44:	b	2144 <parse_stacksize+0x234>
    1f48:	ldr	x0, [sp, #56]
    1f4c:	add	x0, x0, #0x1
    1f50:	str	x0, [sp, #56]
    1f54:	bl	0 <__ctype_b_loc>
    1f58:	ldr	x1, [x0]
    1f5c:	ldr	x0, [sp, #56]
    1f60:	ldrb	w0, [x0]
    1f64:	and	x0, x0, #0xff
    1f68:	lsl	x0, x0, #1
    1f6c:	add	x0, x1, x0
    1f70:	ldrh	w0, [x0]
    1f74:	and	w0, w0, #0x2000
    1f78:	cmp	w0, #0x0
    1f7c:	b.ne	1f48 <parse_stacksize+0x38>  // b.any
    1f80:	ldr	x0, [sp, #56]
    1f84:	ldrb	w0, [x0]
    1f88:	cmp	w0, #0x0
    1f8c:	b.eq	210c <parse_stacksize+0x1fc>  // b.none
    1f90:	bl	0 <__errno_location>
    1f94:	str	wzr, [x0]
    1f98:	add	x0, sp, #0x20
    1f9c:	mov	w2, #0xa                   	// #10
    1fa0:	mov	x1, x0
    1fa4:	ldr	x0, [sp, #56]
    1fa8:	bl	0 <strtoul>
    1fac:	str	x0, [sp, #40]
    1fb0:	bl	0 <__errno_location>
    1fb4:	ldr	w0, [x0]
    1fb8:	cmp	w0, #0x0
    1fbc:	b.ne	2114 <parse_stacksize+0x204>  // b.any
    1fc0:	b	1fd0 <parse_stacksize+0xc0>
    1fc4:	ldr	x0, [sp, #32]
    1fc8:	add	x0, x0, #0x1
    1fcc:	str	x0, [sp, #32]
    1fd0:	bl	0 <__ctype_b_loc>
    1fd4:	ldr	x1, [x0]
    1fd8:	ldr	x0, [sp, #32]
    1fdc:	ldrb	w0, [x0]
    1fe0:	and	x0, x0, #0xff
    1fe4:	lsl	x0, x0, #1
    1fe8:	add	x0, x1, x0
    1fec:	ldrh	w0, [x0]
    1ff0:	and	w0, w0, #0x2000
    1ff4:	cmp	w0, #0x0
    1ff8:	b.ne	1fc4 <parse_stacksize+0xb4>  // b.any
    1ffc:	ldr	x0, [sp, #32]
    2000:	ldrb	w0, [x0]
    2004:	cmp	w0, #0x0
    2008:	b.eq	20c8 <parse_stacksize+0x1b8>  // b.none
    200c:	ldr	x0, [sp, #32]
    2010:	ldrb	w0, [x0]
    2014:	bl	0 <tolower>
    2018:	cmp	w0, #0x6d
    201c:	b.eq	2054 <parse_stacksize+0x144>  // b.none
    2020:	cmp	w0, #0x6d
    2024:	b.gt	211c <parse_stacksize+0x20c>
    2028:	cmp	w0, #0x6b
    202c:	b.eq	206c <parse_stacksize+0x15c>  // b.none
    2030:	cmp	w0, #0x6b
    2034:	b.gt	211c <parse_stacksize+0x20c>
    2038:	cmp	w0, #0x62
    203c:	b.eq	204c <parse_stacksize+0x13c>  // b.none
    2040:	cmp	w0, #0x67
    2044:	b.eq	2060 <parse_stacksize+0x150>  // b.none
    2048:	b	211c <parse_stacksize+0x20c>
    204c:	str	xzr, [sp, #48]
    2050:	b	2070 <parse_stacksize+0x160>
    2054:	mov	x0, #0x14                  	// #20
    2058:	str	x0, [sp, #48]
    205c:	b	2070 <parse_stacksize+0x160>
    2060:	mov	x0, #0x1e                  	// #30
    2064:	str	x0, [sp, #48]
    2068:	b	2070 <parse_stacksize+0x160>
    206c:	nop
    2070:	ldr	x0, [sp, #32]
    2074:	add	x0, x0, #0x1
    2078:	str	x0, [sp, #32]
    207c:	b	208c <parse_stacksize+0x17c>
    2080:	ldr	x0, [sp, #32]
    2084:	add	x0, x0, #0x1
    2088:	str	x0, [sp, #32]
    208c:	bl	0 <__ctype_b_loc>
    2090:	ldr	x1, [x0]
    2094:	ldr	x0, [sp, #32]
    2098:	ldrb	w0, [x0]
    209c:	and	x0, x0, #0xff
    20a0:	lsl	x0, x0, #1
    20a4:	add	x0, x1, x0
    20a8:	ldrh	w0, [x0]
    20ac:	and	w0, w0, #0x2000
    20b0:	cmp	w0, #0x0
    20b4:	b.ne	2080 <parse_stacksize+0x170>  // b.any
    20b8:	ldr	x0, [sp, #32]
    20bc:	ldrb	w0, [x0]
    20c0:	cmp	w0, #0x0
    20c4:	b.ne	2124 <parse_stacksize+0x214>  // b.any
    20c8:	ldr	x0, [sp, #48]
    20cc:	mov	w1, w0
    20d0:	ldr	x0, [sp, #40]
    20d4:	lsl	x0, x0, x1
    20d8:	ldr	x1, [sp, #48]
    20dc:	lsr	x0, x0, x1
    20e0:	ldr	x1, [sp, #40]
    20e4:	cmp	x1, x0
    20e8:	b.ne	212c <parse_stacksize+0x21c>  // b.any
    20ec:	ldr	x0, [sp, #48]
    20f0:	mov	w1, w0
    20f4:	ldr	x0, [sp, #40]
    20f8:	lsl	x1, x0, x1
    20fc:	ldr	x0, [sp, #16]
    2100:	str	x1, [x0]
    2104:	mov	w0, #0x1                   	// #1
    2108:	b	2144 <parse_stacksize+0x234>
    210c:	nop
    2110:	b	2130 <parse_stacksize+0x220>
    2114:	nop
    2118:	b	2130 <parse_stacksize+0x220>
    211c:	nop
    2120:	b	2130 <parse_stacksize+0x220>
    2124:	nop
    2128:	b	2130 <parse_stacksize+0x220>
    212c:	nop
    2130:	ldr	x1, [sp, #24]
    2134:	adrp	x0, 0 <omp_check_defines>
    2138:	add	x0, x0, #0x0
    213c:	bl	0 <gomp_error>
    2140:	mov	w0, #0x0                   	// #0
    2144:	ldp	x29, x30, [sp], #64
    2148:	ret

000000000000214c <parse_spincount>:
    214c:	stp	x29, x30, [sp, #-64]!
    2150:	mov	x29, sp
    2154:	str	x0, [sp, #24]
    2158:	str	x1, [sp, #16]
    215c:	mov	x0, #0x1                   	// #1
    2160:	str	x0, [sp, #40]
    2164:	ldr	x0, [sp, #24]
    2168:	bl	0 <getenv>
    216c:	str	x0, [sp, #56]
    2170:	ldr	x0, [sp, #56]
    2174:	cmp	x0, #0x0
    2178:	b.ne	2190 <parse_spincount+0x44>  // b.any
    217c:	mov	w0, #0x0                   	// #0
    2180:	b	23f4 <parse_spincount+0x2a8>
    2184:	ldr	x0, [sp, #56]
    2188:	add	x0, x0, #0x1
    218c:	str	x0, [sp, #56]
    2190:	bl	0 <__ctype_b_loc>
    2194:	ldr	x1, [x0]
    2198:	ldr	x0, [sp, #56]
    219c:	ldrb	w0, [x0]
    21a0:	and	x0, x0, #0xff
    21a4:	lsl	x0, x0, #1
    21a8:	add	x0, x1, x0
    21ac:	ldrh	w0, [x0]
    21b0:	and	w0, w0, #0x2000
    21b4:	cmp	w0, #0x0
    21b8:	b.ne	2184 <parse_spincount+0x38>  // b.any
    21bc:	ldr	x0, [sp, #56]
    21c0:	ldrb	w0, [x0]
    21c4:	cmp	w0, #0x0
    21c8:	b.eq	23c4 <parse_spincount+0x278>  // b.none
    21cc:	mov	x2, #0x8                   	// #8
    21d0:	adrp	x0, 0 <omp_check_defines>
    21d4:	add	x1, x0, #0x0
    21d8:	ldr	x0, [sp, #56]
    21dc:	bl	0 <strncasecmp>
    21e0:	cmp	w0, #0x0
    21e4:	b.eq	2204 <parse_spincount+0xb8>  // b.none
    21e8:	mov	x2, #0x8                   	// #8
    21ec:	adrp	x0, 0 <omp_check_defines>
    21f0:	add	x1, x0, #0x0
    21f4:	ldr	x0, [sp, #56]
    21f8:	bl	0 <strncasecmp>
    21fc:	cmp	w0, #0x0
    2200:	b.ne	221c <parse_spincount+0xd0>  // b.any
    2204:	mov	x0, #0xffffffffffffffff    	// #-1
    2208:	str	x0, [sp, #48]
    220c:	ldr	x0, [sp, #56]
    2210:	add	x0, x0, #0x8
    2214:	str	x0, [sp, #32]
    2218:	b	2320 <parse_spincount+0x1d4>
    221c:	bl	0 <__errno_location>
    2220:	str	wzr, [x0]
    2224:	add	x0, sp, #0x20
    2228:	mov	w2, #0xa                   	// #10
    222c:	mov	x1, x0
    2230:	ldr	x0, [sp, #56]
    2234:	bl	0 <strtoull>
    2238:	str	x0, [sp, #48]
    223c:	bl	0 <__errno_location>
    2240:	ldr	w0, [x0]
    2244:	cmp	w0, #0x0
    2248:	b.ne	23cc <parse_spincount+0x280>  // b.any
    224c:	b	225c <parse_spincount+0x110>
    2250:	ldr	x0, [sp, #32]
    2254:	add	x0, x0, #0x1
    2258:	str	x0, [sp, #32]
    225c:	bl	0 <__ctype_b_loc>
    2260:	ldr	x1, [x0]
    2264:	ldr	x0, [sp, #32]
    2268:	ldrb	w0, [x0]
    226c:	and	x0, x0, #0xff
    2270:	lsl	x0, x0, #1
    2274:	add	x0, x1, x0
    2278:	ldrh	w0, [x0]
    227c:	and	w0, w0, #0x2000
    2280:	cmp	w0, #0x0
    2284:	b.ne	2250 <parse_spincount+0x104>  // b.any
    2288:	ldr	x0, [sp, #32]
    228c:	ldrb	w0, [x0]
    2290:	cmp	w0, #0x0
    2294:	b.eq	236c <parse_spincount+0x220>  // b.none
    2298:	ldr	x0, [sp, #32]
    229c:	ldrb	w0, [x0]
    22a0:	bl	0 <tolower>
    22a4:	cmp	w0, #0x74
    22a8:	b.eq	2300 <parse_spincount+0x1b4>  // b.none
    22ac:	cmp	w0, #0x74
    22b0:	b.gt	23d4 <parse_spincount+0x288>
    22b4:	cmp	w0, #0x6d
    22b8:	b.eq	22e0 <parse_spincount+0x194>  // b.none
    22bc:	cmp	w0, #0x6d
    22c0:	b.gt	23d4 <parse_spincount+0x288>
    22c4:	cmp	w0, #0x67
    22c8:	b.eq	22f0 <parse_spincount+0x1a4>  // b.none
    22cc:	cmp	w0, #0x6b
    22d0:	b.ne	23d4 <parse_spincount+0x288>  // b.any
    22d4:	mov	x0, #0x3e8                 	// #1000
    22d8:	str	x0, [sp, #40]
    22dc:	b	2314 <parse_spincount+0x1c8>
    22e0:	mov	x0, #0x4240                	// #16960
    22e4:	movk	x0, #0xf, lsl #16
    22e8:	str	x0, [sp, #40]
    22ec:	b	2314 <parse_spincount+0x1c8>
    22f0:	mov	x0, #0xca00                	// #51712
    22f4:	movk	x0, #0x3b9a, lsl #16
    22f8:	str	x0, [sp, #40]
    22fc:	b	2314 <parse_spincount+0x1c8>
    2300:	mov	x0, #0x1000                	// #4096
    2304:	movk	x0, #0xd4a5, lsl #16
    2308:	movk	x0, #0xe8, lsl #32
    230c:	str	x0, [sp, #40]
    2310:	nop
    2314:	ldr	x0, [sp, #32]
    2318:	add	x0, x0, #0x1
    231c:	str	x0, [sp, #32]
    2320:	b	2330 <parse_spincount+0x1e4>
    2324:	ldr	x0, [sp, #32]
    2328:	add	x0, x0, #0x1
    232c:	str	x0, [sp, #32]
    2330:	bl	0 <__ctype_b_loc>
    2334:	ldr	x1, [x0]
    2338:	ldr	x0, [sp, #32]
    233c:	ldrb	w0, [x0]
    2340:	and	x0, x0, #0xff
    2344:	lsl	x0, x0, #1
    2348:	add	x0, x1, x0
    234c:	ldrh	w0, [x0]
    2350:	and	w0, w0, #0x2000
    2354:	cmp	w0, #0x0
    2358:	b.ne	2324 <parse_spincount+0x1d8>  // b.any
    235c:	ldr	x0, [sp, #32]
    2360:	ldrb	w0, [x0]
    2364:	cmp	w0, #0x0
    2368:	b.ne	23dc <parse_spincount+0x290>  // b.any
    236c:	mov	x2, #0x0                   	// #0
    2370:	ldr	x1, [sp, #48]
    2374:	ldr	x0, [sp, #40]
    2378:	umulh	x0, x1, x0
    237c:	cmp	x0, #0x0
    2380:	b.eq	2388 <parse_spincount+0x23c>  // b.none
    2384:	mov	x2, #0x1                   	// #1
    2388:	mov	x0, x2
    238c:	cmp	x0, #0x0
    2390:	b.eq	23a0 <parse_spincount+0x254>  // b.none
    2394:	mov	x0, #0xffffffffffffffff    	// #-1
    2398:	str	x0, [sp, #48]
    239c:	b	23b0 <parse_spincount+0x264>
    23a0:	ldr	x1, [sp, #48]
    23a4:	ldr	x0, [sp, #40]
    23a8:	mul	x0, x1, x0
    23ac:	str	x0, [sp, #48]
    23b0:	ldr	x0, [sp, #16]
    23b4:	ldr	x1, [sp, #48]
    23b8:	str	x1, [x0]
    23bc:	mov	w0, #0x1                   	// #1
    23c0:	b	23f4 <parse_spincount+0x2a8>
    23c4:	nop
    23c8:	b	23e0 <parse_spincount+0x294>
    23cc:	nop
    23d0:	b	23e0 <parse_spincount+0x294>
    23d4:	nop
    23d8:	b	23e0 <parse_spincount+0x294>
    23dc:	nop
    23e0:	ldr	x1, [sp, #24]
    23e4:	adrp	x0, 0 <omp_check_defines>
    23e8:	add	x0, x0, #0x0
    23ec:	bl	0 <gomp_error>
    23f0:	mov	w0, #0x0                   	// #0
    23f4:	ldp	x29, x30, [sp], #64
    23f8:	ret

00000000000023fc <parse_boolean>:
    23fc:	stp	x29, x30, [sp, #-48]!
    2400:	mov	x29, sp
    2404:	str	x0, [sp, #24]
    2408:	str	x1, [sp, #16]
    240c:	ldr	x0, [sp, #24]
    2410:	bl	0 <getenv>
    2414:	str	x0, [sp, #40]
    2418:	ldr	x0, [sp, #40]
    241c:	cmp	x0, #0x0
    2420:	b.eq	2538 <parse_boolean+0x13c>  // b.none
    2424:	b	2434 <parse_boolean+0x38>
    2428:	ldr	x0, [sp, #40]
    242c:	add	x0, x0, #0x1
    2430:	str	x0, [sp, #40]
    2434:	bl	0 <__ctype_b_loc>
    2438:	ldr	x1, [x0]
    243c:	ldr	x0, [sp, #40]
    2440:	ldrb	w0, [x0]
    2444:	and	x0, x0, #0xff
    2448:	lsl	x0, x0, #1
    244c:	add	x0, x1, x0
    2450:	ldrh	w0, [x0]
    2454:	and	w0, w0, #0x2000
    2458:	cmp	w0, #0x0
    245c:	b.ne	2428 <parse_boolean+0x2c>  // b.any
    2460:	mov	x2, #0x4                   	// #4
    2464:	adrp	x0, 0 <omp_check_defines>
    2468:	add	x1, x0, #0x0
    246c:	ldr	x0, [sp, #40]
    2470:	bl	0 <strncasecmp>
    2474:	cmp	w0, #0x0
    2478:	b.ne	2498 <parse_boolean+0x9c>  // b.any
    247c:	ldr	x0, [sp, #16]
    2480:	mov	w1, #0x1                   	// #1
    2484:	strb	w1, [x0]
    2488:	ldr	x0, [sp, #40]
    248c:	add	x0, x0, #0x4
    2490:	str	x0, [sp, #40]
    2494:	b	24e8 <parse_boolean+0xec>
    2498:	mov	x2, #0x5                   	// #5
    249c:	adrp	x0, 0 <omp_check_defines>
    24a0:	add	x1, x0, #0x0
    24a4:	ldr	x0, [sp, #40]
    24a8:	bl	0 <strncasecmp>
    24ac:	cmp	w0, #0x0
    24b0:	b.ne	24cc <parse_boolean+0xd0>  // b.any
    24b4:	ldr	x0, [sp, #16]
    24b8:	strb	wzr, [x0]
    24bc:	ldr	x0, [sp, #40]
    24c0:	add	x0, x0, #0x5
    24c4:	str	x0, [sp, #40]
    24c8:	b	24e8 <parse_boolean+0xec>
    24cc:	adrp	x0, 0 <omp_check_defines>
    24d0:	add	x0, x0, #0x0
    24d4:	str	x0, [sp, #40]
    24d8:	b	24e8 <parse_boolean+0xec>
    24dc:	ldr	x0, [sp, #40]
    24e0:	add	x0, x0, #0x1
    24e4:	str	x0, [sp, #40]
    24e8:	bl	0 <__ctype_b_loc>
    24ec:	ldr	x1, [x0]
    24f0:	ldr	x0, [sp, #40]
    24f4:	ldrb	w0, [x0]
    24f8:	and	x0, x0, #0xff
    24fc:	lsl	x0, x0, #1
    2500:	add	x0, x1, x0
    2504:	ldrh	w0, [x0]
    2508:	and	w0, w0, #0x2000
    250c:	cmp	w0, #0x0
    2510:	b.ne	24dc <parse_boolean+0xe0>  // b.any
    2514:	ldr	x0, [sp, #40]
    2518:	ldrb	w0, [x0]
    251c:	cmp	w0, #0x0
    2520:	b.eq	253c <parse_boolean+0x140>  // b.none
    2524:	ldr	x1, [sp, #24]
    2528:	adrp	x0, 0 <omp_check_defines>
    252c:	add	x0, x0, #0x0
    2530:	bl	0 <gomp_error>
    2534:	b	253c <parse_boolean+0x140>
    2538:	nop
    253c:	ldp	x29, x30, [sp], #48
    2540:	ret

0000000000002544 <parse_wait_policy>:
    2544:	stp	x29, x30, [sp, #-32]!
    2548:	mov	x29, sp
    254c:	mov	w0, #0xffffffff            	// #-1
    2550:	str	w0, [sp, #20]
    2554:	adrp	x0, 0 <omp_check_defines>
    2558:	add	x0, x0, #0x0
    255c:	bl	0 <getenv>
    2560:	str	x0, [sp, #24]
    2564:	ldr	x0, [sp, #24]
    2568:	cmp	x0, #0x0
    256c:	b.ne	2584 <parse_wait_policy+0x40>  // b.any
    2570:	mov	w0, #0xffffffff            	// #-1
    2574:	b	2684 <parse_wait_policy+0x140>
    2578:	ldr	x0, [sp, #24]
    257c:	add	x0, x0, #0x1
    2580:	str	x0, [sp, #24]
    2584:	bl	0 <__ctype_b_loc>
    2588:	ldr	x1, [x0]
    258c:	ldr	x0, [sp, #24]
    2590:	ldrb	w0, [x0]
    2594:	and	x0, x0, #0xff
    2598:	lsl	x0, x0, #1
    259c:	add	x0, x1, x0
    25a0:	ldrh	w0, [x0]
    25a4:	and	w0, w0, #0x2000
    25a8:	cmp	w0, #0x0
    25ac:	b.ne	2578 <parse_wait_policy+0x34>  // b.any
    25b0:	mov	x2, #0x6                   	// #6
    25b4:	adrp	x0, 0 <omp_check_defines>
    25b8:	add	x1, x0, #0x0
    25bc:	ldr	x0, [sp, #24]
    25c0:	bl	0 <strncasecmp>
    25c4:	cmp	w0, #0x0
    25c8:	b.ne	25e4 <parse_wait_policy+0xa0>  // b.any
    25cc:	mov	w0, #0x1                   	// #1
    25d0:	str	w0, [sp, #20]
    25d4:	ldr	x0, [sp, #24]
    25d8:	add	x0, x0, #0x6
    25dc:	str	x0, [sp, #24]
    25e0:	b	2630 <parse_wait_policy+0xec>
    25e4:	mov	x2, #0x7                   	// #7
    25e8:	adrp	x0, 0 <omp_check_defines>
    25ec:	add	x1, x0, #0x0
    25f0:	ldr	x0, [sp, #24]
    25f4:	bl	0 <strncasecmp>
    25f8:	cmp	w0, #0x0
    25fc:	b.ne	2614 <parse_wait_policy+0xd0>  // b.any
    2600:	str	wzr, [sp, #20]
    2604:	ldr	x0, [sp, #24]
    2608:	add	x0, x0, #0x7
    260c:	str	x0, [sp, #24]
    2610:	b	2630 <parse_wait_policy+0xec>
    2614:	adrp	x0, 0 <omp_check_defines>
    2618:	add	x0, x0, #0x0
    261c:	str	x0, [sp, #24]
    2620:	b	2630 <parse_wait_policy+0xec>
    2624:	ldr	x0, [sp, #24]
    2628:	add	x0, x0, #0x1
    262c:	str	x0, [sp, #24]
    2630:	bl	0 <__ctype_b_loc>
    2634:	ldr	x1, [x0]
    2638:	ldr	x0, [sp, #24]
    263c:	ldrb	w0, [x0]
    2640:	and	x0, x0, #0xff
    2644:	lsl	x0, x0, #1
    2648:	add	x0, x1, x0
    264c:	ldrh	w0, [x0]
    2650:	and	w0, w0, #0x2000
    2654:	cmp	w0, #0x0
    2658:	b.ne	2624 <parse_wait_policy+0xe0>  // b.any
    265c:	ldr	x0, [sp, #24]
    2660:	ldrb	w0, [x0]
    2664:	cmp	w0, #0x0
    2668:	b.ne	2674 <parse_wait_policy+0x130>  // b.any
    266c:	ldr	w0, [sp, #20]
    2670:	b	2684 <parse_wait_policy+0x140>
    2674:	adrp	x0, 0 <omp_check_defines>
    2678:	add	x0, x0, #0x0
    267c:	bl	0 <gomp_error>
    2680:	mov	w0, #0xffffffff            	// #-1
    2684:	ldp	x29, x30, [sp], #32
    2688:	ret

000000000000268c <parse_affinity>:
    268c:	stp	x29, x30, [sp, #-112]!
    2690:	mov	x29, sp
    2694:	strb	w0, [sp, #31]
    2698:	str	xzr, [sp, #64]
    269c:	adrp	x0, 0 <omp_check_defines>
    26a0:	add	x0, x0, #0x0
    26a4:	bl	0 <getenv>
    26a8:	str	x0, [sp, #104]
    26ac:	ldr	x0, [sp, #104]
    26b0:	cmp	x0, #0x0
    26b4:	b.ne	26c0 <parse_affinity+0x34>  // b.any
    26b8:	mov	w0, #0x0                   	// #0
    26bc:	b	2a70 <parse_affinity+0x3e4>
    26c0:	ldr	x0, [sp, #104]
    26c4:	str	x0, [sp, #48]
    26c8:	str	wzr, [sp, #100]
    26cc:	b	2a00 <parse_affinity+0x374>
    26d0:	ldr	x0, [sp, #48]
    26d4:	str	x0, [sp, #104]
    26d8:	ldr	w0, [sp, #100]
    26dc:	cmp	w0, #0x1
    26e0:	b.ne	2748 <parse_affinity+0xbc>  // b.any
    26e4:	ldrb	w0, [sp, #31]
    26e8:	cmp	w0, #0x0
    26ec:	b.eq	26f8 <parse_affinity+0x6c>  // b.none
    26f0:	mov	w0, #0x0                   	// #0
    26f4:	b	2a70 <parse_affinity+0x3e4>
    26f8:	adrp	x0, 8 <omp_check_defines+0x8>
    26fc:	add	x0, x0, #0x0
    2700:	str	xzr, [x0]
    2704:	mov	w1, #0x1                   	// #1
    2708:	ldr	x0, [sp, #64]
    270c:	bl	0 <gomp_affinity_alloc>
    2710:	mov	x1, x0
    2714:	adrp	x0, 8 <omp_check_defines+0x8>
    2718:	add	x0, x0, #0x0
    271c:	str	x1, [x0]
    2720:	adrp	x0, 8 <omp_check_defines+0x8>
    2724:	add	x0, x0, #0x0
    2728:	ldr	x0, [x0]
    272c:	cmp	x0, #0x0
    2730:	b.ne	2748 <parse_affinity+0xbc>  // b.any
    2734:	mov	w0, #0x0                   	// #0
    2738:	b	2a70 <parse_affinity+0x3e4>
    273c:	ldr	x0, [sp, #104]
    2740:	add	x0, x0, #0x1
    2744:	str	x0, [sp, #104]
    2748:	bl	0 <__ctype_b_loc>
    274c:	ldr	x1, [x0]
    2750:	ldr	x0, [sp, #104]
    2754:	ldrb	w0, [x0]
    2758:	and	x0, x0, #0xff
    275c:	lsl	x0, x0, #1
    2760:	add	x0, x1, x0
    2764:	ldrh	w0, [x0]
    2768:	and	w0, w0, #0x2000
    276c:	cmp	w0, #0x0
    2770:	b.ne	273c <parse_affinity+0xb0>  // b.any
    2774:	bl	0 <__errno_location>
    2778:	str	wzr, [x0]
    277c:	add	x0, sp, #0x20
    2780:	mov	w2, #0x0                   	// #0
    2784:	mov	x1, x0
    2788:	ldr	x0, [sp, #104]
    278c:	bl	0 <strtoul>
    2790:	str	x0, [sp, #88]
    2794:	bl	0 <__errno_location>
    2798:	ldr	w0, [x0]
    279c:	cmp	w0, #0x0
    27a0:	b.ne	2a4c <parse_affinity+0x3c0>  // b.any
    27a4:	ldr	x1, [sp, #88]
    27a8:	mov	x0, #0xffff                	// #65535
    27ac:	cmp	x1, x0
    27b0:	b.hi	2a4c <parse_affinity+0x3c0>  // b.pmore
    27b4:	ldr	x0, [sp, #88]
    27b8:	str	x0, [sp, #80]
    27bc:	mov	x0, #0x1                   	// #1
    27c0:	str	x0, [sp, #72]
    27c4:	ldr	x0, [sp, #32]
    27c8:	str	x0, [sp, #104]
    27cc:	ldr	x0, [sp, #104]
    27d0:	ldrb	w0, [x0]
    27d4:	cmp	w0, #0x2d
    27d8:	b.ne	28b0 <parse_affinity+0x224>  // b.any
    27dc:	bl	0 <__errno_location>
    27e0:	str	wzr, [x0]
    27e4:	ldr	x0, [sp, #104]
    27e8:	add	x0, x0, #0x1
    27ec:	str	x0, [sp, #104]
    27f0:	add	x0, sp, #0x20
    27f4:	mov	w2, #0x0                   	// #0
    27f8:	mov	x1, x0
    27fc:	ldr	x0, [sp, #104]
    2800:	bl	0 <strtoul>
    2804:	str	x0, [sp, #80]
    2808:	bl	0 <__errno_location>
    280c:	ldr	w0, [x0]
    2810:	cmp	w0, #0x0
    2814:	b.ne	2a54 <parse_affinity+0x3c8>  // b.any
    2818:	ldr	x1, [sp, #80]
    281c:	mov	x0, #0xffff                	// #65535
    2820:	cmp	x1, x0
    2824:	b.hi	2a54 <parse_affinity+0x3c8>  // b.pmore
    2828:	ldr	x1, [sp, #80]
    282c:	ldr	x0, [sp, #88]
    2830:	cmp	x1, x0
    2834:	b.cc	2a54 <parse_affinity+0x3c8>  // b.lo, b.ul, b.last
    2838:	ldr	x0, [sp, #32]
    283c:	str	x0, [sp, #104]
    2840:	ldr	x0, [sp, #104]
    2844:	ldrb	w0, [x0]
    2848:	cmp	w0, #0x3a
    284c:	b.ne	28b0 <parse_affinity+0x224>  // b.any
    2850:	bl	0 <__errno_location>
    2854:	str	wzr, [x0]
    2858:	ldr	x0, [sp, #104]
    285c:	add	x0, x0, #0x1
    2860:	str	x0, [sp, #104]
    2864:	add	x0, sp, #0x20
    2868:	mov	w2, #0x0                   	// #0
    286c:	mov	x1, x0
    2870:	ldr	x0, [sp, #104]
    2874:	bl	0 <strtoul>
    2878:	str	x0, [sp, #72]
    287c:	bl	0 <__errno_location>
    2880:	ldr	w0, [x0]
    2884:	cmp	w0, #0x0
    2888:	b.ne	2a5c <parse_affinity+0x3d0>  // b.any
    288c:	ldr	x0, [sp, #72]
    2890:	cmp	x0, #0x0
    2894:	b.eq	2a5c <parse_affinity+0x3d0>  // b.none
    2898:	ldr	x1, [sp, #72]
    289c:	mov	x0, #0xffff                	// #65535
    28a0:	cmp	x1, x0
    28a4:	b.hi	2a5c <parse_affinity+0x3d0>  // b.pmore
    28a8:	ldr	x0, [sp, #32]
    28ac:	str	x0, [sp, #104]
    28b0:	ldr	x1, [sp, #80]
    28b4:	ldr	x0, [sp, #88]
    28b8:	sub	x1, x1, x0
    28bc:	ldr	x0, [sp, #72]
    28c0:	udiv	x0, x1, x0
    28c4:	add	x0, x0, #0x1
    28c8:	str	x0, [sp, #56]
    28cc:	ldr	w0, [sp, #100]
    28d0:	cmp	w0, #0x0
    28d4:	b.ne	296c <parse_affinity+0x2e0>  // b.any
    28d8:	ldr	x1, [sp, #64]
    28dc:	ldr	x0, [sp, #56]
    28e0:	add	x0, x1, x0
    28e4:	str	x0, [sp, #64]
    28e8:	b	2990 <parse_affinity+0x304>
    28ec:	adrp	x0, 8 <omp_check_defines+0x8>
    28f0:	add	x0, x0, #0x0
    28f4:	ldr	x1, [x0]
    28f8:	adrp	x0, 8 <omp_check_defines+0x8>
    28fc:	add	x0, x0, #0x0
    2900:	ldr	x0, [x0]
    2904:	lsl	x0, x0, #3
    2908:	add	x0, x1, x0
    290c:	ldr	x0, [x0]
    2910:	str	x0, [sp, #40]
    2914:	ldr	x0, [sp, #40]
    2918:	bl	0 <gomp_affinity_init_place>
    291c:	mov	w4, #0x1                   	// #1
    2920:	mov	x3, #0x0                   	// #0
    2924:	mov	x2, #0x1                   	// #1
    2928:	ldr	x1, [sp, #88]
    292c:	ldr	x0, [sp, #40]
    2930:	bl	0 <gomp_affinity_add_cpus>
    2934:	and	w0, w0, #0xff
    2938:	cmp	w0, #0x0
    293c:	b.eq	295c <parse_affinity+0x2d0>  // b.none
    2940:	adrp	x0, 8 <omp_check_defines+0x8>
    2944:	add	x0, x0, #0x0
    2948:	ldr	x0, [x0]
    294c:	add	x1, x0, #0x1
    2950:	adrp	x0, 8 <omp_check_defines+0x8>
    2954:	add	x0, x0, #0x0
    2958:	str	x1, [x0]
    295c:	ldr	x1, [sp, #88]
    2960:	ldr	x0, [sp, #72]
    2964:	add	x0, x1, x0
    2968:	str	x0, [sp, #88]
    296c:	ldr	x0, [sp, #56]
    2970:	sub	x1, x0, #0x1
    2974:	str	x1, [sp, #56]
    2978:	cmp	x0, #0x0
    297c:	b.ne	28ec <parse_affinity+0x260>  // b.any
    2980:	b	2990 <parse_affinity+0x304>
    2984:	ldr	x0, [sp, #104]
    2988:	add	x0, x0, #0x1
    298c:	str	x0, [sp, #104]
    2990:	bl	0 <__ctype_b_loc>
    2994:	ldr	x1, [x0]
    2998:	ldr	x0, [sp, #104]
    299c:	ldrb	w0, [x0]
    29a0:	and	x0, x0, #0xff
    29a4:	lsl	x0, x0, #1
    29a8:	add	x0, x1, x0
    29ac:	ldrh	w0, [x0]
    29b0:	and	w0, w0, #0x2000
    29b4:	cmp	w0, #0x0
    29b8:	b.ne	2984 <parse_affinity+0x2f8>  // b.any
    29bc:	ldr	x0, [sp, #104]
    29c0:	ldrb	w0, [x0]
    29c4:	cmp	w0, #0x2c
    29c8:	b.ne	29dc <parse_affinity+0x350>  // b.any
    29cc:	ldr	x0, [sp, #104]
    29d0:	add	x0, x0, #0x1
    29d4:	str	x0, [sp, #104]
    29d8:	b	2748 <parse_affinity+0xbc>
    29dc:	ldr	x0, [sp, #104]
    29e0:	ldrb	w0, [x0]
    29e4:	cmp	w0, #0x0
    29e8:	b.eq	29f0 <parse_affinity+0x364>  // b.none
    29ec:	b	2748 <parse_affinity+0xbc>
    29f0:	nop
    29f4:	ldr	w0, [sp, #100]
    29f8:	add	w0, w0, #0x1
    29fc:	str	w0, [sp, #100]
    2a00:	ldr	w0, [sp, #100]
    2a04:	cmp	w0, #0x1
    2a08:	b.le	26d0 <parse_affinity+0x44>
    2a0c:	adrp	x0, 8 <omp_check_defines+0x8>
    2a10:	add	x0, x0, #0x0
    2a14:	ldr	x0, [x0]
    2a18:	cmp	x0, #0x0
    2a1c:	b.ne	2a44 <parse_affinity+0x3b8>  // b.any
    2a20:	adrp	x0, 8 <omp_check_defines+0x8>
    2a24:	add	x0, x0, #0x0
    2a28:	ldr	x0, [x0]
    2a2c:	bl	0 <free>
    2a30:	adrp	x0, 8 <omp_check_defines+0x8>
    2a34:	add	x0, x0, #0x0
    2a38:	str	xzr, [x0]
    2a3c:	mov	w0, #0x0                   	// #0
    2a40:	b	2a70 <parse_affinity+0x3e4>
    2a44:	mov	w0, #0x1                   	// #1
    2a48:	b	2a70 <parse_affinity+0x3e4>
    2a4c:	nop
    2a50:	b	2a60 <parse_affinity+0x3d4>
    2a54:	nop
    2a58:	b	2a60 <parse_affinity+0x3d4>
    2a5c:	nop
    2a60:	adrp	x0, 0 <omp_check_defines>
    2a64:	add	x0, x0, #0x0
    2a68:	bl	0 <gomp_error>
    2a6c:	mov	w0, #0x0                   	// #0
    2a70:	ldp	x29, x30, [sp], #112
    2a74:	ret

0000000000002a78 <parse_acc_device_type>:
    2a78:	stp	x29, x30, [sp, #-32]!
    2a7c:	mov	x29, sp
    2a80:	adrp	x0, 0 <omp_check_defines>
    2a84:	add	x0, x0, #0x0
    2a88:	bl	0 <getenv>
    2a8c:	str	x0, [sp, #24]
    2a90:	ldr	x0, [sp, #24]
    2a94:	cmp	x0, #0x0
    2a98:	b.eq	2ac8 <parse_acc_device_type+0x50>  // b.none
    2a9c:	ldr	x0, [sp, #24]
    2aa0:	ldrb	w0, [x0]
    2aa4:	cmp	w0, #0x0
    2aa8:	b.eq	2ac8 <parse_acc_device_type+0x50>  // b.none
    2aac:	ldr	x0, [sp, #24]
    2ab0:	bl	0 <strdup>
    2ab4:	mov	x1, x0
    2ab8:	adrp	x0, 8 <omp_check_defines+0x8>
    2abc:	add	x0, x0, #0x0
    2ac0:	str	x1, [x0]
    2ac4:	b	2ad8 <parse_acc_device_type+0x60>
    2ac8:	adrp	x0, 8 <omp_check_defines+0x8>
    2acc:	add	x0, x0, #0x0
    2ad0:	str	xzr, [x0]
    2ad4:	nop
    2ad8:	nop
    2adc:	ldp	x29, x30, [sp], #32
    2ae0:	ret

0000000000002ae4 <parse_gomp_openacc_dim>:
    2ae4:	stp	x29, x30, [sp, #-64]!
    2ae8:	mov	x29, sp
    2aec:	adrp	x0, 0 <omp_check_defines>
    2af0:	add	x0, x0, #0x0
    2af4:	str	x0, [sp, #40]
    2af8:	ldr	x0, [sp, #40]
    2afc:	bl	0 <getenv>
    2b00:	str	x0, [sp, #32]
    2b04:	ldr	x0, [sp, #32]
    2b08:	cmp	x0, #0x0
    2b0c:	b.eq	2bf8 <parse_gomp_openacc_dim+0x114>  // b.none
    2b10:	ldr	x0, [sp, #32]
    2b14:	str	x0, [sp, #56]
    2b18:	str	wzr, [sp, #52]
    2b1c:	b	2bd8 <parse_gomp_openacc_dim+0xf4>
    2b20:	ldr	w0, [sp, #52]
    2b24:	cmp	w0, #0x0
    2b28:	b.eq	2b44 <parse_gomp_openacc_dim+0x60>  // b.none
    2b2c:	ldr	x0, [sp, #56]
    2b30:	add	x1, x0, #0x1
    2b34:	str	x1, [sp, #56]
    2b38:	ldrb	w0, [x0]
    2b3c:	cmp	w0, #0x3a
    2b40:	b.ne	2c00 <parse_gomp_openacc_dim+0x11c>  // b.any
    2b44:	ldr	x0, [sp, #56]
    2b48:	ldrb	w0, [x0]
    2b4c:	cmp	w0, #0x3a
    2b50:	b.eq	2bc8 <parse_gomp_openacc_dim+0xe4>  // b.none
    2b54:	bl	0 <__errno_location>
    2b58:	str	wzr, [x0]
    2b5c:	add	x0, sp, #0x10
    2b60:	mov	w2, #0xa                   	// #10
    2b64:	mov	x1, x0
    2b68:	ldr	x0, [sp, #56]
    2b6c:	bl	0 <strtol>
    2b70:	str	x0, [sp, #24]
    2b74:	bl	0 <__errno_location>
    2b78:	ldr	w0, [x0]
    2b7c:	cmp	w0, #0x0
    2b80:	b.ne	2c00 <parse_gomp_openacc_dim+0x11c>  // b.any
    2b84:	ldr	x0, [sp, #24]
    2b88:	cmp	x0, #0x0
    2b8c:	b.lt	2c00 <parse_gomp_openacc_dim+0x11c>  // b.tstop
    2b90:	ldr	x0, [sp, #24]
    2b94:	mov	w0, w0
    2b98:	ldr	x1, [sp, #24]
    2b9c:	cmp	x1, x0
    2ba0:	b.ne	2c00 <parse_gomp_openacc_dim+0x11c>  // b.any
    2ba4:	ldr	x0, [sp, #24]
    2ba8:	mov	w2, w0
    2bac:	adrp	x0, c <omp_check_defines+0xc>
    2bb0:	add	x0, x0, #0x0
    2bb4:	ldrsw	x1, [sp, #52]
    2bb8:	str	w2, [x0, x1, lsl #2]
    2bbc:	ldr	x0, [sp, #16]
    2bc0:	str	x0, [sp, #56]
    2bc4:	b	2bcc <parse_gomp_openacc_dim+0xe8>
    2bc8:	nop
    2bcc:	ldr	w0, [sp, #52]
    2bd0:	add	w0, w0, #0x1
    2bd4:	str	w0, [sp, #52]
    2bd8:	ldr	x0, [sp, #56]
    2bdc:	ldrb	w0, [x0]
    2be0:	cmp	w0, #0x0
    2be4:	b.eq	2c04 <parse_gomp_openacc_dim+0x120>  // b.none
    2be8:	ldr	w0, [sp, #52]
    2bec:	cmp	w0, #0x3
    2bf0:	b.ne	2b20 <parse_gomp_openacc_dim+0x3c>  // b.any
    2bf4:	b	2c04 <parse_gomp_openacc_dim+0x120>
    2bf8:	nop
    2bfc:	b	2c04 <parse_gomp_openacc_dim+0x120>
    2c00:	nop
    2c04:	ldp	x29, x30, [sp], #64
    2c08:	ret

0000000000002c0c <handle_omp_display_env>:
    2c0c:	stp	x29, x30, [sp, #-48]!
    2c10:	mov	x29, sp
    2c14:	str	x0, [sp, #24]
    2c18:	str	w1, [sp, #20]
    2c1c:	strb	wzr, [sp, #39]
    2c20:	strb	wzr, [sp, #38]
    2c24:	adrp	x0, 0 <omp_check_defines>
    2c28:	add	x0, x0, #0x0
    2c2c:	bl	0 <getenv>
    2c30:	str	x0, [sp, #40]
    2c34:	ldr	x0, [sp, #40]
    2c38:	cmp	x0, #0x0
    2c3c:	b.eq	37d8 <handle_omp_display_env+0xbcc>  // b.none
    2c40:	b	2c50 <handle_omp_display_env+0x44>
    2c44:	ldr	x0, [sp, #40]
    2c48:	add	x0, x0, #0x1
    2c4c:	str	x0, [sp, #40]
    2c50:	bl	0 <__ctype_b_loc>
    2c54:	ldr	x1, [x0]
    2c58:	ldr	x0, [sp, #40]
    2c5c:	ldrb	w0, [x0]
    2c60:	and	x0, x0, #0xff
    2c64:	lsl	x0, x0, #1
    2c68:	add	x0, x1, x0
    2c6c:	ldrh	w0, [x0]
    2c70:	and	w0, w0, #0x2000
    2c74:	cmp	w0, #0x0
    2c78:	b.ne	2c44 <handle_omp_display_env+0x38>  // b.any
    2c7c:	mov	x2, #0x4                   	// #4
    2c80:	adrp	x0, 0 <omp_check_defines>
    2c84:	add	x1, x0, #0x0
    2c88:	ldr	x0, [sp, #40]
    2c8c:	bl	0 <strncasecmp>
    2c90:	cmp	w0, #0x0
    2c94:	b.ne	2cb0 <handle_omp_display_env+0xa4>  // b.any
    2c98:	mov	w0, #0x1                   	// #1
    2c9c:	strb	w0, [sp, #39]
    2ca0:	ldr	x0, [sp, #40]
    2ca4:	add	x0, x0, #0x4
    2ca8:	str	x0, [sp, #40]
    2cac:	b	2d38 <handle_omp_display_env+0x12c>
    2cb0:	mov	x2, #0x5                   	// #5
    2cb4:	adrp	x0, 0 <omp_check_defines>
    2cb8:	add	x1, x0, #0x0
    2cbc:	ldr	x0, [sp, #40]
    2cc0:	bl	0 <strncasecmp>
    2cc4:	cmp	w0, #0x0
    2cc8:	b.ne	2ce0 <handle_omp_display_env+0xd4>  // b.any
    2ccc:	strb	wzr, [sp, #39]
    2cd0:	ldr	x0, [sp, #40]
    2cd4:	add	x0, x0, #0x5
    2cd8:	str	x0, [sp, #40]
    2cdc:	b	2d38 <handle_omp_display_env+0x12c>
    2ce0:	mov	x2, #0x7                   	// #7
    2ce4:	adrp	x0, 0 <omp_check_defines>
    2ce8:	add	x1, x0, #0x0
    2cec:	ldr	x0, [sp, #40]
    2cf0:	bl	0 <strncasecmp>
    2cf4:	cmp	w0, #0x0
    2cf8:	b.ne	2d1c <handle_omp_display_env+0x110>  // b.any
    2cfc:	mov	w0, #0x1                   	// #1
    2d00:	strb	w0, [sp, #39]
    2d04:	mov	w0, #0x1                   	// #1
    2d08:	strb	w0, [sp, #38]
    2d0c:	ldr	x0, [sp, #40]
    2d10:	add	x0, x0, #0x7
    2d14:	str	x0, [sp, #40]
    2d18:	b	2d38 <handle_omp_display_env+0x12c>
    2d1c:	adrp	x0, 0 <omp_check_defines>
    2d20:	add	x0, x0, #0x0
    2d24:	str	x0, [sp, #40]
    2d28:	b	2d38 <handle_omp_display_env+0x12c>
    2d2c:	ldr	x0, [sp, #40]
    2d30:	add	x0, x0, #0x1
    2d34:	str	x0, [sp, #40]
    2d38:	bl	0 <__ctype_b_loc>
    2d3c:	ldr	x1, [x0]
    2d40:	ldr	x0, [sp, #40]
    2d44:	ldrb	w0, [x0]
    2d48:	and	x0, x0, #0xff
    2d4c:	lsl	x0, x0, #1
    2d50:	add	x0, x1, x0
    2d54:	ldrh	w0, [x0]
    2d58:	and	w0, w0, #0x2000
    2d5c:	cmp	w0, #0x0
    2d60:	b.ne	2d2c <handle_omp_display_env+0x120>  // b.any
    2d64:	ldr	x0, [sp, #40]
    2d68:	ldrb	w0, [x0]
    2d6c:	cmp	w0, #0x0
    2d70:	b.eq	2d80 <handle_omp_display_env+0x174>  // b.none
    2d74:	adrp	x0, 0 <omp_check_defines>
    2d78:	add	x0, x0, #0x0
    2d7c:	bl	0 <gomp_error>
    2d80:	ldrb	w0, [sp, #39]
    2d84:	eor	w0, w0, #0x1
    2d88:	and	w0, w0, #0xff
    2d8c:	cmp	w0, #0x0
    2d90:	b.ne	37e0 <handle_omp_display_env+0xbd4>  // b.any
    2d94:	adrp	x0, 0 <stderr>
    2d98:	add	x0, x0, #0x0
    2d9c:	ldr	x0, [x0]
    2da0:	mov	x3, x0
    2da4:	mov	x2, #0x22                  	// #34
    2da8:	mov	x1, #0x1                   	// #1
    2dac:	adrp	x0, 0 <omp_check_defines>
    2db0:	add	x0, x0, #0x0
    2db4:	bl	0 <fwrite>
    2db8:	adrp	x0, 0 <stderr>
    2dbc:	add	x0, x0, #0x0
    2dc0:	ldr	x0, [x0]
    2dc4:	mov	x3, x0
    2dc8:	mov	x2, #0x15                  	// #21
    2dcc:	mov	x1, #0x1                   	// #1
    2dd0:	adrp	x0, 0 <omp_check_defines>
    2dd4:	add	x0, x0, #0x0
    2dd8:	bl	0 <fwrite>
    2ddc:	adrp	x0, 0 <stderr>
    2de0:	add	x0, x0, #0x0
    2de4:	ldr	x3, [x0]
    2de8:	adrp	x0, 0 <omp_check_defines>
    2dec:	add	x0, x0, #0x0
    2df0:	ldrb	w0, [x0, #24]
    2df4:	cmp	w0, #0x0
    2df8:	b.eq	2e08 <handle_omp_display_env+0x1fc>  // b.none
    2dfc:	adrp	x0, 0 <omp_check_defines>
    2e00:	add	x0, x0, #0x0
    2e04:	b	2e10 <handle_omp_display_env+0x204>
    2e08:	adrp	x0, 0 <omp_check_defines>
    2e0c:	add	x0, x0, #0x0
    2e10:	mov	x2, x0
    2e14:	adrp	x0, 0 <omp_check_defines>
    2e18:	add	x1, x0, #0x0
    2e1c:	mov	x0, x3
    2e20:	bl	0 <fprintf>
    2e24:	adrp	x0, 0 <stderr>
    2e28:	add	x0, x0, #0x0
    2e2c:	ldr	x3, [x0]
    2e30:	adrp	x0, 0 <omp_check_defines>
    2e34:	add	x0, x0, #0x0
    2e38:	ldrb	w0, [x0, #25]
    2e3c:	cmp	w0, #0x0
    2e40:	b.eq	2e50 <handle_omp_display_env+0x244>  // b.none
    2e44:	adrp	x0, 0 <omp_check_defines>
    2e48:	add	x0, x0, #0x0
    2e4c:	b	2e58 <handle_omp_display_env+0x24c>
    2e50:	adrp	x0, 0 <omp_check_defines>
    2e54:	add	x0, x0, #0x0
    2e58:	mov	x2, x0
    2e5c:	adrp	x0, 0 <omp_check_defines>
    2e60:	add	x1, x0, #0x0
    2e64:	mov	x0, x3
    2e68:	bl	0 <fprintf>
    2e6c:	adrp	x0, 0 <stderr>
    2e70:	add	x0, x0, #0x0
    2e74:	ldr	x3, [x0]
    2e78:	adrp	x0, 0 <omp_check_defines>
    2e7c:	add	x0, x0, #0x0
    2e80:	ldr	x0, [x0]
    2e84:	mov	x2, x0
    2e88:	adrp	x0, 0 <omp_check_defines>
    2e8c:	add	x1, x0, #0x0
    2e90:	mov	x0, x3
    2e94:	bl	0 <fprintf>
    2e98:	mov	w0, #0x1                   	// #1
    2e9c:	str	w0, [sp, #32]
    2ea0:	b	2eec <handle_omp_display_env+0x2e0>
    2ea4:	adrp	x0, 0 <stderr>
    2ea8:	add	x0, x0, #0x0
    2eac:	ldr	x3, [x0]
    2eb0:	adrp	x0, 8 <omp_check_defines+0x8>
    2eb4:	add	x0, x0, #0x0
    2eb8:	ldr	x1, [x0]
    2ebc:	ldrsw	x0, [sp, #32]
    2ec0:	lsl	x0, x0, #3
    2ec4:	add	x0, x1, x0
    2ec8:	ldr	x0, [x0]
    2ecc:	mov	x2, x0
    2ed0:	adrp	x0, 0 <omp_check_defines>
    2ed4:	add	x1, x0, #0x0
    2ed8:	mov	x0, x3
    2edc:	bl	0 <fprintf>
    2ee0:	ldr	w0, [sp, #32]
    2ee4:	add	w0, w0, #0x1
    2ee8:	str	w0, [sp, #32]
    2eec:	ldrsw	x1, [sp, #32]
    2ef0:	adrp	x0, 8 <omp_check_defines+0x8>
    2ef4:	add	x0, x0, #0x0
    2ef8:	ldr	x0, [x0]
    2efc:	cmp	x1, x0
    2f00:	b.cc	2ea4 <handle_omp_display_env+0x298>  // b.lo, b.ul, b.last
    2f04:	adrp	x0, 0 <stderr>
    2f08:	add	x0, x0, #0x0
    2f0c:	ldr	x0, [x0]
    2f10:	mov	x3, x0
    2f14:	mov	x2, #0x2                   	// #2
    2f18:	mov	x1, #0x1                   	// #1
    2f1c:	adrp	x0, 0 <omp_check_defines>
    2f20:	add	x0, x0, #0x0
    2f24:	bl	0 <fwrite>
    2f28:	adrp	x0, 0 <stderr>
    2f2c:	add	x0, x0, #0x0
    2f30:	ldr	x0, [x0]
    2f34:	mov	x3, x0
    2f38:	mov	x2, #0x12                  	// #18
    2f3c:	mov	x1, #0x1                   	// #1
    2f40:	adrp	x0, 0 <omp_check_defines>
    2f44:	add	x0, x0, #0x0
    2f48:	bl	0 <fwrite>
    2f4c:	adrp	x0, 0 <omp_check_defines>
    2f50:	add	x0, x0, #0x0
    2f54:	ldr	w0, [x0, #8]
    2f58:	cmp	w0, #0x0
    2f5c:	b.ge	2fa0 <handle_omp_display_env+0x394>  // b.tcont
    2f60:	adrp	x0, 0 <omp_check_defines>
    2f64:	add	x0, x0, #0x0
    2f68:	ldr	w1, [x0, #8]
    2f6c:	mov	w0, #0x80000001            	// #-2147483647
    2f70:	cmp	w1, w0
    2f74:	b.eq	2fd8 <handle_omp_display_env+0x3cc>  // b.none
    2f78:	adrp	x0, 0 <stderr>
    2f7c:	add	x0, x0, #0x0
    2f80:	ldr	x0, [x0]
    2f84:	mov	x3, x0
    2f88:	mov	x2, #0xa                   	// #10
    2f8c:	mov	x1, #0x1                   	// #1
    2f90:	adrp	x0, 0 <omp_check_defines>
    2f94:	add	x0, x0, #0x0
    2f98:	bl	0 <fwrite>
    2f9c:	b	2fd8 <handle_omp_display_env+0x3cc>
    2fa0:	adrp	x0, 0 <omp_check_defines>
    2fa4:	add	x0, x0, #0x0
    2fa8:	ldr	w0, [x0, #8]
    2fac:	cmp	w0, #0x1
    2fb0:	b.ne	2fd8 <handle_omp_display_env+0x3cc>  // b.any
    2fb4:	adrp	x0, 0 <stderr>
    2fb8:	add	x0, x0, #0x0
    2fbc:	ldr	x0, [x0]
    2fc0:	mov	x3, x0
    2fc4:	mov	x2, #0xd                   	// #13
    2fc8:	mov	x1, #0x1                   	// #1
    2fcc:	adrp	x0, 0 <omp_check_defines>
    2fd0:	add	x0, x0, #0x0
    2fd4:	bl	0 <fwrite>
    2fd8:	adrp	x0, 0 <omp_check_defines>
    2fdc:	add	x0, x0, #0x0
    2fe0:	ldr	w0, [x0, #8]
    2fe4:	and	w0, w0, #0x7fffffff
    2fe8:	cmp	w0, #0x4
    2fec:	b.eq	31cc <handle_omp_display_env+0x5c0>  // b.none
    2ff0:	cmp	w0, #0x4
    2ff4:	b.hi	3210 <handle_omp_display_env+0x604>  // b.pmore
    2ff8:	cmp	w0, #0x3
    2ffc:	b.eq	3164 <handle_omp_display_env+0x558>  // b.none
    3000:	cmp	w0, #0x3
    3004:	b.hi	3210 <handle_omp_display_env+0x604>  // b.pmore
    3008:	cmp	w0, #0x2
    300c:	b.eq	30fc <handle_omp_display_env+0x4f0>  // b.none
    3010:	cmp	w0, #0x2
    3014:	b.hi	3210 <handle_omp_display_env+0x604>  // b.pmore
    3018:	cmp	w0, #0x0
    301c:	b.eq	302c <handle_omp_display_env+0x420>  // b.none
    3020:	cmp	w0, #0x1
    3024:	b.eq	3094 <handle_omp_display_env+0x488>  // b.none
    3028:	b	3210 <handle_omp_display_env+0x604>
    302c:	adrp	x0, 0 <stderr>
    3030:	add	x0, x0, #0x0
    3034:	ldr	x0, [x0]
    3038:	mov	x3, x0
    303c:	mov	x2, #0x7                   	// #7
    3040:	mov	x1, #0x1                   	// #1
    3044:	adrp	x0, 0 <omp_check_defines>
    3048:	add	x0, x0, #0x0
    304c:	bl	0 <fwrite>
    3050:	adrp	x0, 0 <omp_check_defines>
    3054:	add	x0, x0, #0x0
    3058:	ldr	w0, [x0, #12]
    305c:	cmp	w0, #0x1
    3060:	b.eq	31f4 <handle_omp_display_env+0x5e8>  // b.none
    3064:	adrp	x0, 0 <stderr>
    3068:	add	x0, x0, #0x0
    306c:	ldr	x3, [x0]
    3070:	adrp	x0, 0 <omp_check_defines>
    3074:	add	x0, x0, #0x0
    3078:	ldr	w0, [x0, #12]
    307c:	mov	w2, w0
    3080:	adrp	x0, 0 <omp_check_defines>
    3084:	add	x1, x0, #0x0
    3088:	mov	x0, x3
    308c:	bl	0 <fprintf>
    3090:	b	31f4 <handle_omp_display_env+0x5e8>
    3094:	adrp	x0, 0 <stderr>
    3098:	add	x0, x0, #0x0
    309c:	ldr	x0, [x0]
    30a0:	mov	x3, x0
    30a4:	mov	x2, #0x6                   	// #6
    30a8:	mov	x1, #0x1                   	// #1
    30ac:	adrp	x0, 0 <omp_check_defines>
    30b0:	add	x0, x0, #0x0
    30b4:	bl	0 <fwrite>
    30b8:	adrp	x0, 0 <omp_check_defines>
    30bc:	add	x0, x0, #0x0
    30c0:	ldr	w0, [x0, #12]
    30c4:	cmp	w0, #0x0
    30c8:	b.eq	31fc <handle_omp_display_env+0x5f0>  // b.none
    30cc:	adrp	x0, 0 <stderr>
    30d0:	add	x0, x0, #0x0
    30d4:	ldr	x3, [x0]
    30d8:	adrp	x0, 0 <omp_check_defines>
    30dc:	add	x0, x0, #0x0
    30e0:	ldr	w0, [x0, #12]
    30e4:	mov	w2, w0
    30e8:	adrp	x0, 0 <omp_check_defines>
    30ec:	add	x1, x0, #0x0
    30f0:	mov	x0, x3
    30f4:	bl	0 <fprintf>
    30f8:	b	31fc <handle_omp_display_env+0x5f0>
    30fc:	adrp	x0, 0 <stderr>
    3100:	add	x0, x0, #0x0
    3104:	ldr	x0, [x0]
    3108:	mov	x3, x0
    310c:	mov	x2, #0x7                   	// #7
    3110:	mov	x1, #0x1                   	// #1
    3114:	adrp	x0, 0 <omp_check_defines>
    3118:	add	x0, x0, #0x0
    311c:	bl	0 <fwrite>
    3120:	adrp	x0, 0 <omp_check_defines>
    3124:	add	x0, x0, #0x0
    3128:	ldr	w0, [x0, #12]
    312c:	cmp	w0, #0x1
    3130:	b.eq	3204 <handle_omp_display_env+0x5f8>  // b.none
    3134:	adrp	x0, 0 <stderr>
    3138:	add	x0, x0, #0x0
    313c:	ldr	x3, [x0]
    3140:	adrp	x0, 0 <omp_check_defines>
    3144:	add	x0, x0, #0x0
    3148:	ldr	w0, [x0, #12]
    314c:	mov	w2, w0
    3150:	adrp	x0, 0 <omp_check_defines>
    3154:	add	x1, x0, #0x0
    3158:	mov	x0, x3
    315c:	bl	0 <fprintf>
    3160:	b	3204 <handle_omp_display_env+0x5f8>
    3164:	adrp	x0, 0 <stderr>
    3168:	add	x0, x0, #0x0
    316c:	ldr	x0, [x0]
    3170:	mov	x3, x0
    3174:	mov	x2, #0x6                   	// #6
    3178:	mov	x1, #0x1                   	// #1
    317c:	adrp	x0, 0 <omp_check_defines>
    3180:	add	x0, x0, #0x0
    3184:	bl	0 <fwrite>
    3188:	adrp	x0, 0 <omp_check_defines>
    318c:	add	x0, x0, #0x0
    3190:	ldr	w0, [x0, #12]
    3194:	cmp	w0, #0x1
    3198:	b.eq	320c <handle_omp_display_env+0x600>  // b.none
    319c:	adrp	x0, 0 <stderr>
    31a0:	add	x0, x0, #0x0
    31a4:	ldr	x3, [x0]
    31a8:	adrp	x0, 0 <omp_check_defines>
    31ac:	add	x0, x0, #0x0
    31b0:	ldr	w0, [x0, #12]
    31b4:	mov	w2, w0
    31b8:	adrp	x0, 0 <omp_check_defines>
    31bc:	add	x1, x0, #0x0
    31c0:	mov	x0, x3
    31c4:	bl	0 <fprintf>
    31c8:	b	320c <handle_omp_display_env+0x600>
    31cc:	adrp	x0, 0 <stderr>
    31d0:	add	x0, x0, #0x0
    31d4:	ldr	x0, [x0]
    31d8:	mov	x3, x0
    31dc:	mov	x2, #0x4                   	// #4
    31e0:	mov	x1, #0x1                   	// #1
    31e4:	adrp	x0, 0 <omp_check_defines>
    31e8:	add	x0, x0, #0x0
    31ec:	bl	0 <fwrite>
    31f0:	b	3210 <handle_omp_display_env+0x604>
    31f4:	nop
    31f8:	b	3210 <handle_omp_display_env+0x604>
    31fc:	nop
    3200:	b	3210 <handle_omp_display_env+0x604>
    3204:	nop
    3208:	b	3210 <handle_omp_display_env+0x604>
    320c:	nop
    3210:	adrp	x0, 0 <stderr>
    3214:	add	x0, x0, #0x0
    3218:	ldr	x0, [x0]
    321c:	mov	x3, x0
    3220:	mov	x2, #0x2                   	// #2
    3224:	mov	x1, #0x1                   	// #1
    3228:	adrp	x0, 0 <omp_check_defines>
    322c:	add	x0, x0, #0x0
    3230:	bl	0 <fwrite>
    3234:	adrp	x0, 0 <stderr>
    3238:	add	x0, x0, #0x0
    323c:	ldr	x0, [x0]
    3240:	mov	x3, x0
    3244:	mov	x2, #0x13                  	// #19
    3248:	mov	x1, #0x1                   	// #1
    324c:	adrp	x0, 0 <omp_check_defines>
    3250:	add	x0, x0, #0x0
    3254:	bl	0 <fwrite>
    3258:	adrp	x0, 0 <omp_check_defines>
    325c:	add	x0, x0, #0x0
    3260:	ldrb	w0, [x0, #26]
    3264:	cmp	w0, #0x4
    3268:	b.eq	3348 <handle_omp_display_env+0x73c>  // b.none
    326c:	cmp	w0, #0x4
    3270:	b.gt	3370 <handle_omp_display_env+0x764>
    3274:	cmp	w0, #0x3
    3278:	b.eq	3320 <handle_omp_display_env+0x714>  // b.none
    327c:	cmp	w0, #0x3
    3280:	b.gt	3370 <handle_omp_display_env+0x764>
    3284:	cmp	w0, #0x2
    3288:	b.eq	32f8 <handle_omp_display_env+0x6ec>  // b.none
    328c:	cmp	w0, #0x2
    3290:	b.gt	3370 <handle_omp_display_env+0x764>
    3294:	cmp	w0, #0x0
    3298:	b.eq	32a8 <handle_omp_display_env+0x69c>  // b.none
    329c:	cmp	w0, #0x1
    32a0:	b.eq	32d0 <handle_omp_display_env+0x6c4>  // b.none
    32a4:	b	3370 <handle_omp_display_env+0x764>
    32a8:	adrp	x0, 0 <stderr>
    32ac:	add	x0, x0, #0x0
    32b0:	ldr	x0, [x0]
    32b4:	mov	x3, x0
    32b8:	mov	x2, #0x5                   	// #5
    32bc:	mov	x1, #0x1                   	// #1
    32c0:	adrp	x0, 0 <omp_check_defines>
    32c4:	add	x0, x0, #0x0
    32c8:	bl	0 <fwrite>
    32cc:	b	3370 <handle_omp_display_env+0x764>
    32d0:	adrp	x0, 0 <stderr>
    32d4:	add	x0, x0, #0x0
    32d8:	ldr	x0, [x0]
    32dc:	mov	x3, x0
    32e0:	mov	x2, #0x4                   	// #4
    32e4:	mov	x1, #0x1                   	// #1
    32e8:	adrp	x0, 0 <omp_check_defines>
    32ec:	add	x0, x0, #0x0
    32f0:	bl	0 <fwrite>
    32f4:	b	3370 <handle_omp_display_env+0x764>
    32f8:	adrp	x0, 0 <stderr>
    32fc:	add	x0, x0, #0x0
    3300:	ldr	x0, [x0]
    3304:	mov	x3, x0
    3308:	mov	x2, #0x6                   	// #6
    330c:	mov	x1, #0x1                   	// #1
    3310:	adrp	x0, 0 <omp_check_defines>
    3314:	add	x0, x0, #0x0
    3318:	bl	0 <fwrite>
    331c:	b	3370 <handle_omp_display_env+0x764>
    3320:	adrp	x0, 0 <stderr>
    3324:	add	x0, x0, #0x0
    3328:	ldr	x0, [x0]
    332c:	mov	x3, x0
    3330:	mov	x2, #0x5                   	// #5
    3334:	mov	x1, #0x1                   	// #1
    3338:	adrp	x0, 0 <omp_check_defines>
    333c:	add	x0, x0, #0x0
    3340:	bl	0 <fwrite>
    3344:	b	3370 <handle_omp_display_env+0x764>
    3348:	adrp	x0, 0 <stderr>
    334c:	add	x0, x0, #0x0
    3350:	ldr	x0, [x0]
    3354:	mov	x3, x0
    3358:	mov	x2, #0x6                   	// #6
    335c:	mov	x1, #0x1                   	// #1
    3360:	adrp	x0, 0 <omp_check_defines>
    3364:	add	x0, x0, #0x0
    3368:	bl	0 <fwrite>
    336c:	nop
    3370:	mov	w0, #0x1                   	// #1
    3374:	str	w0, [sp, #32]
    3378:	b	343c <handle_omp_display_env+0x830>
    337c:	adrp	x0, 8 <omp_check_defines+0x8>
    3380:	add	x0, x0, #0x0
    3384:	ldr	x1, [x0]
    3388:	ldrsw	x0, [sp, #32]
    338c:	add	x0, x1, x0
    3390:	ldrb	w0, [x0]
    3394:	cmp	w0, #0x4
    3398:	b.eq	3408 <handle_omp_display_env+0x7fc>  // b.none
    339c:	cmp	w0, #0x4
    33a0:	b.gt	3430 <handle_omp_display_env+0x824>
    33a4:	cmp	w0, #0x2
    33a8:	b.eq	33b8 <handle_omp_display_env+0x7ac>  // b.none
    33ac:	cmp	w0, #0x3
    33b0:	b.eq	33e0 <handle_omp_display_env+0x7d4>  // b.none
    33b4:	b	3430 <handle_omp_display_env+0x824>
    33b8:	adrp	x0, 0 <stderr>
    33bc:	add	x0, x0, #0x0
    33c0:	ldr	x0, [x0]
    33c4:	mov	x3, x0
    33c8:	mov	x2, #0x7                   	// #7
    33cc:	mov	x1, #0x1                   	// #1
    33d0:	adrp	x0, 0 <omp_check_defines>
    33d4:	add	x0, x0, #0x0
    33d8:	bl	0 <fwrite>
    33dc:	b	3430 <handle_omp_display_env+0x824>
    33e0:	adrp	x0, 0 <stderr>
    33e4:	add	x0, x0, #0x0
    33e8:	ldr	x0, [x0]
    33ec:	mov	x3, x0
    33f0:	mov	x2, #0x6                   	// #6
    33f4:	mov	x1, #0x1                   	// #1
    33f8:	adrp	x0, 0 <omp_check_defines>
    33fc:	add	x0, x0, #0x0
    3400:	bl	0 <fwrite>
    3404:	b	3430 <handle_omp_display_env+0x824>
    3408:	adrp	x0, 0 <stderr>
    340c:	add	x0, x0, #0x0
    3410:	ldr	x0, [x0]
    3414:	mov	x3, x0
    3418:	mov	x2, #0x7                   	// #7
    341c:	mov	x1, #0x1                   	// #1
    3420:	adrp	x0, 0 <omp_check_defines>
    3424:	add	x0, x0, #0x0
    3428:	bl	0 <fwrite>
    342c:	nop
    3430:	ldr	w0, [sp, #32]
    3434:	add	w0, w0, #0x1
    3438:	str	w0, [sp, #32]
    343c:	ldrsw	x1, [sp, #32]
    3440:	adrp	x0, 8 <omp_check_defines+0x8>
    3444:	add	x0, x0, #0x0
    3448:	ldr	x0, [x0]
    344c:	cmp	x1, x0
    3450:	b.cc	337c <handle_omp_display_env+0x770>  // b.lo, b.ul, b.last
    3454:	adrp	x0, 0 <stderr>
    3458:	add	x0, x0, #0x0
    345c:	ldr	x0, [x0]
    3460:	mov	x3, x0
    3464:	mov	x2, #0x2                   	// #2
    3468:	mov	x1, #0x1                   	// #1
    346c:	adrp	x0, 0 <omp_check_defines>
    3470:	add	x0, x0, #0x0
    3474:	bl	0 <fwrite>
    3478:	adrp	x0, 0 <stderr>
    347c:	add	x0, x0, #0x0
    3480:	ldr	x0, [x0]
    3484:	mov	x3, x0
    3488:	mov	x2, #0x10                  	// #16
    348c:	mov	x1, #0x1                   	// #1
    3490:	adrp	x0, 0 <omp_check_defines>
    3494:	add	x0, x0, #0x0
    3498:	bl	0 <fwrite>
    349c:	str	wzr, [sp, #32]
    34a0:	b	352c <handle_omp_display_env+0x920>
    34a4:	adrp	x0, 0 <stderr>
    34a8:	add	x0, x0, #0x0
    34ac:	ldr	x0, [x0]
    34b0:	mov	x1, x0
    34b4:	mov	w0, #0x7b                  	// #123
    34b8:	bl	0 <fputc>
    34bc:	adrp	x0, 8 <omp_check_defines+0x8>
    34c0:	add	x0, x0, #0x0
    34c4:	ldr	x1, [x0]
    34c8:	ldrsw	x0, [sp, #32]
    34cc:	lsl	x0, x0, #3
    34d0:	add	x0, x1, x0
    34d4:	ldr	x0, [x0]
    34d8:	bl	0 <gomp_affinity_print_place>
    34dc:	ldr	w0, [sp, #32]
    34e0:	add	w0, w0, #0x1
    34e4:	sxtw	x1, w0
    34e8:	adrp	x0, 8 <omp_check_defines+0x8>
    34ec:	add	x0, x0, #0x0
    34f0:	ldr	x0, [x0]
    34f4:	cmp	x1, x0
    34f8:	b.ne	3508 <handle_omp_display_env+0x8fc>  // b.any
    34fc:	adrp	x0, 0 <omp_check_defines>
    3500:	add	x0, x0, #0x0
    3504:	b	3510 <handle_omp_display_env+0x904>
    3508:	adrp	x0, 0 <omp_check_defines>
    350c:	add	x0, x0, #0x0
    3510:	adrp	x1, 0 <stderr>
    3514:	add	x1, x1, #0x0
    3518:	ldr	x1, [x1]
    351c:	bl	0 <fputs>
    3520:	ldr	w0, [sp, #32]
    3524:	add	w0, w0, #0x1
    3528:	str	w0, [sp, #32]
    352c:	ldrsw	x1, [sp, #32]
    3530:	adrp	x0, 8 <omp_check_defines+0x8>
    3534:	add	x0, x0, #0x0
    3538:	ldr	x0, [x0]
    353c:	cmp	x1, x0
    3540:	b.cc	34a4 <handle_omp_display_env+0x898>  // b.lo, b.ul, b.last
    3544:	adrp	x0, 0 <stderr>
    3548:	add	x0, x0, #0x0
    354c:	ldr	x0, [x0]
    3550:	mov	x3, x0
    3554:	mov	x2, #0x2                   	// #2
    3558:	mov	x1, #0x1                   	// #1
    355c:	adrp	x0, 0 <omp_check_defines>
    3560:	add	x0, x0, #0x0
    3564:	bl	0 <fwrite>
    3568:	adrp	x0, 0 <stderr>
    356c:	add	x0, x0, #0x0
    3570:	ldr	x3, [x0]
    3574:	ldr	x2, [sp, #24]
    3578:	adrp	x0, 0 <omp_check_defines>
    357c:	add	x1, x0, #0x0
    3580:	mov	x0, x3
    3584:	bl	0 <fprintf>
    3588:	adrp	x0, 0 <stderr>
    358c:	add	x0, x0, #0x0
    3590:	ldr	x3, [x0]
    3594:	ldr	w0, [sp, #20]
    3598:	cmp	w0, #0x0
    359c:	b.le	35ac <handle_omp_display_env+0x9a0>
    35a0:	adrp	x0, 0 <omp_check_defines>
    35a4:	add	x0, x0, #0x0
    35a8:	b	35b4 <handle_omp_display_env+0x9a8>
    35ac:	adrp	x0, 0 <omp_check_defines>
    35b0:	add	x0, x0, #0x0
    35b4:	mov	x2, x0
    35b8:	adrp	x0, 0 <omp_check_defines>
    35bc:	add	x1, x0, #0x0
    35c0:	mov	x0, x3
    35c4:	bl	0 <fprintf>
    35c8:	adrp	x0, 0 <stderr>
    35cc:	add	x0, x0, #0x0
    35d0:	ldr	x3, [x0]
    35d4:	adrp	x0, 0 <omp_check_defines>
    35d8:	add	x0, x0, #0x0
    35dc:	ldr	w0, [x0, #20]
    35e0:	mov	w2, w0
    35e4:	adrp	x0, 0 <omp_check_defines>
    35e8:	add	x1, x0, #0x0
    35ec:	mov	x0, x3
    35f0:	bl	0 <fprintf>
    35f4:	adrp	x0, 0 <stderr>
    35f8:	add	x0, x0, #0x0
    35fc:	ldr	x3, [x0]
    3600:	adrp	x0, 28 <parse_schedule+0x18>
    3604:	add	x0, x0, #0x0
    3608:	ldr	x0, [x0]
    360c:	mov	x2, x0
    3610:	adrp	x0, 0 <omp_check_defines>
    3614:	add	x1, x0, #0x0
    3618:	mov	x0, x3
    361c:	bl	0 <fprintf>
    3620:	adrp	x0, 0 <stderr>
    3624:	add	x0, x0, #0x0
    3628:	ldr	x3, [x0]
    362c:	adrp	x0, 0 <omp_check_defines>
    3630:	add	x0, x0, #0x0
    3634:	ldrb	w0, [x0]
    3638:	cmp	w0, #0x0
    363c:	b.eq	364c <handle_omp_display_env+0xa40>  // b.none
    3640:	adrp	x0, 0 <omp_check_defines>
    3644:	add	x0, x0, #0x0
    3648:	b	3654 <handle_omp_display_env+0xa48>
    364c:	adrp	x0, 0 <omp_check_defines>
    3650:	add	x0, x0, #0x0
    3654:	mov	x2, x0
    3658:	adrp	x0, 0 <omp_check_defines>
    365c:	add	x1, x0, #0x0
    3660:	mov	x0, x3
    3664:	bl	0 <fprintf>
    3668:	adrp	x0, 0 <stderr>
    366c:	add	x0, x0, #0x0
    3670:	ldr	x3, [x0]
    3674:	adrp	x0, 0 <omp_check_defines>
    3678:	add	x0, x0, #0x0
    367c:	ldr	w0, [x0, #16]
    3680:	mov	w2, w0
    3684:	adrp	x0, 0 <omp_check_defines>
    3688:	add	x1, x0, #0x0
    368c:	mov	x0, x3
    3690:	bl	0 <fprintf>
    3694:	adrp	x0, 0 <stderr>
    3698:	add	x0, x0, #0x0
    369c:	ldr	x3, [x0]
    36a0:	adrp	x0, 4 <omp_check_defines+0x4>
    36a4:	add	x0, x0, #0x0
    36a8:	ldr	w0, [x0]
    36ac:	mov	w2, w0
    36b0:	adrp	x0, 0 <omp_check_defines>
    36b4:	add	x1, x0, #0x0
    36b8:	mov	x0, x3
    36bc:	bl	0 <fprintf>
    36c0:	adrp	x0, 0 <stderr>
    36c4:	add	x0, x0, #0x0
    36c8:	ldr	x3, [x0]
    36cc:	adrp	x0, 1 <omp_check_defines+0x1>
    36d0:	add	x0, x0, #0x0
    36d4:	ldrb	w0, [x0]
    36d8:	cmp	w0, #0x0
    36dc:	b.eq	36ec <handle_omp_display_env+0xae0>  // b.none
    36e0:	adrp	x0, 0 <omp_check_defines>
    36e4:	add	x0, x0, #0x0
    36e8:	b	36f4 <handle_omp_display_env+0xae8>
    36ec:	adrp	x0, 0 <omp_check_defines>
    36f0:	add	x0, x0, #0x0
    36f4:	mov	x2, x0
    36f8:	adrp	x0, 0 <omp_check_defines>
    36fc:	add	x1, x0, #0x0
    3700:	mov	x0, x3
    3704:	bl	0 <fprintf>
    3708:	adrp	x0, 0 <stderr>
    370c:	add	x0, x0, #0x0
    3710:	ldr	x3, [x0]
    3714:	adrp	x0, 40 <parse_schedule+0x30>
    3718:	add	x0, x0, #0x0
    371c:	ldr	x0, [x0]
    3720:	mov	x2, x0
    3724:	adrp	x0, 0 <omp_check_defines>
    3728:	add	x1, x0, #0x0
    372c:	mov	x0, x3
    3730:	bl	0 <fprintf>
    3734:	ldrb	w0, [sp, #38]
    3738:	cmp	w0, #0x0
    373c:	b.eq	37b0 <handle_omp_display_env+0xba4>  // b.none
    3740:	adrp	x0, 0 <stderr>
    3744:	add	x0, x0, #0x0
    3748:	ldr	x0, [x0]
    374c:	mov	x3, x0
    3750:	mov	x2, #0x19                  	// #25
    3754:	mov	x1, #0x1                   	// #1
    3758:	adrp	x0, 0 <omp_check_defines>
    375c:	add	x0, x0, #0x0
    3760:	bl	0 <fwrite>
    3764:	adrp	x0, 0 <stderr>
    3768:	add	x0, x0, #0x0
    376c:	ldr	x3, [x0]
    3770:	ldr	x2, [sp, #24]
    3774:	adrp	x0, 0 <omp_check_defines>
    3778:	add	x1, x0, #0x0
    377c:	mov	x0, x3
    3780:	bl	0 <fprintf>
    3784:	adrp	x0, 0 <stderr>
    3788:	add	x0, x0, #0x0
    378c:	ldr	x3, [x0]
    3790:	adrp	x0, 8 <omp_check_defines+0x8>
    3794:	add	x0, x0, #0x0
    3798:	ldr	x0, [x0]
    379c:	mov	x2, x0
    37a0:	adrp	x0, 0 <omp_check_defines>
    37a4:	add	x1, x0, #0x0
    37a8:	mov	x0, x3
    37ac:	bl	0 <fprintf>
    37b0:	adrp	x0, 0 <stderr>
    37b4:	add	x0, x0, #0x0
    37b8:	ldr	x0, [x0]
    37bc:	mov	x3, x0
    37c0:	mov	x2, #0x1f                  	// #31
    37c4:	mov	x1, #0x1                   	// #1
    37c8:	adrp	x0, 0 <omp_check_defines>
    37cc:	add	x0, x0, #0x0
    37d0:	bl	0 <fwrite>
    37d4:	b	37e4 <handle_omp_display_env+0xbd8>
    37d8:	nop
    37dc:	b	37e4 <handle_omp_display_env+0xbd8>
    37e0:	nop
    37e4:	ldp	x29, x30, [sp], #48
    37e8:	ret

00000000000037ec <initialize_env>:
    37ec:	stp	x29, x30, [sp, #-64]!
    37f0:	mov	x29, sp
    37f4:	str	xzr, [sp, #24]
    37f8:	bl	0 <omp_check_defines>
    37fc:	bl	10 <parse_schedule>
    3800:	adrp	x0, 0 <omp_check_defines>
    3804:	add	x1, x0, #0x0
    3808:	adrp	x0, 0 <omp_check_defines>
    380c:	add	x0, x0, #0x0
    3810:	bl	23fc <parse_boolean>
    3814:	adrp	x0, 0 <omp_check_defines>
    3818:	add	x1, x0, #0x0
    381c:	adrp	x0, 0 <omp_check_defines>
    3820:	add	x0, x0, #0x0
    3824:	bl	23fc <parse_boolean>
    3828:	adrp	x0, 0 <omp_check_defines>
    382c:	add	x1, x0, #0x0
    3830:	adrp	x0, 0 <omp_check_defines>
    3834:	add	x0, x0, #0x0
    3838:	bl	23fc <parse_boolean>
    383c:	adrp	x0, 1 <omp_check_defines+0x1>
    3840:	add	x1, x0, #0x0
    3844:	adrp	x0, 0 <omp_check_defines>
    3848:	add	x0, x0, #0x0
    384c:	bl	23fc <parse_boolean>
    3850:	mov	w2, #0x1                   	// #1
    3854:	adrp	x0, 0 <omp_check_defines>
    3858:	add	x1, x0, #0x0
    385c:	adrp	x0, 0 <omp_check_defines>
    3860:	add	x0, x0, #0x0
    3864:	bl	6f0 <parse_int>
    3868:	mov	w2, #0x1                   	// #1
    386c:	adrp	x0, 4 <omp_check_defines+0x4>
    3870:	add	x1, x0, #0x0
    3874:	adrp	x0, 0 <omp_check_defines>
    3878:	add	x0, x0, #0x0
    387c:	bl	6f0 <parse_int>
    3880:	mov	w2, #0x1                   	// #1
    3884:	adrp	x0, 28 <parse_schedule+0x18>
    3888:	add	x1, x0, #0x0
    388c:	adrp	x0, 0 <omp_check_defines>
    3890:	add	x0, x0, #0x0
    3894:	bl	62c <parse_unsigned_long>
    3898:	add	x0, sp, #0x20
    389c:	mov	w2, #0x0                   	// #0
    38a0:	mov	x1, x0
    38a4:	adrp	x0, 0 <omp_check_defines>
    38a8:	add	x0, x0, #0x0
    38ac:	bl	62c <parse_unsigned_long>
    38b0:	and	w0, w0, #0xff
    38b4:	cmp	w0, #0x0
    38b8:	b.eq	38e4 <initialize_env+0xf8>  // b.none
    38bc:	ldr	x1, [sp, #32]
    38c0:	mov	x0, #0x7fffffff            	// #2147483647
    38c4:	cmp	x1, x0
    38c8:	b.hi	38d4 <initialize_env+0xe8>  // b.pmore
    38cc:	ldr	x0, [sp, #32]
    38d0:	b	38d8 <initialize_env+0xec>
    38d4:	mov	w0, #0xffffffff            	// #-1
    38d8:	adrp	x1, 0 <omp_check_defines>
    38dc:	add	x1, x1, #0x0
    38e0:	str	w0, [x1, #20]
    38e4:	mov	w2, #0x1                   	// #1
    38e8:	adrp	x0, 4 <omp_check_defines+0x4>
    38ec:	add	x1, x0, #0x0
    38f0:	adrp	x0, 0 <omp_check_defines>
    38f4:	add	x0, x0, #0x0
    38f8:	bl	724 <parse_int_secure>
    38fc:	bl	0 <gomp_init_num_threads>
    3900:	adrp	x0, 0 <omp_check_defines>
    3904:	add	x0, x0, #0x0
    3908:	ldr	x1, [x0]
    390c:	adrp	x0, 30 <parse_schedule+0x20>
    3910:	add	x0, x0, #0x0
    3914:	str	x1, [x0]
    3918:	adrp	x0, 8 <omp_check_defines+0x8>
    391c:	add	x3, x0, #0x0
    3920:	adrp	x0, 8 <omp_check_defines+0x8>
    3924:	add	x2, x0, #0x0
    3928:	adrp	x0, 0 <omp_check_defines>
    392c:	add	x1, x0, #0x0
    3930:	adrp	x0, 0 <omp_check_defines>
    3934:	add	x0, x0, #0x0
    3938:	bl	758 <parse_unsigned_long_list>
    393c:	and	w0, w0, #0xff
    3940:	eor	w0, w0, #0x1
    3944:	and	w0, w0, #0xff
    3948:	cmp	w0, #0x0
    394c:	b.eq	3968 <initialize_env+0x17c>  // b.none
    3950:	adrp	x0, 30 <parse_schedule+0x20>
    3954:	add	x0, x0, #0x0
    3958:	ldr	x1, [x0]
    395c:	adrp	x0, 0 <omp_check_defines>
    3960:	add	x0, x0, #0x0
    3964:	str	x1, [x0]
    3968:	strb	wzr, [sp, #63]
    396c:	adrp	x0, 8 <omp_check_defines+0x8>
    3970:	add	x3, x0, #0x0
    3974:	adrp	x0, 8 <omp_check_defines+0x8>
    3978:	add	x2, x0, #0x0
    397c:	adrp	x0, 0 <omp_check_defines>
    3980:	add	x1, x0, #0x0
    3984:	adrp	x0, 0 <omp_check_defines>
    3988:	add	x0, x0, #0x0
    398c:	bl	ad0 <parse_bind_var>
    3990:	and	w0, w0, #0xff
    3994:	cmp	w0, #0x0
    3998:	b.eq	39b8 <initialize_env+0x1cc>  // b.none
    399c:	adrp	x0, 0 <omp_check_defines>
    39a0:	add	x0, x0, #0x0
    39a4:	ldrb	w0, [x0, #26]
    39a8:	cmp	w0, #0x0
    39ac:	b.ne	39b8 <initialize_env+0x1cc>  // b.any
    39b0:	mov	w0, #0x1                   	// #1
    39b4:	strb	w0, [sp, #63]
    39b8:	ldrb	w1, [sp, #63]
    39bc:	adrp	x0, 0 <omp_check_defines>
    39c0:	add	x0, x0, #0x0
    39c4:	bl	1748 <parse_places_var>
    39c8:	and	w0, w0, #0xff
    39cc:	cmp	w0, #0x0
    39d0:	b.eq	3a00 <initialize_env+0x214>  // b.none
    39d4:	adrp	x0, 0 <omp_check_defines>
    39d8:	add	x0, x0, #0x0
    39dc:	ldrb	w0, [x0, #26]
    39e0:	cmp	w0, #0x0
    39e4:	b.ne	39f8 <initialize_env+0x20c>  // b.any
    39e8:	adrp	x0, 0 <omp_check_defines>
    39ec:	add	x0, x0, #0x0
    39f0:	mov	w1, #0x1                   	// #1
    39f4:	strb	w1, [x0, #26]
    39f8:	mov	w0, #0x1                   	// #1
    39fc:	strb	w0, [sp, #63]
    3a00:	ldrb	w0, [sp, #63]
    3a04:	bl	268c <parse_affinity>
    3a08:	and	w0, w0, #0xff
    3a0c:	cmp	w0, #0x0
    3a10:	b.eq	3a40 <initialize_env+0x254>  // b.none
    3a14:	adrp	x0, 0 <omp_check_defines>
    3a18:	add	x0, x0, #0x0
    3a1c:	ldrb	w0, [x0, #26]
    3a20:	cmp	w0, #0x0
    3a24:	b.ne	3a38 <initialize_env+0x24c>  // b.any
    3a28:	adrp	x0, 0 <omp_check_defines>
    3a2c:	add	x0, x0, #0x0
    3a30:	mov	w1, #0x1                   	// #1
    3a34:	strb	w1, [x0, #26]
    3a38:	mov	w0, #0x1                   	// #1
    3a3c:	strb	w0, [sp, #63]
    3a40:	adrp	x0, 0 <omp_check_defines>
    3a44:	add	x0, x0, #0x0
    3a48:	ldrb	w0, [x0, #26]
    3a4c:	cmp	w0, #0x0
    3a50:	b.eq	3a58 <initialize_env+0x26c>  // b.none
    3a54:	bl	0 <gomp_init_affinity>
    3a58:	adrp	x0, 0 <omp_check_defines>
    3a5c:	add	x0, x0, #0x0
    3a60:	bl	0 <getenv>
    3a64:	str	x0, [sp, #48]
    3a68:	ldr	x0, [sp, #48]
    3a6c:	cmp	x0, #0x0
    3a70:	b.eq	3a88 <initialize_env+0x29c>  // b.none
    3a74:	ldr	x0, [sp, #48]
    3a78:	bl	0 <strlen>
    3a7c:	mov	x1, x0
    3a80:	ldr	x0, [sp, #48]
    3a84:	bl	0 <gomp_set_affinity_format>
    3a88:	bl	2544 <parse_wait_policy>
    3a8c:	str	w0, [sp, #44]
    3a90:	adrp	x0, 8 <omp_check_defines+0x8>
    3a94:	add	x1, x0, #0x0
    3a98:	adrp	x0, 0 <omp_check_defines>
    3a9c:	add	x0, x0, #0x0
    3aa0:	bl	214c <parse_spincount>
    3aa4:	and	w0, w0, #0xff
    3aa8:	eor	w0, w0, #0x1
    3aac:	and	w0, w0, #0xff
    3ab0:	cmp	w0, #0x0
    3ab4:	b.eq	3b00 <initialize_env+0x314>  // b.none
    3ab8:	ldr	w0, [sp, #44]
    3abc:	cmp	w0, #0x0
    3ac0:	b.le	3ae0 <initialize_env+0x2f4>
    3ac4:	adrp	x0, 8 <omp_check_defines+0x8>
    3ac8:	add	x0, x0, #0x0
    3acc:	mov	x1, #0xac00                	// #44032
    3ad0:	movk	x1, #0xfc23, lsl #16
    3ad4:	movk	x1, #0x6, lsl #32
    3ad8:	str	x1, [x0]
    3adc:	b	3b00 <initialize_env+0x314>
    3ae0:	ldr	w0, [sp, #44]
    3ae4:	cmp	w0, #0x0
    3ae8:	b.ge	3b00 <initialize_env+0x314>  // b.tcont
    3aec:	adrp	x0, 8 <omp_check_defines+0x8>
    3af0:	add	x0, x0, #0x0
    3af4:	mov	x1, #0x93e0                	// #37856
    3af8:	movk	x1, #0x4, lsl #16
    3afc:	str	x1, [x0]
    3b00:	ldr	w0, [sp, #44]
    3b04:	cmp	w0, #0x0
    3b08:	b.le	3b20 <initialize_env+0x334>
    3b0c:	adrp	x0, 8 <omp_check_defines+0x8>
    3b10:	add	x0, x0, #0x0
    3b14:	mov	x1, #0x3e8                 	// #1000
    3b18:	str	x1, [x0]
    3b1c:	b	3b3c <initialize_env+0x350>
    3b20:	ldr	w0, [sp, #44]
    3b24:	cmp	w0, #0x0
    3b28:	b.ge	3b3c <initialize_env+0x350>  // b.tcont
    3b2c:	adrp	x0, 8 <omp_check_defines+0x8>
    3b30:	add	x0, x0, #0x0
    3b34:	mov	x1, #0x64                  	// #100
    3b38:	str	x1, [x0]
    3b3c:	adrp	x0, 8 <omp_check_defines+0x8>
    3b40:	add	x0, x0, #0x0
    3b44:	ldr	x1, [x0]
    3b48:	adrp	x0, 8 <omp_check_defines+0x8>
    3b4c:	add	x0, x0, #0x0
    3b50:	ldr	x0, [x0]
    3b54:	cmp	x1, x0
    3b58:	b.ls	3b74 <initialize_env+0x388>  // b.plast
    3b5c:	adrp	x0, 8 <omp_check_defines+0x8>
    3b60:	add	x0, x0, #0x0
    3b64:	ldr	x1, [x0]
    3b68:	adrp	x0, 8 <omp_check_defines+0x8>
    3b6c:	add	x0, x0, #0x0
    3b70:	str	x1, [x0]
    3b74:	adrp	x0, 0 <gomp_thread_attr>
    3b78:	add	x0, x0, #0x0
    3b7c:	bl	0 <pthread_attr_init>
    3b80:	add	x0, sp, #0x18
    3b84:	mov	x1, x0
    3b88:	adrp	x0, 0 <omp_check_defines>
    3b8c:	add	x0, x0, #0x0
    3b90:	bl	1f10 <parse_stacksize>
    3b94:	and	w0, w0, #0xff
    3b98:	cmp	w0, #0x0
    3b9c:	b.ne	3bc0 <initialize_env+0x3d4>  // b.any
    3ba0:	add	x0, sp, #0x18
    3ba4:	mov	x1, x0
    3ba8:	adrp	x0, 0 <omp_check_defines>
    3bac:	add	x0, x0, #0x0
    3bb0:	bl	1f10 <parse_stacksize>
    3bb4:	and	w0, w0, #0xff
    3bb8:	cmp	w0, #0x0
    3bbc:	b.eq	3c3c <initialize_env+0x450>  // b.none
    3bc0:	ldr	x0, [sp, #24]
    3bc4:	mov	x1, x0
    3bc8:	adrp	x0, 0 <gomp_thread_attr>
    3bcc:	add	x0, x0, #0x0
    3bd0:	bl	0 <pthread_attr_setstacksize>
    3bd4:	str	w0, [sp, #40]
    3bd8:	ldr	w0, [sp, #40]
    3bdc:	cmp	w0, #0x16
    3be0:	b.ne	3c18 <initialize_env+0x42c>  // b.any
    3be4:	ldr	x1, [sp, #24]
    3be8:	mov	x0, #0x1ffff               	// #131071
    3bec:	cmp	x1, x0
    3bf0:	b.hi	3c08 <initialize_env+0x41c>  // b.pmore
    3bf4:	mov	x1, #0x80                  	// #128
    3bf8:	adrp	x0, 0 <omp_check_defines>
    3bfc:	add	x0, x0, #0x0
    3c00:	bl	0 <gomp_error>
    3c04:	b	3c3c <initialize_env+0x450>
    3c08:	adrp	x0, 0 <omp_check_defines>
    3c0c:	add	x0, x0, #0x0
    3c10:	bl	0 <gomp_error>
    3c14:	b	3c3c <initialize_env+0x450>
    3c18:	ldr	w0, [sp, #40]
    3c1c:	cmp	w0, #0x0
    3c20:	b.eq	3c3c <initialize_env+0x450>  // b.none
    3c24:	ldr	w0, [sp, #40]
    3c28:	bl	0 <strerror>
    3c2c:	mov	x1, x0
    3c30:	adrp	x0, 0 <omp_check_defines>
    3c34:	add	x0, x0, #0x0
    3c38:	bl	0 <gomp_error>
    3c3c:	ldr	x0, [sp, #24]
    3c40:	ldr	w1, [sp, #44]
    3c44:	bl	2c0c <handle_omp_display_env>
    3c48:	mov	w2, #0x1                   	// #1
    3c4c:	adrp	x0, 4 <omp_check_defines+0x4>
    3c50:	add	x1, x0, #0x0
    3c54:	adrp	x0, 0 <omp_check_defines>
    3c58:	add	x0, x0, #0x0
    3c5c:	bl	6f0 <parse_int>
    3c60:	and	w0, w0, #0xff
    3c64:	eor	w0, w0, #0x1
    3c68:	and	w0, w0, #0xff
    3c6c:	cmp	w0, #0x0
    3c70:	b.eq	3c80 <initialize_env+0x494>  // b.none
    3c74:	adrp	x0, 4 <omp_check_defines+0x4>
    3c78:	add	x0, x0, #0x0
    3c7c:	str	wzr, [x0]
    3c80:	bl	2a78 <parse_acc_device_type>
    3c84:	bl	2ae4 <parse_gomp_openacc_dim>
    3c88:	bl	0 <goacc_runtime_initialize>
    3c8c:	nop
    3c90:	ldp	x29, x30, [sp], #64
    3c94:	ret

error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_vdebug>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	str	w0, [sp, #76]
  10:	str	x1, [sp, #64]
  14:	mov	x19, x2
  18:	adrp	x0, 0 <gomp_debug_var>
  1c:	add	x0, x0, #0x0
  20:	ldr	w0, [x0]
  24:	cmp	w0, #0x0
  28:	b.eq	64 <gomp_vdebug+0x64>  // b.none
  2c:	adrp	x0, 0 <stderr>
  30:	add	x0, x0, #0x0
  34:	ldr	x4, [x0]
  38:	add	x2, sp, #0x20
  3c:	mov	x3, x19
  40:	ldp	x0, x1, [x3]
  44:	stp	x0, x1, [x2]
  48:	ldp	x0, x1, [x3, #16]
  4c:	stp	x0, x1, [x2, #16]
  50:	add	x0, sp, #0x20
  54:	mov	x2, x0
  58:	ldr	x1, [sp, #64]
  5c:	mov	x0, x4
  60:	bl	0 <vfprintf>
  64:	nop
  68:	ldr	x19, [sp, #16]
  6c:	ldp	x29, x30, [sp], #80
  70:	ret

0000000000000074 <gomp_debug>:
  74:	stp	x29, x30, [sp, #-272]!
  78:	mov	x29, sp
  7c:	str	w0, [sp, #60]
  80:	str	x1, [sp, #48]
  84:	str	x2, [sp, #224]
  88:	str	x3, [sp, #232]
  8c:	str	x4, [sp, #240]
  90:	str	x5, [sp, #248]
  94:	str	x6, [sp, #256]
  98:	str	x7, [sp, #264]
  9c:	str	q0, [sp, #96]
  a0:	str	q1, [sp, #112]
  a4:	str	q2, [sp, #128]
  a8:	str	q3, [sp, #144]
  ac:	str	q4, [sp, #160]
  b0:	str	q5, [sp, #176]
  b4:	str	q6, [sp, #192]
  b8:	str	q7, [sp, #208]
  bc:	add	x0, sp, #0x110
  c0:	str	x0, [sp, #64]
  c4:	add	x0, sp, #0x110
  c8:	str	x0, [sp, #72]
  cc:	add	x0, sp, #0xe0
  d0:	str	x0, [sp, #80]
  d4:	mov	w0, #0xffffffd0            	// #-48
  d8:	str	w0, [sp, #88]
  dc:	mov	w0, #0xffffff80            	// #-128
  e0:	str	w0, [sp, #92]
  e4:	add	x2, sp, #0x10
  e8:	add	x3, sp, #0x40
  ec:	ldp	x0, x1, [x3]
  f0:	stp	x0, x1, [x2]
  f4:	ldp	x0, x1, [x3, #16]
  f8:	stp	x0, x1, [x2, #16]
  fc:	add	x0, sp, #0x10
 100:	mov	x2, x0
 104:	ldr	x1, [sp, #48]
 108:	ldr	w0, [sp, #60]
 10c:	bl	0 <gomp_vdebug>
 110:	nop
 114:	ldp	x29, x30, [sp], #272
 118:	ret

000000000000011c <gomp_verror>:
 11c:	stp	x29, x30, [sp, #-80]!
 120:	mov	x29, sp
 124:	str	x19, [sp, #16]
 128:	str	x0, [sp, #72]
 12c:	mov	x19, x1
 130:	adrp	x0, 0 <stderr>
 134:	add	x0, x0, #0x0
 138:	ldr	x0, [x0]
 13c:	mov	x3, x0
 140:	mov	x2, #0xa                   	// #10
 144:	mov	x1, #0x1                   	// #1
 148:	adrp	x0, 0 <gomp_vdebug>
 14c:	add	x0, x0, #0x0
 150:	bl	0 <fwrite>
 154:	adrp	x0, 0 <stderr>
 158:	add	x0, x0, #0x0
 15c:	ldr	x4, [x0]
 160:	add	x2, sp, #0x20
 164:	mov	x3, x19
 168:	ldp	x0, x1, [x3]
 16c:	stp	x0, x1, [x2]
 170:	ldp	x0, x1, [x3, #16]
 174:	stp	x0, x1, [x2, #16]
 178:	add	x0, sp, #0x20
 17c:	mov	x2, x0
 180:	ldr	x1, [sp, #72]
 184:	mov	x0, x4
 188:	bl	0 <vfprintf>
 18c:	adrp	x0, 0 <stderr>
 190:	add	x0, x0, #0x0
 194:	ldr	x0, [x0]
 198:	mov	x1, x0
 19c:	mov	w0, #0xa                   	// #10
 1a0:	bl	0 <fputc>
 1a4:	nop
 1a8:	ldr	x19, [sp, #16]
 1ac:	ldp	x29, x30, [sp], #80
 1b0:	ret

00000000000001b4 <gomp_error>:
 1b4:	stp	x29, x30, [sp, #-288]!
 1b8:	mov	x29, sp
 1bc:	str	x0, [sp, #56]
 1c0:	str	x1, [sp, #232]
 1c4:	str	x2, [sp, #240]
 1c8:	str	x3, [sp, #248]
 1cc:	str	x4, [sp, #256]
 1d0:	str	x5, [sp, #264]
 1d4:	str	x6, [sp, #272]
 1d8:	str	x7, [sp, #280]
 1dc:	str	q0, [sp, #96]
 1e0:	str	q1, [sp, #112]
 1e4:	str	q2, [sp, #128]
 1e8:	str	q3, [sp, #144]
 1ec:	str	q4, [sp, #160]
 1f0:	str	q5, [sp, #176]
 1f4:	str	q6, [sp, #192]
 1f8:	str	q7, [sp, #208]
 1fc:	add	x0, sp, #0x120
 200:	str	x0, [sp, #64]
 204:	add	x0, sp, #0x120
 208:	str	x0, [sp, #72]
 20c:	add	x0, sp, #0xe0
 210:	str	x0, [sp, #80]
 214:	mov	w0, #0xffffffc8            	// #-56
 218:	str	w0, [sp, #88]
 21c:	mov	w0, #0xffffff80            	// #-128
 220:	str	w0, [sp, #92]
 224:	add	x2, sp, #0x10
 228:	add	x3, sp, #0x40
 22c:	ldp	x0, x1, [x3]
 230:	stp	x0, x1, [x2]
 234:	ldp	x0, x1, [x3, #16]
 238:	stp	x0, x1, [x2, #16]
 23c:	add	x0, sp, #0x10
 240:	mov	x1, x0
 244:	ldr	x0, [sp, #56]
 248:	bl	11c <gomp_verror>
 24c:	nop
 250:	ldp	x29, x30, [sp], #288
 254:	ret

0000000000000258 <gomp_vfatal>:
 258:	stp	x29, x30, [sp, #-80]!
 25c:	mov	x29, sp
 260:	str	x19, [sp, #16]
 264:	str	x0, [sp, #72]
 268:	mov	x19, x1
 26c:	add	x2, sp, #0x20
 270:	mov	x3, x19
 274:	ldp	x0, x1, [x3]
 278:	stp	x0, x1, [x2]
 27c:	ldp	x0, x1, [x3, #16]
 280:	stp	x0, x1, [x2, #16]
 284:	add	x0, sp, #0x20
 288:	mov	x1, x0
 28c:	ldr	x0, [sp, #72]
 290:	bl	11c <gomp_verror>
 294:	mov	w0, #0x1                   	// #1
 298:	bl	0 <exit>

000000000000029c <gomp_fatal>:
 29c:	stp	x29, x30, [sp, #-288]!
 2a0:	mov	x29, sp
 2a4:	str	x0, [sp, #56]
 2a8:	str	x1, [sp, #232]
 2ac:	str	x2, [sp, #240]
 2b0:	str	x3, [sp, #248]
 2b4:	str	x4, [sp, #256]
 2b8:	str	x5, [sp, #264]
 2bc:	str	x6, [sp, #272]
 2c0:	str	x7, [sp, #280]
 2c4:	str	q0, [sp, #96]
 2c8:	str	q1, [sp, #112]
 2cc:	str	q2, [sp, #128]
 2d0:	str	q3, [sp, #144]
 2d4:	str	q4, [sp, #160]
 2d8:	str	q5, [sp, #176]
 2dc:	str	q6, [sp, #192]
 2e0:	str	q7, [sp, #208]
 2e4:	add	x0, sp, #0x120
 2e8:	str	x0, [sp, #64]
 2ec:	add	x0, sp, #0x120
 2f0:	str	x0, [sp, #72]
 2f4:	add	x0, sp, #0xe0
 2f8:	str	x0, [sp, #80]
 2fc:	mov	w0, #0xffffffc8            	// #-56
 300:	str	w0, [sp, #88]
 304:	mov	w0, #0xffffff80            	// #-128
 308:	str	w0, [sp, #92]
 30c:	add	x2, sp, #0x10
 310:	add	x3, sp, #0x40
 314:	ldp	x0, x1, [x3]
 318:	stp	x0, x1, [x2]
 31c:	ldp	x0, x1, [x3, #16]
 320:	stp	x0, x1, [x2, #16]
 324:	add	x0, sp, #0x10
 328:	mov	x1, x0
 32c:	ldr	x0, [sp, #56]
 330:	bl	258 <gomp_vfatal>

icv.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_thread>:
   0:	mrs	x1, tpidr_el0
   4:	adrp	x0, 0 <gomp_tls_data>
   8:	ldr	x0, [x0]
   c:	add	x0, x1, x0
  10:	ret

0000000000000014 <gomp_icv>:
  14:	stp	x29, x30, [sp, #-48]!
  18:	mov	x29, sp
  1c:	strb	w0, [sp, #31]
  20:	bl	0 <gomp_thread>
  24:	ldr	x0, [x0, #80]
  28:	str	x0, [sp, #40]
  2c:	ldr	x0, [sp, #40]
  30:	cmp	x0, #0x0
  34:	b.eq	44 <gomp_icv+0x30>  // b.none
  38:	ldr	x0, [sp, #40]
  3c:	add	x0, x0, #0x90
  40:	b	60 <gomp_icv+0x4c>
  44:	ldrb	w0, [sp, #31]
  48:	cmp	w0, #0x0
  4c:	b.eq	58 <gomp_icv+0x44>  // b.none
  50:	bl	0 <gomp_new_icv>
  54:	b	60 <gomp_icv+0x4c>
  58:	adrp	x0, 0 <gomp_global_icv>
  5c:	add	x0, x0, #0x0
  60:	ldp	x29, x30, [sp], #48
  64:	ret

0000000000000068 <gomp_ialias_omp_set_num_threads>:
  68:	stp	x29, x30, [sp, #-48]!
  6c:	mov	x29, sp
  70:	str	w0, [sp, #28]
  74:	mov	w0, #0x1                   	// #1
  78:	bl	14 <gomp_icv>
  7c:	str	x0, [sp, #40]
  80:	ldr	w2, [sp, #28]
  84:	ldr	w1, [sp, #28]
  88:	mov	w0, #0x1                   	// #1
  8c:	cmp	w2, #0x0
  90:	csel	w0, w1, w0, gt
  94:	sxtw	x1, w0
  98:	ldr	x0, [sp, #40]
  9c:	str	x1, [x0]
  a0:	nop
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret

00000000000000ac <gomp_ialias_omp_set_dynamic>:
  ac:	stp	x29, x30, [sp, #-48]!
  b0:	mov	x29, sp
  b4:	str	w0, [sp, #28]
  b8:	mov	w0, #0x1                   	// #1
  bc:	bl	14 <gomp_icv>
  c0:	str	x0, [sp, #40]
  c4:	ldr	w0, [sp, #28]
  c8:	cmp	w0, #0x0
  cc:	cset	w0, ne  // ne = any
  d0:	and	w1, w0, #0xff
  d4:	ldr	x0, [sp, #40]
  d8:	strb	w1, [x0, #24]
  dc:	nop
  e0:	ldp	x29, x30, [sp], #48
  e4:	ret

00000000000000e8 <gomp_ialias_omp_get_dynamic>:
  e8:	stp	x29, x30, [sp, #-32]!
  ec:	mov	x29, sp
  f0:	mov	w0, #0x0                   	// #0
  f4:	bl	14 <gomp_icv>
  f8:	str	x0, [sp, #24]
  fc:	ldr	x0, [sp, #24]
 100:	ldrb	w0, [x0, #24]
 104:	ldp	x29, x30, [sp], #32
 108:	ret

000000000000010c <gomp_ialias_omp_set_nested>:
 10c:	stp	x29, x30, [sp, #-48]!
 110:	mov	x29, sp
 114:	str	w0, [sp, #28]
 118:	mov	w0, #0x1                   	// #1
 11c:	bl	14 <gomp_icv>
 120:	str	x0, [sp, #40]
 124:	ldr	w0, [sp, #28]
 128:	cmp	w0, #0x0
 12c:	cset	w0, ne  // ne = any
 130:	and	w1, w0, #0xff
 134:	ldr	x0, [sp, #40]
 138:	strb	w1, [x0, #25]
 13c:	nop
 140:	ldp	x29, x30, [sp], #48
 144:	ret

0000000000000148 <gomp_ialias_omp_get_nested>:
 148:	stp	x29, x30, [sp, #-32]!
 14c:	mov	x29, sp
 150:	mov	w0, #0x0                   	// #0
 154:	bl	14 <gomp_icv>
 158:	str	x0, [sp, #24]
 15c:	ldr	x0, [sp, #24]
 160:	ldrb	w0, [x0, #25]
 164:	ldp	x29, x30, [sp], #32
 168:	ret

000000000000016c <gomp_ialias_omp_set_schedule>:
 16c:	stp	x29, x30, [sp, #-48]!
 170:	mov	x29, sp
 174:	str	w0, [sp, #28]
 178:	str	w1, [sp, #24]
 17c:	mov	w0, #0x1                   	// #1
 180:	bl	14 <gomp_icv>
 184:	str	x0, [sp, #40]
 188:	ldr	w0, [sp, #28]
 18c:	and	w0, w0, #0x7fffffff
 190:	cmp	w0, #0x4
 194:	b.eq	204 <gomp_ialias_omp_set_schedule+0x98>  // b.none
 198:	cmp	w0, #0x4
 19c:	b.hi	218 <gomp_ialias_omp_set_schedule+0xac>  // b.pmore
 1a0:	cmp	w0, #0x1
 1a4:	b.eq	1c0 <gomp_ialias_omp_set_schedule+0x54>  // b.none
 1a8:	cmp	w0, #0x0
 1ac:	b.eq	218 <gomp_ialias_omp_set_schedule+0xac>  // b.none
 1b0:	sub	w0, w0, #0x2
 1b4:	cmp	w0, #0x1
 1b8:	b.hi	218 <gomp_ialias_omp_set_schedule+0xac>  // b.pmore
 1bc:	b	1e0 <gomp_ialias_omp_set_schedule+0x74>
 1c0:	ldr	w0, [sp, #24]
 1c4:	cmp	w0, #0x0
 1c8:	b.gt	1d0 <gomp_ialias_omp_set_schedule+0x64>
 1cc:	str	wzr, [sp, #24]
 1d0:	ldr	x0, [sp, #40]
 1d4:	ldr	w1, [sp, #24]
 1d8:	str	w1, [x0, #12]
 1dc:	b	208 <gomp_ialias_omp_set_schedule+0x9c>
 1e0:	ldr	w0, [sp, #24]
 1e4:	cmp	w0, #0x0
 1e8:	b.gt	1f4 <gomp_ialias_omp_set_schedule+0x88>
 1ec:	mov	w0, #0x1                   	// #1
 1f0:	str	w0, [sp, #24]
 1f4:	ldr	x0, [sp, #40]
 1f8:	ldr	w1, [sp, #24]
 1fc:	str	w1, [x0, #12]
 200:	b	208 <gomp_ialias_omp_set_schedule+0x9c>
 204:	nop
 208:	ldr	x0, [sp, #40]
 20c:	ldr	w1, [sp, #28]
 210:	str	w1, [x0, #8]
 214:	b	21c <gomp_ialias_omp_set_schedule+0xb0>
 218:	nop
 21c:	ldp	x29, x30, [sp], #48
 220:	ret

0000000000000224 <gomp_ialias_omp_get_schedule>:
 224:	stp	x29, x30, [sp, #-48]!
 228:	mov	x29, sp
 22c:	str	x0, [sp, #24]
 230:	str	x1, [sp, #16]
 234:	mov	w0, #0x0                   	// #0
 238:	bl	14 <gomp_icv>
 23c:	str	x0, [sp, #40]
 240:	ldr	x0, [sp, #40]
 244:	ldr	w1, [x0, #8]
 248:	ldr	x0, [sp, #24]
 24c:	str	w1, [x0]
 250:	ldr	x0, [sp, #40]
 254:	ldr	w1, [x0, #12]
 258:	ldr	x0, [sp, #16]
 25c:	str	w1, [x0]
 260:	nop
 264:	ldp	x29, x30, [sp], #48
 268:	ret

000000000000026c <gomp_ialias_omp_get_max_threads>:
 26c:	stp	x29, x30, [sp, #-32]!
 270:	mov	x29, sp
 274:	mov	w0, #0x0                   	// #0
 278:	bl	14 <gomp_icv>
 27c:	str	x0, [sp, #24]
 280:	ldr	x0, [sp, #24]
 284:	ldr	x0, [x0]
 288:	ldp	x29, x30, [sp], #32
 28c:	ret

0000000000000290 <gomp_ialias_omp_get_thread_limit>:
 290:	stp	x29, x30, [sp, #-32]!
 294:	mov	x29, sp
 298:	mov	w0, #0x0                   	// #0
 29c:	bl	14 <gomp_icv>
 2a0:	str	x0, [sp, #24]
 2a4:	ldr	x0, [sp, #24]
 2a8:	ldr	w0, [x0, #20]
 2ac:	cmp	w0, #0x0
 2b0:	b.lt	2c0 <gomp_ialias_omp_get_thread_limit+0x30>  // b.tstop
 2b4:	ldr	x0, [sp, #24]
 2b8:	ldr	w0, [x0, #20]
 2bc:	b	2c4 <gomp_ialias_omp_get_thread_limit+0x34>
 2c0:	mov	w0, #0x7fffffff            	// #2147483647
 2c4:	ldp	x29, x30, [sp], #32
 2c8:	ret

00000000000002cc <gomp_ialias_omp_set_max_active_levels>:
 2cc:	sub	sp, sp, #0x10
 2d0:	str	w0, [sp, #12]
 2d4:	ldr	w0, [sp, #12]
 2d8:	cmp	w0, #0x0
 2dc:	b.lt	2f0 <gomp_ialias_omp_set_max_active_levels+0x24>  // b.tstop
 2e0:	ldrsw	x1, [sp, #12]
 2e4:	adrp	x0, 0 <gomp_max_active_levels_var>
 2e8:	add	x0, x0, #0x0
 2ec:	str	x1, [x0]
 2f0:	nop
 2f4:	add	sp, sp, #0x10
 2f8:	ret

00000000000002fc <gomp_ialias_omp_get_max_active_levels>:
 2fc:	adrp	x0, 0 <gomp_max_active_levels_var>
 300:	add	x0, x0, #0x0
 304:	ldr	x0, [x0]
 308:	ret

000000000000030c <gomp_ialias_omp_get_cancellation>:
 30c:	adrp	x0, 0 <gomp_cancel_var>
 310:	add	x0, x0, #0x0
 314:	ldrb	w0, [x0]
 318:	ret

000000000000031c <gomp_ialias_omp_get_max_task_priority>:
 31c:	adrp	x0, 0 <gomp_max_task_priority_var>
 320:	add	x0, x0, #0x0
 324:	ldr	w0, [x0]
 328:	ret

000000000000032c <gomp_ialias_omp_get_proc_bind>:
 32c:	stp	x29, x30, [sp, #-32]!
 330:	mov	x29, sp
 334:	mov	w0, #0x0                   	// #0
 338:	bl	14 <gomp_icv>
 33c:	str	x0, [sp, #24]
 340:	ldr	x0, [sp, #24]
 344:	ldrb	w0, [x0, #26]
 348:	ldp	x29, x30, [sp], #32
 34c:	ret

0000000000000350 <gomp_ialias_omp_get_initial_device>:
 350:	mov	w0, #0xfffffffe            	// #-2
 354:	ret

0000000000000358 <gomp_ialias_omp_get_num_places>:
 358:	adrp	x0, 0 <gomp_places_list_len>
 35c:	add	x0, x0, #0x0
 360:	ldr	x0, [x0]
 364:	ret

0000000000000368 <gomp_ialias_omp_get_place_num>:
 368:	stp	x29, x30, [sp, #-32]!
 36c:	mov	x29, sp
 370:	adrp	x0, 0 <gomp_places_list>
 374:	add	x0, x0, #0x0
 378:	ldr	x0, [x0]
 37c:	cmp	x0, #0x0
 380:	b.ne	38c <gomp_ialias_omp_get_place_num+0x24>  // b.any
 384:	mov	w0, #0xffffffff            	// #-1
 388:	b	3b4 <gomp_ialias_omp_get_place_num+0x4c>
 38c:	bl	0 <gomp_thread>
 390:	str	x0, [sp, #24]
 394:	ldr	x0, [sp, #24]
 398:	ldr	w0, [x0, #92]
 39c:	cmp	w0, #0x0
 3a0:	b.ne	3a8 <gomp_ialias_omp_get_place_num+0x40>  // b.any
 3a4:	bl	0 <gomp_init_affinity>
 3a8:	ldr	x0, [sp, #24]
 3ac:	ldr	w0, [x0, #92]
 3b0:	sub	w0, w0, #0x1
 3b4:	ldp	x29, x30, [sp], #32
 3b8:	ret

00000000000003bc <gomp_ialias_omp_get_partition_num_places>:
 3bc:	stp	x29, x30, [sp, #-32]!
 3c0:	mov	x29, sp
 3c4:	adrp	x0, 0 <gomp_places_list>
 3c8:	add	x0, x0, #0x0
 3cc:	ldr	x0, [x0]
 3d0:	cmp	x0, #0x0
 3d4:	b.ne	3e0 <gomp_ialias_omp_get_partition_num_places+0x24>  // b.any
 3d8:	mov	w0, #0x0                   	// #0
 3dc:	b	404 <gomp_ialias_omp_get_partition_num_places+0x48>
 3e0:	bl	0 <gomp_thread>
 3e4:	str	x0, [sp, #24]
 3e8:	ldr	x0, [sp, #24]
 3ec:	ldr	w0, [x0, #92]
 3f0:	cmp	w0, #0x0
 3f4:	b.ne	3fc <gomp_ialias_omp_get_partition_num_places+0x40>  // b.any
 3f8:	bl	0 <gomp_init_affinity>
 3fc:	ldr	x0, [sp, #24]
 400:	ldr	w0, [x0, #56]
 404:	ldp	x29, x30, [sp], #32
 408:	ret

000000000000040c <gomp_ialias_omp_get_partition_place_nums>:
 40c:	stp	x29, x30, [sp, #-48]!
 410:	mov	x29, sp
 414:	str	x0, [sp, #24]
 418:	adrp	x0, 0 <gomp_places_list>
 41c:	add	x0, x0, #0x0
 420:	ldr	x0, [x0]
 424:	cmp	x0, #0x0
 428:	b.eq	498 <gomp_ialias_omp_get_partition_place_nums+0x8c>  // b.none
 42c:	bl	0 <gomp_thread>
 430:	str	x0, [sp, #32]
 434:	ldr	x0, [sp, #32]
 438:	ldr	w0, [x0, #92]
 43c:	cmp	w0, #0x0
 440:	b.ne	448 <gomp_ialias_omp_get_partition_place_nums+0x3c>  // b.any
 444:	bl	0 <gomp_init_affinity>
 448:	str	wzr, [sp, #44]
 44c:	b	480 <gomp_ialias_omp_get_partition_place_nums+0x74>
 450:	ldr	x0, [sp, #32]
 454:	ldr	w1, [x0, #52]
 458:	ldr	w0, [sp, #44]
 45c:	add	w2, w1, w0
 460:	ldr	x0, [sp, #24]
 464:	add	x1, x0, #0x4
 468:	str	x1, [sp, #24]
 46c:	mov	w1, w2
 470:	str	w1, [x0]
 474:	ldr	w0, [sp, #44]
 478:	add	w0, w0, #0x1
 47c:	str	w0, [sp, #44]
 480:	ldr	x0, [sp, #32]
 484:	ldr	w0, [x0, #56]
 488:	ldr	w1, [sp, #44]
 48c:	cmp	w1, w0
 490:	b.cc	450 <gomp_ialias_omp_get_partition_place_nums+0x44>  // b.lo, b.ul, b.last
 494:	b	49c <gomp_ialias_omp_get_partition_place_nums+0x90>
 498:	nop
 49c:	ldp	x29, x30, [sp], #48
 4a0:	ret

icv-device.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_thread>:
   0:	mrs	x1, tpidr_el0
   4:	adrp	x0, 0 <gomp_tls_data>
   8:	ldr	x0, [x0]
   c:	add	x0, x1, x0
  10:	ret

0000000000000014 <gomp_icv>:
  14:	stp	x29, x30, [sp, #-48]!
  18:	mov	x29, sp
  1c:	strb	w0, [sp, #31]
  20:	bl	0 <gomp_thread>
  24:	ldr	x0, [x0, #80]
  28:	str	x0, [sp, #40]
  2c:	ldr	x0, [sp, #40]
  30:	cmp	x0, #0x0
  34:	b.eq	44 <gomp_icv+0x30>  // b.none
  38:	ldr	x0, [sp, #40]
  3c:	add	x0, x0, #0x90
  40:	b	60 <gomp_icv+0x4c>
  44:	ldrb	w0, [sp, #31]
  48:	cmp	w0, #0x0
  4c:	b.eq	58 <gomp_icv+0x44>  // b.none
  50:	bl	0 <gomp_new_icv>
  54:	b	60 <gomp_icv+0x4c>
  58:	adrp	x0, 0 <gomp_global_icv>
  5c:	add	x0, x0, #0x0
  60:	ldp	x29, x30, [sp], #48
  64:	ret

0000000000000068 <gomp_ialias_omp_set_default_device>:
  68:	stp	x29, x30, [sp, #-48]!
  6c:	mov	x29, sp
  70:	str	w0, [sp, #28]
  74:	mov	w0, #0x1                   	// #1
  78:	bl	14 <gomp_icv>
  7c:	str	x0, [sp, #40]
  80:	ldr	w1, [sp, #28]
  84:	ldr	w0, [sp, #28]
  88:	mov	w2, #0x0                   	// #0
  8c:	cmp	w1, #0x0
  90:	csel	w1, w0, w2, ge  // ge = tcont
  94:	ldr	x0, [sp, #40]
  98:	str	w1, [x0, #16]
  9c:	nop
  a0:	ldp	x29, x30, [sp], #48
  a4:	ret

00000000000000a8 <gomp_ialias_omp_get_default_device>:
  a8:	stp	x29, x30, [sp, #-32]!
  ac:	mov	x29, sp
  b0:	mov	w0, #0x0                   	// #0
  b4:	bl	14 <gomp_icv>
  b8:	str	x0, [sp, #24]
  bc:	ldr	x0, [sp, #24]
  c0:	ldr	w0, [x0, #16]
  c4:	ldp	x29, x30, [sp], #32
  c8:	ret

00000000000000cc <gomp_ialias_omp_get_num_devices>:
  cc:	stp	x29, x30, [sp, #-16]!
  d0:	mov	x29, sp
  d4:	bl	0 <gomp_get_num_devices>
  d8:	ldp	x29, x30, [sp], #16
  dc:	ret

00000000000000e0 <gomp_ialias_omp_is_initial_device>:
  e0:	mov	w0, #0x1                   	// #1
  e4:	ret

iter.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_thread>:
   0:	mrs	x1, tpidr_el0
   4:	adrp	x0, 0 <gomp_tls_data>
   8:	ldr	x0, [x0]
   c:	add	x0, x1, x0
  10:	ret

0000000000000014 <gomp_iter_static_next>:
  14:	stp	x29, x30, [sp, #-192]!
  18:	mov	x29, sp
  1c:	str	x0, [sp, #24]
  20:	str	x1, [sp, #16]
  24:	bl	0 <gomp_thread>
  28:	str	x0, [sp, #160]
  2c:	ldr	x0, [sp, #160]
  30:	ldr	x0, [x0, #16]
  34:	str	x0, [sp, #152]
  38:	ldr	x0, [sp, #160]
  3c:	ldr	x0, [x0, #24]
  40:	str	x0, [sp, #144]
  44:	ldr	x0, [sp, #152]
  48:	cmp	x0, #0x0
  4c:	b.eq	60 <gomp_iter_static_next+0x4c>  // b.none
  50:	ldr	x0, [sp, #152]
  54:	ldr	w0, [x0]
  58:	mov	w0, w0
  5c:	b	64 <gomp_iter_static_next+0x50>
  60:	mov	x0, #0x1                   	// #1
  64:	str	x0, [sp, #136]
  68:	ldr	x0, [sp, #160]
  6c:	ldr	x0, [x0, #72]
  70:	cmn	x0, #0x1
  74:	b.ne	80 <gomp_iter_static_next+0x6c>  // b.any
  78:	mov	w0, #0xffffffff            	// #-1
  7c:	b	3ec <gomp_iter_static_next+0x3d8>
  80:	ldr	x0, [sp, #136]
  84:	cmp	x0, #0x1
  88:	b.ne	d8 <gomp_iter_static_next+0xc4>  // b.any
  8c:	ldr	x0, [sp, #144]
  90:	ldr	x1, [x0, #72]
  94:	ldr	x0, [sp, #24]
  98:	str	x1, [x0]
  9c:	ldr	x0, [sp, #144]
  a0:	ldr	x1, [x0, #16]
  a4:	ldr	x0, [sp, #16]
  a8:	str	x1, [x0]
  ac:	ldr	x0, [sp, #160]
  b0:	mov	x1, #0xffffffffffffffff    	// #-1
  b4:	str	x1, [x0, #72]
  b8:	ldr	x0, [sp, #144]
  bc:	ldr	x1, [x0, #72]
  c0:	ldr	x0, [sp, #144]
  c4:	ldr	x0, [x0, #16]
  c8:	cmp	x1, x0
  cc:	cset	w0, eq  // eq = none
  d0:	and	w0, w0, #0xff
  d4:	b	3ec <gomp_iter_static_next+0x3d8>
  d8:	ldr	x0, [sp, #144]
  dc:	ldr	x0, [x0, #8]
  e0:	cmp	x0, #0x0
  e4:	b.ne	284 <gomp_iter_static_next+0x270>  // b.any
  e8:	ldr	x0, [sp, #160]
  ec:	ldr	x0, [x0, #72]
  f0:	cmp	x0, #0x0
  f4:	b.eq	100 <gomp_iter_static_next+0xec>  // b.none
  f8:	mov	w0, #0x1                   	// #1
  fc:	b	3ec <gomp_iter_static_next+0x3d8>
 100:	ldr	x0, [sp, #144]
 104:	ldr	x1, [x0, #24]
 108:	ldr	x0, [sp, #144]
 10c:	ldr	x0, [x0, #24]
 110:	cmp	x0, #0x0
 114:	b.le	120 <gomp_iter_static_next+0x10c>
 118:	mov	x0, #0xffffffffffffffff    	// #-1
 11c:	b	124 <gomp_iter_static_next+0x110>
 120:	mov	x0, #0x1                   	// #1
 124:	add	x0, x0, x1
 128:	str	x0, [sp, #80]
 12c:	ldr	x0, [sp, #144]
 130:	ldr	x1, [x0, #16]
 134:	ldr	x0, [sp, #144]
 138:	ldr	x0, [x0, #72]
 13c:	sub	x1, x1, x0
 140:	ldr	x0, [sp, #80]
 144:	add	x1, x1, x0
 148:	ldr	x0, [sp, #144]
 14c:	ldr	x0, [x0, #24]
 150:	sdiv	x0, x1, x0
 154:	str	x0, [sp, #72]
 158:	ldr	x0, [sp, #160]
 15c:	ldr	w0, [x0, #40]
 160:	mov	w0, w0
 164:	str	x0, [sp, #64]
 168:	ldr	x1, [sp, #72]
 16c:	ldr	x0, [sp, #136]
 170:	udiv	x0, x1, x0
 174:	str	x0, [sp, #184]
 178:	ldr	x0, [sp, #72]
 17c:	ldr	x1, [sp, #136]
 180:	udiv	x2, x0, x1
 184:	ldr	x1, [sp, #136]
 188:	mul	x1, x2, x1
 18c:	sub	x0, x0, x1
 190:	str	x0, [sp, #176]
 194:	ldr	x1, [sp, #64]
 198:	ldr	x0, [sp, #176]
 19c:	cmp	x1, x0
 1a0:	b.cs	1b4 <gomp_iter_static_next+0x1a0>  // b.hs, b.nlast
 1a4:	str	xzr, [sp, #176]
 1a8:	ldr	x0, [sp, #184]
 1ac:	add	x0, x0, #0x1
 1b0:	str	x0, [sp, #184]
 1b4:	ldr	x1, [sp, #184]
 1b8:	ldr	x0, [sp, #64]
 1bc:	mul	x0, x1, x0
 1c0:	ldr	x1, [sp, #176]
 1c4:	add	x0, x1, x0
 1c8:	str	x0, [sp, #56]
 1cc:	ldr	x1, [sp, #56]
 1d0:	ldr	x0, [sp, #184]
 1d4:	add	x0, x1, x0
 1d8:	str	x0, [sp, #48]
 1dc:	ldr	x1, [sp, #56]
 1e0:	ldr	x0, [sp, #48]
 1e4:	cmp	x1, x0
 1e8:	b.cc	200 <gomp_iter_static_next+0x1ec>  // b.lo, b.ul, b.last
 1ec:	ldr	x0, [sp, #160]
 1f0:	mov	x1, #0x1                   	// #1
 1f4:	str	x1, [x0, #72]
 1f8:	mov	w0, #0x1                   	// #1
 1fc:	b	3ec <gomp_iter_static_next+0x3d8>
 200:	ldr	x0, [sp, #144]
 204:	ldr	x1, [x0, #24]
 208:	ldr	x0, [sp, #56]
 20c:	mul	x1, x1, x0
 210:	ldr	x0, [sp, #144]
 214:	ldr	x0, [x0, #72]
 218:	add	x0, x1, x0
 21c:	str	x0, [sp, #80]
 220:	ldr	x0, [sp, #144]
 224:	ldr	x1, [x0, #24]
 228:	ldr	x0, [sp, #48]
 22c:	mul	x1, x1, x0
 230:	ldr	x0, [sp, #144]
 234:	ldr	x0, [x0, #72]
 238:	add	x0, x1, x0
 23c:	str	x0, [sp, #40]
 240:	ldr	x0, [sp, #24]
 244:	ldr	x1, [sp, #80]
 248:	str	x1, [x0]
 24c:	ldr	x0, [sp, #16]
 250:	ldr	x1, [sp, #40]
 254:	str	x1, [x0]
 258:	ldr	x1, [sp, #48]
 25c:	ldr	x0, [sp, #72]
 260:	cmp	x1, x0
 264:	b.ne	270 <gomp_iter_static_next+0x25c>  // b.any
 268:	mov	x0, #0xffffffffffffffff    	// #-1
 26c:	b	274 <gomp_iter_static_next+0x260>
 270:	mov	x0, #0x1                   	// #1
 274:	ldr	x1, [sp, #160]
 278:	str	x0, [x1, #72]
 27c:	mov	w0, #0x0                   	// #0
 280:	b	3ec <gomp_iter_static_next+0x3d8>
 284:	ldr	x0, [sp, #144]
 288:	ldr	x1, [x0, #24]
 28c:	ldr	x0, [sp, #144]
 290:	ldr	x0, [x0, #24]
 294:	cmp	x0, #0x0
 298:	b.le	2a4 <gomp_iter_static_next+0x290>
 29c:	mov	x0, #0xffffffffffffffff    	// #-1
 2a0:	b	2a8 <gomp_iter_static_next+0x294>
 2a4:	mov	x0, #0x1                   	// #1
 2a8:	add	x0, x0, x1
 2ac:	str	x0, [sp, #128]
 2b0:	ldr	x0, [sp, #144]
 2b4:	ldr	x1, [x0, #16]
 2b8:	ldr	x0, [sp, #144]
 2bc:	ldr	x0, [x0, #72]
 2c0:	sub	x1, x1, x0
 2c4:	ldr	x0, [sp, #128]
 2c8:	add	x1, x1, x0
 2cc:	ldr	x0, [sp, #144]
 2d0:	ldr	x0, [x0, #24]
 2d4:	sdiv	x0, x1, x0
 2d8:	str	x0, [sp, #120]
 2dc:	ldr	x0, [sp, #160]
 2e0:	ldr	w0, [x0, #40]
 2e4:	mov	w0, w0
 2e8:	str	x0, [sp, #112]
 2ec:	ldr	x0, [sp, #144]
 2f0:	ldr	x0, [x0, #8]
 2f4:	str	x0, [sp, #104]
 2f8:	ldr	x0, [sp, #160]
 2fc:	ldr	x1, [x0, #72]
 300:	ldr	x0, [sp, #136]
 304:	mul	x1, x1, x0
 308:	ldr	x0, [sp, #112]
 30c:	add	x0, x1, x0
 310:	ldr	x1, [sp, #104]
 314:	mul	x0, x1, x0
 318:	str	x0, [sp, #96]
 31c:	ldr	x1, [sp, #96]
 320:	ldr	x0, [sp, #104]
 324:	add	x0, x1, x0
 328:	str	x0, [sp, #168]
 32c:	ldr	x1, [sp, #96]
 330:	ldr	x0, [sp, #120]
 334:	cmp	x1, x0
 338:	b.cc	344 <gomp_iter_static_next+0x330>  // b.lo, b.ul, b.last
 33c:	mov	w0, #0x1                   	// #1
 340:	b	3ec <gomp_iter_static_next+0x3d8>
 344:	ldr	x1, [sp, #168]
 348:	ldr	x0, [sp, #120]
 34c:	cmp	x1, x0
 350:	b.ls	35c <gomp_iter_static_next+0x348>  // b.plast
 354:	ldr	x0, [sp, #120]
 358:	str	x0, [sp, #168]
 35c:	ldr	x0, [sp, #144]
 360:	ldr	x1, [x0, #24]
 364:	ldr	x0, [sp, #96]
 368:	mul	x1, x1, x0
 36c:	ldr	x0, [sp, #144]
 370:	ldr	x0, [x0, #72]
 374:	add	x0, x1, x0
 378:	str	x0, [sp, #128]
 37c:	ldr	x0, [sp, #144]
 380:	ldr	x1, [x0, #24]
 384:	ldr	x0, [sp, #168]
 388:	mul	x1, x1, x0
 38c:	ldr	x0, [sp, #144]
 390:	ldr	x0, [x0, #72]
 394:	add	x0, x1, x0
 398:	str	x0, [sp, #88]
 39c:	ldr	x0, [sp, #24]
 3a0:	ldr	x1, [sp, #128]
 3a4:	str	x1, [x0]
 3a8:	ldr	x0, [sp, #16]
 3ac:	ldr	x1, [sp, #88]
 3b0:	str	x1, [x0]
 3b4:	ldr	x1, [sp, #168]
 3b8:	ldr	x0, [sp, #120]
 3bc:	cmp	x1, x0
 3c0:	b.ne	3d4 <gomp_iter_static_next+0x3c0>  // b.any
 3c4:	ldr	x0, [sp, #160]
 3c8:	mov	x1, #0xffffffffffffffff    	// #-1
 3cc:	str	x1, [x0, #72]
 3d0:	b	3e8 <gomp_iter_static_next+0x3d4>
 3d4:	ldr	x0, [sp, #160]
 3d8:	ldr	x0, [x0, #72]
 3dc:	add	x1, x0, #0x1
 3e0:	ldr	x0, [sp, #160]
 3e4:	str	x1, [x0, #72]
 3e8:	mov	w0, #0x0                   	// #0
 3ec:	ldp	x29, x30, [sp], #192
 3f0:	ret

00000000000003f4 <gomp_iter_dynamic_next_locked>:
 3f4:	stp	x29, x30, [sp, #-80]!
 3f8:	mov	x29, sp
 3fc:	str	x0, [sp, #24]
 400:	str	x1, [sp, #16]
 404:	bl	0 <gomp_thread>
 408:	str	x0, [sp, #64]
 40c:	ldr	x0, [sp, #64]
 410:	ldr	x0, [x0, #24]
 414:	str	x0, [sp, #56]
 418:	ldr	x0, [sp, #56]
 41c:	ldr	x0, [x0, #72]
 420:	str	x0, [sp, #48]
 424:	ldr	x0, [sp, #56]
 428:	ldr	x0, [x0, #16]
 42c:	ldr	x1, [sp, #48]
 430:	cmp	x1, x0
 434:	b.ne	440 <gomp_iter_dynamic_next_locked+0x4c>  // b.any
 438:	mov	w0, #0x0                   	// #0
 43c:	b	4dc <gomp_iter_dynamic_next_locked+0xe8>
 440:	ldr	x0, [sp, #56]
 444:	ldr	x0, [x0, #8]
 448:	str	x0, [sp, #72]
 44c:	ldr	x0, [sp, #56]
 450:	ldr	x1, [x0, #16]
 454:	ldr	x0, [sp, #48]
 458:	sub	x0, x1, x0
 45c:	str	x0, [sp, #40]
 460:	ldr	x0, [sp, #56]
 464:	ldr	x0, [x0, #24]
 468:	cmp	x0, #0x0
 46c:	b.ge	48c <gomp_iter_dynamic_next_locked+0x98>  // b.tcont
 470:	ldr	x1, [sp, #72]
 474:	ldr	x0, [sp, #40]
 478:	cmp	x1, x0
 47c:	b.ge	4a4 <gomp_iter_dynamic_next_locked+0xb0>  // b.tcont
 480:	ldr	x0, [sp, #40]
 484:	str	x0, [sp, #72]
 488:	b	4a4 <gomp_iter_dynamic_next_locked+0xb0>
 48c:	ldr	x1, [sp, #72]
 490:	ldr	x0, [sp, #40]
 494:	cmp	x1, x0
 498:	b.le	4a4 <gomp_iter_dynamic_next_locked+0xb0>
 49c:	ldr	x0, [sp, #40]
 4a0:	str	x0, [sp, #72]
 4a4:	ldr	x1, [sp, #48]
 4a8:	ldr	x0, [sp, #72]
 4ac:	add	x0, x1, x0
 4b0:	str	x0, [sp, #32]
 4b4:	ldr	x0, [sp, #56]
 4b8:	ldr	x1, [sp, #32]
 4bc:	str	x1, [x0, #72]
 4c0:	ldr	x0, [sp, #24]
 4c4:	ldr	x1, [sp, #48]
 4c8:	str	x1, [x0]
 4cc:	ldr	x0, [sp, #16]
 4d0:	ldr	x1, [sp, #32]
 4d4:	str	x1, [x0]
 4d8:	mov	w0, #0x1                   	// #1
 4dc:	ldp	x29, x30, [sp], #80
 4e0:	ret

00000000000004e4 <gomp_iter_dynamic_next>:
 4e4:	stp	x29, x30, [sp, #-112]!
 4e8:	mov	x29, sp
 4ec:	str	x0, [sp, #24]
 4f0:	str	x1, [sp, #16]
 4f4:	bl	0 <gomp_thread>
 4f8:	str	x0, [sp, #80]
 4fc:	ldr	x0, [sp, #80]
 500:	ldr	x0, [x0, #24]
 504:	str	x0, [sp, #72]
 508:	ldr	x0, [sp, #72]
 50c:	ldr	x0, [x0, #16]
 510:	str	x0, [sp, #64]
 514:	ldr	x0, [sp, #72]
 518:	ldr	x0, [x0, #24]
 51c:	str	x0, [sp, #56]
 520:	ldr	x0, [sp, #72]
 524:	ldr	x0, [x0, #8]
 528:	str	x0, [sp, #88]
 52c:	ldr	x0, [sp, #72]
 530:	ldr	w0, [x0, #4]
 534:	sxtw	x0, w0
 538:	cmp	x0, #0x0
 53c:	b.eq	630 <gomp_iter_dynamic_next+0x14c>  // b.none
 540:	ldr	x0, [sp, #72]
 544:	add	x0, x0, #0x48
 548:	ldr	x2, [sp, #88]
 54c:	ldxr	x1, [x0]
 550:	add	x3, x1, x2
 554:	stlxr	w4, x3, [x0]
 558:	cbnz	w4, 54c <gomp_iter_dynamic_next+0x68>
 55c:	dmb	ish
 560:	str	x1, [sp, #32]
 564:	ldr	x0, [sp, #56]
 568:	cmp	x0, #0x0
 56c:	b.le	5d0 <gomp_iter_dynamic_next+0xec>
 570:	ldr	x1, [sp, #32]
 574:	ldr	x0, [sp, #64]
 578:	cmp	x1, x0
 57c:	b.lt	588 <gomp_iter_dynamic_next+0xa4>  // b.tstop
 580:	mov	w0, #0x0                   	// #0
 584:	b	730 <gomp_iter_dynamic_next+0x24c>
 588:	ldr	x1, [sp, #32]
 58c:	ldr	x0, [sp, #88]
 590:	add	x0, x1, x0
 594:	str	x0, [sp, #96]
 598:	ldr	x1, [sp, #96]
 59c:	ldr	x0, [sp, #64]
 5a0:	cmp	x1, x0
 5a4:	b.le	5b0 <gomp_iter_dynamic_next+0xcc>
 5a8:	ldr	x0, [sp, #64]
 5ac:	str	x0, [sp, #96]
 5b0:	ldr	x0, [sp, #24]
 5b4:	ldr	x1, [sp, #32]
 5b8:	str	x1, [x0]
 5bc:	ldr	x0, [sp, #16]
 5c0:	ldr	x1, [sp, #96]
 5c4:	str	x1, [x0]
 5c8:	mov	w0, #0x1                   	// #1
 5cc:	b	730 <gomp_iter_dynamic_next+0x24c>
 5d0:	ldr	x1, [sp, #32]
 5d4:	ldr	x0, [sp, #64]
 5d8:	cmp	x1, x0
 5dc:	b.gt	5e8 <gomp_iter_dynamic_next+0x104>
 5e0:	mov	w0, #0x0                   	// #0
 5e4:	b	730 <gomp_iter_dynamic_next+0x24c>
 5e8:	ldr	x1, [sp, #32]
 5ec:	ldr	x0, [sp, #88]
 5f0:	add	x0, x1, x0
 5f4:	str	x0, [sp, #96]
 5f8:	ldr	x1, [sp, #96]
 5fc:	ldr	x0, [sp, #64]
 600:	cmp	x1, x0
 604:	b.ge	610 <gomp_iter_dynamic_next+0x12c>  // b.tcont
 608:	ldr	x0, [sp, #64]
 60c:	str	x0, [sp, #96]
 610:	ldr	x0, [sp, #24]
 614:	ldr	x1, [sp, #32]
 618:	str	x1, [x0]
 61c:	ldr	x0, [sp, #16]
 620:	ldr	x1, [sp, #96]
 624:	str	x1, [x0]
 628:	mov	w0, #0x1                   	// #1
 62c:	b	730 <gomp_iter_dynamic_next+0x24c>
 630:	ldr	x0, [sp, #72]
 634:	add	x0, x0, #0x48
 638:	ldr	x0, [x0]
 63c:	str	x0, [sp, #104]
 640:	ldr	x1, [sp, #64]
 644:	ldr	x0, [sp, #104]
 648:	sub	x0, x1, x0
 64c:	str	x0, [sp, #48]
 650:	ldr	x1, [sp, #104]
 654:	ldr	x0, [sp, #64]
 658:	cmp	x1, x0
 65c:	b.ne	668 <gomp_iter_dynamic_next+0x184>  // b.any
 660:	mov	w0, #0x0                   	// #0
 664:	b	730 <gomp_iter_dynamic_next+0x24c>
 668:	ldr	x0, [sp, #56]
 66c:	cmp	x0, #0x0
 670:	b.ge	690 <gomp_iter_dynamic_next+0x1ac>  // b.tcont
 674:	ldr	x1, [sp, #88]
 678:	ldr	x0, [sp, #48]
 67c:	cmp	x1, x0
 680:	b.ge	6a8 <gomp_iter_dynamic_next+0x1c4>  // b.tcont
 684:	ldr	x0, [sp, #48]
 688:	str	x0, [sp, #88]
 68c:	b	6a8 <gomp_iter_dynamic_next+0x1c4>
 690:	ldr	x1, [sp, #88]
 694:	ldr	x0, [sp, #48]
 698:	cmp	x1, x0
 69c:	b.le	6a8 <gomp_iter_dynamic_next+0x1c4>
 6a0:	ldr	x0, [sp, #48]
 6a4:	str	x0, [sp, #88]
 6a8:	ldr	x1, [sp, #104]
 6ac:	ldr	x0, [sp, #88]
 6b0:	add	x0, x1, x0
 6b4:	str	x0, [sp, #96]
 6b8:	ldr	x0, [sp, #72]
 6bc:	add	x1, x0, #0x48
 6c0:	ldr	x2, [sp, #104]
 6c4:	ldr	x3, [sp, #96]
 6c8:	ldxr	x0, [x1]
 6cc:	cmp	x0, x2
 6d0:	b.ne	6dc <gomp_iter_dynamic_next+0x1f8>  // b.any
 6d4:	stlxr	w4, x3, [x1]
 6d8:	cbnz	w4, 6c8 <gomp_iter_dynamic_next+0x1e4>
 6dc:	dmb	ish
 6e0:	str	x0, [sp, #40]
 6e4:	ldr	x1, [sp, #40]
 6e8:	ldr	x0, [sp, #104]
 6ec:	cmp	x1, x0
 6f0:	cset	w0, eq  // eq = none
 6f4:	and	w0, w0, #0xff
 6f8:	and	x0, x0, #0xff
 6fc:	cmp	x0, #0x0
 700:	b.ne	710 <gomp_iter_dynamic_next+0x22c>  // b.any
 704:	ldr	x0, [sp, #40]
 708:	str	x0, [sp, #104]
 70c:	b	640 <gomp_iter_dynamic_next+0x15c>
 710:	nop
 714:	ldr	x0, [sp, #24]
 718:	ldr	x1, [sp, #104]
 71c:	str	x1, [x0]
 720:	ldr	x0, [sp, #16]
 724:	ldr	x1, [sp, #96]
 728:	str	x1, [x0]
 72c:	mov	w0, #0x1                   	// #1
 730:	ldp	x29, x30, [sp], #112
 734:	ret

0000000000000738 <gomp_iter_guided_next_locked>:
 738:	stp	x29, x30, [sp, #-96]!
 73c:	mov	x29, sp
 740:	str	x0, [sp, #24]
 744:	str	x1, [sp, #16]
 748:	bl	0 <gomp_thread>
 74c:	str	x0, [sp, #72]
 750:	ldr	x0, [sp, #72]
 754:	ldr	x0, [x0, #24]
 758:	str	x0, [sp, #64]
 75c:	ldr	x0, [sp, #72]
 760:	ldr	x0, [x0, #16]
 764:	str	x0, [sp, #56]
 768:	ldr	x0, [sp, #56]
 76c:	cmp	x0, #0x0
 770:	b.eq	784 <gomp_iter_guided_next_locked+0x4c>  // b.none
 774:	ldr	x0, [sp, #56]
 778:	ldr	w0, [x0]
 77c:	mov	w0, w0
 780:	b	788 <gomp_iter_guided_next_locked+0x50>
 784:	mov	x0, #0x1                   	// #1
 788:	str	x0, [sp, #48]
 78c:	ldr	x0, [sp, #64]
 790:	ldr	x1, [x0, #72]
 794:	ldr	x0, [sp, #64]
 798:	ldr	x0, [x0, #16]
 79c:	cmp	x1, x0
 7a0:	b.ne	7ac <gomp_iter_guided_next_locked+0x74>  // b.any
 7a4:	mov	w0, #0x0                   	// #0
 7a8:	b	880 <gomp_iter_guided_next_locked+0x148>
 7ac:	ldr	x0, [sp, #64]
 7b0:	ldr	x0, [x0, #72]
 7b4:	str	x0, [sp, #40]
 7b8:	ldr	x0, [sp, #64]
 7bc:	ldr	x1, [x0, #16]
 7c0:	ldr	x0, [sp, #40]
 7c4:	sub	x1, x1, x0
 7c8:	ldr	x0, [sp, #64]
 7cc:	ldr	x0, [x0, #24]
 7d0:	sdiv	x0, x1, x0
 7d4:	str	x0, [sp, #32]
 7d8:	ldr	x1, [sp, #32]
 7dc:	ldr	x0, [sp, #48]
 7e0:	add	x0, x1, x0
 7e4:	sub	x1, x0, #0x1
 7e8:	ldr	x0, [sp, #48]
 7ec:	udiv	x0, x1, x0
 7f0:	str	x0, [sp, #88]
 7f4:	ldr	x0, [sp, #64]
 7f8:	ldr	x0, [x0, #8]
 7fc:	mov	x1, x0
 800:	ldr	x0, [sp, #88]
 804:	cmp	x0, x1
 808:	b.cs	818 <gomp_iter_guided_next_locked+0xe0>  // b.hs, b.nlast
 80c:	ldr	x0, [sp, #64]
 810:	ldr	x0, [x0, #8]
 814:	str	x0, [sp, #88]
 818:	ldr	x1, [sp, #88]
 81c:	ldr	x0, [sp, #32]
 820:	cmp	x1, x0
 824:	b.hi	84c <gomp_iter_guided_next_locked+0x114>  // b.pmore
 828:	ldr	x0, [sp, #64]
 82c:	ldr	x0, [x0, #24]
 830:	mov	x1, x0
 834:	ldr	x0, [sp, #88]
 838:	mul	x1, x1, x0
 83c:	ldr	x0, [sp, #40]
 840:	add	x0, x1, x0
 844:	str	x0, [sp, #80]
 848:	b	858 <gomp_iter_guided_next_locked+0x120>
 84c:	ldr	x0, [sp, #64]
 850:	ldr	x0, [x0, #16]
 854:	str	x0, [sp, #80]
 858:	ldr	x0, [sp, #64]
 85c:	ldr	x1, [sp, #80]
 860:	str	x1, [x0, #72]
 864:	ldr	x0, [sp, #24]
 868:	ldr	x1, [sp, #40]
 86c:	str	x1, [x0]
 870:	ldr	x0, [sp, #16]
 874:	ldr	x1, [sp, #80]
 878:	str	x1, [x0]
 87c:	mov	w0, #0x1                   	// #1
 880:	ldp	x29, x30, [sp], #96
 884:	ret

0000000000000888 <gomp_iter_guided_next>:
 888:	stp	x29, x30, [sp, #-128]!
 88c:	mov	x29, sp
 890:	str	x0, [sp, #24]
 894:	str	x1, [sp, #16]
 898:	bl	0 <gomp_thread>
 89c:	str	x0, [sp, #96]
 8a0:	ldr	x0, [sp, #96]
 8a4:	ldr	x0, [x0, #24]
 8a8:	str	x0, [sp, #88]
 8ac:	ldr	x0, [sp, #96]
 8b0:	ldr	x0, [x0, #16]
 8b4:	str	x0, [sp, #80]
 8b8:	ldr	x0, [sp, #80]
 8bc:	cmp	x0, #0x0
 8c0:	b.eq	8d4 <gomp_iter_guided_next+0x4c>  // b.none
 8c4:	ldr	x0, [sp, #80]
 8c8:	ldr	w0, [x0]
 8cc:	mov	w0, w0
 8d0:	b	8d8 <gomp_iter_guided_next+0x50>
 8d4:	mov	x0, #0x1                   	// #1
 8d8:	str	x0, [sp, #72]
 8dc:	ldr	x0, [sp, #88]
 8e0:	add	x0, x0, #0x48
 8e4:	ldr	x0, [x0]
 8e8:	str	x0, [sp, #120]
 8ec:	ldr	x0, [sp, #88]
 8f0:	ldr	x0, [x0, #16]
 8f4:	str	x0, [sp, #64]
 8f8:	ldr	x0, [sp, #88]
 8fc:	ldr	x0, [x0, #24]
 900:	str	x0, [sp, #56]
 904:	ldr	x0, [sp, #88]
 908:	ldr	x0, [x0, #8]
 90c:	str	x0, [sp, #48]
 910:	ldr	x1, [sp, #120]
 914:	ldr	x0, [sp, #64]
 918:	cmp	x1, x0
 91c:	b.ne	928 <gomp_iter_guided_next+0xa0>  // b.any
 920:	mov	w0, #0x0                   	// #0
 924:	b	a30 <gomp_iter_guided_next+0x1a8>
 928:	ldr	x1, [sp, #64]
 92c:	ldr	x0, [sp, #120]
 930:	sub	x1, x1, x0
 934:	ldr	x0, [sp, #56]
 938:	sdiv	x0, x1, x0
 93c:	str	x0, [sp, #40]
 940:	ldr	x1, [sp, #40]
 944:	ldr	x0, [sp, #72]
 948:	add	x0, x1, x0
 94c:	sub	x1, x0, #0x1
 950:	ldr	x0, [sp, #72]
 954:	udiv	x0, x1, x0
 958:	str	x0, [sp, #104]
 95c:	ldr	x1, [sp, #104]
 960:	ldr	x0, [sp, #48]
 964:	cmp	x1, x0
 968:	b.cs	974 <gomp_iter_guided_next+0xec>  // b.hs, b.nlast
 96c:	ldr	x0, [sp, #48]
 970:	str	x0, [sp, #104]
 974:	ldr	x1, [sp, #104]
 978:	ldr	x0, [sp, #40]
 97c:	cmp	x1, x0
 980:	cset	w0, ls  // ls = plast
 984:	and	w0, w0, #0xff
 988:	and	x0, x0, #0xff
 98c:	cmp	x0, #0x0
 990:	b.eq	9b0 <gomp_iter_guided_next+0x128>  // b.none
 994:	ldr	x1, [sp, #56]
 998:	ldr	x0, [sp, #104]
 99c:	mul	x1, x1, x0
 9a0:	ldr	x0, [sp, #120]
 9a4:	add	x0, x1, x0
 9a8:	str	x0, [sp, #112]
 9ac:	b	9b8 <gomp_iter_guided_next+0x130>
 9b0:	ldr	x0, [sp, #64]
 9b4:	str	x0, [sp, #112]
 9b8:	ldr	x0, [sp, #88]
 9bc:	add	x1, x0, #0x48
 9c0:	ldr	x2, [sp, #120]
 9c4:	ldr	x3, [sp, #112]
 9c8:	ldxr	x0, [x1]
 9cc:	cmp	x0, x2
 9d0:	b.ne	9dc <gomp_iter_guided_next+0x154>  // b.any
 9d4:	stlxr	w4, x3, [x1]
 9d8:	cbnz	w4, 9c8 <gomp_iter_guided_next+0x140>
 9dc:	dmb	ish
 9e0:	str	x0, [sp, #32]
 9e4:	ldr	x1, [sp, #32]
 9e8:	ldr	x0, [sp, #120]
 9ec:	cmp	x1, x0
 9f0:	cset	w0, eq  // eq = none
 9f4:	and	w0, w0, #0xff
 9f8:	and	x0, x0, #0xff
 9fc:	cmp	x0, #0x0
 a00:	b.ne	a10 <gomp_iter_guided_next+0x188>  // b.any
 a04:	ldr	x0, [sp, #32]
 a08:	str	x0, [sp, #120]
 a0c:	b	910 <gomp_iter_guided_next+0x88>
 a10:	nop
 a14:	ldr	x0, [sp, #24]
 a18:	ldr	x1, [sp, #120]
 a1c:	str	x1, [x0]
 a20:	ldr	x0, [sp, #16]
 a24:	ldr	x1, [sp, #112]
 a28:	str	x1, [x0]
 a2c:	mov	w0, #0x1                   	// #1
 a30:	ldp	x29, x30, [sp], #128
 a34:	ret

iter_ull.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_thread>:
   0:	mrs	x1, tpidr_el0
   4:	adrp	x0, 0 <gomp_tls_data>
   8:	ldr	x0, [x0]
   c:	add	x0, x1, x0
  10:	ret

0000000000000014 <gomp_iter_ull_static_next>:
  14:	stp	x29, x30, [sp, #-192]!
  18:	mov	x29, sp
  1c:	str	x0, [sp, #24]
  20:	str	x1, [sp, #16]
  24:	bl	0 <gomp_thread>
  28:	str	x0, [sp, #144]
  2c:	ldr	x0, [sp, #144]
  30:	ldr	x0, [x0, #16]
  34:	str	x0, [sp, #136]
  38:	ldr	x0, [sp, #144]
  3c:	ldr	x0, [x0, #24]
  40:	str	x0, [sp, #128]
  44:	ldr	x0, [sp, #136]
  48:	cmp	x0, #0x0
  4c:	b.eq	60 <gomp_iter_ull_static_next+0x4c>  // b.none
  50:	ldr	x0, [sp, #136]
  54:	ldr	w0, [x0]
  58:	mov	w0, w0
  5c:	b	64 <gomp_iter_ull_static_next+0x50>
  60:	mov	x0, #0x1                   	// #1
  64:	str	x0, [sp, #120]
  68:	ldr	x0, [sp, #144]
  6c:	ldr	x0, [x0, #72]
  70:	cmn	x0, #0x1
  74:	b.ne	80 <gomp_iter_ull_static_next+0x6c>  // b.any
  78:	mov	w0, #0xffffffff            	// #-1
  7c:	b	444 <gomp_iter_ull_static_next+0x430>
  80:	ldr	x0, [sp, #120]
  84:	cmp	x0, #0x1
  88:	b.ne	d8 <gomp_iter_ull_static_next+0xc4>  // b.any
  8c:	ldr	x0, [sp, #128]
  90:	ldr	x1, [x0, #72]
  94:	ldr	x0, [sp, #24]
  98:	str	x1, [x0]
  9c:	ldr	x0, [sp, #128]
  a0:	ldr	x1, [x0, #16]
  a4:	ldr	x0, [sp, #16]
  a8:	str	x1, [x0]
  ac:	ldr	x0, [sp, #144]
  b0:	mov	x1, #0xffffffffffffffff    	// #-1
  b4:	str	x1, [x0, #72]
  b8:	ldr	x0, [sp, #128]
  bc:	ldr	x1, [x0, #72]
  c0:	ldr	x0, [sp, #128]
  c4:	ldr	x0, [x0, #16]
  c8:	cmp	x1, x0
  cc:	cset	w0, eq  // eq = none
  d0:	and	w0, w0, #0xff
  d4:	b	444 <gomp_iter_ull_static_next+0x430>
  d8:	ldr	x0, [sp, #128]
  dc:	ldr	x0, [x0, #8]
  e0:	cmp	x0, #0x0
  e4:	b.ne	2b0 <gomp_iter_ull_static_next+0x29c>  // b.any
  e8:	ldr	x0, [sp, #144]
  ec:	ldr	x0, [x0, #72]
  f0:	cmp	x0, #0x0
  f4:	b.eq	100 <gomp_iter_ull_static_next+0xec>  // b.none
  f8:	mov	w0, #0x1                   	// #1
  fc:	b	444 <gomp_iter_ull_static_next+0x430>
 100:	ldr	x0, [sp, #128]
 104:	ldr	w0, [x0, #4]
 108:	sxtw	x0, w0
 10c:	cmp	x0, #0x0
 110:	b.ne	14c <gomp_iter_ull_static_next+0x138>  // b.any
 114:	ldr	x0, [sp, #128]
 118:	ldr	x1, [x0, #16]
 11c:	ldr	x0, [sp, #128]
 120:	ldr	x0, [x0, #72]
 124:	sub	x1, x1, x0
 128:	ldr	x0, [sp, #128]
 12c:	ldr	x0, [x0, #24]
 130:	add	x0, x1, x0
 134:	sub	x1, x0, #0x1
 138:	ldr	x0, [sp, #128]
 13c:	ldr	x0, [x0, #24]
 140:	udiv	x0, x1, x0
 144:	str	x0, [sp, #184]
 148:	b	184 <gomp_iter_ull_static_next+0x170>
 14c:	ldr	x0, [sp, #128]
 150:	ldr	x1, [x0, #72]
 154:	ldr	x0, [sp, #128]
 158:	ldr	x0, [x0, #16]
 15c:	sub	x1, x1, x0
 160:	ldr	x0, [sp, #128]
 164:	ldr	x0, [x0, #24]
 168:	sub	x0, x1, x0
 16c:	sub	x1, x0, #0x1
 170:	ldr	x0, [sp, #128]
 174:	ldr	x0, [x0, #24]
 178:	neg	x0, x0
 17c:	udiv	x0, x1, x0
 180:	str	x0, [sp, #184]
 184:	ldr	x0, [sp, #144]
 188:	ldr	w0, [x0, #40]
 18c:	mov	w0, w0
 190:	str	x0, [sp, #72]
 194:	ldr	x1, [sp, #184]
 198:	ldr	x0, [sp, #120]
 19c:	udiv	x0, x1, x0
 1a0:	str	x0, [sp, #176]
 1a4:	ldr	x0, [sp, #184]
 1a8:	ldr	x1, [sp, #120]
 1ac:	udiv	x2, x0, x1
 1b0:	ldr	x1, [sp, #120]
 1b4:	mul	x1, x2, x1
 1b8:	sub	x0, x0, x1
 1bc:	str	x0, [sp, #168]
 1c0:	ldr	x1, [sp, #72]
 1c4:	ldr	x0, [sp, #168]
 1c8:	cmp	x1, x0
 1cc:	b.cs	1e0 <gomp_iter_ull_static_next+0x1cc>  // b.hs, b.nlast
 1d0:	str	xzr, [sp, #168]
 1d4:	ldr	x0, [sp, #176]
 1d8:	add	x0, x0, #0x1
 1dc:	str	x0, [sp, #176]
 1e0:	ldr	x1, [sp, #176]
 1e4:	ldr	x0, [sp, #72]
 1e8:	mul	x0, x1, x0
 1ec:	ldr	x1, [sp, #168]
 1f0:	add	x0, x1, x0
 1f4:	str	x0, [sp, #64]
 1f8:	ldr	x1, [sp, #64]
 1fc:	ldr	x0, [sp, #176]
 200:	add	x0, x1, x0
 204:	str	x0, [sp, #56]
 208:	ldr	x1, [sp, #64]
 20c:	ldr	x0, [sp, #56]
 210:	cmp	x1, x0
 214:	b.cc	22c <gomp_iter_ull_static_next+0x218>  // b.lo, b.ul, b.last
 218:	ldr	x0, [sp, #144]
 21c:	mov	x1, #0x1                   	// #1
 220:	str	x1, [x0, #72]
 224:	mov	w0, #0x1                   	// #1
 228:	b	444 <gomp_iter_ull_static_next+0x430>
 22c:	ldr	x0, [sp, #128]
 230:	ldr	x1, [x0, #24]
 234:	ldr	x0, [sp, #64]
 238:	mul	x1, x1, x0
 23c:	ldr	x0, [sp, #128]
 240:	ldr	x0, [x0, #72]
 244:	add	x0, x1, x0
 248:	str	x0, [sp, #48]
 24c:	ldr	x0, [sp, #128]
 250:	ldr	x1, [x0, #24]
 254:	ldr	x0, [sp, #56]
 258:	mul	x1, x1, x0
 25c:	ldr	x0, [sp, #128]
 260:	ldr	x0, [x0, #72]
 264:	add	x0, x1, x0
 268:	str	x0, [sp, #40]
 26c:	ldr	x0, [sp, #24]
 270:	ldr	x1, [sp, #48]
 274:	str	x1, [x0]
 278:	ldr	x0, [sp, #16]
 27c:	ldr	x1, [sp, #40]
 280:	str	x1, [x0]
 284:	ldr	x1, [sp, #56]
 288:	ldr	x0, [sp, #184]
 28c:	cmp	x1, x0
 290:	b.ne	29c <gomp_iter_ull_static_next+0x288>  // b.any
 294:	mov	x0, #0xffffffffffffffff    	// #-1
 298:	b	2a0 <gomp_iter_ull_static_next+0x28c>
 29c:	mov	x0, #0x1                   	// #1
 2a0:	ldr	x1, [sp, #144]
 2a4:	str	x0, [x1, #72]
 2a8:	mov	w0, #0x0                   	// #0
 2ac:	b	444 <gomp_iter_ull_static_next+0x430>
 2b0:	ldr	x0, [sp, #128]
 2b4:	ldr	w0, [x0, #4]
 2b8:	sxtw	x0, w0
 2bc:	cmp	x0, #0x0
 2c0:	b.ne	2fc <gomp_iter_ull_static_next+0x2e8>  // b.any
 2c4:	ldr	x0, [sp, #128]
 2c8:	ldr	x1, [x0, #16]
 2cc:	ldr	x0, [sp, #128]
 2d0:	ldr	x0, [x0, #72]
 2d4:	sub	x1, x1, x0
 2d8:	ldr	x0, [sp, #128]
 2dc:	ldr	x0, [x0, #24]
 2e0:	add	x0, x1, x0
 2e4:	sub	x1, x0, #0x1
 2e8:	ldr	x0, [sp, #128]
 2ec:	ldr	x0, [x0, #24]
 2f0:	udiv	x0, x1, x0
 2f4:	str	x0, [sp, #160]
 2f8:	b	334 <gomp_iter_ull_static_next+0x320>
 2fc:	ldr	x0, [sp, #128]
 300:	ldr	x1, [x0, #72]
 304:	ldr	x0, [sp, #128]
 308:	ldr	x0, [x0, #16]
 30c:	sub	x1, x1, x0
 310:	ldr	x0, [sp, #128]
 314:	ldr	x0, [x0, #24]
 318:	sub	x0, x1, x0
 31c:	sub	x1, x0, #0x1
 320:	ldr	x0, [sp, #128]
 324:	ldr	x0, [x0, #24]
 328:	neg	x0, x0
 32c:	udiv	x0, x1, x0
 330:	str	x0, [sp, #160]
 334:	ldr	x0, [sp, #144]
 338:	ldr	w0, [x0, #40]
 33c:	mov	w0, w0
 340:	str	x0, [sp, #112]
 344:	ldr	x0, [sp, #128]
 348:	ldr	x0, [x0, #8]
 34c:	str	x0, [sp, #104]
 350:	ldr	x0, [sp, #144]
 354:	ldr	x1, [x0, #72]
 358:	ldr	x0, [sp, #120]
 35c:	mul	x1, x1, x0
 360:	ldr	x0, [sp, #112]
 364:	add	x0, x1, x0
 368:	ldr	x1, [sp, #104]
 36c:	mul	x0, x1, x0
 370:	str	x0, [sp, #96]
 374:	ldr	x1, [sp, #96]
 378:	ldr	x0, [sp, #104]
 37c:	add	x0, x1, x0
 380:	str	x0, [sp, #152]
 384:	ldr	x1, [sp, #96]
 388:	ldr	x0, [sp, #160]
 38c:	cmp	x1, x0
 390:	b.cc	39c <gomp_iter_ull_static_next+0x388>  // b.lo, b.ul, b.last
 394:	mov	w0, #0x1                   	// #1
 398:	b	444 <gomp_iter_ull_static_next+0x430>
 39c:	ldr	x1, [sp, #152]
 3a0:	ldr	x0, [sp, #160]
 3a4:	cmp	x1, x0
 3a8:	b.ls	3b4 <gomp_iter_ull_static_next+0x3a0>  // b.plast
 3ac:	ldr	x0, [sp, #160]
 3b0:	str	x0, [sp, #152]
 3b4:	ldr	x0, [sp, #128]
 3b8:	ldr	x1, [x0, #24]
 3bc:	ldr	x0, [sp, #96]
 3c0:	mul	x1, x1, x0
 3c4:	ldr	x0, [sp, #128]
 3c8:	ldr	x0, [x0, #72]
 3cc:	add	x0, x1, x0
 3d0:	str	x0, [sp, #88]
 3d4:	ldr	x0, [sp, #128]
 3d8:	ldr	x1, [x0, #24]
 3dc:	ldr	x0, [sp, #152]
 3e0:	mul	x1, x1, x0
 3e4:	ldr	x0, [sp, #128]
 3e8:	ldr	x0, [x0, #72]
 3ec:	add	x0, x1, x0
 3f0:	str	x0, [sp, #80]
 3f4:	ldr	x0, [sp, #24]
 3f8:	ldr	x1, [sp, #88]
 3fc:	str	x1, [x0]
 400:	ldr	x0, [sp, #16]
 404:	ldr	x1, [sp, #80]
 408:	str	x1, [x0]
 40c:	ldr	x1, [sp, #152]
 410:	ldr	x0, [sp, #160]
 414:	cmp	x1, x0
 418:	b.ne	42c <gomp_iter_ull_static_next+0x418>  // b.any
 41c:	ldr	x0, [sp, #144]
 420:	mov	x1, #0xffffffffffffffff    	// #-1
 424:	str	x1, [x0, #72]
 428:	b	440 <gomp_iter_ull_static_next+0x42c>
 42c:	ldr	x0, [sp, #144]
 430:	ldr	x0, [x0, #72]
 434:	add	x1, x0, #0x1
 438:	ldr	x0, [sp, #144]
 43c:	str	x1, [x0, #72]
 440:	mov	w0, #0x0                   	// #0
 444:	ldp	x29, x30, [sp], #192
 448:	ret

000000000000044c <gomp_iter_ull_dynamic_next_locked>:
 44c:	stp	x29, x30, [sp, #-80]!
 450:	mov	x29, sp
 454:	str	x0, [sp, #24]
 458:	str	x1, [sp, #16]
 45c:	bl	0 <gomp_thread>
 460:	str	x0, [sp, #64]
 464:	ldr	x0, [sp, #64]
 468:	ldr	x0, [x0, #24]
 46c:	str	x0, [sp, #56]
 470:	ldr	x0, [sp, #56]
 474:	ldr	x0, [x0, #72]
 478:	str	x0, [sp, #48]
 47c:	ldr	x0, [sp, #56]
 480:	ldr	x0, [x0, #16]
 484:	ldr	x1, [sp, #48]
 488:	cmp	x1, x0
 48c:	b.ne	498 <gomp_iter_ull_dynamic_next_locked+0x4c>  // b.any
 490:	mov	w0, #0x0                   	// #0
 494:	b	53c <gomp_iter_ull_dynamic_next_locked+0xf0>
 498:	ldr	x0, [sp, #56]
 49c:	ldr	x0, [x0, #8]
 4a0:	str	x0, [sp, #72]
 4a4:	ldr	x0, [sp, #56]
 4a8:	ldr	x1, [x0, #16]
 4ac:	ldr	x0, [sp, #48]
 4b0:	sub	x0, x1, x0
 4b4:	str	x0, [sp, #40]
 4b8:	ldr	x0, [sp, #56]
 4bc:	ldr	w0, [x0, #4]
 4c0:	mov	w0, w0
 4c4:	and	x0, x0, #0x2
 4c8:	cmp	x0, #0x0
 4cc:	b.eq	4ec <gomp_iter_ull_dynamic_next_locked+0xa0>  // b.none
 4d0:	ldr	x1, [sp, #72]
 4d4:	ldr	x0, [sp, #40]
 4d8:	cmp	x1, x0
 4dc:	b.cs	504 <gomp_iter_ull_dynamic_next_locked+0xb8>  // b.hs, b.nlast
 4e0:	ldr	x0, [sp, #40]
 4e4:	str	x0, [sp, #72]
 4e8:	b	504 <gomp_iter_ull_dynamic_next_locked+0xb8>
 4ec:	ldr	x1, [sp, #72]
 4f0:	ldr	x0, [sp, #40]
 4f4:	cmp	x1, x0
 4f8:	b.ls	504 <gomp_iter_ull_dynamic_next_locked+0xb8>  // b.plast
 4fc:	ldr	x0, [sp, #40]
 500:	str	x0, [sp, #72]
 504:	ldr	x1, [sp, #48]
 508:	ldr	x0, [sp, #72]
 50c:	add	x0, x1, x0
 510:	str	x0, [sp, #32]
 514:	ldr	x0, [sp, #56]
 518:	ldr	x1, [sp, #32]
 51c:	str	x1, [x0, #72]
 520:	ldr	x0, [sp, #24]
 524:	ldr	x1, [sp, #48]
 528:	str	x1, [x0]
 52c:	ldr	x0, [sp, #16]
 530:	ldr	x1, [sp, #32]
 534:	str	x1, [x0]
 538:	mov	w0, #0x1                   	// #1
 53c:	ldp	x29, x30, [sp], #80
 540:	ret

0000000000000544 <gomp_iter_ull_dynamic_next>:
 544:	stp	x29, x30, [sp, #-112]!
 548:	mov	x29, sp
 54c:	str	x0, [sp, #24]
 550:	str	x1, [sp, #16]
 554:	bl	0 <gomp_thread>
 558:	str	x0, [sp, #80]
 55c:	ldr	x0, [sp, #80]
 560:	ldr	x0, [x0, #24]
 564:	str	x0, [sp, #72]
 568:	ldr	x0, [sp, #72]
 56c:	ldr	x0, [x0, #16]
 570:	str	x0, [sp, #64]
 574:	ldr	x0, [sp, #72]
 578:	ldr	x0, [x0, #8]
 57c:	str	x0, [sp, #88]
 580:	ldr	x0, [sp, #72]
 584:	ldr	w0, [x0, #4]
 588:	mov	w0, w0
 58c:	and	x0, x0, #0x1
 590:	cmp	x0, #0x0
 594:	b.eq	694 <gomp_iter_ull_dynamic_next+0x150>  // b.none
 598:	ldr	x0, [sp, #72]
 59c:	add	x0, x0, #0x48
 5a0:	ldr	x2, [sp, #88]
 5a4:	ldxr	x1, [x0]
 5a8:	add	x3, x1, x2
 5ac:	stlxr	w4, x3, [x0]
 5b0:	cbnz	w4, 5a4 <gomp_iter_ull_dynamic_next+0x60>
 5b4:	dmb	ish
 5b8:	str	x1, [sp, #40]
 5bc:	ldr	x0, [sp, #72]
 5c0:	ldr	w0, [x0, #4]
 5c4:	mov	w0, w0
 5c8:	and	x0, x0, #0x2
 5cc:	cmp	x0, #0x0
 5d0:	b.ne	634 <gomp_iter_ull_dynamic_next+0xf0>  // b.any
 5d4:	ldr	x1, [sp, #40]
 5d8:	ldr	x0, [sp, #64]
 5dc:	cmp	x1, x0
 5e0:	b.cc	5ec <gomp_iter_ull_dynamic_next+0xa8>  // b.lo, b.ul, b.last
 5e4:	mov	w0, #0x0                   	// #0
 5e8:	b	7a0 <gomp_iter_ull_dynamic_next+0x25c>
 5ec:	ldr	x1, [sp, #40]
 5f0:	ldr	x0, [sp, #88]
 5f4:	add	x0, x1, x0
 5f8:	str	x0, [sp, #96]
 5fc:	ldr	x1, [sp, #96]
 600:	ldr	x0, [sp, #64]
 604:	cmp	x1, x0
 608:	b.ls	614 <gomp_iter_ull_dynamic_next+0xd0>  // b.plast
 60c:	ldr	x0, [sp, #64]
 610:	str	x0, [sp, #96]
 614:	ldr	x0, [sp, #24]
 618:	ldr	x1, [sp, #40]
 61c:	str	x1, [x0]
 620:	ldr	x0, [sp, #16]
 624:	ldr	x1, [sp, #96]
 628:	str	x1, [x0]
 62c:	mov	w0, #0x1                   	// #1
 630:	b	7a0 <gomp_iter_ull_dynamic_next+0x25c>
 634:	ldr	x1, [sp, #40]
 638:	ldr	x0, [sp, #64]
 63c:	cmp	x1, x0
 640:	b.hi	64c <gomp_iter_ull_dynamic_next+0x108>  // b.pmore
 644:	mov	w0, #0x0                   	// #0
 648:	b	7a0 <gomp_iter_ull_dynamic_next+0x25c>
 64c:	ldr	x1, [sp, #40]
 650:	ldr	x0, [sp, #88]
 654:	add	x0, x1, x0
 658:	str	x0, [sp, #96]
 65c:	ldr	x1, [sp, #96]
 660:	ldr	x0, [sp, #64]
 664:	cmp	x1, x0
 668:	b.cs	674 <gomp_iter_ull_dynamic_next+0x130>  // b.hs, b.nlast
 66c:	ldr	x0, [sp, #64]
 670:	str	x0, [sp, #96]
 674:	ldr	x0, [sp, #24]
 678:	ldr	x1, [sp, #40]
 67c:	str	x1, [x0]
 680:	ldr	x0, [sp, #16]
 684:	ldr	x1, [sp, #96]
 688:	str	x1, [x0]
 68c:	mov	w0, #0x1                   	// #1
 690:	b	7a0 <gomp_iter_ull_dynamic_next+0x25c>
 694:	ldr	x0, [sp, #72]
 698:	add	x0, x0, #0x48
 69c:	ldr	x0, [x0]
 6a0:	str	x0, [sp, #104]
 6a4:	ldr	x1, [sp, #64]
 6a8:	ldr	x0, [sp, #104]
 6ac:	sub	x0, x1, x0
 6b0:	str	x0, [sp, #56]
 6b4:	ldr	x1, [sp, #104]
 6b8:	ldr	x0, [sp, #64]
 6bc:	cmp	x1, x0
 6c0:	b.ne	6cc <gomp_iter_ull_dynamic_next+0x188>  // b.any
 6c4:	mov	w0, #0x0                   	// #0
 6c8:	b	7a0 <gomp_iter_ull_dynamic_next+0x25c>
 6cc:	ldr	x0, [sp, #72]
 6d0:	ldr	w0, [x0, #4]
 6d4:	mov	w0, w0
 6d8:	and	x0, x0, #0x2
 6dc:	cmp	x0, #0x0
 6e0:	b.eq	700 <gomp_iter_ull_dynamic_next+0x1bc>  // b.none
 6e4:	ldr	x1, [sp, #88]
 6e8:	ldr	x0, [sp, #56]
 6ec:	cmp	x1, x0
 6f0:	b.cs	718 <gomp_iter_ull_dynamic_next+0x1d4>  // b.hs, b.nlast
 6f4:	ldr	x0, [sp, #56]
 6f8:	str	x0, [sp, #88]
 6fc:	b	718 <gomp_iter_ull_dynamic_next+0x1d4>
 700:	ldr	x1, [sp, #88]
 704:	ldr	x0, [sp, #56]
 708:	cmp	x1, x0
 70c:	b.ls	718 <gomp_iter_ull_dynamic_next+0x1d4>  // b.plast
 710:	ldr	x0, [sp, #56]
 714:	str	x0, [sp, #88]
 718:	ldr	x1, [sp, #104]
 71c:	ldr	x0, [sp, #88]
 720:	add	x0, x1, x0
 724:	str	x0, [sp, #96]
 728:	ldr	x0, [sp, #72]
 72c:	add	x1, x0, #0x48
 730:	ldr	x2, [sp, #104]
 734:	ldr	x3, [sp, #96]
 738:	ldxr	x0, [x1]
 73c:	cmp	x0, x2
 740:	b.ne	74c <gomp_iter_ull_dynamic_next+0x208>  // b.any
 744:	stlxr	w4, x3, [x1]
 748:	cbnz	w4, 738 <gomp_iter_ull_dynamic_next+0x1f4>
 74c:	dmb	ish
 750:	str	x0, [sp, #48]
 754:	ldr	x1, [sp, #48]
 758:	ldr	x0, [sp, #104]
 75c:	cmp	x1, x0
 760:	cset	w0, eq  // eq = none
 764:	and	w0, w0, #0xff
 768:	and	x0, x0, #0xff
 76c:	cmp	x0, #0x0
 770:	b.ne	780 <gomp_iter_ull_dynamic_next+0x23c>  // b.any
 774:	ldr	x0, [sp, #48]
 778:	str	x0, [sp, #104]
 77c:	b	6a4 <gomp_iter_ull_dynamic_next+0x160>
 780:	nop
 784:	ldr	x0, [sp, #24]
 788:	ldr	x1, [sp, #104]
 78c:	str	x1, [x0]
 790:	ldr	x0, [sp, #16]
 794:	ldr	x1, [sp, #96]
 798:	str	x1, [x0]
 79c:	mov	w0, #0x1                   	// #1
 7a0:	ldp	x29, x30, [sp], #112
 7a4:	ret

00000000000007a8 <gomp_iter_ull_guided_next_locked>:
 7a8:	stp	x29, x30, [sp, #-96]!
 7ac:	mov	x29, sp
 7b0:	str	x0, [sp, #24]
 7b4:	str	x1, [sp, #16]
 7b8:	bl	0 <gomp_thread>
 7bc:	str	x0, [sp, #64]
 7c0:	ldr	x0, [sp, #64]
 7c4:	ldr	x0, [x0, #24]
 7c8:	str	x0, [sp, #56]
 7cc:	ldr	x0, [sp, #64]
 7d0:	ldr	x0, [x0, #16]
 7d4:	str	x0, [sp, #48]
 7d8:	ldr	x0, [sp, #48]
 7dc:	cmp	x0, #0x0
 7e0:	b.eq	7f4 <gomp_iter_ull_guided_next_locked+0x4c>  // b.none
 7e4:	ldr	x0, [sp, #48]
 7e8:	ldr	w0, [x0]
 7ec:	mov	w0, w0
 7f0:	b	7f8 <gomp_iter_ull_guided_next_locked+0x50>
 7f4:	mov	x0, #0x1                   	// #1
 7f8:	str	x0, [sp, #40]
 7fc:	ldr	x0, [sp, #56]
 800:	ldr	x1, [x0, #72]
 804:	ldr	x0, [sp, #56]
 808:	ldr	x0, [x0, #16]
 80c:	cmp	x1, x0
 810:	b.ne	81c <gomp_iter_ull_guided_next_locked+0x74>  // b.any
 814:	mov	w0, #0x0                   	// #0
 818:	b	924 <gomp_iter_ull_guided_next_locked+0x17c>
 81c:	ldr	x0, [sp, #56]
 820:	ldr	x0, [x0, #72]
 824:	str	x0, [sp, #32]
 828:	ldr	x0, [sp, #56]
 82c:	ldr	w0, [x0, #4]
 830:	sxtw	x0, w0
 834:	cmp	x0, #0x0
 838:	b.ne	860 <gomp_iter_ull_guided_next_locked+0xb8>  // b.any
 83c:	ldr	x0, [sp, #56]
 840:	ldr	x1, [x0, #16]
 844:	ldr	x0, [sp, #32]
 848:	sub	x1, x1, x0
 84c:	ldr	x0, [sp, #56]
 850:	ldr	x0, [x0, #24]
 854:	udiv	x0, x1, x0
 858:	str	x0, [sp, #88]
 85c:	b	884 <gomp_iter_ull_guided_next_locked+0xdc>
 860:	ldr	x0, [sp, #56]
 864:	ldr	x0, [x0, #16]
 868:	ldr	x1, [sp, #32]
 86c:	sub	x1, x1, x0
 870:	ldr	x0, [sp, #56]
 874:	ldr	x0, [x0, #24]
 878:	neg	x0, x0
 87c:	udiv	x0, x1, x0
 880:	str	x0, [sp, #88]
 884:	ldr	x1, [sp, #88]
 888:	ldr	x0, [sp, #40]
 88c:	add	x0, x1, x0
 890:	sub	x1, x0, #0x1
 894:	ldr	x0, [sp, #40]
 898:	udiv	x0, x1, x0
 89c:	str	x0, [sp, #80]
 8a0:	ldr	x0, [sp, #56]
 8a4:	ldr	x0, [x0, #8]
 8a8:	ldr	x1, [sp, #80]
 8ac:	cmp	x1, x0
 8b0:	b.cs	8c0 <gomp_iter_ull_guided_next_locked+0x118>  // b.hs, b.nlast
 8b4:	ldr	x0, [sp, #56]
 8b8:	ldr	x0, [x0, #8]
 8bc:	str	x0, [sp, #80]
 8c0:	ldr	x1, [sp, #80]
 8c4:	ldr	x0, [sp, #88]
 8c8:	cmp	x1, x0
 8cc:	b.hi	8f0 <gomp_iter_ull_guided_next_locked+0x148>  // b.pmore
 8d0:	ldr	x0, [sp, #56]
 8d4:	ldr	x1, [x0, #24]
 8d8:	ldr	x0, [sp, #80]
 8dc:	mul	x0, x1, x0
 8e0:	ldr	x1, [sp, #32]
 8e4:	add	x0, x1, x0
 8e8:	str	x0, [sp, #72]
 8ec:	b	8fc <gomp_iter_ull_guided_next_locked+0x154>
 8f0:	ldr	x0, [sp, #56]
 8f4:	ldr	x0, [x0, #16]
 8f8:	str	x0, [sp, #72]
 8fc:	ldr	x0, [sp, #56]
 900:	ldr	x1, [sp, #72]
 904:	str	x1, [x0, #72]
 908:	ldr	x0, [sp, #24]
 90c:	ldr	x1, [sp, #32]
 910:	str	x1, [x0]
 914:	ldr	x0, [sp, #16]
 918:	ldr	x1, [sp, #72]
 91c:	str	x1, [x0]
 920:	mov	w0, #0x1                   	// #1
 924:	ldp	x29, x30, [sp], #96
 928:	ret

000000000000092c <gomp_iter_ull_guided_next>:
 92c:	stp	x29, x30, [sp, #-128]!
 930:	mov	x29, sp
 934:	str	x0, [sp, #24]
 938:	str	x1, [sp, #16]
 93c:	bl	0 <gomp_thread>
 940:	str	x0, [sp, #88]
 944:	ldr	x0, [sp, #88]
 948:	ldr	x0, [x0, #24]
 94c:	str	x0, [sp, #80]
 950:	ldr	x0, [sp, #88]
 954:	ldr	x0, [x0, #16]
 958:	str	x0, [sp, #72]
 95c:	ldr	x0, [sp, #72]
 960:	cmp	x0, #0x0
 964:	b.eq	978 <gomp_iter_ull_guided_next+0x4c>  // b.none
 968:	ldr	x0, [sp, #72]
 96c:	ldr	w0, [x0]
 970:	mov	w0, w0
 974:	b	97c <gomp_iter_ull_guided_next+0x50>
 978:	mov	x0, #0x1                   	// #1
 97c:	str	x0, [sp, #64]
 980:	ldr	x0, [sp, #80]
 984:	add	x0, x0, #0x48
 988:	ldr	x0, [x0]
 98c:	str	x0, [sp, #120]
 990:	ldr	x0, [sp, #80]
 994:	ldr	x0, [x0, #16]
 998:	str	x0, [sp, #56]
 99c:	ldr	x0, [sp, #80]
 9a0:	ldr	x0, [x0, #24]
 9a4:	str	x0, [sp, #48]
 9a8:	ldr	x0, [sp, #80]
 9ac:	ldr	x0, [x0, #8]
 9b0:	str	x0, [sp, #40]
 9b4:	ldr	x1, [sp, #120]
 9b8:	ldr	x0, [sp, #56]
 9bc:	cmp	x1, x0
 9c0:	b.ne	9cc <gomp_iter_ull_guided_next+0xa0>  // b.any
 9c4:	mov	w0, #0x0                   	// #0
 9c8:	b	b08 <gomp_iter_ull_guided_next+0x1dc>
 9cc:	ldr	x0, [sp, #80]
 9d0:	ldr	w0, [x0, #4]
 9d4:	sxtw	x0, w0
 9d8:	cmp	x0, #0x0
 9dc:	b.ne	9fc <gomp_iter_ull_guided_next+0xd0>  // b.any
 9e0:	ldr	x1, [sp, #56]
 9e4:	ldr	x0, [sp, #120]
 9e8:	sub	x1, x1, x0
 9ec:	ldr	x0, [sp, #48]
 9f0:	udiv	x0, x1, x0
 9f4:	str	x0, [sp, #104]
 9f8:	b	a18 <gomp_iter_ull_guided_next+0xec>
 9fc:	ldr	x1, [sp, #120]
 a00:	ldr	x0, [sp, #56]
 a04:	sub	x1, x1, x0
 a08:	ldr	x0, [sp, #48]
 a0c:	neg	x0, x0
 a10:	udiv	x0, x1, x0
 a14:	str	x0, [sp, #104]
 a18:	ldr	x1, [sp, #104]
 a1c:	ldr	x0, [sp, #64]
 a20:	add	x0, x1, x0
 a24:	sub	x1, x0, #0x1
 a28:	ldr	x0, [sp, #64]
 a2c:	udiv	x0, x1, x0
 a30:	str	x0, [sp, #96]
 a34:	ldr	x1, [sp, #96]
 a38:	ldr	x0, [sp, #40]
 a3c:	cmp	x1, x0
 a40:	b.cs	a4c <gomp_iter_ull_guided_next+0x120>  // b.hs, b.nlast
 a44:	ldr	x0, [sp, #40]
 a48:	str	x0, [sp, #96]
 a4c:	ldr	x1, [sp, #96]
 a50:	ldr	x0, [sp, #104]
 a54:	cmp	x1, x0
 a58:	cset	w0, ls  // ls = plast
 a5c:	and	w0, w0, #0xff
 a60:	and	x0, x0, #0xff
 a64:	cmp	x0, #0x0
 a68:	b.eq	a88 <gomp_iter_ull_guided_next+0x15c>  // b.none
 a6c:	ldr	x1, [sp, #96]
 a70:	ldr	x0, [sp, #48]
 a74:	mul	x0, x1, x0
 a78:	ldr	x1, [sp, #120]
 a7c:	add	x0, x1, x0
 a80:	str	x0, [sp, #112]
 a84:	b	a90 <gomp_iter_ull_guided_next+0x164>
 a88:	ldr	x0, [sp, #56]
 a8c:	str	x0, [sp, #112]
 a90:	ldr	x0, [sp, #80]
 a94:	add	x1, x0, #0x48
 a98:	ldr	x2, [sp, #120]
 a9c:	ldr	x3, [sp, #112]
 aa0:	ldxr	x0, [x1]
 aa4:	cmp	x0, x2
 aa8:	b.ne	ab4 <gomp_iter_ull_guided_next+0x188>  // b.any
 aac:	stlxr	w4, x3, [x1]
 ab0:	cbnz	w4, aa0 <gomp_iter_ull_guided_next+0x174>
 ab4:	dmb	ish
 ab8:	str	x0, [sp, #32]
 abc:	ldr	x1, [sp, #32]
 ac0:	ldr	x0, [sp, #120]
 ac4:	cmp	x1, x0
 ac8:	cset	w0, eq  // eq = none
 acc:	and	w0, w0, #0xff
 ad0:	and	x0, x0, #0xff
 ad4:	cmp	x0, #0x0
 ad8:	b.ne	ae8 <gomp_iter_ull_guided_next+0x1bc>  // b.any
 adc:	ldr	x0, [sp, #32]
 ae0:	str	x0, [sp, #120]
 ae4:	b	9b4 <gomp_iter_ull_guided_next+0x88>
 ae8:	nop
 aec:	ldr	x0, [sp, #24]
 af0:	ldr	x1, [sp, #120]
 af4:	str	x1, [x0]
 af8:	ldr	x0, [sp, #16]
 afc:	ldr	x1, [sp, #112]
 b00:	str	x1, [x0]
 b04:	mov	w0, #0x1                   	// #1
 b08:	ldp	x29, x30, [sp], #128
 b0c:	ret

loop.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_lock>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #24]
       c:	str	wzr, [sp, #44]
      10:	ldr	x1, [sp, #24]
      14:	add	x0, sp, #0x2c
      18:	ldr	w3, [x0]
      1c:	mov	w4, #0x1                   	// #1
      20:	ldaxr	w2, [x1]
      24:	cmp	w2, w3
      28:	b.ne	34 <gomp_mutex_lock+0x34>  // b.any
      2c:	stxr	w5, w4, [x1]
      30:	cbnz	w5, 20 <gomp_mutex_lock+0x20>
      34:	cset	w1, eq  // eq = none
      38:	cmp	w1, #0x0
      3c:	b.ne	44 <gomp_mutex_lock+0x44>  // b.any
      40:	str	w2, [x0]
      44:	mov	w0, w1
      48:	eor	w0, w0, #0x1
      4c:	and	w0, w0, #0xff
      50:	cmp	w0, #0x0
      54:	b.eq	68 <gomp_mutex_lock+0x68>  // b.none
      58:	ldr	w0, [sp, #44]
      5c:	mov	w1, w0
      60:	ldr	x0, [sp, #24]
      64:	bl	0 <gomp_mutex_lock_slow>
      68:	nop
      6c:	ldp	x29, x30, [sp], #48
      70:	ret

0000000000000074 <gomp_mutex_unlock>:
      74:	stp	x29, x30, [sp, #-48]!
      78:	mov	x29, sp
      7c:	str	x0, [sp, #24]
      80:	ldr	x1, [sp, #24]
      84:	ldxr	w0, [x1]
      88:	stlxr	w2, wzr, [x1]
      8c:	cbnz	w2, 84 <gomp_mutex_unlock+0x10>
      90:	str	w0, [sp, #44]
      94:	ldr	w0, [sp, #44]
      98:	lsr	w0, w0, #31
      9c:	and	w0, w0, #0xff
      a0:	and	x0, x0, #0xff
      a4:	cmp	x0, #0x0
      a8:	b.eq	b4 <gomp_mutex_unlock+0x40>  // b.none
      ac:	ldr	x0, [sp, #24]
      b0:	bl	0 <gomp_mutex_unlock_slow>
      b4:	nop
      b8:	ldp	x29, x30, [sp], #48
      bc:	ret

00000000000000c0 <gomp_ptrlock_set>:
      c0:	stp	x29, x30, [sp, #-48]!
      c4:	mov	x29, sp
      c8:	str	x0, [sp, #24]
      cc:	str	x1, [sp, #16]
      d0:	ldr	x2, [sp, #16]
      d4:	ldr	x1, [sp, #24]
      d8:	ldxr	x0, [x1]
      dc:	stlxr	w3, x2, [x1]
      e0:	cbnz	w3, d8 <gomp_ptrlock_set+0x18>
      e4:	str	x0, [sp, #40]
      e8:	ldr	x0, [sp, #40]
      ec:	cmp	x0, #0x1
      f0:	b.eq	fc <gomp_ptrlock_set+0x3c>  // b.none
      f4:	ldr	x0, [sp, #24]
      f8:	bl	0 <gomp_ptrlock_set_slow>
      fc:	nop
     100:	ldp	x29, x30, [sp], #48
     104:	ret

0000000000000108 <gomp_thread>:
     108:	mrs	x1, tpidr_el0
     10c:	adrp	x0, 0 <gomp_tls_data>
     110:	ldr	x0, [x0]
     114:	add	x0, x1, x0
     118:	ret

000000000000011c <gomp_icv>:
     11c:	stp	x29, x30, [sp, #-48]!
     120:	mov	x29, sp
     124:	strb	w0, [sp, #31]
     128:	bl	108 <gomp_thread>
     12c:	ldr	x0, [x0, #80]
     130:	str	x0, [sp, #40]
     134:	ldr	x0, [sp, #40]
     138:	cmp	x0, #0x0
     13c:	b.eq	14c <gomp_icv+0x30>  // b.none
     140:	ldr	x0, [sp, #40]
     144:	add	x0, x0, #0x90
     148:	b	168 <gomp_icv+0x4c>
     14c:	ldrb	w0, [sp, #31]
     150:	cmp	w0, #0x0
     154:	b.eq	160 <gomp_icv+0x44>  // b.none
     158:	bl	0 <gomp_new_icv>
     15c:	b	168 <gomp_icv+0x4c>
     160:	adrp	x0, 0 <gomp_global_icv>
     164:	add	x0, x0, #0x0
     168:	ldp	x29, x30, [sp], #48
     16c:	ret

0000000000000170 <gomp_work_share_init_done>:
     170:	stp	x29, x30, [sp, #-32]!
     174:	mov	x29, sp
     178:	bl	108 <gomp_thread>
     17c:	str	x0, [sp, #24]
     180:	ldr	x0, [sp, #24]
     184:	ldr	x0, [x0, #32]
     188:	cmp	x0, #0x0
     18c:	cset	w0, ne  // ne = any
     190:	and	w0, w0, #0xff
     194:	and	x0, x0, #0xff
     198:	cmp	x0, #0x0
     19c:	b.eq	1c0 <gomp_work_share_init_done+0x50>  // b.none
     1a0:	ldr	x0, [sp, #24]
     1a4:	ldr	x0, [x0, #32]
     1a8:	add	x2, x0, #0x50
     1ac:	ldr	x0, [sp, #24]
     1b0:	ldr	x0, [x0, #24]
     1b4:	mov	x1, x0
     1b8:	mov	x0, x2
     1bc:	bl	c0 <gomp_ptrlock_set>
     1c0:	nop
     1c4:	ldp	x29, x30, [sp], #32
     1c8:	ret

00000000000001cc <gomp_loop_init>:
     1cc:	stp	x29, x30, [sp, #-96]!
     1d0:	mov	x29, sp
     1d4:	str	x0, [sp, #56]
     1d8:	str	x1, [sp, #48]
     1dc:	str	x2, [sp, #40]
     1e0:	str	x3, [sp, #32]
     1e4:	str	w4, [sp, #28]
     1e8:	str	x5, [sp, #16]
     1ec:	ldr	x0, [sp, #56]
     1f0:	ldr	w1, [sp, #28]
     1f4:	str	w1, [x0]
     1f8:	ldr	x0, [sp, #56]
     1fc:	ldr	x1, [sp, #16]
     200:	str	x1, [x0, #8]
     204:	ldr	x0, [sp, #32]
     208:	cmp	x0, #0x0
     20c:	b.le	220 <gomp_loop_init+0x54>
     210:	ldr	x1, [sp, #48]
     214:	ldr	x0, [sp, #40]
     218:	cmp	x1, x0
     21c:	b.gt	23c <gomp_loop_init+0x70>
     220:	ldr	x0, [sp, #32]
     224:	cmp	x0, #0x0
     228:	b.ge	244 <gomp_loop_init+0x78>  // b.tcont
     22c:	ldr	x1, [sp, #48]
     230:	ldr	x0, [sp, #40]
     234:	cmp	x1, x0
     238:	b.ge	244 <gomp_loop_init+0x78>  // b.tcont
     23c:	ldr	x0, [sp, #48]
     240:	b	248 <gomp_loop_init+0x7c>
     244:	ldr	x0, [sp, #40]
     248:	ldr	x1, [sp, #56]
     24c:	str	x0, [x1, #16]
     250:	ldr	x0, [sp, #56]
     254:	ldr	x1, [sp, #32]
     258:	str	x1, [x0, #24]
     25c:	ldr	x0, [sp, #56]
     260:	ldr	x1, [sp, #48]
     264:	str	x1, [x0, #72]
     268:	ldr	w0, [sp, #28]
     26c:	cmp	w0, #0x2
     270:	b.ne	3e0 <gomp_loop_init+0x214>  // b.any
     274:	ldr	x0, [sp, #56]
     278:	ldr	x1, [x0, #8]
     27c:	ldr	x0, [sp, #32]
     280:	mul	x1, x1, x0
     284:	ldr	x0, [sp, #56]
     288:	str	x1, [x0, #8]
     28c:	bl	108 <gomp_thread>
     290:	str	x0, [sp, #88]
     294:	ldr	x0, [sp, #88]
     298:	ldr	x0, [x0, #16]
     29c:	str	x0, [sp, #80]
     2a0:	ldr	x0, [sp, #80]
     2a4:	cmp	x0, #0x0
     2a8:	b.eq	2bc <gomp_loop_init+0xf0>  // b.none
     2ac:	ldr	x0, [sp, #80]
     2b0:	ldr	w0, [x0]
     2b4:	mov	w0, w0
     2b8:	b	2c0 <gomp_loop_init+0xf4>
     2bc:	mov	x0, #0x1                   	// #1
     2c0:	str	x0, [sp, #72]
     2c4:	ldr	x0, [sp, #32]
     2c8:	cmp	x0, #0x0
     2cc:	cset	w0, gt
     2d0:	and	w0, w0, #0xff
     2d4:	and	x0, x0, #0xff
     2d8:	cmp	x0, #0x0
     2dc:	b.eq	35c <gomp_loop_init+0x190>  // b.none
     2e0:	ldr	x0, [sp, #56]
     2e4:	ldr	x1, [x0, #8]
     2e8:	ldr	x0, [sp, #72]
     2ec:	orr	x0, x1, x0
     2f0:	mov	x1, x0
     2f4:	mov	x0, #0x7fffffff            	// #2147483647
     2f8:	cmp	x1, x0
     2fc:	cset	w0, hi  // hi = pmore
     300:	and	w0, w0, #0xff
     304:	and	x0, x0, #0xff
     308:	cmp	x0, #0x0
     30c:	b.eq	31c <gomp_loop_init+0x150>  // b.none
     310:	ldr	x0, [sp, #56]
     314:	str	wzr, [x0, #4]
     318:	b	3e0 <gomp_loop_init+0x214>
     31c:	ldr	x0, [sp, #56]
     320:	ldr	x1, [x0, #16]
     324:	ldr	x0, [sp, #72]
     328:	add	x2, x0, #0x1
     32c:	ldr	x0, [sp, #56]
     330:	ldr	x0, [x0, #8]
     334:	mul	x0, x2, x0
     338:	mov	x2, #0x7fffffffffffffff    	// #9223372036854775807
     33c:	sub	x0, x2, x0
     340:	cmp	x1, x0
     344:	cset	w0, lt  // lt = tstop
     348:	and	w0, w0, #0xff
     34c:	mov	w1, w0
     350:	ldr	x0, [sp, #56]
     354:	str	w1, [x0, #4]
     358:	b	3e0 <gomp_loop_init+0x214>
     35c:	ldr	x0, [sp, #56]
     360:	ldr	x0, [x0, #8]
     364:	neg	x1, x0
     368:	ldr	x0, [sp, #72]
     36c:	orr	x0, x1, x0
     370:	mov	x1, x0
     374:	mov	x0, #0x7fffffff            	// #2147483647
     378:	cmp	x1, x0
     37c:	cset	w0, hi  // hi = pmore
     380:	and	w0, w0, #0xff
     384:	and	x0, x0, #0xff
     388:	cmp	x0, #0x0
     38c:	b.eq	39c <gomp_loop_init+0x1d0>  // b.none
     390:	ldr	x0, [sp, #56]
     394:	str	wzr, [x0, #4]
     398:	b	3e0 <gomp_loop_init+0x214>
     39c:	ldr	x0, [sp, #72]
     3a0:	add	x1, x0, #0x1
     3a4:	ldr	x0, [sp, #56]
     3a8:	ldr	x0, [x0, #8]
     3ac:	neg	x0, x0
     3b0:	mul	x1, x1, x0
     3b4:	mov	x0, #0x2                   	// #2
     3b8:	movk	x0, #0x8000, lsl #48
     3bc:	add	x1, x1, x0
     3c0:	ldr	x0, [sp, #56]
     3c4:	ldr	x0, [x0, #16]
     3c8:	cmp	x1, x0
     3cc:	cset	w0, le
     3d0:	and	w0, w0, #0xff
     3d4:	mov	w1, w0
     3d8:	ldr	x0, [sp, #56]
     3dc:	str	w1, [x0, #4]
     3e0:	nop
     3e4:	ldp	x29, x30, [sp], #96
     3e8:	ret

00000000000003ec <GOMP_loop_static_start>:
     3ec:	stp	x29, x30, [sp, #-80]!
     3f0:	mov	x29, sp
     3f4:	str	x0, [sp, #56]
     3f8:	str	x1, [sp, #48]
     3fc:	str	x2, [sp, #40]
     400:	str	x3, [sp, #32]
     404:	str	x4, [sp, #24]
     408:	str	x5, [sp, #16]
     40c:	bl	108 <gomp_thread>
     410:	str	x0, [sp, #72]
     414:	ldr	x0, [sp, #72]
     418:	str	xzr, [x0, #72]
     41c:	mov	x0, #0x0                   	// #0
     420:	bl	0 <gomp_work_share_start>
     424:	and	w0, w0, #0xff
     428:	cmp	w0, #0x0
     42c:	b.eq	454 <GOMP_loop_static_start+0x68>  // b.none
     430:	ldr	x0, [sp, #72]
     434:	ldr	x0, [x0, #24]
     438:	ldr	x5, [sp, #32]
     43c:	mov	w4, #0x1                   	// #1
     440:	ldr	x3, [sp, #40]
     444:	ldr	x2, [sp, #48]
     448:	ldr	x1, [sp, #56]
     44c:	bl	1cc <gomp_loop_init>
     450:	bl	170 <gomp_work_share_init_done>
     454:	ldr	x1, [sp, #16]
     458:	ldr	x0, [sp, #24]
     45c:	bl	0 <gomp_iter_static_next>
     460:	cmp	w0, #0x0
     464:	cset	w0, eq  // eq = none
     468:	and	w0, w0, #0xff
     46c:	ldp	x29, x30, [sp], #80
     470:	ret

0000000000000474 <GOMP_loop_dynamic_start>:
     474:	stp	x29, x30, [sp, #-80]!
     478:	mov	x29, sp
     47c:	str	x0, [sp, #56]
     480:	str	x1, [sp, #48]
     484:	str	x2, [sp, #40]
     488:	str	x3, [sp, #32]
     48c:	str	x4, [sp, #24]
     490:	str	x5, [sp, #16]
     494:	bl	108 <gomp_thread>
     498:	str	x0, [sp, #72]
     49c:	mov	x0, #0x0                   	// #0
     4a0:	bl	0 <gomp_work_share_start>
     4a4:	and	w0, w0, #0xff
     4a8:	cmp	w0, #0x0
     4ac:	b.eq	4d4 <GOMP_loop_dynamic_start+0x60>  // b.none
     4b0:	ldr	x0, [sp, #72]
     4b4:	ldr	x0, [x0, #24]
     4b8:	ldr	x5, [sp, #32]
     4bc:	mov	w4, #0x2                   	// #2
     4c0:	ldr	x3, [sp, #40]
     4c4:	ldr	x2, [sp, #48]
     4c8:	ldr	x1, [sp, #56]
     4cc:	bl	1cc <gomp_loop_init>
     4d0:	bl	170 <gomp_work_share_init_done>
     4d4:	ldr	x1, [sp, #16]
     4d8:	ldr	x0, [sp, #24]
     4dc:	bl	0 <gomp_iter_dynamic_next>
     4e0:	strb	w0, [sp, #71]
     4e4:	ldrb	w0, [sp, #71]
     4e8:	ldp	x29, x30, [sp], #80
     4ec:	ret

00000000000004f0 <GOMP_loop_guided_start>:
     4f0:	stp	x29, x30, [sp, #-80]!
     4f4:	mov	x29, sp
     4f8:	str	x0, [sp, #56]
     4fc:	str	x1, [sp, #48]
     500:	str	x2, [sp, #40]
     504:	str	x3, [sp, #32]
     508:	str	x4, [sp, #24]
     50c:	str	x5, [sp, #16]
     510:	bl	108 <gomp_thread>
     514:	str	x0, [sp, #72]
     518:	mov	x0, #0x0                   	// #0
     51c:	bl	0 <gomp_work_share_start>
     520:	and	w0, w0, #0xff
     524:	cmp	w0, #0x0
     528:	b.eq	550 <GOMP_loop_guided_start+0x60>  // b.none
     52c:	ldr	x0, [sp, #72]
     530:	ldr	x0, [x0, #24]
     534:	ldr	x5, [sp, #32]
     538:	mov	w4, #0x3                   	// #3
     53c:	ldr	x3, [sp, #40]
     540:	ldr	x2, [sp, #48]
     544:	ldr	x1, [sp, #56]
     548:	bl	1cc <gomp_loop_init>
     54c:	bl	170 <gomp_work_share_init_done>
     550:	ldr	x1, [sp, #16]
     554:	ldr	x0, [sp, #24]
     558:	bl	0 <gomp_iter_guided_next>
     55c:	strb	w0, [sp, #71]
     560:	ldrb	w0, [sp, #71]
     564:	ldp	x29, x30, [sp], #80
     568:	ret

000000000000056c <GOMP_loop_maybe_nonmonotonic_runtime_start>:
     56c:	stp	x29, x30, [sp, #-80]!
     570:	mov	x29, sp
     574:	str	x0, [sp, #56]
     578:	str	x1, [sp, #48]
     57c:	str	x2, [sp, #40]
     580:	str	x3, [sp, #32]
     584:	str	x4, [sp, #24]
     588:	mov	w0, #0x0                   	// #0
     58c:	bl	11c <gomp_icv>
     590:	str	x0, [sp, #72]
     594:	ldr	x0, [sp, #72]
     598:	ldr	w0, [x0, #8]
     59c:	and	w0, w0, #0x7fffffff
     5a0:	cmp	w0, #0x4
     5a4:	b.eq	664 <GOMP_loop_maybe_nonmonotonic_runtime_start+0xf8>  // b.none
     5a8:	cmp	w0, #0x4
     5ac:	b.hi	688 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x11c>  // b.pmore
     5b0:	cmp	w0, #0x3
     5b4:	b.eq	634 <GOMP_loop_maybe_nonmonotonic_runtime_start+0xc8>  // b.none
     5b8:	cmp	w0, #0x3
     5bc:	b.hi	688 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x11c>  // b.pmore
     5c0:	cmp	w0, #0x1
     5c4:	b.eq	5d4 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x68>  // b.none
     5c8:	cmp	w0, #0x2
     5cc:	b.eq	604 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x98>  // b.none
     5d0:	b	688 <GOMP_loop_maybe_nonmonotonic_runtime_start+0x11c>
     5d4:	ldr	x0, [sp, #72]
     5d8:	ldr	w0, [x0, #12]
     5dc:	sxtw	x0, w0
     5e0:	ldr	x5, [sp, #24]
     5e4:	ldr	x4, [sp, #32]
     5e8:	mov	x3, x0
     5ec:	ldr	x2, [sp, #40]
     5f0:	ldr	x1, [sp, #48]
     5f4:	ldr	x0, [sp, #56]
     5f8:	bl	3ec <GOMP_loop_static_start>
     5fc:	and	w0, w0, #0xff
     600:	b	68c <GOMP_loop_maybe_nonmonotonic_runtime_start+0x120>
     604:	ldr	x0, [sp, #72]
     608:	ldr	w0, [x0, #12]
     60c:	sxtw	x0, w0
     610:	ldr	x5, [sp, #24]
     614:	ldr	x4, [sp, #32]
     618:	mov	x3, x0
     61c:	ldr	x2, [sp, #40]
     620:	ldr	x1, [sp, #48]
     624:	ldr	x0, [sp, #56]
     628:	bl	474 <GOMP_loop_dynamic_start>
     62c:	and	w0, w0, #0xff
     630:	b	68c <GOMP_loop_maybe_nonmonotonic_runtime_start+0x120>
     634:	ldr	x0, [sp, #72]
     638:	ldr	w0, [x0, #12]
     63c:	sxtw	x0, w0
     640:	ldr	x5, [sp, #24]
     644:	ldr	x4, [sp, #32]
     648:	mov	x3, x0
     64c:	ldr	x2, [sp, #40]
     650:	ldr	x1, [sp, #48]
     654:	ldr	x0, [sp, #56]
     658:	bl	4f0 <GOMP_loop_guided_start>
     65c:	and	w0, w0, #0xff
     660:	b	68c <GOMP_loop_maybe_nonmonotonic_runtime_start+0x120>
     664:	ldr	x5, [sp, #24]
     668:	ldr	x4, [sp, #32]
     66c:	mov	x3, #0x0                   	// #0
     670:	ldr	x2, [sp, #40]
     674:	ldr	x1, [sp, #48]
     678:	ldr	x0, [sp, #56]
     67c:	bl	3ec <GOMP_loop_static_start>
     680:	and	w0, w0, #0xff
     684:	b	68c <GOMP_loop_maybe_nonmonotonic_runtime_start+0x120>
     688:	bl	0 <abort>
     68c:	ldp	x29, x30, [sp], #80
     690:	ret

0000000000000694 <gomp_adjust_sched>:
     694:	stp	x29, x30, [sp, #-48]!
     698:	mov	x29, sp
     69c:	str	x0, [sp, #24]
     6a0:	str	x1, [sp, #16]
     6a4:	ldr	x0, [sp, #24]
     6a8:	and	x0, x0, #0x7fffffff
     6ac:	str	x0, [sp, #24]
     6b0:	ldr	x0, [sp, #24]
     6b4:	cmp	x0, #0x4
     6b8:	b.eq	6f8 <gomp_adjust_sched+0x64>  // b.none
     6bc:	ldr	x0, [sp, #24]
     6c0:	cmp	x0, #0x4
     6c4:	b.gt	77c <gomp_adjust_sched+0xe8>
     6c8:	ldr	x0, [sp, #24]
     6cc:	cmp	x0, #0x0
     6d0:	b.eq	6f8 <gomp_adjust_sched+0x64>  // b.none
     6d4:	ldr	x0, [sp, #24]
     6d8:	cmp	x0, #0x0
     6dc:	b.lt	77c <gomp_adjust_sched+0xe8>  // b.tstop
     6e0:	ldr	x0, [sp, #24]
     6e4:	sub	x0, x0, #0x1
     6e8:	cmp	x0, #0x2
     6ec:	b.hi	77c <gomp_adjust_sched+0xe8>  // b.pmore
     6f0:	ldr	x0, [sp, #24]
     6f4:	b	780 <gomp_adjust_sched+0xec>
     6f8:	mov	w0, #0x0                   	// #0
     6fc:	bl	11c <gomp_icv>
     700:	str	x0, [sp, #40]
     704:	ldr	x0, [sp, #40]
     708:	ldr	w0, [x0, #8]
     70c:	mov	w0, w0
     710:	and	x0, x0, #0x7fffffff
     714:	str	x0, [sp, #24]
     718:	ldr	x0, [sp, #24]
     71c:	cmp	x0, #0x3
     720:	b.gt	734 <gomp_adjust_sched+0xa0>
     724:	ldr	x0, [sp, #24]
     728:	cmp	x0, #0x0
     72c:	b.gt	744 <gomp_adjust_sched+0xb0>
     730:	b	770 <gomp_adjust_sched+0xdc>
     734:	ldr	x0, [sp, #24]
     738:	cmp	x0, #0x4
     73c:	b.eq	75c <gomp_adjust_sched+0xc8>  // b.none
     740:	b	770 <gomp_adjust_sched+0xdc>
     744:	ldr	x0, [sp, #40]
     748:	ldr	w0, [x0, #12]
     74c:	sxtw	x1, w0
     750:	ldr	x0, [sp, #16]
     754:	str	x1, [x0]
     758:	b	774 <gomp_adjust_sched+0xe0>
     75c:	mov	x0, #0x1                   	// #1
     760:	str	x0, [sp, #24]
     764:	ldr	x0, [sp, #16]
     768:	str	xzr, [x0]
     76c:	b	774 <gomp_adjust_sched+0xe0>
     770:	bl	0 <abort>
     774:	ldr	x0, [sp, #24]
     778:	b	780 <gomp_adjust_sched+0xec>
     77c:	bl	0 <abort>
     780:	ldp	x29, x30, [sp], #48
     784:	ret

0000000000000788 <GOMP_loop_start>:
     788:	stp	x29, x30, [sp, #-128]!
     78c:	mov	x29, sp
     790:	str	x19, [sp, #16]
     794:	str	x0, [sp, #88]
     798:	str	x1, [sp, #80]
     79c:	str	x2, [sp, #72]
     7a0:	str	x3, [sp, #64]
     7a4:	str	x4, [sp, #56]
     7a8:	str	x5, [sp, #48]
     7ac:	str	x6, [sp, #40]
     7b0:	str	x7, [sp, #32]
     7b4:	bl	108 <gomp_thread>
     7b8:	str	x0, [sp, #120]
     7bc:	ldr	x0, [sp, #120]
     7c0:	str	xzr, [x0, #72]
     7c4:	ldr	x0, [sp, #32]
     7c8:	cmp	x0, #0x0
     7cc:	b.eq	7d4 <GOMP_loop_start+0x4c>  // b.none
     7d0:	bl	0 <gomp_workshare_taskgroup_start>
     7d4:	mov	x0, #0x0                   	// #0
     7d8:	bl	0 <gomp_work_share_start>
     7dc:	and	w0, w0, #0xff
     7e0:	cmp	w0, #0x0
     7e4:	b.eq	8d4 <GOMP_loop_start+0x14c>  // b.none
     7e8:	add	x0, sp, #0x38
     7ec:	mov	x1, x0
     7f0:	ldr	x0, [sp, #64]
     7f4:	bl	694 <gomp_adjust_sched>
     7f8:	str	x0, [sp, #64]
     7fc:	ldr	x0, [sp, #120]
     800:	ldr	x0, [x0, #24]
     804:	ldr	x1, [sp, #64]
     808:	mov	w2, w1
     80c:	ldr	x1, [sp, #56]
     810:	mov	x5, x1
     814:	mov	w4, w2
     818:	ldr	x3, [sp, #72]
     81c:	ldr	x2, [sp, #80]
     820:	ldr	x1, [sp, #88]
     824:	bl	1cc <gomp_loop_init>
     828:	ldr	x0, [sp, #32]
     82c:	cmp	x0, #0x0
     830:	b.eq	860 <GOMP_loop_start+0xd8>  // b.none
     834:	ldr	x0, [sp, #32]
     838:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     83c:	ldr	x0, [sp, #120]
     840:	ldr	x0, [x0, #80]
     844:	ldr	x0, [x0, #40]
     848:	mov	w1, #0x1                   	// #1
     84c:	strb	w1, [x0, #50]
     850:	ldr	x0, [sp, #120]
     854:	ldr	x0, [x0, #24]
     858:	ldr	x1, [sp, #32]
     85c:	str	x1, [x0, #88]
     860:	ldr	x0, [sp, #128]
     864:	cmp	x0, #0x0
     868:	b.eq	8cc <GOMP_loop_start+0x144>  // b.none
     86c:	ldr	x0, [sp, #128]
     870:	ldr	x0, [x0]
     874:	str	x0, [sp, #104]
     878:	ldr	x0, [sp, #104]
     87c:	cmp	x0, #0x20
     880:	b.ls	8a8 <GOMP_loop_start+0x120>  // b.plast
     884:	ldr	x0, [sp, #120]
     888:	ldr	x19, [x0, #24]
     88c:	ldr	x0, [sp, #104]
     890:	bl	0 <gomp_malloc_cleared>
     894:	str	x0, [x19, #32]
     898:	ldr	x1, [x19, #32]
     89c:	ldr	x0, [sp, #128]
     8a0:	str	x1, [x0]
     8a4:	b	8cc <GOMP_loop_start+0x144>
     8a8:	ldr	x0, [sp, #120]
     8ac:	ldr	x0, [x0, #24]
     8b0:	add	x0, x0, #0x60
     8b4:	ldr	x2, [sp, #104]
     8b8:	mov	w1, #0x0                   	// #0
     8bc:	bl	0 <memset>
     8c0:	mov	x1, x0
     8c4:	ldr	x0, [sp, #128]
     8c8:	str	x1, [x0]
     8cc:	bl	170 <gomp_work_share_init_done>
     8d0:	b	91c <GOMP_loop_start+0x194>
     8d4:	ldr	x0, [sp, #32]
     8d8:	cmp	x0, #0x0
     8dc:	b.eq	8fc <GOMP_loop_start+0x174>  // b.none
     8e0:	ldr	x0, [sp, #120]
     8e4:	ldr	x0, [x0, #24]
     8e8:	ldr	x0, [x0, #88]
     8ec:	str	x0, [sp, #112]
     8f0:	ldr	x1, [sp, #112]
     8f4:	ldr	x0, [sp, #32]
     8f8:	bl	0 <gomp_workshare_task_reduction_register>
     8fc:	ldr	x0, [sp, #128]
     900:	cmp	x0, #0x0
     904:	b.eq	91c <GOMP_loop_start+0x194>  // b.none
     908:	ldr	x0, [sp, #120]
     90c:	ldr	x0, [x0, #24]
     910:	ldr	x1, [x0, #32]
     914:	ldr	x0, [sp, #128]
     918:	str	x1, [x0]
     91c:	ldr	x0, [sp, #48]
     920:	cmp	x0, #0x0
     924:	b.ne	930 <GOMP_loop_start+0x1a8>  // b.any
     928:	mov	w0, #0x1                   	// #1
     92c:	b	940 <GOMP_loop_start+0x1b8>
     930:	ldr	x1, [sp, #40]
     934:	ldr	x0, [sp, #48]
     938:	bl	1438 <GOMP_loop_maybe_nonmonotonic_runtime_next>
     93c:	and	w0, w0, #0xff
     940:	ldr	x19, [sp, #16]
     944:	ldp	x29, x30, [sp], #128
     948:	ret

000000000000094c <GOMP_loop_ordered_static_start>:
     94c:	stp	x29, x30, [sp, #-80]!
     950:	mov	x29, sp
     954:	str	x0, [sp, #56]
     958:	str	x1, [sp, #48]
     95c:	str	x2, [sp, #40]
     960:	str	x3, [sp, #32]
     964:	str	x4, [sp, #24]
     968:	str	x5, [sp, #16]
     96c:	bl	108 <gomp_thread>
     970:	str	x0, [sp, #72]
     974:	ldr	x0, [sp, #72]
     978:	str	xzr, [x0, #72]
     97c:	mov	x0, #0x1                   	// #1
     980:	bl	0 <gomp_work_share_start>
     984:	and	w0, w0, #0xff
     988:	cmp	w0, #0x0
     98c:	b.eq	9b8 <GOMP_loop_ordered_static_start+0x6c>  // b.none
     990:	ldr	x0, [sp, #72]
     994:	ldr	x0, [x0, #24]
     998:	ldr	x5, [sp, #32]
     99c:	mov	w4, #0x1                   	// #1
     9a0:	ldr	x3, [sp, #40]
     9a4:	ldr	x2, [sp, #48]
     9a8:	ldr	x1, [sp, #56]
     9ac:	bl	1cc <gomp_loop_init>
     9b0:	bl	0 <gomp_ordered_static_init>
     9b4:	bl	170 <gomp_work_share_init_done>
     9b8:	ldr	x1, [sp, #16]
     9bc:	ldr	x0, [sp, #24]
     9c0:	bl	0 <gomp_iter_static_next>
     9c4:	cmp	w0, #0x0
     9c8:	cset	w0, eq  // eq = none
     9cc:	and	w0, w0, #0xff
     9d0:	ldp	x29, x30, [sp], #80
     9d4:	ret

00000000000009d8 <GOMP_loop_ordered_dynamic_start>:
     9d8:	stp	x29, x30, [sp, #-80]!
     9dc:	mov	x29, sp
     9e0:	str	x0, [sp, #56]
     9e4:	str	x1, [sp, #48]
     9e8:	str	x2, [sp, #40]
     9ec:	str	x3, [sp, #32]
     9f0:	str	x4, [sp, #24]
     9f4:	str	x5, [sp, #16]
     9f8:	bl	108 <gomp_thread>
     9fc:	str	x0, [sp, #72]
     a00:	mov	x0, #0x1                   	// #1
     a04:	bl	0 <gomp_work_share_start>
     a08:	and	w0, w0, #0xff
     a0c:	cmp	w0, #0x0
     a10:	b.eq	a4c <GOMP_loop_ordered_dynamic_start+0x74>  // b.none
     a14:	ldr	x0, [sp, #72]
     a18:	ldr	x0, [x0, #24]
     a1c:	ldr	x5, [sp, #32]
     a20:	mov	w4, #0x2                   	// #2
     a24:	ldr	x3, [sp, #40]
     a28:	ldr	x2, [sp, #48]
     a2c:	ldr	x1, [sp, #56]
     a30:	bl	1cc <gomp_loop_init>
     a34:	ldr	x0, [sp, #72]
     a38:	ldr	x0, [x0, #24]
     a3c:	add	x0, x0, #0x40
     a40:	bl	0 <gomp_mutex_lock>
     a44:	bl	170 <gomp_work_share_init_done>
     a48:	b	a5c <GOMP_loop_ordered_dynamic_start+0x84>
     a4c:	ldr	x0, [sp, #72]
     a50:	ldr	x0, [x0, #24]
     a54:	add	x0, x0, #0x40
     a58:	bl	0 <gomp_mutex_lock>
     a5c:	ldr	x1, [sp, #16]
     a60:	ldr	x0, [sp, #24]
     a64:	bl	0 <gomp_iter_dynamic_next_locked>
     a68:	strb	w0, [sp, #71]
     a6c:	ldrb	w0, [sp, #71]
     a70:	cmp	w0, #0x0
     a74:	b.eq	a7c <GOMP_loop_ordered_dynamic_start+0xa4>  // b.none
     a78:	bl	0 <gomp_ordered_first>
     a7c:	ldr	x0, [sp, #72]
     a80:	ldr	x0, [x0, #24]
     a84:	add	x0, x0, #0x40
     a88:	bl	74 <gomp_mutex_unlock>
     a8c:	ldrb	w0, [sp, #71]
     a90:	ldp	x29, x30, [sp], #80
     a94:	ret

0000000000000a98 <GOMP_loop_ordered_guided_start>:
     a98:	stp	x29, x30, [sp, #-80]!
     a9c:	mov	x29, sp
     aa0:	str	x0, [sp, #56]
     aa4:	str	x1, [sp, #48]
     aa8:	str	x2, [sp, #40]
     aac:	str	x3, [sp, #32]
     ab0:	str	x4, [sp, #24]
     ab4:	str	x5, [sp, #16]
     ab8:	bl	108 <gomp_thread>
     abc:	str	x0, [sp, #72]
     ac0:	mov	x0, #0x1                   	// #1
     ac4:	bl	0 <gomp_work_share_start>
     ac8:	and	w0, w0, #0xff
     acc:	cmp	w0, #0x0
     ad0:	b.eq	b0c <GOMP_loop_ordered_guided_start+0x74>  // b.none
     ad4:	ldr	x0, [sp, #72]
     ad8:	ldr	x0, [x0, #24]
     adc:	ldr	x5, [sp, #32]
     ae0:	mov	w4, #0x3                   	// #3
     ae4:	ldr	x3, [sp, #40]
     ae8:	ldr	x2, [sp, #48]
     aec:	ldr	x1, [sp, #56]
     af0:	bl	1cc <gomp_loop_init>
     af4:	ldr	x0, [sp, #72]
     af8:	ldr	x0, [x0, #24]
     afc:	add	x0, x0, #0x40
     b00:	bl	0 <gomp_mutex_lock>
     b04:	bl	170 <gomp_work_share_init_done>
     b08:	b	b1c <GOMP_loop_ordered_guided_start+0x84>
     b0c:	ldr	x0, [sp, #72]
     b10:	ldr	x0, [x0, #24]
     b14:	add	x0, x0, #0x40
     b18:	bl	0 <gomp_mutex_lock>
     b1c:	ldr	x1, [sp, #16]
     b20:	ldr	x0, [sp, #24]
     b24:	bl	0 <gomp_iter_guided_next_locked>
     b28:	strb	w0, [sp, #71]
     b2c:	ldrb	w0, [sp, #71]
     b30:	cmp	w0, #0x0
     b34:	b.eq	b3c <GOMP_loop_ordered_guided_start+0xa4>  // b.none
     b38:	bl	0 <gomp_ordered_first>
     b3c:	ldr	x0, [sp, #72]
     b40:	ldr	x0, [x0, #24]
     b44:	add	x0, x0, #0x40
     b48:	bl	74 <gomp_mutex_unlock>
     b4c:	ldrb	w0, [sp, #71]
     b50:	ldp	x29, x30, [sp], #80
     b54:	ret

0000000000000b58 <GOMP_loop_ordered_runtime_start>:
     b58:	stp	x29, x30, [sp, #-80]!
     b5c:	mov	x29, sp
     b60:	str	x0, [sp, #56]
     b64:	str	x1, [sp, #48]
     b68:	str	x2, [sp, #40]
     b6c:	str	x3, [sp, #32]
     b70:	str	x4, [sp, #24]
     b74:	mov	w0, #0x0                   	// #0
     b78:	bl	11c <gomp_icv>
     b7c:	str	x0, [sp, #72]
     b80:	ldr	x0, [sp, #72]
     b84:	ldr	w0, [x0, #8]
     b88:	and	w0, w0, #0x7fffffff
     b8c:	cmp	w0, #0x4
     b90:	b.eq	c50 <GOMP_loop_ordered_runtime_start+0xf8>  // b.none
     b94:	cmp	w0, #0x4
     b98:	b.hi	c74 <GOMP_loop_ordered_runtime_start+0x11c>  // b.pmore
     b9c:	cmp	w0, #0x3
     ba0:	b.eq	c20 <GOMP_loop_ordered_runtime_start+0xc8>  // b.none
     ba4:	cmp	w0, #0x3
     ba8:	b.hi	c74 <GOMP_loop_ordered_runtime_start+0x11c>  // b.pmore
     bac:	cmp	w0, #0x1
     bb0:	b.eq	bc0 <GOMP_loop_ordered_runtime_start+0x68>  // b.none
     bb4:	cmp	w0, #0x2
     bb8:	b.eq	bf0 <GOMP_loop_ordered_runtime_start+0x98>  // b.none
     bbc:	b	c74 <GOMP_loop_ordered_runtime_start+0x11c>
     bc0:	ldr	x0, [sp, #72]
     bc4:	ldr	w0, [x0, #12]
     bc8:	sxtw	x0, w0
     bcc:	ldr	x5, [sp, #24]
     bd0:	ldr	x4, [sp, #32]
     bd4:	mov	x3, x0
     bd8:	ldr	x2, [sp, #40]
     bdc:	ldr	x1, [sp, #48]
     be0:	ldr	x0, [sp, #56]
     be4:	bl	94c <GOMP_loop_ordered_static_start>
     be8:	and	w0, w0, #0xff
     bec:	b	c78 <GOMP_loop_ordered_runtime_start+0x120>
     bf0:	ldr	x0, [sp, #72]
     bf4:	ldr	w0, [x0, #12]
     bf8:	sxtw	x0, w0
     bfc:	ldr	x5, [sp, #24]
     c00:	ldr	x4, [sp, #32]
     c04:	mov	x3, x0
     c08:	ldr	x2, [sp, #40]
     c0c:	ldr	x1, [sp, #48]
     c10:	ldr	x0, [sp, #56]
     c14:	bl	9d8 <GOMP_loop_ordered_dynamic_start>
     c18:	and	w0, w0, #0xff
     c1c:	b	c78 <GOMP_loop_ordered_runtime_start+0x120>
     c20:	ldr	x0, [sp, #72]
     c24:	ldr	w0, [x0, #12]
     c28:	sxtw	x0, w0
     c2c:	ldr	x5, [sp, #24]
     c30:	ldr	x4, [sp, #32]
     c34:	mov	x3, x0
     c38:	ldr	x2, [sp, #40]
     c3c:	ldr	x1, [sp, #48]
     c40:	ldr	x0, [sp, #56]
     c44:	bl	a98 <GOMP_loop_ordered_guided_start>
     c48:	and	w0, w0, #0xff
     c4c:	b	c78 <GOMP_loop_ordered_runtime_start+0x120>
     c50:	ldr	x5, [sp, #24]
     c54:	ldr	x4, [sp, #32]
     c58:	mov	x3, #0x0                   	// #0
     c5c:	ldr	x2, [sp, #40]
     c60:	ldr	x1, [sp, #48]
     c64:	ldr	x0, [sp, #56]
     c68:	bl	94c <GOMP_loop_ordered_static_start>
     c6c:	and	w0, w0, #0xff
     c70:	b	c78 <GOMP_loop_ordered_runtime_start+0x120>
     c74:	bl	0 <abort>
     c78:	ldp	x29, x30, [sp], #80
     c7c:	ret

0000000000000c80 <GOMP_loop_ordered_start>:
     c80:	stp	x29, x30, [sp, #-128]!
     c84:	mov	x29, sp
     c88:	str	x0, [sp, #72]
     c8c:	str	x1, [sp, #64]
     c90:	str	x2, [sp, #56]
     c94:	str	x3, [sp, #48]
     c98:	str	x4, [sp, #40]
     c9c:	str	x5, [sp, #32]
     ca0:	str	x6, [sp, #24]
     ca4:	str	x7, [sp, #16]
     ca8:	bl	108 <gomp_thread>
     cac:	str	x0, [sp, #104]
     cb0:	mov	x0, #0x1                   	// #1
     cb4:	str	x0, [sp, #120]
     cb8:	ldr	x0, [sp, #104]
     cbc:	str	xzr, [x0, #72]
     cc0:	ldr	x0, [sp, #16]
     cc4:	cmp	x0, #0x0
     cc8:	b.eq	cd0 <GOMP_loop_ordered_start+0x50>  // b.none
     ccc:	bl	0 <gomp_workshare_taskgroup_start>
     cd0:	ldr	x0, [sp, #128]
     cd4:	cmp	x0, #0x0
     cd8:	b.eq	cf4 <GOMP_loop_ordered_start+0x74>  // b.none
     cdc:	ldr	x0, [sp, #128]
     ce0:	ldr	x0, [x0]
     ce4:	mov	x1, x0
     ce8:	ldr	x0, [sp, #120]
     cec:	add	x0, x0, x1
     cf0:	str	x0, [sp, #120]
     cf4:	ldr	x0, [sp, #120]
     cf8:	bl	0 <gomp_work_share_start>
     cfc:	and	w0, w0, #0xff
     d00:	cmp	w0, #0x0
     d04:	b.eq	dac <GOMP_loop_ordered_start+0x12c>  // b.none
     d08:	add	x0, sp, #0x28
     d0c:	mov	x1, x0
     d10:	ldr	x0, [sp, #48]
     d14:	bl	694 <gomp_adjust_sched>
     d18:	str	x0, [sp, #48]
     d1c:	ldr	x0, [sp, #104]
     d20:	ldr	x0, [x0, #24]
     d24:	ldr	x1, [sp, #48]
     d28:	mov	w2, w1
     d2c:	ldr	x1, [sp, #40]
     d30:	mov	x5, x1
     d34:	mov	w4, w2
     d38:	ldr	x3, [sp, #56]
     d3c:	ldr	x2, [sp, #64]
     d40:	ldr	x1, [sp, #72]
     d44:	bl	1cc <gomp_loop_init>
     d48:	ldr	x0, [sp, #16]
     d4c:	cmp	x0, #0x0
     d50:	b.eq	d80 <GOMP_loop_ordered_start+0x100>  // b.none
     d54:	ldr	x0, [sp, #16]
     d58:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     d5c:	ldr	x0, [sp, #104]
     d60:	ldr	x0, [x0, #80]
     d64:	ldr	x0, [x0, #40]
     d68:	mov	w1, #0x1                   	// #1
     d6c:	strb	w1, [x0, #50]
     d70:	ldr	x0, [sp, #104]
     d74:	ldr	x0, [x0, #24]
     d78:	ldr	x1, [sp, #16]
     d7c:	str	x1, [x0, #88]
     d80:	ldr	x0, [sp, #48]
     d84:	cmp	x0, #0x1
     d88:	b.ne	d94 <GOMP_loop_ordered_start+0x114>  // b.any
     d8c:	bl	0 <gomp_ordered_static_init>
     d90:	b	da4 <GOMP_loop_ordered_start+0x124>
     d94:	ldr	x0, [sp, #104]
     d98:	ldr	x0, [x0, #24]
     d9c:	add	x0, x0, #0x40
     da0:	bl	0 <gomp_mutex_lock>
     da4:	bl	170 <gomp_work_share_init_done>
     da8:	b	e04 <GOMP_loop_ordered_start+0x184>
     dac:	ldr	x0, [sp, #16]
     db0:	cmp	x0, #0x0
     db4:	b.eq	dd4 <GOMP_loop_ordered_start+0x154>  // b.none
     db8:	ldr	x0, [sp, #104]
     dbc:	ldr	x0, [x0, #24]
     dc0:	ldr	x0, [x0, #88]
     dc4:	str	x0, [sp, #96]
     dc8:	ldr	x1, [sp, #96]
     dcc:	ldr	x0, [sp, #16]
     dd0:	bl	0 <gomp_workshare_task_reduction_register>
     dd4:	ldr	x0, [sp, #104]
     dd8:	ldr	x0, [x0, #24]
     ddc:	ldr	w0, [x0]
     de0:	mov	w0, w0
     de4:	str	x0, [sp, #48]
     de8:	ldr	x0, [sp, #48]
     dec:	cmp	x0, #0x1
     df0:	b.eq	e04 <GOMP_loop_ordered_start+0x184>  // b.none
     df4:	ldr	x0, [sp, #104]
     df8:	ldr	x0, [x0, #24]
     dfc:	add	x0, x0, #0x40
     e00:	bl	0 <gomp_mutex_lock>
     e04:	ldr	x0, [sp, #128]
     e08:	cmp	x0, #0x0
     e0c:	b.eq	e74 <GOMP_loop_ordered_start+0x1f4>  // b.none
     e10:	ldr	x0, [sp, #104]
     e14:	ldr	x0, [x0, #24]
     e18:	ldr	x1, [x0, #32]
     e1c:	ldr	x0, [sp, #104]
     e20:	ldr	x0, [x0, #16]
     e24:	cmp	x0, #0x0
     e28:	b.eq	e44 <GOMP_loop_ordered_start+0x1c4>  // b.none
     e2c:	ldr	x0, [sp, #104]
     e30:	ldr	x0, [x0, #16]
     e34:	ldr	w0, [x0]
     e38:	mov	w0, w0
     e3c:	lsl	x0, x0, #2
     e40:	b	e48 <GOMP_loop_ordered_start+0x1c8>
     e44:	mov	x0, #0x4                   	// #4
     e48:	add	x0, x1, x0
     e4c:	str	x0, [sp, #88]
     e50:	ldr	x0, [sp, #88]
     e54:	add	x0, x0, #0x7
     e58:	str	x0, [sp, #88]
     e5c:	ldr	x0, [sp, #88]
     e60:	and	x0, x0, #0xfffffffffffffff8
     e64:	str	x0, [sp, #88]
     e68:	ldr	x1, [sp, #88]
     e6c:	ldr	x0, [sp, #128]
     e70:	str	x1, [x0]
     e74:	ldr	x0, [sp, #48]
     e78:	cmp	x0, #0x4
     e7c:	b.eq	ec0 <GOMP_loop_ordered_start+0x240>  // b.none
     e80:	ldr	x0, [sp, #48]
     e84:	cmp	x0, #0x4
     e88:	b.gt	f04 <GOMP_loop_ordered_start+0x284>
     e8c:	ldr	x0, [sp, #48]
     e90:	cmp	x0, #0x3
     e94:	b.eq	ef0 <GOMP_loop_ordered_start+0x270>  // b.none
     e98:	ldr	x0, [sp, #48]
     e9c:	cmp	x0, #0x3
     ea0:	b.gt	f04 <GOMP_loop_ordered_start+0x284>
     ea4:	ldr	x0, [sp, #48]
     ea8:	cmp	x0, #0x1
     eac:	b.eq	ec0 <GOMP_loop_ordered_start+0x240>  // b.none
     eb0:	ldr	x0, [sp, #48]
     eb4:	cmp	x0, #0x2
     eb8:	b.eq	edc <GOMP_loop_ordered_start+0x25c>  // b.none
     ebc:	b	f04 <GOMP_loop_ordered_start+0x284>
     ec0:	ldr	x1, [sp, #24]
     ec4:	ldr	x0, [sp, #32]
     ec8:	bl	0 <gomp_iter_static_next>
     ecc:	cmp	w0, #0x0
     ed0:	cset	w0, eq  // eq = none
     ed4:	and	w0, w0, #0xff
     ed8:	b	f2c <GOMP_loop_ordered_start+0x2ac>
     edc:	ldr	x1, [sp, #24]
     ee0:	ldr	x0, [sp, #32]
     ee4:	bl	0 <gomp_iter_dynamic_next_locked>
     ee8:	strb	w0, [sp, #119]
     eec:	b	f08 <GOMP_loop_ordered_start+0x288>
     ef0:	ldr	x1, [sp, #24]
     ef4:	ldr	x0, [sp, #32]
     ef8:	bl	0 <gomp_iter_guided_next_locked>
     efc:	strb	w0, [sp, #119]
     f00:	b	f08 <GOMP_loop_ordered_start+0x288>
     f04:	bl	0 <abort>
     f08:	ldrb	w0, [sp, #119]
     f0c:	cmp	w0, #0x0
     f10:	b.eq	f18 <GOMP_loop_ordered_start+0x298>  // b.none
     f14:	bl	0 <gomp_ordered_first>
     f18:	ldr	x0, [sp, #104]
     f1c:	ldr	x0, [x0, #24]
     f20:	add	x0, x0, #0x40
     f24:	bl	74 <gomp_mutex_unlock>
     f28:	ldrb	w0, [sp, #119]
     f2c:	ldp	x29, x30, [sp], #128
     f30:	ret

0000000000000f34 <GOMP_loop_doacross_static_start>:
     f34:	stp	x29, x30, [sp, #-80]!
     f38:	mov	x29, sp
     f3c:	str	w0, [sp, #60]
     f40:	str	x1, [sp, #48]
     f44:	str	x2, [sp, #40]
     f48:	str	x3, [sp, #32]
     f4c:	str	x4, [sp, #24]
     f50:	bl	108 <gomp_thread>
     f54:	str	x0, [sp, #72]
     f58:	ldr	x0, [sp, #72]
     f5c:	str	xzr, [x0, #72]
     f60:	mov	x0, #0x0                   	// #0
     f64:	bl	0 <gomp_work_share_start>
     f68:	and	w0, w0, #0xff
     f6c:	cmp	w0, #0x0
     f70:	b.eq	fb8 <GOMP_loop_doacross_static_start+0x84>  // b.none
     f74:	ldr	x0, [sp, #72]
     f78:	ldr	x6, [x0, #24]
     f7c:	ldr	x0, [sp, #48]
     f80:	ldr	x0, [x0]
     f84:	ldr	x5, [sp, #40]
     f88:	mov	w4, #0x1                   	// #1
     f8c:	mov	x3, #0x1                   	// #1
     f90:	mov	x2, x0
     f94:	mov	x1, #0x0                   	// #0
     f98:	mov	x0, x6
     f9c:	bl	1cc <gomp_loop_init>
     fa0:	mov	x3, #0x0                   	// #0
     fa4:	ldr	x2, [sp, #40]
     fa8:	ldr	x1, [sp, #48]
     fac:	ldr	w0, [sp, #60]
     fb0:	bl	0 <gomp_doacross_init>
     fb4:	bl	170 <gomp_work_share_init_done>
     fb8:	ldr	x1, [sp, #24]
     fbc:	ldr	x0, [sp, #32]
     fc0:	bl	0 <gomp_iter_static_next>
     fc4:	cmp	w0, #0x0
     fc8:	cset	w0, eq  // eq = none
     fcc:	and	w0, w0, #0xff
     fd0:	ldp	x29, x30, [sp], #80
     fd4:	ret

0000000000000fd8 <GOMP_loop_doacross_dynamic_start>:
     fd8:	stp	x29, x30, [sp, #-80]!
     fdc:	mov	x29, sp
     fe0:	str	w0, [sp, #60]
     fe4:	str	x1, [sp, #48]
     fe8:	str	x2, [sp, #40]
     fec:	str	x3, [sp, #32]
     ff0:	str	x4, [sp, #24]
     ff4:	bl	108 <gomp_thread>
     ff8:	str	x0, [sp, #72]
     ffc:	mov	x0, #0x0                   	// #0
    1000:	bl	0 <gomp_work_share_start>
    1004:	and	w0, w0, #0xff
    1008:	cmp	w0, #0x0
    100c:	b.eq	1054 <GOMP_loop_doacross_dynamic_start+0x7c>  // b.none
    1010:	ldr	x0, [sp, #72]
    1014:	ldr	x6, [x0, #24]
    1018:	ldr	x0, [sp, #48]
    101c:	ldr	x0, [x0]
    1020:	ldr	x5, [sp, #40]
    1024:	mov	w4, #0x2                   	// #2
    1028:	mov	x3, #0x1                   	// #1
    102c:	mov	x2, x0
    1030:	mov	x1, #0x0                   	// #0
    1034:	mov	x0, x6
    1038:	bl	1cc <gomp_loop_init>
    103c:	mov	x3, #0x0                   	// #0
    1040:	ldr	x2, [sp, #40]
    1044:	ldr	x1, [sp, #48]
    1048:	ldr	w0, [sp, #60]
    104c:	bl	0 <gomp_doacross_init>
    1050:	bl	170 <gomp_work_share_init_done>
    1054:	ldr	x1, [sp, #24]
    1058:	ldr	x0, [sp, #32]
    105c:	bl	0 <gomp_iter_dynamic_next>
    1060:	strb	w0, [sp, #71]
    1064:	ldrb	w0, [sp, #71]
    1068:	ldp	x29, x30, [sp], #80
    106c:	ret

0000000000001070 <GOMP_loop_doacross_guided_start>:
    1070:	stp	x29, x30, [sp, #-80]!
    1074:	mov	x29, sp
    1078:	str	w0, [sp, #60]
    107c:	str	x1, [sp, #48]
    1080:	str	x2, [sp, #40]
    1084:	str	x3, [sp, #32]
    1088:	str	x4, [sp, #24]
    108c:	bl	108 <gomp_thread>
    1090:	str	x0, [sp, #72]
    1094:	mov	x0, #0x0                   	// #0
    1098:	bl	0 <gomp_work_share_start>
    109c:	and	w0, w0, #0xff
    10a0:	cmp	w0, #0x0
    10a4:	b.eq	10ec <GOMP_loop_doacross_guided_start+0x7c>  // b.none
    10a8:	ldr	x0, [sp, #72]
    10ac:	ldr	x6, [x0, #24]
    10b0:	ldr	x0, [sp, #48]
    10b4:	ldr	x0, [x0]
    10b8:	ldr	x5, [sp, #40]
    10bc:	mov	w4, #0x3                   	// #3
    10c0:	mov	x3, #0x1                   	// #1
    10c4:	mov	x2, x0
    10c8:	mov	x1, #0x0                   	// #0
    10cc:	mov	x0, x6
    10d0:	bl	1cc <gomp_loop_init>
    10d4:	mov	x3, #0x0                   	// #0
    10d8:	ldr	x2, [sp, #40]
    10dc:	ldr	x1, [sp, #48]
    10e0:	ldr	w0, [sp, #60]
    10e4:	bl	0 <gomp_doacross_init>
    10e8:	bl	170 <gomp_work_share_init_done>
    10ec:	ldr	x1, [sp, #24]
    10f0:	ldr	x0, [sp, #32]
    10f4:	bl	0 <gomp_iter_guided_next>
    10f8:	strb	w0, [sp, #71]
    10fc:	ldrb	w0, [sp, #71]
    1100:	ldp	x29, x30, [sp], #80
    1104:	ret

0000000000001108 <GOMP_loop_doacross_runtime_start>:
    1108:	stp	x29, x30, [sp, #-64]!
    110c:	mov	x29, sp
    1110:	str	w0, [sp, #44]
    1114:	str	x1, [sp, #32]
    1118:	str	x2, [sp, #24]
    111c:	str	x3, [sp, #16]
    1120:	mov	w0, #0x0                   	// #0
    1124:	bl	11c <gomp_icv>
    1128:	str	x0, [sp, #56]
    112c:	ldr	x0, [sp, #56]
    1130:	ldr	w0, [x0, #8]
    1134:	and	w0, w0, #0x7fffffff
    1138:	cmp	w0, #0x4
    113c:	b.eq	11f0 <GOMP_loop_doacross_runtime_start+0xe8>  // b.none
    1140:	cmp	w0, #0x4
    1144:	b.hi	1210 <GOMP_loop_doacross_runtime_start+0x108>  // b.pmore
    1148:	cmp	w0, #0x3
    114c:	b.eq	11c4 <GOMP_loop_doacross_runtime_start+0xbc>  // b.none
    1150:	cmp	w0, #0x3
    1154:	b.hi	1210 <GOMP_loop_doacross_runtime_start+0x108>  // b.pmore
    1158:	cmp	w0, #0x1
    115c:	b.eq	116c <GOMP_loop_doacross_runtime_start+0x64>  // b.none
    1160:	cmp	w0, #0x2
    1164:	b.eq	1198 <GOMP_loop_doacross_runtime_start+0x90>  // b.none
    1168:	b	1210 <GOMP_loop_doacross_runtime_start+0x108>
    116c:	ldr	x0, [sp, #56]
    1170:	ldr	w0, [x0, #12]
    1174:	sxtw	x0, w0
    1178:	ldr	x4, [sp, #16]
    117c:	ldr	x3, [sp, #24]
    1180:	mov	x2, x0
    1184:	ldr	x1, [sp, #32]
    1188:	ldr	w0, [sp, #44]
    118c:	bl	f34 <GOMP_loop_doacross_static_start>
    1190:	and	w0, w0, #0xff
    1194:	b	1214 <GOMP_loop_doacross_runtime_start+0x10c>
    1198:	ldr	x0, [sp, #56]
    119c:	ldr	w0, [x0, #12]
    11a0:	sxtw	x0, w0
    11a4:	ldr	x4, [sp, #16]
    11a8:	ldr	x3, [sp, #24]
    11ac:	mov	x2, x0
    11b0:	ldr	x1, [sp, #32]
    11b4:	ldr	w0, [sp, #44]
    11b8:	bl	fd8 <GOMP_loop_doacross_dynamic_start>
    11bc:	and	w0, w0, #0xff
    11c0:	b	1214 <GOMP_loop_doacross_runtime_start+0x10c>
    11c4:	ldr	x0, [sp, #56]
    11c8:	ldr	w0, [x0, #12]
    11cc:	sxtw	x0, w0
    11d0:	ldr	x4, [sp, #16]
    11d4:	ldr	x3, [sp, #24]
    11d8:	mov	x2, x0
    11dc:	ldr	x1, [sp, #32]
    11e0:	ldr	w0, [sp, #44]
    11e4:	bl	1070 <GOMP_loop_doacross_guided_start>
    11e8:	and	w0, w0, #0xff
    11ec:	b	1214 <GOMP_loop_doacross_runtime_start+0x10c>
    11f0:	ldr	x4, [sp, #16]
    11f4:	ldr	x3, [sp, #24]
    11f8:	mov	x2, #0x0                   	// #0
    11fc:	ldr	x1, [sp, #32]
    1200:	ldr	w0, [sp, #44]
    1204:	bl	f34 <GOMP_loop_doacross_static_start>
    1208:	and	w0, w0, #0xff
    120c:	b	1214 <GOMP_loop_doacross_runtime_start+0x10c>
    1210:	bl	0 <abort>
    1214:	ldp	x29, x30, [sp], #64
    1218:	ret

000000000000121c <GOMP_loop_doacross_start>:
    121c:	stp	x29, x30, [sp, #-112]!
    1220:	mov	x29, sp
    1224:	str	w0, [sp, #76]
    1228:	str	x1, [sp, #64]
    122c:	str	x2, [sp, #56]
    1230:	str	x3, [sp, #48]
    1234:	str	x4, [sp, #40]
    1238:	str	x5, [sp, #32]
    123c:	str	x6, [sp, #24]
    1240:	str	x7, [sp, #16]
    1244:	bl	108 <gomp_thread>
    1248:	str	x0, [sp, #96]
    124c:	ldr	x0, [sp, #96]
    1250:	str	xzr, [x0, #72]
    1254:	ldr	x0, [sp, #24]
    1258:	cmp	x0, #0x0
    125c:	b.eq	1264 <GOMP_loop_doacross_start+0x48>  // b.none
    1260:	bl	0 <gomp_workshare_taskgroup_start>
    1264:	mov	x0, #0x0                   	// #0
    1268:	bl	0 <gomp_work_share_start>
    126c:	and	w0, w0, #0xff
    1270:	cmp	w0, #0x0
    1274:	b.eq	1338 <GOMP_loop_doacross_start+0x11c>  // b.none
    1278:	str	xzr, [sp, #104]
    127c:	ldr	x0, [sp, #16]
    1280:	cmp	x0, #0x0
    1284:	b.eq	1294 <GOMP_loop_doacross_start+0x78>  // b.none
    1288:	ldr	x0, [sp, #16]
    128c:	ldr	x0, [x0]
    1290:	str	x0, [sp, #104]
    1294:	add	x0, sp, #0x30
    1298:	mov	x1, x0
    129c:	ldr	x0, [sp, #56]
    12a0:	bl	694 <gomp_adjust_sched>
    12a4:	str	x0, [sp, #56]
    12a8:	ldr	x0, [sp, #96]
    12ac:	ldr	x6, [x0, #24]
    12b0:	ldr	x0, [sp, #64]
    12b4:	ldr	x0, [x0]
    12b8:	ldr	x1, [sp, #56]
    12bc:	mov	w2, w1
    12c0:	ldr	x1, [sp, #48]
    12c4:	mov	x5, x1
    12c8:	mov	w4, w2
    12cc:	mov	x3, #0x1                   	// #1
    12d0:	mov	x2, x0
    12d4:	mov	x1, #0x0                   	// #0
    12d8:	mov	x0, x6
    12dc:	bl	1cc <gomp_loop_init>
    12e0:	ldr	x0, [sp, #48]
    12e4:	ldr	x3, [sp, #104]
    12e8:	mov	x2, x0
    12ec:	ldr	x1, [sp, #64]
    12f0:	ldr	w0, [sp, #76]
    12f4:	bl	0 <gomp_doacross_init>
    12f8:	ldr	x0, [sp, #24]
    12fc:	cmp	x0, #0x0
    1300:	b.eq	1330 <GOMP_loop_doacross_start+0x114>  // b.none
    1304:	ldr	x0, [sp, #24]
    1308:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    130c:	ldr	x0, [sp, #96]
    1310:	ldr	x0, [x0, #80]
    1314:	ldr	x0, [x0, #40]
    1318:	mov	w1, #0x1                   	// #1
    131c:	strb	w1, [x0, #50]
    1320:	ldr	x0, [sp, #96]
    1324:	ldr	x0, [x0, #24]
    1328:	ldr	x1, [sp, #24]
    132c:	str	x1, [x0, #88]
    1330:	bl	170 <gomp_work_share_init_done>
    1334:	b	1374 <GOMP_loop_doacross_start+0x158>
    1338:	ldr	x0, [sp, #24]
    133c:	cmp	x0, #0x0
    1340:	b.eq	1360 <GOMP_loop_doacross_start+0x144>  // b.none
    1344:	ldr	x0, [sp, #96]
    1348:	ldr	x0, [x0, #24]
    134c:	ldr	x0, [x0, #88]
    1350:	str	x0, [sp, #88]
    1354:	ldr	x1, [sp, #88]
    1358:	ldr	x0, [sp, #24]
    135c:	bl	0 <gomp_workshare_task_reduction_register>
    1360:	ldr	x0, [sp, #96]
    1364:	ldr	x0, [x0, #24]
    1368:	ldr	w0, [x0]
    136c:	mov	w0, w0
    1370:	str	x0, [sp, #56]
    1374:	ldr	x0, [sp, #16]
    1378:	cmp	x0, #0x0
    137c:	b.eq	1398 <GOMP_loop_doacross_start+0x17c>  // b.none
    1380:	ldr	x0, [sp, #96]
    1384:	ldr	x0, [x0, #24]
    1388:	ldr	x0, [x0, #32]
    138c:	ldr	x1, [x0, #48]
    1390:	ldr	x0, [sp, #16]
    1394:	str	x1, [x0]
    1398:	ldr	x1, [sp, #32]
    139c:	ldr	x0, [sp, #40]
    13a0:	bl	1438 <GOMP_loop_maybe_nonmonotonic_runtime_next>
    13a4:	and	w0, w0, #0xff
    13a8:	ldp	x29, x30, [sp], #112
    13ac:	ret

00000000000013b0 <GOMP_loop_static_next>:
    13b0:	stp	x29, x30, [sp, #-32]!
    13b4:	mov	x29, sp
    13b8:	str	x0, [sp, #24]
    13bc:	str	x1, [sp, #16]
    13c0:	ldr	x1, [sp, #16]
    13c4:	ldr	x0, [sp, #24]
    13c8:	bl	0 <gomp_iter_static_next>
    13cc:	cmp	w0, #0x0
    13d0:	cset	w0, eq  // eq = none
    13d4:	and	w0, w0, #0xff
    13d8:	ldp	x29, x30, [sp], #32
    13dc:	ret

00000000000013e0 <GOMP_loop_dynamic_next>:
    13e0:	stp	x29, x30, [sp, #-48]!
    13e4:	mov	x29, sp
    13e8:	str	x0, [sp, #24]
    13ec:	str	x1, [sp, #16]
    13f0:	ldr	x1, [sp, #16]
    13f4:	ldr	x0, [sp, #24]
    13f8:	bl	0 <gomp_iter_dynamic_next>
    13fc:	strb	w0, [sp, #47]
    1400:	ldrb	w0, [sp, #47]
    1404:	ldp	x29, x30, [sp], #48
    1408:	ret

000000000000140c <GOMP_loop_guided_next>:
    140c:	stp	x29, x30, [sp, #-48]!
    1410:	mov	x29, sp
    1414:	str	x0, [sp, #24]
    1418:	str	x1, [sp, #16]
    141c:	ldr	x1, [sp, #16]
    1420:	ldr	x0, [sp, #24]
    1424:	bl	0 <gomp_iter_guided_next>
    1428:	strb	w0, [sp, #47]
    142c:	ldrb	w0, [sp, #47]
    1430:	ldp	x29, x30, [sp], #48
    1434:	ret

0000000000001438 <GOMP_loop_maybe_nonmonotonic_runtime_next>:
    1438:	stp	x29, x30, [sp, #-48]!
    143c:	mov	x29, sp
    1440:	str	x0, [sp, #24]
    1444:	str	x1, [sp, #16]
    1448:	bl	108 <gomp_thread>
    144c:	str	x0, [sp, #40]
    1450:	ldr	x0, [sp, #40]
    1454:	ldr	x0, [x0, #24]
    1458:	ldr	w0, [x0]
    145c:	cmp	w0, #0x4
    1460:	b.eq	1490 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x58>  // b.none
    1464:	cmp	w0, #0x4
    1468:	b.hi	14cc <GOMP_loop_maybe_nonmonotonic_runtime_next+0x94>  // b.pmore
    146c:	cmp	w0, #0x3
    1470:	b.eq	14b8 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x80>  // b.none
    1474:	cmp	w0, #0x3
    1478:	b.hi	14cc <GOMP_loop_maybe_nonmonotonic_runtime_next+0x94>  // b.pmore
    147c:	cmp	w0, #0x1
    1480:	b.eq	1490 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x58>  // b.none
    1484:	cmp	w0, #0x2
    1488:	b.eq	14a4 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x6c>  // b.none
    148c:	b	14cc <GOMP_loop_maybe_nonmonotonic_runtime_next+0x94>
    1490:	ldr	x1, [sp, #16]
    1494:	ldr	x0, [sp, #24]
    1498:	bl	13b0 <GOMP_loop_static_next>
    149c:	and	w0, w0, #0xff
    14a0:	b	14d0 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x98>
    14a4:	ldr	x1, [sp, #16]
    14a8:	ldr	x0, [sp, #24]
    14ac:	bl	13e0 <GOMP_loop_dynamic_next>
    14b0:	and	w0, w0, #0xff
    14b4:	b	14d0 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x98>
    14b8:	ldr	x1, [sp, #16]
    14bc:	ldr	x0, [sp, #24]
    14c0:	bl	140c <GOMP_loop_guided_next>
    14c4:	and	w0, w0, #0xff
    14c8:	b	14d0 <GOMP_loop_maybe_nonmonotonic_runtime_next+0x98>
    14cc:	bl	0 <abort>
    14d0:	ldp	x29, x30, [sp], #48
    14d4:	ret

00000000000014d8 <GOMP_loop_ordered_static_next>:
    14d8:	stp	x29, x30, [sp, #-48]!
    14dc:	mov	x29, sp
    14e0:	str	x0, [sp, #24]
    14e4:	str	x1, [sp, #16]
    14e8:	bl	108 <gomp_thread>
    14ec:	str	x0, [sp, #40]
    14f0:	bl	0 <gomp_ordered_sync>
    14f4:	ldr	x0, [sp, #40]
    14f8:	ldr	x0, [x0, #24]
    14fc:	add	x0, x0, #0x40
    1500:	bl	0 <gomp_mutex_lock>
    1504:	ldr	x1, [sp, #16]
    1508:	ldr	x0, [sp, #24]
    150c:	bl	0 <gomp_iter_static_next>
    1510:	str	w0, [sp, #36]
    1514:	ldr	w0, [sp, #36]
    1518:	cmp	w0, #0x0
    151c:	b.lt	1524 <GOMP_loop_ordered_static_next+0x4c>  // b.tstop
    1520:	bl	0 <gomp_ordered_static_next>
    1524:	ldr	x0, [sp, #40]
    1528:	ldr	x0, [x0, #24]
    152c:	add	x0, x0, #0x40
    1530:	bl	74 <gomp_mutex_unlock>
    1534:	ldr	w0, [sp, #36]
    1538:	cmp	w0, #0x0
    153c:	cset	w0, eq  // eq = none
    1540:	and	w0, w0, #0xff
    1544:	ldp	x29, x30, [sp], #48
    1548:	ret

000000000000154c <GOMP_loop_ordered_dynamic_next>:
    154c:	stp	x29, x30, [sp, #-48]!
    1550:	mov	x29, sp
    1554:	str	x0, [sp, #24]
    1558:	str	x1, [sp, #16]
    155c:	bl	108 <gomp_thread>
    1560:	str	x0, [sp, #40]
    1564:	bl	0 <gomp_ordered_sync>
    1568:	ldr	x0, [sp, #40]
    156c:	ldr	x0, [x0, #24]
    1570:	add	x0, x0, #0x40
    1574:	bl	0 <gomp_mutex_lock>
    1578:	ldr	x1, [sp, #16]
    157c:	ldr	x0, [sp, #24]
    1580:	bl	0 <gomp_iter_dynamic_next_locked>
    1584:	strb	w0, [sp, #39]
    1588:	ldrb	w0, [sp, #39]
    158c:	cmp	w0, #0x0
    1590:	b.eq	159c <GOMP_loop_ordered_dynamic_next+0x50>  // b.none
    1594:	bl	0 <gomp_ordered_next>
    1598:	b	15a0 <GOMP_loop_ordered_dynamic_next+0x54>
    159c:	bl	0 <gomp_ordered_last>
    15a0:	ldr	x0, [sp, #40]
    15a4:	ldr	x0, [x0, #24]
    15a8:	add	x0, x0, #0x40
    15ac:	bl	74 <gomp_mutex_unlock>
    15b0:	ldrb	w0, [sp, #39]
    15b4:	ldp	x29, x30, [sp], #48
    15b8:	ret

00000000000015bc <GOMP_loop_ordered_guided_next>:
    15bc:	stp	x29, x30, [sp, #-48]!
    15c0:	mov	x29, sp
    15c4:	str	x0, [sp, #24]
    15c8:	str	x1, [sp, #16]
    15cc:	bl	108 <gomp_thread>
    15d0:	str	x0, [sp, #40]
    15d4:	bl	0 <gomp_ordered_sync>
    15d8:	ldr	x0, [sp, #40]
    15dc:	ldr	x0, [x0, #24]
    15e0:	add	x0, x0, #0x40
    15e4:	bl	0 <gomp_mutex_lock>
    15e8:	ldr	x1, [sp, #16]
    15ec:	ldr	x0, [sp, #24]
    15f0:	bl	0 <gomp_iter_guided_next_locked>
    15f4:	strb	w0, [sp, #39]
    15f8:	ldrb	w0, [sp, #39]
    15fc:	cmp	w0, #0x0
    1600:	b.eq	160c <GOMP_loop_ordered_guided_next+0x50>  // b.none
    1604:	bl	0 <gomp_ordered_next>
    1608:	b	1610 <GOMP_loop_ordered_guided_next+0x54>
    160c:	bl	0 <gomp_ordered_last>
    1610:	ldr	x0, [sp, #40]
    1614:	ldr	x0, [x0, #24]
    1618:	add	x0, x0, #0x40
    161c:	bl	74 <gomp_mutex_unlock>
    1620:	ldrb	w0, [sp, #39]
    1624:	ldp	x29, x30, [sp], #48
    1628:	ret

000000000000162c <GOMP_loop_ordered_runtime_next>:
    162c:	stp	x29, x30, [sp, #-48]!
    1630:	mov	x29, sp
    1634:	str	x0, [sp, #24]
    1638:	str	x1, [sp, #16]
    163c:	bl	108 <gomp_thread>
    1640:	str	x0, [sp, #40]
    1644:	ldr	x0, [sp, #40]
    1648:	ldr	x0, [x0, #24]
    164c:	ldr	w0, [x0]
    1650:	cmp	w0, #0x4
    1654:	b.eq	1684 <GOMP_loop_ordered_runtime_next+0x58>  // b.none
    1658:	cmp	w0, #0x4
    165c:	b.hi	16c0 <GOMP_loop_ordered_runtime_next+0x94>  // b.pmore
    1660:	cmp	w0, #0x3
    1664:	b.eq	16ac <GOMP_loop_ordered_runtime_next+0x80>  // b.none
    1668:	cmp	w0, #0x3
    166c:	b.hi	16c0 <GOMP_loop_ordered_runtime_next+0x94>  // b.pmore
    1670:	cmp	w0, #0x1
    1674:	b.eq	1684 <GOMP_loop_ordered_runtime_next+0x58>  // b.none
    1678:	cmp	w0, #0x2
    167c:	b.eq	1698 <GOMP_loop_ordered_runtime_next+0x6c>  // b.none
    1680:	b	16c0 <GOMP_loop_ordered_runtime_next+0x94>
    1684:	ldr	x1, [sp, #16]
    1688:	ldr	x0, [sp, #24]
    168c:	bl	14d8 <GOMP_loop_ordered_static_next>
    1690:	and	w0, w0, #0xff
    1694:	b	16c4 <GOMP_loop_ordered_runtime_next+0x98>
    1698:	ldr	x1, [sp, #16]
    169c:	ldr	x0, [sp, #24]
    16a0:	bl	154c <GOMP_loop_ordered_dynamic_next>
    16a4:	and	w0, w0, #0xff
    16a8:	b	16c4 <GOMP_loop_ordered_runtime_next+0x98>
    16ac:	ldr	x1, [sp, #16]
    16b0:	ldr	x0, [sp, #24]
    16b4:	bl	15bc <GOMP_loop_ordered_guided_next>
    16b8:	and	w0, w0, #0xff
    16bc:	b	16c4 <GOMP_loop_ordered_runtime_next+0x98>
    16c0:	bl	0 <abort>
    16c4:	ldp	x29, x30, [sp], #48
    16c8:	ret

00000000000016cc <gomp_parallel_loop_start>:
    16cc:	stp	x29, x30, [sp, #-96]!
    16d0:	mov	x29, sp
    16d4:	str	x0, [sp, #72]
    16d8:	str	x1, [sp, #64]
    16dc:	str	w2, [sp, #60]
    16e0:	str	x3, [sp, #48]
    16e4:	str	x4, [sp, #40]
    16e8:	str	x5, [sp, #32]
    16ec:	str	w6, [sp, #56]
    16f0:	str	x7, [sp, #24]
    16f4:	mov	w1, #0x0                   	// #0
    16f8:	ldr	w0, [sp, #60]
    16fc:	bl	0 <gomp_resolve_num_threads>
    1700:	str	w0, [sp, #60]
    1704:	ldr	w0, [sp, #60]
    1708:	bl	0 <gomp_new_team>
    170c:	str	x0, [sp, #88]
    1710:	ldr	x0, [sp, #88]
    1714:	add	x0, x0, #0x100
    1718:	ldr	x5, [sp, #24]
    171c:	ldr	w4, [sp, #56]
    1720:	ldr	x3, [sp, #32]
    1724:	ldr	x2, [sp, #40]
    1728:	ldr	x1, [sp, #48]
    172c:	bl	1cc <gomp_loop_init>
    1730:	mov	x5, #0x0                   	// #0
    1734:	ldr	x4, [sp, #88]
    1738:	ldr	w3, [sp, #96]
    173c:	ldr	w2, [sp, #60]
    1740:	ldr	x1, [sp, #64]
    1744:	ldr	x0, [sp, #72]
    1748:	bl	0 <gomp_team_start>
    174c:	nop
    1750:	ldp	x29, x30, [sp], #96
    1754:	ret

0000000000001758 <GOMP_parallel_loop_static_start>:
    1758:	sub	sp, sp, #0x60
    175c:	stp	x29, x30, [sp, #16]
    1760:	add	x29, sp, #0x10
    1764:	str	x0, [sp, #88]
    1768:	str	x1, [sp, #80]
    176c:	str	w2, [sp, #76]
    1770:	str	x3, [sp, #64]
    1774:	str	x4, [sp, #56]
    1778:	str	x5, [sp, #48]
    177c:	str	x6, [sp, #40]
    1780:	str	wzr, [sp]
    1784:	ldr	x7, [sp, #40]
    1788:	mov	w6, #0x1                   	// #1
    178c:	ldr	x5, [sp, #48]
    1790:	ldr	x4, [sp, #56]
    1794:	ldr	x3, [sp, #64]
    1798:	ldr	w2, [sp, #76]
    179c:	ldr	x1, [sp, #80]
    17a0:	ldr	x0, [sp, #88]
    17a4:	bl	16cc <gomp_parallel_loop_start>
    17a8:	nop
    17ac:	ldp	x29, x30, [sp, #16]
    17b0:	add	sp, sp, #0x60
    17b4:	ret

00000000000017b8 <GOMP_parallel_loop_dynamic_start>:
    17b8:	sub	sp, sp, #0x60
    17bc:	stp	x29, x30, [sp, #16]
    17c0:	add	x29, sp, #0x10
    17c4:	str	x0, [sp, #88]
    17c8:	str	x1, [sp, #80]
    17cc:	str	w2, [sp, #76]
    17d0:	str	x3, [sp, #64]
    17d4:	str	x4, [sp, #56]
    17d8:	str	x5, [sp, #48]
    17dc:	str	x6, [sp, #40]
    17e0:	str	wzr, [sp]
    17e4:	ldr	x7, [sp, #40]
    17e8:	mov	w6, #0x2                   	// #2
    17ec:	ldr	x5, [sp, #48]
    17f0:	ldr	x4, [sp, #56]
    17f4:	ldr	x3, [sp, #64]
    17f8:	ldr	w2, [sp, #76]
    17fc:	ldr	x1, [sp, #80]
    1800:	ldr	x0, [sp, #88]
    1804:	bl	16cc <gomp_parallel_loop_start>
    1808:	nop
    180c:	ldp	x29, x30, [sp, #16]
    1810:	add	sp, sp, #0x60
    1814:	ret

0000000000001818 <GOMP_parallel_loop_guided_start>:
    1818:	sub	sp, sp, #0x60
    181c:	stp	x29, x30, [sp, #16]
    1820:	add	x29, sp, #0x10
    1824:	str	x0, [sp, #88]
    1828:	str	x1, [sp, #80]
    182c:	str	w2, [sp, #76]
    1830:	str	x3, [sp, #64]
    1834:	str	x4, [sp, #56]
    1838:	str	x5, [sp, #48]
    183c:	str	x6, [sp, #40]
    1840:	str	wzr, [sp]
    1844:	ldr	x7, [sp, #40]
    1848:	mov	w6, #0x3                   	// #3
    184c:	ldr	x5, [sp, #48]
    1850:	ldr	x4, [sp, #56]
    1854:	ldr	x3, [sp, #64]
    1858:	ldr	w2, [sp, #76]
    185c:	ldr	x1, [sp, #80]
    1860:	ldr	x0, [sp, #88]
    1864:	bl	16cc <gomp_parallel_loop_start>
    1868:	nop
    186c:	ldp	x29, x30, [sp, #16]
    1870:	add	sp, sp, #0x60
    1874:	ret

0000000000001878 <GOMP_parallel_loop_runtime_start>:
    1878:	sub	sp, sp, #0x60
    187c:	stp	x29, x30, [sp, #16]
    1880:	add	x29, sp, #0x10
    1884:	str	x0, [sp, #72]
    1888:	str	x1, [sp, #64]
    188c:	str	w2, [sp, #60]
    1890:	str	x3, [sp, #48]
    1894:	str	x4, [sp, #40]
    1898:	str	x5, [sp, #32]
    189c:	mov	w0, #0x0                   	// #0
    18a0:	bl	11c <gomp_icv>
    18a4:	str	x0, [sp, #88]
    18a8:	ldr	x0, [sp, #88]
    18ac:	ldr	w0, [x0, #8]
    18b0:	and	w1, w0, #0x7fffffff
    18b4:	ldr	x0, [sp, #88]
    18b8:	ldr	w0, [x0, #12]
    18bc:	sxtw	x0, w0
    18c0:	str	wzr, [sp]
    18c4:	mov	x7, x0
    18c8:	mov	w6, w1
    18cc:	ldr	x5, [sp, #32]
    18d0:	ldr	x4, [sp, #40]
    18d4:	ldr	x3, [sp, #48]
    18d8:	ldr	w2, [sp, #60]
    18dc:	ldr	x1, [sp, #64]
    18e0:	ldr	x0, [sp, #72]
    18e4:	bl	16cc <gomp_parallel_loop_start>
    18e8:	nop
    18ec:	ldp	x29, x30, [sp, #16]
    18f0:	add	sp, sp, #0x60
    18f4:	ret

00000000000018f8 <GOMP_parallel_loop_static>:
    18f8:	sub	sp, sp, #0x60
    18fc:	stp	x29, x30, [sp, #16]
    1900:	add	x29, sp, #0x10
    1904:	str	x0, [sp, #88]
    1908:	str	x1, [sp, #80]
    190c:	str	w2, [sp, #76]
    1910:	str	x3, [sp, #64]
    1914:	str	x4, [sp, #56]
    1918:	str	x5, [sp, #48]
    191c:	str	x6, [sp, #40]
    1920:	str	w7, [sp, #72]
    1924:	ldr	w0, [sp, #72]
    1928:	str	w0, [sp]
    192c:	ldr	x7, [sp, #40]
    1930:	mov	w6, #0x1                   	// #1
    1934:	ldr	x5, [sp, #48]
    1938:	ldr	x4, [sp, #56]
    193c:	ldr	x3, [sp, #64]
    1940:	ldr	w2, [sp, #76]
    1944:	ldr	x1, [sp, #80]
    1948:	ldr	x0, [sp, #88]
    194c:	bl	16cc <gomp_parallel_loop_start>
    1950:	ldr	x1, [sp, #88]
    1954:	ldr	x0, [sp, #80]
    1958:	blr	x1
    195c:	bl	0 <gomp_ialias_GOMP_parallel_end>
    1960:	nop
    1964:	ldp	x29, x30, [sp, #16]
    1968:	add	sp, sp, #0x60
    196c:	ret

0000000000001970 <GOMP_parallel_loop_dynamic>:
    1970:	sub	sp, sp, #0x60
    1974:	stp	x29, x30, [sp, #16]
    1978:	add	x29, sp, #0x10
    197c:	str	x0, [sp, #88]
    1980:	str	x1, [sp, #80]
    1984:	str	w2, [sp, #76]
    1988:	str	x3, [sp, #64]
    198c:	str	x4, [sp, #56]
    1990:	str	x5, [sp, #48]
    1994:	str	x6, [sp, #40]
    1998:	str	w7, [sp, #72]
    199c:	ldr	w0, [sp, #72]
    19a0:	str	w0, [sp]
    19a4:	ldr	x7, [sp, #40]
    19a8:	mov	w6, #0x2                   	// #2
    19ac:	ldr	x5, [sp, #48]
    19b0:	ldr	x4, [sp, #56]
    19b4:	ldr	x3, [sp, #64]
    19b8:	ldr	w2, [sp, #76]
    19bc:	ldr	x1, [sp, #80]
    19c0:	ldr	x0, [sp, #88]
    19c4:	bl	16cc <gomp_parallel_loop_start>
    19c8:	ldr	x1, [sp, #88]
    19cc:	ldr	x0, [sp, #80]
    19d0:	blr	x1
    19d4:	bl	0 <gomp_ialias_GOMP_parallel_end>
    19d8:	nop
    19dc:	ldp	x29, x30, [sp, #16]
    19e0:	add	sp, sp, #0x60
    19e4:	ret

00000000000019e8 <GOMP_parallel_loop_guided>:
    19e8:	sub	sp, sp, #0x60
    19ec:	stp	x29, x30, [sp, #16]
    19f0:	add	x29, sp, #0x10
    19f4:	str	x0, [sp, #88]
    19f8:	str	x1, [sp, #80]
    19fc:	str	w2, [sp, #76]
    1a00:	str	x3, [sp, #64]
    1a04:	str	x4, [sp, #56]
    1a08:	str	x5, [sp, #48]
    1a0c:	str	x6, [sp, #40]
    1a10:	str	w7, [sp, #72]
    1a14:	ldr	w0, [sp, #72]
    1a18:	str	w0, [sp]
    1a1c:	ldr	x7, [sp, #40]
    1a20:	mov	w6, #0x3                   	// #3
    1a24:	ldr	x5, [sp, #48]
    1a28:	ldr	x4, [sp, #56]
    1a2c:	ldr	x3, [sp, #64]
    1a30:	ldr	w2, [sp, #76]
    1a34:	ldr	x1, [sp, #80]
    1a38:	ldr	x0, [sp, #88]
    1a3c:	bl	16cc <gomp_parallel_loop_start>
    1a40:	ldr	x1, [sp, #88]
    1a44:	ldr	x0, [sp, #80]
    1a48:	blr	x1
    1a4c:	bl	0 <gomp_ialias_GOMP_parallel_end>
    1a50:	nop
    1a54:	ldp	x29, x30, [sp, #16]
    1a58:	add	sp, sp, #0x60
    1a5c:	ret

0000000000001a60 <GOMP_parallel_loop_maybe_nonmonotonic_runtime>:
    1a60:	sub	sp, sp, #0x60
    1a64:	stp	x29, x30, [sp, #16]
    1a68:	add	x29, sp, #0x10
    1a6c:	str	x0, [sp, #72]
    1a70:	str	x1, [sp, #64]
    1a74:	str	w2, [sp, #60]
    1a78:	str	x3, [sp, #48]
    1a7c:	str	x4, [sp, #40]
    1a80:	str	x5, [sp, #32]
    1a84:	str	w6, [sp, #56]
    1a88:	mov	w0, #0x0                   	// #0
    1a8c:	bl	11c <gomp_icv>
    1a90:	str	x0, [sp, #88]
    1a94:	ldr	x0, [sp, #88]
    1a98:	ldr	w0, [x0, #8]
    1a9c:	and	w1, w0, #0x7fffffff
    1aa0:	ldr	x0, [sp, #88]
    1aa4:	ldr	w0, [x0, #12]
    1aa8:	sxtw	x2, w0
    1aac:	ldr	w0, [sp, #56]
    1ab0:	str	w0, [sp]
    1ab4:	mov	x7, x2
    1ab8:	mov	w6, w1
    1abc:	ldr	x5, [sp, #32]
    1ac0:	ldr	x4, [sp, #40]
    1ac4:	ldr	x3, [sp, #48]
    1ac8:	ldr	w2, [sp, #60]
    1acc:	ldr	x1, [sp, #64]
    1ad0:	ldr	x0, [sp, #72]
    1ad4:	bl	16cc <gomp_parallel_loop_start>
    1ad8:	ldr	x1, [sp, #72]
    1adc:	ldr	x0, [sp, #64]
    1ae0:	blr	x1
    1ae4:	bl	0 <gomp_ialias_GOMP_parallel_end>
    1ae8:	nop
    1aec:	ldp	x29, x30, [sp, #16]
    1af0:	add	sp, sp, #0x60
    1af4:	ret

0000000000001af8 <GOMP_loop_end>:
    1af8:	stp	x29, x30, [sp, #-16]!
    1afc:	mov	x29, sp
    1b00:	bl	0 <gomp_work_share_end>
    1b04:	nop
    1b08:	ldp	x29, x30, [sp], #16
    1b0c:	ret

0000000000001b10 <GOMP_loop_end_cancel>:
    1b10:	stp	x29, x30, [sp, #-16]!
    1b14:	mov	x29, sp
    1b18:	bl	0 <gomp_work_share_end_cancel>
    1b1c:	and	w0, w0, #0xff
    1b20:	ldp	x29, x30, [sp], #16
    1b24:	ret

0000000000001b28 <GOMP_loop_end_nowait>:
    1b28:	stp	x29, x30, [sp, #-16]!
    1b2c:	mov	x29, sp
    1b30:	bl	0 <gomp_work_share_end_nowait>
    1b34:	nop
    1b38:	ldp	x29, x30, [sp], #16
    1b3c:	ret

loop_ull.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_lock>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #24]
       c:	str	wzr, [sp, #44]
      10:	ldr	x1, [sp, #24]
      14:	add	x0, sp, #0x2c
      18:	ldr	w3, [x0]
      1c:	mov	w4, #0x1                   	// #1
      20:	ldaxr	w2, [x1]
      24:	cmp	w2, w3
      28:	b.ne	34 <gomp_mutex_lock+0x34>  // b.any
      2c:	stxr	w5, w4, [x1]
      30:	cbnz	w5, 20 <gomp_mutex_lock+0x20>
      34:	cset	w1, eq  // eq = none
      38:	cmp	w1, #0x0
      3c:	b.ne	44 <gomp_mutex_lock+0x44>  // b.any
      40:	str	w2, [x0]
      44:	mov	w0, w1
      48:	eor	w0, w0, #0x1
      4c:	and	w0, w0, #0xff
      50:	cmp	w0, #0x0
      54:	b.eq	68 <gomp_mutex_lock+0x68>  // b.none
      58:	ldr	w0, [sp, #44]
      5c:	mov	w1, w0
      60:	ldr	x0, [sp, #24]
      64:	bl	0 <gomp_mutex_lock_slow>
      68:	nop
      6c:	ldp	x29, x30, [sp], #48
      70:	ret

0000000000000074 <gomp_mutex_unlock>:
      74:	stp	x29, x30, [sp, #-48]!
      78:	mov	x29, sp
      7c:	str	x0, [sp, #24]
      80:	ldr	x1, [sp, #24]
      84:	ldxr	w0, [x1]
      88:	stlxr	w2, wzr, [x1]
      8c:	cbnz	w2, 84 <gomp_mutex_unlock+0x10>
      90:	str	w0, [sp, #44]
      94:	ldr	w0, [sp, #44]
      98:	lsr	w0, w0, #31
      9c:	and	w0, w0, #0xff
      a0:	and	x0, x0, #0xff
      a4:	cmp	x0, #0x0
      a8:	b.eq	b4 <gomp_mutex_unlock+0x40>  // b.none
      ac:	ldr	x0, [sp, #24]
      b0:	bl	0 <gomp_mutex_unlock_slow>
      b4:	nop
      b8:	ldp	x29, x30, [sp], #48
      bc:	ret

00000000000000c0 <gomp_ptrlock_set>:
      c0:	stp	x29, x30, [sp, #-48]!
      c4:	mov	x29, sp
      c8:	str	x0, [sp, #24]
      cc:	str	x1, [sp, #16]
      d0:	ldr	x2, [sp, #16]
      d4:	ldr	x1, [sp, #24]
      d8:	ldxr	x0, [x1]
      dc:	stlxr	w3, x2, [x1]
      e0:	cbnz	w3, d8 <gomp_ptrlock_set+0x18>
      e4:	str	x0, [sp, #40]
      e8:	ldr	x0, [sp, #40]
      ec:	cmp	x0, #0x1
      f0:	b.eq	fc <gomp_ptrlock_set+0x3c>  // b.none
      f4:	ldr	x0, [sp, #24]
      f8:	bl	0 <gomp_ptrlock_set_slow>
      fc:	nop
     100:	ldp	x29, x30, [sp], #48
     104:	ret

0000000000000108 <gomp_thread>:
     108:	mrs	x1, tpidr_el0
     10c:	adrp	x0, 0 <gomp_tls_data>
     110:	ldr	x0, [x0]
     114:	add	x0, x1, x0
     118:	ret

000000000000011c <gomp_icv>:
     11c:	stp	x29, x30, [sp, #-48]!
     120:	mov	x29, sp
     124:	strb	w0, [sp, #31]
     128:	bl	108 <gomp_thread>
     12c:	ldr	x0, [x0, #80]
     130:	str	x0, [sp, #40]
     134:	ldr	x0, [sp, #40]
     138:	cmp	x0, #0x0
     13c:	b.eq	14c <gomp_icv+0x30>  // b.none
     140:	ldr	x0, [sp, #40]
     144:	add	x0, x0, #0x90
     148:	b	168 <gomp_icv+0x4c>
     14c:	ldrb	w0, [sp, #31]
     150:	cmp	w0, #0x0
     154:	b.eq	160 <gomp_icv+0x44>  // b.none
     158:	bl	0 <gomp_new_icv>
     15c:	b	168 <gomp_icv+0x4c>
     160:	adrp	x0, 0 <gomp_global_icv>
     164:	add	x0, x0, #0x0
     168:	ldp	x29, x30, [sp], #48
     16c:	ret

0000000000000170 <gomp_work_share_init_done>:
     170:	stp	x29, x30, [sp, #-32]!
     174:	mov	x29, sp
     178:	bl	108 <gomp_thread>
     17c:	str	x0, [sp, #24]
     180:	ldr	x0, [sp, #24]
     184:	ldr	x0, [x0, #32]
     188:	cmp	x0, #0x0
     18c:	cset	w0, ne  // ne = any
     190:	and	w0, w0, #0xff
     194:	and	x0, x0, #0xff
     198:	cmp	x0, #0x0
     19c:	b.eq	1c0 <gomp_work_share_init_done+0x50>  // b.none
     1a0:	ldr	x0, [sp, #24]
     1a4:	ldr	x0, [x0, #32]
     1a8:	add	x2, x0, #0x50
     1ac:	ldr	x0, [sp, #24]
     1b0:	ldr	x0, [x0, #24]
     1b4:	mov	x1, x0
     1b8:	mov	x0, x2
     1bc:	bl	c0 <gomp_ptrlock_set>
     1c0:	nop
     1c4:	ldp	x29, x30, [sp], #32
     1c8:	ret

00000000000001cc <gomp_loop_ull_init>:
     1cc:	stp	x29, x30, [sp, #-96]!
     1d0:	mov	x29, sp
     1d4:	str	x0, [sp, #56]
     1d8:	strb	w1, [sp, #55]
     1dc:	str	x2, [sp, #40]
     1e0:	str	x3, [sp, #32]
     1e4:	str	x4, [sp, #24]
     1e8:	str	w5, [sp, #48]
     1ec:	str	x6, [sp, #16]
     1f0:	ldr	x0, [sp, #56]
     1f4:	ldr	w1, [sp, #48]
     1f8:	str	w1, [x0]
     1fc:	ldr	x0, [sp, #56]
     200:	ldr	x1, [sp, #16]
     204:	str	x1, [x0, #8]
     208:	ldrb	w0, [sp, #55]
     20c:	cmp	w0, #0x0
     210:	b.eq	224 <gomp_loop_ull_init+0x58>  // b.none
     214:	ldr	x1, [sp, #40]
     218:	ldr	x0, [sp, #32]
     21c:	cmp	x1, x0
     220:	b.hi	248 <gomp_loop_ull_init+0x7c>  // b.pmore
     224:	ldrb	w0, [sp, #55]
     228:	eor	w0, w0, #0x1
     22c:	and	w0, w0, #0xff
     230:	cmp	w0, #0x0
     234:	b.eq	250 <gomp_loop_ull_init+0x84>  // b.none
     238:	ldr	x1, [sp, #40]
     23c:	ldr	x0, [sp, #32]
     240:	cmp	x1, x0
     244:	b.cs	250 <gomp_loop_ull_init+0x84>  // b.hs, b.nlast
     248:	ldr	x0, [sp, #40]
     24c:	b	254 <gomp_loop_ull_init+0x88>
     250:	ldr	x0, [sp, #32]
     254:	ldr	x1, [sp, #56]
     258:	str	x0, [x1, #16]
     25c:	ldr	x0, [sp, #56]
     260:	ldr	x1, [sp, #24]
     264:	str	x1, [x0, #24]
     268:	ldr	x0, [sp, #56]
     26c:	ldr	x1, [sp, #40]
     270:	str	x1, [x0, #72]
     274:	ldr	x0, [sp, #56]
     278:	str	wzr, [x0, #4]
     27c:	ldr	w0, [sp, #48]
     280:	cmp	w0, #0x2
     284:	b.ne	3c0 <gomp_loop_ull_init+0x1f4>  // b.any
     288:	ldr	x0, [sp, #56]
     28c:	ldr	x1, [x0, #8]
     290:	ldr	x0, [sp, #24]
     294:	mul	x1, x1, x0
     298:	ldr	x0, [sp, #56]
     29c:	str	x1, [x0, #8]
     2a0:	bl	108 <gomp_thread>
     2a4:	str	x0, [sp, #88]
     2a8:	ldr	x0, [sp, #88]
     2ac:	ldr	x0, [x0, #16]
     2b0:	str	x0, [sp, #80]
     2b4:	ldr	x0, [sp, #80]
     2b8:	cmp	x0, #0x0
     2bc:	b.eq	2d0 <gomp_loop_ull_init+0x104>  // b.none
     2c0:	ldr	x0, [sp, #80]
     2c4:	ldr	w0, [x0]
     2c8:	mov	w0, w0
     2cc:	b	2d4 <gomp_loop_ull_init+0x108>
     2d0:	mov	x0, #0x1                   	// #1
     2d4:	str	x0, [sp, #72]
     2d8:	ldrb	w0, [sp, #55]
     2dc:	cmp	x0, #0x0
     2e0:	b.eq	350 <gomp_loop_ull_init+0x184>  // b.none
     2e4:	ldr	x0, [sp, #56]
     2e8:	ldr	x1, [x0, #8]
     2ec:	ldr	x0, [sp, #72]
     2f0:	orr	x1, x1, x0
     2f4:	mov	x0, #0x7fffffff            	// #2147483647
     2f8:	cmp	x1, x0
     2fc:	cset	w0, ls  // ls = plast
     300:	and	w0, w0, #0xff
     304:	and	x0, x0, #0xff
     308:	cmp	x0, #0x0
     30c:	b.eq	3c0 <gomp_loop_ull_init+0x1f4>  // b.none
     310:	ldr	x0, [sp, #56]
     314:	ldr	x1, [x0, #16]
     318:	ldr	x0, [sp, #72]
     31c:	add	x0, x0, #0x1
     320:	mov	x2, x0
     324:	ldr	x0, [sp, #56]
     328:	ldr	x0, [x0, #8]
     32c:	mul	x0, x2, x0
     330:	mvn	x0, x0
     334:	cmp	x1, x0
     338:	cset	w0, cc  // cc = lo, ul, last
     33c:	and	w0, w0, #0xff
     340:	mov	w1, w0
     344:	ldr	x0, [sp, #56]
     348:	str	w1, [x0, #4]
     34c:	b	3c0 <gomp_loop_ull_init+0x1f4>
     350:	ldr	x0, [sp, #56]
     354:	ldr	x0, [x0, #8]
     358:	neg	x1, x0
     35c:	ldr	x0, [sp, #72]
     360:	orr	x1, x1, x0
     364:	mov	x0, #0x7fffffff            	// #2147483647
     368:	cmp	x1, x0
     36c:	cset	w0, ls  // ls = plast
     370:	and	w0, w0, #0xff
     374:	and	x0, x0, #0xff
     378:	cmp	x0, #0x0
     37c:	b.eq	3c0 <gomp_loop_ull_init+0x1f4>  // b.none
     380:	ldr	x0, [sp, #56]
     384:	ldr	x1, [x0, #16]
     388:	ldr	x0, [sp, #72]
     38c:	add	x0, x0, #0x1
     390:	mov	x2, x0
     394:	ldr	x0, [sp, #56]
     398:	ldr	x0, [x0, #8]
     39c:	neg	x0, x0
     3a0:	mul	x0, x2, x0
     3a4:	add	x0, x0, #0x1
     3a8:	cmp	x1, x0
     3ac:	cset	w0, hi  // hi = pmore
     3b0:	and	w0, w0, #0xff
     3b4:	mov	w1, w0
     3b8:	ldr	x0, [sp, #56]
     3bc:	str	w1, [x0, #4]
     3c0:	ldrb	w0, [sp, #55]
     3c4:	eor	w0, w0, #0x1
     3c8:	and	w0, w0, #0xff
     3cc:	cmp	w0, #0x0
     3d0:	b.eq	3e8 <gomp_loop_ull_init+0x21c>  // b.none
     3d4:	ldr	x0, [sp, #56]
     3d8:	ldr	w0, [x0, #4]
     3dc:	orr	w1, w0, #0x2
     3e0:	ldr	x0, [sp, #56]
     3e4:	str	w1, [x0, #4]
     3e8:	nop
     3ec:	ldp	x29, x30, [sp], #96
     3f0:	ret

00000000000003f4 <GOMP_loop_ull_static_start>:
     3f4:	stp	x29, x30, [sp, #-96]!
     3f8:	mov	x29, sp
     3fc:	strb	w0, [sp, #79]
     400:	str	x1, [sp, #64]
     404:	str	x2, [sp, #56]
     408:	str	x3, [sp, #48]
     40c:	str	x4, [sp, #40]
     410:	str	x5, [sp, #32]
     414:	str	x6, [sp, #24]
     418:	bl	108 <gomp_thread>
     41c:	str	x0, [sp, #88]
     420:	ldr	x0, [sp, #88]
     424:	str	xzr, [x0, #72]
     428:	mov	x0, #0x0                   	// #0
     42c:	bl	0 <gomp_work_share_start>
     430:	and	w0, w0, #0xff
     434:	cmp	w0, #0x0
     438:	b.eq	464 <GOMP_loop_ull_static_start+0x70>  // b.none
     43c:	ldr	x0, [sp, #88]
     440:	ldr	x0, [x0, #24]
     444:	ldr	x6, [sp, #40]
     448:	mov	w5, #0x1                   	// #1
     44c:	ldr	x4, [sp, #48]
     450:	ldr	x3, [sp, #56]
     454:	ldr	x2, [sp, #64]
     458:	ldrb	w1, [sp, #79]
     45c:	bl	1cc <gomp_loop_ull_init>
     460:	bl	170 <gomp_work_share_init_done>
     464:	ldr	x1, [sp, #24]
     468:	ldr	x0, [sp, #32]
     46c:	bl	0 <gomp_iter_ull_static_next>
     470:	cmp	w0, #0x0
     474:	cset	w0, eq  // eq = none
     478:	and	w0, w0, #0xff
     47c:	ldp	x29, x30, [sp], #96
     480:	ret

0000000000000484 <GOMP_loop_ull_dynamic_start>:
     484:	stp	x29, x30, [sp, #-96]!
     488:	mov	x29, sp
     48c:	strb	w0, [sp, #79]
     490:	str	x1, [sp, #64]
     494:	str	x2, [sp, #56]
     498:	str	x3, [sp, #48]
     49c:	str	x4, [sp, #40]
     4a0:	str	x5, [sp, #32]
     4a4:	str	x6, [sp, #24]
     4a8:	bl	108 <gomp_thread>
     4ac:	str	x0, [sp, #88]
     4b0:	mov	x0, #0x0                   	// #0
     4b4:	bl	0 <gomp_work_share_start>
     4b8:	and	w0, w0, #0xff
     4bc:	cmp	w0, #0x0
     4c0:	b.eq	4ec <GOMP_loop_ull_dynamic_start+0x68>  // b.none
     4c4:	ldr	x0, [sp, #88]
     4c8:	ldr	x0, [x0, #24]
     4cc:	ldr	x6, [sp, #40]
     4d0:	mov	w5, #0x2                   	// #2
     4d4:	ldr	x4, [sp, #48]
     4d8:	ldr	x3, [sp, #56]
     4dc:	ldr	x2, [sp, #64]
     4e0:	ldrb	w1, [sp, #79]
     4e4:	bl	1cc <gomp_loop_ull_init>
     4e8:	bl	170 <gomp_work_share_init_done>
     4ec:	ldr	x1, [sp, #24]
     4f0:	ldr	x0, [sp, #32]
     4f4:	bl	0 <gomp_iter_ull_dynamic_next>
     4f8:	strb	w0, [sp, #87]
     4fc:	ldrb	w0, [sp, #87]
     500:	ldp	x29, x30, [sp], #96
     504:	ret

0000000000000508 <GOMP_loop_ull_guided_start>:
     508:	stp	x29, x30, [sp, #-96]!
     50c:	mov	x29, sp
     510:	strb	w0, [sp, #79]
     514:	str	x1, [sp, #64]
     518:	str	x2, [sp, #56]
     51c:	str	x3, [sp, #48]
     520:	str	x4, [sp, #40]
     524:	str	x5, [sp, #32]
     528:	str	x6, [sp, #24]
     52c:	bl	108 <gomp_thread>
     530:	str	x0, [sp, #88]
     534:	mov	x0, #0x0                   	// #0
     538:	bl	0 <gomp_work_share_start>
     53c:	and	w0, w0, #0xff
     540:	cmp	w0, #0x0
     544:	b.eq	570 <GOMP_loop_ull_guided_start+0x68>  // b.none
     548:	ldr	x0, [sp, #88]
     54c:	ldr	x0, [x0, #24]
     550:	ldr	x6, [sp, #40]
     554:	mov	w5, #0x3                   	// #3
     558:	ldr	x4, [sp, #48]
     55c:	ldr	x3, [sp, #56]
     560:	ldr	x2, [sp, #64]
     564:	ldrb	w1, [sp, #79]
     568:	bl	1cc <gomp_loop_ull_init>
     56c:	bl	170 <gomp_work_share_init_done>
     570:	ldr	x1, [sp, #24]
     574:	ldr	x0, [sp, #32]
     578:	bl	0 <gomp_iter_ull_guided_next>
     57c:	strb	w0, [sp, #87]
     580:	ldrb	w0, [sp, #87]
     584:	ldp	x29, x30, [sp], #96
     588:	ret

000000000000058c <GOMP_loop_ull_maybe_nonmonotonic_runtime_start>:
     58c:	stp	x29, x30, [sp, #-80]!
     590:	mov	x29, sp
     594:	strb	w0, [sp, #63]
     598:	str	x1, [sp, #48]
     59c:	str	x2, [sp, #40]
     5a0:	str	x3, [sp, #32]
     5a4:	str	x4, [sp, #24]
     5a8:	str	x5, [sp, #16]
     5ac:	mov	w0, #0x0                   	// #0
     5b0:	bl	11c <gomp_icv>
     5b4:	str	x0, [sp, #72]
     5b8:	ldr	x0, [sp, #72]
     5bc:	ldr	w0, [x0, #8]
     5c0:	and	w0, w0, #0x7fffffff
     5c4:	cmp	w0, #0x4
     5c8:	b.eq	694 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x108>  // b.none
     5cc:	cmp	w0, #0x4
     5d0:	b.hi	6bc <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x130>  // b.pmore
     5d4:	cmp	w0, #0x3
     5d8:	b.eq	660 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0xd4>  // b.none
     5dc:	cmp	w0, #0x3
     5e0:	b.hi	6bc <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x130>  // b.pmore
     5e4:	cmp	w0, #0x1
     5e8:	b.eq	5f8 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x6c>  // b.none
     5ec:	cmp	w0, #0x2
     5f0:	b.eq	62c <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0xa0>  // b.none
     5f4:	b	6bc <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x130>
     5f8:	ldr	x0, [sp, #72]
     5fc:	ldr	w0, [x0, #12]
     600:	sxtw	x0, w0
     604:	ldr	x6, [sp, #16]
     608:	ldr	x5, [sp, #24]
     60c:	mov	x4, x0
     610:	ldr	x3, [sp, #32]
     614:	ldr	x2, [sp, #40]
     618:	ldr	x1, [sp, #48]
     61c:	ldrb	w0, [sp, #63]
     620:	bl	3f4 <GOMP_loop_ull_static_start>
     624:	and	w0, w0, #0xff
     628:	b	6c0 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x134>
     62c:	ldr	x0, [sp, #72]
     630:	ldr	w0, [x0, #12]
     634:	sxtw	x0, w0
     638:	ldr	x6, [sp, #16]
     63c:	ldr	x5, [sp, #24]
     640:	mov	x4, x0
     644:	ldr	x3, [sp, #32]
     648:	ldr	x2, [sp, #40]
     64c:	ldr	x1, [sp, #48]
     650:	ldrb	w0, [sp, #63]
     654:	bl	484 <GOMP_loop_ull_dynamic_start>
     658:	and	w0, w0, #0xff
     65c:	b	6c0 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x134>
     660:	ldr	x0, [sp, #72]
     664:	ldr	w0, [x0, #12]
     668:	sxtw	x0, w0
     66c:	ldr	x6, [sp, #16]
     670:	ldr	x5, [sp, #24]
     674:	mov	x4, x0
     678:	ldr	x3, [sp, #32]
     67c:	ldr	x2, [sp, #40]
     680:	ldr	x1, [sp, #48]
     684:	ldrb	w0, [sp, #63]
     688:	bl	508 <GOMP_loop_ull_guided_start>
     68c:	and	w0, w0, #0xff
     690:	b	6c0 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x134>
     694:	ldr	x6, [sp, #16]
     698:	ldr	x5, [sp, #24]
     69c:	mov	x4, #0x0                   	// #0
     6a0:	ldr	x3, [sp, #32]
     6a4:	ldr	x2, [sp, #40]
     6a8:	ldr	x1, [sp, #48]
     6ac:	ldrb	w0, [sp, #63]
     6b0:	bl	3f4 <GOMP_loop_ull_static_start>
     6b4:	and	w0, w0, #0xff
     6b8:	b	6c0 <GOMP_loop_ull_maybe_nonmonotonic_runtime_start+0x134>
     6bc:	bl	0 <abort>
     6c0:	ldp	x29, x30, [sp], #80
     6c4:	ret

00000000000006c8 <gomp_adjust_sched>:
     6c8:	stp	x29, x30, [sp, #-48]!
     6cc:	mov	x29, sp
     6d0:	str	x0, [sp, #24]
     6d4:	str	x1, [sp, #16]
     6d8:	ldr	x0, [sp, #24]
     6dc:	and	x0, x0, #0x7fffffff
     6e0:	str	x0, [sp, #24]
     6e4:	ldr	x0, [sp, #24]
     6e8:	cmp	x0, #0x4
     6ec:	b.eq	72c <gomp_adjust_sched+0x64>  // b.none
     6f0:	ldr	x0, [sp, #24]
     6f4:	cmp	x0, #0x4
     6f8:	b.gt	7b0 <gomp_adjust_sched+0xe8>
     6fc:	ldr	x0, [sp, #24]
     700:	cmp	x0, #0x0
     704:	b.eq	72c <gomp_adjust_sched+0x64>  // b.none
     708:	ldr	x0, [sp, #24]
     70c:	cmp	x0, #0x0
     710:	b.lt	7b0 <gomp_adjust_sched+0xe8>  // b.tstop
     714:	ldr	x0, [sp, #24]
     718:	sub	x0, x0, #0x1
     71c:	cmp	x0, #0x2
     720:	b.hi	7b0 <gomp_adjust_sched+0xe8>  // b.pmore
     724:	ldr	x0, [sp, #24]
     728:	b	7b4 <gomp_adjust_sched+0xec>
     72c:	mov	w0, #0x0                   	// #0
     730:	bl	11c <gomp_icv>
     734:	str	x0, [sp, #40]
     738:	ldr	x0, [sp, #40]
     73c:	ldr	w0, [x0, #8]
     740:	mov	w0, w0
     744:	and	x0, x0, #0x7fffffff
     748:	str	x0, [sp, #24]
     74c:	ldr	x0, [sp, #24]
     750:	cmp	x0, #0x3
     754:	b.gt	768 <gomp_adjust_sched+0xa0>
     758:	ldr	x0, [sp, #24]
     75c:	cmp	x0, #0x0
     760:	b.gt	778 <gomp_adjust_sched+0xb0>
     764:	b	7a4 <gomp_adjust_sched+0xdc>
     768:	ldr	x0, [sp, #24]
     76c:	cmp	x0, #0x4
     770:	b.eq	790 <gomp_adjust_sched+0xc8>  // b.none
     774:	b	7a4 <gomp_adjust_sched+0xdc>
     778:	ldr	x0, [sp, #40]
     77c:	ldr	w0, [x0, #12]
     780:	sxtw	x1, w0
     784:	ldr	x0, [sp, #16]
     788:	str	x1, [x0]
     78c:	b	7a8 <gomp_adjust_sched+0xe0>
     790:	mov	x0, #0x1                   	// #1
     794:	str	x0, [sp, #24]
     798:	ldr	x0, [sp, #16]
     79c:	str	xzr, [x0]
     7a0:	b	7a8 <gomp_adjust_sched+0xe0>
     7a4:	bl	0 <abort>
     7a8:	ldr	x0, [sp, #24]
     7ac:	b	7b4 <gomp_adjust_sched+0xec>
     7b0:	bl	0 <abort>
     7b4:	ldp	x29, x30, [sp], #48
     7b8:	ret

00000000000007bc <GOMP_loop_ull_start>:
     7bc:	stp	x29, x30, [sp, #-128]!
     7c0:	mov	x29, sp
     7c4:	str	x19, [sp, #16]
     7c8:	strb	w0, [sp, #95]
     7cc:	str	x1, [sp, #80]
     7d0:	str	x2, [sp, #72]
     7d4:	str	x3, [sp, #64]
     7d8:	str	x4, [sp, #56]
     7dc:	str	x5, [sp, #48]
     7e0:	str	x6, [sp, #40]
     7e4:	str	x7, [sp, #32]
     7e8:	bl	108 <gomp_thread>
     7ec:	str	x0, [sp, #120]
     7f0:	ldr	x0, [sp, #120]
     7f4:	str	xzr, [x0, #72]
     7f8:	ldr	x0, [sp, #128]
     7fc:	cmp	x0, #0x0
     800:	b.eq	808 <GOMP_loop_ull_start+0x4c>  // b.none
     804:	bl	0 <gomp_workshare_taskgroup_start>
     808:	mov	x0, #0x0                   	// #0
     80c:	bl	0 <gomp_work_share_start>
     810:	and	w0, w0, #0xff
     814:	cmp	w0, #0x0
     818:	b.eq	90c <GOMP_loop_ull_start+0x150>  // b.none
     81c:	add	x0, sp, #0x30
     820:	mov	x1, x0
     824:	ldr	x0, [sp, #56]
     828:	bl	6c8 <gomp_adjust_sched>
     82c:	str	x0, [sp, #56]
     830:	ldr	x0, [sp, #120]
     834:	ldr	x0, [x0, #24]
     838:	ldr	x1, [sp, #56]
     83c:	mov	w2, w1
     840:	ldr	x1, [sp, #48]
     844:	mov	x6, x1
     848:	mov	w5, w2
     84c:	ldr	x4, [sp, #64]
     850:	ldr	x3, [sp, #72]
     854:	ldr	x2, [sp, #80]
     858:	ldrb	w1, [sp, #95]
     85c:	bl	1cc <gomp_loop_ull_init>
     860:	ldr	x0, [sp, #128]
     864:	cmp	x0, #0x0
     868:	b.eq	898 <GOMP_loop_ull_start+0xdc>  // b.none
     86c:	ldr	x0, [sp, #128]
     870:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     874:	ldr	x0, [sp, #120]
     878:	ldr	x0, [x0, #80]
     87c:	ldr	x0, [x0, #40]
     880:	mov	w1, #0x1                   	// #1
     884:	strb	w1, [x0, #50]
     888:	ldr	x0, [sp, #120]
     88c:	ldr	x0, [x0, #24]
     890:	ldr	x1, [sp, #128]
     894:	str	x1, [x0, #88]
     898:	ldr	x0, [sp, #136]
     89c:	cmp	x0, #0x0
     8a0:	b.eq	904 <GOMP_loop_ull_start+0x148>  // b.none
     8a4:	ldr	x0, [sp, #136]
     8a8:	ldr	x0, [x0]
     8ac:	str	x0, [sp, #104]
     8b0:	ldr	x0, [sp, #104]
     8b4:	cmp	x0, #0x20
     8b8:	b.ls	8e0 <GOMP_loop_ull_start+0x124>  // b.plast
     8bc:	ldr	x0, [sp, #120]
     8c0:	ldr	x19, [x0, #24]
     8c4:	ldr	x0, [sp, #104]
     8c8:	bl	0 <gomp_malloc_cleared>
     8cc:	str	x0, [x19, #32]
     8d0:	ldr	x1, [x19, #32]
     8d4:	ldr	x0, [sp, #136]
     8d8:	str	x1, [x0]
     8dc:	b	904 <GOMP_loop_ull_start+0x148>
     8e0:	ldr	x0, [sp, #120]
     8e4:	ldr	x0, [x0, #24]
     8e8:	add	x0, x0, #0x60
     8ec:	ldr	x2, [sp, #104]
     8f0:	mov	w1, #0x0                   	// #0
     8f4:	bl	0 <memset>
     8f8:	mov	x1, x0
     8fc:	ldr	x0, [sp, #136]
     900:	str	x1, [x0]
     904:	bl	170 <gomp_work_share_init_done>
     908:	b	954 <GOMP_loop_ull_start+0x198>
     90c:	ldr	x0, [sp, #128]
     910:	cmp	x0, #0x0
     914:	b.eq	934 <GOMP_loop_ull_start+0x178>  // b.none
     918:	ldr	x0, [sp, #120]
     91c:	ldr	x0, [x0, #24]
     920:	ldr	x0, [x0, #88]
     924:	str	x0, [sp, #112]
     928:	ldr	x1, [sp, #112]
     92c:	ldr	x0, [sp, #128]
     930:	bl	0 <gomp_workshare_task_reduction_register>
     934:	ldr	x0, [sp, #136]
     938:	cmp	x0, #0x0
     93c:	b.eq	954 <GOMP_loop_ull_start+0x198>  // b.none
     940:	ldr	x0, [sp, #120]
     944:	ldr	x0, [x0, #24]
     948:	ldr	x1, [x0, #32]
     94c:	ldr	x0, [sp, #136]
     950:	str	x1, [x0]
     954:	ldr	x1, [sp, #32]
     958:	ldr	x0, [sp, #40]
     95c:	bl	149c <GOMP_loop_ull_maybe_nonmonotonic_runtime_next>
     960:	and	w0, w0, #0xff
     964:	ldr	x19, [sp, #16]
     968:	ldp	x29, x30, [sp], #128
     96c:	ret

0000000000000970 <GOMP_loop_ull_ordered_static_start>:
     970:	stp	x29, x30, [sp, #-96]!
     974:	mov	x29, sp
     978:	strb	w0, [sp, #79]
     97c:	str	x1, [sp, #64]
     980:	str	x2, [sp, #56]
     984:	str	x3, [sp, #48]
     988:	str	x4, [sp, #40]
     98c:	str	x5, [sp, #32]
     990:	str	x6, [sp, #24]
     994:	bl	108 <gomp_thread>
     998:	str	x0, [sp, #88]
     99c:	ldr	x0, [sp, #88]
     9a0:	str	xzr, [x0, #72]
     9a4:	mov	x0, #0x1                   	// #1
     9a8:	bl	0 <gomp_work_share_start>
     9ac:	and	w0, w0, #0xff
     9b0:	cmp	w0, #0x0
     9b4:	b.eq	9e4 <GOMP_loop_ull_ordered_static_start+0x74>  // b.none
     9b8:	ldr	x0, [sp, #88]
     9bc:	ldr	x0, [x0, #24]
     9c0:	ldr	x6, [sp, #40]
     9c4:	mov	w5, #0x1                   	// #1
     9c8:	ldr	x4, [sp, #48]
     9cc:	ldr	x3, [sp, #56]
     9d0:	ldr	x2, [sp, #64]
     9d4:	ldrb	w1, [sp, #79]
     9d8:	bl	1cc <gomp_loop_ull_init>
     9dc:	bl	0 <gomp_ordered_static_init>
     9e0:	bl	170 <gomp_work_share_init_done>
     9e4:	ldr	x1, [sp, #24]
     9e8:	ldr	x0, [sp, #32]
     9ec:	bl	0 <gomp_iter_ull_static_next>
     9f0:	cmp	w0, #0x0
     9f4:	cset	w0, eq  // eq = none
     9f8:	and	w0, w0, #0xff
     9fc:	ldp	x29, x30, [sp], #96
     a00:	ret

0000000000000a04 <GOMP_loop_ull_ordered_dynamic_start>:
     a04:	stp	x29, x30, [sp, #-96]!
     a08:	mov	x29, sp
     a0c:	strb	w0, [sp, #79]
     a10:	str	x1, [sp, #64]
     a14:	str	x2, [sp, #56]
     a18:	str	x3, [sp, #48]
     a1c:	str	x4, [sp, #40]
     a20:	str	x5, [sp, #32]
     a24:	str	x6, [sp, #24]
     a28:	bl	108 <gomp_thread>
     a2c:	str	x0, [sp, #88]
     a30:	mov	x0, #0x1                   	// #1
     a34:	bl	0 <gomp_work_share_start>
     a38:	and	w0, w0, #0xff
     a3c:	cmp	w0, #0x0
     a40:	b.eq	a80 <GOMP_loop_ull_ordered_dynamic_start+0x7c>  // b.none
     a44:	ldr	x0, [sp, #88]
     a48:	ldr	x0, [x0, #24]
     a4c:	ldr	x6, [sp, #40]
     a50:	mov	w5, #0x2                   	// #2
     a54:	ldr	x4, [sp, #48]
     a58:	ldr	x3, [sp, #56]
     a5c:	ldr	x2, [sp, #64]
     a60:	ldrb	w1, [sp, #79]
     a64:	bl	1cc <gomp_loop_ull_init>
     a68:	ldr	x0, [sp, #88]
     a6c:	ldr	x0, [x0, #24]
     a70:	add	x0, x0, #0x40
     a74:	bl	0 <gomp_mutex_lock>
     a78:	bl	170 <gomp_work_share_init_done>
     a7c:	b	a90 <GOMP_loop_ull_ordered_dynamic_start+0x8c>
     a80:	ldr	x0, [sp, #88]
     a84:	ldr	x0, [x0, #24]
     a88:	add	x0, x0, #0x40
     a8c:	bl	0 <gomp_mutex_lock>
     a90:	ldr	x1, [sp, #24]
     a94:	ldr	x0, [sp, #32]
     a98:	bl	0 <gomp_iter_ull_dynamic_next_locked>
     a9c:	strb	w0, [sp, #87]
     aa0:	ldrb	w0, [sp, #87]
     aa4:	cmp	w0, #0x0
     aa8:	b.eq	ab0 <GOMP_loop_ull_ordered_dynamic_start+0xac>  // b.none
     aac:	bl	0 <gomp_ordered_first>
     ab0:	ldr	x0, [sp, #88]
     ab4:	ldr	x0, [x0, #24]
     ab8:	add	x0, x0, #0x40
     abc:	bl	74 <gomp_mutex_unlock>
     ac0:	ldrb	w0, [sp, #87]
     ac4:	ldp	x29, x30, [sp], #96
     ac8:	ret

0000000000000acc <GOMP_loop_ull_ordered_guided_start>:
     acc:	stp	x29, x30, [sp, #-96]!
     ad0:	mov	x29, sp
     ad4:	strb	w0, [sp, #79]
     ad8:	str	x1, [sp, #64]
     adc:	str	x2, [sp, #56]
     ae0:	str	x3, [sp, #48]
     ae4:	str	x4, [sp, #40]
     ae8:	str	x5, [sp, #32]
     aec:	str	x6, [sp, #24]
     af0:	bl	108 <gomp_thread>
     af4:	str	x0, [sp, #88]
     af8:	mov	x0, #0x1                   	// #1
     afc:	bl	0 <gomp_work_share_start>
     b00:	and	w0, w0, #0xff
     b04:	cmp	w0, #0x0
     b08:	b.eq	b48 <GOMP_loop_ull_ordered_guided_start+0x7c>  // b.none
     b0c:	ldr	x0, [sp, #88]
     b10:	ldr	x0, [x0, #24]
     b14:	ldr	x6, [sp, #40]
     b18:	mov	w5, #0x3                   	// #3
     b1c:	ldr	x4, [sp, #48]
     b20:	ldr	x3, [sp, #56]
     b24:	ldr	x2, [sp, #64]
     b28:	ldrb	w1, [sp, #79]
     b2c:	bl	1cc <gomp_loop_ull_init>
     b30:	ldr	x0, [sp, #88]
     b34:	ldr	x0, [x0, #24]
     b38:	add	x0, x0, #0x40
     b3c:	bl	0 <gomp_mutex_lock>
     b40:	bl	170 <gomp_work_share_init_done>
     b44:	b	b58 <GOMP_loop_ull_ordered_guided_start+0x8c>
     b48:	ldr	x0, [sp, #88]
     b4c:	ldr	x0, [x0, #24]
     b50:	add	x0, x0, #0x40
     b54:	bl	0 <gomp_mutex_lock>
     b58:	ldr	x1, [sp, #24]
     b5c:	ldr	x0, [sp, #32]
     b60:	bl	0 <gomp_iter_ull_guided_next_locked>
     b64:	strb	w0, [sp, #87]
     b68:	ldrb	w0, [sp, #87]
     b6c:	cmp	w0, #0x0
     b70:	b.eq	b78 <GOMP_loop_ull_ordered_guided_start+0xac>  // b.none
     b74:	bl	0 <gomp_ordered_first>
     b78:	ldr	x0, [sp, #88]
     b7c:	ldr	x0, [x0, #24]
     b80:	add	x0, x0, #0x40
     b84:	bl	74 <gomp_mutex_unlock>
     b88:	ldrb	w0, [sp, #87]
     b8c:	ldp	x29, x30, [sp], #96
     b90:	ret

0000000000000b94 <GOMP_loop_ull_ordered_runtime_start>:
     b94:	stp	x29, x30, [sp, #-80]!
     b98:	mov	x29, sp
     b9c:	strb	w0, [sp, #63]
     ba0:	str	x1, [sp, #48]
     ba4:	str	x2, [sp, #40]
     ba8:	str	x3, [sp, #32]
     bac:	str	x4, [sp, #24]
     bb0:	str	x5, [sp, #16]
     bb4:	mov	w0, #0x0                   	// #0
     bb8:	bl	11c <gomp_icv>
     bbc:	str	x0, [sp, #72]
     bc0:	ldr	x0, [sp, #72]
     bc4:	ldr	w0, [x0, #8]
     bc8:	and	w0, w0, #0x7fffffff
     bcc:	cmp	w0, #0x4
     bd0:	b.eq	c9c <GOMP_loop_ull_ordered_runtime_start+0x108>  // b.none
     bd4:	cmp	w0, #0x4
     bd8:	b.hi	cc4 <GOMP_loop_ull_ordered_runtime_start+0x130>  // b.pmore
     bdc:	cmp	w0, #0x3
     be0:	b.eq	c68 <GOMP_loop_ull_ordered_runtime_start+0xd4>  // b.none
     be4:	cmp	w0, #0x3
     be8:	b.hi	cc4 <GOMP_loop_ull_ordered_runtime_start+0x130>  // b.pmore
     bec:	cmp	w0, #0x1
     bf0:	b.eq	c00 <GOMP_loop_ull_ordered_runtime_start+0x6c>  // b.none
     bf4:	cmp	w0, #0x2
     bf8:	b.eq	c34 <GOMP_loop_ull_ordered_runtime_start+0xa0>  // b.none
     bfc:	b	cc4 <GOMP_loop_ull_ordered_runtime_start+0x130>
     c00:	ldr	x0, [sp, #72]
     c04:	ldr	w0, [x0, #12]
     c08:	sxtw	x0, w0
     c0c:	ldr	x6, [sp, #16]
     c10:	ldr	x5, [sp, #24]
     c14:	mov	x4, x0
     c18:	ldr	x3, [sp, #32]
     c1c:	ldr	x2, [sp, #40]
     c20:	ldr	x1, [sp, #48]
     c24:	ldrb	w0, [sp, #63]
     c28:	bl	970 <GOMP_loop_ull_ordered_static_start>
     c2c:	and	w0, w0, #0xff
     c30:	b	cc8 <GOMP_loop_ull_ordered_runtime_start+0x134>
     c34:	ldr	x0, [sp, #72]
     c38:	ldr	w0, [x0, #12]
     c3c:	sxtw	x0, w0
     c40:	ldr	x6, [sp, #16]
     c44:	ldr	x5, [sp, #24]
     c48:	mov	x4, x0
     c4c:	ldr	x3, [sp, #32]
     c50:	ldr	x2, [sp, #40]
     c54:	ldr	x1, [sp, #48]
     c58:	ldrb	w0, [sp, #63]
     c5c:	bl	a04 <GOMP_loop_ull_ordered_dynamic_start>
     c60:	and	w0, w0, #0xff
     c64:	b	cc8 <GOMP_loop_ull_ordered_runtime_start+0x134>
     c68:	ldr	x0, [sp, #72]
     c6c:	ldr	w0, [x0, #12]
     c70:	sxtw	x0, w0
     c74:	ldr	x6, [sp, #16]
     c78:	ldr	x5, [sp, #24]
     c7c:	mov	x4, x0
     c80:	ldr	x3, [sp, #32]
     c84:	ldr	x2, [sp, #40]
     c88:	ldr	x1, [sp, #48]
     c8c:	ldrb	w0, [sp, #63]
     c90:	bl	acc <GOMP_loop_ull_ordered_guided_start>
     c94:	and	w0, w0, #0xff
     c98:	b	cc8 <GOMP_loop_ull_ordered_runtime_start+0x134>
     c9c:	ldr	x6, [sp, #16]
     ca0:	ldr	x5, [sp, #24]
     ca4:	mov	x4, #0x0                   	// #0
     ca8:	ldr	x3, [sp, #32]
     cac:	ldr	x2, [sp, #40]
     cb0:	ldr	x1, [sp, #48]
     cb4:	ldrb	w0, [sp, #63]
     cb8:	bl	970 <GOMP_loop_ull_ordered_static_start>
     cbc:	and	w0, w0, #0xff
     cc0:	b	cc8 <GOMP_loop_ull_ordered_runtime_start+0x134>
     cc4:	bl	0 <abort>
     cc8:	ldp	x29, x30, [sp], #80
     ccc:	ret

0000000000000cd0 <GOMP_loop_ull_ordered_start>:
     cd0:	stp	x29, x30, [sp, #-128]!
     cd4:	mov	x29, sp
     cd8:	strb	w0, [sp, #79]
     cdc:	str	x1, [sp, #64]
     ce0:	str	x2, [sp, #56]
     ce4:	str	x3, [sp, #48]
     ce8:	str	x4, [sp, #40]
     cec:	str	x5, [sp, #32]
     cf0:	str	x6, [sp, #24]
     cf4:	str	x7, [sp, #16]
     cf8:	bl	108 <gomp_thread>
     cfc:	str	x0, [sp, #104]
     d00:	mov	x0, #0x1                   	// #1
     d04:	str	x0, [sp, #120]
     d08:	ldr	x0, [sp, #104]
     d0c:	str	xzr, [x0, #72]
     d10:	ldr	x0, [sp, #128]
     d14:	cmp	x0, #0x0
     d18:	b.eq	d20 <GOMP_loop_ull_ordered_start+0x50>  // b.none
     d1c:	bl	0 <gomp_workshare_taskgroup_start>
     d20:	ldr	x0, [sp, #136]
     d24:	cmp	x0, #0x0
     d28:	b.eq	d44 <GOMP_loop_ull_ordered_start+0x74>  // b.none
     d2c:	ldr	x0, [sp, #136]
     d30:	ldr	x0, [x0]
     d34:	mov	x1, x0
     d38:	ldr	x0, [sp, #120]
     d3c:	add	x0, x0, x1
     d40:	str	x0, [sp, #120]
     d44:	ldr	x0, [sp, #120]
     d48:	bl	0 <gomp_work_share_start>
     d4c:	and	w0, w0, #0xff
     d50:	cmp	w0, #0x0
     d54:	b.eq	e00 <GOMP_loop_ull_ordered_start+0x130>  // b.none
     d58:	add	x0, sp, #0x20
     d5c:	mov	x1, x0
     d60:	ldr	x0, [sp, #40]
     d64:	bl	6c8 <gomp_adjust_sched>
     d68:	str	x0, [sp, #40]
     d6c:	ldr	x0, [sp, #104]
     d70:	ldr	x0, [x0, #24]
     d74:	ldr	x1, [sp, #40]
     d78:	mov	w2, w1
     d7c:	ldr	x1, [sp, #32]
     d80:	mov	x6, x1
     d84:	mov	w5, w2
     d88:	ldr	x4, [sp, #48]
     d8c:	ldr	x3, [sp, #56]
     d90:	ldr	x2, [sp, #64]
     d94:	ldrb	w1, [sp, #79]
     d98:	bl	1cc <gomp_loop_ull_init>
     d9c:	ldr	x0, [sp, #128]
     da0:	cmp	x0, #0x0
     da4:	b.eq	dd4 <GOMP_loop_ull_ordered_start+0x104>  // b.none
     da8:	ldr	x0, [sp, #128]
     dac:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
     db0:	ldr	x0, [sp, #104]
     db4:	ldr	x0, [x0, #80]
     db8:	ldr	x0, [x0, #40]
     dbc:	mov	w1, #0x1                   	// #1
     dc0:	strb	w1, [x0, #50]
     dc4:	ldr	x0, [sp, #104]
     dc8:	ldr	x0, [x0, #24]
     dcc:	ldr	x1, [sp, #128]
     dd0:	str	x1, [x0, #88]
     dd4:	ldr	x0, [sp, #40]
     dd8:	cmp	x0, #0x1
     ddc:	b.ne	de8 <GOMP_loop_ull_ordered_start+0x118>  // b.any
     de0:	bl	0 <gomp_ordered_static_init>
     de4:	b	df8 <GOMP_loop_ull_ordered_start+0x128>
     de8:	ldr	x0, [sp, #104]
     dec:	ldr	x0, [x0, #24]
     df0:	add	x0, x0, #0x40
     df4:	bl	0 <gomp_mutex_lock>
     df8:	bl	170 <gomp_work_share_init_done>
     dfc:	b	e58 <GOMP_loop_ull_ordered_start+0x188>
     e00:	ldr	x0, [sp, #128]
     e04:	cmp	x0, #0x0
     e08:	b.eq	e28 <GOMP_loop_ull_ordered_start+0x158>  // b.none
     e0c:	ldr	x0, [sp, #104]
     e10:	ldr	x0, [x0, #24]
     e14:	ldr	x0, [x0, #88]
     e18:	str	x0, [sp, #96]
     e1c:	ldr	x1, [sp, #96]
     e20:	ldr	x0, [sp, #128]
     e24:	bl	0 <gomp_workshare_task_reduction_register>
     e28:	ldr	x0, [sp, #104]
     e2c:	ldr	x0, [x0, #24]
     e30:	ldr	w0, [x0]
     e34:	mov	w0, w0
     e38:	str	x0, [sp, #40]
     e3c:	ldr	x0, [sp, #40]
     e40:	cmp	x0, #0x1
     e44:	b.eq	e58 <GOMP_loop_ull_ordered_start+0x188>  // b.none
     e48:	ldr	x0, [sp, #104]
     e4c:	ldr	x0, [x0, #24]
     e50:	add	x0, x0, #0x40
     e54:	bl	0 <gomp_mutex_lock>
     e58:	ldr	x0, [sp, #136]
     e5c:	cmp	x0, #0x0
     e60:	b.eq	ec8 <GOMP_loop_ull_ordered_start+0x1f8>  // b.none
     e64:	ldr	x0, [sp, #104]
     e68:	ldr	x0, [x0, #24]
     e6c:	ldr	x1, [x0, #32]
     e70:	ldr	x0, [sp, #104]
     e74:	ldr	x0, [x0, #16]
     e78:	cmp	x0, #0x0
     e7c:	b.eq	e98 <GOMP_loop_ull_ordered_start+0x1c8>  // b.none
     e80:	ldr	x0, [sp, #104]
     e84:	ldr	x0, [x0, #16]
     e88:	ldr	w0, [x0]
     e8c:	mov	w0, w0
     e90:	lsl	x0, x0, #2
     e94:	b	e9c <GOMP_loop_ull_ordered_start+0x1cc>
     e98:	mov	x0, #0x4                   	// #4
     e9c:	add	x0, x1, x0
     ea0:	str	x0, [sp, #88]
     ea4:	ldr	x0, [sp, #88]
     ea8:	add	x0, x0, #0x7
     eac:	str	x0, [sp, #88]
     eb0:	ldr	x0, [sp, #88]
     eb4:	and	x0, x0, #0xfffffffffffffff8
     eb8:	str	x0, [sp, #88]
     ebc:	ldr	x1, [sp, #88]
     ec0:	ldr	x0, [sp, #136]
     ec4:	str	x1, [x0]
     ec8:	ldr	x0, [sp, #40]
     ecc:	cmp	x0, #0x4
     ed0:	b.eq	f14 <GOMP_loop_ull_ordered_start+0x244>  // b.none
     ed4:	ldr	x0, [sp, #40]
     ed8:	cmp	x0, #0x4
     edc:	b.gt	f58 <GOMP_loop_ull_ordered_start+0x288>
     ee0:	ldr	x0, [sp, #40]
     ee4:	cmp	x0, #0x3
     ee8:	b.eq	f44 <GOMP_loop_ull_ordered_start+0x274>  // b.none
     eec:	ldr	x0, [sp, #40]
     ef0:	cmp	x0, #0x3
     ef4:	b.gt	f58 <GOMP_loop_ull_ordered_start+0x288>
     ef8:	ldr	x0, [sp, #40]
     efc:	cmp	x0, #0x1
     f00:	b.eq	f14 <GOMP_loop_ull_ordered_start+0x244>  // b.none
     f04:	ldr	x0, [sp, #40]
     f08:	cmp	x0, #0x2
     f0c:	b.eq	f30 <GOMP_loop_ull_ordered_start+0x260>  // b.none
     f10:	b	f58 <GOMP_loop_ull_ordered_start+0x288>
     f14:	ldr	x1, [sp, #16]
     f18:	ldr	x0, [sp, #24]
     f1c:	bl	0 <gomp_iter_ull_static_next>
     f20:	cmp	w0, #0x0
     f24:	cset	w0, eq  // eq = none
     f28:	and	w0, w0, #0xff
     f2c:	b	f80 <GOMP_loop_ull_ordered_start+0x2b0>
     f30:	ldr	x1, [sp, #16]
     f34:	ldr	x0, [sp, #24]
     f38:	bl	0 <gomp_iter_ull_dynamic_next_locked>
     f3c:	strb	w0, [sp, #119]
     f40:	b	f5c <GOMP_loop_ull_ordered_start+0x28c>
     f44:	ldr	x1, [sp, #16]
     f48:	ldr	x0, [sp, #24]
     f4c:	bl	0 <gomp_iter_ull_guided_next_locked>
     f50:	strb	w0, [sp, #119]
     f54:	b	f5c <GOMP_loop_ull_ordered_start+0x28c>
     f58:	bl	0 <abort>
     f5c:	ldrb	w0, [sp, #119]
     f60:	cmp	w0, #0x0
     f64:	b.eq	f6c <GOMP_loop_ull_ordered_start+0x29c>  // b.none
     f68:	bl	0 <gomp_ordered_first>
     f6c:	ldr	x0, [sp, #104]
     f70:	ldr	x0, [x0, #24]
     f74:	add	x0, x0, #0x40
     f78:	bl	74 <gomp_mutex_unlock>
     f7c:	ldrb	w0, [sp, #119]
     f80:	ldp	x29, x30, [sp], #128
     f84:	ret

0000000000000f88 <GOMP_loop_ull_doacross_static_start>:
     f88:	stp	x29, x30, [sp, #-80]!
     f8c:	mov	x29, sp
     f90:	str	w0, [sp, #60]
     f94:	str	x1, [sp, #48]
     f98:	str	x2, [sp, #40]
     f9c:	str	x3, [sp, #32]
     fa0:	str	x4, [sp, #24]
     fa4:	bl	108 <gomp_thread>
     fa8:	str	x0, [sp, #72]
     fac:	ldr	x0, [sp, #72]
     fb0:	str	xzr, [x0, #72]
     fb4:	mov	x0, #0x0                   	// #0
     fb8:	bl	0 <gomp_work_share_start>
     fbc:	and	w0, w0, #0xff
     fc0:	cmp	w0, #0x0
     fc4:	b.eq	1010 <GOMP_loop_ull_doacross_static_start+0x88>  // b.none
     fc8:	ldr	x0, [sp, #72]
     fcc:	ldr	x7, [x0, #24]
     fd0:	ldr	x0, [sp, #48]
     fd4:	ldr	x0, [x0]
     fd8:	ldr	x6, [sp, #40]
     fdc:	mov	w5, #0x1                   	// #1
     fe0:	mov	x4, #0x1                   	// #1
     fe4:	mov	x3, x0
     fe8:	mov	x2, #0x0                   	// #0
     fec:	mov	w1, #0x1                   	// #1
     ff0:	mov	x0, x7
     ff4:	bl	1cc <gomp_loop_ull_init>
     ff8:	mov	x3, #0x0                   	// #0
     ffc:	ldr	x2, [sp, #40]
    1000:	ldr	x1, [sp, #48]
    1004:	ldr	w0, [sp, #60]
    1008:	bl	0 <gomp_doacross_ull_init>
    100c:	bl	170 <gomp_work_share_init_done>
    1010:	ldr	x1, [sp, #24]
    1014:	ldr	x0, [sp, #32]
    1018:	bl	0 <gomp_iter_ull_static_next>
    101c:	cmp	w0, #0x0
    1020:	cset	w0, eq  // eq = none
    1024:	and	w0, w0, #0xff
    1028:	ldp	x29, x30, [sp], #80
    102c:	ret

0000000000001030 <GOMP_loop_ull_doacross_dynamic_start>:
    1030:	stp	x29, x30, [sp, #-80]!
    1034:	mov	x29, sp
    1038:	str	w0, [sp, #60]
    103c:	str	x1, [sp, #48]
    1040:	str	x2, [sp, #40]
    1044:	str	x3, [sp, #32]
    1048:	str	x4, [sp, #24]
    104c:	bl	108 <gomp_thread>
    1050:	str	x0, [sp, #72]
    1054:	mov	x0, #0x0                   	// #0
    1058:	bl	0 <gomp_work_share_start>
    105c:	and	w0, w0, #0xff
    1060:	cmp	w0, #0x0
    1064:	b.eq	10b0 <GOMP_loop_ull_doacross_dynamic_start+0x80>  // b.none
    1068:	ldr	x0, [sp, #72]
    106c:	ldr	x7, [x0, #24]
    1070:	ldr	x0, [sp, #48]
    1074:	ldr	x0, [x0]
    1078:	ldr	x6, [sp, #40]
    107c:	mov	w5, #0x2                   	// #2
    1080:	mov	x4, #0x1                   	// #1
    1084:	mov	x3, x0
    1088:	mov	x2, #0x0                   	// #0
    108c:	mov	w1, #0x1                   	// #1
    1090:	mov	x0, x7
    1094:	bl	1cc <gomp_loop_ull_init>
    1098:	mov	x3, #0x0                   	// #0
    109c:	ldr	x2, [sp, #40]
    10a0:	ldr	x1, [sp, #48]
    10a4:	ldr	w0, [sp, #60]
    10a8:	bl	0 <gomp_doacross_ull_init>
    10ac:	bl	170 <gomp_work_share_init_done>
    10b0:	ldr	x1, [sp, #24]
    10b4:	ldr	x0, [sp, #32]
    10b8:	bl	0 <gomp_iter_ull_dynamic_next>
    10bc:	strb	w0, [sp, #71]
    10c0:	ldrb	w0, [sp, #71]
    10c4:	ldp	x29, x30, [sp], #80
    10c8:	ret

00000000000010cc <GOMP_loop_ull_doacross_guided_start>:
    10cc:	stp	x29, x30, [sp, #-80]!
    10d0:	mov	x29, sp
    10d4:	str	w0, [sp, #60]
    10d8:	str	x1, [sp, #48]
    10dc:	str	x2, [sp, #40]
    10e0:	str	x3, [sp, #32]
    10e4:	str	x4, [sp, #24]
    10e8:	bl	108 <gomp_thread>
    10ec:	str	x0, [sp, #72]
    10f0:	mov	x0, #0x0                   	// #0
    10f4:	bl	0 <gomp_work_share_start>
    10f8:	and	w0, w0, #0xff
    10fc:	cmp	w0, #0x0
    1100:	b.eq	114c <GOMP_loop_ull_doacross_guided_start+0x80>  // b.none
    1104:	ldr	x0, [sp, #72]
    1108:	ldr	x7, [x0, #24]
    110c:	ldr	x0, [sp, #48]
    1110:	ldr	x0, [x0]
    1114:	ldr	x6, [sp, #40]
    1118:	mov	w5, #0x3                   	// #3
    111c:	mov	x4, #0x1                   	// #1
    1120:	mov	x3, x0
    1124:	mov	x2, #0x0                   	// #0
    1128:	mov	w1, #0x1                   	// #1
    112c:	mov	x0, x7
    1130:	bl	1cc <gomp_loop_ull_init>
    1134:	mov	x3, #0x0                   	// #0
    1138:	ldr	x2, [sp, #40]
    113c:	ldr	x1, [sp, #48]
    1140:	ldr	w0, [sp, #60]
    1144:	bl	0 <gomp_doacross_ull_init>
    1148:	bl	170 <gomp_work_share_init_done>
    114c:	ldr	x1, [sp, #24]
    1150:	ldr	x0, [sp, #32]
    1154:	bl	0 <gomp_iter_ull_guided_next>
    1158:	strb	w0, [sp, #71]
    115c:	ldrb	w0, [sp, #71]
    1160:	ldp	x29, x30, [sp], #80
    1164:	ret

0000000000001168 <GOMP_loop_ull_doacross_runtime_start>:
    1168:	stp	x29, x30, [sp, #-64]!
    116c:	mov	x29, sp
    1170:	str	w0, [sp, #44]
    1174:	str	x1, [sp, #32]
    1178:	str	x2, [sp, #24]
    117c:	str	x3, [sp, #16]
    1180:	mov	w0, #0x0                   	// #0
    1184:	bl	11c <gomp_icv>
    1188:	str	x0, [sp, #56]
    118c:	ldr	x0, [sp, #56]
    1190:	ldr	w0, [x0, #8]
    1194:	and	w0, w0, #0x7fffffff
    1198:	cmp	w0, #0x4
    119c:	b.eq	1250 <GOMP_loop_ull_doacross_runtime_start+0xe8>  // b.none
    11a0:	cmp	w0, #0x4
    11a4:	b.hi	1270 <GOMP_loop_ull_doacross_runtime_start+0x108>  // b.pmore
    11a8:	cmp	w0, #0x3
    11ac:	b.eq	1224 <GOMP_loop_ull_doacross_runtime_start+0xbc>  // b.none
    11b0:	cmp	w0, #0x3
    11b4:	b.hi	1270 <GOMP_loop_ull_doacross_runtime_start+0x108>  // b.pmore
    11b8:	cmp	w0, #0x1
    11bc:	b.eq	11cc <GOMP_loop_ull_doacross_runtime_start+0x64>  // b.none
    11c0:	cmp	w0, #0x2
    11c4:	b.eq	11f8 <GOMP_loop_ull_doacross_runtime_start+0x90>  // b.none
    11c8:	b	1270 <GOMP_loop_ull_doacross_runtime_start+0x108>
    11cc:	ldr	x0, [sp, #56]
    11d0:	ldr	w0, [x0, #12]
    11d4:	sxtw	x0, w0
    11d8:	ldr	x4, [sp, #16]
    11dc:	ldr	x3, [sp, #24]
    11e0:	mov	x2, x0
    11e4:	ldr	x1, [sp, #32]
    11e8:	ldr	w0, [sp, #44]
    11ec:	bl	f88 <GOMP_loop_ull_doacross_static_start>
    11f0:	and	w0, w0, #0xff
    11f4:	b	1274 <GOMP_loop_ull_doacross_runtime_start+0x10c>
    11f8:	ldr	x0, [sp, #56]
    11fc:	ldr	w0, [x0, #12]
    1200:	sxtw	x0, w0
    1204:	ldr	x4, [sp, #16]
    1208:	ldr	x3, [sp, #24]
    120c:	mov	x2, x0
    1210:	ldr	x1, [sp, #32]
    1214:	ldr	w0, [sp, #44]
    1218:	bl	1030 <GOMP_loop_ull_doacross_dynamic_start>
    121c:	and	w0, w0, #0xff
    1220:	b	1274 <GOMP_loop_ull_doacross_runtime_start+0x10c>
    1224:	ldr	x0, [sp, #56]
    1228:	ldr	w0, [x0, #12]
    122c:	sxtw	x0, w0
    1230:	ldr	x4, [sp, #16]
    1234:	ldr	x3, [sp, #24]
    1238:	mov	x2, x0
    123c:	ldr	x1, [sp, #32]
    1240:	ldr	w0, [sp, #44]
    1244:	bl	10cc <GOMP_loop_ull_doacross_guided_start>
    1248:	and	w0, w0, #0xff
    124c:	b	1274 <GOMP_loop_ull_doacross_runtime_start+0x10c>
    1250:	ldr	x4, [sp, #16]
    1254:	ldr	x3, [sp, #24]
    1258:	mov	x2, #0x0                   	// #0
    125c:	ldr	x1, [sp, #32]
    1260:	ldr	w0, [sp, #44]
    1264:	bl	f88 <GOMP_loop_ull_doacross_static_start>
    1268:	and	w0, w0, #0xff
    126c:	b	1274 <GOMP_loop_ull_doacross_runtime_start+0x10c>
    1270:	bl	0 <abort>
    1274:	ldp	x29, x30, [sp], #64
    1278:	ret

000000000000127c <GOMP_loop_ull_doacross_start>:
    127c:	stp	x29, x30, [sp, #-112]!
    1280:	mov	x29, sp
    1284:	str	w0, [sp, #76]
    1288:	str	x1, [sp, #64]
    128c:	str	x2, [sp, #56]
    1290:	str	x3, [sp, #48]
    1294:	str	x4, [sp, #40]
    1298:	str	x5, [sp, #32]
    129c:	str	x6, [sp, #24]
    12a0:	str	x7, [sp, #16]
    12a4:	bl	108 <gomp_thread>
    12a8:	str	x0, [sp, #96]
    12ac:	ldr	x0, [sp, #96]
    12b0:	str	xzr, [x0, #72]
    12b4:	ldr	x0, [sp, #24]
    12b8:	cmp	x0, #0x0
    12bc:	b.eq	12c4 <GOMP_loop_ull_doacross_start+0x48>  // b.none
    12c0:	bl	0 <gomp_workshare_taskgroup_start>
    12c4:	mov	x0, #0x0                   	// #0
    12c8:	bl	0 <gomp_work_share_start>
    12cc:	and	w0, w0, #0xff
    12d0:	cmp	w0, #0x0
    12d4:	b.eq	139c <GOMP_loop_ull_doacross_start+0x120>  // b.none
    12d8:	str	xzr, [sp, #104]
    12dc:	ldr	x0, [sp, #16]
    12e0:	cmp	x0, #0x0
    12e4:	b.eq	12f4 <GOMP_loop_ull_doacross_start+0x78>  // b.none
    12e8:	ldr	x0, [sp, #16]
    12ec:	ldr	x0, [x0]
    12f0:	str	x0, [sp, #104]
    12f4:	add	x0, sp, #0x30
    12f8:	mov	x1, x0
    12fc:	ldr	x0, [sp, #56]
    1300:	bl	6c8 <gomp_adjust_sched>
    1304:	str	x0, [sp, #56]
    1308:	ldr	x0, [sp, #96]
    130c:	ldr	x7, [x0, #24]
    1310:	ldr	x0, [sp, #64]
    1314:	ldr	x0, [x0]
    1318:	ldr	x1, [sp, #56]
    131c:	mov	w2, w1
    1320:	ldr	x1, [sp, #48]
    1324:	mov	x6, x1
    1328:	mov	w5, w2
    132c:	mov	x4, #0x1                   	// #1
    1330:	mov	x3, x0
    1334:	mov	x2, #0x0                   	// #0
    1338:	mov	w1, #0x1                   	// #1
    133c:	mov	x0, x7
    1340:	bl	1cc <gomp_loop_ull_init>
    1344:	ldr	x0, [sp, #48]
    1348:	ldr	x3, [sp, #104]
    134c:	mov	x2, x0
    1350:	ldr	x1, [sp, #64]
    1354:	ldr	w0, [sp, #76]
    1358:	bl	0 <gomp_doacross_ull_init>
    135c:	ldr	x0, [sp, #24]
    1360:	cmp	x0, #0x0
    1364:	b.eq	1394 <GOMP_loop_ull_doacross_start+0x118>  // b.none
    1368:	ldr	x0, [sp, #24]
    136c:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
    1370:	ldr	x0, [sp, #96]
    1374:	ldr	x0, [x0, #80]
    1378:	ldr	x0, [x0, #40]
    137c:	mov	w1, #0x1                   	// #1
    1380:	strb	w1, [x0, #50]
    1384:	ldr	x0, [sp, #96]
    1388:	ldr	x0, [x0, #24]
    138c:	ldr	x1, [sp, #24]
    1390:	str	x1, [x0, #88]
    1394:	bl	170 <gomp_work_share_init_done>
    1398:	b	13d8 <GOMP_loop_ull_doacross_start+0x15c>
    139c:	ldr	x0, [sp, #24]
    13a0:	cmp	x0, #0x0
    13a4:	b.eq	13c4 <GOMP_loop_ull_doacross_start+0x148>  // b.none
    13a8:	ldr	x0, [sp, #96]
    13ac:	ldr	x0, [x0, #24]
    13b0:	ldr	x0, [x0, #88]
    13b4:	str	x0, [sp, #88]
    13b8:	ldr	x1, [sp, #88]
    13bc:	ldr	x0, [sp, #24]
    13c0:	bl	0 <gomp_workshare_task_reduction_register>
    13c4:	ldr	x0, [sp, #96]
    13c8:	ldr	x0, [x0, #24]
    13cc:	ldr	w0, [x0]
    13d0:	mov	w0, w0
    13d4:	str	x0, [sp, #56]
    13d8:	ldr	x0, [sp, #16]
    13dc:	cmp	x0, #0x0
    13e0:	b.eq	13fc <GOMP_loop_ull_doacross_start+0x180>  // b.none
    13e4:	ldr	x0, [sp, #96]
    13e8:	ldr	x0, [x0, #24]
    13ec:	ldr	x0, [x0, #32]
    13f0:	ldr	x1, [x0, #48]
    13f4:	ldr	x0, [sp, #16]
    13f8:	str	x1, [x0]
    13fc:	ldr	x1, [sp, #32]
    1400:	ldr	x0, [sp, #40]
    1404:	bl	149c <GOMP_loop_ull_maybe_nonmonotonic_runtime_next>
    1408:	and	w0, w0, #0xff
    140c:	ldp	x29, x30, [sp], #112
    1410:	ret

0000000000001414 <GOMP_loop_ull_static_next>:
    1414:	stp	x29, x30, [sp, #-32]!
    1418:	mov	x29, sp
    141c:	str	x0, [sp, #24]
    1420:	str	x1, [sp, #16]
    1424:	ldr	x1, [sp, #16]
    1428:	ldr	x0, [sp, #24]
    142c:	bl	0 <gomp_iter_ull_static_next>
    1430:	cmp	w0, #0x0
    1434:	cset	w0, eq  // eq = none
    1438:	and	w0, w0, #0xff
    143c:	ldp	x29, x30, [sp], #32
    1440:	ret

0000000000001444 <GOMP_loop_ull_dynamic_next>:
    1444:	stp	x29, x30, [sp, #-48]!
    1448:	mov	x29, sp
    144c:	str	x0, [sp, #24]
    1450:	str	x1, [sp, #16]
    1454:	ldr	x1, [sp, #16]
    1458:	ldr	x0, [sp, #24]
    145c:	bl	0 <gomp_iter_ull_dynamic_next>
    1460:	strb	w0, [sp, #47]
    1464:	ldrb	w0, [sp, #47]
    1468:	ldp	x29, x30, [sp], #48
    146c:	ret

0000000000001470 <GOMP_loop_ull_guided_next>:
    1470:	stp	x29, x30, [sp, #-48]!
    1474:	mov	x29, sp
    1478:	str	x0, [sp, #24]
    147c:	str	x1, [sp, #16]
    1480:	ldr	x1, [sp, #16]
    1484:	ldr	x0, [sp, #24]
    1488:	bl	0 <gomp_iter_ull_guided_next>
    148c:	strb	w0, [sp, #47]
    1490:	ldrb	w0, [sp, #47]
    1494:	ldp	x29, x30, [sp], #48
    1498:	ret

000000000000149c <GOMP_loop_ull_maybe_nonmonotonic_runtime_next>:
    149c:	stp	x29, x30, [sp, #-48]!
    14a0:	mov	x29, sp
    14a4:	str	x0, [sp, #24]
    14a8:	str	x1, [sp, #16]
    14ac:	bl	108 <gomp_thread>
    14b0:	str	x0, [sp, #40]
    14b4:	ldr	x0, [sp, #40]
    14b8:	ldr	x0, [x0, #24]
    14bc:	ldr	w0, [x0]
    14c0:	cmp	w0, #0x4
    14c4:	b.eq	14f4 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x58>  // b.none
    14c8:	cmp	w0, #0x4
    14cc:	b.hi	1530 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x94>  // b.pmore
    14d0:	cmp	w0, #0x3
    14d4:	b.eq	151c <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x80>  // b.none
    14d8:	cmp	w0, #0x3
    14dc:	b.hi	1530 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x94>  // b.pmore
    14e0:	cmp	w0, #0x1
    14e4:	b.eq	14f4 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x58>  // b.none
    14e8:	cmp	w0, #0x2
    14ec:	b.eq	1508 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x6c>  // b.none
    14f0:	b	1530 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x94>
    14f4:	ldr	x1, [sp, #16]
    14f8:	ldr	x0, [sp, #24]
    14fc:	bl	1414 <GOMP_loop_ull_static_next>
    1500:	and	w0, w0, #0xff
    1504:	b	1534 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x98>
    1508:	ldr	x1, [sp, #16]
    150c:	ldr	x0, [sp, #24]
    1510:	bl	1444 <GOMP_loop_ull_dynamic_next>
    1514:	and	w0, w0, #0xff
    1518:	b	1534 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x98>
    151c:	ldr	x1, [sp, #16]
    1520:	ldr	x0, [sp, #24]
    1524:	bl	1470 <GOMP_loop_ull_guided_next>
    1528:	and	w0, w0, #0xff
    152c:	b	1534 <GOMP_loop_ull_maybe_nonmonotonic_runtime_next+0x98>
    1530:	bl	0 <abort>
    1534:	ldp	x29, x30, [sp], #48
    1538:	ret

000000000000153c <GOMP_loop_ull_ordered_static_next>:
    153c:	stp	x29, x30, [sp, #-48]!
    1540:	mov	x29, sp
    1544:	str	x0, [sp, #24]
    1548:	str	x1, [sp, #16]
    154c:	bl	108 <gomp_thread>
    1550:	str	x0, [sp, #40]
    1554:	bl	0 <gomp_ordered_sync>
    1558:	ldr	x0, [sp, #40]
    155c:	ldr	x0, [x0, #24]
    1560:	add	x0, x0, #0x40
    1564:	bl	0 <gomp_mutex_lock>
    1568:	ldr	x1, [sp, #16]
    156c:	ldr	x0, [sp, #24]
    1570:	bl	0 <gomp_iter_ull_static_next>
    1574:	str	w0, [sp, #36]
    1578:	ldr	w0, [sp, #36]
    157c:	cmp	w0, #0x0
    1580:	b.lt	1588 <GOMP_loop_ull_ordered_static_next+0x4c>  // b.tstop
    1584:	bl	0 <gomp_ordered_static_next>
    1588:	ldr	x0, [sp, #40]
    158c:	ldr	x0, [x0, #24]
    1590:	add	x0, x0, #0x40
    1594:	bl	74 <gomp_mutex_unlock>
    1598:	ldr	w0, [sp, #36]
    159c:	cmp	w0, #0x0
    15a0:	cset	w0, eq  // eq = none
    15a4:	and	w0, w0, #0xff
    15a8:	ldp	x29, x30, [sp], #48
    15ac:	ret

00000000000015b0 <GOMP_loop_ull_ordered_dynamic_next>:
    15b0:	stp	x29, x30, [sp, #-48]!
    15b4:	mov	x29, sp
    15b8:	str	x0, [sp, #24]
    15bc:	str	x1, [sp, #16]
    15c0:	bl	108 <gomp_thread>
    15c4:	str	x0, [sp, #40]
    15c8:	bl	0 <gomp_ordered_sync>
    15cc:	ldr	x0, [sp, #40]
    15d0:	ldr	x0, [x0, #24]
    15d4:	add	x0, x0, #0x40
    15d8:	bl	0 <gomp_mutex_lock>
    15dc:	ldr	x1, [sp, #16]
    15e0:	ldr	x0, [sp, #24]
    15e4:	bl	0 <gomp_iter_ull_dynamic_next_locked>
    15e8:	strb	w0, [sp, #39]
    15ec:	ldrb	w0, [sp, #39]
    15f0:	cmp	w0, #0x0
    15f4:	b.eq	1600 <GOMP_loop_ull_ordered_dynamic_next+0x50>  // b.none
    15f8:	bl	0 <gomp_ordered_next>
    15fc:	b	1604 <GOMP_loop_ull_ordered_dynamic_next+0x54>
    1600:	bl	0 <gomp_ordered_last>
    1604:	ldr	x0, [sp, #40]
    1608:	ldr	x0, [x0, #24]
    160c:	add	x0, x0, #0x40
    1610:	bl	74 <gomp_mutex_unlock>
    1614:	ldrb	w0, [sp, #39]
    1618:	ldp	x29, x30, [sp], #48
    161c:	ret

0000000000001620 <GOMP_loop_ull_ordered_guided_next>:
    1620:	stp	x29, x30, [sp, #-48]!
    1624:	mov	x29, sp
    1628:	str	x0, [sp, #24]
    162c:	str	x1, [sp, #16]
    1630:	bl	108 <gomp_thread>
    1634:	str	x0, [sp, #40]
    1638:	bl	0 <gomp_ordered_sync>
    163c:	ldr	x0, [sp, #40]
    1640:	ldr	x0, [x0, #24]
    1644:	add	x0, x0, #0x40
    1648:	bl	0 <gomp_mutex_lock>
    164c:	ldr	x1, [sp, #16]
    1650:	ldr	x0, [sp, #24]
    1654:	bl	0 <gomp_iter_ull_guided_next_locked>
    1658:	strb	w0, [sp, #39]
    165c:	ldrb	w0, [sp, #39]
    1660:	cmp	w0, #0x0
    1664:	b.eq	1670 <GOMP_loop_ull_ordered_guided_next+0x50>  // b.none
    1668:	bl	0 <gomp_ordered_next>
    166c:	b	1674 <GOMP_loop_ull_ordered_guided_next+0x54>
    1670:	bl	0 <gomp_ordered_last>
    1674:	ldr	x0, [sp, #40]
    1678:	ldr	x0, [x0, #24]
    167c:	add	x0, x0, #0x40
    1680:	bl	74 <gomp_mutex_unlock>
    1684:	ldrb	w0, [sp, #39]
    1688:	ldp	x29, x30, [sp], #48
    168c:	ret

0000000000001690 <GOMP_loop_ull_ordered_runtime_next>:
    1690:	stp	x29, x30, [sp, #-48]!
    1694:	mov	x29, sp
    1698:	str	x0, [sp, #24]
    169c:	str	x1, [sp, #16]
    16a0:	bl	108 <gomp_thread>
    16a4:	str	x0, [sp, #40]
    16a8:	ldr	x0, [sp, #40]
    16ac:	ldr	x0, [x0, #24]
    16b0:	ldr	w0, [x0]
    16b4:	cmp	w0, #0x4
    16b8:	b.eq	16e8 <GOMP_loop_ull_ordered_runtime_next+0x58>  // b.none
    16bc:	cmp	w0, #0x4
    16c0:	b.hi	1724 <GOMP_loop_ull_ordered_runtime_next+0x94>  // b.pmore
    16c4:	cmp	w0, #0x3
    16c8:	b.eq	1710 <GOMP_loop_ull_ordered_runtime_next+0x80>  // b.none
    16cc:	cmp	w0, #0x3
    16d0:	b.hi	1724 <GOMP_loop_ull_ordered_runtime_next+0x94>  // b.pmore
    16d4:	cmp	w0, #0x1
    16d8:	b.eq	16e8 <GOMP_loop_ull_ordered_runtime_next+0x58>  // b.none
    16dc:	cmp	w0, #0x2
    16e0:	b.eq	16fc <GOMP_loop_ull_ordered_runtime_next+0x6c>  // b.none
    16e4:	b	1724 <GOMP_loop_ull_ordered_runtime_next+0x94>
    16e8:	ldr	x1, [sp, #16]
    16ec:	ldr	x0, [sp, #24]
    16f0:	bl	153c <GOMP_loop_ull_ordered_static_next>
    16f4:	and	w0, w0, #0xff
    16f8:	b	1728 <GOMP_loop_ull_ordered_runtime_next+0x98>
    16fc:	ldr	x1, [sp, #16]
    1700:	ldr	x0, [sp, #24]
    1704:	bl	15b0 <GOMP_loop_ull_ordered_dynamic_next>
    1708:	and	w0, w0, #0xff
    170c:	b	1728 <GOMP_loop_ull_ordered_runtime_next+0x98>
    1710:	ldr	x1, [sp, #16]
    1714:	ldr	x0, [sp, #24]
    1718:	bl	1620 <GOMP_loop_ull_ordered_guided_next>
    171c:	and	w0, w0, #0xff
    1720:	b	1728 <GOMP_loop_ull_ordered_runtime_next+0x98>
    1724:	bl	0 <abort>
    1728:	ldp	x29, x30, [sp], #48
    172c:	ret

ordered.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_sem_wait>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #24]
       c:	ldr	x0, [sp, #24]
      10:	ldr	w0, [x0]
      14:	str	w0, [sp, #44]
      18:	b	64 <gomp_sem_wait+0x64>
      1c:	ldr	w0, [sp, #44]
      20:	sub	w0, w0, #0x1
      24:	mov	w4, w0
      28:	ldr	x1, [sp, #24]
      2c:	add	x0, sp, #0x2c
      30:	ldr	w3, [x0]
      34:	ldaxr	w2, [x1]
      38:	cmp	w2, w3
      3c:	b.ne	48 <gomp_sem_wait+0x48>  // b.any
      40:	stxr	w5, w4, [x1]
      44:	cmp	w5, #0x0
      48:	cset	w1, eq  // eq = none
      4c:	cmp	w1, #0x0
      50:	b.ne	58 <gomp_sem_wait+0x58>  // b.any
      54:	str	w2, [x0]
      58:	mov	w0, w1
      5c:	cmp	w0, #0x0
      60:	b.ne	88 <gomp_sem_wait+0x88>  // b.any
      64:	ldr	w0, [sp, #44]
      68:	and	w0, w0, #0x7fffffff
      6c:	cmp	w0, #0x0
      70:	b.ne	1c <gomp_sem_wait+0x1c>  // b.any
      74:	ldr	w0, [sp, #44]
      78:	mov	w1, w0
      7c:	ldr	x0, [sp, #24]
      80:	bl	0 <gomp_sem_wait_slow>
      84:	b	8c <gomp_sem_wait+0x8c>
      88:	nop
      8c:	ldp	x29, x30, [sp], #48
      90:	ret

0000000000000094 <gomp_sem_post>:
      94:	stp	x29, x30, [sp, #-48]!
      98:	mov	x29, sp
      9c:	str	x0, [sp, #24]
      a0:	ldr	x0, [sp, #24]
      a4:	ldr	w0, [x0]
      a8:	str	w0, [sp, #44]
      ac:	b	b4 <gomp_sem_post+0x20>
      b0:	nop
      b4:	ldr	w0, [sp, #44]
      b8:	add	w0, w0, #0x1
      bc:	and	w4, w0, #0x7fffffff
      c0:	ldr	x1, [sp, #24]
      c4:	add	x0, sp, #0x2c
      c8:	ldr	w3, [x0]
      cc:	ldxr	w2, [x1]
      d0:	cmp	w2, w3
      d4:	b.ne	e0 <gomp_sem_post+0x4c>  // b.any
      d8:	stlxr	w5, w4, [x1]
      dc:	cmp	w5, #0x0
      e0:	cset	w1, eq  // eq = none
      e4:	cmp	w1, #0x0
      e8:	b.ne	f0 <gomp_sem_post+0x5c>  // b.any
      ec:	str	w2, [x0]
      f0:	mov	w0, w1
      f4:	eor	w0, w0, #0x1
      f8:	and	w0, w0, #0xff
      fc:	cmp	w0, #0x0
     100:	b.ne	b0 <gomp_sem_post+0x1c>  // b.any
     104:	ldr	w0, [sp, #44]
     108:	and	w0, w0, #0x80000000
     10c:	sxtw	x0, w0
     110:	cmp	x0, #0x0
     114:	b.eq	120 <gomp_sem_post+0x8c>  // b.none
     118:	ldr	x0, [sp, #24]
     11c:	bl	0 <gomp_sem_post_slow>
     120:	nop
     124:	ldp	x29, x30, [sp], #48
     128:	ret

000000000000012c <gomp_thread>:
     12c:	mrs	x1, tpidr_el0
     130:	adrp	x0, 0 <gomp_tls_data>
     134:	ldr	x0, [x0]
     138:	add	x0, x1, x0
     13c:	ret

0000000000000140 <cpu_relax>:
     140:	nop
     144:	ret

0000000000000148 <doacross_spin>:
     148:	stp	x29, x30, [sp, #-48]!
     14c:	mov	x29, sp
     150:	str	x0, [sp, #40]
     154:	str	x1, [sp, #32]
     158:	str	x2, [sp, #24]
     15c:	bl	140 <cpu_relax>
     160:	ldr	x0, [sp, #40]
     164:	ldr	x0, [x0]
     168:	str	x0, [sp, #24]
     16c:	ldr	x1, [sp, #32]
     170:	ldr	x0, [sp, #24]
     174:	cmp	x1, x0
     178:	b.cc	180 <doacross_spin+0x38>  // b.lo, b.ul, b.last
     17c:	b	15c <doacross_spin+0x14>
     180:	nop
     184:	ldp	x29, x30, [sp], #48
     188:	ret

000000000000018c <gomp_ordered_first>:
     18c:	stp	x29, x30, [sp, #-48]!
     190:	mov	x29, sp
     194:	bl	12c <gomp_thread>
     198:	str	x0, [sp, #32]
     19c:	ldr	x0, [sp, #32]
     1a0:	ldr	x0, [x0, #16]
     1a4:	str	x0, [sp, #24]
     1a8:	ldr	x0, [sp, #32]
     1ac:	ldr	x0, [x0, #24]
     1b0:	str	x0, [sp, #16]
     1b4:	ldr	x0, [sp, #24]
     1b8:	cmp	x0, #0x0
     1bc:	b.eq	274 <gomp_ordered_first+0xe8>  // b.none
     1c0:	ldr	x0, [sp, #24]
     1c4:	ldr	w0, [x0]
     1c8:	cmp	w0, #0x1
     1cc:	b.eq	274 <gomp_ordered_first+0xe8>  // b.none
     1d0:	ldr	x0, [sp, #16]
     1d4:	ldr	w1, [x0, #48]
     1d8:	ldr	x0, [sp, #16]
     1dc:	ldr	w0, [x0, #40]
     1e0:	add	w0, w1, w0
     1e4:	str	w0, [sp, #44]
     1e8:	ldr	x0, [sp, #24]
     1ec:	ldr	w0, [x0]
     1f0:	ldr	w1, [sp, #44]
     1f4:	cmp	w1, w0
     1f8:	b.cc	210 <gomp_ordered_first+0x84>  // b.lo, b.ul, b.last
     1fc:	ldr	x0, [sp, #24]
     200:	ldr	w0, [x0]
     204:	ldr	w1, [sp, #44]
     208:	sub	w0, w1, w0
     20c:	str	w0, [sp, #44]
     210:	ldr	x0, [sp, #16]
     214:	ldr	x1, [x0, #32]
     218:	ldr	w0, [sp, #44]
     21c:	lsl	x0, x0, #2
     220:	add	x0, x1, x0
     224:	ldr	x1, [sp, #32]
     228:	ldr	w1, [x1, #40]
     22c:	str	w1, [x0]
     230:	ldr	x0, [sp, #16]
     234:	ldr	w0, [x0, #40]
     238:	add	w2, w0, #0x1
     23c:	ldr	x1, [sp, #16]
     240:	str	w2, [x1, #40]
     244:	cmp	w0, #0x0
     248:	b.ne	278 <gomp_ordered_first+0xec>  // b.any
     24c:	ldr	x0, [sp, #24]
     250:	ldr	x1, [x0, #80]
     254:	ldr	x0, [sp, #32]
     258:	ldr	w0, [x0, #40]
     25c:	mov	w0, w0
     260:	lsl	x0, x0, #3
     264:	add	x0, x1, x0
     268:	ldr	x0, [x0]
     26c:	bl	94 <gomp_sem_post>
     270:	b	278 <gomp_ordered_first+0xec>
     274:	nop
     278:	ldp	x29, x30, [sp], #48
     27c:	ret

0000000000000280 <gomp_ordered_last>:
     280:	stp	x29, x30, [sp, #-64]!
     284:	mov	x29, sp
     288:	bl	12c <gomp_thread>
     28c:	str	x0, [sp, #48]
     290:	ldr	x0, [sp, #48]
     294:	ldr	x0, [x0, #16]
     298:	str	x0, [sp, #40]
     29c:	ldr	x0, [sp, #48]
     2a0:	ldr	x0, [x0, #24]
     2a4:	str	x0, [sp, #32]
     2a8:	ldr	x0, [sp, #40]
     2ac:	cmp	x0, #0x0
     2b0:	b.eq	364 <gomp_ordered_last+0xe4>  // b.none
     2b4:	ldr	x0, [sp, #40]
     2b8:	ldr	w0, [x0]
     2bc:	cmp	w0, #0x1
     2c0:	b.eq	364 <gomp_ordered_last+0xe4>  // b.none
     2c4:	ldr	x0, [sp, #32]
     2c8:	mov	w1, #0xffffffff            	// #-1
     2cc:	str	w1, [x0, #44]
     2d0:	ldr	x0, [sp, #32]
     2d4:	ldr	w0, [x0, #40]
     2d8:	sub	w1, w0, #0x1
     2dc:	ldr	x0, [sp, #32]
     2e0:	str	w1, [x0, #40]
     2e4:	ldr	x0, [sp, #32]
     2e8:	ldr	w0, [x0, #40]
     2ec:	cmp	w0, #0x0
     2f0:	b.eq	368 <gomp_ordered_last+0xe8>  // b.none
     2f4:	ldr	x0, [sp, #32]
     2f8:	ldr	w0, [x0, #48]
     2fc:	add	w0, w0, #0x1
     300:	str	w0, [sp, #60]
     304:	ldr	x0, [sp, #40]
     308:	ldr	w0, [x0]
     30c:	ldr	w1, [sp, #60]
     310:	cmp	w1, w0
     314:	b.ne	31c <gomp_ordered_last+0x9c>  // b.any
     318:	str	wzr, [sp, #60]
     31c:	ldr	x0, [sp, #32]
     320:	ldr	w1, [sp, #60]
     324:	str	w1, [x0, #48]
     328:	ldr	x0, [sp, #32]
     32c:	ldr	x1, [x0, #32]
     330:	ldr	w0, [sp, #60]
     334:	lsl	x0, x0, #2
     338:	add	x0, x1, x0
     33c:	ldr	w0, [x0]
     340:	str	w0, [sp, #28]
     344:	ldr	x0, [sp, #40]
     348:	ldr	x1, [x0, #80]
     34c:	ldr	w0, [sp, #28]
     350:	lsl	x0, x0, #3
     354:	add	x0, x1, x0
     358:	ldr	x0, [x0]
     35c:	bl	94 <gomp_sem_post>
     360:	b	368 <gomp_ordered_last+0xe8>
     364:	nop
     368:	ldp	x29, x30, [sp], #64
     36c:	ret

0000000000000370 <gomp_ordered_next>:
     370:	stp	x29, x30, [sp, #-64]!
     374:	mov	x29, sp
     378:	bl	12c <gomp_thread>
     37c:	str	x0, [sp, #48]
     380:	ldr	x0, [sp, #48]
     384:	ldr	x0, [x0, #16]
     388:	str	x0, [sp, #40]
     38c:	ldr	x0, [sp, #48]
     390:	ldr	x0, [x0, #24]
     394:	str	x0, [sp, #32]
     398:	ldr	x0, [sp, #40]
     39c:	cmp	x0, #0x0
     3a0:	b.eq	4e0 <gomp_ordered_next+0x170>  // b.none
     3a4:	ldr	x0, [sp, #40]
     3a8:	ldr	w0, [x0]
     3ac:	cmp	w0, #0x1
     3b0:	b.eq	4e0 <gomp_ordered_next+0x170>  // b.none
     3b4:	ldr	x0, [sp, #32]
     3b8:	mov	w1, #0xffffffff            	// #-1
     3bc:	str	w1, [x0, #44]
     3c0:	ldr	x0, [sp, #32]
     3c4:	ldr	w0, [x0, #40]
     3c8:	cmp	w0, #0x1
     3cc:	b.ne	3f8 <gomp_ordered_next+0x88>  // b.any
     3d0:	ldr	x0, [sp, #40]
     3d4:	ldr	x1, [x0, #80]
     3d8:	ldr	x0, [sp, #48]
     3dc:	ldr	w0, [x0, #40]
     3e0:	mov	w0, w0
     3e4:	lsl	x0, x0, #3
     3e8:	add	x0, x1, x0
     3ec:	ldr	x0, [x0]
     3f0:	bl	94 <gomp_sem_post>
     3f4:	b	4e4 <gomp_ordered_next+0x174>
     3f8:	ldr	x0, [sp, #32]
     3fc:	ldr	w1, [x0, #40]
     400:	ldr	x0, [sp, #40]
     404:	ldr	w0, [x0]
     408:	cmp	w1, w0
     40c:	b.cs	470 <gomp_ordered_next+0x100>  // b.hs, b.nlast
     410:	ldr	x0, [sp, #32]
     414:	ldr	w1, [x0, #48]
     418:	ldr	x0, [sp, #32]
     41c:	ldr	w0, [x0, #40]
     420:	add	w0, w1, w0
     424:	str	w0, [sp, #60]
     428:	ldr	x0, [sp, #40]
     42c:	ldr	w0, [x0]
     430:	ldr	w1, [sp, #60]
     434:	cmp	w1, w0
     438:	b.cc	450 <gomp_ordered_next+0xe0>  // b.lo, b.ul, b.last
     43c:	ldr	x0, [sp, #40]
     440:	ldr	w0, [x0]
     444:	ldr	w1, [sp, #60]
     448:	sub	w0, w1, w0
     44c:	str	w0, [sp, #60]
     450:	ldr	x0, [sp, #32]
     454:	ldr	x1, [x0, #32]
     458:	ldr	w0, [sp, #60]
     45c:	lsl	x0, x0, #2
     460:	add	x0, x1, x0
     464:	ldr	x1, [sp, #48]
     468:	ldr	w1, [x1, #40]
     46c:	str	w1, [x0]
     470:	ldr	x0, [sp, #32]
     474:	ldr	w0, [x0, #48]
     478:	add	w0, w0, #0x1
     47c:	str	w0, [sp, #60]
     480:	ldr	x0, [sp, #40]
     484:	ldr	w0, [x0]
     488:	ldr	w1, [sp, #60]
     48c:	cmp	w1, w0
     490:	b.ne	498 <gomp_ordered_next+0x128>  // b.any
     494:	str	wzr, [sp, #60]
     498:	ldr	x0, [sp, #32]
     49c:	ldr	w1, [sp, #60]
     4a0:	str	w1, [x0, #48]
     4a4:	ldr	x0, [sp, #32]
     4a8:	ldr	x1, [x0, #32]
     4ac:	ldr	w0, [sp, #60]
     4b0:	lsl	x0, x0, #2
     4b4:	add	x0, x1, x0
     4b8:	ldr	w0, [x0]
     4bc:	str	w0, [sp, #28]
     4c0:	ldr	x0, [sp, #40]
     4c4:	ldr	x1, [x0, #80]
     4c8:	ldr	w0, [sp, #28]
     4cc:	lsl	x0, x0, #3
     4d0:	add	x0, x1, x0
     4d4:	ldr	x0, [x0]
     4d8:	bl	94 <gomp_sem_post>
     4dc:	b	4e4 <gomp_ordered_next+0x174>
     4e0:	nop
     4e4:	ldp	x29, x30, [sp], #64
     4e8:	ret

00000000000004ec <gomp_ordered_static_init>:
     4ec:	stp	x29, x30, [sp, #-32]!
     4f0:	mov	x29, sp
     4f4:	bl	12c <gomp_thread>
     4f8:	str	x0, [sp, #24]
     4fc:	ldr	x0, [sp, #24]
     500:	ldr	x0, [x0, #16]
     504:	str	x0, [sp, #16]
     508:	ldr	x0, [sp, #16]
     50c:	cmp	x0, #0x0
     510:	b.eq	538 <gomp_ordered_static_init+0x4c>  // b.none
     514:	ldr	x0, [sp, #16]
     518:	ldr	w0, [x0]
     51c:	cmp	w0, #0x1
     520:	b.eq	538 <gomp_ordered_static_init+0x4c>  // b.none
     524:	ldr	x0, [sp, #16]
     528:	ldr	x0, [x0, #80]
     52c:	ldr	x0, [x0]
     530:	bl	94 <gomp_sem_post>
     534:	b	53c <gomp_ordered_static_init+0x50>
     538:	nop
     53c:	ldp	x29, x30, [sp], #32
     540:	ret

0000000000000544 <gomp_ordered_static_next>:
     544:	stp	x29, x30, [sp, #-48]!
     548:	mov	x29, sp
     54c:	bl	12c <gomp_thread>
     550:	str	x0, [sp, #32]
     554:	ldr	x0, [sp, #32]
     558:	ldr	x0, [x0, #16]
     55c:	str	x0, [sp, #24]
     560:	ldr	x0, [sp, #32]
     564:	ldr	x0, [x0, #24]
     568:	str	x0, [sp, #16]
     56c:	ldr	x0, [sp, #32]
     570:	ldr	w0, [x0, #40]
     574:	str	w0, [sp, #44]
     578:	ldr	x0, [sp, #24]
     57c:	cmp	x0, #0x0
     580:	b.eq	5f4 <gomp_ordered_static_next+0xb0>  // b.none
     584:	ldr	x0, [sp, #24]
     588:	ldr	w0, [x0]
     58c:	cmp	w0, #0x1
     590:	b.eq	5f4 <gomp_ordered_static_next+0xb0>  // b.none
     594:	ldr	x0, [sp, #16]
     598:	mov	w1, #0xffffffff            	// #-1
     59c:	str	w1, [x0, #44]
     5a0:	ldr	w0, [sp, #44]
     5a4:	add	w0, w0, #0x1
     5a8:	str	w0, [sp, #44]
     5ac:	ldr	x0, [sp, #24]
     5b0:	ldr	w0, [x0]
     5b4:	ldr	w1, [sp, #44]
     5b8:	cmp	w1, w0
     5bc:	b.ne	5c4 <gomp_ordered_static_next+0x80>  // b.any
     5c0:	str	wzr, [sp, #44]
     5c4:	ldr	x0, [sp, #16]
     5c8:	ldr	x0, [x0, #32]
     5cc:	ldr	w1, [sp, #44]
     5d0:	str	w1, [x0]
     5d4:	ldr	x0, [sp, #24]
     5d8:	ldr	x1, [x0, #80]
     5dc:	ldr	w0, [sp, #44]
     5e0:	lsl	x0, x0, #3
     5e4:	add	x0, x1, x0
     5e8:	ldr	x0, [x0]
     5ec:	bl	94 <gomp_sem_post>
     5f0:	b	5f8 <gomp_ordered_static_next+0xb4>
     5f4:	nop
     5f8:	ldp	x29, x30, [sp], #48
     5fc:	ret

0000000000000600 <GOMP_ordered_start>:
     600:	stp	x29, x30, [sp, #-48]!
     604:	mov	x29, sp
     608:	bl	12c <gomp_thread>
     60c:	str	x0, [sp, #40]
     610:	ldr	x0, [sp, #40]
     614:	ldr	x0, [x0, #16]
     618:	str	x0, [sp, #32]
     61c:	ldr	x0, [sp, #40]
     620:	ldr	x0, [x0, #24]
     624:	str	x0, [sp, #24]
     628:	ldr	x0, [sp, #32]
     62c:	cmp	x0, #0x0
     630:	b.eq	698 <GOMP_ordered_start+0x98>  // b.none
     634:	ldr	x0, [sp, #32]
     638:	ldr	w0, [x0]
     63c:	cmp	w0, #0x1
     640:	b.eq	698 <GOMP_ordered_start+0x98>  // b.none
     644:	dmb	ish
     648:	ldr	x0, [sp, #24]
     64c:	ldr	w1, [x0, #44]
     650:	ldr	x0, [sp, #40]
     654:	ldr	w0, [x0, #40]
     658:	cmp	w1, w0
     65c:	b.eq	69c <GOMP_ordered_start+0x9c>  // b.none
     660:	ldr	x0, [sp, #32]
     664:	ldr	x1, [x0, #80]
     668:	ldr	x0, [sp, #40]
     66c:	ldr	w0, [x0, #40]
     670:	mov	w0, w0
     674:	lsl	x0, x0, #3
     678:	add	x0, x1, x0
     67c:	ldr	x0, [x0]
     680:	bl	0 <gomp_sem_wait>
     684:	ldr	x0, [sp, #40]
     688:	ldr	w1, [x0, #40]
     68c:	ldr	x0, [sp, #24]
     690:	str	w1, [x0, #44]
     694:	b	69c <GOMP_ordered_start+0x9c>
     698:	nop
     69c:	ldp	x29, x30, [sp], #48
     6a0:	ret

00000000000006a4 <GOMP_ordered_end>:
     6a4:	nop
     6a8:	ret

00000000000006ac <gomp_doacross_init>:
     6ac:	stp	x29, x30, [sp, #-400]!
     6b0:	mov	x29, sp
     6b4:	str	w0, [sp, #44]
     6b8:	str	x1, [sp, #32]
     6bc:	str	x2, [sp, #24]
     6c0:	str	x3, [sp, #16]
     6c4:	bl	12c <gomp_thread>
     6c8:	str	x0, [sp, #344]
     6cc:	ldr	x0, [sp, #344]
     6d0:	ldr	x0, [x0, #16]
     6d4:	str	x0, [sp, #336]
     6d8:	ldr	x0, [sp, #344]
     6dc:	ldr	x0, [x0, #24]
     6e0:	str	x0, [sp, #328]
     6e4:	str	wzr, [sp, #392]
     6e8:	ldr	x0, [sp, #336]
     6ec:	cmp	x0, #0x0
     6f0:	b.eq	704 <gomp_doacross_init+0x58>  // b.none
     6f4:	ldr	x0, [sp, #336]
     6f8:	ldr	w0, [x0]
     6fc:	cmp	w0, #0x1
     700:	b.ne	758 <gomp_doacross_init+0xac>  // b.any
     704:	nop
     708:	b	710 <gomp_doacross_init+0x64>
     70c:	nop
     710:	ldr	x0, [sp, #16]
     714:	cmp	x0, #0x0
     718:	b.ne	728 <gomp_doacross_init+0x7c>  // b.any
     71c:	ldr	x0, [sp, #328]
     720:	str	xzr, [x0, #32]
     724:	b	b54 <gomp_doacross_init+0x4a8>
     728:	ldr	x0, [sp, #16]
     72c:	add	x0, x0, #0x38
     730:	bl	0 <gomp_malloc_cleared>
     734:	str	x0, [sp, #320]
     738:	ldr	x0, [sp, #320]
     73c:	add	x1, x0, #0x38
     740:	ldr	x0, [sp, #320]
     744:	str	x1, [x0, #48]
     748:	ldr	x0, [sp, #328]
     74c:	ldr	x1, [sp, #320]
     750:	str	x1, [x0, #32]
     754:	b	b54 <gomp_doacross_init+0x4a8>
     758:	str	wzr, [sp, #396]
     75c:	b	82c <gomp_doacross_init+0x180>
     760:	ldr	w0, [sp, #396]
     764:	lsl	x0, x0, #3
     768:	ldr	x1, [sp, #32]
     76c:	add	x0, x1, x0
     770:	ldr	x0, [x0]
     774:	cmp	x0, #0x0
     778:	b.eq	70c <gomp_doacross_init+0x60>  // b.none
     77c:	ldr	w0, [sp, #392]
     780:	cmp	w0, #0x40
     784:	b.hi	820 <gomp_doacross_init+0x174>  // b.pmore
     788:	ldr	w0, [sp, #396]
     78c:	lsl	x0, x0, #3
     790:	ldr	x1, [sp, #32]
     794:	add	x0, x1, x0
     798:	ldr	x0, [x0]
     79c:	cmp	x0, #0x1
     7a0:	b.ne	7b0 <gomp_doacross_init+0x104>  // b.any
     7a4:	mov	w0, #0x1                   	// #1
     7a8:	str	w0, [sp, #356]
     7ac:	b	7dc <gomp_doacross_init+0x130>
     7b0:	ldr	w0, [sp, #396]
     7b4:	lsl	x0, x0, #3
     7b8:	ldr	x1, [sp, #32]
     7bc:	add	x0, x1, x0
     7c0:	ldr	x0, [x0]
     7c4:	sub	x0, x0, #0x1
     7c8:	clz	x0, x0
     7cc:	mov	w1, w0
     7d0:	mov	w0, #0x40                  	// #64
     7d4:	sub	w0, w0, w1
     7d8:	str	w0, [sp, #356]
     7dc:	ldr	w1, [sp, #392]
     7e0:	ldr	w0, [sp, #356]
     7e4:	add	w0, w1, w0
     7e8:	cmp	w0, #0x40
     7ec:	b.hi	818 <gomp_doacross_init+0x16c>  // b.pmore
     7f0:	ldr	w0, [sp, #396]
     7f4:	lsl	x0, x0, #2
     7f8:	add	x1, sp, #0x30
     7fc:	ldr	w2, [sp, #356]
     800:	str	w2, [x1, x0]
     804:	ldr	w1, [sp, #392]
     808:	ldr	w0, [sp, #356]
     80c:	add	w0, w1, w0
     810:	str	w0, [sp, #392]
     814:	b	820 <gomp_doacross_init+0x174>
     818:	mov	w0, #0x41                  	// #65
     81c:	str	w0, [sp, #392]
     820:	ldr	w0, [sp, #396]
     824:	add	w0, w0, #0x1
     828:	str	w0, [sp, #396]
     82c:	ldr	w1, [sp, #396]
     830:	ldr	w0, [sp, #44]
     834:	cmp	w1, w0
     838:	b.cc	760 <gomp_doacross_init+0xb4>  // b.lo, b.ul, b.last
     83c:	ldr	x0, [sp, #328]
     840:	ldr	w0, [x0]
     844:	cmp	w0, #0x1
     848:	b.ne	860 <gomp_doacross_init+0x1b4>  // b.any
     84c:	ldr	x0, [sp, #336]
     850:	ldr	w0, [x0]
     854:	mov	w0, w0
     858:	str	x0, [sp, #376]
     85c:	b	89c <gomp_doacross_init+0x1f0>
     860:	ldr	x0, [sp, #328]
     864:	ldr	w0, [x0]
     868:	cmp	w0, #0x3
     86c:	b.ne	880 <gomp_doacross_init+0x1d4>  // b.any
     870:	ldr	x0, [sp, #32]
     874:	ldr	x0, [x0]
     878:	str	x0, [sp, #376]
     87c:	b	89c <gomp_doacross_init+0x1f0>
     880:	ldr	x0, [sp, #32]
     884:	ldr	x0, [x0]
     888:	sub	x1, x0, #0x1
     88c:	ldr	x0, [sp, #24]
     890:	sdiv	x0, x1, x0
     894:	add	x0, x0, #0x1
     898:	str	x0, [sp, #376]
     89c:	ldr	w0, [sp, #392]
     8a0:	cmp	w0, #0x40
     8a4:	b.hi	8c0 <gomp_doacross_init+0x214>  // b.pmore
     8a8:	mov	x0, #0x8                   	// #8
     8ac:	str	x0, [sp, #368]
     8b0:	ldr	w0, [sp, #44]
     8b4:	lsl	x0, x0, #2
     8b8:	str	x0, [sp, #360]
     8bc:	b	8d0 <gomp_doacross_init+0x224>
     8c0:	ldr	w0, [sp, #44]
     8c4:	lsl	x0, x0, #3
     8c8:	str	x0, [sp, #368]
     8cc:	str	xzr, [sp, #360]
     8d0:	ldr	x0, [sp, #368]
     8d4:	add	x0, x0, #0x3f
     8d8:	and	x0, x0, #0xffffffffffffffc0
     8dc:	str	x0, [sp, #368]
     8e0:	ldr	x1, [sp, #376]
     8e4:	ldr	x0, [sp, #368]
     8e8:	mul	x1, x1, x0
     8ec:	ldr	x0, [sp, #360]
     8f0:	add	x1, x1, x0
     8f4:	ldr	x0, [sp, #16]
     8f8:	add	x0, x1, x0
     8fc:	add	x0, x0, #0x77
     900:	bl	0 <gomp_malloc>
     904:	str	x0, [sp, #320]
     908:	ldr	x0, [sp, #320]
     90c:	ldr	x1, [sp, #24]
     910:	str	x1, [x0]
     914:	ldr	x0, [sp, #320]
     918:	ldr	x1, [sp, #368]
     91c:	str	x1, [x0, #8]
     920:	ldr	x0, [sp, #320]
     924:	ldr	w1, [sp, #44]
     928:	str	w1, [x0, #16]
     92c:	ldr	x0, [sp, #320]
     930:	strb	wzr, [x0, #20]
     934:	ldr	x1, [sp, #320]
     938:	ldr	x0, [sp, #360]
     93c:	add	x0, x1, x0
     940:	add	x0, x0, #0x77
     944:	and	x0, x0, #0xffffffffffffffc0
     948:	mov	x1, x0
     94c:	ldr	x0, [sp, #320]
     950:	str	x1, [x0, #24]
     954:	ldr	x0, [sp, #16]
     958:	cmp	x0, #0x0
     95c:	b.eq	998 <gomp_doacross_init+0x2ec>  // b.none
     960:	ldr	x0, [sp, #320]
     964:	ldr	x1, [x0, #24]
     968:	ldr	x2, [sp, #376]
     96c:	ldr	x0, [sp, #368]
     970:	mul	x0, x2, x0
     974:	add	x1, x1, x0
     978:	ldr	x0, [sp, #320]
     97c:	str	x1, [x0, #48]
     980:	ldr	x0, [sp, #320]
     984:	ldr	x0, [x0, #48]
     988:	ldr	x2, [sp, #16]
     98c:	mov	w1, #0x0                   	// #0
     990:	bl	0 <memset>
     994:	b	9a0 <gomp_doacross_init+0x2f4>
     998:	ldr	x0, [sp, #320]
     99c:	str	xzr, [x0, #48]
     9a0:	ldr	w0, [sp, #392]
     9a4:	cmp	w0, #0x40
     9a8:	b.hi	a6c <gomp_doacross_init+0x3c0>  // b.pmore
     9ac:	str	wzr, [sp, #352]
     9b0:	ldr	x0, [sp, #320]
     9b4:	mov	w1, #0x1                   	// #1
     9b8:	strb	w1, [x0, #20]
     9bc:	ldr	w0, [sp, #44]
     9c0:	str	w0, [sp, #396]
     9c4:	b	a1c <gomp_doacross_init+0x370>
     9c8:	ldr	w0, [sp, #396]
     9cc:	sub	w0, w0, #0x1
     9d0:	ldr	x1, [sp, #320]
     9d4:	mov	w0, w0
     9d8:	add	x0, x0, #0xc
     9dc:	lsl	x0, x0, #2
     9e0:	add	x0, x1, x0
     9e4:	ldr	w1, [sp, #352]
     9e8:	str	w1, [x0, #8]
     9ec:	ldr	w0, [sp, #396]
     9f0:	sub	w0, w0, #0x1
     9f4:	mov	w0, w0
     9f8:	lsl	x0, x0, #2
     9fc:	add	x1, sp, #0x30
     a00:	ldr	w0, [x1, x0]
     a04:	ldr	w1, [sp, #352]
     a08:	add	w0, w1, w0
     a0c:	str	w0, [sp, #352]
     a10:	ldr	w0, [sp, #396]
     a14:	sub	w0, w0, #0x1
     a18:	str	w0, [sp, #396]
     a1c:	ldr	w0, [sp, #396]
     a20:	cmp	w0, #0x0
     a24:	b.ne	9c8 <gomp_doacross_init+0x31c>  // b.any
     a28:	str	xzr, [sp, #384]
     a2c:	b	a58 <gomp_doacross_init+0x3ac>
     a30:	ldr	x0, [sp, #320]
     a34:	ldr	x1, [x0, #24]
     a38:	ldr	x2, [sp, #384]
     a3c:	ldr	x0, [sp, #368]
     a40:	mul	x0, x2, x0
     a44:	add	x0, x1, x0
     a48:	str	xzr, [x0]
     a4c:	ldr	x0, [sp, #384]
     a50:	add	x0, x0, #0x1
     a54:	str	x0, [sp, #384]
     a58:	ldr	x1, [sp, #384]
     a5c:	ldr	x0, [sp, #376]
     a60:	cmp	x1, x0
     a64:	b.cc	a30 <gomp_doacross_init+0x384>  // b.lo, b.ul, b.last
     a68:	b	ac0 <gomp_doacross_init+0x414>
     a6c:	str	xzr, [sp, #384]
     a70:	b	ab0 <gomp_doacross_init+0x404>
     a74:	ldr	x0, [sp, #320]
     a78:	ldr	x1, [x0, #24]
     a7c:	ldr	x2, [sp, #384]
     a80:	ldr	x0, [sp, #368]
     a84:	mul	x0, x2, x0
     a88:	add	x3, x1, x0
     a8c:	ldr	w0, [sp, #44]
     a90:	lsl	x0, x0, #3
     a94:	mov	x2, x0
     a98:	mov	w1, #0x0                   	// #0
     a9c:	mov	x0, x3
     aa0:	bl	0 <memset>
     aa4:	ldr	x0, [sp, #384]
     aa8:	add	x0, x0, #0x1
     aac:	str	x0, [sp, #384]
     ab0:	ldr	x1, [sp, #384]
     ab4:	ldr	x0, [sp, #376]
     ab8:	cmp	x1, x0
     abc:	b.cc	a74 <gomp_doacross_init+0x3c8>  // b.lo, b.ul, b.last
     ac0:	ldr	x0, [sp, #328]
     ac4:	ldr	w0, [x0]
     ac8:	cmp	w0, #0x1
     acc:	b.ne	b48 <gomp_doacross_init+0x49c>  // b.any
     ad0:	ldr	x0, [sp, #24]
     ad4:	cmp	x0, #0x0
     ad8:	b.ne	b48 <gomp_doacross_init+0x49c>  // b.any
     adc:	ldr	x0, [sp, #32]
     ae0:	ldr	x0, [x0]
     ae4:	mov	x1, x0
     ae8:	ldr	x0, [sp, #376]
     aec:	udiv	x0, x1, x0
     af0:	str	x0, [sp, #312]
     af4:	ldr	x0, [sp, #32]
     af8:	ldr	x0, [x0]
     afc:	ldr	x1, [sp, #376]
     b00:	udiv	x2, x0, x1
     b04:	ldr	x1, [sp, #376]
     b08:	mul	x1, x2, x1
     b0c:	sub	x0, x0, x1
     b10:	str	x0, [sp, #304]
     b14:	ldr	x0, [sp, #312]
     b18:	add	x1, x0, #0x1
     b1c:	ldr	x0, [sp, #304]
     b20:	mul	x0, x1, x0
     b24:	mov	x1, x0
     b28:	ldr	x0, [sp, #320]
     b2c:	str	x1, [x0, #40]
     b30:	ldr	x1, [sp, #312]
     b34:	ldr	x0, [sp, #320]
     b38:	str	x1, [x0]
     b3c:	ldr	x1, [sp, #304]
     b40:	ldr	x0, [sp, #320]
     b44:	str	x1, [x0, #32]
     b48:	ldr	x0, [sp, #328]
     b4c:	ldr	x1, [sp, #320]
     b50:	str	x1, [x0, #32]
     b54:	ldp	x29, x30, [sp], #400
     b58:	ret

0000000000000b5c <GOMP_doacross_post>:
     b5c:	stp	x29, x30, [sp, #-96]!
     b60:	mov	x29, sp
     b64:	str	x0, [sp, #24]
     b68:	bl	12c <gomp_thread>
     b6c:	str	x0, [sp, #64]
     b70:	ldr	x0, [sp, #64]
     b74:	ldr	x0, [x0, #24]
     b78:	str	x0, [sp, #56]
     b7c:	ldr	x0, [sp, #56]
     b80:	ldr	x0, [x0, #32]
     b84:	str	x0, [sp, #48]
     b88:	ldr	x0, [sp, #48]
     b8c:	cmp	x0, #0x0
     b90:	cset	w0, eq  // eq = none
     b94:	and	w0, w0, #0xff
     b98:	and	x0, x0, #0xff
     b9c:	cmp	x0, #0x0
     ba0:	b.ne	bc4 <GOMP_doacross_post+0x68>  // b.any
     ba4:	ldr	x0, [sp, #48]
     ba8:	ldr	x0, [x0, #24]
     bac:	cmp	x0, #0x0
     bb0:	cset	w0, eq  // eq = none
     bb4:	and	w0, w0, #0xff
     bb8:	and	x0, x0, #0xff
     bbc:	cmp	x0, #0x0
     bc0:	b.eq	bcc <GOMP_doacross_post+0x70>  // b.none
     bc4:	dmb	ish
     bc8:	b	db4 <GOMP_doacross_post+0x258>
     bcc:	ldr	x0, [sp, #56]
     bd0:	ldr	w0, [x0]
     bd4:	cmp	w0, #0x1
     bd8:	cset	w0, eq  // eq = none
     bdc:	and	w0, w0, #0xff
     be0:	and	x0, x0, #0xff
     be4:	cmp	x0, #0x0
     be8:	b.eq	c00 <GOMP_doacross_post+0xa4>  // b.none
     bec:	ldr	x0, [sp, #64]
     bf0:	ldr	w0, [x0, #40]
     bf4:	mov	w0, w0
     bf8:	str	x0, [sp, #88]
     bfc:	b	c38 <GOMP_doacross_post+0xdc>
     c00:	ldr	x0, [sp, #56]
     c04:	ldr	w0, [x0]
     c08:	cmp	w0, #0x3
     c0c:	b.ne	c20 <GOMP_doacross_post+0xc4>  // b.any
     c10:	ldr	x0, [sp, #24]
     c14:	ldr	x0, [x0]
     c18:	str	x0, [sp, #88]
     c1c:	b	c38 <GOMP_doacross_post+0xdc>
     c20:	ldr	x0, [sp, #24]
     c24:	ldr	x1, [x0]
     c28:	ldr	x0, [sp, #48]
     c2c:	ldr	x0, [x0]
     c30:	sdiv	x0, x1, x0
     c34:	str	x0, [sp, #88]
     c38:	ldr	x0, [sp, #48]
     c3c:	ldr	x1, [x0, #24]
     c40:	ldr	x0, [sp, #48]
     c44:	ldr	x2, [x0, #8]
     c48:	ldr	x0, [sp, #88]
     c4c:	mul	x0, x2, x0
     c50:	add	x0, x1, x0
     c54:	str	x0, [sp, #40]
     c58:	ldr	x0, [sp, #48]
     c5c:	ldrb	w0, [x0, #20]
     c60:	and	x0, x0, #0xff
     c64:	cmp	x0, #0x0
     c68:	b.eq	d2c <GOMP_doacross_post+0x1d0>  // b.none
     c6c:	ldr	x0, [sp, #24]
     c70:	ldr	x0, [x0]
     c74:	mov	x1, x0
     c78:	ldr	x0, [sp, #48]
     c7c:	ldr	w0, [x0, #56]
     c80:	lsl	x0, x1, x0
     c84:	str	x0, [sp, #72]
     c88:	mov	w0, #0x1                   	// #1
     c8c:	str	w0, [sp, #84]
     c90:	b	ce0 <GOMP_doacross_post+0x184>
     c94:	ldr	w0, [sp, #84]
     c98:	lsl	x0, x0, #3
     c9c:	ldr	x1, [sp, #24]
     ca0:	add	x0, x1, x0
     ca4:	ldr	x0, [x0]
     ca8:	mov	x2, x0
     cac:	ldr	x1, [sp, #48]
     cb0:	ldr	w0, [sp, #84]
     cb4:	add	x0, x0, #0xc
     cb8:	lsl	x0, x0, #2
     cbc:	add	x0, x1, x0
     cc0:	ldr	w0, [x0, #8]
     cc4:	lsl	x0, x2, x0
     cc8:	ldr	x1, [sp, #72]
     ccc:	orr	x0, x1, x0
     cd0:	str	x0, [sp, #72]
     cd4:	ldr	w0, [sp, #84]
     cd8:	add	w0, w0, #0x1
     cdc:	str	w0, [sp, #84]
     ce0:	ldr	x0, [sp, #48]
     ce4:	ldr	w0, [x0, #16]
     ce8:	ldr	w1, [sp, #84]
     cec:	cmp	w1, w0
     cf0:	b.cc	c94 <GOMP_doacross_post+0x138>  // b.lo, b.ul, b.last
     cf4:	ldr	x0, [sp, #72]
     cf8:	add	x0, x0, #0x1
     cfc:	str	x0, [sp, #72]
     d00:	ldr	x0, [sp, #40]
     d04:	ldar	x0, [x0]
     d08:	ldr	x1, [sp, #72]
     d0c:	cmp	x1, x0
     d10:	b.ne	d1c <GOMP_doacross_post+0x1c0>  // b.any
     d14:	dmb	ish
     d18:	b	db4 <GOMP_doacross_post+0x258>
     d1c:	ldr	x0, [sp, #40]
     d20:	ldr	x1, [sp, #72]
     d24:	stlr	x1, [x0]
     d28:	b	db4 <GOMP_doacross_post+0x258>
     d2c:	dmb	ishld
     d30:	ldr	x0, [sp, #48]
     d34:	ldr	w0, [x0, #16]
     d38:	str	w0, [sp, #84]
     d3c:	b	da0 <GOMP_doacross_post+0x244>
     d40:	ldr	w0, [sp, #84]
     d44:	lsl	x0, x0, #3
     d48:	ldr	x1, [sp, #24]
     d4c:	add	x0, x1, x0
     d50:	ldr	x0, [x0]
     d54:	add	x1, x0, #0x1
     d58:	ldr	w0, [sp, #84]
     d5c:	lsl	x0, x0, #3
     d60:	ldr	x2, [sp, #40]
     d64:	add	x0, x2, x0
     d68:	ldr	x0, [x0]
     d6c:	cmp	x1, x0
     d70:	b.eq	da0 <GOMP_doacross_post+0x244>  // b.none
     d74:	ldr	w0, [sp, #84]
     d78:	lsl	x0, x0, #3
     d7c:	ldr	x1, [sp, #40]
     d80:	add	x0, x1, x0
     d84:	ldr	w1, [sp, #84]
     d88:	lsl	x1, x1, #3
     d8c:	ldr	x2, [sp, #24]
     d90:	add	x1, x2, x1
     d94:	ldr	x1, [x1]
     d98:	add	x1, x1, #0x1
     d9c:	stlr	x1, [x0]
     da0:	ldr	w0, [sp, #84]
     da4:	sub	w1, w0, #0x1
     da8:	str	w1, [sp, #84]
     dac:	cmp	w0, #0x0
     db0:	b.ne	d40 <GOMP_doacross_post+0x1e4>  // b.any
     db4:	ldp	x29, x30, [sp], #96
     db8:	ret

0000000000000dbc <GOMP_doacross_wait>:
     dbc:	stp	x29, x30, [sp, #-336]!
     dc0:	mov	x29, sp
     dc4:	str	x0, [sp, #24]
     dc8:	str	x1, [sp, #280]
     dcc:	str	x2, [sp, #288]
     dd0:	str	x3, [sp, #296]
     dd4:	str	x4, [sp, #304]
     dd8:	str	x5, [sp, #312]
     ddc:	str	x6, [sp, #320]
     de0:	str	x7, [sp, #328]
     de4:	str	q0, [sp, #144]
     de8:	str	q1, [sp, #160]
     dec:	str	q2, [sp, #176]
     df0:	str	q3, [sp, #192]
     df4:	str	q4, [sp, #208]
     df8:	str	q5, [sp, #224]
     dfc:	str	q6, [sp, #240]
     e00:	str	q7, [sp, #256]
     e04:	bl	12c <gomp_thread>
     e08:	str	x0, [sp, #112]
     e0c:	ldr	x0, [sp, #112]
     e10:	ldr	x0, [x0, #24]
     e14:	str	x0, [sp, #104]
     e18:	ldr	x0, [sp, #104]
     e1c:	ldr	x0, [x0, #32]
     e20:	str	x0, [sp, #96]
     e24:	ldr	x0, [sp, #96]
     e28:	cmp	x0, #0x0
     e2c:	cset	w0, eq  // eq = none
     e30:	and	w0, w0, #0xff
     e34:	and	x0, x0, #0xff
     e38:	cmp	x0, #0x0
     e3c:	b.ne	e60 <GOMP_doacross_wait+0xa4>  // b.any
     e40:	ldr	x0, [sp, #96]
     e44:	ldr	x0, [x0, #24]
     e48:	cmp	x0, #0x0
     e4c:	cset	w0, eq  // eq = none
     e50:	and	w0, w0, #0xff
     e54:	and	x0, x0, #0xff
     e58:	cmp	x0, #0x0
     e5c:	b.eq	e68 <GOMP_doacross_wait+0xac>  // b.none
     e60:	dmb	ish
     e64:	b	11ec <GOMP_doacross_wait+0x430>
     e68:	ldr	x0, [sp, #104]
     e6c:	ldr	w0, [x0]
     e70:	cmp	w0, #0x1
     e74:	cset	w0, eq  // eq = none
     e78:	and	w0, w0, #0xff
     e7c:	and	x0, x0, #0xff
     e80:	cmp	x0, #0x0
     e84:	b.eq	f2c <GOMP_doacross_wait+0x170>  // b.none
     e88:	ldr	x0, [sp, #104]
     e8c:	ldr	x0, [x0, #8]
     e90:	cmp	x0, #0x0
     e94:	b.ne	ef8 <GOMP_doacross_wait+0x13c>  // b.any
     e98:	ldr	x0, [sp, #96]
     e9c:	ldr	x0, [x0, #40]
     ea0:	ldr	x1, [sp, #24]
     ea4:	cmp	x1, x0
     ea8:	b.ge	ec8 <GOMP_doacross_wait+0x10c>  // b.tcont
     eac:	ldr	x0, [sp, #96]
     eb0:	ldr	x0, [x0]
     eb4:	add	x0, x0, #0x1
     eb8:	ldr	x1, [sp, #24]
     ebc:	sdiv	x0, x1, x0
     ec0:	str	x0, [sp, #136]
     ec4:	b	f5c <GOMP_doacross_wait+0x1a0>
     ec8:	ldr	x0, [sp, #96]
     ecc:	ldr	x0, [x0, #40]
     ed0:	ldr	x1, [sp, #24]
     ed4:	sub	x1, x1, x0
     ed8:	ldr	x0, [sp, #96]
     edc:	ldr	x0, [x0]
     ee0:	sdiv	x1, x1, x0
     ee4:	ldr	x0, [sp, #96]
     ee8:	ldr	x0, [x0, #32]
     eec:	add	x0, x1, x0
     ef0:	str	x0, [sp, #136]
     ef4:	b	f5c <GOMP_doacross_wait+0x1a0>
     ef8:	ldr	x0, [sp, #104]
     efc:	ldr	x0, [x0, #8]
     f00:	ldr	x1, [sp, #24]
     f04:	sdiv	x0, x1, x0
     f08:	ldr	x1, [sp, #112]
     f0c:	ldr	x1, [x1, #16]
     f10:	ldr	w1, [x1]
     f14:	mov	w1, w1
     f18:	sdiv	x2, x0, x1
     f1c:	mul	x1, x2, x1
     f20:	sub	x0, x0, x1
     f24:	str	x0, [sp, #136]
     f28:	b	f5c <GOMP_doacross_wait+0x1a0>
     f2c:	ldr	x0, [sp, #104]
     f30:	ldr	w0, [x0]
     f34:	cmp	w0, #0x3
     f38:	b.ne	f48 <GOMP_doacross_wait+0x18c>  // b.any
     f3c:	ldr	x0, [sp, #24]
     f40:	str	x0, [sp, #136]
     f44:	b	f5c <GOMP_doacross_wait+0x1a0>
     f48:	ldr	x0, [sp, #96]
     f4c:	ldr	x0, [x0]
     f50:	ldr	x1, [sp, #24]
     f54:	sdiv	x0, x1, x0
     f58:	str	x0, [sp, #136]
     f5c:	ldr	x0, [sp, #96]
     f60:	ldr	x1, [x0, #24]
     f64:	ldr	x0, [sp, #96]
     f68:	ldr	x2, [x0, #8]
     f6c:	ldr	x0, [sp, #136]
     f70:	mul	x0, x2, x0
     f74:	add	x0, x1, x0
     f78:	str	x0, [sp, #88]
     f7c:	ldr	x0, [sp, #96]
     f80:	ldrb	w0, [x0, #20]
     f84:	and	x0, x0, #0xff
     f88:	cmp	x0, #0x0
     f8c:	b.eq	10b4 <GOMP_doacross_wait+0x2f8>  // b.none
     f90:	ldr	x1, [sp, #24]
     f94:	ldr	x0, [sp, #96]
     f98:	ldr	w0, [x0, #56]
     f9c:	lsl	x0, x1, x0
     fa0:	str	x0, [sp, #120]
     fa4:	add	x0, sp, #0x150
     fa8:	str	x0, [sp, #32]
     fac:	add	x0, sp, #0x150
     fb0:	str	x0, [sp, #40]
     fb4:	add	x0, sp, #0x110
     fb8:	str	x0, [sp, #48]
     fbc:	mov	w0, #0xffffffc8            	// #-56
     fc0:	str	w0, [sp, #56]
     fc4:	mov	w0, #0xffffff80            	// #-128
     fc8:	str	w0, [sp, #60]
     fcc:	mov	w0, #0x1                   	// #1
     fd0:	str	w0, [sp, #132]
     fd4:	b	1064 <GOMP_doacross_wait+0x2a8>
     fd8:	ldr	w1, [sp, #56]
     fdc:	ldr	x0, [sp, #32]
     fe0:	cmp	w1, #0x0
     fe4:	b.lt	ff8 <GOMP_doacross_wait+0x23c>  // b.tstop
     fe8:	add	x1, x0, #0xf
     fec:	and	x1, x1, #0xfffffffffffffff8
     ff0:	str	x1, [sp, #32]
     ff4:	b	1028 <GOMP_doacross_wait+0x26c>
     ff8:	add	w2, w1, #0x8
     ffc:	str	w2, [sp, #56]
    1000:	ldr	w2, [sp, #56]
    1004:	cmp	w2, #0x0
    1008:	b.le	101c <GOMP_doacross_wait+0x260>
    100c:	add	x1, x0, #0xf
    1010:	and	x1, x1, #0xfffffffffffffff8
    1014:	str	x1, [sp, #32]
    1018:	b	1028 <GOMP_doacross_wait+0x26c>
    101c:	ldr	x2, [sp, #40]
    1020:	sxtw	x0, w1
    1024:	add	x0, x2, x0
    1028:	ldr	x0, [x0]
    102c:	mov	x2, x0
    1030:	ldr	x1, [sp, #96]
    1034:	ldr	w0, [sp, #132]
    1038:	add	x0, x0, #0xc
    103c:	lsl	x0, x0, #2
    1040:	add	x0, x1, x0
    1044:	ldr	w0, [x0, #8]
    1048:	lsl	x0, x2, x0
    104c:	ldr	x1, [sp, #120]
    1050:	orr	x0, x1, x0
    1054:	str	x0, [sp, #120]
    1058:	ldr	w0, [sp, #132]
    105c:	add	w0, w0, #0x1
    1060:	str	w0, [sp, #132]
    1064:	ldr	x0, [sp, #96]
    1068:	ldr	w0, [x0, #16]
    106c:	ldr	w1, [sp, #132]
    1070:	cmp	w1, w0
    1074:	b.cc	fd8 <GOMP_doacross_wait+0x21c>  // b.lo, b.ul, b.last
    1078:	ldr	x0, [sp, #88]
    107c:	ldar	x0, [x0]
    1080:	str	x0, [sp, #64]
    1084:	ldr	x1, [sp, #120]
    1088:	ldr	x0, [sp, #64]
    108c:	cmp	x1, x0
    1090:	b.cs	109c <GOMP_doacross_wait+0x2e0>  // b.hs, b.nlast
    1094:	dmb	ish
    1098:	b	11ec <GOMP_doacross_wait+0x430>
    109c:	ldr	x2, [sp, #64]
    10a0:	ldr	x1, [sp, #120]
    10a4:	ldr	x0, [sp, #88]
    10a8:	bl	148 <doacross_spin>
    10ac:	dmb	ish
    10b0:	b	11ec <GOMP_doacross_wait+0x430>
    10b4:	add	x0, sp, #0x150
    10b8:	str	x0, [sp, #32]
    10bc:	add	x0, sp, #0x150
    10c0:	str	x0, [sp, #40]
    10c4:	add	x0, sp, #0x110
    10c8:	str	x0, [sp, #48]
    10cc:	mov	w0, #0xffffffc8            	// #-56
    10d0:	str	w0, [sp, #56]
    10d4:	mov	w0, #0xffffff80            	// #-128
    10d8:	str	w0, [sp, #60]
    10dc:	str	wzr, [sp, #132]
    10e0:	b	11ac <GOMP_doacross_wait+0x3f0>
    10e4:	ldr	w0, [sp, #132]
    10e8:	cmp	w0, #0x0
    10ec:	b.eq	114c <GOMP_doacross_wait+0x390>  // b.none
    10f0:	ldr	w1, [sp, #56]
    10f4:	ldr	x0, [sp, #32]
    10f8:	cmp	w1, #0x0
    10fc:	b.lt	1110 <GOMP_doacross_wait+0x354>  // b.tstop
    1100:	add	x1, x0, #0xf
    1104:	and	x1, x1, #0xfffffffffffffff8
    1108:	str	x1, [sp, #32]
    110c:	b	1140 <GOMP_doacross_wait+0x384>
    1110:	add	w2, w1, #0x8
    1114:	str	w2, [sp, #56]
    1118:	ldr	w2, [sp, #56]
    111c:	cmp	w2, #0x0
    1120:	b.le	1134 <GOMP_doacross_wait+0x378>
    1124:	add	x1, x0, #0xf
    1128:	and	x1, x1, #0xfffffffffffffff8
    112c:	str	x1, [sp, #32]
    1130:	b	1140 <GOMP_doacross_wait+0x384>
    1134:	ldr	x2, [sp, #40]
    1138:	sxtw	x0, w1
    113c:	add	x0, x2, x0
    1140:	ldr	x0, [x0]
    1144:	add	x0, x0, #0x1
    1148:	b	1154 <GOMP_doacross_wait+0x398>
    114c:	ldr	x0, [sp, #24]
    1150:	add	x0, x0, #0x1
    1154:	str	x0, [sp, #80]
    1158:	ldr	w0, [sp, #132]
    115c:	lsl	x0, x0, #3
    1160:	ldr	x1, [sp, #88]
    1164:	add	x0, x1, x0
    1168:	ldr	x0, [x0]
    116c:	str	x0, [sp, #72]
    1170:	ldr	x1, [sp, #80]
    1174:	ldr	x0, [sp, #72]
    1178:	cmp	x1, x0
    117c:	b.cs	1190 <GOMP_doacross_wait+0x3d4>  // b.hs, b.nlast
    1180:	ldr	x0, [sp, #96]
    1184:	ldr	w0, [x0, #16]
    1188:	str	w0, [sp, #132]
    118c:	b	11c8 <GOMP_doacross_wait+0x40c>
    1190:	ldr	x1, [sp, #80]
    1194:	ldr	x0, [sp, #72]
    1198:	cmp	x1, x0
    119c:	b.hi	11c4 <GOMP_doacross_wait+0x408>  // b.pmore
    11a0:	ldr	w0, [sp, #132]
    11a4:	add	w0, w0, #0x1
    11a8:	str	w0, [sp, #132]
    11ac:	ldr	x0, [sp, #96]
    11b0:	ldr	w0, [x0, #16]
    11b4:	ldr	w1, [sp, #132]
    11b8:	cmp	w1, w0
    11bc:	b.cc	10e4 <GOMP_doacross_wait+0x328>  // b.lo, b.ul, b.last
    11c0:	b	11c8 <GOMP_doacross_wait+0x40c>
    11c4:	nop
    11c8:	ldr	x0, [sp, #96]
    11cc:	ldr	w0, [x0, #16]
    11d0:	ldr	w1, [sp, #132]
    11d4:	cmp	w1, w0
    11d8:	b.eq	11e4 <GOMP_doacross_wait+0x428>  // b.none
    11dc:	bl	140 <cpu_relax>
    11e0:	b	10b4 <GOMP_doacross_wait+0x2f8>
    11e4:	nop
    11e8:	dmb	ish
    11ec:	ldp	x29, x30, [sp], #336
    11f0:	ret

00000000000011f4 <gomp_doacross_ull_init>:
    11f4:	stp	x29, x30, [sp, #-400]!
    11f8:	mov	x29, sp
    11fc:	str	w0, [sp, #44]
    1200:	str	x1, [sp, #32]
    1204:	str	x2, [sp, #24]
    1208:	str	x3, [sp, #16]
    120c:	bl	12c <gomp_thread>
    1210:	str	x0, [sp, #344]
    1214:	ldr	x0, [sp, #344]
    1218:	ldr	x0, [x0, #16]
    121c:	str	x0, [sp, #336]
    1220:	ldr	x0, [sp, #344]
    1224:	ldr	x0, [x0, #24]
    1228:	str	x0, [sp, #328]
    122c:	str	wzr, [sp, #392]
    1230:	ldr	x0, [sp, #336]
    1234:	cmp	x0, #0x0
    1238:	b.eq	124c <gomp_doacross_ull_init+0x58>  // b.none
    123c:	ldr	x0, [sp, #336]
    1240:	ldr	w0, [x0]
    1244:	cmp	w0, #0x1
    1248:	b.ne	12a0 <gomp_doacross_ull_init+0xac>  // b.any
    124c:	nop
    1250:	b	1258 <gomp_doacross_ull_init+0x64>
    1254:	nop
    1258:	ldr	x0, [sp, #16]
    125c:	cmp	x0, #0x0
    1260:	b.ne	1270 <gomp_doacross_ull_init+0x7c>  // b.any
    1264:	ldr	x0, [sp, #328]
    1268:	str	xzr, [x0, #32]
    126c:	b	1694 <gomp_doacross_ull_init+0x4a0>
    1270:	ldr	x0, [sp, #16]
    1274:	add	x0, x0, #0x38
    1278:	bl	0 <gomp_malloc_cleared>
    127c:	str	x0, [sp, #320]
    1280:	ldr	x0, [sp, #320]
    1284:	add	x1, x0, #0x38
    1288:	ldr	x0, [sp, #320]
    128c:	str	x1, [x0, #48]
    1290:	ldr	x0, [sp, #328]
    1294:	ldr	x1, [sp, #320]
    1298:	str	x1, [x0, #32]
    129c:	b	1694 <gomp_doacross_ull_init+0x4a0>
    12a0:	str	wzr, [sp, #396]
    12a4:	b	1374 <gomp_doacross_ull_init+0x180>
    12a8:	ldr	w0, [sp, #396]
    12ac:	lsl	x0, x0, #3
    12b0:	ldr	x1, [sp, #32]
    12b4:	add	x0, x1, x0
    12b8:	ldr	x0, [x0]
    12bc:	cmp	x0, #0x0
    12c0:	b.eq	1254 <gomp_doacross_ull_init+0x60>  // b.none
    12c4:	ldr	w0, [sp, #392]
    12c8:	cmp	w0, #0x40
    12cc:	b.hi	1368 <gomp_doacross_ull_init+0x174>  // b.pmore
    12d0:	ldr	w0, [sp, #396]
    12d4:	lsl	x0, x0, #3
    12d8:	ldr	x1, [sp, #32]
    12dc:	add	x0, x1, x0
    12e0:	ldr	x0, [x0]
    12e4:	cmp	x0, #0x1
    12e8:	b.ne	12f8 <gomp_doacross_ull_init+0x104>  // b.any
    12ec:	mov	w0, #0x1                   	// #1
    12f0:	str	w0, [sp, #356]
    12f4:	b	1324 <gomp_doacross_ull_init+0x130>
    12f8:	ldr	w0, [sp, #396]
    12fc:	lsl	x0, x0, #3
    1300:	ldr	x1, [sp, #32]
    1304:	add	x0, x1, x0
    1308:	ldr	x0, [x0]
    130c:	sub	x0, x0, #0x1
    1310:	clz	x0, x0
    1314:	mov	w1, w0
    1318:	mov	w0, #0x40                  	// #64
    131c:	sub	w0, w0, w1
    1320:	str	w0, [sp, #356]
    1324:	ldr	w1, [sp, #392]
    1328:	ldr	w0, [sp, #356]
    132c:	add	w0, w1, w0
    1330:	cmp	w0, #0x40
    1334:	b.hi	1360 <gomp_doacross_ull_init+0x16c>  // b.pmore
    1338:	ldr	w0, [sp, #396]
    133c:	lsl	x0, x0, #2
    1340:	add	x1, sp, #0x30
    1344:	ldr	w2, [sp, #356]
    1348:	str	w2, [x1, x0]
    134c:	ldr	w1, [sp, #392]
    1350:	ldr	w0, [sp, #356]
    1354:	add	w0, w1, w0
    1358:	str	w0, [sp, #392]
    135c:	b	1368 <gomp_doacross_ull_init+0x174>
    1360:	mov	w0, #0x41                  	// #65
    1364:	str	w0, [sp, #392]
    1368:	ldr	w0, [sp, #396]
    136c:	add	w0, w0, #0x1
    1370:	str	w0, [sp, #396]
    1374:	ldr	w1, [sp, #396]
    1378:	ldr	w0, [sp, #44]
    137c:	cmp	w1, w0
    1380:	b.cc	12a8 <gomp_doacross_ull_init+0xb4>  // b.lo, b.ul, b.last
    1384:	ldr	x0, [sp, #328]
    1388:	ldr	w0, [x0]
    138c:	cmp	w0, #0x1
    1390:	b.ne	13a8 <gomp_doacross_ull_init+0x1b4>  // b.any
    1394:	ldr	x0, [sp, #336]
    1398:	ldr	w0, [x0]
    139c:	mov	w0, w0
    13a0:	str	x0, [sp, #376]
    13a4:	b	13e4 <gomp_doacross_ull_init+0x1f0>
    13a8:	ldr	x0, [sp, #328]
    13ac:	ldr	w0, [x0]
    13b0:	cmp	w0, #0x3
    13b4:	b.ne	13c8 <gomp_doacross_ull_init+0x1d4>  // b.any
    13b8:	ldr	x0, [sp, #32]
    13bc:	ldr	x0, [x0]
    13c0:	str	x0, [sp, #376]
    13c4:	b	13e4 <gomp_doacross_ull_init+0x1f0>
    13c8:	ldr	x0, [sp, #32]
    13cc:	ldr	x0, [x0]
    13d0:	sub	x1, x0, #0x1
    13d4:	ldr	x0, [sp, #24]
    13d8:	udiv	x0, x1, x0
    13dc:	add	x0, x0, #0x1
    13e0:	str	x0, [sp, #376]
    13e4:	ldr	w0, [sp, #392]
    13e8:	cmp	w0, #0x40
    13ec:	b.hi	1408 <gomp_doacross_ull_init+0x214>  // b.pmore
    13f0:	mov	x0, #0x8                   	// #8
    13f4:	str	x0, [sp, #368]
    13f8:	ldr	w0, [sp, #44]
    13fc:	lsl	x0, x0, #2
    1400:	str	x0, [sp, #360]
    1404:	b	1418 <gomp_doacross_ull_init+0x224>
    1408:	ldr	w0, [sp, #44]
    140c:	lsl	x0, x0, #3
    1410:	str	x0, [sp, #368]
    1414:	str	xzr, [sp, #360]
    1418:	ldr	x0, [sp, #368]
    141c:	add	x0, x0, #0x3f
    1420:	and	x0, x0, #0xffffffffffffffc0
    1424:	str	x0, [sp, #368]
    1428:	ldr	x1, [sp, #376]
    142c:	ldr	x0, [sp, #368]
    1430:	mul	x1, x1, x0
    1434:	ldr	x0, [sp, #360]
    1438:	add	x0, x1, x0
    143c:	add	x0, x0, #0x77
    1440:	bl	0 <gomp_malloc>
    1444:	str	x0, [sp, #320]
    1448:	ldr	x0, [sp, #320]
    144c:	ldr	x1, [sp, #24]
    1450:	str	x1, [x0]
    1454:	ldr	x0, [sp, #320]
    1458:	ldr	x1, [sp, #368]
    145c:	str	x1, [x0, #8]
    1460:	ldr	x0, [sp, #320]
    1464:	ldr	w1, [sp, #44]
    1468:	str	w1, [x0, #16]
    146c:	ldr	x0, [sp, #320]
    1470:	strb	wzr, [x0, #20]
    1474:	ldr	x0, [sp, #320]
    1478:	str	xzr, [x0, #40]
    147c:	ldr	x1, [sp, #320]
    1480:	ldr	x0, [sp, #360]
    1484:	add	x0, x1, x0
    1488:	add	x0, x0, #0x77
    148c:	and	x0, x0, #0xffffffffffffffc0
    1490:	mov	x1, x0
    1494:	ldr	x0, [sp, #320]
    1498:	str	x1, [x0, #24]
    149c:	ldr	x0, [sp, #16]
    14a0:	cmp	x0, #0x0
    14a4:	b.eq	14e0 <gomp_doacross_ull_init+0x2ec>  // b.none
    14a8:	ldr	x0, [sp, #320]
    14ac:	ldr	x1, [x0, #24]
    14b0:	ldr	x2, [sp, #376]
    14b4:	ldr	x0, [sp, #368]
    14b8:	mul	x0, x2, x0
    14bc:	add	x1, x1, x0
    14c0:	ldr	x0, [sp, #320]
    14c4:	str	x1, [x0, #48]
    14c8:	ldr	x0, [sp, #320]
    14cc:	ldr	x0, [x0, #48]
    14d0:	ldr	x2, [sp, #16]
    14d4:	mov	w1, #0x0                   	// #0
    14d8:	bl	0 <memset>
    14dc:	b	14e8 <gomp_doacross_ull_init+0x2f4>
    14e0:	ldr	x0, [sp, #320]
    14e4:	str	xzr, [x0, #48]
    14e8:	ldr	w0, [sp, #392]
    14ec:	cmp	w0, #0x40
    14f0:	b.hi	15b4 <gomp_doacross_ull_init+0x3c0>  // b.pmore
    14f4:	str	wzr, [sp, #352]
    14f8:	ldr	x0, [sp, #320]
    14fc:	mov	w1, #0x1                   	// #1
    1500:	strb	w1, [x0, #20]
    1504:	ldr	w0, [sp, #44]
    1508:	str	w0, [sp, #396]
    150c:	b	1564 <gomp_doacross_ull_init+0x370>
    1510:	ldr	w0, [sp, #396]
    1514:	sub	w0, w0, #0x1
    1518:	ldr	x1, [sp, #320]
    151c:	mov	w0, w0
    1520:	add	x0, x0, #0xc
    1524:	lsl	x0, x0, #2
    1528:	add	x0, x1, x0
    152c:	ldr	w1, [sp, #352]
    1530:	str	w1, [x0, #8]
    1534:	ldr	w0, [sp, #396]
    1538:	sub	w0, w0, #0x1
    153c:	mov	w0, w0
    1540:	lsl	x0, x0, #2
    1544:	add	x1, sp, #0x30
    1548:	ldr	w0, [x1, x0]
    154c:	ldr	w1, [sp, #352]
    1550:	add	w0, w1, w0
    1554:	str	w0, [sp, #352]
    1558:	ldr	w0, [sp, #396]
    155c:	sub	w0, w0, #0x1
    1560:	str	w0, [sp, #396]
    1564:	ldr	w0, [sp, #396]
    1568:	cmp	w0, #0x0
    156c:	b.ne	1510 <gomp_doacross_ull_init+0x31c>  // b.any
    1570:	str	xzr, [sp, #384]
    1574:	b	15a0 <gomp_doacross_ull_init+0x3ac>
    1578:	ldr	x0, [sp, #320]
    157c:	ldr	x1, [x0, #24]
    1580:	ldr	x2, [sp, #384]
    1584:	ldr	x0, [sp, #368]
    1588:	mul	x0, x2, x0
    158c:	add	x0, x1, x0
    1590:	str	xzr, [x0]
    1594:	ldr	x0, [sp, #384]
    1598:	add	x0, x0, #0x1
    159c:	str	x0, [sp, #384]
    15a0:	ldr	x1, [sp, #384]
    15a4:	ldr	x0, [sp, #376]
    15a8:	cmp	x1, x0
    15ac:	b.cc	1578 <gomp_doacross_ull_init+0x384>  // b.lo, b.ul, b.last
    15b0:	b	1608 <gomp_doacross_ull_init+0x414>
    15b4:	str	xzr, [sp, #384]
    15b8:	b	15f8 <gomp_doacross_ull_init+0x404>
    15bc:	ldr	x0, [sp, #320]
    15c0:	ldr	x1, [x0, #24]
    15c4:	ldr	x2, [sp, #384]
    15c8:	ldr	x0, [sp, #368]
    15cc:	mul	x0, x2, x0
    15d0:	add	x3, x1, x0
    15d4:	ldr	w0, [sp, #44]
    15d8:	lsl	x0, x0, #3
    15dc:	mov	x2, x0
    15e0:	mov	w1, #0x0                   	// #0
    15e4:	mov	x0, x3
    15e8:	bl	0 <memset>
    15ec:	ldr	x0, [sp, #384]
    15f0:	add	x0, x0, #0x1
    15f4:	str	x0, [sp, #384]
    15f8:	ldr	x1, [sp, #384]
    15fc:	ldr	x0, [sp, #376]
    1600:	cmp	x1, x0
    1604:	b.cc	15bc <gomp_doacross_ull_init+0x3c8>  // b.lo, b.ul, b.last
    1608:	ldr	x0, [sp, #328]
    160c:	ldr	w0, [x0]
    1610:	cmp	w0, #0x1
    1614:	b.ne	1688 <gomp_doacross_ull_init+0x494>  // b.any
    1618:	ldr	x0, [sp, #24]
    161c:	cmp	x0, #0x0
    1620:	b.ne	1688 <gomp_doacross_ull_init+0x494>  // b.any
    1624:	ldr	x0, [sp, #32]
    1628:	ldr	x1, [x0]
    162c:	ldr	x0, [sp, #376]
    1630:	udiv	x0, x1, x0
    1634:	str	x0, [sp, #312]
    1638:	ldr	x0, [sp, #32]
    163c:	ldr	x0, [x0]
    1640:	ldr	x1, [sp, #376]
    1644:	udiv	x2, x0, x1
    1648:	ldr	x1, [sp, #376]
    164c:	mul	x1, x2, x1
    1650:	sub	x0, x0, x1
    1654:	str	x0, [sp, #304]
    1658:	ldr	x0, [sp, #312]
    165c:	add	x1, x0, #0x1
    1660:	ldr	x0, [sp, #304]
    1664:	mul	x1, x1, x0
    1668:	ldr	x0, [sp, #320]
    166c:	str	x1, [x0, #40]
    1670:	ldr	x0, [sp, #320]
    1674:	ldr	x1, [sp, #312]
    1678:	str	x1, [x0]
    167c:	ldr	x1, [sp, #304]
    1680:	ldr	x0, [sp, #320]
    1684:	str	x1, [x0, #32]
    1688:	ldr	x0, [sp, #328]
    168c:	ldr	x1, [sp, #320]
    1690:	str	x1, [x0, #32]
    1694:	ldp	x29, x30, [sp], #400
    1698:	ret

000000000000169c <GOMP_doacross_ull_post>:
    169c:	stp	x29, x30, [sp, #-96]!
    16a0:	mov	x29, sp
    16a4:	str	x0, [sp, #24]
    16a8:	bl	12c <gomp_thread>
    16ac:	str	x0, [sp, #32]
    16b0:	ldr	x0, [sp, #32]
    16b4:	ldr	x0, [x0, #24]
    16b8:	str	x0, [sp, #48]
    16bc:	ldr	x0, [sp, #48]
    16c0:	ldr	x0, [x0, #32]
    16c4:	str	x0, [sp, #40]
    16c8:	ldr	x0, [sp, #40]
    16cc:	cmp	x0, #0x0
    16d0:	cset	w0, eq  // eq = none
    16d4:	and	w0, w0, #0xff
    16d8:	and	x0, x0, #0xff
    16dc:	cmp	x0, #0x0
    16e0:	b.ne	1704 <GOMP_doacross_ull_post+0x68>  // b.any
    16e4:	ldr	x0, [sp, #40]
    16e8:	ldr	x0, [x0, #24]
    16ec:	cmp	x0, #0x0
    16f0:	cset	w0, eq  // eq = none
    16f4:	and	w0, w0, #0xff
    16f8:	and	x0, x0, #0xff
    16fc:	cmp	x0, #0x0
    1700:	b.eq	170c <GOMP_doacross_ull_post+0x70>  // b.none
    1704:	dmb	ish
    1708:	b	190c <GOMP_doacross_ull_post+0x270>
    170c:	ldr	x0, [sp, #48]
    1710:	ldr	w0, [x0]
    1714:	cmp	w0, #0x1
    1718:	cset	w0, eq  // eq = none
    171c:	and	w0, w0, #0xff
    1720:	and	x0, x0, #0xff
    1724:	cmp	x0, #0x0
    1728:	b.eq	1740 <GOMP_doacross_ull_post+0xa4>  // b.none
    172c:	ldr	x0, [sp, #32]
    1730:	ldr	w0, [x0, #40]
    1734:	mov	w0, w0
    1738:	str	x0, [sp, #80]
    173c:	b	1778 <GOMP_doacross_ull_post+0xdc>
    1740:	ldr	x0, [sp, #48]
    1744:	ldr	w0, [x0]
    1748:	cmp	w0, #0x3
    174c:	b.ne	1760 <GOMP_doacross_ull_post+0xc4>  // b.any
    1750:	ldr	x0, [sp, #24]
    1754:	ldr	x0, [x0]
    1758:	str	x0, [sp, #80]
    175c:	b	1778 <GOMP_doacross_ull_post+0xdc>
    1760:	ldr	x0, [sp, #24]
    1764:	ldr	x1, [x0]
    1768:	ldr	x0, [sp, #40]
    176c:	ldr	x0, [x0]
    1770:	udiv	x0, x1, x0
    1774:	str	x0, [sp, #80]
    1778:	ldr	x0, [sp, #40]
    177c:	ldrb	w0, [x0, #20]
    1780:	and	x0, x0, #0xff
    1784:	cmp	x0, #0x0
    1788:	b.eq	1864 <GOMP_doacross_ull_post+0x1c8>  // b.none
    178c:	ldr	x0, [sp, #40]
    1790:	ldr	x1, [x0, #24]
    1794:	ldr	x0, [sp, #40]
    1798:	ldr	x2, [x0, #8]
    179c:	ldr	x0, [sp, #80]
    17a0:	mul	x0, x2, x0
    17a4:	add	x0, x1, x0
    17a8:	str	x0, [sp, #56]
    17ac:	ldr	x0, [sp, #24]
    17b0:	ldr	x1, [x0]
    17b4:	ldr	x0, [sp, #40]
    17b8:	ldr	w0, [x0, #56]
    17bc:	lsl	x0, x1, x0
    17c0:	str	x0, [sp, #88]
    17c4:	mov	w0, #0x1                   	// #1
    17c8:	str	w0, [sp, #68]
    17cc:	b	1818 <GOMP_doacross_ull_post+0x17c>
    17d0:	ldr	w0, [sp, #68]
    17d4:	lsl	x0, x0, #3
    17d8:	ldr	x1, [sp, #24]
    17dc:	add	x0, x1, x0
    17e0:	ldr	x1, [x0]
    17e4:	ldr	x2, [sp, #40]
    17e8:	ldr	w0, [sp, #68]
    17ec:	add	x0, x0, #0xc
    17f0:	lsl	x0, x0, #2
    17f4:	add	x0, x2, x0
    17f8:	ldr	w0, [x0, #8]
    17fc:	lsl	x0, x1, x0
    1800:	ldr	x1, [sp, #88]
    1804:	orr	x0, x1, x0
    1808:	str	x0, [sp, #88]
    180c:	ldr	w0, [sp, #68]
    1810:	add	w0, w0, #0x1
    1814:	str	w0, [sp, #68]
    1818:	ldr	x0, [sp, #40]
    181c:	ldr	w0, [x0, #16]
    1820:	ldr	w1, [sp, #68]
    1824:	cmp	w1, w0
    1828:	b.cc	17d0 <GOMP_doacross_ull_post+0x134>  // b.lo, b.ul, b.last
    182c:	ldr	x0, [sp, #88]
    1830:	add	x0, x0, #0x1
    1834:	str	x0, [sp, #88]
    1838:	ldr	x0, [sp, #56]
    183c:	ldar	x0, [x0]
    1840:	ldr	x1, [sp, #88]
    1844:	cmp	x1, x0
    1848:	b.ne	1854 <GOMP_doacross_ull_post+0x1b8>  // b.any
    184c:	dmb	ish
    1850:	b	190c <GOMP_doacross_ull_post+0x270>
    1854:	ldr	x0, [sp, #56]
    1858:	ldr	x1, [sp, #88]
    185c:	stlr	x1, [x0]
    1860:	b	190c <GOMP_doacross_ull_post+0x270>
    1864:	dmb	ishld
    1868:	ldr	x0, [sp, #40]
    186c:	ldr	x1, [x0, #24]
    1870:	ldr	x0, [sp, #40]
    1874:	ldr	x2, [x0, #8]
    1878:	ldr	x0, [sp, #80]
    187c:	mul	x0, x2, x0
    1880:	add	x0, x1, x0
    1884:	str	x0, [sp, #72]
    1888:	ldr	x0, [sp, #40]
    188c:	ldr	w0, [x0, #16]
    1890:	str	w0, [sp, #68]
    1894:	b	18f8 <GOMP_doacross_ull_post+0x25c>
    1898:	ldr	w0, [sp, #68]
    189c:	lsl	x0, x0, #3
    18a0:	ldr	x1, [sp, #24]
    18a4:	add	x0, x1, x0
    18a8:	ldr	x0, [x0]
    18ac:	add	x1, x0, #0x1
    18b0:	ldr	w0, [sp, #68]
    18b4:	lsl	x0, x0, #3
    18b8:	ldr	x2, [sp, #72]
    18bc:	add	x0, x2, x0
    18c0:	ldr	x0, [x0]
    18c4:	cmp	x1, x0
    18c8:	b.eq	18f8 <GOMP_doacross_ull_post+0x25c>  // b.none
    18cc:	ldr	w0, [sp, #68]
    18d0:	lsl	x0, x0, #3
    18d4:	ldr	x1, [sp, #72]
    18d8:	add	x0, x1, x0
    18dc:	ldr	w1, [sp, #68]
    18e0:	lsl	x1, x1, #3
    18e4:	ldr	x2, [sp, #24]
    18e8:	add	x1, x2, x1
    18ec:	ldr	x1, [x1]
    18f0:	add	x1, x1, #0x1
    18f4:	stlr	x1, [x0]
    18f8:	ldr	w0, [sp, #68]
    18fc:	sub	w1, w0, #0x1
    1900:	str	w1, [sp, #68]
    1904:	cmp	w0, #0x0
    1908:	b.ne	1898 <GOMP_doacross_ull_post+0x1fc>  // b.any
    190c:	ldp	x29, x30, [sp], #96
    1910:	ret

0000000000001914 <GOMP_doacross_ull_wait>:
    1914:	stp	x29, x30, [sp, #-352]!
    1918:	mov	x29, sp
    191c:	str	x0, [sp, #24]
    1920:	str	x1, [sp, #296]
    1924:	str	x2, [sp, #304]
    1928:	str	x3, [sp, #312]
    192c:	str	x4, [sp, #320]
    1930:	str	x5, [sp, #328]
    1934:	str	x6, [sp, #336]
    1938:	str	x7, [sp, #344]
    193c:	str	q0, [sp, #160]
    1940:	str	q1, [sp, #176]
    1944:	str	q2, [sp, #192]
    1948:	str	q3, [sp, #208]
    194c:	str	q4, [sp, #224]
    1950:	str	q5, [sp, #240]
    1954:	str	q6, [sp, #256]
    1958:	str	q7, [sp, #272]
    195c:	bl	12c <gomp_thread>
    1960:	str	x0, [sp, #128]
    1964:	ldr	x0, [sp, #128]
    1968:	ldr	x0, [x0, #24]
    196c:	str	x0, [sp, #120]
    1970:	ldr	x0, [sp, #120]
    1974:	ldr	x0, [x0, #32]
    1978:	str	x0, [sp, #112]
    197c:	ldr	x0, [sp, #112]
    1980:	cmp	x0, #0x0
    1984:	cset	w0, eq  // eq = none
    1988:	and	w0, w0, #0xff
    198c:	and	x0, x0, #0xff
    1990:	cmp	x0, #0x0
    1994:	b.ne	19b8 <GOMP_doacross_ull_wait+0xa4>  // b.any
    1998:	ldr	x0, [sp, #112]
    199c:	ldr	x0, [x0, #24]
    19a0:	cmp	x0, #0x0
    19a4:	cset	w0, eq  // eq = none
    19a8:	and	w0, w0, #0xff
    19ac:	and	x0, x0, #0xff
    19b0:	cmp	x0, #0x0
    19b4:	b.eq	19c0 <GOMP_doacross_ull_wait+0xac>  // b.none
    19b8:	dmb	ish
    19bc:	b	1d60 <GOMP_doacross_ull_wait+0x44c>
    19c0:	ldr	x0, [sp, #120]
    19c4:	ldr	w0, [x0]
    19c8:	cmp	w0, #0x1
    19cc:	cset	w0, eq  // eq = none
    19d0:	and	w0, w0, #0xff
    19d4:	and	x0, x0, #0xff
    19d8:	cmp	x0, #0x0
    19dc:	b.eq	1a84 <GOMP_doacross_ull_wait+0x170>  // b.none
    19e0:	ldr	x0, [sp, #120]
    19e4:	ldr	x0, [x0, #8]
    19e8:	cmp	x0, #0x0
    19ec:	b.ne	1a50 <GOMP_doacross_ull_wait+0x13c>  // b.any
    19f0:	ldr	x0, [sp, #112]
    19f4:	ldr	x0, [x0, #40]
    19f8:	ldr	x1, [sp, #24]
    19fc:	cmp	x1, x0
    1a00:	b.cs	1a20 <GOMP_doacross_ull_wait+0x10c>  // b.hs, b.nlast
    1a04:	ldr	x0, [sp, #112]
    1a08:	ldr	x0, [x0]
    1a0c:	add	x0, x0, #0x1
    1a10:	ldr	x1, [sp, #24]
    1a14:	udiv	x0, x1, x0
    1a18:	str	x0, [sp, #136]
    1a1c:	b	1ab4 <GOMP_doacross_ull_wait+0x1a0>
    1a20:	ldr	x0, [sp, #112]
    1a24:	ldr	x0, [x0, #40]
    1a28:	ldr	x1, [sp, #24]
    1a2c:	sub	x1, x1, x0
    1a30:	ldr	x0, [sp, #112]
    1a34:	ldr	x0, [x0]
    1a38:	udiv	x0, x1, x0
    1a3c:	ldr	x1, [sp, #112]
    1a40:	ldr	x1, [x1, #32]
    1a44:	add	x0, x0, x1
    1a48:	str	x0, [sp, #136]
    1a4c:	b	1ab4 <GOMP_doacross_ull_wait+0x1a0>
    1a50:	ldr	x0, [sp, #120]
    1a54:	ldr	x0, [x0, #8]
    1a58:	ldr	x1, [sp, #24]
    1a5c:	udiv	x0, x1, x0
    1a60:	ldr	x1, [sp, #128]
    1a64:	ldr	x1, [x1, #16]
    1a68:	ldr	w1, [x1]
    1a6c:	mov	w1, w1
    1a70:	udiv	x2, x0, x1
    1a74:	mul	x1, x2, x1
    1a78:	sub	x0, x0, x1
    1a7c:	str	x0, [sp, #136]
    1a80:	b	1ab4 <GOMP_doacross_ull_wait+0x1a0>
    1a84:	ldr	x0, [sp, #120]
    1a88:	ldr	w0, [x0]
    1a8c:	cmp	w0, #0x3
    1a90:	b.ne	1aa0 <GOMP_doacross_ull_wait+0x18c>  // b.any
    1a94:	ldr	x0, [sp, #24]
    1a98:	str	x0, [sp, #136]
    1a9c:	b	1ab4 <GOMP_doacross_ull_wait+0x1a0>
    1aa0:	ldr	x0, [sp, #112]
    1aa4:	ldr	x0, [x0]
    1aa8:	ldr	x1, [sp, #24]
    1aac:	udiv	x0, x1, x0
    1ab0:	str	x0, [sp, #136]
    1ab4:	ldr	x0, [sp, #112]
    1ab8:	ldrb	w0, [x0, #20]
    1abc:	and	x0, x0, #0xff
    1ac0:	cmp	x0, #0x0
    1ac4:	b.eq	1c08 <GOMP_doacross_ull_wait+0x2f4>  // b.none
    1ac8:	ldr	x0, [sp, #112]
    1acc:	ldr	x1, [x0, #24]
    1ad0:	ldr	x0, [sp, #112]
    1ad4:	ldr	x2, [x0, #8]
    1ad8:	ldr	x0, [sp, #136]
    1adc:	mul	x0, x2, x0
    1ae0:	add	x0, x1, x0
    1ae4:	str	x0, [sp, #80]
    1ae8:	ldr	x0, [sp, #112]
    1aec:	ldr	w0, [x0, #56]
    1af0:	ldr	x1, [sp, #24]
    1af4:	lsl	x0, x1, x0
    1af8:	str	x0, [sp, #144]
    1afc:	add	x0, sp, #0x160
    1b00:	str	x0, [sp, #40]
    1b04:	add	x0, sp, #0x160
    1b08:	str	x0, [sp, #48]
    1b0c:	add	x0, sp, #0x120
    1b10:	str	x0, [sp, #56]
    1b14:	mov	w0, #0xffffffc8            	// #-56
    1b18:	str	w0, [sp, #64]
    1b1c:	mov	w0, #0xffffff80            	// #-128
    1b20:	str	w0, [sp, #68]
    1b24:	mov	w0, #0x1                   	// #1
    1b28:	str	w0, [sp, #156]
    1b2c:	b	1bb8 <GOMP_doacross_ull_wait+0x2a4>
    1b30:	ldr	w1, [sp, #64]
    1b34:	ldr	x0, [sp, #40]
    1b38:	cmp	w1, #0x0
    1b3c:	b.lt	1b50 <GOMP_doacross_ull_wait+0x23c>  // b.tstop
    1b40:	add	x1, x0, #0xf
    1b44:	and	x1, x1, #0xfffffffffffffff8
    1b48:	str	x1, [sp, #40]
    1b4c:	b	1b80 <GOMP_doacross_ull_wait+0x26c>
    1b50:	add	w2, w1, #0x8
    1b54:	str	w2, [sp, #64]
    1b58:	ldr	w2, [sp, #64]
    1b5c:	cmp	w2, #0x0
    1b60:	b.le	1b74 <GOMP_doacross_ull_wait+0x260>
    1b64:	add	x1, x0, #0xf
    1b68:	and	x1, x1, #0xfffffffffffffff8
    1b6c:	str	x1, [sp, #40]
    1b70:	b	1b80 <GOMP_doacross_ull_wait+0x26c>
    1b74:	ldr	x2, [sp, #48]
    1b78:	sxtw	x0, w1
    1b7c:	add	x0, x2, x0
    1b80:	ldr	x1, [x0]
    1b84:	ldr	x2, [sp, #112]
    1b88:	ldr	w0, [sp, #156]
    1b8c:	add	x0, x0, #0xc
    1b90:	lsl	x0, x0, #2
    1b94:	add	x0, x2, x0
    1b98:	ldr	w0, [x0, #8]
    1b9c:	lsl	x0, x1, x0
    1ba0:	ldr	x1, [sp, #144]
    1ba4:	orr	x0, x1, x0
    1ba8:	str	x0, [sp, #144]
    1bac:	ldr	w0, [sp, #156]
    1bb0:	add	w0, w0, #0x1
    1bb4:	str	w0, [sp, #156]
    1bb8:	ldr	x0, [sp, #112]
    1bbc:	ldr	w0, [x0, #16]
    1bc0:	ldr	w1, [sp, #156]
    1bc4:	cmp	w1, w0
    1bc8:	b.cc	1b30 <GOMP_doacross_ull_wait+0x21c>  // b.lo, b.ul, b.last
    1bcc:	ldr	x0, [sp, #80]
    1bd0:	ldar	x0, [x0]
    1bd4:	str	x0, [sp, #72]
    1bd8:	ldr	x1, [sp, #144]
    1bdc:	ldr	x0, [sp, #72]
    1be0:	cmp	x1, x0
    1be4:	b.cs	1bf0 <GOMP_doacross_ull_wait+0x2dc>  // b.hs, b.nlast
    1be8:	dmb	ish
    1bec:	b	1d60 <GOMP_doacross_ull_wait+0x44c>
    1bf0:	ldr	x2, [sp, #72]
    1bf4:	ldr	x1, [sp, #144]
    1bf8:	ldr	x0, [sp, #80]
    1bfc:	bl	148 <doacross_spin>
    1c00:	dmb	ish
    1c04:	b	1d60 <GOMP_doacross_ull_wait+0x44c>
    1c08:	ldr	x0, [sp, #112]
    1c0c:	ldr	x1, [x0, #24]
    1c10:	ldr	x0, [sp, #112]
    1c14:	ldr	x2, [x0, #8]
    1c18:	ldr	x0, [sp, #136]
    1c1c:	mul	x0, x2, x0
    1c20:	add	x0, x1, x0
    1c24:	str	x0, [sp, #104]
    1c28:	add	x0, sp, #0x160
    1c2c:	str	x0, [sp, #40]
    1c30:	add	x0, sp, #0x160
    1c34:	str	x0, [sp, #48]
    1c38:	add	x0, sp, #0x120
    1c3c:	str	x0, [sp, #56]
    1c40:	mov	w0, #0xffffffc8            	// #-56
    1c44:	str	w0, [sp, #64]
    1c48:	mov	w0, #0xffffff80            	// #-128
    1c4c:	str	w0, [sp, #68]
    1c50:	str	wzr, [sp, #156]
    1c54:	b	1d20 <GOMP_doacross_ull_wait+0x40c>
    1c58:	ldr	w0, [sp, #156]
    1c5c:	cmp	w0, #0x0
    1c60:	b.eq	1cc0 <GOMP_doacross_ull_wait+0x3ac>  // b.none
    1c64:	ldr	w1, [sp, #64]
    1c68:	ldr	x0, [sp, #40]
    1c6c:	cmp	w1, #0x0
    1c70:	b.lt	1c84 <GOMP_doacross_ull_wait+0x370>  // b.tstop
    1c74:	add	x1, x0, #0xf
    1c78:	and	x1, x1, #0xfffffffffffffff8
    1c7c:	str	x1, [sp, #40]
    1c80:	b	1cb4 <GOMP_doacross_ull_wait+0x3a0>
    1c84:	add	w2, w1, #0x8
    1c88:	str	w2, [sp, #64]
    1c8c:	ldr	w2, [sp, #64]
    1c90:	cmp	w2, #0x0
    1c94:	b.le	1ca8 <GOMP_doacross_ull_wait+0x394>
    1c98:	add	x1, x0, #0xf
    1c9c:	and	x1, x1, #0xfffffffffffffff8
    1ca0:	str	x1, [sp, #40]
    1ca4:	b	1cb4 <GOMP_doacross_ull_wait+0x3a0>
    1ca8:	ldr	x2, [sp, #48]
    1cac:	sxtw	x0, w1
    1cb0:	add	x0, x2, x0
    1cb4:	ldr	x0, [x0]
    1cb8:	add	x0, x0, #0x1
    1cbc:	b	1cc8 <GOMP_doacross_ull_wait+0x3b4>
    1cc0:	ldr	x0, [sp, #24]
    1cc4:	add	x0, x0, #0x1
    1cc8:	str	x0, [sp, #96]
    1ccc:	ldr	w0, [sp, #156]
    1cd0:	lsl	x0, x0, #3
    1cd4:	ldr	x1, [sp, #104]
    1cd8:	add	x0, x1, x0
    1cdc:	ldr	x0, [x0]
    1ce0:	str	x0, [sp, #88]
    1ce4:	ldr	x1, [sp, #96]
    1ce8:	ldr	x0, [sp, #88]
    1cec:	cmp	x1, x0
    1cf0:	b.cs	1d04 <GOMP_doacross_ull_wait+0x3f0>  // b.hs, b.nlast
    1cf4:	ldr	x0, [sp, #112]
    1cf8:	ldr	w0, [x0, #16]
    1cfc:	str	w0, [sp, #156]
    1d00:	b	1d3c <GOMP_doacross_ull_wait+0x428>
    1d04:	ldr	x1, [sp, #96]
    1d08:	ldr	x0, [sp, #88]
    1d0c:	cmp	x1, x0
    1d10:	b.hi	1d38 <GOMP_doacross_ull_wait+0x424>  // b.pmore
    1d14:	ldr	w0, [sp, #156]
    1d18:	add	w0, w0, #0x1
    1d1c:	str	w0, [sp, #156]
    1d20:	ldr	x0, [sp, #112]
    1d24:	ldr	w0, [x0, #16]
    1d28:	ldr	w1, [sp, #156]
    1d2c:	cmp	w1, w0
    1d30:	b.cc	1c58 <GOMP_doacross_ull_wait+0x344>  // b.lo, b.ul, b.last
    1d34:	b	1d3c <GOMP_doacross_ull_wait+0x428>
    1d38:	nop
    1d3c:	ldr	x0, [sp, #112]
    1d40:	ldr	w0, [x0, #16]
    1d44:	ldr	w1, [sp, #156]
    1d48:	cmp	w1, w0
    1d4c:	b.eq	1d58 <GOMP_doacross_ull_wait+0x444>  // b.none
    1d50:	bl	140 <cpu_relax>
    1d54:	b	1c28 <GOMP_doacross_ull_wait+0x314>
    1d58:	nop
    1d5c:	dmb	ish
    1d60:	ldp	x29, x30, [sp], #352
    1d64:	ret

parallel.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_sem_destroy>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	nop
   c:	add	sp, sp, #0x10
  10:	ret

0000000000000014 <gomp_mutex_lock>:
  14:	stp	x29, x30, [sp, #-48]!
  18:	mov	x29, sp
  1c:	str	x0, [sp, #24]
  20:	str	wzr, [sp, #44]
  24:	ldr	x1, [sp, #24]
  28:	add	x0, sp, #0x2c
  2c:	ldr	w3, [x0]
  30:	mov	w4, #0x1                   	// #1
  34:	ldaxr	w2, [x1]
  38:	cmp	w2, w3
  3c:	b.ne	48 <gomp_mutex_lock+0x34>  // b.any
  40:	stxr	w5, w4, [x1]
  44:	cbnz	w5, 34 <gomp_mutex_lock+0x20>
  48:	cset	w1, eq  // eq = none
  4c:	cmp	w1, #0x0
  50:	b.ne	58 <gomp_mutex_lock+0x44>  // b.any
  54:	str	w2, [x0]
  58:	mov	w0, w1
  5c:	eor	w0, w0, #0x1
  60:	and	w0, w0, #0xff
  64:	cmp	w0, #0x0
  68:	b.eq	7c <gomp_mutex_lock+0x68>  // b.none
  6c:	ldr	w0, [sp, #44]
  70:	mov	w1, w0
  74:	ldr	x0, [sp, #24]
  78:	bl	0 <gomp_mutex_lock_slow>
  7c:	nop
  80:	ldp	x29, x30, [sp], #48
  84:	ret

0000000000000088 <gomp_mutex_unlock>:
  88:	stp	x29, x30, [sp, #-48]!
  8c:	mov	x29, sp
  90:	str	x0, [sp, #24]
  94:	ldr	x1, [sp, #24]
  98:	ldxr	w0, [x1]
  9c:	stlxr	w2, wzr, [x1]
  a0:	cbnz	w2, 98 <gomp_mutex_unlock+0x10>
  a4:	str	w0, [sp, #44]
  a8:	ldr	w0, [sp, #44]
  ac:	lsr	w0, w0, #31
  b0:	and	w0, w0, #0xff
  b4:	and	x0, x0, #0xff
  b8:	cmp	x0, #0x0
  bc:	b.eq	c8 <gomp_mutex_unlock+0x40>  // b.none
  c0:	ldr	x0, [sp, #24]
  c4:	bl	0 <gomp_mutex_unlock_slow>
  c8:	nop
  cc:	ldp	x29, x30, [sp], #48
  d0:	ret

00000000000000d4 <gomp_team_barrier_cancelled>:
  d4:	sub	sp, sp, #0x10
  d8:	str	x0, [sp, #8]
  dc:	ldr	x0, [sp, #8]
  e0:	ldr	w0, [x0, #4]
  e4:	and	w0, w0, #0x4
  e8:	cmp	w0, #0x0
  ec:	cset	w0, ne  // ne = any
  f0:	and	w0, w0, #0xff
  f4:	and	x0, x0, #0xff
  f8:	cmp	x0, #0x0
  fc:	cset	w0, ne  // ne = any
 100:	and	w0, w0, #0xff
 104:	add	sp, sp, #0x10
 108:	ret

000000000000010c <gomp_thread>:
 10c:	mrs	x1, tpidr_el0
 110:	adrp	x0, 0 <gomp_tls_data>
 114:	ldr	x0, [x0]
 118:	add	x0, x1, x0
 11c:	ret

0000000000000120 <gomp_icv>:
 120:	stp	x29, x30, [sp, #-48]!
 124:	mov	x29, sp
 128:	strb	w0, [sp, #31]
 12c:	bl	10c <gomp_thread>
 130:	ldr	x0, [x0, #80]
 134:	str	x0, [sp, #40]
 138:	ldr	x0, [sp, #40]
 13c:	cmp	x0, #0x0
 140:	b.eq	150 <gomp_icv+0x30>  // b.none
 144:	ldr	x0, [sp, #40]
 148:	add	x0, x0, #0x90
 14c:	b	16c <gomp_icv+0x4c>
 150:	ldrb	w0, [sp, #31]
 154:	cmp	w0, #0x0
 158:	b.eq	164 <gomp_icv+0x44>  // b.none
 15c:	bl	0 <gomp_new_icv>
 160:	b	16c <gomp_icv+0x4c>
 164:	adrp	x0, 0 <gomp_global_icv>
 168:	add	x0, x0, #0x0
 16c:	ldp	x29, x30, [sp], #48
 170:	ret

0000000000000174 <gomp_resolve_num_threads>:
 174:	stp	x29, x30, [sp, #-96]!
 178:	mov	x29, sp
 17c:	str	w0, [sp, #28]
 180:	str	w1, [sp, #24]
 184:	bl	10c <gomp_thread>
 188:	str	x0, [sp, #72]
 18c:	mov	w0, #0x0                   	// #0
 190:	bl	120 <gomp_icv>
 194:	str	x0, [sp, #64]
 198:	ldr	w0, [sp, #28]
 19c:	cmp	w0, #0x1
 1a0:	b.ne	1ac <gomp_resolve_num_threads+0x38>  // b.any
 1a4:	mov	w0, #0x1                   	// #1
 1a8:	b	3bc <gomp_resolve_num_threads+0x248>
 1ac:	ldr	x0, [sp, #72]
 1b0:	ldr	w0, [x0, #48]
 1b4:	cmp	w0, #0x0
 1b8:	b.eq	1dc <gomp_resolve_num_threads+0x68>  // b.none
 1bc:	ldr	x0, [sp, #64]
 1c0:	ldrb	w0, [x0, #25]
 1c4:	eor	w0, w0, #0x1
 1c8:	and	w0, w0, #0xff
 1cc:	cmp	w0, #0x0
 1d0:	b.eq	1dc <gomp_resolve_num_threads+0x68>  // b.none
 1d4:	mov	w0, #0x1                   	// #1
 1d8:	b	3bc <gomp_resolve_num_threads+0x248>
 1dc:	ldr	x0, [sp, #72]
 1e0:	ldr	w0, [x0, #48]
 1e4:	mov	w1, w0
 1e8:	adrp	x0, 0 <gomp_max_active_levels_var>
 1ec:	add	x0, x0, #0x0
 1f0:	ldr	x0, [x0]
 1f4:	cmp	x1, x0
 1f8:	b.cc	204 <gomp_resolve_num_threads+0x90>  // b.lo, b.ul, b.last
 1fc:	mov	w0, #0x1                   	// #1
 200:	b	3bc <gomp_resolve_num_threads+0x248>
 204:	ldr	w0, [sp, #28]
 208:	cmp	w0, #0x0
 20c:	b.ne	220 <gomp_resolve_num_threads+0xac>  // b.any
 210:	ldr	x0, [sp, #64]
 214:	ldr	x0, [x0]
 218:	str	w0, [sp, #92]
 21c:	b	228 <gomp_resolve_num_threads+0xb4>
 220:	ldr	w0, [sp, #28]
 224:	str	w0, [sp, #92]
 228:	ldr	w0, [sp, #92]
 22c:	str	w0, [sp, #88]
 230:	ldr	x0, [sp, #64]
 234:	ldrb	w0, [x0, #24]
 238:	cmp	w0, #0x0
 23c:	b.eq	284 <gomp_resolve_num_threads+0x110>  // b.none
 240:	bl	0 <gomp_dynamic_max_threads>
 244:	str	w0, [sp, #60]
 248:	ldr	w1, [sp, #60]
 24c:	ldr	w0, [sp, #88]
 250:	cmp	w1, w0
 254:	b.cs	260 <gomp_resolve_num_threads+0xec>  // b.hs, b.nlast
 258:	ldr	w0, [sp, #60]
 25c:	str	w0, [sp, #88]
 260:	ldr	w0, [sp, #24]
 264:	cmp	w0, #0x0
 268:	b.eq	284 <gomp_resolve_num_threads+0x110>  // b.none
 26c:	ldr	w1, [sp, #24]
 270:	ldr	w0, [sp, #88]
 274:	cmp	w1, w0
 278:	b.cs	284 <gomp_resolve_num_threads+0x110>  // b.hs, b.nlast
 27c:	ldr	w0, [sp, #24]
 280:	str	w0, [sp, #88]
 284:	ldr	x0, [sp, #64]
 288:	ldr	w0, [x0, #20]
 28c:	cmn	w0, #0x1
 290:	cset	w0, eq  // eq = none
 294:	and	w0, w0, #0xff
 298:	and	x0, x0, #0xff
 29c:	cmp	x0, #0x0
 2a0:	b.ne	2b0 <gomp_resolve_num_threads+0x13c>  // b.any
 2a4:	ldr	w0, [sp, #88]
 2a8:	cmp	w0, #0x1
 2ac:	b.ne	2b8 <gomp_resolve_num_threads+0x144>  // b.any
 2b0:	ldr	w0, [sp, #88]
 2b4:	b	3bc <gomp_resolve_num_threads+0x248>
 2b8:	ldr	x0, [sp, #72]
 2bc:	ldr	x0, [x0, #96]
 2c0:	str	x0, [sp, #48]
 2c4:	ldr	x0, [sp, #72]
 2c8:	ldr	x0, [x0, #16]
 2cc:	cmp	x0, #0x0
 2d0:	b.eq	2e0 <gomp_resolve_num_threads+0x16c>  // b.none
 2d4:	ldr	x0, [sp, #48]
 2d8:	cmp	x0, #0x0
 2dc:	b.ne	328 <gomp_resolve_num_threads+0x1b4>  // b.any
 2e0:	ldr	w0, [sp, #88]
 2e4:	str	w0, [sp, #84]
 2e8:	ldr	x0, [sp, #64]
 2ec:	ldr	w0, [x0, #20]
 2f0:	ldr	w1, [sp, #84]
 2f4:	cmp	w1, w0
 2f8:	b.ls	308 <gomp_resolve_num_threads+0x194>  // b.plast
 2fc:	ldr	x0, [sp, #64]
 300:	ldr	w0, [x0, #20]
 304:	str	w0, [sp, #84]
 308:	ldr	x0, [sp, #48]
 30c:	cmp	x0, #0x0
 310:	b.eq	320 <gomp_resolve_num_threads+0x1ac>  // b.none
 314:	ldr	w1, [sp, #84]
 318:	ldr	x0, [sp, #48]
 31c:	str	x1, [x0, #24]
 320:	ldr	w0, [sp, #84]
 324:	b	3bc <gomp_resolve_num_threads+0x248>
 328:	ldr	x0, [sp, #48]
 32c:	ldr	x0, [x0, #24]
 330:	str	x0, [sp, #40]
 334:	ldr	w0, [sp, #88]
 338:	str	w0, [sp, #84]
 33c:	ldr	x0, [sp, #64]
 340:	ldr	w0, [x0, #20]
 344:	mov	w1, w0
 348:	ldr	x0, [sp, #40]
 34c:	sub	x0, x1, x0
 350:	add	x1, x0, #0x1
 354:	ldr	w0, [sp, #84]
 358:	cmp	x1, x0
 35c:	b.cs	378 <gomp_resolve_num_threads+0x204>  // b.hs, b.nlast
 360:	ldr	x0, [sp, #64]
 364:	ldr	w0, [x0, #20]
 368:	ldr	x1, [sp, #40]
 36c:	sub	w0, w0, w1
 370:	add	w0, w0, #0x1
 374:	str	w0, [sp, #84]
 378:	ldr	x0, [sp, #48]
 37c:	add	x1, x0, #0x18
 380:	ldr	w2, [sp, #84]
 384:	ldr	x0, [sp, #40]
 388:	add	x0, x2, x0
 38c:	sub	x3, x0, #0x1
 390:	ldr	x2, [sp, #40]
 394:	ldxr	x0, [x1]
 398:	cmp	x0, x2
 39c:	b.ne	3a8 <gomp_resolve_num_threads+0x234>  // b.any
 3a0:	stlxr	w4, x3, [x1]
 3a4:	cbnz	w4, 394 <gomp_resolve_num_threads+0x220>
 3a8:	dmb	ish
 3ac:	ldr	x1, [sp, #40]
 3b0:	cmp	x1, x0
 3b4:	b.ne	328 <gomp_resolve_num_threads+0x1b4>  // b.any
 3b8:	ldr	w0, [sp, #84]
 3bc:	ldp	x29, x30, [sp], #96
 3c0:	ret

00000000000003c4 <GOMP_parallel_start>:
 3c4:	stp	x29, x30, [sp, #-48]!
 3c8:	mov	x29, sp
 3cc:	str	x0, [sp, #40]
 3d0:	str	x1, [sp, #32]
 3d4:	str	w2, [sp, #28]
 3d8:	mov	w1, #0x0                   	// #0
 3dc:	ldr	w0, [sp, #28]
 3e0:	bl	174 <gomp_resolve_num_threads>
 3e4:	str	w0, [sp, #28]
 3e8:	ldr	w0, [sp, #28]
 3ec:	bl	0 <gomp_new_team>
 3f0:	mov	x5, #0x0                   	// #0
 3f4:	mov	x4, x0
 3f8:	mov	w3, #0x0                   	// #0
 3fc:	ldr	w2, [sp, #28]
 400:	ldr	x1, [sp, #32]
 404:	ldr	x0, [sp, #40]
 408:	bl	0 <gomp_team_start>
 40c:	nop
 410:	ldp	x29, x30, [sp], #48
 414:	ret

0000000000000418 <GOMP_parallel_end>:
 418:	stp	x29, x30, [sp, #-48]!
 41c:	mov	x29, sp
 420:	mov	w0, #0x0                   	// #0
 424:	bl	120 <gomp_icv>
 428:	str	x0, [sp, #40]
 42c:	ldr	x0, [sp, #40]
 430:	ldr	w0, [x0, #20]
 434:	cmn	w0, #0x1
 438:	cset	w0, ne  // ne = any
 43c:	and	w0, w0, #0xff
 440:	and	x0, x0, #0xff
 444:	cmp	x0, #0x0
 448:	b.eq	4e4 <GOMP_parallel_end+0xcc>  // b.none
 44c:	bl	10c <gomp_thread>
 450:	str	x0, [sp, #32]
 454:	ldr	x0, [sp, #32]
 458:	ldr	x0, [x0, #16]
 45c:	str	x0, [sp, #24]
 460:	ldr	x0, [sp, #24]
 464:	cmp	x0, #0x0
 468:	b.eq	478 <GOMP_parallel_end+0x60>  // b.none
 46c:	ldr	x0, [sp, #24]
 470:	ldr	w0, [x0]
 474:	b	47c <GOMP_parallel_end+0x64>
 478:	mov	w0, #0x1                   	// #1
 47c:	str	w0, [sp, #20]
 480:	bl	0 <gomp_team_end>
 484:	ldr	w0, [sp, #20]
 488:	cmp	w0, #0x1
 48c:	b.ls	4e8 <GOMP_parallel_end+0xd0>  // b.plast
 490:	ldr	x0, [sp, #32]
 494:	ldr	x0, [x0, #16]
 498:	cmp	x0, #0x0
 49c:	b.ne	4b4 <GOMP_parallel_end+0x9c>  // b.any
 4a0:	ldr	x0, [sp, #32]
 4a4:	ldr	x0, [x0, #96]
 4a8:	mov	x1, #0x1                   	// #1
 4ac:	str	x1, [x0, #24]
 4b0:	b	4e8 <GOMP_parallel_end+0xd0>
 4b4:	ldr	x0, [sp, #32]
 4b8:	ldr	x0, [x0, #96]
 4bc:	add	x0, x0, #0x18
 4c0:	ldr	w1, [sp, #20]
 4c4:	mov	x2, #0x1                   	// #1
 4c8:	sub	x1, x2, x1
 4cc:	ldxr	x2, [x0]
 4d0:	add	x2, x2, x1
 4d4:	stlxr	w3, x2, [x0]
 4d8:	cbnz	w3, 4cc <GOMP_parallel_end+0xb4>
 4dc:	dmb	ish
 4e0:	b	4e8 <GOMP_parallel_end+0xd0>
 4e4:	bl	0 <gomp_team_end>
 4e8:	nop
 4ec:	ldp	x29, x30, [sp], #48
 4f0:	ret

00000000000004f4 <GOMP_parallel>:
 4f4:	stp	x29, x30, [sp, #-48]!
 4f8:	mov	x29, sp
 4fc:	str	x0, [sp, #40]
 500:	str	x1, [sp, #32]
 504:	str	w2, [sp, #28]
 508:	str	w3, [sp, #24]
 50c:	mov	w1, #0x0                   	// #0
 510:	ldr	w0, [sp, #28]
 514:	bl	174 <gomp_resolve_num_threads>
 518:	str	w0, [sp, #28]
 51c:	ldr	w0, [sp, #28]
 520:	bl	0 <gomp_new_team>
 524:	mov	x5, #0x0                   	// #0
 528:	mov	x4, x0
 52c:	ldr	w3, [sp, #24]
 530:	ldr	w2, [sp, #28]
 534:	ldr	x1, [sp, #32]
 538:	ldr	x0, [sp, #40]
 53c:	bl	0 <gomp_team_start>
 540:	ldr	x1, [sp, #40]
 544:	ldr	x0, [sp, #32]
 548:	blr	x1
 54c:	bl	418 <GOMP_parallel_end>
 550:	nop
 554:	ldp	x29, x30, [sp], #48
 558:	ret

000000000000055c <GOMP_parallel_reductions>:
 55c:	stp	x29, x30, [sp, #-64]!
 560:	mov	x29, sp
 564:	str	x0, [sp, #40]
 568:	str	x1, [sp, #32]
 56c:	str	w2, [sp, #28]
 570:	str	w3, [sp, #24]
 574:	mov	w1, #0x0                   	// #0
 578:	ldr	w0, [sp, #28]
 57c:	bl	174 <gomp_resolve_num_threads>
 580:	str	w0, [sp, #28]
 584:	ldr	x0, [sp, #32]
 588:	ldr	x0, [x0]
 58c:	str	x0, [sp, #56]
 590:	ldr	w1, [sp, #28]
 594:	ldr	x0, [sp, #56]
 598:	bl	0 <gomp_parallel_reduction_register>
 59c:	str	x0, [sp, #48]
 5a0:	ldr	w0, [sp, #28]
 5a4:	bl	0 <gomp_new_team>
 5a8:	ldr	x5, [sp, #48]
 5ac:	mov	x4, x0
 5b0:	ldr	w3, [sp, #24]
 5b4:	ldr	w2, [sp, #28]
 5b8:	ldr	x1, [sp, #32]
 5bc:	ldr	x0, [sp, #40]
 5c0:	bl	0 <gomp_team_start>
 5c4:	ldr	x1, [sp, #40]
 5c8:	ldr	x0, [sp, #32]
 5cc:	blr	x1
 5d0:	bl	418 <GOMP_parallel_end>
 5d4:	ldr	x0, [sp, #48]
 5d8:	add	x0, x0, #0x34
 5dc:	bl	0 <gomp_sem_destroy>
 5e0:	ldr	x0, [sp, #48]
 5e4:	bl	0 <free>
 5e8:	ldr	w0, [sp, #28]
 5ec:	ldp	x29, x30, [sp], #64
 5f0:	ret

00000000000005f4 <GOMP_cancellation_point>:
 5f4:	stp	x29, x30, [sp, #-48]!
 5f8:	mov	x29, sp
 5fc:	str	w0, [sp, #28]
 600:	adrp	x0, 0 <gomp_cancel_var>
 604:	add	x0, x0, #0x0
 608:	ldrb	w0, [x0]
 60c:	eor	w0, w0, #0x1
 610:	and	w0, w0, #0xff
 614:	cmp	w0, #0x0
 618:	b.eq	624 <GOMP_cancellation_point+0x30>  // b.none
 61c:	mov	w0, #0x0                   	// #0
 620:	b	730 <GOMP_cancellation_point+0x13c>
 624:	bl	10c <gomp_thread>
 628:	str	x0, [sp, #40]
 62c:	ldr	x0, [sp, #40]
 630:	ldr	x0, [x0, #16]
 634:	str	x0, [sp, #32]
 638:	ldr	w0, [sp, #28]
 63c:	and	w0, w0, #0x6
 640:	cmp	w0, #0x0
 644:	b.eq	674 <GOMP_cancellation_point+0x80>  // b.none
 648:	ldr	x0, [sp, #32]
 64c:	cmp	x0, #0x0
 650:	b.ne	65c <GOMP_cancellation_point+0x68>  // b.any
 654:	mov	w0, #0x0                   	// #0
 658:	b	730 <GOMP_cancellation_point+0x13c>
 65c:	ldr	x0, [sp, #32]
 660:	ldr	w0, [x0, #1332]
 664:	cmp	w0, #0x0
 668:	cset	w0, ne  // ne = any
 66c:	and	w0, w0, #0xff
 670:	b	730 <GOMP_cancellation_point+0x13c>
 674:	ldr	w0, [sp, #28]
 678:	and	w0, w0, #0x8
 67c:	cmp	w0, #0x0
 680:	b.eq	70c <GOMP_cancellation_point+0x118>  // b.none
 684:	ldr	x0, [sp, #40]
 688:	ldr	x0, [x0, #80]
 68c:	ldr	x0, [x0, #40]
 690:	cmp	x0, #0x0
 694:	b.eq	70c <GOMP_cancellation_point+0x118>  // b.none
 698:	ldr	x0, [sp, #40]
 69c:	ldr	x0, [x0, #80]
 6a0:	ldr	x0, [x0, #40]
 6a4:	ldrb	w0, [x0, #49]
 6a8:	cmp	w0, #0x0
 6ac:	b.eq	6b8 <GOMP_cancellation_point+0xc4>  // b.none
 6b0:	mov	w0, #0x1                   	// #1
 6b4:	b	730 <GOMP_cancellation_point+0x13c>
 6b8:	ldr	x0, [sp, #40]
 6bc:	ldr	x0, [x0, #80]
 6c0:	ldr	x0, [x0, #40]
 6c4:	ldrb	w0, [x0, #50]
 6c8:	cmp	w0, #0x0
 6cc:	b.eq	70c <GOMP_cancellation_point+0x118>  // b.none
 6d0:	ldr	x0, [sp, #40]
 6d4:	ldr	x0, [x0, #80]
 6d8:	ldr	x0, [x0, #40]
 6dc:	ldr	x0, [x0]
 6e0:	cmp	x0, #0x0
 6e4:	b.eq	70c <GOMP_cancellation_point+0x118>  // b.none
 6e8:	ldr	x0, [sp, #40]
 6ec:	ldr	x0, [x0, #80]
 6f0:	ldr	x0, [x0, #40]
 6f4:	ldr	x0, [x0]
 6f8:	ldrb	w0, [x0, #49]
 6fc:	cmp	w0, #0x0
 700:	b.eq	70c <GOMP_cancellation_point+0x118>  // b.none
 704:	mov	w0, #0x1                   	// #1
 708:	b	730 <GOMP_cancellation_point+0x13c>
 70c:	ldr	x0, [sp, #32]
 710:	cmp	x0, #0x0
 714:	b.eq	72c <GOMP_cancellation_point+0x138>  // b.none
 718:	ldr	x0, [sp, #32]
 71c:	add	x0, x0, #0x80
 720:	bl	d4 <gomp_team_barrier_cancelled>
 724:	and	w0, w0, #0xff
 728:	b	730 <GOMP_cancellation_point+0x13c>
 72c:	mov	w0, #0x0                   	// #0
 730:	ldp	x29, x30, [sp], #48
 734:	ret

0000000000000738 <GOMP_cancel>:
 738:	stp	x29, x30, [sp, #-64]!
 73c:	mov	x29, sp
 740:	str	w0, [sp, #28]
 744:	strb	w1, [sp, #27]
 748:	adrp	x0, 0 <gomp_cancel_var>
 74c:	add	x0, x0, #0x0
 750:	ldrb	w0, [x0]
 754:	eor	w0, w0, #0x1
 758:	and	w0, w0, #0xff
 75c:	cmp	w0, #0x0
 760:	b.eq	76c <GOMP_cancel+0x34>  // b.none
 764:	mov	w0, #0x0                   	// #0
 768:	b	890 <GOMP_cancel+0x158>
 76c:	ldrb	w0, [sp, #27]
 770:	eor	w0, w0, #0x1
 774:	and	w0, w0, #0xff
 778:	cmp	w0, #0x0
 77c:	b.eq	790 <GOMP_cancel+0x58>  // b.none
 780:	ldr	w0, [sp, #28]
 784:	bl	5f4 <GOMP_cancellation_point>
 788:	and	w0, w0, #0xff
 78c:	b	890 <GOMP_cancel+0x158>
 790:	bl	10c <gomp_thread>
 794:	str	x0, [sp, #48]
 798:	ldr	x0, [sp, #48]
 79c:	ldr	x0, [x0, #16]
 7a0:	str	x0, [sp, #40]
 7a4:	ldr	w0, [sp, #28]
 7a8:	and	w0, w0, #0x6
 7ac:	cmp	w0, #0x0
 7b0:	b.eq	7d4 <GOMP_cancel+0x9c>  // b.none
 7b4:	ldr	x0, [sp, #40]
 7b8:	cmp	x0, #0x0
 7bc:	b.eq	7cc <GOMP_cancel+0x94>  // b.none
 7c0:	ldr	x0, [sp, #40]
 7c4:	mov	w1, #0x1                   	// #1
 7c8:	str	w1, [x0, #1332]
 7cc:	mov	w0, #0x1                   	// #1
 7d0:	b	890 <GOMP_cancel+0x158>
 7d4:	ldr	w0, [sp, #28]
 7d8:	and	w0, w0, #0x8
 7dc:	cmp	w0, #0x0
 7e0:	b.eq	878 <GOMP_cancel+0x140>  // b.none
 7e4:	ldr	x0, [sp, #48]
 7e8:	ldr	x0, [x0, #80]
 7ec:	ldr	x0, [x0, #40]
 7f0:	cmp	x0, #0x0
 7f4:	b.eq	870 <GOMP_cancel+0x138>  // b.none
 7f8:	ldr	x0, [sp, #48]
 7fc:	ldr	x0, [x0, #80]
 800:	ldr	x0, [x0, #40]
 804:	str	x0, [sp, #56]
 808:	ldr	x0, [sp, #56]
 80c:	ldrb	w0, [x0, #50]
 810:	cmp	w0, #0x0
 814:	b.eq	834 <GOMP_cancel+0xfc>  // b.none
 818:	ldr	x0, [sp, #56]
 81c:	ldr	x0, [x0]
 820:	cmp	x0, #0x0
 824:	b.eq	834 <GOMP_cancel+0xfc>  // b.none
 828:	ldr	x0, [sp, #56]
 82c:	ldr	x0, [x0]
 830:	str	x0, [sp, #56]
 834:	ldr	x0, [sp, #56]
 838:	ldrb	w0, [x0, #49]
 83c:	eor	w0, w0, #0x1
 840:	and	w0, w0, #0xff
 844:	cmp	w0, #0x0
 848:	b.eq	870 <GOMP_cancel+0x138>  // b.none
 84c:	ldr	x0, [sp, #40]
 850:	add	x0, x0, #0x500
 854:	bl	14 <gomp_mutex_lock>
 858:	ldr	x0, [sp, #56]
 85c:	mov	w1, #0x1                   	// #1
 860:	strb	w1, [x0, #49]
 864:	ldr	x0, [sp, #40]
 868:	add	x0, x0, #0x500
 86c:	bl	88 <gomp_mutex_unlock>
 870:	mov	w0, #0x1                   	// #1
 874:	b	890 <GOMP_cancel+0x158>
 878:	ldr	x0, [sp, #40]
 87c:	mov	w1, #0x1                   	// #1
 880:	str	w1, [x0, #1336]
 884:	ldr	x0, [sp, #40]
 888:	bl	0 <gomp_team_barrier_cancel>
 88c:	mov	w0, #0x1                   	// #1
 890:	ldp	x29, x30, [sp], #64
 894:	ret

0000000000000898 <gomp_ialias_omp_get_num_threads>:
 898:	stp	x29, x30, [sp, #-32]!
 89c:	mov	x29, sp
 8a0:	bl	10c <gomp_thread>
 8a4:	ldr	x0, [x0, #16]
 8a8:	str	x0, [sp, #24]
 8ac:	ldr	x0, [sp, #24]
 8b0:	cmp	x0, #0x0
 8b4:	b.eq	8c4 <gomp_ialias_omp_get_num_threads+0x2c>  // b.none
 8b8:	ldr	x0, [sp, #24]
 8bc:	ldr	w0, [x0]
 8c0:	b	8c8 <gomp_ialias_omp_get_num_threads+0x30>
 8c4:	mov	w0, #0x1                   	// #1
 8c8:	ldp	x29, x30, [sp], #32
 8cc:	ret

00000000000008d0 <gomp_ialias_omp_get_thread_num>:
 8d0:	stp	x29, x30, [sp, #-16]!
 8d4:	mov	x29, sp
 8d8:	bl	10c <gomp_thread>
 8dc:	ldr	w0, [x0, #40]
 8e0:	ldp	x29, x30, [sp], #16
 8e4:	ret

00000000000008e8 <gomp_ialias_omp_in_parallel>:
 8e8:	stp	x29, x30, [sp, #-16]!
 8ec:	mov	x29, sp
 8f0:	bl	10c <gomp_thread>
 8f4:	ldr	w0, [x0, #48]
 8f8:	cmp	w0, #0x0
 8fc:	cset	w0, ne  // ne = any
 900:	and	w0, w0, #0xff
 904:	ldp	x29, x30, [sp], #16
 908:	ret

000000000000090c <gomp_ialias_omp_get_level>:
 90c:	stp	x29, x30, [sp, #-16]!
 910:	mov	x29, sp
 914:	bl	10c <gomp_thread>
 918:	ldr	w0, [x0, #44]
 91c:	ldp	x29, x30, [sp], #16
 920:	ret

0000000000000924 <gomp_ialias_omp_get_ancestor_thread_num>:
 924:	stp	x29, x30, [sp, #-48]!
 928:	mov	x29, sp
 92c:	str	w0, [sp, #28]
 930:	bl	10c <gomp_thread>
 934:	add	x0, x0, #0x10
 938:	str	x0, [sp, #40]
 93c:	ldr	w0, [sp, #28]
 940:	cmp	w0, #0x0
 944:	b.lt	95c <gomp_ialias_omp_get_ancestor_thread_num+0x38>  // b.tstop
 948:	ldr	x0, [sp, #40]
 94c:	ldr	w1, [x0, #28]
 950:	ldr	w0, [sp, #28]
 954:	cmp	w1, w0
 958:	b.cs	964 <gomp_ialias_omp_get_ancestor_thread_num+0x40>  // b.hs, b.nlast
 95c:	mov	w0, #0xffffffff            	// #-1
 960:	b	9ac <gomp_ialias_omp_get_ancestor_thread_num+0x88>
 964:	ldr	x0, [sp, #40]
 968:	ldr	w1, [x0, #28]
 96c:	ldr	w0, [sp, #28]
 970:	sub	w0, w1, w0
 974:	str	w0, [sp, #28]
 978:	b	998 <gomp_ialias_omp_get_ancestor_thread_num+0x74>
 97c:	ldr	x0, [sp, #40]
 980:	ldr	x0, [x0]
 984:	add	x0, x0, #0x8
 988:	str	x0, [sp, #40]
 98c:	ldr	w0, [sp, #28]
 990:	sub	w0, w0, #0x1
 994:	str	w0, [sp, #28]
 998:	ldr	w0, [sp, #28]
 99c:	cmp	w0, #0x0
 9a0:	b.gt	97c <gomp_ialias_omp_get_ancestor_thread_num+0x58>
 9a4:	ldr	x0, [sp, #40]
 9a8:	ldr	w0, [x0, #24]
 9ac:	ldp	x29, x30, [sp], #48
 9b0:	ret

00000000000009b4 <gomp_ialias_omp_get_team_size>:
 9b4:	stp	x29, x30, [sp, #-48]!
 9b8:	mov	x29, sp
 9bc:	str	w0, [sp, #28]
 9c0:	bl	10c <gomp_thread>
 9c4:	add	x0, x0, #0x10
 9c8:	str	x0, [sp, #40]
 9cc:	ldr	w0, [sp, #28]
 9d0:	cmp	w0, #0x0
 9d4:	b.lt	9ec <gomp_ialias_omp_get_team_size+0x38>  // b.tstop
 9d8:	ldr	x0, [sp, #40]
 9dc:	ldr	w1, [x0, #28]
 9e0:	ldr	w0, [sp, #28]
 9e4:	cmp	w1, w0
 9e8:	b.cs	9f4 <gomp_ialias_omp_get_team_size+0x40>  // b.hs, b.nlast
 9ec:	mov	w0, #0xffffffff            	// #-1
 9f0:	b	a58 <gomp_ialias_omp_get_team_size+0xa4>
 9f4:	ldr	x0, [sp, #40]
 9f8:	ldr	w1, [x0, #28]
 9fc:	ldr	w0, [sp, #28]
 a00:	sub	w0, w1, w0
 a04:	str	w0, [sp, #28]
 a08:	b	a28 <gomp_ialias_omp_get_team_size+0x74>
 a0c:	ldr	x0, [sp, #40]
 a10:	ldr	x0, [x0]
 a14:	add	x0, x0, #0x8
 a18:	str	x0, [sp, #40]
 a1c:	ldr	w0, [sp, #28]
 a20:	sub	w0, w0, #0x1
 a24:	str	w0, [sp, #28]
 a28:	ldr	w0, [sp, #28]
 a2c:	cmp	w0, #0x0
 a30:	b.gt	a0c <gomp_ialias_omp_get_team_size+0x58>
 a34:	ldr	x0, [sp, #40]
 a38:	ldr	x0, [x0]
 a3c:	cmp	x0, #0x0
 a40:	b.ne	a4c <gomp_ialias_omp_get_team_size+0x98>  // b.any
 a44:	mov	w0, #0x1                   	// #1
 a48:	b	a58 <gomp_ialias_omp_get_team_size+0xa4>
 a4c:	ldr	x0, [sp, #40]
 a50:	ldr	x0, [x0]
 a54:	ldr	w0, [x0]
 a58:	ldp	x29, x30, [sp], #48
 a5c:	ret

0000000000000a60 <gomp_ialias_omp_get_active_level>:
 a60:	stp	x29, x30, [sp, #-16]!
 a64:	mov	x29, sp
 a68:	bl	10c <gomp_thread>
 a6c:	ldr	w0, [x0, #48]
 a70:	ldp	x29, x30, [sp], #16
 a74:	ret

sections.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ptrlock_set>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x2, [sp, #16]
  14:	ldr	x1, [sp, #24]
  18:	ldxr	x0, [x1]
  1c:	stlxr	w3, x2, [x1]
  20:	cbnz	w3, 18 <gomp_ptrlock_set+0x18>
  24:	str	x0, [sp, #40]
  28:	ldr	x0, [sp, #40]
  2c:	cmp	x0, #0x1
  30:	b.eq	3c <gomp_ptrlock_set+0x3c>  // b.none
  34:	ldr	x0, [sp, #24]
  38:	bl	0 <gomp_ptrlock_set_slow>
  3c:	nop
  40:	ldp	x29, x30, [sp], #48
  44:	ret

0000000000000048 <gomp_thread>:
  48:	mrs	x1, tpidr_el0
  4c:	adrp	x0, 0 <gomp_tls_data>
  50:	ldr	x0, [x0]
  54:	add	x0, x1, x0
  58:	ret

000000000000005c <gomp_work_share_init_done>:
  5c:	stp	x29, x30, [sp, #-32]!
  60:	mov	x29, sp
  64:	bl	48 <gomp_thread>
  68:	str	x0, [sp, #24]
  6c:	ldr	x0, [sp, #24]
  70:	ldr	x0, [x0, #32]
  74:	cmp	x0, #0x0
  78:	cset	w0, ne  // ne = any
  7c:	and	w0, w0, #0xff
  80:	and	x0, x0, #0xff
  84:	cmp	x0, #0x0
  88:	b.eq	ac <gomp_work_share_init_done+0x50>  // b.none
  8c:	ldr	x0, [sp, #24]
  90:	ldr	x0, [x0, #32]
  94:	add	x2, x0, #0x50
  98:	ldr	x0, [sp, #24]
  9c:	ldr	x0, [x0, #24]
  a0:	mov	x1, x0
  a4:	mov	x0, x2
  a8:	bl	0 <gomp_ptrlock_set>
  ac:	nop
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret

00000000000000b8 <gomp_sections_init>:
  b8:	sub	sp, sp, #0x10
  bc:	str	x0, [sp, #8]
  c0:	str	w1, [sp, #4]
  c4:	ldr	x0, [sp, #8]
  c8:	mov	w1, #0x2                   	// #2
  cc:	str	w1, [x0]
  d0:	ldr	x0, [sp, #8]
  d4:	mov	x1, #0x1                   	// #1
  d8:	str	x1, [x0, #8]
  dc:	ldr	w0, [sp, #4]
  e0:	add	x1, x0, #0x1
  e4:	ldr	x0, [sp, #8]
  e8:	str	x1, [x0, #16]
  ec:	ldr	x0, [sp, #8]
  f0:	mov	x1, #0x1                   	// #1
  f4:	str	x1, [x0, #24]
  f8:	ldr	x0, [sp, #8]
  fc:	mov	x1, #0x1                   	// #1
 100:	str	x1, [x0, #72]
 104:	ldr	x0, [sp, #8]
 108:	mov	w1, #0x1                   	// #1
 10c:	str	w1, [x0, #4]
 110:	nop
 114:	add	sp, sp, #0x10
 118:	ret

000000000000011c <GOMP_sections_start>:
 11c:	stp	x29, x30, [sp, #-64]!
 120:	mov	x29, sp
 124:	str	w0, [sp, #28]
 128:	bl	48 <gomp_thread>
 12c:	str	x0, [sp, #48]
 130:	mov	x0, #0x0                   	// #0
 134:	bl	0 <gomp_work_share_start>
 138:	and	w0, w0, #0xff
 13c:	cmp	w0, #0x0
 140:	b.eq	158 <GOMP_sections_start+0x3c>  // b.none
 144:	ldr	x0, [sp, #48]
 148:	ldr	x0, [x0, #24]
 14c:	ldr	w1, [sp, #28]
 150:	bl	b8 <gomp_sections_init>
 154:	bl	5c <gomp_work_share_init_done>
 158:	add	x1, sp, #0x20
 15c:	add	x0, sp, #0x28
 160:	bl	0 <gomp_iter_dynamic_next>
 164:	and	w0, w0, #0xff
 168:	cmp	w0, #0x0
 16c:	b.eq	17c <GOMP_sections_start+0x60>  // b.none
 170:	ldr	x0, [sp, #40]
 174:	str	x0, [sp, #56]
 178:	b	180 <GOMP_sections_start+0x64>
 17c:	str	xzr, [sp, #56]
 180:	ldr	x0, [sp, #56]
 184:	ldp	x29, x30, [sp], #64
 188:	ret

000000000000018c <GOMP_sections2_start>:
 18c:	stp	x29, x30, [sp, #-112]!
 190:	mov	x29, sp
 194:	str	x19, [sp, #16]
 198:	str	w0, [sp, #60]
 19c:	str	x1, [sp, #48]
 1a0:	str	x2, [sp, #40]
 1a4:	bl	48 <gomp_thread>
 1a8:	str	x0, [sp, #96]
 1ac:	ldr	x0, [sp, #48]
 1b0:	cmp	x0, #0x0
 1b4:	b.eq	1bc <GOMP_sections2_start+0x30>  // b.none
 1b8:	bl	0 <gomp_workshare_taskgroup_start>
 1bc:	mov	x0, #0x0                   	// #0
 1c0:	bl	0 <gomp_work_share_start>
 1c4:	and	w0, w0, #0xff
 1c8:	cmp	w0, #0x0
 1cc:	b.eq	28c <GOMP_sections2_start+0x100>  // b.none
 1d0:	ldr	x0, [sp, #96]
 1d4:	ldr	x0, [x0, #24]
 1d8:	ldr	w1, [sp, #60]
 1dc:	bl	b8 <gomp_sections_init>
 1e0:	ldr	x0, [sp, #48]
 1e4:	cmp	x0, #0x0
 1e8:	b.eq	218 <GOMP_sections2_start+0x8c>  // b.none
 1ec:	ldr	x0, [sp, #48]
 1f0:	bl	0 <gomp_ialias_GOMP_taskgroup_reduction_register>
 1f4:	ldr	x0, [sp, #96]
 1f8:	ldr	x0, [x0, #80]
 1fc:	ldr	x0, [x0, #40]
 200:	mov	w1, #0x1                   	// #1
 204:	strb	w1, [x0, #50]
 208:	ldr	x0, [sp, #96]
 20c:	ldr	x0, [x0, #24]
 210:	ldr	x1, [sp, #48]
 214:	str	x1, [x0, #88]
 218:	ldr	x0, [sp, #40]
 21c:	cmp	x0, #0x0
 220:	b.eq	284 <GOMP_sections2_start+0xf8>  // b.none
 224:	ldr	x0, [sp, #40]
 228:	ldr	x0, [x0]
 22c:	str	x0, [sp, #80]
 230:	ldr	x0, [sp, #80]
 234:	cmp	x0, #0x20
 238:	b.ls	260 <GOMP_sections2_start+0xd4>  // b.plast
 23c:	ldr	x0, [sp, #96]
 240:	ldr	x19, [x0, #24]
 244:	ldr	x0, [sp, #80]
 248:	bl	0 <gomp_malloc_cleared>
 24c:	str	x0, [x19, #32]
 250:	ldr	x1, [x19, #32]
 254:	ldr	x0, [sp, #40]
 258:	str	x1, [x0]
 25c:	b	284 <GOMP_sections2_start+0xf8>
 260:	ldr	x0, [sp, #96]
 264:	ldr	x0, [x0, #24]
 268:	add	x0, x0, #0x60
 26c:	ldr	x2, [sp, #80]
 270:	mov	w1, #0x0                   	// #0
 274:	bl	0 <memset>
 278:	mov	x1, x0
 27c:	ldr	x0, [sp, #40]
 280:	str	x1, [x0]
 284:	bl	5c <gomp_work_share_init_done>
 288:	b	2d4 <GOMP_sections2_start+0x148>
 28c:	ldr	x0, [sp, #48]
 290:	cmp	x0, #0x0
 294:	b.eq	2b4 <GOMP_sections2_start+0x128>  // b.none
 298:	ldr	x0, [sp, #96]
 29c:	ldr	x0, [x0, #24]
 2a0:	ldr	x0, [x0, #88]
 2a4:	str	x0, [sp, #88]
 2a8:	ldr	x1, [sp, #88]
 2ac:	ldr	x0, [sp, #48]
 2b0:	bl	0 <gomp_workshare_task_reduction_register>
 2b4:	ldr	x0, [sp, #40]
 2b8:	cmp	x0, #0x0
 2bc:	b.eq	2d4 <GOMP_sections2_start+0x148>  // b.none
 2c0:	ldr	x0, [sp, #96]
 2c4:	ldr	x0, [x0, #24]
 2c8:	ldr	x1, [x0, #32]
 2cc:	ldr	x0, [sp, #40]
 2d0:	str	x1, [x0]
 2d4:	add	x1, sp, #0x40
 2d8:	add	x0, sp, #0x48
 2dc:	bl	0 <gomp_iter_dynamic_next>
 2e0:	and	w0, w0, #0xff
 2e4:	cmp	w0, #0x0
 2e8:	b.eq	2f8 <GOMP_sections2_start+0x16c>  // b.none
 2ec:	ldr	x0, [sp, #72]
 2f0:	str	x0, [sp, #104]
 2f4:	b	2fc <GOMP_sections2_start+0x170>
 2f8:	str	xzr, [sp, #104]
 2fc:	ldr	x0, [sp, #104]
 300:	ldr	x19, [sp, #16]
 304:	ldp	x29, x30, [sp], #112
 308:	ret

000000000000030c <GOMP_sections_next>:
 30c:	stp	x29, x30, [sp, #-48]!
 310:	mov	x29, sp
 314:	add	x1, sp, #0x18
 318:	add	x0, sp, #0x20
 31c:	bl	0 <gomp_iter_dynamic_next>
 320:	and	w0, w0, #0xff
 324:	cmp	w0, #0x0
 328:	b.eq	338 <GOMP_sections_next+0x2c>  // b.none
 32c:	ldr	x0, [sp, #32]
 330:	str	x0, [sp, #40]
 334:	b	33c <GOMP_sections_next+0x30>
 338:	str	xzr, [sp, #40]
 33c:	ldr	x0, [sp, #40]
 340:	ldp	x29, x30, [sp], #48
 344:	ret

0000000000000348 <GOMP_parallel_sections_start>:
 348:	stp	x29, x30, [sp, #-64]!
 34c:	mov	x29, sp
 350:	str	x0, [sp, #40]
 354:	str	x1, [sp, #32]
 358:	str	w2, [sp, #28]
 35c:	str	w3, [sp, #24]
 360:	ldr	w1, [sp, #24]
 364:	ldr	w0, [sp, #28]
 368:	bl	0 <gomp_resolve_num_threads>
 36c:	str	w0, [sp, #28]
 370:	ldr	w0, [sp, #28]
 374:	bl	0 <gomp_new_team>
 378:	str	x0, [sp, #56]
 37c:	ldr	x0, [sp, #56]
 380:	add	x0, x0, #0x100
 384:	ldr	w1, [sp, #24]
 388:	bl	b8 <gomp_sections_init>
 38c:	mov	x5, #0x0                   	// #0
 390:	ldr	x4, [sp, #56]
 394:	mov	w3, #0x0                   	// #0
 398:	ldr	w2, [sp, #28]
 39c:	ldr	x1, [sp, #32]
 3a0:	ldr	x0, [sp, #40]
 3a4:	bl	0 <gomp_team_start>
 3a8:	nop
 3ac:	ldp	x29, x30, [sp], #64
 3b0:	ret

00000000000003b4 <GOMP_parallel_sections>:
 3b4:	stp	x29, x30, [sp, #-64]!
 3b8:	mov	x29, sp
 3bc:	str	x0, [sp, #40]
 3c0:	str	x1, [sp, #32]
 3c4:	str	w2, [sp, #28]
 3c8:	str	w3, [sp, #24]
 3cc:	str	w4, [sp, #20]
 3d0:	ldr	w1, [sp, #24]
 3d4:	ldr	w0, [sp, #28]
 3d8:	bl	0 <gomp_resolve_num_threads>
 3dc:	str	w0, [sp, #28]
 3e0:	ldr	w0, [sp, #28]
 3e4:	bl	0 <gomp_new_team>
 3e8:	str	x0, [sp, #56]
 3ec:	ldr	x0, [sp, #56]
 3f0:	add	x0, x0, #0x100
 3f4:	ldr	w1, [sp, #24]
 3f8:	bl	b8 <gomp_sections_init>
 3fc:	mov	x5, #0x0                   	// #0
 400:	ldr	x4, [sp, #56]
 404:	ldr	w3, [sp, #20]
 408:	ldr	w2, [sp, #28]
 40c:	ldr	x1, [sp, #32]
 410:	ldr	x0, [sp, #40]
 414:	bl	0 <gomp_team_start>
 418:	ldr	x1, [sp, #40]
 41c:	ldr	x0, [sp, #32]
 420:	blr	x1
 424:	bl	0 <gomp_ialias_GOMP_parallel_end>
 428:	nop
 42c:	ldp	x29, x30, [sp], #64
 430:	ret

0000000000000434 <GOMP_sections_end>:
 434:	stp	x29, x30, [sp, #-16]!
 438:	mov	x29, sp
 43c:	bl	0 <gomp_work_share_end>
 440:	nop
 444:	ldp	x29, x30, [sp], #16
 448:	ret

000000000000044c <GOMP_sections_end_cancel>:
 44c:	stp	x29, x30, [sp, #-16]!
 450:	mov	x29, sp
 454:	bl	0 <gomp_work_share_end_cancel>
 458:	and	w0, w0, #0xff
 45c:	ldp	x29, x30, [sp], #16
 460:	ret

0000000000000464 <GOMP_sections_end_nowait>:
 464:	stp	x29, x30, [sp, #-16]!
 468:	mov	x29, sp
 46c:	bl	0 <gomp_work_share_end_nowait>
 470:	nop
 474:	ldp	x29, x30, [sp], #16
 478:	ret

single.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ptrlock_set>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	x1, [sp, #16]
  10:	ldr	x2, [sp, #16]
  14:	ldr	x1, [sp, #24]
  18:	ldxr	x0, [x1]
  1c:	stlxr	w3, x2, [x1]
  20:	cbnz	w3, 18 <gomp_ptrlock_set+0x18>
  24:	str	x0, [sp, #40]
  28:	ldr	x0, [sp, #40]
  2c:	cmp	x0, #0x1
  30:	b.eq	3c <gomp_ptrlock_set+0x3c>  // b.none
  34:	ldr	x0, [sp, #24]
  38:	bl	0 <gomp_ptrlock_set_slow>
  3c:	nop
  40:	ldp	x29, x30, [sp], #48
  44:	ret

0000000000000048 <gomp_thread>:
  48:	mrs	x1, tpidr_el0
  4c:	adrp	x0, 0 <gomp_tls_data>
  50:	ldr	x0, [x0]
  54:	add	x0, x1, x0
  58:	ret

000000000000005c <gomp_work_share_init_done>:
  5c:	stp	x29, x30, [sp, #-32]!
  60:	mov	x29, sp
  64:	bl	48 <gomp_thread>
  68:	str	x0, [sp, #24]
  6c:	ldr	x0, [sp, #24]
  70:	ldr	x0, [x0, #32]
  74:	cmp	x0, #0x0
  78:	cset	w0, ne  // ne = any
  7c:	and	w0, w0, #0xff
  80:	and	x0, x0, #0xff
  84:	cmp	x0, #0x0
  88:	b.eq	ac <gomp_work_share_init_done+0x50>  // b.none
  8c:	ldr	x0, [sp, #24]
  90:	ldr	x0, [x0, #32]
  94:	add	x2, x0, #0x50
  98:	ldr	x0, [sp, #24]
  9c:	ldr	x0, [x0, #24]
  a0:	mov	x1, x0
  a4:	mov	x0, x2
  a8:	bl	0 <gomp_ptrlock_set>
  ac:	nop
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret

00000000000000b8 <GOMP_single_start>:
  b8:	stp	x29, x30, [sp, #-48]!
  bc:	mov	x29, sp
  c0:	bl	48 <gomp_thread>
  c4:	str	x0, [sp, #40]
  c8:	ldr	x0, [sp, #40]
  cc:	ldr	x0, [x0, #16]
  d0:	str	x0, [sp, #32]
  d4:	ldr	x0, [sp, #32]
  d8:	cmp	x0, #0x0
  dc:	cset	w0, eq  // eq = none
  e0:	and	w0, w0, #0xff
  e4:	and	x0, x0, #0xff
  e8:	cmp	x0, #0x0
  ec:	b.eq	f8 <GOMP_single_start+0x40>  // b.none
  f0:	mov	w0, #0x1                   	// #1
  f4:	b	140 <GOMP_single_start+0x88>
  f8:	ldr	x0, [sp, #40]
  fc:	ldr	x0, [x0, #64]
 100:	add	x2, x0, #0x1
 104:	ldr	x1, [sp, #40]
 108:	str	x2, [x1, #64]
 10c:	str	x0, [sp, #24]
 110:	ldr	x0, [sp, #32]
 114:	add	x0, x0, #0x70
 118:	ldr	x1, [sp, #24]
 11c:	add	x2, x1, #0x1
 120:	ldr	x1, [sp, #24]
 124:	ldxr	x3, [x0]
 128:	cmp	x3, x1
 12c:	b.ne	138 <GOMP_single_start+0x80>  // b.any
 130:	stlxr	w4, x2, [x0]
 134:	cbnz	w4, 124 <GOMP_single_start+0x6c>
 138:	dmb	ish
 13c:	cset	w0, eq  // eq = none
 140:	ldp	x29, x30, [sp], #48
 144:	ret

0000000000000148 <GOMP_single_copy_start>:
 148:	stp	x29, x30, [sp, #-48]!
 14c:	mov	x29, sp
 150:	bl	48 <gomp_thread>
 154:	str	x0, [sp, #32]
 158:	mov	x0, #0x0                   	// #0
 15c:	bl	0 <gomp_work_share_start>
 160:	strb	w0, [sp, #31]
 164:	ldrb	w0, [sp, #31]
 168:	cmp	w0, #0x0
 16c:	b.eq	17c <GOMP_single_copy_start+0x34>  // b.none
 170:	bl	5c <gomp_work_share_init_done>
 174:	str	xzr, [sp, #40]
 178:	b	1a0 <GOMP_single_copy_start+0x58>
 17c:	ldr	x0, [sp, #32]
 180:	ldr	x0, [x0, #16]
 184:	add	x0, x0, #0x80
 188:	bl	0 <gomp_team_barrier_wait>
 18c:	ldr	x0, [sp, #32]
 190:	ldr	x0, [x0, #24]
 194:	ldr	x0, [x0, #72]
 198:	str	x0, [sp, #40]
 19c:	bl	0 <gomp_work_share_end_nowait>
 1a0:	ldr	x0, [sp, #40]
 1a4:	ldp	x29, x30, [sp], #48
 1a8:	ret

00000000000001ac <GOMP_single_copy_end>:
 1ac:	stp	x29, x30, [sp, #-48]!
 1b0:	mov	x29, sp
 1b4:	str	x0, [sp, #24]
 1b8:	bl	48 <gomp_thread>
 1bc:	str	x0, [sp, #40]
 1c0:	ldr	x0, [sp, #40]
 1c4:	ldr	x0, [x0, #16]
 1c8:	str	x0, [sp, #32]
 1cc:	ldr	x0, [sp, #32]
 1d0:	cmp	x0, #0x0
 1d4:	b.eq	1f4 <GOMP_single_copy_end+0x48>  // b.none
 1d8:	ldr	x0, [sp, #40]
 1dc:	ldr	x0, [x0, #24]
 1e0:	ldr	x1, [sp, #24]
 1e4:	str	x1, [x0, #72]
 1e8:	ldr	x0, [sp, #32]
 1ec:	add	x0, x0, #0x80
 1f0:	bl	0 <gomp_team_barrier_wait>
 1f4:	bl	0 <gomp_work_share_end_nowait>
 1f8:	nop
 1fc:	ldp	x29, x30, [sp], #48
 200:	ret

task.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <priority_queue_multi_p>:
       0:	sub	sp, sp, #0x10
       4:	str	x0, [sp, #8]
       8:	ldr	x0, [sp, #8]
       c:	ldr	x0, [x0]
      10:	cmp	x0, #0x0
      14:	cset	w0, ne  // ne = any
      18:	and	w0, w0, #0xff
      1c:	and	x0, x0, #0xff
      20:	cmp	x0, #0x0
      24:	cset	w0, ne  // ne = any
      28:	and	w0, w0, #0xff
      2c:	add	sp, sp, #0x10
      30:	ret

0000000000000034 <priority_queue_init>:
      34:	sub	sp, sp, #0x10
      38:	str	x0, [sp, #8]
      3c:	ldr	x0, [sp, #8]
      40:	str	xzr, [x0]
      44:	ldr	x0, [sp, #8]
      48:	str	xzr, [x0, #16]
      4c:	ldr	x0, [sp, #8]
      50:	str	xzr, [x0, #24]
      54:	nop
      58:	add	sp, sp, #0x10
      5c:	ret

0000000000000060 <priority_queue_empty_p>:
      60:	stp	x29, x30, [sp, #-32]!
      64:	mov	x29, sp
      68:	str	x0, [sp, #24]
      6c:	str	w1, [sp, #20]
      70:	ldr	x0, [sp, #24]
      74:	bl	0 <priority_queue_multi_p>
      78:	and	w0, w0, #0xff
      7c:	cmp	w0, #0x0
      80:	b.eq	c0 <priority_queue_empty_p+0x60>  // b.none
      84:	ldr	w0, [sp, #20]
      88:	cmp	w0, #0x2
      8c:	b.ne	a8 <priority_queue_empty_p+0x48>  // b.any
      90:	ldr	x0, [sp, #24]
      94:	ldar	x0, [x0]
      98:	cmp	x0, #0x0
      9c:	cset	w0, eq  // eq = none
      a0:	and	w0, w0, #0xff
      a4:	b	fc <priority_queue_empty_p+0x9c>
      a8:	ldr	x0, [sp, #24]
      ac:	ldr	x0, [x0]
      b0:	cmp	x0, #0x0
      b4:	cset	w0, eq  // eq = none
      b8:	and	w0, w0, #0xff
      bc:	b	fc <priority_queue_empty_p+0x9c>
      c0:	ldr	w0, [sp, #20]
      c4:	cmp	w0, #0x2
      c8:	b.ne	e8 <priority_queue_empty_p+0x88>  // b.any
      cc:	ldr	x0, [sp, #24]
      d0:	add	x0, x0, #0x10
      d4:	ldar	x0, [x0]
      d8:	cmp	x0, #0x0
      dc:	cset	w0, eq  // eq = none
      e0:	and	w0, w0, #0xff
      e4:	b	fc <priority_queue_empty_p+0x9c>
      e8:	ldr	x0, [sp, #24]
      ec:	ldr	x0, [x0, #16]
      f0:	cmp	x0, #0x0
      f4:	cset	w0, eq  // eq = none
      f8:	and	w0, w0, #0xff
      fc:	ldp	x29, x30, [sp], #32
     100:	ret

0000000000000104 <priority_queue_lookup_priority>:
     104:	stp	x29, x30, [sp, #-64]!
     108:	mov	x29, sp
     10c:	str	x0, [sp, #24]
     110:	str	w1, [sp, #20]
     114:	ldr	x0, [sp, #24]
     118:	ldr	x0, [x0]
     11c:	cmp	x0, #0x0
     120:	b.ne	12c <priority_queue_lookup_priority+0x28>  // b.any
     124:	mov	x0, #0x0                   	// #0
     128:	b	144 <priority_queue_lookup_priority+0x40>
     12c:	ldr	w0, [sp, #20]
     130:	str	w0, [sp, #40]
     134:	ldr	x0, [sp, #24]
     138:	add	x1, sp, #0x28
     13c:	bl	0 <prio_splay_tree_lookup>
     140:	nop
     144:	ldp	x29, x30, [sp], #64
     148:	ret

000000000000014c <priority_list_insert>:
     14c:	stp	x29, x30, [sp, #-64]!
     150:	mov	x29, sp
     154:	str	w0, [sp, #44]
     158:	str	x1, [sp, #32]
     15c:	str	x2, [sp, #24]
     160:	str	w3, [sp, #40]
     164:	str	w4, [sp, #20]
     168:	strb	w5, [sp, #19]
     16c:	strb	w6, [sp, #18]
     170:	ldr	x1, [sp, #24]
     174:	ldr	w0, [sp, #44]
     178:	bl	b00 <task_to_priority_node>
     17c:	str	x0, [sp, #56]
     180:	ldr	x0, [sp, #32]
     184:	ldr	x0, [x0, #8]
     188:	cmp	x0, #0x0
     18c:	b.eq	258 <priority_list_insert+0x10c>  // b.none
     190:	ldrb	w0, [sp, #19]
     194:	cmp	w0, #0x0
     198:	b.eq	1f8 <priority_list_insert+0xac>  // b.none
     19c:	ldr	w0, [sp, #20]
     1a0:	cmp	w0, #0x0
     1a4:	b.ne	1f8 <priority_list_insert+0xac>  // b.any
     1a8:	ldr	x0, [sp, #32]
     1ac:	ldr	x0, [x0, #16]
     1b0:	cmp	x0, #0x0
     1b4:	b.eq	1f8 <priority_list_insert+0xac>  // b.none
     1b8:	ldrb	w0, [sp, #18]
     1bc:	eor	w0, w0, #0x1
     1c0:	and	w0, w0, #0xff
     1c4:	cmp	w0, #0x0
     1c8:	b.eq	1f8 <priority_list_insert+0xac>  // b.none
     1cc:	ldr	x0, [sp, #32]
     1d0:	ldr	x0, [x0, #16]
     1d4:	str	x0, [sp, #48]
     1d8:	ldr	x0, [sp, #48]
     1dc:	ldr	x1, [x0]
     1e0:	ldr	x0, [sp, #56]
     1e4:	str	x1, [x0]
     1e8:	ldr	x0, [sp, #56]
     1ec:	ldr	x1, [sp, #48]
     1f0:	str	x1, [x0, #8]
     1f4:	b	234 <priority_list_insert+0xe8>
     1f8:	ldr	x0, [sp, #32]
     1fc:	ldr	x1, [x0, #8]
     200:	ldr	x0, [sp, #56]
     204:	str	x1, [x0]
     208:	ldr	x0, [sp, #32]
     20c:	ldr	x0, [x0, #8]
     210:	ldr	x1, [x0, #8]
     214:	ldr	x0, [sp, #56]
     218:	str	x1, [x0, #8]
     21c:	ldr	w0, [sp, #20]
     220:	cmp	w0, #0x0
     224:	b.ne	234 <priority_list_insert+0xe8>  // b.any
     228:	ldr	x0, [sp, #32]
     22c:	ldr	x1, [sp, #56]
     230:	str	x1, [x0, #8]
     234:	ldr	x0, [sp, #56]
     238:	ldr	x0, [x0]
     23c:	ldr	x1, [sp, #56]
     240:	str	x1, [x0, #8]
     244:	ldr	x0, [sp, #56]
     248:	ldr	x0, [x0, #8]
     24c:	ldr	x1, [sp, #56]
     250:	str	x1, [x0]
     254:	b	27c <priority_list_insert+0x130>
     258:	ldr	x0, [sp, #56]
     25c:	ldr	x1, [sp, #56]
     260:	str	x1, [x0]
     264:	ldr	x0, [sp, #56]
     268:	ldr	x1, [sp, #56]
     26c:	str	x1, [x0, #8]
     270:	ldr	x0, [sp, #32]
     274:	ldr	x1, [sp, #56]
     278:	str	x1, [x0, #8]
     27c:	ldrb	w0, [sp, #19]
     280:	cmp	w0, #0x0
     284:	b.eq	2b0 <priority_list_insert+0x164>  // b.none
     288:	ldr	x0, [sp, #32]
     28c:	ldr	x0, [x0, #16]
     290:	cmp	x0, #0x0
     294:	b.ne	2b0 <priority_list_insert+0x164>  // b.any
     298:	ldrb	w0, [sp, #18]
     29c:	cmp	w0, #0x0
     2a0:	b.eq	2b0 <priority_list_insert+0x164>  // b.none
     2a4:	ldr	x0, [sp, #32]
     2a8:	ldr	x1, [sp, #56]
     2ac:	str	x1, [x0, #16]
     2b0:	nop
     2b4:	ldp	x29, x30, [sp], #64
     2b8:	ret

00000000000002bc <priority_tree_insert>:
     2bc:	stp	x29, x30, [sp, #-80]!
     2c0:	mov	x29, sp
     2c4:	str	w0, [sp, #44]
     2c8:	str	x1, [sp, #32]
     2cc:	str	x2, [sp, #24]
     2d0:	str	w3, [sp, #40]
     2d4:	str	w4, [sp, #20]
     2d8:	strb	w5, [sp, #19]
     2dc:	strb	w6, [sp, #18]
     2e0:	ldr	x0, [sp, #32]
     2e4:	ldr	x0, [x0]
     2e8:	cmp	x0, #0x0
     2ec:	cset	w0, eq  // eq = none
     2f0:	and	w0, w0, #0xff
     2f4:	and	x0, x0, #0xff
     2f8:	cmp	x0, #0x0
     2fc:	b.eq	368 <priority_tree_insert+0xac>  // b.none
     300:	ldr	x0, [sp, #32]
     304:	ldr	x0, [x0, #16]
     308:	cmp	x0, #0x0
     30c:	b.eq	368 <priority_tree_insert+0xac>  // b.none
     310:	mov	x0, #0x28                  	// #40
     314:	bl	0 <gomp_malloc>
     318:	str	x0, [sp, #64]
     31c:	ldr	x0, [sp, #64]
     320:	str	xzr, [x0, #24]
     324:	ldr	x0, [sp, #64]
     328:	str	xzr, [x0, #32]
     32c:	ldr	x0, [sp, #64]
     330:	str	wzr, [x0]
     334:	ldr	x0, [sp, #32]
     338:	ldr	x1, [x0, #16]
     33c:	ldr	x0, [sp, #64]
     340:	str	x1, [x0, #8]
     344:	ldr	x0, [sp, #32]
     348:	ldr	x1, [x0, #24]
     34c:	ldr	x0, [sp, #64]
     350:	str	x1, [x0, #16]
     354:	ldr	x0, [sp, #32]
     358:	ldr	x1, [sp, #64]
     35c:	bl	0 <prio_splay_tree_insert>
     360:	ldr	x0, [sp, #32]
     364:	str	xzr, [x0, #16]
     368:	ldr	w1, [sp, #40]
     36c:	ldr	x0, [sp, #32]
     370:	bl	104 <priority_queue_lookup_priority>
     374:	str	x0, [sp, #72]
     378:	ldr	x0, [sp, #72]
     37c:	cmp	x0, #0x0
     380:	b.ne	3d0 <priority_tree_insert+0x114>  // b.any
     384:	mov	x0, #0x28                  	// #40
     388:	bl	0 <gomp_malloc>
     38c:	str	x0, [sp, #56]
     390:	ldr	x0, [sp, #56]
     394:	str	xzr, [x0, #24]
     398:	ldr	x0, [sp, #56]
     39c:	str	xzr, [x0, #32]
     3a0:	ldr	x0, [sp, #56]
     3a4:	ldr	w1, [sp, #40]
     3a8:	str	w1, [x0]
     3ac:	ldr	x0, [sp, #56]
     3b0:	str	xzr, [x0, #8]
     3b4:	ldr	x0, [sp, #56]
     3b8:	str	xzr, [x0, #16]
     3bc:	ldr	x0, [sp, #32]
     3c0:	ldr	x1, [sp, #56]
     3c4:	bl	0 <prio_splay_tree_insert>
     3c8:	ldr	x0, [sp, #56]
     3cc:	str	x0, [sp, #72]
     3d0:	ldrb	w6, [sp, #18]
     3d4:	ldrb	w5, [sp, #19]
     3d8:	ldr	w4, [sp, #20]
     3dc:	ldr	w3, [sp, #40]
     3e0:	ldr	x2, [sp, #24]
     3e4:	ldr	x1, [sp, #72]
     3e8:	ldr	w0, [sp, #44]
     3ec:	bl	14c <priority_list_insert>
     3f0:	nop
     3f4:	ldp	x29, x30, [sp], #80
     3f8:	ret

00000000000003fc <priority_queue_insert>:
     3fc:	stp	x29, x30, [sp, #-48]!
     400:	mov	x29, sp
     404:	str	w0, [sp, #44]
     408:	str	x1, [sp, #32]
     40c:	str	x2, [sp, #24]
     410:	str	w3, [sp, #40]
     414:	str	w4, [sp, #20]
     418:	strb	w5, [sp, #19]
     41c:	strb	w6, [sp, #18]
     420:	ldr	x0, [sp, #32]
     424:	bl	0 <priority_queue_multi_p>
     428:	and	w0, w0, #0xff
     42c:	cmp	w0, #0x0
     430:	b.ne	450 <priority_queue_insert+0x54>  // b.any
     434:	ldr	w0, [sp, #40]
     438:	cmp	w0, #0x0
     43c:	cset	w0, gt
     440:	and	w0, w0, #0xff
     444:	and	x0, x0, #0xff
     448:	cmp	x0, #0x0
     44c:	b.eq	474 <priority_queue_insert+0x78>  // b.none
     450:	ldrb	w6, [sp, #18]
     454:	ldrb	w5, [sp, #19]
     458:	ldr	w4, [sp, #20]
     45c:	ldr	w3, [sp, #40]
     460:	ldr	x2, [sp, #24]
     464:	ldr	x1, [sp, #32]
     468:	ldr	w0, [sp, #44]
     46c:	bl	2bc <priority_tree_insert>
     470:	b	4a0 <priority_queue_insert+0xa4>
     474:	ldr	x0, [sp, #32]
     478:	add	x0, x0, #0x8
     47c:	ldrb	w6, [sp, #18]
     480:	ldrb	w5, [sp, #19]
     484:	ldr	w4, [sp, #20]
     488:	ldr	w3, [sp, #40]
     48c:	ldr	x2, [sp, #24]
     490:	mov	x1, x0
     494:	ldr	w0, [sp, #44]
     498:	bl	14c <priority_list_insert>
     49c:	nop
     4a0:	nop
     4a4:	ldp	x29, x30, [sp], #48
     4a8:	ret

00000000000004ac <priority_queue_next_task>:
     4ac:	stp	x29, x30, [sp, #-64]!
     4b0:	mov	x29, sp
     4b4:	str	w0, [sp, #44]
     4b8:	str	x1, [sp, #32]
     4bc:	str	w2, [sp, #40]
     4c0:	str	x3, [sp, #24]
     4c4:	str	x4, [sp, #16]
     4c8:	ldr	x0, [sp, #32]
     4cc:	bl	0 <priority_queue_multi_p>
     4d0:	and	w0, w0, #0xff
     4d4:	cmp	w0, #0x0
     4d8:	b.eq	528 <priority_queue_next_task+0x7c>  // b.none
     4dc:	ldr	x4, [sp, #16]
     4e0:	ldr	x3, [sp, #24]
     4e4:	ldr	w2, [sp, #40]
     4e8:	ldr	x1, [sp, #32]
     4ec:	ldr	w0, [sp, #44]
     4f0:	bl	0 <priority_tree_next_task>
     4f4:	str	x0, [sp, #56]
     4f8:	ldr	x0, [sp, #56]
     4fc:	cmp	x0, #0x0
     500:	b.ne	520 <priority_queue_next_task+0x74>  // b.any
     504:	ldr	x0, [sp, #32]
     508:	ldr	x0, [x0]
     50c:	ldr	x0, [x0, #8]
     510:	mov	x1, x0
     514:	ldr	w0, [sp, #44]
     518:	bl	ad4 <priority_node_to_task>
     51c:	b	548 <priority_queue_next_task+0x9c>
     520:	ldr	x0, [sp, #56]
     524:	b	548 <priority_queue_next_task+0x9c>
     528:	ldr	x0, [sp, #16]
     52c:	mov	w1, #0x1                   	// #1
     530:	strb	w1, [x0]
     534:	ldr	x0, [sp, #32]
     538:	ldr	x0, [x0, #16]
     53c:	mov	x1, x0
     540:	ldr	w0, [sp, #44]
     544:	bl	ad4 <priority_node_to_task>
     548:	ldp	x29, x30, [sp], #64
     54c:	ret

0000000000000550 <priority_list_remove>:
     550:	sub	sp, sp, #0x30
     554:	str	x0, [sp, #24]
     558:	str	x1, [sp, #16]
     55c:	str	w2, [sp, #12]
     560:	strb	wzr, [sp, #47]
     564:	ldr	x0, [sp, #16]
     568:	ldr	x0, [x0, #8]
     56c:	ldr	x1, [sp, #16]
     570:	ldr	x1, [x1]
     574:	str	x1, [x0]
     578:	ldr	x0, [sp, #16]
     57c:	ldr	x0, [x0]
     580:	ldr	x1, [sp, #16]
     584:	ldr	x1, [x1, #8]
     588:	str	x1, [x0, #8]
     58c:	ldr	x0, [sp, #24]
     590:	ldr	x0, [x0, #8]
     594:	ldr	x1, [sp, #16]
     598:	cmp	x1, x0
     59c:	b.ne	5f8 <priority_list_remove+0xa8>  // b.any
     5a0:	ldr	x0, [sp, #16]
     5a4:	ldr	x0, [x0]
     5a8:	ldr	x1, [sp, #16]
     5ac:	cmp	x1, x0
     5b0:	b.eq	5c8 <priority_list_remove+0x78>  // b.none
     5b4:	ldr	x0, [sp, #16]
     5b8:	ldr	x1, [x0]
     5bc:	ldr	x0, [sp, #24]
     5c0:	str	x1, [x0, #8]
     5c4:	b	5fc <priority_list_remove+0xac>
     5c8:	ldr	w0, [sp, #12]
     5cc:	cmp	w0, #0x3
     5d0:	b.ne	5e4 <priority_list_remove+0x94>  // b.any
     5d4:	ldr	x0, [sp, #24]
     5d8:	add	x0, x0, #0x8
     5dc:	stlr	xzr, [x0]
     5e0:	b	5ec <priority_list_remove+0x9c>
     5e4:	ldr	x0, [sp, #24]
     5e8:	str	xzr, [x0, #8]
     5ec:	mov	w0, #0x1                   	// #1
     5f0:	strb	w0, [sp, #47]
     5f4:	b	5fc <priority_list_remove+0xac>
     5f8:	nop
     5fc:	ldrb	w0, [sp, #47]
     600:	add	sp, sp, #0x30
     604:	ret

0000000000000608 <priority_queue_remove>:
     608:	stp	x29, x30, [sp, #-64]!
     60c:	mov	x29, sp
     610:	str	x19, [sp, #16]
     614:	str	w0, [sp, #60]
     618:	str	x1, [sp, #48]
     61c:	str	x2, [sp, #40]
     620:	str	w3, [sp, #56]
     624:	ldr	x0, [sp, #48]
     628:	bl	0 <priority_queue_multi_p>
     62c:	and	w0, w0, #0xff
     630:	cmp	w0, #0x0
     634:	b.eq	688 <priority_queue_remove+0x80>  // b.none
     638:	ldr	x1, [sp, #40]
     63c:	ldr	w0, [sp, #60]
     640:	bl	b00 <task_to_priority_node>
     644:	mov	x2, x0
     648:	ldr	x1, [sp, #48]
     64c:	ldr	w0, [sp, #60]
     650:	bl	0 <priority_tree_remove>
     654:	ldr	x0, [sp, #48]
     658:	ldr	x0, [x0]
     65c:	cmp	x0, #0x0
     660:	b.ne	680 <priority_queue_remove+0x78>  // b.any
     664:	ldr	w0, [sp, #56]
     668:	cmp	w0, #0x3
     66c:	b.ne	678 <priority_queue_remove+0x70>  // b.any
     670:	ldr	x0, [sp, #48]
     674:	stlr	xzr, [x0]
     678:	mov	w0, #0x1                   	// #1
     67c:	b	6b0 <priority_queue_remove+0xa8>
     680:	mov	w0, #0x0                   	// #0
     684:	b	6b0 <priority_queue_remove+0xa8>
     688:	ldr	x0, [sp, #48]
     68c:	add	x19, x0, #0x8
     690:	ldr	x1, [sp, #40]
     694:	ldr	w0, [sp, #60]
     698:	bl	b00 <task_to_priority_node>
     69c:	ldr	w2, [sp, #56]
     6a0:	mov	x1, x0
     6a4:	mov	x0, x19
     6a8:	bl	550 <priority_list_remove>
     6ac:	and	w0, w0, #0xff
     6b0:	ldr	x19, [sp, #16]
     6b4:	ldp	x29, x30, [sp], #64
     6b8:	ret

00000000000006bc <gomp_sem_init>:
     6bc:	sub	sp, sp, #0x10
     6c0:	str	x0, [sp, #8]
     6c4:	str	w1, [sp, #4]
     6c8:	ldr	x0, [sp, #8]
     6cc:	ldr	w1, [sp, #4]
     6d0:	str	w1, [x0]
     6d4:	nop
     6d8:	add	sp, sp, #0x10
     6dc:	ret

00000000000006e0 <gomp_sem_destroy>:
     6e0:	sub	sp, sp, #0x10
     6e4:	str	x0, [sp, #8]
     6e8:	nop
     6ec:	add	sp, sp, #0x10
     6f0:	ret

00000000000006f4 <gomp_sem_wait>:
     6f4:	stp	x29, x30, [sp, #-48]!
     6f8:	mov	x29, sp
     6fc:	str	x0, [sp, #24]
     700:	ldr	x0, [sp, #24]
     704:	ldr	w0, [x0]
     708:	str	w0, [sp, #44]
     70c:	b	758 <gomp_sem_wait+0x64>
     710:	ldr	w0, [sp, #44]
     714:	sub	w0, w0, #0x1
     718:	mov	w4, w0
     71c:	ldr	x1, [sp, #24]
     720:	add	x0, sp, #0x2c
     724:	ldr	w3, [x0]
     728:	ldaxr	w2, [x1]
     72c:	cmp	w2, w3
     730:	b.ne	73c <gomp_sem_wait+0x48>  // b.any
     734:	stxr	w5, w4, [x1]
     738:	cmp	w5, #0x0
     73c:	cset	w1, eq  // eq = none
     740:	cmp	w1, #0x0
     744:	b.ne	74c <gomp_sem_wait+0x58>  // b.any
     748:	str	w2, [x0]
     74c:	mov	w0, w1
     750:	cmp	w0, #0x0
     754:	b.ne	77c <gomp_sem_wait+0x88>  // b.any
     758:	ldr	w0, [sp, #44]
     75c:	and	w0, w0, #0x7fffffff
     760:	cmp	w0, #0x0
     764:	b.ne	710 <gomp_sem_wait+0x1c>  // b.any
     768:	ldr	w0, [sp, #44]
     76c:	mov	w1, w0
     770:	ldr	x0, [sp, #24]
     774:	bl	0 <gomp_sem_wait_slow>
     778:	b	780 <gomp_sem_wait+0x8c>
     77c:	nop
     780:	ldp	x29, x30, [sp], #48
     784:	ret

0000000000000788 <gomp_sem_post>:
     788:	stp	x29, x30, [sp, #-48]!
     78c:	mov	x29, sp
     790:	str	x0, [sp, #24]
     794:	ldr	x0, [sp, #24]
     798:	ldr	w0, [x0]
     79c:	str	w0, [sp, #44]
     7a0:	b	7a8 <gomp_sem_post+0x20>
     7a4:	nop
     7a8:	ldr	w0, [sp, #44]
     7ac:	add	w0, w0, #0x1
     7b0:	and	w4, w0, #0x7fffffff
     7b4:	ldr	x1, [sp, #24]
     7b8:	add	x0, sp, #0x2c
     7bc:	ldr	w3, [x0]
     7c0:	ldxr	w2, [x1]
     7c4:	cmp	w2, w3
     7c8:	b.ne	7d4 <gomp_sem_post+0x4c>  // b.any
     7cc:	stlxr	w5, w4, [x1]
     7d0:	cmp	w5, #0x0
     7d4:	cset	w1, eq  // eq = none
     7d8:	cmp	w1, #0x0
     7dc:	b.ne	7e4 <gomp_sem_post+0x5c>  // b.any
     7e0:	str	w2, [x0]
     7e4:	mov	w0, w1
     7e8:	eor	w0, w0, #0x1
     7ec:	and	w0, w0, #0xff
     7f0:	cmp	w0, #0x0
     7f4:	b.ne	7a4 <gomp_sem_post+0x1c>  // b.any
     7f8:	ldr	w0, [sp, #44]
     7fc:	and	w0, w0, #0x80000000
     800:	sxtw	x0, w0
     804:	cmp	x0, #0x0
     808:	b.eq	814 <gomp_sem_post+0x8c>  // b.none
     80c:	ldr	x0, [sp, #24]
     810:	bl	0 <gomp_sem_post_slow>
     814:	nop
     818:	ldp	x29, x30, [sp], #48
     81c:	ret

0000000000000820 <gomp_mutex_lock>:
     820:	stp	x29, x30, [sp, #-48]!
     824:	mov	x29, sp
     828:	str	x0, [sp, #24]
     82c:	str	wzr, [sp, #44]
     830:	ldr	x1, [sp, #24]
     834:	add	x0, sp, #0x2c
     838:	ldr	w3, [x0]
     83c:	mov	w4, #0x1                   	// #1
     840:	ldaxr	w2, [x1]
     844:	cmp	w2, w3
     848:	b.ne	854 <gomp_mutex_lock+0x34>  // b.any
     84c:	stxr	w5, w4, [x1]
     850:	cbnz	w5, 840 <gomp_mutex_lock+0x20>
     854:	cset	w1, eq  // eq = none
     858:	cmp	w1, #0x0
     85c:	b.ne	864 <gomp_mutex_lock+0x44>  // b.any
     860:	str	w2, [x0]
     864:	mov	w0, w1
     868:	eor	w0, w0, #0x1
     86c:	and	w0, w0, #0xff
     870:	cmp	w0, #0x0
     874:	b.eq	888 <gomp_mutex_lock+0x68>  // b.none
     878:	ldr	w0, [sp, #44]
     87c:	mov	w1, w0
     880:	ldr	x0, [sp, #24]
     884:	bl	0 <gomp_mutex_lock_slow>
     888:	nop
     88c:	ldp	x29, x30, [sp], #48
     890:	ret

0000000000000894 <gomp_mutex_unlock>:
     894:	stp	x29, x30, [sp, #-48]!
     898:	mov	x29, sp
     89c:	str	x0, [sp, #24]
     8a0:	ldr	x1, [sp, #24]
     8a4:	ldxr	w0, [x1]
     8a8:	stlxr	w2, wzr, [x1]
     8ac:	cbnz	w2, 8a4 <gomp_mutex_unlock+0x10>
     8b0:	str	w0, [sp, #44]
     8b4:	ldr	w0, [sp, #44]
     8b8:	lsr	w0, w0, #31
     8bc:	and	w0, w0, #0xff
     8c0:	and	x0, x0, #0xff
     8c4:	cmp	x0, #0x0
     8c8:	b.eq	8d4 <gomp_mutex_unlock+0x40>  // b.none
     8cc:	ldr	x0, [sp, #24]
     8d0:	bl	0 <gomp_mutex_unlock_slow>
     8d4:	nop
     8d8:	ldp	x29, x30, [sp], #48
     8dc:	ret

00000000000008e0 <gomp_barrier_last_thread>:
     8e0:	sub	sp, sp, #0x10
     8e4:	str	w0, [sp, #12]
     8e8:	ldr	w0, [sp, #12]
     8ec:	and	w0, w0, #0x1
     8f0:	cmp	w0, #0x0
     8f4:	cset	w0, ne  // ne = any
     8f8:	and	w0, w0, #0xff
     8fc:	add	sp, sp, #0x10
     900:	ret

0000000000000904 <gomp_team_barrier_set_task_pending>:
     904:	sub	sp, sp, #0x10
     908:	str	x0, [sp, #8]
     90c:	ldr	x0, [sp, #8]
     910:	ldr	w0, [x0, #4]
     914:	orr	w1, w0, #0x1
     918:	ldr	x0, [sp, #8]
     91c:	str	w1, [x0, #4]
     920:	nop
     924:	add	sp, sp, #0x10
     928:	ret

000000000000092c <gomp_team_barrier_clear_task_pending>:
     92c:	sub	sp, sp, #0x10
     930:	str	x0, [sp, #8]
     934:	ldr	x0, [sp, #8]
     938:	ldr	w0, [x0, #4]
     93c:	and	w1, w0, #0xfffffffe
     940:	ldr	x0, [sp, #8]
     944:	str	w1, [x0, #4]
     948:	nop
     94c:	add	sp, sp, #0x10
     950:	ret

0000000000000954 <gomp_team_barrier_set_waiting_for_tasks>:
     954:	sub	sp, sp, #0x10
     958:	str	x0, [sp, #8]
     95c:	ldr	x0, [sp, #8]
     960:	ldr	w0, [x0, #4]
     964:	orr	w1, w0, #0x2
     968:	ldr	x0, [sp, #8]
     96c:	str	w1, [x0, #4]
     970:	nop
     974:	add	sp, sp, #0x10
     978:	ret

000000000000097c <gomp_team_barrier_waiting_for_tasks>:
     97c:	sub	sp, sp, #0x10
     980:	str	x0, [sp, #8]
     984:	ldr	x0, [sp, #8]
     988:	ldr	w0, [x0, #4]
     98c:	and	w0, w0, #0x2
     990:	cmp	w0, #0x0
     994:	cset	w0, ne  // ne = any
     998:	and	w0, w0, #0xff
     99c:	add	sp, sp, #0x10
     9a0:	ret

00000000000009a4 <gomp_team_barrier_cancelled>:
     9a4:	sub	sp, sp, #0x10
     9a8:	str	x0, [sp, #8]
     9ac:	ldr	x0, [sp, #8]
     9b0:	ldr	w0, [x0, #4]
     9b4:	and	w0, w0, #0x4
     9b8:	cmp	w0, #0x0
     9bc:	cset	w0, ne  // ne = any
     9c0:	and	w0, w0, #0xff
     9c4:	and	x0, x0, #0xff
     9c8:	cmp	x0, #0x0
     9cc:	cset	w0, ne  // ne = any
     9d0:	and	w0, w0, #0xff
     9d4:	add	sp, sp, #0x10
     9d8:	ret

00000000000009dc <gomp_team_barrier_done>:
     9dc:	sub	sp, sp, #0x10
     9e0:	str	x0, [sp, #8]
     9e4:	str	w1, [sp, #4]
     9e8:	ldr	w0, [sp, #4]
     9ec:	and	w0, w0, #0xfffffff8
     9f0:	add	w1, w0, #0x8
     9f4:	ldr	x0, [sp, #8]
     9f8:	str	w1, [x0, #4]
     9fc:	nop
     a00:	add	sp, sp, #0x10
     a04:	ret

0000000000000a08 <gomp_thread>:
     a08:	mrs	x1, tpidr_el0
     a0c:	adrp	x0, 0 <gomp_tls_data>
     a10:	ldr	x0, [x0]
     a14:	add	x0, x1, x0
     a18:	ret

0000000000000a1c <gomp_icv>:
     a1c:	stp	x29, x30, [sp, #-48]!
     a20:	mov	x29, sp
     a24:	strb	w0, [sp, #31]
     a28:	bl	a08 <gomp_thread>
     a2c:	ldr	x0, [x0, #80]
     a30:	str	x0, [sp, #40]
     a34:	ldr	x0, [sp, #40]
     a38:	cmp	x0, #0x0
     a3c:	b.eq	a4c <gomp_icv+0x30>  // b.none
     a40:	ldr	x0, [sp, #40]
     a44:	add	x0, x0, #0x90
     a48:	b	a68 <gomp_icv+0x4c>
     a4c:	ldrb	w0, [sp, #31]
     a50:	cmp	w0, #0x0
     a54:	b.eq	a60 <gomp_icv+0x44>  // b.none
     a58:	bl	0 <gomp_new_icv>
     a5c:	b	a68 <gomp_icv+0x4c>
     a60:	adrp	x0, 0 <gomp_global_icv>
     a64:	add	x0, x0, #0x0
     a68:	ldp	x29, x30, [sp], #48
     a6c:	ret

0000000000000a70 <gomp_finish_task>:
     a70:	stp	x29, x30, [sp, #-32]!
     a74:	mov	x29, sp
     a78:	str	x0, [sp, #24]
     a7c:	ldr	x0, [sp, #24]
     a80:	ldr	x0, [x0, #56]
     a84:	cmp	x0, #0x0
     a88:	cset	w0, ne  // ne = any
     a8c:	and	w0, w0, #0xff
     a90:	and	x0, x0, #0xff
     a94:	cmp	x0, #0x0
     a98:	b.eq	aa8 <gomp_finish_task+0x38>  // b.none
     a9c:	ldr	x0, [sp, #24]
     aa0:	ldr	x0, [x0, #56]
     aa4:	bl	0 <free>
     aa8:	nop
     aac:	ldp	x29, x30, [sp], #32
     ab0:	ret

0000000000000ab4 <priority_queue_offset>:
     ab4:	sub	sp, sp, #0x10
     ab8:	str	w0, [sp, #12]
     abc:	ldr	w0, [sp, #12]
     ac0:	sxtw	x0, w0
     ac4:	add	x0, x0, #0x6
     ac8:	lsl	x0, x0, #4
     acc:	add	sp, sp, #0x10
     ad0:	ret

0000000000000ad4 <priority_node_to_task>:
     ad4:	stp	x29, x30, [sp, #-32]!
     ad8:	mov	x29, sp
     adc:	str	w0, [sp, #28]
     ae0:	str	x1, [sp, #16]
     ae4:	ldr	w0, [sp, #28]
     ae8:	bl	ab4 <priority_queue_offset>
     aec:	neg	x0, x0
     af0:	ldr	x1, [sp, #16]
     af4:	add	x0, x1, x0
     af8:	ldp	x29, x30, [sp], #32
     afc:	ret

0000000000000b00 <task_to_priority_node>:
     b00:	stp	x29, x30, [sp, #-32]!
     b04:	mov	x29, sp
     b08:	str	w0, [sp, #28]
     b0c:	str	x1, [sp, #16]
     b10:	ldr	w0, [sp, #28]
     b14:	bl	ab4 <priority_queue_offset>
     b18:	mov	x1, x0
     b1c:	ldr	x0, [sp, #16]
     b20:	add	x0, x0, x1
     b24:	ldp	x29, x30, [sp], #32
     b28:	ret

0000000000000b2c <htab_alloc>:
     b2c:	stp	x29, x30, [sp, #-32]!
     b30:	mov	x29, sp
     b34:	str	x0, [sp, #24]
     b38:	ldr	x0, [sp, #24]
     b3c:	bl	0 <gomp_malloc>
     b40:	ldp	x29, x30, [sp], #32
     b44:	ret

0000000000000b48 <htab_free>:
     b48:	stp	x29, x30, [sp, #-32]!
     b4c:	mov	x29, sp
     b50:	str	x0, [sp, #24]
     b54:	ldr	x0, [sp, #24]
     b58:	bl	0 <free>
     b5c:	nop
     b60:	ldp	x29, x30, [sp], #32
     b64:	ret

0000000000000b68 <higher_prime_index>:
     b68:	stp	x29, x30, [sp, #-48]!
     b6c:	mov	x29, sp
     b70:	str	x0, [sp, #24]
     b74:	str	wzr, [sp, #44]
     b78:	mov	w0, #0x1e                  	// #30
     b7c:	str	w0, [sp, #40]
     b80:	b	be0 <higher_prime_index+0x78>
     b84:	ldr	w1, [sp, #40]
     b88:	ldr	w0, [sp, #44]
     b8c:	sub	w0, w1, w0
     b90:	lsr	w0, w0, #1
     b94:	ldr	w1, [sp, #44]
     b98:	add	w0, w1, w0
     b9c:	str	w0, [sp, #36]
     ba0:	adrp	x0, 0 <priority_queue_multi_p>
     ba4:	add	x1, x0, #0x0
     ba8:	ldr	w0, [sp, #36]
     bac:	lsl	x0, x0, #4
     bb0:	add	x0, x1, x0
     bb4:	ldr	w0, [x0]
     bb8:	mov	w0, w0
     bbc:	ldr	x1, [sp, #24]
     bc0:	cmp	x1, x0
     bc4:	b.ls	bd8 <higher_prime_index+0x70>  // b.plast
     bc8:	ldr	w0, [sp, #36]
     bcc:	add	w0, w0, #0x1
     bd0:	str	w0, [sp, #44]
     bd4:	b	be0 <higher_prime_index+0x78>
     bd8:	ldr	w0, [sp, #36]
     bdc:	str	w0, [sp, #40]
     be0:	ldr	w1, [sp, #44]
     be4:	ldr	w0, [sp, #40]
     be8:	cmp	w1, w0
     bec:	b.ne	b84 <higher_prime_index+0x1c>  // b.any
     bf0:	adrp	x0, 0 <priority_queue_multi_p>
     bf4:	add	x1, x0, #0x0
     bf8:	ldr	w0, [sp, #44]
     bfc:	lsl	x0, x0, #4
     c00:	add	x0, x1, x0
     c04:	ldr	w0, [x0]
     c08:	mov	w0, w0
     c0c:	ldr	x1, [sp, #24]
     c10:	cmp	x1, x0
     c14:	b.ls	c1c <higher_prime_index+0xb4>  // b.plast
     c18:	bl	0 <abort>
     c1c:	ldr	w0, [sp, #44]
     c20:	ldp	x29, x30, [sp], #48
     c24:	ret

0000000000000c28 <htab_size>:
     c28:	sub	sp, sp, #0x10
     c2c:	str	x0, [sp, #8]
     c30:	ldr	x0, [sp, #8]
     c34:	ldr	x0, [x0]
     c38:	add	sp, sp, #0x10
     c3c:	ret

0000000000000c40 <htab_elements>:
     c40:	sub	sp, sp, #0x10
     c44:	str	x0, [sp, #8]
     c48:	ldr	x0, [sp, #8]
     c4c:	ldr	x1, [x0, #8]
     c50:	ldr	x0, [sp, #8]
     c54:	ldr	x0, [x0, #16]
     c58:	sub	x0, x1, x0
     c5c:	add	sp, sp, #0x10
     c60:	ret

0000000000000c64 <htab_mod_1>:
     c64:	sub	sp, sp, #0x30
     c68:	str	w0, [sp, #12]
     c6c:	str	w1, [sp, #8]
     c70:	str	w2, [sp, #4]
     c74:	str	w3, [sp]
     c78:	ldr	w1, [sp, #12]
     c7c:	ldr	w0, [sp, #4]
     c80:	mul	x0, x1, x0
     c84:	lsr	x0, x0, #32
     c88:	str	w0, [sp, #44]
     c8c:	ldr	w1, [sp, #12]
     c90:	ldr	w0, [sp, #44]
     c94:	sub	w0, w1, w0
     c98:	str	w0, [sp, #40]
     c9c:	ldr	w0, [sp, #40]
     ca0:	lsr	w0, w0, #1
     ca4:	str	w0, [sp, #36]
     ca8:	ldr	w1, [sp, #44]
     cac:	ldr	w0, [sp, #36]
     cb0:	add	w0, w1, w0
     cb4:	str	w0, [sp, #32]
     cb8:	ldr	w0, [sp]
     cbc:	ldr	w1, [sp, #32]
     cc0:	lsr	w0, w1, w0
     cc4:	str	w0, [sp, #28]
     cc8:	ldr	w1, [sp, #28]
     ccc:	ldr	w0, [sp, #8]
     cd0:	mul	w0, w1, w0
     cd4:	ldr	w1, [sp, #12]
     cd8:	sub	w0, w1, w0
     cdc:	str	w0, [sp, #24]
     ce0:	ldr	w0, [sp, #24]
     ce4:	add	sp, sp, #0x30
     ce8:	ret

0000000000000cec <htab_mod>:
     cec:	stp	x29, x30, [sp, #-48]!
     cf0:	mov	x29, sp
     cf4:	str	w0, [sp, #28]
     cf8:	str	x1, [sp, #16]
     cfc:	ldr	x0, [sp, #16]
     d00:	ldr	w0, [x0, #24]
     d04:	mov	w0, w0
     d08:	lsl	x1, x0, #4
     d0c:	adrp	x0, 0 <priority_queue_multi_p>
     d10:	add	x0, x0, #0x0
     d14:	add	x0, x1, x0
     d18:	str	x0, [sp, #40]
     d1c:	ldr	x0, [sp, #40]
     d20:	ldr	w1, [x0]
     d24:	ldr	x0, [sp, #40]
     d28:	ldr	w2, [x0, #4]
     d2c:	ldr	x0, [sp, #40]
     d30:	ldr	w0, [x0, #12]
     d34:	mov	w3, w0
     d38:	ldr	w0, [sp, #28]
     d3c:	bl	c64 <htab_mod_1>
     d40:	ldp	x29, x30, [sp], #48
     d44:	ret

0000000000000d48 <htab_mod_m2>:
     d48:	stp	x29, x30, [sp, #-48]!
     d4c:	mov	x29, sp
     d50:	str	w0, [sp, #28]
     d54:	str	x1, [sp, #16]
     d58:	ldr	x0, [sp, #16]
     d5c:	ldr	w0, [x0, #24]
     d60:	mov	w0, w0
     d64:	lsl	x1, x0, #4
     d68:	adrp	x0, 0 <priority_queue_multi_p>
     d6c:	add	x0, x0, #0x0
     d70:	add	x0, x1, x0
     d74:	str	x0, [sp, #40]
     d78:	ldr	x0, [sp, #40]
     d7c:	ldr	w0, [x0]
     d80:	sub	w1, w0, #0x2
     d84:	ldr	x0, [sp, #40]
     d88:	ldr	w2, [x0, #8]
     d8c:	ldr	x0, [sp, #40]
     d90:	ldr	w0, [x0, #12]
     d94:	mov	w3, w0
     d98:	ldr	w0, [sp, #28]
     d9c:	bl	c64 <htab_mod_1>
     da0:	add	w0, w0, #0x1
     da4:	ldp	x29, x30, [sp], #48
     da8:	ret

0000000000000dac <htab_create>:
     dac:	stp	x29, x30, [sp, #-48]!
     db0:	mov	x29, sp
     db4:	str	x0, [sp, #24]
     db8:	ldr	x0, [sp, #24]
     dbc:	bl	b68 <higher_prime_index>
     dc0:	str	w0, [sp, #44]
     dc4:	adrp	x0, 0 <priority_queue_multi_p>
     dc8:	add	x1, x0, #0x0
     dcc:	ldr	w0, [sp, #44]
     dd0:	lsl	x0, x0, #4
     dd4:	add	x0, x1, x0
     dd8:	ldr	w0, [x0]
     ddc:	mov	w0, w0
     de0:	str	x0, [sp, #24]
     de4:	ldr	x0, [sp, #24]
     de8:	add	x0, x0, #0x4
     dec:	lsl	x0, x0, #3
     df0:	bl	b2c <htab_alloc>
     df4:	str	x0, [sp, #32]
     df8:	ldr	x0, [sp, #32]
     dfc:	ldr	x1, [sp, #24]
     e00:	str	x1, [x0]
     e04:	ldr	x0, [sp, #32]
     e08:	str	xzr, [x0, #8]
     e0c:	ldr	x0, [sp, #32]
     e10:	str	xzr, [x0, #16]
     e14:	ldr	x0, [sp, #32]
     e18:	ldr	w1, [sp, #44]
     e1c:	str	w1, [x0, #24]
     e20:	ldr	x0, [sp, #32]
     e24:	add	x3, x0, #0x20
     e28:	ldr	x0, [sp, #24]
     e2c:	lsl	x0, x0, #3
     e30:	mov	x2, x0
     e34:	mov	w1, #0x0                   	// #0
     e38:	mov	x0, x3
     e3c:	bl	0 <memset>
     e40:	ldr	x0, [sp, #32]
     e44:	ldp	x29, x30, [sp], #48
     e48:	ret

0000000000000e4c <find_empty_slot_for_expand>:
     e4c:	stp	x29, x30, [sp, #-64]!
     e50:	mov	x29, sp
     e54:	str	x0, [sp, #24]
     e58:	str	w1, [sp, #20]
     e5c:	ldr	x1, [sp, #24]
     e60:	ldr	w0, [sp, #20]
     e64:	bl	cec <htab_mod>
     e68:	str	w0, [sp, #60]
     e6c:	ldr	x0, [sp, #24]
     e70:	bl	c28 <htab_size>
     e74:	str	x0, [sp, #48]
     e78:	ldr	x0, [sp, #24]
     e7c:	add	x1, x0, #0x20
     e80:	ldr	w0, [sp, #60]
     e84:	lsl	x0, x0, #3
     e88:	add	x0, x1, x0
     e8c:	str	x0, [sp, #40]
     e90:	ldr	x0, [sp, #40]
     e94:	ldr	x0, [x0]
     e98:	cmp	x0, #0x0
     e9c:	b.ne	ea8 <find_empty_slot_for_expand+0x5c>  // b.any
     ea0:	ldr	x0, [sp, #40]
     ea4:	b	f44 <find_empty_slot_for_expand+0xf8>
     ea8:	ldr	x0, [sp, #40]
     eac:	ldr	x0, [x0]
     eb0:	cmp	x0, #0x1
     eb4:	b.ne	ebc <find_empty_slot_for_expand+0x70>  // b.any
     eb8:	bl	0 <abort>
     ebc:	ldr	x1, [sp, #24]
     ec0:	ldr	w0, [sp, #20]
     ec4:	bl	d48 <htab_mod_m2>
     ec8:	str	w0, [sp, #36]
     ecc:	ldr	w1, [sp, #60]
     ed0:	ldr	w0, [sp, #36]
     ed4:	add	w0, w1, w0
     ed8:	str	w0, [sp, #60]
     edc:	ldr	w0, [sp, #60]
     ee0:	ldr	x1, [sp, #48]
     ee4:	cmp	x1, x0
     ee8:	b.hi	f00 <find_empty_slot_for_expand+0xb4>  // b.pmore
     eec:	ldr	x0, [sp, #48]
     ef0:	mov	w1, w0
     ef4:	ldr	w0, [sp, #60]
     ef8:	sub	w0, w0, w1
     efc:	str	w0, [sp, #60]
     f00:	ldr	x0, [sp, #24]
     f04:	add	x1, x0, #0x20
     f08:	ldr	w0, [sp, #60]
     f0c:	lsl	x0, x0, #3
     f10:	add	x0, x1, x0
     f14:	str	x0, [sp, #40]
     f18:	ldr	x0, [sp, #40]
     f1c:	ldr	x0, [x0]
     f20:	cmp	x0, #0x0
     f24:	b.ne	f30 <find_empty_slot_for_expand+0xe4>  // b.any
     f28:	ldr	x0, [sp, #40]
     f2c:	b	f44 <find_empty_slot_for_expand+0xf8>
     f30:	ldr	x0, [sp, #40]
     f34:	ldr	x0, [x0]
     f38:	cmp	x0, #0x1
     f3c:	b.ne	ecc <find_empty_slot_for_expand+0x80>  // b.any
     f40:	bl	0 <abort>
     f44:	ldp	x29, x30, [sp], #64
     f48:	ret

0000000000000f4c <htab_expand>:
     f4c:	stp	x29, x30, [sp, #-80]!
     f50:	mov	x29, sp
     f54:	str	x0, [sp, #24]
     f58:	ldr	x0, [sp, #24]
     f5c:	ldr	x0, [x0]
     f60:	str	x0, [sp, #56]
     f64:	ldr	x0, [sp, #24]
     f68:	add	x1, x0, #0x20
     f6c:	ldr	x0, [sp, #56]
     f70:	lsl	x0, x0, #3
     f74:	add	x0, x1, x0
     f78:	str	x0, [sp, #48]
     f7c:	ldr	x0, [sp, #24]
     f80:	bl	c40 <htab_elements>
     f84:	str	x0, [sp, #40]
     f88:	ldr	x0, [sp, #40]
     f8c:	lsl	x0, x0, #1
     f90:	ldr	x1, [sp, #56]
     f94:	cmp	x1, x0
     f98:	b.cc	fbc <htab_expand+0x70>  // b.lo, b.ul, b.last
     f9c:	ldr	x0, [sp, #40]
     fa0:	lsl	x0, x0, #3
     fa4:	ldr	x1, [sp, #56]
     fa8:	cmp	x1, x0
     fac:	b.ls	fd0 <htab_expand+0x84>  // b.plast
     fb0:	ldr	x0, [sp, #56]
     fb4:	cmp	x0, #0x20
     fb8:	b.ls	fd0 <htab_expand+0x84>  // b.plast
     fbc:	ldr	x0, [sp, #40]
     fc0:	lsl	x0, x0, #1
     fc4:	bl	dac <htab_create>
     fc8:	str	x0, [sp, #72]
     fcc:	b	fe0 <htab_expand+0x94>
     fd0:	ldr	x0, [sp, #56]
     fd4:	sub	x0, x0, #0x1
     fd8:	bl	dac <htab_create>
     fdc:	str	x0, [sp, #72]
     fe0:	ldr	x0, [sp, #24]
     fe4:	ldr	x1, [x0, #8]
     fe8:	ldr	x0, [sp, #24]
     fec:	ldr	x0, [x0, #16]
     ff0:	sub	x1, x1, x0
     ff4:	ldr	x0, [sp, #72]
     ff8:	str	x1, [x0, #8]
     ffc:	ldr	x0, [sp, #24]
    1000:	add	x0, x0, #0x20
    1004:	str	x0, [sp, #64]
    1008:	ldr	x0, [sp, #64]
    100c:	ldr	x0, [x0]
    1010:	str	x0, [sp, #32]
    1014:	ldr	x0, [sp, #32]
    1018:	cmp	x0, #0x0
    101c:	b.eq	104c <htab_expand+0x100>  // b.none
    1020:	ldr	x0, [sp, #32]
    1024:	cmp	x0, #0x1
    1028:	b.eq	104c <htab_expand+0x100>  // b.none
    102c:	ldr	x0, [sp, #32]
    1030:	bl	14cc <htab_hash>
    1034:	mov	w1, w0
    1038:	ldr	x0, [sp, #72]
    103c:	bl	e4c <find_empty_slot_for_expand>
    1040:	mov	x1, x0
    1044:	ldr	x0, [sp, #32]
    1048:	str	x0, [x1]
    104c:	ldr	x0, [sp, #64]
    1050:	add	x0, x0, #0x8
    1054:	str	x0, [sp, #64]
    1058:	ldr	x1, [sp, #64]
    105c:	ldr	x0, [sp, #48]
    1060:	cmp	x1, x0
    1064:	b.cc	1008 <htab_expand+0xbc>  // b.lo, b.ul, b.last
    1068:	ldr	x0, [sp, #24]
    106c:	bl	b48 <htab_free>
    1070:	ldr	x0, [sp, #72]
    1074:	ldp	x29, x30, [sp], #80
    1078:	ret

000000000000107c <htab_find>:
    107c:	stp	x29, x30, [sp, #-64]!
    1080:	mov	x29, sp
    1084:	str	x0, [sp, #24]
    1088:	str	x1, [sp, #16]
    108c:	ldr	x0, [sp, #16]
    1090:	bl	14cc <htab_hash>
    1094:	str	w0, [sp, #56]
    1098:	ldr	x0, [sp, #24]
    109c:	bl	c28 <htab_size>
    10a0:	str	x0, [sp, #48]
    10a4:	ldr	x1, [sp, #24]
    10a8:	ldr	w0, [sp, #56]
    10ac:	bl	cec <htab_mod>
    10b0:	str	w0, [sp, #60]
    10b4:	ldr	x0, [sp, #24]
    10b8:	ldr	w1, [sp, #60]
    10bc:	add	x1, x1, #0x4
    10c0:	ldr	x0, [x0, x1, lsl #3]
    10c4:	str	x0, [sp, #40]
    10c8:	ldr	x0, [sp, #40]
    10cc:	cmp	x0, #0x0
    10d0:	b.eq	10f8 <htab_find+0x7c>  // b.none
    10d4:	ldr	x0, [sp, #40]
    10d8:	cmp	x0, #0x1
    10dc:	b.eq	1100 <htab_find+0x84>  // b.none
    10e0:	ldr	x1, [sp, #16]
    10e4:	ldr	x0, [sp, #40]
    10e8:	bl	14ec <htab_eq>
    10ec:	and	w0, w0, #0xff
    10f0:	cmp	w0, #0x0
    10f4:	b.eq	1100 <htab_find+0x84>  // b.none
    10f8:	ldr	x0, [sp, #40]
    10fc:	b	118c <htab_find+0x110>
    1100:	ldr	x1, [sp, #24]
    1104:	ldr	w0, [sp, #56]
    1108:	bl	d48 <htab_mod_m2>
    110c:	str	w0, [sp, #36]
    1110:	ldr	w1, [sp, #60]
    1114:	ldr	w0, [sp, #36]
    1118:	add	w0, w1, w0
    111c:	str	w0, [sp, #60]
    1120:	ldr	w0, [sp, #60]
    1124:	ldr	x1, [sp, #48]
    1128:	cmp	x1, x0
    112c:	b.hi	1144 <htab_find+0xc8>  // b.pmore
    1130:	ldr	x0, [sp, #48]
    1134:	mov	w1, w0
    1138:	ldr	w0, [sp, #60]
    113c:	sub	w0, w0, w1
    1140:	str	w0, [sp, #60]
    1144:	ldr	x0, [sp, #24]
    1148:	ldr	w1, [sp, #60]
    114c:	add	x1, x1, #0x4
    1150:	ldr	x0, [x0, x1, lsl #3]
    1154:	str	x0, [sp, #40]
    1158:	ldr	x0, [sp, #40]
    115c:	cmp	x0, #0x0
    1160:	b.eq	1188 <htab_find+0x10c>  // b.none
    1164:	ldr	x0, [sp, #40]
    1168:	cmp	x0, #0x1
    116c:	b.eq	1110 <htab_find+0x94>  // b.none
    1170:	ldr	x1, [sp, #16]
    1174:	ldr	x0, [sp, #40]
    1178:	bl	14ec <htab_eq>
    117c:	and	w0, w0, #0xff
    1180:	cmp	w0, #0x0
    1184:	b.eq	1110 <htab_find+0x94>  // b.none
    1188:	ldr	x0, [sp, #40]
    118c:	ldp	x29, x30, [sp], #64
    1190:	ret

0000000000001194 <htab_find_slot>:
    1194:	stp	x29, x30, [sp, #-112]!
    1198:	mov	x29, sp
    119c:	str	x0, [sp, #40]
    11a0:	str	x1, [sp, #32]
    11a4:	str	w2, [sp, #28]
    11a8:	ldr	x0, [sp, #32]
    11ac:	bl	14cc <htab_hash>
    11b0:	str	w0, [sp, #76]
    11b4:	ldr	x0, [sp, #40]
    11b8:	ldr	x0, [x0]
    11bc:	str	x0, [sp, #80]
    11c0:	ldr	x0, [sp, #80]
    11c4:	bl	c28 <htab_size>
    11c8:	str	x0, [sp, #88]
    11cc:	ldr	w0, [sp, #28]
    11d0:	cmp	w0, #0x1
    11d4:	b.ne	1228 <htab_find_slot+0x94>  // b.any
    11d8:	ldr	x1, [sp, #88]
    11dc:	mov	x0, x1
    11e0:	lsl	x0, x0, #1
    11e4:	add	x1, x0, x1
    11e8:	ldr	x0, [sp, #80]
    11ec:	ldr	x0, [x0, #8]
    11f0:	lsl	x0, x0, #2
    11f4:	cmp	x1, x0
    11f8:	b.hi	1228 <htab_find_slot+0x94>  // b.pmore
    11fc:	ldr	x0, [sp, #80]
    1200:	bl	f4c <htab_expand>
    1204:	mov	x1, x0
    1208:	ldr	x0, [sp, #40]
    120c:	str	x1, [x0]
    1210:	ldr	x0, [sp, #40]
    1214:	ldr	x0, [x0]
    1218:	str	x0, [sp, #80]
    121c:	ldr	x0, [sp, #80]
    1220:	bl	c28 <htab_size>
    1224:	str	x0, [sp, #88]
    1228:	ldr	x1, [sp, #80]
    122c:	ldr	w0, [sp, #76]
    1230:	bl	cec <htab_mod>
    1234:	str	w0, [sp, #100]
    1238:	str	xzr, [sp, #104]
    123c:	ldr	x0, [sp, #80]
    1240:	ldr	w1, [sp, #100]
    1244:	add	x1, x1, #0x4
    1248:	ldr	x0, [x0, x1, lsl #3]
    124c:	str	x0, [sp, #64]
    1250:	ldr	x0, [sp, #64]
    1254:	cmp	x0, #0x0
    1258:	b.eq	137c <htab_find_slot+0x1e8>  // b.none
    125c:	ldr	x0, [sp, #64]
    1260:	cmp	x0, #0x1
    1264:	b.ne	1284 <htab_find_slot+0xf0>  // b.any
    1268:	ldr	w0, [sp, #100]
    126c:	add	x0, x0, #0x4
    1270:	lsl	x0, x0, #3
    1274:	ldr	x1, [sp, #80]
    1278:	add	x0, x1, x0
    127c:	str	x0, [sp, #104]
    1280:	b	12b4 <htab_find_slot+0x120>
    1284:	ldr	x1, [sp, #32]
    1288:	ldr	x0, [sp, #64]
    128c:	bl	14ec <htab_eq>
    1290:	and	w0, w0, #0xff
    1294:	cmp	w0, #0x0
    1298:	b.eq	12b4 <htab_find_slot+0x120>  // b.none
    129c:	ldr	w0, [sp, #100]
    12a0:	add	x0, x0, #0x4
    12a4:	lsl	x0, x0, #3
    12a8:	ldr	x1, [sp, #80]
    12ac:	add	x0, x1, x0
    12b0:	b	13f4 <htab_find_slot+0x260>
    12b4:	ldr	x1, [sp, #80]
    12b8:	ldr	w0, [sp, #76]
    12bc:	bl	d48 <htab_mod_m2>
    12c0:	str	w0, [sp, #60]
    12c4:	ldr	w1, [sp, #100]
    12c8:	ldr	w0, [sp, #60]
    12cc:	add	w0, w1, w0
    12d0:	str	w0, [sp, #100]
    12d4:	ldr	w0, [sp, #100]
    12d8:	ldr	x1, [sp, #88]
    12dc:	cmp	x1, x0
    12e0:	b.hi	12f8 <htab_find_slot+0x164>  // b.pmore
    12e4:	ldr	x0, [sp, #88]
    12e8:	mov	w1, w0
    12ec:	ldr	w0, [sp, #100]
    12f0:	sub	w0, w0, w1
    12f4:	str	w0, [sp, #100]
    12f8:	ldr	x0, [sp, #80]
    12fc:	ldr	w1, [sp, #100]
    1300:	add	x1, x1, #0x4
    1304:	ldr	x0, [x0, x1, lsl #3]
    1308:	str	x0, [sp, #64]
    130c:	ldr	x0, [sp, #64]
    1310:	cmp	x0, #0x0
    1314:	b.eq	1384 <htab_find_slot+0x1f0>  // b.none
    1318:	ldr	x0, [sp, #64]
    131c:	cmp	x0, #0x1
    1320:	b.ne	134c <htab_find_slot+0x1b8>  // b.any
    1324:	ldr	x0, [sp, #104]
    1328:	cmp	x0, #0x0
    132c:	b.ne	12c4 <htab_find_slot+0x130>  // b.any
    1330:	ldr	w0, [sp, #100]
    1334:	add	x0, x0, #0x4
    1338:	lsl	x0, x0, #3
    133c:	ldr	x1, [sp, #80]
    1340:	add	x0, x1, x0
    1344:	str	x0, [sp, #104]
    1348:	b	12c4 <htab_find_slot+0x130>
    134c:	ldr	x1, [sp, #32]
    1350:	ldr	x0, [sp, #64]
    1354:	bl	14ec <htab_eq>
    1358:	and	w0, w0, #0xff
    135c:	cmp	w0, #0x0
    1360:	b.eq	12c4 <htab_find_slot+0x130>  // b.none
    1364:	ldr	w0, [sp, #100]
    1368:	add	x0, x0, #0x4
    136c:	lsl	x0, x0, #3
    1370:	ldr	x1, [sp, #80]
    1374:	add	x0, x1, x0
    1378:	b	13f4 <htab_find_slot+0x260>
    137c:	nop
    1380:	b	1388 <htab_find_slot+0x1f4>
    1384:	nop
    1388:	ldr	w0, [sp, #28]
    138c:	cmp	w0, #0x0
    1390:	b.ne	139c <htab_find_slot+0x208>  // b.any
    1394:	mov	x0, #0x0                   	// #0
    1398:	b	13f4 <htab_find_slot+0x260>
    139c:	ldr	x0, [sp, #104]
    13a0:	cmp	x0, #0x0
    13a4:	b.eq	13cc <htab_find_slot+0x238>  // b.none
    13a8:	ldr	x0, [sp, #80]
    13ac:	ldr	x0, [x0, #16]
    13b0:	sub	x1, x0, #0x1
    13b4:	ldr	x0, [sp, #80]
    13b8:	str	x1, [x0, #16]
    13bc:	ldr	x0, [sp, #104]
    13c0:	str	xzr, [x0]
    13c4:	ldr	x0, [sp, #104]
    13c8:	b	13f4 <htab_find_slot+0x260>
    13cc:	ldr	x0, [sp, #80]
    13d0:	ldr	x0, [x0, #8]
    13d4:	add	x1, x0, #0x1
    13d8:	ldr	x0, [sp, #80]
    13dc:	str	x1, [x0, #8]
    13e0:	ldr	w0, [sp, #100]
    13e4:	add	x0, x0, #0x4
    13e8:	lsl	x0, x0, #3
    13ec:	ldr	x1, [sp, #80]
    13f0:	add	x0, x1, x0
    13f4:	ldp	x29, x30, [sp], #112
    13f8:	ret

00000000000013fc <htab_clear_slot>:
    13fc:	stp	x29, x30, [sp, #-48]!
    1400:	mov	x29, sp
    1404:	str	x19, [sp, #16]
    1408:	str	x0, [sp, #40]
    140c:	str	x1, [sp, #32]
    1410:	ldr	x0, [sp, #40]
    1414:	add	x0, x0, #0x20
    1418:	ldr	x1, [sp, #32]
    141c:	cmp	x1, x0
    1420:	b.cc	1468 <htab_clear_slot+0x6c>  // b.lo, b.ul, b.last
    1424:	ldr	x0, [sp, #40]
    1428:	add	x19, x0, #0x20
    142c:	ldr	x0, [sp, #40]
    1430:	bl	c28 <htab_size>
    1434:	lsl	x0, x0, #3
    1438:	add	x0, x19, x0
    143c:	ldr	x1, [sp, #32]
    1440:	cmp	x1, x0
    1444:	b.cs	1468 <htab_clear_slot+0x6c>  // b.hs, b.nlast
    1448:	ldr	x0, [sp, #32]
    144c:	ldr	x0, [x0]
    1450:	cmp	x0, #0x0
    1454:	b.eq	1468 <htab_clear_slot+0x6c>  // b.none
    1458:	ldr	x0, [sp, #32]
    145c:	ldr	x0, [x0]
    1460:	cmp	x0, #0x1
    1464:	b.ne	146c <htab_clear_slot+0x70>  // b.any
    1468:	bl	0 <abort>
    146c:	ldr	x0, [sp, #32]
    1470:	mov	x1, #0x1                   	// #1
    1474:	str	x1, [x0]
    1478:	ldr	x0, [sp, #40]
    147c:	ldr	x0, [x0, #16]
    1480:	add	x1, x0, #0x1
    1484:	ldr	x0, [sp, #40]
    1488:	str	x1, [x0, #16]
    148c:	nop
    1490:	ldr	x19, [sp, #16]
    1494:	ldp	x29, x30, [sp], #48
    1498:	ret

000000000000149c <hash_pointer>:
    149c:	sub	sp, sp, #0x20
    14a0:	str	x0, [sp, #8]
    14a4:	ldr	x0, [sp, #8]
    14a8:	str	x0, [sp, #24]
    14ac:	ldr	x0, [sp, #24]
    14b0:	lsr	x0, x0, #32
    14b4:	ldr	x1, [sp, #24]
    14b8:	eor	x0, x1, x0
    14bc:	str	x0, [sp, #24]
    14c0:	ldr	x0, [sp, #24]
    14c4:	add	sp, sp, #0x20
    14c8:	ret

00000000000014cc <htab_hash>:
    14cc:	stp	x29, x30, [sp, #-32]!
    14d0:	mov	x29, sp
    14d4:	str	x0, [sp, #24]
    14d8:	ldr	x0, [sp, #24]
    14dc:	ldr	x0, [x0]
    14e0:	bl	149c <hash_pointer>
    14e4:	ldp	x29, x30, [sp], #32
    14e8:	ret

00000000000014ec <htab_eq>:
    14ec:	sub	sp, sp, #0x10
    14f0:	str	x0, [sp, #8]
    14f4:	str	x1, [sp]
    14f8:	ldr	x0, [sp, #8]
    14fc:	ldr	x1, [x0]
    1500:	ldr	x0, [sp]
    1504:	ldr	x0, [x0]
    1508:	cmp	x1, x0
    150c:	cset	w0, eq  // eq = none
    1510:	and	w0, w0, #0xff
    1514:	add	sp, sp, #0x10
    1518:	ret

000000000000151c <gomp_init_task>:
    151c:	stp	x29, x30, [sp, #-48]!
    1520:	mov	x29, sp
    1524:	str	x0, [sp, #40]
    1528:	str	x1, [sp, #32]
    152c:	str	x2, [sp, #24]
    1530:	ldr	x0, [sp, #40]
    1534:	ldr	x1, [sp, #32]
    1538:	str	x1, [x0]
    153c:	ldr	x0, [sp, #40]
    1540:	add	x0, x0, #0x90
    1544:	ldr	x1, [sp, #24]
    1548:	ldp	x2, x3, [x1]
    154c:	stp	x2, x3, [x0]
    1550:	ldp	x2, x3, [x1, #16]
    1554:	stp	x2, x3, [x0, #16]
    1558:	ldr	x1, [x1, #32]
    155c:	str	x1, [x0, #32]
    1560:	ldr	x0, [sp, #40]
    1564:	str	wzr, [x0, #200]
    1568:	ldr	x0, [sp, #40]
    156c:	str	xzr, [x0, #64]
    1570:	ldr	x0, [sp, #40]
    1574:	strb	wzr, [x0, #204]
    1578:	ldr	x0, [sp, #40]
    157c:	strb	wzr, [x0, #205]
    1580:	ldr	x0, [sp, #40]
    1584:	strb	wzr, [x0, #206]
    1588:	ldr	x0, [sp, #40]
    158c:	strb	wzr, [x0, #207]
    1590:	ldr	x0, [sp, #40]
    1594:	add	x0, x0, #0x8
    1598:	bl	34 <priority_queue_init>
    159c:	ldr	x0, [sp, #40]
    15a0:	str	xzr, [x0, #40]
    15a4:	ldr	x0, [sp, #40]
    15a8:	str	xzr, [x0, #48]
    15ac:	ldr	x0, [sp, #40]
    15b0:	str	xzr, [x0, #56]
    15b4:	ldr	x0, [sp, #40]
    15b8:	str	xzr, [x0, #72]
    15bc:	nop
    15c0:	ldp	x29, x30, [sp], #48
    15c4:	ret

00000000000015c8 <gomp_end_task>:
    15c8:	stp	x29, x30, [sp, #-32]!
    15cc:	mov	x29, sp
    15d0:	bl	a08 <gomp_thread>
    15d4:	str	x0, [sp, #24]
    15d8:	ldr	x0, [sp, #24]
    15dc:	ldr	x0, [x0, #80]
    15e0:	str	x0, [sp, #16]
    15e4:	ldr	x0, [sp, #16]
    15e8:	bl	a70 <gomp_finish_task>
    15ec:	ldr	x0, [sp, #16]
    15f0:	ldr	x1, [x0]
    15f4:	ldr	x0, [sp, #24]
    15f8:	str	x1, [x0, #80]
    15fc:	nop
    1600:	ldp	x29, x30, [sp], #32
    1604:	ret

0000000000001608 <gomp_clear_parent_in_list>:
    1608:	stp	x29, x30, [sp, #-48]!
    160c:	mov	x29, sp
    1610:	str	x0, [sp, #24]
    1614:	ldr	x0, [sp, #24]
    1618:	ldr	x0, [x0, #8]
    161c:	str	x0, [sp, #40]
    1620:	ldr	x0, [sp, #40]
    1624:	cmp	x0, #0x0
    1628:	b.eq	165c <gomp_clear_parent_in_list+0x54>  // b.none
    162c:	ldr	x1, [sp, #40]
    1630:	mov	w0, #0x1                   	// #1
    1634:	bl	ad4 <priority_node_to_task>
    1638:	str	xzr, [x0]
    163c:	ldr	x0, [sp, #40]
    1640:	ldr	x0, [x0]
    1644:	str	x0, [sp, #40]
    1648:	ldr	x0, [sp, #24]
    164c:	ldr	x0, [x0, #8]
    1650:	ldr	x1, [sp, #40]
    1654:	cmp	x1, x0
    1658:	b.ne	162c <gomp_clear_parent_in_list+0x24>  // b.any
    165c:	nop
    1660:	ldp	x29, x30, [sp], #48
    1664:	ret

0000000000001668 <gomp_clear_parent_in_tree>:
    1668:	stp	x29, x30, [sp, #-48]!
    166c:	mov	x29, sp
    1670:	str	x0, [sp, #24]
    1674:	str	x1, [sp, #16]
    1678:	ldr	x0, [sp, #16]
    167c:	cmp	x0, #0x0
    1680:	b.eq	16c8 <gomp_clear_parent_in_tree+0x60>  // b.none
    1684:	ldr	x0, [sp, #16]
    1688:	ldr	x0, [x0, #24]
    168c:	str	x0, [sp, #40]
    1690:	ldr	x0, [sp, #16]
    1694:	ldr	x0, [x0, #32]
    1698:	str	x0, [sp, #32]
    169c:	ldr	x0, [sp, #16]
    16a0:	bl	1608 <gomp_clear_parent_in_list>
    16a4:	ldr	x0, [sp, #16]
    16a8:	bl	0 <free>
    16ac:	ldr	x1, [sp, #40]
    16b0:	ldr	x0, [sp, #24]
    16b4:	bl	1668 <gomp_clear_parent_in_tree>
    16b8:	ldr	x1, [sp, #32]
    16bc:	ldr	x0, [sp, #24]
    16c0:	bl	1668 <gomp_clear_parent_in_tree>
    16c4:	b	16cc <gomp_clear_parent_in_tree+0x64>
    16c8:	nop
    16cc:	ldp	x29, x30, [sp], #48
    16d0:	ret

00000000000016d4 <gomp_clear_parent>:
    16d4:	stp	x29, x30, [sp, #-32]!
    16d8:	mov	x29, sp
    16dc:	str	x0, [sp, #24]
    16e0:	ldr	x0, [sp, #24]
    16e4:	bl	0 <priority_queue_multi_p>
    16e8:	and	w0, w0, #0xff
    16ec:	cmp	w0, #0x0
    16f0:	b.eq	1718 <gomp_clear_parent+0x44>  // b.none
    16f4:	ldr	x2, [sp, #24]
    16f8:	ldr	x0, [sp, #24]
    16fc:	ldr	x0, [x0]
    1700:	mov	x1, x0
    1704:	mov	x0, x2
    1708:	bl	1668 <gomp_clear_parent_in_tree>
    170c:	ldr	x0, [sp, #24]
    1710:	str	xzr, [x0]
    1714:	b	1724 <gomp_clear_parent+0x50>
    1718:	ldr	x0, [sp, #24]
    171c:	add	x0, x0, #0x8
    1720:	bl	1608 <gomp_clear_parent_in_list>
    1724:	nop
    1728:	ldp	x29, x30, [sp], #32
    172c:	ret

0000000000001730 <gomp_task_handle_depend>:
    1730:	stp	x29, x30, [sp, #-176]!
    1734:	mov	x29, sp
    1738:	str	x0, [sp, #40]
    173c:	str	x1, [sp, #32]
    1740:	str	x2, [sp, #24]
    1744:	ldr	x0, [sp, #24]
    1748:	ldr	x0, [x0]
    174c:	str	x0, [sp, #168]
    1750:	ldr	x0, [sp, #168]
    1754:	cmp	x0, #0x0
    1758:	b.eq	1804 <gomp_task_handle_depend+0xd4>  // b.none
    175c:	ldr	x0, [sp, #24]
    1760:	add	x0, x0, #0x8
    1764:	ldr	x0, [x0]
    1768:	str	x0, [sp, #72]
    176c:	str	xzr, [sp, #160]
    1770:	b	17f0 <gomp_task_handle_depend+0xc0>
    1774:	ldr	x0, [sp, #160]
    1778:	add	x0, x0, #0x2
    177c:	lsl	x0, x0, #3
    1780:	ldr	x1, [sp, #24]
    1784:	add	x0, x1, x0
    1788:	ldr	x2, [x0]
    178c:	ldr	x3, [sp, #40]
    1790:	ldr	x1, [sp, #160]
    1794:	mov	x0, x1
    1798:	lsl	x0, x0, #2
    179c:	add	x0, x0, x1
    17a0:	lsl	x0, x0, #3
    17a4:	add	x0, x3, x0
    17a8:	str	x2, [x0, #208]
    17ac:	ldr	x1, [sp, #160]
    17b0:	ldr	x0, [sp, #72]
    17b4:	cmp	x1, x0
    17b8:	cset	w0, cs  // cs = hs, nlast
    17bc:	and	w3, w0, #0xff
    17c0:	ldr	x2, [sp, #40]
    17c4:	ldr	x1, [sp, #160]
    17c8:	mov	x0, x1
    17cc:	lsl	x0, x0, #2
    17d0:	add	x0, x0, x1
    17d4:	lsl	x0, x0, #3
    17d8:	add	x0, x2, x0
    17dc:	mov	w1, w3
    17e0:	strb	w1, [x0, #240]
    17e4:	ldr	x0, [sp, #160]
    17e8:	add	x0, x0, #0x1
    17ec:	str	x0, [sp, #160]
    17f0:	ldr	x1, [sp, #160]
    17f4:	ldr	x0, [sp, #168]
    17f8:	cmp	x1, x0
    17fc:	b.cc	1774 <gomp_task_handle_depend+0x44>  // b.lo, b.ul, b.last
    1800:	b	1a9c <gomp_task_handle_depend+0x36c>
    1804:	ldr	x0, [sp, #24]
    1808:	add	x0, x0, #0x8
    180c:	ldr	x0, [x0]
    1810:	str	x0, [sp, #168]
    1814:	ldr	x0, [sp, #24]
    1818:	add	x0, x0, #0x10
    181c:	ldr	x0, [x0]
    1820:	str	x0, [sp, #120]
    1824:	ldr	x0, [sp, #24]
    1828:	add	x0, x0, #0x18
    182c:	ldr	x0, [x0]
    1830:	str	x0, [sp, #112]
    1834:	ldr	x0, [sp, #24]
    1838:	add	x0, x0, #0x20
    183c:	ldr	x0, [x0]
    1840:	str	x0, [sp, #104]
    1844:	ldr	x1, [sp, #120]
    1848:	ldr	x0, [sp, #112]
    184c:	add	x0, x1, x0
    1850:	ldr	x1, [sp, #104]
    1854:	add	x0, x1, x0
    1858:	str	x0, [sp, #96]
    185c:	str	xzr, [sp, #144]
    1860:	ldr	x0, [sp, #96]
    1864:	str	x0, [sp, #160]
    1868:	b	1934 <gomp_task_handle_depend+0x204>
    186c:	ldr	x0, [sp, #160]
    1870:	add	x0, x0, #0x5
    1874:	lsl	x0, x0, #3
    1878:	ldr	x1, [sp, #24]
    187c:	add	x0, x1, x0
    1880:	ldr	x0, [x0]
    1884:	str	x0, [sp, #80]
    1888:	ldr	x0, [sp, #80]
    188c:	add	x0, x0, #0x8
    1890:	ldr	x0, [x0]
    1894:	cmp	x0, #0x1
    1898:	b.eq	1924 <gomp_task_handle_depend+0x1f4>  // b.none
    189c:	cmp	x0, #0x0
    18a0:	b.eq	18b0 <gomp_task_handle_depend+0x180>  // b.none
    18a4:	sub	x0, x0, #0x2
    18a8:	cmp	x0, #0x2
    18ac:	b.ls	18cc <gomp_task_handle_depend+0x19c>  // b.plast
    18b0:	ldr	x0, [sp, #80]
    18b4:	add	x0, x0, #0x8
    18b8:	ldr	x0, [x0]
    18bc:	mov	w1, w0
    18c0:	adrp	x0, 0 <priority_queue_multi_p>
    18c4:	add	x0, x0, #0x0
    18c8:	bl	0 <gomp_fatal>
    18cc:	nop
    18d0:	ldr	x0, [sp, #80]
    18d4:	ldr	x2, [x0]
    18d8:	ldr	x3, [sp, #40]
    18dc:	ldr	x1, [sp, #144]
    18e0:	mov	x0, x1
    18e4:	lsl	x0, x0, #2
    18e8:	add	x0, x0, x1
    18ec:	lsl	x0, x0, #3
    18f0:	add	x0, x3, x0
    18f4:	str	x2, [x0, #208]
    18f8:	ldr	x1, [sp, #144]
    18fc:	add	x0, x1, #0x1
    1900:	str	x0, [sp, #144]
    1904:	ldr	x2, [sp, #40]
    1908:	mov	x0, x1
    190c:	lsl	x0, x0, #2
    1910:	add	x0, x0, x1
    1914:	lsl	x0, x0, #3
    1918:	add	x0, x2, x0
    191c:	strb	wzr, [x0, #240]
    1920:	b	1928 <gomp_task_handle_depend+0x1f8>
    1924:	nop
    1928:	ldr	x0, [sp, #160]
    192c:	add	x0, x0, #0x1
    1930:	str	x0, [sp, #160]
    1934:	ldr	x1, [sp, #160]
    1938:	ldr	x0, [sp, #168]
    193c:	cmp	x1, x0
    1940:	b.cc	186c <gomp_task_handle_depend+0x13c>  // b.lo, b.ul, b.last
    1944:	str	xzr, [sp, #160]
    1948:	b	19d8 <gomp_task_handle_depend+0x2a8>
    194c:	ldr	x0, [sp, #160]
    1950:	add	x0, x0, #0x5
    1954:	lsl	x0, x0, #3
    1958:	ldr	x1, [sp, #24]
    195c:	add	x0, x1, x0
    1960:	ldr	x2, [x0]
    1964:	ldr	x3, [sp, #40]
    1968:	ldr	x1, [sp, #144]
    196c:	mov	x0, x1
    1970:	lsl	x0, x0, #2
    1974:	add	x0, x0, x1
    1978:	lsl	x0, x0, #3
    197c:	add	x0, x3, x0
    1980:	str	x2, [x0, #208]
    1984:	ldr	x1, [sp, #120]
    1988:	ldr	x0, [sp, #112]
    198c:	add	x0, x1, x0
    1990:	ldr	x1, [sp, #144]
    1994:	add	x2, x1, #0x1
    1998:	str	x2, [sp, #144]
    199c:	ldr	x2, [sp, #160]
    19a0:	cmp	x2, x0
    19a4:	cset	w0, cs  // cs = hs, nlast
    19a8:	and	w3, w0, #0xff
    19ac:	ldr	x2, [sp, #40]
    19b0:	mov	x0, x1
    19b4:	lsl	x0, x0, #2
    19b8:	add	x0, x0, x1
    19bc:	lsl	x0, x0, #3
    19c0:	add	x0, x2, x0
    19c4:	mov	w1, w3
    19c8:	strb	w1, [x0, #240]
    19cc:	ldr	x0, [sp, #160]
    19d0:	add	x0, x0, #0x1
    19d4:	str	x0, [sp, #160]
    19d8:	ldr	x1, [sp, #160]
    19dc:	ldr	x0, [sp, #96]
    19e0:	cmp	x1, x0
    19e4:	b.cc	194c <gomp_task_handle_depend+0x21c>  // b.lo, b.ul, b.last
    19e8:	ldr	x0, [sp, #96]
    19ec:	str	x0, [sp, #160]
    19f0:	b	1a8c <gomp_task_handle_depend+0x35c>
    19f4:	ldr	x0, [sp, #160]
    19f8:	add	x0, x0, #0x5
    19fc:	lsl	x0, x0, #3
    1a00:	ldr	x1, [sp, #24]
    1a04:	add	x0, x1, x0
    1a08:	ldr	x0, [x0]
    1a0c:	str	x0, [sp, #88]
    1a10:	ldr	x0, [sp, #88]
    1a14:	add	x0, x0, #0x8
    1a18:	ldr	x0, [x0]
    1a1c:	cmp	x0, #0x1
    1a20:	b.ne	1a7c <gomp_task_handle_depend+0x34c>  // b.any
    1a24:	ldr	x0, [sp, #88]
    1a28:	ldr	x2, [x0]
    1a2c:	ldr	x3, [sp, #40]
    1a30:	ldr	x1, [sp, #144]
    1a34:	mov	x0, x1
    1a38:	lsl	x0, x0, #2
    1a3c:	add	x0, x0, x1
    1a40:	lsl	x0, x0, #3
    1a44:	add	x0, x3, x0
    1a48:	str	x2, [x0, #208]
    1a4c:	ldr	x1, [sp, #144]
    1a50:	add	x0, x1, #0x1
    1a54:	str	x0, [sp, #144]
    1a58:	ldr	x2, [sp, #40]
    1a5c:	mov	x0, x1
    1a60:	lsl	x0, x0, #2
    1a64:	add	x0, x0, x1
    1a68:	lsl	x0, x0, #3
    1a6c:	add	x0, x2, x0
    1a70:	mov	w1, #0x1                   	// #1
    1a74:	strb	w1, [x0, #240]
    1a78:	b	1a80 <gomp_task_handle_depend+0x350>
    1a7c:	nop
    1a80:	ldr	x0, [sp, #160]
    1a84:	add	x0, x0, #0x1
    1a88:	str	x0, [sp, #160]
    1a8c:	ldr	x1, [sp, #160]
    1a90:	ldr	x0, [sp, #168]
    1a94:	cmp	x1, x0
    1a98:	b.cc	19f4 <gomp_task_handle_depend+0x2c4>  // b.lo, b.ul, b.last
    1a9c:	ldr	x0, [sp, #40]
    1aa0:	ldr	x1, [sp, #168]
    1aa4:	str	x1, [x0, #72]
    1aa8:	ldr	x0, [sp, #40]
    1aac:	str	xzr, [x0, #80]
    1ab0:	ldr	x0, [sp, #32]
    1ab4:	ldr	x0, [x0, #56]
    1ab8:	cmp	x0, #0x0
    1abc:	b.ne	1ae4 <gomp_task_handle_depend+0x3b4>  // b.any
    1ac0:	ldr	x0, [sp, #168]
    1ac4:	lsl	x0, x0, #1
    1ac8:	mov	x1, #0xc                   	// #12
    1acc:	cmp	x0, #0xc
    1ad0:	csel	x0, x0, x1, cs  // cs = hs, nlast
    1ad4:	bl	dac <htab_create>
    1ad8:	mov	x1, x0
    1adc:	ldr	x0, [sp, #32]
    1ae0:	str	x1, [x0, #56]
    1ae4:	str	xzr, [sp, #160]
    1ae8:	b	1f8c <gomp_task_handle_depend+0x85c>
    1aec:	ldr	x2, [sp, #40]
    1af0:	ldr	x1, [sp, #160]
    1af4:	mov	x0, x1
    1af8:	lsl	x0, x0, #2
    1afc:	add	x0, x0, x1
    1b00:	lsl	x0, x0, #3
    1b04:	add	x0, x2, x0
    1b08:	str	xzr, [x0, #216]
    1b0c:	ldr	x2, [sp, #40]
    1b10:	ldr	x1, [sp, #160]
    1b14:	mov	x0, x1
    1b18:	lsl	x0, x0, #2
    1b1c:	add	x0, x0, x1
    1b20:	lsl	x0, x0, #3
    1b24:	add	x0, x2, x0
    1b28:	str	xzr, [x0, #224]
    1b2c:	ldr	x2, [sp, #40]
    1b30:	ldr	x1, [sp, #160]
    1b34:	mov	x0, x1
    1b38:	lsl	x0, x0, #2
    1b3c:	add	x0, x0, x1
    1b40:	lsl	x0, x0, #3
    1b44:	add	x0, x2, x0
    1b48:	ldr	x1, [sp, #40]
    1b4c:	str	x1, [x0, #232]
    1b50:	ldr	x2, [sp, #40]
    1b54:	ldr	x1, [sp, #160]
    1b58:	mov	x0, x1
    1b5c:	lsl	x0, x0, #2
    1b60:	add	x0, x0, x1
    1b64:	lsl	x0, x0, #3
    1b68:	add	x0, x2, x0
    1b6c:	strb	wzr, [x0, #241]
    1b70:	ldr	x2, [sp, #40]
    1b74:	ldr	x1, [sp, #160]
    1b78:	mov	x0, x1
    1b7c:	lsl	x0, x0, #2
    1b80:	add	x0, x0, x1
    1b84:	lsl	x0, x0, #3
    1b88:	add	x0, x2, x0
    1b8c:	strb	wzr, [x0, #242]
    1b90:	ldr	x0, [sp, #32]
    1b94:	add	x3, x0, #0x38
    1b98:	ldr	x1, [sp, #160]
    1b9c:	mov	x0, x1
    1ba0:	lsl	x0, x0, #2
    1ba4:	add	x0, x0, x1
    1ba8:	lsl	x0, x0, #3
    1bac:	add	x0, x0, #0xd0
    1bb0:	ldr	x1, [sp, #40]
    1bb4:	add	x0, x1, x0
    1bb8:	mov	w2, #0x1                   	// #1
    1bbc:	mov	x1, x0
    1bc0:	mov	x0, x3
    1bc4:	bl	1194 <htab_find_slot>
    1bc8:	str	x0, [sp, #64]
    1bcc:	str	xzr, [sp, #136]
    1bd0:	str	xzr, [sp, #128]
    1bd4:	ldr	x0, [sp, #64]
    1bd8:	ldr	x0, [x0]
    1bdc:	cmp	x0, #0x0
    1be0:	b.eq	1e90 <gomp_task_handle_depend+0x760>  // b.none
    1be4:	ldr	x0, [sp, #64]
    1be8:	ldr	x0, [x0]
    1bec:	ldr	x0, [x0, #24]
    1bf0:	ldr	x1, [sp, #40]
    1bf4:	cmp	x1, x0
    1bf8:	b.ne	1c24 <gomp_task_handle_depend+0x4f4>  // b.any
    1bfc:	ldr	x2, [sp, #40]
    1c00:	ldr	x1, [sp, #160]
    1c04:	mov	x0, x1
    1c08:	lsl	x0, x0, #2
    1c0c:	add	x0, x0, x1
    1c10:	lsl	x0, x0, #3
    1c14:	add	x0, x2, x0
    1c18:	mov	w1, #0x1                   	// #1
    1c1c:	strb	w1, [x0, #241]
    1c20:	b	1f80 <gomp_task_handle_depend+0x850>
    1c24:	ldr	x0, [sp, #64]
    1c28:	ldr	x0, [x0]
    1c2c:	str	x0, [sp, #152]
    1c30:	b	1e28 <gomp_task_handle_depend+0x6f8>
    1c34:	ldr	x0, [sp, #152]
    1c38:	ldrb	w0, [x0, #34]
    1c3c:	cmp	w0, #0x0
    1c40:	b.ne	1e38 <gomp_task_handle_depend+0x708>  // b.any
    1c44:	ldr	x0, [sp, #152]
    1c48:	str	x0, [sp, #128]
    1c4c:	ldr	x2, [sp, #40]
    1c50:	ldr	x1, [sp, #160]
    1c54:	mov	x0, x1
    1c58:	lsl	x0, x0, #2
    1c5c:	add	x0, x0, x1
    1c60:	lsl	x0, x0, #3
    1c64:	add	x0, x2, x0
    1c68:	ldrb	w0, [x0, #240]
    1c6c:	cmp	w0, #0x0
    1c70:	b.eq	1c84 <gomp_task_handle_depend+0x554>  // b.none
    1c74:	ldr	x0, [sp, #152]
    1c78:	ldrb	w0, [x0, #32]
    1c7c:	cmp	w0, #0x0
    1c80:	b.ne	1e10 <gomp_task_handle_depend+0x6e0>  // b.any
    1c84:	ldr	x0, [sp, #152]
    1c88:	ldrb	w0, [x0, #32]
    1c8c:	eor	w0, w0, #0x1
    1c90:	and	w0, w0, #0xff
    1c94:	cmp	w0, #0x0
    1c98:	b.eq	1ca4 <gomp_task_handle_depend+0x574>  // b.none
    1c9c:	ldr	x0, [sp, #152]
    1ca0:	str	x0, [sp, #136]
    1ca4:	ldr	x0, [sp, #152]
    1ca8:	ldr	x0, [x0, #24]
    1cac:	str	x0, [sp, #56]
    1cb0:	ldr	x0, [sp, #56]
    1cb4:	ldr	x0, [x0, #48]
    1cb8:	cmp	x0, #0x0
    1cbc:	b.ne	1d1c <gomp_task_handle_depend+0x5ec>  // b.any
    1cc0:	mov	x0, #0x40                  	// #64
    1cc4:	bl	0 <gomp_malloc>
    1cc8:	mov	x1, x0
    1ccc:	ldr	x0, [sp, #56]
    1cd0:	str	x1, [x0, #48]
    1cd4:	ldr	x0, [sp, #56]
    1cd8:	ldr	x0, [x0, #48]
    1cdc:	mov	x1, #0x1                   	// #1
    1ce0:	str	x1, [x0]
    1ce4:	ldr	x0, [sp, #56]
    1ce8:	ldr	x0, [x0, #48]
    1cec:	mov	x1, #0x6                   	// #6
    1cf0:	str	x1, [x0, #8]
    1cf4:	ldr	x0, [sp, #56]
    1cf8:	ldr	x0, [x0, #48]
    1cfc:	ldr	x1, [sp, #40]
    1d00:	str	x1, [x0, #16]
    1d04:	ldr	x0, [sp, #40]
    1d08:	ldr	x0, [x0, #80]
    1d0c:	add	x1, x0, #0x1
    1d10:	ldr	x0, [sp, #40]
    1d14:	str	x1, [x0, #80]
    1d18:	b	1e1c <gomp_task_handle_depend+0x6ec>
    1d1c:	ldr	x0, [sp, #56]
    1d20:	ldr	x0, [x0, #48]
    1d24:	ldr	x0, [x0]
    1d28:	cmp	x0, #0x0
    1d2c:	b.eq	1d5c <gomp_task_handle_depend+0x62c>  // b.none
    1d30:	ldr	x0, [sp, #56]
    1d34:	ldr	x0, [x0, #48]
    1d38:	ldr	x1, [sp, #56]
    1d3c:	ldr	x1, [x1, #48]
    1d40:	ldr	x1, [x1]
    1d44:	sub	x1, x1, #0x1
    1d48:	add	x1, x1, #0x2
    1d4c:	ldr	x0, [x0, x1, lsl #3]
    1d50:	ldr	x1, [sp, #40]
    1d54:	cmp	x1, x0
    1d58:	b.eq	1e18 <gomp_task_handle_depend+0x6e8>  // b.none
    1d5c:	ldr	x0, [sp, #56]
    1d60:	ldr	x0, [x0, #48]
    1d64:	ldr	x1, [x0]
    1d68:	ldr	x0, [sp, #56]
    1d6c:	ldr	x0, [x0, #48]
    1d70:	ldr	x0, [x0, #8]
    1d74:	cmp	x1, x0
    1d78:	b.ne	1dd0 <gomp_task_handle_depend+0x6a0>  // b.any
    1d7c:	ldr	x0, [sp, #56]
    1d80:	ldr	x0, [x0, #48]
    1d84:	ldr	x0, [x0, #8]
    1d88:	add	x1, x0, #0x1
    1d8c:	ldr	x0, [sp, #56]
    1d90:	ldr	x0, [x0, #48]
    1d94:	lsl	x1, x1, #1
    1d98:	str	x1, [x0, #8]
    1d9c:	ldr	x0, [sp, #56]
    1da0:	ldr	x2, [x0, #48]
    1da4:	ldr	x0, [sp, #56]
    1da8:	ldr	x0, [x0, #48]
    1dac:	ldr	x0, [x0, #8]
    1db0:	add	x0, x0, #0x2
    1db4:	lsl	x0, x0, #3
    1db8:	mov	x1, x0
    1dbc:	mov	x0, x2
    1dc0:	bl	0 <gomp_realloc>
    1dc4:	mov	x1, x0
    1dc8:	ldr	x0, [sp, #56]
    1dcc:	str	x1, [x0, #48]
    1dd0:	ldr	x0, [sp, #56]
    1dd4:	ldr	x2, [x0, #48]
    1dd8:	ldr	x0, [sp, #56]
    1ddc:	ldr	x1, [x0, #48]
    1de0:	ldr	x0, [x1]
    1de4:	add	x3, x0, #0x1
    1de8:	str	x3, [x1]
    1dec:	add	x0, x0, #0x2
    1df0:	ldr	x1, [sp, #40]
    1df4:	str	x1, [x2, x0, lsl #3]
    1df8:	ldr	x0, [sp, #40]
    1dfc:	ldr	x0, [x0, #80]
    1e00:	add	x1, x0, #0x1
    1e04:	ldr	x0, [sp, #40]
    1e08:	str	x1, [x0, #80]
    1e0c:	b	1e1c <gomp_task_handle_depend+0x6ec>
    1e10:	nop
    1e14:	b	1e1c <gomp_task_handle_depend+0x6ec>
    1e18:	nop
    1e1c:	ldr	x0, [sp, #152]
    1e20:	ldr	x0, [x0, #8]
    1e24:	str	x0, [sp, #152]
    1e28:	ldr	x0, [sp, #152]
    1e2c:	cmp	x0, #0x0
    1e30:	b.ne	1c34 <gomp_task_handle_depend+0x504>  // b.any
    1e34:	b	1e3c <gomp_task_handle_depend+0x70c>
    1e38:	nop
    1e3c:	ldr	x0, [sp, #64]
    1e40:	ldr	x2, [x0]
    1e44:	ldr	x3, [sp, #40]
    1e48:	ldr	x1, [sp, #160]
    1e4c:	mov	x0, x1
    1e50:	lsl	x0, x0, #2
    1e54:	add	x0, x0, x1
    1e58:	lsl	x0, x0, #3
    1e5c:	add	x0, x3, x0
    1e60:	str	x2, [x0, #216]
    1e64:	ldr	x0, [sp, #64]
    1e68:	ldr	x2, [x0]
    1e6c:	ldr	x1, [sp, #160]
    1e70:	mov	x0, x1
    1e74:	lsl	x0, x0, #2
    1e78:	add	x0, x0, x1
    1e7c:	lsl	x0, x0, #3
    1e80:	add	x0, x0, #0xd0
    1e84:	ldr	x1, [sp, #40]
    1e88:	add	x0, x1, x0
    1e8c:	str	x0, [x2, #16]
    1e90:	ldr	x1, [sp, #160]
    1e94:	mov	x0, x1
    1e98:	lsl	x0, x0, #2
    1e9c:	add	x0, x0, x1
    1ea0:	lsl	x0, x0, #3
    1ea4:	add	x0, x0, #0xd0
    1ea8:	ldr	x1, [sp, #40]
    1eac:	add	x1, x1, x0
    1eb0:	ldr	x0, [sp, #64]
    1eb4:	str	x1, [x0]
    1eb8:	ldr	x2, [sp, #40]
    1ebc:	ldr	x1, [sp, #160]
    1ec0:	mov	x0, x1
    1ec4:	lsl	x0, x0, #2
    1ec8:	add	x0, x0, x1
    1ecc:	lsl	x0, x0, #3
    1ed0:	add	x0, x2, x0
    1ed4:	ldrb	w0, [x0, #240]
    1ed8:	eor	w0, w0, #0x1
    1edc:	and	w0, w0, #0xff
    1ee0:	cmp	w0, #0x0
    1ee4:	b.eq	1f80 <gomp_task_handle_depend+0x850>  // b.none
    1ee8:	ldr	x0, [sp, #136]
    1eec:	cmp	x0, #0x0
    1ef0:	b.eq	1f80 <gomp_task_handle_depend+0x850>  // b.none
    1ef4:	ldr	x1, [sp, #136]
    1ef8:	ldr	x0, [sp, #128]
    1efc:	cmp	x1, x0
    1f00:	b.eq	1f74 <gomp_task_handle_depend+0x844>  // b.none
    1f04:	ldr	x0, [sp, #136]
    1f08:	ldr	x0, [x0, #8]
    1f0c:	ldr	x1, [sp, #136]
    1f10:	ldr	x1, [x1, #16]
    1f14:	str	x1, [x0, #16]
    1f18:	ldr	x0, [sp, #136]
    1f1c:	ldr	x0, [x0, #16]
    1f20:	ldr	x1, [sp, #136]
    1f24:	ldr	x1, [x1, #8]
    1f28:	str	x1, [x0, #8]
    1f2c:	ldr	x0, [sp, #128]
    1f30:	ldr	x1, [x0, #8]
    1f34:	ldr	x0, [sp, #136]
    1f38:	str	x1, [x0, #8]
    1f3c:	ldr	x0, [sp, #136]
    1f40:	ldr	x1, [sp, #128]
    1f44:	str	x1, [x0, #16]
    1f48:	ldr	x0, [sp, #128]
    1f4c:	ldr	x1, [sp, #136]
    1f50:	str	x1, [x0, #8]
    1f54:	ldr	x0, [sp, #136]
    1f58:	ldr	x0, [x0, #8]
    1f5c:	cmp	x0, #0x0
    1f60:	b.eq	1f74 <gomp_task_handle_depend+0x844>  // b.none
    1f64:	ldr	x0, [sp, #136]
    1f68:	ldr	x0, [x0, #8]
    1f6c:	ldr	x1, [sp, #136]
    1f70:	str	x1, [x0, #16]
    1f74:	ldr	x0, [sp, #136]
    1f78:	mov	w1, #0x1                   	// #1
    1f7c:	strb	w1, [x0, #34]
    1f80:	ldr	x0, [sp, #160]
    1f84:	add	x0, x0, #0x1
    1f88:	str	x0, [sp, #160]
    1f8c:	ldr	x1, [sp, #160]
    1f90:	ldr	x0, [sp, #168]
    1f94:	cmp	x1, x0
    1f98:	b.cc	1aec <gomp_task_handle_depend+0x3bc>  // b.lo, b.ul, b.last
    1f9c:	nop
    1fa0:	nop
    1fa4:	ldp	x29, x30, [sp], #176
    1fa8:	ret

0000000000001fac <GOMP_task>:
    1fac:	stp	x29, x30, [sp, #-464]!
    1fb0:	mov	x29, sp
    1fb4:	stp	x19, x20, [sp, #16]
    1fb8:	stp	x21, x22, [sp, #32]
    1fbc:	stp	x23, x24, [sp, #48]
    1fc0:	stp	x25, x26, [sp, #64]
    1fc4:	str	x27, [sp, #80]
    1fc8:	str	x0, [x29, #152]
    1fcc:	str	x1, [x29, #144]
    1fd0:	str	x2, [x29, #136]
    1fd4:	str	x3, [x29, #128]
    1fd8:	str	x4, [x29, #120]
    1fdc:	strb	w5, [x29, #119]
    1fe0:	str	w6, [x29, #112]
    1fe4:	str	x7, [x29, #104]
    1fe8:	bl	a08 <gomp_thread>
    1fec:	str	x0, [x29, #448]
    1ff0:	ldr	x0, [x29, #448]
    1ff4:	ldr	x0, [x0, #16]
    1ff8:	str	x0, [x29, #440]
    1ffc:	adrp	x0, 0 <gomp_cancel_var>
    2000:	add	x0, x0, #0x0
    2004:	ldrb	w0, [x0]
    2008:	and	x0, x0, #0xff
    200c:	cmp	x0, #0x0
    2010:	b.eq	20b0 <GOMP_task+0x104>  // b.none
    2014:	ldr	x0, [x29, #440]
    2018:	cmp	x0, #0x0
    201c:	b.eq	20b0 <GOMP_task+0x104>  // b.none
    2020:	ldr	x0, [x29, #440]
    2024:	add	x0, x0, #0x80
    2028:	bl	9a4 <gomp_team_barrier_cancelled>
    202c:	and	w0, w0, #0xff
    2030:	cmp	w0, #0x0
    2034:	b.ne	2780 <GOMP_task+0x7d4>  // b.any
    2038:	ldr	x0, [x29, #448]
    203c:	ldr	x0, [x0, #80]
    2040:	ldr	x0, [x0, #40]
    2044:	cmp	x0, #0x0
    2048:	b.eq	20b0 <GOMP_task+0x104>  // b.none
    204c:	ldr	x0, [x29, #448]
    2050:	ldr	x0, [x0, #80]
    2054:	ldr	x0, [x0, #40]
    2058:	ldrb	w0, [x0, #49]
    205c:	cmp	w0, #0x0
    2060:	b.ne	2788 <GOMP_task+0x7dc>  // b.any
    2064:	ldr	x0, [x29, #448]
    2068:	ldr	x0, [x0, #80]
    206c:	ldr	x0, [x0, #40]
    2070:	ldrb	w0, [x0, #50]
    2074:	cmp	w0, #0x0
    2078:	b.eq	20b0 <GOMP_task+0x104>  // b.none
    207c:	ldr	x0, [x29, #448]
    2080:	ldr	x0, [x0, #80]
    2084:	ldr	x0, [x0, #40]
    2088:	ldr	x0, [x0]
    208c:	cmp	x0, #0x0
    2090:	b.eq	20b0 <GOMP_task+0x104>  // b.none
    2094:	ldr	x0, [x29, #448]
    2098:	ldr	x0, [x0, #80]
    209c:	ldr	x0, [x0, #40]
    20a0:	ldr	x0, [x0]
    20a4:	ldrb	w0, [x0, #49]
    20a8:	cmp	w0, #0x0
    20ac:	b.ne	2790 <GOMP_task+0x7e4>  // b.any
    20b0:	ldr	w0, [x29, #112]
    20b4:	and	w0, w0, #0x10
    20b8:	cmp	w0, #0x0
    20bc:	b.ne	20c8 <GOMP_task+0x11c>  // b.any
    20c0:	str	wzr, [x29, #464]
    20c4:	b	20f0 <GOMP_task+0x144>
    20c8:	adrp	x0, 0 <gomp_max_task_priority_var>
    20cc:	add	x0, x0, #0x0
    20d0:	ldr	w0, [x0]
    20d4:	ldr	w1, [x29, #464]
    20d8:	cmp	w1, w0
    20dc:	b.le	20f0 <GOMP_task+0x144>
    20e0:	adrp	x0, 0 <gomp_max_task_priority_var>
    20e4:	add	x0, x0, #0x0
    20e8:	ldr	w0, [x0]
    20ec:	str	w0, [x29, #464]
    20f0:	ldrb	w0, [x29, #119]
    20f4:	eor	w0, w0, #0x1
    20f8:	and	w0, w0, #0xff
    20fc:	cmp	w0, #0x0
    2100:	b.ne	2150 <GOMP_task+0x1a4>  // b.any
    2104:	ldr	x0, [x29, #440]
    2108:	cmp	x0, #0x0
    210c:	b.eq	2150 <GOMP_task+0x1a4>  // b.none
    2110:	ldr	x0, [x29, #448]
    2114:	ldr	x0, [x0, #80]
    2118:	cmp	x0, #0x0
    211c:	b.eq	2134 <GOMP_task+0x188>  // b.none
    2120:	ldr	x0, [x29, #448]
    2124:	ldr	x0, [x0, #80]
    2128:	ldrb	w0, [x0, #205]
    212c:	cmp	w0, #0x0
    2130:	b.ne	2150 <GOMP_task+0x1a4>  // b.any
    2134:	ldr	x0, [x29, #440]
    2138:	ldr	w1, [x0, #1320]
    213c:	ldr	x0, [x29, #440]
    2140:	ldr	w0, [x0]
    2144:	lsl	w0, w0, #6
    2148:	cmp	w1, w0
    214c:	b.ls	237c <GOMP_task+0x3d0>  // b.plast
    2150:	ldr	w0, [x29, #112]
    2154:	and	w0, w0, #0x8
    2158:	cmp	w0, #0x0
    215c:	b.eq	218c <GOMP_task+0x1e0>  // b.none
    2160:	ldr	x0, [x29, #448]
    2164:	ldr	x0, [x0, #80]
    2168:	cmp	x0, #0x0
    216c:	b.eq	218c <GOMP_task+0x1e0>  // b.none
    2170:	ldr	x0, [x29, #448]
    2174:	ldr	x0, [x0, #80]
    2178:	ldr	x0, [x0, #56]
    217c:	cmp	x0, #0x0
    2180:	b.eq	218c <GOMP_task+0x1e0>  // b.none
    2184:	ldr	x0, [x29, #104]
    2188:	bl	6a30 <gomp_task_maybe_wait_for_dependencies>
    218c:	ldr	x0, [x29, #448]
    2190:	ldr	x19, [x0, #80]
    2194:	mov	w0, #0x0                   	// #0
    2198:	bl	a1c <gomp_icv>
    219c:	mov	x1, x0
    21a0:	add	x0, x29, #0xa8
    21a4:	mov	x2, x1
    21a8:	mov	x1, x19
    21ac:	bl	151c <gomp_init_task>
    21b0:	mov	w0, #0x1                   	// #1
    21b4:	str	w0, [x29, #368]
    21b8:	ldr	x0, [x29, #448]
    21bc:	ldr	x0, [x0, #80]
    21c0:	cmp	x0, #0x0
    21c4:	b.eq	21dc <GOMP_task+0x230>  // b.none
    21c8:	ldr	x0, [x29, #448]
    21cc:	ldr	x0, [x0, #80]
    21d0:	ldrb	w0, [x0, #205]
    21d4:	cmp	w0, #0x0
    21d8:	b.ne	21ec <GOMP_task+0x240>  // b.any
    21dc:	ldr	w0, [x29, #112]
    21e0:	and	w0, w0, #0x2
    21e4:	cmp	w0, #0x0
    21e8:	b.eq	21f4 <GOMP_task+0x248>  // b.none
    21ec:	mov	w0, #0x1                   	// #1
    21f0:	b	21f8 <GOMP_task+0x24c>
    21f4:	mov	w0, #0x0                   	// #0
    21f8:	and	w0, w0, #0x1
    21fc:	and	w0, w0, #0xff
    2200:	strb	w0, [x29, #373]
    2204:	ldr	w0, [x29, #464]
    2208:	str	w0, [x29, #256]
    220c:	ldr	x0, [x29, #448]
    2210:	ldr	x0, [x0, #80]
    2214:	cmp	x0, #0x0
    2218:	b.eq	223c <GOMP_task+0x290>  // b.none
    221c:	ldr	x0, [x29, #448]
    2220:	ldr	x0, [x0, #80]
    2224:	ldrb	w0, [x0, #204]
    2228:	strb	w0, [x29, #372]
    222c:	ldr	x0, [x29, #448]
    2230:	ldr	x0, [x0, #80]
    2234:	ldr	x0, [x0, #40]
    2238:	str	x0, [x29, #208]
    223c:	ldr	x0, [x29, #448]
    2240:	add	x1, x29, #0xa8
    2244:	str	x1, [x0, #80]
    2248:	ldr	x0, [x29, #136]
    224c:	cmp	x0, #0x0
    2250:	cset	w0, ne  // ne = any
    2254:	and	w0, w0, #0xff
    2258:	and	x0, x0, #0xff
    225c:	cmp	x0, #0x0
    2260:	b.eq	2320 <GOMP_task+0x374>  // b.none
    2264:	mov	x0, sp
    2268:	mov	x19, x0
    226c:	ldr	x1, [x29, #128]
    2270:	ldr	x0, [x29, #120]
    2274:	add	x0, x1, x0
    2278:	sub	x0, x0, #0x1
    227c:	sub	x1, x0, #0x1
    2280:	str	x1, [x29, #392]
    2284:	mov	x1, x0
    2288:	mov	x26, x1
    228c:	mov	x27, #0x0                   	// #0
    2290:	lsr	x1, x26, #61
    2294:	lsl	x23, x27, #3
    2298:	orr	x23, x1, x23
    229c:	lsl	x22, x26, #3
    22a0:	mov	x1, x0
    22a4:	mov	x24, x1
    22a8:	mov	x25, #0x0                   	// #0
    22ac:	lsr	x1, x24, #61
    22b0:	lsl	x21, x25, #3
    22b4:	orr	x21, x1, x21
    22b8:	lsl	x20, x24, #3
    22bc:	add	x0, x0, #0xf
    22c0:	lsr	x0, x0, #4
    22c4:	lsl	x0, x0, #4
    22c8:	sub	sp, sp, x0
    22cc:	mov	x0, sp
    22d0:	add	x0, x0, #0x0
    22d4:	str	x0, [x29, #384]
    22d8:	ldr	x0, [x29, #384]
    22dc:	mov	x1, x0
    22e0:	ldr	x0, [x29, #120]
    22e4:	add	x0, x1, x0
    22e8:	sub	x0, x0, #0x1
    22ec:	ldr	x1, [x29, #120]
    22f0:	neg	x1, x1
    22f4:	and	x0, x0, x1
    22f8:	str	x0, [x29, #376]
    22fc:	ldr	x2, [x29, #136]
    2300:	ldr	x1, [x29, #144]
    2304:	ldr	x0, [x29, #376]
    2308:	blr	x2
    230c:	ldr	x1, [x29, #152]
    2310:	ldr	x0, [x29, #376]
    2314:	blr	x1
    2318:	mov	sp, x19
    231c:	b	232c <GOMP_task+0x380>
    2320:	ldr	x1, [x29, #152]
    2324:	ldr	x0, [x29, #144]
    2328:	blr	x1
    232c:	add	x0, x29, #0xa8
    2330:	add	x0, x0, #0x8
    2334:	mov	w1, #0x0                   	// #0
    2338:	bl	60 <priority_queue_empty_p>
    233c:	and	w0, w0, #0xff
    2340:	eor	w0, w0, #0x1
    2344:	and	w0, w0, #0xff
    2348:	cmp	w0, #0x0
    234c:	b.eq	2374 <GOMP_task+0x3c8>  // b.none
    2350:	ldr	x0, [x29, #440]
    2354:	add	x0, x0, #0x500
    2358:	bl	820 <gomp_mutex_lock>
    235c:	add	x0, x29, #0xa8
    2360:	add	x0, x0, #0x8
    2364:	bl	16d4 <gomp_clear_parent>
    2368:	ldr	x0, [x29, #440]
    236c:	add	x0, x0, #0x500
    2370:	bl	894 <gomp_mutex_unlock>
    2374:	bl	15c8 <gomp_end_task>
    2378:	b	2794 <GOMP_task+0x7e8>
    237c:	ldr	x0, [x29, #448]
    2380:	ldr	x0, [x0, #80]
    2384:	str	x0, [x29, #432]
    2388:	ldr	x0, [x29, #432]
    238c:	ldr	x0, [x0, #40]
    2390:	str	x0, [x29, #424]
    2394:	str	xzr, [x29, #456]
    2398:	ldr	w0, [x29, #112]
    239c:	and	w0, w0, #0x8
    23a0:	cmp	w0, #0x0
    23a4:	b.eq	23fc <GOMP_task+0x450>  // b.none
    23a8:	ldr	x0, [x29, #104]
    23ac:	ldr	x0, [x0]
    23b0:	cmp	x0, #0x0
    23b4:	b.eq	23d8 <GOMP_task+0x42c>  // b.none
    23b8:	ldr	x0, [x29, #104]
    23bc:	ldr	x0, [x0]
    23c0:	mov	x1, x0
    23c4:	mov	x0, x1
    23c8:	lsl	x0, x0, #2
    23cc:	add	x0, x0, x1
    23d0:	lsl	x0, x0, #3
    23d4:	b	23f8 <GOMP_task+0x44c>
    23d8:	ldr	x0, [x29, #104]
    23dc:	add	x0, x0, #0x8
    23e0:	ldr	x0, [x0]
    23e4:	mov	x1, x0
    23e8:	mov	x0, x1
    23ec:	lsl	x0, x0, #2
    23f0:	add	x0, x0, x1
    23f4:	lsl	x0, x0, #3
    23f8:	str	x0, [x29, #456]
    23fc:	ldr	x1, [x29, #128]
    2400:	ldr	x0, [x29, #456]
    2404:	add	x1, x1, x0
    2408:	ldr	x0, [x29, #120]
    240c:	add	x0, x1, x0
    2410:	add	x0, x0, #0xcf
    2414:	bl	0 <gomp_malloc>
    2418:	str	x0, [x29, #416]
    241c:	ldr	x1, [x29, #416]
    2420:	ldr	x0, [x29, #456]
    2424:	add	x1, x1, x0
    2428:	ldr	x0, [x29, #120]
    242c:	add	x0, x1, x0
    2430:	add	x0, x0, #0xcf
    2434:	ldr	x1, [x29, #120]
    2438:	neg	x1, x1
    243c:	and	x0, x0, x1
    2440:	str	x0, [x29, #408]
    2444:	mov	w0, #0x0                   	// #0
    2448:	bl	a1c <gomp_icv>
    244c:	mov	x2, x0
    2450:	ldr	x1, [x29, #432]
    2454:	ldr	x0, [x29, #416]
    2458:	bl	151c <gomp_init_task>
    245c:	ldr	x0, [x29, #416]
    2460:	ldr	w1, [x29, #464]
    2464:	str	w1, [x0, #88]
    2468:	ldr	x0, [x29, #416]
    246c:	mov	w1, #0x1                   	// #1
    2470:	str	w1, [x0, #200]
    2474:	ldr	x0, [x29, #432]
    2478:	ldrb	w1, [x0, #204]
    247c:	ldr	x0, [x29, #416]
    2480:	strb	w1, [x0, #204]
    2484:	ldr	x0, [x29, #416]
    2488:	ldr	x1, [x29, #424]
    248c:	str	x1, [x0, #40]
    2490:	ldr	x0, [x29, #448]
    2494:	ldr	x1, [x29, #416]
    2498:	str	x1, [x0, #80]
    249c:	ldr	x0, [x29, #136]
    24a0:	cmp	x0, #0x0
    24a4:	b.eq	24c8 <GOMP_task+0x51c>  // b.none
    24a8:	ldr	x2, [x29, #136]
    24ac:	ldr	x1, [x29, #144]
    24b0:	ldr	x0, [x29, #408]
    24b4:	blr	x2
    24b8:	ldr	x0, [x29, #416]
    24bc:	mov	w1, #0x1                   	// #1
    24c0:	strb	w1, [x0, #206]
    24c4:	b	24dc <GOMP_task+0x530>
    24c8:	ldr	x0, [x29, #128]
    24cc:	mov	x2, x0
    24d0:	ldr	x1, [x29, #144]
    24d4:	ldr	x0, [x29, #408]
    24d8:	bl	0 <memcpy>
    24dc:	ldr	x0, [x29, #448]
    24e0:	ldr	x1, [x29, #432]
    24e4:	str	x1, [x0, #80]
    24e8:	ldr	x0, [x29, #416]
    24ec:	mov	w1, #0x2                   	// #2
    24f0:	str	w1, [x0, #200]
    24f4:	ldr	x0, [x29, #416]
    24f8:	ldr	x1, [x29, #152]
    24fc:	str	x1, [x0, #184]
    2500:	ldr	x0, [x29, #416]
    2504:	ldr	x1, [x29, #408]
    2508:	str	x1, [x0, #192]
    250c:	ldr	w0, [x29, #112]
    2510:	lsr	w0, w0, #1
    2514:	and	w0, w0, #0x1
    2518:	cmp	w0, #0x0
    251c:	cset	w0, ne  // ne = any
    2520:	and	w1, w0, #0xff
    2524:	ldr	x0, [x29, #416]
    2528:	strb	w1, [x0, #205]
    252c:	ldr	x0, [x29, #440]
    2530:	add	x0, x0, #0x500
    2534:	bl	820 <gomp_mutex_lock>
    2538:	adrp	x0, 0 <gomp_cancel_var>
    253c:	add	x0, x0, #0x0
    2540:	ldrb	w0, [x0]
    2544:	and	x0, x0, #0xff
    2548:	cmp	x0, #0x0
    254c:	b.eq	2604 <GOMP_task+0x658>  // b.none
    2550:	ldr	x0, [x29, #416]
    2554:	ldrb	w0, [x0, #206]
    2558:	eor	w0, w0, #0x1
    255c:	and	w0, w0, #0xff
    2560:	cmp	w0, #0x0
    2564:	b.eq	2604 <GOMP_task+0x658>  // b.none
    2568:	ldr	x0, [x29, #440]
    256c:	add	x0, x0, #0x80
    2570:	bl	9a4 <gomp_team_barrier_cancelled>
    2574:	and	w0, w0, #0xff
    2578:	cmp	w0, #0x0
    257c:	b.eq	25b4 <GOMP_task+0x608>  // b.none
    2580:	nop
    2584:	b	2594 <GOMP_task+0x5e8>
    2588:	nop
    258c:	b	2594 <GOMP_task+0x5e8>
    2590:	nop
    2594:	ldr	x0, [x29, #440]
    2598:	add	x0, x0, #0x500
    259c:	bl	894 <gomp_mutex_unlock>
    25a0:	ldr	x0, [x29, #416]
    25a4:	bl	a70 <gomp_finish_task>
    25a8:	ldr	x0, [x29, #416]
    25ac:	bl	0 <free>
    25b0:	b	2794 <GOMP_task+0x7e8>
    25b4:	ldr	x0, [x29, #424]
    25b8:	cmp	x0, #0x0
    25bc:	b.eq	2604 <GOMP_task+0x658>  // b.none
    25c0:	ldr	x0, [x29, #424]
    25c4:	ldrb	w0, [x0, #49]
    25c8:	cmp	w0, #0x0
    25cc:	b.ne	2588 <GOMP_task+0x5dc>  // b.any
    25d0:	ldr	x0, [x29, #424]
    25d4:	ldrb	w0, [x0, #50]
    25d8:	cmp	w0, #0x0
    25dc:	b.eq	2604 <GOMP_task+0x658>  // b.none
    25e0:	ldr	x0, [x29, #424]
    25e4:	ldr	x0, [x0]
    25e8:	cmp	x0, #0x0
    25ec:	b.eq	2604 <GOMP_task+0x658>  // b.none
    25f0:	ldr	x0, [x29, #424]
    25f4:	ldr	x0, [x0]
    25f8:	ldrb	w0, [x0, #49]
    25fc:	cmp	w0, #0x0
    2600:	b.ne	2590 <GOMP_task+0x5e4>  // b.any
    2604:	ldr	x0, [x29, #424]
    2608:	cmp	x0, #0x0
    260c:	b.eq	2624 <GOMP_task+0x678>  // b.none
    2610:	ldr	x0, [x29, #424]
    2614:	ldr	x0, [x0, #56]
    2618:	add	x1, x0, #0x1
    261c:	ldr	x0, [x29, #424]
    2620:	str	x1, [x0, #56]
    2624:	ldr	x0, [x29, #456]
    2628:	cmp	x0, #0x0
    262c:	b.eq	2660 <GOMP_task+0x6b4>  // b.none
    2630:	ldr	x2, [x29, #104]
    2634:	ldr	x1, [x29, #432]
    2638:	ldr	x0, [x29, #416]
    263c:	bl	1730 <gomp_task_handle_depend>
    2640:	ldr	x0, [x29, #416]
    2644:	ldr	x0, [x0, #80]
    2648:	cmp	x0, #0x0
    264c:	b.eq	2660 <GOMP_task+0x6b4>  // b.none
    2650:	ldr	x0, [x29, #440]
    2654:	add	x0, x0, #0x500
    2658:	bl	894 <gomp_mutex_unlock>
    265c:	b	2794 <GOMP_task+0x7e8>
    2660:	ldr	x0, [x29, #432]
    2664:	add	x1, x0, #0x8
    2668:	ldr	x0, [x29, #416]
    266c:	ldrb	w0, [x0, #207]
    2670:	mov	w6, w0
    2674:	mov	w5, #0x0                   	// #0
    2678:	mov	w4, #0x0                   	// #0
    267c:	ldr	w3, [x29, #464]
    2680:	ldr	x2, [x29, #416]
    2684:	mov	w0, #0x1                   	// #1
    2688:	bl	3fc <priority_queue_insert>
    268c:	ldr	x0, [x29, #424]
    2690:	cmp	x0, #0x0
    2694:	b.eq	26c4 <GOMP_task+0x718>  // b.none
    2698:	ldr	x0, [x29, #424]
    269c:	add	x1, x0, #0x8
    26a0:	ldr	x0, [x29, #416]
    26a4:	ldrb	w0, [x0, #207]
    26a8:	mov	w6, w0
    26ac:	mov	w5, #0x0                   	// #0
    26b0:	mov	w4, #0x0                   	// #0
    26b4:	ldr	w3, [x29, #464]
    26b8:	ldr	x2, [x29, #416]
    26bc:	mov	w0, #0x2                   	// #2
    26c0:	bl	3fc <priority_queue_insert>
    26c4:	ldr	x0, [x29, #440]
    26c8:	add	x1, x0, #0x508
    26cc:	ldr	x0, [x29, #416]
    26d0:	ldrb	w0, [x0, #207]
    26d4:	mov	w6, w0
    26d8:	mov	w5, #0x0                   	// #0
    26dc:	mov	w4, #0x1                   	// #1
    26e0:	ldr	w3, [x29, #464]
    26e4:	ldr	x2, [x29, #416]
    26e8:	mov	w0, #0x0                   	// #0
    26ec:	bl	3fc <priority_queue_insert>
    26f0:	ldr	x0, [x29, #440]
    26f4:	ldr	w0, [x0, #1320]
    26f8:	add	w1, w0, #0x1
    26fc:	ldr	x0, [x29, #440]
    2700:	str	w1, [x0, #1320]
    2704:	ldr	x0, [x29, #440]
    2708:	ldr	w0, [x0, #1324]
    270c:	add	w1, w0, #0x1
    2710:	ldr	x0, [x29, #440]
    2714:	str	w1, [x0, #1324]
    2718:	ldr	x0, [x29, #440]
    271c:	add	x0, x0, #0x80
    2720:	bl	904 <gomp_team_barrier_set_task_pending>
    2724:	ldr	x0, [x29, #440]
    2728:	ldr	w0, [x0, #1328]
    272c:	ldr	x1, [x29, #432]
    2730:	ldrb	w1, [x1, #204]
    2734:	eor	w1, w1, #0x1
    2738:	and	w1, w1, #0xff
    273c:	add	w1, w0, w1
    2740:	ldr	x0, [x29, #440]
    2744:	ldr	w0, [x0]
    2748:	cmp	w1, w0
    274c:	cset	w0, cc  // cc = lo, ul, last
    2750:	strb	w0, [x29, #407]
    2754:	ldr	x0, [x29, #440]
    2758:	add	x0, x0, #0x500
    275c:	bl	894 <gomp_mutex_unlock>
    2760:	ldrb	w0, [x29, #407]
    2764:	cmp	w0, #0x0
    2768:	b.eq	2794 <GOMP_task+0x7e8>  // b.none
    276c:	ldr	x0, [x29, #440]
    2770:	add	x0, x0, #0x80
    2774:	mov	w1, #0x1                   	// #1
    2778:	bl	0 <gomp_team_barrier_wake>
    277c:	b	2794 <GOMP_task+0x7e8>
    2780:	nop
    2784:	b	2794 <GOMP_task+0x7e8>
    2788:	nop
    278c:	b	2794 <GOMP_task+0x7e8>
    2790:	nop
    2794:	mov	sp, x29
    2798:	ldp	x19, x20, [sp, #16]
    279c:	ldp	x21, x22, [sp, #32]
    27a0:	ldp	x23, x24, [sp, #48]
    27a4:	ldp	x25, x26, [sp, #64]
    27a8:	ldr	x27, [sp, #80]
    27ac:	ldp	x29, x30, [sp], #464
    27b0:	ret

00000000000027b4 <GOMP_taskloop>:
    27b4:	sub	sp, sp, #0x2e0
    27b8:	stp	x29, x30, [sp]
    27bc:	mov	x29, sp
    27c0:	stp	x19, x20, [sp, #16]
    27c4:	stp	x21, x22, [sp, #32]
    27c8:	stp	x23, x24, [sp, #48]
    27cc:	stp	x25, x26, [sp, #64]
    27d0:	str	x27, [sp, #80]
    27d4:	str	x0, [x29, #280]
    27d8:	str	x1, [x29, #272]
    27dc:	str	x2, [x29, #264]
    27e0:	str	x3, [x29, #256]
    27e4:	str	x4, [x29, #248]
    27e8:	str	w5, [x29, #244]
    27ec:	str	x6, [x29, #232]
    27f0:	str	w7, [x29, #240]
    27f4:	bl	a08 <gomp_thread>
    27f8:	str	x0, [x29, #672]
    27fc:	ldr	x0, [x29, #672]
    2800:	ldr	x0, [x0, #16]
    2804:	str	x0, [x29, #664]
    2808:	ldr	x0, [x29, #664]
    280c:	cmp	x0, #0x0
    2810:	b.eq	282c <GOMP_taskloop+0x78>  // b.none
    2814:	ldr	x0, [x29, #664]
    2818:	add	x0, x0, #0x80
    281c:	bl	9a4 <gomp_team_barrier_cancelled>
    2820:	and	w0, w0, #0xff
    2824:	cmp	w0, #0x0
    2828:	b.ne	37d4 <GOMP_taskloop+0x1020>  // b.any
    282c:	ldr	x0, [x29, #752]
    2830:	str	x0, [x29, #720]
    2834:	ldr	x0, [x29, #752]
    2838:	cmp	x0, #0x0
    283c:	b.le	2860 <GOMP_taskloop+0xac>
    2840:	ldr	x1, [x29, #736]
    2844:	ldr	x0, [x29, #744]
    2848:	cmp	x1, x0
    284c:	b.ge	37dc <GOMP_taskloop+0x1028>  // b.tcont
    2850:	ldr	x0, [x29, #720]
    2854:	sub	x0, x0, #0x1
    2858:	str	x0, [x29, #720]
    285c:	b	287c <GOMP_taskloop+0xc8>
    2860:	ldr	x1, [x29, #736]
    2864:	ldr	x0, [x29, #744]
    2868:	cmp	x1, x0
    286c:	b.le	37e4 <GOMP_taskloop+0x1030>
    2870:	ldr	x0, [x29, #720]
    2874:	add	x0, x0, #0x1
    2878:	str	x0, [x29, #720]
    287c:	ldr	x1, [x29, #744]
    2880:	ldr	x0, [x29, #736]
    2884:	sub	x1, x1, x0
    2888:	ldr	x0, [x29, #720]
    288c:	add	x1, x1, x0
    2890:	ldr	x0, [x29, #752]
    2894:	sdiv	x0, x1, x0
    2898:	str	x0, [x29, #656]
    289c:	ldr	x0, [x29, #752]
    28a0:	str	x0, [x29, #728]
    28a4:	ldr	x0, [x29, #656]
    28a8:	str	x0, [x29, #712]
    28ac:	ldr	w0, [x29, #244]
    28b0:	and	w0, w0, #0x200
    28b4:	cmp	w0, #0x0
    28b8:	b.eq	29cc <GOMP_taskloop+0x218>  // b.none
    28bc:	ldr	x0, [x29, #232]
    28c0:	str	x0, [x29, #632]
    28c4:	ldr	x1, [x29, #656]
    28c8:	ldr	x0, [x29, #632]
    28cc:	udiv	x0, x1, x0
    28d0:	str	x0, [x29, #232]
    28d4:	ldr	x0, [x29, #232]
    28d8:	cmp	x0, #0x1
    28dc:	b.hi	28fc <GOMP_taskloop+0x148>  // b.pmore
    28e0:	mov	x0, #0x1                   	// #1
    28e4:	str	x0, [x29, #232]
    28e8:	ldr	x1, [x29, #744]
    28ec:	ldr	x0, [x29, #736]
    28f0:	sub	x0, x1, x0
    28f4:	str	x0, [x29, #728]
    28f8:	b	2a7c <GOMP_taskloop+0x2c8>
    28fc:	ldr	x1, [x29, #232]
    2900:	ldr	x0, [x29, #632]
    2904:	cmp	x1, x0
    2908:	b.cc	2964 <GOMP_taskloop+0x1b0>  // b.lo, b.ul, b.last
    290c:	ldr	x1, [x29, #232]
    2910:	ldr	x0, [x29, #632]
    2914:	mul	x0, x1, x0
    2918:	str	x0, [x29, #608]
    291c:	ldr	x0, [x29, #632]
    2920:	ldr	x1, [x29, #752]
    2924:	mul	x0, x1, x0
    2928:	str	x0, [x29, #728]
    292c:	ldr	x1, [x29, #608]
    2930:	ldr	x0, [x29, #656]
    2934:	cmp	x1, x0
    2938:	b.eq	2a7c <GOMP_taskloop+0x2c8>  // b.none
    293c:	ldr	x1, [x29, #728]
    2940:	ldr	x0, [x29, #752]
    2944:	add	x0, x1, x0
    2948:	str	x0, [x29, #728]
    294c:	ldr	x1, [x29, #656]
    2950:	ldr	x0, [x29, #608]
    2954:	sub	x0, x1, x0
    2958:	sub	x0, x0, #0x1
    295c:	str	x0, [x29, #712]
    2960:	b	2a7c <GOMP_taskloop+0x2c8>
    2964:	ldr	x1, [x29, #656]
    2968:	ldr	x0, [x29, #232]
    296c:	udiv	x0, x1, x0
    2970:	str	x0, [x29, #624]
    2974:	ldr	x0, [x29, #656]
    2978:	ldr	x1, [x29, #232]
    297c:	udiv	x2, x0, x1
    2980:	ldr	x1, [x29, #232]
    2984:	mul	x1, x2, x1
    2988:	sub	x0, x0, x1
    298c:	str	x0, [x29, #616]
    2990:	ldr	x0, [x29, #624]
    2994:	ldr	x1, [x29, #752]
    2998:	mul	x0, x1, x0
    299c:	str	x0, [x29, #728]
    29a0:	ldr	x0, [x29, #616]
    29a4:	cmp	x0, #0x0
    29a8:	b.eq	2a7c <GOMP_taskloop+0x2c8>  // b.none
    29ac:	ldr	x1, [x29, #728]
    29b0:	ldr	x0, [x29, #752]
    29b4:	add	x0, x1, x0
    29b8:	str	x0, [x29, #728]
    29bc:	ldr	x0, [x29, #616]
    29c0:	sub	x0, x0, #0x1
    29c4:	str	x0, [x29, #712]
    29c8:	b	2a7c <GOMP_taskloop+0x2c8>
    29cc:	ldr	x0, [x29, #232]
    29d0:	cmp	x0, #0x0
    29d4:	b.ne	29fc <GOMP_taskloop+0x248>  // b.any
    29d8:	ldr	x0, [x29, #664]
    29dc:	cmp	x0, #0x0
    29e0:	b.eq	29f4 <GOMP_taskloop+0x240>  // b.none
    29e4:	ldr	x0, [x29, #664]
    29e8:	ldr	w0, [x0]
    29ec:	mov	w0, w0
    29f0:	b	29f8 <GOMP_taskloop+0x244>
    29f4:	mov	x0, #0x1                   	// #1
    29f8:	str	x0, [x29, #232]
    29fc:	ldr	x1, [x29, #232]
    2a00:	ldr	x0, [x29, #656]
    2a04:	cmp	x1, x0
    2a08:	b.cc	2a18 <GOMP_taskloop+0x264>  // b.lo, b.ul, b.last
    2a0c:	ldr	x0, [x29, #656]
    2a10:	str	x0, [x29, #232]
    2a14:	b	2a7c <GOMP_taskloop+0x2c8>
    2a18:	ldr	x1, [x29, #656]
    2a1c:	ldr	x0, [x29, #232]
    2a20:	udiv	x0, x1, x0
    2a24:	str	x0, [x29, #648]
    2a28:	ldr	x0, [x29, #656]
    2a2c:	ldr	x1, [x29, #232]
    2a30:	udiv	x2, x0, x1
    2a34:	ldr	x1, [x29, #232]
    2a38:	mul	x1, x2, x1
    2a3c:	sub	x0, x0, x1
    2a40:	str	x0, [x29, #640]
    2a44:	ldr	x0, [x29, #648]
    2a48:	ldr	x1, [x29, #752]
    2a4c:	mul	x0, x1, x0
    2a50:	str	x0, [x29, #728]
    2a54:	ldr	x0, [x29, #640]
    2a58:	cmp	x0, #0x0
    2a5c:	b.eq	2a7c <GOMP_taskloop+0x2c8>  // b.none
    2a60:	ldr	x1, [x29, #728]
    2a64:	ldr	x0, [x29, #752]
    2a68:	add	x0, x1, x0
    2a6c:	str	x0, [x29, #728]
    2a70:	ldr	x0, [x29, #640]
    2a74:	sub	x0, x0, #0x1
    2a78:	str	x0, [x29, #712]
    2a7c:	ldr	w0, [x29, #244]
    2a80:	and	w0, w0, #0x800
    2a84:	cmp	w0, #0x0
    2a88:	b.eq	2b30 <GOMP_taskloop+0x37c>  // b.none
    2a8c:	adrp	x0, 0 <gomp_cancel_var>
    2a90:	add	x0, x0, #0x0
    2a94:	ldrb	w0, [x0]
    2a98:	and	x0, x0, #0xff
    2a9c:	cmp	x0, #0x0
    2aa0:	b.eq	2b58 <GOMP_taskloop+0x3a4>  // b.none
    2aa4:	ldr	x0, [x29, #672]
    2aa8:	ldr	x0, [x0, #80]
    2aac:	cmp	x0, #0x0
    2ab0:	b.eq	2b58 <GOMP_taskloop+0x3a4>  // b.none
    2ab4:	ldr	x0, [x29, #672]
    2ab8:	ldr	x0, [x0, #80]
    2abc:	ldr	x0, [x0, #40]
    2ac0:	cmp	x0, #0x0
    2ac4:	b.eq	2b58 <GOMP_taskloop+0x3a4>  // b.none
    2ac8:	ldr	x0, [x29, #672]
    2acc:	ldr	x0, [x0, #80]
    2ad0:	ldr	x0, [x0, #40]
    2ad4:	ldrb	w0, [x0, #49]
    2ad8:	cmp	w0, #0x0
    2adc:	b.ne	37ec <GOMP_taskloop+0x1038>  // b.any
    2ae0:	ldr	x0, [x29, #672]
    2ae4:	ldr	x0, [x0, #80]
    2ae8:	ldr	x0, [x0, #40]
    2aec:	ldrb	w0, [x0, #50]
    2af0:	cmp	w0, #0x0
    2af4:	b.eq	2b58 <GOMP_taskloop+0x3a4>  // b.none
    2af8:	ldr	x0, [x29, #672]
    2afc:	ldr	x0, [x0, #80]
    2b00:	ldr	x0, [x0, #40]
    2b04:	ldr	x0, [x0]
    2b08:	cmp	x0, #0x0
    2b0c:	b.eq	2b58 <GOMP_taskloop+0x3a4>  // b.none
    2b10:	ldr	x0, [x29, #672]
    2b14:	ldr	x0, [x0, #80]
    2b18:	ldr	x0, [x0, #40]
    2b1c:	ldr	x0, [x0]
    2b20:	ldrb	w0, [x0, #49]
    2b24:	cmp	w0, #0x0
    2b28:	b.eq	2b58 <GOMP_taskloop+0x3a4>  // b.none
    2b2c:	b	37f0 <GOMP_taskloop+0x103c>
    2b30:	bl	70a4 <GOMP_taskgroup_start>
    2b34:	ldr	w0, [x29, #244]
    2b38:	and	w0, w0, #0x1000
    2b3c:	cmp	w0, #0x0
    2b40:	b.eq	2b58 <GOMP_taskloop+0x3a4>  // b.none
    2b44:	ldr	x0, [x29, #272]
    2b48:	ldr	x0, [x0, #16]
    2b4c:	str	x0, [x29, #600]
    2b50:	ldr	x0, [x29, #600]
    2b54:	bl	7658 <GOMP_taskgroup_reduction_register>
    2b58:	adrp	x0, 0 <gomp_max_task_priority_var>
    2b5c:	add	x0, x0, #0x0
    2b60:	ldr	w0, [x0]
    2b64:	ldr	w1, [x29, #240]
    2b68:	cmp	w1, w0
    2b6c:	b.le	2b80 <GOMP_taskloop+0x3cc>
    2b70:	adrp	x0, 0 <gomp_max_task_priority_var>
    2b74:	add	x0, x0, #0x0
    2b78:	ldr	w0, [x0]
    2b7c:	str	w0, [x29, #240]
    2b80:	ldr	w0, [x29, #244]
    2b84:	and	w0, w0, #0x400
    2b88:	cmp	w0, #0x0
    2b8c:	b.eq	2bec <GOMP_taskloop+0x438>  // b.none
    2b90:	ldr	x0, [x29, #664]
    2b94:	cmp	x0, #0x0
    2b98:	b.eq	2bec <GOMP_taskloop+0x438>  // b.none
    2b9c:	ldr	x0, [x29, #672]
    2ba0:	ldr	x0, [x0, #80]
    2ba4:	cmp	x0, #0x0
    2ba8:	b.eq	2bc0 <GOMP_taskloop+0x40c>  // b.none
    2bac:	ldr	x0, [x29, #672]
    2bb0:	ldr	x0, [x0, #80]
    2bb4:	ldrb	w0, [x0, #205]
    2bb8:	cmp	w0, #0x0
    2bbc:	b.ne	2bec <GOMP_taskloop+0x438>  // b.any
    2bc0:	ldr	x0, [x29, #664]
    2bc4:	ldr	w0, [x0, #1320]
    2bc8:	mov	w1, w0
    2bcc:	ldr	x0, [x29, #232]
    2bd0:	add	x1, x1, x0
    2bd4:	ldr	x0, [x29, #664]
    2bd8:	ldr	w0, [x0]
    2bdc:	lsl	w0, w0, #6
    2be0:	mov	w0, w0
    2be4:	cmp	x1, x0
    2be8:	b.ls	329c <GOMP_taskloop+0xae8>  // b.plast
    2bec:	ldr	x0, [x29, #264]
    2bf0:	cmp	x0, #0x0
    2bf4:	cset	w0, ne  // ne = any
    2bf8:	and	w0, w0, #0xff
    2bfc:	and	x0, x0, #0xff
    2c00:	cmp	x0, #0x0
    2c04:	b.eq	3114 <GOMP_taskloop+0x960>  // b.none
    2c08:	mov	x0, sp
    2c0c:	mov	x24, x0
    2c10:	ldr	x2, [x29, #232]
    2c14:	mov	x0, x2
    2c18:	sub	x0, x0, #0x1
    2c1c:	str	x0, [x29, #536]
    2c20:	mov	x22, x2
    2c24:	mov	x23, #0x0                   	// #0
    2c28:	mov	x0, #0x680                 	// #1664
    2c2c:	mov	x1, #0x0                   	// #0
    2c30:	mul	x4, x22, x0
    2c34:	umulh	x3, x22, x0
    2c38:	madd	x3, x23, x0, x3
    2c3c:	madd	x3, x22, x1, x3
    2c40:	str	x4, [x29, #112]
    2c44:	str	x3, [x29, #120]
    2c48:	mov	x0, x2
    2c4c:	lsl	x0, x0, #1
    2c50:	add	x0, x0, x2
    2c54:	lsl	x0, x0, #2
    2c58:	add	x0, x0, x2
    2c5c:	lsl	x0, x0, #4
    2c60:	mov	x20, x2
    2c64:	mov	x21, #0x0                   	// #0
    2c68:	mov	x0, #0x680                 	// #1664
    2c6c:	mov	x1, #0x0                   	// #0
    2c70:	mul	x4, x20, x0
    2c74:	umulh	x3, x20, x0
    2c78:	madd	x3, x21, x0, x3
    2c7c:	madd	x3, x20, x1, x3
    2c80:	str	x4, [x29, #96]
    2c84:	str	x3, [x29, #104]
    2c88:	mov	x0, x2
    2c8c:	lsl	x0, x0, #1
    2c90:	add	x0, x0, x2
    2c94:	lsl	x0, x0, #2
    2c98:	add	x0, x0, x2
    2c9c:	lsl	x0, x0, #4
    2ca0:	add	x0, x0, #0xf
    2ca4:	lsr	x0, x0, #4
    2ca8:	lsl	x0, x0, #4
    2cac:	sub	sp, sp, x0
    2cb0:	mov	x0, sp
    2cb4:	add	x0, x0, #0x7
    2cb8:	lsr	x0, x0, #3
    2cbc:	lsl	x0, x0, #3
    2cc0:	str	x0, [x29, #528]
    2cc4:	ldr	x0, [x29, #672]
    2cc8:	ldr	x0, [x0, #80]
    2ccc:	str	x0, [x29, #520]
    2cd0:	ldr	x1, [x29, #256]
    2cd4:	ldr	x0, [x29, #248]
    2cd8:	add	x0, x1, x0
    2cdc:	sub	x1, x0, #0x1
    2ce0:	ldr	x0, [x29, #248]
    2ce4:	neg	x0, x0
    2ce8:	and	x0, x1, x0
    2cec:	str	x0, [x29, #256]
    2cf0:	ldr	x1, [x29, #256]
    2cf4:	ldr	x0, [x29, #232]
    2cf8:	mul	x1, x1, x0
    2cfc:	ldr	x0, [x29, #248]
    2d00:	add	x0, x1, x0
    2d04:	sub	x0, x0, #0x1
    2d08:	mov	x1, x0
    2d0c:	sub	x1, x1, #0x1
    2d10:	str	x1, [x29, #512]
    2d14:	str	x0, [x29, #176]
    2d18:	str	xzr, [x29, #184]
    2d1c:	ldp	x2, x3, [x29, #176]
    2d20:	mov	x1, x2
    2d24:	lsr	x1, x1, #61
    2d28:	mov	x4, x3
    2d2c:	lsl	x4, x4, #3
    2d30:	str	x4, [x29, #216]
    2d34:	ldr	x4, [x29, #216]
    2d38:	orr	x1, x1, x4
    2d3c:	str	x1, [x29, #216]
    2d40:	mov	x1, x2
    2d44:	lsl	x1, x1, #3
    2d48:	str	x1, [x29, #208]
    2d4c:	str	x0, [x29, #160]
    2d50:	str	xzr, [x29, #168]
    2d54:	ldp	x2, x3, [x29, #160]
    2d58:	mov	x1, x2
    2d5c:	lsr	x1, x1, #61
    2d60:	mov	x4, x3
    2d64:	lsl	x4, x4, #3
    2d68:	str	x4, [x29, #200]
    2d6c:	ldr	x4, [x29, #200]
    2d70:	orr	x1, x1, x4
    2d74:	str	x1, [x29, #200]
    2d78:	mov	x1, x2
    2d7c:	lsl	x1, x1, #3
    2d80:	str	x1, [x29, #192]
    2d84:	add	x0, x0, #0xf
    2d88:	lsr	x0, x0, #4
    2d8c:	lsl	x0, x0, #4
    2d90:	sub	sp, sp, x0
    2d94:	mov	x0, sp
    2d98:	add	x0, x0, #0x0
    2d9c:	str	x0, [x29, #504]
    2da0:	ldr	x0, [x29, #504]
    2da4:	mov	x1, x0
    2da8:	ldr	x0, [x29, #248]
    2dac:	add	x0, x1, x0
    2db0:	sub	x0, x0, #0x1
    2db4:	ldr	x1, [x29, #248]
    2db8:	neg	x1, x1
    2dbc:	and	x0, x0, x1
    2dc0:	str	x0, [x29, #696]
    2dc4:	ldr	x0, [x29, #696]
    2dc8:	str	x0, [x29, #496]
    2dcc:	str	xzr, [x29, #704]
    2dd0:	b	2fb0 <GOMP_taskloop+0x7fc>
    2dd4:	ldr	x1, [x29, #704]
    2dd8:	mov	x0, x1
    2ddc:	lsl	x0, x0, #1
    2de0:	add	x0, x0, x1
    2de4:	lsl	x0, x0, #2
    2de8:	add	x0, x0, x1
    2dec:	lsl	x0, x0, #4
    2df0:	ldr	x1, [x29, #528]
    2df4:	add	x19, x1, x0
    2df8:	mov	w0, #0x0                   	// #0
    2dfc:	bl	a1c <gomp_icv>
    2e00:	mov	x2, x0
    2e04:	ldr	x1, [x29, #520]
    2e08:	mov	x0, x19
    2e0c:	bl	151c <gomp_init_task>
    2e10:	ldr	x2, [x29, #528]
    2e14:	ldr	x1, [x29, #704]
    2e18:	mov	x0, x1
    2e1c:	lsl	x0, x0, #1
    2e20:	add	x0, x0, x1
    2e24:	lsl	x0, x0, #2
    2e28:	add	x0, x0, x1
    2e2c:	lsl	x0, x0, #4
    2e30:	add	x0, x2, x0
    2e34:	ldr	w1, [x29, #240]
    2e38:	str	w1, [x0, #88]
    2e3c:	ldr	x2, [x29, #528]
    2e40:	ldr	x1, [x29, #704]
    2e44:	mov	x0, x1
    2e48:	lsl	x0, x0, #1
    2e4c:	add	x0, x0, x1
    2e50:	lsl	x0, x0, #2
    2e54:	add	x0, x0, x1
    2e58:	lsl	x0, x0, #4
    2e5c:	add	x0, x2, x0
    2e60:	mov	w1, #0x1                   	// #1
    2e64:	str	w1, [x0, #200]
    2e68:	ldr	x0, [x29, #672]
    2e6c:	ldr	x0, [x0, #80]
    2e70:	cmp	x0, #0x0
    2e74:	b.eq	2e8c <GOMP_taskloop+0x6d8>  // b.none
    2e78:	ldr	x0, [x29, #672]
    2e7c:	ldr	x0, [x0, #80]
    2e80:	ldrb	w0, [x0, #205]
    2e84:	cmp	w0, #0x0
    2e88:	b.ne	2e9c <GOMP_taskloop+0x6e8>  // b.any
    2e8c:	ldr	w0, [x29, #244]
    2e90:	and	w0, w0, #0x2
    2e94:	cmp	w0, #0x0
    2e98:	b.eq	2ea4 <GOMP_taskloop+0x6f0>  // b.none
    2e9c:	mov	w0, #0x1                   	// #1
    2ea0:	b	2ea8 <GOMP_taskloop+0x6f4>
    2ea4:	mov	w0, #0x0                   	// #0
    2ea8:	and	w0, w0, #0x1
    2eac:	and	w3, w0, #0xff
    2eb0:	ldr	x2, [x29, #528]
    2eb4:	ldr	x1, [x29, #704]
    2eb8:	mov	x0, x1
    2ebc:	lsl	x0, x0, #1
    2ec0:	add	x0, x0, x1
    2ec4:	lsl	x0, x0, #2
    2ec8:	add	x0, x0, x1
    2ecc:	lsl	x0, x0, #4
    2ed0:	add	x0, x2, x0
    2ed4:	mov	w1, w3
    2ed8:	strb	w1, [x0, #205]
    2edc:	ldr	x0, [x29, #672]
    2ee0:	ldr	x0, [x0, #80]
    2ee4:	cmp	x0, #0x0
    2ee8:	b.eq	2f58 <GOMP_taskloop+0x7a4>  // b.none
    2eec:	ldr	x0, [x29, #672]
    2ef0:	ldr	x0, [x0, #80]
    2ef4:	ldrb	w3, [x0, #204]
    2ef8:	ldr	x2, [x29, #528]
    2efc:	ldr	x1, [x29, #704]
    2f00:	mov	x0, x1
    2f04:	lsl	x0, x0, #1
    2f08:	add	x0, x0, x1
    2f0c:	lsl	x0, x0, #2
    2f10:	add	x0, x0, x1
    2f14:	lsl	x0, x0, #4
    2f18:	add	x0, x2, x0
    2f1c:	mov	w1, w3
    2f20:	strb	w1, [x0, #204]
    2f24:	ldr	x0, [x29, #672]
    2f28:	ldr	x0, [x0, #80]
    2f2c:	ldr	x2, [x0, #40]
    2f30:	ldr	x3, [x29, #528]
    2f34:	ldr	x1, [x29, #704]
    2f38:	mov	x0, x1
    2f3c:	lsl	x0, x0, #1
    2f40:	add	x0, x0, x1
    2f44:	lsl	x0, x0, #2
    2f48:	add	x0, x0, x1
    2f4c:	lsl	x0, x0, #4
    2f50:	add	x0, x3, x0
    2f54:	str	x2, [x0, #40]
    2f58:	ldr	x1, [x29, #704]
    2f5c:	mov	x0, x1
    2f60:	lsl	x0, x0, #1
    2f64:	add	x0, x0, x1
    2f68:	lsl	x0, x0, #2
    2f6c:	add	x0, x0, x1
    2f70:	lsl	x0, x0, #4
    2f74:	ldr	x1, [x29, #528]
    2f78:	add	x1, x1, x0
    2f7c:	ldr	x0, [x29, #672]
    2f80:	str	x1, [x0, #80]
    2f84:	ldr	x2, [x29, #264]
    2f88:	ldr	x1, [x29, #272]
    2f8c:	ldr	x0, [x29, #696]
    2f90:	blr	x2
    2f94:	ldr	x0, [x29, #256]
    2f98:	ldr	x1, [x29, #696]
    2f9c:	add	x0, x1, x0
    2fa0:	str	x0, [x29, #696]
    2fa4:	ldr	x0, [x29, #704]
    2fa8:	add	x0, x0, #0x1
    2fac:	str	x0, [x29, #704]
    2fb0:	ldr	x1, [x29, #704]
    2fb4:	ldr	x0, [x29, #232]
    2fb8:	cmp	x1, x0
    2fbc:	b.cc	2dd4 <GOMP_taskloop+0x620>  // b.lo, b.ul, b.last
    2fc0:	ldr	x0, [x29, #496]
    2fc4:	str	x0, [x29, #696]
    2fc8:	str	xzr, [x29, #704]
    2fcc:	b	30fc <GOMP_taskloop+0x948>
    2fd0:	ldr	x1, [x29, #704]
    2fd4:	mov	x0, x1
    2fd8:	lsl	x0, x0, #1
    2fdc:	add	x0, x0, x1
    2fe0:	lsl	x0, x0, #2
    2fe4:	add	x0, x0, x1
    2fe8:	lsl	x0, x0, #4
    2fec:	ldr	x1, [x29, #528]
    2ff0:	add	x1, x1, x0
    2ff4:	ldr	x0, [x29, #672]
    2ff8:	str	x1, [x0, #80]
    2ffc:	ldr	x0, [x29, #696]
    3000:	ldr	x1, [x29, #736]
    3004:	str	x1, [x0]
    3008:	ldr	x1, [x29, #736]
    300c:	ldr	x0, [x29, #728]
    3010:	add	x0, x1, x0
    3014:	str	x0, [x29, #736]
    3018:	ldr	x0, [x29, #696]
    301c:	add	x0, x0, #0x8
    3020:	ldr	x1, [x29, #736]
    3024:	str	x1, [x0]
    3028:	ldr	x1, [x29, #704]
    302c:	ldr	x0, [x29, #712]
    3030:	cmp	x1, x0
    3034:	b.ne	3048 <GOMP_taskloop+0x894>  // b.any
    3038:	ldr	x1, [x29, #728]
    303c:	ldr	x0, [x29, #752]
    3040:	sub	x0, x1, x0
    3044:	str	x0, [x29, #728]
    3048:	ldr	x1, [x29, #280]
    304c:	ldr	x0, [x29, #696]
    3050:	blr	x1
    3054:	ldr	x0, [x29, #256]
    3058:	ldr	x1, [x29, #696]
    305c:	add	x0, x1, x0
    3060:	str	x0, [x29, #696]
    3064:	ldr	x1, [x29, #704]
    3068:	mov	x0, x1
    306c:	lsl	x0, x0, #1
    3070:	add	x0, x0, x1
    3074:	lsl	x0, x0, #2
    3078:	add	x0, x0, x1
    307c:	lsl	x0, x0, #4
    3080:	ldr	x1, [x29, #528]
    3084:	add	x0, x1, x0
    3088:	add	x0, x0, #0x8
    308c:	mov	w1, #0x0                   	// #0
    3090:	bl	60 <priority_queue_empty_p>
    3094:	and	w0, w0, #0xff
    3098:	eor	w0, w0, #0x1
    309c:	and	w0, w0, #0xff
    30a0:	cmp	w0, #0x0
    30a4:	b.eq	30ec <GOMP_taskloop+0x938>  // b.none
    30a8:	ldr	x0, [x29, #664]
    30ac:	add	x0, x0, #0x500
    30b0:	bl	820 <gomp_mutex_lock>
    30b4:	ldr	x1, [x29, #704]
    30b8:	mov	x0, x1
    30bc:	lsl	x0, x0, #1
    30c0:	add	x0, x0, x1
    30c4:	lsl	x0, x0, #2
    30c8:	add	x0, x0, x1
    30cc:	lsl	x0, x0, #4
    30d0:	ldr	x1, [x29, #528]
    30d4:	add	x0, x1, x0
    30d8:	add	x0, x0, #0x8
    30dc:	bl	16d4 <gomp_clear_parent>
    30e0:	ldr	x0, [x29, #664]
    30e4:	add	x0, x0, #0x500
    30e8:	bl	894 <gomp_mutex_unlock>
    30ec:	bl	15c8 <gomp_end_task>
    30f0:	ldr	x0, [x29, #704]
    30f4:	add	x0, x0, #0x1
    30f8:	str	x0, [x29, #704]
    30fc:	ldr	x1, [x29, #704]
    3100:	ldr	x0, [x29, #232]
    3104:	cmp	x1, x0
    3108:	b.cc	2fd0 <GOMP_taskloop+0x81c>  // b.lo, b.ul, b.last
    310c:	mov	sp, x24
    3110:	b	37bc <GOMP_taskloop+0x1008>
    3114:	str	xzr, [x29, #704]
    3118:	b	3288 <GOMP_taskloop+0xad4>
    311c:	ldr	x0, [x29, #672]
    3120:	ldr	x19, [x0, #80]
    3124:	mov	w0, #0x0                   	// #0
    3128:	bl	a1c <gomp_icv>
    312c:	mov	x1, x0
    3130:	add	x0, x29, #0x120
    3134:	mov	x2, x1
    3138:	mov	x1, x19
    313c:	bl	151c <gomp_init_task>
    3140:	ldr	w0, [x29, #240]
    3144:	str	w0, [x29, #376]
    3148:	mov	w0, #0x1                   	// #1
    314c:	str	w0, [x29, #488]
    3150:	ldr	x0, [x29, #672]
    3154:	ldr	x0, [x0, #80]
    3158:	cmp	x0, #0x0
    315c:	b.eq	3174 <GOMP_taskloop+0x9c0>  // b.none
    3160:	ldr	x0, [x29, #672]
    3164:	ldr	x0, [x0, #80]
    3168:	ldrb	w0, [x0, #205]
    316c:	cmp	w0, #0x0
    3170:	b.ne	3184 <GOMP_taskloop+0x9d0>  // b.any
    3174:	ldr	w0, [x29, #244]
    3178:	and	w0, w0, #0x2
    317c:	cmp	w0, #0x0
    3180:	b.eq	318c <GOMP_taskloop+0x9d8>  // b.none
    3184:	mov	w0, #0x1                   	// #1
    3188:	b	3190 <GOMP_taskloop+0x9dc>
    318c:	mov	w0, #0x0                   	// #0
    3190:	and	w0, w0, #0x1
    3194:	and	w0, w0, #0xff
    3198:	strb	w0, [x29, #493]
    319c:	ldr	x0, [x29, #672]
    31a0:	ldr	x0, [x0, #80]
    31a4:	cmp	x0, #0x0
    31a8:	b.eq	31cc <GOMP_taskloop+0xa18>  // b.none
    31ac:	ldr	x0, [x29, #672]
    31b0:	ldr	x0, [x0, #80]
    31b4:	ldrb	w0, [x0, #204]
    31b8:	strb	w0, [x29, #492]
    31bc:	ldr	x0, [x29, #672]
    31c0:	ldr	x0, [x0, #80]
    31c4:	ldr	x0, [x0, #40]
    31c8:	str	x0, [x29, #328]
    31cc:	ldr	x0, [x29, #672]
    31d0:	add	x1, x29, #0x120
    31d4:	str	x1, [x0, #80]
    31d8:	ldr	x0, [x29, #272]
    31dc:	ldr	x1, [x29, #736]
    31e0:	str	x1, [x0]
    31e4:	ldr	x1, [x29, #736]
    31e8:	ldr	x0, [x29, #728]
    31ec:	add	x0, x1, x0
    31f0:	str	x0, [x29, #736]
    31f4:	ldr	x0, [x29, #272]
    31f8:	add	x0, x0, #0x8
    31fc:	ldr	x1, [x29, #736]
    3200:	str	x1, [x0]
    3204:	ldr	x1, [x29, #704]
    3208:	ldr	x0, [x29, #712]
    320c:	cmp	x1, x0
    3210:	b.ne	3224 <GOMP_taskloop+0xa70>  // b.any
    3214:	ldr	x1, [x29, #728]
    3218:	ldr	x0, [x29, #752]
    321c:	sub	x0, x1, x0
    3220:	str	x0, [x29, #728]
    3224:	ldr	x1, [x29, #280]
    3228:	ldr	x0, [x29, #272]
    322c:	blr	x1
    3230:	add	x0, x29, #0x120
    3234:	add	x0, x0, #0x8
    3238:	mov	w1, #0x0                   	// #0
    323c:	bl	60 <priority_queue_empty_p>
    3240:	and	w0, w0, #0xff
    3244:	eor	w0, w0, #0x1
    3248:	and	w0, w0, #0xff
    324c:	cmp	w0, #0x0
    3250:	b.eq	3278 <GOMP_taskloop+0xac4>  // b.none
    3254:	ldr	x0, [x29, #664]
    3258:	add	x0, x0, #0x500
    325c:	bl	820 <gomp_mutex_lock>
    3260:	add	x0, x29, #0x120
    3264:	add	x0, x0, #0x8
    3268:	bl	16d4 <gomp_clear_parent>
    326c:	ldr	x0, [x29, #664]
    3270:	add	x0, x0, #0x500
    3274:	bl	894 <gomp_mutex_unlock>
    3278:	bl	15c8 <gomp_end_task>
    327c:	ldr	x0, [x29, #704]
    3280:	add	x0, x0, #0x1
    3284:	str	x0, [x29, #704]
    3288:	ldr	x1, [x29, #704]
    328c:	ldr	x0, [x29, #232]
    3290:	cmp	x1, x0
    3294:	b.cc	311c <GOMP_taskloop+0x968>  // b.lo, b.ul, b.last
    3298:	b	37bc <GOMP_taskloop+0x1008>
    329c:	mov	x0, sp
    32a0:	mov	x19, x0
    32a4:	ldr	x0, [x29, #232]
    32a8:	mov	x1, x0
    32ac:	sub	x1, x1, #0x1
    32b0:	str	x1, [x29, #592]
    32b4:	str	x0, [x29, #144]
    32b8:	str	xzr, [x29, #152]
    32bc:	ldp	x2, x3, [x29, #144]
    32c0:	mov	x1, x2
    32c4:	lsr	x1, x1, #58
    32c8:	mov	x4, x3
    32cc:	lsl	x27, x4, #6
    32d0:	orr	x27, x1, x27
    32d4:	mov	x1, x2
    32d8:	lsl	x26, x1, #6
    32dc:	str	x0, [x29, #128]
    32e0:	str	xzr, [x29, #136]
    32e4:	ldp	x2, x3, [x29, #128]
    32e8:	mov	x1, x2
    32ec:	lsr	x1, x1, #58
    32f0:	mov	x4, x3
    32f4:	lsl	x25, x4, #6
    32f8:	orr	x25, x1, x25
    32fc:	mov	x1, x2
    3300:	lsl	x24, x1, #6
    3304:	lsl	x0, x0, #3
    3308:	add	x0, x0, #0xf
    330c:	lsr	x0, x0, #4
    3310:	lsl	x0, x0, #4
    3314:	sub	sp, sp, x0
    3318:	mov	x0, sp
    331c:	add	x0, x0, #0x7
    3320:	lsr	x0, x0, #3
    3324:	lsl	x0, x0, #3
    3328:	str	x0, [x29, #584]
    332c:	ldr	x0, [x29, #672]
    3330:	ldr	x0, [x0, #80]
    3334:	str	x0, [x29, #576]
    3338:	ldr	x0, [x29, #576]
    333c:	ldr	x0, [x0, #40]
    3340:	str	x0, [x29, #568]
    3344:	str	xzr, [x29, #680]
    3348:	b	34d4 <GOMP_taskloop+0xd20>
    334c:	ldr	x1, [x29, #256]
    3350:	ldr	x0, [x29, #248]
    3354:	add	x0, x1, x0
    3358:	add	x0, x0, #0xcf
    335c:	bl	0 <gomp_malloc>
    3360:	str	x0, [x29, #552]
    3364:	ldr	x0, [x29, #584]
    3368:	ldr	x1, [x29, #680]
    336c:	ldr	x2, [x29, #552]
    3370:	str	x2, [x0, x1, lsl #3]
    3374:	ldr	x1, [x29, #552]
    3378:	ldr	x0, [x29, #248]
    337c:	add	x0, x1, x0
    3380:	add	x0, x0, #0xcf
    3384:	ldr	x1, [x29, #248]
    3388:	neg	x1, x1
    338c:	and	x0, x0, x1
    3390:	str	x0, [x29, #544]
    3394:	mov	w0, #0x0                   	// #0
    3398:	bl	a1c <gomp_icv>
    339c:	mov	x2, x0
    33a0:	ldr	x1, [x29, #576]
    33a4:	ldr	x0, [x29, #552]
    33a8:	bl	151c <gomp_init_task>
    33ac:	ldr	x0, [x29, #552]
    33b0:	ldr	w1, [x29, #240]
    33b4:	str	w1, [x0, #88]
    33b8:	ldr	x0, [x29, #552]
    33bc:	mov	w1, #0x1                   	// #1
    33c0:	str	w1, [x0, #200]
    33c4:	ldr	x0, [x29, #576]
    33c8:	ldrb	w1, [x0, #204]
    33cc:	ldr	x0, [x29, #552]
    33d0:	strb	w1, [x0, #204]
    33d4:	ldr	x0, [x29, #552]
    33d8:	ldr	x1, [x29, #568]
    33dc:	str	x1, [x0, #40]
    33e0:	ldr	x0, [x29, #672]
    33e4:	ldr	x1, [x29, #552]
    33e8:	str	x1, [x0, #80]
    33ec:	ldr	x0, [x29, #264]
    33f0:	cmp	x0, #0x0
    33f4:	b.eq	3418 <GOMP_taskloop+0xc64>  // b.none
    33f8:	ldr	x2, [x29, #264]
    33fc:	ldr	x1, [x29, #272]
    3400:	ldr	x0, [x29, #544]
    3404:	blr	x2
    3408:	ldr	x0, [x29, #552]
    340c:	mov	w1, #0x1                   	// #1
    3410:	strb	w1, [x0, #206]
    3414:	b	342c <GOMP_taskloop+0xc78>
    3418:	ldr	x0, [x29, #256]
    341c:	mov	x2, x0
    3420:	ldr	x1, [x29, #272]
    3424:	ldr	x0, [x29, #544]
    3428:	bl	0 <memcpy>
    342c:	ldr	x0, [x29, #544]
    3430:	ldr	x1, [x29, #736]
    3434:	str	x1, [x0]
    3438:	ldr	x1, [x29, #736]
    343c:	ldr	x0, [x29, #728]
    3440:	add	x0, x1, x0
    3444:	str	x0, [x29, #736]
    3448:	ldr	x0, [x29, #544]
    344c:	add	x0, x0, #0x8
    3450:	ldr	x1, [x29, #736]
    3454:	str	x1, [x0]
    3458:	ldr	x1, [x29, #680]
    345c:	ldr	x0, [x29, #712]
    3460:	cmp	x1, x0
    3464:	b.ne	3478 <GOMP_taskloop+0xcc4>  // b.any
    3468:	ldr	x1, [x29, #728]
    346c:	ldr	x0, [x29, #752]
    3470:	sub	x0, x1, x0
    3474:	str	x0, [x29, #728]
    3478:	ldr	x0, [x29, #672]
    347c:	ldr	x1, [x29, #576]
    3480:	str	x1, [x0, #80]
    3484:	ldr	x0, [x29, #552]
    3488:	mov	w1, #0x2                   	// #2
    348c:	str	w1, [x0, #200]
    3490:	ldr	x0, [x29, #552]
    3494:	ldr	x1, [x29, #280]
    3498:	str	x1, [x0, #184]
    349c:	ldr	x0, [x29, #552]
    34a0:	ldr	x1, [x29, #544]
    34a4:	str	x1, [x0, #192]
    34a8:	ldr	w0, [x29, #244]
    34ac:	lsr	w0, w0, #1
    34b0:	and	w0, w0, #0x1
    34b4:	cmp	w0, #0x0
    34b8:	cset	w0, ne  // ne = any
    34bc:	and	w1, w0, #0xff
    34c0:	ldr	x0, [x29, #552]
    34c4:	strb	w1, [x0, #205]
    34c8:	ldr	x0, [x29, #680]
    34cc:	add	x0, x0, #0x1
    34d0:	str	x0, [x29, #680]
    34d4:	ldr	x1, [x29, #680]
    34d8:	ldr	x0, [x29, #232]
    34dc:	cmp	x1, x0
    34e0:	b.cc	334c <GOMP_taskloop+0xb98>  // b.lo, b.ul, b.last
    34e4:	ldr	x0, [x29, #664]
    34e8:	add	x0, x0, #0x500
    34ec:	bl	820 <gomp_mutex_lock>
    34f0:	adrp	x0, 0 <gomp_cancel_var>
    34f4:	add	x0, x0, #0x0
    34f8:	ldrb	w0, [x0]
    34fc:	and	x0, x0, #0xff
    3500:	cmp	x0, #0x0
    3504:	b.eq	35fc <GOMP_taskloop+0xe48>  // b.none
    3508:	ldr	x0, [x29, #264]
    350c:	cmp	x0, #0x0
    3510:	b.ne	35fc <GOMP_taskloop+0xe48>  // b.any
    3514:	ldr	x0, [x29, #664]
    3518:	add	x0, x0, #0x80
    351c:	bl	9a4 <gomp_team_barrier_cancelled>
    3520:	and	w0, w0, #0xff
    3524:	cmp	w0, #0x0
    3528:	b.eq	35ac <GOMP_taskloop+0xdf8>  // b.none
    352c:	nop
    3530:	b	3540 <GOMP_taskloop+0xd8c>
    3534:	nop
    3538:	b	3540 <GOMP_taskloop+0xd8c>
    353c:	nop
    3540:	ldr	x0, [x29, #664]
    3544:	add	x0, x0, #0x500
    3548:	bl	894 <gomp_mutex_unlock>
    354c:	str	xzr, [x29, #680]
    3550:	b	3580 <GOMP_taskloop+0xdcc>
    3554:	ldr	x0, [x29, #584]
    3558:	ldr	x1, [x29, #680]
    355c:	ldr	x0, [x0, x1, lsl #3]
    3560:	bl	a70 <gomp_finish_task>
    3564:	ldr	x0, [x29, #584]
    3568:	ldr	x1, [x29, #680]
    356c:	ldr	x0, [x0, x1, lsl #3]
    3570:	bl	0 <free>
    3574:	ldr	x0, [x29, #680]
    3578:	add	x0, x0, #0x1
    357c:	str	x0, [x29, #680]
    3580:	ldr	x1, [x29, #680]
    3584:	ldr	x0, [x29, #232]
    3588:	cmp	x1, x0
    358c:	b.cc	3554 <GOMP_taskloop+0xda0>  // b.lo, b.ul, b.last
    3590:	ldr	w0, [x29, #244]
    3594:	and	w0, w0, #0x800
    3598:	cmp	w0, #0x0
    359c:	b.ne	35a4 <GOMP_taskloop+0xdf0>  // b.any
    35a0:	bl	7100 <GOMP_taskgroup_end>
    35a4:	mov	sp, x19
    35a8:	b	37f0 <GOMP_taskloop+0x103c>
    35ac:	ldr	x0, [x29, #568]
    35b0:	cmp	x0, #0x0
    35b4:	b.eq	35fc <GOMP_taskloop+0xe48>  // b.none
    35b8:	ldr	x0, [x29, #568]
    35bc:	ldrb	w0, [x0, #49]
    35c0:	cmp	w0, #0x0
    35c4:	b.ne	3534 <GOMP_taskloop+0xd80>  // b.any
    35c8:	ldr	x0, [x29, #568]
    35cc:	ldrb	w0, [x0, #50]
    35d0:	cmp	w0, #0x0
    35d4:	b.eq	35fc <GOMP_taskloop+0xe48>  // b.none
    35d8:	ldr	x0, [x29, #568]
    35dc:	ldr	x0, [x0]
    35e0:	cmp	x0, #0x0
    35e4:	b.eq	35fc <GOMP_taskloop+0xe48>  // b.none
    35e8:	ldr	x0, [x29, #568]
    35ec:	ldr	x0, [x0]
    35f0:	ldrb	w0, [x0, #49]
    35f4:	cmp	w0, #0x0
    35f8:	b.ne	353c <GOMP_taskloop+0xd88>  // b.any
    35fc:	ldr	x0, [x29, #568]
    3600:	cmp	x0, #0x0
    3604:	b.eq	3620 <GOMP_taskloop+0xe6c>  // b.none
    3608:	ldr	x0, [x29, #568]
    360c:	ldr	x1, [x0, #56]
    3610:	ldr	x0, [x29, #232]
    3614:	add	x1, x1, x0
    3618:	ldr	x0, [x29, #568]
    361c:	str	x1, [x0, #56]
    3620:	str	xzr, [x29, #680]
    3624:	b	36fc <GOMP_taskloop+0xf48>
    3628:	ldr	x0, [x29, #584]
    362c:	ldr	x1, [x29, #680]
    3630:	ldr	x0, [x0, x1, lsl #3]
    3634:	str	x0, [x29, #560]
    3638:	ldr	x0, [x29, #576]
    363c:	add	x1, x0, #0x8
    3640:	ldr	x0, [x29, #560]
    3644:	ldrb	w0, [x0, #207]
    3648:	mov	w6, w0
    364c:	mov	w5, #0x0                   	// #0
    3650:	mov	w4, #0x0                   	// #0
    3654:	ldr	w3, [x29, #240]
    3658:	ldr	x2, [x29, #560]
    365c:	mov	w0, #0x1                   	// #1
    3660:	bl	3fc <priority_queue_insert>
    3664:	ldr	x0, [x29, #568]
    3668:	cmp	x0, #0x0
    366c:	b.eq	369c <GOMP_taskloop+0xee8>  // b.none
    3670:	ldr	x0, [x29, #568]
    3674:	add	x1, x0, #0x8
    3678:	ldr	x0, [x29, #560]
    367c:	ldrb	w0, [x0, #207]
    3680:	mov	w6, w0
    3684:	mov	w5, #0x0                   	// #0
    3688:	mov	w4, #0x0                   	// #0
    368c:	ldr	w3, [x29, #240]
    3690:	ldr	x2, [x29, #560]
    3694:	mov	w0, #0x2                   	// #2
    3698:	bl	3fc <priority_queue_insert>
    369c:	ldr	x0, [x29, #664]
    36a0:	add	x1, x0, #0x508
    36a4:	ldr	x0, [x29, #560]
    36a8:	ldrb	w0, [x0, #207]
    36ac:	mov	w6, w0
    36b0:	mov	w5, #0x0                   	// #0
    36b4:	mov	w4, #0x1                   	// #1
    36b8:	ldr	w3, [x29, #240]
    36bc:	ldr	x2, [x29, #560]
    36c0:	mov	w0, #0x0                   	// #0
    36c4:	bl	3fc <priority_queue_insert>
    36c8:	ldr	x0, [x29, #664]
    36cc:	ldr	w0, [x0, #1320]
    36d0:	add	w1, w0, #0x1
    36d4:	ldr	x0, [x29, #664]
    36d8:	str	w1, [x0, #1320]
    36dc:	ldr	x0, [x29, #664]
    36e0:	ldr	w0, [x0, #1324]
    36e4:	add	w1, w0, #0x1
    36e8:	ldr	x0, [x29, #664]
    36ec:	str	w1, [x0, #1324]
    36f0:	ldr	x0, [x29, #680]
    36f4:	add	x0, x0, #0x1
    36f8:	str	x0, [x29, #680]
    36fc:	ldr	x1, [x29, #680]
    3700:	ldr	x0, [x29, #232]
    3704:	cmp	x1, x0
    3708:	b.cc	3628 <GOMP_taskloop+0xe74>  // b.lo, b.ul, b.last
    370c:	ldr	x0, [x29, #664]
    3710:	add	x0, x0, #0x80
    3714:	bl	904 <gomp_team_barrier_set_task_pending>
    3718:	ldr	x0, [x29, #664]
    371c:	ldr	w0, [x0, #1328]
    3720:	ldr	x1, [x29, #576]
    3724:	ldrb	w1, [x1, #204]
    3728:	eor	w1, w1, #0x1
    372c:	and	w1, w1, #0xff
    3730:	add	w1, w0, w1
    3734:	ldr	x0, [x29, #664]
    3738:	ldr	w0, [x0]
    373c:	cmp	w1, w0
    3740:	b.cs	378c <GOMP_taskloop+0xfd8>  // b.hs, b.nlast
    3744:	ldr	x0, [x29, #664]
    3748:	ldr	w1, [x0]
    374c:	ldr	x0, [x29, #664]
    3750:	ldr	w0, [x0, #1328]
    3754:	sub	w0, w1, w0
    3758:	ldr	x1, [x29, #576]
    375c:	ldrb	w1, [x1, #204]
    3760:	eor	w1, w1, #0x1
    3764:	and	w1, w1, #0xff
    3768:	sub	w0, w0, w1
    376c:	str	w0, [x29, #692]
    3770:	ldrsw	x0, [x29, #692]
    3774:	ldr	x1, [x29, #232]
    3778:	cmp	x1, x0
    377c:	b.cs	3790 <GOMP_taskloop+0xfdc>  // b.hs, b.nlast
    3780:	ldr	x0, [x29, #232]
    3784:	str	w0, [x29, #692]
    3788:	b	3790 <GOMP_taskloop+0xfdc>
    378c:	str	wzr, [x29, #692]
    3790:	ldr	x0, [x29, #664]
    3794:	add	x0, x0, #0x500
    3798:	bl	894 <gomp_mutex_unlock>
    379c:	ldr	w0, [x29, #692]
    37a0:	cmp	w0, #0x0
    37a4:	b.eq	37b8 <GOMP_taskloop+0x1004>  // b.none
    37a8:	ldr	x0, [x29, #664]
    37ac:	add	x0, x0, #0x80
    37b0:	ldr	w1, [x29, #692]
    37b4:	bl	0 <gomp_team_barrier_wake>
    37b8:	mov	sp, x19
    37bc:	ldr	w0, [x29, #244]
    37c0:	and	w0, w0, #0x800
    37c4:	cmp	w0, #0x0
    37c8:	b.ne	37f0 <GOMP_taskloop+0x103c>  // b.any
    37cc:	bl	7100 <GOMP_taskgroup_end>
    37d0:	b	37f0 <GOMP_taskloop+0x103c>
    37d4:	nop
    37d8:	b	37f0 <GOMP_taskloop+0x103c>
    37dc:	nop
    37e0:	b	37f0 <GOMP_taskloop+0x103c>
    37e4:	nop
    37e8:	b	37f0 <GOMP_taskloop+0x103c>
    37ec:	nop
    37f0:	mov	sp, x29
    37f4:	ldp	x19, x20, [sp, #16]
    37f8:	ldp	x21, x22, [sp, #32]
    37fc:	ldp	x23, x24, [sp, #48]
    3800:	ldp	x25, x26, [sp, #64]
    3804:	ldr	x27, [sp, #80]
    3808:	ldp	x29, x30, [sp]
    380c:	add	sp, sp, #0x2e0
    3810:	ret

0000000000003814 <GOMP_taskloop_ull>:
    3814:	sub	sp, sp, #0x2e0
    3818:	stp	x29, x30, [sp]
    381c:	mov	x29, sp
    3820:	stp	x19, x20, [sp, #16]
    3824:	stp	x21, x22, [sp, #32]
    3828:	stp	x23, x24, [sp, #48]
    382c:	stp	x25, x26, [sp, #64]
    3830:	str	x27, [sp, #80]
    3834:	str	x0, [x29, #280]
    3838:	str	x1, [x29, #272]
    383c:	str	x2, [x29, #264]
    3840:	str	x3, [x29, #256]
    3844:	str	x4, [x29, #248]
    3848:	str	w5, [x29, #244]
    384c:	str	x6, [x29, #232]
    3850:	str	w7, [x29, #240]
    3854:	bl	a08 <gomp_thread>
    3858:	str	x0, [x29, #672]
    385c:	ldr	x0, [x29, #672]
    3860:	ldr	x0, [x0, #16]
    3864:	str	x0, [x29, #664]
    3868:	ldr	x0, [x29, #664]
    386c:	cmp	x0, #0x0
    3870:	b.eq	388c <GOMP_taskloop_ull+0x78>  // b.none
    3874:	ldr	x0, [x29, #664]
    3878:	add	x0, x0, #0x80
    387c:	bl	9a4 <gomp_team_barrier_cancelled>
    3880:	and	w0, w0, #0xff
    3884:	cmp	w0, #0x0
    3888:	b.ne	4878 <GOMP_taskloop_ull+0x1064>  // b.any
    388c:	ldr	w0, [x29, #244]
    3890:	and	w0, w0, #0x100
    3894:	cmp	w0, #0x0
    3898:	b.eq	38d4 <GOMP_taskloop_ull+0xc0>  // b.none
    389c:	ldr	x1, [x29, #736]
    38a0:	ldr	x0, [x29, #744]
    38a4:	cmp	x1, x0
    38a8:	b.cs	4880 <GOMP_taskloop_ull+0x106c>  // b.hs, b.nlast
    38ac:	ldr	x1, [x29, #744]
    38b0:	ldr	x0, [x29, #736]
    38b4:	sub	x1, x1, x0
    38b8:	ldr	x0, [x29, #752]
    38bc:	add	x0, x1, x0
    38c0:	sub	x1, x0, #0x1
    38c4:	ldr	x0, [x29, #752]
    38c8:	udiv	x0, x1, x0
    38cc:	str	x0, [x29, #720]
    38d0:	b	390c <GOMP_taskloop_ull+0xf8>
    38d4:	ldr	x1, [x29, #736]
    38d8:	ldr	x0, [x29, #744]
    38dc:	cmp	x1, x0
    38e0:	b.ls	4888 <GOMP_taskloop_ull+0x1074>  // b.plast
    38e4:	ldr	x1, [x29, #736]
    38e8:	ldr	x0, [x29, #744]
    38ec:	sub	x1, x1, x0
    38f0:	ldr	x0, [x29, #752]
    38f4:	sub	x0, x1, x0
    38f8:	sub	x1, x0, #0x1
    38fc:	ldr	x0, [x29, #752]
    3900:	neg	x0, x0
    3904:	udiv	x0, x1, x0
    3908:	str	x0, [x29, #720]
    390c:	ldr	x0, [x29, #752]
    3910:	str	x0, [x29, #728]
    3914:	ldr	x0, [x29, #720]
    3918:	str	x0, [x29, #712]
    391c:	ldr	w0, [x29, #244]
    3920:	and	w0, w0, #0x200
    3924:	cmp	w0, #0x0
    3928:	b.eq	3a68 <GOMP_taskloop_ull+0x254>  // b.none
    392c:	ldr	x0, [x29, #232]
    3930:	str	x0, [x29, #640]
    3934:	ldr	x1, [x29, #720]
    3938:	ldr	x0, [x29, #640]
    393c:	udiv	x0, x1, x0
    3940:	str	x0, [x29, #632]
    3944:	ldr	x0, [x29, #632]
    3948:	str	x0, [x29, #232]
    394c:	ldr	x1, [x29, #232]
    3950:	ldr	x0, [x29, #632]
    3954:	cmp	x1, x0
    3958:	b.eq	3964 <GOMP_taskloop_ull+0x150>  // b.none
    395c:	mov	x0, #0xffffffffffffffff    	// #-1
    3960:	str	x0, [x29, #232]
    3964:	ldr	x0, [x29, #232]
    3968:	cmp	x0, #0x1
    396c:	b.hi	398c <GOMP_taskloop_ull+0x178>  // b.pmore
    3970:	mov	x0, #0x1                   	// #1
    3974:	str	x0, [x29, #232]
    3978:	ldr	x1, [x29, #744]
    397c:	ldr	x0, [x29, #736]
    3980:	sub	x0, x1, x0
    3984:	str	x0, [x29, #728]
    3988:	b	3b20 <GOMP_taskloop_ull+0x30c>
    398c:	ldr	x1, [x29, #232]
    3990:	ldr	x0, [x29, #640]
    3994:	cmp	x1, x0
    3998:	b.cc	3a00 <GOMP_taskloop_ull+0x1ec>  // b.lo, b.ul, b.last
    399c:	ldr	x0, [x29, #232]
    39a0:	cmn	x0, #0x1
    39a4:	b.eq	3a00 <GOMP_taskloop_ull+0x1ec>  // b.none
    39a8:	ldr	x1, [x29, #232]
    39ac:	ldr	x0, [x29, #640]
    39b0:	mul	x0, x1, x0
    39b4:	str	x0, [x29, #624]
    39b8:	ldr	x1, [x29, #640]
    39bc:	ldr	x0, [x29, #752]
    39c0:	mul	x0, x1, x0
    39c4:	str	x0, [x29, #728]
    39c8:	ldr	x1, [x29, #624]
    39cc:	ldr	x0, [x29, #720]
    39d0:	cmp	x1, x0
    39d4:	b.eq	3b1c <GOMP_taskloop_ull+0x308>  // b.none
    39d8:	ldr	x1, [x29, #728]
    39dc:	ldr	x0, [x29, #752]
    39e0:	add	x0, x1, x0
    39e4:	str	x0, [x29, #728]
    39e8:	ldr	x1, [x29, #720]
    39ec:	ldr	x0, [x29, #624]
    39f0:	sub	x0, x1, x0
    39f4:	sub	x0, x0, #0x1
    39f8:	str	x0, [x29, #712]
    39fc:	b	3b1c <GOMP_taskloop_ull+0x308>
    3a00:	ldr	x1, [x29, #720]
    3a04:	ldr	x0, [x29, #232]
    3a08:	udiv	x0, x1, x0
    3a0c:	str	x0, [x29, #616]
    3a10:	ldr	x0, [x29, #720]
    3a14:	ldr	x1, [x29, #232]
    3a18:	udiv	x2, x0, x1
    3a1c:	ldr	x1, [x29, #232]
    3a20:	mul	x1, x2, x1
    3a24:	sub	x0, x0, x1
    3a28:	str	x0, [x29, #608]
    3a2c:	ldr	x1, [x29, #616]
    3a30:	ldr	x0, [x29, #752]
    3a34:	mul	x0, x1, x0
    3a38:	str	x0, [x29, #728]
    3a3c:	ldr	x0, [x29, #608]
    3a40:	cmp	x0, #0x0
    3a44:	b.eq	3b20 <GOMP_taskloop_ull+0x30c>  // b.none
    3a48:	ldr	x1, [x29, #728]
    3a4c:	ldr	x0, [x29, #752]
    3a50:	add	x0, x1, x0
    3a54:	str	x0, [x29, #728]
    3a58:	ldr	x0, [x29, #608]
    3a5c:	sub	x0, x0, #0x1
    3a60:	str	x0, [x29, #712]
    3a64:	b	3b20 <GOMP_taskloop_ull+0x30c>
    3a68:	ldr	x0, [x29, #232]
    3a6c:	cmp	x0, #0x0
    3a70:	b.ne	3a98 <GOMP_taskloop_ull+0x284>  // b.any
    3a74:	ldr	x0, [x29, #664]
    3a78:	cmp	x0, #0x0
    3a7c:	b.eq	3a90 <GOMP_taskloop_ull+0x27c>  // b.none
    3a80:	ldr	x0, [x29, #664]
    3a84:	ldr	w0, [x0]
    3a88:	mov	w0, w0
    3a8c:	b	3a94 <GOMP_taskloop_ull+0x280>
    3a90:	mov	x0, #0x1                   	// #1
    3a94:	str	x0, [x29, #232]
    3a98:	ldr	x1, [x29, #232]
    3a9c:	ldr	x0, [x29, #720]
    3aa0:	cmp	x1, x0
    3aa4:	b.cc	3ab4 <GOMP_taskloop_ull+0x2a0>  // b.lo, b.ul, b.last
    3aa8:	ldr	x0, [x29, #720]
    3aac:	str	x0, [x29, #232]
    3ab0:	b	3b20 <GOMP_taskloop_ull+0x30c>
    3ab4:	ldr	x1, [x29, #720]
    3ab8:	ldr	x0, [x29, #232]
    3abc:	udiv	x0, x1, x0
    3ac0:	str	x0, [x29, #656]
    3ac4:	ldr	x0, [x29, #720]
    3ac8:	ldr	x1, [x29, #232]
    3acc:	udiv	x2, x0, x1
    3ad0:	ldr	x1, [x29, #232]
    3ad4:	mul	x1, x2, x1
    3ad8:	sub	x0, x0, x1
    3adc:	str	x0, [x29, #648]
    3ae0:	ldr	x1, [x29, #656]
    3ae4:	ldr	x0, [x29, #752]
    3ae8:	mul	x0, x1, x0
    3aec:	str	x0, [x29, #728]
    3af0:	ldr	x0, [x29, #648]
    3af4:	cmp	x0, #0x0
    3af8:	b.eq	3b20 <GOMP_taskloop_ull+0x30c>  // b.none
    3afc:	ldr	x1, [x29, #728]
    3b00:	ldr	x0, [x29, #752]
    3b04:	add	x0, x1, x0
    3b08:	str	x0, [x29, #728]
    3b0c:	ldr	x0, [x29, #648]
    3b10:	sub	x0, x0, #0x1
    3b14:	str	x0, [x29, #712]
    3b18:	b	3b20 <GOMP_taskloop_ull+0x30c>
    3b1c:	nop
    3b20:	ldr	w0, [x29, #244]
    3b24:	and	w0, w0, #0x800
    3b28:	cmp	w0, #0x0
    3b2c:	b.eq	3bd4 <GOMP_taskloop_ull+0x3c0>  // b.none
    3b30:	adrp	x0, 0 <gomp_cancel_var>
    3b34:	add	x0, x0, #0x0
    3b38:	ldrb	w0, [x0]
    3b3c:	and	x0, x0, #0xff
    3b40:	cmp	x0, #0x0
    3b44:	b.eq	3bfc <GOMP_taskloop_ull+0x3e8>  // b.none
    3b48:	ldr	x0, [x29, #672]
    3b4c:	ldr	x0, [x0, #80]
    3b50:	cmp	x0, #0x0
    3b54:	b.eq	3bfc <GOMP_taskloop_ull+0x3e8>  // b.none
    3b58:	ldr	x0, [x29, #672]
    3b5c:	ldr	x0, [x0, #80]
    3b60:	ldr	x0, [x0, #40]
    3b64:	cmp	x0, #0x0
    3b68:	b.eq	3bfc <GOMP_taskloop_ull+0x3e8>  // b.none
    3b6c:	ldr	x0, [x29, #672]
    3b70:	ldr	x0, [x0, #80]
    3b74:	ldr	x0, [x0, #40]
    3b78:	ldrb	w0, [x0, #49]
    3b7c:	cmp	w0, #0x0
    3b80:	b.ne	4890 <GOMP_taskloop_ull+0x107c>  // b.any
    3b84:	ldr	x0, [x29, #672]
    3b88:	ldr	x0, [x0, #80]
    3b8c:	ldr	x0, [x0, #40]
    3b90:	ldrb	w0, [x0, #50]
    3b94:	cmp	w0, #0x0
    3b98:	b.eq	3bfc <GOMP_taskloop_ull+0x3e8>  // b.none
    3b9c:	ldr	x0, [x29, #672]
    3ba0:	ldr	x0, [x0, #80]
    3ba4:	ldr	x0, [x0, #40]
    3ba8:	ldr	x0, [x0]
    3bac:	cmp	x0, #0x0
    3bb0:	b.eq	3bfc <GOMP_taskloop_ull+0x3e8>  // b.none
    3bb4:	ldr	x0, [x29, #672]
    3bb8:	ldr	x0, [x0, #80]
    3bbc:	ldr	x0, [x0, #40]
    3bc0:	ldr	x0, [x0]
    3bc4:	ldrb	w0, [x0, #49]
    3bc8:	cmp	w0, #0x0
    3bcc:	b.eq	3bfc <GOMP_taskloop_ull+0x3e8>  // b.none
    3bd0:	b	4894 <GOMP_taskloop_ull+0x1080>
    3bd4:	bl	70a4 <GOMP_taskgroup_start>
    3bd8:	ldr	w0, [x29, #244]
    3bdc:	and	w0, w0, #0x1000
    3be0:	cmp	w0, #0x0
    3be4:	b.eq	3bfc <GOMP_taskloop_ull+0x3e8>  // b.none
    3be8:	ldr	x0, [x29, #272]
    3bec:	ldr	x0, [x0, #16]
    3bf0:	str	x0, [x29, #600]
    3bf4:	ldr	x0, [x29, #600]
    3bf8:	bl	7658 <GOMP_taskgroup_reduction_register>
    3bfc:	adrp	x0, 0 <gomp_max_task_priority_var>
    3c00:	add	x0, x0, #0x0
    3c04:	ldr	w0, [x0]
    3c08:	ldr	w1, [x29, #240]
    3c0c:	cmp	w1, w0
    3c10:	b.le	3c24 <GOMP_taskloop_ull+0x410>
    3c14:	adrp	x0, 0 <gomp_max_task_priority_var>
    3c18:	add	x0, x0, #0x0
    3c1c:	ldr	w0, [x0]
    3c20:	str	w0, [x29, #240]
    3c24:	ldr	w0, [x29, #244]
    3c28:	and	w0, w0, #0x400
    3c2c:	cmp	w0, #0x0
    3c30:	b.eq	3c90 <GOMP_taskloop_ull+0x47c>  // b.none
    3c34:	ldr	x0, [x29, #664]
    3c38:	cmp	x0, #0x0
    3c3c:	b.eq	3c90 <GOMP_taskloop_ull+0x47c>  // b.none
    3c40:	ldr	x0, [x29, #672]
    3c44:	ldr	x0, [x0, #80]
    3c48:	cmp	x0, #0x0
    3c4c:	b.eq	3c64 <GOMP_taskloop_ull+0x450>  // b.none
    3c50:	ldr	x0, [x29, #672]
    3c54:	ldr	x0, [x0, #80]
    3c58:	ldrb	w0, [x0, #205]
    3c5c:	cmp	w0, #0x0
    3c60:	b.ne	3c90 <GOMP_taskloop_ull+0x47c>  // b.any
    3c64:	ldr	x0, [x29, #664]
    3c68:	ldr	w0, [x0, #1320]
    3c6c:	mov	w1, w0
    3c70:	ldr	x0, [x29, #232]
    3c74:	add	x1, x1, x0
    3c78:	ldr	x0, [x29, #664]
    3c7c:	ldr	w0, [x0]
    3c80:	lsl	w0, w0, #6
    3c84:	mov	w0, w0
    3c88:	cmp	x1, x0
    3c8c:	b.ls	4340 <GOMP_taskloop_ull+0xb2c>  // b.plast
    3c90:	ldr	x0, [x29, #264]
    3c94:	cmp	x0, #0x0
    3c98:	cset	w0, ne  // ne = any
    3c9c:	and	w0, w0, #0xff
    3ca0:	and	x0, x0, #0xff
    3ca4:	cmp	x0, #0x0
    3ca8:	b.eq	41b8 <GOMP_taskloop_ull+0x9a4>  // b.none
    3cac:	mov	x0, sp
    3cb0:	mov	x24, x0
    3cb4:	ldr	x2, [x29, #232]
    3cb8:	mov	x0, x2
    3cbc:	sub	x0, x0, #0x1
    3cc0:	str	x0, [x29, #536]
    3cc4:	mov	x22, x2
    3cc8:	mov	x23, #0x0                   	// #0
    3ccc:	mov	x0, #0x680                 	// #1664
    3cd0:	mov	x1, #0x0                   	// #0
    3cd4:	mul	x4, x22, x0
    3cd8:	umulh	x3, x22, x0
    3cdc:	madd	x3, x23, x0, x3
    3ce0:	madd	x3, x22, x1, x3
    3ce4:	str	x4, [x29, #112]
    3ce8:	str	x3, [x29, #120]
    3cec:	mov	x0, x2
    3cf0:	lsl	x0, x0, #1
    3cf4:	add	x0, x0, x2
    3cf8:	lsl	x0, x0, #2
    3cfc:	add	x0, x0, x2
    3d00:	lsl	x0, x0, #4
    3d04:	mov	x20, x2
    3d08:	mov	x21, #0x0                   	// #0
    3d0c:	mov	x0, #0x680                 	// #1664
    3d10:	mov	x1, #0x0                   	// #0
    3d14:	mul	x4, x20, x0
    3d18:	umulh	x3, x20, x0
    3d1c:	madd	x3, x21, x0, x3
    3d20:	madd	x3, x20, x1, x3
    3d24:	str	x4, [x29, #96]
    3d28:	str	x3, [x29, #104]
    3d2c:	mov	x0, x2
    3d30:	lsl	x0, x0, #1
    3d34:	add	x0, x0, x2
    3d38:	lsl	x0, x0, #2
    3d3c:	add	x0, x0, x2
    3d40:	lsl	x0, x0, #4
    3d44:	add	x0, x0, #0xf
    3d48:	lsr	x0, x0, #4
    3d4c:	lsl	x0, x0, #4
    3d50:	sub	sp, sp, x0
    3d54:	mov	x0, sp
    3d58:	add	x0, x0, #0x7
    3d5c:	lsr	x0, x0, #3
    3d60:	lsl	x0, x0, #3
    3d64:	str	x0, [x29, #528]
    3d68:	ldr	x0, [x29, #672]
    3d6c:	ldr	x0, [x0, #80]
    3d70:	str	x0, [x29, #520]
    3d74:	ldr	x1, [x29, #256]
    3d78:	ldr	x0, [x29, #248]
    3d7c:	add	x0, x1, x0
    3d80:	sub	x1, x0, #0x1
    3d84:	ldr	x0, [x29, #248]
    3d88:	neg	x0, x0
    3d8c:	and	x0, x1, x0
    3d90:	str	x0, [x29, #256]
    3d94:	ldr	x1, [x29, #256]
    3d98:	ldr	x0, [x29, #232]
    3d9c:	mul	x1, x1, x0
    3da0:	ldr	x0, [x29, #248]
    3da4:	add	x0, x1, x0
    3da8:	sub	x0, x0, #0x1
    3dac:	mov	x1, x0
    3db0:	sub	x1, x1, #0x1
    3db4:	str	x1, [x29, #512]
    3db8:	str	x0, [x29, #176]
    3dbc:	str	xzr, [x29, #184]
    3dc0:	ldp	x2, x3, [x29, #176]
    3dc4:	mov	x1, x2
    3dc8:	lsr	x1, x1, #61
    3dcc:	mov	x4, x3
    3dd0:	lsl	x4, x4, #3
    3dd4:	str	x4, [x29, #216]
    3dd8:	ldr	x4, [x29, #216]
    3ddc:	orr	x1, x1, x4
    3de0:	str	x1, [x29, #216]
    3de4:	mov	x1, x2
    3de8:	lsl	x1, x1, #3
    3dec:	str	x1, [x29, #208]
    3df0:	str	x0, [x29, #160]
    3df4:	str	xzr, [x29, #168]
    3df8:	ldp	x2, x3, [x29, #160]
    3dfc:	mov	x1, x2
    3e00:	lsr	x1, x1, #61
    3e04:	mov	x4, x3
    3e08:	lsl	x4, x4, #3
    3e0c:	str	x4, [x29, #200]
    3e10:	ldr	x4, [x29, #200]
    3e14:	orr	x1, x1, x4
    3e18:	str	x1, [x29, #200]
    3e1c:	mov	x1, x2
    3e20:	lsl	x1, x1, #3
    3e24:	str	x1, [x29, #192]
    3e28:	add	x0, x0, #0xf
    3e2c:	lsr	x0, x0, #4
    3e30:	lsl	x0, x0, #4
    3e34:	sub	sp, sp, x0
    3e38:	mov	x0, sp
    3e3c:	add	x0, x0, #0x0
    3e40:	str	x0, [x29, #504]
    3e44:	ldr	x0, [x29, #504]
    3e48:	mov	x1, x0
    3e4c:	ldr	x0, [x29, #248]
    3e50:	add	x0, x1, x0
    3e54:	sub	x0, x0, #0x1
    3e58:	ldr	x1, [x29, #248]
    3e5c:	neg	x1, x1
    3e60:	and	x0, x0, x1
    3e64:	str	x0, [x29, #696]
    3e68:	ldr	x0, [x29, #696]
    3e6c:	str	x0, [x29, #496]
    3e70:	str	xzr, [x29, #704]
    3e74:	b	4054 <GOMP_taskloop_ull+0x840>
    3e78:	ldr	x1, [x29, #704]
    3e7c:	mov	x0, x1
    3e80:	lsl	x0, x0, #1
    3e84:	add	x0, x0, x1
    3e88:	lsl	x0, x0, #2
    3e8c:	add	x0, x0, x1
    3e90:	lsl	x0, x0, #4
    3e94:	ldr	x1, [x29, #528]
    3e98:	add	x19, x1, x0
    3e9c:	mov	w0, #0x0                   	// #0
    3ea0:	bl	a1c <gomp_icv>
    3ea4:	mov	x2, x0
    3ea8:	ldr	x1, [x29, #520]
    3eac:	mov	x0, x19
    3eb0:	bl	151c <gomp_init_task>
    3eb4:	ldr	x2, [x29, #528]
    3eb8:	ldr	x1, [x29, #704]
    3ebc:	mov	x0, x1
    3ec0:	lsl	x0, x0, #1
    3ec4:	add	x0, x0, x1
    3ec8:	lsl	x0, x0, #2
    3ecc:	add	x0, x0, x1
    3ed0:	lsl	x0, x0, #4
    3ed4:	add	x0, x2, x0
    3ed8:	ldr	w1, [x29, #240]
    3edc:	str	w1, [x0, #88]
    3ee0:	ldr	x2, [x29, #528]
    3ee4:	ldr	x1, [x29, #704]
    3ee8:	mov	x0, x1
    3eec:	lsl	x0, x0, #1
    3ef0:	add	x0, x0, x1
    3ef4:	lsl	x0, x0, #2
    3ef8:	add	x0, x0, x1
    3efc:	lsl	x0, x0, #4
    3f00:	add	x0, x2, x0
    3f04:	mov	w1, #0x1                   	// #1
    3f08:	str	w1, [x0, #200]
    3f0c:	ldr	x0, [x29, #672]
    3f10:	ldr	x0, [x0, #80]
    3f14:	cmp	x0, #0x0
    3f18:	b.eq	3f30 <GOMP_taskloop_ull+0x71c>  // b.none
    3f1c:	ldr	x0, [x29, #672]
    3f20:	ldr	x0, [x0, #80]
    3f24:	ldrb	w0, [x0, #205]
    3f28:	cmp	w0, #0x0
    3f2c:	b.ne	3f40 <GOMP_taskloop_ull+0x72c>  // b.any
    3f30:	ldr	w0, [x29, #244]
    3f34:	and	w0, w0, #0x2
    3f38:	cmp	w0, #0x0
    3f3c:	b.eq	3f48 <GOMP_taskloop_ull+0x734>  // b.none
    3f40:	mov	w0, #0x1                   	// #1
    3f44:	b	3f4c <GOMP_taskloop_ull+0x738>
    3f48:	mov	w0, #0x0                   	// #0
    3f4c:	and	w0, w0, #0x1
    3f50:	and	w3, w0, #0xff
    3f54:	ldr	x2, [x29, #528]
    3f58:	ldr	x1, [x29, #704]
    3f5c:	mov	x0, x1
    3f60:	lsl	x0, x0, #1
    3f64:	add	x0, x0, x1
    3f68:	lsl	x0, x0, #2
    3f6c:	add	x0, x0, x1
    3f70:	lsl	x0, x0, #4
    3f74:	add	x0, x2, x0
    3f78:	mov	w1, w3
    3f7c:	strb	w1, [x0, #205]
    3f80:	ldr	x0, [x29, #672]
    3f84:	ldr	x0, [x0, #80]
    3f88:	cmp	x0, #0x0
    3f8c:	b.eq	3ffc <GOMP_taskloop_ull+0x7e8>  // b.none
    3f90:	ldr	x0, [x29, #672]
    3f94:	ldr	x0, [x0, #80]
    3f98:	ldrb	w3, [x0, #204]
    3f9c:	ldr	x2, [x29, #528]
    3fa0:	ldr	x1, [x29, #704]
    3fa4:	mov	x0, x1
    3fa8:	lsl	x0, x0, #1
    3fac:	add	x0, x0, x1
    3fb0:	lsl	x0, x0, #2
    3fb4:	add	x0, x0, x1
    3fb8:	lsl	x0, x0, #4
    3fbc:	add	x0, x2, x0
    3fc0:	mov	w1, w3
    3fc4:	strb	w1, [x0, #204]
    3fc8:	ldr	x0, [x29, #672]
    3fcc:	ldr	x0, [x0, #80]
    3fd0:	ldr	x2, [x0, #40]
    3fd4:	ldr	x3, [x29, #528]
    3fd8:	ldr	x1, [x29, #704]
    3fdc:	mov	x0, x1
    3fe0:	lsl	x0, x0, #1
    3fe4:	add	x0, x0, x1
    3fe8:	lsl	x0, x0, #2
    3fec:	add	x0, x0, x1
    3ff0:	lsl	x0, x0, #4
    3ff4:	add	x0, x3, x0
    3ff8:	str	x2, [x0, #40]
    3ffc:	ldr	x1, [x29, #704]
    4000:	mov	x0, x1
    4004:	lsl	x0, x0, #1
    4008:	add	x0, x0, x1
    400c:	lsl	x0, x0, #2
    4010:	add	x0, x0, x1
    4014:	lsl	x0, x0, #4
    4018:	ldr	x1, [x29, #528]
    401c:	add	x1, x1, x0
    4020:	ldr	x0, [x29, #672]
    4024:	str	x1, [x0, #80]
    4028:	ldr	x2, [x29, #264]
    402c:	ldr	x1, [x29, #272]
    4030:	ldr	x0, [x29, #696]
    4034:	blr	x2
    4038:	ldr	x0, [x29, #256]
    403c:	ldr	x1, [x29, #696]
    4040:	add	x0, x1, x0
    4044:	str	x0, [x29, #696]
    4048:	ldr	x0, [x29, #704]
    404c:	add	x0, x0, #0x1
    4050:	str	x0, [x29, #704]
    4054:	ldr	x1, [x29, #704]
    4058:	ldr	x0, [x29, #232]
    405c:	cmp	x1, x0
    4060:	b.cc	3e78 <GOMP_taskloop_ull+0x664>  // b.lo, b.ul, b.last
    4064:	ldr	x0, [x29, #496]
    4068:	str	x0, [x29, #696]
    406c:	str	xzr, [x29, #704]
    4070:	b	41a0 <GOMP_taskloop_ull+0x98c>
    4074:	ldr	x1, [x29, #704]
    4078:	mov	x0, x1
    407c:	lsl	x0, x0, #1
    4080:	add	x0, x0, x1
    4084:	lsl	x0, x0, #2
    4088:	add	x0, x0, x1
    408c:	lsl	x0, x0, #4
    4090:	ldr	x1, [x29, #528]
    4094:	add	x1, x1, x0
    4098:	ldr	x0, [x29, #672]
    409c:	str	x1, [x0, #80]
    40a0:	ldr	x0, [x29, #696]
    40a4:	ldr	x1, [x29, #736]
    40a8:	str	x1, [x0]
    40ac:	ldr	x1, [x29, #736]
    40b0:	ldr	x0, [x29, #728]
    40b4:	add	x0, x1, x0
    40b8:	str	x0, [x29, #736]
    40bc:	ldr	x0, [x29, #696]
    40c0:	add	x0, x0, #0x8
    40c4:	ldr	x1, [x29, #736]
    40c8:	str	x1, [x0]
    40cc:	ldr	x1, [x29, #704]
    40d0:	ldr	x0, [x29, #712]
    40d4:	cmp	x1, x0
    40d8:	b.ne	40ec <GOMP_taskloop_ull+0x8d8>  // b.any
    40dc:	ldr	x1, [x29, #728]
    40e0:	ldr	x0, [x29, #752]
    40e4:	sub	x0, x1, x0
    40e8:	str	x0, [x29, #728]
    40ec:	ldr	x1, [x29, #280]
    40f0:	ldr	x0, [x29, #696]
    40f4:	blr	x1
    40f8:	ldr	x0, [x29, #256]
    40fc:	ldr	x1, [x29, #696]
    4100:	add	x0, x1, x0
    4104:	str	x0, [x29, #696]
    4108:	ldr	x1, [x29, #704]
    410c:	mov	x0, x1
    4110:	lsl	x0, x0, #1
    4114:	add	x0, x0, x1
    4118:	lsl	x0, x0, #2
    411c:	add	x0, x0, x1
    4120:	lsl	x0, x0, #4
    4124:	ldr	x1, [x29, #528]
    4128:	add	x0, x1, x0
    412c:	add	x0, x0, #0x8
    4130:	mov	w1, #0x0                   	// #0
    4134:	bl	60 <priority_queue_empty_p>
    4138:	and	w0, w0, #0xff
    413c:	eor	w0, w0, #0x1
    4140:	and	w0, w0, #0xff
    4144:	cmp	w0, #0x0
    4148:	b.eq	4190 <GOMP_taskloop_ull+0x97c>  // b.none
    414c:	ldr	x0, [x29, #664]
    4150:	add	x0, x0, #0x500
    4154:	bl	820 <gomp_mutex_lock>
    4158:	ldr	x1, [x29, #704]
    415c:	mov	x0, x1
    4160:	lsl	x0, x0, #1
    4164:	add	x0, x0, x1
    4168:	lsl	x0, x0, #2
    416c:	add	x0, x0, x1
    4170:	lsl	x0, x0, #4
    4174:	ldr	x1, [x29, #528]
    4178:	add	x0, x1, x0
    417c:	add	x0, x0, #0x8
    4180:	bl	16d4 <gomp_clear_parent>
    4184:	ldr	x0, [x29, #664]
    4188:	add	x0, x0, #0x500
    418c:	bl	894 <gomp_mutex_unlock>
    4190:	bl	15c8 <gomp_end_task>
    4194:	ldr	x0, [x29, #704]
    4198:	add	x0, x0, #0x1
    419c:	str	x0, [x29, #704]
    41a0:	ldr	x1, [x29, #704]
    41a4:	ldr	x0, [x29, #232]
    41a8:	cmp	x1, x0
    41ac:	b.cc	4074 <GOMP_taskloop_ull+0x860>  // b.lo, b.ul, b.last
    41b0:	mov	sp, x24
    41b4:	b	4860 <GOMP_taskloop_ull+0x104c>
    41b8:	str	xzr, [x29, #704]
    41bc:	b	432c <GOMP_taskloop_ull+0xb18>
    41c0:	ldr	x0, [x29, #672]
    41c4:	ldr	x19, [x0, #80]
    41c8:	mov	w0, #0x0                   	// #0
    41cc:	bl	a1c <gomp_icv>
    41d0:	mov	x1, x0
    41d4:	add	x0, x29, #0x120
    41d8:	mov	x2, x1
    41dc:	mov	x1, x19
    41e0:	bl	151c <gomp_init_task>
    41e4:	ldr	w0, [x29, #240]
    41e8:	str	w0, [x29, #376]
    41ec:	mov	w0, #0x1                   	// #1
    41f0:	str	w0, [x29, #488]
    41f4:	ldr	x0, [x29, #672]
    41f8:	ldr	x0, [x0, #80]
    41fc:	cmp	x0, #0x0
    4200:	b.eq	4218 <GOMP_taskloop_ull+0xa04>  // b.none
    4204:	ldr	x0, [x29, #672]
    4208:	ldr	x0, [x0, #80]
    420c:	ldrb	w0, [x0, #205]
    4210:	cmp	w0, #0x0
    4214:	b.ne	4228 <GOMP_taskloop_ull+0xa14>  // b.any
    4218:	ldr	w0, [x29, #244]
    421c:	and	w0, w0, #0x2
    4220:	cmp	w0, #0x0
    4224:	b.eq	4230 <GOMP_taskloop_ull+0xa1c>  // b.none
    4228:	mov	w0, #0x1                   	// #1
    422c:	b	4234 <GOMP_taskloop_ull+0xa20>
    4230:	mov	w0, #0x0                   	// #0
    4234:	and	w0, w0, #0x1
    4238:	and	w0, w0, #0xff
    423c:	strb	w0, [x29, #493]
    4240:	ldr	x0, [x29, #672]
    4244:	ldr	x0, [x0, #80]
    4248:	cmp	x0, #0x0
    424c:	b.eq	4270 <GOMP_taskloop_ull+0xa5c>  // b.none
    4250:	ldr	x0, [x29, #672]
    4254:	ldr	x0, [x0, #80]
    4258:	ldrb	w0, [x0, #204]
    425c:	strb	w0, [x29, #492]
    4260:	ldr	x0, [x29, #672]
    4264:	ldr	x0, [x0, #80]
    4268:	ldr	x0, [x0, #40]
    426c:	str	x0, [x29, #328]
    4270:	ldr	x0, [x29, #672]
    4274:	add	x1, x29, #0x120
    4278:	str	x1, [x0, #80]
    427c:	ldr	x0, [x29, #272]
    4280:	ldr	x1, [x29, #736]
    4284:	str	x1, [x0]
    4288:	ldr	x1, [x29, #736]
    428c:	ldr	x0, [x29, #728]
    4290:	add	x0, x1, x0
    4294:	str	x0, [x29, #736]
    4298:	ldr	x0, [x29, #272]
    429c:	add	x0, x0, #0x8
    42a0:	ldr	x1, [x29, #736]
    42a4:	str	x1, [x0]
    42a8:	ldr	x1, [x29, #704]
    42ac:	ldr	x0, [x29, #712]
    42b0:	cmp	x1, x0
    42b4:	b.ne	42c8 <GOMP_taskloop_ull+0xab4>  // b.any
    42b8:	ldr	x1, [x29, #728]
    42bc:	ldr	x0, [x29, #752]
    42c0:	sub	x0, x1, x0
    42c4:	str	x0, [x29, #728]
    42c8:	ldr	x1, [x29, #280]
    42cc:	ldr	x0, [x29, #272]
    42d0:	blr	x1
    42d4:	add	x0, x29, #0x120
    42d8:	add	x0, x0, #0x8
    42dc:	mov	w1, #0x0                   	// #0
    42e0:	bl	60 <priority_queue_empty_p>
    42e4:	and	w0, w0, #0xff
    42e8:	eor	w0, w0, #0x1
    42ec:	and	w0, w0, #0xff
    42f0:	cmp	w0, #0x0
    42f4:	b.eq	431c <GOMP_taskloop_ull+0xb08>  // b.none
    42f8:	ldr	x0, [x29, #664]
    42fc:	add	x0, x0, #0x500
    4300:	bl	820 <gomp_mutex_lock>
    4304:	add	x0, x29, #0x120
    4308:	add	x0, x0, #0x8
    430c:	bl	16d4 <gomp_clear_parent>
    4310:	ldr	x0, [x29, #664]
    4314:	add	x0, x0, #0x500
    4318:	bl	894 <gomp_mutex_unlock>
    431c:	bl	15c8 <gomp_end_task>
    4320:	ldr	x0, [x29, #704]
    4324:	add	x0, x0, #0x1
    4328:	str	x0, [x29, #704]
    432c:	ldr	x1, [x29, #704]
    4330:	ldr	x0, [x29, #232]
    4334:	cmp	x1, x0
    4338:	b.cc	41c0 <GOMP_taskloop_ull+0x9ac>  // b.lo, b.ul, b.last
    433c:	b	4860 <GOMP_taskloop_ull+0x104c>
    4340:	mov	x0, sp
    4344:	mov	x19, x0
    4348:	ldr	x0, [x29, #232]
    434c:	mov	x1, x0
    4350:	sub	x1, x1, #0x1
    4354:	str	x1, [x29, #592]
    4358:	str	x0, [x29, #144]
    435c:	str	xzr, [x29, #152]
    4360:	ldp	x2, x3, [x29, #144]
    4364:	mov	x1, x2
    4368:	lsr	x1, x1, #58
    436c:	mov	x4, x3
    4370:	lsl	x27, x4, #6
    4374:	orr	x27, x1, x27
    4378:	mov	x1, x2
    437c:	lsl	x26, x1, #6
    4380:	str	x0, [x29, #128]
    4384:	str	xzr, [x29, #136]
    4388:	ldp	x2, x3, [x29, #128]
    438c:	mov	x1, x2
    4390:	lsr	x1, x1, #58
    4394:	mov	x4, x3
    4398:	lsl	x25, x4, #6
    439c:	orr	x25, x1, x25
    43a0:	mov	x1, x2
    43a4:	lsl	x24, x1, #6
    43a8:	lsl	x0, x0, #3
    43ac:	add	x0, x0, #0xf
    43b0:	lsr	x0, x0, #4
    43b4:	lsl	x0, x0, #4
    43b8:	sub	sp, sp, x0
    43bc:	mov	x0, sp
    43c0:	add	x0, x0, #0x7
    43c4:	lsr	x0, x0, #3
    43c8:	lsl	x0, x0, #3
    43cc:	str	x0, [x29, #584]
    43d0:	ldr	x0, [x29, #672]
    43d4:	ldr	x0, [x0, #80]
    43d8:	str	x0, [x29, #576]
    43dc:	ldr	x0, [x29, #576]
    43e0:	ldr	x0, [x0, #40]
    43e4:	str	x0, [x29, #568]
    43e8:	str	xzr, [x29, #680]
    43ec:	b	4578 <GOMP_taskloop_ull+0xd64>
    43f0:	ldr	x1, [x29, #256]
    43f4:	ldr	x0, [x29, #248]
    43f8:	add	x0, x1, x0
    43fc:	add	x0, x0, #0xcf
    4400:	bl	0 <gomp_malloc>
    4404:	str	x0, [x29, #552]
    4408:	ldr	x0, [x29, #584]
    440c:	ldr	x1, [x29, #680]
    4410:	ldr	x2, [x29, #552]
    4414:	str	x2, [x0, x1, lsl #3]
    4418:	ldr	x1, [x29, #552]
    441c:	ldr	x0, [x29, #248]
    4420:	add	x0, x1, x0
    4424:	add	x0, x0, #0xcf
    4428:	ldr	x1, [x29, #248]
    442c:	neg	x1, x1
    4430:	and	x0, x0, x1
    4434:	str	x0, [x29, #544]
    4438:	mov	w0, #0x0                   	// #0
    443c:	bl	a1c <gomp_icv>
    4440:	mov	x2, x0
    4444:	ldr	x1, [x29, #576]
    4448:	ldr	x0, [x29, #552]
    444c:	bl	151c <gomp_init_task>
    4450:	ldr	x0, [x29, #552]
    4454:	ldr	w1, [x29, #240]
    4458:	str	w1, [x0, #88]
    445c:	ldr	x0, [x29, #552]
    4460:	mov	w1, #0x1                   	// #1
    4464:	str	w1, [x0, #200]
    4468:	ldr	x0, [x29, #576]
    446c:	ldrb	w1, [x0, #204]
    4470:	ldr	x0, [x29, #552]
    4474:	strb	w1, [x0, #204]
    4478:	ldr	x0, [x29, #552]
    447c:	ldr	x1, [x29, #568]
    4480:	str	x1, [x0, #40]
    4484:	ldr	x0, [x29, #672]
    4488:	ldr	x1, [x29, #552]
    448c:	str	x1, [x0, #80]
    4490:	ldr	x0, [x29, #264]
    4494:	cmp	x0, #0x0
    4498:	b.eq	44bc <GOMP_taskloop_ull+0xca8>  // b.none
    449c:	ldr	x2, [x29, #264]
    44a0:	ldr	x1, [x29, #272]
    44a4:	ldr	x0, [x29, #544]
    44a8:	blr	x2
    44ac:	ldr	x0, [x29, #552]
    44b0:	mov	w1, #0x1                   	// #1
    44b4:	strb	w1, [x0, #206]
    44b8:	b	44d0 <GOMP_taskloop_ull+0xcbc>
    44bc:	ldr	x0, [x29, #256]
    44c0:	mov	x2, x0
    44c4:	ldr	x1, [x29, #272]
    44c8:	ldr	x0, [x29, #544]
    44cc:	bl	0 <memcpy>
    44d0:	ldr	x0, [x29, #544]
    44d4:	ldr	x1, [x29, #736]
    44d8:	str	x1, [x0]
    44dc:	ldr	x1, [x29, #736]
    44e0:	ldr	x0, [x29, #728]
    44e4:	add	x0, x1, x0
    44e8:	str	x0, [x29, #736]
    44ec:	ldr	x0, [x29, #544]
    44f0:	add	x0, x0, #0x8
    44f4:	ldr	x1, [x29, #736]
    44f8:	str	x1, [x0]
    44fc:	ldr	x1, [x29, #680]
    4500:	ldr	x0, [x29, #712]
    4504:	cmp	x1, x0
    4508:	b.ne	451c <GOMP_taskloop_ull+0xd08>  // b.any
    450c:	ldr	x1, [x29, #728]
    4510:	ldr	x0, [x29, #752]
    4514:	sub	x0, x1, x0
    4518:	str	x0, [x29, #728]
    451c:	ldr	x0, [x29, #672]
    4520:	ldr	x1, [x29, #576]
    4524:	str	x1, [x0, #80]
    4528:	ldr	x0, [x29, #552]
    452c:	mov	w1, #0x2                   	// #2
    4530:	str	w1, [x0, #200]
    4534:	ldr	x0, [x29, #552]
    4538:	ldr	x1, [x29, #280]
    453c:	str	x1, [x0, #184]
    4540:	ldr	x0, [x29, #552]
    4544:	ldr	x1, [x29, #544]
    4548:	str	x1, [x0, #192]
    454c:	ldr	w0, [x29, #244]
    4550:	lsr	w0, w0, #1
    4554:	and	w0, w0, #0x1
    4558:	cmp	w0, #0x0
    455c:	cset	w0, ne  // ne = any
    4560:	and	w1, w0, #0xff
    4564:	ldr	x0, [x29, #552]
    4568:	strb	w1, [x0, #205]
    456c:	ldr	x0, [x29, #680]
    4570:	add	x0, x0, #0x1
    4574:	str	x0, [x29, #680]
    4578:	ldr	x1, [x29, #680]
    457c:	ldr	x0, [x29, #232]
    4580:	cmp	x1, x0
    4584:	b.cc	43f0 <GOMP_taskloop_ull+0xbdc>  // b.lo, b.ul, b.last
    4588:	ldr	x0, [x29, #664]
    458c:	add	x0, x0, #0x500
    4590:	bl	820 <gomp_mutex_lock>
    4594:	adrp	x0, 0 <gomp_cancel_var>
    4598:	add	x0, x0, #0x0
    459c:	ldrb	w0, [x0]
    45a0:	and	x0, x0, #0xff
    45a4:	cmp	x0, #0x0
    45a8:	b.eq	46a0 <GOMP_taskloop_ull+0xe8c>  // b.none
    45ac:	ldr	x0, [x29, #264]
    45b0:	cmp	x0, #0x0
    45b4:	b.ne	46a0 <GOMP_taskloop_ull+0xe8c>  // b.any
    45b8:	ldr	x0, [x29, #664]
    45bc:	add	x0, x0, #0x80
    45c0:	bl	9a4 <gomp_team_barrier_cancelled>
    45c4:	and	w0, w0, #0xff
    45c8:	cmp	w0, #0x0
    45cc:	b.eq	4650 <GOMP_taskloop_ull+0xe3c>  // b.none
    45d0:	nop
    45d4:	b	45e4 <GOMP_taskloop_ull+0xdd0>
    45d8:	nop
    45dc:	b	45e4 <GOMP_taskloop_ull+0xdd0>
    45e0:	nop
    45e4:	ldr	x0, [x29, #664]
    45e8:	add	x0, x0, #0x500
    45ec:	bl	894 <gomp_mutex_unlock>
    45f0:	str	xzr, [x29, #680]
    45f4:	b	4624 <GOMP_taskloop_ull+0xe10>
    45f8:	ldr	x0, [x29, #584]
    45fc:	ldr	x1, [x29, #680]
    4600:	ldr	x0, [x0, x1, lsl #3]
    4604:	bl	a70 <gomp_finish_task>
    4608:	ldr	x0, [x29, #584]
    460c:	ldr	x1, [x29, #680]
    4610:	ldr	x0, [x0, x1, lsl #3]
    4614:	bl	0 <free>
    4618:	ldr	x0, [x29, #680]
    461c:	add	x0, x0, #0x1
    4620:	str	x0, [x29, #680]
    4624:	ldr	x1, [x29, #680]
    4628:	ldr	x0, [x29, #232]
    462c:	cmp	x1, x0
    4630:	b.cc	45f8 <GOMP_taskloop_ull+0xde4>  // b.lo, b.ul, b.last
    4634:	ldr	w0, [x29, #244]
    4638:	and	w0, w0, #0x800
    463c:	cmp	w0, #0x0
    4640:	b.ne	4648 <GOMP_taskloop_ull+0xe34>  // b.any
    4644:	bl	7100 <GOMP_taskgroup_end>
    4648:	mov	sp, x19
    464c:	b	4894 <GOMP_taskloop_ull+0x1080>
    4650:	ldr	x0, [x29, #568]
    4654:	cmp	x0, #0x0
    4658:	b.eq	46a0 <GOMP_taskloop_ull+0xe8c>  // b.none
    465c:	ldr	x0, [x29, #568]
    4660:	ldrb	w0, [x0, #49]
    4664:	cmp	w0, #0x0
    4668:	b.ne	45d8 <GOMP_taskloop_ull+0xdc4>  // b.any
    466c:	ldr	x0, [x29, #568]
    4670:	ldrb	w0, [x0, #50]
    4674:	cmp	w0, #0x0
    4678:	b.eq	46a0 <GOMP_taskloop_ull+0xe8c>  // b.none
    467c:	ldr	x0, [x29, #568]
    4680:	ldr	x0, [x0]
    4684:	cmp	x0, #0x0
    4688:	b.eq	46a0 <GOMP_taskloop_ull+0xe8c>  // b.none
    468c:	ldr	x0, [x29, #568]
    4690:	ldr	x0, [x0]
    4694:	ldrb	w0, [x0, #49]
    4698:	cmp	w0, #0x0
    469c:	b.ne	45e0 <GOMP_taskloop_ull+0xdcc>  // b.any
    46a0:	ldr	x0, [x29, #568]
    46a4:	cmp	x0, #0x0
    46a8:	b.eq	46c4 <GOMP_taskloop_ull+0xeb0>  // b.none
    46ac:	ldr	x0, [x29, #568]
    46b0:	ldr	x1, [x0, #56]
    46b4:	ldr	x0, [x29, #232]
    46b8:	add	x1, x1, x0
    46bc:	ldr	x0, [x29, #568]
    46c0:	str	x1, [x0, #56]
    46c4:	str	xzr, [x29, #680]
    46c8:	b	47a0 <GOMP_taskloop_ull+0xf8c>
    46cc:	ldr	x0, [x29, #584]
    46d0:	ldr	x1, [x29, #680]
    46d4:	ldr	x0, [x0, x1, lsl #3]
    46d8:	str	x0, [x29, #560]
    46dc:	ldr	x0, [x29, #576]
    46e0:	add	x1, x0, #0x8
    46e4:	ldr	x0, [x29, #560]
    46e8:	ldrb	w0, [x0, #207]
    46ec:	mov	w6, w0
    46f0:	mov	w5, #0x0                   	// #0
    46f4:	mov	w4, #0x0                   	// #0
    46f8:	ldr	w3, [x29, #240]
    46fc:	ldr	x2, [x29, #560]
    4700:	mov	w0, #0x1                   	// #1
    4704:	bl	3fc <priority_queue_insert>
    4708:	ldr	x0, [x29, #568]
    470c:	cmp	x0, #0x0
    4710:	b.eq	4740 <GOMP_taskloop_ull+0xf2c>  // b.none
    4714:	ldr	x0, [x29, #568]
    4718:	add	x1, x0, #0x8
    471c:	ldr	x0, [x29, #560]
    4720:	ldrb	w0, [x0, #207]
    4724:	mov	w6, w0
    4728:	mov	w5, #0x0                   	// #0
    472c:	mov	w4, #0x0                   	// #0
    4730:	ldr	w3, [x29, #240]
    4734:	ldr	x2, [x29, #560]
    4738:	mov	w0, #0x2                   	// #2
    473c:	bl	3fc <priority_queue_insert>
    4740:	ldr	x0, [x29, #664]
    4744:	add	x1, x0, #0x508
    4748:	ldr	x0, [x29, #560]
    474c:	ldrb	w0, [x0, #207]
    4750:	mov	w6, w0
    4754:	mov	w5, #0x0                   	// #0
    4758:	mov	w4, #0x1                   	// #1
    475c:	ldr	w3, [x29, #240]
    4760:	ldr	x2, [x29, #560]
    4764:	mov	w0, #0x0                   	// #0
    4768:	bl	3fc <priority_queue_insert>
    476c:	ldr	x0, [x29, #664]
    4770:	ldr	w0, [x0, #1320]
    4774:	add	w1, w0, #0x1
    4778:	ldr	x0, [x29, #664]
    477c:	str	w1, [x0, #1320]
    4780:	ldr	x0, [x29, #664]
    4784:	ldr	w0, [x0, #1324]
    4788:	add	w1, w0, #0x1
    478c:	ldr	x0, [x29, #664]
    4790:	str	w1, [x0, #1324]
    4794:	ldr	x0, [x29, #680]
    4798:	add	x0, x0, #0x1
    479c:	str	x0, [x29, #680]
    47a0:	ldr	x1, [x29, #680]
    47a4:	ldr	x0, [x29, #232]
    47a8:	cmp	x1, x0
    47ac:	b.cc	46cc <GOMP_taskloop_ull+0xeb8>  // b.lo, b.ul, b.last
    47b0:	ldr	x0, [x29, #664]
    47b4:	add	x0, x0, #0x80
    47b8:	bl	904 <gomp_team_barrier_set_task_pending>
    47bc:	ldr	x0, [x29, #664]
    47c0:	ldr	w0, [x0, #1328]
    47c4:	ldr	x1, [x29, #576]
    47c8:	ldrb	w1, [x1, #204]
    47cc:	eor	w1, w1, #0x1
    47d0:	and	w1, w1, #0xff
    47d4:	add	w1, w0, w1
    47d8:	ldr	x0, [x29, #664]
    47dc:	ldr	w0, [x0]
    47e0:	cmp	w1, w0
    47e4:	b.cs	4830 <GOMP_taskloop_ull+0x101c>  // b.hs, b.nlast
    47e8:	ldr	x0, [x29, #664]
    47ec:	ldr	w1, [x0]
    47f0:	ldr	x0, [x29, #664]
    47f4:	ldr	w0, [x0, #1328]
    47f8:	sub	w0, w1, w0
    47fc:	ldr	x1, [x29, #576]
    4800:	ldrb	w1, [x1, #204]
    4804:	eor	w1, w1, #0x1
    4808:	and	w1, w1, #0xff
    480c:	sub	w0, w0, w1
    4810:	str	w0, [x29, #692]
    4814:	ldrsw	x0, [x29, #692]
    4818:	ldr	x1, [x29, #232]
    481c:	cmp	x1, x0
    4820:	b.cs	4834 <GOMP_taskloop_ull+0x1020>  // b.hs, b.nlast
    4824:	ldr	x0, [x29, #232]
    4828:	str	w0, [x29, #692]
    482c:	b	4834 <GOMP_taskloop_ull+0x1020>
    4830:	str	wzr, [x29, #692]
    4834:	ldr	x0, [x29, #664]
    4838:	add	x0, x0, #0x500
    483c:	bl	894 <gomp_mutex_unlock>
    4840:	ldr	w0, [x29, #692]
    4844:	cmp	w0, #0x0
    4848:	b.eq	485c <GOMP_taskloop_ull+0x1048>  // b.none
    484c:	ldr	x0, [x29, #664]
    4850:	add	x0, x0, #0x80
    4854:	ldr	w1, [x29, #692]
    4858:	bl	0 <gomp_team_barrier_wake>
    485c:	mov	sp, x19
    4860:	ldr	w0, [x29, #244]
    4864:	and	w0, w0, #0x800
    4868:	cmp	w0, #0x0
    486c:	b.ne	4894 <GOMP_taskloop_ull+0x1080>  // b.any
    4870:	bl	7100 <GOMP_taskgroup_end>
    4874:	b	4894 <GOMP_taskloop_ull+0x1080>
    4878:	nop
    487c:	b	4894 <GOMP_taskloop_ull+0x1080>
    4880:	nop
    4884:	b	4894 <GOMP_taskloop_ull+0x1080>
    4888:	nop
    488c:	b	4894 <GOMP_taskloop_ull+0x1080>
    4890:	nop
    4894:	mov	sp, x29
    4898:	ldp	x19, x20, [sp, #16]
    489c:	ldp	x21, x22, [sp, #32]
    48a0:	ldp	x23, x24, [sp, #48]
    48a4:	ldp	x25, x26, [sp, #64]
    48a8:	ldr	x27, [sp, #80]
    48ac:	ldp	x29, x30, [sp]
    48b0:	add	sp, sp, #0x2e0
    48b4:	ret

00000000000048b8 <priority_queue_move_task_first>:
    48b8:	stp	x29, x30, [sp, #-64]!
    48bc:	mov	x29, sp
    48c0:	str	w0, [sp, #44]
    48c4:	str	x1, [sp, #32]
    48c8:	str	x2, [sp, #24]
    48cc:	ldr	x0, [sp, #32]
    48d0:	bl	0 <priority_queue_multi_p>
    48d4:	and	w0, w0, #0xff
    48d8:	cmp	w0, #0x0
    48dc:	b.eq	48fc <priority_queue_move_task_first+0x44>  // b.none
    48e0:	ldr	x0, [sp, #24]
    48e4:	ldr	w0, [x0, #88]
    48e8:	mov	w1, w0
    48ec:	ldr	x0, [sp, #32]
    48f0:	bl	104 <priority_queue_lookup_priority>
    48f4:	str	x0, [sp, #56]
    48f8:	b	4908 <priority_queue_move_task_first+0x50>
    48fc:	ldr	x0, [sp, #32]
    4900:	add	x0, x0, #0x8
    4904:	str	x0, [sp, #56]
    4908:	ldr	x1, [sp, #24]
    490c:	ldr	w0, [sp, #44]
    4910:	bl	b00 <task_to_priority_node>
    4914:	mov	w2, #0x0                   	// #0
    4918:	mov	x1, x0
    491c:	ldr	x0, [sp, #56]
    4920:	bl	550 <priority_list_remove>
    4924:	ldr	x0, [sp, #24]
    4928:	ldr	w1, [x0, #88]
    492c:	ldr	w0, [sp, #44]
    4930:	cmp	w0, #0x1
    4934:	cset	w0, eq  // eq = none
    4938:	and	w2, w0, #0xff
    493c:	ldr	x0, [sp, #24]
    4940:	ldrb	w0, [x0, #207]
    4944:	mov	w6, w0
    4948:	mov	w5, w2
    494c:	mov	w4, #0x0                   	// #0
    4950:	mov	w3, w1
    4954:	ldr	x2, [sp, #24]
    4958:	ldr	x1, [sp, #56]
    495c:	ldr	w0, [sp, #44]
    4960:	bl	14c <priority_list_insert>
    4964:	nop
    4968:	ldp	x29, x30, [sp], #64
    496c:	ret

0000000000004970 <gomp_target_task_completion>:
    4970:	stp	x29, x30, [sp, #-48]!
    4974:	mov	x29, sp
    4978:	str	x0, [sp, #24]
    497c:	str	x1, [sp, #16]
    4980:	ldr	x0, [sp, #16]
    4984:	ldr	x0, [x0]
    4988:	str	x0, [sp, #40]
    498c:	ldr	x0, [sp, #40]
    4990:	cmp	x0, #0x0
    4994:	b.eq	49b0 <gomp_target_task_completion+0x40>  // b.none
    4998:	ldr	x0, [sp, #40]
    499c:	add	x0, x0, #0x8
    49a0:	ldr	x2, [sp, #16]
    49a4:	mov	x1, x0
    49a8:	mov	w0, #0x1                   	// #1
    49ac:	bl	48b8 <priority_queue_move_task_first>
    49b0:	ldr	x0, [sp, #16]
    49b4:	ldr	x0, [x0, #40]
    49b8:	str	x0, [sp, #32]
    49bc:	ldr	x0, [sp, #32]
    49c0:	cmp	x0, #0x0
    49c4:	b.eq	49e0 <gomp_target_task_completion+0x70>  // b.none
    49c8:	ldr	x0, [sp, #32]
    49cc:	add	x0, x0, #0x8
    49d0:	ldr	x2, [sp, #16]
    49d4:	mov	x1, x0
    49d8:	mov	w0, #0x2                   	// #2
    49dc:	bl	48b8 <priority_queue_move_task_first>
    49e0:	ldr	x0, [sp, #24]
    49e4:	add	x1, x0, #0x508
    49e8:	ldr	x0, [sp, #16]
    49ec:	ldr	w2, [x0, #88]
    49f0:	ldr	x0, [sp, #16]
    49f4:	ldrb	w0, [x0, #207]
    49f8:	mov	w6, w0
    49fc:	mov	w5, #0x0                   	// #0
    4a00:	mov	w4, #0x0                   	// #0
    4a04:	mov	w3, w2
    4a08:	ldr	x2, [sp, #16]
    4a0c:	mov	w0, #0x0                   	// #0
    4a10:	bl	3fc <priority_queue_insert>
    4a14:	ldr	x0, [sp, #16]
    4a18:	mov	w1, #0x2                   	// #2
    4a1c:	str	w1, [x0, #200]
    4a20:	ldr	x0, [sp, #40]
    4a24:	cmp	x0, #0x0
    4a28:	b.eq	4aa0 <gomp_target_task_completion+0x130>  // b.none
    4a2c:	ldr	x0, [sp, #40]
    4a30:	ldr	x0, [x0, #64]
    4a34:	cmp	x0, #0x0
    4a38:	b.eq	4aa0 <gomp_target_task_completion+0x130>  // b.none
    4a3c:	ldr	x0, [sp, #40]
    4a40:	ldr	x0, [x0, #64]
    4a44:	ldrb	w0, [x0]
    4a48:	cmp	w0, #0x0
    4a4c:	b.eq	4a70 <gomp_target_task_completion+0x100>  // b.none
    4a50:	ldr	x0, [sp, #40]
    4a54:	ldr	x0, [x0, #64]
    4a58:	strb	wzr, [x0]
    4a5c:	ldr	x0, [sp, #40]
    4a60:	ldr	x0, [x0, #64]
    4a64:	add	x0, x0, #0x10
    4a68:	bl	788 <gomp_sem_post>
    4a6c:	b	4aa0 <gomp_target_task_completion+0x130>
    4a70:	ldr	x0, [sp, #40]
    4a74:	ldr	x0, [x0, #64]
    4a78:	ldrb	w0, [x0, #1]
    4a7c:	cmp	w0, #0x0
    4a80:	b.eq	4aa0 <gomp_target_task_completion+0x130>  // b.none
    4a84:	ldr	x0, [sp, #40]
    4a88:	ldr	x0, [x0, #64]
    4a8c:	strb	wzr, [x0, #1]
    4a90:	ldr	x0, [sp, #40]
    4a94:	ldr	x0, [x0, #64]
    4a98:	add	x0, x0, #0x10
    4a9c:	bl	788 <gomp_sem_post>
    4aa0:	ldr	x0, [sp, #32]
    4aa4:	cmp	x0, #0x0
    4aa8:	b.eq	4ad0 <gomp_target_task_completion+0x160>  // b.none
    4aac:	ldr	x0, [sp, #32]
    4ab0:	ldrb	w0, [x0, #48]
    4ab4:	cmp	w0, #0x0
    4ab8:	b.eq	4ad0 <gomp_target_task_completion+0x160>  // b.none
    4abc:	ldr	x0, [sp, #32]
    4ac0:	strb	wzr, [x0, #48]
    4ac4:	ldr	x0, [sp, #32]
    4ac8:	add	x0, x0, #0x34
    4acc:	bl	788 <gomp_sem_post>
    4ad0:	ldr	x0, [sp, #24]
    4ad4:	ldr	w0, [x0, #1324]
    4ad8:	add	w1, w0, #0x1
    4adc:	ldr	x0, [sp, #24]
    4ae0:	str	w1, [x0, #1324]
    4ae4:	ldr	x0, [sp, #24]
    4ae8:	add	x0, x0, #0x80
    4aec:	bl	904 <gomp_team_barrier_set_task_pending>
    4af0:	ldr	x0, [sp, #24]
    4af4:	ldr	w1, [x0]
    4af8:	ldr	x0, [sp, #24]
    4afc:	ldr	w0, [x0, #1328]
    4b00:	cmp	w1, w0
    4b04:	b.ls	4b18 <gomp_target_task_completion+0x1a8>  // b.plast
    4b08:	ldr	x0, [sp, #24]
    4b0c:	add	x0, x0, #0x80
    4b10:	mov	w1, #0x1                   	// #1
    4b14:	bl	0 <gomp_team_barrier_wake>
    4b18:	nop
    4b1c:	ldp	x29, x30, [sp], #48
    4b20:	ret

0000000000004b24 <GOMP_PLUGIN_target_task_completion>:
    4b24:	stp	x29, x30, [sp, #-64]!
    4b28:	mov	x29, sp
    4b2c:	str	x0, [sp, #24]
    4b30:	ldr	x0, [sp, #24]
    4b34:	str	x0, [sp, #56]
    4b38:	ldr	x0, [sp, #56]
    4b3c:	ldr	x0, [x0, #56]
    4b40:	str	x0, [sp, #48]
    4b44:	ldr	x0, [sp, #56]
    4b48:	ldr	x0, [x0, #64]
    4b4c:	str	x0, [sp, #40]
    4b50:	ldr	x0, [sp, #40]
    4b54:	add	x0, x0, #0x500
    4b58:	bl	820 <gomp_mutex_lock>
    4b5c:	ldr	x0, [sp, #56]
    4b60:	ldr	w0, [x0, #44]
    4b64:	cmp	w0, #0x3
    4b68:	b.ne	4b88 <GOMP_PLUGIN_target_task_completion+0x64>  // b.any
    4b6c:	ldr	x0, [sp, #56]
    4b70:	mov	w1, #0x5                   	// #5
    4b74:	str	w1, [x0, #44]
    4b78:	ldr	x0, [sp, #40]
    4b7c:	add	x0, x0, #0x500
    4b80:	bl	894 <gomp_mutex_unlock>
    4b84:	b	4bac <GOMP_PLUGIN_target_task_completion+0x88>
    4b88:	ldr	x0, [sp, #56]
    4b8c:	mov	w1, #0x5                   	// #5
    4b90:	str	w1, [x0, #44]
    4b94:	ldr	x1, [sp, #48]
    4b98:	ldr	x0, [sp, #40]
    4b9c:	bl	4970 <gomp_target_task_completion>
    4ba0:	ldr	x0, [sp, #40]
    4ba4:	add	x0, x0, #0x500
    4ba8:	bl	894 <gomp_mutex_unlock>
    4bac:	ldp	x29, x30, [sp], #64
    4bb0:	ret

0000000000004bb4 <gomp_create_target_task>:
    4bb4:	stp	x29, x30, [sp, #-224]!
    4bb8:	mov	x29, sp
    4bbc:	str	x0, [sp, #72]
    4bc0:	str	x1, [sp, #64]
    4bc4:	str	x2, [sp, #56]
    4bc8:	str	x3, [sp, #48]
    4bcc:	str	x4, [sp, #40]
    4bd0:	str	x5, [sp, #32]
    4bd4:	str	w6, [sp, #28]
    4bd8:	str	x7, [sp, #16]
    4bdc:	bl	a08 <gomp_thread>
    4be0:	str	x0, [sp, #160]
    4be4:	ldr	x0, [sp, #160]
    4be8:	ldr	x0, [x0, #16]
    4bec:	str	x0, [sp, #152]
    4bf0:	adrp	x0, 0 <gomp_cancel_var>
    4bf4:	add	x0, x0, #0x0
    4bf8:	ldrb	w0, [x0]
    4bfc:	and	x0, x0, #0xff
    4c00:	cmp	x0, #0x0
    4c04:	b.eq	4cbc <gomp_create_target_task+0x108>  // b.none
    4c08:	ldr	x0, [sp, #152]
    4c0c:	cmp	x0, #0x0
    4c10:	b.eq	4cbc <gomp_create_target_task+0x108>  // b.none
    4c14:	ldr	x0, [sp, #152]
    4c18:	add	x0, x0, #0x80
    4c1c:	bl	9a4 <gomp_team_barrier_cancelled>
    4c20:	and	w0, w0, #0xff
    4c24:	cmp	w0, #0x0
    4c28:	b.eq	4c34 <gomp_create_target_task+0x80>  // b.none
    4c2c:	mov	w0, #0x1                   	// #1
    4c30:	b	5528 <gomp_create_target_task+0x974>
    4c34:	ldr	x0, [sp, #160]
    4c38:	ldr	x0, [x0, #80]
    4c3c:	ldr	x0, [x0, #40]
    4c40:	cmp	x0, #0x0
    4c44:	b.eq	4cbc <gomp_create_target_task+0x108>  // b.none
    4c48:	ldr	x0, [sp, #160]
    4c4c:	ldr	x0, [x0, #80]
    4c50:	ldr	x0, [x0, #40]
    4c54:	ldrb	w0, [x0, #49]
    4c58:	cmp	w0, #0x0
    4c5c:	b.eq	4c68 <gomp_create_target_task+0xb4>  // b.none
    4c60:	mov	w0, #0x1                   	// #1
    4c64:	b	5528 <gomp_create_target_task+0x974>
    4c68:	ldr	x0, [sp, #160]
    4c6c:	ldr	x0, [x0, #80]
    4c70:	ldr	x0, [x0, #40]
    4c74:	ldrb	w0, [x0, #50]
    4c78:	cmp	w0, #0x0
    4c7c:	b.eq	4cbc <gomp_create_target_task+0x108>  // b.none
    4c80:	ldr	x0, [sp, #160]
    4c84:	ldr	x0, [x0, #80]
    4c88:	ldr	x0, [x0, #40]
    4c8c:	ldr	x0, [x0]
    4c90:	cmp	x0, #0x0
    4c94:	b.eq	4cbc <gomp_create_target_task+0x108>  // b.none
    4c98:	ldr	x0, [sp, #160]
    4c9c:	ldr	x0, [x0, #80]
    4ca0:	ldr	x0, [x0, #40]
    4ca4:	ldr	x0, [x0]
    4ca8:	ldrb	w0, [x0, #49]
    4cac:	cmp	w0, #0x0
    4cb0:	b.eq	4cbc <gomp_create_target_task+0x108>  // b.none
    4cb4:	mov	w0, #0x1                   	// #1
    4cb8:	b	5528 <gomp_create_target_task+0x974>
    4cbc:	ldr	x0, [sp, #160]
    4cc0:	ldr	x0, [x0, #80]
    4cc4:	str	x0, [sp, #144]
    4cc8:	ldr	x0, [sp, #144]
    4ccc:	ldr	x0, [x0, #40]
    4cd0:	str	x0, [sp, #136]
    4cd4:	str	xzr, [sp, #216]
    4cd8:	str	xzr, [sp, #208]
    4cdc:	str	xzr, [sp, #200]
    4ce0:	str	xzr, [sp, #192]
    4ce4:	ldr	x0, [sp, #16]
    4ce8:	cmp	x0, #0x0
    4cec:	b.eq	4d30 <gomp_create_target_task+0x17c>  // b.none
    4cf0:	ldr	x0, [sp, #16]
    4cf4:	ldr	x0, [x0]
    4cf8:	cmp	x0, #0x0
    4cfc:	b.eq	4d0c <gomp_create_target_task+0x158>  // b.none
    4d00:	ldr	x0, [sp, #16]
    4d04:	ldr	x0, [x0]
    4d08:	b	4d14 <gomp_create_target_task+0x160>
    4d0c:	ldr	x0, [sp, #16]
    4d10:	ldr	x0, [x0, #8]
    4d14:	str	x0, [sp, #208]
    4d18:	ldr	x1, [sp, #208]
    4d1c:	mov	x0, x1
    4d20:	lsl	x0, x0, #2
    4d24:	add	x0, x0, x1
    4d28:	lsl	x0, x0, #3
    4d2c:	str	x0, [sp, #216]
    4d30:	ldr	x0, [sp, #64]
    4d34:	cmp	x0, #0x0
    4d38:	b.eq	4e2c <gomp_create_target_task+0x278>  // b.none
    4d3c:	str	xzr, [sp, #184]
    4d40:	b	4df4 <gomp_create_target_task+0x240>
    4d44:	ldr	x0, [sp, #184]
    4d48:	lsl	x0, x0, #1
    4d4c:	ldr	x1, [sp, #32]
    4d50:	add	x0, x1, x0
    4d54:	ldrh	w0, [x0]
    4d58:	and	w0, w0, #0xff
    4d5c:	cmp	w0, #0xc
    4d60:	b.ne	4de8 <gomp_create_target_task+0x234>  // b.any
    4d64:	ldr	x0, [sp, #184]
    4d68:	lsl	x0, x0, #1
    4d6c:	ldr	x1, [sp, #32]
    4d70:	add	x0, x1, x0
    4d74:	ldrh	w0, [x0]
    4d78:	lsr	w0, w0, #8
    4d7c:	and	w0, w0, #0xffff
    4d80:	mov	w1, w0
    4d84:	mov	x0, #0x1                   	// #1
    4d88:	lsl	x0, x0, x1
    4d8c:	str	x0, [sp, #128]
    4d90:	ldr	x1, [sp, #200]
    4d94:	ldr	x0, [sp, #128]
    4d98:	cmp	x1, x0
    4d9c:	b.cs	4da8 <gomp_create_target_task+0x1f4>  // b.hs, b.nlast
    4da0:	ldr	x0, [sp, #128]
    4da4:	str	x0, [sp, #200]
    4da8:	ldr	x1, [sp, #192]
    4dac:	ldr	x0, [sp, #128]
    4db0:	add	x0, x1, x0
    4db4:	sub	x1, x0, #0x1
    4db8:	ldr	x0, [sp, #128]
    4dbc:	neg	x0, x0
    4dc0:	and	x0, x1, x0
    4dc4:	str	x0, [sp, #192]
    4dc8:	ldr	x0, [sp, #184]
    4dcc:	lsl	x0, x0, #3
    4dd0:	ldr	x1, [sp, #40]
    4dd4:	add	x0, x1, x0
    4dd8:	ldr	x0, [x0]
    4ddc:	ldr	x1, [sp, #192]
    4de0:	add	x0, x1, x0
    4de4:	str	x0, [sp, #192]
    4de8:	ldr	x0, [sp, #184]
    4dec:	add	x0, x0, #0x1
    4df0:	str	x0, [sp, #184]
    4df4:	ldr	x1, [sp, #184]
    4df8:	ldr	x0, [sp, #56]
    4dfc:	cmp	x1, x0
    4e00:	b.cc	4d44 <gomp_create_target_task+0x190>  // b.lo, b.ul, b.last
    4e04:	ldr	x0, [sp, #200]
    4e08:	cmp	x0, #0x0
    4e0c:	b.eq	4e28 <gomp_create_target_task+0x274>  // b.none
    4e10:	ldr	x1, [sp, #200]
    4e14:	ldr	x0, [sp, #192]
    4e18:	add	x0, x1, x0
    4e1c:	sub	x0, x0, #0x1
    4e20:	str	x0, [sp, #192]
    4e24:	b	4e2c <gomp_create_target_task+0x278>
    4e28:	str	xzr, [sp, #192]
    4e2c:	ldr	x1, [sp, #56]
    4e30:	mov	x0, x1
    4e34:	lsl	x0, x0, #3
    4e38:	add	x0, x0, x1
    4e3c:	lsl	x0, x0, #1
    4e40:	mov	x1, x0
    4e44:	ldr	x0, [sp, #216]
    4e48:	add	x1, x1, x0
    4e4c:	ldr	x0, [sp, #192]
    4e50:	add	x0, x1, x0
    4e54:	add	x0, x0, #0x120
    4e58:	bl	0 <gomp_malloc>
    4e5c:	str	x0, [sp, #120]
    4e60:	mov	w0, #0x0                   	// #0
    4e64:	bl	a1c <gomp_icv>
    4e68:	mov	x2, x0
    4e6c:	ldr	x1, [sp, #144]
    4e70:	ldr	x0, [sp, #120]
    4e74:	bl	151c <gomp_init_task>
    4e78:	ldr	x0, [sp, #120]
    4e7c:	str	wzr, [x0, #88]
    4e80:	ldr	x0, [sp, #120]
    4e84:	mov	w1, #0x2                   	// #2
    4e88:	str	w1, [x0, #200]
    4e8c:	ldr	x0, [sp, #144]
    4e90:	ldrb	w1, [x0, #204]
    4e94:	ldr	x0, [sp, #120]
    4e98:	strb	w1, [x0, #204]
    4e9c:	ldr	x0, [sp, #120]
    4ea0:	ldr	x1, [sp, #136]
    4ea4:	str	x1, [x0, #40]
    4ea8:	ldr	x1, [sp, #208]
    4eac:	mov	x0, x1
    4eb0:	lsl	x0, x0, #2
    4eb4:	add	x0, x0, x1
    4eb8:	lsl	x0, x0, #3
    4ebc:	add	x0, x0, #0xd0
    4ec0:	ldr	x1, [sp, #120]
    4ec4:	add	x0, x1, x0
    4ec8:	str	x0, [sp, #112]
    4ecc:	ldr	x0, [sp, #112]
    4ed0:	ldr	x1, [sp, #72]
    4ed4:	str	x1, [x0]
    4ed8:	ldr	x0, [sp, #112]
    4edc:	ldr	x1, [sp, #64]
    4ee0:	str	x1, [x0, #8]
    4ee4:	ldr	x0, [sp, #112]
    4ee8:	ldr	x1, [sp, #56]
    4eec:	str	x1, [x0, #16]
    4ef0:	ldr	x0, [sp, #112]
    4ef4:	ldr	x1, [sp, #224]
    4ef8:	str	x1, [x0, #72]
    4efc:	ldr	x0, [sp, #112]
    4f00:	add	x3, x0, #0x50
    4f04:	ldr	x0, [sp, #56]
    4f08:	lsl	x0, x0, #3
    4f0c:	mov	x2, x0
    4f10:	ldr	x1, [sp, #48]
    4f14:	mov	x0, x3
    4f18:	bl	0 <memcpy>
    4f1c:	ldr	x0, [sp, #56]
    4f20:	add	x0, x0, #0xa
    4f24:	lsl	x0, x0, #3
    4f28:	ldr	x1, [sp, #112]
    4f2c:	add	x1, x1, x0
    4f30:	ldr	x0, [sp, #112]
    4f34:	str	x1, [x0, #24]
    4f38:	ldr	x0, [sp, #112]
    4f3c:	ldr	x3, [x0, #24]
    4f40:	ldr	x0, [sp, #56]
    4f44:	lsl	x0, x0, #3
    4f48:	mov	x2, x0
    4f4c:	ldr	x1, [sp, #40]
    4f50:	mov	x0, x3
    4f54:	bl	0 <memcpy>
    4f58:	ldr	x0, [sp, #112]
    4f5c:	ldr	x1, [x0, #24]
    4f60:	ldr	x0, [sp, #56]
    4f64:	lsl	x0, x0, #3
    4f68:	add	x1, x1, x0
    4f6c:	ldr	x0, [sp, #112]
    4f70:	str	x1, [x0, #32]
    4f74:	ldr	x0, [sp, #112]
    4f78:	ldr	x3, [x0, #32]
    4f7c:	ldr	x0, [sp, #56]
    4f80:	lsl	x0, x0, #1
    4f84:	mov	x2, x0
    4f88:	ldr	x1, [sp, #32]
    4f8c:	mov	x0, x3
    4f90:	bl	0 <memcpy>
    4f94:	ldr	x0, [sp, #200]
    4f98:	cmp	x0, #0x0
    4f9c:	b.eq	5104 <gomp_create_target_task+0x550>  // b.none
    4fa0:	ldr	x0, [sp, #112]
    4fa4:	ldr	x1, [x0, #32]
    4fa8:	ldr	x0, [sp, #56]
    4fac:	lsl	x0, x0, #1
    4fb0:	add	x0, x1, x0
    4fb4:	str	x0, [sp, #176]
    4fb8:	ldr	x0, [sp, #200]
    4fbc:	sub	x1, x0, #0x1
    4fc0:	ldr	x0, [sp, #176]
    4fc4:	and	x0, x1, x0
    4fc8:	str	x0, [sp, #104]
    4fcc:	ldr	x0, [sp, #104]
    4fd0:	cmp	x0, #0x0
    4fd4:	b.eq	4ff0 <gomp_create_target_task+0x43c>  // b.none
    4fd8:	ldr	x1, [sp, #200]
    4fdc:	ldr	x0, [sp, #104]
    4fe0:	sub	x0, x1, x0
    4fe4:	ldr	x1, [sp, #176]
    4fe8:	add	x0, x1, x0
    4fec:	str	x0, [sp, #176]
    4ff0:	str	xzr, [sp, #192]
    4ff4:	str	xzr, [sp, #168]
    4ff8:	b	50f4 <gomp_create_target_task+0x540>
    4ffc:	ldr	x0, [sp, #168]
    5000:	lsl	x0, x0, #1
    5004:	ldr	x1, [sp, #32]
    5008:	add	x0, x1, x0
    500c:	ldrh	w0, [x0]
    5010:	and	w0, w0, #0xff
    5014:	cmp	w0, #0xc
    5018:	b.ne	50e8 <gomp_create_target_task+0x534>  // b.any
    501c:	ldr	x0, [sp, #168]
    5020:	lsl	x0, x0, #1
    5024:	ldr	x1, [sp, #32]
    5028:	add	x0, x1, x0
    502c:	ldrh	w0, [x0]
    5030:	lsr	w0, w0, #8
    5034:	and	w0, w0, #0xffff
    5038:	mov	w1, w0
    503c:	mov	x0, #0x1                   	// #1
    5040:	lsl	x0, x0, x1
    5044:	str	x0, [sp, #96]
    5048:	ldr	x1, [sp, #192]
    504c:	ldr	x0, [sp, #96]
    5050:	add	x0, x1, x0
    5054:	sub	x1, x0, #0x1
    5058:	ldr	x0, [sp, #96]
    505c:	neg	x0, x0
    5060:	and	x0, x1, x0
    5064:	str	x0, [sp, #192]
    5068:	ldr	x1, [sp, #176]
    506c:	ldr	x0, [sp, #192]
    5070:	add	x3, x1, x0
    5074:	ldr	x0, [sp, #168]
    5078:	lsl	x0, x0, #3
    507c:	ldr	x1, [sp, #48]
    5080:	add	x0, x1, x0
    5084:	ldr	x4, [x0]
    5088:	ldr	x0, [sp, #168]
    508c:	lsl	x0, x0, #3
    5090:	ldr	x1, [sp, #40]
    5094:	add	x0, x1, x0
    5098:	ldr	x0, [x0]
    509c:	mov	x2, x0
    50a0:	mov	x1, x4
    50a4:	mov	x0, x3
    50a8:	bl	0 <memcpy>
    50ac:	ldr	x1, [sp, #176]
    50b0:	ldr	x0, [sp, #192]
    50b4:	add	x2, x1, x0
    50b8:	ldr	x0, [sp, #112]
    50bc:	ldr	x1, [sp, #168]
    50c0:	add	x1, x1, #0xa
    50c4:	str	x2, [x0, x1, lsl #3]
    50c8:	ldr	x0, [sp, #168]
    50cc:	lsl	x0, x0, #3
    50d0:	ldr	x1, [sp, #40]
    50d4:	add	x0, x1, x0
    50d8:	ldr	x0, [x0]
    50dc:	ldr	x1, [sp, #192]
    50e0:	add	x0, x1, x0
    50e4:	str	x0, [sp, #192]
    50e8:	ldr	x0, [sp, #168]
    50ec:	add	x0, x0, #0x1
    50f0:	str	x0, [sp, #168]
    50f4:	ldr	x1, [sp, #168]
    50f8:	ldr	x0, [sp, #56]
    50fc:	cmp	x1, x0
    5100:	b.cc	4ffc <gomp_create_target_task+0x448>  // b.lo, b.ul, b.last
    5104:	ldr	x0, [sp, #112]
    5108:	ldr	w1, [sp, #28]
    510c:	str	w1, [x0, #40]
    5110:	ldr	x0, [sp, #112]
    5114:	ldr	w1, [sp, #232]
    5118:	str	w1, [x0, #44]
    511c:	ldr	x0, [sp, #112]
    5120:	ldr	x1, [sp, #120]
    5124:	str	x1, [x0, #56]
    5128:	ldr	x0, [sp, #112]
    512c:	ldr	x1, [sp, #152]
    5130:	str	x1, [x0, #64]
    5134:	ldr	x0, [sp, #120]
    5138:	str	xzr, [x0, #184]
    513c:	ldr	x0, [sp, #120]
    5140:	ldr	x1, [sp, #112]
    5144:	str	x1, [x0, #192]
    5148:	ldr	x0, [sp, #120]
    514c:	strb	wzr, [x0, #205]
    5150:	ldr	x0, [sp, #152]
    5154:	add	x0, x0, #0x500
    5158:	bl	820 <gomp_mutex_lock>
    515c:	adrp	x0, 0 <gomp_cancel_var>
    5160:	add	x0, x0, #0x0
    5164:	ldrb	w0, [x0]
    5168:	and	x0, x0, #0xff
    516c:	cmp	x0, #0x0
    5170:	b.eq	5214 <gomp_create_target_task+0x660>  // b.none
    5174:	ldr	x0, [sp, #152]
    5178:	add	x0, x0, #0x80
    517c:	bl	9a4 <gomp_team_barrier_cancelled>
    5180:	and	w0, w0, #0xff
    5184:	cmp	w0, #0x0
    5188:	b.eq	51c4 <gomp_create_target_task+0x610>  // b.none
    518c:	nop
    5190:	b	51a0 <gomp_create_target_task+0x5ec>
    5194:	nop
    5198:	b	51a0 <gomp_create_target_task+0x5ec>
    519c:	nop
    51a0:	ldr	x0, [sp, #152]
    51a4:	add	x0, x0, #0x500
    51a8:	bl	894 <gomp_mutex_unlock>
    51ac:	ldr	x0, [sp, #120]
    51b0:	bl	a70 <gomp_finish_task>
    51b4:	ldr	x0, [sp, #120]
    51b8:	bl	0 <free>
    51bc:	mov	w0, #0x1                   	// #1
    51c0:	b	5528 <gomp_create_target_task+0x974>
    51c4:	ldr	x0, [sp, #136]
    51c8:	cmp	x0, #0x0
    51cc:	b.eq	5214 <gomp_create_target_task+0x660>  // b.none
    51d0:	ldr	x0, [sp, #136]
    51d4:	ldrb	w0, [x0, #49]
    51d8:	cmp	w0, #0x0
    51dc:	b.ne	5194 <gomp_create_target_task+0x5e0>  // b.any
    51e0:	ldr	x0, [sp, #136]
    51e4:	ldrb	w0, [x0, #50]
    51e8:	cmp	w0, #0x0
    51ec:	b.eq	5214 <gomp_create_target_task+0x660>  // b.none
    51f0:	ldr	x0, [sp, #136]
    51f4:	ldr	x0, [x0]
    51f8:	cmp	x0, #0x0
    51fc:	b.eq	5214 <gomp_create_target_task+0x660>  // b.none
    5200:	ldr	x0, [sp, #136]
    5204:	ldr	x0, [x0]
    5208:	ldrb	w0, [x0, #49]
    520c:	cmp	w0, #0x0
    5210:	b.ne	519c <gomp_create_target_task+0x5e8>  // b.any
    5214:	ldr	x0, [sp, #216]
    5218:	cmp	x0, #0x0
    521c:	b.eq	5274 <gomp_create_target_task+0x6c0>  // b.none
    5220:	ldr	x2, [sp, #16]
    5224:	ldr	x1, [sp, #144]
    5228:	ldr	x0, [sp, #120]
    522c:	bl	1730 <gomp_task_handle_depend>
    5230:	ldr	x0, [sp, #120]
    5234:	ldr	x0, [x0, #80]
    5238:	cmp	x0, #0x0
    523c:	b.eq	5274 <gomp_create_target_task+0x6c0>  // b.none
    5240:	ldr	x0, [sp, #136]
    5244:	cmp	x0, #0x0
    5248:	b.eq	5260 <gomp_create_target_task+0x6ac>  // b.none
    524c:	ldr	x0, [sp, #136]
    5250:	ldr	x0, [x0, #56]
    5254:	add	x1, x0, #0x1
    5258:	ldr	x0, [sp, #136]
    525c:	str	x1, [x0, #56]
    5260:	ldr	x0, [sp, #152]
    5264:	add	x0, x0, #0x500
    5268:	bl	894 <gomp_mutex_unlock>
    526c:	mov	w0, #0x1                   	// #1
    5270:	b	5528 <gomp_create_target_task+0x974>
    5274:	ldr	w0, [sp, #232]
    5278:	cmp	w0, #0x0
    527c:	b.ne	52ac <gomp_create_target_task+0x6f8>  // b.any
    5280:	ldr	x0, [sp, #120]
    5284:	bl	5a7c <gomp_task_run_post_handle_depend_hash>
    5288:	ldr	x0, [sp, #152]
    528c:	add	x0, x0, #0x500
    5290:	bl	894 <gomp_mutex_unlock>
    5294:	ldr	x0, [sp, #120]
    5298:	bl	a70 <gomp_finish_task>
    529c:	ldr	x0, [sp, #120]
    52a0:	bl	0 <free>
    52a4:	mov	w0, #0x0                   	// #0
    52a8:	b	5528 <gomp_create_target_task+0x974>
    52ac:	ldr	x0, [sp, #136]
    52b0:	cmp	x0, #0x0
    52b4:	b.eq	52cc <gomp_create_target_task+0x718>  // b.none
    52b8:	ldr	x0, [sp, #136]
    52bc:	ldr	x0, [x0, #56]
    52c0:	add	x1, x0, #0x1
    52c4:	ldr	x0, [sp, #136]
    52c8:	str	x1, [x0, #56]
    52cc:	ldr	x0, [sp, #72]
    52d0:	cmp	x0, #0x0
    52d4:	b.eq	5408 <gomp_create_target_task+0x854>  // b.none
    52d8:	ldr	x0, [sp, #72]
    52dc:	ldr	w0, [x0, #8]
    52e0:	and	w0, w0, #0x4
    52e4:	cmp	w0, #0x0
    52e8:	b.eq	5408 <gomp_create_target_task+0x854>  // b.none
    52ec:	ldr	x0, [sp, #144]
    52f0:	add	x1, x0, #0x8
    52f4:	ldr	x0, [sp, #120]
    52f8:	ldrb	w0, [x0, #207]
    52fc:	mov	w6, w0
    5300:	mov	w5, #0x0                   	// #0
    5304:	mov	w4, #0x1                   	// #1
    5308:	mov	w3, #0x0                   	// #0
    530c:	ldr	x2, [sp, #120]
    5310:	mov	w0, #0x1                   	// #1
    5314:	bl	3fc <priority_queue_insert>
    5318:	ldr	x0, [sp, #136]
    531c:	cmp	x0, #0x0
    5320:	b.eq	5350 <gomp_create_target_task+0x79c>  // b.none
    5324:	ldr	x0, [sp, #136]
    5328:	add	x1, x0, #0x8
    532c:	ldr	x0, [sp, #120]
    5330:	ldrb	w0, [x0, #207]
    5334:	mov	w6, w0
    5338:	mov	w5, #0x0                   	// #0
    533c:	mov	w4, #0x1                   	// #1
    5340:	mov	w3, #0x0                   	// #0
    5344:	ldr	x2, [sp, #120]
    5348:	mov	w0, #0x2                   	// #2
    534c:	bl	3fc <priority_queue_insert>
    5350:	ldr	x0, [sp, #120]
    5354:	str	xzr, [x0, #96]
    5358:	ldr	x0, [sp, #120]
    535c:	str	xzr, [x0, #104]
    5360:	ldr	x0, [sp, #120]
    5364:	mov	w1, #0x3                   	// #3
    5368:	str	w1, [x0, #200]
    536c:	ldr	x0, [sp, #152]
    5370:	ldr	w0, [x0, #1320]
    5374:	add	w1, w0, #0x1
    5378:	ldr	x0, [sp, #152]
    537c:	str	w1, [x0, #1320]
    5380:	ldr	x0, [sp, #152]
    5384:	add	x0, x0, #0x500
    5388:	bl	894 <gomp_mutex_unlock>
    538c:	ldr	x0, [sp, #160]
    5390:	ldr	x1, [sp, #120]
    5394:	str	x1, [x0, #80]
    5398:	ldr	x0, [sp, #120]
    539c:	ldr	x0, [x0, #192]
    53a0:	bl	0 <gomp_target_task_fn>
    53a4:	ldr	x0, [sp, #160]
    53a8:	ldr	x1, [sp, #144]
    53ac:	str	x1, [x0, #80]
    53b0:	ldr	x0, [sp, #152]
    53b4:	add	x0, x0, #0x500
    53b8:	bl	820 <gomp_mutex_lock>
    53bc:	ldr	x0, [sp, #120]
    53c0:	mov	w1, #0x4                   	// #4
    53c4:	str	w1, [x0, #200]
    53c8:	ldr	x0, [sp, #112]
    53cc:	ldr	w0, [x0, #44]
    53d0:	cmp	w0, #0x5
    53d4:	b.ne	53e8 <gomp_create_target_task+0x834>  // b.any
    53d8:	ldr	x1, [sp, #120]
    53dc:	ldr	x0, [sp, #152]
    53e0:	bl	4970 <gomp_target_task_completion>
    53e4:	b	53f4 <gomp_create_target_task+0x840>
    53e8:	ldr	x0, [sp, #112]
    53ec:	mov	w1, #0x4                   	// #4
    53f0:	str	w1, [x0, #44]
    53f4:	ldr	x0, [sp, #152]
    53f8:	add	x0, x0, #0x500
    53fc:	bl	894 <gomp_mutex_unlock>
    5400:	mov	w0, #0x1                   	// #1
    5404:	b	5528 <gomp_create_target_task+0x974>
    5408:	ldr	x0, [sp, #144]
    540c:	add	x1, x0, #0x8
    5410:	ldr	x0, [sp, #120]
    5414:	ldrb	w0, [x0, #207]
    5418:	mov	w6, w0
    541c:	mov	w5, #0x0                   	// #0
    5420:	mov	w4, #0x0                   	// #0
    5424:	mov	w3, #0x0                   	// #0
    5428:	ldr	x2, [sp, #120]
    542c:	mov	w0, #0x1                   	// #1
    5430:	bl	3fc <priority_queue_insert>
    5434:	ldr	x0, [sp, #136]
    5438:	cmp	x0, #0x0
    543c:	b.eq	546c <gomp_create_target_task+0x8b8>  // b.none
    5440:	ldr	x0, [sp, #136]
    5444:	add	x1, x0, #0x8
    5448:	ldr	x0, [sp, #120]
    544c:	ldrb	w0, [x0, #207]
    5450:	mov	w6, w0
    5454:	mov	w5, #0x0                   	// #0
    5458:	mov	w4, #0x0                   	// #0
    545c:	mov	w3, #0x0                   	// #0
    5460:	ldr	x2, [sp, #120]
    5464:	mov	w0, #0x2                   	// #2
    5468:	bl	3fc <priority_queue_insert>
    546c:	ldr	x0, [sp, #152]
    5470:	add	x1, x0, #0x508
    5474:	ldr	x0, [sp, #120]
    5478:	ldrb	w0, [x0, #207]
    547c:	mov	w6, w0
    5480:	mov	w5, #0x0                   	// #0
    5484:	mov	w4, #0x1                   	// #1
    5488:	mov	w3, #0x0                   	// #0
    548c:	ldr	x2, [sp, #120]
    5490:	mov	w0, #0x0                   	// #0
    5494:	bl	3fc <priority_queue_insert>
    5498:	ldr	x0, [sp, #152]
    549c:	ldr	w0, [x0, #1320]
    54a0:	add	w1, w0, #0x1
    54a4:	ldr	x0, [sp, #152]
    54a8:	str	w1, [x0, #1320]
    54ac:	ldr	x0, [sp, #152]
    54b0:	ldr	w0, [x0, #1324]
    54b4:	add	w1, w0, #0x1
    54b8:	ldr	x0, [sp, #152]
    54bc:	str	w1, [x0, #1324]
    54c0:	ldr	x0, [sp, #152]
    54c4:	add	x0, x0, #0x80
    54c8:	bl	904 <gomp_team_barrier_set_task_pending>
    54cc:	ldr	x0, [sp, #152]
    54d0:	ldr	w0, [x0, #1328]
    54d4:	ldr	x1, [sp, #144]
    54d8:	ldrb	w1, [x1, #204]
    54dc:	eor	w1, w1, #0x1
    54e0:	and	w1, w1, #0xff
    54e4:	add	w1, w0, w1
    54e8:	ldr	x0, [sp, #152]
    54ec:	ldr	w0, [x0]
    54f0:	cmp	w1, w0
    54f4:	cset	w0, cc  // cc = lo, ul, last
    54f8:	strb	w0, [sp, #95]
    54fc:	ldr	x0, [sp, #152]
    5500:	add	x0, x0, #0x500
    5504:	bl	894 <gomp_mutex_unlock>
    5508:	ldrb	w0, [sp, #95]
    550c:	cmp	w0, #0x0
    5510:	b.eq	5524 <gomp_create_target_task+0x970>  // b.none
    5514:	ldr	x0, [sp, #152]
    5518:	add	x0, x0, #0x80
    551c:	mov	w1, #0x1                   	// #1
    5520:	bl	0 <gomp_team_barrier_wake>
    5524:	mov	w0, #0x1                   	// #1
    5528:	ldp	x29, x30, [sp], #224
    552c:	ret

0000000000005530 <priority_list_upgrade_task>:
    5530:	sub	sp, sp, #0x20
    5534:	str	x0, [sp, #8]
    5538:	str	x1, [sp]
    553c:	ldr	x0, [sp, #8]
    5540:	ldr	x0, [x0, #16]
    5544:	str	x0, [sp, #24]
    5548:	ldr	x0, [sp, #24]
    554c:	cmp	x0, #0x0
    5550:	b.eq	55bc <priority_list_upgrade_task+0x8c>  // b.none
    5554:	ldr	x0, [sp]
    5558:	ldr	x0, [x0, #8]
    555c:	ldr	x1, [sp]
    5560:	ldr	x1, [x1]
    5564:	str	x1, [x0]
    5568:	ldr	x0, [sp]
    556c:	ldr	x0, [x0]
    5570:	ldr	x1, [sp]
    5574:	ldr	x1, [x1, #8]
    5578:	str	x1, [x0, #8]
    557c:	ldr	x0, [sp]
    5580:	ldr	x1, [sp, #24]
    5584:	str	x1, [x0, #8]
    5588:	ldr	x0, [sp, #24]
    558c:	ldr	x1, [x0]
    5590:	ldr	x0, [sp]
    5594:	str	x1, [x0]
    5598:	ldr	x0, [sp]
    559c:	ldr	x0, [x0, #8]
    55a0:	ldr	x1, [sp]
    55a4:	str	x1, [x0]
    55a8:	ldr	x0, [sp]
    55ac:	ldr	x0, [x0]
    55b0:	ldr	x1, [sp]
    55b4:	str	x1, [x0, #8]
    55b8:	b	5648 <priority_list_upgrade_task+0x118>
    55bc:	ldr	x0, [sp, #8]
    55c0:	ldr	x0, [x0, #8]
    55c4:	ldr	x1, [sp]
    55c8:	cmp	x1, x0
    55cc:	b.eq	5648 <priority_list_upgrade_task+0x118>  // b.none
    55d0:	ldr	x0, [sp]
    55d4:	ldr	x0, [x0, #8]
    55d8:	ldr	x1, [sp]
    55dc:	ldr	x1, [x1]
    55e0:	str	x1, [x0]
    55e4:	ldr	x0, [sp]
    55e8:	ldr	x0, [x0]
    55ec:	ldr	x1, [sp]
    55f0:	ldr	x1, [x1, #8]
    55f4:	str	x1, [x0, #8]
    55f8:	ldr	x0, [sp, #8]
    55fc:	ldr	x0, [x0, #8]
    5600:	ldr	x1, [x0, #8]
    5604:	ldr	x0, [sp]
    5608:	str	x1, [x0, #8]
    560c:	ldr	x0, [sp, #8]
    5610:	ldr	x1, [x0, #8]
    5614:	ldr	x0, [sp]
    5618:	str	x1, [x0]
    561c:	ldr	x0, [sp, #8]
    5620:	ldr	x1, [sp]
    5624:	str	x1, [x0, #8]
    5628:	ldr	x0, [sp]
    562c:	ldr	x0, [x0, #8]
    5630:	ldr	x1, [sp]
    5634:	str	x1, [x0]
    5638:	ldr	x0, [sp]
    563c:	ldr	x0, [x0]
    5640:	ldr	x1, [sp]
    5644:	str	x1, [x0, #8]
    5648:	ldr	x0, [sp, #8]
    564c:	ldr	x1, [sp]
    5650:	str	x1, [x0, #16]
    5654:	nop
    5658:	add	sp, sp, #0x20
    565c:	ret

0000000000005660 <priority_queue_upgrade_task>:
    5660:	stp	x29, x30, [sp, #-64]!
    5664:	mov	x29, sp
    5668:	str	x0, [sp, #24]
    566c:	str	x1, [sp, #16]
    5670:	ldr	x0, [sp, #16]
    5674:	add	x0, x0, #0x8
    5678:	str	x0, [sp, #56]
    567c:	ldr	x0, [sp, #24]
    5680:	add	x0, x0, #0x70
    5684:	str	x0, [sp, #48]
    5688:	ldr	x0, [sp, #56]
    568c:	bl	0 <priority_queue_multi_p>
    5690:	and	w0, w0, #0xff
    5694:	cmp	w0, #0x0
    5698:	b.eq	56c4 <priority_queue_upgrade_task+0x64>  // b.none
    569c:	ldr	x0, [sp, #24]
    56a0:	ldr	w0, [x0, #88]
    56a4:	mov	w1, w0
    56a8:	ldr	x0, [sp, #56]
    56ac:	bl	104 <priority_queue_lookup_priority>
    56b0:	str	x0, [sp, #40]
    56b4:	ldr	x1, [sp, #48]
    56b8:	ldr	x0, [sp, #40]
    56bc:	bl	5530 <priority_list_upgrade_task>
    56c0:	b	56d4 <priority_queue_upgrade_task+0x74>
    56c4:	ldr	x0, [sp, #56]
    56c8:	add	x0, x0, #0x8
    56cc:	ldr	x1, [sp, #48]
    56d0:	bl	5530 <priority_list_upgrade_task>
    56d4:	nop
    56d8:	ldp	x29, x30, [sp], #64
    56dc:	ret

00000000000056e0 <priority_list_downgrade_task>:
    56e0:	stp	x29, x30, [sp, #-80]!
    56e4:	mov	x29, sp
    56e8:	str	w0, [sp, #44]
    56ec:	str	x1, [sp, #32]
    56f0:	str	x2, [sp, #24]
    56f4:	ldr	x1, [sp, #24]
    56f8:	ldr	w0, [sp, #44]
    56fc:	bl	b00 <task_to_priority_node>
    5700:	str	x0, [sp, #72]
    5704:	ldr	x0, [sp, #32]
    5708:	ldr	x0, [x0, #8]
    570c:	ldr	x1, [sp, #72]
    5710:	cmp	x1, x0
    5714:	b.ne	572c <priority_list_downgrade_task+0x4c>  // b.any
    5718:	ldr	x0, [sp, #72]
    571c:	ldr	x1, [x0]
    5720:	ldr	x0, [sp, #32]
    5724:	str	x1, [x0, #8]
    5728:	b	57dc <priority_list_downgrade_task+0xfc>
    572c:	ldr	x0, [sp, #72]
    5730:	ldr	x1, [x0]
    5734:	ldr	x0, [sp, #32]
    5738:	ldr	x0, [x0, #8]
    573c:	cmp	x1, x0
    5740:	b.eq	57dc <priority_list_downgrade_task+0xfc>  // b.none
    5744:	ldr	x0, [sp, #72]
    5748:	ldr	x0, [x0]
    574c:	mov	x1, x0
    5750:	ldr	w0, [sp, #44]
    5754:	bl	ad4 <priority_node_to_task>
    5758:	str	x0, [sp, #64]
    575c:	ldr	x0, [sp, #64]
    5760:	ldr	w0, [x0, #200]
    5764:	cmp	w0, #0x2
    5768:	b.ne	57dc <priority_list_downgrade_task+0xfc>  // b.any
    576c:	ldr	x0, [sp, #72]
    5770:	ldr	x0, [x0, #8]
    5774:	ldr	x1, [sp, #72]
    5778:	ldr	x1, [x1]
    577c:	str	x1, [x0]
    5780:	ldr	x0, [sp, #72]
    5784:	ldr	x0, [x0]
    5788:	ldr	x1, [sp, #72]
    578c:	ldr	x1, [x1, #8]
    5790:	str	x1, [x0, #8]
    5794:	ldr	x0, [sp, #32]
    5798:	ldr	x1, [x0, #8]
    579c:	ldr	x0, [sp, #72]
    57a0:	str	x1, [x0]
    57a4:	ldr	x0, [sp, #32]
    57a8:	ldr	x0, [x0, #8]
    57ac:	ldr	x1, [x0, #8]
    57b0:	ldr	x0, [sp, #72]
    57b4:	str	x1, [x0, #8]
    57b8:	ldr	x0, [sp, #32]
    57bc:	ldr	x0, [x0, #8]
    57c0:	ldr	x0, [x0, #8]
    57c4:	ldr	x1, [sp, #72]
    57c8:	str	x1, [x0]
    57cc:	ldr	x0, [sp, #32]
    57d0:	ldr	x0, [x0, #8]
    57d4:	ldr	x1, [sp, #72]
    57d8:	str	x1, [x0, #8]
    57dc:	ldr	x0, [sp, #24]
    57e0:	ldrb	w0, [x0, #207]
    57e4:	and	x0, x0, #0xff
    57e8:	cmp	x0, #0x0
    57ec:	b.eq	586c <priority_list_downgrade_task+0x18c>  // b.none
    57f0:	ldr	x0, [sp, #32]
    57f4:	ldr	x0, [x0, #16]
    57f8:	ldr	x1, [sp, #72]
    57fc:	cmp	x1, x0
    5800:	b.ne	586c <priority_list_downgrade_task+0x18c>  // b.any
    5804:	ldr	x0, [sp, #72]
    5808:	ldr	x0, [x0, #8]
    580c:	mov	x1, x0
    5810:	ldr	w0, [sp, #44]
    5814:	bl	ad4 <priority_node_to_task>
    5818:	str	x0, [sp, #56]
    581c:	ldr	x0, [sp, #72]
    5820:	ldr	x0, [x0, #8]
    5824:	ldr	x1, [sp, #72]
    5828:	cmp	x1, x0
    582c:	b.eq	5864 <priority_list_downgrade_task+0x184>  // b.none
    5830:	ldr	x0, [sp, #56]
    5834:	ldr	w0, [x0, #200]
    5838:	cmp	w0, #0x2
    583c:	b.ne	5864 <priority_list_downgrade_task+0x184>  // b.any
    5840:	ldr	x0, [sp, #56]
    5844:	ldrb	w0, [x0, #207]
    5848:	cmp	w0, #0x0
    584c:	b.eq	5864 <priority_list_downgrade_task+0x184>  // b.none
    5850:	ldr	x0, [sp, #72]
    5854:	ldr	x1, [x0, #8]
    5858:	ldr	x0, [sp, #32]
    585c:	str	x1, [x0, #16]
    5860:	b	586c <priority_list_downgrade_task+0x18c>
    5864:	ldr	x0, [sp, #32]
    5868:	str	xzr, [x0, #16]
    586c:	nop
    5870:	ldp	x29, x30, [sp], #80
    5874:	ret

0000000000005878 <priority_queue_downgrade_task>:
    5878:	stp	x29, x30, [sp, #-64]!
    587c:	mov	x29, sp
    5880:	str	w0, [sp, #44]
    5884:	str	x1, [sp, #32]
    5888:	str	x2, [sp, #24]
    588c:	ldr	x0, [sp, #32]
    5890:	bl	0 <priority_queue_multi_p>
    5894:	and	w0, w0, #0xff
    5898:	cmp	w0, #0x0
    589c:	b.eq	58cc <priority_queue_downgrade_task+0x54>  // b.none
    58a0:	ldr	x0, [sp, #24]
    58a4:	ldr	w0, [x0, #88]
    58a8:	mov	w1, w0
    58ac:	ldr	x0, [sp, #32]
    58b0:	bl	104 <priority_queue_lookup_priority>
    58b4:	str	x0, [sp, #56]
    58b8:	ldr	x2, [sp, #24]
    58bc:	ldr	x1, [sp, #56]
    58c0:	ldr	w0, [sp, #44]
    58c4:	bl	56e0 <priority_list_downgrade_task>
    58c8:	b	58e4 <priority_queue_downgrade_task+0x6c>
    58cc:	ldr	x0, [sp, #32]
    58d0:	add	x0, x0, #0x8
    58d4:	ldr	x2, [sp, #24]
    58d8:	mov	x1, x0
    58dc:	ldr	w0, [sp, #44]
    58e0:	bl	56e0 <priority_list_downgrade_task>
    58e4:	nop
    58e8:	ldp	x29, x30, [sp], #64
    58ec:	ret

00000000000058f0 <gomp_task_run_pre>:
    58f0:	stp	x29, x30, [sp, #-64]!
    58f4:	mov	x29, sp
    58f8:	str	x0, [sp, #40]
    58fc:	str	x1, [sp, #32]
    5900:	str	x2, [sp, #24]
    5904:	ldr	x0, [sp, #32]
    5908:	cmp	x0, #0x0
    590c:	b.eq	5928 <gomp_task_run_pre+0x38>  // b.none
    5910:	ldr	x0, [sp, #32]
    5914:	add	x0, x0, #0x8
    5918:	ldr	x2, [sp, #40]
    591c:	mov	x1, x0
    5920:	mov	w0, #0x1                   	// #1
    5924:	bl	5878 <priority_queue_downgrade_task>
    5928:	ldr	x0, [sp, #40]
    592c:	ldr	x0, [x0, #40]
    5930:	str	x0, [sp, #56]
    5934:	ldr	x0, [sp, #56]
    5938:	cmp	x0, #0x0
    593c:	b.eq	5958 <gomp_task_run_pre+0x68>  // b.none
    5940:	ldr	x0, [sp, #56]
    5944:	add	x0, x0, #0x8
    5948:	ldr	x2, [sp, #40]
    594c:	mov	x1, x0
    5950:	mov	w0, #0x2                   	// #2
    5954:	bl	5878 <priority_queue_downgrade_task>
    5958:	ldr	x0, [sp, #24]
    595c:	add	x0, x0, #0x508
    5960:	mov	w3, #0x0                   	// #0
    5964:	ldr	x2, [sp, #40]
    5968:	mov	x1, x0
    596c:	mov	w0, #0x0                   	// #0
    5970:	bl	608 <priority_queue_remove>
    5974:	ldr	x0, [sp, #40]
    5978:	str	xzr, [x0, #96]
    597c:	ldr	x0, [sp, #40]
    5980:	str	xzr, [x0, #104]
    5984:	ldr	x0, [sp, #40]
    5988:	mov	w1, #0x3                   	// #3
    598c:	str	w1, [x0, #200]
    5990:	ldr	x0, [sp, #24]
    5994:	ldr	w0, [x0, #1324]
    5998:	sub	w1, w0, #0x1
    599c:	ldr	x0, [sp, #24]
    59a0:	str	w1, [x0, #1324]
    59a4:	ldr	x0, [sp, #24]
    59a8:	ldr	w0, [x0, #1324]
    59ac:	cmp	w0, #0x0
    59b0:	b.ne	59c0 <gomp_task_run_pre+0xd0>  // b.any
    59b4:	ldr	x0, [sp, #24]
    59b8:	add	x0, x0, #0x80
    59bc:	bl	92c <gomp_team_barrier_clear_task_pending>
    59c0:	adrp	x0, 0 <gomp_cancel_var>
    59c4:	add	x0, x0, #0x0
    59c8:	ldrb	w0, [x0]
    59cc:	and	x0, x0, #0xff
    59d0:	cmp	x0, #0x0
    59d4:	b.eq	5a70 <gomp_task_run_pre+0x180>  // b.none
    59d8:	ldr	x0, [sp, #40]
    59dc:	ldrb	w0, [x0, #206]
    59e0:	eor	w0, w0, #0x1
    59e4:	and	w0, w0, #0xff
    59e8:	cmp	w0, #0x0
    59ec:	b.eq	5a70 <gomp_task_run_pre+0x180>  // b.none
    59f0:	ldr	x0, [sp, #24]
    59f4:	add	x0, x0, #0x80
    59f8:	bl	9a4 <gomp_team_barrier_cancelled>
    59fc:	and	w0, w0, #0xff
    5a00:	cmp	w0, #0x0
    5a04:	b.eq	5a10 <gomp_task_run_pre+0x120>  // b.none
    5a08:	mov	w0, #0x1                   	// #1
    5a0c:	b	5a74 <gomp_task_run_pre+0x184>
    5a10:	ldr	x0, [sp, #56]
    5a14:	cmp	x0, #0x0
    5a18:	b.eq	5a70 <gomp_task_run_pre+0x180>  // b.none
    5a1c:	ldr	x0, [sp, #56]
    5a20:	ldrb	w0, [x0, #49]
    5a24:	cmp	w0, #0x0
    5a28:	b.eq	5a34 <gomp_task_run_pre+0x144>  // b.none
    5a2c:	mov	w0, #0x1                   	// #1
    5a30:	b	5a74 <gomp_task_run_pre+0x184>
    5a34:	ldr	x0, [sp, #56]
    5a38:	ldrb	w0, [x0, #50]
    5a3c:	cmp	w0, #0x0
    5a40:	b.eq	5a70 <gomp_task_run_pre+0x180>  // b.none
    5a44:	ldr	x0, [sp, #56]
    5a48:	ldr	x0, [x0]
    5a4c:	cmp	x0, #0x0
    5a50:	b.eq	5a70 <gomp_task_run_pre+0x180>  // b.none
    5a54:	ldr	x0, [sp, #56]
    5a58:	ldr	x0, [x0]
    5a5c:	ldrb	w0, [x0, #49]
    5a60:	cmp	w0, #0x0
    5a64:	b.eq	5a70 <gomp_task_run_pre+0x180>  // b.none
    5a68:	mov	w0, #0x1                   	// #1
    5a6c:	b	5a74 <gomp_task_run_pre+0x184>
    5a70:	mov	w0, #0x0                   	// #0
    5a74:	ldp	x29, x30, [sp], #64
    5a78:	ret

0000000000005a7c <gomp_task_run_post_handle_depend_hash>:
    5a7c:	stp	x29, x30, [sp, #-64]!
    5a80:	mov	x29, sp
    5a84:	str	x0, [sp, #24]
    5a88:	ldr	x0, [sp, #24]
    5a8c:	ldr	x0, [x0]
    5a90:	str	x0, [sp, #48]
    5a94:	str	xzr, [sp, #56]
    5a98:	b	5c88 <gomp_task_run_post_handle_depend_hash+0x20c>
    5a9c:	ldr	x2, [sp, #24]
    5aa0:	ldr	x1, [sp, #56]
    5aa4:	mov	x0, x1
    5aa8:	lsl	x0, x0, #2
    5aac:	add	x0, x0, x1
    5ab0:	lsl	x0, x0, #3
    5ab4:	add	x0, x2, x0
    5ab8:	ldrb	w0, [x0, #241]
    5abc:	eor	w0, w0, #0x1
    5ac0:	and	w0, w0, #0xff
    5ac4:	cmp	w0, #0x0
    5ac8:	b.eq	5c7c <gomp_task_run_post_handle_depend_hash+0x200>  // b.none
    5acc:	ldr	x2, [sp, #24]
    5ad0:	ldr	x1, [sp, #56]
    5ad4:	mov	x0, x1
    5ad8:	lsl	x0, x0, #2
    5adc:	add	x0, x0, x1
    5ae0:	lsl	x0, x0, #3
    5ae4:	add	x0, x2, x0
    5ae8:	ldr	x0, [x0, #216]
    5aec:	cmp	x0, #0x0
    5af0:	b.eq	5b38 <gomp_task_run_post_handle_depend_hash+0xbc>  // b.none
    5af4:	ldr	x2, [sp, #24]
    5af8:	ldr	x1, [sp, #56]
    5afc:	mov	x0, x1
    5b00:	lsl	x0, x0, #2
    5b04:	add	x0, x0, x1
    5b08:	lsl	x0, x0, #3
    5b0c:	add	x0, x2, x0
    5b10:	ldr	x2, [x0, #216]
    5b14:	ldr	x3, [sp, #24]
    5b18:	ldr	x1, [sp, #56]
    5b1c:	mov	x0, x1
    5b20:	lsl	x0, x0, #2
    5b24:	add	x0, x0, x1
    5b28:	lsl	x0, x0, #3
    5b2c:	add	x0, x3, x0
    5b30:	ldr	x0, [x0, #224]
    5b34:	str	x0, [x2, #16]
    5b38:	ldr	x2, [sp, #24]
    5b3c:	ldr	x1, [sp, #56]
    5b40:	mov	x0, x1
    5b44:	lsl	x0, x0, #2
    5b48:	add	x0, x0, x1
    5b4c:	lsl	x0, x0, #3
    5b50:	add	x0, x2, x0
    5b54:	ldr	x0, [x0, #224]
    5b58:	cmp	x0, #0x0
    5b5c:	b.eq	5ba8 <gomp_task_run_post_handle_depend_hash+0x12c>  // b.none
    5b60:	ldr	x2, [sp, #24]
    5b64:	ldr	x1, [sp, #56]
    5b68:	mov	x0, x1
    5b6c:	lsl	x0, x0, #2
    5b70:	add	x0, x0, x1
    5b74:	lsl	x0, x0, #3
    5b78:	add	x0, x2, x0
    5b7c:	ldr	x2, [x0, #224]
    5b80:	ldr	x3, [sp, #24]
    5b84:	ldr	x1, [sp, #56]
    5b88:	mov	x0, x1
    5b8c:	lsl	x0, x0, #2
    5b90:	add	x0, x0, x1
    5b94:	lsl	x0, x0, #3
    5b98:	add	x0, x3, x0
    5b9c:	ldr	x0, [x0, #216]
    5ba0:	str	x0, [x2, #8]
    5ba4:	b	5c7c <gomp_task_run_post_handle_depend_hash+0x200>
    5ba8:	ldr	x0, [sp, #48]
    5bac:	add	x3, x0, #0x38
    5bb0:	ldr	x1, [sp, #56]
    5bb4:	mov	x0, x1
    5bb8:	lsl	x0, x0, #2
    5bbc:	add	x0, x0, x1
    5bc0:	lsl	x0, x0, #3
    5bc4:	add	x0, x0, #0xd0
    5bc8:	ldr	x1, [sp, #24]
    5bcc:	add	x0, x1, x0
    5bd0:	mov	w2, #0x0                   	// #0
    5bd4:	mov	x1, x0
    5bd8:	mov	x0, x3
    5bdc:	bl	1194 <htab_find_slot>
    5be0:	str	x0, [sp, #40]
    5be4:	ldr	x0, [sp, #40]
    5be8:	ldr	x2, [x0]
    5bec:	ldr	x1, [sp, #56]
    5bf0:	mov	x0, x1
    5bf4:	lsl	x0, x0, #2
    5bf8:	add	x0, x0, x1
    5bfc:	lsl	x0, x0, #3
    5c00:	add	x0, x0, #0xd0
    5c04:	ldr	x1, [sp, #24]
    5c08:	add	x0, x1, x0
    5c0c:	cmp	x2, x0
    5c10:	b.eq	5c18 <gomp_task_run_post_handle_depend_hash+0x19c>  // b.none
    5c14:	bl	0 <abort>
    5c18:	ldr	x2, [sp, #24]
    5c1c:	ldr	x1, [sp, #56]
    5c20:	mov	x0, x1
    5c24:	lsl	x0, x0, #2
    5c28:	add	x0, x0, x1
    5c2c:	lsl	x0, x0, #3
    5c30:	add	x0, x2, x0
    5c34:	ldr	x0, [x0, #216]
    5c38:	cmp	x0, #0x0
    5c3c:	b.eq	5c6c <gomp_task_run_post_handle_depend_hash+0x1f0>  // b.none
    5c40:	ldr	x2, [sp, #24]
    5c44:	ldr	x1, [sp, #56]
    5c48:	mov	x0, x1
    5c4c:	lsl	x0, x0, #2
    5c50:	add	x0, x0, x1
    5c54:	lsl	x0, x0, #3
    5c58:	add	x0, x2, x0
    5c5c:	ldr	x1, [x0, #216]
    5c60:	ldr	x0, [sp, #40]
    5c64:	str	x1, [x0]
    5c68:	b	5c7c <gomp_task_run_post_handle_depend_hash+0x200>
    5c6c:	ldr	x0, [sp, #48]
    5c70:	ldr	x0, [x0, #56]
    5c74:	ldr	x1, [sp, #40]
    5c78:	bl	13fc <htab_clear_slot>
    5c7c:	ldr	x0, [sp, #56]
    5c80:	add	x0, x0, #0x1
    5c84:	str	x0, [sp, #56]
    5c88:	ldr	x0, [sp, #24]
    5c8c:	ldr	x0, [x0, #72]
    5c90:	ldr	x1, [sp, #56]
    5c94:	cmp	x1, x0
    5c98:	b.cc	5a9c <gomp_task_run_post_handle_depend_hash+0x20>  // b.lo, b.ul, b.last
    5c9c:	nop
    5ca0:	nop
    5ca4:	ldp	x29, x30, [sp], #64
    5ca8:	ret

0000000000005cac <gomp_task_run_post_handle_dependers>:
    5cac:	stp	x29, x30, [sp, #-80]!
    5cb0:	mov	x29, sp
    5cb4:	str	x0, [sp, #24]
    5cb8:	str	x1, [sp, #16]
    5cbc:	ldr	x0, [sp, #24]
    5cc0:	ldr	x0, [x0]
    5cc4:	str	x0, [sp, #56]
    5cc8:	ldr	x0, [sp, #24]
    5ccc:	ldr	x0, [x0, #48]
    5cd0:	ldr	x0, [x0]
    5cd4:	str	x0, [sp, #48]
    5cd8:	str	xzr, [sp, #64]
    5cdc:	str	xzr, [sp, #72]
    5ce0:	b	5ec0 <gomp_task_run_post_handle_dependers+0x214>
    5ce4:	ldr	x0, [sp, #24]
    5ce8:	ldr	x0, [x0, #48]
    5cec:	ldr	x1, [sp, #72]
    5cf0:	add	x1, x1, #0x2
    5cf4:	ldr	x0, [x0, x1, lsl #3]
    5cf8:	str	x0, [sp, #40]
    5cfc:	ldr	x0, [sp, #40]
    5d00:	ldr	x0, [x0, #80]
    5d04:	sub	x1, x0, #0x1
    5d08:	ldr	x0, [sp, #40]
    5d0c:	str	x1, [x0, #80]
    5d10:	ldr	x0, [sp, #40]
    5d14:	ldr	x0, [x0, #80]
    5d18:	cmp	x0, #0x0
    5d1c:	b.ne	5eb0 <gomp_task_run_post_handle_dependers+0x204>  // b.any
    5d20:	ldr	x0, [sp, #40]
    5d24:	ldr	x0, [x0, #40]
    5d28:	str	x0, [sp, #32]
    5d2c:	ldr	x0, [sp, #56]
    5d30:	cmp	x0, #0x0
    5d34:	b.eq	5de0 <gomp_task_run_post_handle_dependers+0x134>  // b.none
    5d38:	ldr	x0, [sp, #56]
    5d3c:	add	x1, x0, #0x8
    5d40:	ldr	x0, [sp, #40]
    5d44:	ldr	w2, [x0, #88]
    5d48:	ldr	x0, [sp, #40]
    5d4c:	ldrb	w0, [x0, #207]
    5d50:	mov	w6, w0
    5d54:	mov	w5, #0x1                   	// #1
    5d58:	mov	w4, #0x0                   	// #0
    5d5c:	mov	w3, w2
    5d60:	ldr	x2, [sp, #40]
    5d64:	mov	w0, #0x1                   	// #1
    5d68:	bl	3fc <priority_queue_insert>
    5d6c:	ldr	x0, [sp, #56]
    5d70:	ldr	x0, [x0, #64]
    5d74:	cmp	x0, #0x0
    5d78:	b.eq	5de0 <gomp_task_run_post_handle_dependers+0x134>  // b.none
    5d7c:	ldr	x0, [sp, #56]
    5d80:	ldr	x0, [x0, #64]
    5d84:	ldrb	w0, [x0]
    5d88:	cmp	w0, #0x0
    5d8c:	b.eq	5db0 <gomp_task_run_post_handle_dependers+0x104>  // b.none
    5d90:	ldr	x0, [sp, #56]
    5d94:	ldr	x0, [x0, #64]
    5d98:	strb	wzr, [x0]
    5d9c:	ldr	x0, [sp, #56]
    5da0:	ldr	x0, [x0, #64]
    5da4:	add	x0, x0, #0x10
    5da8:	bl	788 <gomp_sem_post>
    5dac:	b	5de0 <gomp_task_run_post_handle_dependers+0x134>
    5db0:	ldr	x0, [sp, #56]
    5db4:	ldr	x0, [x0, #64]
    5db8:	ldrb	w0, [x0, #1]
    5dbc:	cmp	w0, #0x0
    5dc0:	b.eq	5de0 <gomp_task_run_post_handle_dependers+0x134>  // b.none
    5dc4:	ldr	x0, [sp, #56]
    5dc8:	ldr	x0, [x0, #64]
    5dcc:	strb	wzr, [x0, #1]
    5dd0:	ldr	x0, [sp, #56]
    5dd4:	ldr	x0, [x0, #64]
    5dd8:	add	x0, x0, #0x10
    5ddc:	bl	788 <gomp_sem_post>
    5de0:	ldr	x0, [sp, #32]
    5de4:	cmp	x0, #0x0
    5de8:	b.eq	5e44 <gomp_task_run_post_handle_dependers+0x198>  // b.none
    5dec:	ldr	x0, [sp, #32]
    5df0:	add	x1, x0, #0x8
    5df4:	ldr	x0, [sp, #40]
    5df8:	ldr	w2, [x0, #88]
    5dfc:	ldr	x0, [sp, #40]
    5e00:	ldrb	w0, [x0, #207]
    5e04:	mov	w6, w0
    5e08:	mov	w5, #0x0                   	// #0
    5e0c:	mov	w4, #0x0                   	// #0
    5e10:	mov	w3, w2
    5e14:	ldr	x2, [sp, #40]
    5e18:	mov	w0, #0x2                   	// #2
    5e1c:	bl	3fc <priority_queue_insert>
    5e20:	ldr	x0, [sp, #32]
    5e24:	ldrb	w0, [x0, #48]
    5e28:	cmp	w0, #0x0
    5e2c:	b.eq	5e44 <gomp_task_run_post_handle_dependers+0x198>  // b.none
    5e30:	ldr	x0, [sp, #32]
    5e34:	strb	wzr, [x0, #48]
    5e38:	ldr	x0, [sp, #32]
    5e3c:	add	x0, x0, #0x34
    5e40:	bl	788 <gomp_sem_post>
    5e44:	ldr	x0, [sp, #16]
    5e48:	add	x1, x0, #0x508
    5e4c:	ldr	x0, [sp, #40]
    5e50:	ldr	w2, [x0, #88]
    5e54:	ldr	x0, [sp, #40]
    5e58:	ldrb	w0, [x0, #207]
    5e5c:	mov	w6, w0
    5e60:	mov	w5, #0x0                   	// #0
    5e64:	mov	w4, #0x1                   	// #1
    5e68:	mov	w3, w2
    5e6c:	ldr	x2, [sp, #40]
    5e70:	mov	w0, #0x0                   	// #0
    5e74:	bl	3fc <priority_queue_insert>
    5e78:	ldr	x0, [sp, #16]
    5e7c:	ldr	w0, [x0, #1320]
    5e80:	add	w1, w0, #0x1
    5e84:	ldr	x0, [sp, #16]
    5e88:	str	w1, [x0, #1320]
    5e8c:	ldr	x0, [sp, #16]
    5e90:	ldr	w0, [x0, #1324]
    5e94:	add	w1, w0, #0x1
    5e98:	ldr	x0, [sp, #16]
    5e9c:	str	w1, [x0, #1324]
    5ea0:	ldr	x0, [sp, #64]
    5ea4:	add	x0, x0, #0x1
    5ea8:	str	x0, [sp, #64]
    5eac:	b	5eb4 <gomp_task_run_post_handle_dependers+0x208>
    5eb0:	nop
    5eb4:	ldr	x0, [sp, #72]
    5eb8:	add	x0, x0, #0x1
    5ebc:	str	x0, [sp, #72]
    5ec0:	ldr	x1, [sp, #72]
    5ec4:	ldr	x0, [sp, #48]
    5ec8:	cmp	x1, x0
    5ecc:	b.cc	5ce4 <gomp_task_run_post_handle_dependers+0x38>  // b.lo, b.ul, b.last
    5ed0:	ldr	x0, [sp, #24]
    5ed4:	ldr	x0, [x0, #48]
    5ed8:	bl	0 <free>
    5edc:	ldr	x0, [sp, #24]
    5ee0:	str	xzr, [x0, #48]
    5ee4:	ldr	x0, [sp, #64]
    5ee8:	cmp	x0, #0x1
    5eec:	b.ls	5efc <gomp_task_run_post_handle_dependers+0x250>  // b.plast
    5ef0:	ldr	x0, [sp, #16]
    5ef4:	add	x0, x0, #0x80
    5ef8:	bl	904 <gomp_team_barrier_set_task_pending>
    5efc:	ldr	x0, [sp, #64]
    5f00:	ldp	x29, x30, [sp], #80
    5f04:	ret

0000000000005f08 <gomp_task_run_post_handle_depend>:
    5f08:	stp	x29, x30, [sp, #-32]!
    5f0c:	mov	x29, sp
    5f10:	str	x0, [sp, #24]
    5f14:	str	x1, [sp, #16]
    5f18:	ldr	x0, [sp, #24]
    5f1c:	ldr	x0, [x0, #72]
    5f20:	cmp	x0, #0x0
    5f24:	b.ne	5f30 <gomp_task_run_post_handle_depend+0x28>  // b.any
    5f28:	mov	x0, #0x0                   	// #0
    5f2c:	b	5f6c <gomp_task_run_post_handle_depend+0x64>
    5f30:	ldr	x0, [sp, #24]
    5f34:	ldr	x0, [x0]
    5f38:	cmp	x0, #0x0
    5f3c:	b.eq	5f48 <gomp_task_run_post_handle_depend+0x40>  // b.none
    5f40:	ldr	x0, [sp, #24]
    5f44:	bl	5a7c <gomp_task_run_post_handle_depend_hash>
    5f48:	ldr	x0, [sp, #24]
    5f4c:	ldr	x0, [x0, #48]
    5f50:	cmp	x0, #0x0
    5f54:	b.ne	5f60 <gomp_task_run_post_handle_depend+0x58>  // b.any
    5f58:	mov	x0, #0x0                   	// #0
    5f5c:	b	5f6c <gomp_task_run_post_handle_depend+0x64>
    5f60:	ldr	x1, [sp, #16]
    5f64:	ldr	x0, [sp, #24]
    5f68:	bl	5cac <gomp_task_run_post_handle_dependers>
    5f6c:	ldp	x29, x30, [sp], #32
    5f70:	ret

0000000000005f74 <gomp_task_run_post_remove_parent>:
    5f74:	stp	x29, x30, [sp, #-48]!
    5f78:	mov	x29, sp
    5f7c:	str	x0, [sp, #24]
    5f80:	ldr	x0, [sp, #24]
    5f84:	ldr	x0, [x0]
    5f88:	str	x0, [sp, #40]
    5f8c:	ldr	x0, [sp, #40]
    5f90:	cmp	x0, #0x0
    5f94:	b.eq	6078 <gomp_task_run_post_remove_parent+0x104>  // b.none
    5f98:	ldr	x0, [sp, #24]
    5f9c:	ldrb	w0, [x0, #207]
    5fa0:	and	x0, x0, #0xff
    5fa4:	cmp	x0, #0x0
    5fa8:	b.eq	5ffc <gomp_task_run_post_remove_parent+0x88>  // b.none
    5fac:	ldr	x0, [sp, #40]
    5fb0:	ldr	x0, [x0, #64]
    5fb4:	ldr	x1, [x0, #8]
    5fb8:	sub	x1, x1, #0x1
    5fbc:	str	x1, [x0, #8]
    5fc0:	ldr	x0, [x0, #8]
    5fc4:	cmp	x0, #0x0
    5fc8:	b.ne	5ffc <gomp_task_run_post_remove_parent+0x88>  // b.any
    5fcc:	ldr	x0, [sp, #40]
    5fd0:	ldr	x0, [x0, #64]
    5fd4:	ldrb	w0, [x0, #1]
    5fd8:	cmp	w0, #0x0
    5fdc:	b.eq	5ffc <gomp_task_run_post_remove_parent+0x88>  // b.none
    5fe0:	ldr	x0, [sp, #40]
    5fe4:	ldr	x0, [x0, #64]
    5fe8:	strb	wzr, [x0, #1]
    5fec:	ldr	x0, [sp, #40]
    5ff0:	ldr	x0, [x0, #64]
    5ff4:	add	x0, x0, #0x10
    5ff8:	bl	788 <gomp_sem_post>
    5ffc:	ldr	x0, [sp, #40]
    6000:	add	x0, x0, #0x8
    6004:	mov	w3, #0x3                   	// #3
    6008:	ldr	x2, [sp, #24]
    600c:	mov	x1, x0
    6010:	mov	w0, #0x1                   	// #1
    6014:	bl	608 <priority_queue_remove>
    6018:	and	w0, w0, #0xff
    601c:	cmp	w0, #0x0
    6020:	b.eq	6064 <gomp_task_run_post_remove_parent+0xf0>  // b.none
    6024:	ldr	x0, [sp, #40]
    6028:	ldr	x0, [x0, #64]
    602c:	cmp	x0, #0x0
    6030:	b.eq	6064 <gomp_task_run_post_remove_parent+0xf0>  // b.none
    6034:	ldr	x0, [sp, #40]
    6038:	ldr	x0, [x0, #64]
    603c:	ldrb	w0, [x0]
    6040:	cmp	w0, #0x0
    6044:	b.eq	6064 <gomp_task_run_post_remove_parent+0xf0>  // b.none
    6048:	ldr	x0, [sp, #40]
    604c:	ldr	x0, [x0, #64]
    6050:	strb	wzr, [x0]
    6054:	ldr	x0, [sp, #40]
    6058:	ldr	x0, [x0, #64]
    605c:	add	x0, x0, #0x10
    6060:	bl	788 <gomp_sem_post>
    6064:	ldr	x0, [sp, #24]
    6068:	str	xzr, [x0, #112]
    606c:	ldr	x0, [sp, #24]
    6070:	str	xzr, [x0, #120]
    6074:	b	607c <gomp_task_run_post_remove_parent+0x108>
    6078:	nop
    607c:	ldp	x29, x30, [sp], #48
    6080:	ret

0000000000006084 <gomp_task_run_post_remove_taskgroup>:
    6084:	stp	x29, x30, [sp, #-48]!
    6088:	mov	x29, sp
    608c:	str	x0, [sp, #24]
    6090:	ldr	x0, [sp, #24]
    6094:	ldr	x0, [x0, #40]
    6098:	str	x0, [sp, #40]
    609c:	ldr	x0, [sp, #40]
    60a0:	cmp	x0, #0x0
    60a4:	b.eq	6140 <gomp_task_run_post_remove_taskgroup+0xbc>  // b.none
    60a8:	ldr	x0, [sp, #40]
    60ac:	add	x0, x0, #0x8
    60b0:	mov	w3, #0x0                   	// #0
    60b4:	ldr	x2, [sp, #24]
    60b8:	mov	x1, x0
    60bc:	mov	w0, #0x2                   	// #2
    60c0:	bl	608 <priority_queue_remove>
    60c4:	strb	w0, [sp, #39]
    60c8:	ldr	x0, [sp, #24]
    60cc:	str	xzr, [x0, #128]
    60d0:	ldr	x0, [sp, #24]
    60d4:	str	xzr, [x0, #136]
    60d8:	ldr	x0, [sp, #40]
    60dc:	ldr	x0, [x0, #56]
    60e0:	cmp	x0, #0x1
    60e4:	b.ls	6100 <gomp_task_run_post_remove_taskgroup+0x7c>  // b.plast
    60e8:	ldr	x0, [sp, #40]
    60ec:	ldr	x0, [x0, #56]
    60f0:	sub	x1, x0, #0x1
    60f4:	ldr	x0, [sp, #40]
    60f8:	str	x1, [x0, #56]
    60fc:	b	610c <gomp_task_run_post_remove_taskgroup+0x88>
    6100:	ldr	x0, [sp, #40]
    6104:	add	x0, x0, #0x38
    6108:	stlr	xzr, [x0]
    610c:	ldrb	w0, [sp, #39]
    6110:	cmp	w0, #0x0
    6114:	b.eq	6144 <gomp_task_run_post_remove_taskgroup+0xc0>  // b.none
    6118:	ldr	x0, [sp, #40]
    611c:	ldrb	w0, [x0, #48]
    6120:	cmp	w0, #0x0
    6124:	b.eq	6144 <gomp_task_run_post_remove_taskgroup+0xc0>  // b.none
    6128:	ldr	x0, [sp, #40]
    612c:	strb	wzr, [x0, #48]
    6130:	ldr	x0, [sp, #40]
    6134:	add	x0, x0, #0x34
    6138:	bl	788 <gomp_sem_post>
    613c:	b	6144 <gomp_task_run_post_remove_taskgroup+0xc0>
    6140:	nop
    6144:	ldp	x29, x30, [sp], #48
    6148:	ret

000000000000614c <gomp_barrier_handle_tasks>:
    614c:	stp	x29, x30, [sp, #-112]!
    6150:	mov	x29, sp
    6154:	str	w0, [sp, #28]
    6158:	bl	a08 <gomp_thread>
    615c:	str	x0, [sp, #80]
    6160:	ldr	x0, [sp, #80]
    6164:	ldr	x0, [x0, #16]
    6168:	str	x0, [sp, #72]
    616c:	ldr	x0, [sp, #80]
    6170:	ldr	x0, [x0, #80]
    6174:	str	x0, [sp, #64]
    6178:	str	xzr, [sp, #104]
    617c:	str	xzr, [sp, #96]
    6180:	str	wzr, [sp, #92]
    6184:	ldr	x0, [sp, #72]
    6188:	add	x0, x0, #0x500
    618c:	bl	820 <gomp_mutex_lock>
    6190:	ldr	w0, [sp, #28]
    6194:	bl	8e0 <gomp_barrier_last_thread>
    6198:	and	w0, w0, #0xff
    619c:	cmp	w0, #0x0
    61a0:	b.eq	61f0 <gomp_barrier_handle_tasks+0xa4>  // b.none
    61a4:	ldr	x0, [sp, #72]
    61a8:	ldr	w0, [x0, #1320]
    61ac:	cmp	w0, #0x0
    61b0:	b.ne	61e4 <gomp_barrier_handle_tasks+0x98>  // b.any
    61b4:	ldr	x0, [sp, #72]
    61b8:	add	x0, x0, #0x80
    61bc:	ldr	w1, [sp, #28]
    61c0:	bl	9dc <gomp_team_barrier_done>
    61c4:	ldr	x0, [sp, #72]
    61c8:	add	x0, x0, #0x500
    61cc:	bl	894 <gomp_mutex_unlock>
    61d0:	ldr	x0, [sp, #72]
    61d4:	add	x0, x0, #0x80
    61d8:	mov	w1, #0x0                   	// #0
    61dc:	bl	0 <gomp_team_barrier_wake>
    61e0:	b	6518 <gomp_barrier_handle_tasks+0x3cc>
    61e4:	ldr	x0, [sp, #72]
    61e8:	add	x0, x0, #0x80
    61ec:	bl	954 <gomp_team_barrier_set_waiting_for_tasks>
    61f0:	strb	wzr, [sp, #91]
    61f4:	ldr	x0, [sp, #72]
    61f8:	add	x0, x0, #0x508
    61fc:	mov	w1, #0x0                   	// #0
    6200:	bl	60 <priority_queue_empty_p>
    6204:	and	w0, w0, #0xff
    6208:	eor	w0, w0, #0x1
    620c:	and	w0, w0, #0xff
    6210:	cmp	w0, #0x0
    6214:	b.eq	62ac <gomp_barrier_handle_tasks+0x160>  // b.none
    6218:	ldr	x0, [sp, #72]
    621c:	add	x0, x0, #0x508
    6220:	add	x1, sp, #0x2f
    6224:	mov	x4, x1
    6228:	mov	x3, #0x0                   	// #0
    622c:	mov	w2, #0x3e7                 	// #999
    6230:	mov	x1, x0
    6234:	mov	w0, #0x0                   	// #0
    6238:	bl	4ac <priority_queue_next_task>
    623c:	str	x0, [sp, #104]
    6240:	ldr	x0, [sp, #104]
    6244:	ldr	x0, [x0]
    6248:	ldr	x2, [sp, #72]
    624c:	mov	x1, x0
    6250:	ldr	x0, [sp, #104]
    6254:	bl	58f0 <gomp_task_run_pre>
    6258:	strb	w0, [sp, #91]
    625c:	ldrb	w0, [sp, #91]
    6260:	cmp	x0, #0x0
    6264:	b.eq	628c <gomp_barrier_handle_tasks+0x140>  // b.none
    6268:	ldr	x0, [sp, #96]
    626c:	cmp	x0, #0x0
    6270:	b.eq	63fc <gomp_barrier_handle_tasks+0x2b0>  // b.none
    6274:	ldr	x0, [sp, #96]
    6278:	bl	a70 <gomp_finish_task>
    627c:	ldr	x0, [sp, #96]
    6280:	bl	0 <free>
    6284:	str	xzr, [sp, #96]
    6288:	b	6400 <gomp_barrier_handle_tasks+0x2b4>
    628c:	ldr	x0, [sp, #72]
    6290:	ldr	w0, [x0, #1328]
    6294:	add	w1, w0, #0x1
    6298:	ldr	x0, [sp, #72]
    629c:	str	w1, [x0, #1328]
    62a0:	ldr	x0, [sp, #104]
    62a4:	mov	w1, #0x1                   	// #1
    62a8:	strb	w1, [x0, #204]
    62ac:	ldr	x0, [sp, #72]
    62b0:	add	x0, x0, #0x500
    62b4:	bl	894 <gomp_mutex_unlock>
    62b8:	ldr	w0, [sp, #92]
    62bc:	cmp	w0, #0x0
    62c0:	b.eq	62d8 <gomp_barrier_handle_tasks+0x18c>  // b.none
    62c4:	ldr	x0, [sp, #72]
    62c8:	add	x0, x0, #0x80
    62cc:	ldr	w1, [sp, #92]
    62d0:	bl	0 <gomp_team_barrier_wake>
    62d4:	str	wzr, [sp, #92]
    62d8:	ldr	x0, [sp, #96]
    62dc:	cmp	x0, #0x0
    62e0:	b.eq	62f8 <gomp_barrier_handle_tasks+0x1ac>  // b.none
    62e4:	ldr	x0, [sp, #96]
    62e8:	bl	a70 <gomp_finish_task>
    62ec:	ldr	x0, [sp, #96]
    62f0:	bl	0 <free>
    62f4:	str	xzr, [sp, #96]
    62f8:	ldr	x0, [sp, #104]
    62fc:	cmp	x0, #0x0
    6300:	b.eq	6514 <gomp_barrier_handle_tasks+0x3c8>  // b.none
    6304:	ldr	x0, [sp, #80]
    6308:	ldr	x1, [sp, #104]
    630c:	str	x1, [x0, #80]
    6310:	ldr	x0, [sp, #104]
    6314:	ldr	x0, [x0, #184]
    6318:	cmp	x0, #0x0
    631c:	cset	w0, eq  // eq = none
    6320:	and	w0, w0, #0xff
    6324:	and	x0, x0, #0xff
    6328:	cmp	x0, #0x0
    632c:	b.eq	63c0 <gomp_barrier_handle_tasks+0x274>  // b.none
    6330:	ldr	x0, [sp, #104]
    6334:	ldr	x0, [x0, #192]
    6338:	bl	0 <gomp_target_task_fn>
    633c:	and	w0, w0, #0xff
    6340:	cmp	w0, #0x0
    6344:	b.eq	63d4 <gomp_barrier_handle_tasks+0x288>  // b.none
    6348:	ldr	x0, [sp, #80]
    634c:	ldr	x1, [sp, #64]
    6350:	str	x1, [x0, #80]
    6354:	ldr	x0, [sp, #72]
    6358:	add	x0, x0, #0x500
    635c:	bl	820 <gomp_mutex_lock>
    6360:	ldr	x0, [sp, #104]
    6364:	mov	w1, #0x4                   	// #4
    6368:	str	w1, [x0, #200]
    636c:	ldr	x0, [sp, #72]
    6370:	ldr	w0, [x0, #1328]
    6374:	sub	w1, w0, #0x1
    6378:	ldr	x0, [sp, #72]
    637c:	str	w1, [x0, #1328]
    6380:	ldr	x0, [sp, #104]
    6384:	ldr	x0, [x0, #192]
    6388:	str	x0, [sp, #56]
    638c:	ldr	x0, [sp, #56]
    6390:	ldr	w0, [x0, #44]
    6394:	cmp	w0, #0x5
    6398:	b.ne	63ac <gomp_barrier_handle_tasks+0x260>  // b.any
    639c:	ldr	x1, [sp, #104]
    63a0:	ldr	x0, [sp, #72]
    63a4:	bl	4970 <gomp_target_task_completion>
    63a8:	b	63b8 <gomp_barrier_handle_tasks+0x26c>
    63ac:	ldr	x0, [sp, #56]
    63b0:	mov	w1, #0x4                   	// #4
    63b4:	str	w1, [x0, #44]
    63b8:	str	xzr, [sp, #104]
    63bc:	b	6510 <gomp_barrier_handle_tasks+0x3c4>
    63c0:	ldr	x0, [sp, #104]
    63c4:	ldr	x1, [x0, #184]
    63c8:	ldr	x0, [sp, #104]
    63cc:	ldr	x0, [x0, #192]
    63d0:	blr	x1
    63d4:	ldr	x0, [sp, #80]
    63d8:	ldr	x1, [sp, #64]
    63dc:	str	x1, [x0, #80]
    63e0:	ldr	x0, [sp, #72]
    63e4:	add	x0, x0, #0x500
    63e8:	bl	820 <gomp_mutex_lock>
    63ec:	ldr	x0, [sp, #104]
    63f0:	cmp	x0, #0x0
    63f4:	b.eq	61f0 <gomp_barrier_handle_tasks+0xa4>  // b.none
    63f8:	b	6400 <gomp_barrier_handle_tasks+0x2b4>
    63fc:	nop
    6400:	ldr	x1, [sp, #72]
    6404:	ldr	x0, [sp, #104]
    6408:	bl	5f08 <gomp_task_run_post_handle_depend>
    640c:	str	x0, [sp, #48]
    6410:	ldr	x0, [sp, #104]
    6414:	bl	5f74 <gomp_task_run_post_remove_parent>
    6418:	ldr	x0, [sp, #104]
    641c:	add	x0, x0, #0x8
    6420:	bl	16d4 <gomp_clear_parent>
    6424:	ldr	x0, [sp, #104]
    6428:	bl	6084 <gomp_task_run_post_remove_taskgroup>
    642c:	ldr	x0, [sp, #104]
    6430:	str	x0, [sp, #96]
    6434:	str	xzr, [sp, #104]
    6438:	ldrb	w0, [sp, #91]
    643c:	eor	w0, w0, #0x1
    6440:	and	w0, w0, #0xff
    6444:	cmp	w0, #0x0
    6448:	b.eq	6460 <gomp_barrier_handle_tasks+0x314>  // b.none
    644c:	ldr	x0, [sp, #72]
    6450:	ldr	w0, [x0, #1328]
    6454:	sub	w1, w0, #0x1
    6458:	ldr	x0, [sp, #72]
    645c:	str	w1, [x0, #1328]
    6460:	ldr	x0, [sp, #48]
    6464:	cmp	x0, #0x1
    6468:	b.ls	649c <gomp_barrier_handle_tasks+0x350>  // b.plast
    646c:	ldr	x0, [sp, #72]
    6470:	ldr	w1, [x0]
    6474:	ldr	x0, [sp, #72]
    6478:	ldr	w0, [x0, #1328]
    647c:	sub	w0, w1, w0
    6480:	str	w0, [sp, #92]
    6484:	ldrsw	x0, [sp, #92]
    6488:	ldr	x1, [sp, #48]
    648c:	cmp	x1, x0
    6490:	b.cs	649c <gomp_barrier_handle_tasks+0x350>  // b.hs, b.nlast
    6494:	ldr	x0, [sp, #48]
    6498:	str	w0, [sp, #92]
    649c:	ldr	x0, [sp, #72]
    64a0:	ldr	w0, [x0, #1320]
    64a4:	sub	w1, w0, #0x1
    64a8:	ldr	x0, [sp, #72]
    64ac:	str	w1, [x0, #1320]
    64b0:	ldr	x0, [sp, #72]
    64b4:	ldr	w0, [x0, #1320]
    64b8:	cmp	w0, #0x0
    64bc:	b.ne	61f0 <gomp_barrier_handle_tasks+0xa4>  // b.any
    64c0:	ldr	x0, [sp, #72]
    64c4:	add	x0, x0, #0x80
    64c8:	bl	97c <gomp_team_barrier_waiting_for_tasks>
    64cc:	and	w0, w0, #0xff
    64d0:	cmp	w0, #0x0
    64d4:	b.eq	61f0 <gomp_barrier_handle_tasks+0xa4>  // b.none
    64d8:	ldr	x0, [sp, #72]
    64dc:	add	x0, x0, #0x80
    64e0:	ldr	w1, [sp, #28]
    64e4:	bl	9dc <gomp_team_barrier_done>
    64e8:	ldr	x0, [sp, #72]
    64ec:	add	x0, x0, #0x500
    64f0:	bl	894 <gomp_mutex_unlock>
    64f4:	ldr	x0, [sp, #72]
    64f8:	add	x0, x0, #0x80
    64fc:	mov	w1, #0x0                   	// #0
    6500:	bl	0 <gomp_team_barrier_wake>
    6504:	ldr	x0, [sp, #72]
    6508:	add	x0, x0, #0x500
    650c:	bl	820 <gomp_mutex_lock>
    6510:	b	61f0 <gomp_barrier_handle_tasks+0xa4>
    6514:	nop
    6518:	ldp	x29, x30, [sp], #112
    651c:	ret

0000000000006520 <GOMP_taskwait>:
    6520:	stp	x29, x30, [sp, #-144]!
    6524:	mov	x29, sp
    6528:	bl	a08 <gomp_thread>
    652c:	str	x0, [sp, #112]
    6530:	ldr	x0, [sp, #112]
    6534:	ldr	x0, [x0, #16]
    6538:	str	x0, [sp, #104]
    653c:	ldr	x0, [sp, #112]
    6540:	ldr	x0, [x0, #80]
    6544:	str	x0, [sp, #96]
    6548:	str	xzr, [sp, #136]
    654c:	str	xzr, [sp, #128]
    6550:	str	wzr, [sp, #124]
    6554:	ldr	x0, [sp, #96]
    6558:	cmp	x0, #0x0
    655c:	b.eq	68fc <GOMP_taskwait+0x3dc>  // b.none
    6560:	ldr	x0, [sp, #96]
    6564:	add	x0, x0, #0x8
    6568:	mov	w1, #0x2                   	// #2
    656c:	bl	60 <priority_queue_empty_p>
    6570:	and	w0, w0, #0xff
    6574:	cmp	w0, #0x0
    6578:	b.ne	68fc <GOMP_taskwait+0x3dc>  // b.any
    657c:	add	x0, sp, #0x20
    6580:	mov	x2, #0x18                  	// #24
    6584:	mov	w1, #0x0                   	// #0
    6588:	bl	0 <memset>
    658c:	strb	wzr, [sp, #31]
    6590:	ldr	x0, [sp, #104]
    6594:	add	x0, x0, #0x500
    6598:	bl	820 <gomp_mutex_lock>
    659c:	strb	wzr, [sp, #95]
    65a0:	ldr	x0, [sp, #96]
    65a4:	add	x0, x0, #0x8
    65a8:	mov	w1, #0x0                   	// #0
    65ac:	bl	60 <priority_queue_empty_p>
    65b0:	and	w0, w0, #0xff
    65b4:	cmp	w0, #0x0
    65b8:	b.eq	661c <GOMP_taskwait+0xfc>  // b.none
    65bc:	ldr	x0, [sp, #96]
    65c0:	ldr	x0, [x0, #64]
    65c4:	cmp	x0, #0x0
    65c8:	cset	w0, ne  // ne = any
    65cc:	strb	w0, [sp, #63]
    65d0:	ldr	x0, [sp, #96]
    65d4:	str	xzr, [x0, #64]
    65d8:	ldr	x0, [sp, #104]
    65dc:	add	x0, x0, #0x500
    65e0:	bl	894 <gomp_mutex_unlock>
    65e4:	ldr	x0, [sp, #128]
    65e8:	cmp	x0, #0x0
    65ec:	b.eq	6600 <GOMP_taskwait+0xe0>  // b.none
    65f0:	ldr	x0, [sp, #128]
    65f4:	bl	a70 <gomp_finish_task>
    65f8:	ldr	x0, [sp, #128]
    65fc:	bl	0 <free>
    6600:	ldrb	w0, [sp, #63]
    6604:	cmp	w0, #0x0
    6608:	b.eq	6904 <GOMP_taskwait+0x3e4>  // b.none
    660c:	add	x0, sp, #0x20
    6610:	add	x0, x0, #0x10
    6614:	bl	6e0 <gomp_sem_destroy>
    6618:	b	6904 <GOMP_taskwait+0x3e4>
    661c:	ldr	x0, [sp, #96]
    6620:	add	x1, x0, #0x8
    6624:	ldr	x0, [sp, #104]
    6628:	add	x0, x0, #0x508
    662c:	add	x2, sp, #0x1f
    6630:	mov	x4, x2
    6634:	mov	x3, x0
    6638:	mov	w2, #0x0                   	// #0
    663c:	mov	w0, #0x1                   	// #1
    6640:	bl	4ac <priority_queue_next_task>
    6644:	str	x0, [sp, #80]
    6648:	ldr	x0, [sp, #80]
    664c:	ldr	w0, [x0, #200]
    6650:	cmp	w0, #0x2
    6654:	b.ne	66a4 <GOMP_taskwait+0x184>  // b.any
    6658:	ldr	x0, [sp, #80]
    665c:	str	x0, [sp, #136]
    6660:	ldr	x2, [sp, #104]
    6664:	ldr	x1, [sp, #96]
    6668:	ldr	x0, [sp, #136]
    666c:	bl	58f0 <gomp_task_run_pre>
    6670:	strb	w0, [sp, #95]
    6674:	ldrb	w0, [sp, #95]
    6678:	cmp	x0, #0x0
    667c:	b.eq	66dc <GOMP_taskwait+0x1bc>  // b.none
    6680:	ldr	x0, [sp, #128]
    6684:	cmp	x0, #0x0
    6688:	b.eq	6828 <GOMP_taskwait+0x308>  // b.none
    668c:	ldr	x0, [sp, #128]
    6690:	bl	a70 <gomp_finish_task>
    6694:	ldr	x0, [sp, #128]
    6698:	bl	0 <free>
    669c:	str	xzr, [sp, #128]
    66a0:	b	6828 <GOMP_taskwait+0x308>
    66a4:	ldr	x0, [sp, #96]
    66a8:	ldr	x0, [x0, #64]
    66ac:	cmp	x0, #0x0
    66b0:	b.ne	66d4 <GOMP_taskwait+0x1b4>  // b.any
    66b4:	strb	wzr, [sp, #33]
    66b8:	add	x0, sp, #0x20
    66bc:	add	x0, x0, #0x10
    66c0:	mov	w1, #0x0                   	// #0
    66c4:	bl	6bc <gomp_sem_init>
    66c8:	ldr	x0, [sp, #96]
    66cc:	add	x1, sp, #0x20
    66d0:	str	x1, [x0, #64]
    66d4:	mov	w0, #0x1                   	// #1
    66d8:	strb	w0, [sp, #32]
    66dc:	ldr	x0, [sp, #104]
    66e0:	add	x0, x0, #0x500
    66e4:	bl	894 <gomp_mutex_unlock>
    66e8:	ldr	w0, [sp, #124]
    66ec:	cmp	w0, #0x0
    66f0:	b.eq	6708 <GOMP_taskwait+0x1e8>  // b.none
    66f4:	ldr	x0, [sp, #104]
    66f8:	add	x0, x0, #0x80
    66fc:	ldr	w1, [sp, #124]
    6700:	bl	0 <gomp_team_barrier_wake>
    6704:	str	wzr, [sp, #124]
    6708:	ldr	x0, [sp, #128]
    670c:	cmp	x0, #0x0
    6710:	b.eq	6728 <GOMP_taskwait+0x208>  // b.none
    6714:	ldr	x0, [sp, #128]
    6718:	bl	a70 <gomp_finish_task>
    671c:	ldr	x0, [sp, #128]
    6720:	bl	0 <free>
    6724:	str	xzr, [sp, #128]
    6728:	ldr	x0, [sp, #136]
    672c:	cmp	x0, #0x0
    6730:	b.eq	6800 <GOMP_taskwait+0x2e0>  // b.none
    6734:	ldr	x0, [sp, #112]
    6738:	ldr	x1, [sp, #136]
    673c:	str	x1, [x0, #80]
    6740:	ldr	x0, [sp, #136]
    6744:	ldr	x0, [x0, #184]
    6748:	cmp	x0, #0x0
    674c:	cset	w0, eq  // eq = none
    6750:	and	w0, w0, #0xff
    6754:	and	x0, x0, #0xff
    6758:	cmp	x0, #0x0
    675c:	b.eq	67dc <GOMP_taskwait+0x2bc>  // b.none
    6760:	ldr	x0, [sp, #136]
    6764:	ldr	x0, [x0, #192]
    6768:	bl	0 <gomp_target_task_fn>
    676c:	and	w0, w0, #0xff
    6770:	cmp	w0, #0x0
    6774:	b.eq	67f0 <GOMP_taskwait+0x2d0>  // b.none
    6778:	ldr	x0, [sp, #112]
    677c:	ldr	x1, [sp, #96]
    6780:	str	x1, [x0, #80]
    6784:	ldr	x0, [sp, #104]
    6788:	add	x0, x0, #0x500
    678c:	bl	820 <gomp_mutex_lock>
    6790:	ldr	x0, [sp, #136]
    6794:	mov	w1, #0x4                   	// #4
    6798:	str	w1, [x0, #200]
    679c:	ldr	x0, [sp, #136]
    67a0:	ldr	x0, [x0, #192]
    67a4:	str	x0, [sp, #72]
    67a8:	ldr	x0, [sp, #72]
    67ac:	ldr	w0, [x0, #44]
    67b0:	cmp	w0, #0x5
    67b4:	b.ne	67c8 <GOMP_taskwait+0x2a8>  // b.any
    67b8:	ldr	x1, [sp, #136]
    67bc:	ldr	x0, [sp, #104]
    67c0:	bl	4970 <gomp_target_task_completion>
    67c4:	b	67d4 <GOMP_taskwait+0x2b4>
    67c8:	ldr	x0, [sp, #72]
    67cc:	mov	w1, #0x4                   	// #4
    67d0:	str	w1, [x0, #44]
    67d4:	str	xzr, [sp, #136]
    67d8:	b	68f8 <GOMP_taskwait+0x3d8>
    67dc:	ldr	x0, [sp, #136]
    67e0:	ldr	x1, [x0, #184]
    67e4:	ldr	x0, [sp, #136]
    67e8:	ldr	x0, [x0, #192]
    67ec:	blr	x1
    67f0:	ldr	x0, [sp, #112]
    67f4:	ldr	x1, [sp, #96]
    67f8:	str	x1, [x0, #80]
    67fc:	b	680c <GOMP_taskwait+0x2ec>
    6800:	add	x0, sp, #0x20
    6804:	add	x0, x0, #0x10
    6808:	bl	6f4 <gomp_sem_wait>
    680c:	ldr	x0, [sp, #104]
    6810:	add	x0, x0, #0x500
    6814:	bl	820 <gomp_mutex_lock>
    6818:	ldr	x0, [sp, #136]
    681c:	cmp	x0, #0x0
    6820:	b.eq	659c <GOMP_taskwait+0x7c>  // b.none
    6824:	b	682c <GOMP_taskwait+0x30c>
    6828:	nop
    682c:	ldr	x1, [sp, #104]
    6830:	ldr	x0, [sp, #136]
    6834:	bl	5f08 <gomp_task_run_post_handle_depend>
    6838:	str	x0, [sp, #64]
    683c:	ldrb	w0, [sp, #31]
    6840:	cmp	w0, #0x0
    6844:	b.eq	6874 <GOMP_taskwait+0x354>  // b.none
    6848:	ldr	x0, [sp, #96]
    684c:	add	x0, x0, #0x8
    6850:	mov	w3, #0x0                   	// #0
    6854:	ldr	x2, [sp, #136]
    6858:	mov	x1, x0
    685c:	mov	w0, #0x1                   	// #1
    6860:	bl	608 <priority_queue_remove>
    6864:	ldr	x0, [sp, #136]
    6868:	str	xzr, [x0, #112]
    686c:	ldr	x0, [sp, #136]
    6870:	str	xzr, [x0, #120]
    6874:	ldr	x0, [sp, #136]
    6878:	add	x0, x0, #0x8
    687c:	bl	16d4 <gomp_clear_parent>
    6880:	ldr	x0, [sp, #136]
    6884:	bl	6084 <gomp_task_run_post_remove_taskgroup>
    6888:	ldr	x0, [sp, #136]
    688c:	str	x0, [sp, #128]
    6890:	str	xzr, [sp, #136]
    6894:	ldr	x0, [sp, #104]
    6898:	ldr	w0, [x0, #1320]
    689c:	sub	w1, w0, #0x1
    68a0:	ldr	x0, [sp, #104]
    68a4:	str	w1, [x0, #1320]
    68a8:	ldr	x0, [sp, #64]
    68ac:	cmp	x0, #0x1
    68b0:	b.ls	659c <GOMP_taskwait+0x7c>  // b.plast
    68b4:	ldr	x0, [sp, #104]
    68b8:	ldr	w1, [x0]
    68bc:	ldr	x0, [sp, #104]
    68c0:	ldr	w0, [x0, #1328]
    68c4:	sub	w0, w1, w0
    68c8:	ldr	x1, [sp, #96]
    68cc:	ldrb	w1, [x1, #204]
    68d0:	eor	w1, w1, #0x1
    68d4:	and	w1, w1, #0xff
    68d8:	sub	w0, w0, w1
    68dc:	str	w0, [sp, #124]
    68e0:	ldrsw	x0, [sp, #124]
    68e4:	ldr	x1, [sp, #64]
    68e8:	cmp	x1, x0
    68ec:	b.cs	659c <GOMP_taskwait+0x7c>  // b.hs, b.nlast
    68f0:	ldr	x0, [sp, #64]
    68f4:	str	w0, [sp, #124]
    68f8:	b	659c <GOMP_taskwait+0x7c>
    68fc:	nop
    6900:	b	6908 <GOMP_taskwait+0x3e8>
    6904:	nop
    6908:	ldp	x29, x30, [sp], #144
    690c:	ret

0000000000006910 <GOMP_taskwait_depend>:
    6910:	stp	x29, x30, [sp, #-48]!
    6914:	mov	x29, sp
    6918:	str	x0, [sp, #24]
    691c:	bl	a08 <gomp_thread>
    6920:	str	x0, [sp, #40]
    6924:	ldr	x0, [sp, #40]
    6928:	ldr	x0, [x0, #16]
    692c:	str	x0, [sp, #32]
    6930:	adrp	x0, 0 <gomp_cancel_var>
    6934:	add	x0, x0, #0x0
    6938:	ldrb	w0, [x0]
    693c:	and	x0, x0, #0xff
    6940:	cmp	x0, #0x0
    6944:	b.eq	69e4 <GOMP_taskwait_depend+0xd4>  // b.none
    6948:	ldr	x0, [sp, #32]
    694c:	cmp	x0, #0x0
    6950:	b.eq	69e4 <GOMP_taskwait_depend+0xd4>  // b.none
    6954:	ldr	x0, [sp, #32]
    6958:	add	x0, x0, #0x80
    695c:	bl	9a4 <gomp_team_barrier_cancelled>
    6960:	and	w0, w0, #0xff
    6964:	cmp	w0, #0x0
    6968:	b.ne	6a14 <GOMP_taskwait_depend+0x104>  // b.any
    696c:	ldr	x0, [sp, #40]
    6970:	ldr	x0, [x0, #80]
    6974:	ldr	x0, [x0, #40]
    6978:	cmp	x0, #0x0
    697c:	b.eq	69e4 <GOMP_taskwait_depend+0xd4>  // b.none
    6980:	ldr	x0, [sp, #40]
    6984:	ldr	x0, [x0, #80]
    6988:	ldr	x0, [x0, #40]
    698c:	ldrb	w0, [x0, #49]
    6990:	cmp	w0, #0x0
    6994:	b.ne	6a1c <GOMP_taskwait_depend+0x10c>  // b.any
    6998:	ldr	x0, [sp, #40]
    699c:	ldr	x0, [x0, #80]
    69a0:	ldr	x0, [x0, #40]
    69a4:	ldrb	w0, [x0, #50]
    69a8:	cmp	w0, #0x0
    69ac:	b.eq	69e4 <GOMP_taskwait_depend+0xd4>  // b.none
    69b0:	ldr	x0, [sp, #40]
    69b4:	ldr	x0, [x0, #80]
    69b8:	ldr	x0, [x0, #40]
    69bc:	ldr	x0, [x0]
    69c0:	cmp	x0, #0x0
    69c4:	b.eq	69e4 <GOMP_taskwait_depend+0xd4>  // b.none
    69c8:	ldr	x0, [sp, #40]
    69cc:	ldr	x0, [x0, #80]
    69d0:	ldr	x0, [x0, #40]
    69d4:	ldr	x0, [x0]
    69d8:	ldrb	w0, [x0, #49]
    69dc:	cmp	w0, #0x0
    69e0:	b.ne	6a24 <GOMP_taskwait_depend+0x114>  // b.any
    69e4:	ldr	x0, [sp, #40]
    69e8:	ldr	x0, [x0, #80]
    69ec:	cmp	x0, #0x0
    69f0:	b.eq	6a28 <GOMP_taskwait_depend+0x118>  // b.none
    69f4:	ldr	x0, [sp, #40]
    69f8:	ldr	x0, [x0, #80]
    69fc:	ldr	x0, [x0, #56]
    6a00:	cmp	x0, #0x0
    6a04:	b.eq	6a28 <GOMP_taskwait_depend+0x118>  // b.none
    6a08:	ldr	x0, [sp, #24]
    6a0c:	bl	6a30 <gomp_task_maybe_wait_for_dependencies>
    6a10:	b	6a28 <GOMP_taskwait_depend+0x118>
    6a14:	nop
    6a18:	b	6a28 <GOMP_taskwait_depend+0x118>
    6a1c:	nop
    6a20:	b	6a28 <GOMP_taskwait_depend+0x118>
    6a24:	nop
    6a28:	ldp	x29, x30, [sp], #48
    6a2c:	ret

0000000000006a30 <gomp_task_maybe_wait_for_dependencies>:
    6a30:	stp	x29, x30, [sp, #-272]!
    6a34:	mov	x29, sp
    6a38:	str	x0, [sp, #24]
    6a3c:	bl	a08 <gomp_thread>
    6a40:	str	x0, [sp, #184]
    6a44:	ldr	x0, [sp, #184]
    6a48:	ldr	x0, [x0, #80]
    6a4c:	str	x0, [sp, #176]
    6a50:	ldr	x0, [sp, #184]
    6a54:	ldr	x0, [x0, #16]
    6a58:	str	x0, [sp, #168]
    6a5c:	str	xzr, [sp, #264]
    6a60:	ldr	x0, [sp, #24]
    6a64:	ldr	x0, [x0]
    6a68:	str	x0, [sp, #160]
    6a6c:	ldr	x0, [sp, #24]
    6a70:	add	x0, x0, #0x8
    6a74:	ldr	x0, [x0]
    6a78:	str	x0, [sp, #256]
    6a7c:	ldr	x0, [sp, #160]
    6a80:	str	x0, [sp, #248]
    6a84:	ldr	x0, [sp, #248]
    6a88:	str	x0, [sp, #240]
    6a8c:	mov	x0, #0x2                   	// #2
    6a90:	str	x0, [sp, #232]
    6a94:	str	xzr, [sp, #216]
    6a98:	str	xzr, [sp, #208]
    6a9c:	str	xzr, [sp, #200]
    6aa0:	str	wzr, [sp, #196]
    6aa4:	ldr	x0, [sp, #248]
    6aa8:	cmp	x0, #0x0
    6aac:	b.ne	6b00 <gomp_task_maybe_wait_for_dependencies+0xd0>  // b.any
    6ab0:	ldr	x0, [sp, #256]
    6ab4:	str	x0, [sp, #248]
    6ab8:	ldr	x0, [sp, #24]
    6abc:	add	x0, x0, #0x10
    6ac0:	ldr	x0, [x0]
    6ac4:	mov	x1, x0
    6ac8:	ldr	x0, [sp, #24]
    6acc:	add	x0, x0, #0x18
    6ad0:	ldr	x0, [x0]
    6ad4:	add	x0, x1, x0
    6ad8:	str	x0, [sp, #256]
    6adc:	ldr	x0, [sp, #24]
    6ae0:	add	x0, x0, #0x20
    6ae4:	ldr	x0, [x0]
    6ae8:	mov	x1, x0
    6aec:	ldr	x0, [sp, #256]
    6af0:	add	x0, x0, x1
    6af4:	str	x0, [sp, #240]
    6af8:	mov	x0, #0x5                   	// #5
    6afc:	str	x0, [sp, #232]
    6b00:	ldr	x0, [sp, #168]
    6b04:	add	x0, x0, #0x500
    6b08:	bl	820 <gomp_mutex_lock>
    6b0c:	str	xzr, [sp, #224]
    6b10:	b	6c98 <gomp_task_maybe_wait_for_dependencies+0x268>
    6b14:	ldr	x1, [sp, #224]
    6b18:	ldr	x0, [sp, #232]
    6b1c:	add	x0, x1, x0
    6b20:	lsl	x0, x0, #3
    6b24:	ldr	x1, [sp, #24]
    6b28:	add	x0, x1, x0
    6b2c:	ldr	x0, [x0]
    6b30:	str	x0, [sp, #72]
    6b34:	ldr	x1, [sp, #224]
    6b38:	ldr	x0, [sp, #256]
    6b3c:	cmp	x1, x0
    6b40:	cset	w0, cs  // cs = hs, nlast
    6b44:	and	w0, w0, #0xff
    6b48:	strb	w0, [sp, #104]
    6b4c:	ldr	x1, [sp, #224]
    6b50:	ldr	x0, [sp, #240]
    6b54:	cmp	x1, x0
    6b58:	cset	w0, cs  // cs = hs, nlast
    6b5c:	and	w0, w0, #0xff
    6b60:	and	x0, x0, #0xff
    6b64:	cmp	x0, #0x0
    6b68:	b.eq	6bd0 <gomp_task_maybe_wait_for_dependencies+0x1a0>  // b.none
    6b6c:	ldr	x0, [sp, #72]
    6b70:	str	x0, [sp, #120]
    6b74:	ldr	x0, [sp, #120]
    6b78:	add	x0, x0, #0x8
    6b7c:	ldr	x0, [x0]
    6b80:	cmp	x0, #0x1
    6b84:	b.eq	6bc0 <gomp_task_maybe_wait_for_dependencies+0x190>  // b.none
    6b88:	cmp	x0, #0x0
    6b8c:	b.eq	6ba4 <gomp_task_maybe_wait_for_dependencies+0x174>  // b.none
    6b90:	sub	x0, x0, #0x2
    6b94:	cmp	x0, #0x2
    6b98:	b.hi	6ba4 <gomp_task_maybe_wait_for_dependencies+0x174>  // b.pmore
    6b9c:	strb	wzr, [sp, #104]
    6ba0:	b	6bc4 <gomp_task_maybe_wait_for_dependencies+0x194>
    6ba4:	ldr	x0, [sp, #120]
    6ba8:	add	x0, x0, #0x8
    6bac:	ldr	x0, [x0]
    6bb0:	mov	w1, w0
    6bb4:	adrp	x0, 0 <priority_queue_multi_p>
    6bb8:	add	x0, x0, #0x0
    6bbc:	bl	0 <gomp_fatal>
    6bc0:	nop
    6bc4:	ldr	x0, [sp, #120]
    6bc8:	ldr	x0, [x0]
    6bcc:	str	x0, [sp, #72]
    6bd0:	ldr	x0, [sp, #176]
    6bd4:	ldr	x0, [x0, #56]
    6bd8:	add	x1, sp, #0x48
    6bdc:	bl	107c <htab_find>
    6be0:	str	x0, [sp, #264]
    6be4:	b	6c80 <gomp_task_maybe_wait_for_dependencies+0x250>
    6be8:	ldrb	w0, [sp, #104]
    6bec:	cmp	w0, #0x0
    6bf0:	b.eq	6c04 <gomp_task_maybe_wait_for_dependencies+0x1d4>  // b.none
    6bf4:	ldr	x0, [sp, #264]
    6bf8:	ldrb	w0, [x0, #32]
    6bfc:	cmp	w0, #0x0
    6c00:	b.ne	6c70 <gomp_task_maybe_wait_for_dependencies+0x240>  // b.any
    6c04:	ldr	x0, [sp, #264]
    6c08:	ldr	x0, [x0, #24]
    6c0c:	str	x0, [sp, #112]
    6c10:	ldr	x0, [sp, #112]
    6c14:	ldrb	w0, [x0, #207]
    6c18:	eor	w0, w0, #0x1
    6c1c:	and	w0, w0, #0xff
    6c20:	cmp	w0, #0x0
    6c24:	b.eq	6c74 <gomp_task_maybe_wait_for_dependencies+0x244>  // b.none
    6c28:	ldr	x0, [sp, #112]
    6c2c:	mov	w1, #0x1                   	// #1
    6c30:	strb	w1, [x0, #207]
    6c34:	ldr	x0, [sp, #216]
    6c38:	add	x0, x0, #0x1
    6c3c:	str	x0, [sp, #216]
    6c40:	ldr	x0, [sp, #112]
    6c44:	ldr	x0, [x0, #80]
    6c48:	cmp	x0, #0x0
    6c4c:	b.ne	6c74 <gomp_task_maybe_wait_for_dependencies+0x244>  // b.any
    6c50:	ldr	x0, [sp, #112]
    6c54:	ldr	w0, [x0, #200]
    6c58:	cmp	w0, #0x2
    6c5c:	b.ne	6c74 <gomp_task_maybe_wait_for_dependencies+0x244>  // b.any
    6c60:	ldr	x1, [sp, #176]
    6c64:	ldr	x0, [sp, #112]
    6c68:	bl	5660 <priority_queue_upgrade_task>
    6c6c:	b	6c74 <gomp_task_maybe_wait_for_dependencies+0x244>
    6c70:	nop
    6c74:	ldr	x0, [sp, #264]
    6c78:	ldr	x0, [x0, #8]
    6c7c:	str	x0, [sp, #264]
    6c80:	ldr	x0, [sp, #264]
    6c84:	cmp	x0, #0x0
    6c88:	b.ne	6be8 <gomp_task_maybe_wait_for_dependencies+0x1b8>  // b.any
    6c8c:	ldr	x0, [sp, #224]
    6c90:	add	x0, x0, #0x1
    6c94:	str	x0, [sp, #224]
    6c98:	ldr	x1, [sp, #224]
    6c9c:	ldr	x0, [sp, #248]
    6ca0:	cmp	x1, x0
    6ca4:	b.cc	6b14 <gomp_task_maybe_wait_for_dependencies+0xe4>  // b.lo, b.ul, b.last
    6ca8:	ldr	x0, [sp, #216]
    6cac:	cmp	x0, #0x0
    6cb0:	b.ne	6cc4 <gomp_task_maybe_wait_for_dependencies+0x294>  // b.any
    6cb4:	ldr	x0, [sp, #168]
    6cb8:	add	x0, x0, #0x500
    6cbc:	bl	894 <gomp_mutex_unlock>
    6cc0:	b	7004 <gomp_task_maybe_wait_for_dependencies+0x5d4>
    6cc4:	add	x0, sp, #0x30
    6cc8:	mov	x2, #0x18                  	// #24
    6ccc:	mov	w1, #0x0                   	// #0
    6cd0:	bl	0 <memset>
    6cd4:	ldr	x0, [sp, #216]
    6cd8:	str	x0, [sp, #56]
    6cdc:	add	x0, sp, #0x30
    6ce0:	add	x0, x0, #0x10
    6ce4:	mov	w1, #0x0                   	// #0
    6ce8:	bl	6bc <gomp_sem_init>
    6cec:	ldr	x0, [sp, #176]
    6cf0:	add	x1, sp, #0x30
    6cf4:	str	x1, [x0, #64]
    6cf8:	strb	wzr, [sp, #159]
    6cfc:	ldr	x0, [sp, #56]
    6d00:	cmp	x0, #0x0
    6d04:	b.ne	6d48 <gomp_task_maybe_wait_for_dependencies+0x318>  // b.any
    6d08:	ldr	x0, [sp, #176]
    6d0c:	str	xzr, [x0, #64]
    6d10:	ldr	x0, [sp, #168]
    6d14:	add	x0, x0, #0x500
    6d18:	bl	894 <gomp_mutex_unlock>
    6d1c:	ldr	x0, [sp, #200]
    6d20:	cmp	x0, #0x0
    6d24:	b.eq	6d38 <gomp_task_maybe_wait_for_dependencies+0x308>  // b.none
    6d28:	ldr	x0, [sp, #200]
    6d2c:	bl	a70 <gomp_finish_task>
    6d30:	ldr	x0, [sp, #200]
    6d34:	bl	0 <free>
    6d38:	add	x0, sp, #0x30
    6d3c:	add	x0, x0, #0x10
    6d40:	bl	6e0 <gomp_sem_destroy>
    6d44:	b	7004 <gomp_task_maybe_wait_for_dependencies+0x5d4>
    6d48:	ldr	x0, [sp, #176]
    6d4c:	add	x0, x0, #0x8
    6d50:	add	x1, sp, #0x2f
    6d54:	mov	x4, x1
    6d58:	mov	x3, #0x0                   	// #0
    6d5c:	mov	w2, #0x3e7                 	// #999
    6d60:	mov	x1, x0
    6d64:	mov	w0, #0x1                   	// #1
    6d68:	bl	4ac <priority_queue_next_task>
    6d6c:	str	x0, [sp, #144]
    6d70:	ldr	x0, [sp, #144]
    6d74:	ldr	w0, [x0, #200]
    6d78:	cmp	w0, #0x2
    6d7c:	b.ne	6dcc <gomp_task_maybe_wait_for_dependencies+0x39c>  // b.any
    6d80:	ldr	x0, [sp, #144]
    6d84:	str	x0, [sp, #208]
    6d88:	ldr	x2, [sp, #168]
    6d8c:	ldr	x1, [sp, #176]
    6d90:	ldr	x0, [sp, #208]
    6d94:	bl	58f0 <gomp_task_run_pre>
    6d98:	strb	w0, [sp, #159]
    6d9c:	ldrb	w0, [sp, #159]
    6da0:	cmp	x0, #0x0
    6da4:	b.eq	6dd4 <gomp_task_maybe_wait_for_dependencies+0x3a4>  // b.none
    6da8:	ldr	x0, [sp, #200]
    6dac:	cmp	x0, #0x0
    6db0:	b.eq	6f20 <gomp_task_maybe_wait_for_dependencies+0x4f0>  // b.none
    6db4:	ldr	x0, [sp, #200]
    6db8:	bl	a70 <gomp_finish_task>
    6dbc:	ldr	x0, [sp, #200]
    6dc0:	bl	0 <free>
    6dc4:	str	xzr, [sp, #200]
    6dc8:	b	6f20 <gomp_task_maybe_wait_for_dependencies+0x4f0>
    6dcc:	mov	w0, #0x1                   	// #1
    6dd0:	strb	w0, [sp, #49]
    6dd4:	ldr	x0, [sp, #168]
    6dd8:	add	x0, x0, #0x500
    6ddc:	bl	894 <gomp_mutex_unlock>
    6de0:	ldr	w0, [sp, #196]
    6de4:	cmp	w0, #0x0
    6de8:	b.eq	6e00 <gomp_task_maybe_wait_for_dependencies+0x3d0>  // b.none
    6dec:	ldr	x0, [sp, #168]
    6df0:	add	x0, x0, #0x80
    6df4:	ldr	w1, [sp, #196]
    6df8:	bl	0 <gomp_team_barrier_wake>
    6dfc:	str	wzr, [sp, #196]
    6e00:	ldr	x0, [sp, #200]
    6e04:	cmp	x0, #0x0
    6e08:	b.eq	6e20 <gomp_task_maybe_wait_for_dependencies+0x3f0>  // b.none
    6e0c:	ldr	x0, [sp, #200]
    6e10:	bl	a70 <gomp_finish_task>
    6e14:	ldr	x0, [sp, #200]
    6e18:	bl	0 <free>
    6e1c:	str	xzr, [sp, #200]
    6e20:	ldr	x0, [sp, #208]
    6e24:	cmp	x0, #0x0
    6e28:	b.eq	6ef8 <gomp_task_maybe_wait_for_dependencies+0x4c8>  // b.none
    6e2c:	ldr	x0, [sp, #184]
    6e30:	ldr	x1, [sp, #208]
    6e34:	str	x1, [x0, #80]
    6e38:	ldr	x0, [sp, #208]
    6e3c:	ldr	x0, [x0, #184]
    6e40:	cmp	x0, #0x0
    6e44:	cset	w0, eq  // eq = none
    6e48:	and	w0, w0, #0xff
    6e4c:	and	x0, x0, #0xff
    6e50:	cmp	x0, #0x0
    6e54:	b.eq	6ed4 <gomp_task_maybe_wait_for_dependencies+0x4a4>  // b.none
    6e58:	ldr	x0, [sp, #208]
    6e5c:	ldr	x0, [x0, #192]
    6e60:	bl	0 <gomp_target_task_fn>
    6e64:	and	w0, w0, #0xff
    6e68:	cmp	w0, #0x0
    6e6c:	b.eq	6ee8 <gomp_task_maybe_wait_for_dependencies+0x4b8>  // b.none
    6e70:	ldr	x0, [sp, #184]
    6e74:	ldr	x1, [sp, #176]
    6e78:	str	x1, [x0, #80]
    6e7c:	ldr	x0, [sp, #168]
    6e80:	add	x0, x0, #0x500
    6e84:	bl	820 <gomp_mutex_lock>
    6e88:	ldr	x0, [sp, #208]
    6e8c:	mov	w1, #0x4                   	// #4
    6e90:	str	w1, [x0, #200]
    6e94:	ldr	x0, [sp, #208]
    6e98:	ldr	x0, [x0, #192]
    6e9c:	str	x0, [sp, #136]
    6ea0:	ldr	x0, [sp, #136]
    6ea4:	ldr	w0, [x0, #44]
    6ea8:	cmp	w0, #0x5
    6eac:	b.ne	6ec0 <gomp_task_maybe_wait_for_dependencies+0x490>  // b.any
    6eb0:	ldr	x1, [sp, #208]
    6eb4:	ldr	x0, [sp, #168]
    6eb8:	bl	4970 <gomp_target_task_completion>
    6ebc:	b	6ecc <gomp_task_maybe_wait_for_dependencies+0x49c>
    6ec0:	ldr	x0, [sp, #136]
    6ec4:	mov	w1, #0x4                   	// #4
    6ec8:	str	w1, [x0, #44]
    6ecc:	str	xzr, [sp, #208]
    6ed0:	b	6cf8 <gomp_task_maybe_wait_for_dependencies+0x2c8>
    6ed4:	ldr	x0, [sp, #208]
    6ed8:	ldr	x1, [x0, #184]
    6edc:	ldr	x0, [sp, #208]
    6ee0:	ldr	x0, [x0, #192]
    6ee4:	blr	x1
    6ee8:	ldr	x0, [sp, #184]
    6eec:	ldr	x1, [sp, #176]
    6ef0:	str	x1, [x0, #80]
    6ef4:	b	6f04 <gomp_task_maybe_wait_for_dependencies+0x4d4>
    6ef8:	add	x0, sp, #0x30
    6efc:	add	x0, x0, #0x10
    6f00:	bl	6f4 <gomp_sem_wait>
    6f04:	ldr	x0, [sp, #168]
    6f08:	add	x0, x0, #0x500
    6f0c:	bl	820 <gomp_mutex_lock>
    6f10:	ldr	x0, [sp, #208]
    6f14:	cmp	x0, #0x0
    6f18:	b.eq	6cf8 <gomp_task_maybe_wait_for_dependencies+0x2c8>  // b.none
    6f1c:	b	6f24 <gomp_task_maybe_wait_for_dependencies+0x4f4>
    6f20:	nop
    6f24:	ldr	x1, [sp, #168]
    6f28:	ldr	x0, [sp, #208]
    6f2c:	bl	5f08 <gomp_task_run_post_handle_depend>
    6f30:	str	x0, [sp, #128]
    6f34:	ldr	x0, [sp, #208]
    6f38:	ldrb	w0, [x0, #207]
    6f3c:	cmp	w0, #0x0
    6f40:	b.eq	6f50 <gomp_task_maybe_wait_for_dependencies+0x520>  // b.none
    6f44:	ldr	x0, [sp, #56]
    6f48:	sub	x0, x0, #0x1
    6f4c:	str	x0, [sp, #56]
    6f50:	ldr	x0, [sp, #176]
    6f54:	add	x0, x0, #0x8
    6f58:	mov	w3, #0x0                   	// #0
    6f5c:	ldr	x2, [sp, #208]
    6f60:	mov	x1, x0
    6f64:	mov	w0, #0x1                   	// #1
    6f68:	bl	608 <priority_queue_remove>
    6f6c:	ldr	x0, [sp, #208]
    6f70:	str	xzr, [x0, #112]
    6f74:	ldr	x0, [sp, #208]
    6f78:	str	xzr, [x0, #120]
    6f7c:	ldr	x0, [sp, #208]
    6f80:	add	x0, x0, #0x8
    6f84:	bl	16d4 <gomp_clear_parent>
    6f88:	ldr	x0, [sp, #208]
    6f8c:	bl	6084 <gomp_task_run_post_remove_taskgroup>
    6f90:	ldr	x0, [sp, #208]
    6f94:	str	x0, [sp, #200]
    6f98:	str	xzr, [sp, #208]
    6f9c:	ldr	x0, [sp, #168]
    6fa0:	ldr	w0, [x0, #1320]
    6fa4:	sub	w1, w0, #0x1
    6fa8:	ldr	x0, [sp, #168]
    6fac:	str	w1, [x0, #1320]
    6fb0:	ldr	x0, [sp, #128]
    6fb4:	cmp	x0, #0x1
    6fb8:	b.ls	6cf8 <gomp_task_maybe_wait_for_dependencies+0x2c8>  // b.plast
    6fbc:	ldr	x0, [sp, #168]
    6fc0:	ldr	w1, [x0]
    6fc4:	ldr	x0, [sp, #168]
    6fc8:	ldr	w0, [x0, #1328]
    6fcc:	sub	w0, w1, w0
    6fd0:	ldr	x1, [sp, #176]
    6fd4:	ldrb	w1, [x1, #204]
    6fd8:	eor	w1, w1, #0x1
    6fdc:	and	w1, w1, #0xff
    6fe0:	sub	w0, w0, w1
    6fe4:	str	w0, [sp, #196]
    6fe8:	ldrsw	x0, [sp, #196]
    6fec:	ldr	x1, [sp, #128]
    6ff0:	cmp	x1, x0
    6ff4:	b.cs	6cf8 <gomp_task_maybe_wait_for_dependencies+0x2c8>  // b.hs, b.nlast
    6ff8:	ldr	x0, [sp, #128]
    6ffc:	str	w0, [sp, #196]
    7000:	b	6cf8 <gomp_task_maybe_wait_for_dependencies+0x2c8>
    7004:	ldp	x29, x30, [sp], #272
    7008:	ret

000000000000700c <GOMP_taskyield>:
    700c:	nop
    7010:	ret

0000000000007014 <gomp_taskgroup_init>:
    7014:	stp	x29, x30, [sp, #-48]!
    7018:	mov	x29, sp
    701c:	str	x0, [sp, #24]
    7020:	mov	x0, #0x40                  	// #64
    7024:	bl	0 <gomp_malloc>
    7028:	str	x0, [sp, #40]
    702c:	ldr	x0, [sp, #40]
    7030:	ldr	x1, [sp, #24]
    7034:	str	x1, [x0]
    7038:	ldr	x0, [sp, #40]
    703c:	add	x0, x0, #0x8
    7040:	bl	34 <priority_queue_init>
    7044:	ldr	x0, [sp, #24]
    7048:	cmp	x0, #0x0
    704c:	b.eq	705c <gomp_taskgroup_init+0x48>  // b.none
    7050:	ldr	x0, [sp, #24]
    7054:	ldr	x0, [x0, #40]
    7058:	b	7060 <gomp_taskgroup_init+0x4c>
    705c:	mov	x0, #0x0                   	// #0
    7060:	ldr	x1, [sp, #40]
    7064:	str	x0, [x1, #40]
    7068:	ldr	x0, [sp, #40]
    706c:	strb	wzr, [x0, #48]
    7070:	ldr	x0, [sp, #40]
    7074:	strb	wzr, [x0, #49]
    7078:	ldr	x0, [sp, #40]
    707c:	strb	wzr, [x0, #50]
    7080:	ldr	x0, [sp, #40]
    7084:	str	xzr, [x0, #56]
    7088:	ldr	x0, [sp, #40]
    708c:	add	x0, x0, #0x34
    7090:	mov	w1, #0x0                   	// #0
    7094:	bl	6bc <gomp_sem_init>
    7098:	ldr	x0, [sp, #40]
    709c:	ldp	x29, x30, [sp], #48
    70a0:	ret

00000000000070a4 <GOMP_taskgroup_start>:
    70a4:	stp	x29, x30, [sp, #-48]!
    70a8:	mov	x29, sp
    70ac:	bl	a08 <gomp_thread>
    70b0:	str	x0, [sp, #40]
    70b4:	ldr	x0, [sp, #40]
    70b8:	ldr	x0, [x0, #16]
    70bc:	str	x0, [sp, #32]
    70c0:	ldr	x0, [sp, #40]
    70c4:	ldr	x0, [x0, #80]
    70c8:	str	x0, [sp, #24]
    70cc:	ldr	x0, [sp, #32]
    70d0:	cmp	x0, #0x0
    70d4:	b.eq	70f4 <GOMP_taskgroup_start+0x50>  // b.none
    70d8:	ldr	x0, [sp, #24]
    70dc:	ldr	x0, [x0, #40]
    70e0:	bl	7014 <gomp_taskgroup_init>
    70e4:	mov	x1, x0
    70e8:	ldr	x0, [sp, #24]
    70ec:	str	x1, [x0, #40]
    70f0:	b	70f8 <GOMP_taskgroup_start+0x54>
    70f4:	nop
    70f8:	ldp	x29, x30, [sp], #48
    70fc:	ret

0000000000007100 <GOMP_taskgroup_end>:
    7100:	stp	x29, x30, [sp, #-112]!
    7104:	mov	x29, sp
    7108:	bl	a08 <gomp_thread>
    710c:	str	x0, [sp, #80]
    7110:	ldr	x0, [sp, #80]
    7114:	ldr	x0, [x0, #16]
    7118:	str	x0, [sp, #72]
    711c:	ldr	x0, [sp, #80]
    7120:	ldr	x0, [x0, #80]
    7124:	str	x0, [sp, #64]
    7128:	str	xzr, [sp, #104]
    712c:	str	xzr, [sp, #96]
    7130:	str	wzr, [sp, #92]
    7134:	ldr	x0, [sp, #72]
    7138:	cmp	x0, #0x0
    713c:	b.eq	7514 <GOMP_taskgroup_end+0x414>  // b.none
    7140:	ldr	x0, [sp, #64]
    7144:	ldr	x0, [x0, #40]
    7148:	str	x0, [sp, #56]
    714c:	ldr	x0, [sp, #56]
    7150:	cmp	x0, #0x0
    7154:	cset	w0, eq  // eq = none
    7158:	and	w0, w0, #0xff
    715c:	and	x0, x0, #0xff
    7160:	cmp	x0, #0x0
    7164:	b.eq	7188 <GOMP_taskgroup_end+0x88>  // b.none
    7168:	ldr	x0, [sp, #80]
    716c:	ldr	w0, [x0, #44]
    7170:	cmp	w0, #0x0
    7174:	b.ne	7188 <GOMP_taskgroup_end+0x88>  // b.any
    7178:	ldr	x0, [sp, #72]
    717c:	add	x0, x0, #0x80
    7180:	bl	0 <gomp_team_barrier_wait>
    7184:	b	7518 <GOMP_taskgroup_end+0x418>
    7188:	ldr	x0, [sp, #56]
    718c:	add	x0, x0, #0x38
    7190:	ldar	x0, [x0]
    7194:	cmp	x0, #0x0
    7198:	b.eq	74e0 <GOMP_taskgroup_end+0x3e0>  // b.none
    719c:	ldr	x0, [sp, #72]
    71a0:	add	x0, x0, #0x500
    71a4:	bl	820 <gomp_mutex_lock>
    71a8:	strb	wzr, [sp, #55]
    71ac:	ldr	x0, [sp, #56]
    71b0:	add	x0, x0, #0x8
    71b4:	mov	w1, #0x0                   	// #0
    71b8:	bl	60 <priority_queue_empty_p>
    71bc:	and	w0, w0, #0xff
    71c0:	cmp	w0, #0x0
    71c4:	b.eq	7250 <GOMP_taskgroup_end+0x150>  // b.none
    71c8:	ldr	x0, [sp, #56]
    71cc:	ldr	x0, [x0, #56]
    71d0:	cmp	x0, #0x0
    71d4:	b.eq	7224 <GOMP_taskgroup_end+0x124>  // b.none
    71d8:	ldr	x0, [sp, #64]
    71dc:	add	x0, x0, #0x8
    71e0:	mov	w1, #0x0                   	// #0
    71e4:	bl	60 <priority_queue_empty_p>
    71e8:	and	w0, w0, #0xff
    71ec:	cmp	w0, #0x0
    71f0:	b.ne	72e0 <GOMP_taskgroup_end+0x1e0>  // b.any
    71f4:	ldr	x0, [sp, #64]
    71f8:	add	x1, x0, #0x8
    71fc:	ldr	x0, [sp, #72]
    7200:	add	x0, x0, #0x508
    7204:	add	x2, sp, #0x1f
    7208:	mov	x4, x2
    720c:	mov	x3, x0
    7210:	mov	w2, #0x0                   	// #0
    7214:	mov	w0, #0x1                   	// #1
    7218:	bl	4ac <priority_queue_next_task>
    721c:	str	x0, [sp, #104]
    7220:	b	727c <GOMP_taskgroup_end+0x17c>
    7224:	ldr	x0, [sp, #72]
    7228:	add	x0, x0, #0x500
    722c:	bl	894 <gomp_mutex_unlock>
    7230:	ldr	x0, [sp, #96]
    7234:	cmp	x0, #0x0
    7238:	b.eq	74e8 <GOMP_taskgroup_end+0x3e8>  // b.none
    723c:	ldr	x0, [sp, #96]
    7240:	bl	a70 <gomp_finish_task>
    7244:	ldr	x0, [sp, #96]
    7248:	bl	0 <free>
    724c:	b	74e8 <GOMP_taskgroup_end+0x3e8>
    7250:	ldr	x0, [sp, #56]
    7254:	add	x1, x0, #0x8
    7258:	ldr	x0, [sp, #72]
    725c:	add	x0, x0, #0x508
    7260:	add	x2, sp, #0x1f
    7264:	mov	x4, x2
    7268:	mov	x3, x0
    726c:	mov	w2, #0x0                   	// #0
    7270:	mov	w0, #0x2                   	// #2
    7274:	bl	4ac <priority_queue_next_task>
    7278:	str	x0, [sp, #104]
    727c:	ldr	x0, [sp, #104]
    7280:	ldr	w0, [x0, #200]
    7284:	cmp	w0, #0x2
    7288:	b.ne	72d8 <GOMP_taskgroup_end+0x1d8>  // b.any
    728c:	ldr	x0, [sp, #104]
    7290:	ldr	x0, [x0]
    7294:	ldr	x2, [sp, #72]
    7298:	mov	x1, x0
    729c:	ldr	x0, [sp, #104]
    72a0:	bl	58f0 <gomp_task_run_pre>
    72a4:	strb	w0, [sp, #55]
    72a8:	ldrb	w0, [sp, #55]
    72ac:	cmp	x0, #0x0
    72b0:	b.eq	72f0 <GOMP_taskgroup_end+0x1f0>  // b.none
    72b4:	ldr	x0, [sp, #96]
    72b8:	cmp	x0, #0x0
    72bc:	b.eq	743c <GOMP_taskgroup_end+0x33c>  // b.none
    72c0:	ldr	x0, [sp, #96]
    72c4:	bl	a70 <gomp_finish_task>
    72c8:	ldr	x0, [sp, #96]
    72cc:	bl	0 <free>
    72d0:	str	xzr, [sp, #96]
    72d4:	b	743c <GOMP_taskgroup_end+0x33c>
    72d8:	str	xzr, [sp, #104]
    72dc:	b	72e4 <GOMP_taskgroup_end+0x1e4>
    72e0:	nop
    72e4:	ldr	x0, [sp, #56]
    72e8:	mov	w1, #0x1                   	// #1
    72ec:	strb	w1, [x0, #48]
    72f0:	ldr	x0, [sp, #72]
    72f4:	add	x0, x0, #0x500
    72f8:	bl	894 <gomp_mutex_unlock>
    72fc:	ldr	w0, [sp, #92]
    7300:	cmp	w0, #0x0
    7304:	b.eq	731c <GOMP_taskgroup_end+0x21c>  // b.none
    7308:	ldr	x0, [sp, #72]
    730c:	add	x0, x0, #0x80
    7310:	ldr	w1, [sp, #92]
    7314:	bl	0 <gomp_team_barrier_wake>
    7318:	str	wzr, [sp, #92]
    731c:	ldr	x0, [sp, #96]
    7320:	cmp	x0, #0x0
    7324:	b.eq	733c <GOMP_taskgroup_end+0x23c>  // b.none
    7328:	ldr	x0, [sp, #96]
    732c:	bl	a70 <gomp_finish_task>
    7330:	ldr	x0, [sp, #96]
    7334:	bl	0 <free>
    7338:	str	xzr, [sp, #96]
    733c:	ldr	x0, [sp, #104]
    7340:	cmp	x0, #0x0
    7344:	b.eq	7414 <GOMP_taskgroup_end+0x314>  // b.none
    7348:	ldr	x0, [sp, #80]
    734c:	ldr	x1, [sp, #104]
    7350:	str	x1, [x0, #80]
    7354:	ldr	x0, [sp, #104]
    7358:	ldr	x0, [x0, #184]
    735c:	cmp	x0, #0x0
    7360:	cset	w0, eq  // eq = none
    7364:	and	w0, w0, #0xff
    7368:	and	x0, x0, #0xff
    736c:	cmp	x0, #0x0
    7370:	b.eq	73f0 <GOMP_taskgroup_end+0x2f0>  // b.none
    7374:	ldr	x0, [sp, #104]
    7378:	ldr	x0, [x0, #192]
    737c:	bl	0 <gomp_target_task_fn>
    7380:	and	w0, w0, #0xff
    7384:	cmp	w0, #0x0
    7388:	b.eq	7404 <GOMP_taskgroup_end+0x304>  // b.none
    738c:	ldr	x0, [sp, #80]
    7390:	ldr	x1, [sp, #64]
    7394:	str	x1, [x0, #80]
    7398:	ldr	x0, [sp, #72]
    739c:	add	x0, x0, #0x500
    73a0:	bl	820 <gomp_mutex_lock>
    73a4:	ldr	x0, [sp, #104]
    73a8:	mov	w1, #0x4                   	// #4
    73ac:	str	w1, [x0, #200]
    73b0:	ldr	x0, [sp, #104]
    73b4:	ldr	x0, [x0, #192]
    73b8:	str	x0, [sp, #40]
    73bc:	ldr	x0, [sp, #40]
    73c0:	ldr	w0, [x0, #44]
    73c4:	cmp	w0, #0x5
    73c8:	b.ne	73dc <GOMP_taskgroup_end+0x2dc>  // b.any
    73cc:	ldr	x1, [sp, #104]
    73d0:	ldr	x0, [sp, #72]
    73d4:	bl	4970 <gomp_target_task_completion>
    73d8:	b	73e8 <GOMP_taskgroup_end+0x2e8>
    73dc:	ldr	x0, [sp, #40]
    73e0:	mov	w1, #0x4                   	// #4
    73e4:	str	w1, [x0, #44]
    73e8:	str	xzr, [sp, #104]
    73ec:	b	74dc <GOMP_taskgroup_end+0x3dc>
    73f0:	ldr	x0, [sp, #104]
    73f4:	ldr	x1, [x0, #184]
    73f8:	ldr	x0, [sp, #104]
    73fc:	ldr	x0, [x0, #192]
    7400:	blr	x1
    7404:	ldr	x0, [sp, #80]
    7408:	ldr	x1, [sp, #64]
    740c:	str	x1, [x0, #80]
    7410:	b	7420 <GOMP_taskgroup_end+0x320>
    7414:	ldr	x0, [sp, #56]
    7418:	add	x0, x0, #0x34
    741c:	bl	6f4 <gomp_sem_wait>
    7420:	ldr	x0, [sp, #72]
    7424:	add	x0, x0, #0x500
    7428:	bl	820 <gomp_mutex_lock>
    742c:	ldr	x0, [sp, #104]
    7430:	cmp	x0, #0x0
    7434:	b.eq	71a8 <GOMP_taskgroup_end+0xa8>  // b.none
    7438:	b	7440 <GOMP_taskgroup_end+0x340>
    743c:	nop
    7440:	ldr	x1, [sp, #72]
    7444:	ldr	x0, [sp, #104]
    7448:	bl	5f08 <gomp_task_run_post_handle_depend>
    744c:	str	x0, [sp, #32]
    7450:	ldr	x0, [sp, #104]
    7454:	bl	5f74 <gomp_task_run_post_remove_parent>
    7458:	ldr	x0, [sp, #104]
    745c:	add	x0, x0, #0x8
    7460:	bl	16d4 <gomp_clear_parent>
    7464:	ldr	x0, [sp, #104]
    7468:	bl	6084 <gomp_task_run_post_remove_taskgroup>
    746c:	ldr	x0, [sp, #104]
    7470:	str	x0, [sp, #96]
    7474:	str	xzr, [sp, #104]
    7478:	ldr	x0, [sp, #72]
    747c:	ldr	w0, [x0, #1320]
    7480:	sub	w1, w0, #0x1
    7484:	ldr	x0, [sp, #72]
    7488:	str	w1, [x0, #1320]
    748c:	ldr	x0, [sp, #32]
    7490:	cmp	x0, #0x1
    7494:	b.ls	71a8 <GOMP_taskgroup_end+0xa8>  // b.plast
    7498:	ldr	x0, [sp, #72]
    749c:	ldr	w1, [x0]
    74a0:	ldr	x0, [sp, #72]
    74a4:	ldr	w0, [x0, #1328]
    74a8:	sub	w0, w1, w0
    74ac:	ldr	x1, [sp, #64]
    74b0:	ldrb	w1, [x1, #204]
    74b4:	eor	w1, w1, #0x1
    74b8:	and	w1, w1, #0xff
    74bc:	sub	w0, w0, w1
    74c0:	str	w0, [sp, #92]
    74c4:	ldrsw	x0, [sp, #92]
    74c8:	ldr	x1, [sp, #32]
    74cc:	cmp	x1, x0
    74d0:	b.cs	71a8 <GOMP_taskgroup_end+0xa8>  // b.hs, b.nlast
    74d4:	ldr	x0, [sp, #32]
    74d8:	str	w0, [sp, #92]
    74dc:	b	71a8 <GOMP_taskgroup_end+0xa8>
    74e0:	nop
    74e4:	b	74ec <GOMP_taskgroup_end+0x3ec>
    74e8:	nop
    74ec:	ldr	x0, [sp, #56]
    74f0:	ldr	x1, [x0]
    74f4:	ldr	x0, [sp, #64]
    74f8:	str	x1, [x0, #40]
    74fc:	ldr	x0, [sp, #56]
    7500:	add	x0, x0, #0x34
    7504:	bl	6e0 <gomp_sem_destroy>
    7508:	ldr	x0, [sp, #56]
    750c:	bl	0 <free>
    7510:	b	7518 <GOMP_taskgroup_end+0x418>
    7514:	nop
    7518:	ldp	x29, x30, [sp], #112
    751c:	ret

0000000000007520 <gomp_create_artificial_team>:
    7520:	stp	x29, x30, [sp, #-48]!
    7524:	mov	x29, sp
    7528:	bl	a08 <gomp_thread>
    752c:	str	x0, [sp, #40]
    7530:	mov	w0, #0x1                   	// #1
    7534:	bl	0 <gomp_new_team>
    7538:	str	x0, [sp, #32]
    753c:	ldr	x0, [sp, #40]
    7540:	ldr	x0, [x0, #80]
    7544:	str	x0, [sp, #24]
    7548:	ldr	x0, [sp, #24]
    754c:	cmp	x0, #0x0
    7550:	b.eq	7560 <gomp_create_artificial_team+0x40>  // b.none
    7554:	ldr	x0, [sp, #24]
    7558:	add	x0, x0, #0x90
    755c:	b	7568 <gomp_create_artificial_team+0x48>
    7560:	adrp	x0, 0 <gomp_global_icv>
    7564:	add	x0, x0, #0x0
    7568:	str	x0, [sp, #16]
    756c:	ldr	x0, [sp, #32]
    7570:	add	x2, x0, #0x8
    7574:	ldr	x0, [sp, #40]
    7578:	add	x1, x0, #0x10
    757c:	mov	x0, x2
    7580:	ldp	x2, x3, [x1]
    7584:	stp	x2, x3, [x0]
    7588:	ldp	x2, x3, [x1, #16]
    758c:	stp	x2, x3, [x0, #16]
    7590:	ldp	x2, x3, [x1, #32]
    7594:	stp	x2, x3, [x0, #32]
    7598:	ldp	x2, x3, [x1, #48]
    759c:	stp	x2, x3, [x0, #48]
    75a0:	ldr	x0, [sp, #40]
    75a4:	ldr	x1, [sp, #32]
    75a8:	str	x1, [x0, #16]
    75ac:	ldr	x0, [sp, #40]
    75b0:	str	wzr, [x0, #40]
    75b4:	ldr	x0, [sp, #32]
    75b8:	add	x1, x0, #0x100
    75bc:	ldr	x0, [sp, #40]
    75c0:	str	x1, [x0, #24]
    75c4:	ldr	x0, [sp, #40]
    75c8:	str	xzr, [x0, #32]
    75cc:	ldr	x0, [sp, #40]
    75d0:	str	xzr, [x0, #64]
    75d4:	ldr	x0, [sp, #40]
    75d8:	str	xzr, [x0, #72]
    75dc:	ldr	x0, [sp, #32]
    75e0:	add	x1, x0, #0x540
    75e4:	ldr	x0, [sp, #40]
    75e8:	str	x1, [x0, #80]
    75ec:	ldr	x0, [sp, #40]
    75f0:	ldr	x0, [x0, #80]
    75f4:	ldr	x2, [sp, #16]
    75f8:	mov	x1, #0x0                   	// #0
    75fc:	bl	151c <gomp_init_task>
    7600:	ldr	x0, [sp, #24]
    7604:	cmp	x0, #0x0
    7608:	b.eq	7638 <gomp_create_artificial_team+0x118>  // b.none
    760c:	ldr	x0, [sp, #40]
    7610:	ldr	x1, [sp, #24]
    7614:	str	x1, [x0, #80]
    7618:	bl	15c8 <gomp_end_task>
    761c:	ldr	x0, [sp, #24]
    7620:	bl	0 <free>
    7624:	ldr	x0, [sp, #32]
    7628:	add	x1, x0, #0x540
    762c:	ldr	x0, [sp, #40]
    7630:	str	x1, [x0, #80]
    7634:	b	764c <gomp_create_artificial_team+0x12c>
    7638:	adrp	x0, 0 <gomp_thread_destructor>
    763c:	add	x0, x0, #0x0
    7640:	ldr	w0, [x0]
    7644:	ldr	x1, [sp, #40]
    7648:	bl	0 <pthread_setspecific>
    764c:	nop
    7650:	ldp	x29, x30, [sp], #48
    7654:	ret

0000000000007658 <GOMP_taskgroup_reduction_register>:
    7658:	stp	x29, x30, [sp, #-208]!
    765c:	mov	x29, sp
    7660:	str	x19, [sp, #16]
    7664:	str	x0, [sp, #40]
    7668:	bl	a08 <gomp_thread>
    766c:	str	x0, [sp, #192]
    7670:	ldr	x0, [sp, #192]
    7674:	ldr	x0, [x0, #16]
    7678:	str	x0, [sp, #200]
    767c:	ldr	x0, [sp, #200]
    7680:	cmp	x0, #0x0
    7684:	cset	w0, eq  // eq = none
    7688:	and	w0, w0, #0xff
    768c:	and	x0, x0, #0xff
    7690:	cmp	x0, #0x0
    7694:	b.eq	76ac <GOMP_taskgroup_reduction_register+0x54>  // b.none
    7698:	bl	7520 <gomp_create_artificial_team>
    769c:	bl	70a4 <GOMP_taskgroup_start>
    76a0:	ldr	x0, [sp, #192]
    76a4:	ldr	x0, [x0, #16]
    76a8:	str	x0, [sp, #200]
    76ac:	ldr	x0, [sp, #200]
    76b0:	ldr	w0, [x0]
    76b4:	str	w0, [sp, #188]
    76b8:	ldr	x0, [sp, #192]
    76bc:	ldr	x0, [x0, #80]
    76c0:	str	x0, [sp, #176]
    76c4:	ldr	x0, [sp, #176]
    76c8:	ldr	x0, [x0, #40]
    76cc:	ldr	x0, [x0, #40]
    76d0:	ldr	x1, [sp, #40]
    76d4:	str	x1, [sp, #168]
    76d8:	str	x0, [sp, #160]
    76dc:	str	xzr, [sp, #152]
    76e0:	ldr	w0, [sp, #188]
    76e4:	str	w0, [sp, #148]
    76e8:	str	xzr, [sp, #136]
    76ec:	ldr	x0, [sp, #168]
    76f0:	str	x0, [sp, #128]
    76f4:	str	xzr, [sp, #120]
    76f8:	ldr	x0, [sp, #152]
    76fc:	cmp	x0, #0x0
    7700:	cset	w0, ne  // ne = any
    7704:	and	w0, w0, #0xff
    7708:	and	x0, x0, #0xff
    770c:	cmp	x0, #0x0
    7710:	b.eq	7750 <GOMP_taskgroup_reduction_register+0xf8>  // b.none
    7714:	ldr	x0, [sp, #128]
    7718:	add	x0, x0, #0x10
    771c:	ldr	x1, [sp, #152]
    7720:	ldr	x1, [x1, #16]
    7724:	str	x1, [x0]
    7728:	ldr	x0, [sp, #128]
    772c:	add	x0, x0, #0x30
    7730:	ldr	x1, [sp, #152]
    7734:	ldr	x1, [x1, #48]
    7738:	str	x1, [x0]
    773c:	ldr	x0, [sp, #152]
    7740:	add	x0, x0, #0x20
    7744:	ldr	x0, [x0]
    7748:	str	x0, [sp, #152]
    774c:	b	77c0 <GOMP_taskgroup_reduction_register+0x168>
    7750:	ldr	x0, [sp, #128]
    7754:	add	x0, x0, #0x8
    7758:	ldr	x1, [x0]
    775c:	ldr	w0, [sp, #148]
    7760:	mul	x0, x1, x0
    7764:	str	x0, [sp, #112]
    7768:	ldr	x0, [sp, #128]
    776c:	add	x0, x0, #0x10
    7770:	ldr	x0, [x0]
    7774:	ldr	x1, [sp, #112]
    7778:	bl	0 <gomp_aligned_alloc>
    777c:	str	x0, [sp, #104]
    7780:	ldr	x2, [sp, #112]
    7784:	mov	w1, #0x0                   	// #0
    7788:	ldr	x0, [sp, #104]
    778c:	bl	0 <memset>
    7790:	ldr	x0, [sp, #128]
    7794:	add	x0, x0, #0x10
    7798:	ldr	x1, [sp, #104]
    779c:	str	x1, [x0]
    77a0:	ldr	x0, [sp, #128]
    77a4:	add	x0, x0, #0x10
    77a8:	ldr	x2, [x0]
    77ac:	ldr	x0, [sp, #128]
    77b0:	add	x0, x0, #0x30
    77b4:	ldr	x1, [sp, #112]
    77b8:	add	x1, x2, x1
    77bc:	str	x1, [x0]
    77c0:	ldr	x0, [sp, #128]
    77c4:	add	x0, x0, #0x28
    77c8:	str	xzr, [x0]
    77cc:	ldr	x0, [sp, #128]
    77d0:	ldr	x0, [x0]
    77d4:	ldr	x1, [sp, #136]
    77d8:	add	x0, x1, x0
    77dc:	str	x0, [sp, #136]
    77e0:	ldr	x0, [sp, #128]
    77e4:	add	x0, x0, #0x20
    77e8:	ldr	x0, [x0]
    77ec:	cmp	x0, #0x0
    77f0:	b.ne	7818 <GOMP_taskgroup_reduction_register+0x1c0>  // b.any
    77f4:	ldr	x0, [sp, #128]
    77f8:	add	x0, x0, #0x20
    77fc:	ldr	x1, [sp, #160]
    7800:	str	x1, [x0]
    7804:	nop
    7808:	ldr	x0, [sp, #160]
    780c:	cmp	x0, #0x0
    7810:	b.eq	7868 <GOMP_taskgroup_reduction_register+0x210>  // b.none
    7814:	b	782c <GOMP_taskgroup_reduction_register+0x1d4>
    7818:	ldr	x0, [sp, #128]
    781c:	add	x0, x0, #0x20
    7820:	ldr	x0, [x0]
    7824:	str	x0, [sp, #128]
    7828:	b	76f8 <GOMP_taskgroup_reduction_register+0xa0>
    782c:	ldr	x0, [sp, #160]
    7830:	add	x0, x0, #0x28
    7834:	ldr	x0, [x0]
    7838:	cmp	x0, #0x0
    783c:	b.eq	7868 <GOMP_taskgroup_reduction_register+0x210>  // b.none
    7840:	ldr	x0, [sp, #160]
    7844:	add	x0, x0, #0x28
    7848:	ldr	x0, [x0]
    784c:	str	x0, [sp, #120]
    7850:	ldr	x0, [sp, #120]
    7854:	bl	c40 <htab_elements>
    7858:	mov	x1, x0
    785c:	ldr	x0, [sp, #136]
    7860:	add	x0, x0, x1
    7864:	str	x0, [sp, #136]
    7868:	ldr	x0, [sp, #136]
    786c:	bl	dac <htab_create>
    7870:	str	x0, [sp, #48]
    7874:	ldr	x0, [sp, #120]
    7878:	cmp	x0, #0x0
    787c:	b.eq	791c <GOMP_taskgroup_reduction_register+0x2c4>  // b.none
    7880:	ldr	x19, [sp, #48]
    7884:	ldr	x0, [sp, #120]
    7888:	bl	c40 <htab_elements>
    788c:	str	x0, [x19, #8]
    7890:	ldr	x0, [sp, #120]
    7894:	add	x1, x0, #0x20
    7898:	ldr	x0, [sp, #120]
    789c:	ldr	x0, [x0]
    78a0:	lsl	x0, x0, #3
    78a4:	add	x0, x1, x0
    78a8:	str	x0, [sp, #96]
    78ac:	ldr	x0, [sp, #120]
    78b0:	add	x0, x0, #0x20
    78b4:	str	x0, [sp, #88]
    78b8:	ldr	x0, [sp, #88]
    78bc:	ldr	x0, [x0]
    78c0:	str	x0, [sp, #80]
    78c4:	ldr	x0, [sp, #80]
    78c8:	cmp	x0, #0x0
    78cc:	b.eq	7900 <GOMP_taskgroup_reduction_register+0x2a8>  // b.none
    78d0:	ldr	x0, [sp, #80]
    78d4:	cmp	x0, #0x1
    78d8:	b.eq	7900 <GOMP_taskgroup_reduction_register+0x2a8>  // b.none
    78dc:	ldr	x19, [sp, #48]
    78e0:	ldr	x0, [sp, #80]
    78e4:	bl	14cc <htab_hash>
    78e8:	mov	w1, w0
    78ec:	mov	x0, x19
    78f0:	bl	e4c <find_empty_slot_for_expand>
    78f4:	mov	x1, x0
    78f8:	ldr	x0, [sp, #80]
    78fc:	str	x0, [x1]
    7900:	ldr	x0, [sp, #88]
    7904:	add	x0, x0, #0x8
    7908:	str	x0, [sp, #88]
    790c:	ldr	x1, [sp, #96]
    7910:	ldr	x0, [sp, #88]
    7914:	cmp	x1, x0
    7918:	b.hi	78b8 <GOMP_taskgroup_reduction_register+0x260>  // b.pmore
    791c:	ldr	x0, [sp, #168]
    7920:	str	x0, [sp, #128]
    7924:	str	xzr, [sp, #72]
    7928:	b	7990 <GOMP_taskgroup_reduction_register+0x338>
    792c:	ldr	x1, [sp, #72]
    7930:	mov	x0, x1
    7934:	lsl	x0, x0, #1
    7938:	add	x0, x0, x1
    793c:	lsl	x0, x0, #3
    7940:	add	x0, x0, #0x38
    7944:	ldr	x1, [sp, #128]
    7948:	add	x0, x1, x0
    794c:	str	x0, [sp, #64]
    7950:	ldr	x0, [sp, #64]
    7954:	add	x0, x0, #0x10
    7958:	ldr	x1, [sp, #128]
    795c:	str	x1, [x0]
    7960:	ldr	x0, [sp, #64]
    7964:	str	x0, [sp, #56]
    7968:	add	x0, sp, #0x30
    796c:	mov	w2, #0x1                   	// #1
    7970:	ldr	x1, [sp, #56]
    7974:	bl	1194 <htab_find_slot>
    7978:	mov	x1, x0
    797c:	ldr	x0, [sp, #56]
    7980:	str	x0, [x1]
    7984:	ldr	x0, [sp, #72]
    7988:	add	x0, x0, #0x1
    798c:	str	x0, [sp, #72]
    7990:	ldr	x0, [sp, #128]
    7994:	ldr	x0, [x0]
    7998:	ldr	x1, [sp, #72]
    799c:	cmp	x1, x0
    79a0:	b.cc	792c <GOMP_taskgroup_reduction_register+0x2d4>  // b.lo, b.ul, b.last
    79a4:	ldr	x0, [sp, #128]
    79a8:	add	x0, x0, #0x20
    79ac:	ldr	x1, [x0]
    79b0:	ldr	x0, [sp, #160]
    79b4:	cmp	x1, x0
    79b8:	b.eq	79d0 <GOMP_taskgroup_reduction_register+0x378>  // b.none
    79bc:	ldr	x0, [sp, #128]
    79c0:	add	x0, x0, #0x20
    79c4:	ldr	x0, [x0]
    79c8:	str	x0, [sp, #128]
    79cc:	b	7924 <GOMP_taskgroup_reduction_register+0x2cc>
    79d0:	nop
    79d4:	ldr	x1, [sp, #48]
    79d8:	ldr	x0, [sp, #128]
    79dc:	add	x0, x0, #0x28
    79e0:	str	x1, [x0]
    79e4:	nop
    79e8:	ldr	x0, [sp, #176]
    79ec:	ldr	x0, [x0, #40]
    79f0:	ldr	x1, [sp, #40]
    79f4:	str	x1, [x0, #40]
    79f8:	nop
    79fc:	ldr	x19, [sp, #16]
    7a00:	ldp	x29, x30, [sp], #208
    7a04:	ret

0000000000007a08 <GOMP_taskgroup_reduction_unregister>:
    7a08:	stp	x29, x30, [sp, #-48]!
    7a0c:	mov	x29, sp
    7a10:	str	x0, [sp, #24]
    7a14:	ldr	x0, [sp, #24]
    7a18:	str	x0, [sp, #40]
    7a1c:	ldr	x0, [sp, #24]
    7a20:	add	x0, x0, #0x28
    7a24:	ldr	x0, [x0]
    7a28:	bl	b48 <htab_free>
    7a2c:	ldr	x0, [sp, #40]
    7a30:	add	x0, x0, #0x10
    7a34:	ldr	x0, [x0]
    7a38:	bl	0 <gomp_aligned_free>
    7a3c:	ldr	x0, [sp, #40]
    7a40:	add	x0, x0, #0x20
    7a44:	ldr	x0, [x0]
    7a48:	str	x0, [sp, #40]
    7a4c:	ldr	x0, [sp, #40]
    7a50:	cmp	x0, #0x0
    7a54:	b.eq	7a6c <GOMP_taskgroup_reduction_unregister+0x64>  // b.none
    7a58:	ldr	x0, [sp, #40]
    7a5c:	add	x0, x0, #0x28
    7a60:	ldr	x0, [x0]
    7a64:	cmp	x0, #0x0
    7a68:	b.eq	7a2c <GOMP_taskgroup_reduction_unregister+0x24>  // b.none
    7a6c:	nop
    7a70:	ldp	x29, x30, [sp], #48
    7a74:	ret

0000000000007a78 <GOMP_task_reduction_remap>:
    7a78:	stp	x29, x30, [sp, #-160]!
    7a7c:	mov	x29, sp
    7a80:	str	x0, [sp, #40]
    7a84:	str	x1, [sp, #32]
    7a88:	str	x2, [sp, #24]
    7a8c:	bl	a08 <gomp_thread>
    7a90:	str	x0, [sp, #120]
    7a94:	ldr	x0, [sp, #120]
    7a98:	ldr	x0, [x0, #80]
    7a9c:	str	x0, [sp, #112]
    7aa0:	ldr	x0, [sp, #120]
    7aa4:	ldr	w0, [x0, #40]
    7aa8:	str	w0, [sp, #108]
    7aac:	ldr	x0, [sp, #112]
    7ab0:	ldr	x0, [x0, #40]
    7ab4:	ldr	x0, [x0, #40]
    7ab8:	str	x0, [sp, #96]
    7abc:	ldr	x0, [sp, #96]
    7ac0:	add	x0, x0, #0x28
    7ac4:	ldr	x0, [x0]
    7ac8:	str	x0, [sp, #88]
    7acc:	str	xzr, [sp, #144]
    7ad0:	b	7e58 <GOMP_task_reduction_remap+0x3e0>
    7ad4:	ldr	x0, [sp, #144]
    7ad8:	lsl	x0, x0, #3
    7adc:	ldr	x1, [sp, #24]
    7ae0:	add	x0, x1, x0
    7ae4:	str	x0, [sp, #80]
    7ae8:	ldr	x1, [sp, #80]
    7aec:	ldr	x0, [sp, #88]
    7af0:	bl	107c <htab_find>
    7af4:	str	x0, [sp, #72]
    7af8:	ldr	x0, [sp, #72]
    7afc:	cmp	x0, #0x0
    7b00:	b.eq	7bb4 <GOMP_task_reduction_remap+0x13c>  // b.none
    7b04:	ldr	x0, [sp, #72]
    7b08:	str	x0, [sp, #48]
    7b0c:	ldr	x0, [sp, #48]
    7b10:	add	x0, x0, #0x10
    7b14:	ldr	x0, [x0]
    7b18:	str	x0, [sp, #152]
    7b1c:	ldr	x0, [sp, #152]
    7b20:	add	x0, x0, #0x10
    7b24:	ldr	x1, [x0]
    7b28:	ldr	w2, [sp, #108]
    7b2c:	ldr	x0, [sp, #152]
    7b30:	add	x0, x0, #0x8
    7b34:	ldr	x0, [x0]
    7b38:	mul	x0, x2, x0
    7b3c:	add	x1, x1, x0
    7b40:	ldr	x0, [sp, #48]
    7b44:	add	x0, x0, #0x8
    7b48:	ldr	x0, [x0]
    7b4c:	add	x2, x1, x0
    7b50:	ldr	x0, [sp, #144]
    7b54:	lsl	x0, x0, #3
    7b58:	ldr	x1, [sp, #24]
    7b5c:	add	x0, x1, x0
    7b60:	mov	x1, x2
    7b64:	str	x1, [x0]
    7b68:	ldr	x1, [sp, #144]
    7b6c:	ldr	x0, [sp, #32]
    7b70:	cmp	x1, x0
    7b74:	cset	w0, cc  // cc = lo, ul, last
    7b78:	and	w0, w0, #0xff
    7b7c:	and	x0, x0, #0xff
    7b80:	cmp	x0, #0x0
    7b84:	b.eq	7e48 <GOMP_task_reduction_remap+0x3d0>  // b.none
    7b88:	ldr	x0, [sp, #48]
    7b8c:	ldr	x2, [x0]
    7b90:	ldr	x1, [sp, #40]
    7b94:	ldr	x0, [sp, #144]
    7b98:	add	x0, x1, x0
    7b9c:	lsl	x0, x0, #3
    7ba0:	ldr	x1, [sp, #24]
    7ba4:	add	x0, x1, x0
    7ba8:	mov	x1, x2
    7bac:	str	x1, [x0]
    7bb0:	b	7e48 <GOMP_task_reduction_remap+0x3d0>
    7bb4:	ldr	x0, [sp, #96]
    7bb8:	str	x0, [sp, #152]
    7bbc:	b	7c28 <GOMP_task_reduction_remap+0x1b0>
    7bc0:	ldr	x0, [sp, #144]
    7bc4:	lsl	x0, x0, #3
    7bc8:	ldr	x1, [sp, #24]
    7bcc:	add	x0, x1, x0
    7bd0:	ldr	x0, [x0]
    7bd4:	mov	x1, x0
    7bd8:	ldr	x0, [sp, #152]
    7bdc:	add	x0, x0, #0x10
    7be0:	ldr	x0, [x0]
    7be4:	cmp	x1, x0
    7be8:	b.cc	7c18 <GOMP_task_reduction_remap+0x1a0>  // b.lo, b.ul, b.last
    7bec:	ldr	x0, [sp, #144]
    7bf0:	lsl	x0, x0, #3
    7bf4:	ldr	x1, [sp, #24]
    7bf8:	add	x0, x1, x0
    7bfc:	ldr	x0, [x0]
    7c00:	mov	x1, x0
    7c04:	ldr	x0, [sp, #152]
    7c08:	add	x0, x0, #0x30
    7c0c:	ldr	x0, [x0]
    7c10:	cmp	x1, x0
    7c14:	b.cc	7c38 <GOMP_task_reduction_remap+0x1c0>  // b.lo, b.ul, b.last
    7c18:	ldr	x0, [sp, #152]
    7c1c:	add	x0, x0, #0x20
    7c20:	ldr	x0, [x0]
    7c24:	str	x0, [sp, #152]
    7c28:	ldr	x0, [sp, #152]
    7c2c:	cmp	x0, #0x0
    7c30:	b.ne	7bc0 <GOMP_task_reduction_remap+0x148>  // b.any
    7c34:	b	7c3c <GOMP_task_reduction_remap+0x1c4>
    7c38:	nop
    7c3c:	ldr	x0, [sp, #152]
    7c40:	cmp	x0, #0x0
    7c44:	b.ne	7c6c <GOMP_task_reduction_remap+0x1f4>  // b.any
    7c48:	ldr	x0, [sp, #144]
    7c4c:	lsl	x0, x0, #3
    7c50:	ldr	x1, [sp, #24]
    7c54:	add	x0, x1, x0
    7c58:	ldr	x0, [x0]
    7c5c:	mov	x1, x0
    7c60:	adrp	x0, 0 <priority_queue_multi_p>
    7c64:	add	x0, x0, #0x0
    7c68:	bl	0 <gomp_fatal>
    7c6c:	ldr	x0, [sp, #144]
    7c70:	lsl	x0, x0, #3
    7c74:	ldr	x1, [sp, #24]
    7c78:	add	x0, x1, x0
    7c7c:	ldr	x0, [x0]
    7c80:	mov	x1, x0
    7c84:	ldr	x0, [sp, #152]
    7c88:	add	x0, x0, #0x10
    7c8c:	ldr	x0, [x0]
    7c90:	sub	x0, x1, x0
    7c94:	ldr	x1, [sp, #152]
    7c98:	add	x1, x1, #0x8
    7c9c:	ldr	x1, [x1]
    7ca0:	udiv	x2, x0, x1
    7ca4:	mul	x1, x2, x1
    7ca8:	sub	x0, x0, x1
    7cac:	str	x0, [sp, #64]
    7cb0:	ldr	x0, [sp, #152]
    7cb4:	add	x0, x0, #0x10
    7cb8:	ldr	x1, [x0]
    7cbc:	ldr	w2, [sp, #108]
    7cc0:	ldr	x0, [sp, #152]
    7cc4:	add	x0, x0, #0x8
    7cc8:	ldr	x0, [x0]
    7ccc:	mul	x0, x2, x0
    7cd0:	add	x1, x1, x0
    7cd4:	ldr	x0, [sp, #64]
    7cd8:	add	x2, x1, x0
    7cdc:	ldr	x0, [sp, #144]
    7ce0:	lsl	x0, x0, #3
    7ce4:	ldr	x1, [sp, #24]
    7ce8:	add	x0, x1, x0
    7cec:	mov	x1, x2
    7cf0:	str	x1, [x0]
    7cf4:	ldr	x1, [sp, #144]
    7cf8:	ldr	x0, [sp, #32]
    7cfc:	cmp	x1, x0
    7d00:	cset	w0, cc  // cc = lo, ul, last
    7d04:	and	w0, w0, #0xff
    7d08:	and	x0, x0, #0xff
    7d0c:	cmp	x0, #0x0
    7d10:	b.eq	7e4c <GOMP_task_reduction_remap+0x3d4>  // b.none
    7d14:	str	xzr, [sp, #136]
    7d18:	ldr	x0, [sp, #152]
    7d1c:	ldr	x0, [x0]
    7d20:	sub	x0, x0, #0x1
    7d24:	str	x0, [sp, #128]
    7d28:	b	7e04 <GOMP_task_reduction_remap+0x38c>
    7d2c:	ldr	x1, [sp, #136]
    7d30:	ldr	x0, [sp, #128]
    7d34:	add	x0, x1, x0
    7d38:	lsr	x0, x0, #1
    7d3c:	str	x0, [sp, #56]
    7d40:	ldr	x1, [sp, #56]
    7d44:	mov	x0, x1
    7d48:	lsl	x0, x0, #1
    7d4c:	add	x0, x0, x1
    7d50:	lsl	x0, x0, #3
    7d54:	add	x0, x0, #0x40
    7d58:	ldr	x1, [sp, #152]
    7d5c:	add	x0, x1, x0
    7d60:	ldr	x0, [x0]
    7d64:	ldr	x1, [sp, #64]
    7d68:	cmp	x1, x0
    7d6c:	b.ls	7d80 <GOMP_task_reduction_remap+0x308>  // b.plast
    7d70:	ldr	x0, [sp, #56]
    7d74:	add	x0, x0, #0x1
    7d78:	str	x0, [sp, #136]
    7d7c:	b	7e04 <GOMP_task_reduction_remap+0x38c>
    7d80:	ldr	x1, [sp, #56]
    7d84:	mov	x0, x1
    7d88:	lsl	x0, x0, #1
    7d8c:	add	x0, x0, x1
    7d90:	lsl	x0, x0, #3
    7d94:	add	x0, x0, #0x40
    7d98:	ldr	x1, [sp, #152]
    7d9c:	add	x0, x1, x0
    7da0:	ldr	x0, [x0]
    7da4:	ldr	x1, [sp, #64]
    7da8:	cmp	x1, x0
    7dac:	b.ne	7df8 <GOMP_task_reduction_remap+0x380>  // b.any
    7db0:	ldr	x1, [sp, #56]
    7db4:	mov	x0, x1
    7db8:	lsl	x0, x0, #1
    7dbc:	add	x0, x0, x1
    7dc0:	lsl	x0, x0, #3
    7dc4:	add	x0, x0, #0x38
    7dc8:	ldr	x1, [sp, #152]
    7dcc:	add	x0, x1, x0
    7dd0:	ldr	x2, [x0]
    7dd4:	ldr	x1, [sp, #40]
    7dd8:	ldr	x0, [sp, #144]
    7ddc:	add	x0, x1, x0
    7de0:	lsl	x0, x0, #3
    7de4:	ldr	x1, [sp, #24]
    7de8:	add	x0, x1, x0
    7dec:	mov	x1, x2
    7df0:	str	x1, [x0]
    7df4:	b	7e14 <GOMP_task_reduction_remap+0x39c>
    7df8:	ldr	x0, [sp, #56]
    7dfc:	sub	x0, x0, #0x1
    7e00:	str	x0, [sp, #128]
    7e04:	ldr	x1, [sp, #136]
    7e08:	ldr	x0, [sp, #128]
    7e0c:	cmp	x1, x0
    7e10:	b.ls	7d2c <GOMP_task_reduction_remap+0x2b4>  // b.plast
    7e14:	ldr	x1, [sp, #136]
    7e18:	ldr	x0, [sp, #128]
    7e1c:	cmp	x1, x0
    7e20:	b.ls	7e4c <GOMP_task_reduction_remap+0x3d4>  // b.plast
    7e24:	ldr	x0, [sp, #144]
    7e28:	lsl	x0, x0, #3
    7e2c:	ldr	x1, [sp, #24]
    7e30:	add	x0, x1, x0
    7e34:	ldr	x0, [x0]
    7e38:	mov	x1, x0
    7e3c:	adrp	x0, 0 <priority_queue_multi_p>
    7e40:	add	x0, x0, #0x0
    7e44:	bl	0 <gomp_fatal>
    7e48:	nop
    7e4c:	ldr	x0, [sp, #144]
    7e50:	add	x0, x0, #0x1
    7e54:	str	x0, [sp, #144]
    7e58:	ldr	x1, [sp, #144]
    7e5c:	ldr	x0, [sp, #40]
    7e60:	cmp	x1, x0
    7e64:	b.cc	7ad4 <GOMP_task_reduction_remap+0x5c>  // b.lo, b.ul, b.last
    7e68:	nop
    7e6c:	nop
    7e70:	ldp	x29, x30, [sp], #160
    7e74:	ret

0000000000007e78 <gomp_parallel_reduction_register>:
    7e78:	stp	x29, x30, [sp, #-192]!
    7e7c:	mov	x29, sp
    7e80:	str	x19, [sp, #16]
    7e84:	str	x0, [sp, #40]
    7e88:	str	w1, [sp, #36]
    7e8c:	mov	x0, #0x0                   	// #0
    7e90:	bl	7014 <gomp_taskgroup_init>
    7e94:	str	x0, [sp, #184]
    7e98:	ldr	x0, [sp, #40]
    7e9c:	str	x0, [sp, #176]
    7ea0:	str	xzr, [sp, #168]
    7ea4:	str	xzr, [sp, #160]
    7ea8:	ldr	w0, [sp, #36]
    7eac:	str	w0, [sp, #156]
    7eb0:	str	xzr, [sp, #144]
    7eb4:	ldr	x0, [sp, #176]
    7eb8:	str	x0, [sp, #136]
    7ebc:	str	xzr, [sp, #128]
    7ec0:	ldr	x0, [sp, #160]
    7ec4:	cmp	x0, #0x0
    7ec8:	cset	w0, ne  // ne = any
    7ecc:	and	w0, w0, #0xff
    7ed0:	and	x0, x0, #0xff
    7ed4:	cmp	x0, #0x0
    7ed8:	b.eq	7f18 <gomp_parallel_reduction_register+0xa0>  // b.none
    7edc:	ldr	x0, [sp, #136]
    7ee0:	add	x0, x0, #0x10
    7ee4:	ldr	x1, [sp, #160]
    7ee8:	ldr	x1, [x1, #16]
    7eec:	str	x1, [x0]
    7ef0:	ldr	x0, [sp, #136]
    7ef4:	add	x0, x0, #0x30
    7ef8:	ldr	x1, [sp, #160]
    7efc:	ldr	x1, [x1, #48]
    7f00:	str	x1, [x0]
    7f04:	ldr	x0, [sp, #160]
    7f08:	add	x0, x0, #0x20
    7f0c:	ldr	x0, [x0]
    7f10:	str	x0, [sp, #160]
    7f14:	b	7f88 <gomp_parallel_reduction_register+0x110>
    7f18:	ldr	x0, [sp, #136]
    7f1c:	add	x0, x0, #0x8
    7f20:	ldr	x1, [x0]
    7f24:	ldr	w0, [sp, #156]
    7f28:	mul	x0, x1, x0
    7f2c:	str	x0, [sp, #120]
    7f30:	ldr	x0, [sp, #136]
    7f34:	add	x0, x0, #0x10
    7f38:	ldr	x0, [x0]
    7f3c:	ldr	x1, [sp, #120]
    7f40:	bl	0 <gomp_aligned_alloc>
    7f44:	str	x0, [sp, #112]
    7f48:	ldr	x2, [sp, #120]
    7f4c:	mov	w1, #0x0                   	// #0
    7f50:	ldr	x0, [sp, #112]
    7f54:	bl	0 <memset>
    7f58:	ldr	x0, [sp, #136]
    7f5c:	add	x0, x0, #0x10
    7f60:	ldr	x1, [sp, #112]
    7f64:	str	x1, [x0]
    7f68:	ldr	x0, [sp, #136]
    7f6c:	add	x0, x0, #0x10
    7f70:	ldr	x2, [x0]
    7f74:	ldr	x0, [sp, #136]
    7f78:	add	x0, x0, #0x30
    7f7c:	ldr	x1, [sp, #120]
    7f80:	add	x1, x2, x1
    7f84:	str	x1, [x0]
    7f88:	ldr	x0, [sp, #136]
    7f8c:	add	x0, x0, #0x28
    7f90:	str	xzr, [x0]
    7f94:	ldr	x0, [sp, #136]
    7f98:	ldr	x0, [x0]
    7f9c:	ldr	x1, [sp, #144]
    7fa0:	add	x0, x1, x0
    7fa4:	str	x0, [sp, #144]
    7fa8:	ldr	x0, [sp, #136]
    7fac:	add	x0, x0, #0x20
    7fb0:	ldr	x0, [x0]
    7fb4:	cmp	x0, #0x0
    7fb8:	b.ne	7fe0 <gomp_parallel_reduction_register+0x168>  // b.any
    7fbc:	ldr	x0, [sp, #136]
    7fc0:	add	x0, x0, #0x20
    7fc4:	ldr	x1, [sp, #168]
    7fc8:	str	x1, [x0]
    7fcc:	nop
    7fd0:	ldr	x0, [sp, #168]
    7fd4:	cmp	x0, #0x0
    7fd8:	b.eq	8030 <gomp_parallel_reduction_register+0x1b8>  // b.none
    7fdc:	b	7ff4 <gomp_parallel_reduction_register+0x17c>
    7fe0:	ldr	x0, [sp, #136]
    7fe4:	add	x0, x0, #0x20
    7fe8:	ldr	x0, [x0]
    7fec:	str	x0, [sp, #136]
    7ff0:	b	7ec0 <gomp_parallel_reduction_register+0x48>
    7ff4:	ldr	x0, [sp, #168]
    7ff8:	add	x0, x0, #0x28
    7ffc:	ldr	x0, [x0]
    8000:	cmp	x0, #0x0
    8004:	b.eq	8030 <gomp_parallel_reduction_register+0x1b8>  // b.none
    8008:	ldr	x0, [sp, #168]
    800c:	add	x0, x0, #0x28
    8010:	ldr	x0, [x0]
    8014:	str	x0, [sp, #128]
    8018:	ldr	x0, [sp, #128]
    801c:	bl	c40 <htab_elements>
    8020:	mov	x1, x0
    8024:	ldr	x0, [sp, #144]
    8028:	add	x0, x0, x1
    802c:	str	x0, [sp, #144]
    8030:	ldr	x0, [sp, #144]
    8034:	bl	dac <htab_create>
    8038:	str	x0, [sp, #56]
    803c:	ldr	x0, [sp, #128]
    8040:	cmp	x0, #0x0
    8044:	b.eq	80e4 <gomp_parallel_reduction_register+0x26c>  // b.none
    8048:	ldr	x19, [sp, #56]
    804c:	ldr	x0, [sp, #128]
    8050:	bl	c40 <htab_elements>
    8054:	str	x0, [x19, #8]
    8058:	ldr	x0, [sp, #128]
    805c:	add	x1, x0, #0x20
    8060:	ldr	x0, [sp, #128]
    8064:	ldr	x0, [x0]
    8068:	lsl	x0, x0, #3
    806c:	add	x0, x1, x0
    8070:	str	x0, [sp, #104]
    8074:	ldr	x0, [sp, #128]
    8078:	add	x0, x0, #0x20
    807c:	str	x0, [sp, #96]
    8080:	ldr	x0, [sp, #96]
    8084:	ldr	x0, [x0]
    8088:	str	x0, [sp, #88]
    808c:	ldr	x0, [sp, #88]
    8090:	cmp	x0, #0x0
    8094:	b.eq	80c8 <gomp_parallel_reduction_register+0x250>  // b.none
    8098:	ldr	x0, [sp, #88]
    809c:	cmp	x0, #0x1
    80a0:	b.eq	80c8 <gomp_parallel_reduction_register+0x250>  // b.none
    80a4:	ldr	x19, [sp, #56]
    80a8:	ldr	x0, [sp, #88]
    80ac:	bl	14cc <htab_hash>
    80b0:	mov	w1, w0
    80b4:	mov	x0, x19
    80b8:	bl	e4c <find_empty_slot_for_expand>
    80bc:	mov	x1, x0
    80c0:	ldr	x0, [sp, #88]
    80c4:	str	x0, [x1]
    80c8:	ldr	x0, [sp, #96]
    80cc:	add	x0, x0, #0x8
    80d0:	str	x0, [sp, #96]
    80d4:	ldr	x1, [sp, #104]
    80d8:	ldr	x0, [sp, #96]
    80dc:	cmp	x1, x0
    80e0:	b.hi	8080 <gomp_parallel_reduction_register+0x208>  // b.pmore
    80e4:	ldr	x0, [sp, #176]
    80e8:	str	x0, [sp, #136]
    80ec:	str	xzr, [sp, #80]
    80f0:	b	8158 <gomp_parallel_reduction_register+0x2e0>
    80f4:	ldr	x1, [sp, #80]
    80f8:	mov	x0, x1
    80fc:	lsl	x0, x0, #1
    8100:	add	x0, x0, x1
    8104:	lsl	x0, x0, #3
    8108:	add	x0, x0, #0x38
    810c:	ldr	x1, [sp, #136]
    8110:	add	x0, x1, x0
    8114:	str	x0, [sp, #72]
    8118:	ldr	x0, [sp, #72]
    811c:	add	x0, x0, #0x10
    8120:	ldr	x1, [sp, #136]
    8124:	str	x1, [x0]
    8128:	ldr	x0, [sp, #72]
    812c:	str	x0, [sp, #64]
    8130:	add	x0, sp, #0x38
    8134:	mov	w2, #0x1                   	// #1
    8138:	ldr	x1, [sp, #64]
    813c:	bl	1194 <htab_find_slot>
    8140:	mov	x1, x0
    8144:	ldr	x0, [sp, #64]
    8148:	str	x0, [x1]
    814c:	ldr	x0, [sp, #80]
    8150:	add	x0, x0, #0x1
    8154:	str	x0, [sp, #80]
    8158:	ldr	x0, [sp, #136]
    815c:	ldr	x0, [x0]
    8160:	ldr	x1, [sp, #80]
    8164:	cmp	x1, x0
    8168:	b.cc	80f4 <gomp_parallel_reduction_register+0x27c>  // b.lo, b.ul, b.last
    816c:	ldr	x0, [sp, #136]
    8170:	add	x0, x0, #0x20
    8174:	ldr	x1, [x0]
    8178:	ldr	x0, [sp, #168]
    817c:	cmp	x1, x0
    8180:	b.eq	8198 <gomp_parallel_reduction_register+0x320>  // b.none
    8184:	ldr	x0, [sp, #136]
    8188:	add	x0, x0, #0x20
    818c:	ldr	x0, [x0]
    8190:	str	x0, [sp, #136]
    8194:	b	80ec <gomp_parallel_reduction_register+0x274>
    8198:	nop
    819c:	ldr	x1, [sp, #56]
    81a0:	ldr	x0, [sp, #136]
    81a4:	add	x0, x0, #0x28
    81a8:	str	x1, [x0]
    81ac:	nop
    81b0:	ldr	x0, [sp, #184]
    81b4:	ldr	x1, [sp, #40]
    81b8:	str	x1, [x0, #40]
    81bc:	ldr	x0, [sp, #184]
    81c0:	ldr	x19, [sp, #16]
    81c4:	ldp	x29, x30, [sp], #192
    81c8:	ret

00000000000081cc <gomp_workshare_task_reduction_register>:
    81cc:	stp	x29, x30, [sp, #-208]!
    81d0:	mov	x29, sp
    81d4:	str	x19, [sp, #16]
    81d8:	str	x0, [sp, #40]
    81dc:	str	x1, [sp, #32]
    81e0:	bl	a08 <gomp_thread>
    81e4:	str	x0, [sp, #200]
    81e8:	ldr	x0, [sp, #200]
    81ec:	ldr	x0, [x0, #16]
    81f0:	str	x0, [sp, #192]
    81f4:	ldr	x0, [sp, #200]
    81f8:	ldr	x0, [x0, #80]
    81fc:	str	x0, [sp, #184]
    8200:	ldr	x0, [sp, #192]
    8204:	ldr	w0, [x0]
    8208:	str	w0, [sp, #180]
    820c:	ldr	x0, [sp, #184]
    8210:	ldr	x0, [x0, #40]
    8214:	ldr	x0, [x0, #40]
    8218:	ldr	x1, [sp, #40]
    821c:	str	x1, [sp, #168]
    8220:	str	x0, [sp, #160]
    8224:	ldr	x0, [sp, #32]
    8228:	str	x0, [sp, #152]
    822c:	ldr	w0, [sp, #180]
    8230:	str	w0, [sp, #148]
    8234:	str	xzr, [sp, #136]
    8238:	ldr	x0, [sp, #168]
    823c:	str	x0, [sp, #128]
    8240:	str	xzr, [sp, #120]
    8244:	ldr	x0, [sp, #152]
    8248:	cmp	x0, #0x0
    824c:	cset	w0, ne  // ne = any
    8250:	and	w0, w0, #0xff
    8254:	and	x0, x0, #0xff
    8258:	cmp	x0, #0x0
    825c:	b.eq	829c <gomp_workshare_task_reduction_register+0xd0>  // b.none
    8260:	ldr	x0, [sp, #128]
    8264:	add	x0, x0, #0x10
    8268:	ldr	x1, [sp, #152]
    826c:	ldr	x1, [x1, #16]
    8270:	str	x1, [x0]
    8274:	ldr	x0, [sp, #128]
    8278:	add	x0, x0, #0x30
    827c:	ldr	x1, [sp, #152]
    8280:	ldr	x1, [x1, #48]
    8284:	str	x1, [x0]
    8288:	ldr	x0, [sp, #152]
    828c:	add	x0, x0, #0x20
    8290:	ldr	x0, [x0]
    8294:	str	x0, [sp, #152]
    8298:	b	830c <gomp_workshare_task_reduction_register+0x140>
    829c:	ldr	x0, [sp, #128]
    82a0:	add	x0, x0, #0x8
    82a4:	ldr	x1, [x0]
    82a8:	ldr	w0, [sp, #148]
    82ac:	mul	x0, x1, x0
    82b0:	str	x0, [sp, #112]
    82b4:	ldr	x0, [sp, #128]
    82b8:	add	x0, x0, #0x10
    82bc:	ldr	x0, [x0]
    82c0:	ldr	x1, [sp, #112]
    82c4:	bl	0 <gomp_aligned_alloc>
    82c8:	str	x0, [sp, #104]
    82cc:	ldr	x2, [sp, #112]
    82d0:	mov	w1, #0x0                   	// #0
    82d4:	ldr	x0, [sp, #104]
    82d8:	bl	0 <memset>
    82dc:	ldr	x0, [sp, #128]
    82e0:	add	x0, x0, #0x10
    82e4:	ldr	x1, [sp, #104]
    82e8:	str	x1, [x0]
    82ec:	ldr	x0, [sp, #128]
    82f0:	add	x0, x0, #0x10
    82f4:	ldr	x2, [x0]
    82f8:	ldr	x0, [sp, #128]
    82fc:	add	x0, x0, #0x30
    8300:	ldr	x1, [sp, #112]
    8304:	add	x1, x2, x1
    8308:	str	x1, [x0]
    830c:	ldr	x0, [sp, #128]
    8310:	add	x0, x0, #0x28
    8314:	str	xzr, [x0]
    8318:	ldr	x0, [sp, #128]
    831c:	ldr	x0, [x0]
    8320:	ldr	x1, [sp, #136]
    8324:	add	x0, x1, x0
    8328:	str	x0, [sp, #136]
    832c:	ldr	x0, [sp, #128]
    8330:	add	x0, x0, #0x20
    8334:	ldr	x0, [x0]
    8338:	cmp	x0, #0x0
    833c:	b.ne	8364 <gomp_workshare_task_reduction_register+0x198>  // b.any
    8340:	ldr	x0, [sp, #128]
    8344:	add	x0, x0, #0x20
    8348:	ldr	x1, [sp, #160]
    834c:	str	x1, [x0]
    8350:	nop
    8354:	ldr	x0, [sp, #160]
    8358:	cmp	x0, #0x0
    835c:	b.eq	83b4 <gomp_workshare_task_reduction_register+0x1e8>  // b.none
    8360:	b	8378 <gomp_workshare_task_reduction_register+0x1ac>
    8364:	ldr	x0, [sp, #128]
    8368:	add	x0, x0, #0x20
    836c:	ldr	x0, [x0]
    8370:	str	x0, [sp, #128]
    8374:	b	8244 <gomp_workshare_task_reduction_register+0x78>
    8378:	ldr	x0, [sp, #160]
    837c:	add	x0, x0, #0x28
    8380:	ldr	x0, [x0]
    8384:	cmp	x0, #0x0
    8388:	b.eq	83b4 <gomp_workshare_task_reduction_register+0x1e8>  // b.none
    838c:	ldr	x0, [sp, #160]
    8390:	add	x0, x0, #0x28
    8394:	ldr	x0, [x0]
    8398:	str	x0, [sp, #120]
    839c:	ldr	x0, [sp, #120]
    83a0:	bl	c40 <htab_elements>
    83a4:	mov	x1, x0
    83a8:	ldr	x0, [sp, #136]
    83ac:	add	x0, x0, x1
    83b0:	str	x0, [sp, #136]
    83b4:	ldr	x0, [sp, #136]
    83b8:	bl	dac <htab_create>
    83bc:	str	x0, [sp, #48]
    83c0:	ldr	x0, [sp, #120]
    83c4:	cmp	x0, #0x0
    83c8:	b.eq	8468 <gomp_workshare_task_reduction_register+0x29c>  // b.none
    83cc:	ldr	x19, [sp, #48]
    83d0:	ldr	x0, [sp, #120]
    83d4:	bl	c40 <htab_elements>
    83d8:	str	x0, [x19, #8]
    83dc:	ldr	x0, [sp, #120]
    83e0:	add	x1, x0, #0x20
    83e4:	ldr	x0, [sp, #120]
    83e8:	ldr	x0, [x0]
    83ec:	lsl	x0, x0, #3
    83f0:	add	x0, x1, x0
    83f4:	str	x0, [sp, #96]
    83f8:	ldr	x0, [sp, #120]
    83fc:	add	x0, x0, #0x20
    8400:	str	x0, [sp, #88]
    8404:	ldr	x0, [sp, #88]
    8408:	ldr	x0, [x0]
    840c:	str	x0, [sp, #80]
    8410:	ldr	x0, [sp, #80]
    8414:	cmp	x0, #0x0
    8418:	b.eq	844c <gomp_workshare_task_reduction_register+0x280>  // b.none
    841c:	ldr	x0, [sp, #80]
    8420:	cmp	x0, #0x1
    8424:	b.eq	844c <gomp_workshare_task_reduction_register+0x280>  // b.none
    8428:	ldr	x19, [sp, #48]
    842c:	ldr	x0, [sp, #80]
    8430:	bl	14cc <htab_hash>
    8434:	mov	w1, w0
    8438:	mov	x0, x19
    843c:	bl	e4c <find_empty_slot_for_expand>
    8440:	mov	x1, x0
    8444:	ldr	x0, [sp, #80]
    8448:	str	x0, [x1]
    844c:	ldr	x0, [sp, #88]
    8450:	add	x0, x0, #0x8
    8454:	str	x0, [sp, #88]
    8458:	ldr	x1, [sp, #96]
    845c:	ldr	x0, [sp, #88]
    8460:	cmp	x1, x0
    8464:	b.hi	8404 <gomp_workshare_task_reduction_register+0x238>  // b.pmore
    8468:	ldr	x0, [sp, #168]
    846c:	str	x0, [sp, #128]
    8470:	str	xzr, [sp, #72]
    8474:	b	84dc <gomp_workshare_task_reduction_register+0x310>
    8478:	ldr	x1, [sp, #72]
    847c:	mov	x0, x1
    8480:	lsl	x0, x0, #1
    8484:	add	x0, x0, x1
    8488:	lsl	x0, x0, #3
    848c:	add	x0, x0, #0x38
    8490:	ldr	x1, [sp, #128]
    8494:	add	x0, x1, x0
    8498:	str	x0, [sp, #64]
    849c:	ldr	x0, [sp, #64]
    84a0:	add	x0, x0, #0x10
    84a4:	ldr	x1, [sp, #128]
    84a8:	str	x1, [x0]
    84ac:	ldr	x0, [sp, #64]
    84b0:	str	x0, [sp, #56]
    84b4:	add	x0, sp, #0x30
    84b8:	mov	w2, #0x1                   	// #1
    84bc:	ldr	x1, [sp, #56]
    84c0:	bl	1194 <htab_find_slot>
    84c4:	mov	x1, x0
    84c8:	ldr	x0, [sp, #56]
    84cc:	str	x0, [x1]
    84d0:	ldr	x0, [sp, #72]
    84d4:	add	x0, x0, #0x1
    84d8:	str	x0, [sp, #72]
    84dc:	ldr	x0, [sp, #128]
    84e0:	ldr	x0, [x0]
    84e4:	ldr	x1, [sp, #72]
    84e8:	cmp	x1, x0
    84ec:	b.cc	8478 <gomp_workshare_task_reduction_register+0x2ac>  // b.lo, b.ul, b.last
    84f0:	ldr	x0, [sp, #128]
    84f4:	add	x0, x0, #0x20
    84f8:	ldr	x1, [x0]
    84fc:	ldr	x0, [sp, #160]
    8500:	cmp	x1, x0
    8504:	b.eq	851c <gomp_workshare_task_reduction_register+0x350>  // b.none
    8508:	ldr	x0, [sp, #128]
    850c:	add	x0, x0, #0x20
    8510:	ldr	x0, [x0]
    8514:	str	x0, [sp, #128]
    8518:	b	8470 <gomp_workshare_task_reduction_register+0x2a4>
    851c:	nop
    8520:	ldr	x1, [sp, #48]
    8524:	ldr	x0, [sp, #128]
    8528:	add	x0, x0, #0x28
    852c:	str	x1, [x0]
    8530:	nop
    8534:	ldr	x0, [sp, #184]
    8538:	ldr	x0, [x0, #40]
    853c:	ldr	x1, [sp, #40]
    8540:	str	x1, [x0, #40]
    8544:	nop
    8548:	ldr	x19, [sp, #16]
    854c:	ldp	x29, x30, [sp], #208
    8550:	ret

0000000000008554 <gomp_workshare_taskgroup_start>:
    8554:	stp	x29, x30, [sp, #-48]!
    8558:	mov	x29, sp
    855c:	bl	a08 <gomp_thread>
    8560:	str	x0, [sp, #40]
    8564:	ldr	x0, [sp, #40]
    8568:	ldr	x0, [x0, #16]
    856c:	str	x0, [sp, #32]
    8570:	ldr	x0, [sp, #32]
    8574:	cmp	x0, #0x0
    8578:	b.ne	858c <gomp_workshare_taskgroup_start+0x38>  // b.any
    857c:	bl	7520 <gomp_create_artificial_team>
    8580:	ldr	x0, [sp, #40]
    8584:	ldr	x0, [x0, #16]
    8588:	str	x0, [sp, #32]
    858c:	ldr	x0, [sp, #40]
    8590:	ldr	x0, [x0, #80]
    8594:	str	x0, [sp, #24]
    8598:	ldr	x0, [sp, #24]
    859c:	ldr	x0, [x0, #40]
    85a0:	bl	7014 <gomp_taskgroup_init>
    85a4:	mov	x1, x0
    85a8:	ldr	x0, [sp, #24]
    85ac:	str	x1, [x0, #40]
    85b0:	ldr	x0, [sp, #24]
    85b4:	ldr	x0, [x0, #40]
    85b8:	mov	w1, #0x1                   	// #1
    85bc:	strb	w1, [x0, #50]
    85c0:	nop
    85c4:	ldp	x29, x30, [sp], #48
    85c8:	ret

00000000000085cc <GOMP_workshare_task_reduction_unregister>:
    85cc:	stp	x29, x30, [sp, #-64]!
    85d0:	mov	x29, sp
    85d4:	strb	w0, [sp, #31]
    85d8:	bl	a08 <gomp_thread>
    85dc:	str	x0, [sp, #56]
    85e0:	ldr	x0, [sp, #56]
    85e4:	ldr	x0, [x0, #80]
    85e8:	str	x0, [sp, #48]
    85ec:	ldr	x0, [sp, #56]
    85f0:	ldr	x0, [x0, #16]
    85f4:	str	x0, [sp, #40]
    85f8:	ldr	x0, [sp, #48]
    85fc:	ldr	x0, [x0, #40]
    8600:	ldr	x0, [x0, #40]
    8604:	str	x0, [sp, #32]
    8608:	bl	7100 <GOMP_taskgroup_end>
    860c:	ldr	x0, [sp, #56]
    8610:	ldr	w0, [x0, #40]
    8614:	cmp	w0, #0x0
    8618:	b.ne	8628 <GOMP_workshare_task_reduction_unregister+0x5c>  // b.any
    861c:	ldr	x0, [sp, #32]
    8620:	bl	7a08 <GOMP_taskgroup_reduction_unregister>
    8624:	b	8638 <GOMP_workshare_task_reduction_unregister+0x6c>
    8628:	ldr	x0, [sp, #32]
    862c:	add	x0, x0, #0x28
    8630:	ldr	x0, [x0]
    8634:	bl	b48 <htab_free>
    8638:	ldrb	w0, [sp, #31]
    863c:	eor	w0, w0, #0x1
    8640:	and	w0, w0, #0xff
    8644:	cmp	w0, #0x0
    8648:	b.eq	8658 <GOMP_workshare_task_reduction_unregister+0x8c>  // b.none
    864c:	ldr	x0, [sp, #40]
    8650:	add	x0, x0, #0x80
    8654:	bl	0 <gomp_team_barrier_wait>
    8658:	nop
    865c:	ldp	x29, x30, [sp], #64
    8660:	ret

0000000000008664 <gomp_ialias_omp_in_final>:
    8664:	stp	x29, x30, [sp, #-32]!
    8668:	mov	x29, sp
    866c:	bl	a08 <gomp_thread>
    8670:	str	x0, [sp, #24]
    8674:	ldr	x0, [sp, #24]
    8678:	ldr	x0, [x0, #80]
    867c:	cmp	x0, #0x0
    8680:	b.eq	86a0 <gomp_ialias_omp_in_final+0x3c>  // b.none
    8684:	ldr	x0, [sp, #24]
    8688:	ldr	x0, [x0, #80]
    868c:	ldrb	w0, [x0, #205]
    8690:	cmp	w0, #0x0
    8694:	b.eq	86a0 <gomp_ialias_omp_in_final+0x3c>  // b.none
    8698:	mov	w0, #0x1                   	// #1
    869c:	b	86a4 <gomp_ialias_omp_in_final+0x40>
    86a0:	mov	w0, #0x0                   	// #0
    86a4:	ldp	x29, x30, [sp], #32
    86a8:	ret

team.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <priority_queue_init>:
       0:	sub	sp, sp, #0x10
       4:	str	x0, [sp, #8]
       8:	ldr	x0, [sp, #8]
       c:	str	xzr, [x0]
      10:	ldr	x0, [sp, #8]
      14:	str	xzr, [x0, #16]
      18:	ldr	x0, [sp, #8]
      1c:	str	xzr, [x0, #24]
      20:	nop
      24:	add	sp, sp, #0x10
      28:	ret

000000000000002c <priority_queue_free>:
      2c:	sub	sp, sp, #0x10
      30:	str	x0, [sp, #8]
      34:	nop
      38:	add	sp, sp, #0x10
      3c:	ret

0000000000000040 <gomp_sem_init>:
      40:	sub	sp, sp, #0x10
      44:	str	x0, [sp, #8]
      48:	str	w1, [sp, #4]
      4c:	ldr	x0, [sp, #8]
      50:	ldr	w1, [sp, #4]
      54:	str	w1, [x0]
      58:	nop
      5c:	add	sp, sp, #0x10
      60:	ret

0000000000000064 <gomp_sem_destroy>:
      64:	sub	sp, sp, #0x10
      68:	str	x0, [sp, #8]
      6c:	nop
      70:	add	sp, sp, #0x10
      74:	ret

0000000000000078 <gomp_mutex_init>:
      78:	sub	sp, sp, #0x10
      7c:	str	x0, [sp, #8]
      80:	ldr	x0, [sp, #8]
      84:	str	wzr, [x0]
      88:	nop
      8c:	add	sp, sp, #0x10
      90:	ret

0000000000000094 <gomp_mutex_destroy>:
      94:	sub	sp, sp, #0x10
      98:	str	x0, [sp, #8]
      9c:	nop
      a0:	add	sp, sp, #0x10
      a4:	ret

00000000000000a8 <gomp_barrier_init>:
      a8:	sub	sp, sp, #0x10
      ac:	str	x0, [sp, #8]
      b0:	str	w1, [sp, #4]
      b4:	ldr	x0, [sp, #8]
      b8:	ldr	w1, [sp, #4]
      bc:	str	w1, [x0]
      c0:	ldr	x0, [sp, #8]
      c4:	ldr	w1, [sp, #4]
      c8:	str	w1, [x0, #64]
      cc:	ldr	x0, [sp, #8]
      d0:	ldr	w1, [sp, #4]
      d4:	str	w1, [x0, #68]
      d8:	ldr	x0, [sp, #8]
      dc:	str	wzr, [x0, #4]
      e0:	nop
      e4:	add	sp, sp, #0x10
      e8:	ret

00000000000000ec <gomp_barrier_reinit>:
      ec:	sub	sp, sp, #0x10
      f0:	str	x0, [sp, #8]
      f4:	str	w1, [sp, #4]
      f8:	ldr	x0, [sp, #8]
      fc:	add	x0, x0, #0x40
     100:	ldr	x1, [sp, #8]
     104:	ldr	w1, [x1]
     108:	ldr	w2, [sp, #4]
     10c:	sub	w1, w2, w1
     110:	ldaxr	w2, [x0]
     114:	add	w2, w2, w1
     118:	stlxr	w3, w2, [x0]
     11c:	cbnz	w3, 110 <gomp_barrier_reinit+0x24>
     120:	ldr	x0, [sp, #8]
     124:	ldr	w1, [sp, #4]
     128:	str	w1, [x0]
     12c:	nop
     130:	add	sp, sp, #0x10
     134:	ret

0000000000000138 <gomp_barrier_destroy>:
     138:	sub	sp, sp, #0x10
     13c:	str	x0, [sp, #8]
     140:	nop
     144:	add	sp, sp, #0x10
     148:	ret

000000000000014c <gomp_simple_barrier_init>:
     14c:	stp	x29, x30, [sp, #-32]!
     150:	mov	x29, sp
     154:	str	x0, [sp, #24]
     158:	str	w1, [sp, #20]
     15c:	ldr	x0, [sp, #24]
     160:	ldr	w1, [sp, #20]
     164:	bl	a8 <gomp_barrier_init>
     168:	nop
     16c:	ldp	x29, x30, [sp], #32
     170:	ret

0000000000000174 <gomp_simple_barrier_reinit>:
     174:	stp	x29, x30, [sp, #-32]!
     178:	mov	x29, sp
     17c:	str	x0, [sp, #24]
     180:	str	w1, [sp, #20]
     184:	ldr	x0, [sp, #24]
     188:	ldr	w1, [sp, #20]
     18c:	bl	ec <gomp_barrier_reinit>
     190:	nop
     194:	ldp	x29, x30, [sp], #32
     198:	ret

000000000000019c <gomp_simple_barrier_destroy>:
     19c:	stp	x29, x30, [sp, #-32]!
     1a0:	mov	x29, sp
     1a4:	str	x0, [sp, #24]
     1a8:	ldr	x0, [sp, #24]
     1ac:	bl	138 <gomp_barrier_destroy>
     1b0:	nop
     1b4:	ldp	x29, x30, [sp], #32
     1b8:	ret

00000000000001bc <gomp_simple_barrier_wait>:
     1bc:	stp	x29, x30, [sp, #-32]!
     1c0:	mov	x29, sp
     1c4:	str	x0, [sp, #24]
     1c8:	ldr	x0, [sp, #24]
     1cc:	bl	0 <gomp_barrier_wait>
     1d0:	nop
     1d4:	ldp	x29, x30, [sp], #32
     1d8:	ret

00000000000001dc <gomp_simple_barrier_wait_last>:
     1dc:	stp	x29, x30, [sp, #-32]!
     1e0:	mov	x29, sp
     1e4:	str	x0, [sp, #24]
     1e8:	ldr	x0, [sp, #24]
     1ec:	bl	0 <gomp_barrier_wait_last>
     1f0:	nop
     1f4:	ldp	x29, x30, [sp], #32
     1f8:	ret

00000000000001fc <gomp_ptrlock_get>:
     1fc:	stp	x29, x30, [sp, #-48]!
     200:	mov	x29, sp
     204:	str	x0, [sp, #24]
     208:	ldr	x0, [sp, #24]
     20c:	ldar	x0, [x0]
     210:	str	x0, [sp, #40]
     214:	ldr	x0, [sp, #40]
     218:	cmp	x0, #0x2
     21c:	b.ls	228 <gomp_ptrlock_get+0x2c>  // b.plast
     220:	ldr	x0, [sp, #40]
     224:	b	27c <gomp_ptrlock_get+0x80>
     228:	str	xzr, [sp, #32]
     22c:	ldr	x1, [sp, #24]
     230:	add	x0, sp, #0x20
     234:	ldr	x3, [x0]
     238:	mov	x4, #0x1                   	// #1
     23c:	ldaxr	x2, [x1]
     240:	cmp	x2, x3
     244:	b.ne	250 <gomp_ptrlock_get+0x54>  // b.any
     248:	stxr	w5, x4, [x1]
     24c:	cbnz	w5, 23c <gomp_ptrlock_get+0x40>
     250:	cset	w1, eq  // eq = none
     254:	cmp	w1, #0x0
     258:	b.ne	260 <gomp_ptrlock_get+0x64>  // b.any
     25c:	str	x2, [x0]
     260:	mov	w0, w1
     264:	cmp	w0, #0x0
     268:	b.eq	274 <gomp_ptrlock_get+0x78>  // b.none
     26c:	mov	x0, #0x0                   	// #0
     270:	b	27c <gomp_ptrlock_get+0x80>
     274:	ldr	x0, [sp, #24]
     278:	bl	0 <gomp_ptrlock_get_slow>
     27c:	ldp	x29, x30, [sp], #48
     280:	ret

0000000000000284 <gomp_ptrlock_set>:
     284:	stp	x29, x30, [sp, #-48]!
     288:	mov	x29, sp
     28c:	str	x0, [sp, #24]
     290:	str	x1, [sp, #16]
     294:	ldr	x2, [sp, #16]
     298:	ldr	x1, [sp, #24]
     29c:	ldxr	x0, [x1]
     2a0:	stlxr	w3, x2, [x1]
     2a4:	cbnz	w3, 29c <gomp_ptrlock_set+0x18>
     2a8:	str	x0, [sp, #40]
     2ac:	ldr	x0, [sp, #40]
     2b0:	cmp	x0, #0x1
     2b4:	b.eq	2c0 <gomp_ptrlock_set+0x3c>  // b.none
     2b8:	ldr	x0, [sp, #24]
     2bc:	bl	0 <gomp_ptrlock_set_slow>
     2c0:	nop
     2c4:	ldp	x29, x30, [sp], #48
     2c8:	ret

00000000000002cc <gomp_thread>:
     2cc:	mrs	x0, tpidr_el0
     2d0:	add	x0, x0, #0x0, lsl #12
     2d4:	add	x0, x0, #0x0
     2d8:	ret

00000000000002dc <gomp_finish_task>:
     2dc:	stp	x29, x30, [sp, #-32]!
     2e0:	mov	x29, sp
     2e4:	str	x0, [sp, #24]
     2e8:	ldr	x0, [sp, #24]
     2ec:	ldr	x0, [x0, #56]
     2f0:	cmp	x0, #0x0
     2f4:	cset	w0, ne  // ne = any
     2f8:	and	w0, w0, #0xff
     2fc:	and	x0, x0, #0xff
     300:	cmp	x0, #0x0
     304:	b.eq	314 <gomp_finish_task+0x38>  // b.none
     308:	ldr	x0, [sp, #24]
     30c:	ldr	x0, [x0, #56]
     310:	bl	0 <free>
     314:	nop
     318:	ldp	x29, x30, [sp], #32
     31c:	ret

0000000000000320 <gomp_thread_self>:
     320:	stp	x29, x30, [sp, #-16]!
     324:	mov	x29, sp
     328:	bl	0 <pthread_self>
     32c:	ldp	x29, x30, [sp], #16
     330:	ret

0000000000000334 <gomp_thread_to_pthread_t>:
     334:	stp	x29, x30, [sp, #-48]!
     338:	mov	x29, sp
     33c:	str	x0, [sp, #24]
     340:	bl	2cc <gomp_thread>
     344:	str	x0, [sp, #40]
     348:	ldr	x1, [sp, #24]
     34c:	ldr	x0, [sp, #40]
     350:	cmp	x1, x0
     354:	b.ne	360 <gomp_thread_to_pthread_t+0x2c>  // b.any
     358:	bl	0 <pthread_self>
     35c:	b	378 <gomp_thread_to_pthread_t+0x44>
     360:	bl	0 <pthread_self>
     364:	mov	x2, x0
     368:	ldr	x1, [sp, #24]
     36c:	ldr	x0, [sp, #40]
     370:	sub	x0, x1, x0
     374:	add	x0, x2, x0
     378:	ldp	x29, x30, [sp], #48
     37c:	ret

0000000000000380 <gomp_get_thread_pool>:
     380:	stp	x29, x30, [sp, #-48]!
     384:	mov	x29, sp
     388:	str	x0, [sp, #24]
     38c:	str	w1, [sp, #20]
     390:	ldr	x0, [sp, #24]
     394:	ldr	x0, [x0, #96]
     398:	str	x0, [sp, #40]
     39c:	ldr	x0, [sp, #40]
     3a0:	cmp	x0, #0x0
     3a4:	cset	w0, eq  // eq = none
     3a8:	and	w0, w0, #0xff
     3ac:	and	x0, x0, #0xff
     3b0:	cmp	x0, #0x0
     3b4:	b.eq	410 <gomp_get_thread_pool+0x90>  // b.none
     3b8:	mov	x0, #0xc0                  	// #192
     3bc:	bl	0 <gomp_malloc>
     3c0:	str	x0, [sp, #40]
     3c4:	ldr	x0, [sp, #40]
     3c8:	str	xzr, [x0]
     3cc:	ldr	x0, [sp, #40]
     3d0:	str	wzr, [x0, #8]
     3d4:	ldr	x0, [sp, #40]
     3d8:	str	wzr, [x0, #12]
     3dc:	ldr	x0, [sp, #40]
     3e0:	str	xzr, [x0, #16]
     3e4:	ldr	w1, [sp, #20]
     3e8:	ldr	x0, [sp, #40]
     3ec:	str	x1, [x0, #24]
     3f0:	ldr	x0, [sp, #24]
     3f4:	ldr	x1, [sp, #40]
     3f8:	str	x1, [x0, #96]
     3fc:	adrp	x0, 4 <priority_queue_init+0x4>
     400:	add	x0, x0, #0x0
     404:	ldr	w0, [x0]
     408:	ldr	x1, [sp, #24]
     40c:	bl	0 <pthread_setspecific>
     410:	ldr	x0, [sp, #40]
     414:	ldp	x29, x30, [sp], #48
     418:	ret

000000000000041c <gomp_release_thread_pool>:
     41c:	sub	sp, sp, #0x10
     420:	str	x0, [sp, #8]
     424:	nop
     428:	add	sp, sp, #0x10
     42c:	ret

0000000000000430 <gomp_adjust_thread_attr>:
     430:	sub	sp, sp, #0x10
     434:	str	x0, [sp, #8]
     438:	str	x1, [sp]
     43c:	ldr	x0, [sp, #8]
     440:	add	sp, sp, #0x10
     444:	ret

0000000000000448 <gomp_thread_start>:
     448:	stp	x29, x30, [sp, #-112]!
     44c:	mov	x29, sp
     450:	str	x0, [sp, #24]
     454:	ldr	x0, [sp, #24]
     458:	str	x0, [sp, #88]
     45c:	mrs	x0, tpidr_el0
     460:	add	x0, x0, #0x0, lsl #12
     464:	add	x0, x0, #0x0
     468:	str	x0, [sp, #80]
     46c:	ldr	x0, [sp, #80]
     470:	add	x0, x0, #0x58
     474:	mov	w1, #0x0                   	// #0
     478:	bl	40 <gomp_sem_init>
     47c:	ldr	x0, [sp, #88]
     480:	ldr	x0, [x0]
     484:	str	x0, [sp, #104]
     488:	ldr	x0, [sp, #88]
     48c:	ldr	x0, [x0, #8]
     490:	str	x0, [sp, #96]
     494:	ldr	x0, [sp, #88]
     498:	ldr	x1, [x0, #88]
     49c:	ldr	x0, [sp, #80]
     4a0:	str	x1, [x0, #96]
     4a4:	ldr	x0, [sp, #80]
     4a8:	add	x2, x0, #0x10
     4ac:	ldr	x0, [sp, #88]
     4b0:	add	x1, x0, #0x10
     4b4:	mov	x0, x2
     4b8:	ldp	x2, x3, [x1]
     4bc:	stp	x2, x3, [x0]
     4c0:	ldp	x2, x3, [x1, #16]
     4c4:	stp	x2, x3, [x0, #16]
     4c8:	ldp	x2, x3, [x1, #32]
     4cc:	stp	x2, x3, [x0, #32]
     4d0:	ldp	x2, x3, [x1, #48]
     4d4:	stp	x2, x3, [x0, #48]
     4d8:	ldr	x0, [sp, #88]
     4dc:	ldr	x1, [x0, #80]
     4e0:	ldr	x0, [sp, #80]
     4e4:	str	x1, [x0, #80]
     4e8:	ldr	x0, [sp, #88]
     4ec:	ldr	w1, [x0, #96]
     4f0:	ldr	x0, [sp, #80]
     4f4:	str	w1, [x0, #92]
     4f8:	ldr	x0, [sp, #80]
     4fc:	ldr	x0, [x0, #16]
     500:	ldr	x1, [x0, #80]
     504:	ldr	x0, [sp, #80]
     508:	ldr	w0, [x0, #40]
     50c:	mov	w0, w0
     510:	lsl	x0, x0, #3
     514:	add	x0, x1, x0
     518:	ldr	x1, [sp, #80]
     51c:	add	x1, x1, #0x58
     520:	str	x1, [x0]
     524:	ldr	x0, [sp, #80]
     528:	ldr	x0, [x0, #96]
     52c:	str	x0, [sp, #72]
     530:	ldr	x0, [sp, #88]
     534:	ldrb	w0, [x0, #100]
     538:	cmp	w0, #0x0
     53c:	b.eq	594 <gomp_thread_start+0x14c>  // b.none
     540:	ldr	x0, [sp, #80]
     544:	ldr	x0, [x0, #16]
     548:	str	x0, [sp, #48]
     54c:	ldr	x0, [sp, #80]
     550:	ldr	x0, [x0, #80]
     554:	str	x0, [sp, #40]
     558:	ldr	x0, [sp, #48]
     55c:	add	x0, x0, #0x80
     560:	bl	0 <gomp_barrier_wait>
     564:	ldr	x1, [sp, #104]
     568:	ldr	x0, [sp, #96]
     56c:	blr	x1
     570:	ldr	x0, [sp, #48]
     574:	add	x0, x0, #0x80
     578:	bl	0 <gomp_team_barrier_wait_final>
     57c:	ldr	x0, [sp, #40]
     580:	bl	2dc <gomp_finish_task>
     584:	ldr	x0, [sp, #48]
     588:	add	x0, x0, #0x80
     58c:	bl	0 <gomp_barrier_wait_last>
     590:	b	634 <gomp_thread_start+0x1ec>
     594:	ldr	x0, [sp, #72]
     598:	ldr	x1, [x0]
     59c:	ldr	x0, [sp, #80]
     5a0:	ldr	w0, [x0, #40]
     5a4:	mov	w0, w0
     5a8:	lsl	x0, x0, #3
     5ac:	add	x0, x1, x0
     5b0:	ldr	x1, [sp, #80]
     5b4:	str	x1, [x0]
     5b8:	ldr	x0, [sp, #72]
     5bc:	add	x0, x0, #0x40
     5c0:	bl	1bc <gomp_simple_barrier_wait>
     5c4:	ldr	x0, [sp, #80]
     5c8:	ldr	x0, [x0, #16]
     5cc:	str	x0, [sp, #64]
     5d0:	ldr	x0, [sp, #80]
     5d4:	ldr	x0, [x0, #80]
     5d8:	str	x0, [sp, #56]
     5dc:	ldr	x1, [sp, #104]
     5e0:	ldr	x0, [sp, #96]
     5e4:	blr	x1
     5e8:	ldr	x0, [sp, #64]
     5ec:	add	x0, x0, #0x80
     5f0:	bl	0 <gomp_team_barrier_wait_final>
     5f4:	ldr	x0, [sp, #56]
     5f8:	bl	2dc <gomp_finish_task>
     5fc:	ldr	x0, [sp, #72]
     600:	add	x0, x0, #0x40
     604:	bl	1bc <gomp_simple_barrier_wait>
     608:	ldr	x0, [sp, #80]
     60c:	ldr	x0, [x0]
     610:	str	x0, [sp, #104]
     614:	ldr	x0, [sp, #80]
     618:	ldr	x0, [x0, #8]
     61c:	str	x0, [sp, #96]
     620:	ldr	x0, [sp, #80]
     624:	str	xzr, [x0]
     628:	ldr	x0, [sp, #104]
     62c:	cmp	x0, #0x0
     630:	b.ne	5c4 <gomp_thread_start+0x17c>  // b.any
     634:	ldr	x0, [sp, #80]
     638:	add	x0, x0, #0x58
     63c:	bl	64 <gomp_sem_destroy>
     640:	bl	0 <pthread_self>
     644:	bl	0 <pthread_detach>
     648:	ldr	x0, [sp, #80]
     64c:	str	xzr, [x0, #96]
     650:	ldr	x0, [sp, #80]
     654:	str	xzr, [x0, #80]
     658:	mov	x0, #0x0                   	// #0
     65c:	ldp	x29, x30, [sp], #112
     660:	ret

0000000000000664 <get_last_team>:
     664:	stp	x29, x30, [sp, #-64]!
     668:	mov	x29, sp
     66c:	str	w0, [sp, #28]
     670:	bl	2cc <gomp_thread>
     674:	str	x0, [sp, #56]
     678:	ldr	x0, [sp, #56]
     67c:	ldr	x0, [x0, #16]
     680:	cmp	x0, #0x0
     684:	b.ne	6d4 <get_last_team+0x70>  // b.any
     688:	ldr	w1, [sp, #28]
     68c:	ldr	x0, [sp, #56]
     690:	bl	380 <gomp_get_thread_pool>
     694:	str	x0, [sp, #48]
     698:	ldr	x0, [sp, #48]
     69c:	ldr	x0, [x0, #16]
     6a0:	str	x0, [sp, #40]
     6a4:	ldr	x0, [sp, #40]
     6a8:	cmp	x0, #0x0
     6ac:	b.eq	6d4 <get_last_team+0x70>  // b.none
     6b0:	ldr	x0, [sp, #40]
     6b4:	ldr	w0, [x0]
     6b8:	ldr	w1, [sp, #28]
     6bc:	cmp	w1, w0
     6c0:	b.ne	6d4 <get_last_team+0x70>  // b.any
     6c4:	ldr	x0, [sp, #48]
     6c8:	str	xzr, [x0, #16]
     6cc:	ldr	x0, [sp, #40]
     6d0:	b	6d8 <get_last_team+0x74>
     6d4:	mov	x0, #0x0                   	// #0
     6d8:	ldp	x29, x30, [sp], #64
     6dc:	ret

00000000000006e0 <gomp_new_team>:
     6e0:	stp	x29, x30, [sp, #-64]!
     6e4:	mov	x29, sp
     6e8:	str	w0, [sp, #28]
     6ec:	ldr	w0, [sp, #28]
     6f0:	bl	664 <get_last_team>
     6f4:	str	x0, [sp, #56]
     6f8:	ldr	x0, [sp, #56]
     6fc:	cmp	x0, #0x0
     700:	b.ne	74c <gomp_new_team+0x6c>  // b.any
     704:	mov	x0, #0xd8                  	// #216
     708:	str	x0, [sp, #40]
     70c:	ldr	w1, [sp, #28]
     710:	ldr	x0, [sp, #40]
     714:	mul	x0, x1, x0
     718:	add	x0, x0, #0x540
     71c:	bl	0 <gomp_malloc>
     720:	str	x0, [sp, #56]
     724:	ldr	x0, [sp, #56]
     728:	add	x0, x0, #0x80
     72c:	ldr	w1, [sp, #28]
     730:	bl	a8 <gomp_barrier_init>
     734:	ldr	x0, [sp, #56]
     738:	add	x0, x0, #0x500
     73c:	bl	78 <gomp_mutex_init>
     740:	ldr	x0, [sp, #56]
     744:	ldr	w1, [sp, #28]
     748:	str	w1, [x0]
     74c:	ldr	x0, [sp, #56]
     750:	mov	w1, #0x8                   	// #8
     754:	str	w1, [x0, #4]
     758:	ldr	x0, [sp, #56]
     75c:	str	xzr, [x0, #112]
     760:	ldr	x0, [sp, #56]
     764:	add	x1, x0, #0x100
     768:	ldr	x0, [sp, #56]
     76c:	str	x1, [x0, #88]
     770:	ldr	x0, [sp, #56]
     774:	add	x0, x0, #0x100
     778:	ldr	w2, [sp, #28]
     77c:	mov	x1, #0x0                   	// #0
     780:	bl	0 <gomp_init_work_share>
     784:	ldr	x0, [sp, #56]
     788:	str	xzr, [x0, #312]
     78c:	ldr	x0, [sp, #56]
     790:	str	xzr, [x0, #104]
     794:	ldr	x0, [sp, #56]
     798:	add	x1, x0, #0x180
     79c:	ldr	x0, [sp, #56]
     7a0:	str	x1, [x0, #96]
     7a4:	mov	w0, #0x1                   	// #1
     7a8:	str	w0, [sp, #52]
     7ac:	b	7ec <gomp_new_team+0x10c>
     7b0:	ldr	w0, [sp, #52]
     7b4:	add	w0, w0, #0x1
     7b8:	sxtw	x0, w0
     7bc:	add	x0, x0, #0x2
     7c0:	lsl	x0, x0, #7
     7c4:	ldr	x1, [sp, #56]
     7c8:	add	x1, x1, x0
     7cc:	ldr	x2, [sp, #56]
     7d0:	ldrsw	x0, [sp, #52]
     7d4:	lsl	x0, x0, #7
     7d8:	add	x0, x2, x0
     7dc:	str	x1, [x0, #336]
     7e0:	ldr	w0, [sp, #52]
     7e4:	add	w0, w0, #0x1
     7e8:	str	w0, [sp, #52]
     7ec:	ldr	w0, [sp, #52]
     7f0:	cmp	w0, #0x6
     7f4:	b.le	7b0 <gomp_new_team+0xd0>
     7f8:	ldr	x1, [sp, #56]
     7fc:	ldrsw	x0, [sp, #52]
     800:	lsl	x0, x0, #7
     804:	add	x0, x1, x0
     808:	str	xzr, [x0, #336]
     80c:	ldr	x0, [sp, #56]
     810:	add	x0, x0, #0x48
     814:	mov	w1, #0x0                   	// #0
     818:	bl	40 <gomp_sem_init>
     81c:	ldr	w1, [sp, #28]
     820:	mov	x0, x1
     824:	lsl	x0, x0, #1
     828:	add	x0, x0, x1
     82c:	lsl	x0, x0, #2
     830:	add	x0, x0, x1
     834:	lsl	x0, x0, #4
     838:	add	x0, x0, #0x540
     83c:	ldr	x1, [sp, #56]
     840:	add	x1, x1, x0
     844:	ldr	x0, [sp, #56]
     848:	str	x1, [x0, #80]
     84c:	ldr	x0, [sp, #56]
     850:	ldr	x0, [x0, #80]
     854:	ldr	x1, [sp, #56]
     858:	add	x1, x1, #0x48
     85c:	str	x1, [x0]
     860:	ldr	x0, [sp, #56]
     864:	add	x0, x0, #0x508
     868:	bl	0 <priority_queue_init>
     86c:	ldr	x0, [sp, #56]
     870:	str	wzr, [x0, #1320]
     874:	ldr	x0, [sp, #56]
     878:	str	wzr, [x0, #1324]
     87c:	ldr	x0, [sp, #56]
     880:	str	wzr, [x0, #1328]
     884:	ldr	x0, [sp, #56]
     888:	str	wzr, [x0, #1332]
     88c:	ldr	x0, [sp, #56]
     890:	str	wzr, [x0, #1336]
     894:	ldr	x0, [sp, #56]
     898:	ldp	x29, x30, [sp], #64
     89c:	ret

00000000000008a0 <free_team>:
     8a0:	stp	x29, x30, [sp, #-32]!
     8a4:	mov	x29, sp
     8a8:	str	x0, [sp, #24]
     8ac:	ldr	x0, [sp, #24]
     8b0:	add	x0, x0, #0x80
     8b4:	bl	138 <gomp_barrier_destroy>
     8b8:	ldr	x0, [sp, #24]
     8bc:	add	x0, x0, #0x500
     8c0:	bl	94 <gomp_mutex_destroy>
     8c4:	ldr	x0, [sp, #24]
     8c8:	add	x0, x0, #0x508
     8cc:	bl	2c <priority_queue_free>
     8d0:	ldr	x0, [sp, #24]
     8d4:	bl	0 <free>
     8d8:	nop
     8dc:	ldp	x29, x30, [sp], #32
     8e0:	ret

00000000000008e4 <gomp_free_pool_helper>:
     8e4:	stp	x29, x30, [sp, #-48]!
     8e8:	mov	x29, sp
     8ec:	str	x0, [sp, #24]
     8f0:	bl	2cc <gomp_thread>
     8f4:	str	x0, [sp, #40]
     8f8:	ldr	x0, [sp, #24]
     8fc:	str	x0, [sp, #32]
     900:	ldr	x0, [sp, #32]
     904:	add	x0, x0, #0x40
     908:	bl	1dc <gomp_simple_barrier_wait_last>
     90c:	ldr	x0, [sp, #40]
     910:	add	x0, x0, #0x58
     914:	bl	64 <gomp_sem_destroy>
     918:	ldr	x0, [sp, #40]
     91c:	str	xzr, [x0, #96]
     920:	ldr	x0, [sp, #40]
     924:	str	xzr, [x0, #80]
     928:	bl	0 <pthread_self>
     92c:	bl	0 <pthread_detach>
     930:	mov	x0, #0x0                   	// #0
     934:	bl	0 <pthread_exit>

0000000000000938 <gomp_free_thread>:
     938:	stp	x29, x30, [sp, #-80]!
     93c:	mov	x29, sp
     940:	str	x0, [sp, #24]
     944:	bl	2cc <gomp_thread>
     948:	str	x0, [sp, #64]
     94c:	ldr	x0, [sp, #64]
     950:	ldr	x0, [x0, #96]
     954:	str	x0, [sp, #56]
     958:	ldr	x0, [sp, #56]
     95c:	cmp	x0, #0x0
     960:	b.eq	a68 <gomp_free_thread+0x130>  // b.none
     964:	ldr	x0, [sp, #56]
     968:	ldr	w0, [x0, #12]
     96c:	cmp	w0, #0x0
     970:	b.eq	a30 <gomp_free_thread+0xf8>  // b.none
     974:	mov	w0, #0x1                   	// #1
     978:	str	w0, [sp, #76]
     97c:	b	9c4 <gomp_free_thread+0x8c>
     980:	ldr	x0, [sp, #56]
     984:	ldr	x1, [x0]
     988:	ldrsw	x0, [sp, #76]
     98c:	lsl	x0, x0, #3
     990:	add	x0, x1, x0
     994:	ldr	x0, [x0]
     998:	str	x0, [sp, #48]
     99c:	ldr	x0, [sp, #48]
     9a0:	adrp	x1, 0 <priority_queue_init>
     9a4:	add	x1, x1, #0x0
     9a8:	str	x1, [x0]
     9ac:	ldr	x0, [sp, #48]
     9b0:	ldr	x1, [sp, #56]
     9b4:	str	x1, [x0, #8]
     9b8:	ldr	w0, [sp, #76]
     9bc:	add	w0, w0, #0x1
     9c0:	str	w0, [sp, #76]
     9c4:	ldr	x0, [sp, #56]
     9c8:	ldr	w1, [x0, #12]
     9cc:	ldr	w0, [sp, #76]
     9d0:	cmp	w1, w0
     9d4:	b.hi	980 <gomp_free_thread+0x48>  // b.pmore
     9d8:	ldr	x0, [sp, #56]
     9dc:	add	x0, x0, #0x40
     9e0:	bl	1bc <gomp_simple_barrier_wait>
     9e4:	ldr	x0, [sp, #56]
     9e8:	add	x0, x0, #0x40
     9ec:	bl	1bc <gomp_simple_barrier_wait>
     9f0:	ldr	x0, [sp, #56]
     9f4:	add	x0, x0, #0x40
     9f8:	bl	19c <gomp_simple_barrier_destroy>
     9fc:	ldr	x0, [sp, #56]
     a00:	ldr	w0, [x0, #12]
     a04:	mov	w0, w0
     a08:	mov	x1, #0x1                   	// #1
     a0c:	sub	x0, x1, x0
     a10:	mov	x1, x0
     a14:	adrp	x0, 0 <gomp_managed_threads>
     a18:	add	x0, x0, #0x0
     a1c:	ldxr	x2, [x0]
     a20:	add	x2, x2, x1
     a24:	stlxr	w3, x2, [x0]
     a28:	cbnz	w3, a1c <gomp_free_thread+0xe4>
     a2c:	dmb	ish
     a30:	ldr	x0, [sp, #56]
     a34:	ldr	x0, [x0, #16]
     a38:	cmp	x0, #0x0
     a3c:	b.eq	a4c <gomp_free_thread+0x114>  // b.none
     a40:	ldr	x0, [sp, #56]
     a44:	ldr	x0, [x0, #16]
     a48:	bl	8a0 <free_team>
     a4c:	ldr	x0, [sp, #56]
     a50:	ldr	x0, [x0]
     a54:	bl	0 <free>
     a58:	ldr	x0, [sp, #56]
     a5c:	bl	0 <free>
     a60:	ldr	x0, [sp, #64]
     a64:	str	xzr, [x0, #96]
     a68:	ldr	x0, [sp, #64]
     a6c:	ldr	w0, [x0, #44]
     a70:	cmp	w0, #0x0
     a74:	b.ne	a9c <gomp_free_thread+0x164>  // b.any
     a78:	ldr	x0, [sp, #64]
     a7c:	ldr	x0, [x0, #16]
     a80:	cmp	x0, #0x0
     a84:	cset	w0, ne  // ne = any
     a88:	and	w0, w0, #0xff
     a8c:	and	x0, x0, #0xff
     a90:	cmp	x0, #0x0
     a94:	b.eq	a9c <gomp_free_thread+0x164>  // b.none
     a98:	bl	2304 <gomp_team_end>
     a9c:	ldr	x0, [sp, #64]
     aa0:	ldr	x0, [x0, #80]
     aa4:	cmp	x0, #0x0
     aa8:	b.eq	ac4 <gomp_free_thread+0x18c>  // b.none
     aac:	ldr	x0, [sp, #64]
     ab0:	ldr	x0, [x0, #80]
     ab4:	str	x0, [sp, #40]
     ab8:	bl	0 <gomp_end_task>
     abc:	ldr	x0, [sp, #40]
     ac0:	bl	0 <free>
     ac4:	nop
     ac8:	ldp	x29, x30, [sp], #80
     acc:	ret

0000000000000ad0 <gomp_team_start>:
     ad0:	stp	x29, x30, [sp, #-320]!
     ad4:	mov	x29, sp
     ad8:	str	x0, [x29, #56]
     adc:	str	x1, [x29, #48]
     ae0:	str	w2, [x29, #44]
     ae4:	str	w3, [x29, #40]
     ae8:	str	x4, [x29, #32]
     aec:	str	x5, [x29, #24]
     af0:	str	wzr, [x29, #292]
     af4:	str	wzr, [x29, #264]
     af8:	str	wzr, [x29, #260]
     afc:	str	wzr, [x29, #256]
     b00:	str	wzr, [x29, #252]
     b04:	str	wzr, [x29, #248]
     b08:	str	xzr, [x29, #240]
     b0c:	strb	wzr, [x29, #239]
     b10:	bl	2cc <gomp_thread>
     b14:	str	x0, [x29, #192]
     b18:	ldr	x0, [x29, #192]
     b1c:	ldr	w0, [x0, #44]
     b20:	cmp	w0, #0x0
     b24:	cset	w0, ne  // ne = any
     b28:	strb	w0, [x29, #191]
     b2c:	ldr	x0, [x29, #192]
     b30:	ldr	x0, [x0, #96]
     b34:	str	x0, [x29, #176]
     b38:	ldr	x0, [x29, #192]
     b3c:	ldr	x0, [x0, #80]
     b40:	str	x0, [x29, #168]
     b44:	ldr	x0, [x29, #168]
     b48:	cmp	x0, #0x0
     b4c:	b.eq	b5c <gomp_team_start+0x8c>  // b.none
     b50:	ldr	x0, [x29, #168]
     b54:	add	x0, x0, #0x90
     b58:	b	b64 <gomp_team_start+0x94>
     b5c:	adrp	x0, 0 <gomp_global_icv>
     b60:	add	x0, x0, #0x0
     b64:	str	x0, [x29, #160]
     b68:	adrp	x0, 0 <gomp_places_list>
     b6c:	add	x0, x0, #0x0
     b70:	ldr	x0, [x0]
     b74:	cmp	x0, #0x0
     b78:	cset	w0, ne  // ne = any
     b7c:	and	w0, w0, #0xff
     b80:	and	x0, x0, #0xff
     b84:	cmp	x0, #0x0
     b88:	b.eq	be8 <gomp_team_start+0x118>  // b.none
     b8c:	ldr	x0, [x29, #192]
     b90:	ldr	w0, [x0, #92]
     b94:	cmp	w0, #0x0
     b98:	b.ne	be8 <gomp_team_start+0x118>  // b.any
     b9c:	bl	0 <gomp_init_affinity>
     ba0:	adrp	x0, 0 <gomp_display_affinity_var>
     ba4:	add	x0, x0, #0x0
     ba8:	ldrb	w0, [x0]
     bac:	and	x0, x0, #0xff
     bb0:	cmp	x0, #0x0
     bb4:	b.eq	be8 <gomp_team_start+0x118>  // b.none
     bb8:	ldr	w0, [x29, #44]
     bbc:	cmp	w0, #0x1
     bc0:	b.ne	be8 <gomp_team_start+0x118>  // b.any
     bc4:	bl	320 <gomp_thread_self>
     bc8:	mov	x3, x0
     bcc:	ldr	x0, [x29, #192]
     bd0:	add	x1, x0, #0x10
     bd4:	ldr	x0, [x29, #192]
     bd8:	ldr	w0, [x0, #92]
     bdc:	mov	w2, w0
     be0:	mov	x0, x3
     be4:	bl	0 <gomp_display_affinity_thread>
     be8:	ldr	x0, [x29, #32]
     bec:	add	x2, x0, #0x8
     bf0:	ldr	x0, [x29, #192]
     bf4:	add	x1, x0, #0x10
     bf8:	mov	x0, x2
     bfc:	ldp	x2, x3, [x1]
     c00:	stp	x2, x3, [x0]
     c04:	ldp	x2, x3, [x1, #16]
     c08:	stp	x2, x3, [x0, #16]
     c0c:	ldp	x2, x3, [x1, #32]
     c10:	stp	x2, x3, [x0, #32]
     c14:	ldp	x2, x3, [x1, #48]
     c18:	stp	x2, x3, [x0, #48]
     c1c:	ldr	x0, [x29, #192]
     c20:	ldr	x1, [x29, #32]
     c24:	str	x1, [x0, #16]
     c28:	ldr	x0, [x29, #192]
     c2c:	str	wzr, [x0, #40]
     c30:	ldr	x0, [x29, #192]
     c34:	ldr	w0, [x0, #44]
     c38:	add	w1, w0, #0x1
     c3c:	ldr	x0, [x29, #192]
     c40:	str	w1, [x0, #44]
     c44:	ldr	w0, [x29, #44]
     c48:	cmp	w0, #0x1
     c4c:	b.ls	c64 <gomp_team_start+0x194>  // b.plast
     c50:	ldr	x0, [x29, #192]
     c54:	ldr	w0, [x0, #48]
     c58:	add	w1, w0, #0x1
     c5c:	ldr	x0, [x29, #192]
     c60:	str	w1, [x0, #48]
     c64:	ldr	x0, [x29, #32]
     c68:	add	x1, x0, #0x100
     c6c:	ldr	x0, [x29, #192]
     c70:	str	x1, [x0, #24]
     c74:	ldr	x0, [x29, #192]
     c78:	str	xzr, [x0, #32]
     c7c:	ldr	x0, [x29, #192]
     c80:	str	xzr, [x0, #64]
     c84:	ldr	x0, [x29, #192]
     c88:	str	xzr, [x0, #72]
     c8c:	ldr	x0, [x29, #32]
     c90:	add	x1, x0, #0x540
     c94:	ldr	x0, [x29, #192]
     c98:	str	x1, [x0, #80]
     c9c:	ldr	x0, [x29, #160]
     ca0:	ldr	x0, [x0]
     ca4:	str	x0, [x29, #272]
     ca8:	adrp	x0, 0 <gomp_nthreads_var_list>
     cac:	add	x0, x0, #0x0
     cb0:	ldr	x0, [x0]
     cb4:	cmp	x0, #0x0
     cb8:	cset	w0, ne  // ne = any
     cbc:	and	w0, w0, #0xff
     cc0:	and	x0, x0, #0xff
     cc4:	cmp	x0, #0x0
     cc8:	b.eq	d14 <gomp_team_start+0x244>  // b.none
     ccc:	ldr	x0, [x29, #192]
     cd0:	ldr	w0, [x0, #44]
     cd4:	mov	w1, w0
     cd8:	adrp	x0, 0 <gomp_nthreads_var_list_len>
     cdc:	add	x0, x0, #0x0
     ce0:	ldr	x0, [x0]
     ce4:	cmp	x1, x0
     ce8:	b.cs	d14 <gomp_team_start+0x244>  // b.hs, b.nlast
     cec:	adrp	x0, 0 <gomp_nthreads_var_list>
     cf0:	add	x0, x0, #0x0
     cf4:	ldr	x1, [x0]
     cf8:	ldr	x0, [x29, #192]
     cfc:	ldr	w0, [x0, #44]
     d00:	mov	w0, w0
     d04:	lsl	x0, x0, #3
     d08:	add	x0, x1, x0
     d0c:	ldr	x0, [x0]
     d10:	str	x0, [x29, #272]
     d14:	ldr	x0, [x29, #160]
     d18:	ldrb	w0, [x0, #26]
     d1c:	strb	w0, [x29, #270]
     d20:	ldrb	w0, [x29, #270]
     d24:	cmp	w0, #0x0
     d28:	b.eq	d4c <gomp_team_start+0x27c>  // b.none
     d2c:	ldr	w0, [x29, #40]
     d30:	and	w0, w0, #0x7
     d34:	cmp	w0, #0x0
     d38:	b.eq	d4c <gomp_team_start+0x27c>  // b.none
     d3c:	ldr	w0, [x29, #40]
     d40:	and	w0, w0, #0xff
     d44:	and	w0, w0, #0x7
     d48:	strb	w0, [x29, #270]
     d4c:	ldrb	w0, [x29, #270]
     d50:	strb	w0, [x29, #271]
     d54:	adrp	x0, 0 <gomp_bind_var_list>
     d58:	add	x0, x0, #0x0
     d5c:	ldr	x0, [x0]
     d60:	cmp	x0, #0x0
     d64:	cset	w0, ne  // ne = any
     d68:	and	w0, w0, #0xff
     d6c:	and	x0, x0, #0xff
     d70:	cmp	x0, #0x0
     d74:	b.eq	dbc <gomp_team_start+0x2ec>  // b.none
     d78:	ldr	x0, [x29, #192]
     d7c:	ldr	w0, [x0, #44]
     d80:	mov	w1, w0
     d84:	adrp	x0, 0 <gomp_bind_var_list_len>
     d88:	add	x0, x0, #0x0
     d8c:	ldr	x0, [x0]
     d90:	cmp	x1, x0
     d94:	b.cs	dbc <gomp_team_start+0x2ec>  // b.hs, b.nlast
     d98:	adrp	x0, 0 <gomp_bind_var_list>
     d9c:	add	x0, x0, #0x0
     da0:	ldr	x1, [x0]
     da4:	ldr	x0, [x29, #192]
     da8:	ldr	w0, [x0, #44]
     dac:	mov	w0, w0
     db0:	add	x0, x1, x0
     db4:	ldrb	w0, [x0]
     db8:	strb	w0, [x29, #270]
     dbc:	ldr	x0, [x29, #192]
     dc0:	ldr	x0, [x0, #80]
     dc4:	ldr	x2, [x29, #160]
     dc8:	ldr	x1, [x29, #168]
     dcc:	bl	0 <gomp_init_task>
     dd0:	ldr	x0, [x29, #192]
     dd4:	ldr	x0, [x0, #80]
     dd8:	ldr	x1, [x29, #24]
     ddc:	str	x1, [x0, #40]
     de0:	ldr	x0, [x29, #32]
     de4:	ldr	x1, [x29, #272]
     de8:	str	x1, [x0, #1488]
     dec:	ldr	x0, [x29, #32]
     df0:	ldrb	w1, [x29, #270]
     df4:	strb	w1, [x0, #1514]
     df8:	ldr	w0, [x29, #44]
     dfc:	cmp	w0, #0x1
     e00:	b.eq	22f4 <gomp_team_start+0x1824>  // b.none
     e04:	mov	w0, #0x1                   	// #1
     e08:	str	w0, [x29, #300]
     e0c:	adrp	x0, 0 <gomp_places_list>
     e10:	add	x0, x0, #0x0
     e14:	ldr	x0, [x0]
     e18:	cmp	x0, #0x0
     e1c:	cset	w0, ne  // ne = any
     e20:	and	w0, w0, #0xff
     e24:	and	x0, x0, #0xff
     e28:	cmp	x0, #0x0
     e2c:	b.eq	1028 <gomp_team_start+0x558>  // b.none
     e30:	ldr	x0, [x29, #192]
     e34:	ldr	w0, [x0, #92]
     e38:	sub	w0, w0, #0x1
     e3c:	str	w0, [x29, #256]
     e40:	ldrb	w0, [x29, #271]
     e44:	cmp	w0, #0x4
     e48:	b.eq	ed0 <gomp_team_start+0x400>  // b.none
     e4c:	cmp	w0, #0x4
     e50:	b.gt	102c <gomp_team_start+0x55c>
     e54:	cmp	w0, #0x3
     e58:	b.eq	e74 <gomp_team_start+0x3a4>  // b.none
     e5c:	cmp	w0, #0x3
     e60:	b.gt	102c <gomp_team_start+0x55c>
     e64:	cmp	w0, #0x1
     e68:	b.eq	e74 <gomp_team_start+0x3a4>  // b.none
     e6c:	cmp	w0, #0x2
     e70:	b	102c <gomp_team_start+0x55c>
     e74:	ldr	x0, [x29, #192]
     e78:	ldr	w0, [x0, #56]
     e7c:	ldr	w1, [x29, #44]
     e80:	cmp	w1, w0
     e84:	b.ls	ebc <gomp_team_start+0x3ec>  // b.plast
     e88:	ldr	x0, [x29, #192]
     e8c:	ldr	w0, [x0, #56]
     e90:	ldr	w1, [x29, #44]
     e94:	udiv	w0, w1, w0
     e98:	str	w0, [x29, #264]
     e9c:	ldr	x0, [x29, #192]
     ea0:	ldr	w1, [x0, #56]
     ea4:	ldr	w0, [x29, #44]
     ea8:	udiv	w2, w0, w1
     eac:	mul	w1, w2, w1
     eb0:	sub	w0, w0, w1
     eb4:	str	w0, [x29, #260]
     eb8:	b	ec4 <gomp_team_start+0x3f4>
     ebc:	mov	w0, #0x1                   	// #1
     ec0:	str	w0, [x29, #264]
     ec4:	mov	w0, #0x1                   	// #1
     ec8:	str	w0, [x29, #252]
     ecc:	b	102c <gomp_team_start+0x55c>
     ed0:	ldr	x0, [x29, #192]
     ed4:	ldr	w0, [x0, #56]
     ed8:	ldr	w1, [x29, #44]
     edc:	cmp	w1, w0
     ee0:	b.hi	fd4 <gomp_team_start+0x504>  // b.pmore
     ee4:	ldr	x0, [x29, #192]
     ee8:	ldr	w1, [x0, #56]
     eec:	ldr	w0, [x29, #44]
     ef0:	udiv	w0, w1, w0
     ef4:	str	w0, [x29, #264]
     ef8:	ldr	x0, [x29, #192]
     efc:	ldr	w0, [x0, #56]
     f00:	ldr	w1, [x29, #44]
     f04:	udiv	w2, w0, w1
     f08:	ldr	w1, [x29, #44]
     f0c:	mul	w1, w2, w1
     f10:	sub	w0, w0, w1
     f14:	str	w0, [x29, #260]
     f18:	ldr	w0, [x29, #264]
     f1c:	add	w1, w0, #0x1
     f20:	ldr	w0, [x29, #260]
     f24:	mul	w1, w1, w0
     f28:	ldr	x0, [x29, #192]
     f2c:	ldr	w0, [x0, #52]
     f30:	add	w0, w1, w0
     f34:	str	w0, [x29, #260]
     f38:	ldr	w1, [x29, #256]
     f3c:	ldr	w0, [x29, #260]
     f40:	cmp	w1, w0
     f44:	b.cs	f8c <gomp_team_start+0x4bc>  // b.hs, b.nlast
     f48:	ldr	x0, [x29, #192]
     f4c:	ldr	w0, [x0, #52]
     f50:	ldr	w1, [x29, #256]
     f54:	sub	w0, w1, w0
     f58:	ldr	w1, [x29, #264]
     f5c:	add	w1, w1, #0x1
     f60:	udiv	w2, w0, w1
     f64:	mul	w1, w2, w1
     f68:	sub	w0, w0, w1
     f6c:	ldr	w1, [x29, #256]
     f70:	sub	w0, w1, w0
     f74:	str	w0, [x29, #256]
     f78:	ldr	w0, [x29, #264]
     f7c:	add	w1, w0, #0x1
     f80:	ldr	x0, [x29, #192]
     f84:	str	w1, [x0, #56]
     f88:	b	fc4 <gomp_team_start+0x4f4>
     f8c:	ldr	w1, [x29, #256]
     f90:	ldr	w0, [x29, #260]
     f94:	sub	w0, w1, w0
     f98:	ldr	w1, [x29, #264]
     f9c:	udiv	w2, w0, w1
     fa0:	ldr	w1, [x29, #264]
     fa4:	mul	w1, w2, w1
     fa8:	sub	w0, w0, w1
     fac:	ldr	w1, [x29, #256]
     fb0:	sub	w0, w1, w0
     fb4:	str	w0, [x29, #256]
     fb8:	ldr	x0, [x29, #192]
     fbc:	ldr	w1, [x29, #264]
     fc0:	str	w1, [x0, #56]
     fc4:	ldr	x0, [x29, #192]
     fc8:	ldr	w1, [x29, #256]
     fcc:	str	w1, [x0, #52]
     fd0:	b	102c <gomp_team_start+0x55c>
     fd4:	ldr	x0, [x29, #192]
     fd8:	ldr	w0, [x0, #56]
     fdc:	ldr	w1, [x29, #44]
     fe0:	udiv	w0, w1, w0
     fe4:	str	w0, [x29, #264]
     fe8:	ldr	x0, [x29, #192]
     fec:	ldr	w1, [x0, #56]
     ff0:	ldr	w0, [x29, #44]
     ff4:	udiv	w2, w0, w1
     ff8:	mul	w1, w2, w1
     ffc:	sub	w0, w0, w1
    1000:	str	w0, [x29, #260]
    1004:	ldr	x0, [x29, #192]
    1008:	ldr	w1, [x29, #256]
    100c:	str	w1, [x0, #52]
    1010:	ldr	x0, [x29, #192]
    1014:	mov	w1, #0x1                   	// #1
    1018:	str	w1, [x0, #56]
    101c:	mov	w0, #0x1                   	// #1
    1020:	str	w0, [x29, #252]
    1024:	b	102c <gomp_team_start+0x55c>
    1028:	strb	wzr, [x29, #271]
    102c:	ldrb	w0, [x29, #191]
    1030:	eor	w0, w0, #0x1
    1034:	and	w0, w0, #0xff
    1038:	cmp	w0, #0x0
    103c:	b.eq	1abc <gomp_team_start+0xfec>  // b.none
    1040:	ldr	x0, [x29, #176]
    1044:	ldr	w0, [x0, #12]
    1048:	str	w0, [x29, #292]
    104c:	ldr	w1, [x29, #44]
    1050:	ldr	w0, [x29, #292]
    1054:	cmp	w1, w0
    1058:	b.hi	1068 <gomp_team_start+0x598>  // b.pmore
    105c:	ldr	w0, [x29, #44]
    1060:	str	w0, [x29, #296]
    1064:	b	10a4 <gomp_team_start+0x5d4>
    1068:	ldr	w0, [x29, #292]
    106c:	cmp	w0, #0x0
    1070:	b.ne	108c <gomp_team_start+0x5bc>  // b.any
    1074:	str	wzr, [x29, #296]
    1078:	ldr	x0, [x29, #176]
    107c:	add	x0, x0, #0x40
    1080:	ldr	w1, [x29, #44]
    1084:	bl	14c <gomp_simple_barrier_init>
    1088:	b	10a4 <gomp_team_start+0x5d4>
    108c:	ldr	w0, [x29, #292]
    1090:	str	w0, [x29, #296]
    1094:	ldr	x0, [x29, #176]
    1098:	add	x0, x0, #0x40
    109c:	ldr	w1, [x29, #44]
    10a0:	bl	174 <gomp_simple_barrier_reinit>
    10a4:	ldr	x0, [x29, #176]
    10a8:	ldr	w1, [x29, #44]
    10ac:	str	w1, [x0, #12]
    10b0:	ldr	x0, [x29, #176]
    10b4:	ldr	w0, [x0, #8]
    10b8:	ldr	w1, [x29, #44]
    10bc:	cmp	w1, w0
    10c0:	b.cc	1924 <gomp_team_start+0xe54>  // b.lo, b.ul, b.last
    10c4:	ldr	w0, [x29, #44]
    10c8:	add	w1, w0, #0x1
    10cc:	ldr	x0, [x29, #176]
    10d0:	str	w1, [x0, #8]
    10d4:	ldr	x0, [x29, #176]
    10d8:	ldr	x2, [x0]
    10dc:	ldr	x0, [x29, #176]
    10e0:	ldr	w0, [x0, #8]
    10e4:	mov	w0, w0
    10e8:	lsl	x0, x0, #3
    10ec:	mov	x1, x0
    10f0:	mov	x0, x2
    10f4:	bl	0 <gomp_realloc>
    10f8:	mov	x1, x0
    10fc:	ldr	x0, [x29, #176]
    1100:	str	x1, [x0]
    1104:	ldr	x0, [x29, #176]
    1108:	ldr	x0, [x0]
    110c:	ldr	x1, [x29, #192]
    1110:	str	x1, [x0]
    1114:	b	1924 <gomp_team_start+0xe54>
    1118:	ldr	x0, [x29, #192]
    111c:	ldr	w0, [x0, #52]
    1120:	str	w0, [x29, #232]
    1124:	ldr	x0, [x29, #192]
    1128:	ldr	w0, [x0, #56]
    112c:	str	w0, [x29, #228]
    1130:	str	wzr, [x29, #224]
    1134:	adrp	x0, 0 <gomp_places_list>
    1138:	add	x0, x0, #0x0
    113c:	ldr	x0, [x0]
    1140:	cmp	x0, #0x0
    1144:	cset	w0, ne  // ne = any
    1148:	and	w0, w0, #0xff
    114c:	and	x0, x0, #0xff
    1150:	cmp	x0, #0x0
    1154:	b.eq	1780 <gomp_team_start+0xcb0>  // b.none
    1158:	ldrb	w0, [x29, #271]
    115c:	cmp	w0, #0x4
    1160:	b.eq	1210 <gomp_team_start+0x740>  // b.none
    1164:	cmp	w0, #0x4
    1168:	b.gt	134c <gomp_team_start+0x87c>
    116c:	cmp	w0, #0x3
    1170:	b.eq	118c <gomp_team_start+0x6bc>  // b.none
    1174:	cmp	w0, #0x3
    1178:	b.gt	134c <gomp_team_start+0x87c>
    117c:	cmp	w0, #0x1
    1180:	b.eq	118c <gomp_team_start+0x6bc>  // b.none
    1184:	cmp	w0, #0x2
    1188:	b	134c <gomp_team_start+0x87c>
    118c:	ldr	w1, [x29, #252]
    1190:	ldr	w0, [x29, #264]
    1194:	cmp	w1, w0
    1198:	b.ne	1200 <gomp_team_start+0x730>  // b.any
    119c:	ldr	w0, [x29, #256]
    11a0:	add	w0, w0, #0x1
    11a4:	str	w0, [x29, #256]
    11a8:	ldr	x0, [x29, #32]
    11ac:	ldr	w1, [x0, #44]
    11b0:	ldr	x0, [x29, #32]
    11b4:	ldr	w0, [x0, #48]
    11b8:	add	w0, w1, w0
    11bc:	ldr	w1, [x29, #256]
    11c0:	cmp	w1, w0
    11c4:	b.ne	11d4 <gomp_team_start+0x704>  // b.any
    11c8:	ldr	x0, [x29, #32]
    11cc:	ldr	w0, [x0, #44]
    11d0:	str	w0, [x29, #256]
    11d4:	mov	w0, #0x1                   	// #1
    11d8:	str	w0, [x29, #252]
    11dc:	ldr	w1, [x29, #44]
    11e0:	ldr	w0, [x29, #260]
    11e4:	sub	w0, w1, w0
    11e8:	ldr	w1, [x29, #300]
    11ec:	cmp	w1, w0
    11f0:	b.ne	1348 <gomp_team_start+0x878>  // b.any
    11f4:	mov	w0, #0x1                   	// #1
    11f8:	str	w0, [x29, #264]
    11fc:	b	1348 <gomp_team_start+0x878>
    1200:	ldr	w0, [x29, #252]
    1204:	add	w0, w0, #0x1
    1208:	str	w0, [x29, #252]
    120c:	b	1348 <gomp_team_start+0x878>
    1210:	ldr	w0, [x29, #252]
    1214:	cmp	w0, #0x0
    1218:	b.ne	12b4 <gomp_team_start+0x7e4>  // b.any
    121c:	ldr	w1, [x29, #256]
    1220:	ldr	w0, [x29, #260]
    1224:	cmp	w1, w0
    1228:	b.cs	1244 <gomp_team_start+0x774>  // b.hs, b.nlast
    122c:	ldr	w1, [x29, #264]
    1230:	ldr	w0, [x29, #256]
    1234:	add	w0, w1, w0
    1238:	add	w0, w0, #0x1
    123c:	str	w0, [x29, #256]
    1240:	b	1254 <gomp_team_start+0x784>
    1244:	ldr	w1, [x29, #256]
    1248:	ldr	w0, [x29, #264]
    124c:	add	w0, w1, w0
    1250:	str	w0, [x29, #256]
    1254:	ldr	x0, [x29, #32]
    1258:	ldr	w1, [x0, #44]
    125c:	ldr	x0, [x29, #32]
    1260:	ldr	w0, [x0, #48]
    1264:	add	w0, w1, w0
    1268:	ldr	w1, [x29, #256]
    126c:	cmp	w1, w0
    1270:	b.ne	1280 <gomp_team_start+0x7b0>  // b.any
    1274:	ldr	x0, [x29, #32]
    1278:	ldr	w0, [x0, #44]
    127c:	str	w0, [x29, #256]
    1280:	ldr	w0, [x29, #256]
    1284:	str	w0, [x29, #232]
    1288:	ldr	w1, [x29, #256]
    128c:	ldr	w0, [x29, #260]
    1290:	cmp	w1, w0
    1294:	b.cs	12a8 <gomp_team_start+0x7d8>  // b.hs, b.nlast
    1298:	ldr	w0, [x29, #264]
    129c:	add	w0, w0, #0x1
    12a0:	str	w0, [x29, #228]
    12a4:	b	134c <gomp_team_start+0x87c>
    12a8:	ldr	w0, [x29, #264]
    12ac:	str	w0, [x29, #228]
    12b0:	b	134c <gomp_team_start+0x87c>
    12b4:	ldr	w1, [x29, #252]
    12b8:	ldr	w0, [x29, #264]
    12bc:	cmp	w1, w0
    12c0:	b.ne	1328 <gomp_team_start+0x858>  // b.any
    12c4:	ldr	w0, [x29, #256]
    12c8:	add	w0, w0, #0x1
    12cc:	str	w0, [x29, #256]
    12d0:	ldr	x0, [x29, #32]
    12d4:	ldr	w1, [x0, #44]
    12d8:	ldr	x0, [x29, #32]
    12dc:	ldr	w0, [x0, #48]
    12e0:	add	w0, w1, w0
    12e4:	ldr	w1, [x29, #256]
    12e8:	cmp	w1, w0
    12ec:	b.ne	12fc <gomp_team_start+0x82c>  // b.any
    12f0:	ldr	x0, [x29, #32]
    12f4:	ldr	w0, [x0, #44]
    12f8:	str	w0, [x29, #256]
    12fc:	mov	w0, #0x1                   	// #1
    1300:	str	w0, [x29, #252]
    1304:	ldr	w1, [x29, #44]
    1308:	ldr	w0, [x29, #260]
    130c:	sub	w0, w1, w0
    1310:	ldr	w1, [x29, #300]
    1314:	cmp	w1, w0
    1318:	b.ne	1334 <gomp_team_start+0x864>  // b.any
    131c:	mov	w0, #0x1                   	// #1
    1320:	str	w0, [x29, #264]
    1324:	b	1334 <gomp_team_start+0x864>
    1328:	ldr	w0, [x29, #252]
    132c:	add	w0, w0, #0x1
    1330:	str	w0, [x29, #252]
    1334:	ldr	w0, [x29, #256]
    1338:	str	w0, [x29, #232]
    133c:	mov	w0, #0x1                   	// #1
    1340:	str	w0, [x29, #228]
    1344:	b	134c <gomp_team_start+0x87c>
    1348:	nop
    134c:	ldr	x0, [x29, #240]
    1350:	cmp	x0, #0x0
    1354:	b.ne	13e8 <gomp_team_start+0x918>  // b.any
    1358:	ldrb	w0, [x29, #271]
    135c:	cmp	w0, #0x1
    1360:	b.eq	1390 <gomp_team_start+0x8c0>  // b.none
    1364:	ldr	x0, [x29, #176]
    1368:	ldr	x1, [x0]
    136c:	ldr	w0, [x29, #300]
    1370:	lsl	x0, x0, #3
    1374:	add	x0, x1, x0
    1378:	ldr	x0, [x0]
    137c:	ldr	w1, [x0, #92]
    1380:	ldr	w0, [x29, #256]
    1384:	add	w0, w0, #0x1
    1388:	cmp	w1, w0
    138c:	b.ne	13e8 <gomp_team_start+0x918>  // b.any
    1390:	ldr	x0, [x29, #176]
    1394:	ldr	x1, [x0]
    1398:	ldr	w0, [x29, #300]
    139c:	lsl	x0, x0, #3
    13a0:	add	x0, x1, x0
    13a4:	ldr	x0, [x0]
    13a8:	ldr	w0, [x0, #92]
    13ac:	ldr	w1, [x29, #232]
    13b0:	cmp	w1, w0
    13b4:	b.cs	13e8 <gomp_team_start+0x918>  // b.hs, b.nlast
    13b8:	ldr	x0, [x29, #176]
    13bc:	ldr	x1, [x0]
    13c0:	ldr	w0, [x29, #300]
    13c4:	lsl	x0, x0, #3
    13c8:	add	x0, x1, x0
    13cc:	ldr	x0, [x0]
    13d0:	ldr	w1, [x0, #92]
    13d4:	ldr	w2, [x29, #232]
    13d8:	ldr	w0, [x29, #228]
    13dc:	add	w0, w2, w0
    13e0:	cmp	w1, w0
    13e4:	b.ls	1754 <gomp_team_start+0xc84>  // b.plast
    13e8:	mov	w0, #0x1                   	// #1
    13ec:	strb	w0, [x29, #239]
    13f0:	ldr	x0, [x29, #240]
    13f4:	cmp	x0, #0x0
    13f8:	b.ne	160c <gomp_team_start+0xb3c>  // b.any
    13fc:	ldr	x0, [x29, #32]
    1400:	ldr	w0, [x0, #48]
    1404:	cmp	w0, #0x40
    1408:	b.ls	1428 <gomp_team_start+0x958>  // b.plast
    140c:	ldr	x0, [x29, #32]
    1410:	ldr	w0, [x0, #48]
    1414:	mov	w0, w0
    1418:	lsl	x0, x0, #3
    141c:	bl	0 <gomp_malloc>
    1420:	str	x0, [x29, #240]
    1424:	b	145c <gomp_team_start+0x98c>
    1428:	ldr	x0, [x29, #32]
    142c:	ldr	w0, [x0, #48]
    1430:	mov	w0, w0
    1434:	lsl	x0, x0, #3
    1438:	add	x0, x0, #0xf
    143c:	lsr	x0, x0, #4
    1440:	lsl	x0, x0, #4
    1444:	sub	sp, sp, x0
    1448:	mov	x0, sp
    144c:	add	x0, x0, #0xf
    1450:	lsr	x0, x0, #4
    1454:	lsl	x0, x0, #4
    1458:	str	x0, [x29, #240]
    145c:	ldr	x0, [x29, #32]
    1460:	ldr	w0, [x0, #48]
    1464:	mov	w0, w0
    1468:	lsl	x0, x0, #3
    146c:	mov	x2, x0
    1470:	mov	w1, #0x0                   	// #0
    1474:	ldr	x0, [x29, #240]
    1478:	bl	0 <memset>
    147c:	ldr	w0, [x29, #300]
    1480:	str	w0, [x29, #216]
    1484:	b	159c <gomp_team_start+0xacc>
    1488:	ldr	x0, [x29, #176]
    148c:	ldr	x1, [x0]
    1490:	ldr	w0, [x29, #216]
    1494:	lsl	x0, x0, #3
    1498:	add	x0, x1, x0
    149c:	ldr	x0, [x0]
    14a0:	ldr	w1, [x0, #92]
    14a4:	ldr	x0, [x29, #32]
    14a8:	ldr	w0, [x0, #44]
    14ac:	cmp	w1, w0
    14b0:	b.ls	1578 <gomp_team_start+0xaa8>  // b.plast
    14b4:	ldr	x0, [x29, #176]
    14b8:	ldr	x1, [x0]
    14bc:	ldr	w0, [x29, #216]
    14c0:	lsl	x0, x0, #3
    14c4:	add	x0, x1, x0
    14c8:	ldr	x0, [x0]
    14cc:	ldr	w1, [x0, #92]
    14d0:	ldr	x0, [x29, #32]
    14d4:	ldr	w2, [x0, #44]
    14d8:	ldr	x0, [x29, #32]
    14dc:	ldr	w0, [x0, #48]
    14e0:	add	w0, w2, w0
    14e4:	cmp	w1, w0
    14e8:	b.hi	1578 <gomp_team_start+0xaa8>  // b.pmore
    14ec:	ldr	x0, [x29, #176]
    14f0:	ldr	x1, [x0]
    14f4:	ldr	w0, [x29, #216]
    14f8:	lsl	x0, x0, #3
    14fc:	add	x0, x1, x0
    1500:	ldr	x0, [x0]
    1504:	ldr	w1, [x0, #92]
    1508:	ldr	x0, [x29, #32]
    150c:	ldr	w0, [x0, #44]
    1510:	sub	w0, w1, w0
    1514:	sub	w0, w0, #0x1
    1518:	str	w0, [x29, #220]
    151c:	ldr	w0, [x29, #220]
    1520:	lsl	x0, x0, #3
    1524:	ldr	x1, [x29, #240]
    1528:	add	x1, x1, x0
    152c:	ldr	x0, [x29, #176]
    1530:	ldr	x2, [x0]
    1534:	ldr	w0, [x29, #216]
    1538:	lsl	x0, x0, #3
    153c:	add	x0, x2, x0
    1540:	ldr	x0, [x0]
    1544:	ldr	x1, [x1]
    1548:	str	x1, [x0, #8]
    154c:	ldr	x0, [x29, #176]
    1550:	ldr	x1, [x0]
    1554:	ldr	w0, [x29, #216]
    1558:	lsl	x0, x0, #3
    155c:	add	x1, x1, x0
    1560:	ldr	w0, [x29, #220]
    1564:	lsl	x0, x0, #3
    1568:	ldr	x2, [x29, #240]
    156c:	add	x0, x2, x0
    1570:	ldr	x1, [x1]
    1574:	str	x1, [x0]
    1578:	ldr	x0, [x29, #176]
    157c:	ldr	x1, [x0]
    1580:	ldr	w0, [x29, #216]
    1584:	lsl	x0, x0, #3
    1588:	add	x0, x1, x0
    158c:	str	xzr, [x0]
    1590:	ldr	w0, [x29, #216]
    1594:	add	w0, w0, #0x1
    1598:	str	w0, [x29, #216]
    159c:	ldr	w1, [x29, #216]
    15a0:	ldr	w0, [x29, #292]
    15a4:	cmp	w1, w0
    15a8:	b.cc	1488 <gomp_team_start+0x9b8>  // b.lo, b.ul, b.last
    15ac:	ldr	w1, [x29, #44]
    15b0:	ldr	w0, [x29, #292]
    15b4:	cmp	w1, w0
    15b8:	b.ls	15f4 <gomp_team_start+0xb24>  // b.plast
    15bc:	ldr	x0, [x29, #176]
    15c0:	ldr	x1, [x0]
    15c4:	ldr	w0, [x29, #292]
    15c8:	lsl	x0, x0, #3
    15cc:	add	x3, x1, x0
    15d0:	ldr	w1, [x29, #44]
    15d4:	ldr	w0, [x29, #292]
    15d8:	sub	w0, w1, w0
    15dc:	mov	w0, w0
    15e0:	lsl	x0, x0, #3
    15e4:	mov	x2, x0
    15e8:	mov	w1, #0x0                   	// #0
    15ec:	mov	x0, x3
    15f0:	bl	0 <memset>
    15f4:	ldr	w0, [x29, #44]
    15f8:	str	w0, [x29, #296]
    15fc:	ldr	w1, [x29, #292]
    1600:	ldr	w0, [x29, #300]
    1604:	sub	w0, w1, w0
    1608:	str	w0, [x29, #248]
    160c:	ldr	w0, [x29, #248]
    1610:	cmp	w0, #0x0
    1614:	b.eq	1938 <gomp_team_start+0xe68>  // b.none
    1618:	ldr	w0, [x29, #256]
    161c:	str	w0, [x29, #220]
    1620:	ldr	x0, [x29, #32]
    1624:	ldr	w0, [x0, #44]
    1628:	ldr	w1, [x29, #220]
    162c:	sub	w0, w1, w0
    1630:	mov	w0, w0
    1634:	lsl	x0, x0, #3
    1638:	ldr	x1, [x29, #240]
    163c:	add	x0, x1, x0
    1640:	ldr	x0, [x0]
    1644:	cmp	x0, #0x0
    1648:	b.ne	16d4 <gomp_team_start+0xc04>  // b.any
    164c:	ldrb	w0, [x29, #271]
    1650:	cmp	w0, #0x1
    1654:	b.ne	190c <gomp_team_start+0xe3c>  // b.any
    1658:	ldr	w0, [x29, #232]
    165c:	str	w0, [x29, #220]
    1660:	b	169c <gomp_team_start+0xbcc>
    1664:	ldr	x0, [x29, #32]
    1668:	ldr	w0, [x0, #44]
    166c:	ldr	w1, [x29, #220]
    1670:	sub	w0, w1, w0
    1674:	mov	w0, w0
    1678:	lsl	x0, x0, #3
    167c:	ldr	x1, [x29, #240]
    1680:	add	x0, x1, x0
    1684:	ldr	x0, [x0]
    1688:	cmp	x0, #0x0
    168c:	b.ne	16b8 <gomp_team_start+0xbe8>  // b.any
    1690:	ldr	w0, [x29, #220]
    1694:	add	w0, w0, #0x1
    1698:	str	w0, [x29, #220]
    169c:	ldr	w1, [x29, #232]
    16a0:	ldr	w0, [x29, #228]
    16a4:	add	w0, w1, w0
    16a8:	ldr	w1, [x29, #220]
    16ac:	cmp	w1, w0
    16b0:	b.cc	1664 <gomp_team_start+0xb94>  // b.lo, b.ul, b.last
    16b4:	b	16bc <gomp_team_start+0xbec>
    16b8:	nop
    16bc:	ldr	w1, [x29, #232]
    16c0:	ldr	w0, [x29, #228]
    16c4:	add	w0, w1, w0
    16c8:	ldr	w1, [x29, #220]
    16cc:	cmp	w1, w0
    16d0:	b.eq	1914 <gomp_team_start+0xe44>  // b.none
    16d4:	ldr	x0, [x29, #32]
    16d8:	ldr	w0, [x0, #44]
    16dc:	ldr	w1, [x29, #220]
    16e0:	sub	w0, w1, w0
    16e4:	mov	w0, w0
    16e8:	lsl	x0, x0, #3
    16ec:	ldr	x1, [x29, #240]
    16f0:	add	x0, x1, x0
    16f4:	ldr	x0, [x0]
    16f8:	str	x0, [x29, #304]
    16fc:	ldr	x0, [x29, #32]
    1700:	ldr	w0, [x0, #44]
    1704:	ldr	w1, [x29, #220]
    1708:	sub	w0, w1, w0
    170c:	mov	w0, w0
    1710:	lsl	x0, x0, #3
    1714:	ldr	x1, [x29, #240]
    1718:	add	x0, x1, x0
    171c:	ldr	x1, [x29, #304]
    1720:	ldr	x1, [x1, #8]
    1724:	str	x1, [x0]
    1728:	ldr	w0, [x29, #248]
    172c:	sub	w0, w0, #0x1
    1730:	str	w0, [x29, #248]
    1734:	ldr	x0, [x29, #176]
    1738:	ldr	x1, [x0]
    173c:	ldr	w0, [x29, #300]
    1740:	lsl	x0, x0, #3
    1744:	add	x0, x1, x0
    1748:	ldr	x1, [x29, #304]
    174c:	str	x1, [x0]
    1750:	b	1770 <gomp_team_start+0xca0>
    1754:	ldr	x0, [x29, #176]
    1758:	ldr	x1, [x0]
    175c:	ldr	w0, [x29, #300]
    1760:	lsl	x0, x0, #3
    1764:	add	x0, x1, x0
    1768:	ldr	x0, [x0]
    176c:	str	x0, [x29, #304]
    1770:	ldr	w0, [x29, #256]
    1774:	add	w0, w0, #0x1
    1778:	str	w0, [x29, #224]
    177c:	b	179c <gomp_team_start+0xccc>
    1780:	ldr	x0, [x29, #176]
    1784:	ldr	x1, [x0]
    1788:	ldr	w0, [x29, #300]
    178c:	lsl	x0, x0, #3
    1790:	add	x0, x1, x0
    1794:	ldr	x0, [x0]
    1798:	str	x0, [x29, #304]
    179c:	ldr	x0, [x29, #304]
    17a0:	ldr	x1, [x29, #32]
    17a4:	str	x1, [x0, #16]
    17a8:	ldr	x0, [x29, #32]
    17ac:	add	x1, x0, #0x100
    17b0:	ldr	x0, [x29, #304]
    17b4:	str	x1, [x0, #24]
    17b8:	ldr	x0, [x29, #304]
    17bc:	str	xzr, [x0, #32]
    17c0:	ldr	x0, [x29, #304]
    17c4:	ldr	w1, [x29, #300]
    17c8:	str	w1, [x0, #40]
    17cc:	ldr	x0, [x29, #32]
    17d0:	ldr	w0, [x0, #36]
    17d4:	add	w1, w0, #0x1
    17d8:	ldr	x0, [x29, #304]
    17dc:	str	w1, [x0, #44]
    17e0:	ldr	x0, [x29, #192]
    17e4:	ldr	w1, [x0, #48]
    17e8:	ldr	x0, [x29, #304]
    17ec:	str	w1, [x0, #48]
    17f0:	ldr	x0, [x29, #304]
    17f4:	ldr	w1, [x29, #232]
    17f8:	str	w1, [x0, #52]
    17fc:	ldr	x0, [x29, #304]
    1800:	ldr	w1, [x29, #228]
    1804:	str	w1, [x0, #56]
    1808:	ldr	x0, [x29, #304]
    180c:	str	xzr, [x0, #64]
    1810:	ldr	x0, [x29, #304]
    1814:	str	xzr, [x0, #72]
    1818:	ldr	w1, [x29, #300]
    181c:	mov	x0, x1
    1820:	lsl	x0, x0, #1
    1824:	add	x0, x0, x1
    1828:	lsl	x0, x0, #2
    182c:	add	x0, x0, x1
    1830:	lsl	x0, x0, #4
    1834:	add	x0, x0, #0x540
    1838:	ldr	x1, [x29, #32]
    183c:	add	x1, x1, x0
    1840:	ldr	x0, [x29, #304]
    1844:	str	x1, [x0, #80]
    1848:	ldr	x0, [x29, #304]
    184c:	ldr	w1, [x29, #224]
    1850:	str	w1, [x0, #92]
    1854:	ldr	x0, [x29, #304]
    1858:	ldr	x0, [x0, #80]
    185c:	ldr	x2, [x29, #160]
    1860:	ldr	x1, [x29, #168]
    1864:	bl	0 <gomp_init_task>
    1868:	ldr	x2, [x29, #32]
    186c:	ldr	w1, [x29, #300]
    1870:	mov	x0, x1
    1874:	lsl	x0, x0, #1
    1878:	add	x0, x0, x1
    187c:	lsl	x0, x0, #2
    1880:	add	x0, x0, x1
    1884:	lsl	x0, x0, #4
    1888:	add	x0, x2, x0
    188c:	ldr	x1, [x29, #272]
    1890:	str	x1, [x0, #1488]
    1894:	ldr	x2, [x29, #32]
    1898:	ldr	w1, [x29, #300]
    189c:	mov	x0, x1
    18a0:	lsl	x0, x0, #1
    18a4:	add	x0, x0, x1
    18a8:	lsl	x0, x0, #2
    18ac:	add	x0, x0, x1
    18b0:	lsl	x0, x0, #4
    18b4:	add	x0, x2, x0
    18b8:	ldrb	w1, [x29, #270]
    18bc:	strb	w1, [x0, #1514]
    18c0:	ldr	x0, [x29, #304]
    18c4:	ldr	x0, [x0, #80]
    18c8:	ldr	x1, [x29, #24]
    18cc:	str	x1, [x0, #40]
    18d0:	ldr	x0, [x29, #304]
    18d4:	ldr	x1, [x29, #56]
    18d8:	str	x1, [x0]
    18dc:	ldr	x0, [x29, #304]
    18e0:	ldr	x1, [x29, #48]
    18e4:	str	x1, [x0, #8]
    18e8:	ldr	x0, [x29, #32]
    18ec:	ldr	x1, [x0, #80]
    18f0:	ldr	w0, [x29, #300]
    18f4:	lsl	x0, x0, #3
    18f8:	add	x0, x1, x0
    18fc:	ldr	x1, [x29, #304]
    1900:	add	x1, x1, #0x58
    1904:	str	x1, [x0]
    1908:	b	1918 <gomp_team_start+0xe48>
    190c:	nop
    1910:	b	1918 <gomp_team_start+0xe48>
    1914:	nop
    1918:	ldr	w0, [x29, #300]
    191c:	add	w0, w0, #0x1
    1920:	str	w0, [x29, #300]
    1924:	ldr	w1, [x29, #300]
    1928:	ldr	w0, [x29, #296]
    192c:	cmp	w1, w0
    1930:	b.cc	1118 <gomp_team_start+0x648>  // b.lo, b.ul, b.last
    1934:	b	193c <gomp_team_start+0xe6c>
    1938:	nop
    193c:	ldr	x0, [x29, #240]
    1940:	cmp	x0, #0x0
    1944:	cset	w0, ne  // ne = any
    1948:	and	w0, w0, #0xff
    194c:	and	x0, x0, #0xff
    1950:	cmp	x0, #0x0
    1954:	b.eq	1aac <gomp_team_start+0xfdc>  // b.none
    1958:	ldr	w1, [x29, #44]
    195c:	ldr	w0, [x29, #292]
    1960:	cmp	w1, w0
    1964:	b.hi	1988 <gomp_team_start+0xeb8>  // b.pmore
    1968:	ldr	w1, [x29, #292]
    196c:	ldr	w0, [x29, #44]
    1970:	sub	w0, w1, w0
    1974:	ldr	w1, [x29, #248]
    1978:	cmp	w1, w0
    197c:	cset	w0, eq  // eq = none
    1980:	and	w0, w0, #0xff
    1984:	b	199c <gomp_team_start+0xecc>
    1988:	ldr	w1, [x29, #300]
    198c:	ldr	w0, [x29, #292]
    1990:	cmp	w1, w0
    1994:	cset	w0, eq  // eq = none
    1998:	and	w0, w0, #0xff
    199c:	cmp	w0, #0x0
    19a0:	b.eq	19c8 <gomp_team_start+0xef8>  // b.none
    19a4:	ldr	x0, [x29, #32]
    19a8:	ldr	w0, [x0, #48]
    19ac:	cmp	w0, #0x40
    19b0:	b.ls	19bc <gomp_team_start+0xeec>  // b.plast
    19b4:	ldr	x0, [x29, #240]
    19b8:	bl	0 <free>
    19bc:	str	xzr, [x29, #240]
    19c0:	str	wzr, [x29, #248]
    19c4:	b	1aac <gomp_team_start+0xfdc>
    19c8:	mov	w0, #0x1                   	// #1
    19cc:	str	w0, [x29, #300]
    19d0:	ldrb	w0, [x29, #271]
    19d4:	cmp	w0, #0x4
    19d8:	b.eq	1a48 <gomp_team_start+0xf78>  // b.none
    19dc:	cmp	w0, #0x4
    19e0:	b.gt	1a80 <gomp_team_start+0xfb0>
    19e4:	cmp	w0, #0x3
    19e8:	b.eq	1a04 <gomp_team_start+0xf34>  // b.none
    19ec:	cmp	w0, #0x3
    19f0:	b.gt	1a80 <gomp_team_start+0xfb0>
    19f4:	cmp	w0, #0x1
    19f8:	b.eq	1a04 <gomp_team_start+0xf34>  // b.none
    19fc:	cmp	w0, #0x2
    1a00:	b	1a80 <gomp_team_start+0xfb0>
    1a04:	ldr	x0, [x29, #192]
    1a08:	ldr	w0, [x0, #56]
    1a0c:	ldr	w1, [x29, #44]
    1a10:	cmp	w1, w0
    1a14:	b.ls	1a2c <gomp_team_start+0xf5c>  // b.plast
    1a18:	ldr	x0, [x29, #192]
    1a1c:	ldr	w0, [x0, #56]
    1a20:	ldr	w1, [x29, #44]
    1a24:	udiv	w0, w1, w0
    1a28:	str	w0, [x29, #264]
    1a2c:	mov	w0, #0x1                   	// #1
    1a30:	str	w0, [x29, #252]
    1a34:	ldr	x0, [x29, #192]
    1a38:	ldr	w0, [x0, #92]
    1a3c:	sub	w0, w0, #0x1
    1a40:	str	w0, [x29, #256]
    1a44:	b	1a80 <gomp_team_start+0xfb0>
    1a48:	ldr	x0, [x29, #192]
    1a4c:	ldr	w0, [x0, #52]
    1a50:	str	w0, [x29, #256]
    1a54:	ldr	w0, [x29, #252]
    1a58:	cmp	w0, #0x0
    1a5c:	b.eq	1a7c <gomp_team_start+0xfac>  // b.none
    1a60:	ldr	x0, [x29, #32]
    1a64:	ldr	w0, [x0, #48]
    1a68:	ldr	w1, [x29, #44]
    1a6c:	udiv	w0, w1, w0
    1a70:	str	w0, [x29, #264]
    1a74:	mov	w0, #0x1                   	// #1
    1a78:	str	w0, [x29, #252]
    1a7c:	nop
    1a80:	ldr	w0, [x29, #248]
    1a84:	cmp	w0, #0x0
    1a88:	b.eq	1aac <gomp_team_start+0xfdc>  // b.none
    1a8c:	ldr	x0, [x29, #176]
    1a90:	add	x2, x0, #0x40
    1a94:	ldr	w1, [x29, #44]
    1a98:	ldr	w0, [x29, #248]
    1a9c:	add	w0, w1, w0
    1aa0:	mov	w1, w0
    1aa4:	mov	x0, x2
    1aa8:	bl	174 <gomp_simple_barrier_reinit>
    1aac:	ldr	w1, [x29, #300]
    1ab0:	ldr	w0, [x29, #44]
    1ab4:	cmp	w1, w0
    1ab8:	b.eq	2078 <gomp_team_start+0x15a8>  // b.none
    1abc:	ldr	w1, [x29, #44]
    1ac0:	ldr	w0, [x29, #248]
    1ac4:	add	w0, w1, w0
    1ac8:	ldr	w1, [x29, #292]
    1acc:	cmp	w1, w0
    1ad0:	cset	w0, cc  // cc = lo, ul, last
    1ad4:	and	w0, w0, #0xff
    1ad8:	and	x0, x0, #0xff
    1adc:	cmp	x0, #0x0
    1ae0:	b.eq	1b38 <gomp_team_start+0x1068>  // b.none
    1ae4:	ldr	w1, [x29, #44]
    1ae8:	ldr	w0, [x29, #248]
    1aec:	add	w0, w1, w0
    1af0:	mov	w1, w0
    1af4:	ldr	w0, [x29, #292]
    1af8:	sub	x0, x1, x0
    1afc:	str	x0, [x29, #208]
    1b00:	ldr	w0, [x29, #292]
    1b04:	cmp	w0, #0x0
    1b08:	b.ne	1b18 <gomp_team_start+0x1048>  // b.any
    1b0c:	ldr	x0, [x29, #208]
    1b10:	sub	x0, x0, #0x1
    1b14:	str	x0, [x29, #208]
    1b18:	ldr	x1, [x29, #208]
    1b1c:	adrp	x0, 0 <gomp_managed_threads>
    1b20:	add	x0, x0, #0x0
    1b24:	ldxr	x2, [x0]
    1b28:	add	x2, x2, x1
    1b2c:	stlxr	w3, x2, [x0]
    1b30:	cbnz	w3, 1b24 <gomp_team_start+0x1054>
    1b34:	dmb	ish
    1b38:	adrp	x0, 40 <gomp_sem_init>
    1b3c:	add	x0, x0, #0x0
    1b40:	str	x0, [x29, #280]
    1b44:	adrp	x0, 0 <gomp_places_list>
    1b48:	add	x0, x0, #0x0
    1b4c:	ldr	x0, [x0]
    1b50:	cmp	x0, #0x0
    1b54:	cset	w0, ne  // ne = any
    1b58:	and	w0, w0, #0xff
    1b5c:	and	x0, x0, #0xff
    1b60:	cmp	x0, #0x0
    1b64:	b.eq	1ba0 <gomp_team_start+0x10d0>  // b.none
    1b68:	add	x0, x29, #0x50
    1b6c:	bl	0 <pthread_attr_init>
    1b70:	add	x0, x29, #0x48
    1b74:	mov	x1, x0
    1b78:	adrp	x0, 40 <gomp_sem_init>
    1b7c:	add	x0, x0, #0x0
    1b80:	bl	0 <pthread_attr_getstacksize>
    1b84:	cmp	w0, #0x0
    1b88:	b.ne	1b98 <gomp_team_start+0x10c8>  // b.any
    1b8c:	ldr	x1, [x29, #72]
    1b90:	add	x0, x29, #0x50
    1b94:	bl	0 <pthread_attr_setstacksize>
    1b98:	add	x0, x29, #0x50
    1b9c:	str	x0, [x29, #280]
    1ba0:	ldr	w1, [x29, #44]
    1ba4:	ldr	w0, [x29, #300]
    1ba8:	sub	w0, w1, w0
    1bac:	mov	w1, w0
    1bb0:	mov	x0, x1
    1bb4:	lsl	x0, x0, #3
    1bb8:	sub	x0, x0, x1
    1bbc:	lsl	x0, x0, #4
    1bc0:	add	x0, x0, #0xf
    1bc4:	lsr	x0, x0, #4
    1bc8:	lsl	x0, x0, #4
    1bcc:	sub	sp, sp, x0
    1bd0:	mov	x0, sp
    1bd4:	add	x0, x0, #0xf
    1bd8:	lsr	x0, x0, #4
    1bdc:	lsl	x0, x0, #4
    1be0:	str	x0, [x29, #312]
    1be4:	b	203c <gomp_team_start+0x156c>
    1be8:	ldr	x0, [x29, #192]
    1bec:	ldr	w1, [x0, #52]
    1bf0:	ldr	x0, [x29, #312]
    1bf4:	str	w1, [x0, #52]
    1bf8:	ldr	x0, [x29, #192]
    1bfc:	ldr	w1, [x0, #56]
    1c00:	ldr	x0, [x29, #312]
    1c04:	str	w1, [x0, #56]
    1c08:	ldr	x0, [x29, #312]
    1c0c:	str	wzr, [x0, #96]
    1c10:	adrp	x0, 0 <gomp_places_list>
    1c14:	add	x0, x0, #0x0
    1c18:	ldr	x0, [x0]
    1c1c:	cmp	x0, #0x0
    1c20:	cset	w0, ne  // ne = any
    1c24:	and	w0, w0, #0xff
    1c28:	and	x0, x0, #0xff
    1c2c:	cmp	x0, #0x0
    1c30:	b.eq	1e84 <gomp_team_start+0x13b4>  // b.none
    1c34:	ldrb	w0, [x29, #271]
    1c38:	cmp	w0, #0x4
    1c3c:	b.eq	1cec <gomp_team_start+0x121c>  // b.none
    1c40:	cmp	w0, #0x4
    1c44:	b.gt	1e3c <gomp_team_start+0x136c>
    1c48:	cmp	w0, #0x3
    1c4c:	b.eq	1c68 <gomp_team_start+0x1198>  // b.none
    1c50:	cmp	w0, #0x3
    1c54:	b.gt	1e3c <gomp_team_start+0x136c>
    1c58:	cmp	w0, #0x1
    1c5c:	b.eq	1c68 <gomp_team_start+0x1198>  // b.none
    1c60:	cmp	w0, #0x2
    1c64:	b	1e3c <gomp_team_start+0x136c>
    1c68:	ldr	w1, [x29, #252]
    1c6c:	ldr	w0, [x29, #264]
    1c70:	cmp	w1, w0
    1c74:	b.ne	1cdc <gomp_team_start+0x120c>  // b.any
    1c78:	ldr	w0, [x29, #256]
    1c7c:	add	w0, w0, #0x1
    1c80:	str	w0, [x29, #256]
    1c84:	ldr	x0, [x29, #32]
    1c88:	ldr	w1, [x0, #44]
    1c8c:	ldr	x0, [x29, #32]
    1c90:	ldr	w0, [x0, #48]
    1c94:	add	w0, w1, w0
    1c98:	ldr	w1, [x29, #256]
    1c9c:	cmp	w1, w0
    1ca0:	b.ne	1cb0 <gomp_team_start+0x11e0>  // b.any
    1ca4:	ldr	x0, [x29, #32]
    1ca8:	ldr	w0, [x0, #44]
    1cac:	str	w0, [x29, #256]
    1cb0:	mov	w0, #0x1                   	// #1
    1cb4:	str	w0, [x29, #252]
    1cb8:	ldr	w1, [x29, #44]
    1cbc:	ldr	w0, [x29, #260]
    1cc0:	sub	w0, w1, w0
    1cc4:	ldr	w1, [x29, #300]
    1cc8:	cmp	w1, w0
    1ccc:	b.ne	1e38 <gomp_team_start+0x1368>  // b.any
    1cd0:	mov	w0, #0x1                   	// #1
    1cd4:	str	w0, [x29, #264]
    1cd8:	b	1e38 <gomp_team_start+0x1368>
    1cdc:	ldr	w0, [x29, #252]
    1ce0:	add	w0, w0, #0x1
    1ce4:	str	w0, [x29, #252]
    1ce8:	b	1e38 <gomp_team_start+0x1368>
    1cec:	ldr	w0, [x29, #252]
    1cf0:	cmp	w0, #0x0
    1cf4:	b.ne	1d9c <gomp_team_start+0x12cc>  // b.any
    1cf8:	ldr	w1, [x29, #256]
    1cfc:	ldr	w0, [x29, #260]
    1d00:	cmp	w1, w0
    1d04:	b.cs	1d20 <gomp_team_start+0x1250>  // b.hs, b.nlast
    1d08:	ldr	w1, [x29, #264]
    1d0c:	ldr	w0, [x29, #256]
    1d10:	add	w0, w1, w0
    1d14:	add	w0, w0, #0x1
    1d18:	str	w0, [x29, #256]
    1d1c:	b	1d30 <gomp_team_start+0x1260>
    1d20:	ldr	w1, [x29, #256]
    1d24:	ldr	w0, [x29, #264]
    1d28:	add	w0, w1, w0
    1d2c:	str	w0, [x29, #256]
    1d30:	ldr	x0, [x29, #32]
    1d34:	ldr	w1, [x0, #44]
    1d38:	ldr	x0, [x29, #32]
    1d3c:	ldr	w0, [x0, #48]
    1d40:	add	w0, w1, w0
    1d44:	ldr	w1, [x29, #256]
    1d48:	cmp	w1, w0
    1d4c:	b.ne	1d5c <gomp_team_start+0x128c>  // b.any
    1d50:	ldr	x0, [x29, #32]
    1d54:	ldr	w0, [x0, #44]
    1d58:	str	w0, [x29, #256]
    1d5c:	ldr	x0, [x29, #312]
    1d60:	ldr	w1, [x29, #256]
    1d64:	str	w1, [x0, #52]
    1d68:	ldr	w1, [x29, #256]
    1d6c:	ldr	w0, [x29, #260]
    1d70:	cmp	w1, w0
    1d74:	b.cs	1d8c <gomp_team_start+0x12bc>  // b.hs, b.nlast
    1d78:	ldr	w0, [x29, #264]
    1d7c:	add	w1, w0, #0x1
    1d80:	ldr	x0, [x29, #312]
    1d84:	str	w1, [x0, #56]
    1d88:	b	1e3c <gomp_team_start+0x136c>
    1d8c:	ldr	x0, [x29, #312]
    1d90:	ldr	w1, [x29, #264]
    1d94:	str	w1, [x0, #56]
    1d98:	b	1e3c <gomp_team_start+0x136c>
    1d9c:	ldr	w1, [x29, #252]
    1da0:	ldr	w0, [x29, #264]
    1da4:	cmp	w1, w0
    1da8:	b.ne	1e10 <gomp_team_start+0x1340>  // b.any
    1dac:	ldr	w0, [x29, #256]
    1db0:	add	w0, w0, #0x1
    1db4:	str	w0, [x29, #256]
    1db8:	ldr	x0, [x29, #32]
    1dbc:	ldr	w1, [x0, #44]
    1dc0:	ldr	x0, [x29, #32]
    1dc4:	ldr	w0, [x0, #48]
    1dc8:	add	w0, w1, w0
    1dcc:	ldr	w1, [x29, #256]
    1dd0:	cmp	w1, w0
    1dd4:	b.ne	1de4 <gomp_team_start+0x1314>  // b.any
    1dd8:	ldr	x0, [x29, #32]
    1ddc:	ldr	w0, [x0, #44]
    1de0:	str	w0, [x29, #256]
    1de4:	mov	w0, #0x1                   	// #1
    1de8:	str	w0, [x29, #252]
    1dec:	ldr	w1, [x29, #44]
    1df0:	ldr	w0, [x29, #260]
    1df4:	sub	w0, w1, w0
    1df8:	ldr	w1, [x29, #300]
    1dfc:	cmp	w1, w0
    1e00:	b.ne	1e1c <gomp_team_start+0x134c>  // b.any
    1e04:	mov	w0, #0x1                   	// #1
    1e08:	str	w0, [x29, #264]
    1e0c:	b	1e1c <gomp_team_start+0x134c>
    1e10:	ldr	w0, [x29, #252]
    1e14:	add	w0, w0, #0x1
    1e18:	str	w0, [x29, #252]
    1e1c:	ldr	x0, [x29, #312]
    1e20:	ldr	w1, [x29, #256]
    1e24:	str	w1, [x0, #52]
    1e28:	ldr	x0, [x29, #312]
    1e2c:	mov	w1, #0x1                   	// #1
    1e30:	str	w1, [x0, #56]
    1e34:	b	1e3c <gomp_team_start+0x136c>
    1e38:	nop
    1e3c:	ldr	w0, [x29, #256]
    1e40:	add	w1, w0, #0x1
    1e44:	ldr	x0, [x29, #312]
    1e48:	str	w1, [x0, #96]
    1e4c:	ldr	x0, [x29, #240]
    1e50:	cmp	x0, #0x0
    1e54:	b.eq	1e78 <gomp_team_start+0x13a8>  // b.none
    1e58:	ldr	x0, [x29, #176]
    1e5c:	ldr	x1, [x0]
    1e60:	ldr	w0, [x29, #300]
    1e64:	lsl	x0, x0, #3
    1e68:	add	x0, x1, x0
    1e6c:	ldr	x0, [x0]
    1e70:	cmp	x0, #0x0
    1e74:	b.ne	202c <gomp_team_start+0x155c>  // b.any
    1e78:	ldr	w1, [x29, #256]
    1e7c:	ldr	x0, [x29, #280]
    1e80:	bl	0 <gomp_init_thread_affinity>
    1e84:	ldr	x0, [x29, #312]
    1e88:	ldr	x1, [x29, #56]
    1e8c:	str	x1, [x0]
    1e90:	ldr	x0, [x29, #312]
    1e94:	ldr	x1, [x29, #48]
    1e98:	str	x1, [x0, #8]
    1e9c:	ldr	x0, [x29, #312]
    1ea0:	ldr	x1, [x29, #32]
    1ea4:	str	x1, [x0, #16]
    1ea8:	ldr	x0, [x29, #32]
    1eac:	add	x1, x0, #0x100
    1eb0:	ldr	x0, [x29, #312]
    1eb4:	str	x1, [x0, #24]
    1eb8:	ldr	x0, [x29, #312]
    1ebc:	str	xzr, [x0, #32]
    1ec0:	ldr	x0, [x29, #312]
    1ec4:	ldr	w1, [x29, #300]
    1ec8:	str	w1, [x0, #40]
    1ecc:	ldr	x0, [x29, #32]
    1ed0:	ldr	w0, [x0, #36]
    1ed4:	add	w1, w0, #0x1
    1ed8:	ldr	x0, [x29, #312]
    1edc:	str	w1, [x0, #44]
    1ee0:	ldr	x0, [x29, #192]
    1ee4:	ldr	w1, [x0, #48]
    1ee8:	ldr	x0, [x29, #312]
    1eec:	str	w1, [x0, #48]
    1ef0:	ldr	x0, [x29, #312]
    1ef4:	str	xzr, [x0, #64]
    1ef8:	ldr	x0, [x29, #312]
    1efc:	str	xzr, [x0, #72]
    1f00:	ldr	w1, [x29, #300]
    1f04:	mov	x0, x1
    1f08:	lsl	x0, x0, #1
    1f0c:	add	x0, x0, x1
    1f10:	lsl	x0, x0, #2
    1f14:	add	x0, x0, x1
    1f18:	lsl	x0, x0, #4
    1f1c:	add	x0, x0, #0x540
    1f20:	ldr	x1, [x29, #32]
    1f24:	add	x1, x1, x0
    1f28:	ldr	x0, [x29, #312]
    1f2c:	str	x1, [x0, #80]
    1f30:	ldr	x0, [x29, #312]
    1f34:	ldr	x0, [x0, #80]
    1f38:	ldr	x2, [x29, #160]
    1f3c:	ldr	x1, [x29, #168]
    1f40:	bl	0 <gomp_init_task>
    1f44:	ldr	x2, [x29, #32]
    1f48:	ldr	w1, [x29, #300]
    1f4c:	mov	x0, x1
    1f50:	lsl	x0, x0, #1
    1f54:	add	x0, x0, x1
    1f58:	lsl	x0, x0, #2
    1f5c:	add	x0, x0, x1
    1f60:	lsl	x0, x0, #4
    1f64:	add	x0, x2, x0
    1f68:	ldr	x1, [x29, #272]
    1f6c:	str	x1, [x0, #1488]
    1f70:	ldr	x2, [x29, #32]
    1f74:	ldr	w1, [x29, #300]
    1f78:	mov	x0, x1
    1f7c:	lsl	x0, x0, #1
    1f80:	add	x0, x0, x1
    1f84:	lsl	x0, x0, #2
    1f88:	add	x0, x0, x1
    1f8c:	lsl	x0, x0, #4
    1f90:	add	x0, x2, x0
    1f94:	ldrb	w1, [x29, #270]
    1f98:	strb	w1, [x0, #1514]
    1f9c:	ldr	x0, [x29, #312]
    1fa0:	ldr	x0, [x0, #80]
    1fa4:	ldr	x1, [x29, #24]
    1fa8:	str	x1, [x0, #40]
    1fac:	ldr	x0, [x29, #312]
    1fb0:	ldr	x1, [x29, #176]
    1fb4:	str	x1, [x0, #88]
    1fb8:	ldr	x0, [x29, #312]
    1fbc:	ldrb	w1, [x29, #191]
    1fc0:	strb	w1, [x0, #100]
    1fc4:	add	x0, x29, #0x50
    1fc8:	mov	x1, x0
    1fcc:	ldr	x0, [x29, #280]
    1fd0:	bl	430 <gomp_adjust_thread_attr>
    1fd4:	str	x0, [x29, #280]
    1fd8:	ldr	x0, [x29, #312]
    1fdc:	add	x4, x0, #0x68
    1fe0:	ldr	x3, [x29, #312]
    1fe4:	adrp	x0, 0 <priority_queue_init>
    1fe8:	add	x2, x0, #0x0
    1fec:	ldr	x1, [x29, #280]
    1ff0:	mov	x0, x4
    1ff4:	bl	0 <pthread_create>
    1ff8:	str	w0, [x29, #156]
    1ffc:	ldr	x0, [x29, #312]
    2000:	add	x0, x0, #0x70
    2004:	str	x0, [x29, #312]
    2008:	ldr	w0, [x29, #156]
    200c:	cmp	w0, #0x0
    2010:	b.eq	2030 <gomp_team_start+0x1560>  // b.none
    2014:	ldr	w0, [x29, #156]
    2018:	bl	0 <strerror>
    201c:	mov	x1, x0
    2020:	adrp	x0, 0 <priority_queue_init>
    2024:	add	x0, x0, #0x0
    2028:	bl	0 <gomp_fatal>
    202c:	nop
    2030:	ldr	w0, [x29, #300]
    2034:	add	w0, w0, #0x1
    2038:	str	w0, [x29, #300]
    203c:	ldr	w1, [x29, #300]
    2040:	ldr	w0, [x29, #44]
    2044:	cmp	w1, w0
    2048:	b.cc	1be8 <gomp_team_start+0x1118>  // b.lo, b.ul, b.last
    204c:	add	x0, x29, #0x50
    2050:	ldr	x1, [x29, #280]
    2054:	cmp	x1, x0
    2058:	cset	w0, eq  // eq = none
    205c:	and	w0, w0, #0xff
    2060:	and	x0, x0, #0xff
    2064:	cmp	x0, #0x0
    2068:	b.eq	2080 <gomp_team_start+0x15b0>  // b.none
    206c:	add	x0, x29, #0x50
    2070:	bl	0 <pthread_attr_destroy>
    2074:	b	2084 <gomp_team_start+0x15b4>
    2078:	nop
    207c:	b	2084 <gomp_team_start+0x15b4>
    2080:	nop
    2084:	ldrb	w0, [x29, #191]
    2088:	cmp	w0, #0x0
    208c:	b.eq	20a0 <gomp_team_start+0x15d0>  // b.none
    2090:	ldr	x0, [x29, #32]
    2094:	add	x0, x0, #0x80
    2098:	bl	0 <gomp_barrier_wait>
    209c:	b	20ac <gomp_team_start+0x15dc>
    20a0:	ldr	x0, [x29, #176]
    20a4:	add	x0, x0, #0x40
    20a8:	bl	1bc <gomp_simple_barrier_wait>
    20ac:	ldr	w1, [x29, #44]
    20b0:	ldr	w0, [x29, #292]
    20b4:	cmp	w1, w0
    20b8:	cset	w0, cc  // cc = lo, ul, last
    20bc:	and	w0, w0, #0xff
    20c0:	and	x0, x0, #0xff
    20c4:	cmp	x0, #0x0
    20c8:	b.ne	20d8 <gomp_team_start+0x1608>  // b.any
    20cc:	ldr	w0, [x29, #248]
    20d0:	cmp	x0, #0x0
    20d4:	b.eq	2134 <gomp_team_start+0x1664>  // b.none
    20d8:	ldr	w1, [x29, #44]
    20dc:	ldr	w0, [x29, #292]
    20e0:	sub	x0, x1, x0
    20e4:	str	x0, [x29, #200]
    20e8:	ldr	w0, [x29, #248]
    20ec:	cmp	w0, #0x0
    20f0:	b.eq	2104 <gomp_team_start+0x1634>  // b.none
    20f4:	ldr	w0, [x29, #248]
    20f8:	neg	w0, w0
    20fc:	mov	w0, w0
    2100:	str	x0, [x29, #200]
    2104:	ldr	x0, [x29, #176]
    2108:	add	x0, x0, #0x40
    210c:	ldr	w1, [x29, #44]
    2110:	bl	174 <gomp_simple_barrier_reinit>
    2114:	ldr	x1, [x29, #200]
    2118:	adrp	x0, 0 <gomp_managed_threads>
    211c:	add	x0, x0, #0x0
    2120:	ldxr	x2, [x0]
    2124:	add	x2, x2, x1
    2128:	stlxr	w3, x2, [x0]
    212c:	cbnz	w3, 2120 <gomp_team_start+0x1650>
    2130:	dmb	ish
    2134:	adrp	x0, 0 <gomp_display_affinity_var>
    2138:	add	x0, x0, #0x0
    213c:	ldrb	w0, [x0]
    2140:	and	x0, x0, #0xff
    2144:	cmp	x0, #0x0
    2148:	b.eq	22bc <gomp_team_start+0x17ec>  // b.none
    214c:	ldrb	w0, [x29, #191]
    2150:	cmp	w0, #0x0
    2154:	b.ne	2174 <gomp_team_start+0x16a4>  // b.any
    2158:	ldr	w1, [x29, #44]
    215c:	ldr	w0, [x29, #292]
    2160:	cmp	w1, w0
    2164:	b.ne	2174 <gomp_team_start+0x16a4>  // b.any
    2168:	ldrb	w0, [x29, #239]
    216c:	cmp	w0, #0x0
    2170:	b.eq	22bc <gomp_team_start+0x17ec>  // b.none
    2174:	bl	320 <gomp_thread_self>
    2178:	mov	x3, x0
    217c:	ldr	x0, [x29, #192]
    2180:	add	x1, x0, #0x10
    2184:	ldr	x0, [x29, #192]
    2188:	ldr	w0, [x0, #92]
    218c:	mov	w2, w0
    2190:	mov	x0, x3
    2194:	bl	0 <gomp_display_affinity_thread>
    2198:	ldrb	w0, [x29, #191]
    219c:	cmp	w0, #0x0
    21a0:	b.eq	222c <gomp_team_start+0x175c>  // b.none
    21a4:	ldr	w0, [x29, #44]
    21a8:	sub	w0, w0, #0x1
    21ac:	mov	w1, w0
    21b0:	mov	x0, x1
    21b4:	lsl	x0, x0, #3
    21b8:	sub	x0, x0, x1
    21bc:	lsl	x0, x0, #4
    21c0:	neg	x0, x0
    21c4:	ldr	x1, [x29, #312]
    21c8:	add	x0, x1, x0
    21cc:	str	x0, [x29, #312]
    21d0:	mov	w0, #0x1                   	// #1
    21d4:	str	w0, [x29, #300]
    21d8:	b	2218 <gomp_team_start+0x1748>
    21dc:	ldr	x0, [x29, #312]
    21e0:	ldr	x3, [x0, #104]
    21e4:	ldr	x0, [x29, #312]
    21e8:	add	x1, x0, #0x10
    21ec:	ldr	x0, [x29, #312]
    21f0:	ldr	w0, [x0, #96]
    21f4:	mov	w2, w0
    21f8:	mov	x0, x3
    21fc:	bl	0 <gomp_display_affinity_thread>
    2200:	ldr	x0, [x29, #312]
    2204:	add	x0, x0, #0x70
    2208:	str	x0, [x29, #312]
    220c:	ldr	w0, [x29, #300]
    2210:	add	w0, w0, #0x1
    2214:	str	w0, [x29, #300]
    2218:	ldr	w1, [x29, #300]
    221c:	ldr	w0, [x29, #44]
    2220:	cmp	w1, w0
    2224:	b.cc	21dc <gomp_team_start+0x170c>  // b.lo, b.ul, b.last
    2228:	b	22bc <gomp_team_start+0x17ec>
    222c:	mov	w0, #0x1                   	// #1
    2230:	str	w0, [x29, #300]
    2234:	b	22ac <gomp_team_start+0x17dc>
    2238:	ldr	x0, [x29, #176]
    223c:	ldr	x1, [x0]
    2240:	ldr	w0, [x29, #300]
    2244:	lsl	x0, x0, #3
    2248:	add	x0, x1, x0
    224c:	ldr	x0, [x0]
    2250:	bl	334 <gomp_thread_to_pthread_t>
    2254:	str	x0, [x29, #144]
    2258:	ldr	x0, [x29, #176]
    225c:	ldr	x1, [x0]
    2260:	ldr	w0, [x29, #300]
    2264:	lsl	x0, x0, #3
    2268:	add	x0, x1, x0
    226c:	ldr	x0, [x0]
    2270:	add	x3, x0, #0x10
    2274:	ldr	x0, [x29, #176]
    2278:	ldr	x1, [x0]
    227c:	ldr	w0, [x29, #300]
    2280:	lsl	x0, x0, #3
    2284:	add	x0, x1, x0
    2288:	ldr	x0, [x0]
    228c:	ldr	w0, [x0, #92]
    2290:	mov	w2, w0
    2294:	mov	x1, x3
    2298:	ldr	x0, [x29, #144]
    229c:	bl	0 <gomp_display_affinity_thread>
    22a0:	ldr	w0, [x29, #300]
    22a4:	add	w0, w0, #0x1
    22a8:	str	w0, [x29, #300]
    22ac:	ldr	w1, [x29, #300]
    22b0:	ldr	w0, [x29, #44]
    22b4:	cmp	w1, w0
    22b8:	b.cc	2238 <gomp_team_start+0x1768>  // b.lo, b.ul, b.last
    22bc:	ldr	x0, [x29, #240]
    22c0:	cmp	x0, #0x0
    22c4:	cset	w0, ne  // ne = any
    22c8:	and	w0, w0, #0xff
    22cc:	and	x0, x0, #0xff
    22d0:	cmp	x0, #0x0
    22d4:	b.eq	22f8 <gomp_team_start+0x1828>  // b.none
    22d8:	ldr	x0, [x29, #32]
    22dc:	ldr	w0, [x0, #48]
    22e0:	cmp	w0, #0x40
    22e4:	b.ls	22f8 <gomp_team_start+0x1828>  // b.plast
    22e8:	ldr	x0, [x29, #240]
    22ec:	bl	0 <free>
    22f0:	b	22f8 <gomp_team_start+0x1828>
    22f4:	nop
    22f8:	mov	sp, x29
    22fc:	ldp	x29, x30, [sp], #320
    2300:	ret

0000000000002304 <gomp_team_end>:
    2304:	stp	x29, x30, [sp, #-80]!
    2308:	mov	x29, sp
    230c:	bl	2cc <gomp_thread>
    2310:	str	x0, [sp, #56]
    2314:	ldr	x0, [sp, #56]
    2318:	ldr	x0, [x0, #16]
    231c:	str	x0, [sp, #48]
    2320:	ldr	x0, [sp, #48]
    2324:	add	x0, x0, #0x80
    2328:	bl	0 <gomp_team_barrier_wait_final>
    232c:	ldr	x0, [sp, #48]
    2330:	ldr	w0, [x0, #1336]
    2334:	sxtw	x0, w0
    2338:	cmp	x0, #0x0
    233c:	b.eq	2398 <gomp_team_end+0x94>  // b.none
    2340:	ldr	x0, [sp, #48]
    2344:	ldr	x0, [x0, #88]
    2348:	str	x0, [sp, #72]
    234c:	ldr	x0, [sp, #72]
    2350:	add	x0, x0, #0x50
    2354:	bl	1fc <gomp_ptrlock_get>
    2358:	str	x0, [sp, #40]
    235c:	ldr	x0, [sp, #40]
    2360:	cmp	x0, #0x0
    2364:	b.ne	2378 <gomp_team_end+0x74>  // b.any
    2368:	ldr	x0, [sp, #72]
    236c:	add	x0, x0, #0x50
    2370:	ldr	x1, [sp, #72]
    2374:	bl	284 <gomp_ptrlock_set>
    2378:	ldr	x0, [sp, #72]
    237c:	bl	0 <gomp_fini_work_share>
    2380:	ldr	x0, [sp, #40]
    2384:	str	x0, [sp, #72]
    2388:	ldr	x0, [sp, #72]
    238c:	cmp	x0, #0x0
    2390:	b.ne	234c <gomp_team_end+0x48>  // b.any
    2394:	b	23a4 <gomp_team_end+0xa0>
    2398:	ldr	x0, [sp, #56]
    239c:	ldr	x0, [x0, #24]
    23a0:	bl	0 <gomp_fini_work_share>
    23a4:	bl	0 <gomp_end_task>
    23a8:	ldr	x0, [sp, #56]
    23ac:	add	x2, x0, #0x10
    23b0:	ldr	x0, [sp, #48]
    23b4:	add	x1, x0, #0x8
    23b8:	mov	x0, x2
    23bc:	ldp	x2, x3, [x1]
    23c0:	stp	x2, x3, [x0]
    23c4:	ldp	x2, x3, [x1, #16]
    23c8:	stp	x2, x3, [x0, #16]
    23cc:	ldp	x2, x3, [x1, #32]
    23d0:	stp	x2, x3, [x0, #32]
    23d4:	ldp	x2, x3, [x1, #48]
    23d8:	stp	x2, x3, [x0, #48]
    23dc:	ldr	x0, [sp, #56]
    23e0:	ldr	w0, [x0, #44]
    23e4:	cmp	w0, #0x0
    23e8:	cset	w0, ne  // ne = any
    23ec:	and	w0, w0, #0xff
    23f0:	and	x0, x0, #0xff
    23f4:	cmp	x0, #0x0
    23f8:	b.eq	243c <gomp_team_end+0x138>  // b.none
    23fc:	ldr	x0, [sp, #48]
    2400:	ldr	w0, [x0]
    2404:	mov	w0, w0
    2408:	mov	x1, #0x1                   	// #1
    240c:	sub	x0, x1, x0
    2410:	mov	x1, x0
    2414:	adrp	x0, 0 <gomp_managed_threads>
    2418:	add	x0, x0, #0x0
    241c:	ldxr	x2, [x0]
    2420:	add	x2, x2, x1
    2424:	stlxr	w3, x2, [x0]
    2428:	cbnz	w3, 241c <gomp_team_end+0x118>
    242c:	dmb	ish
    2430:	ldr	x0, [sp, #48]
    2434:	add	x0, x0, #0x80
    2438:	bl	0 <gomp_barrier_wait>
    243c:	ldr	x0, [sp, #48]
    2440:	ldr	x0, [x0, #312]
    2444:	cmp	x0, #0x0
    2448:	cset	w0, ne  // ne = any
    244c:	and	w0, w0, #0xff
    2450:	and	x0, x0, #0xff
    2454:	cmp	x0, #0x0
    2458:	b.eq	2490 <gomp_team_end+0x18c>  // b.none
    245c:	ldr	x0, [sp, #48]
    2460:	ldr	x0, [x0, #312]
    2464:	str	x0, [sp, #64]
    2468:	ldr	x0, [sp, #64]
    246c:	ldr	x0, [x0, #56]
    2470:	str	x0, [sp, #32]
    2474:	ldr	x0, [sp, #64]
    2478:	bl	0 <free>
    247c:	ldr	x0, [sp, #32]
    2480:	str	x0, [sp, #64]
    2484:	ldr	x0, [sp, #64]
    2488:	cmp	x0, #0x0
    248c:	b.ne	2468 <gomp_team_end+0x164>  // b.any
    2490:	ldr	x0, [sp, #48]
    2494:	add	x0, x0, #0x48
    2498:	bl	64 <gomp_sem_destroy>
    249c:	ldr	x0, [sp, #56]
    24a0:	ldr	x0, [x0, #16]
    24a4:	cmp	x0, #0x0
    24a8:	cset	w0, ne  // ne = any
    24ac:	and	w0, w0, #0xff
    24b0:	and	x0, x0, #0xff
    24b4:	cmp	x0, #0x0
    24b8:	b.ne	24dc <gomp_team_end+0x1d8>  // b.any
    24bc:	ldr	x0, [sp, #48]
    24c0:	ldr	w0, [x0]
    24c4:	cmp	w0, #0x1
    24c8:	cset	w0, eq  // eq = none
    24cc:	and	w0, w0, #0xff
    24d0:	and	x0, x0, #0xff
    24d4:	cmp	x0, #0x0
    24d8:	b.eq	24e8 <gomp_team_end+0x1e4>  // b.none
    24dc:	ldr	x0, [sp, #48]
    24e0:	bl	8a0 <free_team>
    24e4:	b	2528 <gomp_team_end+0x224>
    24e8:	ldr	x0, [sp, #56]
    24ec:	ldr	x0, [x0, #96]
    24f0:	str	x0, [sp, #24]
    24f4:	ldr	x0, [sp, #24]
    24f8:	ldr	x0, [x0, #16]
    24fc:	cmp	x0, #0x0
    2500:	b.eq	2510 <gomp_team_end+0x20c>  // b.none
    2504:	ldr	x0, [sp, #24]
    2508:	ldr	x0, [x0, #16]
    250c:	bl	8a0 <free_team>
    2510:	ldr	x0, [sp, #24]
    2514:	ldr	x1, [sp, #48]
    2518:	str	x1, [x0, #16]
    251c:	ldr	x0, [sp, #24]
    2520:	bl	41c <gomp_release_thread_pool>
    2524:	nop
    2528:	nop
    252c:	ldp	x29, x30, [sp], #80
    2530:	ret

0000000000002534 <initialize_team>:
    2534:	stp	x29, x30, [sp, #-16]!
    2538:	mov	x29, sp
    253c:	adrp	x0, 938 <gomp_free_thread>
    2540:	add	x1, x0, #0x0
    2544:	adrp	x0, 4 <priority_queue_init+0x4>
    2548:	add	x0, x0, #0x0
    254c:	bl	0 <pthread_key_create>
    2550:	cmp	w0, #0x0
    2554:	b.eq	2564 <initialize_team+0x30>  // b.none
    2558:	adrp	x0, 0 <priority_queue_init>
    255c:	add	x0, x0, #0x0
    2560:	bl	0 <gomp_fatal>
    2564:	nop
    2568:	ldp	x29, x30, [sp], #16
    256c:	ret

0000000000002570 <team_destructor>:
    2570:	stp	x29, x30, [sp, #-16]!
    2574:	mov	x29, sp
    2578:	adrp	x0, 4 <priority_queue_init+0x4>
    257c:	add	x0, x0, #0x0
    2580:	ldr	w0, [x0]
    2584:	bl	0 <pthread_key_delete>
    2588:	nop
    258c:	ldp	x29, x30, [sp], #16
    2590:	ret

0000000000002594 <gomp_pause_pool_helper>:
    2594:	stp	x29, x30, [sp, #-48]!
    2598:	mov	x29, sp
    259c:	str	x0, [sp, #24]
    25a0:	bl	2cc <gomp_thread>
    25a4:	str	x0, [sp, #40]
    25a8:	ldr	x0, [sp, #24]
    25ac:	str	x0, [sp, #32]
    25b0:	ldr	x0, [sp, #32]
    25b4:	add	x0, x0, #0x40
    25b8:	bl	1dc <gomp_simple_barrier_wait_last>
    25bc:	ldr	x0, [sp, #40]
    25c0:	add	x0, x0, #0x58
    25c4:	bl	64 <gomp_sem_destroy>
    25c8:	ldr	x0, [sp, #40]
    25cc:	str	xzr, [x0, #96]
    25d0:	ldr	x0, [sp, #40]
    25d4:	str	xzr, [x0, #80]
    25d8:	mov	x0, #0x0                   	// #0
    25dc:	bl	0 <pthread_exit>

00000000000025e0 <gomp_pause_host>:
    25e0:	stp	x29, x30, [sp, #-80]!
    25e4:	mov	x29, sp
    25e8:	str	x19, [sp, #16]
    25ec:	bl	2cc <gomp_thread>
    25f0:	str	x0, [x29, #64]
    25f4:	ldr	x0, [x29, #64]
    25f8:	ldr	x0, [x0, #96]
    25fc:	str	x0, [x29, #56]
    2600:	ldr	x0, [x29, #64]
    2604:	ldr	w0, [x0, #44]
    2608:	cmp	w0, #0x0
    260c:	b.eq	2618 <gomp_pause_host+0x38>  // b.none
    2610:	mov	w0, #0xffffffff            	// #-1
    2614:	b	27c4 <gomp_pause_host+0x1e4>
    2618:	ldr	x0, [x29, #56]
    261c:	cmp	x0, #0x0
    2620:	b.eq	27c0 <gomp_pause_host+0x1e0>  // b.none
    2624:	ldr	x0, [x29, #56]
    2628:	ldr	w0, [x0, #12]
    262c:	cmp	w0, #0x0
    2630:	b.eq	2788 <gomp_pause_host+0x1a8>  // b.none
    2634:	ldr	x0, [x29, #56]
    2638:	ldr	w0, [x0, #12]
    263c:	mov	w0, w0
    2640:	lsl	x0, x0, #3
    2644:	add	x0, x0, #0xf
    2648:	lsr	x0, x0, #4
    264c:	lsl	x0, x0, #4
    2650:	sub	sp, sp, x0
    2654:	mov	x0, sp
    2658:	add	x0, x0, #0xf
    265c:	lsr	x0, x0, #4
    2660:	lsl	x0, x0, #4
    2664:	str	x0, [x29, #48]
    2668:	mov	w0, #0x1                   	// #1
    266c:	str	w0, [x29, #76]
    2670:	b	26d4 <gomp_pause_host+0xf4>
    2674:	ldr	x0, [x29, #56]
    2678:	ldr	x1, [x0]
    267c:	ldrsw	x0, [x29, #76]
    2680:	lsl	x0, x0, #3
    2684:	add	x0, x1, x0
    2688:	ldr	x0, [x0]
    268c:	str	x0, [x29, #40]
    2690:	ldr	x0, [x29, #40]
    2694:	adrp	x1, 0 <priority_queue_init>
    2698:	add	x1, x1, #0x0
    269c:	str	x1, [x0]
    26a0:	ldr	x0, [x29, #40]
    26a4:	ldr	x1, [x29, #56]
    26a8:	str	x1, [x0, #8]
    26ac:	ldrsw	x0, [x29, #76]
    26b0:	lsl	x0, x0, #3
    26b4:	ldr	x1, [x29, #48]
    26b8:	add	x19, x1, x0
    26bc:	ldr	x0, [x29, #40]
    26c0:	bl	334 <gomp_thread_to_pthread_t>
    26c4:	str	x0, [x19]
    26c8:	ldr	w0, [x29, #76]
    26cc:	add	w0, w0, #0x1
    26d0:	str	w0, [x29, #76]
    26d4:	ldr	x0, [x29, #56]
    26d8:	ldr	w1, [x0, #12]
    26dc:	ldr	w0, [x29, #76]
    26e0:	cmp	w1, w0
    26e4:	b.hi	2674 <gomp_pause_host+0x94>  // b.pmore
    26e8:	ldr	x0, [x29, #56]
    26ec:	add	x0, x0, #0x40
    26f0:	bl	1bc <gomp_simple_barrier_wait>
    26f4:	ldr	x0, [x29, #56]
    26f8:	add	x0, x0, #0x40
    26fc:	bl	1bc <gomp_simple_barrier_wait>
    2700:	ldr	x0, [x29, #56]
    2704:	add	x0, x0, #0x40
    2708:	bl	19c <gomp_simple_barrier_destroy>
    270c:	ldr	x0, [x29, #56]
    2710:	ldr	w0, [x0, #12]
    2714:	mov	w0, w0
    2718:	mov	x1, #0x1                   	// #1
    271c:	sub	x0, x1, x0
    2720:	mov	x1, x0
    2724:	adrp	x0, 0 <gomp_managed_threads>
    2728:	add	x0, x0, #0x0
    272c:	ldxr	x2, [x0]
    2730:	add	x2, x2, x1
    2734:	stlxr	w3, x2, [x0]
    2738:	cbnz	w3, 272c <gomp_pause_host+0x14c>
    273c:	dmb	ish
    2740:	mov	w0, #0x1                   	// #1
    2744:	str	w0, [x29, #76]
    2748:	b	2774 <gomp_pause_host+0x194>
    274c:	ldrsw	x0, [x29, #76]
    2750:	lsl	x0, x0, #3
    2754:	ldr	x1, [x29, #48]
    2758:	add	x0, x1, x0
    275c:	ldr	x0, [x0]
    2760:	mov	x1, #0x0                   	// #0
    2764:	bl	0 <pthread_join>
    2768:	ldr	w0, [x29, #76]
    276c:	add	w0, w0, #0x1
    2770:	str	w0, [x29, #76]
    2774:	ldr	x0, [x29, #56]
    2778:	ldr	w1, [x0, #12]
    277c:	ldr	w0, [x29, #76]
    2780:	cmp	w1, w0
    2784:	b.hi	274c <gomp_pause_host+0x16c>  // b.pmore
    2788:	ldr	x0, [x29, #56]
    278c:	ldr	x0, [x0, #16]
    2790:	cmp	x0, #0x0
    2794:	b.eq	27a4 <gomp_pause_host+0x1c4>  // b.none
    2798:	ldr	x0, [x29, #56]
    279c:	ldr	x0, [x0, #16]
    27a0:	bl	8a0 <free_team>
    27a4:	ldr	x0, [x29, #56]
    27a8:	ldr	x0, [x0]
    27ac:	bl	0 <free>
    27b0:	ldr	x0, [x29, #56]
    27b4:	bl	0 <free>
    27b8:	ldr	x0, [x29, #64]
    27bc:	str	xzr, [x0, #96]
    27c0:	mov	w0, #0x0                   	// #0
    27c4:	mov	sp, x29
    27c8:	ldr	x19, [sp, #16]
    27cc:	ldp	x29, x30, [sp], #80
    27d0:	ret

00000000000027d4 <gomp_new_icv>:
    27d4:	stp	x29, x30, [sp, #-32]!
    27d8:	mov	x29, sp
    27dc:	bl	2cc <gomp_thread>
    27e0:	str	x0, [sp, #24]
    27e4:	mov	x0, #0xd0                  	// #208
    27e8:	bl	0 <gomp_malloc>
    27ec:	str	x0, [sp, #16]
    27f0:	adrp	x0, 0 <gomp_global_icv>
    27f4:	add	x2, x0, #0x0
    27f8:	mov	x1, #0x0                   	// #0
    27fc:	ldr	x0, [sp, #16]
    2800:	bl	0 <gomp_init_task>
    2804:	ldr	x0, [sp, #24]
    2808:	ldr	x1, [sp, #16]
    280c:	str	x1, [x0, #80]
    2810:	adrp	x0, 4 <priority_queue_init+0x4>
    2814:	add	x0, x0, #0x0
    2818:	ldr	w0, [x0]
    281c:	ldr	x1, [sp, #24]
    2820:	bl	0 <pthread_setspecific>
    2824:	ldr	x0, [sp, #16]
    2828:	add	x0, x0, #0x90
    282c:	ldp	x29, x30, [sp], #32
    2830:	ret

work.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_init>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	str	wzr, [x0]
  10:	nop
  14:	add	sp, sp, #0x10
  18:	ret

000000000000001c <gomp_mutex_destroy>:
  1c:	sub	sp, sp, #0x10
  20:	str	x0, [sp, #8]
  24:	nop
  28:	add	sp, sp, #0x10
  2c:	ret

0000000000000030 <gomp_barrier_wait_start>:
  30:	sub	sp, sp, #0x20
  34:	str	x0, [sp, #8]
  38:	ldr	x0, [sp, #8]
  3c:	add	x0, x0, #0x4
  40:	ldar	w0, [x0]
  44:	str	w0, [sp, #28]
  48:	ldr	w0, [sp, #28]
  4c:	and	w0, w0, #0xfffffffc
  50:	str	w0, [sp, #28]
  54:	ldr	x0, [sp, #8]
  58:	add	x0, x0, #0x40
  5c:	ldaxr	w1, [x0]
  60:	sub	w1, w1, #0x1
  64:	stlxr	w2, w1, [x0]
  68:	cbnz	w2, 5c <gomp_barrier_wait_start+0x2c>
  6c:	cmp	w1, #0x0
  70:	b.ne	80 <gomp_barrier_wait_start+0x50>  // b.any
  74:	ldr	w0, [sp, #28]
  78:	orr	w0, w0, #0x1
  7c:	str	w0, [sp, #28]
  80:	ldr	w0, [sp, #28]
  84:	add	sp, sp, #0x20
  88:	ret

000000000000008c <gomp_barrier_wait_cancel_start>:
  8c:	stp	x29, x30, [sp, #-32]!
  90:	mov	x29, sp
  94:	str	x0, [sp, #24]
  98:	ldr	x0, [sp, #24]
  9c:	bl	30 <gomp_barrier_wait_start>
  a0:	ldp	x29, x30, [sp], #32
  a4:	ret

00000000000000a8 <gomp_barrier_last_thread>:
  a8:	sub	sp, sp, #0x10
  ac:	str	w0, [sp, #12]
  b0:	ldr	w0, [sp, #12]
  b4:	and	w0, w0, #0x1
  b8:	cmp	w0, #0x0
  bc:	cset	w0, ne  // ne = any
  c0:	and	w0, w0, #0xff
  c4:	add	sp, sp, #0x10
  c8:	ret

00000000000000cc <gomp_ptrlock_init>:
  cc:	sub	sp, sp, #0x10
  d0:	str	x0, [sp, #8]
  d4:	str	x1, [sp]
  d8:	ldr	x0, [sp, #8]
  dc:	ldr	x1, [sp]
  e0:	str	x1, [x0]
  e4:	nop
  e8:	add	sp, sp, #0x10
  ec:	ret

00000000000000f0 <gomp_ptrlock_get>:
  f0:	stp	x29, x30, [sp, #-48]!
  f4:	mov	x29, sp
  f8:	str	x0, [sp, #24]
  fc:	ldr	x0, [sp, #24]
 100:	ldar	x0, [x0]
 104:	str	x0, [sp, #40]
 108:	ldr	x0, [sp, #40]
 10c:	cmp	x0, #0x2
 110:	b.ls	11c <gomp_ptrlock_get+0x2c>  // b.plast
 114:	ldr	x0, [sp, #40]
 118:	b	170 <gomp_ptrlock_get+0x80>
 11c:	str	xzr, [sp, #32]
 120:	ldr	x1, [sp, #24]
 124:	add	x0, sp, #0x20
 128:	ldr	x3, [x0]
 12c:	mov	x4, #0x1                   	// #1
 130:	ldaxr	x2, [x1]
 134:	cmp	x2, x3
 138:	b.ne	144 <gomp_ptrlock_get+0x54>  // b.any
 13c:	stxr	w5, x4, [x1]
 140:	cbnz	w5, 130 <gomp_ptrlock_get+0x40>
 144:	cset	w1, eq  // eq = none
 148:	cmp	w1, #0x0
 14c:	b.ne	154 <gomp_ptrlock_get+0x64>  // b.any
 150:	str	x2, [x0]
 154:	mov	w0, w1
 158:	cmp	w0, #0x0
 15c:	b.eq	168 <gomp_ptrlock_get+0x78>  // b.none
 160:	mov	x0, #0x0                   	// #0
 164:	b	170 <gomp_ptrlock_get+0x80>
 168:	ldr	x0, [sp, #24]
 16c:	bl	0 <gomp_ptrlock_get_slow>
 170:	ldp	x29, x30, [sp], #48
 174:	ret

0000000000000178 <gomp_ptrlock_destroy>:
 178:	sub	sp, sp, #0x10
 17c:	str	x0, [sp, #8]
 180:	nop
 184:	add	sp, sp, #0x10
 188:	ret

000000000000018c <gomp_thread>:
 18c:	mrs	x1, tpidr_el0
 190:	adrp	x0, 0 <gomp_tls_data>
 194:	ldr	x0, [x0]
 198:	add	x0, x1, x0
 19c:	ret

00000000000001a0 <alloc_work_share>:
 1a0:	stp	x29, x30, [sp, #-64]!
 1a4:	mov	x29, sp
 1a8:	str	x0, [sp, #24]
 1ac:	ldr	x0, [sp, #24]
 1b0:	ldr	x0, [x0, #96]
 1b4:	cmp	x0, #0x0
 1b8:	b.eq	1e0 <alloc_work_share+0x40>  // b.none
 1bc:	ldr	x0, [sp, #24]
 1c0:	ldr	x0, [x0, #96]
 1c4:	str	x0, [sp, #48]
 1c8:	ldr	x0, [sp, #48]
 1cc:	ldr	x1, [x0, #80]
 1d0:	ldr	x0, [sp, #24]
 1d4:	str	x1, [x0, #96]
 1d8:	ldr	x0, [sp, #48]
 1dc:	b	310 <alloc_work_share+0x170>
 1e0:	ldr	x0, [sp, #24]
 1e4:	ldr	x0, [x0, #104]
 1e8:	str	x0, [sp, #48]
 1ec:	ldr	x0, [sp, #48]
 1f0:	str	x0, [sp, #48]
 1f4:	ldr	x0, [sp, #48]
 1f8:	cmp	x0, #0x0
 1fc:	b.eq	23c <alloc_work_share+0x9c>  // b.none
 200:	ldr	x0, [sp, #48]
 204:	ldr	x0, [x0, #80]
 208:	cmp	x0, #0x0
 20c:	b.eq	23c <alloc_work_share+0x9c>  // b.none
 210:	ldr	x0, [sp, #48]
 214:	ldr	x0, [x0, #80]
 218:	str	x0, [sp, #40]
 21c:	ldr	x0, [sp, #48]
 220:	str	xzr, [x0, #80]
 224:	ldr	x0, [sp, #40]
 228:	ldr	x1, [x0, #80]
 22c:	ldr	x0, [sp, #24]
 230:	str	x1, [x0, #96]
 234:	ldr	x0, [sp, #40]
 238:	b	310 <alloc_work_share+0x170>
 23c:	ldr	x0, [sp, #24]
 240:	ldr	w0, [x0, #4]
 244:	lsl	w1, w0, #1
 248:	ldr	x0, [sp, #24]
 24c:	str	w1, [x0, #4]
 250:	ldr	x0, [sp, #24]
 254:	ldr	w0, [x0, #4]
 258:	mov	w0, w0
 25c:	lsl	x0, x0, #7
 260:	mov	x1, x0
 264:	mov	x0, #0x40                  	// #64
 268:	bl	0 <gomp_aligned_alloc>
 26c:	str	x0, [sp, #48]
 270:	ldr	x0, [sp, #24]
 274:	ldr	x1, [x0, #312]
 278:	ldr	x0, [sp, #48]
 27c:	str	x1, [x0, #56]
 280:	ldr	x0, [sp, #24]
 284:	ldr	x1, [sp, #48]
 288:	str	x1, [x0, #312]
 28c:	ldr	x0, [sp, #48]
 290:	add	x1, x0, #0x80
 294:	ldr	x0, [sp, #24]
 298:	str	x1, [x0, #96]
 29c:	mov	w0, #0x1                   	// #1
 2a0:	str	w0, [sp, #60]
 2a4:	b	2e0 <alloc_work_share+0x140>
 2a8:	ldr	w0, [sp, #60]
 2ac:	add	w0, w0, #0x1
 2b0:	mov	w0, w0
 2b4:	lsl	x1, x0, #7
 2b8:	ldr	w0, [sp, #60]
 2bc:	lsl	x0, x0, #7
 2c0:	ldr	x2, [sp, #48]
 2c4:	add	x0, x2, x0
 2c8:	ldr	x2, [sp, #48]
 2cc:	add	x1, x2, x1
 2d0:	str	x1, [x0, #80]
 2d4:	ldr	w0, [sp, #60]
 2d8:	add	w0, w0, #0x1
 2dc:	str	w0, [sp, #60]
 2e0:	ldr	x0, [sp, #24]
 2e4:	ldr	w0, [x0, #4]
 2e8:	sub	w0, w0, #0x1
 2ec:	ldr	w1, [sp, #60]
 2f0:	cmp	w1, w0
 2f4:	b.cc	2a8 <alloc_work_share+0x108>  // b.lo, b.ul, b.last
 2f8:	ldr	w0, [sp, #60]
 2fc:	lsl	x0, x0, #7
 300:	ldr	x1, [sp, #48]
 304:	add	x0, x1, x0
 308:	str	xzr, [x0, #80]
 30c:	ldr	x0, [sp, #48]
 310:	ldp	x29, x30, [sp], #64
 314:	ret

0000000000000318 <gomp_init_work_share>:
 318:	stp	x29, x30, [sp, #-64]!
 31c:	mov	x29, sp
 320:	str	x0, [sp, #40]
 324:	str	x1, [sp, #32]
 328:	str	w2, [sp, #28]
 32c:	ldr	x0, [sp, #40]
 330:	add	x0, x0, #0x40
 334:	bl	0 <gomp_mutex_init>
 338:	ldr	x0, [sp, #32]
 33c:	cmp	x0, #0x0
 340:	b.eq	410 <gomp_init_work_share+0xf8>  // b.none
 344:	ldr	x0, [sp, #32]
 348:	cmp	x0, #0x1
 34c:	cset	w0, ne  // ne = any
 350:	and	w0, w0, #0xff
 354:	and	x0, x0, #0xff
 358:	cmp	x0, #0x0
 35c:	b.eq	39c <gomp_init_work_share+0x84>  // b.none
 360:	ldr	w0, [sp, #28]
 364:	lsl	x0, x0, #2
 368:	str	x0, [sp, #56]
 36c:	ldr	x0, [sp, #56]
 370:	add	x0, x0, #0x7
 374:	str	x0, [sp, #56]
 378:	ldr	x0, [sp, #56]
 37c:	and	x0, x0, #0xfffffffffffffff8
 380:	str	x0, [sp, #56]
 384:	ldr	x1, [sp, #56]
 388:	ldr	x0, [sp, #32]
 38c:	add	x0, x1, x0
 390:	sub	x0, x0, #0x1
 394:	str	x0, [sp, #32]
 398:	b	3a8 <gomp_init_work_share+0x90>
 39c:	ldr	w0, [sp, #28]
 3a0:	lsl	x0, x0, #2
 3a4:	str	x0, [sp, #32]
 3a8:	ldr	x0, [sp, #32]
 3ac:	cmp	x0, #0x20
 3b0:	b.ls	3cc <gomp_init_work_share+0xb4>  // b.plast
 3b4:	ldr	x0, [sp, #32]
 3b8:	bl	0 <gomp_malloc>
 3bc:	mov	x1, x0
 3c0:	ldr	x0, [sp, #40]
 3c4:	str	x1, [x0, #32]
 3c8:	b	3dc <gomp_init_work_share+0xc4>
 3cc:	ldr	x0, [sp, #40]
 3d0:	add	x1, x0, #0x60
 3d4:	ldr	x0, [sp, #40]
 3d8:	str	x1, [x0, #32]
 3dc:	ldr	x0, [sp, #40]
 3e0:	ldr	x0, [x0, #32]
 3e4:	ldr	x2, [sp, #32]
 3e8:	mov	w1, #0x0                   	// #0
 3ec:	bl	0 <memset>
 3f0:	ldr	x0, [sp, #40]
 3f4:	str	wzr, [x0, #40]
 3f8:	ldr	x0, [sp, #40]
 3fc:	mov	w1, #0xffffffff            	// #-1
 400:	str	w1, [x0, #44]
 404:	ldr	x0, [sp, #40]
 408:	str	wzr, [x0, #48]
 40c:	b	420 <gomp_init_work_share+0x108>
 410:	ldr	x0, [sp, #40]
 414:	add	x1, x0, #0x60
 418:	ldr	x0, [sp, #40]
 41c:	str	x1, [x0, #32]
 420:	ldr	x0, [sp, #40]
 424:	add	x0, x0, #0x50
 428:	mov	x1, #0x0                   	// #0
 42c:	bl	cc <gomp_ptrlock_init>
 430:	ldr	x0, [sp, #40]
 434:	str	wzr, [x0, #68]
 438:	nop
 43c:	ldp	x29, x30, [sp], #64
 440:	ret

0000000000000444 <gomp_fini_work_share>:
 444:	stp	x29, x30, [sp, #-32]!
 448:	mov	x29, sp
 44c:	str	x0, [sp, #24]
 450:	ldr	x0, [sp, #24]
 454:	add	x0, x0, #0x40
 458:	bl	1c <gomp_mutex_destroy>
 45c:	ldr	x0, [sp, #24]
 460:	ldr	x1, [x0, #32]
 464:	ldr	x0, [sp, #24]
 468:	add	x0, x0, #0x60
 46c:	cmp	x1, x0
 470:	b.eq	480 <gomp_fini_work_share+0x3c>  // b.none
 474:	ldr	x0, [sp, #24]
 478:	ldr	x0, [x0, #32]
 47c:	bl	0 <free>
 480:	ldr	x0, [sp, #24]
 484:	add	x0, x0, #0x50
 488:	bl	178 <gomp_ptrlock_destroy>
 48c:	nop
 490:	ldp	x29, x30, [sp], #32
 494:	ret

0000000000000498 <free_work_share>:
 498:	stp	x29, x30, [sp, #-48]!
 49c:	mov	x29, sp
 4a0:	str	x0, [sp, #24]
 4a4:	str	x1, [sp, #16]
 4a8:	ldr	x0, [sp, #16]
 4ac:	bl	444 <gomp_fini_work_share>
 4b0:	ldr	x0, [sp, #24]
 4b4:	cmp	x0, #0x0
 4b8:	cset	w0, eq  // eq = none
 4bc:	and	w0, w0, #0xff
 4c0:	and	x0, x0, #0xff
 4c4:	cmp	x0, #0x0
 4c8:	b.eq	4d8 <free_work_share+0x40>  // b.none
 4cc:	ldr	x0, [sp, #16]
 4d0:	bl	0 <free>
 4d4:	b	52c <free_work_share+0x94>
 4d8:	ldr	x0, [sp, #24]
 4dc:	ldr	x0, [x0, #104]
 4e0:	str	x0, [sp, #40]
 4e4:	ldr	x0, [sp, #16]
 4e8:	ldr	x1, [sp, #40]
 4ec:	str	x1, [x0, #80]
 4f0:	ldr	x0, [sp, #24]
 4f4:	add	x0, x0, #0x68
 4f8:	ldr	x1, [sp, #40]
 4fc:	ldr	x2, [sp, #16]
 500:	ldxr	x3, [x0]
 504:	cmp	x3, x1
 508:	b.ne	514 <free_work_share+0x7c>  // b.any
 50c:	stlxr	w4, x2, [x0]
 510:	cbnz	w4, 500 <free_work_share+0x68>
 514:	dmb	ish
 518:	cset	w0, eq  // eq = none
 51c:	eor	w0, w0, #0x1
 520:	and	w0, w0, #0xff
 524:	cmp	w0, #0x0
 528:	b.ne	4d8 <free_work_share+0x40>  // b.any
 52c:	nop
 530:	ldp	x29, x30, [sp], #48
 534:	ret

0000000000000538 <gomp_work_share_start>:
 538:	stp	x29, x30, [sp, #-64]!
 53c:	mov	x29, sp
 540:	str	x0, [sp, #24]
 544:	bl	18c <gomp_thread>
 548:	str	x0, [sp, #56]
 54c:	ldr	x0, [sp, #56]
 550:	ldr	x0, [x0, #16]
 554:	str	x0, [sp, #48]
 558:	ldr	x0, [sp, #48]
 55c:	cmp	x0, #0x0
 560:	b.ne	594 <gomp_work_share_start+0x5c>  // b.any
 564:	mov	x0, #0x80                  	// #128
 568:	bl	0 <gomp_malloc>
 56c:	str	x0, [sp, #40]
 570:	mov	w2, #0x1                   	// #1
 574:	ldr	x1, [sp, #24]
 578:	ldr	x0, [sp, #40]
 57c:	bl	318 <gomp_init_work_share>
 580:	ldr	x0, [sp, #56]
 584:	ldr	x1, [sp, #40]
 588:	str	x1, [x0, #24]
 58c:	mov	w0, #0x1                   	// #1
 590:	b	610 <gomp_work_share_start+0xd8>
 594:	ldr	x0, [sp, #56]
 598:	ldr	x0, [x0, #24]
 59c:	str	x0, [sp, #40]
 5a0:	ldr	x0, [sp, #56]
 5a4:	ldr	x1, [sp, #40]
 5a8:	str	x1, [x0, #32]
 5ac:	ldr	x0, [sp, #40]
 5b0:	add	x0, x0, #0x50
 5b4:	bl	f0 <gomp_ptrlock_get>
 5b8:	str	x0, [sp, #40]
 5bc:	ldr	x0, [sp, #40]
 5c0:	cmp	x0, #0x0
 5c4:	b.ne	600 <gomp_work_share_start+0xc8>  // b.any
 5c8:	ldr	x0, [sp, #48]
 5cc:	bl	1a0 <alloc_work_share>
 5d0:	str	x0, [sp, #32]
 5d4:	ldr	x0, [sp, #48]
 5d8:	ldr	w0, [x0]
 5dc:	mov	w2, w0
 5e0:	ldr	x1, [sp, #24]
 5e4:	ldr	x0, [sp, #32]
 5e8:	bl	318 <gomp_init_work_share>
 5ec:	ldr	x0, [sp, #56]
 5f0:	ldr	x1, [sp, #32]
 5f4:	str	x1, [x0, #24]
 5f8:	mov	w0, #0x1                   	// #1
 5fc:	b	610 <gomp_work_share_start+0xd8>
 600:	ldr	x0, [sp, #56]
 604:	ldr	x1, [sp, #40]
 608:	str	x1, [x0, #24]
 60c:	mov	w0, #0x0                   	// #0
 610:	ldp	x29, x30, [sp], #64
 614:	ret

0000000000000618 <gomp_work_share_end>:
 618:	stp	x29, x30, [sp, #-48]!
 61c:	mov	x29, sp
 620:	bl	18c <gomp_thread>
 624:	str	x0, [sp, #40]
 628:	ldr	x0, [sp, #40]
 62c:	ldr	x0, [x0, #16]
 630:	str	x0, [sp, #32]
 634:	ldr	x0, [sp, #32]
 638:	cmp	x0, #0x0
 63c:	b.ne	660 <gomp_work_share_end+0x48>  // b.any
 640:	ldr	x0, [sp, #40]
 644:	ldr	x0, [x0, #24]
 648:	mov	x1, x0
 64c:	mov	x0, #0x0                   	// #0
 650:	bl	498 <free_work_share>
 654:	ldr	x0, [sp, #40]
 658:	str	xzr, [x0, #24]
 65c:	b	6e0 <gomp_work_share_end+0xc8>
 660:	ldr	x0, [sp, #32]
 664:	add	x0, x0, #0x80
 668:	bl	30 <gomp_barrier_wait_start>
 66c:	str	w0, [sp, #28]
 670:	ldr	w0, [sp, #28]
 674:	bl	a8 <gomp_barrier_last_thread>
 678:	and	w0, w0, #0xff
 67c:	cmp	w0, #0x0
 680:	b.eq	6c8 <gomp_work_share_end+0xb0>  // b.none
 684:	ldr	x0, [sp, #40]
 688:	ldr	x0, [x0, #32]
 68c:	cmp	x0, #0x0
 690:	cset	w0, ne  // ne = any
 694:	and	w0, w0, #0xff
 698:	and	x0, x0, #0xff
 69c:	cmp	x0, #0x0
 6a0:	b.eq	6c8 <gomp_work_share_end+0xb0>  // b.none
 6a4:	ldr	x0, [sp, #40]
 6a8:	ldr	x1, [x0, #24]
 6ac:	ldr	x0, [sp, #32]
 6b0:	str	x1, [x0, #88]
 6b4:	ldr	x0, [sp, #40]
 6b8:	ldr	x0, [x0, #32]
 6bc:	mov	x1, x0
 6c0:	ldr	x0, [sp, #32]
 6c4:	bl	498 <free_work_share>
 6c8:	ldr	x0, [sp, #32]
 6cc:	add	x0, x0, #0x80
 6d0:	ldr	w1, [sp, #28]
 6d4:	bl	0 <gomp_team_barrier_wait_end>
 6d8:	ldr	x0, [sp, #40]
 6dc:	str	xzr, [x0, #32]
 6e0:	ldp	x29, x30, [sp], #48
 6e4:	ret

00000000000006e8 <gomp_work_share_end_cancel>:
 6e8:	stp	x29, x30, [sp, #-48]!
 6ec:	mov	x29, sp
 6f0:	bl	18c <gomp_thread>
 6f4:	str	x0, [sp, #40]
 6f8:	ldr	x0, [sp, #40]
 6fc:	ldr	x0, [x0, #16]
 700:	str	x0, [sp, #32]
 704:	ldr	x0, [sp, #32]
 708:	add	x0, x0, #0x80
 70c:	bl	8c <gomp_barrier_wait_cancel_start>
 710:	str	w0, [sp, #28]
 714:	ldr	w0, [sp, #28]
 718:	bl	a8 <gomp_barrier_last_thread>
 71c:	and	w0, w0, #0xff
 720:	cmp	w0, #0x0
 724:	b.eq	76c <gomp_work_share_end_cancel+0x84>  // b.none
 728:	ldr	x0, [sp, #40]
 72c:	ldr	x0, [x0, #32]
 730:	cmp	x0, #0x0
 734:	cset	w0, ne  // ne = any
 738:	and	w0, w0, #0xff
 73c:	and	x0, x0, #0xff
 740:	cmp	x0, #0x0
 744:	b.eq	76c <gomp_work_share_end_cancel+0x84>  // b.none
 748:	ldr	x0, [sp, #40]
 74c:	ldr	x1, [x0, #24]
 750:	ldr	x0, [sp, #32]
 754:	str	x1, [x0, #88]
 758:	ldr	x0, [sp, #40]
 75c:	ldr	x0, [x0, #32]
 760:	mov	x1, x0
 764:	ldr	x0, [sp, #32]
 768:	bl	498 <free_work_share>
 76c:	ldr	x0, [sp, #40]
 770:	str	xzr, [x0, #32]
 774:	ldr	x0, [sp, #32]
 778:	add	x0, x0, #0x80
 77c:	ldr	w1, [sp, #28]
 780:	bl	0 <gomp_team_barrier_wait_cancel_end>
 784:	and	w0, w0, #0xff
 788:	ldp	x29, x30, [sp], #48
 78c:	ret

0000000000000790 <gomp_work_share_end_nowait>:
 790:	stp	x29, x30, [sp, #-48]!
 794:	mov	x29, sp
 798:	bl	18c <gomp_thread>
 79c:	str	x0, [sp, #40]
 7a0:	ldr	x0, [sp, #40]
 7a4:	ldr	x0, [x0, #16]
 7a8:	str	x0, [sp, #32]
 7ac:	ldr	x0, [sp, #40]
 7b0:	ldr	x0, [x0, #24]
 7b4:	str	x0, [sp, #24]
 7b8:	ldr	x0, [sp, #32]
 7bc:	cmp	x0, #0x0
 7c0:	b.ne	7dc <gomp_work_share_end_nowait+0x4c>  // b.any
 7c4:	ldr	x1, [sp, #24]
 7c8:	mov	x0, #0x0                   	// #0
 7cc:	bl	498 <free_work_share>
 7d0:	ldr	x0, [sp, #40]
 7d4:	str	xzr, [x0, #24]
 7d8:	b	864 <gomp_work_share_end_nowait+0xd4>
 7dc:	ldr	x0, [sp, #40]
 7e0:	ldr	x0, [x0, #32]
 7e4:	cmp	x0, #0x0
 7e8:	cset	w0, eq  // eq = none
 7ec:	and	w0, w0, #0xff
 7f0:	and	x0, x0, #0xff
 7f4:	cmp	x0, #0x0
 7f8:	b.ne	860 <gomp_work_share_end_nowait+0xd0>  // b.any
 7fc:	ldr	x0, [sp, #24]
 800:	add	x0, x0, #0x44
 804:	ldxr	w1, [x0]
 808:	add	w1, w1, #0x1
 80c:	stlxr	w2, w1, [x0]
 810:	cbnz	w2, 804 <gomp_work_share_end_nowait+0x74>
 814:	dmb	ish
 818:	str	w1, [sp, #20]
 81c:	ldr	x0, [sp, #32]
 820:	ldr	w0, [x0]
 824:	ldr	w1, [sp, #20]
 828:	cmp	w1, w0
 82c:	b.ne	854 <gomp_work_share_end_nowait+0xc4>  // b.any
 830:	ldr	x0, [sp, #40]
 834:	ldr	x1, [x0, #24]
 838:	ldr	x0, [sp, #32]
 83c:	str	x1, [x0, #88]
 840:	ldr	x0, [sp, #40]
 844:	ldr	x0, [x0, #32]
 848:	mov	x1, x0
 84c:	ldr	x0, [sp, #32]
 850:	bl	498 <free_work_share>
 854:	ldr	x0, [sp, #40]
 858:	str	xzr, [x0, #32]
 85c:	b	864 <gomp_work_share_end_nowait+0xd4>
 860:	nop
 864:	ldp	x29, x30, [sp], #48
 868:	ret

lock.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_init>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	str	wzr, [x0]
  10:	nop
  14:	add	sp, sp, #0x10
  18:	ret

000000000000001c <gomp_mutex_destroy>:
  1c:	sub	sp, sp, #0x10
  20:	str	x0, [sp, #8]
  24:	nop
  28:	add	sp, sp, #0x10
  2c:	ret

0000000000000030 <gomp_mutex_lock>:
  30:	stp	x29, x30, [sp, #-48]!
  34:	mov	x29, sp
  38:	str	x0, [sp, #24]
  3c:	str	wzr, [sp, #44]
  40:	ldr	x1, [sp, #24]
  44:	add	x0, sp, #0x2c
  48:	ldr	w3, [x0]
  4c:	mov	w4, #0x1                   	// #1
  50:	ldaxr	w2, [x1]
  54:	cmp	w2, w3
  58:	b.ne	64 <gomp_mutex_lock+0x34>  // b.any
  5c:	stxr	w5, w4, [x1]
  60:	cbnz	w5, 50 <gomp_mutex_lock+0x20>
  64:	cset	w1, eq  // eq = none
  68:	cmp	w1, #0x0
  6c:	b.ne	74 <gomp_mutex_lock+0x44>  // b.any
  70:	str	w2, [x0]
  74:	mov	w0, w1
  78:	eor	w0, w0, #0x1
  7c:	and	w0, w0, #0xff
  80:	cmp	w0, #0x0
  84:	b.eq	98 <gomp_mutex_lock+0x68>  // b.none
  88:	ldr	w0, [sp, #44]
  8c:	mov	w1, w0
  90:	ldr	x0, [sp, #24]
  94:	bl	0 <gomp_mutex_lock_slow>
  98:	nop
  9c:	ldp	x29, x30, [sp], #48
  a0:	ret

00000000000000a4 <gomp_mutex_unlock>:
  a4:	stp	x29, x30, [sp, #-48]!
  a8:	mov	x29, sp
  ac:	str	x0, [sp, #24]
  b0:	ldr	x1, [sp, #24]
  b4:	ldxr	w0, [x1]
  b8:	stlxr	w2, wzr, [x1]
  bc:	cbnz	w2, b4 <gomp_mutex_unlock+0x10>
  c0:	str	w0, [sp, #44]
  c4:	ldr	w0, [sp, #44]
  c8:	lsr	w0, w0, #31
  cc:	and	w0, w0, #0xff
  d0:	and	x0, x0, #0xff
  d4:	cmp	x0, #0x0
  d8:	b.eq	e4 <gomp_mutex_unlock+0x40>  // b.none
  dc:	ldr	x0, [sp, #24]
  e0:	bl	0 <gomp_mutex_unlock_slow>
  e4:	nop
  e8:	ldp	x29, x30, [sp], #48
  ec:	ret

00000000000000f0 <gomp_thread>:
  f0:	mrs	x1, tpidr_el0
  f4:	adrp	x0, 0 <gomp_tls_data>
  f8:	ldr	x0, [x0]
  fc:	add	x0, x1, x0
 100:	ret

0000000000000104 <gomp_icv>:
 104:	stp	x29, x30, [sp, #-48]!
 108:	mov	x29, sp
 10c:	strb	w0, [sp, #31]
 110:	bl	f0 <gomp_thread>
 114:	ldr	x0, [x0, #80]
 118:	str	x0, [sp, #40]
 11c:	ldr	x0, [sp, #40]
 120:	cmp	x0, #0x0
 124:	b.eq	134 <gomp_icv+0x30>  // b.none
 128:	ldr	x0, [sp, #40]
 12c:	add	x0, x0, #0x90
 130:	b	150 <gomp_icv+0x4c>
 134:	ldrb	w0, [sp, #31]
 138:	cmp	w0, #0x0
 13c:	b.eq	148 <gomp_icv+0x44>  // b.none
 140:	bl	0 <gomp_new_icv>
 144:	b	150 <gomp_icv+0x4c>
 148:	adrp	x0, 0 <gomp_global_icv>
 14c:	add	x0, x0, #0x0
 150:	ldp	x29, x30, [sp], #48
 154:	ret

0000000000000158 <gomp_ialias_omp_init_lock>:
 158:	stp	x29, x30, [sp, #-32]!
 15c:	mov	x29, sp
 160:	str	x0, [sp, #24]
 164:	ldr	x0, [sp, #24]
 168:	bl	0 <gomp_mutex_init>
 16c:	nop
 170:	ldp	x29, x30, [sp], #32
 174:	ret

0000000000000178 <gomp_ialias_omp_destroy_lock>:
 178:	stp	x29, x30, [sp, #-32]!
 17c:	mov	x29, sp
 180:	str	x0, [sp, #24]
 184:	ldr	x0, [sp, #24]
 188:	bl	1c <gomp_mutex_destroy>
 18c:	nop
 190:	ldp	x29, x30, [sp], #32
 194:	ret

0000000000000198 <gomp_ialias_omp_set_lock>:
 198:	stp	x29, x30, [sp, #-32]!
 19c:	mov	x29, sp
 1a0:	str	x0, [sp, #24]
 1a4:	ldr	x0, [sp, #24]
 1a8:	bl	30 <gomp_mutex_lock>
 1ac:	nop
 1b0:	ldp	x29, x30, [sp], #32
 1b4:	ret

00000000000001b8 <gomp_ialias_omp_unset_lock>:
 1b8:	stp	x29, x30, [sp, #-32]!
 1bc:	mov	x29, sp
 1c0:	str	x0, [sp, #24]
 1c4:	ldr	x0, [sp, #24]
 1c8:	bl	a4 <gomp_mutex_unlock>
 1cc:	nop
 1d0:	ldp	x29, x30, [sp], #32
 1d4:	ret

00000000000001d8 <gomp_ialias_omp_test_lock>:
 1d8:	sub	sp, sp, #0x20
 1dc:	str	x0, [sp, #8]
 1e0:	str	wzr, [sp, #28]
 1e4:	ldr	x1, [sp, #8]
 1e8:	add	x0, sp, #0x1c
 1ec:	ldr	w3, [x0]
 1f0:	mov	w4, #0x1                   	// #1
 1f4:	ldaxr	w2, [x1]
 1f8:	cmp	w2, w3
 1fc:	b.ne	208 <gomp_ialias_omp_test_lock+0x30>  // b.any
 200:	stxr	w5, w4, [x1]
 204:	cbnz	w5, 1f4 <gomp_ialias_omp_test_lock+0x1c>
 208:	cset	w1, eq  // eq = none
 20c:	cmp	w1, #0x0
 210:	b.ne	218 <gomp_ialias_omp_test_lock+0x40>  // b.any
 214:	str	w2, [x0]
 218:	mov	w0, w1
 21c:	add	sp, sp, #0x20
 220:	ret

0000000000000224 <gomp_ialias_omp_init_nest_lock>:
 224:	stp	x29, x30, [sp, #-32]!
 228:	mov	x29, sp
 22c:	str	x0, [sp, #24]
 230:	mov	x2, #0x10                  	// #16
 234:	mov	w1, #0x0                   	// #0
 238:	ldr	x0, [sp, #24]
 23c:	bl	0 <memset>
 240:	nop
 244:	ldp	x29, x30, [sp], #32
 248:	ret

000000000000024c <gomp_ialias_omp_destroy_nest_lock>:
 24c:	sub	sp, sp, #0x10
 250:	str	x0, [sp, #8]
 254:	nop
 258:	add	sp, sp, #0x10
 25c:	ret

0000000000000260 <gomp_ialias_omp_set_nest_lock>:
 260:	stp	x29, x30, [sp, #-48]!
 264:	mov	x29, sp
 268:	str	x0, [sp, #24]
 26c:	mov	w0, #0x1                   	// #1
 270:	bl	104 <gomp_icv>
 274:	str	x0, [sp, #40]
 278:	ldr	x0, [sp, #24]
 27c:	ldr	x0, [x0, #8]
 280:	ldr	x1, [sp, #40]
 284:	cmp	x1, x0
 288:	b.eq	2a0 <gomp_ialias_omp_set_nest_lock+0x40>  // b.none
 28c:	ldr	x0, [sp, #24]
 290:	bl	30 <gomp_mutex_lock>
 294:	ldr	x0, [sp, #24]
 298:	ldr	x1, [sp, #40]
 29c:	str	x1, [x0, #8]
 2a0:	ldr	x0, [sp, #24]
 2a4:	ldr	w0, [x0, #4]
 2a8:	add	w1, w0, #0x1
 2ac:	ldr	x0, [sp, #24]
 2b0:	str	w1, [x0, #4]
 2b4:	nop
 2b8:	ldp	x29, x30, [sp], #48
 2bc:	ret

00000000000002c0 <gomp_ialias_omp_unset_nest_lock>:
 2c0:	stp	x29, x30, [sp, #-32]!
 2c4:	mov	x29, sp
 2c8:	str	x0, [sp, #24]
 2cc:	ldr	x0, [sp, #24]
 2d0:	ldr	w0, [x0, #4]
 2d4:	sub	w1, w0, #0x1
 2d8:	ldr	x0, [sp, #24]
 2dc:	str	w1, [x0, #4]
 2e0:	ldr	x0, [sp, #24]
 2e4:	ldr	w0, [x0, #4]
 2e8:	cmp	w0, #0x0
 2ec:	b.ne	300 <gomp_ialias_omp_unset_nest_lock+0x40>  // b.any
 2f0:	ldr	x0, [sp, #24]
 2f4:	str	xzr, [x0, #8]
 2f8:	ldr	x0, [sp, #24]
 2fc:	bl	a4 <gomp_mutex_unlock>
 300:	nop
 304:	ldp	x29, x30, [sp], #32
 308:	ret

000000000000030c <gomp_ialias_omp_test_nest_lock>:
 30c:	stp	x29, x30, [sp, #-48]!
 310:	mov	x29, sp
 314:	str	x0, [sp, #24]
 318:	mov	w0, #0x1                   	// #1
 31c:	bl	104 <gomp_icv>
 320:	str	x0, [sp, #40]
 324:	ldr	x0, [sp, #24]
 328:	ldr	x0, [x0, #8]
 32c:	ldr	x1, [sp, #40]
 330:	cmp	x1, x0
 334:	b.ne	358 <gomp_ialias_omp_test_nest_lock+0x4c>  // b.any
 338:	ldr	x0, [sp, #24]
 33c:	ldr	w0, [x0, #4]
 340:	add	w1, w0, #0x1
 344:	ldr	x0, [sp, #24]
 348:	str	w1, [x0, #4]
 34c:	ldr	x0, [sp, #24]
 350:	ldr	w0, [x0, #4]
 354:	b	3c0 <gomp_ialias_omp_test_nest_lock+0xb4>
 358:	str	wzr, [sp, #36]
 35c:	ldr	x1, [sp, #24]
 360:	add	x0, sp, #0x24
 364:	ldr	w3, [x0]
 368:	mov	w4, #0x1                   	// #1
 36c:	ldaxr	w2, [x1]
 370:	cmp	w2, w3
 374:	b.ne	380 <gomp_ialias_omp_test_nest_lock+0x74>  // b.any
 378:	stxr	w5, w4, [x1]
 37c:	cbnz	w5, 36c <gomp_ialias_omp_test_nest_lock+0x60>
 380:	cset	w1, eq  // eq = none
 384:	cmp	w1, #0x0
 388:	b.ne	390 <gomp_ialias_omp_test_nest_lock+0x84>  // b.any
 38c:	str	w2, [x0]
 390:	mov	w0, w1
 394:	cmp	w0, #0x0
 398:	b.eq	3bc <gomp_ialias_omp_test_nest_lock+0xb0>  // b.none
 39c:	ldr	x0, [sp, #24]
 3a0:	ldr	x1, [sp, #40]
 3a4:	str	x1, [x0, #8]
 3a8:	ldr	x0, [sp, #24]
 3ac:	mov	w1, #0x1                   	// #1
 3b0:	str	w1, [x0, #4]
 3b4:	mov	w0, #0x1                   	// #1
 3b8:	b	3c0 <gomp_ialias_omp_test_nest_lock+0xb4>
 3bc:	mov	w0, #0x0                   	// #0
 3c0:	ldp	x29, x30, [sp], #48
 3c4:	ret

mutex.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <futex_wait>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	w1, [sp, #20]
  10:	adrp	x0, 4 <futex_wait+0x4>
  14:	add	x0, x0, #0x0
  18:	ldr	w0, [x0]
  1c:	mov	x4, #0x0                   	// #0
  20:	ldr	w3, [sp, #20]
  24:	mov	w2, w0
  28:	ldr	x1, [sp, #24]
  2c:	mov	x0, #0x62                  	// #98
  30:	bl	0 <syscall>
  34:	str	w0, [sp, #44]
  38:	ldr	w0, [sp, #44]
  3c:	lsr	w0, w0, #31
  40:	and	w0, w0, #0xff
  44:	and	x0, x0, #0xff
  48:	cmp	x0, #0x0
  4c:	b.eq	cc <futex_wait+0xcc>  // b.none
  50:	bl	0 <__errno_location>
  54:	ldr	w0, [x0]
  58:	cmp	w0, #0x26
  5c:	cset	w0, eq  // eq = none
  60:	and	w0, w0, #0xff
  64:	and	x0, x0, #0xff
  68:	cmp	x0, #0x0
  6c:	b.eq	cc <futex_wait+0xcc>  // b.none
  70:	adrp	x0, 4 <futex_wait+0x4>
  74:	add	x0, x0, #0x0
  78:	ldr	w0, [x0]
  7c:	and	w1, w0, #0xffffff7f
  80:	adrp	x0, 4 <futex_wait+0x4>
  84:	add	x0, x0, #0x0
  88:	str	w1, [x0]
  8c:	adrp	x0, 0 <futex_wait>
  90:	add	x0, x0, #0x0
  94:	ldr	w0, [x0]
  98:	and	w1, w0, #0xffffff7f
  9c:	adrp	x0, 0 <futex_wait>
  a0:	add	x0, x0, #0x0
  a4:	str	w1, [x0]
  a8:	adrp	x0, 4 <futex_wait+0x4>
  ac:	add	x0, x0, #0x0
  b0:	ldr	w0, [x0]
  b4:	mov	x4, #0x0                   	// #0
  b8:	ldr	w3, [sp, #20]
  bc:	mov	w2, w0
  c0:	ldr	x1, [sp, #24]
  c4:	mov	x0, #0x62                  	// #98
  c8:	bl	0 <syscall>
  cc:	nop
  d0:	ldp	x29, x30, [sp], #48
  d4:	ret

00000000000000d8 <futex_wake>:
  d8:	stp	x29, x30, [sp, #-48]!
  dc:	mov	x29, sp
  e0:	str	x0, [sp, #24]
  e4:	str	w1, [sp, #20]
  e8:	adrp	x0, 0 <futex_wait>
  ec:	add	x0, x0, #0x0
  f0:	ldr	w0, [x0]
  f4:	ldr	w3, [sp, #20]
  f8:	mov	w2, w0
  fc:	ldr	x1, [sp, #24]
 100:	mov	x0, #0x62                  	// #98
 104:	bl	0 <syscall>
 108:	str	w0, [sp, #44]
 10c:	ldr	w0, [sp, #44]
 110:	lsr	w0, w0, #31
 114:	and	w0, w0, #0xff
 118:	and	x0, x0, #0xff
 11c:	cmp	x0, #0x0
 120:	b.eq	19c <futex_wake+0xc4>  // b.none
 124:	bl	0 <__errno_location>
 128:	ldr	w0, [x0]
 12c:	cmp	w0, #0x26
 130:	cset	w0, eq  // eq = none
 134:	and	w0, w0, #0xff
 138:	and	x0, x0, #0xff
 13c:	cmp	x0, #0x0
 140:	b.eq	19c <futex_wake+0xc4>  // b.none
 144:	adrp	x0, 4 <futex_wait+0x4>
 148:	add	x0, x0, #0x0
 14c:	ldr	w0, [x0]
 150:	and	w1, w0, #0xffffff7f
 154:	adrp	x0, 4 <futex_wait+0x4>
 158:	add	x0, x0, #0x0
 15c:	str	w1, [x0]
 160:	adrp	x0, 0 <futex_wait>
 164:	add	x0, x0, #0x0
 168:	ldr	w0, [x0]
 16c:	and	w1, w0, #0xffffff7f
 170:	adrp	x0, 0 <futex_wait>
 174:	add	x0, x0, #0x0
 178:	str	w1, [x0]
 17c:	adrp	x0, 0 <futex_wait>
 180:	add	x0, x0, #0x0
 184:	ldr	w0, [x0]
 188:	ldr	w3, [sp, #20]
 18c:	mov	w2, w0
 190:	ldr	x1, [sp, #24]
 194:	mov	x0, #0x62                  	// #98
 198:	bl	0 <syscall>
 19c:	nop
 1a0:	ldp	x29, x30, [sp], #48
 1a4:	ret

00000000000001a8 <cpu_relax>:
 1a8:	nop
 1ac:	ret

00000000000001b0 <do_spin>:
 1b0:	stp	x29, x30, [sp, #-48]!
 1b4:	mov	x29, sp
 1b8:	str	x0, [sp, #24]
 1bc:	str	w1, [sp, #20]
 1c0:	adrp	x0, 0 <gomp_spin_count_var>
 1c4:	add	x0, x0, #0x0
 1c8:	ldr	x0, [x0]
 1cc:	str	x0, [sp, #32]
 1d0:	adrp	x0, 0 <gomp_managed_threads>
 1d4:	add	x0, x0, #0x0
 1d8:	ldr	x1, [x0]
 1dc:	adrp	x0, 0 <gomp_available_cpus>
 1e0:	add	x0, x0, #0x0
 1e4:	ldr	x0, [x0]
 1e8:	cmp	x1, x0
 1ec:	cset	w0, hi  // hi = pmore
 1f0:	and	w0, w0, #0xff
 1f4:	and	x0, x0, #0xff
 1f8:	cmp	x0, #0x0
 1fc:	b.eq	210 <do_spin+0x60>  // b.none
 200:	adrp	x0, 0 <gomp_throttled_spin_count_var>
 204:	add	x0, x0, #0x0
 208:	ldr	x0, [x0]
 20c:	str	x0, [sp, #32]
 210:	str	xzr, [sp, #40]
 214:	b	258 <do_spin+0xa8>
 218:	ldr	x0, [sp, #24]
 21c:	ldr	w0, [x0]
 220:	mov	w1, w0
 224:	ldr	w0, [sp, #20]
 228:	cmp	w0, w1
 22c:	cset	w0, ne  // ne = any
 230:	and	w0, w0, #0xff
 234:	and	x0, x0, #0xff
 238:	cmp	x0, #0x0
 23c:	b.eq	248 <do_spin+0x98>  // b.none
 240:	mov	w0, #0x0                   	// #0
 244:	b	26c <do_spin+0xbc>
 248:	bl	1a8 <cpu_relax>
 24c:	ldr	x0, [sp, #40]
 250:	add	x0, x0, #0x1
 254:	str	x0, [sp, #40]
 258:	ldr	x1, [sp, #40]
 25c:	ldr	x0, [sp, #32]
 260:	cmp	x1, x0
 264:	b.cc	218 <do_spin+0x68>  // b.lo, b.ul, b.last
 268:	mov	w0, #0x1                   	// #1
 26c:	ldp	x29, x30, [sp], #48
 270:	ret

0000000000000274 <do_wait>:
 274:	stp	x29, x30, [sp, #-32]!
 278:	mov	x29, sp
 27c:	str	x0, [sp, #24]
 280:	str	w1, [sp, #20]
 284:	ldr	w1, [sp, #20]
 288:	ldr	x0, [sp, #24]
 28c:	bl	1b0 <do_spin>
 290:	cmp	w0, #0x0
 294:	b.eq	2a4 <do_wait+0x30>  // b.none
 298:	ldr	w1, [sp, #20]
 29c:	ldr	x0, [sp, #24]
 2a0:	bl	0 <futex_wait>
 2a4:	nop
 2a8:	ldp	x29, x30, [sp], #32
 2ac:	ret

00000000000002b0 <gomp_mutex_lock_slow>:
 2b0:	stp	x29, x30, [sp, #-32]!
 2b4:	mov	x29, sp
 2b8:	str	x0, [sp, #24]
 2bc:	str	w1, [sp, #20]
 2c0:	b	354 <gomp_mutex_lock_slow+0xa4>
 2c4:	mov	w1, #0x1                   	// #1
 2c8:	ldr	x0, [sp, #24]
 2cc:	bl	1b0 <do_spin>
 2d0:	cmp	w0, #0x0
 2d4:	b.eq	310 <gomp_mutex_lock_slow+0x60>  // b.none
 2d8:	ldr	x0, [sp, #24]
 2dc:	mov	w1, #0xffffffff            	// #-1
 2e0:	ldaxr	w2, [x0]
 2e4:	stxr	w3, w1, [x0]
 2e8:	cbnz	w3, 2e0 <gomp_mutex_lock_slow+0x30>
 2ec:	mov	w0, w2
 2f0:	str	w0, [sp, #20]
 2f4:	ldr	w0, [sp, #20]
 2f8:	cmp	w0, #0x0
 2fc:	b.eq	39c <gomp_mutex_lock_slow+0xec>  // b.none
 300:	mov	w1, #0xffffffff            	// #-1
 304:	ldr	x0, [sp, #24]
 308:	bl	0 <futex_wait>
 30c:	b	360 <gomp_mutex_lock_slow+0xb0>
 310:	str	wzr, [sp, #20]
 314:	ldr	x1, [sp, #24]
 318:	add	x0, sp, #0x14
 31c:	ldr	w3, [x0]
 320:	mov	w4, #0x1                   	// #1
 324:	ldaxr	w2, [x1]
 328:	cmp	w2, w3
 32c:	b.ne	338 <gomp_mutex_lock_slow+0x88>  // b.any
 330:	stxr	w5, w4, [x1]
 334:	cbnz	w5, 324 <gomp_mutex_lock_slow+0x74>
 338:	cset	w1, eq  // eq = none
 33c:	cmp	w1, #0x0
 340:	b.ne	348 <gomp_mutex_lock_slow+0x98>  // b.any
 344:	str	w2, [x0]
 348:	mov	w0, w1
 34c:	cmp	w0, #0x0
 350:	b.ne	3a4 <gomp_mutex_lock_slow+0xf4>  // b.any
 354:	ldr	w0, [sp, #20]
 358:	cmp	w0, #0x1
 35c:	b.eq	2c4 <gomp_mutex_lock_slow+0x14>  // b.none
 360:	b	370 <gomp_mutex_lock_slow+0xc0>
 364:	mov	w1, #0xffffffff            	// #-1
 368:	ldr	x0, [sp, #24]
 36c:	bl	274 <do_wait>
 370:	ldr	x0, [sp, #24]
 374:	mov	w1, #0xffffffff            	// #-1
 378:	ldaxr	w2, [x0]
 37c:	stxr	w3, w1, [x0]
 380:	cbnz	w3, 378 <gomp_mutex_lock_slow+0xc8>
 384:	mov	w0, w2
 388:	str	w0, [sp, #20]
 38c:	ldr	w0, [sp, #20]
 390:	cmp	w0, #0x0
 394:	b.ne	364 <gomp_mutex_lock_slow+0xb4>  // b.any
 398:	b	3a8 <gomp_mutex_lock_slow+0xf8>
 39c:	nop
 3a0:	b	3a8 <gomp_mutex_lock_slow+0xf8>
 3a4:	nop
 3a8:	ldp	x29, x30, [sp], #32
 3ac:	ret

00000000000003b0 <gomp_mutex_unlock_slow>:
 3b0:	stp	x29, x30, [sp, #-32]!
 3b4:	mov	x29, sp
 3b8:	str	x0, [sp, #24]
 3bc:	mov	w1, #0x1                   	// #1
 3c0:	ldr	x0, [sp, #24]
 3c4:	bl	d8 <futex_wake>
 3c8:	nop
 3cc:	ldp	x29, x30, [sp], #32
 3d0:	ret

proc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_thread>:
   0:	mrs	x1, tpidr_el0
   4:	adrp	x0, 0 <gomp_tls_data>
   8:	ldr	x0, [x0]
   c:	add	x0, x1, x0
  10:	ret

0000000000000014 <gomp_icv>:
  14:	stp	x29, x30, [sp, #-48]!
  18:	mov	x29, sp
  1c:	strb	w0, [sp, #31]
  20:	bl	0 <gomp_thread>
  24:	ldr	x0, [x0, #80]
  28:	str	x0, [sp, #40]
  2c:	ldr	x0, [sp, #40]
  30:	cmp	x0, #0x0
  34:	b.eq	44 <gomp_icv+0x30>  // b.none
  38:	ldr	x0, [sp, #40]
  3c:	add	x0, x0, #0x90
  40:	b	60 <gomp_icv+0x4c>
  44:	ldrb	w0, [sp, #31]
  48:	cmp	w0, #0x0
  4c:	b.eq	58 <gomp_icv+0x44>  // b.none
  50:	bl	0 <gomp_new_icv>
  54:	b	60 <gomp_icv+0x4c>
  58:	adrp	x0, 0 <gomp_global_icv>
  5c:	add	x0, x0, #0x0
  60:	ldp	x29, x30, [sp], #48
  64:	ret

0000000000000068 <gomp_cpuset_popcount>:
  68:	stp	x29, x30, [sp, #-32]!
  6c:	mov	x29, sp
  70:	str	x0, [sp, #24]
  74:	str	x1, [sp, #16]
  78:	ldr	x1, [sp, #16]
  7c:	ldr	x0, [sp, #24]
  80:	bl	0 <__sched_cpucount>
  84:	sxtw	x0, w0
  88:	ldp	x29, x30, [sp], #32
  8c:	ret

0000000000000090 <gomp_init_num_threads>:
  90:	stp	x29, x30, [sp, #-48]!
  94:	mov	x29, sp
  98:	mov	w0, #0x53                  	// #83
  9c:	bl	0 <sysconf>
  a0:	mov	x1, x0
  a4:	adrp	x0, 8 <gomp_thread+0x8>
  a8:	add	x0, x0, #0x0
  ac:	str	x1, [x0]
  b0:	adrp	x0, 8 <gomp_thread+0x8>
  b4:	add	x0, x0, #0x0
  b8:	ldr	x0, [x0]
  bc:	add	x0, x0, #0x3f
  c0:	lsr	x0, x0, #6
  c4:	lsl	x1, x0, #3
  c8:	adrp	x0, 8 <gomp_thread+0x8>
  cc:	add	x0, x0, #0x0
  d0:	str	x1, [x0]
  d4:	adrp	x0, 8 <gomp_thread+0x8>
  d8:	add	x0, x0, #0x0
  dc:	ldr	x0, [x0]
  e0:	bl	0 <gomp_malloc>
  e4:	mov	x1, x0
  e8:	adrp	x0, 8 <gomp_thread+0x8>
  ec:	add	x0, x0, #0x0
  f0:	str	x1, [x0]
  f4:	bl	0 <pthread_self>
  f8:	mov	x3, x0
  fc:	adrp	x0, 8 <gomp_thread+0x8>
 100:	add	x0, x0, #0x0
 104:	ldr	x1, [x0]
 108:	adrp	x0, 8 <gomp_thread+0x8>
 10c:	add	x0, x0, #0x0
 110:	ldr	x0, [x0]
 114:	mov	x2, x0
 118:	mov	x0, x3
 11c:	bl	0 <pthread_getaffinity_np>
 120:	str	w0, [sp, #36]
 124:	ldr	w0, [sp, #36]
 128:	cmp	w0, #0x0
 12c:	b.ne	260 <gomp_init_num_threads+0x1d0>  // b.any
 130:	adrp	x0, 8 <gomp_thread+0x8>
 134:	add	x0, x0, #0x0
 138:	ldr	x2, [x0]
 13c:	adrp	x0, 8 <gomp_thread+0x8>
 140:	add	x0, x0, #0x0
 144:	ldr	x0, [x0]
 148:	mov	x1, x0
 14c:	mov	x0, x2
 150:	bl	68 <gomp_cpuset_popcount>
 154:	mov	x1, x0
 158:	adrp	x0, 0 <gomp_global_icv>
 15c:	add	x0, x0, #0x0
 160:	str	x1, [x0]
 164:	adrp	x0, 0 <gomp_global_icv>
 168:	add	x0, x0, #0x0
 16c:	ldr	x0, [x0]
 170:	cmp	x0, #0x0
 174:	b.eq	344 <gomp_init_num_threads+0x2b4>  // b.none
 178:	adrp	x0, 8 <gomp_thread+0x8>
 17c:	add	x0, x0, #0x0
 180:	ldr	x1, [x0]
 184:	adrp	x0, 0 <gomp_thread>
 188:	add	x0, x0, #0x0
 18c:	str	x1, [x0]
 190:	adrp	x0, 8 <gomp_thread+0x8>
 194:	add	x0, x0, #0x0
 198:	ldr	x0, [x0]
 19c:	lsl	x0, x0, #3
 1a0:	str	x0, [sp, #40]
 1a4:	b	22c <gomp_init_num_threads+0x19c>
 1a8:	ldr	x0, [sp, #40]
 1ac:	sub	x0, x0, #0x1
 1b0:	str	x0, [sp, #16]
 1b4:	ldr	x0, [sp, #16]
 1b8:	lsr	x1, x0, #3
 1bc:	adrp	x0, 8 <gomp_thread+0x8>
 1c0:	add	x0, x0, #0x0
 1c4:	ldr	x0, [x0]
 1c8:	cmp	x1, x0
 1cc:	b.cs	214 <gomp_init_num_threads+0x184>  // b.hs, b.nlast
 1d0:	adrp	x0, 8 <gomp_thread+0x8>
 1d4:	add	x0, x0, #0x0
 1d8:	ldr	x0, [x0]
 1dc:	mov	x1, x0
 1e0:	ldr	x0, [sp, #16]
 1e4:	lsr	x0, x0, #6
 1e8:	lsl	x0, x0, #3
 1ec:	add	x0, x1, x0
 1f0:	ldr	x1, [x0]
 1f4:	ldr	x0, [sp, #16]
 1f8:	and	w0, w0, #0x3f
 1fc:	lsr	x0, x1, x0
 200:	and	x0, x0, #0x1
 204:	cmp	x0, #0x0
 208:	b.eq	214 <gomp_init_num_threads+0x184>  // b.none
 20c:	mov	w0, #0x1                   	// #1
 210:	b	218 <gomp_init_num_threads+0x188>
 214:	mov	w0, #0x0                   	// #0
 218:	cmp	w0, #0x0
 21c:	b.ne	23c <gomp_init_num_threads+0x1ac>  // b.any
 220:	ldr	x0, [sp, #40]
 224:	sub	x0, x0, #0x1
 228:	str	x0, [sp, #40]
 22c:	ldr	x0, [sp, #40]
 230:	cmp	x0, #0x0
 234:	b.ne	1a8 <gomp_init_num_threads+0x118>  // b.any
 238:	b	240 <gomp_init_num_threads+0x1b0>
 23c:	nop
 240:	ldr	x0, [sp, #40]
 244:	add	x0, x0, #0x3f
 248:	lsr	x0, x0, #6
 24c:	lsl	x1, x0, #3
 250:	adrp	x0, 8 <gomp_thread+0x8>
 254:	add	x0, x0, #0x0
 258:	str	x1, [x0]
 25c:	b	3a8 <gomp_init_num_threads+0x318>
 260:	ldr	w0, [sp, #36]
 264:	cmp	w0, #0x16
 268:	b.ne	34c <gomp_init_num_threads+0x2bc>  // b.any
 26c:	adrp	x0, 8 <gomp_thread+0x8>
 270:	add	x0, x0, #0x0
 274:	ldr	x0, [x0]
 278:	cmp	x0, #0x7f
 27c:	b.hi	294 <gomp_init_num_threads+0x204>  // b.pmore
 280:	adrp	x0, 8 <gomp_thread+0x8>
 284:	add	x0, x0, #0x0
 288:	mov	x1, #0x80                  	// #128
 28c:	str	x1, [x0]
 290:	b	2b0 <gomp_init_num_threads+0x220>
 294:	adrp	x0, 8 <gomp_thread+0x8>
 298:	add	x0, x0, #0x0
 29c:	ldr	x0, [x0]
 2a0:	lsl	x1, x0, #1
 2a4:	adrp	x0, 8 <gomp_thread+0x8>
 2a8:	add	x0, x0, #0x0
 2ac:	str	x1, [x0]
 2b0:	adrp	x0, 8 <gomp_thread+0x8>
 2b4:	add	x0, x0, #0x0
 2b8:	ldr	x0, [x0]
 2bc:	cmp	x0, #0x3ff
 2c0:	b.hi	2fc <gomp_init_num_threads+0x26c>  // b.pmore
 2c4:	adrp	x0, 8 <gomp_thread+0x8>
 2c8:	add	x0, x0, #0x0
 2cc:	ldr	x2, [x0]
 2d0:	adrp	x0, 8 <gomp_thread+0x8>
 2d4:	add	x0, x0, #0x0
 2d8:	ldr	x0, [x0]
 2dc:	mov	x1, x0
 2e0:	mov	x0, x2
 2e4:	bl	0 <gomp_realloc>
 2e8:	mov	x1, x0
 2ec:	adrp	x0, 8 <gomp_thread+0x8>
 2f0:	add	x0, x0, #0x0
 2f4:	str	x1, [x0]
 2f8:	b	f4 <gomp_init_num_threads+0x64>
 2fc:	adrp	x0, 8 <gomp_thread+0x8>
 300:	add	x0, x0, #0x0
 304:	ldr	x2, [x0]
 308:	adrp	x0, 8 <gomp_thread+0x8>
 30c:	add	x0, x0, #0x0
 310:	ldr	x0, [x0]
 314:	mov	x1, x0
 318:	mov	x0, x2
 31c:	bl	0 <realloc>
 320:	str	x0, [sp, #24]
 324:	ldr	x0, [sp, #24]
 328:	cmp	x0, #0x0
 32c:	b.eq	354 <gomp_init_num_threads+0x2c4>  // b.none
 330:	adrp	x0, 8 <gomp_thread+0x8>
 334:	add	x0, x0, #0x0
 338:	ldr	x1, [sp, #24]
 33c:	str	x1, [x0]
 340:	b	f4 <gomp_init_num_threads+0x64>
 344:	nop
 348:	b	358 <gomp_init_num_threads+0x2c8>
 34c:	nop
 350:	b	358 <gomp_init_num_threads+0x2c8>
 354:	nop
 358:	adrp	x0, 8 <gomp_thread+0x8>
 35c:	add	x0, x0, #0x0
 360:	str	xzr, [x0]
 364:	adrp	x0, 0 <gomp_global_icv>
 368:	add	x0, x0, #0x0
 36c:	mov	x1, #0x1                   	// #1
 370:	str	x1, [x0]
 374:	adrp	x0, 8 <gomp_thread+0x8>
 378:	add	x0, x0, #0x0
 37c:	ldr	x0, [x0]
 380:	bl	0 <free>
 384:	adrp	x0, 8 <gomp_thread+0x8>
 388:	add	x0, x0, #0x0
 38c:	str	xzr, [x0]
 390:	mov	w0, #0x54                  	// #84
 394:	bl	0 <sysconf>
 398:	mov	x1, x0
 39c:	adrp	x0, 0 <gomp_global_icv>
 3a0:	add	x0, x0, #0x0
 3a4:	str	x1, [x0]
 3a8:	ldp	x29, x30, [sp], #48
 3ac:	ret

00000000000003b0 <get_num_procs>:
 3b0:	stp	x29, x30, [sp, #-32]!
 3b4:	mov	x29, sp
 3b8:	adrp	x0, 0 <gomp_places_list>
 3bc:	add	x0, x0, #0x0
 3c0:	ldr	x0, [x0]
 3c4:	cmp	x0, #0x0
 3c8:	b.ne	458 <get_num_procs+0xa8>  // b.any
 3cc:	adrp	x0, 8 <gomp_thread+0x8>
 3d0:	add	x0, x0, #0x0
 3d4:	ldr	x0, [x0]
 3d8:	cmp	x0, #0x0
 3dc:	b.eq	468 <get_num_procs+0xb8>  // b.none
 3e0:	bl	0 <pthread_self>
 3e4:	mov	x3, x0
 3e8:	adrp	x0, 0 <gomp_thread>
 3ec:	add	x0, x0, #0x0
 3f0:	ldr	x1, [x0]
 3f4:	adrp	x0, 8 <gomp_thread+0x8>
 3f8:	add	x0, x0, #0x0
 3fc:	ldr	x0, [x0]
 400:	mov	x2, x0
 404:	mov	x0, x3
 408:	bl	0 <pthread_getaffinity_np>
 40c:	cmp	w0, #0x0
 410:	b.ne	468 <get_num_procs+0xb8>  // b.any
 414:	adrp	x0, 0 <gomp_thread>
 418:	add	x0, x0, #0x0
 41c:	ldr	x2, [x0]
 420:	adrp	x0, 8 <gomp_thread+0x8>
 424:	add	x0, x0, #0x0
 428:	ldr	x0, [x0]
 42c:	mov	x1, x0
 430:	mov	x0, x2
 434:	bl	68 <gomp_cpuset_popcount>
 438:	str	w0, [sp, #28]
 43c:	ldr	w0, [sp, #28]
 440:	cmp	w0, #0x0
 444:	b.eq	450 <get_num_procs+0xa0>  // b.none
 448:	ldr	w0, [sp, #28]
 44c:	b	470 <get_num_procs+0xc0>
 450:	mov	w0, #0x1                   	// #1
 454:	b	470 <get_num_procs+0xc0>
 458:	adrp	x0, 0 <gomp_available_cpus>
 45c:	add	x0, x0, #0x0
 460:	ldr	x0, [x0]
 464:	b	470 <get_num_procs+0xc0>
 468:	mov	w0, #0x54                  	// #84
 46c:	bl	0 <sysconf>
 470:	ldp	x29, x30, [sp], #32
 474:	ret

0000000000000478 <gomp_dynamic_max_threads>:
 478:	stp	x29, x30, [sp, #-64]!
 47c:	mov	x29, sp
 480:	mov	w0, #0x0                   	// #0
 484:	bl	14 <gomp_icv>
 488:	ldr	x0, [x0]
 48c:	str	w0, [sp, #52]
 490:	bl	3b0 <get_num_procs>
 494:	str	w0, [sp, #60]
 498:	ldr	w1, [sp, #60]
 49c:	ldr	w0, [sp, #52]
 4a0:	cmp	w1, w0
 4a4:	b.ls	4b0 <gomp_dynamic_max_threads+0x38>  // b.plast
 4a8:	ldr	w0, [sp, #52]
 4ac:	str	w0, [sp, #60]
 4b0:	str	wzr, [sp, #56]
 4b4:	add	x0, sp, #0x18
 4b8:	mov	w1, #0x3                   	// #3
 4bc:	bl	0 <getloadavg>
 4c0:	cmp	w0, #0x3
 4c4:	b.ne	4e0 <gomp_dynamic_max_threads+0x68>  // b.any
 4c8:	ldr	d0, [sp, #40]
 4cc:	adrp	x0, 0 <gomp_thread>
 4d0:	ldr	d1, [x0]
 4d4:	fadd	d0, d0, d1
 4d8:	fcvtzu	w0, d0
 4dc:	str	w0, [sp, #56]
 4e0:	ldr	w1, [sp, #56]
 4e4:	ldr	w0, [sp, #60]
 4e8:	cmp	w1, w0
 4ec:	b.cc	4f8 <gomp_dynamic_max_threads+0x80>  // b.lo, b.ul, b.last
 4f0:	mov	w0, #0x1                   	// #1
 4f4:	b	504 <gomp_dynamic_max_threads+0x8c>
 4f8:	ldr	w1, [sp, #60]
 4fc:	ldr	w0, [sp, #56]
 500:	sub	w0, w1, w0
 504:	ldp	x29, x30, [sp], #64
 508:	ret

000000000000050c <gomp_ialias_omp_get_num_procs>:
 50c:	stp	x29, x30, [sp, #-16]!
 510:	mov	x29, sp
 514:	bl	3b0 <get_num_procs>
 518:	ldp	x29, x30, [sp], #16
 51c:	ret

sem.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <futex_wait>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	w1, [sp, #20]
  10:	adrp	x0, 0 <gomp_futex_wait>
  14:	add	x0, x0, #0x0
  18:	ldr	w0, [x0]
  1c:	mov	x4, #0x0                   	// #0
  20:	ldr	w3, [sp, #20]
  24:	mov	w2, w0
  28:	ldr	x1, [sp, #24]
  2c:	mov	x0, #0x62                  	// #98
  30:	bl	0 <syscall>
  34:	str	w0, [sp, #44]
  38:	ldr	w0, [sp, #44]
  3c:	lsr	w0, w0, #31
  40:	and	w0, w0, #0xff
  44:	and	x0, x0, #0xff
  48:	cmp	x0, #0x0
  4c:	b.eq	cc <futex_wait+0xcc>  // b.none
  50:	bl	0 <__errno_location>
  54:	ldr	w0, [x0]
  58:	cmp	w0, #0x26
  5c:	cset	w0, eq  // eq = none
  60:	and	w0, w0, #0xff
  64:	and	x0, x0, #0xff
  68:	cmp	x0, #0x0
  6c:	b.eq	cc <futex_wait+0xcc>  // b.none
  70:	adrp	x0, 0 <gomp_futex_wait>
  74:	add	x0, x0, #0x0
  78:	ldr	w0, [x0]
  7c:	and	w1, w0, #0xffffff7f
  80:	adrp	x0, 0 <gomp_futex_wait>
  84:	add	x0, x0, #0x0
  88:	str	w1, [x0]
  8c:	adrp	x0, 0 <gomp_futex_wake>
  90:	add	x0, x0, #0x0
  94:	ldr	w0, [x0]
  98:	and	w1, w0, #0xffffff7f
  9c:	adrp	x0, 0 <gomp_futex_wake>
  a0:	add	x0, x0, #0x0
  a4:	str	w1, [x0]
  a8:	adrp	x0, 0 <gomp_futex_wait>
  ac:	add	x0, x0, #0x0
  b0:	ldr	w0, [x0]
  b4:	mov	x4, #0x0                   	// #0
  b8:	ldr	w3, [sp, #20]
  bc:	mov	w2, w0
  c0:	ldr	x1, [sp, #24]
  c4:	mov	x0, #0x62                  	// #98
  c8:	bl	0 <syscall>
  cc:	nop
  d0:	ldp	x29, x30, [sp], #48
  d4:	ret

00000000000000d8 <futex_wake>:
  d8:	stp	x29, x30, [sp, #-48]!
  dc:	mov	x29, sp
  e0:	str	x0, [sp, #24]
  e4:	str	w1, [sp, #20]
  e8:	adrp	x0, 0 <gomp_futex_wake>
  ec:	add	x0, x0, #0x0
  f0:	ldr	w0, [x0]
  f4:	ldr	w3, [sp, #20]
  f8:	mov	w2, w0
  fc:	ldr	x1, [sp, #24]
 100:	mov	x0, #0x62                  	// #98
 104:	bl	0 <syscall>
 108:	str	w0, [sp, #44]
 10c:	ldr	w0, [sp, #44]
 110:	lsr	w0, w0, #31
 114:	and	w0, w0, #0xff
 118:	and	x0, x0, #0xff
 11c:	cmp	x0, #0x0
 120:	b.eq	19c <futex_wake+0xc4>  // b.none
 124:	bl	0 <__errno_location>
 128:	ldr	w0, [x0]
 12c:	cmp	w0, #0x26
 130:	cset	w0, eq  // eq = none
 134:	and	w0, w0, #0xff
 138:	and	x0, x0, #0xff
 13c:	cmp	x0, #0x0
 140:	b.eq	19c <futex_wake+0xc4>  // b.none
 144:	adrp	x0, 0 <gomp_futex_wait>
 148:	add	x0, x0, #0x0
 14c:	ldr	w0, [x0]
 150:	and	w1, w0, #0xffffff7f
 154:	adrp	x0, 0 <gomp_futex_wait>
 158:	add	x0, x0, #0x0
 15c:	str	w1, [x0]
 160:	adrp	x0, 0 <gomp_futex_wake>
 164:	add	x0, x0, #0x0
 168:	ldr	w0, [x0]
 16c:	and	w1, w0, #0xffffff7f
 170:	adrp	x0, 0 <gomp_futex_wake>
 174:	add	x0, x0, #0x0
 178:	str	w1, [x0]
 17c:	adrp	x0, 0 <gomp_futex_wake>
 180:	add	x0, x0, #0x0
 184:	ldr	w0, [x0]
 188:	ldr	w3, [sp, #20]
 18c:	mov	w2, w0
 190:	ldr	x1, [sp, #24]
 194:	mov	x0, #0x62                  	// #98
 198:	bl	0 <syscall>
 19c:	nop
 1a0:	ldp	x29, x30, [sp], #48
 1a4:	ret

00000000000001a8 <cpu_relax>:
 1a8:	nop
 1ac:	ret

00000000000001b0 <do_spin>:
 1b0:	stp	x29, x30, [sp, #-48]!
 1b4:	mov	x29, sp
 1b8:	str	x0, [sp, #24]
 1bc:	str	w1, [sp, #20]
 1c0:	adrp	x0, 0 <gomp_spin_count_var>
 1c4:	add	x0, x0, #0x0
 1c8:	ldr	x0, [x0]
 1cc:	str	x0, [sp, #32]
 1d0:	adrp	x0, 0 <gomp_managed_threads>
 1d4:	add	x0, x0, #0x0
 1d8:	ldr	x1, [x0]
 1dc:	adrp	x0, 0 <gomp_available_cpus>
 1e0:	add	x0, x0, #0x0
 1e4:	ldr	x0, [x0]
 1e8:	cmp	x1, x0
 1ec:	cset	w0, hi  // hi = pmore
 1f0:	and	w0, w0, #0xff
 1f4:	and	x0, x0, #0xff
 1f8:	cmp	x0, #0x0
 1fc:	b.eq	210 <do_spin+0x60>  // b.none
 200:	adrp	x0, 0 <gomp_throttled_spin_count_var>
 204:	add	x0, x0, #0x0
 208:	ldr	x0, [x0]
 20c:	str	x0, [sp, #32]
 210:	str	xzr, [sp, #40]
 214:	b	258 <do_spin+0xa8>
 218:	ldr	x0, [sp, #24]
 21c:	ldr	w0, [x0]
 220:	mov	w1, w0
 224:	ldr	w0, [sp, #20]
 228:	cmp	w0, w1
 22c:	cset	w0, ne  // ne = any
 230:	and	w0, w0, #0xff
 234:	and	x0, x0, #0xff
 238:	cmp	x0, #0x0
 23c:	b.eq	248 <do_spin+0x98>  // b.none
 240:	mov	w0, #0x0                   	// #0
 244:	b	26c <do_spin+0xbc>
 248:	bl	1a8 <cpu_relax>
 24c:	ldr	x0, [sp, #40]
 250:	add	x0, x0, #0x1
 254:	str	x0, [sp, #40]
 258:	ldr	x1, [sp, #40]
 25c:	ldr	x0, [sp, #32]
 260:	cmp	x1, x0
 264:	b.cc	218 <do_spin+0x68>  // b.lo, b.ul, b.last
 268:	mov	w0, #0x1                   	// #1
 26c:	ldp	x29, x30, [sp], #48
 270:	ret

0000000000000274 <do_wait>:
 274:	stp	x29, x30, [sp, #-32]!
 278:	mov	x29, sp
 27c:	str	x0, [sp, #24]
 280:	str	w1, [sp, #20]
 284:	ldr	w1, [sp, #20]
 288:	ldr	x0, [sp, #24]
 28c:	bl	1b0 <do_spin>
 290:	cmp	w0, #0x0
 294:	b.eq	2a4 <do_wait+0x30>  // b.none
 298:	ldr	w1, [sp, #20]
 29c:	ldr	x0, [sp, #24]
 2a0:	bl	0 <futex_wait>
 2a4:	nop
 2a8:	ldp	x29, x30, [sp], #32
 2ac:	ret

00000000000002b0 <gomp_sem_wait_slow>:
 2b0:	stp	x29, x30, [sp, #-48]!
 2b4:	mov	x29, sp
 2b8:	str	x0, [sp, #24]
 2bc:	str	w1, [sp, #20]
 2c0:	b	3c0 <gomp_sem_wait_slow+0x110>
 2c4:	mov	w1, #0x0                   	// #0
 2c8:	ldr	x0, [sp, #24]
 2cc:	bl	1b0 <do_spin>
 2d0:	cmp	w0, #0x0
 2d4:	b.eq	334 <gomp_sem_wait_slow+0x84>  // b.none
 2d8:	ldr	x1, [sp, #24]
 2dc:	add	x0, sp, #0x14
 2e0:	ldr	w3, [x0]
 2e4:	mov	w4, #0x80000000            	// #-2147483648
 2e8:	ldaxr	w2, [x1]
 2ec:	cmp	w2, w3
 2f0:	b.ne	2fc <gomp_sem_wait_slow+0x4c>  // b.any
 2f4:	stxr	w5, w4, [x1]
 2f8:	cbnz	w5, 2e8 <gomp_sem_wait_slow+0x38>
 2fc:	cset	w1, eq  // eq = none
 300:	cmp	w1, #0x0
 304:	b.ne	30c <gomp_sem_wait_slow+0x5c>  // b.any
 308:	str	w2, [x0]
 30c:	mov	w0, w1
 310:	cmp	w0, #0x0
 314:	b.eq	334 <gomp_sem_wait_slow+0x84>  // b.none
 318:	mov	w1, #0x80000000            	// #-2147483648
 31c:	ldr	x0, [sp, #24]
 320:	bl	0 <futex_wait>
 324:	ldr	x0, [sp, #24]
 328:	ldr	w0, [x0]
 32c:	str	w0, [sp, #20]
 330:	b	3cc <gomp_sem_wait_slow+0x11c>
 334:	ldr	x0, [sp, #24]
 338:	ldr	w0, [x0]
 33c:	str	w0, [sp, #20]
 340:	ldr	w0, [sp, #20]
 344:	mvn	w0, w0
 348:	lsr	w0, w0, #31
 34c:	and	w0, w0, #0xff
 350:	and	x0, x0, #0xff
 354:	cmp	x0, #0x0
 358:	b.eq	3c0 <gomp_sem_wait_slow+0x110>  // b.none
 35c:	ldr	w0, [sp, #20]
 360:	cmp	w0, #0x0
 364:	cset	w0, ne  // ne = any
 368:	and	w0, w0, #0xff
 36c:	and	x0, x0, #0xff
 370:	cmp	x0, #0x0
 374:	b.eq	3c0 <gomp_sem_wait_slow+0x110>  // b.none
 378:	ldr	w0, [sp, #20]
 37c:	sub	w0, w0, #0x1
 380:	mov	w4, w0
 384:	ldr	x1, [sp, #24]
 388:	add	x0, sp, #0x14
 38c:	ldr	w3, [x0]
 390:	ldaxr	w2, [x1]
 394:	cmp	w2, w3
 398:	b.ne	3a4 <gomp_sem_wait_slow+0xf4>  // b.any
 39c:	stxr	w5, w4, [x1]
 3a0:	cbnz	w5, 390 <gomp_sem_wait_slow+0xe0>
 3a4:	cset	w1, eq  // eq = none
 3a8:	cmp	w1, #0x0
 3ac:	b.ne	3b4 <gomp_sem_wait_slow+0x104>  // b.any
 3b0:	str	w2, [x0]
 3b4:	mov	w0, w1
 3b8:	cmp	w0, #0x0
 3bc:	b.ne	480 <gomp_sem_wait_slow+0x1d0>  // b.any
 3c0:	ldr	w0, [sp, #20]
 3c4:	cmp	w0, #0x0
 3c8:	b.eq	2c4 <gomp_sem_wait_slow+0x14>  // b.none
 3cc:	ldr	w0, [sp, #20]
 3d0:	and	w0, w0, #0x7fffffff
 3d4:	str	w0, [sp, #40]
 3d8:	mov	w0, #0x80000000            	// #-2147483648
 3dc:	str	w0, [sp, #44]
 3e0:	ldr	w0, [sp, #40]
 3e4:	cmp	w0, #0x0
 3e8:	b.eq	400 <gomp_sem_wait_slow+0x150>  // b.none
 3ec:	ldr	w0, [sp, #40]
 3f0:	sub	w1, w0, #0x1
 3f4:	ldr	w0, [sp, #44]
 3f8:	orr	w0, w1, w0
 3fc:	str	w0, [sp, #44]
 400:	ldr	w4, [sp, #44]
 404:	ldr	x1, [sp, #24]
 408:	add	x0, sp, #0x14
 40c:	ldr	w3, [x0]
 410:	ldaxr	w2, [x1]
 414:	cmp	w2, w3
 418:	b.ne	424 <gomp_sem_wait_slow+0x174>  // b.any
 41c:	stxr	w5, w4, [x1]
 420:	cbnz	w5, 410 <gomp_sem_wait_slow+0x160>
 424:	cset	w1, eq  // eq = none
 428:	cmp	w1, #0x0
 42c:	b.ne	434 <gomp_sem_wait_slow+0x184>  // b.any
 430:	str	w2, [x0]
 434:	mov	w0, w1
 438:	cmp	w0, #0x0
 43c:	b.eq	3cc <gomp_sem_wait_slow+0x11c>  // b.none
 440:	ldr	w0, [sp, #40]
 444:	cmp	w0, #0x0
 448:	b.eq	464 <gomp_sem_wait_slow+0x1b4>  // b.none
 44c:	ldr	w0, [sp, #40]
 450:	cmp	w0, #0x1
 454:	b.ls	488 <gomp_sem_wait_slow+0x1d8>  // b.plast
 458:	ldr	x0, [sp, #24]
 45c:	bl	494 <gomp_sem_post_slow>
 460:	b	488 <gomp_sem_wait_slow+0x1d8>
 464:	mov	w1, #0x80000000            	// #-2147483648
 468:	ldr	x0, [sp, #24]
 46c:	bl	274 <do_wait>
 470:	ldr	x0, [sp, #24]
 474:	ldr	w0, [x0]
 478:	str	w0, [sp, #20]
 47c:	b	3cc <gomp_sem_wait_slow+0x11c>
 480:	nop
 484:	b	48c <gomp_sem_wait_slow+0x1dc>
 488:	nop
 48c:	ldp	x29, x30, [sp], #48
 490:	ret

0000000000000494 <gomp_sem_post_slow>:
 494:	stp	x29, x30, [sp, #-32]!
 498:	mov	x29, sp
 49c:	str	x0, [sp, #24]
 4a0:	mov	w1, #0x1                   	// #1
 4a4:	ldr	x0, [sp, #24]
 4a8:	bl	d8 <futex_wake>
 4ac:	nop
 4b0:	ldp	x29, x30, [sp], #32
 4b4:	ret

bar.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_lock>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	wzr, [sp, #44]
  10:	ldr	x1, [sp, #24]
  14:	add	x0, sp, #0x2c
  18:	ldr	w3, [x0]
  1c:	mov	w4, #0x1                   	// #1
  20:	ldaxr	w2, [x1]
  24:	cmp	w2, w3
  28:	b.ne	34 <gomp_mutex_lock+0x34>  // b.any
  2c:	stxr	w5, w4, [x1]
  30:	cbnz	w5, 20 <gomp_mutex_lock+0x20>
  34:	cset	w1, eq  // eq = none
  38:	cmp	w1, #0x0
  3c:	b.ne	44 <gomp_mutex_lock+0x44>  // b.any
  40:	str	w2, [x0]
  44:	mov	w0, w1
  48:	eor	w0, w0, #0x1
  4c:	and	w0, w0, #0xff
  50:	cmp	w0, #0x0
  54:	b.eq	68 <gomp_mutex_lock+0x68>  // b.none
  58:	ldr	w0, [sp, #44]
  5c:	mov	w1, w0
  60:	ldr	x0, [sp, #24]
  64:	bl	0 <gomp_mutex_lock_slow>
  68:	nop
  6c:	ldp	x29, x30, [sp], #48
  70:	ret

0000000000000074 <gomp_mutex_unlock>:
  74:	stp	x29, x30, [sp, #-48]!
  78:	mov	x29, sp
  7c:	str	x0, [sp, #24]
  80:	ldr	x1, [sp, #24]
  84:	ldxr	w0, [x1]
  88:	stlxr	w2, wzr, [x1]
  8c:	cbnz	w2, 84 <gomp_mutex_unlock+0x10>
  90:	str	w0, [sp, #44]
  94:	ldr	w0, [sp, #44]
  98:	lsr	w0, w0, #31
  9c:	and	w0, w0, #0xff
  a0:	and	x0, x0, #0xff
  a4:	cmp	x0, #0x0
  a8:	b.eq	b4 <gomp_mutex_unlock+0x40>  // b.none
  ac:	ldr	x0, [sp, #24]
  b0:	bl	0 <gomp_mutex_unlock_slow>
  b4:	nop
  b8:	ldp	x29, x30, [sp], #48
  bc:	ret

00000000000000c0 <gomp_barrier_wait_start>:
  c0:	sub	sp, sp, #0x20
  c4:	str	x0, [sp, #8]
  c8:	ldr	x0, [sp, #8]
  cc:	add	x0, x0, #0x4
  d0:	ldar	w0, [x0]
  d4:	str	w0, [sp, #28]
  d8:	ldr	w0, [sp, #28]
  dc:	and	w0, w0, #0xfffffffc
  e0:	str	w0, [sp, #28]
  e4:	ldr	x0, [sp, #8]
  e8:	add	x0, x0, #0x40
  ec:	ldaxr	w1, [x0]
  f0:	sub	w1, w1, #0x1
  f4:	stlxr	w2, w1, [x0]
  f8:	cbnz	w2, ec <gomp_barrier_wait_start+0x2c>
  fc:	cmp	w1, #0x0
 100:	b.ne	110 <gomp_barrier_wait_start+0x50>  // b.any
 104:	ldr	w0, [sp, #28]
 108:	orr	w0, w0, #0x1
 10c:	str	w0, [sp, #28]
 110:	ldr	w0, [sp, #28]
 114:	add	sp, sp, #0x20
 118:	ret

000000000000011c <gomp_barrier_wait_final_start>:
 11c:	sub	sp, sp, #0x20
 120:	str	x0, [sp, #8]
 124:	ldr	x0, [sp, #8]
 128:	add	x0, x0, #0x4
 12c:	ldar	w0, [x0]
 130:	str	w0, [sp, #28]
 134:	ldr	w0, [sp, #28]
 138:	and	w0, w0, #0xfffffffc
 13c:	str	w0, [sp, #28]
 140:	ldr	x0, [sp, #8]
 144:	add	x0, x0, #0x44
 148:	ldaxr	w1, [x0]
 14c:	sub	w1, w1, #0x1
 150:	stlxr	w2, w1, [x0]
 154:	cbnz	w2, 148 <gomp_barrier_wait_final_start+0x2c>
 158:	cmp	w1, #0x0
 15c:	b.ne	16c <gomp_barrier_wait_final_start+0x50>  // b.any
 160:	ldr	w0, [sp, #28]
 164:	orr	w0, w0, #0x1
 168:	str	w0, [sp, #28]
 16c:	ldr	w0, [sp, #28]
 170:	add	sp, sp, #0x20
 174:	ret

0000000000000178 <gomp_thread>:
 178:	mrs	x1, tpidr_el0
 17c:	adrp	x0, 0 <gomp_tls_data>
 180:	ldr	x0, [x0]
 184:	add	x0, x1, x0
 188:	ret

000000000000018c <futex_wait>:
 18c:	stp	x29, x30, [sp, #-48]!
 190:	mov	x29, sp
 194:	str	x0, [sp, #24]
 198:	str	w1, [sp, #20]
 19c:	adrp	x0, 0 <gomp_futex_wait>
 1a0:	add	x0, x0, #0x0
 1a4:	ldr	w0, [x0]
 1a8:	mov	x4, #0x0                   	// #0
 1ac:	ldr	w3, [sp, #20]
 1b0:	mov	w2, w0
 1b4:	ldr	x1, [sp, #24]
 1b8:	mov	x0, #0x62                  	// #98
 1bc:	bl	0 <syscall>
 1c0:	str	w0, [sp, #44]
 1c4:	ldr	w0, [sp, #44]
 1c8:	lsr	w0, w0, #31
 1cc:	and	w0, w0, #0xff
 1d0:	and	x0, x0, #0xff
 1d4:	cmp	x0, #0x0
 1d8:	b.eq	258 <futex_wait+0xcc>  // b.none
 1dc:	bl	0 <__errno_location>
 1e0:	ldr	w0, [x0]
 1e4:	cmp	w0, #0x26
 1e8:	cset	w0, eq  // eq = none
 1ec:	and	w0, w0, #0xff
 1f0:	and	x0, x0, #0xff
 1f4:	cmp	x0, #0x0
 1f8:	b.eq	258 <futex_wait+0xcc>  // b.none
 1fc:	adrp	x0, 0 <gomp_futex_wait>
 200:	add	x0, x0, #0x0
 204:	ldr	w0, [x0]
 208:	and	w1, w0, #0xffffff7f
 20c:	adrp	x0, 0 <gomp_futex_wait>
 210:	add	x0, x0, #0x0
 214:	str	w1, [x0]
 218:	adrp	x0, 0 <gomp_futex_wake>
 21c:	add	x0, x0, #0x0
 220:	ldr	w0, [x0]
 224:	and	w1, w0, #0xffffff7f
 228:	adrp	x0, 0 <gomp_futex_wake>
 22c:	add	x0, x0, #0x0
 230:	str	w1, [x0]
 234:	adrp	x0, 0 <gomp_futex_wait>
 238:	add	x0, x0, #0x0
 23c:	ldr	w0, [x0]
 240:	mov	x4, #0x0                   	// #0
 244:	ldr	w3, [sp, #20]
 248:	mov	w2, w0
 24c:	ldr	x1, [sp, #24]
 250:	mov	x0, #0x62                  	// #98
 254:	bl	0 <syscall>
 258:	nop
 25c:	ldp	x29, x30, [sp], #48
 260:	ret

0000000000000264 <futex_wake>:
 264:	stp	x29, x30, [sp, #-48]!
 268:	mov	x29, sp
 26c:	str	x0, [sp, #24]
 270:	str	w1, [sp, #20]
 274:	adrp	x0, 0 <gomp_futex_wake>
 278:	add	x0, x0, #0x0
 27c:	ldr	w0, [x0]
 280:	ldr	w3, [sp, #20]
 284:	mov	w2, w0
 288:	ldr	x1, [sp, #24]
 28c:	mov	x0, #0x62                  	// #98
 290:	bl	0 <syscall>
 294:	str	w0, [sp, #44]
 298:	ldr	w0, [sp, #44]
 29c:	lsr	w0, w0, #31
 2a0:	and	w0, w0, #0xff
 2a4:	and	x0, x0, #0xff
 2a8:	cmp	x0, #0x0
 2ac:	b.eq	328 <futex_wake+0xc4>  // b.none
 2b0:	bl	0 <__errno_location>
 2b4:	ldr	w0, [x0]
 2b8:	cmp	w0, #0x26
 2bc:	cset	w0, eq  // eq = none
 2c0:	and	w0, w0, #0xff
 2c4:	and	x0, x0, #0xff
 2c8:	cmp	x0, #0x0
 2cc:	b.eq	328 <futex_wake+0xc4>  // b.none
 2d0:	adrp	x0, 0 <gomp_futex_wait>
 2d4:	add	x0, x0, #0x0
 2d8:	ldr	w0, [x0]
 2dc:	and	w1, w0, #0xffffff7f
 2e0:	adrp	x0, 0 <gomp_futex_wait>
 2e4:	add	x0, x0, #0x0
 2e8:	str	w1, [x0]
 2ec:	adrp	x0, 0 <gomp_futex_wake>
 2f0:	add	x0, x0, #0x0
 2f4:	ldr	w0, [x0]
 2f8:	and	w1, w0, #0xffffff7f
 2fc:	adrp	x0, 0 <gomp_futex_wake>
 300:	add	x0, x0, #0x0
 304:	str	w1, [x0]
 308:	adrp	x0, 0 <gomp_futex_wake>
 30c:	add	x0, x0, #0x0
 310:	ldr	w0, [x0]
 314:	ldr	w3, [sp, #20]
 318:	mov	w2, w0
 31c:	ldr	x1, [sp, #24]
 320:	mov	x0, #0x62                  	// #98
 324:	bl	0 <syscall>
 328:	nop
 32c:	ldp	x29, x30, [sp], #48
 330:	ret

0000000000000334 <cpu_relax>:
 334:	nop
 338:	ret

000000000000033c <do_spin>:
 33c:	stp	x29, x30, [sp, #-48]!
 340:	mov	x29, sp
 344:	str	x0, [sp, #24]
 348:	str	w1, [sp, #20]
 34c:	adrp	x0, 0 <gomp_spin_count_var>
 350:	add	x0, x0, #0x0
 354:	ldr	x0, [x0]
 358:	str	x0, [sp, #32]
 35c:	adrp	x0, 0 <gomp_managed_threads>
 360:	add	x0, x0, #0x0
 364:	ldr	x1, [x0]
 368:	adrp	x0, 0 <gomp_available_cpus>
 36c:	add	x0, x0, #0x0
 370:	ldr	x0, [x0]
 374:	cmp	x1, x0
 378:	cset	w0, hi  // hi = pmore
 37c:	and	w0, w0, #0xff
 380:	and	x0, x0, #0xff
 384:	cmp	x0, #0x0
 388:	b.eq	39c <do_spin+0x60>  // b.none
 38c:	adrp	x0, 0 <gomp_throttled_spin_count_var>
 390:	add	x0, x0, #0x0
 394:	ldr	x0, [x0]
 398:	str	x0, [sp, #32]
 39c:	str	xzr, [sp, #40]
 3a0:	b	3e4 <do_spin+0xa8>
 3a4:	ldr	x0, [sp, #24]
 3a8:	ldr	w0, [x0]
 3ac:	mov	w1, w0
 3b0:	ldr	w0, [sp, #20]
 3b4:	cmp	w0, w1
 3b8:	cset	w0, ne  // ne = any
 3bc:	and	w0, w0, #0xff
 3c0:	and	x0, x0, #0xff
 3c4:	cmp	x0, #0x0
 3c8:	b.eq	3d4 <do_spin+0x98>  // b.none
 3cc:	mov	w0, #0x0                   	// #0
 3d0:	b	3f8 <do_spin+0xbc>
 3d4:	bl	334 <cpu_relax>
 3d8:	ldr	x0, [sp, #40]
 3dc:	add	x0, x0, #0x1
 3e0:	str	x0, [sp, #40]
 3e4:	ldr	x1, [sp, #40]
 3e8:	ldr	x0, [sp, #32]
 3ec:	cmp	x1, x0
 3f0:	b.cc	3a4 <do_spin+0x68>  // b.lo, b.ul, b.last
 3f4:	mov	w0, #0x1                   	// #1
 3f8:	ldp	x29, x30, [sp], #48
 3fc:	ret

0000000000000400 <do_wait>:
 400:	stp	x29, x30, [sp, #-32]!
 404:	mov	x29, sp
 408:	str	x0, [sp, #24]
 40c:	str	w1, [sp, #20]
 410:	ldr	w1, [sp, #20]
 414:	ldr	x0, [sp, #24]
 418:	bl	33c <do_spin>
 41c:	cmp	w0, #0x0
 420:	b.eq	430 <do_wait+0x30>  // b.none
 424:	ldr	w1, [sp, #20]
 428:	ldr	x0, [sp, #24]
 42c:	bl	18c <futex_wait>
 430:	nop
 434:	ldp	x29, x30, [sp], #32
 438:	ret

000000000000043c <gomp_barrier_wait_end>:
 43c:	stp	x29, x30, [sp, #-32]!
 440:	mov	x29, sp
 444:	str	x0, [sp, #24]
 448:	str	w1, [sp, #20]
 44c:	ldr	w0, [sp, #20]
 450:	and	x0, x0, #0x1
 454:	cmp	x0, #0x0
 458:	b.eq	498 <gomp_barrier_wait_end+0x5c>  // b.none
 45c:	ldr	x0, [sp, #24]
 460:	ldr	w1, [x0]
 464:	ldr	x0, [sp, #24]
 468:	str	w1, [x0, #64]
 46c:	ldr	x0, [sp, #24]
 470:	add	x0, x0, #0x4
 474:	ldr	x1, [sp, #24]
 478:	ldr	w1, [x1, #4]
 47c:	add	w1, w1, #0x8
 480:	stlr	w1, [x0]
 484:	ldr	x0, [sp, #24]
 488:	add	x0, x0, #0x4
 48c:	mov	w1, #0x7fffffff            	// #2147483647
 490:	bl	264 <futex_wake>
 494:	b	4c0 <gomp_barrier_wait_end+0x84>
 498:	ldr	x0, [sp, #24]
 49c:	add	x0, x0, #0x4
 4a0:	ldr	w1, [sp, #20]
 4a4:	bl	400 <do_wait>
 4a8:	ldr	x0, [sp, #24]
 4ac:	add	x0, x0, #0x4
 4b0:	ldar	w0, [x0]
 4b4:	ldr	w1, [sp, #20]
 4b8:	cmp	w1, w0
 4bc:	b.eq	498 <gomp_barrier_wait_end+0x5c>  // b.none
 4c0:	nop
 4c4:	ldp	x29, x30, [sp], #32
 4c8:	ret

00000000000004cc <gomp_barrier_wait>:
 4cc:	stp	x29, x30, [sp, #-32]!
 4d0:	mov	x29, sp
 4d4:	str	x0, [sp, #24]
 4d8:	ldr	x0, [sp, #24]
 4dc:	bl	c0 <gomp_barrier_wait_start>
 4e0:	mov	w1, w0
 4e4:	ldr	x0, [sp, #24]
 4e8:	bl	43c <gomp_barrier_wait_end>
 4ec:	nop
 4f0:	ldp	x29, x30, [sp], #32
 4f4:	ret

00000000000004f8 <gomp_barrier_wait_last>:
 4f8:	stp	x29, x30, [sp, #-48]!
 4fc:	mov	x29, sp
 500:	str	x0, [sp, #24]
 504:	ldr	x0, [sp, #24]
 508:	bl	c0 <gomp_barrier_wait_start>
 50c:	str	w0, [sp, #44]
 510:	ldr	w0, [sp, #44]
 514:	and	w0, w0, #0x1
 518:	cmp	w0, #0x0
 51c:	b.eq	52c <gomp_barrier_wait_last+0x34>  // b.none
 520:	ldr	w1, [sp, #44]
 524:	ldr	x0, [sp, #24]
 528:	bl	43c <gomp_barrier_wait_end>
 52c:	nop
 530:	ldp	x29, x30, [sp], #48
 534:	ret

0000000000000538 <gomp_team_barrier_wake>:
 538:	stp	x29, x30, [sp, #-32]!
 53c:	mov	x29, sp
 540:	str	x0, [sp, #24]
 544:	str	w1, [sp, #20]
 548:	ldr	x0, [sp, #24]
 54c:	add	x2, x0, #0x4
 550:	ldr	w0, [sp, #20]
 554:	cmp	w0, #0x0
 558:	b.eq	564 <gomp_team_barrier_wake+0x2c>  // b.none
 55c:	ldr	w0, [sp, #20]
 560:	b	568 <gomp_team_barrier_wake+0x30>
 564:	mov	w0, #0x7fffffff            	// #2147483647
 568:	mov	w1, w0
 56c:	mov	x0, x2
 570:	bl	264 <futex_wake>
 574:	nop
 578:	ldp	x29, x30, [sp], #32
 57c:	ret

0000000000000580 <gomp_team_barrier_wait_end>:
 580:	stp	x29, x30, [sp, #-64]!
 584:	mov	x29, sp
 588:	str	x0, [sp, #24]
 58c:	str	w1, [sp, #20]
 590:	ldr	w0, [sp, #20]
 594:	and	x0, x0, #0x1
 598:	cmp	x0, #0x0
 59c:	b.eq	634 <gomp_team_barrier_wait_end+0xb4>  // b.none
 5a0:	bl	178 <gomp_thread>
 5a4:	str	x0, [sp, #48]
 5a8:	ldr	x0, [sp, #48]
 5ac:	ldr	x0, [x0, #16]
 5b0:	str	x0, [sp, #40]
 5b4:	ldr	x0, [sp, #24]
 5b8:	ldr	w1, [x0]
 5bc:	ldr	x0, [sp, #24]
 5c0:	str	w1, [x0, #64]
 5c4:	ldr	x0, [sp, #40]
 5c8:	str	wzr, [x0, #1332]
 5cc:	ldr	x0, [sp, #40]
 5d0:	ldr	w0, [x0, #1320]
 5d4:	mov	w0, w0
 5d8:	cmp	x0, #0x0
 5dc:	b.eq	5f8 <gomp_team_barrier_wait_end+0x78>  // b.none
 5e0:	ldr	w0, [sp, #20]
 5e4:	bl	0 <gomp_barrier_handle_tasks>
 5e8:	ldr	w0, [sp, #20]
 5ec:	and	w0, w0, #0xfffffffe
 5f0:	str	w0, [sp, #20]
 5f4:	b	634 <gomp_team_barrier_wait_end+0xb4>
 5f8:	ldr	w0, [sp, #20]
 5fc:	and	w0, w0, #0xfffffffb
 600:	str	w0, [sp, #20]
 604:	ldr	w0, [sp, #20]
 608:	add	w0, w0, #0x7
 60c:	str	w0, [sp, #20]
 610:	ldr	x0, [sp, #24]
 614:	add	x0, x0, #0x4
 618:	ldr	w1, [sp, #20]
 61c:	stlr	w1, [x0]
 620:	ldr	x0, [sp, #24]
 624:	add	x0, x0, #0x4
 628:	mov	w1, #0x7fffffff            	// #2147483647
 62c:	bl	264 <futex_wake>
 630:	b	6b8 <gomp_team_barrier_wait_end+0x138>
 634:	ldr	w0, [sp, #20]
 638:	str	w0, [sp, #60]
 63c:	ldr	w0, [sp, #20]
 640:	and	w0, w0, #0xfffffffb
 644:	str	w0, [sp, #20]
 648:	ldr	x0, [sp, #24]
 64c:	add	x0, x0, #0x4
 650:	ldr	w1, [sp, #60]
 654:	bl	400 <do_wait>
 658:	ldr	x0, [sp, #24]
 65c:	add	x0, x0, #0x4
 660:	ldar	w0, [x0]
 664:	str	w0, [sp, #56]
 668:	ldr	w0, [sp, #56]
 66c:	and	x0, x0, #0x1
 670:	cmp	x0, #0x0
 674:	b.eq	690 <gomp_team_barrier_wait_end+0x110>  // b.none
 678:	ldr	w0, [sp, #20]
 67c:	bl	0 <gomp_barrier_handle_tasks>
 680:	ldr	x0, [sp, #24]
 684:	add	x0, x0, #0x4
 688:	ldar	w0, [x0]
 68c:	str	w0, [sp, #56]
 690:	ldr	w0, [sp, #56]
 694:	and	w0, w0, #0x2
 698:	ldr	w1, [sp, #60]
 69c:	orr	w0, w1, w0
 6a0:	str	w0, [sp, #60]
 6a4:	ldr	w0, [sp, #20]
 6a8:	add	w0, w0, #0x8
 6ac:	ldr	w1, [sp, #56]
 6b0:	cmp	w1, w0
 6b4:	b.ne	648 <gomp_team_barrier_wait_end+0xc8>  // b.any
 6b8:	ldp	x29, x30, [sp], #64
 6bc:	ret

00000000000006c0 <gomp_team_barrier_wait>:
 6c0:	stp	x29, x30, [sp, #-32]!
 6c4:	mov	x29, sp
 6c8:	str	x0, [sp, #24]
 6cc:	ldr	x0, [sp, #24]
 6d0:	bl	c0 <gomp_barrier_wait_start>
 6d4:	mov	w1, w0
 6d8:	ldr	x0, [sp, #24]
 6dc:	bl	580 <gomp_team_barrier_wait_end>
 6e0:	nop
 6e4:	ldp	x29, x30, [sp], #32
 6e8:	ret

00000000000006ec <gomp_team_barrier_wait_final>:
 6ec:	stp	x29, x30, [sp, #-48]!
 6f0:	mov	x29, sp
 6f4:	str	x0, [sp, #24]
 6f8:	ldr	x0, [sp, #24]
 6fc:	bl	11c <gomp_barrier_wait_final_start>
 700:	str	w0, [sp, #44]
 704:	ldr	w0, [sp, #44]
 708:	and	x0, x0, #0x1
 70c:	cmp	x0, #0x0
 710:	b.eq	724 <gomp_team_barrier_wait_final+0x38>  // b.none
 714:	ldr	x0, [sp, #24]
 718:	ldr	w1, [x0]
 71c:	ldr	x0, [sp, #24]
 720:	str	w1, [x0, #68]
 724:	ldr	w1, [sp, #44]
 728:	ldr	x0, [sp, #24]
 72c:	bl	580 <gomp_team_barrier_wait_end>
 730:	nop
 734:	ldp	x29, x30, [sp], #48
 738:	ret

000000000000073c <gomp_team_barrier_wait_cancel_end>:
 73c:	stp	x29, x30, [sp, #-64]!
 740:	mov	x29, sp
 744:	str	x0, [sp, #24]
 748:	str	w1, [sp, #20]
 74c:	ldr	w0, [sp, #20]
 750:	and	x0, x0, #0x1
 754:	cmp	x0, #0x0
 758:	b.eq	7e8 <gomp_team_barrier_wait_cancel_end+0xac>  // b.none
 75c:	bl	178 <gomp_thread>
 760:	str	x0, [sp, #48]
 764:	ldr	x0, [sp, #48]
 768:	ldr	x0, [x0, #16]
 76c:	str	x0, [sp, #40]
 770:	ldr	x0, [sp, #24]
 774:	ldr	w1, [x0]
 778:	ldr	x0, [sp, #24]
 77c:	str	w1, [x0, #64]
 780:	ldr	x0, [sp, #40]
 784:	str	wzr, [x0, #1332]
 788:	ldr	x0, [sp, #40]
 78c:	ldr	w0, [x0, #1320]
 790:	mov	w0, w0
 794:	cmp	x0, #0x0
 798:	b.eq	7b4 <gomp_team_barrier_wait_cancel_end+0x78>  // b.none
 79c:	ldr	w0, [sp, #20]
 7a0:	bl	0 <gomp_barrier_handle_tasks>
 7a4:	ldr	w0, [sp, #20]
 7a8:	and	w0, w0, #0xfffffffe
 7ac:	str	w0, [sp, #20]
 7b0:	b	7e8 <gomp_team_barrier_wait_cancel_end+0xac>
 7b4:	ldr	w0, [sp, #20]
 7b8:	add	w0, w0, #0x7
 7bc:	str	w0, [sp, #20]
 7c0:	ldr	x0, [sp, #24]
 7c4:	add	x0, x0, #0x4
 7c8:	ldr	w1, [sp, #20]
 7cc:	stlr	w1, [x0]
 7d0:	ldr	x0, [sp, #24]
 7d4:	add	x0, x0, #0x4
 7d8:	mov	w1, #0x7fffffff            	// #2147483647
 7dc:	bl	264 <futex_wake>
 7e0:	mov	w0, #0x0                   	// #0
 7e4:	b	894 <gomp_team_barrier_wait_cancel_end+0x158>
 7e8:	ldr	w0, [sp, #20]
 7ec:	and	x0, x0, #0x4
 7f0:	cmp	x0, #0x0
 7f4:	b.eq	800 <gomp_team_barrier_wait_cancel_end+0xc4>  // b.none
 7f8:	mov	w0, #0x1                   	// #1
 7fc:	b	894 <gomp_team_barrier_wait_cancel_end+0x158>
 800:	ldr	w0, [sp, #20]
 804:	str	w0, [sp, #60]
 808:	ldr	x0, [sp, #24]
 80c:	add	x0, x0, #0x4
 810:	ldr	w1, [sp, #60]
 814:	bl	400 <do_wait>
 818:	ldr	x0, [sp, #24]
 81c:	add	x0, x0, #0x4
 820:	ldar	w0, [x0]
 824:	str	w0, [sp, #56]
 828:	ldr	w0, [sp, #56]
 82c:	and	x0, x0, #0x4
 830:	cmp	x0, #0x0
 834:	b.eq	840 <gomp_team_barrier_wait_cancel_end+0x104>  // b.none
 838:	mov	w0, #0x1                   	// #1
 83c:	b	894 <gomp_team_barrier_wait_cancel_end+0x158>
 840:	ldr	w0, [sp, #56]
 844:	and	x0, x0, #0x1
 848:	cmp	x0, #0x0
 84c:	b.eq	868 <gomp_team_barrier_wait_cancel_end+0x12c>  // b.none
 850:	ldr	w0, [sp, #20]
 854:	bl	0 <gomp_barrier_handle_tasks>
 858:	ldr	x0, [sp, #24]
 85c:	add	x0, x0, #0x4
 860:	ldar	w0, [x0]
 864:	str	w0, [sp, #56]
 868:	ldr	w0, [sp, #56]
 86c:	and	w0, w0, #0x2
 870:	ldr	w1, [sp, #60]
 874:	orr	w0, w1, w0
 878:	str	w0, [sp, #60]
 87c:	ldr	w0, [sp, #20]
 880:	add	w0, w0, #0x8
 884:	ldr	w1, [sp, #56]
 888:	cmp	w1, w0
 88c:	b.ne	808 <gomp_team_barrier_wait_cancel_end+0xcc>  // b.any
 890:	mov	w0, #0x0                   	// #0
 894:	ldp	x29, x30, [sp], #64
 898:	ret

000000000000089c <gomp_team_barrier_wait_cancel>:
 89c:	stp	x29, x30, [sp, #-32]!
 8a0:	mov	x29, sp
 8a4:	str	x0, [sp, #24]
 8a8:	ldr	x0, [sp, #24]
 8ac:	bl	c0 <gomp_barrier_wait_start>
 8b0:	mov	w1, w0
 8b4:	ldr	x0, [sp, #24]
 8b8:	bl	73c <gomp_team_barrier_wait_cancel_end>
 8bc:	and	w0, w0, #0xff
 8c0:	ldp	x29, x30, [sp], #32
 8c4:	ret

00000000000008c8 <gomp_team_barrier_cancel>:
 8c8:	stp	x29, x30, [sp, #-32]!
 8cc:	mov	x29, sp
 8d0:	str	x0, [sp, #24]
 8d4:	ldr	x0, [sp, #24]
 8d8:	add	x0, x0, #0x500
 8dc:	bl	0 <gomp_mutex_lock>
 8e0:	ldr	x0, [sp, #24]
 8e4:	ldr	w0, [x0, #132]
 8e8:	and	w0, w0, #0x4
 8ec:	cmp	w0, #0x0
 8f0:	b.eq	904 <gomp_team_barrier_cancel+0x3c>  // b.none
 8f4:	ldr	x0, [sp, #24]
 8f8:	add	x0, x0, #0x500
 8fc:	bl	74 <gomp_mutex_unlock>
 900:	b	934 <gomp_team_barrier_cancel+0x6c>
 904:	ldr	x0, [sp, #24]
 908:	ldr	w0, [x0, #132]
 90c:	orr	w1, w0, #0x4
 910:	ldr	x0, [sp, #24]
 914:	str	w1, [x0, #132]
 918:	ldr	x0, [sp, #24]
 91c:	add	x0, x0, #0x500
 920:	bl	74 <gomp_mutex_unlock>
 924:	ldr	x0, [sp, #24]
 928:	add	x0, x0, #0x84
 92c:	mov	w1, #0x7fffffff            	// #2147483647
 930:	bl	264 <futex_wake>
 934:	ldp	x29, x30, [sp], #32
 938:	ret

ptrlock.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <futex_wait>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	w1, [sp, #20]
  10:	adrp	x0, 0 <gomp_futex_wait>
  14:	add	x0, x0, #0x0
  18:	ldr	w0, [x0]
  1c:	mov	x4, #0x0                   	// #0
  20:	ldr	w3, [sp, #20]
  24:	mov	w2, w0
  28:	ldr	x1, [sp, #24]
  2c:	mov	x0, #0x62                  	// #98
  30:	bl	0 <syscall>
  34:	str	w0, [sp, #44]
  38:	ldr	w0, [sp, #44]
  3c:	lsr	w0, w0, #31
  40:	and	w0, w0, #0xff
  44:	and	x0, x0, #0xff
  48:	cmp	x0, #0x0
  4c:	b.eq	cc <futex_wait+0xcc>  // b.none
  50:	bl	0 <__errno_location>
  54:	ldr	w0, [x0]
  58:	cmp	w0, #0x26
  5c:	cset	w0, eq  // eq = none
  60:	and	w0, w0, #0xff
  64:	and	x0, x0, #0xff
  68:	cmp	x0, #0x0
  6c:	b.eq	cc <futex_wait+0xcc>  // b.none
  70:	adrp	x0, 0 <gomp_futex_wait>
  74:	add	x0, x0, #0x0
  78:	ldr	w0, [x0]
  7c:	and	w1, w0, #0xffffff7f
  80:	adrp	x0, 0 <gomp_futex_wait>
  84:	add	x0, x0, #0x0
  88:	str	w1, [x0]
  8c:	adrp	x0, 0 <gomp_futex_wake>
  90:	add	x0, x0, #0x0
  94:	ldr	w0, [x0]
  98:	and	w1, w0, #0xffffff7f
  9c:	adrp	x0, 0 <gomp_futex_wake>
  a0:	add	x0, x0, #0x0
  a4:	str	w1, [x0]
  a8:	adrp	x0, 0 <gomp_futex_wait>
  ac:	add	x0, x0, #0x0
  b0:	ldr	w0, [x0]
  b4:	mov	x4, #0x0                   	// #0
  b8:	ldr	w3, [sp, #20]
  bc:	mov	w2, w0
  c0:	ldr	x1, [sp, #24]
  c4:	mov	x0, #0x62                  	// #98
  c8:	bl	0 <syscall>
  cc:	nop
  d0:	ldp	x29, x30, [sp], #48
  d4:	ret

00000000000000d8 <futex_wake>:
  d8:	stp	x29, x30, [sp, #-48]!
  dc:	mov	x29, sp
  e0:	str	x0, [sp, #24]
  e4:	str	w1, [sp, #20]
  e8:	adrp	x0, 0 <gomp_futex_wake>
  ec:	add	x0, x0, #0x0
  f0:	ldr	w0, [x0]
  f4:	ldr	w3, [sp, #20]
  f8:	mov	w2, w0
  fc:	ldr	x1, [sp, #24]
 100:	mov	x0, #0x62                  	// #98
 104:	bl	0 <syscall>
 108:	str	w0, [sp, #44]
 10c:	ldr	w0, [sp, #44]
 110:	lsr	w0, w0, #31
 114:	and	w0, w0, #0xff
 118:	and	x0, x0, #0xff
 11c:	cmp	x0, #0x0
 120:	b.eq	19c <futex_wake+0xc4>  // b.none
 124:	bl	0 <__errno_location>
 128:	ldr	w0, [x0]
 12c:	cmp	w0, #0x26
 130:	cset	w0, eq  // eq = none
 134:	and	w0, w0, #0xff
 138:	and	x0, x0, #0xff
 13c:	cmp	x0, #0x0
 140:	b.eq	19c <futex_wake+0xc4>  // b.none
 144:	adrp	x0, 0 <gomp_futex_wait>
 148:	add	x0, x0, #0x0
 14c:	ldr	w0, [x0]
 150:	and	w1, w0, #0xffffff7f
 154:	adrp	x0, 0 <gomp_futex_wait>
 158:	add	x0, x0, #0x0
 15c:	str	w1, [x0]
 160:	adrp	x0, 0 <gomp_futex_wake>
 164:	add	x0, x0, #0x0
 168:	ldr	w0, [x0]
 16c:	and	w1, w0, #0xffffff7f
 170:	adrp	x0, 0 <gomp_futex_wake>
 174:	add	x0, x0, #0x0
 178:	str	w1, [x0]
 17c:	adrp	x0, 0 <gomp_futex_wake>
 180:	add	x0, x0, #0x0
 184:	ldr	w0, [x0]
 188:	ldr	w3, [sp, #20]
 18c:	mov	w2, w0
 190:	ldr	x1, [sp, #24]
 194:	mov	x0, #0x62                  	// #98
 198:	bl	0 <syscall>
 19c:	nop
 1a0:	ldp	x29, x30, [sp], #48
 1a4:	ret

00000000000001a8 <cpu_relax>:
 1a8:	nop
 1ac:	ret

00000000000001b0 <do_spin>:
 1b0:	stp	x29, x30, [sp, #-48]!
 1b4:	mov	x29, sp
 1b8:	str	x0, [sp, #24]
 1bc:	str	w1, [sp, #20]
 1c0:	adrp	x0, 0 <gomp_spin_count_var>
 1c4:	add	x0, x0, #0x0
 1c8:	ldr	x0, [x0]
 1cc:	str	x0, [sp, #32]
 1d0:	adrp	x0, 0 <gomp_managed_threads>
 1d4:	add	x0, x0, #0x0
 1d8:	ldr	x1, [x0]
 1dc:	adrp	x0, 0 <gomp_available_cpus>
 1e0:	add	x0, x0, #0x0
 1e4:	ldr	x0, [x0]
 1e8:	cmp	x1, x0
 1ec:	cset	w0, hi  // hi = pmore
 1f0:	and	w0, w0, #0xff
 1f4:	and	x0, x0, #0xff
 1f8:	cmp	x0, #0x0
 1fc:	b.eq	210 <do_spin+0x60>  // b.none
 200:	adrp	x0, 0 <gomp_throttled_spin_count_var>
 204:	add	x0, x0, #0x0
 208:	ldr	x0, [x0]
 20c:	str	x0, [sp, #32]
 210:	str	xzr, [sp, #40]
 214:	b	258 <do_spin+0xa8>
 218:	ldr	x0, [sp, #24]
 21c:	ldr	w0, [x0]
 220:	mov	w1, w0
 224:	ldr	w0, [sp, #20]
 228:	cmp	w0, w1
 22c:	cset	w0, ne  // ne = any
 230:	and	w0, w0, #0xff
 234:	and	x0, x0, #0xff
 238:	cmp	x0, #0x0
 23c:	b.eq	248 <do_spin+0x98>  // b.none
 240:	mov	w0, #0x0                   	// #0
 244:	b	26c <do_spin+0xbc>
 248:	bl	1a8 <cpu_relax>
 24c:	ldr	x0, [sp, #40]
 250:	add	x0, x0, #0x1
 254:	str	x0, [sp, #40]
 258:	ldr	x1, [sp, #40]
 25c:	ldr	x0, [sp, #32]
 260:	cmp	x1, x0
 264:	b.cc	218 <do_spin+0x68>  // b.lo, b.ul, b.last
 268:	mov	w0, #0x1                   	// #1
 26c:	ldp	x29, x30, [sp], #48
 270:	ret

0000000000000274 <do_wait>:
 274:	stp	x29, x30, [sp, #-32]!
 278:	mov	x29, sp
 27c:	str	x0, [sp, #24]
 280:	str	w1, [sp, #20]
 284:	ldr	w1, [sp, #20]
 288:	ldr	x0, [sp, #24]
 28c:	bl	1b0 <do_spin>
 290:	cmp	w0, #0x0
 294:	b.eq	2a4 <do_wait+0x30>  // b.none
 298:	ldr	w1, [sp, #20]
 29c:	ldr	x0, [sp, #24]
 2a0:	bl	0 <futex_wait>
 2a4:	nop
 2a8:	ldp	x29, x30, [sp], #32
 2ac:	ret

00000000000002b0 <gomp_ptrlock_get_slow>:
 2b0:	stp	x29, x30, [sp, #-48]!
 2b4:	mov	x29, sp
 2b8:	str	x0, [sp, #24]
 2bc:	mov	x0, #0x1                   	// #1
 2c0:	str	x0, [sp, #32]
 2c4:	ldr	x2, [sp, #24]
 2c8:	add	x0, sp, #0x20
 2cc:	ldr	x3, [x0]
 2d0:	mov	x4, #0x2                   	// #2
 2d4:	ldxr	x1, [x2]
 2d8:	cmp	x1, x3
 2dc:	b.ne	2e8 <gomp_ptrlock_get_slow+0x38>  // b.any
 2e0:	stxr	w5, x4, [x2]
 2e4:	cbnz	w5, 2d4 <gomp_ptrlock_get_slow+0x24>
 2e8:	cset	w2, eq  // eq = none
 2ec:	cmp	w2, #0x0
 2f0:	b.ne	2f8 <gomp_ptrlock_get_slow+0x48>  // b.any
 2f4:	str	x1, [x0]
 2f8:	ldr	x0, [sp, #24]
 2fc:	str	x0, [sp, #40]
 300:	mov	w1, #0x2                   	// #2
 304:	ldr	x0, [sp, #40]
 308:	bl	274 <do_wait>
 30c:	ldr	x0, [sp, #40]
 310:	ldr	w0, [x0]
 314:	cmp	w0, #0x2
 318:	b.eq	300 <gomp_ptrlock_get_slow+0x50>  // b.none
 31c:	ldr	x0, [sp, #24]
 320:	ldar	x0, [x0]
 324:	ldp	x29, x30, [sp], #48
 328:	ret

000000000000032c <gomp_ptrlock_set_slow>:
 32c:	stp	x29, x30, [sp, #-48]!
 330:	mov	x29, sp
 334:	str	x0, [sp, #24]
 338:	ldr	x0, [sp, #24]
 33c:	str	x0, [sp, #40]
 340:	mov	w1, #0x7fffffff            	// #2147483647
 344:	ldr	x0, [sp, #40]
 348:	bl	d8 <futex_wake>
 34c:	nop
 350:	ldp	x29, x30, [sp], #48
 354:	ret

time.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_ialias_omp_get_wtime>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	add	x0, sp, #0x10
   c:	mov	x1, x0
  10:	mov	w0, #0x1                   	// #1
  14:	bl	0 <clock_gettime>
  18:	cmp	w0, #0x0
  1c:	b.ge	30 <gomp_ialias_omp_get_wtime+0x30>  // b.tcont
  20:	add	x0, sp, #0x10
  24:	mov	x1, x0
  28:	mov	w0, #0x0                   	// #0
  2c:	bl	0 <clock_gettime>
  30:	ldr	d0, [sp, #16]
  34:	scvtf	d1, d0
  38:	ldr	d0, [sp, #24]
  3c:	scvtf	d0, d0
  40:	mov	x0, #0xcd6500000000        	// #225833675390976
  44:	movk	x0, #0x41cd, lsl #48
  48:	fmov	d2, x0
  4c:	fdiv	d0, d0, d2
  50:	fadd	d0, d1, d0
  54:	ldp	x29, x30, [sp], #32
  58:	ret

000000000000005c <gomp_ialias_omp_get_wtick>:
  5c:	stp	x29, x30, [sp, #-32]!
  60:	mov	x29, sp
  64:	add	x0, sp, #0x10
  68:	mov	x1, x0
  6c:	mov	w0, #0x1                   	// #1
  70:	bl	0 <clock_getres>
  74:	cmp	w0, #0x0
  78:	b.ge	8c <gomp_ialias_omp_get_wtick+0x30>  // b.tcont
  7c:	add	x0, sp, #0x10
  80:	mov	x1, x0
  84:	mov	w0, #0x0                   	// #0
  88:	bl	0 <clock_getres>
  8c:	ldr	d0, [sp, #16]
  90:	scvtf	d1, d0
  94:	ldr	d0, [sp, #24]
  98:	scvtf	d0, d0
  9c:	mov	x0, #0xcd6500000000        	// #225833675390976
  a0:	movk	x0, #0x41cd, lsl #48
  a4:	fmov	d2, x0
  a8:	fdiv	d0, d0, d2
  ac:	fadd	d0, d1, d0
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret

fortran.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_thread>:
   0:	mrs	x1, tpidr_el0
   4:	adrp	x0, 0 <gomp_tls_data>
   8:	ldr	x0, [x0]
   c:	add	x0, x1, x0
  10:	ret

0000000000000014 <gomp_thread_self>:
  14:	stp	x29, x30, [sp, #-16]!
  18:	mov	x29, sp
  1c:	bl	0 <pthread_self>
  20:	ldp	x29, x30, [sp], #16
  24:	ret

0000000000000028 <omp_init_lock_>:
  28:	stp	x29, x30, [sp, #-32]!
  2c:	mov	x29, sp
  30:	str	x0, [sp, #24]
  34:	ldr	x0, [sp, #24]
  38:	bl	0 <gomp_ialias_omp_init_lock>
  3c:	nop
  40:	ldp	x29, x30, [sp], #32
  44:	ret

0000000000000048 <omp_init_nest_lock_>:
  48:	stp	x29, x30, [sp, #-32]!
  4c:	mov	x29, sp
  50:	str	x0, [sp, #24]
  54:	mov	x0, #0x10                  	// #16
  58:	bl	0 <malloc>
  5c:	mov	x1, x0
  60:	ldr	x0, [sp, #24]
  64:	str	x1, [x0]
  68:	ldr	x0, [sp, #24]
  6c:	ldr	x0, [x0]
  70:	bl	0 <gomp_ialias_omp_init_nest_lock>
  74:	nop
  78:	ldp	x29, x30, [sp], #32
  7c:	ret

0000000000000080 <omp_destroy_lock_>:
  80:	stp	x29, x30, [sp, #-32]!
  84:	mov	x29, sp
  88:	str	x0, [sp, #24]
  8c:	ldr	x0, [sp, #24]
  90:	bl	0 <gomp_ialias_omp_destroy_lock>
  94:	nop
  98:	ldp	x29, x30, [sp], #32
  9c:	ret

00000000000000a0 <omp_destroy_nest_lock_>:
  a0:	stp	x29, x30, [sp, #-32]!
  a4:	mov	x29, sp
  a8:	str	x0, [sp, #24]
  ac:	ldr	x0, [sp, #24]
  b0:	ldr	x0, [x0]
  b4:	bl	0 <gomp_ialias_omp_destroy_nest_lock>
  b8:	ldr	x0, [sp, #24]
  bc:	ldr	x0, [x0]
  c0:	bl	0 <free>
  c4:	ldr	x0, [sp, #24]
  c8:	str	xzr, [x0]
  cc:	nop
  d0:	ldp	x29, x30, [sp], #32
  d4:	ret

00000000000000d8 <omp_set_lock_>:
  d8:	stp	x29, x30, [sp, #-32]!
  dc:	mov	x29, sp
  e0:	str	x0, [sp, #24]
  e4:	ldr	x0, [sp, #24]
  e8:	bl	0 <gomp_ialias_omp_set_lock>
  ec:	nop
  f0:	ldp	x29, x30, [sp], #32
  f4:	ret

00000000000000f8 <omp_set_nest_lock_>:
  f8:	stp	x29, x30, [sp, #-32]!
  fc:	mov	x29, sp
 100:	str	x0, [sp, #24]
 104:	ldr	x0, [sp, #24]
 108:	ldr	x0, [x0]
 10c:	bl	0 <gomp_ialias_omp_set_nest_lock>
 110:	nop
 114:	ldp	x29, x30, [sp], #32
 118:	ret

000000000000011c <omp_unset_lock_>:
 11c:	stp	x29, x30, [sp, #-32]!
 120:	mov	x29, sp
 124:	str	x0, [sp, #24]
 128:	ldr	x0, [sp, #24]
 12c:	bl	0 <gomp_ialias_omp_unset_lock>
 130:	nop
 134:	ldp	x29, x30, [sp], #32
 138:	ret

000000000000013c <omp_unset_nest_lock_>:
 13c:	stp	x29, x30, [sp, #-32]!
 140:	mov	x29, sp
 144:	str	x0, [sp, #24]
 148:	ldr	x0, [sp, #24]
 14c:	ldr	x0, [x0]
 150:	bl	0 <gomp_ialias_omp_unset_nest_lock>
 154:	nop
 158:	ldp	x29, x30, [sp], #32
 15c:	ret

0000000000000160 <omp_test_lock_>:
 160:	stp	x29, x30, [sp, #-32]!
 164:	mov	x29, sp
 168:	str	x0, [sp, #24]
 16c:	ldr	x0, [sp, #24]
 170:	bl	0 <gomp_ialias_omp_test_lock>
 174:	ldp	x29, x30, [sp], #32
 178:	ret

000000000000017c <omp_test_nest_lock_>:
 17c:	stp	x29, x30, [sp, #-32]!
 180:	mov	x29, sp
 184:	str	x0, [sp, #24]
 188:	ldr	x0, [sp, #24]
 18c:	ldr	x0, [x0]
 190:	bl	0 <gomp_ialias_omp_test_nest_lock>
 194:	ldp	x29, x30, [sp], #32
 198:	ret

000000000000019c <omp_set_dynamic_>:
 19c:	stp	x29, x30, [sp, #-32]!
 1a0:	mov	x29, sp
 1a4:	str	x0, [sp, #24]
 1a8:	ldr	x0, [sp, #24]
 1ac:	ldr	w0, [x0]
 1b0:	bl	0 <gomp_ialias_omp_set_dynamic>
 1b4:	nop
 1b8:	ldp	x29, x30, [sp], #32
 1bc:	ret

00000000000001c0 <omp_set_dynamic_8_>:
 1c0:	stp	x29, x30, [sp, #-32]!
 1c4:	mov	x29, sp
 1c8:	str	x0, [sp, #24]
 1cc:	ldr	x0, [sp, #24]
 1d0:	ldr	x0, [x0]
 1d4:	cmp	x0, #0x0
 1d8:	cset	w0, ne  // ne = any
 1dc:	and	w0, w0, #0xff
 1e0:	bl	0 <gomp_ialias_omp_set_dynamic>
 1e4:	nop
 1e8:	ldp	x29, x30, [sp], #32
 1ec:	ret

00000000000001f0 <omp_set_nested_>:
 1f0:	stp	x29, x30, [sp, #-32]!
 1f4:	mov	x29, sp
 1f8:	str	x0, [sp, #24]
 1fc:	ldr	x0, [sp, #24]
 200:	ldr	w0, [x0]
 204:	bl	0 <gomp_ialias_omp_set_nested>
 208:	nop
 20c:	ldp	x29, x30, [sp], #32
 210:	ret

0000000000000214 <omp_set_nested_8_>:
 214:	stp	x29, x30, [sp, #-32]!
 218:	mov	x29, sp
 21c:	str	x0, [sp, #24]
 220:	ldr	x0, [sp, #24]
 224:	ldr	x0, [x0]
 228:	cmp	x0, #0x0
 22c:	cset	w0, ne  // ne = any
 230:	and	w0, w0, #0xff
 234:	bl	0 <gomp_ialias_omp_set_nested>
 238:	nop
 23c:	ldp	x29, x30, [sp], #32
 240:	ret

0000000000000244 <omp_set_num_threads_>:
 244:	stp	x29, x30, [sp, #-32]!
 248:	mov	x29, sp
 24c:	str	x0, [sp, #24]
 250:	ldr	x0, [sp, #24]
 254:	ldr	w0, [x0]
 258:	bl	0 <gomp_ialias_omp_set_num_threads>
 25c:	nop
 260:	ldp	x29, x30, [sp], #32
 264:	ret

0000000000000268 <omp_set_num_threads_8_>:
 268:	stp	x29, x30, [sp, #-32]!
 26c:	mov	x29, sp
 270:	str	x0, [sp, #24]
 274:	ldr	x0, [sp, #24]
 278:	ldr	x1, [x0]
 27c:	mov	x0, #0xffffffff80000001    	// #-2147483647
 280:	cmp	x1, x0
 284:	b.lt	2a4 <omp_set_num_threads_8_+0x3c>  // b.tstop
 288:	ldr	x0, [sp, #24]
 28c:	ldr	x0, [x0]
 290:	mov	x2, #0x7fffffff            	// #2147483647
 294:	mov	x1, #0x7fffffff            	// #2147483647
 298:	cmp	x0, x2
 29c:	csel	x0, x0, x1, le
 2a0:	b	2a8 <omp_set_num_threads_8_+0x40>
 2a4:	mov	w0, #0x80000000            	// #-2147483648
 2a8:	bl	0 <gomp_ialias_omp_set_num_threads>
 2ac:	nop
 2b0:	ldp	x29, x30, [sp], #32
 2b4:	ret

00000000000002b8 <omp_get_dynamic_>:
 2b8:	stp	x29, x30, [sp, #-16]!
 2bc:	mov	x29, sp
 2c0:	bl	0 <gomp_ialias_omp_get_dynamic>
 2c4:	ldp	x29, x30, [sp], #16
 2c8:	ret

00000000000002cc <omp_get_nested_>:
 2cc:	stp	x29, x30, [sp, #-16]!
 2d0:	mov	x29, sp
 2d4:	bl	0 <gomp_ialias_omp_get_nested>
 2d8:	ldp	x29, x30, [sp], #16
 2dc:	ret

00000000000002e0 <omp_in_parallel_>:
 2e0:	stp	x29, x30, [sp, #-16]!
 2e4:	mov	x29, sp
 2e8:	bl	0 <gomp_ialias_omp_in_parallel>
 2ec:	ldp	x29, x30, [sp], #16
 2f0:	ret

00000000000002f4 <omp_get_max_threads_>:
 2f4:	stp	x29, x30, [sp, #-16]!
 2f8:	mov	x29, sp
 2fc:	bl	0 <gomp_ialias_omp_get_max_threads>
 300:	ldp	x29, x30, [sp], #16
 304:	ret

0000000000000308 <omp_get_num_procs_>:
 308:	stp	x29, x30, [sp, #-16]!
 30c:	mov	x29, sp
 310:	bl	0 <gomp_ialias_omp_get_num_procs>
 314:	ldp	x29, x30, [sp], #16
 318:	ret

000000000000031c <omp_get_num_threads_>:
 31c:	stp	x29, x30, [sp, #-16]!
 320:	mov	x29, sp
 324:	bl	0 <gomp_ialias_omp_get_num_threads>
 328:	ldp	x29, x30, [sp], #16
 32c:	ret

0000000000000330 <omp_get_thread_num_>:
 330:	stp	x29, x30, [sp, #-16]!
 334:	mov	x29, sp
 338:	bl	0 <gomp_ialias_omp_get_thread_num>
 33c:	ldp	x29, x30, [sp], #16
 340:	ret

0000000000000344 <omp_get_wtick_>:
 344:	stp	x29, x30, [sp, #-16]!
 348:	mov	x29, sp
 34c:	bl	0 <gomp_ialias_omp_get_wtick>
 350:	ldp	x29, x30, [sp], #16
 354:	ret

0000000000000358 <omp_get_wtime_>:
 358:	stp	x29, x30, [sp, #-16]!
 35c:	mov	x29, sp
 360:	bl	0 <gomp_ialias_omp_get_wtime>
 364:	ldp	x29, x30, [sp], #16
 368:	ret

000000000000036c <omp_set_schedule_>:
 36c:	stp	x29, x30, [sp, #-32]!
 370:	mov	x29, sp
 374:	str	x0, [sp, #24]
 378:	str	x1, [sp, #16]
 37c:	ldr	x0, [sp, #24]
 380:	ldr	w0, [x0]
 384:	mov	w2, w0
 388:	ldr	x0, [sp, #16]
 38c:	ldr	w0, [x0]
 390:	mov	w1, w0
 394:	mov	w0, w2
 398:	bl	0 <gomp_ialias_omp_set_schedule>
 39c:	nop
 3a0:	ldp	x29, x30, [sp], #32
 3a4:	ret

00000000000003a8 <omp_set_schedule_8_>:
 3a8:	stp	x29, x30, [sp, #-32]!
 3ac:	mov	x29, sp
 3b0:	str	x0, [sp, #24]
 3b4:	str	x1, [sp, #16]
 3b8:	ldr	x0, [sp, #24]
 3bc:	ldr	w0, [x0]
 3c0:	mov	w3, w0
 3c4:	ldr	x0, [sp, #16]
 3c8:	ldr	x1, [x0]
 3cc:	mov	x0, #0xffffffff80000001    	// #-2147483647
 3d0:	cmp	x1, x0
 3d4:	b.lt	3f4 <omp_set_schedule_8_+0x4c>  // b.tstop
 3d8:	ldr	x0, [sp, #16]
 3dc:	ldr	x0, [x0]
 3e0:	mov	x2, #0x7fffffff            	// #2147483647
 3e4:	mov	x1, #0x7fffffff            	// #2147483647
 3e8:	cmp	x0, x2
 3ec:	csel	x0, x0, x1, le
 3f0:	b	3f8 <omp_set_schedule_8_+0x50>
 3f4:	mov	w0, #0x80000000            	// #-2147483648
 3f8:	mov	w1, w0
 3fc:	mov	w0, w3
 400:	bl	0 <gomp_ialias_omp_set_schedule>
 404:	nop
 408:	ldp	x29, x30, [sp], #32
 40c:	ret

0000000000000410 <omp_get_schedule_>:
 410:	stp	x29, x30, [sp, #-48]!
 414:	mov	x29, sp
 418:	str	x0, [sp, #24]
 41c:	str	x1, [sp, #16]
 420:	add	x1, sp, #0x28
 424:	add	x0, sp, #0x2c
 428:	bl	0 <gomp_ialias_omp_get_schedule>
 42c:	ldr	w0, [sp, #44]
 430:	and	w1, w0, #0x7fffffff
 434:	ldr	x0, [sp, #24]
 438:	str	w1, [x0]
 43c:	ldr	w1, [sp, #40]
 440:	ldr	x0, [sp, #16]
 444:	str	w1, [x0]
 448:	nop
 44c:	ldp	x29, x30, [sp], #48
 450:	ret

0000000000000454 <omp_get_schedule_8_>:
 454:	stp	x29, x30, [sp, #-48]!
 458:	mov	x29, sp
 45c:	str	x0, [sp, #24]
 460:	str	x1, [sp, #16]
 464:	add	x1, sp, #0x28
 468:	add	x0, sp, #0x2c
 46c:	bl	0 <gomp_ialias_omp_get_schedule>
 470:	ldr	w0, [sp, #44]
 474:	and	w1, w0, #0x7fffffff
 478:	ldr	x0, [sp, #24]
 47c:	str	w1, [x0]
 480:	ldr	w0, [sp, #40]
 484:	sxtw	x1, w0
 488:	ldr	x0, [sp, #16]
 48c:	str	x1, [x0]
 490:	nop
 494:	ldp	x29, x30, [sp], #48
 498:	ret

000000000000049c <omp_get_thread_limit_>:
 49c:	stp	x29, x30, [sp, #-16]!
 4a0:	mov	x29, sp
 4a4:	bl	0 <gomp_ialias_omp_get_thread_limit>
 4a8:	ldp	x29, x30, [sp], #16
 4ac:	ret

00000000000004b0 <omp_set_max_active_levels_>:
 4b0:	stp	x29, x30, [sp, #-32]!
 4b4:	mov	x29, sp
 4b8:	str	x0, [sp, #24]
 4bc:	ldr	x0, [sp, #24]
 4c0:	ldr	w0, [x0]
 4c4:	bl	0 <gomp_ialias_omp_set_max_active_levels>
 4c8:	nop
 4cc:	ldp	x29, x30, [sp], #32
 4d0:	ret

00000000000004d4 <omp_set_max_active_levels_8_>:
 4d4:	stp	x29, x30, [sp, #-32]!
 4d8:	mov	x29, sp
 4dc:	str	x0, [sp, #24]
 4e0:	ldr	x0, [sp, #24]
 4e4:	ldr	x1, [x0]
 4e8:	mov	x0, #0xffffffff80000001    	// #-2147483647
 4ec:	cmp	x1, x0
 4f0:	b.lt	510 <omp_set_max_active_levels_8_+0x3c>  // b.tstop
 4f4:	ldr	x0, [sp, #24]
 4f8:	ldr	x0, [x0]
 4fc:	mov	x2, #0x7fffffff            	// #2147483647
 500:	mov	x1, #0x7fffffff            	// #2147483647
 504:	cmp	x0, x2
 508:	csel	x0, x0, x1, le
 50c:	b	514 <omp_set_max_active_levels_8_+0x40>
 510:	mov	w0, #0x80000000            	// #-2147483648
 514:	bl	0 <gomp_ialias_omp_set_max_active_levels>
 518:	nop
 51c:	ldp	x29, x30, [sp], #32
 520:	ret

0000000000000524 <omp_get_max_active_levels_>:
 524:	stp	x29, x30, [sp, #-16]!
 528:	mov	x29, sp
 52c:	bl	0 <gomp_ialias_omp_get_max_active_levels>
 530:	ldp	x29, x30, [sp], #16
 534:	ret

0000000000000538 <omp_get_level_>:
 538:	stp	x29, x30, [sp, #-16]!
 53c:	mov	x29, sp
 540:	bl	0 <gomp_ialias_omp_get_level>
 544:	ldp	x29, x30, [sp], #16
 548:	ret

000000000000054c <omp_get_ancestor_thread_num_>:
 54c:	stp	x29, x30, [sp, #-32]!
 550:	mov	x29, sp
 554:	str	x0, [sp, #24]
 558:	ldr	x0, [sp, #24]
 55c:	ldr	w0, [x0]
 560:	bl	0 <gomp_ialias_omp_get_ancestor_thread_num>
 564:	ldp	x29, x30, [sp], #32
 568:	ret

000000000000056c <omp_get_ancestor_thread_num_8_>:
 56c:	stp	x29, x30, [sp, #-32]!
 570:	mov	x29, sp
 574:	str	x0, [sp, #24]
 578:	ldr	x0, [sp, #24]
 57c:	ldr	x1, [x0]
 580:	mov	x0, #0xffffffff80000001    	// #-2147483647
 584:	cmp	x1, x0
 588:	b.lt	5a8 <omp_get_ancestor_thread_num_8_+0x3c>  // b.tstop
 58c:	ldr	x0, [sp, #24]
 590:	ldr	x0, [x0]
 594:	mov	x2, #0x7fffffff            	// #2147483647
 598:	mov	x1, #0x7fffffff            	// #2147483647
 59c:	cmp	x0, x2
 5a0:	csel	x0, x0, x1, le
 5a4:	b	5ac <omp_get_ancestor_thread_num_8_+0x40>
 5a8:	mov	w0, #0x80000000            	// #-2147483648
 5ac:	bl	0 <gomp_ialias_omp_get_ancestor_thread_num>
 5b0:	ldp	x29, x30, [sp], #32
 5b4:	ret

00000000000005b8 <omp_get_team_size_>:
 5b8:	stp	x29, x30, [sp, #-32]!
 5bc:	mov	x29, sp
 5c0:	str	x0, [sp, #24]
 5c4:	ldr	x0, [sp, #24]
 5c8:	ldr	w0, [x0]
 5cc:	bl	0 <gomp_ialias_omp_get_team_size>
 5d0:	ldp	x29, x30, [sp], #32
 5d4:	ret

00000000000005d8 <omp_get_team_size_8_>:
 5d8:	stp	x29, x30, [sp, #-32]!
 5dc:	mov	x29, sp
 5e0:	str	x0, [sp, #24]
 5e4:	ldr	x0, [sp, #24]
 5e8:	ldr	x1, [x0]
 5ec:	mov	x0, #0xffffffff80000001    	// #-2147483647
 5f0:	cmp	x1, x0
 5f4:	b.lt	614 <omp_get_team_size_8_+0x3c>  // b.tstop
 5f8:	ldr	x0, [sp, #24]
 5fc:	ldr	x0, [x0]
 600:	mov	x2, #0x7fffffff            	// #2147483647
 604:	mov	x1, #0x7fffffff            	// #2147483647
 608:	cmp	x0, x2
 60c:	csel	x0, x0, x1, le
 610:	b	618 <omp_get_team_size_8_+0x40>
 614:	mov	w0, #0x80000000            	// #-2147483648
 618:	bl	0 <gomp_ialias_omp_get_team_size>
 61c:	ldp	x29, x30, [sp], #32
 620:	ret

0000000000000624 <omp_get_active_level_>:
 624:	stp	x29, x30, [sp, #-16]!
 628:	mov	x29, sp
 62c:	bl	0 <gomp_ialias_omp_get_active_level>
 630:	ldp	x29, x30, [sp], #16
 634:	ret

0000000000000638 <omp_in_final_>:
 638:	stp	x29, x30, [sp, #-16]!
 63c:	mov	x29, sp
 640:	bl	0 <gomp_ialias_omp_in_final>
 644:	ldp	x29, x30, [sp], #16
 648:	ret

000000000000064c <omp_get_cancellation_>:
 64c:	stp	x29, x30, [sp, #-16]!
 650:	mov	x29, sp
 654:	bl	0 <gomp_ialias_omp_get_cancellation>
 658:	ldp	x29, x30, [sp], #16
 65c:	ret

0000000000000660 <omp_get_proc_bind_>:
 660:	stp	x29, x30, [sp, #-16]!
 664:	mov	x29, sp
 668:	bl	0 <gomp_ialias_omp_get_proc_bind>
 66c:	ldp	x29, x30, [sp], #16
 670:	ret

0000000000000674 <omp_get_num_places_>:
 674:	stp	x29, x30, [sp, #-16]!
 678:	mov	x29, sp
 67c:	bl	0 <gomp_ialias_omp_get_num_places>
 680:	ldp	x29, x30, [sp], #16
 684:	ret

0000000000000688 <omp_get_place_num_procs_>:
 688:	stp	x29, x30, [sp, #-32]!
 68c:	mov	x29, sp
 690:	str	x0, [sp, #24]
 694:	ldr	x0, [sp, #24]
 698:	ldr	w0, [x0]
 69c:	bl	0 <gomp_ialias_omp_get_place_num_procs>
 6a0:	ldp	x29, x30, [sp], #32
 6a4:	ret

00000000000006a8 <omp_get_place_num_procs_8_>:
 6a8:	stp	x29, x30, [sp, #-32]!
 6ac:	mov	x29, sp
 6b0:	str	x0, [sp, #24]
 6b4:	ldr	x0, [sp, #24]
 6b8:	ldr	x1, [x0]
 6bc:	mov	x0, #0xffffffff80000001    	// #-2147483647
 6c0:	cmp	x1, x0
 6c4:	b.lt	6e4 <omp_get_place_num_procs_8_+0x3c>  // b.tstop
 6c8:	ldr	x0, [sp, #24]
 6cc:	ldr	x0, [x0]
 6d0:	mov	x2, #0x7fffffff            	// #2147483647
 6d4:	mov	x1, #0x7fffffff            	// #2147483647
 6d8:	cmp	x0, x2
 6dc:	csel	x0, x0, x1, le
 6e0:	b	6e8 <omp_get_place_num_procs_8_+0x40>
 6e4:	mov	w0, #0x80000000            	// #-2147483648
 6e8:	bl	0 <gomp_ialias_omp_get_place_num_procs>
 6ec:	ldp	x29, x30, [sp], #32
 6f0:	ret

00000000000006f4 <omp_get_place_proc_ids_>:
 6f4:	stp	x29, x30, [sp, #-32]!
 6f8:	mov	x29, sp
 6fc:	str	x0, [sp, #24]
 700:	str	x1, [sp, #16]
 704:	ldr	x0, [sp, #24]
 708:	ldr	w0, [x0]
 70c:	ldr	x1, [sp, #16]
 710:	bl	0 <gomp_ialias_omp_get_place_proc_ids>
 714:	nop
 718:	ldp	x29, x30, [sp], #32
 71c:	ret

0000000000000720 <omp_get_place_proc_ids_8_>:
 720:	stp	x29, x30, [sp, #-32]!
 724:	mov	x29, sp
 728:	str	x0, [sp, #24]
 72c:	str	x1, [sp, #16]
 730:	ldr	x0, [sp, #24]
 734:	ldr	x1, [x0]
 738:	mov	x0, #0xffffffff80000001    	// #-2147483647
 73c:	cmp	x1, x0
 740:	b.lt	760 <omp_get_place_proc_ids_8_+0x40>  // b.tstop
 744:	ldr	x0, [sp, #24]
 748:	ldr	x0, [x0]
 74c:	mov	x2, #0x7fffffff            	// #2147483647
 750:	mov	x1, #0x7fffffff            	// #2147483647
 754:	cmp	x0, x2
 758:	csel	x0, x0, x1, le
 75c:	b	764 <omp_get_place_proc_ids_8_+0x44>
 760:	mov	w0, #0x80000000            	// #-2147483648
 764:	ldr	x1, [sp, #16]
 768:	bl	0 <gomp_get_place_proc_ids_8>
 76c:	nop
 770:	ldp	x29, x30, [sp], #32
 774:	ret

0000000000000778 <omp_get_place_num_>:
 778:	stp	x29, x30, [sp, #-16]!
 77c:	mov	x29, sp
 780:	bl	0 <gomp_ialias_omp_get_place_num>
 784:	ldp	x29, x30, [sp], #16
 788:	ret

000000000000078c <omp_get_partition_num_places_>:
 78c:	stp	x29, x30, [sp, #-16]!
 790:	mov	x29, sp
 794:	bl	0 <gomp_ialias_omp_get_partition_num_places>
 798:	ldp	x29, x30, [sp], #16
 79c:	ret

00000000000007a0 <omp_get_partition_place_nums_>:
 7a0:	stp	x29, x30, [sp, #-32]!
 7a4:	mov	x29, sp
 7a8:	str	x0, [sp, #24]
 7ac:	ldr	x0, [sp, #24]
 7b0:	bl	0 <gomp_ialias_omp_get_partition_place_nums>
 7b4:	nop
 7b8:	ldp	x29, x30, [sp], #32
 7bc:	ret

00000000000007c0 <omp_get_partition_place_nums_8_>:
 7c0:	stp	x29, x30, [sp, #-48]!
 7c4:	mov	x29, sp
 7c8:	str	x0, [sp, #24]
 7cc:	adrp	x0, 0 <gomp_places_list>
 7d0:	add	x0, x0, #0x0
 7d4:	ldr	x0, [x0]
 7d8:	cmp	x0, #0x0
 7dc:	b.eq	84c <omp_get_partition_place_nums_8_+0x8c>  // b.none
 7e0:	bl	0 <gomp_thread>
 7e4:	str	x0, [sp, #32]
 7e8:	ldr	x0, [sp, #32]
 7ec:	ldr	w0, [x0, #92]
 7f0:	cmp	w0, #0x0
 7f4:	b.ne	7fc <omp_get_partition_place_nums_8_+0x3c>  // b.any
 7f8:	bl	0 <gomp_init_affinity>
 7fc:	str	wzr, [sp, #44]
 800:	b	834 <omp_get_partition_place_nums_8_+0x74>
 804:	ldr	x0, [sp, #32]
 808:	ldr	w0, [x0, #52]
 80c:	mov	w2, w0
 810:	ldr	w1, [sp, #44]
 814:	ldr	x0, [sp, #24]
 818:	add	x3, x0, #0x8
 81c:	str	x3, [sp, #24]
 820:	add	x1, x2, x1
 824:	str	x1, [x0]
 828:	ldr	w0, [sp, #44]
 82c:	add	w0, w0, #0x1
 830:	str	w0, [sp, #44]
 834:	ldr	x0, [sp, #32]
 838:	ldr	w0, [x0, #56]
 83c:	ldr	w1, [sp, #44]
 840:	cmp	w1, w0
 844:	b.cc	804 <omp_get_partition_place_nums_8_+0x44>  // b.lo, b.ul, b.last
 848:	b	850 <omp_get_partition_place_nums_8_+0x90>
 84c:	nop
 850:	ldp	x29, x30, [sp], #48
 854:	ret

0000000000000858 <omp_set_default_device_>:
 858:	stp	x29, x30, [sp, #-32]!
 85c:	mov	x29, sp
 860:	str	x0, [sp, #24]
 864:	ldr	x0, [sp, #24]
 868:	ldr	w0, [x0]
 86c:	bl	0 <gomp_ialias_omp_set_default_device>
 870:	ldp	x29, x30, [sp], #32
 874:	ret

0000000000000878 <omp_set_default_device_8_>:
 878:	stp	x29, x30, [sp, #-32]!
 87c:	mov	x29, sp
 880:	str	x0, [sp, #24]
 884:	ldr	x0, [sp, #24]
 888:	ldr	x1, [x0]
 88c:	mov	x0, #0xffffffff80000001    	// #-2147483647
 890:	cmp	x1, x0
 894:	b.lt	8b4 <omp_set_default_device_8_+0x3c>  // b.tstop
 898:	ldr	x0, [sp, #24]
 89c:	ldr	x0, [x0]
 8a0:	mov	x2, #0x7fffffff            	// #2147483647
 8a4:	mov	x1, #0x7fffffff            	// #2147483647
 8a8:	cmp	x0, x2
 8ac:	csel	x0, x0, x1, le
 8b0:	b	8b8 <omp_set_default_device_8_+0x40>
 8b4:	mov	w0, #0x80000000            	// #-2147483648
 8b8:	bl	0 <gomp_ialias_omp_set_default_device>
 8bc:	ldp	x29, x30, [sp], #32
 8c0:	ret

00000000000008c4 <omp_get_default_device_>:
 8c4:	stp	x29, x30, [sp, #-16]!
 8c8:	mov	x29, sp
 8cc:	bl	0 <gomp_ialias_omp_get_default_device>
 8d0:	ldp	x29, x30, [sp], #16
 8d4:	ret

00000000000008d8 <omp_get_num_devices_>:
 8d8:	stp	x29, x30, [sp, #-16]!
 8dc:	mov	x29, sp
 8e0:	bl	0 <gomp_ialias_omp_get_num_devices>
 8e4:	ldp	x29, x30, [sp], #16
 8e8:	ret

00000000000008ec <omp_get_num_teams_>:
 8ec:	stp	x29, x30, [sp, #-16]!
 8f0:	mov	x29, sp
 8f4:	bl	0 <gomp_ialias_omp_get_num_teams>
 8f8:	ldp	x29, x30, [sp], #16
 8fc:	ret

0000000000000900 <omp_get_team_num_>:
 900:	stp	x29, x30, [sp, #-16]!
 904:	mov	x29, sp
 908:	bl	0 <gomp_ialias_omp_get_team_num>
 90c:	ldp	x29, x30, [sp], #16
 910:	ret

0000000000000914 <omp_is_initial_device_>:
 914:	stp	x29, x30, [sp, #-16]!
 918:	mov	x29, sp
 91c:	bl	0 <gomp_ialias_omp_is_initial_device>
 920:	ldp	x29, x30, [sp], #16
 924:	ret

0000000000000928 <omp_get_initial_device_>:
 928:	stp	x29, x30, [sp, #-16]!
 92c:	mov	x29, sp
 930:	bl	0 <gomp_ialias_omp_get_initial_device>
 934:	ldp	x29, x30, [sp], #16
 938:	ret

000000000000093c <omp_get_max_task_priority_>:
 93c:	stp	x29, x30, [sp, #-16]!
 940:	mov	x29, sp
 944:	bl	0 <gomp_ialias_omp_get_max_task_priority>
 948:	ldp	x29, x30, [sp], #16
 94c:	ret

0000000000000950 <omp_set_affinity_format_>:
 950:	stp	x29, x30, [sp, #-32]!
 954:	mov	x29, sp
 958:	str	x0, [sp, #24]
 95c:	str	x1, [sp, #16]
 960:	ldr	x1, [sp, #16]
 964:	ldr	x0, [sp, #24]
 968:	bl	0 <gomp_set_affinity_format>
 96c:	nop
 970:	ldp	x29, x30, [sp], #32
 974:	ret

0000000000000978 <omp_get_affinity_format_>:
 978:	stp	x29, x30, [sp, #-48]!
 97c:	mov	x29, sp
 980:	str	x0, [sp, #24]
 984:	str	x1, [sp, #16]
 988:	adrp	x0, 0 <gomp_affinity_format_var>
 98c:	add	x0, x0, #0x0
 990:	ldr	x0, [x0]
 994:	bl	0 <strlen>
 998:	str	x0, [sp, #40]
 99c:	ldr	x0, [sp, #16]
 9a0:	cmp	x0, #0x0
 9a4:	b.eq	a1c <omp_get_affinity_format_+0xa4>  // b.none
 9a8:	ldr	x1, [sp, #40]
 9ac:	ldr	x0, [sp, #16]
 9b0:	cmp	x1, x0
 9b4:	b.cs	a00 <omp_get_affinity_format_+0x88>  // b.hs, b.nlast
 9b8:	adrp	x0, 0 <gomp_affinity_format_var>
 9bc:	add	x0, x0, #0x0
 9c0:	ldr	x0, [x0]
 9c4:	ldr	x2, [sp, #40]
 9c8:	mov	x1, x0
 9cc:	ldr	x0, [sp, #24]
 9d0:	bl	0 <memcpy>
 9d4:	ldr	x1, [sp, #24]
 9d8:	ldr	x0, [sp, #40]
 9dc:	add	x3, x1, x0
 9e0:	ldr	x1, [sp, #16]
 9e4:	ldr	x0, [sp, #40]
 9e8:	sub	x0, x1, x0
 9ec:	mov	x2, x0
 9f0:	mov	w1, #0x20                  	// #32
 9f4:	mov	x0, x3
 9f8:	bl	0 <memset>
 9fc:	b	a1c <omp_get_affinity_format_+0xa4>
 a00:	adrp	x0, 0 <gomp_affinity_format_var>
 a04:	add	x0, x0, #0x0
 a08:	ldr	x0, [x0]
 a0c:	ldr	x2, [sp, #16]
 a10:	mov	x1, x0
 a14:	ldr	x0, [sp, #24]
 a18:	bl	0 <memcpy>
 a1c:	ldr	x0, [sp, #40]
 a20:	ldp	x29, x30, [sp], #48
 a24:	ret

0000000000000a28 <omp_display_affinity_>:
 a28:	sub	sp, sp, #0x350
 a2c:	stp	x29, x30, [sp]
 a30:	mov	x29, sp
 a34:	str	x19, [sp, #16]
 a38:	str	x0, [sp, #40]
 a3c:	str	x1, [sp, #32]
 a40:	str	xzr, [sp, #840]
 a44:	ldr	x0, [sp, #32]
 a48:	cmp	x0, #0x0
 a4c:	b.eq	a94 <omp_display_affinity_+0x6c>  // b.none
 a50:	ldr	x0, [sp, #32]
 a54:	cmp	x0, #0xff
 a58:	b.hi	a64 <omp_display_affinity_+0x3c>  // b.pmore
 a5c:	add	x0, sp, #0x230
 a60:	b	a70 <omp_display_affinity_+0x48>
 a64:	ldr	x0, [sp, #32]
 a68:	add	x0, x0, #0x1
 a6c:	bl	0 <gomp_malloc>
 a70:	str	x0, [sp, #840]
 a74:	ldr	x2, [sp, #32]
 a78:	ldr	x1, [sp, #40]
 a7c:	ldr	x0, [sp, #840]
 a80:	bl	0 <memcpy>
 a84:	ldr	x1, [sp, #840]
 a88:	ldr	x0, [sp, #32]
 a8c:	add	x0, x1, x0
 a90:	strb	wzr, [x0]
 a94:	bl	0 <gomp_thread>
 a98:	str	x0, [sp, #832]
 a9c:	ldr	x0, [sp, #32]
 aa0:	cmp	x0, #0x0
 aa4:	b.eq	ab0 <omp_display_affinity_+0x88>  // b.none
 aa8:	ldr	x19, [sp, #840]
 aac:	b	abc <omp_display_affinity_+0x94>
 ab0:	adrp	x0, 0 <gomp_affinity_format_var>
 ab4:	add	x0, x0, #0x0
 ab8:	ldr	x19, [x0]
 abc:	bl	14 <gomp_thread_self>
 ac0:	mov	x3, x0
 ac4:	ldr	x0, [sp, #832]
 ac8:	add	x1, x0, #0x10
 acc:	ldr	x0, [sp, #832]
 ad0:	ldr	w2, [x0, #92]
 ad4:	add	x0, sp, #0x30
 ad8:	mov	w5, w2
 adc:	mov	x4, x1
 ae0:	mov	x2, x19
 ae4:	mov	x1, #0x200                 	// #512
 ae8:	bl	0 <gomp_display_affinity>
 aec:	str	x0, [sp, #824]
 af0:	ldr	x0, [sp, #824]
 af4:	cmp	x0, #0x1ff
 af8:	b.hi	b20 <omp_display_affinity_+0xf8>  // b.pmore
 afc:	ldr	x0, [sp, #824]
 b00:	add	x1, sp, #0x30
 b04:	mov	w2, #0xa                   	// #10
 b08:	strb	w2, [x1, x0]
 b0c:	ldr	x0, [sp, #824]
 b10:	add	x1, x0, #0x1
 b14:	add	x0, sp, #0x30
 b18:	bl	0 <gomp_print_string>
 b1c:	b	bb0 <omp_display_affinity_+0x188>
 b20:	ldr	x0, [sp, #824]
 b24:	add	x0, x0, #0x1
 b28:	bl	0 <gomp_malloc>
 b2c:	str	x0, [sp, #816]
 b30:	ldr	x0, [sp, #32]
 b34:	cmp	x0, #0x0
 b38:	b.eq	b44 <omp_display_affinity_+0x11c>  // b.none
 b3c:	ldr	x19, [sp, #840]
 b40:	b	b50 <omp_display_affinity_+0x128>
 b44:	adrp	x0, 0 <gomp_affinity_format_var>
 b48:	add	x0, x0, #0x0
 b4c:	ldr	x19, [x0]
 b50:	bl	14 <gomp_thread_self>
 b54:	mov	x3, x0
 b58:	ldr	x0, [sp, #832]
 b5c:	add	x1, x0, #0x10
 b60:	ldr	x0, [sp, #832]
 b64:	ldr	w2, [x0, #92]
 b68:	add	x0, sp, #0x30
 b6c:	mov	w5, w2
 b70:	mov	x4, x1
 b74:	mov	x2, x19
 b78:	mov	x1, #0x200                 	// #512
 b7c:	bl	0 <gomp_display_affinity>
 b80:	ldr	x1, [sp, #816]
 b84:	ldr	x0, [sp, #824]
 b88:	add	x0, x1, x0
 b8c:	mov	w1, #0xa                   	// #10
 b90:	strb	w1, [x0]
 b94:	ldr	x0, [sp, #824]
 b98:	add	x0, x0, #0x1
 b9c:	mov	x1, x0
 ba0:	ldr	x0, [sp, #816]
 ba4:	bl	0 <gomp_print_string>
 ba8:	ldr	x0, [sp, #816]
 bac:	bl	0 <free>
 bb0:	ldr	x0, [sp, #840]
 bb4:	cmp	x0, #0x0
 bb8:	b.eq	bd4 <omp_display_affinity_+0x1ac>  // b.none
 bbc:	add	x0, sp, #0x230
 bc0:	ldr	x1, [sp, #840]
 bc4:	cmp	x1, x0
 bc8:	b.eq	bd4 <omp_display_affinity_+0x1ac>  // b.none
 bcc:	ldr	x0, [sp, #840]
 bd0:	bl	0 <free>
 bd4:	nop
 bd8:	ldr	x19, [sp, #16]
 bdc:	ldp	x29, x30, [sp]
 be0:	add	sp, sp, #0x350
 be4:	ret

0000000000000be8 <omp_capture_affinity_>:
 be8:	stp	x29, x30, [sp, #-352]!
 bec:	mov	x29, sp
 bf0:	str	x19, [sp, #16]
 bf4:	str	x0, [sp, #56]
 bf8:	str	x1, [sp, #48]
 bfc:	str	x2, [sp, #40]
 c00:	str	x3, [sp, #32]
 c04:	str	xzr, [sp, #344]
 c08:	ldr	x0, [sp, #32]
 c0c:	cmp	x0, #0x0
 c10:	b.eq	c58 <omp_capture_affinity_+0x70>  // b.none
 c14:	ldr	x0, [sp, #32]
 c18:	cmp	x0, #0xff
 c1c:	b.hi	c28 <omp_capture_affinity_+0x40>  // b.pmore
 c20:	add	x0, sp, #0x48
 c24:	b	c34 <omp_capture_affinity_+0x4c>
 c28:	ldr	x0, [sp, #32]
 c2c:	add	x0, x0, #0x1
 c30:	bl	0 <gomp_malloc>
 c34:	str	x0, [sp, #344]
 c38:	ldr	x2, [sp, #32]
 c3c:	ldr	x1, [sp, #48]
 c40:	ldr	x0, [sp, #344]
 c44:	bl	0 <memcpy>
 c48:	ldr	x1, [sp, #344]
 c4c:	ldr	x0, [sp, #32]
 c50:	add	x0, x1, x0
 c54:	strb	wzr, [x0]
 c58:	bl	0 <gomp_thread>
 c5c:	str	x0, [sp, #336]
 c60:	ldr	x0, [sp, #32]
 c64:	cmp	x0, #0x0
 c68:	b.eq	c74 <omp_capture_affinity_+0x8c>  // b.none
 c6c:	ldr	x19, [sp, #344]
 c70:	b	c80 <omp_capture_affinity_+0x98>
 c74:	adrp	x0, 0 <gomp_affinity_format_var>
 c78:	add	x0, x0, #0x0
 c7c:	ldr	x19, [x0]
 c80:	bl	14 <gomp_thread_self>
 c84:	mov	x2, x0
 c88:	ldr	x0, [sp, #336]
 c8c:	add	x1, x0, #0x10
 c90:	ldr	x0, [sp, #336]
 c94:	ldr	w0, [x0, #92]
 c98:	mov	w5, w0
 c9c:	mov	x4, x1
 ca0:	mov	x3, x2
 ca4:	mov	x2, x19
 ca8:	ldr	x1, [sp, #40]
 cac:	ldr	x0, [sp, #56]
 cb0:	bl	0 <gomp_display_affinity>
 cb4:	str	x0, [sp, #328]
 cb8:	ldr	x0, [sp, #344]
 cbc:	cmp	x0, #0x0
 cc0:	b.eq	cdc <omp_capture_affinity_+0xf4>  // b.none
 cc4:	add	x0, sp, #0x48
 cc8:	ldr	x1, [sp, #344]
 ccc:	cmp	x1, x0
 cd0:	b.eq	cdc <omp_capture_affinity_+0xf4>  // b.none
 cd4:	ldr	x0, [sp, #344]
 cd8:	bl	0 <free>
 cdc:	ldr	x1, [sp, #328]
 ce0:	ldr	x0, [sp, #40]
 ce4:	cmp	x1, x0
 ce8:	b.cs	d14 <omp_capture_affinity_+0x12c>  // b.hs, b.nlast
 cec:	ldr	x1, [sp, #56]
 cf0:	ldr	x0, [sp, #328]
 cf4:	add	x3, x1, x0
 cf8:	ldr	x1, [sp, #40]
 cfc:	ldr	x0, [sp, #328]
 d00:	sub	x0, x1, x0
 d04:	mov	x2, x0
 d08:	mov	w1, #0x20                  	// #32
 d0c:	mov	x0, x3
 d10:	bl	0 <memset>
 d14:	ldr	x0, [sp, #328]
 d18:	ldr	x19, [sp, #16]
 d1c:	ldp	x29, x30, [sp], #352
 d20:	ret

0000000000000d24 <omp_pause_resource_>:
 d24:	stp	x29, x30, [sp, #-32]!
 d28:	mov	x29, sp
 d2c:	str	x0, [sp, #24]
 d30:	str	x1, [sp, #16]
 d34:	ldr	x0, [sp, #24]
 d38:	ldr	w0, [x0]
 d3c:	mov	w2, w0
 d40:	ldr	x0, [sp, #16]
 d44:	ldr	w0, [x0]
 d48:	mov	w1, w0
 d4c:	mov	w0, w2
 d50:	bl	0 <gomp_ialias_omp_pause_resource>
 d54:	ldp	x29, x30, [sp], #32
 d58:	ret

0000000000000d5c <omp_pause_resource_all_>:
 d5c:	stp	x29, x30, [sp, #-32]!
 d60:	mov	x29, sp
 d64:	str	x0, [sp, #24]
 d68:	ldr	x0, [sp, #24]
 d6c:	ldr	w0, [x0]
 d70:	bl	0 <gomp_ialias_omp_pause_resource_all>
 d74:	ldp	x29, x30, [sp], #32
 d78:	ret

affinity.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_thread>:
       0:	mrs	x1, tpidr_el0
       4:	adrp	x0, 0 <gomp_tls_data>
       8:	ldr	x0, [x0]
       c:	add	x0, x1, x0
      10:	ret

0000000000000014 <gomp_init_affinity>:
      14:	stp	x29, x30, [sp, #-32]!
      18:	mov	x29, sp
      1c:	adrp	x0, 0 <gomp_places_list>
      20:	add	x0, x0, #0x0
      24:	ldr	x0, [x0]
      28:	cmp	x0, #0x0
      2c:	b.ne	54 <gomp_init_affinity+0x40>  // b.any
      30:	mov	w2, #0x1                   	// #1
      34:	mov	x1, #0xffffffffffffffff    	// #-1
      38:	mov	w0, #0x1                   	// #1
      3c:	bl	f04 <gomp_affinity_init_level>
      40:	and	w0, w0, #0xff
      44:	eor	w0, w0, #0x1
      48:	and	w0, w0, #0xff
      4c:	cmp	w0, #0x0
      50:	b.ne	bc <gomp_init_affinity+0xa8>  // b.any
      54:	bl	0 <gomp_thread>
      58:	str	x0, [sp, #24]
      5c:	bl	0 <pthread_self>
      60:	mov	x3, x0
      64:	adrp	x0, 0 <gomp_cpuset_size>
      68:	add	x0, x0, #0x0
      6c:	ldr	x1, [x0]
      70:	adrp	x0, 0 <gomp_places_list>
      74:	add	x0, x0, #0x0
      78:	ldr	x0, [x0]
      7c:	ldr	x0, [x0]
      80:	mov	x2, x0
      84:	mov	x0, x3
      88:	bl	0 <pthread_setaffinity_np>
      8c:	ldr	x0, [sp, #24]
      90:	mov	w1, #0x1                   	// #1
      94:	str	w1, [x0, #92]
      98:	ldr	x0, [sp, #24]
      9c:	str	wzr, [x0, #52]
      a0:	adrp	x0, 0 <gomp_places_list_len>
      a4:	add	x0, x0, #0x0
      a8:	ldr	x0, [x0]
      ac:	mov	w1, w0
      b0:	ldr	x0, [sp, #24]
      b4:	str	w1, [x0, #56]
      b8:	b	c0 <gomp_init_affinity+0xac>
      bc:	nop
      c0:	ldp	x29, x30, [sp], #32
      c4:	ret

00000000000000c8 <gomp_init_thread_affinity>:
      c8:	stp	x29, x30, [sp, #-32]!
      cc:	mov	x29, sp
      d0:	str	x0, [sp, #24]
      d4:	str	w1, [sp, #20]
      d8:	adrp	x0, 0 <gomp_cpuset_size>
      dc:	add	x0, x0, #0x0
      e0:	ldr	x3, [x0]
      e4:	adrp	x0, 0 <gomp_places_list>
      e8:	add	x0, x0, #0x0
      ec:	ldr	x1, [x0]
      f0:	ldr	w0, [sp, #20]
      f4:	lsl	x0, x0, #3
      f8:	add	x0, x1, x0
      fc:	ldr	x0, [x0]
     100:	mov	x2, x0
     104:	mov	x1, x3
     108:	ldr	x0, [sp, #24]
     10c:	bl	0 <pthread_attr_setaffinity_np>
     110:	nop
     114:	ldp	x29, x30, [sp], #32
     118:	ret

000000000000011c <gomp_affinity_alloc>:
     11c:	stp	x29, x30, [sp, #-64]!
     120:	mov	x29, sp
     124:	str	x0, [sp, #24]
     128:	strb	w1, [sp, #23]
     12c:	adrp	x0, 0 <gomp_cpusetp>
     130:	add	x0, x0, #0x0
     134:	ldr	x0, [x0]
     138:	cmp	x0, #0x0
     13c:	b.ne	168 <gomp_affinity_alloc+0x4c>  // b.any
     140:	ldrb	w0, [sp, #23]
     144:	eor	w0, w0, #0x1
     148:	and	w0, w0, #0xff
     14c:	cmp	w0, #0x0
     150:	b.eq	160 <gomp_affinity_alloc+0x44>  // b.none
     154:	adrp	x0, 0 <gomp_thread>
     158:	add	x0, x0, #0x0
     15c:	bl	0 <gomp_error>
     160:	mov	x0, #0x0                   	// #0
     164:	b	228 <gomp_affinity_alloc+0x10c>
     168:	adrp	x0, 0 <gomp_cpuset_size>
     16c:	add	x0, x0, #0x0
     170:	ldr	x0, [x0]
     174:	add	x1, x0, #0x8
     178:	ldr	x0, [sp, #24]
     17c:	mul	x0, x1, x0
     180:	bl	0 <malloc>
     184:	str	x0, [sp, #40]
     188:	ldr	x0, [sp, #40]
     18c:	cmp	x0, #0x0
     190:	b.ne	1bc <gomp_affinity_alloc+0xa0>  // b.any
     194:	ldrb	w0, [sp, #23]
     198:	eor	w0, w0, #0x1
     19c:	and	w0, w0, #0xff
     1a0:	cmp	w0, #0x0
     1a4:	b.eq	1b4 <gomp_affinity_alloc+0x98>  // b.none
     1a8:	adrp	x0, 0 <gomp_thread>
     1ac:	add	x0, x0, #0x0
     1b0:	bl	0 <gomp_error>
     1b4:	mov	x0, #0x0                   	// #0
     1b8:	b	228 <gomp_affinity_alloc+0x10c>
     1bc:	ldr	x0, [sp, #24]
     1c0:	lsl	x0, x0, #3
     1c4:	ldr	x1, [sp, #40]
     1c8:	add	x0, x1, x0
     1cc:	str	x0, [sp, #48]
     1d0:	str	xzr, [sp, #56]
     1d4:	b	214 <gomp_affinity_alloc+0xf8>
     1d8:	ldr	x0, [sp, #56]
     1dc:	lsl	x0, x0, #3
     1e0:	ldr	x1, [sp, #40]
     1e4:	add	x0, x1, x0
     1e8:	ldr	x1, [sp, #48]
     1ec:	str	x1, [x0]
     1f0:	ldr	x0, [sp, #56]
     1f4:	add	x0, x0, #0x1
     1f8:	str	x0, [sp, #56]
     1fc:	adrp	x0, 0 <gomp_cpuset_size>
     200:	add	x0, x0, #0x0
     204:	ldr	x0, [x0]
     208:	ldr	x1, [sp, #48]
     20c:	add	x0, x1, x0
     210:	str	x0, [sp, #48]
     214:	ldr	x1, [sp, #56]
     218:	ldr	x0, [sp, #24]
     21c:	cmp	x1, x0
     220:	b.cc	1d8 <gomp_affinity_alloc+0xbc>  // b.lo, b.ul, b.last
     224:	ldr	x0, [sp, #40]
     228:	ldp	x29, x30, [sp], #64
     22c:	ret

0000000000000230 <gomp_affinity_init_place>:
     230:	stp	x29, x30, [sp, #-48]!
     234:	mov	x29, sp
     238:	str	x0, [sp, #24]
     23c:	ldr	x0, [sp, #24]
     240:	str	x0, [sp, #40]
     244:	adrp	x0, 0 <gomp_cpuset_size>
     248:	add	x0, x0, #0x0
     24c:	ldr	x0, [x0]
     250:	ldr	x1, [sp, #40]
     254:	mov	x3, x1
     258:	mov	x2, x0
     25c:	mov	w1, #0x0                   	// #0
     260:	mov	x0, x3
     264:	bl	0 <memset>
     268:	nop
     26c:	ldp	x29, x30, [sp], #48
     270:	ret

0000000000000274 <gomp_affinity_add_cpus>:
     274:	stp	x29, x30, [sp, #-96]!
     278:	mov	x29, sp
     27c:	str	x0, [sp, #56]
     280:	str	x1, [sp, #48]
     284:	str	x2, [sp, #40]
     288:	str	x3, [sp, #32]
     28c:	strb	w4, [sp, #31]
     290:	ldr	x0, [sp, #56]
     294:	str	x0, [sp, #88]
     298:	adrp	x0, 0 <gomp_cpuset_size>
     29c:	add	x0, x0, #0x0
     2a0:	ldr	x0, [x0]
     2a4:	lsl	x0, x0, #3
     2a8:	str	x0, [sp, #80]
     2ac:	ldr	x1, [sp, #48]
     2b0:	ldr	x0, [sp, #80]
     2b4:	cmp	x1, x0
     2b8:	b.cc	2e8 <gomp_affinity_add_cpus+0x74>  // b.lo, b.ul, b.last
     2bc:	ldrb	w0, [sp, #31]
     2c0:	eor	w0, w0, #0x1
     2c4:	and	w0, w0, #0xff
     2c8:	cmp	w0, #0x0
     2cc:	b.eq	2e0 <gomp_affinity_add_cpus+0x6c>  // b.none
     2d0:	ldr	x1, [sp, #48]
     2d4:	adrp	x0, 0 <gomp_thread>
     2d8:	add	x0, x0, #0x0
     2dc:	bl	0 <gomp_error>
     2e0:	mov	w0, #0x0                   	// #0
     2e4:	b	3f4 <gomp_affinity_add_cpus+0x180>
     2e8:	ldr	x0, [sp, #48]
     2ec:	str	x0, [sp, #72]
     2f0:	ldr	x0, [sp, #72]
     2f4:	lsr	x1, x0, #3
     2f8:	adrp	x0, 0 <gomp_cpuset_size>
     2fc:	add	x0, x0, #0x0
     300:	ldr	x0, [x0]
     304:	cmp	x1, x0
     308:	b.cs	348 <gomp_affinity_add_cpus+0xd4>  // b.hs, b.nlast
     30c:	ldr	x2, [sp, #88]
     310:	ldr	x0, [sp, #72]
     314:	lsr	x0, x0, #6
     318:	lsl	x1, x0, #3
     31c:	add	x1, x2, x1
     320:	ldr	x2, [x1]
     324:	ldr	x1, [sp, #72]
     328:	and	w1, w1, #0x3f
     32c:	mov	x3, #0x1                   	// #1
     330:	lsl	x1, x3, x1
     334:	ldr	x3, [sp, #88]
     338:	lsl	x0, x0, #3
     33c:	add	x0, x3, x0
     340:	orr	x1, x2, x1
     344:	str	x1, [x0]
     348:	ldr	x0, [sp, #40]
     34c:	sub	x0, x0, #0x1
     350:	str	x0, [sp, #40]
     354:	ldr	x0, [sp, #40]
     358:	cmp	x0, #0x0
     35c:	b.ne	368 <gomp_affinity_add_cpus+0xf4>  // b.any
     360:	mov	w0, #0x1                   	// #1
     364:	b	3f4 <gomp_affinity_add_cpus+0x180>
     368:	ldr	x0, [sp, #32]
     36c:	cmp	x0, #0x0
     370:	b.ge	38c <gomp_affinity_add_cpus+0x118>  // b.tcont
     374:	ldr	x1, [sp, #32]
     378:	ldr	x0, [sp, #48]
     37c:	add	x0, x1, x0
     380:	ldr	x1, [sp, #48]
     384:	cmp	x1, x0
     388:	b.cc	3b0 <gomp_affinity_add_cpus+0x13c>  // b.lo, b.ul, b.last
     38c:	ldr	x0, [sp, #32]
     390:	cmp	x0, #0x0
     394:	b.le	3e0 <gomp_affinity_add_cpus+0x16c>
     398:	ldr	x1, [sp, #32]
     39c:	ldr	x0, [sp, #48]
     3a0:	add	x0, x1, x0
     3a4:	ldr	x1, [sp, #48]
     3a8:	cmp	x1, x0
     3ac:	b.ls	3e0 <gomp_affinity_add_cpus+0x16c>  // b.plast
     3b0:	ldrb	w0, [sp, #31]
     3b4:	eor	w0, w0, #0x1
     3b8:	and	w0, w0, #0xff
     3bc:	cmp	w0, #0x0
     3c0:	b.eq	3d8 <gomp_affinity_add_cpus+0x164>  // b.none
     3c4:	ldr	x2, [sp, #32]
     3c8:	ldr	x1, [sp, #48]
     3cc:	adrp	x0, 0 <gomp_thread>
     3d0:	add	x0, x0, #0x0
     3d4:	bl	0 <gomp_error>
     3d8:	mov	w0, #0x0                   	// #0
     3dc:	b	3f4 <gomp_affinity_add_cpus+0x180>
     3e0:	ldr	x0, [sp, #32]
     3e4:	ldr	x1, [sp, #48]
     3e8:	add	x0, x1, x0
     3ec:	str	x0, [sp, #48]
     3f0:	b	2ac <gomp_affinity_add_cpus+0x38>
     3f4:	ldp	x29, x30, [sp], #96
     3f8:	ret

00000000000003fc <gomp_affinity_remove_cpu>:
     3fc:	stp	x29, x30, [sp, #-64]!
     400:	mov	x29, sp
     404:	str	x0, [sp, #24]
     408:	str	x1, [sp, #16]
     40c:	ldr	x0, [sp, #24]
     410:	str	x0, [sp, #56]
     414:	adrp	x0, 0 <gomp_cpuset_size>
     418:	add	x0, x0, #0x0
     41c:	ldr	x0, [x0]
     420:	lsl	x0, x0, #3
     424:	ldr	x1, [sp, #16]
     428:	cmp	x1, x0
     42c:	b.cc	448 <gomp_affinity_remove_cpu+0x4c>  // b.lo, b.ul, b.last
     430:	ldr	x1, [sp, #16]
     434:	adrp	x0, 0 <gomp_thread>
     438:	add	x0, x0, #0x0
     43c:	bl	0 <gomp_error>
     440:	mov	w0, #0x0                   	// #0
     444:	b	530 <gomp_affinity_remove_cpu+0x134>
     448:	ldr	x0, [sp, #16]
     44c:	str	x0, [sp, #48]
     450:	ldr	x0, [sp, #48]
     454:	lsr	x1, x0, #3
     458:	adrp	x0, 0 <gomp_cpuset_size>
     45c:	add	x0, x0, #0x0
     460:	ldr	x0, [x0]
     464:	cmp	x1, x0
     468:	b.cs	4a4 <gomp_affinity_remove_cpu+0xa8>  // b.hs, b.nlast
     46c:	ldr	x1, [sp, #56]
     470:	ldr	x0, [sp, #48]
     474:	lsr	x0, x0, #6
     478:	lsl	x0, x0, #3
     47c:	add	x0, x1, x0
     480:	ldr	x1, [x0]
     484:	ldr	x0, [sp, #48]
     488:	and	w0, w0, #0x3f
     48c:	lsr	x0, x1, x0
     490:	and	x0, x0, #0x1
     494:	cmp	x0, #0x0
     498:	b.eq	4a4 <gomp_affinity_remove_cpu+0xa8>  // b.none
     49c:	mov	w0, #0x1                   	// #1
     4a0:	b	4a8 <gomp_affinity_remove_cpu+0xac>
     4a4:	mov	w0, #0x0                   	// #0
     4a8:	cmp	w0, #0x0
     4ac:	b.ne	4c8 <gomp_affinity_remove_cpu+0xcc>  // b.any
     4b0:	ldr	x1, [sp, #16]
     4b4:	adrp	x0, 0 <gomp_thread>
     4b8:	add	x0, x0, #0x0
     4bc:	bl	0 <gomp_error>
     4c0:	mov	w0, #0x0                   	// #0
     4c4:	b	530 <gomp_affinity_remove_cpu+0x134>
     4c8:	ldr	x0, [sp, #16]
     4cc:	str	x0, [sp, #40]
     4d0:	ldr	x0, [sp, #40]
     4d4:	lsr	x1, x0, #3
     4d8:	adrp	x0, 0 <gomp_cpuset_size>
     4dc:	add	x0, x0, #0x0
     4e0:	ldr	x0, [x0]
     4e4:	cmp	x1, x0
     4e8:	b.cs	52c <gomp_affinity_remove_cpu+0x130>  // b.hs, b.nlast
     4ec:	ldr	x2, [sp, #56]
     4f0:	ldr	x0, [sp, #40]
     4f4:	lsr	x0, x0, #6
     4f8:	lsl	x1, x0, #3
     4fc:	add	x1, x2, x1
     500:	ldr	x2, [x1]
     504:	ldr	x1, [sp, #40]
     508:	and	w1, w1, #0x3f
     50c:	mov	x3, #0x1                   	// #1
     510:	lsl	x1, x3, x1
     514:	mvn	x1, x1
     518:	ldr	x3, [sp, #56]
     51c:	lsl	x0, x0, #3
     520:	add	x0, x3, x0
     524:	and	x1, x2, x1
     528:	str	x1, [x0]
     52c:	mov	w0, #0x1                   	// #1
     530:	ldp	x29, x30, [sp], #64
     534:	ret

0000000000000538 <gomp_affinity_copy_place>:
     538:	stp	x29, x30, [sp, #-96]!
     53c:	mov	x29, sp
     540:	str	x0, [sp, #40]
     544:	str	x1, [sp, #32]
     548:	str	x2, [sp, #24]
     54c:	adrp	x0, 0 <gomp_cpuset_size>
     550:	add	x0, x0, #0x0
     554:	ldr	x0, [x0]
     558:	lsl	x0, x0, #3
     55c:	str	x0, [sp, #80]
     560:	ldr	x0, [sp, #40]
     564:	str	x0, [sp, #72]
     568:	ldr	x0, [sp, #32]
     56c:	str	x0, [sp, #64]
     570:	adrp	x0, 0 <gomp_cpuset_size>
     574:	add	x0, x0, #0x0
     578:	ldr	x0, [x0]
     57c:	ldr	x1, [sp, #72]
     580:	mov	x3, x1
     584:	mov	x2, x0
     588:	mov	w1, #0x0                   	// #0
     58c:	mov	x0, x3
     590:	bl	0 <memset>
     594:	str	xzr, [sp, #88]
     598:	b	6f4 <gomp_affinity_copy_place+0x1bc>
     59c:	ldr	x0, [sp, #88]
     5a0:	str	x0, [sp, #56]
     5a4:	ldr	x0, [sp, #56]
     5a8:	lsr	x1, x0, #3
     5ac:	adrp	x0, 0 <gomp_cpuset_size>
     5b0:	add	x0, x0, #0x0
     5b4:	ldr	x0, [x0]
     5b8:	cmp	x1, x0
     5bc:	b.cs	5f8 <gomp_affinity_copy_place+0xc0>  // b.hs, b.nlast
     5c0:	ldr	x1, [sp, #64]
     5c4:	ldr	x0, [sp, #56]
     5c8:	lsr	x0, x0, #6
     5cc:	lsl	x0, x0, #3
     5d0:	add	x0, x1, x0
     5d4:	ldr	x1, [x0]
     5d8:	ldr	x0, [sp, #56]
     5dc:	and	w0, w0, #0x3f
     5e0:	lsr	x0, x1, x0
     5e4:	and	x0, x0, #0x1
     5e8:	cmp	x0, #0x0
     5ec:	b.eq	5f8 <gomp_affinity_copy_place+0xc0>  // b.none
     5f0:	mov	w0, #0x1                   	// #1
     5f4:	b	5fc <gomp_affinity_copy_place+0xc4>
     5f8:	mov	w0, #0x0                   	// #0
     5fc:	cmp	w0, #0x0
     600:	b.eq	6e8 <gomp_affinity_copy_place+0x1b0>  // b.none
     604:	ldr	x0, [sp, #24]
     608:	cmp	x0, #0x0
     60c:	b.ge	628 <gomp_affinity_copy_place+0xf0>  // b.tcont
     610:	ldr	x1, [sp, #24]
     614:	ldr	x0, [sp, #88]
     618:	add	x0, x1, x0
     61c:	ldr	x1, [sp, #88]
     620:	cmp	x1, x0
     624:	b.cc	664 <gomp_affinity_copy_place+0x12c>  // b.lo, b.ul, b.last
     628:	ldr	x0, [sp, #24]
     62c:	cmp	x0, #0x0
     630:	b.le	680 <gomp_affinity_copy_place+0x148>
     634:	ldr	x1, [sp, #24]
     638:	ldr	x0, [sp, #88]
     63c:	add	x0, x1, x0
     640:	ldr	x1, [sp, #88]
     644:	cmp	x1, x0
     648:	b.hi	664 <gomp_affinity_copy_place+0x12c>  // b.pmore
     64c:	ldr	x1, [sp, #24]
     650:	ldr	x0, [sp, #88]
     654:	add	x0, x1, x0
     658:	ldr	x1, [sp, #80]
     65c:	cmp	x1, x0
     660:	b.hi	680 <gomp_affinity_copy_place+0x148>  // b.pmore
     664:	ldr	x2, [sp, #24]
     668:	ldr	x1, [sp, #88]
     66c:	adrp	x0, 0 <gomp_thread>
     670:	add	x0, x0, #0x0
     674:	bl	0 <gomp_error>
     678:	mov	w0, #0x0                   	// #0
     67c:	b	708 <gomp_affinity_copy_place+0x1d0>
     680:	ldr	x0, [sp, #24]
     684:	ldr	x1, [sp, #88]
     688:	add	x0, x1, x0
     68c:	str	x0, [sp, #48]
     690:	ldr	x0, [sp, #48]
     694:	lsr	x1, x0, #3
     698:	adrp	x0, 0 <gomp_cpuset_size>
     69c:	add	x0, x0, #0x0
     6a0:	ldr	x0, [x0]
     6a4:	cmp	x1, x0
     6a8:	b.cs	6e8 <gomp_affinity_copy_place+0x1b0>  // b.hs, b.nlast
     6ac:	ldr	x2, [sp, #72]
     6b0:	ldr	x0, [sp, #48]
     6b4:	lsr	x0, x0, #6
     6b8:	lsl	x1, x0, #3
     6bc:	add	x1, x2, x1
     6c0:	ldr	x2, [x1]
     6c4:	ldr	x1, [sp, #48]
     6c8:	and	w1, w1, #0x3f
     6cc:	mov	x3, #0x1                   	// #1
     6d0:	lsl	x1, x3, x1
     6d4:	ldr	x3, [sp, #72]
     6d8:	lsl	x0, x0, #3
     6dc:	add	x0, x3, x0
     6e0:	orr	x1, x2, x1
     6e4:	str	x1, [x0]
     6e8:	ldr	x0, [sp, #88]
     6ec:	add	x0, x0, #0x1
     6f0:	str	x0, [sp, #88]
     6f4:	ldr	x1, [sp, #88]
     6f8:	ldr	x0, [sp, #80]
     6fc:	cmp	x1, x0
     700:	b.cc	59c <gomp_affinity_copy_place+0x64>  // b.lo, b.ul, b.last
     704:	mov	w0, #0x1                   	// #1
     708:	ldp	x29, x30, [sp], #96
     70c:	ret

0000000000000710 <gomp_affinity_same_place>:
     710:	stp	x29, x30, [sp, #-32]!
     714:	mov	x29, sp
     718:	str	x0, [sp, #24]
     71c:	str	x1, [sp, #16]
     720:	adrp	x0, 0 <gomp_cpuset_size>
     724:	add	x0, x0, #0x0
     728:	ldr	x0, [x0]
     72c:	mov	x2, x0
     730:	ldr	x1, [sp, #16]
     734:	ldr	x0, [sp, #24]
     738:	bl	0 <memcmp>
     73c:	cmp	w0, #0x0
     740:	cset	w0, eq  // eq = none
     744:	and	w0, w0, #0xff
     748:	ldp	x29, x30, [sp], #32
     74c:	ret

0000000000000750 <gomp_affinity_finalize_place_list>:
     750:	stp	x29, x30, [sp, #-112]!
     754:	mov	x29, sp
     758:	strb	w0, [sp, #31]
     75c:	str	xzr, [sp, #104]
     760:	str	xzr, [sp, #96]
     764:	b	89c <gomp_affinity_finalize_place_list+0x14c>
     768:	adrp	x0, 0 <gomp_places_list>
     76c:	add	x0, x0, #0x0
     770:	ldr	x1, [x0]
     774:	ldr	x0, [sp, #104]
     778:	lsl	x0, x0, #3
     77c:	add	x0, x1, x0
     780:	ldr	x0, [x0]
     784:	str	x0, [sp, #80]
     788:	strb	wzr, [sp, #79]
     78c:	ldr	x0, [sp, #80]
     790:	str	x0, [sp, #64]
     794:	ldr	x0, [sp, #80]
     798:	str	x0, [sp, #56]
     79c:	adrp	x0, 0 <gomp_cpusetp>
     7a0:	add	x0, x0, #0x0
     7a4:	ldr	x0, [x0]
     7a8:	str	x0, [sp, #48]
     7ac:	adrp	x0, 0 <gomp_cpuset_size>
     7b0:	add	x0, x0, #0x0
     7b4:	ldr	x0, [x0]
     7b8:	lsr	x0, x0, #3
     7bc:	str	x0, [sp, #40]
     7c0:	str	xzr, [sp, #88]
     7c4:	b	814 <gomp_affinity_finalize_place_list+0xc4>
     7c8:	ldr	x0, [sp, #88]
     7cc:	lsl	x0, x0, #3
     7d0:	ldr	x1, [sp, #56]
     7d4:	add	x0, x1, x0
     7d8:	ldr	x2, [x0]
     7dc:	ldr	x0, [sp, #88]
     7e0:	lsl	x0, x0, #3
     7e4:	ldr	x1, [sp, #48]
     7e8:	add	x0, x1, x0
     7ec:	ldr	x1, [x0]
     7f0:	ldr	x3, [sp, #64]
     7f4:	ldr	x0, [sp, #88]
     7f8:	lsl	x0, x0, #3
     7fc:	add	x0, x3, x0
     800:	and	x1, x2, x1
     804:	str	x1, [x0]
     808:	ldr	x0, [sp, #88]
     80c:	add	x0, x0, #0x1
     810:	str	x0, [sp, #88]
     814:	ldr	x1, [sp, #88]
     818:	ldr	x0, [sp, #40]
     81c:	cmp	x1, x0
     820:	b.cc	7c8 <gomp_affinity_finalize_place_list+0x78>  // b.lo, b.ul, b.last
     824:	adrp	x0, 0 <gomp_cpuset_size>
     828:	add	x0, x0, #0x0
     82c:	ldr	x0, [x0]
     830:	ldr	x1, [sp, #80]
     834:	bl	0 <gomp_cpuset_popcount>
     838:	cmp	x0, #0x0
     83c:	cset	w0, ne  // ne = any
     840:	strb	w0, [sp, #79]
     844:	ldrb	w0, [sp, #79]
     848:	cmp	w0, #0x0
     84c:	b.eq	890 <gomp_affinity_finalize_place_list+0x140>  // b.none
     850:	adrp	x0, 0 <gomp_places_list>
     854:	add	x0, x0, #0x0
     858:	ldr	x1, [x0]
     85c:	ldr	x0, [sp, #104]
     860:	lsl	x0, x0, #3
     864:	add	x1, x1, x0
     868:	adrp	x0, 0 <gomp_places_list>
     86c:	add	x0, x0, #0x0
     870:	ldr	x2, [x0]
     874:	ldr	x0, [sp, #96]
     878:	add	x3, x0, #0x1
     87c:	str	x3, [sp, #96]
     880:	lsl	x0, x0, #3
     884:	add	x0, x2, x0
     888:	ldr	x1, [x1]
     88c:	str	x1, [x0]
     890:	ldr	x0, [sp, #104]
     894:	add	x0, x0, #0x1
     898:	str	x0, [sp, #104]
     89c:	adrp	x0, 0 <gomp_places_list_len>
     8a0:	add	x0, x0, #0x0
     8a4:	ldr	x0, [x0]
     8a8:	ldr	x1, [sp, #104]
     8ac:	cmp	x1, x0
     8b0:	b.cc	768 <gomp_affinity_finalize_place_list+0x18>  // b.lo, b.ul, b.last
     8b4:	ldr	x0, [sp, #96]
     8b8:	cmp	x0, #0x0
     8bc:	b.ne	8e8 <gomp_affinity_finalize_place_list+0x198>  // b.any
     8c0:	ldrb	w0, [sp, #31]
     8c4:	eor	w0, w0, #0x1
     8c8:	and	w0, w0, #0xff
     8cc:	cmp	w0, #0x0
     8d0:	b.eq	8e0 <gomp_affinity_finalize_place_list+0x190>  // b.none
     8d4:	adrp	x0, 0 <gomp_thread>
     8d8:	add	x0, x0, #0x0
     8dc:	bl	0 <gomp_error>
     8e0:	mov	w0, #0x0                   	// #0
     8e4:	b	948 <gomp_affinity_finalize_place_list+0x1f8>
     8e8:	adrp	x0, 0 <gomp_places_list_len>
     8ec:	add	x0, x0, #0x0
     8f0:	ldr	x0, [x0]
     8f4:	ldr	x1, [sp, #96]
     8f8:	cmp	x1, x0
     8fc:	b.cs	944 <gomp_affinity_finalize_place_list+0x1f4>  // b.hs, b.nlast
     900:	ldrb	w0, [sp, #31]
     904:	eor	w0, w0, #0x1
     908:	and	w0, w0, #0xff
     90c:	cmp	w0, #0x0
     910:	b.eq	934 <gomp_affinity_finalize_place_list+0x1e4>  // b.none
     914:	adrp	x0, 0 <gomp_places_list_len>
     918:	add	x0, x0, #0x0
     91c:	ldr	x0, [x0]
     920:	ldr	x2, [sp, #96]
     924:	mov	x1, x0
     928:	adrp	x0, 0 <gomp_thread>
     92c:	add	x0, x0, #0x0
     930:	bl	0 <gomp_error>
     934:	adrp	x0, 0 <gomp_places_list_len>
     938:	add	x0, x0, #0x0
     93c:	ldr	x1, [sp, #96]
     940:	str	x1, [x0]
     944:	mov	w0, #0x1                   	// #1
     948:	ldp	x29, x30, [sp], #112
     94c:	ret

0000000000000950 <gomp_affinity_init_level_1>:
     950:	stp	x29, x30, [sp, #-192]!
     954:	mov	x29, sp
     958:	str	w0, [sp, #60]
     95c:	str	w1, [sp, #56]
     960:	str	x2, [sp, #48]
     964:	str	x3, [sp, #40]
     968:	str	x4, [sp, #32]
     96c:	strb	w5, [sp, #31]
     970:	mov	x0, #0x1b                  	// #27
     974:	str	x0, [sp, #152]
     978:	str	xzr, [sp, #80]
     97c:	str	xzr, [sp, #72]
     980:	adrp	x0, 0 <gomp_cpuset_size>
     984:	add	x0, x0, #0x0
     988:	ldr	x0, [x0]
     98c:	lsl	x0, x0, #3
     990:	str	x0, [sp, #144]
     994:	str	xzr, [sp, #184]
     998:	b	ec8 <gomp_affinity_init_level_1+0x578>
     99c:	ldr	x0, [sp, #184]
     9a0:	str	x0, [sp, #136]
     9a4:	ldr	x0, [sp, #136]
     9a8:	lsr	x1, x0, #3
     9ac:	adrp	x0, 0 <gomp_cpuset_size>
     9b0:	add	x0, x0, #0x0
     9b4:	ldr	x0, [x0]
     9b8:	cmp	x1, x0
     9bc:	b.cs	9f8 <gomp_affinity_init_level_1+0xa8>  // b.hs, b.nlast
     9c0:	ldr	x1, [sp, #40]
     9c4:	ldr	x0, [sp, #136]
     9c8:	lsr	x0, x0, #6
     9cc:	lsl	x0, x0, #3
     9d0:	add	x0, x1, x0
     9d4:	ldr	x1, [x0]
     9d8:	ldr	x0, [sp, #136]
     9dc:	and	w0, w0, #0x3f
     9e0:	lsr	x0, x1, x0
     9e4:	and	x0, x0, #0x1
     9e8:	cmp	x0, #0x0
     9ec:	b.eq	9f8 <gomp_affinity_init_level_1+0xa8>  // b.none
     9f0:	mov	w0, #0x1                   	// #1
     9f4:	b	9fc <gomp_affinity_init_level_1+0xac>
     9f8:	mov	w0, #0x0                   	// #0
     9fc:	cmp	w0, #0x0
     a00:	b.eq	ebc <gomp_affinity_init_level_1+0x56c>  // b.none
     a04:	ldr	x1, [sp, #32]
     a08:	ldr	x0, [sp, #152]
     a0c:	add	x4, x1, x0
     a10:	ldr	w0, [sp, #56]
     a14:	cmp	w0, #0x3
     a18:	b.ne	a28 <gomp_affinity_init_level_1+0xd8>  // b.any
     a1c:	adrp	x0, 0 <gomp_thread>
     a20:	add	x0, x0, #0x0
     a24:	b	a30 <gomp_affinity_init_level_1+0xe0>
     a28:	adrp	x0, 0 <gomp_thread>
     a2c:	add	x0, x0, #0x0
     a30:	mov	x3, x0
     a34:	ldr	x2, [sp, #184]
     a38:	adrp	x0, 0 <gomp_thread>
     a3c:	add	x1, x0, #0x0
     a40:	mov	x0, x4
     a44:	bl	0 <sprintf>
     a48:	adrp	x0, 0 <gomp_thread>
     a4c:	add	x1, x0, #0x0
     a50:	ldr	x0, [sp, #32]
     a54:	bl	0 <fopen>
     a58:	str	x0, [sp, #128]
     a5c:	ldr	x0, [sp, #128]
     a60:	cmp	x0, #0x0
     a64:	b.ne	ad0 <gomp_affinity_init_level_1+0x180>  // b.any
     a68:	ldr	x0, [sp, #184]
     a6c:	str	x0, [sp, #88]
     a70:	ldr	x0, [sp, #88]
     a74:	lsr	x1, x0, #3
     a78:	adrp	x0, 0 <gomp_cpuset_size>
     a7c:	add	x0, x0, #0x0
     a80:	ldr	x0, [x0]
     a84:	cmp	x1, x0
     a88:	b.cs	eb8 <gomp_affinity_init_level_1+0x568>  // b.hs, b.nlast
     a8c:	ldr	x2, [sp, #40]
     a90:	ldr	x0, [sp, #88]
     a94:	lsr	x0, x0, #6
     a98:	lsl	x1, x0, #3
     a9c:	add	x1, x2, x1
     aa0:	ldr	x2, [x1]
     aa4:	ldr	x1, [sp, #88]
     aa8:	and	w1, w1, #0x3f
     aac:	mov	x3, #0x1                   	// #1
     ab0:	lsl	x1, x3, x1
     ab4:	mvn	x1, x1
     ab8:	ldr	x3, [sp, #40]
     abc:	lsl	x0, x0, #3
     ac0:	add	x0, x3, x0
     ac4:	and	x1, x2, x1
     ac8:	str	x1, [x0]
     acc:	b	eb8 <gomp_affinity_init_level_1+0x568>
     ad0:	add	x1, sp, #0x48
     ad4:	add	x0, sp, #0x50
     ad8:	ldr	x2, [sp, #128]
     adc:	bl	0 <getline>
     ae0:	cmp	x0, #0x0
     ae4:	b.le	eac <gomp_affinity_init_level_1+0x55c>
     ae8:	ldr	x0, [sp, #80]
     aec:	str	x0, [sp, #64]
     af0:	adrp	x0, 0 <gomp_places_list>
     af4:	add	x0, x0, #0x0
     af8:	ldr	x1, [x0]
     afc:	adrp	x0, 0 <gomp_places_list_len>
     b00:	add	x0, x0, #0x0
     b04:	ldr	x0, [x0]
     b08:	lsl	x0, x0, #3
     b0c:	add	x0, x1, x0
     b10:	ldr	x0, [x0]
     b14:	str	x0, [sp, #176]
     b18:	ldr	w1, [sp, #60]
     b1c:	ldr	w0, [sp, #56]
     b20:	cmp	w1, w0
     b24:	b.ne	d8c <gomp_affinity_init_level_1+0x43c>  // b.any
     b28:	ldr	x0, [sp, #176]
     b2c:	bl	230 <gomp_affinity_init_place>
     b30:	b	d8c <gomp_affinity_init_level_1+0x43c>
     b34:	bl	0 <__errno_location>
     b38:	str	wzr, [x0]
     b3c:	ldr	x0, [sp, #64]
     b40:	add	x1, sp, #0x40
     b44:	mov	w2, #0xa                   	// #10
     b48:	bl	0 <strtoul>
     b4c:	str	x0, [sp, #168]
     b50:	bl	0 <__errno_location>
     b54:	ldr	w0, [x0]
     b58:	cmp	w0, #0x0
     b5c:	b.ne	db0 <gomp_affinity_init_level_1+0x460>  // b.any
     b60:	ldr	x0, [sp, #168]
     b64:	str	x0, [sp, #160]
     b68:	ldr	x0, [sp, #64]
     b6c:	ldrb	w0, [x0]
     b70:	cmp	w0, #0x2d
     b74:	b.ne	d60 <gomp_affinity_init_level_1+0x410>  // b.any
     b78:	bl	0 <__errno_location>
     b7c:	str	wzr, [x0]
     b80:	ldr	x0, [sp, #64]
     b84:	add	x0, x0, #0x1
     b88:	add	x1, sp, #0x40
     b8c:	mov	w2, #0xa                   	// #10
     b90:	bl	0 <strtoul>
     b94:	str	x0, [sp, #160]
     b98:	bl	0 <__errno_location>
     b9c:	ldr	w0, [x0]
     ba0:	cmp	w0, #0x0
     ba4:	b.ne	db4 <gomp_affinity_init_level_1+0x464>  // b.any
     ba8:	ldr	x1, [sp, #160]
     bac:	ldr	x0, [sp, #168]
     bb0:	cmp	x1, x0
     bb4:	b.cc	db4 <gomp_affinity_init_level_1+0x464>  // b.lo, b.ul, b.last
     bb8:	b	d60 <gomp_affinity_init_level_1+0x410>
     bbc:	ldr	x0, [sp, #168]
     bc0:	str	x0, [sp, #120]
     bc4:	ldr	x0, [sp, #120]
     bc8:	lsr	x1, x0, #3
     bcc:	adrp	x0, 0 <gomp_cpuset_size>
     bd0:	add	x0, x0, #0x0
     bd4:	ldr	x0, [x0]
     bd8:	cmp	x1, x0
     bdc:	b.cs	c18 <gomp_affinity_init_level_1+0x2c8>  // b.hs, b.nlast
     be0:	ldr	x1, [sp, #40]
     be4:	ldr	x0, [sp, #120]
     be8:	lsr	x0, x0, #6
     bec:	lsl	x0, x0, #3
     bf0:	add	x0, x1, x0
     bf4:	ldr	x1, [x0]
     bf8:	ldr	x0, [sp, #120]
     bfc:	and	w0, w0, #0x3f
     c00:	lsr	x0, x1, x0
     c04:	and	x0, x0, #0x1
     c08:	cmp	x0, #0x0
     c0c:	b.eq	c18 <gomp_affinity_init_level_1+0x2c8>  // b.none
     c10:	mov	w0, #0x1                   	// #1
     c14:	b	c1c <gomp_affinity_init_level_1+0x2cc>
     c18:	mov	w0, #0x0                   	// #0
     c1c:	cmp	w0, #0x0
     c20:	b.eq	d50 <gomp_affinity_init_level_1+0x400>  // b.none
     c24:	ldr	w0, [sp, #56]
     c28:	cmp	w0, #0x3
     c2c:	b.ne	c60 <gomp_affinity_init_level_1+0x310>  // b.any
     c30:	ldr	w1, [sp, #60]
     c34:	ldr	w0, [sp, #56]
     c38:	cmp	w1, w0
     c3c:	b.ge	c60 <gomp_affinity_init_level_1+0x310>  // b.tcont
     c40:	ldrb	w5, [sp, #31]
     c44:	ldr	x4, [sp, #32]
     c48:	ldr	x3, [sp, #40]
     c4c:	ldr	x2, [sp, #48]
     c50:	mov	w1, #0x2                   	// #2
     c54:	ldr	w0, [sp, #60]
     c58:	bl	950 <gomp_affinity_init_level_1>
     c5c:	b	d54 <gomp_affinity_init_level_1+0x404>
     c60:	ldr	w0, [sp, #60]
     c64:	cmp	w0, #0x1
     c68:	b.ne	c9c <gomp_affinity_init_level_1+0x34c>  // b.any
     c6c:	adrp	x0, 0 <gomp_places_list>
     c70:	add	x0, x0, #0x0
     c74:	ldr	x1, [x0]
     c78:	adrp	x0, 0 <gomp_places_list_len>
     c7c:	add	x0, x0, #0x0
     c80:	ldr	x0, [x0]
     c84:	lsl	x0, x0, #3
     c88:	add	x0, x1, x0
     c8c:	ldr	x0, [x0]
     c90:	str	x0, [sp, #176]
     c94:	ldr	x0, [sp, #176]
     c98:	bl	230 <gomp_affinity_init_place>
     c9c:	mov	w4, #0x1                   	// #1
     ca0:	mov	x3, #0x0                   	// #0
     ca4:	mov	x2, #0x1                   	// #1
     ca8:	ldr	x1, [sp, #168]
     cac:	ldr	x0, [sp, #176]
     cb0:	bl	274 <gomp_affinity_add_cpus>
     cb4:	and	w0, w0, #0xff
     cb8:	cmp	w0, #0x0
     cbc:	b.eq	d54 <gomp_affinity_init_level_1+0x404>  // b.none
     cc0:	ldr	x0, [sp, #168]
     cc4:	str	x0, [sp, #112]
     cc8:	ldr	x0, [sp, #112]
     ccc:	lsr	x1, x0, #3
     cd0:	adrp	x0, 0 <gomp_cpuset_size>
     cd4:	add	x0, x0, #0x0
     cd8:	ldr	x0, [x0]
     cdc:	cmp	x1, x0
     ce0:	b.cs	d24 <gomp_affinity_init_level_1+0x3d4>  // b.hs, b.nlast
     ce4:	ldr	x2, [sp, #40]
     ce8:	ldr	x0, [sp, #112]
     cec:	lsr	x0, x0, #6
     cf0:	lsl	x1, x0, #3
     cf4:	add	x1, x2, x1
     cf8:	ldr	x2, [x1]
     cfc:	ldr	x1, [sp, #112]
     d00:	and	w1, w1, #0x3f
     d04:	mov	x3, #0x1                   	// #1
     d08:	lsl	x1, x3, x1
     d0c:	mvn	x1, x1
     d10:	ldr	x3, [sp, #40]
     d14:	lsl	x0, x0, #3
     d18:	add	x0, x3, x0
     d1c:	and	x1, x2, x1
     d20:	str	x1, [x0]
     d24:	ldr	w0, [sp, #60]
     d28:	cmp	w0, #0x1
     d2c:	b.ne	d54 <gomp_affinity_init_level_1+0x404>  // b.any
     d30:	adrp	x0, 0 <gomp_places_list_len>
     d34:	add	x0, x0, #0x0
     d38:	ldr	x0, [x0]
     d3c:	add	x1, x0, #0x1
     d40:	adrp	x0, 0 <gomp_places_list_len>
     d44:	add	x0, x0, #0x0
     d48:	str	x1, [x0]
     d4c:	b	d54 <gomp_affinity_init_level_1+0x404>
     d50:	nop
     d54:	ldr	x0, [sp, #168]
     d58:	add	x0, x0, #0x1
     d5c:	str	x0, [sp, #168]
     d60:	ldr	x1, [sp, #168]
     d64:	ldr	x0, [sp, #160]
     d68:	cmp	x1, x0
     d6c:	b.ls	bbc <gomp_affinity_init_level_1+0x26c>  // b.plast
     d70:	ldr	x0, [sp, #64]
     d74:	ldrb	w0, [x0]
     d78:	cmp	w0, #0x2c
     d7c:	b.ne	d8c <gomp_affinity_init_level_1+0x43c>  // b.any
     d80:	ldr	x0, [sp, #64]
     d84:	add	x0, x0, #0x1
     d88:	str	x0, [sp, #64]
     d8c:	ldr	x0, [sp, #64]
     d90:	ldrb	w0, [x0]
     d94:	cmp	w0, #0x0
     d98:	b.eq	db4 <gomp_affinity_init_level_1+0x464>  // b.none
     d9c:	ldr	x0, [sp, #64]
     da0:	ldrb	w0, [x0]
     da4:	cmp	w0, #0xa
     da8:	b.ne	b34 <gomp_affinity_init_level_1+0x1e4>  // b.any
     dac:	b	db4 <gomp_affinity_init_level_1+0x464>
     db0:	nop
     db4:	ldr	w1, [sp, #60]
     db8:	ldr	w0, [sp, #56]
     dbc:	cmp	w1, w0
     dc0:	b.ne	e48 <gomp_affinity_init_level_1+0x4f8>  // b.any
     dc4:	ldr	x0, [sp, #184]
     dc8:	str	x0, [sp, #104]
     dcc:	ldr	x0, [sp, #104]
     dd0:	lsr	x1, x0, #3
     dd4:	adrp	x0, 0 <gomp_cpuset_size>
     dd8:	add	x0, x0, #0x0
     ddc:	ldr	x0, [x0]
     de0:	cmp	x1, x0
     de4:	b.cs	e20 <gomp_affinity_init_level_1+0x4d0>  // b.hs, b.nlast
     de8:	ldr	x1, [sp, #40]
     dec:	ldr	x0, [sp, #104]
     df0:	lsr	x0, x0, #6
     df4:	lsl	x0, x0, #3
     df8:	add	x0, x1, x0
     dfc:	ldr	x1, [x0]
     e00:	ldr	x0, [sp, #104]
     e04:	and	w0, w0, #0x3f
     e08:	lsr	x0, x1, x0
     e0c:	and	x0, x0, #0x1
     e10:	cmp	x0, #0x0
     e14:	b.eq	e20 <gomp_affinity_init_level_1+0x4d0>  // b.none
     e18:	mov	w0, #0x1                   	// #1
     e1c:	b	e24 <gomp_affinity_init_level_1+0x4d4>
     e20:	mov	w0, #0x0                   	// #0
     e24:	cmp	w0, #0x0
     e28:	b.ne	e48 <gomp_affinity_init_level_1+0x4f8>  // b.any
     e2c:	adrp	x0, 0 <gomp_places_list_len>
     e30:	add	x0, x0, #0x0
     e34:	ldr	x0, [x0]
     e38:	add	x1, x0, #0x1
     e3c:	adrp	x0, 0 <gomp_places_list_len>
     e40:	add	x0, x0, #0x0
     e44:	str	x1, [x0]
     e48:	ldr	x0, [sp, #184]
     e4c:	str	x0, [sp, #96]
     e50:	ldr	x0, [sp, #96]
     e54:	lsr	x1, x0, #3
     e58:	adrp	x0, 0 <gomp_cpuset_size>
     e5c:	add	x0, x0, #0x0
     e60:	ldr	x0, [x0]
     e64:	cmp	x1, x0
     e68:	b.cs	eac <gomp_affinity_init_level_1+0x55c>  // b.hs, b.nlast
     e6c:	ldr	x2, [sp, #40]
     e70:	ldr	x0, [sp, #96]
     e74:	lsr	x0, x0, #6
     e78:	lsl	x1, x0, #3
     e7c:	add	x1, x2, x1
     e80:	ldr	x2, [x1]
     e84:	ldr	x1, [sp, #96]
     e88:	and	w1, w1, #0x3f
     e8c:	mov	x3, #0x1                   	// #1
     e90:	lsl	x1, x3, x1
     e94:	mvn	x1, x1
     e98:	ldr	x3, [sp, #40]
     e9c:	lsl	x0, x0, #3
     ea0:	add	x0, x3, x0
     ea4:	and	x1, x2, x1
     ea8:	str	x1, [x0]
     eac:	ldr	x0, [sp, #128]
     eb0:	bl	0 <fclose>
     eb4:	b	ebc <gomp_affinity_init_level_1+0x56c>
     eb8:	nop
     ebc:	ldr	x0, [sp, #184]
     ec0:	add	x0, x0, #0x1
     ec4:	str	x0, [sp, #184]
     ec8:	ldr	x1, [sp, #184]
     ecc:	ldr	x0, [sp, #144]
     ed0:	cmp	x1, x0
     ed4:	b.cs	ef0 <gomp_affinity_init_level_1+0x5a0>  // b.hs, b.nlast
     ed8:	adrp	x0, 0 <gomp_places_list_len>
     edc:	add	x0, x0, #0x0
     ee0:	ldr	x0, [x0]
     ee4:	ldr	x1, [sp, #48]
     ee8:	cmp	x1, x0
     eec:	b.hi	99c <gomp_affinity_init_level_1+0x4c>  // b.pmore
     ef0:	ldr	x0, [sp, #80]
     ef4:	bl	0 <free>
     ef8:	nop
     efc:	ldp	x29, x30, [sp], #192
     f00:	ret

0000000000000f04 <gomp_affinity_init_level>:
     f04:	stp	x29, x30, [sp, #-144]!
     f08:	mov	x29, sp
     f0c:	str	w0, [x29, #28]
     f10:	str	x1, [x29, #16]
     f14:	strb	w2, [x29, #27]
     f18:	adrp	x0, 0 <gomp_cpusetp>
     f1c:	add	x0, x0, #0x0
     f20:	ldr	x0, [x0]
     f24:	cmp	x0, #0x0
     f28:	b.eq	f6c <gomp_affinity_init_level+0x68>  // b.none
     f2c:	adrp	x0, 0 <gomp_cpuset_size>
     f30:	add	x0, x0, #0x0
     f34:	ldr	x2, [x0]
     f38:	adrp	x0, 0 <gomp_cpusetp>
     f3c:	add	x0, x0, #0x0
     f40:	ldr	x0, [x0]
     f44:	mov	x1, x0
     f48:	mov	x0, x2
     f4c:	bl	0 <gomp_cpuset_popcount>
     f50:	str	x0, [x29, #136]
     f54:	ldr	x1, [x29, #16]
     f58:	ldr	x0, [x29, #136]
     f5c:	cmp	x1, x0
     f60:	b.ls	f6c <gomp_affinity_init_level+0x68>  // b.plast
     f64:	ldr	x0, [x29, #136]
     f68:	str	x0, [x29, #16]
     f6c:	ldrb	w1, [x29, #27]
     f70:	ldr	x0, [x29, #16]
     f74:	bl	11c <gomp_affinity_alloc>
     f78:	mov	x1, x0
     f7c:	adrp	x0, 0 <gomp_places_list>
     f80:	add	x0, x0, #0x0
     f84:	str	x1, [x0]
     f88:	adrp	x0, 0 <gomp_places_list_len>
     f8c:	add	x0, x0, #0x0
     f90:	str	xzr, [x0]
     f94:	adrp	x0, 0 <gomp_places_list>
     f98:	add	x0, x0, #0x0
     f9c:	ldr	x0, [x0]
     fa0:	cmp	x0, #0x0
     fa4:	b.ne	fb0 <gomp_affinity_init_level+0xac>  // b.any
     fa8:	mov	w0, #0x0                   	// #0
     fac:	b	10a8 <gomp_affinity_init_level+0x1a4>
     fb0:	adrp	x0, 0 <gomp_cpuset_size>
     fb4:	add	x0, x0, #0x0
     fb8:	ldr	x0, [x0]
     fbc:	add	x0, x0, #0xf
     fc0:	lsr	x0, x0, #4
     fc4:	lsl	x0, x0, #4
     fc8:	sub	sp, sp, x0
     fcc:	mov	x0, sp
     fd0:	add	x0, x0, #0xf
     fd4:	lsr	x0, x0, #4
     fd8:	lsl	x0, x0, #4
     fdc:	str	x0, [x29, #128]
     fe0:	add	x2, x29, #0x28
     fe4:	adrp	x0, 0 <gomp_thread>
     fe8:	add	x1, x0, #0x0
     fec:	mov	x0, x2
     ff0:	ldp	x2, x3, [x1]
     ff4:	stp	x2, x3, [x0]
     ff8:	ldr	x2, [x1, #16]
     ffc:	str	x2, [x0, #16]
    1000:	ldr	w1, [x1, #24]
    1004:	str	w1, [x0, #24]
    1008:	adrp	x0, 0 <gomp_cpusetp>
    100c:	add	x0, x0, #0x0
    1010:	ldr	x1, [x0]
    1014:	adrp	x0, 0 <gomp_cpuset_size>
    1018:	add	x0, x0, #0x0
    101c:	ldr	x0, [x0]
    1020:	mov	x2, x0
    1024:	ldr	x0, [x29, #128]
    1028:	bl	0 <memcpy>
    102c:	add	x0, x29, #0x28
    1030:	ldrb	w5, [x29, #27]
    1034:	mov	x4, x0
    1038:	ldr	x3, [x29, #128]
    103c:	ldr	x2, [x29, #16]
    1040:	mov	w1, #0x3                   	// #3
    1044:	ldr	w0, [x29, #28]
    1048:	bl	950 <gomp_affinity_init_level_1>
    104c:	adrp	x0, 0 <gomp_places_list_len>
    1050:	add	x0, x0, #0x0
    1054:	ldr	x0, [x0]
    1058:	cmp	x0, #0x0
    105c:	b.ne	10a4 <gomp_affinity_init_level+0x1a0>  // b.any
    1060:	ldrb	w0, [x29, #27]
    1064:	eor	w0, w0, #0x1
    1068:	and	w0, w0, #0xff
    106c:	cmp	w0, #0x0
    1070:	b.eq	1080 <gomp_affinity_init_level+0x17c>  // b.none
    1074:	adrp	x0, 0 <gomp_thread>
    1078:	add	x0, x0, #0x0
    107c:	bl	0 <gomp_error>
    1080:	adrp	x0, 0 <gomp_places_list>
    1084:	add	x0, x0, #0x0
    1088:	ldr	x0, [x0]
    108c:	bl	0 <free>
    1090:	adrp	x0, 0 <gomp_places_list>
    1094:	add	x0, x0, #0x0
    1098:	str	xzr, [x0]
    109c:	mov	w0, #0x0                   	// #0
    10a0:	b	10a8 <gomp_affinity_init_level+0x1a4>
    10a4:	mov	w0, #0x1                   	// #1
    10a8:	mov	sp, x29
    10ac:	ldp	x29, x30, [sp], #144
    10b0:	ret

00000000000010b4 <gomp_affinity_print_place>:
    10b4:	stp	x29, x30, [sp, #-80]!
    10b8:	mov	x29, sp
    10bc:	str	x0, [sp, #24]
    10c0:	adrp	x0, 0 <gomp_cpuset_size>
    10c4:	add	x0, x0, #0x0
    10c8:	ldr	x0, [x0]
    10cc:	lsl	x0, x0, #3
    10d0:	str	x0, [sp, #48]
    10d4:	ldr	x0, [sp, #24]
    10d8:	str	x0, [sp, #40]
    10dc:	strb	wzr, [sp, #63]
    10e0:	str	xzr, [sp, #72]
    10e4:	str	xzr, [sp, #64]
    10e8:	b	11f8 <gomp_affinity_print_place+0x144>
    10ec:	ldr	x0, [sp, #72]
    10f0:	str	x0, [sp, #32]
    10f4:	ldr	x0, [sp, #32]
    10f8:	lsr	x1, x0, #3
    10fc:	adrp	x0, 0 <gomp_cpuset_size>
    1100:	add	x0, x0, #0x0
    1104:	ldr	x0, [x0]
    1108:	cmp	x1, x0
    110c:	b.cs	1148 <gomp_affinity_print_place+0x94>  // b.hs, b.nlast
    1110:	ldr	x1, [sp, #40]
    1114:	ldr	x0, [sp, #32]
    1118:	lsr	x0, x0, #6
    111c:	lsl	x0, x0, #3
    1120:	add	x0, x1, x0
    1124:	ldr	x1, [x0]
    1128:	ldr	x0, [sp, #32]
    112c:	and	w0, w0, #0x3f
    1130:	lsr	x0, x1, x0
    1134:	and	x0, x0, #0x1
    1138:	cmp	x0, #0x0
    113c:	b.eq	1148 <gomp_affinity_print_place+0x94>  // b.none
    1140:	mov	w0, #0x1                   	// #1
    1144:	b	114c <gomp_affinity_print_place+0x98>
    1148:	mov	w0, #0x0                   	// #0
    114c:	cmp	w0, #0x0
    1150:	b.eq	11bc <gomp_affinity_print_place+0x108>  // b.none
    1154:	ldr	x0, [sp, #64]
    1158:	cmp	x0, #0x0
    115c:	b.ne	11ac <gomp_affinity_print_place+0xf8>  // b.any
    1160:	ldrb	w0, [sp, #63]
    1164:	cmp	w0, #0x0
    1168:	b.eq	1184 <gomp_affinity_print_place+0xd0>  // b.none
    116c:	adrp	x0, 0 <stderr>
    1170:	add	x0, x0, #0x0
    1174:	ldr	x0, [x0]
    1178:	mov	x1, x0
    117c:	mov	w0, #0x2c                  	// #44
    1180:	bl	0 <fputc>
    1184:	mov	w0, #0x1                   	// #1
    1188:	strb	w0, [sp, #63]
    118c:	adrp	x0, 0 <stderr>
    1190:	add	x0, x0, #0x0
    1194:	ldr	x3, [x0]
    1198:	ldr	x2, [sp, #72]
    119c:	adrp	x0, 0 <gomp_thread>
    11a0:	add	x1, x0, #0x0
    11a4:	mov	x0, x3
    11a8:	bl	0 <fprintf>
    11ac:	ldr	x0, [sp, #64]
    11b0:	add	x0, x0, #0x1
    11b4:	str	x0, [sp, #64]
    11b8:	b	11ec <gomp_affinity_print_place+0x138>
    11bc:	ldr	x0, [sp, #64]
    11c0:	cmp	x0, #0x1
    11c4:	b.ls	11e8 <gomp_affinity_print_place+0x134>  // b.plast
    11c8:	adrp	x0, 0 <stderr>
    11cc:	add	x0, x0, #0x0
    11d0:	ldr	x3, [x0]
    11d4:	ldr	x2, [sp, #64]
    11d8:	adrp	x0, 0 <gomp_thread>
    11dc:	add	x1, x0, #0x0
    11e0:	mov	x0, x3
    11e4:	bl	0 <fprintf>
    11e8:	str	xzr, [sp, #64]
    11ec:	ldr	x0, [sp, #72]
    11f0:	add	x0, x0, #0x1
    11f4:	str	x0, [sp, #72]
    11f8:	ldr	x1, [sp, #72]
    11fc:	ldr	x0, [sp, #48]
    1200:	cmp	x1, x0
    1204:	b.cc	10ec <gomp_affinity_print_place+0x38>  // b.lo, b.ul, b.last
    1208:	ldr	x0, [sp, #64]
    120c:	cmp	x0, #0x1
    1210:	b.ls	1234 <gomp_affinity_print_place+0x180>  // b.plast
    1214:	adrp	x0, 0 <stderr>
    1218:	add	x0, x0, #0x0
    121c:	ldr	x3, [x0]
    1220:	ldr	x2, [sp, #64]
    1224:	adrp	x0, 0 <gomp_thread>
    1228:	add	x1, x0, #0x0
    122c:	mov	x0, x3
    1230:	bl	0 <fprintf>
    1234:	nop
    1238:	ldp	x29, x30, [sp], #80
    123c:	ret

0000000000001240 <gomp_ialias_omp_get_place_num_procs>:
    1240:	stp	x29, x30, [sp, #-48]!
    1244:	mov	x29, sp
    1248:	str	w0, [sp, #28]
    124c:	ldr	w0, [sp, #28]
    1250:	cmp	w0, #0x0
    1254:	b.lt	1270 <gomp_ialias_omp_get_place_num_procs+0x30>  // b.tstop
    1258:	ldrsw	x1, [sp, #28]
    125c:	adrp	x0, 0 <gomp_places_list_len>
    1260:	add	x0, x0, #0x0
    1264:	ldr	x0, [x0]
    1268:	cmp	x1, x0
    126c:	b.cc	1278 <gomp_ialias_omp_get_place_num_procs+0x38>  // b.lo, b.ul, b.last
    1270:	mov	w0, #0x0                   	// #0
    1274:	b	12ac <gomp_ialias_omp_get_place_num_procs+0x6c>
    1278:	adrp	x0, 0 <gomp_places_list>
    127c:	add	x0, x0, #0x0
    1280:	ldr	x1, [x0]
    1284:	ldrsw	x0, [sp, #28]
    1288:	lsl	x0, x0, #3
    128c:	add	x0, x1, x0
    1290:	ldr	x0, [x0]
    1294:	str	x0, [sp, #40]
    1298:	adrp	x0, 0 <gomp_cpuset_size>
    129c:	add	x0, x0, #0x0
    12a0:	ldr	x0, [x0]
    12a4:	ldr	x1, [sp, #40]
    12a8:	bl	0 <gomp_cpuset_popcount>
    12ac:	ldp	x29, x30, [sp], #48
    12b0:	ret

00000000000012b4 <gomp_ialias_omp_get_place_proc_ids>:
    12b4:	sub	sp, sp, #0x30
    12b8:	str	w0, [sp, #12]
    12bc:	str	x1, [sp]
    12c0:	ldr	w0, [sp, #12]
    12c4:	cmp	w0, #0x0
    12c8:	b.lt	13bc <gomp_ialias_omp_get_place_proc_ids+0x108>  // b.tstop
    12cc:	ldrsw	x1, [sp, #12]
    12d0:	adrp	x0, 0 <gomp_places_list_len>
    12d4:	add	x0, x0, #0x0
    12d8:	ldr	x0, [x0]
    12dc:	cmp	x1, x0
    12e0:	b.cs	13bc <gomp_ialias_omp_get_place_proc_ids+0x108>  // b.hs, b.nlast
    12e4:	adrp	x0, 0 <gomp_places_list>
    12e8:	add	x0, x0, #0x0
    12ec:	ldr	x1, [x0]
    12f0:	ldrsw	x0, [sp, #12]
    12f4:	lsl	x0, x0, #3
    12f8:	add	x0, x1, x0
    12fc:	ldr	x0, [x0]
    1300:	str	x0, [sp, #32]
    1304:	adrp	x0, 0 <gomp_cpuset_size>
    1308:	add	x0, x0, #0x0
    130c:	ldr	x0, [x0]
    1310:	lsl	x0, x0, #3
    1314:	str	x0, [sp, #24]
    1318:	str	xzr, [sp, #40]
    131c:	b	13a8 <gomp_ialias_omp_get_place_proc_ids+0xf4>
    1320:	ldr	x0, [sp, #40]
    1324:	str	x0, [sp, #16]
    1328:	ldr	x0, [sp, #16]
    132c:	lsr	x1, x0, #3
    1330:	adrp	x0, 0 <gomp_cpuset_size>
    1334:	add	x0, x0, #0x0
    1338:	ldr	x0, [x0]
    133c:	cmp	x1, x0
    1340:	b.cs	137c <gomp_ialias_omp_get_place_proc_ids+0xc8>  // b.hs, b.nlast
    1344:	ldr	x1, [sp, #32]
    1348:	ldr	x0, [sp, #16]
    134c:	lsr	x0, x0, #6
    1350:	lsl	x0, x0, #3
    1354:	add	x0, x1, x0
    1358:	ldr	x1, [x0]
    135c:	ldr	x0, [sp, #16]
    1360:	and	w0, w0, #0x3f
    1364:	lsr	x0, x1, x0
    1368:	and	x0, x0, #0x1
    136c:	cmp	x0, #0x0
    1370:	b.eq	137c <gomp_ialias_omp_get_place_proc_ids+0xc8>  // b.none
    1374:	mov	w0, #0x1                   	// #1
    1378:	b	1380 <gomp_ialias_omp_get_place_proc_ids+0xcc>
    137c:	mov	w0, #0x0                   	// #0
    1380:	cmp	w0, #0x0
    1384:	b.eq	139c <gomp_ialias_omp_get_place_proc_ids+0xe8>  // b.none
    1388:	ldr	x0, [sp]
    138c:	add	x1, x0, #0x4
    1390:	str	x1, [sp]
    1394:	ldr	x1, [sp, #40]
    1398:	str	w1, [x0]
    139c:	ldr	x0, [sp, #40]
    13a0:	add	x0, x0, #0x1
    13a4:	str	x0, [sp, #40]
    13a8:	ldr	x1, [sp, #40]
    13ac:	ldr	x0, [sp, #24]
    13b0:	cmp	x1, x0
    13b4:	b.cc	1320 <gomp_ialias_omp_get_place_proc_ids+0x6c>  // b.lo, b.ul, b.last
    13b8:	b	13c0 <gomp_ialias_omp_get_place_proc_ids+0x10c>
    13bc:	nop
    13c0:	add	sp, sp, #0x30
    13c4:	ret

00000000000013c8 <gomp_get_place_proc_ids_8>:
    13c8:	sub	sp, sp, #0x30
    13cc:	str	w0, [sp, #12]
    13d0:	str	x1, [sp]
    13d4:	ldr	w0, [sp, #12]
    13d8:	cmp	w0, #0x0
    13dc:	b.lt	14d0 <gomp_get_place_proc_ids_8+0x108>  // b.tstop
    13e0:	ldrsw	x1, [sp, #12]
    13e4:	adrp	x0, 0 <gomp_places_list_len>
    13e8:	add	x0, x0, #0x0
    13ec:	ldr	x0, [x0]
    13f0:	cmp	x1, x0
    13f4:	b.cs	14d0 <gomp_get_place_proc_ids_8+0x108>  // b.hs, b.nlast
    13f8:	adrp	x0, 0 <gomp_places_list>
    13fc:	add	x0, x0, #0x0
    1400:	ldr	x1, [x0]
    1404:	ldrsw	x0, [sp, #12]
    1408:	lsl	x0, x0, #3
    140c:	add	x0, x1, x0
    1410:	ldr	x0, [x0]
    1414:	str	x0, [sp, #32]
    1418:	adrp	x0, 0 <gomp_cpuset_size>
    141c:	add	x0, x0, #0x0
    1420:	ldr	x0, [x0]
    1424:	lsl	x0, x0, #3
    1428:	str	x0, [sp, #24]
    142c:	str	xzr, [sp, #40]
    1430:	b	14bc <gomp_get_place_proc_ids_8+0xf4>
    1434:	ldr	x0, [sp, #40]
    1438:	str	x0, [sp, #16]
    143c:	ldr	x0, [sp, #16]
    1440:	lsr	x1, x0, #3
    1444:	adrp	x0, 0 <gomp_cpuset_size>
    1448:	add	x0, x0, #0x0
    144c:	ldr	x0, [x0]
    1450:	cmp	x1, x0
    1454:	b.cs	1490 <gomp_get_place_proc_ids_8+0xc8>  // b.hs, b.nlast
    1458:	ldr	x1, [sp, #32]
    145c:	ldr	x0, [sp, #16]
    1460:	lsr	x0, x0, #6
    1464:	lsl	x0, x0, #3
    1468:	add	x0, x1, x0
    146c:	ldr	x1, [x0]
    1470:	ldr	x0, [sp, #16]
    1474:	and	w0, w0, #0x3f
    1478:	lsr	x0, x1, x0
    147c:	and	x0, x0, #0x1
    1480:	cmp	x0, #0x0
    1484:	b.eq	1490 <gomp_get_place_proc_ids_8+0xc8>  // b.none
    1488:	mov	w0, #0x1                   	// #1
    148c:	b	1494 <gomp_get_place_proc_ids_8+0xcc>
    1490:	mov	w0, #0x0                   	// #0
    1494:	cmp	w0, #0x0
    1498:	b.eq	14b0 <gomp_get_place_proc_ids_8+0xe8>  // b.none
    149c:	ldr	x0, [sp]
    14a0:	add	x1, x0, #0x8
    14a4:	str	x1, [sp]
    14a8:	ldr	x1, [sp, #40]
    14ac:	str	x1, [x0]
    14b0:	ldr	x0, [sp, #40]
    14b4:	add	x0, x0, #0x1
    14b8:	str	x0, [sp, #40]
    14bc:	ldr	x1, [sp, #40]
    14c0:	ldr	x0, [sp, #24]
    14c4:	cmp	x1, x0
    14c8:	b.cc	1434 <gomp_get_place_proc_ids_8+0x6c>  // b.lo, b.ul, b.last
    14cc:	b	14d4 <gomp_get_place_proc_ids_8+0x10c>
    14d0:	nop
    14d4:	add	sp, sp, #0x30
    14d8:	ret

00000000000014dc <gomp_display_affinity_place>:
    14dc:	stp	x29, x30, [sp, #-144]!
    14e0:	mov	x29, sp
    14e4:	str	x0, [sp, #40]
    14e8:	str	x1, [sp, #32]
    14ec:	str	x2, [sp, #24]
    14f0:	str	w3, [sp, #20]
    14f4:	ldr	w0, [sp, #20]
    14f8:	cmp	w0, #0x0
    14fc:	b.lt	153c <gomp_display_affinity_place+0x60>  // b.tstop
    1500:	ldrsw	x1, [sp, #20]
    1504:	adrp	x0, 0 <gomp_places_list_len>
    1508:	add	x0, x0, #0x0
    150c:	ldr	x0, [x0]
    1510:	cmp	x1, x0
    1514:	b.cs	153c <gomp_display_affinity_place+0x60>  // b.hs, b.nlast
    1518:	adrp	x0, 0 <gomp_places_list>
    151c:	add	x0, x0, #0x0
    1520:	ldr	x1, [x0]
    1524:	ldrsw	x0, [sp, #20]
    1528:	lsl	x0, x0, #3
    152c:	add	x0, x1, x0
    1530:	ldr	x0, [x0]
    1534:	str	x0, [sp, #136]
    1538:	b	15dc <gomp_display_affinity_place+0x100>
    153c:	adrp	x0, 0 <gomp_cpusetp>
    1540:	add	x0, x0, #0x0
    1544:	ldr	x0, [x0]
    1548:	cmp	x0, #0x0
    154c:	b.eq	1564 <gomp_display_affinity_place+0x88>  // b.none
    1550:	adrp	x0, 0 <gomp_cpusetp>
    1554:	add	x0, x0, #0x0
    1558:	ldr	x0, [x0]
    155c:	str	x0, [sp, #136]
    1560:	b	15dc <gomp_display_affinity_place+0x100>
    1564:	adrp	x0, 0 <gomp_available_cpus>
    1568:	add	x0, x0, #0x0
    156c:	ldr	x0, [x0]
    1570:	cmp	x0, #0x1
    1574:	b.ls	15a4 <gomp_display_affinity_place+0xc8>  // b.plast
    1578:	adrp	x0, 0 <gomp_available_cpus>
    157c:	add	x0, x0, #0x0
    1580:	ldr	x0, [x0]
    1584:	sub	x0, x0, #0x1
    1588:	add	x3, sp, #0x38
    158c:	mov	x2, x0
    1590:	adrp	x0, 0 <gomp_thread>
    1594:	add	x1, x0, #0x0
    1598:	mov	x0, x3
    159c:	bl	0 <sprintf>
    15a0:	b	15b0 <gomp_display_affinity_place+0xd4>
    15a4:	add	x0, sp, #0x38
    15a8:	mov	w1, #0x30                  	// #48
    15ac:	strh	w1, [x0]
    15b0:	add	x0, sp, #0x38
    15b4:	bl	0 <strlen>
    15b8:	mov	x1, x0
    15bc:	add	x0, sp, #0x38
    15c0:	mov	x4, x1
    15c4:	mov	x3, x0
    15c8:	ldr	x2, [sp, #24]
    15cc:	ldr	x1, [sp, #32]
    15d0:	ldr	x0, [sp, #40]
    15d4:	bl	0 <gomp_display_string>
    15d8:	b	1778 <gomp_display_affinity_place+0x29c>
    15dc:	adrp	x0, 0 <gomp_cpuset_size>
    15e0:	add	x0, x0, #0x0
    15e4:	ldr	x0, [x0]
    15e8:	lsl	x0, x0, #3
    15ec:	str	x0, [sp, #96]
    15f0:	strb	wzr, [sp, #119]
    15f4:	ldr	x0, [sp, #96]
    15f8:	str	x0, [sp, #120]
    15fc:	str	xzr, [sp, #128]
    1600:	b	1768 <gomp_display_affinity_place+0x28c>
    1604:	ldr	x1, [sp, #128]
    1608:	ldr	x0, [sp, #96]
    160c:	cmp	x1, x0
    1610:	b.ne	161c <gomp_display_affinity_place+0x140>  // b.any
    1614:	strb	wzr, [sp, #118]
    1618:	b	1688 <gomp_display_affinity_place+0x1ac>
    161c:	ldr	x0, [sp, #128]
    1620:	str	x0, [sp, #88]
    1624:	ldr	x0, [sp, #88]
    1628:	lsr	x1, x0, #3
    162c:	adrp	x0, 0 <gomp_cpuset_size>
    1630:	add	x0, x0, #0x0
    1634:	ldr	x0, [x0]
    1638:	cmp	x1, x0
    163c:	b.cs	1678 <gomp_display_affinity_place+0x19c>  // b.hs, b.nlast
    1640:	ldr	x1, [sp, #136]
    1644:	ldr	x0, [sp, #88]
    1648:	lsr	x0, x0, #6
    164c:	lsl	x0, x0, #3
    1650:	add	x0, x1, x0
    1654:	ldr	x1, [x0]
    1658:	ldr	x0, [sp, #88]
    165c:	and	w0, w0, #0x3f
    1660:	lsr	x0, x1, x0
    1664:	and	x0, x0, #0x1
    1668:	cmp	x0, #0x0
    166c:	b.eq	1678 <gomp_display_affinity_place+0x19c>  // b.none
    1670:	mov	w0, #0x1                   	// #1
    1674:	b	167c <gomp_display_affinity_place+0x1a0>
    1678:	mov	w0, #0x0                   	// #0
    167c:	cmp	w0, #0x0
    1680:	cset	w0, ne  // ne = any
    1684:	strb	w0, [sp, #118]
    1688:	ldrb	w1, [sp, #118]
    168c:	ldrb	w0, [sp, #119]
    1690:	cmp	w1, w0
    1694:	b.eq	175c <gomp_display_affinity_place+0x280>  // b.none
    1698:	ldrb	w0, [sp, #118]
    169c:	strb	w0, [sp, #119]
    16a0:	ldrb	w0, [sp, #118]
    16a4:	cmp	w0, #0x0
    16a8:	b.eq	16f8 <gomp_display_affinity_place+0x21c>  // b.none
    16ac:	add	x0, sp, #0x38
    16b0:	str	x0, [sp, #104]
    16b4:	ldr	x1, [sp, #120]
    16b8:	ldr	x0, [sp, #96]
    16bc:	cmp	x1, x0
    16c0:	b.eq	16d8 <gomp_display_affinity_place+0x1fc>  // b.none
    16c4:	ldr	x0, [sp, #104]
    16c8:	add	x1, x0, #0x1
    16cc:	str	x1, [sp, #104]
    16d0:	mov	w1, #0x2c                  	// #44
    16d4:	strb	w1, [x0]
    16d8:	ldr	x2, [sp, #128]
    16dc:	adrp	x0, 0 <gomp_thread>
    16e0:	add	x1, x0, #0x0
    16e4:	ldr	x0, [sp, #104]
    16e8:	bl	0 <sprintf>
    16ec:	ldr	x0, [sp, #128]
    16f0:	str	x0, [sp, #120]
    16f4:	b	172c <gomp_display_affinity_place+0x250>
    16f8:	ldr	x0, [sp, #120]
    16fc:	add	x0, x0, #0x1
    1700:	ldr	x1, [sp, #128]
    1704:	cmp	x1, x0
    1708:	b.eq	1758 <gomp_display_affinity_place+0x27c>  // b.none
    170c:	ldr	x0, [sp, #128]
    1710:	sub	x0, x0, #0x1
    1714:	add	x3, sp, #0x38
    1718:	mov	x2, x0
    171c:	adrp	x0, 0 <gomp_thread>
    1720:	add	x1, x0, #0x0
    1724:	mov	x0, x3
    1728:	bl	0 <sprintf>
    172c:	add	x0, sp, #0x38
    1730:	bl	0 <strlen>
    1734:	mov	x1, x0
    1738:	add	x0, sp, #0x38
    173c:	mov	x4, x1
    1740:	mov	x3, x0
    1744:	ldr	x2, [sp, #24]
    1748:	ldr	x1, [sp, #32]
    174c:	ldr	x0, [sp, #40]
    1750:	bl	0 <gomp_display_string>
    1754:	b	175c <gomp_display_affinity_place+0x280>
    1758:	nop
    175c:	ldr	x0, [sp, #128]
    1760:	add	x0, x0, #0x1
    1764:	str	x0, [sp, #128]
    1768:	ldr	x1, [sp, #128]
    176c:	ldr	x0, [sp, #96]
    1770:	cmp	x1, x0
    1774:	b.ls	1604 <gomp_display_affinity_place+0x128>  // b.plast
    1778:	ldp	x29, x30, [sp], #144
    177c:	ret

target.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_init>:
       0:	sub	sp, sp, #0x10
       4:	str	x0, [sp, #8]
       8:	ldr	x0, [sp, #8]
       c:	str	wzr, [x0]
      10:	nop
      14:	add	sp, sp, #0x10
      18:	ret

000000000000001c <gomp_mutex_lock>:
      1c:	stp	x29, x30, [sp, #-48]!
      20:	mov	x29, sp
      24:	str	x0, [sp, #24]
      28:	str	wzr, [sp, #44]
      2c:	ldr	x1, [sp, #24]
      30:	add	x0, sp, #0x2c
      34:	ldr	w3, [x0]
      38:	mov	w4, #0x1                   	// #1
      3c:	ldaxr	w2, [x1]
      40:	cmp	w2, w3
      44:	b.ne	50 <gomp_mutex_lock+0x34>  // b.any
      48:	stxr	w5, w4, [x1]
      4c:	cbnz	w5, 3c <gomp_mutex_lock+0x20>
      50:	cset	w1, eq  // eq = none
      54:	cmp	w1, #0x0
      58:	b.ne	60 <gomp_mutex_lock+0x44>  // b.any
      5c:	str	w2, [x0]
      60:	mov	w0, w1
      64:	eor	w0, w0, #0x1
      68:	and	w0, w0, #0xff
      6c:	cmp	w0, #0x0
      70:	b.eq	84 <gomp_mutex_lock+0x68>  // b.none
      74:	ldr	w0, [sp, #44]
      78:	mov	w1, w0
      7c:	ldr	x0, [sp, #24]
      80:	bl	0 <gomp_mutex_lock_slow>
      84:	nop
      88:	ldp	x29, x30, [sp], #48
      8c:	ret

0000000000000090 <gomp_mutex_unlock>:
      90:	stp	x29, x30, [sp, #-48]!
      94:	mov	x29, sp
      98:	str	x0, [sp, #24]
      9c:	ldr	x1, [sp, #24]
      a0:	ldxr	w0, [x1]
      a4:	stlxr	w2, wzr, [x1]
      a8:	cbnz	w2, a0 <gomp_mutex_unlock+0x10>
      ac:	str	w0, [sp, #44]
      b0:	ldr	w0, [sp, #44]
      b4:	lsr	w0, w0, #31
      b8:	and	w0, w0, #0xff
      bc:	and	x0, x0, #0xff
      c0:	cmp	x0, #0x0
      c4:	b.eq	d0 <gomp_mutex_unlock+0x40>  // b.none
      c8:	ldr	x0, [sp, #24]
      cc:	bl	0 <gomp_mutex_unlock_slow>
      d0:	nop
      d4:	ldp	x29, x30, [sp], #48
      d8:	ret

00000000000000dc <gomp_team_barrier_cancelled>:
      dc:	sub	sp, sp, #0x10
      e0:	str	x0, [sp, #8]
      e4:	ldr	x0, [sp, #8]
      e8:	ldr	w0, [x0, #4]
      ec:	and	w0, w0, #0x4
      f0:	cmp	w0, #0x0
      f4:	cset	w0, ne  // ne = any
      f8:	and	w0, w0, #0xff
      fc:	and	x0, x0, #0xff
     100:	cmp	x0, #0x0
     104:	cset	w0, ne  // ne = any
     108:	and	w0, w0, #0xff
     10c:	add	sp, sp, #0x10
     110:	ret

0000000000000114 <gomp_thread>:
     114:	mrs	x1, tpidr_el0
     118:	adrp	x0, 0 <gomp_tls_data>
     11c:	ldr	x0, [x0]
     120:	add	x0, x1, x0
     124:	ret

0000000000000128 <gomp_icv>:
     128:	stp	x29, x30, [sp, #-48]!
     12c:	mov	x29, sp
     130:	strb	w0, [sp, #31]
     134:	bl	114 <gomp_thread>
     138:	ldr	x0, [x0, #80]
     13c:	str	x0, [sp, #40]
     140:	ldr	x0, [sp, #40]
     144:	cmp	x0, #0x0
     148:	b.eq	158 <gomp_icv+0x30>  // b.none
     14c:	ldr	x0, [sp, #40]
     150:	add	x0, x0, #0x90
     154:	b	174 <gomp_icv+0x4c>
     158:	ldrb	w0, [sp, #31]
     15c:	cmp	w0, #0x0
     160:	b.eq	16c <gomp_icv+0x44>  // b.none
     164:	bl	0 <gomp_new_icv>
     168:	b	174 <gomp_icv+0x4c>
     16c:	adrp	x0, 0 <gomp_global_icv>
     170:	add	x0, x0, #0x0
     174:	ldp	x29, x30, [sp], #48
     178:	ret

000000000000017c <gomp_realloc_unlock>:
     17c:	stp	x29, x30, [sp, #-48]!
     180:	mov	x29, sp
     184:	str	x0, [sp, #24]
     188:	str	x1, [sp, #16]
     18c:	ldr	x1, [sp, #16]
     190:	ldr	x0, [sp, #24]
     194:	bl	0 <realloc>
     198:	str	x0, [sp, #40]
     19c:	ldr	x0, [sp, #40]
     1a0:	cmp	x0, #0x0
     1a4:	b.ne	1c4 <gomp_realloc_unlock+0x48>  // b.any
     1a8:	adrp	x0, 0 <gomp_mutex_init>
     1ac:	add	x0, x0, #0x0
     1b0:	bl	90 <gomp_mutex_unlock>
     1b4:	ldr	x1, [sp, #16]
     1b8:	adrp	x0, 0 <gomp_mutex_init>
     1bc:	add	x0, x0, #0x0
     1c0:	bl	0 <gomp_fatal>
     1c4:	ldr	x0, [sp, #40]
     1c8:	ldp	x29, x30, [sp], #48
     1cc:	ret

00000000000001d0 <gomp_init_targets_once>:
     1d0:	stp	x29, x30, [sp, #-16]!
     1d4:	mov	x29, sp
     1d8:	adrp	x0, 0 <gomp_mutex_init>
     1dc:	add	x1, x0, #0x0
     1e0:	adrp	x0, 0 <gomp_mutex_init>
     1e4:	add	x0, x0, #0x0
     1e8:	bl	0 <pthread_once>
     1ec:	nop
     1f0:	ldp	x29, x30, [sp], #16
     1f4:	ret

00000000000001f8 <gomp_get_num_devices>:
     1f8:	stp	x29, x30, [sp, #-16]!
     1fc:	mov	x29, sp
     200:	bl	1d0 <gomp_init_targets_once>
     204:	adrp	x0, 0 <gomp_mutex_init>
     208:	add	x0, x0, #0x0
     20c:	ldr	w0, [x0]
     210:	ldp	x29, x30, [sp], #16
     214:	ret

0000000000000218 <resolve_device>:
     218:	stp	x29, x30, [sp, #-48]!
     21c:	mov	x29, sp
     220:	str	w0, [sp, #28]
     224:	ldr	w0, [sp, #28]
     228:	cmn	w0, #0x1
     22c:	b.ne	248 <resolve_device+0x30>  // b.any
     230:	mov	w0, #0x0                   	// #0
     234:	bl	128 <gomp_icv>
     238:	str	x0, [sp, #40]
     23c:	ldr	x0, [sp, #40]
     240:	ldr	w0, [x0, #16]
     244:	str	w0, [sp, #28]
     248:	ldr	w0, [sp, #28]
     24c:	cmp	w0, #0x0
     250:	b.lt	268 <resolve_device+0x50>  // b.tstop
     254:	bl	1f8 <gomp_get_num_devices>
     258:	mov	w1, w0
     25c:	ldr	w0, [sp, #28]
     260:	cmp	w0, w1
     264:	b.lt	270 <resolve_device+0x58>  // b.tstop
     268:	mov	x0, #0x0                   	// #0
     26c:	b	3e4 <resolve_device+0x1cc>
     270:	adrp	x0, 0 <gomp_mutex_init>
     274:	add	x0, x0, #0x0
     278:	ldr	x2, [x0]
     27c:	ldrsw	x1, [sp, #28]
     280:	mov	x0, x1
     284:	lsl	x0, x0, #2
     288:	add	x0, x0, x1
     28c:	lsl	x0, x0, #2
     290:	sub	x0, x0, x1
     294:	lsl	x0, x0, #4
     298:	add	x0, x2, x0
     29c:	add	x0, x0, #0xa8
     2a0:	bl	1c <gomp_mutex_lock>
     2a4:	adrp	x0, 0 <gomp_mutex_init>
     2a8:	add	x0, x0, #0x0
     2ac:	ldr	x2, [x0]
     2b0:	ldrsw	x1, [sp, #28]
     2b4:	mov	x0, x1
     2b8:	lsl	x0, x0, #2
     2bc:	add	x0, x0, x1
     2c0:	lsl	x0, x0, #2
     2c4:	sub	x0, x0, x1
     2c8:	lsl	x0, x0, #4
     2cc:	add	x0, x2, x0
     2d0:	ldr	w0, [x0, #172]
     2d4:	cmp	w0, #0x0
     2d8:	b.ne	310 <resolve_device+0xf8>  // b.any
     2dc:	adrp	x0, 0 <gomp_mutex_init>
     2e0:	add	x0, x0, #0x0
     2e4:	ldr	x2, [x0]
     2e8:	ldrsw	x1, [sp, #28]
     2ec:	mov	x0, x1
     2f0:	lsl	x0, x0, #2
     2f4:	add	x0, x0, x1
     2f8:	lsl	x0, x0, #2
     2fc:	sub	x0, x0, x1
     300:	lsl	x0, x0, #4
     304:	add	x0, x2, x0
     308:	bl	3fc0 <gomp_init_device>
     30c:	b	384 <resolve_device+0x16c>
     310:	adrp	x0, 0 <gomp_mutex_init>
     314:	add	x0, x0, #0x0
     318:	ldr	x2, [x0]
     31c:	ldrsw	x1, [sp, #28]
     320:	mov	x0, x1
     324:	lsl	x0, x0, #2
     328:	add	x0, x0, x1
     32c:	lsl	x0, x0, #2
     330:	sub	x0, x0, x1
     334:	lsl	x0, x0, #4
     338:	add	x0, x2, x0
     33c:	ldr	w0, [x0, #172]
     340:	cmp	w0, #0x2
     344:	b.ne	384 <resolve_device+0x16c>  // b.any
     348:	adrp	x0, 0 <gomp_mutex_init>
     34c:	add	x0, x0, #0x0
     350:	ldr	x2, [x0]
     354:	ldrsw	x1, [sp, #28]
     358:	mov	x0, x1
     35c:	lsl	x0, x0, #2
     360:	add	x0, x0, x1
     364:	lsl	x0, x0, #2
     368:	sub	x0, x0, x1
     36c:	lsl	x0, x0, #4
     370:	add	x0, x2, x0
     374:	add	x0, x0, #0xa8
     378:	bl	90 <gomp_mutex_unlock>
     37c:	mov	x0, #0x0                   	// #0
     380:	b	3e4 <resolve_device+0x1cc>
     384:	adrp	x0, 0 <gomp_mutex_init>
     388:	add	x0, x0, #0x0
     38c:	ldr	x2, [x0]
     390:	ldrsw	x1, [sp, #28]
     394:	mov	x0, x1
     398:	lsl	x0, x0, #2
     39c:	add	x0, x0, x1
     3a0:	lsl	x0, x0, #2
     3a4:	sub	x0, x0, x1
     3a8:	lsl	x0, x0, #4
     3ac:	add	x0, x2, x0
     3b0:	add	x0, x0, #0xa8
     3b4:	bl	90 <gomp_mutex_unlock>
     3b8:	adrp	x0, 0 <gomp_mutex_init>
     3bc:	add	x0, x0, #0x0
     3c0:	ldr	x2, [x0]
     3c4:	ldrsw	x1, [sp, #28]
     3c8:	mov	x0, x1
     3cc:	lsl	x0, x0, #2
     3d0:	add	x0, x0, x1
     3d4:	lsl	x0, x0, #2
     3d8:	sub	x0, x0, x1
     3dc:	lsl	x0, x0, #4
     3e0:	add	x0, x2, x0
     3e4:	ldp	x29, x30, [sp], #48
     3e8:	ret

00000000000003ec <gomp_map_lookup>:
     3ec:	stp	x29, x30, [sp, #-48]!
     3f0:	mov	x29, sp
     3f4:	str	x0, [sp, #24]
     3f8:	str	x1, [sp, #16]
     3fc:	ldr	x0, [sp, #16]
     400:	ldr	x1, [x0]
     404:	ldr	x0, [sp, #16]
     408:	ldr	x0, [x0, #8]
     40c:	cmp	x1, x0
     410:	b.eq	424 <gomp_map_lookup+0x38>  // b.none
     414:	ldr	x1, [sp, #16]
     418:	ldr	x0, [sp, #24]
     41c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     420:	b	4c8 <gomp_map_lookup+0xdc>
     424:	ldr	x0, [sp, #16]
     428:	ldr	x0, [x0, #8]
     42c:	add	x1, x0, #0x1
     430:	ldr	x0, [sp, #16]
     434:	str	x1, [x0, #8]
     438:	ldr	x1, [sp, #16]
     43c:	ldr	x0, [sp, #24]
     440:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     444:	str	x0, [sp, #40]
     448:	ldr	x0, [sp, #16]
     44c:	ldr	x0, [x0, #8]
     450:	sub	x1, x0, #0x1
     454:	ldr	x0, [sp, #16]
     458:	str	x1, [x0, #8]
     45c:	ldr	x0, [sp, #40]
     460:	cmp	x0, #0x0
     464:	b.eq	470 <gomp_map_lookup+0x84>  // b.none
     468:	ldr	x0, [sp, #40]
     46c:	b	4c8 <gomp_map_lookup+0xdc>
     470:	ldr	x0, [sp, #16]
     474:	ldr	x0, [x0]
     478:	sub	x1, x0, #0x1
     47c:	ldr	x0, [sp, #16]
     480:	str	x1, [x0]
     484:	ldr	x1, [sp, #16]
     488:	ldr	x0, [sp, #24]
     48c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     490:	str	x0, [sp, #40]
     494:	ldr	x0, [sp, #16]
     498:	ldr	x0, [x0]
     49c:	add	x1, x0, #0x1
     4a0:	ldr	x0, [sp, #16]
     4a4:	str	x1, [x0]
     4a8:	ldr	x0, [sp, #40]
     4ac:	cmp	x0, #0x0
     4b0:	b.eq	4bc <gomp_map_lookup+0xd0>  // b.none
     4b4:	ldr	x0, [sp, #40]
     4b8:	b	4c8 <gomp_map_lookup+0xdc>
     4bc:	ldr	x1, [sp, #16]
     4c0:	ldr	x0, [sp, #24]
     4c4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     4c8:	ldp	x29, x30, [sp], #48
     4cc:	ret

00000000000004d0 <gomp_map_0len_lookup>:
     4d0:	stp	x29, x30, [sp, #-48]!
     4d4:	mov	x29, sp
     4d8:	str	x0, [sp, #24]
     4dc:	str	x1, [sp, #16]
     4e0:	ldr	x0, [sp, #16]
     4e4:	ldr	x1, [x0]
     4e8:	ldr	x0, [sp, #16]
     4ec:	ldr	x0, [x0, #8]
     4f0:	cmp	x1, x0
     4f4:	b.eq	508 <gomp_map_0len_lookup+0x38>  // b.none
     4f8:	ldr	x1, [sp, #16]
     4fc:	ldr	x0, [sp, #24]
     500:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     504:	b	544 <gomp_map_0len_lookup+0x74>
     508:	ldr	x0, [sp, #16]
     50c:	ldr	x0, [x0, #8]
     510:	add	x1, x0, #0x1
     514:	ldr	x0, [sp, #16]
     518:	str	x1, [x0, #8]
     51c:	ldr	x1, [sp, #16]
     520:	ldr	x0, [sp, #24]
     524:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     528:	str	x0, [sp, #40]
     52c:	ldr	x0, [sp, #16]
     530:	ldr	x0, [x0, #8]
     534:	sub	x1, x0, #0x1
     538:	ldr	x0, [sp, #16]
     53c:	str	x1, [x0, #8]
     540:	ldr	x0, [sp, #40]
     544:	ldp	x29, x30, [sp], #48
     548:	ret

000000000000054c <gomp_device_copy>:
     54c:	stp	x29, x30, [sp, #-80]!
     550:	mov	x29, sp
     554:	str	x0, [sp, #72]
     558:	str	x1, [sp, #64]
     55c:	str	x2, [sp, #56]
     560:	str	x3, [sp, #48]
     564:	str	x4, [sp, #40]
     568:	str	x5, [sp, #32]
     56c:	str	x6, [sp, #24]
     570:	ldr	x0, [sp, #72]
     574:	ldr	w0, [x0, #12]
     578:	ldr	x4, [sp, #64]
     57c:	ldr	x3, [sp, #24]
     580:	ldr	x2, [sp, #32]
     584:	ldr	x1, [sp, #48]
     588:	blr	x4
     58c:	and	w0, w0, #0xff
     590:	eor	w0, w0, #0x1
     594:	and	w0, w0, #0xff
     598:	cmp	w0, #0x0
     59c:	b.eq	5e8 <gomp_device_copy+0x9c>  // b.none
     5a0:	ldr	x0, [sp, #72]
     5a4:	add	x0, x0, #0xa8
     5a8:	bl	90 <gomp_mutex_unlock>
     5ac:	ldr	x1, [sp, #32]
     5b0:	ldr	x0, [sp, #24]
     5b4:	add	x2, x1, x0
     5b8:	ldr	x1, [sp, #48]
     5bc:	ldr	x0, [sp, #24]
     5c0:	add	x0, x1, x0
     5c4:	mov	x6, x0
     5c8:	ldr	x5, [sp, #48]
     5cc:	ldr	x4, [sp, #56]
     5d0:	mov	x3, x2
     5d4:	ldr	x2, [sp, #32]
     5d8:	ldr	x1, [sp, #40]
     5dc:	adrp	x0, 0 <gomp_mutex_init>
     5e0:	add	x0, x0, #0x0
     5e4:	bl	0 <gomp_fatal>
     5e8:	nop
     5ec:	ldp	x29, x30, [sp], #80
     5f0:	ret

00000000000005f4 <gomp_coalesce_buf_add>:
     5f4:	sub	sp, sp, #0x20
     5f8:	str	x0, [sp, #24]
     5fc:	str	x1, [sp, #16]
     600:	str	x2, [sp, #8]
     604:	ldr	x0, [sp, #8]
     608:	cmp	x0, #0x8, lsl #12
     60c:	b.hi	77c <gomp_coalesce_buf_add+0x188>  // b.pmore
     610:	ldr	x0, [sp, #8]
     614:	cmp	x0, #0x0
     618:	b.eq	77c <gomp_coalesce_buf_add+0x188>  // b.none
     61c:	ldr	x0, [sp, #24]
     620:	ldr	x0, [x0, #24]
     624:	cmp	x0, #0x0
     628:	b.eq	710 <gomp_coalesce_buf_add+0x11c>  // b.none
     62c:	ldr	x0, [sp, #24]
     630:	ldr	x0, [x0, #24]
     634:	cmp	x0, #0x0
     638:	b.lt	784 <gomp_coalesce_buf_add+0x190>  // b.tstop
     63c:	ldr	x0, [sp, #24]
     640:	ldr	x1, [x0, #16]
     644:	ldr	x0, [sp, #24]
     648:	ldr	x0, [x0, #24]
     64c:	lsl	x0, x0, #4
     650:	sub	x0, x0, #0x10
     654:	add	x0, x1, x0
     658:	ldr	x0, [x0, #8]
     65c:	ldr	x1, [sp, #16]
     660:	cmp	x1, x0
     664:	b.cs	678 <gomp_coalesce_buf_add+0x84>  // b.hs, b.nlast
     668:	ldr	x0, [sp, #24]
     66c:	mov	x1, #0xffffffffffffffff    	// #-1
     670:	str	x1, [x0, #24]
     674:	b	788 <gomp_coalesce_buf_add+0x194>
     678:	ldr	x0, [sp, #24]
     67c:	ldr	x1, [x0, #16]
     680:	ldr	x0, [sp, #24]
     684:	ldr	x0, [x0, #24]
     688:	lsl	x0, x0, #4
     68c:	sub	x0, x0, #0x10
     690:	add	x0, x1, x0
     694:	ldr	x0, [x0, #8]
     698:	add	x0, x0, #0x1, lsl #12
     69c:	ldr	x1, [sp, #16]
     6a0:	cmp	x1, x0
     6a4:	b.cs	6ec <gomp_coalesce_buf_add+0xf8>  // b.hs, b.nlast
     6a8:	ldr	x0, [sp, #24]
     6ac:	ldr	x1, [x0, #16]
     6b0:	ldr	x0, [sp, #24]
     6b4:	ldr	x0, [x0, #24]
     6b8:	lsl	x0, x0, #4
     6bc:	sub	x0, x0, #0x10
     6c0:	add	x0, x1, x0
     6c4:	ldr	x2, [sp, #16]
     6c8:	ldr	x1, [sp, #8]
     6cc:	add	x1, x2, x1
     6d0:	str	x1, [x0, #8]
     6d4:	ldr	x0, [sp, #24]
     6d8:	ldr	x0, [x0, #32]
     6dc:	add	x1, x0, #0x1
     6e0:	ldr	x0, [sp, #24]
     6e4:	str	x1, [x0, #32]
     6e8:	b	788 <gomp_coalesce_buf_add+0x194>
     6ec:	ldr	x0, [sp, #24]
     6f0:	ldr	x0, [x0, #32]
     6f4:	cmp	x0, #0x1
     6f8:	b.ne	710 <gomp_coalesce_buf_add+0x11c>  // b.any
     6fc:	ldr	x0, [sp, #24]
     700:	ldr	x0, [x0, #24]
     704:	sub	x1, x0, #0x1
     708:	ldr	x0, [sp, #24]
     70c:	str	x1, [x0, #24]
     710:	ldr	x0, [sp, #24]
     714:	ldr	x1, [x0, #16]
     718:	ldr	x0, [sp, #24]
     71c:	ldr	x0, [x0, #24]
     720:	lsl	x0, x0, #4
     724:	add	x0, x1, x0
     728:	ldr	x1, [sp, #16]
     72c:	str	x1, [x0]
     730:	ldr	x0, [sp, #24]
     734:	ldr	x1, [x0, #16]
     738:	ldr	x0, [sp, #24]
     73c:	ldr	x0, [x0, #24]
     740:	lsl	x0, x0, #4
     744:	add	x0, x1, x0
     748:	ldr	x2, [sp, #16]
     74c:	ldr	x1, [sp, #8]
     750:	add	x1, x2, x1
     754:	str	x1, [x0, #8]
     758:	ldr	x0, [sp, #24]
     75c:	ldr	x0, [x0, #24]
     760:	add	x1, x0, #0x1
     764:	ldr	x0, [sp, #24]
     768:	str	x1, [x0, #24]
     76c:	ldr	x0, [sp, #24]
     770:	mov	x1, #0x1                   	// #1
     774:	str	x1, [x0, #32]
     778:	b	788 <gomp_coalesce_buf_add+0x194>
     77c:	nop
     780:	b	788 <gomp_coalesce_buf_add+0x194>
     784:	nop
     788:	add	sp, sp, #0x20
     78c:	ret

0000000000000790 <gomp_to_device_kind_p>:
     790:	sub	sp, sp, #0x10
     794:	str	w0, [sp, #12]
     798:	ldr	w0, [sp, #12]
     79c:	cmp	w0, #0x12
     7a0:	b.gt	7e0 <gomp_to_device_kind_p+0x50>
     7a4:	ldr	w0, [sp, #12]
     7a8:	cmp	w0, #0x0
     7ac:	b.lt	7f4 <gomp_to_device_kind_p+0x64>  // b.tstop
     7b0:	ldr	w0, [sp, #12]
     7b4:	mov	x1, #0x1                   	// #1
     7b8:	lsl	x1, x1, x0
     7bc:	mov	x0, #0x5                   	// #5
     7c0:	movk	x0, #0x4, lsl #16
     7c4:	and	x0, x1, x0
     7c8:	cmp	x0, #0x0
     7cc:	cset	w0, ne  // ne = any
     7d0:	and	w0, w0, #0xff
     7d4:	cmp	w0, #0x0
     7d8:	b.ne	7ec <gomp_to_device_kind_p+0x5c>  // b.any
     7dc:	b	7f4 <gomp_to_device_kind_p+0x64>
     7e0:	ldr	w0, [sp, #12]
     7e4:	cmp	w0, #0x80
     7e8:	b.ne	7f4 <gomp_to_device_kind_p+0x64>  // b.any
     7ec:	mov	w0, #0x0                   	// #0
     7f0:	b	7f8 <gomp_to_device_kind_p+0x68>
     7f4:	mov	w0, #0x1                   	// #1
     7f8:	add	sp, sp, #0x10
     7fc:	ret

0000000000000800 <gomp_copy_host2dev>:
     800:	stp	x29, x30, [sp, #-96]!
     804:	mov	x29, sp
     808:	str	x0, [sp, #56]
     80c:	str	x1, [sp, #48]
     810:	str	x2, [sp, #40]
     814:	str	x3, [sp, #32]
     818:	str	x4, [sp, #24]
     81c:	ldr	x0, [sp, #24]
     820:	cmp	x0, #0x0
     824:	b.eq	974 <gomp_copy_host2dev+0x174>  // b.none
     828:	ldr	x1, [sp, #48]
     82c:	ldr	x0, [sp, #24]
     830:	ldr	x0, [x0, #8]
     834:	ldr	x0, [x0, #16]
     838:	sub	x0, x1, x0
     83c:	str	x0, [sp, #72]
     840:	ldr	x0, [sp, #24]
     844:	ldr	x1, [x0, #16]
     848:	ldr	x0, [sp, #24]
     84c:	ldr	x0, [x0, #24]
     850:	lsl	x0, x0, #4
     854:	sub	x0, x0, #0x10
     858:	add	x0, x1, x0
     85c:	ldr	x0, [x0, #8]
     860:	ldr	x1, [sp, #72]
     864:	cmp	x1, x0
     868:	b.cs	974 <gomp_copy_host2dev+0x174>  // b.hs, b.nlast
     86c:	str	xzr, [sp, #88]
     870:	ldr	x0, [sp, #24]
     874:	ldr	x0, [x0, #24]
     878:	sub	x0, x0, #0x1
     87c:	str	x0, [sp, #80]
     880:	b	964 <gomp_copy_host2dev+0x164>
     884:	ldr	x1, [sp, #88]
     888:	ldr	x0, [sp, #80]
     88c:	add	x0, x1, x0
     890:	asr	x0, x0, #1
     894:	str	x0, [sp, #64]
     898:	ldr	x0, [sp, #24]
     89c:	ldr	x1, [x0, #16]
     8a0:	ldr	x0, [sp, #64]
     8a4:	lsl	x0, x0, #4
     8a8:	add	x0, x1, x0
     8ac:	ldr	x0, [x0, #8]
     8b0:	ldr	x1, [sp, #72]
     8b4:	cmp	x1, x0
     8b8:	b.cc	8cc <gomp_copy_host2dev+0xcc>  // b.lo, b.ul, b.last
     8bc:	ldr	x0, [sp, #64]
     8c0:	add	x0, x0, #0x1
     8c4:	str	x0, [sp, #88]
     8c8:	b	964 <gomp_copy_host2dev+0x164>
     8cc:	ldr	x0, [sp, #24]
     8d0:	ldr	x1, [x0, #16]
     8d4:	ldr	x0, [sp, #64]
     8d8:	lsl	x0, x0, #4
     8dc:	add	x0, x1, x0
     8e0:	ldr	x0, [x0]
     8e4:	ldr	x1, [sp, #72]
     8e8:	cmp	x1, x0
     8ec:	b.cc	958 <gomp_copy_host2dev+0x158>  // b.lo, b.ul, b.last
     8f0:	ldr	x1, [sp, #72]
     8f4:	ldr	x0, [sp, #32]
     8f8:	add	x1, x1, x0
     8fc:	ldr	x0, [sp, #24]
     900:	ldr	x2, [x0, #16]
     904:	ldr	x0, [sp, #64]
     908:	lsl	x0, x0, #4
     90c:	add	x0, x2, x0
     910:	ldr	x0, [x0, #8]
     914:	cmp	x1, x0
     918:	b.ls	928 <gomp_copy_host2dev+0x128>  // b.plast
     91c:	adrp	x0, 0 <gomp_mutex_init>
     920:	add	x0, x0, #0x0
     924:	bl	0 <gomp_fatal>
     928:	ldr	x0, [sp, #24]
     92c:	ldr	x1, [x0]
     930:	ldr	x0, [sp, #24]
     934:	ldr	x0, [x0, #16]
     938:	ldr	x0, [x0]
     93c:	ldr	x2, [sp, #72]
     940:	sub	x0, x2, x0
     944:	add	x0, x1, x0
     948:	ldr	x2, [sp, #32]
     94c:	ldr	x1, [sp, #40]
     950:	bl	0 <memcpy>
     954:	b	9a0 <gomp_copy_host2dev+0x1a0>
     958:	ldr	x0, [sp, #64]
     95c:	sub	x0, x0, #0x1
     960:	str	x0, [sp, #80]
     964:	ldr	x1, [sp, #88]
     968:	ldr	x0, [sp, #80]
     96c:	cmp	x1, x0
     970:	b.le	884 <gomp_copy_host2dev+0x84>
     974:	ldr	x0, [sp, #56]
     978:	ldr	x1, [x0, #120]
     97c:	ldr	x6, [sp, #32]
     980:	ldr	x5, [sp, #40]
     984:	adrp	x0, 0 <gomp_mutex_init>
     988:	add	x4, x0, #0x0
     98c:	ldr	x3, [sp, #48]
     990:	adrp	x0, 0 <gomp_mutex_init>
     994:	add	x2, x0, #0x0
     998:	ldr	x0, [sp, #56]
     99c:	bl	54c <gomp_device_copy>
     9a0:	ldp	x29, x30, [sp], #96
     9a4:	ret

00000000000009a8 <gomp_copy_dev2host>:
     9a8:	stp	x29, x30, [sp, #-48]!
     9ac:	mov	x29, sp
     9b0:	str	x0, [sp, #40]
     9b4:	str	x1, [sp, #32]
     9b8:	str	x2, [sp, #24]
     9bc:	str	x3, [sp, #16]
     9c0:	ldr	x0, [sp, #40]
     9c4:	ldr	x1, [x0, #112]
     9c8:	ldr	x6, [sp, #16]
     9cc:	ldr	x5, [sp, #24]
     9d0:	adrp	x0, 0 <gomp_mutex_init>
     9d4:	add	x4, x0, #0x0
     9d8:	ldr	x3, [sp, #32]
     9dc:	adrp	x0, 0 <gomp_mutex_init>
     9e0:	add	x2, x0, #0x0
     9e4:	ldr	x0, [sp, #40]
     9e8:	bl	54c <gomp_device_copy>
     9ec:	nop
     9f0:	ldp	x29, x30, [sp], #48
     9f4:	ret

00000000000009f8 <gomp_free_device_memory>:
     9f8:	stp	x29, x30, [sp, #-32]!
     9fc:	mov	x29, sp
     a00:	str	x0, [sp, #24]
     a04:	str	x1, [sp, #16]
     a08:	ldr	x0, [sp, #24]
     a0c:	ldr	x2, [x0, #104]
     a10:	ldr	x0, [sp, #24]
     a14:	ldr	w0, [x0, #12]
     a18:	ldr	x1, [sp, #16]
     a1c:	blr	x2
     a20:	and	w0, w0, #0xff
     a24:	eor	w0, w0, #0x1
     a28:	and	w0, w0, #0xff
     a2c:	cmp	w0, #0x0
     a30:	b.eq	a50 <gomp_free_device_memory+0x58>  // b.none
     a34:	ldr	x0, [sp, #24]
     a38:	add	x0, x0, #0xa8
     a3c:	bl	90 <gomp_mutex_unlock>
     a40:	ldr	x1, [sp, #16]
     a44:	adrp	x0, 0 <gomp_mutex_init>
     a48:	add	x0, x0, #0x0
     a4c:	bl	0 <gomp_fatal>
     a50:	nop
     a54:	ldp	x29, x30, [sp], #32
     a58:	ret

0000000000000a5c <gomp_map_vars_existing>:
     a5c:	stp	x29, x30, [sp, #-64]!
     a60:	mov	x29, sp
     a64:	str	x0, [sp, #56]
     a68:	str	x1, [sp, #48]
     a6c:	str	x2, [sp, #40]
     a70:	str	x3, [sp, #32]
     a74:	strb	w4, [sp, #31]
     a78:	str	x5, [sp, #16]
     a7c:	ldr	x0, [sp, #32]
     a80:	ldr	x1, [sp, #48]
     a84:	str	x1, [x0]
     a88:	ldrb	w0, [sp, #31]
     a8c:	and	w0, w0, #0xc
     a90:	cmp	w0, #0x0
     a94:	b.ne	ab0 <gomp_map_vars_existing+0x54>  // b.any
     a98:	ldrb	w0, [sp, #31]
     a9c:	and	w0, w0, #0x2
     aa0:	cmp	w0, #0x0
     aa4:	b.eq	ab0 <gomp_map_vars_existing+0x54>  // b.none
     aa8:	mov	w0, #0x1                   	// #1
     aac:	b	ab4 <gomp_map_vars_existing+0x58>
     ab0:	mov	w0, #0x0                   	// #0
     ab4:	and	w0, w0, #0x1
     ab8:	and	w1, w0, #0xff
     abc:	ldr	x0, [sp, #32]
     ac0:	strb	w1, [x0, #8]
     ac4:	ldrb	w0, [sp, #31]
     ac8:	cmp	w0, #0x12
     acc:	b.eq	adc <gomp_map_vars_existing+0x80>  // b.none
     ad0:	ldrb	w0, [sp, #31]
     ad4:	cmp	w0, #0x13
     ad8:	b.ne	ae4 <gomp_map_vars_existing+0x88>  // b.any
     adc:	mov	w0, #0x1                   	// #1
     ae0:	b	ae8 <gomp_map_vars_existing+0x8c>
     ae4:	mov	w0, #0x0                   	// #0
     ae8:	and	w0, w0, #0x1
     aec:	and	w1, w0, #0xff
     af0:	ldr	x0, [sp, #32]
     af4:	strb	w1, [x0, #9]
     af8:	ldr	x0, [sp, #40]
     afc:	ldr	x1, [x0]
     b00:	ldr	x0, [sp, #48]
     b04:	ldr	x0, [x0]
     b08:	sub	x1, x1, x0
     b0c:	ldr	x0, [sp, #32]
     b10:	str	x1, [x0, #16]
     b14:	ldr	x0, [sp, #40]
     b18:	ldr	x1, [x0, #8]
     b1c:	ldr	x0, [sp, #40]
     b20:	ldr	x0, [x0]
     b24:	sub	x1, x1, x0
     b28:	ldr	x0, [sp, #32]
     b2c:	str	x1, [x0, #24]
     b30:	ldrsb	w0, [sp, #31]
     b34:	cmp	w0, #0x0
     b38:	b.lt	b6c <gomp_map_vars_existing+0x110>  // b.tstop
     b3c:	ldr	x0, [sp, #48]
     b40:	ldr	x1, [x0]
     b44:	ldr	x0, [sp, #40]
     b48:	ldr	x0, [x0]
     b4c:	cmp	x1, x0
     b50:	b.hi	b6c <gomp_map_vars_existing+0x110>  // b.pmore
     b54:	ldr	x0, [sp, #48]
     b58:	ldr	x1, [x0, #8]
     b5c:	ldr	x0, [sp, #40]
     b60:	ldr	x0, [x0, #8]
     b64:	cmp	x1, x0
     b68:	b.cs	bb4 <gomp_map_vars_existing+0x158>  // b.hs, b.nlast
     b6c:	ldr	x0, [sp, #56]
     b70:	add	x0, x0, #0xa8
     b74:	bl	90 <gomp_mutex_unlock>
     b78:	ldr	x0, [sp, #40]
     b7c:	ldr	x0, [x0]
     b80:	mov	x1, x0
     b84:	ldr	x0, [sp, #40]
     b88:	ldr	x0, [x0, #8]
     b8c:	mov	x2, x0
     b90:	ldr	x0, [sp, #48]
     b94:	ldr	x0, [x0]
     b98:	mov	x3, x0
     b9c:	ldr	x0, [sp, #48]
     ba0:	ldr	x0, [x0, #8]
     ba4:	mov	x4, x0
     ba8:	adrp	x0, 0 <gomp_mutex_init>
     bac:	add	x0, x0, #0x0
     bb0:	bl	0 <gomp_fatal>
     bb4:	ldrb	w0, [sp, #31]
     bb8:	cmp	w0, #0x11
     bbc:	b.eq	bcc <gomp_map_vars_existing+0x170>  // b.none
     bc0:	ldrb	w0, [sp, #31]
     bc4:	cmp	w0, #0x13
     bc8:	b.ne	c34 <gomp_map_vars_existing+0x1d8>  // b.any
     bcc:	ldr	x0, [sp, #48]
     bd0:	ldr	x0, [x0, #16]
     bd4:	ldr	x1, [x0, #16]
     bd8:	ldr	x0, [sp, #48]
     bdc:	ldr	x0, [x0, #24]
     be0:	add	x1, x1, x0
     be4:	ldr	x0, [sp, #40]
     be8:	ldr	x0, [x0]
     bec:	add	x1, x1, x0
     bf0:	ldr	x0, [sp, #48]
     bf4:	ldr	x0, [x0]
     bf8:	sub	x0, x1, x0
     bfc:	mov	x5, x0
     c00:	ldr	x0, [sp, #40]
     c04:	ldr	x0, [x0]
     c08:	mov	x2, x0
     c0c:	ldr	x0, [sp, #40]
     c10:	ldr	x1, [x0, #8]
     c14:	ldr	x0, [sp, #40]
     c18:	ldr	x0, [x0]
     c1c:	sub	x0, x1, x0
     c20:	ldr	x4, [sp, #16]
     c24:	mov	x3, x0
     c28:	mov	x1, x5
     c2c:	ldr	x0, [sp, #56]
     c30:	bl	800 <gomp_copy_host2dev>
     c34:	ldr	x0, [sp, #48]
     c38:	ldr	x0, [x0, #32]
     c3c:	cmn	x0, #0x1
     c40:	b.eq	c58 <gomp_map_vars_existing+0x1fc>  // b.none
     c44:	ldr	x0, [sp, #48]
     c48:	ldr	x0, [x0, #32]
     c4c:	add	x1, x0, #0x1
     c50:	ldr	x0, [sp, #48]
     c54:	str	x1, [x0, #32]
     c58:	nop
     c5c:	ldp	x29, x30, [sp], #64
     c60:	ret

0000000000000c64 <get_kind>:
     c64:	sub	sp, sp, #0x10
     c68:	strb	w0, [sp, #15]
     c6c:	str	x1, [sp]
     c70:	str	w2, [sp, #8]
     c74:	ldrb	w0, [sp, #15]
     c78:	cmp	w0, #0x0
     c7c:	b.eq	c98 <get_kind+0x34>  // b.none
     c80:	ldrsw	x0, [sp, #8]
     c84:	lsl	x0, x0, #1
     c88:	ldr	x1, [sp]
     c8c:	add	x0, x1, x0
     c90:	ldrh	w0, [x0]
     c94:	b	ca8 <get_kind+0x44>
     c98:	ldrsw	x0, [sp, #8]
     c9c:	ldr	x1, [sp]
     ca0:	add	x0, x1, x0
     ca4:	ldrb	w0, [x0]
     ca8:	add	sp, sp, #0x10
     cac:	ret

0000000000000cb0 <gomp_map_pointer>:
     cb0:	stp	x29, x30, [sp, #-144]!
     cb4:	mov	x29, sp
     cb8:	str	x0, [sp, #56]
     cbc:	str	x1, [sp, #48]
     cc0:	str	x2, [sp, #40]
     cc4:	str	x3, [sp, #32]
     cc8:	str	x4, [sp, #24]
     ccc:	ldr	x0, [sp, #56]
     cd0:	ldr	x0, [x0, #56]
     cd4:	str	x0, [sp, #136]
     cd8:	ldr	x0, [sp, #136]
     cdc:	add	x0, x0, #0xa0
     ce0:	str	x0, [sp, #128]
     ce4:	ldr	x0, [sp, #48]
     ce8:	str	x0, [sp, #64]
     cec:	ldr	x0, [sp, #64]
     cf0:	cmp	x0, #0x0
     cf4:	b.ne	d30 <gomp_map_pointer+0x80>  // b.any
     cf8:	str	xzr, [sp, #88]
     cfc:	ldr	x0, [sp, #56]
     d00:	ldr	x1, [x0, #16]
     d04:	ldr	x0, [sp, #40]
     d08:	add	x0, x1, x0
     d0c:	mov	x1, x0
     d10:	add	x0, sp, #0x40
     d14:	add	x0, x0, #0x18
     d18:	ldr	x4, [sp, #24]
     d1c:	mov	x3, #0x8                   	// #8
     d20:	mov	x2, x0
     d24:	ldr	x0, [sp, #136]
     d28:	bl	800 <gomp_copy_host2dev>
     d2c:	b	df8 <gomp_map_pointer+0x148>
     d30:	ldr	x1, [sp, #64]
     d34:	ldr	x0, [sp, #32]
     d38:	add	x0, x1, x0
     d3c:	str	x0, [sp, #64]
     d40:	ldr	x0, [sp, #64]
     d44:	str	x0, [sp, #72]
     d48:	add	x0, sp, #0x40
     d4c:	mov	x1, x0
     d50:	ldr	x0, [sp, #128]
     d54:	bl	3ec <gomp_map_lookup>
     d58:	str	x0, [sp, #120]
     d5c:	ldr	x0, [sp, #120]
     d60:	cmp	x0, #0x0
     d64:	b.ne	d80 <gomp_map_pointer+0xd0>  // b.any
     d68:	ldr	x0, [sp, #136]
     d6c:	add	x0, x0, #0xa8
     d70:	bl	90 <gomp_mutex_unlock>
     d74:	adrp	x0, 0 <gomp_mutex_init>
     d78:	add	x0, x0, #0x0
     d7c:	bl	0 <gomp_fatal>
     d80:	ldr	x1, [sp, #64]
     d84:	ldr	x0, [sp, #120]
     d88:	ldr	x0, [x0]
     d8c:	sub	x0, x1, x0
     d90:	str	x0, [sp, #64]
     d94:	ldr	x0, [sp, #120]
     d98:	ldr	x0, [x0, #16]
     d9c:	ldr	x1, [x0, #16]
     da0:	ldr	x0, [sp, #120]
     da4:	ldr	x0, [x0, #24]
     da8:	add	x1, x1, x0
     dac:	ldr	x0, [sp, #64]
     db0:	add	x0, x1, x0
     db4:	str	x0, [sp, #88]
     db8:	ldr	x1, [sp, #88]
     dbc:	ldr	x0, [sp, #32]
     dc0:	sub	x0, x1, x0
     dc4:	str	x0, [sp, #88]
     dc8:	ldr	x0, [sp, #56]
     dcc:	ldr	x1, [x0, #16]
     dd0:	ldr	x0, [sp, #40]
     dd4:	add	x0, x1, x0
     dd8:	mov	x1, x0
     ddc:	add	x0, sp, #0x40
     de0:	add	x0, x0, #0x18
     de4:	ldr	x4, [sp, #24]
     de8:	mov	x3, #0x8                   	// #8
     dec:	mov	x2, x0
     df0:	ldr	x0, [sp, #136]
     df4:	bl	800 <gomp_copy_host2dev>
     df8:	ldp	x29, x30, [sp], #144
     dfc:	ret

0000000000000e00 <gomp_map_fields_existing>:
     e00:	stp	x29, x30, [sp, #-176]!
     e04:	mov	x29, sp
     e08:	str	x0, [sp, #72]
     e0c:	str	x1, [sp, #64]
     e10:	str	x2, [sp, #56]
     e14:	str	x3, [sp, #48]
     e18:	str	x4, [sp, #40]
     e1c:	str	x5, [sp, #32]
     e20:	str	x6, [sp, #24]
     e24:	str	x7, [sp, #16]
     e28:	ldr	x0, [sp, #72]
     e2c:	ldr	x0, [x0, #56]
     e30:	str	x0, [sp, #168]
     e34:	ldr	x0, [sp, #168]
     e38:	add	x0, x0, #0xa0
     e3c:	str	x0, [sp, #160]
     e40:	mov	w0, #0x1                   	// #1
     e44:	strb	w0, [sp, #159]
     e48:	ldrb	w0, [sp, #159]
     e4c:	cmp	w0, #0x0
     e50:	b.eq	e5c <gomp_map_fields_existing+0x5c>  // b.none
     e54:	mov	w0, #0xff                  	// #255
     e58:	b	e60 <gomp_map_fields_existing+0x60>
     e5c:	mov	w0, #0x7                   	// #7
     e60:	str	w0, [sp, #152]
     e64:	ldr	x0, [sp, #48]
     e68:	lsl	x0, x0, #3
     e6c:	ldr	x1, [sp, #40]
     e70:	add	x0, x1, x0
     e74:	ldr	x0, [x0]
     e78:	str	x0, [sp, #80]
     e7c:	ldr	x1, [sp, #80]
     e80:	ldr	x0, [sp, #48]
     e84:	lsl	x0, x0, #3
     e88:	ldr	x2, [sp, #32]
     e8c:	add	x0, x2, x0
     e90:	ldr	x0, [x0]
     e94:	add	x0, x1, x0
     e98:	str	x0, [sp, #88]
     e9c:	add	x0, sp, #0x50
     ea0:	mov	x1, x0
     ea4:	ldr	x0, [sp, #160]
     ea8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     eac:	str	x0, [sp, #144]
     eb0:	ldr	x0, [sp, #48]
     eb4:	mov	w2, w0
     eb8:	ldr	x1, [sp, #24]
     ebc:	ldrb	w0, [sp, #159]
     ec0:	bl	c64 <get_kind>
     ec4:	str	w0, [sp, #140]
     ec8:	ldr	x0, [sp, #144]
     ecc:	cmp	x0, #0x0
     ed0:	b.eq	f70 <gomp_map_fields_existing+0x170>  // b.none
     ed4:	ldr	x0, [sp, #144]
     ed8:	ldr	x1, [x0, #16]
     edc:	ldr	x0, [sp, #64]
     ee0:	ldr	x0, [x0, #16]
     ee4:	cmp	x1, x0
     ee8:	b.ne	f70 <gomp_map_fields_existing+0x170>  // b.any
     eec:	ldr	x0, [sp, #144]
     ef0:	ldr	x1, [x0]
     ef4:	ldr	x0, [sp, #64]
     ef8:	ldr	x0, [x0]
     efc:	sub	x1, x1, x0
     f00:	ldr	x0, [sp, #144]
     f04:	ldr	x2, [x0, #24]
     f08:	ldr	x0, [sp, #64]
     f0c:	ldr	x0, [x0, #24]
     f10:	sub	x0, x2, x0
     f14:	cmp	x1, x0
     f18:	b.ne	f70 <gomp_map_fields_existing+0x170>  // b.any
     f1c:	ldr	x0, [sp, #48]
     f20:	add	x0, x0, #0x2
     f24:	lsl	x0, x0, #5
     f28:	ldr	x1, [sp, #72]
     f2c:	add	x2, x1, x0
     f30:	ldr	w0, [sp, #140]
     f34:	sxtb	w1, w0
     f38:	ldr	w0, [sp, #152]
     f3c:	sxtb	w0, w0
     f40:	and	w0, w1, w0
     f44:	sxtb	w0, w0
     f48:	and	w1, w0, #0xff
     f4c:	add	x0, sp, #0x50
     f50:	ldr	x5, [sp, #16]
     f54:	mov	w4, w1
     f58:	mov	x3, x2
     f5c:	mov	x2, x0
     f60:	ldr	x1, [sp, #144]
     f64:	ldr	x0, [sp, #168]
     f68:	bl	a5c <gomp_map_vars_existing>
     f6c:	b	1180 <gomp_map_fields_existing+0x380>
     f70:	ldr	x0, [sp, #48]
     f74:	lsl	x0, x0, #3
     f78:	ldr	x1, [sp, #32]
     f7c:	add	x0, x1, x0
     f80:	ldr	x0, [x0]
     f84:	cmp	x0, #0x0
     f88:	b.ne	1158 <gomp_map_fields_existing+0x358>  // b.any
     f8c:	ldr	x0, [sp, #80]
     f90:	ldr	x1, [sp, #56]
     f94:	lsl	x1, x1, #3
     f98:	sub	x1, x1, #0x8
     f9c:	ldr	x2, [sp, #40]
     fa0:	add	x1, x2, x1
     fa4:	ldr	x1, [x1]
     fa8:	cmp	x0, x1
     fac:	b.ls	1084 <gomp_map_fields_existing+0x284>  // b.plast
     fb0:	ldr	x0, [sp, #80]
     fb4:	sub	x0, x0, #0x1
     fb8:	str	x0, [sp, #80]
     fbc:	add	x0, sp, #0x50
     fc0:	mov	x1, x0
     fc4:	ldr	x0, [sp, #160]
     fc8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     fcc:	str	x0, [sp, #144]
     fd0:	ldr	x0, [sp, #80]
     fd4:	add	x0, x0, #0x1
     fd8:	str	x0, [sp, #80]
     fdc:	ldr	x0, [sp, #144]
     fe0:	cmp	x0, #0x0
     fe4:	b.eq	1084 <gomp_map_fields_existing+0x284>  // b.none
     fe8:	ldr	x0, [sp, #144]
     fec:	ldr	x1, [x0, #16]
     ff0:	ldr	x0, [sp, #64]
     ff4:	ldr	x0, [x0, #16]
     ff8:	cmp	x1, x0
     ffc:	b.ne	1084 <gomp_map_fields_existing+0x284>  // b.any
    1000:	ldr	x0, [sp, #144]
    1004:	ldr	x1, [x0]
    1008:	ldr	x0, [sp, #64]
    100c:	ldr	x0, [x0]
    1010:	sub	x1, x1, x0
    1014:	ldr	x0, [sp, #144]
    1018:	ldr	x2, [x0, #24]
    101c:	ldr	x0, [sp, #64]
    1020:	ldr	x0, [x0, #24]
    1024:	sub	x0, x2, x0
    1028:	cmp	x1, x0
    102c:	b.ne	1084 <gomp_map_fields_existing+0x284>  // b.any
    1030:	ldr	x0, [sp, #48]
    1034:	add	x0, x0, #0x2
    1038:	lsl	x0, x0, #5
    103c:	ldr	x1, [sp, #72]
    1040:	add	x2, x1, x0
    1044:	ldr	w0, [sp, #140]
    1048:	sxtb	w1, w0
    104c:	ldr	w0, [sp, #152]
    1050:	sxtb	w0, w0
    1054:	and	w0, w1, w0
    1058:	sxtb	w0, w0
    105c:	and	w1, w0, #0xff
    1060:	add	x0, sp, #0x50
    1064:	ldr	x5, [sp, #16]
    1068:	mov	w4, w1
    106c:	mov	x3, x2
    1070:	mov	x2, x0
    1074:	ldr	x1, [sp, #144]
    1078:	ldr	x0, [sp, #168]
    107c:	bl	a5c <gomp_map_vars_existing>
    1080:	b	1180 <gomp_map_fields_existing+0x380>
    1084:	ldr	x0, [sp, #88]
    1088:	add	x0, x0, #0x1
    108c:	str	x0, [sp, #88]
    1090:	add	x0, sp, #0x50
    1094:	mov	x1, x0
    1098:	ldr	x0, [sp, #160]
    109c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    10a0:	str	x0, [sp, #144]
    10a4:	ldr	x0, [sp, #88]
    10a8:	sub	x0, x0, #0x1
    10ac:	str	x0, [sp, #88]
    10b0:	ldr	x0, [sp, #144]
    10b4:	cmp	x0, #0x0
    10b8:	b.eq	1158 <gomp_map_fields_existing+0x358>  // b.none
    10bc:	ldr	x0, [sp, #144]
    10c0:	ldr	x1, [x0, #16]
    10c4:	ldr	x0, [sp, #64]
    10c8:	ldr	x0, [x0, #16]
    10cc:	cmp	x1, x0
    10d0:	b.ne	1158 <gomp_map_fields_existing+0x358>  // b.any
    10d4:	ldr	x0, [sp, #144]
    10d8:	ldr	x1, [x0]
    10dc:	ldr	x0, [sp, #64]
    10e0:	ldr	x0, [x0]
    10e4:	sub	x1, x1, x0
    10e8:	ldr	x0, [sp, #144]
    10ec:	ldr	x2, [x0, #24]
    10f0:	ldr	x0, [sp, #64]
    10f4:	ldr	x0, [x0, #24]
    10f8:	sub	x0, x2, x0
    10fc:	cmp	x1, x0
    1100:	b.ne	1158 <gomp_map_fields_existing+0x358>  // b.any
    1104:	ldr	x0, [sp, #48]
    1108:	add	x0, x0, #0x2
    110c:	lsl	x0, x0, #5
    1110:	ldr	x1, [sp, #72]
    1114:	add	x2, x1, x0
    1118:	ldr	w0, [sp, #140]
    111c:	sxtb	w1, w0
    1120:	ldr	w0, [sp, #152]
    1124:	sxtb	w0, w0
    1128:	and	w0, w1, w0
    112c:	sxtb	w0, w0
    1130:	and	w1, w0, #0xff
    1134:	add	x0, sp, #0x50
    1138:	ldr	x5, [sp, #16]
    113c:	mov	w4, w1
    1140:	mov	x3, x2
    1144:	mov	x2, x0
    1148:	ldr	x1, [sp, #144]
    114c:	ldr	x0, [sp, #168]
    1150:	bl	a5c <gomp_map_vars_existing>
    1154:	b	1180 <gomp_map_fields_existing+0x380>
    1158:	ldr	x0, [sp, #168]
    115c:	add	x0, x0, #0xa8
    1160:	bl	90 <gomp_mutex_unlock>
    1164:	ldr	x0, [sp, #80]
    1168:	mov	x1, x0
    116c:	ldr	x0, [sp, #88]
    1170:	mov	x2, x0
    1174:	adrp	x0, 0 <gomp_mutex_init>
    1178:	add	x0, x0, #0x0
    117c:	bl	0 <gomp_fatal>
    1180:	ldp	x29, x30, [sp], #176
    1184:	ret

0000000000001188 <gomp_map_val>:
    1188:	sub	sp, sp, #0x20
    118c:	str	x0, [sp, #24]
    1190:	str	x1, [sp, #16]
    1194:	str	x2, [sp, #8]
    1198:	ldr	x1, [sp, #24]
    119c:	ldr	x0, [sp, #8]
    11a0:	add	x0, x0, #0x2
    11a4:	lsl	x0, x0, #5
    11a8:	add	x0, x1, x0
    11ac:	ldr	x0, [x0]
    11b0:	cmp	x0, #0x0
    11b4:	b.eq	1214 <gomp_map_val+0x8c>  // b.none
    11b8:	ldr	x1, [sp, #24]
    11bc:	ldr	x0, [sp, #8]
    11c0:	add	x0, x0, #0x2
    11c4:	lsl	x0, x0, #5
    11c8:	add	x0, x1, x0
    11cc:	ldr	x0, [x0]
    11d0:	ldr	x0, [x0, #16]
    11d4:	ldr	x1, [x0, #16]
    11d8:	ldr	x2, [sp, #24]
    11dc:	ldr	x0, [sp, #8]
    11e0:	add	x0, x0, #0x2
    11e4:	lsl	x0, x0, #5
    11e8:	add	x0, x2, x0
    11ec:	ldr	x0, [x0]
    11f0:	ldr	x0, [x0, #24]
    11f4:	add	x1, x1, x0
    11f8:	ldr	x2, [sp, #24]
    11fc:	ldr	x0, [sp, #8]
    1200:	lsl	x0, x0, #5
    1204:	add	x0, x2, x0
    1208:	ldr	x0, [x0, #80]
    120c:	add	x0, x1, x0
    1210:	b	1344 <gomp_map_val+0x1bc>
    1214:	ldr	x1, [sp, #24]
    1218:	ldr	x0, [sp, #8]
    121c:	lsl	x0, x0, #5
    1220:	add	x0, x1, x0
    1224:	ldr	x0, [x0, #80]
    1228:	cmn	x0, #0x1
    122c:	b.ne	1248 <gomp_map_val+0xc0>  // b.any
    1230:	ldr	x0, [sp, #8]
    1234:	lsl	x0, x0, #3
    1238:	ldr	x1, [sp, #16]
    123c:	add	x0, x1, x0
    1240:	ldr	x0, [x0]
    1244:	b	1344 <gomp_map_val+0x1bc>
    1248:	ldr	x1, [sp, #24]
    124c:	ldr	x0, [sp, #8]
    1250:	lsl	x0, x0, #5
    1254:	add	x0, x1, x0
    1258:	ldr	x0, [x0, #80]
    125c:	cmn	x0, #0x2
    1260:	b.ne	126c <gomp_map_val+0xe4>  // b.any
    1264:	mov	x0, #0x0                   	// #0
    1268:	b	1344 <gomp_map_val+0x1bc>
    126c:	ldr	x1, [sp, #24]
    1270:	ldr	x0, [sp, #8]
    1274:	lsl	x0, x0, #5
    1278:	add	x0, x1, x0
    127c:	ldr	x0, [x0, #80]
    1280:	cmn	x0, #0x3
    1284:	b.ne	1324 <gomp_map_val+0x19c>  // b.any
    1288:	ldr	x0, [sp, #8]
    128c:	add	x0, x0, #0x1
    1290:	ldr	x1, [sp, #24]
    1294:	add	x0, x0, #0x2
    1298:	lsl	x0, x0, #5
    129c:	add	x0, x1, x0
    12a0:	ldr	x0, [x0]
    12a4:	ldr	x0, [x0, #16]
    12a8:	ldr	x1, [x0, #16]
    12ac:	ldr	x0, [sp, #8]
    12b0:	add	x0, x0, #0x1
    12b4:	ldr	x2, [sp, #24]
    12b8:	add	x0, x0, #0x2
    12bc:	lsl	x0, x0, #5
    12c0:	add	x0, x2, x0
    12c4:	ldr	x0, [x0]
    12c8:	ldr	x0, [x0, #24]
    12cc:	add	x1, x1, x0
    12d0:	ldr	x0, [sp, #8]
    12d4:	add	x0, x0, #0x1
    12d8:	ldr	x2, [sp, #24]
    12dc:	lsl	x0, x0, #5
    12e0:	add	x0, x2, x0
    12e4:	ldr	x0, [x0, #80]
    12e8:	add	x0, x1, x0
    12ec:	ldr	x1, [sp, #8]
    12f0:	lsl	x1, x1, #3
    12f4:	ldr	x2, [sp, #16]
    12f8:	add	x1, x2, x1
    12fc:	ldr	x1, [x1]
    1300:	add	x0, x0, x1
    1304:	ldr	x1, [sp, #8]
    1308:	add	x1, x1, #0x1
    130c:	lsl	x1, x1, #3
    1310:	ldr	x2, [sp, #16]
    1314:	add	x1, x2, x1
    1318:	ldr	x1, [x1]
    131c:	sub	x0, x0, x1
    1320:	b	1344 <gomp_map_val+0x1bc>
    1324:	ldr	x0, [sp, #24]
    1328:	ldr	x1, [x0, #16]
    132c:	ldr	x2, [sp, #24]
    1330:	ldr	x0, [sp, #8]
    1334:	lsl	x0, x0, #5
    1338:	add	x0, x2, x0
    133c:	ldr	x0, [x0, #80]
    1340:	add	x0, x1, x0
    1344:	add	sp, sp, #0x20
    1348:	ret

000000000000134c <gomp_map_vars>:
    134c:	stp	x29, x30, [sp, #-496]!
    1350:	mov	x29, sp
    1354:	str	x0, [x29, #72]
    1358:	str	x1, [x29, #64]
    135c:	str	x2, [x29, #56]
    1360:	str	x3, [x29, #48]
    1364:	str	x4, [x29, #40]
    1368:	str	x5, [x29, #32]
    136c:	strb	w6, [x29, #31]
    1370:	str	w7, [x29, #24]
    1374:	str	xzr, [x29, #464]
    1378:	strb	wzr, [x29, #463]
    137c:	ldrb	w0, [x29, #31]
    1380:	cmp	w0, #0x0
    1384:	b.eq	1390 <gomp_map_vars+0x44>  // b.none
    1388:	mov	w0, #0x8                   	// #8
    138c:	b	1394 <gomp_map_vars+0x48>
    1390:	mov	w0, #0x3                   	// #3
    1394:	str	w0, [x29, #372]
    1398:	ldrb	w0, [x29, #31]
    139c:	cmp	w0, #0x0
    13a0:	b.eq	13ac <gomp_map_vars+0x60>  // b.none
    13a4:	mov	w0, #0xff                  	// #255
    13a8:	b	13b0 <gomp_map_vars+0x64>
    13ac:	mov	w0, #0x7                   	// #7
    13b0:	str	w0, [x29, #368]
    13b4:	ldr	x0, [x29, #72]
    13b8:	add	x0, x0, #0xa0
    13bc:	str	x0, [x29, #360]
    13c0:	ldr	x0, [x29, #64]
    13c4:	add	x0, x0, #0x2
    13c8:	lsl	x0, x0, #5
    13cc:	bl	0 <gomp_malloc>
    13d0:	str	x0, [x29, #448]
    13d4:	ldr	x0, [x29, #448]
    13d8:	ldr	x1, [x29, #64]
    13dc:	str	x1, [x0, #48]
    13e0:	ldr	w0, [x29, #24]
    13e4:	cmp	w0, #0x3
    13e8:	cset	w0, ne  // ne = any
    13ec:	and	w0, w0, #0xff
    13f0:	and	x1, x0, #0xff
    13f4:	ldr	x0, [x29, #448]
    13f8:	str	x1, [x0]
    13fc:	ldr	x0, [x29, #448]
    1400:	ldr	x1, [x29, #72]
    1404:	str	x1, [x0, #56]
    1408:	str	xzr, [x29, #440]
    140c:	ldr	x0, [x29, #64]
    1410:	cmp	x0, #0x0
    1414:	b.ne	1430 <gomp_map_vars+0xe4>  // b.any
    1418:	ldr	x0, [x29, #448]
    141c:	str	xzr, [x0, #16]
    1420:	ldr	x0, [x29, #448]
    1424:	str	xzr, [x0, #24]
    1428:	ldr	x0, [x29, #448]
    142c:	b	2e50 <gomp_map_vars+0x1b04>
    1430:	mov	x0, #0x8                   	// #8
    1434:	str	x0, [x29, #480]
    1438:	str	xzr, [x29, #472]
    143c:	str	xzr, [x29, #112]
    1440:	mov	x0, #0xffffffffffffffff    	// #-1
    1444:	str	x0, [x29, #120]
    1448:	str	xzr, [x29, #128]
    144c:	str	xzr, [x29, #96]
    1450:	ldr	x0, [x29, #64]
    1454:	cmp	x0, #0x1
    1458:	b.hi	1468 <gomp_map_vars+0x11c>  // b.pmore
    145c:	ldr	w0, [x29, #24]
    1460:	cmp	w0, #0x1
    1464:	b.ne	14a4 <gomp_map_vars+0x158>  // b.any
    1468:	ldr	x0, [x29, #64]
    146c:	add	x0, x0, #0x1
    1470:	lsl	x0, x0, #4
    1474:	str	x0, [x29, #352]
    1478:	ldr	x0, [x29, #352]
    147c:	add	x0, x0, #0xf
    1480:	lsr	x0, x0, #4
    1484:	lsl	x0, x0, #4
    1488:	sub	sp, sp, x0
    148c:	mov	x0, sp
    1490:	add	x0, x0, #0xf
    1494:	lsr	x0, x0, #4
    1498:	lsl	x0, x0, #4
    149c:	str	x0, [x29, #112]
    14a0:	str	xzr, [x29, #120]
    14a4:	ldr	w0, [x29, #24]
    14a8:	cmp	w0, #0x1
    14ac:	b.ne	1504 <gomp_map_vars+0x1b8>  // b.any
    14b0:	mov	x0, #0x20                  	// #32
    14b4:	str	x0, [x29, #344]
    14b8:	ldr	x0, [x29, #344]
    14bc:	str	x0, [x29, #480]
    14c0:	ldr	x0, [x29, #64]
    14c4:	lsl	x0, x0, #3
    14c8:	str	x0, [x29, #472]
    14cc:	mov	x0, #0x1                   	// #1
    14d0:	str	x0, [x29, #120]
    14d4:	ldr	x0, [x29, #64]
    14d8:	cmp	x0, #0x1
    14dc:	b.ls	14e8 <gomp_map_vars+0x19c>  // b.plast
    14e0:	mov	x0, #0x2                   	// #2
    14e4:	b	14ec <gomp_map_vars+0x1a0>
    14e8:	mov	x0, #0x1                   	// #1
    14ec:	str	x0, [x29, #128]
    14f0:	ldr	x0, [x29, #112]
    14f4:	str	xzr, [x0]
    14f8:	ldr	x0, [x29, #112]
    14fc:	ldr	x1, [x29, #472]
    1500:	str	x1, [x0, #8]
    1504:	ldr	x0, [x29, #72]
    1508:	add	x0, x0, #0xa8
    150c:	bl	1c <gomp_mutex_lock>
    1510:	ldr	x0, [x29, #72]
    1514:	ldr	w0, [x0, #172]
    1518:	cmp	w0, #0x2
    151c:	b.ne	153c <gomp_map_vars+0x1f0>  // b.any
    1520:	ldr	x0, [x29, #72]
    1524:	add	x0, x0, #0xa8
    1528:	bl	90 <gomp_mutex_unlock>
    152c:	ldr	x0, [x29, #448]
    1530:	bl	0 <free>
    1534:	mov	x0, #0x0                   	// #0
    1538:	b	2e50 <gomp_map_vars+0x1b04>
    153c:	str	xzr, [x29, #488]
    1540:	b	1d54 <gomp_map_vars+0xa08>
    1544:	ldr	x0, [x29, #488]
    1548:	mov	w2, w0
    154c:	ldr	x1, [x29, #32]
    1550:	ldrb	w0, [x29, #31]
    1554:	bl	c64 <get_kind>
    1558:	str	w0, [x29, #252]
    155c:	ldr	x0, [x29, #488]
    1560:	lsl	x0, x0, #3
    1564:	ldr	x1, [x29, #56]
    1568:	add	x0, x1, x0
    156c:	ldr	x0, [x0]
    1570:	cmp	x0, #0x0
    1574:	b.eq	158c <gomp_map_vars+0x240>  // b.none
    1578:	ldr	w1, [x29, #252]
    157c:	ldr	w0, [x29, #368]
    1580:	and	w0, w1, w0
    1584:	cmp	w0, #0xd
    1588:	b.ne	15c0 <gomp_map_vars+0x274>  // b.any
    158c:	ldr	x1, [x29, #448]
    1590:	ldr	x0, [x29, #488]
    1594:	add	x0, x0, #0x2
    1598:	lsl	x0, x0, #5
    159c:	add	x0, x1, x0
    15a0:	str	xzr, [x0]
    15a4:	ldr	x1, [x29, #448]
    15a8:	ldr	x0, [x29, #488]
    15ac:	lsl	x0, x0, #5
    15b0:	add	x0, x1, x0
    15b4:	mov	x1, #0xffffffffffffffff    	// #-1
    15b8:	str	x1, [x0, #80]
    15bc:	b	1d48 <gomp_map_vars+0x9fc>
    15c0:	ldr	w1, [x29, #252]
    15c4:	ldr	w0, [x29, #368]
    15c8:	and	w0, w1, w0
    15cc:	cmp	w0, #0xe
    15d0:	b.ne	16ac <gomp_map_vars+0x360>  // b.any
    15d4:	ldr	x0, [x29, #488]
    15d8:	lsl	x0, x0, #3
    15dc:	ldr	x1, [x29, #56]
    15e0:	add	x0, x1, x0
    15e4:	ldr	x0, [x0]
    15e8:	str	x0, [x29, #136]
    15ec:	ldr	x0, [x29, #136]
    15f0:	str	x0, [x29, #144]
    15f4:	add	x0, x29, #0x88
    15f8:	mov	x1, x0
    15fc:	ldr	x0, [x29, #360]
    1600:	bl	3ec <gomp_map_lookup>
    1604:	str	x0, [x29, #192]
    1608:	ldr	x0, [x29, #192]
    160c:	cmp	x0, #0x0
    1610:	b.ne	162c <gomp_map_vars+0x2e0>  // b.any
    1614:	ldr	x0, [x29, #72]
    1618:	add	x0, x0, #0xa8
    161c:	bl	90 <gomp_mutex_unlock>
    1620:	adrp	x0, 0 <gomp_mutex_init>
    1624:	add	x0, x0, #0x0
    1628:	bl	0 <gomp_fatal>
    162c:	ldr	x1, [x29, #136]
    1630:	ldr	x0, [x29, #192]
    1634:	ldr	x0, [x0]
    1638:	sub	x0, x1, x0
    163c:	str	x0, [x29, #136]
    1640:	ldr	x0, [x29, #192]
    1644:	ldr	x0, [x0, #16]
    1648:	ldr	x1, [x0, #16]
    164c:	ldr	x0, [x29, #192]
    1650:	ldr	x0, [x0, #24]
    1654:	add	x1, x1, x0
    1658:	ldr	x0, [x29, #136]
    165c:	add	x2, x1, x0
    1660:	ldr	x0, [x29, #488]
    1664:	lsl	x0, x0, #3
    1668:	ldr	x1, [x29, #56]
    166c:	add	x0, x1, x0
    1670:	mov	x1, x2
    1674:	str	x1, [x0]
    1678:	ldr	x1, [x29, #448]
    167c:	ldr	x0, [x29, #488]
    1680:	add	x0, x0, #0x2
    1684:	lsl	x0, x0, #5
    1688:	add	x0, x1, x0
    168c:	str	xzr, [x0]
    1690:	ldr	x1, [x29, #448]
    1694:	ldr	x0, [x29, #488]
    1698:	lsl	x0, x0, #5
    169c:	add	x0, x1, x0
    16a0:	mov	x1, #0xffffffffffffffff    	// #-1
    16a4:	str	x1, [x0, #80]
    16a8:	b	1d48 <gomp_map_vars+0x9fc>
    16ac:	ldr	w1, [x29, #252]
    16b0:	ldr	w0, [x29, #368]
    16b4:	and	w0, w1, w0
    16b8:	cmp	w0, #0x1c
    16bc:	b.ne	1954 <gomp_map_vars+0x608>  // b.any
    16c0:	ldr	x0, [x29, #488]
    16c4:	add	x0, x0, #0x1
    16c8:	str	x0, [x29, #224]
    16cc:	ldr	x0, [x29, #488]
    16d0:	lsl	x0, x0, #3
    16d4:	ldr	x1, [x29, #40]
    16d8:	add	x0, x1, x0
    16dc:	ldr	x0, [x0]
    16e0:	ldr	x1, [x29, #488]
    16e4:	add	x0, x1, x0
    16e8:	str	x0, [x29, #216]
    16ec:	ldr	x0, [x29, #488]
    16f0:	lsl	x0, x0, #3
    16f4:	ldr	x1, [x29, #56]
    16f8:	add	x0, x1, x0
    16fc:	ldr	x0, [x0]
    1700:	str	x0, [x29, #136]
    1704:	ldr	x0, [x29, #216]
    1708:	lsl	x0, x0, #3
    170c:	ldr	x1, [x29, #56]
    1710:	add	x0, x1, x0
    1714:	ldr	x0, [x0]
    1718:	mov	x2, x0
    171c:	ldr	x0, [x29, #216]
    1720:	lsl	x0, x0, #3
    1724:	ldr	x1, [x29, #40]
    1728:	add	x0, x1, x0
    172c:	ldr	x0, [x0]
    1730:	add	x0, x2, x0
    1734:	str	x0, [x29, #144]
    1738:	ldr	x1, [x29, #448]
    173c:	ldr	x0, [x29, #488]
    1740:	add	x0, x0, #0x2
    1744:	lsl	x0, x0, #5
    1748:	add	x0, x1, x0
    174c:	str	xzr, [x0]
    1750:	ldr	x1, [x29, #448]
    1754:	ldr	x0, [x29, #488]
    1758:	lsl	x0, x0, #5
    175c:	add	x0, x1, x0
    1760:	mov	x1, #0xfffffffffffffffd    	// #-3
    1764:	str	x1, [x0, #80]
    1768:	add	x0, x29, #0x88
    176c:	mov	x1, x0
    1770:	ldr	x0, [x29, #360]
    1774:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1778:	str	x0, [x29, #208]
    177c:	ldr	x0, [x29, #208]
    1780:	cmp	x0, #0x0
    1784:	b.ne	18f8 <gomp_map_vars+0x5ac>  // b.any
    1788:	ldr	w0, [x29, #372]
    178c:	ldr	w1, [x29, #252]
    1790:	asr	w0, w1, w0
    1794:	mov	x1, #0x1                   	// #1
    1798:	lsl	x0, x1, x0
    179c:	str	x0, [x29, #200]
    17a0:	ldr	x1, [x29, #480]
    17a4:	ldr	x0, [x29, #200]
    17a8:	cmp	x1, x0
    17ac:	b.cs	17b8 <gomp_map_vars+0x46c>  // b.hs, b.nlast
    17b0:	ldr	x0, [x29, #200]
    17b4:	str	x0, [x29, #480]
    17b8:	ldr	x0, [x29, #136]
    17bc:	ldr	x1, [x29, #224]
    17c0:	lsl	x1, x1, #3
    17c4:	ldr	x2, [x29, #56]
    17c8:	add	x1, x2, x1
    17cc:	ldr	x1, [x1]
    17d0:	sub	x0, x0, x1
    17d4:	ldr	x1, [x29, #472]
    17d8:	add	x0, x1, x0
    17dc:	str	x0, [x29, #472]
    17e0:	ldr	x1, [x29, #472]
    17e4:	ldr	x0, [x29, #200]
    17e8:	add	x0, x1, x0
    17ec:	sub	x1, x0, #0x1
    17f0:	ldr	x0, [x29, #200]
    17f4:	neg	x0, x0
    17f8:	and	x0, x1, x0
    17fc:	str	x0, [x29, #472]
    1800:	ldr	x1, [x29, #144]
    1804:	ldr	x0, [x29, #136]
    1808:	sub	x0, x1, x0
    180c:	ldr	x1, [x29, #472]
    1810:	add	x0, x1, x0
    1814:	str	x0, [x29, #472]
    1818:	ldr	x1, [x29, #216]
    181c:	ldr	x0, [x29, #488]
    1820:	sub	x0, x1, x0
    1824:	ldr	x1, [x29, #464]
    1828:	add	x0, x1, x0
    182c:	str	x0, [x29, #464]
    1830:	ldr	x0, [x29, #224]
    1834:	str	x0, [x29, #488]
    1838:	b	18d8 <gomp_map_vars+0x58c>
    183c:	ldr	x1, [x29, #448]
    1840:	ldr	x0, [x29, #488]
    1844:	add	x0, x0, #0x2
    1848:	lsl	x0, x0, #5
    184c:	add	x0, x1, x0
    1850:	str	xzr, [x0]
    1854:	ldr	x0, [x29, #488]
    1858:	mov	w2, w0
    185c:	ldr	x1, [x29, #32]
    1860:	ldrb	w0, [x29, #31]
    1864:	bl	c64 <get_kind>
    1868:	mov	w1, w0
    186c:	ldr	w0, [x29, #368]
    1870:	and	w0, w1, w0
    1874:	bl	790 <gomp_to_device_kind_p>
    1878:	and	w0, w0, #0xff
    187c:	cmp	w0, #0x0
    1880:	b.eq	18cc <gomp_map_vars+0x580>  // b.none
    1884:	ldr	x0, [x29, #144]
    1888:	ldr	x1, [x29, #472]
    188c:	sub	x0, x1, x0
    1890:	ldr	x1, [x29, #488]
    1894:	lsl	x1, x1, #3
    1898:	ldr	x2, [x29, #56]
    189c:	add	x1, x2, x1
    18a0:	ldr	x1, [x1]
    18a4:	add	x3, x0, x1
    18a8:	ldr	x0, [x29, #488]
    18ac:	lsl	x0, x0, #3
    18b0:	ldr	x1, [x29, #40]
    18b4:	add	x0, x1, x0
    18b8:	ldr	x1, [x0]
    18bc:	add	x0, x29, #0x60
    18c0:	mov	x2, x1
    18c4:	mov	x1, x3
    18c8:	bl	5f4 <gomp_coalesce_buf_add>
    18cc:	ldr	x0, [x29, #488]
    18d0:	add	x0, x0, #0x1
    18d4:	str	x0, [x29, #488]
    18d8:	ldr	x1, [x29, #488]
    18dc:	ldr	x0, [x29, #216]
    18e0:	cmp	x1, x0
    18e4:	b.ls	183c <gomp_map_vars+0x4f0>  // b.plast
    18e8:	ldr	x0, [x29, #488]
    18ec:	sub	x0, x0, #0x1
    18f0:	str	x0, [x29, #488]
    18f4:	b	1d48 <gomp_map_vars+0x9fc>
    18f8:	ldr	x0, [x29, #224]
    18fc:	str	x0, [x29, #488]
    1900:	b	1934 <gomp_map_vars+0x5e8>
    1904:	mov	x7, #0x0                   	// #0
    1908:	ldr	x6, [x29, #32]
    190c:	ldr	x5, [x29, #40]
    1910:	ldr	x4, [x29, #56]
    1914:	ldr	x3, [x29, #488]
    1918:	ldr	x2, [x29, #224]
    191c:	ldr	x1, [x29, #208]
    1920:	ldr	x0, [x29, #448]
    1924:	bl	e00 <gomp_map_fields_existing>
    1928:	ldr	x0, [x29, #488]
    192c:	add	x0, x0, #0x1
    1930:	str	x0, [x29, #488]
    1934:	ldr	x1, [x29, #488]
    1938:	ldr	x0, [x29, #216]
    193c:	cmp	x1, x0
    1940:	b.ls	1904 <gomp_map_vars+0x5b8>  // b.plast
    1944:	ldr	x0, [x29, #488]
    1948:	sub	x0, x0, #0x1
    194c:	str	x0, [x29, #488]
    1950:	b	1d48 <gomp_map_vars+0x9fc>
    1954:	ldr	w1, [x29, #252]
    1958:	ldr	w0, [x29, #368]
    195c:	and	w0, w1, w0
    1960:	cmp	w0, #0x1d
    1964:	b.ne	19a4 <gomp_map_vars+0x658>  // b.any
    1968:	ldr	x1, [x29, #448]
    196c:	ldr	x0, [x29, #488]
    1970:	add	x0, x0, #0x2
    1974:	lsl	x0, x0, #5
    1978:	add	x0, x1, x0
    197c:	str	xzr, [x0]
    1980:	ldr	x1, [x29, #448]
    1984:	ldr	x0, [x29, #488]
    1988:	lsl	x0, x0, #5
    198c:	add	x0, x1, x0
    1990:	mov	x1, #0xfffffffffffffffe    	// #-2
    1994:	str	x1, [x0, #80]
    1998:	mov	w0, #0x1                   	// #1
    199c:	strb	w0, [x29, #463]
    19a0:	b	1d48 <gomp_map_vars+0x9fc>
    19a4:	ldr	x0, [x29, #488]
    19a8:	lsl	x0, x0, #3
    19ac:	ldr	x1, [x29, #56]
    19b0:	add	x0, x1, x0
    19b4:	ldr	x0, [x0]
    19b8:	str	x0, [x29, #136]
    19bc:	ldr	w1, [x29, #252]
    19c0:	ldr	w0, [x29, #368]
    19c4:	and	w0, w1, w0
    19c8:	cmp	w0, #0x4
    19cc:	b.eq	19f4 <gomp_map_vars+0x6a8>  // b.none
    19d0:	ldr	x1, [x29, #136]
    19d4:	ldr	x0, [x29, #488]
    19d8:	lsl	x0, x0, #3
    19dc:	ldr	x2, [x29, #40]
    19e0:	add	x0, x2, x0
    19e4:	ldr	x0, [x0]
    19e8:	add	x0, x1, x0
    19ec:	str	x0, [x29, #144]
    19f0:	b	1a00 <gomp_map_vars+0x6b4>
    19f4:	ldr	x0, [x29, #136]
    19f8:	add	x0, x0, #0x8
    19fc:	str	x0, [x29, #144]
    1a00:	ldr	w1, [x29, #252]
    1a04:	ldr	w0, [x29, #368]
    1a08:	and	w0, w1, w0
    1a0c:	cmp	w0, #0xc
    1a10:	b.ne	1abc <gomp_map_vars+0x770>  // b.any
    1a14:	ldr	x1, [x29, #448]
    1a18:	ldr	x0, [x29, #488]
    1a1c:	add	x0, x0, #0x2
    1a20:	lsl	x0, x0, #5
    1a24:	add	x0, x1, x0
    1a28:	str	xzr, [x0]
    1a2c:	ldr	w0, [x29, #372]
    1a30:	ldr	w1, [x29, #252]
    1a34:	asr	w0, w1, w0
    1a38:	mov	x1, #0x1                   	// #1
    1a3c:	lsl	x0, x1, x0
    1a40:	str	x0, [x29, #232]
    1a44:	ldr	x1, [x29, #480]
    1a48:	ldr	x0, [x29, #232]
    1a4c:	cmp	x1, x0
    1a50:	b.cs	1a5c <gomp_map_vars+0x710>  // b.hs, b.nlast
    1a54:	ldr	x0, [x29, #232]
    1a58:	str	x0, [x29, #480]
    1a5c:	ldr	x1, [x29, #472]
    1a60:	ldr	x0, [x29, #232]
    1a64:	add	x0, x1, x0
    1a68:	sub	x1, x0, #0x1
    1a6c:	ldr	x0, [x29, #232]
    1a70:	neg	x0, x0
    1a74:	and	x0, x1, x0
    1a78:	str	x0, [x29, #472]
    1a7c:	ldr	x1, [x29, #144]
    1a80:	ldr	x0, [x29, #136]
    1a84:	sub	x1, x1, x0
    1a88:	add	x0, x29, #0x60
    1a8c:	mov	x2, x1
    1a90:	ldr	x1, [x29, #472]
    1a94:	bl	5f4 <gomp_coalesce_buf_add>
    1a98:	ldr	x1, [x29, #144]
    1a9c:	ldr	x0, [x29, #136]
    1aa0:	sub	x0, x1, x0
    1aa4:	ldr	x1, [x29, #472]
    1aa8:	add	x0, x1, x0
    1aac:	str	x0, [x29, #472]
    1ab0:	mov	w0, #0x1                   	// #1
    1ab4:	strb	w0, [x29, #463]
    1ab8:	b	1d48 <gomp_map_vars+0x9fc>
    1abc:	ldr	w1, [x29, #252]
    1ac0:	ldr	w0, [x29, #368]
    1ac4:	and	w0, w1, w0
    1ac8:	cmp	w0, #0xf
    1acc:	b.ne	1b24 <gomp_map_vars+0x7d8>  // b.any
    1ad0:	add	x0, x29, #0x88
    1ad4:	mov	x1, x0
    1ad8:	ldr	x0, [x29, #360]
    1adc:	bl	4d0 <gomp_map_0len_lookup>
    1ae0:	str	x0, [x29, #432]
    1ae4:	ldr	x0, [x29, #432]
    1ae8:	cmp	x0, #0x0
    1aec:	b.ne	1b38 <gomp_map_vars+0x7ec>  // b.any
    1af0:	ldr	x1, [x29, #448]
    1af4:	ldr	x0, [x29, #488]
    1af8:	add	x0, x0, #0x2
    1afc:	lsl	x0, x0, #5
    1b00:	add	x0, x1, x0
    1b04:	str	xzr, [x0]
    1b08:	ldr	x1, [x29, #448]
    1b0c:	ldr	x0, [x29, #488]
    1b10:	lsl	x0, x0, #5
    1b14:	add	x0, x1, x0
    1b18:	mov	x1, #0xfffffffffffffffe    	// #-2
    1b1c:	str	x1, [x0, #80]
    1b20:	b	1d48 <gomp_map_vars+0x9fc>
    1b24:	add	x0, x29, #0x88
    1b28:	mov	x1, x0
    1b2c:	ldr	x0, [x29, #360]
    1b30:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    1b34:	str	x0, [x29, #432]
    1b38:	ldr	x0, [x29, #432]
    1b3c:	cmp	x0, #0x0
    1b40:	b.eq	1ba8 <gomp_map_vars+0x85c>  // b.none
    1b44:	ldr	x0, [x29, #432]
    1b48:	ldr	x0, [x0, #32]
    1b4c:	cmn	x0, #0x2
    1b50:	b.eq	1ba8 <gomp_map_vars+0x85c>  // b.none
    1b54:	ldr	x0, [x29, #488]
    1b58:	add	x0, x0, #0x2
    1b5c:	lsl	x0, x0, #5
    1b60:	ldr	x1, [x29, #448]
    1b64:	add	x2, x1, x0
    1b68:	ldr	w0, [x29, #252]
    1b6c:	sxtb	w1, w0
    1b70:	ldr	w0, [x29, #368]
    1b74:	sxtb	w0, w0
    1b78:	and	w0, w1, w0
    1b7c:	sxtb	w0, w0
    1b80:	and	w1, w0, #0xff
    1b84:	add	x0, x29, #0x88
    1b88:	mov	x5, #0x0                   	// #0
    1b8c:	mov	w4, w1
    1b90:	mov	x3, x2
    1b94:	mov	x2, x0
    1b98:	ldr	x1, [x29, #432]
    1b9c:	ldr	x0, [x29, #72]
    1ba0:	bl	a5c <gomp_map_vars_existing>
    1ba4:	b	1d48 <gomp_map_vars+0x9fc>
    1ba8:	ldr	x1, [x29, #448]
    1bac:	ldr	x0, [x29, #488]
    1bb0:	add	x0, x0, #0x2
    1bb4:	lsl	x0, x0, #5
    1bb8:	add	x0, x1, x0
    1bbc:	str	xzr, [x0]
    1bc0:	ldr	w0, [x29, #372]
    1bc4:	ldr	w1, [x29, #252]
    1bc8:	asr	w0, w1, w0
    1bcc:	mov	x1, #0x1                   	// #1
    1bd0:	lsl	x0, x1, x0
    1bd4:	str	x0, [x29, #240]
    1bd8:	ldr	x0, [x29, #464]
    1bdc:	add	x0, x0, #0x1
    1be0:	str	x0, [x29, #464]
    1be4:	ldr	x1, [x29, #480]
    1be8:	ldr	x0, [x29, #240]
    1bec:	cmp	x1, x0
    1bf0:	b.cs	1bfc <gomp_map_vars+0x8b0>  // b.hs, b.nlast
    1bf4:	ldr	x0, [x29, #240]
    1bf8:	str	x0, [x29, #480]
    1bfc:	ldr	x1, [x29, #472]
    1c00:	ldr	x0, [x29, #240]
    1c04:	add	x0, x1, x0
    1c08:	sub	x1, x0, #0x1
    1c0c:	ldr	x0, [x29, #240]
    1c10:	neg	x0, x0
    1c14:	and	x0, x1, x0
    1c18:	str	x0, [x29, #472]
    1c1c:	ldr	w1, [x29, #252]
    1c20:	ldr	w0, [x29, #368]
    1c24:	and	w0, w1, w0
    1c28:	bl	790 <gomp_to_device_kind_p>
    1c2c:	and	w0, w0, #0xff
    1c30:	cmp	w0, #0x0
    1c34:	b.eq	1c54 <gomp_map_vars+0x908>  // b.none
    1c38:	ldr	x1, [x29, #144]
    1c3c:	ldr	x0, [x29, #136]
    1c40:	sub	x1, x1, x0
    1c44:	add	x0, x29, #0x60
    1c48:	mov	x2, x1
    1c4c:	ldr	x1, [x29, #472]
    1c50:	bl	5f4 <gomp_coalesce_buf_add>
    1c54:	ldr	x1, [x29, #144]
    1c58:	ldr	x0, [x29, #136]
    1c5c:	sub	x0, x1, x0
    1c60:	ldr	x1, [x29, #472]
    1c64:	add	x0, x1, x0
    1c68:	str	x0, [x29, #472]
    1c6c:	ldr	w1, [x29, #252]
    1c70:	ldr	w0, [x29, #368]
    1c74:	and	w0, w1, w0
    1c78:	cmp	w0, #0x5
    1c7c:	b.ne	1d48 <gomp_map_vars+0x9fc>  // b.any
    1c80:	ldr	x0, [x29, #488]
    1c84:	add	x0, x0, #0x1
    1c88:	str	x0, [x29, #424]
    1c8c:	b	1d30 <gomp_map_vars+0x9e4>
    1c90:	ldr	x0, [x29, #424]
    1c94:	mov	w2, w0
    1c98:	ldr	x1, [x29, #32]
    1c9c:	ldrb	w0, [x29, #31]
    1ca0:	bl	c64 <get_kind>
    1ca4:	mov	w1, w0
    1ca8:	ldr	w0, [x29, #368]
    1cac:	and	w0, w1, w0
    1cb0:	cmp	w0, #0x4
    1cb4:	b.ne	1d44 <gomp_map_vars+0x9f8>  // b.any
    1cb8:	ldr	x0, [x29, #424]
    1cbc:	lsl	x0, x0, #3
    1cc0:	ldr	x1, [x29, #56]
    1cc4:	add	x0, x1, x0
    1cc8:	ldr	x0, [x0]
    1ccc:	mov	x1, x0
    1cd0:	ldr	x0, [x29, #136]
    1cd4:	cmp	x1, x0
    1cd8:	b.cc	1d48 <gomp_map_vars+0x9fc>  // b.lo, b.ul, b.last
    1cdc:	ldr	x0, [x29, #424]
    1ce0:	lsl	x0, x0, #3
    1ce4:	ldr	x1, [x29, #56]
    1ce8:	add	x0, x1, x0
    1cec:	ldr	x0, [x0]
    1cf0:	add	x1, x0, #0x8
    1cf4:	ldr	x0, [x29, #144]
    1cf8:	cmp	x1, x0
    1cfc:	b.hi	1d48 <gomp_map_vars+0x9fc>  // b.pmore
    1d00:	ldr	x1, [x29, #448]
    1d04:	ldr	x0, [x29, #424]
    1d08:	add	x0, x0, #0x2
    1d0c:	lsl	x0, x0, #5
    1d10:	add	x0, x1, x0
    1d14:	str	xzr, [x0]
    1d18:	ldr	x0, [x29, #488]
    1d1c:	add	x0, x0, #0x1
    1d20:	str	x0, [x29, #488]
    1d24:	ldr	x0, [x29, #424]
    1d28:	add	x0, x0, #0x1
    1d2c:	str	x0, [x29, #424]
    1d30:	ldr	x1, [x29, #424]
    1d34:	ldr	x0, [x29, #64]
    1d38:	cmp	x1, x0
    1d3c:	b.cc	1c90 <gomp_map_vars+0x944>  // b.lo, b.ul, b.last
    1d40:	b	1d48 <gomp_map_vars+0x9fc>
    1d44:	nop
    1d48:	ldr	x0, [x29, #488]
    1d4c:	add	x0, x0, #0x1
    1d50:	str	x0, [x29, #488]
    1d54:	ldr	x1, [x29, #488]
    1d58:	ldr	x0, [x29, #64]
    1d5c:	cmp	x1, x0
    1d60:	b.cc	1544 <gomp_map_vars+0x1f8>  // b.lo, b.ul, b.last
    1d64:	ldr	x0, [x29, #48]
    1d68:	cmp	x0, #0x0
    1d6c:	b.eq	1dd8 <gomp_map_vars+0xa8c>  // b.none
    1d70:	ldr	x0, [x29, #64]
    1d74:	cmp	x0, #0x1
    1d78:	b.eq	1d94 <gomp_map_vars+0xa48>  // b.none
    1d7c:	ldr	x0, [x29, #72]
    1d80:	add	x0, x0, #0xa8
    1d84:	bl	90 <gomp_mutex_unlock>
    1d88:	adrp	x0, 0 <gomp_mutex_init>
    1d8c:	add	x0, x0, #0x0
    1d90:	bl	0 <gomp_fatal>
    1d94:	ldr	x0, [x29, #48]
    1d98:	ldr	x1, [x0]
    1d9c:	ldr	x0, [x29, #448]
    1da0:	str	x1, [x0, #32]
    1da4:	ldr	x0, [x29, #448]
    1da8:	ldr	x0, [x0, #32]
    1dac:	mov	x1, x0
    1db0:	ldr	x0, [x29, #448]
    1db4:	str	x1, [x0, #16]
    1db8:	ldr	x0, [x29, #448]
    1dbc:	ldr	x1, [x0, #16]
    1dc0:	ldr	x0, [x29, #40]
    1dc4:	ldr	x0, [x0]
    1dc8:	add	x1, x1, x0
    1dcc:	ldr	x0, [x29, #448]
    1dd0:	str	x1, [x0, #24]
    1dd4:	b	1f34 <gomp_map_vars+0xbe8>
    1dd8:	ldr	x0, [x29, #464]
    1ddc:	cmp	x0, #0x0
    1de0:	b.ne	1df0 <gomp_map_vars+0xaa4>  // b.any
    1de4:	ldr	w0, [x29, #24]
    1de8:	cmp	w0, #0x1
    1dec:	b.ne	1f14 <gomp_map_vars+0xbc8>  // b.any
    1df0:	ldr	x0, [x29, #72]
    1df4:	ldr	x2, [x0, #96]
    1df8:	ldr	x0, [x29, #72]
    1dfc:	ldr	w3, [x0, #12]
    1e00:	ldr	x1, [x29, #472]
    1e04:	ldr	x0, [x29, #480]
    1e08:	add	x0, x1, x0
    1e0c:	sub	x0, x0, #0x1
    1e10:	mov	x1, x0
    1e14:	mov	w0, w3
    1e18:	blr	x2
    1e1c:	mov	x1, x0
    1e20:	ldr	x0, [x29, #448]
    1e24:	str	x1, [x0, #32]
    1e28:	ldr	x0, [x29, #448]
    1e2c:	ldr	x0, [x0, #32]
    1e30:	cmp	x0, #0x0
    1e34:	b.ne	1e50 <gomp_map_vars+0xb04>  // b.any
    1e38:	ldr	x0, [x29, #72]
    1e3c:	add	x0, x0, #0xa8
    1e40:	bl	90 <gomp_mutex_unlock>
    1e44:	adrp	x0, 0 <gomp_mutex_init>
    1e48:	add	x0, x0, #0x0
    1e4c:	bl	0 <gomp_fatal>
    1e50:	ldr	x0, [x29, #448]
    1e54:	ldr	x0, [x0, #32]
    1e58:	mov	x1, x0
    1e5c:	ldr	x0, [x29, #448]
    1e60:	str	x1, [x0, #16]
    1e64:	ldr	x0, [x29, #448]
    1e68:	ldr	x1, [x0, #16]
    1e6c:	ldr	x0, [x29, #480]
    1e70:	add	x0, x1, x0
    1e74:	sub	x1, x0, #0x1
    1e78:	ldr	x0, [x29, #480]
    1e7c:	neg	x0, x0
    1e80:	and	x1, x1, x0
    1e84:	ldr	x0, [x29, #448]
    1e88:	str	x1, [x0, #16]
    1e8c:	ldr	x0, [x29, #448]
    1e90:	ldr	x1, [x0, #16]
    1e94:	ldr	x0, [x29, #472]
    1e98:	add	x1, x1, x0
    1e9c:	ldr	x0, [x29, #448]
    1ea0:	str	x1, [x0, #24]
    1ea4:	ldr	x0, [x29, #128]
    1ea8:	cmp	x0, #0x1
    1eac:	b.ne	1ebc <gomp_map_vars+0xb70>  // b.any
    1eb0:	ldr	x0, [x29, #120]
    1eb4:	sub	x0, x0, #0x1
    1eb8:	str	x0, [x29, #120]
    1ebc:	ldr	x0, [x29, #120]
    1ec0:	cmp	x0, #0x0
    1ec4:	b.le	1f30 <gomp_map_vars+0xbe4>
    1ec8:	ldr	x1, [x29, #112]
    1ecc:	ldr	x0, [x29, #120]
    1ed0:	lsl	x0, x0, #4
    1ed4:	sub	x0, x0, #0x10
    1ed8:	add	x0, x1, x0
    1edc:	ldr	x1, [x0, #8]
    1ee0:	ldr	x0, [x29, #112]
    1ee4:	ldr	x0, [x0]
    1ee8:	sub	x0, x1, x0
    1eec:	bl	0 <malloc>
    1ef0:	str	x0, [x29, #96]
    1ef4:	ldr	x0, [x29, #96]
    1ef8:	cmp	x0, #0x0
    1efc:	b.eq	1f30 <gomp_map_vars+0xbe4>  // b.none
    1f00:	ldr	x0, [x29, #448]
    1f04:	str	x0, [x29, #104]
    1f08:	add	x0, x29, #0x60
    1f0c:	str	x0, [x29, #440]
    1f10:	b	1f30 <gomp_map_vars+0xbe4>
    1f14:	ldr	x0, [x29, #448]
    1f18:	str	xzr, [x0, #32]
    1f1c:	ldr	x0, [x29, #448]
    1f20:	str	xzr, [x0, #16]
    1f24:	ldr	x0, [x29, #448]
    1f28:	str	xzr, [x0, #24]
    1f2c:	b	1f34 <gomp_map_vars+0xbe8>
    1f30:	nop
    1f34:	str	xzr, [x29, #472]
    1f38:	ldr	w0, [x29, #24]
    1f3c:	cmp	w0, #0x1
    1f40:	b.ne	1f50 <gomp_map_vars+0xc04>  // b.any
    1f44:	ldr	x0, [x29, #64]
    1f48:	lsl	x0, x0, #3
    1f4c:	str	x0, [x29, #472]
    1f50:	ldr	x0, [x29, #448]
    1f54:	str	xzr, [x0, #8]
    1f58:	ldr	x0, [x29, #464]
    1f5c:	cmp	x0, #0x0
    1f60:	b.ne	1f70 <gomp_map_vars+0xc24>  // b.any
    1f64:	ldrb	w0, [x29, #463]
    1f68:	cmp	w0, #0x0
    1f6c:	b.eq	2ccc <gomp_map_vars+0x1980>  // b.none
    1f70:	ldr	x0, [x29, #464]
    1f74:	cmp	x0, #0x0
    1f78:	b.eq	1fa0 <gomp_map_vars+0xc54>  // b.none
    1f7c:	ldr	x1, [x29, #464]
    1f80:	mov	x0, x1
    1f84:	lsl	x0, x0, #3
    1f88:	add	x0, x0, x1
    1f8c:	lsl	x0, x0, #3
    1f90:	bl	0 <gomp_malloc>
    1f94:	mov	x1, x0
    1f98:	ldr	x0, [x29, #448]
    1f9c:	str	x1, [x0, #8]
    1fa0:	ldr	x0, [x29, #448]
    1fa4:	ldr	x0, [x0, #8]
    1fa8:	str	x0, [x29, #416]
    1fac:	str	xzr, [x29, #400]
    1fb0:	mov	x0, #0xffffffffffffffff    	// #-1
    1fb4:	str	x0, [x29, #392]
    1fb8:	str	xzr, [x29, #384]
    1fbc:	str	xzr, [x29, #488]
    1fc0:	b	2cbc <gomp_map_vars+0x1970>
    1fc4:	ldr	x1, [x29, #448]
    1fc8:	ldr	x0, [x29, #488]
    1fcc:	add	x0, x0, #0x2
    1fd0:	lsl	x0, x0, #5
    1fd4:	add	x0, x1, x0
    1fd8:	ldr	x0, [x0]
    1fdc:	cmp	x0, #0x0
    1fe0:	b.ne	2cb0 <gomp_map_vars+0x1964>  // b.any
    1fe4:	ldr	x0, [x29, #488]
    1fe8:	mov	w2, w0
    1fec:	ldr	x1, [x29, #32]
    1ff0:	ldrb	w0, [x29, #31]
    1ff4:	bl	c64 <get_kind>
    1ff8:	str	w0, [x29, #340]
    1ffc:	ldr	x0, [x29, #488]
    2000:	lsl	x0, x0, #3
    2004:	ldr	x1, [x29, #56]
    2008:	add	x0, x1, x0
    200c:	ldr	x0, [x0]
    2010:	cmp	x0, #0x0
    2014:	b.eq	2ca4 <gomp_map_vars+0x1958>  // b.none
    2018:	ldr	w1, [x29, #340]
    201c:	ldr	w0, [x29, #368]
    2020:	and	w0, w1, w0
    2024:	cmp	w0, #0x1d
    2028:	b.eq	2338 <gomp_map_vars+0xfec>  // b.none
    202c:	cmp	w0, #0x1d
    2030:	b.gt	24b0 <gomp_map_vars+0x1164>
    2034:	cmp	w0, #0x1c
    2038:	b.eq	2120 <gomp_map_vars+0xdd4>  // b.none
    203c:	cmp	w0, #0x1c
    2040:	b.gt	24b0 <gomp_map_vars+0x1164>
    2044:	cmp	w0, #0xc
    2048:	b.eq	2064 <gomp_map_vars+0xd18>  // b.none
    204c:	cmp	w0, #0xc
    2050:	b.lt	24b0 <gomp_map_vars+0x1164>  // b.tstop
    2054:	sub	w0, w0, #0xd
    2058:	cmp	w0, #0x2
    205c:	b.hi	24b0 <gomp_map_vars+0x1164>  // b.pmore
    2060:	b	2cb0 <gomp_map_vars+0x1964>
    2064:	ldr	w0, [x29, #372]
    2068:	ldr	w1, [x29, #340]
    206c:	asr	w0, w1, w0
    2070:	mov	x1, #0x1                   	// #1
    2074:	lsl	x0, x1, x0
    2078:	str	x0, [x29, #296]
    207c:	ldr	x1, [x29, #472]
    2080:	ldr	x0, [x29, #296]
    2084:	add	x0, x1, x0
    2088:	sub	x1, x0, #0x1
    208c:	ldr	x0, [x29, #296]
    2090:	neg	x0, x0
    2094:	and	x0, x1, x0
    2098:	str	x0, [x29, #472]
    209c:	ldr	x1, [x29, #448]
    20a0:	ldr	x0, [x29, #488]
    20a4:	lsl	x0, x0, #5
    20a8:	add	x0, x1, x0
    20ac:	ldr	x1, [x29, #472]
    20b0:	str	x1, [x0, #80]
    20b4:	ldr	x0, [x29, #488]
    20b8:	lsl	x0, x0, #3
    20bc:	ldr	x1, [x29, #40]
    20c0:	add	x0, x1, x0
    20c4:	ldr	x0, [x0]
    20c8:	str	x0, [x29, #288]
    20cc:	ldr	x0, [x29, #448]
    20d0:	ldr	x1, [x0, #16]
    20d4:	ldr	x0, [x29, #472]
    20d8:	add	x0, x1, x0
    20dc:	mov	x5, x0
    20e0:	ldr	x0, [x29, #488]
    20e4:	lsl	x0, x0, #3
    20e8:	ldr	x1, [x29, #56]
    20ec:	add	x0, x1, x0
    20f0:	ldr	x0, [x0]
    20f4:	ldr	x4, [x29, #440]
    20f8:	ldr	x3, [x29, #288]
    20fc:	mov	x2, x0
    2100:	mov	x1, x5
    2104:	ldr	x0, [x29, #72]
    2108:	bl	800 <gomp_copy_host2dev>
    210c:	ldr	x1, [x29, #472]
    2110:	ldr	x0, [x29, #288]
    2114:	add	x0, x1, x0
    2118:	str	x0, [x29, #472]
    211c:	b	2cb0 <gomp_map_vars+0x1964>
    2120:	ldr	x0, [x29, #488]
    2124:	add	x0, x0, #0x1
    2128:	str	x0, [x29, #320]
    212c:	ldr	x0, [x29, #488]
    2130:	lsl	x0, x0, #3
    2134:	ldr	x1, [x29, #40]
    2138:	add	x0, x1, x0
    213c:	ldr	x0, [x0]
    2140:	ldr	x1, [x29, #488]
    2144:	add	x0, x1, x0
    2148:	str	x0, [x29, #312]
    214c:	ldr	x0, [x29, #488]
    2150:	lsl	x0, x0, #3
    2154:	ldr	x1, [x29, #56]
    2158:	add	x0, x1, x0
    215c:	ldr	x0, [x0]
    2160:	str	x0, [x29, #136]
    2164:	ldr	x0, [x29, #312]
    2168:	lsl	x0, x0, #3
    216c:	ldr	x1, [x29, #56]
    2170:	add	x0, x1, x0
    2174:	ldr	x0, [x0]
    2178:	mov	x2, x0
    217c:	ldr	x0, [x29, #312]
    2180:	lsl	x0, x0, #3
    2184:	ldr	x1, [x29, #40]
    2188:	add	x0, x1, x0
    218c:	ldr	x0, [x0]
    2190:	add	x0, x2, x0
    2194:	str	x0, [x29, #144]
    2198:	ldr	x1, [x29, #448]
    219c:	ldr	x0, [x29, #320]
    21a0:	add	x0, x0, #0x2
    21a4:	lsl	x0, x0, #5
    21a8:	add	x0, x1, x0
    21ac:	ldr	x0, [x0]
    21b0:	cmp	x0, #0x0
    21b4:	b.ne	2cac <gomp_map_vars+0x1960>  // b.any
    21b8:	add	x0, x29, #0x88
    21bc:	mov	x1, x0
    21c0:	ldr	x0, [x29, #360]
    21c4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    21c8:	str	x0, [x29, #328]
    21cc:	ldr	x0, [x29, #328]
    21d0:	cmp	x0, #0x0
    21d4:	b.ne	22dc <gomp_map_vars+0xf90>  // b.any
    21d8:	ldr	w0, [x29, #372]
    21dc:	ldr	w1, [x29, #340]
    21e0:	asr	w0, w1, w0
    21e4:	mov	x1, #0x1                   	// #1
    21e8:	lsl	x0, x1, x0
    21ec:	str	x0, [x29, #304]
    21f0:	ldr	x0, [x29, #488]
    21f4:	lsl	x0, x0, #3
    21f8:	ldr	x1, [x29, #56]
    21fc:	add	x0, x1, x0
    2200:	ldr	x0, [x0]
    2204:	mov	x2, x0
    2208:	ldr	x0, [x29, #320]
    220c:	lsl	x0, x0, #3
    2210:	ldr	x1, [x29, #56]
    2214:	add	x0, x1, x0
    2218:	ldr	x0, [x0]
    221c:	sub	x0, x2, x0
    2220:	ldr	x1, [x29, #472]
    2224:	add	x0, x1, x0
    2228:	str	x0, [x29, #472]
    222c:	ldr	x1, [x29, #472]
    2230:	ldr	x0, [x29, #304]
    2234:	add	x0, x1, x0
    2238:	sub	x1, x0, #0x1
    223c:	ldr	x0, [x29, #304]
    2240:	neg	x0, x0
    2244:	and	x0, x1, x0
    2248:	str	x0, [x29, #472]
    224c:	ldr	x0, [x29, #320]
    2250:	lsl	x0, x0, #3
    2254:	ldr	x1, [x29, #56]
    2258:	add	x0, x1, x0
    225c:	ldr	x0, [x0]
    2260:	mov	x2, x0
    2264:	ldr	x0, [x29, #488]
    2268:	lsl	x0, x0, #3
    226c:	ldr	x1, [x29, #56]
    2270:	add	x0, x1, x0
    2274:	ldr	x0, [x0]
    2278:	sub	x0, x2, x0
    227c:	ldr	x1, [x29, #472]
    2280:	add	x0, x1, x0
    2284:	str	x0, [x29, #472]
    2288:	ldr	x0, [x29, #320]
    228c:	lsl	x0, x0, #3
    2290:	ldr	x1, [x29, #56]
    2294:	add	x0, x1, x0
    2298:	ldr	x0, [x0]
    229c:	str	x0, [x29, #384]
    22a0:	ldr	x0, [x29, #472]
    22a4:	str	x0, [x29, #400]
    22a8:	ldr	x0, [x29, #312]
    22ac:	str	x0, [x29, #392]
    22b0:	ldr	x0, [x29, #144]
    22b4:	ldr	x1, [x29, #320]
    22b8:	lsl	x1, x1, #3
    22bc:	ldr	x2, [x29, #56]
    22c0:	add	x1, x2, x1
    22c4:	ldr	x1, [x1]
    22c8:	sub	x0, x0, x1
    22cc:	ldr	x1, [x29, #472]
    22d0:	add	x0, x1, x0
    22d4:	str	x0, [x29, #472]
    22d8:	b	2cb0 <gomp_map_vars+0x1964>
    22dc:	ldr	x0, [x29, #320]
    22e0:	str	x0, [x29, #488]
    22e4:	b	2318 <gomp_map_vars+0xfcc>
    22e8:	ldr	x7, [x29, #440]
    22ec:	ldr	x6, [x29, #32]
    22f0:	ldr	x5, [x29, #40]
    22f4:	ldr	x4, [x29, #56]
    22f8:	ldr	x3, [x29, #488]
    22fc:	ldr	x2, [x29, #320]
    2300:	ldr	x1, [x29, #328]
    2304:	ldr	x0, [x29, #448]
    2308:	bl	e00 <gomp_map_fields_existing>
    230c:	ldr	x0, [x29, #488]
    2310:	add	x0, x0, #0x1
    2314:	str	x0, [x29, #488]
    2318:	ldr	x1, [x29, #488]
    231c:	ldr	x0, [x29, #312]
    2320:	cmp	x1, x0
    2324:	b.ls	22e8 <gomp_map_vars+0xf9c>  // b.plast
    2328:	ldr	x0, [x29, #488]
    232c:	sub	x0, x0, #0x1
    2330:	str	x0, [x29, #488]
    2334:	b	2cb0 <gomp_map_vars+0x1964>
    2338:	ldr	x0, [x29, #488]
    233c:	lsl	x0, x0, #3
    2340:	ldr	x1, [x29, #56]
    2344:	add	x0, x1, x0
    2348:	ldr	x0, [x0]
    234c:	str	x0, [x29, #136]
    2350:	ldr	x0, [x29, #136]
    2354:	add	x0, x0, #0x8
    2358:	str	x0, [x29, #144]
    235c:	add	x0, x29, #0x88
    2360:	mov	x1, x0
    2364:	ldr	x0, [x29, #360]
    2368:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    236c:	str	x0, [x29, #328]
    2370:	ldr	x0, [x29, #328]
    2374:	cmp	x0, #0x0
    2378:	b.eq	23a4 <gomp_map_vars+0x1058>  // b.none
    237c:	ldr	x0, [x29, #328]
    2380:	ldr	x1, [x0]
    2384:	ldr	x0, [x29, #136]
    2388:	cmp	x1, x0
    238c:	b.hi	23a4 <gomp_map_vars+0x1058>  // b.pmore
    2390:	ldr	x0, [x29, #328]
    2394:	ldr	x1, [x0, #8]
    2398:	ldr	x0, [x29, #144]
    239c:	cmp	x1, x0
    23a0:	b.cs	23bc <gomp_map_vars+0x1070>  // b.hs, b.nlast
    23a4:	ldr	x0, [x29, #72]
    23a8:	add	x0, x0, #0xa8
    23ac:	bl	90 <gomp_mutex_unlock>
    23b0:	adrp	x0, 0 <gomp_mutex_init>
    23b4:	add	x0, x0, #0x0
    23b8:	bl	0 <gomp_fatal>
    23bc:	ldr	x0, [x29, #488]
    23c0:	sub	w0, w0, #0x1
    23c4:	mov	w2, w0
    23c8:	ldr	x1, [x29, #32]
    23cc:	ldrb	w0, [x29, #31]
    23d0:	bl	c64 <get_kind>
    23d4:	mov	w1, w0
    23d8:	ldr	w0, [x29, #368]
    23dc:	and	w0, w1, w0
    23e0:	cmp	w0, #0x1d
    23e4:	b.eq	2404 <gomp_map_vars+0x10b8>  // b.none
    23e8:	ldr	x0, [x29, #488]
    23ec:	sub	x0, x0, #0x1
    23f0:	mov	x2, x0
    23f4:	ldr	x1, [x29, #56]
    23f8:	ldr	x0, [x29, #448]
    23fc:	bl	1188 <gomp_map_val>
    2400:	str	x0, [x29, #160]
    2404:	ldr	x0, [x29, #160]
    2408:	cmp	x0, #0x0
    240c:	b.eq	2430 <gomp_map_vars+0x10e4>  // b.none
    2410:	ldr	x1, [x29, #160]
    2414:	ldr	x0, [x29, #488]
    2418:	lsl	x0, x0, #3
    241c:	ldr	x2, [x29, #40]
    2420:	add	x0, x2, x0
    2424:	ldr	x0, [x0]
    2428:	sub	x0, x1, x0
    242c:	str	x0, [x29, #160]
    2430:	ldr	x0, [x29, #328]
    2434:	ldr	x0, [x0, #16]
    2438:	ldr	x1, [x0, #16]
    243c:	ldr	x0, [x29, #328]
    2440:	ldr	x0, [x0, #24]
    2444:	add	x1, x1, x0
    2448:	ldr	x0, [x29, #136]
    244c:	add	x1, x1, x0
    2450:	ldr	x0, [x29, #328]
    2454:	ldr	x0, [x0]
    2458:	sub	x0, x1, x0
    245c:	mov	x1, x0
    2460:	add	x0, x29, #0x88
    2464:	add	x0, x0, #0x18
    2468:	ldr	x4, [x29, #440]
    246c:	mov	x3, #0x8                   	// #8
    2470:	mov	x2, x0
    2474:	ldr	x0, [x29, #72]
    2478:	bl	800 <gomp_copy_host2dev>
    247c:	ldr	x0, [x29, #328]
    2480:	ldr	x0, [x0, #16]
    2484:	ldr	x1, [x0, #16]
    2488:	ldr	x0, [x29, #328]
    248c:	ldr	x0, [x0, #24]
    2490:	add	x1, x1, x0
    2494:	ldr	x0, [x29, #136]
    2498:	add	x1, x1, x0
    249c:	ldr	x0, [x29, #328]
    24a0:	ldr	x0, [x0]
    24a4:	sub	x0, x1, x0
    24a8:	str	x0, [x29, #160]
    24ac:	b	2cb0 <gomp_map_vars+0x1964>
    24b0:	nop
    24b4:	ldr	x0, [x29, #416]
    24b8:	str	x0, [x29, #280]
    24bc:	ldr	x0, [x29, #488]
    24c0:	lsl	x0, x0, #3
    24c4:	ldr	x1, [x29, #56]
    24c8:	add	x0, x1, x0
    24cc:	ldr	x0, [x0]
    24d0:	mov	x1, x0
    24d4:	ldr	x0, [x29, #280]
    24d8:	str	x1, [x0]
    24dc:	ldr	w1, [x29, #340]
    24e0:	ldr	w0, [x29, #368]
    24e4:	and	w0, w1, w0
    24e8:	cmp	w0, #0x4
    24ec:	b.eq	251c <gomp_map_vars+0x11d0>  // b.none
    24f0:	ldr	x0, [x29, #280]
    24f4:	ldr	x1, [x0]
    24f8:	ldr	x0, [x29, #488]
    24fc:	lsl	x0, x0, #3
    2500:	ldr	x2, [x29, #40]
    2504:	add	x0, x2, x0
    2508:	ldr	x0, [x0]
    250c:	add	x1, x1, x0
    2510:	ldr	x0, [x29, #280]
    2514:	str	x1, [x0, #8]
    2518:	b	2530 <gomp_map_vars+0x11e4>
    251c:	ldr	x0, [x29, #280]
    2520:	ldr	x0, [x0]
    2524:	add	x1, x0, #0x8
    2528:	ldr	x0, [x29, #280]
    252c:	str	x1, [x0, #8]
    2530:	ldr	x1, [x29, #280]
    2534:	ldr	x0, [x29, #360]
    2538:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    253c:	str	x0, [x29, #272]
    2540:	ldr	x0, [x29, #272]
    2544:	cmp	x0, #0x0
    2548:	b.eq	25ac <gomp_map_vars+0x1260>  // b.none
    254c:	ldr	x0, [x29, #272]
    2550:	ldr	x0, [x0, #32]
    2554:	cmn	x0, #0x2
    2558:	b.eq	25ac <gomp_map_vars+0x1260>  // b.none
    255c:	ldr	x0, [x29, #488]
    2560:	add	x0, x0, #0x2
    2564:	lsl	x0, x0, #5
    2568:	ldr	x1, [x29, #448]
    256c:	add	x2, x1, x0
    2570:	ldr	w0, [x29, #340]
    2574:	sxtb	w1, w0
    2578:	ldr	w0, [x29, #368]
    257c:	sxtb	w0, w0
    2580:	and	w0, w1, w0
    2584:	sxtb	w0, w0
    2588:	and	w0, w0, #0xff
    258c:	ldr	x5, [x29, #440]
    2590:	mov	w4, w0
    2594:	mov	x3, x2
    2598:	ldr	x2, [x29, #280]
    259c:	ldr	x1, [x29, #272]
    25a0:	ldr	x0, [x29, #72]
    25a4:	bl	a5c <gomp_map_vars_existing>
    25a8:	b	2cb0 <gomp_map_vars+0x1964>
    25ac:	ldr	x0, [x29, #280]
    25b0:	str	xzr, [x0, #48]
    25b4:	ldr	x0, [x29, #272]
    25b8:	cmp	x0, #0x0
    25bc:	b.eq	25e8 <gomp_map_vars+0x129c>  // b.none
    25c0:	ldr	x0, [x29, #272]
    25c4:	ldr	x0, [x0, #32]
    25c8:	cmn	x0, #0x2
    25cc:	b.ne	25e8 <gomp_map_vars+0x129c>  // b.any
    25d0:	ldr	x1, [x29, #272]
    25d4:	ldr	x0, [x29, #360]
    25d8:	bl	0 <splay_tree_prefix_splay_tree_remove>
    25dc:	ldr	x0, [x29, #280]
    25e0:	ldr	x1, [x29, #272]
    25e4:	str	x1, [x0, #48]
    25e8:	ldr	w0, [x29, #372]
    25ec:	ldr	w1, [x29, #340]
    25f0:	asr	w0, w1, w0
    25f4:	mov	x1, #0x1                   	// #1
    25f8:	lsl	x0, x1, x0
    25fc:	str	x0, [x29, #264]
    2600:	ldr	x1, [x29, #448]
    2604:	ldr	x0, [x29, #488]
    2608:	add	x0, x0, #0x2
    260c:	lsl	x0, x0, #5
    2610:	add	x0, x1, x0
    2614:	ldr	x1, [x29, #280]
    2618:	str	x1, [x0]
    261c:	ldr	x0, [x29, #280]
    2620:	ldr	x1, [x29, #448]
    2624:	str	x1, [x0, #16]
    2628:	ldr	x0, [x29, #392]
    262c:	cmn	x0, #0x1
    2630:	b.eq	2670 <gomp_map_vars+0x1324>  // b.none
    2634:	ldr	x0, [x29, #280]
    2638:	ldr	x1, [x0]
    263c:	ldr	x0, [x29, #384]
    2640:	sub	x1, x1, x0
    2644:	ldr	x0, [x29, #400]
    2648:	add	x1, x1, x0
    264c:	ldr	x0, [x29, #280]
    2650:	str	x1, [x0, #24]
    2654:	ldr	x1, [x29, #488]
    2658:	ldr	x0, [x29, #392]
    265c:	cmp	x1, x0
    2660:	b.ne	26bc <gomp_map_vars+0x1370>  // b.any
    2664:	mov	x0, #0xffffffffffffffff    	// #-1
    2668:	str	x0, [x29, #392]
    266c:	b	26bc <gomp_map_vars+0x1370>
    2670:	ldr	x1, [x29, #472]
    2674:	ldr	x0, [x29, #264]
    2678:	add	x0, x1, x0
    267c:	sub	x1, x0, #0x1
    2680:	ldr	x0, [x29, #264]
    2684:	neg	x0, x0
    2688:	and	x0, x1, x0
    268c:	str	x0, [x29, #472]
    2690:	ldr	x0, [x29, #280]
    2694:	ldr	x1, [x29, #472]
    2698:	str	x1, [x0, #24]
    269c:	ldr	x0, [x29, #280]
    26a0:	ldr	x1, [x0, #8]
    26a4:	ldr	x0, [x29, #280]
    26a8:	ldr	x0, [x0]
    26ac:	sub	x0, x1, x0
    26b0:	ldr	x1, [x29, #472]
    26b4:	add	x0, x1, x0
    26b8:	str	x0, [x29, #472]
    26bc:	ldr	w1, [x29, #340]
    26c0:	ldr	w0, [x29, #368]
    26c4:	and	w0, w1, w0
    26c8:	and	w0, w0, #0xc
    26cc:	cmp	w0, #0x0
    26d0:	b.ne	26f4 <gomp_map_vars+0x13a8>  // b.any
    26d4:	ldr	w1, [x29, #340]
    26d8:	ldr	w0, [x29, #368]
    26dc:	and	w0, w1, w0
    26e0:	and	w0, w0, #0x2
    26e4:	cmp	w0, #0x0
    26e8:	b.eq	26f4 <gomp_map_vars+0x13a8>  // b.none
    26ec:	mov	w0, #0x1                   	// #1
    26f0:	b	26f8 <gomp_map_vars+0x13ac>
    26f4:	mov	w0, #0x0                   	// #0
    26f8:	and	w0, w0, #0x1
    26fc:	and	w2, w0, #0xff
    2700:	ldr	x1, [x29, #448]
    2704:	ldr	x0, [x29, #488]
    2708:	add	x0, x0, #0x2
    270c:	lsl	x0, x0, #5
    2710:	add	x0, x1, x0
    2714:	mov	w1, w2
    2718:	strb	w1, [x0, #8]
    271c:	ldr	w1, [x29, #340]
    2720:	ldr	w0, [x29, #368]
    2724:	and	w0, w1, w0
    2728:	cmp	w0, #0x12
    272c:	b.eq	2744 <gomp_map_vars+0x13f8>  // b.none
    2730:	ldr	w1, [x29, #340]
    2734:	ldr	w0, [x29, #368]
    2738:	and	w0, w1, w0
    273c:	cmp	w0, #0x13
    2740:	b.ne	274c <gomp_map_vars+0x1400>  // b.any
    2744:	mov	w0, #0x1                   	// #1
    2748:	b	2750 <gomp_map_vars+0x1404>
    274c:	mov	w0, #0x0                   	// #0
    2750:	and	w0, w0, #0x1
    2754:	and	w2, w0, #0xff
    2758:	ldr	x1, [x29, #448]
    275c:	ldr	x0, [x29, #488]
    2760:	add	x0, x0, #0x2
    2764:	lsl	x0, x0, #5
    2768:	add	x0, x1, x0
    276c:	mov	w1, w2
    2770:	strb	w1, [x0, #9]
    2774:	ldr	x1, [x29, #448]
    2778:	ldr	x0, [x29, #488]
    277c:	lsl	x0, x0, #5
    2780:	add	x0, x1, x0
    2784:	str	xzr, [x0, #80]
    2788:	ldr	x0, [x29, #280]
    278c:	ldr	x1, [x0, #8]
    2790:	ldr	x0, [x29, #280]
    2794:	ldr	x0, [x0]
    2798:	sub	x1, x1, x0
    279c:	ldr	x2, [x29, #448]
    27a0:	ldr	x0, [x29, #488]
    27a4:	lsl	x0, x0, #5
    27a8:	add	x0, x2, x0
    27ac:	str	x1, [x0, #88]
    27b0:	ldr	x0, [x29, #280]
    27b4:	mov	x1, #0x1                   	// #1
    27b8:	str	x1, [x0, #32]
    27bc:	ldr	x0, [x29, #280]
    27c0:	str	xzr, [x0, #40]
    27c4:	ldr	x0, [x29, #448]
    27c8:	ldr	x0, [x0]
    27cc:	add	x1, x0, #0x1
    27d0:	ldr	x0, [x29, #448]
    27d4:	str	x1, [x0]
    27d8:	ldr	x0, [x29, #416]
    27dc:	str	xzr, [x0, #56]
    27e0:	ldr	x0, [x29, #416]
    27e4:	str	xzr, [x0, #64]
    27e8:	ldr	x1, [x29, #416]
    27ec:	ldr	x0, [x29, #360]
    27f0:	bl	0 <splay_tree_prefix_splay_tree_insert>
    27f4:	ldr	w1, [x29, #340]
    27f8:	ldr	w0, [x29, #368]
    27fc:	and	w0, w1, w0
    2800:	cmp	w0, #0x83
    2804:	b.eq	28e0 <gomp_map_vars+0x1594>  // b.none
    2808:	cmp	w0, #0x83
    280c:	b.gt	2c18 <gomp_map_vars+0x18cc>
    2810:	cmp	w0, #0x82
    2814:	b.eq	2c3c <gomp_map_vars+0x18f0>  // b.none
    2818:	cmp	w0, #0x82
    281c:	b.gt	2c18 <gomp_map_vars+0x18cc>
    2820:	cmp	w0, #0x81
    2824:	b.eq	28e0 <gomp_map_vars+0x1594>  // b.none
    2828:	cmp	w0, #0x81
    282c:	b.gt	2c18 <gomp_map_vars+0x18cc>
    2830:	cmp	w0, #0x80
    2834:	b.eq	2c3c <gomp_map_vars+0x18f0>  // b.none
    2838:	cmp	w0, #0x80
    283c:	b.gt	2c18 <gomp_map_vars+0x18cc>
    2840:	cmp	w0, #0x13
    2844:	b.eq	28e0 <gomp_map_vars+0x1594>  // b.none
    2848:	cmp	w0, #0x13
    284c:	b.gt	2c18 <gomp_map_vars+0x18cc>
    2850:	cmp	w0, #0x12
    2854:	b.eq	2c3c <gomp_map_vars+0x18f0>  // b.none
    2858:	cmp	w0, #0x12
    285c:	b.gt	2c18 <gomp_map_vars+0x18cc>
    2860:	cmp	w0, #0x11
    2864:	b.eq	28e0 <gomp_map_vars+0x1594>  // b.none
    2868:	cmp	w0, #0x11
    286c:	b.gt	2c18 <gomp_map_vars+0x18cc>
    2870:	cmp	w0, #0x8
    2874:	b.eq	2ba4 <gomp_map_vars+0x1858>  // b.none
    2878:	cmp	w0, #0x8
    287c:	b.gt	2c18 <gomp_map_vars+0x18cc>
    2880:	cmp	w0, #0x6
    2884:	b.eq	2b60 <gomp_map_vars+0x1814>  // b.none
    2888:	cmp	w0, #0x6
    288c:	b.gt	2c18 <gomp_map_vars+0x18cc>
    2890:	cmp	w0, #0x5
    2894:	b.eq	2974 <gomp_map_vars+0x1628>  // b.none
    2898:	cmp	w0, #0x5
    289c:	b.gt	2c18 <gomp_map_vars+0x18cc>
    28a0:	cmp	w0, #0x4
    28a4:	b.eq	2930 <gomp_map_vars+0x15e4>  // b.none
    28a8:	cmp	w0, #0x4
    28ac:	b.gt	2c18 <gomp_map_vars+0x18cc>
    28b0:	cmp	w0, #0x3
    28b4:	b.eq	28e0 <gomp_map_vars+0x1594>  // b.none
    28b8:	cmp	w0, #0x3
    28bc:	b.gt	2c18 <gomp_map_vars+0x18cc>
    28c0:	cmp	w0, #0x2
    28c4:	b.eq	2c3c <gomp_map_vars+0x18f0>  // b.none
    28c8:	cmp	w0, #0x2
    28cc:	b.gt	2c18 <gomp_map_vars+0x18cc>
    28d0:	cmp	w0, #0x0
    28d4:	b.eq	2c3c <gomp_map_vars+0x18f0>  // b.none
    28d8:	cmp	w0, #0x1
    28dc:	b.ne	2c18 <gomp_map_vars+0x18cc>  // b.any
    28e0:	ldr	x0, [x29, #448]
    28e4:	ldr	x1, [x0, #16]
    28e8:	ldr	x0, [x29, #280]
    28ec:	ldr	x0, [x0, #24]
    28f0:	add	x0, x1, x0
    28f4:	mov	x5, x0
    28f8:	ldr	x0, [x29, #280]
    28fc:	ldr	x0, [x0]
    2900:	mov	x2, x0
    2904:	ldr	x0, [x29, #280]
    2908:	ldr	x1, [x0, #8]
    290c:	ldr	x0, [x29, #280]
    2910:	ldr	x0, [x0]
    2914:	sub	x0, x1, x0
    2918:	ldr	x4, [x29, #440]
    291c:	mov	x3, x0
    2920:	mov	x1, x5
    2924:	ldr	x0, [x29, #72]
    2928:	bl	800 <gomp_copy_host2dev>
    292c:	b	2c48 <gomp_map_vars+0x18fc>
    2930:	ldr	x0, [x29, #280]
    2934:	ldr	x0, [x0]
    2938:	ldr	x0, [x0]
    293c:	mov	x5, x0
    2940:	ldr	x0, [x29, #280]
    2944:	ldr	x2, [x0, #24]
    2948:	ldr	x0, [x29, #488]
    294c:	lsl	x0, x0, #3
    2950:	ldr	x1, [x29, #40]
    2954:	add	x0, x1, x0
    2958:	ldr	x0, [x0]
    295c:	ldr	x4, [x29, #440]
    2960:	mov	x3, x0
    2964:	mov	x1, x5
    2968:	ldr	x0, [x29, #448]
    296c:	bl	cb0 <gomp_map_pointer>
    2970:	b	2c48 <gomp_map_vars+0x18fc>
    2974:	ldr	x0, [x29, #448]
    2978:	ldr	x1, [x0, #16]
    297c:	ldr	x0, [x29, #280]
    2980:	ldr	x0, [x0, #24]
    2984:	add	x0, x1, x0
    2988:	mov	x5, x0
    298c:	ldr	x0, [x29, #280]
    2990:	ldr	x0, [x0]
    2994:	mov	x2, x0
    2998:	ldr	x0, [x29, #280]
    299c:	ldr	x1, [x0, #8]
    29a0:	ldr	x0, [x29, #280]
    29a4:	ldr	x0, [x0]
    29a8:	sub	x0, x1, x0
    29ac:	ldr	x4, [x29, #440]
    29b0:	mov	x3, x0
    29b4:	mov	x1, x5
    29b8:	ldr	x0, [x29, #72]
    29bc:	bl	800 <gomp_copy_host2dev>
    29c0:	ldr	x0, [x29, #488]
    29c4:	add	x0, x0, #0x1
    29c8:	str	x0, [x29, #408]
    29cc:	b	2b44 <gomp_map_vars+0x17f8>
    29d0:	ldr	x0, [x29, #408]
    29d4:	mov	w2, w0
    29d8:	ldr	x1, [x29, #32]
    29dc:	ldrb	w0, [x29, #31]
    29e0:	bl	c64 <get_kind>
    29e4:	mov	w1, w0
    29e8:	ldr	w0, [x29, #368]
    29ec:	and	w0, w1, w0
    29f0:	cmp	w0, #0x4
    29f4:	b.ne	2b58 <gomp_map_vars+0x180c>  // b.any
    29f8:	ldr	x0, [x29, #408]
    29fc:	lsl	x0, x0, #3
    2a00:	ldr	x1, [x29, #56]
    2a04:	add	x0, x1, x0
    2a08:	ldr	x0, [x0]
    2a0c:	mov	x1, x0
    2a10:	ldr	x0, [x29, #280]
    2a14:	ldr	x0, [x0]
    2a18:	cmp	x1, x0
    2a1c:	b.cc	2c44 <gomp_map_vars+0x18f8>  // b.lo, b.ul, b.last
    2a20:	ldr	x0, [x29, #408]
    2a24:	lsl	x0, x0, #3
    2a28:	ldr	x1, [x29, #56]
    2a2c:	add	x0, x1, x0
    2a30:	ldr	x0, [x0]
    2a34:	add	x1, x0, #0x8
    2a38:	ldr	x0, [x29, #280]
    2a3c:	ldr	x0, [x0, #8]
    2a40:	cmp	x1, x0
    2a44:	b.hi	2c44 <gomp_map_vars+0x18f8>  // b.pmore
    2a48:	ldr	x1, [x29, #448]
    2a4c:	ldr	x0, [x29, #408]
    2a50:	add	x0, x0, #0x2
    2a54:	lsl	x0, x0, #5
    2a58:	add	x0, x1, x0
    2a5c:	ldr	x1, [x29, #280]
    2a60:	str	x1, [x0]
    2a64:	ldr	x1, [x29, #448]
    2a68:	ldr	x0, [x29, #408]
    2a6c:	add	x0, x0, #0x2
    2a70:	lsl	x0, x0, #5
    2a74:	add	x0, x1, x0
    2a78:	strb	wzr, [x0, #8]
    2a7c:	ldr	x1, [x29, #448]
    2a80:	ldr	x0, [x29, #408]
    2a84:	add	x0, x0, #0x2
    2a88:	lsl	x0, x0, #5
    2a8c:	add	x0, x1, x0
    2a90:	strb	wzr, [x0, #9]
    2a94:	ldr	x0, [x29, #280]
    2a98:	ldr	x0, [x0, #32]
    2a9c:	cmn	x0, #0x1
    2aa0:	b.eq	2ab8 <gomp_map_vars+0x176c>  // b.none
    2aa4:	ldr	x0, [x29, #280]
    2aa8:	ldr	x0, [x0, #32]
    2aac:	add	x1, x0, #0x1
    2ab0:	ldr	x0, [x29, #280]
    2ab4:	str	x1, [x0, #32]
    2ab8:	ldr	x0, [x29, #408]
    2abc:	lsl	x0, x0, #3
    2ac0:	ldr	x1, [x29, #56]
    2ac4:	add	x0, x1, x0
    2ac8:	ldr	x0, [x0]
    2acc:	ldr	x0, [x0]
    2ad0:	mov	x5, x0
    2ad4:	ldr	x0, [x29, #280]
    2ad8:	ldr	x1, [x0, #24]
    2adc:	ldr	x0, [x29, #408]
    2ae0:	lsl	x0, x0, #3
    2ae4:	ldr	x2, [x29, #56]
    2ae8:	add	x0, x2, x0
    2aec:	ldr	x0, [x0]
    2af0:	mov	x2, x0
    2af4:	ldr	x0, [x29, #280]
    2af8:	ldr	x0, [x0]
    2afc:	sub	x0, x2, x0
    2b00:	add	x2, x1, x0
    2b04:	ldr	x0, [x29, #408]
    2b08:	lsl	x0, x0, #3
    2b0c:	ldr	x1, [x29, #40]
    2b10:	add	x0, x1, x0
    2b14:	ldr	x0, [x0]
    2b18:	ldr	x4, [x29, #440]
    2b1c:	mov	x3, x0
    2b20:	mov	x1, x5
    2b24:	ldr	x0, [x29, #448]
    2b28:	bl	cb0 <gomp_map_pointer>
    2b2c:	ldr	x0, [x29, #488]
    2b30:	add	x0, x0, #0x1
    2b34:	str	x0, [x29, #488]
    2b38:	ldr	x0, [x29, #408]
    2b3c:	add	x0, x0, #0x1
    2b40:	str	x0, [x29, #408]
    2b44:	ldr	x1, [x29, #408]
    2b48:	ldr	x0, [x29, #64]
    2b4c:	cmp	x1, x0
    2b50:	b.cc	29d0 <gomp_map_vars+0x1684>  // b.lo, b.ul, b.last
    2b54:	b	2c44 <gomp_map_vars+0x18f8>
    2b58:	nop
    2b5c:	b	2c44 <gomp_map_vars+0x18f8>
    2b60:	ldr	x0, [x29, #280]
    2b64:	ldr	x1, [x0, #8]
    2b68:	ldr	x0, [x29, #280]
    2b6c:	ldr	x0, [x0]
    2b70:	sub	x0, x1, x0
    2b74:	str	x0, [x29, #256]
    2b78:	ldr	x0, [x29, #72]
    2b7c:	add	x0, x0, #0xa8
    2b80:	bl	90 <gomp_mutex_unlock>
    2b84:	ldr	x0, [x29, #280]
    2b88:	ldr	x0, [x0]
    2b8c:	ldr	x3, [x29, #256]
    2b90:	ldr	x2, [x29, #256]
    2b94:	mov	x1, x0
    2b98:	adrp	x0, 0 <gomp_mutex_init>
    2b9c:	add	x0, x0, #0x0
    2ba0:	bl	0 <gomp_fatal>
    2ba4:	ldr	x0, [x29, #280]
    2ba8:	ldr	x1, [x0, #8]
    2bac:	ldr	x0, [x29, #280]
    2bb0:	ldr	x0, [x0]
    2bb4:	sub	x0, x1, x0
    2bb8:	cmp	x0, #0x8
    2bbc:	b.eq	2be0 <gomp_map_vars+0x1894>  // b.none
    2bc0:	adrp	x0, 0 <gomp_mutex_init>
    2bc4:	add	x3, x0, #0x0
    2bc8:	mov	w2, #0x3b4                 	// #948
    2bcc:	adrp	x0, 0 <gomp_mutex_init>
    2bd0:	add	x1, x0, #0x0
    2bd4:	adrp	x0, 0 <gomp_mutex_init>
    2bd8:	add	x0, x0, #0x0
    2bdc:	bl	0 <__assert_fail>
    2be0:	ldr	x0, [x29, #448]
    2be4:	ldr	x1, [x0, #16]
    2be8:	ldr	x0, [x29, #280]
    2bec:	ldr	x0, [x0, #24]
    2bf0:	add	x0, x1, x0
    2bf4:	mov	x1, x0
    2bf8:	ldr	x0, [x29, #280]
    2bfc:	ldr	x0, [x0]
    2c00:	ldr	x4, [x29, #440]
    2c04:	mov	x3, #0x8                   	// #8
    2c08:	mov	x2, x0
    2c0c:	ldr	x0, [x29, #72]
    2c10:	bl	800 <gomp_copy_host2dev>
    2c14:	b	2c48 <gomp_map_vars+0x18fc>
    2c18:	ldr	x0, [x29, #72]
    2c1c:	add	x0, x0, #0xa8
    2c20:	bl	90 <gomp_mutex_unlock>
    2c24:	ldr	w2, [x29, #340]
    2c28:	adrp	x0, 0 <gomp_mutex_init>
    2c2c:	add	x1, x0, #0x0
    2c30:	adrp	x0, 0 <gomp_mutex_init>
    2c34:	add	x0, x0, #0x0
    2c38:	bl	0 <gomp_fatal>
    2c3c:	nop
    2c40:	b	2c48 <gomp_map_vars+0x18fc>
    2c44:	nop
    2c48:	ldr	x0, [x29, #280]
    2c4c:	ldr	x0, [x0, #48]
    2c50:	cmp	x0, #0x0
    2c54:	b.eq	2c94 <gomp_map_vars+0x1948>  // b.none
    2c58:	ldr	x0, [x29, #448]
    2c5c:	ldr	x1, [x0, #16]
    2c60:	ldr	x0, [x29, #280]
    2c64:	ldr	x0, [x0, #24]
    2c68:	add	x0, x1, x0
    2c6c:	str	x0, [x29, #88]
    2c70:	ldr	x0, [x29, #272]
    2c74:	ldr	x0, [x0, #24]
    2c78:	mov	x1, x0
    2c7c:	add	x0, x29, #0x58
    2c80:	mov	x4, #0x0                   	// #0
    2c84:	mov	x3, #0x8                   	// #8
    2c88:	mov	x2, x0
    2c8c:	ldr	x0, [x29, #72]
    2c90:	bl	800 <gomp_copy_host2dev>
    2c94:	ldr	x0, [x29, #416]
    2c98:	add	x0, x0, #0x48
    2c9c:	str	x0, [x29, #416]
    2ca0:	b	2cb0 <gomp_map_vars+0x1964>
    2ca4:	nop
    2ca8:	b	2cb0 <gomp_map_vars+0x1964>
    2cac:	nop
    2cb0:	ldr	x0, [x29, #488]
    2cb4:	add	x0, x0, #0x1
    2cb8:	str	x0, [x29, #488]
    2cbc:	ldr	x1, [x29, #488]
    2cc0:	ldr	x0, [x29, #64]
    2cc4:	cmp	x1, x0
    2cc8:	b.cc	1fc4 <gomp_map_vars+0xc78>  // b.lo, b.ul, b.last
    2ccc:	ldr	w0, [x29, #24]
    2cd0:	cmp	w0, #0x1
    2cd4:	b.ne	2d44 <gomp_map_vars+0x19f8>  // b.any
    2cd8:	str	xzr, [x29, #488]
    2cdc:	b	2d34 <gomp_map_vars+0x19e8>
    2ce0:	ldr	x2, [x29, #488]
    2ce4:	ldr	x1, [x29, #56]
    2ce8:	ldr	x0, [x29, #448]
    2cec:	bl	1188 <gomp_map_val>
    2cf0:	str	x0, [x29, #160]
    2cf4:	ldr	x0, [x29, #448]
    2cf8:	ldr	x1, [x0, #16]
    2cfc:	ldr	x0, [x29, #488]
    2d00:	lsl	x0, x0, #3
    2d04:	add	x0, x1, x0
    2d08:	mov	x1, x0
    2d0c:	add	x0, x29, #0x88
    2d10:	add	x0, x0, #0x18
    2d14:	ldr	x4, [x29, #440]
    2d18:	mov	x3, #0x8                   	// #8
    2d1c:	mov	x2, x0
    2d20:	ldr	x0, [x29, #72]
    2d24:	bl	800 <gomp_copy_host2dev>
    2d28:	ldr	x0, [x29, #488]
    2d2c:	add	x0, x0, #0x1
    2d30:	str	x0, [x29, #488]
    2d34:	ldr	x1, [x29, #488]
    2d38:	ldr	x0, [x29, #64]
    2d3c:	cmp	x1, x0
    2d40:	b.cc	2ce0 <gomp_map_vars+0x1994>  // b.lo, b.ul, b.last
    2d44:	ldr	x0, [x29, #440]
    2d48:	cmp	x0, #0x0
    2d4c:	b.eq	2e18 <gomp_map_vars+0x1acc>  // b.none
    2d50:	str	xzr, [x29, #376]
    2d54:	str	xzr, [x29, #376]
    2d58:	b	2df8 <gomp_map_vars+0x1aac>
    2d5c:	ldr	x0, [x29, #448]
    2d60:	ldr	x1, [x0, #16]
    2d64:	ldr	x2, [x29, #112]
    2d68:	ldr	x0, [x29, #376]
    2d6c:	lsl	x0, x0, #4
    2d70:	add	x0, x2, x0
    2d74:	ldr	x0, [x0]
    2d78:	add	x0, x1, x0
    2d7c:	mov	x6, x0
    2d80:	ldr	x1, [x29, #96]
    2d84:	ldr	x2, [x29, #112]
    2d88:	ldr	x0, [x29, #376]
    2d8c:	lsl	x0, x0, #4
    2d90:	add	x0, x2, x0
    2d94:	ldr	x2, [x0]
    2d98:	ldr	x0, [x29, #112]
    2d9c:	ldr	x0, [x0]
    2da0:	sub	x0, x2, x0
    2da4:	add	x5, x1, x0
    2da8:	ldr	x1, [x29, #112]
    2dac:	ldr	x0, [x29, #376]
    2db0:	lsl	x0, x0, #4
    2db4:	add	x0, x1, x0
    2db8:	ldr	x1, [x0, #8]
    2dbc:	ldr	x2, [x29, #112]
    2dc0:	ldr	x0, [x29, #376]
    2dc4:	lsl	x0, x0, #4
    2dc8:	add	x0, x2, x0
    2dcc:	ldr	x0, [x0]
    2dd0:	sub	x0, x1, x0
    2dd4:	mov	x4, #0x0                   	// #0
    2dd8:	mov	x3, x0
    2ddc:	mov	x2, x5
    2de0:	mov	x1, x6
    2de4:	ldr	x0, [x29, #72]
    2de8:	bl	800 <gomp_copy_host2dev>
    2dec:	ldr	x0, [x29, #376]
    2df0:	add	x0, x0, #0x1
    2df4:	str	x0, [x29, #376]
    2df8:	ldr	x0, [x29, #120]
    2dfc:	ldr	x1, [x29, #376]
    2e00:	cmp	x1, x0
    2e04:	b.lt	2d5c <gomp_map_vars+0x1a10>  // b.tstop
    2e08:	ldr	x0, [x29, #96]
    2e0c:	bl	0 <free>
    2e10:	str	xzr, [x29, #96]
    2e14:	str	xzr, [x29, #440]
    2e18:	ldr	w0, [x29, #24]
    2e1c:	cmp	w0, #0x3
    2e20:	b.ne	2e40 <gomp_map_vars+0x1af4>  // b.any
    2e24:	ldr	x0, [x29, #448]
    2e28:	ldr	x0, [x0]
    2e2c:	cmp	x0, #0x0
    2e30:	b.ne	2e40 <gomp_map_vars+0x1af4>  // b.any
    2e34:	ldr	x0, [x29, #448]
    2e38:	bl	0 <free>
    2e3c:	str	xzr, [x29, #448]
    2e40:	ldr	x0, [x29, #72]
    2e44:	add	x0, x0, #0xa8
    2e48:	bl	90 <gomp_mutex_unlock>
    2e4c:	ldr	x0, [x29, #448]
    2e50:	mov	sp, x29
    2e54:	ldp	x29, x30, [sp], #496
    2e58:	ret

0000000000002e5c <gomp_unmap_tgt>:
    2e5c:	stp	x29, x30, [sp, #-32]!
    2e60:	mov	x29, sp
    2e64:	str	x0, [sp, #24]
    2e68:	ldr	x0, [sp, #24]
    2e6c:	ldr	x0, [x0, #24]
    2e70:	cmp	x0, #0x0
    2e74:	b.eq	2e94 <gomp_unmap_tgt+0x38>  // b.none
    2e78:	ldr	x0, [sp, #24]
    2e7c:	ldr	x2, [x0, #56]
    2e80:	ldr	x0, [sp, #24]
    2e84:	ldr	x0, [x0, #32]
    2e88:	mov	x1, x0
    2e8c:	mov	x0, x2
    2e90:	bl	9f8 <gomp_free_device_memory>
    2e94:	ldr	x0, [sp, #24]
    2e98:	ldr	x0, [x0, #8]
    2e9c:	bl	0 <free>
    2ea0:	ldr	x0, [sp, #24]
    2ea4:	bl	0 <free>
    2ea8:	nop
    2eac:	ldp	x29, x30, [sp], #32
    2eb0:	ret

0000000000002eb4 <gomp_remove_var>:
    2eb4:	stp	x29, x30, [sp, #-48]!
    2eb8:	mov	x29, sp
    2ebc:	str	x0, [sp, #24]
    2ec0:	str	x1, [sp, #16]
    2ec4:	strb	wzr, [sp, #47]
    2ec8:	ldr	x0, [sp, #24]
    2ecc:	add	x0, x0, #0xa0
    2ed0:	ldr	x1, [sp, #16]
    2ed4:	bl	0 <splay_tree_prefix_splay_tree_remove>
    2ed8:	ldr	x0, [sp, #16]
    2edc:	ldr	x0, [x0, #48]
    2ee0:	cmp	x0, #0x0
    2ee4:	b.eq	2f04 <gomp_remove_var+0x50>  // b.none
    2ee8:	ldr	x0, [sp, #24]
    2eec:	add	x2, x0, #0xa0
    2ef0:	ldr	x0, [sp, #16]
    2ef4:	ldr	x0, [x0, #48]
    2ef8:	mov	x1, x0
    2efc:	mov	x0, x2
    2f00:	bl	0 <splay_tree_prefix_splay_tree_insert>
    2f04:	ldr	x0, [sp, #16]
    2f08:	ldr	x0, [x0, #16]
    2f0c:	ldr	x0, [x0]
    2f10:	cmp	x0, #0x1
    2f14:	b.ls	2f30 <gomp_remove_var+0x7c>  // b.plast
    2f18:	ldr	x0, [sp, #16]
    2f1c:	ldr	x0, [x0, #16]
    2f20:	ldr	x1, [x0]
    2f24:	sub	x1, x1, #0x1
    2f28:	str	x1, [x0]
    2f2c:	b	2f44 <gomp_remove_var+0x90>
    2f30:	mov	w0, #0x1                   	// #1
    2f34:	strb	w0, [sp, #47]
    2f38:	ldr	x0, [sp, #16]
    2f3c:	ldr	x0, [x0, #16]
    2f40:	bl	2e5c <gomp_unmap_tgt>
    2f44:	ldrb	w0, [sp, #47]
    2f48:	ldp	x29, x30, [sp], #48
    2f4c:	ret

0000000000002f50 <gomp_unmap_vars>:
    2f50:	stp	x29, x30, [sp, #-64]!
    2f54:	mov	x29, sp
    2f58:	str	x0, [sp, #24]
    2f5c:	strb	w1, [sp, #23]
    2f60:	ldr	x0, [sp, #24]
    2f64:	ldr	x0, [x0, #56]
    2f68:	str	x0, [sp, #40]
    2f6c:	ldr	x0, [sp, #24]
    2f70:	ldr	x0, [x0, #48]
    2f74:	cmp	x0, #0x0
    2f78:	b.ne	2f88 <gomp_unmap_vars+0x38>  // b.any
    2f7c:	ldr	x0, [sp, #24]
    2f80:	bl	0 <free>
    2f84:	b	31b0 <gomp_unmap_vars+0x260>
    2f88:	ldr	x0, [sp, #40]
    2f8c:	add	x0, x0, #0xa8
    2f90:	bl	1c <gomp_mutex_lock>
    2f94:	ldr	x0, [sp, #40]
    2f98:	ldr	w0, [x0, #172]
    2f9c:	cmp	w0, #0x2
    2fa0:	b.ne	2fc8 <gomp_unmap_vars+0x78>  // b.any
    2fa4:	ldr	x0, [sp, #40]
    2fa8:	add	x0, x0, #0xa8
    2fac:	bl	90 <gomp_mutex_unlock>
    2fb0:	ldr	x0, [sp, #24]
    2fb4:	ldr	x0, [x0, #8]
    2fb8:	bl	0 <free>
    2fbc:	ldr	x0, [sp, #24]
    2fc0:	bl	0 <free>
    2fc4:	b	31b0 <gomp_unmap_vars+0x260>
    2fc8:	str	xzr, [sp, #56]
    2fcc:	b	3160 <gomp_unmap_vars+0x210>
    2fd0:	ldr	x1, [sp, #24]
    2fd4:	ldr	x0, [sp, #56]
    2fd8:	add	x0, x0, #0x2
    2fdc:	lsl	x0, x0, #5
    2fe0:	add	x0, x1, x0
    2fe4:	ldr	x0, [x0]
    2fe8:	str	x0, [sp, #32]
    2fec:	ldr	x0, [sp, #32]
    2ff0:	cmp	x0, #0x0
    2ff4:	b.eq	3150 <gomp_unmap_vars+0x200>  // b.none
    2ff8:	strb	wzr, [sp, #55]
    2ffc:	ldr	x0, [sp, #32]
    3000:	ldr	x0, [x0, #32]
    3004:	cmp	x0, #0x1
    3008:	b.ls	3034 <gomp_unmap_vars+0xe4>  // b.plast
    300c:	ldr	x0, [sp, #32]
    3010:	ldr	x0, [x0, #32]
    3014:	cmn	x0, #0x1
    3018:	b.eq	3034 <gomp_unmap_vars+0xe4>  // b.none
    301c:	ldr	x0, [sp, #32]
    3020:	ldr	x0, [x0, #32]
    3024:	sub	x1, x0, #0x1
    3028:	ldr	x0, [sp, #32]
    302c:	str	x1, [x0, #32]
    3030:	b	3060 <gomp_unmap_vars+0x110>
    3034:	ldr	x0, [sp, #32]
    3038:	ldr	x0, [x0, #32]
    303c:	cmp	x0, #0x1
    3040:	b.ne	3060 <gomp_unmap_vars+0x110>  // b.any
    3044:	ldr	x0, [sp, #32]
    3048:	ldr	x0, [x0, #32]
    304c:	sub	x1, x0, #0x1
    3050:	ldr	x0, [sp, #32]
    3054:	str	x1, [x0, #32]
    3058:	mov	w0, #0x1                   	// #1
    305c:	strb	w0, [sp, #55]
    3060:	ldrb	w0, [sp, #55]
    3064:	cmp	w0, #0x0
    3068:	b.eq	3098 <gomp_unmap_vars+0x148>  // b.none
    306c:	ldrb	w0, [sp, #23]
    3070:	cmp	w0, #0x0
    3074:	b.eq	3098 <gomp_unmap_vars+0x148>  // b.none
    3078:	ldr	x1, [sp, #24]
    307c:	ldr	x0, [sp, #56]
    3080:	add	x0, x0, #0x2
    3084:	lsl	x0, x0, #5
    3088:	add	x0, x1, x0
    308c:	ldrb	w0, [x0, #8]
    3090:	cmp	w0, #0x0
    3094:	b.ne	30b8 <gomp_unmap_vars+0x168>  // b.any
    3098:	ldr	x1, [sp, #24]
    309c:	ldr	x0, [sp, #56]
    30a0:	add	x0, x0, #0x2
    30a4:	lsl	x0, x0, #5
    30a8:	add	x0, x1, x0
    30ac:	ldrb	w0, [x0, #9]
    30b0:	cmp	w0, #0x0
    30b4:	b.eq	3134 <gomp_unmap_vars+0x1e4>  // b.none
    30b8:	ldr	x0, [sp, #32]
    30bc:	ldr	x1, [x0]
    30c0:	ldr	x2, [sp, #24]
    30c4:	ldr	x0, [sp, #56]
    30c8:	lsl	x0, x0, #5
    30cc:	add	x0, x2, x0
    30d0:	ldr	x0, [x0, #80]
    30d4:	add	x0, x1, x0
    30d8:	mov	x4, x0
    30dc:	ldr	x0, [sp, #32]
    30e0:	ldr	x0, [x0, #16]
    30e4:	ldr	x1, [x0, #16]
    30e8:	ldr	x0, [sp, #32]
    30ec:	ldr	x0, [x0, #24]
    30f0:	add	x1, x1, x0
    30f4:	ldr	x2, [sp, #24]
    30f8:	ldr	x0, [sp, #56]
    30fc:	lsl	x0, x0, #5
    3100:	add	x0, x2, x0
    3104:	ldr	x0, [x0, #80]
    3108:	add	x0, x1, x0
    310c:	mov	x2, x0
    3110:	ldr	x1, [sp, #24]
    3114:	ldr	x0, [sp, #56]
    3118:	lsl	x0, x0, #5
    311c:	add	x0, x1, x0
    3120:	ldr	x0, [x0, #88]
    3124:	mov	x3, x0
    3128:	mov	x1, x4
    312c:	ldr	x0, [sp, #40]
    3130:	bl	9a8 <gomp_copy_dev2host>
    3134:	ldrb	w0, [sp, #55]
    3138:	cmp	w0, #0x0
    313c:	b.eq	3154 <gomp_unmap_vars+0x204>  // b.none
    3140:	ldr	x1, [sp, #32]
    3144:	ldr	x0, [sp, #40]
    3148:	bl	2eb4 <gomp_remove_var>
    314c:	b	3154 <gomp_unmap_vars+0x204>
    3150:	nop
    3154:	ldr	x0, [sp, #56]
    3158:	add	x0, x0, #0x1
    315c:	str	x0, [sp, #56]
    3160:	ldr	x0, [sp, #24]
    3164:	ldr	x0, [x0, #48]
    3168:	ldr	x1, [sp, #56]
    316c:	cmp	x1, x0
    3170:	b.cc	2fd0 <gomp_unmap_vars+0x80>  // b.lo, b.ul, b.last
    3174:	ldr	x0, [sp, #24]
    3178:	ldr	x0, [x0]
    317c:	cmp	x0, #0x1
    3180:	b.ls	319c <gomp_unmap_vars+0x24c>  // b.plast
    3184:	ldr	x0, [sp, #24]
    3188:	ldr	x0, [x0]
    318c:	sub	x1, x0, #0x1
    3190:	ldr	x0, [sp, #24]
    3194:	str	x1, [x0]
    3198:	b	31a4 <gomp_unmap_vars+0x254>
    319c:	ldr	x0, [sp, #24]
    31a0:	bl	2e5c <gomp_unmap_tgt>
    31a4:	ldr	x0, [sp, #40]
    31a8:	add	x0, x0, #0xa8
    31ac:	bl	90 <gomp_mutex_unlock>
    31b0:	ldp	x29, x30, [sp], #64
    31b4:	ret

00000000000031b8 <gomp_update>:
    31b8:	stp	x29, x30, [sp, #-176]!
    31bc:	mov	x29, sp
    31c0:	str	x0, [sp, #56]
    31c4:	str	x1, [sp, #48]
    31c8:	str	x2, [sp, #40]
    31cc:	str	x3, [sp, #32]
    31d0:	str	x4, [sp, #24]
    31d4:	strb	w5, [sp, #23]
    31d8:	ldrb	w0, [sp, #23]
    31dc:	cmp	w0, #0x0
    31e0:	b.eq	31ec <gomp_update+0x34>  // b.none
    31e4:	mov	w0, #0xff                  	// #255
    31e8:	b	31f0 <gomp_update+0x38>
    31ec:	mov	w0, #0x7                   	// #7
    31f0:	str	w0, [sp, #164]
    31f4:	ldr	x0, [sp, #56]
    31f8:	cmp	x0, #0x0
    31fc:	b.eq	3434 <gomp_update+0x27c>  // b.none
    3200:	ldr	x0, [sp, #48]
    3204:	cmp	x0, #0x0
    3208:	b.eq	343c <gomp_update+0x284>  // b.none
    320c:	ldr	x0, [sp, #56]
    3210:	add	x0, x0, #0xa8
    3214:	bl	1c <gomp_mutex_lock>
    3218:	ldr	x0, [sp, #56]
    321c:	ldr	w0, [x0, #172]
    3220:	cmp	w0, #0x2
    3224:	b.ne	3238 <gomp_update+0x80>  // b.any
    3228:	ldr	x0, [sp, #56]
    322c:	add	x0, x0, #0xa8
    3230:	bl	90 <gomp_mutex_unlock>
    3234:	b	3440 <gomp_update+0x288>
    3238:	str	xzr, [sp, #168]
    323c:	b	3414 <gomp_update+0x25c>
    3240:	ldr	x0, [sp, #168]
    3244:	lsl	x0, x0, #3
    3248:	ldr	x1, [sp, #32]
    324c:	add	x0, x1, x0
    3250:	ldr	x0, [x0]
    3254:	cmp	x0, #0x0
    3258:	b.eq	3408 <gomp_update+0x250>  // b.none
    325c:	ldr	x0, [sp, #168]
    3260:	lsl	x0, x0, #3
    3264:	ldr	x1, [sp, #40]
    3268:	add	x0, x1, x0
    326c:	ldr	x0, [x0]
    3270:	str	x0, [sp, #64]
    3274:	ldr	x1, [sp, #64]
    3278:	ldr	x0, [sp, #168]
    327c:	lsl	x0, x0, #3
    3280:	ldr	x2, [sp, #32]
    3284:	add	x0, x2, x0
    3288:	ldr	x0, [x0]
    328c:	add	x0, x1, x0
    3290:	str	x0, [sp, #72]
    3294:	ldr	x0, [sp, #56]
    3298:	add	x0, x0, #0xa0
    329c:	add	x1, sp, #0x40
    32a0:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    32a4:	str	x0, [sp, #152]
    32a8:	ldr	x0, [sp, #152]
    32ac:	cmp	x0, #0x0
    32b0:	b.eq	3408 <gomp_update+0x250>  // b.none
    32b4:	ldr	x0, [sp, #168]
    32b8:	mov	w2, w0
    32bc:	ldr	x1, [sp, #24]
    32c0:	ldrb	w0, [sp, #23]
    32c4:	bl	c64 <get_kind>
    32c8:	str	w0, [sp, #148]
    32cc:	ldr	x0, [sp, #152]
    32d0:	ldr	x1, [x0]
    32d4:	ldr	x0, [sp, #64]
    32d8:	cmp	x1, x0
    32dc:	b.hi	32f4 <gomp_update+0x13c>  // b.pmore
    32e0:	ldr	x0, [sp, #152]
    32e4:	ldr	x1, [x0, #8]
    32e8:	ldr	x0, [sp, #72]
    32ec:	cmp	x1, x0
    32f0:	b.cs	3334 <gomp_update+0x17c>  // b.hs, b.nlast
    32f4:	ldr	x0, [sp, #56]
    32f8:	add	x0, x0, #0xa8
    32fc:	bl	90 <gomp_mutex_unlock>
    3300:	ldr	x0, [sp, #64]
    3304:	mov	x1, x0
    3308:	ldr	x0, [sp, #72]
    330c:	mov	x2, x0
    3310:	ldr	x0, [sp, #152]
    3314:	ldr	x0, [x0]
    3318:	mov	x3, x0
    331c:	ldr	x0, [sp, #152]
    3320:	ldr	x0, [x0, #8]
    3324:	mov	x4, x0
    3328:	adrp	x0, 0 <gomp_mutex_init>
    332c:	add	x0, x0, #0x0
    3330:	bl	0 <gomp_fatal>
    3334:	ldr	x0, [sp, #64]
    3338:	str	x0, [sp, #136]
    333c:	ldr	x0, [sp, #152]
    3340:	ldr	x0, [x0, #16]
    3344:	ldr	x1, [x0, #16]
    3348:	ldr	x0, [sp, #152]
    334c:	ldr	x0, [x0, #24]
    3350:	add	x1, x1, x0
    3354:	ldr	x0, [sp, #64]
    3358:	add	x1, x1, x0
    335c:	ldr	x0, [sp, #152]
    3360:	ldr	x0, [x0]
    3364:	sub	x0, x1, x0
    3368:	str	x0, [sp, #128]
    336c:	ldr	x1, [sp, #72]
    3370:	ldr	x0, [sp, #64]
    3374:	sub	x0, x1, x0
    3378:	str	x0, [sp, #120]
    337c:	ldr	w1, [sp, #148]
    3380:	ldr	w0, [sp, #164]
    3384:	and	w0, w1, w0
    3388:	and	w0, w0, #0xc
    338c:	cmp	w0, #0x0
    3390:	b.ne	33c4 <gomp_update+0x20c>  // b.any
    3394:	ldr	w1, [sp, #148]
    3398:	ldr	w0, [sp, #164]
    339c:	and	w0, w1, w0
    33a0:	and	w0, w0, #0x1
    33a4:	cmp	w0, #0x0
    33a8:	b.eq	33c4 <gomp_update+0x20c>  // b.none
    33ac:	mov	x4, #0x0                   	// #0
    33b0:	ldr	x3, [sp, #120]
    33b4:	ldr	x2, [sp, #136]
    33b8:	ldr	x1, [sp, #128]
    33bc:	ldr	x0, [sp, #56]
    33c0:	bl	800 <gomp_copy_host2dev>
    33c4:	ldr	w1, [sp, #148]
    33c8:	ldr	w0, [sp, #164]
    33cc:	and	w0, w1, w0
    33d0:	and	w0, w0, #0xc
    33d4:	cmp	w0, #0x0
    33d8:	b.ne	3408 <gomp_update+0x250>  // b.any
    33dc:	ldr	w1, [sp, #148]
    33e0:	ldr	w0, [sp, #164]
    33e4:	and	w0, w1, w0
    33e8:	and	w0, w0, #0x2
    33ec:	cmp	w0, #0x0
    33f0:	b.eq	3408 <gomp_update+0x250>  // b.none
    33f4:	ldr	x3, [sp, #120]
    33f8:	ldr	x2, [sp, #128]
    33fc:	ldr	x1, [sp, #136]
    3400:	ldr	x0, [sp, #56]
    3404:	bl	9a8 <gomp_copy_dev2host>
    3408:	ldr	x0, [sp, #168]
    340c:	add	x0, x0, #0x1
    3410:	str	x0, [sp, #168]
    3414:	ldr	x1, [sp, #168]
    3418:	ldr	x0, [sp, #48]
    341c:	cmp	x1, x0
    3420:	b.cc	3240 <gomp_update+0x88>  // b.lo, b.ul, b.last
    3424:	ldr	x0, [sp, #56]
    3428:	add	x0, x0, #0xa8
    342c:	bl	90 <gomp_mutex_unlock>
    3430:	b	3440 <gomp_update+0x288>
    3434:	nop
    3438:	b	3440 <gomp_update+0x288>
    343c:	nop
    3440:	ldp	x29, x30, [sp], #176
    3444:	ret

0000000000003448 <gomp_load_image_to_device>:
    3448:	stp	x29, x30, [sp, #-176]!
    344c:	mov	x29, sp
    3450:	str	x0, [sp, #40]
    3454:	str	w1, [sp, #36]
    3458:	str	x2, [sp, #24]
    345c:	str	x3, [sp, #16]
    3460:	strb	w4, [sp, #35]
    3464:	ldr	x0, [sp, #24]
    3468:	ldr	x0, [x0]
    346c:	str	x0, [sp, #152]
    3470:	ldr	x0, [sp, #24]
    3474:	ldr	x0, [x0, #8]
    3478:	str	x0, [sp, #144]
    347c:	ldr	x0, [sp, #24]
    3480:	ldr	x0, [x0, #16]
    3484:	str	x0, [sp, #136]
    3488:	ldr	x0, [sp, #24]
    348c:	ldr	x0, [x0, #24]
    3490:	str	x0, [sp, #128]
    3494:	ldr	x1, [sp, #144]
    3498:	ldr	x0, [sp, #152]
    349c:	sub	x0, x1, x0
    34a0:	asr	x0, x0, #3
    34a4:	str	w0, [sp, #124]
    34a8:	ldr	x1, [sp, #128]
    34ac:	ldr	x0, [sp, #136]
    34b0:	sub	x0, x1, x0
    34b4:	asr	x0, x0, #3
    34b8:	lsr	x1, x0, #63
    34bc:	add	x0, x1, x0
    34c0:	asr	x0, x0, #1
    34c4:	str	w0, [sp, #120]
    34c8:	str	xzr, [sp, #48]
    34cc:	ldr	x0, [sp, #40]
    34d0:	ldr	x4, [x0, #80]
    34d4:	ldr	x0, [sp, #40]
    34d8:	ldr	w0, [x0, #12]
    34dc:	add	x1, sp, #0x30
    34e0:	mov	x3, x1
    34e4:	ldr	x2, [sp, #16]
    34e8:	ldr	w1, [sp, #36]
    34ec:	blr	x4
    34f0:	str	w0, [sp, #116]
    34f4:	ldr	w1, [sp, #124]
    34f8:	ldr	w0, [sp, #120]
    34fc:	add	w0, w1, w0
    3500:	ldr	w1, [sp, #116]
    3504:	cmp	w1, w0
    3508:	b.eq	3550 <gomp_load_image_to_device+0x108>  // b.none
    350c:	ldr	x0, [sp, #40]
    3510:	add	x0, x0, #0xa8
    3514:	bl	90 <gomp_mutex_unlock>
    3518:	ldrb	w0, [sp, #35]
    351c:	cmp	w0, #0x0
    3520:	b.eq	3530 <gomp_load_image_to_device+0xe8>  // b.none
    3524:	adrp	x0, 0 <gomp_mutex_init>
    3528:	add	x0, x0, #0x0
    352c:	bl	90 <gomp_mutex_unlock>
    3530:	ldr	w1, [sp, #124]
    3534:	ldr	w0, [sp, #120]
    3538:	add	w0, w1, w0
    353c:	ldr	w2, [sp, #116]
    3540:	mov	w1, w0
    3544:	adrp	x0, 0 <gomp_mutex_init>
    3548:	add	x0, x0, #0x0
    354c:	bl	0 <gomp_fatal>
    3550:	mov	x0, #0x40                  	// #64
    3554:	bl	0 <gomp_malloc>
    3558:	str	x0, [sp, #104]
    355c:	ldr	w1, [sp, #124]
    3560:	ldr	w0, [sp, #120]
    3564:	add	w0, w1, w0
    3568:	sxtw	x1, w0
    356c:	mov	x0, x1
    3570:	lsl	x0, x0, #3
    3574:	add	x0, x0, x1
    3578:	lsl	x0, x0, #3
    357c:	bl	0 <gomp_malloc>
    3580:	mov	x1, x0
    3584:	ldr	x0, [sp, #104]
    3588:	str	x1, [x0, #8]
    358c:	ldr	x0, [sp, #104]
    3590:	mov	x1, #0xffffffffffffffff    	// #-1
    3594:	str	x1, [x0]
    3598:	ldr	x0, [sp, #104]
    359c:	str	xzr, [x0, #16]
    35a0:	ldr	x0, [sp, #104]
    35a4:	str	xzr, [x0, #24]
    35a8:	ldr	x0, [sp, #104]
    35ac:	str	xzr, [x0, #32]
    35b0:	ldr	x0, [sp, #104]
    35b4:	str	xzr, [x0, #40]
    35b8:	ldr	x0, [sp, #104]
    35bc:	str	xzr, [x0, #48]
    35c0:	ldr	x0, [sp, #104]
    35c4:	ldr	x1, [sp, #40]
    35c8:	str	x1, [x0, #56]
    35cc:	ldr	x0, [sp, #104]
    35d0:	ldr	x0, [x0, #8]
    35d4:	str	x0, [sp, #160]
    35d8:	str	wzr, [sp, #172]
    35dc:	b	3690 <gomp_load_image_to_device+0x248>
    35e0:	ldr	x0, [sp, #160]
    35e4:	str	x0, [sp, #56]
    35e8:	ldrsw	x0, [sp, #172]
    35ec:	lsl	x0, x0, #3
    35f0:	ldr	x1, [sp, #152]
    35f4:	add	x0, x1, x0
    35f8:	ldr	x0, [x0]
    35fc:	mov	x1, x0
    3600:	ldr	x0, [sp, #56]
    3604:	str	x1, [x0]
    3608:	ldr	x0, [sp, #56]
    360c:	ldr	x0, [x0]
    3610:	add	x1, x0, #0x1
    3614:	ldr	x0, [sp, #56]
    3618:	str	x1, [x0, #8]
    361c:	ldr	x0, [sp, #56]
    3620:	ldr	x1, [sp, #104]
    3624:	str	x1, [x0, #16]
    3628:	ldr	x1, [sp, #48]
    362c:	ldrsw	x0, [sp, #172]
    3630:	lsl	x0, x0, #4
    3634:	add	x0, x1, x0
    3638:	ldr	x1, [x0]
    363c:	ldr	x0, [sp, #56]
    3640:	str	x1, [x0, #24]
    3644:	ldr	x0, [sp, #56]
    3648:	mov	x1, #0xffffffffffffffff    	// #-1
    364c:	str	x1, [x0, #32]
    3650:	ldr	x0, [sp, #56]
    3654:	str	xzr, [x0, #48]
    3658:	ldr	x0, [sp, #160]
    365c:	str	xzr, [x0, #56]
    3660:	ldr	x0, [sp, #160]
    3664:	str	xzr, [x0, #64]
    3668:	ldr	x0, [sp, #40]
    366c:	add	x0, x0, #0xa0
    3670:	ldr	x1, [sp, #160]
    3674:	bl	0 <splay_tree_prefix_splay_tree_insert>
    3678:	ldr	x0, [sp, #160]
    367c:	add	x0, x0, #0x48
    3680:	str	x0, [sp, #160]
    3684:	ldr	w0, [sp, #172]
    3688:	add	w0, w0, #0x1
    368c:	str	w0, [sp, #172]
    3690:	ldr	w1, [sp, #172]
    3694:	ldr	w0, [sp, #124]
    3698:	cmp	w1, w0
    369c:	b.lt	35e0 <gomp_load_image_to_device+0x198>  // b.tstop
    36a0:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    36a4:	str	x0, [sp, #96]
    36a8:	ldr	x0, [sp, #96]
    36ac:	mvn	x0, x0
    36b0:	str	x0, [sp, #88]
    36b4:	str	wzr, [sp, #172]
    36b8:	b	3848 <gomp_load_image_to_device+0x400>
    36bc:	ldr	x1, [sp, #48]
    36c0:	ldr	w2, [sp, #124]
    36c4:	ldr	w0, [sp, #172]
    36c8:	add	w0, w2, w0
    36cc:	sxtw	x0, w0
    36d0:	lsl	x0, x0, #4
    36d4:	add	x0, x1, x0
    36d8:	str	x0, [sp, #80]
    36dc:	ldr	x0, [sp, #80]
    36e0:	ldr	x1, [x0, #8]
    36e4:	ldr	x0, [sp, #80]
    36e8:	ldr	x0, [x0]
    36ec:	sub	x0, x1, x0
    36f0:	str	x0, [sp, #72]
    36f4:	ldr	w0, [sp, #172]
    36f8:	lsl	w0, w0, #1
    36fc:	sxtw	x0, w0
    3700:	add	x0, x0, #0x1
    3704:	lsl	x0, x0, #3
    3708:	ldr	x1, [sp, #136]
    370c:	add	x0, x1, x0
    3710:	ldr	x0, [x0]
    3714:	mov	x1, x0
    3718:	ldr	x0, [sp, #72]
    371c:	cmp	x0, x1
    3720:	b.eq	3754 <gomp_load_image_to_device+0x30c>  // b.none
    3724:	ldr	x0, [sp, #40]
    3728:	add	x0, x0, #0xa8
    372c:	bl	90 <gomp_mutex_unlock>
    3730:	ldrb	w0, [sp, #35]
    3734:	cmp	w0, #0x0
    3738:	b.eq	3748 <gomp_load_image_to_device+0x300>  // b.none
    373c:	adrp	x0, 0 <gomp_mutex_init>
    3740:	add	x0, x0, #0x0
    3744:	bl	90 <gomp_mutex_unlock>
    3748:	adrp	x0, 0 <gomp_mutex_init>
    374c:	add	x0, x0, #0x0
    3750:	bl	0 <gomp_fatal>
    3754:	ldr	x0, [sp, #160]
    3758:	str	x0, [sp, #64]
    375c:	ldr	w0, [sp, #172]
    3760:	lsl	w0, w0, #1
    3764:	sxtw	x0, w0
    3768:	lsl	x0, x0, #3
    376c:	ldr	x1, [sp, #136]
    3770:	add	x0, x1, x0
    3774:	ldr	x0, [x0]
    3778:	mov	x1, x0
    377c:	ldr	x0, [sp, #64]
    3780:	str	x1, [x0]
    3784:	ldr	x0, [sp, #64]
    3788:	ldr	x1, [x0]
    378c:	ldr	w0, [sp, #172]
    3790:	lsl	w0, w0, #1
    3794:	sxtw	x0, w0
    3798:	add	x0, x0, #0x1
    379c:	lsl	x0, x0, #3
    37a0:	ldr	x2, [sp, #136]
    37a4:	add	x0, x2, x0
    37a8:	ldr	x0, [x0]
    37ac:	mov	x2, x0
    37b0:	ldr	x0, [sp, #88]
    37b4:	and	x0, x2, x0
    37b8:	add	x1, x1, x0
    37bc:	ldr	x0, [sp, #64]
    37c0:	str	x1, [x0, #8]
    37c4:	ldr	x0, [sp, #64]
    37c8:	ldr	x1, [sp, #104]
    37cc:	str	x1, [x0, #16]
    37d0:	ldr	x0, [sp, #80]
    37d4:	ldr	x1, [x0]
    37d8:	ldr	x0, [sp, #64]
    37dc:	str	x1, [x0, #24]
    37e0:	ldr	x1, [sp, #72]
    37e4:	ldr	x0, [sp, #96]
    37e8:	and	x0, x1, x0
    37ec:	cmp	x0, #0x0
    37f0:	b.eq	37fc <gomp_load_image_to_device+0x3b4>  // b.none
    37f4:	mov	x0, #0xfffffffffffffffe    	// #-2
    37f8:	b	3800 <gomp_load_image_to_device+0x3b8>
    37fc:	mov	x0, #0xffffffffffffffff    	// #-1
    3800:	ldr	x1, [sp, #64]
    3804:	str	x0, [x1, #32]
    3808:	ldr	x0, [sp, #64]
    380c:	str	xzr, [x0, #48]
    3810:	ldr	x0, [sp, #160]
    3814:	str	xzr, [x0, #56]
    3818:	ldr	x0, [sp, #160]
    381c:	str	xzr, [x0, #64]
    3820:	ldr	x0, [sp, #40]
    3824:	add	x0, x0, #0xa0
    3828:	ldr	x1, [sp, #160]
    382c:	bl	0 <splay_tree_prefix_splay_tree_insert>
    3830:	ldr	x0, [sp, #160]
    3834:	add	x0, x0, #0x48
    3838:	str	x0, [sp, #160]
    383c:	ldr	w0, [sp, #172]
    3840:	add	w0, w0, #0x1
    3844:	str	w0, [sp, #172]
    3848:	ldr	w1, [sp, #172]
    384c:	ldr	w0, [sp, #120]
    3850:	cmp	w1, w0
    3854:	b.lt	36bc <gomp_load_image_to_device+0x274>  // b.tstop
    3858:	ldr	x0, [sp, #48]
    385c:	bl	0 <free>
    3860:	nop
    3864:	ldp	x29, x30, [sp], #176
    3868:	ret

000000000000386c <gomp_unload_image_from_device>:
    386c:	stp	x29, x30, [sp, #-192]!
    3870:	mov	x29, sp
    3874:	str	x0, [sp, #40]
    3878:	str	w1, [sp, #36]
    387c:	str	x2, [sp, #24]
    3880:	str	x3, [sp, #16]
    3884:	ldr	x0, [sp, #24]
    3888:	ldr	x0, [x0]
    388c:	str	x0, [sp, #168]
    3890:	ldr	x0, [sp, #24]
    3894:	ldr	x0, [x0, #8]
    3898:	str	x0, [sp, #160]
    389c:	ldr	x0, [sp, #24]
    38a0:	ldr	x0, [x0, #16]
    38a4:	str	x0, [sp, #152]
    38a8:	ldr	x0, [sp, #24]
    38ac:	ldr	x0, [x0, #24]
    38b0:	str	x0, [sp, #144]
    38b4:	ldr	x1, [sp, #160]
    38b8:	ldr	x0, [sp, #168]
    38bc:	sub	x0, x1, x0
    38c0:	asr	x0, x0, #3
    38c4:	str	w0, [sp, #140]
    38c8:	ldr	x1, [sp, #144]
    38cc:	ldr	x0, [sp, #152]
    38d0:	sub	x0, x1, x0
    38d4:	asr	x0, x0, #3
    38d8:	lsr	x1, x0, #63
    38dc:	add	x0, x1, x0
    38e0:	asr	x0, x0, #1
    38e4:	str	w0, [sp, #136]
    38e8:	str	xzr, [sp, #184]
    38ec:	ldr	w0, [sp, #140]
    38f0:	cmp	w0, #0x0
    38f4:	b.ne	3904 <gomp_unload_image_from_device+0x98>  // b.any
    38f8:	ldr	w0, [sp, #136]
    38fc:	cmp	w0, #0x0
    3900:	b.eq	3948 <gomp_unload_image_from_device+0xdc>  // b.none
    3904:	ldr	w0, [sp, #140]
    3908:	cmp	w0, #0x0
    390c:	b.eq	391c <gomp_unload_image_from_device+0xb0>  // b.none
    3910:	ldr	x0, [sp, #168]
    3914:	ldr	x0, [x0]
    3918:	b	3924 <gomp_unload_image_from_device+0xb8>
    391c:	ldr	x0, [sp, #152]
    3920:	ldr	x0, [x0]
    3924:	str	x0, [sp, #56]
    3928:	ldr	x0, [sp, #56]
    392c:	add	x0, x0, #0x1
    3930:	str	x0, [sp, #64]
    3934:	ldr	x0, [sp, #40]
    3938:	add	x0, x0, #0xa0
    393c:	add	x1, sp, #0x38
    3940:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    3944:	str	x0, [sp, #184]
    3948:	ldr	x0, [sp, #40]
    394c:	ldr	x3, [x0, #88]
    3950:	ldr	x0, [sp, #40]
    3954:	ldr	w0, [x0, #12]
    3958:	ldr	x2, [sp, #16]
    395c:	ldr	w1, [sp, #36]
    3960:	blr	x3
    3964:	and	w0, w0, #0xff
    3968:	eor	w0, w0, #0x1
    396c:	and	w0, w0, #0xff
    3970:	cmp	w0, #0x0
    3974:	b.eq	3990 <gomp_unload_image_from_device+0x124>  // b.none
    3978:	ldr	x0, [sp, #40]
    397c:	add	x0, x0, #0xa8
    3980:	bl	90 <gomp_mutex_unlock>
    3984:	adrp	x0, 0 <gomp_mutex_init>
    3988:	add	x0, x0, #0x0
    398c:	bl	0 <gomp_fatal>
    3990:	str	wzr, [sp, #180]
    3994:	b	39d8 <gomp_unload_image_from_device+0x16c>
    3998:	ldrsw	x0, [sp, #180]
    399c:	lsl	x0, x0, #3
    39a0:	ldr	x1, [sp, #168]
    39a4:	add	x0, x1, x0
    39a8:	ldr	x0, [x0]
    39ac:	str	x0, [sp, #56]
    39b0:	ldr	x0, [sp, #56]
    39b4:	add	x0, x0, #0x1
    39b8:	str	x0, [sp, #64]
    39bc:	ldr	x0, [sp, #40]
    39c0:	add	x0, x0, #0xa0
    39c4:	add	x1, sp, #0x38
    39c8:	bl	0 <splay_tree_prefix_splay_tree_remove>
    39cc:	ldr	w0, [sp, #180]
    39d0:	add	w0, w0, #0x1
    39d4:	str	w0, [sp, #180]
    39d8:	ldr	w1, [sp, #180]
    39dc:	ldr	w0, [sp, #140]
    39e0:	cmp	w1, w0
    39e4:	b.lt	3998 <gomp_unload_image_from_device+0x12c>  // b.tstop
    39e8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    39ec:	str	x0, [sp, #128]
    39f0:	ldr	x0, [sp, #128]
    39f4:	mvn	x0, x0
    39f8:	str	x0, [sp, #120]
    39fc:	strb	wzr, [sp, #179]
    3a00:	str	wzr, [sp, #180]
    3a04:	b	3ad8 <gomp_unload_image_from_device+0x26c>
    3a08:	ldr	w0, [sp, #180]
    3a0c:	lsl	w0, w0, #1
    3a10:	sxtw	x0, w0
    3a14:	lsl	x0, x0, #3
    3a18:	ldr	x1, [sp, #152]
    3a1c:	add	x0, x1, x0
    3a20:	ldr	x0, [x0]
    3a24:	str	x0, [sp, #56]
    3a28:	ldr	x1, [sp, #56]
    3a2c:	ldr	w0, [sp, #180]
    3a30:	lsl	w0, w0, #1
    3a34:	sxtw	x0, w0
    3a38:	add	x0, x0, #0x1
    3a3c:	lsl	x0, x0, #3
    3a40:	ldr	x2, [sp, #152]
    3a44:	add	x0, x2, x0
    3a48:	ldr	x0, [x0]
    3a4c:	mov	x2, x0
    3a50:	ldr	x0, [sp, #120]
    3a54:	and	x0, x2, x0
    3a58:	add	x0, x1, x0
    3a5c:	str	x0, [sp, #64]
    3a60:	ldr	w0, [sp, #180]
    3a64:	lsl	w0, w0, #1
    3a68:	sxtw	x0, w0
    3a6c:	add	x0, x0, #0x1
    3a70:	lsl	x0, x0, #3
    3a74:	ldr	x1, [sp, #152]
    3a78:	add	x0, x1, x0
    3a7c:	ldr	x0, [x0]
    3a80:	mov	x1, x0
    3a84:	ldr	x0, [sp, #128]
    3a88:	and	x0, x1, x0
    3a8c:	cmp	x0, #0x0
    3a90:	b.ne	3aa8 <gomp_unload_image_from_device+0x23c>  // b.any
    3a94:	ldr	x0, [sp, #40]
    3a98:	add	x0, x0, #0xa0
    3a9c:	add	x1, sp, #0x38
    3aa0:	bl	0 <splay_tree_prefix_splay_tree_remove>
    3aa4:	b	3acc <gomp_unload_image_from_device+0x260>
    3aa8:	ldr	x0, [sp, #40]
    3aac:	add	x0, x0, #0xa0
    3ab0:	add	x1, sp, #0x38
    3ab4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    3ab8:	str	x0, [sp, #112]
    3abc:	ldr	x1, [sp, #112]
    3ac0:	ldr	x0, [sp, #40]
    3ac4:	bl	2eb4 <gomp_remove_var>
    3ac8:	strb	w0, [sp, #179]
    3acc:	ldr	w0, [sp, #180]
    3ad0:	add	w0, w0, #0x1
    3ad4:	str	w0, [sp, #180]
    3ad8:	ldr	w1, [sp, #180]
    3adc:	ldr	w0, [sp, #136]
    3ae0:	cmp	w1, w0
    3ae4:	b.lt	3a08 <gomp_unload_image_from_device+0x19c>  // b.tstop
    3ae8:	ldr	x0, [sp, #184]
    3aec:	cmp	x0, #0x0
    3af0:	b.eq	3b1c <gomp_unload_image_from_device+0x2b0>  // b.none
    3af4:	ldrb	w0, [sp, #179]
    3af8:	eor	w0, w0, #0x1
    3afc:	and	w0, w0, #0xff
    3b00:	cmp	w0, #0x0
    3b04:	b.eq	3b1c <gomp_unload_image_from_device+0x2b0>  // b.none
    3b08:	ldr	x0, [sp, #184]
    3b0c:	ldr	x0, [x0, #16]
    3b10:	bl	0 <free>
    3b14:	ldr	x0, [sp, #184]
    3b18:	bl	0 <free>
    3b1c:	nop
    3b20:	ldp	x29, x30, [sp], #192
    3b24:	ret

0000000000003b28 <GOMP_offload_register_ver>:
    3b28:	stp	x29, x30, [sp, #-64]!
    3b2c:	mov	x29, sp
    3b30:	str	w0, [sp, #44]
    3b34:	str	x1, [sp, #32]
    3b38:	str	w2, [sp, #40]
    3b3c:	str	x3, [sp, #24]
    3b40:	ldr	w0, [sp, #44]
    3b44:	lsr	w0, w0, #16
    3b48:	cmp	w0, #0x1
    3b4c:	b.ls	3b6c <GOMP_offload_register_ver+0x44>  // b.plast
    3b50:	ldr	w0, [sp, #44]
    3b54:	lsr	w0, w0, #16
    3b58:	mov	w2, w0
    3b5c:	mov	w1, #0x1                   	// #1
    3b60:	adrp	x0, 0 <gomp_mutex_init>
    3b64:	add	x0, x0, #0x0
    3b68:	bl	0 <gomp_fatal>
    3b6c:	adrp	x0, 0 <gomp_mutex_init>
    3b70:	add	x0, x0, #0x0
    3b74:	bl	1c <gomp_mutex_lock>
    3b78:	str	wzr, [sp, #60]
    3b7c:	b	3c10 <GOMP_offload_register_ver+0xe8>
    3b80:	adrp	x0, 0 <gomp_mutex_init>
    3b84:	add	x0, x0, #0x0
    3b88:	ldr	x2, [x0]
    3b8c:	ldrsw	x1, [sp, #60]
    3b90:	mov	x0, x1
    3b94:	lsl	x0, x0, #2
    3b98:	add	x0, x0, x1
    3b9c:	lsl	x0, x0, #2
    3ba0:	sub	x0, x0, x1
    3ba4:	lsl	x0, x0, #4
    3ba8:	add	x0, x2, x0
    3bac:	str	x0, [sp, #48]
    3bb0:	ldr	x0, [sp, #48]
    3bb4:	add	x0, x0, #0xa8
    3bb8:	bl	1c <gomp_mutex_lock>
    3bbc:	ldr	x0, [sp, #48]
    3bc0:	ldr	w1, [x0, #16]
    3bc4:	ldr	w0, [sp, #40]
    3bc8:	cmp	w1, w0
    3bcc:	b.ne	3bf8 <GOMP_offload_register_ver+0xd0>  // b.any
    3bd0:	ldr	x0, [sp, #48]
    3bd4:	ldr	w0, [x0, #172]
    3bd8:	cmp	w0, #0x1
    3bdc:	b.ne	3bf8 <GOMP_offload_register_ver+0xd0>  // b.any
    3be0:	mov	w4, #0x1                   	// #1
    3be4:	ldr	x3, [sp, #24]
    3be8:	ldr	x2, [sp, #32]
    3bec:	ldr	w1, [sp, #44]
    3bf0:	ldr	x0, [sp, #48]
    3bf4:	bl	3448 <gomp_load_image_to_device>
    3bf8:	ldr	x0, [sp, #48]
    3bfc:	add	x0, x0, #0xa8
    3c00:	bl	90 <gomp_mutex_unlock>
    3c04:	ldr	w0, [sp, #60]
    3c08:	add	w0, w0, #0x1
    3c0c:	str	w0, [sp, #60]
    3c10:	adrp	x0, 0 <gomp_mutex_init>
    3c14:	add	x0, x0, #0x0
    3c18:	ldr	w0, [x0]
    3c1c:	ldr	w1, [sp, #60]
    3c20:	cmp	w1, w0
    3c24:	b.lt	3b80 <GOMP_offload_register_ver+0x58>  // b.tstop
    3c28:	adrp	x0, 0 <gomp_mutex_init>
    3c2c:	add	x0, x0, #0x0
    3c30:	ldr	x2, [x0]
    3c34:	adrp	x0, 0 <gomp_mutex_init>
    3c38:	add	x0, x0, #0x0
    3c3c:	ldr	w0, [x0]
    3c40:	add	w0, w0, #0x1
    3c44:	sxtw	x1, w0
    3c48:	mov	x0, x1
    3c4c:	lsl	x0, x0, #1
    3c50:	add	x0, x0, x1
    3c54:	lsl	x0, x0, #3
    3c58:	mov	x1, x0
    3c5c:	mov	x0, x2
    3c60:	bl	17c <gomp_realloc_unlock>
    3c64:	mov	x1, x0
    3c68:	adrp	x0, 0 <gomp_mutex_init>
    3c6c:	add	x0, x0, #0x0
    3c70:	str	x1, [x0]
    3c74:	adrp	x0, 0 <gomp_mutex_init>
    3c78:	add	x0, x0, #0x0
    3c7c:	ldr	x2, [x0]
    3c80:	adrp	x0, 0 <gomp_mutex_init>
    3c84:	add	x0, x0, #0x0
    3c88:	ldr	w0, [x0]
    3c8c:	sxtw	x1, w0
    3c90:	mov	x0, x1
    3c94:	lsl	x0, x0, #1
    3c98:	add	x0, x0, x1
    3c9c:	lsl	x0, x0, #3
    3ca0:	add	x0, x2, x0
    3ca4:	ldr	w1, [sp, #44]
    3ca8:	str	w1, [x0]
    3cac:	adrp	x0, 0 <gomp_mutex_init>
    3cb0:	add	x0, x0, #0x0
    3cb4:	ldr	x2, [x0]
    3cb8:	adrp	x0, 0 <gomp_mutex_init>
    3cbc:	add	x0, x0, #0x0
    3cc0:	ldr	w0, [x0]
    3cc4:	sxtw	x1, w0
    3cc8:	mov	x0, x1
    3ccc:	lsl	x0, x0, #1
    3cd0:	add	x0, x0, x1
    3cd4:	lsl	x0, x0, #3
    3cd8:	add	x0, x2, x0
    3cdc:	ldr	w1, [sp, #40]
    3ce0:	str	w1, [x0, #4]
    3ce4:	adrp	x0, 0 <gomp_mutex_init>
    3ce8:	add	x0, x0, #0x0
    3cec:	ldr	x2, [x0]
    3cf0:	adrp	x0, 0 <gomp_mutex_init>
    3cf4:	add	x0, x0, #0x0
    3cf8:	ldr	w0, [x0]
    3cfc:	sxtw	x1, w0
    3d00:	mov	x0, x1
    3d04:	lsl	x0, x0, #1
    3d08:	add	x0, x0, x1
    3d0c:	lsl	x0, x0, #3
    3d10:	add	x0, x2, x0
    3d14:	ldr	x1, [sp, #32]
    3d18:	str	x1, [x0, #8]
    3d1c:	adrp	x0, 0 <gomp_mutex_init>
    3d20:	add	x0, x0, #0x0
    3d24:	ldr	x2, [x0]
    3d28:	adrp	x0, 0 <gomp_mutex_init>
    3d2c:	add	x0, x0, #0x0
    3d30:	ldr	w0, [x0]
    3d34:	sxtw	x1, w0
    3d38:	mov	x0, x1
    3d3c:	lsl	x0, x0, #1
    3d40:	add	x0, x0, x1
    3d44:	lsl	x0, x0, #3
    3d48:	add	x0, x2, x0
    3d4c:	ldr	x1, [sp, #24]
    3d50:	str	x1, [x0, #16]
    3d54:	adrp	x0, 0 <gomp_mutex_init>
    3d58:	add	x0, x0, #0x0
    3d5c:	ldr	w0, [x0]
    3d60:	add	w1, w0, #0x1
    3d64:	adrp	x0, 0 <gomp_mutex_init>
    3d68:	add	x0, x0, #0x0
    3d6c:	str	w1, [x0]
    3d70:	adrp	x0, 0 <gomp_mutex_init>
    3d74:	add	x0, x0, #0x0
    3d78:	bl	90 <gomp_mutex_unlock>
    3d7c:	nop
    3d80:	ldp	x29, x30, [sp], #64
    3d84:	ret

0000000000003d88 <GOMP_offload_register>:
    3d88:	stp	x29, x30, [sp, #-48]!
    3d8c:	mov	x29, sp
    3d90:	str	x0, [sp, #40]
    3d94:	str	w1, [sp, #36]
    3d98:	str	x2, [sp, #24]
    3d9c:	ldr	x3, [sp, #24]
    3da0:	ldr	w2, [sp, #36]
    3da4:	ldr	x1, [sp, #40]
    3da8:	mov	w0, #0x0                   	// #0
    3dac:	bl	3b28 <GOMP_offload_register_ver>
    3db0:	nop
    3db4:	ldp	x29, x30, [sp], #48
    3db8:	ret

0000000000003dbc <GOMP_offload_unregister_ver>:
    3dbc:	stp	x29, x30, [sp, #-64]!
    3dc0:	mov	x29, sp
    3dc4:	str	w0, [sp, #44]
    3dc8:	str	x1, [sp, #32]
    3dcc:	str	w2, [sp, #40]
    3dd0:	str	x3, [sp, #24]
    3dd4:	adrp	x0, 0 <gomp_mutex_init>
    3dd8:	add	x0, x0, #0x0
    3ddc:	bl	1c <gomp_mutex_lock>
    3de0:	str	wzr, [sp, #60]
    3de4:	b	3e74 <GOMP_offload_unregister_ver+0xb8>
    3de8:	adrp	x0, 0 <gomp_mutex_init>
    3dec:	add	x0, x0, #0x0
    3df0:	ldr	x2, [x0]
    3df4:	ldrsw	x1, [sp, #60]
    3df8:	mov	x0, x1
    3dfc:	lsl	x0, x0, #2
    3e00:	add	x0, x0, x1
    3e04:	lsl	x0, x0, #2
    3e08:	sub	x0, x0, x1
    3e0c:	lsl	x0, x0, #4
    3e10:	add	x0, x2, x0
    3e14:	str	x0, [sp, #48]
    3e18:	ldr	x0, [sp, #48]
    3e1c:	add	x0, x0, #0xa8
    3e20:	bl	1c <gomp_mutex_lock>
    3e24:	ldr	x0, [sp, #48]
    3e28:	ldr	w1, [x0, #16]
    3e2c:	ldr	w0, [sp, #40]
    3e30:	cmp	w1, w0
    3e34:	b.ne	3e5c <GOMP_offload_unregister_ver+0xa0>  // b.any
    3e38:	ldr	x0, [sp, #48]
    3e3c:	ldr	w0, [x0, #172]
    3e40:	cmp	w0, #0x1
    3e44:	b.ne	3e5c <GOMP_offload_unregister_ver+0xa0>  // b.any
    3e48:	ldr	x3, [sp, #24]
    3e4c:	ldr	x2, [sp, #32]
    3e50:	ldr	w1, [sp, #44]
    3e54:	ldr	x0, [sp, #48]
    3e58:	bl	386c <gomp_unload_image_from_device>
    3e5c:	ldr	x0, [sp, #48]
    3e60:	add	x0, x0, #0xa8
    3e64:	bl	90 <gomp_mutex_unlock>
    3e68:	ldr	w0, [sp, #60]
    3e6c:	add	w0, w0, #0x1
    3e70:	str	w0, [sp, #60]
    3e74:	adrp	x0, 0 <gomp_mutex_init>
    3e78:	add	x0, x0, #0x0
    3e7c:	ldr	w0, [x0]
    3e80:	ldr	w1, [sp, #60]
    3e84:	cmp	w1, w0
    3e88:	b.lt	3de8 <GOMP_offload_unregister_ver+0x2c>  // b.tstop
    3e8c:	str	wzr, [sp, #60]
    3e90:	b	3f5c <GOMP_offload_unregister_ver+0x1a0>
    3e94:	adrp	x0, 0 <gomp_mutex_init>
    3e98:	add	x0, x0, #0x0
    3e9c:	ldr	x2, [x0]
    3ea0:	ldrsw	x1, [sp, #60]
    3ea4:	mov	x0, x1
    3ea8:	lsl	x0, x0, #1
    3eac:	add	x0, x0, x1
    3eb0:	lsl	x0, x0, #3
    3eb4:	add	x0, x2, x0
    3eb8:	ldr	x0, [x0, #16]
    3ebc:	ldr	x1, [sp, #24]
    3ec0:	cmp	x1, x0
    3ec4:	b.ne	3f50 <GOMP_offload_unregister_ver+0x194>  // b.any
    3ec8:	adrp	x0, 0 <gomp_mutex_init>
    3ecc:	add	x0, x0, #0x0
    3ed0:	ldr	x2, [x0]
    3ed4:	adrp	x0, 0 <gomp_mutex_init>
    3ed8:	add	x0, x0, #0x0
    3edc:	ldr	w0, [x0]
    3ee0:	sub	w1, w0, #0x1
    3ee4:	adrp	x0, 0 <gomp_mutex_init>
    3ee8:	add	x0, x0, #0x0
    3eec:	str	w1, [x0]
    3ef0:	adrp	x0, 0 <gomp_mutex_init>
    3ef4:	add	x0, x0, #0x0
    3ef8:	ldr	w0, [x0]
    3efc:	sxtw	x1, w0
    3f00:	mov	x0, x1
    3f04:	lsl	x0, x0, #1
    3f08:	add	x0, x0, x1
    3f0c:	lsl	x0, x0, #3
    3f10:	add	x3, x2, x0
    3f14:	adrp	x0, 0 <gomp_mutex_init>
    3f18:	add	x0, x0, #0x0
    3f1c:	ldr	x2, [x0]
    3f20:	ldrsw	x1, [sp, #60]
    3f24:	mov	x0, x1
    3f28:	lsl	x0, x0, #1
    3f2c:	add	x0, x0, x1
    3f30:	lsl	x0, x0, #3
    3f34:	add	x0, x2, x0
    3f38:	mov	x2, x0
    3f3c:	ldp	x0, x1, [x3]
    3f40:	stp	x0, x1, [x2]
    3f44:	ldr	x0, [x3, #16]
    3f48:	str	x0, [x2, #16]
    3f4c:	b	3f74 <GOMP_offload_unregister_ver+0x1b8>
    3f50:	ldr	w0, [sp, #60]
    3f54:	add	w0, w0, #0x1
    3f58:	str	w0, [sp, #60]
    3f5c:	adrp	x0, 0 <gomp_mutex_init>
    3f60:	add	x0, x0, #0x0
    3f64:	ldr	w0, [x0]
    3f68:	ldr	w1, [sp, #60]
    3f6c:	cmp	w1, w0
    3f70:	b.lt	3e94 <GOMP_offload_unregister_ver+0xd8>  // b.tstop
    3f74:	adrp	x0, 0 <gomp_mutex_init>
    3f78:	add	x0, x0, #0x0
    3f7c:	bl	90 <gomp_mutex_unlock>
    3f80:	nop
    3f84:	ldp	x29, x30, [sp], #64
    3f88:	ret

0000000000003f8c <GOMP_offload_unregister>:
    3f8c:	stp	x29, x30, [sp, #-48]!
    3f90:	mov	x29, sp
    3f94:	str	x0, [sp, #40]
    3f98:	str	w1, [sp, #36]
    3f9c:	str	x2, [sp, #24]
    3fa0:	ldr	x3, [sp, #24]
    3fa4:	ldr	w2, [sp, #36]
    3fa8:	ldr	x1, [sp, #40]
    3fac:	mov	w0, #0x0                   	// #0
    3fb0:	bl	3dbc <GOMP_offload_unregister_ver>
    3fb4:	nop
    3fb8:	ldp	x29, x30, [sp], #48
    3fbc:	ret

0000000000003fc0 <gomp_init_device>:
    3fc0:	stp	x29, x30, [sp, #-48]!
    3fc4:	mov	x29, sp
    3fc8:	str	x0, [sp, #24]
    3fcc:	ldr	x0, [sp, #24]
    3fd0:	ldr	x1, [x0, #56]
    3fd4:	ldr	x0, [sp, #24]
    3fd8:	ldr	w0, [x0, #12]
    3fdc:	blr	x1
    3fe0:	and	w0, w0, #0xff
    3fe4:	eor	w0, w0, #0x1
    3fe8:	and	w0, w0, #0xff
    3fec:	cmp	w0, #0x0
    3ff0:	b.eq	400c <gomp_init_device+0x4c>  // b.none
    3ff4:	ldr	x0, [sp, #24]
    3ff8:	add	x0, x0, #0xa8
    3ffc:	bl	90 <gomp_mutex_unlock>
    4000:	adrp	x0, 0 <gomp_mutex_init>
    4004:	add	x0, x0, #0x0
    4008:	bl	0 <gomp_fatal>
    400c:	str	wzr, [sp, #44]
    4010:	b	4088 <gomp_init_device+0xc8>
    4014:	adrp	x0, 0 <gomp_mutex_init>
    4018:	add	x0, x0, #0x0
    401c:	ldr	x2, [x0]
    4020:	ldrsw	x1, [sp, #44]
    4024:	mov	x0, x1
    4028:	lsl	x0, x0, #1
    402c:	add	x0, x0, x1
    4030:	lsl	x0, x0, #3
    4034:	add	x0, x2, x0
    4038:	str	x0, [sp, #32]
    403c:	ldr	x0, [sp, #32]
    4040:	ldr	w1, [x0, #4]
    4044:	ldr	x0, [sp, #24]
    4048:	ldr	w0, [x0, #16]
    404c:	cmp	w1, w0
    4050:	b.ne	407c <gomp_init_device+0xbc>  // b.any
    4054:	ldr	x0, [sp, #32]
    4058:	ldr	w1, [x0]
    405c:	ldr	x0, [sp, #32]
    4060:	ldr	x2, [x0, #8]
    4064:	ldr	x0, [sp, #32]
    4068:	ldr	x0, [x0, #16]
    406c:	mov	w4, #0x0                   	// #0
    4070:	mov	x3, x0
    4074:	ldr	x0, [sp, #24]
    4078:	bl	3448 <gomp_load_image_to_device>
    407c:	ldr	w0, [sp, #44]
    4080:	add	w0, w0, #0x1
    4084:	str	w0, [sp, #44]
    4088:	adrp	x0, 0 <gomp_mutex_init>
    408c:	add	x0, x0, #0x0
    4090:	ldr	w0, [x0]
    4094:	ldr	w1, [sp, #44]
    4098:	cmp	w1, w0
    409c:	b.lt	4014 <gomp_init_device+0x54>  // b.tstop
    40a0:	ldr	x0, [sp, #24]
    40a4:	mov	w1, #0x1                   	// #1
    40a8:	str	w1, [x0, #172]
    40ac:	nop
    40b0:	ldp	x29, x30, [sp], #48
    40b4:	ret

00000000000040b8 <gomp_unload_device>:
    40b8:	stp	x29, x30, [sp, #-48]!
    40bc:	mov	x29, sp
    40c0:	str	x0, [sp, #24]
    40c4:	ldr	x0, [sp, #24]
    40c8:	ldr	w0, [x0, #172]
    40cc:	cmp	w0, #0x1
    40d0:	b.ne	4168 <gomp_unload_device+0xb0>  // b.any
    40d4:	str	wzr, [sp, #44]
    40d8:	b	414c <gomp_unload_device+0x94>
    40dc:	adrp	x0, 0 <gomp_mutex_init>
    40e0:	add	x0, x0, #0x0
    40e4:	ldr	x2, [x0]
    40e8:	ldr	w1, [sp, #44]
    40ec:	mov	x0, x1
    40f0:	lsl	x0, x0, #1
    40f4:	add	x0, x0, x1
    40f8:	lsl	x0, x0, #3
    40fc:	add	x0, x2, x0
    4100:	str	x0, [sp, #32]
    4104:	ldr	x0, [sp, #32]
    4108:	ldr	w1, [x0, #4]
    410c:	ldr	x0, [sp, #24]
    4110:	ldr	w0, [x0, #16]
    4114:	cmp	w1, w0
    4118:	b.ne	4140 <gomp_unload_device+0x88>  // b.any
    411c:	ldr	x0, [sp, #32]
    4120:	ldr	w1, [x0]
    4124:	ldr	x0, [sp, #32]
    4128:	ldr	x2, [x0, #8]
    412c:	ldr	x0, [sp, #32]
    4130:	ldr	x0, [x0, #16]
    4134:	mov	x3, x0
    4138:	ldr	x0, [sp, #24]
    413c:	bl	386c <gomp_unload_image_from_device>
    4140:	ldr	w0, [sp, #44]
    4144:	add	w0, w0, #0x1
    4148:	str	w0, [sp, #44]
    414c:	adrp	x0, 0 <gomp_mutex_init>
    4150:	add	x0, x0, #0x0
    4154:	ldr	w0, [x0]
    4158:	mov	w1, w0
    415c:	ldr	w0, [sp, #44]
    4160:	cmp	w0, w1
    4164:	b.cc	40dc <gomp_unload_device+0x24>  // b.lo, b.ul, b.last
    4168:	nop
    416c:	ldp	x29, x30, [sp], #48
    4170:	ret

0000000000004174 <gomp_free_memmap>:
    4174:	stp	x29, x30, [sp, #-48]!
    4178:	mov	x29, sp
    417c:	str	x0, [sp, #24]
    4180:	b	41bc <gomp_free_memmap+0x48>
    4184:	ldr	x0, [sp, #24]
    4188:	ldr	x0, [x0]
    418c:	ldr	x0, [x0, #16]
    4190:	str	x0, [sp, #40]
    4194:	ldr	x0, [sp, #24]
    4198:	ldr	x0, [x0]
    419c:	mov	x1, x0
    41a0:	ldr	x0, [sp, #24]
    41a4:	bl	0 <splay_tree_prefix_splay_tree_remove>
    41a8:	ldr	x0, [sp, #40]
    41ac:	ldr	x0, [x0, #8]
    41b0:	bl	0 <free>
    41b4:	ldr	x0, [sp, #40]
    41b8:	bl	0 <free>
    41bc:	ldr	x0, [sp, #24]
    41c0:	ldr	x0, [x0]
    41c4:	cmp	x0, #0x0
    41c8:	b.ne	4184 <gomp_free_memmap+0x10>  // b.any
    41cc:	nop
    41d0:	nop
    41d4:	ldp	x29, x30, [sp], #48
    41d8:	ret

00000000000041dc <gomp_target_fallback>:
    41dc:	stp	x29, x30, [sp, #-144]!
    41e0:	mov	x29, sp
    41e4:	str	x0, [sp, #24]
    41e8:	str	x1, [sp, #16]
    41ec:	bl	114 <gomp_thread>
    41f0:	str	x0, [sp, #136]
    41f4:	ldr	x1, [sp, #136]
    41f8:	add	x0, sp, #0x20
    41fc:	ldp	x2, x3, [x1]
    4200:	stp	x2, x3, [x0]
    4204:	ldp	x2, x3, [x1, #16]
    4208:	stp	x2, x3, [x0, #16]
    420c:	ldp	x2, x3, [x1, #32]
    4210:	stp	x2, x3, [x0, #32]
    4214:	ldp	x2, x3, [x1, #48]
    4218:	stp	x2, x3, [x0, #48]
    421c:	ldp	x2, x3, [x1, #64]
    4220:	stp	x2, x3, [x0, #64]
    4224:	ldp	x2, x3, [x1, #80]
    4228:	stp	x2, x3, [x0, #80]
    422c:	ldr	x1, [x1, #96]
    4230:	str	x1, [x0, #96]
    4234:	mov	x2, #0x68                  	// #104
    4238:	mov	w1, #0x0                   	// #0
    423c:	ldr	x0, [sp, #136]
    4240:	bl	0 <memset>
    4244:	adrp	x0, 0 <gomp_places_list>
    4248:	add	x0, x0, #0x0
    424c:	ldr	x0, [x0]
    4250:	cmp	x0, #0x0
    4254:	b.eq	427c <gomp_target_fallback+0xa0>  // b.none
    4258:	ldr	w1, [sp, #124]
    425c:	ldr	x0, [sp, #136]
    4260:	str	w1, [x0, #92]
    4264:	adrp	x0, 0 <gomp_places_list_len>
    4268:	add	x0, x0, #0x0
    426c:	ldr	x0, [x0]
    4270:	mov	w1, w0
    4274:	ldr	x0, [sp, #136]
    4278:	str	w1, [x0, #56]
    427c:	ldr	x1, [sp, #24]
    4280:	ldr	x0, [sp, #16]
    4284:	blr	x1
    4288:	ldr	x0, [sp, #136]
    428c:	bl	0 <gomp_free_thread>
    4290:	ldr	x0, [sp, #136]
    4294:	mov	x1, x0
    4298:	add	x0, sp, #0x20
    429c:	ldp	x2, x3, [x0]
    42a0:	stp	x2, x3, [x1]
    42a4:	ldp	x2, x3, [x0, #16]
    42a8:	stp	x2, x3, [x1, #16]
    42ac:	ldp	x2, x3, [x0, #32]
    42b0:	stp	x2, x3, [x1, #32]
    42b4:	ldp	x2, x3, [x0, #48]
    42b8:	stp	x2, x3, [x1, #48]
    42bc:	ldp	x2, x3, [x0, #64]
    42c0:	stp	x2, x3, [x1, #64]
    42c4:	ldp	x2, x3, [x0, #80]
    42c8:	stp	x2, x3, [x1, #80]
    42cc:	ldr	x0, [x0, #96]
    42d0:	str	x0, [x1, #96]
    42d4:	nop
    42d8:	ldp	x29, x30, [sp], #144
    42dc:	ret

00000000000042e0 <calculate_firstprivate_requirements>:
    42e0:	sub	sp, sp, #0x40
    42e4:	str	x0, [sp, #40]
    42e8:	str	x1, [sp, #32]
    42ec:	str	x2, [sp, #24]
    42f0:	str	x3, [sp, #16]
    42f4:	str	x4, [sp, #8]
    42f8:	str	xzr, [sp, #56]
    42fc:	b	43c8 <calculate_firstprivate_requirements+0xe8>
    4300:	ldr	x0, [sp, #56]
    4304:	lsl	x0, x0, #1
    4308:	ldr	x1, [sp, #24]
    430c:	add	x0, x1, x0
    4310:	ldrh	w0, [x0]
    4314:	and	w0, w0, #0xff
    4318:	cmp	w0, #0xc
    431c:	b.ne	43bc <calculate_firstprivate_requirements+0xdc>  // b.any
    4320:	ldr	x0, [sp, #56]
    4324:	lsl	x0, x0, #1
    4328:	ldr	x1, [sp, #24]
    432c:	add	x0, x1, x0
    4330:	ldrh	w0, [x0]
    4334:	lsr	w0, w0, #8
    4338:	and	w0, w0, #0xffff
    433c:	mov	w1, w0
    4340:	mov	x0, #0x1                   	// #1
    4344:	lsl	x0, x0, x1
    4348:	str	x0, [sp, #48]
    434c:	ldr	x0, [sp, #16]
    4350:	ldr	x0, [x0]
    4354:	ldr	x1, [sp, #48]
    4358:	cmp	x1, x0
    435c:	b.ls	436c <calculate_firstprivate_requirements+0x8c>  // b.plast
    4360:	ldr	x0, [sp, #16]
    4364:	ldr	x1, [sp, #48]
    4368:	str	x1, [x0]
    436c:	ldr	x0, [sp, #8]
    4370:	ldr	x1, [x0]
    4374:	ldr	x0, [sp, #48]
    4378:	add	x0, x1, x0
    437c:	sub	x1, x0, #0x1
    4380:	ldr	x0, [sp, #48]
    4384:	neg	x0, x0
    4388:	and	x1, x1, x0
    438c:	ldr	x0, [sp, #8]
    4390:	str	x1, [x0]
    4394:	ldr	x0, [sp, #8]
    4398:	ldr	x1, [x0]
    439c:	ldr	x0, [sp, #56]
    43a0:	lsl	x0, x0, #3
    43a4:	ldr	x2, [sp, #32]
    43a8:	add	x0, x2, x0
    43ac:	ldr	x0, [x0]
    43b0:	add	x1, x1, x0
    43b4:	ldr	x0, [sp, #8]
    43b8:	str	x1, [x0]
    43bc:	ldr	x0, [sp, #56]
    43c0:	add	x0, x0, #0x1
    43c4:	str	x0, [sp, #56]
    43c8:	ldr	x1, [sp, #56]
    43cc:	ldr	x0, [sp, #40]
    43d0:	cmp	x1, x0
    43d4:	b.cc	4300 <calculate_firstprivate_requirements+0x20>  // b.lo, b.ul, b.last
    43d8:	nop
    43dc:	nop
    43e0:	add	sp, sp, #0x40
    43e4:	ret

00000000000043e8 <copy_firstprivate_data>:
    43e8:	stp	x29, x30, [sp, #-112]!
    43ec:	mov	x29, sp
    43f0:	str	x0, [sp, #72]
    43f4:	str	x1, [sp, #64]
    43f8:	str	x2, [sp, #56]
    43fc:	str	x3, [sp, #48]
    4400:	str	x4, [sp, #40]
    4404:	str	x5, [sp, #32]
    4408:	str	x6, [sp, #24]
    440c:	ldr	x0, [sp, #32]
    4410:	sub	x1, x0, #0x1
    4414:	ldr	x0, [sp, #72]
    4418:	and	x0, x1, x0
    441c:	str	x0, [sp, #96]
    4420:	ldr	x0, [sp, #96]
    4424:	cmp	x0, #0x0
    4428:	b.eq	4444 <copy_firstprivate_data+0x5c>  // b.none
    442c:	ldr	x1, [sp, #32]
    4430:	ldr	x0, [sp, #96]
    4434:	sub	x0, x1, x0
    4438:	ldr	x1, [sp, #72]
    443c:	add	x0, x1, x0
    4440:	str	x0, [sp, #72]
    4444:	str	xzr, [sp, #24]
    4448:	str	xzr, [sp, #104]
    444c:	b	454c <copy_firstprivate_data+0x164>
    4450:	ldr	x0, [sp, #104]
    4454:	lsl	x0, x0, #1
    4458:	ldr	x1, [sp, #40]
    445c:	add	x0, x1, x0
    4460:	ldrh	w0, [x0]
    4464:	and	w0, w0, #0xff
    4468:	cmp	w0, #0xc
    446c:	b.ne	4540 <copy_firstprivate_data+0x158>  // b.any
    4470:	ldr	x0, [sp, #104]
    4474:	lsl	x0, x0, #1
    4478:	ldr	x1, [sp, #40]
    447c:	add	x0, x1, x0
    4480:	ldrh	w0, [x0]
    4484:	lsr	w0, w0, #8
    4488:	and	w0, w0, #0xffff
    448c:	mov	w1, w0
    4490:	mov	x0, #0x1                   	// #1
    4494:	lsl	x0, x0, x1
    4498:	str	x0, [sp, #88]
    449c:	ldr	x1, [sp, #24]
    44a0:	ldr	x0, [sp, #88]
    44a4:	add	x0, x1, x0
    44a8:	sub	x1, x0, #0x1
    44ac:	ldr	x0, [sp, #88]
    44b0:	neg	x0, x0
    44b4:	and	x0, x1, x0
    44b8:	str	x0, [sp, #24]
    44bc:	ldr	x1, [sp, #72]
    44c0:	ldr	x0, [sp, #24]
    44c4:	add	x3, x1, x0
    44c8:	ldr	x0, [sp, #104]
    44cc:	lsl	x0, x0, #3
    44d0:	ldr	x1, [sp, #56]
    44d4:	add	x0, x1, x0
    44d8:	ldr	x4, [x0]
    44dc:	ldr	x0, [sp, #104]
    44e0:	lsl	x0, x0, #3
    44e4:	ldr	x1, [sp, #48]
    44e8:	add	x0, x1, x0
    44ec:	ldr	x0, [x0]
    44f0:	mov	x2, x0
    44f4:	mov	x1, x4
    44f8:	mov	x0, x3
    44fc:	bl	0 <memcpy>
    4500:	ldr	x0, [sp, #104]
    4504:	lsl	x0, x0, #3
    4508:	ldr	x1, [sp, #56]
    450c:	add	x0, x1, x0
    4510:	ldr	x2, [sp, #72]
    4514:	ldr	x1, [sp, #24]
    4518:	add	x1, x2, x1
    451c:	str	x1, [x0]
    4520:	ldr	x0, [sp, #104]
    4524:	lsl	x0, x0, #3
    4528:	ldr	x1, [sp, #48]
    452c:	add	x0, x1, x0
    4530:	ldr	x0, [x0]
    4534:	ldr	x1, [sp, #24]
    4538:	add	x0, x1, x0
    453c:	str	x0, [sp, #24]
    4540:	ldr	x0, [sp, #104]
    4544:	add	x0, x0, #0x1
    4548:	str	x0, [sp, #104]
    454c:	ldr	x1, [sp, #104]
    4550:	ldr	x0, [sp, #64]
    4554:	cmp	x1, x0
    4558:	b.cc	4450 <copy_firstprivate_data+0x68>  // b.lo, b.ul, b.last
    455c:	nop
    4560:	nop
    4564:	ldp	x29, x30, [sp], #112
    4568:	ret

000000000000456c <gomp_get_target_fn_addr>:
    456c:	stp	x29, x30, [sp, #-96]!
    4570:	mov	x29, sp
    4574:	str	x0, [sp, #24]
    4578:	str	x1, [sp, #16]
    457c:	ldr	x0, [sp, #24]
    4580:	ldr	w0, [x0, #8]
    4584:	and	w0, w0, #0x2
    4588:	cmp	w0, #0x0
    458c:	b.eq	4598 <gomp_get_target_fn_addr+0x2c>  // b.none
    4590:	ldr	x0, [sp, #16]
    4594:	b	4618 <gomp_get_target_fn_addr+0xac>
    4598:	ldr	x0, [sp, #24]
    459c:	add	x0, x0, #0xa8
    45a0:	bl	1c <gomp_mutex_lock>
    45a4:	ldr	x0, [sp, #24]
    45a8:	ldr	w0, [x0, #172]
    45ac:	cmp	w0, #0x2
    45b0:	b.ne	45c8 <gomp_get_target_fn_addr+0x5c>  // b.any
    45b4:	ldr	x0, [sp, #24]
    45b8:	add	x0, x0, #0xa8
    45bc:	bl	90 <gomp_mutex_unlock>
    45c0:	mov	x0, #0x0                   	// #0
    45c4:	b	4618 <gomp_get_target_fn_addr+0xac>
    45c8:	ldr	x0, [sp, #16]
    45cc:	str	x0, [sp, #32]
    45d0:	ldr	x0, [sp, #32]
    45d4:	add	x0, x0, #0x1
    45d8:	str	x0, [sp, #40]
    45dc:	ldr	x0, [sp, #24]
    45e0:	add	x0, x0, #0xa0
    45e4:	add	x1, sp, #0x20
    45e8:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    45ec:	str	x0, [sp, #88]
    45f0:	ldr	x0, [sp, #24]
    45f4:	add	x0, x0, #0xa8
    45f8:	bl	90 <gomp_mutex_unlock>
    45fc:	ldr	x0, [sp, #88]
    4600:	cmp	x0, #0x0
    4604:	b.ne	4610 <gomp_get_target_fn_addr+0xa4>  // b.any
    4608:	mov	x0, #0x0                   	// #0
    460c:	b	4618 <gomp_get_target_fn_addr+0xac>
    4610:	ldr	x0, [sp, #88]
    4614:	ldr	x0, [x0, #24]
    4618:	ldp	x29, x30, [sp], #96
    461c:	ret

0000000000004620 <GOMP_target>:
    4620:	stp	x29, x30, [sp, #-112]!
    4624:	mov	x29, sp
    4628:	str	w0, [sp, #76]
    462c:	str	x1, [sp, #64]
    4630:	str	x2, [sp, #56]
    4634:	str	x3, [sp, #48]
    4638:	str	x4, [sp, #40]
    463c:	str	x5, [sp, #32]
    4640:	str	x6, [sp, #24]
    4644:	ldr	w0, [sp, #76]
    4648:	bl	218 <resolve_device>
    464c:	str	x0, [sp, #104]
    4650:	ldr	x0, [sp, #104]
    4654:	cmp	x0, #0x0
    4658:	b.eq	46a0 <GOMP_target+0x80>  // b.none
    465c:	ldr	x0, [sp, #104]
    4660:	ldr	w0, [x0, #8]
    4664:	and	w0, w0, #0x4
    4668:	cmp	w0, #0x0
    466c:	b.eq	46a0 <GOMP_target+0x80>  // b.none
    4670:	ldr	x0, [sp, #104]
    4674:	ldr	w0, [x0, #8]
    4678:	and	w0, w0, #0x1
    467c:	cmp	w0, #0x0
    4680:	b.ne	46a0 <GOMP_target+0x80>  // b.any
    4684:	ldr	x1, [sp, #64]
    4688:	ldr	x0, [sp, #104]
    468c:	bl	456c <gomp_get_target_fn_addr>
    4690:	str	x0, [sp, #96]
    4694:	ldr	x0, [sp, #96]
    4698:	cmp	x0, #0x0
    469c:	b.ne	46b0 <GOMP_target+0x90>  // b.any
    46a0:	ldr	x1, [sp, #40]
    46a4:	ldr	x0, [sp, #64]
    46a8:	bl	41dc <gomp_target_fallback>
    46ac:	b	4710 <GOMP_target+0xf0>
    46b0:	mov	w7, #0x1                   	// #1
    46b4:	mov	w6, #0x0                   	// #0
    46b8:	ldr	x5, [sp, #24]
    46bc:	ldr	x4, [sp, #32]
    46c0:	mov	x3, #0x0                   	// #0
    46c4:	ldr	x2, [sp, #40]
    46c8:	ldr	x1, [sp, #48]
    46cc:	ldr	x0, [sp, #104]
    46d0:	bl	134c <gomp_map_vars>
    46d4:	str	x0, [sp, #88]
    46d8:	ldr	x0, [sp, #104]
    46dc:	ldr	x4, [x0, #144]
    46e0:	ldr	x0, [sp, #104]
    46e4:	ldr	w5, [x0, #12]
    46e8:	ldr	x0, [sp, #88]
    46ec:	ldr	x0, [x0, #16]
    46f0:	mov	x3, #0x0                   	// #0
    46f4:	mov	x2, x0
    46f8:	ldr	x1, [sp, #96]
    46fc:	mov	w0, w5
    4700:	blr	x4
    4704:	mov	w1, #0x1                   	// #1
    4708:	ldr	x0, [sp, #88]
    470c:	bl	2f50 <gomp_unmap_vars>
    4710:	ldp	x29, x30, [sp], #112
    4714:	ret

0000000000004718 <GOMP_target_ext>:
    4718:	stp	x29, x30, [sp, #-192]!
    471c:	mov	x29, sp
    4720:	sub	sp, sp, #0x10
    4724:	str	w0, [x29, #76]
    4728:	str	x1, [x29, #64]
    472c:	str	x2, [x29, #56]
    4730:	str	x3, [x29, #48]
    4734:	str	x4, [x29, #40]
    4738:	str	x5, [x29, #32]
    473c:	str	w6, [x29, #72]
    4740:	str	x7, [x29, #24]
    4744:	ldr	w0, [x29, #76]
    4748:	bl	218 <resolve_device>
    474c:	str	x0, [x29, #168]
    4750:	str	xzr, [x29, #88]
    4754:	str	xzr, [x29, #80]
    4758:	strb	wzr, [x29, #191]
    475c:	ldr	w0, [x29, #72]
    4760:	and	w0, w0, #0x1
    4764:	cmp	w0, #0x0
    4768:	b.eq	4914 <GOMP_target_ext+0x1fc>  // b.none
    476c:	bl	114 <gomp_thread>
    4770:	str	x0, [x29, #160]
    4774:	ldr	x0, [x29, #160]
    4778:	ldr	x0, [x0, #16]
    477c:	cmp	x0, #0x0
    4780:	cset	w0, eq  // eq = none
    4784:	and	w0, w0, #0xff
    4788:	and	x0, x0, #0xff
    478c:	cmp	x0, #0x0
    4790:	b.eq	48b0 <GOMP_target_ext+0x198>  // b.none
    4794:	mov	w0, #0x1                   	// #1
    4798:	bl	0 <gomp_new_team>
    479c:	str	x0, [x29, #152]
    47a0:	ldr	x0, [x29, #160]
    47a4:	ldr	x0, [x0, #80]
    47a8:	str	x0, [x29, #144]
    47ac:	ldr	x0, [x29, #144]
    47b0:	cmp	x0, #0x0
    47b4:	b.eq	47c4 <GOMP_target_ext+0xac>  // b.none
    47b8:	ldr	x0, [x29, #144]
    47bc:	add	x0, x0, #0x90
    47c0:	b	47cc <GOMP_target_ext+0xb4>
    47c4:	adrp	x0, 0 <gomp_global_icv>
    47c8:	add	x0, x0, #0x0
    47cc:	str	x0, [x29, #136]
    47d0:	ldr	x0, [x29, #152]
    47d4:	add	x2, x0, #0x8
    47d8:	ldr	x0, [x29, #160]
    47dc:	add	x1, x0, #0x10
    47e0:	mov	x0, x2
    47e4:	ldp	x2, x3, [x1]
    47e8:	stp	x2, x3, [x0]
    47ec:	ldp	x2, x3, [x1, #16]
    47f0:	stp	x2, x3, [x0, #16]
    47f4:	ldp	x2, x3, [x1, #32]
    47f8:	stp	x2, x3, [x0, #32]
    47fc:	ldp	x2, x3, [x1, #48]
    4800:	stp	x2, x3, [x0, #48]
    4804:	ldr	x0, [x29, #160]
    4808:	ldr	x1, [x29, #152]
    480c:	str	x1, [x0, #16]
    4810:	ldr	x0, [x29, #160]
    4814:	str	wzr, [x0, #40]
    4818:	ldr	x0, [x29, #152]
    481c:	add	x1, x0, #0x100
    4820:	ldr	x0, [x29, #160]
    4824:	str	x1, [x0, #24]
    4828:	ldr	x0, [x29, #160]
    482c:	str	xzr, [x0, #32]
    4830:	ldr	x0, [x29, #160]
    4834:	str	xzr, [x0, #64]
    4838:	ldr	x0, [x29, #160]
    483c:	str	xzr, [x0, #72]
    4840:	ldr	x0, [x29, #152]
    4844:	add	x1, x0, #0x540
    4848:	ldr	x0, [x29, #160]
    484c:	str	x1, [x0, #80]
    4850:	ldr	x0, [x29, #160]
    4854:	ldr	x0, [x0, #80]
    4858:	ldr	x2, [x29, #136]
    485c:	mov	x1, #0x0                   	// #0
    4860:	bl	0 <gomp_init_task>
    4864:	ldr	x0, [x29, #144]
    4868:	cmp	x0, #0x0
    486c:	b.eq	489c <GOMP_target_ext+0x184>  // b.none
    4870:	ldr	x0, [x29, #160]
    4874:	ldr	x1, [x29, #144]
    4878:	str	x1, [x0, #80]
    487c:	bl	0 <gomp_end_task>
    4880:	ldr	x0, [x29, #144]
    4884:	bl	0 <free>
    4888:	ldr	x0, [x29, #152]
    488c:	add	x1, x0, #0x540
    4890:	ldr	x0, [x29, #160]
    4894:	str	x1, [x0, #80]
    4898:	b	48b0 <GOMP_target_ext+0x198>
    489c:	adrp	x0, 0 <gomp_thread_destructor>
    48a0:	add	x0, x0, #0x0
    48a4:	ldr	w0, [x0]
    48a8:	ldr	x1, [x29, #160]
    48ac:	bl	0 <pthread_setspecific>
    48b0:	ldr	x0, [x29, #160]
    48b4:	ldr	x0, [x0, #16]
    48b8:	cmp	x0, #0x0
    48bc:	b.eq	4914 <GOMP_target_ext+0x1fc>  // b.none
    48c0:	ldr	x0, [x29, #160]
    48c4:	ldr	x0, [x0, #80]
    48c8:	ldrb	w0, [x0, #205]
    48cc:	eor	w0, w0, #0x1
    48d0:	and	w0, w0, #0xff
    48d4:	cmp	w0, #0x0
    48d8:	b.eq	4914 <GOMP_target_ext+0x1fc>  // b.none
    48dc:	mov	w0, #0x1                   	// #1
    48e0:	str	w0, [sp, #8]
    48e4:	ldr	x0, [x29, #192]
    48e8:	str	x0, [sp]
    48ec:	ldr	x7, [x29, #24]
    48f0:	ldr	w6, [x29, #72]
    48f4:	ldr	x5, [x29, #32]
    48f8:	ldr	x4, [x29, #40]
    48fc:	ldr	x3, [x29, #48]
    4900:	ldr	x2, [x29, #56]
    4904:	ldr	x1, [x29, #64]
    4908:	ldr	x0, [x29, #168]
    490c:	bl	0 <gomp_create_target_task>
    4910:	b	4c38 <GOMP_target_ext+0x520>
    4914:	ldr	x0, [x29, #24]
    4918:	cmp	x0, #0x0
    491c:	b.eq	49e4 <GOMP_target_ext+0x2cc>  // b.none
    4920:	bl	114 <gomp_thread>
    4924:	str	x0, [x29, #128]
    4928:	ldr	x0, [x29, #128]
    492c:	ldr	x0, [x0, #80]
    4930:	cmp	x0, #0x0
    4934:	b.eq	49e4 <GOMP_target_ext+0x2cc>  // b.none
    4938:	ldr	x0, [x29, #128]
    493c:	ldr	x0, [x0, #80]
    4940:	ldr	x0, [x0, #56]
    4944:	cmp	x0, #0x0
    4948:	b.eq	49e4 <GOMP_target_ext+0x2cc>  // b.none
    494c:	add	x1, x29, #0x50
    4950:	add	x0, x29, #0x58
    4954:	mov	x4, x1
    4958:	mov	x3, x0
    495c:	ldr	x2, [x29, #32]
    4960:	ldr	x1, [x29, #40]
    4964:	ldr	x0, [x29, #56]
    4968:	bl	42e0 <calculate_firstprivate_requirements>
    496c:	ldr	x0, [x29, #88]
    4970:	cmp	x0, #0x0
    4974:	b.eq	49d4 <GOMP_target_ext+0x2bc>  // b.none
    4978:	ldr	x1, [x29, #80]
    497c:	ldr	x0, [x29, #88]
    4980:	add	x0, x1, x0
    4984:	sub	x0, x0, #0x1
    4988:	add	x0, x0, #0xf
    498c:	lsr	x0, x0, #4
    4990:	lsl	x0, x0, #4
    4994:	sub	sp, sp, x0
    4998:	add	x0, sp, #0x10
    499c:	add	x0, x0, #0xf
    49a0:	lsr	x0, x0, #4
    49a4:	lsl	x0, x0, #4
    49a8:	str	x0, [x29, #120]
    49ac:	ldr	x0, [x29, #88]
    49b0:	ldr	x1, [x29, #80]
    49b4:	mov	x6, x1
    49b8:	mov	x5, x0
    49bc:	ldr	x4, [x29, #32]
    49c0:	ldr	x3, [x29, #40]
    49c4:	ldr	x2, [x29, #48]
    49c8:	ldr	x1, [x29, #56]
    49cc:	ldr	x0, [x29, #120]
    49d0:	bl	43e8 <copy_firstprivate_data>
    49d4:	mov	w0, #0x1                   	// #1
    49d8:	strb	w0, [x29, #191]
    49dc:	ldr	x0, [x29, #24]
    49e0:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    49e4:	ldr	x0, [x29, #168]
    49e8:	cmp	x0, #0x0
    49ec:	b.eq	4a54 <GOMP_target_ext+0x33c>  // b.none
    49f0:	ldr	x0, [x29, #168]
    49f4:	ldr	w0, [x0, #8]
    49f8:	and	w0, w0, #0x4
    49fc:	cmp	w0, #0x0
    4a00:	b.eq	4a54 <GOMP_target_ext+0x33c>  // b.none
    4a04:	ldr	x1, [x29, #64]
    4a08:	ldr	x0, [x29, #168]
    4a0c:	bl	456c <gomp_get_target_fn_addr>
    4a10:	str	x0, [x29, #112]
    4a14:	ldr	x0, [x29, #112]
    4a18:	cmp	x0, #0x0
    4a1c:	b.eq	4a54 <GOMP_target_ext+0x33c>  // b.none
    4a20:	ldr	x0, [x29, #168]
    4a24:	ldr	x0, [x0, #136]
    4a28:	cmp	x0, #0x0
    4a2c:	b.eq	4b00 <GOMP_target_ext+0x3e8>  // b.none
    4a30:	ldr	x0, [x29, #168]
    4a34:	ldr	x1, [x0, #136]
    4a38:	ldr	x0, [x29, #112]
    4a3c:	blr	x1
    4a40:	and	w0, w0, #0xff
    4a44:	eor	w0, w0, #0x1
    4a48:	and	w0, w0, #0xff
    4a4c:	cmp	w0, #0x0
    4a50:	b.eq	4b00 <GOMP_target_ext+0x3e8>  // b.none
    4a54:	ldrb	w0, [x29, #191]
    4a58:	eor	w0, w0, #0x1
    4a5c:	and	w0, w0, #0xff
    4a60:	cmp	w0, #0x0
    4a64:	b.eq	4af0 <GOMP_target_ext+0x3d8>  // b.none
    4a68:	add	x1, x29, #0x50
    4a6c:	add	x0, x29, #0x58
    4a70:	mov	x4, x1
    4a74:	mov	x3, x0
    4a78:	ldr	x2, [x29, #32]
    4a7c:	ldr	x1, [x29, #40]
    4a80:	ldr	x0, [x29, #56]
    4a84:	bl	42e0 <calculate_firstprivate_requirements>
    4a88:	ldr	x0, [x29, #88]
    4a8c:	cmp	x0, #0x0
    4a90:	b.eq	4af0 <GOMP_target_ext+0x3d8>  // b.none
    4a94:	ldr	x1, [x29, #80]
    4a98:	ldr	x0, [x29, #88]
    4a9c:	add	x0, x1, x0
    4aa0:	sub	x0, x0, #0x1
    4aa4:	add	x0, x0, #0xf
    4aa8:	lsr	x0, x0, #4
    4aac:	lsl	x0, x0, #4
    4ab0:	sub	sp, sp, x0
    4ab4:	add	x0, sp, #0x10
    4ab8:	add	x0, x0, #0xf
    4abc:	lsr	x0, x0, #4
    4ac0:	lsl	x0, x0, #4
    4ac4:	str	x0, [x29, #96]
    4ac8:	ldr	x0, [x29, #88]
    4acc:	ldr	x1, [x29, #80]
    4ad0:	mov	x6, x1
    4ad4:	mov	x5, x0
    4ad8:	ldr	x4, [x29, #32]
    4adc:	ldr	x3, [x29, #40]
    4ae0:	ldr	x2, [x29, #48]
    4ae4:	ldr	x1, [x29, #56]
    4ae8:	ldr	x0, [x29, #96]
    4aec:	bl	43e8 <copy_firstprivate_data>
    4af0:	ldr	x1, [x29, #48]
    4af4:	ldr	x0, [x29, #64]
    4af8:	bl	41dc <gomp_target_fallback>
    4afc:	b	4c38 <GOMP_target_ext+0x520>
    4b00:	ldr	x0, [x29, #168]
    4b04:	ldr	w0, [x0, #8]
    4b08:	and	w0, w0, #0x1
    4b0c:	cmp	w0, #0x0
    4b10:	b.eq	4bb8 <GOMP_target_ext+0x4a0>  // b.none
    4b14:	ldrb	w0, [x29, #191]
    4b18:	eor	w0, w0, #0x1
    4b1c:	and	w0, w0, #0xff
    4b20:	cmp	w0, #0x0
    4b24:	b.eq	4bb0 <GOMP_target_ext+0x498>  // b.none
    4b28:	add	x1, x29, #0x50
    4b2c:	add	x0, x29, #0x58
    4b30:	mov	x4, x1
    4b34:	mov	x3, x0
    4b38:	ldr	x2, [x29, #32]
    4b3c:	ldr	x1, [x29, #40]
    4b40:	ldr	x0, [x29, #56]
    4b44:	bl	42e0 <calculate_firstprivate_requirements>
    4b48:	ldr	x0, [x29, #88]
    4b4c:	cmp	x0, #0x0
    4b50:	b.eq	4bb0 <GOMP_target_ext+0x498>  // b.none
    4b54:	ldr	x1, [x29, #80]
    4b58:	ldr	x0, [x29, #88]
    4b5c:	add	x0, x1, x0
    4b60:	sub	x0, x0, #0x1
    4b64:	add	x0, x0, #0xf
    4b68:	lsr	x0, x0, #4
    4b6c:	lsl	x0, x0, #4
    4b70:	sub	sp, sp, x0
    4b74:	add	x0, sp, #0x10
    4b78:	add	x0, x0, #0xf
    4b7c:	lsr	x0, x0, #4
    4b80:	lsl	x0, x0, #4
    4b84:	str	x0, [x29, #104]
    4b88:	ldr	x0, [x29, #88]
    4b8c:	ldr	x1, [x29, #80]
    4b90:	mov	x6, x1
    4b94:	mov	x5, x0
    4b98:	ldr	x4, [x29, #32]
    4b9c:	ldr	x3, [x29, #40]
    4ba0:	ldr	x2, [x29, #48]
    4ba4:	ldr	x1, [x29, #56]
    4ba8:	ldr	x0, [x29, #104]
    4bac:	bl	43e8 <copy_firstprivate_data>
    4bb0:	str	xzr, [x29, #176]
    4bb4:	b	4be0 <GOMP_target_ext+0x4c8>
    4bb8:	mov	w7, #0x1                   	// #1
    4bbc:	mov	w6, #0x1                   	// #1
    4bc0:	ldr	x5, [x29, #32]
    4bc4:	ldr	x4, [x29, #40]
    4bc8:	mov	x3, #0x0                   	// #0
    4bcc:	ldr	x2, [x29, #48]
    4bd0:	ldr	x1, [x29, #56]
    4bd4:	ldr	x0, [x29, #168]
    4bd8:	bl	134c <gomp_map_vars>
    4bdc:	str	x0, [x29, #176]
    4be0:	ldr	x0, [x29, #168]
    4be4:	ldr	x4, [x0, #144]
    4be8:	ldr	x0, [x29, #168]
    4bec:	ldr	w5, [x0, #12]
    4bf0:	ldr	x0, [x29, #176]
    4bf4:	cmp	x0, #0x0
    4bf8:	b.eq	4c08 <GOMP_target_ext+0x4f0>  // b.none
    4bfc:	ldr	x0, [x29, #176]
    4c00:	ldr	x0, [x0, #16]
    4c04:	b	4c0c <GOMP_target_ext+0x4f4>
    4c08:	ldr	x0, [x29, #48]
    4c0c:	ldr	x3, [x29, #192]
    4c10:	mov	x2, x0
    4c14:	ldr	x1, [x29, #112]
    4c18:	mov	w0, w5
    4c1c:	blr	x4
    4c20:	ldr	x0, [x29, #176]
    4c24:	cmp	x0, #0x0
    4c28:	b.eq	4c38 <GOMP_target_ext+0x520>  // b.none
    4c2c:	mov	w1, #0x1                   	// #1
    4c30:	ldr	x0, [x29, #176]
    4c34:	bl	2f50 <gomp_unmap_vars>
    4c38:	mov	sp, x29
    4c3c:	ldp	x29, x30, [sp], #192
    4c40:	ret

0000000000004c44 <gomp_target_data_fallback>:
    4c44:	stp	x29, x30, [sp, #-32]!
    4c48:	mov	x29, sp
    4c4c:	mov	w0, #0x0                   	// #0
    4c50:	bl	128 <gomp_icv>
    4c54:	str	x0, [sp, #24]
    4c58:	ldr	x0, [sp, #24]
    4c5c:	ldr	x0, [x0, #32]
    4c60:	cmp	x0, #0x0
    4c64:	b.eq	4cac <gomp_target_data_fallback+0x68>  // b.none
    4c68:	mov	w7, #0x2                   	// #2
    4c6c:	mov	w6, #0x0                   	// #0
    4c70:	mov	x5, #0x0                   	// #0
    4c74:	mov	x4, #0x0                   	// #0
    4c78:	mov	x3, #0x0                   	// #0
    4c7c:	mov	x2, #0x0                   	// #0
    4c80:	mov	x1, #0x0                   	// #0
    4c84:	mov	x0, #0x0                   	// #0
    4c88:	bl	134c <gomp_map_vars>
    4c8c:	str	x0, [sp, #16]
    4c90:	ldr	x0, [sp, #24]
    4c94:	ldr	x1, [x0, #32]
    4c98:	ldr	x0, [sp, #16]
    4c9c:	str	x1, [x0, #40]
    4ca0:	ldr	x0, [sp, #24]
    4ca4:	ldr	x1, [sp, #16]
    4ca8:	str	x1, [x0, #32]
    4cac:	nop
    4cb0:	ldp	x29, x30, [sp], #32
    4cb4:	ret

0000000000004cb8 <GOMP_target_data>:
    4cb8:	stp	x29, x30, [sp, #-96]!
    4cbc:	mov	x29, sp
    4cc0:	str	w0, [sp, #60]
    4cc4:	str	x1, [sp, #48]
    4cc8:	str	x2, [sp, #40]
    4ccc:	str	x3, [sp, #32]
    4cd0:	str	x4, [sp, #24]
    4cd4:	str	x5, [sp, #16]
    4cd8:	ldr	w0, [sp, #60]
    4cdc:	bl	218 <resolve_device>
    4ce0:	str	x0, [sp, #88]
    4ce4:	ldr	x0, [sp, #88]
    4ce8:	cmp	x0, #0x0
    4cec:	b.eq	4d18 <GOMP_target_data+0x60>  // b.none
    4cf0:	ldr	x0, [sp, #88]
    4cf4:	ldr	w0, [x0, #8]
    4cf8:	and	w0, w0, #0x4
    4cfc:	cmp	w0, #0x0
    4d00:	b.eq	4d18 <GOMP_target_data+0x60>  // b.none
    4d04:	ldr	x0, [sp, #88]
    4d08:	ldr	w0, [x0, #8]
    4d0c:	and	w0, w0, #0x1
    4d10:	cmp	w0, #0x0
    4d14:	b.eq	4d20 <GOMP_target_data+0x68>  // b.none
    4d18:	bl	4c44 <gomp_target_data_fallback>
    4d1c:	b	4d70 <GOMP_target_data+0xb8>
    4d20:	mov	w7, #0x2                   	// #2
    4d24:	mov	w6, #0x0                   	// #0
    4d28:	ldr	x5, [sp, #16]
    4d2c:	ldr	x4, [sp, #24]
    4d30:	mov	x3, #0x0                   	// #0
    4d34:	ldr	x2, [sp, #32]
    4d38:	ldr	x1, [sp, #40]
    4d3c:	ldr	x0, [sp, #88]
    4d40:	bl	134c <gomp_map_vars>
    4d44:	str	x0, [sp, #80]
    4d48:	mov	w0, #0x1                   	// #1
    4d4c:	bl	128 <gomp_icv>
    4d50:	str	x0, [sp, #72]
    4d54:	ldr	x0, [sp, #72]
    4d58:	ldr	x1, [x0, #32]
    4d5c:	ldr	x0, [sp, #80]
    4d60:	str	x1, [x0, #40]
    4d64:	ldr	x0, [sp, #72]
    4d68:	ldr	x1, [sp, #80]
    4d6c:	str	x1, [x0, #32]
    4d70:	ldp	x29, x30, [sp], #96
    4d74:	ret

0000000000004d78 <GOMP_target_data_ext>:
    4d78:	stp	x29, x30, [sp, #-96]!
    4d7c:	mov	x29, sp
    4d80:	str	w0, [sp, #60]
    4d84:	str	x1, [sp, #48]
    4d88:	str	x2, [sp, #40]
    4d8c:	str	x3, [sp, #32]
    4d90:	str	x4, [sp, #24]
    4d94:	ldr	w0, [sp, #60]
    4d98:	bl	218 <resolve_device>
    4d9c:	str	x0, [sp, #88]
    4da0:	ldr	x0, [sp, #88]
    4da4:	cmp	x0, #0x0
    4da8:	b.eq	4dd4 <GOMP_target_data_ext+0x5c>  // b.none
    4dac:	ldr	x0, [sp, #88]
    4db0:	ldr	w0, [x0, #8]
    4db4:	and	w0, w0, #0x4
    4db8:	cmp	w0, #0x0
    4dbc:	b.eq	4dd4 <GOMP_target_data_ext+0x5c>  // b.none
    4dc0:	ldr	x0, [sp, #88]
    4dc4:	ldr	w0, [x0, #8]
    4dc8:	and	w0, w0, #0x1
    4dcc:	cmp	w0, #0x0
    4dd0:	b.eq	4ddc <GOMP_target_data_ext+0x64>  // b.none
    4dd4:	bl	4c44 <gomp_target_data_fallback>
    4dd8:	b	4e2c <GOMP_target_data_ext+0xb4>
    4ddc:	mov	w7, #0x2                   	// #2
    4de0:	mov	w6, #0x1                   	// #1
    4de4:	ldr	x5, [sp, #24]
    4de8:	ldr	x4, [sp, #32]
    4dec:	mov	x3, #0x0                   	// #0
    4df0:	ldr	x2, [sp, #40]
    4df4:	ldr	x1, [sp, #48]
    4df8:	ldr	x0, [sp, #88]
    4dfc:	bl	134c <gomp_map_vars>
    4e00:	str	x0, [sp, #80]
    4e04:	mov	w0, #0x1                   	// #1
    4e08:	bl	128 <gomp_icv>
    4e0c:	str	x0, [sp, #72]
    4e10:	ldr	x0, [sp, #72]
    4e14:	ldr	x1, [x0, #32]
    4e18:	ldr	x0, [sp, #80]
    4e1c:	str	x1, [x0, #40]
    4e20:	ldr	x0, [sp, #72]
    4e24:	ldr	x1, [sp, #80]
    4e28:	str	x1, [x0, #32]
    4e2c:	ldp	x29, x30, [sp], #96
    4e30:	ret

0000000000004e34 <GOMP_target_end_data>:
    4e34:	stp	x29, x30, [sp, #-32]!
    4e38:	mov	x29, sp
    4e3c:	mov	w0, #0x0                   	// #0
    4e40:	bl	128 <gomp_icv>
    4e44:	str	x0, [sp, #24]
    4e48:	ldr	x0, [sp, #24]
    4e4c:	ldr	x0, [x0, #32]
    4e50:	cmp	x0, #0x0
    4e54:	b.eq	4e80 <GOMP_target_end_data+0x4c>  // b.none
    4e58:	ldr	x0, [sp, #24]
    4e5c:	ldr	x0, [x0, #32]
    4e60:	str	x0, [sp, #16]
    4e64:	ldr	x0, [sp, #16]
    4e68:	ldr	x1, [x0, #40]
    4e6c:	ldr	x0, [sp, #24]
    4e70:	str	x1, [x0, #32]
    4e74:	mov	w1, #0x1                   	// #1
    4e78:	ldr	x0, [sp, #16]
    4e7c:	bl	2f50 <gomp_unmap_vars>
    4e80:	nop
    4e84:	ldp	x29, x30, [sp], #32
    4e88:	ret

0000000000004e8c <GOMP_target_update>:
    4e8c:	stp	x29, x30, [sp, #-80]!
    4e90:	mov	x29, sp
    4e94:	str	w0, [sp, #60]
    4e98:	str	x1, [sp, #48]
    4e9c:	str	x2, [sp, #40]
    4ea0:	str	x3, [sp, #32]
    4ea4:	str	x4, [sp, #24]
    4ea8:	str	x5, [sp, #16]
    4eac:	ldr	w0, [sp, #60]
    4eb0:	bl	218 <resolve_device>
    4eb4:	str	x0, [sp, #72]
    4eb8:	ldr	x0, [sp, #72]
    4ebc:	cmp	x0, #0x0
    4ec0:	b.eq	4f0c <GOMP_target_update+0x80>  // b.none
    4ec4:	ldr	x0, [sp, #72]
    4ec8:	ldr	w0, [x0, #8]
    4ecc:	and	w0, w0, #0x4
    4ed0:	cmp	w0, #0x0
    4ed4:	b.eq	4f0c <GOMP_target_update+0x80>  // b.none
    4ed8:	ldr	x0, [sp, #72]
    4edc:	ldr	w0, [x0, #8]
    4ee0:	and	w0, w0, #0x1
    4ee4:	cmp	w0, #0x0
    4ee8:	b.ne	4f0c <GOMP_target_update+0x80>  // b.any
    4eec:	mov	w5, #0x0                   	// #0
    4ef0:	ldr	x4, [sp, #16]
    4ef4:	ldr	x3, [sp, #24]
    4ef8:	ldr	x2, [sp, #32]
    4efc:	ldr	x1, [sp, #40]
    4f00:	ldr	x0, [sp, #72]
    4f04:	bl	31b8 <gomp_update>
    4f08:	b	4f10 <GOMP_target_update+0x84>
    4f0c:	nop
    4f10:	ldp	x29, x30, [sp], #80
    4f14:	ret

0000000000004f18 <GOMP_target_update_ext>:
    4f18:	sub	sp, sp, #0x80
    4f1c:	stp	x29, x30, [sp, #16]
    4f20:	add	x29, sp, #0x10
    4f24:	str	w0, [sp, #76]
    4f28:	str	x1, [sp, #64]
    4f2c:	str	x2, [sp, #56]
    4f30:	str	x3, [sp, #48]
    4f34:	str	x4, [sp, #40]
    4f38:	str	w5, [sp, #72]
    4f3c:	str	x6, [sp, #32]
    4f40:	ldr	w0, [sp, #76]
    4f44:	bl	218 <resolve_device>
    4f48:	str	x0, [sp, #120]
    4f4c:	ldr	x0, [sp, #32]
    4f50:	cmp	x0, #0x0
    4f54:	b.eq	50cc <GOMP_target_update_ext+0x1b4>  // b.none
    4f58:	bl	114 <gomp_thread>
    4f5c:	str	x0, [sp, #112]
    4f60:	ldr	x0, [sp, #112]
    4f64:	ldr	x0, [x0, #80]
    4f68:	cmp	x0, #0x0
    4f6c:	b.eq	50cc <GOMP_target_update_ext+0x1b4>  // b.none
    4f70:	ldr	x0, [sp, #112]
    4f74:	ldr	x0, [x0, #80]
    4f78:	ldr	x0, [x0, #56]
    4f7c:	cmp	x0, #0x0
    4f80:	b.eq	50cc <GOMP_target_update_ext+0x1b4>  // b.none
    4f84:	ldr	w0, [sp, #72]
    4f88:	and	w0, w0, #0x1
    4f8c:	cmp	w0, #0x0
    4f90:	b.eq	5004 <GOMP_target_update_ext+0xec>  // b.none
    4f94:	ldr	x0, [sp, #112]
    4f98:	ldr	x0, [x0, #16]
    4f9c:	cmp	x0, #0x0
    4fa0:	b.eq	5004 <GOMP_target_update_ext+0xec>  // b.none
    4fa4:	ldr	x0, [sp, #112]
    4fa8:	ldr	x0, [x0, #80]
    4fac:	ldrb	w0, [x0, #205]
    4fb0:	eor	w0, w0, #0x1
    4fb4:	and	w0, w0, #0xff
    4fb8:	cmp	w0, #0x0
    4fbc:	b.eq	5004 <GOMP_target_update_ext+0xec>  // b.none
    4fc0:	ldr	w0, [sp, #72]
    4fc4:	orr	w0, w0, #0x80000000
    4fc8:	str	wzr, [sp, #8]
    4fcc:	str	xzr, [sp]
    4fd0:	ldr	x7, [sp, #32]
    4fd4:	mov	w6, w0
    4fd8:	ldr	x5, [sp, #40]
    4fdc:	ldr	x4, [sp, #48]
    4fe0:	ldr	x3, [sp, #56]
    4fe4:	ldr	x2, [sp, #64]
    4fe8:	mov	x1, #0x0                   	// #0
    4fec:	ldr	x0, [sp, #120]
    4ff0:	bl	0 <gomp_create_target_task>
    4ff4:	and	w0, w0, #0xff
    4ff8:	cmp	w0, #0x0
    4ffc:	b.eq	50cc <GOMP_target_update_ext+0x1b4>  // b.none
    5000:	b	521c <GOMP_target_update_ext+0x304>
    5004:	ldr	x0, [sp, #112]
    5008:	ldr	x0, [x0, #16]
    500c:	str	x0, [sp, #104]
    5010:	adrp	x0, 0 <gomp_cancel_var>
    5014:	add	x0, x0, #0x0
    5018:	ldrb	w0, [x0]
    501c:	and	x0, x0, #0xff
    5020:	cmp	x0, #0x0
    5024:	b.eq	50c4 <GOMP_target_update_ext+0x1ac>  // b.none
    5028:	ldr	x0, [sp, #104]
    502c:	cmp	x0, #0x0
    5030:	b.eq	50c4 <GOMP_target_update_ext+0x1ac>  // b.none
    5034:	ldr	x0, [sp, #104]
    5038:	add	x0, x0, #0x80
    503c:	bl	dc <gomp_team_barrier_cancelled>
    5040:	and	w0, w0, #0xff
    5044:	cmp	w0, #0x0
    5048:	b.ne	51e8 <GOMP_target_update_ext+0x2d0>  // b.any
    504c:	ldr	x0, [sp, #112]
    5050:	ldr	x0, [x0, #80]
    5054:	ldr	x0, [x0, #40]
    5058:	cmp	x0, #0x0
    505c:	b.eq	50c4 <GOMP_target_update_ext+0x1ac>  // b.none
    5060:	ldr	x0, [sp, #112]
    5064:	ldr	x0, [x0, #80]
    5068:	ldr	x0, [x0, #40]
    506c:	ldrb	w0, [x0, #49]
    5070:	cmp	w0, #0x0
    5074:	b.ne	51f0 <GOMP_target_update_ext+0x2d8>  // b.any
    5078:	ldr	x0, [sp, #112]
    507c:	ldr	x0, [x0, #80]
    5080:	ldr	x0, [x0, #40]
    5084:	ldrb	w0, [x0, #50]
    5088:	cmp	w0, #0x0
    508c:	b.eq	50c4 <GOMP_target_update_ext+0x1ac>  // b.none
    5090:	ldr	x0, [sp, #112]
    5094:	ldr	x0, [x0, #80]
    5098:	ldr	x0, [x0, #40]
    509c:	ldr	x0, [x0]
    50a0:	cmp	x0, #0x0
    50a4:	b.eq	50c4 <GOMP_target_update_ext+0x1ac>  // b.none
    50a8:	ldr	x0, [sp, #112]
    50ac:	ldr	x0, [x0, #80]
    50b0:	ldr	x0, [x0, #40]
    50b4:	ldr	x0, [x0]
    50b8:	ldrb	w0, [x0, #49]
    50bc:	cmp	w0, #0x0
    50c0:	b.ne	51f8 <GOMP_target_update_ext+0x2e0>  // b.any
    50c4:	ldr	x0, [sp, #32]
    50c8:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    50cc:	ldr	x0, [sp, #120]
    50d0:	cmp	x0, #0x0
    50d4:	b.eq	5200 <GOMP_target_update_ext+0x2e8>  // b.none
    50d8:	ldr	x0, [sp, #120]
    50dc:	ldr	w0, [x0, #8]
    50e0:	and	w0, w0, #0x4
    50e4:	cmp	w0, #0x0
    50e8:	b.eq	5200 <GOMP_target_update_ext+0x2e8>  // b.none
    50ec:	ldr	x0, [sp, #120]
    50f0:	ldr	w0, [x0, #8]
    50f4:	and	w0, w0, #0x1
    50f8:	cmp	w0, #0x0
    50fc:	b.ne	5200 <GOMP_target_update_ext+0x2e8>  // b.any
    5100:	bl	114 <gomp_thread>
    5104:	str	x0, [sp, #96]
    5108:	ldr	x0, [sp, #96]
    510c:	ldr	x0, [x0, #16]
    5110:	str	x0, [sp, #88]
    5114:	adrp	x0, 0 <gomp_cancel_var>
    5118:	add	x0, x0, #0x0
    511c:	ldrb	w0, [x0]
    5120:	and	x0, x0, #0xff
    5124:	cmp	x0, #0x0
    5128:	b.eq	51c8 <GOMP_target_update_ext+0x2b0>  // b.none
    512c:	ldr	x0, [sp, #88]
    5130:	cmp	x0, #0x0
    5134:	b.eq	51c8 <GOMP_target_update_ext+0x2b0>  // b.none
    5138:	ldr	x0, [sp, #88]
    513c:	add	x0, x0, #0x80
    5140:	bl	dc <gomp_team_barrier_cancelled>
    5144:	and	w0, w0, #0xff
    5148:	cmp	w0, #0x0
    514c:	b.ne	5208 <GOMP_target_update_ext+0x2f0>  // b.any
    5150:	ldr	x0, [sp, #96]
    5154:	ldr	x0, [x0, #80]
    5158:	ldr	x0, [x0, #40]
    515c:	cmp	x0, #0x0
    5160:	b.eq	51c8 <GOMP_target_update_ext+0x2b0>  // b.none
    5164:	ldr	x0, [sp, #96]
    5168:	ldr	x0, [x0, #80]
    516c:	ldr	x0, [x0, #40]
    5170:	ldrb	w0, [x0, #49]
    5174:	cmp	w0, #0x0
    5178:	b.ne	5210 <GOMP_target_update_ext+0x2f8>  // b.any
    517c:	ldr	x0, [sp, #96]
    5180:	ldr	x0, [x0, #80]
    5184:	ldr	x0, [x0, #40]
    5188:	ldrb	w0, [x0, #50]
    518c:	cmp	w0, #0x0
    5190:	b.eq	51c8 <GOMP_target_update_ext+0x2b0>  // b.none
    5194:	ldr	x0, [sp, #96]
    5198:	ldr	x0, [x0, #80]
    519c:	ldr	x0, [x0, #40]
    51a0:	ldr	x0, [x0]
    51a4:	cmp	x0, #0x0
    51a8:	b.eq	51c8 <GOMP_target_update_ext+0x2b0>  // b.none
    51ac:	ldr	x0, [sp, #96]
    51b0:	ldr	x0, [x0, #80]
    51b4:	ldr	x0, [x0, #40]
    51b8:	ldr	x0, [x0]
    51bc:	ldrb	w0, [x0, #49]
    51c0:	cmp	w0, #0x0
    51c4:	b.ne	5218 <GOMP_target_update_ext+0x300>  // b.any
    51c8:	mov	w5, #0x1                   	// #1
    51cc:	ldr	x4, [sp, #40]
    51d0:	ldr	x3, [sp, #48]
    51d4:	ldr	x2, [sp, #56]
    51d8:	ldr	x1, [sp, #64]
    51dc:	ldr	x0, [sp, #120]
    51e0:	bl	31b8 <gomp_update>
    51e4:	b	521c <GOMP_target_update_ext+0x304>
    51e8:	nop
    51ec:	b	521c <GOMP_target_update_ext+0x304>
    51f0:	nop
    51f4:	b	521c <GOMP_target_update_ext+0x304>
    51f8:	nop
    51fc:	b	521c <GOMP_target_update_ext+0x304>
    5200:	nop
    5204:	b	521c <GOMP_target_update_ext+0x304>
    5208:	nop
    520c:	b	521c <GOMP_target_update_ext+0x304>
    5210:	nop
    5214:	b	521c <GOMP_target_update_ext+0x304>
    5218:	nop
    521c:	ldp	x29, x30, [sp, #16]
    5220:	add	sp, sp, #0x80
    5224:	ret

0000000000005228 <gomp_exit_data>:
    5228:	stp	x29, x30, [sp, #-144]!
    522c:	mov	x29, sp
    5230:	str	x0, [sp, #56]
    5234:	str	x1, [sp, #48]
    5238:	str	x2, [sp, #40]
    523c:	str	x3, [sp, #32]
    5240:	str	x4, [sp, #24]
    5244:	mov	w0, #0xff                  	// #255
    5248:	str	w0, [sp, #132]
    524c:	ldr	x0, [sp, #56]
    5250:	add	x0, x0, #0xa8
    5254:	bl	1c <gomp_mutex_lock>
    5258:	ldr	x0, [sp, #56]
    525c:	ldr	w0, [x0, #172]
    5260:	cmp	w0, #0x2
    5264:	b.ne	5278 <gomp_exit_data+0x50>  // b.any
    5268:	ldr	x0, [sp, #56]
    526c:	add	x0, x0, #0xa8
    5270:	bl	90 <gomp_mutex_unlock>
    5274:	b	552c <gomp_exit_data+0x304>
    5278:	str	xzr, [sp, #136]
    527c:	b	5510 <gomp_exit_data+0x2e8>
    5280:	ldr	x0, [sp, #136]
    5284:	lsl	x0, x0, #1
    5288:	ldr	x1, [sp, #24]
    528c:	add	x0, x1, x0
    5290:	ldrh	w0, [x0]
    5294:	sxtb	w1, w0
    5298:	ldr	w0, [sp, #132]
    529c:	sxtb	w0, w0
    52a0:	and	w0, w1, w0
    52a4:	sxtb	w0, w0
    52a8:	strb	w0, [sp, #131]
    52ac:	ldrb	w0, [sp, #131]
    52b0:	cmp	w0, #0x1f
    52b4:	cset	w1, hi  // hi = pmore
    52b8:	and	w1, w1, #0xff
    52bc:	cmp	w1, #0x0
    52c0:	b.ne	54d8 <gomp_exit_data+0x2b0>  // b.any
    52c4:	mov	x1, #0x1                   	// #1
    52c8:	lsl	x1, x1, x0
    52cc:	mov	x0, #0x8084                	// #32900
    52d0:	movk	x0, #0x8084, lsl #16
    52d4:	and	x0, x1, x0
    52d8:	cmp	x0, #0x0
    52dc:	cset	w0, ne  // ne = any
    52e0:	and	w0, w0, #0xff
    52e4:	cmp	w0, #0x0
    52e8:	b.eq	54d8 <gomp_exit_data+0x2b0>  // b.none
    52ec:	ldr	x0, [sp, #136]
    52f0:	lsl	x0, x0, #3
    52f4:	ldr	x1, [sp, #40]
    52f8:	add	x0, x1, x0
    52fc:	ldr	x0, [x0]
    5300:	str	x0, [sp, #64]
    5304:	ldr	x1, [sp, #64]
    5308:	ldr	x0, [sp, #136]
    530c:	lsl	x0, x0, #3
    5310:	ldr	x2, [sp, #32]
    5314:	add	x0, x2, x0
    5318:	ldr	x0, [x0]
    531c:	add	x0, x1, x0
    5320:	str	x0, [sp, #72]
    5324:	ldrb	w0, [sp, #131]
    5328:	cmp	w0, #0x1f
    532c:	b.eq	533c <gomp_exit_data+0x114>  // b.none
    5330:	ldrb	w0, [sp, #131]
    5334:	cmp	w0, #0xf
    5338:	b.ne	5350 <gomp_exit_data+0x128>  // b.any
    533c:	ldr	x0, [sp, #56]
    5340:	add	x0, x0, #0xa0
    5344:	add	x1, sp, #0x40
    5348:	bl	4d0 <gomp_map_0len_lookup>
    534c:	b	5360 <gomp_exit_data+0x138>
    5350:	ldr	x0, [sp, #56]
    5354:	add	x0, x0, #0xa0
    5358:	add	x1, sp, #0x40
    535c:	bl	0 <splay_tree_prefix_splay_tree_lookup>
    5360:	str	x0, [sp, #120]
    5364:	ldr	x0, [sp, #120]
    5368:	cmp	x0, #0x0
    536c:	b.eq	54f8 <gomp_exit_data+0x2d0>  // b.none
    5370:	ldr	x0, [sp, #120]
    5374:	ldr	x0, [x0, #32]
    5378:	cmp	x0, #0x0
    537c:	b.eq	53a4 <gomp_exit_data+0x17c>  // b.none
    5380:	ldr	x0, [sp, #120]
    5384:	ldr	x0, [x0, #32]
    5388:	cmn	x0, #0x1
    538c:	b.eq	53a4 <gomp_exit_data+0x17c>  // b.none
    5390:	ldr	x0, [sp, #120]
    5394:	ldr	x0, [x0, #32]
    5398:	sub	x1, x0, #0x1
    539c:	ldr	x0, [sp, #120]
    53a0:	str	x1, [x0, #32]
    53a4:	ldrb	w0, [sp, #131]
    53a8:	cmp	w0, #0x7
    53ac:	b.eq	53bc <gomp_exit_data+0x194>  // b.none
    53b0:	ldrb	w0, [sp, #131]
    53b4:	cmp	w0, #0x1f
    53b8:	b.ne	53d4 <gomp_exit_data+0x1ac>  // b.any
    53bc:	ldr	x0, [sp, #120]
    53c0:	ldr	x0, [x0, #32]
    53c4:	cmn	x0, #0x1
    53c8:	b.eq	53d4 <gomp_exit_data+0x1ac>  // b.none
    53cc:	ldr	x0, [sp, #120]
    53d0:	str	xzr, [x0, #32]
    53d4:	ldrb	w0, [sp, #131]
    53d8:	cmp	w0, #0x2
    53dc:	b.ne	53f0 <gomp_exit_data+0x1c8>  // b.any
    53e0:	ldr	x0, [sp, #120]
    53e4:	ldr	x0, [x0, #32]
    53e8:	cmp	x0, #0x0
    53ec:	b.eq	53fc <gomp_exit_data+0x1d4>  // b.none
    53f0:	ldrb	w0, [sp, #131]
    53f4:	cmp	w0, #0x12
    53f8:	b.ne	5450 <gomp_exit_data+0x228>  // b.any
    53fc:	ldr	x0, [sp, #64]
    5400:	mov	x4, x0
    5404:	ldr	x0, [sp, #120]
    5408:	ldr	x0, [x0, #16]
    540c:	ldr	x1, [x0, #16]
    5410:	ldr	x0, [sp, #120]
    5414:	ldr	x0, [x0, #24]
    5418:	add	x1, x1, x0
    541c:	ldr	x0, [sp, #64]
    5420:	add	x1, x1, x0
    5424:	ldr	x0, [sp, #120]
    5428:	ldr	x0, [x0]
    542c:	sub	x0, x1, x0
    5430:	mov	x2, x0
    5434:	ldr	x1, [sp, #72]
    5438:	ldr	x0, [sp, #64]
    543c:	sub	x0, x1, x0
    5440:	mov	x3, x0
    5444:	mov	x1, x4
    5448:	ldr	x0, [sp, #56]
    544c:	bl	9a8 <gomp_copy_dev2host>
    5450:	ldr	x0, [sp, #120]
    5454:	ldr	x0, [x0, #32]
    5458:	cmp	x0, #0x0
    545c:	b.ne	5500 <gomp_exit_data+0x2d8>  // b.any
    5460:	ldr	x0, [sp, #56]
    5464:	add	x0, x0, #0xa0
    5468:	ldr	x1, [sp, #120]
    546c:	bl	0 <splay_tree_prefix_splay_tree_remove>
    5470:	ldr	x0, [sp, #120]
    5474:	ldr	x0, [x0, #48]
    5478:	cmp	x0, #0x0
    547c:	b.eq	549c <gomp_exit_data+0x274>  // b.none
    5480:	ldr	x0, [sp, #56]
    5484:	add	x2, x0, #0xa0
    5488:	ldr	x0, [sp, #120]
    548c:	ldr	x0, [x0, #48]
    5490:	mov	x1, x0
    5494:	mov	x0, x2
    5498:	bl	0 <splay_tree_prefix_splay_tree_insert>
    549c:	ldr	x0, [sp, #120]
    54a0:	ldr	x0, [x0, #16]
    54a4:	ldr	x0, [x0]
    54a8:	cmp	x0, #0x1
    54ac:	b.ls	54c8 <gomp_exit_data+0x2a0>  // b.plast
    54b0:	ldr	x0, [sp, #120]
    54b4:	ldr	x0, [x0, #16]
    54b8:	ldr	x1, [x0]
    54bc:	sub	x1, x1, #0x1
    54c0:	str	x1, [x0]
    54c4:	b	5500 <gomp_exit_data+0x2d8>
    54c8:	ldr	x0, [sp, #120]
    54cc:	ldr	x0, [x0, #16]
    54d0:	bl	2e5c <gomp_unmap_tgt>
    54d4:	b	5500 <gomp_exit_data+0x2d8>
    54d8:	ldr	x0, [sp, #56]
    54dc:	add	x0, x0, #0xa8
    54e0:	bl	90 <gomp_mutex_unlock>
    54e4:	ldrb	w0, [sp, #131]
    54e8:	mov	w1, w0
    54ec:	adrp	x0, 0 <gomp_mutex_init>
    54f0:	add	x0, x0, #0x0
    54f4:	bl	0 <gomp_fatal>
    54f8:	nop
    54fc:	b	5504 <gomp_exit_data+0x2dc>
    5500:	nop
    5504:	ldr	x0, [sp, #136]
    5508:	add	x0, x0, #0x1
    550c:	str	x0, [sp, #136]
    5510:	ldr	x1, [sp, #136]
    5514:	ldr	x0, [sp, #48]
    5518:	cmp	x1, x0
    551c:	b.cc	5280 <gomp_exit_data+0x58>  // b.lo, b.ul, b.last
    5520:	ldr	x0, [sp, #56]
    5524:	add	x0, x0, #0xa8
    5528:	bl	90 <gomp_mutex_unlock>
    552c:	ldp	x29, x30, [sp], #144
    5530:	ret

0000000000005534 <GOMP_target_enter_exit_data>:
    5534:	sub	sp, sp, #0x80
    5538:	stp	x29, x30, [sp, #16]
    553c:	add	x29, sp, #0x10
    5540:	str	w0, [sp, #76]
    5544:	str	x1, [sp, #64]
    5548:	str	x2, [sp, #56]
    554c:	str	x3, [sp, #48]
    5550:	str	x4, [sp, #40]
    5554:	str	w5, [sp, #72]
    5558:	str	x6, [sp, #32]
    555c:	ldr	w0, [sp, #76]
    5560:	bl	218 <resolve_device>
    5564:	str	x0, [sp, #112]
    5568:	ldr	x0, [sp, #32]
    556c:	cmp	x0, #0x0
    5570:	b.eq	56e0 <GOMP_target_enter_exit_data+0x1ac>  // b.none
    5574:	bl	114 <gomp_thread>
    5578:	str	x0, [sp, #104]
    557c:	ldr	x0, [sp, #104]
    5580:	ldr	x0, [x0, #80]
    5584:	cmp	x0, #0x0
    5588:	b.eq	56e0 <GOMP_target_enter_exit_data+0x1ac>  // b.none
    558c:	ldr	x0, [sp, #104]
    5590:	ldr	x0, [x0, #80]
    5594:	ldr	x0, [x0, #56]
    5598:	cmp	x0, #0x0
    559c:	b.eq	56e0 <GOMP_target_enter_exit_data+0x1ac>  // b.none
    55a0:	ldr	w0, [sp, #72]
    55a4:	and	w0, w0, #0x1
    55a8:	cmp	w0, #0x0
    55ac:	b.eq	5618 <GOMP_target_enter_exit_data+0xe4>  // b.none
    55b0:	ldr	x0, [sp, #104]
    55b4:	ldr	x0, [x0, #16]
    55b8:	cmp	x0, #0x0
    55bc:	b.eq	5618 <GOMP_target_enter_exit_data+0xe4>  // b.none
    55c0:	ldr	x0, [sp, #104]
    55c4:	ldr	x0, [x0, #80]
    55c8:	ldrb	w0, [x0, #205]
    55cc:	eor	w0, w0, #0x1
    55d0:	and	w0, w0, #0xff
    55d4:	cmp	w0, #0x0
    55d8:	b.eq	5618 <GOMP_target_enter_exit_data+0xe4>  // b.none
    55dc:	str	wzr, [sp, #8]
    55e0:	str	xzr, [sp]
    55e4:	ldr	x7, [sp, #32]
    55e8:	ldr	w6, [sp, #72]
    55ec:	ldr	x5, [sp, #40]
    55f0:	ldr	x4, [sp, #48]
    55f4:	ldr	x3, [sp, #56]
    55f8:	ldr	x2, [sp, #64]
    55fc:	mov	x1, #0x0                   	// #0
    5600:	ldr	x0, [sp, #112]
    5604:	bl	0 <gomp_create_target_task>
    5608:	and	w0, w0, #0xff
    560c:	cmp	w0, #0x0
    5610:	b.eq	56e0 <GOMP_target_enter_exit_data+0x1ac>  // b.none
    5614:	b	5960 <GOMP_target_enter_exit_data+0x42c>
    5618:	ldr	x0, [sp, #104]
    561c:	ldr	x0, [x0, #16]
    5620:	str	x0, [sp, #96]
    5624:	adrp	x0, 0 <gomp_cancel_var>
    5628:	add	x0, x0, #0x0
    562c:	ldrb	w0, [x0]
    5630:	and	x0, x0, #0xff
    5634:	cmp	x0, #0x0
    5638:	b.eq	56d8 <GOMP_target_enter_exit_data+0x1a4>  // b.none
    563c:	ldr	x0, [sp, #96]
    5640:	cmp	x0, #0x0
    5644:	b.eq	56d8 <GOMP_target_enter_exit_data+0x1a4>  // b.none
    5648:	ldr	x0, [sp, #96]
    564c:	add	x0, x0, #0x80
    5650:	bl	dc <gomp_team_barrier_cancelled>
    5654:	and	w0, w0, #0xff
    5658:	cmp	w0, #0x0
    565c:	b.ne	592c <GOMP_target_enter_exit_data+0x3f8>  // b.any
    5660:	ldr	x0, [sp, #104]
    5664:	ldr	x0, [x0, #80]
    5668:	ldr	x0, [x0, #40]
    566c:	cmp	x0, #0x0
    5670:	b.eq	56d8 <GOMP_target_enter_exit_data+0x1a4>  // b.none
    5674:	ldr	x0, [sp, #104]
    5678:	ldr	x0, [x0, #80]
    567c:	ldr	x0, [x0, #40]
    5680:	ldrb	w0, [x0, #49]
    5684:	cmp	w0, #0x0
    5688:	b.ne	5934 <GOMP_target_enter_exit_data+0x400>  // b.any
    568c:	ldr	x0, [sp, #104]
    5690:	ldr	x0, [x0, #80]
    5694:	ldr	x0, [x0, #40]
    5698:	ldrb	w0, [x0, #50]
    569c:	cmp	w0, #0x0
    56a0:	b.eq	56d8 <GOMP_target_enter_exit_data+0x1a4>  // b.none
    56a4:	ldr	x0, [sp, #104]
    56a8:	ldr	x0, [x0, #80]
    56ac:	ldr	x0, [x0, #40]
    56b0:	ldr	x0, [x0]
    56b4:	cmp	x0, #0x0
    56b8:	b.eq	56d8 <GOMP_target_enter_exit_data+0x1a4>  // b.none
    56bc:	ldr	x0, [sp, #104]
    56c0:	ldr	x0, [x0, #80]
    56c4:	ldr	x0, [x0, #40]
    56c8:	ldr	x0, [x0]
    56cc:	ldrb	w0, [x0, #49]
    56d0:	cmp	w0, #0x0
    56d4:	b.ne	593c <GOMP_target_enter_exit_data+0x408>  // b.any
    56d8:	ldr	x0, [sp, #32]
    56dc:	bl	0 <gomp_task_maybe_wait_for_dependencies>
    56e0:	ldr	x0, [sp, #112]
    56e4:	cmp	x0, #0x0
    56e8:	b.eq	5944 <GOMP_target_enter_exit_data+0x410>  // b.none
    56ec:	ldr	x0, [sp, #112]
    56f0:	ldr	w0, [x0, #8]
    56f4:	and	w0, w0, #0x4
    56f8:	cmp	w0, #0x0
    56fc:	b.eq	5944 <GOMP_target_enter_exit_data+0x410>  // b.none
    5700:	ldr	x0, [sp, #112]
    5704:	ldr	w0, [x0, #8]
    5708:	and	w0, w0, #0x1
    570c:	cmp	w0, #0x0
    5710:	b.ne	5944 <GOMP_target_enter_exit_data+0x410>  // b.any
    5714:	bl	114 <gomp_thread>
    5718:	str	x0, [sp, #88]
    571c:	ldr	x0, [sp, #88]
    5720:	ldr	x0, [x0, #16]
    5724:	str	x0, [sp, #80]
    5728:	adrp	x0, 0 <gomp_cancel_var>
    572c:	add	x0, x0, #0x0
    5730:	ldrb	w0, [x0]
    5734:	and	x0, x0, #0xff
    5738:	cmp	x0, #0x0
    573c:	b.eq	57dc <GOMP_target_enter_exit_data+0x2a8>  // b.none
    5740:	ldr	x0, [sp, #80]
    5744:	cmp	x0, #0x0
    5748:	b.eq	57dc <GOMP_target_enter_exit_data+0x2a8>  // b.none
    574c:	ldr	x0, [sp, #80]
    5750:	add	x0, x0, #0x80
    5754:	bl	dc <gomp_team_barrier_cancelled>
    5758:	and	w0, w0, #0xff
    575c:	cmp	w0, #0x0
    5760:	b.ne	594c <GOMP_target_enter_exit_data+0x418>  // b.any
    5764:	ldr	x0, [sp, #88]
    5768:	ldr	x0, [x0, #80]
    576c:	ldr	x0, [x0, #40]
    5770:	cmp	x0, #0x0
    5774:	b.eq	57dc <GOMP_target_enter_exit_data+0x2a8>  // b.none
    5778:	ldr	x0, [sp, #88]
    577c:	ldr	x0, [x0, #80]
    5780:	ldr	x0, [x0, #40]
    5784:	ldrb	w0, [x0, #49]
    5788:	cmp	w0, #0x0
    578c:	b.ne	5954 <GOMP_target_enter_exit_data+0x420>  // b.any
    5790:	ldr	x0, [sp, #88]
    5794:	ldr	x0, [x0, #80]
    5798:	ldr	x0, [x0, #40]
    579c:	ldrb	w0, [x0, #50]
    57a0:	cmp	w0, #0x0
    57a4:	b.eq	57dc <GOMP_target_enter_exit_data+0x2a8>  // b.none
    57a8:	ldr	x0, [sp, #88]
    57ac:	ldr	x0, [x0, #80]
    57b0:	ldr	x0, [x0, #40]
    57b4:	ldr	x0, [x0]
    57b8:	cmp	x0, #0x0
    57bc:	b.eq	57dc <GOMP_target_enter_exit_data+0x2a8>  // b.none
    57c0:	ldr	x0, [sp, #88]
    57c4:	ldr	x0, [x0, #80]
    57c8:	ldr	x0, [x0, #40]
    57cc:	ldr	x0, [x0]
    57d0:	ldrb	w0, [x0, #49]
    57d4:	cmp	w0, #0x0
    57d8:	b.ne	595c <GOMP_target_enter_exit_data+0x428>  // b.any
    57dc:	ldr	w0, [sp, #72]
    57e0:	and	w0, w0, #0x2
    57e4:	cmp	w0, #0x0
    57e8:	b.ne	5910 <GOMP_target_enter_exit_data+0x3dc>  // b.any
    57ec:	str	xzr, [sp, #120]
    57f0:	b	58fc <GOMP_target_enter_exit_data+0x3c8>
    57f4:	ldr	x0, [sp, #120]
    57f8:	lsl	x0, x0, #1
    57fc:	ldr	x1, [sp, #40]
    5800:	add	x0, x1, x0
    5804:	ldrh	w0, [x0]
    5808:	and	w0, w0, #0xff
    580c:	cmp	w0, #0x1c
    5810:	b.ne	58a0 <GOMP_target_enter_exit_data+0x36c>  // b.any
    5814:	ldr	x0, [sp, #120]
    5818:	lsl	x0, x0, #3
    581c:	ldr	x1, [sp, #48]
    5820:	add	x0, x1, x0
    5824:	ldr	x0, [x0]
    5828:	add	x8, x0, #0x1
    582c:	ldr	x0, [sp, #120]
    5830:	lsl	x0, x0, #3
    5834:	ldr	x1, [sp, #56]
    5838:	add	x2, x1, x0
    583c:	ldr	x0, [sp, #120]
    5840:	lsl	x0, x0, #3
    5844:	ldr	x1, [sp, #48]
    5848:	add	x3, x1, x0
    584c:	ldr	x0, [sp, #120]
    5850:	lsl	x0, x0, #1
    5854:	ldr	x1, [sp, #40]
    5858:	add	x0, x1, x0
    585c:	mov	w7, #0x3                   	// #3
    5860:	mov	w6, #0x1                   	// #1
    5864:	mov	x5, x0
    5868:	mov	x4, x3
    586c:	mov	x3, #0x0                   	// #0
    5870:	mov	x1, x8
    5874:	ldr	x0, [sp, #112]
    5878:	bl	134c <gomp_map_vars>
    587c:	ldr	x0, [sp, #120]
    5880:	lsl	x0, x0, #3
    5884:	ldr	x1, [sp, #48]
    5888:	add	x0, x1, x0
    588c:	ldr	x0, [x0]
    5890:	ldr	x1, [sp, #120]
    5894:	add	x0, x1, x0
    5898:	str	x0, [sp, #120]
    589c:	b	58f0 <GOMP_target_enter_exit_data+0x3bc>
    58a0:	ldr	x0, [sp, #120]
    58a4:	lsl	x0, x0, #3
    58a8:	ldr	x1, [sp, #56]
    58ac:	add	x2, x1, x0
    58b0:	ldr	x0, [sp, #120]
    58b4:	lsl	x0, x0, #3
    58b8:	ldr	x1, [sp, #48]
    58bc:	add	x3, x1, x0
    58c0:	ldr	x0, [sp, #120]
    58c4:	lsl	x0, x0, #1
    58c8:	ldr	x1, [sp, #40]
    58cc:	add	x0, x1, x0
    58d0:	mov	w7, #0x3                   	// #3
    58d4:	mov	w6, #0x1                   	// #1
    58d8:	mov	x5, x0
    58dc:	mov	x4, x3
    58e0:	mov	x3, #0x0                   	// #0
    58e4:	mov	x1, #0x1                   	// #1
    58e8:	ldr	x0, [sp, #112]
    58ec:	bl	134c <gomp_map_vars>
    58f0:	ldr	x0, [sp, #120]
    58f4:	add	x0, x0, #0x1
    58f8:	str	x0, [sp, #120]
    58fc:	ldr	x1, [sp, #120]
    5900:	ldr	x0, [sp, #64]
    5904:	cmp	x1, x0
    5908:	b.cc	57f4 <GOMP_target_enter_exit_data+0x2c0>  // b.lo, b.ul, b.last
    590c:	b	5960 <GOMP_target_enter_exit_data+0x42c>
    5910:	ldr	x4, [sp, #40]
    5914:	ldr	x3, [sp, #48]
    5918:	ldr	x2, [sp, #56]
    591c:	ldr	x1, [sp, #64]
    5920:	ldr	x0, [sp, #112]
    5924:	bl	5228 <gomp_exit_data>
    5928:	b	5960 <GOMP_target_enter_exit_data+0x42c>
    592c:	nop
    5930:	b	5960 <GOMP_target_enter_exit_data+0x42c>
    5934:	nop
    5938:	b	5960 <GOMP_target_enter_exit_data+0x42c>
    593c:	nop
    5940:	b	5960 <GOMP_target_enter_exit_data+0x42c>
    5944:	nop
    5948:	b	5960 <GOMP_target_enter_exit_data+0x42c>
    594c:	nop
    5950:	b	5960 <GOMP_target_enter_exit_data+0x42c>
    5954:	nop
    5958:	b	5960 <GOMP_target_enter_exit_data+0x42c>
    595c:	nop
    5960:	ldp	x29, x30, [sp, #16]
    5964:	add	sp, sp, #0x80
    5968:	ret

000000000000596c <gomp_target_task_fn>:
    596c:	stp	x29, x30, [sp, #-80]!
    5970:	mov	x29, sp
    5974:	str	x0, [sp, #24]
    5978:	ldr	x0, [sp, #24]
    597c:	str	x0, [sp, #56]
    5980:	ldr	x0, [sp, #56]
    5984:	ldr	x0, [x0]
    5988:	str	x0, [sp, #48]
    598c:	ldr	x0, [sp, #56]
    5990:	ldr	x0, [x0, #8]
    5994:	cmp	x0, #0x0
    5998:	b.eq	5b44 <gomp_target_task_fn+0x1d8>  // b.none
    599c:	ldr	x0, [sp, #48]
    59a0:	cmp	x0, #0x0
    59a4:	b.eq	5a14 <gomp_target_task_fn+0xa8>  // b.none
    59a8:	ldr	x0, [sp, #48]
    59ac:	ldr	w0, [x0, #8]
    59b0:	and	w0, w0, #0x4
    59b4:	cmp	w0, #0x0
    59b8:	b.eq	5a14 <gomp_target_task_fn+0xa8>  // b.none
    59bc:	ldr	x0, [sp, #56]
    59c0:	ldr	x0, [x0, #8]
    59c4:	mov	x1, x0
    59c8:	ldr	x0, [sp, #48]
    59cc:	bl	456c <gomp_get_target_fn_addr>
    59d0:	str	x0, [sp, #40]
    59d4:	ldr	x0, [sp, #40]
    59d8:	cmp	x0, #0x0
    59dc:	b.eq	5a14 <gomp_target_task_fn+0xa8>  // b.none
    59e0:	ldr	x0, [sp, #48]
    59e4:	ldr	x0, [x0, #136]
    59e8:	cmp	x0, #0x0
    59ec:	b.eq	5a44 <gomp_target_task_fn+0xd8>  // b.none
    59f0:	ldr	x0, [sp, #48]
    59f4:	ldr	x1, [x0, #136]
    59f8:	ldr	x0, [sp, #40]
    59fc:	blr	x1
    5a00:	and	w0, w0, #0xff
    5a04:	eor	w0, w0, #0x1
    5a08:	and	w0, w0, #0xff
    5a0c:	cmp	w0, #0x0
    5a10:	b.eq	5a44 <gomp_target_task_fn+0xd8>  // b.none
    5a14:	ldr	x0, [sp, #56]
    5a18:	mov	w1, #0x2                   	// #2
    5a1c:	str	w1, [x0, #44]
    5a20:	ldr	x0, [sp, #56]
    5a24:	ldr	x2, [x0, #8]
    5a28:	ldr	x0, [sp, #56]
    5a2c:	add	x0, x0, #0x50
    5a30:	mov	x1, x0
    5a34:	mov	x0, x2
    5a38:	bl	41dc <gomp_target_fallback>
    5a3c:	mov	w0, #0x0                   	// #0
    5a40:	b	5d54 <gomp_target_task_fn+0x3e8>
    5a44:	ldr	x0, [sp, #56]
    5a48:	ldr	w0, [x0, #44]
    5a4c:	cmp	w0, #0x5
    5a50:	b.ne	5a7c <gomp_target_task_fn+0x110>  // b.any
    5a54:	ldr	x0, [sp, #56]
    5a58:	ldr	x0, [x0, #48]
    5a5c:	cmp	x0, #0x0
    5a60:	b.eq	5a74 <gomp_target_task_fn+0x108>  // b.none
    5a64:	ldr	x0, [sp, #56]
    5a68:	ldr	x0, [x0, #48]
    5a6c:	mov	w1, #0x1                   	// #1
    5a70:	bl	2f50 <gomp_unmap_vars>
    5a74:	mov	w0, #0x0                   	// #0
    5a78:	b	5d54 <gomp_target_task_fn+0x3e8>
    5a7c:	ldr	x0, [sp, #48]
    5a80:	ldr	w0, [x0, #8]
    5a84:	and	w0, w0, #0x1
    5a88:	cmp	w0, #0x0
    5a8c:	b.eq	5aa8 <gomp_target_task_fn+0x13c>  // b.none
    5a90:	ldr	x0, [sp, #56]
    5a94:	str	xzr, [x0, #48]
    5a98:	ldr	x0, [sp, #56]
    5a9c:	add	x0, x0, #0x50
    5aa0:	str	x0, [sp, #72]
    5aa4:	b	5b00 <gomp_target_task_fn+0x194>
    5aa8:	ldr	x0, [sp, #56]
    5aac:	ldr	x1, [x0, #16]
    5ab0:	ldr	x0, [sp, #56]
    5ab4:	add	x2, x0, #0x50
    5ab8:	ldr	x0, [sp, #56]
    5abc:	ldr	x3, [x0, #24]
    5ac0:	ldr	x0, [sp, #56]
    5ac4:	ldr	x0, [x0, #32]
    5ac8:	mov	w7, #0x1                   	// #1
    5acc:	mov	w6, #0x1                   	// #1
    5ad0:	mov	x5, x0
    5ad4:	mov	x4, x3
    5ad8:	mov	x3, #0x0                   	// #0
    5adc:	ldr	x0, [sp, #48]
    5ae0:	bl	134c <gomp_map_vars>
    5ae4:	mov	x1, x0
    5ae8:	ldr	x0, [sp, #56]
    5aec:	str	x1, [x0, #48]
    5af0:	ldr	x0, [sp, #56]
    5af4:	ldr	x0, [x0, #48]
    5af8:	ldr	x0, [x0, #16]
    5afc:	str	x0, [sp, #72]
    5b00:	ldr	x0, [sp, #56]
    5b04:	mov	w1, #0x3                   	// #3
    5b08:	str	w1, [x0, #44]
    5b0c:	ldr	x0, [sp, #48]
    5b10:	ldr	x5, [x0, #152]
    5b14:	ldr	x0, [sp, #48]
    5b18:	ldr	w6, [x0, #12]
    5b1c:	ldr	x0, [sp, #56]
    5b20:	ldr	x0, [x0, #72]
    5b24:	ldr	x4, [sp, #56]
    5b28:	mov	x3, x0
    5b2c:	ldr	x2, [sp, #72]
    5b30:	ldr	x1, [sp, #40]
    5b34:	mov	w0, w6
    5b38:	blr	x5
    5b3c:	mov	w0, #0x1                   	// #1
    5b40:	b	5d54 <gomp_target_task_fn+0x3e8>
    5b44:	ldr	x0, [sp, #48]
    5b48:	cmp	x0, #0x0
    5b4c:	b.eq	5b78 <gomp_target_task_fn+0x20c>  // b.none
    5b50:	ldr	x0, [sp, #48]
    5b54:	ldr	w0, [x0, #8]
    5b58:	and	w0, w0, #0x4
    5b5c:	cmp	w0, #0x0
    5b60:	b.eq	5b78 <gomp_target_task_fn+0x20c>  // b.none
    5b64:	ldr	x0, [sp, #48]
    5b68:	ldr	w0, [x0, #8]
    5b6c:	and	w0, w0, #0x1
    5b70:	cmp	w0, #0x0
    5b74:	b.eq	5b80 <gomp_target_task_fn+0x214>  // b.none
    5b78:	mov	w0, #0x0                   	// #0
    5b7c:	b	5d54 <gomp_target_task_fn+0x3e8>
    5b80:	ldr	x0, [sp, #56]
    5b84:	ldr	w0, [x0, #40]
    5b88:	cmp	w0, #0x0
    5b8c:	b.ge	5bc4 <gomp_target_task_fn+0x258>  // b.tcont
    5b90:	ldr	x0, [sp, #56]
    5b94:	ldr	x1, [x0, #16]
    5b98:	ldr	x0, [sp, #56]
    5b9c:	add	x2, x0, #0x50
    5ba0:	ldr	x0, [sp, #56]
    5ba4:	ldr	x3, [x0, #24]
    5ba8:	ldr	x0, [sp, #56]
    5bac:	ldr	x0, [x0, #32]
    5bb0:	mov	w5, #0x1                   	// #1
    5bb4:	mov	x4, x0
    5bb8:	ldr	x0, [sp, #48]
    5bbc:	bl	31b8 <gomp_update>
    5bc0:	b	5d50 <gomp_target_task_fn+0x3e4>
    5bc4:	ldr	x0, [sp, #56]
    5bc8:	ldr	w0, [x0, #40]
    5bcc:	and	w0, w0, #0x2
    5bd0:	cmp	w0, #0x0
    5bd4:	b.ne	5d24 <gomp_target_task_fn+0x3b8>  // b.any
    5bd8:	str	xzr, [sp, #64]
    5bdc:	b	5d0c <gomp_target_task_fn+0x3a0>
    5be0:	ldr	x0, [sp, #56]
    5be4:	ldr	x1, [x0, #32]
    5be8:	ldr	x0, [sp, #64]
    5bec:	lsl	x0, x0, #1
    5bf0:	add	x0, x1, x0
    5bf4:	ldrh	w0, [x0]
    5bf8:	and	w0, w0, #0xff
    5bfc:	cmp	w0, #0x1c
    5c00:	b.ne	5ca4 <gomp_target_task_fn+0x338>  // b.any
    5c04:	ldr	x0, [sp, #56]
    5c08:	ldr	x1, [x0, #24]
    5c0c:	ldr	x0, [sp, #64]
    5c10:	lsl	x0, x0, #3
    5c14:	add	x0, x1, x0
    5c18:	ldr	x0, [x0]
    5c1c:	add	x8, x0, #0x1
    5c20:	ldr	x0, [sp, #64]
    5c24:	add	x0, x0, #0xa
    5c28:	lsl	x0, x0, #3
    5c2c:	ldr	x1, [sp, #56]
    5c30:	add	x2, x1, x0
    5c34:	ldr	x0, [sp, #56]
    5c38:	ldr	x1, [x0, #24]
    5c3c:	ldr	x0, [sp, #64]
    5c40:	lsl	x0, x0, #3
    5c44:	add	x3, x1, x0
    5c48:	ldr	x0, [sp, #56]
    5c4c:	ldr	x1, [x0, #32]
    5c50:	ldr	x0, [sp, #64]
    5c54:	lsl	x0, x0, #1
    5c58:	add	x0, x1, x0
    5c5c:	mov	w7, #0x3                   	// #3
    5c60:	mov	w6, #0x1                   	// #1
    5c64:	mov	x5, x0
    5c68:	mov	x4, x3
    5c6c:	mov	x3, #0x0                   	// #0
    5c70:	mov	x1, x8
    5c74:	ldr	x0, [sp, #48]
    5c78:	bl	134c <gomp_map_vars>
    5c7c:	ldr	x0, [sp, #56]
    5c80:	ldr	x1, [x0, #24]
    5c84:	ldr	x0, [sp, #64]
    5c88:	lsl	x0, x0, #3
    5c8c:	add	x0, x1, x0
    5c90:	ldr	x0, [x0]
    5c94:	ldr	x1, [sp, #64]
    5c98:	add	x0, x1, x0
    5c9c:	str	x0, [sp, #64]
    5ca0:	b	5d00 <gomp_target_task_fn+0x394>
    5ca4:	ldr	x0, [sp, #64]
    5ca8:	add	x0, x0, #0xa
    5cac:	lsl	x0, x0, #3
    5cb0:	ldr	x1, [sp, #56]
    5cb4:	add	x2, x1, x0
    5cb8:	ldr	x0, [sp, #56]
    5cbc:	ldr	x1, [x0, #24]
    5cc0:	ldr	x0, [sp, #64]
    5cc4:	lsl	x0, x0, #3
    5cc8:	add	x3, x1, x0
    5ccc:	ldr	x0, [sp, #56]
    5cd0:	ldr	x1, [x0, #32]
    5cd4:	ldr	x0, [sp, #64]
    5cd8:	lsl	x0, x0, #1
    5cdc:	add	x0, x1, x0
    5ce0:	mov	w7, #0x3                   	// #3
    5ce4:	mov	w6, #0x1                   	// #1
    5ce8:	mov	x5, x0
    5cec:	mov	x4, x3
    5cf0:	mov	x3, #0x0                   	// #0
    5cf4:	mov	x1, #0x1                   	// #1
    5cf8:	ldr	x0, [sp, #48]
    5cfc:	bl	134c <gomp_map_vars>
    5d00:	ldr	x0, [sp, #64]
    5d04:	add	x0, x0, #0x1
    5d08:	str	x0, [sp, #64]
    5d0c:	ldr	x0, [sp, #56]
    5d10:	ldr	x0, [x0, #16]
    5d14:	ldr	x1, [sp, #64]
    5d18:	cmp	x1, x0
    5d1c:	b.cc	5be0 <gomp_target_task_fn+0x274>  // b.lo, b.ul, b.last
    5d20:	b	5d50 <gomp_target_task_fn+0x3e4>
    5d24:	ldr	x0, [sp, #56]
    5d28:	ldr	x1, [x0, #16]
    5d2c:	ldr	x0, [sp, #56]
    5d30:	add	x2, x0, #0x50
    5d34:	ldr	x0, [sp, #56]
    5d38:	ldr	x3, [x0, #24]
    5d3c:	ldr	x0, [sp, #56]
    5d40:	ldr	x0, [x0, #32]
    5d44:	mov	x4, x0
    5d48:	ldr	x0, [sp, #48]
    5d4c:	bl	5228 <gomp_exit_data>
    5d50:	mov	w0, #0x0                   	// #0
    5d54:	ldp	x29, x30, [sp], #80
    5d58:	ret

0000000000005d5c <GOMP_teams>:
    5d5c:	stp	x29, x30, [sp, #-48]!
    5d60:	mov	x29, sp
    5d64:	str	w0, [sp, #28]
    5d68:	str	w1, [sp, #24]
    5d6c:	ldr	w0, [sp, #24]
    5d70:	cmp	w0, #0x0
    5d74:	b.eq	5da4 <GOMP_teams+0x48>  // b.none
    5d78:	mov	w0, #0x1                   	// #1
    5d7c:	bl	128 <gomp_icv>
    5d80:	str	x0, [sp, #40]
    5d84:	ldr	w0, [sp, #24]
    5d88:	cmp	w0, #0x0
    5d8c:	b.lt	5d98 <GOMP_teams+0x3c>  // b.tstop
    5d90:	ldr	w0, [sp, #24]
    5d94:	b	5d9c <GOMP_teams+0x40>
    5d98:	mov	w0, #0xffffffff            	// #-1
    5d9c:	ldr	x1, [sp, #40]
    5da0:	str	w0, [x1, #20]
    5da4:	nop
    5da8:	ldp	x29, x30, [sp], #48
    5dac:	ret

0000000000005db0 <omp_target_alloc>:
    5db0:	stp	x29, x30, [sp, #-48]!
    5db4:	mov	x29, sp
    5db8:	str	x0, [sp, #24]
    5dbc:	str	w1, [sp, #20]
    5dc0:	ldr	w0, [sp, #20]
    5dc4:	cmn	w0, #0x2
    5dc8:	b.ne	5dd8 <omp_target_alloc+0x28>  // b.any
    5dcc:	ldr	x0, [sp, #24]
    5dd0:	bl	0 <malloc>
    5dd4:	b	5e78 <omp_target_alloc+0xc8>
    5dd8:	ldr	w0, [sp, #20]
    5ddc:	cmp	w0, #0x0
    5de0:	b.ge	5dec <omp_target_alloc+0x3c>  // b.tcont
    5de4:	mov	x0, #0x0                   	// #0
    5de8:	b	5e78 <omp_target_alloc+0xc8>
    5dec:	ldr	w0, [sp, #20]
    5df0:	bl	218 <resolve_device>
    5df4:	str	x0, [sp, #40]
    5df8:	ldr	x0, [sp, #40]
    5dfc:	cmp	x0, #0x0
    5e00:	b.ne	5e0c <omp_target_alloc+0x5c>  // b.any
    5e04:	mov	x0, #0x0                   	// #0
    5e08:	b	5e78 <omp_target_alloc+0xc8>
    5e0c:	ldr	x0, [sp, #40]
    5e10:	ldr	w0, [x0, #8]
    5e14:	and	w0, w0, #0x4
    5e18:	cmp	w0, #0x0
    5e1c:	b.eq	5e34 <omp_target_alloc+0x84>  // b.none
    5e20:	ldr	x0, [sp, #40]
    5e24:	ldr	w0, [x0, #8]
    5e28:	and	w0, w0, #0x1
    5e2c:	cmp	w0, #0x0
    5e30:	b.eq	5e40 <omp_target_alloc+0x90>  // b.none
    5e34:	ldr	x0, [sp, #24]
    5e38:	bl	0 <malloc>
    5e3c:	b	5e78 <omp_target_alloc+0xc8>
    5e40:	ldr	x0, [sp, #40]
    5e44:	add	x0, x0, #0xa8
    5e48:	bl	1c <gomp_mutex_lock>
    5e4c:	ldr	x0, [sp, #40]
    5e50:	ldr	x2, [x0, #96]
    5e54:	ldr	x0, [sp, #40]
    5e58:	ldr	w0, [x0, #12]
    5e5c:	ldr	x1, [sp, #24]
    5e60:	blr	x2
    5e64:	str	x0, [sp, #32]
    5e68:	ldr	x0, [sp, #40]
    5e6c:	add	x0, x0, #0xa8
    5e70:	bl	90 <gomp_mutex_unlock>
    5e74:	ldr	x0, [sp, #32]
    5e78:	ldp	x29, x30, [sp], #48
    5e7c:	ret

0000000000005e80 <omp_target_free>:
    5e80:	stp	x29, x30, [sp, #-48]!
    5e84:	mov	x29, sp
    5e88:	str	x0, [sp, #24]
    5e8c:	str	w1, [sp, #20]
    5e90:	ldr	x0, [sp, #24]
    5e94:	cmp	x0, #0x0
    5e98:	b.eq	5f34 <omp_target_free+0xb4>  // b.none
    5e9c:	ldr	w0, [sp, #20]
    5ea0:	cmn	w0, #0x2
    5ea4:	b.ne	5eb4 <omp_target_free+0x34>  // b.any
    5ea8:	ldr	x0, [sp, #24]
    5eac:	bl	0 <free>
    5eb0:	b	5f48 <omp_target_free+0xc8>
    5eb4:	ldr	w0, [sp, #20]
    5eb8:	cmp	w0, #0x0
    5ebc:	b.lt	5f3c <omp_target_free+0xbc>  // b.tstop
    5ec0:	ldr	w0, [sp, #20]
    5ec4:	bl	218 <resolve_device>
    5ec8:	str	x0, [sp, #40]
    5ecc:	ldr	x0, [sp, #40]
    5ed0:	cmp	x0, #0x0
    5ed4:	b.eq	5f44 <omp_target_free+0xc4>  // b.none
    5ed8:	ldr	x0, [sp, #40]
    5edc:	ldr	w0, [x0, #8]
    5ee0:	and	w0, w0, #0x4
    5ee4:	cmp	w0, #0x0
    5ee8:	b.eq	5f00 <omp_target_free+0x80>  // b.none
    5eec:	ldr	x0, [sp, #40]
    5ef0:	ldr	w0, [x0, #8]
    5ef4:	and	w0, w0, #0x1
    5ef8:	cmp	w0, #0x0
    5efc:	b.eq	5f0c <omp_target_free+0x8c>  // b.none
    5f00:	ldr	x0, [sp, #24]
    5f04:	bl	0 <free>
    5f08:	b	5f48 <omp_target_free+0xc8>
    5f0c:	ldr	x0, [sp, #40]
    5f10:	add	x0, x0, #0xa8
    5f14:	bl	1c <gomp_mutex_lock>
    5f18:	ldr	x1, [sp, #24]
    5f1c:	ldr	x0, [sp, #40]
    5f20:	bl	9f8 <gomp_free_device_memory>
    5f24:	ldr	x0, [sp, #40]
    5f28:	add	x0, x0, #0xa8
    5f2c:	bl	90 <gomp_mutex_unlock>
    5f30:	b	5f48 <omp_target_free+0xc8>
    5f34:	nop
    5f38:	b	5f48 <omp_target_free+0xc8>
    5f3c:	nop
    5f40:	b	5f48 <omp_target_free+0xc8>
    5f44:	nop
    5f48:	ldp	x29, x30, [sp], #48
    5f4c:	ret

0000000000005f50 <omp_target_is_present>:
    5f50:	stp	x29, x30, [sp, #-128]!
    5f54:	mov	x29, sp
    5f58:	str	x0, [sp, #24]
    5f5c:	str	w1, [sp, #20]
    5f60:	ldr	x0, [sp, #24]
    5f64:	cmp	x0, #0x0
    5f68:	b.ne	5f74 <omp_target_is_present+0x24>  // b.any
    5f6c:	mov	w0, #0x1                   	// #1
    5f70:	b	604c <omp_target_is_present+0xfc>
    5f74:	ldr	w0, [sp, #20]
    5f78:	cmn	w0, #0x2
    5f7c:	b.ne	5f88 <omp_target_is_present+0x38>  // b.any
    5f80:	mov	w0, #0x1                   	// #1
    5f84:	b	604c <omp_target_is_present+0xfc>
    5f88:	ldr	w0, [sp, #20]
    5f8c:	cmp	w0, #0x0
    5f90:	b.ge	5f9c <omp_target_is_present+0x4c>  // b.tcont
    5f94:	mov	w0, #0x0                   	// #0
    5f98:	b	604c <omp_target_is_present+0xfc>
    5f9c:	ldr	w0, [sp, #20]
    5fa0:	bl	218 <resolve_device>
    5fa4:	str	x0, [sp, #120]
    5fa8:	ldr	x0, [sp, #120]
    5fac:	cmp	x0, #0x0
    5fb0:	b.ne	5fbc <omp_target_is_present+0x6c>  // b.any
    5fb4:	mov	w0, #0x0                   	// #0
    5fb8:	b	604c <omp_target_is_present+0xfc>
    5fbc:	ldr	x0, [sp, #120]
    5fc0:	ldr	w0, [x0, #8]
    5fc4:	and	w0, w0, #0x4
    5fc8:	cmp	w0, #0x0
    5fcc:	b.eq	5fe4 <omp_target_is_present+0x94>  // b.none
    5fd0:	ldr	x0, [sp, #120]
    5fd4:	ldr	w0, [x0, #8]
    5fd8:	and	w0, w0, #0x1
    5fdc:	cmp	w0, #0x0
    5fe0:	b.eq	5fec <omp_target_is_present+0x9c>  // b.none
    5fe4:	mov	w0, #0x1                   	// #1
    5fe8:	b	604c <omp_target_is_present+0xfc>
    5fec:	ldr	x0, [sp, #120]
    5ff0:	add	x0, x0, #0xa8
    5ff4:	bl	1c <gomp_mutex_lock>
    5ff8:	ldr	x0, [sp, #120]
    5ffc:	add	x0, x0, #0xa0
    6000:	str	x0, [sp, #112]
    6004:	ldr	x0, [sp, #24]
    6008:	str	x0, [sp, #40]
    600c:	ldr	x0, [sp, #40]
    6010:	str	x0, [sp, #48]
    6014:	add	x0, sp, #0x28
    6018:	mov	x1, x0
    601c:	ldr	x0, [sp, #112]
    6020:	bl	4d0 <gomp_map_0len_lookup>
    6024:	str	x0, [sp, #104]
    6028:	ldr	x0, [sp, #104]
    602c:	cmp	x0, #0x0
    6030:	cset	w0, ne  // ne = any
    6034:	and	w0, w0, #0xff
    6038:	str	w0, [sp, #100]
    603c:	ldr	x0, [sp, #120]
    6040:	add	x0, x0, #0xa8
    6044:	bl	90 <gomp_mutex_unlock>
    6048:	ldr	w0, [sp, #100]
    604c:	ldp	x29, x30, [sp], #128
    6050:	ret

0000000000006054 <omp_target_memcpy>:
    6054:	stp	x29, x30, [sp, #-96]!
    6058:	mov	x29, sp
    605c:	str	x0, [sp, #56]
    6060:	str	x1, [sp, #48]
    6064:	str	x2, [sp, #40]
    6068:	str	x3, [sp, #32]
    606c:	str	x4, [sp, #24]
    6070:	str	w5, [sp, #20]
    6074:	str	w6, [sp, #16]
    6078:	str	xzr, [sp, #88]
    607c:	str	xzr, [sp, #80]
    6080:	ldr	w0, [sp, #20]
    6084:	cmn	w0, #0x2
    6088:	b.eq	60ec <omp_target_memcpy+0x98>  // b.none
    608c:	ldr	w0, [sp, #20]
    6090:	cmp	w0, #0x0
    6094:	b.ge	60a0 <omp_target_memcpy+0x4c>  // b.tcont
    6098:	mov	w0, #0x16                  	// #22
    609c:	b	6328 <omp_target_memcpy+0x2d4>
    60a0:	ldr	w0, [sp, #20]
    60a4:	bl	218 <resolve_device>
    60a8:	str	x0, [sp, #88]
    60ac:	ldr	x0, [sp, #88]
    60b0:	cmp	x0, #0x0
    60b4:	b.ne	60c0 <omp_target_memcpy+0x6c>  // b.any
    60b8:	mov	w0, #0x16                  	// #22
    60bc:	b	6328 <omp_target_memcpy+0x2d4>
    60c0:	ldr	x0, [sp, #88]
    60c4:	ldr	w0, [x0, #8]
    60c8:	and	w0, w0, #0x4
    60cc:	cmp	w0, #0x0
    60d0:	b.eq	60e8 <omp_target_memcpy+0x94>  // b.none
    60d4:	ldr	x0, [sp, #88]
    60d8:	ldr	w0, [x0, #8]
    60dc:	and	w0, w0, #0x1
    60e0:	cmp	w0, #0x0
    60e4:	b.eq	60ec <omp_target_memcpy+0x98>  // b.none
    60e8:	str	xzr, [sp, #88]
    60ec:	ldr	w0, [sp, #16]
    60f0:	cmn	w0, #0x2
    60f4:	b.eq	6158 <omp_target_memcpy+0x104>  // b.none
    60f8:	ldr	w0, [sp, #16]
    60fc:	cmp	w0, #0x0
    6100:	b.ge	610c <omp_target_memcpy+0xb8>  // b.tcont
    6104:	mov	w0, #0x16                  	// #22
    6108:	b	6328 <omp_target_memcpy+0x2d4>
    610c:	ldr	w0, [sp, #16]
    6110:	bl	218 <resolve_device>
    6114:	str	x0, [sp, #80]
    6118:	ldr	x0, [sp, #80]
    611c:	cmp	x0, #0x0
    6120:	b.ne	612c <omp_target_memcpy+0xd8>  // b.any
    6124:	mov	w0, #0x16                  	// #22
    6128:	b	6328 <omp_target_memcpy+0x2d4>
    612c:	ldr	x0, [sp, #80]
    6130:	ldr	w0, [x0, #8]
    6134:	and	w0, w0, #0x4
    6138:	cmp	w0, #0x0
    613c:	b.eq	6154 <omp_target_memcpy+0x100>  // b.none
    6140:	ldr	x0, [sp, #80]
    6144:	ldr	w0, [x0, #8]
    6148:	and	w0, w0, #0x1
    614c:	cmp	w0, #0x0
    6150:	b.eq	6158 <omp_target_memcpy+0x104>  // b.none
    6154:	str	xzr, [sp, #80]
    6158:	ldr	x0, [sp, #80]
    615c:	cmp	x0, #0x0
    6160:	b.ne	61a0 <omp_target_memcpy+0x14c>  // b.any
    6164:	ldr	x0, [sp, #88]
    6168:	cmp	x0, #0x0
    616c:	b.ne	61a0 <omp_target_memcpy+0x14c>  // b.any
    6170:	ldr	x1, [sp, #56]
    6174:	ldr	x0, [sp, #32]
    6178:	add	x3, x1, x0
    617c:	ldr	x1, [sp, #48]
    6180:	ldr	x0, [sp, #24]
    6184:	add	x0, x1, x0
    6188:	ldr	x2, [sp, #40]
    618c:	mov	x1, x0
    6190:	mov	x0, x3
    6194:	bl	0 <memcpy>
    6198:	mov	w0, #0x0                   	// #0
    619c:	b	6328 <omp_target_memcpy+0x2d4>
    61a0:	ldr	x0, [sp, #80]
    61a4:	cmp	x0, #0x0
    61a8:	b.ne	6220 <omp_target_memcpy+0x1cc>  // b.any
    61ac:	ldr	x0, [sp, #88]
    61b0:	add	x0, x0, #0xa8
    61b4:	bl	1c <gomp_mutex_lock>
    61b8:	ldr	x0, [sp, #88]
    61bc:	ldr	x4, [x0, #120]
    61c0:	ldr	x0, [sp, #88]
    61c4:	ldr	w5, [x0, #12]
    61c8:	ldr	x1, [sp, #56]
    61cc:	ldr	x0, [sp, #32]
    61d0:	add	x6, x1, x0
    61d4:	ldr	x1, [sp, #48]
    61d8:	ldr	x0, [sp, #24]
    61dc:	add	x0, x1, x0
    61e0:	ldr	x3, [sp, #40]
    61e4:	mov	x2, x0
    61e8:	mov	x1, x6
    61ec:	mov	w0, w5
    61f0:	blr	x4
    61f4:	strb	w0, [sp, #79]
    61f8:	ldr	x0, [sp, #88]
    61fc:	add	x0, x0, #0xa8
    6200:	bl	90 <gomp_mutex_unlock>
    6204:	ldrb	w0, [sp, #79]
    6208:	cmp	w0, #0x0
    620c:	b.eq	6218 <omp_target_memcpy+0x1c4>  // b.none
    6210:	mov	w0, #0x0                   	// #0
    6214:	b	6328 <omp_target_memcpy+0x2d4>
    6218:	mov	w0, #0x16                  	// #22
    621c:	b	6328 <omp_target_memcpy+0x2d4>
    6220:	ldr	x0, [sp, #88]
    6224:	cmp	x0, #0x0
    6228:	b.ne	62a0 <omp_target_memcpy+0x24c>  // b.any
    622c:	ldr	x0, [sp, #80]
    6230:	add	x0, x0, #0xa8
    6234:	bl	1c <gomp_mutex_lock>
    6238:	ldr	x0, [sp, #80]
    623c:	ldr	x4, [x0, #112]
    6240:	ldr	x0, [sp, #80]
    6244:	ldr	w5, [x0, #12]
    6248:	ldr	x1, [sp, #56]
    624c:	ldr	x0, [sp, #32]
    6250:	add	x6, x1, x0
    6254:	ldr	x1, [sp, #48]
    6258:	ldr	x0, [sp, #24]
    625c:	add	x0, x1, x0
    6260:	ldr	x3, [sp, #40]
    6264:	mov	x2, x0
    6268:	mov	x1, x6
    626c:	mov	w0, w5
    6270:	blr	x4
    6274:	strb	w0, [sp, #79]
    6278:	ldr	x0, [sp, #80]
    627c:	add	x0, x0, #0xa8
    6280:	bl	90 <gomp_mutex_unlock>
    6284:	ldrb	w0, [sp, #79]
    6288:	cmp	w0, #0x0
    628c:	b.eq	6298 <omp_target_memcpy+0x244>  // b.none
    6290:	mov	w0, #0x0                   	// #0
    6294:	b	6328 <omp_target_memcpy+0x2d4>
    6298:	mov	w0, #0x16                  	// #22
    629c:	b	6328 <omp_target_memcpy+0x2d4>
    62a0:	ldr	x1, [sp, #80]
    62a4:	ldr	x0, [sp, #88]
    62a8:	cmp	x1, x0
    62ac:	b.ne	6324 <omp_target_memcpy+0x2d0>  // b.any
    62b0:	ldr	x0, [sp, #80]
    62b4:	add	x0, x0, #0xa8
    62b8:	bl	1c <gomp_mutex_lock>
    62bc:	ldr	x0, [sp, #80]
    62c0:	ldr	x4, [x0, #128]
    62c4:	ldr	x0, [sp, #80]
    62c8:	ldr	w5, [x0, #12]
    62cc:	ldr	x1, [sp, #56]
    62d0:	ldr	x0, [sp, #32]
    62d4:	add	x6, x1, x0
    62d8:	ldr	x1, [sp, #48]
    62dc:	ldr	x0, [sp, #24]
    62e0:	add	x0, x1, x0
    62e4:	ldr	x3, [sp, #40]
    62e8:	mov	x2, x0
    62ec:	mov	x1, x6
    62f0:	mov	w0, w5
    62f4:	blr	x4
    62f8:	strb	w0, [sp, #79]
    62fc:	ldr	x0, [sp, #80]
    6300:	add	x0, x0, #0xa8
    6304:	bl	90 <gomp_mutex_unlock>
    6308:	ldrb	w0, [sp, #79]
    630c:	cmp	w0, #0x0
    6310:	b.eq	631c <omp_target_memcpy+0x2c8>  // b.none
    6314:	mov	w0, #0x0                   	// #0
    6318:	b	6328 <omp_target_memcpy+0x2d4>
    631c:	mov	w0, #0x16                  	// #22
    6320:	b	6328 <omp_target_memcpy+0x2d4>
    6324:	mov	w0, #0x16                  	// #22
    6328:	ldp	x29, x30, [sp], #96
    632c:	ret

0000000000006330 <omp_target_memcpy_rect_worker>:
    6330:	sub	sp, sp, #0x140
    6334:	stp	x29, x30, [sp, #32]
    6338:	add	x29, sp, #0x20
    633c:	stp	x19, x20, [sp, #48]
    6340:	stp	x21, x22, [sp, #64]
    6344:	stp	x23, x24, [sp, #80]
    6348:	stp	x25, x26, [sp, #96]
    634c:	str	x27, [sp, #112]
    6350:	str	x0, [sp, #248]
    6354:	str	x1, [sp, #240]
    6358:	str	x2, [sp, #232]
    635c:	str	w3, [sp, #228]
    6360:	str	x4, [sp, #216]
    6364:	str	x5, [sp, #208]
    6368:	str	x6, [sp, #200]
    636c:	str	x7, [sp, #192]
    6370:	ldr	x0, [sp, #232]
    6374:	str	x0, [sp, #296]
    6378:	ldr	x0, [sp, #232]
    637c:	str	x0, [sp, #288]
    6380:	ldr	w0, [sp, #228]
    6384:	cmp	w0, #0x1
    6388:	b.ne	6610 <omp_target_memcpy_rect_worker+0x2e0>  // b.any
    638c:	ldr	x0, [sp, #216]
    6390:	ldr	x1, [x0]
    6394:	mov	x2, #0x0                   	// #0
    6398:	ldr	x0, [sp, #232]
    639c:	mul	x3, x1, x0
    63a0:	umulh	x0, x1, x0
    63a4:	str	x3, [sp, #128]
    63a8:	str	x0, [sp, #136]
    63ac:	ldr	x0, [sp, #136]
    63b0:	str	x0, [sp, #160]
    63b4:	str	xzr, [sp, #168]
    63b8:	ldr	x0, [sp, #160]
    63bc:	cmp	x0, #0x0
    63c0:	b.eq	63c8 <omp_target_memcpy_rect_worker+0x98>  // b.none
    63c4:	mov	x2, #0x1                   	// #1
    63c8:	ldr	x0, [sp, #128]
    63cc:	str	x0, [sp, #264]
    63d0:	mov	x0, x2
    63d4:	and	w0, w0, #0x1
    63d8:	and	w0, w0, #0xff
    63dc:	cmp	w0, #0x0
    63e0:	b.ne	648c <omp_target_memcpy_rect_worker+0x15c>  // b.any
    63e4:	ldr	x0, [sp, #208]
    63e8:	ldr	x1, [x0]
    63ec:	mov	x2, #0x0                   	// #0
    63f0:	ldr	x0, [sp, #232]
    63f4:	mul	x3, x1, x0
    63f8:	umulh	x0, x1, x0
    63fc:	str	x3, [sp, #144]
    6400:	str	x0, [sp, #152]
    6404:	ldr	x0, [sp, #152]
    6408:	str	x0, [sp, #176]
    640c:	str	xzr, [sp, #184]
    6410:	ldr	x0, [sp, #176]
    6414:	cmp	x0, #0x0
    6418:	b.eq	6420 <omp_target_memcpy_rect_worker+0xf0>  // b.none
    641c:	mov	x2, #0x1                   	// #1
    6420:	ldr	x0, [sp, #144]
    6424:	str	x0, [sp, #280]
    6428:	mov	x0, x2
    642c:	and	w0, w0, #0x1
    6430:	and	w0, w0, #0xff
    6434:	cmp	w0, #0x0
    6438:	b.ne	648c <omp_target_memcpy_rect_worker+0x15c>  // b.any
    643c:	ldr	x0, [sp, #200]
    6440:	ldr	x1, [x0]
    6444:	mov	x2, #0x0                   	// #0
    6448:	ldr	x0, [sp, #232]
    644c:	mul	x3, x1, x0
    6450:	umulh	x0, x1, x0
    6454:	mov	x24, x3
    6458:	mov	x25, x0
    645c:	mov	x26, x25
    6460:	mov	x27, #0x0                   	// #0
    6464:	cmp	x26, #0x0
    6468:	b.eq	6470 <omp_target_memcpy_rect_worker+0x140>  // b.none
    646c:	mov	x2, #0x1                   	// #1
    6470:	mov	x0, x24
    6474:	str	x0, [sp, #272]
    6478:	mov	x0, x2
    647c:	and	w0, w0, #0x1
    6480:	and	w0, w0, #0xff
    6484:	cmp	w0, #0x0
    6488:	b.eq	6494 <omp_target_memcpy_rect_worker+0x164>  // b.none
    648c:	mov	w0, #0x16                  	// #22
    6490:	b	6884 <omp_target_memcpy_rect_worker+0x554>
    6494:	ldr	x0, [sp, #328]
    6498:	cmp	x0, #0x0
    649c:	b.ne	64e4 <omp_target_memcpy_rect_worker+0x1b4>  // b.any
    64a0:	ldr	x0, [sp, #336]
    64a4:	cmp	x0, #0x0
    64a8:	b.ne	64e4 <omp_target_memcpy_rect_worker+0x1b4>  // b.any
    64ac:	ldr	x0, [sp, #280]
    64b0:	ldr	x1, [sp, #248]
    64b4:	add	x3, x1, x0
    64b8:	ldr	x0, [sp, #272]
    64bc:	ldr	x1, [sp, #240]
    64c0:	add	x0, x1, x0
    64c4:	ldr	x1, [sp, #264]
    64c8:	mov	x2, x1
    64cc:	mov	x1, x0
    64d0:	mov	x0, x3
    64d4:	bl	0 <memcpy>
    64d8:	mov	w0, #0x1                   	// #1
    64dc:	str	w0, [sp, #304]
    64e0:	b	65f4 <omp_target_memcpy_rect_worker+0x2c4>
    64e4:	ldr	x0, [sp, #336]
    64e8:	cmp	x0, #0x0
    64ec:	b.ne	653c <omp_target_memcpy_rect_worker+0x20c>  // b.any
    64f0:	ldr	x0, [sp, #328]
    64f4:	ldr	x4, [x0, #120]
    64f8:	ldr	x0, [sp, #328]
    64fc:	ldr	w5, [x0, #12]
    6500:	ldr	x0, [sp, #280]
    6504:	ldr	x1, [sp, #248]
    6508:	add	x6, x1, x0
    650c:	ldr	x0, [sp, #272]
    6510:	ldr	x1, [sp, #240]
    6514:	add	x0, x1, x0
    6518:	ldr	x1, [sp, #264]
    651c:	mov	x3, x1
    6520:	mov	x2, x0
    6524:	mov	x1, x6
    6528:	mov	w0, w5
    652c:	blr	x4
    6530:	and	w0, w0, #0xff
    6534:	str	w0, [sp, #304]
    6538:	b	65f4 <omp_target_memcpy_rect_worker+0x2c4>
    653c:	ldr	x0, [sp, #328]
    6540:	cmp	x0, #0x0
    6544:	b.ne	6594 <omp_target_memcpy_rect_worker+0x264>  // b.any
    6548:	ldr	x0, [sp, #336]
    654c:	ldr	x4, [x0, #112]
    6550:	ldr	x0, [sp, #336]
    6554:	ldr	w5, [x0, #12]
    6558:	ldr	x0, [sp, #280]
    655c:	ldr	x1, [sp, #248]
    6560:	add	x6, x1, x0
    6564:	ldr	x0, [sp, #272]
    6568:	ldr	x1, [sp, #240]
    656c:	add	x0, x1, x0
    6570:	ldr	x1, [sp, #264]
    6574:	mov	x3, x1
    6578:	mov	x2, x0
    657c:	mov	x1, x6
    6580:	mov	w0, w5
    6584:	blr	x4
    6588:	and	w0, w0, #0xff
    658c:	str	w0, [sp, #304]
    6590:	b	65f4 <omp_target_memcpy_rect_worker+0x2c4>
    6594:	ldr	x1, [sp, #336]
    6598:	ldr	x0, [sp, #328]
    659c:	cmp	x1, x0
    65a0:	b.ne	65f0 <omp_target_memcpy_rect_worker+0x2c0>  // b.any
    65a4:	ldr	x0, [sp, #336]
    65a8:	ldr	x4, [x0, #128]
    65ac:	ldr	x0, [sp, #336]
    65b0:	ldr	w5, [x0, #12]
    65b4:	ldr	x0, [sp, #280]
    65b8:	ldr	x1, [sp, #248]
    65bc:	add	x6, x1, x0
    65c0:	ldr	x0, [sp, #272]
    65c4:	ldr	x1, [sp, #240]
    65c8:	add	x0, x1, x0
    65cc:	ldr	x1, [sp, #264]
    65d0:	mov	x3, x1
    65d4:	mov	x2, x0
    65d8:	mov	x1, x6
    65dc:	mov	w0, w5
    65e0:	blr	x4
    65e4:	and	w0, w0, #0xff
    65e8:	str	w0, [sp, #304]
    65ec:	b	65f4 <omp_target_memcpy_rect_worker+0x2c4>
    65f0:	str	wzr, [sp, #304]
    65f4:	ldr	w0, [sp, #304]
    65f8:	cmp	w0, #0x0
    65fc:	b.eq	6608 <omp_target_memcpy_rect_worker+0x2d8>  // b.none
    6600:	mov	w0, #0x0                   	// #0
    6604:	b	6884 <omp_target_memcpy_rect_worker+0x554>
    6608:	mov	w0, #0x16                  	// #22
    660c:	b	6884 <omp_target_memcpy_rect_worker+0x554>
    6610:	mov	w0, #0x1                   	// #1
    6614:	str	w0, [sp, #308]
    6618:	b	66e8 <omp_target_memcpy_rect_worker+0x3b8>
    661c:	ldr	x1, [sp, #296]
    6620:	ldrsw	x0, [sp, #308]
    6624:	lsl	x0, x0, #3
    6628:	ldr	x2, [sp, #192]
    662c:	add	x0, x2, x0
    6630:	ldr	x0, [x0]
    6634:	mov	x2, #0x0                   	// #0
    6638:	mul	x3, x1, x0
    663c:	umulh	x0, x1, x0
    6640:	mov	x16, x3
    6644:	mov	x17, x0
    6648:	mov	x18, x17
    664c:	mov	x19, #0x0                   	// #0
    6650:	cmp	x18, #0x0
    6654:	b.eq	665c <omp_target_memcpy_rect_worker+0x32c>  // b.none
    6658:	mov	x2, #0x1                   	// #1
    665c:	mov	x0, x16
    6660:	str	x0, [sp, #296]
    6664:	mov	x0, x2
    6668:	and	w0, w0, #0x1
    666c:	and	w0, w0, #0xff
    6670:	cmp	w0, #0x0
    6674:	b.ne	66d4 <omp_target_memcpy_rect_worker+0x3a4>  // b.any
    6678:	ldr	x1, [sp, #288]
    667c:	ldrsw	x0, [sp, #308]
    6680:	lsl	x0, x0, #3
    6684:	ldr	x2, [sp, #320]
    6688:	add	x0, x2, x0
    668c:	ldr	x0, [x0]
    6690:	mov	x2, #0x0                   	// #0
    6694:	mul	x3, x1, x0
    6698:	umulh	x0, x1, x0
    669c:	mov	x20, x3
    66a0:	mov	x21, x0
    66a4:	mov	x22, x21
    66a8:	mov	x23, #0x0                   	// #0
    66ac:	cmp	x22, #0x0
    66b0:	b.eq	66b8 <omp_target_memcpy_rect_worker+0x388>  // b.none
    66b4:	mov	x2, #0x1                   	// #1
    66b8:	mov	x0, x20
    66bc:	str	x0, [sp, #288]
    66c0:	mov	x0, x2
    66c4:	and	w0, w0, #0x1
    66c8:	and	w0, w0, #0xff
    66cc:	cmp	w0, #0x0
    66d0:	b.eq	66dc <omp_target_memcpy_rect_worker+0x3ac>  // b.none
    66d4:	mov	w0, #0x16                  	// #22
    66d8:	b	6884 <omp_target_memcpy_rect_worker+0x554>
    66dc:	ldr	w0, [sp, #308]
    66e0:	add	w0, w0, #0x1
    66e4:	str	w0, [sp, #308]
    66e8:	ldr	w1, [sp, #308]
    66ec:	ldr	w0, [sp, #228]
    66f0:	cmp	w1, w0
    66f4:	b.lt	661c <omp_target_memcpy_rect_worker+0x2ec>  // b.tstop
    66f8:	ldr	x1, [sp, #296]
    66fc:	ldr	x0, [sp, #208]
    6700:	ldr	x0, [x0]
    6704:	mov	x2, #0x0                   	// #0
    6708:	mul	x3, x1, x0
    670c:	umulh	x0, x1, x0
    6710:	mov	x12, x3
    6714:	mov	x13, x0
    6718:	mov	x14, x13
    671c:	mov	x15, #0x0                   	// #0
    6720:	cmp	x14, #0x0
    6724:	b.eq	672c <omp_target_memcpy_rect_worker+0x3fc>  // b.none
    6728:	mov	x2, #0x1                   	// #1
    672c:	mov	x0, x12
    6730:	str	x0, [sp, #280]
    6734:	mov	x0, x2
    6738:	and	w0, w0, #0x1
    673c:	and	w0, w0, #0xff
    6740:	cmp	w0, #0x0
    6744:	b.ne	6798 <omp_target_memcpy_rect_worker+0x468>  // b.any
    6748:	ldr	x1, [sp, #288]
    674c:	ldr	x0, [sp, #200]
    6750:	ldr	x0, [x0]
    6754:	mov	x2, #0x0                   	// #0
    6758:	mul	x3, x1, x0
    675c:	umulh	x0, x1, x0
    6760:	mov	x8, x3
    6764:	mov	x9, x0
    6768:	mov	x10, x9
    676c:	mov	x11, #0x0                   	// #0
    6770:	cmp	x10, #0x0
    6774:	b.eq	677c <omp_target_memcpy_rect_worker+0x44c>  // b.none
    6778:	mov	x2, #0x1                   	// #1
    677c:	mov	x0, x8
    6780:	str	x0, [sp, #272]
    6784:	mov	x0, x2
    6788:	and	w0, w0, #0x1
    678c:	and	w0, w0, #0xff
    6790:	cmp	w0, #0x0
    6794:	b.eq	67a0 <omp_target_memcpy_rect_worker+0x470>  // b.none
    6798:	mov	w0, #0x16                  	// #22
    679c:	b	6884 <omp_target_memcpy_rect_worker+0x554>
    67a0:	str	xzr, [sp, #312]
    67a4:	b	686c <omp_target_memcpy_rect_worker+0x53c>
    67a8:	ldr	x0, [sp, #280]
    67ac:	ldr	x1, [sp, #248]
    67b0:	add	x8, x1, x0
    67b4:	ldr	x0, [sp, #272]
    67b8:	ldr	x1, [sp, #240]
    67bc:	add	x9, x1, x0
    67c0:	ldr	w0, [sp, #228]
    67c4:	sub	w2, w0, #0x1
    67c8:	ldr	x0, [sp, #216]
    67cc:	add	x3, x0, #0x8
    67d0:	ldr	x0, [sp, #208]
    67d4:	add	x4, x0, #0x8
    67d8:	ldr	x0, [sp, #200]
    67dc:	add	x5, x0, #0x8
    67e0:	ldr	x0, [sp, #192]
    67e4:	add	x6, x0, #0x8
    67e8:	ldr	x0, [sp, #320]
    67ec:	add	x0, x0, #0x8
    67f0:	ldr	x1, [sp, #336]
    67f4:	str	x1, [sp, #16]
    67f8:	ldr	x1, [sp, #328]
    67fc:	str	x1, [sp, #8]
    6800:	str	x0, [sp]
    6804:	mov	x7, x6
    6808:	mov	x6, x5
    680c:	mov	x5, x4
    6810:	mov	x4, x3
    6814:	mov	w3, w2
    6818:	ldr	x2, [sp, #232]
    681c:	mov	x1, x9
    6820:	mov	x0, x8
    6824:	bl	6330 <omp_target_memcpy_rect_worker>
    6828:	str	w0, [sp, #304]
    682c:	ldr	w0, [sp, #304]
    6830:	cmp	w0, #0x0
    6834:	b.eq	6840 <omp_target_memcpy_rect_worker+0x510>  // b.none
    6838:	ldr	w0, [sp, #304]
    683c:	b	6884 <omp_target_memcpy_rect_worker+0x554>
    6840:	ldr	x1, [sp, #280]
    6844:	ldr	x0, [sp, #296]
    6848:	add	x0, x1, x0
    684c:	str	x0, [sp, #280]
    6850:	ldr	x1, [sp, #272]
    6854:	ldr	x0, [sp, #288]
    6858:	add	x0, x1, x0
    685c:	str	x0, [sp, #272]
    6860:	ldr	x0, [sp, #312]
    6864:	add	x0, x0, #0x1
    6868:	str	x0, [sp, #312]
    686c:	ldr	x0, [sp, #216]
    6870:	ldr	x0, [x0]
    6874:	ldr	x1, [sp, #312]
    6878:	cmp	x1, x0
    687c:	b.cc	67a8 <omp_target_memcpy_rect_worker+0x478>  // b.lo, b.ul, b.last
    6880:	mov	w0, #0x0                   	// #0
    6884:	ldp	x19, x20, [sp, #48]
    6888:	ldp	x21, x22, [sp, #64]
    688c:	ldp	x23, x24, [sp, #80]
    6890:	ldp	x25, x26, [sp, #96]
    6894:	ldr	x27, [sp, #112]
    6898:	ldp	x29, x30, [sp, #32]
    689c:	add	sp, sp, #0x140
    68a0:	ret

00000000000068a4 <omp_target_memcpy_rect>:
    68a4:	sub	sp, sp, #0x90
    68a8:	stp	x29, x30, [sp, #32]
    68ac:	add	x29, sp, #0x20
    68b0:	str	x0, [sp, #104]
    68b4:	str	x1, [sp, #96]
    68b8:	str	x2, [sp, #88]
    68bc:	str	w3, [sp, #84]
    68c0:	str	x4, [sp, #72]
    68c4:	str	x5, [sp, #64]
    68c8:	str	x6, [sp, #56]
    68cc:	str	x7, [sp, #48]
    68d0:	str	xzr, [sp, #136]
    68d4:	str	xzr, [sp, #128]
    68d8:	ldr	x0, [sp, #104]
    68dc:	cmp	x0, #0x0
    68e0:	b.ne	68f8 <omp_target_memcpy_rect+0x54>  // b.any
    68e4:	ldr	x0, [sp, #96]
    68e8:	cmp	x0, #0x0
    68ec:	b.ne	68f8 <omp_target_memcpy_rect+0x54>  // b.any
    68f0:	mov	w0, #0x7fffffff            	// #2147483647
    68f4:	b	6aac <omp_target_memcpy_rect+0x208>
    68f8:	ldr	w0, [sp, #152]
    68fc:	cmn	w0, #0x2
    6900:	b.eq	6964 <omp_target_memcpy_rect+0xc0>  // b.none
    6904:	ldr	w0, [sp, #152]
    6908:	cmp	w0, #0x0
    690c:	b.ge	6918 <omp_target_memcpy_rect+0x74>  // b.tcont
    6910:	mov	w0, #0x16                  	// #22
    6914:	b	6aac <omp_target_memcpy_rect+0x208>
    6918:	ldr	w0, [sp, #152]
    691c:	bl	218 <resolve_device>
    6920:	str	x0, [sp, #136]
    6924:	ldr	x0, [sp, #136]
    6928:	cmp	x0, #0x0
    692c:	b.ne	6938 <omp_target_memcpy_rect+0x94>  // b.any
    6930:	mov	w0, #0x16                  	// #22
    6934:	b	6aac <omp_target_memcpy_rect+0x208>
    6938:	ldr	x0, [sp, #136]
    693c:	ldr	w0, [x0, #8]
    6940:	and	w0, w0, #0x4
    6944:	cmp	w0, #0x0
    6948:	b.eq	6960 <omp_target_memcpy_rect+0xbc>  // b.none
    694c:	ldr	x0, [sp, #136]
    6950:	ldr	w0, [x0, #8]
    6954:	and	w0, w0, #0x1
    6958:	cmp	w0, #0x0
    695c:	b.eq	6964 <omp_target_memcpy_rect+0xc0>  // b.none
    6960:	str	xzr, [sp, #136]
    6964:	ldr	w0, [sp, #160]
    6968:	cmn	w0, #0x2
    696c:	b.eq	69d0 <omp_target_memcpy_rect+0x12c>  // b.none
    6970:	ldr	w0, [sp, #160]
    6974:	cmp	w0, #0x0
    6978:	b.ge	6984 <omp_target_memcpy_rect+0xe0>  // b.tcont
    697c:	mov	w0, #0x16                  	// #22
    6980:	b	6aac <omp_target_memcpy_rect+0x208>
    6984:	ldr	w0, [sp, #160]
    6988:	bl	218 <resolve_device>
    698c:	str	x0, [sp, #128]
    6990:	ldr	x0, [sp, #128]
    6994:	cmp	x0, #0x0
    6998:	b.ne	69a4 <omp_target_memcpy_rect+0x100>  // b.any
    699c:	mov	w0, #0x16                  	// #22
    69a0:	b	6aac <omp_target_memcpy_rect+0x208>
    69a4:	ldr	x0, [sp, #128]
    69a8:	ldr	w0, [x0, #8]
    69ac:	and	w0, w0, #0x4
    69b0:	cmp	w0, #0x0
    69b4:	b.eq	69cc <omp_target_memcpy_rect+0x128>  // b.none
    69b8:	ldr	x0, [sp, #128]
    69bc:	ldr	w0, [x0, #8]
    69c0:	and	w0, w0, #0x1
    69c4:	cmp	w0, #0x0
    69c8:	b.eq	69d0 <omp_target_memcpy_rect+0x12c>  // b.none
    69cc:	str	xzr, [sp, #128]
    69d0:	ldr	x0, [sp, #128]
    69d4:	cmp	x0, #0x0
    69d8:	b.eq	6a00 <omp_target_memcpy_rect+0x15c>  // b.none
    69dc:	ldr	x0, [sp, #136]
    69e0:	cmp	x0, #0x0
    69e4:	b.eq	6a00 <omp_target_memcpy_rect+0x15c>  // b.none
    69e8:	ldr	x1, [sp, #128]
    69ec:	ldr	x0, [sp, #136]
    69f0:	cmp	x1, x0
    69f4:	b.eq	6a00 <omp_target_memcpy_rect+0x15c>  // b.none
    69f8:	mov	w0, #0x16                  	// #22
    69fc:	b	6aac <omp_target_memcpy_rect+0x208>
    6a00:	ldr	x0, [sp, #128]
    6a04:	cmp	x0, #0x0
    6a08:	b.eq	6a1c <omp_target_memcpy_rect+0x178>  // b.none
    6a0c:	ldr	x0, [sp, #128]
    6a10:	add	x0, x0, #0xa8
    6a14:	bl	1c <gomp_mutex_lock>
    6a18:	b	6a34 <omp_target_memcpy_rect+0x190>
    6a1c:	ldr	x0, [sp, #136]
    6a20:	cmp	x0, #0x0
    6a24:	b.eq	6a34 <omp_target_memcpy_rect+0x190>  // b.none
    6a28:	ldr	x0, [sp, #136]
    6a2c:	add	x0, x0, #0xa8
    6a30:	bl	1c <gomp_mutex_lock>
    6a34:	ldr	x0, [sp, #128]
    6a38:	str	x0, [sp, #16]
    6a3c:	ldr	x0, [sp, #136]
    6a40:	str	x0, [sp, #8]
    6a44:	ldr	x0, [sp, #144]
    6a48:	str	x0, [sp]
    6a4c:	ldr	x7, [sp, #48]
    6a50:	ldr	x6, [sp, #56]
    6a54:	ldr	x5, [sp, #64]
    6a58:	ldr	x4, [sp, #72]
    6a5c:	ldr	w3, [sp, #84]
    6a60:	ldr	x2, [sp, #88]
    6a64:	ldr	x1, [sp, #96]
    6a68:	ldr	x0, [sp, #104]
    6a6c:	bl	6330 <omp_target_memcpy_rect_worker>
    6a70:	str	w0, [sp, #124]
    6a74:	ldr	x0, [sp, #128]
    6a78:	cmp	x0, #0x0
    6a7c:	b.eq	6a90 <omp_target_memcpy_rect+0x1ec>  // b.none
    6a80:	ldr	x0, [sp, #128]
    6a84:	add	x0, x0, #0xa8
    6a88:	bl	90 <gomp_mutex_unlock>
    6a8c:	b	6aa8 <omp_target_memcpy_rect+0x204>
    6a90:	ldr	x0, [sp, #136]
    6a94:	cmp	x0, #0x0
    6a98:	b.eq	6aa8 <omp_target_memcpy_rect+0x204>  // b.none
    6a9c:	ldr	x0, [sp, #136]
    6aa0:	add	x0, x0, #0xa8
    6aa4:	bl	90 <gomp_mutex_unlock>
    6aa8:	ldr	w0, [sp, #124]
    6aac:	ldp	x29, x30, [sp, #32]
    6ab0:	add	sp, sp, #0x90
    6ab4:	ret

0000000000006ab8 <omp_target_associate_ptr>:
    6ab8:	stp	x29, x30, [sp, #-176]!
    6abc:	mov	x29, sp
    6ac0:	str	x0, [sp, #56]
    6ac4:	str	x1, [sp, #48]
    6ac8:	str	x2, [sp, #40]
    6acc:	str	x3, [sp, #32]
    6ad0:	str	w4, [sp, #28]
    6ad4:	ldr	w0, [sp, #28]
    6ad8:	cmn	w0, #0x2
    6adc:	b.ne	6ae8 <omp_target_associate_ptr+0x30>  // b.any
    6ae0:	mov	w0, #0x16                  	// #22
    6ae4:	b	6cec <omp_target_associate_ptr+0x234>
    6ae8:	ldr	w0, [sp, #28]
    6aec:	cmp	w0, #0x0
    6af0:	b.ge	6afc <omp_target_associate_ptr+0x44>  // b.tcont
    6af4:	mov	w0, #0x16                  	// #22
    6af8:	b	6cec <omp_target_associate_ptr+0x234>
    6afc:	ldr	w0, [sp, #28]
    6b00:	bl	218 <resolve_device>
    6b04:	str	x0, [sp, #160]
    6b08:	ldr	x0, [sp, #160]
    6b0c:	cmp	x0, #0x0
    6b10:	b.ne	6b1c <omp_target_associate_ptr+0x64>  // b.any
    6b14:	mov	w0, #0x16                  	// #22
    6b18:	b	6cec <omp_target_associate_ptr+0x234>
    6b1c:	ldr	x0, [sp, #160]
    6b20:	ldr	w0, [x0, #8]
    6b24:	and	w0, w0, #0x4
    6b28:	cmp	w0, #0x0
    6b2c:	b.eq	6b44 <omp_target_associate_ptr+0x8c>  // b.none
    6b30:	ldr	x0, [sp, #160]
    6b34:	ldr	w0, [x0, #8]
    6b38:	and	w0, w0, #0x1
    6b3c:	cmp	w0, #0x0
    6b40:	b.eq	6b4c <omp_target_associate_ptr+0x94>  // b.none
    6b44:	mov	w0, #0x16                  	// #22
    6b48:	b	6cec <omp_target_associate_ptr+0x234>
    6b4c:	ldr	x0, [sp, #160]
    6b50:	add	x0, x0, #0xa8
    6b54:	bl	1c <gomp_mutex_lock>
    6b58:	ldr	x0, [sp, #160]
    6b5c:	add	x0, x0, #0xa0
    6b60:	str	x0, [sp, #152]
    6b64:	mov	w0, #0x16                  	// #22
    6b68:	str	w0, [sp, #172]
    6b6c:	ldr	x0, [sp, #56]
    6b70:	str	x0, [sp, #64]
    6b74:	ldr	x1, [sp, #64]
    6b78:	ldr	x0, [sp, #40]
    6b7c:	add	x0, x1, x0
    6b80:	str	x0, [sp, #72]
    6b84:	add	x0, sp, #0x40
    6b88:	mov	x1, x0
    6b8c:	ldr	x0, [sp, #152]
    6b90:	bl	3ec <gomp_map_lookup>
    6b94:	str	x0, [sp, #144]
    6b98:	ldr	x0, [sp, #144]
    6b9c:	cmp	x0, #0x0
    6ba0:	b.eq	6c00 <omp_target_associate_ptr+0x148>  // b.none
    6ba4:	ldr	x0, [sp, #144]
    6ba8:	ldr	x0, [x0, #16]
    6bac:	ldr	x1, [x0, #16]
    6bb0:	ldr	x0, [sp, #144]
    6bb4:	ldr	x0, [x0, #24]
    6bb8:	add	x1, x1, x0
    6bbc:	ldr	x2, [sp, #48]
    6bc0:	ldr	x0, [sp, #32]
    6bc4:	add	x0, x2, x0
    6bc8:	cmp	x1, x0
    6bcc:	b.ne	6cdc <omp_target_associate_ptr+0x224>  // b.any
    6bd0:	ldr	x0, [sp, #144]
    6bd4:	ldr	x1, [x0]
    6bd8:	ldr	x0, [sp, #64]
    6bdc:	cmp	x1, x0
    6be0:	b.hi	6cdc <omp_target_associate_ptr+0x224>  // b.pmore
    6be4:	ldr	x0, [sp, #144]
    6be8:	ldr	x1, [x0, #8]
    6bec:	ldr	x0, [sp, #72]
    6bf0:	cmp	x1, x0
    6bf4:	b.cc	6cdc <omp_target_associate_ptr+0x224>  // b.lo, b.ul, b.last
    6bf8:	str	wzr, [sp, #172]
    6bfc:	b	6cdc <omp_target_associate_ptr+0x224>
    6c00:	mov	x0, #0x40                  	// #64
    6c04:	bl	0 <gomp_malloc>
    6c08:	str	x0, [sp, #136]
    6c0c:	mov	x0, #0x48                  	// #72
    6c10:	bl	0 <gomp_malloc>
    6c14:	mov	x1, x0
    6c18:	ldr	x0, [sp, #136]
    6c1c:	str	x1, [x0, #8]
    6c20:	ldr	x0, [sp, #136]
    6c24:	mov	x1, #0x1                   	// #1
    6c28:	str	x1, [x0]
    6c2c:	ldr	x0, [sp, #136]
    6c30:	str	xzr, [x0, #16]
    6c34:	ldr	x0, [sp, #136]
    6c38:	str	xzr, [x0, #24]
    6c3c:	ldr	x0, [sp, #136]
    6c40:	str	xzr, [x0, #32]
    6c44:	ldr	x0, [sp, #136]
    6c48:	str	xzr, [x0, #40]
    6c4c:	ldr	x0, [sp, #136]
    6c50:	str	xzr, [x0, #48]
    6c54:	ldr	x0, [sp, #136]
    6c58:	ldr	x1, [sp, #160]
    6c5c:	str	x1, [x0, #56]
    6c60:	ldr	x0, [sp, #136]
    6c64:	ldr	x0, [x0, #8]
    6c68:	str	x0, [sp, #128]
    6c6c:	ldr	x0, [sp, #128]
    6c70:	str	x0, [sp, #120]
    6c74:	ldr	x1, [sp, #64]
    6c78:	ldr	x0, [sp, #120]
    6c7c:	str	x1, [x0]
    6c80:	ldr	x1, [sp, #72]
    6c84:	ldr	x0, [sp, #120]
    6c88:	str	x1, [x0, #8]
    6c8c:	ldr	x0, [sp, #120]
    6c90:	ldr	x1, [sp, #136]
    6c94:	str	x1, [x0, #16]
    6c98:	ldr	x1, [sp, #48]
    6c9c:	ldr	x0, [sp, #32]
    6ca0:	add	x1, x1, x0
    6ca4:	ldr	x0, [sp, #120]
    6ca8:	str	x1, [x0, #24]
    6cac:	ldr	x0, [sp, #120]
    6cb0:	mov	x1, #0xffffffffffffffff    	// #-1
    6cb4:	str	x1, [x0, #32]
    6cb8:	ldr	x0, [sp, #128]
    6cbc:	str	xzr, [x0, #56]
    6cc0:	ldr	x0, [sp, #128]
    6cc4:	str	xzr, [x0, #64]
    6cc8:	ldr	x0, [sp, #160]
    6ccc:	add	x0, x0, #0xa0
    6cd0:	ldr	x1, [sp, #128]
    6cd4:	bl	0 <splay_tree_prefix_splay_tree_insert>
    6cd8:	str	wzr, [sp, #172]
    6cdc:	ldr	x0, [sp, #160]
    6ce0:	add	x0, x0, #0xa8
    6ce4:	bl	90 <gomp_mutex_unlock>
    6ce8:	ldr	w0, [sp, #172]
    6cec:	ldp	x29, x30, [sp], #176
    6cf0:	ret

0000000000006cf4 <omp_target_disassociate_ptr>:
    6cf4:	stp	x29, x30, [sp, #-128]!
    6cf8:	mov	x29, sp
    6cfc:	str	x0, [sp, #24]
    6d00:	str	w1, [sp, #20]
    6d04:	ldr	w0, [sp, #20]
    6d08:	cmn	w0, #0x2
    6d0c:	b.ne	6d18 <omp_target_disassociate_ptr+0x24>  // b.any
    6d10:	mov	w0, #0x16                  	// #22
    6d14:	b	6e5c <omp_target_disassociate_ptr+0x168>
    6d18:	ldr	w0, [sp, #20]
    6d1c:	cmp	w0, #0x0
    6d20:	b.ge	6d2c <omp_target_disassociate_ptr+0x38>  // b.tcont
    6d24:	mov	w0, #0x16                  	// #22
    6d28:	b	6e5c <omp_target_disassociate_ptr+0x168>
    6d2c:	ldr	w0, [sp, #20]
    6d30:	bl	218 <resolve_device>
    6d34:	str	x0, [sp, #112]
    6d38:	ldr	x0, [sp, #112]
    6d3c:	cmp	x0, #0x0
    6d40:	b.ne	6d4c <omp_target_disassociate_ptr+0x58>  // b.any
    6d44:	mov	w0, #0x16                  	// #22
    6d48:	b	6e5c <omp_target_disassociate_ptr+0x168>
    6d4c:	ldr	x0, [sp, #112]
    6d50:	ldr	w0, [x0, #8]
    6d54:	and	w0, w0, #0x4
    6d58:	cmp	w0, #0x0
    6d5c:	b.ne	6d68 <omp_target_disassociate_ptr+0x74>  // b.any
    6d60:	mov	w0, #0x16                  	// #22
    6d64:	b	6e5c <omp_target_disassociate_ptr+0x168>
    6d68:	ldr	x0, [sp, #112]
    6d6c:	add	x0, x0, #0xa8
    6d70:	bl	1c <gomp_mutex_lock>
    6d74:	ldr	x0, [sp, #112]
    6d78:	add	x0, x0, #0xa0
    6d7c:	str	x0, [sp, #104]
    6d80:	mov	w0, #0x16                  	// #22
    6d84:	str	w0, [sp, #124]
    6d88:	ldr	x0, [sp, #24]
    6d8c:	str	x0, [sp, #40]
    6d90:	ldr	x0, [sp, #40]
    6d94:	str	x0, [sp, #48]
    6d98:	add	x0, sp, #0x28
    6d9c:	mov	x1, x0
    6da0:	ldr	x0, [sp, #104]
    6da4:	bl	3ec <gomp_map_lookup>
    6da8:	str	x0, [sp, #96]
    6dac:	ldr	x0, [sp, #96]
    6db0:	cmp	x0, #0x0
    6db4:	b.eq	6e4c <omp_target_disassociate_ptr+0x158>  // b.none
    6db8:	ldr	x0, [sp, #96]
    6dbc:	ldr	x1, [x0]
    6dc0:	ldr	x0, [sp, #40]
    6dc4:	cmp	x1, x0
    6dc8:	b.ne	6e4c <omp_target_disassociate_ptr+0x158>  // b.any
    6dcc:	ldr	x0, [sp, #96]
    6dd0:	ldr	x0, [x0, #32]
    6dd4:	cmn	x0, #0x1
    6dd8:	b.ne	6e4c <omp_target_disassociate_ptr+0x158>  // b.any
    6ddc:	ldr	x0, [sp, #96]
    6de0:	ldr	x0, [x0, #16]
    6de4:	ldr	x0, [x0, #16]
    6de8:	cmp	x0, #0x0
    6dec:	b.ne	6e4c <omp_target_disassociate_ptr+0x158>  // b.any
    6df0:	ldr	x0, [sp, #96]
    6df4:	ldr	x0, [x0, #16]
    6df8:	ldr	x0, [x0, #32]
    6dfc:	cmp	x0, #0x0
    6e00:	b.ne	6e4c <omp_target_disassociate_ptr+0x158>  // b.any
    6e04:	ldr	x0, [sp, #96]
    6e08:	ldr	x0, [x0, #16]
    6e0c:	ldr	x0, [x0]
    6e10:	cmp	x0, #0x1
    6e14:	b.ne	6e4c <omp_target_disassociate_ptr+0x158>  // b.any
    6e18:	ldr	x0, [sp, #96]
    6e1c:	ldr	x0, [x0, #16]
    6e20:	ldr	x0, [x0, #48]
    6e24:	cmp	x0, #0x0
    6e28:	b.ne	6e4c <omp_target_disassociate_ptr+0x158>  // b.any
    6e2c:	ldr	x0, [sp, #112]
    6e30:	add	x0, x0, #0xa0
    6e34:	ldr	x1, [sp, #96]
    6e38:	bl	0 <splay_tree_prefix_splay_tree_remove>
    6e3c:	ldr	x0, [sp, #96]
    6e40:	ldr	x0, [x0, #16]
    6e44:	bl	2e5c <gomp_unmap_tgt>
    6e48:	str	wzr, [sp, #124]
    6e4c:	ldr	x0, [sp, #112]
    6e50:	add	x0, x0, #0xa8
    6e54:	bl	90 <gomp_mutex_unlock>
    6e58:	ldr	w0, [sp, #124]
    6e5c:	ldp	x29, x30, [sp], #128
    6e60:	ret

0000000000006e64 <gomp_ialias_omp_pause_resource>:
    6e64:	stp	x29, x30, [sp, #-32]!
    6e68:	mov	x29, sp
    6e6c:	str	w0, [sp, #28]
    6e70:	str	w1, [sp, #24]
    6e74:	ldr	w0, [sp, #24]
    6e78:	cmn	w0, #0x2
    6e7c:	b.ne	6e88 <gomp_ialias_omp_pause_resource+0x24>  // b.any
    6e80:	bl	0 <gomp_pause_host>
    6e84:	b	6eb4 <gomp_ialias_omp_pause_resource+0x50>
    6e88:	ldr	w0, [sp, #24]
    6e8c:	cmp	w0, #0x0
    6e90:	b.lt	6ea8 <gomp_ialias_omp_pause_resource+0x44>  // b.tstop
    6e94:	bl	1f8 <gomp_get_num_devices>
    6e98:	mov	w1, w0
    6e9c:	ldr	w0, [sp, #24]
    6ea0:	cmp	w0, w1
    6ea4:	b.lt	6eb0 <gomp_ialias_omp_pause_resource+0x4c>  // b.tstop
    6ea8:	mov	w0, #0xffffffff            	// #-1
    6eac:	b	6eb4 <gomp_ialias_omp_pause_resource+0x50>
    6eb0:	mov	w0, #0x0                   	// #0
    6eb4:	ldp	x29, x30, [sp], #32
    6eb8:	ret

0000000000006ebc <gomp_ialias_omp_pause_resource_all>:
    6ebc:	stp	x29, x30, [sp, #-32]!
    6ec0:	mov	x29, sp
    6ec4:	str	w0, [sp, #28]
    6ec8:	bl	0 <gomp_pause_host>
    6ecc:	cmp	w0, #0x0
    6ed0:	b.eq	6edc <gomp_ialias_omp_pause_resource_all+0x20>  // b.none
    6ed4:	mov	w0, #0xffffffff            	// #-1
    6ed8:	b	6ee0 <gomp_ialias_omp_pause_resource_all+0x24>
    6edc:	mov	w0, #0x0                   	// #0
    6ee0:	ldp	x29, x30, [sp], #32
    6ee4:	ret

0000000000006ee8 <gomp_load_plugin_for_device>:
    6ee8:	stp	x29, x30, [sp, #-64]!
    6eec:	mov	x29, sp
    6ef0:	str	x0, [sp, #24]
    6ef4:	str	x1, [sp, #16]
    6ef8:	str	xzr, [sp, #56]
    6efc:	str	xzr, [sp, #48]
    6f00:	mov	w1, #0x1                   	// #1
    6f04:	ldr	x0, [sp, #16]
    6f08:	bl	0 <dlopen>
    6f0c:	str	x0, [sp, #40]
    6f10:	ldr	x0, [sp, #40]
    6f14:	cmp	x0, #0x0
    6f18:	b.eq	769c <gomp_load_plugin_for_device+0x7b4>  // b.none
    6f1c:	adrp	x0, 0 <gomp_mutex_init>
    6f20:	add	x1, x0, #0x0
    6f24:	ldr	x0, [sp, #40]
    6f28:	bl	0 <dlsym>
    6f2c:	mov	x1, x0
    6f30:	ldr	x0, [sp, #24]
    6f34:	str	x1, [x0, #72]
    6f38:	ldr	x0, [sp, #24]
    6f3c:	ldr	x0, [x0, #72]
    6f40:	cmp	x0, #0x0
    6f44:	b.eq	76a4 <gomp_load_plugin_for_device+0x7bc>  // b.none
    6f48:	ldr	x0, [sp, #24]
    6f4c:	ldr	x0, [x0, #72]
    6f50:	blr	x0
    6f54:	cmp	w0, #0x1
    6f58:	b.eq	6f6c <gomp_load_plugin_for_device+0x84>  // b.none
    6f5c:	adrp	x0, 0 <gomp_mutex_init>
    6f60:	add	x0, x0, #0x0
    6f64:	str	x0, [sp, #56]
    6f68:	b	7728 <gomp_load_plugin_for_device+0x840>
    6f6c:	adrp	x0, 0 <gomp_mutex_init>
    6f70:	add	x1, x0, #0x0
    6f74:	ldr	x0, [sp, #40]
    6f78:	bl	0 <dlsym>
    6f7c:	mov	x1, x0
    6f80:	ldr	x0, [sp, #24]
    6f84:	str	x1, [x0, #24]
    6f88:	ldr	x0, [sp, #24]
    6f8c:	ldr	x0, [x0, #24]
    6f90:	cmp	x0, #0x0
    6f94:	b.eq	76ac <gomp_load_plugin_for_device+0x7c4>  // b.none
    6f98:	adrp	x0, 0 <gomp_mutex_init>
    6f9c:	add	x1, x0, #0x0
    6fa0:	ldr	x0, [sp, #40]
    6fa4:	bl	0 <dlsym>
    6fa8:	mov	x1, x0
    6fac:	ldr	x0, [sp, #24]
    6fb0:	str	x1, [x0, #32]
    6fb4:	ldr	x0, [sp, #24]
    6fb8:	ldr	x0, [x0, #32]
    6fbc:	cmp	x0, #0x0
    6fc0:	b.eq	76b4 <gomp_load_plugin_for_device+0x7cc>  // b.none
    6fc4:	adrp	x0, 0 <gomp_mutex_init>
    6fc8:	add	x1, x0, #0x0
    6fcc:	ldr	x0, [sp, #40]
    6fd0:	bl	0 <dlsym>
    6fd4:	mov	x1, x0
    6fd8:	ldr	x0, [sp, #24]
    6fdc:	str	x1, [x0, #40]
    6fe0:	ldr	x0, [sp, #24]
    6fe4:	ldr	x0, [x0, #40]
    6fe8:	cmp	x0, #0x0
    6fec:	b.eq	76bc <gomp_load_plugin_for_device+0x7d4>  // b.none
    6ff0:	adrp	x0, 0 <gomp_mutex_init>
    6ff4:	add	x1, x0, #0x0
    6ff8:	ldr	x0, [sp, #40]
    6ffc:	bl	0 <dlsym>
    7000:	mov	x1, x0
    7004:	ldr	x0, [sp, #24]
    7008:	str	x1, [x0, #48]
    700c:	ldr	x0, [sp, #24]
    7010:	ldr	x0, [x0, #48]
    7014:	cmp	x0, #0x0
    7018:	b.eq	76c4 <gomp_load_plugin_for_device+0x7dc>  // b.none
    701c:	adrp	x0, 0 <gomp_mutex_init>
    7020:	add	x1, x0, #0x0
    7024:	ldr	x0, [sp, #40]
    7028:	bl	0 <dlsym>
    702c:	mov	x1, x0
    7030:	ldr	x0, [sp, #24]
    7034:	str	x1, [x0, #56]
    7038:	ldr	x0, [sp, #24]
    703c:	ldr	x0, [x0, #56]
    7040:	cmp	x0, #0x0
    7044:	b.eq	76cc <gomp_load_plugin_for_device+0x7e4>  // b.none
    7048:	adrp	x0, 0 <gomp_mutex_init>
    704c:	add	x1, x0, #0x0
    7050:	ldr	x0, [sp, #40]
    7054:	bl	0 <dlsym>
    7058:	mov	x1, x0
    705c:	ldr	x0, [sp, #24]
    7060:	str	x1, [x0, #64]
    7064:	ldr	x0, [sp, #24]
    7068:	ldr	x0, [x0, #64]
    706c:	cmp	x0, #0x0
    7070:	b.eq	76d4 <gomp_load_plugin_for_device+0x7ec>  // b.none
    7074:	adrp	x0, 0 <gomp_mutex_init>
    7078:	add	x1, x0, #0x0
    707c:	ldr	x0, [sp, #40]
    7080:	bl	0 <dlsym>
    7084:	mov	x1, x0
    7088:	ldr	x0, [sp, #24]
    708c:	str	x1, [x0, #80]
    7090:	ldr	x0, [sp, #24]
    7094:	ldr	x0, [x0, #80]
    7098:	cmp	x0, #0x0
    709c:	b.eq	76dc <gomp_load_plugin_for_device+0x7f4>  // b.none
    70a0:	adrp	x0, 0 <gomp_mutex_init>
    70a4:	add	x1, x0, #0x0
    70a8:	ldr	x0, [sp, #40]
    70ac:	bl	0 <dlsym>
    70b0:	mov	x1, x0
    70b4:	ldr	x0, [sp, #24]
    70b8:	str	x1, [x0, #88]
    70bc:	ldr	x0, [sp, #24]
    70c0:	ldr	x0, [x0, #88]
    70c4:	cmp	x0, #0x0
    70c8:	b.eq	76e4 <gomp_load_plugin_for_device+0x7fc>  // b.none
    70cc:	adrp	x0, 0 <gomp_mutex_init>
    70d0:	add	x1, x0, #0x0
    70d4:	ldr	x0, [sp, #40]
    70d8:	bl	0 <dlsym>
    70dc:	mov	x1, x0
    70e0:	ldr	x0, [sp, #24]
    70e4:	str	x1, [x0, #96]
    70e8:	ldr	x0, [sp, #24]
    70ec:	ldr	x0, [x0, #96]
    70f0:	cmp	x0, #0x0
    70f4:	b.eq	76ec <gomp_load_plugin_for_device+0x804>  // b.none
    70f8:	adrp	x0, 0 <gomp_mutex_init>
    70fc:	add	x1, x0, #0x0
    7100:	ldr	x0, [sp, #40]
    7104:	bl	0 <dlsym>
    7108:	mov	x1, x0
    710c:	ldr	x0, [sp, #24]
    7110:	str	x1, [x0, #104]
    7114:	ldr	x0, [sp, #24]
    7118:	ldr	x0, [x0, #104]
    711c:	cmp	x0, #0x0
    7120:	b.eq	76f4 <gomp_load_plugin_for_device+0x80c>  // b.none
    7124:	adrp	x0, 0 <gomp_mutex_init>
    7128:	add	x1, x0, #0x0
    712c:	ldr	x0, [sp, #40]
    7130:	bl	0 <dlsym>
    7134:	mov	x1, x0
    7138:	ldr	x0, [sp, #24]
    713c:	str	x1, [x0, #112]
    7140:	ldr	x0, [sp, #24]
    7144:	ldr	x0, [x0, #112]
    7148:	cmp	x0, #0x0
    714c:	b.eq	76fc <gomp_load_plugin_for_device+0x814>  // b.none
    7150:	adrp	x0, 0 <gomp_mutex_init>
    7154:	add	x1, x0, #0x0
    7158:	ldr	x0, [sp, #40]
    715c:	bl	0 <dlsym>
    7160:	mov	x1, x0
    7164:	ldr	x0, [sp, #24]
    7168:	str	x1, [x0, #120]
    716c:	ldr	x0, [sp, #24]
    7170:	ldr	x0, [x0, #120]
    7174:	cmp	x0, #0x0
    7178:	b.eq	7704 <gomp_load_plugin_for_device+0x81c>  // b.none
    717c:	ldr	x0, [sp, #24]
    7180:	ldr	x0, [x0, #32]
    7184:	blr	x0
    7188:	mov	w1, w0
    718c:	ldr	x0, [sp, #24]
    7190:	str	w1, [x0, #8]
    7194:	ldr	x0, [sp, #24]
    7198:	ldr	w0, [x0, #8]
    719c:	and	w0, w0, #0x4
    71a0:	cmp	w0, #0x0
    71a4:	b.eq	7264 <gomp_load_plugin_for_device+0x37c>  // b.none
    71a8:	adrp	x0, 0 <gomp_mutex_init>
    71ac:	add	x1, x0, #0x0
    71b0:	ldr	x0, [sp, #40]
    71b4:	bl	0 <dlsym>
    71b8:	mov	x1, x0
    71bc:	ldr	x0, [sp, #24]
    71c0:	str	x1, [x0, #144]
    71c4:	ldr	x0, [sp, #24]
    71c8:	ldr	x0, [x0, #144]
    71cc:	cmp	x0, #0x0
    71d0:	b.eq	770c <gomp_load_plugin_for_device+0x824>  // b.none
    71d4:	adrp	x0, 0 <gomp_mutex_init>
    71d8:	add	x1, x0, #0x0
    71dc:	ldr	x0, [sp, #40]
    71e0:	bl	0 <dlsym>
    71e4:	mov	x1, x0
    71e8:	ldr	x0, [sp, #24]
    71ec:	str	x1, [x0, #152]
    71f0:	ldr	x0, [sp, #24]
    71f4:	ldr	x0, [x0, #152]
    71f8:	cmp	x0, #0x0
    71fc:	b.eq	7714 <gomp_load_plugin_for_device+0x82c>  // b.none
    7200:	adrp	x0, 0 <gomp_mutex_init>
    7204:	add	x1, x0, #0x0
    7208:	ldr	x0, [sp, #40]
    720c:	bl	0 <dlsym>
    7210:	mov	x1, x0
    7214:	ldr	x0, [sp, #24]
    7218:	str	x1, [x0, #136]
    721c:	ldr	x0, [sp, #24]
    7220:	ldr	x0, [x0, #136]
    7224:	cmp	x0, #0x0
    7228:	b.ne	7238 <gomp_load_plugin_for_device+0x350>  // b.any
    722c:	adrp	x0, 0 <gomp_mutex_init>
    7230:	add	x0, x0, #0x0
    7234:	str	x0, [sp, #48]
    7238:	adrp	x0, 0 <gomp_mutex_init>
    723c:	add	x1, x0, #0x0
    7240:	ldr	x0, [sp, #40]
    7244:	bl	0 <dlsym>
    7248:	mov	x1, x0
    724c:	ldr	x0, [sp, #24]
    7250:	str	x1, [x0, #128]
    7254:	ldr	x0, [sp, #24]
    7258:	ldr	x0, [x0, #128]
    725c:	cmp	x0, #0x0
    7260:	b.eq	771c <gomp_load_plugin_for_device+0x834>  // b.none
    7264:	ldr	x0, [sp, #24]
    7268:	ldr	w0, [x0, #8]
    726c:	and	w0, w0, #0x8
    7270:	cmp	w0, #0x0
    7274:	b.eq	7694 <gomp_load_plugin_for_device+0x7ac>  // b.none
    7278:	adrp	x0, 0 <gomp_mutex_init>
    727c:	add	x1, x0, #0x0
    7280:	ldr	x0, [sp, #40]
    7284:	bl	0 <dlsym>
    7288:	mov	x1, x0
    728c:	ldr	x0, [sp, #24]
    7290:	str	x1, [x0, #184]
    7294:	ldr	x0, [sp, #24]
    7298:	ldr	x0, [x0, #184]
    729c:	cmp	x0, #0x0
    72a0:	b.ne	72b4 <gomp_load_plugin_for_device+0x3cc>  // b.any
    72a4:	adrp	x0, 0 <gomp_mutex_init>
    72a8:	add	x0, x0, #0x0
    72ac:	str	x0, [sp, #48]
    72b0:	b	7508 <gomp_load_plugin_for_device+0x620>
    72b4:	adrp	x0, 0 <gomp_mutex_init>
    72b8:	add	x1, x0, #0x0
    72bc:	ldr	x0, [sp, #40]
    72c0:	bl	0 <dlsym>
    72c4:	mov	x1, x0
    72c8:	ldr	x0, [sp, #24]
    72cc:	str	x1, [x0, #192]
    72d0:	ldr	x0, [sp, #24]
    72d4:	ldr	x0, [x0, #192]
    72d8:	cmp	x0, #0x0
    72dc:	b.ne	72f0 <gomp_load_plugin_for_device+0x408>  // b.any
    72e0:	adrp	x0, 0 <gomp_mutex_init>
    72e4:	add	x0, x0, #0x0
    72e8:	str	x0, [sp, #48]
    72ec:	b	7508 <gomp_load_plugin_for_device+0x620>
    72f0:	adrp	x0, 0 <gomp_mutex_init>
    72f4:	add	x1, x0, #0x0
    72f8:	ldr	x0, [sp, #40]
    72fc:	bl	0 <dlsym>
    7300:	mov	x1, x0
    7304:	ldr	x0, [sp, #24]
    7308:	str	x1, [x0, #200]
    730c:	ldr	x0, [sp, #24]
    7310:	ldr	x0, [x0, #200]
    7314:	cmp	x0, #0x0
    7318:	b.ne	732c <gomp_load_plugin_for_device+0x444>  // b.any
    731c:	adrp	x0, 0 <gomp_mutex_init>
    7320:	add	x0, x0, #0x0
    7324:	str	x0, [sp, #48]
    7328:	b	7508 <gomp_load_plugin_for_device+0x620>
    732c:	adrp	x0, 0 <gomp_mutex_init>
    7330:	add	x1, x0, #0x0
    7334:	ldr	x0, [sp, #40]
    7338:	bl	0 <dlsym>
    733c:	mov	x1, x0
    7340:	ldr	x0, [sp, #24]
    7344:	str	x1, [x0, #208]
    7348:	ldr	x0, [sp, #24]
    734c:	ldr	x0, [x0, #208]
    7350:	cmp	x0, #0x0
    7354:	b.ne	7368 <gomp_load_plugin_for_device+0x480>  // b.any
    7358:	adrp	x0, 0 <gomp_mutex_init>
    735c:	add	x0, x0, #0x0
    7360:	str	x0, [sp, #48]
    7364:	b	7508 <gomp_load_plugin_for_device+0x620>
    7368:	adrp	x0, 0 <gomp_mutex_init>
    736c:	add	x1, x0, #0x0
    7370:	ldr	x0, [sp, #40]
    7374:	bl	0 <dlsym>
    7378:	mov	x1, x0
    737c:	ldr	x0, [sp, #24]
    7380:	str	x1, [x0, #216]
    7384:	ldr	x0, [sp, #24]
    7388:	ldr	x0, [x0, #216]
    738c:	cmp	x0, #0x0
    7390:	b.ne	73a4 <gomp_load_plugin_for_device+0x4bc>  // b.any
    7394:	adrp	x0, 0 <gomp_mutex_init>
    7398:	add	x0, x0, #0x0
    739c:	str	x0, [sp, #48]
    73a0:	b	7508 <gomp_load_plugin_for_device+0x620>
    73a4:	adrp	x0, 0 <gomp_mutex_init>
    73a8:	add	x1, x0, #0x0
    73ac:	ldr	x0, [sp, #40]
    73b0:	bl	0 <dlsym>
    73b4:	mov	x1, x0
    73b8:	ldr	x0, [sp, #24]
    73bc:	str	x1, [x0, #224]
    73c0:	ldr	x0, [sp, #24]
    73c4:	ldr	x0, [x0, #224]
    73c8:	cmp	x0, #0x0
    73cc:	b.ne	73e0 <gomp_load_plugin_for_device+0x4f8>  // b.any
    73d0:	adrp	x0, 0 <gomp_mutex_init>
    73d4:	add	x0, x0, #0x0
    73d8:	str	x0, [sp, #48]
    73dc:	b	7508 <gomp_load_plugin_for_device+0x620>
    73e0:	adrp	x0, 0 <gomp_mutex_init>
    73e4:	add	x1, x0, #0x0
    73e8:	ldr	x0, [sp, #40]
    73ec:	bl	0 <dlsym>
    73f0:	mov	x1, x0
    73f4:	ldr	x0, [sp, #24]
    73f8:	str	x1, [x0, #232]
    73fc:	ldr	x0, [sp, #24]
    7400:	ldr	x0, [x0, #232]
    7404:	cmp	x0, #0x0
    7408:	b.ne	741c <gomp_load_plugin_for_device+0x534>  // b.any
    740c:	adrp	x0, 0 <gomp_mutex_init>
    7410:	add	x0, x0, #0x0
    7414:	str	x0, [sp, #48]
    7418:	b	7508 <gomp_load_plugin_for_device+0x620>
    741c:	adrp	x0, 0 <gomp_mutex_init>
    7420:	add	x1, x0, #0x0
    7424:	ldr	x0, [sp, #40]
    7428:	bl	0 <dlsym>
    742c:	mov	x1, x0
    7430:	ldr	x0, [sp, #24]
    7434:	str	x1, [x0, #240]
    7438:	ldr	x0, [sp, #24]
    743c:	ldr	x0, [x0, #240]
    7440:	cmp	x0, #0x0
    7444:	b.ne	7458 <gomp_load_plugin_for_device+0x570>  // b.any
    7448:	adrp	x0, 0 <gomp_mutex_init>
    744c:	add	x0, x0, #0x0
    7450:	str	x0, [sp, #48]
    7454:	b	7508 <gomp_load_plugin_for_device+0x620>
    7458:	adrp	x0, 0 <gomp_mutex_init>
    745c:	add	x1, x0, #0x0
    7460:	ldr	x0, [sp, #40]
    7464:	bl	0 <dlsym>
    7468:	mov	x1, x0
    746c:	ldr	x0, [sp, #24]
    7470:	str	x1, [x0, #248]
    7474:	ldr	x0, [sp, #24]
    7478:	ldr	x0, [x0, #248]
    747c:	cmp	x0, #0x0
    7480:	b.ne	7494 <gomp_load_plugin_for_device+0x5ac>  // b.any
    7484:	adrp	x0, 0 <gomp_mutex_init>
    7488:	add	x0, x0, #0x0
    748c:	str	x0, [sp, #48]
    7490:	b	7508 <gomp_load_plugin_for_device+0x620>
    7494:	adrp	x0, 0 <gomp_mutex_init>
    7498:	add	x1, x0, #0x0
    749c:	ldr	x0, [sp, #40]
    74a0:	bl	0 <dlsym>
    74a4:	mov	x1, x0
    74a8:	ldr	x0, [sp, #24]
    74ac:	str	x1, [x0, #256]
    74b0:	ldr	x0, [sp, #24]
    74b4:	ldr	x0, [x0, #256]
    74b8:	cmp	x0, #0x0
    74bc:	b.ne	74d0 <gomp_load_plugin_for_device+0x5e8>  // b.any
    74c0:	adrp	x0, 0 <gomp_mutex_init>
    74c4:	add	x0, x0, #0x0
    74c8:	str	x0, [sp, #48]
    74cc:	b	7508 <gomp_load_plugin_for_device+0x620>
    74d0:	adrp	x0, 0 <gomp_mutex_init>
    74d4:	add	x1, x0, #0x0
    74d8:	ldr	x0, [sp, #40]
    74dc:	bl	0 <dlsym>
    74e0:	mov	x1, x0
    74e4:	ldr	x0, [sp, #24]
    74e8:	str	x1, [x0, #264]
    74ec:	ldr	x0, [sp, #24]
    74f0:	ldr	x0, [x0, #264]
    74f4:	cmp	x0, #0x0
    74f8:	b.ne	7518 <gomp_load_plugin_for_device+0x630>  // b.any
    74fc:	adrp	x0, 0 <gomp_mutex_init>
    7500:	add	x0, x0, #0x0
    7504:	str	x0, [sp, #48]
    7508:	adrp	x0, 0 <gomp_mutex_init>
    750c:	add	x0, x0, #0x0
    7510:	str	x0, [sp, #56]
    7514:	b	7728 <gomp_load_plugin_for_device+0x840>
    7518:	str	wzr, [sp, #36]
    751c:	adrp	x0, 0 <gomp_mutex_init>
    7520:	add	x1, x0, #0x0
    7524:	ldr	x0, [sp, #40]
    7528:	bl	0 <dlsym>
    752c:	mov	x1, x0
    7530:	ldr	x0, [sp, #24]
    7534:	str	x1, [x0, #272]
    7538:	ldr	x0, [sp, #24]
    753c:	ldr	x0, [x0, #272]
    7540:	cmp	x0, #0x0
    7544:	b.ne	755c <gomp_load_plugin_for_device+0x674>  // b.any
    7548:	adrp	x0, 0 <gomp_mutex_init>
    754c:	add	x0, x0, #0x0
    7550:	str	x0, [sp, #48]
    7554:	mov	w0, #0x0                   	// #0
    7558:	b	7560 <gomp_load_plugin_for_device+0x678>
    755c:	mov	w0, #0x1                   	// #1
    7560:	mov	w1, w0
    7564:	ldr	w0, [sp, #36]
    7568:	add	w0, w0, w1
    756c:	str	w0, [sp, #36]
    7570:	adrp	x0, 0 <gomp_mutex_init>
    7574:	add	x1, x0, #0x0
    7578:	ldr	x0, [sp, #40]
    757c:	bl	0 <dlsym>
    7580:	mov	x1, x0
    7584:	ldr	x0, [sp, #24]
    7588:	str	x1, [x0, #280]
    758c:	ldr	x0, [sp, #24]
    7590:	ldr	x0, [x0, #280]
    7594:	cmp	x0, #0x0
    7598:	b.ne	75b0 <gomp_load_plugin_for_device+0x6c8>  // b.any
    759c:	adrp	x0, 0 <gomp_mutex_init>
    75a0:	add	x0, x0, #0x0
    75a4:	str	x0, [sp, #48]
    75a8:	mov	w0, #0x0                   	// #0
    75ac:	b	75b4 <gomp_load_plugin_for_device+0x6cc>
    75b0:	mov	w0, #0x1                   	// #1
    75b4:	mov	w1, w0
    75b8:	ldr	w0, [sp, #36]
    75bc:	add	w0, w0, w1
    75c0:	str	w0, [sp, #36]
    75c4:	adrp	x0, 0 <gomp_mutex_init>
    75c8:	add	x1, x0, #0x0
    75cc:	ldr	x0, [sp, #40]
    75d0:	bl	0 <dlsym>
    75d4:	mov	x1, x0
    75d8:	ldr	x0, [sp, #24]
    75dc:	str	x1, [x0, #288]
    75e0:	ldr	x0, [sp, #24]
    75e4:	ldr	x0, [x0, #288]
    75e8:	cmp	x0, #0x0
    75ec:	b.ne	7604 <gomp_load_plugin_for_device+0x71c>  // b.any
    75f0:	adrp	x0, 0 <gomp_mutex_init>
    75f4:	add	x0, x0, #0x0
    75f8:	str	x0, [sp, #48]
    75fc:	mov	w0, #0x0                   	// #0
    7600:	b	7608 <gomp_load_plugin_for_device+0x720>
    7604:	mov	w0, #0x1                   	// #1
    7608:	mov	w1, w0
    760c:	ldr	w0, [sp, #36]
    7610:	add	w0, w0, w1
    7614:	str	w0, [sp, #36]
    7618:	adrp	x0, 0 <gomp_mutex_init>
    761c:	add	x1, x0, #0x0
    7620:	ldr	x0, [sp, #40]
    7624:	bl	0 <dlsym>
    7628:	mov	x1, x0
    762c:	ldr	x0, [sp, #24]
    7630:	str	x1, [x0, #296]
    7634:	ldr	x0, [sp, #24]
    7638:	ldr	x0, [x0, #296]
    763c:	cmp	x0, #0x0
    7640:	b.ne	7658 <gomp_load_plugin_for_device+0x770>  // b.any
    7644:	adrp	x0, 0 <gomp_mutex_init>
    7648:	add	x0, x0, #0x0
    764c:	str	x0, [sp, #48]
    7650:	mov	w0, #0x0                   	// #0
    7654:	b	765c <gomp_load_plugin_for_device+0x774>
    7658:	mov	w0, #0x1                   	// #1
    765c:	mov	w1, w0
    7660:	ldr	w0, [sp, #36]
    7664:	add	w0, w0, w1
    7668:	str	w0, [sp, #36]
    766c:	ldr	w0, [sp, #36]
    7670:	cmp	w0, #0x0
    7674:	b.eq	7694 <gomp_load_plugin_for_device+0x7ac>  // b.none
    7678:	ldr	w0, [sp, #36]
    767c:	cmp	w0, #0x4
    7680:	b.eq	7694 <gomp_load_plugin_for_device+0x7ac>  // b.none
    7684:	adrp	x0, 0 <gomp_mutex_init>
    7688:	add	x0, x0, #0x0
    768c:	str	x0, [sp, #56]
    7690:	b	7728 <gomp_load_plugin_for_device+0x840>
    7694:	mov	w0, #0x1                   	// #1
    7698:	b	7770 <gomp_load_plugin_for_device+0x888>
    769c:	nop
    76a0:	b	7720 <gomp_load_plugin_for_device+0x838>
    76a4:	nop
    76a8:	b	7720 <gomp_load_plugin_for_device+0x838>
    76ac:	nop
    76b0:	b	7720 <gomp_load_plugin_for_device+0x838>
    76b4:	nop
    76b8:	b	7720 <gomp_load_plugin_for_device+0x838>
    76bc:	nop
    76c0:	b	7720 <gomp_load_plugin_for_device+0x838>
    76c4:	nop
    76c8:	b	7720 <gomp_load_plugin_for_device+0x838>
    76cc:	nop
    76d0:	b	7720 <gomp_load_plugin_for_device+0x838>
    76d4:	nop
    76d8:	b	7720 <gomp_load_plugin_for_device+0x838>
    76dc:	nop
    76e0:	b	7720 <gomp_load_plugin_for_device+0x838>
    76e4:	nop
    76e8:	b	7720 <gomp_load_plugin_for_device+0x838>
    76ec:	nop
    76f0:	b	7720 <gomp_load_plugin_for_device+0x838>
    76f4:	nop
    76f8:	b	7720 <gomp_load_plugin_for_device+0x838>
    76fc:	nop
    7700:	b	7720 <gomp_load_plugin_for_device+0x838>
    7704:	nop
    7708:	b	7720 <gomp_load_plugin_for_device+0x838>
    770c:	nop
    7710:	b	7720 <gomp_load_plugin_for_device+0x838>
    7714:	nop
    7718:	b	7720 <gomp_load_plugin_for_device+0x838>
    771c:	nop
    7720:	bl	0 <dlerror>
    7724:	str	x0, [sp, #56]
    7728:	ldr	x2, [sp, #56]
    772c:	ldr	x1, [sp, #16]
    7730:	adrp	x0, 0 <gomp_mutex_init>
    7734:	add	x0, x0, #0x0
    7738:	bl	0 <gomp_error>
    773c:	ldr	x0, [sp, #48]
    7740:	cmp	x0, #0x0
    7744:	b.eq	7758 <gomp_load_plugin_for_device+0x870>  // b.none
    7748:	ldr	x1, [sp, #48]
    774c:	adrp	x0, 0 <gomp_mutex_init>
    7750:	add	x0, x0, #0x0
    7754:	bl	0 <gomp_error>
    7758:	ldr	x0, [sp, #40]
    775c:	cmp	x0, #0x0
    7760:	b.eq	776c <gomp_load_plugin_for_device+0x884>  // b.none
    7764:	ldr	x0, [sp, #40]
    7768:	bl	0 <dlclose>
    776c:	mov	w0, #0x0                   	// #0
    7770:	ldp	x29, x30, [sp], #64
    7774:	ret

0000000000007778 <gomp_target_fini>:
    7778:	stp	x29, x30, [sp, #-32]!
    777c:	mov	x29, sp
    7780:	str	wzr, [sp, #28]
    7784:	b	7838 <gomp_target_fini+0xc0>
    7788:	mov	w0, #0x1                   	// #1
    778c:	strb	w0, [sp, #27]
    7790:	adrp	x0, 0 <gomp_mutex_init>
    7794:	add	x0, x0, #0x0
    7798:	ldr	x2, [x0]
    779c:	ldrsw	x1, [sp, #28]
    77a0:	mov	x0, x1
    77a4:	lsl	x0, x0, #2
    77a8:	add	x0, x0, x1
    77ac:	lsl	x0, x0, #2
    77b0:	sub	x0, x0, x1
    77b4:	lsl	x0, x0, #4
    77b8:	add	x0, x2, x0
    77bc:	str	x0, [sp, #16]
    77c0:	ldr	x0, [sp, #16]
    77c4:	add	x0, x0, #0xa8
    77c8:	bl	1c <gomp_mutex_lock>
    77cc:	ldr	x0, [sp, #16]
    77d0:	ldr	w0, [x0, #172]
    77d4:	cmp	w0, #0x1
    77d8:	b.ne	7800 <gomp_target_fini+0x88>  // b.any
    77dc:	ldr	x0, [sp, #16]
    77e0:	ldr	x1, [x0, #64]
    77e4:	ldr	x0, [sp, #16]
    77e8:	ldr	w0, [x0, #12]
    77ec:	blr	x1
    77f0:	strb	w0, [sp, #27]
    77f4:	ldr	x0, [sp, #16]
    77f8:	mov	w1, #0x2                   	// #2
    77fc:	str	w1, [x0, #172]
    7800:	ldr	x0, [sp, #16]
    7804:	add	x0, x0, #0xa8
    7808:	bl	90 <gomp_mutex_unlock>
    780c:	ldrb	w0, [sp, #27]
    7810:	eor	w0, w0, #0x1
    7814:	and	w0, w0, #0xff
    7818:	cmp	w0, #0x0
    781c:	b.eq	782c <gomp_target_fini+0xb4>  // b.none
    7820:	adrp	x0, 0 <gomp_mutex_init>
    7824:	add	x0, x0, #0x0
    7828:	bl	0 <gomp_fatal>
    782c:	ldr	w0, [sp, #28]
    7830:	add	w0, w0, #0x1
    7834:	str	w0, [sp, #28]
    7838:	adrp	x0, 0 <gomp_mutex_init>
    783c:	add	x0, x0, #0x0
    7840:	ldr	w0, [x0]
    7844:	ldr	w1, [sp, #28]
    7848:	cmp	w1, w0
    784c:	b.lt	7788 <gomp_target_fini+0x10>  // b.tstop
    7850:	nop
    7854:	nop
    7858:	ldp	x29, x30, [sp], #32
    785c:	ret

0000000000007860 <gomp_target_init>:
    7860:	stp	x29, x30, [sp, #-416]!
    7864:	mov	x29, sp
    7868:	adrp	x0, 0 <gomp_mutex_init>
    786c:	add	x0, x0, #0x0
    7870:	str	x0, [sp, #392]
    7874:	adrp	x0, 0 <gomp_mutex_init>
    7878:	add	x0, x0, #0x0
    787c:	str	x0, [sp, #384]
    7880:	adrp	x0, 0 <gomp_mutex_init>
    7884:	add	x0, x0, #0x0
    7888:	str	wzr, [x0]
    788c:	adrp	x0, 0 <gomp_mutex_init>
    7890:	add	x0, x0, #0x0
    7894:	str	xzr, [x0]
    7898:	adrp	x0, 0 <gomp_mutex_init>
    789c:	add	x0, x0, #0x0
    78a0:	str	x0, [sp, #408]
    78a4:	ldr	x0, [sp, #408]
    78a8:	ldrb	w0, [x0]
    78ac:	cmp	w0, #0x0
    78b0:	b.eq	7b68 <gomp_target_init+0x308>  // b.none
    78b4:	mov	w1, #0x2c                  	// #44
    78b8:	ldr	x0, [sp, #408]
    78bc:	bl	0 <strchr>
    78c0:	str	x0, [sp, #376]
    78c4:	ldr	x0, [sp, #392]
    78c8:	bl	0 <strlen>
    78cc:	str	x0, [sp, #368]
    78d0:	ldr	x0, [sp, #376]
    78d4:	cmp	x0, #0x0
    78d8:	b.eq	78ec <gomp_target_init+0x8c>  // b.none
    78dc:	ldr	x1, [sp, #376]
    78e0:	ldr	x0, [sp, #408]
    78e4:	sub	x0, x1, x0
    78e8:	b	78f4 <gomp_target_init+0x94>
    78ec:	ldr	x0, [sp, #408]
    78f0:	bl	0 <strlen>
    78f4:	str	x0, [sp, #360]
    78f8:	ldr	x0, [sp, #384]
    78fc:	bl	0 <strlen>
    7900:	str	x0, [sp, #352]
    7904:	ldr	x1, [sp, #368]
    7908:	ldr	x0, [sp, #360]
    790c:	add	x1, x1, x0
    7910:	ldr	x0, [sp, #352]
    7914:	add	x0, x1, x0
    7918:	add	x0, x0, #0x1
    791c:	bl	0 <malloc>
    7920:	str	x0, [sp, #344]
    7924:	ldr	x0, [sp, #344]
    7928:	cmp	x0, #0x0
    792c:	b.ne	7940 <gomp_target_init+0xe0>  // b.any
    7930:	adrp	x0, 0 <gomp_mutex_init>
    7934:	add	x0, x0, #0x0
    7938:	str	wzr, [x0]
    793c:	b	7b68 <gomp_target_init+0x308>
    7940:	ldr	x2, [sp, #368]
    7944:	ldr	x1, [sp, #392]
    7948:	ldr	x0, [sp, #344]
    794c:	bl	0 <memcpy>
    7950:	ldr	x1, [sp, #344]
    7954:	ldr	x0, [sp, #368]
    7958:	add	x0, x1, x0
    795c:	ldr	x2, [sp, #360]
    7960:	ldr	x1, [sp, #408]
    7964:	bl	0 <memcpy>
    7968:	ldr	x1, [sp, #368]
    796c:	ldr	x0, [sp, #360]
    7970:	add	x0, x1, x0
    7974:	ldr	x1, [sp, #344]
    7978:	add	x3, x1, x0
    797c:	ldr	x0, [sp, #352]
    7980:	add	x0, x0, #0x1
    7984:	mov	x2, x0
    7988:	ldr	x1, [sp, #384]
    798c:	mov	x0, x3
    7990:	bl	0 <memcpy>
    7994:	add	x0, sp, #0x18
    7998:	ldr	x1, [sp, #344]
    799c:	bl	6ee8 <gomp_load_plugin_for_device>
    79a0:	and	w0, w0, #0xff
    79a4:	cmp	w0, #0x0
    79a8:	b.eq	7b48 <gomp_target_init+0x2e8>  // b.none
    79ac:	ldr	x0, [sp, #72]
    79b0:	blr	x0
    79b4:	str	w0, [sp, #340]
    79b8:	ldr	w0, [sp, #340]
    79bc:	cmp	w0, #0x0
    79c0:	b.le	7b48 <gomp_target_init+0x2e8>
    79c4:	adrp	x0, 0 <gomp_mutex_init>
    79c8:	add	x0, x0, #0x0
    79cc:	ldr	x2, [x0]
    79d0:	adrp	x0, 0 <gomp_mutex_init>
    79d4:	add	x0, x0, #0x0
    79d8:	ldr	w1, [x0]
    79dc:	ldr	w0, [sp, #340]
    79e0:	add	w0, w1, w0
    79e4:	sxtw	x1, w0
    79e8:	mov	x0, x1
    79ec:	lsl	x0, x0, #2
    79f0:	add	x0, x0, x1
    79f4:	lsl	x0, x0, #2
    79f8:	sub	x0, x0, x1
    79fc:	lsl	x0, x0, #4
    7a00:	mov	x1, x0
    7a04:	mov	x0, x2
    7a08:	bl	0 <realloc>
    7a0c:	mov	x1, x0
    7a10:	adrp	x0, 0 <gomp_mutex_init>
    7a14:	add	x0, x0, #0x0
    7a18:	str	x1, [x0]
    7a1c:	adrp	x0, 0 <gomp_mutex_init>
    7a20:	add	x0, x0, #0x0
    7a24:	ldr	x0, [x0]
    7a28:	cmp	x0, #0x0
    7a2c:	b.ne	7a48 <gomp_target_init+0x1e8>  // b.any
    7a30:	adrp	x0, 0 <gomp_mutex_init>
    7a34:	add	x0, x0, #0x0
    7a38:	str	wzr, [x0]
    7a3c:	ldr	x0, [sp, #344]
    7a40:	bl	0 <free>
    7a44:	b	7b68 <gomp_target_init+0x308>
    7a48:	ldr	x0, [sp, #48]
    7a4c:	blr	x0
    7a50:	str	x0, [sp, #24]
    7a54:	ldr	x0, [sp, #64]
    7a58:	blr	x0
    7a5c:	str	w0, [sp, #40]
    7a60:	str	xzr, [sp, #184]
    7a64:	str	wzr, [sp, #196]
    7a68:	str	xzr, [sp, #200]
    7a6c:	str	wzr, [sp, #404]
    7a70:	b	7b38 <gomp_target_init+0x2d8>
    7a74:	ldr	w0, [sp, #404]
    7a78:	str	w0, [sp, #36]
    7a7c:	adrp	x0, 0 <gomp_mutex_init>
    7a80:	add	x0, x0, #0x0
    7a84:	ldr	x2, [x0]
    7a88:	adrp	x0, 0 <gomp_mutex_init>
    7a8c:	add	x0, x0, #0x0
    7a90:	ldr	w0, [x0]
    7a94:	sxtw	x1, w0
    7a98:	mov	x0, x1
    7a9c:	lsl	x0, x0, #2
    7aa0:	add	x0, x0, x1
    7aa4:	lsl	x0, x0, #2
    7aa8:	sub	x0, x0, x1
    7aac:	lsl	x0, x0, #4
    7ab0:	add	x0, x2, x0
    7ab4:	mov	x3, x0
    7ab8:	add	x0, sp, #0x18
    7abc:	mov	x1, #0x130                 	// #304
    7ac0:	mov	x2, x1
    7ac4:	mov	x1, x0
    7ac8:	mov	x0, x3
    7acc:	bl	0 <memcpy>
    7ad0:	adrp	x0, 0 <gomp_mutex_init>
    7ad4:	add	x0, x0, #0x0
    7ad8:	ldr	x2, [x0]
    7adc:	adrp	x0, 0 <gomp_mutex_init>
    7ae0:	add	x0, x0, #0x0
    7ae4:	ldr	w0, [x0]
    7ae8:	sxtw	x1, w0
    7aec:	mov	x0, x1
    7af0:	lsl	x0, x0, #2
    7af4:	add	x0, x0, x1
    7af8:	lsl	x0, x0, #2
    7afc:	sub	x0, x0, x1
    7b00:	lsl	x0, x0, #4
    7b04:	add	x0, x2, x0
    7b08:	add	x0, x0, #0xa8
    7b0c:	bl	0 <gomp_mutex_init>
    7b10:	adrp	x0, 0 <gomp_mutex_init>
    7b14:	add	x0, x0, #0x0
    7b18:	ldr	w0, [x0]
    7b1c:	add	w1, w0, #0x1
    7b20:	adrp	x0, 0 <gomp_mutex_init>
    7b24:	add	x0, x0, #0x0
    7b28:	str	w1, [x0]
    7b2c:	ldr	w0, [sp, #404]
    7b30:	add	w0, w0, #0x1
    7b34:	str	w0, [sp, #404]
    7b38:	ldr	w1, [sp, #404]
    7b3c:	ldr	w0, [sp, #340]
    7b40:	cmp	w1, w0
    7b44:	b.lt	7a74 <gomp_target_init+0x214>  // b.tstop
    7b48:	ldr	x0, [sp, #344]
    7b4c:	bl	0 <free>
    7b50:	ldr	x0, [sp, #376]
    7b54:	add	x0, x0, #0x1
    7b58:	str	x0, [sp, #408]
    7b5c:	ldr	x0, [sp, #376]
    7b60:	cmp	x0, #0x0
    7b64:	b.ne	78b4 <gomp_target_init+0x54>  // b.any
    7b68:	adrp	x0, 0 <gomp_mutex_init>
    7b6c:	add	x0, x0, #0x0
    7b70:	ldr	w0, [x0]
    7b74:	sxtw	x1, w0
    7b78:	mov	x0, x1
    7b7c:	lsl	x0, x0, #2
    7b80:	add	x0, x0, x1
    7b84:	lsl	x0, x0, #2
    7b88:	sub	x0, x0, x1
    7b8c:	lsl	x0, x0, #4
    7b90:	bl	0 <malloc>
    7b94:	str	x0, [sp, #328]
    7b98:	ldr	x0, [sp, #328]
    7b9c:	cmp	x0, #0x0
    7ba0:	b.ne	7bcc <gomp_target_init+0x36c>  // b.any
    7ba4:	adrp	x0, 0 <gomp_mutex_init>
    7ba8:	add	x0, x0, #0x0
    7bac:	str	wzr, [x0]
    7bb0:	adrp	x0, 0 <gomp_mutex_init>
    7bb4:	add	x0, x0, #0x0
    7bb8:	ldr	x0, [x0]
    7bbc:	bl	0 <free>
    7bc0:	adrp	x0, 0 <gomp_mutex_init>
    7bc4:	add	x0, x0, #0x0
    7bc8:	str	xzr, [x0]
    7bcc:	adrp	x0, 0 <gomp_mutex_init>
    7bd0:	add	x0, x0, #0x0
    7bd4:	str	wzr, [x0]
    7bd8:	str	wzr, [sp, #404]
    7bdc:	b	7cb0 <gomp_target_init+0x450>
    7be0:	adrp	x0, 0 <gomp_mutex_init>
    7be4:	add	x0, x0, #0x0
    7be8:	ldr	x2, [x0]
    7bec:	ldrsw	x1, [sp, #404]
    7bf0:	mov	x0, x1
    7bf4:	lsl	x0, x0, #2
    7bf8:	add	x0, x0, x1
    7bfc:	lsl	x0, x0, #2
    7c00:	sub	x0, x0, x1
    7c04:	lsl	x0, x0, #4
    7c08:	add	x0, x2, x0
    7c0c:	ldr	w0, [x0, #8]
    7c10:	and	w0, w0, #0x4
    7c14:	cmp	w0, #0x0
    7c18:	b.eq	7ca4 <gomp_target_init+0x444>  // b.none
    7c1c:	adrp	x0, 0 <gomp_mutex_init>
    7c20:	add	x0, x0, #0x0
    7c24:	ldr	x2, [x0]
    7c28:	ldrsw	x1, [sp, #404]
    7c2c:	mov	x0, x1
    7c30:	lsl	x0, x0, #2
    7c34:	add	x0, x0, x1
    7c38:	lsl	x0, x0, #2
    7c3c:	sub	x0, x0, x1
    7c40:	lsl	x0, x0, #4
    7c44:	add	x3, x2, x0
    7c48:	adrp	x0, 0 <gomp_mutex_init>
    7c4c:	add	x0, x0, #0x0
    7c50:	ldr	w0, [x0]
    7c54:	add	w2, w0, #0x1
    7c58:	adrp	x1, 0 <gomp_mutex_init>
    7c5c:	add	x1, x1, #0x0
    7c60:	str	w2, [x1]
    7c64:	sxtw	x1, w0
    7c68:	mov	x0, x1
    7c6c:	lsl	x0, x0, #2
    7c70:	add	x0, x0, x1
    7c74:	lsl	x0, x0, #2
    7c78:	sub	x0, x0, x1
    7c7c:	lsl	x0, x0, #4
    7c80:	mov	x1, x0
    7c84:	ldr	x0, [sp, #328]
    7c88:	add	x0, x0, x1
    7c8c:	mov	x4, x0
    7c90:	mov	x1, x3
    7c94:	mov	x0, #0x130                 	// #304
    7c98:	mov	x2, x0
    7c9c:	mov	x0, x4
    7ca0:	bl	0 <memcpy>
    7ca4:	ldr	w0, [sp, #404]
    7ca8:	add	w0, w0, #0x1
    7cac:	str	w0, [sp, #404]
    7cb0:	adrp	x0, 0 <gomp_mutex_init>
    7cb4:	add	x0, x0, #0x0
    7cb8:	ldr	w0, [x0]
    7cbc:	ldr	w1, [sp, #404]
    7cc0:	cmp	w1, w0
    7cc4:	b.lt	7be0 <gomp_target_init+0x380>  // b.tstop
    7cc8:	adrp	x0, 0 <gomp_mutex_init>
    7ccc:	add	x0, x0, #0x0
    7cd0:	ldr	w0, [x0]
    7cd4:	str	w0, [sp, #400]
    7cd8:	str	wzr, [sp, #404]
    7cdc:	b	7da0 <gomp_target_init+0x540>
    7ce0:	adrp	x0, 0 <gomp_mutex_init>
    7ce4:	add	x0, x0, #0x0
    7ce8:	ldr	x2, [x0]
    7cec:	ldrsw	x1, [sp, #404]
    7cf0:	mov	x0, x1
    7cf4:	lsl	x0, x0, #2
    7cf8:	add	x0, x0, x1
    7cfc:	lsl	x0, x0, #2
    7d00:	sub	x0, x0, x1
    7d04:	lsl	x0, x0, #4
    7d08:	add	x0, x2, x0
    7d0c:	ldr	w0, [x0, #8]
    7d10:	and	w0, w0, #0x4
    7d14:	cmp	w0, #0x0
    7d18:	b.ne	7d94 <gomp_target_init+0x534>  // b.any
    7d1c:	adrp	x0, 0 <gomp_mutex_init>
    7d20:	add	x0, x0, #0x0
    7d24:	ldr	x2, [x0]
    7d28:	ldrsw	x1, [sp, #404]
    7d2c:	mov	x0, x1
    7d30:	lsl	x0, x0, #2
    7d34:	add	x0, x0, x1
    7d38:	lsl	x0, x0, #2
    7d3c:	sub	x0, x0, x1
    7d40:	lsl	x0, x0, #4
    7d44:	add	x2, x2, x0
    7d48:	ldr	w0, [sp, #400]
    7d4c:	add	w1, w0, #0x1
    7d50:	str	w1, [sp, #400]
    7d54:	sxtw	x1, w0
    7d58:	mov	x0, x1
    7d5c:	lsl	x0, x0, #2
    7d60:	add	x0, x0, x1
    7d64:	lsl	x0, x0, #2
    7d68:	sub	x0, x0, x1
    7d6c:	lsl	x0, x0, #4
    7d70:	mov	x1, x0
    7d74:	ldr	x0, [sp, #328]
    7d78:	add	x0, x0, x1
    7d7c:	mov	x3, x0
    7d80:	mov	x1, x2
    7d84:	mov	x0, #0x130                 	// #304
    7d88:	mov	x2, x0
    7d8c:	mov	x0, x3
    7d90:	bl	0 <memcpy>
    7d94:	ldr	w0, [sp, #404]
    7d98:	add	w0, w0, #0x1
    7d9c:	str	w0, [sp, #404]
    7da0:	adrp	x0, 0 <gomp_mutex_init>
    7da4:	add	x0, x0, #0x0
    7da8:	ldr	w0, [x0]
    7dac:	ldr	w1, [sp, #404]
    7db0:	cmp	w1, w0
    7db4:	b.lt	7ce0 <gomp_target_init+0x480>  // b.tstop
    7db8:	adrp	x0, 0 <gomp_mutex_init>
    7dbc:	add	x0, x0, #0x0
    7dc0:	ldr	x0, [x0]
    7dc4:	bl	0 <free>
    7dc8:	adrp	x0, 0 <gomp_mutex_init>
    7dcc:	add	x0, x0, #0x0
    7dd0:	ldr	x1, [sp, #328]
    7dd4:	str	x1, [x0]
    7dd8:	str	wzr, [sp, #404]
    7ddc:	b	7e58 <gomp_target_init+0x5f8>
    7de0:	adrp	x0, 0 <gomp_mutex_init>
    7de4:	add	x0, x0, #0x0
    7de8:	ldr	x2, [x0]
    7dec:	ldrsw	x1, [sp, #404]
    7df0:	mov	x0, x1
    7df4:	lsl	x0, x0, #2
    7df8:	add	x0, x0, x1
    7dfc:	lsl	x0, x0, #2
    7e00:	sub	x0, x0, x1
    7e04:	lsl	x0, x0, #4
    7e08:	add	x0, x2, x0
    7e0c:	ldr	w0, [x0, #8]
    7e10:	and	w0, w0, #0x8
    7e14:	cmp	w0, #0x0
    7e18:	b.eq	7e4c <gomp_target_init+0x5ec>  // b.none
    7e1c:	adrp	x0, 0 <gomp_mutex_init>
    7e20:	add	x0, x0, #0x0
    7e24:	ldr	x2, [x0]
    7e28:	ldrsw	x1, [sp, #404]
    7e2c:	mov	x0, x1
    7e30:	lsl	x0, x0, #2
    7e34:	add	x0, x0, x1
    7e38:	lsl	x0, x0, #2
    7e3c:	sub	x0, x0, x1
    7e40:	lsl	x0, x0, #4
    7e44:	add	x0, x2, x0
    7e48:	bl	0 <goacc_register>
    7e4c:	ldr	w0, [sp, #404]
    7e50:	add	w0, w0, #0x1
    7e54:	str	w0, [sp, #404]
    7e58:	adrp	x0, 0 <gomp_mutex_init>
    7e5c:	add	x0, x0, #0x0
    7e60:	ldr	w0, [x0]
    7e64:	ldr	w1, [sp, #404]
    7e68:	cmp	w1, w0
    7e6c:	b.lt	7de0 <gomp_target_init+0x580>  // b.tstop
    7e70:	adrp	x0, 0 <gomp_mutex_init>
    7e74:	add	x0, x0, #0x0
    7e78:	bl	0 <atexit>
    7e7c:	cmp	w0, #0x0
    7e80:	b.eq	7e90 <gomp_target_init+0x630>  // b.none
    7e84:	adrp	x0, 0 <gomp_mutex_init>
    7e88:	add	x0, x0, #0x0
    7e8c:	bl	0 <gomp_fatal>
    7e90:	nop
    7e94:	ldp	x29, x30, [sp], #416
    7e98:	ret

splay-tree.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <splay_tree_prefix_splay_compare>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	str	x1, [sp]
   c:	ldr	x0, [sp, #8]
  10:	ldr	x1, [x0]
  14:	ldr	x0, [sp, #8]
  18:	ldr	x0, [x0, #8]
  1c:	cmp	x1, x0
  20:	b.ne	44 <splay_tree_prefix_splay_compare+0x44>  // b.any
  24:	ldr	x0, [sp]
  28:	ldr	x1, [x0]
  2c:	ldr	x0, [sp]
  30:	ldr	x0, [x0, #8]
  34:	cmp	x1, x0
  38:	b.ne	44 <splay_tree_prefix_splay_compare+0x44>  // b.any
  3c:	mov	w0, #0x0                   	// #0
  40:	b	88 <splay_tree_prefix_splay_compare+0x88>
  44:	ldr	x0, [sp, #8]
  48:	ldr	x1, [x0, #8]
  4c:	ldr	x0, [sp]
  50:	ldr	x0, [x0]
  54:	cmp	x1, x0
  58:	b.hi	64 <splay_tree_prefix_splay_compare+0x64>  // b.pmore
  5c:	mov	w0, #0xffffffff            	// #-1
  60:	b	88 <splay_tree_prefix_splay_compare+0x88>
  64:	ldr	x0, [sp, #8]
  68:	ldr	x1, [x0]
  6c:	ldr	x0, [sp]
  70:	ldr	x0, [x0, #8]
  74:	cmp	x1, x0
  78:	b.cc	84 <splay_tree_prefix_splay_compare+0x84>  // b.lo, b.ul, b.last
  7c:	mov	w0, #0x1                   	// #1
  80:	b	88 <splay_tree_prefix_splay_compare+0x88>
  84:	mov	w0, #0x0                   	// #0
  88:	add	sp, sp, #0x10
  8c:	ret

0000000000000090 <rotate_left>:
  90:	sub	sp, sp, #0x30
  94:	str	x0, [sp, #24]
  98:	str	x1, [sp, #16]
  9c:	str	x2, [sp, #8]
  a0:	ldr	x0, [sp, #8]
  a4:	ldr	x0, [x0, #64]
  a8:	str	x0, [sp, #40]
  ac:	ldr	x0, [sp, #8]
  b0:	ldr	x1, [sp, #16]
  b4:	str	x1, [x0, #64]
  b8:	ldr	x0, [sp, #16]
  bc:	ldr	x1, [sp, #40]
  c0:	str	x1, [x0, #56]
  c4:	ldr	x0, [sp, #24]
  c8:	ldr	x1, [sp, #8]
  cc:	str	x1, [x0]
  d0:	nop
  d4:	add	sp, sp, #0x30
  d8:	ret

00000000000000dc <rotate_right>:
  dc:	sub	sp, sp, #0x30
  e0:	str	x0, [sp, #24]
  e4:	str	x1, [sp, #16]
  e8:	str	x2, [sp, #8]
  ec:	ldr	x0, [sp, #8]
  f0:	ldr	x0, [x0, #56]
  f4:	str	x0, [sp, #40]
  f8:	ldr	x0, [sp, #8]
  fc:	ldr	x1, [sp, #16]
 100:	str	x1, [x0, #56]
 104:	ldr	x0, [sp, #16]
 108:	ldr	x1, [sp, #40]
 10c:	str	x1, [x0, #64]
 110:	ldr	x0, [sp, #24]
 114:	ldr	x1, [sp, #8]
 118:	str	x1, [x0]
 11c:	nop
 120:	add	sp, sp, #0x30
 124:	ret

0000000000000128 <splay_tree_splay>:
 128:	stp	x29, x30, [sp, #-64]!
 12c:	mov	x29, sp
 130:	str	x0, [sp, #24]
 134:	str	x1, [sp, #16]
 138:	ldr	x0, [sp, #24]
 13c:	ldr	x0, [x0]
 140:	cmp	x0, #0x0
 144:	b.eq	394 <splay_tree_splay+0x26c>  // b.none
 148:	ldr	x0, [sp, #24]
 14c:	ldr	x0, [x0]
 150:	str	x0, [sp, #48]
 154:	ldr	x0, [sp, #48]
 158:	mov	x1, x0
 15c:	ldr	x0, [sp, #16]
 160:	bl	0 <splay_tree_prefix_splay_compare>
 164:	str	w0, [sp, #44]
 168:	ldr	w0, [sp, #44]
 16c:	cmp	w0, #0x0
 170:	b.eq	39c <splay_tree_splay+0x274>  // b.none
 174:	ldr	w0, [sp, #44]
 178:	cmp	w0, #0x0
 17c:	b.ge	190 <splay_tree_splay+0x68>  // b.tcont
 180:	ldr	x0, [sp, #48]
 184:	ldr	x0, [x0, #56]
 188:	str	x0, [sp, #56]
 18c:	b	19c <splay_tree_splay+0x74>
 190:	ldr	x0, [sp, #48]
 194:	ldr	x0, [x0, #64]
 198:	str	x0, [sp, #56]
 19c:	ldr	x0, [sp, #56]
 1a0:	cmp	x0, #0x0
 1a4:	b.eq	3a4 <splay_tree_splay+0x27c>  // b.none
 1a8:	ldr	x0, [sp, #56]
 1ac:	mov	x1, x0
 1b0:	ldr	x0, [sp, #16]
 1b4:	bl	0 <splay_tree_prefix_splay_compare>
 1b8:	str	w0, [sp, #40]
 1bc:	ldr	w0, [sp, #40]
 1c0:	cmp	w0, #0x0
 1c4:	b.eq	200 <splay_tree_splay+0xd8>  // b.none
 1c8:	ldr	w0, [sp, #40]
 1cc:	cmp	w0, #0x0
 1d0:	b.ge	1e4 <splay_tree_splay+0xbc>  // b.tcont
 1d4:	ldr	x0, [sp, #56]
 1d8:	ldr	x0, [x0, #56]
 1dc:	cmp	x0, #0x0
 1e0:	b.eq	200 <splay_tree_splay+0xd8>  // b.none
 1e4:	ldr	w0, [sp, #40]
 1e8:	cmp	w0, #0x0
 1ec:	b.le	234 <splay_tree_splay+0x10c>
 1f0:	ldr	x0, [sp, #56]
 1f4:	ldr	x0, [x0, #64]
 1f8:	cmp	x0, #0x0
 1fc:	b.ne	234 <splay_tree_splay+0x10c>  // b.any
 200:	ldr	w0, [sp, #44]
 204:	cmp	w0, #0x0
 208:	b.ge	220 <splay_tree_splay+0xf8>  // b.tcont
 20c:	ldr	x0, [sp, #24]
 210:	ldr	x2, [sp, #56]
 214:	ldr	x1, [sp, #48]
 218:	bl	90 <rotate_left>
 21c:	b	3a8 <splay_tree_splay+0x280>
 220:	ldr	x0, [sp, #24]
 224:	ldr	x2, [sp, #56]
 228:	ldr	x1, [sp, #48]
 22c:	bl	dc <rotate_right>
 230:	b	3a8 <splay_tree_splay+0x280>
 234:	ldr	w0, [sp, #44]
 238:	cmp	w0, #0x0
 23c:	b.ge	28c <splay_tree_splay+0x164>  // b.tcont
 240:	ldr	w0, [sp, #40]
 244:	cmp	w0, #0x0
 248:	b.ge	28c <splay_tree_splay+0x164>  // b.tcont
 24c:	ldr	x0, [sp, #48]
 250:	add	x3, x0, #0x38
 254:	ldr	x0, [sp, #56]
 258:	ldr	x0, [x0, #56]
 25c:	mov	x2, x0
 260:	ldr	x1, [sp, #56]
 264:	mov	x0, x3
 268:	bl	90 <rotate_left>
 26c:	ldr	x3, [sp, #24]
 270:	ldr	x0, [sp, #48]
 274:	ldr	x0, [x0, #56]
 278:	mov	x2, x0
 27c:	ldr	x1, [sp, #48]
 280:	mov	x0, x3
 284:	bl	90 <rotate_left>
 288:	b	390 <splay_tree_splay+0x268>
 28c:	ldr	w0, [sp, #44]
 290:	cmp	w0, #0x0
 294:	b.le	2e4 <splay_tree_splay+0x1bc>
 298:	ldr	w0, [sp, #40]
 29c:	cmp	w0, #0x0
 2a0:	b.le	2e4 <splay_tree_splay+0x1bc>
 2a4:	ldr	x0, [sp, #48]
 2a8:	add	x3, x0, #0x40
 2ac:	ldr	x0, [sp, #56]
 2b0:	ldr	x0, [x0, #64]
 2b4:	mov	x2, x0
 2b8:	ldr	x1, [sp, #56]
 2bc:	mov	x0, x3
 2c0:	bl	dc <rotate_right>
 2c4:	ldr	x3, [sp, #24]
 2c8:	ldr	x0, [sp, #48]
 2cc:	ldr	x0, [x0, #64]
 2d0:	mov	x2, x0
 2d4:	ldr	x1, [sp, #48]
 2d8:	mov	x0, x3
 2dc:	bl	dc <rotate_right>
 2e0:	b	390 <splay_tree_splay+0x268>
 2e4:	ldr	w0, [sp, #44]
 2e8:	cmp	w0, #0x0
 2ec:	b.ge	33c <splay_tree_splay+0x214>  // b.tcont
 2f0:	ldr	w0, [sp, #40]
 2f4:	cmp	w0, #0x0
 2f8:	b.le	33c <splay_tree_splay+0x214>
 2fc:	ldr	x0, [sp, #48]
 300:	add	x3, x0, #0x38
 304:	ldr	x0, [sp, #56]
 308:	ldr	x0, [x0, #64]
 30c:	mov	x2, x0
 310:	ldr	x1, [sp, #56]
 314:	mov	x0, x3
 318:	bl	dc <rotate_right>
 31c:	ldr	x3, [sp, #24]
 320:	ldr	x0, [sp, #48]
 324:	ldr	x0, [x0, #56]
 328:	mov	x2, x0
 32c:	ldr	x1, [sp, #48]
 330:	mov	x0, x3
 334:	bl	90 <rotate_left>
 338:	b	390 <splay_tree_splay+0x268>
 33c:	ldr	w0, [sp, #44]
 340:	cmp	w0, #0x0
 344:	b.le	148 <splay_tree_splay+0x20>
 348:	ldr	w0, [sp, #40]
 34c:	cmp	w0, #0x0
 350:	b.ge	148 <splay_tree_splay+0x20>  // b.tcont
 354:	ldr	x0, [sp, #48]
 358:	add	x3, x0, #0x40
 35c:	ldr	x0, [sp, #56]
 360:	ldr	x0, [x0, #56]
 364:	mov	x2, x0
 368:	ldr	x1, [sp, #56]
 36c:	mov	x0, x3
 370:	bl	90 <rotate_left>
 374:	ldr	x3, [sp, #24]
 378:	ldr	x0, [sp, #48]
 37c:	ldr	x0, [x0, #64]
 380:	mov	x2, x0
 384:	ldr	x1, [sp, #48]
 388:	mov	x0, x3
 38c:	bl	dc <rotate_right>
 390:	b	148 <splay_tree_splay+0x20>
 394:	nop
 398:	b	3a8 <splay_tree_splay+0x280>
 39c:	nop
 3a0:	b	3a8 <splay_tree_splay+0x280>
 3a4:	nop
 3a8:	ldp	x29, x30, [sp], #64
 3ac:	ret

00000000000003b0 <splay_tree_prefix_splay_tree_insert>:
 3b0:	stp	x29, x30, [sp, #-48]!
 3b4:	mov	x29, sp
 3b8:	str	x0, [sp, #24]
 3bc:	str	x1, [sp, #16]
 3c0:	str	wzr, [sp, #44]
 3c4:	ldr	x0, [sp, #16]
 3c8:	mov	x1, x0
 3cc:	ldr	x0, [sp, #24]
 3d0:	bl	128 <splay_tree_splay>
 3d4:	ldr	x0, [sp, #24]
 3d8:	ldr	x0, [x0]
 3dc:	cmp	x0, #0x0
 3e0:	b.eq	404 <splay_tree_prefix_splay_tree_insert+0x54>  // b.none
 3e4:	ldr	x0, [sp, #24]
 3e8:	ldr	x0, [x0]
 3ec:	mov	x2, x0
 3f0:	ldr	x0, [sp, #16]
 3f4:	mov	x1, x0
 3f8:	mov	x0, x2
 3fc:	bl	0 <splay_tree_prefix_splay_compare>
 400:	str	w0, [sp, #44]
 404:	ldr	x0, [sp, #24]
 408:	ldr	x0, [x0]
 40c:	cmp	x0, #0x0
 410:	b.eq	42c <splay_tree_prefix_splay_tree_insert+0x7c>  // b.none
 414:	ldr	w0, [sp, #44]
 418:	cmp	w0, #0x0
 41c:	b.ne	42c <splay_tree_prefix_splay_tree_insert+0x7c>  // b.any
 420:	adrp	x0, 0 <splay_tree_prefix_splay_compare>
 424:	add	x0, x0, #0x0
 428:	bl	0 <gomp_fatal>
 42c:	ldr	x0, [sp, #24]
 430:	ldr	x0, [x0]
 434:	cmp	x0, #0x0
 438:	b.ne	458 <splay_tree_prefix_splay_tree_insert+0xa8>  // b.any
 43c:	ldr	x0, [sp, #16]
 440:	str	xzr, [x0, #64]
 444:	ldr	x0, [sp, #16]
 448:	ldr	x1, [x0, #64]
 44c:	ldr	x0, [sp, #16]
 450:	str	x1, [x0, #56]
 454:	b	4c8 <splay_tree_prefix_splay_tree_insert+0x118>
 458:	ldr	w0, [sp, #44]
 45c:	cmp	w0, #0x0
 460:	b.ge	498 <splay_tree_prefix_splay_tree_insert+0xe8>  // b.tcont
 464:	ldr	x0, [sp, #24]
 468:	ldr	x1, [x0]
 46c:	ldr	x0, [sp, #16]
 470:	str	x1, [x0, #56]
 474:	ldr	x0, [sp, #16]
 478:	ldr	x0, [x0, #56]
 47c:	ldr	x1, [x0, #64]
 480:	ldr	x0, [sp, #16]
 484:	str	x1, [x0, #64]
 488:	ldr	x0, [sp, #16]
 48c:	ldr	x0, [x0, #56]
 490:	str	xzr, [x0, #64]
 494:	b	4c8 <splay_tree_prefix_splay_tree_insert+0x118>
 498:	ldr	x0, [sp, #24]
 49c:	ldr	x1, [x0]
 4a0:	ldr	x0, [sp, #16]
 4a4:	str	x1, [x0, #64]
 4a8:	ldr	x0, [sp, #16]
 4ac:	ldr	x0, [x0, #64]
 4b0:	ldr	x1, [x0, #56]
 4b4:	ldr	x0, [sp, #16]
 4b8:	str	x1, [x0, #56]
 4bc:	ldr	x0, [sp, #16]
 4c0:	ldr	x0, [x0, #64]
 4c4:	str	xzr, [x0, #56]
 4c8:	ldr	x0, [sp, #24]
 4cc:	ldr	x1, [sp, #16]
 4d0:	str	x1, [x0]
 4d4:	nop
 4d8:	ldp	x29, x30, [sp], #48
 4dc:	ret

00000000000004e0 <splay_tree_prefix_splay_tree_remove>:
 4e0:	stp	x29, x30, [sp, #-48]!
 4e4:	mov	x29, sp
 4e8:	str	x0, [sp, #24]
 4ec:	str	x1, [sp, #16]
 4f0:	ldr	x1, [sp, #16]
 4f4:	ldr	x0, [sp, #24]
 4f8:	bl	128 <splay_tree_splay>
 4fc:	ldr	x0, [sp, #24]
 500:	ldr	x0, [x0]
 504:	cmp	x0, #0x0
 508:	b.eq	5a4 <splay_tree_prefix_splay_tree_remove+0xc4>  // b.none
 50c:	ldr	x0, [sp, #24]
 510:	ldr	x0, [x0]
 514:	ldr	x1, [sp, #16]
 518:	bl	0 <splay_tree_prefix_splay_compare>
 51c:	cmp	w0, #0x0
 520:	b.ne	5a4 <splay_tree_prefix_splay_tree_remove+0xc4>  // b.any
 524:	ldr	x0, [sp, #24]
 528:	ldr	x0, [x0]
 52c:	ldr	x0, [x0, #56]
 530:	str	x0, [sp, #40]
 534:	ldr	x0, [sp, #24]
 538:	ldr	x0, [x0]
 53c:	ldr	x0, [x0, #64]
 540:	str	x0, [sp, #32]
 544:	ldr	x0, [sp, #40]
 548:	cmp	x0, #0x0
 54c:	b.eq	598 <splay_tree_prefix_splay_tree_remove+0xb8>  // b.none
 550:	ldr	x0, [sp, #24]
 554:	ldr	x1, [sp, #40]
 558:	str	x1, [x0]
 55c:	ldr	x0, [sp, #32]
 560:	cmp	x0, #0x0
 564:	b.eq	5a4 <splay_tree_prefix_splay_tree_remove+0xc4>  // b.none
 568:	b	578 <splay_tree_prefix_splay_tree_remove+0x98>
 56c:	ldr	x0, [sp, #40]
 570:	ldr	x0, [x0, #64]
 574:	str	x0, [sp, #40]
 578:	ldr	x0, [sp, #40]
 57c:	ldr	x0, [x0, #64]
 580:	cmp	x0, #0x0
 584:	b.ne	56c <splay_tree_prefix_splay_tree_remove+0x8c>  // b.any
 588:	ldr	x0, [sp, #40]
 58c:	ldr	x1, [sp, #32]
 590:	str	x1, [x0, #64]
 594:	b	5a4 <splay_tree_prefix_splay_tree_remove+0xc4>
 598:	ldr	x0, [sp, #24]
 59c:	ldr	x1, [sp, #32]
 5a0:	str	x1, [x0]
 5a4:	nop
 5a8:	ldp	x29, x30, [sp], #48
 5ac:	ret

00000000000005b0 <splay_tree_prefix_splay_tree_lookup>:
 5b0:	stp	x29, x30, [sp, #-32]!
 5b4:	mov	x29, sp
 5b8:	str	x0, [sp, #24]
 5bc:	str	x1, [sp, #16]
 5c0:	ldr	x1, [sp, #16]
 5c4:	ldr	x0, [sp, #24]
 5c8:	bl	128 <splay_tree_splay>
 5cc:	ldr	x0, [sp, #24]
 5d0:	ldr	x0, [x0]
 5d4:	cmp	x0, #0x0
 5d8:	b.eq	600 <splay_tree_prefix_splay_tree_lookup+0x50>  // b.none
 5dc:	ldr	x0, [sp, #24]
 5e0:	ldr	x0, [x0]
 5e4:	ldr	x1, [sp, #16]
 5e8:	bl	0 <splay_tree_prefix_splay_compare>
 5ec:	cmp	w0, #0x0
 5f0:	b.ne	600 <splay_tree_prefix_splay_tree_lookup+0x50>  // b.any
 5f4:	ldr	x0, [sp, #24]
 5f8:	ldr	x0, [x0]
 5fc:	b	604 <splay_tree_prefix_splay_tree_lookup+0x54>
 600:	mov	x0, #0x0                   	// #0
 604:	ldp	x29, x30, [sp], #32
 608:	ret

000000000000060c <splay_tree_foreach_internal>:
 60c:	stp	x29, x30, [sp, #-48]!
 610:	mov	x29, sp
 614:	str	x0, [sp, #40]
 618:	str	x1, [sp, #32]
 61c:	str	x2, [sp, #24]
 620:	ldr	x0, [sp, #40]
 624:	cmp	x0, #0x0
 628:	b.eq	668 <splay_tree_foreach_internal+0x5c>  // b.none
 62c:	ldr	x0, [sp, #40]
 630:	ldr	x2, [sp, #32]
 634:	ldr	x1, [sp, #24]
 638:	blr	x2
 63c:	ldr	x0, [sp, #40]
 640:	ldr	x0, [x0, #56]
 644:	ldr	x2, [sp, #24]
 648:	ldr	x1, [sp, #32]
 64c:	bl	60c <splay_tree_foreach_internal>
 650:	ldr	x0, [sp, #40]
 654:	ldr	x0, [x0, #64]
 658:	ldr	x2, [sp, #24]
 65c:	ldr	x1, [sp, #32]
 660:	bl	60c <splay_tree_foreach_internal>
 664:	b	66c <splay_tree_foreach_internal+0x60>
 668:	nop
 66c:	ldp	x29, x30, [sp], #48
 670:	ret

0000000000000674 <splay_tree_prefix_splay_tree_foreach>:
 674:	stp	x29, x30, [sp, #-48]!
 678:	mov	x29, sp
 67c:	str	x0, [sp, #40]
 680:	str	x1, [sp, #32]
 684:	str	x2, [sp, #24]
 688:	ldr	x0, [sp, #40]
 68c:	ldr	x0, [x0]
 690:	ldr	x2, [sp, #24]
 694:	ldr	x1, [sp, #32]
 698:	bl	60c <splay_tree_foreach_internal>
 69c:	nop
 6a0:	ldp	x29, x30, [sp], #48
 6a4:	ret

libgomp-plugin.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <GOMP_PLUGIN_malloc>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	ldr	x0, [sp, #24]
  10:	bl	0 <gomp_malloc>
  14:	ldp	x29, x30, [sp], #32
  18:	ret

000000000000001c <GOMP_PLUGIN_malloc_cleared>:
  1c:	stp	x29, x30, [sp, #-32]!
  20:	mov	x29, sp
  24:	str	x0, [sp, #24]
  28:	ldr	x0, [sp, #24]
  2c:	bl	0 <gomp_malloc_cleared>
  30:	ldp	x29, x30, [sp], #32
  34:	ret

0000000000000038 <GOMP_PLUGIN_realloc>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	mov	x29, sp
  40:	str	x0, [sp, #24]
  44:	str	x1, [sp, #16]
  48:	ldr	x1, [sp, #16]
  4c:	ldr	x0, [sp, #24]
  50:	bl	0 <gomp_realloc>
  54:	ldp	x29, x30, [sp], #32
  58:	ret

000000000000005c <GOMP_PLUGIN_debug>:
  5c:	stp	x29, x30, [sp, #-272]!
  60:	mov	x29, sp
  64:	str	w0, [sp, #60]
  68:	str	x1, [sp, #48]
  6c:	str	x2, [sp, #224]
  70:	str	x3, [sp, #232]
  74:	str	x4, [sp, #240]
  78:	str	x5, [sp, #248]
  7c:	str	x6, [sp, #256]
  80:	str	x7, [sp, #264]
  84:	str	q0, [sp, #96]
  88:	str	q1, [sp, #112]
  8c:	str	q2, [sp, #128]
  90:	str	q3, [sp, #144]
  94:	str	q4, [sp, #160]
  98:	str	q5, [sp, #176]
  9c:	str	q6, [sp, #192]
  a0:	str	q7, [sp, #208]
  a4:	add	x0, sp, #0x110
  a8:	str	x0, [sp, #64]
  ac:	add	x0, sp, #0x110
  b0:	str	x0, [sp, #72]
  b4:	add	x0, sp, #0xe0
  b8:	str	x0, [sp, #80]
  bc:	mov	w0, #0xffffffd0            	// #-48
  c0:	str	w0, [sp, #88]
  c4:	mov	w0, #0xffffff80            	// #-128
  c8:	str	w0, [sp, #92]
  cc:	adrp	x0, 0 <gomp_debug_var>
  d0:	add	x0, x0, #0x0
  d4:	ldr	w0, [x0]
  d8:	sxtw	x0, w0
  dc:	cmp	x0, #0x0
  e0:	b.eq	110 <GOMP_PLUGIN_debug+0xb4>  // b.none
  e4:	add	x2, sp, #0x10
  e8:	add	x3, sp, #0x40
  ec:	ldp	x0, x1, [x3]
  f0:	stp	x0, x1, [x2]
  f4:	ldp	x0, x1, [x3, #16]
  f8:	stp	x0, x1, [x2, #16]
  fc:	add	x0, sp, #0x10
 100:	mov	x2, x0
 104:	ldr	x1, [sp, #48]
 108:	ldr	w0, [sp, #60]
 10c:	bl	0 <gomp_vdebug>
 110:	nop
 114:	ldp	x29, x30, [sp], #272
 118:	ret

000000000000011c <GOMP_PLUGIN_error>:
 11c:	stp	x29, x30, [sp, #-288]!
 120:	mov	x29, sp
 124:	str	x0, [sp, #56]
 128:	str	x1, [sp, #232]
 12c:	str	x2, [sp, #240]
 130:	str	x3, [sp, #248]
 134:	str	x4, [sp, #256]
 138:	str	x5, [sp, #264]
 13c:	str	x6, [sp, #272]
 140:	str	x7, [sp, #280]
 144:	str	q0, [sp, #96]
 148:	str	q1, [sp, #112]
 14c:	str	q2, [sp, #128]
 150:	str	q3, [sp, #144]
 154:	str	q4, [sp, #160]
 158:	str	q5, [sp, #176]
 15c:	str	q6, [sp, #192]
 160:	str	q7, [sp, #208]
 164:	add	x0, sp, #0x120
 168:	str	x0, [sp, #64]
 16c:	add	x0, sp, #0x120
 170:	str	x0, [sp, #72]
 174:	add	x0, sp, #0xe0
 178:	str	x0, [sp, #80]
 17c:	mov	w0, #0xffffffc8            	// #-56
 180:	str	w0, [sp, #88]
 184:	mov	w0, #0xffffff80            	// #-128
 188:	str	w0, [sp, #92]
 18c:	add	x2, sp, #0x10
 190:	add	x3, sp, #0x40
 194:	ldp	x0, x1, [x3]
 198:	stp	x0, x1, [x2]
 19c:	ldp	x0, x1, [x3, #16]
 1a0:	stp	x0, x1, [x2, #16]
 1a4:	add	x0, sp, #0x10
 1a8:	mov	x1, x0
 1ac:	ldr	x0, [sp, #56]
 1b0:	bl	0 <gomp_verror>
 1b4:	nop
 1b8:	ldp	x29, x30, [sp], #288
 1bc:	ret

00000000000001c0 <GOMP_PLUGIN_fatal>:
 1c0:	stp	x29, x30, [sp, #-288]!
 1c4:	mov	x29, sp
 1c8:	str	x0, [sp, #56]
 1cc:	str	x1, [sp, #232]
 1d0:	str	x2, [sp, #240]
 1d4:	str	x3, [sp, #248]
 1d8:	str	x4, [sp, #256]
 1dc:	str	x5, [sp, #264]
 1e0:	str	x6, [sp, #272]
 1e4:	str	x7, [sp, #280]
 1e8:	str	q0, [sp, #96]
 1ec:	str	q1, [sp, #112]
 1f0:	str	q2, [sp, #128]
 1f4:	str	q3, [sp, #144]
 1f8:	str	q4, [sp, #160]
 1fc:	str	q5, [sp, #176]
 200:	str	q6, [sp, #192]
 204:	str	q7, [sp, #208]
 208:	add	x0, sp, #0x120
 20c:	str	x0, [sp, #64]
 210:	add	x0, sp, #0x120
 214:	str	x0, [sp, #72]
 218:	add	x0, sp, #0xe0
 21c:	str	x0, [sp, #80]
 220:	mov	w0, #0xffffffc8            	// #-56
 224:	str	w0, [sp, #88]
 228:	mov	w0, #0xffffff80            	// #-128
 22c:	str	w0, [sp, #92]
 230:	add	x2, sp, #0x10
 234:	add	x3, sp, #0x40
 238:	ldp	x0, x1, [x3]
 23c:	stp	x0, x1, [x2]
 240:	ldp	x0, x1, [x3, #16]
 244:	stp	x0, x1, [x2, #16]
 248:	add	x0, sp, #0x10
 24c:	mov	x1, x0
 250:	ldr	x0, [sp, #56]
 254:	bl	0 <gomp_vfatal>

oacc-parallel.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_lock>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #24]
       c:	str	wzr, [sp, #44]
      10:	ldr	x1, [sp, #24]
      14:	add	x0, sp, #0x2c
      18:	ldr	w3, [x0]
      1c:	mov	w4, #0x1                   	// #1
      20:	ldaxr	w2, [x1]
      24:	cmp	w2, w3
      28:	b.ne	34 <gomp_mutex_lock+0x34>  // b.any
      2c:	stxr	w5, w4, [x1]
      30:	cbnz	w5, 20 <gomp_mutex_lock+0x20>
      34:	cset	w1, eq  // eq = none
      38:	cmp	w1, #0x0
      3c:	b.ne	44 <gomp_mutex_lock+0x44>  // b.any
      40:	str	w2, [x0]
      44:	mov	w0, w1
      48:	eor	w0, w0, #0x1
      4c:	and	w0, w0, #0xff
      50:	cmp	w0, #0x0
      54:	b.eq	68 <gomp_mutex_lock+0x68>  // b.none
      58:	ldr	w0, [sp, #44]
      5c:	mov	w1, w0
      60:	ldr	x0, [sp, #24]
      64:	bl	0 <gomp_mutex_lock_slow>
      68:	nop
      6c:	ldp	x29, x30, [sp], #48
      70:	ret

0000000000000074 <gomp_mutex_unlock>:
      74:	stp	x29, x30, [sp, #-48]!
      78:	mov	x29, sp
      7c:	str	x0, [sp, #24]
      80:	ldr	x1, [sp, #24]
      84:	ldxr	w0, [x1]
      88:	stlxr	w2, wzr, [x1]
      8c:	cbnz	w2, 84 <gomp_mutex_unlock+0x10>
      90:	str	w0, [sp, #44]
      94:	ldr	w0, [sp, #44]
      98:	lsr	w0, w0, #31
      9c:	and	w0, w0, #0xff
      a0:	and	x0, x0, #0xff
      a4:	cmp	x0, #0x0
      a8:	b.eq	b4 <gomp_mutex_unlock+0x40>  // b.none
      ac:	ldr	x0, [sp, #24]
      b0:	bl	0 <gomp_mutex_unlock_slow>
      b4:	nop
      b8:	ldp	x29, x30, [sp], #48
      bc:	ret

00000000000000c0 <acc_device_type>:
      c0:	sub	sp, sp, #0x10
      c4:	str	w0, [sp, #12]
      c8:	ldr	w0, [sp, #12]
      cc:	add	sp, sp, #0x10
      d0:	ret

00000000000000d4 <goacc_thread>:
      d4:	mrs	x1, tpidr_el0
      d8:	adrp	x0, 0 <goacc_tls_data>
      dc:	ldr	x0, [x0]
      e0:	add	x0, x1, x0
      e4:	ldr	x0, [x0]
      e8:	ret

00000000000000ec <async_valid_stream_id_p>:
      ec:	sub	sp, sp, #0x10
      f0:	str	w0, [sp, #12]
      f4:	ldr	w0, [sp, #12]
      f8:	mvn	w0, w0
      fc:	lsr	w0, w0, #31
     100:	and	w0, w0, #0xff
     104:	add	sp, sp, #0x10
     108:	ret

000000000000010c <async_valid_p>:
     10c:	stp	x29, x30, [sp, #-32]!
     110:	mov	x29, sp
     114:	str	w0, [sp, #28]
     118:	ldr	w0, [sp, #28]
     11c:	cmn	w0, #0x1
     120:	b.eq	144 <async_valid_p+0x38>  // b.none
     124:	ldr	w0, [sp, #28]
     128:	cmn	w0, #0x2
     12c:	b.eq	144 <async_valid_p+0x38>  // b.none
     130:	ldr	w0, [sp, #28]
     134:	bl	ec <async_valid_stream_id_p>
     138:	and	w0, w0, #0xff
     13c:	cmp	w0, #0x0
     140:	b.eq	14c <async_valid_p+0x40>  // b.none
     144:	mov	w0, #0x1                   	// #1
     148:	b	150 <async_valid_p+0x44>
     14c:	mov	w0, #0x0                   	// #0
     150:	and	w0, w0, #0x1
     154:	and	w0, w0, #0xff
     158:	ldp	x29, x30, [sp], #32
     15c:	ret

0000000000000160 <async_synchronous_p>:
     160:	stp	x29, x30, [sp, #-32]!
     164:	mov	x29, sp
     168:	str	w0, [sp, #28]
     16c:	ldr	w0, [sp, #28]
     170:	bl	10c <async_valid_p>
     174:	and	w0, w0, #0xff
     178:	eor	w0, w0, #0x1
     17c:	and	w0, w0, #0xff
     180:	cmp	w0, #0x0
     184:	b.eq	190 <async_synchronous_p+0x30>  // b.none
     188:	mov	w0, #0x1                   	// #1
     18c:	b	1a0 <async_synchronous_p+0x40>
     190:	ldr	w0, [sp, #28]
     194:	cmn	w0, #0x2
     198:	cset	w0, eq  // eq = none
     19c:	and	w0, w0, #0xff
     1a0:	ldp	x29, x30, [sp], #32
     1a4:	ret

00000000000001a8 <find_pointer>:
     1a8:	sub	sp, sp, #0x30
     1ac:	str	w0, [sp, #28]
     1b0:	str	x1, [sp, #16]
     1b4:	str	x2, [sp, #8]
     1b8:	ldr	w0, [sp, #28]
     1bc:	add	w0, w0, #0x1
     1c0:	sxtw	x0, w0
     1c4:	ldr	x1, [sp, #16]
     1c8:	cmp	x1, x0
     1cc:	b.hi	1d8 <find_pointer+0x30>  // b.pmore
     1d0:	mov	w0, #0x0                   	// #0
     1d4:	b	220 <find_pointer+0x78>
     1d8:	ldrsw	x0, [sp, #28]
     1dc:	add	x0, x0, #0x1
     1e0:	lsl	x0, x0, #1
     1e4:	ldr	x1, [sp, #8]
     1e8:	add	x0, x1, x0
     1ec:	ldrh	w0, [x0]
     1f0:	strb	w0, [sp, #47]
     1f4:	ldrb	w0, [sp, #47]
     1f8:	cmp	w0, #0x5
     1fc:	b.ne	208 <find_pointer+0x60>  // b.any
     200:	mov	w0, #0x3                   	// #3
     204:	b	220 <find_pointer+0x78>
     208:	ldrb	w0, [sp, #47]
     20c:	cmp	w0, #0x4
     210:	b.ne	21c <find_pointer+0x74>  // b.any
     214:	mov	w0, #0x2                   	// #2
     218:	b	220 <find_pointer+0x78>
     21c:	mov	w0, #0x0                   	// #0
     220:	add	sp, sp, #0x30
     224:	ret

0000000000000228 <handle_ftn_pointers>:
     228:	sub	sp, sp, #0x30
     22c:	str	x0, [sp, #24]
     230:	str	x1, [sp, #16]
     234:	str	x2, [sp, #8]
     238:	str	x3, [sp]
     23c:	str	wzr, [sp, #44]
     240:	b	39c <handle_ftn_pointers+0x174>
     244:	ldrsw	x0, [sp, #44]
     248:	lsl	x0, x0, #1
     24c:	ldr	x1, [sp]
     250:	add	x0, x1, x0
     254:	ldrh	w0, [x0]
     258:	and	w0, w0, #0xff
     25c:	strh	w0, [sp, #40]
     260:	ldrh	w0, [sp, #40]
     264:	cmp	w0, #0x8
     268:	b.ne	390 <handle_ftn_pointers+0x168>  // b.any
     26c:	ldr	x0, [sp, #24]
     270:	sub	w0, w0, #0x1
     274:	ldr	w1, [sp, #44]
     278:	cmp	w1, w0
     27c:	b.ge	2a4 <handle_ftn_pointers+0x7c>  // b.tcont
     280:	ldrsw	x0, [sp, #44]
     284:	add	x0, x0, #0x1
     288:	lsl	x0, x0, #1
     28c:	ldr	x1, [sp]
     290:	add	x0, x1, x0
     294:	ldrh	w0, [x0]
     298:	and	w0, w0, #0xff
     29c:	strh	w0, [sp, #42]
     2a0:	b	2ac <handle_ftn_pointers+0x84>
     2a4:	mov	w0, #0xffffffff            	// #-1
     2a8:	strh	w0, [sp, #42]
     2ac:	ldrsw	x0, [sp, #44]
     2b0:	lsl	x0, x0, #3
     2b4:	ldr	x1, [sp, #8]
     2b8:	add	x0, x1, x0
     2bc:	ldr	x0, [x0]
     2c0:	cmp	x0, #0x8
     2c4:	b.eq	38c <handle_ftn_pointers+0x164>  // b.none
     2c8:	ldrh	w0, [sp, #42]
     2cc:	cmp	w0, #0x4
     2d0:	b.ne	374 <handle_ftn_pointers+0x14c>  // b.any
     2d4:	ldrsw	x0, [sp, #44]
     2d8:	add	x0, x0, #0x1
     2dc:	lsl	x0, x0, #3
     2e0:	ldr	x1, [sp, #8]
     2e4:	add	x0, x1, x0
     2e8:	ldr	x0, [x0]
     2ec:	cmp	x0, #0x0
     2f0:	b.ne	374 <handle_ftn_pointers+0x14c>  // b.any
     2f4:	ldrsw	x0, [sp, #44]
     2f8:	lsl	x0, x0, #3
     2fc:	ldr	x1, [sp, #16]
     300:	add	x0, x1, x0
     304:	ldr	x1, [x0]
     308:	ldrsw	x0, [sp, #44]
     30c:	add	x0, x0, #0x1
     310:	lsl	x0, x0, #3
     314:	ldr	x2, [sp, #16]
     318:	add	x0, x2, x0
     31c:	ldr	x0, [x0]
     320:	ldr	x0, [x0]
     324:	cmp	x1, x0
     328:	b.ne	374 <handle_ftn_pointers+0x14c>  // b.any
     32c:	ldrsw	x0, [sp, #44]
     330:	lsl	x0, x0, #1
     334:	ldr	x1, [sp]
     338:	add	x1, x1, x0
     33c:	ldrsw	x0, [sp, #44]
     340:	add	x0, x0, #0x1
     344:	lsl	x0, x0, #1
     348:	ldr	x2, [sp]
     34c:	add	x0, x2, x0
     350:	ldrh	w1, [x1]
     354:	strh	w1, [x0]
     358:	ldrsw	x0, [sp, #44]
     35c:	add	x0, x0, #0x1
     360:	lsl	x0, x0, #3
     364:	ldr	x1, [sp, #8]
     368:	add	x0, x1, x0
     36c:	mov	x1, #0x8                   	// #8
     370:	str	x1, [x0]
     374:	ldrsw	x0, [sp, #44]
     378:	lsl	x0, x0, #3
     37c:	ldr	x1, [sp, #16]
     380:	add	x0, x1, x0
     384:	str	xzr, [x0]
     388:	b	390 <handle_ftn_pointers+0x168>
     38c:	nop
     390:	ldr	w0, [sp, #44]
     394:	add	w0, w0, #0x1
     398:	str	w0, [sp, #44]
     39c:	ldrsw	x0, [sp, #44]
     3a0:	ldr	x1, [sp, #24]
     3a4:	cmp	x1, x0
     3a8:	b.hi	244 <handle_ftn_pointers+0x1c>  // b.pmore
     3ac:	nop
     3b0:	nop
     3b4:	add	sp, sp, #0x30
     3b8:	ret

00000000000003bc <GOACC_parallel_keyed>:
     3bc:	stp	x29, x30, [sp, #-432]!
     3c0:	mov	x29, sp
     3c4:	str	w0, [x29, #60]
     3c8:	str	x1, [x29, #48]
     3cc:	str	x2, [x29, #40]
     3d0:	str	x3, [x29, #32]
     3d4:	str	x4, [x29, #24]
     3d8:	str	x5, [x29, #16]
     3dc:	str	x6, [x29, #416]
     3e0:	str	x7, [x29, #424]
     3e4:	str	q0, [x29, #288]
     3e8:	str	q1, [x29, #304]
     3ec:	str	q2, [x29, #320]
     3f0:	str	q3, [x29, #336]
     3f4:	str	q4, [x29, #352]
     3f8:	str	q5, [x29, #368]
     3fc:	str	q6, [x29, #384]
     400:	str	q7, [x29, #400]
     404:	ldr	w0, [x29, #60]
     408:	mvn	w0, w0
     40c:	str	w0, [x29, #252]
     410:	mov	w0, #0xfffffffe            	// #-2
     414:	str	w0, [x29, #268]
     418:	adrp	x0, 0 <gomp_debug_var>
     41c:	add	x0, x0, #0x0
     420:	ldr	w0, [x0]
     424:	sxtw	x0, w0
     428:	cmp	x0, #0x0
     42c:	b.eq	458 <GOACC_parallel_keyed+0x9c>  // b.none
     430:	ldr	x6, [x29, #16]
     434:	ldr	x5, [x29, #24]
     438:	ldr	x4, [x29, #32]
     43c:	ldr	x3, [x29, #40]
     440:	adrp	x0, 0 <gomp_mutex_lock>
     444:	add	x2, x0, #0x0
     448:	adrp	x0, 0 <gomp_mutex_lock>
     44c:	add	x1, x0, #0x0
     450:	mov	w0, #0x0                   	// #0
     454:	bl	0 <gomp_debug>
     458:	bl	0 <goacc_lazy_initialize>
     45c:	bl	d4 <goacc_thread>
     460:	str	x0, [x29, #240]
     464:	ldr	x0, [x29, #240]
     468:	ldr	x0, [x0, #8]
     46c:	str	x0, [x29, #232]
     470:	ldr	x3, [x29, #16]
     474:	ldr	x2, [x29, #24]
     478:	ldr	x1, [x29, #32]
     47c:	ldr	x0, [x29, #40]
     480:	bl	228 <handle_ftn_pointers>
     484:	ldr	w0, [x29, #252]
     488:	and	w0, w0, #0x1
     48c:	cmp	w0, #0x0
     490:	b.eq	4b0 <GOACC_parallel_keyed+0xf4>  // b.none
     494:	mov	w0, #0x2                   	// #2
     498:	bl	0 <goacc_save_and_set_bind>
     49c:	ldr	x1, [x29, #48]
     4a0:	ldr	x0, [x29, #32]
     4a4:	blr	x1
     4a8:	bl	0 <goacc_restore_bind>
     4ac:	b	9e0 <GOACC_parallel_keyed+0x624>
     4b0:	ldr	x0, [x29, #232]
     4b4:	ldr	w0, [x0, #16]
     4b8:	bl	c0 <acc_device_type>
     4bc:	cmp	w0, #0x2
     4c0:	b.ne	4d4 <GOACC_parallel_keyed+0x118>  // b.any
     4c4:	ldr	x1, [x29, #48]
     4c8:	ldr	x0, [x29, #32]
     4cc:	blr	x1
     4d0:	b	9e0 <GOACC_parallel_keyed+0x624>
     4d4:	str	wzr, [x29, #284]
     4d8:	b	4f8 <GOACC_parallel_keyed+0x13c>
     4dc:	ldr	w0, [x29, #284]
     4e0:	lsl	x0, x0, #2
     4e4:	add	x1, x29, #0x48
     4e8:	str	wzr, [x1, x0]
     4ec:	ldr	w0, [x29, #284]
     4f0:	add	w0, w0, #0x1
     4f4:	str	w0, [x29, #284]
     4f8:	ldr	w0, [x29, #284]
     4fc:	cmp	w0, #0x3
     500:	b.ne	4dc <GOACC_parallel_keyed+0x120>  // b.any
     504:	add	x0, x29, #0x1b0
     508:	str	x0, [x29, #144]
     50c:	add	x0, x29, #0x1b0
     510:	str	x0, [x29, #152]
     514:	add	x0, x29, #0x1a0
     518:	str	x0, [x29, #160]
     51c:	mov	w0, #0xfffffff0            	// #-16
     520:	str	w0, [x29, #168]
     524:	mov	w0, #0xffffff80            	// #-128
     528:	str	w0, [x29, #172]
     52c:	b	6f0 <GOACC_parallel_keyed+0x334>
     530:	ldr	w0, [x29, #228]
     534:	lsr	w0, w0, #16
     538:	and	w0, w0, #0xfff
     53c:	cmp	w0, #0x0
     540:	b.eq	560 <GOACC_parallel_keyed+0x1a4>  // b.none
     544:	ldr	w0, [x29, #228]
     548:	lsr	w0, w0, #16
     54c:	and	w0, w0, #0xfff
     550:	mov	w1, w0
     554:	adrp	x0, 0 <gomp_mutex_lock>
     558:	add	x0, x0, #0x0
     55c:	bl	0 <gomp_fatal>
     560:	ldr	w0, [x29, #228]
     564:	lsr	w0, w0, #28
     568:	cmp	w0, #0x3
     56c:	b.eq	6b0 <GOACC_parallel_keyed+0x2f4>  // b.none
     570:	cmp	w0, #0x3
     574:	b.hi	6d8 <GOACC_parallel_keyed+0x31c>  // b.pmore
     578:	cmp	w0, #0x1
     57c:	b.eq	58c <GOACC_parallel_keyed+0x1d0>  // b.none
     580:	cmp	w0, #0x2
     584:	b.eq	638 <GOACC_parallel_keyed+0x27c>  // b.none
     588:	b	6d8 <GOACC_parallel_keyed+0x31c>
     58c:	ldr	w0, [x29, #228]
     590:	and	w0, w0, #0xffff
     594:	str	w0, [x29, #176]
     598:	str	wzr, [x29, #284]
     59c:	b	628 <GOACC_parallel_keyed+0x26c>
     5a0:	ldr	w0, [x29, #284]
     5a4:	ldr	w1, [x29, #176]
     5a8:	lsr	w0, w1, w0
     5ac:	and	w0, w0, #0x1
     5b0:	cmp	w0, #0x0
     5b4:	b.eq	61c <GOACC_parallel_keyed+0x260>  // b.none
     5b8:	ldr	w1, [x29, #168]
     5bc:	ldr	x0, [x29, #144]
     5c0:	cmp	w1, #0x0
     5c4:	b.lt	5d8 <GOACC_parallel_keyed+0x21c>  // b.tstop
     5c8:	add	x1, x0, #0xb
     5cc:	and	x1, x1, #0xfffffffffffffff8
     5d0:	str	x1, [x29, #144]
     5d4:	b	608 <GOACC_parallel_keyed+0x24c>
     5d8:	add	w2, w1, #0x8
     5dc:	str	w2, [x29, #168]
     5e0:	ldr	w2, [x29, #168]
     5e4:	cmp	w2, #0x0
     5e8:	b.le	5fc <GOACC_parallel_keyed+0x240>
     5ec:	add	x1, x0, #0xb
     5f0:	and	x1, x1, #0xfffffffffffffff8
     5f4:	str	x1, [x29, #144]
     5f8:	b	608 <GOACC_parallel_keyed+0x24c>
     5fc:	ldr	x2, [x29, #152]
     600:	sxtw	x0, w1
     604:	add	x0, x2, x0
     608:	ldr	w2, [x0]
     60c:	ldr	w0, [x29, #284]
     610:	lsl	x0, x0, #2
     614:	add	x1, x29, #0x48
     618:	str	w2, [x1, x0]
     61c:	ldr	w0, [x29, #284]
     620:	add	w0, w0, #0x1
     624:	str	w0, [x29, #284]
     628:	ldr	w0, [x29, #284]
     62c:	cmp	w0, #0x3
     630:	b.ne	5a0 <GOACC_parallel_keyed+0x1e4>  // b.any
     634:	b	6f0 <GOACC_parallel_keyed+0x334>
     638:	ldr	w0, [x29, #228]
     63c:	and	w0, w0, #0xffff
     640:	str	w0, [x29, #268]
     644:	ldr	w1, [x29, #268]
     648:	mov	w0, #0xffff                	// #65535
     64c:	cmp	w1, w0
     650:	b.ne	6f0 <GOACC_parallel_keyed+0x334>  // b.any
     654:	ldr	w1, [x29, #168]
     658:	ldr	x0, [x29, #144]
     65c:	cmp	w1, #0x0
     660:	b.lt	674 <GOACC_parallel_keyed+0x2b8>  // b.tstop
     664:	add	x1, x0, #0xb
     668:	and	x1, x1, #0xfffffffffffffff8
     66c:	str	x1, [x29, #144]
     670:	b	6a4 <GOACC_parallel_keyed+0x2e8>
     674:	add	w2, w1, #0x8
     678:	str	w2, [x29, #168]
     67c:	ldr	w2, [x29, #168]
     680:	cmp	w2, #0x0
     684:	b.le	698 <GOACC_parallel_keyed+0x2dc>
     688:	add	x1, x0, #0xb
     68c:	and	x1, x1, #0xfffffffffffffff8
     690:	str	x1, [x29, #144]
     694:	b	6a4 <GOACC_parallel_keyed+0x2e8>
     698:	ldr	x2, [x29, #152]
     69c:	sxtw	x0, w1
     6a0:	add	x0, x2, x0
     6a4:	ldr	w0, [x0]
     6a8:	str	w0, [x29, #268]
     6ac:	b	6f0 <GOACC_parallel_keyed+0x334>
     6b0:	ldr	w0, [x29, #228]
     6b4:	and	w0, w0, #0xffff
     6b8:	str	w0, [x29, #180]
     6bc:	ldr	w0, [x29, #180]
     6c0:	add	x1, x29, #0x90
     6c4:	mov	x2, x1
     6c8:	mov	w1, w0
     6cc:	ldr	w0, [x29, #268]
     6d0:	bl	12b8 <goacc_wait>
     6d4:	b	6f0 <GOACC_parallel_keyed+0x334>
     6d8:	ldr	w0, [x29, #228]
     6dc:	lsr	w0, w0, #28
     6e0:	mov	w1, w0
     6e4:	adrp	x0, 0 <gomp_mutex_lock>
     6e8:	add	x0, x0, #0x0
     6ec:	bl	0 <gomp_fatal>
     6f0:	ldr	w1, [x29, #168]
     6f4:	ldr	x0, [x29, #144]
     6f8:	cmp	w1, #0x0
     6fc:	b.lt	710 <GOACC_parallel_keyed+0x354>  // b.tstop
     700:	add	x1, x0, #0xb
     704:	and	x1, x1, #0xfffffffffffffff8
     708:	str	x1, [x29, #144]
     70c:	b	740 <GOACC_parallel_keyed+0x384>
     710:	add	w2, w1, #0x8
     714:	str	w2, [x29, #168]
     718:	ldr	w2, [x29, #168]
     71c:	cmp	w2, #0x0
     720:	b.le	734 <GOACC_parallel_keyed+0x378>
     724:	add	x1, x0, #0xb
     728:	and	x1, x1, #0xfffffffffffffff8
     72c:	str	x1, [x29, #144]
     730:	b	740 <GOACC_parallel_keyed+0x384>
     734:	ldr	x2, [x29, #152]
     738:	sxtw	x0, w1
     73c:	add	x0, x2, x0
     740:	ldr	w0, [x0]
     744:	str	w0, [x29, #228]
     748:	ldr	w0, [x29, #228]
     74c:	cmp	w0, #0x0
     750:	b.ne	530 <GOACC_parallel_keyed+0x174>  // b.any
     754:	ldr	x0, [x29, #232]
     758:	ldr	x1, [x0, #248]
     75c:	ldr	w0, [x29, #268]
     760:	blr	x1
     764:	ldr	x0, [x29, #232]
     768:	ldr	w0, [x0, #8]
     76c:	and	w0, w0, #0x2
     770:	cmp	w0, #0x0
     774:	b.ne	7e0 <GOACC_parallel_keyed+0x424>  // b.any
     778:	ldr	x0, [x29, #48]
     77c:	str	x0, [x29, #88]
     780:	ldr	x0, [x29, #88]
     784:	add	x0, x0, #0x1
     788:	str	x0, [x29, #96]
     78c:	ldr	x0, [x29, #232]
     790:	add	x0, x0, #0xa8
     794:	bl	0 <gomp_mutex_lock>
     798:	ldr	x0, [x29, #232]
     79c:	add	x0, x0, #0xa0
     7a0:	add	x1, x29, #0x58
     7a4:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     7a8:	str	x0, [x29, #216]
     7ac:	ldr	x0, [x29, #232]
     7b0:	add	x0, x0, #0xa8
     7b4:	bl	74 <gomp_mutex_unlock>
     7b8:	ldr	x0, [x29, #216]
     7bc:	cmp	x0, #0x0
     7c0:	b.ne	7d0 <GOACC_parallel_keyed+0x414>  // b.any
     7c4:	adrp	x0, 0 <gomp_mutex_lock>
     7c8:	add	x0, x0, #0x0
     7cc:	bl	0 <gomp_fatal>
     7d0:	ldr	x0, [x29, #216]
     7d4:	ldr	x0, [x0, #24]
     7d8:	str	x0, [x29, #272]
     7dc:	b	7e8 <GOACC_parallel_keyed+0x42c>
     7e0:	ldr	x0, [x29, #48]
     7e4:	str	x0, [x29, #272]
     7e8:	mov	w7, #0x0                   	// #0
     7ec:	mov	w6, #0x1                   	// #1
     7f0:	ldr	x5, [x29, #16]
     7f4:	ldr	x4, [x29, #24]
     7f8:	mov	x3, #0x0                   	// #0
     7fc:	ldr	x2, [x29, #32]
     800:	ldr	x1, [x29, #40]
     804:	ldr	x0, [x29, #232]
     808:	bl	0 <gomp_map_vars>
     80c:	str	x0, [x29, #208]
     810:	ldr	x0, [x29, #40]
     814:	lsl	x0, x0, #3
     818:	add	x0, x0, #0xf
     81c:	lsr	x0, x0, #4
     820:	lsl	x0, x0, #4
     824:	sub	sp, sp, x0
     828:	mov	x0, sp
     82c:	add	x0, x0, #0xf
     830:	lsr	x0, x0, #4
     834:	lsl	x0, x0, #4
     838:	str	x0, [x29, #200]
     83c:	str	wzr, [x29, #284]
     840:	b	8c0 <GOACC_parallel_keyed+0x504>
     844:	ldr	x1, [x29, #208]
     848:	ldr	w0, [x29, #284]
     84c:	add	x0, x0, #0x2
     850:	lsl	x0, x0, #5
     854:	add	x0, x1, x0
     858:	ldr	x0, [x0]
     85c:	ldr	x0, [x0, #16]
     860:	ldr	x1, [x0, #16]
     864:	ldr	x2, [x29, #208]
     868:	ldr	w0, [x29, #284]
     86c:	add	x0, x0, #0x2
     870:	lsl	x0, x0, #5
     874:	add	x0, x2, x0
     878:	ldr	x0, [x0]
     87c:	ldr	x0, [x0, #24]
     880:	add	x1, x1, x0
     884:	ldr	x2, [x29, #208]
     888:	ldr	w0, [x29, #284]
     88c:	lsl	x0, x0, #5
     890:	add	x0, x2, x0
     894:	ldr	x0, [x0, #80]
     898:	add	x2, x1, x0
     89c:	ldr	w0, [x29, #284]
     8a0:	lsl	x0, x0, #3
     8a4:	ldr	x1, [x29, #200]
     8a8:	add	x0, x1, x0
     8ac:	mov	x1, x2
     8b0:	str	x1, [x0]
     8b4:	ldr	w0, [x29, #284]
     8b8:	add	w0, w0, #0x1
     8bc:	str	w0, [x29, #284]
     8c0:	ldr	w0, [x29, #284]
     8c4:	ldr	x1, [x29, #40]
     8c8:	cmp	x1, x0
     8cc:	b.hi	844 <GOACC_parallel_keyed+0x488>  // b.pmore
     8d0:	ldr	x0, [x29, #232]
     8d4:	ldr	x7, [x0, #184]
     8d8:	ldr	x0, [x29, #272]
     8dc:	add	x1, x29, #0x48
     8e0:	ldr	x6, [x29, #208]
     8e4:	mov	x5, x1
     8e8:	ldr	w4, [x29, #268]
     8ec:	ldr	x3, [x29, #200]
     8f0:	ldr	x2, [x29, #32]
     8f4:	ldr	x1, [x29, #40]
     8f8:	blr	x7
     8fc:	mov	w0, #0x1                   	// #1
     900:	strb	w0, [x29, #199]
     904:	ldr	w0, [x29, #268]
     908:	bl	160 <async_synchronous_p>
     90c:	and	w0, w0, #0xff
     910:	cmp	w0, #0x0
     914:	b.eq	928 <GOACC_parallel_keyed+0x56c>  // b.none
     918:	mov	w1, #0x1                   	// #1
     91c:	ldr	x0, [x29, #208]
     920:	bl	0 <gomp_unmap_vars>
     924:	b	9d0 <GOACC_parallel_keyed+0x614>
     928:	strb	wzr, [x29, #267]
     92c:	str	xzr, [x29, #256]
     930:	b	984 <GOACC_parallel_keyed+0x5c8>
     934:	ldr	x1, [x29, #208]
     938:	ldr	x0, [x29, #256]
     93c:	add	x0, x0, #0x2
     940:	lsl	x0, x0, #5
     944:	add	x0, x1, x0
     948:	ldr	x0, [x0]
     94c:	str	x0, [x29, #184]
     950:	ldr	x0, [x29, #184]
     954:	cmp	x0, #0x0
     958:	b.eq	978 <GOACC_parallel_keyed+0x5bc>  // b.none
     95c:	ldr	x0, [x29, #184]
     960:	ldr	x0, [x0, #32]
     964:	cmp	x0, #0x1
     968:	b.ne	978 <GOACC_parallel_keyed+0x5bc>  // b.any
     96c:	mov	w0, #0x1                   	// #1
     970:	strb	w0, [x29, #267]
     974:	b	998 <GOACC_parallel_keyed+0x5dc>
     978:	ldr	x0, [x29, #256]
     97c:	add	x0, x0, #0x1
     980:	str	x0, [x29, #256]
     984:	ldr	x0, [x29, #208]
     988:	ldr	x0, [x0, #48]
     98c:	ldr	x1, [x29, #256]
     990:	cmp	x1, x0
     994:	b.cc	934 <GOACC_parallel_keyed+0x578>  // b.lo, b.ul, b.last
     998:	ldrb	w0, [x29, #267]
     99c:	cmp	w0, #0x0
     9a0:	b.eq	9c0 <GOACC_parallel_keyed+0x604>  // b.none
     9a4:	ldr	x0, [x29, #208]
     9a8:	ldr	x0, [x0, #56]
     9ac:	ldr	x2, [x0, #192]
     9b0:	ldr	w1, [x29, #268]
     9b4:	ldr	x0, [x29, #208]
     9b8:	blr	x2
     9bc:	b	9d0 <GOACC_parallel_keyed+0x614>
     9c0:	strb	wzr, [x29, #199]
     9c4:	ldrb	w1, [x29, #199]
     9c8:	ldr	x0, [x29, #208]
     9cc:	bl	0 <gomp_unmap_vars>
     9d0:	ldr	x0, [x29, #232]
     9d4:	ldr	x1, [x0, #248]
     9d8:	mov	w0, #0xfffffffe            	// #-2
     9dc:	blr	x1
     9e0:	mov	sp, x29
     9e4:	ldp	x29, x30, [sp], #432
     9e8:	ret

00000000000009ec <GOACC_parallel>:
     9ec:	stp	x29, x30, [sp, #-208]!
     9f0:	mov	x29, sp
     9f4:	str	w0, [sp, #76]
     9f8:	str	x1, [sp, #64]
     9fc:	str	x2, [sp, #56]
     a00:	str	x3, [sp, #48]
     a04:	str	x4, [sp, #40]
     a08:	str	x5, [sp, #32]
     a0c:	str	w6, [sp, #72]
     a10:	str	w7, [sp, #28]
     a14:	str	q0, [sp, #80]
     a18:	str	q1, [sp, #96]
     a1c:	str	q2, [sp, #112]
     a20:	str	q3, [sp, #128]
     a24:	str	q4, [sp, #144]
     a28:	str	q5, [sp, #160]
     a2c:	str	q6, [sp, #176]
     a30:	str	q7, [sp, #192]
     a34:	mov	w0, #0x2                   	// #2
     a38:	bl	0 <goacc_save_and_set_bind>
     a3c:	ldr	x1, [sp, #64]
     a40:	ldr	x0, [sp, #48]
     a44:	blr	x1
     a48:	bl	0 <goacc_restore_bind>
     a4c:	nop
     a50:	ldp	x29, x30, [sp], #208
     a54:	ret

0000000000000a58 <GOACC_data_start>:
     a58:	stp	x29, x30, [sp, #-96]!
     a5c:	mov	x29, sp
     a60:	str	w0, [sp, #60]
     a64:	str	x1, [sp, #48]
     a68:	str	x2, [sp, #40]
     a6c:	str	x3, [sp, #32]
     a70:	str	x4, [sp, #24]
     a74:	ldr	w0, [sp, #60]
     a78:	mvn	w0, w0
     a7c:	str	w0, [sp, #92]
     a80:	adrp	x0, 0 <gomp_debug_var>
     a84:	add	x0, x0, #0x0
     a88:	ldr	w0, [x0]
     a8c:	sxtw	x0, w0
     a90:	cmp	x0, #0x0
     a94:	b.eq	ac0 <GOACC_data_start+0x68>  // b.none
     a98:	ldr	x6, [sp, #24]
     a9c:	ldr	x5, [sp, #32]
     aa0:	ldr	x4, [sp, #40]
     aa4:	ldr	x3, [sp, #48]
     aa8:	adrp	x0, 0 <gomp_mutex_lock>
     aac:	add	x2, x0, #0x0
     ab0:	adrp	x0, 0 <gomp_mutex_lock>
     ab4:	add	x1, x0, #0x0
     ab8:	mov	w0, #0x0                   	// #0
     abc:	bl	0 <gomp_debug>
     ac0:	bl	0 <goacc_lazy_initialize>
     ac4:	bl	d4 <goacc_thread>
     ac8:	str	x0, [sp, #80]
     acc:	ldr	x0, [sp, #80]
     ad0:	ldr	x0, [x0, #8]
     ad4:	str	x0, [sp, #72]
     ad8:	ldr	x0, [sp, #72]
     adc:	ldr	w0, [x0, #8]
     ae0:	and	w0, w0, #0x1
     ae4:	cmp	w0, #0x0
     ae8:	b.ne	afc <GOACC_data_start+0xa4>  // b.any
     aec:	ldr	w0, [sp, #92]
     af0:	and	w0, w0, #0x1
     af4:	cmp	w0, #0x0
     af8:	b.eq	b44 <GOACC_data_start+0xec>  // b.none
     afc:	mov	w7, #0x0                   	// #0
     b00:	mov	w6, #0x1                   	// #1
     b04:	mov	x5, #0x0                   	// #0
     b08:	mov	x4, #0x0                   	// #0
     b0c:	mov	x3, #0x0                   	// #0
     b10:	mov	x2, #0x0                   	// #0
     b14:	mov	x1, #0x0                   	// #0
     b18:	mov	x0, #0x0                   	// #0
     b1c:	bl	0 <gomp_map_vars>
     b20:	str	x0, [sp, #64]
     b24:	ldr	x0, [sp, #80]
     b28:	ldr	x1, [x0, #24]
     b2c:	ldr	x0, [sp, #64]
     b30:	str	x1, [x0, #40]
     b34:	ldr	x0, [sp, #80]
     b38:	ldr	x1, [sp, #64]
     b3c:	str	x1, [x0, #24]
     b40:	b	be8 <GOACC_data_start+0x190>
     b44:	adrp	x0, 0 <gomp_debug_var>
     b48:	add	x0, x0, #0x0
     b4c:	ldr	w0, [x0]
     b50:	sxtw	x0, w0
     b54:	cmp	x0, #0x0
     b58:	b.eq	b74 <GOACC_data_start+0x11c>  // b.none
     b5c:	adrp	x0, 0 <gomp_mutex_lock>
     b60:	add	x2, x0, #0x0
     b64:	adrp	x0, 0 <gomp_mutex_lock>
     b68:	add	x1, x0, #0x0
     b6c:	mov	w0, #0x0                   	// #0
     b70:	bl	0 <gomp_debug>
     b74:	mov	w7, #0x0                   	// #0
     b78:	mov	w6, #0x1                   	// #1
     b7c:	ldr	x5, [sp, #24]
     b80:	ldr	x4, [sp, #32]
     b84:	mov	x3, #0x0                   	// #0
     b88:	ldr	x2, [sp, #40]
     b8c:	ldr	x1, [sp, #48]
     b90:	ldr	x0, [sp, #72]
     b94:	bl	0 <gomp_map_vars>
     b98:	str	x0, [sp, #64]
     b9c:	adrp	x0, 0 <gomp_debug_var>
     ba0:	add	x0, x0, #0x0
     ba4:	ldr	w0, [x0]
     ba8:	sxtw	x0, w0
     bac:	cmp	x0, #0x0
     bb0:	b.eq	bcc <GOACC_data_start+0x174>  // b.none
     bb4:	adrp	x0, 0 <gomp_mutex_lock>
     bb8:	add	x2, x0, #0x0
     bbc:	adrp	x0, 0 <gomp_mutex_lock>
     bc0:	add	x1, x0, #0x0
     bc4:	mov	w0, #0x0                   	// #0
     bc8:	bl	0 <gomp_debug>
     bcc:	ldr	x0, [sp, #80]
     bd0:	ldr	x1, [x0, #24]
     bd4:	ldr	x0, [sp, #64]
     bd8:	str	x1, [x0, #40]
     bdc:	ldr	x0, [sp, #80]
     be0:	ldr	x1, [sp, #64]
     be4:	str	x1, [x0, #24]
     be8:	ldp	x29, x30, [sp], #96
     bec:	ret

0000000000000bf0 <GOACC_data_end>:
     bf0:	stp	x29, x30, [sp, #-32]!
     bf4:	mov	x29, sp
     bf8:	bl	d4 <goacc_thread>
     bfc:	str	x0, [sp, #24]
     c00:	ldr	x0, [sp, #24]
     c04:	ldr	x0, [x0, #24]
     c08:	str	x0, [sp, #16]
     c0c:	adrp	x0, 0 <gomp_debug_var>
     c10:	add	x0, x0, #0x0
     c14:	ldr	w0, [x0]
     c18:	sxtw	x0, w0
     c1c:	cmp	x0, #0x0
     c20:	b.eq	c3c <GOACC_data_end+0x4c>  // b.none
     c24:	adrp	x0, 0 <gomp_mutex_lock>
     c28:	add	x2, x0, #0x0
     c2c:	adrp	x0, 0 <gomp_mutex_lock>
     c30:	add	x1, x0, #0x0
     c34:	mov	w0, #0x0                   	// #0
     c38:	bl	0 <gomp_debug>
     c3c:	ldr	x0, [sp, #16]
     c40:	ldr	x1, [x0, #40]
     c44:	ldr	x0, [sp, #24]
     c48:	str	x1, [x0, #24]
     c4c:	mov	w1, #0x1                   	// #1
     c50:	ldr	x0, [sp, #16]
     c54:	bl	0 <gomp_unmap_vars>
     c58:	adrp	x0, 0 <gomp_debug_var>
     c5c:	add	x0, x0, #0x0
     c60:	ldr	w0, [x0]
     c64:	sxtw	x0, w0
     c68:	cmp	x0, #0x0
     c6c:	b.eq	c88 <GOACC_data_end+0x98>  // b.none
     c70:	adrp	x0, 0 <gomp_mutex_lock>
     c74:	add	x2, x0, #0x0
     c78:	adrp	x0, 0 <gomp_mutex_lock>
     c7c:	add	x1, x0, #0x0
     c80:	mov	w0, #0x0                   	// #0
     c84:	bl	0 <gomp_debug>
     c88:	nop
     c8c:	ldp	x29, x30, [sp], #32
     c90:	ret

0000000000000c94 <GOACC_enter_exit_data>:
     c94:	stp	x29, x30, [sp, #-304]!
     c98:	mov	x29, sp
     c9c:	str	w0, [sp, #60]
     ca0:	str	x1, [sp, #48]
     ca4:	str	x2, [sp, #40]
     ca8:	str	x3, [sp, #32]
     cac:	str	x4, [sp, #24]
     cb0:	str	w5, [sp, #56]
     cb4:	str	w6, [sp, #20]
     cb8:	str	x7, [sp, #296]
     cbc:	str	q0, [sp, #160]
     cc0:	str	q1, [sp, #176]
     cc4:	str	q2, [sp, #192]
     cc8:	str	q3, [sp, #208]
     ccc:	str	q4, [sp, #224]
     cd0:	str	q5, [sp, #240]
     cd4:	str	q6, [sp, #256]
     cd8:	str	q7, [sp, #272]
     cdc:	ldr	w0, [sp, #60]
     ce0:	mvn	w0, w0
     ce4:	str	w0, [sp, #136]
     ce8:	strb	wzr, [sp, #159]
     cec:	bl	0 <goacc_lazy_initialize>
     cf0:	bl	d4 <goacc_thread>
     cf4:	str	x0, [sp, #128]
     cf8:	ldr	x0, [sp, #128]
     cfc:	ldr	x0, [x0, #8]
     d00:	str	x0, [sp, #120]
     d04:	ldr	x0, [sp, #120]
     d08:	ldr	w0, [x0, #8]
     d0c:	and	w0, w0, #0x1
     d10:	cmp	w0, #0x0
     d14:	b.ne	12ac <GOACC_enter_exit_data+0x618>  // b.any
     d18:	ldr	w0, [sp, #136]
     d1c:	and	w0, w0, #0x1
     d20:	cmp	w0, #0x0
     d24:	b.ne	12ac <GOACC_enter_exit_data+0x618>  // b.any
     d28:	ldr	w0, [sp, #20]
     d2c:	cmp	w0, #0x0
     d30:	b.eq	d70 <GOACC_enter_exit_data+0xdc>  // b.none
     d34:	add	x0, sp, #0x130
     d38:	str	x0, [sp, #72]
     d3c:	add	x0, sp, #0x130
     d40:	str	x0, [sp, #80]
     d44:	add	x0, sp, #0x120
     d48:	str	x0, [sp, #88]
     d4c:	mov	w0, #0xfffffff8            	// #-8
     d50:	str	w0, [sp, #96]
     d54:	mov	w0, #0xffffff80            	// #-128
     d58:	str	w0, [sp, #100]
     d5c:	add	x0, sp, #0x48
     d60:	mov	x2, x0
     d64:	ldr	w1, [sp, #20]
     d68:	ldr	w0, [sp, #56]
     d6c:	bl	12b8 <goacc_wait>
     d70:	strb	wzr, [sp, #143]
     d74:	ldr	x0, [sp, #48]
     d78:	cmp	x0, #0x0
     d7c:	b.eq	dac <GOACC_enter_exit_data+0x118>  // b.none
     d80:	ldr	x0, [sp, #24]
     d84:	ldrh	w0, [x0]
     d88:	strb	w0, [sp, #119]
     d8c:	ldrb	w0, [sp, #119]
     d90:	cmp	w0, #0x7
     d94:	b.eq	da4 <GOACC_enter_exit_data+0x110>  // b.none
     d98:	ldrb	w0, [sp, #119]
     d9c:	cmp	w0, #0x82
     da0:	b.ne	dac <GOACC_enter_exit_data+0x118>  // b.any
     da4:	mov	w0, #0x1                   	// #1
     da8:	strb	w0, [sp, #143]
     dac:	ldr	x0, [sp, #120]
     db0:	ldr	x1, [x0, #248]
     db4:	ldr	w0, [sp, #56]
     db8:	blr	x1
     dbc:	str	xzr, [sp, #144]
     dc0:	b	e90 <GOACC_enter_exit_data+0x1fc>
     dc4:	ldr	x0, [sp, #144]
     dc8:	lsl	x0, x0, #1
     dcc:	ldr	x1, [sp, #24]
     dd0:	add	x0, x1, x0
     dd4:	ldrh	w0, [x0]
     dd8:	strb	w0, [sp, #118]
     ddc:	ldrb	w0, [sp, #118]
     de0:	cmp	w0, #0x4
     de4:	b.eq	df4 <GOACC_enter_exit_data+0x160>  // b.none
     de8:	ldrb	w0, [sp, #118]
     dec:	cmp	w0, #0x5
     df0:	b.ne	e04 <GOACC_enter_exit_data+0x170>  // b.any
     df4:	ldr	x0, [sp, #144]
     df8:	add	x0, x0, #0x1
     dfc:	str	x0, [sp, #144]
     e00:	b	e90 <GOACC_enter_exit_data+0x1fc>
     e04:	ldrb	w0, [sp, #118]
     e08:	cmp	w0, #0x80
     e0c:	b.eq	e40 <GOACC_enter_exit_data+0x1ac>  // b.none
     e10:	ldrb	w0, [sp, #118]
     e14:	cmp	w0, #0x6
     e18:	b.eq	e40 <GOACC_enter_exit_data+0x1ac>  // b.none
     e1c:	ldrb	w0, [sp, #118]
     e20:	cmp	w0, #0x81
     e24:	b.eq	e40 <GOACC_enter_exit_data+0x1ac>  // b.none
     e28:	ldrb	w0, [sp, #118]
     e2c:	cmp	w0, #0x1
     e30:	b.eq	e40 <GOACC_enter_exit_data+0x1ac>  // b.none
     e34:	ldrb	w0, [sp, #118]
     e38:	cmp	w0, #0x0
     e3c:	b.ne	e4c <GOACC_enter_exit_data+0x1b8>  // b.any
     e40:	mov	w0, #0x1                   	// #1
     e44:	strb	w0, [sp, #159]
     e48:	b	ea0 <GOACC_enter_exit_data+0x20c>
     e4c:	ldrb	w0, [sp, #118]
     e50:	cmp	w0, #0x17
     e54:	b.eq	ea0 <GOACC_enter_exit_data+0x20c>  // b.none
     e58:	ldrb	w0, [sp, #118]
     e5c:	cmp	w0, #0x7
     e60:	b.eq	ea0 <GOACC_enter_exit_data+0x20c>  // b.none
     e64:	ldrb	w0, [sp, #118]
     e68:	cmp	w0, #0x2
     e6c:	b.eq	ea0 <GOACC_enter_exit_data+0x20c>  // b.none
     e70:	ldrb	w0, [sp, #118]
     e74:	cmp	w0, #0x82
     e78:	b.eq	ea0 <GOACC_enter_exit_data+0x20c>  // b.none
     e7c:	ldrb	w0, [sp, #118]
     e80:	mov	w1, w0
     e84:	adrp	x0, 0 <gomp_mutex_lock>
     e88:	add	x0, x0, #0x0
     e8c:	bl	0 <gomp_fatal>
     e90:	ldr	x1, [sp, #144]
     e94:	ldr	x0, [sp, #48]
     e98:	cmp	x1, x0
     e9c:	b.cc	dc4 <GOACC_enter_exit_data+0x130>  // b.lo, b.ul, b.last
     ea0:	ldrb	w0, [sp, #159]
     ea4:	cmp	w0, #0x0
     ea8:	b.eq	1024 <GOACC_enter_exit_data+0x390>  // b.none
     eac:	str	xzr, [sp, #144]
     eb0:	b	1010 <GOACC_enter_exit_data+0x37c>
     eb4:	ldr	x0, [sp, #144]
     eb8:	lsl	x0, x0, #1
     ebc:	ldr	x1, [sp, #24]
     ec0:	add	x0, x1, x0
     ec4:	ldrh	w0, [x0]
     ec8:	strb	w0, [sp, #110]
     ecc:	ldr	x0, [sp, #144]
     ed0:	ldr	x2, [sp, #24]
     ed4:	ldr	x1, [sp, #48]
     ed8:	bl	1a8 <find_pointer>
     edc:	str	w0, [sp, #104]
     ee0:	ldr	w0, [sp, #104]
     ee4:	cmp	w0, #0x0
     ee8:	b.ne	fa8 <GOACC_enter_exit_data+0x314>  // b.any
     eec:	ldrb	w0, [sp, #110]
     ef0:	cmp	w0, #0x81
     ef4:	b.eq	f5c <GOACC_enter_exit_data+0x2c8>  // b.none
     ef8:	cmp	w0, #0x81
     efc:	b.gt	f94 <GOACC_enter_exit_data+0x300>
     f00:	cmp	w0, #0x80
     f04:	b.eq	f24 <GOACC_enter_exit_data+0x290>  // b.none
     f08:	cmp	w0, #0x80
     f0c:	b.gt	f94 <GOACC_enter_exit_data+0x300>
     f10:	cmp	w0, #0x0
     f14:	b.eq	f24 <GOACC_enter_exit_data+0x290>  // b.none
     f18:	cmp	w0, #0x1
     f1c:	b.eq	f5c <GOACC_enter_exit_data+0x2c8>  // b.none
     f20:	b	f94 <GOACC_enter_exit_data+0x300>
     f24:	ldr	x0, [sp, #144]
     f28:	lsl	x0, x0, #3
     f2c:	ldr	x1, [sp, #40]
     f30:	add	x0, x1, x0
     f34:	ldr	x2, [x0]
     f38:	ldr	x0, [sp, #144]
     f3c:	lsl	x0, x0, #3
     f40:	ldr	x1, [sp, #32]
     f44:	add	x0, x1, x0
     f48:	ldr	x0, [x0]
     f4c:	mov	x1, x0
     f50:	mov	x0, x2
     f54:	bl	0 <acc_create>
     f58:	b	1004 <GOACC_enter_exit_data+0x370>
     f5c:	ldr	x0, [sp, #144]
     f60:	lsl	x0, x0, #3
     f64:	ldr	x1, [sp, #40]
     f68:	add	x0, x1, x0
     f6c:	ldr	x2, [x0]
     f70:	ldr	x0, [sp, #144]
     f74:	lsl	x0, x0, #3
     f78:	ldr	x1, [sp, #32]
     f7c:	add	x0, x1, x0
     f80:	ldr	x0, [x0]
     f84:	mov	x1, x0
     f88:	mov	x0, x2
     f8c:	bl	0 <acc_copyin>
     f90:	b	1004 <GOACC_enter_exit_data+0x370>
     f94:	ldrb	w0, [sp, #110]
     f98:	mov	w1, w0
     f9c:	adrp	x0, 0 <gomp_mutex_lock>
     fa0:	add	x0, x0, #0x0
     fa4:	bl	0 <gomp_fatal>
     fa8:	ldrsw	x4, [sp, #104]
     fac:	ldr	x0, [sp, #144]
     fb0:	lsl	x0, x0, #3
     fb4:	ldr	x1, [sp, #40]
     fb8:	add	x5, x1, x0
     fbc:	ldr	x0, [sp, #144]
     fc0:	lsl	x0, x0, #3
     fc4:	ldr	x1, [sp, #32]
     fc8:	add	x2, x1, x0
     fcc:	ldr	x0, [sp, #144]
     fd0:	lsl	x0, x0, #1
     fd4:	ldr	x1, [sp, #24]
     fd8:	add	x0, x1, x0
     fdc:	mov	x3, x0
     fe0:	mov	x1, x5
     fe4:	mov	x0, x4
     fe8:	bl	0 <gomp_acc_insert_pointer>
     fec:	ldr	w0, [sp, #104]
     ff0:	sub	w0, w0, #0x1
     ff4:	sxtw	x0, w0
     ff8:	ldr	x1, [sp, #144]
     ffc:	add	x0, x1, x0
    1000:	str	x0, [sp, #144]
    1004:	ldr	x0, [sp, #144]
    1008:	add	x0, x0, #0x1
    100c:	str	x0, [sp, #144]
    1010:	ldr	x1, [sp, #144]
    1014:	ldr	x0, [sp, #48]
    1018:	cmp	x1, x0
    101c:	b.cc	eb4 <GOACC_enter_exit_data+0x220>  // b.lo, b.ul, b.last
    1020:	b	1298 <GOACC_enter_exit_data+0x604>
    1024:	str	xzr, [sp, #144]
    1028:	b	1288 <GOACC_enter_exit_data+0x5f4>
    102c:	ldr	x0, [sp, #144]
    1030:	lsl	x0, x0, #1
    1034:	ldr	x1, [sp, #24]
    1038:	add	x0, x1, x0
    103c:	ldrh	w0, [x0]
    1040:	strb	w0, [sp, #117]
    1044:	ldr	x0, [sp, #144]
    1048:	ldr	x2, [sp, #24]
    104c:	ldr	x1, [sp, #48]
    1050:	bl	1a8 <find_pointer>
    1054:	str	w0, [sp, #112]
    1058:	ldr	w0, [sp, #112]
    105c:	cmp	w0, #0x0
    1060:	b.ne	11e0 <GOACC_enter_exit_data+0x54c>  // b.any
    1064:	ldrb	w0, [sp, #117]
    1068:	cmp	w0, #0x82
    106c:	b.eq	1150 <GOACC_enter_exit_data+0x4bc>  // b.none
    1070:	cmp	w0, #0x82
    1074:	b.gt	11cc <GOACC_enter_exit_data+0x538>
    1078:	cmp	w0, #0x17
    107c:	b.eq	1098 <GOACC_enter_exit_data+0x404>  // b.none
    1080:	cmp	w0, #0x17
    1084:	b.gt	11cc <GOACC_enter_exit_data+0x538>
    1088:	cmp	w0, #0x2
    108c:	b.eq	1150 <GOACC_enter_exit_data+0x4bc>  // b.none
    1090:	cmp	w0, #0x7
    1094:	b.ne	11cc <GOACC_enter_exit_data+0x538>  // b.any
    1098:	ldr	x0, [sp, #144]
    109c:	lsl	x0, x0, #3
    10a0:	ldr	x1, [sp, #40]
    10a4:	add	x0, x1, x0
    10a8:	ldr	x2, [x0]
    10ac:	ldr	x0, [sp, #144]
    10b0:	lsl	x0, x0, #3
    10b4:	ldr	x1, [sp, #32]
    10b8:	add	x0, x1, x0
    10bc:	ldr	x0, [x0]
    10c0:	mov	x1, x0
    10c4:	mov	x0, x2
    10c8:	bl	0 <acc_is_present>
    10cc:	cmp	w0, #0x0
    10d0:	b.eq	1278 <GOACC_enter_exit_data+0x5e4>  // b.none
    10d4:	ldrb	w0, [sp, #143]
    10d8:	cmp	w0, #0x0
    10dc:	b.eq	1118 <GOACC_enter_exit_data+0x484>  // b.none
    10e0:	ldr	x0, [sp, #144]
    10e4:	lsl	x0, x0, #3
    10e8:	ldr	x1, [sp, #40]
    10ec:	add	x0, x1, x0
    10f0:	ldr	x2, [x0]
    10f4:	ldr	x0, [sp, #144]
    10f8:	lsl	x0, x0, #3
    10fc:	ldr	x1, [sp, #32]
    1100:	add	x0, x1, x0
    1104:	ldr	x0, [x0]
    1108:	mov	x1, x0
    110c:	mov	x0, x2
    1110:	bl	0 <acc_delete_finalize>
    1114:	b	1278 <GOACC_enter_exit_data+0x5e4>
    1118:	ldr	x0, [sp, #144]
    111c:	lsl	x0, x0, #3
    1120:	ldr	x1, [sp, #40]
    1124:	add	x0, x1, x0
    1128:	ldr	x2, [x0]
    112c:	ldr	x0, [sp, #144]
    1130:	lsl	x0, x0, #3
    1134:	ldr	x1, [sp, #32]
    1138:	add	x0, x1, x0
    113c:	ldr	x0, [x0]
    1140:	mov	x1, x0
    1144:	mov	x0, x2
    1148:	bl	0 <acc_delete>
    114c:	b	1278 <GOACC_enter_exit_data+0x5e4>
    1150:	ldrb	w0, [sp, #143]
    1154:	cmp	w0, #0x0
    1158:	b.eq	1194 <GOACC_enter_exit_data+0x500>  // b.none
    115c:	ldr	x0, [sp, #144]
    1160:	lsl	x0, x0, #3
    1164:	ldr	x1, [sp, #40]
    1168:	add	x0, x1, x0
    116c:	ldr	x2, [x0]
    1170:	ldr	x0, [sp, #144]
    1174:	lsl	x0, x0, #3
    1178:	ldr	x1, [sp, #32]
    117c:	add	x0, x1, x0
    1180:	ldr	x0, [x0]
    1184:	mov	x1, x0
    1188:	mov	x0, x2
    118c:	bl	0 <acc_copyout_finalize>
    1190:	b	127c <GOACC_enter_exit_data+0x5e8>
    1194:	ldr	x0, [sp, #144]
    1198:	lsl	x0, x0, #3
    119c:	ldr	x1, [sp, #40]
    11a0:	add	x0, x1, x0
    11a4:	ldr	x2, [x0]
    11a8:	ldr	x0, [sp, #144]
    11ac:	lsl	x0, x0, #3
    11b0:	ldr	x1, [sp, #32]
    11b4:	add	x0, x1, x0
    11b8:	ldr	x0, [x0]
    11bc:	mov	x1, x0
    11c0:	mov	x0, x2
    11c4:	bl	0 <acc_copyout>
    11c8:	b	127c <GOACC_enter_exit_data+0x5e8>
    11cc:	ldrb	w0, [sp, #117]
    11d0:	mov	w1, w0
    11d4:	adrp	x0, 0 <gomp_mutex_lock>
    11d8:	add	x0, x0, #0x0
    11dc:	bl	0 <gomp_fatal>
    11e0:	ldrb	w0, [sp, #117]
    11e4:	cmp	w0, #0x82
    11e8:	b.eq	11f8 <GOACC_enter_exit_data+0x564>  // b.none
    11ec:	ldrb	w0, [sp, #117]
    11f0:	cmp	w0, #0x2
    11f4:	b.ne	1200 <GOACC_enter_exit_data+0x56c>  // b.any
    11f8:	mov	w0, #0x1                   	// #1
    11fc:	b	1204 <GOACC_enter_exit_data+0x570>
    1200:	mov	w0, #0x0                   	// #0
    1204:	strb	w0, [sp, #111]
    1208:	ldrb	w0, [sp, #111]
    120c:	and	w0, w0, #0x1
    1210:	strb	w0, [sp, #111]
    1214:	ldr	x0, [sp, #144]
    1218:	lsl	x0, x0, #3
    121c:	ldr	x1, [sp, #40]
    1220:	add	x0, x1, x0
    1224:	ldr	x6, [x0]
    1228:	ldr	x0, [sp, #144]
    122c:	lsl	x0, x0, #3
    1230:	ldr	x1, [sp, #32]
    1234:	add	x0, x1, x0
    1238:	ldr	x0, [x0]
    123c:	ldrb	w1, [sp, #143]
    1240:	ldr	w5, [sp, #112]
    1244:	mov	w4, w1
    1248:	ldr	w3, [sp, #56]
    124c:	ldrb	w2, [sp, #111]
    1250:	mov	x1, x0
    1254:	mov	x0, x6
    1258:	bl	0 <gomp_acc_remove_pointer>
    125c:	ldr	w0, [sp, #112]
    1260:	sub	w0, w0, #0x1
    1264:	sxtw	x0, w0
    1268:	ldr	x1, [sp, #144]
    126c:	add	x0, x1, x0
    1270:	str	x0, [sp, #144]
    1274:	b	127c <GOACC_enter_exit_data+0x5e8>
    1278:	nop
    127c:	ldr	x0, [sp, #144]
    1280:	add	x0, x0, #0x1
    1284:	str	x0, [sp, #144]
    1288:	ldr	x1, [sp, #144]
    128c:	ldr	x0, [sp, #48]
    1290:	cmp	x1, x0
    1294:	b.cc	102c <GOACC_enter_exit_data+0x398>  // b.lo, b.ul, b.last
    1298:	ldr	x0, [sp, #120]
    129c:	ldr	x1, [x0, #248]
    12a0:	mov	w0, #0xfffffffe            	// #-2
    12a4:	blr	x1
    12a8:	b	12b0 <GOACC_enter_exit_data+0x61c>
    12ac:	nop
    12b0:	ldp	x29, x30, [sp], #304
    12b4:	ret

00000000000012b8 <goacc_wait>:
    12b8:	stp	x29, x30, [sp, #-48]!
    12bc:	mov	x29, sp
    12c0:	str	w0, [sp, #28]
    12c4:	str	w1, [sp, #24]
    12c8:	str	x2, [sp, #16]
    12cc:	b	13b8 <goacc_wait+0x100>
    12d0:	ldr	x0, [sp, #16]
    12d4:	ldr	w1, [x0, #24]
    12d8:	ldr	x0, [sp, #16]
    12dc:	ldr	x0, [x0]
    12e0:	cmp	w1, #0x0
    12e4:	b.lt	12fc <goacc_wait+0x44>  // b.tstop
    12e8:	add	x1, x0, #0xb
    12ec:	and	x2, x1, #0xfffffffffffffff8
    12f0:	ldr	x1, [sp, #16]
    12f4:	str	x2, [x1]
    12f8:	b	133c <goacc_wait+0x84>
    12fc:	add	w3, w1, #0x8
    1300:	ldr	x2, [sp, #16]
    1304:	str	w3, [x2, #24]
    1308:	ldr	x2, [sp, #16]
    130c:	ldr	w2, [x2, #24]
    1310:	cmp	w2, #0x0
    1314:	b.le	132c <goacc_wait+0x74>
    1318:	add	x1, x0, #0xb
    131c:	and	x2, x1, #0xfffffffffffffff8
    1320:	ldr	x1, [sp, #16]
    1324:	str	x2, [x1]
    1328:	b	133c <goacc_wait+0x84>
    132c:	ldr	x0, [sp, #16]
    1330:	ldr	x2, [x0, #8]
    1334:	sxtw	x0, w1
    1338:	add	x0, x2, x0
    133c:	ldr	w0, [x0]
    1340:	str	w0, [sp, #44]
    1344:	ldr	w0, [sp, #44]
    1348:	cmn	w0, #0x1
    134c:	b.ne	1370 <goacc_wait+0xb8>  // b.any
    1350:	ldr	w0, [sp, #28]
    1354:	cmn	w0, #0x2
    1358:	b.ne	1364 <goacc_wait+0xac>  // b.any
    135c:	bl	0 <acc_wait_all>
    1360:	b	13d0 <goacc_wait+0x118>
    1364:	ldr	w0, [sp, #28]
    1368:	bl	0 <acc_wait_all_async>
    136c:	b	13d0 <goacc_wait+0x118>
    1370:	ldr	w0, [sp, #44]
    1374:	bl	0 <acc_async_test>
    1378:	cmp	w0, #0x0
    137c:	b.eq	1384 <goacc_wait+0xcc>  // b.none
    1380:	b	13b8 <goacc_wait+0x100>
    1384:	ldr	w0, [sp, #28]
    1388:	cmn	w0, #0x2
    138c:	b.ne	139c <goacc_wait+0xe4>  // b.any
    1390:	ldr	w0, [sp, #44]
    1394:	bl	0 <acc_wait>
    1398:	b	13b8 <goacc_wait+0x100>
    139c:	ldr	w1, [sp, #44]
    13a0:	ldr	w0, [sp, #28]
    13a4:	cmp	w1, w0
    13a8:	b.eq	13b8 <goacc_wait+0x100>  // b.none
    13ac:	ldr	w1, [sp, #28]
    13b0:	ldr	w0, [sp, #44]
    13b4:	bl	0 <acc_wait_async>
    13b8:	ldr	w0, [sp, #24]
    13bc:	sub	w1, w0, #0x1
    13c0:	str	w1, [sp, #24]
    13c4:	cmp	w0, #0x0
    13c8:	b.ne	12d0 <goacc_wait+0x18>  // b.any
    13cc:	nop
    13d0:	nop
    13d4:	ldp	x29, x30, [sp], #48
    13d8:	ret

00000000000013dc <GOACC_update>:
    13dc:	stp	x29, x30, [sp, #-304]!
    13e0:	mov	x29, sp
    13e4:	str	w0, [sp, #60]
    13e8:	str	x1, [sp, #48]
    13ec:	str	x2, [sp, #40]
    13f0:	str	x3, [sp, #32]
    13f4:	str	x4, [sp, #24]
    13f8:	str	w5, [sp, #56]
    13fc:	str	w6, [sp, #20]
    1400:	str	x7, [sp, #296]
    1404:	str	q0, [sp, #160]
    1408:	str	q1, [sp, #176]
    140c:	str	q2, [sp, #192]
    1410:	str	q3, [sp, #208]
    1414:	str	q4, [sp, #224]
    1418:	str	q5, [sp, #240]
    141c:	str	q6, [sp, #256]
    1420:	str	q7, [sp, #272]
    1424:	ldr	w0, [sp, #60]
    1428:	mvn	w0, w0
    142c:	str	w0, [sp, #144]
    1430:	bl	0 <goacc_lazy_initialize>
    1434:	bl	d4 <goacc_thread>
    1438:	str	x0, [sp, #136]
    143c:	ldr	x0, [sp, #136]
    1440:	ldr	x0, [x0, #8]
    1444:	str	x0, [sp, #128]
    1448:	ldr	x0, [sp, #128]
    144c:	ldr	w0, [x0, #8]
    1450:	and	w0, w0, #0x1
    1454:	cmp	w0, #0x0
    1458:	b.ne	1738 <GOACC_update+0x35c>  // b.any
    145c:	ldr	w0, [sp, #144]
    1460:	and	w0, w0, #0x1
    1464:	cmp	w0, #0x0
    1468:	b.ne	1738 <GOACC_update+0x35c>  // b.any
    146c:	ldr	w0, [sp, #20]
    1470:	cmp	w0, #0x0
    1474:	b.eq	14b4 <GOACC_update+0xd8>  // b.none
    1478:	add	x0, sp, #0x130
    147c:	str	x0, [sp, #72]
    1480:	add	x0, sp, #0x130
    1484:	str	x0, [sp, #80]
    1488:	add	x0, sp, #0x120
    148c:	str	x0, [sp, #88]
    1490:	mov	w0, #0xfffffff8            	// #-8
    1494:	str	w0, [sp, #96]
    1498:	mov	w0, #0xffffff80            	// #-128
    149c:	str	w0, [sp, #100]
    14a0:	add	x0, sp, #0x48
    14a4:	mov	x2, x0
    14a8:	ldr	w1, [sp, #20]
    14ac:	ldr	w0, [sp, #56]
    14b0:	bl	12b8 <goacc_wait>
    14b4:	ldr	x0, [sp, #128]
    14b8:	ldr	x1, [x0, #248]
    14bc:	ldr	w0, [sp, #56]
    14c0:	blr	x1
    14c4:	strb	wzr, [sp, #151]
    14c8:	str	xzr, [sp, #152]
    14cc:	b	1714 <GOACC_update+0x338>
    14d0:	ldr	x0, [sp, #152]
    14d4:	lsl	x0, x0, #1
    14d8:	ldr	x1, [sp, #24]
    14dc:	add	x0, x1, x0
    14e0:	ldrh	w0, [x0]
    14e4:	strb	w0, [sp, #127]
    14e8:	ldrb	w0, [sp, #127]
    14ec:	cmp	w0, #0x82
    14f0:	b.eq	16ac <GOACC_update+0x2d0>  // b.none
    14f4:	cmp	w0, #0x82
    14f8:	b.gt	16e8 <GOACC_update+0x30c>
    14fc:	cmp	w0, #0x81
    1500:	b.eq	1628 <GOACC_update+0x24c>  // b.none
    1504:	cmp	w0, #0x81
    1508:	b.gt	16e8 <GOACC_update+0x30c>
    150c:	cmp	w0, #0x1d
    1510:	b.eq	1540 <GOACC_update+0x164>  // b.none
    1514:	cmp	w0, #0x1d
    1518:	b.gt	16e8 <GOACC_update+0x30c>
    151c:	cmp	w0, #0x5
    1520:	b.gt	16e8 <GOACC_update+0x30c>
    1524:	cmp	w0, #0x4
    1528:	b.ge	16fc <GOACC_update+0x320>  // b.tcont
    152c:	cmp	w0, #0x1
    1530:	b.eq	15e4 <GOACC_update+0x208>  // b.none
    1534:	cmp	w0, #0x2
    1538:	b.eq	1668 <GOACC_update+0x28c>  // b.none
    153c:	b	16e8 <GOACC_update+0x30c>
    1540:	ldrb	w0, [sp, #151]
    1544:	cmp	w0, #0x0
    1548:	b.eq	1704 <GOACC_update+0x328>  // b.none
    154c:	ldr	x0, [sp, #152]
    1550:	lsl	x0, x0, #3
    1554:	sub	x0, x0, #0x8
    1558:	ldr	x1, [sp, #40]
    155c:	add	x0, x1, x0
    1560:	ldr	x0, [x0]
    1564:	bl	0 <acc_deviceptr>
    1568:	str	x0, [sp, #112]
    156c:	ldr	x0, [sp, #152]
    1570:	lsl	x0, x0, #3
    1574:	ldr	x1, [sp, #40]
    1578:	add	x0, x1, x0
    157c:	ldr	x0, [x0]
    1580:	ldr	x0, [x0]
    1584:	str	x0, [sp, #104]
    1588:	ldr	x0, [sp, #152]
    158c:	lsl	x0, x0, #3
    1590:	ldr	x1, [sp, #40]
    1594:	add	x0, x1, x0
    1598:	ldr	x0, [x0]
    159c:	ldr	x1, [sp, #112]
    15a0:	str	x1, [x0]
    15a4:	ldr	x0, [sp, #152]
    15a8:	lsl	x0, x0, #3
    15ac:	ldr	x1, [sp, #40]
    15b0:	add	x0, x1, x0
    15b4:	ldr	x0, [x0]
    15b8:	mov	x1, #0x8                   	// #8
    15bc:	bl	0 <acc_update_device>
    15c0:	ldr	x0, [sp, #152]
    15c4:	lsl	x0, x0, #3
    15c8:	ldr	x1, [sp, #40]
    15cc:	add	x0, x1, x0
    15d0:	ldr	x0, [x0]
    15d4:	ldr	x1, [sp, #104]
    15d8:	str	x1, [x0]
    15dc:	strb	wzr, [sp, #151]
    15e0:	b	1704 <GOACC_update+0x328>
    15e4:	ldr	x0, [sp, #152]
    15e8:	lsl	x0, x0, #3
    15ec:	ldr	x1, [sp, #40]
    15f0:	add	x0, x1, x0
    15f4:	ldr	x2, [x0]
    15f8:	ldr	x0, [sp, #152]
    15fc:	lsl	x0, x0, #3
    1600:	ldr	x1, [sp, #32]
    1604:	add	x0, x1, x0
    1608:	ldr	x0, [x0]
    160c:	mov	x1, x0
    1610:	mov	x0, x2
    1614:	bl	0 <acc_is_present>
    1618:	cmp	w0, #0x0
    161c:	b.ne	1628 <GOACC_update+0x24c>  // b.any
    1620:	strb	wzr, [sp, #151]
    1624:	b	1708 <GOACC_update+0x32c>
    1628:	mov	w0, #0x1                   	// #1
    162c:	strb	w0, [sp, #151]
    1630:	ldr	x0, [sp, #152]
    1634:	lsl	x0, x0, #3
    1638:	ldr	x1, [sp, #40]
    163c:	add	x0, x1, x0
    1640:	ldr	x2, [x0]
    1644:	ldr	x0, [sp, #152]
    1648:	lsl	x0, x0, #3
    164c:	ldr	x1, [sp, #32]
    1650:	add	x0, x1, x0
    1654:	ldr	x0, [x0]
    1658:	mov	x1, x0
    165c:	mov	x0, x2
    1660:	bl	0 <acc_update_device>
    1664:	b	1708 <GOACC_update+0x32c>
    1668:	ldr	x0, [sp, #152]
    166c:	lsl	x0, x0, #3
    1670:	ldr	x1, [sp, #40]
    1674:	add	x0, x1, x0
    1678:	ldr	x2, [x0]
    167c:	ldr	x0, [sp, #152]
    1680:	lsl	x0, x0, #3
    1684:	ldr	x1, [sp, #32]
    1688:	add	x0, x1, x0
    168c:	ldr	x0, [x0]
    1690:	mov	x1, x0
    1694:	mov	x0, x2
    1698:	bl	0 <acc_is_present>
    169c:	cmp	w0, #0x0
    16a0:	b.ne	16ac <GOACC_update+0x2d0>  // b.any
    16a4:	strb	wzr, [sp, #151]
    16a8:	b	1708 <GOACC_update+0x32c>
    16ac:	strb	wzr, [sp, #151]
    16b0:	ldr	x0, [sp, #152]
    16b4:	lsl	x0, x0, #3
    16b8:	ldr	x1, [sp, #40]
    16bc:	add	x0, x1, x0
    16c0:	ldr	x2, [x0]
    16c4:	ldr	x0, [sp, #152]
    16c8:	lsl	x0, x0, #3
    16cc:	ldr	x1, [sp, #32]
    16d0:	add	x0, x1, x0
    16d4:	ldr	x0, [x0]
    16d8:	mov	x1, x0
    16dc:	mov	x0, x2
    16e0:	bl	0 <acc_update_self>
    16e4:	b	1708 <GOACC_update+0x32c>
    16e8:	ldrb	w0, [sp, #127]
    16ec:	mov	w1, w0
    16f0:	adrp	x0, 0 <gomp_mutex_lock>
    16f4:	add	x0, x0, #0x0
    16f8:	bl	0 <gomp_fatal>
    16fc:	nop
    1700:	b	1708 <GOACC_update+0x32c>
    1704:	nop
    1708:	ldr	x0, [sp, #152]
    170c:	add	x0, x0, #0x1
    1710:	str	x0, [sp, #152]
    1714:	ldr	x1, [sp, #152]
    1718:	ldr	x0, [sp, #48]
    171c:	cmp	x1, x0
    1720:	b.cc	14d0 <GOACC_update+0xf4>  // b.lo, b.ul, b.last
    1724:	ldr	x0, [sp, #128]
    1728:	ldr	x1, [x0, #248]
    172c:	mov	w0, #0xfffffffe            	// #-2
    1730:	blr	x1
    1734:	b	173c <GOACC_update+0x360>
    1738:	nop
    173c:	ldp	x29, x30, [sp], #304
    1740:	ret

0000000000001744 <GOACC_wait>:
    1744:	stp	x29, x30, [sp, #-240]!
    1748:	mov	x29, sp
    174c:	str	w0, [sp, #28]
    1750:	str	w1, [sp, #24]
    1754:	str	x2, [sp, #192]
    1758:	str	x3, [sp, #200]
    175c:	str	x4, [sp, #208]
    1760:	str	x5, [sp, #216]
    1764:	str	x6, [sp, #224]
    1768:	str	x7, [sp, #232]
    176c:	str	q0, [sp, #64]
    1770:	str	q1, [sp, #80]
    1774:	str	q2, [sp, #96]
    1778:	str	q3, [sp, #112]
    177c:	str	q4, [sp, #128]
    1780:	str	q5, [sp, #144]
    1784:	str	q6, [sp, #160]
    1788:	str	q7, [sp, #176]
    178c:	ldr	w0, [sp, #24]
    1790:	cmp	w0, #0x0
    1794:	b.eq	17d8 <GOACC_wait+0x94>  // b.none
    1798:	add	x0, sp, #0xf0
    179c:	str	x0, [sp, #32]
    17a0:	add	x0, sp, #0xf0
    17a4:	str	x0, [sp, #40]
    17a8:	add	x0, sp, #0xc0
    17ac:	str	x0, [sp, #48]
    17b0:	mov	w0, #0xffffffd0            	// #-48
    17b4:	str	w0, [sp, #56]
    17b8:	mov	w0, #0xffffff80            	// #-128
    17bc:	str	w0, [sp, #60]
    17c0:	add	x0, sp, #0x20
    17c4:	mov	x2, x0
    17c8:	ldr	w1, [sp, #24]
    17cc:	ldr	w0, [sp, #28]
    17d0:	bl	12b8 <goacc_wait>
    17d4:	b	17f4 <GOACC_wait+0xb0>
    17d8:	ldr	w0, [sp, #28]
    17dc:	cmn	w0, #0x2
    17e0:	b.ne	17ec <GOACC_wait+0xa8>  // b.any
    17e4:	bl	0 <acc_wait_all>
    17e8:	b	17f4 <GOACC_wait+0xb0>
    17ec:	ldr	w0, [sp, #28]
    17f0:	bl	0 <acc_wait_all_async>
    17f4:	nop
    17f8:	ldp	x29, x30, [sp], #240
    17fc:	ret

0000000000001800 <GOACC_get_num_threads>:
    1800:	mov	w0, #0x1                   	// #1
    1804:	ret

0000000000001808 <GOACC_get_thread_num>:
    1808:	mov	w0, #0x0                   	// #0
    180c:	ret

0000000000001810 <GOACC_declare>:
    1810:	stp	x29, x30, [sp, #-80]!
    1814:	mov	x29, sp
    1818:	str	w0, [sp, #60]
    181c:	str	x1, [sp, #48]
    1820:	str	x2, [sp, #40]
    1824:	str	x3, [sp, #32]
    1828:	str	x4, [sp, #24]
    182c:	str	wzr, [sp, #76]
    1830:	b	1b18 <GOACC_declare+0x308>
    1834:	ldrsw	x0, [sp, #76]
    1838:	lsl	x0, x0, #1
    183c:	ldr	x1, [sp, #24]
    1840:	add	x0, x1, x0
    1844:	ldrh	w0, [x0]
    1848:	strb	w0, [sp, #75]
    184c:	ldrb	w0, [sp, #75]
    1850:	cmp	w0, #0x4
    1854:	b.eq	1af0 <GOACC_declare+0x2e0>  // b.none
    1858:	ldrb	w0, [sp, #75]
    185c:	cmp	w0, #0x5
    1860:	b.eq	1af0 <GOACC_declare+0x2e0>  // b.none
    1864:	ldrb	w0, [sp, #75]
    1868:	cmp	w0, #0x82
    186c:	b.gt	1ad0 <GOACC_declare+0x2c0>
    1870:	cmp	w0, #0x80
    1874:	b.ge	18ec <GOACC_declare+0xdc>  // b.tcont
    1878:	cmp	w0, #0x17
    187c:	b.eq	18ec <GOACC_declare+0xdc>  // b.none
    1880:	cmp	w0, #0x17
    1884:	b.gt	1ad0 <GOACC_declare+0x2c0>
    1888:	cmp	w0, #0x8
    188c:	b.eq	1af8 <GOACC_declare+0x2e8>  // b.none
    1890:	cmp	w0, #0x8
    1894:	b.gt	1ad0 <GOACC_declare+0x2c0>
    1898:	cmp	w0, #0x7
    189c:	b.eq	18ec <GOACC_declare+0xdc>  // b.none
    18a0:	cmp	w0, #0x7
    18a4:	b.gt	1ad0 <GOACC_declare+0x2c0>
    18a8:	cmp	w0, #0x6
    18ac:	b.eq	1a58 <GOACC_declare+0x248>  // b.none
    18b0:	cmp	w0, #0x6
    18b4:	b.gt	1ad0 <GOACC_declare+0x2c0>
    18b8:	cmp	w0, #0x4
    18bc:	b.eq	18ec <GOACC_declare+0xdc>  // b.none
    18c0:	cmp	w0, #0x4
    18c4:	b.gt	1ad0 <GOACC_declare+0x2c0>
    18c8:	cmp	w0, #0x2
    18cc:	b.eq	1a0c <GOACC_declare+0x1fc>  // b.none
    18d0:	cmp	w0, #0x2
    18d4:	b.gt	1ad0 <GOACC_declare+0x2c0>
    18d8:	cmp	w0, #0x0
    18dc:	b.eq	1938 <GOACC_declare+0x128>  // b.none
    18e0:	cmp	w0, #0x1
    18e4:	b.eq	19c0 <GOACC_declare+0x1b0>  // b.none
    18e8:	b	1ad0 <GOACC_declare+0x2c0>
    18ec:	ldrsw	x0, [sp, #76]
    18f0:	lsl	x0, x0, #3
    18f4:	ldr	x1, [sp, #40]
    18f8:	add	x2, x1, x0
    18fc:	ldrsw	x0, [sp, #76]
    1900:	lsl	x0, x0, #3
    1904:	ldr	x1, [sp, #32]
    1908:	add	x3, x1, x0
    190c:	ldrsw	x0, [sp, #76]
    1910:	lsl	x0, x0, #1
    1914:	ldr	x1, [sp, #24]
    1918:	add	x0, x1, x0
    191c:	mov	w6, #0x0                   	// #0
    1920:	mov	w5, #0xfffffffe            	// #-2
    1924:	mov	x4, x0
    1928:	mov	x1, #0x1                   	// #1
    192c:	ldr	w0, [sp, #60]
    1930:	bl	c94 <GOACC_enter_exit_data>
    1934:	b	1b0c <GOACC_declare+0x2fc>
    1938:	ldrsw	x0, [sp, #76]
    193c:	lsl	x0, x0, #3
    1940:	ldr	x1, [sp, #40]
    1944:	add	x0, x1, x0
    1948:	ldr	x2, [x0]
    194c:	ldrsw	x0, [sp, #76]
    1950:	lsl	x0, x0, #3
    1954:	ldr	x1, [sp, #32]
    1958:	add	x0, x1, x0
    195c:	ldr	x0, [x0]
    1960:	mov	x1, x0
    1964:	mov	x0, x2
    1968:	bl	0 <acc_is_present>
    196c:	cmp	w0, #0x0
    1970:	b.ne	1b00 <GOACC_declare+0x2f0>  // b.any
    1974:	ldrsw	x0, [sp, #76]
    1978:	lsl	x0, x0, #3
    197c:	ldr	x1, [sp, #40]
    1980:	add	x2, x1, x0
    1984:	ldrsw	x0, [sp, #76]
    1988:	lsl	x0, x0, #3
    198c:	ldr	x1, [sp, #32]
    1990:	add	x3, x1, x0
    1994:	ldrsw	x0, [sp, #76]
    1998:	lsl	x0, x0, #1
    199c:	ldr	x1, [sp, #24]
    19a0:	add	x0, x1, x0
    19a4:	mov	w6, #0x0                   	// #0
    19a8:	mov	w5, #0xfffffffe            	// #-2
    19ac:	mov	x4, x0
    19b0:	mov	x1, #0x1                   	// #1
    19b4:	ldr	w0, [sp, #60]
    19b8:	bl	c94 <GOACC_enter_exit_data>
    19bc:	b	1b00 <GOACC_declare+0x2f0>
    19c0:	ldrsw	x0, [sp, #76]
    19c4:	lsl	x0, x0, #3
    19c8:	ldr	x1, [sp, #40]
    19cc:	add	x2, x1, x0
    19d0:	ldrsw	x0, [sp, #76]
    19d4:	lsl	x0, x0, #3
    19d8:	ldr	x1, [sp, #32]
    19dc:	add	x3, x1, x0
    19e0:	ldrsw	x0, [sp, #76]
    19e4:	lsl	x0, x0, #1
    19e8:	ldr	x1, [sp, #24]
    19ec:	add	x0, x1, x0
    19f0:	mov	w6, #0x0                   	// #0
    19f4:	mov	w5, #0xfffffffe            	// #-2
    19f8:	mov	x4, x0
    19fc:	mov	x1, #0x1                   	// #1
    1a00:	ldr	w0, [sp, #60]
    1a04:	bl	c94 <GOACC_enter_exit_data>
    1a08:	b	1b0c <GOACC_declare+0x2fc>
    1a0c:	ldrsw	x0, [sp, #76]
    1a10:	lsl	x0, x0, #3
    1a14:	ldr	x1, [sp, #40]
    1a18:	add	x2, x1, x0
    1a1c:	ldrsw	x0, [sp, #76]
    1a20:	lsl	x0, x0, #3
    1a24:	ldr	x1, [sp, #32]
    1a28:	add	x3, x1, x0
    1a2c:	ldrsw	x0, [sp, #76]
    1a30:	lsl	x0, x0, #1
    1a34:	ldr	x1, [sp, #24]
    1a38:	add	x0, x1, x0
    1a3c:	mov	w6, #0x0                   	// #0
    1a40:	mov	w5, #0xfffffffe            	// #-2
    1a44:	mov	x4, x0
    1a48:	mov	x1, #0x1                   	// #1
    1a4c:	ldr	w0, [sp, #60]
    1a50:	bl	c94 <GOACC_enter_exit_data>
    1a54:	b	1b0c <GOACC_declare+0x2fc>
    1a58:	ldrsw	x0, [sp, #76]
    1a5c:	lsl	x0, x0, #3
    1a60:	ldr	x1, [sp, #40]
    1a64:	add	x0, x1, x0
    1a68:	ldr	x2, [x0]
    1a6c:	ldrsw	x0, [sp, #76]
    1a70:	lsl	x0, x0, #3
    1a74:	ldr	x1, [sp, #32]
    1a78:	add	x0, x1, x0
    1a7c:	ldr	x0, [x0]
    1a80:	mov	x1, x0
    1a84:	mov	x0, x2
    1a88:	bl	0 <acc_is_present>
    1a8c:	cmp	w0, #0x0
    1a90:	b.ne	1b08 <GOACC_declare+0x2f8>  // b.any
    1a94:	ldrsw	x0, [sp, #76]
    1a98:	lsl	x0, x0, #3
    1a9c:	ldr	x1, [sp, #40]
    1aa0:	add	x0, x1, x0
    1aa4:	ldr	x3, [x0]
    1aa8:	ldrsw	x0, [sp, #76]
    1aac:	lsl	x0, x0, #3
    1ab0:	ldr	x1, [sp, #32]
    1ab4:	add	x0, x1, x0
    1ab8:	ldr	x0, [x0]
    1abc:	mov	x2, x0
    1ac0:	mov	x1, x3
    1ac4:	adrp	x0, 0 <gomp_mutex_lock>
    1ac8:	add	x0, x0, #0x0
    1acc:	bl	0 <gomp_fatal>
    1ad0:	adrp	x0, 0 <gomp_mutex_lock>
    1ad4:	add	x3, x0, #0x0
    1ad8:	mov	w2, #0x2cc                 	// #716
    1adc:	adrp	x0, 0 <gomp_mutex_lock>
    1ae0:	add	x1, x0, #0x0
    1ae4:	adrp	x0, 0 <gomp_mutex_lock>
    1ae8:	add	x0, x0, #0x0
    1aec:	bl	0 <__assert_fail>
    1af0:	nop
    1af4:	b	1b0c <GOACC_declare+0x2fc>
    1af8:	nop
    1afc:	b	1b0c <GOACC_declare+0x2fc>
    1b00:	nop
    1b04:	b	1b0c <GOACC_declare+0x2fc>
    1b08:	nop
    1b0c:	ldr	w0, [sp, #76]
    1b10:	add	w0, w0, #0x1
    1b14:	str	w0, [sp, #76]
    1b18:	ldrsw	x0, [sp, #76]
    1b1c:	ldr	x1, [sp, #48]
    1b20:	cmp	x1, x0
    1b24:	b.hi	1834 <GOACC_declare+0x24>  // b.pmore
    1b28:	nop
    1b2c:	nop
    1b30:	ldp	x29, x30, [sp], #80
    1b34:	ret

oacc-host.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_init>:
   0:	sub	sp, sp, #0x10
   4:	str	x0, [sp, #8]
   8:	ldr	x0, [sp, #8]
   c:	str	wzr, [x0]
  10:	nop
  14:	add	sp, sp, #0x10
  18:	ret

000000000000001c <host_get_name>:
  1c:	adrp	x0, 0 <gomp_mutex_init>
  20:	add	x0, x0, #0x0
  24:	ldr	x0, [x0]
  28:	ret

000000000000002c <host_get_caps>:
  2c:	adrp	x0, 0 <gomp_mutex_init>
  30:	add	x0, x0, #0x0
  34:	ldr	w0, [x0, #8]
  38:	ret

000000000000003c <host_get_type>:
  3c:	adrp	x0, 0 <gomp_mutex_init>
  40:	add	x0, x0, #0x0
  44:	ldr	w0, [x0, #16]
  48:	ret

000000000000004c <host_get_num_devices>:
  4c:	mov	w0, #0x1                   	// #1
  50:	ret

0000000000000054 <host_init_device>:
  54:	sub	sp, sp, #0x10
  58:	str	w0, [sp, #12]
  5c:	mov	w0, #0x1                   	// #1
  60:	add	sp, sp, #0x10
  64:	ret

0000000000000068 <host_fini_device>:
  68:	sub	sp, sp, #0x10
  6c:	str	w0, [sp, #12]
  70:	mov	w0, #0x1                   	// #1
  74:	add	sp, sp, #0x10
  78:	ret

000000000000007c <host_version>:
  7c:	mov	w0, #0x1                   	// #1
  80:	ret

0000000000000084 <host_load_image>:
  84:	sub	sp, sp, #0x20
  88:	str	w0, [sp, #28]
  8c:	str	w1, [sp, #24]
  90:	str	x2, [sp, #16]
  94:	str	x3, [sp, #8]
  98:	mov	w0, #0x0                   	// #0
  9c:	add	sp, sp, #0x20
  a0:	ret

00000000000000a4 <host_unload_image>:
  a4:	sub	sp, sp, #0x10
  a8:	str	w0, [sp, #12]
  ac:	str	w1, [sp, #8]
  b0:	str	x2, [sp]
  b4:	mov	w0, #0x1                   	// #1
  b8:	add	sp, sp, #0x10
  bc:	ret

00000000000000c0 <host_alloc>:
  c0:	stp	x29, x30, [sp, #-32]!
  c4:	mov	x29, sp
  c8:	str	w0, [sp, #28]
  cc:	str	x1, [sp, #16]
  d0:	ldr	x0, [sp, #16]
  d4:	bl	0 <gomp_malloc>
  d8:	ldp	x29, x30, [sp], #32
  dc:	ret

00000000000000e0 <host_free>:
  e0:	stp	x29, x30, [sp, #-32]!
  e4:	mov	x29, sp
  e8:	str	w0, [sp, #28]
  ec:	str	x1, [sp, #16]
  f0:	ldr	x0, [sp, #16]
  f4:	bl	0 <free>
  f8:	mov	w0, #0x1                   	// #1
  fc:	ldp	x29, x30, [sp], #32
 100:	ret

0000000000000104 <host_dev2host>:
 104:	sub	sp, sp, #0x20
 108:	str	w0, [sp, #28]
 10c:	str	x1, [sp, #16]
 110:	str	x2, [sp, #8]
 114:	str	x3, [sp]
 118:	mov	w0, #0x1                   	// #1
 11c:	add	sp, sp, #0x20
 120:	ret

0000000000000124 <host_host2dev>:
 124:	sub	sp, sp, #0x20
 128:	str	w0, [sp, #28]
 12c:	str	x1, [sp, #16]
 130:	str	x2, [sp, #8]
 134:	str	x3, [sp]
 138:	mov	w0, #0x1                   	// #1
 13c:	add	sp, sp, #0x20
 140:	ret

0000000000000144 <host_run>:
 144:	stp	x29, x30, [sp, #-64]!
 148:	mov	x29, sp
 14c:	str	w0, [sp, #44]
 150:	str	x1, [sp, #32]
 154:	str	x2, [sp, #24]
 158:	str	x3, [sp, #16]
 15c:	ldr	x0, [sp, #32]
 160:	str	x0, [sp, #56]
 164:	ldr	x1, [sp, #56]
 168:	ldr	x0, [sp, #24]
 16c:	blr	x1
 170:	nop
 174:	ldp	x29, x30, [sp], #64
 178:	ret

000000000000017c <host_openacc_exec>:
 17c:	stp	x29, x30, [sp, #-80]!
 180:	mov	x29, sp
 184:	str	x0, [sp, #72]
 188:	str	x1, [sp, #64]
 18c:	str	x2, [sp, #56]
 190:	str	x3, [sp, #48]
 194:	str	w4, [sp, #44]
 198:	str	x5, [sp, #32]
 19c:	str	x6, [sp, #24]
 1a0:	ldr	x1, [sp, #72]
 1a4:	ldr	x0, [sp, #56]
 1a8:	blr	x1
 1ac:	nop
 1b0:	ldp	x29, x30, [sp], #80
 1b4:	ret

00000000000001b8 <host_openacc_register_async_cleanup>:
 1b8:	sub	sp, sp, #0x10
 1bc:	str	x0, [sp, #8]
 1c0:	str	w1, [sp, #4]
 1c4:	nop
 1c8:	add	sp, sp, #0x10
 1cc:	ret

00000000000001d0 <host_openacc_async_test>:
 1d0:	sub	sp, sp, #0x10
 1d4:	str	w0, [sp, #12]
 1d8:	mov	w0, #0x1                   	// #1
 1dc:	add	sp, sp, #0x10
 1e0:	ret

00000000000001e4 <host_openacc_async_test_all>:
 1e4:	mov	w0, #0x1                   	// #1
 1e8:	ret

00000000000001ec <host_openacc_async_wait>:
 1ec:	sub	sp, sp, #0x10
 1f0:	str	w0, [sp, #12]
 1f4:	nop
 1f8:	add	sp, sp, #0x10
 1fc:	ret

0000000000000200 <host_openacc_async_wait_async>:
 200:	sub	sp, sp, #0x10
 204:	str	w0, [sp, #12]
 208:	str	w1, [sp, #8]
 20c:	nop
 210:	add	sp, sp, #0x10
 214:	ret

0000000000000218 <host_openacc_async_wait_all>:
 218:	nop
 21c:	ret

0000000000000220 <host_openacc_async_wait_all_async>:
 220:	sub	sp, sp, #0x10
 224:	str	w0, [sp, #12]
 228:	nop
 22c:	add	sp, sp, #0x10
 230:	ret

0000000000000234 <host_openacc_async_set_async>:
 234:	sub	sp, sp, #0x10
 238:	str	w0, [sp, #12]
 23c:	nop
 240:	add	sp, sp, #0x10
 244:	ret

0000000000000248 <host_openacc_create_thread_data>:
 248:	sub	sp, sp, #0x10
 24c:	str	w0, [sp, #12]
 250:	mov	x0, #0x0                   	// #0
 254:	add	sp, sp, #0x10
 258:	ret

000000000000025c <host_openacc_destroy_thread_data>:
 25c:	sub	sp, sp, #0x10
 260:	str	x0, [sp, #8]
 264:	nop
 268:	add	sp, sp, #0x10
 26c:	ret

0000000000000270 <goacc_host_init>:
 270:	stp	x29, x30, [sp, #-16]!
 274:	mov	x29, sp
 278:	adrp	x0, 0 <gomp_mutex_init>
 27c:	add	x0, x0, #0x0
 280:	bl	0 <gomp_mutex_init>
 284:	adrp	x0, 0 <gomp_mutex_init>
 288:	add	x0, x0, #0x0
 28c:	bl	0 <goacc_register>
 290:	nop
 294:	ldp	x29, x30, [sp], #16
 298:	ret

oacc-init.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_init>:
       0:	sub	sp, sp, #0x10
       4:	str	x0, [sp, #8]
       8:	ldr	x0, [sp, #8]
       c:	str	wzr, [x0]
      10:	nop
      14:	add	sp, sp, #0x10
      18:	ret
      1c:	nop

0000000000000020 <gomp_mutex_lock>:
      20:	stp	x29, x30, [sp, #-48]!
      24:	mov	x29, sp
      28:	str	x0, [sp, #24]
      2c:	str	wzr, [sp, #44]
      30:	ldr	x1, [sp, #24]
      34:	add	x0, sp, #0x2c
      38:	ldr	w3, [x0]
      3c:	mov	w4, #0x1                   	// #1
      40:	ldaxr	w2, [x1]
      44:	cmp	w2, w3
      48:	b.ne	54 <gomp_mutex_lock+0x34>  // b.any
      4c:	stxr	w5, w4, [x1]
      50:	cbnz	w5, 40 <gomp_mutex_lock+0x20>
      54:	cset	w1, eq  // eq = none
      58:	cmp	w1, #0x0
      5c:	b.ne	64 <gomp_mutex_lock+0x44>  // b.any
      60:	str	w2, [x0]
      64:	mov	w0, w1
      68:	eor	w0, w0, #0x1
      6c:	and	w0, w0, #0xff
      70:	cmp	w0, #0x0
      74:	b.eq	88 <gomp_mutex_lock+0x68>  // b.none
      78:	ldr	w0, [sp, #44]
      7c:	mov	w1, w0
      80:	ldr	x0, [sp, #24]
      84:	bl	0 <gomp_mutex_lock_slow>
      88:	nop
      8c:	ldp	x29, x30, [sp], #48
      90:	ret
      94:	nop

0000000000000098 <gomp_mutex_unlock>:
      98:	stp	x29, x30, [sp, #-48]!
      9c:	mov	x29, sp
      a0:	str	x0, [sp, #24]
      a4:	ldr	x1, [sp, #24]
      a8:	ldxr	w0, [x1]
      ac:	stlxr	w2, wzr, [x1]
      b0:	cbnz	w2, a8 <gomp_mutex_unlock+0x10>
      b4:	str	w0, [sp, #44]
      b8:	ldr	w0, [sp, #44]
      bc:	lsr	w0, w0, #31
      c0:	and	w0, w0, #0xff
      c4:	and	x0, x0, #0xff
      c8:	cmp	x0, #0x0
      cc:	b.eq	d8 <gomp_mutex_unlock+0x40>  // b.none
      d0:	ldr	x0, [sp, #24]
      d4:	bl	0 <gomp_mutex_unlock_slow>
      d8:	nop
      dc:	ldp	x29, x30, [sp], #48
      e0:	ret
      e4:	nop

00000000000000e8 <acc_device_type>:
      e8:	sub	sp, sp, #0x10
      ec:	str	w0, [sp, #12]
      f0:	ldr	w0, [sp, #12]
      f4:	add	sp, sp, #0x10
      f8:	ret
      fc:	nop

0000000000000100 <goacc_thread>:
     100:	mrs	x0, tpidr_el0
     104:	add	x0, x0, #0x0, lsl #12
     108:	add	x0, x0, #0x0
     10c:	ldr	x0, [x0]
     110:	ret
     114:	nop

0000000000000118 <goacc_register>:
     118:	stp	x29, x30, [sp, #-32]!
     11c:	mov	x29, sp
     120:	str	x0, [sp, #24]
     124:	ldr	x0, [sp, #24]
     128:	ldr	w0, [x0, #12]
     12c:	cmp	w0, #0x0
     130:	b.ne	208 <goacc_register+0xf0>  // b.any
     134:	adrp	x0, 0 <gomp_mutex_init>
     138:	add	x0, x0, #0x0
     13c:	bl	20 <gomp_mutex_lock>
     140:	ldr	x0, [sp, #24]
     144:	ldr	w0, [x0, #16]
     148:	bl	e8 <acc_device_type>
     14c:	cmp	w0, #0x0
     150:	b.eq	17c <goacc_register+0x64>  // b.none
     154:	ldr	x0, [sp, #24]
     158:	ldr	w0, [x0, #16]
     15c:	bl	e8 <acc_device_type>
     160:	cmp	w0, #0x1
     164:	b.eq	17c <goacc_register+0x64>  // b.none
     168:	ldr	x0, [sp, #24]
     16c:	ldr	w0, [x0, #16]
     170:	bl	e8 <acc_device_type>
     174:	cmp	w0, #0x4
     178:	b.ne	19c <goacc_register+0x84>  // b.any
     17c:	adrp	x0, 0 <gomp_mutex_init>
     180:	add	x3, x0, #0x0
     184:	mov	w2, #0x4c                  	// #76
     188:	adrp	x0, 0 <gomp_mutex_init>
     18c:	add	x1, x0, #0x0
     190:	adrp	x0, 0 <gomp_mutex_init>
     194:	add	x0, x0, #0x0
     198:	bl	0 <__assert_fail>
     19c:	ldr	x0, [sp, #24]
     1a0:	ldr	w1, [x0, #16]
     1a4:	adrp	x0, 0 <gomp_mutex_init>
     1a8:	add	x0, x0, #0x0
     1ac:	mov	w1, w1
     1b0:	ldr	x0, [x0, x1, lsl #3]
     1b4:	cmp	x0, #0x0
     1b8:	b.eq	1dc <goacc_register+0xc4>  // b.none
     1bc:	adrp	x0, 0 <gomp_mutex_init>
     1c0:	add	x3, x0, #0x0
     1c4:	mov	w2, #0x4f                  	// #79
     1c8:	adrp	x0, 0 <gomp_mutex_init>
     1cc:	add	x1, x0, #0x0
     1d0:	adrp	x0, 0 <gomp_mutex_init>
     1d4:	add	x0, x0, #0x0
     1d8:	bl	0 <__assert_fail>
     1dc:	ldr	x0, [sp, #24]
     1e0:	ldr	w1, [x0, #16]
     1e4:	adrp	x0, 0 <gomp_mutex_init>
     1e8:	add	x0, x0, #0x0
     1ec:	mov	w1, w1
     1f0:	ldr	x2, [sp, #24]
     1f4:	str	x2, [x0, x1, lsl #3]
     1f8:	adrp	x0, 0 <gomp_mutex_init>
     1fc:	add	x0, x0, #0x0
     200:	bl	98 <gomp_mutex_unlock>
     204:	b	20c <goacc_register+0xf4>
     208:	nop
     20c:	ldp	x29, x30, [sp], #32
     210:	ret
     214:	nop

0000000000000218 <get_openacc_name>:
     218:	stp	x29, x30, [sp, #-32]!
     21c:	mov	x29, sp
     220:	str	x0, [sp, #24]
     224:	adrp	x0, 0 <gomp_mutex_init>
     228:	add	x1, x0, #0x0
     22c:	ldr	x0, [sp, #24]
     230:	bl	0 <strcmp>
     234:	cmp	w0, #0x0
     238:	b.ne	248 <get_openacc_name+0x30>  // b.any
     23c:	adrp	x0, 0 <gomp_mutex_init>
     240:	add	x0, x0, #0x0
     244:	b	24c <get_openacc_name+0x34>
     248:	ldr	x0, [sp, #24]
     24c:	ldp	x29, x30, [sp], #32
     250:	ret
     254:	nop

0000000000000258 <name_of_acc_device_t>:
     258:	stp	x29, x30, [sp, #-32]!
     25c:	mov	x29, sp
     260:	str	w0, [sp, #28]
     264:	ldr	w0, [sp, #28]
     268:	cmp	w0, #0x5
     26c:	b.eq	2f8 <name_of_acc_device_t+0xa0>  // b.none
     270:	ldr	w0, [sp, #28]
     274:	cmp	w0, #0x5
     278:	b.gt	304 <name_of_acc_device_t+0xac>
     27c:	ldr	w0, [sp, #28]
     280:	cmp	w0, #0x4
     284:	b.eq	2ec <name_of_acc_device_t+0x94>  // b.none
     288:	ldr	w0, [sp, #28]
     28c:	cmp	w0, #0x4
     290:	b.gt	304 <name_of_acc_device_t+0xac>
     294:	ldr	w0, [sp, #28]
     298:	cmp	w0, #0x2
     29c:	b.eq	2e0 <name_of_acc_device_t+0x88>  // b.none
     2a0:	ldr	w0, [sp, #28]
     2a4:	cmp	w0, #0x2
     2a8:	b.gt	304 <name_of_acc_device_t+0xac>
     2ac:	ldr	w0, [sp, #28]
     2b0:	cmp	w0, #0x0
     2b4:	b.eq	2c8 <name_of_acc_device_t+0x70>  // b.none
     2b8:	ldr	w0, [sp, #28]
     2bc:	cmp	w0, #0x1
     2c0:	b.eq	2d4 <name_of_acc_device_t+0x7c>  // b.none
     2c4:	b	304 <name_of_acc_device_t+0xac>
     2c8:	adrp	x0, 0 <gomp_mutex_init>
     2cc:	add	x0, x0, #0x0
     2d0:	b	318 <name_of_acc_device_t+0xc0>
     2d4:	adrp	x0, 0 <gomp_mutex_init>
     2d8:	add	x0, x0, #0x0
     2dc:	b	318 <name_of_acc_device_t+0xc0>
     2e0:	adrp	x0, 0 <gomp_mutex_init>
     2e4:	add	x0, x0, #0x0
     2e8:	b	318 <name_of_acc_device_t+0xc0>
     2ec:	adrp	x0, 0 <gomp_mutex_init>
     2f0:	add	x0, x0, #0x0
     2f4:	b	318 <name_of_acc_device_t+0xc0>
     2f8:	adrp	x0, 0 <gomp_mutex_init>
     2fc:	add	x0, x0, #0x0
     300:	b	318 <name_of_acc_device_t+0xc0>
     304:	ldr	w0, [sp, #28]
     308:	mov	w1, w0
     30c:	adrp	x0, 0 <gomp_mutex_init>
     310:	add	x0, x0, #0x0
     314:	bl	0 <gomp_fatal>
     318:	ldp	x29, x30, [sp], #32
     31c:	ret

0000000000000320 <resolve_device>:
     320:	stp	x29, x30, [sp, #-64]!
     324:	mov	x29, sp
     328:	str	x19, [sp, #16]
     32c:	str	w0, [sp, #44]
     330:	strb	w1, [sp, #43]
     334:	ldr	w0, [sp, #44]
     338:	str	w0, [sp, #60]
     33c:	ldr	w0, [sp, #44]
     340:	cmp	w0, #0x4
     344:	b.eq	490 <resolve_device+0x170>  // b.none
     348:	ldr	w0, [sp, #44]
     34c:	cmp	w0, #0x4
     350:	b.gt	4ec <resolve_device+0x1cc>
     354:	ldr	w0, [sp, #44]
     358:	cmp	w0, #0x1
     35c:	b.eq	370 <resolve_device+0x50>  // b.none
     360:	ldr	w0, [sp, #44]
     364:	cmp	w0, #0x2
     368:	b.eq	50c <resolve_device+0x1ec>  // b.none
     36c:	b	4ec <resolve_device+0x1cc>
     370:	adrp	x0, 0 <goacc_device_type>
     374:	add	x0, x0, #0x0
     378:	ldr	x0, [x0]
     37c:	cmp	x0, #0x0
     380:	b.eq	44c <resolve_device+0x12c>  // b.none
     384:	b	3f8 <resolve_device+0xd8>
     388:	adrp	x0, 0 <gomp_mutex_init>
     38c:	add	x0, x0, #0x0
     390:	ldrsw	x1, [sp, #44]
     394:	ldr	x0, [x0, x1, lsl #3]
     398:	cmp	x0, #0x0
     39c:	b.eq	3f8 <resolve_device+0xd8>  // b.none
     3a0:	adrp	x0, 0 <goacc_device_type>
     3a4:	add	x0, x0, #0x0
     3a8:	ldr	x19, [x0]
     3ac:	adrp	x0, 0 <gomp_mutex_init>
     3b0:	add	x0, x0, #0x0
     3b4:	ldrsw	x1, [sp, #44]
     3b8:	ldr	x0, [x0, x1, lsl #3]
     3bc:	ldr	x0, [x0]
     3c0:	bl	218 <get_openacc_name>
     3c4:	mov	x1, x0
     3c8:	mov	x0, x19
     3cc:	bl	0 <strcasecmp>
     3d0:	cmp	w0, #0x0
     3d4:	b.ne	3f8 <resolve_device+0xd8>  // b.any
     3d8:	adrp	x0, 0 <gomp_mutex_init>
     3dc:	add	x0, x0, #0x0
     3e0:	ldrsw	x1, [sp, #44]
     3e4:	ldr	x0, [x0, x1, lsl #3]
     3e8:	ldr	x0, [x0, #48]
     3ec:	blr	x0
     3f0:	cmp	w0, #0x0
     3f4:	b.gt	514 <resolve_device+0x1f4>
     3f8:	ldr	w0, [sp, #44]
     3fc:	add	w0, w0, #0x1
     400:	str	w0, [sp, #44]
     404:	ldr	w0, [sp, #44]
     408:	cmp	w0, #0x6
     40c:	b.ne	388 <resolve_device+0x68>  // b.any
     410:	ldrb	w0, [sp, #43]
     414:	cmp	w0, #0x0
     418:	b.eq	444 <resolve_device+0x124>  // b.none
     41c:	adrp	x0, 0 <gomp_mutex_init>
     420:	add	x0, x0, #0x0
     424:	bl	98 <gomp_mutex_unlock>
     428:	adrp	x0, 0 <goacc_device_type>
     42c:	add	x0, x0, #0x0
     430:	ldr	x0, [x0]
     434:	mov	x1, x0
     438:	adrp	x0, 0 <gomp_mutex_init>
     43c:	add	x0, x0, #0x0
     440:	bl	0 <gomp_fatal>
     444:	mov	x0, #0x0                   	// #0
     448:	b	5cc <resolve_device+0x2ac>
     44c:	mov	w0, #0x4                   	// #4
     450:	str	w0, [sp, #44]
     454:	b	490 <resolve_device+0x170>
     458:	adrp	x0, 0 <gomp_mutex_init>
     45c:	add	x0, x0, #0x0
     460:	ldrsw	x1, [sp, #44]
     464:	ldr	x0, [x0, x1, lsl #3]
     468:	cmp	x0, #0x0
     46c:	b.eq	490 <resolve_device+0x170>  // b.none
     470:	adrp	x0, 0 <gomp_mutex_init>
     474:	add	x0, x0, #0x0
     478:	ldrsw	x1, [sp, #44]
     47c:	ldr	x0, [x0, x1, lsl #3]
     480:	ldr	x0, [x0, #48]
     484:	blr	x0
     488:	cmp	w0, #0x0
     48c:	b.gt	51c <resolve_device+0x1fc>
     490:	ldr	w0, [sp, #44]
     494:	add	w0, w0, #0x1
     498:	str	w0, [sp, #44]
     49c:	ldr	w0, [sp, #44]
     4a0:	cmp	w0, #0x6
     4a4:	b.ne	458 <resolve_device+0x138>  // b.any
     4a8:	ldr	w0, [sp, #60]
     4ac:	cmp	w0, #0x1
     4b0:	b.ne	4c0 <resolve_device+0x1a0>  // b.any
     4b4:	mov	w0, #0x2                   	// #2
     4b8:	str	w0, [sp, #44]
     4bc:	b	528 <resolve_device+0x208>
     4c0:	ldrb	w0, [sp, #43]
     4c4:	cmp	w0, #0x0
     4c8:	b.eq	4e4 <resolve_device+0x1c4>  // b.none
     4cc:	adrp	x0, 0 <gomp_mutex_init>
     4d0:	add	x0, x0, #0x0
     4d4:	bl	98 <gomp_mutex_unlock>
     4d8:	adrp	x0, 0 <gomp_mutex_init>
     4dc:	add	x0, x0, #0x0
     4e0:	bl	0 <gomp_fatal>
     4e4:	mov	x0, #0x0                   	// #0
     4e8:	b	5cc <resolve_device+0x2ac>
     4ec:	ldr	w0, [sp, #44]
     4f0:	cmp	w0, #0x6
     4f4:	b.le	524 <resolve_device+0x204>
     4f8:	ldrb	w0, [sp, #43]
     4fc:	cmp	w0, #0x0
     500:	b.ne	594 <resolve_device+0x274>  // b.any
     504:	mov	x0, #0x0                   	// #0
     508:	b	5cc <resolve_device+0x2ac>
     50c:	nop
     510:	b	528 <resolve_device+0x208>
     514:	nop
     518:	b	528 <resolve_device+0x208>
     51c:	nop
     520:	b	528 <resolve_device+0x208>
     524:	nop
     528:	ldr	w0, [sp, #44]
     52c:	cmp	w0, #0x0
     530:	b.eq	54c <resolve_device+0x22c>  // b.none
     534:	ldr	w0, [sp, #44]
     538:	cmp	w0, #0x1
     53c:	b.eq	54c <resolve_device+0x22c>  // b.none
     540:	ldr	w0, [sp, #44]
     544:	cmp	w0, #0x4
     548:	b.ne	56c <resolve_device+0x24c>  // b.any
     54c:	adrp	x0, 0 <gomp_mutex_init>
     550:	add	x3, x0, #0x0
     554:	mov	w2, #0xb6                  	// #182
     558:	adrp	x0, 0 <gomp_mutex_init>
     55c:	add	x1, x0, #0x0
     560:	adrp	x0, 0 <gomp_mutex_init>
     564:	add	x0, x0, #0x0
     568:	bl	0 <__assert_fail>
     56c:	adrp	x0, 0 <gomp_mutex_init>
     570:	add	x0, x0, #0x0
     574:	ldrsw	x1, [sp, #44]
     578:	ldr	x0, [x0, x1, lsl #3]
     57c:	cmp	x0, #0x0
     580:	b.ne	5bc <resolve_device+0x29c>  // b.any
     584:	ldrb	w0, [sp, #43]
     588:	cmp	w0, #0x0
     58c:	b.eq	5bc <resolve_device+0x29c>  // b.none
     590:	b	598 <resolve_device+0x278>
     594:	nop
     598:	adrp	x0, 0 <gomp_mutex_init>
     59c:	add	x0, x0, #0x0
     5a0:	bl	98 <gomp_mutex_unlock>
     5a4:	ldr	w0, [sp, #44]
     5a8:	bl	258 <name_of_acc_device_t>
     5ac:	mov	x1, x0
     5b0:	adrp	x0, 0 <gomp_mutex_init>
     5b4:	add	x0, x0, #0x0
     5b8:	bl	0 <gomp_fatal>
     5bc:	adrp	x0, 0 <gomp_mutex_init>
     5c0:	add	x0, x0, #0x0
     5c4:	ldrsw	x1, [sp, #44]
     5c8:	ldr	x0, [x0, x1, lsl #3]
     5cc:	ldr	x19, [sp, #16]
     5d0:	ldp	x29, x30, [sp], #64
     5d4:	ret

00000000000005d8 <acc_dev_num_out_of_range>:
     5d8:	stp	x29, x30, [sp, #-32]!
     5dc:	mov	x29, sp
     5e0:	str	w0, [sp, #28]
     5e4:	str	w1, [sp, #24]
     5e8:	str	w2, [sp, #20]
     5ec:	ldr	w0, [sp, #20]
     5f0:	cmp	w0, #0x0
     5f4:	b.ne	610 <acc_dev_num_out_of_range+0x38>  // b.any
     5f8:	ldr	w0, [sp, #28]
     5fc:	bl	258 <name_of_acc_device_t>
     600:	mov	x1, x0
     604:	adrp	x0, 0 <gomp_mutex_init>
     608:	add	x0, x0, #0x0
     60c:	bl	0 <gomp_fatal>
     610:	ldr	w1, [sp, #24]
     614:	adrp	x0, 0 <gomp_mutex_init>
     618:	add	x0, x0, #0x0
     61c:	bl	0 <gomp_fatal>

0000000000000620 <acc_init_1>:
     620:	stp	x29, x30, [sp, #-64]!
     624:	mov	x29, sp
     628:	str	w0, [sp, #28]
     62c:	mov	w1, #0x1                   	// #1
     630:	ldr	w0, [sp, #28]
     634:	bl	320 <resolve_device>
     638:	str	x0, [sp, #56]
     63c:	ldr	x0, [sp, #56]
     640:	ldr	x0, [x0, #48]
     644:	blr	x0
     648:	str	w0, [sp, #52]
     64c:	ldr	w0, [sp, #52]
     650:	cmp	w0, #0x0
     654:	b.le	670 <acc_init_1+0x50>
     658:	adrp	x0, 0 <goacc_device_num>
     65c:	add	x0, x0, #0x0
     660:	ldr	w0, [x0]
     664:	ldr	w1, [sp, #52]
     668:	cmp	w1, w0
     66c:	b.gt	68c <acc_init_1+0x6c>
     670:	adrp	x0, 0 <goacc_device_num>
     674:	add	x0, x0, #0x0
     678:	ldr	w0, [x0]
     67c:	ldr	w2, [sp, #52]
     680:	mov	w1, w0
     684:	ldr	w0, [sp, #28]
     688:	bl	5d8 <acc_dev_num_out_of_range>
     68c:	adrp	x0, 0 <goacc_device_num>
     690:	add	x0, x0, #0x0
     694:	ldr	w0, [x0]
     698:	sxtw	x1, w0
     69c:	mov	x0, x1
     6a0:	lsl	x0, x0, #2
     6a4:	add	x0, x0, x1
     6a8:	lsl	x0, x0, #2
     6ac:	sub	x0, x0, x1
     6b0:	lsl	x0, x0, #4
     6b4:	mov	x1, x0
     6b8:	ldr	x0, [sp, #56]
     6bc:	add	x0, x0, x1
     6c0:	str	x0, [sp, #40]
     6c4:	ldr	x0, [sp, #40]
     6c8:	add	x0, x0, #0xa8
     6cc:	bl	20 <gomp_mutex_lock>
     6d0:	ldr	x0, [sp, #40]
     6d4:	ldr	w0, [x0, #172]
     6d8:	cmp	w0, #0x1
     6dc:	b.ne	6f8 <acc_init_1+0xd8>  // b.any
     6e0:	ldr	x0, [sp, #40]
     6e4:	add	x0, x0, #0xa8
     6e8:	bl	98 <gomp_mutex_unlock>
     6ec:	adrp	x0, 0 <gomp_mutex_init>
     6f0:	add	x0, x0, #0x0
     6f4:	bl	0 <gomp_fatal>
     6f8:	ldr	x0, [sp, #40]
     6fc:	bl	0 <gomp_init_device>
     700:	ldr	x0, [sp, #40]
     704:	add	x0, x0, #0xa8
     708:	bl	98 <gomp_mutex_unlock>
     70c:	ldr	x0, [sp, #56]
     710:	ldp	x29, x30, [sp], #64
     714:	ret

0000000000000718 <acc_shutdown_1>:
     718:	stp	x29, x30, [sp, #-80]!
     71c:	mov	x29, sp
     720:	str	w0, [sp, #28]
     724:	strb	wzr, [sp, #67]
     728:	mov	w1, #0x1                   	// #1
     72c:	ldr	w0, [sp, #28]
     730:	bl	320 <resolve_device>
     734:	str	x0, [sp, #56]
     738:	ldr	x0, [sp, #56]
     73c:	ldr	x0, [x0, #48]
     740:	blr	x0
     744:	str	w0, [sp, #52]
     748:	str	wzr, [sp, #68]
     74c:	b	7a8 <acc_shutdown_1+0x90>
     750:	ldrsw	x1, [sp, #68]
     754:	mov	x0, x1
     758:	lsl	x0, x0, #2
     75c:	add	x0, x0, x1
     760:	lsl	x0, x0, #2
     764:	sub	x0, x0, x1
     768:	lsl	x0, x0, #4
     76c:	mov	x1, x0
     770:	ldr	x0, [sp, #56]
     774:	add	x0, x0, x1
     778:	str	x0, [sp, #32]
     77c:	ldr	x0, [sp, #32]
     780:	add	x0, x0, #0xa8
     784:	bl	20 <gomp_mutex_lock>
     788:	ldr	x0, [sp, #32]
     78c:	bl	0 <gomp_unload_device>
     790:	ldr	x0, [sp, #32]
     794:	add	x0, x0, #0xa8
     798:	bl	98 <gomp_mutex_unlock>
     79c:	ldr	w0, [sp, #68]
     7a0:	add	w0, w0, #0x1
     7a4:	str	w0, [sp, #68]
     7a8:	ldr	w1, [sp, #68]
     7ac:	ldr	w0, [sp, #52]
     7b0:	cmp	w1, w0
     7b4:	b.lt	750 <acc_shutdown_1+0x38>  // b.tstop
     7b8:	adrp	x0, 0 <gomp_mutex_init>
     7bc:	add	x0, x0, #0x0
     7c0:	bl	20 <gomp_mutex_lock>
     7c4:	adrp	x0, 0 <gomp_mutex_init>
     7c8:	add	x0, x0, #0x0
     7cc:	ldr	x0, [x0]
     7d0:	str	x0, [sp, #72]
     7d4:	b	8b0 <acc_shutdown_1+0x198>
     7d8:	ldr	x0, [sp, #72]
     7dc:	ldr	x0, [x0, #40]
     7e0:	cmp	x0, #0x0
     7e4:	b.eq	7fc <acc_shutdown_1+0xe4>  // b.none
     7e8:	ldr	x0, [sp, #56]
     7ec:	ldr	x1, [x0, #264]
     7f0:	ldr	x0, [sp, #72]
     7f4:	ldr	x0, [x0, #40]
     7f8:	blr	x1
     7fc:	ldr	x0, [sp, #72]
     800:	str	xzr, [x0, #40]
     804:	ldr	x0, [sp, #72]
     808:	ldr	x0, [x0, #24]
     80c:	cmp	x0, #0x0
     810:	b.eq	82c <acc_shutdown_1+0x114>  // b.none
     814:	adrp	x0, 0 <gomp_mutex_init>
     818:	add	x0, x0, #0x0
     81c:	bl	98 <gomp_mutex_unlock>
     820:	adrp	x0, 0 <gomp_mutex_init>
     824:	add	x0, x0, #0x0
     828:	bl	0 <gomp_fatal>
     82c:	ldr	x0, [sp, #72]
     830:	ldr	x0, [x0, #16]
     834:	cmp	x0, #0x0
     838:	b.eq	854 <acc_shutdown_1+0x13c>  // b.none
     83c:	adrp	x0, 0 <gomp_mutex_init>
     840:	add	x0, x0, #0x0
     844:	bl	98 <gomp_mutex_unlock>
     848:	adrp	x0, 0 <gomp_mutex_init>
     84c:	add	x0, x0, #0x0
     850:	bl	0 <gomp_fatal>
     854:	ldr	x0, [sp, #72]
     858:	ldr	x0, [x0, #8]
     85c:	cmp	x0, #0x0
     860:	b.eq	8a4 <acc_shutdown_1+0x18c>  // b.none
     864:	ldr	x0, [sp, #72]
     868:	ldr	x0, [x0, #8]
     86c:	add	x0, x0, #0xa8
     870:	bl	20 <gomp_mutex_lock>
     874:	ldr	x0, [sp, #72]
     878:	ldr	x0, [x0, #8]
     87c:	add	x0, x0, #0xa0
     880:	bl	0 <gomp_free_memmap>
     884:	ldr	x0, [sp, #72]
     888:	ldr	x0, [x0, #8]
     88c:	add	x0, x0, #0xa8
     890:	bl	98 <gomp_mutex_unlock>
     894:	ldr	x0, [sp, #72]
     898:	str	xzr, [x0, #8]
     89c:	ldr	x0, [sp, #72]
     8a0:	str	xzr, [x0]
     8a4:	ldr	x0, [sp, #72]
     8a8:	ldr	x0, [x0, #32]
     8ac:	str	x0, [sp, #72]
     8b0:	ldr	x0, [sp, #72]
     8b4:	cmp	x0, #0x0
     8b8:	b.ne	7d8 <acc_shutdown_1+0xc0>  // b.any
     8bc:	adrp	x0, 0 <gomp_mutex_init>
     8c0:	add	x0, x0, #0x0
     8c4:	bl	98 <gomp_mutex_unlock>
     8c8:	mov	w0, #0x1                   	// #1
     8cc:	strb	w0, [sp, #66]
     8d0:	str	wzr, [sp, #68]
     8d4:	b	974 <acc_shutdown_1+0x25c>
     8d8:	ldrsw	x1, [sp, #68]
     8dc:	mov	x0, x1
     8e0:	lsl	x0, x0, #2
     8e4:	add	x0, x0, x1
     8e8:	lsl	x0, x0, #2
     8ec:	sub	x0, x0, x1
     8f0:	lsl	x0, x0, #4
     8f4:	mov	x1, x0
     8f8:	ldr	x0, [sp, #56]
     8fc:	add	x0, x0, x1
     900:	str	x0, [sp, #40]
     904:	ldr	x0, [sp, #40]
     908:	add	x0, x0, #0xa8
     90c:	bl	20 <gomp_mutex_lock>
     910:	ldr	x0, [sp, #40]
     914:	ldr	w0, [x0, #172]
     918:	cmp	w0, #0x1
     91c:	b.ne	95c <acc_shutdown_1+0x244>  // b.any
     920:	mov	w0, #0x1                   	// #1
     924:	strb	w0, [sp, #67]
     928:	ldr	x0, [sp, #40]
     92c:	ldr	x1, [x0, #64]
     930:	ldr	x0, [sp, #40]
     934:	ldr	w0, [x0, #12]
     938:	blr	x1
     93c:	and	w1, w0, #0xff
     940:	ldrb	w0, [sp, #66]
     944:	and	w0, w0, w1
     948:	cmp	w0, #0x0
     94c:	cset	w0, ne  // ne = any
     950:	strb	w0, [sp, #66]
     954:	ldr	x0, [sp, #40]
     958:	str	wzr, [x0, #172]
     95c:	ldr	x0, [sp, #40]
     960:	add	x0, x0, #0xa8
     964:	bl	98 <gomp_mutex_unlock>
     968:	ldr	w0, [sp, #68]
     96c:	add	w0, w0, #0x1
     970:	str	w0, [sp, #68]
     974:	ldr	w1, [sp, #68]
     978:	ldr	w0, [sp, #52]
     97c:	cmp	w1, w0
     980:	b.lt	8d8 <acc_shutdown_1+0x1c0>  // b.tstop
     984:	ldrb	w0, [sp, #66]
     988:	eor	w0, w0, #0x1
     98c:	and	w0, w0, #0xff
     990:	cmp	w0, #0x0
     994:	b.eq	9a4 <acc_shutdown_1+0x28c>  // b.none
     998:	adrp	x0, 0 <gomp_mutex_init>
     99c:	add	x0, x0, #0x0
     9a0:	bl	0 <gomp_fatal>
     9a4:	ldrb	w0, [sp, #67]
     9a8:	eor	w0, w0, #0x1
     9ac:	and	w0, w0, #0xff
     9b0:	cmp	w0, #0x0
     9b4:	b.eq	9c4 <acc_shutdown_1+0x2ac>  // b.none
     9b8:	adrp	x0, 0 <gomp_mutex_init>
     9bc:	add	x0, x0, #0x0
     9c0:	bl	0 <gomp_fatal>
     9c4:	nop
     9c8:	ldp	x29, x30, [sp], #80
     9cc:	ret

00000000000009d0 <goacc_new_thread>:
     9d0:	stp	x29, x30, [sp, #-32]!
     9d4:	mov	x29, sp
     9d8:	mov	x0, #0x30                  	// #48
     9dc:	bl	0 <gomp_malloc>
     9e0:	str	x0, [sp, #24]
     9e4:	mrs	x0, tpidr_el0
     9e8:	add	x0, x0, #0x0, lsl #12
     9ec:	add	x0, x0, #0x0
     9f0:	ldr	x1, [sp, #24]
     9f4:	str	x1, [x0]
     9f8:	adrp	x0, 0 <gomp_mutex_init>
     9fc:	add	x0, x0, #0x0
     a00:	ldr	w0, [x0]
     a04:	ldr	x1, [sp, #24]
     a08:	bl	0 <pthread_setspecific>
     a0c:	adrp	x0, 0 <gomp_mutex_init>
     a10:	add	x0, x0, #0x0
     a14:	bl	20 <gomp_mutex_lock>
     a18:	adrp	x0, 0 <gomp_mutex_init>
     a1c:	add	x0, x0, #0x0
     a20:	ldr	x1, [x0]
     a24:	ldr	x0, [sp, #24]
     a28:	str	x1, [x0, #32]
     a2c:	adrp	x0, 0 <gomp_mutex_init>
     a30:	add	x0, x0, #0x0
     a34:	ldr	x1, [sp, #24]
     a38:	str	x1, [x0]
     a3c:	adrp	x0, 0 <gomp_mutex_init>
     a40:	add	x0, x0, #0x0
     a44:	bl	98 <gomp_mutex_unlock>
     a48:	ldr	x0, [sp, #24]
     a4c:	ldp	x29, x30, [sp], #32
     a50:	ret
     a54:	nop

0000000000000a58 <goacc_destroy_thread>:
     a58:	stp	x29, x30, [sp, #-64]!
     a5c:	mov	x29, sp
     a60:	str	x0, [sp, #24]
     a64:	ldr	x0, [sp, #24]
     a68:	str	x0, [sp, #40]
     a6c:	adrp	x0, 0 <gomp_mutex_init>
     a70:	add	x0, x0, #0x0
     a74:	bl	20 <gomp_mutex_lock>
     a78:	ldr	x0, [sp, #40]
     a7c:	cmp	x0, #0x0
     a80:	b.eq	bac <goacc_destroy_thread+0x154>  // b.none
     a84:	ldr	x0, [sp, #40]
     a88:	ldr	x0, [x0, #8]
     a8c:	str	x0, [sp, #32]
     a90:	ldr	x0, [sp, #32]
     a94:	cmp	x0, #0x0
     a98:	b.eq	ac8 <goacc_destroy_thread+0x70>  // b.none
     a9c:	ldr	x0, [sp, #40]
     aa0:	ldr	x0, [x0, #40]
     aa4:	cmp	x0, #0x0
     aa8:	b.eq	ac8 <goacc_destroy_thread+0x70>  // b.none
     aac:	ldr	x0, [sp, #32]
     ab0:	ldr	x1, [x0, #264]
     ab4:	ldr	x0, [sp, #40]
     ab8:	ldr	x0, [x0, #40]
     abc:	blr	x1
     ac0:	ldr	x0, [sp, #40]
     ac4:	str	xzr, [x0, #40]
     ac8:	ldr	x0, [sp, #40]
     acc:	ldr	x0, [x0, #24]
     ad0:	cmp	x0, #0x0
     ad4:	b.eq	af8 <goacc_destroy_thread+0xa0>  // b.none
     ad8:	adrp	x0, 0 <gomp_mutex_init>
     adc:	add	x3, x0, #0x0
     ae0:	mov	w2, #0x16b                 	// #363
     ae4:	adrp	x0, 0 <gomp_mutex_init>
     ae8:	add	x1, x0, #0x0
     aec:	adrp	x0, 0 <gomp_mutex_init>
     af0:	add	x0, x0, #0x0
     af4:	bl	0 <__assert_fail>
     af8:	str	xzr, [sp, #48]
     afc:	adrp	x0, 0 <gomp_mutex_init>
     b00:	add	x0, x0, #0x0
     b04:	ldr	x0, [x0]
     b08:	str	x0, [sp, #56]
     b0c:	b	b74 <goacc_destroy_thread+0x11c>
     b10:	ldr	x1, [sp, #56]
     b14:	ldr	x0, [sp, #40]
     b18:	cmp	x1, x0
     b1c:	b.ne	b60 <goacc_destroy_thread+0x108>  // b.any
     b20:	ldr	x0, [sp, #48]
     b24:	cmp	x0, #0x0
     b28:	b.ne	b44 <goacc_destroy_thread+0xec>  // b.any
     b2c:	ldr	x0, [sp, #56]
     b30:	ldr	x1, [x0, #32]
     b34:	adrp	x0, 0 <gomp_mutex_init>
     b38:	add	x0, x0, #0x0
     b3c:	str	x1, [x0]
     b40:	b	b54 <goacc_destroy_thread+0xfc>
     b44:	ldr	x0, [sp, #56]
     b48:	ldr	x1, [x0, #32]
     b4c:	ldr	x0, [sp, #48]
     b50:	str	x1, [x0, #32]
     b54:	ldr	x0, [sp, #40]
     b58:	bl	0 <free>
     b5c:	b	b80 <goacc_destroy_thread+0x128>
     b60:	ldr	x0, [sp, #56]
     b64:	str	x0, [sp, #48]
     b68:	ldr	x0, [sp, #56]
     b6c:	ldr	x0, [x0, #32]
     b70:	str	x0, [sp, #56]
     b74:	ldr	x0, [sp, #56]
     b78:	cmp	x0, #0x0
     b7c:	b.ne	b10 <goacc_destroy_thread+0xb8>  // b.any
     b80:	ldr	x0, [sp, #56]
     b84:	cmp	x0, #0x0
     b88:	b.ne	bac <goacc_destroy_thread+0x154>  // b.any
     b8c:	adrp	x0, 0 <gomp_mutex_init>
     b90:	add	x3, x0, #0x0
     b94:	mov	w2, #0x17c                 	// #380
     b98:	adrp	x0, 0 <gomp_mutex_init>
     b9c:	add	x1, x0, #0x0
     ba0:	adrp	x0, 0 <gomp_mutex_init>
     ba4:	add	x0, x0, #0x0
     ba8:	bl	0 <__assert_fail>
     bac:	adrp	x0, 0 <gomp_mutex_init>
     bb0:	add	x0, x0, #0x0
     bb4:	bl	98 <gomp_mutex_unlock>
     bb8:	nop
     bbc:	ldp	x29, x30, [sp], #64
     bc0:	ret
     bc4:	nop

0000000000000bc8 <goacc_attach_host_thread_to_device>:
     bc8:	stp	x29, x30, [sp, #-64]!
     bcc:	mov	x29, sp
     bd0:	str	w0, [sp, #28]
     bd4:	bl	100 <goacc_thread>
     bd8:	str	x0, [sp, #56]
     bdc:	str	xzr, [sp, #40]
     be0:	str	xzr, [sp, #48]
     be4:	ldr	x0, [sp, #56]
     be8:	cmp	x0, #0x0
     bec:	b.eq	c24 <goacc_attach_host_thread_to_device+0x5c>  // b.none
     bf0:	ldr	x0, [sp, #56]
     bf4:	ldr	x0, [x0, #8]
     bf8:	cmp	x0, #0x0
     bfc:	b.eq	c24 <goacc_attach_host_thread_to_device+0x5c>  // b.none
     c00:	ldr	x0, [sp, #56]
     c04:	ldr	x0, [x0, #8]
     c08:	ldr	w0, [x0, #12]
     c0c:	ldr	w1, [sp, #28]
     c10:	cmp	w1, w0
     c14:	b.eq	d8c <goacc_attach_host_thread_to_device+0x1c4>  // b.none
     c18:	ldr	w0, [sp, #28]
     c1c:	cmp	w0, #0x0
     c20:	b.lt	d8c <goacc_attach_host_thread_to_device+0x1c4>  // b.tstop
     c24:	ldr	w0, [sp, #28]
     c28:	cmp	w0, #0x0
     c2c:	b.ge	c40 <goacc_attach_host_thread_to_device+0x78>  // b.tcont
     c30:	adrp	x0, 0 <goacc_device_num>
     c34:	add	x0, x0, #0x0
     c38:	ldr	w0, [x0]
     c3c:	str	w0, [sp, #28]
     c40:	ldr	x0, [sp, #56]
     c44:	cmp	x0, #0x0
     c48:	b.eq	c6c <goacc_attach_host_thread_to_device+0xa4>  // b.none
     c4c:	ldr	x0, [sp, #56]
     c50:	ldr	x0, [x0]
     c54:	cmp	x0, #0x0
     c58:	b.eq	c6c <goacc_attach_host_thread_to_device+0xa4>  // b.none
     c5c:	ldr	x0, [sp, #56]
     c60:	ldr	x0, [x0]
     c64:	str	x0, [sp, #48]
     c68:	b	cb0 <goacc_attach_host_thread_to_device+0xe8>
     c6c:	adrp	x0, 0 <gomp_mutex_init>
     c70:	add	x0, x0, #0x0
     c74:	ldr	x0, [x0]
     c78:	cmp	x0, #0x0
     c7c:	b.ne	ca0 <goacc_attach_host_thread_to_device+0xd8>  // b.any
     c80:	adrp	x0, 0 <gomp_mutex_init>
     c84:	add	x3, x0, #0x0
     c88:	mov	w2, #0x19a                 	// #410
     c8c:	adrp	x0, 0 <gomp_mutex_init>
     c90:	add	x1, x0, #0x0
     c94:	adrp	x0, 0 <gomp_mutex_init>
     c98:	add	x0, x0, #0x0
     c9c:	bl	0 <__assert_fail>
     ca0:	adrp	x0, 0 <gomp_mutex_init>
     ca4:	add	x0, x0, #0x0
     ca8:	ldr	x0, [x0]
     cac:	str	x0, [sp, #48]
     cb0:	ldr	x0, [sp, #48]
     cb4:	ldr	x0, [x0, #48]
     cb8:	blr	x0
     cbc:	str	w0, [sp, #36]
     cc0:	ldr	w0, [sp, #36]
     cc4:	cmp	w0, #0x0
     cc8:	b.le	cdc <goacc_attach_host_thread_to_device+0x114>
     ccc:	ldr	w1, [sp, #28]
     cd0:	ldr	w0, [sp, #36]
     cd4:	cmp	w1, w0
     cd8:	b.lt	cf4 <goacc_attach_host_thread_to_device+0x12c>  // b.tstop
     cdc:	ldr	x0, [sp, #48]
     ce0:	ldr	w0, [x0, #16]
     ce4:	bl	e8 <acc_device_type>
     ce8:	ldr	w2, [sp, #36]
     cec:	ldr	w1, [sp, #28]
     cf0:	bl	5d8 <acc_dev_num_out_of_range>
     cf4:	ldr	x0, [sp, #56]
     cf8:	cmp	x0, #0x0
     cfc:	b.ne	d08 <goacc_attach_host_thread_to_device+0x140>  // b.any
     d00:	bl	9d0 <goacc_new_thread>
     d04:	str	x0, [sp, #56]
     d08:	ldr	x0, [sp, #56]
     d0c:	ldr	x1, [sp, #48]
     d10:	str	x1, [x0]
     d14:	ldrsw	x1, [sp, #28]
     d18:	mov	x0, x1
     d1c:	lsl	x0, x0, #2
     d20:	add	x0, x0, x1
     d24:	lsl	x0, x0, #2
     d28:	sub	x0, x0, x1
     d2c:	lsl	x0, x0, #4
     d30:	mov	x1, x0
     d34:	ldr	x0, [sp, #48]
     d38:	add	x0, x0, x1
     d3c:	str	x0, [sp, #40]
     d40:	ldr	x0, [sp, #56]
     d44:	ldr	x1, [sp, #40]
     d48:	str	x1, [x0, #8]
     d4c:	ldr	x0, [sp, #56]
     d50:	str	xzr, [x0, #16]
     d54:	ldr	x0, [sp, #56]
     d58:	str	xzr, [x0, #24]
     d5c:	ldr	x0, [sp, #40]
     d60:	ldr	x1, [x0, #256]
     d64:	ldr	w0, [sp, #28]
     d68:	blr	x1
     d6c:	mov	x1, x0
     d70:	ldr	x0, [sp, #56]
     d74:	str	x1, [x0, #40]
     d78:	ldr	x0, [sp, #40]
     d7c:	ldr	x1, [x0, #248]
     d80:	mov	w0, #0xfffffffe            	// #-2
     d84:	blr	x1
     d88:	b	d90 <goacc_attach_host_thread_to_device+0x1c8>
     d8c:	nop
     d90:	ldp	x29, x30, [sp], #64
     d94:	ret

0000000000000d98 <acc_init>:
     d98:	stp	x29, x30, [sp, #-32]!
     d9c:	mov	x29, sp
     da0:	str	w0, [sp, #28]
     da4:	bl	0 <gomp_init_targets_once>
     da8:	adrp	x0, 0 <gomp_mutex_init>
     dac:	add	x0, x0, #0x0
     db0:	bl	20 <gomp_mutex_lock>
     db4:	ldr	w0, [sp, #28]
     db8:	bl	620 <acc_init_1>
     dbc:	mov	x1, x0
     dc0:	adrp	x0, 0 <gomp_mutex_init>
     dc4:	add	x0, x0, #0x0
     dc8:	str	x1, [x0]
     dcc:	adrp	x0, 0 <gomp_mutex_init>
     dd0:	add	x0, x0, #0x0
     dd4:	bl	98 <gomp_mutex_unlock>
     dd8:	mov	w0, #0xffffffff            	// #-1
     ddc:	bl	bc8 <goacc_attach_host_thread_to_device>
     de0:	nop
     de4:	ldp	x29, x30, [sp], #32
     de8:	ret
     dec:	nop

0000000000000df0 <acc_shutdown>:
     df0:	stp	x29, x30, [sp, #-32]!
     df4:	mov	x29, sp
     df8:	str	w0, [sp, #28]
     dfc:	bl	0 <gomp_init_targets_once>
     e00:	adrp	x0, 0 <gomp_mutex_init>
     e04:	add	x0, x0, #0x0
     e08:	bl	20 <gomp_mutex_lock>
     e0c:	ldr	w0, [sp, #28]
     e10:	bl	718 <acc_shutdown_1>
     e14:	adrp	x0, 0 <gomp_mutex_init>
     e18:	add	x0, x0, #0x0
     e1c:	bl	98 <gomp_mutex_unlock>
     e20:	nop
     e24:	ldp	x29, x30, [sp], #32
     e28:	ret
     e2c:	nop

0000000000000e30 <acc_get_num_devices>:
     e30:	stp	x29, x30, [sp, #-48]!
     e34:	mov	x29, sp
     e38:	str	w0, [sp, #28]
     e3c:	str	wzr, [sp, #44]
     e40:	ldr	w0, [sp, #28]
     e44:	cmp	w0, #0x0
     e48:	b.ne	e54 <acc_get_num_devices+0x24>  // b.any
     e4c:	mov	w0, #0x0                   	// #0
     e50:	b	eb8 <acc_get_num_devices+0x88>
     e54:	bl	0 <gomp_init_targets_once>
     e58:	adrp	x0, 0 <gomp_mutex_init>
     e5c:	add	x0, x0, #0x0
     e60:	bl	20 <gomp_mutex_lock>
     e64:	mov	w1, #0x0                   	// #0
     e68:	ldr	w0, [sp, #28]
     e6c:	bl	320 <resolve_device>
     e70:	str	x0, [sp, #32]
     e74:	adrp	x0, 0 <gomp_mutex_init>
     e78:	add	x0, x0, #0x0
     e7c:	bl	98 <gomp_mutex_unlock>
     e80:	ldr	x0, [sp, #32]
     e84:	cmp	x0, #0x0
     e88:	b.ne	e94 <acc_get_num_devices+0x64>  // b.any
     e8c:	mov	w0, #0x0                   	// #0
     e90:	b	eb8 <acc_get_num_devices+0x88>
     e94:	ldr	x0, [sp, #32]
     e98:	ldr	x0, [x0, #48]
     e9c:	blr	x0
     ea0:	str	w0, [sp, #44]
     ea4:	ldr	w0, [sp, #44]
     ea8:	cmp	w0, #0x0
     eac:	b.ge	eb4 <acc_get_num_devices+0x84>  // b.tcont
     eb0:	str	wzr, [sp, #44]
     eb4:	ldr	w0, [sp, #44]
     eb8:	ldp	x29, x30, [sp], #48
     ebc:	ret

0000000000000ec0 <acc_set_device_type>:
     ec0:	stp	x29, x30, [sp, #-64]!
     ec4:	mov	x29, sp
     ec8:	str	w0, [sp, #28]
     ecc:	bl	100 <goacc_thread>
     ed0:	str	x0, [sp, #56]
     ed4:	bl	0 <gomp_init_targets_once>
     ed8:	adrp	x0, 0 <gomp_mutex_init>
     edc:	add	x0, x0, #0x0
     ee0:	bl	20 <gomp_mutex_lock>
     ee4:	mov	w1, #0x1                   	// #1
     ee8:	ldr	w0, [sp, #28]
     eec:	bl	320 <resolve_device>
     ef0:	str	x0, [sp, #48]
     ef4:	adrp	x0, 0 <gomp_mutex_init>
     ef8:	add	x0, x0, #0x0
     efc:	ldr	x1, [sp, #48]
     f00:	str	x1, [x0]
     f04:	adrp	x0, 0 <goacc_device_num>
     f08:	add	x0, x0, #0x0
     f0c:	ldr	w0, [x0]
     f10:	sxtw	x1, w0
     f14:	mov	x0, x1
     f18:	lsl	x0, x0, #2
     f1c:	add	x0, x0, x1
     f20:	lsl	x0, x0, #2
     f24:	sub	x0, x0, x1
     f28:	lsl	x0, x0, #4
     f2c:	mov	x1, x0
     f30:	ldr	x0, [sp, #48]
     f34:	add	x0, x0, x1
     f38:	str	x0, [sp, #40]
     f3c:	ldr	x0, [sp, #40]
     f40:	add	x0, x0, #0xa8
     f44:	bl	20 <gomp_mutex_lock>
     f48:	ldr	x0, [sp, #40]
     f4c:	ldr	w0, [x0, #172]
     f50:	cmp	w0, #0x0
     f54:	b.ne	f60 <acc_set_device_type+0xa0>  // b.any
     f58:	ldr	x0, [sp, #40]
     f5c:	bl	0 <gomp_init_device>
     f60:	ldr	x0, [sp, #40]
     f64:	add	x0, x0, #0xa8
     f68:	bl	98 <gomp_mutex_unlock>
     f6c:	adrp	x0, 0 <gomp_mutex_init>
     f70:	add	x0, x0, #0x0
     f74:	bl	98 <gomp_mutex_unlock>
     f78:	ldr	x0, [sp, #56]
     f7c:	cmp	x0, #0x0
     f80:	b.eq	fcc <acc_set_device_type+0x10c>  // b.none
     f84:	ldr	x0, [sp, #56]
     f88:	ldr	x0, [x0]
     f8c:	ldr	x1, [sp, #48]
     f90:	cmp	x1, x0
     f94:	b.eq	fcc <acc_set_device_type+0x10c>  // b.none
     f98:	ldr	x0, [sp, #56]
     f9c:	str	xzr, [x0, #8]
     fa0:	ldr	x0, [sp, #56]
     fa4:	ldr	x1, [x0, #8]
     fa8:	ldr	x0, [sp, #56]
     fac:	str	x1, [x0]
     fb0:	ldr	x0, [sp, #56]
     fb4:	ldr	x0, [x0, #24]
     fb8:	cmp	x0, #0x0
     fbc:	b.eq	fcc <acc_set_device_type+0x10c>  // b.none
     fc0:	adrp	x0, 0 <gomp_mutex_init>
     fc4:	add	x0, x0, #0x0
     fc8:	bl	0 <gomp_fatal>
     fcc:	mov	w0, #0xffffffff            	// #-1
     fd0:	bl	bc8 <goacc_attach_host_thread_to_device>
     fd4:	nop
     fd8:	ldp	x29, x30, [sp], #64
     fdc:	ret

0000000000000fe0 <acc_get_device_type>:
     fe0:	stp	x29, x30, [sp, #-48]!
     fe4:	mov	x29, sp
     fe8:	str	wzr, [sp, #44]
     fec:	bl	100 <goacc_thread>
     ff0:	str	x0, [sp, #32]
     ff4:	ldr	x0, [sp, #32]
     ff8:	cmp	x0, #0x0
     ffc:	b.eq	1028 <acc_get_device_type+0x48>  // b.none
    1000:	ldr	x0, [sp, #32]
    1004:	ldr	x0, [x0]
    1008:	cmp	x0, #0x0
    100c:	b.eq	1028 <acc_get_device_type+0x48>  // b.none
    1010:	ldr	x0, [sp, #32]
    1014:	ldr	x0, [x0]
    1018:	ldr	w0, [x0, #16]
    101c:	bl	e8 <acc_device_type>
    1020:	str	w0, [sp, #44]
    1024:	b	1064 <acc_get_device_type+0x84>
    1028:	bl	0 <gomp_init_targets_once>
    102c:	adrp	x0, 0 <gomp_mutex_init>
    1030:	add	x0, x0, #0x0
    1034:	bl	20 <gomp_mutex_lock>
    1038:	mov	w1, #0x1                   	// #1
    103c:	mov	w0, #0x1                   	// #1
    1040:	bl	320 <resolve_device>
    1044:	str	x0, [sp, #24]
    1048:	adrp	x0, 0 <gomp_mutex_init>
    104c:	add	x0, x0, #0x0
    1050:	bl	98 <gomp_mutex_unlock>
    1054:	ldr	x0, [sp, #24]
    1058:	ldr	w0, [x0, #16]
    105c:	bl	e8 <acc_device_type>
    1060:	str	w0, [sp, #44]
    1064:	ldr	w0, [sp, #44]
    1068:	cmp	w0, #0x1
    106c:	b.eq	107c <acc_get_device_type+0x9c>  // b.none
    1070:	ldr	w0, [sp, #44]
    1074:	cmp	w0, #0x4
    1078:	b.ne	109c <acc_get_device_type+0xbc>  // b.any
    107c:	adrp	x0, 0 <gomp_mutex_init>
    1080:	add	x3, x0, #0x0
    1084:	mov	w2, #0x226                 	// #550
    1088:	adrp	x0, 0 <gomp_mutex_init>
    108c:	add	x1, x0, #0x0
    1090:	adrp	x0, 0 <gomp_mutex_init>
    1094:	add	x0, x0, #0x0
    1098:	bl	0 <__assert_fail>
    109c:	ldr	w0, [sp, #44]
    10a0:	ldp	x29, x30, [sp], #48
    10a4:	ret

00000000000010a8 <acc_get_device_num>:
    10a8:	stp	x29, x30, [sp, #-48]!
    10ac:	mov	x29, sp
    10b0:	str	w0, [sp, #28]
    10b4:	bl	100 <goacc_thread>
    10b8:	str	x0, [sp, #40]
    10bc:	ldr	w0, [sp, #28]
    10c0:	cmp	w0, #0x5
    10c4:	b.le	10dc <acc_get_device_num+0x34>
    10c8:	ldr	w0, [sp, #28]
    10cc:	mov	w1, w0
    10d0:	adrp	x0, 0 <gomp_mutex_init>
    10d4:	add	x0, x0, #0x0
    10d8:	bl	0 <gomp_fatal>
    10dc:	bl	0 <gomp_init_targets_once>
    10e0:	adrp	x0, 0 <gomp_mutex_init>
    10e4:	add	x0, x0, #0x0
    10e8:	bl	20 <gomp_mutex_lock>
    10ec:	mov	w1, #0x1                   	// #1
    10f0:	ldr	w0, [sp, #28]
    10f4:	bl	320 <resolve_device>
    10f8:	str	x0, [sp, #32]
    10fc:	adrp	x0, 0 <gomp_mutex_init>
    1100:	add	x0, x0, #0x0
    1104:	bl	98 <gomp_mutex_unlock>
    1108:	ldr	x0, [sp, #40]
    110c:	cmp	x0, #0x0
    1110:	b.eq	1148 <acc_get_device_num+0xa0>  // b.none
    1114:	ldr	x0, [sp, #40]
    1118:	ldr	x0, [x0]
    111c:	ldr	x1, [sp, #32]
    1120:	cmp	x1, x0
    1124:	b.ne	1148 <acc_get_device_num+0xa0>  // b.any
    1128:	ldr	x0, [sp, #40]
    112c:	ldr	x0, [x0, #8]
    1130:	cmp	x0, #0x0
    1134:	b.eq	1148 <acc_get_device_num+0xa0>  // b.none
    1138:	ldr	x0, [sp, #40]
    113c:	ldr	x0, [x0, #8]
    1140:	ldr	w0, [x0, #12]
    1144:	b	1154 <acc_get_device_num+0xac>
    1148:	adrp	x0, 0 <goacc_device_num>
    114c:	add	x0, x0, #0x0
    1150:	ldr	w0, [x0]
    1154:	ldp	x29, x30, [sp], #48
    1158:	ret
    115c:	nop

0000000000001160 <acc_set_device_num>:
    1160:	stp	x29, x30, [sp, #-64]!
    1164:	mov	x29, sp
    1168:	str	w0, [sp, #28]
    116c:	str	w1, [sp, #24]
    1170:	bl	0 <gomp_init_targets_once>
    1174:	ldr	w0, [sp, #28]
    1178:	cmp	w0, #0x0
    117c:	b.ge	1190 <acc_set_device_num+0x30>  // b.tcont
    1180:	adrp	x0, 0 <goacc_device_num>
    1184:	add	x0, x0, #0x0
    1188:	ldr	w0, [x0]
    118c:	str	w0, [sp, #28]
    1190:	ldr	w0, [sp, #24]
    1194:	cmp	w0, #0x0
    1198:	b.ne	11a8 <acc_set_device_num+0x48>  // b.any
    119c:	ldr	w0, [sp, #28]
    11a0:	bl	bc8 <goacc_attach_host_thread_to_device>
    11a4:	b	1280 <acc_set_device_num+0x120>
    11a8:	adrp	x0, 0 <gomp_mutex_init>
    11ac:	add	x0, x0, #0x0
    11b0:	bl	20 <gomp_mutex_lock>
    11b4:	mov	w1, #0x1                   	// #1
    11b8:	ldr	w0, [sp, #24]
    11bc:	bl	320 <resolve_device>
    11c0:	str	x0, [sp, #56]
    11c4:	adrp	x0, 0 <gomp_mutex_init>
    11c8:	add	x0, x0, #0x0
    11cc:	ldr	x1, [sp, #56]
    11d0:	str	x1, [x0]
    11d4:	ldr	x0, [sp, #56]
    11d8:	ldr	x0, [x0, #48]
    11dc:	blr	x0
    11e0:	str	w0, [sp, #52]
    11e4:	ldr	w0, [sp, #52]
    11e8:	cmp	w0, #0x0
    11ec:	b.le	1200 <acc_set_device_num+0xa0>
    11f0:	ldr	w1, [sp, #28]
    11f4:	ldr	w0, [sp, #52]
    11f8:	cmp	w1, w0
    11fc:	b.lt	1210 <acc_set_device_num+0xb0>  // b.tstop
    1200:	ldr	w2, [sp, #52]
    1204:	ldr	w1, [sp, #28]
    1208:	ldr	w0, [sp, #24]
    120c:	bl	5d8 <acc_dev_num_out_of_range>
    1210:	ldrsw	x1, [sp, #28]
    1214:	mov	x0, x1
    1218:	lsl	x0, x0, #2
    121c:	add	x0, x0, x1
    1220:	lsl	x0, x0, #2
    1224:	sub	x0, x0, x1
    1228:	lsl	x0, x0, #4
    122c:	mov	x1, x0
    1230:	ldr	x0, [sp, #56]
    1234:	add	x0, x0, x1
    1238:	str	x0, [sp, #40]
    123c:	ldr	x0, [sp, #40]
    1240:	add	x0, x0, #0xa8
    1244:	bl	20 <gomp_mutex_lock>
    1248:	ldr	x0, [sp, #40]
    124c:	ldr	w0, [x0, #172]
    1250:	cmp	w0, #0x0
    1254:	b.ne	1260 <acc_set_device_num+0x100>  // b.any
    1258:	ldr	x0, [sp, #40]
    125c:	bl	0 <gomp_init_device>
    1260:	ldr	x0, [sp, #40]
    1264:	add	x0, x0, #0xa8
    1268:	bl	98 <gomp_mutex_unlock>
    126c:	adrp	x0, 0 <gomp_mutex_init>
    1270:	add	x0, x0, #0x0
    1274:	bl	98 <gomp_mutex_unlock>
    1278:	ldr	w0, [sp, #28]
    127c:	bl	bc8 <goacc_attach_host_thread_to_device>
    1280:	adrp	x0, 0 <goacc_device_num>
    1284:	add	x0, x0, #0x0
    1288:	ldr	w1, [sp, #28]
    128c:	str	w1, [x0]
    1290:	nop
    1294:	ldp	x29, x30, [sp], #64
    1298:	ret
    129c:	nop

00000000000012a0 <acc_on_device>:
    12a0:	tst	w0, #0xfffffffd
    12a4:	cset	w0, eq  // eq = none
    12a8:	ret
    12ac:	nop

00000000000012b0 <goacc_runtime_initialize>:
    12b0:	stp	x29, x30, [sp, #-16]!
    12b4:	mov	x29, sp
    12b8:	adrp	x0, 0 <gomp_mutex_init>
    12bc:	add	x0, x0, #0x0
    12c0:	bl	0 <gomp_mutex_init>
    12c4:	adrp	x0, 0 <gomp_mutex_init>
    12c8:	add	x1, x0, #0x0
    12cc:	adrp	x0, 0 <gomp_mutex_init>
    12d0:	add	x0, x0, #0x0
    12d4:	bl	0 <pthread_key_create>
    12d8:	adrp	x0, 0 <gomp_mutex_init>
    12dc:	add	x0, x0, #0x0
    12e0:	str	xzr, [x0]
    12e4:	adrp	x0, 0 <gomp_mutex_init>
    12e8:	add	x0, x0, #0x0
    12ec:	str	xzr, [x0]
    12f0:	adrp	x0, 0 <gomp_mutex_init>
    12f4:	add	x0, x0, #0x0
    12f8:	bl	0 <gomp_mutex_init>
    12fc:	bl	0 <goacc_host_init>
    1300:	nop
    1304:	ldp	x29, x30, [sp], #16
    1308:	ret
    130c:	nop

0000000000001310 <goacc_save_and_set_bind>:
    1310:	stp	x29, x30, [sp, #-48]!
    1314:	mov	x29, sp
    1318:	str	w0, [sp, #28]
    131c:	bl	100 <goacc_thread>
    1320:	str	x0, [sp, #40]
    1324:	ldr	x0, [sp, #40]
    1328:	ldr	x0, [x0, #16]
    132c:	cmp	x0, #0x0
    1330:	b.eq	1354 <goacc_save_and_set_bind+0x44>  // b.none
    1334:	adrp	x0, 0 <gomp_mutex_init>
    1338:	add	x3, x0, #0x0
    133c:	mov	w2, #0x29b                 	// #667
    1340:	adrp	x0, 0 <gomp_mutex_init>
    1344:	add	x1, x0, #0x0
    1348:	adrp	x0, 0 <gomp_mutex_init>
    134c:	add	x0, x0, #0x0
    1350:	bl	0 <__assert_fail>
    1354:	ldr	x0, [sp, #40]
    1358:	ldr	x1, [x0, #8]
    135c:	ldr	x0, [sp, #40]
    1360:	str	x1, [x0, #16]
    1364:	adrp	x0, 0 <gomp_mutex_init>
    1368:	add	x0, x0, #0x0
    136c:	ldrsw	x1, [sp, #28]
    1370:	ldr	x1, [x0, x1, lsl #3]
    1374:	ldr	x0, [sp, #40]
    1378:	str	x1, [x0, #8]
    137c:	nop
    1380:	ldp	x29, x30, [sp], #48
    1384:	ret

0000000000001388 <goacc_restore_bind>:
    1388:	stp	x29, x30, [sp, #-32]!
    138c:	mov	x29, sp
    1390:	bl	100 <goacc_thread>
    1394:	str	x0, [sp, #24]
    1398:	ldr	x0, [sp, #24]
    139c:	ldr	x1, [x0, #16]
    13a0:	ldr	x0, [sp, #24]
    13a4:	str	x1, [x0, #8]
    13a8:	ldr	x0, [sp, #24]
    13ac:	str	xzr, [x0, #16]
    13b0:	nop
    13b4:	ldp	x29, x30, [sp], #32
    13b8:	ret
    13bc:	nop

00000000000013c0 <goacc_lazy_initialize>:
    13c0:	stp	x29, x30, [sp, #-32]!
    13c4:	mov	x29, sp
    13c8:	bl	100 <goacc_thread>
    13cc:	str	x0, [sp, #24]
    13d0:	ldr	x0, [sp, #24]
    13d4:	cmp	x0, #0x0
    13d8:	b.eq	13ec <goacc_lazy_initialize+0x2c>  // b.none
    13dc:	ldr	x0, [sp, #24]
    13e0:	ldr	x0, [x0, #8]
    13e4:	cmp	x0, #0x0
    13e8:	b.ne	1418 <goacc_lazy_initialize+0x58>  // b.any
    13ec:	adrp	x0, 0 <gomp_mutex_init>
    13f0:	add	x0, x0, #0x0
    13f4:	ldr	x0, [x0]
    13f8:	cmp	x0, #0x0
    13fc:	b.ne	140c <goacc_lazy_initialize+0x4c>  // b.any
    1400:	mov	w0, #0x1                   	// #1
    1404:	bl	d98 <acc_init>
    1408:	b	141c <goacc_lazy_initialize+0x5c>
    140c:	mov	w0, #0xffffffff            	// #-1
    1410:	bl	bc8 <goacc_attach_host_thread_to_device>
    1414:	b	141c <goacc_lazy_initialize+0x5c>
    1418:	nop
    141c:	ldp	x29, x30, [sp], #32
    1420:	ret

oacc-mem.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_mutex_lock>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	str	x0, [sp, #24]
       c:	str	wzr, [sp, #44]
      10:	ldr	x1, [sp, #24]
      14:	add	x0, sp, #0x2c
      18:	ldr	w3, [x0]
      1c:	mov	w4, #0x1                   	// #1
      20:	ldaxr	w2, [x1]
      24:	cmp	w2, w3
      28:	b.ne	34 <gomp_mutex_lock+0x34>  // b.any
      2c:	stxr	w5, w4, [x1]
      30:	cbnz	w5, 20 <gomp_mutex_lock+0x20>
      34:	cset	w1, eq  // eq = none
      38:	cmp	w1, #0x0
      3c:	b.ne	44 <gomp_mutex_lock+0x44>  // b.any
      40:	str	w2, [x0]
      44:	mov	w0, w1
      48:	eor	w0, w0, #0x1
      4c:	and	w0, w0, #0xff
      50:	cmp	w0, #0x0
      54:	b.eq	68 <gomp_mutex_lock+0x68>  // b.none
      58:	ldr	w0, [sp, #44]
      5c:	mov	w1, w0
      60:	ldr	x0, [sp, #24]
      64:	bl	0 <gomp_mutex_lock_slow>
      68:	nop
      6c:	ldp	x29, x30, [sp], #48
      70:	ret

0000000000000074 <gomp_mutex_unlock>:
      74:	stp	x29, x30, [sp, #-48]!
      78:	mov	x29, sp
      7c:	str	x0, [sp, #24]
      80:	ldr	x1, [sp, #24]
      84:	ldxr	w0, [x1]
      88:	stlxr	w2, wzr, [x1]
      8c:	cbnz	w2, 84 <gomp_mutex_unlock+0x10>
      90:	str	w0, [sp, #44]
      94:	ldr	w0, [sp, #44]
      98:	lsr	w0, w0, #31
      9c:	and	w0, w0, #0xff
      a0:	and	x0, x0, #0xff
      a4:	cmp	x0, #0x0
      a8:	b.eq	b4 <gomp_mutex_unlock+0x40>  // b.none
      ac:	ldr	x0, [sp, #24]
      b0:	bl	0 <gomp_mutex_unlock_slow>
      b4:	nop
      b8:	ldp	x29, x30, [sp], #48
      bc:	ret

00000000000000c0 <goacc_thread>:
      c0:	mrs	x1, tpidr_el0
      c4:	adrp	x0, 0 <goacc_tls_data>
      c8:	ldr	x0, [x0]
      cc:	add	x0, x1, x0
      d0:	ldr	x0, [x0]
      d4:	ret

00000000000000d8 <lookup_host>:
      d8:	stp	x29, x30, [sp, #-112]!
      dc:	mov	x29, sp
      e0:	str	x0, [sp, #40]
      e4:	str	x1, [sp, #32]
      e8:	str	x2, [sp, #24]
      ec:	ldr	x0, [sp, #32]
      f0:	str	x0, [sp, #48]
      f4:	ldr	x1, [sp, #32]
      f8:	ldr	x0, [sp, #24]
      fc:	add	x0, x1, x0
     100:	str	x0, [sp, #56]
     104:	ldr	x0, [sp, #40]
     108:	add	x0, x0, #0xa0
     10c:	add	x1, sp, #0x30
     110:	bl	0 <splay_tree_prefix_splay_tree_lookup>
     114:	str	x0, [sp, #104]
     118:	ldr	x0, [sp, #104]
     11c:	ldp	x29, x30, [sp], #112
     120:	ret

0000000000000124 <lookup_dev>:
     124:	sub	sp, sp, #0x40
     128:	str	x0, [sp, #24]
     12c:	str	x1, [sp, #16]
     130:	str	x2, [sp, #8]
     134:	ldr	x0, [sp, #24]
     138:	cmp	x0, #0x0
     13c:	b.ne	148 <lookup_dev+0x24>  // b.any
     140:	mov	x0, #0x0                   	// #0
     144:	b	250 <lookup_dev+0x12c>
     148:	ldr	x0, [sp, #24]
     14c:	str	x0, [sp, #48]
     150:	b	190 <lookup_dev+0x6c>
     154:	ldr	x0, [sp, #48]
     158:	ldr	x1, [x0, #16]
     15c:	ldr	x0, [sp, #16]
     160:	cmp	x1, x0
     164:	b.hi	184 <lookup_dev+0x60>  // b.pmore
     168:	ldr	x0, [sp, #48]
     16c:	ldr	x1, [x0, #24]
     170:	ldr	x2, [sp, #16]
     174:	ldr	x0, [sp, #8]
     178:	add	x0, x2, x0
     17c:	cmp	x1, x0
     180:	b.cs	1a0 <lookup_dev+0x7c>  // b.hs, b.nlast
     184:	ldr	x0, [sp, #48]
     188:	ldr	x0, [x0, #40]
     18c:	str	x0, [sp, #48]
     190:	ldr	x0, [sp, #48]
     194:	cmp	x0, #0x0
     198:	b.ne	154 <lookup_dev+0x30>  // b.any
     19c:	b	1a4 <lookup_dev+0x80>
     1a0:	nop
     1a4:	ldr	x0, [sp, #48]
     1a8:	cmp	x0, #0x0
     1ac:	b.ne	1b8 <lookup_dev+0x94>  // b.any
     1b0:	mov	x0, #0x0                   	// #0
     1b4:	b	250 <lookup_dev+0x12c>
     1b8:	str	wzr, [sp, #60]
     1bc:	b	238 <lookup_dev+0x114>
     1c0:	ldr	x0, [sp, #48]
     1c4:	ldr	x2, [x0, #8]
     1c8:	ldrsw	x1, [sp, #60]
     1cc:	mov	x0, x1
     1d0:	lsl	x0, x0, #3
     1d4:	add	x0, x0, x1
     1d8:	lsl	x0, x0, #3
     1dc:	add	x0, x2, x0
     1e0:	str	x0, [sp, #40]
     1e4:	ldr	x0, [sp, #40]
     1e8:	ldr	x1, [x0, #24]
     1ec:	ldr	x0, [sp, #48]
     1f0:	ldr	x0, [x0, #16]
     1f4:	sub	x0, x1, x0
     1f8:	ldr	x1, [sp, #16]
     1fc:	add	x0, x1, x0
     200:	str	x0, [sp, #32]
     204:	ldr	x0, [sp, #40]
     208:	ldr	x0, [x0]
     20c:	ldr	x1, [sp, #32]
     210:	add	x0, x1, x0
     214:	ldr	x1, [sp, #40]
     218:	ldr	x1, [x1, #8]
     21c:	cmp	x0, x1
     220:	b.hi	22c <lookup_dev+0x108>  // b.pmore
     224:	ldr	x0, [sp, #40]
     228:	b	250 <lookup_dev+0x12c>
     22c:	ldr	w0, [sp, #60]
     230:	add	w0, w0, #0x1
     234:	str	w0, [sp, #60]
     238:	ldrsw	x1, [sp, #60]
     23c:	ldr	x0, [sp, #48]
     240:	ldr	x0, [x0, #48]
     244:	cmp	x1, x0
     248:	b.cc	1c0 <lookup_dev+0x9c>  // b.lo, b.ul, b.last
     24c:	mov	x0, #0x0                   	// #0
     250:	add	sp, sp, #0x40
     254:	ret

0000000000000258 <acc_malloc>:
     258:	stp	x29, x30, [sp, #-48]!
     25c:	mov	x29, sp
     260:	str	x0, [sp, #24]
     264:	ldr	x0, [sp, #24]
     268:	cmp	x0, #0x0
     26c:	b.ne	278 <acc_malloc+0x20>  // b.any
     270:	mov	x0, #0x0                   	// #0
     274:	b	2f8 <acc_malloc+0xa0>
     278:	bl	0 <goacc_lazy_initialize>
     27c:	bl	c0 <goacc_thread>
     280:	str	x0, [sp, #40]
     284:	ldr	x0, [sp, #40]
     288:	ldr	x0, [x0, #8]
     28c:	cmp	x0, #0x0
     290:	b.ne	2b4 <acc_malloc+0x5c>  // b.any
     294:	adrp	x0, 0 <gomp_mutex_lock>
     298:	add	x3, x0, #0x0
     29c:	mov	w2, #0x6a                  	// #106
     2a0:	adrp	x0, 0 <gomp_mutex_lock>
     2a4:	add	x1, x0, #0x0
     2a8:	adrp	x0, 0 <gomp_mutex_lock>
     2ac:	add	x0, x0, #0x0
     2b0:	bl	0 <__assert_fail>
     2b4:	ldr	x0, [sp, #40]
     2b8:	ldr	x0, [x0, #8]
     2bc:	ldr	w0, [x0, #8]
     2c0:	and	w0, w0, #0x1
     2c4:	cmp	w0, #0x0
     2c8:	b.eq	2d8 <acc_malloc+0x80>  // b.none
     2cc:	ldr	x0, [sp, #24]
     2d0:	bl	0 <malloc>
     2d4:	b	2f8 <acc_malloc+0xa0>
     2d8:	ldr	x0, [sp, #40]
     2dc:	ldr	x0, [x0, #8]
     2e0:	ldr	x2, [x0, #96]
     2e4:	ldr	x0, [sp, #40]
     2e8:	ldr	x0, [x0, #8]
     2ec:	ldr	w0, [x0, #12]
     2f0:	ldr	x1, [sp, #24]
     2f4:	blr	x2
     2f8:	ldp	x29, x30, [sp], #48
     2fc:	ret

0000000000000300 <acc_free>:
     300:	stp	x29, x30, [sp, #-64]!
     304:	mov	x29, sp
     308:	str	x0, [sp, #24]
     30c:	ldr	x0, [sp, #24]
     310:	cmp	x0, #0x0
     314:	b.eq	44c <acc_free+0x14c>  // b.none
     318:	bl	c0 <goacc_thread>
     31c:	str	x0, [sp, #56]
     320:	ldr	x0, [sp, #56]
     324:	cmp	x0, #0x0
     328:	b.eq	33c <acc_free+0x3c>  // b.none
     32c:	ldr	x0, [sp, #56]
     330:	ldr	x0, [x0, #8]
     334:	cmp	x0, #0x0
     338:	b.ne	35c <acc_free+0x5c>  // b.any
     33c:	adrp	x0, 0 <gomp_mutex_lock>
     340:	add	x3, x0, #0x0
     344:	mov	w2, #0x7f                  	// #127
     348:	adrp	x0, 0 <gomp_mutex_lock>
     34c:	add	x1, x0, #0x0
     350:	adrp	x0, 0 <gomp_mutex_lock>
     354:	add	x0, x0, #0x0
     358:	bl	0 <__assert_fail>
     35c:	ldr	x0, [sp, #56]
     360:	ldr	x0, [x0, #8]
     364:	str	x0, [sp, #48]
     368:	ldr	x0, [sp, #48]
     36c:	ldr	w0, [x0, #8]
     370:	and	w0, w0, #0x1
     374:	cmp	w0, #0x0
     378:	b.eq	388 <acc_free+0x88>  // b.none
     37c:	ldr	x0, [sp, #24]
     380:	bl	0 <free>
     384:	b	450 <acc_free+0x150>
     388:	ldr	x0, [sp, #48]
     38c:	add	x0, x0, #0xa8
     390:	bl	0 <gomp_mutex_lock>
     394:	ldr	x0, [sp, #48]
     398:	ldr	x0, [x0, #176]
     39c:	mov	x2, #0x1                   	// #1
     3a0:	ldr	x1, [sp, #24]
     3a4:	bl	124 <lookup_dev>
     3a8:	str	x0, [sp, #40]
     3ac:	ldr	x0, [sp, #40]
     3b0:	cmp	x0, #0x0
     3b4:	b.eq	400 <acc_free+0x100>  // b.none
     3b8:	ldr	x0, [sp, #40]
     3bc:	ldr	x1, [x0, #24]
     3c0:	ldr	x0, [sp, #40]
     3c4:	ldr	x0, [x0, #16]
     3c8:	ldr	x0, [x0, #16]
     3cc:	sub	x0, x1, x0
     3d0:	ldr	x1, [sp, #24]
     3d4:	add	x0, x1, x0
     3d8:	str	x0, [sp, #32]
     3dc:	ldr	x0, [sp, #48]
     3e0:	add	x0, x0, #0xa8
     3e4:	bl	74 <gomp_mutex_unlock>
     3e8:	ldr	x0, [sp, #40]
     3ec:	ldr	x0, [x0]
     3f0:	ldr	x1, [sp, #32]
     3f4:	add	x0, x1, x0
     3f8:	bl	bc0 <acc_unmap_data>
     3fc:	b	40c <acc_free+0x10c>
     400:	ldr	x0, [sp, #48]
     404:	add	x0, x0, #0xa8
     408:	bl	74 <gomp_mutex_unlock>
     40c:	ldr	x0, [sp, #48]
     410:	ldr	x2, [x0, #104]
     414:	ldr	x0, [sp, #48]
     418:	ldr	w0, [x0, #12]
     41c:	ldr	x1, [sp, #24]
     420:	blr	x2
     424:	and	w0, w0, #0xff
     428:	eor	w0, w0, #0x1
     42c:	and	w0, w0, #0xff
     430:	cmp	w0, #0x0
     434:	b.eq	450 <acc_free+0x150>  // b.none
     438:	adrp	x0, 0 <gomp_mutex_lock>
     43c:	add	x1, x0, #0x0
     440:	adrp	x0, 0 <gomp_mutex_lock>
     444:	add	x0, x0, #0x0
     448:	bl	0 <gomp_fatal>
     44c:	nop
     450:	ldp	x29, x30, [sp], #64
     454:	ret

0000000000000458 <memcpy_tofrom_device>:
     458:	stp	x29, x30, [sp, #-80]!
     45c:	mov	x29, sp
     460:	strb	w0, [sp, #63]
     464:	str	x1, [sp, #48]
     468:	str	x2, [sp, #40]
     46c:	str	x3, [sp, #32]
     470:	str	w4, [sp, #56]
     474:	str	x5, [sp, #24]
     478:	bl	c0 <goacc_thread>
     47c:	str	x0, [sp, #72]
     480:	ldr	x0, [sp, #72]
     484:	cmp	x0, #0x0
     488:	b.eq	49c <memcpy_tofrom_device+0x44>  // b.none
     48c:	ldr	x0, [sp, #72]
     490:	ldr	x0, [x0, #8]
     494:	cmp	x0, #0x0
     498:	b.ne	4bc <memcpy_tofrom_device+0x64>  // b.any
     49c:	adrp	x0, 0 <gomp_mutex_lock>
     4a0:	add	x3, x0, #0x0
     4a4:	mov	w2, #0xa4                  	// #164
     4a8:	adrp	x0, 0 <gomp_mutex_lock>
     4ac:	add	x1, x0, #0x0
     4b0:	adrp	x0, 0 <gomp_mutex_lock>
     4b4:	add	x0, x0, #0x0
     4b8:	bl	0 <__assert_fail>
     4bc:	ldr	x0, [sp, #72]
     4c0:	ldr	x0, [x0, #8]
     4c4:	ldr	w0, [x0, #8]
     4c8:	and	w0, w0, #0x1
     4cc:	cmp	w0, #0x0
     4d0:	b.eq	508 <memcpy_tofrom_device+0xb0>  // b.none
     4d4:	ldrb	w0, [sp, #63]
     4d8:	cmp	w0, #0x0
     4dc:	b.eq	4f4 <memcpy_tofrom_device+0x9c>  // b.none
     4e0:	ldr	x2, [sp, #32]
     4e4:	ldr	x1, [sp, #48]
     4e8:	ldr	x0, [sp, #40]
     4ec:	bl	0 <memmove>
     4f0:	b	5f0 <memcpy_tofrom_device+0x198>
     4f4:	ldr	x2, [sp, #32]
     4f8:	ldr	x1, [sp, #40]
     4fc:	ldr	x0, [sp, #48]
     500:	bl	0 <memmove>
     504:	b	5f0 <memcpy_tofrom_device+0x198>
     508:	ldr	w0, [sp, #56]
     50c:	cmn	w0, #0x1
     510:	b.lt	528 <memcpy_tofrom_device+0xd0>  // b.tstop
     514:	ldr	x0, [sp, #72]
     518:	ldr	x0, [x0, #8]
     51c:	ldr	x1, [x0, #248]
     520:	ldr	w0, [sp, #56]
     524:	blr	x1
     528:	ldrb	w0, [sp, #63]
     52c:	cmp	w0, #0x0
     530:	b.eq	570 <memcpy_tofrom_device+0x118>  // b.none
     534:	ldr	x0, [sp, #72]
     538:	ldr	x0, [x0, #8]
     53c:	ldr	x4, [x0, #112]
     540:	ldr	x0, [sp, #72]
     544:	ldr	x0, [x0, #8]
     548:	ldr	w0, [x0, #12]
     54c:	ldr	x3, [sp, #32]
     550:	ldr	x2, [sp, #48]
     554:	ldr	x1, [sp, #40]
     558:	blr	x4
     55c:	and	w0, w0, #0xff
     560:	cmp	w0, #0x0
     564:	cset	w0, ne  // ne = any
     568:	and	w0, w0, #0xff
     56c:	b	5a8 <memcpy_tofrom_device+0x150>
     570:	ldr	x0, [sp, #72]
     574:	ldr	x0, [x0, #8]
     578:	ldr	x4, [x0, #120]
     57c:	ldr	x0, [sp, #72]
     580:	ldr	x0, [x0, #8]
     584:	ldr	w0, [x0, #12]
     588:	ldr	x3, [sp, #32]
     58c:	ldr	x2, [sp, #40]
     590:	ldr	x1, [sp, #48]
     594:	blr	x4
     598:	and	w0, w0, #0xff
     59c:	cmp	w0, #0x0
     5a0:	cset	w0, ne  // ne = any
     5a4:	and	w0, w0, #0xff
     5a8:	strb	w0, [sp, #71]
     5ac:	ldr	w0, [sp, #56]
     5b0:	cmn	w0, #0x1
     5b4:	b.lt	5cc <memcpy_tofrom_device+0x174>  // b.tstop
     5b8:	ldr	x0, [sp, #72]
     5bc:	ldr	x0, [x0, #8]
     5c0:	ldr	x1, [x0, #248]
     5c4:	mov	w0, #0xfffffffe            	// #-2
     5c8:	blr	x1
     5cc:	ldrb	w0, [sp, #71]
     5d0:	eor	w0, w0, #0x1
     5d4:	and	w0, w0, #0xff
     5d8:	cmp	w0, #0x0
     5dc:	b.eq	5f0 <memcpy_tofrom_device+0x198>  // b.none
     5e0:	ldr	x1, [sp, #24]
     5e4:	adrp	x0, 0 <gomp_mutex_lock>
     5e8:	add	x0, x0, #0x0
     5ec:	bl	0 <gomp_fatal>
     5f0:	ldp	x29, x30, [sp], #80
     5f4:	ret

00000000000005f8 <acc_memcpy_to_device>:
     5f8:	stp	x29, x30, [sp, #-48]!
     5fc:	mov	x29, sp
     600:	str	x0, [sp, #40]
     604:	str	x1, [sp, #32]
     608:	str	x2, [sp, #24]
     60c:	adrp	x0, 0 <gomp_mutex_lock>
     610:	add	x5, x0, #0x0
     614:	mov	w4, #0xfffffffe            	// #-2
     618:	ldr	x3, [sp, #24]
     61c:	ldr	x2, [sp, #32]
     620:	ldr	x1, [sp, #40]
     624:	mov	w0, #0x0                   	// #0
     628:	bl	458 <memcpy_tofrom_device>
     62c:	nop
     630:	ldp	x29, x30, [sp], #48
     634:	ret

0000000000000638 <acc_memcpy_to_device_async>:
     638:	stp	x29, x30, [sp, #-48]!
     63c:	mov	x29, sp
     640:	str	x0, [sp, #40]
     644:	str	x1, [sp, #32]
     648:	str	x2, [sp, #24]
     64c:	str	w3, [sp, #20]
     650:	adrp	x0, 0 <gomp_mutex_lock>
     654:	add	x5, x0, #0x0
     658:	ldr	w4, [sp, #20]
     65c:	ldr	x3, [sp, #24]
     660:	ldr	x2, [sp, #32]
     664:	ldr	x1, [sp, #40]
     668:	mov	w0, #0x0                   	// #0
     66c:	bl	458 <memcpy_tofrom_device>
     670:	nop
     674:	ldp	x29, x30, [sp], #48
     678:	ret

000000000000067c <acc_memcpy_from_device>:
     67c:	stp	x29, x30, [sp, #-48]!
     680:	mov	x29, sp
     684:	str	x0, [sp, #40]
     688:	str	x1, [sp, #32]
     68c:	str	x2, [sp, #24]
     690:	adrp	x0, 0 <gomp_mutex_lock>
     694:	add	x5, x0, #0x0
     698:	mov	w4, #0xfffffffe            	// #-2
     69c:	ldr	x3, [sp, #24]
     6a0:	ldr	x2, [sp, #40]
     6a4:	ldr	x1, [sp, #32]
     6a8:	mov	w0, #0x1                   	// #1
     6ac:	bl	458 <memcpy_tofrom_device>
     6b0:	nop
     6b4:	ldp	x29, x30, [sp], #48
     6b8:	ret

00000000000006bc <acc_memcpy_from_device_async>:
     6bc:	stp	x29, x30, [sp, #-48]!
     6c0:	mov	x29, sp
     6c4:	str	x0, [sp, #40]
     6c8:	str	x1, [sp, #32]
     6cc:	str	x2, [sp, #24]
     6d0:	str	w3, [sp, #20]
     6d4:	adrp	x0, 0 <gomp_mutex_lock>
     6d8:	add	x5, x0, #0x0
     6dc:	ldr	w4, [sp, #20]
     6e0:	ldr	x3, [sp, #24]
     6e4:	ldr	x2, [sp, #40]
     6e8:	ldr	x1, [sp, #32]
     6ec:	mov	w0, #0x1                   	// #1
     6f0:	bl	458 <memcpy_tofrom_device>
     6f4:	nop
     6f8:	ldp	x29, x30, [sp], #48
     6fc:	ret

0000000000000700 <acc_deviceptr>:
     700:	stp	x29, x30, [sp, #-80]!
     704:	mov	x29, sp
     708:	str	x0, [sp, #24]
     70c:	bl	0 <goacc_lazy_initialize>
     710:	bl	c0 <goacc_thread>
     714:	str	x0, [sp, #72]
     718:	ldr	x0, [sp, #72]
     71c:	ldr	x0, [x0, #8]
     720:	str	x0, [sp, #64]
     724:	ldr	x0, [sp, #72]
     728:	ldr	x0, [x0, #8]
     72c:	ldr	w0, [x0, #8]
     730:	and	w0, w0, #0x1
     734:	cmp	w0, #0x0
     738:	b.eq	744 <acc_deviceptr+0x44>  // b.none
     73c:	ldr	x0, [sp, #24]
     740:	b	7d0 <acc_deviceptr+0xd0>
     744:	ldr	x0, [sp, #64]
     748:	add	x0, x0, #0xa8
     74c:	bl	0 <gomp_mutex_lock>
     750:	mov	x2, #0x1                   	// #1
     754:	ldr	x1, [sp, #24]
     758:	ldr	x0, [sp, #64]
     75c:	bl	d8 <lookup_host>
     760:	str	x0, [sp, #56]
     764:	ldr	x0, [sp, #56]
     768:	cmp	x0, #0x0
     76c:	b.ne	784 <acc_deviceptr+0x84>  // b.any
     770:	ldr	x0, [sp, #64]
     774:	add	x0, x0, #0xa8
     778:	bl	74 <gomp_mutex_unlock>
     77c:	mov	x0, #0x0                   	// #0
     780:	b	7d0 <acc_deviceptr+0xd0>
     784:	ldr	x0, [sp, #56]
     788:	ldr	x0, [x0]
     78c:	neg	x0, x0
     790:	ldr	x1, [sp, #24]
     794:	add	x0, x1, x0
     798:	str	x0, [sp, #48]
     79c:	ldr	x0, [sp, #56]
     7a0:	ldr	x0, [x0, #16]
     7a4:	ldr	x1, [x0, #16]
     7a8:	ldr	x0, [sp, #56]
     7ac:	ldr	x0, [x0, #24]
     7b0:	add	x0, x1, x0
     7b4:	ldr	x1, [sp, #48]
     7b8:	add	x0, x1, x0
     7bc:	str	x0, [sp, #40]
     7c0:	ldr	x0, [sp, #64]
     7c4:	add	x0, x0, #0xa8
     7c8:	bl	74 <gomp_mutex_unlock>
     7cc:	ldr	x0, [sp, #40]
     7d0:	ldp	x29, x30, [sp], #80
     7d4:	ret

00000000000007d8 <acc_hostptr>:
     7d8:	stp	x29, x30, [sp, #-80]!
     7dc:	mov	x29, sp
     7e0:	str	x0, [sp, #24]
     7e4:	bl	0 <goacc_lazy_initialize>
     7e8:	bl	c0 <goacc_thread>
     7ec:	str	x0, [sp, #72]
     7f0:	ldr	x0, [sp, #72]
     7f4:	ldr	x0, [x0, #8]
     7f8:	str	x0, [sp, #64]
     7fc:	ldr	x0, [sp, #72]
     800:	ldr	x0, [x0, #8]
     804:	ldr	w0, [x0, #8]
     808:	and	w0, w0, #0x1
     80c:	cmp	w0, #0x0
     810:	b.eq	81c <acc_hostptr+0x44>  // b.none
     814:	ldr	x0, [sp, #24]
     818:	b	8a8 <acc_hostptr+0xd0>
     81c:	ldr	x0, [sp, #64]
     820:	add	x0, x0, #0xa8
     824:	bl	0 <gomp_mutex_lock>
     828:	ldr	x0, [sp, #64]
     82c:	ldr	x0, [x0, #176]
     830:	mov	x2, #0x1                   	// #1
     834:	ldr	x1, [sp, #24]
     838:	bl	124 <lookup_dev>
     83c:	str	x0, [sp, #56]
     840:	ldr	x0, [sp, #56]
     844:	cmp	x0, #0x0
     848:	b.ne	860 <acc_hostptr+0x88>  // b.any
     84c:	ldr	x0, [sp, #64]
     850:	add	x0, x0, #0xa8
     854:	bl	74 <gomp_mutex_unlock>
     858:	mov	x0, #0x0                   	// #0
     85c:	b	8a8 <acc_hostptr+0xd0>
     860:	ldr	x0, [sp, #56]
     864:	ldr	x1, [x0, #24]
     868:	ldr	x0, [sp, #56]
     86c:	ldr	x0, [x0, #16]
     870:	ldr	x0, [x0, #16]
     874:	sub	x0, x1, x0
     878:	ldr	x1, [sp, #24]
     87c:	add	x0, x1, x0
     880:	str	x0, [sp, #48]
     884:	ldr	x0, [sp, #56]
     888:	ldr	x0, [x0]
     88c:	ldr	x1, [sp, #48]
     890:	add	x0, x1, x0
     894:	str	x0, [sp, #40]
     898:	ldr	x0, [sp, #64]
     89c:	add	x0, x0, #0xa8
     8a0:	bl	74 <gomp_mutex_unlock>
     8a4:	ldr	x0, [sp, #40]
     8a8:	ldp	x29, x30, [sp], #80
     8ac:	ret

00000000000008b0 <acc_is_present>:
     8b0:	stp	x29, x30, [sp, #-64]!
     8b4:	mov	x29, sp
     8b8:	str	x0, [sp, #24]
     8bc:	str	x1, [sp, #16]
     8c0:	ldr	x0, [sp, #16]
     8c4:	cmp	x0, #0x0
     8c8:	b.eq	8d8 <acc_is_present+0x28>  // b.none
     8cc:	ldr	x0, [sp, #24]
     8d0:	cmp	x0, #0x0
     8d4:	b.ne	8e0 <acc_is_present+0x30>  // b.any
     8d8:	mov	w0, #0x0                   	// #0
     8dc:	b	9c0 <acc_is_present+0x110>
     8e0:	bl	0 <goacc_lazy_initialize>
     8e4:	bl	c0 <goacc_thread>
     8e8:	str	x0, [sp, #48]
     8ec:	ldr	x0, [sp, #48]
     8f0:	ldr	x0, [x0, #8]
     8f4:	str	x0, [sp, #40]
     8f8:	ldr	x0, [sp, #48]
     8fc:	ldr	x0, [x0, #8]
     900:	ldr	w0, [x0, #8]
     904:	and	w0, w0, #0x1
     908:	cmp	w0, #0x0
     90c:	b.eq	924 <acc_is_present+0x74>  // b.none
     910:	ldr	x0, [sp, #24]
     914:	cmp	x0, #0x0
     918:	cset	w0, ne  // ne = any
     91c:	and	w0, w0, #0xff
     920:	b	9c0 <acc_is_present+0x110>
     924:	ldr	x0, [sp, #40]
     928:	add	x0, x0, #0xa8
     92c:	bl	0 <gomp_mutex_lock>
     930:	ldr	x2, [sp, #16]
     934:	ldr	x1, [sp, #24]
     938:	ldr	x0, [sp, #40]
     93c:	bl	d8 <lookup_host>
     940:	str	x0, [sp, #56]
     944:	ldr	x0, [sp, #56]
     948:	cmp	x0, #0x0
     94c:	b.eq	9a4 <acc_is_present+0xf4>  // b.none
     950:	ldr	x0, [sp, #56]
     954:	ldr	x1, [x0]
     958:	ldr	x0, [sp, #24]
     95c:	cmp	x1, x0
     960:	b.hi	9a0 <acc_is_present+0xf0>  // b.pmore
     964:	ldr	x1, [sp, #24]
     968:	ldr	x0, [sp, #16]
     96c:	add	x1, x1, x0
     970:	ldr	x0, [sp, #56]
     974:	ldr	x0, [x0, #8]
     978:	cmp	x1, x0
     97c:	b.hi	9a0 <acc_is_present+0xf0>  // b.pmore
     980:	ldr	x0, [sp, #56]
     984:	ldr	x1, [x0, #8]
     988:	ldr	x0, [sp, #56]
     98c:	ldr	x0, [x0]
     990:	sub	x0, x1, x0
     994:	ldr	x1, [sp, #16]
     998:	cmp	x1, x0
     99c:	b.ls	9a4 <acc_is_present+0xf4>  // b.plast
     9a0:	str	xzr, [sp, #56]
     9a4:	ldr	x0, [sp, #40]
     9a8:	add	x0, x0, #0xa8
     9ac:	bl	74 <gomp_mutex_unlock>
     9b0:	ldr	x0, [sp, #56]
     9b4:	cmp	x0, #0x0
     9b8:	cset	w0, ne  // ne = any
     9bc:	and	w0, w0, #0xff
     9c0:	ldp	x29, x30, [sp], #64
     9c4:	ret

00000000000009c8 <acc_map_data>:
     9c8:	stp	x29, x30, [sp, #-128]!
     9cc:	mov	x29, sp
     9d0:	str	x0, [sp, #40]
     9d4:	str	x1, [sp, #32]
     9d8:	str	x2, [sp, #24]
     9dc:	str	xzr, [sp, #120]
     9e0:	mov	x0, #0x1                   	// #1
     9e4:	str	x0, [sp, #112]
     9e8:	ldr	x0, [sp, #40]
     9ec:	str	x0, [sp, #80]
     9f0:	ldr	x0, [sp, #32]
     9f4:	str	x0, [sp, #72]
     9f8:	ldr	x0, [sp, #24]
     9fc:	str	x0, [sp, #64]
     a00:	strh	wzr, [sp, #62]
     a04:	bl	0 <goacc_lazy_initialize>
     a08:	bl	c0 <goacc_thread>
     a0c:	str	x0, [sp, #104]
     a10:	ldr	x0, [sp, #104]
     a14:	ldr	x0, [x0, #8]
     a18:	str	x0, [sp, #96]
     a1c:	ldr	x0, [sp, #96]
     a20:	ldr	w0, [x0, #8]
     a24:	and	w0, w0, #0x1
     a28:	cmp	w0, #0x0
     a2c:	b.eq	a4c <acc_map_data+0x84>  // b.none
     a30:	ldr	x1, [sp, #32]
     a34:	ldr	x0, [sp, #40]
     a38:	cmp	x1, x0
     a3c:	b.eq	b80 <acc_map_data+0x1b8>  // b.none
     a40:	adrp	x0, 0 <gomp_mutex_lock>
     a44:	add	x0, x0, #0x0
     a48:	bl	0 <gomp_fatal>
     a4c:	bl	c0 <goacc_thread>
     a50:	str	x0, [sp, #88]
     a54:	ldr	x0, [sp, #32]
     a58:	cmp	x0, #0x0
     a5c:	b.eq	a78 <acc_map_data+0xb0>  // b.none
     a60:	ldr	x0, [sp, #40]
     a64:	cmp	x0, #0x0
     a68:	b.eq	a78 <acc_map_data+0xb0>  // b.none
     a6c:	ldr	x0, [sp, #24]
     a70:	cmp	x0, #0x0
     a74:	b.ne	aa0 <acc_map_data+0xd8>  // b.any
     a78:	ldr	x0, [sp, #24]
     a7c:	mov	w1, w0
     a80:	ldr	x0, [sp, #24]
     a84:	mov	w4, w0
     a88:	ldr	x3, [sp, #32]
     a8c:	mov	w2, w1
     a90:	ldr	x1, [sp, #40]
     a94:	adrp	x0, 0 <gomp_mutex_lock>
     a98:	add	x0, x0, #0x0
     a9c:	bl	0 <gomp_fatal>
     aa0:	ldr	x0, [sp, #96]
     aa4:	add	x0, x0, #0xa8
     aa8:	bl	0 <gomp_mutex_lock>
     aac:	ldr	x2, [sp, #24]
     ab0:	ldr	x1, [sp, #40]
     ab4:	ldr	x0, [sp, #96]
     ab8:	bl	d8 <lookup_host>
     abc:	cmp	x0, #0x0
     ac0:	b.eq	ae8 <acc_map_data+0x120>  // b.none
     ac4:	ldr	x0, [sp, #96]
     ac8:	add	x0, x0, #0xa8
     acc:	bl	74 <gomp_mutex_unlock>
     ad0:	ldr	x0, [sp, #24]
     ad4:	mov	w2, w0
     ad8:	ldr	x1, [sp, #40]
     adc:	adrp	x0, 0 <gomp_mutex_lock>
     ae0:	add	x0, x0, #0x0
     ae4:	bl	0 <gomp_fatal>
     ae8:	ldr	x0, [sp, #88]
     aec:	ldr	x0, [x0, #8]
     af0:	ldr	x0, [x0, #176]
     af4:	ldr	x2, [sp, #24]
     af8:	ldr	x1, [sp, #32]
     afc:	bl	124 <lookup_dev>
     b00:	cmp	x0, #0x0
     b04:	b.eq	b2c <acc_map_data+0x164>  // b.none
     b08:	ldr	x0, [sp, #96]
     b0c:	add	x0, x0, #0xa8
     b10:	bl	74 <gomp_mutex_unlock>
     b14:	ldr	x0, [sp, #24]
     b18:	mov	w2, w0
     b1c:	ldr	x1, [sp, #32]
     b20:	adrp	x0, 0 <gomp_mutex_lock>
     b24:	add	x0, x0, #0x0
     b28:	bl	0 <gomp_fatal>
     b2c:	ldr	x0, [sp, #96]
     b30:	add	x0, x0, #0xa8
     b34:	bl	74 <gomp_mutex_unlock>
     b38:	add	x3, sp, #0x3e
     b3c:	add	x2, sp, #0x40
     b40:	add	x1, sp, #0x48
     b44:	add	x0, sp, #0x50
     b48:	mov	w7, #0x0                   	// #0
     b4c:	mov	w6, #0x1                   	// #1
     b50:	mov	x5, x3
     b54:	mov	x4, x2
     b58:	mov	x3, x1
     b5c:	mov	x2, x0
     b60:	ldr	x1, [sp, #112]
     b64:	ldr	x0, [sp, #96]
     b68:	bl	0 <gomp_map_vars>
     b6c:	str	x0, [sp, #120]
     b70:	ldr	x0, [sp, #120]
     b74:	ldr	x0, [x0, #64]
     b78:	mov	x1, #0xffffffffffffffff    	// #-1
     b7c:	str	x1, [x0, #32]
     b80:	ldr	x0, [sp, #96]
     b84:	add	x0, x0, #0xa8
     b88:	bl	0 <gomp_mutex_lock>
     b8c:	ldr	x0, [sp, #96]
     b90:	ldr	x1, [x0, #176]
     b94:	ldr	x0, [sp, #120]
     b98:	str	x1, [x0, #40]
     b9c:	ldr	x0, [sp, #96]
     ba0:	ldr	x1, [sp, #120]
     ba4:	str	x1, [x0, #176]
     ba8:	ldr	x0, [sp, #96]
     bac:	add	x0, x0, #0xa8
     bb0:	bl	74 <gomp_mutex_unlock>
     bb4:	nop
     bb8:	ldp	x29, x30, [sp], #128
     bbc:	ret

0000000000000bc0 <acc_unmap_data>:
     bc0:	stp	x29, x30, [sp, #-80]!
     bc4:	mov	x29, sp
     bc8:	str	x0, [sp, #24]
     bcc:	bl	c0 <goacc_thread>
     bd0:	str	x0, [sp, #56]
     bd4:	ldr	x0, [sp, #56]
     bd8:	ldr	x0, [x0, #8]
     bdc:	str	x0, [sp, #48]
     be0:	ldr	x0, [sp, #48]
     be4:	ldr	w0, [x0, #8]
     be8:	and	w0, w0, #0x1
     bec:	cmp	w0, #0x0
     bf0:	b.ne	d68 <acc_unmap_data+0x1a8>  // b.any
     bf4:	ldr	x0, [sp, #48]
     bf8:	add	x0, x0, #0xa8
     bfc:	bl	0 <gomp_mutex_lock>
     c00:	mov	x2, #0x1                   	// #1
     c04:	ldr	x1, [sp, #24]
     c08:	ldr	x0, [sp, #48]
     c0c:	bl	d8 <lookup_host>
     c10:	str	x0, [sp, #40]
     c14:	ldr	x0, [sp, #40]
     c18:	cmp	x0, #0x0
     c1c:	b.ne	c3c <acc_unmap_data+0x7c>  // b.any
     c20:	ldr	x0, [sp, #48]
     c24:	add	x0, x0, #0xa8
     c28:	bl	74 <gomp_mutex_unlock>
     c2c:	ldr	x1, [sp, #24]
     c30:	adrp	x0, 0 <gomp_mutex_lock>
     c34:	add	x0, x0, #0x0
     c38:	bl	0 <gomp_fatal>
     c3c:	ldr	x0, [sp, #40]
     c40:	ldr	x1, [x0, #8]
     c44:	ldr	x0, [sp, #40]
     c48:	ldr	x0, [x0]
     c4c:	sub	x0, x1, x0
     c50:	str	x0, [sp, #32]
     c54:	ldr	x0, [sp, #40]
     c58:	ldr	x1, [x0]
     c5c:	ldr	x0, [sp, #24]
     c60:	cmp	x1, x0
     c64:	b.eq	c98 <acc_unmap_data+0xd8>  // b.none
     c68:	ldr	x0, [sp, #48]
     c6c:	add	x0, x0, #0xa8
     c70:	bl	74 <gomp_mutex_unlock>
     c74:	ldr	x0, [sp, #40]
     c78:	ldr	x0, [x0]
     c7c:	mov	x1, x0
     c80:	ldr	x0, [sp, #32]
     c84:	ldr	x3, [sp, #24]
     c88:	mov	w2, w0
     c8c:	adrp	x0, 0 <gomp_mutex_lock>
     c90:	add	x0, x0, #0x0
     c94:	bl	0 <gomp_fatal>
     c98:	ldr	x0, [sp, #40]
     c9c:	mov	x1, #0x1                   	// #1
     ca0:	str	x1, [x0, #32]
     ca4:	ldr	x0, [sp, #40]
     ca8:	ldr	x0, [x0, #16]
     cac:	str	x0, [sp, #72]
     cb0:	ldr	x0, [sp, #72]
     cb4:	ldr	x0, [x0]
     cb8:	cmp	x0, #0x2
     cbc:	b.ne	d4c <acc_unmap_data+0x18c>  // b.any
     cc0:	ldr	x0, [sp, #72]
     cc4:	str	xzr, [x0, #24]
     cc8:	ldr	x0, [sp, #72]
     ccc:	str	xzr, [x0, #32]
     cd0:	str	xzr, [sp, #64]
     cd4:	ldr	x0, [sp, #48]
     cd8:	ldr	x0, [x0, #176]
     cdc:	str	x0, [sp, #72]
     ce0:	b	d40 <acc_unmap_data+0x180>
     ce4:	ldr	x0, [sp, #40]
     ce8:	ldr	x0, [x0, #16]
     cec:	ldr	x1, [sp, #72]
     cf0:	cmp	x1, x0
     cf4:	b.ne	d2c <acc_unmap_data+0x16c>  // b.any
     cf8:	ldr	x0, [sp, #64]
     cfc:	cmp	x0, #0x0
     d00:	b.eq	d18 <acc_unmap_data+0x158>  // b.none
     d04:	ldr	x0, [sp, #72]
     d08:	ldr	x1, [x0, #40]
     d0c:	ldr	x0, [sp, #64]
     d10:	str	x1, [x0, #40]
     d14:	b	d4c <acc_unmap_data+0x18c>
     d18:	ldr	x0, [sp, #72]
     d1c:	ldr	x1, [x0, #40]
     d20:	ldr	x0, [sp, #48]
     d24:	str	x1, [x0, #176]
     d28:	b	d4c <acc_unmap_data+0x18c>
     d2c:	ldr	x0, [sp, #72]
     d30:	str	x0, [sp, #64]
     d34:	ldr	x0, [sp, #72]
     d38:	ldr	x0, [x0, #40]
     d3c:	str	x0, [sp, #72]
     d40:	ldr	x0, [sp, #72]
     d44:	cmp	x0, #0x0
     d48:	b.ne	ce4 <acc_unmap_data+0x124>  // b.any
     d4c:	ldr	x0, [sp, #48]
     d50:	add	x0, x0, #0xa8
     d54:	bl	74 <gomp_mutex_unlock>
     d58:	mov	w1, #0x1                   	// #1
     d5c:	ldr	x0, [sp, #72]
     d60:	bl	0 <gomp_unmap_vars>
     d64:	b	d6c <acc_unmap_data+0x1ac>
     d68:	nop
     d6c:	ldp	x29, x30, [sp], #80
     d70:	ret

0000000000000d74 <present_create_copy>:
     d74:	stp	x29, x30, [sp, #-112]!
     d78:	mov	x29, sp
     d7c:	str	w0, [sp, #44]
     d80:	str	x1, [sp, #32]
     d84:	str	x2, [sp, #24]
     d88:	str	w3, [sp, #40]
     d8c:	ldr	x0, [sp, #32]
     d90:	cmp	x0, #0x0
     d94:	b.eq	da4 <present_create_copy+0x30>  // b.none
     d98:	ldr	x0, [sp, #24]
     d9c:	cmp	x0, #0x0
     da0:	b.ne	dbc <present_create_copy+0x48>  // b.any
     da4:	ldr	x0, [sp, #24]
     da8:	mov	w2, w0
     dac:	ldr	x1, [sp, #32]
     db0:	adrp	x0, 0 <gomp_mutex_lock>
     db4:	add	x0, x0, #0x0
     db8:	bl	0 <gomp_fatal>
     dbc:	bl	0 <goacc_lazy_initialize>
     dc0:	bl	c0 <goacc_thread>
     dc4:	str	x0, [sp, #96]
     dc8:	ldr	x0, [sp, #96]
     dcc:	ldr	x0, [x0, #8]
     dd0:	str	x0, [sp, #88]
     dd4:	ldr	x0, [sp, #88]
     dd8:	ldr	w0, [x0, #8]
     ddc:	and	w0, w0, #0x1
     de0:	cmp	w0, #0x0
     de4:	b.eq	df0 <present_create_copy+0x7c>  // b.none
     de8:	ldr	x0, [sp, #32]
     dec:	b	1038 <present_create_copy+0x2c4>
     df0:	ldr	x0, [sp, #88]
     df4:	add	x0, x0, #0xa8
     df8:	bl	0 <gomp_mutex_lock>
     dfc:	ldr	x0, [sp, #24]
     e00:	mov	x2, x0
     e04:	ldr	x1, [sp, #32]
     e08:	ldr	x0, [sp, #88]
     e0c:	bl	d8 <lookup_host>
     e10:	str	x0, [sp, #80]
     e14:	ldr	x0, [sp, #80]
     e18:	cmp	x0, #0x0
     e1c:	b.eq	f08 <present_create_copy+0x194>  // b.none
     e20:	ldr	x0, [sp, #80]
     e24:	ldr	x0, [x0, #16]
     e28:	ldr	x1, [x0, #16]
     e2c:	ldr	x0, [sp, #80]
     e30:	ldr	x0, [x0, #24]
     e34:	add	x0, x1, x0
     e38:	str	x0, [sp, #104]
     e3c:	ldr	w0, [sp, #44]
     e40:	and	w0, w0, #0x1
     e44:	cmp	w0, #0x0
     e48:	b.ne	e80 <present_create_copy+0x10c>  // b.any
     e4c:	ldr	x0, [sp, #88]
     e50:	add	x0, x0, #0xa8
     e54:	bl	74 <gomp_mutex_unlock>
     e58:	ldr	x0, [sp, #24]
     e5c:	mov	w1, w0
     e60:	ldr	x0, [sp, #24]
     e64:	mov	w4, w0
     e68:	ldr	x3, [sp, #104]
     e6c:	mov	w2, w1
     e70:	ldr	x1, [sp, #32]
     e74:	adrp	x0, 0 <gomp_mutex_lock>
     e78:	add	x0, x0, #0x0
     e7c:	bl	0 <gomp_fatal>
     e80:	ldr	x0, [sp, #24]
     e84:	ldr	x1, [sp, #32]
     e88:	add	x0, x1, x0
     e8c:	ldr	x1, [sp, #80]
     e90:	ldr	x1, [x1, #8]
     e94:	cmp	x0, x1
     e98:	b.ls	ec0 <present_create_copy+0x14c>  // b.plast
     e9c:	ldr	x0, [sp, #88]
     ea0:	add	x0, x0, #0xa8
     ea4:	bl	74 <gomp_mutex_unlock>
     ea8:	ldr	x0, [sp, #24]
     eac:	mov	w2, w0
     eb0:	ldr	x1, [sp, #32]
     eb4:	adrp	x0, 0 <gomp_mutex_lock>
     eb8:	add	x0, x0, #0x0
     ebc:	bl	0 <gomp_fatal>
     ec0:	ldr	x0, [sp, #80]
     ec4:	ldr	x0, [x0, #32]
     ec8:	cmn	x0, #0x1
     ecc:	b.eq	ef8 <present_create_copy+0x184>  // b.none
     ed0:	ldr	x0, [sp, #80]
     ed4:	ldr	x0, [x0, #32]
     ed8:	add	x1, x0, #0x1
     edc:	ldr	x0, [sp, #80]
     ee0:	str	x1, [x0, #32]
     ee4:	ldr	x0, [sp, #80]
     ee8:	ldr	x0, [x0, #40]
     eec:	add	x1, x0, #0x1
     ef0:	ldr	x0, [sp, #80]
     ef4:	str	x1, [x0, #40]
     ef8:	ldr	x0, [sp, #88]
     efc:	add	x0, x0, #0xa8
     f00:	bl	74 <gomp_mutex_unlock>
     f04:	b	1034 <present_create_copy+0x2c0>
     f08:	ldr	w0, [sp, #44]
     f0c:	and	w0, w0, #0x2
     f10:	cmp	w0, #0x0
     f14:	b.ne	f3c <present_create_copy+0x1c8>  // b.any
     f18:	ldr	x0, [sp, #88]
     f1c:	add	x0, x0, #0xa8
     f20:	bl	74 <gomp_mutex_unlock>
     f24:	ldr	x0, [sp, #24]
     f28:	mov	w2, w0
     f2c:	ldr	x1, [sp, #32]
     f30:	adrp	x0, 0 <gomp_mutex_lock>
     f34:	add	x0, x0, #0x0
     f38:	bl	0 <gomp_fatal>
     f3c:	mov	x0, #0x1                   	// #1
     f40:	str	x0, [sp, #72]
     f44:	ldr	x0, [sp, #32]
     f48:	str	x0, [sp, #48]
     f4c:	ldr	w0, [sp, #44]
     f50:	and	w0, w0, #0x4
     f54:	cmp	w0, #0x0
     f58:	b.eq	f68 <present_create_copy+0x1f4>  // b.none
     f5c:	mov	w0, #0x1                   	// #1
     f60:	strh	w0, [sp, #62]
     f64:	b	f6c <present_create_copy+0x1f8>
     f68:	strh	wzr, [sp, #62]
     f6c:	ldr	x0, [sp, #88]
     f70:	add	x0, x0, #0xa8
     f74:	bl	74 <gomp_mutex_unlock>
     f78:	ldr	w0, [sp, #40]
     f7c:	cmn	w0, #0x1
     f80:	b.lt	f94 <present_create_copy+0x220>  // b.tstop
     f84:	ldr	x0, [sp, #88]
     f88:	ldr	x1, [x0, #248]
     f8c:	ldr	w0, [sp, #40]
     f90:	blr	x1
     f94:	add	x2, sp, #0x3e
     f98:	add	x1, sp, #0x18
     f9c:	add	x0, sp, #0x30
     fa0:	mov	w7, #0x0                   	// #0
     fa4:	mov	w6, #0x1                   	// #1
     fa8:	mov	x5, x2
     fac:	mov	x4, x1
     fb0:	mov	x3, #0x0                   	// #0
     fb4:	mov	x2, x0
     fb8:	ldr	x1, [sp, #72]
     fbc:	ldr	x0, [sp, #88]
     fc0:	bl	0 <gomp_map_vars>
     fc4:	str	x0, [sp, #64]
     fc8:	ldr	x0, [sp, #64]
     fcc:	ldr	x0, [x0, #64]
     fd0:	mov	x1, #0x1                   	// #1
     fd4:	str	x1, [x0, #40]
     fd8:	ldr	w0, [sp, #40]
     fdc:	cmn	w0, #0x1
     fe0:	b.lt	ff4 <present_create_copy+0x280>  // b.tstop
     fe4:	ldr	x0, [sp, #88]
     fe8:	ldr	x1, [x0, #248]
     fec:	mov	w0, #0xfffffffe            	// #-2
     ff0:	blr	x1
     ff4:	ldr	x0, [sp, #88]
     ff8:	add	x0, x0, #0xa8
     ffc:	bl	0 <gomp_mutex_lock>
    1000:	ldr	x0, [sp, #64]
    1004:	ldr	x0, [x0, #32]
    1008:	str	x0, [sp, #104]
    100c:	ldr	x0, [sp, #88]
    1010:	ldr	x1, [x0, #176]
    1014:	ldr	x0, [sp, #64]
    1018:	str	x1, [x0, #40]
    101c:	ldr	x0, [sp, #88]
    1020:	ldr	x1, [sp, #64]
    1024:	str	x1, [x0, #176]
    1028:	ldr	x0, [sp, #88]
    102c:	add	x0, x0, #0xa8
    1030:	bl	74 <gomp_mutex_unlock>
    1034:	ldr	x0, [sp, #104]
    1038:	ldp	x29, x30, [sp], #112
    103c:	ret

0000000000001040 <acc_create>:
    1040:	stp	x29, x30, [sp, #-32]!
    1044:	mov	x29, sp
    1048:	str	x0, [sp, #24]
    104c:	str	x1, [sp, #16]
    1050:	mov	w3, #0xfffffffe            	// #-2
    1054:	ldr	x2, [sp, #16]
    1058:	ldr	x1, [sp, #24]
    105c:	mov	w0, #0x3                   	// #3
    1060:	bl	d74 <present_create_copy>
    1064:	ldp	x29, x30, [sp], #32
    1068:	ret

000000000000106c <acc_create_async>:
    106c:	stp	x29, x30, [sp, #-48]!
    1070:	mov	x29, sp
    1074:	str	x0, [sp, #40]
    1078:	str	x1, [sp, #32]
    107c:	str	w2, [sp, #28]
    1080:	ldr	w3, [sp, #28]
    1084:	ldr	x2, [sp, #32]
    1088:	ldr	x1, [sp, #40]
    108c:	mov	w0, #0x3                   	// #3
    1090:	bl	d74 <present_create_copy>
    1094:	nop
    1098:	ldp	x29, x30, [sp], #48
    109c:	ret

00000000000010a0 <acc_copyin>:
    10a0:	stp	x29, x30, [sp, #-32]!
    10a4:	mov	x29, sp
    10a8:	str	x0, [sp, #24]
    10ac:	str	x1, [sp, #16]
    10b0:	mov	w3, #0xfffffffe            	// #-2
    10b4:	ldr	x2, [sp, #16]
    10b8:	ldr	x1, [sp, #24]
    10bc:	mov	w0, #0x7                   	// #7
    10c0:	bl	d74 <present_create_copy>
    10c4:	ldp	x29, x30, [sp], #32
    10c8:	ret

00000000000010cc <acc_copyin_async>:
    10cc:	stp	x29, x30, [sp, #-48]!
    10d0:	mov	x29, sp
    10d4:	str	x0, [sp, #40]
    10d8:	str	x1, [sp, #32]
    10dc:	str	w2, [sp, #28]
    10e0:	ldr	w3, [sp, #28]
    10e4:	ldr	x2, [sp, #32]
    10e8:	ldr	x1, [sp, #40]
    10ec:	mov	w0, #0x7                   	// #7
    10f0:	bl	d74 <present_create_copy>
    10f4:	nop
    10f8:	ldp	x29, x30, [sp], #48
    10fc:	ret

0000000000001100 <delete_copyout>:
    1100:	stp	x29, x30, [sp, #-112]!
    1104:	mov	x29, sp
    1108:	str	w0, [sp, #44]
    110c:	str	x1, [sp, #32]
    1110:	str	x2, [sp, #24]
    1114:	str	w3, [sp, #40]
    1118:	str	x4, [sp, #16]
    111c:	bl	c0 <goacc_thread>
    1120:	str	x0, [sp, #88]
    1124:	ldr	x0, [sp, #88]
    1128:	ldr	x0, [x0, #8]
    112c:	str	x0, [sp, #80]
    1130:	ldr	x0, [sp, #80]
    1134:	ldr	w0, [x0, #8]
    1138:	and	w0, w0, #0x1
    113c:	cmp	w0, #0x0
    1140:	b.ne	141c <delete_copyout+0x31c>  // b.any
    1144:	ldr	x0, [sp, #80]
    1148:	add	x0, x0, #0xa8
    114c:	bl	0 <gomp_mutex_lock>
    1150:	ldr	x2, [sp, #24]
    1154:	ldr	x1, [sp, #32]
    1158:	ldr	x0, [sp, #80]
    115c:	bl	d8 <lookup_host>
    1160:	str	x0, [sp, #72]
    1164:	ldr	x0, [sp, #72]
    1168:	cmp	x0, #0x0
    116c:	b.ne	1194 <delete_copyout+0x94>  // b.any
    1170:	ldr	x0, [sp, #80]
    1174:	add	x0, x0, #0xa8
    1178:	bl	74 <gomp_mutex_unlock>
    117c:	ldr	x0, [sp, #24]
    1180:	mov	w2, w0
    1184:	ldr	x1, [sp, #32]
    1188:	adrp	x0, 0 <gomp_mutex_lock>
    118c:	add	x0, x0, #0x0
    1190:	bl	0 <gomp_fatal>
    1194:	ldr	x0, [sp, #72]
    1198:	ldr	x0, [x0, #16]
    119c:	ldr	x1, [x0, #16]
    11a0:	ldr	x0, [sp, #72]
    11a4:	ldr	x0, [x0, #24]
    11a8:	add	x1, x1, x0
    11ac:	ldr	x0, [sp, #32]
    11b0:	add	x1, x1, x0
    11b4:	ldr	x0, [sp, #72]
    11b8:	ldr	x0, [x0]
    11bc:	sub	x0, x1, x0
    11c0:	str	x0, [sp, #64]
    11c4:	ldr	x0, [sp, #72]
    11c8:	ldr	x1, [x0, #8]
    11cc:	ldr	x0, [sp, #72]
    11d0:	ldr	x0, [x0]
    11d4:	sub	x0, x1, x0
    11d8:	str	x0, [sp, #56]
    11dc:	ldr	x0, [sp, #72]
    11e0:	ldr	x1, [x0]
    11e4:	ldr	x0, [sp, #32]
    11e8:	cmp	x1, x0
    11ec:	b.ne	1200 <delete_copyout+0x100>  // b.any
    11f0:	ldr	x1, [sp, #56]
    11f4:	ldr	x0, [sp, #24]
    11f8:	cmp	x1, x0
    11fc:	b.eq	1238 <delete_copyout+0x138>  // b.none
    1200:	ldr	x0, [sp, #80]
    1204:	add	x0, x0, #0xa8
    1208:	bl	74 <gomp_mutex_unlock>
    120c:	ldr	x0, [sp, #72]
    1210:	ldr	x0, [x0]
    1214:	mov	x1, x0
    1218:	ldr	x0, [sp, #56]
    121c:	mov	w2, w0
    1220:	ldr	x0, [sp, #24]
    1224:	mov	w4, w0
    1228:	ldr	x3, [sp, #32]
    122c:	adrp	x0, 0 <gomp_mutex_lock>
    1230:	add	x0, x0, #0x0
    1234:	bl	0 <gomp_fatal>
    1238:	ldr	x0, [sp, #72]
    123c:	ldr	x0, [x0, #32]
    1240:	cmn	x0, #0x1
    1244:	b.ne	1258 <delete_copyout+0x158>  // b.any
    1248:	ldr	x0, [sp, #72]
    124c:	str	xzr, [x0, #32]
    1250:	ldr	x0, [sp, #72]
    1254:	str	xzr, [x0, #40]
    1258:	ldr	x0, [sp, #72]
    125c:	ldr	x1, [x0, #32]
    1260:	ldr	x0, [sp, #72]
    1264:	ldr	x0, [x0, #40]
    1268:	cmp	x1, x0
    126c:	b.cs	1288 <delete_copyout+0x188>  // b.hs, b.nlast
    1270:	ldr	x0, [sp, #80]
    1274:	add	x0, x0, #0xa8
    1278:	bl	74 <gomp_mutex_unlock>
    127c:	adrp	x0, 0 <gomp_mutex_lock>
    1280:	add	x0, x0, #0x0
    1284:	bl	0 <gomp_fatal>
    1288:	ldr	w0, [sp, #44]
    128c:	and	w0, w0, #0x2
    1290:	cmp	w0, #0x0
    1294:	b.eq	12c0 <delete_copyout+0x1c0>  // b.none
    1298:	ldr	x0, [sp, #72]
    129c:	ldr	x1, [x0, #32]
    12a0:	ldr	x0, [sp, #72]
    12a4:	ldr	x0, [x0, #40]
    12a8:	sub	x1, x1, x0
    12ac:	ldr	x0, [sp, #72]
    12b0:	str	x1, [x0, #32]
    12b4:	ldr	x0, [sp, #72]
    12b8:	str	xzr, [x0, #40]
    12bc:	b	12f8 <delete_copyout+0x1f8>
    12c0:	ldr	x0, [sp, #72]
    12c4:	ldr	x0, [x0, #40]
    12c8:	cmp	x0, #0x0
    12cc:	b.eq	12f8 <delete_copyout+0x1f8>  // b.none
    12d0:	ldr	x0, [sp, #72]
    12d4:	ldr	x0, [x0, #40]
    12d8:	sub	x1, x0, #0x1
    12dc:	ldr	x0, [sp, #72]
    12e0:	str	x1, [x0, #40]
    12e4:	ldr	x0, [sp, #72]
    12e8:	ldr	x0, [x0, #32]
    12ec:	sub	x1, x0, #0x1
    12f0:	ldr	x0, [sp, #72]
    12f4:	str	x1, [x0, #32]
    12f8:	ldr	x0, [sp, #72]
    12fc:	ldr	x0, [x0, #32]
    1300:	cmp	x0, #0x0
    1304:	b.ne	140c <delete_copyout+0x30c>  // b.any
    1308:	ldr	x0, [sp, #72]
    130c:	ldr	x0, [x0, #16]
    1310:	ldr	x0, [x0]
    1314:	cmp	x0, #0x2
    1318:	b.ne	1398 <delete_copyout+0x298>  // b.any
    131c:	str	xzr, [sp, #104]
    1320:	ldr	x0, [sp, #80]
    1324:	ldr	x0, [x0, #176]
    1328:	str	x0, [sp, #96]
    132c:	b	138c <delete_copyout+0x28c>
    1330:	ldr	x0, [sp, #72]
    1334:	ldr	x0, [x0, #16]
    1338:	ldr	x1, [sp, #96]
    133c:	cmp	x1, x0
    1340:	b.ne	1378 <delete_copyout+0x278>  // b.any
    1344:	ldr	x0, [sp, #104]
    1348:	cmp	x0, #0x0
    134c:	b.eq	1364 <delete_copyout+0x264>  // b.none
    1350:	ldr	x0, [sp, #96]
    1354:	ldr	x1, [x0, #40]
    1358:	ldr	x0, [sp, #104]
    135c:	str	x1, [x0, #40]
    1360:	b	1398 <delete_copyout+0x298>
    1364:	ldr	x0, [sp, #96]
    1368:	ldr	x1, [x0, #40]
    136c:	ldr	x0, [sp, #80]
    1370:	str	x1, [x0, #176]
    1374:	b	1398 <delete_copyout+0x298>
    1378:	ldr	x0, [sp, #96]
    137c:	str	x0, [sp, #104]
    1380:	ldr	x0, [sp, #96]
    1384:	ldr	x0, [x0, #40]
    1388:	str	x0, [sp, #96]
    138c:	ldr	x0, [sp, #96]
    1390:	cmp	x0, #0x0
    1394:	b.ne	1330 <delete_copyout+0x230>  // b.any
    1398:	ldr	w0, [sp, #44]
    139c:	and	w0, w0, #0x1
    13a0:	cmp	w0, #0x0
    13a4:	b.eq	1400 <delete_copyout+0x300>  // b.none
    13a8:	ldr	w0, [sp, #40]
    13ac:	cmn	w0, #0x1
    13b0:	b.lt	13c4 <delete_copyout+0x2c4>  // b.tstop
    13b4:	ldr	x0, [sp, #80]
    13b8:	ldr	x1, [x0, #248]
    13bc:	ldr	w0, [sp, #40]
    13c0:	blr	x1
    13c4:	ldr	x0, [sp, #80]
    13c8:	ldr	x4, [x0, #112]
    13cc:	ldr	x0, [sp, #80]
    13d0:	ldr	w0, [x0, #12]
    13d4:	ldr	x3, [sp, #24]
    13d8:	ldr	x2, [sp, #64]
    13dc:	ldr	x1, [sp, #32]
    13e0:	blr	x4
    13e4:	ldr	w0, [sp, #40]
    13e8:	cmn	w0, #0x1
    13ec:	b.lt	1400 <delete_copyout+0x300>  // b.tstop
    13f0:	ldr	x0, [sp, #80]
    13f4:	ldr	x1, [x0, #248]
    13f8:	mov	w0, #0xfffffffe            	// #-2
    13fc:	blr	x1
    1400:	ldr	x1, [sp, #72]
    1404:	ldr	x0, [sp, #80]
    1408:	bl	0 <gomp_remove_var>
    140c:	ldr	x0, [sp, #80]
    1410:	add	x0, x0, #0xa8
    1414:	bl	74 <gomp_mutex_unlock>
    1418:	b	1420 <delete_copyout+0x320>
    141c:	nop
    1420:	ldp	x29, x30, [sp], #112
    1424:	ret

0000000000001428 <acc_delete>:
    1428:	stp	x29, x30, [sp, #-32]!
    142c:	mov	x29, sp
    1430:	str	x0, [sp, #24]
    1434:	str	x1, [sp, #16]
    1438:	adrp	x0, 0 <gomp_mutex_lock>
    143c:	add	x4, x0, #0x0
    1440:	mov	w3, #0xfffffffe            	// #-2
    1444:	ldr	x2, [sp, #16]
    1448:	ldr	x1, [sp, #24]
    144c:	mov	w0, #0x0                   	// #0
    1450:	bl	1100 <delete_copyout>
    1454:	nop
    1458:	ldp	x29, x30, [sp], #32
    145c:	ret

0000000000001460 <acc_delete_async>:
    1460:	stp	x29, x30, [sp, #-48]!
    1464:	mov	x29, sp
    1468:	str	x0, [sp, #40]
    146c:	str	x1, [sp, #32]
    1470:	str	w2, [sp, #28]
    1474:	adrp	x0, 0 <gomp_mutex_lock>
    1478:	add	x4, x0, #0x0
    147c:	ldr	w3, [sp, #28]
    1480:	ldr	x2, [sp, #32]
    1484:	ldr	x1, [sp, #40]
    1488:	mov	w0, #0x0                   	// #0
    148c:	bl	1100 <delete_copyout>
    1490:	nop
    1494:	ldp	x29, x30, [sp], #48
    1498:	ret

000000000000149c <acc_delete_finalize>:
    149c:	stp	x29, x30, [sp, #-32]!
    14a0:	mov	x29, sp
    14a4:	str	x0, [sp, #24]
    14a8:	str	x1, [sp, #16]
    14ac:	adrp	x0, 0 <gomp_mutex_lock>
    14b0:	add	x4, x0, #0x0
    14b4:	mov	w3, #0xfffffffe            	// #-2
    14b8:	ldr	x2, [sp, #16]
    14bc:	ldr	x1, [sp, #24]
    14c0:	mov	w0, #0x2                   	// #2
    14c4:	bl	1100 <delete_copyout>
    14c8:	nop
    14cc:	ldp	x29, x30, [sp], #32
    14d0:	ret

00000000000014d4 <acc_delete_finalize_async>:
    14d4:	stp	x29, x30, [sp, #-48]!
    14d8:	mov	x29, sp
    14dc:	str	x0, [sp, #40]
    14e0:	str	x1, [sp, #32]
    14e4:	str	w2, [sp, #28]
    14e8:	adrp	x0, 0 <gomp_mutex_lock>
    14ec:	add	x4, x0, #0x0
    14f0:	ldr	w3, [sp, #28]
    14f4:	ldr	x2, [sp, #32]
    14f8:	ldr	x1, [sp, #40]
    14fc:	mov	w0, #0x2                   	// #2
    1500:	bl	1100 <delete_copyout>
    1504:	nop
    1508:	ldp	x29, x30, [sp], #48
    150c:	ret

0000000000001510 <acc_copyout>:
    1510:	stp	x29, x30, [sp, #-32]!
    1514:	mov	x29, sp
    1518:	str	x0, [sp, #24]
    151c:	str	x1, [sp, #16]
    1520:	adrp	x0, 0 <gomp_mutex_lock>
    1524:	add	x4, x0, #0x0
    1528:	mov	w3, #0xfffffffe            	// #-2
    152c:	ldr	x2, [sp, #16]
    1530:	ldr	x1, [sp, #24]
    1534:	mov	w0, #0x1                   	// #1
    1538:	bl	1100 <delete_copyout>
    153c:	nop
    1540:	ldp	x29, x30, [sp], #32
    1544:	ret

0000000000001548 <acc_copyout_async>:
    1548:	stp	x29, x30, [sp, #-48]!
    154c:	mov	x29, sp
    1550:	str	x0, [sp, #40]
    1554:	str	x1, [sp, #32]
    1558:	str	w2, [sp, #28]
    155c:	adrp	x0, 0 <gomp_mutex_lock>
    1560:	add	x4, x0, #0x0
    1564:	ldr	w3, [sp, #28]
    1568:	ldr	x2, [sp, #32]
    156c:	ldr	x1, [sp, #40]
    1570:	mov	w0, #0x1                   	// #1
    1574:	bl	1100 <delete_copyout>
    1578:	nop
    157c:	ldp	x29, x30, [sp], #48
    1580:	ret

0000000000001584 <acc_copyout_finalize>:
    1584:	stp	x29, x30, [sp, #-32]!
    1588:	mov	x29, sp
    158c:	str	x0, [sp, #24]
    1590:	str	x1, [sp, #16]
    1594:	adrp	x0, 0 <gomp_mutex_lock>
    1598:	add	x4, x0, #0x0
    159c:	mov	w3, #0xfffffffe            	// #-2
    15a0:	ldr	x2, [sp, #16]
    15a4:	ldr	x1, [sp, #24]
    15a8:	mov	w0, #0x3                   	// #3
    15ac:	bl	1100 <delete_copyout>
    15b0:	nop
    15b4:	ldp	x29, x30, [sp], #32
    15b8:	ret

00000000000015bc <acc_copyout_finalize_async>:
    15bc:	stp	x29, x30, [sp, #-48]!
    15c0:	mov	x29, sp
    15c4:	str	x0, [sp, #40]
    15c8:	str	x1, [sp, #32]
    15cc:	str	w2, [sp, #28]
    15d0:	adrp	x0, 0 <gomp_mutex_lock>
    15d4:	add	x4, x0, #0x0
    15d8:	ldr	w3, [sp, #28]
    15dc:	ldr	x2, [sp, #32]
    15e0:	ldr	x1, [sp, #40]
    15e4:	mov	w0, #0x3                   	// #3
    15e8:	bl	1100 <delete_copyout>
    15ec:	nop
    15f0:	ldp	x29, x30, [sp], #48
    15f4:	ret

00000000000015f8 <update_dev_host>:
    15f8:	stp	x29, x30, [sp, #-80]!
    15fc:	mov	x29, sp
    1600:	str	w0, [sp, #44]
    1604:	str	x1, [sp, #32]
    1608:	str	x2, [sp, #24]
    160c:	str	w3, [sp, #40]
    1610:	bl	0 <goacc_lazy_initialize>
    1614:	bl	c0 <goacc_thread>
    1618:	str	x0, [sp, #72]
    161c:	ldr	x0, [sp, #72]
    1620:	ldr	x0, [x0, #8]
    1624:	str	x0, [sp, #64]
    1628:	ldr	x0, [sp, #64]
    162c:	ldr	w0, [x0, #8]
    1630:	and	w0, w0, #0x1
    1634:	cmp	w0, #0x0
    1638:	b.ne	1754 <update_dev_host+0x15c>  // b.any
    163c:	ldr	x0, [sp, #64]
    1640:	add	x0, x0, #0xa8
    1644:	bl	0 <gomp_mutex_lock>
    1648:	ldr	x2, [sp, #24]
    164c:	ldr	x1, [sp, #32]
    1650:	ldr	x0, [sp, #64]
    1654:	bl	d8 <lookup_host>
    1658:	str	x0, [sp, #56]
    165c:	ldr	x0, [sp, #56]
    1660:	cmp	x0, #0x0
    1664:	b.ne	168c <update_dev_host+0x94>  // b.any
    1668:	ldr	x0, [sp, #64]
    166c:	add	x0, x0, #0xa8
    1670:	bl	74 <gomp_mutex_unlock>
    1674:	ldr	x0, [sp, #24]
    1678:	mov	w2, w0
    167c:	ldr	x1, [sp, #32]
    1680:	adrp	x0, 0 <gomp_mutex_lock>
    1684:	add	x0, x0, #0x0
    1688:	bl	0 <gomp_fatal>
    168c:	ldr	x0, [sp, #56]
    1690:	ldr	x0, [x0, #16]
    1694:	ldr	x1, [x0, #16]
    1698:	ldr	x0, [sp, #56]
    169c:	ldr	x0, [x0, #24]
    16a0:	add	x1, x1, x0
    16a4:	ldr	x0, [sp, #32]
    16a8:	add	x1, x1, x0
    16ac:	ldr	x0, [sp, #56]
    16b0:	ldr	x0, [x0]
    16b4:	sub	x0, x1, x0
    16b8:	str	x0, [sp, #48]
    16bc:	ldr	w0, [sp, #40]
    16c0:	cmn	w0, #0x1
    16c4:	b.lt	16d8 <update_dev_host+0xe0>  // b.tstop
    16c8:	ldr	x0, [sp, #64]
    16cc:	ldr	x1, [x0, #248]
    16d0:	ldr	w0, [sp, #40]
    16d4:	blr	x1
    16d8:	ldr	w0, [sp, #44]
    16dc:	cmp	w0, #0x0
    16e0:	b.eq	1708 <update_dev_host+0x110>  // b.none
    16e4:	ldr	x0, [sp, #64]
    16e8:	ldr	x4, [x0, #120]
    16ec:	ldr	x0, [sp, #64]
    16f0:	ldr	w0, [x0, #12]
    16f4:	ldr	x3, [sp, #24]
    16f8:	ldr	x2, [sp, #32]
    16fc:	ldr	x1, [sp, #48]
    1700:	blr	x4
    1704:	b	1728 <update_dev_host+0x130>
    1708:	ldr	x0, [sp, #64]
    170c:	ldr	x4, [x0, #112]
    1710:	ldr	x0, [sp, #64]
    1714:	ldr	w0, [x0, #12]
    1718:	ldr	x3, [sp, #24]
    171c:	ldr	x2, [sp, #48]
    1720:	ldr	x1, [sp, #32]
    1724:	blr	x4
    1728:	ldr	w0, [sp, #40]
    172c:	cmn	w0, #0x1
    1730:	b.lt	1744 <update_dev_host+0x14c>  // b.tstop
    1734:	ldr	x0, [sp, #64]
    1738:	ldr	x1, [x0, #248]
    173c:	mov	w0, #0xfffffffe            	// #-2
    1740:	blr	x1
    1744:	ldr	x0, [sp, #64]
    1748:	add	x0, x0, #0xa8
    174c:	bl	74 <gomp_mutex_unlock>
    1750:	b	1758 <update_dev_host+0x160>
    1754:	nop
    1758:	ldp	x29, x30, [sp], #80
    175c:	ret

0000000000001760 <acc_update_device>:
    1760:	stp	x29, x30, [sp, #-32]!
    1764:	mov	x29, sp
    1768:	str	x0, [sp, #24]
    176c:	str	x1, [sp, #16]
    1770:	mov	w3, #0xfffffffe            	// #-2
    1774:	ldr	x2, [sp, #16]
    1778:	ldr	x1, [sp, #24]
    177c:	mov	w0, #0x1                   	// #1
    1780:	bl	15f8 <update_dev_host>
    1784:	nop
    1788:	ldp	x29, x30, [sp], #32
    178c:	ret

0000000000001790 <acc_update_device_async>:
    1790:	stp	x29, x30, [sp, #-48]!
    1794:	mov	x29, sp
    1798:	str	x0, [sp, #40]
    179c:	str	x1, [sp, #32]
    17a0:	str	w2, [sp, #28]
    17a4:	ldr	w3, [sp, #28]
    17a8:	ldr	x2, [sp, #32]
    17ac:	ldr	x1, [sp, #40]
    17b0:	mov	w0, #0x1                   	// #1
    17b4:	bl	15f8 <update_dev_host>
    17b8:	nop
    17bc:	ldp	x29, x30, [sp], #48
    17c0:	ret

00000000000017c4 <acc_update_self>:
    17c4:	stp	x29, x30, [sp, #-32]!
    17c8:	mov	x29, sp
    17cc:	str	x0, [sp, #24]
    17d0:	str	x1, [sp, #16]
    17d4:	mov	w3, #0xfffffffe            	// #-2
    17d8:	ldr	x2, [sp, #16]
    17dc:	ldr	x1, [sp, #24]
    17e0:	mov	w0, #0x0                   	// #0
    17e4:	bl	15f8 <update_dev_host>
    17e8:	nop
    17ec:	ldp	x29, x30, [sp], #32
    17f0:	ret

00000000000017f4 <acc_update_self_async>:
    17f4:	stp	x29, x30, [sp, #-48]!
    17f8:	mov	x29, sp
    17fc:	str	x0, [sp, #40]
    1800:	str	x1, [sp, #32]
    1804:	str	w2, [sp, #28]
    1808:	ldr	w3, [sp, #28]
    180c:	ldr	x2, [sp, #32]
    1810:	ldr	x1, [sp, #40]
    1814:	mov	w0, #0x0                   	// #0
    1818:	bl	15f8 <update_dev_host>
    181c:	nop
    1820:	ldp	x29, x30, [sp], #48
    1824:	ret

0000000000001828 <gomp_acc_insert_pointer>:
    1828:	stp	x29, x30, [sp, #-96]!
    182c:	mov	x29, sp
    1830:	str	x0, [sp, #40]
    1834:	str	x1, [sp, #32]
    1838:	str	x2, [sp, #24]
    183c:	str	x3, [sp, #16]
    1840:	bl	c0 <goacc_thread>
    1844:	str	x0, [sp, #72]
    1848:	ldr	x0, [sp, #72]
    184c:	ldr	x0, [x0, #8]
    1850:	str	x0, [sp, #64]
    1854:	ldr	x0, [sp, #32]
    1858:	ldr	x2, [x0]
    185c:	ldr	x0, [sp, #24]
    1860:	ldr	x0, [x0]
    1864:	mov	x1, x0
    1868:	mov	x0, x2
    186c:	bl	8b0 <acc_is_present>
    1870:	cmp	w0, #0x0
    1874:	b.eq	19d8 <gomp_acc_insert_pointer+0x1b0>  // b.none
    1878:	ldr	x0, [sp, #64]
    187c:	add	x0, x0, #0xa8
    1880:	bl	0 <gomp_mutex_lock>
    1884:	ldr	x0, [sp, #32]
    1888:	ldr	x1, [x0]
    188c:	ldr	x0, [sp, #24]
    1890:	ldr	x0, [x0]
    1894:	mov	x2, x0
    1898:	ldr	x0, [sp, #64]
    189c:	bl	d8 <lookup_host>
    18a0:	str	x0, [sp, #48]
    18a4:	ldr	x0, [sp, #64]
    18a8:	add	x0, x0, #0xa8
    18ac:	bl	74 <gomp_mutex_unlock>
    18b0:	ldr	x0, [sp, #48]
    18b4:	ldr	x0, [x0, #16]
    18b8:	str	x0, [sp, #56]
    18bc:	str	xzr, [sp, #88]
    18c0:	b	19b8 <gomp_acc_insert_pointer+0x190>
    18c4:	ldr	x1, [sp, #56]
    18c8:	ldr	x0, [sp, #88]
    18cc:	add	x0, x0, #0x2
    18d0:	lsl	x0, x0, #5
    18d4:	add	x0, x1, x0
    18d8:	ldr	x0, [x0]
    18dc:	ldr	x1, [sp, #48]
    18e0:	cmp	x1, x0
    18e4:	b.ne	19ac <gomp_acc_insert_pointer+0x184>  // b.any
    18e8:	str	xzr, [sp, #80]
    18ec:	b	1998 <gomp_acc_insert_pointer+0x170>
    18f0:	ldr	x1, [sp, #88]
    18f4:	ldr	x0, [sp, #80]
    18f8:	add	x1, x1, x0
    18fc:	ldr	x0, [sp, #56]
    1900:	ldr	x0, [x0, #48]
    1904:	cmp	x1, x0
    1908:	b.cs	198c <gomp_acc_insert_pointer+0x164>  // b.hs, b.nlast
    190c:	ldr	x1, [sp, #88]
    1910:	ldr	x0, [sp, #80]
    1914:	add	x0, x1, x0
    1918:	ldr	x1, [sp, #56]
    191c:	add	x0, x0, #0x2
    1920:	lsl	x0, x0, #5
    1924:	add	x0, x1, x0
    1928:	ldr	x0, [x0]
    192c:	cmp	x0, #0x0
    1930:	b.eq	198c <gomp_acc_insert_pointer+0x164>  // b.none
    1934:	ldr	x1, [sp, #88]
    1938:	ldr	x0, [sp, #80]
    193c:	add	x0, x1, x0
    1940:	ldr	x1, [sp, #56]
    1944:	add	x0, x0, #0x2
    1948:	lsl	x0, x0, #5
    194c:	add	x0, x1, x0
    1950:	ldr	x0, [x0]
    1954:	ldr	x1, [x0, #32]
    1958:	add	x1, x1, #0x1
    195c:	str	x1, [x0, #32]
    1960:	ldr	x1, [sp, #88]
    1964:	ldr	x0, [sp, #80]
    1968:	add	x0, x1, x0
    196c:	ldr	x1, [sp, #56]
    1970:	add	x0, x0, #0x2
    1974:	lsl	x0, x0, #5
    1978:	add	x0, x1, x0
    197c:	ldr	x0, [x0]
    1980:	ldr	x1, [x0, #40]
    1984:	add	x1, x1, #0x1
    1988:	str	x1, [x0, #40]
    198c:	ldr	x0, [sp, #80]
    1990:	add	x0, x0, #0x1
    1994:	str	x0, [sp, #80]
    1998:	ldr	x1, [sp, #80]
    199c:	ldr	x0, [sp, #40]
    19a0:	cmp	x1, x0
    19a4:	b.cc	18f0 <gomp_acc_insert_pointer+0xc8>  // b.lo, b.ul, b.last
    19a8:	b	1aa4 <gomp_acc_insert_pointer+0x27c>
    19ac:	ldr	x0, [sp, #88]
    19b0:	add	x0, x0, #0x1
    19b4:	str	x0, [sp, #88]
    19b8:	ldr	x0, [sp, #56]
    19bc:	ldr	x0, [x0, #48]
    19c0:	ldr	x1, [sp, #88]
    19c4:	cmp	x1, x0
    19c8:	b.cc	18c4 <gomp_acc_insert_pointer+0x9c>  // b.lo, b.ul, b.last
    19cc:	adrp	x0, 0 <gomp_mutex_lock>
    19d0:	add	x0, x0, #0x0
    19d4:	bl	0 <gomp_fatal>
    19d8:	adrp	x0, 0 <gomp_debug_var>
    19dc:	add	x0, x0, #0x0
    19e0:	ldr	w0, [x0]
    19e4:	sxtw	x0, w0
    19e8:	cmp	x0, #0x0
    19ec:	b.eq	1a08 <gomp_acc_insert_pointer+0x1e0>  // b.none
    19f0:	adrp	x0, 0 <gomp_mutex_lock>
    19f4:	add	x2, x0, #0x0
    19f8:	adrp	x0, 0 <gomp_mutex_lock>
    19fc:	add	x1, x0, #0x0
    1a00:	mov	w0, #0x0                   	// #0
    1a04:	bl	0 <gomp_debug>
    1a08:	mov	w7, #0x0                   	// #0
    1a0c:	mov	w6, #0x1                   	// #1
    1a10:	ldr	x5, [sp, #16]
    1a14:	ldr	x4, [sp, #24]
    1a18:	mov	x3, #0x0                   	// #0
    1a1c:	ldr	x2, [sp, #32]
    1a20:	ldr	x1, [sp, #40]
    1a24:	ldr	x0, [sp, #64]
    1a28:	bl	0 <gomp_map_vars>
    1a2c:	str	x0, [sp, #56]
    1a30:	adrp	x0, 0 <gomp_debug_var>
    1a34:	add	x0, x0, #0x0
    1a38:	ldr	w0, [x0]
    1a3c:	sxtw	x0, w0
    1a40:	cmp	x0, #0x0
    1a44:	b.eq	1a60 <gomp_acc_insert_pointer+0x238>  // b.none
    1a48:	adrp	x0, 0 <gomp_mutex_lock>
    1a4c:	add	x2, x0, #0x0
    1a50:	adrp	x0, 0 <gomp_mutex_lock>
    1a54:	add	x1, x0, #0x0
    1a58:	mov	w0, #0x0                   	// #0
    1a5c:	bl	0 <gomp_debug>
    1a60:	ldr	x0, [sp, #56]
    1a64:	ldr	x0, [x0, #64]
    1a68:	mov	x1, #0x1                   	// #1
    1a6c:	str	x1, [x0, #40]
    1a70:	ldr	x0, [sp, #64]
    1a74:	add	x0, x0, #0xa8
    1a78:	bl	0 <gomp_mutex_lock>
    1a7c:	ldr	x0, [sp, #64]
    1a80:	ldr	x1, [x0, #176]
    1a84:	ldr	x0, [sp, #56]
    1a88:	str	x1, [x0, #40]
    1a8c:	ldr	x0, [sp, #64]
    1a90:	ldr	x1, [sp, #56]
    1a94:	str	x1, [x0, #176]
    1a98:	ldr	x0, [sp, #64]
    1a9c:	add	x0, x0, #0xa8
    1aa0:	bl	74 <gomp_mutex_unlock>
    1aa4:	ldp	x29, x30, [sp], #96
    1aa8:	ret

0000000000001aac <gomp_acc_remove_pointer>:
    1aac:	stp	x29, x30, [sp, #-112]!
    1ab0:	mov	x29, sp
    1ab4:	str	x0, [sp, #40]
    1ab8:	str	x1, [sp, #32]
    1abc:	strb	w2, [sp, #31]
    1ac0:	str	w3, [sp, #24]
    1ac4:	str	w4, [sp, #20]
    1ac8:	str	w5, [sp, #16]
    1acc:	bl	c0 <goacc_thread>
    1ad0:	str	x0, [sp, #80]
    1ad4:	ldr	x0, [sp, #80]
    1ad8:	ldr	x0, [x0, #8]
    1adc:	str	x0, [sp, #72]
    1ae0:	ldr	w0, [sp, #16]
    1ae4:	cmp	w0, #0x1
    1ae8:	b.ne	1af4 <gomp_acc_remove_pointer+0x48>  // b.any
    1aec:	mov	w0, #0x2                   	// #2
    1af0:	b	1af8 <gomp_acc_remove_pointer+0x4c>
    1af4:	mov	w0, #0x3                   	// #3
    1af8:	str	w0, [sp, #68]
    1afc:	ldr	x1, [sp, #32]
    1b00:	ldr	x0, [sp, #40]
    1b04:	bl	8b0 <acc_is_present>
    1b08:	cmp	w0, #0x0
    1b0c:	b.eq	1dd8 <gomp_acc_remove_pointer+0x32c>  // b.none
    1b10:	ldr	x0, [sp, #72]
    1b14:	add	x0, x0, #0xa8
    1b18:	bl	0 <gomp_mutex_lock>
    1b1c:	mov	x2, #0x1                   	// #1
    1b20:	ldr	x1, [sp, #40]
    1b24:	ldr	x0, [sp, #72]
    1b28:	bl	d8 <lookup_host>
    1b2c:	str	x0, [sp, #56]
    1b30:	ldr	x0, [sp, #56]
    1b34:	cmp	x0, #0x0
    1b38:	b.ne	1b58 <gomp_acc_remove_pointer+0xac>  // b.any
    1b3c:	ldr	x0, [sp, #72]
    1b40:	add	x0, x0, #0xa8
    1b44:	bl	74 <gomp_mutex_unlock>
    1b48:	ldr	x1, [sp, #40]
    1b4c:	adrp	x0, 0 <gomp_mutex_lock>
    1b50:	add	x0, x0, #0x0
    1b54:	bl	0 <gomp_fatal>
    1b58:	adrp	x0, 0 <gomp_debug_var>
    1b5c:	add	x0, x0, #0x0
    1b60:	ldr	w0, [x0]
    1b64:	sxtw	x0, w0
    1b68:	cmp	x0, #0x0
    1b6c:	b.eq	1b88 <gomp_acc_remove_pointer+0xdc>  // b.none
    1b70:	adrp	x0, 0 <gomp_mutex_lock>
    1b74:	add	x2, x0, #0x0
    1b78:	adrp	x0, 0 <gomp_mutex_lock>
    1b7c:	add	x1, x0, #0x0
    1b80:	mov	w0, #0x0                   	// #0
    1b84:	bl	0 <gomp_debug>
    1b88:	ldr	x0, [sp, #56]
    1b8c:	ldr	x0, [x0, #16]
    1b90:	str	x0, [sp, #104]
    1b94:	ldr	x0, [sp, #56]
    1b98:	ldr	x1, [x0, #32]
    1b9c:	ldr	x0, [sp, #56]
    1ba0:	ldr	x0, [x0, #40]
    1ba4:	cmp	x1, x0
    1ba8:	b.cs	1bc4 <gomp_acc_remove_pointer+0x118>  // b.hs, b.nlast
    1bac:	ldr	x0, [sp, #72]
    1bb0:	add	x0, x0, #0xa8
    1bb4:	bl	74 <gomp_mutex_unlock>
    1bb8:	adrp	x0, 0 <gomp_mutex_lock>
    1bbc:	add	x0, x0, #0x0
    1bc0:	bl	0 <gomp_fatal>
    1bc4:	ldr	w0, [sp, #20]
    1bc8:	cmp	w0, #0x0
    1bcc:	b.eq	1bf8 <gomp_acc_remove_pointer+0x14c>  // b.none
    1bd0:	ldr	x0, [sp, #56]
    1bd4:	ldr	x1, [x0, #32]
    1bd8:	ldr	x0, [sp, #56]
    1bdc:	ldr	x0, [x0, #40]
    1be0:	sub	x1, x1, x0
    1be4:	ldr	x0, [sp, #56]
    1be8:	str	x1, [x0, #32]
    1bec:	ldr	x0, [sp, #56]
    1bf0:	str	xzr, [x0, #40]
    1bf4:	b	1c30 <gomp_acc_remove_pointer+0x184>
    1bf8:	ldr	x0, [sp, #56]
    1bfc:	ldr	x0, [x0, #40]
    1c00:	cmp	x0, #0x0
    1c04:	b.eq	1c30 <gomp_acc_remove_pointer+0x184>  // b.none
    1c08:	ldr	x0, [sp, #56]
    1c0c:	ldr	x0, [x0, #40]
    1c10:	sub	x1, x0, #0x1
    1c14:	ldr	x0, [sp, #56]
    1c18:	str	x1, [x0, #40]
    1c1c:	ldr	x0, [sp, #56]
    1c20:	ldr	x0, [x0, #32]
    1c24:	sub	x1, x0, #0x1
    1c28:	ldr	x0, [sp, #56]
    1c2c:	str	x1, [x0, #32]
    1c30:	ldr	x0, [sp, #72]
    1c34:	add	x0, x0, #0xa8
    1c38:	bl	74 <gomp_mutex_unlock>
    1c3c:	ldr	x0, [sp, #56]
    1c40:	ldr	x0, [x0, #32]
    1c44:	cmp	x0, #0x0
    1c48:	b.ne	1d98 <gomp_acc_remove_pointer+0x2ec>  // b.any
    1c4c:	ldr	x0, [sp, #104]
    1c50:	ldr	x1, [x0]
    1c54:	ldrsw	x0, [sp, #68]
    1c58:	cmp	x1, x0
    1c5c:	b.ne	1cdc <gomp_acc_remove_pointer+0x230>  // b.any
    1c60:	str	xzr, [sp, #96]
    1c64:	ldr	x0, [sp, #72]
    1c68:	ldr	x0, [x0, #176]
    1c6c:	str	x0, [sp, #104]
    1c70:	b	1cd0 <gomp_acc_remove_pointer+0x224>
    1c74:	ldr	x0, [sp, #56]
    1c78:	ldr	x0, [x0, #16]
    1c7c:	ldr	x1, [sp, #104]
    1c80:	cmp	x1, x0
    1c84:	b.ne	1cbc <gomp_acc_remove_pointer+0x210>  // b.any
    1c88:	ldr	x0, [sp, #96]
    1c8c:	cmp	x0, #0x0
    1c90:	b.eq	1ca8 <gomp_acc_remove_pointer+0x1fc>  // b.none
    1c94:	ldr	x0, [sp, #104]
    1c98:	ldr	x1, [x0, #40]
    1c9c:	ldr	x0, [sp, #96]
    1ca0:	str	x1, [x0, #40]
    1ca4:	b	1cdc <gomp_acc_remove_pointer+0x230>
    1ca8:	ldr	x0, [sp, #104]
    1cac:	ldr	x1, [x0, #40]
    1cb0:	ldr	x0, [sp, #72]
    1cb4:	str	x1, [x0, #176]
    1cb8:	b	1cdc <gomp_acc_remove_pointer+0x230>
    1cbc:	ldr	x0, [sp, #104]
    1cc0:	str	x0, [sp, #96]
    1cc4:	ldr	x0, [sp, #104]
    1cc8:	ldr	x0, [x0, #40]
    1ccc:	str	x0, [sp, #104]
    1cd0:	ldr	x0, [sp, #104]
    1cd4:	cmp	x0, #0x0
    1cd8:	b.ne	1c74 <gomp_acc_remove_pointer+0x1c8>  // b.any
    1cdc:	ldr	x0, [sp, #56]
    1ce0:	mov	x1, #0x1                   	// #1
    1ce4:	str	x1, [x0, #32]
    1ce8:	ldrsw	x1, [sp, #68]
    1cec:	ldr	x0, [sp, #104]
    1cf0:	str	x1, [x0]
    1cf4:	str	xzr, [sp, #88]
    1cf8:	b	1d50 <gomp_acc_remove_pointer+0x2a4>
    1cfc:	ldr	x1, [sp, #104]
    1d00:	ldr	x0, [sp, #88]
    1d04:	add	x0, x0, #0x2
    1d08:	lsl	x0, x0, #5
    1d0c:	add	x0, x1, x0
    1d10:	ldr	x0, [x0]
    1d14:	ldr	x1, [sp, #56]
    1d18:	cmp	x1, x0
    1d1c:	b.ne	1d44 <gomp_acc_remove_pointer+0x298>  // b.any
    1d20:	ldrb	w2, [sp, #31]
    1d24:	ldr	x1, [sp, #104]
    1d28:	ldr	x0, [sp, #88]
    1d2c:	add	x0, x0, #0x2
    1d30:	lsl	x0, x0, #5
    1d34:	add	x0, x1, x0
    1d38:	mov	w1, w2
    1d3c:	strb	w1, [x0, #8]
    1d40:	b	1d64 <gomp_acc_remove_pointer+0x2b8>
    1d44:	ldr	x0, [sp, #88]
    1d48:	add	x0, x0, #0x1
    1d4c:	str	x0, [sp, #88]
    1d50:	ldr	x0, [sp, #104]
    1d54:	ldr	x0, [x0, #48]
    1d58:	ldr	x1, [sp, #88]
    1d5c:	cmp	x1, x0
    1d60:	b.cc	1cfc <gomp_acc_remove_pointer+0x250>  // b.lo, b.ul, b.last
    1d64:	ldr	w0, [sp, #24]
    1d68:	cmn	w0, #0x1
    1d6c:	b.ge	1d80 <gomp_acc_remove_pointer+0x2d4>  // b.tcont
    1d70:	mov	w1, #0x1                   	// #1
    1d74:	ldr	x0, [sp, #104]
    1d78:	bl	0 <gomp_unmap_vars>
    1d7c:	b	1d98 <gomp_acc_remove_pointer+0x2ec>
    1d80:	ldr	x0, [sp, #104]
    1d84:	ldr	x0, [x0, #56]
    1d88:	ldr	x2, [x0, #192]
    1d8c:	ldr	w1, [sp, #24]
    1d90:	ldr	x0, [sp, #104]
    1d94:	blr	x2
    1d98:	ldr	x0, [sp, #72]
    1d9c:	add	x0, x0, #0xa8
    1da0:	bl	74 <gomp_mutex_unlock>
    1da4:	adrp	x0, 0 <gomp_debug_var>
    1da8:	add	x0, x0, #0x0
    1dac:	ldr	w0, [x0]
    1db0:	sxtw	x0, w0
    1db4:	cmp	x0, #0x0
    1db8:	b.eq	1ddc <gomp_acc_remove_pointer+0x330>  // b.none
    1dbc:	adrp	x0, 0 <gomp_mutex_lock>
    1dc0:	add	x2, x0, #0x0
    1dc4:	adrp	x0, 0 <gomp_mutex_lock>
    1dc8:	add	x1, x0, #0x0
    1dcc:	mov	w0, #0x0                   	// #0
    1dd0:	bl	0 <gomp_debug>
    1dd4:	b	1ddc <gomp_acc_remove_pointer+0x330>
    1dd8:	nop
    1ddc:	ldp	x29, x30, [sp], #112
    1de0:	ret

oacc-async.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <goacc_thread>:
   0:	mrs	x1, tpidr_el0
   4:	adrp	x0, 0 <goacc_tls_data>
   8:	ldr	x0, [x0]
   c:	add	x0, x1, x0
  10:	ldr	x0, [x0]
  14:	ret

0000000000000018 <async_valid_stream_id_p>:
  18:	sub	sp, sp, #0x10
  1c:	str	w0, [sp, #12]
  20:	ldr	w0, [sp, #12]
  24:	mvn	w0, w0
  28:	lsr	w0, w0, #31
  2c:	and	w0, w0, #0xff
  30:	add	sp, sp, #0x10
  34:	ret

0000000000000038 <async_valid_p>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	mov	x29, sp
  40:	str	w0, [sp, #28]
  44:	ldr	w0, [sp, #28]
  48:	cmn	w0, #0x1
  4c:	b.eq	70 <async_valid_p+0x38>  // b.none
  50:	ldr	w0, [sp, #28]
  54:	cmn	w0, #0x2
  58:	b.eq	70 <async_valid_p+0x38>  // b.none
  5c:	ldr	w0, [sp, #28]
  60:	bl	18 <async_valid_stream_id_p>
  64:	and	w0, w0, #0xff
  68:	cmp	w0, #0x0
  6c:	b.eq	78 <async_valid_p+0x40>  // b.none
  70:	mov	w0, #0x1                   	// #1
  74:	b	7c <async_valid_p+0x44>
  78:	mov	w0, #0x0                   	// #0
  7c:	and	w0, w0, #0x1
  80:	and	w0, w0, #0xff
  84:	ldp	x29, x30, [sp], #32
  88:	ret

000000000000008c <acc_async_test>:
  8c:	stp	x29, x30, [sp, #-48]!
  90:	mov	x29, sp
  94:	str	w0, [sp, #28]
  98:	ldr	w0, [sp, #28]
  9c:	bl	38 <async_valid_p>
  a0:	and	w0, w0, #0xff
  a4:	eor	w0, w0, #0x1
  a8:	and	w0, w0, #0xff
  ac:	cmp	w0, #0x0
  b0:	b.eq	c4 <acc_async_test+0x38>  // b.none
  b4:	ldr	w1, [sp, #28]
  b8:	adrp	x0, 0 <goacc_thread>
  bc:	add	x0, x0, #0x0
  c0:	bl	0 <gomp_fatal>
  c4:	bl	0 <goacc_thread>
  c8:	str	x0, [sp, #40]
  cc:	ldr	x0, [sp, #40]
  d0:	cmp	x0, #0x0
  d4:	b.eq	e8 <acc_async_test+0x5c>  // b.none
  d8:	ldr	x0, [sp, #40]
  dc:	ldr	x0, [x0, #8]
  e0:	cmp	x0, #0x0
  e4:	b.ne	f4 <acc_async_test+0x68>  // b.any
  e8:	adrp	x0, 0 <goacc_thread>
  ec:	add	x0, x0, #0x0
  f0:	bl	0 <gomp_fatal>
  f4:	ldr	x0, [sp, #40]
  f8:	ldr	x0, [x0, #8]
  fc:	ldr	x1, [x0, #200]
 100:	ldr	w0, [sp, #28]
 104:	blr	x1
 108:	ldp	x29, x30, [sp], #48
 10c:	ret

0000000000000110 <acc_async_test_all>:
 110:	stp	x29, x30, [sp, #-32]!
 114:	mov	x29, sp
 118:	bl	0 <goacc_thread>
 11c:	str	x0, [sp, #24]
 120:	ldr	x0, [sp, #24]
 124:	cmp	x0, #0x0
 128:	b.eq	13c <acc_async_test_all+0x2c>  // b.none
 12c:	ldr	x0, [sp, #24]
 130:	ldr	x0, [x0, #8]
 134:	cmp	x0, #0x0
 138:	b.ne	148 <acc_async_test_all+0x38>  // b.any
 13c:	adrp	x0, 0 <goacc_thread>
 140:	add	x0, x0, #0x0
 144:	bl	0 <gomp_fatal>
 148:	ldr	x0, [sp, #24]
 14c:	ldr	x0, [x0, #8]
 150:	ldr	x0, [x0, #208]
 154:	blr	x0
 158:	ldp	x29, x30, [sp], #32
 15c:	ret

0000000000000160 <acc_async_wait>:
 160:	stp	x29, x30, [sp, #-48]!
 164:	mov	x29, sp
 168:	str	w0, [sp, #28]
 16c:	ldr	w0, [sp, #28]
 170:	bl	38 <async_valid_p>
 174:	and	w0, w0, #0xff
 178:	eor	w0, w0, #0x1
 17c:	and	w0, w0, #0xff
 180:	cmp	w0, #0x0
 184:	b.eq	198 <acc_async_wait+0x38>  // b.none
 188:	ldr	w1, [sp, #28]
 18c:	adrp	x0, 0 <goacc_thread>
 190:	add	x0, x0, #0x0
 194:	bl	0 <gomp_fatal>
 198:	bl	0 <goacc_thread>
 19c:	str	x0, [sp, #40]
 1a0:	ldr	x0, [sp, #40]
 1a4:	cmp	x0, #0x0
 1a8:	b.eq	1bc <acc_async_wait+0x5c>  // b.none
 1ac:	ldr	x0, [sp, #40]
 1b0:	ldr	x0, [x0, #8]
 1b4:	cmp	x0, #0x0
 1b8:	b.ne	1c8 <acc_async_wait+0x68>  // b.any
 1bc:	adrp	x0, 0 <goacc_thread>
 1c0:	add	x0, x0, #0x0
 1c4:	bl	0 <gomp_fatal>
 1c8:	ldr	x0, [sp, #40]
 1cc:	ldr	x0, [x0, #8]
 1d0:	ldr	x1, [x0, #216]
 1d4:	ldr	w0, [sp, #28]
 1d8:	blr	x1
 1dc:	nop
 1e0:	ldp	x29, x30, [sp], #48
 1e4:	ret

00000000000001e8 <acc_wait_async>:
 1e8:	stp	x29, x30, [sp, #-48]!
 1ec:	mov	x29, sp
 1f0:	str	w0, [sp, #28]
 1f4:	str	w1, [sp, #24]
 1f8:	bl	0 <goacc_thread>
 1fc:	str	x0, [sp, #40]
 200:	ldr	x0, [sp, #40]
 204:	cmp	x0, #0x0
 208:	b.eq	21c <acc_wait_async+0x34>  // b.none
 20c:	ldr	x0, [sp, #40]
 210:	ldr	x0, [x0, #8]
 214:	cmp	x0, #0x0
 218:	b.ne	228 <acc_wait_async+0x40>  // b.any
 21c:	adrp	x0, 0 <goacc_thread>
 220:	add	x0, x0, #0x0
 224:	bl	0 <gomp_fatal>
 228:	ldr	x0, [sp, #40]
 22c:	ldr	x0, [x0, #8]
 230:	ldr	x2, [x0, #224]
 234:	ldr	w1, [sp, #24]
 238:	ldr	w0, [sp, #28]
 23c:	blr	x2
 240:	nop
 244:	ldp	x29, x30, [sp], #48
 248:	ret

000000000000024c <acc_async_wait_all>:
 24c:	stp	x29, x30, [sp, #-32]!
 250:	mov	x29, sp
 254:	bl	0 <goacc_thread>
 258:	str	x0, [sp, #24]
 25c:	ldr	x0, [sp, #24]
 260:	cmp	x0, #0x0
 264:	b.eq	278 <acc_async_wait_all+0x2c>  // b.none
 268:	ldr	x0, [sp, #24]
 26c:	ldr	x0, [x0, #8]
 270:	cmp	x0, #0x0
 274:	b.ne	284 <acc_async_wait_all+0x38>  // b.any
 278:	adrp	x0, 0 <goacc_thread>
 27c:	add	x0, x0, #0x0
 280:	bl	0 <gomp_fatal>
 284:	ldr	x0, [sp, #24]
 288:	ldr	x0, [x0, #8]
 28c:	ldr	x0, [x0, #232]
 290:	blr	x0
 294:	nop
 298:	ldp	x29, x30, [sp], #32
 29c:	ret

00000000000002a0 <acc_wait_all_async>:
 2a0:	stp	x29, x30, [sp, #-48]!
 2a4:	mov	x29, sp
 2a8:	str	w0, [sp, #28]
 2ac:	ldr	w0, [sp, #28]
 2b0:	bl	38 <async_valid_p>
 2b4:	and	w0, w0, #0xff
 2b8:	eor	w0, w0, #0x1
 2bc:	and	w0, w0, #0xff
 2c0:	cmp	w0, #0x0
 2c4:	b.eq	2d8 <acc_wait_all_async+0x38>  // b.none
 2c8:	ldr	w1, [sp, #28]
 2cc:	adrp	x0, 0 <goacc_thread>
 2d0:	add	x0, x0, #0x0
 2d4:	bl	0 <gomp_fatal>
 2d8:	bl	0 <goacc_thread>
 2dc:	str	x0, [sp, #40]
 2e0:	ldr	x0, [sp, #40]
 2e4:	cmp	x0, #0x0
 2e8:	b.eq	2fc <acc_wait_all_async+0x5c>  // b.none
 2ec:	ldr	x0, [sp, #40]
 2f0:	ldr	x0, [x0, #8]
 2f4:	cmp	x0, #0x0
 2f8:	b.ne	308 <acc_wait_all_async+0x68>  // b.any
 2fc:	adrp	x0, 0 <goacc_thread>
 300:	add	x0, x0, #0x0
 304:	bl	0 <gomp_fatal>
 308:	ldr	x0, [sp, #40]
 30c:	ldr	x0, [x0, #8]
 310:	ldr	x1, [x0, #240]
 314:	ldr	w0, [sp, #28]
 318:	blr	x1
 31c:	nop
 320:	ldp	x29, x30, [sp], #48
 324:	ret

oacc-plugin.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <goacc_thread>:
   0:	mrs	x1, tpidr_el0
   4:	adrp	x0, 0 <goacc_tls_data>
   8:	ldr	x0, [x0]
   c:	add	x0, x1, x0
  10:	ldr	x0, [x0]
  14:	ret

0000000000000018 <GOMP_PLUGIN_async_unmap_vars>:
  18:	stp	x29, x30, [sp, #-48]!
  1c:	mov	x29, sp
  20:	str	x0, [sp, #24]
  24:	str	w1, [sp, #20]
  28:	ldr	x0, [sp, #24]
  2c:	str	x0, [sp, #40]
  30:	ldr	x0, [sp, #40]
  34:	ldr	x0, [x0, #56]
  38:	str	x0, [sp, #32]
  3c:	ldr	x0, [sp, #32]
  40:	ldr	x1, [x0, #248]
  44:	ldr	w0, [sp, #20]
  48:	blr	x1
  4c:	mov	w1, #0x1                   	// #1
  50:	ldr	x0, [sp, #40]
  54:	bl	0 <gomp_unmap_vars>
  58:	ldr	x0, [sp, #32]
  5c:	ldr	x1, [x0, #248]
  60:	mov	w0, #0xfffffffe            	// #-2
  64:	blr	x1
  68:	nop
  6c:	ldp	x29, x30, [sp], #48
  70:	ret

0000000000000074 <GOMP_PLUGIN_acc_thread>:
  74:	stp	x29, x30, [sp, #-32]!
  78:	mov	x29, sp
  7c:	bl	0 <goacc_thread>
  80:	str	x0, [sp, #24]
  84:	ldr	x0, [sp, #24]
  88:	cmp	x0, #0x0
  8c:	b.eq	9c <GOMP_PLUGIN_acc_thread+0x28>  // b.none
  90:	ldr	x0, [sp, #24]
  94:	ldr	x0, [x0, #40]
  98:	b	a0 <GOMP_PLUGIN_acc_thread+0x2c>
  9c:	mov	x0, #0x0                   	// #0
  a0:	ldp	x29, x30, [sp], #32
  a4:	ret

00000000000000a8 <GOMP_PLUGIN_acc_default_dim>:
  a8:	stp	x29, x30, [sp, #-32]!
  ac:	mov	x29, sp
  b0:	str	w0, [sp, #28]
  b4:	ldr	w0, [sp, #28]
  b8:	cmp	w0, #0x2
  bc:	b.ls	d0 <GOMP_PLUGIN_acc_default_dim+0x28>  // b.plast
  c0:	ldr	w1, [sp, #28]
  c4:	adrp	x0, 0 <goacc_thread>
  c8:	add	x0, x0, #0x0
  cc:	bl	0 <gomp_fatal>
  d0:	adrp	x0, 0 <goacc_default_dims>
  d4:	add	x0, x0, #0x0
  d8:	ldr	w1, [sp, #28]
  dc:	ldr	w0, [x0, x1, lsl #2]
  e0:	ldp	x29, x30, [sp], #32
  e4:	ret

oacc-cuda.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <goacc_thread>:
   0:	mrs	x1, tpidr_el0
   4:	adrp	x0, 0 <goacc_tls_data>
   8:	ldr	x0, [x0]
   c:	add	x0, x1, x0
  10:	ldr	x0, [x0]
  14:	ret

0000000000000018 <async_valid_stream_id_p>:
  18:	sub	sp, sp, #0x10
  1c:	str	w0, [sp, #12]
  20:	ldr	w0, [sp, #12]
  24:	mvn	w0, w0
  28:	lsr	w0, w0, #31
  2c:	and	w0, w0, #0xff
  30:	add	sp, sp, #0x10
  34:	ret

0000000000000038 <async_valid_p>:
  38:	stp	x29, x30, [sp, #-32]!
  3c:	mov	x29, sp
  40:	str	w0, [sp, #28]
  44:	ldr	w0, [sp, #28]
  48:	cmn	w0, #0x1
  4c:	b.eq	70 <async_valid_p+0x38>  // b.none
  50:	ldr	w0, [sp, #28]
  54:	cmn	w0, #0x2
  58:	b.eq	70 <async_valid_p+0x38>  // b.none
  5c:	ldr	w0, [sp, #28]
  60:	bl	18 <async_valid_stream_id_p>
  64:	and	w0, w0, #0xff
  68:	cmp	w0, #0x0
  6c:	b.eq	78 <async_valid_p+0x40>  // b.none
  70:	mov	w0, #0x1                   	// #1
  74:	b	7c <async_valid_p+0x44>
  78:	mov	w0, #0x0                   	// #0
  7c:	and	w0, w0, #0x1
  80:	and	w0, w0, #0xff
  84:	ldp	x29, x30, [sp], #32
  88:	ret

000000000000008c <acc_get_current_cuda_device>:
  8c:	stp	x29, x30, [sp, #-32]!
  90:	mov	x29, sp
  94:	bl	0 <goacc_thread>
  98:	str	x0, [sp, #24]
  9c:	ldr	x0, [sp, #24]
  a0:	cmp	x0, #0x0
  a4:	b.eq	e0 <acc_get_current_cuda_device+0x54>  // b.none
  a8:	ldr	x0, [sp, #24]
  ac:	ldr	x0, [x0, #8]
  b0:	cmp	x0, #0x0
  b4:	b.eq	e0 <acc_get_current_cuda_device+0x54>  // b.none
  b8:	ldr	x0, [sp, #24]
  bc:	ldr	x0, [x0, #8]
  c0:	ldr	x0, [x0, #272]
  c4:	cmp	x0, #0x0
  c8:	b.eq	e0 <acc_get_current_cuda_device+0x54>  // b.none
  cc:	ldr	x0, [sp, #24]
  d0:	ldr	x0, [x0, #8]
  d4:	ldr	x0, [x0, #272]
  d8:	blr	x0
  dc:	b	e4 <acc_get_current_cuda_device+0x58>
  e0:	mov	x0, #0x0                   	// #0
  e4:	ldp	x29, x30, [sp], #32
  e8:	ret

00000000000000ec <acc_get_current_cuda_context>:
  ec:	stp	x29, x30, [sp, #-32]!
  f0:	mov	x29, sp
  f4:	bl	0 <goacc_thread>
  f8:	str	x0, [sp, #24]
  fc:	ldr	x0, [sp, #24]
 100:	cmp	x0, #0x0
 104:	b.eq	140 <acc_get_current_cuda_context+0x54>  // b.none
 108:	ldr	x0, [sp, #24]
 10c:	ldr	x0, [x0, #8]
 110:	cmp	x0, #0x0
 114:	b.eq	140 <acc_get_current_cuda_context+0x54>  // b.none
 118:	ldr	x0, [sp, #24]
 11c:	ldr	x0, [x0, #8]
 120:	ldr	x0, [x0, #280]
 124:	cmp	x0, #0x0
 128:	b.eq	140 <acc_get_current_cuda_context+0x54>  // b.none
 12c:	ldr	x0, [sp, #24]
 130:	ldr	x0, [x0, #8]
 134:	ldr	x0, [x0, #280]
 138:	blr	x0
 13c:	b	144 <acc_get_current_cuda_context+0x58>
 140:	mov	x0, #0x0                   	// #0
 144:	ldp	x29, x30, [sp], #32
 148:	ret

000000000000014c <acc_get_cuda_stream>:
 14c:	stp	x29, x30, [sp, #-48]!
 150:	mov	x29, sp
 154:	str	w0, [sp, #28]
 158:	bl	0 <goacc_thread>
 15c:	str	x0, [sp, #40]
 160:	ldr	w0, [sp, #28]
 164:	bl	38 <async_valid_p>
 168:	and	w0, w0, #0xff
 16c:	eor	w0, w0, #0x1
 170:	and	w0, w0, #0xff
 174:	cmp	w0, #0x0
 178:	b.eq	184 <acc_get_cuda_stream+0x38>  // b.none
 17c:	mov	x0, #0x0                   	// #0
 180:	b	1d0 <acc_get_cuda_stream+0x84>
 184:	ldr	x0, [sp, #40]
 188:	cmp	x0, #0x0
 18c:	b.eq	1cc <acc_get_cuda_stream+0x80>  // b.none
 190:	ldr	x0, [sp, #40]
 194:	ldr	x0, [x0, #8]
 198:	cmp	x0, #0x0
 19c:	b.eq	1cc <acc_get_cuda_stream+0x80>  // b.none
 1a0:	ldr	x0, [sp, #40]
 1a4:	ldr	x0, [x0, #8]
 1a8:	ldr	x0, [x0, #288]
 1ac:	cmp	x0, #0x0
 1b0:	b.eq	1cc <acc_get_cuda_stream+0x80>  // b.none
 1b4:	ldr	x0, [sp, #40]
 1b8:	ldr	x0, [x0, #8]
 1bc:	ldr	x1, [x0, #288]
 1c0:	ldr	w0, [sp, #28]
 1c4:	blr	x1
 1c8:	b	1d0 <acc_get_cuda_stream+0x84>
 1cc:	mov	x0, #0x0                   	// #0
 1d0:	ldp	x29, x30, [sp], #48
 1d4:	ret

00000000000001d8 <acc_set_cuda_stream>:
 1d8:	stp	x29, x30, [sp, #-48]!
 1dc:	mov	x29, sp
 1e0:	str	w0, [sp, #28]
 1e4:	str	x1, [sp, #16]
 1e8:	ldr	w0, [sp, #28]
 1ec:	bl	38 <async_valid_p>
 1f0:	and	w0, w0, #0xff
 1f4:	eor	w0, w0, #0x1
 1f8:	and	w0, w0, #0xff
 1fc:	cmp	w0, #0x0
 200:	b.ne	210 <acc_set_cuda_stream+0x38>  // b.any
 204:	ldr	x0, [sp, #16]
 208:	cmp	x0, #0x0
 20c:	b.ne	218 <acc_set_cuda_stream+0x40>  // b.any
 210:	mov	w0, #0x0                   	// #0
 214:	b	274 <acc_set_cuda_stream+0x9c>
 218:	bl	0 <goacc_lazy_initialize>
 21c:	bl	0 <goacc_thread>
 220:	str	x0, [sp, #40]
 224:	ldr	x0, [sp, #40]
 228:	cmp	x0, #0x0
 22c:	b.eq	270 <acc_set_cuda_stream+0x98>  // b.none
 230:	ldr	x0, [sp, #40]
 234:	ldr	x0, [x0, #8]
 238:	cmp	x0, #0x0
 23c:	b.eq	270 <acc_set_cuda_stream+0x98>  // b.none
 240:	ldr	x0, [sp, #40]
 244:	ldr	x0, [x0, #8]
 248:	ldr	x0, [x0, #296]
 24c:	cmp	x0, #0x0
 250:	b.eq	270 <acc_set_cuda_stream+0x98>  // b.none
 254:	ldr	x0, [sp, #40]
 258:	ldr	x0, [x0, #8]
 25c:	ldr	x2, [x0, #296]
 260:	ldr	x1, [sp, #16]
 264:	ldr	w0, [sp, #28]
 268:	blr	x2
 26c:	b	274 <acc_set_cuda_stream+0x9c>
 270:	mov	w0, #0xffffffff            	// #-1
 274:	ldp	x29, x30, [sp], #48
 278:	ret

priority_queue.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <priority_queue_lookup_priority>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	str	x0, [sp, #24]
   c:	str	w1, [sp, #20]
  10:	ldr	x0, [sp, #24]
  14:	ldr	x0, [x0]
  18:	cmp	x0, #0x0
  1c:	b.ne	28 <priority_queue_lookup_priority+0x28>  // b.any
  20:	mov	x0, #0x0                   	// #0
  24:	b	40 <priority_queue_lookup_priority+0x40>
  28:	ldr	w0, [sp, #20]
  2c:	str	w0, [sp, #40]
  30:	ldr	x0, [sp, #24]
  34:	add	x1, sp, #0x28
  38:	bl	900 <prio_splay_tree_lookup>
  3c:	nop
  40:	ldp	x29, x30, [sp], #64
  44:	ret

0000000000000048 <priority_list_remove>:
  48:	sub	sp, sp, #0x30
  4c:	str	x0, [sp, #24]
  50:	str	x1, [sp, #16]
  54:	str	w2, [sp, #12]
  58:	strb	wzr, [sp, #47]
  5c:	ldr	x0, [sp, #16]
  60:	ldr	x0, [x0, #8]
  64:	ldr	x1, [sp, #16]
  68:	ldr	x1, [x1]
  6c:	str	x1, [x0]
  70:	ldr	x0, [sp, #16]
  74:	ldr	x0, [x0]
  78:	ldr	x1, [sp, #16]
  7c:	ldr	x1, [x1, #8]
  80:	str	x1, [x0, #8]
  84:	ldr	x0, [sp, #24]
  88:	ldr	x0, [x0, #8]
  8c:	ldr	x1, [sp, #16]
  90:	cmp	x1, x0
  94:	b.ne	f0 <priority_list_remove+0xa8>  // b.any
  98:	ldr	x0, [sp, #16]
  9c:	ldr	x0, [x0]
  a0:	ldr	x1, [sp, #16]
  a4:	cmp	x1, x0
  a8:	b.eq	c0 <priority_list_remove+0x78>  // b.none
  ac:	ldr	x0, [sp, #16]
  b0:	ldr	x1, [x0]
  b4:	ldr	x0, [sp, #24]
  b8:	str	x1, [x0, #8]
  bc:	b	f4 <priority_list_remove+0xac>
  c0:	ldr	w0, [sp, #12]
  c4:	cmp	w0, #0x3
  c8:	b.ne	dc <priority_list_remove+0x94>  // b.any
  cc:	ldr	x0, [sp, #24]
  d0:	add	x0, x0, #0x8
  d4:	stlr	xzr, [x0]
  d8:	b	e4 <priority_list_remove+0x9c>
  dc:	ldr	x0, [sp, #24]
  e0:	str	xzr, [x0, #8]
  e4:	mov	w0, #0x1                   	// #1
  e8:	strb	w0, [sp, #47]
  ec:	b	f4 <priority_list_remove+0xac>
  f0:	nop
  f4:	ldrb	w0, [sp, #47]
  f8:	add	sp, sp, #0x30
  fc:	ret

0000000000000100 <priority_queue_offset>:
 100:	sub	sp, sp, #0x10
 104:	str	w0, [sp, #12]
 108:	ldr	w0, [sp, #12]
 10c:	sxtw	x0, w0
 110:	add	x0, x0, #0x6
 114:	lsl	x0, x0, #4
 118:	add	sp, sp, #0x10
 11c:	ret

0000000000000120 <priority_node_to_task>:
 120:	stp	x29, x30, [sp, #-32]!
 124:	mov	x29, sp
 128:	str	w0, [sp, #28]
 12c:	str	x1, [sp, #16]
 130:	ldr	w0, [sp, #28]
 134:	bl	100 <priority_queue_offset>
 138:	neg	x0, x0
 13c:	ldr	x1, [sp, #16]
 140:	add	x0, x1, x0
 144:	ldp	x29, x30, [sp], #32
 148:	ret

000000000000014c <priority_tree_remove>:
 14c:	stp	x29, x30, [sp, #-64]!
 150:	mov	x29, sp
 154:	str	w0, [sp, #44]
 158:	str	x1, [sp, #32]
 15c:	str	x2, [sp, #24]
 160:	ldr	x1, [sp, #24]
 164:	ldr	w0, [sp, #44]
 168:	bl	120 <priority_node_to_task>
 16c:	ldr	w0, [x0, #88]
 170:	str	w0, [sp, #60]
 174:	ldr	w1, [sp, #60]
 178:	ldr	x0, [sp, #32]
 17c:	bl	0 <priority_queue_lookup_priority>
 180:	str	x0, [sp, #48]
 184:	mov	w2, #0x0                   	// #0
 188:	ldr	x1, [sp, #24]
 18c:	ldr	x0, [sp, #48]
 190:	bl	48 <priority_list_remove>
 194:	and	w0, w0, #0xff
 198:	cmp	w0, #0x0
 19c:	b.eq	1bc <priority_tree_remove+0x70>  // b.none
 1a0:	ldr	x0, [sp, #32]
 1a4:	ldr	x1, [sp, #48]
 1a8:	bl	830 <prio_splay_tree_remove>
 1ac:	ldr	x0, [sp, #48]
 1b0:	str	xzr, [x0, #8]
 1b4:	ldr	x0, [sp, #48]
 1b8:	bl	0 <free>
 1bc:	nop
 1c0:	ldp	x29, x30, [sp], #64
 1c4:	ret

00000000000001c8 <priority_tree_next_task_1>:
 1c8:	stp	x29, x30, [sp, #-48]!
 1cc:	mov	x29, sp
 1d0:	str	w0, [sp, #28]
 1d4:	str	x1, [sp, #16]
 1d8:	ldr	x0, [sp, #16]
 1dc:	cmp	x0, #0x0
 1e0:	b.ne	1ec <priority_tree_next_task_1+0x24>  // b.any
 1e4:	mov	x0, #0x0                   	// #0
 1e8:	b	258 <priority_tree_next_task_1+0x90>
 1ec:	ldr	x0, [sp, #16]
 1f0:	ldr	x0, [x0, #32]
 1f4:	mov	x1, x0
 1f8:	ldr	w0, [sp, #28]
 1fc:	bl	1c8 <priority_tree_next_task_1>
 200:	str	x0, [sp, #40]
 204:	ldr	x0, [sp, #40]
 208:	cmp	x0, #0x0
 20c:	b.eq	218 <priority_tree_next_task_1+0x50>  // b.none
 210:	ldr	x0, [sp, #40]
 214:	b	258 <priority_tree_next_task_1+0x90>
 218:	ldr	x0, [sp, #16]
 21c:	ldr	x0, [x0, #8]
 220:	mov	x1, x0
 224:	ldr	w0, [sp, #28]
 228:	bl	120 <priority_node_to_task>
 22c:	str	x0, [sp, #40]
 230:	ldr	x0, [sp, #40]
 234:	ldr	w0, [x0, #200]
 238:	cmp	w0, #0x2
 23c:	b.ne	248 <priority_tree_next_task_1+0x80>  // b.any
 240:	ldr	x0, [sp, #40]
 244:	b	258 <priority_tree_next_task_1+0x90>
 248:	ldr	x0, [sp, #16]
 24c:	ldr	x0, [x0, #24]
 250:	str	x0, [sp, #16]
 254:	b	1d8 <priority_tree_next_task_1+0x10>
 258:	ldp	x29, x30, [sp], #48
 25c:	ret

0000000000000260 <priority_tree_next_task>:
 260:	stp	x29, x30, [sp, #-64]!
 264:	mov	x29, sp
 268:	str	w0, [sp, #44]
 26c:	str	x1, [sp, #32]
 270:	str	w2, [sp, #40]
 274:	str	x3, [sp, #24]
 278:	str	x4, [sp, #16]
 27c:	ldr	x0, [sp, #32]
 280:	ldr	x0, [x0]
 284:	mov	x1, x0
 288:	ldr	w0, [sp, #44]
 28c:	bl	1c8 <priority_tree_next_task_1>
 290:	str	x0, [sp, #56]
 294:	ldr	x0, [sp, #56]
 298:	cmp	x0, #0x0
 29c:	b.eq	2ac <priority_tree_next_task+0x4c>  // b.none
 2a0:	ldr	x0, [sp, #24]
 2a4:	cmp	x0, #0x0
 2a8:	b.ne	2c0 <priority_tree_next_task+0x60>  // b.any
 2ac:	ldr	x0, [sp, #16]
 2b0:	mov	w1, #0x1                   	// #1
 2b4:	strb	w1, [x0]
 2b8:	ldr	x0, [sp, #56]
 2bc:	b	380 <priority_tree_next_task+0x120>
 2c0:	ldr	x0, [sp, #24]
 2c4:	ldr	x0, [x0]
 2c8:	mov	x1, x0
 2cc:	ldr	w0, [sp, #40]
 2d0:	bl	1c8 <priority_tree_next_task_1>
 2d4:	str	x0, [sp, #48]
 2d8:	ldr	x0, [sp, #48]
 2dc:	cmp	x0, #0x0
 2e0:	b.eq	2fc <priority_tree_next_task+0x9c>  // b.none
 2e4:	ldr	x0, [sp, #56]
 2e8:	ldr	w1, [x0, #88]
 2ec:	ldr	x0, [sp, #48]
 2f0:	ldr	w0, [x0, #88]
 2f4:	cmp	w1, w0
 2f8:	b.le	310 <priority_tree_next_task+0xb0>
 2fc:	ldr	x0, [sp, #16]
 300:	mov	w1, #0x1                   	// #1
 304:	strb	w1, [x0]
 308:	ldr	x0, [sp, #56]
 30c:	b	380 <priority_tree_next_task+0x120>
 310:	ldr	x0, [sp, #48]
 314:	ldr	w1, [x0, #88]
 318:	ldr	x0, [sp, #56]
 31c:	ldr	w0, [x0, #88]
 320:	cmp	w1, w0
 324:	b.le	338 <priority_tree_next_task+0xd8>
 328:	ldr	x0, [sp, #16]
 32c:	strb	wzr, [x0]
 330:	ldr	x0, [sp, #48]
 334:	b	380 <priority_tree_next_task+0x120>
 338:	ldr	x0, [sp, #48]
 33c:	ldrb	w0, [x0, #207]
 340:	cmp	w0, #0x0
 344:	b.eq	370 <priority_tree_next_task+0x110>  // b.none
 348:	ldr	x0, [sp, #56]
 34c:	ldrb	w0, [x0, #207]
 350:	eor	w0, w0, #0x1
 354:	and	w0, w0, #0xff
 358:	cmp	w0, #0x0
 35c:	b.eq	370 <priority_tree_next_task+0x110>  // b.none
 360:	ldr	x0, [sp, #16]
 364:	strb	wzr, [x0]
 368:	ldr	x0, [sp, #48]
 36c:	b	380 <priority_tree_next_task+0x120>
 370:	ldr	x0, [sp, #16]
 374:	mov	w1, #0x1                   	// #1
 378:	strb	w1, [x0]
 37c:	ldr	x0, [sp, #56]
 380:	ldp	x29, x30, [sp], #64
 384:	ret

0000000000000388 <prio_splay_compare>:
 388:	sub	sp, sp, #0x10
 38c:	str	x0, [sp, #8]
 390:	str	x1, [sp]
 394:	ldr	x0, [sp, #8]
 398:	ldr	w1, [x0]
 39c:	ldr	x0, [sp]
 3a0:	ldr	w0, [x0]
 3a4:	cmp	w1, w0
 3a8:	b.ne	3b4 <prio_splay_compare+0x2c>  // b.any
 3ac:	mov	w0, #0x0                   	// #0
 3b0:	b	3d8 <prio_splay_compare+0x50>
 3b4:	ldr	x0, [sp, #8]
 3b8:	ldr	w1, [x0]
 3bc:	ldr	x0, [sp]
 3c0:	ldr	w0, [x0]
 3c4:	cmp	w1, w0
 3c8:	b.ge	3d4 <prio_splay_compare+0x4c>  // b.tcont
 3cc:	mov	w0, #0xffffffff            	// #-1
 3d0:	b	3d8 <prio_splay_compare+0x50>
 3d4:	mov	w0, #0x1                   	// #1
 3d8:	add	sp, sp, #0x10
 3dc:	ret

00000000000003e0 <rotate_left>:
 3e0:	sub	sp, sp, #0x30
 3e4:	str	x0, [sp, #24]
 3e8:	str	x1, [sp, #16]
 3ec:	str	x2, [sp, #8]
 3f0:	ldr	x0, [sp, #8]
 3f4:	ldr	x0, [x0, #32]
 3f8:	str	x0, [sp, #40]
 3fc:	ldr	x0, [sp, #8]
 400:	ldr	x1, [sp, #16]
 404:	str	x1, [x0, #32]
 408:	ldr	x0, [sp, #16]
 40c:	ldr	x1, [sp, #40]
 410:	str	x1, [x0, #24]
 414:	ldr	x0, [sp, #24]
 418:	ldr	x1, [sp, #8]
 41c:	str	x1, [x0]
 420:	nop
 424:	add	sp, sp, #0x30
 428:	ret

000000000000042c <rotate_right>:
 42c:	sub	sp, sp, #0x30
 430:	str	x0, [sp, #24]
 434:	str	x1, [sp, #16]
 438:	str	x2, [sp, #8]
 43c:	ldr	x0, [sp, #8]
 440:	ldr	x0, [x0, #24]
 444:	str	x0, [sp, #40]
 448:	ldr	x0, [sp, #8]
 44c:	ldr	x1, [sp, #16]
 450:	str	x1, [x0, #24]
 454:	ldr	x0, [sp, #16]
 458:	ldr	x1, [sp, #40]
 45c:	str	x1, [x0, #32]
 460:	ldr	x0, [sp, #24]
 464:	ldr	x1, [sp, #8]
 468:	str	x1, [x0]
 46c:	nop
 470:	add	sp, sp, #0x30
 474:	ret

0000000000000478 <splay_tree_splay>:
 478:	stp	x29, x30, [sp, #-64]!
 47c:	mov	x29, sp
 480:	str	x0, [sp, #24]
 484:	str	x1, [sp, #16]
 488:	ldr	x0, [sp, #24]
 48c:	ldr	x0, [x0]
 490:	cmp	x0, #0x0
 494:	b.eq	6e4 <splay_tree_splay+0x26c>  // b.none
 498:	ldr	x0, [sp, #24]
 49c:	ldr	x0, [x0]
 4a0:	str	x0, [sp, #48]
 4a4:	ldr	x0, [sp, #48]
 4a8:	mov	x1, x0
 4ac:	ldr	x0, [sp, #16]
 4b0:	bl	388 <prio_splay_compare>
 4b4:	str	w0, [sp, #44]
 4b8:	ldr	w0, [sp, #44]
 4bc:	cmp	w0, #0x0
 4c0:	b.eq	6ec <splay_tree_splay+0x274>  // b.none
 4c4:	ldr	w0, [sp, #44]
 4c8:	cmp	w0, #0x0
 4cc:	b.ge	4e0 <splay_tree_splay+0x68>  // b.tcont
 4d0:	ldr	x0, [sp, #48]
 4d4:	ldr	x0, [x0, #24]
 4d8:	str	x0, [sp, #56]
 4dc:	b	4ec <splay_tree_splay+0x74>
 4e0:	ldr	x0, [sp, #48]
 4e4:	ldr	x0, [x0, #32]
 4e8:	str	x0, [sp, #56]
 4ec:	ldr	x0, [sp, #56]
 4f0:	cmp	x0, #0x0
 4f4:	b.eq	6f4 <splay_tree_splay+0x27c>  // b.none
 4f8:	ldr	x0, [sp, #56]
 4fc:	mov	x1, x0
 500:	ldr	x0, [sp, #16]
 504:	bl	388 <prio_splay_compare>
 508:	str	w0, [sp, #40]
 50c:	ldr	w0, [sp, #40]
 510:	cmp	w0, #0x0
 514:	b.eq	550 <splay_tree_splay+0xd8>  // b.none
 518:	ldr	w0, [sp, #40]
 51c:	cmp	w0, #0x0
 520:	b.ge	534 <splay_tree_splay+0xbc>  // b.tcont
 524:	ldr	x0, [sp, #56]
 528:	ldr	x0, [x0, #24]
 52c:	cmp	x0, #0x0
 530:	b.eq	550 <splay_tree_splay+0xd8>  // b.none
 534:	ldr	w0, [sp, #40]
 538:	cmp	w0, #0x0
 53c:	b.le	584 <splay_tree_splay+0x10c>
 540:	ldr	x0, [sp, #56]
 544:	ldr	x0, [x0, #32]
 548:	cmp	x0, #0x0
 54c:	b.ne	584 <splay_tree_splay+0x10c>  // b.any
 550:	ldr	w0, [sp, #44]
 554:	cmp	w0, #0x0
 558:	b.ge	570 <splay_tree_splay+0xf8>  // b.tcont
 55c:	ldr	x0, [sp, #24]
 560:	ldr	x2, [sp, #56]
 564:	ldr	x1, [sp, #48]
 568:	bl	3e0 <rotate_left>
 56c:	b	6f8 <splay_tree_splay+0x280>
 570:	ldr	x0, [sp, #24]
 574:	ldr	x2, [sp, #56]
 578:	ldr	x1, [sp, #48]
 57c:	bl	42c <rotate_right>
 580:	b	6f8 <splay_tree_splay+0x280>
 584:	ldr	w0, [sp, #44]
 588:	cmp	w0, #0x0
 58c:	b.ge	5dc <splay_tree_splay+0x164>  // b.tcont
 590:	ldr	w0, [sp, #40]
 594:	cmp	w0, #0x0
 598:	b.ge	5dc <splay_tree_splay+0x164>  // b.tcont
 59c:	ldr	x0, [sp, #48]
 5a0:	add	x3, x0, #0x18
 5a4:	ldr	x0, [sp, #56]
 5a8:	ldr	x0, [x0, #24]
 5ac:	mov	x2, x0
 5b0:	ldr	x1, [sp, #56]
 5b4:	mov	x0, x3
 5b8:	bl	3e0 <rotate_left>
 5bc:	ldr	x3, [sp, #24]
 5c0:	ldr	x0, [sp, #48]
 5c4:	ldr	x0, [x0, #24]
 5c8:	mov	x2, x0
 5cc:	ldr	x1, [sp, #48]
 5d0:	mov	x0, x3
 5d4:	bl	3e0 <rotate_left>
 5d8:	b	6e0 <splay_tree_splay+0x268>
 5dc:	ldr	w0, [sp, #44]
 5e0:	cmp	w0, #0x0
 5e4:	b.le	634 <splay_tree_splay+0x1bc>
 5e8:	ldr	w0, [sp, #40]
 5ec:	cmp	w0, #0x0
 5f0:	b.le	634 <splay_tree_splay+0x1bc>
 5f4:	ldr	x0, [sp, #48]
 5f8:	add	x3, x0, #0x20
 5fc:	ldr	x0, [sp, #56]
 600:	ldr	x0, [x0, #32]
 604:	mov	x2, x0
 608:	ldr	x1, [sp, #56]
 60c:	mov	x0, x3
 610:	bl	42c <rotate_right>
 614:	ldr	x3, [sp, #24]
 618:	ldr	x0, [sp, #48]
 61c:	ldr	x0, [x0, #32]
 620:	mov	x2, x0
 624:	ldr	x1, [sp, #48]
 628:	mov	x0, x3
 62c:	bl	42c <rotate_right>
 630:	b	6e0 <splay_tree_splay+0x268>
 634:	ldr	w0, [sp, #44]
 638:	cmp	w0, #0x0
 63c:	b.ge	68c <splay_tree_splay+0x214>  // b.tcont
 640:	ldr	w0, [sp, #40]
 644:	cmp	w0, #0x0
 648:	b.le	68c <splay_tree_splay+0x214>
 64c:	ldr	x0, [sp, #48]
 650:	add	x3, x0, #0x18
 654:	ldr	x0, [sp, #56]
 658:	ldr	x0, [x0, #32]
 65c:	mov	x2, x0
 660:	ldr	x1, [sp, #56]
 664:	mov	x0, x3
 668:	bl	42c <rotate_right>
 66c:	ldr	x3, [sp, #24]
 670:	ldr	x0, [sp, #48]
 674:	ldr	x0, [x0, #24]
 678:	mov	x2, x0
 67c:	ldr	x1, [sp, #48]
 680:	mov	x0, x3
 684:	bl	3e0 <rotate_left>
 688:	b	6e0 <splay_tree_splay+0x268>
 68c:	ldr	w0, [sp, #44]
 690:	cmp	w0, #0x0
 694:	b.le	498 <splay_tree_splay+0x20>
 698:	ldr	w0, [sp, #40]
 69c:	cmp	w0, #0x0
 6a0:	b.ge	498 <splay_tree_splay+0x20>  // b.tcont
 6a4:	ldr	x0, [sp, #48]
 6a8:	add	x3, x0, #0x20
 6ac:	ldr	x0, [sp, #56]
 6b0:	ldr	x0, [x0, #24]
 6b4:	mov	x2, x0
 6b8:	ldr	x1, [sp, #56]
 6bc:	mov	x0, x3
 6c0:	bl	3e0 <rotate_left>
 6c4:	ldr	x3, [sp, #24]
 6c8:	ldr	x0, [sp, #48]
 6cc:	ldr	x0, [x0, #32]
 6d0:	mov	x2, x0
 6d4:	ldr	x1, [sp, #48]
 6d8:	mov	x0, x3
 6dc:	bl	42c <rotate_right>
 6e0:	b	498 <splay_tree_splay+0x20>
 6e4:	nop
 6e8:	b	6f8 <splay_tree_splay+0x280>
 6ec:	nop
 6f0:	b	6f8 <splay_tree_splay+0x280>
 6f4:	nop
 6f8:	ldp	x29, x30, [sp], #64
 6fc:	ret

0000000000000700 <prio_splay_tree_insert>:
 700:	stp	x29, x30, [sp, #-48]!
 704:	mov	x29, sp
 708:	str	x0, [sp, #24]
 70c:	str	x1, [sp, #16]
 710:	str	wzr, [sp, #44]
 714:	ldr	x0, [sp, #16]
 718:	mov	x1, x0
 71c:	ldr	x0, [sp, #24]
 720:	bl	478 <splay_tree_splay>
 724:	ldr	x0, [sp, #24]
 728:	ldr	x0, [x0]
 72c:	cmp	x0, #0x0
 730:	b.eq	754 <prio_splay_tree_insert+0x54>  // b.none
 734:	ldr	x0, [sp, #24]
 738:	ldr	x0, [x0]
 73c:	mov	x2, x0
 740:	ldr	x0, [sp, #16]
 744:	mov	x1, x0
 748:	mov	x0, x2
 74c:	bl	388 <prio_splay_compare>
 750:	str	w0, [sp, #44]
 754:	ldr	x0, [sp, #24]
 758:	ldr	x0, [x0]
 75c:	cmp	x0, #0x0
 760:	b.eq	77c <prio_splay_tree_insert+0x7c>  // b.none
 764:	ldr	w0, [sp, #44]
 768:	cmp	w0, #0x0
 76c:	b.ne	77c <prio_splay_tree_insert+0x7c>  // b.any
 770:	adrp	x0, 0 <priority_queue_lookup_priority>
 774:	add	x0, x0, #0x0
 778:	bl	0 <gomp_fatal>
 77c:	ldr	x0, [sp, #24]
 780:	ldr	x0, [x0]
 784:	cmp	x0, #0x0
 788:	b.ne	7a8 <prio_splay_tree_insert+0xa8>  // b.any
 78c:	ldr	x0, [sp, #16]
 790:	str	xzr, [x0, #32]
 794:	ldr	x0, [sp, #16]
 798:	ldr	x1, [x0, #32]
 79c:	ldr	x0, [sp, #16]
 7a0:	str	x1, [x0, #24]
 7a4:	b	818 <prio_splay_tree_insert+0x118>
 7a8:	ldr	w0, [sp, #44]
 7ac:	cmp	w0, #0x0
 7b0:	b.ge	7e8 <prio_splay_tree_insert+0xe8>  // b.tcont
 7b4:	ldr	x0, [sp, #24]
 7b8:	ldr	x1, [x0]
 7bc:	ldr	x0, [sp, #16]
 7c0:	str	x1, [x0, #24]
 7c4:	ldr	x0, [sp, #16]
 7c8:	ldr	x0, [x0, #24]
 7cc:	ldr	x1, [x0, #32]
 7d0:	ldr	x0, [sp, #16]
 7d4:	str	x1, [x0, #32]
 7d8:	ldr	x0, [sp, #16]
 7dc:	ldr	x0, [x0, #24]
 7e0:	str	xzr, [x0, #32]
 7e4:	b	818 <prio_splay_tree_insert+0x118>
 7e8:	ldr	x0, [sp, #24]
 7ec:	ldr	x1, [x0]
 7f0:	ldr	x0, [sp, #16]
 7f4:	str	x1, [x0, #32]
 7f8:	ldr	x0, [sp, #16]
 7fc:	ldr	x0, [x0, #32]
 800:	ldr	x1, [x0, #24]
 804:	ldr	x0, [sp, #16]
 808:	str	x1, [x0, #24]
 80c:	ldr	x0, [sp, #16]
 810:	ldr	x0, [x0, #32]
 814:	str	xzr, [x0, #24]
 818:	ldr	x0, [sp, #24]
 81c:	ldr	x1, [sp, #16]
 820:	str	x1, [x0]
 824:	nop
 828:	ldp	x29, x30, [sp], #48
 82c:	ret

0000000000000830 <prio_splay_tree_remove>:
 830:	stp	x29, x30, [sp, #-48]!
 834:	mov	x29, sp
 838:	str	x0, [sp, #24]
 83c:	str	x1, [sp, #16]
 840:	ldr	x1, [sp, #16]
 844:	ldr	x0, [sp, #24]
 848:	bl	478 <splay_tree_splay>
 84c:	ldr	x0, [sp, #24]
 850:	ldr	x0, [x0]
 854:	cmp	x0, #0x0
 858:	b.eq	8f4 <prio_splay_tree_remove+0xc4>  // b.none
 85c:	ldr	x0, [sp, #24]
 860:	ldr	x0, [x0]
 864:	ldr	x1, [sp, #16]
 868:	bl	388 <prio_splay_compare>
 86c:	cmp	w0, #0x0
 870:	b.ne	8f4 <prio_splay_tree_remove+0xc4>  // b.any
 874:	ldr	x0, [sp, #24]
 878:	ldr	x0, [x0]
 87c:	ldr	x0, [x0, #24]
 880:	str	x0, [sp, #40]
 884:	ldr	x0, [sp, #24]
 888:	ldr	x0, [x0]
 88c:	ldr	x0, [x0, #32]
 890:	str	x0, [sp, #32]
 894:	ldr	x0, [sp, #40]
 898:	cmp	x0, #0x0
 89c:	b.eq	8e8 <prio_splay_tree_remove+0xb8>  // b.none
 8a0:	ldr	x0, [sp, #24]
 8a4:	ldr	x1, [sp, #40]
 8a8:	str	x1, [x0]
 8ac:	ldr	x0, [sp, #32]
 8b0:	cmp	x0, #0x0
 8b4:	b.eq	8f4 <prio_splay_tree_remove+0xc4>  // b.none
 8b8:	b	8c8 <prio_splay_tree_remove+0x98>
 8bc:	ldr	x0, [sp, #40]
 8c0:	ldr	x0, [x0, #32]
 8c4:	str	x0, [sp, #40]
 8c8:	ldr	x0, [sp, #40]
 8cc:	ldr	x0, [x0, #32]
 8d0:	cmp	x0, #0x0
 8d4:	b.ne	8bc <prio_splay_tree_remove+0x8c>  // b.any
 8d8:	ldr	x0, [sp, #40]
 8dc:	ldr	x1, [sp, #32]
 8e0:	str	x1, [x0, #32]
 8e4:	b	8f4 <prio_splay_tree_remove+0xc4>
 8e8:	ldr	x0, [sp, #24]
 8ec:	ldr	x1, [sp, #32]
 8f0:	str	x1, [x0]
 8f4:	nop
 8f8:	ldp	x29, x30, [sp], #48
 8fc:	ret

0000000000000900 <prio_splay_tree_lookup>:
 900:	stp	x29, x30, [sp, #-32]!
 904:	mov	x29, sp
 908:	str	x0, [sp, #24]
 90c:	str	x1, [sp, #16]
 910:	ldr	x1, [sp, #16]
 914:	ldr	x0, [sp, #24]
 918:	bl	478 <splay_tree_splay>
 91c:	ldr	x0, [sp, #24]
 920:	ldr	x0, [x0]
 924:	cmp	x0, #0x0
 928:	b.eq	950 <prio_splay_tree_lookup+0x50>  // b.none
 92c:	ldr	x0, [sp, #24]
 930:	ldr	x0, [x0]
 934:	ldr	x1, [sp, #16]
 938:	bl	388 <prio_splay_compare>
 93c:	cmp	w0, #0x0
 940:	b.ne	950 <prio_splay_tree_lookup+0x50>  // b.any
 944:	ldr	x0, [sp, #24]
 948:	ldr	x0, [x0]
 94c:	b	954 <prio_splay_tree_lookup+0x54>
 950:	mov	x0, #0x0                   	// #0
 954:	ldp	x29, x30, [sp], #32
 958:	ret

000000000000095c <splay_tree_foreach_internal>:
 95c:	stp	x29, x30, [sp, #-48]!
 960:	mov	x29, sp
 964:	str	x0, [sp, #40]
 968:	str	x1, [sp, #32]
 96c:	str	x2, [sp, #24]
 970:	ldr	x0, [sp, #40]
 974:	cmp	x0, #0x0
 978:	b.eq	9b8 <splay_tree_foreach_internal+0x5c>  // b.none
 97c:	ldr	x0, [sp, #40]
 980:	ldr	x2, [sp, #32]
 984:	ldr	x1, [sp, #24]
 988:	blr	x2
 98c:	ldr	x0, [sp, #40]
 990:	ldr	x0, [x0, #24]
 994:	ldr	x2, [sp, #24]
 998:	ldr	x1, [sp, #32]
 99c:	bl	95c <splay_tree_foreach_internal>
 9a0:	ldr	x0, [sp, #40]
 9a4:	ldr	x0, [x0, #32]
 9a8:	ldr	x2, [sp, #24]
 9ac:	ldr	x1, [sp, #32]
 9b0:	bl	95c <splay_tree_foreach_internal>
 9b4:	b	9bc <splay_tree_foreach_internal+0x60>
 9b8:	nop
 9bc:	ldp	x29, x30, [sp], #48
 9c0:	ret

00000000000009c4 <prio_splay_tree_foreach>:
 9c4:	stp	x29, x30, [sp, #-48]!
 9c8:	mov	x29, sp
 9cc:	str	x0, [sp, #40]
 9d0:	str	x1, [sp, #32]
 9d4:	str	x2, [sp, #24]
 9d8:	ldr	x0, [sp, #40]
 9dc:	ldr	x0, [x0]
 9e0:	ldr	x2, [sp, #24]
 9e4:	ldr	x1, [sp, #32]
 9e8:	bl	95c <splay_tree_foreach_internal>
 9ec:	nop
 9f0:	ldp	x29, x30, [sp], #48
 9f4:	ret

affinity-fmt.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_thread>:
       0:	mrs	x1, tpidr_el0
       4:	adrp	x0, 0 <gomp_tls_data>
       8:	ldr	x0, [x0]
       c:	add	x0, x1, x0
      10:	ret

0000000000000014 <gomp_thread_self>:
      14:	stp	x29, x30, [sp, #-16]!
      18:	mov	x29, sp
      1c:	bl	0 <pthread_self>
      20:	ldp	x29, x30, [sp], #16
      24:	ret

0000000000000028 <gomp_print_string>:
      28:	stp	x29, x30, [sp, #-32]!
      2c:	mov	x29, sp
      30:	str	x0, [sp, #24]
      34:	str	x1, [sp, #16]
      38:	adrp	x0, 0 <stderr>
      3c:	add	x0, x0, #0x0
      40:	ldr	x0, [x0]
      44:	mov	x3, x0
      48:	ldr	x2, [sp, #16]
      4c:	mov	x1, #0x1                   	// #1
      50:	ldr	x0, [sp, #24]
      54:	bl	0 <fwrite>
      58:	nop
      5c:	ldp	x29, x30, [sp], #32
      60:	ret

0000000000000064 <gomp_set_affinity_format>:
      64:	stp	x29, x30, [sp, #-48]!
      68:	mov	x29, sp
      6c:	str	x0, [sp, #24]
      70:	str	x1, [sp, #16]
      74:	adrp	x0, 0 <gomp_affinity_format_len>
      78:	add	x0, x0, #0x0
      7c:	ldr	x0, [x0]
      80:	ldr	x1, [sp, #16]
      84:	cmp	x1, x0
      88:	b.cs	a8 <gomp_set_affinity_format+0x44>  // b.hs, b.nlast
      8c:	adrp	x0, 0 <gomp_affinity_format_var>
      90:	add	x0, x0, #0x0
      94:	ldr	x0, [x0]
      98:	ldr	x2, [sp, #16]
      9c:	ldr	x1, [sp, #24]
      a0:	bl	0 <memcpy>
      a4:	b	128 <gomp_set_affinity_format+0xc4>
      a8:	adrp	x0, 0 <gomp_affinity_format_len>
      ac:	add	x0, x0, #0x0
      b0:	ldr	x0, [x0]
      b4:	cmp	x0, #0x0
      b8:	b.eq	e4 <gomp_set_affinity_format+0x80>  // b.none
      bc:	adrp	x0, 0 <gomp_affinity_format_var>
      c0:	add	x0, x0, #0x0
      c4:	ldr	x2, [x0]
      c8:	ldr	x0, [sp, #16]
      cc:	add	x0, x0, #0x1
      d0:	mov	x1, x0
      d4:	mov	x0, x2
      d8:	bl	0 <gomp_realloc>
      dc:	str	x0, [sp, #40]
      e0:	b	f4 <gomp_set_affinity_format+0x90>
      e4:	ldr	x0, [sp, #16]
      e8:	add	x0, x0, #0x1
      ec:	bl	0 <gomp_malloc>
      f0:	str	x0, [sp, #40]
      f4:	ldr	x2, [sp, #16]
      f8:	ldr	x1, [sp, #24]
      fc:	ldr	x0, [sp, #40]
     100:	bl	0 <memcpy>
     104:	adrp	x0, 0 <gomp_affinity_format_var>
     108:	add	x0, x0, #0x0
     10c:	ldr	x1, [sp, #40]
     110:	str	x1, [x0]
     114:	ldr	x0, [sp, #16]
     118:	add	x1, x0, #0x1
     11c:	adrp	x0, 0 <gomp_affinity_format_len>
     120:	add	x0, x0, #0x0
     124:	str	x1, [x0]
     128:	adrp	x0, 0 <gomp_affinity_format_var>
     12c:	add	x0, x0, #0x0
     130:	ldr	x1, [x0]
     134:	ldr	x0, [sp, #16]
     138:	add	x0, x1, x0
     13c:	strb	wzr, [x0]
     140:	nop
     144:	ldp	x29, x30, [sp], #48
     148:	ret

000000000000014c <omp_set_affinity_format>:
     14c:	stp	x29, x30, [sp, #-32]!
     150:	mov	x29, sp
     154:	str	x0, [sp, #24]
     158:	ldr	x0, [sp, #24]
     15c:	bl	0 <strlen>
     160:	mov	x1, x0
     164:	ldr	x0, [sp, #24]
     168:	bl	64 <gomp_set_affinity_format>
     16c:	nop
     170:	ldp	x29, x30, [sp], #32
     174:	ret

0000000000000178 <omp_get_affinity_format>:
     178:	stp	x29, x30, [sp, #-48]!
     17c:	mov	x29, sp
     180:	str	x0, [sp, #24]
     184:	str	x1, [sp, #16]
     188:	adrp	x0, 0 <gomp_affinity_format_var>
     18c:	add	x0, x0, #0x0
     190:	ldr	x0, [x0]
     194:	bl	0 <strlen>
     198:	str	x0, [sp, #40]
     19c:	ldr	x0, [sp, #16]
     1a0:	cmp	x0, #0x0
     1a4:	b.eq	210 <omp_get_affinity_format+0x98>  // b.none
     1a8:	ldr	x1, [sp, #40]
     1ac:	ldr	x0, [sp, #16]
     1b0:	cmp	x1, x0
     1b4:	b.cs	1dc <omp_get_affinity_format+0x64>  // b.hs, b.nlast
     1b8:	adrp	x0, 0 <gomp_affinity_format_var>
     1bc:	add	x0, x0, #0x0
     1c0:	ldr	x1, [x0]
     1c4:	ldr	x0, [sp, #40]
     1c8:	add	x0, x0, #0x1
     1cc:	mov	x2, x0
     1d0:	ldr	x0, [sp, #24]
     1d4:	bl	0 <memcpy>
     1d8:	b	210 <omp_get_affinity_format+0x98>
     1dc:	adrp	x0, 0 <gomp_affinity_format_var>
     1e0:	add	x0, x0, #0x0
     1e4:	ldr	x1, [x0]
     1e8:	ldr	x0, [sp, #16]
     1ec:	sub	x0, x0, #0x1
     1f0:	mov	x2, x0
     1f4:	ldr	x0, [sp, #24]
     1f8:	bl	0 <memcpy>
     1fc:	ldr	x0, [sp, #16]
     200:	sub	x0, x0, #0x1
     204:	ldr	x1, [sp, #24]
     208:	add	x0, x1, x0
     20c:	strb	wzr, [x0]
     210:	ldr	x0, [sp, #40]
     214:	ldp	x29, x30, [sp], #48
     218:	ret

000000000000021c <gomp_display_string>:
     21c:	stp	x29, x30, [sp, #-80]!
     220:	mov	x29, sp
     224:	str	x0, [sp, #56]
     228:	str	x1, [sp, #48]
     22c:	str	x2, [sp, #40]
     230:	str	x3, [sp, #32]
     234:	str	x4, [sp, #24]
     238:	ldr	x0, [sp, #40]
     23c:	ldr	x0, [x0]
     240:	str	x0, [sp, #64]
     244:	ldr	x0, [sp, #48]
     248:	cmp	x0, #0x0
     24c:	b.eq	2a8 <gomp_display_string+0x8c>  // b.none
     250:	ldr	x1, [sp, #64]
     254:	ldr	x0, [sp, #48]
     258:	cmp	x1, x0
     25c:	b.cs	2a8 <gomp_display_string+0x8c>  // b.hs, b.nlast
     260:	ldr	x0, [sp, #24]
     264:	str	x0, [sp, #72]
     268:	ldr	x1, [sp, #48]
     26c:	ldr	x0, [sp, #64]
     270:	sub	x0, x1, x0
     274:	ldr	x1, [sp, #24]
     278:	cmp	x1, x0
     27c:	b.ls	290 <gomp_display_string+0x74>  // b.plast
     280:	ldr	x1, [sp, #48]
     284:	ldr	x0, [sp, #64]
     288:	sub	x0, x1, x0
     28c:	str	x0, [sp, #72]
     290:	ldr	x1, [sp, #56]
     294:	ldr	x0, [sp, #64]
     298:	add	x0, x1, x0
     29c:	ldr	x2, [sp, #72]
     2a0:	ldr	x1, [sp, #32]
     2a4:	bl	0 <memcpy>
     2a8:	ldr	x0, [sp, #40]
     2ac:	ldr	x1, [x0]
     2b0:	ldr	x0, [sp, #24]
     2b4:	add	x1, x1, x0
     2b8:	ldr	x0, [sp, #40]
     2bc:	str	x1, [x0]
     2c0:	ldr	x0, [sp, #40]
     2c4:	ldr	x0, [x0]
     2c8:	ldr	x1, [sp, #64]
     2cc:	cmp	x1, x0
     2d0:	cset	w0, hi  // hi = pmore
     2d4:	and	w0, w0, #0xff
     2d8:	and	x0, x0, #0xff
     2dc:	cmp	x0, #0x0
     2e0:	b.eq	2f0 <gomp_display_string+0xd4>  // b.none
     2e4:	adrp	x0, 0 <gomp_thread>
     2e8:	add	x0, x0, #0x0
     2ec:	bl	0 <gomp_fatal>
     2f0:	nop
     2f4:	ldp	x29, x30, [sp], #80
     2f8:	ret

00000000000002fc <gomp_display_repeat>:
     2fc:	stp	x29, x30, [sp, #-80]!
     300:	mov	x29, sp
     304:	str	x0, [sp, #56]
     308:	str	x1, [sp, #48]
     30c:	str	x2, [sp, #40]
     310:	strb	w3, [sp, #39]
     314:	str	x4, [sp, #24]
     318:	ldr	x0, [sp, #40]
     31c:	ldr	x0, [x0]
     320:	str	x0, [sp, #64]
     324:	ldr	x0, [sp, #48]
     328:	cmp	x0, #0x0
     32c:	b.eq	388 <gomp_display_repeat+0x8c>  // b.none
     330:	ldr	x1, [sp, #64]
     334:	ldr	x0, [sp, #48]
     338:	cmp	x1, x0
     33c:	b.cs	388 <gomp_display_repeat+0x8c>  // b.hs, b.nlast
     340:	ldr	x0, [sp, #24]
     344:	str	x0, [sp, #72]
     348:	ldr	x1, [sp, #48]
     34c:	ldr	x0, [sp, #64]
     350:	sub	x0, x1, x0
     354:	ldr	x1, [sp, #24]
     358:	cmp	x1, x0
     35c:	b.ls	370 <gomp_display_repeat+0x74>  // b.plast
     360:	ldr	x1, [sp, #48]
     364:	ldr	x0, [sp, #64]
     368:	sub	x0, x1, x0
     36c:	str	x0, [sp, #72]
     370:	ldr	x1, [sp, #56]
     374:	ldr	x0, [sp, #64]
     378:	add	x0, x1, x0
     37c:	ldrb	w1, [sp, #39]
     380:	ldr	x2, [sp, #72]
     384:	bl	0 <memset>
     388:	ldr	x0, [sp, #40]
     38c:	ldr	x1, [x0]
     390:	ldr	x0, [sp, #24]
     394:	add	x1, x1, x0
     398:	ldr	x0, [sp, #40]
     39c:	str	x1, [x0]
     3a0:	ldr	x0, [sp, #40]
     3a4:	ldr	x0, [x0]
     3a8:	ldr	x1, [sp, #64]
     3ac:	cmp	x1, x0
     3b0:	cset	w0, hi  // hi = pmore
     3b4:	and	w0, w0, #0xff
     3b8:	and	x0, x0, #0xff
     3bc:	cmp	x0, #0x0
     3c0:	b.eq	3d0 <gomp_display_repeat+0xd4>  // b.none
     3c4:	adrp	x0, 0 <gomp_thread>
     3c8:	add	x0, x0, #0x0
     3cc:	bl	0 <gomp_fatal>
     3d0:	nop
     3d4:	ldp	x29, x30, [sp], #80
     3d8:	ret

00000000000003dc <gomp_display_num>:
     3dc:	stp	x29, x30, [sp, #-80]!
     3e0:	mov	x29, sp
     3e4:	str	x0, [sp, #56]
     3e8:	str	x1, [sp, #48]
     3ec:	str	x2, [sp, #40]
     3f0:	strb	w3, [sp, #39]
     3f4:	strb	w4, [sp, #38]
     3f8:	str	x5, [sp, #24]
     3fc:	str	x6, [sp, #16]
     400:	ldr	x0, [sp, #16]
     404:	bl	0 <strlen>
     408:	str	x0, [sp, #72]
     40c:	ldr	x0, [sp, #24]
     410:	cmn	x0, #0x1
     414:	b.eq	428 <gomp_display_num+0x4c>  // b.none
     418:	ldr	x1, [sp, #72]
     41c:	ldr	x0, [sp, #24]
     420:	cmp	x1, x0
     424:	b.cc	444 <gomp_display_num+0x68>  // b.lo, b.ul, b.last
     428:	ldr	x4, [sp, #72]
     42c:	ldr	x3, [sp, #16]
     430:	ldr	x2, [sp, #40]
     434:	ldr	x1, [sp, #48]
     438:	ldr	x0, [sp, #56]
     43c:	bl	21c <gomp_display_string>
     440:	b	60c <gomp_display_num+0x230>
     444:	ldrb	w0, [sp, #39]
     448:	cmp	w0, #0x0
     44c:	b.eq	584 <gomp_display_num+0x1a8>  // b.none
     450:	ldr	x0, [sp, #16]
     454:	ldrb	w0, [x0]
     458:	cmp	w0, #0x2d
     45c:	b.ne	47c <gomp_display_num+0xa0>  // b.any
     460:	mov	x4, #0x1                   	// #1
     464:	ldr	x3, [sp, #16]
     468:	ldr	x2, [sp, #40]
     46c:	ldr	x1, [sp, #48]
     470:	ldr	x0, [sp, #56]
     474:	bl	21c <gomp_display_string>
     478:	b	4b8 <gomp_display_num+0xdc>
     47c:	ldr	x0, [sp, #16]
     480:	ldrb	w0, [x0]
     484:	cmp	w0, #0x30
     488:	b.ne	4b8 <gomp_display_num+0xdc>  // b.any
     48c:	ldr	x0, [sp, #16]
     490:	add	x0, x0, #0x1
     494:	ldrb	w0, [x0]
     498:	cmp	w0, #0x78
     49c:	b.ne	4b8 <gomp_display_num+0xdc>  // b.any
     4a0:	mov	x4, #0x2                   	// #2
     4a4:	ldr	x3, [sp, #16]
     4a8:	ldr	x2, [sp, #40]
     4ac:	ldr	x1, [sp, #48]
     4b0:	ldr	x0, [sp, #56]
     4b4:	bl	21c <gomp_display_string>
     4b8:	ldr	x1, [sp, #24]
     4bc:	ldr	x0, [sp, #72]
     4c0:	sub	x0, x1, x0
     4c4:	mov	x4, x0
     4c8:	mov	w3, #0x30                  	// #48
     4cc:	ldr	x2, [sp, #40]
     4d0:	ldr	x1, [sp, #48]
     4d4:	ldr	x0, [sp, #56]
     4d8:	bl	2fc <gomp_display_repeat>
     4dc:	ldr	x0, [sp, #16]
     4e0:	ldrb	w0, [x0]
     4e4:	cmp	w0, #0x2d
     4e8:	b.ne	518 <gomp_display_num+0x13c>  // b.any
     4ec:	ldr	x0, [sp, #16]
     4f0:	add	x1, x0, #0x1
     4f4:	ldr	x0, [sp, #72]
     4f8:	sub	x0, x0, #0x1
     4fc:	mov	x4, x0
     500:	mov	x3, x1
     504:	ldr	x2, [sp, #40]
     508:	ldr	x1, [sp, #48]
     50c:	ldr	x0, [sp, #56]
     510:	bl	21c <gomp_display_string>
     514:	b	60c <gomp_display_num+0x230>
     518:	ldr	x0, [sp, #16]
     51c:	ldrb	w0, [x0]
     520:	cmp	w0, #0x30
     524:	b.ne	568 <gomp_display_num+0x18c>  // b.any
     528:	ldr	x0, [sp, #16]
     52c:	add	x0, x0, #0x1
     530:	ldrb	w0, [x0]
     534:	cmp	w0, #0x78
     538:	b.ne	568 <gomp_display_num+0x18c>  // b.any
     53c:	ldr	x0, [sp, #16]
     540:	add	x1, x0, #0x2
     544:	ldr	x0, [sp, #72]
     548:	sub	x0, x0, #0x2
     54c:	mov	x4, x0
     550:	mov	x3, x1
     554:	ldr	x2, [sp, #40]
     558:	ldr	x1, [sp, #48]
     55c:	ldr	x0, [sp, #56]
     560:	bl	21c <gomp_display_string>
     564:	b	60c <gomp_display_num+0x230>
     568:	ldr	x4, [sp, #72]
     56c:	ldr	x3, [sp, #16]
     570:	ldr	x2, [sp, #40]
     574:	ldr	x1, [sp, #48]
     578:	ldr	x0, [sp, #56]
     57c:	bl	21c <gomp_display_string>
     580:	b	60c <gomp_display_num+0x230>
     584:	ldrb	w0, [sp, #38]
     588:	cmp	w0, #0x0
     58c:	b.eq	5d0 <gomp_display_num+0x1f4>  // b.none
     590:	ldr	x1, [sp, #24]
     594:	ldr	x0, [sp, #72]
     598:	sub	x0, x1, x0
     59c:	mov	x4, x0
     5a0:	mov	w3, #0x20                  	// #32
     5a4:	ldr	x2, [sp, #40]
     5a8:	ldr	x1, [sp, #48]
     5ac:	ldr	x0, [sp, #56]
     5b0:	bl	2fc <gomp_display_repeat>
     5b4:	ldr	x4, [sp, #72]
     5b8:	ldr	x3, [sp, #16]
     5bc:	ldr	x2, [sp, #40]
     5c0:	ldr	x1, [sp, #48]
     5c4:	ldr	x0, [sp, #56]
     5c8:	bl	21c <gomp_display_string>
     5cc:	b	60c <gomp_display_num+0x230>
     5d0:	ldr	x4, [sp, #72]
     5d4:	ldr	x3, [sp, #16]
     5d8:	ldr	x2, [sp, #40]
     5dc:	ldr	x1, [sp, #48]
     5e0:	ldr	x0, [sp, #56]
     5e4:	bl	21c <gomp_display_string>
     5e8:	ldr	x1, [sp, #24]
     5ec:	ldr	x0, [sp, #72]
     5f0:	sub	x0, x1, x0
     5f4:	mov	x4, x0
     5f8:	mov	w3, #0x20                  	// #32
     5fc:	ldr	x2, [sp, #40]
     600:	ldr	x1, [sp, #48]
     604:	ldr	x0, [sp, #56]
     608:	bl	2fc <gomp_display_repeat>
     60c:	ldp	x29, x30, [sp], #80
     610:	ret

0000000000000614 <gomp_display_int>:
     614:	stp	x29, x30, [sp, #-80]!
     618:	mov	x29, sp
     61c:	str	x0, [sp, #56]
     620:	str	x1, [sp, #48]
     624:	str	x2, [sp, #40]
     628:	strb	w3, [sp, #39]
     62c:	strb	w4, [sp, #38]
     630:	str	x5, [sp, #24]
     634:	str	w6, [sp, #32]
     638:	add	x3, sp, #0x40
     63c:	ldr	w2, [sp, #32]
     640:	adrp	x0, 0 <gomp_thread>
     644:	add	x1, x0, #0x0
     648:	mov	x0, x3
     64c:	bl	0 <sprintf>
     650:	add	x0, sp, #0x40
     654:	mov	x6, x0
     658:	ldr	x5, [sp, #24]
     65c:	ldrb	w4, [sp, #38]
     660:	ldrb	w3, [sp, #39]
     664:	ldr	x2, [sp, #40]
     668:	ldr	x1, [sp, #48]
     66c:	ldr	x0, [sp, #56]
     670:	bl	3dc <gomp_display_num>
     674:	nop
     678:	ldp	x29, x30, [sp], #80
     67c:	ret

0000000000000680 <gomp_display_string_len>:
     680:	stp	x29, x30, [sp, #-80]!
     684:	mov	x29, sp
     688:	str	x0, [sp, #72]
     68c:	str	x1, [sp, #64]
     690:	str	x2, [sp, #56]
     694:	strb	w3, [sp, #55]
     698:	str	x4, [sp, #40]
     69c:	str	x5, [sp, #32]
     6a0:	str	x6, [sp, #24]
     6a4:	ldr	x0, [sp, #40]
     6a8:	cmn	x0, #0x1
     6ac:	b.eq	6c0 <gomp_display_string_len+0x40>  // b.none
     6b0:	ldr	x1, [sp, #24]
     6b4:	ldr	x0, [sp, #40]
     6b8:	cmp	x1, x0
     6bc:	b.cc	6dc <gomp_display_string_len+0x5c>  // b.lo, b.ul, b.last
     6c0:	ldr	x4, [sp, #24]
     6c4:	ldr	x3, [sp, #32]
     6c8:	ldr	x2, [sp, #56]
     6cc:	ldr	x1, [sp, #64]
     6d0:	ldr	x0, [sp, #72]
     6d4:	bl	21c <gomp_display_string>
     6d8:	b	764 <gomp_display_string_len+0xe4>
     6dc:	ldrb	w0, [sp, #55]
     6e0:	cmp	w0, #0x0
     6e4:	b.eq	728 <gomp_display_string_len+0xa8>  // b.none
     6e8:	ldr	x1, [sp, #40]
     6ec:	ldr	x0, [sp, #24]
     6f0:	sub	x0, x1, x0
     6f4:	mov	x4, x0
     6f8:	mov	w3, #0x20                  	// #32
     6fc:	ldr	x2, [sp, #56]
     700:	ldr	x1, [sp, #64]
     704:	ldr	x0, [sp, #72]
     708:	bl	2fc <gomp_display_repeat>
     70c:	ldr	x4, [sp, #24]
     710:	ldr	x3, [sp, #32]
     714:	ldr	x2, [sp, #56]
     718:	ldr	x1, [sp, #64]
     71c:	ldr	x0, [sp, #72]
     720:	bl	21c <gomp_display_string>
     724:	b	764 <gomp_display_string_len+0xe4>
     728:	ldr	x4, [sp, #24]
     72c:	ldr	x3, [sp, #32]
     730:	ldr	x2, [sp, #56]
     734:	ldr	x1, [sp, #64]
     738:	ldr	x0, [sp, #72]
     73c:	bl	21c <gomp_display_string>
     740:	ldr	x1, [sp, #40]
     744:	ldr	x0, [sp, #24]
     748:	sub	x0, x1, x0
     74c:	mov	x4, x0
     750:	mov	w3, #0x20                  	// #32
     754:	ldr	x2, [sp, #56]
     758:	ldr	x1, [sp, #64]
     75c:	ldr	x0, [sp, #72]
     760:	bl	2fc <gomp_display_repeat>
     764:	ldp	x29, x30, [sp], #80
     768:	ret

000000000000076c <gomp_display_hostname>:
     76c:	stp	x29, x30, [sp, #-352]!
     770:	mov	x29, sp
     774:	str	x0, [sp, #56]
     778:	str	x1, [sp, #48]
     77c:	str	x2, [sp, #40]
     780:	strb	w3, [sp, #39]
     784:	str	x4, [sp, #24]
     788:	add	x0, sp, #0x48
     78c:	str	x0, [sp, #344]
     790:	mov	x0, #0x100                 	// #256
     794:	str	x0, [sp, #336]
     798:	ldr	x0, [sp, #336]
     79c:	sub	x0, x0, #0x1
     7a0:	ldr	x1, [sp, #344]
     7a4:	add	x0, x1, x0
     7a8:	strb	wzr, [x0]
     7ac:	ldr	x0, [sp, #336]
     7b0:	sub	x0, x0, #0x1
     7b4:	mov	x1, x0
     7b8:	ldr	x0, [sp, #344]
     7bc:	bl	0 <gethostname>
     7c0:	cmp	w0, #0x0
     7c4:	b.ne	824 <gomp_display_hostname+0xb8>  // b.any
     7c8:	ldr	x0, [sp, #344]
     7cc:	bl	0 <strlen>
     7d0:	str	x0, [sp, #328]
     7d4:	ldr	x0, [sp, #336]
     7d8:	sub	x0, x0, #0x1
     7dc:	ldr	x1, [sp, #328]
     7e0:	cmp	x1, x0
     7e4:	b.cs	824 <gomp_display_hostname+0xb8>  // b.hs, b.nlast
     7e8:	ldr	x6, [sp, #328]
     7ec:	ldr	x5, [sp, #344]
     7f0:	ldr	x4, [sp, #24]
     7f4:	ldrb	w3, [sp, #39]
     7f8:	ldr	x2, [sp, #40]
     7fc:	ldr	x1, [sp, #48]
     800:	ldr	x0, [sp, #56]
     804:	bl	680 <gomp_display_string_len>
     808:	add	x0, sp, #0x48
     80c:	ldr	x1, [sp, #344]
     810:	cmp	x1, x0
     814:	b.eq	8b0 <gomp_display_hostname+0x144>  // b.none
     818:	ldr	x0, [sp, #344]
     81c:	bl	0 <free>
     820:	b	8b4 <gomp_display_hostname+0x148>
     824:	ldr	x0, [sp, #336]
     828:	cmp	x0, #0x100, lsl #12
     82c:	b.eq	86c <gomp_display_hostname+0x100>  // b.none
     830:	ldr	x0, [sp, #336]
     834:	lsl	x0, x0, #1
     838:	str	x0, [sp, #336]
     83c:	ldr	x0, [sp, #336]
     840:	cmp	x0, #0x200
     844:	b.ne	858 <gomp_display_hostname+0xec>  // b.any
     848:	ldr	x0, [sp, #336]
     84c:	bl	0 <gomp_malloc>
     850:	str	x0, [sp, #344]
     854:	b	798 <gomp_display_hostname+0x2c>
     858:	ldr	x1, [sp, #336]
     85c:	ldr	x0, [sp, #344]
     860:	bl	0 <gomp_realloc>
     864:	str	x0, [sp, #344]
     868:	b	798 <gomp_display_hostname+0x2c>
     86c:	nop
     870:	add	x0, sp, #0x48
     874:	ldr	x1, [sp, #344]
     878:	cmp	x1, x0
     87c:	b.eq	888 <gomp_display_hostname+0x11c>  // b.none
     880:	ldr	x0, [sp, #344]
     884:	bl	0 <free>
     888:	mov	x6, #0x4                   	// #4
     88c:	adrp	x0, 0 <gomp_thread>
     890:	add	x5, x0, #0x0
     894:	ldr	x4, [sp, #24]
     898:	ldrb	w3, [sp, #39]
     89c:	ldr	x2, [sp, #40]
     8a0:	ldr	x1, [sp, #48]
     8a4:	ldr	x0, [sp, #56]
     8a8:	bl	680 <gomp_display_string_len>
     8ac:	b	8b4 <gomp_display_hostname+0x148>
     8b0:	nop
     8b4:	ldp	x29, x30, [sp], #352
     8b8:	ret

00000000000008bc <gomp_display_affinity>:
     8bc:	stp	x29, x30, [sp, #-208]!
     8c0:	mov	x29, sp
     8c4:	str	x0, [sp, #56]
     8c8:	str	x1, [sp, #48]
     8cc:	str	x2, [sp, #40]
     8d0:	str	x3, [sp, #32]
     8d4:	str	x4, [sp, #24]
     8d8:	str	w5, [sp, #20]
     8dc:	str	xzr, [sp, #144]
     8e0:	mov	w1, #0x25                  	// #37
     8e4:	ldr	x0, [sp, #40]
     8e8:	bl	0 <strchr>
     8ec:	str	x0, [sp, #200]
     8f0:	strb	wzr, [sp, #199]
     8f4:	strb	wzr, [sp, #198]
     8f8:	mov	x0, #0xffffffffffffffff    	// #-1
     8fc:	str	x0, [sp, #184]
     900:	ldr	x0, [sp, #200]
     904:	cmp	x0, #0x0
     908:	b.ne	924 <gomp_display_affinity+0x68>  // b.any
     90c:	ldr	x0, [sp, #40]
     910:	bl	0 <strlen>
     914:	mov	x1, x0
     918:	ldr	x0, [sp, #40]
     91c:	add	x0, x0, x1
     920:	str	x0, [sp, #200]
     924:	ldr	x1, [sp, #200]
     928:	ldr	x0, [sp, #40]
     92c:	cmp	x1, x0
     930:	b.eq	960 <gomp_display_affinity+0xa4>  // b.none
     934:	ldr	x1, [sp, #200]
     938:	ldr	x0, [sp, #40]
     93c:	sub	x0, x1, x0
     940:	mov	x1, x0
     944:	add	x0, sp, #0x90
     948:	mov	x4, x1
     94c:	ldr	x3, [sp, #40]
     950:	mov	x2, x0
     954:	ldr	x1, [sp, #48]
     958:	ldr	x0, [sp, #56]
     95c:	bl	21c <gomp_display_string>
     960:	ldr	x0, [sp, #200]
     964:	ldrb	w0, [x0]
     968:	cmp	w0, #0x0
     96c:	b.eq	f64 <gomp_display_affinity+0x6a8>  // b.none
     970:	ldr	x0, [sp, #200]
     974:	add	x0, x0, #0x1
     978:	str	x0, [sp, #200]
     97c:	ldr	x0, [sp, #200]
     980:	ldrb	w0, [x0]
     984:	cmp	w0, #0x25
     988:	b.ne	9bc <gomp_display_affinity+0x100>  // b.any
     98c:	add	x1, sp, #0x90
     990:	mov	x4, #0x1                   	// #1
     994:	adrp	x0, 0 <gomp_thread>
     998:	add	x3, x0, #0x0
     99c:	mov	x2, x1
     9a0:	ldr	x1, [sp, #48]
     9a4:	ldr	x0, [sp, #56]
     9a8:	bl	21c <gomp_display_string>
     9ac:	ldr	x0, [sp, #200]
     9b0:	add	x0, x0, #0x1
     9b4:	str	x0, [sp, #40]
     9b8:	b	f60 <gomp_display_affinity+0x6a4>
     9bc:	ldr	x0, [sp, #200]
     9c0:	ldrb	w0, [x0]
     9c4:	cmp	w0, #0x30
     9c8:	b.ne	9fc <gomp_display_affinity+0x140>  // b.any
     9cc:	mov	w0, #0x1                   	// #1
     9d0:	strb	w0, [sp, #199]
     9d4:	ldr	x0, [sp, #200]
     9d8:	add	x0, x0, #0x1
     9dc:	str	x0, [sp, #200]
     9e0:	ldr	x0, [sp, #200]
     9e4:	ldrb	w0, [x0]
     9e8:	cmp	w0, #0x2e
     9ec:	b.eq	9fc <gomp_display_affinity+0x140>  // b.none
     9f0:	adrp	x0, 0 <gomp_thread>
     9f4:	add	x0, x0, #0x0
     9f8:	bl	0 <gomp_fatal>
     9fc:	ldr	x0, [sp, #200]
     a00:	ldrb	w0, [x0]
     a04:	cmp	w0, #0x2e
     a08:	b.ne	a20 <gomp_display_affinity+0x164>  // b.any
     a0c:	mov	w0, #0x1                   	// #1
     a10:	strb	w0, [sp, #198]
     a14:	ldr	x0, [sp, #200]
     a18:	add	x0, x0, #0x1
     a1c:	str	x0, [sp, #200]
     a20:	ldr	x0, [sp, #200]
     a24:	ldrb	w0, [x0]
     a28:	cmp	w0, #0x30
     a2c:	b.ls	a64 <gomp_display_affinity+0x1a8>  // b.plast
     a30:	ldr	x0, [sp, #200]
     a34:	ldrb	w0, [x0]
     a38:	cmp	w0, #0x39
     a3c:	b.hi	a64 <gomp_display_affinity+0x1a8>  // b.pmore
     a40:	add	x0, sp, #0x88
     a44:	mov	w2, #0xa                   	// #10
     a48:	mov	x1, x0
     a4c:	ldr	x0, [sp, #200]
     a50:	bl	0 <strtoul>
     a54:	str	x0, [sp, #184]
     a58:	ldr	x0, [sp, #136]
     a5c:	str	x0, [sp, #200]
     a60:	b	a88 <gomp_display_affinity+0x1cc>
     a64:	ldrb	w0, [sp, #199]
     a68:	cmp	w0, #0x0
     a6c:	b.ne	a7c <gomp_display_affinity+0x1c0>  // b.any
     a70:	ldrb	w0, [sp, #198]
     a74:	cmp	w0, #0x0
     a78:	b.eq	a88 <gomp_display_affinity+0x1cc>  // b.none
     a7c:	adrp	x0, 0 <gomp_thread>
     a80:	add	x0, x0, #0x0
     a84:	bl	0 <gomp_fatal>
     a88:	ldr	x0, [sp, #200]
     a8c:	ldrb	w0, [x0]
     a90:	strb	w0, [sp, #183]
     a94:	ldrb	w0, [sp, #183]
     a98:	cmp	w0, #0x7b
     a9c:	b.ne	c3c <gomp_display_affinity+0x380>  // b.any
     aa0:	str	wzr, [sp, #172]
     aa4:	b	bc0 <gomp_display_affinity+0x304>
     aa8:	ldr	x0, [sp, #200]
     aac:	add	x3, x0, #0x1
     ab0:	ldrsw	x1, [sp, #172]
     ab4:	mov	x0, x1
     ab8:	lsl	x0, x0, #2
     abc:	add	x0, x0, x1
     ac0:	lsl	x0, x0, #2
     ac4:	adrp	x1, 0 <gomp_thread>
     ac8:	add	x1, x1, #0x0
     acc:	add	x4, x0, x1
     ad0:	adrp	x0, 0 <gomp_thread>
     ad4:	add	x2, x0, #0x0
     ad8:	ldrsw	x1, [sp, #172]
     adc:	mov	x0, x1
     ae0:	lsl	x0, x0, #2
     ae4:	add	x0, x0, x1
     ae8:	lsl	x0, x0, #2
     aec:	add	x0, x2, x0
     af0:	ldrb	w0, [x0, #18]
     af4:	and	x0, x0, #0xff
     af8:	mov	x2, x0
     afc:	mov	x1, x4
     b00:	mov	x0, x3
     b04:	bl	0 <strncmp>
     b08:	cmp	w0, #0x0
     b0c:	b.ne	bb4 <gomp_display_affinity+0x2f8>  // b.any
     b10:	adrp	x0, 0 <gomp_thread>
     b14:	add	x2, x0, #0x0
     b18:	ldrsw	x1, [sp, #172]
     b1c:	mov	x0, x1
     b20:	lsl	x0, x0, #2
     b24:	add	x0, x0, x1
     b28:	lsl	x0, x0, #2
     b2c:	add	x0, x2, x0
     b30:	ldrb	w0, [x0, #18]
     b34:	and	x0, x0, #0xff
     b38:	add	x0, x0, #0x1
     b3c:	ldr	x1, [sp, #200]
     b40:	add	x0, x1, x0
     b44:	ldrb	w0, [x0]
     b48:	cmp	w0, #0x7d
     b4c:	b.ne	bb4 <gomp_display_affinity+0x2f8>  // b.any
     b50:	adrp	x0, 0 <gomp_thread>
     b54:	add	x2, x0, #0x0
     b58:	ldrsw	x1, [sp, #172]
     b5c:	mov	x0, x1
     b60:	lsl	x0, x0, #2
     b64:	add	x0, x0, x1
     b68:	lsl	x0, x0, #2
     b6c:	add	x0, x2, x0
     b70:	ldrb	w0, [x0, #19]
     b74:	strb	w0, [sp, #183]
     b78:	adrp	x0, 0 <gomp_thread>
     b7c:	add	x2, x0, #0x0
     b80:	ldrsw	x1, [sp, #172]
     b84:	mov	x0, x1
     b88:	lsl	x0, x0, #2
     b8c:	add	x0, x0, x1
     b90:	lsl	x0, x0, #2
     b94:	add	x0, x2, x0
     b98:	ldrb	w0, [x0, #18]
     b9c:	and	x0, x0, #0xff
     ba0:	add	x0, x0, #0x1
     ba4:	ldr	x1, [sp, #200]
     ba8:	add	x0, x1, x0
     bac:	str	x0, [sp, #200]
     bb0:	b	bcc <gomp_display_affinity+0x310>
     bb4:	ldr	w0, [sp, #172]
     bb8:	add	w0, w0, #0x1
     bbc:	str	w0, [sp, #172]
     bc0:	ldr	w0, [sp, #172]
     bc4:	cmp	w0, #0x9
     bc8:	b.ls	aa8 <gomp_display_affinity+0x1ec>  // b.plast
     bcc:	ldrb	w0, [sp, #183]
     bd0:	cmp	w0, #0x7b
     bd4:	b.ne	c3c <gomp_display_affinity+0x380>  // b.any
     bd8:	ldr	x0, [sp, #200]
     bdc:	add	x0, x0, #0x1
     be0:	mov	w1, #0x7d                  	// #125
     be4:	bl	0 <strchr>
     be8:	str	x0, [sp, #160]
     bec:	ldr	x0, [sp, #160]
     bf0:	cmp	x0, #0x0
     bf4:	b.eq	c24 <gomp_display_affinity+0x368>  // b.none
     bf8:	ldr	x0, [sp, #200]
     bfc:	add	x0, x0, #0x1
     c00:	ldr	x1, [sp, #160]
     c04:	sub	x0, x1, x0
     c08:	mov	w1, w0
     c0c:	ldr	x0, [sp, #200]
     c10:	add	x0, x0, #0x1
     c14:	mov	x2, x0
     c18:	adrp	x0, 0 <gomp_thread>
     c1c:	add	x0, x0, #0x0
     c20:	bl	0 <gomp_fatal>
     c24:	ldr	x0, [sp, #200]
     c28:	add	x0, x0, #0x1
     c2c:	mov	x1, x0
     c30:	adrp	x0, 0 <gomp_thread>
     c34:	add	x0, x0, #0x0
     c38:	bl	0 <gomp_fatal>
     c3c:	ldrb	w0, [sp, #183]
     c40:	cmp	w0, #0x74
     c44:	b.eq	cd4 <gomp_display_affinity+0x418>  // b.none
     c48:	cmp	w0, #0x74
     c4c:	b.gt	f3c <gomp_display_affinity+0x680>
     c50:	cmp	w0, #0x6e
     c54:	b.eq	cfc <gomp_display_affinity+0x440>  // b.none
     c58:	cmp	w0, #0x6e
     c5c:	b.gt	f3c <gomp_display_affinity+0x680>
     c60:	cmp	w0, #0x69
     c64:	b.eq	d90 <gomp_display_affinity+0x4d4>  // b.none
     c68:	cmp	w0, #0x69
     c6c:	b.gt	f3c <gomp_display_affinity+0x680>
     c70:	cmp	w0, #0x61
     c74:	b.eq	d38 <gomp_display_affinity+0x47c>  // b.none
     c78:	cmp	w0, #0x61
     c7c:	b.gt	f3c <gomp_display_affinity+0x680>
     c80:	cmp	w0, #0x54
     c84:	b.eq	ce0 <gomp_display_affinity+0x424>  // b.none
     c88:	cmp	w0, #0x54
     c8c:	b.gt	f3c <gomp_display_affinity+0x680>
     c90:	cmp	w0, #0x50
     c94:	b.eq	d84 <gomp_display_affinity+0x4c8>  // b.none
     c98:	cmp	w0, #0x50
     c9c:	b.gt	f3c <gomp_display_affinity+0x680>
     ca0:	cmp	w0, #0x4e
     ca4:	b.eq	d0c <gomp_display_affinity+0x450>  // b.none
     ca8:	cmp	w0, #0x4e
     cac:	b.gt	f3c <gomp_display_affinity+0x680>
     cb0:	cmp	w0, #0x4c
     cb4:	b.eq	cec <gomp_display_affinity+0x430>  // b.none
     cb8:	cmp	w0, #0x4c
     cbc:	b.gt	f3c <gomp_display_affinity+0x680>
     cc0:	cmp	w0, #0x41
     cc4:	b.eq	dd4 <gomp_display_affinity+0x518>  // b.none
     cc8:	cmp	w0, #0x48
     ccc:	b.eq	d64 <gomp_display_affinity+0x4a8>  // b.none
     cd0:	b	f3c <gomp_display_affinity+0x680>
     cd4:	bl	0 <omp_get_team_num>
     cd8:	str	w0, [sp, #176]
     cdc:	b	f14 <gomp_display_affinity+0x658>
     ce0:	bl	0 <omp_get_num_teams>
     ce4:	str	w0, [sp, #176]
     ce8:	b	f14 <gomp_display_affinity+0x658>
     cec:	ldr	x0, [sp, #24]
     cf0:	ldr	w0, [x0, #28]
     cf4:	str	w0, [sp, #176]
     cf8:	b	f14 <gomp_display_affinity+0x658>
     cfc:	ldr	x0, [sp, #24]
     d00:	ldr	w0, [x0, #24]
     d04:	str	w0, [sp, #176]
     d08:	b	f14 <gomp_display_affinity+0x658>
     d0c:	ldr	x0, [sp, #24]
     d10:	ldr	x0, [x0]
     d14:	cmp	x0, #0x0
     d18:	b.eq	d2c <gomp_display_affinity+0x470>  // b.none
     d1c:	ldr	x0, [sp, #24]
     d20:	ldr	x0, [x0]
     d24:	ldr	w0, [x0]
     d28:	b	d30 <gomp_display_affinity+0x474>
     d2c:	mov	w0, #0x1                   	// #1
     d30:	str	w0, [sp, #176]
     d34:	b	f14 <gomp_display_affinity+0x658>
     d38:	ldr	x0, [sp, #24]
     d3c:	ldr	x0, [x0]
     d40:	cmp	x0, #0x0
     d44:	b.eq	d58 <gomp_display_affinity+0x49c>  // b.none
     d48:	ldr	x0, [sp, #24]
     d4c:	ldr	x0, [x0]
     d50:	ldr	w0, [x0, #32]
     d54:	b	d5c <gomp_display_affinity+0x4a0>
     d58:	mov	w0, #0xffffffff            	// #-1
     d5c:	str	w0, [sp, #176]
     d60:	b	f14 <gomp_display_affinity+0x658>
     d64:	add	x0, sp, #0x90
     d68:	ldr	x4, [sp, #184]
     d6c:	ldrb	w3, [sp, #198]
     d70:	mov	x2, x0
     d74:	ldr	x1, [sp, #48]
     d78:	ldr	x0, [sp, #56]
     d7c:	bl	76c <gomp_display_hostname>
     d80:	b	f54 <gomp_display_affinity+0x698>
     d84:	bl	0 <getpid>
     d88:	str	w0, [sp, #176]
     d8c:	b	f14 <gomp_display_affinity+0x658>
     d90:	add	x3, sp, #0x40
     d94:	ldr	x2, [sp, #32]
     d98:	adrp	x0, 0 <gomp_thread>
     d9c:	add	x1, x0, #0x0
     da0:	mov	x0, x3
     da4:	bl	0 <sprintf>
     da8:	add	x1, sp, #0x40
     dac:	add	x0, sp, #0x90
     db0:	mov	x6, x1
     db4:	ldr	x5, [sp, #184]
     db8:	ldrb	w4, [sp, #198]
     dbc:	ldrb	w3, [sp, #199]
     dc0:	mov	x2, x0
     dc4:	ldr	x1, [sp, #48]
     dc8:	ldr	x0, [sp, #56]
     dcc:	bl	3dc <gomp_display_num>
     dd0:	b	f54 <gomp_display_affinity+0x698>
     dd4:	ldr	x0, [sp, #184]
     dd8:	cmn	x0, #0x1
     ddc:	b.ne	e08 <gomp_display_affinity+0x54c>  // b.any
     de0:	ldr	w0, [sp, #20]
     de4:	sub	w0, w0, #0x1
     de8:	mov	w1, w0
     dec:	add	x0, sp, #0x90
     df0:	mov	w3, w1
     df4:	mov	x2, x0
     df8:	ldr	x1, [sp, #48]
     dfc:	ldr	x0, [sp, #56]
     e00:	bl	0 <gomp_display_affinity_place>
     e04:	b	f50 <gomp_display_affinity+0x694>
     e08:	ldrb	w0, [sp, #198]
     e0c:	cmp	w0, #0x0
     e10:	b.eq	e9c <gomp_display_affinity+0x5e0>  // b.none
     e14:	str	xzr, [sp, #128]
     e18:	ldr	w0, [sp, #20]
     e1c:	sub	w0, w0, #0x1
     e20:	mov	w1, w0
     e24:	add	x0, sp, #0x80
     e28:	mov	w3, w1
     e2c:	mov	x2, x0
     e30:	mov	x1, #0x0                   	// #0
     e34:	mov	x0, #0x0                   	// #0
     e38:	bl	0 <gomp_display_affinity_place>
     e3c:	ldr	x0, [sp, #128]
     e40:	ldr	x1, [sp, #184]
     e44:	cmp	x1, x0
     e48:	b.ls	e74 <gomp_display_affinity+0x5b8>  // b.plast
     e4c:	ldr	x0, [sp, #128]
     e50:	ldr	x1, [sp, #184]
     e54:	sub	x1, x1, x0
     e58:	add	x0, sp, #0x90
     e5c:	mov	x4, x1
     e60:	mov	w3, #0x20                  	// #32
     e64:	mov	x2, x0
     e68:	ldr	x1, [sp, #48]
     e6c:	ldr	x0, [sp, #56]
     e70:	bl	2fc <gomp_display_repeat>
     e74:	ldr	w0, [sp, #20]
     e78:	sub	w0, w0, #0x1
     e7c:	mov	w1, w0
     e80:	add	x0, sp, #0x90
     e84:	mov	w3, w1
     e88:	mov	x2, x0
     e8c:	ldr	x1, [sp, #48]
     e90:	ldr	x0, [sp, #56]
     e94:	bl	0 <gomp_display_affinity_place>
     e98:	b	f50 <gomp_display_affinity+0x694>
     e9c:	ldr	x0, [sp, #144]
     ea0:	str	x0, [sp, #152]
     ea4:	ldr	w0, [sp, #20]
     ea8:	sub	w0, w0, #0x1
     eac:	mov	w1, w0
     eb0:	add	x0, sp, #0x90
     eb4:	mov	w3, w1
     eb8:	mov	x2, x0
     ebc:	ldr	x1, [sp, #48]
     ec0:	ldr	x0, [sp, #56]
     ec4:	bl	0 <gomp_display_affinity_place>
     ec8:	ldr	x1, [sp, #144]
     ecc:	ldr	x0, [sp, #152]
     ed0:	sub	x0, x1, x0
     ed4:	ldr	x1, [sp, #184]
     ed8:	cmp	x1, x0
     edc:	b.ls	f50 <gomp_display_affinity+0x694>  // b.plast
     ee0:	ldr	x0, [sp, #144]
     ee4:	ldr	x1, [sp, #152]
     ee8:	sub	x1, x1, x0
     eec:	ldr	x0, [sp, #184]
     ef0:	add	x1, x1, x0
     ef4:	add	x0, sp, #0x90
     ef8:	mov	x4, x1
     efc:	mov	w3, #0x20                  	// #32
     f00:	mov	x2, x0
     f04:	ldr	x1, [sp, #48]
     f08:	ldr	x0, [sp, #56]
     f0c:	bl	2fc <gomp_display_repeat>
     f10:	b	f50 <gomp_display_affinity+0x694>
     f14:	add	x0, sp, #0x90
     f18:	ldr	w6, [sp, #176]
     f1c:	ldr	x5, [sp, #184]
     f20:	ldrb	w4, [sp, #198]
     f24:	ldrb	w3, [sp, #199]
     f28:	mov	x2, x0
     f2c:	ldr	x1, [sp, #48]
     f30:	ldr	x0, [sp, #56]
     f34:	bl	614 <gomp_display_int>
     f38:	b	f54 <gomp_display_affinity+0x698>
     f3c:	ldrb	w0, [sp, #183]
     f40:	mov	w1, w0
     f44:	adrp	x0, 0 <gomp_thread>
     f48:	add	x0, x0, #0x0
     f4c:	bl	0 <gomp_fatal>
     f50:	nop
     f54:	ldr	x0, [sp, #200]
     f58:	add	x0, x0, #0x1
     f5c:	str	x0, [sp, #40]
     f60:	b	8e0 <gomp_display_affinity+0x24>
     f64:	nop
     f68:	ldr	x0, [sp, #144]
     f6c:	ldp	x29, x30, [sp], #208
     f70:	ret

0000000000000f74 <gomp_ialias_omp_capture_affinity>:
     f74:	stp	x29, x30, [sp, #-80]!
     f78:	mov	x29, sp
     f7c:	str	x19, [sp, #16]
     f80:	str	x0, [sp, #56]
     f84:	str	x1, [sp, #48]
     f88:	str	x2, [sp, #40]
     f8c:	bl	0 <gomp_thread>
     f90:	str	x0, [sp, #72]
     f94:	ldr	x0, [sp, #40]
     f98:	cmp	x0, #0x0
     f9c:	b.eq	fb8 <gomp_ialias_omp_capture_affinity+0x44>  // b.none
     fa0:	ldr	x0, [sp, #40]
     fa4:	ldrb	w0, [x0]
     fa8:	cmp	w0, #0x0
     fac:	b.eq	fb8 <gomp_ialias_omp_capture_affinity+0x44>  // b.none
     fb0:	ldr	x19, [sp, #40]
     fb4:	b	fc4 <gomp_ialias_omp_capture_affinity+0x50>
     fb8:	adrp	x0, 0 <gomp_affinity_format_var>
     fbc:	add	x0, x0, #0x0
     fc0:	ldr	x19, [x0]
     fc4:	bl	14 <gomp_thread_self>
     fc8:	mov	x2, x0
     fcc:	ldr	x0, [sp, #72]
     fd0:	add	x1, x0, #0x10
     fd4:	ldr	x0, [sp, #72]
     fd8:	ldr	w0, [x0, #92]
     fdc:	mov	w5, w0
     fe0:	mov	x4, x1
     fe4:	mov	x3, x2
     fe8:	mov	x2, x19
     fec:	ldr	x1, [sp, #48]
     ff0:	ldr	x0, [sp, #56]
     ff4:	bl	8bc <gomp_display_affinity>
     ff8:	str	x0, [sp, #64]
     ffc:	ldr	x0, [sp, #48]
    1000:	cmp	x0, #0x0
    1004:	b.eq	1040 <gomp_ialias_omp_capture_affinity+0xcc>  // b.none
    1008:	ldr	x1, [sp, #64]
    100c:	ldr	x0, [sp, #48]
    1010:	cmp	x1, x0
    1014:	b.cc	1030 <gomp_ialias_omp_capture_affinity+0xbc>  // b.lo, b.ul, b.last
    1018:	ldr	x0, [sp, #48]
    101c:	sub	x0, x0, #0x1
    1020:	ldr	x1, [sp, #56]
    1024:	add	x0, x1, x0
    1028:	strb	wzr, [x0]
    102c:	b	1040 <gomp_ialias_omp_capture_affinity+0xcc>
    1030:	ldr	x1, [sp, #56]
    1034:	ldr	x0, [sp, #64]
    1038:	add	x0, x1, x0
    103c:	strb	wzr, [x0]
    1040:	ldr	x0, [sp, #64]
    1044:	ldr	x19, [sp, #16]
    1048:	ldp	x29, x30, [sp], #80
    104c:	ret

0000000000001050 <omp_display_affinity>:
    1050:	sub	sp, sp, #0x230
    1054:	stp	x29, x30, [sp]
    1058:	mov	x29, sp
    105c:	str	x0, [sp, #24]
    1060:	add	x0, sp, #0x20
    1064:	ldr	x2, [sp, #24]
    1068:	mov	x1, #0x200                 	// #512
    106c:	bl	f74 <gomp_ialias_omp_capture_affinity>
    1070:	str	x0, [sp, #552]
    1074:	ldr	x0, [sp, #552]
    1078:	cmp	x0, #0x1ff
    107c:	b.hi	10a4 <omp_display_affinity+0x54>  // b.pmore
    1080:	ldr	x0, [sp, #552]
    1084:	add	x1, sp, #0x20
    1088:	mov	w2, #0xa                   	// #10
    108c:	strb	w2, [x1, x0]
    1090:	ldr	x0, [sp, #552]
    1094:	add	x1, x0, #0x1
    1098:	add	x0, sp, #0x20
    109c:	bl	28 <gomp_print_string>
    10a0:	b	10fc <omp_display_affinity+0xac>
    10a4:	ldr	x0, [sp, #552]
    10a8:	add	x0, x0, #0x1
    10ac:	bl	0 <gomp_malloc>
    10b0:	str	x0, [sp, #544]
    10b4:	ldr	x0, [sp, #552]
    10b8:	add	x0, x0, #0x1
    10bc:	ldr	x2, [sp, #24]
    10c0:	mov	x1, x0
    10c4:	ldr	x0, [sp, #544]
    10c8:	bl	f74 <gomp_ialias_omp_capture_affinity>
    10cc:	ldr	x1, [sp, #544]
    10d0:	ldr	x0, [sp, #552]
    10d4:	add	x0, x1, x0
    10d8:	mov	w1, #0xa                   	// #10
    10dc:	strb	w1, [x0]
    10e0:	ldr	x0, [sp, #552]
    10e4:	add	x0, x0, #0x1
    10e8:	mov	x1, x0
    10ec:	ldr	x0, [sp, #544]
    10f0:	bl	28 <gomp_print_string>
    10f4:	ldr	x0, [sp, #544]
    10f8:	bl	0 <free>
    10fc:	ldp	x29, x30, [sp]
    1100:	add	sp, sp, #0x230
    1104:	ret

0000000000001108 <gomp_display_affinity_thread>:
    1108:	sub	sp, sp, #0x240
    110c:	stp	x29, x30, [sp]
    1110:	mov	x29, sp
    1114:	str	x0, [sp, #40]
    1118:	str	x1, [sp, #32]
    111c:	str	w2, [sp, #28]
    1120:	adrp	x0, 0 <gomp_affinity_format_var>
    1124:	add	x0, x0, #0x0
    1128:	ldr	x1, [x0]
    112c:	add	x0, sp, #0x30
    1130:	ldr	w5, [sp, #28]
    1134:	ldr	x4, [sp, #32]
    1138:	ldr	x3, [sp, #40]
    113c:	mov	x2, x1
    1140:	mov	x1, #0x200                 	// #512
    1144:	bl	8bc <gomp_display_affinity>
    1148:	str	x0, [sp, #568]
    114c:	ldr	x0, [sp, #568]
    1150:	cmp	x0, #0x1ff
    1154:	b.hi	117c <gomp_display_affinity_thread+0x74>  // b.pmore
    1158:	ldr	x0, [sp, #568]
    115c:	add	x1, sp, #0x30
    1160:	mov	w2, #0xa                   	// #10
    1164:	strb	w2, [x1, x0]
    1168:	ldr	x0, [sp, #568]
    116c:	add	x1, x0, #0x1
    1170:	add	x0, sp, #0x30
    1174:	bl	28 <gomp_print_string>
    1178:	b	11e8 <gomp_display_affinity_thread+0xe0>
    117c:	ldr	x0, [sp, #568]
    1180:	add	x0, x0, #0x1
    1184:	bl	0 <gomp_malloc>
    1188:	str	x0, [sp, #560]
    118c:	ldr	x0, [sp, #568]
    1190:	add	x1, x0, #0x1
    1194:	adrp	x0, 0 <gomp_affinity_format_var>
    1198:	add	x0, x0, #0x0
    119c:	ldr	x0, [x0]
    11a0:	ldr	w5, [sp, #28]
    11a4:	ldr	x4, [sp, #32]
    11a8:	ldr	x3, [sp, #40]
    11ac:	mov	x2, x0
    11b0:	ldr	x0, [sp, #560]
    11b4:	bl	8bc <gomp_display_affinity>
    11b8:	ldr	x1, [sp, #560]
    11bc:	ldr	x0, [sp, #568]
    11c0:	add	x0, x1, x0
    11c4:	mov	w1, #0xa                   	// #10
    11c8:	strb	w1, [x0]
    11cc:	ldr	x0, [sp, #568]
    11d0:	add	x0, x0, #0x1
    11d4:	mov	x1, x0
    11d8:	ldr	x0, [sp, #560]
    11dc:	bl	28 <gomp_print_string>
    11e0:	ldr	x0, [sp, #560]
    11e4:	bl	0 <free>
    11e8:	ldp	x29, x30, [sp]
    11ec:	add	sp, sp, #0x240
    11f0:	ret

teams.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gomp_thread>:
   0:	mrs	x1, tpidr_el0
   4:	adrp	x0, 0 <gomp_tls_data>
   8:	ldr	x0, [x0]
   c:	add	x0, x1, x0
  10:	ret

0000000000000014 <gomp_icv>:
  14:	stp	x29, x30, [sp, #-48]!
  18:	mov	x29, sp
  1c:	strb	w0, [sp, #31]
  20:	bl	0 <gomp_thread>
  24:	ldr	x0, [x0, #80]
  28:	str	x0, [sp, #40]
  2c:	ldr	x0, [sp, #40]
  30:	cmp	x0, #0x0
  34:	b.eq	44 <gomp_icv+0x30>  // b.none
  38:	ldr	x0, [sp, #40]
  3c:	add	x0, x0, #0x90
  40:	b	60 <gomp_icv+0x4c>
  44:	ldrb	w0, [sp, #31]
  48:	cmp	w0, #0x0
  4c:	b.eq	58 <gomp_icv+0x44>  // b.none
  50:	bl	0 <gomp_new_icv>
  54:	b	60 <gomp_icv+0x4c>
  58:	adrp	x0, 0 <gomp_global_icv>
  5c:	add	x0, x0, #0x0
  60:	ldp	x29, x30, [sp], #48
  64:	ret

0000000000000068 <GOMP_teams_reg>:
  68:	stp	x29, x30, [sp, #-80]!
  6c:	mov	x29, sp
  70:	str	x0, [sp, #40]
  74:	str	x1, [sp, #32]
  78:	str	w2, [sp, #28]
  7c:	str	w3, [sp, #24]
  80:	str	w4, [sp, #20]
  84:	str	wzr, [sp, #76]
  88:	ldr	w0, [sp, #24]
  8c:	cmp	w0, #0x0
  90:	b.eq	cc <GOMP_teams_reg+0x64>  // b.none
  94:	mov	w0, #0x1                   	// #1
  98:	bl	14 <gomp_icv>
  9c:	str	x0, [sp, #64]
  a0:	ldr	x0, [sp, #64]
  a4:	ldr	w0, [x0, #20]
  a8:	str	w0, [sp, #76]
  ac:	ldr	w0, [sp, #24]
  b0:	cmp	w0, #0x0
  b4:	b.lt	c0 <GOMP_teams_reg+0x58>  // b.tstop
  b8:	ldr	w0, [sp, #24]
  bc:	b	c4 <GOMP_teams_reg+0x5c>
  c0:	mov	w0, #0xffffffff            	// #-1
  c4:	ldr	x1, [sp, #64]
  c8:	str	w0, [x1, #20]
  cc:	ldr	w0, [sp, #28]
  d0:	cmp	w0, #0x0
  d4:	b.ne	e0 <GOMP_teams_reg+0x78>  // b.any
  d8:	mov	w0, #0x3                   	// #3
  dc:	str	w0, [sp, #28]
  e0:	adrp	x0, 0 <gomp_thread>
  e4:	add	x0, x0, #0x0
  e8:	ldr	w1, [sp, #28]
  ec:	str	w1, [x0]
  f0:	adrp	x0, 0 <gomp_thread>
  f4:	add	x0, x0, #0x0
  f8:	str	wzr, [x0]
  fc:	b	128 <GOMP_teams_reg+0xc0>
 100:	ldr	x1, [sp, #40]
 104:	ldr	x0, [sp, #32]
 108:	blr	x1
 10c:	adrp	x0, 0 <gomp_thread>
 110:	add	x0, x0, #0x0
 114:	ldr	w0, [x0]
 118:	add	w1, w0, #0x1
 11c:	adrp	x0, 0 <gomp_thread>
 120:	add	x0, x0, #0x0
 124:	str	w1, [x0]
 128:	adrp	x0, 0 <gomp_thread>
 12c:	add	x0, x0, #0x0
 130:	ldr	w0, [x0]
 134:	ldr	w1, [sp, #28]
 138:	cmp	w1, w0
 13c:	b.hi	100 <GOMP_teams_reg+0x98>  // b.pmore
 140:	adrp	x0, 0 <gomp_thread>
 144:	add	x0, x0, #0x0
 148:	mov	w1, #0x1                   	// #1
 14c:	str	w1, [x0]
 150:	adrp	x0, 0 <gomp_thread>
 154:	add	x0, x0, #0x0
 158:	str	wzr, [x0]
 15c:	ldr	w0, [sp, #24]
 160:	cmp	w0, #0x0
 164:	b.eq	180 <GOMP_teams_reg+0x118>  // b.none
 168:	mov	w0, #0x1                   	// #1
 16c:	bl	14 <gomp_icv>
 170:	str	x0, [sp, #56]
 174:	ldr	x0, [sp, #56]
 178:	ldr	w1, [sp, #76]
 17c:	str	w1, [x0, #20]
 180:	nop
 184:	ldp	x29, x30, [sp], #80
 188:	ret

000000000000018c <gomp_ialias_omp_get_num_teams>:
 18c:	adrp	x0, 0 <gomp_thread>
 190:	add	x0, x0, #0x0
 194:	ldr	w0, [x0]
 198:	ret

000000000000019c <gomp_ialias_omp_get_team_num>:
 19c:	adrp	x0, 0 <gomp_thread>
 1a0:	add	x0, x0, #0x0
 1a4:	ldr	w0, [x0]
 1a8:	ret
